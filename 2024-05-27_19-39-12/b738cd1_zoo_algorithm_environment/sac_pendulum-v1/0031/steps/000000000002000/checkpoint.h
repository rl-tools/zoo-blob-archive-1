// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 14, 116, 190, 175, 23, 18, 191, 209, 124, 132, 62, 38, 195, 44, 191, 64, 41, 186, 190, 229, 5, 169, 62, 145, 82, 200, 62, 51, 162, 145, 190, 155, 206, 25, 62, 127, 131, 168, 190, 50, 19, 227, 62, 159, 109, 221, 62, 109, 111, 92, 190, 10, 180, 35, 191, 195, 127, 157, 190, 124, 64, 9, 63, 202, 139, 29, 63, 141, 242, 171, 62, 47, 234, 243, 62, 201, 215, 44, 63, 114, 126, 252, 62, 135, 145, 92, 190, 229, 202, 111, 191, 110, 171, 106, 61, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 103, 178, 225, 190, 177, 60, 50, 62, 131, 16, 68, 62, 19, 163, 132, 189, 198, 178, 77, 191, 74, 235, 194, 190, 240, 213, 212, 189, 64, 70, 45, 191, 197, 221, 208, 189, 255, 28, 190, 62, 75, 218, 178, 62, 73, 229, 57, 190, 137, 190, 235, 62, 16, 36, 78, 190, 62, 139, 131, 190, 179, 133, 68, 187, 52, 217, 136, 191, 209, 105, 253, 62, 111, 16, 207, 190, 185, 121, 139, 62, 20, 128, 199, 190, 229, 253, 33, 63, 70, 142, 189, 189, 154, 245, 241, 62, 32, 214, 172, 190, 115, 197, 121, 191, 185, 155, 183, 189, 33, 82, 131, 190, 5, 98, 80, 62, 200, 5, 212, 62, 192, 2, 141, 61, 213, 208, 129, 189, 143, 240, 107, 62, 66, 252, 61, 191, 120, 6, 167, 62, 52, 223, 6, 191, 173, 110, 173, 190, 79, 178, 158, 190, 8, 21, 130, 190, 236, 131, 142, 189, 101, 206, 137, 62, 251, 19, 151, 62, 105, 134, 161, 60, 73, 238, 19, 63, 194, 150, 239, 190, 47, 116, 209, 62, 159, 192, 2, 62, 148, 14, 188, 190, 215, 120, 19, 63, 172, 216, 13, 191, 33, 230, 169, 62, 236, 234, 104, 190, 112, 30, 184, 62, 207, 8, 8, 191, 7, 222, 2, 63, 204, 81, 0, 62, 53, 176, 246, 62, 3, 132, 203, 60, 20, 75, 114, 63, 215, 5, 207, 62, 17, 93, 208, 62, 75, 115, 2, 63, 225, 34, 220, 190, 85, 114, 178, 62, 143, 203, 73, 191, 165, 31, 71, 190, 92, 78, 52, 62, 10, 202, 90, 191, 183, 216, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 33, 253, 190, 239, 246, 220, 190, 41, 178, 5, 63, 124, 221, 143, 59, 108, 71, 147, 189, 43, 151, 43, 62, 234, 214, 179, 190, 213, 56, 175, 60, 52, 10, 240, 189, 29, 84, 99, 190, 238, 35, 204, 62, 224, 104, 219, 62, 109, 125, 30, 63, 173, 206, 135, 61, 124, 10, 199, 62, 23, 17, 16, 63, 132, 129, 25, 62, 118, 76, 17, 190, 102, 235, 144, 62, 153, 198, 206, 190, 227, 1, 33, 189, 170, 224, 164, 62, 38, 24, 35, 63, 57, 163, 96, 190, 17, 25, 160, 190, 11, 188, 96, 190, 165, 139, 24, 63, 114, 191, 12, 191, 95, 128, 245, 62, 170, 171, 199, 190, 221, 55, 10, 63, 187, 115, 4, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 227, 237, 189, 12, 173, 44, 190, 2, 193, 213, 61, 154, 255, 220, 61, 195, 144, 213, 60, 221, 131, 135, 60, 111, 88, 73, 188, 143, 76, 13, 190, 204, 15, 160, 61, 27, 44, 211, 61, 147, 42, 130, 190, 155, 70, 106, 59, 34, 147, 8, 62, 29, 52, 56, 188, 218, 47, 201, 58, 52, 143, 146, 61, 220, 251, 193, 189, 113, 63, 128, 190, 37, 22, 213, 189, 130, 40, 9, 190, 118, 94, 42, 62, 11, 94, 10, 62, 168, 130, 233, 61, 233, 24, 56, 190, 220, 33, 13, 190, 92, 62, 242, 60, 26, 109, 32, 188, 217, 134, 17, 190, 103, 27, 59, 62, 191, 101, 36, 61, 59, 180, 135, 189, 21, 161, 41, 61, 156, 0, 116, 188, 244, 218, 185, 58, 153, 150, 7, 62, 188, 103, 88, 61, 184, 161, 108, 61, 156, 86, 118, 60, 231, 163, 130, 189, 253, 146, 19, 190, 192, 165, 218, 189, 233, 229, 229, 189, 95, 158, 38, 62, 238, 175, 195, 189, 188, 103, 237, 189, 172, 9, 13, 61, 206, 248, 73, 190, 124, 136, 125, 189, 126, 248, 30, 190, 152, 11, 51, 61, 51, 133, 74, 190, 202, 228, 24, 188, 130, 100, 11, 62, 203, 194, 233, 61, 134, 89, 131, 62, 219, 71, 244, 61, 160, 40, 151, 61, 158, 16, 22, 190, 146, 109, 56, 190, 12, 158, 137, 60, 150, 23, 27, 190, 91, 1, 11, 190, 166, 61, 212, 189, 75, 69, 60, 190, 116, 80, 211, 61, 161, 228, 162, 188, 22, 162, 0, 189, 47, 209, 22, 190, 226, 237, 72, 189, 29, 183, 197, 187, 125, 153, 43, 188, 110, 74, 90, 60, 231, 25, 111, 60, 216, 236, 19, 190, 88, 210, 178, 189, 114, 126, 251, 189, 148, 89, 47, 61, 250, 215, 220, 188, 235, 80, 182, 189, 147, 242, 64, 188, 127, 231, 34, 190, 227, 72, 55, 190, 77, 146, 172, 189, 115, 32, 229, 61, 173, 44, 13, 62, 92, 83, 35, 61, 106, 245, 206, 189, 241, 249, 215, 61, 73, 144, 168, 61, 136, 226, 84, 189, 166, 76, 240, 61, 78, 73, 236, 61, 0, 253, 156, 189, 177, 197, 35, 62, 214, 118, 117, 61, 235, 100, 168, 189, 131, 70, 215, 189, 153, 42, 104, 61, 160, 53, 16, 62, 34, 210, 33, 60, 169, 131, 75, 59, 105, 151, 195, 189, 201, 94, 177, 189, 165, 14, 152, 62, 227, 188, 15, 62, 187, 13, 167, 189, 65, 144, 165, 189, 101, 33, 182, 61, 3, 242, 80, 190, 99, 95, 19, 190, 83, 51, 133, 62, 130, 85, 175, 61, 36, 232, 53, 58, 224, 9, 95, 62, 71, 218, 29, 62, 41, 111, 78, 61, 249, 28, 65, 190, 33, 5, 180, 61, 136, 243, 28, 190, 217, 101, 124, 190, 28, 104, 65, 189, 29, 151, 107, 190, 239, 172, 43, 190, 109, 76, 247, 189, 23, 222, 148, 61, 101, 209, 124, 60, 134, 163, 242, 61, 158, 103, 121, 62, 168, 64, 242, 187, 240, 121, 132, 190, 187, 148, 214, 60, 211, 59, 200, 60, 213, 162, 24, 190, 246, 179, 83, 62, 88, 45, 4, 62, 8, 210, 182, 190, 159, 253, 166, 188, 226, 119, 86, 59, 49, 163, 172, 189, 239, 173, 140, 189, 215, 62, 122, 62, 227, 76, 42, 190, 200, 189, 119, 190, 17, 1, 123, 62, 48, 234, 207, 189, 109, 226, 79, 190, 129, 6, 188, 189, 211, 239, 55, 190, 87, 53, 182, 60, 216, 231, 149, 189, 53, 27, 90, 61, 36, 222, 2, 62, 128, 107, 92, 190, 158, 24, 159, 189, 163, 232, 91, 62, 224, 116, 9, 190, 250, 137, 33, 62, 224, 198, 94, 189, 169, 103, 64, 190, 216, 197, 127, 189, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 43, 151, 162, 61, 6, 161, 5, 62, 123, 111, 46, 62, 166, 93, 100, 189, 177, 146, 79, 62, 240, 167, 136, 59, 82, 118, 202, 189, 166, 112, 245, 61, 108, 119, 1, 189, 215, 155, 23, 62, 49, 126, 218, 61, 206, 160, 90, 62, 79, 94, 79, 189, 6, 28, 243, 61, 200, 219, 0, 62, 236, 115, 146, 60, 252, 247, 209, 189, 158, 186, 2, 189, 197, 155, 224, 189, 168, 184, 247, 60, 66, 152, 18, 190, 200, 12, 6, 189, 18, 203, 185, 61, 174, 218, 46, 61, 109, 172, 176, 189, 187, 150, 116, 60, 70, 129, 167, 188, 159, 15, 162, 188, 39, 206, 182, 61, 200, 210, 8, 61, 216, 114, 15, 189, 198, 125, 133, 61, 16, 110, 80, 188, 68, 172, 215, 188, 242, 74, 112, 61, 133, 162, 40, 187, 113, 14, 178, 188, 128, 128, 139, 189, 213, 69, 192, 187, 3, 68, 55, 190, 12, 44, 15, 62, 173, 240, 70, 190, 47, 54, 5, 190, 197, 161, 123, 188, 220, 19, 22, 190, 149, 147, 112, 61, 146, 249, 30, 190, 246, 96, 140, 59, 142, 253, 210, 60, 80, 122, 29, 62, 184, 5, 126, 60, 199, 61, 47, 190, 181, 15, 132, 61, 172, 65, 239, 189, 245, 11, 243, 61, 173, 77, 21, 190, 163, 44, 134, 188, 57, 143, 29, 190, 56, 38, 203, 61, 189, 7, 26, 59, 168, 81, 5, 190, 164, 222, 8, 62, 178, 42, 63, 190, 191, 228, 205, 61, 157, 178, 71, 189, 194, 176, 170, 188, 5, 247, 65, 187, 28, 168, 251, 189, 53, 234, 144, 189, 153, 157, 140, 61, 167, 185, 60, 62, 190, 39, 223, 190, 117, 116, 31, 190, 131, 171, 14, 190, 129, 25, 144, 60, 167, 31, 32, 190, 115, 22, 94, 62, 17, 135, 159, 190, 116, 66, 95, 61, 68, 202, 112, 62, 81, 129, 104, 62, 219, 255, 137, 190, 155, 200, 241, 188, 35, 7, 8, 62, 92, 130, 84, 62, 51, 72, 249, 189, 155, 39, 239, 61, 213, 129, 11, 190, 156, 31, 174, 190, 236, 43, 69, 61, 218, 199, 165, 61, 26, 164, 193, 61, 176, 76, 219, 187, 249, 160, 206, 189, 215, 48, 163, 189, 219, 193, 82, 190, 89, 80, 253, 189, 238, 194, 128, 61, 242, 182, 174, 189, 166, 98, 129, 187, 190, 66, 198, 61, 18, 52, 13, 61, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 90, 209, 33, 190, 145, 217, 55, 189, 206, 87, 21, 62, 34, 183, 31, 190, 79, 122, 84, 61, 47, 235, 180, 188, 233, 159, 43, 61, 110, 201, 172, 61, 190, 101, 0, 190, 156, 248, 11, 190, 216, 34, 24, 62, 72, 211, 8, 190, 223, 164, 53, 190, 113, 233, 192, 189, 135, 184, 54, 61, 224, 6, 220, 188, 97, 54, 42, 190, 157, 94, 110, 61, 167, 121, 39, 60, 15, 232, 12, 189, 10, 7, 214, 61, 200, 88, 251, 189, 241, 44, 153, 189, 200, 252, 81, 188, 91, 188, 111, 189, 253, 60, 59, 62, 113, 145, 22, 62, 101, 63, 3, 189, 230, 57, 182, 189, 125, 29, 199, 188, 214, 160, 48, 62, 184, 161, 147, 189, 87, 37, 174, 61, 52, 133, 249, 61, 160, 217, 219, 61, 57, 36, 242, 60, 197, 6, 11, 189, 63, 217, 14, 62, 10, 86, 4, 190, 173, 141, 169, 61, 123, 104, 12, 62, 30, 172, 53, 62, 146, 63, 119, 190, 214, 253, 54, 61, 17, 192, 34, 62, 237, 137, 204, 189, 113, 117, 40, 62, 164, 69, 91, 61, 161, 177, 131, 188, 251, 61, 160, 60, 247, 224, 198, 61, 126, 205, 61, 190, 152, 32, 45, 61, 72, 208, 11, 62, 192, 20, 169, 62, 89, 85, 46, 190, 251, 58, 206, 62, 10, 43, 197, 61, 71, 11, 246, 189, 213, 69, 108, 187, 90, 237, 175, 190, 82, 111, 190, 190, 193, 47, 225, 62, 248, 165, 167, 61, 206, 169, 35, 62, 161, 206, 34, 189, 36, 238, 161, 61, 82, 202, 27, 62, 141, 186, 36, 61, 116, 220, 154, 62, 70, 52, 24, 190, 222, 149, 166, 190, 74, 154, 7, 61, 54, 184, 255, 61, 240, 149, 28, 190, 143, 207, 87, 189, 53, 33, 19, 62, 144, 135, 165, 189, 133, 63, 165, 60, 152, 26, 124, 62, 170, 142, 223, 190, 170, 117, 225, 61, 214, 31, 158, 189, 226, 179, 150, 190, 33, 5, 198, 61, 175, 217, 62, 62, 148, 109, 63, 62, 157, 155, 0, 190, 166, 101, 130, 60, 254, 36, 201, 189, 83, 239, 178, 189, 128, 111, 170, 61, 219, 133, 160, 61, 176, 208, 26, 187, 142, 102, 44, 190, 205, 60, 27, 190, 79, 145, 31, 62, 3, 110, 5, 190, 168, 24, 220, 189, 60, 7, 138, 62, 5, 206, 79, 61, 202, 60, 171, 190, 95, 58, 21, 62, 44, 142, 82, 189, 204, 229, 15, 61, 21, 110, 36, 62, 195, 90, 38, 58, 70, 244, 131, 61, 16, 0, 65, 62, 181, 81, 182, 60, 246, 65, 226, 61, 128, 179, 66, 190, 183, 222, 14, 62, 228, 48, 146, 61, 10, 159, 31, 189, 210, 23, 106, 62, 16, 55, 3, 190, 24, 137, 12, 189, 25, 184, 147, 190, 16, 28, 25, 62, 122, 162, 206, 188, 243, 34, 161, 61, 207, 30, 180, 60, 29, 111, 85, 190, 45, 8, 186, 60, 185, 150, 102, 188, 120, 250, 105, 190, 147, 92, 110, 61, 231, 38, 17, 62, 174, 217, 221, 189, 157, 240, 141, 189, 60, 179, 133, 62, 251, 166, 15, 189, 177, 242, 156, 189, 193, 185, 124, 60, 25, 16, 246, 61, 20, 227, 81, 190, 55, 153, 97, 61, 208, 127, 228, 58, 96, 205, 48, 62, 117, 117, 252, 189, 19, 249, 147, 61, 150, 226, 128, 189, 255, 163, 252, 189, 152, 76, 170, 62, 61, 166, 120, 62, 223, 4, 84, 189, 218, 33, 171, 61, 130, 114, 26, 190, 200, 136, 212, 189, 230, 170, 212, 189, 180, 192, 9, 190, 171, 63, 142, 61, 100, 130, 130, 62, 18, 170, 16, 61, 12, 252, 214, 61, 13, 178, 164, 190, 240, 27, 224, 189, 232, 166, 202, 62, 149, 84, 205, 189, 166, 62, 74, 61, 30, 48, 145, 187, 181, 41, 130, 62, 200, 4, 171, 188, 94, 88, 140, 62, 156, 252, 136, 62, 184, 19, 24, 61, 140, 78, 170, 190, 227, 6, 44, 62, 243, 18, 20, 62, 151, 190, 253, 189, 226, 102, 38, 189, 25, 193, 226, 61, 20, 108, 76, 61, 179, 17, 130, 61, 95, 196, 129, 189, 45, 162, 110, 190, 111, 17, 170, 189, 219, 34, 161, 61, 89, 88, 132, 190, 205, 98, 128, 61, 156, 66, 17, 61, 149, 55, 153, 62, 50, 111, 61, 61, 233, 18, 90, 190, 172, 67, 49, 190, 224, 15, 242, 61, 10, 140, 114, 189, 54, 80, 33, 61, 5, 237, 44, 188, 219, 191, 62, 190, 194, 150, 202, 61, 111, 72, 250, 61, 79, 180, 74, 60, 3, 254, 57, 61, 36, 24, 175, 189, 3, 217, 189, 61, 196, 98, 250, 61, 106, 175, 152, 189, 15, 169, 4, 62, 151, 219, 146, 188, 219, 25, 8, 62, 165, 209, 202, 61, 144, 248, 14, 190, 207, 7, 67, 190, 70, 203, 202, 189, 155, 118, 118, 189, 252, 167, 18, 190, 55, 150, 3, 190, 107, 82, 207, 189, 110, 13, 43, 62, 170, 176, 178, 189, 192, 111, 51, 62, 66, 12, 244, 188, 173, 122, 76, 190, 208, 8, 134, 61, 126, 30, 30, 62, 139, 52, 100, 189, 30, 164, 254, 187, 128, 210, 192, 60, 146, 19, 56, 187, 206, 13, 155, 189, 214, 60, 166, 61, 239, 18, 1, 190, 139, 98, 231, 188, 28, 13, 39, 190, 29, 83, 28, 190, 62, 232, 4, 189, 150, 121, 193, 188, 78, 220, 33, 190, 53, 129, 31, 190, 224, 5, 141, 61, 96, 239, 107, 189, 195, 232, 184, 61, 183, 62, 22, 190, 169, 175, 60, 189, 13, 25, 183, 61, 157, 80, 28, 189, 141, 242, 238, 61, 153, 220, 10, 61, 52, 133, 157, 61, 155, 106, 129, 61, 117, 85, 0, 190, 110, 118, 86, 59, 183, 61, 20, 189, 253, 215, 192, 189, 168, 166, 9, 190, 43, 141, 134, 190, 224, 185, 106, 62, 99, 166, 137, 60, 84, 88, 198, 60, 182, 192, 20, 62, 253, 88, 157, 190, 190, 176, 11, 190, 65, 197, 143, 62, 48, 91, 10, 190, 16, 56, 126, 62, 43, 55, 187, 61, 174, 76, 96, 61, 30, 204, 4, 62, 190, 185, 111, 61, 35, 137, 87, 62, 135, 49, 10, 190, 142, 24, 86, 190, 147, 150, 196, 60, 8, 170, 156, 61, 125, 196, 148, 190, 178, 254, 102, 58, 44, 208, 221, 61, 234, 110, 38, 189, 131, 76, 18, 190, 134, 146, 83, 62, 91, 157, 178, 190, 6, 144, 218, 189, 97, 183, 250, 189, 62, 173, 138, 190, 93, 13, 173, 61, 67, 21, 136, 62, 197, 50, 159, 62, 220, 109, 27, 61, 193, 49, 67, 61, 241, 144, 5, 189, 142, 94, 232, 189, 145, 18, 45, 188, 229, 194, 61, 61, 69, 48, 227, 61, 172, 144, 214, 190, 87, 98, 255, 61, 166, 254, 68, 189, 226, 49, 232, 61, 251, 135, 167, 189, 120, 187, 114, 62, 112, 38, 129, 190, 253, 190, 186, 186, 15, 243, 139, 189, 185, 113, 82, 189, 65, 144, 150, 190, 76, 17, 86, 61, 226, 7, 223, 61, 94, 150, 83, 189, 238, 189, 238, 61, 136, 169, 250, 60, 201, 68, 0, 61, 168, 37, 96, 188, 174, 189, 26, 189, 251, 27, 36, 62, 22, 174, 237, 189, 188, 147, 129, 62, 89, 128, 57, 61, 252, 208, 117, 189, 21, 186, 246, 61, 175, 138, 5, 190, 174, 49, 58, 62, 172, 200, 34, 189, 180, 163, 49, 189, 63, 212, 55, 62, 230, 43, 227, 189, 236, 186, 15, 189, 25, 76, 7, 62, 250, 101, 9, 190, 228, 162, 59, 190, 81, 168, 31, 61, 165, 215, 166, 188, 250, 113, 71, 61, 21, 96, 181, 61, 194, 123, 3, 62, 177, 9, 205, 189, 21, 155, 75, 189, 6, 82, 190, 61, 144, 157, 7, 187, 148, 21, 20, 190, 36, 242, 95, 60, 193, 176, 151, 61, 23, 131, 69, 61, 145, 135, 147, 61, 32, 158, 19, 189, 33, 48, 94, 190, 180, 106, 138, 61, 142, 111, 147, 61, 236, 155, 183, 61, 19, 168, 156, 189, 158, 86, 147, 188, 222, 165, 201, 61, 132, 24, 30, 62, 229, 202, 146, 61, 203, 43, 145, 62, 9, 243, 42, 190, 61, 101, 134, 60, 32, 20, 57, 61, 0, 114, 25, 62, 186, 6, 33, 62, 108, 246, 71, 188, 70, 252, 247, 189, 125, 237, 3, 190, 149, 18, 203, 61, 160, 235, 129, 62, 198, 16, 132, 61, 180, 87, 61, 62, 181, 139, 146, 188, 3, 28, 48, 62, 27, 200, 45, 61, 20, 5, 59, 62, 113, 11, 27, 62, 215, 166, 8, 191, 177, 24, 45, 190, 121, 74, 46, 61, 110, 38, 83, 62, 102, 120, 20, 190, 34, 98, 139, 62, 17, 221, 111, 190, 118, 97, 6, 62, 67, 5, 41, 190, 207, 219, 22, 190, 64, 204, 192, 61, 109, 223, 35, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 226, 171, 6, 190, 215, 14, 99, 62, 26, 178, 209, 188, 6, 66, 66, 189, 166, 50, 87, 62, 182, 68, 211, 59, 155, 141, 151, 61, 68, 147, 167, 62, 0, 19, 129, 61, 100, 0, 183, 60, 176, 133, 164, 61, 71, 48, 151, 189, 128, 66, 174, 189, 171, 143, 37, 62, 207, 93, 230, 61, 193, 246, 173, 61, 192, 249, 52, 190, 74, 196, 23, 60, 179, 194, 219, 189, 34, 34, 146, 61, 180, 20, 8, 189, 62, 23, 235, 189, 30, 158, 104, 61, 56, 165, 19, 62, 106, 116, 62, 62, 53, 237, 145, 190, 175, 220, 180, 189, 10, 249, 220, 60, 211, 222, 135, 61, 177, 191, 113, 61, 93, 153, 80, 62, 144, 106, 148, 188, 79, 242, 233, 189, 41, 55, 199, 189, 89, 220, 33, 189, 203, 82, 44, 62, 90, 107, 139, 189, 78, 0, 85, 189, 96, 61, 145, 188, 243, 3, 136, 61, 166, 2, 70, 61, 229, 43, 200, 60, 150, 161, 25, 190, 180, 219, 157, 188, 190, 114, 80, 188, 240, 59, 143, 61, 12, 246, 220, 189, 89, 253, 69, 61, 52, 232, 119, 189, 226, 145, 104, 189, 138, 41, 104, 189, 116, 139, 27, 190, 149, 0, 35, 61, 137, 26, 165, 189, 183, 142, 232, 189, 179, 202, 65, 188, 189, 227, 200, 189, 252, 6, 40, 60, 119, 216, 44, 190, 55, 61, 138, 188, 147, 33, 136, 189, 162, 242, 127, 61, 230, 245, 45, 62, 233, 38, 139, 189, 36, 88, 63, 189, 178, 42, 185, 189, 52, 27, 88, 62, 48, 59, 8, 190, 60, 123, 23, 189, 127, 200, 198, 189, 240, 227, 144, 189, 237, 105, 161, 62, 71, 121, 190, 189, 10, 88, 227, 189, 63, 120, 218, 188, 201, 90, 86, 61, 36, 98, 4, 190, 43, 152, 101, 62, 76, 238, 164, 57, 45, 52, 31, 62, 255, 91, 136, 61, 224, 192, 233, 61, 23, 45, 205, 189, 7, 255, 47, 189, 52, 253, 24, 190, 210, 159, 133, 61, 89, 165, 190, 188, 16, 2, 14, 62, 16, 165, 188, 188, 115, 30, 199, 59, 145, 213, 83, 188, 158, 219, 196, 61, 95, 188, 85, 61, 100, 40, 20, 62, 30, 230, 78, 62, 55, 122, 49, 189, 184, 165, 47, 62, 139, 34, 39, 61, 175, 96, 171, 189, 202, 203, 27, 190, 26, 33, 18, 62, 172, 70, 94, 61, 67, 123, 222, 189, 5, 219, 145, 189, 114, 40, 152, 189, 226, 107, 115, 61, 5, 191, 159, 60, 121, 8, 42, 190, 215, 216, 31, 189, 184, 239, 179, 60, 202, 19, 149, 187, 103, 203, 225, 189, 131, 31, 41, 62, 182, 184, 136, 61, 5, 150, 24, 62, 100, 234, 40, 190, 179, 208, 0, 62, 148, 208, 177, 61, 229, 12, 149, 61, 160, 45, 22, 190, 252, 1, 99, 189, 202, 151, 222, 60, 164, 132, 0, 190, 81, 2, 11, 190, 8, 14, 179, 189, 50, 75, 122, 189, 160, 230, 193, 61, 184, 164, 235, 189, 220, 123, 27, 62, 214, 11, 190, 189, 115, 50, 9, 62, 53, 200, 200, 188, 7, 19, 7, 61, 160, 152, 88, 62, 53, 146, 207, 61, 229, 175, 33, 190, 156, 253, 252, 189, 161, 10, 150, 189, 223, 92, 29, 61, 13, 203, 27, 190, 20, 79, 38, 62, 68, 36, 141, 190, 2, 43, 52, 190, 155, 249, 181, 189, 121, 215, 105, 62, 69, 125, 105, 190, 192, 244, 82, 60, 64, 59, 118, 189, 77, 54, 15, 62, 106, 163, 90, 189, 154, 240, 126, 62, 52, 211, 98, 61, 192, 17, 76, 190, 15, 243, 45, 62, 159, 91, 78, 62, 35, 223, 99, 188, 139, 27, 52, 62, 142, 51, 161, 190, 98, 14, 18, 189, 215, 229, 42, 190, 226, 130, 47, 189, 48, 54, 41, 190, 196, 184, 190, 189, 39, 208, 70, 189, 31, 205, 3, 62, 96, 31, 242, 189, 50, 23, 157, 188, 123, 38, 21, 62, 29, 222, 233, 61, 171, 170, 32, 62, 3, 250, 248, 189, 34, 91, 70, 61, 37, 183, 29, 62, 138, 5, 152, 61, 200, 195, 176, 61, 173, 163, 48, 190, 204, 29, 34, 190, 239, 190, 14, 190, 28, 187, 0, 61, 14, 142, 203, 189, 191, 75, 108, 61, 55, 252, 16, 62, 222, 40, 42, 190, 195, 148, 197, 57, 208, 11, 246, 188, 61, 5, 156, 61, 20, 105, 139, 189, 169, 248, 229, 61, 176, 97, 203, 58, 102, 0, 172, 189, 170, 131, 32, 190, 225, 129, 183, 61, 35, 78, 22, 62, 154, 233, 112, 190, 129, 68, 134, 190, 198, 153, 116, 60, 237, 203, 18, 61, 3, 67, 15, 60, 65, 227, 132, 189, 69, 138, 207, 190, 83, 46, 6, 190, 140, 184, 77, 189, 207, 81, 97, 190, 171, 105, 196, 61, 9, 151, 160, 189, 236, 116, 238, 189, 136, 147, 109, 188, 138, 57, 119, 62, 121, 247, 187, 188, 34, 6, 114, 189, 212, 49, 69, 189, 37, 116, 108, 60, 159, 158, 55, 62, 134, 87, 22, 62, 214, 148, 25, 62, 67, 14, 123, 189, 218, 195, 212, 189, 119, 90, 67, 61, 214, 180, 87, 187, 137, 218, 165, 61, 109, 132, 181, 188, 79, 86, 157, 190, 31, 221, 10, 190, 93, 15, 45, 59, 78, 225, 86, 190, 138, 27, 169, 61, 179, 208, 206, 189, 20, 157, 237, 189, 183, 127, 221, 189, 224, 53, 15, 189, 62, 223, 28, 190, 100, 220, 27, 187, 233, 208, 35, 62, 185, 102, 45, 59, 2, 13, 253, 59, 176, 74, 54, 62, 135, 98, 62, 62, 125, 78, 178, 188, 66, 221, 188, 61, 221, 208, 25, 188, 141, 43, 80, 190, 252, 216, 19, 190, 48, 51, 43, 61, 168, 81, 1, 190, 84, 127, 90, 190, 209, 53, 155, 188, 123, 50, 102, 62, 167, 227, 8, 190, 71, 121, 19, 62, 145, 49, 131, 190, 46, 178, 27, 61, 228, 50, 3, 187, 152, 131, 63, 62, 54, 90, 18, 62, 30, 136, 53, 190, 75, 246, 201, 61, 208, 25, 27, 189, 221, 135, 157, 60, 48, 66, 243, 61, 168, 233, 87, 189, 203, 69, 207, 61, 118, 93, 54, 190, 92, 238, 52, 190, 177, 170, 243, 61, 20, 37, 154, 61, 104, 181, 142, 189, 253, 231, 65, 61, 242, 122, 1, 189, 114, 205, 28, 190, 14, 200, 76, 190, 102, 237, 204, 61, 68, 130, 197, 188, 179, 82, 160, 188, 59, 50, 52, 189, 61, 84, 120, 61, 48, 213, 3, 61, 222, 176, 16, 189, 99, 171, 17, 188, 196, 219, 138, 62, 195, 245, 60, 190, 227, 67, 57, 190, 116, 223, 238, 61, 149, 152, 99, 189, 78, 155, 101, 189, 28, 131, 115, 189, 228, 94, 61, 190, 146, 21, 65, 61, 133, 164, 252, 61, 91, 158, 20, 190, 54, 61, 255, 189, 6, 179, 46, 62, 157, 20, 0, 190, 113, 227, 245, 60, 4, 136, 176, 189, 225, 128, 234, 60, 80, 112, 144, 189, 103, 130, 249, 61, 29, 202, 47, 190, 105, 193, 186, 61, 78, 126, 1, 190, 215, 104, 78, 60, 252, 37, 20, 62, 149, 152, 163, 189, 157, 0, 3, 190, 100, 155, 49, 190, 33, 120, 255, 188, 214, 60, 45, 190, 237, 116, 236, 61, 38, 44, 43, 190, 163, 230, 231, 61, 190, 246, 32, 190, 168, 214, 159, 60, 30, 182, 110, 189, 115, 154, 28, 190, 174, 80, 184, 188, 1, 86, 42, 190, 62, 186, 31, 62, 220, 71, 187, 189, 163, 178, 83, 189, 57, 19, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 255, 25, 62, 223, 178, 196, 189, 72, 135, 184, 189, 80, 148, 19, 62, 195, 210, 127, 62, 172, 210, 206, 189, 6, 171, 79, 62, 174, 212, 3, 61, 2, 192, 127, 62, 27, 216, 203, 61, 192, 182, 213, 189, 23, 71, 70, 62, 69, 175, 96, 61, 217, 141, 57, 62, 65, 163, 243, 189, 192, 192, 89, 190, 102, 57, 64, 188, 9, 72, 163, 61, 158, 67, 161, 61, 28, 225, 194, 189, 239, 33, 35, 189, 20, 252, 5, 190, 78, 162, 83, 61, 149, 90, 12, 62, 130, 225, 130, 61, 25, 185, 233, 189, 240, 21, 254, 61, 101, 126, 85, 60, 226, 232, 151, 60, 252, 23, 187, 189, 115, 144, 24, 61, 34, 38, 233, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 220, 118, 190, 178, 104, 144, 189, 145, 150, 194, 61, 174, 24, 93, 62, 173, 29, 180, 190, 220, 46, 129, 189, 231, 103, 6, 62, 36, 105, 143, 60, 35, 58, 183, 190, 147, 203, 0, 62, 183, 21, 53, 62, 208, 169, 141, 62, 113, 100, 153, 190, 176, 123, 22, 190, 13, 252, 146, 62, 180, 184, 89, 60, 8, 2, 25, 189, 228, 113, 103, 62, 148, 19, 198, 189, 41, 189, 187, 61, 237, 26, 88, 190, 199, 237, 40, 62, 230, 217, 13, 62, 156, 77, 184, 60, 107, 191, 39, 62, 220, 95, 180, 189, 114, 247, 170, 190, 186, 207, 126, 188, 65, 59, 110, 190, 161, 71, 233, 61, 3, 176, 118, 61, 34, 222, 126, 61, 43, 209, 200, 60, 152, 74, 245, 61, 68, 81, 7, 190, 196, 169, 228, 189, 97, 111, 126, 190, 226, 14, 116, 189, 62, 142, 60, 190, 93, 207, 211, 61, 175, 113, 190, 60, 84, 156, 203, 188, 30, 195, 40, 190, 66, 208, 178, 187, 161, 188, 7, 189, 12, 172, 106, 189, 188, 253, 182, 61, 247, 159, 30, 62, 144, 39, 237, 61, 100, 151, 244, 59, 239, 92, 246, 189, 102, 194, 143, 61, 185, 16, 221, 60, 68, 75, 86, 61, 35, 33, 28, 60, 89, 209, 27, 62, 18, 124, 96, 190, 35, 78, 243, 61, 25, 37, 180, 189, 64, 167, 0, 189, 117, 79, 163, 61, 87, 207, 7, 190, 248, 206, 26, 189, 67, 85, 95, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 213, 159, 189, 85, 115, 138, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 75, 194, 62, 174, 197, 183, 191, 142, 130, 51, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 34, 42, 64, 29, 42, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}