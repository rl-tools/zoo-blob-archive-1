// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 84, 42, 191, 142, 96, 47, 191, 50, 11, 206, 62, 201, 97, 34, 191, 146, 134, 77, 63, 189, 168, 17, 63, 9, 177, 155, 62, 2, 42, 222, 62, 9, 179, 186, 62, 127, 215, 217, 190, 66, 241, 211, 63, 144, 137, 213, 62, 31, 60, 22, 63, 214, 252, 127, 191, 182, 163, 137, 190, 226, 67, 33, 63, 119, 68, 177, 63, 154, 221, 140, 62, 95, 22, 103, 63, 160, 85, 135, 63, 232, 3, 191, 62, 146, 83, 197, 189, 171, 33, 81, 191, 252, 229, 184, 62, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 99, 129, 59, 191, 179, 90, 139, 63, 175, 94, 76, 62, 149, 209, 180, 61, 18, 222, 156, 191, 15, 201, 181, 190, 62, 61, 148, 190, 192, 100, 105, 191, 145, 145, 27, 190, 100, 37, 255, 62, 242, 121, 37, 63, 239, 11, 13, 190, 81, 155, 92, 63, 186, 199, 34, 191, 166, 243, 73, 190, 140, 244, 72, 62, 160, 237, 67, 191, 194, 120, 56, 63, 240, 69, 35, 191, 38, 152, 253, 189, 29, 189, 161, 190, 69, 82, 7, 63, 74, 251, 24, 61, 181, 178, 17, 63, 33, 15, 142, 189, 201, 222, 168, 191, 44, 128, 149, 190, 152, 164, 14, 60, 72, 6, 137, 63, 9, 21, 27, 63, 158, 214, 218, 190, 253, 156, 133, 62, 46, 137, 139, 62, 17, 82, 75, 191, 48, 91, 206, 186, 124, 132, 24, 191, 171, 222, 45, 190, 114, 219, 129, 191, 112, 59, 75, 190, 248, 73, 136, 190, 234, 28, 233, 188, 19, 171, 142, 61, 239, 133, 172, 190, 192, 201, 236, 62, 5, 198, 219, 190, 70, 163, 243, 62, 175, 85, 60, 190, 190, 66, 226, 190, 8, 4, 56, 60, 57, 235, 64, 191, 243, 19, 18, 63, 93, 255, 162, 190, 242, 153, 156, 60, 218, 155, 251, 190, 69, 76, 139, 63, 197, 101, 2, 63, 239, 146, 193, 62, 244, 161, 170, 62, 223, 201, 148, 63, 140, 5, 183, 62, 3, 31, 38, 190, 59, 167, 215, 62, 13, 132, 1, 191, 237, 251, 92, 63, 202, 29, 106, 191, 86, 197, 47, 190, 190, 25, 203, 62, 245, 227, 99, 191, 201, 12, 210, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 2, 237, 190, 18, 67, 214, 190, 214, 130, 180, 62, 29, 134, 8, 189, 74, 34, 151, 190, 19, 16, 65, 62, 244, 120, 222, 190, 9, 225, 56, 190, 52, 10, 240, 189, 139, 191, 145, 190, 13, 115, 86, 61, 191, 26, 206, 62, 164, 173, 12, 63, 142, 121, 150, 189, 157, 32, 64, 62, 132, 210, 37, 63, 43, 223, 95, 62, 65, 31, 62, 190, 141, 242, 95, 62, 0, 231, 212, 190, 211, 77, 135, 190, 168, 22, 103, 62, 66, 35, 75, 63, 5, 142, 70, 190, 49, 17, 142, 190, 4, 117, 168, 61, 143, 66, 253, 62, 5, 87, 144, 191, 24, 82, 232, 62, 103, 214, 5, 190, 118, 252, 211, 62, 104, 122, 212, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 106, 226, 190, 58, 84, 27, 191, 250, 45, 76, 62, 232, 64, 220, 187, 176, 186, 162, 190, 12, 194, 233, 62, 212, 1, 31, 62, 157, 230, 248, 190, 204, 15, 160, 61, 124, 41, 27, 62, 59, 71, 158, 190, 122, 210, 194, 185, 232, 158, 68, 62, 146, 155, 75, 190, 174, 31, 44, 61, 123, 161, 141, 61, 167, 131, 9, 62, 30, 6, 158, 191, 230, 246, 191, 190, 144, 71, 208, 189, 77, 129, 126, 62, 146, 164, 252, 61, 109, 233, 207, 61, 124, 30, 24, 190, 91, 12, 131, 190, 252, 84, 197, 62, 63, 131, 67, 187, 43, 193, 161, 58, 106, 88, 120, 62, 114, 40, 164, 61, 18, 241, 24, 190, 202, 123, 157, 61, 157, 170, 141, 188, 244, 218, 185, 58, 191, 184, 7, 62, 188, 103, 88, 61, 163, 40, 31, 61, 156, 86, 118, 60, 231, 163, 130, 189, 125, 196, 21, 190, 192, 165, 218, 189, 187, 15, 230, 189, 245, 162, 17, 62, 150, 111, 243, 189, 53, 162, 11, 190, 215, 40, 170, 59, 89, 230, 73, 190, 134, 225, 171, 189, 126, 248, 30, 190, 254, 151, 165, 60, 32, 165, 74, 190, 202, 228, 24, 188, 130, 176, 237, 61, 102, 213, 190, 61, 177, 177, 98, 62, 56, 156, 213, 61, 71, 171, 36, 61, 136, 6, 22, 190, 219, 210, 77, 190, 12, 158, 137, 60, 149, 23, 27, 190, 125, 123, 36, 190, 103, 178, 0, 190, 155, 46, 60, 190, 175, 110, 198, 62, 41, 213, 54, 191, 32, 159, 50, 62, 222, 162, 132, 191, 24, 30, 101, 61, 149, 160, 9, 190, 60, 192, 28, 190, 187, 234, 156, 62, 231, 25, 111, 60, 96, 249, 226, 191, 194, 254, 221, 187, 24, 221, 43, 189, 173, 14, 21, 62, 217, 235, 172, 61, 71, 251, 88, 189, 167, 242, 22, 189, 100, 212, 86, 62, 45, 106, 82, 61, 22, 42, 21, 191, 34, 230, 32, 62, 56, 145, 231, 61, 136, 24, 215, 61, 145, 15, 111, 61, 124, 248, 219, 60, 200, 194, 146, 61, 244, 99, 155, 62, 102, 50, 24, 62, 90, 223, 219, 190, 254, 234, 88, 190, 139, 44, 132, 61, 223, 83, 171, 62, 167, 234, 17, 62, 210, 26, 165, 190, 35, 223, 178, 61, 136, 232, 70, 62, 184, 102, 136, 61, 130, 100, 222, 188, 5, 25, 82, 190, 118, 193, 60, 190, 35, 191, 122, 62, 227, 188, 15, 62, 235, 58, 146, 62, 136, 220, 50, 191, 70, 44, 58, 62, 250, 231, 77, 191, 31, 181, 164, 189, 3, 95, 142, 62, 52, 109, 10, 62, 158, 179, 32, 189, 170, 238, 2, 191, 174, 158, 93, 62, 94, 236, 132, 187, 86, 55, 239, 189, 103, 132, 208, 61, 144, 115, 182, 189, 189, 83, 47, 62, 87, 38, 172, 190, 77, 229, 161, 190, 134, 15, 215, 189, 226, 105, 164, 190, 217, 164, 11, 62, 63, 53, 204, 62, 210, 31, 72, 61, 72, 180, 132, 62, 100, 141, 178, 62, 98, 245, 151, 191, 53, 218, 147, 188, 32, 251, 53, 191, 158, 64, 118, 190, 67, 43, 238, 62, 221, 36, 234, 61, 134, 208, 184, 190, 159, 253, 166, 188, 68, 23, 144, 190, 189, 78, 188, 61, 233, 227, 39, 62, 198, 40, 203, 61, 152, 251, 150, 190, 96, 99, 231, 187, 91, 231, 137, 62, 27, 123, 202, 61, 210, 51, 23, 61, 141, 14, 69, 191, 3, 149, 199, 189, 72, 8, 156, 61, 74, 219, 21, 62, 38, 178, 161, 188, 125, 182, 82, 61, 118, 186, 176, 190, 83, 192, 7, 63, 156, 53, 67, 62, 185, 248, 40, 62, 109, 113, 35, 188, 44, 128, 242, 189, 194, 60, 78, 190, 41, 130, 30, 61, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 72, 133, 164, 189, 83, 227, 49, 62, 65, 24, 110, 62, 147, 137, 63, 187, 73, 195, 78, 62, 52, 76, 156, 61, 245, 5, 111, 189, 137, 79, 28, 61, 108, 119, 1, 189, 233, 109, 216, 62, 195, 181, 168, 61, 137, 111, 192, 62, 240, 85, 234, 189, 201, 110, 118, 62, 0, 231, 138, 61, 155, 16, 152, 59, 205, 223, 10, 190, 156, 102, 76, 61, 45, 79, 142, 188, 173, 133, 253, 187, 41, 71, 200, 190, 145, 191, 72, 61, 183, 255, 83, 62, 223, 92, 154, 190, 212, 81, 76, 190, 105, 67, 228, 189, 216, 191, 113, 189, 189, 221, 133, 190, 195, 37, 75, 62, 18, 66, 110, 190, 88, 149, 82, 61, 166, 182, 254, 59, 197, 12, 81, 188, 116, 26, 247, 188, 164, 32, 106, 61, 180, 177, 135, 187, 141, 72, 28, 189, 88, 238, 140, 189, 213, 69, 192, 187, 204, 101, 56, 190, 12, 44, 15, 62, 160, 73, 80, 190, 52, 181, 52, 190, 223, 74, 129, 189, 5, 76, 40, 190, 15, 67, 3, 61, 25, 141, 32, 190, 52, 14, 34, 189, 142, 253, 210, 60, 49, 140, 16, 62, 252, 215, 245, 59, 199, 61, 47, 190, 246, 110, 238, 60, 97, 58, 40, 190, 245, 153, 183, 61, 128, 221, 41, 190, 233, 37, 50, 189, 57, 143, 29, 190, 135, 156, 124, 61, 189, 7, 26, 59, 50, 182, 6, 190, 81, 69, 218, 61, 172, 119, 74, 190, 221, 144, 201, 61, 254, 140, 6, 63, 13, 42, 62, 191, 233, 84, 194, 190, 198, 5, 189, 191, 189, 172, 80, 191, 53, 190, 60, 63, 143, 159, 25, 63, 37, 182, 154, 190, 117, 116, 31, 190, 40, 180, 77, 191, 11, 232, 106, 189, 220, 132, 192, 189, 205, 63, 139, 62, 136, 28, 47, 191, 45, 107, 146, 61, 22, 18, 157, 62, 38, 68, 255, 61, 51, 85, 81, 190, 146, 119, 29, 191, 84, 115, 18, 62, 62, 188, 126, 62, 74, 59, 247, 189, 78, 108, 90, 62, 85, 108, 64, 190, 232, 219, 229, 190, 207, 22, 187, 62, 20, 9, 8, 62, 50, 239, 3, 61, 192, 3, 92, 189, 161, 191, 4, 190, 206, 15, 150, 190, 179, 88, 54, 190, 89, 80, 253, 189, 238, 194, 128, 61, 150, 120, 177, 189, 166, 98, 129, 187, 141, 197, 163, 61, 21, 174, 238, 60, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 165, 119, 33, 190, 228, 209, 136, 189, 36, 179, 236, 61, 235, 106, 45, 190, 131, 230, 57, 61, 47, 235, 180, 188, 20, 38, 129, 60, 110, 201, 172, 61, 236, 125, 3, 190, 82, 238, 11, 190, 216, 34, 24, 62, 97, 201, 35, 190, 10, 146, 81, 190, 53, 235, 222, 189, 210, 244, 181, 60, 166, 181, 50, 189, 97, 54, 42, 190, 157, 162, 16, 61, 167, 121, 39, 60, 106, 33, 53, 189, 127, 2, 170, 61, 246, 59, 252, 189, 241, 44, 153, 189, 56, 51, 63, 190, 134, 44, 5, 189, 41, 8, 102, 62, 190, 147, 79, 62, 185, 105, 180, 60, 42, 58, 129, 189, 49, 60, 201, 188, 83, 235, 192, 61, 184, 161, 147, 189, 228, 182, 193, 62, 17, 65, 111, 61, 87, 147, 23, 62, 124, 229, 148, 61, 228, 33, 49, 62, 198, 0, 166, 61, 2, 130, 17, 190, 166, 96, 201, 60, 49, 107, 198, 61, 210, 175, 134, 62, 88, 116, 152, 190, 66, 150, 148, 189, 153, 112, 255, 61, 18, 240, 92, 189, 24, 52, 180, 61, 191, 27, 227, 61, 124, 176, 23, 190, 52, 5, 227, 60, 114, 168, 14, 190, 1, 34, 219, 189, 139, 202, 227, 187, 104, 176, 86, 62, 141, 30, 142, 62, 86, 210, 169, 190, 187, 12, 178, 62, 4, 110, 50, 62, 149, 28, 83, 190, 75, 89, 169, 61, 202, 144, 255, 190, 170, 71, 6, 191, 117, 83, 250, 62, 248, 165, 167, 61, 156, 171, 176, 62, 91, 212, 205, 189, 217, 51, 21, 62, 53, 70, 91, 62, 232, 75, 74, 62, 151, 80, 178, 62, 90, 104, 24, 190, 255, 231, 190, 190, 86, 78, 134, 60, 56, 185, 108, 62, 101, 140, 171, 190, 177, 195, 249, 189, 153, 3, 35, 62, 78, 95, 215, 61, 114, 42, 106, 187, 21, 133, 144, 62, 25, 47, 14, 191, 33, 217, 247, 61, 214, 149, 115, 191, 28, 152, 78, 190, 206, 63, 131, 61, 199, 155, 196, 62, 169, 92, 144, 62, 41, 222, 72, 63, 26, 146, 20, 191, 69, 109, 84, 190, 158, 126, 189, 191, 186, 202, 21, 190, 62, 105, 234, 62, 157, 154, 189, 62, 234, 218, 105, 61, 205, 60, 27, 190, 58, 184, 2, 191, 11, 200, 190, 189, 13, 22, 183, 60, 33, 112, 116, 62, 221, 124, 21, 190, 135, 246, 137, 190, 195, 108, 60, 62, 219, 94, 133, 59, 9, 97, 108, 62, 225, 93, 143, 190, 33, 204, 133, 62, 58, 54, 243, 61, 136, 191, 133, 62, 199, 113, 52, 60, 144, 90, 127, 61, 0, 178, 125, 190, 194, 218, 32, 63, 183, 66, 178, 61, 100, 140, 13, 190, 79, 242, 8, 62, 124, 39, 32, 190, 88, 123, 32, 190, 153, 226, 235, 190, 111, 123, 154, 61, 216, 183, 141, 190, 17, 221, 230, 61, 67, 240, 217, 189, 163, 225, 11, 191, 49, 249, 140, 62, 48, 136, 3, 62, 139, 101, 237, 190, 147, 92, 110, 61, 193, 8, 48, 190, 208, 34, 217, 189, 61, 34, 40, 190, 253, 178, 178, 62, 128, 23, 73, 190, 194, 219, 1, 190, 204, 76, 66, 61, 215, 146, 156, 62, 248, 7, 131, 191, 34, 84, 166, 189, 171, 232, 98, 61, 130, 107, 83, 62, 5, 219, 99, 190, 86, 107, 153, 61, 159, 131, 202, 189, 151, 25, 156, 190, 89, 248, 232, 62, 236, 224, 102, 62, 186, 31, 130, 62, 110, 118, 136, 61, 173, 253, 58, 190, 62, 167, 73, 189, 168, 211, 225, 189, 90, 13, 179, 190, 130, 96, 27, 62, 152, 5, 166, 62, 119, 16, 93, 62, 22, 112, 27, 61, 178, 206, 233, 190, 105, 127, 130, 190, 239, 191, 177, 62, 149, 84, 205, 189, 132, 88, 40, 63, 158, 162, 126, 190, 237, 250, 8, 62, 114, 162, 148, 189, 60, 174, 192, 62, 146, 248, 155, 62, 66, 27, 203, 61, 21, 27, 206, 190, 247, 208, 210, 190, 202, 31, 152, 62, 207, 215, 81, 190, 210, 169, 24, 61, 65, 99, 34, 188, 159, 70, 154, 61, 3, 194, 151, 62, 242, 29, 56, 62, 172, 22, 181, 190, 254, 254, 103, 188, 140, 168, 144, 190, 200, 75, 14, 190, 42, 166, 156, 62, 155, 163, 141, 190, 201, 38, 163, 62, 101, 150, 60, 189, 234, 104, 131, 190, 137, 2, 181, 59, 171, 230, 56, 62, 100, 71, 51, 190, 1, 7, 238, 62, 113, 64, 209, 62, 96, 26, 188, 190, 194, 150, 202, 61, 180, 75, 143, 61, 35, 2, 157, 190, 165, 237, 9, 191, 113, 145, 181, 62, 215, 27, 201, 62, 10, 138, 159, 187, 211, 215, 180, 190, 152, 210, 127, 62, 75, 38, 142, 190, 181, 206, 69, 62, 247, 135, 69, 62, 83, 130, 100, 190, 162, 40, 15, 191, 237, 10, 198, 189, 13, 9, 66, 190, 78, 68, 108, 190, 214, 42, 98, 190, 246, 222, 201, 189, 251, 245, 19, 63, 212, 202, 40, 62, 44, 99, 34, 190, 110, 247, 195, 189, 209, 104, 98, 190, 102, 28, 187, 61, 87, 57, 17, 62, 228, 228, 151, 189, 80, 91, 39, 189, 128, 210, 192, 60, 91, 148, 74, 189, 151, 142, 243, 189, 142, 226, 230, 61, 239, 18, 1, 190, 211, 85, 132, 189, 58, 36, 36, 190, 172, 26, 31, 190, 187, 76, 132, 189, 165, 13, 187, 188, 84, 195, 17, 190, 69, 229, 25, 190, 247, 120, 135, 61, 34, 98, 93, 189, 131, 216, 141, 61, 66, 94, 35, 190, 169, 175, 60, 189, 221, 134, 174, 61, 168, 94, 108, 189, 53, 201, 238, 61, 153, 220, 10, 61, 217, 143, 190, 61, 127, 222, 124, 61, 148, 132, 32, 190, 209, 246, 238, 188, 137, 112, 20, 189, 96, 82, 192, 189, 126, 120, 233, 189, 179, 228, 220, 190, 55, 214, 123, 62, 82, 169, 162, 61, 67, 246, 23, 62, 104, 117, 115, 62, 147, 241, 14, 191, 142, 109, 177, 190, 10, 217, 183, 62, 48, 91, 10, 190, 68, 181, 47, 63, 254, 13, 189, 189, 239, 20, 49, 189, 102, 221, 91, 62, 194, 183, 164, 62, 153, 59, 131, 62, 60, 253, 66, 190, 121, 241, 147, 190, 49, 119, 94, 190, 36, 250, 145, 62, 36, 239, 226, 190, 248, 21, 1, 190, 11, 217, 137, 189, 230, 12, 201, 61, 252, 112, 5, 190, 171, 194, 185, 62, 93, 252, 247, 190, 82, 35, 5, 190, 21, 254, 132, 191, 89, 192, 11, 190, 159, 209, 5, 62, 106, 236, 208, 62, 182, 27, 203, 62, 111, 77, 226, 189, 183, 23, 241, 189, 10, 240, 142, 60, 145, 227, 96, 190, 87, 116, 252, 190, 239, 42, 104, 62, 50, 108, 41, 62, 238, 235, 19, 191, 87, 98, 255, 61, 15, 53, 2, 190, 61, 78, 104, 60, 209, 171, 237, 189, 56, 45, 179, 62, 17, 221, 181, 190, 87, 132, 12, 61, 220, 62, 140, 187, 54, 244, 167, 61, 232, 172, 140, 191, 237, 50, 255, 188, 115, 40, 190, 61, 103, 28, 64, 61, 17, 74, 12, 189, 189, 140, 238, 60, 76, 3, 248, 61, 91, 216, 56, 189, 239, 149, 13, 62, 119, 61, 94, 62, 232, 187, 10, 189, 179, 70, 98, 62, 130, 9, 35, 62, 74, 176, 34, 189, 99, 191, 5, 62, 26, 251, 180, 60, 16, 216, 18, 188, 172, 249, 161, 190, 94, 139, 197, 190, 3, 240, 158, 62, 154, 54, 118, 191, 183, 241, 108, 191, 185, 119, 177, 62, 250, 101, 9, 190, 27, 227, 46, 188, 100, 56, 18, 61, 231, 160, 165, 61, 8, 2, 51, 61, 104, 198, 80, 62, 57, 148, 201, 62, 129, 150, 34, 189, 131, 81, 175, 190, 222, 45, 180, 188, 226, 40, 185, 61, 233, 229, 65, 191, 26, 57, 30, 189, 177, 179, 63, 62, 246, 189, 94, 62, 204, 164, 151, 61, 133, 198, 19, 59, 71, 180, 218, 189, 40, 226, 187, 61, 150, 25, 198, 189, 248, 16, 169, 190, 244, 223, 144, 189, 48, 19, 53, 62, 166, 143, 166, 62, 137, 6, 120, 62, 43, 112, 62, 62, 180, 151, 156, 62, 190, 253, 235, 189, 72, 179, 200, 190, 114, 238, 205, 187, 202, 149, 157, 61, 95, 200, 171, 62, 108, 246, 71, 188, 43, 58, 68, 190, 21, 97, 93, 190, 112, 16, 4, 62, 217, 103, 132, 62, 74, 229, 141, 190, 19, 43, 158, 62, 92, 170, 221, 61, 237, 66, 34, 62, 169, 132, 37, 190, 95, 90, 81, 62, 159, 170, 8, 62, 176, 254, 47, 191, 255, 90, 161, 190, 30, 8, 60, 62, 41, 201, 94, 63, 38, 252, 194, 190, 170, 26, 169, 62, 228, 13, 174, 190, 117, 97, 140, 62, 118, 77, 11, 190, 228, 112, 240, 62, 177, 81, 61, 61, 115, 159, 131, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 185, 18, 116, 190, 112, 93, 240, 61, 16, 120, 141, 189, 104, 98, 237, 61, 234, 249, 138, 62, 16, 145, 88, 190, 144, 167, 100, 61, 106, 1, 201, 62, 0, 19, 129, 61, 14, 199, 215, 61, 231, 135, 186, 60, 170, 119, 127, 189, 103, 239, 100, 60, 219, 149, 151, 62, 30, 8, 234, 189, 79, 241, 236, 61, 87, 254, 214, 190, 16, 18, 2, 188, 91, 14, 211, 62, 39, 88, 159, 190, 247, 3, 231, 189, 252, 101, 24, 190, 28, 9, 72, 62, 172, 91, 225, 61, 219, 82, 78, 62, 211, 10, 44, 191, 149, 5, 143, 189, 153, 25, 75, 190, 157, 49, 161, 61, 129, 108, 133, 60, 190, 85, 167, 62, 197, 4, 54, 189, 79, 242, 233, 189, 52, 142, 218, 189, 212, 78, 136, 189, 166, 3, 38, 62, 253, 237, 167, 189, 211, 122, 185, 189, 72, 222, 21, 189, 243, 3, 136, 61, 166, 2, 70, 61, 191, 112, 204, 60, 51, 190, 35, 190, 145, 172, 136, 188, 244, 215, 44, 189, 0, 99, 28, 61, 12, 246, 220, 189, 164, 247, 44, 61, 41, 196, 122, 189, 226, 145, 104, 189, 140, 237, 140, 189, 116, 139, 27, 190, 158, 132, 103, 61, 141, 217, 165, 189, 131, 213, 9, 190, 122, 67, 47, 188, 206, 22, 5, 190, 252, 6, 40, 60, 7, 249, 61, 190, 55, 61, 138, 188, 93, 80, 218, 189, 91, 112, 67, 61, 8, 112, 13, 62, 92, 14, 140, 189, 224, 4, 26, 190, 249, 100, 198, 189, 38, 161, 175, 62, 82, 168, 34, 191, 1, 148, 11, 59, 201, 24, 10, 190, 131, 8, 66, 190, 202, 149, 213, 62, 71, 121, 190, 189, 37, 69, 7, 188, 255, 145, 29, 189, 226, 232, 43, 62, 14, 234, 15, 60, 33, 133, 236, 62, 166, 146, 69, 187, 202, 200, 86, 62, 72, 70, 188, 61, 202, 19, 232, 61, 126, 97, 177, 188, 134, 64, 23, 190, 140, 247, 89, 190, 78, 228, 183, 61, 50, 2, 220, 61, 33, 154, 133, 61, 239, 32, 20, 61, 130, 174, 169, 189, 102, 178, 72, 61, 195, 59, 10, 191, 2, 223, 33, 60, 199, 1, 200, 61, 83, 36, 224, 62, 89, 74, 176, 188, 114, 17, 50, 62, 93, 17, 25, 61, 24, 183, 239, 189, 65, 252, 98, 190, 250, 223, 248, 61, 77, 254, 166, 189, 16, 232, 103, 190, 79, 179, 140, 189, 114, 40, 152, 189, 161, 205, 46, 183, 159, 85, 42, 60, 51, 208, 39, 190, 32, 187, 177, 189, 103, 143, 222, 188, 168, 41, 170, 187, 3, 242, 247, 189, 252, 187, 209, 61, 37, 7, 158, 61, 79, 116, 237, 61, 45, 217, 120, 190, 143, 47, 217, 61, 152, 236, 206, 61, 146, 60, 57, 61, 101, 111, 29, 190, 195, 191, 148, 189, 134, 83, 101, 187, 101, 204, 28, 190, 95, 213, 129, 190, 65, 64, 62, 190, 221, 231, 152, 189, 220, 160, 132, 61, 46, 96, 246, 189, 16, 185, 74, 62, 241, 17, 152, 190, 92, 37, 225, 61, 172, 148, 96, 190, 136, 162, 185, 190, 82, 243, 193, 62, 126, 191, 81, 62, 211, 78, 96, 190, 156, 253, 252, 189, 119, 62, 26, 191, 81, 118, 108, 61, 116, 139, 34, 190, 183, 233, 143, 62, 218, 205, 242, 190, 38, 202, 27, 190, 212, 197, 89, 189, 191, 120, 174, 62, 248, 88, 27, 191, 231, 201, 28, 190, 246, 45, 164, 188, 178, 81, 74, 62, 198, 156, 18, 190, 125, 179, 121, 62, 106, 179, 148, 61, 126, 214, 169, 190, 254, 149, 158, 62, 243, 178, 89, 62, 159, 34, 50, 62, 28, 41, 185, 61, 238, 136, 149, 190, 174, 21, 216, 188, 80, 107, 237, 189, 158, 140, 80, 189, 167, 140, 41, 190, 20, 109, 205, 189, 39, 208, 70, 189, 30, 171, 1, 62, 96, 31, 242, 189, 50, 23, 157, 188, 135, 31, 11, 62, 29, 222, 233, 61, 171, 170, 32, 62, 191, 24, 2, 190, 48, 171, 41, 61, 37, 183, 29, 62, 205, 101, 148, 61, 23, 68, 136, 61, 83, 163, 48, 190, 158, 181, 45, 190, 59, 203, 18, 190, 100, 127, 223, 60, 79, 232, 205, 189, 191, 75, 108, 61, 41, 18, 10, 62, 237, 150, 49, 190, 195, 148, 197, 57, 208, 11, 246, 188, 226, 231, 124, 61, 20, 105, 139, 189, 169, 248, 229, 61, 23, 202, 157, 58, 102, 0, 172, 189, 200, 134, 42, 190, 134, 172, 149, 61, 219, 175, 111, 63, 76, 144, 122, 191, 126, 220, 92, 191, 143, 202, 206, 191, 202, 18, 101, 62, 124, 174, 147, 191, 120, 180, 47, 191, 76, 34, 160, 189, 83, 46, 6, 190, 75, 53, 65, 191, 42, 111, 177, 61, 217, 238, 222, 62, 135, 17, 108, 189, 73, 94, 147, 60, 75, 26, 97, 61, 80, 170, 146, 62, 31, 104, 181, 61, 196, 23, 102, 62, 71, 85, 251, 190, 1, 35, 178, 62, 126, 64, 94, 62, 58, 114, 192, 62, 213, 109, 43, 62, 183, 97, 135, 190, 210, 85, 169, 189, 160, 90, 1, 63, 145, 32, 33, 61, 122, 143, 141, 61, 98, 114, 237, 191, 203, 10, 243, 190, 231, 232, 104, 62, 92, 68, 152, 189, 86, 98, 232, 190, 113, 141, 19, 62, 223, 132, 97, 190, 18, 148, 193, 188, 19, 203, 206, 190, 186, 235, 50, 190, 238, 246, 31, 190, 65, 85, 115, 62, 233, 208, 35, 62, 110, 19, 134, 61, 64, 213, 215, 189, 173, 140, 4, 63, 217, 165, 142, 190, 127, 138, 164, 191, 253, 57, 66, 62, 37, 113, 125, 62, 163, 58, 250, 190, 112, 126, 98, 190, 120, 45, 149, 61, 57, 206, 209, 190, 147, 48, 74, 190, 144, 192, 232, 62, 242, 142, 230, 62, 44, 66, 28, 60, 8, 66, 244, 190, 69, 119, 10, 191, 157, 238, 171, 61, 105, 230, 92, 190, 66, 5, 136, 62, 224, 124, 157, 189, 202, 23, 210, 190, 255, 151, 67, 62, 209, 31, 143, 190, 142, 12, 148, 189, 65, 2, 42, 62, 47, 57, 183, 189, 141, 18, 9, 62, 224, 237, 242, 190, 158, 232, 19, 191, 124, 237, 1, 62, 20, 37, 154, 61, 109, 250, 148, 62, 139, 129, 41, 191, 86, 241, 173, 61, 162, 228, 190, 190, 177, 3, 107, 189, 134, 6, 251, 61, 4, 226, 129, 189, 107, 217, 215, 189, 180, 110, 57, 191, 220, 120, 179, 61, 123, 73, 54, 190, 28, 52, 52, 190, 235, 46, 193, 59, 106, 163, 201, 62, 98, 222, 131, 62, 160, 145, 222, 190, 229, 24, 247, 187, 2, 170, 9, 190, 9, 214, 89, 191, 67, 167, 69, 60, 246, 112, 113, 62, 34, 80, 132, 61, 16, 5, 31, 62, 91, 158, 20, 190, 54, 61, 255, 189, 193, 8, 44, 62, 157, 20, 0, 190, 207, 133, 227, 60, 4, 136, 176, 189, 225, 128, 234, 60, 137, 105, 145, 189, 103, 130, 249, 61, 29, 202, 47, 190, 35, 217, 176, 61, 98, 177, 4, 190, 230, 87, 9, 60, 132, 30, 16, 62, 174, 130, 164, 189, 128, 147, 5, 190, 139, 161, 49, 190, 128, 234, 2, 189, 214, 60, 45, 190, 237, 116, 236, 61, 100, 49, 43, 190, 2, 58, 227, 61, 212, 136, 33, 190, 162, 184, 158, 60, 64, 236, 118, 189, 69, 160, 28, 190, 201, 40, 217, 188, 1, 86, 42, 190, 62, 186, 31, 62, 129, 201, 189, 189, 87, 225, 107, 189, 250, 48, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 170, 59, 62, 48, 213, 244, 189, 51, 49, 113, 188, 98, 228, 71, 62, 148, 134, 132, 62, 172, 210, 206, 189, 241, 43, 176, 62, 11, 89, 10, 188, 136, 238, 208, 62, 140, 78, 168, 61, 205, 200, 225, 188, 96, 238, 179, 62, 60, 130, 246, 61, 159, 197, 110, 62, 79, 73, 66, 190, 114, 182, 115, 190, 197, 99, 40, 189, 194, 63, 64, 62, 88, 197, 4, 62, 201, 238, 50, 60, 28, 245, 93, 61, 20, 252, 5, 190, 77, 27, 47, 62, 98, 44, 224, 61, 23, 247, 111, 62, 84, 19, 9, 190, 231, 11, 72, 62, 130, 32, 168, 59, 164, 115, 39, 62, 239, 116, 218, 61, 147, 159, 56, 62, 136, 14, 200, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 145, 61, 191, 204, 215, 139, 189, 100, 32, 70, 62, 184, 111, 174, 62, 20, 34, 8, 191, 220, 46, 129, 189, 39, 222, 97, 62, 24, 74, 238, 58, 157, 253, 203, 191, 216, 143, 173, 61, 126, 252, 211, 61, 128, 28, 254, 62, 45, 202, 10, 191, 225, 77, 168, 190, 151, 134, 14, 63, 212, 230, 33, 63, 219, 228, 21, 188, 31, 108, 48, 63, 14, 188, 203, 189, 11, 39, 10, 63, 60, 180, 163, 190, 199, 237, 40, 62, 107, 36, 100, 62, 22, 52, 229, 60, 42, 126, 105, 62, 250, 226, 222, 188, 33, 120, 13, 191, 201, 230, 109, 188, 29, 214, 135, 191, 79, 183, 71, 63, 53, 192, 48, 63, 86, 155, 126, 61, 156, 85, 53, 188, 103, 128, 246, 61, 29, 170, 13, 189, 62, 154, 43, 190, 112, 30, 92, 190, 226, 14, 116, 189, 214, 110, 111, 190, 135, 94, 193, 61, 60, 247, 214, 61, 31, 58, 59, 189, 165, 119, 255, 189, 59, 61, 16, 188, 38, 110, 53, 190, 66, 29, 227, 189, 189, 1, 37, 62, 155, 164, 92, 62, 5, 15, 134, 61, 152, 192, 127, 62, 117, 101, 181, 190, 225, 109, 9, 62, 8, 232, 181, 188, 68, 75, 86, 61, 101, 41, 194, 188, 150, 92, 27, 62, 151, 172, 221, 190, 36, 1, 188, 61, 201, 231, 181, 187, 164, 210, 250, 188, 7, 61, 8, 62, 237, 187, 206, 61, 247, 38, 144, 190, 159, 99, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 170, 164, 188, 102, 171, 142, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 238, 220, 191, 204, 67, 86, 63, 128, 128, 165, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {233, 129, 159, 64, 182, 40, 113, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}