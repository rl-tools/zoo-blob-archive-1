// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 10, 18, 191, 137, 58, 54, 191, 214, 28, 212, 62, 175, 6, 41, 191, 196, 175, 79, 63, 116, 254, 18, 63, 148, 229, 161, 62, 249, 97, 226, 62, 33, 168, 196, 62, 99, 58, 154, 190, 254, 53, 215, 63, 41, 98, 219, 62, 66, 55, 15, 63, 245, 170, 129, 191, 12, 226, 136, 190, 68, 45, 36, 63, 255, 193, 171, 63, 190, 147, 150, 62, 58, 168, 106, 63, 37, 55, 134, 63, 184, 7, 182, 62, 133, 9, 25, 188, 50, 142, 67, 191, 146, 194, 189, 62, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 176, 249, 42, 191, 4, 230, 134, 63, 6, 47, 88, 62, 252, 120, 156, 61, 6, 121, 159, 191, 241, 70, 179, 190, 163, 163, 123, 190, 61, 205, 94, 191, 13, 240, 34, 190, 75, 253, 250, 62, 126, 170, 23, 63, 60, 216, 21, 190, 222, 82, 88, 63, 214, 15, 39, 191, 174, 208, 73, 190, 46, 28, 55, 62, 160, 226, 68, 191, 77, 164, 60, 63, 75, 186, 24, 191, 228, 116, 194, 189, 107, 37, 167, 190, 10, 56, 2, 63, 196, 182, 51, 61, 20, 58, 21, 63, 7, 18, 109, 189, 107, 126, 166, 191, 221, 36, 144, 190, 148, 229, 6, 189, 132, 231, 135, 63, 11, 57, 26, 63, 185, 201, 177, 190, 112, 141, 122, 62, 218, 70, 142, 62, 171, 163, 47, 191, 151, 7, 46, 60, 198, 30, 28, 191, 142, 123, 7, 190, 183, 184, 126, 191, 62, 214, 64, 190, 25, 174, 62, 190, 50, 115, 9, 189, 160, 191, 113, 61, 21, 232, 153, 190, 88, 241, 224, 62, 227, 73, 220, 190, 242, 27, 220, 62, 36, 96, 77, 190, 146, 209, 226, 190, 9, 135, 138, 61, 28, 21, 53, 191, 207, 237, 12, 63, 176, 190, 133, 190, 36, 200, 58, 61, 167, 214, 255, 190, 128, 196, 140, 63, 65, 211, 240, 62, 184, 215, 185, 62, 55, 110, 174, 62, 112, 58, 146, 63, 146, 126, 193, 62, 157, 9, 226, 189, 38, 137, 205, 62, 55, 60, 3, 191, 59, 104, 85, 63, 149, 109, 113, 191, 33, 72, 40, 190, 196, 214, 212, 62, 165, 35, 68, 191, 146, 24, 230, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 117, 216, 190, 44, 23, 213, 190, 4, 97, 205, 62, 43, 194, 104, 58, 235, 38, 146, 190, 106, 123, 54, 62, 165, 157, 214, 190, 205, 210, 7, 190, 52, 10, 240, 189, 86, 59, 149, 190, 191, 151, 186, 61, 99, 240, 232, 62, 178, 123, 8, 63, 106, 243, 130, 189, 159, 227, 34, 62, 157, 64, 38, 63, 165, 80, 86, 62, 8, 196, 26, 190, 230, 101, 74, 62, 104, 32, 197, 190, 72, 155, 99, 190, 11, 13, 148, 62, 215, 185, 78, 63, 70, 102, 50, 190, 10, 143, 139, 190, 252, 15, 10, 62, 239, 109, 7, 63, 164, 208, 144, 191, 73, 58, 240, 62, 91, 252, 176, 189, 134, 208, 215, 62, 130, 232, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 83, 174, 190, 160, 192, 32, 191, 137, 161, 70, 62, 182, 61, 70, 189, 132, 44, 171, 190, 165, 187, 241, 62, 181, 159, 51, 62, 233, 183, 224, 190, 204, 15, 160, 61, 28, 145, 224, 61, 253, 210, 186, 190, 147, 180, 121, 189, 123, 219, 78, 62, 109, 129, 72, 190, 102, 164, 164, 60, 250, 167, 105, 61, 181, 209, 4, 62, 36, 116, 143, 191, 205, 48, 179, 190, 115, 5, 169, 189, 244, 105, 110, 62, 141, 123, 72, 61, 249, 61, 191, 61, 6, 86, 32, 190, 79, 139, 115, 190, 4, 86, 186, 62, 93, 19, 104, 59, 205, 140, 82, 189, 87, 229, 126, 62, 158, 187, 149, 61, 195, 198, 23, 190, 252, 235, 106, 61, 157, 170, 141, 188, 244, 218, 185, 58, 191, 184, 7, 62, 188, 103, 88, 61, 163, 40, 31, 61, 156, 86, 118, 60, 231, 163, 130, 189, 125, 196, 21, 190, 192, 165, 218, 189, 187, 15, 230, 189, 245, 162, 17, 62, 150, 111, 243, 189, 53, 162, 11, 190, 215, 40, 170, 59, 89, 230, 73, 190, 134, 225, 171, 189, 126, 248, 30, 190, 254, 151, 165, 60, 32, 165, 74, 190, 202, 228, 24, 188, 130, 176, 237, 61, 102, 213, 190, 61, 177, 177, 98, 62, 56, 156, 213, 61, 71, 171, 36, 61, 136, 6, 22, 190, 219, 210, 77, 190, 12, 158, 137, 60, 149, 23, 27, 190, 125, 123, 36, 190, 103, 178, 0, 190, 155, 46, 60, 190, 142, 67, 187, 62, 214, 9, 45, 191, 80, 180, 33, 62, 41, 131, 96, 191, 103, 80, 157, 61, 142, 66, 65, 190, 10, 189, 98, 190, 235, 10, 140, 62, 231, 25, 111, 60, 130, 219, 215, 191, 217, 109, 123, 60, 63, 157, 199, 188, 63, 144, 236, 61, 115, 196, 166, 61, 79, 69, 81, 189, 106, 229, 20, 189, 31, 91, 71, 62, 252, 178, 65, 61, 236, 149, 35, 191, 215, 146, 69, 62, 64, 33, 248, 61, 131, 38, 254, 61, 93, 180, 51, 61, 82, 117, 230, 60, 21, 122, 120, 61, 228, 88, 156, 62, 199, 133, 13, 62, 185, 17, 203, 190, 96, 236, 130, 190, 141, 27, 135, 61, 10, 188, 163, 62, 17, 211, 3, 62, 32, 136, 161, 190, 54, 4, 224, 61, 17, 130, 74, 62, 220, 113, 173, 61, 25, 133, 195, 188, 96, 242, 57, 190, 74, 90, 33, 190, 173, 45, 122, 62, 227, 188, 15, 62, 125, 73, 131, 62, 205, 1, 45, 191, 222, 216, 254, 61, 186, 90, 45, 191, 255, 26, 164, 189, 232, 84, 141, 62, 175, 156, 8, 62, 248, 52, 43, 189, 64, 180, 207, 190, 208, 193, 104, 62, 164, 66, 42, 60, 102, 76, 251, 189, 89, 226, 218, 60, 78, 6, 202, 189, 176, 149, 53, 62, 245, 82, 108, 190, 87, 157, 164, 190, 40, 222, 223, 189, 81, 68, 149, 190, 33, 202, 19, 62, 29, 76, 210, 62, 151, 102, 28, 188, 92, 41, 130, 62, 246, 163, 199, 62, 229, 85, 152, 191, 250, 251, 197, 187, 100, 121, 61, 191, 183, 120, 138, 190, 195, 249, 1, 63, 231, 182, 59, 62, 151, 76, 176, 190, 159, 253, 166, 188, 103, 238, 145, 190, 31, 37, 99, 61, 129, 88, 246, 61, 135, 141, 13, 62, 127, 235, 148, 190, 249, 27, 41, 189, 230, 146, 137, 62, 224, 139, 215, 61, 251, 52, 14, 60, 130, 194, 50, 191, 150, 87, 135, 189, 131, 74, 154, 61, 185, 48, 196, 61, 90, 163, 101, 188, 93, 118, 120, 61, 50, 206, 169, 190, 12, 108, 250, 62, 97, 139, 80, 62, 218, 6, 204, 61, 127, 68, 213, 60, 17, 0, 236, 189, 115, 122, 78, 190, 153, 0, 57, 61, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 101, 3, 144, 189, 200, 112, 74, 62, 234, 183, 124, 62, 146, 197, 199, 59, 186, 83, 102, 62, 92, 81, 83, 61, 219, 102, 155, 189, 72, 100, 209, 60, 108, 119, 1, 189, 206, 194, 200, 62, 215, 182, 224, 61, 196, 132, 193, 62, 7, 62, 217, 189, 124, 115, 129, 62, 97, 56, 164, 61, 207, 170, 212, 59, 50, 228, 248, 189, 31, 15, 220, 60, 155, 127, 23, 189, 186, 43, 85, 60, 109, 206, 157, 190, 91, 40, 103, 61, 222, 57, 75, 62, 146, 219, 104, 190, 115, 191, 63, 190, 193, 173, 213, 189, 17, 29, 116, 189, 153, 67, 119, 190, 40, 98, 61, 62, 11, 172, 74, 190, 186, 32, 57, 61, 191, 58, 227, 60, 197, 12, 81, 188, 116, 26, 247, 188, 164, 32, 106, 61, 180, 177, 135, 187, 141, 72, 28, 189, 88, 238, 140, 189, 213, 69, 192, 187, 204, 101, 56, 190, 12, 44, 15, 62, 160, 73, 80, 190, 52, 181, 52, 190, 223, 74, 129, 189, 5, 76, 40, 190, 15, 67, 3, 61, 25, 141, 32, 190, 52, 14, 34, 189, 142, 253, 210, 60, 49, 140, 16, 62, 252, 215, 245, 59, 199, 61, 47, 190, 246, 110, 238, 60, 97, 58, 40, 190, 245, 153, 183, 61, 128, 221, 41, 190, 233, 37, 50, 189, 57, 143, 29, 190, 135, 156, 124, 61, 189, 7, 26, 59, 50, 182, 6, 190, 81, 69, 218, 61, 172, 119, 74, 190, 221, 144, 201, 61, 250, 83, 252, 62, 217, 152, 72, 191, 24, 226, 219, 190, 200, 105, 189, 191, 194, 201, 37, 191, 80, 1, 27, 63, 191, 31, 236, 62, 247, 155, 162, 190, 117, 116, 31, 190, 124, 74, 65, 191, 41, 68, 194, 188, 125, 81, 181, 189, 80, 161, 130, 62, 230, 186, 30, 191, 205, 102, 243, 61, 134, 205, 150, 62, 172, 123, 28, 62, 244, 54, 118, 190, 147, 149, 44, 191, 150, 112, 238, 61, 15, 84, 125, 62, 137, 13, 208, 189, 26, 178, 48, 62, 231, 169, 62, 190, 33, 159, 225, 190, 67, 216, 200, 62, 253, 83, 0, 62, 61, 112, 35, 60, 197, 36, 52, 190, 9, 231, 5, 190, 173, 124, 129, 190, 172, 38, 2, 190, 89, 80, 253, 189, 238, 194, 128, 61, 150, 120, 177, 189, 166, 98, 129, 187, 141, 197, 163, 61, 21, 174, 238, 60, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 165, 119, 33, 190, 228, 209, 136, 189, 36, 179, 236, 61, 235, 106, 45, 190, 131, 230, 57, 61, 47, 235, 180, 188, 20, 38, 129, 60, 110, 201, 172, 61, 236, 125, 3, 190, 82, 238, 11, 190, 216, 34, 24, 62, 97, 201, 35, 190, 10, 146, 81, 190, 53, 235, 222, 189, 210, 244, 181, 60, 166, 181, 50, 189, 97, 54, 42, 190, 157, 162, 16, 61, 167, 121, 39, 60, 106, 33, 53, 189, 127, 2, 170, 61, 246, 59, 252, 189, 241, 44, 153, 189, 76, 43, 51, 190, 93, 207, 12, 188, 105, 175, 118, 62, 201, 12, 92, 62, 50, 73, 54, 61, 107, 164, 181, 189, 210, 23, 34, 189, 209, 103, 178, 61, 184, 161, 147, 189, 230, 199, 181, 62, 161, 2, 156, 61, 151, 163, 33, 62, 4, 33, 132, 61, 100, 87, 60, 62, 63, 60, 199, 61, 98, 108, 28, 190, 224, 173, 41, 61, 26, 7, 179, 61, 61, 210, 126, 62, 86, 43, 142, 190, 181, 96, 134, 189, 209, 184, 11, 62, 104, 213, 83, 189, 67, 192, 172, 61, 105, 127, 196, 61, 109, 22, 12, 190, 236, 187, 58, 60, 192, 185, 239, 189, 188, 121, 235, 189, 143, 138, 144, 188, 139, 121, 86, 62, 87, 82, 153, 62, 15, 29, 173, 190, 125, 153, 195, 62, 171, 129, 43, 62, 226, 115, 20, 190, 168, 238, 203, 61, 9, 105, 11, 191, 93, 77, 20, 191, 226, 48, 244, 62, 248, 165, 167, 61, 55, 190, 165, 62, 71, 44, 167, 189, 223, 106, 33, 62, 73, 42, 58, 62, 71, 81, 67, 62, 24, 193, 185, 62, 59, 78, 28, 190, 18, 4, 193, 190, 14, 186, 57, 60, 213, 139, 83, 62, 129, 218, 157, 190, 36, 251, 243, 189, 40, 73, 49, 62, 166, 109, 183, 61, 204, 118, 195, 187, 7, 48, 138, 62, 179, 85, 10, 191, 21, 57, 219, 61, 13, 63, 99, 191, 140, 237, 110, 190, 118, 105, 129, 61, 249, 3, 188, 62, 103, 241, 141, 62, 175, 90, 68, 63, 158, 107, 15, 191, 244, 56, 171, 190, 30, 194, 179, 191, 88, 255, 215, 189, 142, 241, 167, 62, 50, 227, 27, 62, 192, 24, 146, 61, 205, 60, 27, 190, 46, 212, 247, 190, 223, 195, 138, 189, 86, 130, 37, 61, 239, 32, 104, 62, 93, 233, 0, 190, 147, 227, 121, 190, 57, 94, 67, 62, 45, 180, 39, 189, 75, 208, 102, 62, 34, 1, 187, 190, 227, 111, 146, 62, 157, 81, 248, 61, 153, 148, 145, 62, 7, 149, 91, 187, 128, 59, 143, 61, 77, 193, 117, 190, 173, 90, 37, 63, 234, 41, 189, 61, 144, 116, 54, 190, 97, 139, 137, 188, 151, 94, 28, 190, 233, 145, 19, 190, 144, 111, 192, 190, 163, 87, 185, 61, 48, 216, 146, 190, 192, 45, 230, 61, 129, 231, 235, 189, 170, 172, 18, 191, 194, 195, 153, 62, 77, 68, 35, 62, 99, 18, 234, 190, 147, 92, 110, 61, 133, 218, 18, 190, 123, 137, 45, 190, 161, 146, 84, 190, 148, 107, 179, 62, 79, 221, 79, 190, 246, 89, 20, 190, 48, 145, 255, 60, 69, 72, 155, 62, 130, 58, 109, 191, 91, 122, 134, 189, 92, 155, 95, 61, 229, 49, 68, 62, 44, 137, 139, 190, 87, 184, 145, 61, 58, 75, 224, 189, 80, 109, 150, 190, 193, 4, 224, 62, 247, 26, 104, 62, 88, 14, 103, 62, 180, 196, 165, 61, 198, 16, 71, 190, 162, 214, 59, 189, 36, 144, 3, 190, 120, 252, 178, 190, 249, 43, 21, 62, 33, 82, 160, 62, 44, 253, 65, 62, 25, 145, 120, 61, 203, 166, 233, 190, 207, 186, 134, 190, 213, 43, 178, 62, 149, 84, 205, 189, 72, 247, 18, 63, 144, 241, 128, 190, 249, 1, 245, 61, 211, 85, 83, 189, 63, 197, 219, 62, 35, 178, 153, 62, 247, 99, 165, 61, 242, 16, 211, 190, 153, 224, 205, 190, 89, 4, 146, 62, 19, 92, 91, 190, 172, 194, 70, 57, 25, 249, 0, 189, 60, 145, 164, 61, 71, 139, 136, 62, 137, 120, 44, 62, 61, 160, 184, 190, 157, 66, 248, 188, 168, 243, 138, 190, 142, 69, 24, 190, 251, 239, 144, 62, 28, 76, 128, 190, 20, 58, 161, 62, 120, 138, 31, 189, 159, 0, 120, 190, 12, 213, 144, 188, 160, 132, 72, 62, 170, 159, 6, 190, 91, 239, 203, 62, 249, 169, 168, 62, 86, 129, 168, 190, 194, 150, 202, 61, 58, 237, 186, 61, 81, 212, 53, 190, 197, 117, 221, 190, 83, 214, 161, 62, 129, 97, 195, 62, 194, 178, 83, 61, 183, 158, 132, 190, 205, 41, 116, 62, 205, 98, 93, 190, 47, 6, 58, 62, 79, 177, 71, 62, 128, 143, 47, 190, 193, 51, 212, 190, 42, 168, 216, 189, 94, 135, 1, 190, 171, 19, 96, 190, 163, 107, 22, 190, 169, 107, 210, 189, 136, 142, 21, 63, 106, 26, 243, 61, 2, 47, 106, 188, 25, 154, 230, 189, 227, 192, 85, 190, 208, 8, 134, 61, 201, 132, 24, 62, 209, 53, 126, 189, 210, 241, 153, 188, 128, 210, 192, 60, 198, 112, 46, 188, 64, 160, 158, 189, 214, 60, 166, 61, 239, 18, 1, 190, 19, 232, 9, 189, 28, 13, 39, 190, 29, 83, 28, 190, 176, 121, 20, 189, 150, 121, 193, 188, 78, 220, 33, 190, 238, 107, 36, 190, 35, 20, 136, 61, 96, 239, 107, 189, 151, 149, 164, 61, 4, 73, 23, 190, 169, 175, 60, 189, 13, 25, 183, 61, 41, 159, 57, 189, 158, 146, 238, 61, 153, 220, 10, 61, 52, 133, 157, 61, 69, 232, 117, 61, 117, 85, 0, 190, 194, 58, 239, 187, 137, 112, 20, 189, 253, 215, 192, 189, 246, 183, 9, 190, 245, 254, 217, 190, 103, 71, 142, 62, 229, 162, 134, 61, 73, 230, 53, 62, 244, 5, 141, 62, 117, 213, 27, 191, 75, 147, 208, 190, 181, 244, 182, 62, 48, 91, 10, 190, 113, 223, 46, 63, 234, 111, 45, 189, 66, 193, 103, 187, 144, 5, 56, 62, 141, 226, 163, 62, 221, 84, 140, 62, 97, 157, 45, 190, 71, 164, 151, 190, 123, 92, 57, 190, 79, 206, 135, 62, 148, 101, 209, 190, 187, 21, 206, 189, 220, 192, 162, 188, 89, 158, 169, 61, 202, 154, 238, 189, 134, 252, 188, 62, 250, 221, 237, 190, 35, 66, 253, 189, 240, 62, 121, 191, 23, 204, 49, 190, 53, 210, 24, 62, 136, 167, 202, 62, 73, 179, 198, 62, 18, 45, 209, 188, 192, 5, 229, 189, 222, 220, 222, 60, 160, 202, 121, 190, 34, 169, 220, 190, 124, 2, 106, 62, 128, 12, 66, 62, 136, 125, 24, 191, 87, 98, 255, 61, 104, 160, 46, 190, 8, 211, 248, 60, 94, 212, 249, 189, 244, 122, 182, 62, 73, 116, 167, 190, 140, 13, 104, 188, 214, 183, 168, 188, 157, 192, 175, 61, 93, 235, 128, 191, 244, 95, 47, 189, 217, 113, 253, 61, 193, 188, 60, 61, 76, 111, 9, 189, 187, 240, 2, 61, 51, 207, 206, 61, 220, 82, 52, 189, 58, 83, 155, 61, 33, 211, 89, 62, 202, 167, 128, 189, 247, 62, 104, 62, 46, 140, 0, 62, 91, 181, 96, 188, 142, 220, 5, 62, 109, 55, 173, 58, 39, 230, 7, 61, 241, 26, 146, 190, 6, 200, 129, 190, 234, 173, 164, 62, 199, 254, 87, 191, 107, 125, 75, 191, 115, 186, 156, 62, 250, 101, 9, 190, 97, 171, 176, 189, 243, 215, 8, 61, 45, 181, 136, 61, 129, 125, 93, 61, 231, 89, 112, 62, 255, 251, 191, 62, 220, 123, 103, 189, 222, 253, 170, 190, 146, 228, 196, 188, 46, 180, 190, 61, 49, 206, 54, 191, 124, 219, 56, 189, 13, 98, 46, 62, 45, 34, 94, 62, 160, 199, 117, 61, 202, 155, 70, 188, 149, 230, 10, 190, 62, 183, 152, 61, 82, 203, 179, 189, 30, 204, 138, 190, 188, 76, 176, 189, 229, 16, 56, 62, 23, 79, 155, 62, 141, 106, 123, 62, 184, 192, 48, 62, 69, 138, 156, 62, 166, 192, 0, 190, 6, 210, 204, 190, 165, 163, 195, 60, 121, 136, 226, 61, 47, 58, 171, 62, 108, 246, 71, 188, 8, 93, 42, 190, 96, 232, 130, 190, 238, 141, 189, 61, 131, 76, 138, 62, 40, 2, 139, 190, 105, 52, 147, 62, 2, 16, 205, 61, 228, 235, 30, 62, 51, 49, 45, 189, 138, 211, 97, 62, 103, 104, 4, 62, 242, 241, 49, 191, 23, 255, 179, 190, 101, 178, 55, 62, 245, 114, 94, 63, 144, 139, 182, 190, 112, 24, 158, 62, 232, 220, 167, 190, 120, 201, 122, 62, 109, 48, 239, 189, 156, 52, 239, 62, 31, 108, 120, 61, 163, 112, 117, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 191, 168, 124, 190, 110, 44, 203, 61, 179, 25, 151, 189, 35, 125, 136, 61, 225, 84, 149, 62, 59, 184, 142, 190, 191, 41, 34, 189, 111, 121, 185, 62, 0, 19, 129, 61, 178, 53, 145, 61, 173, 46, 51, 61, 182, 77, 12, 189, 54, 192, 145, 188, 190, 192, 151, 62, 219, 205, 167, 188, 19, 105, 228, 61, 163, 128, 207, 190, 133, 204, 124, 188, 15, 121, 59, 62, 41, 44, 176, 190, 61, 129, 220, 189, 169, 204, 240, 189, 89, 95, 65, 62, 214, 25, 222, 61, 115, 195, 67, 62, 43, 190, 12, 191, 238, 101, 168, 189, 220, 38, 199, 189, 125, 160, 3, 61, 176, 110, 129, 60, 92, 196, 169, 62, 174, 237, 190, 188, 79, 242, 233, 189, 87, 26, 218, 189, 153, 233, 64, 189, 29, 97, 31, 62, 90, 107, 139, 189, 80, 114, 109, 189, 96, 61, 145, 188, 243, 3, 136, 61, 166, 2, 70, 61, 14, 139, 144, 60, 150, 161, 25, 190, 252, 218, 166, 188, 1, 29, 120, 188, 240, 59, 143, 61, 12, 246, 220, 189, 15, 103, 47, 61, 52, 232, 119, 189, 226, 145, 104, 189, 184, 104, 141, 189, 116, 139, 27, 190, 197, 125, 46, 61, 128, 126, 166, 189, 101, 207, 249, 189, 63, 198, 24, 188, 189, 227, 200, 189, 252, 6, 40, 60, 186, 61, 46, 190, 55, 61, 138, 188, 29, 20, 157, 189, 66, 29, 136, 61, 230, 245, 45, 62, 233, 38, 139, 189, 89, 64, 39, 190, 157, 98, 56, 189, 130, 164, 183, 62, 246, 211, 253, 190, 103, 247, 187, 60, 143, 42, 32, 190, 7, 24, 63, 190, 83, 127, 187, 62, 71, 121, 190, 189, 56, 113, 100, 189, 62, 186, 196, 188, 211, 70, 47, 62, 177, 57, 199, 186, 240, 161, 241, 62, 0, 245, 138, 188, 211, 55, 69, 62, 23, 50, 202, 61, 109, 49, 204, 61, 241, 114, 143, 189, 104, 61, 197, 189, 187, 153, 81, 190, 119, 147, 197, 61, 107, 124, 203, 61, 249, 241, 117, 61, 206, 217, 129, 60, 83, 32, 217, 189, 227, 208, 229, 60, 179, 108, 251, 190, 146, 236, 248, 58, 135, 172, 162, 61, 220, 145, 222, 62, 174, 154, 83, 188, 114, 17, 50, 62, 93, 17, 25, 61, 24, 183, 239, 189, 65, 252, 98, 190, 250, 223, 248, 61, 77, 254, 166, 189, 16, 232, 103, 190, 79, 179, 140, 189, 114, 40, 152, 189, 161, 205, 46, 183, 159, 85, 42, 60, 51, 208, 39, 190, 32, 187, 177, 189, 103, 143, 222, 188, 168, 41, 170, 187, 3, 242, 247, 189, 252, 187, 209, 61, 37, 7, 158, 61, 79, 116, 237, 61, 45, 217, 120, 190, 143, 47, 217, 61, 152, 236, 206, 61, 146, 60, 57, 61, 101, 111, 29, 190, 195, 191, 148, 189, 134, 83, 101, 187, 101, 204, 28, 190, 95, 213, 129, 190, 65, 64, 62, 190, 221, 231, 152, 189, 220, 160, 132, 61, 46, 96, 246, 189, 153, 137, 86, 62, 19, 232, 164, 190, 233, 202, 212, 61, 151, 109, 118, 190, 192, 61, 200, 190, 9, 99, 204, 62, 29, 88, 107, 62, 112, 70, 89, 190, 156, 253, 252, 189, 225, 6, 15, 191, 60, 50, 109, 187, 22, 76, 89, 190, 175, 155, 145, 62, 90, 109, 246, 190, 197, 190, 51, 190, 21, 18, 119, 189, 238, 102, 170, 62, 143, 178, 5, 191, 174, 193, 14, 190, 51, 156, 0, 189, 179, 175, 65, 62, 124, 253, 71, 190, 33, 7, 111, 62, 23, 153, 141, 61, 47, 255, 161, 190, 191, 227, 146, 62, 63, 118, 97, 62, 253, 139, 12, 62, 86, 31, 207, 61, 167, 167, 151, 190, 4, 94, 188, 188, 243, 229, 14, 190, 158, 140, 80, 189, 167, 140, 41, 190, 20, 109, 205, 189, 39, 208, 70, 189, 30, 171, 1, 62, 96, 31, 242, 189, 50, 23, 157, 188, 135, 31, 11, 62, 29, 222, 233, 61, 171, 170, 32, 62, 191, 24, 2, 190, 48, 171, 41, 61, 37, 183, 29, 62, 205, 101, 148, 61, 23, 68, 136, 61, 83, 163, 48, 190, 158, 181, 45, 190, 59, 203, 18, 190, 100, 127, 223, 60, 79, 232, 205, 189, 191, 75, 108, 61, 41, 18, 10, 62, 237, 150, 49, 190, 195, 148, 197, 57, 208, 11, 246, 188, 226, 231, 124, 61, 20, 105, 139, 189, 169, 248, 229, 61, 23, 202, 157, 58, 102, 0, 172, 189, 200, 134, 42, 190, 134, 172, 149, 61, 215, 137, 100, 63, 167, 129, 124, 191, 184, 1, 102, 191, 253, 198, 195, 191, 65, 61, 98, 62, 182, 130, 140, 191, 253, 182, 39, 191, 4, 186, 178, 189, 83, 46, 6, 190, 125, 51, 46, 191, 59, 17, 180, 61, 2, 14, 225, 62, 195, 101, 48, 189, 9, 118, 180, 60, 136, 78, 38, 61, 49, 93, 151, 62, 40, 140, 83, 61, 74, 170, 96, 62, 61, 28, 1, 191, 137, 7, 179, 62, 168, 75, 93, 62, 185, 233, 193, 62, 79, 125, 69, 62, 106, 77, 135, 190, 31, 41, 178, 189, 92, 139, 253, 62, 237, 222, 57, 61, 71, 172, 150, 61, 5, 15, 229, 191, 230, 150, 243, 190, 40, 124, 112, 62, 176, 46, 25, 188, 105, 86, 203, 190, 90, 193, 68, 62, 222, 198, 70, 190, 47, 248, 4, 189, 219, 21, 243, 190, 200, 242, 66, 190, 75, 237, 105, 190, 250, 140, 129, 62, 233, 208, 35, 62, 204, 108, 127, 61, 27, 218, 7, 190, 109, 25, 1, 63, 151, 186, 129, 190, 85, 149, 178, 191, 59, 204, 91, 62, 139, 151, 134, 62, 100, 51, 220, 190, 145, 205, 128, 190, 195, 62, 189, 61, 153, 83, 174, 190, 2, 55, 46, 190, 224, 23, 221, 62, 147, 160, 238, 62, 67, 151, 238, 60, 204, 111, 229, 190, 15, 131, 4, 191, 226, 199, 223, 61, 105, 230, 92, 190, 22, 134, 135, 62, 184, 169, 70, 189, 57, 152, 231, 190, 148, 250, 71, 62, 94, 88, 150, 190, 161, 239, 24, 189, 96, 22, 44, 62, 225, 241, 233, 188, 225, 195, 68, 62, 142, 226, 200, 190, 218, 157, 0, 191, 9, 249, 213, 61, 20, 37, 154, 61, 38, 186, 139, 62, 143, 252, 26, 191, 175, 1, 2, 61, 97, 189, 138, 190, 238, 177, 89, 187, 254, 112, 217, 61, 145, 172, 123, 189, 34, 220, 237, 189, 51, 35, 36, 191, 10, 131, 198, 61, 128, 44, 24, 190, 186, 76, 72, 190, 130, 139, 101, 189, 18, 222, 195, 62, 219, 85, 131, 62, 8, 57, 173, 190, 2, 107, 232, 188, 254, 183, 15, 190, 130, 164, 76, 191, 71, 124, 6, 61, 58, 44, 115, 62, 178, 5, 71, 61, 226, 132, 15, 62, 91, 158, 20, 190, 54, 61, 255, 189, 193, 8, 44, 62, 157, 20, 0, 190, 207, 133, 227, 60, 4, 136, 176, 189, 225, 128, 234, 60, 137, 105, 145, 189, 103, 130, 249, 61, 29, 202, 47, 190, 35, 217, 176, 61, 98, 177, 4, 190, 230, 87, 9, 60, 132, 30, 16, 62, 174, 130, 164, 189, 128, 147, 5, 190, 139, 161, 49, 190, 128, 234, 2, 189, 214, 60, 45, 190, 237, 116, 236, 61, 100, 49, 43, 190, 2, 58, 227, 61, 212, 136, 33, 190, 162, 184, 158, 60, 64, 236, 118, 189, 69, 160, 28, 190, 201, 40, 217, 188, 1, 86, 42, 190, 62, 186, 31, 62, 129, 201, 189, 189, 87, 225, 107, 189, 250, 48, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 157, 53, 62, 48, 213, 244, 189, 15, 50, 5, 189, 118, 238, 58, 62, 144, 96, 138, 62, 172, 210, 206, 189, 143, 249, 171, 62, 11, 89, 10, 188, 28, 139, 192, 62, 140, 78, 168, 61, 240, 16, 235, 188, 182, 182, 169, 62, 160, 229, 215, 61, 23, 110, 106, 62, 253, 76, 50, 190, 174, 4, 131, 190, 155, 134, 155, 188, 190, 247, 42, 62, 16, 30, 6, 62, 195, 122, 109, 60, 242, 49, 97, 61, 20, 252, 5, 190, 83, 205, 37, 62, 231, 1, 4, 62, 93, 215, 103, 62, 84, 19, 9, 190, 75, 247, 63, 62, 130, 32, 168, 59, 131, 47, 60, 62, 145, 12, 248, 61, 87, 47, 50, 62, 136, 14, 200, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 230, 60, 191, 204, 215, 139, 189, 213, 68, 72, 62, 124, 99, 169, 62, 212, 22, 15, 191, 220, 46, 129, 189, 77, 180, 72, 62, 24, 74, 238, 58, 72, 47, 171, 191, 216, 143, 173, 61, 13, 161, 252, 61, 38, 230, 0, 63, 193, 249, 3, 191, 62, 226, 195, 190, 45, 147, 6, 63, 127, 54, 253, 62, 16, 60, 22, 189, 177, 170, 51, 63, 114, 8, 13, 190, 171, 148, 218, 62, 141, 231, 161, 190, 199, 237, 40, 62, 163, 226, 87, 62, 215, 197, 246, 60, 228, 62, 104, 62, 250, 226, 222, 188, 52, 61, 28, 191, 201, 230, 109, 188, 254, 113, 136, 191, 253, 163, 78, 63, 12, 67, 16, 63, 86, 155, 126, 61, 110, 33, 169, 60, 103, 128, 246, 61, 111, 175, 8, 188, 60, 129, 12, 190, 225, 169, 104, 190, 226, 14, 116, 189, 208, 199, 137, 190, 135, 94, 193, 61, 16, 145, 140, 62, 31, 58, 59, 189, 22, 167, 2, 190, 128, 146, 233, 59, 251, 182, 175, 189, 197, 69, 144, 189, 65, 6, 230, 61, 172, 28, 119, 62, 107, 34, 237, 61, 176, 64, 107, 62, 20, 44, 143, 190, 54, 212, 40, 62, 23, 27, 58, 60, 68, 75, 86, 61, 164, 178, 87, 188, 33, 241, 25, 62, 236, 23, 214, 190, 36, 1, 188, 61, 60, 10, 170, 187, 164, 210, 250, 188, 167, 210, 38, 62, 102, 57, 186, 61, 105, 208, 29, 190, 159, 99, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 51, 9, 189, 137, 159, 142, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 144, 157, 60, 92, 145, 187, 190, 210, 239, 111, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 54, 159, 189, 76, 206, 51, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}