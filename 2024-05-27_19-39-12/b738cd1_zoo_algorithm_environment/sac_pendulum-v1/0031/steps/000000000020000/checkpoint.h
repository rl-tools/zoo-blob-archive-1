// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 121, 106, 191, 109, 109, 74, 191, 141, 48, 201, 62, 75, 2, 218, 190, 212, 187, 51, 63, 134, 40, 34, 63, 207, 104, 144, 62, 86, 142, 3, 63, 36, 238, 183, 62, 114, 148, 251, 190, 24, 112, 236, 63, 99, 28, 207, 62, 190, 115, 28, 63, 134, 44, 137, 191, 59, 114, 135, 190, 62, 249, 26, 63, 54, 71, 184, 63, 185, 127, 150, 62, 7, 138, 91, 63, 180, 198, 145, 63, 173, 135, 200, 62, 111, 121, 193, 189, 220, 197, 79, 191, 37, 47, 197, 62, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 114, 53, 45, 191, 26, 56, 154, 63, 159, 82, 99, 62, 209, 197, 191, 189, 20, 13, 175, 191, 101, 229, 166, 190, 45, 79, 19, 191, 11, 25, 128, 191, 17, 150, 12, 190, 239, 104, 241, 62, 16, 194, 48, 63, 145, 49, 14, 190, 171, 48, 96, 63, 220, 90, 60, 191, 4, 194, 37, 190, 248, 240, 60, 62, 95, 97, 62, 191, 114, 117, 54, 63, 14, 71, 50, 191, 158, 178, 90, 190, 193, 182, 119, 190, 42, 143, 13, 63, 220, 127, 162, 61, 41, 147, 14, 63, 122, 44, 173, 189, 152, 127, 197, 191, 64, 172, 80, 190, 146, 75, 253, 59, 200, 74, 140, 63, 202, 217, 27, 63, 69, 85, 20, 191, 63, 15, 158, 62, 193, 48, 136, 62, 16, 148, 132, 191, 237, 188, 69, 189, 235, 136, 9, 191, 204, 131, 46, 190, 208, 137, 160, 191, 237, 122, 143, 189, 92, 94, 183, 190, 48, 18, 1, 61, 164, 181, 216, 61, 252, 87, 12, 191, 67, 75, 164, 62, 115, 128, 194, 190, 54, 64, 239, 62, 108, 173, 113, 190, 135, 84, 232, 190, 130, 34, 148, 188, 128, 61, 70, 191, 83, 75, 13, 63, 30, 165, 183, 190, 145, 226, 230, 60, 79, 55, 204, 190, 104, 45, 147, 63, 146, 185, 48, 63, 246, 101, 175, 62, 105, 149, 177, 62, 49, 48, 159, 63, 25, 107, 194, 62, 50, 29, 134, 190, 232, 213, 201, 62, 188, 162, 250, 190, 46, 44, 96, 63, 184, 47, 122, 191, 8, 154, 60, 190, 178, 123, 221, 62, 32, 245, 137, 191, 46, 202, 188, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 39, 194, 190, 156, 41, 191, 190, 209, 51, 113, 62, 82, 47, 198, 188, 40, 25, 142, 190, 86, 62, 15, 62, 113, 106, 239, 190, 201, 127, 39, 190, 52, 10, 240, 189, 181, 57, 135, 190, 128, 244, 97, 188, 89, 173, 146, 62, 227, 193, 246, 62, 161, 41, 129, 189, 70, 141, 73, 62, 120, 238, 35, 63, 83, 124, 68, 62, 158, 72, 137, 190, 46, 96, 77, 62, 51, 130, 253, 190, 116, 121, 199, 190, 123, 217, 138, 62, 148, 131, 55, 63, 218, 224, 146, 190, 26, 250, 139, 190, 189, 184, 187, 61, 20, 34, 225, 62, 77, 122, 137, 191, 169, 227, 193, 62, 118, 139, 68, 190, 52, 147, 182, 62, 131, 120, 216, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 231, 105, 191, 22, 105, 27, 191, 130, 178, 110, 62, 186, 240, 42, 61, 62, 185, 138, 190, 244, 54, 252, 62, 12, 241, 110, 62, 200, 208, 57, 191, 204, 15, 160, 61, 253, 153, 87, 62, 97, 227, 140, 190, 99, 242, 163, 61, 109, 244, 82, 62, 57, 135, 53, 190, 44, 99, 228, 59, 164, 55, 134, 61, 237, 166, 21, 62, 123, 63, 186, 191, 232, 69, 182, 190, 128, 118, 0, 191, 154, 31, 146, 62, 75, 37, 70, 62, 130, 141, 216, 61, 201, 13, 12, 190, 73, 182, 128, 190, 103, 9, 124, 62, 180, 150, 255, 188, 168, 133, 102, 62, 47, 195, 143, 62, 1, 59, 160, 61, 144, 55, 12, 190, 250, 252, 155, 61, 157, 170, 141, 188, 244, 218, 185, 58, 191, 184, 7, 62, 188, 103, 88, 61, 163, 40, 31, 61, 156, 86, 118, 60, 231, 163, 130, 189, 125, 196, 21, 190, 192, 165, 218, 189, 187, 15, 230, 189, 245, 162, 17, 62, 150, 111, 243, 189, 53, 162, 11, 190, 215, 40, 170, 59, 89, 230, 73, 190, 134, 225, 171, 189, 126, 248, 30, 190, 254, 151, 165, 60, 32, 165, 74, 190, 202, 228, 24, 188, 130, 176, 237, 61, 102, 213, 190, 61, 177, 177, 98, 62, 56, 156, 213, 61, 71, 171, 36, 61, 136, 6, 22, 190, 219, 210, 77, 190, 12, 158, 137, 60, 149, 23, 27, 190, 125, 123, 36, 190, 103, 178, 0, 190, 155, 46, 60, 190, 206, 241, 189, 62, 133, 182, 63, 191, 12, 62, 30, 62, 244, 241, 182, 191, 164, 188, 88, 188, 55, 108, 18, 190, 94, 23, 34, 190, 81, 18, 181, 62, 231, 25, 111, 60, 57, 235, 8, 192, 213, 43, 40, 189, 191, 87, 190, 189, 213, 250, 253, 61, 73, 101, 137, 61, 77, 58, 79, 189, 180, 119, 65, 189, 156, 218, 104, 62, 27, 107, 55, 61, 160, 138, 15, 191, 251, 192, 50, 189, 97, 220, 71, 61, 81, 77, 193, 61, 33, 103, 49, 61, 149, 142, 148, 188, 11, 89, 16, 61, 181, 198, 172, 62, 226, 28, 19, 62, 9, 32, 131, 190, 196, 241, 93, 190, 41, 0, 204, 60, 26, 12, 170, 62, 107, 163, 44, 62, 59, 79, 158, 190, 214, 204, 200, 61, 77, 173, 94, 62, 42, 73, 253, 61, 52, 236, 45, 190, 173, 189, 69, 190, 185, 208, 104, 190, 255, 71, 120, 62, 227, 188, 15, 62, 0, 83, 221, 62, 72, 198, 137, 191, 80, 67, 232, 61, 100, 148, 95, 191, 65, 167, 200, 189, 125, 246, 148, 62, 76, 229, 39, 62, 129, 71, 136, 188, 139, 118, 69, 191, 15, 242, 125, 62, 141, 75, 156, 60, 41, 26, 215, 189, 105, 234, 100, 61, 112, 37, 24, 189, 105, 168, 90, 62, 216, 13, 46, 190, 245, 234, 148, 190, 95, 225, 220, 189, 73, 73, 191, 190, 191, 185, 66, 62, 186, 121, 3, 63, 144, 245, 209, 61, 203, 39, 134, 62, 214, 203, 191, 62, 37, 80, 161, 191, 145, 241, 200, 59, 22, 188, 33, 191, 122, 50, 77, 190, 147, 37, 251, 62, 33, 218, 243, 61, 179, 139, 195, 190, 159, 253, 166, 188, 12, 68, 75, 190, 223, 105, 240, 61, 0, 47, 112, 62, 24, 186, 199, 61, 140, 78, 150, 190, 154, 82, 251, 60, 116, 33, 134, 62, 33, 190, 197, 61, 106, 60, 104, 61, 203, 174, 75, 191, 121, 65, 183, 60, 109, 202, 218, 61, 144, 118, 77, 62, 78, 125, 26, 186, 231, 26, 130, 61, 210, 195, 171, 190, 246, 253, 9, 63, 55, 44, 49, 62, 77, 126, 207, 61, 109, 64, 14, 60, 235, 16, 218, 189, 205, 237, 70, 190, 15, 148, 200, 60, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 18, 44, 105, 189, 91, 215, 22, 62, 252, 44, 42, 62, 147, 120, 75, 60, 41, 77, 76, 62, 170, 201, 49, 61, 82, 132, 62, 190, 145, 230, 89, 61, 108, 119, 1, 189, 195, 29, 254, 62, 128, 220, 107, 61, 203, 60, 174, 62, 25, 164, 212, 189, 142, 177, 109, 62, 132, 125, 17, 61, 236, 169, 19, 62, 197, 212, 76, 190, 55, 213, 174, 61, 183, 166, 210, 188, 188, 59, 252, 60, 65, 186, 251, 190, 195, 230, 154, 61, 207, 13, 111, 62, 40, 27, 132, 190, 127, 102, 234, 189, 69, 243, 190, 189, 155, 166, 230, 61, 19, 235, 0, 191, 166, 18, 63, 62, 253, 224, 182, 189, 66, 136, 100, 61, 199, 173, 24, 189, 197, 12, 81, 188, 116, 26, 247, 188, 164, 32, 106, 61, 180, 177, 135, 187, 141, 72, 28, 189, 88, 238, 140, 189, 213, 69, 192, 187, 204, 101, 56, 190, 12, 44, 15, 62, 160, 73, 80, 190, 52, 181, 52, 190, 223, 74, 129, 189, 5, 76, 40, 190, 15, 67, 3, 61, 25, 141, 32, 190, 52, 14, 34, 189, 142, 253, 210, 60, 49, 140, 16, 62, 252, 215, 245, 59, 199, 61, 47, 190, 246, 110, 238, 60, 97, 58, 40, 190, 245, 153, 183, 61, 128, 221, 41, 190, 233, 37, 50, 189, 57, 143, 29, 190, 135, 156, 124, 61, 189, 7, 26, 59, 50, 182, 6, 190, 81, 69, 218, 61, 172, 119, 74, 190, 221, 144, 201, 61, 9, 78, 44, 63, 38, 201, 48, 191, 199, 13, 222, 190, 163, 30, 255, 191, 25, 72, 136, 191, 137, 149, 65, 63, 122, 54, 25, 63, 200, 130, 133, 190, 117, 116, 31, 190, 6, 65, 109, 191, 13, 174, 61, 190, 254, 228, 59, 190, 113, 126, 141, 62, 35, 95, 67, 191, 2, 247, 174, 189, 142, 37, 149, 62, 83, 26, 150, 188, 181, 198, 204, 190, 218, 194, 28, 191, 173, 243, 68, 62, 232, 93, 96, 62, 10, 68, 63, 190, 143, 180, 62, 62, 197, 251, 78, 190, 0, 181, 221, 190, 233, 12, 141, 62, 168, 130, 5, 62, 221, 189, 154, 61, 28, 108, 87, 189, 242, 221, 6, 190, 73, 75, 189, 190, 123, 48, 184, 190, 89, 80, 253, 189, 238, 194, 128, 61, 150, 120, 177, 189, 166, 98, 129, 187, 141, 197, 163, 61, 21, 174, 238, 60, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 165, 119, 33, 190, 228, 209, 136, 189, 36, 179, 236, 61, 235, 106, 45, 190, 131, 230, 57, 61, 47, 235, 180, 188, 20, 38, 129, 60, 110, 201, 172, 61, 236, 125, 3, 190, 82, 238, 11, 190, 216, 34, 24, 62, 97, 201, 35, 190, 10, 146, 81, 190, 53, 235, 222, 189, 210, 244, 181, 60, 166, 181, 50, 189, 97, 54, 42, 190, 157, 162, 16, 61, 167, 121, 39, 60, 106, 33, 53, 189, 127, 2, 170, 61, 246, 59, 252, 189, 241, 44, 153, 189, 129, 214, 36, 190, 214, 190, 34, 189, 10, 45, 14, 62, 246, 64, 125, 62, 134, 65, 128, 188, 181, 115, 192, 189, 142, 26, 55, 190, 93, 10, 217, 61, 184, 161, 147, 189, 26, 228, 241, 62, 165, 87, 187, 187, 228, 178, 195, 61, 246, 79, 163, 61, 120, 168, 16, 62, 175, 51, 37, 61, 219, 5, 199, 189, 128, 211, 142, 189, 148, 131, 144, 61, 111, 23, 129, 62, 84, 149, 124, 190, 77, 189, 20, 190, 50, 209, 227, 61, 78, 60, 15, 189, 84, 28, 92, 61, 135, 112, 3, 62, 232, 31, 9, 190, 164, 162, 165, 61, 214, 227, 229, 190, 89, 3, 8, 190, 219, 105, 69, 58, 56, 144, 47, 62, 58, 181, 70, 62, 225, 90, 179, 190, 53, 97, 152, 62, 160, 240, 7, 62, 158, 84, 164, 190, 124, 253, 220, 60, 198, 51, 10, 191, 143, 161, 18, 191, 193, 251, 249, 62, 248, 165, 167, 61, 158, 207, 167, 62, 117, 195, 16, 190, 93, 64, 212, 61, 108, 56, 82, 62, 187, 111, 71, 62, 46, 103, 164, 62, 198, 187, 9, 190, 244, 9, 196, 190, 181, 128, 209, 59, 57, 8, 91, 62, 180, 115, 208, 190, 233, 101, 42, 190, 3, 241, 10, 62, 219, 11, 212, 61, 36, 155, 234, 188, 49, 63, 135, 62, 11, 194, 14, 191, 54, 142, 5, 62, 68, 247, 85, 191, 237, 207, 111, 190, 209, 165, 56, 61, 89, 143, 200, 62, 184, 193, 145, 62, 110, 85, 84, 63, 40, 97, 55, 191, 229, 33, 43, 190, 62, 161, 0, 192, 99, 69, 224, 189, 92, 182, 6, 63, 194, 52, 250, 62, 116, 25, 65, 61, 205, 60, 27, 190, 71, 148, 26, 191, 185, 14, 113, 189, 231, 194, 202, 61, 128, 94, 114, 62, 104, 144, 19, 190, 33, 215, 171, 190, 233, 124, 72, 62, 79, 217, 51, 189, 5, 57, 166, 62, 249, 239, 32, 190, 46, 203, 74, 62, 221, 182, 32, 62, 152, 156, 168, 62, 83, 54, 242, 60, 193, 24, 146, 61, 6, 51, 89, 190, 253, 140, 3, 63, 114, 249, 183, 61, 243, 118, 230, 60, 149, 5, 73, 62, 41, 5, 21, 190, 110, 156, 21, 190, 78, 201, 22, 191, 97, 190, 57, 61, 73, 177, 90, 190, 245, 106, 19, 62, 71, 169, 36, 189, 160, 56, 4, 191, 100, 233, 159, 62, 165, 201, 77, 62, 23, 112, 249, 190, 147, 92, 110, 61, 248, 119, 26, 190, 120, 125, 90, 189, 128, 105, 176, 189, 142, 86, 187, 62, 92, 25, 67, 190, 6, 247, 230, 189, 24, 146, 34, 61, 172, 100, 161, 62, 141, 236, 168, 191, 135, 30, 42, 189, 136, 252, 89, 61, 51, 238, 117, 62, 242, 86, 46, 190, 16, 36, 148, 61, 159, 220, 180, 189, 136, 52, 153, 190, 249, 194, 225, 62, 230, 145, 90, 62, 51, 128, 170, 62, 173, 232, 206, 61, 193, 25, 55, 190, 36, 182, 150, 189, 99, 6, 232, 189, 163, 175, 176, 190, 38, 11, 33, 62, 245, 115, 173, 62, 93, 123, 114, 62, 148, 97, 29, 190, 250, 120, 246, 190, 3, 175, 152, 190, 178, 174, 173, 62, 149, 84, 205, 189, 97, 70, 70, 63, 234, 67, 145, 190, 113, 217, 44, 62, 185, 9, 10, 190, 79, 42, 160, 62, 3, 76, 160, 62, 230, 54, 13, 62, 96, 182, 196, 190, 3, 97, 219, 190, 71, 37, 162, 62, 138, 217, 72, 190, 194, 117, 74, 61, 111, 250, 207, 60, 120, 178, 21, 62, 35, 210, 147, 62, 58, 136, 2, 62, 223, 125, 171, 190, 176, 44, 50, 188, 179, 49, 143, 190, 54, 197, 249, 189, 197, 69, 149, 62, 215, 152, 124, 190, 17, 215, 163, 62, 179, 166, 149, 61, 253, 73, 117, 190, 75, 251, 129, 188, 153, 61, 77, 62, 14, 51, 135, 190, 60, 164, 232, 62, 137, 156, 189, 62, 87, 157, 140, 190, 194, 150, 202, 61, 97, 177, 198, 61, 207, 157, 200, 190, 54, 82, 84, 191, 32, 86, 171, 62, 186, 198, 170, 62, 65, 151, 134, 188, 242, 211, 109, 190, 25, 183, 110, 62, 35, 107, 194, 190, 64, 121, 81, 62, 54, 106, 177, 62, 13, 203, 129, 190, 112, 1, 96, 191, 127, 151, 172, 189, 44, 172, 26, 189, 108, 58, 110, 190, 253, 53, 50, 190, 66, 0, 237, 60, 136, 124, 186, 62, 115, 154, 35, 62, 189, 112, 128, 189, 34, 45, 14, 190, 24, 82, 130, 190, 253, 159, 158, 61, 37, 70, 7, 62, 244, 215, 176, 189, 52, 4, 62, 189, 227, 252, 192, 60, 48, 179, 47, 189, 240, 80, 244, 189, 250, 80, 200, 61, 239, 18, 1, 190, 218, 144, 148, 189, 14, 19, 36, 190, 69, 13, 53, 190, 252, 82, 132, 189, 201, 18, 200, 188, 167, 180, 32, 190, 33, 180, 52, 190, 106, 235, 93, 61, 59, 19, 93, 189, 241, 206, 110, 61, 164, 17, 47, 190, 169, 175, 60, 189, 217, 171, 157, 61, 108, 68, 158, 189, 53, 201, 238, 61, 153, 220, 10, 61, 232, 55, 160, 61, 127, 222, 124, 61, 125, 81, 33, 190, 66, 208, 27, 189, 137, 112, 20, 189, 223, 121, 203, 189, 231, 65, 6, 190, 76, 221, 245, 190, 189, 78, 80, 62, 144, 141, 66, 61, 111, 64, 20, 62, 47, 179, 134, 62, 141, 79, 20, 191, 166, 44, 194, 190, 249, 2, 165, 62, 48, 91, 10, 190, 83, 172, 69, 63, 253, 15, 246, 189, 40, 148, 1, 190, 248, 210, 94, 62, 195, 194, 176, 62, 128, 102, 85, 62, 246, 164, 50, 190, 213, 38, 157, 190, 115, 129, 113, 190, 120, 164, 143, 62, 245, 147, 3, 191, 64, 204, 57, 190, 204, 209, 226, 189, 149, 109, 191, 61, 46, 19, 15, 190, 101, 140, 196, 62, 108, 58, 3, 191, 244, 140, 233, 189, 216, 172, 115, 191, 190, 168, 25, 190, 90, 53, 1, 62, 110, 248, 222, 62, 94, 205, 200, 62, 187, 140, 251, 190, 152, 46, 84, 190, 221, 112, 53, 188, 224, 93, 43, 190, 198, 208, 9, 191, 85, 92, 150, 62, 148, 88, 52, 62, 58, 224, 43, 191, 87, 98, 255, 61, 132, 255, 252, 188, 223, 115, 112, 189, 77, 227, 86, 189, 162, 226, 201, 62, 89, 26, 177, 190, 68, 11, 92, 60, 112, 24, 134, 60, 234, 230, 75, 60, 242, 64, 146, 191, 73, 202, 113, 188, 123, 76, 123, 190, 10, 218, 8, 60, 216, 123, 249, 61, 179, 123, 74, 61, 113, 241, 213, 61, 66, 163, 93, 188, 32, 159, 34, 62, 73, 83, 114, 62, 217, 199, 141, 189, 135, 161, 137, 62, 8, 15, 55, 62, 193, 211, 39, 189, 42, 17, 63, 61, 215, 41, 156, 61, 208, 119, 203, 60, 83, 180, 151, 190, 225, 41, 211, 190, 181, 209, 121, 62, 65, 246, 133, 191, 99, 146, 124, 191, 133, 242, 211, 62, 250, 101, 9, 190, 166, 145, 69, 62, 220, 56, 132, 187, 152, 114, 134, 61, 121, 177, 9, 189, 119, 190, 101, 62, 25, 64, 229, 62, 39, 246, 171, 189, 23, 101, 152, 190, 135, 12, 45, 189, 186, 202, 18, 62, 250, 197, 66, 191, 57, 24, 17, 190, 189, 230, 92, 62, 0, 169, 131, 62, 227, 142, 184, 188, 140, 92, 162, 189, 205, 42, 26, 189, 6, 128, 21, 61, 19, 236, 9, 58, 10, 235, 155, 190, 126, 37, 37, 190, 126, 111, 101, 62, 30, 182, 206, 62, 176, 124, 100, 62, 80, 214, 113, 62, 242, 31, 173, 62, 117, 122, 140, 189, 79, 58, 193, 190, 128, 46, 128, 59, 26, 205, 24, 62, 227, 197, 166, 62, 108, 246, 71, 188, 20, 67, 77, 190, 169, 130, 162, 189, 52, 125, 148, 62, 198, 12, 127, 62, 237, 178, 153, 190, 89, 252, 171, 62, 239, 127, 235, 61, 169, 25, 58, 62, 40, 98, 70, 190, 27, 36, 109, 62, 31, 128, 241, 61, 216, 6, 29, 191, 88, 80, 63, 190, 252, 116, 57, 62, 115, 99, 105, 63, 149, 83, 197, 190, 72, 233, 165, 62, 58, 146, 183, 190, 247, 86, 203, 62, 236, 134, 8, 190, 33, 3, 250, 62, 125, 223, 61, 59, 104, 184, 142, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 6, 180, 212, 190, 169, 56, 194, 190, 62, 243, 43, 190, 191, 21, 233, 61, 180, 152, 119, 62, 27, 153, 68, 190, 60, 161, 29, 61, 222, 111, 38, 63, 0, 19, 129, 61, 26, 117, 142, 189, 241, 136, 48, 60, 43, 137, 184, 189, 125, 58, 97, 61, 51, 224, 144, 62, 179, 159, 166, 190, 40, 156, 18, 62, 164, 61, 9, 191, 83, 98, 141, 60, 157, 198, 174, 62, 77, 176, 32, 191, 110, 17, 45, 190, 38, 188, 26, 190, 59, 43, 84, 62, 116, 48, 169, 61, 113, 122, 60, 62, 178, 125, 61, 191, 108, 78, 10, 189, 120, 228, 28, 191, 226, 88, 101, 61, 160, 113, 232, 59, 57, 131, 161, 62, 82, 164, 162, 189, 79, 242, 233, 189, 52, 142, 218, 189, 212, 78, 136, 189, 166, 3, 38, 62, 253, 237, 167, 189, 211, 122, 185, 189, 72, 222, 21, 189, 243, 3, 136, 61, 166, 2, 70, 61, 191, 112, 204, 60, 51, 190, 35, 190, 145, 172, 136, 188, 244, 215, 44, 189, 0, 99, 28, 61, 12, 246, 220, 189, 164, 247, 44, 61, 41, 196, 122, 189, 226, 145, 104, 189, 140, 237, 140, 189, 116, 139, 27, 190, 158, 132, 103, 61, 141, 217, 165, 189, 131, 213, 9, 190, 122, 67, 47, 188, 206, 22, 5, 190, 252, 6, 40, 60, 7, 249, 61, 190, 55, 61, 138, 188, 93, 80, 218, 189, 91, 112, 67, 61, 8, 112, 13, 62, 92, 14, 140, 189, 122, 15, 55, 190, 211, 200, 1, 190, 7, 17, 136, 62, 2, 117, 60, 191, 59, 188, 222, 188, 108, 140, 6, 190, 65, 238, 114, 190, 116, 103, 220, 62, 71, 121, 190, 189, 29, 207, 166, 61, 92, 175, 174, 189, 98, 84, 235, 61, 196, 12, 163, 60, 122, 58, 240, 62, 125, 17, 33, 189, 219, 197, 104, 62, 166, 129, 10, 61, 159, 1, 239, 61, 73, 10, 201, 187, 185, 119, 82, 190, 14, 162, 150, 190, 206, 143, 194, 61, 175, 223, 156, 61, 54, 169, 75, 60, 93, 219, 101, 61, 216, 95, 134, 189, 115, 159, 169, 61, 139, 154, 251, 190, 129, 110, 144, 187, 246, 16, 176, 61, 218, 41, 225, 62, 183, 15, 153, 189, 27, 217, 59, 62, 85, 34, 28, 61, 20, 234, 0, 190, 232, 241, 98, 190, 184, 1, 233, 61, 220, 17, 179, 189, 164, 96, 112, 190, 216, 132, 140, 189, 114, 40, 152, 189, 161, 205, 46, 183, 151, 194, 14, 60, 224, 145, 33, 190, 32, 187, 177, 189, 222, 80, 36, 189, 169, 142, 121, 187, 179, 34, 244, 189, 11, 50, 197, 61, 239, 144, 161, 61, 229, 253, 223, 61, 116, 135, 120, 190, 143, 47, 217, 61, 47, 27, 204, 61, 192, 201, 54, 61, 101, 111, 29, 190, 195, 191, 148, 189, 63, 160, 151, 186, 170, 200, 28, 190, 27, 186, 132, 190, 219, 136, 71, 190, 221, 231, 152, 189, 52, 79, 69, 61, 44, 242, 247, 189, 35, 92, 50, 62, 41, 143, 98, 190, 12, 140, 20, 62, 130, 68, 24, 190, 214, 54, 167, 190, 128, 174, 208, 62, 182, 255, 146, 62, 9, 59, 125, 190, 156, 253, 252, 189, 22, 190, 18, 191, 243, 126, 136, 61, 60, 157, 222, 189, 179, 34, 144, 62, 93, 204, 239, 190, 192, 151, 11, 190, 117, 144, 214, 189, 88, 167, 181, 62, 15, 93, 98, 191, 231, 193, 239, 189, 119, 235, 108, 188, 212, 223, 67, 62, 230, 12, 16, 190, 198, 17, 115, 62, 247, 170, 63, 61, 217, 20, 182, 190, 0, 27, 149, 62, 238, 176, 27, 62, 159, 143, 151, 62, 54, 199, 237, 61, 111, 65, 168, 190, 108, 30, 87, 189, 24, 228, 224, 189, 214, 111, 139, 189, 82, 21, 47, 190, 9, 173, 236, 189, 183, 215, 75, 189, 206, 81, 0, 62, 188, 97, 246, 189, 186, 162, 173, 188, 33, 191, 230, 61, 29, 222, 233, 61, 171, 170, 32, 62, 150, 243, 4, 190, 234, 196, 255, 60, 102, 53, 29, 62, 97, 1, 141, 61, 58, 199, 249, 60, 149, 214, 48, 190, 80, 123, 74, 190, 179, 165, 21, 190, 2, 160, 79, 60, 145, 111, 210, 189, 191, 75, 108, 61, 232, 230, 1, 62, 182, 93, 64, 190, 195, 148, 197, 57, 208, 11, 246, 188, 115, 242, 215, 60, 20, 105, 139, 189, 250, 87, 227, 61, 122, 218, 181, 187, 102, 0, 172, 189, 4, 58, 55, 190, 204, 181, 25, 61, 186, 9, 133, 63, 24, 138, 141, 191, 42, 39, 80, 191, 95, 116, 218, 191, 119, 213, 124, 62, 93, 50, 193, 191, 171, 146, 134, 191, 134, 105, 139, 187, 83, 46, 6, 190, 92, 166, 253, 190, 127, 103, 177, 61, 9, 220, 232, 62, 39, 6, 39, 190, 4, 3, 35, 189, 4, 13, 224, 61, 207, 227, 138, 62, 35, 23, 18, 62, 230, 160, 128, 62, 249, 236, 18, 191, 126, 209, 132, 62, 23, 102, 104, 62, 21, 107, 197, 62, 232, 206, 25, 62, 98, 20, 132, 190, 214, 202, 191, 189, 116, 230, 16, 63, 128, 254, 91, 60, 70, 97, 16, 61, 200, 162, 10, 192, 180, 100, 244, 190, 100, 50, 63, 62, 121, 221, 39, 190, 255, 119, 36, 191, 109, 134, 123, 190, 0, 51, 21, 190, 185, 67, 113, 186, 92, 150, 41, 191, 192, 161, 54, 189, 158, 71, 146, 186, 98, 212, 129, 61, 233, 208, 35, 62, 9, 75, 142, 189, 92, 183, 250, 189, 246, 9, 11, 63, 123, 190, 66, 190, 36, 55, 222, 191, 60, 126, 182, 187, 204, 33, 140, 62, 162, 246, 28, 191, 51, 254, 87, 190, 216, 136, 167, 61, 133, 123, 238, 190, 7, 27, 35, 190, 250, 185, 238, 62, 160, 231, 7, 63, 226, 222, 42, 61, 233, 4, 2, 191, 141, 216, 50, 191, 140, 62, 0, 62, 0, 145, 74, 191, 201, 10, 188, 62, 98, 240, 16, 189, 245, 253, 15, 191, 105, 43, 61, 190, 151, 196, 151, 190, 241, 54, 250, 189, 77, 103, 38, 62, 82, 101, 34, 190, 183, 4, 62, 61, 165, 109, 16, 191, 161, 234, 44, 191, 153, 124, 233, 61, 20, 37, 154, 61, 171, 135, 162, 62, 205, 162, 106, 191, 207, 253, 160, 61, 221, 116, 238, 190, 42, 213, 56, 189, 169, 122, 249, 61, 176, 103, 41, 189, 148, 130, 193, 189, 19, 177, 91, 191, 194, 175, 150, 61, 237, 250, 125, 190, 142, 97, 103, 190, 165, 173, 222, 60, 106, 233, 205, 62, 227, 123, 98, 62, 163, 43, 223, 190, 165, 112, 147, 57, 143, 212, 79, 190, 221, 90, 70, 191, 129, 49, 140, 60, 224, 59, 123, 62, 128, 209, 26, 62, 38, 1, 38, 62, 91, 158, 20, 190, 54, 61, 255, 189, 30, 101, 32, 62, 157, 20, 0, 190, 63, 249, 120, 60, 33, 221, 215, 189, 116, 43, 133, 60, 137, 105, 145, 189, 103, 130, 249, 61, 29, 202, 47, 190, 35, 217, 176, 61, 98, 177, 4, 190, 131, 87, 243, 187, 185, 79, 245, 61, 174, 130, 164, 189, 134, 232, 13, 190, 2, 171, 55, 190, 128, 234, 2, 189, 214, 60, 45, 190, 237, 116, 236, 61, 100, 49, 43, 190, 2, 58, 227, 61, 201, 8, 46, 190, 162, 184, 158, 60, 65, 195, 167, 189, 69, 160, 28, 190, 225, 219, 69, 189, 1, 86, 42, 190, 234, 180, 10, 62, 156, 131, 210, 189, 179, 15, 155, 189, 36, 221, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 34, 81, 62, 48, 213, 244, 189, 228, 177, 215, 188, 125, 142, 129, 62, 118, 1, 138, 62, 172, 210, 206, 189, 193, 225, 185, 62, 11, 89, 10, 188, 168, 80, 199, 62, 140, 78, 168, 61, 52, 118, 249, 188, 236, 229, 181, 62, 8, 21, 10, 62, 113, 246, 106, 62, 201, 10, 16, 190, 154, 162, 134, 190, 224, 35, 134, 189, 191, 26, 70, 62, 187, 55, 36, 62, 184, 102, 75, 61, 150, 62, 31, 61, 20, 252, 5, 190, 76, 38, 63, 62, 98, 44, 224, 61, 213, 58, 103, 62, 129, 61, 16, 190, 89, 46, 60, 62, 229, 5, 37, 188, 154, 118, 212, 61, 55, 73, 59, 62, 136, 78, 97, 62, 245, 205, 196, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 8, 77, 191, 204, 215, 139, 189, 39, 14, 52, 62, 122, 137, 193, 62, 35, 115, 236, 190, 220, 46, 129, 189, 19, 240, 26, 62, 24, 74, 238, 58, 255, 69, 241, 191, 216, 143, 173, 61, 72, 199, 79, 60, 230, 39, 224, 62, 21, 226, 29, 191, 199, 141, 128, 190, 252, 171, 7, 63, 174, 254, 28, 63, 73, 250, 140, 60, 246, 93, 52, 63, 19, 218, 227, 189, 145, 18, 32, 63, 1, 237, 161, 190, 199, 237, 40, 62, 175, 18, 96, 62, 22, 52, 229, 60, 136, 167, 79, 62, 122, 238, 159, 58, 193, 109, 232, 190, 178, 160, 52, 187, 37, 39, 143, 191, 172, 237, 136, 63, 31, 7, 73, 63, 70, 42, 252, 60, 201, 98, 198, 189, 103, 128, 246, 61, 228, 145, 206, 59, 175, 94, 132, 190, 232, 255, 38, 190, 226, 14, 116, 189, 237, 142, 180, 190, 135, 94, 193, 61, 237, 239, 74, 190, 31, 58, 59, 189, 213, 239, 47, 190, 9, 76, 119, 189, 28, 85, 219, 190, 176, 203, 59, 190, 163, 50, 248, 61, 146, 183, 112, 62, 219, 42, 195, 61, 52, 26, 69, 62, 42, 153, 223, 190, 128, 21, 7, 62, 253, 58, 159, 189, 68, 75, 86, 61, 115, 3, 80, 190, 150, 92, 27, 62, 152, 201, 230, 190, 243, 54, 200, 61, 251, 11, 40, 60, 224, 173, 232, 188, 209, 157, 11, 62, 76, 232, 23, 62, 110, 83, 155, 190, 248, 119, 133, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 236, 237, 59, 21, 32, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {57, 77, 17, 63, 75, 25, 60, 60, 174, 205, 131, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {187, 87, 202, 191, 89, 179, 216, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}