// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 234, 171, 190, 244, 142, 189, 190, 66, 14, 81, 62, 170, 210, 17, 191, 171, 94, 205, 59, 91, 60, 132, 62, 46, 127, 242, 62, 125, 193, 134, 190, 121, 116, 15, 62, 236, 192, 232, 190, 83, 56, 121, 62, 62, 36, 5, 63, 222, 246, 149, 190, 18, 100, 136, 190, 72, 116, 213, 190, 10, 236, 12, 63, 75, 76, 205, 62, 186, 248, 161, 62, 14, 218, 213, 62, 112, 234, 2, 63, 219, 128, 251, 62, 148, 98, 146, 189, 192, 150, 218, 190, 172, 170, 1, 190, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 105, 83, 174, 190, 17, 22, 124, 62, 20, 166, 97, 62, 146, 21, 138, 189, 188, 159, 221, 190, 151, 29, 232, 190, 20, 205, 77, 190, 107, 21, 170, 190, 116, 234, 95, 190, 27, 129, 9, 63, 202, 163, 3, 61, 144, 92, 123, 190, 124, 153, 175, 62, 89, 54, 133, 187, 71, 26, 75, 190, 174, 5, 133, 62, 225, 163, 239, 190, 214, 125, 1, 63, 84, 9, 210, 190, 99, 227, 201, 60, 88, 2, 172, 190, 139, 166, 181, 62, 231, 64, 157, 60, 29, 134, 238, 62, 166, 146, 37, 190, 240, 28, 13, 191, 10, 75, 117, 190, 21, 112, 152, 190, 138, 150, 5, 63, 160, 44, 214, 62, 141, 214, 242, 61, 246, 137, 27, 190, 254, 70, 45, 62, 112, 88, 16, 191, 21, 238, 18, 60, 227, 195, 10, 191, 238, 165, 209, 190, 255, 245, 139, 61, 75, 145, 169, 190, 241, 87, 155, 189, 49, 156, 50, 189, 144, 184, 178, 62, 230, 238, 177, 189, 217, 185, 245, 62, 164, 98, 253, 190, 219, 60, 253, 62, 147, 180, 11, 62, 37, 51, 117, 190, 240, 236, 11, 63, 180, 205, 182, 190, 5, 39, 116, 62, 100, 208, 116, 190, 112, 68, 81, 62, 73, 189, 2, 191, 181, 108, 5, 63, 154, 48, 169, 61, 189, 166, 3, 63, 7, 49, 136, 59, 70, 96, 18, 63, 98, 159, 3, 63, 205, 30, 182, 62, 233, 43, 219, 62, 84, 237, 192, 190, 0, 146, 169, 62, 228, 218, 238, 190, 154, 111, 143, 190, 8, 78, 125, 62, 34, 11, 16, 191, 164, 117, 81, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 186, 19, 191, 28, 115, 5, 191, 24, 103, 140, 62, 13, 241, 214, 61, 110, 164, 219, 188, 140, 17, 38, 190, 14, 225, 249, 190, 108, 81, 94, 190, 52, 10, 240, 189, 156, 23, 151, 190, 74, 149, 239, 62, 96, 23, 206, 62, 171, 9, 134, 62, 9, 160, 0, 62, 167, 31, 162, 61, 47, 178, 4, 63, 249, 143, 171, 61, 0, 214, 74, 190, 45, 191, 216, 62, 118, 196, 229, 190, 176, 71, 58, 188, 50, 217, 167, 62, 112, 172, 14, 63, 169, 39, 158, 190, 18, 75, 185, 190, 13, 18, 181, 190, 34, 189, 247, 62, 24, 17, 235, 190, 56, 215, 145, 62, 131, 14, 229, 190, 243, 100, 243, 62, 220, 219, 212, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 69, 245, 189, 47, 107, 40, 189, 67, 118, 4, 62, 153, 252, 224, 61, 216, 115, 219, 61, 231, 233, 94, 189, 133, 95, 6, 189, 230, 4, 50, 62, 204, 15, 160, 61, 77, 246, 209, 61, 95, 222, 31, 190, 62, 213, 10, 62, 92, 171, 211, 60, 19, 209, 214, 61, 222, 100, 174, 61, 68, 82, 70, 188, 227, 220, 23, 190, 165, 119, 93, 60, 228, 58, 25, 190, 105, 98, 28, 190, 167, 212, 63, 61, 175, 175, 252, 61, 5, 172, 184, 61, 195, 19, 41, 190, 43, 17, 28, 189, 65, 165, 205, 189, 101, 143, 3, 190, 254, 46, 33, 190, 226, 69, 246, 61, 18, 6, 14, 62, 75, 156, 143, 61, 254, 3, 28, 62, 253, 250, 114, 188, 130, 220, 185, 58, 192, 182, 19, 62, 189, 255, 255, 61, 254, 52, 86, 61, 12, 99, 129, 60, 231, 163, 130, 189, 183, 242, 5, 190, 192, 165, 218, 189, 41, 159, 102, 189, 184, 193, 34, 62, 57, 53, 224, 189, 230, 157, 163, 189, 124, 48, 138, 61, 91, 153, 17, 190, 127, 153, 127, 189, 126, 248, 30, 190, 29, 66, 202, 60, 190, 63, 228, 189, 202, 228, 24, 188, 59, 212, 11, 62, 136, 14, 227, 61, 243, 92, 255, 61, 200, 115, 12, 62, 168, 208, 178, 61, 158, 16, 22, 190, 118, 144, 51, 190, 12, 158, 137, 60, 213, 233, 23, 190, 201, 9, 224, 189, 159, 25, 208, 189, 255, 194, 244, 189, 116, 80, 211, 61, 161, 228, 162, 188, 180, 186, 182, 189, 140, 208, 31, 190, 192, 214, 30, 189, 212, 220, 35, 190, 163, 58, 42, 188, 59, 99, 0, 61, 231, 25, 111, 60, 236, 205, 187, 189, 18, 36, 175, 189, 157, 241, 218, 189, 15, 165, 92, 188, 78, 168, 137, 189, 186, 206, 181, 189, 140, 135, 130, 188, 79, 225, 34, 190, 190, 155, 23, 190, 53, 111, 86, 189, 115, 32, 229, 61, 44, 4, 17, 62, 51, 50, 50, 61, 105, 11, 30, 61, 146, 23, 170, 61, 202, 174, 32, 61, 136, 226, 84, 189, 110, 238, 216, 61, 78, 73, 236, 61, 104, 207, 21, 190, 4, 152, 238, 61, 95, 177, 83, 61, 145, 113, 66, 189, 236, 114, 37, 189, 180, 224, 114, 189, 40, 201, 150, 61, 164, 199, 224, 187, 49, 160, 7, 189, 4, 137, 132, 188, 5, 183, 0, 189, 28, 32, 103, 61, 227, 188, 15, 62, 252, 139, 164, 189, 49, 146, 15, 190, 0, 250, 50, 188, 204, 85, 211, 189, 84, 60, 27, 190, 239, 231, 38, 62, 79, 125, 226, 61, 11, 255, 133, 61, 243, 125, 194, 61, 26, 201, 42, 62, 207, 94, 22, 62, 115, 223, 234, 189, 95, 159, 161, 61, 41, 32, 46, 190, 254, 213, 42, 190, 227, 9, 179, 61, 209, 30, 163, 189, 215, 80, 207, 189, 219, 95, 64, 189, 123, 13, 246, 61, 19, 72, 201, 61, 214, 12, 198, 60, 66, 50, 192, 61, 205, 29, 216, 59, 216, 195, 43, 190, 105, 105, 39, 61, 131, 40, 150, 188, 180, 13, 0, 190, 199, 141, 248, 61, 97, 122, 241, 61, 49, 12, 8, 61, 159, 253, 166, 188, 3, 240, 50, 188, 49, 74, 129, 189, 9, 254, 14, 188, 32, 90, 38, 61, 48, 219, 253, 189, 7, 193, 20, 190, 67, 58, 2, 62, 186, 184, 22, 190, 238, 206, 216, 59, 65, 134, 42, 190, 43, 47, 212, 189, 50, 172, 71, 189, 57, 237, 2, 190, 182, 42, 83, 188, 210, 69, 224, 61, 77, 155, 194, 189, 160, 62, 65, 189, 45, 54, 174, 61, 139, 209, 193, 189, 28, 244, 103, 61, 8, 83, 42, 59, 9, 220, 35, 190, 3, 17, 37, 61, 116, 206, 15, 188, 204, 72, 179, 189, 152, 93, 45, 190, 136, 225, 136, 189, 158, 235, 164, 189, 224, 28, 195, 188, 172, 118, 159, 189, 54, 244, 18, 190, 215, 52, 218, 188, 183, 182, 166, 189, 21, 164, 221, 61, 181, 69, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 216, 124, 24, 189, 132, 204, 186, 61, 196, 137, 13, 189, 2, 64, 243, 61, 20, 9, 163, 61, 50, 141, 228, 61, 223, 219, 142, 60, 199, 16, 201, 186, 115, 80, 224, 60, 92, 11, 236, 189, 215, 32, 48, 60, 50, 176, 29, 60, 251, 37, 44, 190, 201, 203, 230, 61, 114, 43, 86, 61, 208, 98, 12, 190, 205, 69, 117, 189, 25, 184, 21, 62, 139, 145, 231, 61, 213, 221, 227, 60, 99, 231, 207, 61, 212, 37, 157, 189, 224, 109, 251, 61, 65, 192, 221, 60, 124, 6, 145, 189, 16, 117, 196, 189, 108, 119, 1, 189, 252, 88, 30, 62, 83, 243, 204, 58, 96, 53, 240, 61, 42, 148, 7, 190, 109, 184, 134, 186, 183, 34, 74, 61, 85, 129, 156, 188, 159, 157, 133, 189, 117, 164, 29, 190, 193, 252, 193, 189, 101, 116, 175, 61, 157, 42, 22, 190, 177, 28, 152, 189, 100, 91, 169, 61, 231, 231, 140, 60, 236, 189, 243, 189, 163, 216, 1, 62, 225, 24, 45, 189, 87, 50, 197, 60, 142, 89, 226, 61, 154, 168, 164, 188, 149, 60, 52, 190, 218, 87, 111, 189, 229, 112, 78, 60, 191, 7, 250, 187, 142, 233, 198, 61, 163, 41, 218, 60, 90, 223, 8, 188, 198, 160, 58, 189, 242, 50, 55, 60, 157, 136, 37, 190, 12, 44, 15, 62, 140, 104, 50, 190, 218, 225, 210, 189, 38, 112, 243, 60, 114, 108, 255, 189, 177, 166, 149, 61, 252, 229, 0, 190, 122, 64, 49, 61, 223, 220, 89, 61, 191, 9, 43, 62, 12, 22, 71, 61, 31, 53, 33, 190, 225, 218, 165, 61, 25, 134, 172, 189, 151, 225, 32, 62, 188, 68, 8, 190, 197, 6, 1, 188, 147, 188, 3, 190, 116, 25, 3, 62, 72, 19, 166, 60, 135, 194, 203, 189, 73, 219, 18, 62, 119, 214, 32, 190, 230, 139, 14, 62, 68, 25, 215, 189, 202, 93, 154, 61, 248, 58, 4, 61, 82, 160, 2, 190, 125, 45, 4, 189, 154, 163, 37, 188, 146, 36, 19, 62, 246, 2, 97, 189, 117, 116, 31, 190, 198, 138, 20, 190, 156, 137, 143, 61, 202, 80, 190, 189, 146, 226, 41, 62, 195, 65, 13, 190, 163, 55, 17, 62, 165, 209, 36, 62, 112, 3, 26, 62, 192, 115, 145, 189, 2, 61, 129, 189, 109, 59, 119, 61, 240, 158, 237, 61, 166, 153, 30, 190, 71, 184, 194, 61, 195, 140, 173, 189, 186, 102, 6, 190, 63, 222, 245, 189, 150, 38, 218, 58, 130, 189, 44, 61, 239, 62, 152, 189, 215, 18, 59, 61, 71, 53, 74, 61, 244, 190, 153, 189, 89, 80, 253, 189, 238, 194, 128, 61, 195, 125, 173, 189, 166, 98, 129, 187, 200, 61, 215, 61, 122, 86, 13, 61, 1, 157, 245, 61, 244, 113, 232, 60, 120, 177, 79, 189, 90, 209, 33, 190, 123, 121, 19, 189, 36, 18, 31, 62, 232, 120, 23, 190, 3, 135, 116, 61, 47, 235, 180, 188, 15, 106, 84, 61, 110, 201, 172, 61, 57, 204, 245, 189, 26, 196, 2, 190, 216, 34, 24, 62, 226, 82, 255, 189, 19, 8, 44, 190, 211, 170, 186, 189, 195, 36, 92, 61, 148, 114, 163, 188, 97, 54, 42, 190, 150, 185, 138, 61, 167, 121, 39, 60, 155, 18, 227, 188, 216, 41, 231, 61, 3, 140, 234, 189, 241, 44, 153, 189, 27, 20, 228, 60, 166, 171, 46, 190, 35, 229, 168, 61, 79, 153, 236, 61, 215, 15, 104, 189, 64, 150, 191, 189, 95, 28, 108, 188, 225, 205, 185, 188, 184, 161, 147, 189, 94, 188, 166, 61, 202, 39, 149, 61, 13, 76, 71, 61, 55, 12, 148, 58, 65, 45, 221, 189, 172, 246, 61, 61, 125, 17, 232, 189, 215, 121, 232, 61, 113, 11, 75, 61, 86, 7, 52, 62, 93, 109, 49, 190, 233, 64, 187, 61, 165, 59, 37, 62, 223, 138, 255, 189, 3, 80, 34, 62, 183, 128, 206, 60, 21, 175, 228, 61, 83, 171, 48, 61, 244, 210, 12, 62, 113, 56, 51, 190, 65, 180, 81, 59, 170, 175, 33, 61, 121, 128, 52, 62, 86, 227, 168, 57, 102, 219, 226, 61, 162, 43, 205, 189, 4, 118, 243, 189, 111, 61, 48, 189, 182, 56, 19, 190, 75, 214, 51, 190, 182, 252, 10, 62, 248, 165, 167, 61, 252, 18, 12, 62, 97, 212, 221, 189, 144, 100, 253, 187, 110, 128, 15, 62, 56, 206, 137, 189, 73, 110, 225, 61, 191, 97, 12, 190, 85, 139, 13, 60, 115, 245, 228, 189, 147, 97, 52, 62, 193, 223, 55, 189, 120, 61, 16, 187, 5, 53, 7, 62, 120, 227, 181, 189, 65, 250, 214, 60, 233, 166, 50, 62, 189, 218, 16, 190, 199, 107, 13, 62, 48, 2, 158, 61, 99, 36, 5, 190, 12, 129, 36, 61, 242, 106, 146, 61, 197, 237, 19, 190, 239, 180, 166, 189, 130, 85, 41, 62, 190, 151, 44, 60, 243, 182, 166, 189, 102, 49, 206, 61, 105, 105, 205, 60, 132, 193, 183, 187, 6, 73, 24, 62, 205, 60, 27, 190, 244, 217, 7, 62, 235, 43, 247, 189, 64, 126, 180, 189, 158, 174, 39, 62, 185, 56, 248, 61, 122, 156, 8, 190, 212, 251, 192, 60, 19, 45, 66, 189, 98, 213, 27, 62, 209, 222, 212, 61, 78, 204, 186, 60, 122, 90, 38, 188, 221, 120, 241, 61, 235, 20, 122, 188, 33, 236, 16, 62, 248, 250, 170, 189, 208, 81, 196, 61, 248, 126, 26, 189, 175, 6, 145, 188, 242, 218, 26, 62, 161, 209, 46, 189, 106, 10, 251, 60, 32, 198, 170, 189, 68, 55, 0, 62, 60, 138, 140, 61, 90, 226, 101, 61, 224, 186, 91, 187, 45, 247, 10, 190, 73, 181, 164, 189, 238, 43, 76, 189, 50, 162, 25, 62, 147, 92, 110, 61, 122, 222, 8, 62, 41, 142, 13, 189, 141, 197, 69, 61, 5, 59, 217, 61, 199, 139, 195, 61, 60, 217, 181, 188, 140, 207, 180, 189, 106, 124, 5, 61, 221, 204, 153, 61, 28, 196, 139, 188, 12, 25, 141, 188, 46, 116, 161, 61, 247, 156, 15, 190, 174, 50, 183, 59, 199, 129, 166, 189, 215, 171, 25, 61, 67, 50, 45, 62, 234, 211, 239, 61, 243, 152, 152, 189, 247, 242, 60, 188, 141, 14, 164, 189, 52, 107, 5, 188, 49, 87, 28, 189, 213, 171, 9, 190, 127, 57, 76, 189, 193, 64, 138, 189, 216, 25, 212, 188, 255, 247, 143, 61, 25, 201, 183, 189, 217, 177, 114, 60, 13, 104, 113, 61, 149, 84, 205, 189, 69, 51, 142, 188, 255, 196, 124, 189, 152, 4, 19, 62, 166, 118, 133, 60, 92, 29, 44, 62, 183, 115, 42, 61, 114, 143, 168, 61, 178, 144, 32, 190, 227, 68, 133, 60, 20, 207, 251, 61, 164, 34, 31, 189, 39, 155, 26, 61, 104, 162, 237, 61, 227, 63, 50, 189, 67, 180, 195, 61, 107, 5, 14, 190, 12, 229, 229, 188, 27, 206, 163, 188, 166, 193, 36, 62, 13, 89, 44, 190, 224, 250, 167, 60, 51, 92, 165, 189, 129, 102, 199, 189, 139, 195, 188, 61, 221, 131, 48, 190, 28, 64, 16, 190, 113, 249, 27, 62, 10, 140, 114, 189, 93, 191, 134, 60, 177, 225, 212, 188, 26, 189, 239, 189, 194, 150, 202, 61, 110, 25, 22, 62, 156, 177, 8, 61, 207, 178, 31, 62, 233, 237, 204, 189, 249, 150, 188, 61, 24, 167, 42, 62, 159, 237, 179, 61, 204, 50, 25, 62, 48, 55, 76, 188, 53, 50, 45, 62, 12, 160, 232, 61, 243, 26, 15, 190, 0, 88, 19, 190, 32, 122, 119, 189, 155, 118, 118, 189, 252, 167, 18, 190, 15, 118, 182, 189, 150, 91, 157, 189, 42, 85, 43, 62, 230, 100, 134, 189, 192, 111, 51, 62, 81, 232, 238, 59, 110, 183, 20, 190, 193, 24, 157, 61, 217, 62, 41, 62, 233, 153, 231, 188, 95, 215, 109, 60, 10, 149, 245, 60, 241, 191, 1, 61, 70, 42, 88, 189, 214, 60, 166, 61, 239, 18, 1, 190, 46, 220, 35, 188, 66, 112, 28, 190, 170, 27, 9, 190, 235, 135, 125, 58, 55, 106, 12, 188, 233, 88, 19, 190, 243, 135, 243, 189, 79, 213, 182, 61, 152, 106, 83, 189, 175, 67, 248, 61, 136, 1, 11, 190, 200, 12, 24, 189, 97, 235, 244, 61, 225, 106, 20, 188, 165, 93, 7, 62, 135, 32, 40, 61, 223, 65, 181, 61, 29, 152, 198, 61, 78, 184, 223, 189, 174, 23, 17, 61, 82, 147, 244, 188, 61, 71, 179, 189, 219, 46, 244, 189, 173, 67, 149, 61, 200, 66, 242, 189, 253, 95, 191, 189, 237, 117, 46, 189, 91, 179, 176, 61, 31, 247, 50, 190, 174, 161, 83, 189, 194, 160, 95, 189, 48, 91, 10, 190, 233, 129, 172, 60, 203, 150, 124, 60, 61, 44, 53, 189, 42, 23, 249, 61, 32, 151, 151, 189, 129, 98, 249, 61, 163, 215, 8, 190, 76, 107, 245, 61, 131, 170, 26, 190, 135, 138, 11, 189, 51, 79, 48, 190, 68, 188, 91, 61, 169, 46, 149, 61, 185, 96, 173, 189, 162, 226, 8, 190, 246, 123, 249, 61, 133, 99, 203, 188, 134, 103, 177, 189, 193, 151, 101, 61, 69, 106, 13, 190, 251, 218, 160, 60, 80, 248, 26, 62, 232, 105, 148, 61, 18, 189, 213, 60, 223, 46, 220, 61, 134, 4, 142, 189, 188, 25, 38, 190, 189, 87, 229, 60, 234, 205, 84, 189, 165, 185, 169, 61, 203, 219, 18, 190, 87, 98, 255, 61, 89, 205, 49, 189, 80, 189, 39, 62, 104, 65, 53, 59, 169, 53, 44, 62, 165, 72, 44, 190, 114, 128, 62, 60, 190, 47, 194, 189, 158, 217, 9, 190, 214, 183, 32, 190, 148, 99, 150, 188, 90, 207, 222, 61, 20, 251, 160, 189, 24, 145, 8, 62, 191, 61, 62, 189, 146, 195, 13, 61, 149, 32, 206, 61, 53, 139, 36, 190, 211, 80, 252, 61, 111, 117, 250, 189, 59, 230, 34, 62, 84, 103, 225, 61, 235, 204, 225, 187, 255, 31, 26, 62, 98, 4, 204, 189, 71, 68, 29, 62, 174, 56, 122, 189, 159, 80, 242, 187, 14, 85, 41, 62, 46, 165, 151, 188, 136, 211, 203, 59, 79, 86, 220, 189, 250, 101, 9, 190, 187, 113, 43, 190, 76, 68, 12, 59, 6, 116, 185, 189, 178, 157, 240, 61, 101, 16, 244, 60, 68, 78, 202, 61, 84, 5, 101, 189, 182, 223, 40, 60, 143, 99, 238, 187, 211, 81, 108, 61, 91, 85, 232, 189, 86, 146, 114, 61, 31, 252, 172, 61, 195, 210, 185, 61, 204, 58, 186, 61, 251, 21, 224, 189, 91, 113, 14, 190, 5, 90, 251, 61, 168, 224, 199, 61, 99, 129, 45, 62, 121, 23, 232, 189, 2, 89, 160, 189, 41, 83, 209, 60, 59, 56, 247, 61, 9, 174, 4, 62, 236, 180, 25, 62, 9, 209, 30, 190, 180, 238, 162, 61, 149, 221, 220, 188, 144, 113, 245, 61, 251, 228, 76, 61, 108, 246, 71, 188, 249, 173, 131, 189, 224, 60, 51, 190, 231, 31, 148, 61, 112, 175, 152, 61, 75, 60, 208, 60, 236, 19, 6, 62, 180, 118, 234, 61, 150, 112, 202, 61, 102, 173, 134, 188, 194, 3, 46, 62, 209, 192, 232, 61, 141, 139, 25, 190, 2, 64, 170, 188, 19, 9, 161, 60, 79, 29, 43, 62, 202, 4, 228, 189, 94, 197, 230, 61, 52, 73, 29, 190, 225, 195, 202, 61, 102, 14, 51, 190, 181, 205, 4, 190, 212, 144, 115, 189, 203, 237, 161, 61, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 182, 209, 85, 189, 114, 39, 37, 62, 165, 42, 186, 187, 108, 135, 221, 188, 168, 12, 49, 62, 79, 234, 147, 61, 1, 37, 254, 61, 20, 117, 22, 61, 0, 19, 129, 61, 191, 140, 238, 59, 34, 160, 203, 60, 150, 217, 9, 190, 122, 176, 30, 190, 201, 0, 59, 61, 54, 133, 232, 61, 22, 225, 119, 61, 5, 203, 105, 189, 126, 25, 1, 190, 85, 247, 157, 189, 102, 189, 254, 61, 130, 174, 226, 188, 79, 243, 20, 190, 123, 237, 174, 61, 126, 237, 254, 61, 152, 138, 204, 61, 172, 128, 192, 189, 76, 38, 214, 189, 59, 11, 176, 61, 144, 32, 189, 61, 13, 141, 155, 188, 249, 119, 255, 61, 18, 107, 106, 189, 79, 242, 233, 189, 41, 55, 199, 189, 89, 220, 33, 189, 203, 82, 44, 62, 90, 107, 139, 189, 78, 0, 85, 189, 96, 61, 145, 188, 243, 3, 136, 61, 166, 2, 70, 61, 229, 43, 200, 60, 150, 161, 25, 190, 180, 219, 157, 188, 190, 114, 80, 188, 240, 59, 143, 61, 12, 246, 220, 189, 89, 253, 69, 61, 52, 232, 119, 189, 226, 145, 104, 189, 138, 41, 104, 189, 116, 139, 27, 190, 149, 0, 35, 61, 137, 26, 165, 189, 183, 142, 232, 189, 179, 202, 65, 188, 189, 227, 200, 189, 252, 6, 40, 60, 119, 216, 44, 190, 55, 61, 138, 188, 147, 33, 136, 189, 162, 242, 127, 61, 230, 245, 45, 62, 233, 38, 139, 189, 150, 9, 100, 61, 94, 249, 31, 190, 139, 166, 48, 62, 66, 92, 226, 189, 96, 191, 136, 189, 247, 188, 61, 189, 126, 212, 184, 188, 103, 166, 34, 62, 71, 121, 190, 189, 4, 81, 146, 189, 105, 24, 174, 189, 209, 203, 63, 188, 24, 83, 48, 190, 250, 64, 33, 62, 200, 209, 229, 188, 2, 168, 9, 62, 250, 2, 34, 62, 178, 207, 18, 61, 167, 23, 70, 189, 160, 123, 250, 187, 235, 90, 10, 190, 94, 130, 29, 61, 56, 41, 251, 59, 77, 88, 4, 62, 208, 142, 49, 189, 138, 247, 215, 61, 2, 102, 171, 188, 72, 191, 13, 62, 171, 216, 2, 62, 16, 244, 223, 61, 61, 43, 230, 61, 174, 58, 20, 190, 184, 165, 47, 62, 139, 34, 39, 61, 163, 187, 191, 189, 202, 203, 27, 190, 227, 115, 33, 62, 172, 70, 94, 61, 67, 123, 222, 189, 8, 60, 94, 189, 114, 40, 152, 189, 226, 107, 115, 61, 25, 113, 18, 61, 92, 222, 25, 190, 85, 29, 217, 188, 61, 130, 24, 61, 202, 19, 149, 187, 110, 179, 195, 189, 131, 31, 41, 62, 165, 143, 172, 61, 5, 150, 24, 62, 100, 234, 40, 190, 36, 227, 14, 62, 213, 136, 207, 61, 18, 38, 152, 61, 143, 224, 10, 190, 166, 248, 53, 189, 202, 151, 222, 60, 154, 34, 228, 189, 81, 2, 11, 190, 8, 14, 179, 189, 101, 159, 89, 189, 19, 95, 227, 61, 232, 48, 249, 189, 138, 220, 255, 61, 205, 68, 126, 188, 106, 47, 182, 61, 127, 244, 135, 189, 214, 42, 191, 61, 73, 11, 218, 61, 21, 151, 94, 61, 154, 154, 244, 61, 156, 253, 252, 189, 58, 29, 232, 189, 176, 182, 185, 61, 205, 29, 208, 189, 206, 35, 205, 61, 83, 128, 7, 190, 28, 147, 18, 190, 110, 11, 41, 190, 114, 245, 17, 62, 98, 180, 52, 189, 91, 247, 160, 189, 34, 156, 206, 189, 44, 102, 182, 61, 177, 126, 161, 189, 223, 168, 32, 62, 81, 136, 244, 61, 138, 38, 40, 187, 115, 117, 44, 60, 117, 247, 9, 62, 169, 202, 81, 189, 150, 99, 144, 61, 166, 141, 52, 190, 46, 46, 66, 61, 183, 137, 9, 190, 4, 32, 47, 189, 170, 53, 41, 190, 220, 244, 184, 189, 170, 235, 70, 189, 240, 202, 4, 62, 96, 31, 242, 189, 50, 23, 157, 188, 49, 151, 23, 62, 29, 222, 233, 61, 171, 170, 32, 62, 252, 81, 243, 189, 60, 159, 82, 61, 48, 112, 30, 62, 243, 97, 153, 61, 245, 100, 186, 61, 116, 71, 48, 190, 48, 180, 32, 190, 121, 67, 13, 190, 50, 118, 3, 61, 14, 142, 203, 189, 191, 75, 108, 61, 205, 75, 18, 62, 172, 87, 40, 190, 195, 148, 197, 57, 208, 11, 246, 188, 24, 249, 157, 61, 13, 36, 139, 189, 169, 248, 229, 61, 176, 97, 203, 58, 102, 0, 172, 189, 122, 213, 28, 190, 176, 146, 192, 61, 63, 126, 37, 62, 77, 169, 199, 189, 11, 213, 38, 190, 123, 10, 35, 61, 54, 145, 160, 61, 12, 216, 10, 60, 177, 243, 90, 189, 45, 168, 35, 189, 83, 46, 6, 190, 175, 28, 34, 189, 19, 139, 31, 190, 132, 210, 48, 62, 200, 209, 244, 189, 222, 235, 250, 61, 236, 12, 209, 61, 78, 5, 16, 62, 32, 168, 9, 189, 249, 145, 10, 62, 113, 139, 53, 189, 146, 252, 32, 60, 170, 182, 9, 61, 86, 224, 199, 61, 4, 255, 34, 62, 233, 155, 140, 189, 98, 160, 172, 61, 242, 221, 176, 188, 236, 115, 247, 189, 162, 154, 160, 61, 114, 173, 48, 189, 176, 120, 47, 190, 248, 150, 147, 60, 161, 148, 34, 62, 176, 97, 127, 189, 217, 206, 3, 61, 245, 13, 190, 189, 255, 138, 42, 190, 255, 180, 93, 189, 173, 39, 0, 189, 134, 107, 247, 189, 211, 18, 194, 187, 233, 208, 35, 62, 83, 173, 62, 189, 216, 88, 101, 60, 151, 251, 30, 62, 17, 3, 50, 62, 68, 138, 33, 189, 50, 174, 142, 61, 176, 185, 98, 189, 184, 210, 238, 189, 81, 201, 41, 190, 106, 141, 50, 188, 11, 102, 177, 188, 203, 148, 26, 190, 214, 251, 100, 189, 33, 95, 38, 62, 27, 10, 51, 190, 70, 210, 20, 62, 50, 147, 168, 189, 6, 198, 21, 61, 182, 146, 175, 61, 235, 246, 241, 61, 244, 163, 11, 62, 168, 217, 31, 190, 210, 137, 172, 61, 224, 87, 245, 59, 185, 154, 215, 188, 70, 193, 61, 189, 99, 177, 187, 189, 4, 7, 250, 61, 0, 243, 38, 190, 250, 164, 231, 189, 104, 160, 103, 61, 20, 37, 154, 61, 46, 183, 144, 188, 43, 141, 166, 61, 221, 153, 210, 188, 156, 234, 12, 189, 44, 130, 34, 190, 111, 27, 114, 189, 98, 69, 91, 61, 20, 223, 132, 189, 194, 246, 101, 189, 199, 102, 243, 60, 74, 125, 29, 62, 162, 219, 110, 61, 8, 15, 73, 61, 179, 60, 34, 62, 121, 56, 28, 190, 186, 70, 190, 189, 239, 36, 10, 62, 45, 190, 18, 61, 7, 52, 200, 60, 245, 239, 173, 189, 85, 33, 4, 190, 243, 244, 2, 61, 105, 130, 75, 189, 91, 158, 20, 190, 54, 61, 255, 189, 185, 64, 49, 62, 157, 20, 0, 190, 155, 132, 2, 61, 13, 123, 169, 189, 225, 128, 234, 60, 80, 112, 144, 189, 103, 130, 249, 61, 29, 202, 47, 190, 39, 177, 206, 61, 159, 110, 250, 189, 116, 126, 195, 60, 104, 103, 28, 62, 149, 152, 163, 189, 145, 193, 236, 189, 100, 155, 49, 190, 33, 120, 255, 188, 237, 170, 39, 190, 237, 116, 236, 61, 192, 18, 38, 190, 79, 18, 250, 61, 0, 94, 30, 190, 109, 164, 248, 60, 47, 34, 93, 189, 115, 154, 28, 190, 92, 125, 44, 188, 1, 86, 42, 190, 253, 131, 37, 62, 136, 224, 169, 189, 124, 89, 46, 189, 57, 19, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 4, 209, 61, 51, 12, 184, 189, 41, 164, 226, 189, 59, 189, 235, 61, 125, 73, 134, 61, 1, 240, 195, 189, 189, 157, 32, 62, 72, 109, 166, 61, 179, 146, 40, 62, 11, 113, 224, 61, 94, 82, 35, 190, 96, 89, 44, 62, 134, 117, 239, 189, 235, 124, 180, 60, 163, 234, 37, 190, 244, 87, 18, 190, 217, 228, 17, 61, 46, 0, 44, 61, 18, 135, 229, 188, 79, 167, 0, 188, 54, 16, 223, 189, 20, 252, 5, 190, 99, 39, 162, 61, 149, 90, 12, 62, 118, 232, 168, 60, 196, 244, 200, 189, 250, 21, 53, 189, 80, 207, 131, 60, 45, 174, 205, 188, 162, 193, 47, 190, 86, 103, 26, 189, 180, 195, 30, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 240, 46, 190, 187, 62, 166, 189, 189, 32, 134, 61, 187, 115, 234, 61, 228, 22, 95, 59, 24, 235, 129, 189, 149, 216, 11, 62, 30, 92, 20, 61, 176, 31, 110, 189, 225, 76, 10, 62, 147, 71, 250, 61, 213, 231, 13, 62, 159, 247, 206, 189, 31, 27, 123, 188, 142, 24, 27, 62, 72, 8, 148, 60, 86, 130, 205, 59, 228, 238, 70, 61, 64, 144, 159, 189, 58, 6, 199, 61, 118, 229, 235, 189, 199, 237, 40, 62, 110, 194, 158, 61, 156, 77, 184, 60, 57, 195, 50, 62, 132, 53, 192, 189, 218, 51, 46, 190, 48, 217, 117, 188, 158, 146, 229, 189, 91, 111, 179, 61, 137, 113, 19, 188, 158, 172, 144, 61, 34, 9, 32, 62, 35, 49, 6, 62, 216, 28, 9, 190, 244, 55, 153, 189, 225, 201, 34, 190, 252, 29, 118, 189, 219, 73, 12, 190, 229, 242, 0, 62, 192, 104, 158, 61, 91, 12, 197, 188, 251, 159, 35, 190, 178, 3, 201, 58, 125, 39, 11, 189, 216, 47, 138, 58, 232, 120, 42, 61, 72, 126, 41, 62, 89, 123, 25, 62, 184, 118, 46, 61, 175, 186, 150, 189, 144, 102, 240, 61, 165, 36, 247, 60, 68, 75, 86, 61, 226, 148, 157, 60, 89, 209, 27, 62, 166, 158, 30, 190, 110, 24, 3, 62, 61, 53, 58, 189, 62, 211, 6, 189, 14, 214, 177, 61, 184, 23, 70, 189, 197, 107, 15, 188, 247, 136, 58, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 35, 100, 187, 110, 13, 50, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 55, 211, 62, 70, 38, 91, 191, 215, 186, 253, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 24, 163, 61, 40, 236, 203, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}