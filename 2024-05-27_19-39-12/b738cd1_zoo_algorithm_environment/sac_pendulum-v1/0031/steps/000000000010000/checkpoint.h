// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 177, 13, 191, 121, 57, 31, 191, 67, 92, 218, 62, 254, 90, 55, 191, 132, 225, 58, 63, 97, 179, 23, 63, 150, 119, 152, 62, 170, 44, 200, 62, 104, 236, 200, 62, 19, 223, 109, 190, 90, 3, 206, 63, 231, 118, 219, 62, 255, 197, 8, 63, 233, 206, 128, 191, 12, 52, 137, 190, 228, 159, 40, 63, 187, 87, 159, 63, 37, 249, 164, 62, 3, 180, 100, 63, 246, 173, 117, 63, 246, 160, 193, 62, 227, 84, 151, 189, 157, 115, 65, 191, 9, 81, 192, 62, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 193, 187, 21, 191, 117, 85, 127, 63, 183, 120, 54, 62, 136, 98, 178, 61, 194, 54, 159, 191, 144, 193, 173, 190, 28, 39, 71, 190, 77, 213, 71, 191, 140, 150, 27, 190, 218, 215, 239, 62, 246, 115, 19, 63, 163, 169, 8, 190, 135, 210, 80, 63, 66, 176, 35, 191, 175, 163, 87, 190, 55, 126, 60, 62, 70, 145, 71, 191, 232, 63, 63, 63, 103, 185, 11, 191, 233, 194, 90, 188, 1, 207, 182, 190, 77, 45, 1, 63, 90, 99, 71, 60, 245, 221, 22, 63, 106, 48, 35, 189, 122, 200, 153, 191, 234, 136, 144, 190, 208, 89, 164, 189, 139, 45, 128, 63, 132, 167, 25, 63, 161, 149, 133, 190, 164, 42, 62, 62, 130, 242, 153, 62, 92, 240, 41, 191, 51, 122, 38, 61, 75, 177, 31, 191, 214, 206, 233, 189, 27, 114, 111, 191, 48, 56, 26, 190, 104, 56, 17, 190, 234, 132, 85, 60, 24, 144, 46, 61, 147, 184, 132, 190, 213, 44, 217, 62, 27, 43, 229, 190, 37, 1, 199, 62, 219, 242, 67, 190, 109, 20, 228, 190, 210, 111, 166, 61, 40, 123, 42, 191, 203, 132, 13, 63, 68, 96, 110, 190, 61, 162, 160, 61, 17, 167, 5, 191, 105, 129, 121, 63, 113, 27, 231, 62, 199, 158, 188, 62, 236, 83, 153, 62, 52, 244, 146, 63, 212, 115, 177, 62, 171, 106, 192, 189, 16, 160, 198, 62, 82, 17, 4, 191, 42, 119, 76, 63, 153, 201, 118, 191, 43, 60, 18, 190, 25, 84, 209, 62, 13, 68, 48, 191, 225, 180, 252, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 34, 223, 190, 157, 222, 208, 190, 222, 217, 231, 62, 45, 202, 230, 59, 55, 175, 138, 190, 163, 8, 55, 62, 93, 22, 215, 190, 252, 10, 57, 190, 52, 10, 240, 189, 105, 70, 174, 190, 249, 86, 213, 61, 221, 71, 241, 62, 2, 225, 9, 63, 212, 232, 80, 189, 1, 143, 61, 62, 118, 236, 38, 63, 40, 6, 78, 62, 117, 148, 244, 189, 89, 209, 78, 62, 82, 96, 172, 190, 5, 3, 55, 190, 27, 179, 151, 62, 128, 134, 84, 63, 242, 36, 33, 190, 187, 91, 133, 190, 74, 6, 4, 62, 36, 145, 14, 63, 98, 171, 142, 191, 245, 92, 228, 62, 204, 199, 171, 189, 100, 66, 227, 62, 80, 237, 194, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 104, 131, 190, 184, 175, 71, 191, 178, 114, 35, 62, 175, 220, 58, 190, 45, 135, 155, 190, 46, 224, 217, 62, 181, 194, 211, 61, 192, 74, 196, 190, 204, 15, 160, 61, 180, 55, 140, 59, 32, 189, 182, 190, 170, 192, 87, 189, 82, 198, 71, 62, 69, 241, 66, 190, 253, 79, 162, 60, 222, 231, 146, 61, 217, 34, 222, 61, 124, 32, 84, 191, 93, 26, 197, 190, 226, 73, 66, 190, 1, 142, 117, 62, 56, 131, 104, 61, 203, 181, 181, 61, 131, 45, 25, 190, 64, 161, 102, 190, 177, 37, 196, 62, 99, 206, 146, 60, 32, 46, 68, 190, 238, 117, 84, 62, 0, 199, 174, 61, 22, 59, 19, 190, 234, 146, 58, 61, 157, 170, 141, 188, 244, 218, 185, 58, 191, 184, 7, 62, 188, 103, 88, 61, 163, 40, 31, 61, 156, 86, 118, 60, 231, 163, 130, 189, 125, 196, 21, 190, 192, 165, 218, 189, 187, 15, 230, 189, 245, 162, 17, 62, 150, 111, 243, 189, 53, 162, 11, 190, 215, 40, 170, 59, 89, 230, 73, 190, 134, 225, 171, 189, 126, 248, 30, 190, 254, 151, 165, 60, 32, 165, 74, 190, 202, 228, 24, 188, 130, 176, 237, 61, 102, 213, 190, 61, 177, 177, 98, 62, 56, 156, 213, 61, 71, 171, 36, 61, 136, 6, 22, 190, 219, 210, 77, 190, 12, 158, 137, 60, 149, 23, 27, 190, 125, 123, 36, 190, 103, 178, 0, 190, 155, 46, 60, 190, 28, 191, 187, 62, 230, 76, 30, 191, 89, 75, 30, 62, 124, 133, 48, 191, 171, 228, 156, 61, 21, 135, 74, 190, 195, 37, 70, 190, 29, 242, 143, 62, 231, 25, 111, 60, 106, 3, 205, 191, 130, 192, 243, 60, 118, 234, 149, 188, 170, 96, 203, 61, 213, 60, 141, 61, 35, 173, 54, 189, 100, 188, 3, 189, 218, 179, 60, 62, 157, 152, 50, 61, 201, 12, 41, 191, 8, 9, 97, 62, 105, 75, 2, 62, 205, 247, 1, 62, 142, 225, 31, 61, 34, 19, 28, 61, 249, 41, 111, 61, 220, 89, 156, 62, 31, 11, 9, 62, 52, 130, 125, 190, 225, 147, 138, 190, 95, 216, 146, 61, 24, 255, 154, 62, 171, 46, 252, 61, 125, 163, 160, 190, 105, 46, 218, 61, 155, 31, 77, 62, 37, 109, 132, 61, 197, 3, 100, 189, 205, 245, 51, 190, 17, 224, 26, 190, 75, 254, 128, 62, 227, 188, 15, 62, 110, 255, 52, 62, 228, 196, 21, 191, 83, 127, 174, 61, 102, 75, 5, 191, 14, 234, 69, 189, 242, 215, 142, 62, 101, 117, 246, 61, 232, 100, 44, 189, 97, 179, 144, 190, 118, 42, 99, 62, 67, 148, 1, 59, 140, 145, 41, 190, 122, 102, 117, 188, 73, 4, 194, 189, 166, 26, 167, 61, 226, 186, 236, 189, 197, 212, 164, 190, 97, 41, 15, 190, 114, 49, 135, 190, 59, 244, 7, 62, 166, 162, 162, 62, 126, 168, 49, 189, 73, 153, 133, 62, 103, 247, 176, 62, 13, 58, 154, 191, 254, 82, 247, 187, 5, 11, 67, 191, 29, 57, 141, 190, 102, 77, 4, 63, 25, 120, 63, 62, 107, 63, 212, 190, 159, 253, 166, 188, 1, 244, 149, 190, 184, 65, 208, 60, 49, 221, 175, 61, 49, 40, 43, 62, 12, 67, 140, 190, 245, 72, 177, 189, 173, 167, 139, 62, 203, 6, 217, 61, 99, 114, 47, 188, 224, 155, 22, 191, 179, 179, 128, 189, 10, 139, 164, 61, 207, 220, 64, 61, 110, 154, 165, 188, 114, 228, 136, 61, 176, 41, 160, 190, 185, 15, 230, 62, 165, 119, 96, 62, 66, 50, 42, 188, 160, 39, 47, 61, 220, 234, 216, 189, 172, 166, 76, 190, 232, 47, 238, 60, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 68, 71, 83, 189, 39, 133, 71, 62, 83, 208, 124, 62, 134, 7, 161, 188, 1, 162, 105, 62, 136, 62, 18, 61, 219, 210, 189, 189, 150, 255, 88, 61, 108, 119, 1, 189, 250, 12, 161, 62, 7, 124, 12, 62, 175, 240, 191, 62, 213, 149, 191, 189, 110, 243, 128, 62, 75, 147, 174, 61, 57, 244, 12, 60, 115, 52, 255, 189, 206, 33, 34, 61, 105, 148, 130, 189, 173, 238, 51, 60, 69, 207, 142, 190, 213, 6, 110, 61, 175, 121, 73, 62, 254, 122, 84, 190, 224, 9, 44, 190, 42, 2, 212, 189, 247, 88, 106, 189, 242, 71, 121, 190, 230, 212, 35, 62, 14, 151, 71, 190, 96, 244, 45, 61, 204, 237, 36, 61, 197, 12, 81, 188, 116, 26, 247, 188, 164, 32, 106, 61, 180, 177, 135, 187, 141, 72, 28, 189, 88, 238, 140, 189, 213, 69, 192, 187, 204, 101, 56, 190, 12, 44, 15, 62, 160, 73, 80, 190, 52, 181, 52, 190, 223, 74, 129, 189, 5, 76, 40, 190, 15, 67, 3, 61, 25, 141, 32, 190, 52, 14, 34, 189, 142, 253, 210, 60, 49, 140, 16, 62, 252, 215, 245, 59, 199, 61, 47, 190, 246, 110, 238, 60, 97, 58, 40, 190, 245, 153, 183, 61, 128, 221, 41, 190, 233, 37, 50, 189, 57, 143, 29, 190, 135, 156, 124, 61, 189, 7, 26, 59, 50, 182, 6, 190, 81, 69, 218, 61, 172, 119, 74, 190, 221, 144, 201, 61, 218, 111, 226, 62, 20, 63, 73, 191, 83, 117, 253, 190, 75, 152, 158, 191, 248, 247, 1, 191, 173, 122, 1, 63, 63, 121, 162, 62, 126, 200, 186, 190, 117, 116, 31, 190, 204, 100, 21, 191, 16, 44, 32, 188, 255, 191, 166, 189, 34, 7, 132, 62, 246, 23, 11, 191, 228, 202, 233, 61, 44, 56, 154, 62, 93, 15, 28, 62, 231, 73, 143, 190, 118, 204, 28, 191, 125, 134, 195, 61, 50, 1, 122, 62, 213, 206, 176, 189, 137, 153, 59, 62, 67, 4, 67, 190, 17, 201, 223, 190, 11, 245, 196, 62, 75, 211, 5, 62, 11, 159, 66, 61, 251, 172, 107, 190, 91, 222, 8, 190, 102, 38, 63, 190, 7, 117, 6, 190, 89, 80, 253, 189, 238, 194, 128, 61, 150, 120, 177, 189, 166, 98, 129, 187, 141, 197, 163, 61, 21, 174, 238, 60, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 165, 119, 33, 190, 228, 209, 136, 189, 36, 179, 236, 61, 235, 106, 45, 190, 131, 230, 57, 61, 47, 235, 180, 188, 20, 38, 129, 60, 110, 201, 172, 61, 236, 125, 3, 190, 82, 238, 11, 190, 216, 34, 24, 62, 97, 201, 35, 190, 10, 146, 81, 190, 53, 235, 222, 189, 210, 244, 181, 60, 166, 181, 50, 189, 97, 54, 42, 190, 157, 162, 16, 61, 167, 121, 39, 60, 106, 33, 53, 189, 127, 2, 170, 61, 246, 59, 252, 189, 241, 44, 153, 189, 181, 8, 35, 190, 153, 218, 13, 188, 195, 128, 126, 62, 105, 60, 76, 62, 116, 193, 19, 61, 31, 186, 198, 189, 27, 159, 43, 189, 102, 50, 234, 61, 184, 161, 147, 189, 102, 193, 146, 62, 208, 4, 180, 61, 14, 28, 32, 62, 163, 16, 153, 61, 124, 65, 54, 62, 3, 64, 223, 61, 247, 255, 29, 190, 244, 83, 56, 61, 222, 65, 176, 61, 149, 248, 106, 62, 44, 31, 143, 190, 174, 224, 135, 189, 72, 224, 11, 62, 17, 173, 40, 189, 100, 245, 171, 61, 201, 104, 186, 61, 131, 195, 4, 190, 144, 169, 205, 59, 49, 143, 204, 189, 97, 45, 1, 190, 244, 182, 187, 188, 230, 42, 83, 62, 153, 224, 161, 62, 251, 101, 176, 190, 60, 76, 218, 62, 33, 98, 40, 62, 28, 234, 161, 189, 231, 168, 194, 61, 175, 218, 12, 191, 115, 199, 13, 191, 224, 237, 243, 62, 248, 165, 167, 61, 182, 75, 163, 62, 213, 15, 137, 189, 157, 78, 29, 62, 145, 226, 30, 62, 226, 219, 48, 62, 107, 71, 186, 62, 250, 193, 34, 190, 117, 246, 197, 190, 179, 81, 217, 59, 241, 203, 76, 62, 15, 239, 145, 190, 6, 129, 248, 189, 61, 162, 48, 62, 75, 212, 149, 61, 18, 177, 226, 187, 82, 164, 135, 62, 243, 228, 11, 191, 74, 7, 192, 61, 34, 7, 65, 191, 80, 222, 126, 190, 224, 99, 114, 61, 108, 208, 176, 62, 245, 75, 136, 62, 90, 63, 49, 63, 98, 211, 251, 190, 34, 235, 181, 190, 0, 6, 146, 191, 4, 242, 195, 189, 177, 180, 187, 62, 199, 227, 208, 61, 204, 248, 106, 189, 205, 60, 27, 190, 28, 168, 179, 190, 109, 63, 167, 189, 219, 62, 155, 60, 34, 248, 126, 62, 182, 204, 210, 189, 118, 171, 178, 190, 19, 195, 77, 62, 95, 96, 203, 189, 241, 148, 70, 62, 50, 42, 133, 190, 186, 158, 164, 62, 174, 31, 2, 62, 124, 163, 132, 62, 187, 13, 13, 188, 48, 27, 150, 61, 123, 132, 106, 190, 5, 48, 9, 63, 82, 187, 215, 61, 137, 75, 94, 189, 137, 166, 106, 61, 17, 142, 22, 190, 209, 46, 22, 190, 229, 72, 223, 190, 40, 103, 224, 61, 191, 141, 142, 190, 185, 130, 207, 61, 201, 178, 209, 189, 244, 140, 13, 191, 228, 62, 153, 62, 130, 112, 32, 62, 133, 237, 229, 190, 147, 92, 110, 61, 16, 157, 156, 189, 134, 200, 48, 190, 179, 94, 76, 190, 5, 14, 170, 62, 203, 56, 82, 190, 52, 189, 20, 190, 10, 116, 243, 60, 173, 90, 154, 62, 66, 254, 38, 191, 249, 54, 67, 189, 236, 161, 147, 61, 249, 175, 74, 62, 147, 51, 131, 190, 104, 31, 117, 61, 62, 144, 206, 189, 221, 239, 141, 190, 118, 197, 227, 62, 247, 4, 114, 62, 235, 4, 70, 62, 58, 127, 166, 61, 65, 66, 55, 190, 36, 199, 39, 189, 92, 223, 17, 190, 220, 216, 177, 190, 165, 176, 13, 62, 135, 31, 158, 62, 216, 30, 44, 62, 151, 45, 109, 61, 146, 14, 241, 190, 34, 146, 128, 190, 63, 175, 181, 62, 149, 84, 205, 189, 72, 247, 240, 62, 57, 73, 125, 190, 249, 154, 218, 61, 179, 172, 219, 188, 251, 45, 223, 62, 185, 128, 153, 62, 79, 55, 153, 61, 175, 85, 214, 190, 74, 191, 200, 190, 145, 29, 142, 62, 176, 108, 104, 190, 10, 177, 187, 188, 184, 112, 74, 189, 140, 140, 186, 61, 129, 232, 125, 62, 218, 133, 37, 62, 131, 101, 186, 190, 212, 90, 32, 189, 114, 53, 84, 190, 4, 14, 45, 190, 244, 124, 137, 62, 186, 173, 134, 190, 110, 151, 161, 62, 226, 32, 164, 189, 243, 106, 138, 190, 13, 9, 61, 189, 44, 209, 52, 62, 190, 238, 160, 189, 128, 134, 176, 62, 237, 217, 134, 62, 100, 103, 175, 190, 194, 150, 202, 61, 59, 39, 162, 61, 233, 5, 152, 189, 34, 25, 187, 190, 61, 80, 157, 62, 140, 227, 197, 62, 131, 33, 108, 61, 140, 132, 119, 190, 41, 209, 90, 62, 232, 142, 245, 189, 49, 23, 23, 62, 83, 90, 32, 62, 182, 21, 1, 190, 195, 115, 157, 190, 252, 128, 236, 189, 248, 137, 156, 189, 35, 199, 86, 190, 125, 185, 17, 190, 179, 227, 3, 190, 75, 187, 10, 63, 178, 248, 150, 61, 249, 4, 71, 61, 32, 71, 240, 189, 81, 238, 87, 190, 208, 8, 134, 61, 201, 132, 24, 62, 209, 53, 126, 189, 210, 241, 153, 188, 128, 210, 192, 60, 198, 112, 46, 188, 64, 160, 158, 189, 214, 60, 166, 61, 239, 18, 1, 190, 19, 232, 9, 189, 28, 13, 39, 190, 29, 83, 28, 190, 176, 121, 20, 189, 150, 121, 193, 188, 78, 220, 33, 190, 238, 107, 36, 190, 35, 20, 136, 61, 96, 239, 107, 189, 151, 149, 164, 61, 4, 73, 23, 190, 169, 175, 60, 189, 13, 25, 183, 61, 41, 159, 57, 189, 158, 146, 238, 61, 153, 220, 10, 61, 52, 133, 157, 61, 69, 232, 117, 61, 117, 85, 0, 190, 194, 58, 239, 187, 137, 112, 20, 189, 253, 215, 192, 189, 246, 183, 9, 190, 109, 89, 215, 190, 35, 181, 155, 62, 115, 65, 137, 61, 70, 233, 80, 62, 96, 145, 143, 62, 163, 181, 28, 191, 12, 45, 194, 190, 117, 134, 190, 62, 48, 91, 10, 190, 229, 83, 36, 63, 10, 120, 195, 187, 63, 180, 188, 60, 63, 222, 29, 62, 74, 17, 157, 62, 122, 115, 147, 62, 211, 180, 37, 190, 188, 242, 151, 190, 223, 154, 33, 190, 225, 205, 131, 62, 13, 17, 202, 190, 244, 49, 199, 189, 8, 175, 91, 60, 6, 170, 168, 61, 239, 100, 241, 189, 148, 206, 184, 62, 252, 220, 233, 190, 240, 158, 4, 190, 197, 16, 85, 191, 205, 24, 64, 190, 150, 1, 22, 62, 186, 245, 196, 62, 231, 126, 199, 62, 183, 120, 61, 61, 49, 102, 204, 189, 150, 74, 180, 60, 189, 210, 132, 190, 170, 198, 195, 190, 66, 158, 102, 62, 119, 222, 59, 62, 50, 104, 16, 191, 87, 98, 255, 61, 16, 227, 88, 190, 245, 47, 240, 59, 241, 229, 32, 190, 205, 69, 179, 62, 141, 32, 156, 190, 219, 31, 183, 188, 23, 161, 70, 189, 144, 22, 172, 61, 177, 24, 100, 191, 99, 243, 35, 189, 103, 15, 32, 62, 23, 71, 206, 59, 143, 14, 137, 189, 44, 30, 190, 60, 231, 241, 113, 61, 239, 4, 67, 189, 45, 213, 148, 61, 168, 153, 74, 62, 199, 46, 137, 189, 217, 179, 104, 62, 34, 15, 184, 61, 150, 235, 42, 60, 230, 72, 2, 62, 224, 145, 240, 58, 150, 54, 226, 61, 61, 55, 132, 190, 123, 53, 208, 189, 14, 115, 157, 62, 88, 186, 56, 191, 148, 182, 18, 191, 131, 155, 148, 62, 250, 101, 9, 190, 249, 70, 39, 190, 145, 227, 13, 61, 159, 228, 86, 61, 216, 194, 138, 61, 38, 217, 104, 62, 18, 154, 180, 62, 191, 92, 114, 189, 57, 23, 172, 190, 7, 117, 213, 188, 47, 154, 204, 61, 143, 85, 42, 191, 46, 215, 42, 189, 204, 99, 22, 62, 241, 229, 96, 62, 125, 173, 127, 61, 118, 21, 146, 188, 149, 233, 41, 190, 55, 240, 144, 61, 127, 185, 40, 60, 117, 91, 86, 190, 28, 195, 180, 189, 59, 213, 23, 62, 62, 70, 143, 62, 102, 60, 126, 62, 23, 70, 60, 62, 74, 145, 154, 62, 243, 176, 222, 189, 128, 160, 193, 190, 217, 85, 239, 60, 192, 97, 233, 61, 199, 184, 163, 62, 108, 246, 71, 188, 189, 124, 193, 189, 27, 110, 142, 190, 45, 67, 176, 61, 24, 221, 131, 62, 198, 174, 135, 190, 21, 245, 142, 62, 135, 166, 201, 61, 210, 86, 32, 62, 64, 57, 229, 60, 197, 245, 122, 62, 121, 212, 23, 62, 175, 194, 48, 191, 7, 185, 183, 190, 235, 76, 45, 62, 150, 181, 95, 63, 217, 188, 174, 190, 36, 205, 156, 62, 15, 153, 162, 190, 126, 104, 95, 62, 90, 188, 214, 189, 132, 213, 243, 62, 141, 164, 136, 61, 2, 122, 100, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 174, 53, 0, 190, 196, 178, 23, 62, 145, 179, 175, 189, 94, 35, 169, 60, 112, 82, 146, 62, 186, 65, 164, 190, 57, 93, 146, 189, 31, 117, 5, 63, 0, 19, 129, 61, 245, 94, 8, 61, 220, 138, 100, 61, 233, 146, 148, 188, 97, 60, 53, 189, 112, 148, 141, 62, 44, 50, 107, 60, 98, 226, 229, 61, 84, 188, 213, 190, 235, 124, 199, 188, 40, 64, 8, 188, 189, 224, 134, 190, 162, 129, 216, 189, 61, 211, 199, 189, 247, 153, 58, 62, 199, 64, 229, 61, 108, 74, 66, 62, 232, 6, 5, 191, 43, 89, 180, 189, 161, 35, 174, 189, 182, 175, 209, 187, 235, 191, 135, 60, 193, 25, 164, 62, 90, 98, 199, 188, 79, 242, 233, 189, 87, 26, 218, 189, 153, 233, 64, 189, 29, 97, 31, 62, 90, 107, 139, 189, 80, 114, 109, 189, 96, 61, 145, 188, 243, 3, 136, 61, 166, 2, 70, 61, 14, 139, 144, 60, 150, 161, 25, 190, 252, 218, 166, 188, 1, 29, 120, 188, 240, 59, 143, 61, 12, 246, 220, 189, 15, 103, 47, 61, 52, 232, 119, 189, 226, 145, 104, 189, 184, 104, 141, 189, 116, 139, 27, 190, 197, 125, 46, 61, 128, 126, 166, 189, 101, 207, 249, 189, 63, 198, 24, 188, 189, 227, 200, 189, 252, 6, 40, 60, 186, 61, 46, 190, 55, 61, 138, 188, 29, 20, 157, 189, 66, 29, 136, 61, 230, 245, 45, 62, 233, 38, 139, 189, 136, 140, 61, 190, 94, 226, 219, 188, 118, 12, 187, 62, 186, 73, 188, 190, 141, 24, 224, 59, 40, 38, 230, 189, 25, 164, 215, 189, 105, 255, 181, 62, 71, 121, 190, 189, 218, 176, 230, 189, 133, 112, 167, 188, 144, 131, 31, 62, 230, 19, 92, 60, 25, 241, 235, 62, 108, 211, 45, 189, 213, 39, 69, 62, 51, 230, 174, 61, 222, 69, 193, 61, 73, 108, 195, 189, 133, 77, 182, 189, 154, 195, 79, 190, 221, 123, 166, 61, 243, 158, 194, 61, 60, 32, 135, 61, 97, 111, 111, 60, 171, 23, 14, 190, 171, 162, 235, 60, 146, 93, 145, 190, 187, 57, 173, 60, 121, 107, 160, 61, 74, 116, 216, 62, 113, 175, 193, 188, 114, 17, 50, 62, 93, 17, 25, 61, 24, 183, 239, 189, 65, 252, 98, 190, 250, 223, 248, 61, 77, 254, 166, 189, 16, 232, 103, 190, 79, 179, 140, 189, 114, 40, 152, 189, 161, 205, 46, 183, 159, 85, 42, 60, 51, 208, 39, 190, 32, 187, 177, 189, 103, 143, 222, 188, 168, 41, 170, 187, 3, 242, 247, 189, 252, 187, 209, 61, 37, 7, 158, 61, 79, 116, 237, 61, 45, 217, 120, 190, 143, 47, 217, 61, 152, 236, 206, 61, 146, 60, 57, 61, 101, 111, 29, 190, 195, 191, 148, 189, 134, 83, 101, 187, 101, 204, 28, 190, 95, 213, 129, 190, 65, 64, 62, 190, 221, 231, 152, 189, 220, 160, 132, 61, 46, 96, 246, 189, 151, 31, 95, 62, 117, 171, 161, 190, 98, 43, 179, 61, 166, 225, 96, 190, 88, 199, 184, 190, 11, 255, 197, 62, 208, 242, 78, 62, 3, 26, 96, 190, 156, 253, 252, 189, 98, 241, 213, 190, 110, 65, 32, 60, 192, 121, 58, 190, 54, 143, 136, 62, 249, 156, 243, 190, 255, 247, 64, 190, 179, 51, 47, 189, 102, 104, 163, 62, 5, 95, 151, 190, 254, 22, 255, 189, 158, 31, 184, 188, 186, 241, 71, 62, 117, 151, 28, 190, 133, 237, 117, 62, 211, 238, 146, 61, 200, 1, 158, 190, 214, 112, 144, 62, 59, 255, 111, 62, 250, 177, 157, 61, 238, 90, 203, 61, 13, 244, 147, 190, 185, 145, 243, 187, 69, 131, 37, 190, 161, 197, 71, 189, 162, 123, 41, 190, 1, 34, 202, 189, 39, 208, 70, 189, 118, 12, 2, 62, 96, 31, 242, 189, 50, 23, 157, 188, 49, 229, 13, 62, 29, 222, 233, 61, 171, 170, 32, 62, 133, 184, 0, 190, 188, 138, 49, 61, 37, 183, 29, 62, 86, 242, 148, 61, 88, 100, 146, 61, 83, 163, 48, 190, 143, 242, 42, 190, 4, 188, 17, 190, 165, 18, 230, 60, 63, 157, 205, 189, 191, 75, 108, 61, 59, 255, 11, 62, 187, 176, 47, 190, 195, 148, 197, 57, 208, 11, 246, 188, 171, 65, 134, 61, 20, 105, 139, 189, 169, 248, 229, 61, 23, 202, 157, 58, 102, 0, 172, 189, 215, 80, 40, 190, 164, 36, 158, 61, 120, 7, 74, 63, 157, 9, 119, 191, 66, 2, 94, 191, 211, 94, 168, 191, 76, 135, 80, 62, 132, 90, 73, 191, 178, 188, 9, 191, 36, 5, 128, 190, 83, 46, 6, 190, 16, 53, 26, 191, 234, 66, 133, 61, 154, 33, 211, 62, 92, 111, 156, 188, 198, 63, 194, 60, 118, 214, 141, 189, 117, 176, 153, 62, 42, 107, 155, 60, 137, 224, 66, 62, 141, 46, 212, 190, 238, 3, 182, 62, 138, 62, 97, 62, 23, 123, 177, 62, 28, 16, 56, 62, 83, 107, 136, 190, 156, 237, 183, 189, 85, 68, 193, 62, 117, 92, 83, 61, 5, 86, 149, 61, 59, 193, 165, 191, 114, 167, 245, 190, 179, 141, 91, 62, 187, 191, 54, 189, 243, 146, 251, 190, 42, 132, 111, 62, 47, 235, 71, 190, 42, 120, 58, 189, 145, 232, 200, 190, 105, 103, 71, 190, 230, 107, 135, 190, 137, 84, 204, 61, 233, 208, 35, 62, 167, 182, 114, 61, 13, 239, 24, 190, 142, 188, 222, 62, 223, 152, 105, 190, 75, 164, 153, 191, 53, 214, 1, 62, 203, 68, 120, 62, 68, 97, 239, 190, 11, 102, 163, 190, 13, 118, 208, 61, 175, 240, 150, 190, 182, 10, 35, 190, 187, 171, 182, 62, 57, 224, 213, 62, 95, 84, 99, 61, 67, 121, 178, 190, 245, 42, 30, 191, 223, 144, 232, 61, 105, 230, 92, 190, 60, 19, 128, 62, 137, 194, 35, 188, 146, 52, 251, 190, 60, 81, 175, 61, 167, 9, 151, 190, 70, 239, 198, 59, 11, 153, 57, 62, 18, 0, 42, 60, 57, 203, 57, 62, 166, 18, 161, 190, 8, 211, 209, 190, 33, 17, 200, 61, 20, 37, 154, 61, 57, 171, 120, 62, 182, 41, 6, 191, 32, 238, 140, 188, 204, 240, 124, 190, 55, 57, 144, 60, 207, 201, 212, 61, 252, 14, 127, 189, 17, 227, 231, 189, 184, 248, 7, 191, 89, 235, 239, 61, 25, 34, 238, 189, 185, 29, 104, 190, 60, 29, 218, 189, 236, 147, 194, 62, 111, 116, 39, 62, 240, 120, 66, 190, 26, 70, 20, 189, 72, 186, 24, 190, 187, 182, 35, 191, 129, 239, 86, 61, 255, 175, 21, 62, 200, 201, 150, 60, 172, 217, 11, 62, 91, 158, 20, 190, 54, 61, 255, 189, 193, 8, 44, 62, 157, 20, 0, 190, 207, 133, 227, 60, 4, 136, 176, 189, 225, 128, 234, 60, 137, 105, 145, 189, 103, 130, 249, 61, 29, 202, 47, 190, 35, 217, 176, 61, 98, 177, 4, 190, 230, 87, 9, 60, 132, 30, 16, 62, 174, 130, 164, 189, 128, 147, 5, 190, 139, 161, 49, 190, 128, 234, 2, 189, 214, 60, 45, 190, 237, 116, 236, 61, 100, 49, 43, 190, 2, 58, 227, 61, 212, 136, 33, 190, 162, 184, 158, 60, 64, 236, 118, 189, 69, 160, 28, 190, 201, 40, 217, 188, 1, 86, 42, 190, 62, 186, 31, 62, 129, 201, 189, 189, 87, 225, 107, 189, 250, 48, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 212, 45, 62, 48, 213, 244, 189, 255, 187, 33, 189, 231, 229, 64, 62, 104, 6, 138, 62, 172, 210, 206, 189, 211, 70, 171, 62, 11, 89, 10, 188, 119, 43, 196, 62, 140, 78, 168, 61, 166, 111, 155, 188, 166, 105, 160, 62, 156, 86, 212, 61, 157, 201, 91, 62, 72, 198, 34, 190, 137, 233, 134, 190, 155, 134, 155, 188, 247, 9, 38, 62, 56, 95, 247, 61, 54, 45, 131, 60, 95, 142, 52, 61, 20, 252, 5, 190, 187, 127, 29, 62, 231, 1, 4, 62, 221, 57, 104, 62, 84, 19, 9, 190, 108, 9, 64, 62, 19, 144, 233, 59, 105, 132, 52, 62, 158, 201, 165, 61, 127, 116, 43, 62, 136, 14, 200, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 104, 50, 191, 204, 215, 139, 189, 221, 206, 57, 62, 226, 143, 160, 62, 250, 151, 17, 191, 220, 46, 129, 189, 229, 182, 65, 62, 24, 74, 238, 58, 109, 47, 152, 191, 216, 143, 173, 61, 207, 76, 14, 62, 124, 255, 252, 62, 183, 185, 255, 190, 232, 74, 187, 190, 186, 129, 3, 63, 76, 129, 199, 62, 16, 60, 22, 189, 205, 113, 48, 63, 4, 124, 239, 189, 220, 73, 160, 62, 3, 3, 161, 190, 199, 237, 40, 62, 203, 211, 109, 62, 215, 197, 246, 60, 105, 78, 98, 62, 250, 226, 222, 188, 215, 12, 16, 191, 39, 20, 124, 188, 123, 245, 124, 191, 95, 152, 58, 63, 17, 54, 217, 62, 86, 155, 126, 61, 255, 105, 12, 60, 103, 128, 246, 61, 241, 98, 41, 60, 125, 170, 252, 189, 143, 73, 140, 190, 226, 14, 116, 189, 86, 246, 145, 190, 135, 94, 193, 61, 31, 171, 156, 62, 31, 58, 59, 189, 13, 5, 228, 189, 160, 248, 177, 60, 12, 34, 169, 189, 180, 123, 46, 189, 73, 111, 135, 61, 63, 139, 156, 62, 107, 34, 237, 61, 30, 236, 101, 62, 211, 84, 123, 190, 202, 161, 44, 62, 217, 234, 2, 61, 68, 75, 86, 61, 183, 78, 152, 188, 33, 241, 25, 62, 238, 117, 209, 190, 36, 1, 188, 61, 183, 211, 45, 189, 141, 238, 250, 188, 108, 29, 44, 62, 182, 223, 204, 61, 177, 83, 0, 190, 159, 99, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 62, 14, 189, 130, 18, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {190, 227, 28, 190, 88, 188, 199, 191, 8, 148, 47, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 60, 113, 63, 170, 183, 43, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}