// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 251, 251, 190, 138, 202, 78, 191, 88, 20, 220, 62, 163, 122, 45, 191, 104, 212, 7, 63, 111, 177, 29, 63, 39, 203, 231, 62, 161, 94, 151, 62, 127, 248, 178, 62, 96, 83, 101, 190, 65, 147, 146, 63, 170, 133, 10, 63, 166, 91, 246, 62, 203, 207, 98, 191, 161, 174, 146, 190, 24, 221, 55, 63, 246, 238, 130, 63, 195, 161, 171, 62, 133, 220, 82, 63, 224, 57, 89, 63, 140, 232, 236, 62, 231, 126, 134, 61, 32, 116, 45, 191, 238, 97, 184, 62, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 48, 113, 13, 191, 174, 101, 74, 63, 136, 98, 76, 62, 121, 109, 223, 61, 15, 162, 128, 191, 63, 152, 169, 190, 58, 236, 234, 189, 195, 57, 21, 191, 242, 249, 166, 189, 89, 39, 223, 62, 35, 78, 196, 62, 237, 213, 96, 190, 106, 231, 62, 63, 54, 133, 9, 191, 87, 76, 127, 190, 40, 232, 40, 62, 175, 61, 72, 191, 50, 47, 74, 63, 206, 132, 254, 190, 6, 238, 139, 61, 151, 162, 196, 190, 54, 169, 254, 62, 120, 94, 32, 189, 123, 53, 20, 63, 123, 66, 58, 190, 113, 197, 153, 191, 221, 94, 159, 189, 9, 82, 45, 190, 138, 123, 77, 63, 234, 104, 31, 63, 237, 140, 66, 190, 169, 216, 34, 61, 109, 203, 170, 62, 210, 212, 38, 191, 246, 4, 212, 60, 125, 177, 37, 191, 49, 235, 177, 189, 42, 219, 54, 191, 211, 20, 54, 190, 177, 12, 198, 189, 129, 238, 5, 62, 208, 255, 151, 61, 246, 48, 88, 190, 8, 186, 198, 62, 98, 153, 237, 190, 126, 173, 170, 62, 223, 125, 76, 190, 111, 155, 222, 190, 199, 116, 158, 61, 254, 148, 38, 191, 235, 175, 8, 63, 35, 95, 89, 190, 194, 246, 18, 62, 44, 131, 18, 191, 215, 46, 108, 63, 2, 8, 143, 62, 202, 193, 153, 62, 151, 205, 159, 62, 98, 44, 131, 63, 129, 27, 173, 62, 159, 115, 189, 189, 132, 155, 180, 62, 67, 64, 6, 191, 47, 93, 64, 63, 28, 55, 123, 191, 75, 68, 82, 189, 138, 157, 165, 62, 4, 206, 23, 191, 69, 43, 16, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 113, 174, 190, 210, 153, 250, 190, 231, 140, 9, 63, 27, 214, 92, 189, 38, 241, 39, 190, 12, 90, 28, 62, 104, 237, 195, 190, 193, 169, 130, 190, 52, 10, 240, 189, 200, 154, 162, 190, 153, 37, 132, 62, 153, 76, 16, 63, 64, 25, 237, 62, 87, 241, 1, 61, 213, 212, 88, 62, 40, 12, 27, 63, 246, 4, 116, 62, 138, 159, 59, 190, 202, 73, 35, 62, 194, 87, 113, 190, 227, 96, 88, 190, 231, 45, 176, 62, 42, 183, 93, 63, 25, 52, 23, 190, 92, 96, 39, 190, 216, 176, 215, 61, 16, 89, 9, 63, 128, 137, 122, 191, 92, 125, 206, 62, 11, 200, 11, 189, 67, 50, 241, 62, 20, 249, 189, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 105, 237, 188, 88, 160, 43, 191, 158, 13, 6, 62, 195, 105, 112, 190, 108, 201, 40, 190, 31, 20, 176, 62, 60, 198, 24, 62, 19, 162, 104, 190, 204, 15, 160, 61, 239, 63, 78, 190, 106, 46, 149, 190, 177, 143, 89, 188, 61, 44, 21, 62, 18, 144, 63, 190, 175, 77, 130, 189, 68, 155, 173, 61, 136, 37, 237, 61, 156, 142, 175, 190, 185, 194, 175, 190, 244, 45, 244, 189, 88, 53, 127, 62, 182, 226, 6, 62, 78, 208, 93, 61, 156, 104, 73, 190, 91, 144, 80, 190, 36, 164, 157, 62, 54, 89, 164, 60, 196, 191, 222, 189, 198, 194, 23, 62, 42, 37, 13, 61, 184, 225, 19, 190, 164, 182, 192, 60, 156, 246, 141, 188, 244, 218, 185, 58, 191, 184, 7, 62, 188, 103, 88, 61, 231, 98, 76, 61, 156, 86, 118, 60, 231, 163, 130, 189, 125, 196, 21, 190, 192, 165, 218, 189, 187, 15, 230, 189, 166, 144, 28, 62, 46, 223, 219, 189, 83, 212, 1, 190, 94, 97, 189, 60, 89, 230, 73, 190, 67, 35, 154, 189, 126, 248, 30, 190, 169, 252, 11, 61, 32, 165, 74, 190, 202, 228, 24, 188, 69, 176, 254, 61, 40, 109, 210, 61, 138, 179, 109, 62, 65, 137, 227, 61, 210, 104, 114, 61, 136, 6, 22, 190, 16, 140, 68, 190, 12, 158, 137, 60, 149, 23, 27, 190, 166, 150, 22, 190, 76, 243, 229, 189, 177, 71, 60, 190, 49, 177, 138, 61, 141, 242, 18, 191, 39, 24, 26, 62, 1, 192, 239, 190, 195, 69, 4, 61, 239, 174, 121, 190, 205, 206, 146, 190, 248, 166, 128, 60, 231, 25, 111, 60, 242, 81, 159, 191, 229, 200, 166, 60, 11, 28, 48, 60, 86, 44, 177, 61, 66, 41, 36, 61, 110, 64, 247, 189, 31, 95, 41, 59, 22, 76, 214, 61, 166, 54, 182, 188, 210, 79, 76, 191, 89, 203, 141, 60, 238, 163, 19, 62, 82, 54, 8, 62, 5, 125, 211, 61, 81, 232, 116, 61, 159, 8, 14, 61, 91, 152, 76, 62, 12, 19, 15, 62, 7, 109, 238, 61, 210, 135, 153, 190, 40, 34, 183, 61, 54, 91, 132, 62, 102, 154, 51, 61, 114, 27, 150, 190, 75, 212, 194, 61, 212, 7, 88, 62, 22, 174, 35, 61, 124, 92, 110, 61, 104, 53, 53, 190, 245, 238, 38, 190, 241, 219, 147, 62, 227, 188, 15, 62, 195, 51, 141, 61, 129, 92, 183, 190, 110, 42, 206, 61, 82, 94, 160, 190, 16, 182, 134, 61, 132, 133, 152, 62, 46, 252, 12, 62, 234, 137, 40, 189, 4, 0, 89, 189, 73, 123, 83, 62, 147, 242, 3, 188, 34, 253, 122, 190, 2, 102, 49, 189, 3, 182, 155, 189, 165, 178, 235, 188, 208, 112, 128, 189, 17, 129, 157, 190, 142, 178, 13, 190, 220, 4, 59, 190, 11, 194, 220, 61, 5, 231, 137, 62, 190, 187, 137, 60, 26, 77, 145, 62, 118, 21, 1, 63, 44, 21, 79, 191, 253, 72, 206, 188, 143, 44, 235, 190, 244, 17, 98, 190, 229, 138, 255, 62, 165, 209, 128, 62, 178, 245, 141, 190, 159, 253, 166, 188, 96, 41, 156, 190, 29, 170, 121, 188, 37, 81, 214, 60, 245, 104, 103, 62, 155, 125, 105, 190, 141, 6, 76, 190, 22, 172, 135, 62, 99, 251, 195, 61, 25, 157, 199, 189, 126, 212, 190, 190, 115, 190, 29, 189, 173, 254, 155, 61, 22, 45, 88, 188, 100, 8, 35, 189, 168, 198, 147, 61, 39, 25, 133, 190, 44, 240, 172, 62, 211, 54, 109, 62, 251, 213, 60, 190, 104, 20, 70, 61, 206, 234, 206, 189, 207, 242, 80, 190, 124, 32, 185, 60, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 179, 124, 94, 189, 160, 253, 36, 62, 210, 101, 138, 62, 24, 141, 8, 189, 59, 10, 68, 62, 34, 211, 242, 188, 235, 78, 32, 190, 85, 208, 171, 61, 108, 119, 1, 189, 0, 115, 124, 62, 209, 207, 205, 61, 132, 129, 154, 62, 139, 92, 205, 60, 207, 76, 128, 62, 255, 234, 22, 62, 177, 47, 28, 61, 116, 107, 198, 189, 104, 172, 3, 190, 6, 53, 177, 189, 228, 173, 45, 188, 16, 82, 62, 190, 162, 7, 230, 188, 139, 212, 74, 62, 206, 153, 127, 188, 22, 75, 8, 190, 56, 79, 66, 189, 253, 173, 55, 188, 59, 81, 35, 190, 96, 89, 207, 61, 61, 188, 48, 189, 113, 238, 76, 61, 22, 168, 214, 61, 197, 12, 81, 188, 116, 26, 247, 188, 164, 32, 106, 61, 180, 177, 135, 187, 141, 72, 28, 189, 88, 238, 140, 189, 213, 69, 192, 187, 204, 101, 56, 190, 12, 44, 15, 62, 160, 73, 80, 190, 52, 181, 52, 190, 223, 74, 129, 189, 5, 76, 40, 190, 15, 67, 3, 61, 25, 141, 32, 190, 52, 14, 34, 189, 142, 253, 210, 60, 49, 140, 16, 62, 252, 215, 245, 59, 199, 61, 47, 190, 246, 110, 238, 60, 97, 58, 40, 190, 245, 153, 183, 61, 128, 221, 41, 190, 233, 37, 50, 189, 57, 143, 29, 190, 135, 156, 124, 61, 189, 7, 26, 59, 50, 182, 6, 190, 81, 69, 218, 61, 172, 119, 74, 190, 221, 144, 201, 61, 65, 124, 86, 62, 105, 53, 0, 191, 96, 48, 146, 190, 68, 237, 38, 191, 67, 145, 123, 190, 215, 40, 75, 62, 12, 7, 64, 62, 243, 75, 36, 191, 117, 116, 31, 190, 235, 118, 213, 190, 44, 237, 29, 61, 40, 185, 238, 189, 97, 65, 68, 62, 207, 132, 253, 190, 39, 75, 126, 189, 14, 227, 146, 62, 96, 12, 91, 62, 49, 13, 147, 190, 146, 193, 169, 190, 159, 58, 41, 62, 174, 86, 140, 62, 252, 227, 124, 189, 233, 146, 11, 61, 135, 191, 61, 190, 16, 63, 213, 190, 173, 236, 67, 62, 21, 237, 245, 61, 96, 194, 242, 60, 153, 107, 118, 190, 41, 226, 11, 190, 15, 112, 167, 190, 113, 155, 155, 190, 89, 80, 253, 189, 238, 194, 128, 61, 150, 120, 177, 189, 166, 98, 129, 187, 141, 197, 163, 61, 21, 174, 238, 60, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 165, 119, 33, 190, 228, 209, 136, 189, 36, 179, 236, 61, 235, 106, 45, 190, 131, 230, 57, 61, 47, 235, 180, 188, 20, 38, 129, 60, 110, 201, 172, 61, 236, 125, 3, 190, 82, 238, 11, 190, 216, 34, 24, 62, 97, 201, 35, 190, 10, 146, 81, 190, 53, 235, 222, 189, 210, 244, 181, 60, 166, 181, 50, 189, 97, 54, 42, 190, 157, 162, 16, 61, 167, 121, 39, 60, 106, 33, 53, 189, 127, 2, 170, 61, 246, 59, 252, 189, 241, 44, 153, 189, 227, 15, 36, 190, 119, 244, 224, 188, 64, 78, 141, 62, 48, 254, 60, 62, 91, 226, 18, 188, 189, 150, 22, 190, 218, 211, 190, 189, 137, 223, 14, 62, 184, 161, 147, 189, 84, 157, 88, 62, 182, 200, 177, 61, 116, 149, 31, 62, 164, 189, 178, 61, 212, 119, 1, 62, 31, 235, 40, 62, 83, 252, 8, 190, 9, 142, 138, 61, 60, 245, 43, 61, 238, 255, 89, 62, 90, 32, 149, 190, 233, 249, 44, 189, 233, 164, 241, 61, 184, 133, 115, 187, 170, 111, 252, 61, 6, 223, 83, 61, 204, 139, 165, 189, 229, 25, 240, 59, 216, 112, 56, 188, 144, 171, 34, 190, 116, 178, 144, 59, 15, 224, 86, 62, 205, 229, 187, 62, 28, 91, 183, 190, 205, 109, 252, 62, 148, 189, 68, 62, 54, 163, 183, 188, 223, 117, 59, 61, 255, 252, 4, 191, 5, 33, 247, 190, 68, 91, 231, 62, 248, 165, 167, 61, 255, 55, 149, 62, 42, 140, 144, 189, 239, 229, 10, 62, 116, 205, 22, 62, 32, 210, 18, 62, 32, 110, 201, 62, 35, 118, 24, 190, 69, 172, 192, 190, 103, 134, 35, 189, 190, 147, 86, 62, 123, 123, 115, 190, 67, 154, 230, 189, 127, 197, 5, 62, 47, 214, 135, 61, 114, 21, 105, 60, 111, 67, 124, 62, 231, 182, 7, 191, 19, 136, 189, 61, 214, 22, 156, 190, 170, 158, 108, 190, 70, 7, 167, 61, 39, 225, 157, 62, 192, 207, 136, 62, 127, 173, 37, 63, 198, 106, 240, 190, 73, 162, 183, 190, 130, 63, 41, 191, 24, 116, 59, 61, 228, 62, 168, 62, 202, 237, 196, 61, 153, 148, 230, 59, 205, 60, 27, 190, 112, 49, 122, 190, 97, 155, 10, 189, 187, 205, 145, 60, 95, 32, 132, 62, 96, 205, 164, 58, 150, 223, 144, 190, 190, 155, 56, 62, 255, 254, 57, 61, 236, 209, 98, 62, 221, 88, 239, 189, 180, 68, 152, 62, 68, 14, 2, 62, 163, 209, 143, 62, 132, 202, 137, 189, 7, 246, 142, 61, 138, 139, 79, 190, 90, 107, 27, 63, 52, 17, 206, 61, 34, 76, 64, 189, 119, 67, 3, 61, 247, 126, 26, 190, 110, 28, 21, 189, 133, 80, 143, 190, 209, 34, 3, 62, 181, 250, 116, 190, 42, 153, 172, 61, 240, 4, 102, 189, 70, 85, 216, 190, 181, 161, 158, 62, 127, 158, 76, 62, 131, 10, 232, 190, 147, 92, 110, 61, 91, 157, 151, 59, 91, 219, 5, 190, 128, 207, 84, 190, 122, 126, 144, 62, 34, 134, 70, 190, 198, 73, 60, 190, 198, 143, 194, 59, 178, 236, 153, 62, 37, 222, 180, 190, 55, 255, 15, 188, 138, 199, 212, 61, 36, 176, 98, 62, 208, 46, 56, 190, 95, 45, 122, 59, 173, 243, 231, 189, 116, 85, 89, 190, 151, 240, 211, 62, 90, 48, 123, 62, 146, 77, 254, 61, 23, 161, 200, 61, 157, 108, 66, 190, 104, 7, 177, 189, 12, 228, 53, 190, 172, 17, 165, 190, 241, 219, 25, 62, 152, 255, 174, 62, 167, 249, 55, 62, 179, 74, 129, 61, 239, 143, 228, 190, 244, 177, 77, 190, 56, 117, 203, 62, 149, 84, 205, 189, 59, 159, 168, 62, 195, 171, 115, 190, 216, 34, 165, 61, 202, 49, 19, 187, 205, 178, 225, 62, 134, 100, 169, 62, 190, 51, 238, 59, 90, 187, 202, 190, 129, 126, 128, 190, 23, 98, 148, 62, 200, 85, 81, 190, 167, 98, 21, 190, 164, 198, 239, 189, 220, 133, 23, 62, 27, 212, 14, 62, 167, 211, 109, 61, 135, 92, 173, 190, 179, 112, 236, 189, 0, 95, 47, 58, 226, 104, 9, 190, 127, 77, 49, 62, 32, 216, 15, 190, 112, 137, 177, 62, 187, 2, 171, 188, 187, 41, 143, 190, 110, 25, 184, 189, 206, 245, 250, 61, 165, 221, 110, 189, 78, 156, 93, 62, 130, 13, 32, 62, 207, 158, 131, 190, 194, 150, 202, 61, 2, 34, 119, 61, 73, 103, 34, 188, 95, 119, 80, 190, 87, 82, 76, 62, 73, 74, 70, 62, 147, 99, 247, 61, 84, 228, 108, 190, 216, 112, 76, 62, 183, 205, 164, 189, 138, 254, 253, 61, 253, 29, 33, 62, 144, 248, 14, 190, 129, 167, 68, 190, 140, 104, 11, 190, 27, 187, 133, 189, 252, 167, 18, 190, 177, 0, 143, 189, 244, 50, 79, 190, 3, 25, 213, 62, 55, 254, 221, 188, 154, 37, 47, 62, 26, 71, 18, 190, 172, 186, 56, 190, 208, 8, 134, 61, 126, 30, 30, 62, 139, 52, 100, 189, 30, 164, 254, 187, 128, 210, 192, 60, 146, 19, 56, 187, 206, 13, 155, 189, 214, 60, 166, 61, 239, 18, 1, 190, 139, 98, 231, 188, 28, 13, 39, 190, 29, 83, 28, 190, 62, 232, 4, 189, 150, 121, 193, 188, 78, 220, 33, 190, 53, 129, 31, 190, 224, 5, 141, 61, 96, 239, 107, 189, 195, 232, 184, 61, 183, 62, 22, 190, 169, 175, 60, 189, 13, 25, 183, 61, 157, 80, 28, 189, 141, 242, 238, 61, 153, 220, 10, 61, 52, 133, 157, 61, 155, 106, 129, 61, 117, 85, 0, 190, 110, 118, 86, 59, 183, 61, 20, 189, 253, 215, 192, 189, 168, 166, 9, 190, 107, 203, 241, 190, 149, 179, 172, 62, 128, 229, 187, 61, 120, 229, 77, 62, 246, 171, 99, 62, 21, 22, 9, 191, 220, 180, 152, 190, 20, 129, 158, 62, 48, 91, 10, 190, 127, 125, 13, 63, 17, 230, 57, 60, 50, 133, 53, 61, 20, 192, 27, 62, 91, 43, 145, 62, 142, 164, 150, 62, 98, 15, 25, 190, 26, 160, 153, 190, 172, 88, 45, 190, 95, 221, 122, 62, 52, 129, 196, 190, 229, 6, 236, 189, 153, 6, 183, 60, 45, 205, 229, 61, 110, 233, 12, 190, 74, 249, 160, 62, 115, 184, 238, 190, 232, 29, 15, 190, 216, 76, 209, 190, 65, 115, 22, 190, 183, 44, 10, 62, 58, 189, 185, 62, 143, 31, 191, 62, 31, 88, 143, 61, 143, 192, 123, 189, 6, 24, 220, 60, 153, 144, 69, 190, 181, 143, 58, 190, 196, 92, 112, 62, 118, 94, 98, 62, 213, 234, 16, 191, 87, 98, 255, 61, 115, 114, 8, 190, 224, 183, 201, 61, 40, 149, 23, 190, 70, 195, 128, 62, 186, 229, 165, 190, 168, 106, 19, 189, 105, 212, 206, 189, 197, 18, 213, 61, 200, 55, 213, 190, 43, 98, 186, 59, 121, 146, 69, 62, 10, 105, 27, 189, 215, 177, 93, 61, 250, 94, 167, 59, 215, 15, 4, 189, 195, 255, 188, 189, 192, 93, 130, 61, 240, 151, 20, 62, 245, 207, 145, 189, 48, 4, 126, 62, 55, 211, 54, 188, 220, 225, 4, 60, 14, 180, 3, 62, 114, 26, 102, 190, 99, 203, 135, 62, 188, 20, 45, 190, 89, 176, 189, 61, 45, 160, 69, 62, 72, 105, 248, 190, 18, 42, 134, 190, 184, 208, 185, 60, 250, 101, 9, 190, 60, 212, 102, 189, 41, 232, 56, 59, 60, 54, 187, 60, 181, 23, 193, 61, 141, 5, 19, 62, 82, 68, 202, 61, 69, 208, 5, 189, 226, 122, 201, 190, 94, 193, 142, 188, 206, 208, 211, 61, 51, 236, 251, 190, 215, 121, 147, 188, 196, 215, 204, 61, 85, 208, 137, 62, 1, 177, 177, 61, 190, 198, 232, 188, 11, 153, 248, 190, 5, 164, 192, 61, 240, 196, 129, 189, 254, 112, 198, 61, 96, 84, 134, 189, 243, 89, 219, 60, 152, 72, 160, 60, 191, 223, 138, 62, 122, 227, 74, 62, 181, 66, 150, 62, 111, 186, 195, 189, 117, 85, 100, 190, 233, 195, 143, 61, 107, 118, 52, 62, 200, 186, 166, 62, 108, 246, 71, 188, 112, 140, 48, 189, 98, 142, 35, 190, 175, 175, 12, 62, 237, 189, 58, 62, 18, 253, 111, 190, 162, 252, 129, 62, 127, 211, 35, 188, 91, 250, 40, 62, 146, 27, 158, 62, 224, 84, 136, 62, 229, 96, 49, 62, 241, 158, 86, 191, 97, 211, 77, 190, 190, 207, 12, 62, 35, 7, 243, 62, 158, 71, 170, 190, 143, 65, 148, 62, 247, 187, 199, 190, 37, 108, 28, 62, 202, 242, 173, 189, 34, 43, 40, 62, 216, 196, 184, 61, 80, 139, 85, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 84, 225, 150, 190, 36, 62, 109, 62, 140, 219, 1, 189, 157, 31, 216, 59, 184, 239, 126, 62, 110, 96, 167, 190, 59, 14, 30, 190, 231, 27, 175, 62, 0, 19, 129, 61, 218, 128, 178, 61, 249, 248, 142, 61, 144, 179, 226, 58, 113, 193, 123, 189, 222, 70, 128, 62, 55, 160, 245, 61, 77, 66, 247, 61, 4, 19, 201, 190, 137, 117, 41, 189, 53, 202, 170, 189, 89, 229, 71, 190, 72, 164, 191, 189, 58, 253, 176, 189, 114, 4, 91, 62, 24, 8, 7, 62, 38, 138, 48, 62, 241, 117, 220, 190, 63, 111, 183, 189, 58, 117, 18, 190, 37, 239, 2, 60, 85, 124, 19, 61, 249, 170, 160, 62, 5, 100, 57, 188, 79, 242, 233, 189, 41, 55, 199, 189, 89, 220, 33, 189, 203, 82, 44, 62, 90, 107, 139, 189, 78, 0, 85, 189, 96, 61, 145, 188, 243, 3, 136, 61, 166, 2, 70, 61, 229, 43, 200, 60, 150, 161, 25, 190, 180, 219, 157, 188, 190, 114, 80, 188, 240, 59, 143, 61, 12, 246, 220, 189, 89, 253, 69, 61, 52, 232, 119, 189, 226, 145, 104, 189, 138, 41, 104, 189, 116, 139, 27, 190, 149, 0, 35, 61, 137, 26, 165, 189, 183, 142, 232, 189, 179, 202, 65, 188, 189, 227, 200, 189, 252, 6, 40, 60, 119, 216, 44, 190, 55, 61, 138, 188, 147, 33, 136, 189, 162, 242, 127, 61, 230, 245, 45, 62, 233, 38, 139, 189, 7, 235, 163, 190, 33, 237, 28, 190, 118, 93, 206, 62, 66, 83, 46, 190, 135, 1, 38, 189, 134, 253, 30, 190, 11, 43, 62, 190, 180, 221, 147, 62, 71, 121, 190, 189, 228, 112, 136, 189, 177, 146, 234, 188, 36, 97, 16, 62, 255, 53, 191, 188, 184, 179, 193, 62, 14, 209, 200, 60, 35, 174, 66, 62, 188, 84, 213, 61, 13, 78, 19, 61, 177, 136, 1, 190, 209, 66, 98, 190, 140, 116, 63, 190, 26, 62, 150, 61, 55, 90, 253, 61, 23, 121, 193, 61, 132, 95, 87, 189, 134, 35, 171, 189, 233, 106, 231, 59, 152, 217, 192, 60, 149, 198, 191, 59, 2, 192, 170, 61, 102, 149, 185, 62, 98, 200, 14, 61, 114, 17, 50, 62, 93, 17, 25, 61, 24, 183, 239, 189, 65, 252, 98, 190, 250, 223, 248, 61, 77, 254, 166, 189, 16, 232, 103, 190, 79, 179, 140, 189, 114, 40, 152, 189, 161, 205, 46, 183, 159, 85, 42, 60, 51, 208, 39, 190, 32, 187, 177, 189, 103, 143, 222, 188, 168, 41, 170, 187, 3, 242, 247, 189, 252, 187, 209, 61, 37, 7, 158, 61, 79, 116, 237, 61, 45, 217, 120, 190, 143, 47, 217, 61, 152, 236, 206, 61, 146, 60, 57, 61, 101, 111, 29, 190, 195, 191, 148, 189, 134, 83, 101, 187, 101, 204, 28, 190, 95, 213, 129, 190, 65, 64, 62, 190, 221, 231, 152, 189, 220, 160, 132, 61, 46, 96, 246, 189, 210, 178, 100, 62, 157, 109, 148, 190, 217, 110, 184, 61, 160, 214, 47, 190, 173, 235, 88, 190, 96, 70, 202, 62, 22, 0, 107, 62, 144, 110, 99, 190, 156, 253, 252, 189, 14, 142, 138, 190, 208, 40, 165, 61, 33, 199, 7, 190, 139, 110, 95, 62, 160, 131, 223, 190, 2, 144, 108, 190, 133, 214, 54, 189, 91, 240, 166, 62, 197, 207, 226, 189, 199, 177, 175, 189, 218, 213, 5, 188, 191, 120, 77, 62, 229, 111, 232, 188, 101, 206, 101, 62, 255, 151, 22, 61, 221, 104, 140, 190, 251, 11, 123, 62, 212, 229, 115, 62, 226, 197, 83, 61, 119, 159, 253, 61, 169, 82, 166, 190, 206, 128, 156, 60, 98, 238, 63, 190, 226, 130, 47, 189, 48, 54, 41, 190, 196, 184, 190, 189, 39, 208, 70, 189, 31, 205, 3, 62, 96, 31, 242, 189, 50, 23, 157, 188, 123, 38, 21, 62, 29, 222, 233, 61, 171, 170, 32, 62, 3, 250, 248, 189, 34, 91, 70, 61, 37, 183, 29, 62, 138, 5, 152, 61, 200, 195, 176, 61, 173, 163, 48, 190, 204, 29, 34, 190, 239, 190, 14, 190, 28, 187, 0, 61, 14, 142, 203, 189, 191, 75, 108, 61, 55, 252, 16, 62, 222, 40, 42, 190, 195, 148, 197, 57, 208, 11, 246, 188, 61, 5, 156, 61, 20, 105, 139, 189, 169, 248, 229, 61, 176, 97, 203, 58, 102, 0, 172, 189, 170, 131, 32, 190, 225, 129, 183, 61, 95, 42, 86, 63, 171, 22, 92, 191, 29, 244, 99, 191, 59, 149, 96, 191, 211, 125, 50, 62, 28, 82, 135, 190, 33, 43, 152, 190, 229, 218, 77, 190, 83, 46, 6, 190, 250, 109, 230, 190, 207, 64, 254, 60, 32, 249, 193, 62, 16, 223, 241, 188, 20, 41, 31, 187, 47, 138, 69, 189, 138, 142, 149, 62, 224, 53, 155, 188, 5, 1, 75, 62, 160, 11, 108, 190, 192, 149, 212, 62, 78, 101, 78, 62, 34, 94, 161, 62, 71, 103, 25, 62, 69, 95, 143, 190, 221, 152, 224, 189, 254, 57, 207, 62, 15, 43, 44, 61, 125, 208, 158, 61, 203, 74, 62, 191, 172, 75, 252, 190, 228, 239, 58, 62, 42, 220, 243, 187, 132, 27, 1, 191, 227, 63, 138, 62, 2, 135, 179, 189, 38, 112, 12, 61, 180, 124, 142, 190, 90, 161, 12, 190, 149, 210, 68, 190, 231, 21, 128, 61, 233, 208, 35, 62, 173, 89, 43, 62, 82, 224, 51, 190, 136, 51, 155, 62, 224, 129, 182, 189, 207, 187, 54, 191, 150, 99, 37, 62, 143, 139, 71, 62, 222, 43, 209, 190, 90, 212, 229, 190, 121, 57, 51, 62, 239, 140, 135, 190, 124, 175, 63, 190, 233, 51, 27, 62, 227, 76, 198, 62, 216, 105, 220, 61, 8, 108, 110, 190, 244, 242, 26, 191, 121, 124, 188, 61, 22, 133, 19, 190, 185, 15, 159, 62, 131, 182, 104, 61, 78, 16, 14, 191, 191, 90, 12, 62, 139, 212, 125, 190, 223, 129, 100, 61, 108, 41, 71, 62, 215, 242, 161, 60, 193, 116, 139, 62, 157, 167, 142, 190, 213, 206, 147, 190, 229, 9, 22, 62, 20, 37, 154, 61, 154, 96, 248, 61, 141, 123, 168, 190, 208, 56, 114, 189, 233, 155, 146, 190, 254, 118, 154, 61, 13, 238, 12, 62, 134, 139, 126, 187, 104, 174, 175, 189, 87, 166, 153, 190, 68, 166, 7, 62, 177, 18, 132, 189, 191, 71, 81, 190, 104, 91, 112, 190, 228, 26, 176, 62, 117, 117, 181, 61, 119, 190, 4, 190, 13, 96, 5, 188, 128, 200, 200, 189, 30, 81, 56, 190, 196, 164, 16, 61, 205, 9, 247, 61, 188, 50, 56, 189, 236, 12, 41, 62, 91, 158, 20, 190, 54, 61, 255, 189, 193, 8, 44, 62, 157, 20, 0, 190, 207, 133, 227, 60, 4, 136, 176, 189, 225, 128, 234, 60, 137, 105, 145, 189, 103, 130, 249, 61, 29, 202, 47, 190, 35, 217, 176, 61, 98, 177, 4, 190, 230, 87, 9, 60, 132, 30, 16, 62, 174, 130, 164, 189, 128, 147, 5, 190, 139, 161, 49, 190, 128, 234, 2, 189, 214, 60, 45, 190, 237, 116, 236, 61, 100, 49, 43, 190, 2, 58, 227, 61, 212, 136, 33, 190, 162, 184, 158, 60, 64, 236, 118, 189, 69, 160, 28, 190, 201, 40, 217, 188, 1, 86, 42, 190, 62, 186, 31, 62, 129, 201, 189, 189, 87, 225, 107, 189, 250, 48, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 75, 11, 62, 145, 215, 225, 189, 98, 38, 61, 187, 118, 98, 93, 62, 133, 120, 136, 62, 172, 210, 206, 189, 196, 78, 176, 62, 11, 89, 10, 188, 79, 87, 131, 62, 140, 78, 168, 61, 40, 168, 116, 59, 102, 229, 150, 62, 213, 98, 157, 61, 193, 79, 36, 62, 112, 139, 231, 189, 166, 180, 152, 190, 102, 57, 64, 188, 88, 175, 53, 62, 34, 96, 180, 61, 217, 201, 53, 61, 177, 68, 156, 60, 20, 252, 5, 190, 222, 13, 46, 62, 149, 90, 12, 62, 53, 37, 106, 62, 84, 19, 9, 190, 177, 41, 48, 62, 101, 126, 85, 60, 123, 42, 26, 62, 10, 163, 92, 61, 88, 110, 219, 61, 136, 14, 200, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 135, 14, 191, 227, 157, 140, 189, 87, 67, 34, 62, 111, 174, 159, 62, 68, 233, 11, 191, 220, 46, 129, 189, 121, 142, 42, 62, 24, 74, 238, 58, 48, 199, 79, 191, 216, 143, 173, 61, 13, 166, 52, 62, 231, 183, 232, 62, 237, 29, 228, 190, 217, 91, 173, 190, 210, 246, 233, 62, 230, 27, 223, 61, 8, 2, 25, 189, 206, 202, 27, 63, 11, 210, 15, 190, 157, 24, 119, 62, 50, 4, 152, 190, 199, 237, 40, 62, 116, 72, 134, 62, 156, 77, 184, 60, 220, 209, 98, 62, 250, 226, 222, 188, 82, 179, 10, 191, 186, 207, 126, 188, 166, 83, 105, 191, 26, 123, 35, 63, 17, 31, 101, 62, 86, 155, 126, 61, 239, 136, 116, 61, 0, 124, 246, 61, 143, 95, 65, 189, 106, 82, 166, 189, 137, 224, 106, 190, 226, 14, 116, 189, 19, 71, 136, 190, 135, 94, 193, 61, 90, 16, 33, 62, 31, 58, 59, 189, 98, 133, 30, 190, 39, 93, 129, 60, 229, 204, 201, 186, 8, 210, 16, 61, 189, 75, 14, 62, 165, 205, 182, 62, 144, 39, 237, 61, 54, 94, 17, 62, 17, 8, 183, 189, 72, 202, 7, 62, 75, 199, 32, 61, 68, 75, 86, 61, 241, 182, 156, 60, 89, 209, 27, 62, 139, 218, 188, 190, 36, 1, 188, 61, 191, 194, 84, 189, 64, 167, 0, 189, 223, 176, 78, 62, 228, 150, 89, 189, 101, 44, 51, 188, 159, 99, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 98, 163, 188, 25, 89, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 199, 156, 191, 232, 67, 171, 191, 35, 215, 13, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {143, 76, 137, 192, 110, 115, 194, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}