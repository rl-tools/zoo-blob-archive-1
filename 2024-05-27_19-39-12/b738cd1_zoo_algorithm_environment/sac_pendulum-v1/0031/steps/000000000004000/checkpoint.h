// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 251, 160, 190, 186, 25, 78, 191, 84, 128, 200, 62, 196, 206, 42, 191, 252, 153, 214, 190, 187, 194, 26, 63, 139, 227, 240, 62, 60, 201, 91, 190, 178, 181, 184, 62, 68, 149, 117, 190, 1, 21, 232, 62, 184, 184, 219, 62, 16, 111, 54, 62, 135, 221, 92, 191, 210, 203, 147, 190, 241, 96, 28, 63, 21, 18, 70, 63, 205, 62, 181, 62, 45, 233, 9, 63, 237, 99, 71, 63, 55, 218, 4, 63, 230, 73, 157, 189, 205, 148, 81, 191, 135, 52, 189, 62, 212, 113, 178, 60, 232, 42, 129, 61, 210, 63, 132, 59, 147, 36, 4, 191, 170, 245, 207, 62, 106, 134, 89, 62, 8, 109, 65, 60, 241, 193, 79, 191, 163, 240, 142, 190, 177, 213, 42, 190, 97, 164, 35, 191, 172, 143, 184, 188, 97, 42, 238, 62, 30, 6, 210, 62, 211, 115, 134, 190, 241, 182, 24, 63, 137, 13, 216, 190, 29, 153, 131, 190, 188, 151, 175, 61, 173, 115, 125, 191, 81, 179, 74, 63, 84, 6, 216, 190, 222, 192, 113, 62, 245, 37, 202, 190, 148, 164, 248, 62, 238, 230, 71, 190, 148, 234, 19, 63, 8, 157, 122, 190, 82, 35, 149, 191, 184, 195, 7, 189, 3, 8, 136, 190, 245, 61, 109, 62, 170, 184, 19, 63, 181, 184, 185, 189, 41, 19, 176, 189, 184, 0, 168, 62, 229, 205, 32, 191, 149, 41, 137, 62, 200, 2, 36, 191, 177, 156, 103, 190, 226, 227, 3, 191, 127, 242, 122, 190, 64, 122, 32, 190, 63, 8, 69, 62, 187, 97, 33, 62, 91, 120, 230, 189, 160, 13, 25, 63, 217, 242, 1, 191, 185, 156, 144, 62, 186, 224, 79, 189, 4, 213, 218, 190, 236, 243, 59, 62, 153, 83, 43, 191, 190, 236, 2, 63, 3, 103, 40, 190, 27, 48, 180, 62, 139, 10, 25, 191, 203, 111, 38, 63, 153, 193, 216, 61, 72, 101, 198, 62, 238, 14, 32, 62, 237, 97, 121, 63, 224, 10, 149, 62, 57, 97, 100, 61, 37, 243, 14, 63, 213, 36, 12, 191, 85, 88, 9, 63, 172, 230, 115, 191, 45, 218, 190, 189, 5, 116, 153, 62, 146, 203, 69, 191, 205, 114, 14, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 136, 211, 190, 34, 134, 240, 190, 93, 175, 7, 63, 240, 182, 2, 189, 63, 233, 101, 190, 12, 44, 149, 61, 4, 42, 206, 190, 117, 180, 227, 189, 52, 10, 240, 189, 91, 17, 114, 190, 190, 142, 169, 62, 4, 52, 13, 63, 3, 247, 10, 63, 132, 189, 32, 189, 71, 244, 128, 62, 148, 98, 33, 63, 142, 129, 38, 62, 31, 96, 84, 190, 29, 226, 143, 62, 150, 22, 141, 190, 28, 119, 211, 189, 30, 141, 152, 62, 125, 229, 58, 63, 187, 63, 85, 190, 181, 219, 139, 190, 23, 159, 45, 61, 167, 241, 19, 63, 150, 94, 66, 191, 9, 87, 205, 62, 216, 145, 8, 190, 27, 48, 208, 62, 73, 228, 217, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 229, 245, 189, 165, 80, 232, 190, 44, 236, 193, 60, 4, 20, 18, 61, 41, 138, 88, 189, 191, 167, 70, 62, 196, 181, 8, 62, 232, 147, 191, 190, 204, 15, 160, 61, 255, 36, 28, 188, 115, 171, 128, 190, 120, 110, 198, 189, 214, 18, 86, 62, 175, 89, 31, 189, 167, 29, 18, 190, 182, 79, 142, 61, 15, 61, 29, 61, 76, 99, 170, 190, 119, 181, 62, 190, 32, 115, 140, 189, 210, 245, 87, 62, 92, 23, 246, 61, 243, 123, 23, 61, 27, 200, 83, 190, 182, 140, 16, 190, 109, 78, 30, 62, 69, 39, 194, 60, 207, 6, 227, 189, 84, 165, 17, 62, 124, 182, 8, 61, 165, 10, 2, 190, 163, 19, 133, 189, 156, 0, 116, 188, 244, 218, 185, 58, 191, 184, 7, 62, 188, 103, 88, 61, 202, 99, 81, 61, 156, 86, 118, 60, 231, 163, 130, 189, 125, 196, 21, 190, 192, 165, 218, 189, 233, 229, 229, 189, 226, 171, 31, 62, 149, 240, 206, 189, 78, 198, 0, 190, 109, 33, 202, 60, 206, 248, 73, 190, 75, 245, 144, 189, 126, 248, 30, 190, 9, 72, 31, 61, 51, 133, 74, 190, 202, 228, 24, 188, 144, 60, 2, 62, 162, 212, 218, 61, 156, 48, 131, 62, 74, 29, 229, 61, 100, 199, 121, 61, 158, 16, 22, 190, 138, 73, 65, 190, 12, 158, 137, 60, 149, 23, 27, 190, 91, 183, 20, 190, 154, 48, 225, 189, 170, 65, 60, 190, 150, 75, 209, 61, 154, 120, 230, 189, 214, 65, 121, 187, 146, 226, 35, 190, 186, 202, 49, 60, 8, 239, 217, 189, 227, 192, 207, 189, 12, 89, 20, 189, 231, 25, 111, 60, 66, 7, 181, 190, 181, 9, 51, 189, 131, 38, 153, 189, 56, 254, 15, 61, 9, 148, 175, 188, 73, 162, 155, 190, 121, 82, 162, 60, 125, 231, 23, 190, 164, 141, 67, 190, 72, 240, 178, 190, 115, 32, 229, 61, 213, 10, 58, 62, 164, 178, 174, 61, 84, 200, 36, 61, 248, 7, 225, 61, 22, 53, 81, 61, 8, 160, 64, 189, 94, 36, 19, 62, 104, 229, 236, 61, 58, 202, 0, 62, 150, 42, 4, 62, 124, 104, 243, 61, 71, 79, 59, 190, 117, 68, 135, 190, 103, 121, 184, 61, 113, 51, 92, 62, 178, 47, 191, 57, 164, 11, 4, 190, 247, 162, 35, 190, 50, 142, 28, 190, 112, 23, 157, 62, 227, 188, 15, 62, 223, 124, 51, 189, 24, 107, 64, 190, 242, 218, 10, 62, 89, 179, 188, 190, 238, 207, 251, 189, 156, 213, 162, 62, 35, 72, 218, 61, 25, 205, 26, 189, 236, 223, 90, 61, 63, 89, 59, 62, 197, 133, 204, 187, 8, 82, 172, 190, 26, 221, 39, 61, 31, 204, 210, 189, 141, 125, 143, 190, 141, 118, 188, 189, 136, 148, 149, 190, 24, 77, 123, 190, 87, 76, 183, 189, 248, 18, 109, 61, 166, 54, 24, 188, 218, 188, 152, 61, 160, 90, 156, 62, 49, 41, 155, 58, 250, 176, 36, 191, 109, 251, 70, 190, 198, 39, 158, 189, 228, 235, 73, 190, 128, 154, 142, 62, 156, 159, 76, 62, 116, 79, 17, 191, 159, 253, 166, 188, 34, 210, 218, 189, 172, 158, 206, 188, 133, 38, 55, 188, 217, 92, 136, 62, 189, 182, 81, 190, 87, 162, 249, 190, 52, 230, 135, 62, 21, 190, 13, 189, 169, 29, 177, 189, 137, 59, 70, 190, 107, 170, 7, 190, 191, 130, 65, 61, 19, 107, 248, 188, 62, 57, 8, 188, 222, 13, 68, 61, 149, 199, 132, 190, 152, 37, 112, 189, 138, 106, 117, 62, 208, 92, 25, 190, 145, 42, 128, 61, 168, 225, 237, 189, 179, 145, 31, 190, 254, 88, 131, 190, 127, 213, 86, 188, 112, 61, 187, 189, 32, 190, 50, 190, 190, 64, 148, 189, 158, 235, 164, 189, 117, 179, 225, 188, 250, 233, 168, 189, 54, 244, 18, 190, 215, 52, 218, 188, 22, 27, 172, 189, 21, 164, 221, 61, 203, 78, 1, 190, 14, 180, 170, 189, 196, 147, 216, 189, 231, 64, 47, 189, 132, 204, 186, 61, 130, 65, 36, 189, 2, 64, 243, 61, 126, 185, 151, 61, 86, 147, 223, 61, 223, 219, 142, 60, 199, 16, 201, 186, 152, 207, 178, 60, 92, 11, 236, 189, 215, 32, 48, 60, 70, 82, 155, 59, 251, 37, 44, 190, 36, 170, 219, 61, 27, 126, 63, 61, 208, 98, 12, 190, 205, 69, 117, 189, 225, 9, 16, 62, 160, 3, 75, 189, 161, 185, 30, 62, 24, 105, 129, 62, 3, 90, 38, 189, 4, 145, 73, 62, 182, 254, 8, 188, 9, 47, 16, 190, 254, 196, 203, 61, 108, 119, 1, 189, 214, 6, 72, 62, 10, 108, 217, 61, 141, 223, 128, 62, 168, 240, 204, 188, 78, 183, 66, 62, 67, 168, 34, 62, 185, 144, 15, 61, 155, 105, 218, 189, 198, 192, 28, 190, 2, 27, 172, 189, 235, 213, 61, 188, 195, 209, 34, 190, 24, 235, 26, 189, 244, 105, 27, 62, 67, 236, 46, 61, 247, 29, 212, 189, 103, 95, 37, 189, 170, 93, 170, 188, 18, 193, 109, 189, 149, 205, 242, 61, 245, 96, 236, 59, 157, 131, 122, 60, 244, 68, 221, 61, 16, 110, 80, 188, 63, 231, 244, 188, 164, 32, 106, 61, 38, 200, 134, 187, 141, 72, 28, 189, 88, 238, 140, 189, 213, 69, 192, 187, 204, 101, 56, 190, 12, 44, 15, 62, 218, 120, 76, 190, 217, 109, 24, 190, 164, 231, 237, 188, 26, 94, 33, 190, 15, 67, 3, 61, 123, 139, 32, 190, 95, 19, 5, 188, 142, 253, 210, 60, 195, 168, 27, 62, 22, 65, 55, 60, 199, 61, 47, 190, 174, 137, 101, 61, 138, 191, 8, 190, 84, 238, 231, 61, 0, 88, 35, 190, 233, 37, 50, 189, 57, 143, 29, 190, 31, 103, 180, 61, 189, 7, 26, 59, 150, 202, 6, 190, 171, 53, 229, 61, 110, 42, 74, 190, 162, 37, 202, 61, 135, 27, 141, 189, 230, 174, 158, 190, 66, 142, 133, 190, 160, 198, 107, 190, 92, 24, 57, 190, 209, 147, 221, 61, 243, 20, 94, 62, 59, 183, 38, 191, 117, 116, 31, 190, 195, 247, 106, 190, 121, 216, 226, 60, 186, 84, 62, 190, 153, 128, 142, 62, 23, 95, 184, 190, 211, 137, 76, 190, 30, 59, 136, 62, 202, 128, 101, 62, 177, 115, 175, 190, 202, 171, 3, 190, 244, 150, 2, 62, 219, 62, 113, 62, 169, 138, 226, 189, 226, 233, 122, 61, 131, 7, 77, 190, 254, 33, 192, 190, 117, 41, 165, 188, 59, 220, 246, 61, 121, 53, 3, 61, 94, 109, 205, 189, 100, 159, 14, 190, 117, 28, 28, 190, 198, 125, 225, 190, 89, 80, 253, 189, 238, 194, 128, 61, 242, 182, 174, 189, 166, 98, 129, 187, 190, 66, 198, 61, 18, 52, 13, 61, 1, 157, 245, 61, 34, 200, 189, 60, 120, 177, 79, 189, 90, 209, 33, 190, 145, 217, 55, 189, 206, 87, 21, 62, 34, 183, 31, 190, 79, 122, 84, 61, 47, 235, 180, 188, 233, 159, 43, 61, 110, 201, 172, 61, 190, 101, 0, 190, 156, 248, 11, 190, 216, 34, 24, 62, 72, 211, 8, 190, 223, 164, 53, 190, 113, 233, 192, 189, 135, 184, 54, 61, 224, 6, 220, 188, 97, 54, 42, 190, 157, 94, 110, 61, 167, 121, 39, 60, 15, 232, 12, 189, 10, 7, 214, 61, 200, 88, 251, 189, 241, 44, 153, 189, 161, 70, 22, 190, 199, 1, 250, 188, 50, 33, 139, 62, 255, 64, 37, 62, 51, 162, 253, 188, 239, 41, 229, 189, 237, 153, 155, 189, 239, 174, 33, 62, 184, 161, 147, 189, 57, 112, 10, 62, 170, 132, 195, 61, 211, 39, 4, 62, 253, 146, 160, 58, 6, 159, 75, 61, 203, 110, 56, 62, 11, 144, 28, 190, 2, 179, 132, 61, 42, 43, 20, 60, 50, 168, 81, 62, 190, 0, 148, 190, 102, 195, 180, 188, 102, 11, 244, 61, 143, 75, 116, 189, 31, 32, 19, 62, 68, 191, 103, 61, 165, 27, 146, 189, 81, 17, 183, 188, 137, 42, 179, 61, 108, 24, 42, 190, 209, 57, 139, 60, 40, 36, 52, 62, 71, 33, 193, 62, 207, 175, 193, 190, 105, 235, 0, 63, 181, 2, 65, 62, 212, 129, 18, 189, 7, 130, 136, 58, 254, 124, 195, 190, 250, 201, 210, 190, 130, 62, 211, 62, 248, 165, 167, 61, 172, 21, 145, 62, 147, 139, 167, 189, 62, 95, 139, 61, 244, 181, 221, 61, 64, 97, 176, 61, 196, 128, 193, 62, 22, 14, 26, 190, 21, 75, 200, 190, 61, 183, 22, 190, 161, 164, 79, 62, 139, 49, 105, 190, 8, 213, 172, 189, 107, 119, 236, 61, 234, 156, 2, 61, 49, 220, 56, 61, 101, 91, 128, 62, 139, 7, 16, 191, 183, 201, 167, 61, 167, 66, 28, 190, 253, 162, 34, 190, 101, 209, 213, 61, 129, 186, 45, 62, 142, 82, 124, 62, 2, 197, 194, 189, 127, 215, 214, 190, 99, 145, 177, 190, 16, 44, 67, 190, 62, 249, 149, 61, 239, 213, 92, 62, 155, 60, 7, 62, 20, 237, 149, 190, 205, 60, 27, 190, 218, 138, 18, 61, 234, 152, 80, 189, 155, 28, 48, 189, 64, 125, 166, 62, 41, 53, 105, 61, 199, 53, 30, 191, 100, 169, 56, 62, 248, 7, 129, 61, 167, 46, 55, 62, 178, 76, 104, 61, 50, 194, 187, 61, 253, 255, 215, 61, 193, 67, 124, 62, 183, 118, 13, 189, 73, 96, 82, 61, 42, 93, 75, 190, 60, 105, 102, 62, 243, 26, 236, 61, 217, 166, 93, 188, 132, 114, 19, 62, 242, 113, 36, 190, 0, 246, 202, 60, 71, 161, 5, 191, 39, 36, 28, 62, 220, 12, 68, 190, 3, 73, 34, 60, 101, 49, 181, 60, 51, 190, 149, 190, 51, 183, 93, 62, 142, 75, 49, 62, 119, 87, 245, 190, 147, 92, 110, 61, 30, 173, 247, 61, 86, 225, 196, 189, 54, 170, 51, 190, 225, 176, 160, 62, 220, 187, 161, 189, 128, 38, 80, 190, 4, 130, 104, 60, 223, 225, 130, 62, 59, 208, 140, 190, 184, 155, 42, 61, 172, 96, 248, 61, 123, 219, 89, 62, 230, 20, 255, 189, 253, 137, 189, 60, 65, 219, 225, 189, 46, 151, 16, 190, 89, 135, 200, 62, 41, 118, 137, 62, 168, 196, 244, 187, 132, 65, 184, 61, 132, 177, 53, 190, 101, 228, 36, 190, 217, 183, 98, 190, 169, 27, 142, 190, 142, 180, 20, 62, 241, 12, 190, 62, 234, 109, 218, 61, 20, 175, 253, 61, 245, 159, 187, 190, 155, 155, 55, 190, 94, 25, 213, 62, 149, 84, 205, 189, 0, 2, 28, 62, 22, 56, 141, 189, 113, 138, 100, 62, 125, 247, 140, 189, 206, 49, 225, 62, 13, 210, 180, 62, 229, 220, 58, 188, 198, 207, 196, 190, 13, 194, 164, 188, 118, 26, 118, 62, 62, 92, 77, 190, 207, 99, 11, 190, 19, 144, 3, 61, 71, 100, 202, 61, 222, 9, 166, 61, 54, 49, 99, 61, 66, 156, 166, 190, 138, 52, 24, 190, 118, 43, 167, 61, 183, 142, 46, 190, 50, 199, 0, 62, 222, 109, 36, 61, 34, 12, 193, 62, 103, 41, 3, 61, 233, 8, 123, 190, 234, 150, 243, 189, 28, 55, 247, 61, 10, 140, 114, 189, 92, 248, 12, 62, 52, 103, 195, 61, 242, 150, 103, 190, 194, 150, 202, 61, 151, 8, 184, 61, 252, 20, 44, 188, 145, 156, 216, 189, 52, 53, 216, 189, 123, 134, 111, 61, 74, 202, 11, 62, 154, 181, 141, 190, 28, 143, 59, 62, 242, 210, 157, 187, 13, 229, 2, 62, 195, 221, 51, 62, 144, 248, 14, 190, 126, 155, 67, 190, 174, 42, 16, 190, 155, 118, 118, 189, 252, 167, 18, 190, 233, 90, 97, 189, 143, 182, 89, 190, 27, 66, 175, 62, 124, 243, 146, 189, 192, 111, 51, 62, 82, 213, 181, 189, 36, 254, 50, 190, 208, 8, 134, 61, 126, 30, 30, 62, 139, 52, 100, 189, 30, 164, 254, 187, 128, 210, 192, 60, 146, 19, 56, 187, 206, 13, 155, 189, 214, 60, 166, 61, 239, 18, 1, 190, 139, 98, 231, 188, 28, 13, 39, 190, 29, 83, 28, 190, 62, 232, 4, 189, 150, 121, 193, 188, 78, 220, 33, 190, 53, 129, 31, 190, 224, 5, 141, 61, 96, 239, 107, 189, 195, 232, 184, 61, 183, 62, 22, 190, 169, 175, 60, 189, 13, 25, 183, 61, 157, 80, 28, 189, 141, 242, 238, 61, 153, 220, 10, 61, 52, 133, 157, 61, 155, 106, 129, 61, 117, 85, 0, 190, 110, 118, 86, 59, 183, 61, 20, 189, 253, 215, 192, 189, 168, 166, 9, 190, 43, 154, 250, 190, 164, 129, 161, 62, 228, 78, 216, 61, 181, 187, 241, 61, 75, 146, 41, 62, 35, 203, 197, 190, 88, 250, 123, 190, 214, 174, 132, 62, 48, 91, 10, 190, 63, 116, 211, 62, 88, 113, 13, 61, 43, 226, 14, 61, 46, 161, 173, 61, 93, 169, 96, 62, 238, 88, 140, 62, 2, 58, 46, 190, 33, 241, 162, 190, 19, 165, 54, 190, 100, 180, 61, 62, 106, 228, 204, 190, 135, 58, 181, 189, 222, 124, 35, 61, 97, 148, 33, 61, 185, 211, 3, 190, 50, 70, 161, 62, 35, 153, 0, 191, 103, 28, 43, 190, 71, 193, 110, 190, 216, 245, 31, 190, 126, 152, 13, 62, 79, 209, 133, 62, 4, 96, 183, 62, 8, 40, 182, 61, 220, 169, 127, 188, 201, 117, 64, 189, 160, 133, 207, 189, 126, 114, 177, 189, 254, 174, 44, 62, 168, 135, 100, 62, 11, 134, 22, 191, 87, 98, 255, 61, 206, 61, 234, 188, 61, 103, 237, 61, 234, 28, 23, 190, 148, 202, 125, 62, 245, 153, 146, 190, 244, 86, 70, 189, 216, 226, 190, 189, 76, 114, 133, 61, 139, 222, 161, 190, 38, 39, 141, 61, 134, 144, 90, 62, 249, 193, 43, 189, 73, 66, 205, 61, 89, 114, 62, 60, 131, 120, 195, 188, 29, 245, 31, 189, 31, 153, 79, 61, 222, 164, 31, 62, 128, 78, 6, 190, 58, 95, 130, 62, 226, 32, 24, 59, 100, 122, 202, 189, 229, 30, 174, 61, 175, 203, 181, 190, 51, 105, 129, 62, 64, 54, 193, 60, 237, 60, 211, 60, 37, 171, 51, 62, 134, 170, 61, 190, 104, 249, 6, 190, 223, 34, 38, 60, 250, 101, 9, 190, 4, 226, 130, 189, 59, 255, 181, 188, 121, 224, 120, 189, 81, 126, 97, 61, 103, 137, 239, 61, 191, 35, 252, 61, 35, 71, 116, 189, 11, 133, 73, 190, 183, 24, 26, 190, 234, 95, 142, 61, 40, 46, 153, 190, 243, 84, 2, 60, 36, 128, 103, 61, 34, 30, 42, 62, 136, 223, 244, 61, 220, 12, 179, 188, 48, 64, 247, 190, 19, 154, 159, 61, 141, 119, 30, 188, 68, 66, 98, 62, 95, 13, 44, 189, 71, 84, 158, 189, 253, 88, 141, 61, 194, 205, 138, 62, 196, 87, 77, 62, 139, 120, 150, 62, 85, 200, 187, 189, 144, 126, 177, 61, 166, 240, 94, 61, 251, 252, 52, 62, 194, 145, 166, 62, 108, 246, 71, 188, 114, 23, 137, 188, 48, 199, 214, 189, 107, 158, 25, 62, 50, 94, 216, 61, 128, 11, 232, 189, 145, 5, 132, 62, 121, 59, 24, 190, 97, 95, 53, 62, 88, 255, 182, 62, 1, 145, 136, 62, 172, 132, 60, 62, 251, 60, 86, 191, 174, 97, 0, 190, 120, 153, 222, 61, 243, 244, 87, 62, 213, 240, 146, 190, 22, 89, 153, 62, 195, 246, 214, 190, 11, 194, 149, 61, 144, 226, 214, 189, 23, 226, 81, 190, 207, 104, 189, 61, 208, 55, 91, 62, 155, 145, 81, 56, 112, 223, 7, 62, 189, 77, 251, 189, 87, 89, 107, 189, 215, 252, 21, 190, 223, 148, 2, 61, 252, 185, 51, 190, 33, 175, 46, 190, 175, 10, 16, 190, 143, 22, 45, 61, 179, 38, 123, 189, 152, 174, 136, 61, 191, 122, 13, 190, 203, 59, 194, 60, 225, 65, 43, 61, 66, 60, 24, 190, 46, 125, 185, 189, 235, 29, 52, 190, 20, 63, 15, 62, 218, 146, 113, 188, 83, 29, 248, 60, 251, 8, 156, 189, 196, 40, 125, 61, 202, 225, 40, 61, 192, 74, 125, 59, 126, 208, 196, 189, 185, 97, 9, 190, 155, 9, 216, 61, 168, 190, 24, 190, 37, 48, 12, 61, 22, 28, 240, 186, 251, 179, 240, 188, 131, 109, 177, 190, 106, 3, 138, 62, 65, 134, 65, 61, 159, 118, 13, 188, 105, 195, 81, 62, 32, 56, 159, 189, 155, 52, 243, 188, 101, 186, 130, 62, 0, 19, 129, 61, 45, 58, 192, 61, 225, 36, 227, 60, 143, 225, 203, 189, 248, 171, 206, 189, 121, 133, 76, 62, 223, 216, 242, 61, 205, 230, 200, 61, 11, 27, 156, 190, 175, 176, 79, 190, 236, 136, 142, 189, 211, 141, 124, 189, 120, 57, 126, 189, 79, 204, 19, 190, 9, 146, 14, 62, 6, 66, 47, 62, 236, 86, 59, 62, 83, 128, 240, 190, 87, 34, 212, 189, 127, 3, 136, 189, 143, 128, 25, 62, 13, 166, 135, 61, 91, 190, 49, 62, 151, 246, 170, 188, 79, 242, 233, 189, 41, 55, 199, 189, 89, 220, 33, 189, 203, 82, 44, 62, 90, 107, 139, 189, 78, 0, 85, 189, 96, 61, 145, 188, 243, 3, 136, 61, 166, 2, 70, 61, 229, 43, 200, 60, 150, 161, 25, 190, 180, 219, 157, 188, 190, 114, 80, 188, 240, 59, 143, 61, 12, 246, 220, 189, 89, 253, 69, 61, 52, 232, 119, 189, 226, 145, 104, 189, 138, 41, 104, 189, 116, 139, 27, 190, 149, 0, 35, 61, 137, 26, 165, 189, 183, 142, 232, 189, 179, 202, 65, 188, 189, 227, 200, 189, 252, 6, 40, 60, 119, 216, 44, 190, 55, 61, 138, 188, 147, 33, 136, 189, 162, 242, 127, 61, 230, 245, 45, 62, 233, 38, 139, 189, 236, 225, 172, 190, 31, 85, 14, 190, 46, 137, 161, 62, 86, 108, 248, 189, 15, 140, 56, 189, 12, 231, 160, 189, 184, 77, 222, 189, 139, 155, 132, 62, 71, 121, 190, 189, 131, 65, 134, 189, 70, 243, 225, 188, 191, 114, 132, 61, 121, 39, 204, 189, 37, 192, 149, 62, 143, 198, 199, 59, 55, 16, 51, 62, 132, 243, 25, 61, 139, 228, 172, 187, 68, 90, 193, 189, 199, 188, 70, 190, 176, 226, 43, 190, 25, 181, 121, 61, 242, 161, 23, 61, 65, 55, 9, 62, 134, 213, 49, 189, 6, 168, 231, 189, 161, 195, 94, 188, 83, 149, 9, 62, 84, 167, 223, 61, 102, 143, 235, 61, 22, 86, 131, 62, 54, 224, 126, 188, 110, 239, 43, 62, 191, 177, 92, 61, 64, 222, 210, 189, 72, 151, 62, 190, 159, 207, 240, 61, 56, 187, 247, 188, 85, 114, 55, 190, 183, 204, 103, 189, 114, 40, 152, 189, 116, 97, 9, 61, 39, 250, 86, 187, 68, 59, 45, 190, 6, 17, 179, 189, 176, 104, 215, 188, 15, 36, 226, 59, 201, 22, 7, 190, 207, 181, 241, 61, 157, 208, 157, 61, 136, 8, 15, 62, 234, 254, 101, 190, 206, 155, 217, 61, 77, 81, 158, 61, 229, 208, 117, 61, 101, 111, 29, 190, 184, 218, 146, 189, 173, 208, 111, 187, 102, 93, 28, 190, 18, 141, 83, 190, 18, 115, 13, 190, 221, 231, 152, 189, 164, 89, 149, 61, 1, 107, 221, 189, 154, 58, 48, 62, 136, 39, 99, 190, 219, 252, 53, 61, 148, 231, 35, 189, 162, 129, 175, 59, 149, 50, 166, 62, 252, 29, 88, 62, 83, 111, 148, 190, 156, 253, 252, 189, 48, 141, 173, 189, 199, 89, 224, 61, 214, 241, 4, 190, 118, 230, 75, 62, 12, 164, 162, 190, 125, 228, 140, 190, 131, 235, 139, 189, 228, 58, 157, 62, 169, 74, 166, 189, 29, 254, 253, 187, 91, 77, 207, 60, 25, 173, 59, 62, 45, 80, 132, 187, 183, 168, 102, 62, 60, 179, 61, 188, 7, 235, 116, 190, 22, 84, 81, 62, 208, 95, 112, 62, 219, 8, 105, 189, 47, 27, 40, 62, 237, 8, 188, 190, 221, 213, 184, 59, 189, 208, 128, 190, 226, 130, 47, 189, 48, 54, 41, 190, 196, 184, 190, 189, 39, 208, 70, 189, 31, 205, 3, 62, 96, 31, 242, 189, 50, 23, 157, 188, 123, 38, 21, 62, 29, 222, 233, 61, 171, 170, 32, 62, 3, 250, 248, 189, 34, 91, 70, 61, 37, 183, 29, 62, 138, 5, 152, 61, 200, 195, 176, 61, 173, 163, 48, 190, 204, 29, 34, 190, 239, 190, 14, 190, 28, 187, 0, 61, 14, 142, 203, 189, 191, 75, 108, 61, 55, 252, 16, 62, 222, 40, 42, 190, 195, 148, 197, 57, 208, 11, 246, 188, 61, 5, 156, 61, 20, 105, 139, 189, 169, 248, 229, 61, 176, 97, 203, 58, 102, 0, 172, 189, 170, 131, 32, 190, 225, 129, 183, 61, 51, 76, 60, 62, 220, 228, 84, 191, 218, 74, 70, 191, 139, 177, 90, 190, 122, 173, 37, 62, 155, 167, 188, 188, 186, 13, 109, 189, 98, 10, 12, 191, 83, 46, 6, 190, 120, 141, 36, 190, 190, 79, 55, 188, 8, 100, 179, 62, 101, 252, 28, 190, 239, 195, 215, 189, 231, 50, 212, 190, 89, 199, 150, 62, 207, 15, 180, 188, 90, 16, 59, 62, 14, 111, 34, 190, 37, 116, 108, 60, 239, 153, 86, 62, 177, 217, 154, 62, 153, 99, 11, 62, 128, 54, 178, 190, 100, 219, 81, 190, 191, 249, 36, 61, 181, 105, 219, 60, 229, 18, 163, 61, 82, 241, 138, 190, 161, 238, 15, 191, 125, 220, 14, 62, 25, 54, 165, 190, 21, 16, 11, 191, 108, 243, 129, 62, 47, 205, 174, 189, 93, 148, 166, 188, 202, 198, 206, 190, 155, 92, 4, 190, 103, 119, 103, 190, 151, 146, 37, 61, 233, 208, 35, 62, 46, 254, 24, 62, 8, 177, 13, 190, 168, 90, 128, 62, 6, 19, 27, 189, 48, 229, 28, 191, 144, 133, 56, 62, 176, 175, 30, 62, 121, 113, 197, 190, 115, 228, 173, 190, 60, 149, 20, 62, 164, 231, 103, 190, 178, 106, 76, 190, 175, 3, 138, 61, 44, 152, 187, 62, 113, 118, 65, 62, 188, 7, 123, 190, 205, 224, 24, 191, 196, 118, 157, 61, 5, 207, 178, 189, 239, 125, 149, 62, 176, 125, 12, 62, 109, 75, 4, 191, 48, 134, 35, 62, 171, 35, 86, 190, 65, 220, 98, 61, 21, 98, 77, 62, 68, 11, 2, 189, 144, 193, 70, 61, 73, 85, 130, 190, 3, 131, 140, 190, 114, 56, 43, 62, 20, 37, 154, 61, 99, 180, 90, 188, 0, 45, 130, 189, 43, 122, 127, 60, 141, 52, 176, 190, 184, 169, 240, 189, 184, 114, 37, 62, 116, 95, 26, 188, 147, 26, 165, 189, 63, 41, 60, 190, 67, 29, 210, 61, 44, 163, 110, 189, 148, 234, 115, 190, 119, 249, 155, 189, 2, 196, 165, 62, 24, 225, 85, 190, 225, 193, 48, 190, 137, 255, 41, 60, 223, 77, 35, 190, 69, 0, 169, 189, 46, 82, 12, 189, 97, 158, 60, 190, 53, 62, 226, 60, 1, 187, 67, 62, 91, 158, 20, 190, 54, 61, 255, 189, 193, 8, 44, 62, 157, 20, 0, 190, 207, 133, 227, 60, 4, 136, 176, 189, 225, 128, 234, 60, 137, 105, 145, 189, 103, 130, 249, 61, 29, 202, 47, 190, 35, 217, 176, 61, 98, 177, 4, 190, 230, 87, 9, 60, 132, 30, 16, 62, 174, 130, 164, 189, 128, 147, 5, 190, 139, 161, 49, 190, 128, 234, 2, 189, 214, 60, 45, 190, 237, 116, 236, 61, 100, 49, 43, 190, 2, 58, 227, 61, 212, 136, 33, 190, 162, 184, 158, 60, 64, 236, 118, 189, 69, 160, 28, 190, 201, 40, 217, 188, 1, 86, 42, 190, 62, 186, 31, 62, 129, 201, 189, 189, 87, 225, 107, 189, 250, 48, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 253, 8, 62, 83, 134, 210, 189, 2, 173, 180, 189, 234, 40, 71, 62, 7, 205, 150, 62, 172, 210, 206, 189, 160, 237, 139, 62, 215, 72, 167, 60, 245, 174, 146, 62, 27, 216, 203, 61, 11, 3, 161, 189, 84, 243, 99, 62, 35, 119, 228, 61, 140, 200, 63, 62, 181, 112, 7, 190, 127, 253, 157, 190, 102, 57, 64, 188, 64, 132, 183, 61, 232, 73, 182, 61, 209, 241, 88, 189, 132, 63, 229, 187, 20, 252, 5, 190, 160, 117, 148, 61, 149, 90, 12, 62, 39, 250, 249, 61, 56, 203, 1, 190, 53, 5, 46, 62, 101, 126, 85, 60, 119, 42, 1, 62, 52, 18, 250, 60, 39, 42, 206, 61, 136, 14, 200, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 221, 182, 190, 44, 153, 141, 189, 36, 19, 16, 62, 138, 87, 163, 62, 225, 152, 8, 191, 220, 46, 129, 189, 210, 12, 30, 62, 55, 23, 69, 59, 66, 74, 35, 191, 147, 203, 0, 62, 141, 200, 67, 62, 205, 221, 186, 62, 70, 165, 233, 190, 101, 209, 163, 190, 182, 110, 217, 62, 110, 247, 198, 60, 8, 2, 25, 189, 204, 186, 221, 62, 94, 74, 37, 190, 39, 199, 75, 62, 107, 24, 153, 190, 199, 237, 40, 62, 108, 150, 109, 62, 156, 77, 184, 60, 87, 131, 56, 62, 213, 23, 137, 189, 10, 239, 252, 190, 186, 207, 126, 188, 151, 74, 100, 191, 213, 203, 24, 63, 33, 90, 68, 62, 86, 155, 126, 61, 89, 37, 181, 61, 27, 6, 246, 61, 207, 139, 92, 189, 187, 223, 208, 189, 172, 196, 42, 190, 226, 14, 116, 189, 111, 78, 115, 190, 68, 106, 198, 61, 160, 124, 0, 62, 84, 156, 203, 188, 66, 165, 35, 190, 228, 28, 207, 187, 167, 185, 149, 59, 244, 156, 31, 188, 6, 176, 253, 61, 184, 122, 156, 62, 144, 39, 237, 61, 102, 6, 23, 61, 184, 153, 181, 189, 216, 138, 187, 61, 206, 99, 46, 61, 68, 75, 86, 61, 72, 170, 72, 58, 89, 209, 27, 62, 231, 149, 140, 190, 121, 134, 188, 61, 120, 186, 14, 189, 64, 167, 0, 189, 177, 94, 153, 61, 35, 155, 26, 190, 136, 172, 29, 189, 159, 99, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 119, 146, 189, 80, 128, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 236, 63, 64, 219, 32, 255, 190, 65, 72, 1, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 113, 190, 190, 65, 159, 155, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0031/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}