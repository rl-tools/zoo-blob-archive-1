// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 115, 88, 62, 100, 208, 202, 190, 39, 80, 202, 62, 91, 61, 218, 190, 65, 22, 88, 190, 200, 95, 17, 191, 22, 69, 194, 190, 215, 189, 140, 62, 64, 125, 78, 61, 22, 89, 10, 63, 253, 163, 104, 187, 31, 12, 196, 62, 81, 43, 168, 190, 150, 79, 139, 62, 160, 174, 219, 62, 78, 215, 159, 190, 190, 184, 35, 188, 94, 93, 4, 191, 128, 43, 150, 62, 234, 102, 177, 61, 7, 250, 96, 190, 183, 168, 29, 62, 248, 107, 80, 188, 243, 91, 59, 190, 102, 47, 74, 190, 99, 105, 2, 62, 169, 241, 182, 190, 75, 124, 189, 190, 246, 60, 147, 62, 124, 238, 159, 190, 250, 210, 87, 60, 119, 248, 156, 190, 51, 13, 240, 190, 33, 101, 9, 191, 209, 168, 91, 62, 147, 176, 160, 62, 112, 210, 165, 190, 30, 107, 52, 189, 97, 10, 18, 190, 250, 101, 105, 62, 178, 60, 2, 191, 17, 202, 63, 62, 202, 40, 216, 190, 225, 118, 71, 189, 152, 132, 103, 62, 120, 187, 220, 190, 247, 70, 79, 189, 84, 242, 255, 62, 8, 229, 195, 62, 6, 206, 98, 189, 147, 166, 63, 61, 89, 152, 0, 191, 249, 242, 13, 191, 80, 86, 151, 62, 215, 121, 205, 61, 37, 212, 196, 62, 248, 121, 18, 191, 240, 235, 230, 189, 84, 255, 81, 190, 4, 111, 155, 61, 51, 140, 65, 60, 44, 187, 131, 189, 226, 252, 131, 190, 233, 107, 22, 62, 64, 34, 7, 62, 168, 215, 94, 190, 234, 171, 224, 62, 208, 81, 11, 61, 76, 30, 182, 61, 33, 191, 23, 190, 170, 16, 114, 61, 229, 174, 93, 62, 221, 82, 147, 61, 130, 93, 65, 61, 80, 244, 26, 62, 87, 124, 235, 190, 245, 102, 7, 191, 205, 200, 17, 63, 218, 237, 17, 191, 206, 95, 26, 189, 187, 143, 251, 62, 199, 56, 7, 63, 142, 220, 147, 62, 141, 171, 5, 63, 232, 65, 2, 63, 171, 170, 159, 187, 140, 89, 182, 61, 111, 26, 7, 63, 72, 74, 16, 191, 249, 174, 51, 62, 230, 216, 94, 62, 214, 242, 245, 190, 136, 251, 236, 61, 16, 172, 221, 62, 145, 57, 141, 190, 197, 150, 128, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 188, 19, 191, 140, 209, 246, 62, 21, 205, 13, 191, 205, 187, 137, 190, 138, 189, 172, 62, 180, 49, 96, 62, 171, 209, 99, 62, 212, 249, 46, 62, 19, 235, 50, 190, 249, 228, 124, 62, 239, 149, 246, 62, 77, 57, 152, 190, 74, 170, 32, 62, 165, 114, 58, 62, 118, 212, 16, 62, 225, 171, 72, 190, 155, 245, 20, 62, 96, 226, 48, 61, 249, 179, 152, 62, 249, 99, 52, 190, 127, 216, 189, 190, 49, 146, 95, 190, 137, 80, 15, 63, 16, 43, 194, 62, 205, 246, 52, 61, 219, 164, 6, 191, 138, 144, 103, 190, 4, 86, 9, 63, 47, 19, 6, 61, 163, 194, 250, 188, 97, 190, 97, 61, 17, 77, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 152, 13, 62, 197, 25, 243, 61, 46, 124, 175, 189, 30, 110, 210, 189, 32, 228, 24, 190, 83, 66, 219, 61, 111, 255, 0, 62, 232, 100, 50, 62, 168, 158, 5, 190, 180, 58, 170, 188, 252, 11, 127, 61, 215, 119, 5, 60, 50, 17, 182, 61, 230, 204, 208, 60, 224, 178, 254, 189, 234, 129, 60, 60, 120, 241, 157, 188, 223, 128, 42, 62, 140, 166, 229, 61, 186, 118, 31, 190, 69, 46, 129, 61, 183, 110, 50, 62, 30, 173, 20, 62, 164, 48, 39, 60, 102, 248, 6, 61, 130, 238, 30, 62, 113, 27, 45, 61, 175, 217, 138, 60, 252, 205, 191, 189, 17, 124, 8, 189, 97, 175, 161, 187, 28, 36, 31, 62, 155, 26, 17, 62, 56, 78, 138, 61, 147, 62, 213, 61, 94, 75, 183, 189, 175, 254, 31, 62, 42, 139, 44, 62, 97, 162, 43, 60, 254, 40, 130, 187, 66, 239, 122, 61, 9, 227, 215, 61, 70, 51, 234, 60, 243, 188, 112, 60, 185, 81, 49, 62, 61, 222, 195, 189, 206, 6, 22, 190, 131, 245, 204, 61, 156, 14, 27, 62, 44, 2, 180, 61, 92, 147, 207, 61, 97, 21, 110, 61, 100, 223, 89, 61, 115, 144, 21, 190, 206, 217, 183, 189, 187, 66, 43, 190, 132, 171, 42, 190, 143, 91, 145, 188, 5, 191, 51, 190, 11, 87, 15, 190, 249, 151, 220, 189, 204, 73, 241, 189, 183, 52, 225, 61, 127, 209, 13, 62, 13, 85, 32, 62, 104, 67, 72, 61, 77, 229, 156, 61, 63, 233, 143, 189, 18, 226, 19, 190, 187, 254, 150, 189, 150, 74, 106, 61, 77, 217, 74, 61, 139, 234, 161, 61, 245, 246, 242, 61, 163, 129, 16, 190, 144, 171, 35, 190, 148, 198, 10, 189, 239, 107, 15, 62, 154, 98, 6, 61, 215, 211, 254, 189, 244, 242, 125, 60, 213, 140, 129, 189, 166, 61, 194, 188, 139, 152, 104, 189, 101, 68, 39, 190, 0, 55, 231, 188, 180, 232, 204, 61, 221, 21, 194, 61, 231, 89, 72, 60, 141, 165, 223, 61, 101, 143, 144, 61, 236, 65, 43, 62, 166, 162, 235, 61, 92, 68, 44, 62, 214, 222, 137, 61, 129, 52, 141, 61, 192, 133, 253, 60, 193, 7, 112, 61, 165, 216, 184, 189, 224, 62, 24, 62, 203, 25, 195, 189, 89, 229, 15, 62, 71, 231, 30, 61, 74, 95, 146, 61, 197, 98, 40, 190, 104, 108, 131, 187, 199, 141, 246, 61, 41, 169, 1, 189, 150, 221, 131, 61, 221, 229, 135, 189, 26, 29, 20, 190, 182, 167, 249, 60, 128, 137, 199, 189, 246, 248, 24, 62, 150, 16, 44, 62, 56, 37, 144, 189, 74, 138, 94, 61, 55, 93, 175, 189, 194, 252, 46, 190, 221, 27, 44, 190, 213, 206, 94, 61, 116, 243, 66, 189, 111, 51, 30, 62, 63, 28, 142, 61, 233, 64, 13, 190, 70, 215, 32, 190, 132, 22, 179, 61, 223, 104, 232, 188, 143, 116, 214, 189, 209, 104, 85, 61, 17, 8, 153, 189, 52, 52, 28, 189, 92, 97, 57, 61, 226, 159, 48, 62, 102, 135, 45, 62, 218, 192, 166, 189, 152, 32, 12, 62, 237, 98, 104, 61, 93, 22, 53, 60, 113, 146, 22, 62, 148, 49, 92, 60, 38, 184, 44, 189, 37, 255, 35, 62, 184, 164, 182, 61, 104, 70, 34, 62, 127, 33, 238, 61, 146, 242, 16, 62, 59, 150, 199, 188, 146, 156, 132, 189, 220, 182, 58, 189, 133, 68, 49, 60, 85, 126, 241, 61, 221, 194, 35, 62, 67, 61, 232, 61, 187, 219, 254, 189, 201, 179, 237, 61, 125, 224, 35, 62, 233, 157, 221, 189, 129, 235, 241, 188, 96, 241, 106, 61, 53, 53, 108, 60, 112, 107, 250, 61, 70, 17, 1, 190, 82, 3, 197, 61, 57, 167, 136, 187, 6, 114, 178, 189, 66, 8, 241, 186, 78, 54, 23, 190, 161, 138, 178, 61, 201, 232, 170, 61, 109, 175, 232, 60, 38, 17, 181, 61, 160, 56, 80, 189, 41, 38, 26, 62, 48, 26, 10, 61, 184, 85, 153, 189, 5, 91, 86, 189, 198, 150, 167, 61, 104, 135, 92, 59, 31, 85, 82, 188, 24, 6, 195, 189, 252, 3, 133, 61, 196, 28, 51, 190, 245, 225, 29, 60, 164, 9, 1, 61, 178, 196, 21, 190, 37, 139, 196, 61, 56, 93, 4, 61, 62, 244, 138, 61, 175, 32, 252, 61, 32, 122, 209, 61, 239, 192, 216, 61, 171, 54, 61, 188, 62, 233, 18, 59, 147, 241, 29, 190, 87, 194, 182, 189, 9, 145, 65, 189, 138, 100, 51, 190, 138, 224, 141, 59, 99, 74, 125, 189, 54, 18, 2, 62, 122, 218, 231, 61, 220, 120, 223, 189, 237, 51, 85, 189, 67, 66, 13, 190, 171, 110, 224, 61, 175, 90, 29, 62, 14, 251, 30, 189, 93, 81, 15, 189, 144, 158, 230, 189, 201, 229, 135, 188, 199, 164, 16, 62, 183, 13, 126, 189, 165, 175, 51, 190, 215, 249, 13, 62, 24, 232, 230, 187, 37, 0, 208, 59, 5, 16, 180, 189, 33, 200, 37, 62, 126, 200, 48, 61, 200, 60, 209, 189, 78, 65, 190, 61, 63, 194, 55, 61, 38, 122, 240, 189, 215, 177, 203, 189, 163, 182, 235, 188, 33, 203, 128, 61, 4, 201, 51, 190, 36, 188, 150, 189, 216, 159, 144, 61, 91, 189, 73, 188, 214, 109, 244, 189, 41, 231, 19, 62, 94, 40, 62, 61, 163, 7, 195, 188, 63, 4, 189, 61, 92, 39, 9, 62, 60, 97, 43, 61, 50, 183, 179, 57, 236, 79, 213, 61, 88, 20, 231, 61, 143, 124, 198, 189, 139, 44, 139, 189, 25, 175, 35, 190, 194, 96, 190, 61, 248, 25, 243, 187, 140, 73, 236, 61, 195, 220, 13, 190, 114, 41, 212, 61, 159, 229, 9, 190, 228, 86, 9, 62, 248, 241, 189, 189, 236, 239, 191, 60, 97, 75, 150, 189, 98, 108, 25, 62, 6, 91, 19, 62, 89, 119, 233, 189, 64, 104, 54, 189, 252, 136, 201, 59, 134, 154, 6, 62, 157, 151, 193, 189, 99, 85, 21, 62, 11, 104, 37, 190, 93, 87, 218, 61, 110, 243, 150, 60, 174, 178, 134, 188, 16, 174, 2, 62, 51, 37, 23, 190, 67, 11, 252, 61, 135, 154, 250, 61, 54, 157, 250, 188, 186, 94, 209, 189, 79, 194, 133, 61, 133, 134, 172, 189, 224, 26, 19, 62, 16, 163, 251, 60, 212, 169, 162, 61, 165, 75, 232, 189, 29, 118, 138, 60, 57, 249, 44, 62, 90, 217, 142, 187, 58, 225, 169, 189, 48, 200, 132, 189, 52, 195, 240, 188, 170, 235, 47, 189, 246, 155, 217, 61, 68, 216, 172, 60, 136, 80, 30, 58, 2, 181, 50, 190, 62, 55, 99, 189, 162, 82, 0, 188, 149, 89, 233, 189, 199, 187, 26, 190, 89, 112, 164, 189, 87, 75, 30, 61, 85, 52, 64, 61, 91, 161, 226, 189, 205, 55, 36, 190, 254, 98, 43, 62, 130, 30, 233, 61, 74, 212, 206, 60, 80, 60, 152, 61, 209, 236, 4, 190, 162, 47, 138, 61, 174, 78, 45, 190, 52, 107, 47, 190, 116, 188, 51, 62, 194, 46, 202, 188, 72, 39, 178, 189, 107, 74, 165, 189, 171, 245, 243, 61, 148, 120, 220, 189, 221, 68, 48, 190, 243, 75, 23, 60, 51, 21, 230, 187, 6, 21, 154, 61, 137, 207, 50, 62, 143, 12, 64, 188, 71, 249, 159, 189, 143, 72, 179, 189, 75, 21, 10, 62, 59, 33, 192, 61, 81, 193, 1, 190, 96, 71, 252, 61, 43, 200, 146, 189, 16, 254, 126, 188, 54, 225, 91, 61, 141, 204, 43, 189, 93, 49, 66, 61, 216, 227, 170, 189, 68, 35, 5, 62, 99, 151, 229, 189, 138, 189, 133, 189, 214, 200, 238, 189, 13, 177, 26, 62, 215, 59, 204, 61, 129, 49, 19, 190, 46, 113, 137, 189, 197, 192, 182, 189, 209, 40, 73, 59, 145, 181, 249, 188, 68, 2, 93, 188, 69, 88, 178, 189, 201, 202, 238, 61, 7, 26, 181, 189, 112, 90, 245, 61, 226, 38, 128, 60, 113, 92, 251, 189, 1, 114, 51, 190, 94, 134, 27, 190, 253, 220, 75, 60, 7, 145, 52, 62, 246, 217, 226, 61, 209, 166, 21, 190, 107, 199, 224, 189, 125, 101, 46, 190, 25, 205, 126, 188, 1, 98, 212, 189, 152, 22, 183, 61, 227, 16, 164, 189, 113, 23, 170, 189, 221, 78, 15, 189, 151, 216, 148, 189, 231, 45, 123, 60, 99, 42, 156, 189, 122, 99, 83, 61, 190, 129, 242, 61, 240, 38, 27, 188, 242, 144, 112, 189, 99, 123, 79, 60, 80, 244, 14, 186, 76, 71, 221, 60, 56, 62, 165, 60, 194, 87, 32, 189, 76, 62, 6, 61, 207, 191, 98, 58, 206, 187, 44, 61, 141, 61, 208, 189, 237, 94, 18, 62, 156, 140, 159, 58, 238, 119, 66, 189, 205, 185, 85, 60, 175, 184, 37, 61, 130, 237, 238, 61, 39, 58, 73, 189, 57, 253, 17, 190, 150, 101, 207, 189, 235, 197, 161, 187, 120, 172, 225, 61, 197, 178, 180, 61, 153, 57, 216, 61, 126, 35, 201, 188, 177, 230, 135, 189, 85, 73, 47, 190, 213, 195, 2, 190, 147, 239, 41, 62, 163, 184, 58, 188, 103, 240, 171, 61, 102, 186, 204, 187, 136, 137, 194, 186, 181, 43, 33, 62, 244, 188, 185, 60, 177, 133, 130, 189, 113, 145, 5, 62, 21, 120, 244, 189, 188, 134, 45, 62, 121, 160, 253, 189, 181, 173, 252, 188, 213, 220, 194, 189, 106, 250, 217, 188, 81, 88, 8, 61, 153, 135, 14, 62, 117, 206, 226, 189, 183, 103, 37, 62, 50, 239, 2, 190, 137, 152, 14, 190, 107, 234, 182, 189, 50, 58, 168, 61, 84, 102, 123, 189, 19, 68, 220, 61, 83, 239, 197, 189, 43, 241, 11, 190, 246, 251, 30, 62, 32, 186, 31, 190, 187, 217, 123, 188, 26, 68, 194, 61, 254, 87, 164, 61, 58, 66, 230, 189, 225, 84, 235, 61, 2, 111, 25, 62, 132, 17, 42, 189, 14, 147, 158, 61, 194, 223, 167, 189, 124, 43, 7, 62, 108, 229, 234, 59, 50, 161, 166, 189, 230, 134, 186, 61, 246, 73, 20, 190, 222, 241, 140, 188, 69, 41, 33, 61, 175, 192, 18, 62, 167, 181, 194, 189, 146, 206, 44, 62, 213, 66, 183, 61, 73, 110, 156, 189, 156, 32, 121, 187, 119, 174, 211, 61, 126, 114, 41, 62, 111, 94, 166, 61, 222, 28, 225, 189, 229, 57, 166, 189, 236, 85, 8, 190, 97, 154, 72, 189, 114, 29, 103, 189, 188, 186, 199, 189, 126, 49, 113, 188, 166, 30, 137, 61, 237, 222, 166, 189, 230, 89, 246, 189, 24, 3, 150, 189, 71, 122, 0, 188, 170, 111, 165, 61, 22, 139, 106, 60, 12, 40, 47, 190, 250, 187, 235, 189, 200, 234, 164, 61, 192, 31, 62, 187, 28, 73, 4, 61, 153, 103, 203, 61, 87, 47, 253, 61, 96, 122, 118, 189, 184, 128, 25, 62, 94, 126, 8, 61, 55, 243, 42, 61, 107, 194, 150, 59, 187, 122, 209, 189, 77, 45, 0, 190, 228, 4, 12, 190, 225, 222, 70, 189, 235, 215, 154, 188, 183, 211, 111, 61, 170, 180, 11, 62, 183, 216, 20, 190, 88, 185, 186, 60, 186, 49, 38, 190, 84, 204, 196, 189, 158, 16, 40, 186, 150, 196, 44, 190, 217, 68, 32, 190, 161, 158, 144, 189, 225, 29, 82, 61, 150, 107, 26, 190, 248, 250, 227, 61, 144, 196, 151, 189, 181, 224, 162, 61, 56, 219, 249, 189, 17, 173, 28, 62, 79, 57, 19, 62, 29, 156, 14, 190, 201, 32, 19, 190, 230, 86, 101, 189, 157, 243, 239, 61, 36, 9, 244, 189, 10, 13, 39, 190, 66, 254, 114, 188, 184, 28, 63, 188, 189, 14, 52, 62, 48, 236, 86, 189, 0, 92, 253, 189, 188, 122, 47, 61, 250, 219, 23, 190, 34, 10, 147, 61, 219, 104, 56, 61, 68, 106, 160, 61, 188, 80, 50, 62, 120, 237, 25, 188, 102, 255, 11, 62, 107, 10, 76, 61, 221, 196, 164, 60, 0, 104, 72, 61, 215, 58, 52, 189, 26, 90, 208, 61, 177, 134, 133, 61, 154, 238, 0, 62, 43, 66, 31, 62, 147, 234, 210, 61, 92, 154, 212, 189, 105, 99, 79, 61, 21, 151, 4, 189, 142, 199, 133, 61, 251, 249, 171, 61, 238, 253, 86, 189, 170, 141, 95, 189, 213, 8, 47, 62, 224, 129, 242, 189, 0, 219, 169, 59, 53, 234, 21, 62, 252, 153, 41, 190, 65, 4, 34, 190, 129, 2, 241, 189, 211, 203, 162, 189, 246, 197, 172, 61, 204, 108, 250, 61, 196, 103, 168, 189, 115, 220, 175, 61, 11, 188, 228, 59, 129, 101, 116, 189, 227, 76, 23, 190, 105, 183, 90, 61, 208, 143, 9, 62, 229, 179, 172, 60, 219, 111, 128, 61, 143, 43, 165, 61, 152, 14, 68, 189, 21, 148, 16, 190, 212, 2, 147, 61, 193, 154, 3, 62, 54, 117, 51, 190, 235, 255, 128, 187, 77, 107, 79, 189, 65, 141, 192, 189, 209, 245, 29, 190, 232, 181, 252, 187, 190, 226, 11, 62, 99, 133, 158, 188, 46, 143, 42, 61, 125, 12, 45, 62, 189, 97, 46, 62, 217, 198, 3, 62, 55, 163, 52, 190, 20, 142, 161, 61, 67, 69, 141, 188, 42, 209, 159, 61, 97, 204, 12, 190, 16, 155, 226, 189, 221, 54, 41, 61, 51, 5, 56, 61, 32, 162, 214, 189, 7, 252, 183, 59, 177, 205, 0, 189, 219, 216, 62, 61, 104, 99, 191, 188, 19, 35, 14, 62, 185, 167, 37, 62, 209, 52, 178, 61, 166, 192, 36, 62, 15, 74, 248, 61, 126, 184, 140, 61, 85, 14, 0, 62, 107, 187, 165, 189, 147, 46, 4, 61, 168, 113, 225, 60, 79, 14, 166, 61, 48, 135, 25, 62, 103, 96, 193, 61, 23, 108, 23, 190, 245, 120, 50, 62, 171, 188, 193, 61, 30, 231, 151, 188, 201, 162, 44, 190, 161, 238, 226, 189, 109, 154, 38, 190, 105, 132, 186, 189, 255, 51, 4, 190, 181, 186, 212, 189, 43, 249, 151, 61, 239, 144, 36, 190, 193, 118, 224, 61, 19, 197, 223, 189, 177, 68, 166, 188, 200, 154, 105, 61, 154, 6, 117, 61, 196, 120, 201, 189, 102, 250, 46, 190, 179, 110, 136, 188, 157, 127, 214, 61, 128, 93, 81, 189, 59, 136, 86, 61, 218, 237, 131, 189, 195, 134, 207, 189, 72, 195, 251, 187, 154, 226, 172, 189, 23, 3, 165, 60, 66, 60, 35, 190, 209, 230, 254, 60, 137, 116, 117, 61, 221, 100, 213, 189, 115, 9, 158, 189, 163, 168, 210, 189, 214, 157, 196, 61, 63, 48, 154, 189, 218, 125, 89, 60, 160, 151, 113, 60, 119, 1, 56, 188, 29, 86, 40, 61, 146, 102, 232, 189, 213, 86, 14, 190, 65, 104, 99, 61, 198, 122, 176, 61, 49, 8, 8, 62, 238, 249, 190, 189, 181, 217, 64, 61, 233, 56, 133, 61, 204, 223, 219, 61, 35, 93, 4, 190, 184, 245, 177, 61, 196, 135, 192, 189, 195, 139, 177, 60, 58, 103, 204, 61, 53, 191, 42, 190, 198, 82, 9, 62, 141, 249, 68, 187, 138, 176, 48, 61, 189, 157, 7, 190, 160, 97, 189, 61, 150, 65, 95, 189, 177, 142, 196, 188, 93, 169, 15, 62, 221, 194, 168, 61, 123, 103, 158, 61, 128, 240, 132, 189, 48, 8, 189, 61, 53, 12, 191, 189, 67, 90, 44, 62, 242, 136, 106, 61, 233, 203, 66, 188, 101, 124, 139, 189, 161, 172, 222, 61, 250, 11, 6, 190, 90, 193, 40, 61, 198, 106, 38, 190, 228, 185, 10, 62, 222, 88, 30, 190, 90, 13, 184, 59, 96, 69, 76, 59, 52, 158, 118, 61, 171, 208, 144, 61, 169, 179, 13, 62, 35, 72, 183, 61, 34, 27, 192, 61, 238, 107, 1, 61, 0, 197, 115, 60, 188, 231, 206, 61, 47, 217, 15, 190, 181, 99, 10, 61, 163, 124, 47, 61, 214, 219, 241, 189, 213, 124, 201, 60, 34, 123, 154, 61, 165, 112, 179, 189, 144, 52, 4, 189, 64, 178, 252, 189, 92, 130, 48, 190, 61, 141, 54, 189, 139, 133, 246, 61, 6, 72, 110, 61, 217, 218, 33, 62, 100, 234, 125, 189, 75, 187, 24, 61, 155, 98, 26, 190, 219, 29, 164, 188, 154, 115, 255, 189, 134, 8, 32, 190, 21, 107, 188, 189, 248, 232, 31, 190, 33, 35, 39, 62, 162, 75, 140, 60, 45, 156, 46, 61, 177, 139, 49, 62, 64, 174, 174, 61, 158, 182, 9, 190, 251, 224, 11, 189, 65, 45, 19, 190, 123, 222, 23, 190, 40, 187, 181, 189, 138, 251, 195, 189, 152, 186, 205, 188, 44, 35, 126, 61, 34, 156, 41, 62, 105, 167, 107, 189, 139, 235, 133, 60, 23, 184, 53, 61, 218, 44, 157, 186, 115, 29, 216, 186, 46, 238, 9, 190, 41, 204, 121, 189, 202, 108, 18, 189, 231, 94, 9, 190, 101, 207, 137, 189, 19, 88, 148, 61, 159, 233, 219, 61, 229, 225, 43, 190, 165, 206, 241, 189, 84, 63, 192, 61, 28, 101, 6, 62, 124, 211, 132, 60, 28, 151, 202, 61, 171, 190, 33, 62, 29, 148, 206, 189, 88, 124, 243, 187, 42, 63, 167, 189, 147, 187, 191, 188, 158, 129, 14, 62, 215, 35, 16, 190, 253, 84, 32, 190, 56, 244, 55, 189, 136, 183, 191, 60, 93, 168, 47, 190, 15, 254, 18, 62, 124, 227, 73, 189, 82, 78, 230, 188, 38, 86, 32, 190, 77, 57, 244, 189, 185, 12, 121, 61, 123, 220, 24, 62, 144, 153, 225, 61, 114, 253, 39, 190, 245, 105, 3, 62, 29, 190, 248, 189, 4, 20, 205, 61, 100, 1, 141, 61, 204, 3, 87, 188, 161, 160, 81, 61, 64, 253, 22, 189, 24, 225, 254, 189, 15, 152, 100, 189, 120, 165, 197, 187, 156, 6, 195, 61, 233, 135, 235, 61, 25, 81, 147, 60, 95, 79, 68, 189, 247, 81, 243, 189, 118, 61, 85, 61, 233, 67, 128, 189, 50, 50, 176, 189, 127, 223, 148, 61, 234, 54, 23, 190, 154, 126, 68, 61, 32, 188, 44, 62, 16, 119, 4, 189, 23, 168, 3, 190, 21, 174, 223, 60, 228, 148, 32, 187, 9, 181, 45, 190, 204, 13, 133, 188, 176, 17, 15, 189, 68, 120, 28, 190, 230, 33, 116, 61, 130, 174, 255, 61, 38, 93, 157, 189, 113, 2, 240, 61, 229, 138, 42, 59, 49, 114, 213, 189, 129, 106, 26, 190, 125, 35, 49, 190, 221, 190, 249, 189, 39, 63, 173, 58, 56, 166, 113, 189, 197, 148, 40, 62, 222, 135, 229, 60, 63, 210, 71, 189, 104, 146, 250, 188, 222, 1, 128, 188, 129, 166, 134, 61, 5, 230, 35, 62, 190, 137, 219, 189, 155, 57, 116, 61, 111, 8, 27, 62, 154, 69, 58, 61, 250, 141, 111, 189, 181, 52, 162, 189, 195, 251, 171, 188, 163, 75, 143, 186, 244, 189, 43, 60, 27, 31, 218, 61, 40, 229, 141, 188, 120, 44, 18, 190, 233, 120, 83, 61, 75, 197, 221, 61, 243, 88, 250, 189, 113, 58, 62, 60, 207, 185, 178, 188, 193, 73, 58, 189, 82, 22, 6, 188, 48, 110, 137, 188, 247, 76, 51, 190, 220, 172, 207, 61, 4, 134, 44, 62, 209, 51, 11, 61, 246, 189, 32, 190, 239, 170, 107, 189, 41, 142, 36, 189, 188, 159, 178, 61, 95, 232, 87, 61, 44, 95, 157, 189, 126, 160, 86, 61, 212, 2, 236, 188, 203, 70, 35, 62, 22, 228, 128, 189, 9, 198, 168, 61, 208, 144, 50, 190, 5, 90, 19, 62, 224, 166, 39, 190, 109, 176, 176, 60, 143, 192, 224, 61, 183, 185, 74, 189, 176, 201, 150, 61, 58, 165, 39, 60, 97, 87, 22, 62, 190, 185, 237, 61, 34, 151, 34, 187, 75, 246, 181, 60, 145, 89, 5, 189, 36, 254, 4, 62, 145, 132, 142, 188, 129, 238, 196, 187, 33, 173, 221, 61, 194, 210, 39, 62, 55, 175, 22, 189, 135, 125, 134, 61, 134, 113, 190, 189, 144, 156, 52, 190, 50, 157, 27, 62, 79, 47, 24, 61, 25, 114, 23, 190, 22, 25, 18, 62, 227, 116, 245, 61, 5, 34, 32, 62, 10, 203, 40, 189, 185, 171, 230, 59, 161, 81, 2, 190, 225, 132, 129, 61, 150, 227, 249, 61, 112, 233, 235, 61, 12, 72, 26, 189, 237, 53, 31, 62, 133, 248, 203, 60, 183, 138, 8, 190, 146, 89, 208, 61, 48, 156, 69, 61, 97, 138, 25, 62, 187, 228, 94, 189, 228, 137, 77, 61, 168, 216, 31, 62, 255, 244, 23, 190, 247, 200, 241, 189, 182, 213, 158, 189, 153, 112, 136, 61, 136, 21, 137, 187, 111, 241, 57, 61, 181, 66, 224, 59, 209, 122, 246, 61, 140, 139, 138, 61, 59, 126, 82, 189, 76, 76, 169, 60, 8, 34, 24, 62, 148, 89, 21, 190, 96, 245, 219, 189, 162, 45, 20, 62, 62, 222, 0, 189, 99, 33, 10, 62, 37, 252, 37, 62, 102, 8, 33, 190, 21, 47, 245, 61, 47, 239, 35, 61, 94, 153, 20, 190, 79, 58, 34, 190, 116, 181, 67, 189, 102, 188, 1, 190, 37, 77, 174, 61, 91, 221, 133, 189, 220, 65, 155, 189, 161, 12, 166, 61, 53, 62, 197, 61, 167, 91, 237, 61, 37, 50, 39, 62, 71, 6, 166, 189, 135, 37, 220, 61, 22, 83, 124, 188, 93, 142, 27, 189, 102, 31, 0, 190, 80, 38, 66, 61, 179, 197, 190, 61, 35, 140, 62, 61, 160, 255, 36, 62, 127, 79, 171, 189, 209, 63, 14, 190, 223, 66, 239, 61, 226, 22, 101, 61, 177, 155, 168, 189, 236, 254, 240, 61, 30, 90, 16, 189, 230, 194, 232, 189, 211, 52, 170, 61, 217, 60, 171, 189, 39, 169, 215, 61, 24, 59, 113, 189, 213, 92, 233, 61, 120, 48, 201, 189, 95, 200, 207, 60, 64, 72, 186, 189, 110, 46, 2, 61, 134, 219, 74, 189, 243, 244, 234, 189, 193, 82, 198, 61, 228, 151, 17, 62, 107, 145, 1, 189, 222, 119, 187, 61, 217, 229, 30, 62, 47, 58, 35, 190, 220, 51, 40, 62, 118, 73, 51, 190, 190, 98, 225, 188, 201, 138, 29, 61, 106, 230, 17, 62, 69, 190, 88, 61, 226, 189, 45, 62, 178, 110, 253, 189, 152, 73, 26, 62, 130, 106, 45, 190, 119, 179, 126, 188, 121, 77, 116, 186, 69, 200, 218, 189, 116, 124, 209, 189, 238, 68, 49, 62, 107, 19, 20, 62, 156, 48, 100, 61, 228, 25, 237, 61, 81, 147, 52, 62, 156, 210, 25, 189, 34, 13, 171, 189, 236, 43, 8, 190, 63, 210, 44, 62, 123, 118, 232, 188, 160, 189, 110, 60, 79, 218, 220, 189, 232, 6, 252, 189, 7, 159, 140, 60, 174, 167, 127, 59, 63, 110, 32, 62, 146, 72, 212, 189, 72, 170, 31, 190, 211, 193, 118, 189, 78, 232, 133, 61, 198, 74, 150, 61, 186, 71, 45, 190, 253, 18, 162, 189, 115, 237, 58, 186, 117, 40, 20, 61, 224, 138, 50, 62, 252, 255, 46, 190, 65, 31, 175, 188, 44, 206, 226, 60, 52, 230, 58, 61, 38, 214, 39, 61, 185, 192, 48, 189, 83, 215, 1, 190, 188, 127, 1, 62, 254, 249, 174, 189, 59, 84, 48, 190, 222, 16, 173, 61, 225, 82, 71, 61, 63, 28, 226, 61, 105, 86, 11, 62, 41, 198, 51, 62, 166, 24, 224, 189, 208, 18, 4, 62, 195, 33, 200, 61, 20, 192, 10, 62, 231, 99, 170, 61, 77, 236, 58, 60, 140, 39, 252, 61, 65, 181, 0, 189, 202, 142, 173, 61, 222, 50, 33, 190, 88, 50, 3, 190, 23, 70, 27, 62, 84, 191, 223, 61, 48, 211, 39, 190, 54, 145, 21, 60, 131, 13, 89, 188, 50, 36, 168, 61, 199, 16, 115, 189, 40, 56, 39, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 116, 29, 190, 223, 146, 103, 189, 225, 144, 243, 189, 4, 196, 17, 190, 3, 68, 253, 61, 61, 179, 216, 189, 86, 80, 145, 61, 195, 188, 72, 61, 228, 204, 202, 189, 57, 232, 210, 189, 177, 136, 37, 190, 210, 110, 45, 62, 62, 134, 19, 189, 10, 63, 175, 61, 0, 115, 207, 61, 21, 27, 38, 62, 19, 151, 20, 60, 178, 246, 111, 60, 144, 237, 62, 189, 211, 98, 115, 61, 1, 192, 120, 60, 14, 159, 36, 61, 146, 245, 49, 190, 158, 172, 161, 189, 182, 161, 69, 189, 211, 73, 160, 188, 147, 12, 147, 61, 14, 153, 164, 61, 97, 227, 52, 190, 207, 40, 3, 190, 246, 222, 41, 62, 145, 208, 156, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 178, 47, 190, 93, 43, 48, 62, 92, 32, 253, 61, 125, 116, 42, 62, 113, 107, 205, 60, 7, 176, 48, 60, 151, 18, 253, 189, 226, 93, 161, 189, 164, 142, 23, 62, 152, 68, 165, 189, 17, 148, 67, 189, 252, 35, 97, 61, 214, 83, 181, 188, 174, 58, 163, 189, 64, 167, 135, 61, 95, 228, 193, 189, 229, 2, 36, 62, 202, 236, 194, 188, 247, 185, 60, 189, 177, 37, 233, 189, 93, 226, 200, 61, 15, 86, 95, 189, 4, 155, 201, 58, 114, 36, 43, 61, 238, 17, 177, 61, 114, 93, 232, 60, 173, 186, 13, 62, 53, 214, 43, 190, 14, 159, 155, 189, 58, 199, 159, 189, 196, 37, 210, 61, 75, 94, 71, 189, 14, 32, 26, 190, 201, 252, 136, 59, 62, 177, 194, 189, 115, 159, 49, 189, 67, 17, 37, 190, 186, 180, 96, 60, 133, 216, 25, 188, 70, 18, 8, 190, 214, 180, 58, 61, 226, 183, 48, 189, 138, 133, 115, 60, 143, 4, 29, 190, 253, 164, 196, 189, 129, 114, 29, 190, 74, 177, 151, 189, 91, 93, 33, 188, 71, 179, 138, 189, 154, 123, 37, 190, 150, 36, 177, 189, 128, 24, 165, 61, 134, 162, 70, 61, 164, 132, 229, 61, 158, 160, 47, 62, 164, 234, 136, 61, 28, 204, 156, 60, 212, 187, 46, 189, 181, 49, 217, 60, 31, 230, 0, 62, 200, 85, 13, 189, 23, 110, 222, 189, 167, 139, 108, 60, 189, 44, 235, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 134, 129, 61, 60, 78, 118, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 214, 54, 60, 100, 193, 128, 191, 168, 36, 202, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 235, 200, 61, 116, 221, 242, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}