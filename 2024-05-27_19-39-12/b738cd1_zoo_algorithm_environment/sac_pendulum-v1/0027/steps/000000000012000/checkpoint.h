// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 28, 50, 62, 203, 103, 10, 191, 76, 214, 192, 62, 4, 219, 167, 189, 50, 79, 185, 191, 41, 233, 183, 190, 234, 100, 99, 190, 83, 234, 188, 61, 32, 37, 97, 190, 27, 49, 193, 62, 45, 7, 37, 62, 44, 118, 36, 63, 132, 200, 112, 191, 194, 184, 77, 63, 11, 134, 182, 61, 236, 111, 35, 62, 226, 241, 215, 191, 206, 60, 204, 190, 76, 109, 32, 62, 187, 150, 163, 190, 73, 2, 102, 190, 101, 133, 11, 63, 30, 252, 139, 190, 10, 41, 120, 190, 108, 81, 101, 190, 117, 106, 114, 191, 238, 21, 160, 190, 34, 242, 52, 191, 128, 170, 6, 63, 38, 129, 155, 190, 46, 78, 211, 62, 139, 166, 171, 191, 84, 35, 201, 190, 200, 37, 55, 190, 206, 74, 187, 63, 222, 138, 204, 62, 173, 28, 49, 191, 167, 21, 0, 191, 103, 140, 24, 62, 144, 114, 123, 62, 169, 181, 101, 191, 157, 82, 142, 62, 203, 140, 89, 191, 154, 239, 90, 61, 155, 85, 188, 61, 205, 179, 2, 191, 179, 11, 92, 63, 39, 49, 10, 63, 7, 2, 222, 62, 235, 32, 212, 189, 181, 89, 41, 190, 131, 172, 202, 190, 189, 95, 139, 191, 129, 160, 178, 62, 189, 58, 129, 62, 99, 14, 226, 189, 159, 156, 24, 191, 141, 249, 196, 190, 176, 212, 186, 190, 170, 128, 78, 61, 183, 164, 207, 62, 98, 230, 124, 191, 195, 87, 128, 190, 234, 191, 231, 62, 28, 50, 232, 190, 177, 136, 109, 190, 186, 213, 135, 62, 220, 120, 133, 62, 197, 202, 74, 61, 42, 27, 90, 190, 50, 91, 119, 63, 104, 25, 79, 62, 20, 184, 226, 62, 183, 151, 80, 63, 127, 98, 87, 62, 181, 202, 73, 191, 121, 218, 106, 60, 54, 46, 61, 63, 134, 95, 209, 190, 168, 130, 132, 63, 77, 235, 248, 62, 47, 199, 114, 63, 120, 169, 135, 63, 218, 113, 232, 62, 253, 151, 1, 63, 112, 105, 14, 63, 9, 101, 48, 190, 89, 27, 26, 63, 99, 41, 70, 191, 110, 113, 171, 61, 201, 168, 181, 62, 55, 219, 244, 190, 17, 4, 79, 62, 220, 83, 35, 62, 76, 85, 5, 191, 96, 11, 145, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 9, 38, 191, 101, 198, 180, 62, 118, 102, 49, 191, 83, 243, 172, 189, 39, 43, 28, 63, 91, 119, 231, 60, 95, 207, 7, 62, 53, 117, 255, 189, 183, 235, 186, 190, 226, 249, 26, 62, 75, 204, 155, 62, 50, 23, 177, 62, 146, 231, 214, 62, 16, 157, 59, 61, 164, 177, 245, 62, 112, 141, 94, 190, 202, 121, 195, 62, 205, 117, 215, 189, 101, 229, 170, 62, 37, 213, 81, 190, 40, 45, 192, 190, 100, 233, 197, 190, 159, 18, 9, 63, 246, 34, 195, 62, 121, 5, 12, 190, 190, 83, 20, 191, 176, 142, 124, 190, 220, 199, 179, 62, 227, 186, 45, 62, 84, 238, 153, 62, 186, 116, 136, 62, 157, 178, 14, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 188, 16, 62, 44, 160, 202, 61, 153, 119, 66, 60, 196, 188, 33, 189, 81, 40, 216, 189, 71, 157, 45, 62, 91, 27, 200, 61, 200, 69, 203, 61, 196, 41, 177, 189, 196, 225, 52, 60, 45, 217, 201, 61, 253, 16, 15, 187, 99, 215, 70, 62, 84, 36, 35, 189, 151, 138, 10, 190, 98, 47, 57, 61, 141, 184, 248, 189, 128, 19, 1, 62, 219, 120, 224, 61, 35, 79, 248, 189, 53, 113, 48, 189, 90, 151, 44, 62, 204, 68, 70, 62, 108, 102, 221, 61, 46, 20, 108, 62, 111, 137, 68, 62, 14, 229, 175, 61, 89, 231, 24, 62, 78, 237, 124, 190, 63, 42, 189, 60, 151, 150, 110, 189, 94, 230, 110, 62, 150, 34, 40, 62, 130, 94, 92, 62, 232, 170, 53, 60, 51, 107, 156, 190, 39, 153, 212, 189, 189, 183, 147, 62, 230, 199, 126, 61, 122, 166, 3, 62, 244, 81, 37, 61, 81, 152, 130, 59, 25, 243, 30, 62, 112, 159, 44, 191, 170, 62, 11, 63, 42, 16, 70, 62, 171, 70, 81, 62, 19, 56, 131, 61, 112, 144, 174, 62, 127, 213, 125, 62, 135, 107, 189, 61, 15, 43, 162, 62, 102, 97, 227, 61, 155, 220, 26, 190, 27, 179, 162, 189, 51, 151, 98, 191, 201, 124, 165, 191, 90, 190, 173, 188, 146, 153, 174, 190, 218, 156, 12, 191, 26, 197, 131, 189, 223, 125, 196, 61, 110, 93, 198, 62, 187, 6, 136, 62, 91, 27, 30, 62, 55, 48, 54, 61, 254, 33, 69, 189, 17, 105, 61, 190, 191, 167, 61, 191, 159, 206, 137, 189, 161, 3, 59, 62, 29, 95, 91, 62, 73, 209, 107, 62, 8, 197, 85, 62, 90, 227, 153, 189, 131, 101, 175, 191, 174, 194, 108, 190, 87, 25, 202, 61, 124, 198, 50, 191, 172, 20, 169, 190, 131, 200, 34, 62, 234, 89, 72, 190, 18, 129, 207, 61, 189, 190, 140, 190, 29, 217, 78, 190, 224, 102, 97, 61, 212, 239, 76, 62, 96, 189, 226, 190, 86, 110, 34, 190, 116, 216, 23, 189, 0, 146, 193, 190, 147, 57, 52, 62, 45, 171, 130, 62, 102, 64, 54, 62, 118, 45, 158, 61, 103, 105, 168, 61, 32, 52, 172, 189, 66, 231, 64, 61, 179, 224, 4, 190, 222, 87, 94, 60, 235, 179, 6, 191, 215, 244, 201, 61, 33, 25, 169, 61, 3, 206, 133, 62, 147, 60, 66, 190, 61, 118, 222, 189, 130, 127, 36, 62, 2, 223, 188, 191, 202, 46, 51, 62, 146, 26, 91, 62, 167, 147, 88, 190, 212, 140, 29, 190, 129, 125, 59, 62, 76, 214, 134, 62, 185, 175, 27, 62, 55, 18, 237, 189, 247, 110, 217, 61, 17, 184, 131, 189, 163, 236, 210, 60, 234, 135, 26, 191, 32, 0, 172, 190, 146, 104, 134, 190, 177, 90, 242, 190, 66, 29, 99, 189, 131, 30, 26, 62, 210, 65, 217, 61, 150, 30, 205, 62, 195, 27, 4, 62, 231, 246, 151, 190, 64, 231, 60, 189, 171, 56, 40, 189, 71, 89, 82, 190, 153, 23, 153, 60, 51, 225, 187, 61, 91, 76, 36, 62, 64, 159, 171, 60, 185, 25, 21, 62, 220, 215, 74, 59, 4, 24, 94, 60, 183, 210, 167, 61, 67, 202, 167, 61, 105, 32, 209, 60, 38, 105, 22, 62, 134, 101, 189, 61, 26, 4, 160, 62, 116, 131, 164, 61, 69, 63, 26, 62, 53, 80, 45, 189, 153, 82, 17, 190, 235, 116, 19, 189, 60, 65, 35, 62, 84, 168, 246, 61, 81, 89, 59, 61, 132, 142, 2, 62, 143, 150, 35, 190, 68, 7, 221, 61, 202, 123, 104, 62, 94, 187, 139, 60, 52, 11, 139, 61, 128, 212, 238, 61, 44, 210, 40, 62, 99, 227, 115, 190, 187, 108, 43, 190, 71, 150, 76, 62, 72, 8, 36, 190, 25, 221, 94, 190, 121, 32, 151, 190, 251, 5, 44, 191, 185, 13, 248, 61, 48, 29, 198, 62, 126, 16, 15, 191, 208, 3, 79, 60, 66, 34, 218, 190, 209, 189, 24, 62, 161, 121, 222, 190, 162, 113, 166, 189, 138, 249, 165, 190, 46, 243, 156, 60, 134, 4, 131, 62, 121, 8, 248, 189, 128, 129, 114, 190, 43, 60, 155, 189, 143, 84, 10, 190, 147, 208, 78, 188, 156, 126, 219, 62, 42, 71, 43, 190, 6, 108, 198, 61, 74, 250, 142, 62, 73, 192, 64, 63, 121, 16, 115, 62, 220, 141, 5, 62, 30, 136, 169, 61, 228, 168, 206, 57, 171, 65, 233, 58, 97, 109, 172, 61, 0, 242, 114, 61, 30, 242, 127, 189, 110, 5, 255, 189, 77, 209, 159, 60, 200, 244, 140, 190, 33, 149, 154, 62, 71, 218, 147, 62, 196, 17, 169, 189, 59, 41, 144, 190, 175, 2, 59, 189, 126, 171, 177, 189, 254, 205, 182, 61, 216, 224, 191, 190, 64, 150, 202, 189, 181, 164, 93, 190, 134, 237, 49, 61, 199, 185, 124, 62, 14, 176, 10, 191, 250, 161, 186, 190, 68, 177, 89, 62, 71, 8, 40, 61, 147, 35, 165, 62, 247, 185, 225, 190, 26, 134, 105, 190, 105, 96, 143, 62, 103, 56, 107, 189, 11, 8, 233, 60, 199, 124, 56, 189, 6, 71, 119, 187, 143, 186, 183, 190, 53, 0, 120, 190, 1, 200, 157, 62, 158, 2, 67, 190, 37, 75, 70, 61, 1, 197, 158, 189, 233, 62, 142, 189, 32, 103, 24, 190, 223, 72, 21, 62, 66, 168, 38, 62, 113, 127, 201, 189, 223, 134, 217, 61, 243, 138, 160, 61, 172, 3, 213, 189, 120, 237, 228, 60, 50, 188, 223, 61, 133, 105, 189, 61, 179, 152, 152, 190, 204, 203, 31, 189, 56, 237, 119, 190, 220, 3, 175, 190, 85, 1, 33, 189, 106, 19, 105, 62, 175, 105, 124, 60, 90, 245, 137, 62, 232, 102, 53, 190, 7, 200, 0, 62, 8, 47, 170, 61, 132, 239, 159, 61, 102, 84, 32, 190, 126, 78, 40, 61, 178, 86, 79, 62, 203, 192, 146, 189, 202, 13, 237, 189, 218, 142, 64, 61, 245, 129, 78, 189, 35, 127, 12, 191, 134, 247, 81, 61, 5, 122, 7, 190, 153, 40, 165, 62, 93, 55, 156, 189, 167, 161, 26, 190, 51, 180, 6, 62, 254, 186, 186, 191, 35, 115, 64, 62, 246, 122, 225, 62, 109, 102, 106, 190, 21, 51, 50, 190, 89, 157, 176, 62, 96, 65, 4, 62, 225, 190, 0, 62, 4, 71, 208, 61, 236, 175, 32, 62, 223, 3, 1, 188, 189, 159, 47, 62, 0, 247, 163, 190, 52, 125, 0, 191, 247, 221, 63, 190, 206, 174, 25, 191, 96, 245, 91, 190, 61, 108, 130, 62, 28, 163, 145, 62, 244, 12, 156, 62, 84, 176, 192, 61, 122, 142, 168, 61, 24, 7, 76, 190, 62, 62, 96, 62, 133, 62, 98, 62, 76, 82, 79, 190, 165, 232, 37, 190, 255, 115, 122, 61, 171, 215, 178, 190, 114, 129, 74, 60, 130, 212, 30, 61, 233, 173, 52, 61, 90, 192, 177, 189, 9, 39, 54, 190, 221, 220, 127, 61, 42, 61, 188, 190, 129, 231, 126, 61, 167, 164, 171, 190, 138, 249, 29, 190, 67, 15, 109, 62, 171, 60, 182, 61, 22, 32, 122, 191, 227, 122, 215, 190, 4, 101, 98, 62, 131, 78, 171, 60, 4, 213, 202, 62, 70, 163, 56, 188, 69, 237, 111, 189, 127, 163, 245, 62, 25, 47, 88, 62, 66, 0, 184, 189, 35, 161, 0, 190, 63, 3, 128, 61, 106, 9, 125, 62, 98, 128, 109, 62, 174, 66, 135, 190, 152, 124, 96, 62, 255, 216, 86, 60, 152, 255, 54, 62, 215, 162, 5, 62, 76, 32, 250, 61, 109, 6, 170, 60, 44, 192, 47, 61, 252, 207, 171, 62, 87, 120, 150, 189, 58, 126, 135, 61, 216, 0, 0, 190, 14, 53, 116, 62, 107, 250, 59, 62, 218, 116, 191, 188, 61, 113, 26, 188, 236, 215, 135, 61, 217, 240, 247, 60, 95, 234, 138, 62, 30, 138, 133, 62, 160, 187, 160, 190, 195, 179, 25, 62, 171, 184, 64, 189, 51, 174, 132, 62, 255, 204, 12, 62, 25, 155, 146, 190, 169, 236, 6, 191, 91, 100, 42, 62, 87, 187, 155, 61, 165, 31, 235, 61, 93, 199, 10, 61, 105, 101, 144, 190, 104, 73, 211, 189, 40, 12, 224, 190, 219, 26, 36, 190, 115, 71, 227, 190, 61, 139, 2, 62, 125, 85, 212, 61, 81, 165, 183, 190, 232, 252, 15, 188, 219, 226, 209, 189, 222, 246, 157, 190, 61, 13, 156, 61, 210, 3, 142, 62, 215, 110, 112, 62, 125, 99, 155, 61, 45, 26, 5, 62, 18, 20, 51, 62, 14, 101, 158, 61, 211, 46, 26, 62, 66, 34, 136, 189, 15, 147, 74, 60, 95, 60, 24, 62, 157, 58, 168, 190, 41, 67, 12, 191, 244, 61, 170, 61, 26, 134, 15, 62, 104, 9, 76, 190, 114, 207, 21, 62, 168, 74, 67, 61, 207, 225, 12, 62, 227, 38, 232, 61, 187, 25, 100, 190, 57, 152, 135, 191, 160, 180, 239, 190, 152, 172, 170, 190, 111, 79, 150, 62, 66, 174, 181, 190, 139, 183, 71, 62, 221, 14, 159, 61, 170, 0, 193, 190, 147, 117, 33, 62, 16, 81, 131, 190, 149, 101, 130, 62, 91, 170, 21, 190, 245, 209, 185, 190, 48, 235, 41, 61, 134, 244, 58, 190, 199, 247, 109, 62, 67, 221, 122, 190, 30, 188, 35, 61, 247, 23, 206, 61, 21, 241, 254, 190, 74, 56, 77, 61, 37, 168, 132, 189, 196, 25, 135, 61, 40, 227, 118, 190, 248, 63, 162, 190, 176, 229, 93, 189, 66, 142, 46, 189, 103, 85, 173, 60, 31, 165, 46, 190, 184, 111, 23, 191, 253, 40, 138, 190, 43, 33, 45, 190, 157, 21, 32, 61, 210, 81, 134, 60, 227, 133, 189, 61, 132, 32, 99, 189, 135, 133, 165, 189, 187, 116, 51, 62, 167, 173, 17, 190, 152, 243, 45, 61, 200, 56, 31, 62, 116, 1, 23, 62, 156, 209, 8, 190, 206, 162, 92, 62, 203, 9, 231, 61, 74, 15, 195, 189, 106, 115, 206, 61, 202, 115, 135, 189, 127, 222, 144, 61, 209, 116, 154, 61, 8, 157, 135, 189, 145, 72, 222, 59, 197, 20, 216, 189, 25, 25, 161, 61, 179, 160, 254, 61, 195, 132, 134, 62, 241, 52, 140, 189, 81, 144, 65, 62, 163, 229, 68, 62, 34, 239, 213, 189, 105, 183, 154, 61, 142, 207, 176, 61, 77, 52, 119, 62, 250, 141, 242, 189, 1, 144, 144, 62, 199, 97, 129, 190, 43, 52, 227, 190, 122, 234, 4, 62, 84, 74, 169, 191, 142, 6, 137, 191, 108, 230, 12, 189, 221, 124, 131, 191, 201, 183, 175, 61, 118, 116, 169, 191, 26, 69, 80, 62, 199, 154, 169, 60, 8, 224, 190, 188, 252, 201, 60, 62, 96, 103, 169, 189, 49, 37, 129, 191, 109, 196, 150, 188, 195, 220, 32, 191, 6, 173, 166, 190, 125, 112, 196, 61, 87, 47, 253, 61, 77, 121, 159, 189, 240, 6, 159, 62, 93, 107, 104, 61, 39, 210, 129, 61, 1, 188, 40, 62, 176, 162, 86, 190, 233, 83, 49, 191, 234, 206, 33, 191, 190, 103, 108, 190, 212, 225, 242, 190, 145, 193, 148, 59, 216, 234, 130, 190, 180, 245, 18, 190, 102, 155, 239, 61, 119, 236, 140, 191, 254, 46, 171, 190, 213, 43, 112, 61, 7, 185, 6, 190, 36, 250, 55, 190, 202, 172, 15, 190, 25, 85, 71, 59, 191, 147, 140, 191, 15, 25, 95, 190, 180, 74, 17, 60, 54, 203, 112, 59, 34, 3, 137, 190, 182, 254, 103, 62, 167, 75, 221, 60, 14, 52, 106, 190, 163, 53, 135, 190, 51, 216, 215, 191, 48, 32, 231, 190, 177, 27, 186, 188, 143, 133, 22, 191, 73, 213, 52, 61, 155, 158, 22, 188, 36, 166, 228, 189, 95, 202, 130, 61, 136, 109, 27, 187, 218, 155, 193, 61, 194, 153, 172, 189, 95, 168, 41, 62, 234, 221, 132, 190, 219, 7, 3, 61, 50, 9, 96, 189, 156, 162, 194, 190, 217, 109, 41, 62, 5, 144, 182, 189, 185, 238, 74, 60, 14, 174, 34, 62, 107, 97, 229, 189, 190, 225, 192, 188, 29, 244, 170, 60, 105, 208, 123, 62, 188, 205, 237, 61, 248, 66, 196, 62, 125, 136, 2, 61, 255, 151, 22, 62, 202, 254, 12, 62, 102, 247, 115, 62, 138, 6, 103, 60, 84, 199, 95, 190, 234, 18, 17, 189, 26, 161, 252, 61, 7, 83, 214, 188, 1, 66, 78, 189, 66, 185, 206, 190, 178, 28, 126, 189, 32, 30, 85, 189, 9, 49, 194, 190, 68, 103, 147, 61, 56, 43, 52, 62, 206, 250, 167, 62, 66, 177, 169, 189, 66, 146, 108, 62, 248, 49, 243, 61, 250, 151, 137, 189, 3, 19, 19, 190, 48, 176, 110, 62, 27, 90, 167, 62, 152, 3, 180, 61, 190, 255, 255, 61, 217, 177, 231, 61, 114, 130, 238, 61, 209, 153, 118, 61, 61, 158, 1, 61, 8, 48, 24, 63, 215, 7, 5, 191, 14, 195, 55, 62, 34, 45, 95, 190, 92, 154, 227, 189, 68, 221, 49, 189, 101, 255, 198, 61, 133, 8, 70, 63, 223, 167, 37, 190, 191, 174, 61, 189, 120, 181, 146, 62, 92, 1, 195, 62, 204, 142, 134, 62, 68, 199, 206, 190, 52, 230, 255, 189, 173, 154, 69, 61, 220, 31, 25, 190, 36, 184, 165, 61, 232, 224, 175, 189, 244, 170, 195, 61, 248, 187, 63, 188, 35, 126, 50, 190, 152, 91, 234, 188, 147, 220, 169, 189, 171, 167, 145, 61, 153, 183, 56, 190, 2, 63, 5, 61, 86, 144, 107, 61, 176, 204, 236, 60, 126, 228, 176, 61, 157, 118, 124, 60, 8, 97, 72, 190, 170, 67, 106, 62, 247, 2, 27, 190, 202, 162, 67, 62, 50, 136, 26, 60, 93, 76, 123, 189, 69, 164, 44, 62, 39, 144, 211, 60, 49, 235, 25, 60, 56, 104, 53, 59, 187, 101, 229, 189, 10, 197, 59, 60, 174, 218, 26, 190, 135, 78, 212, 189, 127, 16, 248, 189, 74, 5, 87, 190, 133, 4, 28, 189, 108, 152, 140, 190, 201, 119, 195, 61, 239, 117, 78, 190, 221, 64, 103, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 217, 29, 218, 189, 61, 28, 114, 187, 162, 47, 110, 62, 222, 7, 53, 189, 30, 222, 191, 190, 65, 95, 117, 61, 75, 41, 172, 189, 2, 9, 241, 61, 62, 0, 104, 189, 162, 2, 125, 190, 185, 111, 3, 62, 68, 93, 6, 191, 34, 220, 141, 188, 35, 118, 37, 62, 13, 229, 230, 59, 80, 147, 230, 189, 150, 48, 232, 61, 40, 136, 168, 62, 15, 19, 149, 61, 106, 141, 150, 62, 135, 153, 81, 61, 7, 213, 150, 62, 216, 223, 15, 190, 53, 51, 22, 191, 189, 55, 69, 191, 255, 205, 32, 188, 114, 145, 143, 190, 218, 117, 64, 190, 95, 138, 174, 61, 70, 121, 211, 61, 158, 104, 197, 60, 146, 171, 53, 62, 147, 139, 43, 63, 100, 41, 18, 62, 163, 218, 132, 190, 79, 244, 239, 62, 174, 223, 190, 61, 167, 41, 148, 62, 99, 178, 159, 61, 247, 163, 126, 62, 234, 73, 37, 188, 113, 216, 194, 189, 158, 82, 130, 62, 102, 145, 234, 190, 185, 127, 119, 62, 58, 47, 136, 189, 238, 10, 145, 61, 123, 2, 62, 191, 77, 17, 19, 62, 208, 127, 52, 62, 34, 87, 84, 189, 40, 196, 64, 62, 2, 118, 150, 60, 75, 163, 244, 61, 213, 166, 163, 190, 149, 191, 91, 190, 194, 29, 207, 190, 215, 215, 18, 191, 236, 31, 142, 191, 236, 117, 133, 191, 210, 111, 148, 190, 61, 53, 169, 62, 163, 28, 232, 189, 126, 95, 254, 187, 220, 239, 115, 190, 15, 99, 165, 62, 209, 42, 42, 63, 190, 91, 114, 188, 103, 40, 176, 62, 181, 162, 153, 191, 29, 64, 182, 190, 208, 69, 47, 191, 183, 61, 136, 191, 248, 144, 118, 62, 195, 187, 84, 191, 83, 167, 56, 62, 223, 50, 243, 189, 1, 120, 81, 61, 217, 210, 128, 62, 67, 173, 150, 187, 203, 242, 150, 61, 81, 220, 216, 60, 219, 181, 164, 61, 177, 224, 26, 190, 78, 194, 159, 190, 108, 195, 208, 61, 145, 140, 138, 61, 227, 186, 184, 61, 131, 47, 108, 60, 230, 178, 137, 61, 194, 225, 108, 62, 149, 105, 186, 189, 215, 219, 140, 60, 203, 109, 132, 60, 11, 229, 11, 62, 119, 44, 41, 190, 132, 250, 138, 62, 132, 0, 47, 61, 209, 4, 134, 62, 244, 131, 158, 61, 228, 135, 35, 191, 32, 177, 177, 189, 62, 125, 80, 62, 64, 40, 168, 61, 74, 175, 158, 190, 221, 50, 12, 61, 88, 45, 28, 188, 21, 229, 70, 191, 45, 140, 172, 190, 185, 149, 200, 62, 30, 55, 139, 191, 0, 111, 17, 190, 241, 88, 63, 62, 154, 97, 122, 60, 219, 53, 107, 62, 223, 253, 32, 189, 236, 186, 173, 60, 11, 94, 238, 62, 93, 49, 225, 189, 52, 216, 153, 191, 13, 33, 68, 191, 29, 37, 41, 188, 138, 14, 2, 190, 17, 178, 214, 190, 199, 90, 143, 62, 251, 141, 149, 62, 196, 200, 167, 62, 158, 157, 40, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 177, 117, 207, 62, 53, 94, 128, 189, 21, 58, 56, 62, 148, 109, 72, 62, 61, 50, 39, 62, 63, 70, 9, 190, 200, 250, 132, 61, 31, 116, 82, 190, 101, 200, 71, 62, 11, 214, 18, 62, 16, 219, 249, 189, 155, 240, 147, 190, 111, 4, 236, 61, 103, 160, 150, 190, 184, 77, 22, 62, 158, 229, 58, 191, 56, 149, 80, 190, 32, 46, 75, 61, 232, 55, 145, 61, 185, 58, 182, 61, 138, 37, 78, 191, 241, 226, 12, 191, 51, 103, 93, 61, 81, 204, 194, 61, 164, 0, 117, 62, 245, 156, 69, 191, 234, 108, 49, 191, 163, 70, 169, 62, 84, 140, 69, 61, 112, 24, 32, 190, 112, 23, 142, 189, 114, 6, 219, 59, 228, 77, 112, 189, 15, 104, 157, 61, 44, 107, 139, 62, 125, 144, 48, 190, 227, 162, 193, 61, 199, 124, 184, 191, 81, 10, 202, 190, 221, 123, 143, 190, 83, 76, 183, 191, 17, 4, 97, 62, 233, 0, 103, 191, 69, 129, 50, 62, 33, 4, 96, 62, 194, 38, 9, 189, 139, 121, 132, 62, 247, 241, 215, 60, 236, 187, 63, 61, 171, 202, 72, 62, 168, 122, 197, 189, 90, 0, 141, 189, 24, 85, 235, 189, 5, 67, 135, 62, 184, 201, 50, 190, 253, 148, 121, 61, 200, 11, 173, 190, 230, 5, 39, 62, 102, 189, 175, 60, 107, 145, 70, 190, 208, 65, 131, 190, 161, 2, 162, 190, 132, 94, 5, 62, 49, 99, 23, 190, 97, 4, 75, 62, 114, 94, 138, 62, 2, 126, 49, 62, 235, 187, 204, 62, 172, 112, 156, 190, 10, 178, 22, 62, 170, 143, 23, 190, 242, 128, 142, 189, 114, 53, 23, 62, 181, 77, 93, 62, 39, 206, 122, 59, 95, 244, 168, 190, 207, 111, 8, 62, 54, 74, 92, 190, 2, 10, 151, 189, 82, 162, 51, 190, 19, 91, 149, 60, 181, 133, 182, 188, 151, 32, 124, 61, 208, 218, 124, 62, 152, 40, 74, 190, 139, 192, 187, 189, 217, 31, 92, 190, 43, 247, 29, 190, 170, 149, 138, 62, 46, 67, 237, 189, 31, 112, 167, 190, 240, 160, 142, 62, 56, 108, 192, 189, 190, 73, 208, 61, 181, 129, 210, 187, 250, 195, 111, 62, 85, 64, 42, 190, 103, 234, 231, 189, 61, 98, 233, 61, 167, 88, 111, 189, 159, 48, 198, 61, 88, 228, 38, 62, 52, 36, 53, 190, 165, 38, 223, 61, 124, 211, 234, 60, 192, 96, 43, 190, 102, 33, 46, 190, 57, 111, 178, 189, 41, 16, 1, 190, 61, 108, 143, 61, 32, 187, 190, 189, 145, 129, 208, 189, 222, 38, 127, 61, 124, 177, 154, 61, 92, 200, 172, 61, 23, 86, 21, 62, 10, 69, 170, 189, 125, 82, 199, 61, 96, 188, 146, 189, 94, 99, 195, 189, 132, 53, 40, 190, 124, 196, 192, 60, 160, 199, 138, 61, 121, 153, 117, 188, 126, 146, 12, 62, 23, 57, 158, 189, 78, 134, 23, 190, 121, 224, 190, 61, 132, 77, 36, 61, 36, 172, 189, 189, 236, 254, 240, 61, 87, 228, 109, 189, 19, 114, 14, 190, 139, 38, 153, 61, 253, 57, 205, 189, 52, 172, 186, 61, 40, 25, 123, 189, 99, 176, 191, 61, 35, 89, 240, 189, 187, 187, 55, 60, 240, 222, 192, 189, 30, 151, 100, 60, 119, 101, 110, 189, 57, 4, 18, 190, 253, 253, 151, 61, 233, 9, 243, 61, 252, 189, 151, 189, 247, 8, 178, 61, 217, 81, 27, 62, 201, 39, 41, 190, 61, 12, 12, 62, 165, 71, 71, 190, 113, 118, 31, 189, 193, 182, 17, 60, 37, 10, 250, 61, 120, 102, 81, 60, 24, 56, 17, 62, 58, 161, 7, 190, 213, 111, 15, 62, 75, 5, 63, 190, 109, 201, 168, 190, 42, 140, 204, 189, 100, 83, 212, 190, 19, 86, 16, 191, 159, 205, 194, 62, 178, 182, 59, 191, 176, 18, 243, 190, 81, 109, 88, 62, 169, 200, 104, 191, 18, 91, 155, 190, 225, 25, 2, 191, 222, 117, 243, 61, 52, 229, 139, 62, 87, 244, 128, 62, 224, 171, 147, 62, 103, 254, 248, 61, 115, 237, 152, 190, 217, 100, 171, 62, 124, 96, 4, 191, 127, 78, 16, 60, 34, 246, 50, 190, 71, 97, 156, 190, 162, 175, 19, 190, 178, 251, 58, 62, 74, 247, 244, 190, 6, 12, 24, 62, 77, 209, 100, 62, 106, 33, 158, 190, 172, 48, 110, 190, 246, 63, 140, 61, 85, 45, 75, 187, 94, 178, 45, 190, 105, 137, 8, 190, 52, 167, 216, 61, 121, 10, 160, 189, 19, 118, 241, 187, 52, 162, 118, 61, 54, 51, 135, 62, 4, 31, 154, 189, 197, 68, 254, 61, 13, 187, 109, 59, 19, 197, 185, 187, 153, 246, 133, 62, 69, 217, 144, 62, 155, 193, 176, 62, 147, 194, 135, 190, 75, 127, 174, 62, 220, 139, 9, 188, 103, 197, 121, 62, 72, 5, 171, 60, 10, 198, 181, 187, 146, 75, 199, 61, 166, 123, 12, 62, 161, 121, 119, 62, 157, 89, 132, 190, 71, 60, 195, 60, 76, 113, 138, 190, 85, 183, 51, 189, 10, 201, 62, 190, 117, 130, 191, 190, 18, 6, 102, 190, 132, 176, 136, 62, 42, 172, 243, 189, 232, 215, 113, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 24, 106, 189, 205, 83, 54, 61, 100, 89, 213, 189, 18, 235, 160, 60, 39, 63, 163, 62, 52, 105, 120, 190, 207, 78, 53, 62, 215, 122, 37, 62, 215, 55, 2, 188, 24, 168, 239, 189, 69, 122, 68, 190, 98, 192, 156, 62, 90, 239, 252, 61, 148, 15, 121, 62, 4, 6, 49, 62, 61, 60, 242, 61, 168, 78, 201, 61, 116, 104, 176, 62, 60, 123, 137, 60, 165, 101, 30, 61, 239, 44, 216, 189, 110, 208, 249, 187, 168, 13, 133, 189, 245, 232, 138, 190, 213, 255, 160, 189, 135, 27, 3, 62, 84, 204, 156, 61, 252, 171, 103, 188, 98, 182, 97, 190, 77, 50, 40, 190, 119, 18, 89, 62, 224, 169, 56, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 36, 209, 189, 51, 6, 33, 63, 82, 66, 34, 62, 155, 220, 169, 62, 212, 22, 30, 189, 46, 74, 244, 190, 18, 99, 208, 190, 170, 203, 186, 189, 102, 240, 191, 62, 174, 73, 204, 190, 18, 149, 97, 190, 61, 246, 80, 62, 141, 210, 36, 191, 164, 217, 181, 189, 51, 158, 104, 63, 207, 211, 131, 190, 196, 26, 154, 61, 252, 2, 249, 190, 103, 181, 136, 60, 247, 231, 216, 189, 13, 127, 173, 62, 203, 34, 247, 190, 199, 218, 238, 62, 11, 127, 64, 63, 54, 122, 145, 61, 38, 191, 0, 191, 99, 164, 232, 62, 103, 169, 145, 190, 42, 221, 43, 188, 133, 161, 157, 189, 171, 56, 78, 63, 187, 16, 125, 190, 76, 91, 143, 189, 9, 113, 177, 61, 7, 210, 8, 191, 105, 192, 18, 190, 227, 101, 78, 190, 20, 178, 21, 62, 118, 86, 194, 189, 185, 5, 46, 190, 158, 207, 153, 189, 210, 13, 129, 60, 154, 248, 188, 60, 74, 62, 205, 190, 63, 71, 108, 187, 207, 203, 36, 190, 3, 93, 91, 189, 178, 126, 66, 191, 56, 215, 123, 189, 178, 192, 185, 189, 249, 136, 181, 61, 53, 21, 166, 61, 70, 94, 58, 62, 58, 223, 177, 60, 5, 234, 21, 62, 28, 203, 3, 63, 248, 86, 24, 59, 38, 145, 73, 62, 29, 190, 179, 60, 148, 122, 91, 60, 251, 237, 174, 60, 203, 161, 221, 189, 193, 24, 3, 62, 113, 244, 150, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 219, 13, 61, 249, 126, 108, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {163, 199, 115, 63, 156, 205, 196, 61, 7, 232, 191, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 157, 203, 63, 176, 147, 144, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}