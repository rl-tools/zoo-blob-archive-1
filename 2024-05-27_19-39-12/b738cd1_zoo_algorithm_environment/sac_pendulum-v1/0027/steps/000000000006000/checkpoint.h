// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 68, 77, 62, 192, 216, 236, 190, 221, 87, 187, 62, 21, 181, 91, 190, 146, 83, 152, 191, 186, 131, 204, 190, 99, 122, 50, 190, 220, 126, 5, 62, 246, 162, 46, 190, 56, 1, 157, 62, 73, 201, 32, 62, 94, 131, 33, 63, 246, 113, 43, 191, 159, 95, 99, 63, 165, 84, 218, 61, 45, 104, 127, 61, 110, 35, 185, 191, 203, 94, 199, 190, 22, 202, 85, 62, 19, 213, 228, 190, 36, 158, 12, 190, 166, 55, 25, 63, 216, 92, 104, 190, 213, 192, 148, 189, 239, 75, 194, 190, 147, 113, 50, 191, 153, 239, 140, 190, 127, 121, 6, 191, 174, 25, 184, 62, 37, 181, 166, 190, 152, 230, 201, 62, 225, 166, 157, 191, 29, 182, 197, 190, 192, 75, 31, 191, 67, 163, 173, 63, 51, 166, 153, 62, 179, 125, 212, 190, 154, 140, 238, 190, 16, 204, 205, 61, 143, 169, 158, 62, 209, 65, 60, 191, 45, 18, 220, 62, 206, 214, 36, 191, 19, 64, 47, 61, 183, 242, 130, 61, 242, 255, 184, 190, 148, 26, 195, 62, 229, 212, 40, 63, 141, 183, 236, 62, 243, 215, 255, 189, 71, 170, 233, 189, 22, 128, 21, 190, 255, 65, 131, 191, 172, 94, 232, 62, 245, 71, 137, 62, 235, 93, 117, 190, 86, 251, 24, 191, 158, 219, 148, 190, 120, 39, 93, 190, 63, 112, 214, 61, 82, 69, 186, 62, 176, 170, 20, 191, 144, 98, 146, 190, 168, 26, 206, 62, 195, 191, 44, 190, 23, 227, 121, 190, 203, 160, 179, 62, 149, 127, 254, 61, 15, 86, 41, 62, 159, 86, 120, 190, 59, 108, 65, 63, 161, 173, 54, 62, 207, 160, 223, 62, 37, 150, 22, 63, 66, 147, 66, 62, 144, 81, 13, 191, 211, 206, 192, 190, 249, 89, 78, 63, 141, 194, 14, 191, 254, 75, 72, 63, 184, 221, 239, 62, 150, 202, 119, 63, 241, 113, 100, 63, 166, 232, 248, 62, 252, 159, 2, 63, 208, 124, 2, 63, 17, 123, 153, 189, 231, 173, 40, 63, 187, 213, 26, 191, 230, 1, 34, 62, 169, 238, 206, 62, 30, 125, 191, 190, 3, 166, 146, 62, 75, 226, 86, 62, 96, 100, 206, 190, 65, 43, 147, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 250, 6, 191, 255, 14, 171, 62, 67, 141, 50, 191, 104, 6, 103, 189, 218, 156, 28, 63, 52, 78, 29, 62, 127, 152, 92, 62, 61, 56, 3, 59, 232, 54, 173, 190, 194, 152, 47, 62, 34, 119, 231, 62, 84, 151, 205, 61, 145, 118, 198, 62, 200, 163, 38, 60, 250, 254, 210, 62, 89, 208, 67, 190, 189, 14, 206, 62, 193, 151, 93, 190, 117, 188, 133, 62, 77, 199, 10, 190, 13, 169, 200, 190, 35, 185, 205, 190, 183, 66, 20, 63, 110, 56, 212, 62, 210, 208, 174, 189, 44, 125, 42, 191, 119, 164, 199, 190, 76, 163, 195, 62, 220, 42, 70, 62, 97, 190, 165, 62, 204, 4, 105, 62, 103, 81, 43, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 202, 206, 61, 163, 176, 246, 61, 70, 176, 233, 188, 226, 233, 114, 189, 72, 78, 120, 189, 145, 212, 8, 62, 143, 173, 187, 61, 42, 51, 141, 61, 200, 193, 223, 189, 213, 13, 242, 60, 185, 241, 170, 61, 160, 96, 67, 60, 43, 139, 50, 62, 55, 214, 198, 189, 216, 137, 128, 189, 94, 15, 9, 61, 15, 221, 35, 190, 32, 92, 169, 61, 184, 165, 215, 61, 234, 59, 13, 190, 198, 110, 14, 189, 163, 223, 201, 61, 57, 181, 70, 62, 59, 29, 8, 62, 255, 52, 116, 62, 202, 123, 38, 62, 11, 255, 147, 61, 66, 207, 28, 62, 220, 133, 121, 190, 150, 144, 27, 189, 12, 245, 198, 189, 141, 254, 95, 62, 98, 244, 101, 62, 163, 10, 23, 62, 100, 84, 139, 61, 221, 12, 85, 190, 87, 65, 64, 190, 116, 149, 88, 62, 180, 187, 96, 60, 115, 93, 172, 61, 207, 235, 137, 61, 64, 189, 144, 61, 218, 36, 167, 61, 20, 121, 34, 191, 209, 47, 226, 62, 225, 29, 96, 62, 57, 248, 252, 59, 201, 192, 46, 61, 226, 37, 156, 62, 249, 232, 124, 62, 45, 31, 155, 61, 2, 229, 26, 62, 19, 201, 196, 61, 196, 107, 217, 189, 128, 235, 200, 189, 64, 174, 58, 191, 42, 16, 125, 191, 163, 255, 74, 189, 111, 69, 215, 190, 164, 195, 249, 190, 247, 45, 188, 189, 129, 91, 205, 61, 196, 220, 204, 62, 25, 9, 115, 62, 180, 29, 22, 62, 36, 139, 20, 59, 204, 235, 9, 190, 127, 193, 28, 190, 226, 215, 19, 191, 159, 108, 202, 189, 158, 191, 50, 62, 196, 93, 89, 62, 56, 230, 45, 62, 88, 22, 110, 62, 169, 141, 212, 189, 13, 36, 43, 191, 89, 19, 128, 190, 85, 43, 234, 61, 85, 191, 123, 190, 208, 112, 128, 190, 206, 209, 65, 62, 239, 64, 95, 190, 14, 19, 187, 61, 107, 94, 213, 189, 7, 23, 138, 190, 152, 148, 252, 187, 6, 229, 140, 62, 46, 117, 104, 190, 254, 13, 192, 188, 98, 53, 61, 61, 9, 197, 61, 190, 4, 70, 142, 62, 207, 77, 170, 62, 253, 3, 91, 62, 214, 88, 9, 62, 245, 82, 6, 62, 126, 216, 58, 189, 143, 235, 214, 61, 216, 183, 167, 189, 27, 98, 13, 61, 14, 181, 201, 190, 81, 107, 41, 62, 20, 45, 220, 61, 39, 141, 131, 62, 122, 66, 21, 190, 188, 47, 10, 60, 144, 31, 70, 62, 67, 233, 81, 191, 154, 92, 214, 61, 156, 67, 106, 62, 229, 43, 103, 190, 9, 27, 25, 190, 243, 53, 81, 62, 15, 36, 119, 62, 26, 230, 84, 62, 110, 104, 60, 190, 79, 191, 195, 61, 179, 196, 238, 187, 137, 119, 146, 60, 18, 205, 15, 191, 12, 117, 128, 190, 186, 99, 131, 190, 69, 243, 145, 190, 168, 172, 24, 189, 223, 174, 18, 62, 3, 136, 12, 62, 157, 173, 221, 62, 98, 142, 4, 62, 105, 108, 99, 190, 156, 237, 134, 60, 242, 241, 170, 189, 98, 62, 88, 190, 81, 90, 164, 60, 106, 226, 231, 61, 130, 128, 34, 62, 99, 86, 21, 189, 94, 130, 7, 62, 172, 172, 160, 61, 234, 49, 111, 60, 38, 179, 145, 61, 28, 212, 147, 61, 219, 244, 253, 60, 109, 129, 102, 62, 150, 11, 136, 61, 24, 170, 106, 62, 215, 130, 207, 61, 143, 225, 23, 62, 180, 147, 225, 188, 216, 206, 42, 190, 207, 44, 236, 189, 28, 77, 242, 61, 158, 67, 158, 61, 172, 140, 154, 61, 242, 240, 24, 62, 26, 23, 40, 190, 84, 115, 195, 61, 106, 88, 26, 62, 46, 126, 24, 189, 0, 57, 138, 61, 238, 198, 186, 61, 111, 1, 186, 61, 151, 79, 5, 61, 198, 158, 73, 190, 230, 87, 59, 62, 114, 121, 232, 189, 253, 99, 5, 190, 228, 182, 90, 190, 23, 168, 54, 191, 129, 123, 231, 60, 169, 126, 107, 62, 28, 97, 187, 190, 172, 163, 167, 60, 50, 143, 165, 190, 206, 77, 232, 61, 128, 17, 151, 190, 172, 57, 132, 189, 35, 140, 3, 191, 4, 0, 109, 60, 158, 122, 5, 62, 94, 87, 0, 190, 219, 6, 253, 189, 50, 109, 251, 60, 71, 164, 95, 190, 56, 10, 7, 189, 121, 183, 166, 62, 4, 170, 57, 190, 107, 126, 187, 61, 46, 233, 75, 62, 204, 235, 7, 63, 178, 160, 2, 62, 102, 18, 144, 61, 30, 68, 154, 61, 74, 202, 142, 188, 31, 215, 175, 61, 123, 38, 75, 60, 104, 9, 143, 61, 69, 33, 232, 189, 61, 26, 186, 189, 186, 236, 44, 61, 206, 156, 131, 190, 18, 92, 120, 62, 148, 211, 129, 62, 251, 141, 85, 189, 93, 41, 183, 190, 149, 45, 76, 189, 3, 176, 224, 189, 12, 83, 234, 61, 201, 222, 131, 190, 45, 217, 228, 189, 70, 30, 96, 190, 133, 18, 35, 61, 120, 236, 191, 62, 123, 254, 177, 190, 85, 155, 144, 190, 5, 183, 82, 62, 238, 226, 39, 188, 101, 221, 158, 62, 139, 124, 168, 190, 48, 102, 46, 190, 197, 161, 139, 62, 229, 58, 217, 189, 10, 51, 134, 60, 136, 242, 126, 189, 125, 141, 6, 188, 176, 187, 137, 190, 176, 150, 145, 189, 125, 143, 55, 62, 24, 59, 97, 190, 97, 45, 25, 186, 36, 175, 56, 61, 15, 231, 57, 189, 210, 5, 45, 190, 190, 22, 40, 62, 201, 13, 244, 61, 69, 143, 24, 189, 1, 46, 156, 61, 204, 24, 167, 61, 46, 191, 1, 190, 212, 154, 177, 61, 156, 245, 182, 61, 169, 88, 62, 61, 72, 182, 161, 190, 20, 235, 141, 189, 188, 45, 32, 190, 97, 94, 141, 189, 211, 164, 133, 189, 167, 95, 76, 62, 75, 99, 110, 189, 178, 30, 130, 62, 183, 25, 57, 190, 138, 132, 17, 62, 136, 84, 135, 61, 54, 62, 172, 188, 57, 152, 45, 190, 180, 202, 5, 61, 109, 231, 74, 62, 81, 86, 228, 188, 224, 210, 221, 188, 137, 147, 14, 61, 167, 151, 187, 188, 166, 48, 215, 190, 78, 246, 24, 62, 127, 64, 231, 189, 129, 115, 154, 62, 208, 4, 216, 59, 55, 52, 77, 189, 234, 190, 49, 62, 199, 249, 106, 191, 136, 230, 24, 62, 120, 123, 233, 62, 71, 193, 68, 190, 173, 75, 38, 190, 216, 17, 182, 62, 121, 1, 206, 61, 193, 86, 39, 62, 35, 194, 209, 59, 128, 35, 26, 62, 250, 33, 134, 60, 196, 236, 35, 62, 199, 254, 155, 190, 101, 101, 211, 190, 36, 28, 57, 190, 25, 16, 219, 190, 90, 233, 71, 190, 183, 176, 86, 62, 233, 61, 162, 62, 219, 252, 171, 62, 207, 104, 189, 61, 91, 82, 167, 59, 198, 193, 253, 186, 203, 219, 103, 62, 108, 220, 88, 62, 13, 108, 23, 190, 218, 210, 2, 60, 240, 47, 223, 61, 192, 3, 168, 190, 212, 59, 195, 61, 91, 168, 201, 60, 137, 216, 8, 62, 80, 35, 127, 189, 175, 174, 41, 190, 166, 57, 229, 60, 41, 202, 136, 190, 72, 203, 144, 61, 111, 79, 172, 190, 251, 193, 78, 190, 44, 201, 116, 62, 138, 112, 129, 61, 136, 128, 17, 191, 221, 140, 147, 190, 199, 121, 118, 62, 148, 82, 86, 61, 49, 156, 196, 62, 26, 211, 44, 189, 196, 131, 115, 189, 143, 78, 247, 62, 127, 9, 67, 62, 208, 51, 215, 189, 129, 67, 26, 190, 249, 127, 144, 61, 163, 119, 20, 62, 240, 121, 82, 62, 242, 113, 136, 190, 229, 180, 37, 62, 99, 144, 49, 61, 129, 150, 235, 61, 32, 127, 172, 61, 202, 122, 158, 60, 95, 222, 192, 60, 58, 82, 241, 188, 205, 200, 150, 62, 54, 216, 207, 189, 54, 225, 128, 61, 41, 175, 69, 190, 204, 225, 130, 62, 244, 18, 247, 61, 202, 109, 191, 189, 43, 42, 170, 189, 29, 83, 38, 188, 11, 122, 101, 187, 8, 221, 25, 62, 29, 116, 174, 61, 50, 220, 139, 190, 190, 12, 38, 62, 174, 234, 181, 189, 160, 171, 46, 62, 23, 89, 104, 61, 170, 74, 126, 190, 80, 48, 4, 191, 41, 92, 29, 62, 224, 88, 68, 61, 243, 22, 8, 62, 78, 166, 35, 189, 30, 252, 92, 190, 104, 246, 78, 190, 52, 129, 236, 190, 91, 26, 204, 189, 154, 251, 134, 190, 188, 239, 26, 62, 210, 134, 246, 61, 202, 53, 65, 190, 78, 115, 130, 60, 184, 167, 133, 189, 200, 98, 143, 189, 124, 12, 255, 58, 21, 137, 138, 62, 180, 3, 14, 62, 24, 202, 154, 188, 93, 51, 54, 62, 162, 207, 173, 61, 188, 93, 141, 61, 151, 76, 72, 189, 31, 234, 13, 190, 203, 11, 19, 190, 16, 158, 103, 62, 173, 67, 22, 190, 24, 238, 129, 190, 50, 7, 208, 188, 108, 58, 178, 61, 226, 36, 218, 189, 103, 177, 61, 62, 0, 181, 220, 61, 34, 166, 71, 62, 30, 3, 3, 62, 86, 198, 95, 190, 229, 155, 242, 190, 27, 37, 226, 60, 173, 242, 24, 189, 234, 243, 57, 62, 96, 17, 67, 61, 137, 0, 33, 62, 101, 41, 14, 189, 98, 5, 100, 189, 163, 248, 248, 188, 213, 107, 35, 190, 160, 240, 120, 62, 21, 242, 171, 190, 42, 168, 26, 190, 239, 64, 94, 189, 251, 96, 153, 188, 41, 16, 230, 61, 185, 211, 104, 190, 204, 225, 96, 189, 83, 177, 145, 188, 203, 130, 32, 190, 225, 159, 49, 62, 0, 183, 11, 189, 28, 213, 187, 60, 122, 93, 79, 61, 152, 146, 33, 190, 7, 88, 0, 61, 116, 225, 112, 62, 129, 84, 225, 189, 76, 8, 209, 189, 114, 29, 190, 190, 28, 243, 55, 190, 178, 114, 47, 190, 44, 253, 168, 61, 67, 138, 73, 188, 13, 125, 149, 61, 220, 187, 135, 189, 51, 70, 235, 189, 149, 242, 23, 62, 246, 11, 88, 190, 63, 155, 117, 60, 7, 190, 20, 62, 38, 231, 248, 61, 90, 232, 34, 190, 84, 127, 70, 62, 89, 228, 132, 61, 98, 30, 63, 187, 42, 232, 164, 61, 44, 113, 31, 190, 85, 215, 58, 61, 116, 86, 204, 60, 200, 122, 161, 189, 250, 155, 75, 187, 202, 201, 87, 190, 113, 205, 69, 61, 197, 29, 188, 61, 86, 144, 144, 62, 156, 16, 172, 189, 213, 206, 48, 62, 2, 167, 66, 62, 161, 23, 55, 190, 100, 17, 177, 59, 183, 167, 91, 61, 242, 205, 96, 62, 243, 4, 125, 189, 131, 99, 29, 190, 199, 97, 129, 190, 67, 115, 193, 190, 75, 171, 79, 62, 158, 93, 147, 191, 185, 160, 94, 191, 224, 97, 32, 189, 227, 86, 65, 191, 148, 208, 37, 62, 44, 121, 139, 191, 48, 27, 150, 62, 77, 164, 62, 189, 116, 183, 236, 61, 142, 239, 70, 62, 211, 10, 77, 189, 42, 246, 36, 191, 101, 175, 172, 61, 48, 199, 171, 190, 217, 254, 140, 190, 125, 112, 196, 61, 87, 47, 253, 61, 15, 203, 91, 188, 164, 176, 201, 62, 0, 28, 18, 61, 66, 112, 26, 62, 116, 3, 92, 62, 252, 24, 81, 190, 66, 243, 246, 190, 242, 88, 41, 191, 176, 81, 253, 189, 25, 29, 249, 190, 105, 154, 88, 190, 108, 39, 11, 190, 180, 245, 18, 190, 59, 236, 17, 189, 42, 206, 106, 191, 85, 229, 88, 190, 77, 149, 237, 61, 249, 95, 166, 189, 36, 250, 55, 190, 0, 27, 109, 190, 151, 143, 79, 61, 89, 225, 108, 191, 67, 67, 1, 191, 253, 121, 229, 189, 231, 159, 164, 60, 162, 71, 199, 190, 86, 41, 139, 62, 176, 17, 185, 189, 46, 206, 16, 190, 110, 194, 173, 190, 15, 224, 243, 190, 209, 147, 157, 189, 153, 158, 175, 59, 159, 151, 254, 190, 147, 69, 110, 61, 53, 100, 60, 190, 113, 225, 158, 188, 60, 122, 158, 61, 209, 57, 141, 61, 64, 111, 197, 61, 181, 30, 218, 189, 253, 202, 32, 62, 174, 36, 44, 190, 21, 222, 64, 61, 237, 240, 37, 189, 14, 101, 165, 190, 240, 145, 52, 62, 168, 158, 246, 188, 30, 63, 19, 61, 54, 123, 54, 62, 229, 192, 166, 189, 184, 163, 184, 61, 32, 37, 46, 61, 199, 18, 156, 62, 194, 151, 3, 62, 36, 188, 232, 62, 166, 222, 100, 60, 172, 92, 46, 62, 172, 86, 50, 62, 173, 50, 151, 62, 87, 45, 176, 61, 200, 180, 90, 190, 5, 64, 33, 189, 112, 245, 50, 62, 205, 26, 11, 187, 218, 149, 243, 188, 21, 118, 160, 190, 245, 3, 32, 187, 165, 84, 220, 188, 75, 98, 183, 190, 44, 77, 216, 61, 160, 106, 105, 62, 17, 51, 200, 62, 242, 146, 108, 189, 58, 228, 144, 189, 43, 30, 12, 62, 103, 219, 143, 189, 176, 200, 38, 190, 237, 248, 42, 62, 2, 32, 142, 62, 182, 34, 34, 61, 195, 36, 131, 61, 174, 204, 192, 61, 187, 149, 35, 61, 220, 136, 158, 60, 10, 93, 218, 60, 176, 59, 247, 62, 183, 41, 39, 191, 232, 49, 21, 62, 38, 8, 5, 190, 21, 101, 56, 190, 197, 127, 132, 190, 105, 244, 251, 60, 20, 237, 19, 63, 200, 185, 23, 190, 76, 214, 243, 189, 87, 30, 133, 62, 199, 138, 175, 62, 201, 128, 159, 62, 170, 113, 224, 190, 87, 170, 145, 188, 24, 65, 165, 61, 207, 139, 90, 190, 119, 146, 146, 60, 252, 98, 11, 190, 144, 51, 120, 61, 253, 140, 7, 186, 178, 149, 33, 190, 172, 154, 85, 61, 244, 62, 9, 189, 153, 134, 210, 61, 200, 204, 178, 189, 173, 131, 139, 61, 253, 136, 190, 61, 102, 142, 165, 61, 224, 34, 38, 62, 85, 253, 148, 61, 59, 141, 144, 186, 81, 183, 48, 62, 75, 192, 255, 189, 66, 201, 1, 62, 196, 225, 35, 61, 138, 95, 229, 188, 85, 241, 0, 62, 165, 215, 111, 61, 147, 221, 192, 189, 216, 241, 116, 60, 255, 216, 90, 186, 150, 79, 82, 61, 103, 11, 150, 189, 62, 91, 186, 60, 157, 22, 238, 189, 62, 64, 216, 189, 90, 191, 174, 60, 239, 47, 147, 190, 29, 124, 212, 61, 1, 253, 55, 190, 224, 200, 92, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 152, 220, 62, 189, 30, 12, 17, 188, 42, 62, 83, 62, 189, 156, 218, 60, 105, 146, 195, 190, 237, 83, 86, 61, 140, 169, 179, 189, 222, 116, 176, 61, 125, 52, 170, 61, 245, 19, 61, 190, 48, 207, 217, 61, 46, 132, 158, 190, 14, 43, 248, 189, 113, 200, 3, 62, 117, 121, 194, 189, 56, 163, 191, 189, 215, 210, 207, 61, 140, 110, 144, 62, 131, 160, 171, 61, 255, 20, 185, 61, 50, 31, 57, 61, 139, 231, 140, 62, 83, 244, 25, 190, 145, 148, 138, 190, 52, 115, 226, 190, 180, 180, 184, 188, 167, 6, 127, 190, 146, 81, 227, 189, 112, 55, 177, 60, 147, 79, 190, 61, 246, 252, 88, 60, 58, 32, 241, 61, 139, 178, 171, 189, 186, 231, 170, 61, 40, 71, 129, 190, 228, 249, 38, 61, 24, 87, 105, 62, 253, 62, 86, 62, 202, 126, 16, 61, 25, 178, 44, 62, 126, 250, 108, 188, 29, 159, 171, 189, 29, 225, 56, 62, 208, 133, 154, 190, 137, 137, 144, 62, 67, 13, 109, 190, 33, 211, 242, 61, 101, 253, 80, 191, 185, 68, 207, 61, 141, 92, 222, 61, 78, 193, 134, 189, 204, 184, 126, 61, 78, 130, 242, 189, 115, 6, 163, 186, 95, 114, 68, 190, 195, 215, 84, 61, 190, 73, 145, 61, 189, 110, 90, 191, 165, 50, 74, 191, 27, 234, 9, 191, 142, 52, 131, 190, 219, 181, 87, 62, 185, 17, 249, 189, 250, 96, 156, 59, 1, 5, 20, 190, 145, 58, 130, 185, 137, 254, 251, 61, 249, 200, 44, 189, 94, 20, 160, 62, 50, 47, 68, 191, 76, 230, 217, 190, 104, 20, 66, 190, 234, 146, 52, 191, 148, 48, 95, 62, 39, 134, 83, 191, 85, 223, 218, 61, 118, 100, 156, 188, 24, 180, 206, 61, 117, 105, 152, 62, 20, 156, 178, 187, 35, 19, 142, 188, 141, 88, 11, 62, 239, 182, 124, 59, 191, 44, 118, 189, 167, 193, 159, 190, 225, 153, 169, 189, 46, 211, 14, 189, 194, 189, 101, 60, 118, 33, 97, 190, 43, 182, 4, 62, 233, 2, 98, 62, 69, 99, 138, 190, 53, 222, 10, 190, 10, 237, 135, 187, 29, 237, 232, 61, 39, 221, 68, 190, 10, 129, 128, 62, 162, 37, 7, 61, 200, 227, 83, 62, 57, 203, 37, 188, 10, 203, 51, 191, 65, 138, 218, 189, 140, 37, 38, 62, 252, 240, 171, 187, 154, 35, 35, 190, 75, 23, 223, 188, 134, 42, 60, 189, 205, 113, 37, 191, 156, 217, 128, 190, 47, 139, 174, 62, 104, 146, 69, 191, 5, 125, 226, 189, 232, 156, 240, 61, 246, 227, 33, 62, 31, 48, 55, 62, 16, 187, 92, 59, 177, 176, 216, 188, 55, 158, 195, 62, 131, 115, 14, 190, 154, 48, 64, 191, 220, 71, 12, 191, 87, 221, 88, 60, 71, 203, 219, 189, 254, 176, 207, 190, 4, 90, 25, 62, 253, 202, 140, 62, 151, 116, 160, 62, 111, 120, 14, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 123, 16, 10, 62, 60, 1, 171, 61, 254, 33, 5, 62, 90, 65, 74, 62, 153, 190, 169, 61, 216, 135, 47, 189, 111, 104, 1, 62, 214, 253, 20, 190, 225, 5, 14, 62, 34, 91, 2, 62, 45, 61, 80, 189, 111, 52, 202, 190, 100, 217, 7, 62, 65, 72, 165, 190, 168, 122, 233, 61, 184, 213, 250, 190, 175, 119, 39, 190, 145, 8, 182, 60, 247, 200, 0, 62, 90, 220, 120, 62, 178, 33, 9, 191, 189, 95, 191, 190, 251, 86, 151, 61, 213, 191, 237, 60, 14, 8, 135, 62, 56, 43, 47, 191, 239, 205, 3, 191, 81, 145, 177, 62, 182, 219, 158, 61, 250, 12, 24, 190, 114, 160, 162, 189, 162, 3, 152, 60, 39, 22, 216, 188, 73, 206, 252, 189, 79, 169, 241, 189, 193, 145, 26, 190, 21, 134, 177, 61, 238, 102, 71, 191, 102, 94, 179, 190, 55, 26, 40, 62, 76, 12, 69, 191, 39, 21, 144, 62, 153, 87, 69, 191, 162, 76, 74, 62, 222, 198, 69, 62, 255, 223, 136, 59, 79, 163, 83, 62, 46, 163, 68, 60, 232, 115, 128, 62, 253, 119, 83, 62, 202, 236, 243, 185, 175, 42, 207, 189, 240, 69, 224, 189, 156, 200, 3, 62, 0, 146, 11, 190, 185, 237, 167, 61, 18, 109, 110, 190, 120, 56, 56, 62, 167, 106, 16, 60, 2, 243, 45, 190, 242, 201, 6, 190, 150, 117, 151, 190, 122, 228, 46, 62, 135, 92, 42, 190, 140, 67, 143, 61, 58, 1, 119, 62, 52, 198, 62, 62, 215, 255, 213, 62, 171, 108, 24, 190, 104, 6, 204, 61, 241, 63, 27, 190, 17, 28, 179, 189, 128, 188, 8, 62, 173, 98, 44, 62, 1, 5, 79, 187, 51, 78, 26, 190, 26, 13, 40, 61, 171, 242, 146, 190, 62, 166, 140, 189, 32, 190, 3, 190, 174, 14, 108, 58, 2, 231, 235, 189, 80, 48, 127, 61, 161, 245, 32, 62, 158, 18, 52, 190, 145, 232, 8, 190, 19, 7, 55, 190, 226, 197, 240, 60, 64, 149, 175, 62, 99, 51, 28, 190, 247, 178, 130, 190, 44, 101, 174, 62, 21, 198, 97, 189, 111, 140, 62, 61, 8, 130, 38, 189, 193, 88, 104, 62, 85, 64, 42, 190, 191, 253, 249, 189, 31, 155, 2, 62, 167, 88, 111, 189, 8, 183, 221, 61, 178, 4, 22, 62, 200, 9, 46, 190, 125, 102, 240, 61, 159, 29, 225, 60, 55, 116, 35, 190, 224, 51, 49, 190, 50, 40, 152, 189, 152, 63, 3, 190, 61, 108, 143, 61, 129, 245, 184, 189, 145, 129, 208, 189, 6, 105, 149, 61, 124, 177, 154, 61, 159, 161, 181, 61, 23, 86, 21, 62, 6, 0, 183, 189, 141, 105, 201, 61, 64, 203, 35, 189, 99, 238, 125, 189, 152, 134, 25, 190, 124, 196, 192, 60, 160, 199, 138, 61, 184, 109, 178, 60, 55, 11, 26, 62, 151, 30, 188, 189, 69, 126, 24, 190, 61, 235, 190, 61, 132, 77, 36, 61, 32, 129, 189, 189, 236, 254, 240, 61, 87, 228, 109, 189, 125, 67, 3, 190, 139, 38, 153, 61, 57, 118, 192, 189, 217, 142, 202, 61, 40, 25, 123, 189, 237, 209, 219, 61, 11, 69, 229, 189, 205, 59, 153, 60, 240, 222, 192, 189, 30, 151, 100, 60, 119, 101, 110, 189, 57, 4, 18, 190, 160, 220, 181, 61, 233, 9, 243, 61, 245, 31, 74, 189, 247, 8, 178, 61, 217, 81, 27, 62, 98, 15, 39, 190, 112, 15, 23, 62, 227, 142, 61, 190, 97, 246, 5, 189, 193, 182, 17, 60, 37, 10, 250, 61, 191, 133, 232, 60, 150, 101, 38, 62, 113, 133, 7, 190, 213, 111, 15, 62, 75, 231, 62, 190, 21, 206, 144, 190, 1, 195, 164, 190, 165, 83, 212, 190, 41, 52, 10, 191, 106, 216, 176, 62, 159, 148, 44, 191, 90, 87, 158, 190, 142, 199, 73, 62, 58, 142, 11, 191, 254, 246, 215, 189, 243, 192, 38, 191, 87, 52, 255, 61, 38, 109, 73, 62, 246, 98, 147, 62, 60, 222, 88, 62, 3, 121, 207, 61, 158, 8, 60, 188, 161, 78, 169, 62, 254, 78, 26, 190, 190, 132, 15, 189, 140, 247, 50, 190, 175, 30, 140, 190, 108, 146, 31, 190, 131, 147, 51, 62, 138, 147, 198, 190, 129, 172, 32, 62, 140, 216, 83, 62, 184, 4, 147, 190, 178, 100, 254, 189, 50, 229, 199, 61, 136, 134, 7, 61, 127, 34, 82, 190, 244, 101, 189, 60, 23, 192, 126, 61, 146, 124, 134, 189, 236, 201, 137, 61, 238, 15, 99, 60, 141, 196, 48, 62, 115, 135, 25, 190, 145, 225, 134, 189, 106, 6, 160, 60, 17, 92, 226, 188, 53, 58, 28, 62, 56, 218, 94, 62, 63, 10, 174, 62, 193, 155, 156, 190, 41, 155, 146, 62, 46, 116, 23, 61, 22, 36, 238, 61, 92, 72, 91, 61, 225, 156, 81, 189, 76, 51, 38, 62, 5, 202, 152, 60, 202, 204, 203, 61, 91, 251, 165, 190, 145, 253, 105, 60, 61, 213, 167, 189, 1, 53, 81, 187, 50, 241, 49, 190, 225, 183, 201, 189, 108, 168, 138, 190, 247, 172, 76, 62, 66, 217, 3, 190, 6, 42, 172, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 7, 86, 189, 211, 181, 211, 187, 73, 183, 46, 189, 115, 147, 152, 60, 72, 24, 146, 62, 111, 164, 148, 190, 142, 25, 41, 62, 130, 95, 11, 62, 29, 29, 27, 188, 29, 232, 169, 189, 93, 57, 17, 190, 103, 234, 182, 62, 79, 56, 33, 61, 3, 113, 85, 62, 173, 74, 96, 62, 36, 131, 33, 62, 57, 63, 244, 61, 142, 229, 147, 62, 254, 71, 238, 60, 165, 101, 30, 61, 81, 164, 14, 190, 40, 7, 189, 60, 123, 248, 14, 190, 241, 70, 154, 190, 213, 255, 160, 189, 27, 201, 27, 62, 12, 116, 197, 61, 194, 199, 50, 60, 66, 172, 81, 190, 146, 69, 23, 190, 31, 101, 59, 62, 186, 171, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 120, 232, 189, 199, 130, 209, 62, 173, 101, 227, 61, 239, 6, 167, 62, 106, 134, 120, 58, 71, 48, 141, 190, 177, 231, 210, 190, 231, 108, 212, 189, 238, 95, 178, 62, 64, 180, 200, 190, 245, 167, 10, 190, 63, 182, 95, 62, 139, 44, 136, 190, 252, 179, 208, 189, 25, 97, 94, 63, 232, 237, 128, 190, 79, 78, 95, 62, 198, 45, 3, 191, 224, 242, 236, 58, 247, 231, 216, 189, 138, 42, 27, 62, 97, 161, 193, 190, 56, 162, 6, 63, 162, 160, 162, 62, 54, 122, 145, 61, 252, 239, 238, 190, 11, 154, 223, 62, 79, 148, 159, 190, 21, 32, 108, 189, 155, 161, 157, 189, 129, 145, 51, 63, 19, 171, 39, 190, 92, 129, 221, 189, 231, 158, 172, 61, 247, 133, 14, 191, 85, 77, 129, 189, 3, 218, 72, 190, 94, 24, 212, 61, 31, 0, 118, 189, 76, 32, 0, 190, 82, 59, 141, 60, 218, 31, 179, 60, 221, 55, 55, 61, 183, 206, 167, 190, 26, 58, 3, 190, 52, 7, 46, 190, 152, 179, 149, 188, 80, 45, 7, 191, 222, 91, 77, 189, 12, 151, 241, 189, 109, 174, 96, 189, 53, 21, 166, 61, 97, 165, 26, 62, 38, 139, 196, 61, 252, 150, 88, 62, 37, 254, 161, 62, 248, 86, 24, 59, 142, 137, 215, 61, 5, 33, 36, 189, 175, 131, 176, 61, 120, 132, 221, 188, 114, 129, 222, 189, 58, 47, 46, 62, 192, 69, 176, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 74, 125, 61, 154, 0, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 136, 13, 192, 16, 228, 254, 191, 248, 195, 51, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {20, 193, 50, 63, 220, 122, 4, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}