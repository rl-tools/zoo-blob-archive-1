// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 123, 190, 62, 208, 226, 10, 191, 129, 57, 205, 62, 199, 139, 132, 189, 57, 153, 198, 191, 154, 158, 161, 190, 246, 199, 159, 190, 9, 75, 205, 61, 1, 141, 69, 190, 149, 165, 214, 62, 130, 254, 218, 61, 149, 24, 41, 63, 101, 61, 137, 191, 128, 182, 76, 63, 228, 141, 217, 61, 142, 222, 105, 62, 178, 10, 215, 191, 75, 106, 232, 190, 27, 157, 28, 189, 126, 138, 166, 190, 47, 243, 66, 190, 154, 71, 12, 63, 88, 83, 159, 190, 216, 187, 126, 190, 230, 51, 141, 190, 222, 147, 125, 191, 70, 247, 156, 190, 231, 83, 9, 191, 224, 107, 253, 62, 203, 9, 164, 190, 58, 220, 175, 62, 197, 20, 187, 191, 121, 142, 183, 190, 127, 63, 12, 190, 82, 94, 200, 63, 210, 180, 219, 62, 206, 165, 52, 191, 204, 136, 7, 191, 230, 61, 20, 62, 218, 185, 85, 62, 23, 26, 120, 191, 21, 240, 124, 62, 153, 2, 123, 191, 117, 163, 113, 189, 65, 97, 240, 61, 81, 235, 14, 191, 204, 105, 109, 63, 17, 131, 3, 63, 82, 211, 216, 62, 190, 150, 203, 189, 113, 179, 56, 190, 74, 46, 141, 190, 52, 169, 150, 191, 71, 106, 202, 62, 111, 218, 8, 62, 202, 168, 171, 189, 130, 155, 251, 190, 174, 202, 20, 191, 232, 246, 219, 190, 54, 136, 214, 187, 41, 204, 243, 62, 193, 163, 142, 191, 241, 86, 106, 190, 65, 230, 218, 62, 68, 32, 227, 190, 121, 197, 144, 190, 4, 61, 128, 62, 161, 199, 141, 62, 90, 32, 21, 61, 185, 79, 67, 190, 136, 220, 136, 63, 204, 53, 75, 62, 89, 93, 227, 62, 200, 144, 103, 63, 1, 29, 90, 62, 125, 202, 55, 191, 92, 210, 78, 62, 255, 253, 69, 63, 90, 196, 204, 190, 179, 160, 143, 63, 117, 154, 250, 62, 134, 227, 116, 63, 8, 222, 139, 63, 167, 138, 245, 62, 141, 206, 236, 62, 67, 21, 21, 63, 222, 131, 33, 190, 139, 188, 8, 63, 35, 5, 89, 191, 181, 188, 174, 61, 44, 222, 176, 62, 196, 217, 5, 191, 235, 37, 45, 62, 170, 243, 225, 61, 74, 194, 35, 191, 14, 128, 158, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 152, 38, 191, 215, 187, 157, 62, 120, 128, 82, 191, 23, 27, 207, 189, 24, 89, 33, 63, 153, 25, 14, 62, 61, 39, 29, 62, 184, 15, 3, 190, 213, 117, 52, 190, 131, 103, 151, 62, 248, 175, 146, 62, 16, 192, 182, 62, 142, 161, 254, 62, 150, 254, 79, 60, 154, 10, 12, 63, 228, 147, 86, 190, 182, 175, 187, 62, 71, 197, 176, 188, 204, 107, 158, 62, 159, 255, 221, 189, 135, 134, 152, 190, 131, 195, 215, 190, 60, 49, 1, 63, 185, 179, 197, 62, 131, 114, 47, 190, 133, 217, 241, 190, 141, 10, 78, 190, 210, 59, 157, 62, 47, 30, 225, 61, 79, 13, 119, 62, 176, 251, 135, 62, 193, 22, 244, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 122, 50, 62, 13, 1, 149, 61, 254, 151, 119, 189, 22, 249, 142, 59, 1, 97, 39, 190, 121, 226, 1, 62, 18, 72, 178, 61, 156, 230, 220, 61, 157, 174, 232, 189, 67, 241, 158, 60, 172, 198, 177, 61, 95, 96, 185, 188, 48, 189, 87, 62, 178, 94, 21, 61, 228, 165, 27, 190, 107, 229, 136, 60, 155, 151, 231, 189, 233, 63, 235, 61, 14, 21, 197, 61, 76, 167, 179, 189, 240, 202, 112, 189, 78, 137, 30, 62, 195, 222, 53, 62, 76, 168, 116, 61, 253, 214, 86, 62, 241, 36, 71, 62, 29, 96, 84, 61, 179, 134, 19, 62, 17, 223, 139, 190, 237, 204, 132, 61, 55, 152, 8, 189, 155, 27, 129, 62, 177, 182, 81, 62, 159, 94, 106, 62, 4, 149, 69, 61, 63, 143, 157, 190, 107, 42, 17, 190, 159, 155, 160, 62, 157, 20, 73, 61, 186, 164, 228, 61, 47, 113, 98, 61, 7, 202, 50, 189, 95, 207, 46, 62, 112, 191, 87, 191, 103, 146, 21, 63, 6, 16, 104, 62, 34, 74, 51, 62, 213, 23, 181, 61, 97, 102, 174, 62, 181, 207, 186, 62, 212, 205, 148, 61, 166, 134, 143, 62, 175, 95, 241, 61, 168, 199, 34, 190, 79, 95, 131, 189, 81, 84, 121, 191, 140, 175, 171, 191, 29, 172, 196, 186, 78, 95, 169, 190, 212, 15, 7, 191, 16, 168, 164, 189, 207, 210, 233, 61, 109, 22, 210, 62, 146, 69, 149, 62, 203, 87, 227, 62, 29, 229, 130, 60, 159, 132, 130, 189, 43, 190, 161, 189, 149, 70, 70, 191, 187, 86, 168, 189, 171, 221, 67, 62, 61, 188, 112, 62, 102, 34, 85, 62, 164, 16, 96, 62, 252, 215, 160, 189, 163, 115, 187, 191, 16, 149, 39, 190, 216, 231, 147, 61, 75, 232, 134, 191, 123, 66, 100, 190, 126, 202, 52, 62, 165, 19, 121, 189, 5, 218, 33, 62, 176, 53, 122, 191, 213, 235, 115, 190, 204, 93, 3, 62, 207, 147, 117, 62, 204, 0, 217, 190, 23, 131, 251, 189, 133, 59, 84, 62, 111, 40, 162, 190, 25, 85, 104, 62, 91, 187, 150, 62, 236, 141, 64, 62, 14, 21, 156, 61, 166, 57, 143, 61, 85, 6, 101, 189, 92, 72, 95, 61, 82, 212, 178, 189, 88, 143, 145, 189, 89, 203, 12, 191, 184, 202, 236, 61, 16, 210, 221, 61, 202, 191, 143, 62, 123, 208, 43, 190, 243, 19, 244, 189, 7, 131, 52, 62, 186, 214, 214, 191, 173, 127, 87, 62, 40, 120, 25, 62, 37, 159, 147, 190, 197, 113, 111, 190, 105, 202, 81, 62, 114, 56, 190, 62, 125, 84, 79, 62, 160, 87, 78, 190, 95, 2, 189, 61, 75, 166, 236, 188, 26, 10, 128, 61, 54, 113, 15, 191, 175, 21, 168, 190, 81, 234, 156, 190, 21, 186, 27, 191, 86, 190, 6, 189, 223, 3, 74, 62, 238, 57, 214, 61, 73, 248, 197, 62, 69, 14, 211, 61, 47, 55, 132, 190, 249, 0, 111, 189, 18, 102, 60, 190, 3, 29, 29, 190, 64, 142, 180, 60, 64, 51, 131, 61, 118, 95, 6, 62, 63, 176, 21, 60, 177, 28, 250, 61, 218, 139, 13, 189, 94, 137, 149, 59, 4, 203, 194, 61, 178, 118, 27, 62, 54, 149, 173, 61, 71, 207, 47, 62, 48, 142, 213, 61, 255, 2, 152, 62, 209, 245, 207, 61, 111, 137, 246, 61, 242, 69, 223, 188, 226, 185, 36, 190, 151, 198, 247, 188, 253, 79, 29, 62, 179, 16, 237, 61, 210, 66, 22, 61, 236, 83, 20, 62, 36, 224, 24, 190, 141, 111, 241, 61, 185, 200, 48, 62, 33, 204, 121, 61, 81, 72, 145, 61, 244, 68, 6, 62, 247, 141, 75, 62, 236, 71, 15, 191, 38, 237, 151, 189, 138, 187, 78, 62, 41, 56, 92, 190, 105, 234, 19, 191, 187, 195, 159, 190, 96, 215, 52, 191, 89, 57, 44, 62, 21, 201, 202, 62, 175, 23, 65, 191, 182, 243, 184, 60, 175, 193, 229, 190, 193, 46, 11, 62, 94, 2, 246, 190, 13, 76, 95, 189, 50, 217, 195, 190, 169, 118, 121, 60, 5, 121, 129, 62, 215, 73, 224, 189, 145, 161, 37, 191, 170, 28, 63, 190, 199, 78, 79, 190, 45, 9, 135, 188, 127, 54, 245, 62, 121, 58, 2, 190, 14, 75, 246, 61, 238, 193, 145, 62, 191, 72, 55, 63, 5, 214, 79, 62, 254, 139, 230, 61, 93, 141, 59, 61, 143, 21, 94, 190, 79, 219, 100, 188, 136, 86, 91, 61, 14, 145, 27, 62, 89, 29, 181, 188, 102, 2, 64, 190, 27, 205, 168, 188, 247, 247, 159, 190, 12, 145, 157, 62, 197, 37, 145, 62, 29, 168, 222, 189, 238, 99, 85, 190, 21, 143, 24, 62, 75, 171, 1, 61, 215, 235, 158, 62, 170, 243, 221, 190, 126, 82, 230, 189, 236, 204, 142, 190, 191, 238, 82, 188, 196, 14, 25, 63, 216, 185, 28, 191, 196, 90, 8, 191, 118, 233, 68, 62, 225, 8, 116, 61, 229, 24, 179, 62, 65, 82, 23, 191, 30, 76, 151, 190, 97, 141, 149, 62, 33, 215, 165, 189, 237, 59, 34, 61, 110, 77, 196, 188, 220, 76, 43, 61, 59, 68, 2, 191, 46, 192, 131, 190, 43, 123, 174, 62, 61, 184, 47, 190, 12, 169, 74, 61, 255, 197, 217, 189, 55, 205, 146, 189, 162, 30, 216, 189, 54, 73, 140, 61, 56, 1, 52, 62, 11, 182, 163, 189, 102, 115, 201, 61, 29, 222, 62, 61, 6, 18, 107, 60, 79, 113, 184, 60, 37, 217, 182, 61, 132, 134, 2, 62, 12, 171, 255, 190, 0, 1, 35, 189, 63, 126, 168, 190, 9, 127, 181, 190, 204, 5, 64, 189, 111, 139, 118, 62, 125, 254, 6, 59, 130, 220, 128, 62, 249, 202, 110, 190, 203, 205, 217, 61, 32, 27, 186, 61, 49, 113, 162, 61, 33, 66, 219, 189, 170, 222, 124, 61, 222, 102, 98, 62, 158, 176, 245, 188, 25, 45, 241, 189, 149, 141, 197, 61, 235, 133, 7, 190, 249, 182, 20, 191, 163, 243, 120, 61, 28, 11, 238, 189, 165, 96, 170, 62, 221, 120, 136, 189, 171, 185, 40, 190, 24, 103, 13, 62, 189, 151, 215, 191, 142, 55, 88, 62, 202, 85, 196, 62, 119, 17, 162, 190, 47, 210, 117, 190, 18, 113, 182, 62, 7, 124, 130, 62, 96, 242, 39, 62, 87, 141, 251, 187, 218, 117, 12, 62, 89, 195, 167, 60, 37, 175, 75, 62, 104, 104, 155, 190, 55, 67, 2, 191, 2, 194, 99, 190, 42, 187, 54, 191, 255, 171, 77, 190, 38, 220, 148, 62, 81, 47, 143, 62, 108, 11, 150, 62, 169, 250, 145, 61, 117, 32, 153, 61, 169, 94, 151, 190, 195, 21, 122, 62, 138, 104, 130, 62, 8, 106, 183, 190, 101, 2, 134, 190, 120, 8, 8, 61, 223, 149, 165, 190, 102, 57, 13, 189, 93, 167, 160, 60, 151, 119, 220, 60, 54, 203, 16, 190, 78, 139, 123, 190, 197, 94, 32, 62, 171, 245, 241, 190, 216, 48, 35, 58, 238, 234, 154, 190, 57, 10, 75, 190, 38, 91, 75, 62, 124, 103, 209, 61, 188, 32, 133, 191, 47, 83, 21, 191, 229, 217, 99, 62, 67, 163, 141, 189, 130, 123, 202, 62, 52, 114, 14, 189, 254, 250, 4, 190, 124, 32, 3, 63, 81, 26, 96, 62, 128, 206, 219, 188, 68, 230, 117, 189, 140, 54, 212, 61, 83, 183, 146, 62, 233, 15, 83, 62, 236, 219, 176, 190, 183, 86, 100, 62, 237, 249, 3, 61, 11, 221, 22, 62, 182, 49, 0, 62, 170, 247, 123, 61, 6, 228, 219, 186, 233, 149, 180, 61, 73, 111, 141, 62, 24, 143, 117, 189, 40, 37, 147, 61, 83, 234, 23, 190, 24, 110, 138, 62, 15, 170, 80, 62, 32, 150, 21, 190, 233, 201, 215, 188, 16, 44, 141, 61, 243, 58, 251, 61, 122, 10, 119, 62, 215, 205, 144, 62, 192, 226, 214, 190, 233, 98, 37, 62, 115, 124, 242, 188, 132, 183, 145, 62, 162, 70, 35, 62, 96, 39, 175, 190, 164, 183, 39, 191, 230, 61, 211, 61, 130, 185, 34, 61, 151, 118, 142, 61, 195, 238, 47, 61, 207, 97, 167, 190, 221, 223, 61, 190, 185, 230, 217, 190, 18, 97, 254, 189, 64, 109, 255, 190, 44, 124, 138, 61, 83, 74, 125, 61, 191, 133, 252, 190, 244, 89, 121, 189, 77, 94, 14, 190, 41, 90, 200, 190, 75, 99, 214, 61, 221, 70, 149, 62, 36, 65, 141, 62, 189, 57, 125, 61, 221, 62, 195, 61, 45, 140, 78, 62, 149, 113, 119, 60, 6, 131, 67, 62, 182, 252, 215, 189, 139, 109, 159, 188, 176, 60, 2, 62, 7, 196, 211, 190, 231, 145, 50, 191, 178, 112, 192, 61, 211, 225, 214, 61, 231, 64, 94, 190, 239, 201, 179, 61, 162, 100, 50, 61, 28, 216, 10, 62, 100, 141, 247, 61, 187, 25, 100, 190, 67, 96, 142, 191, 6, 113, 0, 191, 51, 49, 45, 191, 168, 169, 83, 62, 194, 205, 215, 190, 249, 0, 125, 62, 57, 231, 67, 62, 39, 95, 182, 190, 13, 241, 234, 61, 174, 10, 46, 190, 216, 40, 118, 62, 105, 164, 225, 189, 223, 143, 239, 189, 162, 214, 1, 61, 154, 76, 141, 190, 89, 156, 180, 62, 165, 193, 188, 190, 12, 184, 171, 61, 58, 87, 16, 62, 6, 164, 13, 191, 68, 204, 244, 60, 156, 8, 38, 61, 196, 246, 118, 61, 234, 185, 6, 190, 177, 210, 232, 190, 216, 10, 47, 190, 159, 254, 255, 61, 66, 116, 200, 61, 172, 162, 71, 62, 229, 103, 29, 191, 25, 137, 212, 190, 175, 234, 8, 190, 249, 151, 217, 60, 94, 134, 162, 189, 206, 188, 27, 62, 70, 45, 155, 189, 83, 137, 227, 189, 218, 252, 41, 62, 241, 162, 5, 190, 85, 43, 193, 60, 80, 235, 32, 62, 235, 229, 20, 62, 71, 25, 13, 190, 96, 113, 136, 62, 47, 181, 73, 62, 143, 73, 166, 189, 133, 126, 186, 61, 37, 154, 97, 189, 248, 49, 150, 61, 56, 65, 130, 61, 254, 179, 182, 188, 99, 227, 164, 187, 11, 159, 217, 189, 217, 143, 151, 61, 36, 109, 196, 61, 120, 112, 124, 62, 237, 232, 103, 189, 243, 134, 50, 62, 234, 193, 77, 62, 206, 112, 13, 190, 45, 205, 7, 62, 140, 146, 231, 61, 128, 86, 138, 62, 190, 132, 128, 190, 237, 116, 40, 62, 199, 97, 129, 190, 216, 237, 0, 191, 93, 130, 205, 61, 217, 255, 176, 191, 177, 124, 170, 191, 108, 230, 12, 189, 77, 65, 151, 191, 143, 248, 184, 60, 126, 226, 181, 191, 84, 173, 63, 62, 18, 198, 145, 189, 221, 59, 228, 189, 160, 1, 3, 62, 91, 117, 255, 189, 2, 76, 131, 191, 252, 4, 176, 188, 89, 150, 54, 191, 120, 158, 178, 190, 125, 112, 196, 61, 87, 47, 253, 61, 251, 239, 144, 189, 123, 211, 151, 62, 110, 208, 22, 61, 234, 218, 21, 189, 62, 144, 4, 62, 140, 192, 109, 190, 122, 156, 17, 191, 50, 37, 36, 191, 16, 86, 168, 190, 209, 182, 7, 191, 58, 146, 19, 188, 210, 72, 139, 190, 180, 245, 18, 190, 203, 22, 218, 61, 119, 236, 140, 191, 72, 227, 178, 190, 11, 169, 98, 61, 221, 48, 10, 190, 36, 250, 55, 190, 202, 172, 15, 190, 9, 138, 140, 187, 108, 125, 138, 191, 66, 186, 114, 190, 20, 21, 151, 187, 75, 46, 249, 188, 68, 43, 140, 190, 86, 190, 99, 62, 60, 70, 45, 60, 99, 32, 107, 190, 130, 35, 138, 190, 212, 111, 219, 191, 115, 127, 231, 190, 228, 8, 222, 188, 69, 66, 20, 191, 136, 219, 62, 61, 42, 9, 2, 189, 3, 244, 208, 189, 7, 167, 114, 61, 137, 241, 154, 187, 9, 151, 175, 61, 77, 155, 192, 189, 70, 10, 31, 62, 173, 114, 116, 190, 120, 212, 230, 60, 97, 23, 150, 189, 11, 199, 186, 190, 215, 194, 11, 62, 230, 180, 203, 189, 210, 195, 29, 189, 139, 177, 214, 61, 7, 161, 129, 189, 43, 241, 172, 189, 198, 101, 240, 59, 120, 168, 115, 62, 44, 242, 29, 62, 129, 77, 212, 62, 68, 41, 13, 61, 142, 172, 19, 62, 255, 205, 189, 61, 125, 84, 152, 62, 47, 187, 63, 189, 45, 68, 96, 190, 115, 80, 14, 189, 122, 51, 186, 61, 191, 83, 91, 189, 201, 79, 158, 189, 24, 150, 244, 190, 101, 222, 107, 189, 79, 172, 132, 189, 205, 137, 195, 190, 120, 47, 147, 59, 133, 193, 63, 62, 136, 146, 173, 62, 115, 189, 133, 189, 38, 182, 6, 61, 69, 181, 232, 61, 81, 72, 218, 189, 132, 231, 207, 189, 94, 213, 110, 62, 180, 39, 157, 62, 19, 37, 194, 61, 60, 84, 24, 62, 127, 195, 181, 61, 197, 148, 26, 62, 188, 245, 129, 61, 150, 124, 25, 61, 72, 19, 17, 63, 233, 18, 239, 190, 109, 53, 88, 62, 73, 61, 127, 190, 54, 119, 186, 189, 139, 204, 162, 190, 66, 28, 200, 61, 189, 244, 88, 63, 196, 41, 28, 190, 178, 50, 145, 189, 216, 36, 144, 62, 244, 186, 188, 62, 184, 140, 131, 62, 41, 248, 220, 190, 112, 24, 34, 190, 84, 229, 47, 61, 124, 1, 29, 190, 177, 71, 199, 61, 63, 111, 162, 189, 14, 214, 215, 61, 4, 29, 174, 188, 35, 3, 55, 190, 153, 62, 235, 189, 161, 201, 169, 189, 234, 178, 49, 190, 77, 194, 18, 190, 27, 167, 10, 189, 112, 158, 156, 61, 14, 22, 231, 187, 21, 126, 74, 190, 198, 196, 135, 61, 198, 179, 139, 190, 192, 229, 41, 62, 45, 39, 160, 189, 12, 79, 8, 61, 67, 74, 146, 189, 230, 26, 228, 59, 145, 44, 102, 62, 243, 62, 4, 190, 233, 12, 225, 189, 66, 126, 69, 62, 3, 141, 17, 190, 48, 204, 1, 61, 229, 140, 146, 190, 148, 32, 232, 189, 125, 56, 74, 190, 95, 30, 162, 190, 86, 65, 172, 187, 139, 25, 177, 190, 110, 22, 63, 62, 63, 148, 11, 190, 166, 214, 143, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 18, 212, 213, 189, 159, 16, 192, 188, 18, 5, 120, 62, 226, 21, 97, 59, 248, 218, 8, 191, 137, 36, 24, 61, 121, 100, 36, 190, 251, 169, 84, 61, 243, 30, 1, 190, 14, 5, 236, 190, 63, 204, 223, 61, 24, 169, 78, 191, 189, 236, 7, 188, 103, 185, 138, 62, 76, 75, 47, 189, 59, 23, 60, 190, 56, 150, 166, 61, 135, 227, 229, 62, 86, 118, 75, 189, 206, 229, 98, 62, 142, 211, 64, 61, 112, 74, 89, 62, 68, 53, 18, 190, 101, 7, 65, 191, 166, 202, 87, 191, 6, 110, 156, 189, 32, 241, 200, 190, 71, 46, 46, 190, 131, 34, 211, 59, 222, 129, 12, 62, 209, 184, 160, 61, 122, 28, 122, 62, 7, 35, 75, 63, 186, 22, 46, 62, 100, 143, 207, 190, 219, 65, 250, 62, 224, 168, 252, 61, 209, 229, 161, 62, 231, 116, 170, 61, 49, 48, 141, 62, 32, 181, 93, 189, 253, 89, 247, 189, 159, 234, 145, 62, 80, 122, 38, 191, 113, 218, 125, 62, 151, 99, 225, 189, 50, 93, 25, 62, 63, 139, 88, 191, 150, 67, 41, 62, 220, 6, 192, 61, 231, 223, 140, 189, 2, 242, 92, 62, 45, 67, 157, 61, 48, 59, 27, 62, 209, 123, 140, 190, 89, 240, 83, 190, 123, 220, 59, 191, 63, 215, 253, 190, 31, 15, 153, 191, 176, 108, 160, 191, 217, 64, 184, 190, 183, 184, 193, 62, 53, 167, 9, 190, 224, 121, 181, 188, 148, 27, 133, 190, 242, 107, 137, 62, 184, 65, 11, 63, 102, 91, 228, 58, 79, 123, 208, 62, 5, 28, 151, 191, 53, 95, 248, 190, 14, 42, 102, 191, 205, 92, 120, 191, 234, 155, 50, 62, 98, 46, 117, 191, 181, 219, 129, 62, 233, 98, 6, 190, 234, 98, 139, 60, 17, 251, 141, 62, 129, 73, 2, 61, 38, 156, 103, 60, 194, 64, 43, 60, 224, 25, 237, 184, 158, 234, 71, 190, 90, 28, 162, 190, 29, 232, 172, 189, 151, 245, 7, 62, 136, 216, 47, 62, 108, 249, 188, 61, 149, 124, 147, 61, 245, 248, 141, 62, 50, 130, 30, 189, 36, 104, 241, 61, 44, 118, 251, 188, 6, 191, 232, 61, 45, 233, 34, 190, 31, 102, 163, 62, 232, 253, 45, 61, 169, 73, 162, 62, 181, 58, 74, 62, 95, 164, 30, 191, 155, 47, 183, 189, 127, 118, 32, 62, 48, 134, 65, 60, 154, 71, 133, 190, 5, 39, 64, 61, 165, 158, 201, 188, 197, 29, 147, 191, 144, 38, 187, 190, 164, 130, 239, 62, 83, 213, 144, 191, 14, 225, 164, 190, 170, 138, 7, 62, 104, 103, 79, 61, 240, 116, 48, 62, 178, 136, 26, 190, 247, 109, 253, 59, 117, 212, 201, 62, 77, 28, 18, 190, 20, 73, 178, 191, 234, 16, 83, 191, 24, 230, 239, 189, 65, 25, 200, 190, 166, 52, 205, 190, 166, 232, 61, 62, 15, 252, 153, 62, 32, 102, 184, 62, 168, 155, 80, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 247, 184, 192, 62, 39, 98, 248, 189, 196, 36, 46, 62, 108, 237, 3, 62, 18, 105, 55, 62, 67, 38, 119, 190, 75, 54, 35, 61, 52, 251, 89, 190, 173, 165, 17, 62, 155, 80, 228, 61, 161, 250, 54, 190, 202, 106, 55, 190, 124, 60, 74, 62, 198, 13, 188, 190, 67, 167, 137, 62, 171, 6, 49, 191, 227, 34, 61, 190, 240, 139, 108, 61, 164, 231, 117, 61, 22, 212, 112, 62, 8, 47, 150, 191, 20, 15, 41, 191, 30, 91, 178, 61, 223, 18, 60, 62, 128, 100, 198, 62, 79, 89, 117, 191, 172, 235, 46, 191, 38, 230, 209, 62, 232, 74, 142, 61, 0, 15, 50, 190, 174, 159, 8, 190, 140, 198, 143, 189, 115, 227, 196, 189, 163, 170, 169, 60, 251, 64, 81, 62, 78, 87, 65, 190, 186, 115, 244, 61, 105, 13, 171, 191, 7, 63, 29, 191, 94, 197, 159, 190, 162, 194, 200, 191, 182, 161, 209, 61, 232, 161, 78, 191, 39, 176, 50, 62, 61, 142, 100, 62, 31, 217, 162, 189, 38, 102, 141, 62, 71, 241, 26, 61, 225, 63, 128, 189, 56, 210, 55, 62, 99, 93, 79, 190, 19, 11, 231, 189, 24, 85, 235, 189, 5, 67, 135, 62, 105, 34, 99, 190, 53, 127, 132, 61, 218, 212, 191, 190, 182, 34, 47, 62, 120, 89, 245, 60, 130, 190, 112, 190, 245, 66, 173, 190, 193, 253, 194, 190, 50, 172, 178, 61, 228, 210, 36, 190, 21, 65, 54, 62, 126, 130, 129, 62, 228, 17, 7, 62, 10, 241, 235, 62, 94, 164, 165, 190, 233, 20, 236, 61, 188, 217, 22, 190, 57, 121, 107, 189, 116, 133, 253, 61, 213, 212, 131, 62, 53, 221, 29, 187, 99, 19, 150, 190, 0, 152, 238, 61, 159, 102, 23, 190, 86, 198, 132, 189, 72, 6, 93, 190, 81, 43, 2, 61, 214, 190, 157, 189, 84, 193, 111, 61, 21, 99, 152, 62, 209, 142, 81, 190, 201, 80, 231, 189, 173, 32, 97, 190, 14, 163, 64, 190, 120, 219, 141, 62, 235, 181, 14, 190, 170, 218, 197, 190, 214, 111, 140, 62, 150, 103, 186, 189, 69, 132, 255, 61, 28, 166, 102, 60, 236, 111, 133, 62, 85, 64, 42, 190, 103, 234, 231, 189, 61, 98, 233, 61, 167, 88, 111, 189, 159, 48, 198, 61, 88, 228, 38, 62, 52, 36, 53, 190, 165, 38, 223, 61, 124, 211, 234, 60, 192, 96, 43, 190, 102, 33, 46, 190, 57, 111, 178, 189, 41, 16, 1, 190, 61, 108, 143, 61, 32, 187, 190, 189, 145, 129, 208, 189, 222, 38, 127, 61, 124, 177, 154, 61, 92, 200, 172, 61, 23, 86, 21, 62, 10, 69, 170, 189, 125, 82, 199, 61, 96, 188, 146, 189, 94, 99, 195, 189, 132, 53, 40, 190, 124, 196, 192, 60, 160, 199, 138, 61, 121, 153, 117, 188, 126, 146, 12, 62, 23, 57, 158, 189, 78, 134, 23, 190, 121, 224, 190, 61, 30, 26, 55, 61, 65, 173, 159, 189, 137, 172, 231, 61, 225, 140, 229, 189, 67, 119, 43, 190, 99, 193, 180, 61, 229, 40, 210, 189, 236, 52, 163, 61, 244, 1, 12, 189, 230, 106, 212, 61, 120, 30, 239, 189, 46, 247, 67, 189, 226, 147, 137, 189, 192, 95, 183, 188, 133, 152, 163, 189, 12, 150, 21, 190, 214, 22, 115, 61, 236, 64, 35, 62, 69, 237, 150, 189, 197, 227, 167, 61, 229, 106, 21, 62, 131, 203, 23, 190, 197, 211, 229, 61, 255, 173, 117, 190, 216, 90, 174, 189, 89, 0, 29, 60, 8, 117, 234, 61, 34, 121, 0, 189, 184, 216, 0, 62, 95, 25, 46, 190, 234, 225, 173, 61, 79, 233, 117, 190, 113, 108, 191, 190, 232, 129, 4, 190, 187, 127, 214, 190, 220, 25, 23, 191, 115, 60, 219, 62, 160, 141, 50, 191, 196, 88, 40, 191, 81, 109, 88, 62, 133, 89, 111, 191, 45, 217, 188, 190, 228, 127, 244, 190, 222, 9, 4, 62, 147, 209, 137, 62, 115, 66, 80, 62, 98, 40, 160, 62, 80, 8, 2, 62, 237, 216, 167, 190, 69, 250, 160, 62, 212, 29, 23, 191, 147, 75, 125, 189, 207, 76, 131, 59, 71, 97, 156, 190, 77, 118, 33, 190, 185, 14, 82, 62, 160, 245, 2, 191, 5, 236, 15, 62, 40, 165, 104, 62, 179, 210, 176, 190, 203, 129, 32, 190, 241, 38, 30, 60, 6, 138, 96, 189, 65, 192, 65, 190, 242, 54, 182, 189, 178, 111, 13, 62, 78, 53, 200, 189, 107, 147, 225, 59, 97, 196, 21, 62, 71, 242, 146, 62, 113, 198, 45, 189, 230, 93, 16, 62, 225, 51, 27, 189, 255, 184, 59, 61, 160, 10, 143, 62, 111, 196, 141, 62, 93, 30, 193, 62, 74, 107, 163, 190, 190, 128, 212, 62, 38, 242, 70, 188, 102, 245, 129, 62, 37, 165, 52, 188, 236, 212, 183, 60, 152, 245, 226, 61, 80, 109, 46, 62, 12, 162, 148, 62, 129, 85, 140, 190, 162, 221, 42, 61, 124, 212, 243, 190, 189, 140, 204, 188, 125, 102, 65, 190, 202, 32, 12, 191, 148, 55, 125, 190, 26, 99, 100, 62, 212, 250, 72, 190, 12, 47, 80, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 150, 88, 189, 70, 196, 69, 61, 7, 118, 173, 189, 230, 45, 34, 61, 252, 240, 171, 62, 107, 160, 167, 190, 142, 175, 65, 62, 201, 210, 65, 62, 12, 9, 239, 58, 64, 158, 223, 189, 144, 38, 128, 190, 190, 162, 147, 62, 159, 215, 99, 62, 32, 189, 135, 62, 115, 153, 31, 62, 247, 131, 228, 61, 196, 55, 152, 61, 120, 136, 183, 62, 135, 18, 2, 188, 165, 101, 30, 61, 211, 244, 239, 189, 176, 210, 12, 61, 142, 240, 209, 188, 109, 197, 154, 190, 213, 255, 160, 189, 208, 56, 49, 62, 223, 31, 16, 61, 234, 97, 12, 187, 98, 182, 97, 190, 210, 243, 60, 190, 64, 46, 79, 62, 222, 29, 68, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 226, 101, 189, 1, 176, 40, 63, 95, 158, 58, 62, 208, 161, 178, 62, 44, 135, 254, 188, 189, 17, 28, 191, 34, 191, 220, 190, 115, 19, 73, 189, 87, 237, 198, 62, 243, 179, 238, 190, 82, 79, 118, 190, 220, 24, 96, 62, 49, 167, 71, 191, 187, 41, 175, 189, 205, 9, 96, 63, 0, 140, 129, 190, 72, 179, 58, 61, 60, 29, 226, 190, 146, 252, 147, 61, 247, 231, 216, 189, 123, 87, 244, 62, 185, 156, 17, 191, 15, 8, 2, 63, 4, 111, 64, 63, 54, 122, 145, 61, 214, 139, 55, 191, 240, 44, 231, 62, 61, 177, 131, 190, 42, 221, 43, 188, 24, 250, 32, 189, 84, 213, 96, 63, 137, 147, 160, 190, 165, 231, 4, 190, 57, 86, 223, 61, 180, 192, 21, 191, 90, 205, 42, 190, 5, 227, 103, 190, 131, 39, 64, 62, 74, 38, 52, 189, 85, 152, 76, 190, 228, 43, 191, 189, 27, 199, 230, 186, 115, 182, 124, 60, 22, 158, 223, 190, 96, 234, 251, 61, 114, 207, 85, 190, 135, 49, 161, 189, 206, 181, 67, 191, 95, 124, 99, 189, 183, 34, 27, 190, 129, 235, 158, 61, 53, 21, 166, 61, 159, 140, 137, 62, 25, 12, 65, 61, 32, 255, 162, 61, 171, 129, 25, 63, 248, 86, 24, 59, 184, 129, 187, 62, 29, 164, 26, 62, 146, 236, 168, 189, 251, 237, 174, 60, 155, 202, 184, 189, 53, 155, 11, 62, 125, 241, 118, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 194, 43, 60, 252, 84, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {171, 247, 232, 62, 8, 220, 126, 191, 46, 25, 218, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {175, 8, 6, 64, 86, 206, 28, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}