// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 32, 209, 59, 144, 184, 224, 190, 62, 168, 225, 62, 169, 181, 136, 190, 182, 180, 82, 191, 226, 149, 1, 191, 102, 129, 173, 190, 81, 252, 11, 63, 62, 76, 85, 190, 169, 8, 152, 62, 108, 243, 75, 61, 60, 14, 38, 63, 11, 13, 19, 191, 79, 211, 32, 63, 201, 6, 56, 62, 213, 224, 24, 61, 4, 68, 37, 191, 15, 25, 17, 191, 236, 242, 100, 62, 48, 221, 141, 61, 254, 116, 223, 190, 239, 43, 255, 62, 252, 104, 110, 190, 53, 44, 201, 189, 1, 180, 201, 190, 134, 112, 24, 60, 27, 27, 235, 190, 241, 107, 8, 191, 42, 144, 164, 62, 159, 193, 155, 190, 109, 174, 181, 62, 101, 92, 44, 191, 80, 73, 240, 190, 83, 107, 37, 191, 28, 149, 137, 63, 34, 129, 45, 62, 241, 37, 142, 190, 253, 165, 252, 190, 76, 69, 225, 60, 51, 189, 168, 62, 69, 80, 93, 191, 239, 43, 174, 62, 44, 176, 45, 191, 42, 82, 213, 186, 65, 104, 121, 61, 151, 119, 198, 190, 78, 141, 35, 62, 57, 201, 62, 63, 40, 68, 229, 62, 103, 198, 6, 189, 18, 40, 5, 190, 38, 164, 103, 190, 104, 112, 135, 191, 74, 66, 229, 62, 76, 132, 126, 62, 237, 137, 234, 61, 61, 209, 67, 191, 219, 161, 32, 190, 57, 75, 12, 190, 155, 217, 31, 62, 33, 7, 245, 62, 66, 46, 234, 190, 153, 96, 160, 190, 224, 141, 207, 62, 254, 31, 131, 189, 66, 32, 158, 190, 11, 105, 178, 62, 248, 160, 138, 62, 44, 159, 199, 61, 86, 89, 156, 190, 175, 143, 11, 63, 75, 65, 48, 62, 194, 68, 174, 62, 108, 83, 37, 63, 118, 199, 2, 62, 46, 251, 42, 191, 182, 227, 250, 190, 43, 13, 82, 63, 33, 129, 3, 191, 99, 27, 239, 62, 6, 251, 7, 63, 234, 219, 108, 63, 136, 68, 81, 63, 169, 83, 247, 62, 235, 108, 190, 62, 246, 47, 1, 63, 168, 50, 233, 189, 74, 158, 52, 63, 142, 93, 50, 191, 239, 129, 183, 61, 160, 78, 224, 62, 67, 113, 9, 191, 247, 154, 66, 62, 201, 234, 213, 62, 182, 157, 198, 190, 119, 84, 161, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 145, 236, 190, 81, 194, 209, 62, 194, 99, 2, 191, 50, 76, 134, 189, 233, 251, 47, 63, 165, 236, 142, 62, 50, 231, 160, 62, 116, 193, 154, 188, 223, 145, 134, 190, 102, 197, 63, 62, 222, 136, 21, 63, 52, 236, 174, 61, 81, 13, 154, 62, 178, 80, 226, 61, 71, 122, 149, 62, 140, 10, 36, 190, 148, 241, 183, 62, 206, 97, 58, 190, 124, 243, 211, 62, 210, 28, 46, 190, 220, 23, 135, 190, 14, 229, 150, 190, 42, 32, 29, 63, 247, 55, 251, 62, 89, 138, 118, 188, 197, 146, 254, 190, 245, 195, 148, 190, 21, 4, 203, 62, 137, 219, 62, 62, 172, 148, 184, 62, 217, 55, 144, 62, 144, 6, 233, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 97, 167, 61, 128, 205, 253, 61, 116, 103, 79, 189, 76, 251, 185, 189, 99, 239, 209, 189, 163, 11, 234, 61, 25, 216, 203, 61, 129, 183, 3, 62, 30, 189, 234, 189, 91, 234, 244, 59, 120, 147, 137, 61, 52, 246, 206, 188, 8, 61, 81, 62, 90, 47, 166, 189, 163, 143, 140, 189, 86, 182, 65, 188, 238, 2, 225, 189, 136, 37, 242, 61, 25, 157, 228, 61, 111, 138, 228, 189, 88, 96, 45, 189, 6, 165, 224, 61, 109, 76, 80, 62, 118, 8, 225, 61, 7, 99, 53, 62, 201, 169, 22, 62, 236, 33, 169, 60, 99, 85, 230, 61, 32, 30, 107, 190, 49, 22, 174, 189, 153, 32, 205, 189, 164, 114, 86, 62, 252, 196, 150, 62, 234, 187, 163, 61, 33, 253, 176, 61, 240, 212, 20, 190, 80, 126, 79, 190, 196, 124, 56, 62, 54, 79, 70, 61, 104, 24, 11, 62, 153, 145, 98, 60, 78, 156, 103, 61, 156, 189, 200, 61, 14, 223, 190, 190, 39, 195, 57, 62, 86, 29, 85, 62, 154, 199, 145, 190, 78, 13, 196, 61, 121, 119, 192, 62, 90, 197, 82, 62, 142, 130, 228, 61, 193, 31, 196, 61, 50, 254, 246, 61, 41, 42, 241, 189, 110, 124, 93, 189, 182, 19, 42, 191, 83, 71, 61, 191, 67, 36, 150, 188, 174, 5, 136, 190, 239, 174, 183, 190, 81, 117, 47, 61, 68, 71, 82, 62, 22, 40, 222, 62, 60, 181, 123, 62, 98, 201, 226, 61, 116, 94, 152, 61, 72, 171, 108, 190, 174, 11, 64, 190, 122, 216, 214, 190, 187, 207, 23, 189, 105, 143, 68, 62, 219, 163, 29, 62, 154, 92, 6, 62, 164, 126, 76, 62, 55, 230, 136, 189, 247, 171, 208, 190, 227, 207, 164, 189, 31, 210, 173, 61, 101, 36, 222, 189, 216, 223, 117, 190, 45, 195, 32, 62, 48, 142, 57, 190, 194, 90, 176, 61, 151, 185, 90, 189, 95, 217, 128, 190, 134, 152, 247, 188, 46, 98, 93, 62, 174, 91, 31, 190, 226, 231, 137, 188, 30, 194, 35, 61, 94, 101, 233, 188, 16, 191, 53, 62, 197, 113, 160, 62, 204, 122, 29, 62, 114, 30, 135, 61, 183, 226, 157, 61, 72, 174, 248, 60, 38, 198, 114, 61, 184, 204, 243, 189, 178, 0, 252, 60, 13, 247, 4, 191, 243, 148, 22, 62, 51, 211, 183, 61, 142, 68, 56, 62, 96, 66, 88, 190, 174, 224, 52, 189, 12, 187, 58, 62, 7, 234, 230, 190, 118, 161, 122, 188, 107, 117, 65, 62, 110, 92, 195, 190, 210, 241, 142, 189, 175, 207, 0, 62, 86, 255, 128, 62, 73, 10, 64, 62, 65, 222, 201, 189, 234, 19, 233, 61, 147, 240, 80, 189, 238, 5, 224, 189, 171, 223, 42, 191, 6, 198, 164, 190, 166, 61, 23, 190, 146, 143, 205, 59, 111, 192, 251, 189, 229, 20, 135, 61, 217, 114, 6, 62, 28, 171, 196, 62, 221, 234, 60, 61, 90, 187, 107, 190, 224, 213, 72, 60, 133, 214, 28, 190, 44, 201, 95, 190, 227, 114, 238, 60, 163, 128, 4, 62, 187, 120, 37, 62, 141, 23, 104, 189, 34, 202, 151, 61, 118, 129, 234, 60, 96, 70, 157, 60, 67, 253, 242, 61, 42, 136, 159, 61, 76, 199, 190, 60, 81, 253, 66, 62, 56, 252, 145, 61, 128, 77, 121, 62, 234, 218, 231, 61, 152, 16, 4, 62, 136, 88, 205, 188, 95, 245, 24, 190, 15, 228, 3, 190, 48, 82, 3, 62, 132, 36, 206, 61, 78, 211, 220, 61, 44, 201, 27, 62, 67, 216, 7, 190, 135, 91, 176, 61, 123, 242, 82, 62, 78, 54, 152, 189, 244, 122, 71, 61, 195, 45, 145, 61, 199, 171, 62, 61, 81, 9, 221, 61, 69, 101, 33, 190, 208, 193, 15, 62, 195, 206, 57, 189, 124, 234, 209, 189, 51, 65, 151, 189, 153, 111, 95, 190, 253, 189, 127, 61, 191, 25, 109, 61, 108, 64, 188, 188, 168, 120, 138, 61, 236, 162, 10, 190, 53, 78, 197, 61, 116, 38, 15, 189, 93, 76, 146, 189, 222, 230, 46, 190, 158, 167, 247, 60, 89, 163, 29, 189, 102, 169, 23, 189, 40, 11, 199, 189, 94, 174, 40, 61, 9, 237, 150, 190, 233, 147, 248, 188, 111, 227, 199, 60, 8, 197, 38, 190, 246, 91, 187, 61, 15, 68, 99, 61, 153, 229, 13, 189, 24, 228, 144, 61, 217, 99, 25, 61, 227, 51, 148, 61, 143, 5, 1, 61, 155, 132, 172, 61, 5, 74, 190, 189, 31, 220, 191, 61, 41, 6, 168, 189, 242, 202, 217, 189, 54, 81, 96, 61, 252, 96, 71, 190, 253, 129, 107, 62, 204, 108, 118, 62, 3, 43, 108, 189, 138, 183, 143, 190, 123, 183, 135, 59, 57, 153, 195, 189, 150, 81, 10, 62, 225, 55, 154, 190, 22, 240, 166, 189, 68, 167, 81, 190, 206, 216, 47, 61, 200, 198, 150, 61, 75, 253, 168, 190, 51, 60, 163, 190, 116, 4, 140, 62, 240, 213, 187, 61, 208, 186, 159, 62, 0, 36, 219, 190, 162, 180, 52, 190, 155, 38, 145, 62, 212, 81, 238, 189, 181, 219, 242, 60, 28, 178, 52, 189, 125, 118, 43, 186, 151, 109, 81, 190, 215, 93, 107, 189, 56, 50, 197, 61, 83, 29, 95, 190, 59, 217, 40, 189, 175, 1, 69, 61, 70, 85, 7, 189, 191, 233, 13, 190, 121, 118, 13, 62, 58, 4, 130, 61, 161, 22, 14, 189, 100, 57, 99, 61, 207, 183, 40, 62, 212, 43, 134, 189, 8, 107, 47, 61, 124, 54, 157, 61, 154, 143, 167, 61, 51, 46, 46, 190, 142, 71, 144, 189, 90, 1, 9, 190, 73, 112, 8, 189, 25, 122, 184, 189, 239, 114, 101, 62, 56, 188, 79, 189, 20, 196, 125, 62, 41, 127, 18, 190, 27, 194, 231, 61, 103, 149, 55, 61, 166, 249, 62, 189, 58, 171, 255, 189, 227, 151, 141, 61, 96, 190, 83, 62, 160, 114, 44, 61, 117, 47, 106, 189, 113, 175, 190, 59, 131, 132, 12, 189, 178, 37, 6, 191, 219, 37, 20, 62, 122, 128, 241, 189, 4, 221, 109, 62, 74, 185, 21, 189, 173, 153, 161, 189, 224, 177, 55, 62, 86, 43, 28, 191, 50, 192, 205, 60, 47, 230, 203, 62, 177, 200, 160, 190, 108, 135, 183, 189, 152, 84, 147, 62, 206, 151, 187, 61, 150, 90, 32, 62, 152, 148, 166, 61, 73, 109, 44, 62, 144, 223, 16, 189, 58, 179, 37, 61, 162, 75, 213, 190, 108, 39, 238, 190, 106, 187, 159, 189, 125, 66, 3, 190, 101, 228, 132, 190, 233, 86, 10, 62, 1, 1, 166, 62, 75, 56, 147, 62, 230, 169, 13, 60, 23, 136, 122, 189, 74, 98, 102, 189, 86, 77, 226, 61, 8, 196, 45, 62, 91, 150, 17, 189, 86, 28, 174, 189, 54, 113, 146, 61, 86, 16, 72, 190, 38, 161, 71, 60, 74, 225, 181, 187, 138, 63, 188, 61, 183, 60, 79, 61, 196, 154, 192, 188, 193, 56, 211, 188, 24, 208, 216, 189, 44, 173, 84, 61, 115, 191, 142, 190, 82, 235, 111, 190, 217, 123, 70, 62, 209, 4, 178, 61, 254, 224, 24, 191, 150, 128, 176, 190, 183, 171, 131, 62, 192, 250, 22, 62, 40, 23, 139, 62, 3, 40, 137, 189, 1, 92, 131, 189, 182, 121, 215, 62, 192, 21, 10, 62, 106, 157, 17, 190, 80, 136, 74, 190, 37, 241, 108, 61, 16, 100, 3, 62, 18, 26, 59, 62, 203, 93, 153, 190, 209, 95, 44, 62, 176, 162, 140, 59, 200, 196, 159, 61, 249, 179, 89, 61, 62, 145, 2, 62, 178, 59, 241, 60, 220, 116, 242, 189, 125, 27, 133, 62, 75, 94, 176, 189, 123, 255, 106, 61, 88, 158, 49, 190, 183, 69, 133, 62, 178, 156, 247, 61, 219, 126, 59, 189, 76, 9, 167, 189, 4, 61, 116, 189, 2, 53, 182, 60, 120, 102, 239, 61, 231, 99, 149, 61, 2, 245, 100, 190, 154, 229, 30, 62, 250, 141, 218, 189, 224, 198, 44, 62, 83, 168, 118, 61, 28, 0, 84, 190, 48, 120, 24, 191, 32, 15, 247, 61, 255, 82, 142, 61, 238, 50, 42, 62, 60, 147, 212, 188, 190, 210, 252, 189, 228, 114, 125, 190, 143, 135, 220, 190, 66, 232, 83, 189, 77, 253, 196, 189, 240, 253, 54, 62, 222, 27, 18, 61, 11, 97, 246, 189, 161, 79, 30, 60, 227, 107, 70, 60, 157, 149, 89, 61, 239, 147, 28, 61, 23, 178, 138, 62, 245, 124, 3, 62, 162, 157, 13, 61, 151, 138, 253, 61, 250, 139, 170, 61, 83, 131, 129, 61, 218, 241, 71, 189, 142, 117, 230, 188, 232, 100, 7, 190, 3, 169, 88, 62, 177, 68, 180, 189, 219, 84, 10, 190, 110, 102, 248, 185, 135, 178, 63, 62, 128, 10, 157, 189, 82, 168, 3, 62, 79, 121, 187, 61, 87, 1, 65, 62, 146, 104, 248, 61, 226, 48, 7, 190, 190, 249, 158, 190, 13, 127, 112, 61, 48, 234, 194, 188, 27, 162, 211, 61, 60, 200, 185, 61, 59, 40, 72, 62, 71, 15, 183, 189, 135, 51, 34, 61, 8, 215, 6, 190, 84, 52, 83, 190, 47, 207, 49, 62, 11, 0, 75, 190, 250, 237, 55, 189, 16, 13, 57, 189, 95, 191, 142, 188, 44, 119, 219, 188, 220, 197, 175, 189, 212, 121, 146, 187, 4, 142, 193, 61, 43, 174, 37, 190, 190, 77, 255, 61, 188, 251, 0, 190, 168, 225, 64, 189, 245, 0, 100, 189, 207, 154, 153, 189, 190, 13, 130, 60, 183, 32, 35, 62, 186, 217, 203, 190, 216, 199, 9, 62, 6, 51, 141, 190, 34, 20, 57, 190, 187, 96, 68, 190, 213, 76, 162, 61, 49, 20, 71, 189, 92, 181, 48, 61, 122, 27, 166, 189, 201, 18, 12, 190, 96, 35, 25, 62, 199, 251, 48, 190, 160, 248, 35, 188, 99, 249, 243, 61, 75, 134, 200, 61, 35, 89, 35, 190, 178, 46, 97, 62, 253, 14, 148, 61, 166, 192, 151, 187, 45, 250, 51, 61, 242, 217, 234, 189, 72, 81, 165, 61, 87, 154, 159, 60, 85, 156, 95, 189, 33, 119, 166, 188, 99, 156, 97, 190, 140, 114, 127, 61, 87, 179, 190, 61, 193, 152, 120, 62, 221, 163, 196, 189, 57, 169, 14, 62, 45, 4, 29, 62, 225, 216, 31, 190, 65, 158, 67, 189, 28, 146, 50, 61, 204, 150, 81, 62, 60, 13, 47, 190, 138, 154, 94, 190, 236, 26, 174, 190, 62, 107, 239, 190, 189, 2, 33, 62, 126, 207, 50, 191, 110, 77, 156, 191, 114, 58, 35, 189, 163, 209, 53, 191, 77, 9, 253, 186, 75, 238, 48, 191, 110, 243, 50, 62, 41, 36, 2, 62, 202, 5, 234, 61, 239, 42, 90, 62, 184, 225, 171, 189, 199, 155, 197, 190, 201, 159, 59, 62, 143, 21, 97, 191, 136, 175, 60, 190, 125, 112, 196, 61, 87, 47, 253, 61, 47, 240, 132, 188, 224, 167, 174, 62, 122, 205, 234, 189, 53, 64, 2, 62, 244, 207, 24, 62, 194, 239, 146, 190, 118, 110, 166, 190, 239, 23, 40, 191, 117, 70, 20, 190, 101, 198, 196, 190, 31, 28, 255, 189, 115, 240, 74, 189, 210, 132, 2, 190, 75, 92, 102, 61, 130, 115, 146, 190, 211, 13, 138, 190, 155, 224, 177, 61, 238, 54, 248, 189, 162, 250, 17, 190, 217, 161, 159, 189, 239, 216, 41, 188, 135, 34, 7, 191, 9, 58, 11, 190, 146, 73, 23, 190, 74, 6, 173, 60, 112, 218, 140, 190, 217, 151, 148, 62, 168, 228, 177, 59, 123, 0, 225, 189, 68, 116, 159, 190, 217, 219, 0, 191, 163, 232, 2, 60, 127, 229, 140, 61, 159, 26, 150, 189, 133, 234, 122, 62, 105, 171, 42, 190, 82, 91, 225, 60, 150, 84, 44, 62, 79, 69, 31, 62, 58, 205, 139, 61, 128, 100, 9, 190, 229, 105, 49, 62, 221, 64, 38, 190, 80, 127, 59, 61, 15, 3, 117, 189, 33, 70, 172, 190, 27, 88, 9, 62, 142, 167, 10, 60, 90, 24, 7, 61, 64, 235, 7, 62, 242, 222, 227, 189, 152, 177, 128, 61, 186, 83, 151, 61, 183, 178, 113, 62, 239, 75, 237, 61, 187, 127, 227, 62, 103, 195, 120, 189, 232, 12, 40, 62, 144, 97, 26, 62, 255, 13, 145, 62, 185, 74, 138, 61, 45, 11, 117, 190, 210, 123, 136, 188, 223, 118, 35, 62, 41, 39, 49, 189, 69, 87, 168, 189, 54, 68, 137, 190, 197, 49, 222, 187, 219, 47, 208, 188, 252, 63, 186, 190, 152, 15, 211, 61, 57, 212, 142, 62, 21, 71, 199, 62, 103, 253, 150, 189, 168, 7, 162, 61, 42, 44, 12, 62, 0, 73, 132, 189, 165, 208, 93, 190, 190, 40, 223, 61, 225, 146, 125, 62, 68, 240, 72, 61, 190, 68, 190, 60, 109, 178, 232, 61, 224, 66, 112, 61, 14, 244, 134, 188, 118, 17, 26, 189, 138, 141, 217, 62, 80, 208, 34, 191, 161, 96, 204, 61, 147, 115, 159, 190, 171, 107, 77, 190, 148, 127, 61, 190, 0, 255, 82, 61, 250, 61, 185, 62, 202, 227, 42, 190, 159, 118, 213, 189, 129, 11, 145, 62, 240, 13, 160, 62, 79, 238, 164, 62, 71, 157, 6, 191, 20, 210, 46, 190, 71, 214, 158, 61, 41, 45, 58, 190, 157, 73, 190, 189, 25, 151, 44, 190, 192, 92, 252, 187, 64, 87, 181, 188, 114, 66, 15, 190, 1, 217, 154, 60, 215, 88, 97, 189, 224, 3, 244, 61, 107, 128, 97, 189, 169, 111, 198, 61, 56, 178, 14, 62, 158, 130, 116, 61, 12, 37, 26, 62, 67, 129, 210, 61, 102, 20, 34, 61, 163, 7, 66, 62, 16, 45, 249, 189, 219, 110, 228, 61, 207, 143, 181, 60, 35, 154, 46, 61, 255, 159, 14, 62, 59, 109, 143, 61, 29, 243, 209, 189, 244, 181, 63, 61, 67, 133, 195, 59, 37, 215, 184, 61, 58, 92, 75, 189, 56, 179, 24, 61, 141, 164, 7, 190, 127, 129, 203, 189, 209, 31, 131, 60, 28, 142, 86, 190, 202, 215, 180, 61, 130, 90, 60, 190, 220, 59, 85, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 172, 66, 24, 189, 24, 112, 81, 59, 25, 196, 183, 61, 66, 24, 131, 60, 170, 85, 166, 190, 233, 112, 126, 61, 66, 234, 171, 189, 250, 24, 236, 61, 79, 127, 14, 61, 174, 65, 128, 190, 198, 5, 18, 62, 178, 227, 17, 190, 187, 167, 190, 189, 118, 214, 65, 61, 235, 64, 144, 189, 118, 29, 145, 189, 208, 34, 14, 62, 82, 200, 110, 62, 49, 220, 140, 61, 140, 107, 152, 61, 157, 67, 177, 60, 154, 162, 54, 62, 129, 44, 12, 190, 157, 93, 71, 190, 115, 115, 115, 190, 78, 236, 39, 188, 28, 251, 203, 189, 15, 169, 44, 189, 172, 187, 101, 60, 98, 79, 53, 62, 206, 226, 75, 187, 152, 163, 209, 61, 135, 67, 30, 190, 204, 78, 118, 61, 176, 249, 100, 190, 12, 161, 93, 61, 105, 113, 155, 62, 228, 152, 66, 62, 222, 70, 103, 61, 107, 98, 226, 61, 90, 181, 4, 61, 96, 45, 43, 184, 240, 45, 25, 62, 185, 205, 204, 189, 201, 184, 70, 62, 172, 120, 107, 190, 174, 84, 52, 62, 58, 130, 61, 191, 204, 154, 149, 61, 139, 87, 36, 61, 197, 157, 6, 189, 51, 243, 1, 190, 59, 123, 1, 190, 118, 18, 0, 61, 109, 184, 27, 189, 113, 44, 57, 62, 78, 151, 92, 61, 108, 27, 78, 191, 178, 115, 5, 191, 138, 13, 180, 190, 70, 84, 57, 190, 139, 32, 100, 189, 33, 24, 45, 190, 209, 13, 93, 190, 139, 29, 85, 190, 201, 157, 118, 61, 191, 81, 217, 189, 5, 130, 70, 189, 209, 170, 149, 62, 184, 132, 130, 190, 225, 203, 68, 191, 169, 12, 8, 190, 198, 215, 32, 191, 226, 102, 28, 61, 126, 47, 231, 190, 244, 141, 104, 61, 75, 52, 28, 61, 155, 39, 152, 61, 178, 185, 138, 62, 73, 88, 107, 188, 192, 160, 106, 189, 57, 251, 207, 61, 220, 234, 7, 191, 26, 228, 224, 189, 167, 193, 159, 190, 98, 176, 211, 189, 198, 20, 130, 61, 66, 177, 42, 60, 39, 125, 156, 189, 172, 199, 172, 61, 46, 35, 71, 62, 245, 255, 53, 190, 171, 203, 98, 189, 16, 10, 14, 61, 176, 97, 246, 61, 82, 144, 8, 190, 219, 161, 113, 62, 60, 186, 221, 61, 165, 8, 137, 61, 71, 221, 73, 189, 24, 228, 18, 191, 41, 16, 46, 189, 130, 242, 67, 62, 100, 213, 65, 61, 70, 14, 87, 190, 105, 106, 247, 189, 200, 206, 59, 61, 25, 173, 3, 191, 245, 138, 143, 189, 135, 228, 141, 62, 58, 197, 16, 191, 59, 89, 221, 189, 128, 182, 59, 62, 182, 3, 26, 62, 79, 55, 45, 62, 26, 217, 131, 61, 128, 66, 9, 189, 38, 148, 146, 62, 170, 86, 235, 189, 234, 100, 47, 191, 206, 7, 193, 190, 88, 181, 207, 60, 36, 113, 166, 186, 7, 252, 182, 190, 84, 13, 12, 62, 44, 106, 201, 62, 1, 217, 160, 62, 68, 70, 46, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 23, 184, 35, 62, 213, 75, 122, 61, 114, 64, 109, 60, 19, 251, 122, 62, 63, 201, 31, 62, 2, 81, 168, 189, 151, 13, 16, 62, 223, 152, 146, 189, 196, 76, 205, 61, 17, 86, 2, 62, 12, 101, 121, 189, 253, 202, 142, 190, 254, 71, 66, 62, 246, 32, 164, 190, 253, 188, 17, 62, 217, 198, 252, 190, 36, 2, 246, 189, 113, 93, 82, 188, 7, 246, 8, 62, 112, 9, 46, 190, 188, 119, 12, 191, 190, 218, 213, 190, 242, 163, 25, 62, 111, 16, 39, 62, 13, 94, 143, 62, 169, 145, 83, 191, 234, 217, 234, 190, 48, 165, 181, 62, 133, 79, 205, 61, 63, 67, 5, 190, 36, 111, 134, 189, 135, 90, 127, 60, 77, 1, 27, 189, 227, 143, 145, 189, 190, 225, 196, 190, 15, 123, 29, 190, 2, 142, 35, 61, 155, 108, 86, 190, 45, 57, 56, 191, 98, 14, 45, 62, 76, 7, 56, 191, 157, 29, 11, 62, 10, 130, 230, 190, 240, 161, 209, 61, 129, 43, 135, 62, 66, 135, 160, 60, 132, 247, 47, 62, 219, 94, 38, 59, 119, 11, 80, 62, 57, 127, 94, 62, 30, 218, 2, 191, 77, 217, 232, 189, 40, 65, 175, 189, 199, 45, 215, 61, 152, 234, 125, 189, 221, 166, 98, 61, 99, 226, 222, 189, 209, 24, 39, 62, 170, 211, 176, 188, 161, 11, 193, 189, 124, 10, 239, 189, 151, 146, 107, 190, 118, 111, 80, 62, 161, 227, 228, 189, 151, 106, 187, 188, 59, 179, 64, 62, 14, 44, 85, 62, 128, 138, 202, 62, 70, 196, 193, 189, 188, 61, 106, 61, 48, 82, 32, 190, 198, 115, 108, 188, 64, 58, 48, 62, 252, 131, 16, 62, 117, 146, 247, 188, 53, 35, 10, 189, 232, 240, 123, 61, 80, 122, 171, 190, 239, 44, 85, 61, 170, 30, 206, 189, 42, 189, 24, 61, 111, 235, 34, 190, 99, 81, 107, 61, 185, 195, 75, 62, 191, 136, 74, 190, 120, 13, 243, 189, 192, 23, 37, 190, 106, 238, 196, 61, 122, 58, 116, 62, 254, 63, 21, 190, 129, 28, 63, 190, 229, 21, 160, 62, 68, 98, 205, 189, 33, 51, 55, 189, 141, 87, 170, 189, 15, 7, 100, 62, 85, 64, 42, 190, 183, 87, 241, 189, 142, 129, 4, 62, 167, 88, 111, 189, 195, 24, 225, 61, 133, 200, 26, 62, 32, 131, 42, 190, 195, 28, 243, 61, 194, 47, 251, 60, 85, 192, 29, 190, 40, 49, 44, 190, 50, 40, 152, 189, 152, 63, 3, 190, 61, 108, 143, 61, 129, 245, 184, 189, 145, 129, 208, 189, 161, 142, 155, 61, 124, 177, 154, 61, 152, 183, 203, 61, 23, 86, 21, 62, 198, 204, 176, 189, 43, 176, 207, 61, 139, 26, 36, 189, 99, 238, 125, 189, 152, 134, 25, 190, 124, 196, 192, 60, 160, 199, 138, 61, 184, 109, 178, 60, 123, 236, 29, 62, 151, 30, 188, 189, 69, 126, 24, 190, 61, 235, 190, 61, 132, 77, 36, 61, 32, 129, 189, 189, 236, 254, 240, 61, 87, 228, 109, 189, 125, 67, 3, 190, 139, 38, 153, 61, 57, 118, 192, 189, 217, 142, 202, 61, 40, 25, 123, 189, 237, 209, 219, 61, 11, 69, 229, 189, 205, 59, 153, 60, 240, 222, 192, 189, 30, 151, 100, 60, 119, 101, 110, 189, 57, 4, 18, 190, 160, 220, 181, 61, 233, 9, 243, 61, 245, 31, 74, 189, 247, 8, 178, 61, 217, 81, 27, 62, 98, 15, 39, 190, 112, 15, 23, 62, 227, 142, 61, 190, 97, 246, 5, 189, 193, 182, 17, 60, 37, 10, 250, 61, 191, 133, 232, 60, 150, 101, 38, 62, 113, 133, 7, 190, 213, 111, 15, 62, 75, 231, 62, 190, 215, 146, 151, 190, 137, 201, 143, 190, 170, 168, 28, 191, 122, 251, 12, 191, 27, 114, 147, 62, 137, 193, 156, 190, 104, 57, 33, 191, 112, 40, 97, 61, 56, 195, 214, 190, 151, 179, 68, 190, 79, 102, 225, 190, 237, 77, 212, 59, 188, 160, 122, 62, 239, 108, 148, 62, 188, 188, 32, 62, 209, 124, 161, 61, 104, 251, 148, 189, 152, 110, 168, 62, 19, 117, 15, 191, 177, 81, 135, 189, 248, 34, 50, 190, 211, 63, 82, 190, 45, 120, 211, 189, 73, 106, 7, 62, 35, 193, 128, 190, 141, 2, 2, 62, 22, 199, 35, 62, 50, 40, 89, 190, 190, 71, 150, 189, 218, 75, 29, 62, 134, 22, 79, 61, 163, 72, 42, 190, 3, 174, 189, 61, 45, 12, 161, 61, 148, 248, 7, 60, 95, 210, 215, 61, 250, 240, 83, 189, 57, 46, 30, 62, 23, 224, 0, 190, 103, 45, 62, 190, 23, 251, 199, 61, 43, 231, 86, 61, 130, 130, 232, 61, 18, 249, 9, 62, 14, 58, 105, 62, 248, 119, 151, 190, 132, 43, 98, 62, 207, 140, 95, 188, 69, 130, 128, 61, 253, 104, 31, 61, 19, 124, 150, 187, 18, 81, 235, 61, 232, 55, 63, 188, 57, 199, 3, 62, 144, 103, 141, 190, 70, 77, 235, 188, 8, 116, 67, 62, 104, 144, 11, 189, 73, 203, 135, 190, 141, 82, 58, 61, 33, 169, 53, 190, 14, 200, 209, 61, 39, 108, 4, 190, 225, 134, 60, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 72, 139, 189, 136, 167, 237, 187, 201, 136, 23, 189, 216, 192, 189, 189, 11, 204, 135, 62, 80, 225, 105, 190, 138, 0, 83, 62, 65, 222, 9, 62, 111, 209, 212, 189, 25, 138, 78, 188, 166, 203, 44, 190, 100, 226, 174, 62, 4, 85, 158, 189, 145, 37, 73, 62, 229, 238, 128, 62, 33, 107, 101, 62, 28, 214, 190, 61, 200, 144, 129, 62, 211, 119, 59, 61, 165, 101, 30, 61, 210, 153, 164, 189, 87, 119, 228, 60, 109, 14, 160, 189, 28, 84, 52, 190, 213, 255, 160, 189, 70, 189, 94, 62, 251, 186, 6, 62, 28, 220, 36, 60, 219, 3, 79, 190, 146, 69, 23, 190, 161, 105, 82, 62, 237, 49, 13, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 160, 255, 189, 162, 12, 156, 62, 43, 146, 134, 60, 57, 129, 159, 62, 90, 5, 184, 187, 149, 246, 173, 187, 158, 118, 8, 191, 31, 153, 247, 188, 128, 247, 160, 62, 110, 182, 159, 190, 100, 124, 24, 190, 227, 162, 17, 62, 184, 250, 150, 189, 120, 128, 200, 189, 93, 235, 81, 63, 189, 230, 126, 190, 254, 68, 119, 62, 252, 99, 10, 191, 110, 58, 137, 188, 247, 231, 216, 189, 139, 189, 2, 62, 195, 67, 149, 190, 2, 20, 209, 62, 239, 81, 136, 62, 54, 122, 145, 61, 110, 28, 26, 191, 202, 121, 173, 62, 237, 232, 143, 190, 57, 226, 114, 189, 155, 161, 157, 189, 182, 134, 31, 63, 217, 192, 243, 189, 54, 247, 248, 189, 20, 174, 184, 60, 74, 169, 217, 190, 65, 173, 48, 189, 91, 199, 77, 190, 81, 44, 33, 61, 129, 54, 50, 189, 207, 77, 28, 190, 228, 135, 132, 61, 0, 128, 17, 61, 211, 176, 16, 61, 209, 42, 154, 190, 156, 69, 255, 189, 20, 42, 39, 190, 163, 109, 7, 190, 210, 101, 147, 190, 157, 117, 118, 189, 99, 126, 224, 189, 248, 3, 120, 189, 53, 21, 166, 61, 183, 72, 136, 61, 171, 215, 187, 61, 218, 142, 83, 62, 228, 22, 68, 62, 248, 86, 24, 59, 56, 236, 211, 61, 166, 58, 114, 189, 40, 16, 50, 62, 109, 54, 214, 188, 114, 129, 222, 189, 99, 40, 25, 62, 156, 126, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 220, 120, 61, 169, 100, 219, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 238, 92, 63, 202, 17, 165, 191, 12, 218, 218, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {153, 10, 89, 64, 192, 127, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}