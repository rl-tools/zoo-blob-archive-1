// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 58, 246, 61, 56, 104, 244, 190, 22, 44, 192, 62, 20, 29, 3, 190, 71, 237, 181, 191, 217, 250, 192, 190, 200, 165, 35, 190, 123, 210, 220, 61, 92, 88, 75, 190, 121, 77, 187, 62, 234, 79, 49, 62, 222, 173, 37, 63, 97, 195, 79, 191, 230, 227, 78, 63, 49, 87, 154, 61, 238, 28, 216, 61, 31, 65, 214, 191, 201, 163, 213, 190, 118, 94, 58, 62, 26, 218, 191, 190, 212, 227, 85, 190, 100, 53, 12, 63, 141, 139, 129, 190, 35, 46, 128, 190, 216, 6, 158, 190, 121, 38, 114, 191, 228, 207, 163, 190, 110, 94, 40, 191, 184, 79, 2, 63, 49, 234, 165, 190, 196, 177, 208, 62, 12, 41, 171, 191, 9, 180, 201, 190, 93, 144, 139, 190, 84, 160, 187, 63, 158, 199, 188, 62, 209, 120, 9, 191, 22, 81, 6, 191, 232, 0, 33, 62, 122, 29, 143, 62, 212, 247, 83, 191, 7, 230, 131, 62, 233, 132, 57, 191, 9, 26, 228, 60, 76, 98, 157, 61, 197, 176, 213, 190, 29, 164, 67, 63, 96, 56, 32, 63, 165, 150, 222, 62, 48, 202, 203, 189, 135, 48, 41, 190, 190, 123, 176, 190, 60, 229, 141, 191, 161, 234, 195, 62, 17, 230, 124, 62, 88, 85, 97, 189, 132, 38, 31, 191, 206, 253, 167, 190, 153, 33, 155, 190, 50, 60, 3, 62, 247, 228, 190, 62, 68, 60, 99, 191, 253, 21, 149, 190, 146, 85, 226, 62, 54, 41, 194, 190, 135, 171, 138, 190, 93, 209, 152, 62, 122, 149, 91, 62, 150, 211, 203, 61, 33, 142, 96, 190, 133, 228, 104, 63, 40, 219, 76, 62, 21, 191, 224, 62, 0, 1, 72, 63, 134, 210, 81, 62, 15, 68, 36, 191, 237, 175, 141, 188, 111, 7, 74, 63, 24, 64, 235, 190, 152, 210, 127, 63, 118, 193, 236, 62, 110, 11, 115, 63, 68, 175, 132, 63, 6, 24, 240, 62, 120, 27, 4, 63, 132, 196, 14, 63, 169, 218, 52, 190, 24, 40, 28, 63, 205, 212, 59, 191, 193, 222, 209, 61, 32, 241, 190, 62, 107, 43, 239, 190, 84, 107, 51, 62, 147, 15, 47, 62, 74, 36, 7, 191, 49, 54, 138, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 220, 39, 191, 109, 100, 157, 62, 203, 197, 50, 191, 213, 42, 156, 189, 88, 5, 37, 63, 46, 84, 117, 61, 243, 219, 51, 62, 93, 159, 223, 189, 215, 54, 172, 190, 66, 174, 70, 62, 96, 186, 180, 62, 153, 78, 142, 62, 234, 189, 211, 62, 69, 251, 128, 61, 228, 70, 254, 62, 145, 205, 74, 190, 217, 245, 197, 62, 29, 200, 255, 189, 37, 60, 191, 62, 232, 79, 55, 190, 50, 220, 209, 190, 234, 39, 199, 190, 117, 70, 13, 63, 51, 208, 197, 62, 248, 83, 239, 189, 68, 42, 10, 191, 0, 238, 169, 190, 130, 0, 192, 62, 13, 108, 57, 62, 17, 26, 153, 62, 197, 20, 142, 62, 228, 136, 16, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 55, 252, 61, 108, 43, 237, 61, 129, 176, 82, 61, 103, 42, 79, 189, 143, 115, 251, 189, 193, 126, 54, 62, 110, 26, 184, 61, 68, 254, 163, 61, 23, 65, 139, 189, 197, 235, 246, 60, 125, 27, 192, 61, 14, 228, 235, 188, 58, 176, 51, 62, 120, 55, 64, 189, 83, 230, 7, 190, 32, 180, 191, 60, 172, 55, 11, 190, 137, 55, 225, 61, 152, 13, 209, 61, 77, 66, 225, 189, 67, 154, 110, 189, 20, 237, 15, 62, 12, 30, 52, 62, 228, 58, 167, 61, 219, 232, 89, 62, 109, 202, 53, 62, 208, 7, 130, 61, 125, 58, 10, 62, 85, 230, 132, 190, 25, 152, 136, 57, 10, 194, 151, 189, 236, 212, 96, 62, 187, 3, 93, 62, 117, 14, 73, 62, 200, 70, 89, 188, 50, 63, 151, 190, 40, 102, 19, 190, 218, 148, 140, 62, 236, 208, 128, 61, 3, 107, 7, 62, 167, 213, 215, 60, 154, 28, 97, 59, 34, 80, 14, 62, 244, 11, 32, 191, 34, 88, 9, 63, 66, 0, 57, 62, 30, 209, 36, 62, 150, 137, 195, 61, 59, 251, 168, 62, 75, 33, 134, 62, 109, 191, 227, 61, 87, 222, 145, 62, 94, 195, 6, 62, 181, 153, 240, 189, 85, 150, 177, 189, 25, 83, 94, 191, 211, 227, 158, 191, 186, 192, 64, 60, 43, 130, 166, 190, 240, 60, 14, 191, 202, 62, 136, 189, 54, 126, 191, 61, 187, 197, 194, 62, 212, 80, 129, 62, 52, 168, 102, 61, 25, 243, 12, 61, 176, 158, 170, 188, 200, 107, 138, 190, 22, 16, 52, 191, 225, 200, 159, 189, 185, 161, 63, 62, 69, 161, 94, 62, 140, 223, 96, 62, 235, 143, 95, 62, 43, 255, 161, 189, 64, 176, 169, 191, 84, 182, 170, 190, 133, 6, 86, 61, 76, 1, 15, 191, 241, 125, 168, 190, 42, 37, 41, 62, 234, 145, 164, 190, 155, 83, 209, 61, 248, 55, 133, 190, 107, 116, 82, 190, 254, 236, 44, 61, 24, 46, 88, 62, 224, 59, 221, 190, 0, 40, 12, 190, 176, 220, 99, 189, 0, 146, 193, 190, 248, 204, 67, 62, 178, 169, 136, 62, 148, 170, 60, 62, 79, 199, 177, 61, 87, 147, 176, 61, 204, 84, 42, 189, 220, 55, 125, 61, 140, 122, 8, 190, 143, 236, 146, 60, 176, 129, 238, 190, 118, 25, 231, 61, 107, 225, 202, 61, 7, 222, 138, 62, 237, 197, 57, 190, 250, 31, 161, 189, 214, 15, 52, 62, 132, 189, 176, 191, 186, 169, 41, 62, 112, 228, 83, 62, 16, 254, 39, 190, 233, 3, 251, 189, 230, 248, 75, 62, 10, 74, 129, 62, 90, 236, 49, 62, 145, 253, 19, 190, 42, 57, 3, 62, 4, 21, 65, 189, 132, 53, 31, 61, 123, 254, 17, 191, 191, 155, 148, 190, 11, 133, 114, 190, 61, 246, 217, 190, 185, 15, 24, 189, 136, 208, 32, 62, 188, 158, 6, 62, 48, 250, 216, 62, 150, 182, 21, 62, 228, 61, 136, 190, 169, 137, 176, 188, 171, 154, 0, 61, 127, 45, 77, 190, 91, 75, 64, 60, 72, 116, 204, 61, 241, 236, 38, 62, 132, 219, 7, 187, 23, 22, 34, 62, 143, 192, 64, 61, 231, 100, 35, 60, 145, 114, 98, 61, 227, 206, 156, 61, 69, 225, 59, 61, 95, 58, 49, 62, 192, 5, 182, 61, 241, 174, 147, 62, 196, 179, 195, 61, 241, 77, 35, 62, 60, 83, 0, 187, 191, 21, 20, 190, 198, 153, 120, 189, 1, 45, 9, 62, 19, 225, 183, 61, 31, 238, 49, 61, 255, 203, 22, 62, 191, 18, 44, 190, 197, 254, 190, 61, 199, 225, 84, 62, 71, 13, 74, 59, 127, 13, 169, 61, 97, 49, 252, 61, 204, 222, 74, 62, 127, 215, 40, 190, 165, 19, 54, 190, 146, 82, 79, 62, 105, 178, 252, 189, 26, 42, 34, 190, 197, 210, 157, 190, 187, 176, 47, 191, 73, 175, 9, 62, 15, 77, 201, 62, 101, 152, 19, 191, 18, 74, 62, 60, 83, 4, 175, 190, 253, 116, 33, 62, 20, 34, 170, 190, 51, 53, 102, 189, 244, 36, 180, 190, 127, 7, 150, 61, 200, 47, 133, 62, 150, 17, 53, 189, 106, 126, 76, 190, 0, 176, 77, 189, 8, 202, 45, 190, 155, 218, 10, 188, 96, 59, 185, 62, 69, 125, 243, 189, 32, 232, 232, 61, 116, 57, 111, 62, 130, 58, 61, 63, 0, 189, 81, 62, 51, 191, 238, 61, 135, 137, 188, 61, 127, 155, 63, 189, 92, 66, 247, 59, 241, 93, 158, 61, 69, 13, 180, 61, 228, 240, 119, 189, 58, 254, 244, 189, 82, 42, 109, 60, 15, 107, 144, 190, 239, 173, 143, 62, 81, 15, 153, 62, 148, 142, 170, 189, 90, 249, 147, 190, 203, 120, 131, 189, 205, 157, 111, 189, 228, 156, 194, 61, 63, 151, 201, 190, 55, 203, 207, 189, 238, 200, 137, 190, 155, 72, 254, 60, 68, 181, 78, 62, 57, 14, 9, 191, 180, 125, 194, 190, 214, 128, 93, 62, 16, 159, 253, 60, 26, 78, 158, 62, 174, 231, 221, 190, 237, 171, 128, 190, 108, 25, 143, 62, 115, 234, 137, 189, 222, 108, 12, 61, 179, 136, 22, 189, 233, 138, 133, 59, 213, 16, 97, 190, 198, 130, 65, 190, 79, 201, 150, 62, 162, 36, 45, 190, 174, 217, 116, 188, 144, 65, 16, 189, 102, 74, 146, 189, 109, 195, 45, 190, 242, 191, 41, 62, 249, 255, 62, 62, 230, 200, 179, 189, 67, 218, 51, 61, 0, 59, 57, 61, 25, 253, 234, 188, 161, 121, 128, 188, 86, 169, 106, 61, 51, 67, 167, 61, 11, 212, 135, 190, 34, 96, 63, 189, 45, 151, 133, 190, 28, 126, 142, 190, 109, 109, 150, 189, 95, 231, 92, 62, 180, 174, 70, 189, 180, 94, 129, 62, 182, 132, 69, 190, 147, 155, 111, 61, 118, 193, 156, 61, 190, 53, 90, 61, 142, 33, 3, 190, 155, 233, 152, 61, 105, 39, 99, 62, 34, 115, 3, 189, 99, 43, 234, 189, 243, 91, 60, 60, 236, 17, 75, 189, 131, 32, 8, 191, 32, 147, 98, 61, 200, 56, 2, 190, 233, 161, 166, 62, 91, 227, 172, 189, 28, 141, 25, 190, 136, 50, 14, 62, 141, 84, 178, 191, 147, 198, 47, 62, 91, 70, 220, 62, 138, 65, 99, 190, 179, 249, 24, 190, 28, 86, 181, 62, 174, 15, 231, 61, 198, 188, 4, 62, 105, 238, 117, 61, 126, 56, 54, 62, 13, 16, 100, 59, 111, 231, 57, 62, 177, 224, 151, 190, 127, 156, 236, 190, 134, 112, 44, 190, 227, 242, 16, 191, 101, 34, 77, 190, 7, 64, 128, 62, 119, 138, 157, 62, 100, 234, 165, 62, 96, 58, 217, 61, 124, 246, 26, 61, 0, 220, 2, 190, 191, 79, 100, 62, 114, 232, 85, 62, 115, 248, 38, 190, 149, 35, 183, 189, 175, 16, 131, 61, 133, 41, 180, 190, 2, 20, 130, 61, 82, 137, 113, 61, 76, 197, 136, 61, 233, 11, 170, 189, 228, 5, 46, 190, 60, 1, 78, 61, 83, 97, 164, 190, 49, 136, 89, 61, 62, 129, 169, 190, 183, 31, 59, 190, 69, 37, 99, 62, 67, 137, 178, 61, 56, 137, 103, 191, 208, 147, 222, 190, 58, 17, 98, 62, 242, 190, 205, 60, 156, 1, 189, 62, 12, 49, 181, 188, 238, 45, 129, 189, 193, 109, 237, 62, 41, 118, 74, 62, 251, 160, 199, 189, 38, 39, 17, 190, 31, 224, 103, 61, 141, 122, 83, 62, 197, 253, 117, 62, 72, 114, 107, 190, 81, 31, 69, 62, 209, 163, 171, 60, 250, 29, 54, 62, 58, 84, 3, 62, 113, 155, 227, 61, 95, 135, 52, 61, 120, 136, 72, 61, 160, 59, 172, 62, 35, 232, 162, 189, 146, 102, 58, 61, 45, 90, 38, 190, 101, 208, 105, 62, 74, 159, 39, 62, 8, 45, 187, 188, 24, 102, 18, 189, 19, 12, 139, 61, 252, 157, 142, 60, 132, 23, 125, 62, 69, 249, 128, 62, 217, 212, 166, 190, 231, 64, 31, 62, 94, 252, 98, 189, 11, 147, 103, 62, 63, 188, 254, 61, 217, 50, 146, 190, 110, 52, 1, 191, 116, 35, 248, 61, 206, 71, 6, 61, 200, 46, 178, 61, 113, 196, 77, 60, 176, 217, 141, 190, 124, 247, 15, 190, 64, 254, 239, 190, 104, 42, 29, 190, 63, 185, 229, 190, 3, 241, 16, 62, 70, 64, 245, 61, 194, 39, 221, 190, 213, 16, 201, 59, 166, 120, 206, 189, 114, 145, 155, 190, 151, 14, 77, 61, 41, 77, 133, 62, 101, 59, 101, 62, 222, 28, 46, 61, 169, 128, 20, 62, 183, 140, 20, 62, 15, 55, 216, 61, 164, 255, 210, 61, 255, 203, 32, 58, 54, 58, 244, 60, 204, 107, 42, 62, 175, 76, 155, 190, 237, 21, 237, 190, 67, 148, 88, 61, 200, 146, 181, 61, 182, 238, 63, 190, 37, 226, 42, 62, 77, 199, 124, 61, 148, 113, 25, 62, 232, 38, 229, 61, 187, 25, 100, 190, 118, 187, 133, 191, 185, 228, 4, 191, 61, 254, 169, 190, 24, 76, 135, 62, 124, 81, 183, 190, 155, 168, 54, 62, 49, 177, 109, 61, 215, 82, 203, 190, 38, 209, 248, 61, 70, 43, 131, 190, 151, 211, 120, 62, 54, 18, 72, 190, 245, 209, 185, 190, 249, 204, 131, 60, 198, 135, 74, 190, 33, 12, 103, 62, 180, 124, 99, 190, 87, 175, 193, 60, 81, 116, 193, 61, 118, 87, 247, 190, 82, 80, 136, 61, 116, 45, 130, 189, 138, 53, 86, 61, 156, 191, 84, 190, 190, 68, 150, 190, 88, 60, 134, 189, 254, 9, 31, 188, 204, 151, 108, 60, 148, 45, 59, 190, 182, 204, 21, 191, 70, 191, 150, 190, 106, 148, 41, 190, 243, 169, 120, 61, 101, 4, 145, 61, 70, 153, 179, 61, 95, 245, 143, 189, 181, 78, 151, 189, 125, 255, 43, 62, 212, 115, 45, 190, 201, 157, 107, 61, 1, 152, 58, 62, 68, 50, 15, 62, 75, 168, 39, 190, 226, 28, 77, 62, 56, 194, 239, 61, 127, 24, 163, 189, 114, 22, 175, 61, 218, 228, 182, 189, 153, 27, 139, 61, 132, 2, 144, 61, 191, 34, 30, 189, 55, 66, 183, 187, 23, 64, 13, 190, 174, 119, 92, 61, 206, 56, 188, 61, 199, 48, 129, 62, 159, 10, 139, 189, 233, 228, 46, 62, 41, 69, 53, 62, 209, 49, 255, 189, 58, 139, 87, 61, 6, 138, 166, 61, 226, 18, 112, 62, 175, 146, 199, 189, 103, 35, 108, 62, 199, 97, 129, 190, 69, 100, 223, 190, 255, 55, 0, 62, 147, 117, 172, 191, 68, 253, 125, 191, 108, 230, 12, 189, 162, 246, 127, 191, 153, 42, 164, 61, 214, 172, 168, 191, 35, 71, 73, 62, 73, 176, 232, 60, 240, 172, 12, 61, 184, 43, 60, 62, 109, 82, 178, 189, 254, 244, 116, 191, 89, 127, 92, 60, 16, 235, 27, 191, 84, 96, 161, 190, 125, 112, 196, 61, 87, 47, 253, 61, 201, 109, 158, 189, 76, 209, 155, 62, 216, 118, 54, 61, 220, 139, 144, 61, 75, 7, 34, 62, 74, 170, 100, 190, 53, 223, 47, 191, 109, 17, 28, 191, 62, 212, 51, 190, 136, 238, 234, 190, 207, 242, 103, 189, 190, 42, 52, 190, 180, 245, 18, 190, 3, 241, 183, 61, 38, 233, 140, 191, 212, 22, 128, 190, 237, 128, 207, 61, 205, 164, 184, 189, 36, 250, 55, 190, 202, 172, 15, 190, 10, 250, 59, 61, 174, 92, 151, 191, 48, 52, 132, 190, 157, 146, 143, 60, 145, 94, 94, 61, 137, 134, 145, 190, 136, 242, 130, 62, 184, 185, 233, 188, 141, 248, 74, 190, 240, 150, 123, 190, 180, 154, 191, 191, 244, 104, 214, 190, 85, 17, 55, 187, 4, 63, 34, 191, 59, 56, 13, 61, 244, 57, 158, 188, 178, 107, 77, 189, 144, 28, 148, 61, 209, 245, 225, 60, 172, 238, 238, 61, 74, 69, 139, 189, 18, 158, 56, 62, 32, 22, 119, 190, 54, 149, 28, 61, 35, 98, 62, 189, 51, 245, 192, 190, 53, 49, 51, 62, 139, 252, 170, 189, 112, 7, 0, 61, 217, 47, 54, 62, 65, 173, 239, 189, 157, 184, 217, 58, 11, 50, 237, 60, 82, 142, 130, 62, 193, 27, 233, 61, 247, 63, 196, 62, 16, 163, 35, 61, 245, 227, 32, 62, 235, 198, 27, 62, 61, 58, 116, 62, 70, 103, 51, 61, 248, 174, 109, 190, 12, 198, 123, 188, 104, 239, 17, 62, 77, 9, 114, 188, 247, 17, 49, 189, 129, 60, 184, 190, 181, 182, 59, 189, 27, 82, 66, 189, 92, 198, 190, 190, 212, 150, 173, 61, 188, 154, 69, 62, 193, 176, 177, 62, 169, 186, 146, 189, 16, 222, 135, 62, 160, 133, 255, 61, 32, 235, 44, 189, 114, 27, 237, 189, 52, 115, 68, 62, 152, 27, 169, 62, 188, 50, 152, 61, 225, 46, 211, 61, 209, 172, 6, 62, 57, 142, 238, 61, 239, 19, 94, 61, 162, 119, 10, 60, 68, 182, 18, 63, 55, 95, 250, 190, 33, 197, 20, 62, 42, 93, 117, 190, 1, 108, 253, 189, 239, 233, 26, 189, 79, 160, 160, 61, 107, 116, 64, 63, 86, 119, 57, 190, 91, 215, 150, 189, 159, 18, 142, 62, 100, 144, 179, 62, 64, 32, 133, 62, 2, 120, 212, 190, 120, 173, 20, 190, 215, 92, 110, 61, 254, 76, 42, 190, 47, 39, 160, 61, 161, 11, 171, 189, 176, 134, 197, 61, 144, 175, 135, 188, 159, 207, 53, 190, 96, 160, 180, 188, 160, 241, 131, 189, 220, 35, 176, 61, 216, 156, 22, 190, 156, 220, 82, 61, 51, 182, 149, 61, 144, 6, 175, 61, 103, 155, 176, 61, 30, 184, 21, 61, 22, 147, 187, 189, 175, 184, 99, 62, 140, 172, 54, 190, 85, 122, 65, 62, 92, 183, 96, 61, 224, 217, 95, 189, 186, 231, 9, 62, 43, 189, 9, 61, 62, 103, 246, 188, 166, 37, 149, 61, 98, 20, 139, 189, 232, 32, 170, 60, 119, 37, 194, 189, 85, 212, 136, 189, 185, 48, 220, 189, 44, 131, 7, 190, 149, 20, 247, 187, 164, 125, 149, 190, 208, 50, 175, 61, 235, 158, 93, 190, 233, 0, 93, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 57, 126, 51, 189, 77, 62, 137, 59, 207, 137, 79, 62, 1, 151, 115, 189, 23, 249, 175, 190, 22, 229, 141, 61, 134, 4, 105, 189, 78, 83, 12, 62, 178, 200, 55, 189, 93, 124, 92, 190, 11, 2, 12, 62, 229, 127, 211, 190, 98, 85, 168, 188, 188, 247, 238, 61, 230, 173, 7, 60, 247, 141, 135, 189, 68, 167, 254, 61, 29, 21, 165, 62, 235, 41, 244, 61, 224, 15, 122, 62, 49, 188, 171, 61, 49, 91, 172, 62, 201, 189, 16, 190, 81, 24, 3, 191, 38, 28, 58, 191, 39, 6, 231, 60, 106, 102, 110, 190, 218, 111, 72, 190, 249, 202, 202, 61, 76, 244, 195, 61, 51, 76, 66, 59, 218, 162, 24, 62, 27, 96, 13, 63, 253, 23, 16, 62, 18, 34, 93, 190, 24, 136, 223, 62, 45, 216, 22, 62, 53, 9, 142, 62, 175, 33, 165, 61, 42, 59, 124, 62, 43, 96, 61, 60, 128, 54, 149, 189, 107, 212, 120, 62, 46, 23, 216, 190, 188, 162, 154, 62, 150, 180, 145, 189, 230, 102, 241, 61, 58, 134, 69, 191, 69, 78, 15, 62, 141, 96, 129, 62, 167, 159, 17, 189, 89, 198, 137, 62, 175, 245, 82, 188, 25, 209, 246, 61, 183, 23, 164, 190, 214, 53, 244, 189, 215, 43, 49, 190, 39, 229, 29, 191, 205, 10, 142, 191, 203, 152, 128, 191, 126, 253, 129, 190, 185, 119, 131, 62, 134, 162, 22, 190, 185, 197, 236, 187, 18, 105, 122, 190, 26, 49, 141, 62, 122, 23, 30, 63, 228, 111, 66, 188, 205, 130, 187, 62, 190, 87, 156, 191, 91, 118, 190, 190, 111, 191, 36, 191, 42, 193, 142, 191, 49, 59, 87, 62, 18, 76, 81, 191, 50, 180, 65, 62, 97, 94, 190, 189, 188, 213, 110, 61, 173, 247, 142, 62, 117, 156, 101, 60, 67, 120, 67, 188, 107, 163, 41, 61, 249, 103, 26, 61, 57, 253, 20, 190, 78, 194, 159, 190, 172, 246, 40, 62, 117, 116, 89, 61, 109, 223, 196, 61, 242, 243, 186, 57, 160, 83, 161, 61, 93, 43, 130, 62, 241, 64, 225, 189, 63, 131, 29, 189, 97, 61, 181, 187, 128, 226, 10, 62, 176, 184, 36, 190, 213, 251, 128, 62, 187, 229, 29, 61, 64, 208, 93, 62, 158, 225, 180, 189, 236, 213, 33, 191, 229, 78, 190, 189, 186, 51, 86, 62, 78, 249, 184, 61, 252, 155, 178, 190, 89, 62, 224, 59, 183, 38, 56, 188, 37, 158, 47, 191, 224, 141, 142, 190, 215, 28, 171, 62, 98, 222, 137, 191, 181, 182, 30, 190, 200, 173, 66, 62, 184, 156, 197, 61, 35, 82, 119, 62, 15, 86, 23, 61, 104, 119, 12, 61, 44, 42, 249, 62, 122, 236, 240, 189, 227, 75, 144, 191, 36, 5, 69, 191, 73, 164, 184, 188, 128, 103, 12, 190, 30, 193, 234, 190, 148, 223, 151, 62, 164, 73, 143, 62, 142, 64, 154, 62, 123, 21, 9, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 240, 3, 140, 62, 213, 125, 149, 188, 186, 134, 53, 62, 44, 183, 106, 62, 193, 221, 37, 62, 219, 120, 188, 189, 89, 133, 185, 61, 110, 128, 53, 190, 251, 132, 59, 62, 101, 54, 29, 62, 252, 146, 186, 189, 206, 80, 143, 190, 189, 169, 248, 61, 205, 127, 135, 190, 62, 243, 18, 62, 124, 78, 63, 191, 143, 208, 49, 190, 219, 235, 214, 59, 157, 194, 183, 61, 41, 203, 254, 61, 254, 175, 65, 191, 61, 181, 3, 191, 65, 112, 173, 61, 222, 203, 212, 61, 163, 254, 131, 62, 29, 176, 70, 191, 164, 139, 52, 191, 247, 250, 181, 62, 113, 16, 161, 61, 50, 242, 9, 190, 186, 219, 77, 189, 223, 198, 232, 60, 218, 83, 64, 189, 226, 158, 145, 61, 87, 47, 108, 62, 113, 59, 40, 190, 113, 91, 142, 61, 251, 193, 179, 191, 122, 218, 187, 190, 102, 24, 53, 190, 75, 58, 177, 191, 69, 183, 92, 62, 146, 176, 102, 191, 149, 8, 35, 62, 73, 86, 101, 62, 30, 181, 85, 188, 187, 162, 124, 62, 56, 47, 180, 60, 142, 27, 123, 61, 83, 112, 83, 62, 160, 38, 162, 189, 214, 78, 146, 189, 24, 85, 235, 189, 5, 67, 135, 62, 203, 136, 55, 190, 209, 115, 42, 61, 231, 131, 165, 190, 60, 179, 43, 62, 196, 160, 96, 60, 254, 249, 75, 190, 123, 232, 142, 190, 126, 12, 157, 190, 147, 253, 29, 62, 250, 71, 15, 190, 137, 213, 48, 62, 221, 130, 142, 62, 16, 115, 66, 62, 214, 44, 219, 62, 84, 154, 114, 190, 100, 175, 26, 62, 202, 156, 29, 190, 194, 83, 159, 189, 45, 91, 41, 62, 151, 204, 99, 62, 95, 20, 13, 59, 15, 194, 125, 190, 30, 183, 27, 62, 145, 176, 89, 190, 235, 80, 224, 188, 186, 54, 23, 190, 208, 164, 135, 60, 87, 120, 200, 188, 122, 255, 95, 61, 215, 42, 134, 62, 37, 82, 92, 190, 97, 34, 231, 189, 73, 125, 76, 190, 47, 200, 146, 189, 102, 136, 157, 62, 158, 178, 219, 189, 196, 132, 143, 190, 243, 186, 156, 62, 222, 250, 172, 189, 57, 83, 178, 61, 62, 225, 28, 188, 98, 140, 121, 62, 85, 64, 42, 190, 103, 234, 231, 189, 61, 98, 233, 61, 167, 88, 111, 189, 159, 48, 198, 61, 88, 228, 38, 62, 52, 36, 53, 190, 165, 38, 223, 61, 124, 211, 234, 60, 192, 96, 43, 190, 102, 33, 46, 190, 57, 111, 178, 189, 41, 16, 1, 190, 61, 108, 143, 61, 32, 187, 190, 189, 145, 129, 208, 189, 222, 38, 127, 61, 124, 177, 154, 61, 92, 200, 172, 61, 23, 86, 21, 62, 10, 69, 170, 189, 125, 82, 199, 61, 96, 188, 146, 189, 94, 99, 195, 189, 132, 53, 40, 190, 124, 196, 192, 60, 160, 199, 138, 61, 121, 153, 117, 188, 126, 146, 12, 62, 23, 57, 158, 189, 78, 134, 23, 190, 121, 224, 190, 61, 132, 77, 36, 61, 36, 172, 189, 189, 236, 254, 240, 61, 87, 228, 109, 189, 19, 114, 14, 190, 139, 38, 153, 61, 253, 57, 205, 189, 52, 172, 186, 61, 40, 25, 123, 189, 99, 176, 191, 61, 35, 89, 240, 189, 187, 187, 55, 60, 240, 222, 192, 189, 30, 151, 100, 60, 119, 101, 110, 189, 57, 4, 18, 190, 253, 253, 151, 61, 233, 9, 243, 61, 252, 189, 151, 189, 247, 8, 178, 61, 217, 81, 27, 62, 201, 39, 41, 190, 61, 12, 12, 62, 165, 71, 71, 190, 113, 118, 31, 189, 193, 182, 17, 60, 37, 10, 250, 61, 120, 102, 81, 60, 24, 56, 17, 62, 58, 161, 7, 190, 213, 111, 15, 62, 75, 5, 63, 190, 108, 243, 154, 190, 185, 18, 78, 190, 100, 83, 212, 190, 49, 8, 14, 191, 207, 164, 165, 62, 130, 173, 90, 191, 122, 196, 216, 190, 81, 109, 88, 62, 66, 196, 131, 191, 146, 96, 148, 190, 62, 9, 38, 191, 228, 40, 161, 61, 173, 227, 137, 62, 7, 99, 146, 62, 235, 197, 130, 62, 56, 205, 217, 61, 139, 98, 130, 190, 176, 197, 179, 62, 20, 116, 232, 190, 22, 188, 190, 59, 140, 247, 50, 190, 71, 97, 156, 190, 223, 170, 30, 190, 168, 179, 13, 62, 51, 146, 252, 190, 36, 220, 24, 62, 0, 113, 73, 62, 103, 91, 165, 190, 75, 41, 130, 190, 169, 151, 217, 61, 14, 84, 1, 61, 124, 48, 35, 190, 244, 38, 67, 189, 228, 165, 175, 61, 228, 8, 129, 189, 1, 216, 21, 61, 150, 147, 153, 188, 78, 66, 120, 62, 142, 179, 192, 189, 51, 32, 191, 61, 92, 179, 228, 60, 170, 134, 190, 188, 9, 109, 108, 62, 228, 48, 103, 62, 125, 122, 170, 62, 78, 224, 125, 190, 255, 168, 143, 62, 157, 76, 148, 188, 115, 135, 75, 62, 74, 120, 134, 61, 26, 228, 133, 188, 181, 121, 2, 62, 164, 108, 219, 61, 17, 12, 109, 62, 194, 242, 175, 190, 157, 141, 238, 188, 108, 157, 108, 190, 250, 28, 41, 189, 14, 158, 81, 190, 57, 16, 147, 190, 75, 52, 107, 190, 160, 93, 99, 62, 224, 61, 11, 190, 84, 28, 46, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 48, 158, 189, 114, 229, 0, 61, 50, 162, 202, 189, 246, 182, 29, 61, 185, 155, 151, 62, 89, 120, 123, 190, 207, 165, 54, 62, 7, 184, 23, 62, 129, 111, 4, 59, 153, 130, 225, 189, 90, 108, 83, 190, 161, 154, 165, 62, 137, 0, 219, 61, 142, 189, 94, 62, 235, 231, 51, 62, 78, 172, 17, 62, 62, 109, 228, 61, 136, 140, 167, 62, 40, 69, 172, 60, 165, 101, 30, 61, 135, 61, 210, 189, 21, 251, 5, 60, 34, 57, 136, 189, 117, 178, 140, 190, 213, 255, 160, 189, 102, 202, 32, 62, 55, 85, 149, 61, 211, 247, 206, 58, 98, 182, 97, 190, 77, 50, 40, 190, 19, 28, 73, 62, 17, 191, 157, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 12, 176, 189, 247, 133, 26, 63, 105, 138, 38, 62, 116, 237, 171, 62, 106, 75, 172, 188, 196, 40, 200, 190, 114, 90, 228, 190, 46, 53, 168, 189, 184, 56, 192, 62, 205, 189, 189, 190, 12, 243, 74, 190, 188, 93, 127, 62, 253, 73, 31, 191, 58, 23, 149, 189, 11, 42, 100, 63, 221, 166, 142, 190, 14, 150, 215, 61, 11, 164, 244, 190, 38, 135, 219, 60, 247, 231, 216, 189, 137, 2, 157, 62, 21, 147, 241, 190, 90, 216, 1, 63, 97, 86, 72, 63, 54, 122, 145, 61, 38, 240, 5, 191, 159, 118, 241, 62, 87, 132, 151, 190, 42, 221, 43, 188, 133, 161, 157, 189, 136, 79, 76, 63, 78, 84, 87, 190, 165, 24, 179, 189, 232, 147, 183, 61, 107, 21, 16, 191, 27, 209, 245, 189, 27, 184, 76, 190, 108, 39, 239, 61, 59, 190, 188, 189, 186, 102, 235, 189, 212, 22, 82, 189, 163, 112, 201, 59, 57, 106, 52, 60, 110, 48, 198, 190, 114, 187, 106, 189, 169, 1, 47, 190, 20, 10, 121, 59, 118, 3, 54, 191, 109, 49, 171, 189, 217, 81, 148, 189, 114, 208, 230, 60, 53, 21, 166, 61, 4, 57, 62, 62, 112, 66, 27, 61, 161, 235, 33, 62, 16, 220, 9, 63, 248, 86, 24, 59, 198, 136, 57, 62, 231, 75, 221, 188, 135, 12, 44, 61, 251, 237, 174, 60, 203, 161, 221, 189, 65, 25, 214, 61, 133, 166, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 18, 113, 61, 212, 223, 78, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 193, 170, 63, 200, 89, 81, 62, 94, 237, 118, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 48, 149, 191, 10, 248, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}