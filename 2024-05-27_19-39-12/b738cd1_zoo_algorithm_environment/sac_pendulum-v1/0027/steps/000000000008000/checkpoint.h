// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 166, 1, 62, 64, 231, 3, 191, 107, 136, 180, 62, 13, 94, 248, 189, 41, 18, 174, 191, 163, 149, 213, 190, 208, 115, 48, 190, 135, 76, 24, 62, 88, 150, 64, 190, 144, 240, 174, 62, 192, 43, 7, 62, 198, 34, 37, 63, 46, 152, 69, 191, 173, 42, 113, 63, 217, 142, 168, 61, 101, 59, 178, 61, 168, 172, 209, 191, 4, 101, 217, 190, 178, 114, 105, 62, 202, 114, 179, 190, 34, 210, 62, 190, 166, 146, 24, 63, 222, 2, 98, 190, 223, 12, 19, 190, 219, 124, 188, 190, 102, 5, 100, 191, 159, 68, 149, 190, 11, 230, 10, 191, 246, 101, 254, 62, 123, 200, 182, 190, 67, 156, 207, 62, 230, 183, 164, 191, 167, 241, 191, 190, 164, 244, 240, 190, 215, 31, 183, 63, 85, 88, 179, 62, 213, 29, 217, 190, 28, 199, 16, 191, 73, 154, 245, 61, 194, 101, 157, 62, 16, 184, 43, 191, 14, 150, 184, 62, 158, 188, 51, 191, 194, 39, 132, 60, 37, 172, 104, 61, 162, 71, 180, 190, 34, 201, 14, 63, 38, 105, 40, 63, 137, 75, 226, 62, 204, 151, 217, 189, 172, 97, 42, 190, 31, 146, 87, 190, 156, 203, 139, 191, 47, 241, 220, 62, 8, 148, 139, 62, 1, 32, 188, 189, 123, 70, 27, 191, 105, 228, 146, 190, 167, 212, 135, 190, 61, 10, 34, 62, 37, 117, 185, 62, 15, 60, 77, 191, 29, 210, 142, 190, 99, 73, 210, 62, 89, 248, 136, 190, 242, 5, 144, 190, 27, 230, 158, 62, 137, 146, 87, 62, 82, 216, 51, 62, 4, 80, 112, 190, 5, 90, 87, 63, 245, 21, 53, 62, 158, 52, 224, 62, 37, 244, 46, 63, 201, 214, 76, 62, 7, 149, 248, 190, 228, 229, 69, 190, 18, 147, 81, 63, 25, 251, 6, 191, 34, 8, 103, 63, 173, 30, 249, 62, 62, 96, 116, 63, 124, 103, 126, 63, 185, 40, 241, 62, 190, 195, 5, 63, 200, 21, 32, 63, 16, 81, 23, 190, 4, 226, 33, 63, 124, 126, 40, 191, 203, 55, 255, 61, 92, 208, 198, 62, 188, 68, 194, 190, 132, 243, 106, 62, 14, 186, 53, 62, 248, 149, 0, 191, 140, 74, 139, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 30, 39, 191, 246, 158, 166, 62, 176, 38, 45, 191, 243, 152, 136, 189, 69, 94, 14, 63, 137, 229, 225, 61, 82, 180, 128, 62, 125, 111, 62, 189, 247, 9, 167, 190, 153, 35, 137, 62, 17, 170, 218, 62, 76, 63, 59, 62, 117, 157, 239, 62, 255, 78, 69, 61, 2, 108, 222, 62, 133, 237, 62, 190, 132, 252, 198, 62, 22, 37, 200, 189, 9, 79, 175, 62, 168, 15, 37, 190, 77, 244, 212, 190, 57, 190, 208, 190, 2, 99, 17, 63, 182, 70, 200, 62, 115, 155, 191, 189, 252, 153, 31, 191, 18, 71, 173, 190, 59, 240, 200, 62, 196, 144, 74, 62, 230, 164, 161, 62, 152, 238, 134, 62, 10, 91, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 232, 9, 62, 80, 29, 13, 62, 132, 1, 194, 60, 40, 243, 76, 189, 161, 228, 2, 190, 175, 224, 70, 62, 120, 226, 181, 61, 144, 120, 152, 61, 227, 227, 152, 189, 5, 133, 19, 61, 122, 59, 207, 61, 163, 101, 63, 189, 127, 133, 61, 62, 99, 247, 60, 189, 9, 248, 15, 190, 108, 137, 142, 60, 56, 41, 23, 190, 241, 216, 211, 61, 111, 212, 214, 61, 242, 35, 247, 189, 43, 19, 61, 189, 145, 140, 249, 61, 138, 124, 55, 62, 213, 121, 118, 61, 248, 147, 79, 62, 21, 88, 47, 62, 56, 157, 41, 61, 206, 126, 11, 62, 14, 95, 135, 190, 72, 202, 204, 186, 147, 143, 150, 189, 228, 158, 101, 62, 31, 173, 112, 62, 46, 183, 54, 62, 241, 114, 66, 60, 125, 54, 139, 190, 70, 145, 116, 190, 186, 135, 129, 62, 214, 227, 45, 61, 12, 243, 211, 61, 163, 245, 50, 61, 74, 64, 52, 60, 198, 134, 232, 61, 12, 78, 54, 191, 204, 0, 8, 63, 74, 82, 79, 62, 106, 91, 19, 62, 40, 173, 145, 61, 96, 67, 157, 62, 238, 100, 150, 62, 180, 131, 187, 61, 239, 236, 135, 62, 116, 178, 237, 61, 147, 108, 227, 189, 207, 103, 195, 189, 97, 38, 99, 191, 30, 102, 151, 191, 56, 10, 222, 187, 69, 169, 203, 190, 44, 2, 13, 191, 50, 89, 179, 189, 10, 216, 197, 61, 121, 215, 196, 62, 125, 6, 128, 62, 91, 21, 237, 61, 113, 202, 167, 188, 9, 177, 91, 189, 100, 180, 36, 190, 66, 149, 61, 191, 14, 153, 13, 190, 40, 153, 50, 62, 98, 12, 91, 62, 152, 114, 92, 62, 34, 228, 115, 62, 82, 231, 226, 189, 140, 66, 148, 191, 249, 76, 180, 190, 237, 211, 146, 61, 17, 70, 187, 190, 62, 164, 138, 190, 2, 181, 61, 62, 179, 42, 130, 190, 252, 101, 205, 61, 31, 216, 109, 190, 160, 50, 115, 190, 62, 34, 182, 60, 41, 218, 141, 62, 116, 193, 134, 190, 78, 187, 12, 60, 211, 166, 187, 187, 182, 50, 192, 190, 239, 200, 150, 62, 70, 138, 165, 62, 65, 246, 75, 62, 253, 88, 242, 61, 5, 62, 235, 61, 34, 167, 177, 189, 196, 118, 121, 61, 198, 64, 224, 189, 243, 180, 23, 60, 249, 141, 243, 190, 134, 238, 210, 61, 11, 78, 211, 61, 40, 161, 134, 62, 164, 248, 23, 190, 89, 152, 42, 189, 116, 229, 47, 62, 242, 89, 167, 191, 15, 106, 7, 62, 79, 137, 67, 62, 212, 152, 225, 189, 165, 101, 46, 190, 252, 14, 83, 62, 82, 2, 124, 62, 29, 162, 58, 62, 124, 221, 83, 190, 113, 141, 227, 61, 187, 17, 7, 189, 246, 75, 40, 61, 188, 207, 3, 191, 15, 11, 118, 190, 143, 86, 154, 190, 12, 24, 235, 190, 45, 80, 203, 188, 136, 243, 45, 62, 212, 200, 2, 62, 51, 129, 215, 62, 254, 249, 12, 62, 173, 71, 97, 190, 18, 199, 179, 187, 177, 61, 238, 58, 206, 158, 76, 190, 94, 133, 135, 188, 53, 34, 200, 61, 175, 54, 33, 62, 244, 131, 46, 189, 193, 85, 47, 62, 235, 164, 161, 61, 123, 183, 190, 59, 57, 173, 195, 60, 139, 14, 182, 61, 115, 178, 78, 61, 110, 172, 86, 62, 251, 194, 146, 61, 153, 64, 128, 62, 182, 113, 237, 61, 148, 168, 34, 62, 159, 171, 130, 58, 77, 234, 28, 190, 116, 130, 195, 189, 117, 130, 245, 61, 88, 15, 117, 61, 97, 112, 74, 61, 230, 234, 25, 62, 208, 106, 62, 190, 109, 187, 179, 61, 34, 64, 52, 62, 83, 38, 209, 187, 62, 226, 167, 61, 75, 18, 231, 61, 97, 208, 63, 62, 192, 1, 223, 189, 20, 197, 56, 190, 174, 54, 63, 62, 57, 155, 27, 190, 35, 148, 225, 189, 120, 97, 180, 190, 241, 251, 60, 191, 33, 90, 225, 61, 108, 200, 199, 62, 180, 92, 24, 191, 66, 156, 211, 188, 233, 118, 173, 190, 199, 210, 25, 62, 8, 218, 187, 190, 102, 182, 151, 189, 188, 55, 210, 190, 183, 159, 150, 61, 227, 42, 140, 62, 85, 75, 107, 189, 111, 66, 253, 189, 225, 158, 126, 60, 49, 67, 62, 190, 148, 92, 29, 189, 205, 143, 174, 62, 113, 7, 17, 190, 182, 213, 115, 61, 166, 213, 93, 62, 33, 131, 63, 63, 166, 75, 57, 62, 221, 6, 198, 61, 65, 82, 159, 61, 250, 249, 174, 189, 8, 35, 146, 61, 114, 237, 44, 61, 73, 250, 179, 61, 6, 20, 15, 187, 175, 53, 111, 189, 143, 221, 241, 60, 73, 225, 141, 190, 212, 13, 132, 62, 17, 233, 152, 62, 62, 193, 112, 189, 14, 162, 65, 190, 28, 157, 103, 189, 245, 74, 151, 189, 209, 251, 3, 62, 150, 194, 139, 190, 41, 104, 216, 189, 188, 134, 175, 190, 207, 51, 27, 61, 61, 253, 156, 62, 1, 17, 237, 190, 154, 117, 184, 190, 18, 109, 93, 62, 222, 243, 83, 61, 89, 102, 161, 62, 159, 223, 181, 190, 89, 99, 134, 189, 222, 127, 143, 62, 186, 144, 150, 189, 123, 235, 128, 60, 43, 157, 94, 189, 119, 4, 9, 188, 89, 87, 132, 190, 187, 173, 224, 189, 81, 15, 109, 62, 203, 95, 79, 190, 18, 125, 163, 58, 232, 35, 57, 61, 7, 209, 101, 189, 233, 20, 53, 190, 180, 104, 47, 62, 39, 162, 49, 62, 8, 175, 85, 189, 209, 110, 77, 61, 85, 157, 168, 61, 134, 218, 32, 189, 155, 30, 28, 61, 248, 124, 87, 61, 154, 64, 143, 61, 86, 116, 170, 190, 243, 206, 112, 189, 71, 145, 90, 190, 2, 62, 56, 190, 126, 236, 197, 189, 82, 88, 85, 62, 150, 126, 149, 189, 132, 89, 109, 62, 143, 239, 91, 190, 105, 166, 154, 61, 191, 156, 129, 61, 108, 58, 157, 60, 26, 80, 15, 190, 223, 92, 127, 61, 167, 207, 86, 62, 141, 100, 65, 189, 196, 217, 210, 189, 5, 54, 239, 59, 113, 142, 48, 189, 125, 144, 14, 191, 77, 50, 119, 61, 109, 225, 3, 190, 183, 56, 156, 62, 3, 105, 8, 189, 61, 214, 7, 190, 155, 149, 12, 62, 228, 36, 175, 191, 82, 172, 59, 62, 107, 111, 219, 62, 139, 43, 226, 189, 165, 13, 44, 190, 172, 10, 179, 62, 199, 206, 5, 62, 58, 84, 245, 61, 55, 69, 54, 61, 52, 250, 39, 62, 21, 102, 44, 187, 66, 159, 57, 62, 181, 123, 137, 190, 21, 48, 215, 190, 138, 193, 75, 190, 34, 172, 16, 191, 127, 199, 66, 190, 228, 228, 113, 62, 91, 172, 157, 62, 81, 111, 167, 62, 116, 90, 215, 61, 183, 202, 56, 61, 219, 213, 34, 189, 252, 133, 115, 62, 216, 165, 96, 62, 219, 245, 12, 190, 99, 219, 94, 60, 74, 205, 139, 61, 0, 79, 183, 190, 9, 172, 156, 61, 111, 63, 140, 61, 243, 13, 199, 61, 4, 10, 141, 189, 52, 123, 14, 190, 246, 141, 161, 61, 65, 79, 151, 190, 16, 137, 108, 61, 0, 130, 173, 190, 77, 201, 49, 190, 245, 186, 94, 62, 25, 190, 190, 61, 25, 37, 64, 191, 64, 221, 212, 190, 123, 237, 113, 62, 13, 134, 145, 60, 134, 92, 181, 62, 224, 46, 205, 188, 78, 20, 157, 189, 219, 254, 240, 62, 25, 135, 63, 62, 150, 93, 163, 189, 63, 189, 1, 190, 24, 249, 159, 61, 183, 142, 77, 62, 141, 155, 110, 62, 171, 234, 123, 190, 200, 173, 62, 62, 70, 158, 250, 187, 171, 177, 30, 62, 129, 104, 222, 61, 82, 72, 186, 61, 141, 252, 19, 61, 105, 245, 5, 61, 216, 187, 164, 62, 187, 91, 27, 190, 125, 91, 105, 61, 242, 85, 28, 190, 85, 223, 71, 62, 110, 242, 3, 62, 147, 242, 185, 188, 223, 133, 34, 189, 166, 176, 100, 61, 92, 142, 254, 186, 158, 114, 100, 62, 29, 184, 84, 62, 50, 114, 151, 190, 122, 78, 244, 61, 27, 132, 201, 189, 68, 37, 76, 62, 30, 198, 80, 61, 63, 217, 133, 190, 98, 94, 1, 191, 53, 153, 65, 62, 160, 98, 145, 61, 165, 165, 1, 62, 46, 70, 67, 189, 16, 152, 169, 190, 64, 27, 81, 190, 162, 129, 243, 190, 145, 169, 26, 190, 55, 163, 243, 190, 247, 178, 25, 62, 60, 215, 5, 62, 163, 46, 196, 190, 187, 218, 206, 188, 104, 144, 206, 189, 182, 205, 88, 190, 125, 18, 208, 60, 105, 185, 119, 62, 118, 160, 81, 62, 10, 194, 109, 186, 115, 242, 48, 62, 203, 238, 220, 61, 199, 125, 185, 61, 44, 223, 142, 60, 108, 47, 16, 188, 212, 180, 5, 187, 207, 28, 82, 62, 5, 36, 59, 190, 96, 15, 177, 190, 254, 173, 14, 188, 157, 92, 126, 61, 44, 63, 19, 190, 161, 131, 72, 62, 59, 30, 172, 61, 137, 28, 47, 62, 157, 146, 253, 61, 187, 25, 100, 190, 162, 95, 109, 191, 163, 114, 204, 190, 22, 167, 86, 190, 58, 207, 124, 62, 25, 204, 145, 190, 210, 237, 73, 62, 241, 66, 65, 61, 128, 62, 130, 190, 11, 160, 140, 61, 174, 22, 98, 190, 114, 238, 138, 62, 51, 23, 128, 190, 250, 246, 158, 190, 217, 163, 44, 188, 248, 122, 209, 189, 222, 58, 129, 62, 9, 166, 92, 190, 45, 73, 34, 60, 144, 50, 169, 61, 181, 103, 158, 190, 107, 205, 106, 61, 67, 220, 121, 60, 179, 180, 160, 61, 253, 201, 25, 189, 109, 185, 87, 190, 185, 189, 183, 188, 216, 142, 38, 62, 104, 83, 1, 61, 4, 126, 7, 190, 84, 198, 6, 191, 18, 0, 129, 190, 2, 46, 15, 190, 4, 239, 174, 61, 48, 200, 54, 61, 93, 15, 178, 61, 69, 136, 182, 189, 96, 227, 135, 189, 174, 108, 31, 62, 71, 37, 78, 190, 25, 94, 105, 61, 76, 76, 63, 62, 106, 199, 12, 62, 183, 141, 68, 190, 118, 30, 90, 62, 227, 29, 240, 61, 242, 19, 103, 189, 132, 182, 149, 61, 41, 117, 249, 189, 160, 115, 144, 61, 241, 69, 97, 61, 111, 240, 66, 189, 77, 190, 156, 187, 221, 94, 59, 190, 143, 89, 64, 61, 111, 187, 120, 61, 146, 110, 128, 62, 173, 84, 149, 189, 119, 182, 20, 62, 46, 99, 54, 62, 156, 79, 33, 190, 247, 7, 60, 61, 33, 107, 163, 61, 88, 214, 109, 62, 220, 36, 193, 189, 35, 115, 39, 61, 199, 97, 129, 190, 253, 165, 210, 190, 133, 241, 19, 62, 216, 122, 168, 191, 71, 55, 127, 191, 108, 230, 12, 189, 149, 64, 115, 191, 62, 113, 229, 61, 59, 5, 163, 191, 137, 89, 104, 62, 54, 65, 240, 188, 238, 168, 125, 61, 73, 55, 46, 62, 171, 67, 189, 189, 127, 76, 90, 191, 179, 66, 87, 187, 240, 243, 243, 190, 49, 172, 176, 190, 125, 112, 196, 61, 87, 47, 253, 61, 158, 231, 98, 189, 42, 14, 170, 62, 104, 89, 104, 61, 25, 54, 167, 61, 54, 185, 42, 62, 117, 183, 100, 190, 163, 204, 22, 191, 254, 122, 26, 191, 244, 42, 19, 190, 38, 31, 246, 190, 108, 135, 68, 190, 145, 38, 6, 190, 180, 245, 18, 190, 54, 204, 119, 61, 208, 193, 126, 191, 190, 35, 70, 190, 214, 43, 226, 61, 166, 106, 172, 189, 36, 250, 55, 190, 115, 31, 63, 190, 63, 33, 96, 61, 2, 24, 121, 191, 41, 164, 155, 190, 254, 142, 125, 59, 17, 223, 156, 60, 209, 61, 198, 190, 44, 172, 132, 62, 2, 136, 8, 190, 74, 82, 79, 190, 64, 135, 176, 190, 83, 38, 148, 191, 1, 210, 251, 190, 6, 19, 139, 186, 193, 227, 34, 191, 118, 26, 236, 60, 180, 28, 16, 190, 113, 225, 158, 188, 251, 158, 141, 61, 251, 70, 251, 60, 45, 160, 236, 61, 140, 59, 148, 189, 110, 213, 53, 62, 57, 104, 86, 190, 34, 152, 197, 60, 125, 120, 21, 189, 90, 154, 177, 190, 194, 57, 20, 62, 57, 181, 194, 189, 45, 96, 17, 61, 107, 67, 56, 62, 27, 249, 196, 189, 0, 95, 27, 61, 49, 77, 209, 60, 153, 190, 129, 62, 67, 90, 242, 61, 29, 142, 208, 62, 203, 55, 62, 61, 40, 1, 34, 62, 3, 130, 39, 62, 20, 80, 139, 62, 213, 171, 130, 61, 46, 145, 99, 190, 61, 79, 221, 188, 241, 13, 41, 62, 63, 1, 93, 187, 60, 23, 3, 189, 98, 181, 159, 190, 231, 112, 8, 189, 102, 1, 79, 189, 52, 105, 183, 190, 34, 74, 213, 61, 90, 145, 83, 62, 249, 213, 188, 62, 122, 171, 119, 189, 44, 220, 123, 61, 122, 128, 31, 62, 193, 225, 103, 189, 23, 248, 21, 190, 154, 241, 93, 62, 206, 234, 179, 62, 224, 142, 136, 61, 195, 75, 180, 61, 233, 114, 246, 61, 237, 188, 192, 61, 244, 191, 95, 61, 211, 209, 14, 61, 199, 63, 14, 63, 191, 33, 7, 191, 0, 72, 12, 62, 209, 222, 79, 190, 248, 235, 16, 190, 157, 210, 62, 190, 88, 137, 110, 61, 191, 132, 48, 63, 202, 212, 39, 190, 151, 20, 215, 189, 54, 58, 136, 62, 9, 29, 171, 62, 248, 46, 129, 62, 94, 211, 223, 190, 218, 79, 217, 189, 60, 67, 108, 61, 57, 154, 67, 190, 216, 230, 102, 61, 200, 193, 214, 189, 66, 248, 164, 61, 208, 0, 5, 188, 23, 168, 67, 190, 159, 26, 79, 61, 33, 15, 36, 189, 162, 148, 83, 61, 239, 166, 15, 190, 107, 186, 129, 61, 134, 72, 184, 61, 53, 209, 202, 61, 60, 33, 227, 61, 9, 219, 79, 61, 228, 248, 178, 189, 68, 103, 88, 62, 40, 245, 14, 190, 159, 48, 31, 62, 157, 212, 22, 61, 39, 136, 15, 189, 77, 28, 22, 62, 49, 125, 38, 61, 0, 252, 110, 189, 131, 123, 133, 61, 66, 150, 77, 188, 228, 165, 81, 61, 165, 192, 172, 189, 57, 143, 92, 188, 80, 53, 255, 189, 22, 218, 27, 190, 166, 16, 149, 60, 94, 124, 138, 190, 113, 13, 233, 61, 138, 131, 61, 190, 77, 252, 112, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 165, 129, 55, 189, 236, 246, 226, 59, 70, 178, 67, 62, 187, 58, 76, 189, 12, 171, 182, 190, 168, 191, 140, 61, 208, 27, 125, 189, 56, 72, 239, 61, 35, 36, 68, 188, 131, 193, 91, 190, 229, 122, 9, 62, 40, 68, 211, 190, 74, 112, 108, 188, 81, 107, 255, 61, 121, 145, 134, 61, 1, 143, 151, 189, 192, 206, 245, 61, 2, 234, 176, 62, 247, 110, 223, 61, 38, 54, 119, 62, 209, 138, 142, 61, 197, 80, 168, 62, 84, 132, 12, 190, 60, 69, 223, 190, 99, 6, 39, 191, 3, 50, 104, 60, 101, 168, 128, 190, 115, 32, 57, 190, 208, 248, 165, 61, 10, 83, 203, 61, 87, 0, 234, 59, 240, 2, 23, 62, 97, 55, 138, 62, 182, 124, 242, 61, 11, 135, 112, 190, 47, 146, 147, 62, 44, 190, 85, 62, 242, 227, 127, 62, 131, 84, 133, 61, 118, 49, 114, 62, 202, 195, 194, 186, 52, 113, 166, 189, 204, 177, 96, 62, 247, 83, 199, 190, 95, 46, 159, 62, 176, 53, 78, 190, 54, 68, 214, 61, 22, 90, 52, 191, 134, 197, 9, 62, 45, 56, 36, 62, 138, 159, 43, 189, 19, 201, 43, 62, 179, 242, 39, 189, 73, 40, 184, 61, 97, 234, 154, 190, 47, 136, 27, 188, 150, 88, 39, 61, 135, 46, 39, 191, 29, 115, 108, 191, 254, 16, 97, 191, 30, 6, 130, 190, 12, 79, 103, 62, 105, 97, 39, 190, 65, 157, 249, 187, 54, 91, 69, 190, 139, 181, 66, 62, 150, 185, 249, 62, 192, 228, 248, 187, 209, 166, 186, 62, 128, 116, 136, 191, 154, 220, 197, 190, 87, 27, 6, 191, 28, 62, 126, 191, 196, 99, 85, 62, 162, 127, 64, 191, 122, 8, 53, 62, 22, 96, 60, 189, 48, 176, 157, 61, 184, 6, 165, 62, 155, 197, 23, 61, 52, 44, 4, 190, 125, 89, 172, 61, 245, 193, 199, 60, 23, 238, 183, 189, 78, 194, 159, 190, 248, 106, 49, 62, 43, 229, 142, 188, 89, 140, 140, 61, 79, 230, 194, 189, 182, 127, 4, 62, 49, 95, 149, 62, 230, 73, 74, 190, 120, 157, 61, 190, 229, 122, 59, 189, 86, 70, 238, 61, 248, 60, 51, 190, 147, 38, 89, 62, 88, 39, 177, 59, 237, 174, 67, 62, 42, 236, 5, 190, 28, 49, 31, 191, 40, 219, 14, 190, 47, 219, 70, 62, 51, 6, 149, 61, 200, 93, 177, 190, 112, 66, 138, 188, 53, 178, 10, 189, 148, 246, 49, 191, 63, 21, 163, 190, 63, 78, 149, 62, 236, 221, 106, 191, 62, 80, 20, 190, 191, 75, 61, 62, 104, 45, 206, 61, 78, 96, 106, 62, 75, 51, 225, 188, 96, 33, 16, 189, 147, 208, 222, 62, 243, 156, 243, 189, 116, 195, 120, 191, 80, 91, 49, 191, 92, 74, 177, 188, 134, 253, 12, 190, 123, 118, 227, 190, 196, 175, 153, 62, 106, 84, 141, 62, 124, 26, 149, 62, 39, 126, 246, 61, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 68, 88, 177, 61, 66, 149, 113, 61, 194, 242, 34, 62, 167, 160, 63, 62, 12, 127, 38, 62, 245, 175, 166, 188, 132, 112, 229, 61, 196, 208, 39, 190, 23, 14, 35, 62, 192, 154, 44, 62, 252, 122, 129, 189, 52, 189, 157, 190, 200, 171, 246, 61, 122, 21, 141, 190, 182, 139, 238, 61, 0, 117, 33, 191, 178, 109, 44, 190, 8, 102, 2, 190, 149, 114, 236, 61, 38, 194, 79, 62, 204, 249, 39, 191, 57, 108, 232, 190, 146, 61, 145, 61, 150, 62, 10, 61, 45, 236, 101, 62, 229, 192, 57, 191, 212, 54, 30, 191, 208, 42, 171, 62, 108, 32, 161, 61, 237, 222, 28, 190, 159, 192, 153, 189, 160, 185, 1, 60, 146, 110, 48, 189, 226, 253, 120, 59, 125, 103, 54, 62, 166, 170, 33, 190, 154, 28, 106, 61, 90, 175, 149, 191, 151, 60, 199, 190, 75, 122, 211, 189, 175, 110, 146, 191, 188, 62, 104, 62, 62, 77, 75, 191, 14, 243, 35, 62, 19, 113, 80, 62, 71, 74, 62, 188, 229, 32, 102, 62, 153, 88, 112, 60, 157, 85, 158, 61, 100, 53, 72, 62, 138, 136, 69, 189, 239, 51, 188, 189, 24, 85, 235, 189, 229, 123, 115, 62, 44, 79, 65, 190, 32, 112, 24, 61, 131, 56, 145, 190, 205, 179, 46, 62, 144, 132, 95, 60, 151, 116, 83, 190, 45, 200, 145, 190, 99, 150, 161, 190, 234, 60, 34, 62, 41, 222, 33, 190, 90, 46, 20, 62, 23, 135, 148, 62, 186, 19, 61, 62, 143, 169, 223, 62, 46, 153, 56, 190, 243, 249, 48, 62, 89, 136, 28, 190, 141, 148, 163, 189, 158, 69, 26, 62, 25, 229, 93, 62, 100, 109, 76, 60, 227, 68, 68, 190, 234, 248, 220, 61, 27, 72, 95, 190, 205, 49, 195, 189, 34, 94, 13, 190, 34, 85, 82, 60, 190, 37, 139, 189, 200, 15, 129, 61, 1, 81, 85, 62, 143, 203, 71, 190, 65, 35, 1, 190, 8, 217, 57, 190, 77, 95, 26, 189, 40, 14, 166, 62, 105, 99, 2, 190, 68, 34, 143, 190, 1, 141, 168, 62, 124, 25, 147, 189, 4, 202, 185, 61, 55, 20, 215, 187, 189, 32, 125, 62, 85, 64, 42, 190, 191, 253, 249, 189, 31, 155, 2, 62, 167, 88, 111, 189, 8, 183, 221, 61, 178, 4, 22, 62, 200, 9, 46, 190, 125, 102, 240, 61, 159, 29, 225, 60, 55, 116, 35, 190, 224, 51, 49, 190, 50, 40, 152, 189, 152, 63, 3, 190, 61, 108, 143, 61, 129, 245, 184, 189, 145, 129, 208, 189, 6, 105, 149, 61, 124, 177, 154, 61, 159, 161, 181, 61, 23, 86, 21, 62, 6, 0, 183, 189, 141, 105, 201, 61, 64, 203, 35, 189, 99, 238, 125, 189, 152, 134, 25, 190, 124, 196, 192, 60, 160, 199, 138, 61, 184, 109, 178, 60, 55, 11, 26, 62, 151, 30, 188, 189, 69, 126, 24, 190, 61, 235, 190, 61, 132, 77, 36, 61, 32, 129, 189, 189, 236, 254, 240, 61, 87, 228, 109, 189, 139, 186, 6, 190, 139, 38, 153, 61, 108, 74, 195, 189, 217, 125, 199, 61, 40, 25, 123, 189, 196, 112, 212, 61, 207, 229, 230, 189, 203, 49, 137, 60, 240, 222, 192, 189, 30, 151, 100, 60, 119, 101, 110, 189, 57, 4, 18, 190, 250, 143, 174, 61, 233, 9, 243, 61, 208, 81, 96, 189, 247, 8, 178, 61, 217, 81, 27, 62, 14, 72, 39, 190, 14, 216, 19, 62, 88, 149, 64, 190, 88, 108, 13, 189, 193, 182, 17, 60, 37, 10, 250, 61, 103, 110, 192, 60, 35, 252, 32, 62, 39, 159, 7, 190, 213, 111, 15, 62, 75, 5, 63, 190, 43, 123, 151, 190, 151, 6, 162, 190, 100, 83, 212, 190, 254, 174, 12, 191, 105, 91, 154, 62, 118, 103, 93, 191, 124, 220, 198, 190, 81, 109, 88, 62, 106, 8, 108, 191, 113, 66, 108, 190, 255, 118, 46, 191, 7, 13, 145, 61, 58, 195, 106, 62, 66, 196, 146, 62, 234, 249, 93, 62, 249, 186, 190, 61, 172, 56, 38, 190, 110, 4, 171, 62, 252, 76, 148, 190, 124, 105, 198, 188, 140, 247, 50, 190, 71, 97, 156, 190, 116, 194, 46, 190, 29, 55, 1, 62, 231, 57, 236, 190, 46, 78, 21, 62, 117, 170, 62, 62, 194, 246, 167, 190, 132, 6, 111, 190, 37, 62, 223, 61, 209, 25, 17, 61, 18, 41, 59, 190, 31, 34, 77, 189, 65, 179, 164, 61, 73, 197, 151, 189, 254, 6, 134, 61, 90, 206, 92, 60, 61, 17, 95, 62, 12, 167, 201, 189, 121, 19, 179, 61, 66, 198, 174, 60, 215, 1, 24, 189, 57, 2, 86, 62, 104, 24, 111, 62, 116, 68, 170, 62, 243, 145, 159, 190, 146, 40, 134, 62, 15, 110, 12, 61, 210, 1, 78, 62, 35, 205, 16, 61, 171, 184, 126, 188, 33, 176, 11, 62, 67, 89, 181, 61, 230, 202, 77, 62, 15, 125, 178, 190, 58, 43, 31, 60, 211, 144, 38, 190, 172, 175, 188, 57, 188, 3, 36, 190, 202, 131, 38, 190, 170, 89, 102, 190, 156, 24, 65, 62, 49, 44, 23, 190, 51, 3, 102, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 133, 147, 189, 51, 251, 116, 60, 11, 35, 126, 189, 176, 20, 47, 61, 166, 55, 146, 62, 201, 98, 129, 190, 171, 191, 55, 62, 228, 152, 23, 62, 107, 222, 138, 59, 90, 99, 182, 189, 217, 65, 40, 190, 253, 26, 181, 62, 144, 88, 7, 62, 160, 35, 89, 62, 232, 124, 60, 62, 225, 159, 20, 62, 142, 50, 241, 61, 212, 93, 161, 62, 185, 152, 21, 61, 165, 101, 30, 61, 143, 229, 202, 189, 215, 224, 157, 60, 15, 253, 9, 190, 18, 134, 138, 190, 213, 255, 160, 189, 113, 177, 24, 62, 67, 78, 74, 61, 254, 140, 112, 60, 66, 172, 81, 190, 71, 3, 28, 190, 25, 143, 39, 62, 133, 208, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 104, 214, 189, 167, 58, 25, 63, 118, 178, 35, 62, 187, 73, 172, 62, 111, 112, 98, 188, 113, 135, 236, 190, 238, 94, 212, 190, 81, 72, 171, 189, 82, 24, 189, 62, 228, 190, 191, 190, 18, 233, 48, 190, 199, 168, 132, 62, 162, 24, 12, 191, 49, 140, 176, 189, 230, 199, 85, 63, 11, 255, 141, 190, 221, 245, 2, 62, 11, 79, 0, 191, 60, 157, 50, 61, 247, 231, 216, 189, 198, 151, 150, 62, 249, 116, 222, 190, 46, 61, 15, 63, 95, 196, 17, 63, 54, 122, 145, 61, 92, 225, 240, 190, 97, 150, 226, 62, 130, 208, 162, 190, 21, 32, 108, 189, 159, 154, 157, 189, 83, 61, 61, 63, 183, 237, 72, 190, 69, 74, 203, 189, 168, 230, 7, 62, 254, 21, 32, 191, 22, 61, 185, 189, 13, 70, 71, 190, 64, 179, 14, 62, 184, 21, 200, 189, 110, 153, 214, 189, 191, 136, 31, 188, 36, 95, 136, 59, 3, 82, 60, 60, 185, 163, 201, 190, 216, 139, 172, 189, 162, 225, 53, 190, 253, 230, 21, 60, 50, 217, 38, 191, 42, 151, 129, 189, 243, 46, 182, 189, 179, 157, 0, 189, 53, 21, 166, 61, 199, 113, 71, 62, 92, 132, 104, 61, 71, 19, 46, 62, 211, 140, 4, 63, 248, 86, 24, 59, 112, 101, 18, 62, 44, 201, 207, 189, 191, 4, 49, 61, 120, 132, 221, 188, 9, 238, 221, 189, 202, 142, 180, 61, 160, 251, 85, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 175, 112, 61, 108, 148, 48, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {171, 142, 73, 62, 172, 102, 138, 191, 182, 13, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {35, 23, 44, 63, 1, 216, 165, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}