// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 23, 238, 62, 109, 111, 39, 191, 75, 7, 212, 62, 125, 96, 226, 189, 163, 228, 206, 191, 54, 131, 136, 190, 38, 100, 183, 190, 100, 245, 19, 62, 123, 102, 88, 190, 135, 70, 224, 62, 141, 97, 101, 61, 151, 234, 48, 63, 146, 118, 132, 191, 112, 4, 80, 63, 139, 188, 184, 61, 34, 47, 100, 62, 124, 26, 212, 191, 66, 65, 235, 190, 15, 142, 184, 189, 78, 20, 156, 190, 23, 48, 111, 190, 241, 6, 11, 63, 7, 165, 136, 190, 207, 147, 140, 190, 101, 183, 128, 190, 179, 78, 124, 191, 148, 113, 151, 190, 206, 140, 12, 191, 244, 80, 22, 63, 124, 131, 170, 190, 180, 216, 176, 62, 206, 254, 185, 191, 84, 50, 179, 190, 60, 161, 13, 190, 198, 90, 200, 63, 192, 112, 214, 62, 114, 37, 52, 191, 197, 198, 6, 191, 238, 109, 24, 62, 91, 186, 69, 62, 123, 65, 122, 191, 67, 133, 84, 62, 31, 81, 114, 191, 36, 54, 245, 189, 226, 12, 221, 61, 251, 34, 24, 191, 146, 238, 105, 63, 62, 111, 7, 63, 89, 185, 212, 62, 100, 120, 251, 189, 92, 88, 54, 190, 134, 196, 91, 190, 90, 190, 153, 191, 240, 76, 207, 62, 170, 14, 209, 61, 15, 4, 5, 190, 227, 131, 252, 190, 222, 41, 44, 191, 165, 173, 182, 190, 42, 192, 104, 189, 156, 207, 243, 62, 174, 154, 147, 191, 26, 106, 65, 190, 254, 163, 214, 62, 229, 224, 224, 190, 97, 249, 153, 190, 98, 238, 121, 62, 252, 220, 145, 62, 17, 109, 31, 61, 128, 79, 52, 190, 240, 114, 139, 63, 160, 71, 52, 62, 129, 23, 232, 62, 109, 232, 105, 63, 122, 67, 72, 62, 124, 223, 61, 191, 185, 92, 73, 62, 251, 114, 66, 63, 86, 161, 229, 190, 58, 0, 143, 63, 163, 74, 255, 62, 196, 119, 118, 63, 4, 59, 138, 63, 121, 169, 251, 62, 80, 67, 239, 62, 253, 165, 16, 63, 48, 45, 12, 190, 17, 182, 2, 63, 150, 131, 83, 191, 124, 186, 156, 61, 14, 165, 184, 62, 138, 210, 7, 191, 19, 108, 15, 62, 136, 137, 37, 62, 118, 137, 36, 191, 101, 67, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 251, 25, 191, 180, 190, 152, 62, 67, 176, 77, 191, 172, 248, 115, 189, 247, 55, 34, 63, 160, 250, 187, 61, 27, 149, 27, 62, 178, 221, 14, 190, 35, 4, 125, 190, 75, 160, 132, 62, 17, 215, 117, 62, 147, 224, 183, 62, 167, 127, 220, 62, 24, 98, 171, 187, 229, 44, 19, 63, 246, 215, 105, 190, 59, 4, 186, 62, 205, 24, 252, 60, 167, 255, 124, 62, 88, 58, 135, 189, 35, 76, 152, 190, 190, 35, 221, 190, 202, 37, 0, 63, 0, 36, 203, 62, 27, 113, 51, 190, 59, 169, 248, 190, 236, 155, 73, 190, 164, 38, 154, 62, 54, 93, 4, 62, 194, 213, 94, 62, 143, 164, 141, 62, 101, 4, 2, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 1, 49, 62, 247, 144, 130, 61, 187, 129, 169, 189, 66, 208, 153, 60, 166, 157, 105, 190, 135, 87, 224, 61, 2, 120, 141, 61, 70, 236, 213, 61, 99, 205, 13, 190, 92, 161, 176, 60, 59, 194, 148, 61, 193, 187, 22, 189, 251, 103, 90, 62, 98, 229, 160, 61, 190, 69, 50, 190, 143, 136, 160, 188, 167, 47, 241, 189, 200, 139, 1, 62, 168, 168, 169, 61, 63, 44, 244, 189, 37, 128, 152, 189, 241, 217, 20, 62, 90, 238, 52, 62, 77, 251, 36, 61, 219, 158, 80, 62, 70, 184, 56, 62, 87, 254, 135, 60, 45, 80, 14, 62, 26, 248, 133, 190, 250, 190, 141, 61, 158, 74, 242, 188, 119, 90, 134, 62, 184, 255, 102, 62, 62, 27, 99, 62, 209, 55, 80, 61, 21, 111, 172, 190, 216, 232, 163, 189, 148, 204, 157, 62, 145, 15, 92, 61, 204, 126, 195, 61, 107, 31, 142, 61, 254, 74, 115, 189, 155, 132, 39, 62, 143, 220, 83, 191, 187, 34, 25, 63, 25, 197, 67, 62, 130, 211, 62, 62, 27, 213, 199, 61, 248, 37, 168, 62, 120, 145, 193, 62, 192, 14, 144, 61, 179, 49, 147, 62, 193, 249, 213, 61, 205, 74, 32, 190, 21, 26, 150, 189, 12, 82, 112, 191, 98, 64, 171, 191, 183, 13, 222, 187, 156, 30, 163, 190, 20, 235, 9, 191, 92, 13, 199, 189, 185, 175, 204, 61, 50, 97, 200, 62, 3, 23, 137, 62, 233, 173, 252, 62, 252, 164, 152, 60, 98, 208, 169, 189, 41, 100, 4, 190, 22, 164, 75, 191, 148, 54, 151, 189, 206, 158, 73, 62, 221, 9, 128, 62, 132, 63, 86, 62, 96, 88, 18, 62, 238, 15, 135, 189, 69, 115, 177, 191, 128, 218, 17, 190, 78, 85, 159, 60, 228, 86, 151, 191, 218, 78, 92, 190, 152, 116, 67, 62, 25, 145, 203, 188, 55, 91, 44, 62, 62, 125, 150, 191, 220, 102, 106, 190, 8, 76, 21, 62, 223, 54, 133, 62, 74, 16, 189, 190, 201, 229, 131, 189, 18, 42, 83, 62, 130, 161, 152, 190, 229, 155, 122, 62, 211, 191, 156, 62, 122, 185, 77, 62, 243, 168, 167, 61, 120, 129, 112, 61, 204, 88, 253, 59, 216, 238, 73, 61, 47, 101, 183, 189, 109, 170, 14, 190, 253, 192, 10, 191, 109, 172, 232, 61, 140, 15, 217, 61, 195, 32, 143, 62, 8, 28, 51, 190, 29, 71, 55, 190, 90, 73, 54, 62, 221, 134, 209, 191, 78, 126, 87, 62, 134, 189, 195, 61, 98, 115, 170, 190, 235, 108, 143, 190, 105, 160, 84, 62, 226, 66, 210, 62, 63, 217, 76, 62, 248, 32, 137, 190, 173, 170, 191, 61, 216, 4, 227, 188, 248, 246, 149, 61, 200, 62, 6, 191, 35, 132, 148, 190, 147, 159, 188, 190, 52, 165, 33, 191, 200, 246, 191, 188, 37, 138, 73, 62, 169, 66, 229, 61, 20, 11, 199, 62, 193, 2, 181, 61, 27, 101, 125, 190, 66, 244, 161, 189, 21, 58, 123, 190, 139, 185, 22, 190, 97, 53, 216, 187, 239, 105, 254, 60, 23, 238, 176, 61, 84, 173, 96, 187, 85, 134, 139, 61, 105, 76, 166, 189, 131, 40, 138, 188, 123, 7, 222, 61, 46, 213, 47, 62, 28, 143, 247, 61, 249, 164, 42, 62, 228, 195, 147, 61, 81, 35, 145, 62, 104, 238, 0, 62, 216, 62, 161, 61, 100, 127, 157, 189, 25, 75, 54, 190, 78, 92, 88, 189, 252, 245, 48, 62, 140, 94, 3, 62, 76, 212, 89, 61, 52, 76, 241, 61, 191, 129, 51, 190, 208, 68, 1, 62, 246, 25, 57, 62, 75, 99, 175, 61, 46, 205, 177, 61, 58, 127, 21, 62, 244, 232, 73, 62, 49, 184, 38, 191, 114, 19, 142, 189, 121, 139, 64, 62, 66, 212, 84, 190, 251, 33, 29, 191, 121, 203, 178, 190, 224, 55, 52, 191, 89, 42, 52, 62, 83, 246, 205, 62, 231, 153, 81, 191, 71, 170, 22, 61, 47, 117, 231, 190, 26, 173, 5, 62, 225, 164, 245, 190, 92, 115, 71, 189, 123, 219, 192, 190, 226, 239, 33, 60, 99, 9, 105, 62, 117, 122, 17, 190, 191, 139, 53, 191, 38, 15, 88, 190, 254, 107, 72, 190, 66, 201, 235, 58, 107, 109, 254, 62, 37, 202, 5, 190, 142, 182, 3, 62, 194, 166, 147, 62, 147, 205, 67, 63, 31, 98, 65, 62, 48, 80, 201, 61, 150, 155, 244, 60, 72, 167, 201, 190, 155, 135, 0, 189, 91, 214, 72, 61, 83, 147, 94, 62, 119, 152, 29, 189, 20, 56, 80, 190, 227, 82, 130, 189, 14, 211, 161, 190, 254, 100, 122, 62, 25, 188, 136, 62, 146, 253, 237, 189, 149, 150, 62, 190, 48, 166, 201, 61, 162, 56, 173, 61, 217, 165, 143, 62, 49, 45, 217, 190, 45, 107, 236, 189, 98, 61, 188, 190, 117, 28, 69, 189, 214, 96, 12, 63, 8, 124, 26, 191, 162, 135, 24, 191, 140, 139, 69, 62, 183, 218, 131, 61, 165, 247, 183, 62, 240, 233, 4, 191, 169, 210, 141, 190, 55, 40, 155, 62, 63, 233, 168, 189, 225, 66, 77, 61, 94, 50, 244, 187, 66, 31, 122, 61, 71, 199, 14, 191, 94, 169, 139, 190, 238, 0, 167, 62, 25, 88, 2, 190, 46, 8, 156, 61, 13, 44, 233, 189, 116, 67, 170, 189, 57, 91, 203, 189, 14, 60, 249, 60, 214, 170, 65, 62, 103, 8, 164, 189, 68, 220, 15, 62, 234, 68, 160, 61, 49, 249, 92, 61, 165, 17, 111, 61, 134, 243, 220, 61, 114, 196, 12, 62, 210, 144, 19, 191, 252, 248, 61, 189, 23, 165, 155, 190, 19, 90, 179, 190, 178, 224, 59, 189, 15, 83, 134, 62, 175, 197, 43, 61, 104, 37, 140, 62, 202, 122, 134, 190, 255, 55, 3, 62, 201, 247, 224, 61, 217, 60, 193, 61, 227, 166, 211, 189, 1, 129, 134, 61, 148, 107, 107, 62, 129, 251, 72, 61, 123, 158, 251, 189, 92, 154, 201, 61, 61, 68, 72, 190, 19, 147, 16, 191, 89, 1, 107, 61, 162, 4, 244, 189, 151, 223, 168, 62, 229, 177, 151, 189, 105, 38, 98, 190, 176, 179, 13, 62, 50, 1, 211, 191, 242, 241, 93, 62, 184, 113, 170, 62, 240, 8, 182, 190, 240, 37, 135, 190, 79, 247, 182, 62, 38, 63, 157, 62, 122, 254, 36, 62, 28, 71, 153, 189, 205, 95, 12, 62, 36, 238, 175, 60, 162, 51, 85, 62, 36, 139, 139, 190, 21, 39, 243, 190, 202, 242, 137, 190, 176, 176, 57, 191, 115, 20, 69, 190, 51, 196, 147, 62, 85, 34, 147, 62, 207, 171, 151, 62, 38, 92, 113, 61, 26, 151, 54, 61, 145, 145, 150, 190, 195, 21, 122, 62, 91, 6, 140, 62, 234, 16, 182, 190, 42, 156, 131, 190, 73, 113, 163, 60, 84, 142, 163, 190, 102, 57, 13, 189, 29, 105, 164, 61, 103, 55, 240, 60, 217, 15, 13, 190, 47, 246, 133, 190, 66, 15, 68, 62, 19, 122, 241, 190, 236, 171, 20, 186, 159, 167, 151, 190, 177, 58, 105, 190, 91, 77, 59, 62, 181, 233, 164, 61, 167, 61, 131, 191, 242, 53, 38, 191, 54, 85, 101, 62, 143, 18, 142, 189, 230, 102, 202, 62, 155, 152, 22, 189, 104, 244, 5, 190, 95, 88, 4, 63, 65, 250, 102, 62, 249, 20, 151, 188, 73, 88, 75, 189, 173, 250, 232, 61, 84, 7, 161, 62, 47, 172, 70, 62, 110, 5, 164, 190, 134, 180, 121, 62, 221, 27, 46, 61, 101, 102, 6, 62, 113, 57, 244, 61, 137, 41, 94, 61, 159, 214, 25, 188, 173, 8, 6, 62, 45, 47, 130, 62, 185, 242, 94, 189, 28, 247, 190, 61, 191, 105, 251, 189, 196, 93, 151, 62, 192, 27, 89, 62, 140, 85, 38, 190, 251, 150, 72, 59, 186, 157, 160, 61, 242, 104, 22, 62, 52, 204, 98, 62, 242, 214, 145, 62, 69, 60, 213, 190, 233, 142, 43, 62, 70, 73, 99, 189, 143, 114, 155, 62, 148, 213, 39, 62, 111, 25, 172, 190, 206, 118, 35, 191, 207, 95, 222, 61, 74, 11, 90, 61, 14, 183, 168, 61, 123, 207, 70, 61, 113, 178, 184, 190, 221, 223, 61, 190, 102, 186, 217, 190, 117, 90, 14, 190, 187, 233, 8, 191, 238, 18, 117, 61, 185, 138, 116, 61, 60, 197, 10, 191, 210, 118, 16, 189, 133, 102, 28, 190, 12, 109, 200, 190, 77, 84, 180, 61, 68, 204, 145, 62, 56, 173, 131, 62, 116, 184, 79, 61, 121, 118, 189, 61, 124, 53, 66, 62, 80, 71, 91, 60, 227, 140, 41, 62, 116, 127, 250, 189, 74, 230, 200, 188, 21, 46, 3, 62, 144, 62, 211, 190, 148, 188, 56, 191, 189, 228, 172, 61, 212, 215, 192, 61, 158, 50, 86, 190, 27, 13, 174, 61, 58, 1, 61, 61, 3, 44, 6, 62, 6, 70, 236, 61, 187, 25, 100, 190, 249, 188, 148, 191, 18, 216, 32, 191, 173, 37, 29, 191, 97, 208, 52, 62, 194, 76, 216, 190, 48, 18, 137, 62, 136, 140, 102, 62, 158, 9, 239, 190, 65, 252, 15, 62, 173, 86, 44, 190, 179, 188, 126, 62, 51, 134, 199, 189, 159, 34, 27, 190, 181, 36, 4, 61, 216, 133, 143, 190, 57, 179, 195, 62, 210, 58, 238, 190, 242, 140, 234, 61, 8, 251, 78, 62, 205, 27, 27, 191, 241, 232, 133, 61, 37, 208, 149, 61, 216, 171, 195, 61, 205, 215, 225, 189, 232, 131, 220, 190, 58, 172, 48, 190, 55, 159, 229, 61, 213, 5, 14, 62, 20, 246, 155, 61, 32, 234, 81, 191, 98, 94, 32, 191, 140, 201, 3, 190, 185, 106, 9, 60, 181, 26, 227, 189, 14, 47, 55, 62, 192, 220, 234, 189, 63, 21, 11, 190, 53, 107, 12, 62, 173, 44, 9, 190, 36, 170, 166, 188, 180, 23, 33, 62, 247, 28, 2, 62, 24, 99, 14, 190, 184, 254, 144, 62, 21, 127, 130, 62, 10, 196, 167, 189, 162, 234, 130, 61, 158, 249, 124, 189, 201, 2, 187, 61, 150, 147, 43, 61, 175, 138, 69, 189, 178, 54, 157, 188, 158, 80, 240, 189, 52, 176, 160, 61, 46, 144, 186, 61, 97, 2, 114, 62, 149, 107, 135, 189, 7, 240, 22, 62, 199, 20, 76, 62, 243, 164, 2, 190, 146, 87, 19, 62, 154, 158, 254, 61, 165, 247, 147, 62, 190, 132, 128, 190, 127, 167, 95, 62, 199, 97, 129, 190, 134, 226, 15, 191, 150, 230, 245, 61, 217, 255, 176, 191, 153, 237, 179, 191, 108, 230, 12, 189, 36, 77, 146, 191, 159, 83, 81, 61, 126, 226, 181, 191, 67, 108, 72, 62, 135, 181, 67, 189, 213, 116, 246, 189, 132, 52, 26, 62, 240, 82, 250, 189, 216, 170, 125, 191, 126, 165, 100, 61, 185, 6, 57, 191, 224, 16, 187, 190, 125, 112, 196, 61, 87, 47, 253, 61, 157, 173, 113, 189, 159, 230, 157, 62, 94, 18, 231, 60, 181, 0, 164, 189, 106, 142, 7, 62, 61, 113, 120, 190, 229, 111, 11, 191, 21, 224, 36, 191, 15, 112, 168, 190, 253, 228, 5, 191, 58, 146, 19, 188, 210, 72, 139, 190, 180, 245, 18, 190, 203, 22, 218, 61, 119, 236, 140, 191, 72, 227, 178, 190, 11, 169, 98, 61, 221, 48, 10, 190, 36, 250, 55, 190, 202, 172, 15, 190, 9, 138, 140, 187, 108, 125, 138, 191, 66, 186, 114, 190, 20, 21, 151, 187, 75, 46, 249, 188, 68, 43, 140, 190, 86, 190, 99, 62, 60, 70, 45, 60, 99, 32, 107, 190, 130, 35, 138, 190, 212, 111, 219, 191, 115, 127, 231, 190, 228, 8, 222, 188, 69, 66, 20, 191, 136, 219, 62, 61, 42, 9, 2, 189, 3, 244, 208, 189, 7, 167, 114, 61, 137, 241, 154, 187, 9, 151, 175, 61, 77, 155, 192, 189, 70, 10, 31, 62, 58, 59, 119, 190, 33, 49, 72, 61, 88, 96, 164, 189, 29, 239, 191, 190, 4, 245, 47, 62, 19, 229, 186, 189, 49, 19, 54, 189, 136, 202, 165, 61, 22, 69, 58, 189, 212, 50, 201, 189, 50, 3, 166, 60, 197, 168, 130, 62, 94, 112, 29, 62, 214, 206, 218, 62, 31, 245, 28, 61, 81, 146, 243, 61, 69, 129, 143, 61, 100, 146, 149, 62, 72, 149, 160, 189, 163, 171, 115, 190, 18, 15, 44, 188, 120, 0, 192, 61, 144, 85, 80, 189, 21, 41, 106, 189, 130, 13, 3, 191, 71, 113, 187, 189, 197, 13, 176, 189, 197, 252, 202, 190, 223, 160, 61, 189, 253, 28, 92, 62, 239, 236, 178, 62, 135, 5, 117, 189, 213, 254, 32, 190, 26, 119, 203, 61, 118, 158, 229, 189, 103, 86, 75, 189, 245, 42, 92, 62, 37, 57, 151, 62, 223, 215, 170, 61, 96, 73, 24, 62, 206, 30, 141, 61, 44, 86, 62, 62, 25, 80, 88, 61, 216, 221, 33, 61, 194, 45, 11, 63, 11, 160, 210, 190, 44, 227, 85, 62, 108, 244, 133, 190, 198, 23, 192, 189, 140, 199, 197, 190, 238, 0, 188, 61, 11, 93, 92, 63, 24, 105, 37, 190, 159, 75, 152, 189, 245, 246, 140, 62, 153, 235, 187, 62, 82, 205, 117, 62, 20, 50, 224, 190, 230, 252, 41, 190, 230, 197, 19, 61, 188, 236, 21, 190, 14, 248, 181, 61, 66, 78, 176, 189, 87, 16, 229, 61, 242, 139, 247, 58, 154, 10, 4, 190, 153, 62, 235, 189, 26, 26, 171, 189, 220, 49, 94, 190, 159, 137, 193, 189, 172, 90, 164, 59, 91, 224, 12, 61, 122, 69, 132, 61, 89, 163, 57, 190, 207, 195, 231, 61, 24, 254, 151, 190, 135, 218, 39, 62, 109, 186, 124, 189, 147, 184, 195, 58, 177, 180, 1, 190, 49, 48, 146, 60, 197, 89, 121, 62, 44, 236, 19, 190, 155, 119, 203, 189, 171, 54, 145, 62, 1, 120, 157, 189, 254, 91, 151, 60, 44, 126, 203, 190, 236, 87, 41, 190, 34, 220, 137, 190, 218, 56, 188, 190, 219, 3, 142, 188, 178, 205, 225, 190, 66, 27, 74, 62, 150, 152, 11, 190, 224, 29, 143, 62, 219, 253, 223, 189, 141, 205, 2, 189, 200, 154, 105, 61, 130, 122, 109, 61, 31, 106, 221, 189, 220, 240, 50, 190, 235, 223, 169, 188, 7, 135, 199, 61, 128, 93, 81, 189, 184, 199, 83, 61, 234, 185, 173, 189, 195, 134, 207, 189, 58, 37, 145, 188, 56, 89, 224, 189, 213, 59, 34, 60, 85, 232, 39, 190, 174, 186, 104, 60, 247, 114, 31, 61, 77, 5, 215, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 11, 219, 192, 189, 23, 7, 126, 58, 130, 129, 48, 60, 110, 246, 172, 188, 161, 56, 22, 61, 221, 62, 9, 190, 93, 192, 17, 190, 112, 72, 249, 60, 181, 232, 127, 61, 119, 108, 224, 61, 177, 124, 180, 189, 5, 12, 239, 187, 18, 251, 95, 62, 239, 61, 98, 60, 5, 40, 26, 191, 218, 86, 90, 61, 113, 184, 35, 190, 168, 170, 178, 60, 125, 184, 224, 189, 222, 5, 5, 191, 226, 47, 6, 62, 230, 104, 78, 191, 233, 104, 53, 189, 95, 93, 146, 62, 50, 155, 245, 189, 108, 240, 108, 190, 147, 191, 171, 61, 7, 142, 226, 62, 14, 189, 157, 189, 160, 30, 26, 62, 207, 157, 182, 61, 130, 252, 109, 62, 108, 32, 20, 190, 165, 120, 80, 191, 122, 130, 92, 191, 109, 175, 11, 190, 83, 234, 223, 190, 109, 172, 47, 190, 0, 133, 164, 189, 140, 19, 32, 62, 28, 167, 183, 61, 191, 155, 125, 62, 72, 51, 82, 63, 179, 229, 31, 62, 87, 247, 204, 190, 238, 241, 9, 63, 139, 16, 98, 61, 242, 202, 158, 62, 49, 131, 175, 61, 221, 165, 152, 62, 121, 122, 134, 189, 60, 188, 210, 189, 77, 123, 142, 62, 99, 82, 85, 191, 250, 10, 112, 62, 114, 199, 8, 190, 146, 183, 8, 62, 154, 52, 108, 191, 143, 66, 53, 62, 144, 53, 216, 61, 116, 237, 87, 189, 153, 214, 96, 62, 85, 234, 116, 61, 146, 25, 51, 62, 185, 218, 132, 190, 61, 203, 131, 190, 153, 203, 64, 191, 240, 248, 232, 190, 105, 154, 170, 191, 212, 162, 154, 191, 167, 91, 167, 190, 79, 13, 174, 62, 86, 60, 53, 190, 123, 247, 56, 189, 3, 166, 144, 190, 148, 46, 163, 62, 106, 57, 27, 63, 115, 105, 179, 187, 72, 107, 224, 62, 210, 152, 117, 191, 185, 254, 229, 190, 0, 86, 94, 191, 164, 187, 68, 191, 12, 34, 70, 62, 148, 247, 73, 191, 123, 110, 136, 62, 241, 152, 13, 190, 94, 73, 78, 188, 69, 41, 147, 62, 60, 16, 53, 61, 141, 52, 51, 189, 14, 168, 245, 187, 131, 23, 143, 60, 255, 221, 61, 190, 128, 66, 179, 190, 218, 236, 144, 189, 62, 211, 247, 61, 74, 131, 67, 62, 74, 69, 228, 61, 19, 99, 151, 61, 68, 152, 149, 62, 229, 26, 49, 189, 144, 126, 200, 61, 209, 170, 126, 189, 3, 224, 183, 61, 96, 50, 44, 190, 201, 99, 201, 62, 6, 0, 120, 61, 251, 96, 148, 62, 219, 144, 130, 62, 9, 146, 31, 191, 34, 194, 190, 189, 130, 10, 4, 62, 156, 12, 47, 189, 127, 193, 128, 190, 174, 224, 133, 60, 60, 138, 211, 188, 0, 225, 141, 191, 92, 73, 154, 190, 246, 228, 9, 63, 234, 11, 143, 191, 214, 18, 151, 190, 83, 255, 192, 61, 204, 171, 8, 62, 169, 251, 6, 62, 243, 180, 70, 190, 174, 69, 48, 61, 42, 79, 188, 62, 110, 48, 45, 190, 251, 254, 181, 191, 105, 106, 90, 191, 147, 35, 241, 189, 226, 204, 188, 190, 133, 227, 208, 190, 76, 22, 246, 61, 235, 108, 170, 62, 228, 34, 201, 62, 245, 126, 123, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 193, 148, 161, 62, 252, 211, 71, 190, 133, 87, 28, 62, 176, 170, 214, 61, 148, 249, 0, 62, 213, 227, 118, 190, 135, 95, 150, 61, 95, 252, 247, 189, 55, 60, 168, 61, 160, 104, 241, 61, 68, 225, 50, 190, 200, 255, 87, 190, 143, 194, 28, 62, 234, 162, 209, 190, 178, 144, 95, 62, 140, 113, 65, 191, 107, 43, 232, 189, 229, 202, 238, 59, 179, 130, 224, 61, 206, 171, 86, 62, 59, 94, 164, 191, 49, 119, 18, 191, 106, 18, 247, 61, 221, 19, 52, 62, 102, 128, 207, 62, 254, 137, 129, 191, 73, 202, 60, 191, 197, 71, 213, 62, 236, 202, 17, 62, 65, 77, 101, 190, 233, 220, 57, 190, 200, 121, 16, 190, 25, 228, 182, 189, 69, 186, 114, 61, 185, 103, 81, 62, 201, 102, 59, 190, 207, 255, 0, 62, 97, 12, 151, 191, 55, 252, 52, 191, 94, 197, 159, 190, 199, 139, 188, 191, 151, 51, 175, 61, 105, 241, 25, 191, 77, 28, 59, 62, 99, 227, 110, 62, 41, 73, 168, 189, 254, 46, 146, 62, 164, 30, 76, 61, 78, 94, 131, 189, 133, 93, 66, 62, 133, 171, 129, 190, 10, 202, 4, 190, 14, 162, 244, 189, 5, 67, 135, 62, 100, 241, 103, 190, 76, 76, 144, 61, 25, 80, 187, 190, 127, 240, 58, 62, 159, 106, 41, 61, 186, 117, 105, 190, 254, 103, 179, 190, 28, 55, 193, 190, 76, 123, 182, 61, 251, 244, 23, 190, 195, 215, 39, 62, 130, 25, 122, 62, 202, 202, 0, 62, 169, 34, 0, 63, 238, 128, 194, 190, 127, 121, 201, 61, 108, 229, 42, 190, 193, 71, 132, 189, 80, 223, 217, 61, 145, 125, 148, 62, 55, 184, 163, 188, 17, 139, 150, 190, 17, 116, 228, 61, 250, 249, 213, 189, 54, 115, 134, 189, 217, 189, 95, 190, 216, 128, 175, 60, 84, 211, 167, 189, 57, 180, 57, 61, 39, 34, 147, 62, 6, 109, 94, 190, 2, 47, 1, 190, 221, 177, 108, 190, 16, 204, 89, 190, 63, 126, 134, 62, 89, 104, 2, 190, 80, 204, 200, 190, 241, 89, 136, 62, 133, 101, 187, 189, 85, 184, 238, 61, 26, 117, 74, 60, 129, 125, 139, 62, 85, 64, 42, 190, 56, 239, 9, 190, 161, 60, 214, 61, 167, 88, 111, 189, 189, 163, 175, 61, 241, 96, 22, 62, 83, 117, 64, 190, 215, 19, 204, 61, 100, 0, 46, 60, 34, 96, 47, 190, 114, 180, 64, 190, 196, 175, 175, 189, 249, 99, 7, 190, 15, 57, 132, 61, 30, 109, 214, 189, 145, 129, 208, 189, 32, 253, 92, 61, 109, 79, 152, 61, 136, 62, 165, 61, 36, 142, 252, 61, 54, 183, 215, 189, 113, 169, 177, 61, 107, 13, 177, 189, 237, 213, 197, 189, 127, 93, 40, 190, 124, 196, 192, 60, 160, 199, 138, 61, 200, 234, 173, 188, 31, 31, 11, 62, 149, 152, 190, 189, 102, 98, 32, 190, 20, 94, 179, 61, 30, 26, 55, 61, 65, 173, 159, 189, 137, 172, 231, 61, 225, 140, 229, 189, 67, 119, 43, 190, 99, 193, 180, 61, 229, 40, 210, 189, 236, 52, 163, 61, 244, 1, 12, 189, 230, 106, 212, 61, 120, 30, 239, 189, 46, 247, 67, 189, 226, 147, 137, 189, 192, 95, 183, 188, 133, 152, 163, 189, 12, 150, 21, 190, 214, 22, 115, 61, 236, 64, 35, 62, 69, 237, 150, 189, 197, 227, 167, 61, 229, 106, 21, 62, 131, 203, 23, 190, 197, 211, 229, 61, 255, 173, 117, 190, 216, 90, 174, 189, 89, 0, 29, 60, 8, 117, 234, 61, 34, 121, 0, 189, 184, 216, 0, 62, 95, 25, 46, 190, 234, 225, 173, 61, 79, 233, 117, 190, 57, 147, 203, 190, 31, 217, 33, 190, 187, 127, 214, 190, 108, 44, 31, 191, 72, 223, 201, 62, 242, 245, 67, 191, 151, 210, 73, 191, 81, 109, 88, 62, 42, 85, 125, 191, 82, 110, 201, 190, 0, 215, 5, 191, 249, 113, 216, 61, 20, 118, 107, 62, 29, 208, 39, 62, 150, 209, 138, 62, 228, 141, 211, 61, 113, 35, 174, 190, 110, 196, 144, 62, 39, 192, 40, 191, 187, 223, 15, 190, 248, 242, 105, 59, 71, 97, 156, 190, 37, 10, 69, 190, 91, 129, 59, 62, 28, 186, 3, 191, 195, 104, 233, 61, 49, 237, 81, 62, 109, 16, 189, 190, 198, 101, 56, 190, 231, 220, 194, 188, 145, 28, 177, 189, 85, 183, 94, 190, 104, 74, 194, 189, 56, 16, 231, 61, 19, 130, 196, 189, 140, 248, 71, 61, 159, 16, 195, 61, 134, 119, 146, 62, 92, 146, 166, 188, 33, 169, 56, 62, 110, 31, 80, 189, 9, 98, 170, 61, 203, 200, 140, 62, 183, 74, 99, 62, 229, 120, 179, 62, 226, 41, 185, 190, 92, 161, 197, 62, 146, 0, 78, 189, 43, 204, 143, 62, 170, 202, 193, 188, 241, 198, 116, 61, 17, 118, 253, 61, 200, 82, 18, 62, 150, 11, 170, 62, 119, 101, 134, 190, 53, 96, 252, 60, 59, 153, 10, 191, 143, 164, 221, 58, 181, 220, 106, 190, 107, 87, 20, 191, 164, 186, 82, 190, 36, 128, 22, 62, 126, 160, 149, 190, 65, 193, 24, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 246, 92, 189, 177, 36, 34, 61, 134, 88, 142, 189, 182, 32, 53, 61, 122, 198, 179, 62, 160, 6, 169, 190, 161, 176, 64, 62, 163, 157, 90, 62, 235, 120, 180, 59, 93, 250, 214, 189, 50, 57, 121, 190, 61, 141, 145, 62, 99, 186, 122, 62, 81, 112, 138, 62, 176, 254, 50, 62, 247, 131, 228, 61, 35, 223, 184, 61, 136, 21, 181, 62, 18, 185, 146, 188, 165, 101, 30, 61, 95, 51, 253, 189, 139, 185, 209, 60, 192, 149, 3, 189, 20, 39, 164, 190, 213, 255, 160, 189, 239, 11, 60, 62, 79, 160, 21, 61, 173, 100, 77, 188, 180, 148, 110, 190, 210, 243, 60, 190, 132, 96, 32, 62, 81, 232, 121, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 200, 43, 189, 58, 234, 29, 63, 3, 181, 48, 62, 193, 27, 173, 62, 3, 66, 182, 188, 233, 182, 35, 191, 70, 216, 209, 190, 160, 159, 39, 189, 116, 218, 191, 62, 59, 178, 209, 190, 54, 151, 119, 190, 229, 148, 28, 62, 205, 239, 107, 191, 6, 191, 166, 189, 19, 182, 107, 63, 0, 140, 129, 190, 47, 84, 22, 61, 64, 199, 210, 190, 133, 238, 16, 62, 247, 231, 216, 189, 241, 116, 12, 63, 160, 50, 12, 191, 78, 202, 3, 63, 71, 72, 82, 63, 54, 122, 145, 61, 11, 205, 73, 191, 107, 174, 211, 62, 17, 37, 130, 190, 87, 40, 32, 187, 24, 250, 32, 189, 232, 202, 94, 63, 188, 9, 159, 190, 152, 250, 35, 190, 187, 238, 249, 61, 171, 90, 25, 191, 72, 142, 56, 190, 245, 130, 131, 190, 105, 141, 4, 62, 131, 244, 252, 189, 195, 189, 132, 190, 121, 134, 219, 189, 225, 80, 25, 190, 2, 137, 50, 61, 57, 160, 229, 190, 123, 230, 235, 61, 179, 68, 123, 190, 10, 88, 219, 189, 206, 181, 67, 191, 231, 86, 10, 190, 38, 251, 60, 190, 50, 36, 180, 61, 53, 21, 166, 61, 160, 194, 96, 62, 155, 39, 62, 61, 236, 150, 142, 61, 205, 202, 28, 63, 248, 86, 24, 59, 57, 20, 200, 62, 97, 98, 51, 62, 183, 130, 245, 189, 44, 118, 15, 61, 155, 202, 184, 189, 190, 243, 24, 62, 193, 184, 95, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 202, 112, 60, 229, 64, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 86, 151, 62, 43, 30, 213, 62, 228, 60, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {253, 85, 19, 192, 158, 150, 58, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}