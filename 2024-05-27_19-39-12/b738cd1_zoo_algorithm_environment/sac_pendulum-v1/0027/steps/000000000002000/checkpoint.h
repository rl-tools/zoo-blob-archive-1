// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 194, 79, 62, 0, 145, 176, 190, 95, 145, 210, 62, 93, 185, 145, 190, 215, 147, 111, 190, 56, 1, 2, 191, 124, 133, 11, 191, 91, 140, 57, 63, 65, 14, 73, 188, 161, 169, 216, 62, 73, 215, 230, 61, 6, 185, 22, 63, 89, 213, 39, 191, 202, 0, 148, 62, 43, 104, 102, 62, 48, 158, 251, 189, 176, 90, 150, 190, 125, 207, 245, 190, 104, 189, 70, 62, 96, 186, 159, 62, 14, 45, 66, 190, 47, 61, 204, 62, 67, 219, 5, 190, 64, 31, 226, 189, 149, 68, 251, 190, 230, 34, 200, 62, 123, 99, 167, 190, 127, 39, 240, 190, 38, 10, 18, 63, 197, 155, 149, 190, 128, 102, 212, 62, 115, 107, 17, 191, 88, 36, 221, 190, 114, 138, 44, 191, 168, 79, 50, 63, 199, 90, 90, 62, 236, 121, 95, 190, 115, 25, 142, 190, 198, 201, 95, 189, 12, 196, 188, 61, 174, 255, 102, 191, 26, 205, 71, 62, 1, 46, 15, 191, 206, 68, 163, 61, 216, 210, 249, 61, 235, 207, 162, 190, 66, 121, 205, 60, 221, 248, 29, 63, 89, 158, 251, 62, 178, 118, 251, 189, 50, 174, 193, 189, 212, 114, 238, 190, 254, 81, 142, 191, 52, 122, 142, 62, 80, 119, 34, 62, 188, 198, 168, 62, 171, 116, 8, 191, 3, 151, 196, 189, 14, 30, 205, 189, 169, 172, 210, 61, 217, 105, 118, 62, 53, 67, 109, 190, 116, 243, 164, 190, 102, 249, 132, 62, 129, 252, 111, 61, 163, 22, 135, 190, 206, 117, 172, 62, 179, 102, 156, 62, 68, 248, 238, 61, 94, 107, 127, 190, 126, 63, 185, 62, 80, 244, 249, 61, 213, 11, 31, 62, 147, 69, 211, 62, 204, 148, 224, 61, 44, 236, 41, 191, 16, 127, 21, 191, 89, 226, 32, 63, 40, 57, 244, 190, 80, 81, 6, 59, 134, 221, 223, 62, 73, 182, 70, 63, 224, 233, 56, 63, 233, 215, 222, 62, 225, 139, 254, 62, 21, 60, 145, 62, 146, 132, 255, 188, 102, 235, 40, 63, 209, 25, 42, 191, 161, 235, 89, 61, 31, 87, 142, 62, 21, 106, 46, 191, 86, 149, 155, 60, 164, 189, 10, 63, 24, 11, 126, 190, 180, 212, 161, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 21, 17, 191, 94, 38, 214, 62, 203, 55, 163, 190, 17, 103, 8, 190, 144, 80, 232, 62, 132, 56, 59, 62, 240, 149, 175, 62, 133, 224, 237, 61, 51, 214, 32, 190, 216, 199, 78, 62, 215, 171, 8, 63, 62, 67, 87, 188, 80, 250, 108, 62, 178, 239, 181, 62, 48, 57, 82, 62, 134, 215, 22, 190, 129, 240, 157, 62, 130, 159, 212, 61, 212, 56, 4, 63, 133, 31, 113, 190, 116, 200, 145, 190, 187, 180, 191, 190, 29, 120, 26, 63, 53, 54, 255, 62, 215, 73, 115, 62, 48, 95, 200, 190, 177, 226, 85, 190, 12, 21, 33, 63, 109, 248, 201, 61, 174, 58, 86, 62, 102, 15, 201, 62, 217, 148, 160, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 243, 27, 62, 191, 114, 226, 61, 117, 49, 201, 61, 120, 246, 123, 189, 187, 202, 12, 190, 103, 137, 216, 61, 174, 212, 8, 62, 177, 101, 247, 61, 65, 26, 185, 189, 146, 16, 243, 60, 236, 37, 14, 61, 138, 142, 225, 59, 157, 60, 147, 61, 234, 8, 8, 189, 165, 248, 11, 190, 64, 195, 120, 60, 57, 35, 2, 190, 181, 133, 190, 61, 233, 39, 0, 62, 5, 114, 9, 190, 115, 39, 154, 188, 211, 191, 0, 62, 126, 190, 87, 62, 225, 161, 144, 61, 25, 225, 20, 62, 34, 87, 28, 62, 101, 198, 5, 61, 110, 150, 5, 62, 66, 226, 37, 190, 84, 190, 112, 189, 220, 92, 186, 189, 109, 58, 101, 62, 206, 7, 202, 61, 104, 25, 149, 61, 49, 210, 84, 61, 241, 117, 85, 190, 128, 113, 198, 189, 190, 146, 50, 62, 126, 240, 27, 61, 248, 133, 78, 61, 186, 79, 205, 60, 119, 136, 97, 61, 60, 47, 162, 61, 70, 17, 74, 190, 7, 101, 11, 62, 220, 218, 156, 61, 147, 23, 191, 190, 7, 197, 96, 61, 253, 19, 169, 62, 164, 164, 228, 61, 177, 214, 216, 61, 227, 15, 166, 60, 175, 128, 212, 61, 30, 63, 12, 190, 66, 163, 130, 189, 118, 224, 232, 190, 46, 164, 249, 190, 151, 96, 21, 189, 16, 14, 117, 190, 139, 105, 206, 190, 12, 208, 111, 60, 54, 181, 138, 61, 52, 238, 167, 62, 79, 15, 28, 62, 183, 52, 18, 62, 85, 35, 179, 61, 149, 233, 233, 189, 89, 233, 248, 189, 164, 6, 132, 190, 56, 60, 40, 189, 127, 105, 14, 62, 60, 214, 180, 61, 153, 221, 247, 61, 46, 66, 71, 62, 123, 112, 192, 189, 142, 251, 142, 190, 148, 208, 164, 58, 131, 40, 82, 62, 113, 250, 4, 189, 238, 36, 21, 190, 58, 13, 146, 61, 86, 116, 49, 189, 63, 166, 56, 61, 6, 103, 122, 189, 89, 36, 130, 190, 177, 249, 46, 189, 78, 165, 17, 62, 234, 68, 84, 188, 209, 101, 192, 189, 65, 18, 214, 61, 153, 169, 99, 61, 211, 103, 218, 61, 244, 170, 55, 62, 28, 184, 42, 62, 193, 212, 211, 61, 48, 140, 167, 61, 138, 38, 181, 189, 57, 101, 175, 61, 137, 122, 8, 190, 6, 31, 83, 61, 186, 47, 122, 190, 34, 255, 33, 62, 173, 110, 162, 61, 9, 235, 255, 61, 136, 167, 68, 190, 55, 57, 233, 188, 187, 182, 64, 62, 126, 255, 18, 190, 236, 23, 153, 61, 64, 0, 33, 62, 176, 62, 125, 190, 233, 227, 123, 189, 61, 233, 199, 61, 36, 116, 122, 62, 34, 93, 57, 62, 107, 242, 33, 190, 0, 197, 184, 61, 5, 147, 193, 189, 171, 166, 167, 189, 167, 199, 159, 190, 44, 142, 218, 189, 130, 188, 254, 189, 152, 238, 117, 61, 236, 164, 166, 189, 209, 238, 131, 60, 143, 95, 180, 61, 121, 161, 184, 62, 91, 112, 106, 61, 20, 70, 20, 190, 118, 211, 24, 61, 10, 120, 123, 189, 13, 148, 254, 189, 208, 64, 70, 187, 208, 88, 26, 62, 54, 56, 49, 62, 213, 67, 221, 189, 161, 113, 220, 61, 136, 213, 66, 61, 10, 76, 124, 60, 68, 149, 203, 61, 109, 46, 182, 60, 49, 170, 148, 61, 109, 24, 230, 61, 121, 230, 184, 61, 190, 197, 73, 62, 235, 36, 5, 62, 14, 191, 10, 62, 53, 207, 200, 188, 227, 35, 21, 190, 63, 246, 5, 190, 0, 126, 196, 61, 184, 4, 162, 61, 44, 232, 24, 62, 74, 116, 25, 62, 25, 128, 1, 190, 97, 253, 240, 61, 9, 70, 53, 62, 208, 198, 155, 189, 8, 39, 98, 61, 217, 19, 227, 61, 31, 226, 187, 60, 48, 81, 207, 61, 30, 147, 17, 190, 10, 91, 189, 61, 122, 175, 137, 188, 209, 186, 210, 189, 200, 68, 235, 188, 83, 214, 49, 190, 245, 130, 158, 61, 8, 15, 131, 61, 58, 97, 155, 184, 3, 36, 175, 61, 199, 109, 149, 189, 196, 37, 210, 61, 172, 111, 157, 60, 207, 31, 162, 189, 244, 227, 0, 190, 70, 52, 107, 61, 248, 236, 138, 188, 226, 49, 246, 187, 18, 181, 173, 189, 149, 171, 103, 61, 60, 112, 139, 190, 242, 115, 49, 188, 35, 78, 178, 60, 99, 20, 25, 190, 96, 232, 192, 61, 188, 100, 96, 60, 209, 195, 82, 61, 196, 50, 165, 61, 168, 174, 91, 61, 109, 103, 141, 61, 137, 214, 80, 189, 227, 137, 77, 61, 252, 201, 20, 61, 118, 26, 245, 189, 127, 207, 102, 189, 204, 69, 12, 190, 36, 15, 157, 61, 128, 56, 244, 189, 104, 169, 92, 62, 35, 99, 113, 62, 55, 210, 189, 189, 114, 202, 213, 189, 40, 28, 226, 189, 142, 177, 159, 187, 17, 218, 1, 62, 165, 162, 12, 190, 182, 82, 209, 189, 137, 115, 126, 190, 75, 221, 36, 61, 243, 19, 242, 61, 93, 227, 121, 190, 193, 35, 147, 190, 4, 37, 124, 62, 215, 161, 157, 61, 124, 84, 14, 62, 185, 110, 88, 190, 42, 41, 74, 61, 168, 239, 41, 62, 105, 123, 0, 190, 123, 4, 223, 61, 216, 249, 63, 188, 207, 174, 144, 189, 162, 157, 219, 189, 98, 44, 40, 189, 100, 15, 94, 62, 86, 44, 41, 190, 21, 42, 64, 189, 247, 180, 128, 61, 87, 186, 224, 186, 60, 131, 49, 190, 28, 70, 48, 62, 12, 161, 181, 61, 155, 137, 63, 189, 158, 142, 173, 61, 21, 110, 247, 61, 51, 217, 100, 61, 165, 200, 220, 59, 12, 36, 249, 61, 11, 61, 22, 61, 112, 202, 243, 189, 34, 203, 99, 189, 252, 21, 0, 190, 95, 206, 62, 187, 219, 111, 152, 189, 155, 245, 90, 62, 102, 21, 113, 189, 88, 40, 102, 62, 87, 205, 222, 189, 56, 183, 13, 62, 171, 209, 39, 61, 205, 12, 229, 188, 114, 122, 153, 189, 122, 165, 246, 61, 239, 100, 128, 62, 242, 205, 27, 190, 254, 89, 11, 189, 146, 186, 198, 188, 45, 158, 147, 61, 53, 202, 125, 190, 40, 191, 31, 62, 6, 214, 2, 190, 126, 200, 48, 62, 61, 59, 76, 188, 46, 214, 117, 189, 248, 93, 59, 62, 55, 156, 135, 190, 158, 232, 200, 61, 27, 180, 142, 62, 40, 96, 68, 190, 48, 143, 33, 190, 189, 144, 132, 62, 150, 84, 9, 189, 113, 201, 28, 62, 24, 103, 158, 60, 174, 240, 14, 62, 59, 229, 186, 189, 80, 230, 87, 61, 209, 210, 150, 189, 4, 14, 138, 190, 117, 214, 6, 190, 41, 216, 18, 190, 152, 186, 93, 190, 131, 87, 161, 61, 100, 135, 134, 62, 23, 65, 98, 62, 0, 208, 57, 60, 104, 131, 185, 189, 184, 206, 73, 189, 246, 253, 76, 62, 170, 116, 199, 61, 133, 203, 138, 60, 216, 141, 165, 189, 125, 217, 241, 61, 109, 13, 131, 189, 226, 110, 239, 59, 34, 11, 52, 60, 3, 105, 226, 61, 119, 98, 82, 62, 164, 142, 92, 189, 92, 168, 212, 186, 180, 244, 83, 189, 204, 110, 248, 61, 214, 112, 110, 190, 185, 245, 131, 190, 210, 115, 90, 62, 237, 141, 82, 61, 212, 108, 219, 190, 14, 174, 147, 190, 106, 93, 153, 62, 129, 39, 53, 62, 223, 250, 51, 62, 97, 14, 226, 187, 242, 146, 120, 60, 114, 222, 192, 62, 35, 243, 1, 62, 196, 62, 218, 188, 247, 137, 31, 190, 93, 219, 25, 61, 185, 216, 75, 62, 236, 112, 184, 61, 245, 148, 240, 189, 206, 182, 120, 62, 101, 57, 0, 189, 188, 138, 170, 187, 12, 89, 27, 61, 124, 60, 77, 188, 109, 74, 47, 61, 64, 23, 220, 189, 179, 236, 13, 62, 22, 58, 182, 189, 186, 100, 147, 189, 20, 187, 11, 190, 145, 228, 65, 62, 239, 178, 10, 62, 239, 242, 194, 189, 11, 183, 173, 189, 234, 56, 186, 189, 137, 175, 236, 60, 155, 11, 194, 187, 17, 23, 20, 60, 111, 26, 2, 190, 234, 16, 21, 62, 71, 61, 118, 189, 33, 124, 32, 62, 109, 27, 52, 61, 126, 54, 141, 189, 200, 187, 117, 190, 87, 104, 135, 61, 67, 50, 166, 61, 152, 62, 113, 62, 170, 114, 187, 60, 30, 6, 162, 189, 178, 86, 83, 190, 43, 31, 176, 190, 81, 219, 167, 189, 94, 140, 108, 189, 23, 25, 60, 62, 149, 192, 186, 186, 85, 146, 159, 189, 127, 34, 134, 60, 179, 62, 254, 60, 142, 116, 12, 189, 89, 229, 29, 61, 175, 21, 147, 62, 70, 95, 116, 61, 69, 204, 208, 60, 180, 187, 193, 61, 186, 202, 223, 61, 211, 43, 149, 61, 47, 157, 143, 188, 104, 172, 176, 188, 122, 235, 214, 189, 95, 20, 24, 62, 163, 163, 194, 189, 54, 158, 237, 188, 215, 113, 62, 188, 118, 115, 54, 62, 160, 5, 121, 189, 72, 19, 173, 61, 97, 134, 116, 61, 56, 165, 64, 62, 51, 229, 34, 62, 23, 104, 140, 189, 116, 202, 119, 190, 118, 163, 25, 60, 225, 252, 181, 188, 159, 161, 9, 62, 60, 229, 217, 61, 92, 201, 102, 62, 49, 19, 179, 189, 125, 17, 81, 61, 218, 214, 144, 189, 82, 29, 68, 190, 223, 42, 66, 62, 251, 228, 148, 189, 144, 167, 193, 60, 233, 80, 31, 58, 222, 206, 227, 58, 75, 213, 190, 60, 74, 73, 173, 188, 62, 11, 72, 60, 69, 114, 7, 62, 43, 174, 37, 190, 202, 77, 255, 61, 143, 109, 199, 189, 48, 41, 91, 188, 233, 24, 172, 189, 160, 255, 27, 189, 0, 214, 7, 61, 89, 56, 26, 62, 122, 11, 153, 190, 130, 50, 14, 62, 102, 79, 65, 190, 54, 88, 31, 190, 32, 245, 196, 189, 131, 218, 153, 61, 160, 29, 159, 61, 243, 177, 219, 61, 86, 255, 215, 189, 82, 211, 14, 190, 175, 235, 48, 62, 222, 30, 81, 190, 245, 144, 123, 60, 44, 198, 15, 62, 231, 8, 134, 61, 200, 228, 5, 190, 227, 229, 219, 61, 148, 81, 14, 62, 85, 89, 144, 189, 244, 17, 164, 61, 112, 240, 33, 190, 236, 11, 157, 61, 248, 83, 208, 60, 133, 184, 139, 189, 100, 164, 198, 184, 72, 80, 87, 190, 34, 229, 108, 61, 238, 239, 141, 61, 103, 77, 104, 62, 166, 10, 174, 189, 19, 55, 36, 62, 82, 6, 54, 62, 9, 242, 1, 190, 56, 14, 182, 188, 127, 87, 112, 61, 68, 151, 113, 62, 80, 242, 13, 190, 85, 78, 93, 189, 174, 59, 163, 190, 138, 186, 220, 190, 241, 133, 94, 61, 192, 215, 68, 190, 34, 196, 233, 190, 224, 19, 189, 188, 206, 22, 103, 190, 241, 181, 191, 189, 198, 209, 79, 190, 252, 86, 144, 188, 143, 215, 46, 62, 86, 33, 93, 62, 130, 63, 16, 62, 239, 89, 26, 190, 111, 133, 108, 190, 246, 23, 129, 62, 3, 200, 155, 190, 48, 231, 187, 189, 131, 79, 196, 61, 87, 47, 253, 61, 158, 126, 192, 189, 85, 152, 107, 62, 106, 15, 202, 189, 148, 58, 217, 61, 62, 53, 80, 61, 16, 164, 155, 190, 86, 240, 2, 190, 89, 60, 176, 190, 171, 16, 13, 61, 191, 113, 66, 190, 159, 147, 166, 60, 15, 192, 206, 61, 144, 16, 39, 190, 105, 254, 246, 187, 84, 207, 104, 190, 87, 224, 6, 190, 48, 198, 71, 60, 187, 222, 46, 190, 171, 30, 59, 190, 122, 58, 194, 189, 64, 59, 248, 60, 228, 70, 145, 190, 175, 91, 105, 61, 226, 214, 125, 189, 126, 87, 73, 61, 152, 31, 65, 190, 180, 216, 84, 62, 7, 124, 11, 62, 36, 105, 18, 190, 247, 147, 48, 190, 108, 246, 13, 190, 99, 51, 177, 61, 16, 10, 8, 189, 115, 31, 36, 190, 142, 16, 23, 61, 75, 26, 109, 189, 108, 215, 214, 61, 183, 142, 170, 60, 110, 12, 204, 188, 25, 50, 142, 61, 241, 8, 242, 189, 51, 152, 247, 61, 49, 131, 47, 190, 17, 226, 168, 61, 187, 242, 117, 190, 111, 100, 145, 190, 228, 129, 0, 62, 192, 150, 33, 61, 224, 253, 190, 60, 150, 112, 204, 61, 138, 197, 229, 189, 9, 3, 35, 61, 160, 246, 230, 61, 170, 71, 239, 61, 135, 180, 78, 62, 200, 36, 211, 62, 48, 189, 166, 189, 45, 232, 223, 61, 138, 40, 34, 62, 217, 68, 146, 62, 101, 126, 141, 61, 52, 86, 108, 190, 82, 2, 234, 188, 195, 45, 30, 62, 42, 188, 87, 189, 89, 162, 126, 189, 3, 136, 143, 189, 7, 110, 125, 189, 122, 29, 162, 189, 44, 115, 159, 190, 117, 189, 174, 61, 94, 18, 124, 62, 202, 55, 197, 62, 234, 117, 30, 189, 54, 24, 187, 59, 172, 198, 48, 61, 33, 195, 225, 61, 202, 19, 132, 190, 175, 51, 197, 61, 246, 150, 31, 62, 241, 51, 74, 61, 189, 66, 63, 189, 239, 181, 3, 62, 119, 252, 131, 61, 130, 140, 33, 190, 187, 145, 165, 61, 208, 210, 75, 62, 116, 79, 19, 191, 61, 59, 169, 60, 253, 8, 25, 190, 114, 93, 154, 190, 39, 188, 161, 190, 122, 13, 129, 60, 157, 2, 225, 61, 20, 53, 41, 190, 164, 221, 191, 189, 197, 16, 132, 62, 181, 7, 151, 62, 12, 43, 97, 62, 174, 164, 171, 190, 60, 18, 193, 188, 158, 56, 90, 60, 148, 132, 6, 190, 241, 201, 129, 190, 42, 190, 187, 190, 254, 39, 149, 189, 57, 185, 143, 61, 142, 86, 254, 189, 235, 72, 40, 62, 135, 89, 53, 59, 22, 70, 229, 61, 90, 235, 31, 189, 237, 121, 13, 62, 93, 62, 223, 61, 141, 94, 204, 61, 98, 107, 65, 62, 115, 36, 189, 61, 186, 47, 169, 61, 173, 12, 219, 61, 238, 50, 119, 189, 224, 113, 137, 61, 114, 177, 132, 61, 196, 195, 53, 60, 46, 120, 21, 62, 122, 56, 194, 61, 60, 89, 208, 189, 37, 193, 155, 61, 43, 84, 215, 60, 123, 34, 183, 61, 212, 85, 115, 189, 16, 216, 2, 61, 51, 102, 224, 189, 159, 145, 136, 189, 127, 157, 17, 61, 255, 160, 42, 190, 204, 172, 188, 61, 58, 156, 50, 190, 81, 60, 103, 62, 219, 253, 223, 189, 75, 124, 239, 188, 200, 154, 105, 61, 119, 29, 116, 61, 31, 106, 221, 189, 158, 78, 49, 190, 90, 12, 165, 188, 90, 203, 205, 61, 128, 93, 81, 189, 184, 199, 83, 61, 238, 184, 155, 189, 195, 134, 207, 189, 138, 127, 111, 188, 189, 13, 202, 189, 213, 59, 34, 60, 85, 232, 39, 190, 5, 122, 157, 60, 51, 0, 66, 61, 221, 100, 213, 189, 207, 66, 166, 189, 163, 168, 210, 189, 214, 157, 196, 61, 43, 169, 183, 189, 235, 98, 246, 58, 130, 129, 48, 60, 235, 66, 164, 188, 161, 56, 22, 61, 33, 254, 4, 190, 228, 143, 17, 190, 66, 85, 36, 61, 255, 129, 147, 61, 74, 234, 239, 61, 114, 232, 211, 189, 144, 65, 197, 60, 173, 255, 82, 60, 199, 195, 195, 61, 5, 137, 50, 190, 189, 131, 146, 61, 51, 163, 192, 189, 108, 217, 130, 61, 186, 160, 86, 61, 12, 104, 116, 190, 163, 129, 25, 62, 131, 204, 6, 189, 69, 251, 105, 188, 3, 212, 169, 189, 89, 231, 225, 60, 51, 238, 156, 189, 82, 60, 243, 61, 163, 99, 6, 62, 45, 181, 130, 61, 27, 44, 138, 61, 35, 82, 65, 188, 127, 161, 222, 61, 45, 39, 221, 189, 69, 157, 92, 61, 16, 44, 27, 189, 252, 183, 13, 189, 26, 36, 183, 189, 64, 99, 33, 61, 108, 14, 14, 189, 172, 177, 1, 62, 94, 46, 133, 189, 12, 194, 242, 61, 135, 67, 30, 190, 141, 15, 26, 186, 114, 165, 30, 189, 13, 215, 58, 61, 190, 48, 137, 62, 55, 37, 15, 62, 99, 198, 149, 61, 94, 79, 214, 61, 127, 231, 73, 61, 245, 55, 127, 60, 99, 59, 169, 61, 94, 44, 249, 60, 160, 255, 42, 61, 71, 108, 210, 189, 179, 54, 242, 61, 65, 210, 79, 190, 110, 40, 23, 61, 42, 89, 77, 189, 112, 33, 15, 189, 247, 81, 254, 189, 209, 144, 20, 190, 19, 216, 90, 59, 44, 84, 27, 60, 70, 55, 2, 62, 207, 130, 236, 188, 215, 224, 181, 190, 159, 63, 202, 189, 131, 22, 168, 190, 180, 127, 229, 189, 7, 205, 155, 189, 165, 104, 101, 190, 176, 155, 60, 190, 230, 219, 48, 190, 222, 172, 128, 62, 41, 174, 39, 190, 117, 13, 108, 188, 4, 217, 73, 62, 128, 113, 167, 61, 130, 169, 174, 190, 126, 173, 204, 189, 47, 135, 141, 190, 236, 112, 116, 60, 85, 32, 35, 190, 124, 79, 183, 189, 159, 141, 80, 61, 124, 43, 100, 61, 28, 187, 85, 62, 124, 162, 183, 189, 170, 70, 186, 189, 119, 240, 202, 61, 216, 209, 26, 190, 219, 255, 24, 189, 148, 205, 158, 190, 98, 176, 211, 189, 215, 39, 131, 189, 22, 108, 205, 189, 149, 253, 254, 189, 197, 238, 19, 61, 205, 118, 193, 61, 178, 170, 106, 190, 133, 17, 216, 189, 164, 155, 182, 60, 97, 13, 224, 61, 190, 203, 143, 189, 26, 119, 222, 61, 175, 177, 4, 62, 185, 232, 250, 188, 106, 172, 160, 188, 241, 249, 22, 190, 4, 185, 46, 189, 68, 199, 25, 62, 23, 101, 181, 189, 159, 8, 65, 190, 207, 114, 218, 189, 225, 96, 238, 60, 244, 61, 44, 190, 201, 153, 140, 61, 188, 184, 179, 61, 62, 92, 119, 190, 246, 19, 34, 190, 50, 41, 150, 61, 214, 26, 153, 60, 31, 69, 17, 62, 76, 0, 222, 61, 115, 242, 214, 189, 119, 54, 46, 62, 239, 253, 254, 189, 71, 37, 91, 190, 74, 25, 240, 189, 236, 249, 80, 188, 47, 72, 23, 61, 194, 173, 146, 190, 24, 13, 5, 58, 247, 181, 87, 62, 48, 37, 60, 62, 198, 211, 5, 62, 162, 180, 235, 61, 50, 100, 31, 188, 95, 79, 68, 189, 105, 76, 238, 189, 110, 155, 216, 60, 234, 72, 176, 189, 200, 110, 204, 189, 16, 191, 103, 61, 10, 141, 29, 190, 216, 248, 201, 60, 62, 126, 17, 62, 16, 119, 4, 189, 77, 144, 36, 190, 59, 229, 60, 187, 143, 129, 46, 189, 183, 198, 47, 190, 25, 215, 231, 188, 65, 228, 148, 189, 9, 32, 40, 190, 227, 164, 100, 61, 101, 0, 0, 62, 124, 118, 155, 189, 32, 52, 186, 61, 11, 37, 254, 188, 234, 77, 215, 189, 189, 194, 44, 190, 249, 191, 50, 190, 11, 95, 4, 190, 217, 216, 155, 59, 41, 53, 165, 189, 26, 140, 10, 62, 131, 130, 43, 59, 193, 150, 37, 190, 112, 91, 77, 59, 159, 251, 10, 62, 225, 0, 229, 189, 158, 240, 63, 62, 181, 8, 2, 190, 8, 103, 59, 62, 174, 57, 157, 61, 245, 11, 147, 61, 192, 171, 234, 61, 227, 142, 192, 189, 246, 46, 43, 189, 238, 89, 184, 60, 203, 63, 155, 190, 12, 111, 6, 62, 199, 184, 94, 190, 198, 22, 192, 189, 115, 93, 41, 190, 42, 142, 17, 62, 2, 54, 36, 190, 172, 71, 206, 190, 44, 27, 175, 190, 120, 38, 31, 62, 29, 0, 24, 62, 157, 239, 196, 61, 214, 217, 234, 190, 79, 178, 203, 189, 188, 187, 96, 62, 3, 220, 228, 61, 178, 212, 27, 189, 32, 188, 133, 189, 179, 97, 164, 189, 166, 251, 178, 60, 87, 161, 35, 61, 179, 203, 183, 190, 232, 141, 100, 189, 232, 138, 8, 187, 177, 144, 132, 61, 205, 208, 142, 190, 228, 58, 118, 61, 4, 190, 186, 190, 54, 28, 167, 61, 205, 33, 108, 190, 144, 68, 31, 61, 239, 190, 101, 62, 110, 25, 62, 60, 169, 248, 7, 62, 77, 104, 186, 60, 250, 37, 20, 61, 192, 65, 97, 62, 206, 18, 39, 190, 188, 202, 250, 188, 16, 107, 121, 189, 199, 45, 215, 61, 4, 237, 189, 189, 208, 69, 55, 60, 97, 54, 47, 61, 145, 159, 60, 62, 84, 243, 44, 188, 112, 169, 116, 188, 55, 16, 208, 189, 238, 255, 138, 190, 214, 222, 67, 62, 144, 133, 22, 189, 50, 86, 143, 189, 127, 86, 17, 62, 111, 210, 186, 62, 6, 211, 162, 62, 79, 116, 13, 60, 154, 62, 160, 60, 59, 74, 2, 190, 74, 224, 27, 61, 67, 30, 48, 62, 38, 103, 36, 62, 22, 83, 133, 189, 234, 142, 72, 62, 4, 81, 169, 187, 253, 113, 156, 190, 125, 163, 255, 61, 22, 114, 9, 61, 246, 119, 62, 61, 23, 95, 52, 190, 76, 107, 124, 61, 147, 154, 72, 62, 181, 145, 35, 190, 159, 160, 204, 189, 133, 41, 164, 189, 246, 233, 52, 62, 114, 2, 35, 62, 119, 41, 166, 188, 17, 113, 181, 188, 145, 25, 139, 62, 158, 4, 16, 189, 141, 163, 255, 188, 99, 97, 170, 189, 83, 219, 84, 62, 85, 64, 42, 190, 89, 217, 219, 189, 224, 76, 9, 62, 167, 88, 111, 189, 195, 24, 225, 61, 37, 252, 37, 62, 102, 8, 33, 190, 21, 47, 245, 61, 47, 239, 35, 61, 7, 109, 21, 190, 227, 202, 34, 190, 50, 40, 152, 189, 152, 63, 3, 190, 61, 108, 143, 61, 129, 245, 184, 189, 145, 129, 208, 189, 149, 200, 161, 61, 124, 177, 154, 61, 167, 91, 237, 61, 23, 86, 21, 62, 71, 6, 166, 189, 135, 37, 220, 61, 116, 135, 34, 189, 99, 238, 125, 189, 152, 134, 25, 190, 124, 196, 192, 60, 160, 199, 138, 61, 184, 109, 178, 60, 192, 146, 33, 62, 151, 30, 188, 189, 69, 126, 24, 190, 61, 235, 190, 61, 226, 22, 101, 61, 32, 129, 189, 189, 236, 254, 240, 61, 30, 90, 16, 189, 230, 194, 232, 189, 139, 38, 153, 61, 57, 118, 192, 189, 217, 142, 202, 61, 40, 25, 123, 189, 237, 209, 219, 61, 11, 69, 229, 189, 95, 200, 207, 60, 27, 66, 187, 189, 110, 46, 2, 61, 134, 219, 74, 189, 243, 244, 234, 189, 160, 220, 181, 61, 228, 151, 17, 62, 245, 31, 74, 189, 222, 119, 187, 61, 217, 81, 27, 62, 98, 15, 39, 190, 195, 214, 29, 62, 58, 251, 52, 190, 163, 174, 241, 188, 201, 138, 29, 61, 106, 230, 17, 62, 6, 19, 56, 61, 150, 101, 38, 62, 189, 149, 1, 190, 198, 101, 23, 62, 25, 231, 46, 190, 218, 69, 159, 190, 238, 176, 135, 189, 76, 91, 26, 191, 169, 149, 14, 191, 137, 192, 99, 62, 21, 126, 225, 60, 14, 212, 51, 190, 180, 131, 176, 61, 22, 227, 185, 188, 104, 52, 49, 190, 230, 26, 32, 190, 250, 179, 186, 189, 46, 58, 133, 62, 233, 28, 94, 62, 237, 197, 239, 61, 160, 172, 145, 188, 103, 187, 52, 190, 6, 6, 144, 62, 88, 252, 57, 190, 102, 92, 9, 189, 221, 178, 6, 190, 35, 29, 82, 190, 182, 157, 97, 190, 65, 108, 97, 61, 95, 239, 61, 190, 80, 165, 54, 61, 25, 174, 110, 61, 242, 24, 135, 190, 169, 87, 227, 188, 50, 50, 144, 61, 143, 100, 104, 188, 69, 173, 31, 190, 149, 27, 172, 61, 240, 159, 33, 61, 172, 233, 206, 61, 99, 2, 155, 61, 226, 109, 128, 189, 172, 21, 3, 62, 13, 66, 207, 189, 141, 146, 47, 190, 116, 203, 216, 61, 221, 66, 112, 61, 49, 150, 172, 61, 204, 122, 60, 62, 211, 79, 29, 62, 186, 158, 130, 190, 208, 86, 68, 62, 63, 228, 180, 61, 71, 154, 161, 61, 21, 54, 41, 61, 201, 124, 179, 59, 96, 208, 11, 62, 242, 183, 169, 187, 87, 82, 9, 62, 229, 80, 93, 190, 96, 1, 71, 189, 233, 8, 71, 62, 214, 118, 130, 61, 201, 155, 47, 190, 144, 34, 104, 61, 225, 21, 170, 189, 192, 98, 183, 61, 133, 253, 21, 190, 132, 38, 136, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 186, 244, 189, 132, 141, 41, 189, 211, 235, 75, 189, 185, 27, 65, 189, 253, 72, 83, 62, 228, 180, 54, 190, 142, 233, 32, 62, 193, 157, 217, 61, 129, 152, 142, 189, 239, 106, 139, 60, 32, 4, 80, 190, 39, 175, 152, 62, 168, 20, 195, 188, 119, 174, 15, 62, 208, 102, 105, 62, 236, 67, 64, 62, 56, 24, 230, 61, 173, 96, 6, 62, 178, 180, 23, 60, 248, 59, 64, 61, 110, 177, 22, 189, 222, 60, 231, 188, 209, 62, 9, 190, 111, 94, 16, 190, 213, 255, 160, 189, 236, 72, 41, 62, 38, 211, 160, 61, 145, 5, 40, 61, 185, 12, 76, 190, 247, 250, 14, 190, 32, 239, 41, 62, 160, 180, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 84, 16, 190, 124, 125, 104, 62, 138, 211, 163, 60, 73, 65, 107, 62, 186, 19, 195, 59, 220, 230, 8, 60, 31, 80, 175, 190, 185, 205, 144, 189, 39, 24, 100, 62, 197, 239, 153, 190, 165, 185, 161, 189, 193, 233, 20, 62, 214, 55, 156, 189, 156, 9, 173, 189, 193, 118, 194, 62, 162, 227, 220, 189, 136, 154, 122, 62, 9, 211, 205, 190, 206, 121, 19, 189, 79, 224, 219, 189, 204, 164, 168, 61, 2, 107, 150, 189, 93, 8, 46, 62, 50, 42, 144, 61, 54, 122, 145, 61, 144, 47, 168, 190, 140, 102, 110, 62, 85, 125, 133, 190, 26, 202, 115, 189, 67, 214, 157, 189, 122, 112, 205, 62, 160, 108, 137, 189, 47, 57, 35, 190, 11, 234, 239, 187, 214, 206, 141, 190, 29, 203, 124, 189, 197, 72, 60, 190, 223, 238, 45, 60, 154, 238, 175, 189, 87, 76, 48, 190, 152, 132, 23, 61, 116, 249, 187, 188, 67, 194, 140, 60, 178, 238, 129, 190, 42, 119, 177, 189, 184, 164, 88, 190, 55, 201, 69, 190, 45, 127, 13, 190, 235, 160, 122, 189, 104, 127, 5, 190, 64, 38, 146, 189, 221, 208, 166, 61, 216, 79, 57, 61, 50, 135, 215, 61, 185, 200, 94, 62, 0, 214, 162, 61, 248, 86, 24, 59, 127, 241, 43, 61, 34, 22, 67, 188, 123, 113, 3, 62, 242, 46, 213, 188, 229, 140, 222, 189, 4, 216, 5, 62, 217, 201, 255, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 64, 157, 61, 100, 52, 16, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {107, 196, 159, 190, 164, 78, 66, 191, 62, 103, 202, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {60, 86, 173, 63, 179, 13, 70, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0027/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}