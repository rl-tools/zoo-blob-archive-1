// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 57, 2, 189, 152, 232, 174, 191, 192, 6, 2, 191, 134, 14, 141, 190, 155, 102, 72, 189, 118, 30, 227, 62, 120, 166, 246, 62, 9, 109, 14, 191, 25, 245, 180, 62, 140, 174, 201, 190, 126, 240, 40, 191, 102, 115, 241, 62, 180, 212, 18, 63, 126, 177, 143, 191, 181, 218, 143, 190, 156, 42, 145, 190, 15, 18, 149, 191, 158, 160, 122, 190, 245, 148, 109, 190, 232, 229, 235, 62, 117, 239, 203, 190, 194, 197, 37, 63, 122, 183, 54, 63, 152, 160, 100, 62, 52, 66, 144, 61, 156, 130, 131, 63, 31, 251, 30, 63, 236, 56, 103, 190, 96, 146, 122, 191, 134, 250, 61, 61, 11, 13, 129, 190, 31, 10, 178, 63, 163, 46, 186, 62, 195, 54, 153, 62, 229, 66, 87, 191, 240, 131, 205, 190, 8, 49, 34, 191, 136, 193, 39, 190, 90, 255, 56, 63, 211, 60, 45, 63, 15, 215, 254, 62, 35, 156, 67, 62, 166, 217, 244, 190, 98, 60, 28, 190, 184, 131, 95, 189, 19, 70, 212, 190, 139, 28, 15, 63, 119, 177, 0, 63, 58, 27, 47, 62, 91, 229, 76, 191, 251, 4, 203, 62, 45, 65, 30, 63, 186, 91, 175, 191, 233, 74, 166, 190, 78, 145, 122, 63, 245, 1, 100, 62, 41, 94, 150, 62, 139, 8, 108, 62, 230, 230, 187, 62, 254, 105, 128, 190, 159, 241, 199, 62, 251, 78, 217, 62, 123, 221, 136, 62, 173, 202, 3, 190, 44, 248, 188, 191, 250, 206, 228, 190, 101, 114, 29, 62, 95, 241, 159, 63, 158, 177, 134, 62, 44, 237, 238, 190, 152, 19, 59, 61, 48, 23, 254, 188, 62, 3, 164, 190, 228, 185, 197, 191, 101, 198, 1, 191, 87, 106, 63, 63, 74, 52, 105, 63, 139, 182, 138, 62, 124, 187, 210, 62, 84, 29, 115, 190, 62, 211, 203, 190, 128, 214, 57, 63, 231, 85, 104, 63, 178, 201, 236, 190, 104, 119, 198, 61, 119, 224, 136, 62, 208, 159, 5, 191, 111, 81, 87, 63, 133, 110, 66, 191, 242, 249, 35, 190, 57, 68, 178, 62, 157, 152, 57, 190, 87, 138, 10, 63, 223, 100, 12, 63, 249, 13, 81, 191, 122, 185, 4, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 5, 221, 189, 157, 103, 185, 190, 196, 73, 216, 62, 19, 63, 220, 190, 243, 31, 156, 190, 7, 135, 43, 190, 176, 48, 9, 189, 237, 118, 137, 190, 159, 161, 81, 61, 190, 207, 105, 190, 194, 103, 166, 190, 26, 23, 5, 190, 225, 41, 20, 62, 253, 49, 164, 190, 233, 48, 159, 62, 180, 121, 212, 190, 162, 240, 9, 61, 234, 251, 190, 190, 160, 227, 138, 191, 215, 252, 146, 62, 130, 105, 71, 62, 87, 152, 128, 61, 137, 43, 81, 62, 176, 219, 44, 63, 75, 88, 137, 62, 158, 66, 47, 190, 35, 237, 82, 189, 67, 198, 66, 190, 123, 224, 157, 190, 141, 255, 218, 190, 132, 254, 75, 62, 186, 149, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 202, 248, 190, 238, 99, 210, 190, 116, 83, 160, 188, 232, 28, 230, 189, 67, 96, 45, 190, 253, 184, 168, 191, 95, 157, 52, 191, 39, 221, 180, 190, 176, 138, 232, 187, 239, 235, 182, 190, 44, 239, 153, 188, 75, 31, 159, 190, 18, 200, 129, 62, 25, 197, 238, 190, 84, 131, 157, 62, 59, 135, 248, 190, 119, 146, 86, 62, 21, 67, 30, 190, 16, 176, 202, 189, 4, 174, 171, 62, 228, 53, 229, 190, 120, 139, 89, 191, 192, 73, 149, 61, 21, 56, 152, 62, 92, 137, 182, 190, 3, 37, 211, 190, 231, 45, 183, 59, 244, 86, 114, 62, 14, 141, 82, 62, 60, 22, 22, 190, 145, 250, 184, 190, 146, 31, 65, 191, 47, 40, 55, 60, 74, 32, 195, 190, 194, 92, 78, 62, 162, 250, 101, 189, 80, 63, 38, 189, 243, 223, 53, 191, 153, 154, 61, 191, 33, 251, 176, 190, 75, 78, 56, 188, 44, 221, 90, 61, 114, 7, 212, 189, 12, 198, 149, 60, 86, 0, 128, 62, 195, 220, 42, 191, 255, 65, 41, 62, 169, 75, 32, 190, 0, 43, 163, 62, 80, 119, 106, 62, 173, 71, 177, 191, 232, 92, 130, 62, 61, 54, 117, 190, 235, 73, 51, 190, 28, 16, 191, 190, 102, 93, 57, 61, 108, 87, 36, 61, 60, 6, 203, 190, 212, 144, 156, 61, 85, 137, 199, 62, 55, 202, 201, 189, 188, 189, 67, 62, 171, 106, 20, 190, 30, 184, 234, 62, 251, 122, 21, 190, 147, 155, 19, 61, 171, 10, 74, 61, 242, 100, 7, 189, 224, 225, 171, 190, 244, 65, 55, 62, 63, 25, 12, 62, 79, 182, 132, 62, 19, 104, 113, 61, 242, 10, 250, 190, 169, 110, 233, 189, 239, 75, 67, 61, 112, 143, 142, 189, 190, 80, 154, 62, 24, 204, 148, 62, 248, 111, 148, 189, 184, 132, 130, 188, 14, 200, 125, 190, 38, 161, 86, 185, 122, 19, 158, 62, 130, 86, 137, 58, 82, 182, 198, 190, 13, 87, 28, 62, 41, 222, 198, 61, 201, 119, 203, 189, 181, 104, 255, 61, 23, 126, 133, 60, 43, 182, 220, 62, 120, 223, 95, 61, 83, 182, 209, 190, 142, 132, 73, 62, 149, 165, 229, 61, 122, 141, 233, 62, 166, 10, 80, 190, 139, 73, 16, 62, 243, 219, 213, 189, 47, 43, 164, 62, 54, 177, 60, 191, 4, 114, 156, 191, 8, 29, 158, 190, 149, 249, 1, 189, 199, 255, 39, 62, 134, 160, 41, 62, 25, 67, 198, 61, 5, 39, 139, 62, 169, 115, 55, 190, 131, 1, 117, 62, 36, 132, 119, 61, 49, 30, 83, 62, 87, 11, 16, 63, 170, 156, 54, 63, 212, 80, 74, 190, 94, 179, 7, 190, 117, 6, 126, 62, 92, 148, 114, 190, 230, 245, 22, 190, 136, 152, 236, 61, 82, 79, 211, 189, 183, 78, 190, 190, 15, 213, 230, 190, 86, 214, 145, 190, 157, 63, 198, 62, 91, 30, 34, 190, 110, 225, 134, 62, 33, 191, 195, 190, 24, 79, 31, 61, 205, 143, 74, 61, 76, 56, 135, 189, 171, 94, 2, 191, 120, 41, 167, 190, 172, 179, 66, 61, 37, 57, 27, 62, 0, 16, 183, 188, 180, 77, 234, 190, 208, 238, 57, 190, 163, 21, 60, 62, 89, 87, 138, 189, 195, 218, 247, 60, 229, 201, 148, 61, 243, 78, 154, 190, 244, 206, 185, 189, 96, 34, 97, 190, 124, 67, 191, 190, 141, 165, 138, 60, 199, 94, 110, 189, 74, 251, 118, 191, 231, 237, 218, 61, 161, 72, 242, 61, 170, 220, 45, 191, 14, 205, 143, 62, 218, 66, 188, 61, 197, 151, 156, 62, 63, 227, 7, 62, 16, 34, 192, 61, 3, 82, 207, 61, 50, 108, 87, 62, 53, 91, 154, 62, 124, 159, 4, 190, 189, 213, 97, 61, 80, 75, 35, 190, 100, 72, 1, 190, 204, 223, 210, 62, 108, 27, 219, 189, 209, 164, 0, 62, 44, 246, 34, 62, 3, 230, 95, 62, 91, 224, 198, 189, 210, 81, 189, 189, 237, 183, 148, 189, 150, 21, 90, 62, 14, 221, 55, 62, 251, 198, 129, 190, 43, 31, 105, 61, 171, 60, 169, 189, 74, 5, 24, 191, 197, 79, 86, 190, 123, 51, 132, 62, 83, 179, 100, 189, 205, 81, 46, 189, 67, 3, 150, 61, 158, 152, 56, 62, 147, 16, 60, 62, 70, 232, 7, 187, 226, 94, 202, 190, 14, 155, 9, 190, 92, 17, 136, 190, 104, 254, 125, 61, 17, 106, 163, 61, 52, 221, 5, 191, 224, 57, 229, 61, 5, 241, 144, 61, 169, 39, 27, 189, 202, 22, 176, 190, 224, 97, 120, 59, 7, 65, 36, 62, 28, 13, 87, 62, 230, 188, 176, 188, 56, 35, 175, 190, 132, 16, 5, 190, 18, 50, 168, 61, 87, 23, 54, 62, 89, 224, 62, 188, 240, 106, 173, 61, 60, 215, 197, 189, 88, 51, 208, 188, 97, 252, 131, 190, 32, 232, 159, 190, 225, 235, 76, 61, 217, 75, 53, 61, 95, 239, 50, 191, 100, 245, 189, 60, 231, 206, 159, 61, 138, 63, 18, 191, 214, 227, 60, 62, 26, 170, 57, 62, 93, 234, 198, 62, 88, 231, 225, 60, 113, 85, 156, 189, 121, 57, 132, 58, 107, 208, 42, 62, 71, 218, 26, 62, 124, 104, 64, 189, 222, 182, 178, 61, 216, 204, 3, 189, 179, 117, 202, 188, 227, 13, 164, 189, 233, 178, 30, 190, 97, 202, 22, 190, 219, 185, 3, 190, 65, 70, 171, 189, 124, 35, 249, 189, 123, 121, 2, 62, 32, 118, 193, 61, 234, 67, 70, 190, 202, 61, 58, 190, 172, 145, 17, 189, 52, 141, 233, 56, 179, 16, 5, 190, 51, 249, 243, 60, 130, 189, 148, 61, 22, 74, 255, 189, 216, 50, 102, 189, 56, 72, 243, 189, 179, 211, 178, 61, 219, 38, 41, 190, 165, 113, 149, 189, 161, 117, 67, 61, 178, 132, 176, 59, 218, 188, 118, 189, 247, 221, 53, 62, 145, 250, 219, 60, 31, 234, 151, 189, 246, 252, 100, 191, 54, 156, 214, 61, 75, 16, 47, 62, 218, 189, 45, 190, 225, 22, 242, 190, 105, 190, 206, 190, 75, 101, 163, 190, 103, 155, 129, 189, 81, 115, 44, 62, 157, 5, 34, 62, 165, 30, 87, 61, 30, 18, 14, 190, 78, 131, 216, 60, 135, 56, 3, 62, 51, 244, 106, 62, 161, 43, 111, 189, 195, 162, 205, 189, 228, 251, 112, 190, 30, 54, 190, 190, 25, 43, 50, 61, 76, 129, 124, 62, 231, 10, 156, 191, 156, 27, 218, 189, 189, 183, 15, 62, 111, 144, 149, 191, 136, 83, 227, 189, 25, 182, 95, 61, 244, 32, 56, 61, 63, 139, 2, 189, 110, 251, 111, 62, 106, 161, 54, 62, 8, 221, 159, 62, 241, 118, 223, 190, 122, 43, 118, 190, 220, 202, 253, 189, 113, 107, 161, 190, 254, 225, 210, 190, 126, 142, 146, 190, 255, 181, 30, 190, 209, 138, 0, 62, 30, 219, 55, 60, 66, 229, 13, 191, 93, 108, 238, 60, 14, 147, 59, 62, 117, 37, 69, 190, 110, 68, 79, 188, 202, 43, 126, 190, 122, 153, 24, 190, 154, 81, 25, 190, 149, 191, 158, 190, 114, 92, 90, 191, 149, 60, 38, 62, 142, 23, 10, 61, 7, 37, 49, 191, 54, 231, 203, 189, 27, 133, 172, 187, 233, 63, 22, 191, 240, 206, 188, 62, 212, 246, 149, 62, 46, 196, 119, 62, 35, 46, 153, 189, 192, 78, 152, 62, 62, 255, 2, 190, 0, 255, 184, 62, 218, 159, 8, 62, 133, 124, 214, 61, 115, 9, 132, 57, 6, 187, 108, 62, 252, 53, 118, 61, 160, 22, 130, 61, 102, 146, 27, 190, 179, 1, 153, 62, 56, 53, 182, 189, 29, 90, 208, 62, 135, 234, 181, 190, 199, 188, 220, 61, 46, 233, 29, 62, 116, 25, 254, 61, 191, 251, 118, 61, 179, 245, 124, 61, 116, 206, 215, 61, 200, 82, 33, 62, 35, 219, 46, 62, 100, 212, 132, 190, 137, 73, 95, 62, 127, 147, 143, 62, 11, 30, 120, 190, 42, 23, 39, 62, 184, 53, 20, 62, 177, 137, 172, 61, 25, 110, 208, 189, 226, 158, 209, 61, 216, 130, 199, 190, 179, 179, 134, 62, 18, 121, 66, 62, 105, 73, 184, 62, 145, 157, 177, 190, 104, 118, 64, 189, 249, 128, 203, 190, 114, 84, 234, 62, 80, 126, 75, 190, 156, 205, 132, 62, 214, 214, 139, 62, 219, 81, 6, 62, 200, 247, 92, 191, 149, 181, 107, 62, 168, 206, 121, 191, 64, 5, 12, 62, 171, 180, 70, 187, 235, 98, 13, 62, 94, 232, 187, 62, 158, 191, 210, 190, 158, 194, 56, 190, 91, 62, 59, 190, 220, 108, 0, 190, 76, 51, 134, 190, 17, 243, 125, 61, 94, 241, 180, 61, 43, 125, 0, 190, 202, 85, 128, 62, 133, 88, 123, 62, 191, 86, 18, 62, 171, 45, 9, 189, 219, 207, 215, 190, 178, 54, 5, 190, 122, 7, 169, 190, 219, 59, 238, 60, 9, 123, 84, 191, 150, 110, 94, 62, 143, 147, 178, 188, 196, 169, 81, 62, 82, 21, 8, 188, 240, 193, 155, 62, 186, 86, 154, 191, 221, 68, 238, 190, 75, 150, 31, 191, 122, 112, 45, 189, 195, 98, 141, 61, 29, 182, 194, 61, 3, 238, 0, 62, 220, 45, 13, 62, 108, 154, 6, 191, 198, 172, 77, 190, 31, 185, 251, 189, 18, 180, 168, 62, 78, 66, 119, 61, 51, 206, 209, 191, 82, 242, 142, 62, 117, 66, 164, 60, 110, 23, 3, 191, 235, 218, 152, 190, 173, 25, 85, 62, 97, 29, 137, 190, 149, 159, 129, 190, 21, 33, 9, 62, 70, 143, 74, 62, 186, 80, 137, 62, 5, 61, 153, 62, 86, 43, 134, 190, 29, 103, 139, 62, 75, 193, 74, 60, 99, 217, 221, 188, 99, 14, 113, 188, 185, 191, 108, 189, 9, 5, 164, 190, 44, 73, 130, 189, 240, 59, 45, 62, 59, 180, 221, 59, 145, 251, 164, 190, 80, 148, 150, 189, 40, 221, 193, 188, 251, 210, 137, 190, 140, 235, 191, 61, 197, 123, 69, 62, 193, 99, 12, 62, 150, 20, 251, 61, 209, 178, 125, 190, 10, 118, 201, 190, 212, 14, 228, 190, 112, 22, 191, 188, 177, 215, 2, 190, 178, 249, 11, 190, 96, 116, 161, 190, 38, 138, 250, 60, 188, 171, 238, 61, 96, 247, 101, 61, 180, 33, 197, 189, 144, 74, 190, 187, 217, 64, 220, 189, 123, 9, 241, 60, 70, 35, 62, 190, 235, 33, 181, 62, 181, 69, 25, 62, 30, 237, 70, 190, 28, 36, 80, 62, 122, 115, 90, 190, 107, 177, 15, 190, 236, 171, 132, 61, 133, 30, 68, 62, 184, 57, 139, 189, 173, 30, 228, 59, 178, 35, 90, 189, 227, 92, 253, 61, 214, 236, 21, 61, 191, 193, 5, 190, 243, 68, 76, 61, 37, 129, 35, 62, 29, 72, 31, 190, 76, 79, 8, 62, 248, 42, 38, 190, 75, 245, 173, 190, 119, 135, 249, 61, 247, 136, 59, 61, 49, 32, 250, 58, 105, 119, 240, 188, 27, 127, 159, 62, 69, 192, 43, 62, 79, 147, 37, 62, 196, 156, 80, 62, 149, 84, 212, 61, 150, 14, 111, 188, 239, 204, 213, 189, 197, 226, 152, 61, 166, 170, 90, 62, 88, 145, 166, 60, 251, 33, 39, 187, 210, 208, 159, 61, 46, 30, 54, 190, 158, 118, 56, 61, 131, 132, 3, 62, 247, 67, 72, 61, 152, 39, 211, 189, 130, 183, 244, 188, 186, 199, 245, 59, 72, 145, 242, 61, 112, 152, 106, 62, 101, 63, 175, 61, 162, 31, 197, 189, 137, 237, 7, 190, 43, 49, 135, 61, 87, 110, 240, 61, 247, 207, 4, 189, 220, 208, 164, 62, 176, 167, 39, 62, 65, 197, 174, 61, 38, 138, 133, 61, 3, 159, 176, 61, 175, 239, 186, 61, 68, 142, 131, 62, 112, 102, 133, 61, 42, 27, 169, 188, 141, 181, 80, 60, 218, 165, 171, 62, 204, 55, 154, 189, 193, 215, 48, 190, 124, 3, 29, 190, 111, 68, 32, 191, 188, 41, 22, 62, 18, 219, 213, 61, 244, 28, 93, 62, 143, 160, 49, 191, 143, 49, 32, 62, 15, 6, 2, 63, 5, 128, 116, 62, 7, 234, 187, 190, 37, 188, 185, 189, 169, 33, 20, 191, 180, 124, 95, 190, 104, 144, 110, 190, 113, 37, 143, 62, 226, 202, 128, 61, 229, 62, 44, 189, 199, 133, 161, 189, 200, 102, 184, 190, 143, 153, 160, 189, 5, 39, 95, 62, 101, 149, 177, 62, 26, 172, 163, 189, 125, 207, 131, 59, 202, 171, 107, 61, 58, 180, 125, 62, 126, 142, 133, 62, 179, 233, 239, 60, 145, 247, 219, 61, 236, 203, 170, 190, 167, 1, 166, 190, 134, 183, 130, 62, 17, 240, 194, 189, 226, 11, 89, 189, 1, 84, 120, 189, 145, 59, 7, 62, 41, 47, 147, 62, 157, 230, 217, 190, 107, 223, 131, 62, 0, 212, 159, 62, 6, 71, 194, 61, 159, 6, 16, 190, 104, 229, 185, 60, 141, 134, 201, 189, 91, 200, 19, 62, 111, 155, 4, 62, 125, 175, 19, 62, 199, 214, 167, 61, 204, 53, 240, 188, 152, 168, 74, 189, 82, 253, 172, 190, 220, 234, 70, 190, 124, 30, 89, 62, 20, 167, 5, 62, 66, 17, 182, 190, 197, 164, 99, 189, 208, 8, 160, 60, 85, 97, 211, 190, 141, 96, 19, 190, 225, 193, 24, 62, 32, 35, 175, 62, 246, 195, 203, 60, 223, 251, 172, 190, 121, 164, 40, 62, 223, 186, 144, 189, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 60, 141, 31, 190, 221, 3, 139, 189, 126, 237, 92, 189, 96, 116, 147, 190, 135, 189, 79, 187, 120, 171, 136, 191, 56, 137, 154, 191, 132, 85, 82, 189, 3, 188, 36, 62, 58, 178, 213, 189, 118, 35, 190, 62, 37, 24, 159, 189, 136, 171, 158, 62, 114, 19, 211, 190, 175, 15, 167, 61, 87, 184, 80, 62, 38, 79, 250, 61, 110, 76, 244, 189, 25, 251, 147, 191, 111, 224, 128, 61, 178, 15, 50, 189, 235, 141, 66, 191, 69, 124, 137, 62, 164, 194, 117, 62, 152, 106, 100, 190, 235, 161, 55, 190, 156, 107, 33, 62, 193, 137, 39, 191, 166, 174, 67, 190, 233, 239, 39, 61, 193, 88, 76, 190, 255, 235, 65, 189, 236, 79, 70, 191, 57, 179, 156, 62, 133, 253, 221, 61, 49, 236, 115, 62, 125, 123, 116, 191, 104, 98, 228, 61, 1, 82, 18, 190, 201, 127, 30, 190, 54, 182, 201, 189, 242, 37, 164, 62, 239, 152, 208, 61, 238, 98, 220, 190, 14, 183, 82, 61, 118, 166, 222, 187, 233, 183, 219, 60, 31, 163, 57, 62, 156, 6, 140, 188, 186, 181, 106, 191, 220, 175, 155, 190, 132, 50, 220, 190, 192, 63, 35, 190, 42, 11, 42, 62, 135, 145, 46, 190, 66, 68, 5, 62, 213, 56, 39, 62, 121, 79, 31, 190, 214, 72, 51, 190, 117, 11, 192, 60, 155, 231, 133, 190, 149, 53, 191, 190, 144, 110, 81, 62, 254, 53, 173, 189, 206, 183, 38, 62, 36, 243, 115, 190, 175, 220, 164, 60, 19, 56, 134, 190, 31, 65, 18, 62, 245, 100, 155, 191, 40, 98, 11, 191, 189, 27, 250, 190, 215, 249, 137, 61, 236, 15, 127, 60, 244, 143, 209, 60, 45, 165, 72, 62, 64, 147, 126, 62, 6, 105, 30, 191, 188, 40, 195, 61, 117, 60, 83, 190, 158, 110, 245, 62, 162, 187, 199, 62, 164, 156, 218, 191, 49, 157, 110, 62, 172, 131, 13, 190, 95, 49, 76, 190, 117, 202, 69, 190, 26, 194, 178, 60, 166, 85, 27, 190, 5, 168, 175, 190, 20, 81, 36, 185, 85, 170, 229, 61, 142, 121, 63, 62, 244, 0, 25, 62, 80, 183, 90, 189, 34, 221, 230, 62, 171, 23, 11, 62, 71, 106, 6, 62, 182, 156, 198, 189, 46, 155, 61, 189, 96, 73, 19, 62, 116, 62, 160, 61, 194, 210, 178, 189, 205, 239, 208, 189, 176, 162, 169, 61, 96, 30, 197, 189, 108, 136, 157, 60, 103, 238, 154, 189, 56, 176, 77, 189, 24, 20, 10, 189, 112, 60, 43, 185, 195, 52, 94, 189, 133, 70, 23, 189, 24, 28, 32, 190, 31, 107, 136, 188, 252, 242, 16, 61, 61, 199, 12, 190, 229, 225, 143, 189, 101, 242, 54, 190, 189, 149, 4, 189, 139, 134, 179, 187, 249, 165, 35, 62, 126, 173, 182, 189, 155, 202, 55, 190, 140, 96, 237, 61, 249, 100, 251, 61, 240, 244, 195, 60, 97, 238, 62, 189, 171, 139, 215, 61, 242, 137, 140, 190, 144, 242, 5, 62, 62, 197, 158, 190, 177, 133, 119, 62, 156, 228, 60, 191, 191, 60, 251, 190, 15, 54, 76, 190, 234, 220, 110, 62, 74, 138, 104, 190, 78, 40, 150, 62, 51, 219, 54, 62, 249, 139, 120, 62, 9, 87, 13, 191, 218, 116, 57, 190, 90, 176, 77, 60, 25, 50, 65, 62, 122, 130, 114, 62, 178, 179, 171, 191, 22, 79, 5, 62, 27, 78, 110, 189, 203, 25, 75, 190, 131, 55, 21, 61, 20, 51, 53, 188, 228, 35, 71, 188, 249, 80, 126, 190, 25, 157, 46, 60, 2, 77, 194, 61, 133, 44, 49, 62, 71, 177, 199, 188, 58, 240, 251, 186, 194, 205, 26, 62, 228, 110, 174, 190, 244, 170, 47, 62, 156, 147, 19, 191, 83, 146, 85, 62, 228, 170, 135, 190, 33, 155, 148, 62, 214, 235, 253, 62, 106, 22, 87, 61, 125, 146, 176, 191, 200, 37, 134, 190, 91, 140, 156, 191, 78, 144, 230, 189, 217, 197, 206, 189, 142, 151, 156, 190, 41, 150, 75, 62, 113, 197, 128, 190, 134, 38, 86, 191, 3, 59, 228, 189, 158, 3, 239, 61, 255, 22, 235, 190, 247, 66, 37, 190, 209, 252, 9, 62, 16, 211, 147, 190, 222, 203, 204, 62, 137, 94, 168, 62, 229, 13, 186, 190, 117, 237, 184, 61, 186, 171, 56, 190, 146, 43, 151, 190, 148, 86, 52, 191, 186, 251, 144, 61, 243, 221, 69, 191, 32, 143, 177, 189, 146, 235, 48, 190, 115, 61, 115, 62, 230, 199, 206, 190, 90, 75, 35, 61, 79, 10, 41, 191, 4, 151, 224, 190, 64, 249, 161, 189, 168, 14, 18, 62, 159, 143, 108, 189, 124, 205, 82, 190, 125, 183, 145, 62, 108, 255, 114, 60, 33, 59, 80, 190, 160, 235, 3, 191, 24, 223, 186, 190, 24, 187, 198, 62, 71, 180, 247, 186, 113, 93, 129, 191, 169, 82, 142, 62, 124, 75, 153, 59, 139, 3, 36, 190, 222, 42, 178, 190, 69, 70, 172, 190, 80, 147, 203, 189, 211, 72, 41, 190, 14, 189, 131, 62, 40, 182, 131, 62, 233, 255, 62, 59, 114, 213, 194, 61, 103, 112, 31, 189, 26, 202, 161, 62, 51, 115, 133, 190, 157, 131, 22, 190, 98, 203, 43, 188, 56, 197, 176, 190, 118, 67, 2, 63, 18, 230, 148, 191, 154, 213, 45, 191, 109, 156, 104, 190, 155, 20, 225, 61, 153, 236, 91, 62, 67, 111, 248, 61, 97, 207, 230, 189, 109, 136, 200, 62, 187, 60, 175, 190, 37, 23, 5, 61, 153, 203, 179, 61, 51, 9, 22, 62, 167, 99, 148, 62, 48, 117, 203, 191, 130, 155, 54, 190, 185, 49, 76, 61, 244, 155, 9, 191, 123, 55, 232, 61, 89, 103, 152, 62, 31, 123, 128, 190, 140, 163, 18, 61, 22, 147, 245, 61, 188, 124, 153, 190, 200, 181, 134, 60, 205, 145, 72, 61, 142, 141, 246, 188, 240, 165, 252, 189, 235, 26, 137, 62, 125, 20, 143, 189, 28, 4, 57, 190, 88, 214, 187, 61, 12, 19, 169, 62, 242, 62, 91, 190, 151, 223, 176, 189, 251, 171, 127, 187, 68, 90, 68, 62, 142, 127, 101, 190, 46, 208, 152, 60, 3, 38, 163, 188, 53, 175, 187, 61, 130, 122, 232, 189, 117, 217, 243, 189, 160, 162, 13, 62, 71, 238, 172, 189, 101, 148, 146, 62, 121, 68, 187, 62, 108, 112, 147, 189, 167, 31, 70, 190, 202, 186, 83, 61, 74, 158, 238, 61, 249, 181, 150, 190, 210, 57, 125, 190, 33, 250, 6, 190, 255, 78, 134, 190, 68, 55, 202, 61, 72, 238, 149, 59, 199, 90, 191, 62, 100, 216, 47, 62, 122, 246, 149, 189, 65, 204, 17, 61, 251, 170, 241, 189, 81, 117, 151, 61, 225, 91, 38, 190, 90, 21, 96, 190, 37, 90, 128, 60, 43, 70, 187, 61, 58, 254, 160, 61, 27, 207, 180, 189, 105, 120, 237, 60, 231, 198, 217, 189, 203, 248, 199, 61, 230, 16, 143, 60, 111, 198, 134, 189, 241, 199, 159, 189, 152, 226, 109, 61, 208, 203, 69, 62, 23, 92, 101, 190, 192, 206, 232, 190, 227, 101, 233, 61, 19, 15, 128, 189, 100, 234, 217, 61, 210, 83, 217, 188, 126, 253, 27, 62, 149, 44, 133, 62, 152, 227, 53, 62, 140, 213, 19, 62, 103, 219, 86, 190, 160, 189, 89, 62, 242, 16, 75, 190, 55, 85, 200, 61, 249, 134, 73, 61, 35, 119, 99, 189, 92, 203, 142, 58, 230, 7, 218, 61, 45, 62, 54, 62, 60, 255, 87, 190, 254, 164, 143, 188, 156, 251, 203, 189, 53, 48, 175, 189, 76, 53, 63, 190, 35, 201, 93, 190, 198, 208, 131, 191, 97, 100, 187, 189, 103, 58, 150, 190, 253, 243, 208, 60, 1, 186, 244, 190, 22, 211, 53, 188, 219, 128, 63, 62, 219, 39, 54, 190, 119, 124, 85, 191, 54, 83, 128, 62, 224, 251, 131, 62, 181, 103, 12, 190, 115, 55, 219, 190, 164, 175, 19, 190, 141, 230, 21, 190, 75, 148, 113, 61, 79, 22, 133, 62, 215, 141, 136, 62, 122, 76, 232, 189, 88, 132, 144, 61, 201, 21, 61, 62, 253, 152, 147, 62, 174, 221, 69, 191, 205, 131, 41, 190, 122, 63, 111, 188, 89, 145, 15, 190, 137, 204, 42, 191, 79, 109, 106, 61, 85, 95, 202, 62, 94, 31, 194, 62, 136, 203, 172, 190, 193, 60, 200, 61, 252, 66, 138, 190, 66, 19, 132, 190, 86, 29, 115, 190, 46, 212, 131, 62, 253, 2, 144, 61, 252, 125, 114, 190, 208, 18, 245, 189, 158, 5, 158, 190, 99, 76, 29, 62, 15, 125, 219, 60, 28, 20, 134, 62, 229, 226, 32, 190, 154, 203, 166, 61, 159, 136, 97, 61, 87, 206, 26, 62, 157, 152, 118, 62, 156, 146, 12, 190, 64, 122, 166, 62, 109, 208, 35, 188, 59, 27, 244, 189, 165, 244, 81, 62, 183, 3, 141, 61, 94, 107, 46, 191, 167, 131, 34, 190, 190, 133, 19, 189, 155, 15, 26, 61, 78, 172, 53, 191, 22, 77, 161, 60, 5, 118, 179, 62, 156, 65, 156, 62, 55, 27, 16, 190, 100, 135, 2, 62, 236, 51, 29, 191, 17, 43, 197, 188, 112, 227, 16, 190, 104, 253, 179, 62, 147, 82, 137, 189, 127, 173, 169, 190, 175, 55, 219, 61, 136, 115, 193, 190, 72, 248, 102, 61, 192, 83, 130, 62, 118, 185, 138, 62, 167, 128, 61, 62, 22, 93, 200, 61, 20, 51, 47, 62, 54, 134, 94, 189, 141, 51, 130, 62, 189, 7, 64, 190, 2, 68, 188, 62, 241, 124, 155, 190, 75, 161, 166, 190, 171, 195, 0, 62, 216, 52, 253, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 131, 186, 189, 173, 170, 134, 62, 126, 60, 26, 190, 78, 89, 155, 189, 92, 62, 230, 61, 93, 20, 176, 61, 198, 182, 1, 189, 161, 16, 27, 190, 89, 90, 142, 188, 97, 13, 173, 189, 40, 61, 73, 62, 32, 30, 244, 61, 20, 251, 31, 62, 41, 18, 254, 61, 244, 113, 183, 62, 64, 158, 25, 190, 138, 176, 142, 62, 215, 25, 33, 62, 24, 57, 229, 189, 170, 105, 33, 62, 234, 91, 128, 61, 101, 112, 69, 62, 37, 166, 49, 190, 168, 149, 201, 61, 249, 149, 136, 62, 6, 209, 80, 62, 250, 204, 3, 62, 170, 115, 208, 189, 117, 234, 80, 62, 158, 218, 39, 62, 219, 86, 141, 62, 54, 35, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 208, 161, 63, 140, 170, 23, 63, 227, 212, 130, 190, 164, 47, 188, 62, 120, 93, 153, 190, 88, 178, 165, 61, 159, 245, 65, 190, 110, 225, 108, 61, 120, 72, 108, 59, 77, 226, 96, 190, 229, 235, 174, 190, 107, 99, 130, 191, 91, 177, 47, 63, 204, 95, 130, 60, 233, 138, 80, 61, 122, 110, 188, 61, 253, 88, 42, 191, 31, 205, 210, 189, 90, 38, 168, 188, 187, 57, 83, 63, 71, 25, 131, 190, 63, 58, 53, 63, 11, 107, 232, 189, 217, 225, 134, 62, 18, 175, 152, 191, 0, 246, 232, 62, 159, 254, 126, 63, 246, 40, 166, 189, 90, 101, 205, 60, 233, 127, 247, 61, 237, 200, 6, 191, 89, 39, 226, 190, 1, 32, 159, 62, 126, 11, 184, 61, 187, 223, 36, 62, 54, 22, 153, 61, 147, 196, 242, 190, 218, 253, 171, 190, 214, 65, 53, 190, 132, 185, 210, 60, 221, 126, 193, 190, 224, 153, 25, 191, 84, 79, 216, 189, 67, 252, 170, 62, 53, 157, 110, 61, 159, 171, 97, 190, 108, 191, 128, 190, 54, 102, 82, 188, 53, 9, 24, 62, 177, 119, 2, 190, 51, 79, 24, 189, 120, 233, 20, 62, 187, 172, 99, 60, 89, 154, 36, 62, 158, 34, 173, 60, 150, 135, 193, 62, 160, 59, 1, 62, 45, 136, 78, 190, 135, 74, 37, 189, 114, 193, 64, 62, 209, 69, 51, 190, 16, 84, 3, 191, 80, 68, 157, 60, 119, 151, 168, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 103, 234, 189, 216, 217, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {229, 164, 220, 63, 134, 139, 65, 63, 161, 92, 116, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {138, 97, 170, 192, 247, 74, 205, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}