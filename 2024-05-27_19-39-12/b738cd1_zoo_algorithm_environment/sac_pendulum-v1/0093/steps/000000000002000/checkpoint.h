// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 32, 31, 62, 94, 143, 5, 191, 180, 123, 184, 190, 184, 254, 134, 61, 196, 188, 48, 190, 96, 119, 200, 62, 113, 100, 138, 62, 17, 171, 92, 191, 205, 45, 152, 62, 116, 56, 195, 189, 210, 154, 27, 191, 111, 218, 193, 62, 95, 161, 153, 62, 208, 203, 234, 190, 96, 21, 152, 190, 36, 133, 45, 190, 50, 62, 113, 190, 238, 12, 36, 190, 2, 47, 211, 189, 151, 202, 36, 63, 241, 104, 61, 190, 132, 189, 13, 63, 129, 92, 245, 61, 0, 182, 143, 62, 92, 7, 132, 60, 155, 210, 128, 190, 30, 94, 196, 62, 150, 4, 165, 190, 118, 105, 122, 191, 227, 148, 83, 189, 142, 133, 45, 190, 242, 20, 6, 63, 204, 244, 186, 62, 11, 100, 19, 63, 18, 110, 38, 190, 79, 147, 192, 190, 137, 15, 52, 191, 180, 25, 59, 191, 2, 28, 0, 63, 93, 233, 213, 62, 23, 28, 226, 62, 29, 97, 91, 62, 20, 170, 48, 190, 251, 41, 104, 62, 21, 49, 245, 61, 34, 97, 35, 190, 44, 43, 245, 61, 118, 183, 17, 63, 92, 208, 39, 188, 200, 41, 130, 191, 124, 192, 84, 62, 87, 135, 8, 63, 11, 49, 225, 190, 24, 191, 205, 190, 26, 126, 246, 62, 174, 208, 196, 62, 176, 123, 34, 62, 16, 191, 241, 62, 111, 193, 199, 61, 137, 227, 20, 190, 237, 131, 146, 62, 7, 209, 124, 62, 130, 139, 132, 62, 8, 71, 138, 190, 148, 69, 93, 191, 164, 188, 132, 190, 1, 186, 26, 61, 180, 193, 101, 63, 214, 186, 87, 62, 170, 34, 132, 190, 11, 33, 138, 62, 67, 102, 14, 189, 212, 2, 181, 190, 96, 141, 15, 191, 125, 83, 6, 191, 174, 186, 34, 63, 186, 136, 29, 63, 82, 17, 152, 62, 39, 145, 249, 62, 40, 162, 74, 189, 160, 179, 223, 190, 156, 40, 28, 63, 152, 83, 42, 63, 132, 227, 53, 190, 36, 132, 195, 62, 90, 33, 219, 62, 115, 31, 206, 190, 172, 150, 45, 63, 251, 97, 212, 190, 218, 121, 106, 190, 73, 237, 201, 62, 149, 224, 46, 190, 68, 112, 8, 63, 55, 141, 17, 63, 31, 230, 189, 190, 115, 86, 198, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 246, 75, 191, 137, 225, 0, 191, 121, 53, 39, 63, 94, 69, 14, 191, 68, 3, 0, 191, 139, 171, 96, 190, 42, 32, 218, 61, 129, 143, 155, 190, 128, 115, 17, 62, 84, 225, 51, 189, 252, 0, 220, 190, 148, 12, 189, 190, 49, 87, 20, 62, 167, 175, 134, 188, 234, 204, 193, 62, 175, 27, 22, 191, 228, 138, 168, 62, 164, 235, 27, 191, 214, 46, 11, 191, 122, 76, 33, 62, 147, 67, 135, 62, 208, 149, 56, 62, 220, 29, 235, 62, 138, 236, 33, 63, 19, 46, 142, 62, 240, 133, 196, 61, 90, 79, 80, 189, 106, 80, 29, 190, 191, 79, 1, 191, 70, 231, 4, 191, 4, 59, 42, 62, 55, 110, 166, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 76, 221, 61, 118, 70, 147, 189, 15, 111, 205, 189, 94, 2, 12, 190, 39, 43, 36, 190, 56, 3, 169, 189, 137, 18, 251, 189, 133, 25, 250, 61, 59, 93, 228, 61, 155, 145, 53, 190, 180, 216, 191, 188, 158, 68, 63, 188, 209, 233, 198, 61, 120, 156, 27, 190, 108, 64, 254, 61, 191, 59, 69, 189, 176, 30, 104, 189, 243, 206, 113, 189, 30, 242, 59, 190, 7, 53, 146, 61, 170, 146, 238, 61, 61, 151, 110, 189, 0, 245, 161, 189, 58, 159, 205, 61, 141, 254, 165, 188, 186, 143, 107, 190, 144, 218, 9, 190, 248, 198, 20, 62, 43, 120, 204, 189, 91, 59, 184, 188, 127, 252, 11, 189, 33, 43, 223, 189, 116, 202, 5, 61, 202, 225, 165, 190, 17, 73, 102, 62, 236, 121, 173, 188, 186, 70, 211, 189, 104, 210, 45, 190, 1, 183, 239, 190, 35, 203, 14, 190, 165, 193, 74, 189, 203, 239, 30, 188, 90, 81, 66, 190, 2, 240, 151, 188, 217, 81, 68, 62, 21, 165, 135, 190, 16, 198, 198, 61, 82, 100, 205, 189, 190, 242, 186, 62, 86, 160, 58, 62, 253, 134, 208, 61, 122, 130, 4, 62, 47, 35, 112, 190, 155, 56, 135, 61, 68, 227, 138, 190, 98, 231, 190, 189, 247, 172, 237, 61, 91, 192, 91, 190, 152, 37, 228, 60, 238, 129, 110, 62, 20, 184, 54, 189, 216, 16, 179, 61, 19, 114, 151, 189, 156, 40, 178, 62, 130, 214, 141, 188, 16, 106, 55, 61, 67, 41, 38, 60, 249, 70, 252, 188, 16, 203, 66, 188, 49, 78, 191, 61, 215, 229, 102, 189, 160, 4, 120, 62, 174, 21, 171, 61, 158, 232, 174, 190, 221, 215, 205, 189, 70, 196, 125, 61, 169, 48, 119, 189, 142, 78, 67, 62, 135, 167, 6, 62, 153, 60, 129, 189, 45, 132, 129, 189, 250, 237, 163, 189, 98, 59, 159, 61, 62, 12, 225, 61, 218, 31, 99, 189, 248, 72, 111, 190, 14, 202, 179, 188, 185, 255, 137, 59, 52, 116, 123, 61, 178, 25, 184, 60, 55, 196, 216, 187, 167, 56, 4, 62, 4, 190, 18, 190, 44, 70, 37, 190, 180, 252, 72, 62, 48, 191, 157, 61, 167, 93, 97, 58, 214, 44, 26, 190, 48, 67, 78, 62, 128, 55, 118, 188, 50, 38, 22, 190, 164, 187, 204, 190, 101, 153, 59, 191, 148, 240, 124, 190, 73, 113, 2, 189, 158, 117, 140, 62, 221, 19, 184, 61, 199, 148, 67, 189, 111, 127, 133, 62, 237, 115, 102, 188, 63, 70, 152, 62, 165, 107, 201, 61, 63, 68, 123, 62, 138, 125, 43, 62, 110, 216, 158, 62, 219, 185, 78, 61, 136, 243, 109, 189, 116, 202, 73, 62, 34, 236, 252, 189, 20, 168, 52, 189, 58, 249, 150, 60, 160, 220, 185, 187, 237, 164, 132, 190, 95, 208, 25, 190, 220, 251, 106, 190, 145, 235, 127, 62, 112, 83, 111, 189, 8, 100, 190, 62, 27, 193, 158, 61, 55, 206, 9, 62, 37, 77, 152, 61, 201, 183, 18, 62, 148, 82, 69, 190, 172, 182, 133, 190, 243, 68, 210, 61, 3, 107, 183, 61, 25, 17, 198, 60, 181, 184, 145, 190, 55, 24, 93, 190, 9, 194, 135, 61, 233, 218, 123, 189, 119, 194, 13, 190, 214, 37, 246, 61, 89, 163, 63, 190, 91, 127, 167, 187, 111, 139, 65, 61, 138, 5, 214, 189, 34, 218, 224, 187, 217, 248, 183, 189, 120, 195, 189, 190, 139, 199, 150, 61, 175, 117, 114, 62, 136, 110, 133, 190, 231, 152, 26, 62, 251, 212, 101, 188, 147, 64, 197, 61, 139, 101, 70, 61, 162, 194, 12, 62, 78, 21, 8, 62, 18, 154, 51, 62, 219, 183, 68, 62, 131, 83, 226, 188, 75, 76, 181, 61, 100, 87, 0, 61, 12, 249, 164, 187, 194, 79, 13, 62, 216, 77, 222, 188, 254, 168, 173, 61, 208, 30, 41, 62, 89, 78, 184, 61, 95, 90, 247, 189, 16, 22, 143, 189, 128, 66, 57, 189, 153, 229, 31, 62, 203, 94, 204, 61, 8, 60, 82, 190, 25, 228, 19, 62, 57, 73, 155, 188, 178, 25, 53, 190, 46, 46, 134, 188, 124, 110, 74, 62, 192, 78, 203, 189, 182, 54, 205, 188, 71, 15, 87, 189, 149, 243, 110, 61, 88, 226, 248, 61, 133, 9, 125, 61, 176, 142, 147, 189, 197, 168, 191, 189, 129, 249, 46, 61, 112, 152, 150, 61, 67, 47, 2, 62, 167, 32, 10, 190, 52, 94, 3, 62, 22, 160, 124, 60, 21, 101, 158, 188, 225, 3, 5, 61, 201, 141, 153, 61, 175, 112, 250, 61, 160, 142, 95, 62, 193, 0, 166, 60, 80, 59, 165, 190, 106, 42, 15, 189, 159, 117, 159, 61, 190, 168, 56, 62, 149, 9, 41, 189, 95, 136, 242, 61, 130, 233, 251, 188, 255, 32, 188, 189, 147, 210, 68, 61, 176, 203, 250, 61, 65, 156, 77, 189, 3, 206, 224, 60, 98, 81, 140, 190, 164, 155, 63, 61, 221, 80, 19, 62, 152, 138, 72, 190, 58, 183, 46, 62, 116, 82, 7, 62, 139, 131, 24, 62, 138, 68, 254, 189, 46, 9, 16, 62, 172, 100, 104, 188, 112, 40, 243, 61, 33, 90, 34, 62, 86, 233, 14, 189, 94, 223, 183, 61, 90, 190, 198, 188, 191, 71, 108, 189, 11, 249, 160, 189, 233, 178, 30, 190, 48, 206, 225, 189, 219, 46, 233, 189, 24, 87, 126, 189, 27, 3, 190, 189, 55, 168, 246, 61, 210, 90, 200, 61, 96, 141, 25, 190, 222, 165, 16, 190, 71, 129, 158, 188, 6, 166, 191, 59, 160, 21, 37, 190, 76, 69, 179, 61, 252, 201, 104, 61, 36, 224, 218, 189, 38, 17, 34, 189, 55, 214, 167, 189, 175, 255, 255, 61, 137, 28, 20, 190, 101, 1, 17, 189, 186, 132, 9, 61, 0, 49, 141, 59, 218, 188, 118, 189, 110, 140, 20, 62, 165, 45, 248, 60, 70, 177, 225, 189, 166, 228, 180, 188, 61, 64, 35, 62, 151, 206, 228, 61, 149, 152, 149, 189, 77, 245, 75, 190, 209, 108, 237, 59, 13, 0, 155, 188, 192, 212, 58, 189, 108, 190, 47, 62, 123, 55, 181, 61, 83, 70, 61, 61, 187, 141, 150, 187, 97, 196, 174, 188, 143, 70, 172, 61, 142, 79, 88, 62, 220, 240, 39, 188, 97, 202, 243, 189, 131, 6, 153, 61, 164, 161, 164, 61, 155, 205, 255, 61, 215, 91, 73, 62, 225, 252, 36, 60, 162, 1, 110, 189, 140, 100, 230, 61, 201, 80, 88, 190, 154, 27, 18, 190, 204, 161, 201, 61, 198, 156, 132, 61, 77, 248, 210, 61, 238, 70, 218, 61, 131, 5, 25, 62, 232, 243, 54, 62, 253, 127, 193, 61, 148, 77, 0, 189, 68, 48, 32, 60, 228, 39, 74, 189, 128, 162, 85, 190, 27, 225, 23, 190, 243, 32, 48, 189, 225, 181, 68, 62, 33, 158, 43, 62, 40, 209, 36, 190, 51, 93, 180, 188, 53, 83, 152, 61, 140, 141, 122, 188, 220, 10, 130, 189, 149, 165, 11, 190, 244, 136, 92, 182, 227, 146, 255, 61, 157, 124, 122, 189, 39, 109, 78, 189, 107, 48, 64, 61, 59, 30, 132, 61, 227, 133, 206, 60, 36, 68, 255, 189, 255, 69, 102, 61, 59, 153, 47, 190, 230, 53, 159, 62, 169, 3, 32, 62, 127, 232, 199, 61, 33, 168, 74, 188, 134, 240, 180, 61, 104, 65, 81, 61, 210, 224, 71, 61, 2, 194, 221, 61, 198, 237, 63, 189, 81, 241, 142, 189, 156, 250, 39, 62, 215, 74, 78, 189, 75, 155, 116, 188, 87, 142, 5, 62, 61, 191, 216, 61, 31, 181, 181, 60, 196, 159, 147, 61, 148, 4, 46, 61, 235, 168, 253, 60, 95, 231, 175, 189, 142, 224, 19, 61, 133, 234, 131, 187, 170, 70, 155, 189, 128, 168, 203, 189, 36, 193, 31, 61, 205, 33, 127, 60, 68, 235, 235, 189, 124, 55, 152, 61, 79, 119, 103, 188, 67, 208, 244, 60, 93, 75, 208, 61, 120, 13, 68, 188, 254, 136, 197, 58, 206, 94, 151, 189, 228, 171, 180, 61, 177, 151, 163, 188, 135, 254, 90, 61, 144, 180, 132, 189, 40, 125, 48, 62, 213, 208, 245, 189, 177, 125, 55, 190, 172, 177, 155, 190, 156, 197, 43, 189, 102, 221, 50, 61, 19, 20, 64, 62, 127, 235, 147, 62, 62, 144, 142, 58, 88, 232, 36, 62, 241, 114, 190, 61, 37, 58, 117, 189, 54, 137, 220, 61, 44, 155, 12, 190, 254, 12, 67, 57, 207, 140, 127, 62, 165, 84, 34, 190, 106, 74, 152, 190, 188, 87, 17, 190, 95, 155, 155, 61, 89, 111, 124, 190, 233, 135, 130, 61, 25, 50, 59, 189, 24, 212, 130, 62, 145, 161, 242, 61, 154, 75, 248, 61, 152, 67, 188, 61, 237, 228, 171, 60, 172, 60, 173, 190, 165, 222, 95, 189, 151, 11, 152, 61, 67, 238, 43, 61, 106, 45, 146, 190, 36, 221, 14, 62, 52, 248, 145, 61, 65, 36, 91, 62, 121, 146, 111, 61, 62, 96, 61, 62, 104, 192, 15, 190, 197, 231, 199, 190, 158, 220, 162, 190, 116, 42, 146, 189, 164, 184, 38, 62, 97, 86, 0, 62, 148, 4, 224, 61, 247, 7, 8, 62, 56, 162, 158, 189, 218, 69, 241, 189, 187, 36, 130, 187, 154, 221, 176, 62, 138, 47, 113, 189, 243, 168, 8, 61, 136, 196, 108, 62, 249, 231, 243, 60, 31, 102, 174, 189, 146, 113, 28, 190, 181, 176, 78, 62, 63, 34, 125, 189, 203, 239, 155, 188, 151, 49, 0, 62, 170, 70, 205, 61, 142, 224, 63, 62, 195, 12, 99, 62, 127, 142, 88, 190, 148, 201, 46, 62, 254, 94, 235, 60, 57, 137, 64, 61, 13, 134, 164, 61, 123, 65, 112, 61, 17, 72, 253, 189, 194, 233, 6, 190, 196, 33, 162, 62, 159, 30, 18, 57, 37, 160, 8, 189, 232, 168, 36, 190, 93, 220, 2, 62, 184, 169, 52, 190, 63, 226, 164, 61, 5, 124, 50, 62, 63, 52, 147, 61, 207, 36, 52, 62, 13, 40, 239, 189, 88, 49, 54, 190, 72, 78, 4, 62, 88, 215, 85, 61, 12, 116, 116, 189, 28, 43, 82, 190, 36, 70, 5, 190, 154, 230, 216, 188, 227, 62, 160, 61, 114, 0, 136, 61, 27, 88, 193, 187, 36, 231, 34, 60, 77, 1, 75, 61, 218, 159, 192, 61, 219, 254, 1, 190, 140, 62, 72, 62, 82, 82, 133, 61, 253, 233, 168, 189, 62, 86, 112, 62, 176, 7, 222, 187, 68, 121, 93, 188, 86, 181, 170, 189, 131, 14, 25, 62, 213, 142, 236, 189, 190, 121, 183, 188, 13, 179, 151, 189, 142, 64, 136, 61, 234, 154, 147, 60, 160, 205, 203, 189, 165, 8, 166, 61, 80, 41, 206, 61, 102, 157, 246, 189, 247, 51, 126, 62, 53, 227, 150, 189, 202, 103, 140, 189, 39, 69, 75, 62, 18, 255, 154, 188, 139, 9, 69, 60, 42, 104, 79, 60, 243, 50, 78, 62, 73, 143, 9, 61, 205, 123, 219, 61, 219, 113, 69, 62, 59, 98, 136, 62, 52, 21, 205, 189, 80, 109, 27, 62, 188, 253, 227, 61, 115, 115, 126, 62, 55, 138, 157, 189, 57, 21, 238, 61, 112, 176, 20, 62, 207, 21, 48, 188, 116, 47, 187, 186, 79, 54, 163, 61, 108, 196, 245, 189, 22, 61, 1, 190, 231, 253, 214, 188, 12, 32, 105, 62, 239, 162, 158, 61, 134, 254, 72, 62, 250, 230, 90, 62, 60, 50, 48, 189, 242, 225, 142, 189, 220, 27, 245, 61, 201, 152, 144, 62, 115, 204, 139, 189, 200, 241, 49, 62, 211, 44, 3, 62, 191, 119, 180, 61, 147, 215, 202, 61, 73, 209, 158, 61, 217, 44, 227, 61, 78, 149, 48, 62, 216, 255, 121, 61, 21, 175, 164, 189, 127, 166, 217, 61, 26, 134, 40, 62, 50, 24, 186, 187, 252, 110, 199, 189, 151, 110, 154, 189, 185, 254, 172, 190, 181, 202, 203, 61, 64, 61, 193, 58, 186, 100, 164, 61, 231, 183, 150, 190, 168, 26, 206, 60, 7, 9, 243, 62, 248, 220, 174, 189, 168, 1, 8, 190, 197, 53, 218, 190, 59, 93, 38, 61, 82, 240, 66, 190, 72, 146, 37, 190, 118, 109, 25, 61, 5, 19, 88, 62, 12, 49, 207, 61, 36, 253, 190, 190, 68, 106, 196, 189, 121, 106, 220, 189, 193, 147, 7, 62, 232, 11, 44, 62, 38, 75, 126, 190, 136, 70, 146, 61, 243, 221, 15, 62, 98, 151, 81, 62, 170, 172, 139, 187, 135, 40, 58, 61, 76, 69, 170, 189, 31, 92, 154, 190, 70, 155, 57, 188, 26, 65, 146, 61, 43, 82, 218, 189, 188, 45, 114, 190, 55, 111, 96, 189, 78, 188, 207, 61, 191, 243, 99, 62, 222, 63, 163, 189, 68, 80, 231, 61, 86, 84, 135, 62, 236, 143, 71, 62, 217, 207, 185, 189, 160, 168, 12, 190, 30, 124, 46, 187, 223, 162, 157, 61, 116, 16, 169, 61, 72, 150, 3, 62, 210, 104, 91, 61, 153, 185, 14, 61, 17, 25, 25, 190, 118, 156, 44, 190, 176, 181, 170, 61, 79, 171, 15, 62, 122, 133, 57, 62, 207, 244, 174, 190, 254, 148, 39, 188, 130, 9, 76, 61, 123, 49, 105, 190, 249, 223, 206, 189, 234, 107, 243, 61, 95, 195, 11, 62, 155, 215, 44, 190, 86, 133, 84, 189, 246, 106, 53, 62, 224, 3, 194, 187, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 132, 31, 48, 61, 210, 153, 77, 188, 110, 112, 3, 190, 208, 121, 36, 190, 30, 63, 42, 190, 209, 224, 6, 190, 247, 20, 143, 190, 183, 177, 219, 189, 79, 66, 103, 187, 60, 8, 177, 189, 149, 154, 7, 62, 204, 105, 205, 189, 151, 204, 6, 62, 243, 208, 109, 190, 236, 175, 209, 189, 223, 203, 247, 61, 87, 159, 80, 61, 189, 104, 37, 190, 77, 225, 192, 60, 162, 173, 10, 61, 110, 13, 204, 189, 216, 49, 47, 190, 139, 165, 187, 59, 171, 24, 136, 61, 173, 14, 53, 190, 101, 154, 118, 190, 90, 113, 218, 188, 187, 74, 42, 190, 205, 118, 52, 190, 210, 208, 205, 61, 86, 50, 43, 190, 252, 180, 229, 61, 237, 138, 231, 189, 118, 135, 113, 62, 33, 17, 190, 61, 180, 156, 220, 61, 207, 240, 136, 189, 227, 89, 145, 187, 30, 8, 173, 58, 56, 215, 71, 61, 59, 1, 207, 189, 128, 30, 33, 62, 199, 229, 51, 62, 106, 36, 94, 189, 163, 37, 178, 189, 95, 15, 65, 62, 138, 57, 204, 189, 24, 151, 2, 62, 175, 40, 254, 189, 184, 31, 5, 188, 73, 94, 70, 189, 184, 22, 9, 190, 137, 159, 13, 189, 198, 254, 87, 58, 7, 167, 209, 59, 226, 160, 65, 189, 179, 82, 195, 61, 211, 144, 217, 61, 41, 177, 71, 61, 104, 227, 236, 60, 21, 46, 132, 188, 174, 102, 22, 61, 137, 142, 64, 62, 129, 29, 146, 60, 164, 216, 160, 61, 195, 72, 78, 190, 107, 216, 251, 60, 91, 125, 104, 190, 85, 215, 246, 189, 16, 122, 81, 190, 220, 240, 203, 190, 189, 107, 77, 190, 40, 241, 131, 59, 16, 160, 107, 60, 42, 140, 14, 190, 118, 174, 50, 188, 214, 182, 37, 62, 11, 187, 227, 189, 67, 250, 45, 61, 209, 214, 50, 190, 168, 72, 254, 62, 50, 53, 4, 62, 247, 107, 151, 189, 34, 67, 148, 61, 44, 199, 230, 189, 88, 227, 39, 62, 88, 172, 16, 190, 242, 65, 166, 189, 228, 194, 22, 61, 51, 180, 152, 189, 249, 169, 16, 190, 145, 222, 67, 189, 11, 241, 202, 188, 189, 109, 33, 189, 120, 79, 136, 60, 84, 85, 167, 62, 4, 152, 17, 62, 71, 106, 6, 62, 64, 80, 187, 189, 46, 155, 61, 189, 193, 136, 28, 62, 92, 60, 179, 61, 191, 107, 24, 189, 205, 239, 208, 189, 176, 162, 169, 61, 23, 75, 105, 189, 7, 154, 145, 60, 46, 205, 117, 189, 49, 186, 75, 189, 24, 20, 10, 189, 186, 111, 53, 60, 195, 52, 94, 189, 219, 74, 208, 188, 140, 46, 19, 190, 31, 107, 136, 188, 108, 97, 131, 61, 61, 199, 12, 190, 109, 101, 122, 189, 86, 105, 53, 190, 143, 202, 119, 59, 237, 205, 104, 60, 249, 165, 35, 62, 39, 163, 138, 189, 137, 163, 245, 189, 212, 72, 22, 62, 44, 108, 15, 62, 240, 244, 195, 60, 82, 221, 144, 189, 176, 103, 255, 61, 162, 245, 137, 190, 29, 179, 248, 61, 68, 159, 64, 190, 28, 192, 69, 62, 222, 207, 133, 190, 18, 52, 255, 190, 19, 175, 212, 188, 191, 141, 243, 60, 197, 201, 69, 189, 141, 79, 213, 189, 185, 14, 210, 61, 193, 9, 19, 62, 103, 179, 21, 190, 205, 226, 222, 189, 51, 113, 58, 189, 185, 135, 109, 62, 213, 99, 17, 62, 181, 212, 218, 189, 199, 238, 248, 61, 143, 60, 161, 189, 140, 22, 170, 61, 149, 74, 3, 190, 133, 193, 174, 188, 242, 163, 3, 62, 149, 79, 183, 189, 253, 239, 30, 189, 91, 9, 47, 62, 117, 242, 195, 188, 244, 68, 236, 60, 164, 86, 91, 60, 158, 106, 50, 62, 236, 118, 142, 190, 27, 126, 48, 190, 226, 84, 52, 190, 150, 78, 89, 190, 202, 143, 11, 190, 134, 60, 212, 61, 229, 157, 6, 63, 44, 209, 22, 187, 25, 89, 65, 190, 223, 120, 205, 190, 32, 120, 18, 190, 212, 245, 91, 190, 131, 122, 207, 189, 118, 255, 165, 190, 194, 82, 73, 62, 53, 96, 92, 188, 150, 77, 26, 191, 173, 112, 28, 190, 240, 20, 157, 61, 162, 95, 221, 190, 230, 21, 124, 189, 39, 182, 220, 189, 96, 17, 95, 62, 136, 152, 168, 62, 184, 18, 21, 62, 46, 218, 176, 190, 125, 3, 124, 61, 167, 139, 78, 190, 145, 116, 117, 190, 221, 160, 59, 189, 155, 207, 100, 189, 94, 133, 104, 190, 201, 59, 232, 189, 85, 44, 0, 190, 243, 13, 117, 62, 21, 204, 155, 190, 84, 223, 64, 188, 90, 47, 33, 190, 82, 177, 132, 190, 86, 199, 169, 189, 101, 192, 137, 59, 59, 194, 128, 60, 123, 19, 63, 190, 111, 76, 98, 62, 103, 208, 25, 61, 103, 178, 35, 189, 164, 70, 18, 61, 165, 197, 131, 190, 16, 181, 228, 62, 153, 137, 66, 189, 129, 65, 23, 190, 146, 221, 71, 62, 204, 100, 135, 189, 194, 20, 229, 61, 204, 108, 22, 190, 60, 128, 255, 189, 62, 126, 136, 61, 133, 143, 14, 190, 175, 58, 56, 62, 168, 90, 9, 61, 138, 110, 175, 60, 36, 130, 140, 60, 251, 146, 154, 187, 99, 187, 91, 62, 123, 144, 84, 190, 22, 92, 205, 189, 44, 187, 209, 189, 12, 123, 98, 190, 190, 58, 49, 189, 168, 86, 83, 190, 152, 53, 68, 190, 158, 41, 76, 190, 223, 186, 212, 188, 70, 48, 12, 62, 181, 150, 161, 189, 227, 225, 128, 188, 181, 57, 139, 62, 187, 219, 88, 189, 128, 49, 200, 189, 220, 47, 152, 61, 226, 60, 204, 61, 144, 18, 65, 189, 31, 62, 122, 189, 69, 247, 249, 60, 145, 100, 5, 189, 217, 177, 129, 61, 212, 2, 135, 188, 25, 12, 45, 62, 215, 168, 242, 189, 161, 197, 90, 61, 199, 23, 57, 62, 124, 178, 119, 62, 7, 128, 99, 62, 118, 53, 98, 190, 187, 249, 37, 189, 85, 225, 176, 190, 188, 69, 78, 62, 198, 67, 210, 189, 67, 178, 27, 190, 239, 185, 187, 58, 103, 206, 22, 62, 166, 44, 128, 189, 98, 162, 114, 189, 41, 171, 10, 62, 229, 103, 80, 62, 223, 115, 172, 189, 147, 30, 186, 61, 171, 229, 6, 61, 220, 216, 176, 61, 67, 125, 7, 189, 75, 63, 218, 187, 234, 245, 48, 62, 131, 189, 70, 190, 118, 84, 39, 62, 158, 173, 219, 61, 243, 163, 142, 188, 105, 138, 114, 189, 130, 90, 238, 61, 116, 24, 32, 62, 15, 34, 217, 189, 126, 149, 150, 189, 178, 167, 134, 61, 2, 108, 46, 190, 167, 162, 7, 62, 242, 70, 66, 61, 52, 177, 1, 62, 222, 138, 69, 62, 190, 244, 199, 189, 217, 148, 232, 188, 134, 178, 141, 188, 129, 237, 234, 61, 132, 250, 244, 60, 247, 253, 179, 189, 188, 6, 219, 189, 60, 199, 188, 61, 29, 196, 109, 61, 193, 51, 232, 189, 147, 131, 103, 60, 116, 155, 55, 190, 167, 10, 194, 61, 233, 87, 35, 61, 49, 212, 151, 188, 20, 28, 8, 190, 156, 159, 160, 61, 124, 230, 162, 62, 127, 242, 2, 190, 137, 82, 115, 189, 210, 89, 85, 62, 158, 40, 245, 189, 97, 241, 5, 62, 175, 45, 93, 60, 165, 12, 72, 61, 195, 140, 25, 62, 11, 71, 12, 62, 249, 51, 24, 62, 68, 183, 44, 189, 20, 244, 44, 62, 122, 112, 83, 61, 201, 174, 13, 62, 9, 179, 180, 61, 239, 183, 8, 61, 118, 41, 242, 188, 220, 119, 114, 189, 200, 28, 40, 62, 233, 209, 4, 189, 18, 60, 238, 61, 2, 150, 200, 189, 26, 42, 37, 190, 101, 32, 230, 189, 178, 211, 255, 189, 1, 104, 199, 189, 101, 90, 221, 189, 253, 227, 100, 190, 149, 127, 241, 61, 109, 199, 3, 190, 207, 3, 238, 189, 123, 72, 36, 62, 250, 79, 23, 59, 154, 210, 139, 61, 121, 177, 126, 62, 160, 174, 18, 189, 10, 208, 206, 61, 83, 179, 0, 62, 104, 33, 200, 60, 69, 78, 170, 188, 255, 88, 229, 60, 142, 234, 78, 62, 75, 251, 16, 62, 116, 247, 17, 190, 96, 68, 149, 61, 64, 155, 165, 189, 96, 119, 250, 61, 90, 122, 114, 190, 159, 160, 182, 188, 164, 246, 79, 189, 108, 65, 141, 189, 54, 170, 136, 190, 10, 132, 140, 61, 149, 220, 199, 62, 98, 226, 232, 61, 99, 202, 168, 189, 14, 120, 143, 189, 244, 24, 66, 62, 67, 176, 69, 190, 34, 76, 181, 189, 240, 233, 75, 188, 10, 118, 186, 60, 216, 150, 228, 61, 13, 15, 100, 190, 93, 67, 30, 189, 162, 233, 129, 61, 105, 247, 170, 189, 128, 216, 18, 62, 245, 59, 104, 190, 48, 74, 151, 61, 81, 194, 199, 60, 148, 12, 15, 62, 211, 174, 59, 189, 180, 194, 231, 189, 228, 16, 158, 60, 244, 117, 86, 61, 52, 179, 19, 62, 120, 244, 65, 62, 69, 160, 183, 61, 126, 175, 18, 190, 238, 80, 198, 189, 126, 141, 181, 189, 143, 33, 39, 61, 101, 71, 156, 190, 26, 130, 178, 189, 81, 218, 197, 62, 216, 45, 30, 62, 157, 159, 50, 62, 59, 223, 151, 190, 86, 41, 30, 189, 50, 68, 188, 61, 168, 185, 193, 188, 172, 51, 68, 62, 13, 246, 94, 189, 121, 21, 254, 61, 108, 156, 235, 189, 8, 135, 199, 189, 34, 104, 195, 61, 183, 45, 106, 62, 239, 247, 50, 62, 20, 202, 218, 60, 15, 160, 64, 62, 128, 100, 50, 62, 107, 9, 138, 189, 122, 216, 165, 61, 204, 85, 208, 189, 124, 213, 29, 62, 221, 146, 75, 190, 58, 250, 8, 61, 187, 65, 96, 61, 124, 105, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 154, 93, 190, 135, 13, 59, 62, 232, 174, 78, 190, 129, 138, 171, 60, 243, 6, 21, 62, 209, 102, 200, 188, 46, 237, 170, 188, 213, 104, 6, 190, 255, 237, 217, 189, 2, 138, 236, 189, 196, 189, 59, 61, 225, 91, 25, 189, 201, 236, 229, 61, 62, 232, 163, 61, 121, 102, 145, 62, 16, 53, 169, 189, 154, 190, 116, 62, 241, 24, 84, 62, 24, 57, 229, 189, 201, 236, 78, 60, 192, 150, 43, 61, 83, 73, 205, 61, 40, 7, 21, 190, 139, 174, 13, 62, 38, 178, 48, 62, 185, 2, 78, 62, 19, 24, 162, 188, 78, 67, 157, 61, 205, 87, 13, 62, 111, 29, 184, 61, 85, 202, 59, 62, 62, 11, 78, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 75, 177, 61, 0, 59, 138, 62, 114, 149, 71, 190, 138, 82, 130, 62, 189, 36, 150, 190, 177, 24, 34, 60, 161, 197, 37, 190, 12, 119, 80, 61, 160, 34, 35, 189, 154, 58, 11, 189, 223, 126, 46, 189, 3, 219, 181, 190, 102, 124, 94, 62, 120, 136, 121, 189, 42, 110, 187, 61, 43, 243, 73, 62, 189, 155, 207, 190, 211, 110, 12, 190, 90, 38, 168, 188, 182, 243, 177, 61, 217, 48, 181, 189, 81, 137, 78, 62, 33, 179, 32, 190, 240, 186, 72, 62, 170, 83, 32, 191, 144, 122, 167, 62, 190, 191, 182, 62, 64, 17, 9, 190, 233, 101, 182, 61, 196, 226, 99, 61, 49, 194, 107, 190, 11, 55, 19, 190, 148, 252, 96, 189, 115, 106, 92, 188, 221, 210, 13, 62, 168, 146, 132, 61, 229, 32, 172, 190, 155, 86, 61, 190, 85, 129, 29, 189, 97, 102, 146, 61, 231, 206, 1, 190, 32, 112, 11, 190, 113, 3, 219, 188, 252, 254, 113, 61, 175, 232, 165, 59, 160, 168, 131, 189, 81, 145, 75, 190, 95, 181, 53, 61, 153, 28, 153, 187, 110, 137, 6, 189, 51, 79, 24, 189, 210, 96, 21, 189, 77, 144, 89, 61, 116, 141, 41, 61, 232, 231, 160, 188, 250, 185, 69, 61, 169, 181, 24, 189, 7, 64, 1, 190, 51, 191, 76, 190, 65, 101, 76, 62, 129, 156, 53, 190, 194, 105, 78, 190, 50, 127, 18, 186, 83, 245, 126, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 38, 219, 189, 249, 180, 20, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 219, 32, 192, 18, 149, 229, 190, 11, 191, 151, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 106, 237, 63, 16, 57, 238, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}