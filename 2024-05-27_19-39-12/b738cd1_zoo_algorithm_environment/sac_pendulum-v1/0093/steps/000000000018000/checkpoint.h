// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 168, 232, 59, 192, 4, 181, 191, 12, 189, 9, 191, 55, 188, 167, 190, 10, 130, 47, 189, 109, 110, 214, 62, 93, 243, 205, 62, 205, 34, 26, 191, 79, 214, 161, 62, 95, 23, 182, 190, 210, 239, 41, 191, 146, 11, 231, 62, 114, 249, 18, 63, 237, 78, 149, 191, 222, 83, 156, 190, 21, 254, 19, 190, 215, 184, 164, 191, 74, 123, 141, 190, 209, 105, 36, 191, 40, 7, 28, 63, 146, 167, 155, 190, 144, 222, 29, 63, 82, 249, 82, 63, 135, 106, 114, 62, 47, 255, 227, 60, 114, 91, 132, 63, 77, 196, 34, 63, 2, 93, 99, 190, 38, 138, 131, 191, 135, 64, 24, 61, 32, 117, 16, 60, 251, 206, 195, 63, 27, 184, 153, 62, 56, 7, 149, 62, 145, 250, 89, 191, 182, 183, 214, 190, 185, 233, 23, 191, 66, 208, 35, 190, 148, 177, 55, 63, 192, 152, 39, 63, 70, 216, 18, 63, 241, 203, 65, 62, 204, 187, 46, 191, 4, 52, 2, 190, 199, 147, 209, 188, 101, 140, 135, 190, 70, 151, 32, 63, 74, 136, 224, 62, 201, 111, 15, 62, 3, 183, 96, 191, 77, 189, 205, 62, 161, 74, 26, 63, 232, 252, 173, 191, 240, 80, 201, 190, 157, 41, 107, 63, 99, 165, 129, 62, 33, 140, 152, 62, 236, 228, 118, 61, 137, 85, 2, 63, 21, 84, 133, 190, 103, 218, 173, 62, 98, 251, 204, 62, 54, 224, 147, 62, 143, 0, 70, 190, 99, 253, 214, 191, 253, 32, 203, 190, 52, 240, 253, 61, 102, 171, 178, 63, 1, 103, 151, 62, 32, 98, 15, 191, 176, 163, 79, 189, 168, 162, 20, 187, 73, 224, 210, 190, 211, 248, 216, 191, 188, 126, 250, 190, 88, 204, 54, 63, 73, 193, 135, 63, 236, 220, 118, 62, 26, 19, 193, 62, 203, 36, 146, 190, 245, 241, 191, 190, 235, 216, 45, 63, 37, 37, 128, 63, 226, 107, 242, 190, 151, 90, 7, 62, 23, 16, 188, 62, 79, 246, 3, 191, 67, 169, 92, 63, 139, 190, 77, 191, 205, 195, 211, 189, 150, 0, 185, 62, 110, 30, 205, 189, 201, 8, 253, 62, 233, 168, 13, 63, 128, 164, 80, 191, 59, 161, 5, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 58, 231, 189, 179, 18, 214, 190, 198, 232, 184, 62, 63, 124, 234, 190, 92, 164, 166, 190, 110, 190, 252, 189, 91, 151, 153, 61, 190, 249, 154, 190, 84, 230, 30, 189, 18, 242, 40, 190, 106, 204, 204, 190, 80, 75, 50, 190, 41, 158, 161, 61, 79, 37, 184, 190, 55, 31, 214, 62, 47, 253, 39, 191, 131, 245, 30, 60, 207, 88, 213, 190, 90, 0, 146, 191, 44, 53, 87, 62, 161, 76, 40, 62, 40, 91, 17, 188, 185, 213, 46, 62, 214, 79, 8, 63, 225, 206, 66, 62, 174, 65, 74, 190, 37, 31, 215, 189, 127, 148, 110, 190, 63, 32, 183, 190, 252, 72, 214, 190, 86, 28, 64, 62, 17, 110, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 138, 40, 191, 222, 95, 238, 190, 35, 30, 212, 188, 117, 105, 4, 190, 62, 109, 131, 190, 253, 184, 168, 191, 154, 232, 41, 191, 15, 162, 147, 190, 11, 88, 16, 190, 218, 202, 179, 190, 110, 228, 72, 189, 175, 107, 226, 190, 54, 219, 50, 62, 180, 155, 239, 190, 66, 167, 159, 62, 34, 176, 22, 191, 36, 110, 88, 62, 244, 212, 137, 190, 16, 176, 202, 189, 148, 186, 177, 62, 156, 95, 10, 191, 137, 113, 95, 191, 239, 5, 109, 61, 219, 194, 146, 62, 206, 218, 186, 190, 88, 177, 207, 190, 131, 13, 100, 188, 251, 29, 133, 62, 21, 114, 113, 62, 163, 244, 50, 190, 145, 135, 212, 190, 63, 19, 81, 191, 120, 23, 42, 189, 118, 103, 200, 190, 247, 158, 65, 62, 167, 133, 90, 189, 141, 90, 193, 189, 143, 188, 99, 191, 79, 134, 51, 191, 59, 234, 202, 190, 93, 200, 197, 187, 135, 247, 77, 188, 154, 160, 61, 190, 229, 242, 120, 188, 183, 56, 132, 62, 96, 139, 49, 191, 247, 46, 55, 62, 46, 121, 68, 190, 234, 136, 171, 62, 86, 237, 48, 62, 139, 65, 187, 191, 197, 238, 118, 62, 110, 108, 123, 190, 247, 23, 126, 190, 36, 184, 5, 191, 242, 87, 140, 61, 155, 247, 186, 188, 158, 254, 223, 190, 43, 215, 95, 61, 250, 227, 197, 62, 166, 154, 99, 189, 245, 200, 61, 62, 184, 102, 9, 190, 160, 190, 223, 62, 157, 166, 131, 190, 53, 156, 164, 60, 221, 97, 31, 61, 70, 126, 130, 189, 253, 133, 212, 190, 100, 133, 242, 61, 134, 15, 9, 62, 33, 189, 103, 62, 76, 68, 161, 61, 85, 58, 250, 190, 186, 53, 188, 189, 32, 139, 195, 188, 80, 143, 107, 189, 55, 253, 134, 62, 39, 30, 245, 62, 188, 137, 92, 189, 133, 218, 107, 189, 9, 133, 176, 190, 225, 197, 255, 61, 29, 239, 148, 62, 213, 155, 36, 188, 126, 230, 8, 191, 18, 156, 116, 62, 25, 251, 78, 62, 97, 138, 81, 190, 58, 153, 220, 61, 142, 100, 239, 188, 118, 24, 194, 62, 44, 6, 191, 188, 77, 22, 223, 190, 83, 215, 42, 62, 46, 236, 229, 61, 181, 200, 233, 62, 182, 104, 47, 190, 218, 94, 21, 62, 123, 161, 158, 189, 184, 16, 159, 62, 104, 170, 71, 191, 187, 240, 150, 191, 189, 33, 187, 190, 119, 12, 70, 60, 248, 10, 192, 61, 95, 176, 166, 62, 60, 38, 204, 61, 199, 136, 155, 62, 184, 39, 92, 190, 175, 58, 157, 62, 201, 30, 220, 61, 126, 241, 96, 62, 222, 188, 13, 63, 187, 157, 17, 63, 227, 84, 73, 190, 202, 174, 245, 189, 100, 245, 120, 62, 128, 140, 184, 190, 189, 109, 168, 189, 234, 202, 232, 61, 49, 21, 24, 190, 213, 95, 188, 190, 201, 56, 248, 190, 247, 131, 132, 190, 47, 59, 209, 62, 0, 53, 7, 190, 56, 25, 116, 62, 41, 123, 47, 191, 88, 68, 14, 61, 245, 97, 41, 61, 103, 223, 40, 190, 111, 118, 18, 191, 203, 241, 169, 190, 203, 10, 159, 61, 35, 95, 200, 61, 95, 188, 192, 188, 109, 25, 40, 191, 164, 106, 57, 190, 32, 148, 17, 62, 179, 43, 233, 60, 94, 178, 125, 188, 147, 46, 3, 63, 100, 167, 129, 190, 56, 64, 66, 190, 181, 194, 156, 190, 128, 243, 219, 190, 67, 179, 153, 60, 141, 126, 153, 189, 230, 183, 202, 191, 171, 157, 24, 62, 198, 102, 120, 62, 221, 114, 134, 191, 99, 112, 125, 62, 231, 199, 194, 61, 79, 179, 155, 62, 91, 52, 143, 61, 143, 195, 168, 61, 222, 99, 111, 61, 130, 125, 78, 62, 29, 251, 148, 62, 122, 137, 21, 190, 38, 105, 44, 61, 210, 85, 36, 190, 119, 51, 35, 190, 47, 208, 212, 62, 2, 8, 61, 190, 75, 106, 3, 62, 163, 191, 247, 61, 30, 223, 133, 62, 37, 218, 41, 190, 237, 242, 230, 189, 248, 112, 217, 189, 108, 176, 115, 62, 193, 238, 9, 62, 91, 224, 152, 190, 116, 121, 58, 61, 70, 147, 230, 189, 46, 54, 20, 191, 140, 100, 137, 190, 118, 166, 124, 62, 103, 81, 140, 189, 135, 16, 245, 189, 220, 96, 92, 60, 10, 83, 45, 62, 238, 114, 53, 62, 69, 54, 8, 189, 236, 139, 249, 190, 247, 31, 49, 190, 82, 184, 146, 190, 110, 140, 97, 61, 76, 55, 155, 61, 254, 122, 57, 191, 101, 91, 176, 61, 196, 115, 110, 61, 187, 114, 167, 189, 53, 16, 193, 190, 235, 233, 82, 190, 183, 210, 55, 62, 16, 124, 61, 62, 243, 162, 225, 188, 118, 214, 196, 190, 217, 113, 47, 190, 238, 123, 129, 61, 53, 87, 44, 62, 76, 143, 4, 189, 178, 109, 174, 62, 86, 115, 149, 189, 56, 126, 193, 189, 143, 191, 158, 190, 155, 243, 55, 190, 63, 157, 142, 61, 21, 219, 18, 61, 89, 8, 144, 191, 134, 157, 196, 61, 111, 198, 36, 62, 39, 222, 83, 191, 183, 171, 54, 62, 31, 121, 76, 62, 29, 47, 200, 62, 174, 209, 29, 189, 90, 132, 173, 189, 160, 251, 42, 189, 247, 76, 51, 62, 71, 218, 26, 62, 124, 104, 64, 189, 222, 182, 178, 61, 216, 204, 3, 189, 179, 117, 202, 188, 227, 13, 164, 189, 233, 178, 30, 190, 97, 202, 22, 190, 219, 185, 3, 190, 65, 70, 171, 189, 124, 35, 249, 189, 123, 121, 2, 62, 32, 118, 193, 61, 234, 67, 70, 190, 202, 61, 58, 190, 172, 145, 17, 189, 52, 141, 233, 56, 179, 16, 5, 190, 51, 249, 243, 60, 130, 189, 148, 61, 22, 74, 255, 189, 216, 50, 102, 189, 56, 72, 243, 189, 179, 211, 178, 61, 219, 38, 41, 190, 165, 113, 149, 189, 161, 117, 67, 61, 178, 132, 176, 59, 218, 188, 118, 189, 247, 221, 53, 62, 145, 250, 219, 60, 31, 234, 151, 189, 202, 229, 168, 191, 144, 169, 236, 61, 242, 124, 42, 62, 139, 249, 37, 190, 69, 164, 245, 190, 227, 93, 220, 190, 94, 144, 107, 190, 62, 41, 220, 189, 32, 33, 12, 62, 47, 248, 33, 62, 149, 159, 58, 189, 99, 67, 255, 189, 208, 161, 245, 60, 122, 86, 203, 61, 161, 96, 182, 62, 168, 9, 11, 189, 88, 92, 3, 190, 6, 201, 126, 190, 26, 165, 144, 190, 59, 37, 121, 61, 121, 73, 104, 62, 195, 132, 210, 191, 1, 3, 8, 190, 14, 75, 52, 62, 0, 127, 184, 191, 120, 230, 16, 190, 165, 223, 213, 61, 79, 31, 85, 61, 192, 208, 128, 190, 235, 61, 105, 62, 248, 32, 30, 62, 15, 92, 163, 62, 200, 113, 97, 191, 196, 130, 134, 190, 27, 65, 192, 189, 113, 107, 161, 190, 88, 243, 217, 190, 126, 142, 146, 190, 234, 221, 146, 190, 225, 227, 17, 62, 233, 30, 135, 190, 66, 229, 13, 191, 139, 200, 164, 190, 99, 211, 62, 62, 220, 76, 139, 190, 100, 235, 133, 60, 115, 163, 10, 191, 203, 244, 84, 190, 57, 15, 141, 190, 182, 20, 178, 190, 30, 253, 100, 191, 10, 176, 55, 62, 165, 161, 32, 61, 60, 214, 180, 191, 234, 27, 27, 190, 163, 77, 249, 189, 97, 41, 136, 191, 147, 29, 197, 62, 63, 43, 175, 62, 6, 47, 137, 62, 122, 140, 49, 190, 222, 178, 168, 62, 234, 138, 14, 190, 86, 170, 200, 62, 121, 213, 36, 62, 171, 21, 169, 61, 52, 88, 35, 60, 184, 112, 89, 62, 172, 172, 243, 61, 148, 96, 10, 62, 103, 141, 104, 190, 43, 120, 145, 62, 129, 39, 23, 190, 164, 164, 243, 62, 248, 241, 252, 190, 18, 190, 9, 62, 16, 54, 3, 62, 25, 98, 224, 61, 48, 140, 97, 60, 66, 129, 184, 60, 134, 226, 193, 61, 247, 91, 91, 62, 172, 206, 149, 62, 187, 36, 148, 190, 154, 218, 66, 62, 243, 78, 162, 62, 253, 103, 132, 190, 147, 130, 203, 61, 28, 152, 50, 62, 114, 40, 143, 61, 228, 25, 192, 189, 144, 119, 124, 61, 70, 165, 226, 190, 247, 222, 139, 62, 41, 29, 39, 62, 47, 192, 205, 62, 126, 67, 163, 190, 3, 106, 25, 190, 131, 158, 251, 190, 230, 30, 173, 62, 90, 216, 34, 190, 170, 26, 142, 62, 147, 84, 147, 62, 219, 81, 6, 62, 179, 217, 89, 191, 236, 148, 180, 61, 219, 69, 128, 191, 75, 169, 49, 62, 100, 106, 224, 189, 235, 98, 13, 62, 71, 31, 166, 62, 55, 106, 248, 190, 141, 21, 143, 190, 154, 242, 17, 190, 220, 108, 0, 190, 113, 91, 123, 190, 111, 211, 192, 61, 173, 118, 220, 61, 193, 48, 142, 190, 154, 178, 71, 62, 8, 89, 130, 62, 191, 86, 18, 62, 177, 165, 9, 59, 73, 245, 207, 190, 240, 108, 198, 189, 89, 159, 188, 190, 110, 247, 217, 189, 114, 127, 118, 191, 71, 124, 88, 62, 42, 186, 36, 189, 176, 53, 80, 62, 11, 97, 161, 188, 26, 87, 164, 62, 243, 71, 185, 191, 242, 18, 2, 191, 32, 90, 45, 191, 55, 159, 100, 189, 144, 149, 55, 61, 207, 37, 112, 61, 132, 14, 236, 61, 106, 136, 5, 62, 246, 236, 13, 191, 39, 143, 104, 190, 239, 119, 57, 190, 13, 19, 180, 62, 246, 97, 169, 61, 18, 151, 224, 191, 3, 107, 114, 62, 109, 107, 154, 60, 31, 125, 0, 191, 128, 119, 223, 190, 216, 237, 92, 62, 140, 150, 150, 190, 6, 26, 151, 190, 92, 168, 211, 61, 19, 30, 21, 62, 218, 13, 115, 62, 3, 143, 166, 62, 176, 63, 127, 190, 5, 108, 145, 62, 85, 118, 27, 188, 90, 131, 195, 188, 126, 166, 160, 188, 196, 131, 133, 189, 154, 6, 164, 190, 29, 173, 206, 189, 32, 85, 40, 62, 0, 6, 217, 59, 15, 41, 156, 190, 23, 77, 213, 189, 175, 34, 4, 189, 67, 68, 140, 190, 225, 141, 176, 61, 169, 94, 69, 62, 123, 175, 218, 61, 216, 2, 7, 62, 52, 96, 132, 190, 244, 119, 201, 190, 212, 14, 228, 190, 226, 6, 209, 188, 248, 94, 2, 190, 55, 128, 48, 190, 199, 128, 161, 190, 61, 150, 0, 60, 81, 57, 176, 61, 3, 104, 101, 61, 212, 52, 206, 189, 135, 43, 65, 188, 31, 87, 230, 189, 115, 162, 240, 60, 60, 8, 62, 190, 209, 102, 179, 62, 78, 246, 7, 62, 78, 224, 72, 190, 93, 136, 64, 62, 248, 213, 69, 190, 11, 73, 86, 190, 158, 167, 111, 60, 47, 14, 116, 62, 138, 180, 155, 189, 191, 44, 108, 189, 63, 119, 4, 189, 56, 77, 179, 188, 186, 249, 191, 60, 181, 43, 40, 190, 245, 222, 128, 61, 43, 74, 7, 62, 61, 172, 89, 190, 150, 177, 8, 62, 68, 6, 102, 190, 250, 53, 159, 190, 124, 176, 24, 62, 120, 42, 184, 60, 252, 194, 230, 188, 19, 10, 47, 190, 248, 89, 145, 62, 157, 146, 28, 62, 159, 101, 19, 62, 255, 112, 88, 62, 163, 177, 38, 62, 29, 183, 29, 61, 85, 139, 23, 190, 181, 241, 135, 61, 64, 28, 75, 62, 66, 105, 97, 59, 226, 89, 134, 60, 38, 86, 249, 60, 141, 137, 20, 190, 230, 166, 134, 188, 23, 111, 187, 61, 95, 179, 2, 62, 147, 31, 97, 61, 142, 74, 194, 188, 240, 213, 86, 189, 172, 110, 233, 61, 11, 122, 95, 62, 16, 134, 175, 61, 119, 125, 107, 61, 185, 231, 39, 190, 113, 100, 190, 61, 64, 57, 214, 61, 225, 179, 178, 189, 191, 86, 139, 62, 67, 199, 121, 62, 207, 249, 186, 61, 27, 9, 37, 61, 134, 226, 203, 61, 144, 19, 123, 61, 32, 139, 120, 62, 52, 21, 63, 62, 226, 173, 35, 60, 170, 146, 31, 62, 42, 174, 219, 62, 104, 210, 43, 190, 132, 149, 55, 190, 111, 200, 139, 190, 69, 244, 30, 191, 82, 41, 48, 62, 223, 117, 0, 62, 135, 4, 126, 62, 175, 86, 58, 191, 68, 11, 152, 62, 121, 13, 23, 63, 117, 80, 95, 62, 0, 211, 196, 190, 167, 249, 203, 188, 170, 253, 56, 191, 171, 56, 96, 190, 236, 38, 92, 190, 179, 26, 134, 62, 142, 180, 2, 62, 10, 244, 19, 189, 65, 124, 105, 189, 84, 244, 204, 190, 172, 111, 247, 61, 191, 37, 118, 62, 156, 192, 169, 62, 150, 193, 169, 189, 55, 68, 207, 58, 231, 211, 129, 61, 31, 186, 137, 62, 152, 10, 115, 62, 115, 221, 44, 61, 70, 218, 241, 61, 213, 68, 157, 190, 90, 210, 181, 190, 63, 92, 132, 62, 143, 204, 167, 189, 25, 197, 10, 190, 190, 97, 91, 189, 38, 208, 32, 62, 41, 166, 157, 62, 121, 131, 255, 190, 162, 111, 149, 62, 151, 92, 153, 62, 220, 85, 65, 61, 12, 193, 45, 190, 67, 218, 206, 61, 128, 21, 62, 190, 38, 32, 178, 61, 0, 208, 27, 62, 85, 209, 215, 61, 33, 237, 68, 62, 146, 105, 225, 188, 10, 233, 40, 189, 175, 60, 223, 190, 113, 140, 175, 189, 66, 242, 76, 62, 154, 66, 237, 61, 164, 114, 223, 190, 222, 136, 34, 189, 164, 151, 148, 61, 4, 155, 239, 190, 82, 247, 51, 190, 211, 245, 249, 61, 142, 2, 156, 62, 82, 148, 24, 189, 52, 43, 184, 190, 140, 39, 36, 62, 176, 252, 240, 188, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 60, 141, 31, 190, 184, 206, 38, 189, 19, 205, 71, 189, 61, 108, 131, 190, 73, 47, 26, 187, 186, 60, 80, 191, 209, 146, 223, 191, 63, 25, 121, 61, 28, 78, 25, 62, 185, 109, 226, 189, 50, 63, 183, 62, 37, 24, 159, 189, 85, 77, 159, 62, 66, 226, 144, 190, 85, 32, 200, 189, 227, 12, 101, 62, 1, 175, 0, 62, 246, 241, 237, 189, 86, 249, 163, 191, 98, 72, 91, 189, 15, 115, 52, 189, 69, 170, 2, 191, 103, 149, 89, 62, 135, 181, 182, 61, 29, 5, 204, 60, 234, 78, 219, 189, 156, 107, 33, 62, 10, 55, 16, 191, 227, 105, 74, 190, 2, 208, 8, 62, 12, 56, 62, 190, 11, 55, 103, 190, 223, 210, 69, 191, 222, 110, 143, 62, 113, 181, 209, 61, 250, 255, 92, 62, 83, 188, 71, 191, 9, 32, 42, 62, 154, 45, 166, 189, 224, 44, 44, 190, 220, 54, 6, 190, 125, 116, 173, 62, 246, 101, 192, 60, 225, 183, 250, 190, 97, 194, 202, 60, 158, 139, 74, 188, 190, 200, 3, 190, 206, 153, 26, 62, 3, 91, 184, 188, 190, 86, 62, 191, 215, 126, 60, 190, 74, 6, 233, 190, 76, 213, 58, 190, 239, 100, 109, 62, 245, 45, 36, 190, 174, 254, 224, 60, 162, 116, 69, 62, 105, 15, 46, 190, 68, 192, 51, 190, 117, 11, 192, 60, 229, 76, 135, 190, 133, 34, 12, 191, 9, 101, 69, 62, 85, 99, 96, 188, 12, 10, 78, 62, 43, 203, 113, 190, 62, 38, 200, 186, 113, 181, 142, 190, 58, 133, 55, 62, 73, 52, 166, 191, 1, 4, 10, 191, 201, 208, 9, 191, 218, 198, 203, 61, 2, 51, 174, 189, 64, 158, 43, 189, 1, 29, 121, 62, 203, 183, 109, 62, 169, 200, 36, 191, 198, 73, 173, 188, 99, 234, 93, 190, 13, 0, 244, 62, 142, 183, 224, 62, 98, 19, 225, 191, 199, 190, 92, 62, 101, 41, 10, 190, 98, 249, 67, 190, 214, 220, 175, 190, 31, 30, 39, 189, 160, 93, 37, 190, 14, 157, 196, 190, 207, 76, 143, 60, 10, 177, 202, 61, 150, 236, 99, 62, 209, 58, 61, 62, 43, 21, 64, 189, 46, 182, 226, 62, 171, 23, 11, 62, 71, 106, 6, 62, 182, 156, 198, 189, 46, 155, 61, 189, 96, 73, 19, 62, 116, 62, 160, 61, 194, 210, 178, 189, 205, 239, 208, 189, 176, 162, 169, 61, 96, 30, 197, 189, 108, 136, 157, 60, 103, 238, 154, 189, 56, 176, 77, 189, 24, 20, 10, 189, 112, 60, 43, 185, 195, 52, 94, 189, 133, 70, 23, 189, 24, 28, 32, 190, 31, 107, 136, 188, 252, 242, 16, 61, 61, 199, 12, 190, 229, 225, 143, 189, 101, 242, 54, 190, 189, 149, 4, 189, 139, 134, 179, 187, 249, 165, 35, 62, 126, 173, 182, 189, 155, 202, 55, 190, 140, 96, 237, 61, 249, 100, 251, 61, 240, 244, 195, 60, 97, 238, 62, 189, 72, 116, 34, 62, 53, 37, 138, 190, 253, 171, 4, 62, 235, 204, 157, 190, 83, 192, 139, 62, 12, 121, 72, 191, 14, 197, 235, 190, 242, 226, 77, 190, 174, 68, 122, 62, 67, 20, 151, 190, 111, 7, 170, 62, 98, 120, 97, 62, 229, 145, 110, 62, 151, 44, 11, 191, 163, 19, 198, 190, 231, 200, 26, 59, 7, 4, 96, 62, 196, 201, 141, 62, 52, 203, 188, 191, 115, 103, 238, 61, 143, 130, 93, 189, 246, 216, 30, 190, 248, 81, 184, 189, 234, 40, 10, 190, 4, 72, 184, 60, 168, 167, 135, 190, 33, 78, 2, 61, 82, 87, 224, 61, 44, 13, 134, 62, 45, 6, 145, 59, 243, 143, 215, 60, 99, 7, 8, 62, 116, 56, 170, 190, 186, 70, 36, 62, 59, 4, 25, 191, 50, 80, 136, 62, 137, 146, 135, 190, 125, 10, 153, 62, 201, 55, 246, 62, 106, 22, 87, 61, 50, 4, 172, 191, 46, 110, 201, 190, 206, 224, 164, 191, 139, 175, 218, 189, 81, 17, 87, 189, 142, 151, 156, 190, 21, 83, 59, 62, 73, 89, 161, 190, 78, 217, 84, 191, 50, 37, 233, 189, 158, 3, 239, 61, 108, 193, 238, 190, 132, 128, 8, 190, 254, 211, 19, 62, 44, 93, 215, 190, 41, 114, 196, 62, 3, 93, 170, 62, 229, 13, 186, 190, 111, 178, 185, 61, 233, 4, 83, 190, 108, 229, 153, 190, 8, 132, 62, 191, 198, 233, 164, 61, 155, 159, 96, 191, 194, 39, 6, 60, 148, 254, 33, 190, 87, 164, 112, 62, 12, 105, 207, 190, 146, 80, 135, 61, 43, 102, 57, 191, 30, 130, 157, 190, 246, 75, 211, 189, 99, 218, 70, 62, 175, 132, 23, 190, 231, 1, 130, 62, 73, 117, 183, 62, 14, 240, 209, 58, 99, 29, 87, 190, 225, 92, 27, 191, 87, 106, 210, 190, 156, 13, 212, 62, 161, 94, 37, 61, 147, 120, 127, 191, 157, 197, 171, 62, 189, 115, 175, 60, 10, 245, 208, 189, 27, 113, 223, 190, 72, 193, 168, 190, 174, 127, 45, 189, 5, 92, 59, 190, 9, 50, 163, 62, 162, 153, 171, 62, 243, 124, 12, 62, 202, 121, 234, 61, 52, 145, 131, 188, 78, 94, 167, 62, 9, 66, 174, 62, 229, 10, 246, 189, 240, 185, 70, 187, 85, 176, 162, 190, 167, 253, 18, 63, 173, 209, 182, 191, 171, 236, 155, 191, 199, 57, 137, 190, 223, 57, 226, 61, 223, 193, 50, 62, 243, 71, 208, 61, 182, 60, 1, 188, 210, 173, 198, 62, 2, 222, 183, 190, 247, 199, 55, 190, 204, 201, 188, 61, 178, 218, 45, 62, 13, 132, 195, 62, 227, 213, 220, 191, 53, 53, 137, 190, 97, 85, 40, 61, 88, 212, 157, 190, 190, 52, 152, 189, 86, 83, 40, 62, 150, 215, 141, 189, 4, 3, 148, 188, 152, 51, 209, 61, 207, 154, 230, 190, 128, 130, 251, 189, 96, 61, 215, 61, 102, 243, 239, 187, 65, 237, 16, 190, 62, 29, 131, 62, 241, 59, 195, 189, 223, 4, 57, 190, 136, 52, 106, 61, 52, 21, 163, 62, 153, 157, 97, 190, 171, 40, 160, 189, 180, 215, 67, 60, 133, 60, 71, 62, 182, 230, 99, 190, 108, 24, 2, 61, 38, 214, 9, 189, 20, 151, 171, 61, 144, 154, 200, 189, 96, 6, 251, 189, 16, 102, 248, 61, 182, 207, 194, 189, 114, 83, 140, 62, 58, 72, 209, 62, 125, 65, 192, 189, 190, 133, 63, 190, 253, 69, 37, 61, 29, 42, 16, 62, 126, 113, 146, 190, 5, 117, 132, 190, 85, 146, 204, 189, 12, 116, 142, 190, 59, 122, 155, 61, 194, 37, 37, 188, 10, 170, 181, 62, 70, 59, 45, 62, 69, 255, 37, 189, 122, 183, 18, 60, 219, 204, 14, 190, 79, 176, 84, 61, 34, 29, 49, 190, 110, 51, 148, 190, 38, 194, 46, 189, 215, 4, 9, 62, 190, 176, 137, 61, 3, 224, 16, 190, 171, 156, 231, 60, 48, 226, 68, 190, 147, 36, 158, 61, 233, 86, 171, 188, 184, 140, 129, 189, 248, 110, 175, 189, 183, 98, 155, 60, 230, 246, 47, 62, 28, 86, 148, 190, 180, 7, 251, 190, 247, 159, 13, 62, 180, 92, 179, 189, 138, 238, 139, 61, 181, 73, 3, 190, 195, 35, 15, 62, 232, 255, 113, 62, 187, 162, 39, 62, 114, 104, 21, 62, 212, 153, 30, 190, 186, 218, 129, 62, 106, 114, 114, 190, 33, 116, 164, 61, 15, 141, 246, 60, 151, 206, 142, 189, 80, 114, 198, 60, 86, 64, 201, 61, 112, 160, 73, 62, 29, 147, 102, 190, 161, 76, 51, 190, 114, 218, 240, 189, 173, 120, 176, 189, 146, 181, 49, 190, 182, 77, 97, 190, 240, 74, 144, 191, 72, 193, 186, 189, 222, 217, 150, 190, 248, 30, 243, 60, 236, 230, 7, 191, 128, 90, 31, 188, 150, 40, 66, 62, 251, 116, 68, 190, 91, 146, 79, 191, 121, 154, 128, 62, 213, 90, 135, 62, 161, 148, 33, 190, 128, 63, 228, 190, 160, 18, 19, 190, 221, 24, 48, 190, 196, 209, 114, 61, 68, 218, 133, 62, 171, 185, 139, 62, 250, 169, 248, 189, 158, 53, 149, 61, 23, 179, 63, 62, 182, 185, 150, 62, 212, 60, 78, 191, 138, 144, 76, 190, 44, 218, 164, 188, 179, 37, 79, 190, 7, 244, 58, 191, 237, 220, 77, 62, 107, 212, 255, 62, 162, 156, 167, 62, 196, 238, 195, 190, 111, 210, 189, 58, 40, 218, 163, 190, 10, 180, 132, 190, 112, 173, 91, 190, 63, 158, 90, 62, 115, 220, 211, 62, 126, 248, 140, 190, 196, 227, 48, 190, 194, 253, 194, 190, 206, 175, 41, 62, 33, 253, 101, 61, 89, 11, 115, 62, 79, 42, 147, 190, 2, 135, 185, 61, 0, 20, 35, 62, 185, 179, 199, 61, 48, 234, 78, 62, 243, 220, 245, 189, 59, 104, 176, 62, 3, 187, 174, 60, 114, 162, 10, 190, 140, 87, 43, 62, 214, 65, 99, 61, 97, 124, 77, 191, 230, 181, 88, 190, 133, 62, 184, 189, 246, 254, 136, 188, 145, 42, 75, 191, 178, 30, 154, 61, 233, 174, 185, 62, 53, 37, 123, 62, 115, 42, 122, 190, 203, 249, 162, 61, 104, 190, 48, 191, 216, 184, 162, 189, 96, 105, 75, 190, 22, 84, 150, 62, 159, 68, 235, 60, 171, 38, 196, 190, 110, 126, 145, 185, 115, 28, 242, 190, 45, 89, 48, 61, 251, 186, 116, 62, 73, 222, 78, 62, 243, 155, 1, 188, 183, 33, 154, 61, 6, 12, 18, 62, 254, 15, 52, 190, 162, 99, 75, 62, 193, 107, 90, 190, 232, 226, 177, 62, 67, 172, 173, 190, 183, 235, 193, 190, 249, 37, 25, 61, 112, 63, 145, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 251, 239, 189, 81, 238, 131, 62, 76, 153, 17, 190, 56, 149, 119, 189, 107, 81, 3, 62, 222, 153, 112, 61, 51, 183, 72, 188, 161, 16, 27, 190, 66, 218, 249, 187, 248, 196, 152, 189, 174, 206, 60, 62, 138, 186, 44, 61, 15, 28, 33, 62, 67, 212, 226, 61, 35, 233, 175, 62, 249, 13, 62, 190, 89, 16, 137, 62, 85, 155, 55, 62, 24, 57, 229, 189, 44, 120, 66, 61, 248, 238, 154, 60, 104, 0, 49, 62, 37, 166, 49, 190, 100, 128, 95, 61, 29, 203, 130, 62, 147, 171, 88, 62, 157, 94, 175, 61, 238, 230, 164, 189, 48, 159, 74, 62, 107, 106, 47, 62, 37, 249, 141, 62, 45, 192, 172, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 34, 173, 63, 217, 37, 31, 63, 53, 195, 143, 190, 122, 149, 159, 62, 231, 120, 240, 190, 43, 224, 156, 61, 188, 101, 148, 190, 110, 225, 108, 61, 24, 245, 4, 190, 218, 12, 239, 190, 175, 113, 186, 190, 180, 255, 107, 191, 64, 7, 63, 63, 50, 173, 0, 62, 62, 123, 141, 61, 25, 56, 12, 62, 46, 12, 49, 191, 56, 161, 194, 189, 90, 38, 168, 188, 76, 104, 87, 63, 204, 186, 75, 190, 3, 77, 70, 63, 11, 107, 232, 189, 241, 4, 146, 62, 87, 179, 148, 191, 129, 169, 255, 62, 29, 189, 139, 63, 218, 254, 6, 60, 176, 154, 7, 61, 234, 186, 0, 62, 71, 18, 15, 191, 140, 208, 223, 190, 187, 22, 237, 62, 43, 93, 208, 61, 71, 42, 29, 62, 224, 247, 190, 60, 7, 58, 235, 190, 240, 83, 203, 190, 29, 81, 58, 190, 132, 185, 210, 60, 62, 165, 210, 190, 150, 133, 64, 191, 112, 6, 38, 190, 1, 174, 220, 62, 240, 155, 143, 61, 19, 86, 222, 189, 198, 61, 133, 190, 153, 8, 140, 59, 49, 13, 189, 61, 25, 22, 112, 190, 51, 79, 24, 189, 23, 138, 88, 62, 178, 214, 164, 189, 100, 92, 75, 62, 158, 34, 173, 60, 110, 196, 219, 62, 95, 201, 79, 62, 54, 134, 62, 190, 0, 87, 44, 61, 33, 81, 232, 61, 11, 157, 60, 190, 99, 71, 4, 191, 191, 80, 101, 59, 87, 242, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 107, 242, 189, 12, 9, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 168, 30, 192, 123, 10, 25, 63, 27, 139, 146, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 156, 4, 193, 210, 166, 197, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}