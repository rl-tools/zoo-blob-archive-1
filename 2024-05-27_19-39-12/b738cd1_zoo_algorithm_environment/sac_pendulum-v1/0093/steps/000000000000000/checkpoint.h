// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 39, 32, 190, 144, 217, 11, 191, 4, 187, 228, 190, 110, 77, 194, 61, 119, 255, 183, 189, 25, 55, 185, 62, 247, 128, 213, 62, 103, 66, 5, 191, 110, 57, 192, 62, 196, 238, 147, 190, 147, 75, 12, 191, 94, 134, 172, 62, 20, 54, 132, 62, 48, 169, 7, 191, 240, 48, 128, 190, 143, 238, 133, 61, 26, 10, 33, 190, 234, 79, 56, 189, 233, 15, 20, 61, 76, 24, 43, 62, 65, 138, 21, 189, 5, 135, 243, 62, 99, 233, 165, 61, 68, 92, 45, 62, 139, 80, 53, 189, 77, 69, 182, 190, 32, 76, 209, 62, 57, 244, 234, 190, 216, 122, 202, 190, 47, 4, 59, 190, 92, 220, 37, 190, 201, 67, 254, 62, 200, 126, 186, 62, 108, 143, 196, 62, 199, 97, 21, 190, 200, 140, 199, 190, 135, 25, 13, 191, 250, 222, 4, 191, 154, 126, 240, 62, 192, 190, 201, 62, 163, 41, 160, 62, 63, 88, 51, 62, 74, 65, 14, 190, 192, 225, 34, 189, 217, 66, 100, 62, 152, 0, 177, 189, 220, 184, 20, 61, 27, 148, 16, 63, 29, 136, 156, 189, 151, 154, 14, 191, 77, 166, 8, 61, 62, 165, 255, 62, 97, 39, 0, 191, 166, 242, 230, 190, 237, 203, 235, 62, 222, 37, 175, 62, 69, 182, 58, 62, 50, 209, 117, 62, 173, 184, 194, 61, 78, 79, 238, 189, 91, 27, 168, 62, 89, 153, 31, 188, 252, 250, 125, 62, 101, 233, 190, 190, 34, 88, 174, 190, 179, 6, 184, 190, 240, 239, 243, 60, 192, 126, 248, 62, 188, 246, 173, 62, 23, 37, 149, 190, 7, 243, 152, 61, 121, 160, 210, 60, 217, 76, 235, 190, 204, 197, 89, 190, 109, 225, 5, 191, 11, 36, 15, 63, 18, 51, 19, 63, 31, 95, 155, 62, 145, 66, 139, 62, 134, 171, 174, 189, 29, 80, 232, 190, 106, 35, 211, 62, 170, 172, 179, 62, 56, 196, 61, 190, 211, 147, 135, 62, 33, 109, 139, 62, 65, 231, 205, 190, 125, 102, 19, 63, 106, 145, 187, 190, 32, 203, 141, 190, 200, 8, 184, 62, 189, 231, 128, 190, 172, 30, 3, 63, 31, 221, 131, 62, 139, 159, 199, 190, 201, 31, 116, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 149, 19, 191, 85, 60, 248, 190, 167, 52, 209, 62, 177, 33, 230, 190, 97, 141, 243, 190, 131, 137, 151, 190, 131, 181, 59, 61, 81, 39, 234, 190, 158, 178, 73, 62, 149, 58, 23, 189, 44, 143, 164, 190, 28, 23, 152, 190, 144, 80, 31, 62, 127, 107, 48, 190, 231, 136, 137, 62, 181, 191, 8, 191, 102, 119, 144, 62, 88, 125, 242, 190, 184, 75, 6, 191, 242, 121, 98, 189, 156, 32, 186, 62, 252, 63, 8, 62, 232, 188, 4, 63, 165, 115, 18, 63, 168, 72, 139, 62, 206, 186, 248, 59, 157, 1, 110, 189, 69, 186, 154, 190, 165, 57, 218, 190, 244, 111, 14, 191, 230, 26, 123, 61, 108, 116, 249, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 127, 252, 61, 44, 242, 49, 189, 145, 130, 149, 189, 176, 105, 5, 190, 39, 43, 36, 190, 56, 3, 169, 189, 222, 223, 155, 188, 204, 52, 44, 62, 108, 68, 5, 62, 98, 115, 220, 189, 250, 16, 184, 187, 229, 144, 44, 188, 177, 83, 223, 61, 130, 239, 160, 189, 93, 81, 26, 62, 85, 198, 200, 188, 74, 235, 219, 188, 70, 167, 116, 189, 165, 164, 16, 190, 237, 186, 144, 61, 121, 48, 24, 62, 73, 36, 44, 61, 72, 113, 99, 189, 234, 45, 251, 61, 136, 178, 200, 61, 80, 151, 49, 190, 58, 124, 252, 189, 248, 198, 20, 62, 21, 76, 204, 189, 202, 81, 192, 188, 112, 10, 129, 187, 161, 229, 146, 189, 84, 88, 10, 61, 24, 208, 14, 190, 128, 58, 114, 61, 193, 79, 186, 61, 111, 41, 20, 190, 169, 65, 89, 189, 204, 239, 29, 190, 200, 19, 201, 60, 80, 177, 115, 189, 111, 85, 180, 189, 107, 246, 109, 61, 88, 111, 183, 189, 222, 80, 130, 61, 163, 255, 100, 189, 28, 24, 208, 61, 198, 4, 145, 61, 230, 143, 40, 61, 103, 106, 216, 61, 16, 159, 0, 62, 131, 221, 187, 59, 88, 64, 38, 190, 237, 39, 224, 60, 85, 152, 177, 189, 155, 19, 193, 189, 17, 47, 10, 62, 235, 170, 177, 188, 252, 197, 136, 59, 210, 90, 24, 62, 91, 201, 145, 189, 193, 89, 173, 60, 53, 111, 182, 188, 206, 253, 253, 61, 130, 214, 141, 188, 33, 248, 206, 188, 187, 177, 2, 188, 144, 243, 146, 189, 87, 182, 249, 59, 49, 78, 191, 61, 202, 84, 50, 190, 91, 50, 211, 61, 97, 173, 155, 61, 170, 3, 46, 190, 237, 81, 220, 189, 33, 195, 208, 59, 118, 74, 79, 189, 15, 81, 161, 61, 209, 147, 23, 62, 163, 254, 208, 189, 28, 231, 20, 189, 165, 122, 69, 189, 96, 110, 11, 61, 22, 161, 152, 61, 86, 67, 166, 189, 5, 50, 168, 189, 21, 29, 248, 188, 249, 59, 160, 61, 28, 96, 213, 61, 99, 72, 154, 189, 11, 240, 90, 189, 137, 149, 151, 60, 230, 152, 6, 190, 166, 174, 30, 190, 145, 198, 38, 62, 50, 150, 189, 61, 247, 234, 186, 61, 241, 150, 243, 189, 165, 254, 26, 189, 92, 63, 106, 61, 145, 138, 5, 190, 24, 125, 22, 190, 237, 85, 114, 189, 0, 254, 52, 190, 36, 198, 173, 189, 57, 77, 26, 62, 184, 127, 129, 61, 214, 176, 48, 189, 13, 214, 2, 62, 145, 25, 112, 189, 83, 48, 34, 62, 83, 100, 235, 61, 26, 162, 125, 189, 246, 148, 10, 62, 39, 245, 22, 62, 110, 49, 177, 188, 39, 130, 169, 189, 232, 47, 30, 62, 225, 196, 32, 190, 4, 27, 23, 190, 137, 66, 141, 61, 0, 0, 61, 189, 85, 11, 52, 190, 179, 105, 169, 189, 2, 51, 250, 189, 117, 46, 43, 62, 159, 182, 148, 189, 65, 205, 50, 61, 35, 74, 16, 62, 88, 82, 12, 62, 186, 191, 132, 61, 134, 35, 229, 61, 70, 226, 231, 189, 178, 13, 16, 190, 45, 114, 26, 190, 165, 93, 45, 61, 73, 8, 143, 60, 192, 110, 139, 58, 11, 244, 27, 190, 30, 198, 83, 61, 37, 86, 140, 189, 14, 228, 29, 190, 204, 77, 144, 61, 3, 212, 43, 190, 145, 190, 132, 61, 20, 241, 152, 61, 179, 56, 3, 60, 205, 94, 193, 189, 196, 242, 29, 190, 247, 162, 41, 190, 63, 164, 219, 188, 234, 177, 31, 62, 178, 96, 33, 190, 63, 154, 236, 61, 72, 193, 215, 188, 53, 4, 234, 186, 113, 143, 55, 61, 184, 68, 4, 62, 21, 148, 236, 61, 208, 136, 4, 62, 90, 238, 37, 62, 120, 38, 156, 60, 230, 112, 52, 61, 121, 175, 108, 61, 123, 33, 218, 188, 216, 222, 150, 61, 100, 3, 154, 188, 87, 34, 200, 61, 25, 119, 29, 62, 5, 172, 117, 60, 170, 227, 140, 189, 15, 202, 193, 189, 200, 140, 105, 189, 70, 100, 40, 62, 100, 244, 205, 61, 177, 223, 38, 190, 239, 134, 131, 61, 128, 161, 128, 188, 125, 133, 28, 190, 31, 216, 165, 189, 33, 232, 48, 62, 71, 177, 23, 190, 232, 169, 155, 188, 96, 52, 218, 189, 83, 153, 46, 61, 33, 198, 2, 62, 42, 146, 153, 188, 7, 254, 99, 189, 160, 203, 70, 188, 20, 54, 148, 61, 181, 47, 160, 61, 38, 229, 132, 61, 87, 251, 156, 189, 73, 182, 144, 61, 20, 5, 228, 184, 180, 107, 116, 189, 139, 36, 218, 61, 196, 158, 32, 62, 153, 16, 51, 190, 139, 156, 169, 61, 133, 24, 126, 188, 141, 115, 178, 189, 218, 117, 79, 189, 140, 46, 185, 61, 77, 123, 5, 62, 196, 21, 255, 189, 172, 240, 191, 60, 154, 143, 137, 189, 199, 143, 122, 187, 34, 152, 182, 61, 50, 31, 222, 61, 7, 204, 140, 189, 101, 137, 52, 189, 122, 237, 197, 189, 121, 181, 158, 189, 102, 179, 33, 61, 232, 208, 240, 189, 72, 41, 197, 61, 119, 185, 27, 62, 147, 113, 167, 61, 40, 105, 3, 190, 150, 32, 49, 62, 142, 42, 131, 189, 116, 84, 24, 62, 33, 90, 34, 62, 22, 16, 9, 189, 142, 163, 199, 61, 250, 187, 173, 188, 191, 71, 108, 189, 11, 249, 160, 189, 233, 178, 30, 190, 48, 206, 225, 189, 81, 90, 222, 189, 173, 217, 112, 189, 176, 139, 189, 189, 55, 168, 246, 61, 11, 172, 222, 61, 96, 141, 25, 190, 22, 13, 13, 190, 98, 69, 135, 188, 214, 162, 78, 60, 160, 21, 37, 190, 76, 69, 179, 61, 252, 201, 104, 61, 53, 64, 214, 189, 83, 188, 25, 189, 249, 144, 163, 189, 160, 116, 3, 62, 165, 35, 20, 190, 101, 1, 17, 189, 186, 132, 9, 61, 0, 49, 141, 59, 218, 188, 118, 189, 110, 140, 20, 62, 180, 159, 18, 61, 49, 7, 226, 189, 235, 49, 11, 61, 52, 40, 42, 62, 251, 149, 171, 61, 48, 125, 156, 189, 86, 2, 3, 190, 133, 36, 67, 61, 254, 196, 153, 189, 6, 24, 172, 189, 235, 218, 25, 62, 190, 72, 35, 62, 93, 248, 126, 61, 64, 73, 66, 61, 116, 86, 93, 189, 64, 24, 143, 61, 78, 92, 38, 62, 129, 93, 21, 187, 90, 43, 249, 189, 149, 23, 9, 62, 64, 12, 186, 61, 86, 63, 42, 62, 44, 172, 28, 62, 162, 247, 176, 61, 90, 248, 219, 189, 114, 70, 74, 61, 67, 55, 29, 190, 42, 201, 40, 190, 168, 21, 24, 62, 124, 212, 185, 61, 198, 189, 21, 62, 196, 82, 43, 62, 208, 46, 9, 62, 93, 42, 42, 62, 233, 15, 9, 62, 195, 224, 65, 189, 87, 107, 31, 189, 53, 228, 136, 189, 144, 90, 42, 190, 252, 202, 5, 190, 227, 240, 12, 189, 80, 84, 193, 61, 165, 146, 47, 62, 193, 58, 249, 189, 176, 77, 207, 187, 43, 214, 187, 61, 58, 198, 109, 187, 111, 38, 43, 190, 205, 255, 245, 189, 19, 108, 91, 188, 114, 84, 1, 62, 236, 171, 3, 189, 83, 28, 96, 189, 2, 73, 181, 59, 12, 195, 211, 186, 29, 80, 143, 61, 29, 88, 44, 190, 170, 241, 164, 61, 60, 54, 11, 190, 138, 130, 244, 61, 166, 207, 41, 62, 138, 96, 129, 61, 151, 143, 147, 60, 240, 221, 203, 61, 131, 228, 230, 60, 122, 21, 93, 189, 238, 80, 12, 62, 84, 215, 212, 188, 186, 28, 11, 189, 134, 204, 49, 62, 30, 253, 54, 186, 156, 221, 132, 189, 140, 132, 22, 188, 21, 246, 202, 61, 191, 7, 166, 60, 125, 178, 37, 62, 217, 252, 143, 61, 96, 83, 134, 61, 36, 89, 244, 188, 248, 248, 206, 60, 204, 219, 112, 60, 207, 7, 104, 189, 98, 234, 15, 61, 185, 21, 185, 61, 6, 97, 41, 61, 95, 234, 159, 189, 96, 195, 21, 61, 144, 140, 48, 61, 10, 225, 252, 186, 171, 225, 206, 61, 198, 13, 154, 60, 229, 134, 109, 188, 192, 93, 122, 189, 165, 102, 216, 61, 215, 23, 169, 59, 158, 229, 222, 61, 129, 48, 147, 189, 203, 127, 51, 62, 177, 246, 246, 189, 15, 75, 25, 190, 115, 163, 3, 190, 241, 226, 235, 188, 150, 160, 123, 61, 37, 209, 243, 61, 196, 60, 11, 62, 85, 89, 94, 189, 153, 9, 39, 62, 169, 64, 23, 62, 171, 122, 5, 190, 134, 18, 41, 62, 177, 77, 41, 189, 109, 190, 12, 61, 90, 101, 33, 62, 161, 200, 46, 190, 18, 139, 254, 187, 3, 100, 197, 189, 27, 69, 177, 61, 201, 46, 202, 189, 132, 47, 150, 59, 74, 65, 48, 189, 91, 117, 23, 62, 39, 63, 135, 61, 178, 93, 212, 61, 158, 220, 0, 62, 5, 102, 129, 61, 158, 231, 35, 190, 8, 254, 155, 59, 235, 252, 218, 61, 133, 190, 181, 60, 26, 18, 1, 190, 119, 128, 0, 62, 53, 82, 41, 62, 68, 35, 28, 62, 31, 30, 23, 62, 236, 35, 5, 62, 163, 78, 143, 189, 171, 81, 13, 190, 130, 234, 46, 190, 31, 31, 112, 189, 140, 238, 141, 61, 10, 182, 40, 62, 178, 123, 33, 61, 131, 83, 77, 61, 49, 110, 12, 188, 40, 181, 35, 190, 171, 48, 110, 61, 162, 62, 12, 62, 148, 221, 13, 190, 161, 192, 81, 61, 36, 81, 250, 61, 149, 209, 187, 61, 102, 116, 26, 190, 197, 246, 204, 189, 134, 126, 37, 62, 240, 215, 162, 189, 171, 6, 75, 61, 68, 1, 203, 61, 175, 141, 207, 60, 204, 106, 21, 62, 203, 117, 26, 62, 76, 9, 40, 190, 243, 139, 154, 61, 57, 149, 187, 61, 141, 217, 18, 61, 90, 129, 224, 61, 228, 238, 57, 61, 128, 111, 11, 189, 123, 172, 189, 189, 122, 231, 4, 62, 232, 69, 103, 189, 151, 167, 31, 189, 155, 154, 229, 60, 25, 162, 5, 62, 16, 244, 229, 189, 9, 90, 21, 62, 70, 33, 12, 62, 189, 221, 205, 61, 60, 171, 47, 62, 73, 215, 37, 61, 35, 104, 204, 189, 63, 3, 13, 62, 166, 137, 190, 61, 229, 45, 227, 189, 253, 70, 142, 189, 27, 132, 47, 190, 137, 3, 223, 187, 190, 107, 41, 62, 186, 50, 178, 60, 70, 50, 193, 60, 227, 89, 16, 61, 211, 198, 224, 61, 117, 5, 27, 62, 21, 242, 20, 190, 180, 7, 40, 62, 181, 207, 109, 61, 34, 141, 57, 187, 124, 170, 19, 62, 168, 71, 58, 61, 254, 17, 209, 188, 53, 52, 155, 189, 13, 2, 41, 62, 213, 181, 22, 189, 120, 116, 37, 189, 131, 79, 172, 189, 76, 120, 14, 62, 130, 249, 255, 188, 178, 83, 15, 190, 213, 54, 219, 61, 87, 185, 227, 61, 172, 150, 103, 189, 58, 108, 165, 61, 114, 73, 196, 189, 44, 13, 67, 189, 224, 48, 196, 61, 76, 40, 6, 189, 200, 134, 217, 186, 223, 54, 27, 61, 187, 92, 12, 62, 49, 97, 192, 60, 198, 139, 2, 62, 148, 47, 4, 62, 125, 128, 50, 62, 97, 235, 4, 190, 231, 128, 35, 62, 202, 122, 2, 62, 140, 56, 206, 61, 2, 54, 192, 189, 133, 159, 43, 62, 111, 4, 216, 61, 39, 69, 30, 61, 195, 173, 86, 189, 171, 237, 45, 62, 200, 84, 228, 61, 38, 38, 192, 188, 125, 93, 253, 187, 248, 18, 30, 62, 120, 101, 223, 61, 72, 4, 13, 62, 65, 223, 34, 62, 9, 53, 134, 60, 220, 105, 151, 189, 56, 114, 34, 62, 70, 151, 198, 61, 235, 80, 11, 190, 131, 170, 52, 62, 222, 202, 16, 61, 158, 160, 28, 62, 54, 171, 86, 61, 73, 91, 18, 62, 127, 242, 248, 61, 242, 210, 40, 62, 219, 250, 255, 61, 58, 86, 213, 189, 246, 181, 29, 61, 198, 180, 2, 62, 68, 16, 145, 189, 92, 15, 101, 189, 22, 3, 26, 190, 216, 157, 14, 190, 143, 91, 202, 61, 53, 66, 134, 60, 237, 104, 1, 61, 180, 26, 9, 189, 92, 215, 148, 189, 85, 219, 96, 61, 217, 48, 1, 190, 188, 49, 36, 190, 212, 136, 26, 190, 206, 93, 138, 59, 208, 145, 194, 189, 16, 212, 197, 189, 97, 80, 246, 60, 245, 19, 243, 61, 199, 24, 167, 61, 36, 18, 22, 190, 111, 168, 164, 61, 183, 108, 11, 188, 71, 171, 40, 62, 2, 45, 104, 61, 54, 100, 21, 190, 86, 162, 167, 189, 231, 194, 167, 188, 113, 9, 52, 62, 97, 254, 28, 189, 235, 142, 92, 188, 34, 23, 177, 60, 25, 9, 3, 190, 51, 242, 4, 189, 207, 56, 156, 60, 144, 79, 38, 190, 51, 126, 3, 190, 44, 119, 236, 189, 117, 138, 184, 61, 192, 89, 49, 62, 89, 100, 134, 61, 243, 108, 36, 62, 148, 44, 110, 61, 226, 184, 146, 61, 69, 40, 247, 189, 42, 54, 235, 60, 233, 73, 3, 189, 7, 20, 209, 61, 209, 6, 114, 60, 198, 164, 165, 61, 18, 75, 81, 189, 61, 211, 191, 187, 47, 206, 206, 189, 148, 54, 207, 189, 13, 183, 179, 61, 57, 58, 44, 62, 167, 218, 254, 61, 173, 61, 26, 190, 168, 50, 2, 190, 135, 1, 148, 189, 123, 80, 37, 190, 181, 224, 25, 190, 4, 172, 52, 62, 133, 170, 6, 62, 110, 144, 4, 190, 18, 14, 161, 188, 18, 193, 21, 62, 88, 50, 205, 60, 121, 151, 179, 61, 215, 119, 12, 190, 84, 231, 203, 59, 76, 160, 138, 189, 10, 13, 191, 61, 232, 246, 16, 190, 72, 105, 204, 61, 88, 153, 206, 189, 183, 70, 51, 190, 239, 68, 24, 62, 47, 140, 118, 189, 70, 194, 10, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 10, 47, 244, 189, 153, 7, 20, 61, 28, 126, 172, 58, 194, 60, 31, 190, 188, 250, 223, 189, 248, 127, 222, 60, 168, 127, 82, 61, 163, 53, 18, 59, 243, 64, 159, 60, 124, 150, 65, 61, 240, 139, 186, 189, 37, 23, 137, 188, 242, 11, 45, 62, 128, 186, 10, 62, 245, 48, 162, 61, 87, 66, 203, 189, 154, 76, 76, 61, 21, 228, 165, 60, 41, 96, 254, 189, 107, 82, 41, 190, 103, 24, 42, 190, 209, 224, 6, 190, 89, 159, 45, 190, 32, 28, 35, 189, 120, 23, 244, 187, 150, 5, 31, 189, 38, 132, 25, 62, 139, 91, 205, 189, 58, 162, 231, 61, 123, 248, 19, 190, 188, 175, 197, 189, 112, 72, 9, 62, 137, 69, 41, 61, 41, 246, 40, 190, 216, 179, 188, 61, 92, 115, 0, 61, 75, 39, 164, 189, 147, 78, 193, 189, 253, 102, 75, 60, 237, 65, 106, 61, 148, 19, 183, 189, 124, 214, 52, 190, 224, 116, 214, 188, 187, 74, 42, 190, 205, 118, 52, 190, 47, 179, 200, 61, 144, 80, 28, 190, 22, 110, 5, 62, 43, 132, 201, 189, 90, 201, 46, 62, 145, 34, 94, 61, 22, 186, 159, 60, 144, 36, 46, 189, 128, 62, 196, 188, 36, 78, 155, 61, 95, 116, 39, 189, 166, 41, 33, 190, 169, 33, 224, 61, 11, 160, 35, 62, 163, 62, 38, 59, 135, 24, 21, 190, 237, 72, 50, 62, 163, 132, 32, 190, 120, 78, 168, 61, 41, 140, 242, 189, 247, 243, 237, 60, 122, 169, 131, 189, 23, 248, 251, 188, 110, 60, 92, 189, 176, 62, 190, 187, 248, 241, 35, 59, 142, 195, 232, 188, 13, 170, 212, 61, 199, 182, 202, 61, 122, 241, 229, 61, 14, 27, 0, 62, 234, 38, 227, 60, 46, 127, 76, 61, 251, 51, 253, 61, 121, 130, 181, 61, 133, 242, 203, 61, 193, 216, 155, 188, 175, 131, 3, 190, 32, 136, 232, 189, 253, 190, 29, 190, 160, 112, 228, 188, 236, 143, 11, 62, 28, 41, 213, 188, 127, 229, 144, 60, 101, 113, 130, 189, 100, 141, 151, 61, 154, 46, 164, 189, 240, 27, 205, 60, 135, 68, 165, 61, 223, 72, 58, 61, 15, 158, 190, 187, 54, 204, 40, 62, 148, 159, 63, 61, 62, 150, 163, 188, 6, 215, 201, 189, 66, 128, 43, 188, 5, 45, 16, 62, 170, 87, 27, 61, 85, 187, 54, 189, 174, 164, 181, 61, 247, 143, 168, 61, 241, 87, 15, 190, 51, 47, 41, 190, 233, 164, 240, 188, 196, 67, 29, 190, 74, 160, 192, 61, 190, 199, 106, 61, 88, 114, 20, 62, 71, 106, 6, 62, 88, 211, 184, 187, 46, 155, 61, 189, 149, 91, 41, 62, 251, 45, 62, 61, 254, 155, 135, 61, 205, 239, 208, 189, 64, 130, 175, 61, 251, 48, 101, 189, 7, 154, 145, 60, 161, 167, 252, 188, 209, 43, 62, 189, 63, 128, 1, 189, 214, 170, 86, 60, 195, 52, 94, 189, 34, 19, 45, 61, 139, 7, 238, 189, 31, 107, 136, 188, 175, 143, 8, 62, 159, 205, 11, 190, 153, 63, 38, 189, 167, 174, 33, 190, 239, 232, 137, 61, 191, 209, 32, 61, 19, 127, 30, 62, 35, 132, 253, 188, 113, 159, 59, 189, 10, 245, 47, 62, 180, 120, 52, 62, 240, 244, 195, 60, 255, 60, 43, 61, 150, 129, 240, 61, 158, 37, 40, 190, 166, 177, 225, 60, 157, 27, 232, 189, 235, 243, 17, 62, 234, 27, 17, 190, 82, 39, 27, 190, 6, 230, 195, 61, 159, 92, 46, 61, 194, 117, 13, 190, 133, 233, 32, 188, 112, 112, 47, 61, 104, 180, 35, 61, 174, 179, 217, 188, 3, 39, 219, 189, 17, 77, 46, 61, 2, 234, 11, 189, 185, 150, 133, 61, 112, 87, 137, 189, 62, 157, 236, 60, 15, 13, 143, 60, 14, 99, 33, 61, 158, 127, 18, 60, 168, 234, 167, 60, 146, 45, 18, 62, 191, 71, 156, 60, 191, 124, 47, 189, 85, 228, 237, 61, 45, 117, 83, 189, 54, 129, 70, 189, 132, 140, 139, 61, 220, 87, 95, 61, 238, 161, 32, 190, 159, 131, 229, 188, 39, 50, 92, 61, 222, 194, 34, 190, 163, 245, 18, 61, 21, 167, 22, 190, 253, 107, 158, 61, 248, 155, 163, 61, 27, 174, 4, 190, 113, 85, 30, 190, 114, 64, 3, 190, 233, 26, 58, 189, 72, 172, 17, 61, 16, 227, 251, 189, 118, 228, 215, 61, 25, 137, 152, 61, 68, 88, 18, 190, 50, 191, 147, 61, 252, 254, 31, 62, 95, 18, 42, 190, 112, 229, 201, 189, 131, 213, 243, 189, 168, 63, 159, 61, 227, 44, 23, 62, 43, 121, 133, 60, 185, 73, 41, 190, 80, 141, 27, 61, 24, 211, 221, 61, 236, 251, 8, 189, 178, 110, 137, 61, 140, 104, 31, 60, 67, 53, 47, 190, 210, 234, 0, 190, 225, 152, 177, 61, 121, 190, 228, 61, 230, 206, 46, 190, 118, 232, 101, 189, 109, 246, 193, 189, 219, 27, 133, 189, 77, 71, 239, 61, 110, 177, 97, 60, 26, 77, 107, 189, 12, 230, 75, 61, 55, 163, 19, 62, 236, 208, 136, 189, 174, 94, 201, 61, 236, 136, 43, 61, 83, 243, 144, 189, 152, 179, 40, 62, 114, 206, 239, 189, 246, 76, 212, 189, 138, 186, 104, 61, 80, 227, 143, 58, 247, 116, 134, 61, 74, 233, 97, 188, 37, 93, 42, 190, 163, 202, 106, 61, 102, 184, 160, 188, 221, 201, 0, 62, 170, 123, 160, 189, 229, 48, 203, 188, 161, 118, 13, 189, 15, 121, 147, 61, 240, 215, 239, 60, 64, 147, 50, 190, 68, 219, 75, 188, 107, 166, 45, 190, 144, 29, 15, 190, 169, 193, 44, 61, 217, 12, 251, 187, 24, 63, 148, 189, 37, 114, 97, 188, 21, 238, 45, 189, 95, 146, 17, 62, 20, 208, 2, 189, 140, 42, 136, 189, 240, 151, 3, 62, 18, 136, 3, 187, 103, 184, 19, 190, 223, 94, 251, 61, 27, 251, 205, 189, 50, 9, 86, 189, 106, 171, 171, 188, 167, 189, 131, 189, 141, 124, 242, 60, 161, 150, 54, 61, 233, 159, 245, 60, 115, 35, 243, 61, 44, 43, 4, 190, 121, 183, 221, 61, 203, 15, 17, 62, 88, 11, 167, 61, 26, 224, 4, 62, 129, 166, 51, 190, 41, 52, 145, 60, 109, 205, 15, 190, 214, 220, 48, 62, 171, 244, 40, 190, 218, 212, 41, 190, 32, 9, 49, 189, 3, 221, 1, 62, 44, 15, 236, 189, 31, 128, 228, 189, 49, 69, 69, 61, 149, 201, 45, 62, 164, 211, 164, 189, 168, 105, 26, 61, 66, 204, 241, 60, 92, 56, 59, 61, 120, 63, 102, 189, 158, 234, 153, 189, 120, 31, 254, 61, 84, 248, 15, 190, 147, 9, 34, 62, 57, 182, 215, 61, 153, 246, 207, 59, 53, 160, 218, 189, 155, 140, 248, 61, 123, 252, 164, 61, 210, 241, 17, 190, 15, 16, 158, 189, 96, 194, 30, 61, 6, 108, 42, 190, 147, 16, 40, 62, 40, 111, 26, 61, 59, 115, 241, 61, 236, 141, 33, 62, 28, 6, 53, 189, 155, 216, 183, 188, 179, 227, 101, 61, 223, 96, 152, 60, 141, 149, 171, 61, 97, 135, 184, 189, 61, 170, 152, 189, 101, 173, 16, 62, 155, 7, 12, 62, 247, 240, 5, 190, 213, 202, 172, 59, 227, 221, 235, 189, 218, 54, 94, 61, 106, 168, 13, 188, 200, 248, 153, 187, 22, 49, 6, 190, 216, 55, 12, 62, 7, 127, 8, 62, 94, 82, 19, 190, 243, 128, 88, 189, 20, 129, 217, 61, 91, 116, 8, 190, 176, 185, 247, 61, 40, 68, 22, 61, 188, 251, 98, 188, 201, 184, 23, 62, 98, 4, 22, 62, 215, 212, 200, 61, 24, 119, 9, 190, 92, 24, 25, 62, 0, 53, 118, 61, 57, 4, 28, 62, 25, 149, 153, 189, 3, 43, 72, 61, 105, 233, 32, 61, 183, 81, 49, 190, 44, 80, 197, 61, 107, 206, 123, 188, 91, 121, 15, 62, 171, 16, 43, 190, 34, 68, 14, 190, 246, 171, 35, 190, 121, 84, 115, 189, 203, 99, 103, 188, 90, 157, 4, 190, 64, 153, 16, 190, 173, 168, 192, 61, 24, 53, 224, 188, 182, 98, 155, 188, 96, 46, 226, 61, 207, 232, 37, 60, 173, 236, 8, 62, 6, 115, 44, 62, 58, 248, 251, 189, 105, 79, 9, 62, 220, 253, 9, 62, 22, 27, 186, 59, 112, 76, 130, 187, 34, 27, 32, 188, 249, 142, 38, 62, 117, 20, 131, 61, 67, 187, 25, 190, 132, 114, 209, 61, 101, 118, 13, 190, 176, 55, 80, 189, 178, 207, 41, 190, 0, 181, 135, 189, 201, 66, 247, 59, 204, 239, 211, 189, 156, 227, 13, 190, 220, 160, 149, 60, 131, 3, 202, 61, 60, 46, 184, 60, 198, 35, 158, 189, 195, 34, 233, 61, 47, 109, 37, 62, 11, 230, 5, 190, 65, 193, 212, 186, 194, 11, 107, 189, 235, 166, 20, 61, 145, 169, 163, 61, 124, 78, 64, 189, 172, 82, 56, 61, 219, 30, 156, 61, 4, 61, 138, 189, 67, 110, 192, 61, 178, 48, 7, 190, 232, 89, 75, 60, 91, 217, 158, 59, 47, 196, 33, 62, 222, 162, 206, 189, 214, 210, 1, 190, 47, 203, 120, 61, 3, 35, 35, 62, 0, 248, 241, 61, 12, 94, 47, 62, 246, 133, 43, 61, 159, 92, 149, 59, 149, 85, 229, 189, 142, 228, 157, 189, 57, 242, 157, 60, 189, 93, 36, 190, 243, 25, 19, 190, 57, 78, 236, 60, 198, 166, 186, 61, 69, 34, 46, 62, 25, 20, 82, 189, 146, 149, 60, 189, 167, 85, 237, 61, 221, 82, 240, 188, 104, 247, 25, 62, 82, 117, 10, 190, 195, 64, 232, 61, 161, 168, 73, 188, 66, 242, 20, 189, 234, 186, 1, 62, 24, 151, 49, 62, 160, 146, 223, 61, 162, 245, 46, 62, 214, 20, 133, 61, 116, 163, 65, 60, 73, 73, 114, 189, 220, 188, 211, 60, 93, 186, 221, 189, 194, 200, 243, 61, 78, 13, 8, 190, 77, 85, 43, 60, 175, 171, 38, 61, 22, 49, 251, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 126, 51, 190, 150, 16, 206, 61, 121, 44, 35, 190, 94, 63, 12, 190, 164, 159, 72, 61, 186, 39, 236, 189, 211, 96, 210, 189, 180, 233, 0, 190, 83, 83, 44, 190, 166, 54, 6, 190, 86, 242, 79, 61, 255, 191, 203, 188, 225, 24, 49, 61, 154, 109, 200, 61, 0, 33, 52, 62, 200, 146, 203, 189, 133, 167, 191, 61, 162, 255, 229, 61, 206, 47, 191, 189, 112, 35, 37, 60, 71, 247, 181, 61, 88, 158, 62, 61, 254, 156, 134, 189, 91, 114, 1, 62, 126, 163, 224, 60, 166, 166, 201, 61, 44, 213, 152, 189, 24, 174, 164, 61, 170, 102, 210, 60, 120, 89, 24, 61, 217, 115, 41, 62, 141, 253, 241, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 227, 142, 60, 224, 48, 117, 61, 228, 24, 3, 190, 6, 8, 130, 60, 88, 119, 31, 190, 169, 36, 193, 60, 47, 98, 151, 189, 111, 136, 81, 61, 249, 24, 146, 189, 99, 107, 102, 189, 225, 69, 147, 189, 198, 38, 32, 190, 69, 254, 183, 61, 209, 21, 160, 189, 49, 117, 110, 61, 116, 206, 50, 62, 163, 234, 165, 189, 225, 188, 137, 189, 113, 26, 40, 189, 118, 150, 23, 60, 38, 133, 126, 189, 40, 119, 1, 61, 64, 205, 34, 190, 163, 249, 157, 61, 62, 137, 79, 189, 217, 76, 8, 62, 144, 106, 50, 62, 20, 170, 248, 189, 120, 171, 16, 61, 30, 28, 85, 59, 64, 133, 23, 190, 185, 199, 200, 188, 101, 12, 28, 189, 233, 88, 195, 188, 110, 154, 23, 62, 180, 211, 2, 189, 218, 238, 254, 189, 25, 205, 18, 190, 178, 79, 208, 59, 79, 162, 146, 61, 91, 176, 12, 190, 179, 85, 167, 189, 134, 167, 29, 189, 123, 223, 212, 61, 21, 140, 51, 61, 163, 12, 152, 189, 105, 203, 224, 189, 140, 155, 98, 61, 136, 37, 80, 188, 44, 99, 210, 60, 52, 182, 78, 189, 149, 28, 162, 188, 139, 31, 204, 61, 18, 180, 36, 60, 121, 216, 47, 189, 132, 240, 118, 61, 184, 175, 197, 188, 58, 145, 96, 189, 86, 156, 205, 189, 252, 51, 33, 62, 14, 105, 29, 190, 89, 106, 51, 190, 146, 71, 112, 188, 173, 41, 103, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 140, 29, 190, 28, 203, 27, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 193, 118, 191, 230, 49, 60, 192, 27, 199, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 70, 138, 189, 94, 154, 136, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}