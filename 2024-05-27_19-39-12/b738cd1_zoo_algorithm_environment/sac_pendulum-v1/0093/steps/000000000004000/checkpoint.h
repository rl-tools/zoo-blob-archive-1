// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 78, 220, 61, 99, 228, 117, 191, 111, 204, 177, 190, 134, 214, 255, 189, 50, 65, 122, 190, 41, 253, 236, 62, 8, 255, 229, 62, 191, 77, 29, 191, 84, 26, 20, 63, 32, 255, 63, 190, 231, 243, 89, 191, 93, 37, 236, 62, 13, 254, 0, 63, 41, 197, 90, 191, 142, 246, 132, 190, 156, 242, 155, 190, 143, 131, 128, 190, 159, 245, 158, 190, 4, 111, 162, 189, 88, 76, 228, 62, 240, 2, 210, 190, 111, 33, 24, 63, 41, 49, 221, 62, 84, 243, 160, 62, 28, 151, 156, 189, 23, 22, 1, 190, 50, 64, 46, 63, 190, 232, 50, 190, 96, 86, 139, 191, 172, 179, 48, 61, 212, 202, 172, 190, 154, 110, 72, 63, 59, 228, 156, 62, 217, 163, 235, 62, 116, 248, 207, 190, 92, 68, 218, 190, 209, 192, 22, 191, 121, 89, 233, 190, 46, 245, 59, 63, 186, 201, 11, 63, 89, 170, 59, 63, 141, 102, 48, 62, 50, 240, 15, 190, 222, 29, 36, 62, 199, 38, 104, 61, 169, 115, 113, 190, 42, 202, 88, 61, 179, 229, 1, 63, 56, 242, 1, 62, 230, 113, 89, 191, 247, 96, 232, 62, 195, 125, 22, 63, 88, 157, 101, 191, 207, 65, 214, 190, 43, 114, 36, 63, 215, 40, 231, 62, 114, 154, 130, 62, 176, 219, 164, 62, 173, 240, 150, 62, 74, 1, 115, 190, 128, 218, 213, 62, 122, 119, 23, 62, 3, 109, 140, 62, 73, 226, 208, 189, 11, 240, 98, 191, 137, 155, 136, 190, 31, 14, 247, 61, 112, 202, 110, 63, 235, 172, 28, 62, 213, 7, 156, 190, 102, 5, 26, 62, 38, 82, 117, 189, 96, 95, 222, 190, 120, 220, 51, 191, 143, 150, 16, 191, 160, 109, 54, 63, 12, 252, 86, 63, 238, 181, 117, 62, 63, 143, 247, 62, 175, 84, 229, 189, 196, 111, 221, 190, 146, 96, 53, 63, 78, 159, 80, 63, 47, 150, 20, 190, 250, 2, 176, 189, 191, 149, 194, 62, 59, 122, 12, 191, 206, 255, 58, 63, 201, 255, 16, 191, 235, 15, 132, 190, 32, 74, 236, 62, 146, 224, 130, 190, 37, 240, 13, 63, 95, 197, 10, 63, 109, 176, 19, 191, 160, 36, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 82, 44, 191, 195, 215, 185, 190, 140, 147, 244, 62, 158, 95, 218, 190, 35, 235, 212, 190, 101, 166, 177, 189, 9, 104, 32, 61, 154, 34, 138, 190, 221, 166, 181, 61, 106, 69, 8, 190, 177, 61, 124, 190, 160, 152, 126, 190, 14, 225, 202, 188, 29, 244, 80, 190, 239, 235, 195, 62, 180, 126, 32, 191, 101, 219, 16, 62, 4, 227, 244, 190, 8, 103, 54, 191, 208, 94, 150, 62, 41, 246, 24, 62, 160, 237, 37, 62, 202, 232, 160, 62, 171, 88, 36, 63, 235, 254, 167, 62, 7, 131, 223, 189, 181, 77, 195, 188, 58, 222, 200, 189, 4, 186, 43, 190, 118, 16, 232, 190, 229, 192, 254, 61, 34, 23, 85, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 76, 221, 61, 213, 56, 153, 190, 143, 87, 119, 189, 75, 244, 205, 190, 39, 43, 36, 190, 31, 152, 188, 190, 10, 108, 93, 191, 71, 23, 37, 189, 126, 111, 72, 62, 45, 121, 48, 190, 232, 1, 178, 61, 158, 68, 63, 188, 24, 40, 86, 62, 33, 119, 172, 190, 219, 36, 136, 62, 71, 199, 34, 190, 117, 3, 157, 188, 243, 206, 113, 189, 104, 17, 139, 190, 41, 149, 140, 61, 26, 227, 175, 61, 68, 20, 160, 189, 93, 41, 193, 61, 146, 118, 122, 62, 159, 13, 155, 189, 220, 39, 148, 190, 11, 13, 10, 190, 98, 131, 76, 189, 54, 209, 135, 189, 91, 59, 184, 188, 243, 227, 82, 190, 167, 160, 5, 190, 166, 169, 159, 189, 111, 202, 186, 190, 66, 102, 117, 62, 39, 81, 4, 190, 209, 212, 245, 189, 142, 242, 196, 190, 41, 57, 33, 191, 6, 82, 62, 190, 161, 21, 15, 60, 59, 253, 187, 189, 163, 192, 164, 189, 151, 167, 83, 61, 177, 88, 132, 62, 92, 192, 226, 190, 229, 149, 228, 61, 0, 98, 199, 189, 79, 117, 181, 62, 20, 38, 86, 62, 185, 186, 157, 189, 208, 166, 112, 62, 90, 220, 79, 190, 246, 251, 173, 189, 57, 220, 63, 190, 199, 109, 234, 189, 234, 122, 104, 188, 49, 97, 109, 190, 143, 73, 218, 61, 181, 2, 170, 62, 206, 204, 139, 59, 208, 194, 4, 62, 239, 219, 253, 189, 79, 159, 205, 62, 163, 216, 62, 189, 127, 200, 77, 61, 169, 226, 189, 187, 46, 249, 109, 189, 184, 101, 119, 190, 25, 95, 2, 61, 197, 73, 243, 61, 28, 5, 174, 62, 125, 233, 162, 61, 58, 238, 224, 190, 18, 12, 59, 189, 56, 143, 162, 61, 175, 8, 152, 189, 97, 132, 198, 62, 208, 62, 10, 62, 105, 205, 12, 189, 187, 188, 212, 189, 124, 154, 87, 190, 73, 165, 4, 190, 75, 147, 131, 62, 100, 108, 170, 59, 113, 190, 251, 190, 6, 86, 214, 61, 88, 224, 96, 188, 3, 162, 77, 188, 12, 157, 51, 62, 249, 45, 133, 61, 159, 35, 199, 62, 142, 45, 11, 61, 145, 66, 161, 190, 175, 173, 90, 62, 65, 26, 154, 61, 129, 214, 146, 59, 245, 209, 98, 190, 210, 243, 91, 62, 165, 158, 2, 190, 87, 11, 181, 189, 9, 59, 51, 191, 88, 154, 146, 191, 233, 189, 168, 190, 138, 234, 82, 188, 211, 40, 82, 62, 34, 242, 35, 61, 82, 28, 19, 61, 6, 85, 156, 62, 252, 30, 55, 190, 239, 229, 169, 62, 29, 5, 10, 61, 179, 201, 130, 62, 187, 163, 129, 62, 249, 98, 36, 63, 88, 59, 54, 60, 242, 132, 161, 189, 254, 224, 158, 61, 107, 161, 4, 190, 8, 31, 148, 188, 45, 48, 159, 189, 4, 147, 176, 189, 44, 13, 111, 190, 244, 107, 105, 190, 137, 147, 93, 190, 187, 242, 140, 62, 223, 112, 249, 189, 105, 157, 183, 62, 158, 21, 40, 62, 69, 169, 2, 62, 112, 29, 137, 60, 93, 167, 201, 61, 80, 152, 152, 190, 181, 158, 131, 190, 101, 189, 79, 61, 85, 57, 229, 61, 27, 56, 98, 188, 191, 26, 211, 190, 246, 253, 35, 190, 245, 3, 11, 62, 41, 97, 109, 189, 90, 55, 54, 189, 143, 219, 183, 61, 228, 182, 28, 190, 168, 222, 201, 189, 239, 162, 241, 60, 84, 161, 229, 190, 51, 133, 30, 61, 218, 113, 178, 189, 204, 243, 180, 190, 86, 119, 129, 61, 9, 106, 72, 62, 45, 205, 141, 190, 25, 200, 91, 62, 130, 227, 14, 61, 76, 210, 78, 62, 68, 32, 186, 61, 39, 6, 176, 61, 51, 8, 245, 61, 58, 128, 34, 62, 137, 183, 38, 62, 67, 22, 81, 189, 201, 25, 100, 61, 107, 178, 135, 188, 246, 13, 231, 189, 132, 118, 108, 62, 7, 52, 150, 189, 89, 185, 215, 60, 34, 190, 18, 62, 169, 194, 152, 61, 231, 239, 143, 189, 243, 137, 158, 189, 166, 175, 20, 189, 140, 192, 246, 61, 213, 39, 11, 62, 52, 65, 64, 190, 78, 96, 200, 61, 235, 193, 165, 189, 123, 54, 13, 191, 57, 95, 141, 59, 59, 29, 67, 62, 65, 237, 66, 189, 49, 253, 9, 189, 63, 61, 187, 60, 61, 8, 254, 61, 36, 108, 252, 61, 20, 92, 147, 61, 14, 136, 45, 189, 98, 63, 16, 190, 78, 243, 163, 189, 235, 83, 16, 61, 81, 95, 181, 61, 177, 214, 220, 189, 216, 93, 243, 61, 251, 62, 224, 188, 121, 82, 75, 189, 255, 175, 35, 190, 80, 165, 150, 61, 228, 129, 6, 62, 238, 96, 138, 62, 208, 11, 14, 189, 113, 29, 221, 190, 239, 55, 93, 189, 152, 117, 137, 61, 232, 219, 7, 62, 200, 155, 85, 61, 251, 137, 68, 61, 22, 10, 37, 189, 149, 206, 31, 190, 196, 107, 153, 189, 79, 233, 159, 190, 26, 19, 53, 60, 68, 251, 198, 60, 23, 249, 187, 190, 122, 185, 162, 60, 113, 144, 116, 61, 39, 172, 119, 190, 190, 44, 110, 62, 228, 126, 26, 62, 178, 151, 143, 62, 191, 97, 254, 188, 98, 187, 233, 188, 46, 34, 177, 188, 240, 40, 229, 61, 33, 90, 34, 62, 28, 56, 15, 189, 123, 52, 183, 61, 207, 224, 199, 188, 191, 71, 108, 189, 11, 249, 160, 189, 233, 178, 30, 190, 48, 206, 225, 189, 70, 154, 233, 189, 128, 242, 126, 189, 171, 7, 190, 189, 55, 168, 246, 61, 28, 136, 199, 61, 96, 141, 25, 190, 64, 193, 16, 190, 8, 102, 159, 188, 172, 73, 182, 59, 160, 21, 37, 190, 76, 69, 179, 61, 252, 201, 104, 61, 106, 9, 219, 189, 135, 111, 34, 189, 220, 231, 167, 189, 142, 205, 255, 61, 16, 27, 20, 190, 101, 1, 17, 189, 186, 132, 9, 61, 0, 49, 141, 59, 218, 188, 118, 189, 110, 140, 20, 62, 6, 107, 246, 60, 31, 177, 225, 189, 106, 25, 49, 189, 138, 228, 19, 62, 201, 88, 180, 61, 45, 219, 199, 189, 170, 192, 108, 190, 215, 129, 160, 189, 109, 134, 236, 189, 137, 144, 207, 189, 168, 117, 23, 62, 92, 8, 120, 61, 120, 33, 176, 61, 198, 250, 214, 59, 217, 202, 77, 188, 187, 16, 175, 61, 172, 18, 71, 62, 250, 208, 46, 60, 84, 64, 36, 190, 100, 124, 65, 61, 76, 2, 155, 190, 242, 89, 80, 62, 125, 208, 57, 62, 43, 133, 140, 187, 31, 32, 152, 189, 62, 204, 185, 61, 55, 178, 124, 190, 40, 196, 10, 190, 48, 202, 251, 61, 2, 252, 6, 62, 108, 177, 187, 61, 129, 35, 20, 62, 101, 33, 248, 61, 244, 27, 136, 62, 212, 8, 68, 61, 105, 228, 76, 189, 231, 56, 122, 189, 233, 77, 230, 189, 7, 96, 135, 190, 27, 16, 99, 190, 107, 146, 236, 188, 204, 150, 15, 62, 232, 116, 17, 62, 147, 222, 191, 190, 167, 129, 207, 61, 90, 154, 246, 61, 141, 31, 36, 59, 93, 251, 211, 188, 1, 201, 167, 189, 85, 205, 124, 61, 131, 119, 242, 58, 251, 75, 195, 189, 41, 49, 43, 191, 94, 125, 92, 62, 104, 107, 167, 61, 200, 192, 211, 189, 126, 134, 23, 189, 90, 137, 254, 61, 87, 84, 112, 190, 55, 62, 186, 62, 163, 146, 111, 62, 111, 128, 125, 62, 170, 150, 164, 186, 174, 138, 57, 62, 40, 191, 124, 60, 242, 154, 90, 62, 37, 12, 161, 61, 104, 105, 177, 189, 2, 92, 209, 189, 93, 116, 131, 61, 23, 9, 54, 190, 112, 143, 232, 187, 132, 207, 234, 186, 254, 209, 154, 62, 228, 132, 52, 190, 51, 5, 92, 62, 59, 199, 50, 190, 179, 18, 8, 189, 62, 102, 238, 189, 135, 10, 141, 62, 238, 160, 16, 61, 78, 159, 31, 190, 87, 106, 11, 190, 105, 254, 119, 189, 142, 155, 120, 60, 158, 238, 78, 190, 247, 111, 91, 62, 118, 89, 206, 61, 203, 169, 59, 189, 44, 131, 10, 62, 67, 222, 49, 61, 116, 127, 85, 62, 41, 35, 41, 190, 126, 34, 92, 62, 28, 143, 109, 190, 145, 62, 136, 189, 55, 193, 162, 61, 1, 148, 99, 62, 234, 53, 95, 190, 156, 98, 27, 190, 165, 234, 27, 191, 39, 90, 70, 189, 223, 208, 5, 190, 43, 204, 39, 62, 136, 4, 134, 62, 94, 26, 65, 60, 247, 112, 76, 190, 195, 35, 7, 62, 98, 86, 142, 190, 155, 55, 148, 61, 129, 193, 29, 190, 114, 76, 231, 61, 59, 13, 136, 62, 154, 214, 71, 190, 29, 223, 232, 190, 86, 76, 125, 190, 225, 44, 0, 190, 100, 237, 157, 190, 1, 247, 129, 60, 61, 226, 142, 187, 57, 221, 235, 61, 1, 7, 25, 62, 101, 187, 24, 62, 64, 252, 47, 62, 247, 27, 252, 188, 103, 232, 112, 190, 202, 189, 20, 190, 130, 209, 252, 189, 179, 92, 184, 188, 134, 189, 13, 191, 33, 194, 146, 61, 67, 33, 242, 188, 46, 218, 101, 62, 178, 254, 125, 189, 8, 54, 28, 62, 34, 102, 124, 190, 179, 69, 20, 191, 86, 79, 249, 190, 61, 115, 54, 189, 153, 210, 211, 61, 202, 207, 234, 61, 9, 170, 235, 61, 42, 23, 48, 62, 220, 242, 166, 190, 137, 98, 185, 189, 255, 197, 144, 189, 123, 230, 171, 62, 11, 73, 95, 189, 35, 104, 187, 190, 105, 127, 118, 62, 178, 214, 248, 60, 135, 217, 74, 190, 94, 84, 12, 190, 43, 194, 76, 62, 183, 116, 36, 190, 223, 120, 226, 189, 238, 45, 6, 62, 17, 71, 247, 61, 22, 181, 30, 62, 116, 63, 105, 62, 16, 26, 141, 190, 162, 125, 77, 62, 57, 237, 159, 60, 9, 206, 228, 60, 8, 203, 213, 60, 65, 153, 206, 60, 126, 100, 52, 190, 138, 246, 58, 190, 47, 120, 35, 62, 135, 191, 49, 61, 94, 246, 243, 189, 176, 202, 52, 190, 195, 212, 176, 61, 121, 103, 90, 190, 125, 157, 51, 61, 71, 234, 122, 62, 170, 33, 65, 61, 76, 52, 42, 62, 110, 197, 78, 190, 67, 133, 110, 190, 241, 94, 48, 190, 120, 45, 205, 186, 204, 159, 92, 189, 107, 45, 17, 190, 93, 84, 76, 190, 223, 113, 110, 189, 149, 191, 152, 61, 218, 57, 255, 61, 64, 207, 124, 189, 108, 244, 32, 61, 239, 141, 2, 190, 239, 186, 176, 61, 196, 231, 8, 190, 96, 18, 171, 62, 237, 24, 32, 61, 56, 101, 3, 190, 43, 246, 113, 62, 225, 129, 207, 189, 44, 117, 125, 189, 43, 180, 185, 188, 167, 198, 227, 61, 236, 60, 55, 190, 20, 248, 41, 188, 216, 233, 0, 190, 85, 125, 253, 61, 112, 87, 223, 60, 207, 127, 152, 189, 216, 143, 126, 189, 111, 231, 47, 62, 39, 245, 247, 189, 131, 158, 101, 62, 80, 215, 167, 189, 233, 224, 153, 190, 100, 125, 89, 62, 16, 77, 42, 187, 198, 197, 241, 60, 217, 174, 12, 61, 81, 35, 151, 62, 177, 245, 162, 61, 11, 140, 181, 61, 88, 224, 85, 62, 235, 35, 90, 62, 245, 146, 222, 189, 49, 30, 247, 61, 133, 105, 137, 61, 90, 47, 126, 62, 213, 21, 199, 189, 169, 65, 131, 61, 193, 197, 34, 62, 69, 117, 197, 189, 51, 69, 162, 60, 238, 254, 144, 61, 205, 150, 171, 189, 233, 103, 30, 190, 0, 211, 32, 188, 32, 155, 242, 61, 43, 21, 126, 61, 221, 220, 77, 62, 5, 56, 73, 62, 224, 98, 27, 190, 66, 155, 49, 189, 241, 199, 151, 61, 0, 221, 139, 62, 199, 188, 79, 189, 41, 218, 215, 62, 188, 136, 36, 62, 236, 6, 191, 61, 99, 240, 12, 61, 101, 187, 2, 62, 158, 126, 17, 62, 191, 25, 41, 62, 7, 204, 177, 60, 102, 21, 113, 189, 158, 53, 137, 61, 35, 194, 96, 62, 6, 57, 30, 61, 43, 193, 6, 190, 141, 56, 157, 189, 32, 57, 206, 190, 14, 131, 15, 62, 20, 240, 125, 188, 35, 88, 211, 61, 104, 233, 8, 191, 153, 154, 206, 61, 225, 73, 245, 62, 47, 27, 58, 62, 107, 215, 143, 190, 66, 146, 205, 190, 13, 196, 162, 189, 212, 92, 96, 190, 117, 61, 133, 190, 96, 123, 141, 62, 206, 249, 35, 62, 202, 45, 209, 61, 199, 191, 201, 190, 40, 204, 105, 190, 56, 223, 102, 190, 44, 73, 20, 62, 38, 173, 145, 62, 145, 90, 32, 190, 133, 23, 247, 59, 173, 167, 223, 61, 41, 39, 135, 62, 106, 141, 78, 62, 236, 137, 165, 60, 228, 28, 192, 60, 36, 246, 178, 190, 56, 236, 104, 190, 90, 97, 72, 62, 134, 148, 237, 189, 143, 3, 88, 188, 151, 37, 220, 188, 113, 225, 164, 61, 139, 56, 144, 62, 20, 121, 131, 190, 109, 173, 196, 61, 154, 236, 129, 62, 179, 94, 74, 62, 86, 23, 202, 189, 157, 7, 159, 188, 10, 243, 213, 187, 138, 4, 251, 61, 117, 28, 236, 61, 155, 213, 104, 62, 227, 195, 11, 188, 236, 100, 111, 61, 220, 136, 25, 190, 2, 112, 98, 190, 241, 244, 101, 190, 29, 238, 46, 62, 159, 4, 25, 62, 71, 235, 157, 190, 72, 84, 143, 189, 84, 69, 235, 188, 129, 80, 145, 190, 210, 236, 153, 189, 235, 204, 26, 62, 126, 12, 149, 62, 248, 176, 131, 189, 36, 36, 121, 190, 147, 41, 51, 62, 34, 85, 215, 189, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 132, 31, 48, 61, 82, 235, 17, 190, 203, 166, 206, 189, 122, 164, 171, 190, 186, 116, 46, 190, 18, 118, 181, 190, 108, 8, 130, 191, 255, 249, 132, 190, 85, 123, 128, 61, 231, 232, 160, 189, 167, 20, 103, 62, 231, 132, 205, 189, 118, 191, 120, 62, 204, 70, 248, 190, 53, 160, 9, 61, 228, 75, 171, 61, 54, 212, 212, 61, 151, 118, 37, 190, 83, 38, 158, 190, 133, 84, 180, 61, 83, 202, 241, 189, 132, 222, 47, 190, 167, 246, 15, 62, 123, 201, 89, 62, 143, 181, 54, 190, 183, 137, 167, 190, 108, 138, 246, 188, 84, 67, 113, 190, 145, 15, 61, 190, 108, 171, 199, 61, 121, 189, 142, 190, 15, 203, 63, 188, 16, 4, 30, 190, 72, 17, 136, 62, 188, 225, 246, 61, 230, 117, 66, 62, 126, 46, 219, 189, 16, 83, 188, 60, 174, 251, 63, 189, 207, 14, 118, 61, 23, 226, 189, 189, 185, 158, 146, 62, 22, 46, 54, 62, 94, 120, 2, 190, 39, 37, 72, 189, 33, 208, 138, 62, 23, 204, 116, 189, 105, 50, 28, 62, 159, 37, 113, 189, 15, 33, 141, 189, 141, 230, 163, 190, 72, 94, 91, 190, 238, 199, 109, 189, 85, 208, 164, 61, 30, 49, 49, 189, 220, 108, 213, 59, 177, 54, 9, 62, 202, 143, 212, 61, 7, 113, 12, 189, 161, 157, 68, 61, 0, 122, 95, 190, 204, 72, 236, 60, 239, 167, 96, 62, 224, 254, 184, 60, 32, 3, 121, 189, 216, 191, 134, 190, 168, 199, 105, 61, 225, 21, 171, 190, 192, 96, 176, 189, 66, 44, 11, 191, 45, 112, 50, 191, 39, 17, 170, 190, 134, 157, 139, 61, 217, 214, 226, 188, 21, 187, 129, 189, 177, 147, 239, 61, 92, 31, 134, 62, 42, 213, 201, 190, 197, 49, 4, 62, 160, 135, 67, 190, 48, 206, 1, 63, 221, 47, 88, 62, 69, 53, 158, 190, 101, 174, 61, 62, 46, 246, 196, 189, 204, 41, 30, 58, 20, 18, 49, 189, 180, 188, 157, 188, 6, 96, 223, 189, 31, 227, 46, 190, 216, 144, 9, 189, 197, 201, 160, 61, 51, 235, 164, 61, 165, 106, 36, 61, 214, 189, 58, 189, 97, 28, 198, 62, 187, 108, 12, 62, 71, 106, 6, 62, 66, 163, 181, 189, 46, 155, 61, 189, 182, 2, 29, 62, 215, 226, 148, 61, 75, 185, 179, 189, 205, 239, 208, 189, 176, 162, 169, 61, 58, 63, 140, 189, 7, 154, 145, 60, 237, 86, 147, 189, 49, 186, 75, 189, 24, 20, 10, 189, 205, 44, 222, 59, 195, 52, 94, 189, 12, 22, 212, 188, 100, 229, 24, 190, 31, 107, 136, 188, 125, 137, 25, 61, 61, 199, 12, 190, 161, 94, 131, 189, 232, 132, 52, 190, 104, 6, 203, 188, 82, 50, 88, 58, 249, 165, 35, 62, 35, 240, 166, 189, 103, 116, 53, 190, 155, 33, 239, 61, 9, 78, 20, 62, 240, 244, 195, 60, 119, 220, 25, 189, 80, 232, 235, 61, 114, 255, 158, 190, 92, 8, 33, 62, 156, 254, 129, 190, 176, 160, 97, 62, 133, 228, 185, 190, 211, 226, 28, 191, 255, 182, 53, 190, 153, 180, 218, 61, 112, 183, 230, 189, 154, 230, 112, 189, 39, 223, 77, 62, 165, 148, 110, 62, 77, 176, 225, 190, 114, 85, 181, 189, 9, 143, 94, 189, 96, 159, 131, 62, 57, 207, 96, 62, 12, 190, 166, 190, 217, 38, 94, 62, 187, 251, 145, 189, 8, 51, 176, 188, 85, 176, 174, 189, 165, 195, 222, 188, 41, 39, 66, 61, 12, 20, 85, 190, 226, 117, 88, 61, 89, 91, 96, 62, 254, 205, 126, 61, 109, 142, 149, 61, 190, 115, 2, 189, 61, 114, 98, 62, 229, 4, 157, 190, 34, 191, 46, 190, 78, 68, 14, 191, 35, 255, 88, 190, 162, 217, 134, 190, 155, 246, 76, 62, 73, 217, 245, 62, 106, 22, 87, 61, 119, 77, 49, 191, 142, 246, 170, 190, 153, 108, 0, 191, 77, 15, 69, 190, 245, 35, 33, 190, 79, 109, 146, 190, 184, 83, 45, 62, 231, 191, 241, 189, 228, 72, 86, 191, 227, 70, 63, 190, 158, 3, 239, 61, 225, 174, 6, 191, 101, 79, 35, 190, 2, 146, 3, 61, 211, 189, 122, 188, 95, 69, 178, 62, 73, 178, 119, 62, 125, 16, 177, 190, 15, 155, 34, 61, 183, 154, 56, 190, 178, 24, 172, 190, 174, 217, 134, 190, 189, 254, 18, 190, 10, 157, 21, 191, 123, 71, 92, 190, 89, 201, 43, 190, 210, 221, 108, 62, 253, 39, 227, 190, 36, 122, 94, 189, 86, 27, 148, 190, 28, 38, 202, 190, 194, 164, 171, 59, 108, 252, 185, 60, 134, 103, 154, 189, 79, 20, 39, 190, 122, 60, 103, 62, 47, 54, 149, 61, 16, 89, 224, 189, 151, 158, 50, 61, 80, 16, 158, 190, 16, 99, 211, 62, 109, 183, 132, 189, 164, 112, 131, 189, 67, 175, 91, 62, 177, 80, 134, 189, 206, 47, 45, 60, 176, 166, 23, 190, 150, 135, 21, 190, 89, 33, 175, 187, 117, 205, 199, 189, 208, 132, 73, 62, 32, 238, 121, 61, 17, 182, 23, 188, 179, 131, 191, 60, 60, 246, 174, 189, 154, 125, 113, 62, 109, 250, 50, 190, 179, 88, 42, 190, 6, 103, 187, 189, 34, 120, 178, 190, 167, 201, 135, 188, 225, 177, 184, 190, 8, 175, 214, 190, 211, 40, 182, 190, 118, 187, 54, 61, 2, 211, 213, 61, 92, 82, 54, 61, 27, 32, 85, 188, 99, 3, 187, 62, 200, 40, 154, 190, 92, 177, 58, 189, 97, 191, 196, 61, 161, 158, 237, 61, 233, 160, 154, 188, 250, 185, 223, 190, 229, 188, 90, 188, 221, 250, 49, 189, 224, 90, 82, 187, 97, 22, 160, 60, 228, 13, 61, 62, 100, 124, 70, 190, 120, 150, 94, 189, 55, 254, 49, 62, 201, 195, 64, 62, 45, 100, 100, 62, 91, 27, 65, 190, 46, 172, 236, 189, 37, 63, 4, 191, 231, 17, 108, 62, 48, 200, 189, 189, 19, 79, 35, 190, 231, 142, 20, 61, 104, 191, 56, 62, 21, 139, 205, 189, 197, 225, 203, 188, 48, 21, 57, 62, 20, 214, 63, 62, 103, 158, 120, 188, 127, 49, 186, 60, 34, 149, 221, 60, 24, 29, 151, 61, 75, 175, 209, 61, 105, 169, 69, 189, 214, 84, 30, 62, 104, 186, 51, 190, 62, 85, 41, 62, 31, 113, 107, 62, 124, 65, 91, 60, 158, 35, 207, 189, 44, 117, 231, 61, 11, 224, 14, 62, 201, 189, 35, 190, 118, 73, 199, 189, 46, 148, 193, 61, 140, 0, 47, 190, 233, 218, 67, 62, 196, 208, 120, 61, 254, 82, 15, 62, 25, 242, 58, 62, 204, 48, 235, 189, 173, 79, 79, 189, 4, 57, 131, 189, 123, 238, 230, 61, 51, 252, 123, 189, 138, 209, 10, 190, 132, 157, 76, 189, 110, 215, 55, 61, 90, 185, 83, 188, 26, 254, 218, 189, 59, 166, 6, 189, 77, 65, 253, 189, 193, 25, 212, 61, 211, 251, 126, 61, 29, 255, 26, 190, 156, 88, 136, 189, 179, 33, 159, 61, 1, 155, 149, 62, 162, 55, 11, 190, 150, 113, 162, 190, 22, 23, 96, 62, 169, 101, 217, 189, 39, 24, 25, 62, 253, 171, 243, 60, 70, 235, 11, 62, 242, 72, 68, 62, 114, 194, 245, 61, 104, 100, 37, 62, 143, 116, 181, 189, 62, 153, 27, 62, 181, 64, 161, 60, 56, 84, 192, 61, 246, 191, 181, 61, 188, 253, 135, 189, 95, 253, 115, 188, 99, 141, 16, 188, 18, 34, 177, 61, 232, 197, 10, 190, 218, 223, 3, 62, 182, 19, 66, 190, 198, 4, 51, 190, 54, 166, 71, 190, 165, 85, 60, 190, 74, 23, 58, 190, 25, 66, 28, 190, 72, 188, 134, 190, 81, 136, 148, 60, 17, 85, 254, 189, 225, 241, 0, 190, 95, 153, 16, 62, 13, 161, 143, 189, 164, 177, 139, 189, 200, 222, 102, 62, 12, 69, 65, 61, 146, 3, 189, 61, 19, 153, 149, 189, 185, 185, 65, 61, 183, 227, 194, 188, 195, 88, 22, 61, 94, 120, 51, 62, 8, 38, 229, 61, 167, 184, 109, 190, 170, 33, 72, 60, 0, 156, 45, 187, 73, 49, 31, 62, 72, 22, 162, 190, 40, 216, 224, 188, 98, 100, 168, 189, 110, 27, 183, 189, 141, 27, 0, 191, 183, 254, 225, 61, 33, 158, 198, 62, 91, 93, 143, 62, 209, 171, 92, 190, 134, 124, 150, 189, 37, 148, 151, 61, 129, 108, 110, 190, 183, 115, 43, 190, 252, 31, 38, 62, 48, 101, 105, 188, 209, 52, 176, 61, 3, 55, 132, 190, 144, 199, 53, 190, 188, 35, 39, 190, 242, 29, 144, 189, 146, 95, 80, 62, 82, 124, 47, 190, 12, 142, 63, 59, 119, 157, 104, 59, 191, 167, 58, 62, 151, 206, 210, 61, 210, 99, 20, 190, 218, 248, 2, 62, 218, 7, 144, 187, 158, 255, 69, 189, 64, 118, 119, 62, 170, 68, 173, 61, 167, 198, 60, 190, 98, 68, 4, 190, 213, 66, 42, 190, 242, 49, 255, 187, 80, 86, 20, 191, 44, 63, 104, 61, 184, 104, 189, 62, 89, 248, 133, 62, 74, 185, 165, 60, 50, 181, 131, 190, 63, 209, 23, 190, 121, 43, 74, 61, 133, 47, 247, 189, 54, 104, 163, 62, 45, 76, 221, 189, 186, 62, 172, 61, 39, 74, 69, 190, 39, 246, 119, 190, 36, 110, 99, 190, 67, 255, 71, 62, 80, 21, 75, 62, 40, 178, 61, 62, 71, 41, 170, 61, 85, 199, 29, 62, 175, 18, 19, 61, 93, 207, 57, 62, 19, 72, 24, 190, 176, 231, 95, 62, 161, 136, 133, 190, 38, 223, 119, 190, 59, 35, 152, 61, 232, 168, 177, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 212, 185, 189, 86, 112, 52, 62, 29, 18, 83, 190, 25, 140, 48, 61, 53, 234, 215, 61, 188, 230, 234, 60, 81, 207, 184, 189, 90, 153, 6, 190, 171, 9, 249, 189, 226, 246, 131, 189, 199, 87, 15, 62, 184, 223, 253, 59, 164, 42, 245, 61, 233, 161, 173, 61, 71, 212, 178, 62, 106, 201, 151, 189, 211, 10, 129, 62, 5, 4, 6, 62, 24, 57, 229, 189, 123, 81, 0, 62, 157, 140, 191, 61, 177, 11, 31, 62, 41, 243, 34, 190, 184, 170, 11, 62, 179, 255, 81, 62, 42, 79, 65, 62, 73, 81, 13, 189, 162, 59, 24, 61, 233, 28, 76, 62, 200, 3, 7, 62, 36, 40, 74, 62, 209, 26, 79, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 28, 25, 63, 86, 7, 189, 62, 42, 0, 201, 190, 17, 233, 186, 62, 76, 240, 106, 190, 27, 81, 135, 188, 219, 82, 68, 190, 1, 127, 80, 61, 131, 137, 100, 189, 92, 67, 212, 189, 168, 194, 138, 190, 60, 248, 254, 190, 123, 111, 168, 62, 155, 83, 162, 189, 198, 15, 206, 61, 64, 83, 55, 62, 78, 118, 16, 191, 7, 245, 23, 190, 90, 38, 168, 188, 162, 33, 19, 63, 25, 127, 33, 190, 198, 108, 193, 62, 55, 104, 32, 190, 100, 34, 150, 62, 26, 91, 93, 191, 220, 31, 188, 62, 187, 231, 36, 63, 225, 94, 214, 189, 117, 125, 151, 61, 163, 115, 153, 61, 65, 117, 171, 190, 110, 201, 112, 190, 223, 44, 178, 60, 72, 173, 91, 60, 48, 62, 139, 62, 25, 108, 154, 61, 131, 114, 181, 190, 38, 220, 37, 190, 206, 119, 20, 189, 52, 95, 146, 61, 193, 181, 22, 190, 86, 192, 149, 190, 175, 40, 137, 187, 250, 173, 154, 61, 201, 33, 57, 61, 61, 69, 59, 189, 12, 202, 107, 190, 203, 221, 182, 60, 110, 84, 125, 61, 24, 138, 57, 188, 51, 79, 24, 189, 156, 42, 194, 188, 254, 145, 15, 60, 99, 156, 136, 61, 181, 106, 63, 188, 14, 199, 215, 61, 15, 206, 222, 188, 152, 14, 14, 190, 146, 69, 74, 190, 183, 84, 53, 62, 148, 55, 72, 190, 89, 229, 133, 190, 132, 158, 129, 61, 68, 156, 160, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 163, 165, 189, 143, 135, 99, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {55, 72, 66, 191, 38, 143, 238, 62, 132, 86, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 147, 215, 191, 30, 118, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}