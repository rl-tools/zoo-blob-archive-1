// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 84, 88, 59, 121, 47, 185, 191, 131, 66, 2, 191, 56, 81, 217, 190, 146, 109, 177, 59, 32, 224, 194, 62, 207, 74, 187, 62, 246, 58, 17, 191, 146, 1, 157, 62, 122, 69, 252, 190, 217, 65, 28, 191, 141, 233, 214, 62, 44, 106, 15, 63, 43, 125, 156, 191, 227, 129, 138, 190, 13, 113, 24, 190, 59, 70, 174, 191, 9, 45, 153, 190, 184, 101, 33, 191, 95, 127, 24, 63, 70, 179, 147, 190, 200, 39, 24, 63, 63, 183, 93, 63, 45, 131, 112, 62, 216, 55, 89, 61, 183, 110, 135, 63, 170, 2, 34, 63, 22, 115, 111, 61, 181, 208, 154, 191, 67, 87, 7, 61, 3, 175, 194, 59, 180, 60, 218, 63, 134, 7, 147, 62, 254, 159, 130, 62, 29, 49, 71, 191, 222, 201, 227, 190, 53, 19, 21, 191, 66, 128, 28, 190, 81, 204, 55, 63, 158, 191, 35, 63, 76, 84, 26, 63, 23, 138, 61, 62, 132, 137, 58, 191, 48, 134, 132, 190, 222, 113, 236, 187, 158, 165, 141, 190, 16, 31, 61, 63, 25, 172, 226, 62, 252, 160, 0, 62, 11, 102, 83, 191, 181, 87, 208, 62, 59, 210, 19, 63, 35, 48, 175, 191, 22, 155, 188, 190, 179, 223, 108, 63, 129, 96, 93, 62, 24, 213, 172, 62, 61, 230, 102, 61, 77, 103, 25, 63, 79, 176, 131, 190, 174, 222, 169, 62, 152, 250, 182, 62, 178, 185, 133, 62, 186, 190, 108, 190, 243, 227, 223, 191, 104, 135, 230, 190, 214, 177, 228, 61, 9, 173, 187, 63, 133, 46, 147, 62, 153, 168, 4, 191, 128, 101, 1, 190, 93, 186, 133, 187, 213, 22, 228, 190, 4, 117, 225, 191, 101, 103, 253, 190, 38, 215, 48, 63, 156, 8, 141, 63, 152, 28, 111, 62, 86, 137, 165, 62, 242, 163, 33, 190, 107, 88, 215, 190, 171, 96, 52, 63, 212, 131, 118, 63, 96, 219, 240, 190, 200, 156, 8, 62, 204, 70, 180, 62, 56, 177, 5, 191, 49, 20, 84, 63, 174, 122, 92, 191, 243, 161, 80, 189, 184, 35, 179, 62, 114, 74, 55, 190, 164, 159, 249, 62, 147, 146, 7, 63, 215, 175, 84, 191, 113, 51, 133, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 245, 232, 189, 199, 105, 252, 190, 20, 194, 168, 62, 170, 218, 1, 191, 221, 233, 168, 190, 180, 169, 234, 189, 217, 253, 20, 62, 59, 63, 167, 190, 2, 184, 217, 188, 186, 71, 152, 187, 34, 12, 188, 190, 253, 46, 96, 190, 175, 224, 91, 61, 255, 122, 192, 190, 43, 104, 190, 62, 1, 140, 48, 191, 81, 7, 91, 188, 7, 122, 226, 190, 11, 96, 143, 191, 124, 223, 74, 62, 209, 104, 23, 62, 33, 127, 9, 189, 235, 82, 48, 62, 36, 172, 16, 63, 203, 19, 32, 62, 130, 102, 94, 190, 211, 150, 51, 190, 43, 219, 130, 190, 30, 203, 180, 190, 126, 160, 227, 190, 141, 74, 37, 62, 180, 88, 240, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 6, 57, 191, 14, 185, 168, 190, 61, 164, 160, 61, 211, 126, 157, 188, 25, 170, 144, 190, 90, 30, 168, 191, 8, 11, 20, 191, 192, 190, 133, 190, 40, 22, 143, 188, 109, 230, 168, 190, 223, 207, 89, 62, 51, 115, 2, 191, 197, 158, 149, 62, 173, 50, 248, 190, 194, 112, 1, 63, 113, 109, 239, 190, 167, 119, 150, 62, 59, 117, 171, 190, 16, 176, 202, 189, 65, 180, 187, 62, 30, 226, 193, 190, 12, 186, 95, 191, 238, 133, 102, 62, 66, 80, 237, 62, 91, 116, 195, 190, 18, 231, 197, 190, 21, 114, 61, 189, 106, 91, 132, 62, 180, 186, 110, 62, 163, 244, 50, 190, 159, 63, 147, 190, 200, 27, 80, 191, 242, 248, 62, 190, 50, 75, 205, 190, 150, 235, 70, 62, 185, 127, 76, 189, 29, 203, 6, 190, 155, 194, 134, 191, 87, 79, 63, 191, 226, 138, 198, 190, 175, 99, 155, 188, 137, 175, 8, 189, 167, 243, 64, 190, 232, 74, 175, 189, 116, 209, 130, 62, 180, 251, 42, 191, 31, 30, 29, 62, 247, 139, 115, 190, 186, 219, 162, 62, 111, 125, 246, 61, 66, 86, 196, 191, 144, 37, 83, 62, 81, 201, 90, 190, 100, 105, 202, 190, 84, 71, 14, 191, 130, 208, 130, 61, 116, 7, 45, 190, 152, 135, 217, 190, 34, 234, 164, 60, 133, 240, 188, 62, 175, 147, 229, 189, 98, 37, 59, 62, 192, 38, 242, 189, 52, 44, 224, 62, 109, 205, 134, 190, 92, 70, 169, 60, 82, 50, 75, 61, 160, 68, 84, 189, 24, 208, 220, 190, 44, 190, 143, 61, 89, 75, 192, 61, 193, 98, 1, 62, 33, 155, 55, 61, 44, 85, 229, 190, 247, 170, 153, 190, 17, 151, 207, 188, 180, 86, 54, 189, 193, 147, 92, 62, 255, 45, 255, 62, 154, 48, 204, 189, 232, 247, 1, 189, 204, 53, 187, 190, 197, 167, 91, 62, 162, 252, 137, 62, 106, 252, 76, 189, 105, 159, 21, 191, 208, 225, 239, 61, 234, 210, 68, 62, 201, 62, 115, 190, 214, 254, 206, 60, 150, 186, 234, 188, 47, 163, 191, 62, 93, 188, 129, 188, 16, 89, 224, 190, 248, 167, 45, 62, 57, 118, 254, 61, 255, 93, 233, 62, 224, 81, 35, 190, 74, 63, 143, 61, 200, 245, 133, 189, 78, 48, 122, 62, 77, 142, 73, 191, 150, 40, 144, 191, 194, 91, 198, 190, 179, 100, 176, 60, 165, 1, 28, 61, 23, 36, 211, 62, 63, 76, 176, 61, 204, 21, 158, 62, 79, 4, 115, 190, 153, 9, 172, 62, 239, 86, 240, 61, 94, 122, 51, 62, 161, 143, 0, 63, 192, 21, 0, 63, 177, 206, 67, 190, 137, 50, 19, 190, 183, 186, 110, 62, 174, 244, 193, 190, 89, 213, 171, 189, 194, 8, 225, 61, 11, 227, 42, 190, 226, 244, 192, 190, 237, 99, 248, 190, 248, 66, 49, 190, 127, 29, 159, 62, 250, 50, 40, 190, 200, 31, 19, 62, 62, 74, 27, 191, 42, 77, 253, 60, 30, 229, 120, 61, 193, 185, 84, 190, 55, 187, 16, 191, 205, 232, 166, 190, 10, 213, 130, 61, 239, 128, 106, 61, 50, 116, 90, 189, 137, 65, 47, 191, 101, 11, 159, 190, 223, 57, 65, 62, 157, 119, 37, 61, 184, 12, 165, 188, 250, 78, 11, 63, 10, 74, 164, 190, 228, 69, 6, 190, 81, 179, 155, 190, 113, 141, 188, 190, 187, 11, 236, 60, 73, 111, 182, 189, 136, 242, 207, 191, 224, 10, 162, 61, 140, 144, 96, 62, 238, 10, 133, 191, 192, 176, 94, 62, 29, 241, 4, 62, 213, 240, 167, 62, 14, 146, 26, 62, 17, 79, 204, 61, 121, 246, 160, 61, 203, 247, 92, 62, 86, 169, 147, 62, 180, 141, 32, 190, 0, 10, 127, 60, 74, 4, 75, 190, 151, 125, 67, 190, 31, 213, 210, 62, 167, 76, 238, 189, 100, 232, 118, 62, 26, 78, 62, 62, 119, 218, 130, 62, 68, 225, 43, 189, 91, 94, 17, 190, 17, 204, 225, 189, 151, 158, 171, 62, 246, 170, 14, 62, 55, 191, 140, 190, 221, 42, 67, 60, 18, 192, 17, 190, 228, 249, 36, 191, 227, 138, 158, 190, 150, 178, 164, 62, 6, 197, 142, 189, 156, 81, 175, 188, 26, 84, 48, 61, 211, 238, 43, 62, 62, 76, 146, 62, 90, 46, 181, 189, 92, 73, 22, 191, 215, 44, 22, 190, 132, 192, 166, 190, 143, 234, 173, 61, 105, 7, 42, 61, 121, 219, 48, 191, 194, 236, 174, 61, 205, 16, 172, 61, 168, 230, 168, 189, 255, 33, 189, 190, 4, 155, 150, 190, 237, 135, 12, 62, 62, 94, 13, 62, 144, 105, 67, 189, 88, 23, 175, 190, 18, 45, 192, 190, 228, 64, 183, 61, 131, 158, 52, 62, 136, 211, 41, 189, 99, 228, 176, 62, 253, 28, 214, 189, 221, 39, 92, 189, 88, 238, 156, 190, 141, 145, 173, 189, 130, 210, 128, 61, 153, 184, 205, 60, 9, 32, 155, 191, 161, 155, 75, 59, 127, 52, 5, 62, 13, 200, 90, 191, 50, 254, 15, 62, 162, 27, 95, 62, 107, 136, 203, 62, 235, 247, 0, 60, 165, 171, 147, 189, 40, 25, 183, 188, 21, 0, 77, 62, 71, 218, 26, 62, 124, 104, 64, 189, 222, 182, 178, 61, 216, 204, 3, 189, 179, 117, 202, 188, 227, 13, 164, 189, 233, 178, 30, 190, 97, 202, 22, 190, 219, 185, 3, 190, 65, 70, 171, 189, 124, 35, 249, 189, 123, 121, 2, 62, 32, 118, 193, 61, 234, 67, 70, 190, 202, 61, 58, 190, 172, 145, 17, 189, 52, 141, 233, 56, 179, 16, 5, 190, 51, 249, 243, 60, 130, 189, 148, 61, 22, 74, 255, 189, 216, 50, 102, 189, 56, 72, 243, 189, 179, 211, 178, 61, 219, 38, 41, 190, 165, 113, 149, 189, 161, 117, 67, 61, 178, 132, 176, 59, 218, 188, 118, 189, 247, 221, 53, 62, 145, 250, 219, 60, 31, 234, 151, 189, 60, 198, 179, 191, 75, 120, 177, 61, 40, 99, 6, 62, 227, 222, 83, 190, 108, 224, 7, 191, 116, 23, 5, 191, 94, 89, 133, 190, 175, 236, 239, 189, 105, 55, 246, 61, 240, 91, 224, 61, 229, 119, 163, 189, 107, 251, 60, 190, 146, 10, 245, 186, 80, 165, 201, 61, 54, 8, 179, 62, 246, 119, 116, 189, 250, 249, 36, 190, 50, 196, 155, 190, 30, 162, 99, 190, 131, 114, 35, 188, 34, 156, 70, 62, 215, 97, 216, 191, 29, 71, 20, 190, 243, 176, 26, 62, 107, 235, 178, 191, 79, 64, 38, 190, 145, 13, 47, 61, 192, 116, 154, 188, 251, 171, 140, 190, 163, 147, 61, 62, 75, 242, 247, 61, 186, 115, 145, 62, 250, 189, 80, 191, 196, 130, 134, 190, 245, 207, 14, 190, 113, 107, 161, 190, 12, 79, 236, 190, 126, 142, 146, 190, 244, 71, 108, 190, 239, 39, 201, 61, 212, 224, 152, 190, 111, 0, 31, 191, 176, 150, 254, 190, 43, 204, 87, 62, 232, 186, 139, 190, 183, 206, 246, 188, 12, 178, 17, 191, 203, 244, 84, 190, 123, 173, 144, 190, 115, 220, 191, 190, 54, 50, 101, 191, 122, 109, 81, 62, 142, 28, 76, 188, 69, 30, 180, 191, 40, 6, 54, 190, 186, 237, 53, 190, 71, 30, 135, 191, 160, 123, 179, 62, 219, 74, 183, 62, 63, 24, 146, 62, 24, 118, 185, 189, 123, 196, 146, 62, 124, 108, 56, 190, 64, 12, 180, 62, 40, 253, 52, 62, 72, 167, 99, 61, 138, 25, 128, 61, 233, 44, 61, 62, 212, 50, 37, 62, 58, 214, 50, 62, 233, 84, 107, 190, 1, 48, 116, 62, 4, 238, 44, 190, 210, 237, 16, 63, 26, 80, 36, 191, 173, 52, 7, 62, 126, 24, 225, 61, 205, 232, 125, 61, 148, 215, 255, 187, 91, 82, 60, 187, 121, 61, 19, 62, 135, 244, 125, 62, 58, 53, 196, 62, 48, 70, 184, 190, 70, 56, 38, 62, 208, 229, 181, 62, 49, 31, 158, 190, 85, 113, 192, 61, 138, 103, 80, 62, 16, 11, 65, 60, 184, 239, 8, 190, 184, 2, 59, 189, 193, 123, 3, 191, 234, 35, 162, 62, 1, 24, 45, 62, 73, 153, 231, 62, 60, 208, 160, 190, 124, 122, 22, 190, 62, 115, 16, 191, 112, 247, 148, 62, 35, 54, 12, 190, 80, 67, 142, 62, 237, 205, 144, 62, 219, 81, 6, 62, 226, 205, 91, 191, 166, 197, 52, 189, 106, 13, 121, 191, 249, 243, 61, 62, 175, 167, 30, 190, 235, 98, 13, 62, 49, 221, 145, 62, 55, 106, 248, 190, 119, 211, 175, 190, 230, 169, 247, 189, 220, 108, 0, 190, 10, 251, 122, 190, 68, 132, 196, 61, 205, 27, 218, 61, 18, 45, 174, 190, 37, 64, 22, 62, 101, 155, 127, 62, 191, 86, 18, 62, 127, 172, 127, 60, 102, 159, 205, 190, 197, 19, 176, 189, 197, 94, 235, 190, 81, 122, 4, 190, 194, 143, 140, 191, 247, 101, 242, 61, 142, 157, 125, 189, 185, 66, 96, 62, 28, 210, 166, 188, 211, 129, 157, 62, 248, 23, 208, 191, 34, 94, 10, 191, 83, 188, 43, 191, 175, 149, 164, 189, 246, 127, 117, 61, 78, 170, 121, 61, 51, 136, 115, 61, 122, 98, 0, 62, 4, 84, 7, 191, 199, 243, 119, 190, 178, 92, 112, 190, 233, 26, 180, 62, 23, 2, 108, 61, 81, 59, 237, 191, 47, 251, 78, 62, 6, 251, 80, 61, 193, 29, 29, 191, 110, 246, 250, 190, 112, 63, 101, 62, 155, 87, 201, 190, 121, 160, 146, 190, 13, 51, 137, 61, 7, 62, 3, 62, 131, 103, 68, 62, 147, 143, 172, 62, 220, 139, 103, 190, 131, 15, 153, 62, 30, 216, 212, 61, 2, 55, 69, 59, 153, 145, 192, 189, 99, 112, 109, 61, 179, 183, 147, 190, 176, 67, 163, 61, 150, 198, 129, 62, 84, 134, 124, 188, 192, 44, 209, 190, 178, 214, 160, 61, 174, 36, 132, 61, 91, 112, 107, 190, 83, 105, 62, 62, 208, 211, 35, 62, 234, 4, 154, 62, 12, 33, 15, 62, 89, 241, 146, 190, 118, 147, 175, 190, 119, 26, 228, 190, 24, 122, 35, 61, 57, 65, 89, 190, 138, 247, 127, 187, 164, 55, 121, 190, 147, 78, 48, 62, 229, 65, 117, 62, 152, 6, 16, 61, 157, 230, 160, 189, 203, 55, 25, 61, 103, 178, 106, 189, 147, 66, 139, 189, 233, 210, 150, 190, 247, 87, 173, 62, 42, 1, 8, 62, 117, 79, 99, 190, 190, 231, 15, 62, 153, 179, 99, 190, 109, 157, 101, 190, 87, 107, 92, 188, 234, 152, 126, 62, 198, 112, 138, 60, 176, 129, 14, 61, 112, 123, 202, 189, 121, 161, 218, 61, 4, 180, 203, 60, 99, 238, 32, 190, 92, 222, 12, 62, 112, 39, 1, 62, 8, 189, 45, 190, 169, 247, 133, 61, 176, 249, 111, 190, 161, 106, 175, 190, 240, 103, 55, 62, 194, 163, 157, 61, 87, 77, 58, 189, 75, 66, 170, 189, 194, 27, 158, 62, 93, 184, 15, 62, 181, 146, 104, 62, 104, 70, 99, 62, 43, 240, 90, 62, 116, 99, 168, 61, 216, 247, 42, 190, 84, 174, 150, 61, 53, 228, 50, 62, 163, 151, 128, 61, 149, 194, 209, 60, 174, 127, 120, 189, 81, 76, 23, 190, 191, 227, 9, 61, 136, 143, 36, 62, 230, 236, 51, 62, 52, 142, 125, 62, 64, 235, 30, 61, 99, 202, 125, 189, 175, 102, 189, 62, 181, 157, 136, 62, 224, 221, 188, 61, 78, 176, 47, 62, 122, 115, 224, 189, 205, 220, 34, 62, 41, 26, 115, 61, 170, 233, 3, 189, 66, 194, 60, 62, 115, 206, 152, 62, 251, 58, 29, 62, 143, 66, 228, 61, 181, 10, 135, 62, 66, 10, 15, 62, 159, 234, 160, 62, 100, 166, 169, 62, 66, 241, 82, 61, 95, 214, 73, 62, 48, 197, 244, 62, 241, 115, 28, 190, 172, 78, 73, 190, 102, 230, 162, 190, 124, 203, 34, 191, 255, 4, 62, 62, 120, 88, 243, 61, 183, 149, 123, 62, 84, 99, 64, 191, 114, 64, 92, 62, 254, 255, 22, 63, 248, 88, 91, 62, 146, 255, 181, 190, 119, 51, 121, 189, 23, 3, 83, 191, 174, 113, 88, 190, 117, 153, 80, 190, 88, 128, 131, 62, 182, 66, 254, 61, 108, 24, 81, 188, 194, 172, 80, 189, 61, 171, 216, 190, 148, 110, 118, 62, 164, 82, 129, 62, 225, 65, 165, 62, 98, 103, 34, 190, 59, 77, 152, 60, 26, 29, 16, 61, 249, 88, 96, 62, 94, 255, 111, 62, 210, 60, 76, 61, 144, 79, 243, 61, 156, 244, 146, 190, 88, 145, 190, 190, 195, 155, 131, 62, 239, 4, 190, 189, 255, 57, 39, 190, 24, 195, 157, 189, 82, 74, 25, 62, 125, 154, 135, 62, 2, 71, 251, 190, 184, 180, 75, 62, 144, 161, 116, 62, 60, 232, 236, 60, 107, 225, 80, 190, 20, 221, 124, 61, 187, 174, 153, 190, 110, 4, 168, 61, 159, 96, 249, 61, 184, 78, 235, 61, 6, 107, 30, 62, 107, 5, 78, 189, 111, 140, 134, 189, 168, 32, 224, 190, 1, 170, 182, 188, 248, 245, 50, 62, 60, 38, 201, 61, 89, 36, 5, 191, 153, 153, 185, 189, 171, 215, 71, 60, 31, 13, 7, 191, 186, 31, 58, 190, 15, 48, 244, 61, 171, 12, 149, 62, 65, 82, 80, 189, 55, 72, 176, 190, 131, 123, 17, 62, 142, 92, 120, 188, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 60, 141, 31, 190, 88, 245, 0, 189, 111, 57, 158, 189, 161, 238, 133, 190, 73, 47, 26, 187, 145, 115, 99, 191, 28, 53, 199, 191, 197, 26, 79, 62, 228, 192, 73, 62, 12, 37, 29, 190, 168, 235, 14, 63, 37, 24, 159, 189, 85, 13, 159, 62, 131, 26, 97, 190, 190, 185, 230, 189, 39, 20, 145, 62, 28, 7, 216, 61, 246, 241, 237, 189, 172, 39, 173, 191, 122, 102, 69, 62, 38, 139, 132, 187, 111, 211, 23, 191, 30, 137, 181, 62, 116, 151, 199, 61, 42, 220, 181, 189, 155, 139, 91, 61, 157, 101, 52, 62, 120, 78, 4, 191, 238, 48, 51, 190, 142, 31, 142, 61, 220, 42, 64, 190, 33, 181, 158, 190, 187, 176, 93, 191, 22, 195, 132, 62, 214, 72, 172, 61, 20, 107, 69, 62, 145, 140, 86, 191, 13, 20, 112, 61, 183, 15, 65, 61, 65, 53, 76, 190, 96, 234, 20, 190, 87, 136, 161, 62, 104, 89, 218, 189, 197, 34, 255, 190, 74, 119, 20, 60, 250, 146, 191, 187, 232, 8, 31, 190, 186, 184, 1, 62, 218, 51, 38, 189, 1, 86, 63, 191, 46, 24, 168, 189, 33, 65, 235, 190, 237, 89, 80, 190, 244, 28, 14, 62, 177, 176, 75, 190, 139, 2, 255, 59, 77, 208, 241, 61, 21, 16, 100, 190, 68, 192, 51, 190, 117, 11, 192, 60, 229, 76, 135, 190, 249, 167, 36, 191, 123, 10, 48, 62, 1, 90, 174, 188, 187, 232, 245, 61, 102, 235, 105, 190, 126, 160, 250, 188, 231, 237, 129, 190, 241, 145, 200, 61, 75, 20, 185, 191, 4, 128, 7, 191, 171, 164, 7, 191, 132, 206, 222, 61, 147, 45, 63, 190, 4, 68, 123, 189, 161, 209, 68, 62, 178, 184, 128, 62, 106, 172, 30, 191, 213, 80, 229, 188, 108, 47, 122, 190, 34, 251, 229, 62, 218, 228, 183, 62, 233, 78, 229, 191, 175, 111, 85, 62, 252, 198, 226, 189, 207, 15, 163, 190, 111, 155, 199, 190, 238, 78, 122, 189, 104, 159, 136, 190, 162, 22, 193, 190, 183, 24, 3, 187, 54, 26, 228, 61, 15, 33, 120, 62, 9, 70, 5, 62, 211, 243, 32, 189, 64, 3, 204, 62, 171, 23, 11, 62, 71, 106, 6, 62, 182, 156, 198, 189, 46, 155, 61, 189, 96, 73, 19, 62, 116, 62, 160, 61, 194, 210, 178, 189, 205, 239, 208, 189, 176, 162, 169, 61, 96, 30, 197, 189, 108, 136, 157, 60, 103, 238, 154, 189, 56, 176, 77, 189, 24, 20, 10, 189, 112, 60, 43, 185, 195, 52, 94, 189, 133, 70, 23, 189, 24, 28, 32, 190, 31, 107, 136, 188, 252, 242, 16, 61, 61, 199, 12, 190, 229, 225, 143, 189, 101, 242, 54, 190, 189, 149, 4, 189, 139, 134, 179, 187, 249, 165, 35, 62, 126, 173, 182, 189, 155, 202, 55, 190, 140, 96, 237, 61, 249, 100, 251, 61, 240, 244, 195, 60, 97, 238, 62, 189, 222, 114, 15, 62, 110, 240, 108, 190, 221, 36, 190, 61, 71, 65, 131, 190, 122, 175, 78, 62, 231, 179, 83, 191, 12, 212, 198, 190, 186, 29, 81, 190, 63, 17, 144, 62, 46, 76, 184, 190, 95, 132, 229, 62, 149, 118, 84, 62, 152, 149, 142, 62, 133, 189, 14, 191, 191, 196, 173, 190, 189, 157, 243, 60, 24, 109, 93, 62, 47, 251, 97, 62, 205, 32, 196, 191, 214, 38, 21, 62, 64, 130, 86, 189, 245, 94, 66, 190, 89, 32, 177, 189, 49, 39, 204, 189, 138, 220, 140, 59, 238, 109, 142, 190, 226, 50, 32, 61, 138, 192, 19, 62, 38, 97, 164, 62, 191, 98, 134, 189, 13, 154, 226, 60, 99, 9, 129, 61, 144, 28, 154, 190, 9, 86, 57, 62, 70, 175, 50, 191, 180, 135, 118, 62, 41, 72, 118, 190, 35, 12, 165, 62, 204, 3, 3, 63, 106, 22, 87, 61, 203, 149, 170, 191, 205, 1, 11, 191, 216, 176, 160, 191, 20, 252, 139, 189, 206, 159, 154, 189, 142, 151, 156, 190, 161, 50, 64, 62, 132, 100, 161, 190, 255, 111, 104, 191, 242, 227, 166, 189, 158, 3, 239, 61, 54, 180, 218, 190, 243, 158, 255, 189, 195, 211, 45, 62, 42, 115, 18, 191, 72, 164, 196, 62, 26, 112, 182, 62, 229, 13, 186, 190, 19, 248, 7, 62, 67, 34, 43, 190, 159, 204, 132, 190, 89, 38, 99, 191, 39, 92, 234, 61, 161, 46, 137, 191, 101, 246, 57, 188, 110, 98, 43, 190, 30, 13, 54, 62, 75, 132, 200, 190, 71, 78, 56, 60, 79, 149, 73, 191, 140, 236, 133, 190, 78, 34, 163, 189, 139, 225, 70, 62, 198, 38, 167, 190, 134, 19, 166, 62, 195, 145, 181, 62, 155, 149, 91, 60, 19, 112, 50, 190, 189, 146, 27, 191, 23, 131, 250, 190, 125, 6, 177, 62, 160, 155, 109, 186, 158, 246, 130, 191, 147, 193, 191, 62, 246, 226, 37, 61, 151, 249, 27, 190, 97, 0, 233, 190, 105, 37, 173, 190, 77, 183, 157, 189, 204, 186, 35, 190, 80, 154, 174, 62, 30, 110, 204, 62, 92, 32, 85, 62, 23, 240, 107, 61, 221, 23, 232, 188, 43, 71, 137, 62, 19, 252, 120, 62, 55, 60, 247, 189, 237, 44, 157, 188, 45, 184, 154, 190, 15, 4, 9, 63, 162, 138, 190, 191, 41, 2, 181, 191, 252, 185, 159, 190, 157, 190, 197, 61, 211, 134, 75, 62, 199, 154, 0, 62, 196, 182, 168, 189, 54, 213, 196, 62, 182, 177, 203, 190, 208, 35, 135, 190, 224, 65, 170, 61, 164, 194, 55, 62, 226, 128, 170, 62, 186, 180, 232, 191, 163, 179, 162, 190, 148, 177, 178, 60, 153, 45, 185, 190, 66, 210, 23, 190, 201, 83, 205, 61, 35, 145, 47, 190, 188, 123, 120, 189, 75, 183, 46, 61, 243, 108, 254, 190, 225, 131, 251, 189, 191, 26, 169, 61, 43, 75, 32, 188, 218, 166, 48, 190, 204, 235, 132, 62, 121, 65, 193, 189, 60, 253, 144, 190, 243, 177, 60, 61, 107, 137, 154, 62, 131, 231, 102, 190, 112, 54, 152, 61, 5, 0, 196, 61, 140, 29, 133, 62, 67, 80, 149, 190, 195, 162, 99, 62, 196, 116, 5, 189, 110, 229, 188, 61, 34, 253, 4, 190, 136, 161, 199, 189, 124, 13, 50, 62, 221, 97, 9, 190, 175, 66, 136, 62, 118, 31, 170, 62, 108, 129, 69, 60, 37, 218, 39, 190, 23, 27, 35, 61, 240, 70, 144, 62, 73, 123, 95, 190, 156, 125, 131, 190, 35, 7, 212, 188, 228, 52, 139, 190, 5, 123, 3, 62, 48, 248, 111, 61, 109, 141, 160, 62, 235, 92, 16, 62, 153, 193, 20, 190, 249, 35, 39, 61, 24, 151, 14, 190, 1, 13, 138, 188, 100, 194, 50, 190, 217, 40, 140, 190, 184, 11, 214, 188, 35, 159, 206, 61, 2, 137, 166, 61, 115, 235, 20, 190, 217, 115, 224, 188, 142, 248, 60, 190, 253, 225, 224, 61, 212, 169, 249, 188, 134, 30, 78, 189, 17, 47, 180, 189, 30, 249, 160, 60, 185, 165, 191, 61, 101, 150, 135, 190, 59, 51, 251, 190, 93, 171, 34, 62, 129, 234, 225, 189, 20, 40, 182, 61, 59, 0, 12, 190, 169, 228, 3, 62, 106, 73, 132, 62, 127, 162, 48, 62, 199, 21, 56, 62, 78, 135, 227, 189, 25, 254, 144, 62, 219, 120, 124, 190, 50, 14, 173, 60, 116, 171, 222, 59, 50, 177, 208, 189, 218, 6, 194, 187, 43, 16, 0, 62, 93, 162, 62, 62, 110, 36, 76, 190, 51, 142, 136, 190, 215, 196, 55, 190, 215, 82, 64, 189, 134, 162, 72, 190, 147, 191, 68, 190, 20, 80, 151, 191, 178, 53, 214, 189, 132, 31, 156, 190, 122, 166, 179, 61, 71, 209, 7, 191, 124, 12, 197, 189, 107, 123, 68, 62, 67, 105, 49, 190, 223, 127, 102, 191, 86, 93, 107, 62, 41, 125, 161, 62, 131, 137, 63, 190, 94, 174, 244, 190, 224, 131, 208, 189, 25, 182, 93, 190, 104, 158, 210, 61, 25, 78, 129, 62, 59, 28, 143, 62, 158, 16, 34, 190, 213, 43, 221, 61, 20, 63, 101, 62, 223, 108, 168, 62, 233, 232, 80, 191, 137, 222, 29, 190, 35, 8, 105, 188, 182, 54, 94, 190, 43, 74, 64, 191, 18, 86, 30, 62, 29, 115, 237, 62, 156, 144, 150, 62, 193, 43, 215, 190, 10, 7, 245, 60, 62, 143, 244, 190, 26, 44, 134, 190, 224, 71, 66, 190, 222, 228, 77, 62, 87, 200, 192, 62, 207, 63, 191, 190, 89, 233, 247, 189, 129, 3, 210, 190, 154, 48, 133, 62, 76, 61, 50, 61, 55, 75, 91, 62, 255, 240, 177, 190, 39, 22, 115, 60, 24, 116, 138, 61, 247, 79, 104, 61, 141, 3, 51, 62, 46, 124, 251, 189, 52, 69, 170, 62, 23, 29, 11, 61, 0, 16, 13, 190, 199, 121, 49, 62, 217, 168, 86, 61, 33, 70, 69, 191, 183, 27, 88, 190, 43, 217, 213, 189, 83, 16, 137, 188, 70, 194, 74, 191, 158, 13, 48, 188, 93, 43, 179, 62, 48, 121, 82, 62, 74, 239, 134, 190, 17, 90, 229, 61, 207, 0, 70, 191, 6, 61, 81, 189, 83, 143, 72, 190, 146, 223, 133, 62, 196, 188, 188, 189, 215, 250, 199, 190, 217, 255, 100, 59, 43, 207, 237, 190, 67, 191, 141, 60, 177, 203, 127, 62, 43, 228, 46, 62, 91, 215, 186, 189, 221, 190, 18, 61, 23, 100, 124, 61, 65, 154, 102, 190, 104, 22, 51, 62, 222, 206, 66, 190, 21, 223, 186, 62, 145, 210, 155, 190, 67, 168, 196, 190, 196, 65, 253, 60, 195, 20, 118, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 110, 32, 189, 168, 245, 130, 62, 105, 110, 32, 190, 208, 218, 11, 190, 15, 207, 10, 62, 203, 28, 118, 61, 87, 6, 234, 187, 161, 16, 27, 190, 199, 66, 62, 189, 219, 55, 214, 189, 105, 15, 72, 62, 246, 203, 149, 188, 219, 49, 36, 62, 121, 61, 27, 62, 239, 207, 176, 62, 205, 250, 39, 190, 199, 124, 133, 62, 154, 129, 57, 62, 24, 57, 229, 189, 203, 118, 119, 61, 56, 223, 43, 187, 125, 52, 9, 62, 37, 166, 49, 190, 219, 195, 182, 59, 222, 142, 131, 62, 68, 34, 53, 62, 51, 35, 20, 61, 166, 81, 204, 189, 166, 125, 61, 62, 5, 224, 85, 62, 87, 168, 134, 62, 238, 224, 148, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 144, 195, 63, 103, 245, 38, 63, 238, 183, 126, 190, 215, 208, 18, 62, 19, 32, 234, 190, 10, 91, 184, 61, 106, 19, 135, 190, 110, 225, 108, 61, 71, 167, 212, 189, 233, 73, 220, 190, 65, 131, 213, 190, 80, 207, 95, 191, 135, 101, 70, 63, 229, 175, 10, 62, 191, 176, 155, 61, 8, 112, 102, 62, 48, 148, 38, 191, 78, 37, 175, 189, 90, 38, 168, 188, 68, 6, 116, 63, 111, 243, 51, 190, 160, 161, 59, 63, 11, 107, 232, 189, 121, 208, 140, 62, 151, 64, 147, 191, 194, 51, 0, 63, 224, 224, 147, 63, 232, 220, 42, 62, 203, 134, 51, 61, 139, 246, 21, 62, 6, 97, 3, 191, 210, 105, 190, 190, 73, 99, 53, 63, 177, 0, 238, 61, 191, 216, 36, 62, 14, 210, 159, 61, 37, 118, 229, 190, 35, 200, 244, 190, 64, 200, 42, 190, 132, 185, 210, 60, 57, 54, 204, 190, 73, 160, 71, 191, 244, 69, 60, 190, 193, 19, 14, 63, 251, 23, 84, 61, 177, 31, 156, 61, 204, 202, 136, 190, 102, 94, 214, 188, 129, 22, 167, 61, 81, 135, 69, 190, 51, 79, 24, 189, 139, 125, 55, 62, 245, 124, 73, 189, 246, 134, 112, 62, 158, 34, 173, 60, 131, 34, 216, 62, 221, 89, 143, 62, 63, 207, 87, 190, 201, 104, 61, 61, 130, 62, 251, 60, 61, 190, 28, 190, 85, 95, 16, 191, 30, 128, 33, 188, 32, 63, 86, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 65, 11, 190, 131, 138, 212, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {233, 10, 117, 189, 116, 112, 26, 61, 47, 101, 78, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {56, 48, 201, 191, 240, 153, 212, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}