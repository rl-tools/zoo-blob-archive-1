// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 85, 184, 189, 37, 238, 172, 191, 56, 197, 245, 190, 219, 225, 129, 190, 180, 93, 83, 189, 43, 91, 231, 62, 123, 19, 249, 62, 233, 32, 25, 191, 189, 145, 189, 62, 170, 178, 199, 190, 43, 29, 38, 191, 1, 180, 240, 62, 43, 225, 11, 63, 248, 16, 144, 191, 163, 192, 106, 190, 55, 82, 144, 190, 187, 109, 140, 191, 236, 54, 121, 190, 250, 51, 241, 189, 246, 225, 202, 62, 92, 226, 229, 190, 5, 46, 38, 63, 109, 231, 44, 63, 5, 221, 112, 62, 45, 89, 208, 61, 45, 159, 130, 63, 127, 39, 29, 63, 221, 83, 138, 190, 47, 106, 121, 191, 247, 62, 248, 59, 143, 85, 144, 190, 119, 112, 178, 63, 124, 10, 165, 62, 251, 28, 152, 62, 232, 13, 88, 191, 196, 67, 202, 190, 231, 194, 30, 191, 182, 18, 80, 190, 150, 211, 57, 63, 218, 182, 45, 63, 84, 73, 251, 62, 60, 196, 72, 62, 13, 145, 196, 190, 154, 214, 211, 189, 24, 64, 112, 189, 159, 23, 195, 190, 170, 11, 7, 63, 24, 99, 253, 62, 55, 145, 67, 62, 60, 71, 75, 191, 95, 55, 198, 62, 113, 209, 21, 63, 212, 42, 173, 191, 213, 78, 158, 190, 81, 42, 130, 63, 155, 215, 110, 62, 120, 135, 147, 62, 122, 149, 109, 62, 234, 5, 141, 62, 110, 161, 132, 190, 122, 36, 197, 62, 12, 254, 209, 62, 34, 74, 148, 62, 206, 205, 42, 190, 208, 103, 184, 191, 122, 215, 215, 190, 50, 56, 25, 62, 253, 57, 157, 63, 189, 2, 103, 62, 127, 180, 225, 190, 165, 237, 183, 61, 228, 245, 14, 189, 117, 84, 169, 190, 33, 17, 186, 191, 147, 217, 7, 191, 207, 228, 66, 63, 157, 179, 96, 63, 144, 112, 133, 62, 215, 56, 218, 62, 188, 164, 115, 190, 25, 16, 228, 190, 229, 231, 73, 63, 224, 255, 78, 63, 143, 101, 214, 190, 246, 48, 34, 61, 67, 51, 145, 62, 255, 202, 8, 191, 184, 108, 81, 63, 174, 3, 61, 191, 189, 142, 227, 189, 33, 66, 168, 62, 207, 225, 52, 190, 125, 236, 16, 63, 119, 240, 0, 63, 208, 68, 103, 191, 131, 97, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 230, 207, 189, 31, 163, 175, 190, 246, 87, 243, 62, 225, 75, 227, 190, 180, 227, 174, 190, 67, 160, 49, 190, 44, 1, 13, 188, 16, 141, 137, 190, 101, 218, 165, 61, 155, 165, 72, 190, 242, 217, 171, 190, 176, 205, 229, 189, 235, 24, 12, 62, 144, 138, 159, 190, 213, 121, 128, 62, 255, 27, 186, 190, 36, 213, 134, 61, 250, 2, 209, 190, 54, 73, 134, 191, 127, 42, 158, 62, 172, 22, 72, 62, 78, 15, 55, 61, 13, 69, 82, 62, 214, 160, 36, 63, 163, 34, 111, 62, 194, 71, 38, 190, 211, 111, 8, 189, 226, 117, 54, 190, 8, 81, 141, 190, 201, 140, 236, 190, 13, 232, 62, 62, 123, 186, 87, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 79, 214, 190, 6, 204, 186, 190, 233, 39, 23, 57, 118, 28, 184, 189, 67, 96, 45, 190, 253, 184, 168, 191, 15, 102, 49, 191, 161, 252, 162, 190, 170, 34, 232, 188, 239, 235, 182, 190, 41, 160, 77, 189, 250, 127, 119, 190, 168, 184, 117, 62, 118, 246, 244, 190, 42, 187, 142, 62, 37, 64, 6, 191, 39, 219, 109, 62, 21, 67, 30, 190, 16, 176, 202, 189, 224, 225, 183, 62, 157, 147, 216, 190, 31, 159, 88, 191, 32, 152, 148, 61, 105, 40, 145, 62, 42, 48, 173, 190, 214, 164, 167, 190, 206, 240, 69, 61, 185, 160, 146, 62, 71, 236, 112, 62, 60, 22, 22, 190, 145, 212, 160, 190, 90, 184, 64, 191, 206, 138, 199, 60, 134, 159, 199, 190, 27, 18, 81, 62, 159, 213, 121, 189, 157, 142, 24, 189, 201, 152, 37, 191, 101, 173, 70, 191, 236, 176, 168, 190, 168, 104, 130, 188, 232, 217, 55, 61, 241, 162, 172, 189, 197, 16, 232, 60, 156, 231, 130, 62, 10, 36, 40, 191, 140, 1, 98, 62, 61, 95, 24, 190, 70, 236, 160, 62, 151, 145, 116, 62, 166, 187, 167, 191, 87, 154, 119, 62, 206, 238, 116, 190, 112, 199, 24, 190, 254, 251, 182, 190, 241, 223, 45, 61, 171, 16, 138, 61, 217, 225, 197, 190, 250, 221, 146, 61, 93, 174, 198, 62, 115, 164, 245, 189, 223, 92, 61, 62, 246, 228, 29, 190, 59, 247, 236, 62, 31, 156, 218, 189, 211, 36, 28, 61, 237, 129, 61, 61, 38, 81, 255, 188, 106, 186, 163, 190, 99, 165, 26, 62, 184, 168, 75, 62, 209, 161, 135, 62, 222, 151, 124, 61, 220, 12, 238, 190, 8, 186, 230, 189, 194, 227, 169, 61, 5, 141, 143, 189, 189, 56, 158, 62, 141, 4, 136, 62, 40, 6, 160, 189, 76, 16, 12, 188, 218, 43, 110, 190, 137, 110, 32, 188, 213, 52, 167, 62, 59, 158, 153, 58, 19, 178, 184, 190, 77, 14, 2, 62, 127, 224, 172, 61, 22, 18, 142, 189, 121, 254, 251, 61, 60, 135, 105, 61, 179, 91, 244, 62, 247, 156, 3, 62, 234, 29, 207, 190, 227, 121, 84, 62, 151, 29, 213, 61, 165, 59, 201, 62, 218, 114, 95, 190, 102, 212, 49, 62, 18, 157, 222, 189, 176, 149, 119, 62, 164, 236, 66, 191, 141, 206, 163, 191, 160, 229, 134, 190, 218, 247, 13, 189, 152, 19, 66, 62, 197, 99, 216, 61, 253, 163, 12, 61, 131, 186, 140, 62, 16, 91, 4, 190, 41, 112, 139, 62, 179, 251, 53, 61, 20, 97, 101, 62, 253, 23, 244, 62, 73, 174, 60, 63, 1, 9, 59, 190, 153, 236, 214, 189, 182, 110, 68, 62, 2, 83, 74, 190, 185, 208, 212, 189, 121, 39, 141, 61, 7, 249, 78, 189, 3, 199, 212, 190, 83, 191, 189, 190, 222, 60, 180, 190, 56, 94, 172, 62, 187, 182, 24, 190, 42, 74, 142, 62, 147, 57, 136, 190, 84, 53, 132, 61, 34, 168, 130, 61, 134, 179, 50, 189, 25, 199, 231, 190, 213, 23, 167, 190, 48, 56, 45, 188, 90, 90, 21, 62, 33, 253, 149, 188, 85, 167, 223, 190, 71, 192, 49, 190, 71, 201, 72, 62, 182, 130, 106, 189, 85, 29, 218, 60, 104, 40, 100, 60, 129, 79, 135, 190, 235, 50, 107, 189, 164, 195, 27, 190, 63, 92, 211, 190, 241, 245, 125, 188, 106, 59, 91, 189, 151, 88, 72, 191, 166, 187, 161, 61, 61, 196, 201, 61, 30, 183, 25, 191, 74, 181, 139, 62, 163, 52, 157, 61, 183, 163, 125, 62, 27, 238, 193, 61, 9, 37, 243, 61, 25, 236, 1, 62, 130, 245, 112, 62, 0, 37, 133, 62, 50, 109, 235, 189, 200, 67, 133, 61, 2, 15, 17, 190, 221, 170, 30, 190, 247, 245, 184, 62, 222, 115, 200, 189, 208, 78, 207, 61, 206, 42, 17, 62, 46, 39, 28, 62, 176, 214, 211, 189, 109, 60, 212, 189, 35, 85, 134, 189, 92, 118, 64, 62, 200, 67, 50, 62, 9, 213, 105, 190, 254, 79, 134, 61, 143, 48, 233, 189, 51, 19, 33, 191, 105, 134, 44, 190, 194, 167, 129, 62, 186, 117, 174, 189, 126, 171, 113, 189, 105, 214, 154, 61, 66, 50, 29, 62, 21, 234, 46, 62, 69, 9, 2, 60, 114, 204, 153, 190, 200, 127, 2, 190, 88, 242, 135, 190, 163, 247, 98, 61, 2, 10, 161, 61, 141, 115, 221, 190, 133, 240, 5, 62, 54, 52, 158, 61, 37, 61, 151, 188, 172, 195, 144, 190, 240, 121, 184, 61, 148, 229, 228, 61, 4, 229, 93, 62, 229, 179, 119, 188, 91, 60, 165, 190, 241, 64, 244, 189, 190, 165, 212, 61, 209, 246, 64, 62, 32, 178, 43, 187, 215, 117, 189, 60, 19, 87, 166, 189, 70, 138, 129, 187, 190, 36, 63, 190, 109, 165, 153, 190, 161, 145, 147, 60, 58, 33, 61, 61, 50, 138, 13, 191, 79, 245, 173, 187, 250, 164, 14, 61, 105, 186, 0, 191, 35, 123, 59, 62, 181, 168, 52, 62, 47, 210, 178, 62, 180, 230, 221, 59, 224, 15, 95, 189, 91, 18, 171, 60, 50, 187, 48, 62, 71, 218, 26, 62, 124, 104, 64, 189, 222, 182, 178, 61, 216, 204, 3, 189, 179, 117, 202, 188, 227, 13, 164, 189, 233, 178, 30, 190, 97, 202, 22, 190, 219, 185, 3, 190, 65, 70, 171, 189, 124, 35, 249, 189, 123, 121, 2, 62, 32, 118, 193, 61, 234, 67, 70, 190, 202, 61, 58, 190, 172, 145, 17, 189, 52, 141, 233, 56, 179, 16, 5, 190, 51, 249, 243, 60, 130, 189, 148, 61, 22, 74, 255, 189, 216, 50, 102, 189, 56, 72, 243, 189, 179, 211, 178, 61, 219, 38, 41, 190, 165, 113, 149, 189, 161, 117, 67, 61, 178, 132, 176, 59, 218, 188, 118, 189, 247, 221, 53, 62, 145, 250, 219, 60, 31, 234, 151, 189, 202, 254, 244, 190, 70, 213, 250, 61, 36, 206, 25, 62, 124, 247, 30, 190, 123, 2, 242, 190, 20, 93, 194, 190, 68, 221, 149, 190, 138, 15, 153, 189, 28, 69, 49, 62, 115, 86, 249, 61, 54, 117, 141, 61, 208, 128, 214, 189, 36, 57, 3, 61, 223, 249, 227, 61, 10, 58, 93, 62, 11, 24, 253, 188, 99, 31, 222, 189, 228, 192, 101, 190, 51, 53, 177, 190, 131, 190, 59, 61, 42, 38, 106, 62, 58, 162, 134, 191, 17, 42, 219, 189, 44, 212, 249, 61, 97, 217, 129, 191, 232, 89, 255, 189, 252, 188, 112, 61, 55, 81, 25, 61, 56, 205, 29, 60, 83, 203, 90, 62, 134, 184, 41, 62, 106, 26, 148, 62, 23, 213, 88, 190, 166, 69, 60, 190, 89, 36, 8, 190, 113, 107, 161, 190, 33, 21, 210, 190, 126, 142, 146, 190, 57, 168, 65, 190, 133, 179, 209, 61, 61, 201, 111, 61, 66, 229, 13, 191, 116, 150, 145, 61, 240, 156, 27, 62, 237, 124, 159, 189, 7, 252, 21, 189, 55, 183, 143, 190, 76, 71, 99, 189, 11, 157, 201, 189, 10, 190, 151, 190, 173, 100, 74, 191, 93, 142, 198, 61, 16, 0, 169, 60, 64, 31, 7, 191, 232, 217, 253, 189, 114, 188, 251, 188, 142, 175, 255, 190, 165, 142, 175, 62, 30, 126, 113, 62, 225, 16, 31, 62, 184, 105, 203, 189, 205, 234, 139, 62, 26, 168, 215, 189, 74, 94, 174, 62, 113, 128, 223, 61, 98, 176, 216, 61, 77, 110, 19, 188, 155, 38, 101, 62, 137, 64, 220, 60, 105, 234, 59, 61, 99, 57, 69, 190, 153, 96, 159, 62, 176, 123, 164, 189, 253, 204, 214, 62, 108, 206, 168, 190, 228, 180, 134, 61, 90, 150, 15, 62, 210, 238, 12, 62, 154, 24, 126, 61, 90, 133, 129, 61, 150, 164, 198, 61, 221, 88, 0, 62, 111, 63, 50, 62, 46, 212, 158, 190, 38, 161, 100, 62, 43, 70, 131, 62, 189, 233, 110, 190, 174, 192, 31, 62, 73, 222, 247, 61, 180, 191, 192, 61, 91, 13, 32, 190, 46, 84, 138, 188, 151, 199, 226, 190, 23, 99, 92, 62, 124, 166, 69, 62, 42, 107, 169, 62, 140, 56, 190, 190, 98, 136, 136, 189, 207, 186, 19, 191, 114, 180, 187, 62, 178, 127, 86, 190, 38, 35, 94, 62, 47, 7, 149, 62, 219, 81, 6, 62, 84, 166, 93, 191, 206, 62, 25, 62, 58, 82, 126, 191, 120, 209, 3, 62, 44, 195, 156, 189, 235, 98, 13, 62, 191, 35, 162, 62, 54, 116, 217, 190, 88, 0, 177, 190, 148, 142, 75, 190, 220, 108, 0, 190, 38, 237, 123, 190, 47, 129, 125, 61, 49, 217, 99, 61, 15, 49, 0, 190, 129, 56, 85, 62, 29, 171, 92, 62, 191, 86, 18, 62, 237, 124, 131, 188, 200, 86, 190, 190, 179, 200, 228, 189, 133, 18, 235, 189, 226, 37, 61, 189, 58, 203, 96, 191, 83, 111, 49, 62, 182, 108, 211, 188, 112, 252, 84, 62, 182, 219, 32, 188, 241, 142, 141, 62, 212, 43, 135, 191, 161, 48, 251, 190, 168, 242, 28, 191, 192, 9, 78, 189, 63, 153, 180, 61, 142, 176, 222, 61, 130, 66, 212, 61, 54, 47, 18, 62, 105, 111, 5, 191, 31, 64, 205, 189, 131, 183, 230, 189, 6, 187, 164, 62, 57, 18, 6, 61, 220, 214, 201, 191, 110, 35, 142, 62, 201, 122, 134, 60, 180, 202, 6, 191, 254, 174, 123, 190, 225, 168, 112, 62, 252, 48, 138, 190, 85, 53, 121, 190, 32, 103, 240, 61, 197, 65, 59, 62, 0, 108, 110, 62, 88, 128, 142, 62, 56, 113, 139, 190, 79, 237, 140, 62, 73, 22, 163, 60, 94, 206, 179, 60, 78, 176, 93, 187, 115, 142, 214, 188, 111, 113, 166, 190, 112, 211, 20, 189, 110, 6, 64, 62, 6, 19, 77, 60, 63, 240, 134, 190, 161, 78, 87, 189, 243, 245, 195, 186, 118, 211, 135, 190, 233, 67, 252, 61, 146, 56, 72, 62, 115, 143, 31, 62, 235, 8, 60, 62, 147, 8, 86, 190, 145, 216, 202, 190, 92, 165, 225, 190, 188, 245, 135, 187, 155, 58, 234, 189, 129, 213, 247, 189, 227, 159, 140, 190, 92, 38, 90, 61, 247, 117, 3, 62, 154, 56, 131, 61, 215, 61, 169, 189, 101, 41, 94, 60, 215, 142, 188, 189, 218, 10, 153, 60, 199, 141, 25, 190, 215, 129, 180, 62, 229, 24, 5, 62, 137, 107, 62, 190, 27, 27, 98, 62, 123, 19, 81, 190, 131, 201, 246, 189, 103, 230, 114, 61, 204, 95, 42, 62, 3, 107, 135, 189, 26, 174, 86, 58, 147, 30, 228, 189, 2, 34, 9, 62, 94, 184, 3, 61, 27, 138, 2, 190, 85, 83, 80, 61, 87, 133, 22, 62, 88, 19, 13, 190, 101, 205, 19, 62, 126, 224, 15, 190, 245, 101, 181, 190, 134, 68, 7, 62, 223, 170, 107, 61, 171, 70, 213, 187, 153, 200, 31, 188, 144, 141, 156, 62, 141, 221, 28, 62, 238, 188, 47, 62, 62, 1, 76, 62, 205, 144, 247, 61, 31, 65, 31, 189, 245, 159, 138, 189, 235, 51, 161, 61, 27, 119, 113, 62, 131, 247, 236, 57, 16, 121, 102, 60, 63, 85, 224, 61, 3, 27, 29, 190, 165, 81, 60, 61, 24, 152, 9, 62, 142, 149, 126, 60, 69, 179, 203, 189, 59, 245, 86, 188, 16, 252, 133, 60, 97, 48, 0, 62, 167, 68, 88, 62, 166, 117, 230, 61, 205, 220, 193, 189, 21, 61, 4, 190, 177, 69, 157, 61, 199, 144, 29, 62, 64, 52, 249, 188, 56, 56, 172, 62, 133, 152, 33, 62, 255, 252, 214, 61, 68, 2, 93, 61, 13, 0, 250, 61, 191, 236, 228, 61, 113, 200, 121, 62, 168, 16, 153, 61, 247, 61, 46, 189, 104, 157, 90, 60, 251, 177, 153, 62, 110, 30, 93, 189, 213, 78, 27, 190, 246, 69, 240, 189, 45, 157, 9, 191, 76, 209, 14, 62, 75, 231, 176, 61, 163, 97, 66, 62, 22, 144, 39, 191, 72, 116, 80, 62, 230, 97, 8, 63, 169, 119, 130, 62, 236, 8, 179, 190, 34, 45, 8, 190, 137, 204, 251, 190, 12, 162, 55, 190, 93, 154, 120, 190, 73, 81, 149, 62, 130, 19, 140, 61, 157, 232, 230, 188, 229, 170, 201, 189, 28, 105, 160, 190, 100, 129, 225, 189, 143, 254, 75, 62, 45, 49, 177, 62, 124, 47, 48, 187, 112, 160, 21, 186, 62, 237, 90, 61, 171, 185, 160, 62, 122, 40, 137, 62, 72, 249, 63, 61, 102, 14, 193, 61, 225, 237, 146, 190, 30, 187, 159, 190, 59, 23, 130, 62, 204, 122, 214, 189, 126, 104, 152, 187, 204, 227, 79, 189, 39, 218, 5, 62, 183, 2, 149, 62, 114, 184, 189, 190, 227, 110, 117, 62, 3, 39, 183, 62, 50, 171, 218, 61, 117, 29, 12, 190, 45, 238, 147, 59, 192, 236, 173, 189, 145, 244, 73, 62, 151, 249, 1, 62, 227, 18, 34, 62, 243, 152, 94, 61, 158, 33, 95, 188, 235, 5, 64, 189, 31, 242, 142, 190, 139, 31, 55, 190, 217, 100, 117, 62, 79, 222, 7, 62, 11, 153, 159, 190, 214, 110, 155, 189, 91, 12, 142, 59, 24, 122, 191, 190, 157, 217, 13, 190, 95, 238, 77, 62, 192, 216, 198, 62, 184, 111, 167, 61, 31, 214, 155, 190, 192, 248, 48, 62, 201, 227, 148, 189, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 60, 141, 31, 190, 119, 122, 133, 189, 75, 179, 56, 189, 242, 121, 143, 190, 30, 209, 116, 188, 245, 28, 147, 191, 4, 113, 141, 191, 31, 162, 200, 189, 189, 173, 28, 62, 41, 123, 211, 189, 176, 6, 183, 62, 37, 24, 159, 189, 234, 147, 159, 62, 115, 3, 237, 190, 117, 94, 156, 61, 224, 33, 73, 62, 207, 40, 11, 62, 27, 249, 19, 190, 50, 7, 148, 191, 97, 154, 197, 61, 183, 202, 86, 189, 1, 65, 77, 191, 17, 62, 124, 62, 152, 252, 129, 62, 23, 78, 139, 190, 250, 225, 95, 190, 156, 107, 33, 62, 64, 208, 22, 191, 187, 186, 29, 190, 42, 133, 37, 61, 193, 239, 75, 190, 90, 89, 139, 60, 237, 219, 78, 191, 100, 17, 147, 62, 78, 16, 238, 61, 53, 37, 102, 62, 224, 222, 84, 191, 98, 188, 156, 61, 192, 126, 4, 190, 122, 143, 20, 190, 57, 133, 252, 189, 56, 42, 157, 62, 103, 145, 72, 61, 4, 62, 244, 190, 50, 178, 255, 60, 222, 251, 237, 60, 72, 125, 219, 60, 176, 85, 18, 62, 98, 195, 132, 188, 111, 62, 70, 191, 9, 47, 133, 190, 205, 165, 218, 190, 64, 213, 35, 190, 6, 93, 249, 61, 37, 248, 98, 190, 69, 107, 194, 61, 207, 255, 4, 62, 197, 148, 23, 190, 214, 72, 51, 190, 117, 11, 192, 60, 155, 231, 133, 190, 247, 195, 87, 190, 128, 206, 79, 62, 228, 99, 167, 189, 19, 79, 21, 62, 111, 199, 112, 190, 47, 172, 152, 60, 180, 223, 133, 190, 38, 54, 4, 62, 58, 162, 147, 191, 55, 253, 16, 191, 210, 53, 244, 190, 114, 115, 144, 61, 112, 6, 69, 185, 130, 53, 13, 61, 216, 177, 65, 62, 63, 89, 132, 62, 213, 15, 29, 191, 195, 145, 241, 61, 15, 238, 60, 190, 252, 214, 240, 62, 221, 103, 195, 62, 164, 224, 208, 191, 232, 108, 104, 62, 78, 172, 14, 190, 34, 241, 84, 190, 192, 215, 32, 190, 10, 83, 181, 59, 101, 168, 33, 190, 233, 201, 171, 190, 55, 113, 169, 187, 99, 244, 220, 61, 125, 42, 48, 62, 101, 115, 10, 62, 216, 206, 121, 189, 37, 254, 228, 62, 171, 23, 11, 62, 71, 106, 6, 62, 182, 156, 198, 189, 46, 155, 61, 189, 96, 73, 19, 62, 116, 62, 160, 61, 194, 210, 178, 189, 205, 239, 208, 189, 176, 162, 169, 61, 96, 30, 197, 189, 108, 136, 157, 60, 103, 238, 154, 189, 56, 176, 77, 189, 24, 20, 10, 189, 112, 60, 43, 185, 195, 52, 94, 189, 133, 70, 23, 189, 24, 28, 32, 190, 31, 107, 136, 188, 252, 242, 16, 61, 61, 199, 12, 190, 229, 225, 143, 189, 101, 242, 54, 190, 189, 149, 4, 189, 139, 134, 179, 187, 249, 165, 35, 62, 126, 173, 182, 189, 155, 202, 55, 190, 140, 96, 237, 61, 249, 100, 251, 61, 240, 244, 195, 60, 97, 238, 62, 189, 249, 241, 175, 61, 81, 69, 151, 190, 249, 71, 252, 61, 127, 215, 166, 190, 176, 172, 116, 62, 36, 248, 34, 191, 18, 255, 7, 191, 13, 164, 80, 190, 239, 148, 92, 62, 14, 68, 106, 190, 121, 14, 134, 62, 33, 210, 42, 62, 130, 251, 110, 62, 171, 62, 15, 191, 139, 54, 233, 189, 42, 4, 137, 188, 165, 75, 44, 62, 116, 212, 115, 62, 39, 145, 167, 191, 168, 79, 1, 62, 89, 34, 137, 189, 104, 28, 82, 190, 252, 95, 136, 61, 225, 164, 88, 59, 255, 71, 166, 188, 190, 8, 125, 190, 225, 84, 186, 186, 240, 56, 183, 61, 168, 12, 250, 61, 135, 47, 234, 188, 169, 196, 205, 188, 69, 19, 38, 62, 200, 234, 186, 190, 181, 198, 47, 62, 32, 240, 42, 191, 84, 147, 67, 62, 21, 226, 153, 190, 215, 245, 130, 62, 156, 71, 1, 63, 106, 22, 87, 61, 107, 46, 176, 191, 107, 20, 151, 190, 38, 161, 159, 191, 189, 93, 1, 190, 79, 230, 238, 189, 142, 151, 156, 190, 40, 135, 35, 62, 132, 216, 120, 190, 44, 184, 104, 191, 82, 149, 19, 190, 158, 3, 239, 61, 88, 129, 233, 190, 247, 66, 37, 190, 125, 183, 216, 61, 103, 122, 175, 190, 222, 142, 187, 62, 48, 59, 155, 62, 229, 13, 186, 190, 9, 189, 195, 61, 255, 130, 15, 190, 11, 140, 146, 190, 180, 137, 32, 191, 148, 193, 134, 61, 132, 33, 79, 191, 51, 124, 248, 189, 133, 162, 47, 190, 13, 194, 125, 62, 242, 44, 209, 190, 186, 83, 21, 61, 8, 77, 13, 191, 172, 53, 0, 191, 18, 65, 112, 189, 55, 108, 21, 62, 21, 136, 145, 189, 56, 246, 110, 190, 253, 84, 139, 62, 164, 200, 215, 60, 117, 234, 65, 190, 117, 213, 188, 190, 74, 218, 156, 190, 173, 106, 194, 62, 220, 130, 22, 187, 67, 255, 117, 191, 130, 193, 138, 62, 23, 154, 89, 60, 115, 33, 45, 190, 222, 31, 151, 190, 133, 68, 167, 190, 9, 241, 222, 189, 95, 93, 23, 190, 71, 181, 120, 62, 219, 97, 110, 62, 61, 63, 115, 189, 94, 26, 200, 61, 125, 74, 43, 189, 139, 48, 165, 62, 97, 5, 151, 190, 133, 183, 21, 190, 252, 114, 32, 189, 133, 138, 181, 190, 211, 33, 216, 62, 194, 253, 160, 191, 184, 236, 26, 191, 227, 121, 130, 190, 192, 95, 225, 61, 66, 122, 36, 62, 159, 190, 12, 62, 227, 13, 97, 190, 23, 179, 196, 62, 137, 223, 193, 190, 167, 175, 95, 59, 100, 161, 225, 61, 16, 173, 2, 62, 160, 101, 67, 62, 125, 242, 196, 191, 85, 28, 75, 190, 206, 165, 228, 60, 243, 195, 33, 191, 193, 186, 234, 61, 234, 84, 139, 62, 146, 234, 177, 190, 191, 185, 31, 60, 23, 88, 201, 189, 154, 20, 151, 190, 175, 238, 60, 61, 193, 54, 151, 188, 80, 163, 77, 189, 0, 121, 36, 190, 249, 37, 157, 62, 207, 171, 171, 189, 11, 103, 59, 190, 222, 23, 151, 61, 12, 1, 175, 62, 226, 3, 47, 190, 173, 220, 162, 189, 170, 255, 17, 60, 32, 149, 66, 62, 230, 176, 254, 189, 5, 188, 213, 60, 147, 144, 53, 60, 194, 127, 161, 61, 136, 184, 217, 189, 41, 234, 10, 189, 59, 192, 255, 61, 69, 190, 215, 189, 102, 157, 153, 62, 111, 26, 173, 62, 193, 174, 250, 188, 196, 147, 70, 190, 210, 108, 202, 61, 91, 141, 12, 62, 175, 94, 93, 190, 102, 85, 71, 190, 202, 181, 235, 189, 59, 195, 112, 190, 28, 204, 180, 61, 201, 104, 186, 187, 185, 225, 173, 62, 176, 47, 34, 62, 7, 85, 109, 189, 20, 152, 248, 60, 206, 93, 231, 189, 225, 163, 192, 61, 29, 50, 32, 190, 48, 251, 66, 190, 21, 116, 166, 60, 166, 89, 164, 61, 208, 212, 171, 61, 208, 3, 199, 189, 218, 52, 112, 188, 34, 55, 218, 189, 120, 72, 217, 61, 158, 15, 132, 60, 8, 166, 108, 189, 128, 30, 187, 189, 41, 86, 141, 61, 68, 132, 82, 62, 29, 225, 68, 190, 159, 99, 226, 190, 73, 202, 5, 62, 242, 16, 83, 189, 205, 199, 228, 61, 192, 20, 143, 188, 181, 137, 18, 62, 240, 168, 132, 62, 82, 161, 65, 62, 130, 43, 26, 62, 243, 98, 65, 190, 251, 50, 79, 62, 142, 124, 37, 190, 34, 167, 209, 61, 127, 140, 155, 61, 35, 120, 160, 189, 15, 176, 7, 189, 174, 91, 0, 62, 34, 131, 18, 62, 11, 128, 60, 190, 154, 100, 32, 61, 115, 254, 17, 190, 45, 109, 114, 189, 58, 237, 110, 190, 158, 96, 116, 190, 251, 99, 117, 191, 40, 90, 186, 189, 107, 12, 165, 190, 47, 99, 74, 61, 223, 61, 206, 190, 11, 50, 131, 188, 39, 184, 57, 62, 83, 81, 22, 190, 216, 112, 74, 191, 125, 13, 133, 62, 4, 74, 138, 62, 121, 165, 233, 189, 156, 157, 189, 190, 251, 254, 240, 189, 161, 23, 9, 190, 155, 25, 180, 61, 249, 205, 130, 62, 56, 68, 125, 62, 142, 246, 39, 190, 7, 59, 195, 61, 71, 255, 54, 62, 142, 117, 160, 62, 147, 3, 58, 191, 111, 188, 221, 189, 196, 194, 188, 188, 134, 12, 197, 189, 79, 20, 35, 191, 205, 197, 212, 61, 211, 29, 169, 62, 255, 251, 187, 62, 235, 47, 159, 190, 57, 65, 30, 62, 95, 103, 103, 190, 133, 179, 129, 190, 39, 164, 78, 190, 223, 163, 122, 62, 169, 120, 124, 59, 49, 118, 22, 190, 126, 138, 215, 189, 197, 181, 140, 190, 83, 63, 164, 61, 239, 218, 84, 188, 3, 172, 130, 62, 31, 55, 173, 189, 145, 217, 60, 61, 214, 27, 209, 60, 137, 71, 60, 62, 164, 55, 102, 62, 229, 207, 28, 190, 213, 238, 141, 62, 81, 169, 84, 189, 197, 104, 232, 189, 228, 93, 97, 62, 22, 246, 141, 61, 60, 8, 37, 191, 241, 20, 246, 189, 224, 196, 15, 189, 193, 200, 136, 61, 108, 191, 43, 191, 117, 1, 14, 61, 214, 134, 138, 62, 188, 247, 156, 62, 120, 56, 215, 189, 193, 146, 20, 62, 162, 141, 12, 191, 127, 136, 176, 188, 148, 208, 222, 189, 98, 243, 179, 62, 40, 87, 202, 189, 178, 137, 141, 190, 148, 133, 0, 62, 21, 62, 172, 190, 63, 182, 57, 60, 64, 227, 88, 62, 53, 107, 141, 62, 210, 251, 110, 62, 136, 227, 141, 61, 104, 87, 31, 62, 36, 170, 7, 189, 18, 21, 128, 62, 236, 77, 81, 190, 18, 74, 163, 62, 204, 83, 182, 190, 83, 20, 157, 190, 189, 131, 26, 62, 166, 9, 0, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 104, 185, 189, 238, 133, 131, 62, 66, 179, 29, 190, 245, 144, 11, 189, 253, 101, 225, 61, 110, 168, 192, 61, 27, 117, 46, 189, 161, 16, 27, 190, 70, 94, 68, 189, 131, 7, 236, 189, 161, 140, 54, 62, 85, 232, 131, 61, 214, 163, 32, 62, 57, 212, 20, 62, 153, 48, 188, 62, 183, 127, 0, 190, 7, 57, 136, 62, 8, 102, 32, 62, 24, 57, 229, 189, 49, 116, 42, 62, 222, 182, 141, 61, 155, 113, 55, 62, 37, 166, 49, 190, 198, 24, 203, 61, 142, 233, 98, 62, 247, 133, 84, 62, 139, 142, 161, 61, 38, 1, 17, 189, 77, 217, 89, 62, 179, 168, 62, 62, 252, 56, 133, 62, 206, 253, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 24, 161, 63, 115, 171, 24, 63, 99, 88, 150, 190, 250, 62, 177, 62, 64, 133, 121, 190, 223, 135, 83, 61, 160, 14, 21, 190, 110, 225, 108, 61, 254, 228, 207, 60, 235, 132, 4, 190, 49, 248, 176, 190, 25, 187, 117, 191, 158, 94, 39, 63, 51, 191, 233, 60, 235, 111, 107, 61, 123, 64, 168, 61, 110, 38, 30, 191, 61, 85, 12, 190, 90, 38, 168, 188, 41, 114, 85, 63, 66, 51, 110, 190, 231, 85, 45, 63, 11, 107, 232, 189, 171, 196, 145, 62, 140, 26, 154, 191, 55, 178, 229, 62, 167, 40, 126, 63, 106, 154, 51, 189, 223, 0, 158, 60, 109, 136, 1, 62, 209, 255, 230, 190, 153, 43, 195, 190, 25, 250, 138, 62, 187, 45, 139, 61, 191, 123, 79, 62, 84, 179, 208, 61, 255, 4, 230, 190, 63, 39, 141, 190, 236, 10, 7, 190, 132, 185, 210, 60, 114, 91, 157, 190, 213, 203, 245, 190, 203, 87, 183, 189, 255, 11, 159, 62, 217, 62, 6, 61, 16, 114, 113, 190, 27, 92, 131, 190, 50, 41, 7, 188, 82, 203, 53, 62, 125, 153, 186, 189, 51, 79, 24, 189, 207, 247, 2, 62, 220, 135, 56, 60, 104, 235, 249, 61, 158, 34, 173, 60, 244, 169, 162, 62, 159, 171, 184, 61, 44, 100, 122, 190, 213, 54, 88, 189, 208, 90, 65, 62, 109, 43, 63, 190, 96, 219, 11, 191, 159, 236, 130, 61, 58, 72, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 169, 208, 189, 244, 172, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 19, 7, 63, 89, 33, 138, 63, 211, 179, 186, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 183, 9, 192, 54, 132, 112, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}