// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 9, 89, 189, 75, 78, 160, 191, 191, 186, 209, 190, 190, 155, 32, 190, 44, 134, 207, 189, 155, 67, 245, 62, 104, 77, 6, 63, 192, 4, 214, 190, 156, 141, 9, 63, 15, 31, 161, 190, 37, 32, 83, 191, 44, 94, 223, 62, 23, 207, 238, 62, 60, 177, 146, 191, 199, 205, 132, 190, 89, 80, 132, 190, 200, 238, 44, 191, 144, 108, 218, 190, 213, 74, 167, 189, 141, 220, 104, 62, 192, 211, 223, 190, 54, 95, 40, 63, 249, 200, 9, 63, 85, 169, 139, 62, 88, 240, 209, 189, 136, 175, 47, 63, 152, 240, 48, 63, 225, 235, 78, 190, 206, 132, 125, 191, 132, 49, 22, 61, 104, 27, 189, 190, 159, 91, 153, 63, 58, 5, 188, 62, 69, 90, 169, 62, 54, 64, 52, 191, 117, 128, 235, 190, 43, 44, 26, 191, 228, 90, 166, 190, 25, 184, 63, 63, 42, 26, 46, 63, 118, 111, 3, 63, 139, 81, 48, 62, 164, 117, 129, 190, 19, 0, 141, 61, 111, 123, 41, 60, 28, 252, 144, 190, 119, 138, 109, 62, 111, 46, 4, 63, 205, 171, 85, 62, 133, 70, 60, 191, 201, 203, 219, 62, 232, 39, 249, 62, 56, 246, 169, 191, 180, 249, 195, 190, 17, 105, 99, 63, 199, 170, 163, 62, 235, 250, 134, 62, 239, 13, 102, 62, 145, 158, 88, 62, 121, 119, 143, 190, 114, 213, 216, 62, 12, 83, 108, 62, 119, 74, 143, 62, 147, 198, 255, 189, 186, 179, 137, 191, 187, 58, 176, 190, 95, 79, 190, 61, 92, 102, 134, 63, 253, 251, 70, 62, 239, 11, 218, 190, 35, 219, 216, 61, 200, 243, 116, 189, 32, 223, 188, 190, 58, 236, 144, 191, 2, 255, 23, 191, 123, 9, 72, 63, 241, 157, 70, 63, 13, 150, 106, 62, 168, 184, 236, 62, 162, 113, 45, 190, 216, 159, 244, 190, 68, 3, 58, 63, 13, 204, 57, 63, 13, 202, 9, 190, 70, 96, 216, 188, 121, 233, 178, 62, 96, 243, 17, 191, 63, 8, 68, 63, 53, 78, 54, 191, 53, 110, 30, 190, 115, 190, 168, 62, 164, 252, 39, 190, 183, 47, 27, 63, 221, 171, 5, 63, 114, 200, 96, 191, 244, 46, 196, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 31, 227, 190, 143, 19, 128, 190, 231, 55, 215, 62, 1, 157, 187, 190, 136, 34, 171, 190, 8, 62, 46, 190, 106, 115, 146, 189, 216, 126, 113, 190, 84, 188, 6, 62, 247, 176, 40, 190, 210, 24, 44, 190, 190, 237, 246, 189, 254, 142, 123, 189, 50, 4, 135, 190, 164, 61, 182, 62, 15, 233, 34, 191, 170, 250, 200, 60, 149, 17, 217, 190, 154, 91, 102, 191, 109, 124, 182, 62, 154, 151, 21, 62, 100, 49, 223, 61, 84, 72, 133, 62, 57, 105, 42, 63, 63, 223, 137, 62, 41, 14, 29, 190, 235, 66, 148, 61, 195, 231, 88, 190, 196, 25, 138, 189, 221, 225, 241, 190, 205, 63, 55, 62, 74, 141, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 76, 221, 61, 235, 78, 251, 190, 72, 139, 72, 190, 178, 126, 205, 190, 67, 96, 45, 190, 13, 238, 85, 191, 192, 77, 54, 191, 182, 209, 98, 190, 130, 76, 44, 61, 244, 212, 150, 190, 140, 81, 158, 60, 127, 86, 48, 190, 242, 9, 25, 62, 199, 16, 218, 190, 23, 83, 150, 62, 160, 107, 162, 190, 227, 1, 176, 189, 21, 67, 30, 190, 16, 176, 202, 189, 110, 209, 192, 62, 21, 11, 54, 190, 185, 131, 222, 190, 137, 241, 182, 61, 223, 36, 148, 62, 1, 58, 23, 190, 85, 135, 187, 190, 16, 190, 191, 188, 19, 80, 70, 62, 212, 152, 80, 62, 60, 22, 22, 190, 237, 81, 204, 190, 102, 180, 5, 191, 46, 172, 235, 189, 1, 76, 193, 190, 172, 27, 103, 62, 153, 253, 183, 189, 164, 204, 148, 189, 73, 219, 31, 191, 205, 153, 44, 191, 157, 59, 134, 190, 138, 115, 192, 188, 171, 250, 55, 189, 100, 68, 151, 189, 184, 105, 67, 61, 150, 249, 130, 62, 32, 213, 22, 191, 94, 203, 40, 62, 152, 206, 4, 190, 238, 9, 173, 62, 92, 238, 87, 62, 184, 140, 5, 191, 237, 188, 134, 62, 89, 133, 104, 190, 38, 192, 29, 190, 36, 94, 68, 190, 175, 98, 0, 189, 8, 220, 133, 188, 133, 16, 167, 190, 224, 8, 216, 61, 221, 14, 205, 62, 72, 242, 88, 189, 105, 2, 214, 61, 141, 196, 28, 190, 202, 153, 234, 62, 213, 62, 241, 189, 157, 149, 122, 61, 222, 149, 222, 60, 81, 242, 16, 189, 242, 240, 161, 190, 251, 210, 184, 60, 252, 127, 36, 62, 127, 90, 165, 62, 222, 4, 230, 61, 133, 232, 166, 190, 125, 12, 132, 189, 25, 191, 120, 61, 212, 47, 74, 189, 231, 149, 184, 62, 123, 238, 33, 62, 239, 252, 37, 189, 31, 108, 21, 189, 224, 100, 130, 190, 101, 53, 138, 189, 165, 168, 121, 62, 20, 122, 129, 60, 218, 207, 7, 191, 248, 182, 227, 61, 217, 236, 241, 59, 204, 171, 140, 189, 156, 46, 26, 62, 113, 204, 64, 61, 75, 200, 198, 62, 151, 243, 214, 61, 48, 140, 200, 190, 14, 211, 120, 62, 226, 15, 142, 61, 132, 195, 195, 62, 253, 172, 97, 190, 171, 38, 38, 62, 29, 158, 251, 189, 144, 165, 37, 62, 232, 120, 63, 191, 57, 223, 145, 191, 168, 219, 170, 190, 91, 35, 137, 188, 208, 124, 51, 62, 17, 206, 190, 61, 119, 74, 64, 61, 253, 145, 147, 62, 239, 71, 94, 190, 221, 229, 151, 62, 230, 127, 37, 61, 231, 154, 103, 62, 254, 62, 213, 62, 222, 66, 47, 63, 224, 0, 67, 190, 89, 196, 6, 190, 118, 33, 22, 62, 221, 115, 12, 190, 120, 94, 133, 189, 28, 246, 24, 60, 3, 129, 255, 189, 20, 53, 202, 190, 9, 139, 199, 190, 84, 115, 139, 190, 229, 56, 210, 61, 0, 249, 29, 190, 51, 64, 151, 62, 99, 205, 36, 59, 68, 134, 215, 61, 241, 80, 24, 61, 251, 195, 99, 189, 39, 161, 175, 190, 122, 75, 82, 190, 101, 197, 116, 61, 205, 98, 244, 61, 3, 217, 185, 186, 47, 1, 14, 191, 99, 36, 241, 189, 87, 1, 99, 62, 39, 136, 119, 189, 63, 55, 167, 188, 32, 239, 137, 61, 103, 120, 49, 190, 54, 37, 235, 189, 243, 246, 37, 60, 103, 178, 4, 191, 13, 39, 182, 188, 4, 170, 142, 189, 246, 163, 198, 190, 106, 141, 160, 61, 70, 96, 35, 62, 88, 22, 178, 190, 198, 31, 114, 62, 185, 250, 208, 61, 245, 240, 26, 62, 134, 207, 252, 61, 115, 206, 27, 62, 113, 25, 7, 62, 152, 245, 135, 62, 227, 17, 33, 62, 238, 222, 33, 189, 135, 206, 150, 61, 237, 128, 92, 189, 246, 80, 57, 190, 247, 91, 135, 62, 170, 191, 28, 190, 22, 145, 99, 61, 168, 242, 21, 62, 43, 66, 10, 62, 223, 137, 85, 189, 127, 128, 207, 189, 213, 175, 138, 188, 192, 13, 0, 62, 230, 59, 60, 62, 220, 64, 42, 190, 192, 162, 183, 61, 64, 232, 10, 190, 112, 73, 35, 191, 90, 225, 251, 189, 67, 133, 96, 62, 165, 100, 105, 188, 40, 200, 70, 189, 195, 178, 155, 61, 3, 226, 25, 62, 10, 188, 19, 62, 52, 253, 23, 61, 0, 80, 43, 190, 201, 253, 114, 190, 194, 248, 60, 190, 47, 135, 86, 61, 56, 7, 50, 62, 68, 102, 65, 190, 23, 103, 51, 62, 59, 82, 72, 61, 140, 188, 162, 188, 60, 78, 89, 190, 94, 222, 20, 62, 137, 72, 49, 62, 30, 63, 133, 62, 142, 253, 27, 61, 96, 196, 156, 190, 18, 188, 202, 188, 139, 111, 252, 61, 151, 26, 87, 62, 83, 119, 184, 60, 185, 28, 155, 61, 22, 136, 51, 187, 53, 85, 85, 189, 99, 107, 181, 189, 252, 14, 177, 190, 108, 202, 174, 188, 71, 225, 108, 61, 125, 75, 202, 190, 194, 156, 177, 60, 141, 255, 154, 61, 70, 86, 148, 190, 20, 181, 83, 62, 142, 177, 67, 62, 121, 126, 128, 62, 125, 49, 46, 61, 150, 3, 20, 189, 134, 43, 53, 61, 123, 251, 27, 62, 33, 90, 34, 62, 28, 56, 15, 189, 123, 52, 183, 61, 207, 224, 199, 188, 191, 71, 108, 189, 11, 249, 160, 189, 233, 178, 30, 190, 48, 206, 225, 189, 70, 154, 233, 189, 128, 242, 126, 189, 171, 7, 190, 189, 55, 168, 246, 61, 28, 136, 199, 61, 96, 141, 25, 190, 64, 193, 16, 190, 8, 102, 159, 188, 172, 73, 182, 59, 160, 21, 37, 190, 76, 69, 179, 61, 252, 201, 104, 61, 106, 9, 219, 189, 135, 111, 34, 189, 220, 231, 167, 189, 142, 205, 255, 61, 16, 27, 20, 190, 101, 1, 17, 189, 186, 132, 9, 61, 0, 49, 141, 59, 218, 188, 118, 189, 110, 140, 20, 62, 6, 107, 246, 60, 31, 177, 225, 189, 174, 219, 82, 190, 80, 24, 39, 62, 80, 179, 247, 61, 131, 240, 9, 190, 74, 228, 189, 190, 144, 48, 246, 189, 41, 74, 42, 190, 137, 91, 178, 189, 41, 88, 50, 62, 137, 190, 10, 61, 238, 241, 245, 61, 169, 59, 63, 61, 67, 106, 243, 60, 66, 203, 158, 61, 41, 116, 110, 62, 37, 51, 11, 61, 173, 96, 19, 190, 154, 115, 9, 189, 123, 177, 194, 190, 196, 39, 200, 61, 46, 198, 81, 62, 197, 14, 51, 190, 18, 56, 176, 189, 187, 53, 1, 62, 27, 173, 172, 190, 50, 160, 7, 190, 201, 254, 34, 62, 78, 206, 195, 60, 9, 231, 63, 61, 63, 223, 102, 62, 70, 215, 24, 62, 93, 0, 178, 62, 218, 180, 224, 189, 201, 253, 235, 189, 61, 9, 161, 189, 199, 215, 151, 190, 36, 186, 144, 190, 85, 31, 58, 190, 232, 163, 43, 189, 86, 176, 227, 61, 227, 222, 216, 61, 118, 199, 12, 191, 245, 61, 3, 62, 156, 193, 91, 62, 203, 30, 255, 188, 11, 188, 18, 189, 13, 152, 139, 189, 160, 126, 51, 60, 182, 86, 120, 189, 57, 218, 230, 189, 162, 213, 74, 191, 245, 73, 28, 62, 81, 37, 141, 61, 137, 8, 245, 189, 119, 74, 50, 189, 234, 0, 31, 62, 152, 64, 131, 190, 100, 46, 181, 62, 202, 64, 160, 62, 191, 194, 44, 62, 140, 19, 5, 184, 17, 81, 162, 62, 66, 210, 96, 188, 139, 1, 196, 62, 163, 196, 209, 61, 88, 227, 131, 61, 114, 203, 64, 189, 126, 217, 69, 62, 233, 208, 49, 188, 164, 193, 132, 59, 75, 111, 54, 190, 209, 14, 169, 62, 3, 4, 236, 189, 253, 250, 193, 62, 103, 34, 184, 190, 233, 82, 168, 59, 219, 39, 180, 61, 14, 214, 51, 62, 73, 137, 178, 60, 172, 204, 85, 60, 10, 63, 27, 61, 87, 62, 146, 61, 24, 152, 218, 61, 164, 128, 167, 190, 213, 132, 90, 62, 227, 233, 56, 62, 23, 117, 134, 190, 140, 188, 207, 61, 192, 157, 169, 61, 40, 204, 241, 61, 29, 112, 53, 190, 147, 129, 35, 188, 248, 2, 220, 190, 217, 218, 100, 62, 165, 233, 37, 62, 136, 12, 142, 62, 213, 83, 177, 190, 74, 8, 87, 189, 31, 216, 216, 190, 132, 85, 254, 62, 195, 163, 124, 190, 13, 74, 43, 62, 107, 39, 113, 62, 219, 81, 6, 62, 186, 134, 6, 191, 226, 82, 62, 62, 255, 174, 51, 191, 150, 45, 200, 60, 254, 130, 176, 187, 235, 98, 13, 62, 210, 98, 143, 62, 57, 58, 79, 190, 141, 82, 34, 190, 56, 199, 154, 190, 220, 108, 0, 190, 32, 81, 163, 190, 38, 184, 160, 61, 235, 74, 143, 58, 216, 90, 39, 189, 223, 21, 44, 62, 151, 235, 38, 62, 191, 86, 18, 62, 155, 197, 105, 189, 156, 238, 46, 190, 41, 195, 38, 190, 133, 18, 235, 189, 150, 29, 252, 59, 10, 124, 83, 191, 200, 66, 39, 188, 24, 224, 46, 189, 121, 182, 90, 62, 49, 190, 42, 189, 204, 27, 59, 62, 153, 31, 12, 191, 104, 138, 13, 191, 51, 94, 18, 191, 167, 18, 159, 189, 60, 111, 174, 61, 149, 240, 233, 61, 34, 63, 164, 61, 168, 63, 31, 62, 172, 116, 242, 190, 180, 35, 139, 189, 8, 189, 224, 189, 144, 162, 162, 62, 118, 141, 139, 189, 34, 54, 98, 191, 40, 138, 136, 62, 36, 250, 25, 59, 171, 91, 168, 190, 48, 252, 1, 190, 199, 50, 113, 62, 165, 39, 110, 190, 33, 111, 73, 190, 112, 228, 240, 61, 146, 104, 60, 62, 35, 55, 47, 62, 90, 140, 76, 62, 19, 157, 152, 190, 122, 176, 134, 62, 56, 149, 74, 61, 110, 25, 236, 188, 44, 97, 251, 60, 255, 75, 253, 189, 150, 43, 63, 190, 243, 49, 108, 188, 86, 158, 21, 62, 64, 88, 210, 60, 221, 90, 87, 190, 69, 116, 129, 189, 95, 144, 253, 59, 193, 4, 67, 190, 85, 242, 178, 60, 243, 227, 90, 62, 15, 59, 212, 61, 3, 145, 35, 62, 179, 33, 67, 190, 0, 4, 119, 190, 203, 105, 161, 190, 66, 149, 208, 187, 50, 143, 110, 189, 248, 175, 144, 57, 130, 102, 138, 190, 239, 130, 138, 60, 87, 236, 47, 62, 159, 207, 204, 61, 90, 185, 80, 189, 208, 225, 74, 59, 157, 152, 32, 190, 181, 140, 232, 61, 229, 252, 9, 190, 72, 255, 196, 62, 155, 50, 137, 61, 221, 230, 3, 190, 38, 64, 123, 62, 56, 204, 243, 189, 186, 222, 22, 190, 215, 241, 59, 61, 25, 8, 228, 61, 62, 20, 7, 190, 43, 130, 184, 188, 97, 136, 222, 189, 41, 245, 14, 62, 102, 163, 90, 187, 43, 230, 189, 189, 254, 211, 25, 189, 224, 151, 77, 62, 34, 13, 230, 189, 241, 21, 76, 62, 144, 124, 28, 190, 162, 136, 195, 190, 207, 235, 37, 62, 80, 104, 232, 60, 109, 198, 142, 61, 70, 193, 208, 60, 164, 213, 173, 62, 229, 219, 12, 62, 87, 171, 7, 62, 48, 14, 44, 62, 158, 102, 75, 62, 84, 255, 1, 190, 116, 24, 200, 189, 232, 202, 151, 61, 167, 6, 140, 62, 161, 46, 157, 58, 246, 25, 239, 60, 210, 121, 11, 62, 228, 103, 207, 189, 81, 63, 41, 60, 207, 147, 42, 62, 185, 192, 178, 60, 241, 76, 19, 190, 172, 67, 83, 189, 48, 57, 143, 61, 232, 247, 96, 61, 255, 58, 102, 62, 38, 234, 0, 62, 99, 95, 11, 190, 173, 61, 72, 189, 18, 151, 48, 61, 226, 28, 100, 62, 242, 174, 72, 189, 228, 237, 209, 62, 75, 55, 91, 62, 240, 11, 182, 61, 171, 216, 186, 61, 165, 105, 5, 62, 44, 94, 41, 62, 173, 9, 126, 62, 201, 110, 50, 61, 168, 200, 69, 189, 115, 213, 230, 61, 7, 68, 159, 62, 56, 22, 18, 190, 183, 237, 34, 190, 252, 224, 194, 189, 188, 249, 235, 190, 58, 164, 3, 62, 128, 225, 82, 61, 16, 11, 35, 62, 27, 165, 15, 191, 23, 14, 50, 62, 157, 164, 255, 62, 71, 149, 42, 62, 198, 210, 177, 190, 14, 223, 138, 190, 60, 50, 195, 190, 32, 3, 83, 190, 77, 130, 96, 190, 251, 53, 103, 62, 68, 140, 196, 61, 114, 122, 101, 61, 164, 199, 33, 190, 111, 237, 109, 190, 82, 20, 139, 190, 208, 255, 227, 61, 81, 16, 149, 62, 93, 208, 119, 189, 14, 78, 33, 190, 112, 104, 140, 61, 54, 187, 162, 62, 139, 27, 36, 62, 0, 186, 11, 61, 161, 234, 212, 188, 85, 95, 157, 190, 253, 67, 126, 190, 93, 17, 125, 62, 10, 45, 207, 189, 213, 255, 0, 190, 35, 10, 172, 188, 250, 50, 199, 61, 6, 97, 133, 62, 113, 225, 158, 190, 255, 229, 209, 61, 180, 21, 141, 62, 8, 67, 42, 62, 176, 28, 149, 189, 109, 62, 151, 188, 94, 251, 72, 60, 78, 247, 48, 62, 169, 175, 12, 62, 128, 220, 78, 62, 223, 9, 42, 188, 12, 131, 134, 61, 59, 222, 237, 189, 46, 157, 95, 190, 47, 61, 105, 190, 194, 252, 32, 62, 1, 192, 26, 62, 93, 30, 208, 190, 123, 169, 121, 189, 194, 170, 36, 189, 8, 179, 186, 190, 205, 13, 209, 189, 119, 230, 66, 62, 221, 17, 146, 62, 51, 153, 19, 188, 224, 36, 130, 190, 38, 249, 64, 62, 118, 181, 200, 189, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 238, 129, 57, 61, 81, 215, 115, 189, 222, 185, 140, 189, 44, 124, 112, 190, 223, 30, 52, 190, 157, 140, 75, 191, 117, 177, 87, 191, 195, 232, 49, 190, 86, 229, 249, 61, 218, 95, 116, 190, 83, 179, 161, 62, 178, 252, 143, 189, 175, 157, 158, 62, 184, 52, 5, 191, 29, 123, 135, 61, 37, 75, 65, 62, 111, 9, 32, 62, 56, 124, 27, 190, 13, 177, 60, 191, 187, 139, 186, 62, 8, 123, 193, 189, 123, 33, 251, 190, 231, 154, 89, 62, 130, 120, 109, 62, 37, 102, 117, 190, 1, 23, 157, 190, 85, 35, 133, 62, 214, 113, 195, 189, 69, 45, 152, 61, 208, 129, 217, 61, 103, 38, 108, 190, 72, 100, 205, 59, 231, 68, 0, 191, 139, 197, 142, 62, 48, 104, 244, 61, 48, 100, 55, 62, 213, 74, 236, 190, 62, 20, 218, 61, 162, 106, 60, 190, 49, 248, 142, 60, 189, 25, 156, 189, 104, 29, 169, 62, 69, 185, 36, 62, 105, 168, 163, 190, 33, 234, 126, 59, 217, 32, 104, 62, 58, 129, 187, 185, 21, 238, 38, 62, 2, 51, 75, 189, 178, 9, 174, 190, 218, 118, 150, 190, 103, 154, 188, 190, 232, 219, 160, 189, 154, 85, 147, 61, 242, 147, 191, 189, 170, 181, 155, 61, 55, 115, 38, 62, 187, 147, 95, 61, 211, 188, 15, 190, 82, 219, 130, 189, 110, 110, 180, 190, 66, 218, 207, 60, 2, 241, 92, 62, 242, 94, 4, 190, 177, 193, 90, 189, 213, 108, 130, 190, 75, 110, 2, 61, 254, 57, 157, 190, 105, 61, 95, 60, 134, 76, 102, 191, 164, 52, 13, 191, 43, 62, 218, 190, 224, 158, 103, 61, 60, 246, 189, 188, 58, 153, 24, 61, 143, 46, 10, 62, 23, 121, 137, 62, 255, 114, 14, 191, 179, 225, 63, 62, 80, 125, 65, 190, 219, 176, 243, 62, 86, 112, 130, 62, 254, 183, 103, 191, 99, 69, 113, 62, 252, 58, 12, 190, 255, 13, 199, 189, 121, 132, 173, 60, 122, 126, 132, 61, 98, 181, 28, 190, 67, 180, 139, 190, 113, 132, 16, 188, 148, 224, 24, 62, 1, 123, 48, 62, 194, 200, 227, 60, 141, 227, 160, 189, 133, 18, 224, 62, 136, 35, 17, 62, 71, 106, 6, 62, 100, 133, 198, 189, 46, 155, 61, 189, 26, 116, 25, 62, 68, 254, 171, 61, 244, 212, 166, 189, 205, 239, 208, 189, 176, 162, 169, 61, 212, 39, 190, 189, 26, 125, 157, 60, 204, 163, 142, 189, 34, 174, 77, 189, 24, 20, 10, 189, 254, 44, 137, 59, 195, 52, 94, 189, 138, 21, 23, 189, 83, 44, 26, 190, 31, 107, 136, 188, 244, 151, 41, 61, 61, 199, 12, 190, 23, 244, 132, 189, 87, 236, 54, 190, 174, 93, 228, 188, 41, 74, 131, 185, 249, 165, 35, 62, 106, 221, 170, 189, 69, 161, 54, 190, 136, 104, 249, 61, 129, 118, 4, 62, 240, 244, 195, 60, 68, 40, 41, 189, 34, 57, 45, 62, 29, 174, 137, 190, 159, 169, 12, 62, 227, 142, 115, 190, 246, 54, 83, 62, 121, 59, 181, 190, 219, 142, 7, 191, 0, 130, 107, 190, 199, 142, 40, 62, 211, 41, 63, 190, 139, 27, 43, 62, 40, 76, 63, 62, 165, 60, 135, 62, 79, 181, 19, 191, 180, 104, 5, 189, 77, 137, 216, 187, 77, 82, 98, 62, 3, 142, 92, 62, 133, 32, 77, 191, 202, 176, 61, 62, 113, 76, 192, 189, 22, 137, 74, 189, 122, 36, 11, 61, 31, 119, 217, 60, 44, 40, 126, 61, 34, 165, 142, 190, 151, 22, 160, 60, 157, 144, 70, 62, 72, 217, 12, 62, 202, 76, 201, 189, 233, 209, 53, 189, 192, 172, 31, 62, 115, 180, 198, 190, 59, 57, 47, 61, 186, 16, 165, 190, 36, 106, 211, 62, 112, 31, 172, 190, 20, 217, 119, 62, 9, 71, 5, 63, 106, 22, 87, 61, 105, 131, 136, 191, 13, 10, 139, 190, 113, 79, 119, 191, 137, 65, 52, 190, 253, 129, 24, 188, 110, 108, 157, 190, 210, 111, 68, 62, 231, 191, 241, 189, 231, 60, 1, 191, 111, 252, 70, 190, 158, 3, 239, 61, 55, 116, 234, 190, 119, 109, 35, 190, 18, 220, 142, 61, 2, 77, 25, 190, 165, 214, 195, 62, 25, 229, 146, 62, 39, 215, 206, 190, 203, 151, 183, 61, 131, 71, 225, 188, 255, 219, 143, 190, 173, 142, 79, 190, 91, 128, 98, 61, 49, 199, 81, 191, 64, 116, 176, 190, 178, 95, 30, 190, 10, 219, 134, 62, 115, 181, 191, 190, 145, 243, 59, 189, 79, 216, 232, 190, 180, 17, 3, 191, 211, 10, 135, 189, 52, 250, 15, 187, 242, 135, 230, 60, 29, 138, 169, 190, 181, 181, 89, 62, 32, 202, 144, 61, 244, 146, 74, 190, 24, 8, 236, 60, 95, 41, 174, 190, 214, 61, 211, 62, 170, 230, 181, 189, 74, 40, 3, 191, 51, 28, 132, 62, 195, 129, 18, 189, 112, 115, 44, 189, 146, 195, 91, 190, 176, 62, 30, 190, 150, 111, 189, 189, 188, 161, 25, 190, 159, 52, 89, 62, 32, 44, 55, 62, 197, 200, 2, 190, 19, 163, 218, 60, 233, 25, 145, 189, 74, 15, 154, 62, 115, 103, 71, 190, 56, 146, 231, 189, 184, 192, 103, 189, 90, 217, 152, 190, 134, 51, 231, 61, 109, 84, 80, 191, 103, 67, 173, 190, 247, 213, 161, 190, 243, 114, 180, 61, 12, 66, 166, 60, 251, 53, 241, 61, 69, 30, 54, 190, 245, 87, 208, 62, 41, 207, 209, 190, 131, 53, 145, 60, 233, 204, 23, 62, 160, 34, 28, 62, 206, 244, 129, 189, 134, 60, 121, 191, 170, 89, 241, 60, 159, 126, 195, 188, 51, 151, 139, 190, 99, 134, 156, 61, 203, 205, 126, 62, 4, 120, 134, 190, 130, 1, 165, 189, 143, 15, 140, 61, 216, 139, 162, 61, 254, 61, 133, 62, 183, 202, 37, 190, 104, 230, 137, 189, 75, 234, 92, 190, 244, 226, 149, 62, 19, 117, 203, 189, 121, 21, 52, 190, 62, 235, 254, 60, 143, 57, 178, 62, 237, 105, 68, 190, 245, 109, 166, 189, 142, 91, 230, 61, 238, 103, 87, 62, 76, 231, 243, 187, 93, 123, 69, 61, 83, 131, 95, 61, 247, 24, 161, 61, 86, 219, 254, 60, 82, 99, 123, 189, 213, 204, 13, 62, 111, 12, 32, 190, 205, 106, 148, 62, 45, 83, 166, 62, 219, 112, 54, 60, 120, 247, 16, 190, 9, 212, 164, 61, 207, 98, 54, 62, 21, 44, 73, 190, 234, 52, 53, 190, 180, 186, 89, 60, 142, 155, 45, 190, 253, 38, 224, 61, 249, 128, 162, 60, 199, 72, 188, 62, 119, 199, 49, 62, 156, 216, 154, 189, 43, 75, 223, 188, 139, 191, 134, 189, 159, 1, 247, 61, 38, 103, 168, 189, 66, 237, 99, 190, 0, 75, 75, 60, 83, 130, 16, 61, 211, 198, 8, 61, 37, 134, 245, 189, 79, 226, 139, 188, 28, 43, 218, 189, 191, 124, 142, 61, 147, 2, 52, 61, 173, 33, 2, 190, 63, 192, 27, 189, 47, 222, 175, 61, 57, 95, 135, 62, 78, 123, 86, 190, 222, 239, 206, 190, 199, 252, 37, 62, 17, 86, 155, 189, 208, 248, 62, 62, 6, 201, 168, 60, 156, 91, 55, 62, 180, 29, 123, 62, 225, 169, 39, 62, 38, 47, 242, 61, 96, 107, 222, 189, 96, 6, 254, 61, 194, 253, 75, 190, 59, 129, 203, 61, 81, 169, 236, 61, 89, 48, 237, 189, 192, 203, 41, 189, 84, 229, 253, 61, 147, 66, 23, 62, 80, 188, 77, 190, 109, 231, 68, 62, 207, 117, 145, 190, 38, 91, 182, 189, 13, 129, 190, 190, 128, 41, 250, 189, 61, 168, 31, 191, 19, 154, 34, 190, 56, 97, 184, 190, 165, 68, 196, 60, 170, 103, 180, 189, 198, 57, 143, 189, 197, 75, 56, 62, 136, 44, 9, 190, 192, 163, 36, 191, 18, 159, 114, 62, 236, 81, 79, 62, 160, 86, 219, 61, 159, 5, 69, 190, 142, 250, 174, 61, 162, 95, 215, 187, 52, 23, 178, 61, 13, 102, 51, 62, 31, 176, 49, 62, 179, 232, 178, 190, 106, 185, 151, 188, 198, 147, 231, 61, 148, 48, 136, 62, 193, 215, 225, 190, 198, 235, 19, 189, 227, 38, 5, 189, 251, 114, 171, 189, 234, 74, 15, 191, 248, 78, 20, 62, 199, 141, 184, 62, 27, 229, 152, 62, 31, 119, 120, 190, 53, 84, 202, 61, 244, 99, 224, 189, 3, 63, 121, 190, 114, 210, 11, 190, 227, 48, 52, 62, 156, 122, 222, 188, 110, 75, 109, 61, 242, 77, 234, 189, 236, 135, 76, 190, 201, 93, 6, 190, 173, 11, 180, 189, 181, 70, 99, 62, 72, 183, 111, 189, 15, 140, 150, 189, 59, 0, 178, 186, 144, 174, 111, 62, 86, 141, 250, 61, 198, 157, 22, 190, 57, 163, 23, 62, 116, 149, 65, 188, 6, 197, 130, 189, 157, 216, 138, 62, 50, 157, 205, 61, 184, 100, 161, 190, 124, 17, 55, 190, 162, 153, 211, 189, 144, 68, 142, 189, 149, 161, 31, 191, 88, 157, 156, 61, 116, 91, 173, 62, 74, 190, 127, 62, 163, 168, 240, 187, 74, 128, 117, 188, 25, 252, 152, 190, 243, 230, 28, 60, 241, 83, 201, 189, 170, 143, 150, 62, 247, 33, 203, 189, 116, 233, 99, 188, 79, 132, 135, 188, 68, 158, 148, 190, 243, 38, 169, 190, 86, 86, 31, 62, 45, 86, 96, 62, 48, 251, 134, 62, 214, 83, 139, 60, 189, 227, 41, 62, 52, 206, 103, 61, 130, 160, 46, 62, 50, 186, 52, 190, 202, 17, 85, 62, 59, 50, 140, 190, 209, 225, 131, 190, 186, 227, 241, 61, 90, 254, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 89, 146, 189, 65, 250, 101, 62, 234, 18, 62, 190, 16, 255, 81, 189, 145, 106, 184, 61, 38, 108, 171, 61, 61, 138, 129, 189, 90, 153, 6, 190, 39, 107, 190, 189, 81, 128, 42, 189, 251, 85, 20, 62, 61, 32, 13, 61, 76, 112, 21, 62, 133, 125, 22, 62, 230, 90, 188, 62, 104, 229, 194, 189, 154, 244, 118, 62, 49, 133, 1, 62, 24, 57, 229, 189, 46, 104, 255, 61, 11, 16, 229, 61, 207, 220, 68, 62, 212, 59, 45, 190, 236, 50, 203, 61, 159, 141, 124, 62, 166, 190, 89, 62, 28, 214, 9, 60, 2, 75, 236, 60, 139, 53, 94, 62, 96, 106, 84, 62, 48, 9, 100, 62, 242, 42, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 9, 99, 63, 227, 143, 2, 63, 30, 45, 168, 190, 1, 221, 172, 62, 11, 180, 85, 190, 87, 57, 168, 59, 191, 151, 39, 190, 1, 127, 80, 61, 47, 5, 80, 189, 95, 45, 213, 189, 205, 246, 174, 190, 118, 148, 50, 191, 85, 222, 0, 63, 237, 155, 234, 188, 59, 140, 218, 61, 34, 53, 50, 62, 77, 128, 7, 191, 175, 100, 15, 190, 90, 38, 168, 188, 96, 213, 54, 63, 25, 111, 76, 190, 110, 104, 11, 63, 125, 36, 235, 189, 95, 205, 120, 62, 75, 244, 136, 191, 36, 205, 224, 62, 26, 51, 80, 63, 173, 4, 54, 190, 222, 145, 187, 61, 119, 157, 236, 61, 120, 110, 164, 190, 92, 218, 94, 190, 199, 229, 255, 61, 243, 35, 70, 59, 145, 236, 145, 62, 237, 116, 13, 62, 175, 207, 210, 190, 6, 175, 118, 190, 136, 218, 204, 189, 52, 95, 146, 61, 210, 131, 91, 190, 238, 191, 224, 190, 101, 124, 2, 190, 204, 203, 43, 62, 58, 32, 184, 61, 171, 138, 98, 190, 232, 39, 123, 190, 32, 234, 19, 61, 53, 112, 36, 62, 0, 236, 195, 188, 51, 79, 24, 189, 224, 58, 185, 61, 188, 62, 199, 188, 200, 107, 248, 61, 202, 208, 166, 60, 140, 201, 116, 62, 126, 47, 221, 60, 170, 48, 129, 190, 248, 134, 96, 189, 221, 189, 93, 62, 61, 244, 72, 190, 11, 139, 11, 191, 37, 56, 34, 62, 141, 250, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 57, 183, 189, 72, 31, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 198, 61, 192, 255, 104, 12, 191, 137, 67, 172, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {219, 224, 129, 192, 188, 251, 95, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}