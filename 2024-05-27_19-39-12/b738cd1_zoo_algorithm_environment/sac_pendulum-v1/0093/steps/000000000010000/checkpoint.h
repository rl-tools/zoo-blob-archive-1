// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 131, 193, 189, 177, 205, 164, 191, 85, 236, 242, 190, 114, 219, 116, 190, 34, 19, 126, 189, 156, 1, 234, 62, 109, 127, 242, 62, 98, 14, 14, 191, 133, 230, 199, 62, 207, 119, 182, 190, 95, 83, 37, 191, 47, 15, 245, 62, 87, 190, 7, 63, 85, 174, 142, 191, 238, 137, 99, 190, 170, 201, 158, 190, 128, 57, 131, 191, 151, 58, 136, 190, 114, 247, 214, 189, 17, 81, 235, 62, 235, 202, 223, 190, 17, 191, 38, 63, 214, 156, 41, 63, 171, 137, 101, 62, 186, 24, 84, 61, 2, 2, 132, 63, 164, 120, 28, 63, 85, 166, 123, 190, 29, 188, 109, 191, 31, 85, 141, 61, 120, 85, 152, 190, 168, 93, 169, 63, 186, 233, 188, 62, 147, 237, 151, 62, 39, 67, 60, 191, 195, 79, 236, 190, 181, 119, 19, 191, 228, 154, 97, 190, 82, 246, 61, 63, 136, 37, 46, 63, 110, 101, 6, 63, 105, 110, 46, 62, 87, 189, 168, 190, 226, 120, 180, 189, 240, 86, 24, 189, 32, 28, 77, 190, 163, 35, 4, 63, 77, 53, 253, 62, 168, 183, 69, 62, 171, 194, 64, 191, 151, 171, 196, 62, 186, 52, 16, 63, 244, 94, 169, 191, 184, 37, 168, 190, 237, 252, 114, 63, 169, 250, 165, 62, 12, 228, 147, 62, 19, 112, 108, 62, 51, 55, 154, 62, 154, 144, 128, 190, 1, 74, 194, 62, 13, 199, 212, 62, 255, 192, 141, 62, 111, 185, 27, 190, 185, 216, 185, 191, 90, 62, 211, 190, 28, 52, 19, 62, 95, 105, 149, 63, 117, 154, 91, 62, 199, 177, 217, 190, 177, 41, 28, 61, 13, 101, 66, 189, 87, 230, 164, 190, 123, 22, 186, 191, 31, 79, 13, 191, 117, 95, 68, 63, 168, 136, 101, 63, 41, 108, 101, 62, 177, 228, 234, 62, 160, 111, 92, 190, 222, 67, 241, 190, 112, 140, 56, 63, 196, 54, 66, 63, 121, 79, 220, 190, 62, 113, 165, 59, 240, 115, 147, 62, 117, 49, 6, 191, 243, 52, 77, 63, 89, 144, 48, 191, 215, 203, 26, 190, 225, 135, 157, 62, 196, 167, 71, 190, 150, 241, 22, 63, 103, 165, 0, 63, 244, 185, 95, 191, 240, 10, 179, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 119, 218, 189, 14, 88, 161, 190, 72, 152, 248, 62, 122, 145, 204, 190, 250, 64, 175, 190, 131, 122, 71, 190, 150, 83, 198, 186, 231, 111, 136, 190, 179, 78, 167, 61, 102, 192, 94, 190, 224, 249, 142, 190, 185, 3, 246, 189, 35, 60, 15, 62, 57, 247, 154, 190, 232, 234, 122, 62, 32, 177, 191, 190, 223, 254, 128, 61, 144, 100, 214, 190, 230, 63, 131, 191, 175, 228, 167, 62, 102, 106, 71, 62, 138, 165, 46, 61, 243, 160, 125, 62, 226, 232, 32, 63, 57, 155, 91, 62, 13, 77, 20, 190, 229, 131, 43, 187, 93, 78, 85, 190, 14, 201, 91, 190, 112, 230, 245, 190, 213, 118, 57, 62, 195, 221, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 189, 103, 190, 98, 179, 189, 190, 188, 92, 187, 59, 44, 229, 200, 189, 67, 96, 45, 190, 31, 187, 161, 191, 85, 63, 48, 191, 119, 174, 146, 190, 202, 255, 54, 188, 139, 236, 171, 190, 196, 245, 93, 189, 119, 100, 234, 189, 240, 247, 117, 62, 29, 194, 245, 190, 149, 65, 161, 62, 130, 187, 252, 190, 165, 130, 91, 62, 21, 67, 30, 190, 16, 176, 202, 189, 98, 73, 184, 62, 137, 36, 195, 190, 107, 229, 66, 191, 211, 75, 66, 61, 114, 15, 160, 62, 136, 162, 93, 190, 114, 218, 200, 190, 241, 226, 90, 61, 175, 13, 126, 62, 17, 185, 106, 62, 60, 22, 22, 190, 52, 217, 163, 190, 13, 100, 30, 191, 37, 142, 193, 59, 137, 135, 193, 190, 127, 197, 64, 62, 78, 126, 112, 189, 24, 1, 48, 189, 202, 103, 30, 191, 241, 25, 71, 191, 12, 202, 164, 190, 158, 48, 212, 188, 82, 139, 202, 60, 53, 63, 102, 189, 22, 85, 116, 61, 188, 81, 132, 62, 189, 57, 40, 191, 139, 176, 68, 62, 0, 238, 251, 189, 51, 54, 147, 62, 35, 126, 116, 62, 24, 178, 149, 191, 249, 255, 131, 62, 123, 37, 126, 190, 23, 81, 10, 190, 212, 20, 167, 190, 243, 96, 255, 59, 81, 150, 161, 61, 151, 221, 196, 190, 38, 80, 202, 61, 53, 196, 206, 62, 10, 194, 0, 190, 90, 75, 46, 62, 66, 234, 55, 190, 20, 14, 231, 62, 138, 140, 8, 190, 173, 49, 235, 60, 68, 91, 0, 61, 220, 247, 58, 189, 81, 35, 161, 190, 205, 151, 25, 61, 29, 24, 67, 62, 91, 44, 141, 62, 251, 245, 154, 61, 80, 68, 222, 190, 43, 182, 173, 189, 153, 113, 39, 61, 102, 171, 164, 189, 137, 28, 164, 62, 244, 183, 76, 62, 35, 135, 169, 189, 252, 169, 250, 187, 55, 120, 111, 190, 198, 226, 163, 60, 200, 46, 153, 62, 215, 140, 169, 57, 201, 110, 238, 190, 252, 252, 14, 62, 230, 138, 78, 61, 183, 153, 36, 190, 178, 83, 8, 62, 35, 11, 3, 61, 50, 72, 230, 62, 211, 182, 255, 61, 203, 89, 208, 190, 42, 219, 88, 62, 163, 83, 202, 61, 105, 75, 215, 62, 103, 22, 76, 190, 87, 162, 32, 62, 27, 250, 192, 189, 44, 233, 83, 62, 172, 140, 56, 191, 239, 99, 150, 191, 163, 65, 152, 190, 170, 179, 204, 187, 203, 254, 74, 62, 3, 49, 249, 61, 231, 134, 96, 61, 149, 74, 153, 62, 149, 41, 69, 190, 56, 208, 141, 62, 182, 187, 138, 61, 215, 217, 103, 62, 95, 12, 231, 62, 223, 206, 56, 63, 153, 113, 94, 190, 69, 135, 234, 189, 140, 147, 83, 62, 18, 234, 56, 190, 202, 212, 198, 189, 7, 86, 169, 61, 182, 89, 202, 189, 205, 109, 207, 190, 98, 128, 229, 190, 138, 66, 132, 190, 199, 118, 121, 62, 221, 140, 20, 190, 82, 196, 135, 62, 184, 162, 137, 190, 46, 77, 219, 61, 150, 59, 135, 61, 31, 20, 116, 188, 134, 63, 223, 190, 81, 9, 166, 190, 234, 37, 240, 60, 175, 13, 14, 62, 39, 26, 61, 188, 161, 19, 232, 190, 55, 199, 20, 190, 209, 226, 39, 62, 192, 90, 39, 189, 173, 144, 126, 60, 26, 89, 79, 61, 151, 122, 106, 190, 104, 102, 252, 188, 158, 210, 1, 190, 106, 233, 201, 190, 196, 247, 135, 188, 219, 186, 79, 189, 94, 135, 62, 191, 185, 50, 194, 61, 234, 192, 6, 62, 101, 162, 33, 191, 125, 104, 137, 62, 212, 250, 143, 61, 172, 241, 112, 62, 9, 223, 218, 61, 77, 35, 252, 61, 118, 149, 17, 62, 179, 118, 121, 62, 3, 212, 79, 62, 120, 159, 136, 189, 114, 79, 78, 61, 204, 34, 221, 189, 221, 193, 85, 190, 11, 44, 163, 62, 59, 57, 205, 189, 87, 246, 163, 61, 143, 239, 20, 62, 35, 220, 179, 61, 148, 81, 133, 189, 217, 67, 217, 189, 43, 224, 35, 189, 184, 171, 24, 62, 231, 164, 53, 62, 224, 235, 55, 190, 180, 106, 97, 61, 42, 126, 38, 190, 169, 36, 31, 191, 236, 187, 7, 190, 58, 184, 107, 62, 246, 136, 207, 189, 173, 233, 51, 189, 88, 139, 148, 61, 86, 3, 9, 62, 18, 225, 24, 62, 22, 144, 247, 60, 223, 12, 78, 190, 172, 147, 27, 190, 189, 178, 133, 190, 201, 251, 46, 61, 234, 65, 97, 61, 101, 19, 202, 190, 139, 36, 27, 62, 123, 155, 114, 61, 25, 136, 128, 188, 255, 112, 141, 190, 201, 22, 44, 61, 228, 24, 36, 62, 94, 111, 103, 62, 82, 218, 76, 59, 217, 243, 180, 190, 147, 249, 124, 189, 97, 145, 152, 61, 205, 84, 69, 62, 102, 184, 174, 56, 10, 116, 141, 61, 27, 91, 79, 189, 252, 23, 218, 187, 67, 80, 50, 190, 96, 209, 138, 190, 32, 67, 45, 60, 46, 230, 60, 61, 218, 74, 21, 191, 31, 119, 225, 60, 64, 8, 134, 61, 187, 26, 9, 191, 80, 229, 67, 62, 14, 248, 41, 62, 52, 40, 170, 62, 136, 40, 6, 61, 63, 192, 111, 189, 39, 103, 193, 60, 149, 249, 28, 62, 71, 218, 26, 62, 124, 104, 64, 189, 222, 182, 178, 61, 216, 204, 3, 189, 179, 117, 202, 188, 227, 13, 164, 189, 233, 178, 30, 190, 97, 202, 22, 190, 219, 185, 3, 190, 65, 70, 171, 189, 124, 35, 249, 189, 123, 121, 2, 62, 32, 118, 193, 61, 234, 67, 70, 190, 202, 61, 58, 190, 172, 145, 17, 189, 52, 141, 233, 56, 179, 16, 5, 190, 51, 249, 243, 60, 130, 189, 148, 61, 22, 74, 255, 189, 216, 50, 102, 189, 56, 72, 243, 189, 179, 211, 178, 61, 219, 38, 41, 190, 165, 113, 149, 189, 161, 117, 67, 61, 178, 132, 176, 59, 218, 188, 118, 189, 247, 221, 53, 62, 145, 250, 219, 60, 31, 234, 151, 189, 191, 59, 219, 190, 113, 226, 23, 62, 17, 5, 3, 62, 95, 133, 19, 190, 48, 22, 240, 190, 34, 89, 140, 190, 182, 125, 111, 190, 241, 126, 186, 189, 128, 198, 38, 62, 161, 32, 49, 61, 192, 110, 181, 61, 149, 48, 158, 188, 144, 174, 19, 61, 165, 7, 167, 61, 136, 231, 104, 62, 158, 241, 51, 187, 131, 111, 1, 190, 217, 138, 71, 190, 49, 254, 173, 190, 21, 191, 152, 61, 33, 104, 83, 62, 161, 69, 77, 191, 105, 117, 219, 189, 196, 145, 226, 61, 206, 110, 71, 191, 110, 175, 17, 190, 36, 165, 251, 61, 21, 181, 186, 61, 99, 37, 224, 60, 101, 52, 96, 62, 58, 165, 22, 62, 223, 183, 147, 62, 209, 12, 128, 190, 142, 179, 69, 190, 160, 159, 230, 189, 113, 107, 161, 190, 167, 52, 192, 190, 126, 142, 146, 190, 60, 135, 229, 189, 153, 118, 174, 61, 54, 8, 103, 186, 66, 229, 13, 191, 94, 46, 19, 61, 85, 31, 12, 62, 52, 217, 21, 190, 71, 255, 70, 189, 160, 131, 83, 190, 111, 200, 19, 190, 130, 145, 21, 189, 89, 63, 132, 190, 149, 179, 66, 191, 82, 141, 1, 62, 143, 208, 206, 60, 212, 75, 244, 190, 115, 130, 236, 189, 54, 80, 241, 60, 0, 215, 1, 191, 147, 245, 173, 62, 153, 7, 128, 62, 206, 78, 55, 62, 1, 85, 80, 189, 182, 114, 151, 62, 142, 155, 178, 189, 97, 2, 187, 62, 118, 68, 7, 62, 15, 151, 235, 61, 168, 253, 19, 188, 38, 45, 101, 62, 200, 74, 9, 187, 37, 162, 121, 61, 85, 75, 13, 190, 143, 177, 159, 62, 213, 11, 170, 189, 35, 14, 208, 62, 24, 150, 167, 190, 196, 86, 51, 61, 21, 28, 13, 62, 76, 150, 17, 62, 209, 153, 206, 61, 68, 76, 139, 61, 214, 45, 232, 61, 177, 144, 203, 61, 4, 230, 82, 62, 243, 190, 178, 190, 197, 236, 92, 62, 64, 102, 133, 62, 150, 83, 139, 190, 149, 16, 40, 62, 192, 39, 7, 62, 14, 214, 170, 61, 1, 101, 59, 190, 144, 102, 141, 189, 1, 215, 202, 190, 236, 120, 61, 62, 49, 233, 81, 62, 246, 36, 153, 62, 39, 89, 197, 190, 253, 200, 128, 187, 23, 206, 1, 191, 208, 149, 213, 62, 43, 98, 74, 190, 9, 63, 78, 62, 132, 62, 148, 62, 219, 81, 6, 62, 120, 97, 77, 191, 29, 207, 20, 62, 137, 80, 132, 191, 59, 5, 224, 61, 40, 119, 157, 189, 235, 98, 13, 62, 103, 137, 146, 62, 105, 209, 133, 190, 253, 36, 132, 190, 41, 156, 82, 190, 220, 108, 0, 190, 232, 185, 130, 190, 176, 49, 127, 61, 12, 76, 31, 61, 63, 184, 38, 190, 223, 184, 49, 62, 101, 211, 72, 62, 191, 86, 18, 62, 81, 130, 177, 188, 99, 44, 174, 190, 102, 210, 218, 189, 133, 18, 235, 189, 93, 173, 179, 60, 134, 149, 98, 191, 212, 219, 223, 60, 44, 106, 167, 188, 253, 83, 77, 62, 151, 243, 0, 188, 96, 124, 109, 62, 159, 6, 107, 191, 170, 107, 10, 191, 6, 20, 27, 191, 219, 212, 121, 189, 133, 13, 185, 61, 246, 201, 221, 61, 65, 185, 213, 61, 90, 217, 24, 62, 86, 11, 5, 191, 73, 34, 215, 189, 120, 172, 204, 189, 86, 178, 155, 62, 201, 103, 136, 188, 47, 199, 181, 191, 230, 51, 140, 62, 28, 176, 215, 59, 92, 139, 2, 191, 188, 48, 111, 190, 45, 6, 93, 62, 108, 71, 120, 190, 246, 234, 121, 190, 94, 28, 238, 61, 204, 252, 54, 62, 101, 232, 55, 62, 127, 232, 125, 62, 186, 8, 150, 190, 128, 73, 136, 62, 237, 84, 237, 60, 197, 132, 138, 60, 136, 197, 240, 59, 172, 28, 105, 189, 142, 34, 154, 190, 138, 183, 121, 188, 174, 177, 42, 62, 61, 123, 35, 61, 45, 62, 126, 190, 178, 146, 151, 189, 48, 139, 134, 60, 243, 55, 111, 190, 159, 47, 208, 61, 65, 83, 101, 62, 28, 196, 6, 62, 143, 127, 69, 62, 53, 190, 95, 190, 117, 181, 187, 190, 135, 100, 221, 190, 227, 88, 121, 58, 47, 231, 164, 189, 206, 118, 198, 189, 95, 132, 131, 190, 209, 40, 21, 61, 206, 206, 3, 62, 185, 146, 197, 61, 89, 33, 135, 189, 139, 101, 168, 60, 206, 71, 235, 189, 167, 108, 55, 61, 224, 39, 17, 190, 24, 37, 190, 62, 223, 6, 172, 61, 124, 53, 25, 190, 55, 103, 106, 62, 189, 9, 51, 190, 60, 20, 22, 190, 215, 185, 79, 61, 120, 228, 5, 62, 164, 173, 158, 189, 19, 108, 173, 187, 94, 104, 30, 190, 47, 177, 27, 62, 76, 104, 169, 60, 59, 80, 222, 189, 90, 148, 200, 60, 40, 172, 26, 62, 88, 82, 216, 189, 185, 250, 17, 62, 230, 12, 43, 190, 48, 242, 202, 190, 55, 194, 21, 62, 218, 92, 100, 61, 219, 24, 124, 188, 102, 6, 204, 59, 52, 83, 155, 62, 183, 164, 7, 62, 77, 135, 37, 62, 48, 150, 76, 62, 173, 198, 21, 62, 8, 161, 173, 189, 69, 35, 95, 189, 150, 178, 150, 61, 148, 235, 107, 62, 67, 251, 175, 60, 158, 149, 73, 60, 216, 160, 231, 61, 191, 155, 23, 190, 37, 2, 138, 61, 98, 164, 42, 62, 42, 168, 154, 60, 75, 33, 219, 189, 170, 32, 218, 188, 44, 242, 248, 60, 149, 177, 188, 61, 181, 185, 129, 62, 237, 229, 231, 61, 242, 230, 209, 189, 198, 219, 237, 189, 250, 8, 135, 61, 178, 238, 19, 62, 240, 224, 187, 187, 45, 6, 159, 62, 66, 37, 62, 62, 48, 44, 209, 61, 227, 81, 176, 61, 114, 104, 233, 61, 217, 216, 238, 61, 248, 221, 140, 62, 75, 150, 135, 61, 108, 33, 48, 188, 221, 73, 22, 61, 55, 43, 158, 62, 20, 3, 65, 189, 191, 5, 37, 190, 249, 22, 199, 189, 164, 46, 5, 191, 151, 106, 18, 62, 51, 173, 147, 61, 227, 236, 64, 62, 163, 87, 32, 191, 20, 200, 47, 62, 186, 12, 2, 63, 73, 10, 86, 62, 60, 226, 177, 190, 49, 107, 9, 190, 119, 202, 223, 190, 213, 159, 106, 190, 63, 224, 113, 190, 171, 147, 128, 62, 57, 106, 210, 61, 158, 41, 48, 188, 245, 44, 186, 189, 220, 153, 146, 190, 18, 141, 83, 190, 213, 174, 32, 62, 156, 59, 166, 62, 63, 134, 13, 189, 149, 127, 254, 188, 72, 118, 155, 61, 240, 164, 142, 62, 17, 104, 109, 62, 211, 78, 22, 60, 177, 235, 86, 61, 245, 133, 157, 190, 136, 94, 153, 190, 226, 9, 131, 62, 71, 210, 216, 189, 104, 223, 141, 188, 48, 117, 19, 189, 63, 209, 236, 61, 127, 244, 146, 62, 245, 69, 180, 190, 140, 160, 69, 62, 183, 60, 181, 62, 240, 237, 244, 61, 84, 53, 236, 189, 10, 12, 198, 188, 135, 182, 251, 188, 131, 97, 47, 62, 87, 213, 1, 62, 243, 241, 42, 62, 110, 123, 177, 60, 144, 75, 132, 60, 28, 79, 78, 189, 228, 144, 131, 190, 81, 100, 23, 190, 135, 31, 98, 62, 25, 116, 11, 62, 174, 15, 183, 190, 40, 25, 83, 189, 39, 67, 104, 188, 122, 158, 216, 190, 4, 245, 255, 189, 208, 251, 64, 62, 110, 57, 189, 62, 59, 38, 149, 61, 148, 79, 150, 190, 92, 136, 52, 62, 197, 37, 175, 189, 200, 129, 135, 61, 215, 119, 12, 190, 95, 153, 16, 60, 76, 160, 138, 189, 208, 202, 150, 61, 19, 150, 25, 190, 253, 68, 172, 61, 88, 153, 206, 189, 183, 70, 51, 190, 88, 120, 2, 62, 47, 140, 118, 189, 100, 191, 31, 190, 106, 131, 4, 62, 36, 53, 220, 189, 13, 187, 6, 190, 84, 101, 5, 62, 113, 250, 4, 190, 247, 159, 128, 60, 28, 126, 172, 58, 161, 154, 51, 190, 188, 250, 223, 189, 37, 70, 200, 59, 168, 127, 82, 61, 57, 4, 144, 188, 219, 158, 197, 186, 124, 150, 65, 61, 63, 77, 229, 189, 2, 206, 11, 189, 252, 170, 23, 62, 229, 147, 238, 61, 245, 48, 162, 61, 83, 106, 179, 189, 133, 242, 12, 190, 57, 189, 137, 189, 128, 182, 228, 188, 250, 199, 139, 190, 55, 62, 117, 188, 255, 43, 152, 191, 243, 170, 134, 191, 206, 34, 230, 189, 251, 187, 16, 62, 121, 62, 14, 190, 154, 149, 162, 62, 235, 82, 141, 189, 207, 167, 156, 62, 54, 47, 242, 190, 31, 64, 126, 61, 130, 223, 60, 62, 27, 169, 20, 62, 150, 56, 227, 189, 237, 145, 141, 191, 62, 194, 44, 62, 172, 165, 93, 189, 141, 250, 77, 191, 19, 100, 96, 62, 191, 100, 116, 62, 201, 139, 141, 190, 88, 39, 122, 190, 4, 219, 41, 62, 153, 18, 236, 190, 31, 255, 183, 189, 145, 72, 230, 61, 243, 207, 69, 190, 37, 238, 182, 61, 24, 182, 51, 191, 136, 3, 149, 62, 85, 152, 252, 61, 86, 2, 95, 62, 146, 198, 49, 191, 32, 143, 204, 61, 17, 114, 41, 190, 202, 131, 87, 189, 39, 111, 196, 189, 121, 102, 162, 62, 250, 72, 197, 61, 197, 157, 188, 190, 36, 176, 6, 61, 120, 27, 26, 62, 71, 7, 210, 60, 22, 28, 34, 62, 60, 5, 152, 188, 195, 9, 17, 191, 32, 251, 70, 190, 202, 124, 242, 190, 57, 194, 1, 190, 191, 69, 26, 62, 108, 141, 43, 190, 83, 146, 189, 61, 16, 151, 48, 62, 133, 25, 68, 189, 108, 52, 51, 190, 176, 235, 74, 60, 139, 42, 163, 190, 211, 142, 27, 190, 145, 158, 91, 62, 1, 116, 237, 189, 157, 209, 157, 61, 27, 98, 91, 190, 234, 239, 90, 60, 184, 144, 126, 190, 38, 167, 189, 61, 94, 207, 136, 191, 75, 107, 21, 191, 2, 59, 241, 190, 169, 52, 164, 61, 91, 153, 177, 59, 135, 238, 125, 61, 225, 203, 79, 62, 35, 241, 141, 62, 193, 144, 29, 191, 17, 144, 196, 61, 197, 135, 26, 190, 148, 204, 235, 62, 11, 58, 176, 62, 63, 187, 187, 191, 229, 181, 112, 62, 70, 247, 18, 190, 149, 216, 55, 190, 24, 232, 244, 189, 148, 127, 136, 188, 201, 140, 9, 190, 201, 17, 171, 190, 199, 18, 12, 60, 224, 244, 1, 62, 229, 153, 32, 62, 3, 30, 214, 61, 89, 91, 151, 189, 27, 252, 223, 62, 171, 23, 11, 62, 71, 106, 6, 62, 182, 156, 198, 189, 46, 155, 61, 189, 96, 73, 19, 62, 116, 62, 160, 61, 194, 210, 178, 189, 205, 239, 208, 189, 176, 162, 169, 61, 96, 30, 197, 189, 108, 136, 157, 60, 103, 238, 154, 189, 56, 176, 77, 189, 24, 20, 10, 189, 112, 60, 43, 185, 195, 52, 94, 189, 133, 70, 23, 189, 24, 28, 32, 190, 31, 107, 136, 188, 252, 242, 16, 61, 61, 199, 12, 190, 229, 225, 143, 189, 101, 242, 54, 190, 189, 149, 4, 189, 139, 134, 179, 187, 249, 165, 35, 62, 126, 173, 182, 189, 155, 202, 55, 190, 140, 96, 237, 61, 249, 100, 251, 61, 240, 244, 195, 60, 97, 238, 62, 189, 195, 247, 136, 61, 22, 226, 148, 190, 134, 222, 6, 62, 129, 64, 157, 190, 160, 88, 88, 62, 88, 250, 8, 191, 145, 249, 17, 191, 176, 221, 70, 190, 239, 73, 86, 62, 226, 117, 82, 190, 179, 21, 97, 62, 71, 42, 56, 62, 172, 26, 123, 62, 244, 39, 12, 191, 151, 237, 209, 189, 186, 246, 175, 188, 11, 242, 42, 62, 247, 67, 86, 62, 246, 61, 155, 191, 5, 177, 18, 62, 243, 252, 132, 189, 53, 240, 43, 190, 228, 79, 134, 61, 9, 244, 18, 188, 47, 13, 99, 60, 159, 88, 117, 190, 188, 211, 67, 60, 104, 167, 251, 61, 176, 132, 205, 61, 144, 95, 78, 189, 202, 70, 234, 188, 69, 32, 40, 62, 140, 179, 172, 190, 154, 149, 15, 62, 131, 37, 34, 191, 64, 225, 35, 62, 22, 171, 137, 190, 36, 147, 145, 62, 119, 229, 5, 63, 106, 22, 87, 61, 74, 253, 171, 191, 243, 200, 145, 190, 134, 68, 166, 191, 166, 58, 211, 189, 163, 181, 50, 190, 142, 151, 156, 190, 169, 157, 29, 62, 28, 104, 28, 190, 234, 240, 90, 191, 13, 36, 235, 189, 158, 3, 239, 61, 225, 63, 229, 190, 247, 66, 37, 190, 67, 209, 7, 62, 210, 76, 207, 190, 64, 48, 178, 62, 252, 147, 166, 62, 91, 27, 186, 190, 55, 33, 241, 61, 70, 2, 248, 189, 188, 59, 137, 190, 212, 93, 36, 191, 38, 94, 63, 61, 29, 229, 72, 191, 132, 133, 65, 190, 132, 35, 52, 190, 224, 121, 122, 62, 43, 88, 209, 190, 78, 183, 128, 60, 146, 24, 195, 190, 211, 18, 12, 191, 8, 124, 76, 189, 5, 40, 166, 61, 120, 232, 53, 189, 216, 176, 137, 190, 180, 30, 144, 62, 229, 36, 32, 61, 72, 78, 57, 190, 175, 239, 73, 190, 15, 136, 163, 190, 169, 215, 181, 62, 135, 131, 212, 188, 23, 124, 83, 191, 252, 163, 146, 62, 190, 84, 23, 187, 50, 245, 203, 189, 197, 183, 128, 190, 123, 2, 140, 190, 251, 102, 86, 189, 138, 26, 12, 190, 175, 157, 131, 62, 201, 193, 125, 62, 132, 146, 230, 189, 20, 85, 181, 61, 186, 102, 154, 189, 252, 131, 162, 62, 235, 54, 176, 190, 165, 148, 19, 190, 31, 40, 1, 189, 59, 31, 178, 190, 214, 92, 192, 62, 181, 49, 155, 191, 168, 0, 11, 191, 236, 44, 141, 190, 92, 48, 195, 61, 255, 194, 229, 61, 199, 139, 207, 61, 175, 94, 28, 190, 76, 126, 194, 62, 252, 150, 203, 190, 142, 163, 38, 60, 235, 28, 225, 61, 208, 38, 7, 62, 158, 90, 37, 62, 248, 165, 188, 191, 102, 68, 244, 189, 205, 17, 121, 60, 178, 247, 33, 191, 127, 81, 169, 61, 134, 213, 133, 62, 125, 52, 170, 190, 193, 50, 214, 188, 107, 121, 124, 189, 232, 166, 70, 190, 126, 7, 208, 61, 221, 121, 232, 59, 105, 173, 76, 189, 184, 133, 249, 189, 94, 10, 148, 62, 253, 48, 224, 189, 77, 129, 54, 190, 248, 59, 85, 61, 238, 0, 175, 62, 55, 136, 62, 190, 148, 198, 192, 189, 204, 206, 37, 61, 20, 226, 69, 62, 139, 149, 149, 189, 59, 201, 27, 61, 230, 148, 82, 187, 32, 130, 135, 61, 245, 136, 103, 189, 4, 33, 253, 188, 97, 178, 219, 61, 78, 22, 231, 189, 176, 74, 150, 62, 213, 188, 173, 62, 108, 44, 130, 188, 226, 97, 49, 190, 86, 33, 179, 61, 92, 73, 45, 62, 231, 131, 64, 190, 94, 69, 82, 190, 218, 3, 140, 189, 218, 97, 121, 190, 192, 22, 173, 61, 141, 4, 145, 188, 103, 160, 173, 62, 12, 244, 33, 62, 212, 162, 129, 189, 20, 63, 96, 188, 141, 99, 182, 189, 19, 172, 205, 61, 112, 246, 16, 190, 114, 47, 94, 190, 22, 152, 103, 60, 112, 1, 72, 61, 178, 244, 180, 61, 175, 46, 213, 189, 22, 6, 141, 189, 37, 233, 186, 189, 189, 9, 189, 61, 20, 26, 205, 60, 231, 88, 131, 189, 55, 135, 189, 189, 175, 42, 187, 61, 58, 135, 78, 62, 111, 41, 96, 190, 23, 37, 219, 190, 236, 85, 18, 62, 35, 253, 81, 189, 186, 87, 214, 61, 203, 106, 18, 59, 70, 131, 13, 62, 28, 36, 117, 62, 166, 25, 71, 62, 67, 178, 24, 62, 52, 92, 41, 190, 86, 249, 34, 62, 75, 214, 24, 190, 81, 57, 195, 61, 49, 136, 153, 61, 4, 17, 197, 189, 251, 220, 141, 189, 172, 140, 246, 61, 116, 58, 232, 61, 56, 190, 42, 190, 40, 162, 32, 62, 156, 96, 113, 190, 48, 196, 28, 189, 9, 92, 176, 190, 87, 4, 103, 190, 26, 88, 98, 191, 74, 48, 177, 189, 158, 203, 180, 190, 220, 67, 144, 61, 223, 163, 142, 190, 116, 241, 59, 189, 38, 136, 12, 62, 146, 96, 251, 189, 188, 217, 69, 191, 149, 63, 141, 62, 232, 195, 130, 62, 115, 22, 29, 189, 61, 172, 147, 190, 247, 150, 105, 189, 192, 12, 168, 189, 144, 183, 234, 61, 113, 20, 132, 62, 36, 29, 115, 62, 129, 165, 135, 190, 220, 57, 217, 61, 79, 33, 1, 62, 149, 213, 161, 62, 95, 45, 31, 191, 89, 43, 158, 189, 47, 161, 251, 188, 180, 249, 142, 189, 28, 37, 30, 191, 64, 194, 191, 61, 87, 63, 189, 62, 244, 92, 164, 62, 232, 249, 158, 190, 36, 2, 250, 61, 214, 201, 103, 190, 71, 64, 141, 190, 131, 159, 81, 190, 125, 48, 78, 62, 251, 222, 16, 188, 93, 155, 244, 189, 169, 153, 137, 189, 236, 246, 128, 190, 224, 140, 98, 61, 88, 17, 30, 189, 107, 27, 116, 62, 84, 207, 199, 189, 45, 117, 164, 187, 236, 98, 138, 60, 130, 142, 26, 62, 11, 87, 60, 62, 0, 167, 47, 190, 36, 155, 115, 62, 86, 210, 99, 188, 192, 52, 221, 189, 111, 157, 117, 62, 39, 51, 157, 61, 88, 255, 2, 191, 65, 61, 52, 190, 93, 187, 142, 189, 218, 25, 81, 188, 243, 211, 38, 191, 66, 213, 29, 59, 121, 248, 162, 62, 77, 230, 143, 62, 145, 172, 199, 189, 242, 45, 187, 60, 72, 108, 239, 190, 80, 118, 44, 189, 123, 22, 51, 190, 52, 209, 165, 62, 241, 53, 220, 189, 163, 71, 139, 190, 123, 68, 205, 61, 243, 177, 159, 190, 136, 199, 176, 188, 227, 248, 63, 62, 65, 234, 131, 62, 98, 108, 79, 62, 135, 62, 118, 61, 114, 252, 29, 62, 215, 49, 111, 189, 62, 230, 105, 62, 251, 28, 100, 190, 149, 242, 141, 62, 251, 144, 158, 190, 214, 166, 153, 190, 158, 237, 8, 62, 35, 3, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 34, 134, 189, 229, 153, 113, 62, 172, 255, 40, 190, 165, 51, 139, 189, 149, 32, 231, 61, 113, 48, 152, 61, 103, 14, 72, 189, 161, 16, 27, 190, 20, 199, 153, 189, 249, 137, 179, 189, 186, 117, 35, 62, 248, 0, 240, 60, 37, 103, 16, 62, 119, 179, 24, 62, 143, 240, 184, 62, 19, 140, 242, 189, 133, 104, 134, 62, 211, 225, 19, 62, 24, 57, 229, 189, 240, 248, 42, 62, 46, 78, 178, 61, 127, 227, 39, 62, 37, 166, 49, 190, 0, 96, 202, 61, 72, 28, 74, 62, 79, 7, 93, 62, 76, 154, 140, 61, 19, 11, 52, 57, 168, 160, 83, 62, 247, 88, 80, 62, 212, 98, 123, 62, 204, 132, 226, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 13, 151, 63, 146, 87, 18, 63, 213, 188, 157, 190, 59, 201, 166, 62, 167, 136, 120, 190, 133, 199, 50, 61, 87, 42, 31, 190, 110, 225, 108, 61, 207, 102, 132, 188, 206, 124, 3, 190, 96, 176, 182, 190, 151, 93, 107, 191, 1, 33, 27, 63, 191, 60, 175, 60, 146, 237, 150, 61, 22, 81, 237, 61, 212, 165, 16, 191, 134, 70, 6, 190, 90, 38, 168, 188, 159, 0, 75, 63, 56, 102, 90, 190, 225, 2, 30, 63, 11, 107, 232, 189, 220, 136, 142, 62, 39, 25, 155, 191, 180, 76, 226, 62, 147, 155, 112, 63, 242, 87, 139, 189, 178, 5, 58, 61, 72, 40, 253, 61, 253, 219, 207, 190, 239, 109, 165, 190, 172, 184, 84, 62, 37, 225, 110, 61, 128, 252, 91, 62, 48, 54, 18, 62, 231, 70, 237, 190, 204, 131, 49, 190, 152, 160, 20, 190, 132, 185, 210, 60, 41, 82, 133, 190, 185, 159, 244, 190, 169, 36, 143, 189, 76, 5, 137, 62, 182, 9, 203, 61, 170, 151, 98, 190, 153, 177, 107, 190, 115, 234, 214, 60, 168, 170, 12, 62, 56, 77, 179, 189, 51, 79, 24, 189, 125, 35, 183, 61, 129, 57, 4, 59, 209, 34, 37, 62, 158, 34, 173, 60, 204, 151, 134, 62, 130, 215, 118, 61, 244, 56, 118, 190, 252, 124, 161, 189, 165, 4, 59, 62, 228, 214, 33, 190, 177, 157, 15, 191, 3, 171, 77, 61, 143, 106, 193, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 119, 204, 189, 99, 246, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {132, 13, 44, 63, 158, 62, 131, 63, 20, 172, 190, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {213, 153, 194, 191, 116, 21, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0093/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}