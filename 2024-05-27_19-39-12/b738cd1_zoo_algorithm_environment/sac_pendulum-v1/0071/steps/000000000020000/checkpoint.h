// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 65, 241, 62, 51, 246, 12, 191, 0, 201, 175, 190, 125, 2, 49, 62, 26, 102, 128, 191, 20, 131, 216, 62, 48, 103, 165, 190, 166, 125, 124, 190, 127, 120, 23, 190, 254, 151, 155, 189, 72, 34, 4, 63, 216, 26, 4, 191, 39, 92, 17, 190, 83, 54, 171, 63, 198, 27, 231, 62, 46, 215, 6, 190, 235, 19, 172, 189, 3, 167, 5, 63, 32, 171, 37, 63, 225, 103, 167, 191, 143, 58, 147, 190, 85, 131, 41, 189, 47, 1, 85, 63, 108, 152, 178, 62, 171, 199, 76, 190, 234, 169, 164, 63, 56, 121, 151, 62, 87, 139, 200, 62, 80, 201, 163, 191, 89, 171, 161, 190, 113, 198, 189, 62, 139, 152, 154, 191, 230, 97, 148, 190, 179, 46, 156, 190, 41, 92, 97, 63, 114, 97, 135, 62, 86, 255, 21, 61, 188, 99, 124, 191, 6, 249, 5, 62, 228, 210, 85, 63, 107, 121, 85, 63, 141, 6, 6, 63, 193, 107, 26, 63, 215, 180, 21, 191, 182, 174, 133, 190, 79, 183, 25, 191, 53, 34, 133, 62, 207, 135, 95, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 82, 121, 101, 190, 35, 183, 85, 191, 111, 29, 82, 63, 246, 164, 241, 62, 141, 97, 125, 191, 116, 254, 134, 62, 213, 147, 179, 62, 72, 132, 119, 63, 57, 122, 188, 190, 190, 22, 72, 191, 222, 39, 253, 62, 139, 44, 197, 62, 220, 3, 128, 191, 28, 77, 151, 191, 114, 121, 120, 190, 183, 193, 25, 63, 119, 105, 0, 62, 238, 187, 13, 191, 205, 141, 101, 63, 177, 68, 62, 63, 150, 208, 234, 62, 117, 65, 114, 186, 30, 189, 66, 63, 89, 57, 184, 62, 175, 154, 39, 63, 180, 245, 147, 63, 135, 105, 78, 62, 230, 13, 96, 191, 245, 139, 52, 63, 98, 80, 127, 189, 157, 226, 128, 63, 155, 109, 162, 63, 237, 156, 186, 62, 5, 97, 115, 191, 205, 195, 30, 63, 104, 238, 109, 61, 133, 159, 140, 190, 157, 93, 121, 190, 69, 183, 37, 62, 208, 6, 11, 63, 162, 92, 253, 189, 169, 230, 190, 62, 7, 2, 15, 191, 51, 223, 34, 191, 68, 2, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 146, 145, 191, 243, 129, 66, 190, 193, 205, 196, 62, 116, 44, 138, 62, 217, 190, 87, 190, 54, 144, 255, 190, 136, 96, 164, 62, 171, 250, 232, 61, 79, 174, 203, 62, 38, 49, 122, 187, 100, 142, 216, 62, 221, 148, 171, 62, 115, 107, 136, 61, 224, 230, 30, 191, 163, 170, 83, 191, 27, 235, 13, 191, 242, 123, 12, 191, 0, 113, 18, 62, 230, 87, 255, 62, 73, 253, 93, 62, 226, 160, 221, 189, 227, 6, 176, 62, 126, 130, 167, 62, 197, 248, 240, 190, 85, 108, 76, 61, 160, 76, 99, 61, 146, 141, 172, 190, 242, 229, 233, 190, 58, 115, 222, 62, 57, 65, 235, 190, 174, 60, 116, 190, 155, 38, 186, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 239, 22, 62, 243, 157, 142, 62, 5, 189, 113, 62, 149, 107, 152, 62, 137, 165, 174, 191, 164, 173, 49, 188, 191, 9, 202, 189, 229, 87, 206, 190, 47, 72, 130, 61, 248, 5, 234, 190, 218, 20, 28, 62, 187, 36, 20, 59, 189, 187, 107, 62, 93, 88, 11, 62, 187, 84, 134, 191, 56, 202, 231, 61, 242, 82, 197, 188, 108, 234, 104, 190, 128, 25, 2, 190, 250, 129, 91, 61, 162, 102, 204, 61, 156, 39, 168, 62, 95, 127, 1, 190, 211, 122, 91, 190, 77, 221, 102, 191, 174, 124, 13, 63, 64, 37, 15, 191, 139, 140, 6, 190, 130, 162, 224, 61, 172, 51, 249, 62, 201, 138, 167, 61, 197, 202, 159, 62, 4, 157, 33, 191, 150, 143, 152, 62, 206, 229, 148, 190, 7, 2, 143, 62, 163, 38, 180, 189, 208, 140, 56, 61, 14, 147, 149, 190, 184, 185, 136, 189, 180, 99, 84, 190, 250, 40, 221, 190, 85, 174, 27, 190, 185, 43, 92, 190, 84, 74, 136, 189, 223, 227, 137, 62, 83, 237, 179, 191, 241, 178, 174, 188, 121, 196, 19, 189, 34, 184, 14, 190, 200, 10, 34, 189, 45, 154, 113, 62, 21, 23, 76, 190, 68, 142, 38, 190, 174, 187, 202, 61, 255, 198, 165, 62, 74, 68, 24, 62, 222, 15, 25, 62, 18, 1, 245, 190, 25, 224, 255, 62, 170, 147, 169, 190, 206, 174, 246, 61, 144, 237, 4, 62, 101, 1, 85, 62, 111, 130, 205, 189, 249, 124, 47, 60, 98, 48, 141, 59, 29, 80, 222, 60, 50, 254, 4, 191, 69, 248, 152, 189, 244, 215, 58, 59, 177, 170, 69, 190, 130, 184, 12, 62, 90, 95, 160, 190, 239, 171, 99, 62, 102, 127, 71, 60, 187, 51, 184, 189, 185, 20, 57, 62, 165, 150, 238, 189, 81, 123, 31, 190, 193, 52, 12, 190, 132, 160, 58, 190, 50, 7, 163, 61, 81, 218, 75, 60, 34, 41, 195, 188, 197, 174, 184, 62, 30, 221, 5, 62, 59, 212, 83, 62, 211, 16, 107, 189, 91, 51, 155, 62, 189, 34, 110, 190, 77, 69, 118, 62, 58, 177, 86, 190, 73, 215, 85, 62, 237, 251, 74, 61, 10, 184, 191, 189, 201, 192, 198, 190, 2, 246, 181, 62, 128, 47, 221, 189, 32, 199, 249, 190, 88, 94, 227, 189, 13, 3, 47, 190, 196, 217, 224, 61, 143, 254, 8, 191, 204, 123, 165, 190, 42, 148, 218, 186, 233, 227, 72, 62, 206, 114, 100, 190, 246, 27, 231, 61, 96, 180, 222, 190, 73, 217, 55, 190, 0, 131, 42, 62, 136, 14, 151, 189, 81, 250, 207, 189, 234, 227, 151, 62, 170, 244, 203, 189, 23, 191, 34, 62, 119, 64, 147, 189, 71, 132, 168, 59, 116, 179, 233, 190, 15, 76, 152, 190, 245, 15, 22, 190, 48, 16, 46, 62, 120, 150, 168, 190, 47, 134, 91, 190, 23, 203, 118, 61, 225, 158, 159, 61, 13, 250, 157, 190, 21, 127, 163, 189, 196, 241, 72, 62, 152, 71, 163, 62, 234, 187, 102, 60, 125, 63, 180, 189, 71, 77, 70, 189, 217, 145, 10, 62, 155, 29, 169, 61, 174, 214, 101, 62, 241, 16, 133, 62, 77, 24, 80, 62, 174, 134, 157, 189, 188, 122, 7, 62, 77, 251, 132, 190, 218, 179, 92, 190, 217, 220, 7, 61, 78, 156, 129, 188, 136, 144, 117, 189, 197, 143, 114, 62, 239, 20, 230, 62, 73, 197, 134, 190, 118, 241, 0, 188, 229, 35, 132, 62, 100, 1, 205, 189, 89, 14, 166, 190, 21, 162, 41, 62, 70, 46, 179, 62, 247, 78, 166, 190, 140, 41, 176, 62, 237, 237, 146, 189, 106, 124, 126, 61, 81, 80, 49, 190, 149, 153, 34, 61, 204, 231, 34, 189, 95, 49, 98, 62, 31, 25, 146, 188, 52, 25, 127, 190, 145, 110, 80, 190, 248, 183, 157, 190, 158, 195, 76, 189, 78, 105, 112, 189, 196, 13, 50, 191, 25, 54, 237, 60, 104, 31, 94, 190, 221, 158, 97, 61, 199, 207, 111, 62, 205, 192, 66, 191, 35, 51, 60, 189, 152, 26, 17, 62, 22, 151, 158, 62, 243, 60, 206, 62, 29, 93, 207, 62, 58, 218, 100, 61, 55, 8, 50, 190, 88, 211, 103, 189, 85, 113, 42, 62, 159, 160, 108, 62, 217, 13, 132, 62, 172, 218, 131, 190, 187, 238, 158, 61, 171, 27, 201, 190, 139, 55, 53, 62, 57, 125, 178, 61, 26, 178, 91, 190, 10, 174, 69, 190, 65, 103, 187, 190, 218, 119, 65, 189, 71, 26, 147, 189, 5, 214, 118, 61, 102, 183, 42, 191, 234, 8, 166, 190, 252, 114, 73, 61, 59, 88, 224, 62, 48, 73, 219, 190, 180, 159, 148, 61, 61, 234, 77, 62, 107, 153, 5, 62, 108, 195, 130, 190, 24, 183, 245, 190, 162, 43, 2, 191, 195, 217, 104, 188, 20, 111, 180, 190, 91, 205, 251, 189, 176, 79, 12, 63, 74, 15, 204, 61, 49, 110, 49, 190, 128, 59, 145, 190, 170, 107, 140, 190, 36, 47, 142, 61, 7, 192, 248, 61, 133, 212, 188, 62, 178, 136, 103, 190, 134, 246, 145, 62, 180, 91, 16, 191, 7, 233, 166, 190, 84, 165, 21, 191, 63, 10, 138, 189, 177, 243, 129, 190, 105, 159, 33, 62, 102, 14, 203, 187, 11, 220, 158, 61, 188, 168, 203, 189, 150, 16, 126, 61, 27, 40, 53, 62, 37, 218, 16, 62, 216, 62, 188, 62, 203, 3, 78, 62, 172, 110, 31, 62, 225, 103, 163, 61, 76, 54, 71, 189, 163, 146, 26, 190, 236, 116, 106, 62, 141, 195, 44, 62, 177, 187, 70, 62, 162, 112, 147, 62, 18, 153, 0, 190, 172, 13, 175, 187, 84, 5, 128, 190, 13, 224, 31, 59, 138, 225, 48, 190, 32, 177, 13, 189, 60, 4, 130, 189, 164, 253, 205, 61, 18, 55, 22, 190, 113, 7, 142, 62, 199, 143, 114, 190, 141, 255, 82, 189, 52, 61, 180, 61, 79, 78, 171, 189, 216, 140, 216, 190, 165, 118, 33, 190, 236, 17, 250, 189, 195, 65, 142, 61, 151, 60, 160, 190, 77, 221, 123, 62, 236, 179, 158, 62, 27, 154, 24, 190, 30, 255, 144, 62, 128, 219, 230, 188, 125, 189, 46, 62, 121, 163, 57, 190, 229, 125, 183, 190, 73, 145, 145, 61, 242, 216, 31, 62, 181, 148, 115, 189, 129, 224, 213, 62, 17, 65, 217, 61, 161, 23, 107, 190, 18, 195, 174, 62, 26, 215, 3, 189, 173, 248, 148, 62, 141, 161, 21, 191, 108, 102, 120, 62, 126, 135, 107, 190, 197, 18, 192, 190, 242, 4, 35, 191, 19, 13, 49, 189, 149, 138, 78, 62, 178, 71, 59, 190, 72, 100, 147, 190, 135, 119, 187, 188, 93, 237, 43, 190, 125, 45, 80, 190, 208, 16, 139, 188, 87, 63, 44, 190, 198, 131, 249, 61, 147, 47, 63, 190, 145, 222, 69, 190, 232, 108, 70, 190, 219, 56, 53, 190, 133, 98, 73, 188, 178, 212, 57, 190, 168, 237, 219, 189, 121, 116, 177, 189, 202, 148, 201, 188, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 137, 197, 250, 59, 174, 48, 124, 61, 82, 10, 14, 190, 118, 30, 114, 188, 48, 76, 2, 190, 4, 227, 204, 189, 83, 154, 170, 61, 79, 214, 27, 190, 113, 64, 133, 61, 241, 236, 137, 61, 153, 213, 201, 60, 52, 209, 70, 189, 206, 25, 0, 190, 204, 5, 104, 185, 159, 177, 7, 190, 43, 198, 68, 189, 214, 52, 82, 62, 176, 119, 82, 190, 85, 236, 132, 188, 218, 102, 11, 191, 172, 192, 73, 190, 166, 130, 18, 62, 17, 95, 144, 62, 36, 241, 131, 190, 4, 191, 118, 190, 144, 219, 56, 61, 177, 228, 158, 189, 116, 232, 21, 189, 43, 121, 221, 189, 90, 119, 173, 190, 18, 194, 17, 190, 136, 97, 179, 62, 165, 92, 144, 189, 242, 148, 123, 190, 227, 10, 14, 62, 222, 153, 140, 62, 9, 103, 45, 191, 113, 12, 229, 189, 32, 247, 26, 190, 88, 16, 140, 188, 82, 185, 68, 62, 94, 245, 133, 188, 104, 172, 127, 62, 242, 148, 126, 62, 131, 74, 1, 191, 47, 218, 142, 62, 9, 227, 246, 189, 88, 237, 190, 61, 90, 43, 83, 190, 229, 118, 3, 62, 40, 29, 14, 190, 168, 86, 129, 62, 216, 131, 141, 190, 60, 155, 195, 61, 83, 102, 253, 189, 155, 234, 16, 191, 218, 14, 216, 190, 116, 155, 37, 190, 253, 162, 52, 190, 239, 120, 9, 63, 235, 8, 62, 191, 195, 156, 36, 190, 86, 6, 253, 188, 75, 151, 83, 190, 6, 217, 192, 61, 216, 114, 60, 62, 93, 113, 147, 59, 146, 197, 67, 190, 43, 117, 50, 189, 245, 198, 144, 62, 251, 107, 164, 61, 1, 227, 154, 62, 12, 205, 4, 187, 14, 121, 255, 62, 55, 56, 191, 190, 31, 102, 99, 60, 154, 196, 107, 62, 47, 154, 19, 62, 14, 17, 50, 190, 43, 29, 105, 59, 150, 8, 89, 62, 236, 193, 0, 190, 147, 221, 141, 189, 13, 5, 143, 61, 216, 51, 82, 62, 110, 89, 239, 185, 54, 119, 0, 190, 138, 46, 166, 62, 171, 106, 7, 62, 106, 142, 163, 190, 142, 101, 123, 62, 86, 178, 10, 190, 154, 143, 55, 190, 21, 229, 182, 188, 158, 193, 246, 60, 47, 28, 138, 62, 233, 21, 120, 62, 198, 240, 175, 188, 236, 46, 162, 61, 120, 119, 76, 189, 15, 130, 20, 62, 117, 30, 15, 190, 67, 108, 90, 189, 33, 86, 132, 190, 176, 9, 12, 190, 124, 214, 43, 191, 41, 220, 42, 61, 213, 241, 92, 61, 198, 235, 43, 190, 60, 31, 35, 62, 145, 235, 177, 62, 203, 116, 69, 62, 147, 123, 11, 62, 113, 185, 38, 189, 5, 136, 134, 188, 223, 212, 174, 62, 241, 56, 55, 62, 36, 237, 41, 191, 58, 252, 175, 190, 240, 250, 248, 62, 14, 31, 252, 188, 4, 142, 209, 190, 153, 224, 189, 61, 210, 223, 100, 190, 148, 101, 207, 62, 218, 201, 36, 62, 57, 212, 240, 61, 26, 226, 81, 59, 53, 227, 22, 61, 35, 225, 88, 190, 77, 202, 8, 190, 31, 190, 197, 61, 66, 62, 37, 189, 219, 57, 205, 190, 117, 252, 109, 190, 206, 240, 145, 191, 88, 107, 230, 60, 6, 120, 163, 191, 254, 71, 65, 190, 205, 50, 8, 191, 79, 45, 217, 59, 64, 88, 3, 62, 191, 246, 91, 190, 63, 19, 177, 189, 146, 80, 71, 62, 10, 99, 79, 61, 30, 92, 147, 189, 227, 112, 119, 189, 173, 255, 104, 190, 96, 52, 212, 60, 106, 67, 163, 190, 36, 40, 98, 190, 113, 41, 211, 62, 65, 155, 214, 189, 65, 6, 233, 61, 215, 239, 7, 190, 230, 132, 30, 62, 30, 67, 185, 62, 214, 8, 9, 62, 242, 124, 179, 62, 182, 185, 244, 60, 246, 86, 0, 191, 67, 165, 194, 62, 3, 144, 223, 61, 65, 175, 61, 61, 217, 38, 137, 190, 189, 200, 138, 189, 48, 244, 196, 190, 226, 12, 12, 62, 247, 53, 131, 190, 114, 42, 38, 189, 3, 117, 43, 61, 123, 22, 3, 190, 184, 254, 200, 188, 239, 83, 204, 61, 125, 164, 166, 62, 127, 219, 90, 61, 167, 237, 247, 61, 152, 12, 207, 190, 166, 74, 141, 61, 0, 81, 172, 62, 169, 7, 165, 190, 167, 225, 114, 191, 209, 60, 122, 62, 239, 128, 179, 62, 149, 11, 119, 191, 30, 92, 105, 62, 100, 113, 10, 190, 170, 70, 100, 61, 110, 109, 69, 190, 28, 155, 236, 61, 117, 142, 131, 187, 116, 54, 206, 62, 189, 214, 26, 190, 242, 0, 121, 189, 214, 5, 249, 62, 106, 52, 145, 62, 138, 219, 204, 189, 45, 125, 218, 189, 89, 187, 160, 190, 179, 105, 172, 190, 17, 171, 234, 190, 217, 94, 15, 190, 129, 120, 70, 62, 24, 198, 222, 62, 104, 242, 145, 62, 250, 155, 133, 189, 29, 214, 76, 61, 54, 217, 45, 62, 193, 216, 45, 188, 181, 29, 182, 190, 20, 219, 142, 190, 197, 206, 9, 189, 33, 46, 230, 60, 214, 218, 48, 62, 214, 8, 106, 190, 12, 4, 58, 62, 227, 100, 63, 60, 214, 200, 149, 189, 7, 62, 69, 62, 4, 203, 196, 189, 138, 99, 189, 190, 231, 77, 196, 189, 186, 119, 20, 191, 127, 40, 147, 62, 6, 183, 151, 62, 54, 241, 242, 189, 139, 165, 226, 61, 231, 154, 17, 61, 169, 61, 141, 62, 172, 4, 130, 61, 184, 30, 164, 62, 28, 147, 18, 189, 150, 1, 141, 62, 39, 75, 149, 189, 102, 229, 179, 190, 97, 179, 12, 62, 51, 151, 145, 59, 103, 72, 190, 190, 175, 9, 238, 189, 225, 113, 199, 189, 208, 222, 23, 191, 87, 93, 6, 62, 137, 184, 84, 190, 253, 219, 3, 62, 226, 214, 142, 61, 194, 173, 170, 190, 37, 128, 196, 62, 45, 243, 40, 62, 114, 27, 134, 188, 151, 215, 33, 62, 132, 232, 189, 190, 92, 163, 81, 191, 212, 229, 53, 62, 240, 206, 11, 62, 65, 229, 114, 62, 153, 168, 171, 62, 3, 82, 114, 191, 152, 167, 221, 62, 82, 148, 204, 61, 147, 202, 36, 190, 8, 82, 41, 190, 35, 49, 90, 62, 14, 151, 187, 61, 116, 119, 173, 188, 96, 6, 105, 190, 222, 240, 125, 62, 37, 35, 66, 62, 170, 224, 153, 188, 94, 150, 30, 189, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 144, 248, 162, 62, 147, 202, 156, 61, 177, 196, 40, 190, 17, 10, 252, 61, 8, 89, 231, 61, 164, 164, 84, 62, 123, 192, 184, 190, 229, 135, 36, 61, 21, 146, 104, 62, 225, 234, 40, 62, 185, 227, 77, 191, 104, 227, 9, 62, 221, 29, 217, 190, 137, 104, 156, 62, 199, 156, 54, 63, 211, 128, 209, 189, 128, 203, 22, 62, 90, 204, 200, 189, 61, 204, 78, 190, 20, 146, 44, 62, 3, 95, 135, 190, 246, 52, 126, 191, 116, 32, 190, 62, 182, 5, 180, 62, 50, 222, 19, 62, 90, 229, 135, 62, 213, 21, 131, 61, 190, 11, 206, 62, 58, 95, 112, 61, 85, 98, 17, 191, 198, 243, 6, 62, 9, 189, 145, 189, 247, 252, 237, 189, 98, 36, 183, 191, 201, 241, 167, 60, 62, 200, 75, 61, 222, 237, 90, 191, 156, 236, 20, 188, 62, 0, 156, 61, 187, 64, 31, 189, 99, 208, 245, 61, 41, 115, 196, 190, 210, 246, 40, 190, 155, 164, 119, 62, 109, 150, 180, 189, 166, 83, 223, 61, 30, 11, 26, 191, 5, 70, 29, 191, 255, 19, 178, 189, 125, 84, 141, 191, 239, 60, 171, 189, 186, 121, 49, 62, 219, 38, 1, 63, 150, 154, 174, 189, 247, 100, 133, 61, 8, 221, 176, 62, 105, 100, 187, 189, 246, 186, 144, 61, 53, 160, 102, 189, 156, 67, 139, 62, 173, 11, 21, 62, 218, 40, 123, 189, 114, 66, 68, 189, 56, 175, 159, 189, 182, 11, 146, 62, 17, 7, 96, 62, 100, 134, 106, 61, 144, 133, 211, 190, 12, 62, 121, 190, 193, 131, 15, 62, 116, 21, 25, 62, 219, 1, 19, 190, 187, 239, 24, 191, 160, 1, 29, 62, 247, 38, 96, 62, 184, 107, 220, 191, 188, 94, 55, 62, 30, 100, 109, 190, 230, 110, 217, 61, 252, 123, 58, 60, 233, 202, 140, 60, 13, 144, 41, 61, 139, 35, 127, 62, 154, 23, 86, 190, 197, 214, 42, 61, 31, 158, 196, 189, 140, 46, 12, 190, 17, 58, 212, 189, 173, 17, 90, 190, 157, 95, 24, 190, 167, 15, 243, 189, 216, 232, 148, 190, 72, 45, 134, 61, 160, 47, 55, 190, 166, 8, 187, 62, 250, 153, 27, 190, 153, 2, 78, 190, 254, 116, 160, 60, 217, 121, 63, 62, 140, 12, 131, 61, 54, 203, 151, 62, 252, 108, 10, 189, 252, 10, 145, 61, 4, 119, 181, 61, 61, 197, 157, 60, 80, 119, 218, 62, 48, 85, 28, 62, 159, 105, 25, 190, 250, 52, 155, 189, 12, 197, 125, 190, 55, 191, 141, 190, 217, 158, 82, 189, 53, 152, 174, 189, 138, 237, 137, 62, 70, 209, 243, 60, 98, 78, 92, 189, 148, 67, 192, 56, 130, 31, 150, 188, 251, 112, 6, 61, 77, 67, 118, 190, 102, 74, 43, 61, 191, 20, 250, 186, 105, 108, 206, 188, 61, 219, 246, 189, 60, 25, 107, 62, 212, 133, 30, 190, 25, 54, 144, 61, 100, 53, 167, 189, 67, 73, 73, 190, 183, 13, 96, 190, 20, 113, 15, 61, 96, 11, 164, 62, 126, 45, 194, 190, 119, 117, 194, 61, 60, 49, 253, 188, 127, 16, 2, 190, 87, 95, 17, 62, 192, 222, 43, 62, 226, 87, 28, 190, 71, 232, 197, 61, 162, 98, 180, 190, 210, 212, 251, 189, 99, 251, 25, 191, 152, 185, 161, 190, 13, 86, 49, 62, 143, 226, 121, 191, 59, 93, 147, 190, 55, 17, 230, 60, 41, 186, 68, 63, 209, 249, 224, 62, 71, 93, 117, 189, 69, 27, 145, 61, 83, 180, 254, 189, 0, 87, 65, 190, 185, 138, 136, 189, 203, 79, 5, 191, 51, 39, 26, 62, 230, 85, 248, 189, 187, 239, 237, 61, 118, 239, 154, 62, 144, 255, 34, 62, 44, 188, 23, 190, 63, 182, 225, 189, 181, 226, 26, 189, 47, 93, 20, 62, 144, 218, 201, 61, 226, 54, 214, 189, 182, 119, 79, 189, 57, 179, 186, 61, 94, 193, 12, 62, 217, 75, 33, 190, 74, 212, 42, 190, 214, 26, 161, 61, 29, 16, 21, 61, 222, 155, 129, 61, 153, 236, 44, 189, 131, 64, 10, 62, 181, 18, 183, 58, 44, 53, 175, 189, 173, 160, 123, 60, 102, 247, 144, 61, 41, 208, 236, 61, 127, 141, 25, 189, 158, 92, 186, 188, 184, 106, 34, 190, 183, 207, 37, 190, 242, 130, 160, 61, 182, 50, 177, 189, 47, 191, 201, 188, 137, 225, 127, 59, 160, 65, 137, 189, 6, 113, 237, 189, 24, 86, 14, 191, 35, 62, 15, 188, 108, 22, 78, 62, 71, 9, 108, 62, 140, 243, 82, 189, 152, 119, 5, 191, 53, 33, 16, 191, 202, 153, 165, 61, 145, 34, 147, 62, 134, 161, 107, 190, 9, 132, 169, 190, 137, 87, 89, 62, 59, 102, 7, 191, 142, 237, 138, 190, 79, 227, 223, 190, 54, 25, 154, 191, 246, 248, 126, 61, 231, 4, 33, 190, 92, 127, 235, 190, 70, 5, 210, 61, 237, 100, 52, 191, 64, 254, 8, 63, 245, 246, 110, 190, 124, 228, 225, 189, 81, 131, 37, 190, 135, 75, 254, 60, 33, 161, 42, 61, 224, 236, 27, 62, 178, 9, 233, 62, 9, 147, 221, 62, 36, 157, 54, 189, 56, 175, 190, 62, 175, 212, 26, 62, 19, 200, 166, 190, 230, 128, 236, 60, 238, 16, 37, 62, 191, 80, 102, 191, 227, 251, 201, 189, 211, 46, 48, 61, 251, 97, 230, 188, 212, 230, 140, 62, 92, 192, 221, 188, 60, 226, 53, 189, 242, 200, 157, 62, 154, 147, 140, 61, 47, 214, 139, 62, 227, 240, 236, 189, 69, 69, 136, 191, 29, 68, 204, 61, 134, 227, 178, 191, 103, 64, 252, 190, 121, 151, 7, 189, 102, 53, 35, 63, 11, 8, 190, 62, 182, 123, 80, 187, 105, 32, 142, 62, 56, 207, 151, 190, 105, 140, 62, 189, 66, 21, 164, 188, 107, 193, 9, 190, 123, 53, 71, 62, 138, 3, 203, 190, 141, 255, 10, 62, 229, 197, 193, 61, 87, 65, 15, 190, 44, 181, 51, 190, 100, 151, 74, 190, 40, 223, 72, 190, 89, 168, 78, 62, 2, 145, 84, 60, 176, 199, 101, 62, 3, 110, 115, 60, 31, 111, 14, 61, 197, 200, 174, 62, 228, 50, 159, 62, 249, 150, 246, 61, 26, 6, 172, 61, 24, 38, 121, 190, 229, 7, 203, 61, 169, 138, 69, 62, 95, 244, 91, 189, 75, 140, 91, 62, 59, 239, 227, 189, 54, 76, 136, 190, 63, 32, 32, 62, 31, 208, 50, 190, 66, 2, 18, 59, 43, 240, 158, 190, 161, 44, 218, 61, 213, 170, 188, 189, 170, 151, 192, 190, 129, 10, 21, 191, 246, 14, 169, 61, 3, 18, 247, 188, 10, 132, 156, 190, 215, 21, 146, 190, 109, 118, 211, 189, 88, 121, 17, 62, 235, 210, 100, 190, 89, 150, 193, 61, 67, 238, 132, 190, 242, 35, 225, 188, 248, 80, 117, 190, 170, 26, 17, 62, 165, 176, 101, 190, 241, 94, 15, 191, 8, 159, 169, 190, 101, 38, 171, 190, 95, 44, 189, 189, 164, 49, 212, 62, 160, 30, 90, 190, 207, 191, 122, 190, 61, 138, 226, 189, 60, 127, 133, 188, 181, 179, 83, 62, 204, 97, 156, 61, 193, 12, 220, 60, 206, 89, 231, 190, 119, 76, 146, 61, 28, 105, 134, 62, 137, 78, 157, 61, 135, 24, 30, 62, 187, 227, 19, 191, 181, 193, 183, 62, 113, 115, 32, 191, 10, 37, 19, 62, 77, 240, 182, 62, 27, 173, 226, 190, 233, 39, 157, 62, 31, 101, 173, 62, 118, 14, 118, 59, 30, 190, 109, 189, 125, 88, 155, 191, 167, 206, 229, 190, 44, 185, 172, 60, 120, 214, 54, 191, 3, 30, 34, 191, 183, 97, 254, 62, 75, 126, 192, 62, 241, 14, 193, 190, 246, 154, 244, 62, 123, 5, 216, 190, 246, 105, 140, 61, 76, 94, 72, 190, 89, 233, 4, 190, 6, 119, 113, 62, 209, 18, 167, 61, 52, 211, 196, 190, 15, 60, 133, 189, 197, 236, 153, 62, 76, 79, 202, 61, 147, 111, 30, 191, 160, 80, 253, 190, 110, 101, 190, 191, 86, 167, 252, 189, 37, 53, 157, 191, 103, 249, 131, 190, 223, 111, 145, 59, 105, 225, 51, 62, 115, 239, 167, 62, 221, 34, 117, 190, 219, 10, 204, 190, 165, 187, 31, 61, 193, 138, 236, 61, 148, 44, 174, 191, 28, 162, 139, 190, 12, 233, 202, 189, 185, 101, 108, 61, 195, 164, 181, 62, 42, 160, 250, 190, 151, 80, 75, 190, 86, 203, 204, 61, 54, 80, 12, 189, 64, 121, 4, 63, 72, 223, 124, 191, 96, 19, 236, 189, 174, 147, 39, 62, 13, 154, 54, 191, 40, 124, 5, 190, 49, 107, 146, 62, 52, 205, 237, 62, 8, 245, 36, 63, 156, 177, 22, 190, 170, 48, 228, 62, 86, 65, 26, 190, 128, 126, 38, 62, 31, 133, 252, 190, 132, 182, 160, 62, 251, 133, 145, 61, 188, 95, 124, 62, 202, 118, 105, 61, 34, 33, 171, 62, 225, 166, 17, 190, 243, 112, 139, 191, 29, 110, 89, 62, 231, 130, 62, 62, 214, 16, 219, 191, 96, 21, 146, 61, 235, 130, 128, 61, 26, 44, 100, 190, 79, 153, 99, 62, 137, 206, 29, 190, 26, 121, 11, 190, 41, 216, 250, 61, 152, 211, 176, 189, 243, 2, 204, 62, 240, 26, 125, 191, 14, 0, 131, 191, 239, 169, 165, 189, 4, 84, 196, 191, 194, 244, 115, 190, 87, 120, 198, 61, 64, 88, 200, 62, 193, 103, 7, 63, 18, 96, 255, 189, 156, 118, 153, 62, 58, 69, 85, 190, 220, 16, 135, 62, 119, 70, 78, 190, 197, 14, 144, 62, 199, 162, 97, 61, 146, 69, 203, 188, 233, 69, 206, 62, 146, 222, 186, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 112, 52, 190, 70, 195, 67, 190, 120, 218, 243, 187, 112, 217, 159, 189, 144, 235, 166, 61, 232, 143, 40, 62, 185, 95, 202, 61, 67, 146, 103, 62, 34, 195, 46, 61, 215, 201, 84, 61, 188, 213, 163, 60, 230, 88, 121, 189, 190, 241, 180, 62, 104, 54, 75, 190, 174, 3, 30, 189, 238, 37, 135, 61, 140, 124, 204, 188, 223, 213, 34, 62, 232, 4, 226, 61, 187, 22, 94, 189, 130, 173, 12, 62, 204, 213, 36, 189, 217, 163, 148, 62, 148, 8, 125, 62, 172, 134, 118, 188, 208, 31, 83, 61, 252, 68, 89, 190, 83, 175, 160, 59, 159, 221, 12, 60, 204, 1, 148, 61, 23, 109, 17, 62, 98, 249, 79, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 153, 113, 191, 194, 157, 214, 190, 233, 202, 60, 190, 176, 191, 38, 191, 212, 70, 107, 62, 151, 108, 159, 190, 21, 80, 38, 191, 138, 216, 248, 61, 181, 143, 202, 62, 89, 149, 8, 62, 14, 81, 25, 63, 173, 99, 191, 190, 14, 221, 171, 62, 58, 226, 228, 190, 145, 223, 190, 190, 189, 132, 45, 63, 7, 208, 97, 190, 2, 153, 14, 63, 151, 17, 216, 60, 78, 162, 119, 63, 159, 218, 75, 190, 24, 137, 215, 62, 152, 172, 181, 61, 197, 214, 24, 191, 130, 231, 16, 188, 224, 156, 136, 63, 100, 170, 162, 190, 254, 206, 214, 62, 92, 104, 10, 191, 66, 25, 3, 191, 115, 170, 73, 191, 212, 247, 66, 191, 103, 141, 94, 62, 242, 255, 63, 190, 86, 71, 160, 190, 114, 5, 53, 190, 13, 44, 188, 190, 86, 112, 155, 190, 154, 61, 14, 62, 135, 43, 64, 190, 55, 46, 244, 61, 205, 106, 12, 62, 5, 114, 53, 190, 225, 108, 241, 61, 222, 118, 85, 190, 239, 183, 214, 62, 110, 145, 81, 62, 180, 38, 114, 62, 79, 57, 112, 190, 142, 30, 182, 61, 10, 242, 112, 60, 121, 0, 43, 62, 178, 234, 13, 191, 26, 51, 65, 63, 169, 149, 15, 190, 185, 148, 134, 59, 124, 135, 245, 189, 124, 243, 3, 62, 201, 203, 208, 61, 1, 198, 170, 62, 84, 187, 113, 190, 207, 59, 142, 190, 104, 43, 162, 62, 93, 147, 75, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 163, 45, 62, 14, 72, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 184, 182, 59, 245, 251, 9, 191, 171, 14, 124, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 127, 69, 63, 183, 175, 96, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}