// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 251, 250, 62, 40, 92, 25, 191, 29, 224, 172, 190, 13, 253, 52, 62, 121, 235, 125, 191, 90, 115, 212, 62, 125, 65, 172, 190, 196, 122, 133, 190, 152, 207, 7, 190, 253, 53, 144, 189, 203, 91, 2, 63, 82, 200, 3, 191, 188, 73, 114, 190, 67, 85, 174, 63, 200, 181, 213, 62, 119, 193, 96, 60, 243, 63, 212, 189, 72, 236, 5, 63, 167, 164, 37, 63, 20, 8, 167, 191, 161, 178, 140, 190, 130, 108, 76, 189, 0, 11, 90, 63, 215, 13, 157, 62, 121, 24, 84, 190, 249, 207, 166, 63, 56, 107, 149, 62, 32, 178, 196, 62, 242, 75, 165, 191, 39, 135, 164, 190, 147, 99, 191, 62, 38, 22, 153, 191, 25, 70, 144, 190, 82, 53, 155, 190, 17, 99, 109, 63, 4, 74, 104, 62, 139, 149, 61, 61, 29, 215, 113, 191, 212, 225, 16, 62, 211, 15, 85, 63, 166, 106, 78, 63, 231, 135, 2, 63, 233, 151, 19, 63, 205, 252, 29, 191, 26, 168, 133, 190, 72, 58, 23, 191, 185, 72, 85, 62, 240, 143, 92, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 53, 42, 125, 190, 23, 50, 114, 191, 22, 111, 66, 63, 221, 142, 250, 62, 20, 7, 127, 191, 76, 127, 97, 62, 49, 165, 176, 62, 78, 252, 123, 63, 81, 123, 199, 190, 19, 135, 103, 191, 112, 204, 238, 62, 248, 6, 215, 62, 237, 10, 111, 191, 78, 105, 157, 191, 187, 95, 89, 190, 110, 1, 25, 63, 215, 147, 7, 62, 75, 112, 15, 191, 155, 73, 103, 63, 71, 192, 61, 63, 165, 128, 221, 62, 35, 187, 26, 60, 251, 253, 48, 63, 59, 16, 204, 62, 99, 120, 42, 63, 251, 52, 146, 63, 206, 231, 57, 62, 155, 34, 87, 191, 176, 137, 64, 63, 250, 158, 94, 189, 65, 228, 129, 63, 213, 86, 162, 63, 203, 76, 170, 62, 165, 214, 80, 191, 251, 61, 32, 63, 228, 255, 135, 61, 145, 119, 85, 190, 186, 105, 207, 190, 89, 25, 44, 62, 27, 188, 15, 63, 63, 229, 27, 190, 58, 120, 194, 62, 65, 167, 26, 191, 169, 170, 34, 191, 174, 221, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 82, 141, 191, 121, 84, 59, 190, 179, 76, 193, 62, 214, 3, 146, 62, 15, 161, 41, 190, 73, 101, 249, 190, 62, 99, 166, 62, 213, 175, 2, 62, 16, 78, 204, 62, 240, 166, 103, 188, 39, 224, 218, 62, 255, 179, 179, 62, 217, 138, 163, 61, 25, 204, 31, 191, 98, 141, 81, 191, 144, 187, 4, 191, 242, 123, 12, 191, 150, 123, 162, 61, 113, 153, 4, 63, 247, 0, 96, 62, 9, 97, 93, 189, 35, 0, 162, 62, 17, 54, 172, 62, 161, 138, 237, 190, 121, 218, 119, 61, 62, 111, 113, 61, 9, 145, 178, 190, 92, 254, 230, 190, 251, 37, 2, 63, 146, 178, 230, 190, 165, 164, 94, 190, 250, 155, 184, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 133, 234, 61, 25, 201, 118, 62, 191, 121, 111, 62, 23, 73, 145, 62, 194, 179, 179, 191, 219, 111, 214, 188, 146, 21, 4, 190, 213, 193, 227, 190, 107, 15, 215, 59, 22, 8, 3, 191, 21, 250, 7, 62, 21, 188, 247, 188, 175, 112, 98, 62, 245, 65, 6, 62, 184, 236, 140, 191, 40, 220, 255, 61, 242, 82, 197, 188, 79, 201, 98, 190, 250, 119, 248, 189, 203, 251, 39, 61, 174, 230, 56, 62, 119, 112, 173, 62, 192, 85, 19, 190, 151, 143, 197, 189, 174, 68, 98, 191, 137, 213, 7, 63, 30, 16, 13, 191, 242, 54, 178, 189, 208, 89, 12, 62, 36, 43, 244, 62, 40, 206, 71, 61, 76, 183, 155, 62, 24, 10, 17, 191, 107, 195, 160, 62, 115, 116, 152, 190, 77, 129, 146, 62, 48, 95, 216, 189, 156, 190, 133, 61, 232, 63, 141, 190, 28, 196, 142, 189, 175, 10, 82, 190, 21, 142, 216, 190, 157, 184, 12, 190, 232, 20, 91, 190, 27, 162, 103, 189, 35, 91, 133, 62, 8, 170, 170, 191, 254, 33, 159, 187, 121, 196, 19, 189, 233, 6, 4, 190, 62, 148, 251, 188, 143, 142, 124, 62, 38, 177, 80, 190, 52, 146, 22, 190, 250, 38, 221, 61, 137, 227, 167, 62, 168, 64, 21, 62, 114, 138, 30, 62, 207, 173, 255, 190, 116, 37, 1, 63, 46, 174, 168, 190, 125, 80, 216, 61, 180, 80, 15, 62, 22, 13, 73, 62, 48, 8, 181, 189, 246, 94, 92, 61, 11, 131, 163, 60, 110, 226, 26, 61, 178, 81, 15, 191, 206, 47, 114, 59, 12, 98, 163, 186, 29, 192, 81, 190, 187, 221, 7, 62, 101, 54, 168, 190, 159, 216, 96, 62, 67, 229, 131, 60, 74, 100, 153, 189, 224, 254, 36, 62, 245, 190, 192, 189, 121, 255, 166, 189, 193, 52, 12, 190, 213, 208, 22, 190, 89, 52, 164, 61, 17, 85, 159, 60, 247, 169, 184, 60, 221, 3, 199, 62, 118, 126, 7, 62, 184, 54, 77, 62, 142, 1, 138, 189, 178, 132, 150, 62, 98, 184, 88, 190, 166, 24, 108, 62, 182, 32, 43, 190, 123, 113, 107, 62, 166, 45, 90, 61, 237, 176, 165, 189, 155, 179, 143, 190, 112, 169, 143, 62, 24, 52, 180, 189, 41, 113, 185, 190, 17, 173, 240, 189, 185, 63, 125, 190, 91, 252, 255, 61, 234, 117, 195, 190, 26, 16, 102, 190, 149, 36, 206, 60, 1, 215, 87, 62, 165, 85, 95, 190, 235, 247, 175, 61, 4, 174, 139, 190, 84, 84, 69, 189, 156, 39, 76, 60, 136, 14, 151, 189, 119, 7, 58, 190, 149, 226, 138, 62, 134, 81, 46, 190, 130, 157, 185, 189, 166, 252, 138, 189, 248, 193, 225, 60, 89, 106, 187, 190, 222, 156, 62, 190, 18, 249, 35, 190, 48, 16, 46, 62, 107, 103, 158, 190, 16, 7, 148, 190, 216, 42, 54, 190, 171, 57, 208, 61, 86, 57, 123, 190, 43, 189, 69, 189, 205, 177, 104, 62, 135, 112, 155, 62, 45, 206, 161, 185, 236, 171, 5, 190, 193, 36, 133, 188, 44, 83, 6, 62, 53, 220, 110, 61, 183, 77, 72, 62, 153, 195, 138, 62, 101, 117, 74, 62, 156, 97, 248, 189, 53, 160, 33, 62, 117, 212, 106, 190, 9, 233, 67, 190, 48, 11, 84, 61, 78, 156, 129, 188, 12, 24, 34, 189, 10, 10, 122, 62, 20, 90, 222, 62, 45, 103, 131, 190, 214, 248, 204, 188, 239, 115, 130, 62, 122, 207, 185, 189, 186, 60, 174, 190, 201, 123, 28, 62, 141, 31, 146, 62, 215, 221, 172, 190, 52, 36, 132, 62, 88, 25, 194, 60, 153, 107, 168, 61, 74, 185, 41, 190, 146, 170, 234, 61, 189, 90, 232, 188, 61, 10, 78, 62, 87, 251, 205, 188, 117, 196, 140, 190, 217, 10, 69, 190, 95, 163, 159, 190, 203, 30, 114, 189, 162, 79, 141, 189, 209, 64, 53, 191, 29, 218, 192, 60, 32, 129, 101, 190, 206, 235, 104, 61, 94, 124, 93, 62, 29, 55, 91, 191, 198, 247, 33, 189, 152, 26, 17, 62, 105, 206, 159, 62, 142, 162, 203, 62, 160, 65, 204, 62, 151, 101, 51, 61, 117, 37, 164, 189, 172, 91, 136, 189, 16, 176, 34, 62, 245, 70, 99, 62, 157, 76, 126, 62, 252, 134, 133, 190, 237, 103, 142, 61, 19, 166, 195, 190, 207, 168, 39, 62, 43, 233, 175, 61, 164, 64, 111, 190, 178, 203, 74, 190, 48, 59, 182, 190, 79, 104, 120, 189, 231, 132, 176, 189, 97, 57, 6, 62, 229, 24, 30, 191, 211, 84, 136, 190, 192, 67, 228, 61, 22, 186, 249, 62, 67, 136, 179, 190, 3, 114, 242, 61, 30, 159, 130, 62, 97, 30, 36, 62, 12, 204, 140, 190, 45, 60, 249, 190, 205, 54, 216, 190, 195, 217, 104, 188, 184, 38, 151, 190, 87, 228, 88, 190, 106, 148, 10, 63, 164, 205, 68, 62, 3, 186, 220, 189, 46, 163, 146, 190, 90, 199, 151, 190, 15, 110, 7, 62, 215, 6, 35, 62, 43, 128, 203, 62, 28, 71, 82, 190, 177, 185, 169, 62, 60, 92, 15, 191, 237, 142, 188, 190, 68, 123, 32, 191, 49, 40, 31, 189, 192, 214, 100, 190, 184, 75, 21, 62, 115, 232, 151, 188, 201, 87, 169, 61, 119, 85, 142, 189, 242, 219, 120, 61, 126, 67, 59, 62, 195, 23, 18, 62, 69, 39, 195, 62, 157, 100, 75, 62, 123, 48, 28, 62, 15, 11, 204, 61, 221, 179, 130, 187, 96, 55, 3, 190, 170, 43, 126, 62, 141, 195, 44, 62, 33, 55, 94, 62, 182, 16, 154, 62, 233, 57, 10, 190, 104, 51, 176, 59, 123, 249, 134, 190, 250, 164, 211, 58, 133, 43, 23, 190, 68, 231, 218, 188, 247, 59, 131, 189, 165, 90, 87, 61, 92, 123, 17, 190, 0, 147, 107, 62, 35, 49, 55, 190, 46, 151, 184, 188, 191, 156, 196, 61, 46, 246, 146, 188, 154, 205, 202, 190, 183, 118, 90, 190, 192, 67, 187, 189, 96, 143, 214, 60, 74, 0, 153, 190, 243, 33, 87, 62, 188, 172, 140, 62, 84, 148, 87, 190, 239, 167, 122, 62, 6, 62, 121, 189, 36, 35, 218, 61, 1, 105, 51, 190, 199, 10, 174, 190, 91, 201, 64, 61, 122, 206, 31, 62, 181, 148, 115, 189, 94, 228, 221, 62, 32, 195, 240, 61, 18, 118, 62, 190, 164, 209, 159, 62, 41, 217, 142, 189, 92, 210, 154, 62, 145, 160, 15, 191, 158, 63, 101, 62, 188, 182, 131, 190, 218, 121, 252, 190, 87, 255, 26, 191, 211, 129, 17, 190, 128, 85, 93, 62, 184, 198, 32, 190, 142, 217, 158, 190, 135, 119, 187, 188, 93, 237, 43, 190, 125, 45, 80, 190, 208, 16, 139, 188, 87, 63, 44, 190, 198, 131, 249, 61, 147, 47, 63, 190, 145, 222, 69, 190, 232, 108, 70, 190, 219, 56, 53, 190, 133, 98, 73, 188, 178, 212, 57, 190, 168, 237, 219, 189, 121, 116, 177, 189, 202, 148, 201, 188, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 137, 197, 250, 59, 174, 48, 124, 61, 82, 10, 14, 190, 118, 30, 114, 188, 48, 76, 2, 190, 4, 227, 204, 189, 83, 154, 170, 61, 79, 214, 27, 190, 113, 64, 133, 61, 241, 236, 137, 61, 153, 213, 201, 60, 52, 209, 70, 189, 206, 25, 0, 190, 204, 5, 104, 185, 159, 177, 7, 190, 118, 227, 144, 61, 237, 220, 33, 62, 183, 208, 110, 190, 227, 149, 11, 189, 110, 175, 244, 190, 69, 167, 125, 189, 251, 190, 231, 61, 245, 215, 130, 62, 2, 206, 1, 190, 161, 137, 42, 190, 67, 217, 173, 188, 118, 27, 247, 60, 189, 58, 120, 189, 162, 125, 218, 189, 232, 16, 206, 190, 18, 194, 17, 190, 161, 151, 173, 62, 110, 248, 107, 61, 185, 211, 108, 190, 161, 125, 253, 60, 94, 158, 113, 62, 88, 132, 27, 191, 0, 105, 24, 190, 141, 179, 74, 190, 40, 122, 54, 188, 59, 187, 181, 61, 194, 194, 241, 189, 62, 86, 212, 61, 7, 146, 158, 62, 145, 198, 153, 190, 173, 90, 120, 62, 5, 92, 189, 189, 79, 132, 196, 61, 214, 34, 106, 190, 143, 252, 10, 62, 216, 188, 35, 190, 62, 30, 127, 62, 100, 29, 130, 190, 155, 68, 177, 61, 10, 14, 253, 189, 63, 76, 12, 191, 191, 35, 206, 190, 209, 245, 44, 190, 53, 28, 48, 190, 234, 208, 3, 63, 69, 141, 81, 191, 51, 59, 45, 190, 86, 6, 253, 188, 71, 145, 90, 190, 138, 25, 200, 61, 92, 243, 77, 62, 46, 71, 185, 188, 138, 84, 249, 189, 165, 74, 252, 188, 78, 215, 140, 62, 174, 205, 139, 61, 0, 1, 163, 62, 229, 52, 10, 189, 229, 186, 1, 63, 220, 129, 198, 190, 169, 92, 146, 188, 191, 251, 105, 62, 18, 119, 188, 61, 4, 120, 29, 190, 124, 186, 222, 58, 187, 144, 62, 62, 218, 34, 19, 190, 48, 163, 158, 189, 151, 173, 118, 61, 153, 184, 80, 62, 80, 30, 72, 188, 146, 47, 17, 190, 61, 141, 173, 62, 42, 79, 4, 62, 141, 157, 181, 190, 78, 2, 129, 62, 59, 158, 12, 190, 116, 18, 41, 190, 254, 105, 6, 189, 158, 193, 246, 60, 17, 190, 133, 62, 160, 166, 120, 62, 159, 96, 16, 189, 157, 168, 147, 61, 130, 24, 177, 189, 250, 173, 16, 62, 116, 90, 20, 190, 55, 102, 131, 189, 57, 149, 133, 190, 234, 124, 62, 190, 116, 76, 46, 191, 223, 18, 85, 189, 208, 112, 164, 61, 223, 98, 43, 190, 217, 190, 19, 62, 32, 32, 154, 62, 203, 200, 35, 62, 226, 104, 18, 62, 234, 83, 36, 188, 192, 227, 184, 188, 18, 54, 163, 62, 198, 209, 39, 62, 191, 43, 44, 191, 80, 125, 181, 190, 7, 1, 234, 62, 119, 224, 47, 189, 126, 186, 207, 190, 254, 78, 188, 61, 189, 233, 72, 190, 82, 156, 189, 62, 59, 197, 5, 62, 57, 212, 240, 61, 49, 177, 6, 189, 102, 31, 136, 61, 0, 5, 46, 190, 94, 41, 33, 190, 252, 172, 136, 61, 172, 148, 94, 188, 253, 207, 178, 190, 32, 116, 119, 190, 88, 227, 139, 191, 230, 166, 14, 62, 149, 94, 156, 191, 53, 252, 170, 189, 226, 94, 16, 191, 156, 151, 179, 60, 151, 129, 3, 62, 229, 34, 183, 190, 103, 20, 145, 189, 234, 84, 111, 62, 66, 138, 158, 60, 241, 179, 203, 189, 52, 20, 141, 189, 170, 123, 64, 190, 197, 109, 3, 61, 25, 111, 156, 190, 38, 183, 132, 190, 113, 225, 226, 62, 202, 14, 178, 189, 191, 185, 20, 62, 80, 107, 239, 189, 167, 77, 175, 61, 92, 204, 179, 62, 214, 8, 9, 62, 180, 186, 186, 62, 248, 13, 174, 61, 74, 121, 16, 191, 100, 166, 186, 62, 83, 10, 252, 61, 144, 209, 38, 60, 146, 224, 114, 190, 72, 21, 127, 189, 171, 129, 158, 190, 182, 142, 140, 62, 89, 78, 82, 190, 79, 5, 85, 61, 167, 252, 38, 59, 249, 113, 209, 189, 20, 61, 189, 188, 140, 133, 222, 61, 145, 4, 177, 62, 128, 71, 198, 60, 51, 86, 178, 61, 52, 222, 165, 190, 67, 111, 182, 61, 34, 97, 173, 62, 215, 138, 157, 190, 229, 149, 118, 191, 225, 20, 135, 62, 90, 7, 179, 62, 176, 36, 127, 191, 1, 29, 126, 62, 124, 12, 251, 189, 121, 131, 103, 61, 175, 227, 39, 190, 28, 155, 236, 61, 243, 158, 148, 60, 50, 251, 209, 62, 34, 205, 55, 190, 60, 110, 247, 58, 50, 226, 236, 62, 5, 4, 139, 62, 97, 3, 200, 189, 185, 133, 187, 189, 103, 59, 163, 190, 107, 86, 195, 190, 139, 148, 236, 190, 36, 113, 101, 190, 134, 108, 140, 62, 252, 7, 228, 62, 50, 221, 132, 62, 156, 220, 121, 189, 14, 97, 226, 189, 221, 80, 20, 62, 88, 98, 6, 188, 228, 103, 171, 190, 125, 101, 147, 190, 109, 154, 49, 189, 199, 173, 229, 60, 124, 77, 56, 62, 57, 3, 125, 190, 53, 196, 47, 62, 164, 230, 171, 60, 154, 22, 254, 189, 249, 214, 22, 62, 225, 42, 167, 189, 51, 46, 170, 190, 231, 77, 196, 189, 103, 27, 75, 191, 187, 157, 137, 62, 122, 157, 155, 62, 179, 107, 155, 189, 54, 225, 172, 61, 226, 52, 18, 61, 125, 17, 131, 62, 230, 54, 113, 61, 126, 144, 163, 62, 224, 86, 12, 189, 22, 140, 138, 62, 158, 171, 130, 189, 102, 229, 179, 190, 110, 7, 223, 61, 109, 134, 146, 188, 209, 220, 2, 191, 98, 49, 221, 189, 194, 234, 53, 190, 221, 191, 29, 191, 129, 222, 237, 61, 231, 4, 78, 190, 126, 123, 10, 62, 54, 225, 104, 61, 141, 233, 182, 190, 155, 191, 194, 62, 129, 3, 44, 62, 4, 29, 115, 189, 241, 180, 29, 62, 81, 82, 177, 190, 57, 50, 133, 191, 92, 150, 53, 62, 240, 206, 11, 62, 77, 20, 118, 62, 151, 4, 180, 62, 96, 33, 111, 191, 89, 201, 217, 62, 155, 197, 179, 60, 105, 1, 24, 190, 145, 93, 14, 190, 93, 232, 81, 62, 164, 159, 228, 61, 229, 188, 36, 190, 83, 253, 76, 190, 90, 55, 22, 62, 83, 185, 101, 62, 49, 198, 234, 58, 1, 68, 244, 189, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 255, 105, 96, 62, 191, 15, 220, 61, 13, 237, 20, 190, 202, 121, 0, 62, 194, 39, 171, 61, 242, 244, 108, 62, 144, 171, 209, 190, 185, 12, 218, 59, 205, 47, 70, 62, 123, 180, 20, 62, 10, 17, 87, 191, 114, 224, 203, 61, 155, 215, 215, 190, 145, 128, 180, 62, 215, 79, 30, 63, 100, 144, 232, 189, 128, 203, 22, 62, 122, 4, 150, 189, 160, 153, 92, 190, 17, 231, 34, 62, 79, 115, 155, 190, 218, 221, 118, 191, 124, 95, 186, 62, 21, 164, 191, 62, 114, 199, 241, 61, 90, 13, 108, 62, 0, 21, 145, 61, 47, 56, 196, 62, 27, 112, 66, 61, 227, 142, 7, 191, 121, 7, 56, 62, 173, 242, 38, 189, 72, 140, 127, 189, 26, 155, 173, 191, 223, 228, 12, 188, 69, 137, 13, 61, 189, 212, 81, 191, 187, 245, 109, 187, 16, 197, 144, 61, 27, 7, 7, 60, 77, 240, 42, 62, 15, 93, 205, 190, 161, 235, 48, 190, 113, 199, 151, 62, 207, 87, 174, 189, 160, 254, 5, 62, 53, 3, 8, 191, 81, 179, 22, 191, 255, 19, 178, 189, 37, 136, 143, 191, 10, 121, 175, 189, 21, 82, 42, 62, 143, 116, 11, 63, 17, 177, 170, 189, 246, 14, 85, 61, 184, 162, 185, 62, 153, 40, 67, 189, 230, 82, 177, 61, 216, 155, 177, 189, 230, 232, 148, 62, 121, 241, 17, 62, 218, 40, 123, 189, 150, 193, 23, 189, 121, 145, 205, 189, 172, 94, 114, 61, 59, 3, 25, 62, 180, 120, 126, 61, 39, 109, 199, 190, 186, 254, 1, 190, 224, 221, 211, 61, 202, 62, 10, 62, 89, 32, 60, 190, 95, 216, 19, 191, 48, 170, 254, 61, 0, 205, 83, 62, 19, 106, 222, 191, 184, 135, 8, 62, 101, 0, 150, 190, 185, 168, 94, 190, 213, 197, 64, 188, 233, 202, 140, 60, 147, 174, 96, 188, 93, 83, 118, 62, 202, 173, 29, 190, 194, 255, 250, 61, 76, 117, 209, 189, 73, 80, 244, 189, 133, 82, 255, 189, 57, 122, 134, 190, 71, 102, 253, 189, 141, 174, 144, 189, 157, 192, 145, 190, 42, 67, 63, 62, 82, 90, 196, 189, 160, 61, 173, 62, 104, 139, 53, 190, 118, 123, 47, 190, 172, 5, 76, 61, 47, 15, 54, 62, 239, 35, 100, 61, 91, 188, 152, 62, 64, 1, 159, 187, 178, 168, 149, 61, 51, 23, 188, 61, 166, 44, 147, 60, 93, 101, 227, 62, 223, 103, 29, 62, 89, 126, 32, 190, 88, 231, 95, 189, 151, 207, 81, 190, 68, 59, 129, 190, 181, 13, 9, 189, 53, 152, 174, 189, 158, 43, 149, 62, 184, 141, 55, 61, 120, 133, 115, 189, 245, 139, 18, 60, 220, 200, 0, 189, 74, 146, 19, 61, 57, 225, 92, 190, 83, 132, 65, 61, 100, 32, 201, 186, 161, 221, 148, 189, 191, 213, 236, 189, 250, 143, 55, 62, 11, 142, 199, 189, 186, 85, 204, 61, 139, 204, 145, 189, 82, 0, 86, 190, 244, 223, 62, 190, 213, 177, 82, 61, 17, 23, 160, 62, 249, 235, 143, 190, 47, 59, 12, 62, 207, 160, 118, 189, 11, 98, 238, 188, 177, 211, 92, 62, 236, 62, 7, 62, 168, 83, 42, 190, 46, 208, 60, 62, 15, 9, 155, 190, 47, 40, 200, 189, 59, 198, 27, 191, 206, 102, 111, 190, 13, 86, 49, 62, 57, 197, 99, 191, 51, 167, 138, 190, 209, 133, 181, 60, 218, 220, 93, 63, 214, 37, 241, 62, 28, 1, 159, 189, 185, 243, 214, 61, 124, 194, 190, 188, 229, 55, 30, 190, 244, 59, 154, 188, 173, 187, 235, 190, 32, 85, 113, 62, 28, 6, 238, 189, 21, 94, 9, 62, 88, 74, 155, 62, 144, 255, 34, 62, 44, 188, 23, 190, 63, 182, 225, 189, 181, 226, 26, 189, 47, 93, 20, 62, 144, 218, 201, 61, 226, 54, 214, 189, 182, 119, 79, 189, 57, 179, 186, 61, 94, 193, 12, 62, 217, 75, 33, 190, 74, 212, 42, 190, 214, 26, 161, 61, 29, 16, 21, 61, 222, 155, 129, 61, 153, 236, 44, 189, 131, 64, 10, 62, 181, 18, 183, 58, 44, 53, 175, 189, 173, 160, 123, 60, 102, 247, 144, 61, 41, 208, 236, 61, 127, 141, 25, 189, 158, 92, 186, 188, 184, 106, 34, 190, 183, 207, 37, 190, 242, 130, 160, 61, 182, 50, 177, 189, 47, 191, 201, 188, 137, 225, 127, 59, 160, 65, 137, 189, 6, 113, 237, 189, 202, 112, 21, 191, 234, 212, 253, 188, 167, 34, 62, 62, 83, 67, 106, 62, 109, 192, 171, 189, 232, 29, 2, 191, 120, 61, 4, 191, 0, 235, 76, 61, 133, 42, 144, 62, 174, 188, 48, 190, 156, 60, 161, 190, 166, 66, 70, 62, 102, 128, 227, 190, 93, 35, 94, 190, 117, 67, 252, 190, 232, 128, 168, 191, 246, 248, 126, 61, 91, 197, 154, 190, 72, 2, 174, 190, 181, 205, 207, 61, 55, 242, 76, 191, 95, 104, 249, 62, 37, 93, 104, 190, 135, 133, 149, 189, 53, 213, 75, 190, 28, 176, 199, 60, 75, 33, 225, 60, 74, 87, 15, 62, 167, 173, 209, 62, 172, 145, 221, 62, 4, 164, 216, 59, 177, 157, 188, 62, 45, 18, 11, 62, 76, 171, 141, 190, 12, 173, 181, 60, 226, 34, 38, 62, 107, 147, 99, 191, 227, 251, 201, 189, 57, 230, 130, 61, 227, 58, 221, 188, 179, 163, 102, 62, 109, 35, 12, 189, 214, 2, 186, 188, 87, 17, 128, 62, 55, 12, 198, 61, 189, 212, 177, 62, 84, 133, 252, 189, 60, 160, 141, 191, 29, 68, 204, 61, 44, 137, 175, 191, 104, 118, 215, 190, 83, 41, 211, 188, 169, 155, 15, 63, 162, 88, 190, 62, 230, 14, 196, 59, 235, 19, 189, 62, 105, 5, 98, 190, 212, 171, 186, 187, 145, 129, 0, 189, 113, 220, 40, 61, 162, 100, 56, 62, 138, 3, 203, 190, 164, 185, 16, 62, 150, 177, 176, 61, 225, 55, 141, 189, 118, 190, 36, 190, 82, 248, 87, 190, 27, 179, 29, 190, 48, 254, 23, 62, 182, 158, 122, 60, 21, 185, 78, 62, 227, 113, 246, 188, 242, 153, 32, 189, 133, 221, 166, 62, 214, 28, 152, 62, 141, 147, 72, 61, 139, 7, 176, 61, 224, 59, 110, 190, 88, 92, 167, 61, 210, 11, 58, 62, 95, 244, 91, 189, 255, 183, 96, 62, 148, 200, 224, 189, 240, 237, 87, 190, 154, 144, 239, 61, 15, 144, 44, 190, 119, 38, 22, 59, 0, 81, 151, 190, 140, 90, 161, 61, 115, 30, 42, 190, 28, 109, 249, 190, 20, 234, 19, 191, 95, 111, 24, 188, 142, 227, 244, 188, 168, 241, 147, 190, 41, 208, 136, 190, 109, 118, 211, 189, 169, 186, 36, 62, 199, 12, 94, 190, 68, 74, 36, 62, 112, 32, 142, 190, 12, 126, 86, 187, 55, 148, 100, 190, 203, 50, 11, 62, 110, 77, 107, 190, 230, 86, 12, 191, 2, 87, 161, 190, 237, 237, 177, 190, 156, 78, 182, 189, 112, 223, 207, 62, 160, 30, 90, 190, 209, 10, 103, 190, 61, 138, 226, 189, 213, 127, 210, 186, 85, 65, 89, 62, 122, 75, 217, 61, 229, 64, 232, 60, 100, 10, 216, 190, 165, 93, 191, 61, 87, 35, 134, 62, 227, 190, 159, 61, 144, 218, 36, 62, 148, 47, 33, 191, 56, 88, 184, 62, 170, 248, 27, 191, 178, 13, 6, 62, 172, 38, 185, 62, 192, 232, 215, 190, 112, 180, 133, 62, 75, 175, 128, 62, 34, 57, 49, 60, 206, 165, 124, 189, 131, 180, 156, 191, 35, 251, 1, 191, 164, 155, 52, 187, 207, 99, 51, 191, 240, 104, 8, 191, 253, 142, 235, 62, 32, 63, 184, 62, 14, 59, 121, 190, 168, 124, 237, 62, 160, 235, 203, 190, 195, 230, 115, 61, 97, 19, 88, 190, 89, 233, 4, 190, 138, 42, 89, 62, 142, 13, 200, 61, 204, 7, 197, 190, 104, 195, 249, 60, 125, 6, 152, 62, 35, 92, 187, 61, 58, 122, 21, 191, 33, 37, 4, 191, 228, 164, 175, 191, 219, 25, 207, 189, 201, 186, 147, 191, 198, 155, 63, 190, 255, 132, 199, 188, 199, 162, 169, 61, 31, 5, 167, 62, 89, 66, 135, 190, 149, 110, 213, 190, 216, 62, 235, 60, 15, 252, 242, 61, 167, 112, 178, 191, 255, 58, 136, 190, 234, 195, 213, 189, 80, 149, 244, 60, 116, 7, 166, 62, 27, 163, 3, 191, 115, 218, 79, 190, 3, 133, 134, 61, 70, 8, 122, 189, 86, 168, 243, 62, 62, 229, 137, 191, 58, 93, 187, 189, 174, 147, 39, 62, 175, 182, 45, 191, 177, 13, 10, 190, 220, 6, 149, 62, 18, 142, 0, 63, 186, 47, 38, 63, 88, 142, 22, 190, 15, 117, 221, 62, 102, 240, 51, 190, 90, 206, 34, 62, 228, 194, 249, 190, 200, 34, 159, 62, 92, 37, 176, 61, 239, 12, 127, 62, 157, 250, 58, 61, 163, 161, 161, 62, 31, 28, 37, 190, 163, 34, 131, 191, 33, 86, 73, 62, 140, 60, 63, 62, 82, 193, 215, 191, 96, 21, 146, 61, 31, 188, 140, 61, 46, 15, 75, 190, 223, 129, 105, 62, 2, 230, 36, 190, 139, 136, 4, 190, 69, 148, 250, 61, 170, 91, 176, 189, 212, 180, 213, 62, 110, 47, 129, 191, 194, 15, 117, 191, 239, 169, 165, 189, 214, 97, 182, 191, 9, 196, 107, 190, 48, 162, 217, 61, 181, 214, 184, 62, 2, 129, 8, 63, 180, 99, 246, 189, 234, 59, 163, 62, 96, 70, 53, 190, 25, 245, 143, 62, 148, 108, 98, 190, 47, 61, 157, 62, 200, 149, 59, 61, 146, 69, 203, 188, 48, 71, 211, 62, 235, 17, 14, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 4, 48, 190, 22, 215, 56, 190, 168, 102, 84, 187, 143, 106, 183, 189, 64, 84, 137, 61, 191, 95, 34, 62, 25, 65, 8, 62, 161, 145, 95, 62, 169, 205, 221, 185, 215, 201, 84, 61, 113, 104, 217, 188, 170, 199, 59, 189, 180, 0, 175, 62, 6, 17, 35, 190, 185, 202, 145, 61, 43, 67, 100, 61, 97, 91, 5, 189, 104, 1, 39, 62, 232, 4, 226, 61, 225, 76, 174, 189, 226, 98, 13, 62, 125, 38, 147, 188, 81, 222, 145, 62, 234, 195, 147, 62, 172, 134, 118, 188, 235, 77, 254, 60, 175, 233, 64, 190, 24, 170, 49, 189, 44, 160, 156, 60, 71, 245, 214, 61, 81, 160, 18, 62, 183, 235, 91, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 51, 124, 191, 62, 129, 234, 190, 64, 190, 68, 190, 29, 203, 242, 190, 186, 12, 113, 62, 97, 104, 162, 190, 38, 124, 54, 191, 101, 80, 4, 62, 57, 24, 185, 62, 89, 149, 8, 62, 246, 164, 217, 62, 80, 214, 194, 190, 204, 218, 189, 62, 146, 228, 205, 190, 255, 232, 200, 190, 57, 61, 51, 63, 15, 96, 102, 190, 161, 59, 16, 63, 151, 17, 216, 60, 170, 176, 124, 63, 118, 107, 102, 190, 60, 139, 189, 62, 26, 12, 202, 61, 95, 241, 28, 191, 130, 231, 16, 188, 49, 15, 133, 63, 100, 52, 152, 190, 10, 90, 189, 62, 226, 225, 15, 191, 128, 154, 248, 190, 96, 44, 90, 191, 102, 4, 75, 191, 42, 131, 60, 62, 46, 20, 62, 190, 83, 100, 155, 190, 32, 40, 29, 190, 108, 29, 169, 190, 51, 219, 178, 190, 25, 147, 163, 61, 222, 47, 80, 190, 168, 241, 215, 61, 205, 106, 12, 62, 72, 168, 56, 190, 173, 225, 130, 61, 110, 164, 57, 190, 235, 156, 206, 62, 203, 111, 43, 62, 203, 84, 136, 62, 104, 146, 115, 190, 178, 98, 13, 61, 10, 242, 112, 60, 215, 158, 228, 61, 206, 5, 26, 191, 245, 181, 64, 63, 99, 245, 12, 190, 94, 127, 126, 188, 124, 135, 245, 189, 105, 127, 218, 61, 228, 200, 125, 61, 106, 238, 157, 62, 189, 196, 118, 190, 134, 104, 154, 190, 30, 86, 127, 62, 44, 50, 104, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 0, 34, 62, 150, 209, 250, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 213, 191, 190, 197, 201, 124, 191, 120, 169, 228, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 235, 63, 64, 74, 168, 137, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}