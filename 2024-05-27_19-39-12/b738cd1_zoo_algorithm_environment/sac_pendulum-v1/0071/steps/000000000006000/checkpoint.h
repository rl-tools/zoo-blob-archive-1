// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 177, 136, 62, 144, 53, 9, 191, 218, 167, 247, 190, 84, 239, 231, 57, 222, 159, 51, 191, 186, 188, 214, 62, 138, 238, 70, 190, 95, 121, 171, 189, 39, 80, 132, 189, 90, 90, 176, 189, 59, 149, 170, 62, 21, 104, 21, 191, 117, 159, 187, 190, 240, 95, 97, 63, 121, 97, 4, 63, 159, 97, 29, 61, 200, 254, 205, 189, 83, 57, 15, 63, 252, 223, 57, 63, 160, 134, 75, 191, 214, 54, 201, 190, 252, 179, 113, 61, 18, 38, 66, 63, 97, 139, 194, 62, 205, 248, 13, 190, 157, 199, 92, 63, 184, 6, 140, 61, 90, 138, 220, 62, 86, 86, 108, 191, 124, 226, 87, 190, 223, 116, 174, 62, 151, 107, 134, 191, 63, 29, 80, 190, 189, 56, 188, 190, 38, 25, 7, 63, 60, 180, 175, 61, 202, 45, 3, 62, 160, 96, 36, 191, 244, 244, 240, 61, 225, 242, 75, 63, 101, 125, 5, 63, 102, 58, 14, 63, 90, 75, 214, 62, 201, 135, 92, 191, 162, 129, 33, 190, 116, 143, 247, 190, 55, 53, 167, 190, 221, 4, 104, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 204, 240, 131, 190, 252, 99, 92, 191, 205, 137, 74, 63, 229, 121, 21, 63, 141, 249, 45, 191, 250, 76, 37, 62, 62, 205, 184, 62, 59, 127, 105, 63, 192, 43, 150, 190, 135, 101, 255, 190, 18, 9, 188, 189, 162, 100, 213, 62, 83, 5, 234, 190, 255, 132, 145, 191, 37, 72, 200, 189, 95, 105, 46, 63, 91, 189, 72, 61, 219, 216, 24, 191, 87, 85, 96, 63, 240, 90, 230, 62, 23, 178, 233, 62, 95, 106, 156, 188, 146, 146, 17, 63, 30, 146, 4, 63, 114, 195, 54, 63, 39, 230, 5, 63, 83, 122, 158, 62, 88, 57, 36, 191, 85, 224, 83, 63, 94, 130, 237, 188, 61, 126, 126, 63, 73, 167, 121, 63, 191, 250, 188, 62, 185, 132, 232, 190, 190, 22, 19, 63, 16, 63, 71, 61, 29, 191, 137, 190, 109, 196, 10, 191, 163, 227, 65, 62, 34, 52, 17, 63, 148, 139, 129, 190, 235, 201, 203, 62, 62, 69, 234, 190, 32, 249, 171, 190, 202, 43, 167, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 82, 70, 191, 131, 222, 24, 190, 41, 129, 18, 63, 8, 251, 124, 62, 4, 156, 146, 61, 235, 240, 250, 190, 194, 54, 141, 62, 159, 84, 240, 62, 149, 144, 1, 63, 221, 61, 210, 187, 163, 66, 185, 62, 61, 113, 228, 62, 139, 50, 68, 62, 58, 218, 16, 191, 239, 14, 23, 191, 198, 201, 243, 190, 242, 123, 12, 191, 236, 111, 150, 190, 247, 168, 30, 63, 36, 222, 96, 62, 11, 102, 189, 188, 106, 93, 143, 62, 178, 167, 240, 62, 89, 90, 193, 190, 39, 6, 204, 62, 62, 246, 117, 61, 88, 130, 187, 190, 160, 40, 181, 190, 37, 6, 11, 63, 14, 187, 59, 189, 25, 57, 251, 189, 243, 166, 241, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 60, 10, 189, 4, 80, 65, 62, 204, 46, 158, 62, 120, 130, 13, 62, 3, 33, 140, 191, 41, 219, 247, 189, 74, 197, 28, 190, 162, 2, 177, 190, 46, 152, 32, 189, 106, 8, 240, 190, 198, 1, 52, 62, 17, 33, 185, 61, 205, 211, 192, 62, 184, 19, 74, 190, 86, 77, 75, 191, 221, 123, 176, 61, 242, 82, 197, 188, 96, 230, 63, 190, 145, 131, 180, 61, 93, 250, 53, 190, 122, 17, 152, 62, 61, 250, 196, 62, 219, 187, 161, 190, 26, 241, 79, 190, 246, 241, 50, 191, 223, 135, 205, 61, 80, 87, 0, 191, 212, 43, 39, 190, 127, 22, 128, 62, 215, 241, 34, 63, 237, 184, 164, 189, 123, 216, 154, 62, 217, 224, 119, 190, 140, 73, 133, 62, 134, 17, 138, 190, 46, 134, 170, 62, 189, 240, 223, 59, 230, 210, 80, 60, 118, 216, 51, 190, 0, 238, 156, 189, 126, 124, 20, 190, 117, 131, 35, 190, 15, 156, 69, 189, 1, 70, 14, 190, 168, 145, 211, 189, 36, 15, 58, 62, 238, 200, 1, 191, 135, 71, 96, 189, 121, 196, 19, 189, 198, 152, 56, 190, 81, 20, 41, 189, 97, 117, 127, 62, 37, 237, 41, 190, 57, 108, 236, 189, 231, 61, 219, 61, 131, 53, 142, 62, 86, 162, 253, 61, 42, 22, 5, 62, 129, 73, 37, 191, 147, 160, 232, 62, 187, 108, 171, 189, 216, 79, 177, 188, 238, 242, 4, 62, 196, 106, 58, 62, 241, 91, 0, 190, 88, 74, 227, 61, 139, 177, 200, 61, 46, 97, 242, 61, 221, 217, 246, 190, 69, 36, 185, 188, 113, 24, 93, 61, 41, 56, 141, 190, 83, 88, 117, 61, 142, 186, 40, 190, 239, 182, 142, 62, 70, 233, 36, 60, 235, 80, 9, 189, 186, 32, 165, 61, 75, 42, 171, 189, 132, 31, 36, 190, 193, 52, 12, 190, 156, 85, 48, 190, 18, 44, 255, 61, 197, 143, 223, 61, 194, 35, 85, 61, 83, 122, 175, 62, 184, 87, 26, 62, 141, 229, 43, 62, 222, 6, 23, 190, 82, 121, 142, 62, 188, 209, 12, 190, 144, 35, 44, 62, 174, 58, 36, 61, 235, 3, 74, 62, 243, 209, 216, 61, 248, 185, 139, 189, 159, 61, 63, 189, 68, 42, 52, 62, 135, 143, 98, 189, 191, 145, 23, 190, 175, 22, 243, 189, 63, 10, 45, 190, 181, 45, 217, 188, 61, 136, 192, 189, 164, 10, 212, 59, 64, 220, 11, 190, 104, 132, 168, 61, 223, 238, 32, 190, 93, 165, 55, 188, 150, 13, 104, 61, 187, 4, 107, 61, 43, 126, 24, 190, 136, 14, 151, 189, 242, 245, 195, 189, 76, 254, 29, 62, 74, 120, 31, 190, 198, 212, 23, 189, 151, 203, 49, 189, 44, 130, 37, 190, 76, 27, 30, 190, 212, 78, 131, 61, 211, 251, 62, 189, 48, 16, 46, 62, 40, 119, 25, 190, 249, 123, 2, 190, 14, 218, 52, 190, 177, 233, 201, 61, 65, 32, 201, 189, 116, 28, 121, 188, 26, 84, 4, 62, 199, 168, 126, 62, 154, 153, 2, 190, 40, 7, 66, 189, 142, 21, 2, 60, 132, 81, 199, 61, 96, 126, 15, 62, 159, 4, 4, 62, 206, 138, 79, 62, 19, 107, 28, 62, 47, 26, 164, 190, 10, 77, 199, 61, 180, 191, 197, 189, 19, 69, 129, 190, 176, 75, 181, 61, 78, 156, 129, 188, 187, 102, 17, 190, 234, 229, 86, 62, 187, 103, 131, 62, 199, 172, 109, 190, 121, 127, 155, 61, 18, 7, 99, 62, 72, 253, 95, 188, 102, 184, 96, 190, 201, 219, 57, 62, 14, 38, 211, 61, 40, 89, 85, 190, 169, 173, 82, 189, 241, 168, 195, 189, 112, 12, 212, 61, 102, 241, 251, 189, 196, 200, 189, 189, 27, 243, 71, 188, 117, 23, 137, 62, 225, 189, 160, 188, 123, 58, 64, 190, 164, 202, 35, 190, 81, 65, 100, 190, 93, 43, 119, 189, 60, 75, 71, 189, 76, 171, 228, 190, 220, 34, 235, 61, 209, 134, 21, 190, 3, 233, 190, 61, 177, 179, 91, 62, 114, 62, 223, 189, 198, 238, 193, 188, 152, 26, 17, 62, 77, 8, 158, 62, 51, 111, 220, 62, 74, 170, 135, 62, 54, 226, 228, 61, 173, 34, 43, 62, 197, 196, 159, 189, 225, 138, 36, 62, 21, 155, 72, 62, 238, 214, 132, 62, 239, 61, 144, 190, 201, 214, 62, 61, 92, 7, 20, 190, 248, 22, 5, 62, 228, 189, 21, 62, 45, 63, 21, 190, 174, 19, 97, 189, 140, 155, 17, 190, 146, 103, 8, 190, 11, 98, 111, 189, 242, 230, 4, 62, 53, 173, 12, 190, 152, 184, 41, 190, 209, 79, 6, 60, 68, 167, 158, 62, 152, 44, 33, 190, 17, 178, 156, 61, 119, 163, 12, 62, 189, 95, 224, 189, 3, 254, 7, 190, 145, 228, 136, 61, 33, 224, 86, 190, 195, 217, 104, 188, 80, 217, 172, 61, 236, 30, 83, 190, 193, 103, 39, 62, 25, 252, 206, 60, 233, 8, 186, 190, 174, 189, 97, 190, 38, 194, 49, 190, 240, 151, 216, 61, 57, 51, 17, 62, 152, 74, 165, 62, 7, 58, 78, 190, 95, 192, 93, 62, 234, 142, 56, 190, 248, 75, 160, 59, 70, 98, 206, 190, 154, 114, 174, 186, 183, 130, 121, 190, 23, 39, 57, 62, 82, 222, 194, 189, 0, 15, 20, 61, 196, 1, 15, 190, 106, 98, 63, 61, 55, 200, 106, 62, 128, 87, 34, 62, 240, 4, 164, 62, 89, 171, 80, 62, 19, 78, 22, 62, 221, 98, 16, 62, 97, 8, 95, 189, 206, 15, 70, 190, 54, 42, 116, 62, 141, 195, 44, 62, 47, 90, 55, 62, 213, 181, 159, 62, 57, 144, 28, 190, 85, 24, 174, 59, 48, 32, 59, 190, 132, 164, 20, 188, 228, 194, 26, 190, 180, 247, 94, 60, 102, 228, 111, 189, 148, 27, 157, 61, 253, 96, 160, 189, 225, 162, 33, 62, 159, 108, 46, 190, 77, 151, 104, 189, 197, 184, 11, 62, 129, 253, 247, 60, 30, 42, 188, 190, 169, 107, 118, 188, 178, 21, 127, 189, 126, 0, 71, 188, 236, 198, 158, 190, 157, 6, 62, 62, 90, 211, 164, 62, 147, 11, 23, 190, 192, 123, 136, 62, 38, 114, 140, 189, 134, 238, 0, 62, 51, 171, 94, 189, 124, 106, 143, 190, 184, 117, 144, 60, 241, 81, 20, 62, 181, 148, 115, 189, 184, 6, 230, 62, 36, 81, 80, 62, 122, 234, 144, 190, 41, 51, 155, 62, 30, 202, 137, 61, 253, 205, 108, 62, 55, 143, 229, 190, 209, 26, 127, 62, 58, 3, 135, 190, 56, 93, 79, 189, 167, 245, 214, 190, 229, 19, 183, 188, 66, 178, 24, 62, 102, 35, 110, 189, 171, 213, 34, 190, 110, 97, 245, 60, 93, 237, 43, 190, 148, 89, 26, 190, 165, 51, 211, 60, 162, 37, 37, 190, 198, 131, 249, 61, 139, 143, 6, 190, 34, 230, 32, 190, 204, 168, 36, 190, 218, 208, 9, 190, 44, 44, 72, 61, 129, 171, 14, 190, 41, 108, 229, 189, 121, 116, 177, 189, 5, 29, 180, 187, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 118, 123, 180, 60, 129, 4, 225, 61, 227, 145, 23, 190, 94, 221, 127, 60, 41, 143, 162, 189, 4, 227, 204, 189, 250, 150, 179, 61, 43, 180, 28, 190, 129, 106, 219, 61, 179, 156, 137, 61, 80, 99, 135, 61, 140, 221, 99, 189, 206, 25, 0, 190, 177, 249, 53, 61, 22, 175, 27, 60, 100, 223, 180, 186, 116, 104, 10, 61, 181, 99, 245, 60, 205, 20, 62, 61, 46, 255, 92, 190, 117, 117, 202, 59, 250, 155, 33, 62, 102, 179, 16, 62, 126, 30, 66, 189, 171, 149, 30, 190, 132, 127, 247, 189, 120, 95, 95, 189, 148, 101, 29, 189, 133, 109, 100, 61, 111, 200, 65, 190, 18, 194, 17, 190, 20, 24, 244, 61, 142, 174, 39, 188, 181, 76, 46, 190, 255, 235, 204, 189, 171, 103, 0, 62, 39, 66, 29, 190, 53, 13, 9, 190, 50, 135, 141, 61, 123, 5, 109, 186, 28, 126, 71, 189, 124, 208, 242, 189, 4, 89, 72, 190, 85, 116, 255, 61, 107, 133, 186, 189, 122, 207, 35, 62, 184, 183, 78, 61, 246, 7, 21, 61, 255, 104, 249, 189, 140, 75, 149, 62, 10, 110, 151, 189, 90, 252, 108, 62, 218, 228, 42, 190, 18, 208, 88, 61, 141, 113, 166, 189, 254, 205, 147, 190, 132, 211, 162, 190, 11, 56, 39, 189, 79, 7, 124, 190, 120, 57, 215, 62, 181, 38, 106, 190, 199, 20, 65, 190, 86, 6, 253, 188, 198, 66, 114, 190, 164, 93, 141, 61, 34, 30, 24, 62, 101, 205, 137, 60, 119, 108, 187, 61, 37, 131, 178, 59, 187, 176, 73, 62, 129, 48, 18, 60, 85, 119, 145, 62, 59, 3, 60, 188, 21, 119, 216, 62, 206, 108, 74, 189, 143, 104, 207, 189, 197, 115, 77, 62, 196, 63, 34, 62, 194, 116, 236, 189, 216, 223, 150, 189, 66, 176, 67, 62, 72, 100, 27, 190, 212, 241, 97, 60, 232, 68, 191, 60, 165, 142, 236, 61, 22, 106, 23, 62, 114, 153, 159, 61, 56, 21, 105, 62, 139, 189, 98, 61, 76, 212, 20, 190, 156, 27, 82, 62, 148, 112, 221, 189, 199, 44, 115, 190, 231, 63, 206, 188, 158, 193, 246, 60, 122, 96, 90, 62, 28, 81, 70, 62, 220, 165, 91, 189, 177, 193, 78, 61, 238, 49, 127, 189, 128, 226, 8, 62, 168, 14, 233, 189, 29, 128, 16, 61, 114, 120, 77, 190, 255, 156, 139, 188, 57, 47, 9, 191, 85, 198, 138, 188, 126, 126, 158, 60, 184, 40, 98, 190, 130, 118, 52, 62, 211, 165, 156, 62, 82, 157, 214, 61, 190, 210, 216, 61, 199, 190, 81, 59, 136, 191, 208, 189, 176, 31, 56, 62, 225, 223, 122, 62, 71, 129, 204, 190, 225, 120, 217, 61, 240, 43, 207, 62, 183, 255, 116, 188, 40, 138, 73, 190, 35, 92, 228, 61, 101, 107, 167, 190, 92, 65, 230, 62, 23, 57, 203, 61, 57, 212, 240, 61, 71, 6, 128, 61, 118, 63, 105, 62, 254, 82, 128, 61, 127, 157, 114, 189, 81, 100, 46, 190, 106, 212, 160, 61, 65, 93, 164, 190, 175, 59, 106, 190, 37, 51, 240, 190, 232, 229, 65, 61, 62, 49, 238, 190, 208, 233, 200, 189, 146, 2, 199, 190, 185, 222, 177, 190, 224, 91, 9, 60, 16, 54, 199, 190, 214, 240, 45, 189, 216, 45, 47, 62, 59, 197, 181, 189, 90, 4, 41, 190, 118, 247, 47, 189, 16, 239, 33, 190, 241, 158, 144, 60, 135, 154, 191, 190, 40, 224, 131, 190, 238, 130, 239, 62, 146, 209, 66, 190, 13, 171, 12, 62, 38, 178, 143, 188, 0, 93, 234, 189, 4, 50, 156, 62, 214, 8, 9, 62, 10, 59, 185, 62, 188, 34, 230, 61, 7, 113, 205, 190, 192, 150, 158, 62, 247, 138, 132, 62, 134, 139, 225, 189, 107, 29, 219, 189, 179, 192, 139, 189, 199, 46, 237, 189, 175, 222, 173, 189, 125, 127, 79, 189, 142, 200, 88, 189, 209, 75, 28, 188, 103, 234, 168, 188, 44, 147, 253, 188, 91, 215, 14, 62, 143, 153, 6, 62, 135, 104, 129, 189, 137, 73, 157, 61, 46, 137, 214, 189, 56, 89, 114, 61, 67, 203, 142, 62, 72, 99, 34, 190, 37, 15, 45, 191, 217, 94, 11, 62, 82, 250, 126, 62, 19, 211, 20, 191, 50, 203, 238, 61, 83, 185, 145, 188, 116, 231, 13, 60, 213, 58, 34, 190, 28, 155, 236, 61, 53, 148, 242, 189, 232, 3, 170, 62, 196, 183, 62, 190, 63, 64, 4, 190, 81, 188, 194, 62, 50, 7, 157, 62, 208, 68, 99, 189, 213, 188, 177, 60, 126, 26, 134, 190, 39, 190, 69, 190, 132, 102, 170, 190, 204, 135, 198, 190, 180, 136, 167, 61, 116, 95, 194, 62, 79, 23, 107, 62, 48, 172, 205, 189, 105, 188, 229, 61, 199, 147, 253, 61, 101, 253, 73, 61, 160, 165, 9, 190, 30, 25, 213, 189, 137, 198, 204, 188, 114, 119, 90, 59, 69, 245, 37, 62, 197, 121, 61, 190, 198, 92, 46, 62, 130, 84, 97, 61, 4, 185, 39, 190, 136, 35, 8, 62, 180, 114, 227, 188, 152, 178, 114, 190, 231, 77, 196, 189, 9, 220, 4, 191, 72, 243, 141, 62, 160, 191, 166, 62, 124, 142, 72, 61, 139, 168, 25, 190, 175, 78, 145, 61, 106, 73, 130, 62, 223, 225, 4, 61, 137, 228, 174, 62, 61, 165, 48, 190, 99, 230, 131, 62, 198, 179, 180, 61, 194, 83, 158, 190, 92, 126, 45, 62, 165, 142, 179, 189, 70, 166, 159, 190, 226, 48, 251, 189, 137, 41, 147, 189, 106, 102, 188, 190, 23, 174, 109, 61, 127, 21, 128, 190, 251, 207, 45, 62, 72, 26, 200, 61, 195, 231, 156, 190, 192, 244, 179, 62, 221, 181, 97, 62, 33, 69, 72, 187, 57, 171, 77, 62, 3, 210, 197, 190, 181, 98, 49, 191, 216, 81, 48, 62, 240, 206, 11, 62, 237, 210, 105, 62, 91, 142, 200, 62, 142, 161, 66, 191, 18, 153, 199, 62, 96, 223, 122, 60, 114, 43, 5, 189, 10, 204, 18, 190, 178, 53, 112, 62, 162, 52, 1, 62, 136, 33, 60, 62, 206, 20, 29, 190, 25, 95, 12, 62, 88, 136, 112, 62, 77, 145, 0, 189, 127, 193, 165, 60, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 143, 237, 166, 61, 75, 58, 55, 62, 171, 35, 210, 189, 1, 130, 194, 187, 138, 210, 2, 189, 76, 95, 18, 62, 91, 188, 151, 190, 136, 101, 241, 189, 14, 251, 49, 60, 15, 15, 71, 188, 82, 9, 37, 191, 27, 151, 182, 189, 227, 132, 8, 190, 219, 158, 128, 62, 21, 179, 51, 190, 199, 192, 2, 190, 128, 203, 22, 62, 45, 77, 175, 189, 100, 12, 238, 189, 180, 243, 240, 60, 176, 66, 101, 190, 255, 245, 236, 190, 179, 240, 150, 62, 114, 87, 157, 62, 29, 85, 151, 61, 37, 20, 218, 61, 22, 51, 134, 61, 110, 227, 123, 62, 211, 95, 71, 189, 125, 8, 150, 190, 227, 53, 19, 62, 244, 97, 233, 58, 95, 127, 152, 61, 82, 200, 207, 190, 56, 55, 1, 189, 28, 132, 207, 61, 141, 23, 39, 191, 53, 245, 39, 190, 109, 211, 238, 61, 145, 62, 22, 190, 179, 13, 48, 188, 30, 49, 113, 190, 84, 9, 238, 189, 233, 160, 203, 61, 185, 28, 1, 189, 31, 92, 212, 188, 101, 72, 18, 188, 112, 190, 224, 190, 255, 19, 178, 189, 69, 212, 152, 191, 37, 121, 186, 189, 113, 98, 78, 62, 79, 225, 129, 61, 59, 68, 224, 60, 133, 116, 139, 61, 30, 118, 140, 62, 236, 10, 104, 190, 101, 177, 153, 60, 176, 64, 102, 190, 250, 77, 66, 62, 242, 0, 217, 61, 90, 183, 163, 188, 171, 112, 198, 188, 209, 58, 161, 189, 47, 225, 7, 62, 200, 30, 49, 188, 211, 68, 8, 61, 126, 163, 49, 190, 184, 84, 32, 62, 255, 147, 225, 60, 255, 42, 58, 59, 138, 17, 100, 60, 178, 163, 195, 189, 28, 156, 25, 189, 215, 0, 170, 61, 167, 5, 144, 60, 254, 27, 184, 189, 95, 165, 43, 190, 32, 241, 1, 190, 200, 130, 232, 189, 233, 202, 140, 60, 171, 244, 1, 59, 119, 15, 192, 61, 75, 137, 52, 60, 237, 246, 131, 189, 143, 25, 31, 189, 187, 97, 46, 190, 47, 71, 3, 190, 46, 184, 253, 189, 175, 77, 171, 189, 94, 171, 165, 189, 86, 64, 36, 190, 143, 34, 215, 188, 28, 107, 19, 190, 56, 139, 3, 62, 181, 231, 225, 189, 193, 72, 5, 190, 211, 183, 15, 61, 141, 230, 104, 62, 86, 118, 224, 187, 196, 2, 131, 62, 70, 191, 144, 189, 11, 227, 151, 61, 241, 242, 23, 62, 67, 195, 53, 61, 232, 251, 203, 62, 7, 30, 50, 62, 64, 50, 32, 190, 180, 209, 188, 186, 171, 8, 123, 190, 38, 155, 158, 190, 83, 90, 32, 189, 53, 152, 174, 189, 48, 49, 132, 62, 105, 25, 144, 61, 115, 45, 117, 189, 16, 79, 98, 60, 240, 116, 116, 61, 207, 237, 40, 61, 63, 88, 83, 190, 195, 229, 197, 61, 99, 38, 150, 60, 81, 114, 72, 189, 16, 79, 27, 189, 75, 126, 227, 61, 52, 29, 171, 189, 192, 144, 156, 61, 159, 116, 159, 188, 79, 188, 110, 190, 224, 177, 11, 190, 199, 168, 228, 189, 33, 117, 162, 62, 145, 197, 48, 191, 122, 151, 208, 60, 194, 192, 60, 190, 35, 148, 206, 190, 159, 140, 180, 189, 132, 175, 5, 189, 195, 156, 141, 190, 195, 112, 88, 189, 117, 55, 158, 190, 40, 239, 249, 189, 154, 80, 162, 190, 54, 40, 9, 191, 13, 86, 49, 62, 126, 89, 137, 191, 202, 88, 240, 189, 190, 175, 12, 62, 169, 247, 32, 190, 46, 140, 195, 61, 58, 148, 92, 189, 76, 178, 20, 60, 104, 54, 12, 191, 81, 154, 54, 189, 1, 24, 238, 189, 104, 102, 89, 188, 23, 140, 163, 61, 29, 5, 225, 189, 28, 35, 107, 62, 47, 190, 17, 62, 144, 255, 34, 62, 65, 136, 8, 190, 28, 25, 226, 189, 181, 226, 26, 189, 178, 224, 29, 62, 181, 73, 233, 61, 226, 54, 214, 189, 212, 205, 52, 189, 131, 104, 196, 61, 94, 193, 12, 62, 217, 75, 33, 190, 33, 88, 38, 190, 197, 81, 174, 61, 27, 134, 53, 61, 222, 155, 129, 61, 58, 43, 110, 188, 131, 64, 10, 62, 161, 255, 239, 60, 87, 28, 155, 189, 173, 160, 123, 60, 251, 105, 170, 61, 186, 83, 243, 61, 127, 141, 25, 189, 91, 89, 154, 188, 53, 160, 22, 190, 101, 9, 37, 190, 121, 221, 154, 61, 126, 185, 176, 189, 219, 216, 180, 188, 143, 42, 96, 60, 218, 169, 109, 189, 139, 50, 238, 189, 250, 255, 114, 190, 177, 220, 227, 189, 9, 51, 252, 60, 122, 99, 130, 62, 229, 17, 165, 60, 197, 14, 198, 190, 44, 45, 140, 190, 75, 100, 187, 61, 170, 120, 170, 62, 70, 132, 228, 190, 122, 71, 131, 190, 226, 168, 47, 62, 8, 6, 213, 190, 16, 106, 148, 61, 240, 247, 244, 189, 33, 199, 59, 191, 246, 248, 126, 61, 99, 30, 200, 190, 89, 71, 253, 189, 163, 131, 136, 62, 70, 99, 230, 190, 252, 240, 232, 188, 254, 62, 35, 190, 186, 238, 79, 62, 224, 27, 7, 189, 159, 161, 85, 61, 98, 240, 28, 62, 32, 144, 72, 62, 220, 96, 169, 62, 118, 130, 180, 189, 216, 196, 229, 61, 20, 208, 108, 62, 230, 251, 206, 61, 218, 192, 79, 190, 60, 39, 221, 188, 51, 54, 66, 62, 242, 41, 82, 191, 11, 242, 233, 189, 49, 54, 255, 61, 181, 100, 90, 61, 101, 189, 58, 62, 129, 120, 242, 188, 74, 120, 242, 60, 155, 10, 83, 62, 148, 194, 228, 189, 13, 10, 146, 62, 22, 136, 31, 188, 73, 113, 120, 191, 29, 68, 204, 61, 206, 12, 151, 191, 24, 191, 132, 190, 242, 230, 255, 61, 183, 240, 124, 188, 204, 65, 101, 188, 89, 80, 183, 61, 157, 156, 13, 62, 235, 160, 133, 190, 1, 11, 90, 61, 27, 191, 18, 190, 184, 65, 220, 61, 135, 236, 222, 61, 254, 244, 76, 190, 254, 20, 30, 62, 136, 149, 125, 189, 249, 29, 167, 189, 64, 128, 70, 190, 91, 68, 178, 189, 225, 161, 66, 190, 114, 194, 3, 62, 212, 34, 22, 189, 3, 126, 42, 62, 168, 26, 7, 61, 126, 144, 121, 61, 56, 80, 44, 62, 59, 41, 74, 62, 119, 176, 219, 61, 41, 58, 20, 62, 32, 167, 51, 190, 218, 227, 23, 190, 4, 113, 32, 62, 95, 244, 91, 189, 36, 11, 81, 62, 146, 193, 31, 189, 94, 8, 35, 190, 29, 230, 207, 61, 34, 144, 78, 190, 201, 21, 177, 61, 7, 78, 55, 190, 50, 1, 217, 61, 65, 246, 179, 189, 161, 77, 159, 189, 147, 112, 159, 190, 245, 92, 162, 61, 194, 122, 89, 189, 66, 160, 116, 190, 60, 20, 121, 190, 40, 60, 14, 190, 109, 142, 4, 62, 133, 154, 41, 190, 91, 170, 141, 61, 167, 214, 82, 190, 209, 49, 81, 189, 211, 89, 57, 190, 80, 108, 202, 61, 182, 181, 69, 190, 146, 80, 188, 190, 142, 89, 138, 190, 43, 247, 134, 190, 159, 141, 248, 189, 131, 106, 159, 62, 77, 34, 46, 189, 179, 193, 135, 190, 61, 138, 226, 189, 251, 172, 33, 189, 143, 39, 68, 62, 226, 13, 2, 61, 150, 117, 161, 61, 200, 181, 36, 190, 165, 121, 23, 61, 24, 225, 64, 62, 189, 90, 35, 61, 200, 99, 249, 61, 139, 121, 68, 191, 190, 172, 134, 62, 200, 222, 63, 190, 228, 173, 103, 61, 204, 110, 177, 62, 134, 88, 92, 190, 175, 22, 30, 62, 105, 69, 90, 62, 112, 238, 181, 60, 94, 111, 62, 189, 88, 152, 18, 191, 143, 112, 190, 190, 115, 103, 63, 190, 223, 238, 142, 190, 234, 59, 61, 190, 15, 18, 21, 62, 98, 251, 44, 62, 242, 99, 117, 61, 204, 93, 12, 62, 239, 119, 215, 189, 162, 120, 147, 190, 121, 94, 65, 190, 89, 233, 4, 190, 176, 130, 143, 62, 224, 86, 1, 190, 102, 92, 93, 190, 119, 12, 36, 62, 43, 2, 19, 62, 10, 173, 152, 61, 208, 243, 115, 190, 208, 195, 49, 190, 76, 212, 138, 189, 108, 68, 175, 189, 28, 142, 214, 188, 105, 194, 181, 188, 24, 204, 241, 61, 211, 108, 144, 190, 168, 27, 132, 62, 61, 20, 163, 190, 212, 220, 162, 61, 172, 144, 173, 186, 196, 180, 55, 62, 104, 227, 120, 191, 61, 112, 63, 190, 181, 128, 91, 189, 8, 6, 43, 190, 178, 0, 48, 62, 180, 241, 170, 190, 96, 238, 10, 190, 117, 200, 158, 189, 46, 11, 29, 62, 181, 133, 166, 61, 44, 9, 69, 191, 102, 85, 249, 190, 174, 147, 39, 62, 220, 163, 24, 191, 29, 198, 87, 189, 152, 27, 215, 62, 230, 45, 4, 189, 186, 198, 158, 62, 133, 46, 209, 189, 223, 250, 145, 62, 51, 218, 214, 190, 190, 81, 209, 61, 26, 118, 233, 190, 81, 26, 31, 62, 14, 175, 11, 62, 151, 98, 223, 62, 85, 3, 85, 60, 156, 43, 41, 62, 215, 70, 77, 190, 91, 142, 148, 190, 223, 61, 246, 61, 146, 232, 84, 62, 7, 17, 156, 191, 29, 64, 151, 189, 200, 14, 31, 61, 224, 107, 161, 190, 34, 124, 20, 62, 157, 53, 7, 190, 205, 156, 24, 190, 189, 171, 142, 61, 248, 165, 181, 189, 151, 211, 146, 62, 133, 150, 31, 191, 89, 72, 100, 191, 239, 169, 165, 189, 188, 85, 135, 191, 162, 180, 130, 190, 156, 12, 20, 62, 192, 175, 68, 189, 112, 55, 164, 62, 67, 67, 33, 190, 152, 37, 120, 62, 105, 16, 168, 190, 102, 136, 100, 62, 134, 11, 132, 190, 230, 27, 94, 62, 110, 142, 3, 62, 131, 131, 141, 62, 32, 14, 207, 62, 64, 209, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 79, 42, 189, 150, 26, 21, 190, 55, 62, 132, 61, 64, 22, 14, 190, 146, 221, 124, 188, 55, 89, 76, 62, 157, 100, 142, 60, 102, 253, 80, 62, 44, 142, 220, 61, 220, 90, 223, 61, 22, 153, 34, 190, 122, 78, 226, 187, 21, 28, 153, 62, 129, 8, 22, 61, 73, 23, 199, 61, 221, 30, 208, 188, 230, 95, 119, 59, 124, 135, 75, 62, 232, 4, 226, 61, 243, 110, 252, 189, 5, 239, 245, 61, 250, 97, 150, 189, 227, 197, 146, 62, 218, 58, 15, 62, 12, 213, 70, 188, 70, 136, 157, 188, 37, 99, 234, 189, 33, 199, 154, 61, 7, 102, 76, 61, 129, 82, 79, 62, 128, 112, 38, 62, 83, 241, 66, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 115, 137, 191, 7, 237, 185, 190, 18, 131, 143, 190, 222, 25, 84, 189, 156, 47, 78, 62, 243, 78, 177, 190, 143, 184, 179, 190, 70, 34, 105, 62, 168, 144, 163, 62, 123, 82, 47, 62, 96, 124, 62, 61, 220, 116, 133, 190, 49, 49, 167, 62, 179, 1, 138, 190, 239, 245, 205, 190, 66, 125, 10, 63, 8, 83, 118, 190, 72, 55, 24, 63, 151, 17, 216, 60, 17, 177, 246, 62, 101, 71, 219, 190, 58, 109, 235, 189, 213, 147, 56, 62, 48, 159, 12, 191, 104, 1, 178, 187, 106, 46, 46, 63, 254, 103, 146, 190, 207, 138, 134, 62, 65, 29, 233, 190, 180, 132, 133, 190, 208, 29, 31, 191, 183, 238, 79, 191, 61, 8, 218, 61, 143, 55, 197, 61, 139, 97, 177, 190, 242, 108, 18, 189, 113, 1, 120, 190, 64, 72, 111, 190, 110, 80, 222, 61, 59, 237, 46, 190, 150, 87, 201, 61, 53, 239, 42, 62, 90, 75, 6, 190, 83, 58, 66, 62, 239, 111, 96, 190, 123, 54, 252, 62, 231, 100, 125, 62, 170, 16, 220, 61, 168, 197, 149, 190, 247, 6, 182, 189, 10, 242, 112, 60, 228, 74, 162, 62, 241, 218, 104, 190, 147, 203, 37, 62, 215, 243, 30, 190, 165, 166, 14, 189, 161, 221, 245, 189, 76, 118, 145, 62, 87, 169, 82, 189, 65, 24, 138, 62, 17, 59, 8, 189, 138, 169, 105, 190, 106, 88, 126, 62, 55, 210, 164, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 186, 246, 61, 132, 63, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 69, 206, 190, 28, 215, 182, 62, 89, 5, 196, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 85, 220, 63, 250, 253, 68, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}