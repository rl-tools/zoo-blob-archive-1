// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 123, 10, 189, 79, 2, 228, 189, 33, 15, 13, 191, 194, 180, 156, 62, 146, 92, 5, 190, 45, 161, 223, 62, 180, 250, 110, 190, 112, 155, 4, 62, 51, 67, 241, 189, 44, 121, 76, 188, 192, 120, 206, 62, 168, 197, 213, 190, 122, 86, 128, 61, 170, 127, 250, 61, 227, 213, 184, 62, 187, 170, 119, 189, 129, 138, 221, 189, 132, 68, 17, 63, 102, 187, 1, 63, 88, 161, 15, 62, 212, 6, 247, 190, 101, 13, 135, 188, 227, 216, 75, 61, 18, 161, 223, 62, 116, 58, 195, 189, 252, 45, 19, 63, 187, 25, 29, 62, 231, 212, 53, 189, 126, 208, 43, 190, 114, 76, 103, 190, 183, 7, 144, 62, 201, 121, 10, 191, 131, 193, 152, 190, 27, 160, 157, 190, 6, 242, 210, 188, 157, 50, 107, 62, 46, 90, 185, 189, 196, 173, 184, 190, 47, 81, 244, 189, 129, 101, 173, 62, 237, 4, 217, 62, 93, 104, 16, 63, 228, 49, 27, 62, 124, 19, 47, 189, 132, 202, 36, 190, 215, 39, 78, 190, 219, 79, 193, 190, 33, 11, 11, 63, 162, 214, 156, 61, 181, 150, 199, 190, 186, 251, 26, 61, 189, 188, 96, 190, 148, 192, 4, 191, 73, 25, 59, 62, 28, 82, 174, 62, 80, 195, 211, 190, 145, 167, 141, 189, 77, 200, 250, 61, 220, 133, 194, 62, 186, 31, 86, 189, 117, 6, 12, 191, 24, 95, 211, 190, 32, 168, 162, 61, 142, 104, 76, 190, 88, 99, 17, 191, 19, 211, 159, 190, 205, 15, 13, 63, 234, 119, 171, 62, 33, 126, 3, 191, 88, 181, 6, 63, 115, 79, 142, 61, 206, 202, 242, 62, 146, 234, 209, 61, 103, 17, 1, 190, 195, 116, 241, 62, 226, 183, 96, 62, 237, 254, 83, 62, 72, 197, 200, 62, 210, 131, 201, 190, 99, 134, 161, 62, 253, 10, 14, 190, 32, 232, 230, 62, 247, 17, 169, 62, 67, 237, 222, 62, 30, 234, 216, 190, 21, 152, 16, 63, 218, 253, 21, 62, 253, 17, 87, 190, 244, 91, 65, 189, 215, 41, 1, 190, 171, 212, 159, 62, 112, 235, 167, 190, 49, 147, 194, 62, 129, 86, 232, 190, 99, 75, 7, 61, 188, 220, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 162, 19, 191, 105, 111, 38, 190, 88, 1, 242, 62, 53, 206, 194, 62, 121, 147, 81, 190, 46, 93, 2, 191, 96, 174, 250, 62, 90, 153, 5, 63, 85, 123, 234, 62, 147, 95, 108, 61, 214, 142, 169, 62, 197, 0, 242, 62, 205, 195, 31, 62, 7, 205, 224, 190, 161, 39, 11, 191, 237, 198, 215, 190, 9, 128, 8, 191, 33, 74, 154, 190, 38, 253, 4, 63, 121, 33, 148, 62, 72, 54, 243, 61, 6, 122, 130, 60, 115, 67, 8, 63, 100, 37, 134, 190, 198, 202, 72, 62, 94, 203, 91, 62, 49, 127, 255, 190, 189, 130, 185, 188, 164, 61, 254, 62, 94, 210, 118, 59, 180, 166, 114, 61, 107, 157, 0, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 93, 3, 62, 230, 137, 3, 62, 97, 70, 34, 62, 232, 176, 234, 61, 208, 104, 32, 190, 60, 197, 201, 61, 117, 176, 22, 62, 214, 68, 46, 62, 66, 56, 49, 61, 37, 39, 161, 189, 71, 25, 10, 62, 247, 27, 141, 187, 221, 146, 209, 61, 238, 159, 37, 190, 17, 183, 113, 61, 76, 192, 215, 61, 175, 66, 199, 188, 198, 61, 209, 189, 130, 26, 122, 61, 119, 46, 251, 189, 37, 189, 236, 189, 14, 12, 2, 189, 72, 14, 218, 189, 72, 38, 26, 190, 176, 33, 42, 189, 58, 241, 47, 62, 233, 120, 139, 189, 140, 99, 8, 190, 233, 74, 13, 62, 244, 142, 186, 61, 44, 157, 232, 61, 149, 133, 249, 61, 2, 239, 41, 190, 109, 22, 66, 61, 107, 114, 37, 190, 254, 59, 24, 62, 37, 121, 150, 61, 182, 191, 198, 189, 76, 110, 203, 189, 232, 104, 118, 60, 64, 162, 157, 188, 83, 25, 193, 61, 211, 172, 69, 61, 147, 25, 129, 61, 103, 208, 10, 190, 75, 159, 141, 189, 188, 165, 202, 189, 176, 255, 164, 61, 199, 153, 35, 189, 169, 71, 204, 61, 255, 7, 242, 189, 129, 8, 190, 60, 58, 91, 185, 189, 202, 218, 23, 190, 219, 132, 23, 62, 198, 37, 68, 186, 129, 233, 27, 62, 205, 229, 166, 188, 217, 190, 49, 190, 43, 120, 46, 62, 124, 255, 27, 62, 138, 38, 206, 188, 59, 178, 196, 189, 196, 239, 3, 62, 81, 28, 158, 189, 227, 15, 15, 186, 44, 161, 165, 60, 159, 215, 62, 61, 58, 94, 48, 189, 26, 105, 26, 61, 239, 135, 170, 60, 96, 14, 26, 190, 195, 193, 157, 61, 231, 7, 151, 189, 40, 128, 239, 61, 177, 241, 140, 61, 237, 202, 38, 190, 21, 205, 152, 188, 49, 128, 224, 61, 213, 177, 8, 60, 193, 52, 12, 190, 113, 89, 132, 61, 145, 82, 114, 60, 134, 242, 251, 60, 147, 11, 24, 60, 255, 235, 91, 61, 169, 39, 6, 62, 170, 174, 11, 189, 145, 133, 53, 189, 133, 13, 213, 61, 12, 145, 216, 61, 199, 216, 75, 189, 244, 112, 140, 61, 147, 118, 65, 189, 214, 100, 214, 189, 30, 161, 26, 190, 159, 61, 63, 189, 68, 42, 52, 62, 135, 143, 98, 189, 191, 145, 23, 190, 175, 22, 243, 189, 63, 10, 45, 190, 181, 45, 217, 188, 61, 136, 192, 189, 164, 10, 212, 59, 64, 220, 11, 190, 104, 132, 168, 61, 223, 238, 32, 190, 93, 165, 55, 188, 150, 13, 104, 61, 187, 4, 107, 61, 43, 126, 24, 190, 136, 14, 151, 189, 242, 245, 195, 189, 76, 254, 29, 62, 74, 120, 31, 190, 198, 212, 23, 189, 151, 203, 49, 189, 44, 130, 37, 190, 76, 27, 30, 190, 212, 78, 131, 61, 211, 251, 62, 189, 48, 16, 46, 62, 40, 119, 25, 190, 249, 123, 2, 190, 14, 218, 52, 190, 177, 233, 201, 61, 65, 32, 201, 189, 82, 205, 113, 61, 239, 169, 222, 61, 135, 108, 11, 62, 27, 255, 49, 190, 146, 98, 119, 189, 173, 164, 20, 189, 240, 123, 52, 189, 51, 144, 243, 61, 218, 78, 51, 62, 222, 187, 160, 60, 118, 100, 200, 189, 111, 223, 27, 190, 18, 196, 40, 189, 25, 105, 243, 61, 59, 77, 143, 188, 97, 63, 29, 62, 204, 183, 178, 188, 139, 21, 240, 188, 212, 202, 133, 189, 19, 150, 40, 62, 166, 234, 227, 61, 198, 106, 225, 61, 106, 35, 212, 61, 236, 66, 208, 60, 122, 173, 45, 190, 236, 37, 235, 61, 242, 228, 112, 61, 12, 144, 164, 189, 37, 112, 170, 61, 166, 248, 76, 61, 174, 153, 79, 189, 157, 108, 5, 190, 92, 21, 231, 61, 96, 220, 131, 189, 13, 118, 215, 61, 238, 144, 144, 61, 213, 71, 12, 190, 182, 66, 200, 189, 69, 36, 6, 190, 148, 190, 208, 189, 49, 64, 213, 189, 135, 226, 26, 61, 139, 242, 29, 190, 33, 25, 27, 190, 103, 27, 97, 189, 230, 164, 35, 62, 241, 19, 34, 189, 234, 0, 129, 188, 178, 168, 18, 62, 78, 228, 9, 62, 250, 40, 10, 62, 64, 167, 110, 189, 37, 222, 170, 61, 199, 225, 38, 61, 42, 90, 145, 189, 139, 239, 76, 61, 84, 136, 32, 62, 125, 240, 29, 62, 102, 173, 159, 60, 223, 165, 19, 190, 124, 155, 211, 189, 158, 217, 182, 61, 219, 157, 176, 61, 101, 239, 32, 190, 174, 19, 97, 189, 166, 90, 143, 189, 211, 102, 45, 190, 127, 238, 69, 61, 179, 85, 98, 61, 70, 203, 146, 189, 30, 204, 235, 189, 247, 127, 170, 189, 3, 115, 25, 62, 103, 133, 13, 190, 15, 110, 67, 61, 111, 215, 47, 61, 95, 142, 157, 189, 232, 125, 62, 189, 145, 228, 136, 61, 23, 200, 51, 190, 195, 217, 104, 188, 149, 27, 15, 62, 28, 251, 44, 190, 111, 203, 238, 189, 131, 214, 138, 61, 21, 190, 251, 189, 176, 131, 252, 189, 248, 68, 192, 189, 252, 75, 42, 61, 185, 99, 28, 62, 223, 150, 25, 61, 8, 208, 42, 190, 15, 194, 237, 61, 80, 33, 183, 189, 153, 138, 184, 61, 168, 226, 51, 190, 57, 146, 148, 61, 66, 88, 25, 190, 21, 6, 176, 61, 2, 208, 148, 189, 75, 1, 129, 189, 172, 59, 22, 190, 26, 1, 220, 189, 117, 180, 250, 61, 212, 185, 191, 61, 195, 196, 192, 61, 13, 13, 42, 62, 143, 113, 227, 61, 68, 226, 239, 61, 73, 95, 2, 61, 146, 25, 214, 60, 129, 245, 16, 62, 121, 205, 39, 62, 172, 169, 179, 188, 163, 61, 29, 62, 85, 113, 8, 190, 197, 191, 30, 189, 160, 213, 20, 190, 8, 210, 7, 190, 240, 168, 160, 189, 193, 152, 125, 189, 55, 68, 140, 189, 42, 102, 137, 61, 80, 237, 183, 61, 164, 27, 175, 61, 54, 96, 39, 190, 141, 103, 52, 189, 39, 233, 188, 61, 210, 99, 123, 188, 39, 31, 15, 190, 49, 138, 117, 189, 211, 196, 226, 61, 167, 53, 239, 189, 184, 14, 31, 190, 237, 153, 100, 60, 11, 105, 199, 61, 216, 127, 4, 190, 166, 124, 139, 188, 218, 77, 27, 190, 142, 91, 205, 61, 171, 31, 231, 189, 88, 238, 178, 61, 249, 237, 200, 61, 183, 205, 17, 189, 152, 13, 115, 189, 221, 143, 122, 61, 203, 14, 26, 188, 50, 110, 83, 59, 22, 143, 3, 62, 231, 243, 12, 62, 18, 206, 45, 62, 30, 253, 21, 190, 120, 24, 102, 60, 80, 214, 12, 190, 59, 174, 37, 189, 112, 165, 79, 61, 92, 12, 14, 189, 214, 123, 22, 62, 247, 45, 176, 188, 44, 107, 255, 189, 48, 114, 254, 60, 93, 237, 43, 190, 62, 236, 21, 190, 49, 161, 16, 61, 162, 37, 37, 190, 198, 131, 249, 61, 128, 250, 2, 190, 34, 230, 32, 190, 16, 21, 34, 190, 218, 208, 9, 190, 132, 61, 83, 61, 202, 228, 11, 190, 180, 19, 229, 189, 121, 116, 177, 189, 5, 29, 180, 187, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 118, 123, 180, 60, 106, 16, 232, 61, 136, 121, 23, 190, 187, 199, 161, 60, 239, 120, 148, 189, 4, 227, 204, 189, 250, 150, 179, 61, 43, 180, 28, 190, 22, 159, 221, 61, 179, 156, 137, 61, 243, 204, 143, 61, 83, 230, 98, 189, 206, 25, 0, 190, 132, 206, 87, 61, 86, 35, 151, 60, 224, 142, 100, 60, 76, 248, 88, 61, 30, 153, 31, 61, 141, 122, 191, 61, 204, 71, 42, 190, 235, 211, 64, 60, 71, 4, 46, 62, 187, 178, 22, 62, 29, 201, 26, 189, 230, 251, 20, 190, 207, 86, 228, 189, 19, 156, 42, 189, 206, 101, 180, 188, 9, 102, 118, 61, 236, 159, 250, 189, 18, 194, 17, 190, 173, 119, 31, 62, 31, 168, 14, 187, 225, 239, 44, 190, 70, 63, 212, 189, 4, 128, 17, 62, 132, 184, 23, 190, 148, 153, 4, 190, 227, 170, 206, 61, 77, 246, 247, 60, 91, 141, 17, 189, 251, 224, 180, 189, 206, 248, 48, 190, 13, 35, 15, 62, 152, 67, 51, 189, 223, 218, 51, 62, 241, 12, 50, 189, 80, 20, 24, 190, 232, 92, 145, 187, 147, 143, 43, 61, 162, 132, 18, 61, 3, 142, 38, 62, 135, 62, 42, 59, 229, 244, 48, 62, 231, 173, 22, 189, 18, 201, 177, 61, 109, 150, 227, 189, 72, 229, 235, 61, 165, 236, 46, 190, 170, 192, 33, 62, 37, 175, 218, 60, 181, 188, 108, 58, 38, 205, 202, 188, 30, 210, 108, 61, 89, 149, 51, 62, 127, 178, 104, 189, 140, 177, 2, 62, 54, 226, 155, 61, 134, 81, 224, 61, 170, 154, 150, 189, 195, 93, 170, 61, 116, 225, 43, 62, 161, 216, 183, 61, 57, 129, 4, 62, 135, 114, 215, 61, 127, 236, 44, 189, 205, 164, 231, 60, 77, 232, 148, 61, 90, 31, 79, 189, 118, 111, 128, 61, 40, 13, 139, 61, 149, 76, 14, 190, 133, 44, 182, 59, 196, 13, 206, 61, 95, 179, 104, 189, 59, 188, 232, 61, 82, 9, 104, 61, 50, 228, 49, 188, 224, 44, 79, 189, 204, 204, 29, 190, 180, 2, 23, 62, 28, 124, 15, 62, 104, 137, 22, 60, 195, 249, 162, 189, 219, 82, 212, 60, 205, 93, 7, 61, 214, 71, 83, 60, 61, 7, 233, 59, 26, 228, 174, 60, 190, 130, 52, 189, 199, 100, 33, 60, 56, 154, 199, 61, 98, 175, 7, 61, 63, 217, 191, 189, 188, 152, 38, 189, 151, 141, 48, 190, 9, 122, 107, 189, 51, 183, 21, 61, 67, 171, 27, 190, 137, 83, 249, 61, 164, 184, 24, 62, 91, 85, 136, 189, 143, 144, 46, 62, 56, 235, 83, 189, 112, 232, 48, 190, 184, 124, 3, 62, 5, 88, 167, 60, 42, 34, 231, 60, 169, 165, 177, 61, 221, 48, 44, 62, 105, 194, 249, 189, 30, 14, 230, 189, 166, 225, 144, 60, 212, 150, 193, 189, 23, 33, 47, 62, 155, 229, 182, 60, 114, 174, 240, 61, 47, 194, 15, 190, 28, 233, 192, 61, 144, 224, 169, 189, 236, 141, 50, 189, 247, 181, 193, 189, 75, 196, 245, 189, 170, 118, 1, 62, 175, 189, 36, 61, 95, 208, 140, 188, 4, 233, 59, 189, 123, 104, 90, 61, 208, 166, 143, 189, 33, 79, 11, 190, 160, 8, 128, 189, 174, 74, 63, 61, 233, 254, 45, 190, 149, 33, 32, 190, 175, 122, 141, 61, 129, 96, 102, 188, 170, 209, 26, 190, 11, 253, 141, 189, 124, 196, 158, 61, 152, 18, 181, 61, 12, 31, 151, 187, 82, 127, 170, 189, 217, 153, 46, 62, 70, 3, 39, 190, 176, 116, 196, 189, 156, 72, 160, 188, 125, 138, 31, 189, 36, 96, 16, 62, 11, 136, 8, 62, 59, 121, 165, 61, 199, 254, 5, 189, 251, 8, 49, 189, 132, 56, 4, 62, 24, 66, 36, 61, 128, 4, 252, 61, 191, 59, 193, 189, 1, 140, 186, 189, 117, 57, 155, 188, 126, 99, 179, 61, 184, 93, 18, 189, 125, 10, 220, 61, 160, 7, 51, 190, 15, 16, 73, 189, 20, 18, 51, 190, 141, 48, 153, 61, 14, 192, 160, 189, 32, 148, 196, 189, 81, 162, 8, 61, 18, 91, 182, 189, 29, 78, 166, 61, 122, 200, 151, 61, 182, 79, 60, 61, 136, 97, 51, 190, 100, 20, 32, 190, 73, 98, 21, 190, 164, 38, 42, 61, 223, 143, 189, 189, 115, 197, 97, 188, 89, 153, 186, 188, 58, 79, 133, 61, 59, 216, 236, 61, 121, 123, 36, 190, 156, 208, 145, 61, 22, 151, 17, 190, 0, 157, 170, 61, 70, 138, 151, 61, 247, 147, 49, 62, 246, 194, 186, 189, 202, 20, 83, 188, 148, 3, 32, 190, 204, 197, 3, 190, 249, 155, 224, 189, 37, 151, 37, 62, 139, 229, 173, 61, 12, 144, 24, 62, 229, 48, 35, 62, 142, 224, 35, 61, 229, 237, 211, 188, 219, 64, 141, 61, 218, 162, 204, 189, 113, 133, 190, 60, 55, 74, 25, 190, 23, 173, 152, 189, 236, 2, 77, 61, 19, 193, 233, 61, 103, 152, 136, 189, 9, 209, 17, 62, 202, 153, 197, 61, 67, 137, 5, 190, 90, 0, 130, 189, 143, 69, 38, 62, 6, 203, 62, 189, 94, 49, 222, 189, 50, 45, 36, 190, 111, 136, 15, 62, 98, 15, 189, 61, 255, 190, 12, 62, 113, 255, 36, 189, 166, 17, 195, 60, 87, 95, 67, 188, 67, 68, 69, 61, 224, 168, 30, 62, 229, 41, 50, 62, 63, 73, 203, 188, 32, 189, 253, 61, 88, 21, 228, 189, 221, 216, 131, 189, 1, 241, 10, 190, 60, 104, 105, 189, 37, 246, 48, 61, 139, 16, 159, 189, 95, 132, 83, 189, 68, 24, 124, 61, 186, 198, 171, 189, 105, 147, 147, 189, 169, 11, 43, 190, 119, 137, 47, 190, 10, 211, 80, 59, 235, 72, 43, 62, 30, 42, 19, 190, 120, 207, 87, 61, 143, 145, 250, 189, 96, 231, 16, 189, 233, 203, 198, 61, 255, 84, 12, 62, 238, 114, 243, 189, 44, 23, 101, 61, 18, 211, 159, 189, 81, 177, 156, 61, 31, 67, 0, 61, 147, 203, 21, 190, 204, 171, 12, 60, 14, 149, 89, 61, 115, 31, 157, 61, 200, 141, 213, 60, 67, 200, 167, 61, 130, 158, 51, 62, 76, 1, 53, 62, 184, 113, 106, 189, 121, 155, 249, 60, 2, 41, 38, 190, 11, 226, 223, 61, 181, 7, 229, 189, 247, 196, 99, 189, 132, 197, 33, 190, 24, 127, 128, 60, 160, 175, 251, 189, 246, 93, 90, 188, 237, 138, 23, 62, 209, 0, 15, 61, 78, 199, 240, 189, 33, 130, 78, 61, 193, 169, 220, 189, 120, 61, 157, 60, 200, 141, 34, 62, 231, 165, 196, 61, 238, 101, 46, 190, 225, 83, 51, 189, 123, 26, 175, 189, 222, 161, 28, 190, 58, 217, 7, 190, 191, 130, 43, 62, 218, 7, 230, 60, 207, 22, 96, 189, 225, 65, 192, 61, 7, 243, 15, 190, 56, 23, 20, 62, 181, 247, 93, 189, 123, 20, 35, 189, 15, 161, 235, 61, 157, 198, 239, 61, 159, 5, 23, 190, 137, 175, 79, 187, 227, 38, 255, 61, 199, 8, 48, 62, 145, 188, 225, 60, 29, 94, 210, 188, 130, 58, 186, 61, 176, 221, 242, 189, 196, 58, 224, 189, 95, 75, 196, 61, 112, 27, 224, 61, 94, 75, 33, 189, 74, 29, 141, 60, 6, 93, 56, 189, 177, 203, 227, 61, 21, 179, 51, 190, 134, 35, 167, 189, 44, 131, 31, 62, 230, 241, 227, 60, 84, 176, 186, 189, 160, 56, 251, 189, 190, 167, 179, 189, 104, 84, 253, 188, 172, 200, 137, 188, 233, 64, 36, 62, 221, 95, 129, 61, 203, 152, 109, 187, 186, 11, 249, 189, 8, 50, 178, 61, 234, 52, 147, 61, 224, 80, 11, 189, 56, 136, 55, 61, 135, 226, 89, 60, 142, 91, 14, 62, 28, 135, 217, 189, 58, 208, 117, 189, 62, 211, 71, 61, 79, 35, 62, 61, 28, 191, 214, 189, 13, 92, 12, 62, 63, 23, 164, 188, 202, 191, 146, 189, 248, 196, 205, 189, 159, 0, 173, 189, 78, 197, 242, 61, 165, 6, 16, 61, 59, 181, 39, 190, 29, 233, 37, 62, 108, 253, 21, 61, 255, 19, 178, 189, 123, 164, 45, 190, 223, 42, 124, 188, 104, 42, 252, 61, 147, 68, 119, 61, 123, 70, 186, 189, 145, 23, 181, 61, 194, 187, 30, 62, 160, 249, 241, 188, 124, 170, 100, 189, 183, 153, 85, 61, 144, 22, 235, 58, 110, 218, 189, 61, 82, 17, 145, 189, 117, 128, 183, 189, 36, 157, 6, 190, 47, 225, 7, 62, 200, 30, 49, 188, 211, 68, 8, 61, 126, 163, 49, 190, 184, 84, 32, 62, 255, 147, 225, 60, 255, 42, 58, 59, 138, 17, 100, 60, 178, 163, 195, 189, 28, 156, 25, 189, 215, 0, 170, 61, 167, 5, 144, 60, 254, 27, 184, 189, 95, 165, 43, 190, 32, 241, 1, 190, 200, 130, 232, 189, 233, 202, 140, 60, 171, 244, 1, 59, 119, 15, 192, 61, 75, 137, 52, 60, 237, 246, 131, 189, 143, 25, 31, 189, 187, 97, 46, 190, 47, 71, 3, 190, 46, 184, 253, 189, 175, 77, 171, 189, 94, 171, 165, 189, 86, 64, 36, 190, 143, 34, 215, 188, 28, 107, 19, 190, 56, 139, 3, 62, 181, 231, 225, 189, 116, 9, 150, 189, 145, 82, 17, 62, 111, 89, 245, 61, 202, 102, 136, 188, 72, 22, 44, 62, 97, 122, 111, 189, 3, 195, 242, 189, 122, 130, 29, 61, 161, 26, 23, 60, 155, 137, 24, 62, 143, 12, 205, 61, 220, 101, 46, 190, 166, 17, 33, 189, 125, 43, 242, 189, 56, 203, 92, 189, 11, 90, 49, 190, 238, 129, 172, 189, 90, 102, 128, 189, 2, 117, 4, 190, 175, 156, 241, 188, 189, 254, 147, 188, 97, 79, 144, 61, 0, 251, 239, 189, 232, 255, 240, 189, 83, 110, 117, 59, 228, 86, 27, 60, 191, 78, 210, 189, 101, 203, 24, 62, 213, 1, 154, 61, 209, 1, 178, 189, 32, 131, 116, 61, 251, 53, 173, 189, 197, 217, 254, 189, 210, 220, 50, 190, 47, 77, 8, 190, 25, 116, 33, 62, 213, 218, 138, 61, 170, 56, 127, 60, 250, 156, 48, 190, 209, 5, 138, 60, 205, 17, 195, 188, 204, 177, 48, 60, 196, 202, 238, 189, 215, 187, 182, 61, 217, 19, 37, 190, 59, 165, 27, 190, 85, 182, 30, 62, 165, 41, 195, 188, 13, 86, 49, 62, 76, 19, 48, 190, 53, 139, 165, 59, 119, 69, 101, 61, 144, 77, 48, 189, 139, 232, 71, 189, 123, 105, 13, 189, 125, 3, 145, 189, 132, 246, 139, 57, 120, 69, 224, 189, 32, 205, 217, 61, 237, 164, 46, 190, 228, 162, 35, 62, 44, 208, 44, 190, 20, 35, 37, 62, 212, 116, 139, 61, 161, 134, 45, 62, 228, 170, 5, 190, 199, 173, 200, 189, 215, 12, 227, 188, 92, 241, 34, 62, 203, 23, 239, 61, 0, 122, 194, 189, 234, 82, 37, 189, 115, 0, 205, 61, 134, 45, 24, 62, 57, 154, 22, 190, 95, 188, 34, 190, 77, 37, 202, 61, 32, 38, 56, 61, 109, 65, 142, 61, 156, 212, 225, 187, 131, 64, 10, 62, 89, 78, 21, 61, 35, 88, 132, 189, 87, 36, 221, 60, 35, 253, 191, 61, 146, 218, 5, 62, 188, 194, 220, 188, 221, 15, 152, 188, 145, 33, 17, 190, 166, 84, 36, 190, 13, 30, 175, 61, 126, 185, 176, 189, 63, 9, 179, 188, 12, 99, 205, 60, 18, 96, 103, 189, 177, 123, 214, 189, 120, 49, 205, 189, 196, 8, 67, 61, 218, 113, 42, 190, 23, 67, 19, 62, 144, 254, 8, 62, 221, 124, 202, 189, 223, 35, 192, 188, 24, 31, 44, 60, 41, 155, 17, 62, 251, 219, 51, 190, 183, 65, 255, 61, 42, 93, 235, 188, 235, 102, 149, 61, 203, 233, 71, 189, 133, 242, 94, 189, 159, 232, 46, 190, 246, 248, 126, 61, 149, 119, 105, 61, 18, 124, 26, 190, 119, 124, 235, 61, 217, 204, 150, 59, 112, 157, 166, 189, 213, 157, 17, 190, 6, 237, 137, 59, 101, 159, 5, 61, 11, 82, 146, 189, 108, 198, 241, 189, 88, 110, 128, 59, 194, 177, 230, 61, 218, 80, 154, 189, 46, 38, 236, 60, 58, 232, 253, 61, 99, 20, 24, 62, 4, 249, 23, 60, 189, 134, 170, 188, 154, 213, 35, 62, 242, 112, 203, 189, 241, 247, 142, 189, 57, 118, 42, 62, 56, 106, 11, 62, 99, 173, 0, 61, 64, 42, 18, 62, 75, 172, 35, 62, 70, 78, 165, 61, 198, 66, 144, 59, 209, 212, 204, 61, 157, 2, 40, 62, 137, 19, 26, 190, 29, 68, 204, 61, 115, 65, 249, 61, 10, 213, 7, 190, 7, 178, 168, 61, 111, 43, 223, 189, 67, 171, 55, 189, 196, 53, 7, 62, 53, 189, 38, 189, 94, 170, 76, 189, 98, 6, 223, 189, 48, 77, 168, 61, 59, 67, 35, 190, 155, 88, 127, 189, 134, 248, 51, 190, 248, 226, 127, 61, 90, 95, 166, 189, 23, 3, 85, 189, 85, 192, 127, 189, 129, 159, 144, 189, 47, 249, 190, 60, 215, 4, 145, 61, 119, 149, 49, 61, 182, 91, 137, 58, 234, 109, 132, 189, 193, 78, 19, 61, 155, 77, 8, 190, 232, 142, 5, 62, 168, 112, 146, 61, 254, 206, 30, 61, 235, 41, 19, 61, 225, 164, 132, 188, 174, 89, 202, 61, 11, 51, 51, 189, 164, 230, 178, 61, 179, 83, 24, 190, 82, 75, 50, 62, 130, 70, 54, 187, 47, 65, 156, 189, 5, 47, 228, 60, 18, 126, 56, 61, 199, 32, 133, 61, 16, 210, 39, 61, 164, 142, 222, 189, 56, 198, 1, 61, 204, 81, 67, 61, 247, 242, 102, 189, 70, 52, 253, 189, 71, 71, 200, 189, 139, 77, 94, 61, 129, 220, 211, 58, 189, 90, 106, 189, 167, 210, 57, 61, 76, 37, 8, 190, 170, 122, 232, 189, 172, 207, 155, 189, 149, 55, 6, 62, 24, 68, 151, 189, 149, 187, 55, 189, 187, 178, 4, 190, 228, 231, 199, 189, 67, 151, 68, 189, 165, 133, 18, 62, 143, 133, 14, 60, 174, 193, 45, 190, 158, 95, 245, 189, 185, 4, 48, 62, 130, 79, 248, 61, 97, 64, 226, 189, 246, 111, 245, 61, 170, 232, 180, 186, 152, 119, 12, 62, 123, 93, 179, 188, 227, 194, 105, 61, 226, 165, 143, 187, 180, 158, 14, 190, 253, 168, 51, 61, 152, 136, 17, 61, 99, 185, 71, 60, 46, 70, 49, 62, 48, 255, 3, 190, 182, 33, 45, 62, 44, 203, 238, 61, 249, 23, 156, 189, 43, 224, 133, 189, 13, 247, 41, 190, 28, 175, 234, 189, 65, 149, 14, 190, 64, 154, 107, 189, 145, 55, 1, 190, 100, 9, 238, 61, 118, 3, 155, 61, 165, 181, 35, 61, 199, 135, 216, 187, 41, 114, 54, 189, 175, 68, 28, 190, 175, 201, 44, 190, 89, 233, 4, 190, 154, 120, 130, 189, 154, 223, 32, 190, 225, 75, 190, 189, 3, 49, 248, 188, 215, 24, 167, 189, 221, 15, 20, 62, 142, 144, 48, 190, 218, 37, 217, 61, 33, 70, 254, 61, 158, 248, 27, 61, 91, 5, 119, 61, 133, 75, 50, 189, 125, 52, 186, 189, 69, 132, 43, 189, 209, 217, 20, 62, 18, 7, 237, 189, 102, 64, 150, 61, 244, 253, 23, 190, 0, 234, 113, 60, 14, 3, 14, 189, 88, 104, 107, 189, 163, 77, 9, 189, 119, 139, 47, 62, 122, 40, 0, 62, 59, 119, 48, 190, 120, 157, 27, 189, 154, 160, 95, 188, 248, 254, 97, 61, 235, 112, 67, 189, 101, 220, 181, 189, 82, 222, 205, 189, 179, 77, 39, 62, 32, 51, 168, 189, 156, 157, 134, 189, 182, 19, 0, 62, 72, 213, 183, 189, 17, 90, 181, 188, 10, 197, 4, 190, 140, 78, 18, 62, 243, 105, 67, 60, 31, 178, 190, 187, 108, 152, 255, 61, 41, 234, 158, 189, 110, 53, 242, 61, 72, 237, 155, 60, 183, 103, 120, 189, 219, 82, 170, 60, 57, 60, 216, 189, 182, 122, 115, 189, 236, 17, 164, 61, 132, 57, 238, 61, 154, 219, 24, 190, 225, 154, 91, 189, 247, 106, 222, 61, 60, 122, 234, 189, 254, 238, 16, 62, 181, 141, 204, 61, 139, 35, 200, 59, 96, 29, 251, 61, 78, 144, 161, 189, 224, 137, 93, 189, 199, 31, 65, 189, 13, 150, 2, 190, 239, 169, 165, 189, 12, 54, 234, 189, 102, 250, 22, 190, 108, 245, 30, 61, 31, 134, 99, 189, 227, 144, 17, 62, 79, 13, 2, 190, 240, 87, 28, 190, 192, 7, 54, 60, 133, 190, 91, 61, 42, 4, 223, 61, 82, 251, 28, 190, 200, 34, 18, 62, 87, 166, 12, 61, 217, 51, 0, 62, 17, 37, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 37, 44, 190, 4, 148, 142, 189, 244, 147, 229, 188, 64, 22, 14, 190, 253, 181, 37, 190, 217, 5, 187, 59, 225, 160, 55, 189, 233, 220, 77, 61, 134, 8, 224, 188, 238, 118, 233, 61, 36, 51, 13, 190, 233, 130, 33, 62, 237, 230, 9, 62, 191, 8, 192, 61, 208, 236, 7, 61, 186, 211, 71, 188, 234, 203, 86, 189, 118, 14, 28, 189, 51, 184, 33, 62, 174, 77, 217, 60, 218, 172, 131, 61, 250, 97, 150, 189, 20, 43, 9, 62, 25, 8, 52, 62, 127, 9, 16, 59, 32, 210, 52, 190, 152, 29, 19, 190, 20, 167, 164, 61, 115, 213, 155, 61, 226, 179, 204, 61, 87, 166, 67, 61, 82, 143, 6, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 86, 39, 190, 85, 197, 13, 190, 213, 227, 37, 190, 222, 25, 84, 189, 132, 155, 15, 62, 125, 206, 201, 189, 167, 71, 185, 189, 15, 181, 0, 62, 217, 241, 232, 58, 69, 105, 47, 62, 85, 41, 93, 61, 8, 3, 176, 189, 143, 116, 46, 62, 26, 34, 161, 189, 147, 79, 105, 189, 38, 199, 173, 61, 24, 161, 242, 189, 71, 74, 133, 61, 73, 250, 46, 189, 146, 70, 176, 61, 110, 158, 1, 190, 58, 109, 235, 189, 128, 89, 5, 62, 90, 112, 46, 190, 90, 124, 162, 187, 233, 24, 201, 61, 1, 88, 150, 189, 88, 98, 202, 61, 118, 2, 245, 189, 77, 71, 195, 188, 104, 250, 131, 189, 120, 6, 26, 190, 135, 47, 45, 61, 196, 161, 109, 188, 48, 189, 44, 190, 242, 108, 18, 189, 10, 0, 12, 190, 68, 95, 186, 189, 204, 61, 145, 58, 62, 81, 234, 189, 135, 200, 41, 61, 181, 218, 42, 62, 197, 225, 13, 190, 70, 76, 11, 62, 230, 14, 247, 189, 141, 49, 10, 62, 64, 37, 13, 62, 242, 21, 27, 62, 20, 120, 24, 190, 192, 131, 22, 189, 171, 208, 98, 61, 171, 175, 6, 62, 224, 195, 28, 190, 147, 203, 37, 62, 174, 227, 182, 189, 109, 208, 98, 189, 198, 158, 2, 190, 143, 97, 137, 61, 212, 242, 109, 189, 94, 111, 22, 62, 179, 111, 233, 189, 149, 174, 28, 190, 29, 49, 231, 61, 74, 178, 242, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 239, 20, 61, 68, 61, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {101, 149, 236, 191, 57, 172, 91, 63, 70, 212, 39, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 11, 133, 190, 128, 48, 25, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}