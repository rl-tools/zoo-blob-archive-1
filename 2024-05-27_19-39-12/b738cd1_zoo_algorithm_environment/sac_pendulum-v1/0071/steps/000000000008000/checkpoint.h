// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 19, 1, 63, 83, 84, 246, 190, 1, 201, 247, 190, 182, 245, 185, 60, 20, 254, 60, 191, 5, 230, 218, 62, 161, 246, 77, 190, 82, 252, 218, 189, 226, 176, 182, 189, 210, 157, 167, 189, 22, 43, 164, 62, 228, 16, 16, 191, 45, 80, 134, 190, 104, 139, 124, 63, 11, 226, 5, 63, 54, 25, 244, 61, 40, 143, 184, 189, 21, 39, 17, 63, 221, 41, 51, 63, 219, 9, 99, 191, 134, 120, 172, 190, 21, 89, 85, 61, 32, 193, 78, 63, 121, 254, 160, 62, 248, 132, 26, 190, 135, 124, 119, 63, 165, 169, 40, 62, 59, 25, 211, 62, 116, 79, 128, 191, 228, 238, 77, 190, 123, 222, 182, 62, 174, 212, 128, 191, 62, 243, 121, 190, 31, 43, 203, 190, 130, 187, 4, 63, 31, 237, 169, 61, 43, 202, 7, 62, 196, 222, 12, 191, 130, 53, 248, 61, 44, 180, 79, 63, 102, 168, 2, 63, 70, 12, 13, 63, 75, 197, 23, 63, 161, 123, 61, 191, 43, 97, 117, 190, 57, 55, 37, 191, 236, 49, 33, 190, 241, 170, 106, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 216, 115, 198, 190, 113, 181, 58, 191, 137, 13, 70, 63, 79, 129, 21, 63, 63, 238, 30, 191, 88, 180, 119, 62, 223, 249, 176, 62, 79, 135, 123, 63, 7, 166, 177, 190, 205, 58, 26, 191, 102, 134, 240, 60, 136, 211, 218, 62, 253, 214, 19, 191, 217, 214, 143, 191, 138, 145, 19, 190, 66, 93, 49, 63, 216, 246, 133, 61, 79, 226, 24, 191, 206, 111, 99, 63, 30, 229, 231, 62, 4, 182, 229, 62, 230, 184, 60, 188, 227, 98, 35, 63, 8, 103, 4, 63, 95, 240, 49, 63, 28, 97, 60, 63, 140, 181, 159, 62, 118, 219, 36, 191, 155, 171, 75, 63, 221, 78, 183, 189, 213, 190, 127, 63, 153, 51, 130, 63, 176, 238, 188, 62, 131, 11, 11, 191, 39, 142, 244, 62, 65, 161, 79, 61, 239, 204, 211, 190, 239, 8, 221, 190, 88, 117, 133, 62, 80, 122, 20, 63, 241, 244, 132, 190, 254, 185, 196, 62, 187, 194, 12, 191, 70, 58, 26, 191, 117, 64, 179, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 167, 89, 191, 195, 164, 5, 190, 128, 132, 4, 63, 144, 89, 104, 62, 181, 38, 98, 188, 244, 189, 178, 190, 181, 98, 161, 62, 57, 241, 236, 62, 37, 70, 228, 62, 77, 20, 43, 60, 20, 241, 184, 62, 249, 221, 215, 62, 73, 196, 31, 62, 11, 72, 16, 191, 248, 176, 41, 191, 90, 145, 251, 190, 242, 123, 12, 191, 211, 14, 142, 190, 214, 55, 22, 63, 172, 142, 63, 62, 165, 126, 58, 189, 166, 125, 185, 62, 156, 25, 211, 62, 217, 15, 197, 190, 236, 222, 188, 62, 55, 205, 186, 61, 38, 240, 182, 190, 25, 114, 184, 190, 124, 235, 251, 62, 32, 44, 152, 59, 45, 69, 4, 190, 215, 2, 245, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 84, 150, 61, 114, 170, 103, 62, 135, 122, 139, 62, 232, 226, 103, 62, 230, 162, 155, 191, 114, 162, 41, 190, 44, 229, 252, 189, 33, 170, 222, 190, 206, 194, 10, 190, 189, 24, 2, 191, 65, 222, 53, 62, 213, 105, 38, 188, 32, 46, 185, 62, 221, 51, 25, 61, 20, 71, 136, 191, 164, 94, 233, 61, 242, 82, 197, 188, 140, 248, 17, 190, 229, 194, 142, 61, 195, 206, 92, 187, 155, 23, 118, 62, 140, 121, 174, 62, 34, 50, 88, 190, 219, 41, 44, 60, 55, 218, 66, 191, 144, 37, 129, 62, 84, 207, 4, 191, 38, 106, 139, 189, 193, 196, 63, 62, 211, 114, 28, 63, 184, 47, 59, 189, 0, 120, 154, 62, 163, 160, 163, 190, 16, 148, 143, 62, 121, 33, 132, 190, 251, 178, 148, 62, 108, 87, 144, 188, 92, 214, 37, 60, 58, 36, 69, 190, 9, 118, 163, 189, 165, 243, 67, 190, 148, 241, 50, 190, 158, 249, 33, 189, 82, 61, 41, 190, 81, 71, 121, 189, 228, 253, 63, 62, 217, 25, 71, 191, 238, 51, 138, 189, 121, 196, 19, 189, 224, 38, 50, 190, 83, 210, 150, 188, 36, 226, 69, 62, 252, 182, 64, 190, 109, 176, 141, 60, 152, 106, 149, 61, 107, 21, 148, 62, 154, 32, 249, 61, 181, 252, 11, 62, 121, 209, 13, 191, 241, 185, 235, 62, 161, 56, 212, 189, 245, 136, 240, 187, 151, 252, 21, 62, 92, 24, 85, 62, 43, 224, 205, 189, 168, 116, 53, 62, 164, 9, 151, 61, 93, 241, 130, 61, 147, 39, 6, 191, 150, 142, 84, 60, 201, 12, 112, 61, 63, 229, 152, 190, 113, 57, 41, 189, 93, 72, 26, 190, 21, 22, 153, 62, 21, 36, 179, 189, 114, 29, 145, 60, 73, 139, 170, 61, 178, 56, 242, 189, 45, 104, 177, 189, 193, 52, 12, 190, 44, 210, 176, 189, 129, 97, 11, 62, 33, 9, 24, 60, 252, 233, 206, 61, 172, 168, 209, 62, 240, 151, 242, 61, 171, 124, 42, 62, 23, 86, 19, 190, 153, 208, 129, 62, 6, 147, 34, 190, 210, 62, 11, 62, 97, 50, 238, 188, 104, 155, 143, 62, 254, 97, 4, 62, 33, 129, 167, 189, 159, 61, 63, 189, 68, 42, 52, 62, 135, 143, 98, 189, 191, 145, 23, 190, 175, 22, 243, 189, 63, 10, 45, 190, 181, 45, 217, 188, 61, 136, 192, 189, 164, 10, 212, 59, 64, 220, 11, 190, 104, 132, 168, 61, 223, 238, 32, 190, 93, 165, 55, 188, 150, 13, 104, 61, 187, 4, 107, 61, 43, 126, 24, 190, 136, 14, 151, 189, 242, 245, 195, 189, 76, 254, 29, 62, 74, 120, 31, 190, 198, 212, 23, 189, 151, 203, 49, 189, 44, 130, 37, 190, 76, 27, 30, 190, 212, 78, 131, 61, 211, 251, 62, 189, 48, 16, 46, 62, 40, 119, 25, 190, 249, 123, 2, 190, 14, 218, 52, 190, 177, 233, 201, 61, 65, 32, 201, 189, 60, 179, 154, 188, 223, 173, 169, 61, 119, 146, 144, 62, 168, 147, 213, 189, 81, 110, 20, 190, 222, 252, 47, 189, 100, 177, 246, 61, 162, 173, 225, 61, 101, 61, 7, 62, 174, 171, 84, 62, 88, 217, 46, 62, 248, 115, 163, 190, 203, 201, 222, 61, 83, 88, 213, 189, 24, 123, 139, 190, 49, 151, 229, 61, 78, 156, 129, 188, 129, 136, 39, 190, 51, 191, 105, 62, 58, 103, 165, 62, 230, 104, 37, 190, 25, 127, 205, 60, 198, 88, 135, 62, 142, 247, 90, 187, 224, 239, 129, 190, 210, 96, 68, 62, 8, 81, 133, 61, 252, 75, 77, 190, 244, 175, 118, 189, 121, 78, 56, 189, 122, 97, 217, 61, 30, 196, 207, 189, 127, 33, 41, 190, 221, 239, 165, 188, 49, 108, 120, 62, 151, 83, 211, 189, 88, 112, 44, 190, 251, 40, 64, 190, 243, 245, 123, 190, 18, 26, 180, 188, 255, 211, 208, 60, 234, 175, 243, 190, 154, 32, 199, 61, 71, 192, 219, 189, 126, 9, 204, 61, 93, 193, 73, 62, 63, 189, 12, 191, 236, 28, 68, 189, 152, 26, 17, 62, 245, 88, 152, 62, 168, 50, 217, 62, 174, 140, 159, 62, 108, 6, 177, 61, 66, 225, 88, 61, 191, 27, 230, 189, 81, 4, 26, 62, 106, 35, 97, 62, 193, 12, 136, 62, 36, 10, 176, 189, 156, 46, 76, 61, 228, 22, 219, 189, 81, 49, 213, 61, 233, 150, 9, 62, 149, 56, 175, 190, 53, 118, 222, 189, 204, 101, 79, 190, 63, 136, 44, 190, 17, 49, 7, 60, 119, 214, 52, 62, 140, 206, 179, 190, 222, 42, 142, 190, 68, 22, 5, 62, 222, 195, 238, 62, 222, 183, 162, 186, 142, 123, 14, 62, 23, 98, 84, 62, 212, 241, 214, 60, 51, 63, 172, 190, 144, 0, 116, 189, 89, 19, 247, 190, 195, 217, 104, 188, 33, 251, 9, 190, 2, 131, 164, 190, 33, 69, 33, 63, 234, 17, 125, 190, 188, 182, 74, 191, 215, 219, 70, 190, 244, 97, 177, 190, 77, 61, 13, 62, 246, 247, 134, 62, 110, 252, 230, 62, 129, 16, 75, 190, 48, 251, 138, 62, 51, 48, 13, 191, 213, 179, 107, 190, 115, 146, 53, 191, 46, 51, 14, 188, 28, 80, 132, 190, 170, 26, 65, 62, 221, 144, 187, 189, 104, 21, 72, 60, 176, 21, 255, 189, 176, 115, 132, 61, 182, 80, 59, 62, 227, 239, 194, 61, 195, 150, 164, 62, 106, 26, 73, 62, 223, 180, 213, 61, 0, 251, 250, 61, 115, 116, 13, 189, 169, 200, 81, 190, 47, 226, 128, 62, 141, 195, 44, 62, 10, 179, 48, 62, 183, 16, 158, 62, 119, 84, 64, 190, 154, 96, 13, 61, 181, 99, 80, 190, 227, 1, 154, 60, 138, 114, 10, 190, 175, 249, 118, 188, 113, 159, 151, 189, 235, 246, 0, 188, 245, 107, 189, 189, 0, 174, 236, 61, 182, 55, 41, 190, 24, 239, 15, 189, 224, 145, 51, 62, 132, 235, 230, 60, 53, 234, 197, 190, 32, 232, 59, 186, 80, 134, 92, 189, 0, 79, 153, 188, 23, 196, 163, 190, 137, 20, 66, 62, 77, 189, 133, 62, 28, 213, 86, 190, 34, 181, 136, 62, 203, 182, 171, 189, 31, 160, 250, 61, 179, 239, 182, 189, 5, 128, 169, 190, 126, 209, 5, 61, 103, 229, 17, 62, 181, 148, 115, 189, 104, 220, 220, 62, 99, 222, 46, 62, 193, 58, 158, 190, 163, 253, 171, 62, 249, 148, 133, 61, 12, 117, 112, 62, 199, 181, 1, 191, 139, 215, 88, 62, 184, 251, 165, 190, 251, 247, 44, 190, 202, 165, 1, 191, 81, 231, 78, 188, 112, 183, 44, 62, 130, 31, 195, 189, 211, 149, 253, 189, 40, 213, 179, 58, 93, 237, 43, 190, 46, 252, 48, 190, 127, 0, 85, 60, 87, 63, 44, 190, 198, 131, 249, 61, 106, 252, 39, 190, 145, 222, 69, 190, 89, 141, 52, 190, 97, 70, 50, 190, 206, 62, 133, 60, 92, 73, 27, 190, 168, 237, 219, 189, 121, 116, 177, 189, 202, 148, 201, 188, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 137, 197, 250, 59, 229, 223, 187, 61, 82, 10, 14, 190, 205, 135, 128, 60, 155, 13, 200, 189, 4, 227, 204, 189, 83, 154, 170, 61, 79, 214, 27, 190, 236, 229, 196, 61, 241, 236, 137, 61, 67, 69, 99, 61, 52, 209, 70, 189, 206, 25, 0, 190, 56, 223, 247, 60, 22, 175, 27, 60, 167, 126, 55, 58, 71, 27, 210, 60, 230, 221, 187, 60, 146, 198, 50, 61, 46, 255, 92, 190, 28, 60, 10, 60, 41, 111, 28, 62, 86, 188, 8, 62, 74, 83, 61, 189, 85, 87, 29, 190, 230, 131, 5, 190, 238, 36, 92, 189, 148, 101, 29, 189, 43, 106, 100, 61, 89, 187, 65, 190, 18, 194, 17, 190, 238, 121, 252, 61, 240, 202, 11, 188, 181, 76, 46, 190, 66, 80, 213, 189, 188, 95, 244, 61, 193, 156, 31, 190, 53, 13, 9, 190, 238, 254, 132, 61, 123, 5, 109, 186, 88, 220, 88, 189, 124, 208, 242, 189, 89, 42, 84, 190, 232, 152, 251, 61, 107, 133, 186, 189, 111, 247, 27, 62, 56, 197, 200, 188, 165, 154, 66, 61, 14, 13, 251, 189, 61, 141, 148, 62, 29, 34, 129, 189, 43, 219, 90, 62, 236, 132, 71, 190, 67, 73, 204, 61, 75, 58, 233, 187, 64, 65, 162, 190, 159, 197, 166, 190, 104, 171, 31, 60, 65, 152, 97, 190, 212, 177, 211, 62, 99, 17, 0, 191, 167, 139, 97, 190, 86, 6, 253, 188, 16, 251, 123, 190, 41, 175, 160, 61, 201, 21, 100, 62, 58, 50, 10, 189, 150, 232, 113, 61, 85, 228, 184, 188, 95, 26, 72, 62, 196, 98, 247, 60, 10, 52, 160, 62, 162, 241, 67, 62, 187, 22, 227, 62, 101, 156, 7, 187, 176, 217, 251, 189, 185, 29, 75, 62, 110, 247, 143, 61, 150, 248, 1, 190, 137, 51, 211, 189, 244, 186, 99, 62, 58, 214, 10, 190, 190, 248, 124, 188, 14, 240, 80, 60, 146, 176, 15, 62, 110, 247, 216, 61, 210, 147, 74, 61, 250, 225, 108, 62, 235, 125, 95, 61, 49, 24, 29, 190, 205, 69, 65, 62, 151, 123, 243, 189, 189, 5, 127, 190, 179, 81, 223, 188, 158, 193, 246, 60, 86, 112, 65, 62, 116, 70, 65, 62, 43, 181, 251, 188, 73, 205, 159, 61, 179, 181, 163, 189, 232, 9, 48, 62, 116, 117, 246, 189, 139, 165, 64, 59, 227, 21, 93, 190, 184, 80, 155, 189, 204, 223, 15, 191, 201, 88, 178, 188, 20, 229, 253, 60, 64, 77, 96, 190, 194, 182, 93, 62, 0, 93, 152, 62, 177, 191, 211, 61, 33, 162, 245, 61, 151, 145, 202, 188, 89, 27, 25, 190, 4, 150, 10, 62, 136, 12, 122, 62, 135, 109, 242, 190, 239, 225, 216, 187, 233, 108, 226, 62, 6, 228, 101, 60, 35, 132, 50, 190, 238, 102, 14, 62, 70, 220, 197, 189, 76, 100, 235, 62, 90, 253, 200, 60, 57, 212, 240, 61, 162, 93, 12, 61, 43, 215, 123, 62, 8, 1, 142, 189, 41, 135, 12, 190, 142, 205, 166, 189, 98, 127, 14, 61, 26, 129, 107, 190, 180, 237, 143, 190, 32, 98, 12, 191, 4, 13, 169, 61, 173, 97, 29, 191, 28, 244, 43, 189, 146, 40, 228, 190, 68, 90, 146, 190, 175, 147, 54, 61, 229, 19, 205, 190, 78, 35, 214, 188, 27, 110, 84, 62, 211, 185, 248, 189, 236, 145, 25, 190, 137, 15, 75, 189, 223, 167, 236, 189, 143, 196, 77, 61, 184, 70, 169, 190, 193, 148, 94, 190, 139, 2, 7, 63, 5, 156, 38, 190, 63, 24, 55, 62, 12, 41, 221, 188, 111, 41, 40, 190, 117, 196, 158, 62, 214, 8, 9, 62, 227, 149, 193, 62, 175, 75, 42, 62, 160, 20, 29, 191, 13, 192, 163, 62, 14, 5, 129, 62, 8, 40, 227, 189, 110, 180, 224, 189, 236, 203, 42, 189, 217, 204, 220, 189, 134, 221, 68, 189, 72, 46, 57, 189, 51, 5, 130, 188, 0, 93, 14, 186, 84, 250, 162, 188, 169, 39, 27, 189, 90, 24, 221, 61, 92, 35, 11, 62, 110, 177, 252, 188, 200, 20, 125, 61, 87, 238, 7, 190, 244, 120, 196, 60, 178, 147, 141, 62, 152, 131, 55, 190, 61, 102, 47, 191, 54, 237, 3, 62, 218, 29, 133, 62, 147, 13, 5, 191, 7, 99, 2, 62, 59, 216, 109, 189, 3, 151, 16, 60, 24, 25, 18, 190, 28, 155, 236, 61, 132, 139, 247, 189, 0, 109, 173, 62, 181, 235, 32, 190, 20, 217, 90, 189, 245, 100, 201, 62, 25, 123, 157, 62, 158, 68, 152, 189, 242, 143, 37, 187, 78, 255, 134, 190, 35, 4, 207, 190, 216, 59, 175, 190, 190, 217, 175, 190, 217, 67, 45, 62, 208, 199, 184, 62, 74, 253, 128, 62, 140, 75, 175, 189, 139, 182, 191, 61, 202, 237, 7, 62, 146, 249, 5, 61, 13, 6, 219, 189, 140, 249, 19, 190, 203, 79, 249, 188, 83, 248, 75, 61, 96, 27, 95, 62, 249, 128, 48, 190, 24, 145, 66, 62, 1, 61, 247, 61, 119, 126, 22, 190, 127, 150, 222, 61, 144, 142, 251, 189, 239, 180, 144, 190, 231, 77, 196, 189, 22, 213, 11, 191, 250, 170, 138, 62, 70, 228, 169, 62, 116, 157, 69, 188, 241, 187, 255, 189, 176, 218, 44, 61, 104, 155, 116, 62, 239, 121, 133, 61, 213, 86, 178, 62, 43, 238, 130, 187, 139, 143, 128, 62, 12, 198, 33, 62, 177, 239, 206, 190, 111, 246, 30, 62, 149, 88, 234, 189, 112, 206, 237, 190, 136, 70, 4, 190, 63, 243, 63, 189, 172, 11, 219, 190, 247, 131, 144, 61, 146, 237, 107, 190, 30, 61, 36, 62, 204, 174, 188, 61, 231, 100, 152, 190, 68, 132, 170, 62, 166, 154, 68, 62, 123, 244, 35, 61, 47, 188, 55, 62, 198, 68, 188, 190, 74, 68, 53, 191, 125, 0, 68, 62, 240, 206, 11, 62, 134, 116, 105, 62, 197, 52, 198, 62, 50, 108, 80, 191, 12, 35, 222, 62, 233, 36, 245, 60, 150, 150, 37, 189, 151, 26, 3, 190, 248, 0, 111, 62, 90, 56, 2, 62, 209, 158, 124, 62, 191, 101, 24, 190, 106, 50, 57, 62, 87, 252, 128, 62, 227, 2, 132, 188, 175, 0, 189, 61, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 249, 113, 76, 62, 186, 12, 52, 62, 241, 64, 16, 190, 127, 43, 123, 61, 23, 160, 130, 189, 136, 62, 23, 62, 119, 42, 95, 190, 236, 176, 7, 190, 185, 190, 163, 187, 198, 3, 54, 62, 62, 204, 30, 191, 136, 4, 20, 190, 173, 71, 55, 190, 227, 130, 145, 62, 144, 71, 177, 62, 236, 195, 22, 190, 128, 203, 22, 62, 14, 217, 200, 189, 248, 32, 243, 189, 165, 218, 161, 61, 190, 53, 132, 190, 188, 185, 46, 191, 93, 171, 183, 62, 206, 30, 172, 62, 206, 236, 117, 61, 135, 244, 239, 61, 114, 235, 58, 189, 211, 31, 140, 62, 237, 219, 4, 190, 73, 110, 183, 190, 64, 152, 38, 62, 139, 13, 244, 60, 72, 128, 140, 61, 193, 104, 14, 191, 100, 235, 253, 188, 22, 177, 35, 61, 58, 205, 22, 191, 138, 38, 24, 190, 140, 218, 204, 61, 29, 243, 244, 189, 209, 213, 147, 188, 70, 121, 119, 190, 225, 243, 251, 189, 194, 3, 6, 62, 99, 135, 166, 188, 36, 172, 6, 186, 251, 59, 1, 189, 127, 73, 227, 190, 255, 19, 178, 189, 9, 112, 153, 191, 136, 242, 172, 189, 217, 205, 252, 61, 98, 209, 76, 62, 194, 254, 227, 61, 114, 3, 218, 60, 3, 253, 149, 62, 70, 15, 66, 190, 147, 143, 202, 60, 80, 15, 24, 190, 217, 173, 78, 62, 51, 174, 11, 62, 253, 98, 201, 188, 192, 203, 52, 188, 192, 32, 173, 189, 47, 225, 7, 62, 200, 30, 49, 188, 211, 68, 8, 61, 126, 163, 49, 190, 184, 84, 32, 62, 255, 147, 225, 60, 255, 42, 58, 59, 138, 17, 100, 60, 178, 163, 195, 189, 28, 156, 25, 189, 215, 0, 170, 61, 167, 5, 144, 60, 254, 27, 184, 189, 95, 165, 43, 190, 32, 241, 1, 190, 200, 130, 232, 189, 233, 202, 140, 60, 171, 244, 1, 59, 119, 15, 192, 61, 75, 137, 52, 60, 237, 246, 131, 189, 143, 25, 31, 189, 187, 97, 46, 190, 47, 71, 3, 190, 46, 184, 253, 189, 175, 77, 171, 189, 94, 171, 165, 189, 86, 64, 36, 190, 143, 34, 215, 188, 28, 107, 19, 190, 56, 139, 3, 62, 181, 231, 225, 189, 85, 5, 13, 190, 217, 89, 150, 60, 247, 241, 111, 62, 215, 178, 174, 187, 4, 52, 109, 62, 240, 50, 106, 189, 212, 125, 187, 61, 22, 200, 208, 61, 130, 30, 149, 188, 2, 64, 204, 62, 212, 57, 42, 62, 171, 227, 74, 190, 65, 8, 170, 188, 122, 123, 103, 190, 162, 252, 165, 190, 191, 22, 225, 188, 53, 152, 174, 189, 209, 12, 128, 62, 142, 252, 134, 61, 245, 195, 199, 189, 85, 216, 39, 61, 58, 178, 25, 61, 132, 109, 138, 61, 25, 154, 67, 190, 245, 44, 138, 61, 254, 153, 244, 58, 14, 186, 255, 189, 225, 182, 89, 189, 186, 254, 142, 61, 177, 6, 167, 189, 179, 208, 199, 61, 72, 201, 144, 60, 184, 103, 119, 190, 176, 143, 75, 190, 255, 224, 151, 189, 240, 155, 150, 62, 196, 208, 23, 191, 122, 151, 208, 60, 30, 92, 82, 190, 15, 178, 177, 190, 158, 122, 207, 189, 106, 3, 53, 189, 162, 133, 141, 190, 104, 191, 60, 188, 10, 6, 174, 190, 40, 239, 249, 189, 239, 151, 8, 191, 138, 128, 9, 191, 13, 86, 49, 62, 128, 44, 139, 191, 14, 89, 11, 190, 133, 39, 67, 61, 242, 248, 201, 60, 4, 23, 93, 62, 197, 29, 211, 189, 76, 178, 20, 60, 214, 211, 216, 190, 165, 93, 223, 189, 216, 35, 59, 189, 154, 247, 82, 189, 39, 71, 2, 62, 32, 155, 217, 189, 28, 35, 107, 62, 203, 92, 64, 62, 144, 255, 34, 62, 65, 136, 8, 190, 28, 25, 226, 189, 181, 226, 26, 189, 178, 224, 29, 62, 181, 73, 233, 61, 226, 54, 214, 189, 212, 205, 52, 189, 131, 104, 196, 61, 94, 193, 12, 62, 217, 75, 33, 190, 33, 88, 38, 190, 197, 81, 174, 61, 27, 134, 53, 61, 222, 155, 129, 61, 58, 43, 110, 188, 131, 64, 10, 62, 161, 255, 239, 60, 87, 28, 155, 189, 173, 160, 123, 60, 251, 105, 170, 61, 186, 83, 243, 61, 127, 141, 25, 189, 91, 89, 154, 188, 53, 160, 22, 190, 101, 9, 37, 190, 121, 221, 154, 61, 126, 185, 176, 189, 219, 216, 180, 188, 143, 42, 96, 60, 218, 169, 109, 189, 139, 50, 238, 189, 179, 160, 201, 190, 207, 176, 233, 60, 35, 37, 195, 61, 252, 104, 58, 62, 92, 161, 12, 190, 128, 25, 181, 190, 76, 181, 157, 190, 102, 67, 43, 189, 204, 221, 85, 62, 59, 84, 238, 190, 208, 141, 137, 190, 41, 117, 251, 61, 32, 174, 10, 190, 215, 68, 186, 61, 16, 26, 100, 190, 87, 183, 30, 191, 246, 248, 126, 61, 221, 85, 128, 190, 127, 41, 79, 60, 185, 175, 173, 61, 86, 156, 118, 190, 26, 205, 131, 62, 254, 254, 93, 190, 215, 245, 104, 62, 73, 159, 10, 190, 232, 20, 202, 188, 32, 134, 212, 188, 94, 215, 57, 62, 147, 176, 154, 62, 70, 137, 221, 62, 161, 126, 40, 62, 108, 214, 168, 62, 89, 183, 228, 61, 67, 100, 164, 190, 253, 222, 75, 188, 52, 235, 42, 62, 10, 148, 48, 191, 200, 218, 252, 189, 165, 58, 190, 61, 239, 105, 129, 61, 148, 204, 64, 62, 145, 87, 31, 189, 130, 134, 143, 60, 20, 21, 151, 62, 55, 102, 4, 190, 149, 82, 134, 62, 180, 249, 138, 60, 19, 15, 124, 191, 29, 68, 204, 61, 137, 89, 151, 191, 57, 22, 148, 190, 116, 211, 73, 61, 210, 80, 7, 61, 253, 198, 13, 62, 245, 44, 44, 61, 109, 48, 232, 61, 86, 42, 129, 190, 190, 82, 182, 60, 147, 235, 8, 188, 154, 37, 165, 61, 144, 229, 79, 62, 165, 201, 144, 190, 160, 156, 253, 61, 196, 41, 69, 188, 237, 203, 79, 190, 249, 166, 80, 190, 31, 112, 174, 189, 22, 245, 44, 190, 89, 92, 15, 62, 242, 58, 178, 188, 153, 52, 90, 62, 120, 228, 183, 187, 192, 135, 206, 59, 177, 136, 110, 62, 38, 21, 113, 62, 53, 224, 193, 61, 235, 81, 229, 61, 210, 7, 85, 190, 32, 181, 140, 189, 223, 174, 57, 62, 95, 244, 91, 189, 13, 161, 83, 62, 138, 203, 89, 189, 60, 1, 120, 190, 154, 198, 5, 62, 219, 183, 64, 190, 162, 193, 1, 62, 150, 231, 97, 190, 25, 40, 165, 61, 98, 92, 0, 190, 97, 55, 51, 190, 24, 61, 190, 190, 17, 143, 156, 61, 39, 211, 98, 189, 137, 75, 135, 190, 199, 37, 65, 190, 40, 60, 14, 190, 62, 33, 19, 62, 216, 192, 46, 190, 24, 17, 175, 61, 38, 89, 90, 190, 191, 115, 36, 189, 101, 122, 42, 190, 97, 14, 219, 61, 177, 15, 84, 190, 187, 46, 182, 190, 99, 126, 123, 190, 254, 250, 151, 190, 126, 231, 181, 189, 89, 6, 173, 62, 177, 128, 150, 190, 217, 68, 136, 190, 61, 138, 226, 189, 86, 21, 229, 188, 236, 184, 93, 62, 78, 46, 166, 60, 245, 230, 138, 61, 38, 173, 58, 190, 173, 57, 47, 61, 253, 70, 93, 62, 151, 41, 73, 61, 0, 43, 16, 62, 189, 12, 22, 191, 124, 166, 147, 62, 87, 239, 103, 190, 65, 190, 112, 61, 109, 87, 189, 62, 211, 166, 167, 190, 92, 70, 70, 62, 62, 157, 82, 62, 49, 21, 163, 60, 169, 26, 85, 189, 184, 92, 57, 191, 217, 89, 5, 191, 66, 216, 16, 190, 131, 167, 189, 190, 55, 40, 113, 190, 44, 193, 116, 62, 76, 16, 127, 62, 224, 248, 93, 60, 226, 60, 32, 62, 76, 101, 21, 189, 163, 170, 19, 190, 191, 63, 89, 190, 89, 233, 4, 190, 14, 196, 142, 62, 206, 245, 230, 189, 61, 145, 156, 190, 156, 106, 177, 61, 67, 225, 98, 62, 116, 123, 139, 61, 130, 96, 139, 190, 83, 148, 144, 190, 85, 239, 151, 190, 119, 22, 143, 189, 5, 72, 65, 190, 52, 43, 83, 189, 132, 25, 121, 61, 110, 108, 161, 190, 67, 246, 149, 62, 181, 51, 183, 190, 109, 56, 213, 61, 157, 83, 149, 187, 174, 131, 26, 62, 25, 36, 123, 191, 224, 16, 40, 190, 37, 196, 137, 189, 132, 58, 41, 190, 248, 149, 15, 62, 124, 141, 173, 190, 243, 134, 10, 190, 187, 255, 233, 189, 86, 37, 6, 62, 17, 166, 64, 61, 128, 101, 131, 191, 111, 32, 211, 190, 174, 147, 39, 62, 68, 149, 255, 190, 208, 33, 147, 189, 44, 89, 178, 62, 54, 209, 168, 189, 144, 251, 212, 62, 161, 72, 11, 190, 104, 136, 135, 62, 147, 216, 221, 190, 51, 44, 187, 61, 219, 25, 240, 190, 45, 48, 25, 62, 25, 69, 248, 61, 211, 230, 197, 62, 42, 181, 123, 188, 39, 125, 56, 62, 112, 65, 89, 190, 83, 98, 231, 190, 56, 175, 8, 62, 127, 29, 75, 62, 212, 125, 158, 191, 112, 69, 160, 189, 93, 157, 106, 61, 25, 183, 155, 190, 54, 154, 239, 61, 209, 61, 232, 189, 222, 248, 1, 190, 15, 51, 236, 60, 101, 201, 148, 189, 176, 3, 148, 62, 26, 156, 91, 191, 82, 129, 101, 191, 239, 169, 165, 189, 31, 171, 149, 191, 188, 2, 119, 190, 106, 183, 240, 61, 219, 235, 205, 189, 39, 63, 199, 62, 166, 151, 25, 190, 78, 91, 128, 62, 79, 249, 162, 190, 199, 127, 110, 62, 222, 59, 108, 190, 139, 45, 106, 62, 31, 195, 238, 61, 199, 227, 74, 62, 209, 245, 207, 62, 124, 82, 152, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 247, 206, 189, 202, 183, 18, 190, 64, 18, 19, 61, 64, 22, 14, 190, 54, 48, 165, 60, 255, 67, 75, 62, 148, 245, 133, 61, 51, 74, 81, 62, 135, 127, 206, 61, 133, 184, 168, 61, 65, 34, 45, 190, 112, 65, 245, 59, 36, 125, 164, 62, 221, 67, 44, 60, 111, 122, 29, 62, 193, 140, 59, 59, 91, 170, 236, 59, 192, 35, 89, 62, 232, 4, 226, 61, 161, 47, 9, 190, 220, 49, 238, 61, 250, 97, 150, 189, 241, 95, 146, 62, 232, 117, 33, 62, 12, 213, 70, 188, 47, 213, 44, 60, 8, 237, 7, 190, 64, 217, 137, 61, 72, 79, 104, 61, 169, 190, 42, 62, 68, 116, 23, 62, 64, 255, 75, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 106, 138, 191, 9, 88, 160, 190, 109, 34, 134, 190, 222, 25, 84, 189, 225, 154, 88, 62, 234, 163, 175, 190, 254, 35, 100, 191, 29, 111, 70, 62, 227, 71, 190, 62, 8, 152, 10, 62, 12, 249, 54, 61, 190, 62, 139, 190, 158, 30, 169, 62, 224, 68, 143, 190, 128, 18, 208, 190, 223, 78, 8, 63, 102, 217, 127, 190, 131, 192, 26, 63, 151, 17, 216, 60, 82, 105, 42, 63, 131, 190, 144, 190, 58, 109, 235, 189, 237, 46, 20, 62, 233, 233, 8, 191, 104, 1, 178, 187, 108, 154, 34, 63, 153, 233, 103, 190, 26, 73, 168, 62, 199, 49, 242, 190, 116, 233, 185, 190, 208, 46, 27, 191, 5, 113, 72, 191, 57, 209, 229, 61, 64, 118, 1, 62, 41, 251, 172, 190, 242, 108, 18, 189, 227, 229, 157, 190, 59, 166, 104, 190, 81, 167, 92, 61, 231, 17, 59, 190, 230, 74, 36, 62, 132, 92, 13, 62, 176, 181, 2, 190, 19, 66, 102, 62, 103, 192, 99, 190, 113, 87, 249, 62, 223, 171, 140, 62, 113, 201, 236, 61, 75, 134, 140, 190, 164, 198, 172, 189, 10, 242, 112, 60, 241, 129, 155, 62, 128, 216, 89, 190, 147, 203, 37, 62, 27, 88, 24, 190, 215, 111, 86, 189, 161, 221, 245, 189, 1, 179, 112, 62, 225, 192, 36, 189, 64, 118, 195, 62, 110, 114, 174, 188, 93, 75, 80, 190, 1, 227, 150, 62, 92, 163, 253, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 134, 248, 61, 253, 240, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 126, 112, 190, 13, 238, 145, 191, 108, 102, 22, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 167, 13, 63, 60, 2, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}