// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 38, 95, 62, 211, 32, 167, 190, 241, 117, 8, 191, 133, 98, 100, 61, 149, 139, 28, 191, 46, 169, 224, 62, 114, 208, 237, 189, 162, 141, 192, 61, 215, 165, 115, 189, 91, 240, 254, 189, 53, 52, 5, 63, 67, 248, 11, 191, 161, 183, 140, 190, 79, 254, 212, 61, 69, 244, 9, 63, 124, 180, 31, 189, 187, 8, 94, 190, 75, 246, 15, 63, 132, 217, 60, 63, 10, 129, 149, 190, 243, 156, 224, 190, 60, 57, 72, 61, 105, 127, 4, 63, 223, 146, 178, 62, 252, 186, 177, 189, 97, 8, 99, 63, 231, 249, 88, 189, 198, 219, 192, 62, 219, 1, 9, 191, 63, 108, 124, 190, 93, 15, 154, 62, 180, 169, 129, 191, 246, 100, 86, 189, 198, 67, 161, 190, 8, 140, 207, 62, 113, 147, 199, 61, 167, 179, 6, 62, 222, 85, 35, 191, 184, 149, 191, 61, 203, 195, 59, 63, 74, 181, 235, 62, 138, 114, 17, 63, 235, 184, 246, 61, 177, 2, 9, 191, 110, 111, 74, 190, 58, 42, 31, 191, 3, 232, 94, 191, 81, 151, 80, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 173, 123, 216, 190, 92, 126, 152, 191, 130, 188, 61, 63, 249, 247, 14, 63, 171, 70, 6, 191, 60, 137, 14, 62, 151, 111, 168, 62, 3, 3, 70, 63, 107, 51, 154, 190, 254, 42, 254, 190, 149, 8, 189, 190, 58, 119, 193, 62, 234, 189, 192, 190, 77, 234, 91, 191, 127, 190, 8, 61, 93, 212, 69, 63, 144, 227, 131, 62, 179, 140, 14, 191, 201, 114, 88, 63, 255, 197, 170, 62, 203, 111, 242, 62, 44, 86, 214, 60, 32, 225, 189, 60, 165, 37, 21, 63, 46, 89, 48, 63, 112, 169, 179, 62, 54, 95, 168, 62, 59, 219, 201, 190, 204, 200, 66, 63, 71, 74, 22, 190, 183, 19, 116, 63, 243, 239, 82, 63, 173, 54, 198, 62, 224, 65, 220, 190, 47, 47, 49, 63, 46, 145, 24, 61, 150, 208, 142, 190, 146, 215, 75, 190, 32, 11, 1, 62, 126, 242, 7, 63, 175, 217, 137, 190, 119, 13, 211, 62, 165, 63, 154, 190, 230, 131, 234, 61, 20, 56, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 82, 53, 191, 181, 14, 103, 190, 214, 157, 12, 63, 128, 77, 131, 62, 183, 221, 53, 189, 147, 215, 27, 191, 63, 217, 97, 62, 134, 141, 3, 63, 195, 225, 1, 63, 34, 0, 232, 188, 11, 231, 191, 62, 188, 4, 246, 62, 143, 100, 92, 62, 19, 245, 12, 191, 166, 186, 26, 191, 100, 101, 128, 190, 242, 123, 12, 191, 164, 229, 172, 189, 149, 20, 52, 63, 230, 117, 146, 62, 95, 180, 67, 61, 192, 250, 169, 62, 201, 251, 232, 62, 44, 164, 167, 190, 115, 88, 175, 62, 211, 91, 172, 61, 179, 155, 242, 190, 111, 242, 151, 190, 241, 206, 14, 63, 76, 199, 34, 61, 70, 93, 179, 189, 168, 152, 215, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 198, 3, 60, 167, 38, 235, 61, 217, 174, 112, 62, 79, 117, 30, 62, 79, 190, 7, 191, 83, 225, 131, 61, 103, 67, 96, 60, 127, 121, 14, 188, 120, 77, 180, 61, 128, 177, 81, 190, 18, 13, 223, 61, 87, 242, 172, 61, 187, 45, 168, 61, 159, 243, 61, 190, 193, 161, 177, 190, 170, 38, 178, 190, 242, 82, 197, 188, 138, 218, 99, 191, 182, 140, 41, 190, 152, 38, 52, 190, 187, 61, 12, 60, 196, 181, 222, 61, 233, 155, 136, 190, 217, 23, 70, 190, 165, 148, 172, 190, 97, 164, 74, 61, 219, 74, 145, 190, 185, 76, 74, 190, 168, 255, 119, 62, 249, 247, 106, 62, 231, 28, 163, 61, 104, 219, 95, 62, 128, 4, 167, 190, 37, 212, 87, 62, 28, 19, 79, 190, 75, 242, 137, 62, 92, 199, 112, 61, 147, 142, 212, 59, 11, 48, 15, 190, 70, 235, 41, 189, 113, 126, 166, 189, 51, 225, 245, 59, 136, 37, 14, 189, 125, 247, 199, 188, 196, 227, 44, 190, 93, 55, 24, 62, 57, 220, 220, 190, 23, 244, 99, 189, 121, 196, 19, 189, 208, 16, 88, 190, 43, 128, 131, 189, 151, 29, 96, 62, 81, 208, 23, 190, 226, 184, 67, 190, 140, 67, 233, 61, 226, 225, 122, 62, 106, 83, 8, 62, 219, 100, 247, 61, 24, 13, 29, 191, 179, 200, 222, 62, 144, 157, 127, 61, 157, 246, 14, 189, 117, 12, 180, 61, 226, 163, 47, 62, 149, 227, 22, 190, 13, 238, 192, 61, 179, 16, 163, 61, 149, 6, 8, 62, 131, 209, 104, 190, 235, 3, 168, 60, 255, 87, 137, 60, 125, 197, 40, 190, 39, 138, 22, 62, 95, 220, 219, 189, 16, 138, 74, 62, 144, 229, 139, 61, 220, 125, 46, 190, 168, 232, 166, 61, 20, 76, 169, 189, 16, 68, 111, 190, 193, 52, 12, 190, 163, 71, 202, 190, 206, 138, 135, 61, 64, 202, 254, 61, 233, 244, 172, 189, 157, 76, 27, 62, 171, 225, 235, 61, 243, 165, 35, 62, 250, 184, 149, 189, 84, 210, 137, 62, 204, 31, 138, 188, 140, 83, 28, 62, 51, 62, 202, 61, 87, 21, 187, 188, 42, 220, 195, 61, 239, 152, 193, 189, 159, 61, 63, 189, 68, 42, 52, 62, 135, 143, 98, 189, 191, 145, 23, 190, 175, 22, 243, 189, 63, 10, 45, 190, 181, 45, 217, 188, 61, 136, 192, 189, 164, 10, 212, 59, 64, 220, 11, 190, 104, 132, 168, 61, 223, 238, 32, 190, 93, 165, 55, 188, 150, 13, 104, 61, 187, 4, 107, 61, 43, 126, 24, 190, 136, 14, 151, 189, 242, 245, 195, 189, 76, 254, 29, 62, 74, 120, 31, 190, 198, 212, 23, 189, 151, 203, 49, 189, 44, 130, 37, 190, 76, 27, 30, 190, 212, 78, 131, 61, 211, 251, 62, 189, 48, 16, 46, 62, 40, 119, 25, 190, 249, 123, 2, 190, 14, 218, 52, 190, 177, 233, 201, 61, 65, 32, 201, 189, 200, 0, 233, 60, 127, 37, 177, 61, 62, 37, 97, 62, 179, 7, 216, 189, 82, 30, 237, 189, 137, 60, 27, 189, 92, 28, 153, 61, 76, 44, 194, 61, 129, 233, 18, 62, 254, 39, 217, 61, 95, 90, 146, 61, 219, 70, 109, 190, 140, 164, 8, 61, 85, 219, 195, 188, 132, 41, 46, 190, 231, 156, 160, 61, 78, 156, 129, 188, 80, 51, 222, 189, 141, 138, 9, 62, 61, 153, 132, 62, 124, 16, 26, 190, 227, 214, 245, 61, 82, 164, 92, 62, 151, 45, 137, 189, 240, 237, 130, 190, 121, 124, 198, 61, 221, 44, 137, 61, 57, 41, 85, 190, 152, 217, 182, 60, 186, 143, 121, 189, 76, 77, 25, 188, 77, 48, 208, 189, 54, 100, 221, 189, 76, 224, 211, 60, 97, 83, 68, 62, 112, 67, 154, 60, 199, 23, 5, 190, 230, 33, 230, 189, 201, 201, 55, 190, 250, 173, 98, 189, 92, 191, 226, 189, 22, 238, 152, 190, 33, 132, 108, 61, 169, 105, 41, 190, 177, 223, 111, 61, 20, 116, 101, 62, 61, 205, 78, 188, 67, 82, 74, 60, 152, 26, 17, 62, 112, 197, 165, 62, 159, 19, 208, 62, 4, 107, 110, 62, 139, 255, 5, 62, 158, 78, 235, 61, 123, 45, 110, 189, 168, 235, 40, 62, 161, 48, 91, 62, 207, 35, 131, 62, 29, 109, 186, 190, 119, 139, 167, 60, 225, 13, 45, 190, 94, 134, 11, 62, 64, 236, 46, 62, 65, 254, 89, 190, 174, 19, 97, 189, 66, 155, 152, 189, 57, 135, 59, 190, 240, 135, 32, 61, 102, 118, 66, 61, 19, 196, 150, 189, 30, 204, 235, 189, 37, 219, 212, 189, 131, 29, 0, 62, 103, 133, 13, 190, 15, 110, 67, 61, 155, 32, 163, 60, 95, 142, 157, 189, 68, 254, 110, 189, 145, 228, 136, 61, 129, 249, 51, 190, 195, 217, 104, 188, 149, 27, 15, 62, 49, 14, 45, 190, 15, 87, 7, 190, 21, 173, 135, 61, 21, 190, 251, 189, 8, 144, 255, 189, 245, 89, 203, 189, 19, 139, 212, 60, 15, 138, 10, 62, 117, 209, 23, 61, 161, 190, 57, 190, 83, 3, 182, 61, 65, 60, 183, 189, 173, 158, 177, 61, 208, 82, 61, 190, 104, 75, 29, 61, 95, 39, 136, 190, 0, 255, 55, 62, 192, 181, 195, 189, 213, 92, 195, 60, 97, 219, 36, 190, 109, 159, 234, 60, 112, 153, 109, 62, 202, 213, 74, 62, 248, 217, 100, 62, 146, 66, 104, 62, 53, 222, 46, 62, 63, 134, 29, 62, 105, 60, 89, 189, 53, 81, 253, 189, 10, 177, 104, 62, 141, 195, 44, 62, 47, 168, 56, 62, 181, 78, 158, 62, 12, 91, 243, 189, 99, 250, 114, 187, 209, 164, 28, 190, 154, 157, 19, 188, 116, 51, 45, 190, 62, 85, 150, 60, 253, 117, 139, 189, 88, 196, 124, 61, 117, 206, 104, 189, 67, 145, 50, 62, 7, 187, 57, 190, 133, 193, 197, 189, 150, 29, 223, 61, 86, 160, 104, 61, 131, 200, 193, 190, 79, 229, 143, 188, 235, 65, 167, 189, 3, 216, 141, 189, 183, 31, 178, 190, 238, 242, 51, 62, 12, 198, 153, 62, 195, 24, 57, 190, 105, 96, 55, 62, 42, 30, 88, 188, 188, 145, 171, 61, 181, 174, 186, 60, 229, 119, 131, 190, 236, 199, 141, 61, 219, 226, 233, 61, 181, 148, 115, 189, 186, 150, 230, 62, 140, 96, 138, 62, 131, 243, 94, 190, 84, 71, 138, 62, 10, 188, 241, 61, 116, 91, 131, 62, 200, 138, 213, 190, 120, 31, 121, 62, 36, 78, 106, 190, 75, 155, 243, 189, 20, 145, 174, 190, 112, 132, 195, 189, 249, 185, 19, 62, 4, 39, 106, 189, 197, 70, 47, 190, 48, 114, 254, 60, 93, 237, 43, 190, 151, 41, 23, 190, 196, 38, 9, 61, 162, 37, 37, 190, 198, 131, 249, 61, 241, 73, 3, 190, 34, 230, 32, 190, 102, 22, 35, 190, 218, 208, 9, 190, 137, 13, 81, 61, 153, 244, 12, 190, 41, 108, 229, 189, 121, 116, 177, 189, 5, 29, 180, 187, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 118, 123, 180, 60, 32, 195, 230, 61, 227, 145, 23, 190, 147, 60, 152, 60, 51, 49, 150, 189, 4, 227, 204, 189, 250, 150, 179, 61, 43, 180, 28, 190, 234, 112, 221, 61, 179, 156, 137, 61, 137, 232, 140, 61, 140, 221, 99, 189, 206, 25, 0, 190, 221, 190, 79, 61, 22, 175, 27, 60, 100, 223, 180, 186, 34, 30, 41, 61, 98, 88, 5, 61, 101, 154, 77, 61, 46, 255, 92, 190, 117, 117, 202, 59, 70, 250, 41, 62, 38, 13, 30, 62, 126, 30, 66, 189, 99, 148, 30, 190, 66, 86, 220, 189, 5, 223, 94, 189, 148, 101, 29, 189, 133, 109, 100, 61, 210, 95, 63, 190, 18, 194, 17, 190, 1, 140, 247, 61, 248, 243, 28, 188, 2, 141, 45, 190, 213, 247, 188, 189, 32, 142, 4, 62, 39, 66, 29, 190, 53, 13, 9, 190, 233, 135, 150, 61, 123, 5, 109, 186, 76, 108, 65, 189, 124, 208, 242, 189, 81, 229, 56, 190, 117, 21, 3, 62, 107, 133, 186, 189, 192, 88, 40, 62, 78, 254, 100, 189, 178, 207, 135, 186, 165, 201, 193, 189, 217, 98, 52, 62, 232, 208, 65, 189, 250, 200, 105, 62, 221, 111, 213, 189, 104, 104, 136, 61, 67, 118, 166, 189, 144, 101, 190, 189, 3, 56, 142, 190, 109, 105, 88, 59, 130, 107, 143, 190, 65, 53, 196, 62, 116, 30, 46, 190, 181, 57, 66, 190, 86, 6, 253, 188, 17, 95, 133, 190, 136, 223, 143, 61, 107, 35, 235, 61, 37, 15, 231, 60, 63, 76, 150, 188, 46, 28, 221, 60, 111, 225, 42, 62, 247, 92, 90, 59, 250, 32, 138, 62, 140, 36, 111, 189, 222, 11, 198, 62, 224, 48, 79, 60, 43, 216, 217, 189, 67, 76, 51, 62, 190, 27, 193, 61, 38, 183, 150, 189, 42, 176, 179, 189, 235, 192, 57, 62, 189, 64, 27, 190, 13, 4, 155, 60, 237, 42, 127, 60, 130, 191, 193, 61, 47, 54, 53, 62, 132, 0, 11, 62, 188, 110, 2, 62, 168, 169, 119, 61, 241, 198, 224, 189, 2, 175, 87, 62, 9, 10, 115, 189, 151, 215, 40, 190, 181, 11, 246, 188, 158, 193, 246, 60, 87, 71, 98, 62, 181, 214, 82, 62, 23, 9, 18, 60, 93, 37, 44, 61, 245, 4, 39, 189, 220, 130, 21, 62, 184, 23, 175, 189, 100, 70, 126, 61, 203, 54, 43, 190, 91, 63, 63, 189, 2, 174, 222, 190, 220, 115, 97, 59, 41, 178, 132, 58, 25, 47, 117, 190, 109, 118, 26, 62, 160, 174, 140, 62, 61, 131, 188, 189, 188, 10, 214, 61, 83, 148, 82, 188, 200, 249, 64, 190, 240, 196, 233, 61, 100, 216, 229, 61, 54, 178, 9, 190, 125, 83, 195, 61, 139, 53, 136, 62, 62, 106, 1, 190, 151, 232, 152, 190, 0, 181, 235, 187, 141, 223, 8, 190, 160, 187, 181, 62, 169, 197, 21, 60, 57, 212, 240, 61, 166, 66, 23, 190, 64, 253, 208, 61, 114, 107, 223, 59, 33, 241, 138, 189, 12, 106, 71, 190, 190, 34, 233, 188, 175, 210, 212, 188, 240, 48, 192, 189, 38, 78, 85, 190, 174, 124, 153, 61, 190, 65, 213, 189, 8, 27, 19, 190, 39, 80, 102, 190, 213, 20, 107, 190, 90, 156, 147, 60, 7, 172, 160, 190, 208, 197, 139, 188, 101, 128, 244, 61, 182, 136, 232, 186, 146, 237, 244, 189, 67, 43, 74, 188, 84, 121, 43, 190, 143, 133, 27, 61, 130, 81, 191, 190, 158, 210, 121, 190, 139, 248, 157, 62, 34, 125, 38, 190, 9, 223, 137, 61, 201, 60, 210, 187, 133, 243, 248, 189, 176, 103, 169, 62, 214, 8, 9, 62, 34, 74, 189, 62, 163, 35, 185, 60, 51, 237, 157, 190, 237, 97, 171, 62, 73, 112, 109, 62, 235, 55, 5, 190, 154, 219, 213, 189, 40, 194, 59, 189, 155, 181, 9, 190, 230, 165, 123, 61, 93, 59, 151, 189, 208, 47, 117, 188, 154, 74, 142, 56, 144, 41, 61, 188, 196, 124, 135, 188, 125, 162, 24, 62, 118, 232, 3, 62, 183, 40, 51, 190, 194, 0, 52, 60, 64, 136, 131, 189, 165, 224, 185, 61, 218, 227, 93, 62, 203, 238, 209, 189, 217, 81, 33, 191, 65, 67, 185, 60, 126, 59, 218, 61, 164, 0, 253, 190, 77, 212, 140, 60, 1, 236, 226, 61, 243, 133, 147, 61, 252, 110, 23, 190, 28, 155, 236, 61, 1, 95, 227, 189, 176, 201, 139, 62, 252, 236, 75, 190, 39, 19, 3, 190, 64, 245, 68, 62, 234, 139, 137, 62, 172, 39, 203, 59, 233, 224, 135, 61, 205, 111, 123, 190, 187, 108, 117, 190, 105, 115, 109, 190, 129, 75, 175, 190, 62, 115, 175, 60, 49, 221, 184, 62, 36, 178, 5, 62, 212, 1, 5, 190, 219, 206, 223, 61, 76, 45, 13, 62, 52, 165, 80, 61, 159, 123, 0, 190, 80, 64, 254, 189, 233, 100, 127, 189, 150, 97, 196, 188, 63, 98, 3, 62, 72, 87, 10, 190, 52, 189, 69, 62, 133, 57, 254, 60, 118, 147, 22, 190, 101, 45, 182, 61, 205, 145, 137, 189, 230, 52, 143, 190, 231, 77, 196, 189, 141, 152, 17, 191, 107, 78, 135, 62, 181, 64, 155, 62, 78, 176, 165, 59, 49, 137, 79, 189, 146, 49, 12, 61, 109, 192, 95, 62, 39, 220, 32, 188, 201, 1, 155, 62, 255, 210, 67, 190, 54, 247, 80, 62, 146, 224, 152, 61, 179, 87, 53, 190, 136, 183, 22, 62, 205, 57, 105, 189, 31, 35, 219, 189, 138, 75, 26, 190, 92, 92, 68, 189, 137, 47, 242, 190, 238, 247, 17, 61, 30, 82, 145, 190, 237, 18, 198, 61, 72, 244, 235, 61, 31, 230, 130, 190, 199, 196, 100, 62, 178, 68, 136, 62, 156, 190, 107, 60, 130, 116, 100, 62, 165, 17, 188, 190, 97, 136, 181, 190, 75, 133, 25, 62, 240, 206, 11, 62, 232, 19, 101, 62, 234, 200, 208, 62, 139, 112, 66, 191, 93, 126, 189, 62, 208, 182, 129, 61, 253, 20, 158, 189, 27, 161, 6, 190, 135, 14, 122, 62, 247, 173, 17, 62, 227, 247, 55, 61, 186, 235, 206, 189, 3, 15, 26, 62, 201, 223, 99, 62, 8, 110, 98, 189, 221, 75, 111, 187, 2, 41, 38, 190, 90, 179, 191, 61, 141, 176, 238, 189, 176, 109, 137, 189, 32, 48, 49, 190, 155, 157, 123, 56, 123, 254, 234, 189, 99, 194, 235, 188, 211, 47, 7, 62, 123, 245, 14, 61, 52, 38, 224, 189, 133, 181, 2, 61, 89, 162, 214, 189, 43, 234, 164, 59, 200, 141, 34, 62, 32, 104, 162, 61, 39, 102, 48, 190, 2, 83, 135, 189, 99, 70, 217, 189, 126, 74, 38, 190, 34, 109, 24, 190, 20, 215, 37, 62, 48, 71, 232, 60, 94, 191, 144, 189, 188, 141, 158, 61, 202, 246, 31, 190, 163, 52, 15, 62, 122, 107, 142, 189, 255, 115, 98, 189, 244, 148, 231, 61, 196, 142, 204, 61, 239, 60, 37, 190, 89, 63, 146, 188, 93, 110, 37, 62, 212, 22, 145, 189, 92, 196, 194, 188, 78, 14, 9, 189, 149, 247, 16, 62, 0, 150, 14, 190, 89, 88, 12, 190, 55, 45, 184, 60, 68, 60, 66, 61, 11, 245, 201, 190, 42, 233, 148, 189, 249, 87, 86, 190, 190, 235, 69, 62, 21, 179, 51, 190, 115, 150, 216, 189, 128, 203, 22, 62, 242, 147, 156, 189, 240, 128, 85, 190, 229, 211, 129, 190, 185, 119, 57, 190, 62, 79, 181, 190, 170, 174, 42, 60, 126, 239, 111, 62, 96, 141, 85, 61, 108, 145, 14, 61, 169, 187, 6, 190, 175, 69, 38, 62, 254, 4, 125, 188, 185, 66, 113, 190, 103, 68, 178, 61, 159, 29, 4, 189, 150, 44, 66, 61, 215, 103, 21, 190, 44, 36, 141, 59, 50, 62, 231, 61, 212, 184, 151, 190, 192, 216, 36, 190, 117, 217, 192, 61, 241, 19, 243, 189, 6, 19, 136, 186, 35, 154, 46, 190, 196, 99, 70, 189, 127, 53, 12, 62, 178, 23, 90, 60, 49, 6, 49, 190, 65, 94, 22, 189, 86, 166, 219, 190, 255, 19, 178, 189, 52, 66, 159, 191, 83, 203, 203, 189, 85, 96, 48, 62, 232, 142, 149, 61, 204, 51, 149, 61, 100, 15, 225, 60, 207, 181, 89, 62, 24, 230, 87, 190, 150, 172, 189, 188, 251, 244, 13, 190, 130, 66, 195, 61, 55, 156, 20, 62, 51, 45, 84, 61, 0, 133, 19, 189, 37, 218, 32, 189, 47, 225, 7, 62, 200, 30, 49, 188, 211, 68, 8, 61, 126, 163, 49, 190, 184, 84, 32, 62, 255, 147, 225, 60, 255, 42, 58, 59, 138, 17, 100, 60, 178, 163, 195, 189, 28, 156, 25, 189, 215, 0, 170, 61, 167, 5, 144, 60, 254, 27, 184, 189, 95, 165, 43, 190, 32, 241, 1, 190, 200, 130, 232, 189, 233, 202, 140, 60, 171, 244, 1, 59, 119, 15, 192, 61, 75, 137, 52, 60, 237, 246, 131, 189, 143, 25, 31, 189, 187, 97, 46, 190, 47, 71, 3, 190, 46, 184, 253, 189, 175, 77, 171, 189, 94, 171, 165, 189, 86, 64, 36, 190, 143, 34, 215, 188, 28, 107, 19, 190, 56, 139, 3, 62, 181, 231, 225, 189, 228, 102, 183, 189, 53, 67, 121, 60, 124, 13, 100, 62, 199, 97, 227, 187, 53, 255, 125, 62, 250, 205, 181, 189, 119, 8, 88, 61, 241, 187, 29, 62, 4, 242, 174, 61, 80, 16, 154, 62, 158, 104, 69, 62, 18, 24, 5, 190, 175, 251, 25, 60, 220, 189, 119, 190, 36, 36, 114, 190, 200, 220, 66, 189, 53, 152, 174, 189, 136, 251, 133, 62, 121, 79, 132, 61, 124, 72, 208, 188, 40, 94, 222, 59, 120, 242, 177, 61, 179, 63, 29, 61, 144, 95, 102, 190, 206, 237, 212, 61, 200, 42, 0, 60, 127, 18, 137, 189, 252, 82, 139, 188, 240, 27, 5, 62, 5, 110, 190, 189, 13, 148, 20, 61, 143, 254, 82, 189, 173, 211, 87, 190, 58, 226, 10, 190, 67, 13, 23, 189, 223, 124, 178, 62, 240, 78, 144, 190, 122, 151, 208, 60, 235, 187, 104, 190, 87, 19, 58, 190, 205, 175, 156, 60, 194, 174, 47, 60, 191, 227, 76, 190, 219, 204, 168, 61, 178, 98, 88, 190, 28, 135, 5, 190, 190, 243, 198, 189, 200, 100, 1, 191, 13, 86, 49, 62, 236, 32, 148, 191, 183, 197, 130, 190, 5, 76, 38, 62, 92, 150, 214, 189, 148, 67, 187, 61, 39, 221, 176, 189, 245, 97, 161, 188, 71, 100, 140, 190, 253, 161, 30, 190, 19, 113, 75, 61, 253, 103, 17, 190, 254, 211, 76, 62, 128, 133, 215, 188, 28, 35, 107, 62, 205, 131, 73, 62, 144, 255, 34, 62, 228, 170, 5, 190, 168, 17, 224, 189, 181, 226, 26, 189, 92, 241, 34, 62, 203, 23, 239, 61, 226, 54, 214, 189, 234, 82, 37, 189, 55, 95, 198, 61, 94, 193, 12, 62, 151, 68, 33, 190, 155, 146, 35, 190, 184, 73, 176, 61, 32, 38, 56, 61, 222, 155, 129, 61, 156, 212, 225, 187, 131, 64, 10, 62, 89, 78, 21, 61, 188, 171, 151, 189, 173, 160, 123, 60, 65, 133, 179, 61, 248, 118, 245, 61, 127, 141, 25, 189, 221, 15, 152, 188, 145, 33, 17, 190, 166, 84, 36, 190, 121, 221, 154, 61, 126, 185, 176, 189, 214, 254, 158, 188, 23, 181, 123, 60, 18, 96, 103, 189, 139, 50, 238, 189, 224, 178, 87, 190, 8, 73, 79, 189, 200, 61, 226, 189, 101, 89, 100, 62, 14, 126, 247, 188, 230, 20, 114, 190, 247, 177, 6, 190, 63, 186, 231, 60, 7, 129, 144, 62, 84, 76, 207, 190, 148, 34, 103, 190, 80, 173, 75, 61, 132, 208, 182, 190, 223, 166, 28, 61, 220, 108, 107, 189, 184, 218, 22, 191, 246, 248, 126, 61, 99, 167, 148, 190, 247, 37, 21, 190, 214, 230, 151, 62, 170, 248, 13, 191, 76, 36, 190, 190, 78, 89, 207, 189, 29, 253, 31, 62, 90, 56, 150, 189, 200, 80, 136, 61, 31, 2, 50, 62, 105, 211, 59, 62, 68, 237, 93, 62, 100, 46, 11, 191, 219, 66, 220, 61, 0, 165, 186, 61, 194, 52, 140, 61, 193, 239, 114, 188, 242, 230, 202, 60, 154, 162, 77, 62, 242, 37, 240, 190, 202, 10, 236, 189, 36, 224, 188, 61, 186, 206, 232, 61, 74, 136, 89, 62, 24, 199, 131, 60, 211, 159, 184, 61, 82, 177, 132, 62, 163, 13, 142, 189, 234, 30, 83, 62, 181, 9, 83, 189, 139, 64, 115, 191, 29, 68, 204, 61, 237, 64, 152, 191, 53, 129, 132, 190, 106, 93, 208, 61, 58, 99, 42, 59, 203, 51, 214, 60, 233, 137, 65, 61, 30, 244, 238, 61, 46, 89, 85, 190, 113, 105, 46, 61, 87, 29, 87, 189, 109, 117, 113, 61, 91, 48, 38, 62, 60, 139, 199, 189, 24, 40, 38, 62, 191, 147, 115, 188, 72, 127, 133, 61, 238, 234, 106, 190, 215, 77, 63, 189, 115, 184, 36, 190, 121, 163, 157, 61, 229, 97, 164, 189, 79, 1, 23, 62, 59, 204, 245, 59, 91, 222, 111, 61, 60, 208, 111, 61, 60, 54, 116, 62, 7, 136, 207, 61, 53, 254, 58, 62, 153, 188, 20, 190, 228, 105, 101, 61, 92, 121, 241, 61, 95, 244, 91, 189, 230, 22, 64, 62, 28, 89, 96, 188, 21, 106, 193, 189, 82, 29, 154, 61, 144, 119, 159, 189, 45, 90, 218, 61, 5, 130, 21, 190, 153, 2, 193, 61, 142, 205, 128, 189, 236, 63, 72, 190, 228, 10, 97, 190, 42, 35, 132, 61, 177, 66, 63, 189, 84, 234, 131, 190, 141, 117, 18, 190, 40, 60, 14, 190, 206, 239, 181, 61, 22, 228, 163, 189, 198, 184, 145, 61, 145, 172, 13, 190, 95, 142, 96, 189, 254, 117, 21, 190, 149, 143, 13, 62, 226, 196, 196, 189, 179, 185, 108, 190, 192, 79, 156, 190, 61, 221, 8, 190, 137, 147, 80, 190, 191, 244, 142, 62, 247, 28, 27, 189, 6, 134, 132, 190, 61, 138, 226, 189, 11, 198, 121, 189, 124, 182, 16, 62, 22, 136, 58, 61, 171, 51, 217, 61, 72, 166, 70, 190, 210, 14, 113, 61, 101, 25, 22, 62, 208, 54, 116, 61, 83, 198, 208, 61, 68, 7, 32, 191, 231, 234, 113, 62, 168, 135, 16, 187, 0, 36, 87, 61, 106, 83, 152, 62, 233, 200, 11, 190, 91, 228, 248, 61, 235, 214, 194, 61, 84, 11, 17, 189, 89, 82, 63, 189, 127, 125, 104, 190, 19, 173, 52, 190, 175, 33, 50, 190, 90, 250, 5, 190, 18, 244, 25, 190, 210, 144, 236, 61, 27, 3, 216, 61, 87, 172, 19, 61, 103, 148, 17, 187, 74, 93, 178, 189, 66, 225, 186, 190, 12, 29, 209, 190, 89, 233, 4, 190, 245, 113, 243, 60, 152, 146, 108, 190, 1, 191, 39, 190, 94, 166, 58, 188, 118, 132, 251, 185, 157, 224, 199, 61, 182, 150, 75, 190, 180, 22, 45, 61, 53, 184, 123, 61, 159, 101, 143, 189, 105, 22, 136, 58, 218, 218, 59, 189, 30, 12, 137, 189, 105, 254, 63, 189, 161, 74, 77, 62, 8, 251, 151, 190, 84, 239, 207, 59, 17, 6, 11, 187, 134, 153, 64, 62, 45, 220, 4, 191, 28, 144, 63, 190, 21, 244, 97, 189, 214, 80, 173, 188, 241, 70, 128, 62, 63, 2, 79, 190, 28, 174, 6, 190, 183, 20, 4, 188, 62, 170, 135, 61, 169, 106, 35, 189, 151, 131, 248, 190, 234, 20, 51, 191, 174, 147, 39, 62, 237, 210, 139, 191, 120, 151, 222, 189, 7, 115, 206, 62, 130, 184, 42, 190, 254, 127, 224, 61, 113, 156, 5, 190, 208, 31, 110, 62, 188, 196, 148, 190, 95, 165, 46, 61, 65, 196, 85, 190, 9, 229, 62, 61, 61, 179, 74, 62, 134, 221, 41, 62, 248, 146, 211, 187, 65, 70, 37, 62, 130, 157, 112, 190, 135, 171, 149, 189, 71, 255, 44, 62, 83, 127, 82, 62, 10, 147, 52, 191, 171, 143, 157, 189, 239, 178, 149, 60, 145, 31, 79, 190, 58, 67, 109, 62, 133, 149, 25, 189, 118, 189, 240, 189, 41, 170, 80, 62, 179, 118, 168, 189, 139, 155, 36, 62, 176, 58, 224, 190, 119, 37, 119, 191, 239, 169, 165, 189, 141, 41, 177, 191, 141, 71, 138, 190, 91, 44, 201, 61, 90, 230, 185, 188, 85, 8, 103, 62, 203, 58, 85, 190, 239, 98, 70, 62, 123, 62, 102, 190, 122, 65, 61, 62, 191, 187, 156, 188, 26, 227, 4, 62, 98, 224, 122, 62, 105, 239, 41, 62, 137, 102, 206, 62, 29, 91, 107, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 112, 230, 189, 99, 126, 210, 189, 59, 134, 64, 61, 64, 22, 14, 190, 206, 202, 118, 189, 110, 94, 24, 62, 6, 142, 138, 189, 208, 74, 83, 62, 145, 165, 6, 62, 215, 254, 229, 61, 162, 20, 24, 190, 4, 161, 135, 60, 250, 157, 156, 62, 117, 79, 205, 185, 129, 240, 49, 61, 206, 210, 216, 189, 158, 253, 133, 59, 182, 132, 97, 62, 229, 89, 10, 62, 98, 7, 20, 190, 180, 47, 15, 62, 250, 97, 150, 189, 188, 101, 146, 62, 133, 190, 85, 62, 205, 44, 27, 188, 94, 244, 19, 190, 227, 140, 158, 189, 61, 21, 213, 61, 237, 206, 172, 61, 75, 148, 25, 62, 129, 225, 23, 62, 243, 38, 98, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 101, 20, 191, 141, 134, 163, 190, 108, 235, 131, 190, 222, 25, 84, 189, 173, 125, 62, 62, 0, 194, 178, 190, 48, 175, 179, 189, 72, 123, 133, 62, 65, 176, 160, 62, 112, 90, 47, 62, 198, 104, 62, 61, 132, 22, 90, 190, 239, 90, 165, 62, 46, 188, 42, 190, 61, 202, 202, 190, 78, 116, 182, 62, 45, 141, 134, 190, 201, 211, 26, 63, 89, 15, 130, 188, 173, 116, 100, 62, 201, 211, 184, 190, 58, 109, 235, 189, 141, 178, 74, 62, 253, 135, 2, 191, 221, 175, 177, 187, 179, 105, 17, 63, 132, 178, 120, 190, 222, 178, 128, 62, 241, 79, 173, 190, 40, 67, 23, 60, 130, 195, 3, 191, 149, 122, 55, 191, 18, 100, 24, 58, 14, 155, 176, 61, 205, 88, 137, 190, 242, 108, 18, 189, 250, 16, 240, 189, 12, 84, 70, 190, 44, 231, 54, 59, 157, 122, 18, 190, 181, 6, 127, 61, 203, 239, 42, 62, 172, 81, 6, 190, 152, 180, 43, 62, 56, 99, 55, 190, 8, 6, 179, 62, 253, 217, 127, 62, 77, 131, 179, 61, 39, 237, 90, 190, 112, 24, 103, 189, 3, 158, 20, 61, 252, 32, 154, 62, 120, 63, 89, 190, 147, 203, 37, 62, 136, 176, 9, 190, 62, 65, 134, 189, 89, 242, 245, 189, 31, 151, 132, 62, 254, 182, 71, 189, 107, 87, 239, 61, 23, 21, 21, 189, 119, 96, 103, 190, 221, 39, 60, 62, 213, 46, 9, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 115, 15, 62, 249, 99, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 183, 63, 62, 38, 102, 67, 62, 137, 12, 191, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 14, 36, 63, 202, 78, 93, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}