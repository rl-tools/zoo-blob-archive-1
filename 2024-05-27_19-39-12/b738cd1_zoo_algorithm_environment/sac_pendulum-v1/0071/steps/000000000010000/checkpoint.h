// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 181, 221, 62, 42, 3, 12, 191, 192, 169, 246, 190, 22, 121, 173, 188, 64, 67, 68, 191, 255, 57, 215, 62, 169, 249, 81, 190, 121, 138, 217, 189, 193, 112, 174, 189, 123, 95, 6, 190, 144, 152, 155, 62, 110, 34, 16, 191, 183, 206, 79, 190, 81, 146, 117, 63, 25, 121, 7, 63, 81, 31, 247, 61, 9, 114, 70, 190, 253, 52, 15, 63, 156, 62, 45, 63, 91, 225, 130, 191, 196, 174, 142, 190, 8, 16, 205, 61, 32, 255, 89, 63, 24, 104, 154, 62, 187, 68, 53, 190, 181, 24, 122, 63, 29, 96, 78, 62, 51, 44, 197, 62, 143, 138, 139, 191, 163, 44, 86, 190, 140, 107, 202, 62, 103, 193, 128, 191, 219, 11, 81, 190, 234, 92, 195, 190, 206, 51, 32, 63, 49, 198, 227, 61, 80, 197, 10, 62, 52, 106, 233, 190, 183, 59, 226, 61, 198, 83, 82, 63, 147, 222, 235, 62, 42, 147, 10, 63, 83, 189, 39, 63, 146, 171, 39, 191, 151, 18, 134, 190, 43, 45, 76, 191, 107, 130, 187, 188, 141, 208, 104, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 165, 141, 27, 191, 231, 16, 52, 191, 69, 59, 61, 63, 195, 7, 19, 63, 115, 17, 48, 191, 178, 0, 89, 62, 157, 251, 168, 62, 32, 18, 96, 63, 190, 254, 199, 190, 106, 236, 39, 191, 199, 195, 21, 62, 79, 184, 211, 62, 194, 163, 27, 191, 168, 25, 147, 191, 98, 11, 230, 189, 37, 189, 42, 63, 139, 206, 167, 61, 99, 124, 25, 191, 242, 138, 101, 63, 72, 246, 197, 62, 217, 159, 222, 62, 71, 23, 49, 61, 21, 30, 25, 63, 232, 178, 10, 63, 41, 185, 47, 63, 14, 242, 66, 63, 86, 74, 148, 62, 87, 84, 48, 191, 115, 160, 80, 63, 114, 4, 224, 189, 252, 50, 129, 63, 140, 229, 126, 63, 65, 110, 177, 62, 128, 134, 6, 191, 246, 175, 9, 63, 115, 134, 28, 61, 255, 63, 232, 190, 157, 240, 173, 190, 7, 196, 144, 62, 20, 177, 21, 63, 176, 9, 151, 190, 32, 128, 195, 62, 211, 235, 244, 190, 18, 206, 40, 191, 225, 220, 183, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 251, 106, 191, 44, 145, 81, 190, 246, 206, 244, 62, 124, 37, 74, 62, 190, 2, 0, 190, 164, 9, 153, 190, 157, 252, 174, 62, 36, 243, 190, 62, 15, 151, 224, 62, 135, 46, 162, 59, 36, 74, 203, 62, 77, 46, 194, 62, 204, 176, 22, 62, 46, 34, 22, 191, 219, 229, 51, 191, 112, 43, 206, 190, 242, 123, 12, 191, 140, 68, 157, 189, 183, 25, 23, 63, 50, 211, 76, 62, 15, 49, 131, 189, 189, 115, 170, 62, 83, 249, 195, 62, 74, 173, 212, 190, 155, 127, 139, 62, 106, 111, 177, 61, 162, 110, 176, 190, 205, 45, 202, 190, 159, 97, 255, 62, 28, 240, 172, 189, 197, 9, 29, 190, 100, 225, 210, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 210, 216, 61, 242, 157, 85, 62, 132, 124, 133, 62, 238, 51, 122, 62, 28, 49, 159, 191, 132, 98, 216, 189, 54, 74, 197, 189, 151, 157, 179, 190, 62, 187, 173, 189, 70, 48, 2, 191, 255, 1, 57, 62, 107, 4, 166, 188, 202, 73, 155, 62, 63, 40, 237, 61, 208, 158, 139, 191, 11, 196, 254, 61, 242, 82, 197, 188, 13, 87, 30, 190, 221, 4, 148, 60, 90, 230, 41, 60, 233, 218, 128, 62, 147, 180, 164, 62, 178, 9, 55, 190, 50, 150, 238, 61, 158, 181, 63, 191, 68, 88, 220, 62, 172, 9, 23, 191, 176, 169, 110, 188, 197, 147, 46, 62, 146, 117, 13, 63, 171, 250, 87, 61, 212, 142, 149, 62, 121, 103, 172, 190, 185, 67, 150, 62, 11, 227, 147, 190, 97, 250, 137, 62, 24, 96, 144, 188, 253, 190, 197, 60, 52, 113, 68, 190, 106, 155, 176, 189, 129, 141, 109, 190, 58, 179, 73, 190, 228, 177, 37, 189, 234, 68, 92, 190, 105, 243, 48, 189, 94, 133, 93, 62, 152, 150, 114, 191, 180, 182, 82, 189, 121, 196, 19, 189, 28, 189, 36, 190, 221, 62, 67, 188, 132, 70, 48, 62, 25, 136, 56, 190, 87, 208, 19, 189, 26, 11, 148, 61, 78, 100, 159, 62, 85, 213, 250, 61, 222, 232, 13, 62, 39, 49, 22, 191, 97, 235, 243, 62, 207, 254, 56, 190, 9, 118, 222, 59, 61, 128, 38, 62, 22, 128, 83, 62, 114, 231, 26, 189, 69, 33, 14, 62, 0, 14, 88, 61, 62, 109, 126, 61, 110, 192, 2, 191, 95, 108, 137, 59, 1, 232, 61, 61, 179, 196, 142, 190, 209, 171, 96, 188, 164, 232, 60, 190, 66, 140, 142, 62, 39, 204, 150, 189, 64, 70, 12, 188, 172, 230, 206, 61, 70, 42, 130, 189, 191, 84, 179, 189, 193, 52, 12, 190, 224, 204, 204, 189, 175, 187, 234, 61, 40, 159, 238, 185, 22, 252, 219, 61, 30, 19, 196, 62, 142, 178, 249, 61, 64, 226, 53, 62, 16, 215, 6, 190, 168, 53, 131, 62, 10, 68, 72, 190, 112, 244, 28, 62, 150, 171, 29, 189, 147, 85, 132, 62, 176, 85, 243, 61, 67, 78, 167, 189, 159, 61, 63, 189, 68, 42, 52, 62, 135, 143, 98, 189, 191, 145, 23, 190, 175, 22, 243, 189, 63, 10, 45, 190, 181, 45, 217, 188, 61, 136, 192, 189, 164, 10, 212, 59, 64, 220, 11, 190, 104, 132, 168, 61, 223, 238, 32, 190, 93, 165, 55, 188, 150, 13, 104, 61, 187, 4, 107, 61, 43, 126, 24, 190, 136, 14, 151, 189, 242, 245, 195, 189, 76, 254, 29, 62, 74, 120, 31, 190, 198, 212, 23, 189, 151, 203, 49, 189, 44, 130, 37, 190, 76, 27, 30, 190, 212, 78, 131, 61, 211, 251, 62, 189, 48, 16, 46, 62, 40, 119, 25, 190, 249, 123, 2, 190, 14, 218, 52, 190, 177, 233, 201, 61, 65, 32, 201, 189, 44, 118, 170, 188, 173, 187, 2, 62, 187, 9, 151, 62, 40, 113, 174, 189, 22, 220, 87, 190, 129, 219, 197, 188, 67, 217, 232, 61, 138, 253, 143, 61, 127, 99, 209, 61, 236, 224, 83, 62, 171, 40, 49, 62, 48, 89, 156, 190, 219, 77, 246, 61, 21, 228, 29, 190, 93, 119, 123, 190, 196, 115, 49, 62, 78, 156, 129, 188, 121, 153, 201, 189, 251, 19, 104, 62, 0, 209, 186, 62, 98, 82, 220, 189, 83, 250, 52, 61, 79, 179, 139, 62, 176, 121, 10, 189, 132, 166, 147, 190, 221, 171, 45, 62, 44, 75, 43, 62, 109, 148, 120, 190, 4, 168, 90, 188, 158, 137, 137, 61, 38, 211, 161, 61, 61, 29, 202, 189, 239, 145, 38, 189, 14, 110, 100, 188, 134, 162, 98, 62, 107, 138, 41, 190, 117, 213, 47, 190, 114, 109, 56, 190, 250, 31, 137, 190, 139, 145, 29, 189, 175, 157, 82, 188, 227, 121, 8, 191, 199, 106, 150, 61, 250, 40, 0, 190, 94, 122, 204, 61, 181, 216, 80, 62, 83, 79, 80, 191, 198, 58, 229, 188, 152, 26, 17, 62, 54, 5, 162, 62, 53, 228, 212, 62, 6, 62, 145, 62, 247, 205, 220, 61, 176, 204, 192, 60, 144, 34, 2, 190, 28, 4, 29, 62, 1, 127, 97, 62, 218, 68, 118, 62, 32, 102, 38, 190, 2, 96, 47, 61, 85, 233, 7, 190, 254, 5, 4, 62, 230, 144, 6, 62, 119, 215, 168, 190, 62, 62, 24, 190, 210, 119, 105, 190, 103, 106, 16, 190, 150, 162, 140, 188, 166, 18, 3, 62, 190, 51, 219, 190, 55, 54, 127, 190, 210, 251, 6, 62, 171, 62, 242, 62, 182, 249, 172, 189, 178, 53, 29, 62, 46, 158, 96, 62, 89, 35, 7, 62, 45, 21, 157, 190, 243, 136, 156, 190, 129, 171, 29, 191, 195, 217, 104, 188, 1, 96, 167, 190, 183, 244, 88, 190, 95, 95, 27, 63, 113, 214, 142, 190, 109, 247, 46, 191, 184, 56, 107, 190, 251, 247, 151, 190, 85, 151, 192, 61, 233, 141, 126, 62, 10, 140, 232, 62, 103, 221, 53, 190, 45, 37, 145, 62, 143, 73, 67, 191, 231, 14, 65, 190, 17, 122, 49, 191, 74, 72, 128, 188, 202, 111, 131, 190, 65, 60, 64, 62, 152, 188, 174, 189, 213, 57, 164, 60, 198, 89, 236, 189, 131, 176, 110, 61, 0, 93, 58, 62, 181, 55, 210, 61, 115, 136, 164, 62, 160, 238, 66, 62, 151, 246, 213, 61, 183, 217, 236, 61, 124, 74, 200, 188, 186, 149, 57, 190, 123, 21, 132, 62, 141, 195, 44, 62, 134, 213, 56, 62, 62, 169, 158, 62, 199, 18, 37, 190, 103, 108, 4, 61, 122, 75, 73, 190, 55, 43, 217, 60, 200, 117, 4, 190, 197, 160, 79, 188, 2, 129, 105, 189, 72, 222, 43, 61, 242, 229, 179, 189, 218, 78, 248, 61, 219, 89, 28, 190, 180, 74, 21, 189, 81, 182, 37, 62, 116, 86, 51, 187, 30, 147, 205, 190, 162, 102, 53, 188, 128, 219, 139, 189, 250, 128, 232, 60, 104, 160, 163, 190, 45, 49, 99, 62, 201, 2, 147, 62, 236, 121, 41, 190, 55, 50, 151, 62, 182, 39, 88, 189, 87, 57, 34, 62, 7, 32, 0, 190, 143, 207, 171, 190, 181, 182, 115, 188, 240, 158, 24, 62, 181, 148, 115, 189, 171, 37, 218, 62, 252, 192, 30, 62, 46, 215, 157, 190, 191, 155, 177, 62, 210, 54, 86, 61, 91, 162, 105, 62, 21, 53, 7, 191, 117, 167, 111, 62, 29, 184, 143, 190, 117, 229, 17, 190, 158, 131, 2, 191, 234, 168, 179, 60, 132, 247, 55, 62, 164, 0, 2, 190, 244, 236, 26, 190, 40, 213, 179, 58, 93, 237, 43, 190, 46, 252, 48, 190, 127, 0, 85, 60, 87, 63, 44, 190, 198, 131, 249, 61, 106, 252, 39, 190, 145, 222, 69, 190, 89, 141, 52, 190, 97, 70, 50, 190, 206, 62, 133, 60, 92, 73, 27, 190, 168, 237, 219, 189, 121, 116, 177, 189, 202, 148, 201, 188, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 137, 197, 250, 59, 229, 223, 187, 61, 82, 10, 14, 190, 205, 135, 128, 60, 155, 13, 200, 189, 4, 227, 204, 189, 83, 154, 170, 61, 79, 214, 27, 190, 236, 229, 196, 61, 241, 236, 137, 61, 67, 69, 99, 61, 52, 209, 70, 189, 206, 25, 0, 190, 56, 223, 247, 60, 22, 175, 27, 60, 179, 77, 110, 187, 125, 235, 154, 60, 123, 189, 182, 60, 14, 172, 49, 61, 46, 255, 92, 190, 49, 162, 163, 58, 23, 236, 27, 62, 251, 241, 7, 62, 9, 74, 87, 189, 186, 254, 38, 190, 70, 126, 7, 190, 193, 183, 111, 189, 148, 101, 29, 189, 220, 105, 100, 61, 99, 174, 65, 190, 18, 194, 17, 190, 179, 81, 242, 61, 53, 73, 131, 188, 181, 76, 46, 190, 51, 98, 217, 189, 123, 4, 217, 61, 145, 19, 32, 190, 53, 13, 9, 190, 0, 39, 132, 61, 123, 5, 109, 186, 134, 148, 90, 189, 124, 208, 242, 189, 197, 244, 87, 190, 162, 68, 241, 61, 107, 133, 186, 189, 36, 77, 16, 62, 157, 218, 192, 189, 62, 221, 155, 61, 221, 117, 17, 190, 44, 53, 104, 62, 70, 72, 155, 189, 50, 244, 102, 62, 159, 53, 76, 190, 51, 46, 199, 61, 93, 181, 12, 189, 216, 180, 174, 190, 88, 209, 170, 190, 152, 85, 32, 188, 193, 45, 57, 190, 206, 28, 221, 62, 142, 105, 50, 191, 39, 38, 89, 190, 86, 6, 253, 188, 148, 134, 110, 190, 253, 43, 200, 61, 125, 231, 61, 62, 110, 112, 169, 188, 134, 5, 9, 60, 212, 20, 83, 189, 145, 105, 88, 62, 219, 123, 222, 60, 3, 251, 157, 62, 246, 103, 43, 62, 42, 101, 227, 62, 201, 179, 30, 189, 5, 50, 213, 189, 219, 109, 99, 62, 51, 151, 231, 60, 244, 90, 21, 190, 181, 149, 160, 189, 176, 202, 95, 62, 224, 220, 12, 190, 158, 60, 84, 189, 236, 148, 180, 60, 23, 130, 27, 62, 15, 185, 147, 61, 39, 169, 220, 187, 112, 138, 121, 62, 209, 82, 140, 61, 249, 182, 92, 190, 148, 245, 86, 62, 228, 38, 1, 190, 171, 58, 109, 190, 74, 154, 195, 188, 158, 193, 246, 60, 228, 147, 81, 62, 162, 242, 83, 62, 69, 200, 252, 186, 250, 142, 135, 61, 51, 87, 98, 189, 191, 207, 59, 62, 203, 124, 255, 189, 7, 139, 122, 188, 21, 94, 88, 190, 220, 180, 89, 189, 129, 251, 21, 191, 136, 223, 131, 189, 181, 132, 113, 61, 209, 213, 85, 190, 114, 19, 73, 62, 7, 121, 144, 62, 6, 99, 9, 62, 173, 119, 236, 61, 71, 144, 171, 188, 119, 114, 6, 190, 221, 176, 142, 62, 207, 62, 120, 62, 44, 121, 5, 191, 193, 36, 101, 189, 59, 166, 232, 62, 72, 185, 117, 60, 139, 48, 104, 190, 26, 116, 11, 62, 183, 3, 82, 59, 76, 81, 216, 62, 4, 36, 13, 189, 57, 212, 240, 61, 150, 132, 188, 188, 114, 88, 118, 62, 229, 45, 220, 189, 89, 18, 154, 190, 179, 35, 136, 189, 240, 157, 165, 60, 104, 230, 25, 190, 245, 117, 104, 190, 57, 237, 41, 191, 88, 153, 79, 61, 56, 71, 87, 191, 204, 131, 130, 189, 89, 117, 29, 191, 62, 145, 198, 187, 103, 60, 92, 61, 177, 40, 202, 190, 216, 197, 233, 188, 135, 92, 31, 62, 35, 17, 18, 190, 121, 234, 12, 190, 220, 40, 62, 189, 87, 122, 247, 189, 63, 201, 62, 61, 247, 102, 172, 190, 110, 230, 105, 190, 254, 7, 5, 63, 57, 179, 40, 190, 46, 147, 56, 62, 74, 123, 215, 188, 83, 20, 245, 189, 38, 206, 163, 62, 214, 8, 9, 62, 185, 148, 195, 62, 54, 195, 38, 62, 239, 224, 44, 191, 96, 170, 167, 62, 141, 136, 62, 62, 253, 29, 235, 189, 179, 58, 231, 189, 108, 223, 25, 189, 94, 56, 4, 190, 168, 216, 27, 190, 215, 210, 56, 189, 172, 249, 10, 189, 63, 88, 11, 188, 14, 58, 180, 188, 224, 179, 142, 189, 140, 38, 91, 61, 150, 61, 78, 62, 132, 57, 27, 188, 179, 59, 233, 60, 184, 227, 110, 190, 74, 113, 8, 61, 204, 240, 146, 62, 220, 196, 75, 190, 248, 38, 60, 191, 220, 19, 28, 62, 204, 72, 146, 62, 210, 221, 17, 191, 236, 61, 42, 62, 213, 132, 152, 189, 250, 102, 23, 188, 120, 168, 26, 190, 28, 155, 236, 61, 246, 189, 178, 189, 24, 1, 189, 62, 174, 180, 53, 190, 97, 226, 129, 189, 7, 188, 234, 62, 216, 225, 144, 62, 74, 77, 150, 189, 89, 52, 115, 188, 248, 29, 133, 190, 110, 226, 197, 190, 254, 228, 180, 190, 241, 63, 173, 190, 145, 91, 117, 62, 168, 98, 191, 62, 100, 239, 126, 62, 142, 236, 152, 188, 189, 131, 65, 62, 211, 109, 20, 62, 17, 216, 36, 61, 147, 111, 78, 190, 227, 82, 1, 190, 5, 127, 128, 187, 142, 107, 29, 60, 32, 4, 29, 62, 125, 144, 10, 190, 134, 134, 97, 62, 76, 219, 91, 61, 53, 219, 166, 189, 17, 127, 218, 61, 175, 176, 23, 189, 213, 20, 156, 190, 231, 77, 196, 189, 179, 124, 2, 191, 65, 121, 149, 62, 81, 63, 162, 62, 95, 194, 137, 189, 16, 246, 159, 189, 38, 114, 33, 61, 140, 234, 115, 62, 72, 179, 206, 60, 169, 41, 159, 62, 203, 174, 206, 59, 172, 239, 91, 62, 18, 215, 205, 61, 2, 155, 204, 190, 52, 108, 61, 62, 84, 242, 162, 189, 88, 150, 30, 191, 187, 21, 7, 190, 229, 231, 73, 189, 198, 223, 246, 190, 158, 28, 139, 61, 220, 143, 109, 190, 55, 28, 35, 62, 172, 199, 188, 61, 164, 119, 151, 190, 149, 187, 171, 62, 98, 61, 64, 62, 56, 17, 185, 60, 22, 164, 42, 62, 79, 142, 189, 190, 197, 122, 96, 191, 185, 176, 59, 62, 240, 206, 11, 62, 92, 254, 99, 62, 144, 1, 199, 62, 239, 224, 78, 191, 198, 52, 217, 62, 185, 111, 50, 61, 138, 38, 69, 189, 195, 220, 1, 190, 26, 253, 105, 62, 49, 224, 20, 62, 136, 67, 125, 62, 185, 144, 21, 190, 51, 114, 46, 62, 125, 23, 130, 62, 45, 104, 126, 188, 229, 229, 61, 61, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 204, 157, 107, 62, 7, 203, 95, 62, 180, 218, 219, 189, 23, 194, 253, 61, 73, 122, 150, 189, 187, 203, 45, 62, 244, 151, 153, 190, 7, 38, 26, 190, 250, 164, 58, 187, 206, 248, 28, 62, 117, 210, 51, 191, 77, 119, 2, 190, 50, 53, 55, 190, 46, 145, 148, 62, 16, 127, 249, 62, 243, 117, 24, 190, 128, 203, 22, 62, 165, 69, 170, 189, 129, 39, 16, 190, 106, 1, 2, 62, 247, 209, 143, 190, 0, 87, 20, 191, 42, 129, 188, 62, 33, 121, 168, 62, 197, 185, 50, 61, 114, 211, 194, 61, 79, 175, 82, 61, 252, 134, 131, 62, 13, 81, 188, 189, 6, 9, 184, 190, 57, 210, 40, 62, 108, 151, 194, 61, 149, 74, 103, 61, 224, 148, 12, 191, 101, 235, 23, 189, 246, 241, 251, 56, 13, 196, 22, 191, 214, 197, 167, 186, 146, 93, 200, 61, 61, 143, 191, 189, 193, 25, 36, 60, 231, 3, 129, 190, 67, 68, 7, 190, 139, 8, 39, 62, 115, 219, 85, 59, 139, 254, 15, 61, 203, 71, 31, 190, 81, 76, 240, 190, 255, 19, 178, 189, 218, 167, 154, 191, 135, 164, 143, 189, 40, 214, 190, 61, 197, 147, 141, 62, 137, 73, 159, 61, 112, 224, 177, 59, 136, 164, 161, 62, 192, 51, 41, 190, 43, 109, 248, 60, 93, 45, 15, 190, 21, 236, 88, 62, 106, 214, 21, 62, 225, 178, 80, 189, 216, 43, 65, 60, 84, 116, 239, 189, 47, 225, 7, 62, 43, 158, 17, 189, 207, 137, 185, 59, 17, 220, 48, 190, 184, 84, 32, 62, 101, 180, 203, 60, 203, 238, 40, 60, 109, 108, 80, 60, 178, 163, 195, 189, 105, 228, 38, 189, 39, 79, 175, 61, 167, 5, 144, 60, 28, 254, 217, 189, 123, 157, 44, 190, 200, 103, 241, 189, 13, 95, 250, 189, 233, 202, 140, 60, 190, 110, 10, 189, 30, 183, 201, 61, 221, 190, 61, 60, 166, 246, 147, 189, 232, 43, 105, 189, 8, 243, 17, 190, 252, 115, 3, 190, 36, 181, 243, 189, 163, 81, 169, 189, 94, 171, 165, 189, 42, 142, 39, 190, 28, 246, 4, 189, 199, 132, 59, 190, 101, 4, 9, 62, 201, 201, 13, 190, 135, 190, 21, 190, 147, 116, 155, 60, 68, 220, 108, 62, 4, 71, 72, 186, 196, 206, 116, 62, 189, 86, 72, 189, 80, 173, 169, 61, 35, 204, 204, 61, 95, 180, 60, 188, 141, 230, 202, 62, 27, 164, 33, 62, 197, 232, 74, 190, 44, 5, 242, 188, 91, 41, 94, 190, 244, 246, 154, 190, 115, 177, 179, 188, 53, 152, 174, 189, 210, 166, 131, 62, 40, 115, 133, 61, 184, 166, 149, 189, 103, 91, 28, 61, 164, 69, 45, 61, 35, 186, 149, 61, 211, 234, 62, 190, 246, 74, 141, 61, 197, 109, 143, 60, 24, 94, 155, 189, 166, 142, 75, 189, 56, 40, 154, 61, 249, 129, 143, 189, 53, 40, 194, 61, 117, 26, 41, 59, 31, 214, 122, 190, 239, 193, 147, 190, 234, 3, 18, 189, 37, 160, 147, 62, 141, 151, 13, 191, 122, 151, 208, 60, 225, 47, 34, 190, 191, 202, 97, 190, 134, 237, 132, 188, 137, 12, 245, 60, 77, 237, 109, 190, 67, 115, 208, 60, 29, 218, 160, 190, 40, 239, 249, 189, 60, 10, 32, 191, 151, 84, 46, 191, 13, 86, 49, 62, 219, 60, 138, 191, 173, 94, 62, 190, 75, 90, 112, 60, 192, 106, 7, 62, 122, 63, 147, 62, 251, 136, 230, 189, 76, 178, 20, 60, 233, 197, 208, 190, 197, 63, 94, 190, 5, 204, 136, 189, 199, 173, 68, 190, 204, 184, 39, 62, 85, 127, 34, 190, 28, 35, 107, 62, 230, 156, 95, 62, 144, 255, 34, 62, 177, 145, 12, 190, 209, 65, 228, 189, 181, 226, 26, 189, 118, 22, 26, 62, 34, 43, 225, 61, 226, 54, 214, 189, 61, 108, 62, 189, 238, 76, 192, 61, 94, 193, 12, 62, 217, 75, 33, 190, 130, 98, 40, 190, 105, 50, 171, 61, 124, 198, 49, 61, 222, 155, 129, 61, 186, 175, 189, 188, 131, 64, 10, 62, 206, 13, 172, 60, 159, 200, 160, 189, 173, 160, 123, 60, 127, 201, 160, 61, 71, 81, 238, 61, 127, 141, 25, 189, 31, 21, 157, 188, 155, 84, 27, 190, 236, 115, 37, 190, 121, 221, 154, 61, 126, 185, 176, 189, 125, 72, 198, 188, 205, 34, 37, 60, 150, 125, 117, 189, 139, 50, 238, 189, 81, 74, 9, 191, 70, 111, 69, 59, 57, 71, 181, 61, 86, 59, 55, 62, 58, 225, 230, 189, 167, 112, 173, 190, 90, 136, 169, 190, 177, 98, 24, 189, 173, 71, 91, 62, 120, 209, 209, 190, 4, 237, 140, 190, 219, 76, 227, 61, 165, 55, 77, 190, 156, 14, 151, 61, 197, 98, 207, 190, 214, 192, 39, 191, 246, 248, 126, 61, 228, 51, 153, 190, 27, 78, 17, 189, 227, 240, 196, 61, 91, 152, 158, 190, 148, 193, 145, 62, 105, 146, 76, 190, 192, 90, 87, 62, 177, 174, 252, 189, 194, 111, 106, 61, 117, 232, 158, 189, 28, 13, 130, 62, 167, 38, 148, 62, 2, 232, 239, 62, 227, 234, 202, 61, 73, 222, 161, 62, 130, 45, 24, 62, 71, 228, 200, 190, 191, 240, 0, 60, 144, 32, 48, 62, 74, 215, 45, 191, 59, 32, 187, 189, 184, 109, 217, 61, 103, 33, 199, 61, 130, 218, 109, 62, 227, 114, 141, 188, 148, 122, 187, 60, 95, 246, 163, 62, 132, 37, 25, 190, 175, 240, 156, 62, 99, 15, 236, 58, 67, 199, 148, 191, 29, 68, 204, 61, 163, 159, 172, 191, 176, 185, 161, 190, 72, 134, 184, 60, 31, 151, 4, 62, 178, 50, 63, 62, 194, 10, 248, 60, 72, 190, 6, 62, 24, 42, 118, 190, 32, 249, 209, 187, 44, 0, 47, 188, 216, 85, 138, 61, 201, 196, 108, 62, 219, 214, 198, 190, 248, 207, 12, 62, 117, 118, 191, 60, 50, 187, 115, 190, 219, 131, 72, 190, 7, 130, 180, 189, 41, 21, 89, 190, 140, 29, 36, 62, 68, 81, 157, 188, 205, 188, 127, 62, 15, 212, 103, 187, 235, 75, 222, 60, 28, 160, 172, 62, 111, 41, 154, 62, 2, 115, 239, 61, 182, 247, 219, 61, 69, 49, 104, 190, 111, 165, 32, 189, 62, 200, 50, 62, 95, 244, 91, 189, 171, 178, 78, 62, 191, 197, 132, 189, 226, 123, 161, 190, 117, 14, 0, 62, 237, 134, 30, 190, 73, 41, 104, 61, 151, 89, 133, 190, 5, 187, 166, 61, 130, 200, 1, 190, 83, 212, 7, 190, 145, 232, 221, 190, 251, 95, 204, 61, 235, 200, 100, 189, 245, 10, 146, 190, 148, 175, 77, 190, 40, 60, 14, 190, 117, 187, 19, 62, 210, 35, 86, 190, 35, 98, 124, 61, 76, 134, 79, 190, 231, 222, 230, 188, 140, 76, 49, 190, 137, 134, 225, 61, 4, 163, 97, 190, 213, 152, 195, 190, 34, 36, 130, 190, 35, 24, 166, 190, 231, 155, 180, 189, 33, 149, 190, 62, 171, 30, 226, 190, 68, 107, 129, 190, 61, 138, 226, 189, 182, 145, 171, 188, 15, 236, 90, 62, 49, 175, 93, 60, 213, 14, 150, 61, 210, 202, 170, 190, 146, 30, 55, 61, 211, 51, 119, 62, 30, 73, 98, 61, 31, 103, 24, 62, 211, 113, 30, 191, 31, 92, 162, 62, 6, 195, 146, 190, 94, 138, 126, 61, 161, 159, 193, 62, 145, 114, 229, 190, 60, 175, 114, 62, 128, 146, 252, 61, 3, 118, 166, 57, 122, 197, 97, 189, 214, 165, 77, 191, 138, 221, 18, 191, 192, 143, 225, 189, 205, 112, 182, 190, 161, 187, 102, 190, 199, 216, 144, 62, 250, 128, 136, 62, 137, 252, 5, 188, 170, 31, 223, 61, 33, 92, 138, 188, 61, 192, 222, 188, 171, 61, 114, 190, 89, 233, 4, 190, 123, 79, 107, 62, 17, 156, 47, 190, 231, 210, 170, 190, 60, 48, 214, 61, 229, 62, 84, 62, 219, 81, 176, 61, 51, 14, 71, 190, 21, 59, 163, 190, 114, 78, 172, 190, 141, 42, 28, 190, 229, 122, 81, 190, 1, 144, 169, 189, 235, 148, 255, 186, 222, 172, 128, 190, 162, 102, 147, 62, 161, 40, 179, 190, 38, 91, 14, 189, 69, 198, 142, 60, 201, 110, 26, 62, 248, 199, 105, 191, 87, 59, 154, 190, 189, 208, 172, 189, 62, 168, 134, 189, 225, 3, 114, 62, 247, 73, 195, 190, 27, 83, 43, 190, 235, 131, 3, 189, 118, 5, 103, 60, 235, 240, 200, 61, 160, 123, 147, 191, 51, 254, 160, 190, 174, 147, 39, 62, 173, 227, 2, 191, 163, 105, 14, 190, 219, 171, 162, 62, 9, 127, 191, 61, 169, 74, 230, 62, 69, 47, 26, 190, 71, 174, 143, 62, 196, 162, 180, 190, 92, 185, 208, 61, 143, 6, 248, 190, 150, 16, 50, 62, 223, 69, 68, 62, 177, 140, 178, 62, 203, 110, 154, 188, 78, 72, 77, 62, 202, 23, 62, 190, 183, 122, 12, 191, 223, 101, 34, 62, 146, 143, 79, 62, 251, 82, 141, 191, 36, 98, 204, 61, 71, 88, 140, 61, 108, 27, 135, 190, 94, 155, 41, 62, 201, 56, 214, 189, 58, 189, 246, 189, 121, 10, 192, 61, 134, 149, 147, 189, 227, 40, 167, 62, 50, 1, 120, 191, 45, 155, 115, 191, 239, 169, 165, 189, 41, 77, 147, 191, 164, 176, 114, 190, 133, 153, 211, 61, 255, 170, 64, 61, 71, 35, 216, 62, 142, 91, 23, 190, 132, 108, 138, 62, 111, 101, 142, 190, 57, 161, 122, 62, 72, 92, 102, 190, 111, 69, 123, 62, 145, 216, 46, 62, 186, 11, 236, 61, 240, 78, 215, 62, 60, 219, 72, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 71, 212, 189, 164, 94, 34, 190, 27, 32, 157, 60, 64, 22, 14, 190, 252, 211, 211, 60, 219, 70, 53, 62, 165, 100, 205, 61, 131, 129, 86, 62, 174, 57, 216, 61, 133, 184, 168, 61, 105, 255, 54, 190, 109, 178, 199, 59, 92, 242, 167, 62, 159, 237, 90, 188, 246, 198, 0, 62, 153, 229, 214, 60, 16, 108, 137, 59, 175, 77, 94, 62, 232, 4, 226, 61, 161, 199, 22, 190, 107, 57, 247, 61, 69, 132, 165, 189, 135, 234, 147, 62, 24, 204, 92, 62, 14, 183, 110, 188, 136, 66, 109, 60, 149, 55, 4, 190, 182, 100, 121, 61, 232, 199, 28, 61, 17, 67, 18, 62, 15, 187, 39, 62, 248, 244, 91, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 70, 132, 191, 114, 45, 180, 190, 200, 228, 112, 190, 222, 25, 84, 189, 253, 249, 100, 62, 104, 167, 169, 190, 220, 240, 95, 191, 152, 154, 48, 62, 242, 66, 200, 62, 8, 152, 10, 62, 16, 232, 56, 61, 77, 253, 130, 190, 186, 143, 171, 62, 118, 44, 153, 190, 230, 157, 205, 190, 101, 197, 15, 63, 153, 203, 106, 190, 53, 214, 23, 63, 151, 17, 216, 60, 194, 45, 76, 63, 15, 168, 90, 190, 157, 181, 169, 189, 183, 200, 6, 62, 73, 79, 11, 191, 132, 111, 188, 187, 38, 55, 42, 63, 106, 224, 133, 190, 162, 191, 207, 62, 142, 43, 0, 191, 224, 132, 187, 190, 180, 194, 38, 191, 197, 175, 70, 191, 214, 228, 221, 61, 41, 97, 194, 61, 27, 147, 143, 190, 242, 108, 18, 189, 185, 62, 146, 190, 64, 204, 128, 190, 104, 144, 226, 61, 202, 36, 53, 190, 147, 229, 206, 61, 132, 92, 13, 62, 214, 129, 1, 190, 64, 31, 76, 62, 153, 151, 94, 190, 148, 130, 246, 62, 89, 173, 131, 62, 21, 82, 47, 62, 222, 97, 112, 190, 212, 95, 162, 189, 10, 242, 112, 60, 210, 159, 89, 62, 70, 96, 131, 190, 119, 46, 18, 62, 20, 213, 0, 190, 195, 127, 79, 189, 11, 129, 245, 189, 62, 191, 96, 62, 20, 185, 103, 189, 92, 211, 193, 62, 208, 81, 107, 189, 211, 22, 98, 190, 137, 206, 153, 62, 186, 236, 146, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 89, 9, 62, 244, 170, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 103, 153, 191, 68, 226, 2, 192, 237, 216, 131, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 163, 230, 63, 40, 160, 59, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}