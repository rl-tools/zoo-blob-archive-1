// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 175, 220, 61, 166, 43, 122, 186, 35, 233, 10, 191, 114, 116, 149, 62, 217, 23, 158, 190, 94, 127, 182, 62, 156, 96, 179, 189, 87, 132, 21, 62, 136, 238, 234, 189, 181, 235, 60, 190, 15, 112, 24, 63, 209, 206, 201, 190, 32, 144, 4, 190, 233, 74, 87, 188, 129, 178, 185, 62, 251, 210, 34, 190, 55, 47, 3, 190, 41, 151, 13, 63, 59, 153, 36, 63, 180, 206, 89, 188, 64, 178, 231, 190, 106, 68, 246, 61, 24, 205, 54, 62, 224, 3, 173, 62, 59, 70, 85, 190, 188, 127, 84, 63, 196, 138, 169, 59, 143, 79, 46, 62, 91, 107, 123, 190, 248, 181, 90, 190, 20, 84, 162, 62, 11, 6, 81, 191, 106, 63, 16, 190, 36, 202, 213, 190, 185, 96, 143, 62, 31, 170, 250, 61, 56, 235, 164, 61, 241, 130, 25, 191, 232, 250, 197, 188, 82, 162, 184, 62, 202, 189, 226, 62, 169, 103, 24, 63, 231, 173, 187, 61, 163, 153, 150, 190, 7, 201, 54, 190, 161, 153, 0, 191, 193, 163, 63, 191, 122, 229, 7, 63, 171, 112, 144, 61, 71, 36, 193, 190, 100, 128, 241, 60, 196, 196, 188, 190, 234, 108, 152, 191, 35, 192, 111, 62, 100, 44, 25, 63, 78, 93, 3, 191, 149, 240, 216, 60, 199, 40, 43, 62, 24, 118, 47, 63, 254, 205, 11, 190, 34, 101, 227, 190, 131, 147, 33, 191, 130, 161, 40, 62, 161, 68, 153, 190, 142, 0, 40, 191, 11, 199, 64, 190, 128, 86, 74, 63, 216, 167, 208, 62, 137, 3, 10, 191, 152, 130, 14, 63, 69, 168, 111, 62, 75, 151, 251, 62, 209, 125, 99, 62, 139, 67, 106, 189, 10, 142, 242, 62, 76, 222, 183, 62, 185, 71, 197, 62, 20, 210, 188, 62, 47, 64, 216, 190, 74, 165, 1, 63, 125, 69, 9, 190, 136, 28, 5, 63, 211, 93, 11, 63, 167, 215, 222, 62, 58, 165, 253, 190, 51, 21, 51, 63, 35, 53, 156, 61, 253, 90, 54, 190, 241, 229, 128, 190, 28, 240, 174, 187, 233, 137, 231, 62, 164, 189, 84, 190, 58, 3, 195, 62, 58, 69, 145, 190, 247, 170, 19, 190, 64, 247, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 48, 36, 191, 65, 167, 128, 190, 63, 151, 230, 62, 158, 147, 177, 62, 72, 81, 101, 190, 156, 35, 22, 191, 102, 210, 154, 62, 219, 242, 238, 62, 73, 195, 253, 62, 84, 43, 185, 61, 31, 181, 243, 62, 236, 34, 254, 62, 84, 149, 151, 62, 244, 216, 195, 190, 137, 14, 24, 191, 71, 204, 171, 190, 125, 188, 11, 191, 30, 23, 8, 190, 45, 43, 45, 63, 128, 171, 199, 62, 35, 37, 150, 60, 128, 194, 117, 62, 10, 75, 249, 62, 79, 87, 23, 190, 59, 65, 123, 62, 71, 131, 137, 62, 213, 170, 244, 190, 41, 181, 134, 188, 86, 131, 8, 63, 132, 202, 69, 60, 70, 205, 251, 60, 140, 27, 245, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 143, 133, 61, 113, 4, 235, 61, 251, 42, 55, 62, 0, 108, 250, 61, 143, 17, 88, 190, 109, 245, 126, 61, 96, 178, 145, 61, 124, 75, 13, 62, 216, 253, 199, 61, 26, 194, 250, 189, 188, 65, 102, 61, 135, 185, 48, 61, 248, 100, 53, 61, 228, 151, 53, 190, 231, 51, 122, 60, 99, 117, 130, 60, 242, 82, 197, 188, 168, 215, 183, 190, 158, 98, 102, 189, 73, 160, 8, 190, 241, 162, 172, 189, 165, 134, 64, 189, 149, 236, 66, 190, 124, 23, 45, 190, 158, 169, 218, 189, 235, 58, 252, 61, 158, 136, 251, 189, 75, 112, 27, 190, 83, 210, 84, 62, 169, 141, 172, 61, 66, 157, 174, 61, 178, 175, 18, 62, 173, 61, 175, 190, 226, 254, 166, 61, 122, 221, 246, 189, 58, 101, 66, 62, 137, 151, 101, 61, 67, 99, 243, 189, 189, 204, 50, 190, 192, 208, 170, 60, 80, 149, 106, 61, 40, 21, 86, 61, 157, 157, 113, 189, 85, 109, 174, 61, 130, 195, 57, 190, 31, 0, 169, 188, 120, 47, 247, 189, 227, 182, 254, 187, 121, 196, 19, 189, 254, 21, 191, 189, 118, 148, 160, 189, 188, 238, 65, 62, 86, 67, 3, 190, 98, 129, 31, 190, 66, 199, 180, 61, 130, 62, 107, 61, 44, 195, 17, 62, 185, 4, 206, 60, 174, 155, 242, 190, 87, 193, 130, 62, 220, 39, 75, 62, 177, 162, 152, 188, 101, 122, 123, 189, 71, 245, 25, 62, 90, 103, 240, 189, 236, 189, 141, 60, 117, 198, 135, 61, 201, 240, 237, 61, 13, 224, 199, 189, 171, 227, 137, 188, 234, 20, 226, 58, 79, 186, 255, 189, 98, 54, 60, 62, 140, 148, 172, 189, 228, 202, 88, 61, 204, 169, 184, 61, 69, 121, 148, 190, 12, 136, 143, 188, 53, 249, 226, 61, 165, 240, 156, 189, 193, 52, 12, 190, 111, 75, 137, 189, 244, 121, 162, 188, 113, 24, 21, 62, 130, 1, 77, 189, 251, 237, 31, 61, 114, 5, 249, 61, 170, 200, 240, 59, 129, 194, 37, 189, 76, 13, 49, 62, 211, 183, 236, 61, 27, 129, 203, 60, 131, 171, 9, 62, 248, 25, 68, 189, 170, 79, 111, 189, 16, 121, 4, 190, 159, 61, 63, 189, 68, 42, 52, 62, 135, 143, 98, 189, 191, 145, 23, 190, 175, 22, 243, 189, 63, 10, 45, 190, 181, 45, 217, 188, 61, 136, 192, 189, 164, 10, 212, 59, 64, 220, 11, 190, 104, 132, 168, 61, 223, 238, 32, 190, 93, 165, 55, 188, 150, 13, 104, 61, 187, 4, 107, 61, 43, 126, 24, 190, 136, 14, 151, 189, 242, 245, 195, 189, 76, 254, 29, 62, 74, 120, 31, 190, 198, 212, 23, 189, 151, 203, 49, 189, 44, 130, 37, 190, 76, 27, 30, 190, 212, 78, 131, 61, 211, 251, 62, 189, 48, 16, 46, 62, 40, 119, 25, 190, 249, 123, 2, 190, 14, 218, 52, 190, 177, 233, 201, 61, 65, 32, 201, 189, 222, 68, 119, 61, 163, 99, 177, 61, 54, 94, 49, 62, 162, 67, 237, 189, 253, 235, 164, 189, 65, 46, 28, 189, 16, 48, 75, 61, 219, 253, 166, 61, 63, 230, 34, 62, 157, 104, 43, 61, 241, 234, 13, 189, 97, 16, 98, 190, 202, 251, 57, 189, 113, 171, 133, 61, 219, 11, 41, 190, 88, 164, 31, 62, 78, 156, 129, 188, 208, 236, 111, 58, 68, 66, 235, 60, 197, 163, 132, 62, 173, 104, 148, 61, 44, 32, 167, 61, 145, 146, 78, 62, 28, 177, 233, 188, 56, 104, 73, 190, 226, 129, 143, 61, 69, 221, 170, 61, 225, 146, 25, 190, 63, 21, 43, 61, 1, 69, 177, 60, 206, 21, 141, 189, 33, 35, 2, 190, 103, 79, 203, 60, 6, 36, 59, 187, 190, 208, 40, 62, 252, 29, 43, 61, 218, 155, 1, 190, 181, 189, 251, 189, 95, 212, 235, 189, 138, 30, 15, 189, 245, 57, 16, 60, 209, 23, 160, 189, 135, 255, 80, 190, 31, 72, 23, 190, 158, 42, 27, 190, 196, 106, 92, 62, 220, 117, 174, 189, 114, 77, 56, 189, 235, 2, 17, 62, 187, 84, 52, 62, 156, 207, 150, 62, 255, 29, 131, 62, 132, 144, 30, 61, 133, 96, 221, 189, 40, 206, 210, 188, 69, 18, 19, 62, 205, 25, 92, 62, 232, 171, 133, 62, 155, 132, 156, 190, 154, 155, 155, 188, 32, 106, 208, 189, 161, 55, 102, 188, 215, 20, 30, 62, 141, 104, 144, 190, 174, 19, 97, 189, 66, 155, 152, 189, 249, 103, 57, 190, 211, 187, 41, 61, 215, 95, 69, 61, 19, 196, 150, 189, 30, 204, 235, 189, 249, 201, 206, 189, 119, 239, 4, 62, 103, 133, 13, 190, 15, 110, 67, 61, 82, 228, 198, 60, 95, 142, 157, 189, 105, 208, 109, 189, 145, 228, 136, 61, 156, 216, 51, 190, 195, 217, 104, 188, 149, 27, 15, 62, 49, 14, 45, 190, 107, 2, 5, 190, 182, 181, 136, 61, 21, 190, 251, 189, 8, 144, 255, 189, 225, 88, 203, 189, 119, 22, 226, 60, 41, 139, 12, 62, 191, 116, 25, 61, 222, 223, 56, 190, 26, 173, 193, 61, 139, 44, 183, 189, 173, 158, 177, 61, 105, 137, 59, 190, 44, 108, 146, 61, 68, 166, 82, 190, 227, 166, 249, 61, 67, 27, 66, 189, 45, 3, 169, 189, 178, 101, 42, 190, 78, 40, 75, 188, 61, 30, 177, 61, 232, 34, 21, 61, 131, 255, 15, 62, 135, 174, 124, 62, 206, 160, 56, 61, 49, 231, 42, 62, 157, 147, 88, 189, 149, 222, 247, 189, 19, 78, 48, 62, 16, 19, 45, 62, 15, 19, 35, 62, 105, 90, 156, 62, 154, 205, 155, 189, 115, 247, 42, 188, 49, 134, 14, 190, 214, 117, 7, 189, 169, 31, 29, 190, 245, 181, 157, 189, 127, 185, 240, 189, 51, 232, 141, 61, 46, 97, 210, 187, 196, 227, 140, 60, 217, 145, 50, 190, 205, 60, 165, 189, 51, 107, 227, 61, 71, 110, 67, 60, 255, 63, 93, 190, 49, 55, 141, 188, 182, 118, 158, 61, 201, 212, 6, 190, 7, 16, 104, 190, 250, 12, 251, 61, 221, 90, 46, 62, 34, 70, 128, 190, 40, 235, 133, 61, 117, 68, 196, 187, 121, 131, 232, 60, 178, 100, 231, 60, 205, 36, 185, 189, 174, 189, 59, 189, 92, 54, 183, 61, 152, 13, 115, 189, 242, 175, 228, 62, 100, 234, 126, 62, 113, 207, 140, 188, 220, 182, 114, 62, 8, 59, 51, 62, 158, 38, 136, 62, 145, 106, 121, 190, 205, 203, 35, 62, 83, 88, 41, 190, 174, 1, 72, 189, 201, 1, 183, 189, 241, 152, 36, 190, 124, 167, 36, 62, 236, 151, 83, 61, 18, 69, 187, 189, 48, 114, 254, 60, 93, 237, 43, 190, 62, 236, 21, 190, 49, 161, 16, 61, 162, 37, 37, 190, 198, 131, 249, 61, 128, 250, 2, 190, 34, 230, 32, 190, 16, 21, 34, 190, 218, 208, 9, 190, 132, 61, 83, 61, 202, 228, 11, 190, 180, 19, 229, 189, 121, 116, 177, 189, 5, 29, 180, 187, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 118, 123, 180, 60, 106, 16, 232, 61, 136, 121, 23, 190, 187, 199, 161, 60, 239, 120, 148, 189, 4, 227, 204, 189, 250, 150, 179, 61, 43, 180, 28, 190, 22, 159, 221, 61, 179, 156, 137, 61, 243, 204, 143, 61, 83, 230, 98, 189, 206, 25, 0, 190, 132, 206, 87, 61, 22, 175, 27, 60, 100, 223, 180, 186, 198, 148, 53, 61, 93, 186, 6, 61, 35, 210, 113, 61, 46, 255, 92, 190, 117, 117, 202, 59, 18, 255, 51, 62, 29, 237, 39, 62, 126, 30, 66, 189, 170, 136, 30, 190, 139, 115, 201, 189, 251, 207, 90, 189, 148, 101, 29, 189, 133, 109, 100, 61, 79, 236, 51, 190, 18, 194, 17, 190, 199, 59, 5, 62, 218, 192, 13, 188, 175, 64, 45, 190, 193, 29, 174, 189, 141, 21, 6, 62, 39, 66, 29, 190, 53, 13, 9, 190, 163, 75, 178, 61, 7, 8, 79, 57, 76, 108, 65, 189, 124, 208, 242, 189, 233, 18, 47, 190, 202, 88, 5, 62, 107, 133, 186, 189, 150, 8, 42, 62, 1, 243, 220, 189, 255, 118, 22, 190, 238, 127, 212, 188, 214, 146, 0, 61, 120, 27, 1, 188, 183, 255, 225, 61, 135, 64, 198, 189, 87, 16, 37, 62, 165, 222, 13, 61, 95, 17, 183, 58, 64, 14, 128, 190, 15, 74, 247, 61, 211, 86, 154, 190, 201, 37, 70, 62, 47, 79, 24, 60, 192, 45, 236, 189, 86, 6, 253, 188, 101, 114, 35, 190, 124, 153, 101, 61, 98, 146, 5, 61, 66, 152, 104, 61, 98, 225, 49, 186, 220, 1, 70, 60, 208, 9, 53, 189, 33, 225, 53, 61, 50, 54, 59, 62, 172, 176, 8, 189, 116, 95, 63, 62, 165, 203, 26, 62, 86, 185, 180, 189, 144, 93, 89, 60, 114, 107, 249, 60, 119, 45, 42, 189, 132, 5, 63, 60, 155, 17, 243, 61, 151, 38, 211, 189, 106, 92, 31, 186, 221, 175, 179, 61, 178, 165, 91, 61, 182, 88, 201, 61, 33, 113, 22, 60, 248, 78, 64, 61, 118, 180, 82, 61, 221, 246, 74, 190, 135, 88, 90, 62, 166, 4, 93, 61, 55, 103, 34, 190, 118, 190, 3, 189, 68, 211, 249, 60, 81, 131, 113, 62, 242, 228, 68, 62, 86, 85, 136, 61, 210, 11, 134, 61, 236, 215, 3, 189, 235, 241, 251, 61, 219, 68, 189, 60, 1, 220, 28, 61, 91, 222, 5, 190, 211, 93, 26, 189, 198, 197, 136, 190, 211, 83, 232, 189, 99, 68, 247, 60, 53, 248, 49, 190, 251, 28, 27, 62, 119, 249, 11, 62, 130, 158, 159, 189, 47, 22, 25, 62, 99, 57, 135, 189, 88, 161, 61, 190, 56, 4, 235, 61, 245, 4, 15, 60, 249, 102, 45, 60, 42, 209, 133, 61, 90, 203, 30, 62, 7, 59, 8, 190, 228, 138, 10, 190, 217, 132, 209, 57, 29, 63, 221, 189, 176, 149, 34, 62, 79, 157, 15, 60, 57, 212, 240, 61, 29, 80, 26, 190, 219, 93, 167, 61, 10, 131, 201, 189, 241, 66, 142, 189, 225, 55, 224, 189, 5, 65, 7, 190, 124, 151, 233, 61, 24, 189, 214, 60, 32, 73, 249, 188, 178, 239, 104, 189, 173, 146, 39, 61, 164, 181, 197, 189, 239, 255, 28, 190, 181, 95, 150, 189, 18, 44, 219, 60, 90, 217, 66, 190, 253, 4, 50, 190, 206, 224, 13, 61, 109, 79, 46, 189, 29, 192, 33, 190, 11, 253, 141, 189, 252, 121, 54, 61, 135, 39, 71, 61, 206, 191, 62, 189, 26, 147, 225, 189, 150, 102, 13, 62, 232, 251, 68, 190, 229, 201, 255, 189, 214, 88, 209, 188, 226, 70, 82, 189, 36, 96, 16, 62, 11, 136, 8, 62, 59, 121, 165, 61, 134, 101, 147, 189, 90, 125, 172, 189, 150, 227, 250, 61, 154, 94, 142, 60, 177, 99, 183, 61, 193, 232, 248, 189, 65, 2, 234, 189, 25, 86, 93, 189, 157, 123, 164, 61, 69, 155, 137, 189, 16, 227, 179, 61, 157, 135, 74, 190, 101, 245, 172, 189, 54, 172, 79, 190, 191, 131, 2, 62, 6, 254, 114, 189, 15, 234, 229, 189, 156, 27, 72, 61, 159, 4, 12, 190, 18, 16, 167, 60, 200, 223, 52, 62, 74, 54, 129, 189, 175, 225, 196, 190, 28, 96, 169, 189, 109, 96, 32, 189, 91, 157, 101, 190, 24, 38, 254, 188, 207, 224, 140, 189, 166, 182, 67, 189, 44, 116, 120, 189, 59, 216, 236, 61, 22, 164, 116, 189, 14, 195, 122, 62, 9, 231, 162, 189, 3, 139, 166, 189, 150, 204, 166, 61, 150, 248, 138, 62, 184, 174, 142, 189, 77, 32, 60, 188, 168, 252, 57, 190, 25, 79, 18, 190, 92, 70, 26, 190, 234, 59, 199, 189, 123, 187, 88, 61, 25, 37, 127, 62, 217, 248, 14, 62, 182, 143, 35, 190, 214, 16, 203, 60, 202, 117, 22, 62, 209, 91, 238, 187, 12, 237, 208, 60, 6, 163, 21, 190, 41, 204, 7, 190, 91, 26, 140, 61, 114, 155, 80, 62, 20, 242, 22, 190, 87, 20, 219, 185, 230, 108, 255, 61, 204, 77, 131, 190, 171, 116, 154, 188, 44, 111, 202, 61, 166, 75, 187, 189, 231, 77, 196, 189, 48, 113, 146, 190, 21, 42, 23, 62, 229, 131, 146, 62, 145, 110, 247, 61, 76, 242, 240, 189, 207, 165, 32, 188, 157, 183, 90, 61, 184, 221, 118, 61, 133, 24, 87, 62, 161, 192, 11, 189, 96, 127, 113, 61, 120, 171, 57, 62, 215, 207, 146, 189, 121, 240, 13, 188, 199, 46, 176, 189, 88, 209, 32, 190, 85, 107, 106, 189, 216, 5, 59, 189, 150, 161, 120, 190, 79, 128, 21, 189, 122, 116, 123, 190, 62, 234, 113, 189, 184, 138, 129, 60, 155, 223, 177, 190, 174, 2, 153, 60, 102, 112, 165, 62, 128, 164, 93, 189, 160, 17, 101, 62, 231, 65, 151, 190, 126, 14, 164, 190, 211, 205, 214, 61, 255, 84, 12, 62, 226, 177, 74, 62, 121, 20, 211, 62, 146, 214, 162, 190, 54, 194, 167, 62, 50, 125, 180, 61, 70, 189, 39, 190, 180, 38, 80, 189, 211, 167, 46, 62, 99, 80, 33, 62, 70, 147, 43, 189, 218, 105, 201, 60, 224, 103, 70, 61, 159, 157, 68, 62, 110, 214, 6, 187, 4, 235, 44, 61, 2, 41, 38, 190, 85, 134, 191, 61, 14, 124, 222, 189, 99, 155, 99, 189, 53, 147, 48, 190, 46, 29, 8, 58, 83, 217, 231, 189, 136, 41, 235, 188, 139, 30, 11, 62, 180, 12, 17, 61, 61, 16, 214, 189, 149, 207, 15, 61, 34, 54, 207, 189, 226, 120, 161, 59, 200, 141, 34, 62, 238, 119, 165, 61, 39, 102, 48, 190, 213, 186, 114, 189, 0, 84, 210, 189, 191, 106, 32, 190, 225, 239, 22, 190, 193, 2, 46, 62, 41, 18, 14, 61, 105, 232, 144, 189, 216, 73, 159, 61, 68, 226, 31, 190, 56, 23, 20, 62, 229, 110, 142, 189, 27, 166, 81, 189, 80, 156, 235, 61, 20, 181, 204, 61, 14, 82, 25, 190, 89, 63, 146, 188, 83, 6, 186, 61, 13, 136, 255, 61, 36, 142, 44, 189, 142, 192, 61, 189, 166, 40, 160, 61, 15, 188, 34, 190, 244, 63, 13, 190, 233, 191, 142, 61, 68, 60, 66, 61, 75, 202, 143, 189, 101, 126, 205, 187, 97, 7, 248, 189, 148, 239, 187, 61, 21, 179, 51, 190, 216, 40, 208, 189, 128, 203, 22, 62, 170, 165, 139, 189, 34, 71, 128, 190, 30, 151, 120, 190, 177, 158, 1, 190, 151, 32, 219, 189, 97, 18, 161, 189, 45, 242, 254, 61, 177, 176, 18, 61, 196, 101, 251, 188, 2, 171, 3, 190, 177, 246, 104, 61, 84, 8, 109, 61, 51, 90, 3, 190, 140, 154, 180, 59, 61, 121, 234, 188, 135, 13, 146, 61, 109, 222, 255, 189, 10, 108, 147, 188, 248, 168, 156, 61, 115, 152, 77, 188, 206, 74, 43, 190, 64, 153, 203, 61, 114, 212, 221, 187, 210, 22, 2, 61, 64, 158, 2, 190, 51, 246, 228, 189, 71, 188, 21, 62, 20, 81, 44, 186, 72, 235, 49, 190, 210, 228, 29, 62, 46, 3, 97, 189, 255, 19, 178, 189, 143, 212, 222, 190, 240, 250, 9, 189, 158, 107, 73, 62, 238, 63, 132, 61, 207, 207, 125, 189, 17, 36, 78, 61, 245, 102, 36, 62, 58, 51, 91, 189, 198, 105, 103, 188, 13, 76, 13, 188, 60, 185, 109, 61, 164, 235, 37, 62, 62, 91, 37, 189, 217, 241, 170, 189, 200, 228, 214, 189, 47, 225, 7, 62, 200, 30, 49, 188, 211, 68, 8, 61, 126, 163, 49, 190, 184, 84, 32, 62, 255, 147, 225, 60, 255, 42, 58, 59, 138, 17, 100, 60, 178, 163, 195, 189, 28, 156, 25, 189, 215, 0, 170, 61, 167, 5, 144, 60, 254, 27, 184, 189, 95, 165, 43, 190, 32, 241, 1, 190, 200, 130, 232, 189, 233, 202, 140, 60, 171, 244, 1, 59, 119, 15, 192, 61, 75, 137, 52, 60, 237, 246, 131, 189, 143, 25, 31, 189, 187, 97, 46, 190, 47, 71, 3, 190, 46, 184, 253, 189, 175, 77, 171, 189, 94, 171, 165, 189, 86, 64, 36, 190, 143, 34, 215, 188, 28, 107, 19, 190, 56, 139, 3, 62, 181, 231, 225, 189, 94, 3, 92, 189, 190, 245, 202, 61, 78, 169, 45, 62, 1, 140, 47, 61, 180, 3, 62, 62, 103, 224, 97, 189, 229, 28, 76, 60, 162, 68, 214, 60, 63, 39, 137, 189, 33, 251, 99, 62, 68, 251, 79, 62, 84, 121, 125, 190, 116, 13, 157, 60, 30, 63, 72, 190, 240, 6, 101, 190, 212, 132, 149, 189, 160, 22, 174, 189, 152, 155, 133, 62, 117, 37, 99, 61, 233, 16, 152, 60, 38, 190, 85, 60, 118, 234, 202, 61, 228, 153, 124, 60, 13, 127, 50, 190, 36, 177, 34, 61, 91, 44, 156, 188, 244, 108, 79, 189, 83, 214, 134, 61, 191, 157, 134, 188, 37, 85, 161, 189, 87, 65, 147, 61, 8, 81, 65, 189, 253, 233, 41, 190, 200, 105, 21, 190, 95, 221, 14, 189, 212, 197, 164, 62, 28, 116, 79, 59, 61, 169, 58, 60, 89, 246, 82, 190, 193, 164, 146, 188, 67, 97, 79, 61, 70, 123, 147, 61, 5, 150, 54, 190, 138, 98, 242, 61, 179, 137, 54, 190, 80, 94, 7, 190, 210, 99, 88, 62, 128, 210, 7, 190, 13, 86, 49, 62, 76, 146, 18, 191, 195, 155, 184, 189, 34, 95, 43, 62, 81, 175, 131, 189, 71, 49, 1, 61, 227, 251, 109, 189, 23, 37, 197, 188, 28, 89, 99, 189, 251, 56, 222, 189, 203, 184, 2, 62, 212, 221, 251, 189, 39, 32, 105, 62, 199, 49, 85, 189, 151, 186, 93, 62, 53, 0, 46, 62, 144, 255, 34, 62, 228, 170, 5, 190, 168, 17, 224, 189, 181, 226, 26, 189, 92, 241, 34, 62, 203, 23, 239, 61, 226, 54, 214, 189, 234, 82, 37, 189, 55, 95, 198, 61, 94, 193, 12, 62, 151, 68, 33, 190, 155, 146, 35, 190, 184, 73, 176, 61, 32, 38, 56, 61, 222, 155, 129, 61, 156, 212, 225, 187, 131, 64, 10, 62, 89, 78, 21, 61, 188, 171, 151, 189, 173, 160, 123, 60, 65, 133, 179, 61, 248, 118, 245, 61, 127, 141, 25, 189, 221, 15, 152, 188, 145, 33, 17, 190, 166, 84, 36, 190, 121, 221, 154, 61, 126, 185, 176, 189, 214, 254, 158, 188, 23, 181, 123, 60, 18, 96, 103, 189, 139, 50, 238, 189, 204, 35, 248, 189, 32, 249, 77, 60, 70, 37, 43, 190, 125, 15, 28, 62, 51, 228, 240, 61, 252, 95, 8, 190, 10, 122, 24, 189, 236, 190, 234, 59, 92, 227, 36, 62, 200, 7, 134, 190, 121, 234, 47, 61, 233, 153, 236, 188, 103, 179, 52, 189, 189, 182, 183, 189, 133, 242, 94, 189, 103, 28, 91, 190, 246, 248, 126, 61, 94, 237, 46, 187, 164, 86, 122, 190, 118, 132, 38, 62, 237, 249, 144, 189, 58, 67, 102, 190, 147, 159, 201, 189, 139, 112, 31, 189, 61, 155, 175, 60, 71, 120, 133, 189, 33, 157, 148, 187, 13, 188, 139, 188, 120, 155, 248, 61, 120, 63, 96, 190, 118, 70, 55, 188, 159, 64, 200, 61, 166, 214, 168, 61, 154, 162, 168, 189, 176, 88, 150, 60, 240, 138, 41, 62, 94, 27, 31, 190, 89, 92, 53, 190, 157, 161, 192, 61, 255, 40, 96, 62, 212, 96, 113, 62, 116, 134, 173, 61, 168, 154, 167, 61, 49, 124, 137, 62, 89, 240, 79, 189, 98, 21, 254, 61, 57, 232, 207, 61, 232, 251, 201, 190, 29, 68, 204, 61, 41, 102, 167, 190, 86, 78, 120, 190, 163, 67, 214, 61, 15, 90, 26, 188, 12, 132, 37, 189, 180, 212, 105, 61, 164, 192, 207, 188, 189, 170, 127, 189, 161, 190, 166, 188, 183, 69, 122, 61, 67, 121, 130, 189, 81, 229, 52, 62, 204, 222, 23, 190, 244, 41, 131, 60, 77, 36, 94, 189, 15, 54, 120, 60, 5, 40, 226, 189, 50, 192, 173, 189, 128, 191, 253, 188, 134, 188, 138, 61, 57, 76, 24, 61, 216, 254, 124, 61, 50, 216, 161, 189, 53, 75, 99, 189, 161, 167, 94, 189, 43, 198, 118, 62, 246, 192, 78, 61, 160, 80, 50, 62, 33, 253, 61, 59, 90, 173, 23, 189, 47, 19, 2, 62, 123, 197, 91, 189, 20, 37, 61, 62, 4, 240, 193, 189, 52, 204, 168, 60, 31, 155, 80, 61, 198, 50, 187, 188, 247, 193, 144, 61, 70, 99, 42, 188, 77, 207, 93, 61, 200, 149, 220, 187, 165, 250, 236, 189, 53, 26, 25, 189, 11, 125, 143, 187, 163, 162, 36, 189, 178, 28, 53, 190, 70, 21, 176, 189, 122, 113, 235, 189, 188, 200, 99, 61, 199, 112, 97, 60, 152, 89, 252, 61, 22, 223, 4, 190, 53, 174, 228, 189, 37, 35, 19, 190, 231, 239, 29, 62, 33, 144, 182, 60, 150, 73, 6, 190, 219, 44, 142, 190, 30, 10, 135, 189, 235, 10, 42, 190, 174, 178, 69, 62, 210, 28, 27, 189, 124, 72, 93, 190, 241, 162, 226, 189, 0, 38, 92, 61, 140, 142, 11, 62, 33, 151, 199, 61, 203, 52, 211, 61, 83, 75, 160, 189, 5, 220, 192, 61, 144, 2, 70, 61, 194, 34, 147, 61, 185, 200, 96, 61, 106, 178, 167, 190, 120, 142, 9, 62, 58, 28, 199, 61, 253, 60, 75, 61, 68, 71, 109, 62, 163, 72, 171, 189, 160, 156, 12, 62, 179, 148, 193, 61, 57, 125, 137, 189, 237, 206, 100, 189, 117, 121, 98, 190, 19, 173, 52, 190, 238, 211, 27, 190, 45, 251, 251, 189, 94, 252, 180, 189, 138, 148, 205, 61, 45, 193, 89, 61, 43, 140, 224, 60, 117, 48, 232, 188, 74, 93, 178, 189, 23, 9, 137, 190, 148, 135, 128, 190, 89, 233, 4, 190, 247, 83, 152, 61, 131, 10, 58, 190, 141, 74, 147, 189, 72, 94, 192, 60, 98, 30, 194, 189, 164, 150, 9, 62, 41, 123, 75, 190, 237, 214, 141, 61, 88, 138, 126, 61, 69, 90, 67, 61, 137, 22, 136, 58, 13, 114, 179, 188, 114, 217, 178, 189, 74, 158, 44, 189, 207, 109, 26, 62, 129, 162, 128, 190, 243, 12, 52, 61, 185, 64, 9, 189, 61, 169, 2, 62, 107, 135, 212, 189, 123, 162, 28, 190, 16, 71, 209, 189, 106, 121, 45, 62, 22, 141, 139, 62, 81, 236, 12, 190, 108, 184, 35, 190, 21, 204, 14, 61, 23, 82, 186, 60, 191, 114, 127, 187, 97, 194, 184, 189, 40, 234, 153, 190, 174, 147, 39, 62, 20, 159, 9, 191, 24, 79, 12, 190, 87, 126, 180, 62, 145, 76, 18, 190, 157, 47, 35, 61, 53, 196, 45, 190, 212, 210, 56, 62, 101, 181, 60, 189, 244, 38, 17, 61, 32, 133, 210, 189, 92, 172, 135, 60, 190, 222, 110, 62, 36, 134, 230, 61, 74, 21, 197, 189, 14, 81, 241, 61, 74, 213, 34, 190, 183, 77, 18, 190, 235, 119, 48, 62, 211, 31, 68, 62, 216, 157, 179, 190, 39, 126, 5, 190, 120, 14, 41, 61, 12, 104, 169, 189, 62, 117, 117, 62, 60, 189, 185, 61, 207, 220, 151, 189, 64, 82, 108, 62, 18, 216, 112, 189, 147, 21, 131, 61, 99, 207, 130, 189, 2, 79, 209, 190, 239, 169, 165, 189, 83, 75, 63, 191, 87, 62, 151, 190, 238, 185, 162, 61, 134, 210, 7, 60, 46, 187, 90, 62, 189, 126, 69, 190, 30, 69, 46, 60, 102, 94, 141, 189, 243, 101, 109, 61, 95, 50, 127, 61, 125, 186, 9, 189, 112, 52, 136, 62, 124, 200, 10, 62, 101, 194, 52, 62, 242, 209, 104, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 220, 49, 190, 197, 204, 171, 188, 170, 107, 91, 60, 64, 22, 14, 190, 175, 181, 4, 190, 127, 74, 242, 61, 20, 35, 130, 189, 79, 74, 247, 61, 176, 22, 193, 61, 238, 118, 233, 61, 139, 114, 18, 190, 77, 42, 228, 61, 162, 175, 102, 62, 139, 116, 149, 61, 183, 120, 21, 188, 129, 93, 69, 188, 18, 207, 74, 60, 157, 102, 63, 62, 239, 140, 16, 62, 87, 7, 77, 189, 233, 216, 239, 61, 250, 97, 150, 189, 21, 162, 80, 62, 185, 37, 98, 62, 205, 44, 27, 188, 209, 34, 61, 190, 21, 192, 191, 189, 101, 26, 28, 61, 173, 201, 18, 62, 129, 182, 230, 61, 197, 91, 1, 62, 171, 69, 86, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 116, 78, 190, 12, 179, 68, 190, 99, 73, 24, 190, 222, 25, 84, 189, 243, 218, 28, 62, 34, 43, 151, 190, 55, 25, 180, 189, 216, 172, 54, 62, 106, 240, 35, 62, 69, 105, 47, 62, 153, 118, 62, 61, 248, 210, 240, 189, 125, 193, 129, 62, 32, 193, 117, 189, 252, 196, 28, 189, 39, 91, 73, 62, 166, 242, 70, 190, 99, 75, 243, 62, 146, 13, 198, 188, 241, 140, 170, 61, 113, 107, 3, 190, 58, 109, 235, 189, 184, 104, 41, 62, 167, 216, 159, 190, 221, 175, 177, 187, 136, 254, 65, 62, 154, 64, 170, 189, 142, 80, 255, 61, 156, 35, 78, 190, 0, 234, 48, 59, 83, 123, 153, 190, 243, 198, 221, 190, 30, 222, 41, 61, 6, 55, 60, 188, 177, 246, 135, 190, 242, 108, 18, 189, 97, 246, 26, 190, 120, 104, 64, 190, 51, 107, 53, 59, 107, 186, 4, 190, 222, 66, 29, 61, 181, 218, 42, 62, 149, 101, 6, 190, 232, 129, 247, 61, 62, 222, 54, 190, 182, 68, 4, 62, 188, 150, 254, 61, 82, 140, 28, 62, 206, 123, 33, 190, 132, 36, 169, 189, 107, 170, 21, 61, 162, 212, 5, 62, 48, 162, 102, 190, 147, 203, 37, 62, 15, 83, 238, 189, 169, 236, 151, 189, 89, 242, 245, 189, 28, 56, 100, 61, 6, 41, 122, 189, 225, 47, 196, 61, 197, 189, 2, 190, 171, 138, 4, 190, 129, 117, 44, 62, 227, 161, 66, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 254, 154, 61, 124, 170, 96, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {74, 137, 87, 191, 121, 138, 96, 191, 213, 186, 238, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {53, 254, 196, 63, 39, 188, 23, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}