// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 176, 12, 63, 235, 79, 19, 191, 186, 16, 223, 190, 127, 133, 174, 61, 229, 10, 88, 191, 114, 222, 210, 62, 118, 160, 143, 190, 58, 26, 73, 190, 178, 38, 163, 189, 58, 184, 166, 189, 77, 160, 201, 62, 191, 89, 10, 191, 54, 239, 23, 190, 12, 184, 160, 63, 249, 5, 246, 62, 243, 129, 121, 61, 231, 70, 17, 190, 242, 124, 9, 63, 223, 168, 42, 63, 197, 130, 154, 191, 240, 187, 130, 190, 128, 143, 43, 61, 145, 12, 81, 63, 61, 124, 168, 62, 57, 17, 72, 190, 165, 250, 144, 63, 60, 236, 129, 62, 190, 127, 196, 62, 146, 102, 156, 191, 0, 101, 145, 190, 70, 67, 205, 62, 164, 243, 139, 191, 52, 0, 117, 190, 22, 63, 159, 190, 135, 109, 71, 63, 0, 95, 61, 62, 205, 203, 185, 61, 222, 150, 56, 191, 171, 225, 241, 61, 49, 80, 82, 63, 219, 148, 23, 63, 216, 248, 4, 63, 58, 196, 37, 63, 210, 212, 29, 191, 11, 177, 145, 190, 232, 226, 96, 191, 198, 64, 19, 62, 103, 161, 98, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 30, 227, 29, 191, 202, 30, 89, 191, 13, 199, 54, 63, 225, 222, 5, 63, 241, 116, 113, 191, 30, 60, 39, 62, 203, 30, 173, 62, 9, 165, 94, 63, 118, 141, 216, 190, 73, 129, 76, 191, 117, 24, 174, 62, 214, 26, 199, 62, 51, 132, 48, 191, 242, 147, 158, 191, 32, 162, 39, 190, 251, 1, 31, 63, 163, 79, 241, 61, 224, 188, 20, 191, 60, 169, 105, 63, 2, 110, 11, 63, 140, 102, 205, 62, 59, 10, 158, 61, 52, 111, 52, 63, 88, 123, 228, 62, 219, 196, 48, 63, 255, 115, 131, 63, 135, 143, 58, 62, 127, 201, 26, 191, 86, 121, 74, 63, 11, 198, 204, 189, 27, 175, 130, 63, 142, 99, 147, 63, 34, 250, 163, 62, 224, 112, 17, 191, 3, 47, 36, 63, 189, 120, 241, 60, 36, 70, 215, 190, 51, 154, 180, 190, 91, 195, 112, 62, 173, 156, 22, 63, 72, 73, 111, 190, 92, 136, 188, 62, 225, 166, 30, 191, 251, 32, 39, 191, 147, 2, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 25, 124, 191, 2, 128, 108, 190, 39, 240, 217, 62, 215, 25, 134, 62, 36, 148, 19, 190, 245, 194, 210, 190, 35, 168, 174, 62, 166, 25, 125, 62, 89, 109, 210, 62, 153, 4, 2, 188, 196, 6, 229, 62, 241, 92, 180, 62, 92, 138, 9, 62, 233, 74, 33, 191, 229, 112, 63, 191, 3, 158, 189, 190, 242, 123, 12, 191, 242, 178, 253, 61, 123, 98, 19, 63, 152, 48, 83, 62, 12, 30, 199, 187, 189, 149, 149, 62, 200, 133, 187, 62, 11, 61, 230, 190, 182, 22, 60, 62, 173, 192, 164, 61, 96, 1, 199, 190, 161, 156, 222, 190, 206, 241, 240, 62, 169, 231, 68, 190, 193, 94, 60, 190, 208, 71, 177, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 176, 255, 61, 131, 239, 137, 62, 249, 219, 124, 62, 111, 234, 134, 62, 163, 111, 170, 191, 2, 141, 195, 188, 68, 163, 224, 189, 173, 121, 177, 190, 73, 106, 189, 60, 169, 89, 6, 191, 199, 22, 31, 62, 207, 113, 61, 60, 99, 151, 94, 62, 46, 59, 123, 61, 119, 57, 142, 191, 130, 180, 38, 62, 242, 82, 197, 188, 88, 64, 22, 190, 226, 39, 28, 189, 4, 6, 6, 61, 141, 98, 169, 62, 186, 108, 180, 62, 80, 92, 33, 190, 178, 148, 23, 61, 77, 120, 81, 191, 119, 207, 12, 63, 40, 150, 18, 191, 250, 106, 111, 61, 215, 87, 37, 62, 242, 60, 11, 63, 18, 64, 32, 61, 178, 201, 148, 62, 63, 100, 4, 191, 20, 43, 157, 62, 106, 165, 162, 190, 101, 1, 135, 62, 132, 161, 112, 189, 147, 217, 223, 60, 86, 66, 129, 190, 119, 190, 171, 189, 61, 56, 97, 190, 7, 232, 188, 190, 23, 253, 231, 189, 240, 246, 82, 190, 255, 59, 109, 189, 111, 178, 108, 62, 22, 69, 169, 191, 252, 48, 66, 189, 121, 196, 19, 189, 55, 52, 32, 190, 36, 15, 220, 188, 167, 17, 90, 62, 88, 63, 75, 190, 58, 245, 26, 190, 190, 89, 175, 61, 44, 15, 163, 62, 241, 246, 237, 61, 139, 66, 24, 62, 173, 3, 6, 191, 237, 240, 255, 62, 28, 51, 144, 190, 104, 252, 23, 61, 219, 213, 18, 62, 177, 234, 32, 62, 103, 246, 187, 188, 15, 85, 200, 61, 184, 104, 74, 61, 113, 102, 164, 61, 206, 66, 3, 191, 4, 158, 39, 188, 17, 129, 168, 60, 209, 127, 78, 190, 14, 200, 28, 62, 86, 62, 150, 190, 166, 159, 120, 62, 40, 72, 148, 61, 119, 197, 98, 189, 154, 100, 14, 62, 67, 186, 204, 188, 147, 241, 215, 189, 193, 52, 12, 190, 51, 99, 253, 189, 57, 21, 194, 61, 150, 219, 79, 61, 13, 10, 214, 61, 145, 35, 201, 62, 230, 253, 21, 62, 28, 88, 76, 62, 227, 226, 176, 189, 50, 153, 156, 62, 194, 247, 42, 190, 190, 151, 107, 62, 253, 31, 11, 189, 14, 243, 106, 62, 234, 253, 153, 61, 190, 90, 146, 189, 159, 61, 63, 189, 84, 221, 52, 62, 0, 197, 87, 189, 191, 145, 23, 190, 175, 22, 243, 189, 237, 92, 49, 190, 213, 224, 170, 188, 83, 222, 202, 189, 231, 75, 197, 59, 135, 137, 5, 190, 155, 111, 180, 61, 223, 238, 32, 190, 16, 79, 16, 188, 173, 81, 72, 61, 206, 90, 107, 61, 191, 148, 24, 190, 136, 14, 151, 189, 99, 245, 192, 189, 47, 255, 31, 62, 74, 120, 31, 190, 198, 212, 23, 189, 199, 216, 13, 189, 147, 42, 35, 190, 175, 208, 38, 190, 228, 129, 106, 61, 254, 75, 89, 189, 48, 16, 46, 62, 211, 38, 30, 190, 249, 123, 2, 190, 227, 172, 51, 190, 224, 101, 194, 61, 126, 183, 196, 189, 231, 108, 67, 189, 249, 114, 65, 62, 157, 185, 153, 62, 51, 246, 112, 189, 13, 57, 85, 190, 65, 0, 6, 60, 57, 15, 253, 61, 237, 235, 74, 61, 14, 180, 27, 62, 41, 29, 125, 62, 46, 216, 64, 62, 45, 241, 77, 190, 234, 19, 23, 62, 141, 193, 67, 190, 156, 177, 82, 190, 77, 252, 14, 62, 78, 156, 129, 188, 255, 9, 100, 189, 189, 129, 120, 62, 20, 243, 205, 62, 246, 210, 52, 190, 148, 239, 131, 188, 150, 157, 131, 62, 16, 208, 142, 189, 34, 52, 156, 190, 198, 105, 22, 62, 36, 228, 102, 62, 20, 122, 170, 190, 93, 147, 21, 62, 202, 10, 142, 61, 135, 5, 179, 61, 50, 104, 33, 190, 82, 16, 207, 61, 229, 16, 34, 60, 71, 67, 101, 62, 5, 199, 233, 188, 24, 100, 103, 190, 46, 207, 48, 190, 38, 6, 150, 190, 116, 199, 57, 189, 253, 209, 51, 189, 90, 41, 41, 191, 114, 176, 51, 61, 151, 110, 51, 190, 171, 105, 189, 61, 212, 55, 83, 62, 11, 96, 116, 191, 119, 81, 150, 188, 152, 26, 17, 62, 169, 53, 174, 62, 93, 155, 211, 62, 240, 229, 195, 62, 194, 177, 201, 61, 57, 122, 207, 60, 146, 89, 160, 189, 102, 176, 29, 62, 191, 89, 96, 62, 19, 222, 123, 62, 82, 255, 74, 190, 19, 233, 120, 61, 245, 184, 134, 190, 164, 232, 49, 62, 177, 62, 225, 61, 247, 107, 122, 190, 231, 81, 61, 190, 53, 172, 123, 190, 16, 169, 29, 190, 19, 178, 91, 189, 87, 141, 172, 61, 113, 20, 3, 191, 150, 0, 95, 190, 95, 215, 146, 61, 148, 69, 219, 62, 213, 205, 136, 190, 21, 31, 45, 62, 117, 113, 45, 62, 212, 32, 199, 61, 7, 123, 96, 190, 190, 227, 12, 191, 107, 126, 20, 191, 195, 217, 104, 188, 198, 251, 219, 190, 186, 4, 39, 190, 196, 5, 19, 63, 114, 119, 11, 190, 238, 251, 209, 190, 125, 106, 124, 190, 224, 107, 117, 190, 156, 86, 133, 61, 119, 195, 105, 62, 200, 18, 180, 62, 5, 220, 214, 189, 193, 39, 105, 62, 111, 100, 48, 191, 210, 202, 101, 190, 72, 72, 45, 191, 132, 240, 36, 189, 12, 82, 127, 190, 173, 72, 59, 62, 237, 150, 137, 189, 65, 141, 7, 61, 75, 213, 211, 189, 88, 247, 119, 61, 87, 109, 48, 62, 239, 39, 0, 62, 220, 109, 186, 62, 28, 69, 73, 62, 115, 28, 11, 62, 67, 150, 228, 61, 186, 17, 17, 189, 135, 227, 18, 190, 9, 7, 126, 62, 141, 195, 44, 62, 97, 193, 68, 62, 169, 241, 159, 62, 81, 123, 21, 190, 43, 208, 85, 60, 64, 95, 89, 190, 163, 88, 17, 60, 91, 145, 27, 190, 6, 250, 163, 188, 42, 48, 140, 189, 108, 48, 101, 61, 12, 86, 23, 190, 144, 246, 82, 62, 40, 122, 46, 190, 178, 147, 15, 189, 8, 109, 223, 61, 214, 53, 65, 189, 44, 93, 213, 190, 189, 196, 128, 189, 89, 71, 133, 189, 173, 96, 104, 61, 248, 21, 170, 190, 102, 123, 73, 62, 68, 53, 162, 62, 182, 104, 210, 189, 70, 139, 93, 62, 196, 242, 175, 189, 147, 245, 90, 62, 232, 232, 60, 190, 19, 167, 189, 190, 157, 32, 231, 188, 118, 93, 21, 62, 181, 148, 115, 189, 194, 45, 215, 62, 53, 98, 232, 61, 151, 198, 41, 190, 207, 185, 174, 62, 185, 14, 32, 189, 156, 126, 141, 62, 206, 67, 21, 191, 46, 88, 117, 62, 103, 201, 92, 190, 58, 222, 24, 190, 234, 69, 23, 191, 203, 162, 115, 61, 90, 203, 60, 62, 71, 142, 47, 190, 166, 211, 143, 190, 135, 119, 187, 188, 93, 237, 43, 190, 125, 45, 80, 190, 208, 16, 139, 188, 87, 63, 44, 190, 198, 131, 249, 61, 147, 47, 63, 190, 145, 222, 69, 190, 232, 108, 70, 190, 219, 56, 53, 190, 133, 98, 73, 188, 178, 212, 57, 190, 168, 237, 219, 189, 121, 116, 177, 189, 202, 148, 201, 188, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 137, 197, 250, 59, 174, 48, 124, 61, 82, 10, 14, 190, 118, 30, 114, 188, 48, 76, 2, 190, 4, 227, 204, 189, 83, 154, 170, 61, 79, 214, 27, 190, 113, 64, 133, 61, 241, 236, 137, 61, 153, 213, 201, 60, 52, 209, 70, 189, 206, 25, 0, 190, 204, 5, 104, 185, 215, 68, 177, 189, 129, 182, 66, 188, 192, 241, 178, 61, 35, 62, 155, 189, 84, 76, 204, 187, 199, 188, 180, 190, 204, 89, 104, 187, 211, 67, 154, 61, 119, 62, 202, 61, 76, 199, 124, 189, 52, 119, 17, 190, 178, 166, 14, 190, 178, 16, 166, 188, 189, 58, 120, 189, 129, 83, 110, 189, 54, 167, 173, 190, 18, 194, 17, 190, 225, 132, 76, 62, 80, 109, 167, 60, 169, 31, 142, 190, 180, 195, 8, 190, 110, 109, 47, 62, 12, 32, 174, 190, 155, 175, 26, 190, 48, 56, 151, 189, 59, 193, 128, 187, 160, 208, 146, 189, 124, 208, 242, 189, 179, 68, 254, 189, 227, 75, 61, 62, 53, 38, 21, 190, 57, 240, 74, 62, 245, 69, 206, 189, 132, 252, 236, 61, 126, 198, 112, 190, 87, 32, 49, 62, 215, 242, 206, 189, 145, 251, 126, 62, 242, 40, 129, 190, 225, 131, 183, 61, 67, 69, 186, 189, 213, 230, 2, 191, 68, 123, 205, 190, 162, 55, 208, 189, 62, 220, 59, 190, 132, 245, 248, 62, 10, 249, 77, 191, 31, 154, 58, 190, 86, 6, 253, 188, 171, 23, 84, 190, 34, 8, 168, 61, 45, 163, 57, 62, 20, 45, 233, 187, 254, 216, 154, 189, 83, 230, 100, 189, 37, 48, 122, 62, 98, 230, 38, 61, 132, 70, 158, 62, 7, 6, 25, 61, 91, 176, 247, 62, 68, 157, 131, 190, 141, 173, 71, 189, 63, 59, 103, 62, 240, 50, 155, 60, 0, 52, 49, 190, 26, 37, 240, 188, 234, 142, 78, 62, 179, 122, 42, 190, 95, 240, 173, 189, 23, 9, 83, 61, 180, 84, 67, 62, 208, 36, 29, 60, 58, 12, 226, 189, 28, 233, 159, 62, 93, 143, 233, 61, 230, 28, 164, 190, 80, 191, 128, 62, 116, 244, 14, 190, 34, 127, 74, 190, 203, 45, 176, 188, 158, 193, 246, 60, 27, 140, 121, 62, 159, 179, 119, 62, 58, 218, 17, 189, 70, 156, 115, 61, 231, 25, 138, 189, 128, 110, 25, 62, 235, 137, 18, 190, 61, 12, 16, 189, 255, 234, 128, 190, 183, 246, 21, 190, 66, 4, 45, 191, 213, 206, 140, 189, 117, 37, 163, 61, 172, 12, 53, 190, 66, 219, 19, 62, 135, 52, 153, 62, 184, 211, 51, 62, 138, 156, 33, 62, 62, 159, 233, 187, 69, 68, 160, 187, 255, 243, 161, 62, 139, 228, 78, 62, 91, 170, 34, 191, 10, 166, 86, 190, 175, 172, 241, 62, 135, 190, 200, 187, 184, 29, 160, 190, 160, 13, 14, 62, 199, 83, 33, 190, 23, 56, 199, 62, 200, 233, 244, 61, 57, 212, 240, 61, 209, 146, 84, 186, 94, 68, 16, 62, 239, 225, 26, 190, 151, 220, 1, 190, 70, 4, 106, 61, 203, 23, 126, 58, 55, 43, 152, 190, 7, 126, 101, 190, 203, 231, 125, 191, 80, 229, 239, 61, 164, 30, 147, 191, 27, 116, 224, 188, 8, 35, 17, 191, 8, 217, 1, 61, 226, 212, 0, 62, 1, 181, 192, 190, 252, 215, 31, 189, 93, 253, 22, 62, 135, 47, 55, 188, 65, 220, 194, 189, 232, 172, 43, 189, 204, 250, 19, 190, 73, 221, 78, 61, 176, 182, 160, 190, 41, 130, 134, 190, 19, 186, 249, 62, 191, 194, 234, 189, 40, 181, 41, 62, 10, 155, 20, 189, 49, 218, 156, 61, 119, 14, 179, 62, 214, 8, 9, 62, 101, 104, 198, 62, 124, 28, 9, 62, 111, 183, 27, 191, 175, 217, 184, 62, 29, 65, 218, 61, 233, 142, 50, 188, 1, 232, 11, 190, 162, 107, 20, 189, 219, 124, 48, 190, 30, 164, 206, 60, 100, 136, 97, 189, 147, 34, 34, 188, 27, 201, 12, 60, 145, 6, 65, 189, 173, 208, 6, 189, 185, 162, 110, 61, 194, 39, 148, 62, 255, 151, 89, 60, 39, 225, 73, 61, 127, 122, 157, 190, 231, 241, 177, 61, 199, 220, 167, 62, 47, 225, 144, 190, 204, 201, 107, 191, 154, 52, 118, 62, 61, 7, 172, 62, 129, 168, 106, 191, 148, 200, 110, 62, 107, 6, 199, 189, 129, 6, 29, 188, 120, 184, 20, 190, 28, 155, 236, 61, 130, 93, 242, 188, 24, 254, 206, 62, 181, 112, 68, 190, 161, 155, 107, 189, 127, 242, 238, 62, 39, 80, 139, 62, 132, 11, 178, 189, 224, 231, 110, 189, 140, 236, 156, 190, 10, 115, 201, 190, 208, 185, 227, 190, 210, 167, 153, 190, 162, 221, 140, 62, 149, 24, 221, 62, 95, 30, 128, 62, 145, 238, 41, 57, 135, 163, 88, 62, 154, 249, 253, 61, 146, 134, 212, 60, 174, 85, 155, 190, 161, 198, 2, 190, 38, 159, 133, 188, 62, 172, 219, 60, 155, 25, 46, 62, 147, 15, 91, 190, 197, 34, 74, 62, 41, 217, 21, 60, 59, 52, 180, 189, 195, 185, 32, 62, 245, 237, 200, 187, 90, 86, 169, 190, 231, 77, 196, 189, 231, 252, 8, 191, 214, 180, 150, 62, 232, 35, 168, 62, 117, 77, 8, 190, 1, 26, 42, 188, 207, 91, 76, 61, 165, 158, 137, 62, 7, 69, 68, 61, 93, 156, 171, 62, 129, 141, 10, 189, 124, 178, 141, 62, 99, 44, 5, 189, 80, 4, 194, 190, 193, 235, 38, 62, 65, 115, 126, 189, 147, 233, 41, 191, 190, 141, 16, 190, 71, 30, 170, 189, 198, 33, 9, 191, 37, 59, 184, 61, 0, 194, 105, 190, 216, 205, 41, 62, 2, 162, 155, 61, 110, 29, 156, 190, 106, 51, 201, 62, 3, 22, 74, 62, 43, 28, 64, 187, 56, 220, 29, 62, 119, 24, 189, 190, 132, 60, 151, 191, 91, 158, 51, 62, 240, 206, 11, 62, 103, 153, 95, 62, 91, 192, 194, 62, 222, 237, 92, 191, 135, 27, 215, 62, 193, 123, 152, 61, 108, 125, 177, 189, 254, 106, 2, 190, 0, 202, 97, 62, 38, 199, 22, 62, 83, 219, 250, 61, 240, 68, 42, 190, 248, 179, 88, 62, 60, 254, 100, 62, 117, 42, 145, 187, 154, 228, 48, 189, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 155, 159, 101, 62, 248, 216, 41, 62, 48, 125, 183, 189, 49, 196, 18, 62, 220, 148, 227, 60, 168, 65, 78, 62, 122, 127, 212, 190, 143, 47, 94, 189, 149, 194, 3, 62, 125, 27, 46, 62, 54, 215, 83, 191, 71, 183, 32, 61, 80, 77, 172, 190, 253, 31, 173, 62, 70, 154, 33, 63, 111, 217, 233, 189, 128, 203, 22, 62, 115, 159, 169, 189, 36, 217, 103, 190, 61, 163, 37, 62, 204, 125, 131, 190, 51, 169, 67, 191, 149, 203, 190, 62, 234, 126, 184, 62, 89, 5, 193, 61, 2, 61, 33, 62, 105, 45, 191, 61, 176, 116, 157, 62, 32, 146, 225, 60, 46, 192, 222, 190, 214, 158, 36, 62, 31, 246, 84, 61, 51, 54, 18, 189, 144, 224, 78, 191, 125, 179, 4, 189, 232, 22, 11, 60, 176, 197, 84, 191, 186, 156, 155, 189, 89, 56, 177, 61, 79, 78, 86, 189, 126, 34, 170, 61, 235, 231, 183, 190, 59, 153, 30, 190, 245, 72, 69, 62, 70, 168, 42, 189, 145, 115, 145, 61, 23, 38, 8, 191, 206, 96, 49, 191, 255, 19, 178, 189, 9, 217, 159, 191, 77, 1, 148, 189, 151, 238, 10, 62, 100, 33, 201, 62, 170, 131, 78, 61, 136, 82, 19, 61, 86, 227, 174, 62, 142, 50, 253, 189, 27, 117, 152, 61, 27, 115, 24, 190, 159, 186, 137, 62, 147, 79, 217, 61, 173, 59, 114, 189, 130, 239, 137, 188, 11, 129, 16, 190, 140, 116, 183, 61, 26, 55, 12, 189, 168, 126, 81, 59, 46, 24, 162, 190, 130, 95, 128, 61, 241, 244, 219, 188, 229, 110, 219, 61, 169, 48, 144, 189, 36, 158, 172, 190, 201, 153, 80, 61, 67, 115, 50, 62, 154, 244, 59, 191, 169, 66, 139, 60, 251, 107, 84, 190, 226, 111, 43, 190, 192, 122, 227, 189, 233, 202, 140, 60, 167, 222, 249, 189, 71, 149, 89, 62, 74, 89, 181, 189, 81, 206, 165, 189, 35, 68, 209, 189, 50, 44, 195, 189, 174, 210, 199, 189, 80, 28, 58, 190, 4, 52, 164, 189, 141, 174, 144, 189, 155, 53, 87, 190, 218, 144, 163, 188, 73, 220, 122, 190, 142, 242, 151, 62, 176, 36, 74, 190, 205, 232, 48, 190, 254, 141, 195, 60, 73, 24, 99, 62, 227, 142, 111, 60, 69, 170, 128, 62, 147, 80, 31, 189, 81, 41, 163, 61, 160, 157, 177, 61, 126, 137, 1, 60, 179, 96, 222, 62, 132, 93, 34, 62, 114, 23, 44, 190, 65, 66, 30, 189, 64, 122, 108, 190, 4, 212, 136, 190, 80, 204, 9, 189, 53, 152, 174, 189, 89, 117, 136, 62, 229, 59, 126, 61, 123, 192, 128, 189, 10, 11, 142, 60, 62, 224, 189, 60, 149, 248, 77, 61, 138, 111, 90, 190, 216, 207, 111, 61, 143, 240, 162, 58, 70, 57, 128, 189, 251, 69, 233, 189, 72, 87, 35, 62, 122, 54, 184, 189, 48, 92, 188, 61, 141, 76, 86, 189, 220, 222, 71, 190, 53, 236, 155, 190, 42, 165, 228, 188, 245, 61, 157, 62, 12, 253, 26, 191, 122, 151, 208, 60, 156, 112, 8, 190, 8, 182, 138, 190, 74, 69, 47, 61, 148, 13, 131, 61, 26, 108, 106, 190, 20, 217, 58, 60, 191, 126, 248, 190, 40, 239, 249, 189, 56, 157, 26, 191, 162, 219, 71, 191, 13, 86, 49, 62, 100, 92, 151, 191, 233, 41, 213, 190, 155, 236, 176, 60, 254, 21, 179, 62, 8, 188, 188, 62, 91, 16, 191, 189, 76, 178, 20, 60, 69, 131, 234, 190, 163, 216, 55, 190, 108, 26, 106, 189, 204, 40, 117, 190, 148, 136, 23, 62, 138, 216, 91, 190, 28, 35, 107, 62, 98, 100, 129, 62, 144, 255, 34, 62, 177, 145, 12, 190, 209, 65, 228, 189, 181, 226, 26, 189, 118, 22, 26, 62, 34, 43, 225, 61, 226, 54, 214, 189, 61, 108, 62, 189, 238, 76, 192, 61, 94, 193, 12, 62, 217, 75, 33, 190, 130, 98, 40, 190, 105, 50, 171, 61, 124, 198, 49, 61, 222, 155, 129, 61, 186, 175, 189, 188, 131, 64, 10, 62, 206, 13, 172, 60, 159, 200, 160, 189, 173, 160, 123, 60, 127, 201, 160, 61, 71, 81, 238, 61, 127, 141, 25, 189, 31, 21, 157, 188, 155, 84, 27, 190, 236, 115, 37, 190, 121, 221, 154, 61, 126, 185, 176, 189, 125, 72, 198, 188, 205, 34, 37, 60, 150, 125, 117, 189, 139, 50, 238, 189, 207, 182, 34, 191, 37, 94, 138, 189, 168, 53, 13, 62, 154, 203, 82, 62, 139, 27, 234, 189, 9, 136, 224, 190, 5, 72, 240, 190, 124, 109, 169, 60, 83, 113, 129, 62, 80, 112, 74, 190, 240, 222, 157, 190, 176, 9, 30, 62, 77, 22, 195, 190, 46, 120, 200, 189, 173, 142, 3, 191, 5, 72, 122, 191, 246, 248, 126, 61, 199, 228, 203, 190, 208, 120, 48, 190, 123, 123, 173, 61, 79, 230, 22, 191, 78, 168, 191, 62, 127, 176, 105, 190, 93, 130, 131, 61, 81, 230, 30, 190, 79, 25, 188, 60, 30, 25, 250, 187, 245, 122, 35, 62, 155, 12, 179, 62, 250, 208, 205, 62, 164, 18, 101, 61, 183, 25, 178, 62, 198, 226, 44, 62, 86, 234, 203, 190, 104, 52, 151, 59, 48, 1, 41, 62, 158, 33, 99, 191, 227, 251, 201, 189, 53, 85, 178, 61, 201, 28, 187, 188, 88, 35, 70, 62, 31, 234, 218, 188, 111, 224, 130, 187, 157, 119, 112, 62, 13, 0, 250, 188, 168, 102, 168, 62, 137, 143, 144, 189, 253, 226, 157, 191, 29, 68, 204, 61, 219, 193, 171, 191, 114, 17, 197, 190, 22, 118, 93, 188, 158, 183, 189, 62, 246, 129, 159, 62, 251, 221, 101, 60, 168, 32, 57, 62, 123, 234, 173, 190, 71, 88, 216, 188, 5, 247, 30, 189, 242, 35, 254, 61, 247, 57, 50, 62, 249, 98, 190, 190, 241, 183, 32, 62, 124, 138, 125, 61, 132, 147, 143, 189, 131, 125, 36, 190, 193, 111, 7, 190, 238, 70, 9, 190, 98, 72, 21, 62, 236, 6, 140, 184, 5, 226, 135, 62, 140, 204, 174, 188, 199, 200, 226, 187, 89, 179, 187, 62, 86, 145, 175, 62, 37, 48, 172, 61, 166, 151, 216, 61, 248, 96, 117, 190, 84, 132, 32, 61, 55, 93, 51, 62, 95, 244, 91, 189, 40, 104, 95, 62, 170, 138, 157, 189, 155, 20, 140, 190, 235, 69, 233, 61, 135, 161, 18, 190, 51, 252, 174, 59, 194, 5, 148, 190, 32, 47, 173, 61, 163, 179, 41, 190, 157, 110, 136, 190, 13, 42, 14, 191, 31, 80, 143, 61, 110, 131, 85, 189, 123, 97, 141, 190, 151, 234, 108, 190, 251, 48, 167, 189, 247, 21, 40, 62, 124, 105, 106, 190, 71, 208, 72, 62, 142, 244, 129, 190, 154, 208, 146, 188, 126, 71, 74, 190, 154, 197, 231, 61, 218, 71, 130, 190, 248, 141, 255, 190, 203, 197, 147, 190, 108, 10, 196, 190, 241, 247, 182, 189, 141, 92, 198, 62, 218, 108, 132, 190, 10, 31, 122, 190, 61, 138, 226, 189, 211, 2, 248, 187, 24, 132, 93, 62, 241, 193, 197, 61, 189, 31, 94, 61, 79, 211, 217, 190, 162, 214, 187, 61, 5, 136, 129, 62, 229, 77, 88, 61, 188, 176, 31, 62, 207, 153, 20, 191, 235, 41, 176, 62, 70, 110, 7, 191, 51, 4, 199, 61, 199, 41, 189, 62, 182, 144, 195, 190, 24, 240, 148, 62, 20, 115, 117, 62, 48, 77, 231, 60, 115, 87, 73, 189, 106, 222, 136, 191, 122, 126, 248, 190, 33, 174, 60, 189, 38, 69, 247, 190, 135, 250, 48, 190, 161, 61, 206, 62, 76, 236, 167, 62, 82, 64, 158, 60, 192, 151, 181, 62, 127, 14, 106, 190, 122, 254, 2, 62, 18, 95, 58, 190, 89, 233, 4, 190, 166, 150, 145, 62, 55, 92, 91, 60, 122, 80, 181, 190, 188, 101, 78, 62, 107, 209, 146, 62, 148, 154, 193, 61, 60, 3, 220, 190, 145, 97, 217, 190, 140, 26, 128, 191, 193, 103, 227, 189, 33, 107, 86, 191, 169, 72, 155, 189, 38, 71, 21, 61, 157, 13, 186, 59, 92, 102, 168, 62, 124, 109, 144, 190, 161, 91, 254, 189, 18, 195, 165, 59, 101, 110, 18, 62, 208, 75, 176, 191, 89, 96, 139, 190, 197, 142, 202, 189, 98, 186, 4, 189, 127, 51, 134, 62, 214, 66, 254, 190, 55, 6, 74, 190, 65, 171, 206, 188, 204, 17, 131, 189, 0, 20, 188, 62, 128, 217, 146, 191, 252, 2, 139, 190, 174, 147, 39, 62, 75, 186, 16, 191, 146, 102, 11, 190, 139, 193, 154, 62, 24, 34, 149, 62, 7, 91, 14, 63, 14, 97, 24, 190, 157, 221, 200, 62, 133, 24, 143, 190, 70, 190, 17, 62, 108, 138, 241, 190, 64, 143, 142, 62, 52, 212, 245, 61, 157, 242, 160, 62, 92, 252, 31, 61, 99, 156, 129, 62, 109, 149, 31, 190, 190, 97, 56, 191, 226, 200, 33, 62, 177, 112, 74, 62, 194, 42, 188, 191, 147, 51, 177, 61, 61, 31, 140, 61, 225, 219, 89, 190, 213, 171, 91, 62, 196, 44, 30, 190, 224, 53, 5, 190, 172, 189, 236, 61, 126, 165, 205, 189, 52, 46, 196, 62, 142, 24, 130, 191, 158, 95, 129, 191, 239, 169, 165, 189, 170, 206, 163, 191, 163, 156, 112, 190, 227, 20, 230, 61, 9, 150, 144, 62, 237, 205, 231, 62, 148, 117, 4, 190, 36, 171, 155, 62, 133, 158, 99, 190, 230, 190, 141, 62, 170, 156, 101, 190, 169, 231, 151, 62, 34, 246, 187, 61, 16, 77, 214, 60, 247, 57, 213, 62, 195, 117, 58, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 147, 255, 189, 242, 254, 52, 190, 150, 161, 207, 60, 166, 97, 13, 190, 30, 69, 98, 61, 238, 5, 50, 62, 123, 76, 202, 61, 210, 29, 105, 62, 167, 220, 238, 61, 215, 201, 84, 61, 27, 5, 217, 189, 216, 180, 66, 189, 175, 60, 174, 62, 200, 166, 167, 189, 215, 22, 189, 61, 130, 138, 64, 61, 127, 85, 48, 188, 173, 202, 86, 62, 232, 4, 226, 61, 211, 226, 213, 189, 126, 83, 10, 62, 50, 194, 145, 188, 60, 71, 154, 62, 184, 152, 70, 62, 14, 183, 110, 188, 77, 178, 166, 60, 177, 85, 62, 190, 166, 198, 254, 60, 48, 239, 212, 60, 161, 112, 29, 62, 208, 133, 15, 62, 103, 211, 89, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 149, 134, 191, 96, 104, 235, 190, 27, 67, 99, 190, 192, 92, 81, 189, 48, 52, 112, 62, 121, 122, 173, 190, 210, 19, 45, 191, 107, 202, 37, 62, 147, 136, 224, 62, 89, 149, 8, 62, 0, 194, 32, 62, 167, 130, 189, 190, 146, 157, 207, 62, 222, 171, 189, 190, 176, 123, 204, 190, 42, 144, 47, 63, 11, 176, 121, 190, 62, 151, 22, 63, 151, 17, 216, 60, 86, 17, 112, 63, 241, 65, 122, 190, 135, 21, 134, 61, 3, 180, 254, 61, 221, 29, 22, 191, 132, 111, 188, 187, 113, 114, 96, 63, 47, 111, 153, 190, 48, 51, 212, 62, 221, 149, 20, 191, 18, 50, 239, 190, 154, 215, 82, 191, 97, 141, 77, 191, 168, 186, 17, 62, 109, 6, 216, 60, 21, 186, 150, 190, 201, 206, 63, 189, 222, 219, 152, 190, 219, 69, 166, 190, 86, 114, 255, 61, 197, 63, 39, 190, 114, 131, 138, 61, 205, 106, 12, 62, 243, 201, 90, 190, 15, 120, 79, 62, 253, 168, 76, 190, 111, 5, 234, 62, 223, 227, 60, 62, 64, 42, 137, 62, 124, 87, 120, 190, 212, 148, 12, 189, 10, 242, 112, 60, 40, 82, 43, 62, 38, 88, 4, 191, 185, 213, 254, 62, 226, 147, 245, 189, 98, 56, 43, 61, 11, 129, 245, 189, 61, 164, 36, 62, 23, 205, 220, 60, 79, 102, 175, 62, 128, 132, 205, 189, 130, 223, 111, 190, 235, 30, 135, 62, 69, 199, 228, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 113, 33, 62, 169, 49, 219, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {100, 61, 210, 191, 117, 232, 40, 62, 166, 49, 30, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 44, 221, 63, 201, 88, 205, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}