// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 22, 250, 62, 174, 110, 28, 191, 248, 232, 197, 190, 163, 138, 42, 62, 204, 142, 110, 191, 94, 215, 200, 62, 236, 254, 163, 190, 167, 253, 135, 190, 205, 213, 241, 189, 155, 234, 168, 189, 146, 121, 238, 62, 238, 112, 0, 191, 32, 38, 211, 189, 42, 161, 171, 63, 176, 70, 230, 62, 94, 201, 135, 61, 188, 70, 221, 189, 110, 212, 3, 63, 215, 221, 39, 63, 251, 41, 160, 191, 199, 48, 169, 190, 186, 40, 55, 187, 91, 127, 89, 63, 212, 245, 158, 62, 140, 50, 84, 190, 3, 253, 161, 63, 8, 253, 155, 62, 103, 79, 197, 62, 109, 245, 162, 191, 137, 43, 168, 190, 5, 203, 197, 62, 66, 98, 152, 191, 199, 146, 149, 190, 224, 157, 158, 190, 174, 156, 99, 63, 46, 232, 103, 62, 170, 185, 156, 61, 10, 16, 89, 191, 235, 218, 246, 61, 70, 60, 81, 63, 214, 86, 60, 63, 38, 150, 7, 63, 166, 177, 32, 63, 3, 166, 28, 191, 85, 105, 146, 190, 65, 65, 56, 191, 200, 192, 18, 62, 172, 9, 96, 63, 26, 57, 144, 61, 126, 166, 191, 190, 233, 233, 171, 60, 23, 66, 196, 190, 214, 98, 107, 191, 2, 222, 62, 63, 142, 45, 3, 63, 93, 88, 121, 191, 167, 92, 57, 62, 251, 209, 168, 62, 1, 69, 116, 63, 30, 33, 196, 190, 153, 104, 112, 191, 227, 221, 217, 62, 87, 9, 197, 62, 215, 59, 90, 191, 68, 11, 162, 191, 51, 44, 72, 190, 43, 117, 29, 63, 116, 194, 234, 61, 162, 203, 18, 191, 24, 50, 104, 63, 49, 12, 50, 63, 29, 182, 207, 62, 186, 152, 149, 61, 117, 205, 39, 63, 60, 215, 210, 62, 141, 142, 45, 63, 12, 32, 139, 63, 176, 98, 84, 62, 85, 80, 50, 191, 249, 249, 74, 63, 126, 53, 144, 189, 23, 209, 129, 63, 34, 65, 158, 63, 222, 17, 172, 62, 58, 125, 27, 191, 56, 189, 36, 63, 206, 247, 160, 61, 197, 47, 191, 190, 12, 170, 178, 190, 47, 198, 97, 62, 10, 100, 18, 63, 82, 177, 11, 190, 200, 10, 189, 62, 21, 241, 40, 191, 9, 151, 49, 191, 199, 12, 186, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 6, 134, 191, 216, 144, 65, 190, 178, 117, 201, 62, 245, 29, 138, 62, 247, 94, 16, 190, 111, 239, 222, 190, 150, 148, 168, 62, 86, 173, 52, 62, 190, 192, 202, 62, 181, 166, 69, 188, 100, 31, 224, 62, 191, 171, 177, 62, 138, 154, 240, 61, 212, 111, 35, 191, 128, 28, 69, 191, 26, 116, 237, 190, 242, 123, 12, 191, 179, 0, 234, 61, 159, 54, 13, 63, 127, 181, 80, 62, 128, 108, 246, 187, 186, 107, 151, 62, 14, 55, 180, 62, 150, 212, 235, 190, 0, 101, 8, 62, 93, 235, 126, 61, 170, 8, 182, 190, 238, 248, 229, 190, 175, 7, 5, 63, 217, 138, 158, 190, 88, 217, 81, 190, 139, 169, 171, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 151, 201, 61, 208, 228, 139, 62, 168, 111, 110, 62, 35, 163, 132, 62, 237, 243, 178, 191, 120, 90, 104, 188, 84, 15, 0, 190, 232, 245, 211, 190, 250, 78, 17, 188, 227, 38, 8, 191, 232, 72, 13, 62, 68, 104, 10, 189, 129, 154, 114, 62, 6, 48, 27, 62, 219, 160, 146, 191, 34, 85, 23, 62, 242, 82, 197, 188, 218, 19, 48, 190, 207, 10, 74, 189, 148, 235, 190, 60, 37, 19, 142, 62, 36, 137, 181, 62, 114, 46, 39, 190, 42, 245, 205, 59, 131, 38, 91, 191, 47, 179, 12, 63, 218, 64, 16, 191, 202, 89, 6, 188, 68, 36, 21, 62, 123, 220, 1, 63, 67, 38, 56, 61, 100, 59, 146, 62, 147, 178, 13, 191, 11, 199, 162, 62, 167, 91, 164, 190, 61, 172, 134, 62, 144, 131, 4, 190, 115, 205, 67, 61, 9, 26, 137, 190, 255, 53, 171, 189, 60, 193, 107, 190, 180, 247, 210, 190, 37, 228, 4, 190, 213, 108, 118, 190, 154, 252, 121, 189, 59, 166, 128, 62, 138, 134, 172, 191, 81, 207, 13, 189, 121, 196, 19, 189, 3, 101, 10, 190, 161, 226, 232, 188, 235, 196, 98, 62, 218, 176, 105, 190, 66, 234, 4, 190, 216, 138, 185, 61, 74, 233, 165, 62, 136, 14, 3, 62, 233, 127, 24, 62, 166, 24, 7, 191, 101, 57, 255, 62, 134, 94, 184, 190, 88, 108, 132, 61, 229, 184, 18, 62, 181, 176, 40, 62, 78, 75, 172, 189, 144, 226, 204, 61, 195, 20, 3, 61, 118, 233, 39, 61, 242, 159, 23, 191, 5, 73, 241, 59, 58, 122, 35, 186, 52, 171, 84, 190, 191, 195, 8, 62, 164, 60, 171, 190, 166, 13, 98, 62, 116, 31, 1, 61, 38, 126, 129, 189, 76, 102, 32, 62, 129, 248, 199, 189, 161, 209, 201, 189, 193, 52, 12, 190, 241, 220, 227, 189, 93, 88, 179, 61, 88, 215, 148, 60, 16, 46, 43, 61, 248, 102, 214, 62, 104, 140, 254, 61, 237, 213, 76, 62, 26, 123, 163, 189, 184, 137, 150, 62, 247, 221, 58, 190, 95, 75, 103, 62, 6, 81, 223, 189, 54, 103, 106, 62, 181, 19, 131, 61, 127, 18, 154, 189, 88, 42, 7, 190, 93, 205, 84, 62, 118, 48, 137, 189, 69, 59, 111, 190, 17, 173, 240, 189, 125, 70, 119, 190, 249, 33, 164, 61, 101, 153, 84, 190, 178, 205, 185, 188, 68, 10, 175, 188, 102, 130, 53, 62, 211, 155, 37, 190, 179, 187, 34, 61, 172, 93, 250, 189, 103, 190, 12, 61, 71, 59, 4, 190, 136, 14, 151, 189, 184, 83, 28, 190, 181, 128, 100, 62, 66, 56, 36, 190, 6, 134, 133, 189, 63, 212, 54, 188, 139, 156, 119, 188, 203, 108, 152, 190, 152, 97, 132, 189, 161, 39, 21, 190, 48, 16, 46, 62, 188, 213, 132, 190, 134, 97, 65, 190, 163, 125, 76, 190, 255, 37, 171, 61, 25, 25, 30, 190, 236, 165, 80, 189, 5, 207, 53, 62, 251, 175, 151, 62, 152, 75, 5, 189, 128, 168, 60, 190, 158, 107, 220, 188, 235, 122, 10, 62, 193, 238, 236, 60, 191, 7, 28, 62, 59, 141, 139, 62, 223, 70, 77, 62, 78, 203, 82, 190, 139, 237, 17, 62, 26, 37, 115, 190, 116, 222, 73, 190, 196, 95, 171, 61, 78, 156, 129, 188, 138, 171, 153, 189, 91, 60, 122, 62, 41, 75, 215, 62, 211, 253, 95, 190, 147, 205, 59, 189, 231, 5, 135, 62, 3, 227, 179, 189, 196, 96, 177, 190, 79, 91, 23, 62, 208, 141, 115, 62, 99, 235, 172, 190, 16, 101, 67, 62, 66, 160, 27, 61, 171, 193, 160, 61, 118, 172, 51, 190, 192, 128, 235, 61, 229, 56, 26, 60, 51, 91, 88, 62, 201, 3, 188, 188, 209, 143, 136, 190, 206, 211, 37, 190, 172, 125, 157, 190, 34, 226, 72, 189, 222, 133, 119, 189, 41, 153, 51, 191, 196, 109, 231, 60, 106, 39, 81, 190, 148, 67, 151, 61, 217, 52, 100, 62, 114, 192, 101, 191, 97, 76, 36, 188, 152, 26, 17, 62, 225, 6, 180, 62, 218, 210, 206, 62, 177, 104, 199, 62, 233, 209, 171, 61, 23, 88, 20, 186, 0, 185, 150, 189, 197, 68, 33, 62, 240, 62, 106, 62, 20, 170, 119, 62, 161, 192, 115, 190, 41, 86, 114, 61, 31, 141, 174, 190, 97, 52, 57, 62, 91, 28, 207, 61, 92, 187, 102, 190, 10, 9, 80, 190, 117, 181, 98, 190, 235, 124, 236, 189, 131, 232, 149, 189, 181, 84, 22, 62, 167, 53, 2, 191, 229, 3, 113, 190, 181, 99, 246, 61, 159, 150, 252, 62, 67, 136, 155, 190, 35, 95, 20, 62, 61, 139, 128, 62, 146, 175, 172, 61, 86, 231, 102, 190, 240, 224, 4, 191, 214, 219, 217, 190, 195, 217, 104, 188, 79, 39, 152, 190, 40, 2, 66, 190, 113, 146, 12, 63, 187, 106, 5, 62, 230, 221, 142, 190, 152, 72, 140, 190, 169, 134, 133, 190, 253, 140, 255, 61, 8, 120, 92, 62, 21, 41, 195, 62, 173, 79, 41, 190, 235, 207, 154, 62, 55, 215, 25, 191, 210, 118, 131, 190, 148, 93, 44, 191, 255, 240, 41, 189, 126, 8, 116, 190, 130, 243, 34, 62, 9, 177, 64, 189, 70, 173, 53, 61, 61, 48, 183, 189, 252, 168, 139, 61, 43, 200, 30, 62, 187, 130, 222, 61, 216, 90, 197, 62, 118, 160, 81, 62, 158, 99, 232, 61, 133, 229, 223, 61, 72, 85, 19, 189, 25, 103, 9, 190, 96, 65, 123, 62, 141, 195, 44, 62, 229, 1, 78, 62, 160, 213, 159, 62, 56, 104, 13, 190, 94, 155, 46, 59, 44, 245, 129, 190, 58, 8, 78, 60, 115, 216, 31, 190, 28, 168, 36, 189, 77, 125, 146, 189, 129, 218, 210, 60, 106, 152, 25, 190, 241, 127, 71, 62, 196, 99, 42, 190, 241, 168, 236, 188, 218, 76, 180, 61, 123, 117, 60, 189, 97, 120, 201, 190, 34, 76, 46, 190, 213, 180, 180, 189, 81, 131, 163, 60, 54, 116, 158, 190, 72, 20, 72, 62, 92, 68, 142, 62, 54, 68, 75, 190, 178, 190, 83, 62, 124, 109, 174, 189, 157, 88, 243, 61, 242, 193, 41, 190, 168, 152, 181, 190, 90, 152, 207, 187, 160, 4, 27, 62, 181, 148, 115, 189, 158, 243, 223, 62, 51, 126, 9, 62, 121, 1, 40, 190, 30, 231, 159, 62, 236, 241, 150, 189, 56, 229, 153, 62, 15, 85, 18, 191, 223, 192, 102, 62, 239, 39, 134, 190, 82, 56, 196, 190, 178, 237, 29, 191, 235, 32, 232, 189, 116, 120, 84, 62, 25, 233, 29, 190, 160, 221, 173, 190, 135, 119, 187, 188, 93, 237, 43, 190, 125, 45, 80, 190, 208, 16, 139, 188, 87, 63, 44, 190, 198, 131, 249, 61, 147, 47, 63, 190, 145, 222, 69, 190, 232, 108, 70, 190, 219, 56, 53, 190, 133, 98, 73, 188, 178, 212, 57, 190, 168, 237, 219, 189, 121, 116, 177, 189, 202, 148, 201, 188, 16, 149, 213, 189, 96, 33, 21, 62, 164, 11, 33, 61, 137, 197, 250, 59, 174, 48, 124, 61, 82, 10, 14, 190, 118, 30, 114, 188, 48, 76, 2, 190, 4, 227, 204, 189, 83, 154, 170, 61, 79, 214, 27, 190, 113, 64, 133, 61, 241, 236, 137, 61, 153, 213, 201, 60, 52, 209, 70, 189, 206, 25, 0, 190, 204, 5, 104, 185, 59, 155, 7, 190, 47, 216, 133, 59, 6, 212, 236, 61, 220, 9, 6, 190, 84, 76, 204, 187, 245, 143, 236, 190, 70, 167, 157, 188, 180, 103, 141, 61, 216, 44, 22, 62, 78, 108, 160, 189, 67, 30, 22, 190, 185, 146, 15, 190, 135, 48, 170, 187, 189, 58, 120, 189, 2, 48, 210, 189, 159, 168, 211, 190, 18, 194, 17, 190, 82, 220, 124, 62, 78, 152, 229, 60, 77, 86, 122, 190, 177, 164, 233, 189, 52, 26, 72, 62, 72, 196, 227, 190, 97, 142, 24, 190, 55, 49, 72, 190, 59, 193, 128, 187, 51, 106, 22, 188, 124, 208, 242, 189, 139, 5, 62, 189, 31, 80, 119, 62, 94, 14, 102, 190, 88, 54, 97, 62, 160, 116, 185, 189, 113, 122, 206, 61, 66, 97, 121, 190, 28, 23, 23, 62, 152, 22, 12, 190, 54, 62, 127, 62, 135, 27, 129, 190, 211, 196, 212, 61, 140, 166, 196, 189, 166, 15, 11, 191, 44, 243, 205, 190, 233, 119, 4, 190, 148, 30, 56, 190, 221, 183, 4, 63, 225, 117, 82, 191, 227, 36, 54, 190, 86, 6, 253, 188, 198, 34, 84, 190, 136, 96, 190, 61, 165, 31, 69, 62, 167, 15, 181, 188, 31, 255, 247, 189, 19, 90, 43, 189, 131, 16, 139, 62, 0, 201, 138, 61, 193, 144, 165, 62, 85, 160, 86, 60, 172, 137, 1, 63, 64, 141, 173, 190, 58, 50, 51, 189, 240, 137, 112, 62, 158, 37, 38, 61, 25, 147, 33, 190, 166, 83, 196, 188, 43, 178, 79, 62, 64, 227, 20, 190, 165, 161, 156, 189, 111, 43, 71, 61, 226, 144, 82, 62, 6, 200, 136, 188, 152, 32, 13, 190, 242, 148, 175, 62, 79, 208, 4, 62, 147, 100, 181, 190, 58, 132, 128, 62, 217, 81, 37, 190, 224, 155, 46, 190, 129, 252, 231, 188, 158, 193, 246, 60, 34, 55, 122, 62, 228, 141, 123, 62, 45, 74, 230, 188, 108, 119, 153, 61, 103, 156, 203, 189, 9, 244, 30, 62, 85, 100, 28, 190, 88, 74, 132, 189, 143, 208, 133, 190, 213, 78, 25, 190, 21, 233, 47, 191, 195, 38, 51, 189, 84, 196, 164, 61, 24, 71, 50, 190, 242, 130, 18, 62, 109, 189, 155, 62, 131, 73, 67, 62, 101, 76, 52, 62, 250, 136, 192, 59, 150, 53, 54, 188, 74, 65, 173, 62, 144, 27, 65, 62, 144, 9, 34, 191, 173, 142, 143, 190, 216, 253, 241, 62, 184, 43, 114, 188, 239, 72, 174, 190, 84, 112, 22, 62, 101, 131, 29, 190, 141, 37, 195, 62, 211, 240, 21, 62, 57, 212, 240, 61, 127, 247, 241, 59, 155, 210, 252, 61, 143, 201, 26, 190, 34, 170, 231, 189, 209, 129, 186, 61, 33, 151, 123, 59, 55, 145, 150, 190, 238, 51, 87, 190, 125, 208, 131, 191, 253, 143, 34, 62, 30, 26, 148, 191, 103, 185, 199, 188, 127, 131, 12, 191, 3, 145, 58, 61, 4, 231, 26, 62, 11, 113, 185, 190, 209, 99, 57, 189, 135, 176, 101, 62, 83, 148, 65, 61, 165, 24, 171, 189, 202, 16, 67, 189, 251, 124, 2, 190, 56, 5, 98, 61, 220, 147, 147, 190, 180, 11, 106, 190, 39, 212, 0, 63, 211, 183, 157, 189, 248, 177, 47, 62, 49, 159, 122, 189, 26, 246, 202, 61, 87, 220, 182, 62, 214, 8, 9, 62, 105, 221, 196, 62, 253, 221, 3, 62, 64, 86, 12, 191, 81, 25, 189, 62, 119, 86, 7, 62, 247, 242, 149, 60, 217, 91, 42, 190, 180, 31, 27, 189, 95, 11, 88, 190, 146, 30, 106, 62, 0, 216, 217, 189, 108, 64, 132, 61, 156, 62, 122, 59, 56, 161, 121, 189, 124, 68, 31, 60, 236, 69, 213, 61, 32, 187, 158, 62, 134, 105, 151, 60, 91, 230, 155, 61, 173, 150, 145, 190, 128, 45, 178, 61, 254, 27, 175, 62, 157, 91, 161, 190, 172, 237, 119, 191, 101, 195, 139, 62, 97, 209, 179, 62, 182, 86, 132, 191, 104, 31, 120, 62, 75, 185, 7, 190, 115, 243, 95, 61, 73, 63, 20, 190, 28, 155, 236, 61, 111, 177, 98, 188, 132, 177, 209, 62, 69, 95, 57, 190, 161, 27, 161, 58, 117, 234, 221, 62, 40, 194, 143, 62, 187, 252, 204, 189, 148, 250, 190, 189, 114, 58, 163, 190, 231, 22, 200, 190, 225, 22, 237, 190, 24, 165, 141, 190, 11, 201, 150, 62, 165, 204, 224, 62, 154, 94, 127, 62, 193, 228, 102, 189, 178, 64, 13, 61, 84, 162, 6, 62, 112, 35, 49, 187, 241, 238, 188, 190, 111, 222, 94, 190, 85, 181, 49, 189, 85, 222, 153, 60, 196, 128, 44, 62, 55, 212, 129, 190, 113, 190, 46, 62, 145, 31, 50, 60, 229, 92, 247, 189, 4, 108, 3, 62, 252, 78, 168, 189, 41, 245, 192, 190, 231, 77, 196, 189, 2, 226, 42, 191, 93, 231, 139, 62, 27, 234, 154, 62, 120, 254, 1, 190, 182, 146, 144, 61, 34, 110, 247, 60, 18, 223, 124, 62, 198, 58, 27, 61, 27, 148, 162, 62, 108, 8, 143, 188, 228, 26, 133, 62, 19, 243, 110, 189, 102, 229, 179, 190, 148, 71, 248, 61, 181, 138, 40, 189, 159, 32, 36, 191, 64, 194, 11, 190, 73, 119, 11, 190, 58, 206, 16, 191, 142, 31, 169, 61, 125, 90, 104, 190, 190, 114, 41, 62, 120, 85, 30, 61, 101, 97, 186, 190, 195, 193, 207, 62, 139, 4, 73, 62, 244, 75, 170, 189, 98, 112, 28, 62, 8, 167, 195, 190, 172, 63, 150, 191, 125, 85, 40, 62, 240, 206, 11, 62, 171, 151, 92, 62, 203, 1, 193, 62, 3, 240, 97, 191, 114, 72, 209, 62, 169, 249, 26, 188, 34, 85, 203, 189, 189, 37, 12, 190, 39, 222, 63, 62, 68, 229, 9, 62, 194, 27, 202, 189, 155, 152, 59, 190, 15, 182, 3, 62, 73, 114, 99, 62, 34, 69, 218, 186, 63, 231, 53, 190, 2, 41, 38, 190, 102, 11, 128, 61, 106, 46, 1, 190, 227, 155, 153, 189, 243, 15, 71, 190, 2, 87, 244, 188, 159, 138, 234, 189, 45, 95, 79, 189, 41, 44, 253, 61, 61, 140, 25, 61, 128, 57, 238, 189, 222, 133, 26, 60, 167, 96, 12, 190, 195, 134, 217, 188, 105, 162, 34, 62, 121, 208, 132, 61, 39, 102, 48, 190, 76, 229, 169, 189, 175, 114, 19, 190, 44, 110, 39, 190, 98, 164, 51, 190, 10, 255, 7, 62, 201, 35, 235, 60, 110, 228, 210, 189, 37, 125, 108, 61, 173, 124, 62, 190, 29, 22, 15, 62, 64, 69, 177, 189, 100, 48, 153, 189, 232, 40, 158, 61, 239, 153, 134, 61, 245, 42, 43, 190, 215, 198, 79, 62, 137, 216, 234, 61, 92, 26, 28, 190, 9, 223, 254, 61, 215, 122, 236, 60, 167, 226, 48, 62, 105, 14, 215, 190, 251, 138, 50, 189, 123, 155, 14, 62, 51, 154, 2, 62, 187, 203, 88, 191, 143, 239, 33, 61, 117, 220, 188, 190, 79, 106, 180, 62, 105, 186, 29, 63, 152, 246, 40, 190, 128, 203, 22, 62, 83, 59, 7, 190, 0, 83, 112, 190, 98, 82, 40, 62, 43, 7, 182, 190, 25, 182, 120, 191, 130, 42, 188, 62, 64, 22, 195, 62, 22, 207, 180, 61, 126, 172, 81, 62, 139, 134, 251, 60, 73, 49, 195, 62, 130, 104, 213, 187, 190, 242, 1, 191, 144, 213, 31, 62, 156, 247, 168, 188, 118, 38, 140, 189, 46, 204, 154, 191, 208, 180, 215, 188, 167, 255, 99, 60, 41, 117, 98, 191, 16, 106, 178, 189, 226, 121, 141, 61, 210, 176, 183, 188, 181, 144, 7, 62, 202, 177, 206, 190, 183, 6, 51, 190, 72, 227, 132, 62, 59, 5, 163, 189, 176, 107, 182, 61, 147, 120, 15, 191, 80, 214, 65, 191, 255, 19, 178, 189, 226, 162, 157, 191, 209, 108, 173, 189, 79, 91, 19, 62, 165, 169, 244, 62, 188, 245, 68, 60, 193, 243, 17, 61, 60, 115, 176, 62, 13, 63, 187, 189, 75, 221, 158, 61, 169, 222, 232, 189, 186, 173, 139, 62, 224, 128, 233, 61, 218, 40, 123, 189, 69, 215, 13, 189, 65, 123, 6, 190, 213, 169, 253, 60, 146, 196, 226, 60, 40, 193, 32, 61, 244, 193, 177, 190, 198, 123, 192, 189, 62, 175, 170, 59, 248, 210, 16, 62, 49, 133, 20, 190, 182, 15, 251, 190, 121, 12, 226, 61, 125, 134, 87, 62, 194, 17, 184, 191, 106, 61, 173, 61, 127, 141, 138, 190, 215, 56, 123, 190, 1, 33, 142, 189, 233, 202, 140, 60, 225, 191, 197, 189, 244, 145, 122, 62, 121, 34, 224, 189, 247, 84, 177, 61, 27, 160, 1, 190, 149, 206, 185, 189, 56, 64, 209, 189, 249, 239, 121, 190, 22, 183, 180, 189, 141, 174, 144, 189, 235, 224, 120, 190, 202, 34, 59, 62, 22, 149, 10, 190, 200, 19, 171, 62, 190, 35, 90, 190, 32, 228, 49, 190, 28, 251, 11, 61, 16, 40, 71, 62, 249, 205, 3, 61, 159, 196, 133, 62, 199, 170, 210, 188, 90, 200, 172, 61, 69, 55, 136, 61, 225, 137, 78, 188, 44, 229, 231, 62, 28, 170, 39, 62, 71, 119, 70, 190, 157, 120, 49, 189, 179, 104, 111, 190, 146, 241, 131, 190, 177, 117, 24, 189, 53, 152, 174, 189, 101, 152, 140, 62, 175, 105, 113, 61, 239, 54, 109, 189, 66, 207, 177, 59, 210, 196, 172, 188, 16, 66, 81, 61, 163, 154, 97, 190, 206, 97, 18, 61, 113, 70, 157, 187, 200, 224, 197, 189, 149, 214, 243, 189, 184, 126, 20, 62, 19, 10, 177, 189, 54, 2, 196, 61, 91, 22, 155, 189, 18, 81, 82, 190, 104, 173, 142, 190, 182, 38, 159, 60, 247, 127, 159, 62, 113, 130, 179, 190, 122, 151, 208, 60, 224, 49, 198, 189, 178, 42, 181, 189, 119, 77, 50, 62, 17, 43, 216, 61, 138, 244, 72, 190, 179, 63, 14, 62, 163, 47, 168, 190, 167, 113, 40, 190, 22, 231, 26, 191, 77, 217, 223, 190, 13, 86, 49, 62, 160, 148, 134, 191, 168, 196, 140, 190, 62, 62, 148, 60, 163, 164, 46, 63, 96, 2, 225, 62, 34, 88, 187, 189, 178, 99, 139, 61, 46, 19, 16, 190, 149, 78, 3, 190, 101, 184, 187, 188, 0, 51, 227, 190, 167, 79, 86, 62, 14, 125, 112, 190, 28, 35, 107, 62, 62, 50, 145, 62, 144, 255, 34, 62, 44, 188, 23, 190, 63, 182, 225, 189, 181, 226, 26, 189, 47, 93, 20, 62, 144, 218, 201, 61, 226, 54, 214, 189, 182, 119, 79, 189, 57, 179, 186, 61, 94, 193, 12, 62, 217, 75, 33, 190, 74, 212, 42, 190, 214, 26, 161, 61, 29, 16, 21, 61, 222, 155, 129, 61, 149, 236, 44, 189, 131, 64, 10, 62, 152, 19, 183, 58, 44, 53, 175, 189, 173, 160, 123, 60, 102, 247, 144, 61, 41, 208, 236, 61, 127, 141, 25, 189, 158, 92, 186, 188, 184, 106, 34, 190, 183, 207, 37, 190, 242, 130, 160, 61, 182, 50, 177, 189, 47, 191, 201, 188, 168, 225, 127, 59, 160, 65, 137, 189, 6, 113, 237, 189, 119, 238, 29, 191, 107, 101, 132, 189, 189, 145, 7, 62, 240, 139, 86, 62, 95, 39, 217, 189, 165, 236, 239, 190, 64, 33, 1, 191, 153, 47, 11, 61, 84, 183, 132, 62, 48, 127, 75, 190, 27, 113, 164, 190, 226, 83, 33, 62, 246, 21, 218, 190, 92, 45, 184, 189, 61, 59, 5, 191, 210, 89, 145, 191, 246, 248, 126, 61, 62, 28, 205, 190, 99, 35, 133, 190, 249, 98, 189, 61, 248, 97, 68, 191, 239, 228, 194, 62, 138, 93, 104, 190, 205, 30, 108, 61, 94, 135, 38, 190, 52, 225, 48, 61, 145, 164, 194, 188, 83, 199, 92, 62, 239, 195, 178, 62, 146, 155, 217, 62, 86, 182, 146, 61, 82, 91, 175, 62, 106, 88, 17, 62, 118, 81, 174, 190, 18, 115, 195, 60, 209, 63, 26, 62, 67, 207, 89, 191, 227, 251, 201, 189, 96, 49, 148, 61, 220, 96, 134, 188, 167, 181, 80, 62, 55, 227, 196, 188, 115, 244, 66, 188, 195, 203, 118, 62, 101, 115, 6, 62, 110, 167, 169, 62, 139, 31, 234, 189, 125, 215, 142, 191, 29, 68, 204, 61, 8, 112, 163, 191, 171, 157, 188, 190, 45, 239, 35, 189, 62, 210, 8, 63, 220, 122, 199, 62, 232, 144, 228, 187, 25, 165, 132, 62, 134, 91, 131, 190, 130, 185, 202, 188, 210, 98, 17, 189, 182, 108, 41, 60, 90, 42, 55, 62, 79, 124, 200, 190, 2, 208, 32, 62, 32, 52, 170, 61, 84, 229, 183, 189, 143, 45, 21, 190, 230, 103, 65, 190, 202, 229, 28, 190, 251, 230, 0, 62, 99, 22, 65, 60, 12, 158, 77, 62, 119, 48, 19, 189, 133, 169, 65, 189, 95, 97, 151, 62, 116, 65, 145, 62, 134, 212, 50, 61, 50, 36, 223, 61, 247, 33, 115, 190, 184, 125, 224, 60, 229, 188, 53, 62, 95, 244, 91, 189, 250, 253, 105, 62, 221, 155, 152, 189, 201, 74, 69, 190, 25, 233, 217, 61, 235, 76, 60, 190, 38, 71, 211, 187, 169, 191, 148, 190, 22, 92, 161, 61, 71, 206, 79, 190, 106, 199, 198, 190, 226, 214, 24, 191, 114, 51, 26, 188, 11, 129, 26, 189, 7, 141, 137, 190, 85, 247, 147, 190, 109, 118, 211, 189, 54, 235, 38, 62, 158, 209, 113, 190, 175, 133, 50, 62, 27, 8, 142, 190, 169, 159, 87, 188, 138, 137, 93, 190, 82, 251, 9, 62, 153, 134, 110, 190, 73, 127, 10, 191, 3, 207, 157, 190, 212, 10, 180, 190, 177, 212, 205, 189, 203, 139, 209, 62, 153, 88, 125, 190, 244, 145, 121, 190, 61, 138, 226, 189, 208, 58, 147, 187, 44, 116, 86, 62, 117, 150, 208, 61, 223, 128, 194, 60, 102, 229, 220, 190, 55, 138, 179, 61, 193, 232, 133, 62, 179, 210, 153, 61, 194, 137, 36, 62, 60, 54, 28, 191, 20, 104, 183, 62, 15, 234, 25, 191, 85, 143, 209, 61, 193, 78, 185, 62, 61, 185, 237, 190, 159, 174, 136, 62, 241, 166, 133, 62, 57, 166, 51, 61, 131, 115, 60, 189, 2, 188, 153, 191, 134, 5, 1, 191, 140, 244, 187, 188, 209, 219, 34, 191, 125, 110, 194, 190, 137, 141, 223, 62, 226, 23, 181, 62, 248, 59, 204, 189, 184, 84, 240, 62, 177, 69, 172, 190, 224, 35, 143, 61, 9, 122, 75, 190, 89, 233, 4, 190, 10, 21, 132, 62, 201, 214, 212, 61, 59, 55, 187, 190, 20, 147, 7, 62, 221, 77, 165, 62, 237, 42, 200, 61, 120, 252, 6, 191, 149, 32, 251, 190, 97, 72, 169, 191, 8, 184, 142, 189, 73, 74, 141, 191, 133, 86, 177, 189, 153, 206, 244, 57, 137, 100, 65, 61, 252, 254, 178, 62, 219, 162, 138, 190, 38, 220, 181, 190, 17, 245, 220, 60, 155, 199, 4, 62, 101, 30, 183, 191, 218, 186, 144, 190, 36, 160, 220, 189, 97, 72, 42, 60, 100, 143, 156, 62, 29, 8, 5, 191, 242, 206, 82, 190, 170, 181, 85, 61, 22, 114, 149, 189, 147, 7, 223, 62, 37, 2, 143, 191, 62, 28, 39, 190, 174, 147, 39, 62, 174, 43, 22, 191, 242, 140, 13, 190, 187, 213, 149, 62, 240, 61, 233, 62, 153, 155, 39, 63, 140, 131, 26, 190, 222, 8, 212, 62, 165, 72, 93, 190, 223, 74, 27, 62, 1, 61, 237, 190, 210, 77, 151, 62, 113, 82, 217, 61, 133, 134, 150, 62, 55, 163, 35, 61, 63, 233, 153, 62, 18, 172, 49, 190, 187, 142, 109, 191, 242, 166, 45, 62, 158, 49, 58, 62, 89, 59, 198, 191, 81, 31, 149, 61, 129, 180, 113, 61, 13, 30, 56, 190, 76, 107, 127, 62, 117, 131, 53, 190, 131, 240, 14, 190, 163, 164, 66, 62, 141, 151, 216, 189, 13, 157, 218, 62, 108, 219, 133, 191, 233, 21, 113, 191, 239, 169, 165, 189, 61, 147, 170, 191, 49, 252, 114, 190, 137, 242, 212, 61, 98, 41, 200, 62, 16, 129, 3, 63, 196, 109, 8, 190, 4, 49, 163, 62, 237, 238, 50, 190, 59, 125, 145, 62, 32, 209, 96, 190, 224, 123, 158, 62, 171, 122, 155, 61, 14, 82, 127, 188, 62, 111, 210, 62, 81, 58, 166, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 49, 24, 190, 106, 170, 59, 190, 61, 137, 174, 59, 98, 119, 220, 189, 11, 102, 130, 61, 165, 97, 37, 62, 10, 72, 250, 61, 95, 175, 102, 62, 67, 69, 80, 61, 215, 201, 84, 61, 104, 204, 163, 189, 240, 130, 52, 189, 243, 88, 177, 62, 133, 151, 211, 189, 171, 174, 234, 61, 191, 38, 88, 61, 128, 35, 2, 189, 123, 46, 72, 62, 232, 4, 226, 61, 51, 128, 214, 189, 54, 150, 6, 62, 134, 133, 216, 185, 129, 92, 151, 62, 243, 229, 126, 62, 172, 134, 118, 188, 32, 126, 100, 60, 40, 101, 70, 190, 139, 225, 2, 59, 53, 237, 156, 60, 241, 134, 22, 62, 220, 186, 15, 62, 10, 32, 88, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 148, 131, 191, 191, 195, 0, 191, 128, 23, 84, 190, 251, 65, 65, 190, 250, 83, 121, 62, 114, 235, 171, 190, 123, 134, 49, 191, 226, 174, 17, 62, 57, 134, 205, 62, 89, 149, 8, 62, 143, 242, 138, 62, 198, 194, 215, 190, 20, 67, 213, 62, 58, 37, 204, 190, 222, 135, 206, 190, 182, 180, 55, 63, 130, 132, 102, 190, 124, 170, 20, 63, 151, 17, 216, 60, 30, 16, 128, 63, 205, 217, 125, 190, 2, 226, 132, 62, 175, 89, 234, 61, 84, 119, 25, 191, 130, 231, 16, 188, 254, 73, 112, 63, 49, 153, 152, 190, 12, 142, 197, 62, 145, 184, 24, 191, 35, 32, 254, 190, 46, 132, 102, 191, 179, 12, 79, 191, 87, 53, 9, 62, 130, 203, 139, 189, 69, 88, 159, 190, 210, 241, 18, 190, 163, 6, 155, 190, 151, 209, 182, 190, 218, 217, 1, 62, 234, 102, 72, 190, 81, 213, 86, 61, 205, 106, 12, 62, 93, 1, 111, 190, 255, 197, 30, 62, 15, 199, 51, 190, 170, 63, 220, 62, 213, 75, 16, 62, 13, 160, 147, 62, 65, 85, 124, 190, 146, 201, 175, 188, 10, 242, 112, 60, 39, 152, 59, 62, 241, 26, 28, 191, 249, 192, 38, 63, 187, 210, 14, 190, 21, 228, 232, 186, 124, 135, 245, 189, 81, 188, 180, 61, 29, 186, 88, 61, 87, 52, 143, 62, 151, 83, 62, 190, 233, 201, 140, 190, 149, 213, 75, 62, 6, 214, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 74, 35, 62, 112, 134, 237, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 20, 189, 59, 160, 147, 133, 190, 72, 160, 14, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 129, 133, 63, 210, 250, 156, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0071/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}