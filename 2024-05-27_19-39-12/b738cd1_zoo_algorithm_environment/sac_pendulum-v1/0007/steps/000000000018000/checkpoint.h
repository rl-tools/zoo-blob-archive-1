// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 73, 20, 191, 177, 219, 203, 191, 160, 0, 153, 190, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 13, 24, 138, 62, 72, 162, 166, 191, 143, 20, 74, 190, 20, 123, 219, 190, 213, 121, 183, 191, 226, 128, 189, 190, 251, 173, 208, 190, 202, 236, 122, 191, 59, 211, 250, 62, 232, 151, 109, 61, 108, 163, 251, 62, 171, 181, 182, 190, 32, 175, 166, 190, 163, 10, 248, 189, 44, 152, 132, 190, 100, 194, 40, 60, 199, 202, 131, 61, 49, 252, 20, 191, 102, 193, 135, 190, 237, 146, 70, 62, 221, 59, 223, 190, 45, 157, 152, 62, 80, 1, 187, 63, 58, 158, 247, 62, 69, 122, 252, 62, 98, 158, 141, 62, 76, 34, 39, 191, 111, 130, 179, 61, 29, 125, 232, 191, 182, 20, 212, 190, 100, 246, 6, 62, 150, 172, 109, 191, 251, 123, 192, 62, 84, 188, 130, 190, 230, 254, 82, 63, 244, 66, 110, 190, 80, 154, 1, 191, 31, 184, 146, 190, 48, 2, 0, 188, 177, 127, 40, 191, 242, 144, 252, 190, 164, 220, 35, 63, 154, 250, 174, 62, 65, 127, 61, 190, 223, 104, 131, 62, 229, 215, 159, 62, 204, 80, 173, 191, 51, 168, 240, 190, 105, 119, 222, 189, 115, 169, 249, 190, 249, 172, 75, 62, 169, 181, 164, 62, 61, 214, 162, 191, 69, 24, 131, 190, 184, 247, 109, 191, 50, 188, 237, 190, 118, 192, 168, 185, 119, 112, 47, 191, 248, 27, 89, 63, 206, 92, 162, 60, 212, 216, 15, 191, 37, 56, 19, 63, 162, 195, 82, 60, 135, 151, 208, 190, 31, 40, 23, 63, 125, 127, 68, 62, 127, 155, 11, 63, 135, 227, 116, 191, 192, 113, 167, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 162, 166, 44, 63, 93, 171, 227, 190, 151, 118, 109, 190, 178, 250, 102, 63, 224, 196, 137, 63, 152, 112, 10, 63, 176, 37, 234, 190, 228, 185, 120, 63, 81, 235, 44, 190, 134, 27, 3, 190, 107, 16, 93, 191, 159, 165, 50, 191, 78, 197, 173, 189, 16, 5, 152, 191, 115, 3, 57, 189, 43, 246, 94, 62, 238, 36, 166, 62, 75, 198, 12, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 88, 102, 190, 9, 231, 173, 190, 243, 103, 37, 62, 203, 135, 249, 189, 77, 132, 148, 190, 49, 85, 153, 189, 126, 23, 115, 62, 189, 127, 12, 190, 14, 34, 102, 191, 17, 49, 166, 190, 243, 154, 0, 63, 246, 160, 89, 189, 59, 84, 98, 190, 34, 54, 135, 62, 14, 173, 249, 62, 91, 84, 233, 190, 37, 66, 36, 63, 126, 186, 188, 188, 139, 1, 0, 191, 125, 186, 79, 189, 101, 171, 38, 62, 9, 243, 11, 63, 152, 79, 12, 63, 217, 249, 136, 62, 247, 121, 98, 189, 250, 74, 164, 190, 134, 11, 70, 191, 163, 97, 131, 190, 220, 5, 111, 189, 65, 16, 5, 190, 91, 56, 39, 62, 56, 161, 74, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 190, 145, 61, 149, 125, 21, 190, 207, 147, 12, 61, 135, 236, 5, 62, 154, 139, 69, 191, 76, 234, 38, 190, 124, 76, 177, 188, 6, 177, 225, 61, 213, 73, 90, 190, 167, 54, 206, 62, 178, 237, 176, 61, 113, 107, 134, 61, 122, 249, 159, 190, 69, 51, 29, 61, 11, 41, 254, 61, 242, 33, 65, 191, 238, 245, 169, 191, 52, 50, 213, 189, 166, 113, 219, 190, 159, 208, 90, 190, 72, 150, 193, 62, 69, 101, 28, 62, 16, 207, 72, 62, 213, 127, 245, 190, 35, 174, 105, 62, 247, 99, 60, 60, 87, 126, 2, 191, 141, 98, 8, 191, 121, 93, 232, 189, 225, 47, 88, 62, 37, 103, 135, 62, 152, 201, 33, 62, 202, 181, 152, 189, 33, 146, 54, 61, 212, 56, 255, 190, 192, 246, 232, 190, 111, 133, 116, 61, 40, 132, 197, 61, 185, 238, 202, 61, 20, 238, 14, 62, 146, 237, 57, 190, 43, 251, 50, 190, 220, 130, 101, 62, 136, 192, 248, 190, 43, 163, 213, 61, 194, 161, 142, 62, 121, 99, 200, 190, 48, 16, 160, 188, 87, 186, 7, 190, 108, 94, 153, 190, 247, 168, 57, 62, 232, 28, 40, 191, 68, 11, 73, 190, 234, 184, 203, 189, 113, 144, 91, 190, 65, 99, 82, 61, 8, 146, 83, 190, 255, 112, 165, 189, 191, 23, 240, 190, 220, 201, 119, 62, 41, 166, 78, 61, 86, 109, 242, 189, 145, 27, 237, 188, 84, 75, 254, 61, 249, 14, 185, 191, 5, 150, 62, 61, 120, 245, 181, 62, 242, 40, 194, 191, 247, 108, 124, 62, 142, 84, 232, 190, 131, 192, 178, 189, 228, 25, 253, 189, 240, 221, 203, 190, 9, 138, 35, 189, 77, 44, 142, 190, 30, 141, 114, 62, 9, 110, 171, 190, 42, 13, 133, 190, 141, 55, 98, 61, 165, 88, 180, 62, 223, 118, 44, 190, 47, 243, 102, 62, 17, 6, 71, 189, 93, 65, 39, 63, 83, 115, 214, 62, 108, 145, 42, 62, 203, 39, 9, 62, 210, 6, 75, 62, 222, 23, 30, 63, 9, 95, 6, 190, 237, 21, 33, 191, 148, 40, 222, 190, 46, 63, 0, 191, 11, 140, 152, 191, 104, 254, 225, 59, 99, 192, 96, 190, 211, 205, 35, 61, 68, 42, 69, 189, 152, 29, 40, 62, 202, 8, 66, 190, 247, 57, 129, 190, 218, 116, 149, 62, 159, 212, 54, 62, 7, 226, 155, 62, 105, 220, 31, 63, 129, 255, 7, 191, 237, 69, 82, 62, 181, 104, 152, 59, 57, 83, 21, 61, 228, 148, 132, 61, 21, 73, 161, 61, 7, 61, 166, 190, 117, 66, 59, 61, 201, 122, 237, 61, 220, 222, 28, 189, 228, 7, 233, 187, 238, 242, 114, 61, 247, 135, 50, 60, 203, 234, 73, 190, 174, 207, 74, 190, 195, 201, 64, 189, 250, 197, 8, 62, 103, 76, 195, 62, 76, 240, 228, 190, 147, 240, 191, 62, 58, 73, 120, 62, 79, 102, 32, 62, 117, 209, 152, 62, 151, 228, 176, 62, 229, 95, 202, 61, 196, 126, 85, 62, 89, 36, 166, 189, 222, 14, 140, 190, 152, 84, 96, 62, 225, 132, 30, 62, 189, 245, 81, 61, 167, 120, 49, 190, 165, 126, 212, 191, 171, 84, 138, 62, 238, 175, 42, 190, 0, 229, 128, 60, 21, 238, 126, 188, 237, 250, 217, 189, 184, 66, 24, 191, 115, 117, 125, 62, 192, 193, 31, 62, 28, 130, 15, 191, 192, 115, 65, 62, 169, 190, 115, 189, 109, 100, 33, 191, 195, 78, 155, 189, 170, 194, 64, 190, 149, 125, 192, 62, 47, 226, 2, 190, 98, 179, 87, 190, 197, 48, 192, 61, 9, 87, 206, 190, 161, 120, 42, 62, 182, 225, 18, 189, 83, 109, 179, 190, 229, 245, 241, 61, 57, 181, 226, 61, 91, 109, 158, 61, 30, 74, 34, 190, 73, 109, 228, 185, 143, 104, 77, 189, 143, 165, 198, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 75, 58, 183, 61, 232, 13, 191, 61, 37, 118, 145, 60, 135, 39, 186, 60, 207, 23, 12, 62, 7, 178, 34, 190, 40, 69, 225, 189, 122, 126, 243, 188, 119, 208, 129, 61, 136, 252, 26, 61, 61, 106, 47, 61, 129, 18, 4, 190, 162, 157, 154, 189, 35, 211, 1, 62, 118, 58, 10, 62, 99, 239, 13, 59, 69, 98, 140, 188, 110, 38, 21, 62, 55, 105, 35, 60, 13, 84, 42, 190, 178, 221, 209, 189, 125, 136, 83, 191, 234, 23, 238, 189, 130, 33, 224, 61, 26, 225, 58, 191, 237, 9, 175, 62, 111, 92, 27, 191, 19, 22, 7, 189, 209, 169, 97, 190, 152, 148, 30, 191, 182, 17, 113, 61, 80, 195, 130, 61, 1, 211, 91, 190, 188, 35, 135, 190, 32, 27, 71, 190, 245, 4, 235, 189, 146, 48, 147, 61, 167, 215, 207, 62, 59, 17, 60, 62, 70, 16, 32, 61, 96, 110, 67, 61, 182, 135, 249, 189, 96, 229, 51, 189, 75, 153, 32, 61, 146, 245, 255, 189, 5, 115, 2, 62, 196, 21, 167, 189, 92, 79, 100, 190, 152, 148, 18, 61, 210, 48, 103, 190, 211, 179, 176, 190, 231, 29, 103, 187, 242, 9, 209, 189, 137, 111, 153, 60, 198, 183, 9, 190, 93, 107, 3, 191, 227, 11, 2, 190, 191, 194, 61, 190, 60, 201, 224, 190, 48, 218, 251, 190, 30, 201, 74, 190, 31, 32, 11, 62, 235, 57, 175, 62, 35, 214, 55, 190, 228, 18, 70, 61, 194, 157, 230, 189, 24, 237, 14, 62, 221, 148, 161, 190, 6, 164, 159, 189, 92, 43, 218, 61, 220, 11, 75, 189, 141, 21, 13, 189, 45, 75, 172, 190, 4, 69, 175, 188, 89, 11, 3, 62, 116, 87, 241, 188, 122, 32, 227, 189, 196, 167, 117, 190, 219, 178, 40, 190, 152, 127, 34, 62, 69, 248, 157, 62, 31, 47, 169, 189, 230, 233, 247, 189, 51, 26, 165, 190, 118, 255, 104, 62, 130, 6, 250, 190, 134, 17, 129, 61, 59, 219, 131, 190, 56, 209, 225, 189, 65, 179, 255, 190, 247, 207, 101, 62, 205, 115, 10, 62, 186, 183, 84, 189, 211, 247, 59, 62, 43, 240, 187, 190, 90, 192, 96, 62, 71, 224, 130, 189, 252, 125, 85, 190, 200, 43, 118, 61, 90, 168, 100, 190, 249, 59, 92, 190, 27, 73, 184, 189, 60, 208, 38, 190, 134, 209, 74, 61, 218, 1, 163, 189, 241, 7, 215, 190, 164, 162, 76, 190, 142, 162, 36, 190, 153, 63, 162, 60, 43, 231, 168, 190, 222, 15, 210, 61, 25, 218, 148, 62, 149, 200, 90, 191, 59, 225, 157, 61, 42, 12, 128, 62, 219, 33, 45, 191, 91, 152, 11, 190, 105, 98, 83, 62, 153, 218, 71, 61, 192, 111, 69, 189, 137, 211, 9, 62, 253, 146, 6, 190, 139, 100, 17, 62, 73, 195, 170, 189, 168, 96, 173, 188, 12, 65, 138, 190, 224, 44, 93, 190, 183, 60, 209, 61, 77, 250, 11, 191, 242, 49, 56, 190, 166, 96, 135, 61, 253, 167, 7, 62, 237, 15, 97, 61, 41, 39, 25, 62, 217, 83, 109, 190, 245, 251, 145, 190, 34, 54, 168, 189, 156, 42, 147, 61, 106, 233, 88, 61, 222, 43, 7, 62, 192, 254, 25, 62, 75, 31, 106, 62, 117, 124, 66, 190, 204, 34, 30, 191, 40, 246, 234, 61, 57, 227, 163, 61, 29, 238, 158, 188, 207, 61, 177, 187, 162, 31, 27, 190, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 146, 78, 114, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 98, 147, 73, 62, 185, 127, 106, 190, 201, 215, 1, 62, 61, 119, 112, 189, 109, 106, 240, 190, 77, 43, 174, 190, 120, 77, 79, 61, 188, 33, 170, 189, 232, 249, 65, 61, 242, 210, 7, 61, 30, 127, 70, 190, 136, 26, 243, 190, 123, 101, 253, 188, 1, 86, 115, 190, 23, 54, 102, 190, 11, 176, 8, 190, 153, 89, 36, 62, 93, 73, 14, 190, 226, 187, 169, 61, 230, 81, 200, 190, 182, 3, 250, 61, 228, 210, 153, 190, 43, 20, 74, 62, 104, 82, 89, 63, 86, 21, 152, 188, 91, 226, 9, 191, 147, 181, 138, 62, 100, 62, 9, 191, 11, 23, 220, 62, 85, 150, 216, 61, 34, 185, 240, 190, 24, 214, 158, 189, 255, 215, 58, 61, 160, 93, 148, 62, 255, 108, 216, 190, 54, 125, 127, 190, 39, 229, 187, 188, 41, 190, 15, 62, 113, 110, 69, 191, 226, 180, 146, 190, 153, 25, 247, 190, 99, 251, 93, 62, 187, 11, 239, 190, 71, 230, 102, 62, 219, 16, 203, 61, 49, 135, 47, 189, 131, 106, 158, 190, 25, 14, 132, 189, 159, 102, 189, 61, 32, 103, 1, 191, 193, 216, 94, 62, 16, 36, 135, 190, 13, 120, 165, 61, 190, 68, 140, 61, 97, 192, 181, 189, 85, 89, 87, 191, 244, 56, 179, 61, 247, 0, 128, 62, 250, 15, 113, 191, 171, 213, 148, 62, 140, 162, 100, 191, 221, 43, 178, 189, 56, 108, 27, 62, 93, 39, 191, 190, 162, 228, 122, 62, 83, 242, 136, 190, 245, 99, 8, 60, 92, 98, 35, 61, 184, 0, 206, 60, 41, 125, 48, 190, 230, 101, 78, 61, 10, 72, 172, 62, 221, 3, 96, 62, 81, 75, 33, 62, 116, 35, 47, 188, 146, 121, 108, 61, 41, 187, 110, 62, 180, 87, 237, 61, 173, 232, 124, 62, 136, 23, 237, 61, 173, 78, 149, 61, 127, 210, 179, 189, 253, 145, 56, 190, 104, 146, 5, 62, 117, 222, 40, 191, 172, 1, 158, 61, 244, 212, 223, 189, 183, 212, 112, 189, 7, 54, 14, 62, 135, 228, 161, 62, 139, 118, 33, 62, 36, 190, 85, 61, 236, 49, 193, 190, 62, 6, 238, 61, 207, 5, 84, 62, 186, 211, 76, 189, 184, 38, 167, 189, 1, 151, 218, 188, 71, 178, 235, 62, 101, 182, 87, 62, 10, 166, 252, 186, 254, 17, 172, 189, 208, 43, 32, 189, 39, 111, 35, 188, 103, 170, 175, 62, 167, 217, 140, 62, 103, 93, 142, 62, 65, 124, 254, 188, 16, 83, 61, 190, 33, 87, 143, 190, 142, 220, 180, 190, 241, 91, 221, 62, 77, 237, 180, 188, 111, 219, 189, 62, 189, 193, 1, 191, 99, 230, 112, 190, 76, 151, 177, 61, 105, 50, 56, 189, 59, 113, 251, 190, 188, 36, 96, 63, 82, 19, 104, 189, 137, 221, 231, 190, 101, 144, 86, 62, 225, 121, 46, 190, 8, 29, 231, 62, 88, 105, 39, 62, 69, 48, 160, 190, 118, 87, 198, 190, 14, 240, 0, 191, 125, 96, 42, 62, 35, 192, 82, 191, 119, 226, 32, 62, 93, 172, 50, 61, 18, 9, 11, 190, 32, 95, 223, 190, 9, 23, 232, 61, 122, 129, 125, 190, 133, 126, 43, 62, 47, 91, 205, 190, 205, 194, 109, 59, 239, 173, 53, 189, 219, 92, 167, 190, 163, 207, 141, 190, 18, 190, 179, 186, 82, 72, 24, 61, 255, 244, 13, 191, 85, 106, 195, 62, 216, 215, 24, 190, 217, 245, 110, 62, 144, 209, 135, 62, 255, 218, 156, 62, 129, 145, 140, 190, 104, 214, 175, 189, 205, 30, 201, 61, 19, 116, 179, 61, 135, 38, 45, 62, 138, 174, 97, 190, 102, 37, 68, 190, 197, 65, 151, 190, 126, 235, 208, 189, 29, 114, 175, 189, 230, 60, 25, 61, 26, 129, 121, 62, 146, 135, 56, 62, 87, 98, 47, 189, 183, 206, 16, 62, 54, 214, 16, 189, 49, 97, 116, 61, 124, 169, 156, 61, 75, 173, 172, 189, 205, 52, 176, 62, 9, 251, 149, 190, 140, 250, 42, 62, 45, 161, 210, 189, 130, 215, 42, 61, 231, 85, 46, 63, 227, 74, 174, 60, 28, 144, 218, 61, 230, 58, 226, 191, 247, 10, 251, 189, 18, 123, 19, 190, 194, 215, 207, 62, 127, 132, 167, 190, 59, 40, 79, 63, 41, 114, 115, 187, 10, 212, 180, 189, 81, 42, 108, 62, 135, 254, 62, 188, 156, 185, 219, 62, 20, 73, 242, 61, 132, 95, 162, 190, 44, 164, 165, 189, 87, 171, 151, 190, 113, 216, 116, 62, 209, 8, 222, 190, 27, 143, 227, 61, 163, 4, 85, 61, 182, 113, 128, 62, 207, 207, 217, 190, 168, 187, 62, 62, 25, 194, 94, 190, 138, 138, 65, 189, 102, 199, 222, 190, 13, 34, 70, 190, 77, 97, 98, 61, 139, 207, 129, 61, 5, 162, 0, 61, 158, 97, 171, 61, 200, 241, 174, 188, 182, 70, 93, 191, 88, 159, 6, 62, 213, 126, 0, 189, 250, 203, 167, 60, 167, 250, 195, 62, 162, 239, 94, 62, 103, 193, 34, 62, 251, 183, 179, 189, 108, 135, 167, 61, 247, 75, 130, 62, 15, 200, 63, 191, 21, 12, 196, 61, 99, 238, 215, 61, 141, 43, 50, 190, 123, 219, 174, 189, 164, 107, 213, 190, 1, 83, 127, 62, 45, 168, 171, 190, 184, 179, 23, 190, 240, 39, 5, 62, 79, 92, 110, 62, 10, 146, 149, 191, 132, 213, 227, 59, 122, 70, 121, 190, 212, 176, 86, 190, 63, 141, 113, 190, 154, 68, 132, 189, 16, 225, 186, 188, 87, 233, 74, 62, 53, 184, 4, 190, 48, 6, 165, 62, 96, 170, 226, 61, 195, 118, 28, 191, 123, 149, 73, 62, 218, 122, 89, 61, 162, 58, 14, 62, 150, 89, 67, 189, 166, 157, 147, 61, 83, 99, 20, 190, 211, 249, 159, 189, 213, 128, 145, 62, 96, 255, 210, 190, 152, 90, 161, 62, 101, 39, 3, 190, 199, 18, 96, 62, 163, 214, 170, 61, 238, 61, 107, 191, 91, 32, 131, 190, 139, 4, 81, 60, 61, 251, 114, 62, 2, 124, 182, 190, 52, 140, 227, 61, 134, 111, 132, 62, 25, 139, 14, 62, 96, 7, 151, 62, 115, 51, 32, 62, 53, 20, 24, 190, 106, 122, 35, 62, 171, 93, 200, 62, 59, 170, 91, 190, 106, 120, 17, 62, 93, 65, 110, 190, 223, 127, 4, 62, 126, 35, 235, 189, 69, 106, 40, 62, 28, 206, 21, 191, 195, 68, 88, 189, 99, 176, 86, 190, 116, 82, 63, 62, 234, 49, 206, 190, 177, 144, 217, 62, 206, 112, 47, 62, 199, 115, 99, 190, 205, 85, 166, 62, 201, 101, 74, 190, 27, 160, 194, 62, 247, 181, 247, 189, 59, 47, 92, 189, 252, 112, 154, 189, 38, 1, 180, 189, 111, 137, 79, 61, 84, 153, 52, 191, 78, 133, 157, 61, 96, 58, 151, 61, 97, 105, 60, 62, 121, 123, 24, 190, 9, 206, 146, 62, 195, 75, 23, 190, 248, 246, 51, 190, 87, 119, 153, 190, 218, 252, 102, 62, 157, 171, 130, 62, 104, 132, 135, 62, 230, 57, 70, 189, 246, 188, 168, 61, 37, 13, 157, 189, 103, 119, 74, 191, 221, 57, 42, 189, 241, 51, 24, 62, 239, 239, 180, 189, 243, 107, 54, 190, 186, 250, 174, 189, 135, 118, 58, 191, 164, 91, 65, 188, 193, 179, 203, 61, 7, 37, 20, 190, 119, 149, 200, 189, 137, 93, 77, 190, 101, 218, 124, 62, 164, 220, 6, 59, 93, 161, 23, 62, 131, 188, 26, 62, 94, 130, 105, 189, 177, 49, 128, 190, 225, 183, 70, 190, 15, 144, 36, 63, 35, 178, 78, 190, 177, 95, 97, 62, 24, 87, 55, 189, 223, 188, 11, 190, 4, 106, 245, 61, 64, 249, 122, 190, 60, 0, 140, 61, 197, 89, 17, 62, 186, 191, 105, 62, 239, 99, 101, 62, 49, 119, 94, 191, 208, 51, 148, 61, 86, 96, 101, 190, 232, 112, 134, 62, 248, 155, 156, 62, 203, 76, 25, 191, 113, 110, 186, 190, 22, 74, 158, 61, 61, 229, 122, 63, 50, 114, 158, 61, 170, 181, 2, 191, 82, 113, 47, 62, 149, 183, 228, 61, 12, 162, 230, 62, 97, 214, 44, 62, 100, 197, 69, 190, 111, 216, 95, 190, 140, 240, 185, 190, 105, 142, 240, 61, 119, 213, 8, 191, 205, 40, 245, 62, 82, 75, 110, 62, 228, 102, 87, 61, 222, 251, 18, 191, 152, 10, 149, 190, 54, 199, 143, 190, 194, 67, 227, 62, 107, 183, 28, 191, 19, 245, 30, 190, 247, 80, 66, 190, 158, 29, 234, 189, 39, 154, 225, 189, 128, 208, 135, 62, 77, 83, 222, 61, 117, 144, 94, 191, 51, 208, 242, 62, 114, 71, 168, 190, 84, 236, 155, 62, 207, 178, 148, 62, 8, 42, 139, 62, 141, 136, 134, 189, 118, 65, 52, 62, 159, 83, 108, 62, 208, 241, 57, 189, 220, 148, 45, 62, 55, 182, 31, 61, 97, 81, 243, 189, 118, 142, 90, 190, 153, 228, 137, 190, 89, 200, 196, 61, 178, 243, 57, 61, 186, 52, 48, 190, 172, 69, 24, 190, 82, 15, 15, 189, 56, 63, 250, 186, 43, 254, 161, 61, 157, 128, 62, 62, 197, 6, 29, 190, 18, 134, 157, 189, 87, 125, 8, 61, 168, 179, 5, 190, 51, 30, 44, 190, 161, 220, 134, 189, 96, 93, 177, 189, 219, 96, 209, 62, 28, 165, 22, 190, 228, 88, 119, 190, 164, 48, 203, 189, 115, 167, 138, 190, 219, 62, 66, 190, 137, 137, 209, 61, 157, 84, 19, 189, 102, 215, 67, 61, 192, 210, 162, 60, 212, 121, 100, 62, 8, 62, 165, 189, 226, 50, 102, 61, 206, 209, 154, 189, 163, 31, 255, 189, 44, 175, 94, 190, 147, 41, 243, 190, 44, 77, 39, 191, 152, 200, 203, 189, 128, 139, 5, 62, 24, 125, 10, 62, 201, 80, 153, 190, 89, 66, 77, 62, 122, 15, 125, 188, 125, 252, 63, 62, 181, 34, 76, 61, 22, 62, 161, 62, 201, 157, 145, 62, 4, 137, 144, 62, 20, 216, 146, 189, 198, 81, 123, 190, 217, 237, 244, 189, 238, 211, 162, 61, 154, 35, 5, 190, 107, 83, 152, 62, 30, 48, 229, 190, 29, 119, 131, 191, 123, 139, 116, 189, 195, 204, 3, 63, 73, 228, 31, 189, 162, 101, 60, 189, 3, 145, 44, 190, 46, 193, 77, 190, 147, 151, 182, 190, 114, 112, 14, 189, 153, 142, 119, 188, 79, 148, 10, 189, 177, 236, 129, 188, 202, 174, 8, 190, 190, 28, 212, 189, 34, 153, 7, 62, 129, 229, 118, 191, 95, 224, 145, 61, 5, 106, 8, 62, 12, 154, 195, 61, 150, 36, 4, 62, 52, 118, 195, 62, 43, 31, 27, 190, 147, 97, 228, 188, 58, 162, 159, 190, 171, 165, 224, 189, 109, 31, 105, 60, 110, 91, 183, 188, 145, 115, 140, 61, 189, 204, 176, 60, 13, 150, 44, 188, 221, 14, 164, 190, 106, 66, 255, 186, 17, 161, 22, 62, 155, 23, 13, 62, 110, 8, 242, 188, 139, 122, 68, 190, 90, 208, 46, 61, 226, 12, 26, 189, 78, 165, 244, 190, 127, 10, 164, 62, 185, 38, 94, 62, 62, 230, 79, 63, 113, 74, 85, 191, 219, 49, 48, 62, 49, 162, 64, 190, 206, 26, 3, 190, 249, 89, 84, 61, 56, 17, 13, 191, 137, 26, 233, 61, 113, 10, 32, 191, 171, 54, 62, 190, 211, 24, 29, 61, 51, 153, 142, 62, 128, 95, 20, 191, 188, 20, 99, 190, 103, 130, 143, 190, 28, 65, 41, 190, 0, 47, 53, 190, 150, 188, 4, 190, 70, 55, 22, 190, 13, 120, 102, 189, 228, 236, 7, 190, 227, 224, 142, 189, 188, 230, 48, 62, 226, 223, 112, 190, 28, 23, 30, 190, 204, 81, 127, 62, 37, 215, 66, 60, 12, 120, 144, 190, 255, 17, 37, 61, 14, 1, 218, 189, 121, 16, 25, 191, 252, 140, 252, 189, 134, 199, 12, 63, 195, 89, 206, 61, 168, 41, 130, 190, 67, 241, 9, 190, 210, 219, 69, 190, 54, 123, 63, 62, 150, 71, 196, 191, 203, 31, 154, 62, 96, 251, 208, 61, 135, 41, 142, 62, 228, 238, 217, 190, 145, 8, 168, 62, 241, 57, 235, 190, 40, 243, 209, 189, 100, 173, 32, 191, 226, 155, 74, 190, 235, 123, 136, 62, 151, 31, 144, 62, 235, 100, 76, 61, 32, 1, 8, 62, 155, 144, 5, 190, 120, 245, 245, 190, 222, 102, 94, 62, 125, 118, 150, 62, 255, 195, 168, 189, 54, 102, 159, 189, 236, 82, 198, 189, 69, 246, 76, 190, 108, 54, 99, 189, 64, 122, 144, 62, 143, 57, 138, 59, 247, 32, 182, 62, 253, 56, 129, 190, 174, 253, 7, 62, 112, 197, 30, 61, 129, 33, 102, 62, 144, 113, 169, 189, 96, 158, 199, 61, 192, 156, 93, 183, 240, 40, 51, 189, 7, 0, 102, 189, 109, 51, 4, 62, 72, 96, 161, 62, 164, 60, 41, 189, 72, 205, 35, 62, 210, 154, 244, 61, 198, 248, 43, 62, 82, 149, 11, 60, 95, 174, 2, 190, 142, 157, 61, 189, 11, 107, 90, 59, 19, 42, 68, 62, 173, 97, 106, 189, 46, 251, 194, 61, 239, 251, 138, 189, 36, 2, 156, 187, 246, 228, 213, 61, 220, 94, 66, 190, 56, 248, 79, 189, 15, 126, 35, 191, 224, 184, 32, 190, 59, 244, 20, 63, 52, 155, 53, 191, 241, 175, 195, 62, 106, 180, 107, 191, 198, 106, 207, 62, 219, 156, 29, 63, 94, 12, 20, 191, 79, 210, 4, 191, 43, 134, 25, 191, 202, 154, 74, 189, 177, 104, 178, 190, 185, 185, 26, 190, 131, 115, 142, 62, 113, 95, 155, 62, 189, 31, 39, 190, 23, 99, 191, 190, 31, 74, 95, 190, 23, 244, 38, 61, 49, 241, 140, 62, 128, 115, 52, 62, 233, 22, 64, 62, 96, 102, 179, 61, 188, 247, 194, 188, 51, 233, 30, 61, 76, 124, 177, 61, 252, 123, 29, 191, 251, 248, 120, 189, 163, 126, 156, 191, 106, 232, 36, 62, 127, 109, 157, 190, 16, 228, 162, 191, 95, 198, 136, 61, 26, 162, 135, 62, 245, 87, 172, 191, 118, 233, 106, 62, 152, 173, 233, 190, 225, 128, 41, 62, 76, 117, 102, 62, 51, 101, 110, 191, 217, 230, 194, 190, 117, 36, 231, 188, 233, 179, 126, 62, 67, 123, 150, 190, 75, 126, 206, 61, 170, 71, 85, 61, 129, 136, 150, 62, 244, 141, 155, 62, 30, 162, 100, 61, 151, 45, 63, 190, 153, 149, 175, 188, 96, 181, 74, 61, 172, 89, 160, 187, 187, 45, 21, 62, 198, 165, 139, 190, 30, 110, 228, 62, 59, 89, 37, 189, 158, 245, 219, 61, 9, 0, 53, 191, 170, 195, 93, 61, 39, 94, 156, 190, 151, 249, 59, 190, 42, 142, 188, 190, 198, 62, 234, 189, 96, 38, 249, 61, 183, 82, 63, 191, 119, 171, 108, 190, 45, 59, 91, 62, 224, 26, 58, 63, 195, 72, 21, 191, 47, 63, 84, 62, 239, 130, 39, 190, 153, 194, 144, 190, 85, 98, 181, 62, 198, 66, 251, 190, 53, 169, 56, 62, 231, 194, 80, 189, 220, 230, 148, 61, 216, 239, 139, 62, 235, 112, 100, 61, 138, 171, 34, 191, 122, 47, 85, 190, 164, 109, 220, 190, 167, 26, 170, 61, 48, 38, 54, 60, 131, 223, 186, 60, 253, 220, 43, 62, 83, 78, 235, 190, 152, 61, 145, 61, 29, 187, 54, 190, 163, 231, 243, 188, 14, 32, 236, 61, 238, 63, 161, 190, 239, 35, 164, 60, 209, 41, 22, 62, 85, 150, 4, 192, 233, 161, 7, 190, 88, 107, 126, 62, 209, 24, 203, 191, 139, 108, 228, 62, 207, 152, 133, 189, 233, 103, 28, 188, 161, 192, 182, 188, 133, 72, 223, 190, 181, 62, 150, 190, 180, 133, 58, 62, 0, 240, 220, 62, 63, 222, 154, 190, 90, 161, 53, 189, 46, 227, 235, 61, 144, 237, 218, 62, 19, 20, 45, 62, 234, 56, 173, 61, 75, 73, 59, 190, 120, 99, 152, 62, 227, 11, 146, 189, 73, 81, 5, 191, 24, 201, 184, 190, 77, 212, 254, 60, 189, 230, 119, 62, 13, 233, 132, 61, 244, 58, 66, 62, 154, 141, 32, 191, 243, 93, 133, 60, 69, 0, 202, 190, 165, 88, 123, 187, 209, 127, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 179, 201, 61, 15, 122, 87, 188, 240, 183, 221, 189, 4, 139, 41, 61, 115, 40, 130, 62, 28, 186, 46, 190, 126, 199, 219, 61, 33, 154, 101, 189, 114, 86, 101, 190, 23, 3, 212, 60, 128, 33, 18, 191, 144, 180, 122, 62, 194, 147, 218, 61, 25, 48, 210, 189, 94, 240, 9, 62, 49, 214, 122, 60, 178, 72, 229, 60, 28, 166, 144, 61, 188, 224, 219, 59, 236, 204, 114, 62, 7, 19, 255, 188, 56, 37, 0, 190, 66, 23, 166, 61, 172, 171, 150, 61, 59, 142, 249, 61, 215, 53, 140, 60, 210, 88, 11, 62, 173, 56, 227, 61, 64, 189, 193, 61, 218, 205, 20, 62, 234, 73, 45, 62, 246, 162, 61, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 92, 243, 190, 197, 202, 241, 190, 116, 217, 137, 63, 251, 212, 143, 62, 15, 223, 246, 61, 137, 137, 132, 60, 192, 127, 150, 61, 70, 8, 189, 62, 105, 165, 211, 62, 155, 25, 138, 189, 108, 126, 70, 63, 67, 184, 212, 190, 68, 247, 21, 62, 80, 67, 194, 190, 172, 161, 3, 191, 104, 199, 109, 191, 150, 61, 192, 190, 171, 210, 209, 190, 228, 36, 201, 62, 43, 243, 97, 190, 63, 66, 226, 62, 214, 70, 71, 191, 115, 141, 89, 188, 202, 171, 251, 62, 214, 245, 157, 189, 63, 212, 179, 190, 209, 247, 2, 191, 131, 87, 121, 61, 14, 149, 103, 63, 58, 154, 48, 63, 183, 147, 166, 190, 211, 46, 28, 63, 42, 244, 233, 187, 118, 158, 177, 62, 195, 118, 78, 63, 255, 54, 54, 62, 46, 195, 28, 191, 37, 168, 238, 60, 207, 107, 179, 190, 106, 28, 230, 187, 221, 219, 165, 60, 40, 236, 54, 190, 233, 143, 79, 62, 81, 110, 8, 63, 113, 197, 11, 190, 233, 52, 179, 62, 225, 72, 153, 61, 144, 119, 64, 62, 117, 36, 133, 190, 239, 102, 195, 190, 214, 57, 9, 190, 161, 68, 79, 190, 98, 109, 252, 61, 59, 227, 135, 62, 55, 251, 129, 190, 54, 10, 21, 190, 223, 197, 178, 190, 31, 48, 51, 61, 184, 170, 188, 189, 168, 15, 104, 190, 229, 205, 252, 62, 91, 218, 6, 190, 81, 65, 60, 62, 31, 175, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 40, 103, 188, 82, 248, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 99, 87, 63, 55, 87, 176, 191, 128, 220, 45, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 135, 9, 192, 66, 219, 181, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}