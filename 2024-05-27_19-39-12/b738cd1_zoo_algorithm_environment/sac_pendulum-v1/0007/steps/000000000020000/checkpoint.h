// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 78, 251, 190, 75, 179, 209, 191, 117, 236, 158, 190, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 65, 25, 131, 62, 255, 181, 171, 191, 130, 191, 63, 190, 135, 21, 218, 190, 46, 211, 187, 191, 116, 62, 195, 190, 93, 118, 166, 190, 19, 64, 132, 191, 210, 145, 254, 62, 116, 255, 129, 188, 211, 49, 1, 63, 162, 43, 186, 190, 14, 189, 235, 190, 254, 166, 29, 190, 135, 167, 88, 190, 12, 116, 191, 61, 248, 134, 59, 61, 161, 43, 23, 191, 208, 94, 189, 190, 214, 112, 33, 62, 219, 108, 200, 190, 108, 185, 57, 62, 160, 52, 195, 63, 86, 31, 255, 62, 94, 71, 241, 62, 184, 139, 137, 62, 236, 249, 30, 191, 224, 234, 178, 61, 176, 164, 238, 191, 168, 63, 217, 190, 216, 177, 52, 62, 29, 106, 103, 191, 148, 126, 190, 62, 77, 242, 150, 190, 255, 11, 73, 63, 176, 75, 84, 190, 214, 69, 4, 191, 110, 124, 149, 190, 66, 195, 2, 60, 78, 66, 33, 191, 125, 28, 5, 191, 187, 40, 34, 63, 79, 223, 144, 62, 45, 161, 25, 190, 234, 33, 100, 62, 44, 71, 156, 62, 175, 52, 173, 191, 249, 237, 8, 191, 114, 95, 201, 189, 32, 95, 242, 190, 233, 162, 108, 62, 39, 92, 166, 62, 217, 204, 168, 191, 230, 59, 128, 190, 152, 212, 128, 191, 124, 62, 238, 190, 193, 26, 138, 188, 123, 136, 79, 191, 196, 54, 93, 63, 147, 138, 102, 61, 178, 66, 25, 191, 63, 198, 6, 63, 138, 43, 254, 60, 9, 9, 240, 190, 108, 186, 21, 63, 60, 169, 47, 62, 89, 186, 6, 63, 102, 127, 128, 191, 158, 153, 83, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 182, 237, 47, 63, 68, 65, 226, 190, 228, 42, 88, 190, 177, 3, 101, 63, 94, 192, 142, 63, 226, 196, 15, 63, 48, 107, 224, 190, 17, 158, 123, 63, 120, 186, 20, 190, 57, 226, 232, 189, 33, 192, 110, 191, 134, 43, 46, 191, 181, 237, 17, 190, 174, 241, 154, 191, 94, 188, 250, 188, 126, 112, 127, 62, 193, 219, 178, 62, 90, 123, 14, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 188, 59, 190, 9, 231, 173, 190, 188, 183, 38, 62, 23, 41, 240, 189, 39, 78, 117, 190, 136, 202, 23, 190, 147, 88, 124, 62, 29, 27, 143, 189, 253, 35, 117, 191, 30, 200, 200, 190, 233, 101, 243, 62, 25, 117, 86, 189, 163, 215, 59, 190, 17, 184, 103, 62, 82, 103, 3, 63, 133, 50, 224, 190, 70, 127, 29, 63, 56, 139, 250, 188, 9, 162, 243, 190, 196, 134, 60, 189, 224, 250, 37, 62, 112, 35, 212, 62, 251, 19, 15, 63, 59, 127, 135, 62, 50, 129, 141, 189, 250, 74, 164, 190, 224, 138, 71, 191, 70, 254, 134, 190, 25, 116, 214, 188, 133, 194, 16, 190, 99, 109, 209, 61, 59, 98, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 50, 181, 61, 149, 125, 21, 190, 201, 182, 245, 59, 121, 118, 253, 61, 208, 137, 99, 191, 123, 230, 31, 190, 179, 45, 146, 188, 111, 13, 248, 61, 33, 253, 78, 190, 198, 242, 202, 62, 84, 54, 182, 61, 232, 65, 115, 61, 12, 50, 215, 190, 131, 112, 40, 61, 36, 226, 198, 61, 145, 80, 81, 191, 106, 208, 190, 191, 123, 109, 212, 189, 166, 113, 219, 190, 236, 76, 109, 190, 36, 151, 198, 62, 31, 145, 24, 62, 45, 140, 66, 62, 40, 202, 9, 191, 109, 200, 27, 62, 247, 99, 60, 60, 207, 67, 12, 191, 111, 28, 16, 191, 65, 81, 205, 189, 231, 94, 92, 62, 207, 86, 114, 62, 152, 201, 33, 62, 58, 193, 95, 190, 33, 146, 54, 61, 133, 61, 9, 191, 251, 142, 14, 191, 132, 62, 126, 61, 50, 204, 223, 61, 34, 223, 195, 61, 124, 50, 5, 62, 177, 199, 52, 190, 53, 49, 40, 190, 190, 125, 110, 62, 97, 233, 236, 190, 148, 37, 237, 61, 158, 80, 156, 62, 91, 189, 217, 190, 134, 6, 159, 188, 179, 185, 6, 190, 22, 101, 169, 190, 52, 171, 65, 62, 96, 62, 48, 191, 167, 114, 127, 190, 3, 65, 167, 189, 181, 37, 94, 190, 166, 171, 75, 61, 11, 120, 33, 190, 255, 112, 165, 189, 123, 183, 183, 190, 130, 171, 135, 62, 150, 153, 6, 62, 37, 88, 9, 190, 155, 58, 8, 189, 220, 135, 241, 61, 46, 181, 198, 191, 5, 150, 62, 61, 183, 151, 194, 62, 42, 60, 208, 191, 173, 54, 131, 62, 240, 197, 227, 190, 241, 53, 178, 189, 120, 88, 237, 61, 240, 221, 203, 190, 207, 30, 231, 188, 112, 46, 134, 190, 246, 250, 160, 62, 188, 53, 159, 190, 254, 114, 144, 190, 17, 183, 15, 61, 186, 90, 182, 62, 41, 252, 40, 190, 77, 197, 130, 62, 102, 19, 0, 189, 106, 35, 46, 63, 183, 125, 192, 62, 109, 214, 225, 61, 122, 127, 170, 61, 110, 173, 51, 62, 18, 69, 33, 63, 9, 95, 6, 190, 227, 56, 32, 191, 47, 140, 219, 190, 204, 21, 23, 191, 178, 82, 156, 191, 225, 251, 247, 60, 141, 96, 88, 190, 218, 250, 145, 188, 68, 42, 69, 189, 175, 88, 30, 62, 55, 123, 107, 190, 71, 72, 138, 190, 125, 194, 143, 62, 188, 125, 49, 62, 171, 60, 147, 62, 48, 33, 30, 63, 118, 226, 29, 191, 244, 138, 92, 62, 93, 204, 237, 188, 20, 62, 242, 59, 164, 58, 119, 61, 85, 180, 160, 61, 126, 130, 162, 190, 82, 110, 31, 61, 0, 252, 229, 61, 100, 62, 79, 189, 71, 56, 157, 188, 74, 2, 159, 61, 7, 211, 184, 60, 78, 11, 61, 190, 11, 199, 36, 190, 85, 49, 95, 189, 250, 197, 8, 62, 49, 80, 170, 62, 166, 167, 232, 190, 180, 75, 188, 62, 205, 23, 89, 62, 52, 134, 248, 61, 52, 180, 94, 62, 27, 16, 165, 62, 229, 95, 202, 61, 13, 189, 76, 62, 248, 125, 218, 189, 193, 38, 133, 190, 186, 130, 107, 62, 198, 42, 16, 62, 6, 145, 92, 61, 63, 66, 76, 190, 244, 229, 214, 191, 204, 252, 137, 62, 71, 242, 78, 190, 239, 190, 182, 61, 52, 205, 248, 187, 68, 98, 232, 189, 228, 148, 41, 191, 192, 178, 128, 62, 130, 93, 12, 62, 122, 68, 27, 191, 112, 113, 52, 62, 235, 62, 112, 189, 230, 14, 41, 191, 233, 119, 183, 189, 168, 61, 20, 190, 167, 98, 186, 62, 47, 226, 2, 190, 188, 64, 40, 190, 94, 205, 222, 61, 9, 227, 216, 190, 122, 172, 35, 62, 81, 190, 52, 189, 122, 26, 110, 190, 55, 20, 227, 61, 57, 181, 226, 61, 23, 93, 134, 61, 182, 75, 40, 190, 66, 34, 69, 188, 143, 104, 77, 189, 143, 165, 198, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 126, 116, 160, 61, 89, 143, 167, 61, 37, 118, 145, 60, 171, 84, 139, 60, 249, 129, 5, 62, 249, 204, 45, 190, 242, 12, 238, 189, 18, 68, 0, 189, 205, 22, 96, 61, 196, 205, 15, 61, 61, 106, 47, 61, 139, 229, 3, 190, 213, 155, 153, 189, 239, 127, 241, 61, 118, 58, 10, 62, 99, 239, 13, 59, 61, 14, 137, 188, 110, 38, 21, 62, 55, 105, 35, 60, 62, 158, 53, 190, 48, 195, 215, 189, 159, 244, 96, 191, 234, 23, 238, 189, 128, 62, 183, 61, 225, 71, 57, 191, 198, 160, 178, 62, 30, 20, 65, 191, 69, 46, 73, 189, 100, 233, 254, 190, 152, 148, 30, 191, 66, 14, 97, 61, 226, 14, 183, 60, 226, 56, 150, 190, 87, 129, 118, 190, 62, 42, 149, 190, 100, 183, 244, 189, 39, 160, 153, 61, 119, 101, 198, 62, 43, 91, 18, 62, 190, 84, 99, 61, 63, 222, 132, 60, 73, 78, 9, 190, 99, 238, 137, 189, 230, 28, 93, 60, 246, 136, 7, 190, 239, 15, 219, 61, 196, 21, 167, 189, 145, 190, 104, 190, 123, 248, 7, 61, 239, 9, 130, 190, 209, 36, 191, 190, 32, 177, 13, 188, 157, 118, 168, 189, 137, 111, 153, 60, 198, 183, 9, 190, 141, 251, 78, 191, 227, 11, 2, 190, 55, 31, 55, 190, 61, 102, 32, 191, 64, 78, 213, 190, 128, 253, 136, 190, 31, 32, 11, 62, 111, 203, 230, 62, 26, 140, 138, 190, 228, 18, 70, 61, 194, 106, 0, 190, 129, 62, 7, 62, 139, 207, 179, 190, 251, 56, 125, 189, 124, 75, 217, 61, 57, 12, 75, 189, 158, 66, 200, 188, 87, 67, 229, 190, 168, 53, 10, 189, 112, 174, 62, 62, 218, 190, 171, 60, 39, 88, 76, 189, 28, 9, 34, 191, 219, 178, 40, 190, 152, 127, 34, 62, 25, 248, 202, 62, 101, 90, 20, 190, 230, 233, 247, 189, 196, 78, 226, 190, 169, 28, 142, 62, 183, 189, 11, 191, 134, 17, 129, 61, 123, 0, 123, 190, 166, 33, 217, 189, 65, 179, 255, 190, 90, 8, 104, 62, 81, 208, 5, 62, 221, 41, 89, 189, 164, 158, 50, 62, 122, 95, 202, 190, 34, 52, 99, 62, 75, 105, 137, 189, 252, 125, 85, 190, 212, 97, 111, 61, 119, 152, 112, 190, 249, 59, 92, 190, 2, 206, 189, 189, 124, 207, 35, 190, 134, 209, 74, 61, 128, 147, 146, 189, 177, 62, 244, 190, 190, 96, 96, 190, 77, 143, 52, 190, 80, 26, 184, 59, 121, 20, 157, 190, 222, 15, 210, 61, 33, 202, 153, 62, 17, 158, 102, 191, 5, 99, 136, 61, 6, 221, 129, 62, 76, 228, 48, 191, 91, 152, 11, 190, 96, 194, 92, 62, 153, 218, 71, 61, 28, 63, 135, 189, 111, 89, 4, 62, 252, 70, 216, 189, 222, 180, 41, 62, 84, 143, 169, 189, 111, 98, 33, 188, 105, 69, 137, 190, 218, 140, 132, 190, 43, 169, 147, 61, 43, 184, 34, 191, 230, 32, 173, 189, 192, 40, 167, 61, 232, 28, 42, 62, 206, 140, 130, 61, 131, 250, 19, 62, 224, 250, 141, 190, 142, 36, 170, 190, 174, 63, 226, 189, 83, 222, 175, 61, 177, 44, 141, 61, 246, 200, 20, 62, 109, 124, 24, 62, 254, 22, 96, 62, 117, 124, 66, 190, 40, 14, 9, 191, 2, 159, 224, 61, 207, 135, 215, 61, 226, 151, 231, 187, 4, 106, 214, 59, 133, 230, 171, 189, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 146, 78, 114, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 98, 147, 73, 62, 185, 127, 106, 190, 201, 215, 1, 62, 61, 119, 112, 189, 109, 106, 240, 190, 77, 43, 174, 190, 120, 77, 79, 61, 188, 33, 170, 189, 232, 249, 65, 61, 242, 210, 7, 61, 30, 127, 70, 190, 136, 26, 243, 190, 123, 101, 253, 188, 1, 86, 115, 190, 23, 54, 102, 190, 11, 176, 8, 190, 153, 89, 36, 62, 93, 73, 14, 190, 226, 187, 169, 61, 230, 81, 200, 190, 182, 3, 250, 61, 228, 210, 153, 190, 43, 20, 74, 62, 53, 102, 87, 63, 86, 21, 152, 188, 35, 242, 13, 191, 142, 58, 138, 62, 42, 92, 25, 191, 187, 182, 218, 62, 248, 213, 203, 61, 63, 31, 249, 190, 158, 74, 3, 189, 174, 128, 224, 60, 93, 196, 147, 62, 218, 63, 215, 190, 84, 214, 23, 190, 9, 59, 144, 188, 15, 239, 190, 61, 81, 107, 85, 191, 225, 254, 132, 190, 155, 236, 5, 191, 99, 251, 93, 62, 190, 116, 1, 191, 73, 223, 38, 62, 128, 6, 243, 61, 190, 190, 52, 189, 230, 148, 176, 190, 178, 123, 193, 60, 159, 102, 189, 61, 167, 135, 5, 191, 219, 177, 135, 62, 72, 67, 82, 190, 151, 110, 142, 61, 143, 193, 156, 58, 59, 155, 30, 190, 135, 8, 91, 191, 244, 56, 179, 61, 92, 208, 130, 62, 152, 110, 113, 191, 113, 190, 151, 62, 168, 19, 125, 191, 202, 42, 59, 189, 185, 62, 46, 62, 93, 39, 191, 190, 63, 55, 141, 62, 225, 138, 133, 190, 97, 64, 222, 60, 231, 246, 106, 61, 202, 173, 249, 60, 155, 73, 48, 190, 14, 251, 79, 61, 170, 88, 171, 62, 81, 220, 105, 62, 226, 10, 45, 62, 168, 211, 137, 187, 246, 164, 65, 61, 29, 227, 115, 62, 53, 226, 249, 61, 87, 136, 131, 62, 184, 31, 231, 61, 173, 78, 149, 61, 22, 24, 155, 189, 107, 234, 46, 190, 253, 3, 198, 61, 113, 80, 49, 191, 67, 82, 174, 61, 177, 69, 193, 189, 169, 253, 211, 188, 7, 54, 14, 62, 244, 180, 143, 62, 52, 89, 69, 62, 117, 175, 18, 189, 31, 32, 194, 190, 59, 80, 241, 61, 189, 121, 95, 62, 209, 74, 95, 189, 135, 164, 196, 189, 113, 91, 128, 189, 72, 219, 230, 62, 203, 191, 242, 61, 40, 16, 129, 187, 254, 139, 22, 190, 168, 19, 4, 190, 244, 41, 69, 189, 236, 40, 165, 62, 206, 231, 86, 62, 102, 239, 125, 62, 115, 73, 246, 189, 90, 69, 65, 190, 33, 205, 161, 190, 7, 85, 250, 190, 203, 34, 204, 62, 77, 237, 180, 188, 15, 48, 184, 62, 40, 201, 11, 191, 72, 232, 106, 190, 73, 235, 248, 61, 232, 255, 147, 189, 43, 213, 15, 191, 182, 100, 92, 63, 82, 19, 104, 189, 125, 44, 232, 190, 33, 73, 43, 62, 40, 84, 59, 190, 228, 41, 234, 62, 50, 70, 38, 62, 40, 228, 154, 190, 186, 52, 194, 190, 45, 134, 16, 191, 160, 130, 29, 62, 247, 101, 89, 191, 165, 120, 31, 62, 42, 64, 184, 60, 93, 237, 82, 190, 109, 89, 217, 190, 0, 8, 245, 61, 248, 114, 133, 190, 82, 48, 45, 62, 174, 219, 207, 190, 231, 112, 1, 189, 91, 46, 234, 189, 222, 44, 205, 190, 244, 118, 213, 190, 18, 216, 131, 59, 82, 72, 24, 61, 214, 155, 221, 190, 166, 79, 199, 62, 7, 233, 32, 190, 92, 31, 120, 62, 222, 51, 133, 62, 217, 52, 178, 62, 94, 23, 160, 190, 104, 214, 175, 189, 66, 135, 13, 62, 195, 194, 154, 61, 151, 30, 5, 62, 113, 137, 120, 190, 1, 112, 130, 190, 192, 45, 150, 190, 204, 109, 93, 190, 5, 142, 166, 189, 132, 8, 190, 61, 37, 20, 146, 62, 58, 188, 46, 62, 105, 124, 151, 189, 131, 69, 122, 61, 74, 85, 217, 189, 146, 168, 89, 61, 81, 186, 18, 62, 0, 113, 220, 189, 62, 178, 206, 62, 228, 189, 237, 190, 154, 206, 169, 61, 3, 2, 118, 190, 26, 126, 75, 189, 3, 22, 64, 63, 227, 74, 174, 60, 70, 9, 22, 62, 57, 11, 241, 191, 75, 132, 44, 190, 201, 4, 232, 189, 161, 18, 204, 62, 0, 36, 173, 190, 214, 202, 83, 63, 41, 114, 115, 187, 67, 130, 201, 189, 219, 99, 116, 62, 51, 89, 13, 189, 136, 120, 233, 62, 193, 212, 240, 61, 207, 219, 151, 190, 22, 24, 150, 189, 76, 1, 165, 190, 151, 97, 102, 62, 236, 15, 229, 190, 8, 52, 188, 61, 163, 154, 129, 61, 103, 151, 92, 62, 72, 149, 225, 190, 59, 199, 55, 62, 229, 49, 108, 190, 50, 111, 143, 189, 246, 36, 229, 190, 245, 48, 107, 190, 148, 178, 44, 61, 214, 118, 38, 61, 73, 236, 166, 59, 167, 97, 160, 61, 200, 241, 174, 188, 91, 94, 83, 191, 71, 41, 0, 62, 50, 209, 138, 187, 217, 252, 50, 61, 188, 33, 185, 62, 247, 46, 90, 62, 69, 128, 85, 62, 251, 183, 179, 189, 216, 152, 155, 61, 99, 107, 140, 62, 64, 122, 56, 191, 92, 190, 214, 61, 100, 231, 217, 61, 201, 33, 46, 190, 194, 216, 170, 189, 120, 139, 224, 190, 207, 204, 107, 62, 180, 149, 181, 190, 13, 142, 237, 189, 5, 244, 2, 62, 99, 51, 89, 62, 59, 22, 161, 191, 17, 29, 15, 60, 118, 4, 137, 190, 212, 176, 86, 190, 223, 63, 125, 190, 192, 18, 99, 189, 254, 2, 49, 189, 143, 133, 55, 62, 241, 37, 56, 190, 55, 76, 163, 62, 96, 170, 226, 61, 77, 64, 27, 191, 108, 115, 81, 62, 15, 204, 125, 61, 220, 24, 24, 62, 187, 169, 13, 189, 53, 5, 24, 62, 197, 148, 39, 190, 211, 249, 159, 189, 123, 170, 144, 62, 228, 233, 226, 190, 243, 108, 187, 62, 58, 209, 150, 189, 181, 198, 132, 62, 173, 0, 228, 61, 60, 151, 103, 191, 233, 129, 86, 190, 17, 209, 4, 61, 111, 165, 84, 62, 73, 46, 154, 190, 139, 48, 57, 62, 84, 242, 167, 62, 151, 159, 62, 62, 164, 110, 153, 62, 56, 70, 33, 62, 113, 198, 209, 189, 56, 240, 27, 62, 131, 233, 249, 62, 65, 225, 17, 190, 32, 117, 131, 62, 162, 112, 45, 190, 162, 1, 0, 62, 126, 35, 235, 189, 199, 199, 16, 62, 179, 32, 20, 191, 169, 39, 215, 60, 16, 14, 114, 190, 254, 84, 82, 62, 10, 25, 194, 190, 74, 1, 230, 62, 206, 112, 47, 62, 250, 118, 107, 190, 66, 244, 170, 62, 157, 202, 76, 190, 166, 118, 211, 62, 32, 120, 239, 189, 93, 11, 188, 188, 195, 81, 100, 189, 27, 162, 39, 190, 128, 203, 22, 61, 120, 220, 58, 191, 74, 22, 176, 61, 248, 71, 189, 61, 140, 224, 91, 62, 241, 170, 13, 190, 116, 131, 146, 62, 216, 9, 41, 190, 40, 136, 53, 190, 147, 12, 158, 190, 163, 68, 143, 62, 187, 146, 135, 62, 132, 195, 139, 62, 135, 190, 113, 189, 136, 39, 163, 61, 37, 13, 157, 189, 103, 197, 42, 191, 7, 24, 79, 189, 195, 131, 54, 62, 168, 179, 101, 189, 118, 94, 57, 190, 96, 183, 143, 189, 86, 232, 53, 191, 164, 91, 65, 188, 86, 99, 233, 61, 4, 163, 209, 189, 196, 122, 254, 189, 144, 0, 143, 190, 24, 79, 123, 62, 181, 127, 72, 189, 77, 104, 2, 62, 61, 207, 70, 62, 249, 77, 7, 190, 181, 9, 137, 190, 114, 28, 95, 190, 12, 90, 24, 63, 248, 191, 131, 190, 0, 106, 69, 62, 152, 221, 133, 189, 52, 193, 50, 190, 190, 48, 213, 61, 1, 16, 139, 190, 76, 51, 195, 60, 207, 223, 255, 61, 180, 206, 81, 62, 115, 187, 94, 62, 19, 224, 119, 191, 208, 51, 148, 61, 39, 111, 124, 190, 150, 182, 154, 62, 19, 75, 120, 62, 18, 100, 30, 191, 60, 158, 210, 190, 52, 157, 171, 61, 198, 116, 133, 63, 50, 114, 158, 61, 179, 194, 12, 191, 227, 102, 95, 62, 196, 226, 240, 61, 163, 254, 236, 62, 1, 106, 73, 62, 187, 135, 45, 190, 253, 208, 42, 190, 176, 193, 163, 190, 65, 51, 248, 61, 174, 63, 251, 190, 132, 251, 245, 62, 54, 136, 108, 62, 118, 8, 41, 61, 72, 93, 15, 191, 105, 54, 153, 190, 235, 134, 132, 190, 182, 127, 233, 62, 169, 216, 37, 191, 153, 113, 22, 190, 58, 229, 93, 190, 67, 182, 23, 190, 43, 215, 216, 189, 193, 98, 119, 62, 77, 83, 222, 61, 94, 10, 84, 191, 213, 8, 255, 62, 126, 177, 153, 190, 165, 105, 171, 62, 236, 67, 138, 62, 36, 224, 144, 62, 14, 29, 6, 189, 118, 65, 52, 62, 113, 167, 85, 62, 62, 14, 2, 58, 89, 54, 53, 62, 242, 144, 132, 60, 38, 128, 229, 189, 65, 52, 135, 190, 153, 228, 137, 190, 34, 234, 190, 61, 81, 164, 247, 188, 250, 220, 79, 190, 182, 250, 240, 189, 54, 193, 130, 189, 234, 46, 128, 58, 116, 203, 157, 61, 62, 236, 50, 62, 20, 245, 87, 190, 68, 239, 127, 189, 61, 159, 77, 187, 166, 217, 13, 190, 62, 162, 91, 190, 254, 1, 206, 189, 121, 155, 207, 189, 157, 42, 201, 62, 28, 165, 22, 190, 129, 114, 87, 190, 51, 166, 196, 189, 70, 161, 141, 190, 35, 26, 46, 190, 44, 126, 1, 62, 135, 55, 25, 187, 234, 190, 107, 61, 192, 210, 162, 60, 167, 171, 104, 62, 102, 234, 190, 189, 53, 88, 142, 61, 54, 19, 243, 189, 154, 11, 191, 189, 220, 93, 137, 190, 134, 247, 209, 190, 77, 102, 49, 191, 206, 59, 178, 189, 57, 215, 241, 61, 234, 19, 31, 62, 46, 206, 151, 190, 29, 94, 110, 62, 21, 14, 53, 188, 99, 40, 67, 62, 85, 225, 61, 61, 137, 213, 165, 62, 11, 89, 144, 62, 248, 114, 166, 62, 115, 215, 192, 189, 207, 47, 93, 190, 80, 93, 8, 190, 243, 145, 160, 61, 154, 35, 5, 190, 230, 187, 125, 62, 162, 7, 228, 190, 47, 214, 138, 191, 42, 144, 17, 190, 150, 63, 9, 63, 212, 132, 46, 189, 4, 212, 239, 189, 3, 145, 44, 190, 101, 117, 93, 190, 251, 66, 227, 190, 218, 120, 160, 188, 76, 75, 191, 59, 68, 28, 70, 189, 84, 252, 233, 187, 77, 140, 27, 190, 121, 37, 242, 189, 206, 64, 225, 61, 176, 44, 143, 191, 191, 130, 217, 61, 3, 175, 20, 62, 2, 84, 207, 61, 14, 28, 19, 62, 69, 65, 199, 62, 149, 216, 70, 190, 132, 88, 60, 188, 234, 115, 175, 190, 247, 203, 210, 189, 140, 84, 89, 59, 90, 231, 231, 188, 138, 64, 152, 61, 62, 21, 160, 60, 13, 150, 44, 188, 66, 223, 103, 190, 114, 233, 40, 60, 55, 85, 38, 62, 91, 184, 18, 62, 16, 88, 190, 188, 108, 224, 24, 190, 50, 69, 142, 61, 226, 12, 26, 189, 104, 235, 4, 191, 174, 31, 155, 62, 172, 144, 86, 62, 247, 192, 94, 63, 172, 174, 85, 191, 220, 47, 84, 62, 49, 162, 64, 190, 247, 211, 37, 190, 127, 222, 146, 61, 229, 218, 23, 191, 185, 161, 215, 61, 133, 48, 24, 191, 219, 77, 70, 190, 138, 127, 236, 60, 97, 213, 141, 62, 193, 182, 36, 191, 163, 11, 109, 190, 163, 219, 179, 190, 154, 86, 35, 190, 32, 175, 115, 190, 150, 107, 45, 190, 100, 59, 47, 190, 213, 105, 125, 189, 228, 236, 7, 190, 54, 227, 143, 189, 134, 130, 36, 62, 58, 139, 96, 190, 154, 15, 239, 190, 93, 238, 117, 62, 235, 233, 127, 187, 95, 175, 202, 190, 255, 17, 37, 61, 9, 213, 224, 189, 21, 231, 62, 191, 27, 83, 11, 190, 37, 71, 13, 63, 60, 222, 118, 61, 143, 241, 138, 190, 219, 190, 45, 190, 173, 215, 112, 190, 116, 94, 46, 62, 35, 105, 201, 191, 177, 91, 149, 62, 148, 42, 191, 61, 23, 206, 156, 62, 163, 123, 210, 190, 156, 188, 170, 62, 49, 211, 246, 190, 139, 158, 18, 190, 47, 110, 34, 191, 116, 197, 187, 189, 25, 212, 141, 62, 113, 115, 150, 62, 44, 201, 99, 61, 99, 52, 11, 62, 155, 144, 5, 190, 217, 235, 184, 190, 218, 193, 92, 62, 237, 133, 154, 62, 169, 115, 220, 189, 230, 202, 166, 189, 122, 174, 177, 189, 18, 73, 75, 190, 108, 54, 99, 189, 12, 127, 138, 62, 239, 191, 27, 187, 205, 30, 192, 62, 84, 34, 131, 190, 121, 7, 250, 61, 227, 110, 251, 60, 10, 96, 70, 62, 194, 130, 139, 189, 239, 153, 159, 61, 174, 56, 252, 188, 112, 138, 61, 188, 165, 165, 150, 189, 93, 170, 14, 62, 231, 160, 168, 62, 13, 187, 76, 189, 215, 199, 9, 62, 170, 177, 14, 62, 112, 224, 21, 62, 165, 137, 211, 60, 144, 178, 34, 190, 179, 236, 122, 189, 76, 178, 1, 60, 235, 237, 44, 62, 173, 97, 106, 189, 19, 69, 8, 62, 245, 211, 126, 189, 112, 190, 73, 189, 103, 201, 187, 61, 175, 6, 53, 190, 202, 220, 194, 188, 245, 143, 5, 191, 224, 184, 32, 190, 158, 217, 23, 63, 27, 117, 23, 191, 82, 188, 190, 62, 156, 164, 119, 191, 91, 153, 15, 63, 139, 12, 14, 63, 94, 12, 20, 191, 93, 155, 15, 191, 184, 240, 31, 191, 248, 54, 215, 188, 252, 100, 183, 190, 141, 201, 92, 189, 200, 75, 155, 62, 252, 185, 147, 62, 233, 59, 55, 190, 195, 89, 210, 190, 47, 198, 98, 190, 196, 158, 144, 60, 44, 232, 164, 62, 31, 83, 22, 62, 170, 100, 78, 62, 111, 175, 145, 61, 42, 51, 82, 189, 51, 233, 30, 61, 76, 124, 177, 61, 182, 103, 36, 191, 9, 150, 11, 61, 123, 98, 152, 191, 78, 117, 57, 62, 70, 162, 172, 190, 236, 42, 181, 191, 95, 198, 136, 61, 199, 47, 137, 62, 37, 100, 188, 191, 98, 113, 74, 62, 188, 206, 198, 190, 46, 116, 56, 62, 151, 146, 143, 62, 230, 70, 119, 191, 128, 167, 208, 190, 76, 172, 233, 187, 121, 116, 134, 62, 160, 124, 150, 190, 251, 82, 25, 62, 86, 64, 128, 59, 128, 210, 125, 62, 200, 65, 154, 62, 124, 59, 155, 61, 231, 55, 98, 190, 223, 172, 119, 188, 110, 254, 20, 188, 59, 237, 66, 189, 211, 157, 240, 61, 185, 231, 167, 190, 5, 134, 228, 62, 59, 89, 37, 189, 75, 73, 53, 188, 80, 153, 53, 191, 65, 239, 192, 61, 9, 253, 162, 190, 214, 41, 76, 190, 129, 117, 207, 190, 131, 109, 3, 190, 96, 38, 249, 61, 60, 213, 65, 191, 77, 131, 168, 190, 97, 217, 84, 62, 39, 204, 64, 63, 140, 79, 22, 191, 249, 190, 92, 62, 135, 149, 20, 190, 17, 148, 169, 190, 43, 111, 200, 62, 18, 220, 237, 190, 70, 12, 49, 62, 140, 169, 247, 188, 209, 211, 160, 61, 98, 74, 137, 62, 125, 63, 123, 61, 100, 184, 35, 191, 15, 167, 99, 190, 1, 128, 230, 190, 25, 223, 201, 61, 49, 86, 14, 60, 156, 176, 148, 60, 247, 226, 27, 62, 209, 77, 215, 190, 152, 61, 145, 61, 252, 250, 223, 189, 231, 60, 114, 189, 203, 81, 36, 62, 8, 126, 161, 190, 156, 125, 149, 60, 77, 52, 0, 62, 132, 247, 13, 192, 233, 161, 7, 190, 34, 64, 133, 62, 204, 80, 216, 191, 242, 214, 231, 62, 226, 249, 150, 60, 158, 97, 243, 60, 104, 45, 83, 61, 159, 35, 209, 190, 252, 190, 165, 190, 168, 149, 82, 62, 73, 189, 228, 62, 245, 97, 141, 190, 112, 234, 198, 60, 101, 107, 236, 61, 142, 181, 216, 62, 217, 75, 49, 62, 148, 157, 217, 61, 123, 249, 54, 190, 167, 92, 158, 62, 117, 20, 192, 189, 36, 37, 24, 191, 27, 96, 195, 190, 148, 46, 151, 59, 177, 198, 126, 62, 13, 233, 132, 61, 46, 111, 41, 62, 84, 233, 31, 191, 72, 229, 174, 61, 93, 73, 186, 190, 211, 153, 128, 60, 172, 246, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 52, 159, 61, 46, 7, 97, 188, 150, 146, 217, 189, 84, 148, 39, 61, 210, 110, 134, 62, 70, 30, 56, 190, 2, 55, 162, 61, 66, 93, 169, 189, 29, 126, 104, 190, 4, 140, 98, 60, 128, 33, 18, 191, 17, 210, 120, 62, 186, 145, 221, 61, 136, 38, 19, 190, 242, 159, 8, 62, 215, 244, 29, 60, 103, 150, 142, 60, 68, 56, 133, 61, 4, 87, 149, 60, 51, 189, 110, 62, 189, 229, 170, 189, 71, 32, 35, 190, 153, 166, 70, 61, 144, 201, 168, 61, 108, 73, 245, 61, 184, 207, 173, 60, 107, 96, 11, 62, 5, 182, 203, 61, 53, 186, 206, 61, 233, 157, 26, 62, 101, 15, 72, 62, 151, 67, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 9, 252, 190, 216, 0, 9, 191, 67, 5, 137, 63, 223, 118, 122, 62, 166, 43, 241, 61, 194, 194, 160, 60, 60, 47, 142, 61, 186, 167, 11, 63, 49, 87, 216, 62, 137, 185, 76, 189, 108, 126, 70, 63, 178, 133, 223, 190, 66, 215, 8, 62, 162, 42, 195, 190, 66, 93, 0, 191, 2, 199, 132, 191, 165, 164, 174, 190, 108, 96, 200, 190, 162, 37, 191, 62, 241, 227, 84, 190, 134, 14, 238, 62, 71, 65, 74, 191, 199, 22, 188, 187, 237, 20, 245, 62, 169, 206, 135, 189, 103, 163, 187, 190, 72, 232, 2, 191, 230, 61, 95, 61, 220, 207, 117, 63, 110, 64, 47, 63, 187, 6, 174, 190, 205, 251, 31, 63, 83, 153, 165, 60, 120, 252, 172, 62, 8, 251, 121, 63, 148, 63, 54, 62, 156, 193, 33, 191, 231, 39, 226, 60, 181, 115, 179, 190, 207, 37, 78, 61, 165, 228, 159, 60, 178, 22, 101, 190, 233, 143, 79, 62, 114, 139, 13, 63, 26, 174, 25, 190, 96, 198, 181, 62, 138, 89, 22, 190, 40, 123, 13, 62, 29, 125, 151, 190, 124, 215, 196, 190, 176, 197, 181, 189, 156, 65, 100, 190, 180, 183, 5, 62, 98, 182, 133, 62, 185, 1, 134, 190, 103, 99, 19, 190, 56, 188, 217, 190, 231, 27, 206, 187, 33, 21, 74, 190, 209, 142, 110, 190, 145, 112, 253, 62, 145, 62, 187, 188, 115, 57, 30, 62, 95, 97, 148, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 170, 39, 188, 184, 126, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 234, 68, 63, 132, 186, 136, 63, 213, 152, 77, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {20, 31, 200, 62, 134, 84, 203, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}