// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 127, 27, 191, 168, 239, 127, 191, 125, 137, 49, 61, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 181, 177, 171, 62, 30, 92, 83, 191, 48, 159, 163, 190, 70, 63, 204, 190, 187, 88, 46, 191, 106, 153, 66, 190, 47, 96, 209, 190, 36, 113, 148, 191, 199, 194, 9, 63, 254, 121, 235, 61, 163, 83, 46, 63, 22, 14, 190, 190, 219, 43, 71, 190, 151, 5, 28, 62, 125, 60, 244, 190, 31, 228, 106, 61, 118, 223, 150, 62, 204, 31, 31, 191, 3, 195, 171, 190, 99, 228, 65, 63, 59, 201, 208, 190, 127, 149, 75, 190, 195, 13, 133, 63, 249, 250, 211, 62, 183, 197, 1, 63, 153, 6, 232, 62, 240, 209, 64, 191, 254, 221, 162, 62, 6, 226, 132, 191, 118, 66, 234, 190, 53, 63, 43, 190, 236, 72, 89, 191, 185, 34, 207, 62, 168, 116, 134, 190, 227, 134, 8, 63, 169, 149, 151, 190, 187, 62, 121, 190, 165, 221, 130, 190, 237, 11, 189, 61, 41, 235, 1, 191, 1, 244, 90, 191, 227, 14, 50, 63, 6, 167, 35, 63, 217, 10, 195, 190, 127, 235, 206, 62, 35, 1, 220, 62, 44, 96, 68, 191, 53, 31, 246, 190, 182, 64, 91, 190, 113, 217, 153, 190, 220, 173, 132, 62, 248, 107, 162, 62, 33, 247, 131, 191, 103, 9, 64, 190, 21, 164, 22, 191, 78, 21, 18, 191, 169, 80, 143, 61, 128, 70, 231, 190, 51, 167, 41, 63, 71, 63, 18, 62, 124, 166, 187, 190, 242, 173, 203, 62, 145, 43, 38, 188, 173, 185, 206, 189, 81, 235, 241, 61, 163, 197, 164, 62, 186, 99, 86, 63, 43, 216, 248, 190, 219, 220, 251, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 253, 167, 184, 62, 207, 196, 201, 189, 2, 52, 127, 190, 33, 121, 65, 63, 251, 99, 51, 63, 108, 64, 23, 63, 13, 80, 249, 190, 138, 114, 61, 63, 74, 159, 3, 188, 190, 145, 159, 190, 155, 18, 90, 62, 148, 193, 84, 191, 58, 206, 144, 190, 71, 33, 91, 191, 6, 51, 134, 61, 23, 45, 7, 62, 93, 90, 184, 61, 189, 112, 18, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 195, 217, 190, 9, 231, 173, 190, 118, 194, 34, 190, 191, 157, 221, 61, 90, 74, 84, 190, 222, 162, 130, 61, 64, 238, 148, 62, 198, 67, 203, 189, 85, 218, 180, 190, 148, 111, 74, 191, 127, 38, 53, 63, 232, 142, 228, 190, 46, 101, 33, 190, 157, 13, 6, 63, 245, 58, 14, 63, 229, 96, 182, 190, 147, 172, 65, 63, 16, 194, 47, 189, 61, 209, 154, 190, 54, 167, 23, 190, 227, 212, 28, 62, 127, 238, 26, 63, 251, 210, 36, 63, 4, 163, 203, 62, 125, 164, 70, 188, 250, 74, 164, 190, 154, 78, 228, 190, 200, 65, 30, 190, 114, 228, 64, 61, 186, 214, 55, 189, 86, 72, 97, 62, 57, 7, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 141, 186, 189, 149, 125, 21, 190, 254, 16, 176, 189, 11, 163, 162, 61, 40, 222, 18, 191, 231, 29, 139, 189, 232, 220, 10, 61, 53, 197, 50, 62, 148, 64, 143, 189, 203, 99, 86, 62, 14, 235, 18, 62, 181, 181, 212, 61, 252, 38, 254, 61, 229, 164, 230, 61, 231, 102, 95, 189, 39, 28, 39, 191, 109, 94, 119, 191, 207, 223, 142, 189, 163, 251, 20, 190, 127, 40, 86, 190, 81, 72, 74, 62, 143, 169, 13, 62, 199, 12, 37, 62, 234, 87, 6, 190, 145, 28, 192, 62, 247, 99, 60, 60, 117, 131, 103, 187, 3, 65, 159, 190, 130, 142, 161, 187, 75, 6, 140, 62, 51, 64, 249, 60, 153, 237, 255, 60, 13, 188, 12, 190, 33, 146, 54, 61, 217, 124, 225, 189, 152, 100, 0, 190, 78, 96, 68, 189, 199, 242, 29, 190, 200, 120, 73, 187, 133, 81, 178, 189, 130, 37, 38, 190, 69, 90, 27, 190, 212, 203, 25, 61, 160, 102, 147, 189, 42, 149, 143, 60, 138, 110, 231, 61, 162, 179, 74, 190, 184, 158, 27, 190, 206, 84, 0, 190, 85, 182, 12, 61, 182, 78, 200, 61, 106, 252, 204, 60, 190, 120, 13, 189, 46, 177, 97, 189, 137, 133, 13, 190, 145, 96, 40, 61, 215, 81, 190, 188, 255, 112, 165, 189, 242, 37, 52, 190, 56, 52, 255, 61, 12, 86, 99, 61, 97, 131, 50, 190, 25, 5, 171, 61, 79, 100, 245, 59, 250, 221, 99, 190, 5, 150, 62, 61, 201, 222, 153, 189, 31, 112, 58, 190, 210, 21, 140, 62, 212, 19, 6, 191, 77, 115, 15, 189, 110, 234, 32, 62, 1, 46, 128, 190, 46, 219, 48, 190, 77, 136, 128, 190, 75, 33, 97, 60, 181, 233, 154, 190, 112, 235, 27, 62, 246, 59, 143, 187, 41, 200, 157, 62, 22, 9, 234, 189, 154, 94, 157, 61, 164, 202, 107, 187, 69, 146, 52, 62, 157, 252, 225, 61, 36, 25, 187, 60, 98, 222, 136, 61, 29, 164, 96, 62, 37, 215, 13, 63, 9, 95, 6, 190, 224, 181, 156, 187, 99, 143, 67, 190, 37, 209, 68, 61, 225, 86, 89, 190, 94, 75, 47, 62, 177, 75, 131, 190, 95, 230, 218, 61, 68, 42, 69, 189, 23, 133, 52, 62, 70, 203, 152, 189, 174, 116, 115, 190, 174, 146, 135, 62, 198, 124, 11, 62, 205, 108, 143, 62, 239, 203, 9, 63, 97, 203, 18, 62, 92, 11, 68, 62, 89, 153, 181, 189, 175, 151, 7, 60, 33, 64, 214, 61, 14, 168, 69, 61, 10, 235, 78, 189, 8, 77, 184, 59, 48, 192, 197, 61, 5, 178, 134, 62, 1, 252, 106, 59, 196, 50, 202, 190, 151, 7, 82, 62, 240, 57, 247, 189, 79, 217, 118, 190, 234, 155, 11, 189, 250, 197, 8, 62, 169, 70, 82, 59, 160, 67, 216, 190, 84, 175, 234, 62, 144, 109, 53, 62, 142, 135, 87, 60, 223, 82, 60, 62, 76, 41, 117, 62, 229, 95, 202, 61, 153, 81, 164, 61, 40, 187, 151, 189, 236, 52, 153, 190, 125, 136, 136, 62, 216, 116, 6, 62, 104, 240, 129, 61, 239, 9, 27, 190, 232, 91, 175, 189, 245, 68, 70, 62, 189, 48, 36, 190, 153, 181, 247, 189, 45, 128, 147, 61, 39, 169, 136, 188, 108, 16, 202, 190, 93, 70, 25, 62, 22, 76, 200, 60, 18, 22, 46, 190, 56, 185, 121, 61, 238, 14, 224, 189, 138, 113, 91, 190, 6, 84, 46, 62, 128, 243, 185, 188, 37, 254, 48, 62, 47, 226, 2, 190, 95, 66, 192, 190, 204, 107, 227, 59, 118, 194, 59, 190, 248, 146, 240, 61, 247, 33, 140, 189, 213, 247, 233, 189, 129, 109, 5, 62, 57, 181, 226, 61, 160, 216, 184, 61, 147, 227, 24, 190, 58, 17, 195, 60, 143, 104, 77, 189, 54, 147, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 147, 228, 206, 61, 14, 134, 228, 61, 37, 118, 145, 60, 81, 98, 14, 61, 107, 214, 30, 62, 162, 199, 16, 190, 108, 183, 210, 189, 64, 170, 199, 188, 198, 165, 147, 61, 82, 83, 70, 61, 190, 252, 50, 61, 50, 213, 0, 190, 134, 212, 149, 189, 57, 132, 10, 62, 118, 58, 10, 62, 99, 239, 13, 59, 192, 177, 131, 188, 110, 38, 21, 62, 140, 136, 34, 60, 16, 57, 23, 190, 104, 240, 196, 189, 128, 87, 216, 189, 234, 23, 238, 189, 219, 212, 242, 187, 165, 133, 151, 190, 210, 22, 189, 62, 76, 96, 138, 190, 132, 180, 32, 189, 157, 178, 204, 61, 117, 187, 133, 190, 30, 133, 3, 190, 245, 150, 14, 61, 225, 117, 217, 61, 117, 7, 148, 190, 29, 213, 244, 188, 119, 185, 170, 60, 133, 186, 199, 61, 106, 62, 214, 62, 27, 201, 23, 62, 145, 63, 36, 61, 225, 39, 135, 60, 161, 190, 109, 61, 148, 220, 147, 60, 249, 111, 178, 61, 141, 252, 224, 189, 162, 170, 123, 61, 196, 21, 167, 189, 246, 105, 36, 190, 16, 185, 135, 60, 26, 233, 4, 190, 36, 106, 73, 190, 59, 162, 128, 61, 134, 19, 21, 190, 43, 182, 123, 60, 198, 183, 9, 190, 9, 205, 221, 189, 105, 242, 0, 190, 246, 253, 183, 189, 37, 173, 99, 189, 234, 230, 4, 190, 29, 195, 188, 61, 39, 71, 29, 62, 237, 170, 108, 61, 16, 40, 151, 60, 248, 114, 83, 61, 183, 81, 173, 188, 102, 205, 10, 190, 213, 239, 214, 189, 78, 175, 235, 59, 74, 83, 205, 60, 83, 179, 31, 187, 122, 197, 216, 60, 254, 16, 48, 190, 236, 76, 245, 61, 79, 168, 246, 187, 203, 129, 243, 189, 215, 208, 76, 190, 227, 16, 59, 189, 219, 178, 40, 190, 19, 138, 40, 62, 60, 86, 142, 60, 177, 200, 188, 189, 200, 25, 198, 189, 111, 86, 189, 189, 118, 240, 6, 62, 20, 209, 108, 190, 134, 17, 129, 61, 210, 114, 59, 190, 94, 216, 205, 60, 210, 5, 251, 190, 175, 173, 104, 62, 170, 127, 31, 62, 249, 92, 24, 189, 89, 165, 25, 62, 205, 218, 200, 190, 91, 193, 113, 62, 189, 85, 203, 189, 40, 144, 1, 190, 16, 44, 208, 61, 164, 148, 60, 61, 127, 138, 87, 190, 66, 29, 221, 190, 239, 144, 69, 190, 215, 156, 128, 61, 104, 154, 8, 190, 220, 221, 152, 190, 66, 23, 249, 60, 154, 16, 33, 61, 186, 132, 63, 190, 158, 248, 21, 191, 222, 15, 210, 61, 45, 119, 49, 190, 118, 67, 255, 190, 119, 59, 54, 62, 56, 40, 118, 62, 232, 141, 177, 190, 215, 216, 254, 189, 205, 184, 12, 61, 153, 218, 71, 61, 80, 178, 72, 189, 62, 223, 72, 61, 20, 3, 254, 189, 129, 214, 145, 62, 200, 89, 30, 189, 56, 35, 17, 61, 90, 6, 177, 189, 181, 102, 203, 189, 237, 201, 43, 62, 23, 82, 67, 190, 36, 172, 41, 190, 161, 199, 35, 62, 129, 36, 206, 61, 100, 205, 50, 60, 225, 119, 74, 62, 143, 65, 236, 189, 195, 247, 142, 189, 238, 243, 255, 60, 22, 123, 52, 62, 55, 47, 67, 61, 125, 50, 48, 62, 203, 100, 88, 62, 64, 164, 163, 61, 117, 124, 66, 190, 83, 216, 11, 190, 21, 16, 65, 62, 219, 54, 31, 62, 156, 55, 112, 61, 69, 154, 142, 61, 148, 98, 5, 190, 228, 211, 252, 189, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 237, 225, 97, 190, 24, 159, 209, 189, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 34, 240, 69, 62, 21, 20, 244, 188, 201, 215, 1, 62, 128, 230, 108, 189, 196, 173, 214, 190, 120, 206, 82, 190, 242, 75, 127, 61, 208, 44, 22, 60, 232, 249, 65, 61, 89, 148, 165, 188, 30, 127, 70, 190, 177, 8, 70, 190, 131, 104, 210, 61, 217, 32, 36, 189, 87, 167, 14, 190, 171, 223, 253, 188, 153, 89, 36, 62, 93, 73, 14, 190, 8, 109, 196, 61, 89, 231, 127, 190, 182, 3, 250, 61, 95, 3, 165, 190, 143, 215, 97, 62, 112, 184, 148, 62, 86, 21, 152, 188, 194, 20, 243, 190, 30, 196, 236, 61, 214, 128, 81, 190, 71, 226, 4, 63, 137, 193, 49, 62, 78, 140, 235, 190, 47, 57, 79, 61, 236, 126, 184, 62, 143, 44, 177, 62, 71, 124, 195, 190, 34, 156, 109, 61, 178, 97, 249, 60, 118, 231, 3, 62, 114, 245, 3, 191, 40, 69, 104, 190, 165, 209, 155, 190, 74, 216, 161, 62, 237, 178, 135, 190, 237, 121, 246, 61, 217, 126, 240, 61, 84, 113, 62, 189, 28, 11, 45, 190, 209, 105, 39, 61, 159, 102, 189, 61, 96, 74, 79, 189, 149, 167, 181, 62, 136, 242, 221, 189, 164, 146, 6, 62, 96, 209, 195, 189, 41, 101, 168, 62, 227, 247, 215, 189, 244, 56, 179, 61, 132, 184, 81, 62, 155, 74, 96, 190, 238, 160, 182, 62, 137, 3, 86, 191, 18, 33, 33, 190, 222, 239, 164, 62, 14, 185, 71, 190, 191, 56, 25, 188, 190, 31, 161, 190, 233, 165, 31, 62, 227, 46, 66, 61, 186, 176, 235, 189, 124, 191, 208, 188, 48, 90, 221, 61, 67, 188, 190, 62, 79, 52, 139, 62, 18, 51, 2, 62, 11, 204, 207, 188, 46, 184, 173, 61, 156, 118, 1, 62, 27, 142, 130, 60, 119, 19, 113, 62, 189, 123, 63, 62, 173, 78, 149, 61, 57, 69, 176, 188, 202, 64, 91, 190, 109, 18, 36, 61, 105, 65, 167, 190, 252, 93, 46, 62, 215, 34, 9, 190, 212, 83, 13, 190, 7, 54, 14, 62, 63, 31, 104, 62, 139, 168, 148, 189, 73, 163, 9, 62, 194, 87, 222, 190, 166, 225, 84, 61, 195, 71, 27, 62, 115, 103, 77, 190, 30, 144, 208, 189, 221, 54, 190, 189, 89, 253, 169, 62, 8, 87, 150, 62, 122, 247, 224, 189, 67, 10, 122, 190, 179, 202, 95, 189, 200, 50, 89, 189, 10, 251, 69, 62, 121, 198, 114, 61, 33, 170, 7, 62, 15, 207, 25, 189, 98, 34, 191, 190, 137, 227, 225, 190, 25, 165, 180, 189, 193, 70, 179, 62, 77, 237, 180, 188, 1, 234, 218, 62, 107, 64, 128, 190, 142, 3, 150, 190, 136, 178, 148, 60, 154, 102, 212, 59, 106, 86, 1, 61, 150, 62, 13, 63, 82, 19, 104, 189, 248, 203, 208, 190, 187, 200, 75, 62, 241, 156, 151, 190, 55, 112, 4, 63, 196, 154, 62, 62, 127, 33, 177, 190, 221, 188, 146, 190, 217, 147, 34, 61, 198, 164, 51, 62, 167, 61, 239, 190, 29, 57, 12, 189, 63, 15, 177, 61, 237, 48, 10, 190, 196, 211, 249, 190, 70, 9, 139, 61, 154, 82, 3, 190, 149, 231, 17, 62, 127, 253, 117, 190, 22, 28, 109, 61, 91, 161, 237, 61, 200, 41, 248, 189, 72, 33, 198, 60, 67, 157, 57, 189, 82, 72, 24, 61, 142, 132, 201, 189, 21, 110, 189, 62, 63, 164, 250, 188, 247, 54, 140, 62, 251, 43, 248, 61, 204, 191, 111, 62, 123, 94, 170, 189, 104, 214, 175, 189, 76, 165, 255, 189, 219, 79, 133, 61, 83, 157, 35, 62, 85, 35, 92, 189, 113, 150, 221, 61, 98, 150, 132, 189, 113, 178, 6, 190, 191, 248, 140, 190, 250, 216, 29, 62, 192, 94, 240, 61, 244, 27, 12, 62, 52, 72, 251, 61, 242, 156, 53, 60, 31, 245, 3, 61, 212, 183, 224, 188, 38, 193, 237, 189, 237, 40, 151, 187, 119, 112, 203, 61, 148, 83, 109, 188, 237, 186, 96, 61, 41, 80, 174, 189, 210, 1, 96, 61, 131, 144, 167, 62, 227, 74, 174, 60, 223, 13, 76, 62, 165, 176, 252, 190, 0, 231, 38, 189, 165, 255, 65, 61, 70, 89, 91, 62, 254, 136, 118, 186, 120, 157, 157, 62, 41, 114, 115, 187, 239, 105, 185, 188, 230, 78, 150, 187, 240, 68, 143, 190, 93, 20, 242, 62, 140, 222, 225, 61, 88, 216, 187, 190, 196, 35, 71, 188, 75, 24, 204, 60, 103, 37, 120, 62, 205, 116, 98, 190, 26, 127, 178, 189, 185, 159, 182, 60, 129, 44, 236, 61, 159, 158, 19, 191, 128, 42, 27, 62, 0, 67, 32, 190, 21, 235, 131, 189, 102, 250, 140, 190, 52, 16, 184, 189, 219, 9, 25, 61, 105, 205, 138, 61, 226, 29, 150, 61, 70, 172, 108, 61, 200, 241, 174, 188, 221, 255, 111, 190, 143, 197, 237, 61, 196, 129, 5, 189, 214, 157, 228, 60, 158, 88, 43, 62, 147, 254, 93, 62, 217, 134, 60, 60, 251, 183, 179, 189, 153, 237, 244, 60, 20, 69, 16, 62, 179, 30, 132, 191, 208, 155, 105, 62, 154, 81, 28, 62, 204, 90, 238, 189, 131, 103, 135, 61, 218, 58, 10, 190, 154, 43, 150, 62, 246, 173, 249, 189, 208, 207, 32, 190, 174, 122, 60, 62, 165, 208, 151, 61, 211, 101, 145, 191, 20, 149, 156, 188, 85, 143, 62, 190, 143, 21, 202, 189, 168, 239, 121, 190, 102, 154, 158, 189, 98, 161, 166, 189, 18, 187, 8, 62, 151, 30, 46, 189, 253, 163, 134, 62, 96, 170, 226, 61, 206, 140, 43, 190, 63, 25, 77, 62, 136, 194, 237, 61, 250, 59, 107, 62, 154, 204, 160, 189, 237, 213, 132, 190, 205, 54, 217, 189, 211, 249, 159, 189, 217, 136, 125, 62, 79, 67, 56, 190, 159, 198, 204, 62, 187, 50, 102, 190, 61, 82, 169, 61, 218, 125, 188, 61, 61, 149, 69, 191, 167, 147, 103, 189, 177, 9, 2, 189, 248, 231, 93, 62, 190, 4, 156, 190, 96, 230, 138, 61, 212, 196, 99, 62, 226, 49, 112, 62, 42, 54, 203, 62, 63, 53, 32, 62, 168, 139, 224, 189, 101, 248, 249, 61, 50, 174, 173, 61, 201, 179, 140, 189, 35, 120, 38, 62, 236, 114, 149, 189, 139, 180, 29, 62, 126, 35, 235, 189, 248, 57, 33, 190, 240, 201, 202, 190, 2, 0, 252, 188, 139, 78, 113, 190, 132, 40, 59, 62, 18, 60, 138, 190, 13, 114, 247, 60, 206, 112, 47, 62, 9, 18, 47, 190, 147, 58, 10, 62, 154, 49, 18, 190, 69, 240, 240, 62, 23, 175, 254, 189, 200, 75, 148, 189, 171, 41, 146, 60, 227, 86, 66, 62, 95, 206, 160, 61, 13, 61, 160, 190, 61, 179, 212, 61, 5, 3, 156, 61, 141, 60, 89, 61, 227, 120, 39, 190, 242, 113, 172, 62, 236, 69, 255, 188, 75, 95, 30, 62, 164, 2, 1, 190, 193, 54, 108, 62, 153, 151, 78, 62, 185, 7, 104, 62, 175, 60, 61, 61, 140, 41, 125, 61, 37, 13, 157, 189, 94, 170, 191, 189, 74, 174, 149, 61, 95, 205, 218, 61, 102, 73, 149, 189, 174, 239, 17, 190, 221, 149, 6, 60, 164, 2, 147, 190, 164, 91, 65, 188, 172, 217, 37, 190, 100, 199, 183, 60, 168, 249, 224, 186, 113, 159, 14, 191, 144, 193, 143, 61, 172, 126, 139, 190, 150, 241, 6, 190, 180, 252, 252, 189, 13, 67, 242, 190, 238, 242, 132, 190, 23, 106, 43, 190, 218, 24, 145, 62, 204, 15, 47, 189, 53, 245, 150, 62, 24, 232, 204, 188, 101, 32, 56, 190, 18, 14, 187, 188, 82, 203, 124, 190, 34, 71, 178, 61, 53, 247, 48, 189, 107, 210, 147, 61, 207, 246, 57, 62, 107, 7, 177, 61, 208, 51, 148, 61, 190, 56, 102, 59, 74, 207, 154, 61, 199, 236, 168, 61, 240, 104, 54, 191, 106, 12, 69, 62, 179, 165, 16, 186, 102, 94, 26, 63, 50, 114, 158, 61, 168, 72, 163, 190, 96, 201, 177, 61, 179, 144, 145, 190, 50, 50, 229, 62, 192, 124, 14, 62, 139, 78, 144, 190, 46, 118, 53, 190, 250, 195, 2, 190, 225, 64, 154, 61, 154, 219, 222, 190, 168, 170, 208, 59, 207, 73, 126, 62, 79, 185, 22, 62, 179, 36, 98, 191, 15, 21, 143, 190, 13, 38, 49, 190, 90, 159, 36, 62, 194, 219, 146, 190, 229, 140, 178, 189, 77, 172, 151, 61, 12, 217, 203, 61, 5, 6, 196, 61, 215, 56, 184, 62, 77, 83, 222, 61, 186, 114, 172, 190, 210, 160, 159, 62, 190, 234, 51, 190, 179, 168, 148, 62, 206, 81, 54, 62, 219, 123, 158, 61, 46, 194, 186, 59, 118, 65, 52, 62, 65, 183, 176, 61, 164, 53, 50, 59, 119, 196, 79, 62, 120, 24, 131, 62, 65, 175, 2, 189, 108, 217, 183, 189, 91, 132, 249, 189, 165, 134, 20, 62, 19, 230, 193, 61, 123, 232, 28, 60, 201, 33, 16, 190, 133, 192, 73, 62, 200, 139, 38, 62, 134, 145, 190, 61, 147, 239, 143, 62, 19, 202, 45, 190, 104, 52, 140, 60, 187, 46, 27, 189, 85, 26, 6, 62, 92, 24, 101, 61, 240, 213, 38, 62, 184, 171, 66, 61, 115, 104, 32, 62, 28, 165, 22, 190, 140, 68, 6, 190, 53, 16, 161, 60, 217, 4, 134, 189, 11, 208, 192, 189, 165, 1, 6, 62, 161, 171, 55, 185, 217, 10, 213, 61, 192, 210, 162, 60, 11, 124, 93, 189, 105, 216, 50, 62, 34, 49, 25, 190, 100, 231, 244, 61, 161, 77, 12, 190, 112, 134, 237, 189, 24, 199, 246, 189, 117, 255, 27, 189, 28, 44, 46, 190, 217, 212, 2, 62, 129, 5, 11, 190, 237, 162, 124, 61, 213, 19, 141, 60, 193, 199, 246, 189, 0, 255, 114, 189, 109, 41, 111, 189, 59, 130, 242, 61, 238, 203, 203, 59, 90, 39, 251, 189, 204, 64, 230, 61, 141, 213, 36, 190, 160, 33, 65, 189, 46, 224, 32, 190, 154, 35, 5, 190, 49, 27, 185, 61, 160, 21, 12, 190, 189, 21, 121, 189, 156, 1, 117, 61, 47, 65, 51, 62, 147, 40, 25, 190, 139, 170, 126, 61, 3, 145, 44, 190, 253, 47, 232, 189, 168, 86, 47, 190, 37, 112, 140, 189, 164, 241, 175, 185, 18, 218, 128, 189, 88, 34, 59, 189, 48, 25, 212, 189, 131, 87, 55, 189, 86, 203, 190, 61, 129, 53, 78, 190, 205, 52, 35, 61, 230, 157, 7, 62, 55, 190, 102, 62, 193, 84, 136, 61, 171, 113, 217, 62, 226, 233, 129, 188, 59, 147, 152, 60, 49, 18, 153, 189, 80, 40, 241, 61, 183, 192, 194, 61, 244, 121, 94, 61, 213, 206, 8, 62, 65, 145, 148, 59, 13, 150, 44, 188, 236, 165, 243, 189, 51, 150, 102, 61, 126, 43, 212, 61, 61, 198, 27, 62, 203, 46, 92, 61, 123, 9, 72, 190, 198, 13, 249, 61, 226, 12, 26, 189, 149, 162, 171, 189, 128, 202, 74, 62, 75, 112, 142, 62, 131, 120, 25, 63, 239, 96, 209, 190, 228, 88, 36, 189, 129, 184, 83, 190, 43, 228, 218, 61, 168, 106, 216, 187, 150, 70, 95, 190, 215, 196, 85, 62, 104, 241, 170, 190, 110, 172, 36, 189, 181, 102, 221, 61, 195, 188, 123, 62, 90, 172, 150, 190, 238, 74, 183, 189, 145, 157, 15, 62, 227, 118, 204, 61, 17, 86, 158, 61, 39, 46, 91, 61, 143, 42, 143, 189, 199, 126, 13, 190, 228, 236, 7, 190, 52, 52, 97, 59, 179, 253, 251, 61, 135, 148, 220, 189, 199, 252, 141, 189, 252, 250, 128, 62, 35, 216, 156, 61, 228, 37, 155, 61, 255, 17, 37, 61, 126, 105, 131, 188, 146, 222, 41, 61, 16, 250, 88, 190, 159, 87, 4, 63, 7, 186, 2, 62, 111, 171, 157, 190, 134, 3, 222, 189, 214, 144, 43, 62, 62, 59, 45, 62, 28, 229, 154, 190, 15, 9, 103, 62, 253, 178, 95, 61, 220, 244, 137, 61, 119, 141, 254, 190, 175, 189, 120, 62, 99, 195, 133, 190, 190, 214, 162, 61, 168, 127, 177, 190, 42, 47, 244, 60, 83, 220, 238, 61, 133, 226, 66, 62, 226, 46, 198, 61, 245, 180, 220, 60, 155, 144, 5, 190, 38, 116, 239, 187, 62, 112, 140, 62, 117, 13, 5, 62, 86, 140, 144, 60, 210, 17, 253, 189, 122, 1, 246, 59, 158, 63, 70, 190, 108, 54, 99, 189, 203, 29, 38, 62, 133, 77, 180, 61, 193, 89, 201, 62, 199, 195, 138, 190, 199, 147, 130, 61, 199, 235, 14, 61, 55, 225, 110, 62, 226, 26, 57, 190, 121, 15, 0, 61, 116, 186, 195, 188, 156, 160, 84, 189, 189, 4, 10, 189, 135, 93, 123, 62, 157, 162, 178, 62, 166, 32, 148, 60, 247, 42, 150, 61, 144, 136, 227, 61, 99, 247, 127, 61, 54, 238, 14, 189, 62, 107, 159, 60, 131, 218, 170, 61, 85, 47, 145, 61, 9, 118, 62, 62, 173, 97, 106, 189, 231, 84, 54, 190, 34, 211, 10, 189, 63, 198, 175, 61, 108, 33, 98, 61, 231, 84, 8, 190, 7, 184, 1, 189, 177, 156, 140, 190, 224, 184, 32, 190, 114, 55, 30, 190, 69, 169, 137, 190, 141, 142, 200, 62, 145, 2, 163, 191, 124, 127, 47, 189, 160, 54, 29, 190, 58, 228, 53, 191, 57, 24, 205, 190, 83, 214, 121, 191, 119, 119, 202, 189, 1, 21, 180, 190, 90, 92, 132, 189, 2, 84, 132, 62, 48, 208, 146, 62, 41, 201, 147, 189, 128, 60, 29, 190, 78, 96, 118, 190, 184, 193, 193, 190, 178, 135, 62, 62, 4, 188, 59, 62, 84, 180, 57, 62, 25, 21, 39, 62, 199, 21, 173, 61, 51, 233, 30, 61, 76, 124, 177, 61, 159, 68, 209, 190, 230, 42, 43, 61, 54, 15, 126, 191, 45, 61, 141, 62, 139, 183, 153, 190, 217, 148, 165, 190, 95, 198, 136, 61, 242, 234, 166, 62, 70, 147, 151, 190, 87, 13, 154, 62, 208, 108, 43, 191, 251, 103, 65, 61, 187, 20, 18, 62, 108, 230, 78, 191, 8, 228, 192, 190, 23, 117, 42, 189, 4, 250, 147, 62, 51, 60, 123, 190, 21, 221, 238, 60, 88, 202, 19, 62, 82, 8, 177, 62, 129, 206, 206, 62, 141, 233, 19, 62, 136, 168, 6, 190, 159, 110, 35, 61, 34, 138, 73, 188, 172, 99, 195, 61, 133, 215, 47, 62, 178, 1, 190, 189, 156, 76, 6, 63, 59, 89, 37, 189, 193, 156, 126, 61, 139, 18, 6, 191, 189, 36, 215, 61, 58, 135, 137, 190, 146, 36, 104, 189, 58, 137, 155, 190, 143, 97, 232, 61, 96, 38, 249, 61, 232, 127, 205, 189, 179, 156, 32, 61, 101, 34, 128, 62, 152, 14, 213, 62, 252, 64, 173, 190, 245, 79, 38, 190, 101, 184, 116, 190, 169, 66, 145, 189, 30, 189, 182, 61, 116, 0, 10, 189, 94, 173, 137, 62, 50, 45, 144, 190, 162, 59, 205, 61, 112, 115, 157, 62, 127, 161, 117, 61, 144, 55, 225, 189, 18, 34, 152, 189, 220, 204, 159, 62, 40, 230, 123, 62, 233, 199, 209, 189, 179, 123, 151, 189, 51, 110, 249, 61, 91, 75, 216, 190, 152, 61, 145, 61, 197, 199, 29, 190, 89, 137, 149, 60, 235, 25, 11, 190, 199, 129, 92, 190, 47, 123, 15, 61, 206, 50, 80, 62, 242, 186, 243, 190, 233, 161, 7, 190, 90, 24, 29, 62, 160, 89, 223, 189, 106, 111, 220, 62, 91, 145, 18, 190, 229, 103, 110, 59, 39, 231, 29, 61, 215, 237, 187, 190, 63, 194, 197, 189, 35, 125, 6, 62, 112, 211, 145, 60, 40, 142, 193, 190, 11, 64, 55, 187, 170, 232, 62, 62, 153, 72, 221, 62, 156, 145, 38, 62, 3, 118, 229, 60, 158, 111, 127, 190, 32, 32, 74, 62, 109, 9, 238, 188, 161, 102, 163, 189, 27, 134, 7, 190, 192, 203, 54, 62, 49, 208, 76, 62, 13, 233, 132, 61, 136, 65, 179, 189, 144, 42, 254, 190, 60, 143, 45, 62, 13, 20, 149, 190, 3, 78, 1, 190, 47, 153, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 84, 144, 187, 255, 61, 137, 61, 10, 161, 241, 189, 138, 18, 64, 61, 46, 39, 63, 62, 24, 93, 32, 190, 114, 231, 215, 61, 110, 240, 12, 190, 87, 62, 38, 189, 111, 100, 107, 60, 236, 232, 155, 190, 134, 164, 75, 62, 1, 145, 191, 61, 243, 22, 253, 189, 41, 52, 174, 61, 226, 229, 203, 189, 86, 149, 201, 188, 235, 58, 247, 60, 144, 249, 96, 58, 186, 96, 55, 62, 233, 216, 181, 189, 63, 111, 125, 189, 212, 46, 10, 62, 34, 90, 201, 189, 15, 10, 2, 62, 101, 80, 63, 61, 156, 248, 160, 59, 146, 34, 24, 62, 234, 164, 13, 62, 199, 234, 49, 62, 112, 253, 50, 62, 81, 39, 33, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 235, 252, 190, 144, 151, 148, 188, 68, 141, 120, 62, 15, 67, 163, 62, 139, 13, 10, 62, 176, 180, 231, 60, 57, 175, 254, 61, 24, 87, 56, 61, 255, 137, 212, 62, 84, 208, 115, 189, 174, 205, 209, 62, 119, 206, 183, 190, 4, 134, 93, 62, 79, 118, 141, 190, 213, 15, 202, 190, 126, 37, 112, 189, 182, 149, 211, 190, 55, 25, 4, 191, 2, 221, 210, 62, 218, 57, 60, 190, 73, 233, 170, 62, 2, 38, 250, 190, 43, 93, 232, 59, 36, 134, 13, 62, 200, 220, 227, 187, 89, 118, 167, 190, 6, 145, 133, 190, 135, 6, 50, 62, 238, 30, 53, 63, 35, 95, 38, 63, 188, 255, 139, 190, 174, 207, 160, 62, 219, 125, 141, 60, 200, 153, 85, 61, 46, 78, 75, 62, 160, 11, 71, 62, 30, 13, 191, 190, 57, 162, 239, 60, 184, 54, 80, 190, 227, 25, 95, 60, 50, 171, 191, 60, 198, 92, 96, 190, 1, 59, 46, 62, 49, 170, 129, 62, 12, 112, 198, 189, 13, 47, 240, 62, 91, 166, 73, 62, 152, 91, 105, 62, 192, 232, 186, 189, 144, 47, 131, 190, 228, 239, 208, 189, 16, 73, 90, 190, 44, 14, 54, 62, 199, 111, 130, 62, 6, 187, 87, 190, 201, 156, 201, 187, 137, 230, 153, 190, 42, 47, 47, 62, 183, 2, 152, 188, 199, 197, 62, 190, 216, 185, 89, 62, 24, 24, 84, 60, 83, 126, 58, 62, 178, 116, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 161, 250, 60, 98, 127, 80, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 195, 64, 63, 139, 70, 94, 63, 173, 16, 141, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 169, 57, 192, 69, 18, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}