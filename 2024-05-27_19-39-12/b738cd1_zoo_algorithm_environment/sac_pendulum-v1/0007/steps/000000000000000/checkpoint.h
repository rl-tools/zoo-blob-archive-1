// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 87, 4, 191, 202, 139, 6, 191, 204, 16, 72, 62, 129, 202, 148, 62, 125, 50, 18, 190, 25, 94, 163, 189, 14, 109, 212, 188, 54, 100, 255, 190, 72, 197, 203, 190, 216, 22, 132, 190, 77, 254, 170, 189, 184, 33, 155, 190, 199, 152, 1, 191, 219, 204, 255, 190, 84, 76, 36, 61, 12, 38, 220, 187, 97, 115, 122, 62, 184, 161, 133, 189, 83, 61, 168, 190, 214, 91, 139, 62, 160, 211, 158, 190, 229, 128, 1, 62, 77, 140, 128, 190, 45, 233, 237, 190, 173, 57, 14, 190, 133, 198, 229, 62, 186, 213, 20, 62, 89, 164, 4, 191, 152, 54, 253, 62, 153, 232, 249, 62, 126, 18, 213, 62, 232, 75, 166, 62, 158, 221, 11, 191, 233, 179, 192, 61, 153, 28, 4, 191, 38, 177, 249, 190, 228, 193, 36, 188, 185, 150, 217, 190, 69, 72, 190, 62, 120, 205, 177, 190, 160, 46, 221, 62, 204, 147, 70, 190, 108, 114, 188, 190, 150, 207, 133, 190, 30, 123, 146, 188, 22, 27, 9, 191, 73, 140, 218, 190, 66, 48, 119, 61, 189, 142, 5, 63, 211, 62, 219, 190, 36, 136, 133, 62, 30, 209, 212, 61, 40, 33, 18, 191, 56, 93, 252, 190, 68, 5, 96, 190, 146, 232, 154, 190, 136, 227, 126, 62, 209, 228, 234, 189, 22, 37, 241, 190, 247, 10, 200, 190, 8, 240, 18, 191, 251, 141, 220, 190, 89, 149, 16, 60, 169, 14, 9, 191, 56, 115, 230, 62, 131, 79, 179, 62, 86, 105, 231, 190, 246, 30, 216, 62, 204, 195, 105, 189, 197, 210, 232, 190, 19, 85, 135, 62, 46, 91, 158, 62, 212, 53, 137, 62, 69, 61, 204, 190, 3, 26, 81, 190, 21, 221, 143, 62, 20, 52, 111, 190, 244, 134, 173, 189, 67, 50, 173, 61, 60, 248, 190, 189, 65, 69, 139, 190, 25, 53, 16, 63, 80, 243, 40, 62, 154, 195, 15, 63, 166, 43, 221, 190, 253, 113, 19, 63, 79, 182, 139, 62, 161, 220, 110, 62, 151, 177, 128, 62, 150, 247, 6, 191, 87, 79, 179, 190, 72, 181, 12, 191, 7, 133, 91, 190, 188, 32, 83, 62, 104, 134, 112, 59, 139, 226, 247, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 200, 19, 191, 44, 160, 140, 190, 94, 51, 155, 189, 93, 171, 46, 62, 93, 170, 26, 190, 157, 81, 61, 190, 149, 59, 159, 62, 149, 97, 75, 190, 122, 180, 236, 190, 223, 188, 1, 191, 149, 204, 12, 63, 255, 45, 170, 190, 108, 49, 188, 190, 216, 199, 237, 62, 210, 213, 231, 62, 191, 90, 155, 190, 216, 108, 232, 62, 114, 47, 194, 61, 12, 132, 167, 190, 242, 171, 3, 61, 26, 228, 16, 62, 17, 213, 3, 63, 8, 133, 18, 63, 237, 41, 182, 62, 194, 114, 112, 190, 64, 86, 110, 190, 143, 196, 159, 190, 227, 170, 132, 190, 60, 195, 149, 189, 61, 42, 131, 190, 217, 191, 134, 62, 224, 124, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 137, 105, 60, 105, 74, 18, 190, 75, 76, 205, 189, 71, 72, 215, 189, 11, 150, 142, 188, 85, 178, 21, 190, 175, 41, 16, 190, 240, 68, 52, 62, 121, 131, 231, 189, 11, 0, 143, 61, 61, 152, 191, 61, 24, 237, 159, 61, 95, 122, 79, 61, 214, 56, 147, 188, 53, 238, 227, 189, 109, 170, 4, 62, 235, 112, 166, 189, 216, 77, 4, 190, 95, 80, 222, 59, 80, 220, 46, 190, 1, 193, 19, 62, 101, 174, 153, 61, 122, 173, 136, 61, 167, 8, 50, 190, 165, 0, 14, 61, 167, 100, 156, 60, 144, 167, 40, 190, 118, 15, 48, 190, 244, 245, 209, 189, 60, 69, 43, 62, 155, 109, 218, 188, 182, 196, 46, 62, 162, 143, 11, 190, 171, 120, 54, 61, 13, 172, 197, 189, 125, 135, 207, 189, 100, 239, 254, 188, 158, 184, 3, 190, 1, 102, 231, 60, 213, 123, 157, 189, 110, 24, 35, 190, 169, 45, 22, 190, 85, 227, 171, 61, 200, 143, 146, 189, 253, 107, 198, 60, 197, 9, 25, 62, 13, 42, 44, 190, 78, 189, 23, 190, 184, 254, 169, 189, 53, 77, 78, 61, 126, 119, 214, 61, 166, 118, 43, 61, 224, 194, 36, 188, 97, 251, 134, 188, 48, 176, 207, 189, 94, 188, 160, 61, 62, 57, 183, 188, 200, 138, 165, 189, 212, 167, 52, 190, 166, 16, 12, 62, 130, 146, 195, 61, 239, 196, 35, 190, 3, 129, 219, 61, 212, 141, 106, 60, 150, 86, 143, 61, 97, 168, 32, 61, 13, 155, 30, 190, 36, 163, 169, 59, 70, 79, 13, 61, 5, 65, 137, 59, 73, 97, 42, 61, 234, 201, 15, 62, 147, 246, 67, 61, 242, 147, 224, 61, 126, 75, 134, 189, 225, 62, 145, 189, 74, 54, 11, 190, 89, 29, 237, 61, 39, 246, 135, 189, 1, 180, 36, 61, 10, 124, 48, 190, 167, 73, 235, 59, 135, 185, 244, 61, 197, 103, 36, 62, 143, 4, 163, 61, 102, 120, 8, 189, 205, 135, 92, 61, 169, 6, 29, 62, 147, 113, 251, 189, 223, 17, 21, 190, 209, 75, 217, 189, 206, 148, 149, 61, 68, 172, 249, 59, 122, 40, 150, 61, 204, 254, 20, 62, 88, 161, 101, 189, 57, 168, 11, 61, 31, 189, 113, 189, 220, 156, 26, 62, 70, 133, 9, 190, 255, 236, 86, 189, 254, 231, 11, 190, 51, 215, 20, 61, 184, 53, 22, 62, 235, 96, 162, 61, 234, 125, 197, 60, 5, 203, 21, 60, 158, 143, 10, 190, 112, 46, 34, 190, 247, 68, 206, 59, 111, 246, 173, 61, 154, 140, 135, 188, 151, 131, 24, 62, 246, 33, 139, 61, 252, 117, 50, 62, 5, 88, 196, 189, 165, 31, 37, 190, 162, 247, 27, 62, 192, 75, 51, 190, 54, 121, 50, 190, 244, 196, 226, 189, 185, 191, 230, 61, 18, 185, 154, 60, 234, 28, 101, 189, 220, 248, 103, 188, 214, 193, 160, 188, 140, 198, 77, 61, 10, 143, 138, 61, 223, 197, 59, 61, 130, 165, 185, 61, 76, 223, 94, 61, 250, 116, 12, 190, 35, 199, 39, 190, 234, 165, 152, 61, 17, 225, 150, 61, 255, 7, 87, 61, 163, 251, 12, 190, 241, 213, 41, 61, 176, 191, 232, 60, 174, 255, 9, 190, 41, 188, 250, 189, 113, 93, 88, 60, 253, 226, 164, 189, 75, 106, 206, 189, 215, 222, 165, 189, 124, 62, 46, 189, 154, 197, 175, 189, 192, 218, 149, 60, 121, 62, 20, 190, 240, 94, 72, 60, 12, 119, 4, 62, 112, 204, 35, 62, 154, 110, 167, 60, 160, 215, 19, 190, 225, 249, 227, 189, 9, 19, 223, 61, 219, 15, 246, 188, 63, 174, 55, 61, 126, 112, 172, 189, 199, 20, 18, 62, 124, 132, 5, 62, 57, 181, 226, 61, 160, 216, 184, 61, 231, 223, 24, 190, 71, 30, 197, 60, 143, 104, 77, 189, 54, 147, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 147, 228, 206, 61, 106, 218, 228, 61, 37, 118, 145, 60, 192, 229, 14, 61, 71, 29, 31, 62, 82, 156, 16, 190, 108, 183, 210, 189, 208, 0, 199, 188, 198, 165, 147, 61, 112, 224, 70, 61, 212, 114, 51, 61, 51, 193, 0, 190, 80, 133, 149, 189, 57, 132, 10, 62, 118, 58, 10, 62, 99, 239, 13, 59, 29, 62, 131, 188, 110, 38, 21, 62, 140, 136, 34, 60, 19, 24, 23, 190, 96, 171, 196, 189, 220, 102, 148, 61, 200, 164, 0, 190, 129, 34, 154, 188, 113, 104, 27, 190, 115, 49, 39, 62, 180, 213, 0, 190, 111, 3, 217, 60, 41, 106, 222, 61, 45, 219, 15, 190, 239, 90, 192, 189, 218, 158, 54, 61, 98, 202, 37, 62, 193, 168, 41, 190, 100, 18, 54, 189, 71, 124, 2, 189, 193, 167, 12, 190, 4, 32, 238, 61, 49, 181, 192, 61, 33, 13, 168, 60, 147, 95, 134, 61, 181, 210, 246, 59, 56, 237, 209, 60, 84, 217, 132, 61, 119, 92, 3, 190, 245, 113, 151, 189, 27, 155, 206, 189, 80, 228, 249, 61, 73, 237, 13, 62, 10, 241, 214, 189, 6, 154, 73, 189, 35, 105, 181, 61, 234, 218, 112, 189, 0, 236, 65, 61, 198, 183, 9, 190, 9, 205, 221, 189, 105, 242, 0, 190, 234, 146, 61, 189, 37, 173, 99, 189, 234, 230, 4, 190, 29, 195, 188, 61, 185, 142, 43, 62, 37, 83, 182, 61, 16, 40, 151, 60, 248, 114, 83, 61, 224, 58, 85, 60, 192, 29, 234, 189, 120, 245, 154, 189, 16, 85, 97, 61, 43, 124, 107, 61, 83, 179, 31, 187, 118, 202, 102, 61, 254, 16, 48, 190, 19, 127, 28, 62, 202, 131, 189, 60, 161, 22, 191, 189, 229, 212, 41, 190, 95, 21, 61, 189, 219, 178, 40, 190, 19, 138, 40, 62, 93, 199, 73, 61, 26, 115, 141, 189, 200, 25, 198, 189, 181, 237, 170, 189, 176, 102, 43, 62, 223, 166, 34, 190, 235, 25, 129, 61, 13, 0, 255, 189, 136, 146, 73, 60, 82, 16, 86, 189, 69, 90, 10, 190, 195, 20, 164, 61, 230, 211, 21, 190, 212, 160, 47, 190, 221, 199, 164, 189, 192, 201, 124, 61, 172, 22, 138, 189, 36, 150, 186, 189, 182, 12, 31, 60, 159, 17, 44, 62, 108, 154, 129, 187, 32, 12, 216, 187, 46, 242, 25, 190, 45, 56, 239, 61, 255, 159, 240, 189, 177, 31, 212, 189, 153, 58, 192, 61, 162, 81, 167, 188, 37, 125, 188, 60, 214, 181, 157, 189, 222, 15, 210, 61, 164, 80, 51, 189, 148, 213, 9, 189, 177, 119, 233, 61, 169, 201, 99, 61, 196, 64, 246, 189, 247, 74, 208, 60, 143, 214, 153, 189, 106, 102, 117, 61, 32, 140, 188, 60, 219, 249, 48, 61, 30, 204, 146, 188, 146, 90, 88, 61, 195, 217, 104, 188, 71, 7, 15, 62, 82, 241, 104, 189, 13, 56, 48, 190, 61, 24, 253, 61, 90, 254, 191, 189, 240, 161, 45, 190, 38, 12, 23, 62, 143, 103, 30, 61, 86, 10, 21, 62, 117, 64, 189, 188, 135, 245, 151, 189, 135, 228, 155, 189, 108, 204, 45, 62, 181, 178, 207, 61, 26, 206, 15, 59, 185, 220, 224, 61, 2, 134, 21, 62, 34, 168, 2, 62, 79, 81, 50, 190, 83, 80, 223, 188, 141, 124, 63, 61, 34, 171, 0, 62, 240, 76, 148, 61, 108, 228, 212, 61, 84, 233, 26, 190, 112, 130, 24, 189, 211, 41, 203, 58, 36, 78, 229, 189, 224, 86, 37, 62, 180, 68, 22, 190, 166, 115, 170, 60, 42, 67, 38, 61, 37, 146, 13, 190, 208, 213, 126, 189, 66, 155, 28, 62, 219, 152, 127, 61, 119, 56, 20, 62, 217, 220, 51, 189, 94, 105, 35, 190, 73, 135, 5, 189, 14, 131, 213, 61, 15, 144, 129, 188, 206, 199, 103, 61, 183, 155, 125, 185, 13, 31, 52, 190, 178, 82, 137, 61, 159, 18, 49, 62, 181, 164, 207, 61, 107, 95, 190, 189, 10, 213, 78, 61, 153, 89, 36, 62, 2, 114, 249, 189, 250, 199, 32, 188, 210, 145, 52, 190, 107, 149, 8, 62, 119, 81, 251, 189, 213, 227, 52, 62, 129, 176, 52, 189, 126, 46, 135, 188, 43, 105, 33, 190, 251, 95, 151, 189, 189, 127, 249, 61, 19, 235, 197, 61, 247, 84, 151, 57, 17, 9, 202, 189, 118, 184, 28, 62, 118, 200, 42, 62, 85, 18, 216, 61, 237, 200, 5, 62, 54, 199, 199, 189, 15, 236, 121, 189, 128, 241, 35, 62, 88, 179, 160, 189, 62, 44, 44, 189, 214, 191, 147, 189, 26, 220, 52, 62, 3, 13, 7, 61, 121, 51, 7, 62, 247, 144, 41, 62, 87, 251, 135, 189, 228, 11, 1, 190, 239, 213, 179, 61, 15, 26, 199, 61, 168, 30, 43, 62, 185, 7, 204, 188, 71, 130, 63, 60, 75, 247, 250, 189, 176, 236, 234, 189, 188, 92, 4, 60, 48, 218, 229, 61, 59, 45, 175, 61, 114, 206, 63, 61, 247, 82, 195, 60, 227, 137, 33, 62, 32, 178, 78, 61, 1, 195, 58, 189, 248, 213, 45, 62, 65, 65, 206, 59, 117, 111, 158, 61, 52, 169, 38, 190, 167, 139, 181, 60, 94, 175, 49, 62, 62, 121, 209, 189, 182, 208, 158, 189, 216, 187, 1, 190, 202, 65, 247, 61, 41, 109, 168, 61, 144, 95, 34, 62, 105, 171, 29, 189, 74, 159, 42, 61, 177, 224, 150, 61, 167, 99, 37, 61, 190, 254, 43, 62, 21, 35, 29, 190, 236, 150, 139, 61, 54, 101, 14, 61, 236, 75, 12, 190, 5, 80, 209, 187, 58, 173, 249, 61, 10, 156, 15, 62, 2, 52, 133, 189, 202, 107, 207, 189, 253, 84, 25, 62, 139, 125, 110, 61, 223, 115, 56, 189, 213, 11, 202, 61, 204, 175, 131, 189, 239, 1, 246, 61, 145, 83, 167, 61, 157, 219, 242, 188, 47, 24, 203, 189, 125, 104, 88, 189, 15, 32, 20, 62, 23, 235, 34, 62, 106, 101, 139, 61, 128, 114, 13, 190, 168, 93, 30, 190, 15, 100, 86, 61, 176, 245, 128, 61, 149, 101, 3, 62, 20, 168, 70, 189, 61, 242, 27, 62, 244, 170, 43, 190, 81, 85, 6, 190, 235, 34, 132, 189, 253, 153, 14, 189, 38, 86, 250, 186, 116, 119, 150, 61, 213, 214, 26, 190, 36, 212, 64, 189, 86, 251, 197, 60, 166, 91, 61, 189, 134, 252, 251, 61, 129, 177, 202, 61, 82, 19, 104, 189, 206, 11, 25, 190, 184, 129, 26, 61, 242, 0, 125, 61, 37, 149, 225, 61, 18, 48, 68, 61, 221, 85, 241, 188, 73, 110, 33, 190, 92, 203, 70, 189, 52, 54, 116, 189, 33, 5, 198, 189, 1, 152, 3, 190, 115, 121, 14, 187, 246, 56, 250, 189, 119, 122, 193, 188, 20, 63, 191, 61, 142, 173, 69, 61, 63, 118, 153, 61, 75, 60, 13, 61, 189, 171, 91, 61, 4, 120, 37, 62, 180, 231, 18, 190, 137, 111, 139, 61, 17, 69, 43, 190, 82, 72, 24, 61, 70, 165, 2, 62, 104, 26, 130, 187, 230, 90, 185, 61, 141, 3, 13, 62, 97, 48, 230, 61, 96, 163, 162, 60, 138, 86, 224, 189, 105, 196, 178, 189, 189, 211, 43, 190, 49, 127, 168, 61, 228, 195, 240, 60, 221, 220, 69, 61, 168, 28, 1, 62, 191, 113, 150, 189, 33, 115, 159, 188, 181, 122, 196, 189, 207, 78, 16, 62, 226, 91, 170, 61, 241, 75, 220, 61, 149, 86, 31, 62, 150, 221, 37, 187, 5, 140, 226, 189, 105, 16, 46, 62, 147, 244, 10, 190, 147, 27, 177, 61, 218, 105, 129, 188, 246, 167, 23, 60, 212, 179, 6, 60, 122, 227, 114, 189, 152, 206, 238, 60, 120, 214, 163, 189, 215, 147, 179, 60, 74, 174, 204, 60, 215, 220, 185, 189, 102, 55, 120, 189, 90, 58, 180, 61, 135, 161, 9, 62, 182, 43, 197, 61, 60, 65, 232, 189, 190, 97, 60, 187, 232, 134, 0, 62, 89, 12, 4, 190, 82, 82, 22, 189, 182, 223, 15, 62, 196, 244, 253, 60, 55, 248, 229, 189, 27, 200, 79, 60, 183, 66, 63, 189, 76, 79, 193, 61, 47, 165, 47, 60, 84, 132, 7, 190, 152, 203, 61, 189, 247, 218, 197, 61, 181, 52, 38, 190, 205, 55, 136, 61, 152, 223, 105, 189, 129, 118, 209, 189, 180, 13, 40, 60, 131, 68, 17, 190, 82, 189, 151, 61, 68, 190, 43, 61, 76, 49, 158, 61, 209, 252, 10, 189, 7, 200, 180, 188, 201, 113, 163, 188, 192, 186, 35, 190, 224, 74, 89, 61, 93, 151, 83, 189, 156, 181, 226, 61, 182, 123, 210, 61, 43, 108, 26, 62, 44, 19, 151, 189, 110, 175, 223, 61, 120, 103, 9, 61, 150, 90, 227, 189, 10, 254, 179, 189, 138, 28, 0, 61, 34, 237, 108, 189, 211, 89, 202, 61, 182, 116, 31, 189, 17, 182, 11, 62, 2, 80, 98, 189, 155, 230, 38, 62, 198, 114, 210, 60, 26, 219, 152, 61, 62, 181, 48, 60, 153, 44, 210, 189, 87, 110, 46, 190, 28, 22, 254, 61, 19, 170, 178, 189, 199, 43, 252, 188, 194, 59, 234, 189, 41, 169, 188, 60, 202, 243, 158, 189, 53, 243, 38, 62, 155, 104, 1, 62, 167, 240, 29, 190, 3, 62, 247, 188, 73, 210, 200, 61, 141, 202, 12, 62, 22, 101, 208, 187, 242, 108, 234, 189, 160, 113, 14, 62, 181, 123, 216, 189, 99, 5, 220, 60, 87, 143, 173, 189, 117, 238, 14, 62, 176, 237, 244, 61, 226, 240, 132, 61, 95, 240, 163, 189, 215, 174, 207, 189, 193, 77, 249, 61, 197, 168, 187, 189, 250, 217, 55, 61, 152, 108, 185, 189, 4, 197, 11, 59, 184, 189, 10, 62, 105, 14, 139, 189, 157, 154, 202, 61, 101, 222, 170, 189, 101, 209, 71, 189, 142, 58, 139, 188, 213, 14, 201, 60, 225, 62, 203, 189, 182, 191, 247, 61, 250, 206, 253, 189, 71, 255, 219, 189, 131, 230, 48, 190, 56, 115, 208, 189, 100, 18, 39, 190, 194, 245, 144, 187, 152, 45, 215, 189, 29, 0, 6, 62, 109, 119, 194, 189, 67, 68, 33, 190, 200, 20, 47, 62, 30, 147, 115, 189, 112, 114, 45, 61, 63, 254, 58, 187, 140, 6, 3, 62, 15, 44, 6, 190, 217, 113, 216, 61, 217, 123, 46, 60, 144, 206, 185, 61, 226, 211, 50, 189, 55, 242, 30, 190, 231, 169, 150, 61, 253, 134, 83, 61, 162, 187, 159, 188, 62, 135, 247, 60, 53, 103, 10, 62, 215, 145, 45, 61, 212, 136, 22, 62, 22, 114, 213, 61, 219, 236, 22, 62, 58, 99, 29, 62, 14, 254, 30, 62, 26, 207, 175, 188, 248, 135, 146, 189, 39, 187, 161, 189, 199, 95, 93, 188, 67, 143, 221, 189, 42, 67, 177, 61, 165, 198, 36, 190, 214, 206, 27, 190, 141, 218, 26, 189, 94, 185, 209, 189, 164, 91, 65, 188, 54, 128, 218, 187, 98, 159, 177, 59, 191, 203, 230, 189, 166, 160, 80, 189, 8, 43, 210, 189, 205, 234, 245, 189, 90, 132, 65, 189, 233, 91, 230, 60, 234, 32, 180, 189, 255, 233, 213, 188, 145, 91, 233, 189, 152, 69, 14, 62, 118, 125, 204, 189, 141, 18, 37, 62, 160, 30, 141, 61, 33, 249, 11, 190, 17, 38, 224, 186, 56, 87, 213, 189, 35, 203, 219, 59, 244, 76, 74, 189, 20, 38, 73, 61, 10, 139, 50, 62, 80, 68, 36, 190, 208, 51, 148, 61, 253, 221, 189, 59, 50, 28, 33, 62, 58, 0, 182, 61, 36, 247, 40, 190, 121, 65, 240, 60, 235, 253, 130, 61, 253, 198, 7, 62, 50, 114, 158, 61, 233, 85, 153, 189, 73, 219, 111, 189, 0, 137, 196, 61, 187, 95, 20, 189, 46, 124, 165, 57, 26, 186, 202, 58, 98, 198, 43, 190, 155, 228, 249, 189, 33, 118, 23, 190, 199, 91, 237, 189, 102, 34, 43, 190, 148, 213, 13, 62, 212, 119, 18, 62, 199, 210, 45, 190, 92, 243, 30, 190, 105, 6, 103, 57, 122, 147, 43, 62, 197, 235, 37, 61, 204, 2, 0, 190, 45, 133, 232, 61, 33, 79, 116, 61, 210, 81, 18, 62, 107, 198, 6, 190, 77, 83, 222, 61, 36, 28, 42, 190, 75, 0, 146, 188, 206, 225, 166, 189, 185, 134, 16, 62, 169, 75, 7, 62, 113, 27, 83, 189, 6, 33, 255, 60, 146, 13, 49, 62, 98, 79, 6, 62, 7, 84, 25, 61, 224, 6, 52, 62, 0, 65, 26, 62, 202, 201, 87, 188, 174, 103, 15, 189, 173, 66, 239, 189, 207, 160, 9, 62, 246, 120, 78, 61, 163, 154, 202, 61, 183, 218, 169, 189, 195, 115, 19, 62, 200, 163, 148, 61, 57, 253, 114, 61, 99, 36, 245, 60, 22, 10, 40, 190, 141, 18, 204, 60, 212, 49, 154, 61, 35, 175, 24, 61, 146, 70, 0, 60, 216, 61, 134, 61, 209, 56, 86, 188, 9, 85, 33, 62, 204, 211, 31, 190, 217, 253, 217, 61, 171, 254, 185, 188, 73, 63, 224, 189, 149, 118, 72, 189, 181, 178, 39, 62, 90, 212, 244, 60, 217, 10, 213, 61, 192, 210, 162, 60, 11, 124, 93, 189, 105, 216, 50, 62, 34, 49, 25, 190, 100, 231, 244, 61, 161, 77, 12, 190, 112, 134, 237, 189, 24, 199, 246, 189, 117, 255, 27, 189, 28, 44, 46, 190, 217, 212, 2, 62, 129, 5, 11, 190, 237, 162, 124, 61, 213, 19, 141, 60, 193, 199, 246, 189, 0, 255, 114, 189, 109, 41, 111, 189, 59, 130, 242, 61, 238, 203, 203, 59, 90, 39, 251, 189, 204, 64, 230, 61, 141, 213, 36, 190, 160, 33, 65, 189, 46, 224, 32, 190, 154, 35, 5, 190, 49, 27, 185, 61, 160, 21, 12, 190, 189, 21, 121, 189, 156, 1, 117, 61, 47, 65, 51, 62, 147, 40, 25, 190, 88, 7, 110, 61, 14, 194, 47, 190, 39, 52, 183, 189, 63, 15, 36, 190, 163, 100, 121, 189, 134, 159, 19, 190, 131, 31, 76, 189, 97, 244, 146, 187, 204, 32, 138, 189, 117, 45, 126, 189, 125, 241, 187, 60, 230, 194, 10, 190, 225, 93, 183, 61, 247, 34, 171, 61, 40, 149, 0, 62, 123, 86, 159, 61, 116, 68, 48, 62, 6, 81, 16, 189, 8, 127, 3, 61, 19, 49, 45, 61, 38, 168, 42, 60, 141, 101, 92, 61, 169, 43, 45, 189, 159, 174, 156, 61, 167, 104, 97, 189, 89, 18, 146, 188, 135, 104, 2, 62, 170, 22, 29, 188, 207, 238, 155, 61, 56, 194, 35, 62, 74, 13, 148, 61, 98, 210, 44, 190, 144, 180, 183, 189, 80, 60, 11, 189, 66, 78, 170, 60, 136, 161, 193, 61, 175, 32, 48, 62, 33, 168, 21, 62, 31, 147, 35, 190, 235, 191, 243, 61, 151, 140, 128, 189, 237, 223, 113, 61, 59, 161, 89, 61, 167, 113, 167, 189, 203, 250, 0, 62, 37, 119, 252, 189, 147, 173, 57, 189, 117, 86, 166, 60, 58, 18, 175, 61, 131, 99, 228, 189, 106, 60, 195, 189, 59, 18, 187, 61, 12, 244, 161, 61, 174, 100, 142, 61, 253, 139, 128, 61, 193, 242, 159, 189, 88, 200, 248, 61, 248, 206, 0, 190, 198, 126, 214, 61, 162, 3, 160, 189, 252, 69, 135, 189, 46, 58, 253, 60, 153, 47, 36, 62, 246, 177, 97, 60, 74, 144, 207, 189, 168, 32, 37, 61, 164, 137, 30, 62, 51, 255, 120, 189, 46, 77, 138, 61, 75, 5, 145, 61, 184, 170, 108, 61, 198, 96, 210, 189, 225, 193, 153, 189, 171, 236, 129, 60, 51, 83, 176, 188, 237, 137, 142, 189, 48, 104, 33, 62, 137, 18, 54, 60, 223, 61, 198, 61, 146, 6, 50, 190, 19, 65, 44, 62, 252, 14, 19, 190, 139, 18, 201, 60, 130, 41, 142, 189, 6, 28, 136, 61, 193, 39, 231, 61, 238, 237, 47, 62, 143, 164, 151, 61, 141, 165, 55, 189, 224, 17, 5, 190, 147, 65, 42, 62, 157, 119, 105, 189, 40, 208, 25, 62, 32, 231, 52, 190, 103, 121, 4, 189, 36, 38, 42, 190, 244, 60, 9, 61, 79, 29, 175, 189, 55, 74, 225, 61, 246, 169, 246, 61, 114, 246, 40, 62, 81, 10, 151, 189, 16, 98, 33, 61, 18, 110, 235, 187, 122, 255, 36, 62, 23, 50, 191, 189, 223, 111, 109, 60, 36, 93, 0, 189, 144, 186, 169, 61, 240, 46, 233, 189, 84, 16, 31, 62, 180, 99, 183, 61, 146, 220, 170, 189, 232, 5, 31, 60, 26, 251, 15, 62, 216, 123, 158, 60, 245, 253, 241, 189, 153, 228, 10, 188, 158, 212, 74, 59, 191, 103, 53, 61, 88, 19, 0, 62, 39, 9, 232, 189, 214, 229, 222, 60, 203, 130, 36, 62, 182, 155, 54, 61, 81, 135, 228, 61, 21, 249, 46, 190, 38, 167, 138, 61, 152, 65, 173, 61, 224, 184, 32, 190, 254, 236, 173, 189, 84, 66, 12, 189, 200, 166, 130, 61, 86, 152, 5, 190, 19, 144, 252, 60, 57, 254, 17, 190, 75, 79, 41, 190, 197, 125, 12, 61, 123, 166, 47, 190, 42, 30, 183, 189, 239, 93, 38, 190, 117, 204, 208, 189, 84, 229, 33, 62, 198, 132, 199, 189, 251, 110, 87, 189, 112, 62, 202, 189, 109, 28, 19, 190, 196, 63, 5, 190, 158, 114, 87, 61, 193, 191, 32, 62, 119, 131, 48, 62, 116, 96, 236, 61, 84, 95, 228, 189, 51, 233, 30, 61, 113, 170, 209, 61, 196, 96, 231, 189, 190, 113, 249, 61, 149, 136, 177, 58, 110, 96, 12, 62, 28, 61, 190, 189, 94, 221, 116, 189, 171, 248, 85, 61, 240, 3, 224, 61, 250, 199, 175, 189, 50, 114, 108, 189, 222, 14, 85, 189, 139, 172, 209, 61, 137, 21, 59, 189, 248, 158, 189, 189, 139, 174, 19, 190, 128, 90, 67, 61, 68, 0, 170, 61, 157, 120, 64, 186, 99, 162, 12, 61, 15, 92, 124, 61, 94, 179, 109, 189, 191, 210, 211, 61, 33, 103, 175, 189, 236, 141, 10, 190, 180, 49, 75, 189, 224, 204, 167, 189, 248, 139, 247, 60, 127, 91, 49, 62, 61, 134, 52, 190, 72, 248, 44, 62, 70, 167, 132, 189, 113, 147, 15, 189, 191, 162, 227, 189, 52, 0, 151, 61, 1, 132, 37, 188, 78, 111, 170, 189, 20, 128, 189, 188, 7, 217, 5, 190, 225, 6, 1, 62, 68, 117, 100, 189, 227, 57, 31, 190, 60, 4, 153, 61, 250, 251, 173, 189, 85, 184, 36, 190, 11, 237, 110, 61, 208, 228, 207, 188, 112, 73, 12, 190, 92, 149, 28, 62, 183, 177, 26, 61, 24, 234, 253, 61, 144, 195, 171, 189, 49, 252, 240, 60, 13, 120, 21, 62, 126, 116, 119, 189, 129, 14, 247, 60, 128, 40, 0, 190, 8, 35, 47, 62, 113, 177, 22, 62, 140, 101, 246, 189, 19, 105, 190, 189, 47, 107, 193, 61, 141, 140, 31, 190, 240, 148, 159, 61, 128, 180, 89, 61, 22, 130, 1, 190, 118, 254, 133, 189, 37, 147, 156, 189, 206, 40, 255, 189, 32, 23, 246, 61, 77, 235, 44, 190, 93, 171, 39, 190, 214, 34, 179, 61, 94, 193, 83, 60, 255, 235, 15, 62, 169, 40, 229, 61, 14, 85, 82, 61, 144, 153, 217, 60, 211, 38, 209, 189, 95, 162, 183, 61, 219, 153, 33, 62, 137, 54, 95, 60, 195, 167, 1, 190, 75, 236, 196, 187, 72, 161, 230, 61, 8, 87, 212, 61, 43, 80, 179, 189, 247, 243, 84, 189, 114, 174, 49, 190, 84, 82, 37, 62, 218, 139, 173, 189, 217, 2, 209, 189, 54, 91, 47, 190, 218, 136, 15, 62, 39, 227, 243, 61, 240, 83, 195, 59, 193, 17, 5, 62, 54, 89, 50, 190, 181, 36, 49, 62, 199, 255, 28, 190, 78, 169, 18, 190, 133, 8, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 5, 153, 188, 95, 132, 225, 61, 59, 24, 36, 190, 91, 153, 124, 188, 179, 41, 120, 61, 182, 65, 32, 190, 174, 57, 163, 187, 26, 236, 229, 189, 26, 36, 71, 187, 42, 107, 215, 189, 78, 152, 48, 190, 15, 218, 50, 62, 196, 40, 117, 60, 147, 148, 75, 61, 226, 164, 113, 59, 115, 174, 163, 189, 209, 74, 253, 189, 103, 7, 250, 189, 239, 239, 14, 190, 127, 250, 44, 61, 136, 70, 146, 189, 187, 66, 41, 190, 131, 226, 199, 188, 34, 90, 201, 189, 228, 231, 31, 189, 36, 21, 161, 60, 113, 74, 98, 189, 221, 126, 69, 61, 69, 86, 1, 62, 157, 166, 183, 61, 129, 58, 252, 61, 224, 181, 92, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 127, 51, 190, 45, 203, 195, 60, 83, 21, 120, 61, 103, 31, 149, 61, 204, 162, 8, 62, 210, 30, 232, 60, 118, 177, 36, 188, 251, 27, 90, 61, 119, 195, 241, 61, 252, 96, 202, 189, 168, 12, 39, 62, 121, 116, 28, 188, 65, 18, 155, 60, 164, 182, 68, 189, 43, 99, 207, 187, 253, 133, 71, 61, 178, 40, 6, 190, 58, 73, 3, 189, 94, 163, 231, 61, 222, 197, 221, 189, 14, 142, 212, 61, 137, 16, 187, 189, 117, 71, 203, 188, 36, 134, 13, 62, 157, 110, 16, 186, 218, 143, 138, 189, 103, 156, 177, 189, 82, 236, 3, 62, 198, 34, 214, 61, 161, 49, 30, 62, 12, 60, 62, 189, 66, 91, 125, 61, 10, 135, 170, 61, 10, 155, 157, 61, 0, 249, 202, 61, 111, 57, 233, 61, 46, 118, 48, 190, 236, 250, 238, 60, 103, 167, 160, 189, 58, 72, 80, 188, 61, 237, 231, 189, 25, 236, 13, 190, 181, 171, 48, 190, 56, 40, 8, 62, 212, 206, 87, 189, 206, 8, 8, 62, 48, 163, 95, 61, 72, 35, 50, 62, 192, 201, 194, 189, 149, 184, 249, 189, 12, 155, 26, 190, 200, 109, 211, 189, 220, 124, 15, 62, 197, 151, 106, 61, 15, 215, 2, 190, 201, 156, 201, 187, 96, 107, 47, 190, 210, 137, 40, 62, 163, 119, 6, 61, 234, 48, 16, 190, 253, 247, 134, 61, 224, 138, 102, 189, 7, 134, 5, 62, 70, 108, 19, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 116, 49, 61, 141, 228, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 169, 206, 63, 235, 60, 176, 63, 0, 143, 31, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 157, 2, 62, 46, 178, 176, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}