// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 112, 54, 191, 11, 255, 156, 191, 168, 51, 164, 189, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 210, 43, 190, 62, 31, 155, 130, 191, 150, 92, 139, 190, 95, 7, 178, 190, 5, 150, 132, 191, 61, 197, 108, 190, 92, 66, 185, 190, 102, 79, 133, 191, 65, 5, 15, 63, 95, 177, 75, 62, 173, 110, 9, 63, 36, 133, 171, 190, 239, 203, 12, 190, 216, 189, 18, 62, 25, 134, 245, 190, 26, 142, 4, 61, 93, 17, 89, 62, 179, 22, 25, 191, 13, 53, 98, 189, 56, 133, 194, 62, 112, 228, 232, 190, 102, 207, 100, 190, 208, 68, 170, 63, 37, 35, 182, 62, 199, 185, 30, 63, 9, 225, 248, 61, 194, 195, 64, 191, 240, 180, 107, 62, 235, 51, 164, 191, 225, 151, 220, 190, 100, 227, 148, 190, 205, 119, 101, 191, 50, 53, 187, 62, 100, 70, 107, 190, 27, 142, 22, 63, 158, 62, 174, 190, 94, 112, 182, 190, 129, 76, 61, 190, 159, 248, 139, 61, 156, 105, 254, 190, 101, 118, 28, 191, 77, 207, 57, 63, 98, 53, 14, 63, 80, 190, 140, 190, 218, 170, 182, 62, 170, 105, 218, 62, 145, 65, 112, 191, 127, 178, 240, 190, 114, 209, 158, 190, 86, 204, 239, 190, 23, 109, 82, 62, 175, 20, 189, 62, 113, 172, 132, 191, 15, 27, 86, 190, 224, 156, 56, 191, 125, 124, 193, 190, 212, 153, 158, 61, 187, 209, 12, 191, 225, 245, 62, 63, 92, 180, 128, 61, 33, 232, 232, 190, 128, 224, 218, 62, 132, 109, 161, 186, 92, 129, 94, 190, 101, 10, 160, 62, 87, 82, 145, 62, 30, 163, 75, 63, 143, 109, 34, 191, 198, 153, 149, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 144, 66, 244, 62, 75, 129, 153, 189, 4, 207, 129, 190, 184, 170, 75, 63, 254, 95, 94, 63, 127, 96, 20, 63, 170, 175, 12, 191, 189, 54, 128, 63, 246, 114, 175, 189, 104, 159, 248, 189, 161, 178, 150, 190, 190, 60, 86, 191, 215, 226, 77, 190, 114, 171, 119, 191, 47, 64, 45, 61, 240, 127, 40, 62, 199, 141, 148, 62, 169, 196, 14, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 63, 208, 190, 9, 231, 173, 190, 255, 31, 87, 189, 54, 216, 2, 61, 80, 180, 125, 190, 140, 150, 17, 188, 179, 136, 76, 62, 219, 243, 207, 189, 154, 120, 26, 191, 230, 102, 37, 191, 254, 162, 16, 63, 41, 245, 158, 190, 178, 113, 194, 189, 37, 136, 215, 62, 206, 2, 10, 63, 209, 103, 233, 190, 225, 135, 81, 63, 64, 181, 131, 60, 213, 141, 78, 190, 231, 54, 1, 190, 250, 200, 52, 62, 85, 253, 35, 63, 115, 10, 28, 63, 80, 249, 226, 62, 248, 147, 247, 189, 250, 74, 164, 190, 204, 97, 231, 190, 67, 36, 22, 190, 68, 86, 76, 61, 0, 239, 127, 190, 61, 177, 128, 62, 55, 33, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 111, 173, 189, 149, 125, 21, 190, 136, 126, 156, 189, 48, 193, 80, 61, 167, 30, 14, 191, 61, 243, 100, 189, 63, 82, 226, 60, 150, 203, 57, 62, 175, 86, 141, 189, 249, 209, 86, 62, 214, 128, 32, 62, 198, 151, 207, 61, 228, 170, 111, 61, 239, 31, 184, 61, 154, 158, 248, 189, 231, 143, 44, 191, 252, 64, 155, 191, 231, 2, 159, 189, 42, 156, 109, 190, 114, 162, 63, 190, 202, 44, 204, 61, 25, 71, 142, 61, 24, 128, 196, 61, 208, 231, 186, 190, 202, 182, 217, 62, 247, 99, 60, 60, 245, 90, 25, 189, 184, 251, 165, 190, 201, 242, 194, 189, 84, 91, 140, 62, 192, 16, 136, 61, 65, 70, 97, 59, 13, 188, 12, 190, 33, 146, 54, 61, 217, 124, 225, 189, 152, 100, 0, 190, 78, 96, 68, 189, 199, 242, 29, 190, 200, 120, 73, 187, 133, 81, 178, 189, 130, 37, 38, 190, 69, 90, 27, 190, 212, 203, 25, 61, 160, 102, 147, 189, 42, 149, 143, 60, 138, 110, 231, 61, 162, 179, 74, 190, 184, 158, 27, 190, 206, 84, 0, 190, 85, 182, 12, 61, 182, 78, 200, 61, 106, 252, 204, 60, 190, 120, 13, 189, 46, 177, 97, 189, 137, 133, 13, 190, 145, 96, 40, 61, 215, 81, 190, 188, 255, 112, 165, 189, 242, 37, 52, 190, 56, 52, 255, 61, 12, 86, 99, 61, 97, 131, 50, 190, 25, 5, 171, 61, 79, 100, 245, 59, 232, 221, 236, 190, 5, 150, 62, 61, 39, 19, 44, 62, 51, 181, 180, 190, 127, 235, 141, 62, 77, 127, 27, 191, 59, 46, 162, 61, 44, 64, 30, 62, 231, 215, 132, 190, 33, 22, 128, 190, 25, 185, 148, 190, 135, 41, 108, 62, 240, 199, 151, 190, 226, 43, 132, 62, 1, 158, 237, 60, 117, 25, 167, 62, 141, 238, 36, 190, 105, 167, 39, 62, 200, 110, 19, 60, 175, 168, 0, 63, 158, 212, 39, 62, 91, 149, 63, 61, 112, 75, 189, 61, 109, 214, 90, 62, 157, 171, 7, 63, 9, 95, 6, 190, 255, 84, 189, 189, 255, 156, 160, 190, 157, 65, 84, 62, 140, 145, 72, 190, 74, 119, 25, 62, 2, 201, 131, 190, 105, 183, 196, 61, 68, 42, 69, 189, 165, 104, 31, 62, 33, 138, 8, 189, 132, 218, 142, 190, 254, 15, 128, 62, 195, 10, 17, 62, 111, 176, 138, 62, 117, 44, 6, 63, 167, 210, 62, 190, 249, 38, 46, 62, 166, 147, 156, 189, 194, 120, 42, 61, 6, 102, 228, 61, 163, 44, 182, 61, 188, 224, 15, 190, 3, 165, 218, 188, 72, 19, 185, 61, 56, 236, 130, 62, 4, 169, 17, 189, 216, 177, 115, 190, 85, 240, 74, 62, 145, 247, 202, 189, 38, 206, 93, 190, 90, 221, 199, 189, 250, 197, 8, 62, 156, 142, 216, 60, 9, 250, 7, 191, 178, 26, 236, 62, 163, 132, 49, 62, 166, 220, 142, 61, 141, 222, 150, 189, 201, 7, 188, 62, 229, 95, 202, 61, 207, 181, 243, 61, 94, 148, 244, 188, 132, 247, 134, 190, 157, 155, 122, 62, 223, 127, 243, 61, 71, 229, 51, 61, 15, 47, 20, 190, 99, 26, 74, 190, 76, 44, 88, 62, 53, 67, 45, 190, 232, 247, 156, 188, 212, 204, 150, 60, 206, 18, 103, 189, 197, 239, 218, 190, 8, 87, 92, 62, 85, 138, 140, 61, 13, 46, 59, 190, 46, 59, 228, 61, 227, 34, 17, 190, 76, 235, 221, 190, 141, 223, 126, 61, 211, 41, 190, 189, 222, 188, 129, 62, 47, 226, 2, 190, 28, 116, 196, 190, 91, 171, 249, 60, 125, 189, 162, 190, 3, 15, 243, 61, 144, 136, 188, 189, 42, 103, 206, 190, 59, 186, 4, 62, 57, 181, 226, 61, 160, 216, 184, 61, 150, 244, 24, 190, 73, 134, 169, 60, 143, 104, 77, 189, 54, 147, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 147, 228, 206, 61, 67, 224, 223, 61, 37, 118, 145, 60, 8, 139, 9, 61, 22, 95, 27, 62, 213, 13, 19, 190, 108, 183, 210, 189, 8, 40, 209, 188, 198, 165, 147, 61, 206, 40, 65, 61, 64, 147, 48, 61, 85, 81, 1, 190, 119, 239, 152, 189, 57, 132, 10, 62, 118, 58, 10, 62, 99, 239, 13, 59, 171, 35, 141, 188, 110, 38, 21, 62, 140, 136, 34, 60, 17, 157, 24, 190, 26, 189, 200, 189, 215, 46, 231, 189, 234, 23, 238, 189, 13, 175, 174, 59, 94, 192, 188, 190, 217, 79, 189, 62, 135, 173, 73, 190, 120, 142, 164, 61, 19, 192, 144, 61, 56, 121, 200, 190, 129, 20, 158, 189, 79, 40, 206, 61, 137, 210, 136, 60, 207, 244, 144, 190, 173, 61, 202, 61, 43, 254, 252, 60, 205, 161, 234, 61, 200, 254, 210, 62, 215, 189, 51, 62, 153, 249, 145, 61, 235, 210, 143, 60, 156, 233, 184, 61, 80, 238, 61, 61, 151, 146, 3, 62, 48, 224, 203, 189, 141, 155, 163, 61, 196, 21, 167, 189, 11, 244, 83, 190, 101, 158, 9, 60, 209, 105, 179, 188, 41, 38, 61, 190, 6, 192, 117, 60, 176, 220, 15, 190, 43, 182, 123, 60, 198, 183, 9, 190, 9, 205, 221, 189, 105, 242, 0, 190, 246, 253, 183, 189, 37, 173, 99, 189, 234, 230, 4, 190, 29, 195, 188, 61, 39, 71, 29, 62, 237, 170, 108, 61, 16, 40, 151, 60, 248, 114, 83, 61, 183, 81, 173, 188, 102, 205, 10, 190, 213, 239, 214, 189, 78, 175, 235, 59, 74, 83, 205, 60, 83, 179, 31, 187, 122, 197, 216, 60, 254, 16, 48, 190, 236, 76, 245, 61, 79, 168, 246, 187, 203, 129, 243, 189, 215, 208, 76, 190, 227, 16, 59, 189, 219, 178, 40, 190, 19, 138, 40, 62, 60, 86, 142, 60, 177, 200, 188, 189, 200, 25, 198, 189, 111, 86, 189, 189, 118, 240, 6, 62, 53, 213, 112, 190, 134, 17, 129, 61, 208, 171, 60, 190, 131, 183, 97, 61, 65, 179, 255, 190, 83, 80, 86, 62, 18, 22, 31, 62, 40, 53, 54, 189, 52, 171, 18, 62, 119, 107, 14, 191, 174, 204, 97, 62, 141, 62, 179, 189, 235, 54, 86, 190, 10, 119, 198, 61, 83, 178, 131, 61, 249, 59, 92, 190, 31, 61, 126, 190, 177, 111, 55, 190, 80, 110, 73, 61, 21, 167, 16, 190, 14, 59, 86, 190, 231, 110, 90, 60, 211, 251, 46, 61, 255, 99, 222, 188, 224, 190, 29, 191, 222, 15, 210, 61, 204, 249, 253, 189, 54, 111, 19, 191, 219, 207, 61, 62, 48, 71, 119, 62, 66, 178, 215, 190, 153, 180, 11, 190, 33, 248, 202, 61, 153, 218, 71, 61, 220, 201, 0, 189, 84, 40, 175, 61, 92, 151, 35, 190, 186, 103, 132, 62, 136, 12, 36, 189, 183, 194, 208, 60, 39, 150, 168, 189, 108, 199, 205, 189, 146, 244, 54, 62, 126, 148, 102, 190, 90, 214, 82, 190, 10, 180, 29, 62, 234, 148, 10, 62, 77, 199, 236, 188, 76, 4, 70, 62, 120, 164, 204, 189, 14, 27, 197, 189, 13, 62, 116, 61, 82, 130, 78, 62, 141, 204, 130, 61, 85, 110, 67, 62, 252, 45, 67, 62, 86, 96, 97, 62, 117, 124, 66, 190, 182, 89, 47, 190, 63, 64, 19, 62, 117, 5, 40, 62, 193, 202, 106, 61, 238, 29, 45, 61, 179, 223, 66, 190, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 188, 50, 106, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 69, 31, 126, 62, 167, 172, 106, 190, 201, 215, 1, 62, 58, 151, 119, 189, 149, 60, 241, 190, 29, 52, 150, 190, 33, 88, 134, 61, 195, 164, 13, 61, 232, 249, 65, 61, 66, 34, 15, 189, 30, 127, 70, 190, 34, 11, 226, 190, 22, 178, 55, 61, 51, 38, 30, 190, 184, 135, 29, 190, 98, 187, 152, 189, 153, 89, 36, 62, 93, 73, 14, 190, 196, 183, 52, 62, 255, 122, 154, 190, 182, 3, 250, 61, 14, 177, 151, 190, 54, 190, 134, 62, 113, 139, 37, 63, 86, 21, 152, 188, 128, 156, 246, 190, 250, 216, 66, 62, 195, 177, 46, 190, 139, 64, 12, 63, 255, 26, 63, 62, 220, 161, 203, 190, 86, 171, 203, 61, 203, 233, 150, 62, 202, 100, 180, 62, 132, 25, 178, 190, 11, 236, 172, 61, 92, 204, 166, 60, 183, 213, 15, 62, 231, 146, 7, 191, 186, 27, 128, 190, 162, 94, 162, 190, 156, 119, 157, 62, 68, 60, 154, 190, 198, 216, 10, 62, 225, 51, 198, 61, 30, 126, 100, 189, 184, 42, 79, 190, 33, 250, 34, 61, 159, 102, 189, 61, 136, 223, 16, 57, 119, 178, 167, 62, 38, 15, 96, 190, 140, 79, 53, 62, 9, 240, 149, 61, 44, 95, 153, 62, 9, 122, 22, 190, 244, 56, 179, 61, 241, 165, 133, 62, 233, 166, 151, 190, 47, 194, 191, 62, 29, 20, 53, 191, 64, 25, 2, 61, 13, 119, 184, 62, 172, 230, 80, 190, 163, 22, 8, 61, 11, 3, 137, 190, 150, 124, 64, 62, 245, 248, 160, 61, 50, 215, 128, 61, 78, 4, 197, 187, 180, 215, 14, 62, 188, 179, 184, 62, 201, 98, 153, 62, 239, 157, 49, 62, 166, 170, 83, 61, 181, 230, 249, 61, 213, 190, 59, 62, 156, 48, 144, 61, 39, 55, 131, 62, 15, 47, 44, 62, 173, 78, 149, 61, 19, 210, 8, 190, 196, 175, 84, 190, 144, 135, 76, 62, 152, 77, 133, 190, 30, 130, 32, 62, 23, 232, 222, 189, 148, 236, 176, 190, 7, 54, 14, 62, 41, 230, 136, 62, 249, 104, 34, 190, 159, 105, 0, 62, 36, 186, 217, 190, 55, 216, 58, 61, 251, 165, 30, 62, 133, 5, 94, 190, 249, 214, 214, 189, 182, 247, 115, 189, 104, 217, 169, 62, 186, 184, 134, 62, 7, 163, 238, 189, 175, 236, 110, 190, 154, 169, 117, 189, 127, 35, 76, 61, 70, 251, 109, 62, 42, 244, 27, 61, 155, 10, 56, 62, 44, 214, 9, 190, 66, 226, 35, 191, 161, 242, 250, 190, 162, 82, 185, 189, 126, 226, 249, 62, 77, 237, 180, 188, 188, 173, 235, 62, 228, 155, 157, 190, 16, 220, 183, 190, 230, 235, 84, 188, 142, 87, 185, 187, 103, 106, 236, 60, 167, 208, 84, 63, 82, 19, 104, 189, 140, 211, 235, 190, 213, 52, 137, 62, 47, 108, 102, 190, 117, 123, 249, 62, 15, 10, 29, 62, 228, 16, 174, 190, 175, 4, 140, 190, 63, 48, 21, 188, 210, 145, 16, 62, 6, 85, 247, 190, 29, 119, 245, 60, 109, 92, 243, 60, 82, 17, 217, 189, 90, 252, 241, 190, 16, 152, 150, 61, 92, 53, 57, 190, 183, 160, 3, 62, 85, 206, 159, 190, 43, 35, 117, 61, 143, 3, 207, 61, 92, 183, 6, 190, 76, 123, 33, 60, 14, 179, 69, 189, 82, 72, 24, 61, 105, 231, 14, 190, 17, 85, 198, 62, 42, 52, 14, 190, 7, 27, 140, 62, 232, 100, 125, 62, 12, 75, 126, 62, 56, 212, 11, 190, 104, 214, 175, 189, 100, 219, 241, 189, 8, 22, 97, 60, 11, 46, 1, 62, 113, 103, 93, 189, 178, 224, 145, 61, 254, 141, 151, 189, 68, 178, 34, 190, 200, 122, 28, 189, 157, 14, 37, 62, 116, 224, 194, 61, 229, 88, 183, 61, 46, 134, 218, 61, 149, 153, 130, 61, 138, 222, 213, 59, 249, 161, 224, 188, 106, 236, 228, 189, 197, 32, 69, 189, 40, 228, 193, 61, 172, 238, 20, 58, 215, 221, 26, 62, 246, 121, 133, 186, 168, 128, 153, 61, 0, 110, 219, 62, 227, 74, 174, 60, 181, 119, 50, 62, 141, 245, 36, 191, 23, 30, 146, 60, 54, 219, 97, 60, 74, 83, 91, 62, 136, 202, 162, 189, 238, 47, 29, 63, 41, 114, 115, 187, 128, 129, 149, 189, 244, 252, 104, 61, 252, 171, 3, 190, 254, 138, 227, 62, 169, 217, 207, 61, 117, 130, 183, 190, 139, 202, 145, 60, 242, 207, 196, 189, 22, 124, 105, 62, 235, 173, 136, 190, 215, 10, 63, 61, 32, 0, 128, 60, 247, 140, 37, 62, 96, 156, 17, 191, 113, 209, 44, 62, 139, 255, 66, 190, 83, 196, 70, 189, 219, 101, 186, 190, 112, 185, 165, 189, 255, 163, 149, 60, 202, 180, 144, 61, 207, 205, 2, 61, 93, 61, 156, 61, 200, 241, 174, 188, 133, 217, 165, 190, 96, 147, 2, 62, 101, 184, 200, 189, 166, 243, 23, 61, 88, 67, 154, 62, 244, 158, 61, 62, 98, 40, 70, 60, 251, 183, 179, 189, 106, 2, 128, 61, 233, 114, 229, 61, 104, 122, 131, 191, 128, 50, 83, 62, 124, 24, 13, 62, 230, 212, 233, 189, 129, 47, 146, 61, 189, 45, 19, 190, 36, 129, 152, 62, 49, 85, 5, 190, 109, 218, 208, 190, 190, 238, 16, 62, 32, 88, 8, 61, 31, 203, 149, 191, 246, 23, 166, 188, 157, 87, 52, 190, 114, 249, 26, 190, 170, 134, 64, 190, 92, 194, 63, 190, 112, 199, 60, 190, 209, 165, 93, 61, 158, 43, 50, 190, 253, 251, 165, 62, 96, 170, 226, 61, 60, 167, 76, 190, 164, 221, 46, 62, 22, 143, 2, 61, 2, 97, 103, 62, 133, 30, 137, 189, 200, 125, 161, 190, 76, 158, 53, 190, 211, 249, 159, 189, 120, 95, 138, 62, 149, 87, 146, 190, 213, 86, 199, 62, 214, 81, 36, 190, 99, 242, 0, 62, 84, 1, 122, 61, 238, 143, 87, 191, 213, 57, 189, 189, 82, 95, 87, 188, 115, 127, 84, 62, 212, 32, 152, 190, 218, 134, 43, 62, 107, 180, 98, 62, 14, 223, 103, 62, 61, 23, 194, 62, 220, 11, 34, 62, 13, 144, 198, 189, 138, 94, 39, 62, 77, 167, 230, 61, 5, 130, 17, 189, 218, 129, 68, 62, 213, 60, 150, 189, 106, 143, 21, 62, 126, 35, 235, 189, 196, 64, 247, 189, 137, 48, 222, 190, 208, 209, 193, 61, 215, 44, 136, 190, 190, 46, 27, 62, 158, 207, 145, 190, 92, 181, 115, 62, 206, 112, 47, 62, 146, 233, 47, 190, 87, 85, 118, 62, 1, 164, 70, 190, 206, 152, 224, 62, 60, 154, 241, 189, 214, 103, 139, 189, 175, 218, 18, 61, 122, 90, 40, 62, 231, 233, 170, 61, 242, 37, 176, 190, 121, 29, 36, 61, 16, 40, 167, 61, 51, 0, 249, 61, 168, 208, 100, 190, 137, 85, 170, 62, 146, 159, 220, 188, 95, 210, 193, 61, 250, 154, 16, 190, 145, 83, 138, 62, 69, 8, 111, 62, 141, 128, 145, 62, 36, 11, 185, 60, 133, 219, 255, 61, 37, 13, 157, 189, 4, 184, 70, 190, 186, 101, 4, 61, 134, 56, 9, 62, 101, 9, 110, 189, 211, 24, 184, 189, 209, 124, 108, 189, 140, 145, 29, 191, 164, 91, 65, 188, 230, 238, 151, 189, 142, 151, 138, 190, 17, 201, 86, 187, 97, 228, 193, 190, 222, 211, 152, 62, 253, 129, 176, 189, 46, 69, 218, 189, 18, 40, 192, 189, 76, 16, 96, 190, 230, 49, 118, 190, 106, 84, 47, 190, 71, 51, 1, 63, 185, 172, 21, 189, 199, 49, 168, 62, 60, 28, 157, 189, 185, 224, 46, 190, 204, 104, 128, 60, 102, 3, 102, 190, 218, 185, 217, 61, 43, 55, 26, 61, 143, 104, 18, 62, 240, 44, 84, 62, 146, 172, 161, 190, 208, 51, 148, 61, 190, 56, 102, 59, 137, 129, 166, 61, 250, 227, 130, 62, 141, 212, 37, 191, 246, 147, 149, 61, 13, 73, 245, 60, 36, 211, 109, 63, 50, 114, 158, 61, 212, 132, 209, 190, 65, 143, 33, 62, 215, 200, 85, 188, 138, 79, 223, 62, 50, 41, 244, 61, 236, 169, 129, 190, 179, 40, 17, 190, 21, 26, 245, 60, 41, 113, 30, 61, 234, 15, 232, 190, 219, 83, 200, 62, 143, 90, 74, 62, 238, 173, 247, 61, 90, 23, 58, 191, 208, 77, 157, 190, 173, 154, 116, 190, 74, 203, 182, 62, 227, 182, 214, 190, 201, 175, 238, 189, 143, 227, 40, 60, 61, 83, 69, 61, 8, 158, 225, 59, 1, 57, 155, 62, 77, 83, 222, 61, 23, 63, 221, 190, 243, 99, 188, 62, 67, 155, 171, 190, 102, 189, 159, 62, 4, 119, 160, 62, 191, 149, 84, 62, 200, 173, 85, 61, 118, 65, 52, 62, 123, 229, 253, 61, 72, 255, 28, 61, 31, 24, 54, 62, 164, 7, 111, 62, 16, 238, 160, 188, 114, 130, 205, 189, 220, 221, 232, 189, 11, 0, 42, 62, 223, 118, 238, 61, 28, 170, 123, 188, 149, 219, 36, 190, 148, 201, 77, 62, 208, 213, 49, 62, 220, 253, 145, 61, 226, 137, 135, 62, 172, 12, 10, 190, 135, 243, 109, 60, 252, 194, 124, 60, 92, 28, 32, 62, 246, 123, 90, 61, 247, 233, 43, 62, 99, 218, 202, 60, 191, 53, 141, 62, 28, 165, 22, 190, 221, 119, 31, 190, 190, 86, 242, 188, 63, 22, 70, 189, 44, 172, 180, 189, 138, 69, 189, 61, 8, 199, 62, 189, 238, 152, 83, 62, 192, 210, 162, 60, 223, 199, 120, 61, 239, 34, 128, 62, 26, 224, 160, 60, 213, 58, 218, 188, 133, 4, 27, 190, 96, 20, 87, 190, 208, 171, 150, 190, 31, 18, 145, 187, 36, 9, 12, 190, 253, 218, 69, 62, 162, 118, 159, 61, 35, 223, 129, 189, 178, 245, 181, 61, 222, 44, 153, 187, 166, 16, 236, 61, 82, 168, 224, 59, 68, 27, 139, 62, 75, 86, 28, 62, 213, 50, 102, 189, 195, 124, 64, 189, 232, 240, 131, 190, 93, 25, 152, 189, 42, 156, 95, 189, 154, 35, 5, 190, 11, 127, 39, 62, 18, 65, 119, 190, 21, 212, 163, 190, 208, 216, 90, 61, 251, 155, 164, 62, 163, 79, 92, 60, 247, 207, 50, 62, 3, 145, 44, 190, 150, 92, 227, 189, 235, 149, 251, 189, 13, 132, 189, 189, 214, 11, 84, 189, 43, 60, 142, 189, 186, 99, 174, 189, 50, 119, 236, 189, 248, 93, 180, 188, 6, 7, 186, 61, 100, 101, 149, 190, 86, 49, 161, 60, 42, 70, 1, 62, 132, 88, 130, 62, 176, 59, 57, 61, 129, 46, 217, 62, 107, 158, 102, 188, 128, 26, 128, 60, 7, 15, 94, 189, 63, 15, 27, 62, 254, 15, 196, 61, 4, 193, 160, 61, 27, 28, 237, 61, 134, 222, 206, 61, 13, 150, 44, 188, 145, 175, 127, 190, 221, 91, 69, 60, 193, 166, 4, 62, 224, 184, 9, 62, 254, 142, 241, 60, 211, 187, 119, 190, 22, 13, 26, 62, 226, 12, 26, 189, 196, 98, 143, 190, 158, 244, 177, 62, 244, 213, 126, 62, 68, 185, 237, 62, 43, 130, 9, 191, 122, 103, 246, 189, 49, 162, 64, 190, 59, 150, 58, 61, 170, 137, 166, 189, 119, 112, 180, 190, 235, 159, 46, 62, 211, 48, 174, 190, 13, 165, 48, 187, 249, 14, 132, 61, 126, 106, 113, 62, 112, 0, 214, 190, 207, 242, 22, 190, 249, 89, 108, 189, 154, 6, 8, 62, 205, 191, 3, 62, 86, 107, 4, 62, 236, 213, 113, 189, 106, 67, 21, 190, 228, 236, 7, 190, 78, 214, 129, 189, 96, 36, 214, 61, 230, 241, 167, 189, 223, 238, 129, 189, 51, 118, 140, 62, 68, 163, 23, 61, 69, 144, 167, 62, 255, 17, 37, 61, 174, 96, 189, 189, 98, 51, 15, 62, 128, 74, 81, 190, 100, 207, 252, 62, 0, 235, 243, 61, 186, 63, 149, 190, 155, 28, 98, 189, 207, 96, 8, 62, 231, 31, 22, 62, 213, 120, 188, 190, 154, 187, 101, 62, 208, 150, 76, 61, 15, 137, 0, 62, 107, 63, 3, 191, 32, 193, 126, 62, 86, 125, 160, 190, 81, 164, 92, 61, 219, 224, 234, 190, 124, 93, 120, 61, 21, 238, 28, 62, 172, 249, 119, 62, 206, 24, 200, 61, 238, 219, 237, 60, 155, 144, 5, 190, 174, 145, 181, 189, 43, 98, 131, 62, 249, 128, 31, 62, 222, 186, 8, 61, 55, 174, 252, 188, 186, 174, 159, 188, 168, 194, 51, 190, 108, 54, 99, 189, 255, 220, 73, 62, 121, 42, 186, 61, 10, 131, 206, 62, 250, 150, 139, 190, 15, 166, 173, 61, 230, 252, 156, 60, 199, 158, 108, 62, 235, 217, 9, 190, 38, 50, 53, 61, 84, 102, 129, 188, 110, 121, 233, 188, 118, 214, 187, 188, 201, 79, 104, 62, 103, 35, 190, 62, 190, 225, 93, 60, 39, 138, 212, 61, 237, 132, 26, 62, 115, 8, 231, 61, 248, 31, 106, 188, 240, 194, 21, 188, 25, 31, 99, 61, 118, 160, 145, 61, 62, 170, 48, 62, 173, 97, 106, 189, 195, 89, 38, 190, 94, 125, 9, 189, 88, 123, 216, 61, 119, 187, 116, 61, 34, 86, 41, 190, 55, 31, 146, 188, 175, 66, 3, 191, 224, 184, 32, 190, 212, 133, 58, 62, 227, 225, 14, 191, 14, 81, 205, 62, 207, 25, 117, 191, 120, 211, 30, 62, 99, 3, 177, 62, 116, 78, 19, 191, 161, 222, 224, 190, 43, 58, 54, 191, 108, 209, 159, 61, 175, 176, 174, 190, 119, 230, 210, 61, 222, 227, 133, 62, 238, 102, 161, 62, 169, 105, 148, 189, 107, 219, 108, 189, 68, 231, 89, 190, 86, 186, 171, 189, 90, 125, 58, 62, 201, 28, 108, 62, 133, 216, 95, 62, 183, 17, 65, 62, 72, 119, 7, 61, 51, 233, 30, 61, 76, 124, 177, 61, 212, 196, 224, 190, 234, 102, 99, 62, 104, 42, 119, 191, 114, 210, 67, 62, 101, 48, 138, 190, 160, 27, 0, 191, 95, 198, 136, 61, 231, 23, 145, 62, 232, 226, 4, 191, 87, 38, 146, 62, 84, 166, 28, 191, 246, 107, 236, 61, 105, 165, 246, 61, 159, 85, 118, 191, 206, 84, 195, 190, 126, 224, 58, 189, 57, 123, 86, 62, 233, 2, 133, 190, 132, 32, 20, 62, 217, 238, 249, 61, 154, 223, 182, 62, 101, 203, 177, 62, 80, 240, 182, 61, 7, 131, 222, 189, 251, 246, 152, 60, 196, 41, 147, 60, 9, 159, 27, 62, 30, 132, 94, 62, 182, 191, 207, 189, 93, 96, 237, 62, 59, 89, 37, 189, 121, 242, 10, 189, 72, 99, 26, 191, 138, 174, 143, 62, 30, 184, 161, 190, 125, 67, 33, 190, 203, 250, 163, 190, 122, 215, 237, 61, 96, 38, 249, 61, 132, 124, 153, 190, 64, 87, 16, 62, 62, 216, 98, 62, 208, 131, 154, 62, 60, 10, 248, 190, 132, 143, 149, 190, 11, 8, 120, 190, 215, 50, 7, 190, 126, 197, 22, 61, 50, 136, 33, 190, 138, 240, 108, 62, 93, 188, 135, 190, 151, 85, 15, 62, 75, 37, 136, 62, 37, 49, 161, 61, 11, 163, 112, 190, 141, 136, 6, 190, 25, 226, 246, 61, 7, 37, 135, 62, 245, 65, 75, 189, 129, 207, 250, 59, 232, 12, 18, 62, 82, 183, 196, 190, 152, 61, 145, 61, 26, 254, 43, 190, 229, 124, 180, 60, 202, 105, 234, 189, 137, 69, 146, 190, 25, 94, 57, 61, 1, 145, 43, 62, 18, 36, 13, 191, 233, 161, 7, 190, 58, 132, 5, 62, 241, 44, 124, 190, 77, 104, 207, 62, 66, 47, 163, 189, 192, 150, 191, 61, 100, 56, 203, 59, 24, 94, 11, 191, 208, 112, 7, 190, 144, 114, 22, 62, 148, 196, 130, 189, 65, 243, 200, 190, 46, 135, 10, 62, 54, 233, 68, 62, 76, 200, 211, 62, 17, 252, 14, 62, 55, 87, 66, 186, 83, 111, 128, 190, 27, 206, 62, 62, 61, 75, 216, 60, 217, 104, 2, 189, 9, 146, 142, 189, 225, 188, 53, 62, 50, 144, 50, 62, 13, 233, 132, 61, 101, 18, 15, 190, 7, 202, 12, 191, 60, 42, 159, 62, 17, 5, 172, 190, 74, 73, 58, 190, 225, 209, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 16, 22, 189, 255, 61, 137, 61, 12, 17, 3, 190, 5, 20, 27, 61, 32, 95, 66, 62, 92, 84, 33, 190, 235, 135, 0, 62, 110, 240, 12, 190, 139, 4, 103, 189, 24, 208, 109, 61, 39, 219, 205, 190, 108, 216, 72, 62, 243, 118, 221, 61, 148, 206, 136, 189, 77, 193, 180, 61, 116, 44, 19, 189, 250, 201, 205, 187, 154, 5, 207, 59, 143, 140, 82, 60, 70, 26, 115, 62, 232, 69, 215, 189, 18, 148, 218, 189, 242, 28, 32, 62, 83, 190, 242, 188, 144, 177, 36, 62, 199, 203, 171, 61, 193, 164, 21, 61, 197, 144, 254, 61, 164, 149, 20, 62, 192, 176, 23, 62, 196, 223, 121, 62, 135, 194, 53, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 62, 2, 191, 144, 151, 148, 188, 51, 192, 242, 62, 120, 188, 155, 62, 221, 217, 14, 62, 43, 197, 230, 60, 207, 48, 249, 61, 24, 87, 56, 61, 255, 120, 199, 62, 25, 76, 146, 189, 141, 175, 63, 63, 241, 77, 169, 190, 48, 183, 85, 62, 55, 31, 202, 190, 33, 167, 216, 190, 19, 7, 233, 189, 95, 192, 222, 190, 1, 217, 252, 190, 248, 188, 219, 62, 120, 28, 71, 190, 155, 143, 222, 62, 43, 100, 43, 191, 186, 141, 121, 186, 146, 26, 142, 62, 225, 92, 149, 188, 61, 169, 164, 190, 68, 151, 138, 190, 199, 209, 31, 62, 118, 188, 66, 63, 146, 145, 45, 63, 10, 39, 122, 190, 164, 93, 194, 62, 95, 36, 42, 60, 200, 153, 85, 61, 122, 189, 189, 62, 2, 230, 60, 62, 101, 101, 219, 190, 56, 6, 240, 60, 32, 101, 83, 190, 227, 25, 95, 60, 134, 144, 150, 60, 112, 235, 98, 190, 126, 153, 163, 62, 110, 102, 159, 62, 41, 121, 176, 189, 205, 230, 240, 62, 199, 140, 113, 62, 146, 79, 94, 62, 186, 115, 31, 190, 105, 107, 138, 190, 151, 129, 173, 189, 50, 113, 133, 190, 137, 141, 68, 62, 110, 52, 151, 62, 198, 137, 84, 190, 39, 223, 198, 189, 231, 234, 164, 190, 202, 155, 77, 62, 86, 44, 124, 189, 64, 238, 82, 190, 31, 211, 133, 62, 68, 68, 13, 61, 69, 245, 79, 62, 115, 204, 173, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 96, 8, 188, 33, 150, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 200, 34, 63, 130, 207, 220, 189, 140, 246, 179, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {79, 233, 133, 63, 152, 59, 224, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}