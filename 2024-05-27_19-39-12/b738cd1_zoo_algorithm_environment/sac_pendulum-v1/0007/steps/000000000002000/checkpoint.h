// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 155, 239, 190, 36, 1, 52, 191, 175, 228, 9, 62, 42, 179, 114, 62, 5, 31, 194, 189, 168, 174, 180, 188, 149, 212, 99, 62, 214, 145, 29, 191, 181, 11, 199, 190, 133, 129, 169, 190, 244, 162, 112, 190, 237, 18, 135, 190, 35, 47, 2, 191, 148, 103, 158, 191, 147, 176, 168, 62, 127, 178, 70, 189, 150, 163, 63, 63, 127, 200, 55, 190, 6, 92, 154, 190, 186, 163, 116, 62, 195, 25, 177, 190, 237, 48, 79, 62, 220, 189, 36, 62, 10, 108, 19, 191, 30, 73, 209, 190, 206, 154, 96, 63, 89, 135, 216, 188, 16, 139, 230, 190, 164, 106, 27, 63, 71, 23, 207, 62, 153, 207, 234, 62, 12, 171, 30, 63, 140, 70, 13, 191, 40, 48, 201, 61, 181, 11, 28, 191, 136, 14, 6, 191, 232, 3, 185, 59, 90, 156, 49, 191, 29, 71, 213, 62, 243, 85, 165, 190, 113, 55, 32, 63, 131, 207, 120, 190, 230, 212, 130, 190, 192, 242, 174, 190, 120, 76, 25, 61, 125, 41, 24, 191, 168, 233, 138, 191, 42, 196, 184, 62, 173, 41, 8, 63, 209, 133, 231, 190, 202, 130, 196, 62, 146, 79, 182, 62, 205, 11, 34, 191, 201, 72, 3, 191, 67, 83, 43, 190, 188, 177, 159, 190, 207, 35, 111, 62, 126, 5, 236, 61, 107, 133, 69, 191, 5, 32, 146, 190, 139, 166, 32, 191, 205, 60, 23, 191, 216, 90, 255, 59, 78, 4, 246, 190, 50, 128, 34, 63, 139, 174, 161, 62, 222, 226, 215, 190, 25, 2, 205, 62, 16, 226, 188, 187, 80, 227, 157, 190, 84, 192, 116, 62, 33, 145, 129, 62, 77, 104, 21, 63, 110, 32, 193, 190, 51, 55, 179, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 34, 197, 154, 62, 147, 9, 241, 61, 173, 70, 160, 190, 5, 242, 35, 63, 180, 195, 48, 62, 63, 102, 35, 63, 253, 129, 212, 190, 163, 255, 77, 63, 245, 249, 40, 62, 221, 166, 144, 190, 227, 230, 217, 62, 33, 185, 32, 191, 78, 184, 142, 190, 36, 132, 123, 191, 42, 213, 148, 189, 189, 212, 84, 62, 42, 147, 147, 189, 57, 255, 11, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 243, 20, 191, 55, 22, 172, 190, 143, 170, 171, 189, 208, 122, 44, 62, 28, 227, 7, 190, 21, 4, 190, 61, 61, 204, 170, 62, 19, 25, 92, 190, 107, 237, 84, 190, 137, 40, 27, 191, 99, 245, 53, 63, 86, 119, 180, 190, 87, 232, 146, 190, 90, 33, 4, 63, 151, 252, 7, 63, 72, 254, 137, 190, 196, 120, 55, 63, 85, 111, 210, 188, 19, 114, 181, 190, 88, 59, 136, 188, 66, 9, 32, 62, 81, 23, 11, 63, 171, 15, 37, 63, 114, 72, 207, 62, 128, 165, 59, 190, 250, 74, 164, 190, 178, 192, 196, 190, 20, 36, 26, 190, 235, 39, 55, 61, 173, 227, 38, 189, 54, 60, 102, 62, 225, 74, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 233, 74, 189, 186, 130, 21, 190, 53, 235, 255, 189, 35, 57, 84, 61, 193, 214, 241, 190, 174, 72, 59, 189, 229, 132, 180, 60, 70, 148, 43, 62, 209, 224, 14, 189, 72, 143, 129, 61, 91, 134, 7, 62, 134, 55, 138, 61, 111, 199, 175, 188, 201, 9, 4, 62, 56, 161, 40, 189, 144, 32, 167, 190, 141, 243, 28, 191, 130, 177, 242, 189, 242, 93, 11, 190, 236, 209, 41, 190, 99, 139, 72, 62, 204, 136, 35, 62, 178, 182, 83, 62, 175, 37, 3, 190, 156, 72, 1, 61, 247, 99, 60, 60, 36, 108, 83, 190, 129, 35, 195, 190, 157, 239, 32, 61, 153, 61, 121, 62, 114, 248, 167, 188, 242, 47, 220, 60, 13, 188, 12, 190, 33, 146, 54, 61, 217, 124, 225, 189, 152, 100, 0, 190, 78, 96, 68, 189, 199, 242, 29, 190, 200, 120, 73, 187, 133, 81, 178, 189, 130, 37, 38, 190, 69, 90, 27, 190, 212, 203, 25, 61, 160, 102, 147, 189, 42, 149, 143, 60, 138, 110, 231, 61, 162, 179, 74, 190, 184, 158, 27, 190, 206, 84, 0, 190, 85, 182, 12, 61, 182, 78, 200, 61, 106, 252, 204, 60, 190, 120, 13, 189, 46, 177, 97, 189, 137, 133, 13, 190, 145, 96, 40, 61, 215, 81, 190, 188, 255, 112, 165, 189, 242, 37, 52, 190, 56, 52, 255, 61, 12, 86, 99, 61, 97, 131, 50, 190, 25, 5, 171, 61, 79, 100, 245, 59, 194, 145, 183, 189, 5, 150, 62, 61, 75, 237, 204, 189, 148, 252, 54, 60, 232, 80, 141, 62, 95, 2, 204, 190, 119, 88, 189, 60, 241, 12, 59, 62, 152, 1, 70, 190, 174, 222, 124, 59, 174, 119, 234, 189, 100, 19, 82, 188, 245, 71, 117, 190, 47, 156, 173, 61, 44, 148, 117, 188, 172, 50, 146, 62, 167, 23, 82, 190, 216, 123, 93, 61, 157, 189, 93, 61, 193, 94, 76, 62, 243, 117, 17, 62, 21, 63, 47, 189, 27, 224, 11, 61, 137, 143, 36, 62, 51, 218, 32, 62, 9, 95, 6, 190, 243, 254, 133, 61, 124, 137, 220, 189, 249, 207, 153, 189, 69, 8, 123, 187, 234, 56, 116, 62, 184, 86, 74, 190, 183, 91, 183, 60, 164, 30, 69, 189, 24, 0, 76, 62, 8, 122, 234, 189, 225, 187, 29, 190, 134, 119, 91, 62, 35, 54, 182, 61, 241, 1, 144, 62, 188, 110, 223, 62, 144, 69, 89, 61, 222, 172, 48, 62, 86, 121, 127, 189, 104, 245, 53, 190, 91, 214, 56, 61, 174, 235, 31, 189, 169, 4, 41, 190, 188, 248, 224, 61, 92, 117, 7, 62, 202, 169, 40, 62, 75, 159, 158, 189, 85, 160, 227, 190, 135, 143, 0, 62, 174, 196, 88, 190, 38, 78, 114, 190, 113, 120, 92, 61, 250, 197, 8, 62, 171, 207, 56, 62, 217, 191, 152, 190, 255, 74, 180, 62, 77, 12, 14, 62, 17, 88, 225, 188, 87, 91, 37, 189, 161, 195, 132, 60, 109, 100, 202, 61, 226, 92, 213, 61, 155, 222, 225, 189, 201, 226, 146, 190, 240, 244, 134, 62, 184, 229, 225, 61, 80, 56, 201, 61, 86, 178, 89, 190, 2, 217, 180, 188, 233, 2, 40, 62, 105, 221, 247, 189, 126, 73, 73, 190, 87, 108, 63, 61, 4, 63, 188, 189, 201, 154, 125, 190, 232, 206, 95, 61, 202, 167, 8, 61, 170, 157, 40, 190, 193, 185, 118, 61, 47, 244, 70, 190, 9, 54, 201, 189, 169, 62, 9, 62, 115, 105, 58, 61, 202, 160, 62, 62, 47, 226, 2, 190, 73, 88, 91, 190, 214, 93, 62, 61, 10, 252, 8, 190, 168, 118, 225, 61, 200, 247, 176, 189, 86, 247, 132, 61, 124, 132, 5, 62, 57, 181, 226, 61, 160, 216, 184, 61, 231, 223, 24, 190, 71, 30, 197, 60, 143, 104, 77, 189, 54, 147, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 147, 228, 206, 61, 106, 218, 228, 61, 37, 118, 145, 60, 192, 229, 14, 61, 71, 29, 31, 62, 82, 156, 16, 190, 108, 183, 210, 189, 208, 0, 199, 188, 198, 165, 147, 61, 112, 224, 70, 61, 212, 114, 51, 61, 51, 193, 0, 190, 80, 133, 149, 189, 57, 132, 10, 62, 118, 58, 10, 62, 99, 239, 13, 59, 29, 62, 131, 188, 110, 38, 21, 62, 140, 136, 34, 60, 19, 24, 23, 190, 96, 171, 196, 189, 65, 42, 253, 188, 234, 23, 238, 189, 37, 124, 48, 61, 180, 70, 59, 190, 113, 119, 190, 62, 153, 238, 15, 190, 99, 201, 210, 186, 108, 25, 6, 62, 127, 56, 231, 189, 177, 59, 62, 189, 184, 232, 175, 61, 36, 230, 41, 62, 110, 224, 137, 190, 10, 235, 55, 189, 186, 121, 186, 60, 237, 239, 168, 61, 248, 109, 197, 62, 29, 62, 39, 62, 92, 105, 176, 60, 3, 192, 187, 61, 232, 81, 101, 61, 236, 81, 16, 61, 20, 206, 175, 61, 214, 101, 218, 189, 109, 27, 56, 59, 196, 21, 167, 189, 55, 202, 100, 188, 231, 181, 211, 60, 129, 158, 12, 190, 58, 1, 188, 189, 74, 112, 5, 62, 112, 154, 27, 190, 250, 239, 155, 60, 198, 183, 9, 190, 9, 205, 221, 189, 105, 242, 0, 190, 158, 173, 150, 189, 37, 173, 99, 189, 234, 230, 4, 190, 29, 195, 188, 61, 39, 71, 29, 62, 35, 18, 139, 61, 16, 40, 151, 60, 248, 114, 83, 61, 29, 140, 28, 188, 102, 205, 10, 190, 120, 50, 202, 189, 225, 28, 226, 60, 84, 82, 25, 61, 83, 179, 31, 187, 79, 132, 11, 61, 254, 16, 48, 190, 170, 179, 1, 62, 209, 181, 10, 59, 88, 158, 232, 189, 187, 141, 63, 190, 95, 21, 61, 189, 219, 178, 40, 190, 19, 138, 40, 62, 251, 147, 246, 60, 112, 199, 183, 189, 200, 25, 198, 189, 202, 230, 179, 189, 238, 84, 22, 62, 96, 112, 51, 190, 235, 25, 129, 61, 79, 61, 191, 189, 76, 182, 249, 186, 1, 16, 10, 190, 251, 43, 49, 62, 38, 132, 255, 61, 86, 246, 108, 188, 199, 243, 108, 60, 204, 79, 51, 190, 228, 228, 114, 62, 12, 15, 192, 188, 40, 144, 1, 190, 236, 244, 105, 61, 112, 51, 172, 60, 120, 61, 164, 189, 145, 249, 5, 190, 180, 230, 188, 189, 215, 156, 128, 61, 71, 230, 15, 190, 106, 124, 161, 190, 114, 45, 7, 60, 84, 248, 204, 188, 10, 208, 179, 189, 150, 112, 13, 190, 222, 15, 210, 61, 86, 45, 120, 187, 9, 161, 96, 190, 63, 16, 167, 61, 100, 156, 88, 62, 194, 12, 152, 190, 196, 5, 27, 189, 99, 190, 5, 61, 167, 217, 71, 61, 54, 241, 27, 188, 197, 149, 159, 60, 68, 221, 215, 189, 241, 183, 156, 62, 160, 61, 220, 188, 35, 223, 151, 61, 226, 209, 64, 189, 76, 137, 16, 190, 171, 63, 29, 62, 40, 232, 24, 190, 144, 147, 0, 190, 186, 21, 38, 62, 168, 45, 74, 61, 43, 23, 58, 61, 25, 224, 39, 62, 61, 213, 205, 189, 197, 219, 70, 189, 89, 174, 16, 62, 211, 80, 218, 61, 10, 182, 228, 60, 186, 246, 5, 62, 161, 162, 42, 62, 10, 150, 130, 61, 117, 124, 66, 190, 38, 21, 99, 190, 215, 152, 45, 62, 110, 93, 32, 62, 192, 181, 108, 61, 2, 168, 151, 61, 135, 249, 190, 189, 76, 185, 147, 189, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 185, 21, 54, 190, 227, 135, 190, 60, 179, 65, 154, 60, 184, 122, 23, 190, 98, 126, 167, 189, 243, 119, 0, 62, 196, 255, 76, 61, 201, 215, 1, 62, 241, 20, 153, 189, 121, 124, 55, 190, 45, 197, 132, 189, 17, 200, 151, 61, 124, 180, 47, 189, 232, 249, 65, 61, 32, 208, 0, 189, 30, 127, 70, 190, 31, 115, 19, 61, 174, 214, 20, 62, 161, 111, 153, 61, 78, 29, 248, 189, 1, 165, 55, 61, 153, 89, 36, 62, 93, 73, 14, 190, 142, 237, 15, 189, 255, 121, 79, 190, 182, 3, 250, 61, 101, 121, 22, 190, 45, 28, 24, 62, 94, 253, 93, 61, 86, 21, 152, 188, 85, 244, 209, 190, 213, 250, 42, 61, 65, 217, 251, 189, 88, 123, 248, 62, 51, 89, 4, 62, 220, 51, 209, 190, 89, 147, 224, 61, 189, 6, 15, 62, 63, 113, 133, 62, 85, 219, 148, 190, 55, 201, 106, 188, 102, 117, 176, 60, 251, 214, 243, 61, 216, 112, 171, 190, 186, 100, 53, 190, 49, 111, 139, 190, 217, 157, 79, 62, 143, 201, 135, 189, 187, 241, 167, 61, 206, 80, 32, 62, 135, 187, 63, 189, 231, 164, 23, 190, 185, 133, 146, 188, 159, 102, 189, 61, 115, 175, 236, 188, 223, 173, 6, 62, 103, 244, 16, 60, 123, 96, 106, 61, 97, 192, 64, 190, 67, 118, 208, 61, 243, 203, 220, 188, 244, 56, 179, 61, 29, 113, 226, 61, 117, 63, 148, 189, 104, 251, 173, 62, 69, 164, 209, 190, 252, 146, 30, 190, 84, 128, 37, 62, 97, 124, 56, 61, 104, 133, 188, 61, 99, 110, 146, 190, 150, 230, 47, 61, 85, 249, 97, 61, 143, 115, 30, 190, 169, 245, 92, 188, 147, 35, 153, 61, 85, 74, 161, 62, 65, 218, 15, 62, 193, 151, 211, 61, 115, 103, 15, 189, 32, 71, 209, 61, 209, 172, 2, 62, 236, 130, 74, 61, 7, 90, 105, 62, 223, 154, 223, 187, 173, 78, 149, 61, 207, 46, 160, 189, 211, 154, 109, 190, 32, 154, 207, 60, 137, 176, 228, 189, 79, 33, 70, 62, 14, 202, 32, 190, 205, 212, 204, 189, 215, 50, 14, 62, 146, 234, 229, 61, 13, 139, 67, 189, 169, 60, 181, 61, 228, 249, 176, 190, 241, 21, 213, 61, 38, 27, 8, 62, 12, 205, 112, 189, 47, 24, 203, 189, 14, 38, 161, 189, 105, 150, 98, 62, 35, 198, 41, 62, 46, 197, 208, 59, 82, 183, 56, 190, 42, 173, 34, 190, 247, 239, 246, 189, 6, 211, 203, 61, 163, 216, 249, 61, 94, 177, 144, 187, 254, 20, 220, 61, 216, 145, 119, 190, 1, 26, 96, 190, 21, 196, 251, 189, 163, 36, 25, 61, 77, 237, 180, 188, 217, 66, 95, 62, 231, 68, 23, 190, 168, 109, 115, 189, 51, 23, 57, 61, 29, 3, 17, 189, 190, 255, 2, 62, 168, 230, 130, 62, 82, 19, 104, 189, 66, 30, 185, 190, 157, 203, 13, 62, 13, 77, 88, 190, 125, 145, 249, 62, 71, 250, 28, 62, 46, 139, 149, 190, 211, 185, 103, 190, 173, 90, 171, 189, 20, 63, 141, 61, 12, 119, 197, 190, 221, 120, 54, 189, 124, 63, 164, 61, 15, 184, 20, 190, 44, 83, 160, 190, 252, 248, 144, 61, 18, 242, 249, 189, 121, 93, 191, 61, 164, 83, 27, 189, 151, 221, 132, 60, 235, 141, 45, 62, 126, 201, 234, 189, 54, 63, 123, 61, 157, 246, 77, 190, 82, 72, 24, 61, 104, 146, 219, 189, 166, 44, 86, 62, 217, 7, 187, 61, 98, 173, 83, 62, 132, 79, 82, 61, 3, 92, 250, 61, 86, 13, 219, 189, 185, 215, 175, 189, 161, 50, 55, 190, 185, 11, 205, 61, 10, 56, 249, 61, 233, 191, 116, 189, 187, 124, 14, 62, 187, 89, 164, 189, 186, 126, 5, 190, 48, 58, 79, 190, 170, 82, 13, 62, 47, 103, 169, 61, 226, 6, 242, 61, 244, 6, 35, 62, 121, 190, 66, 60, 99, 253, 61, 188, 157, 119, 68, 189, 76, 48, 30, 190, 176, 29, 37, 60, 100, 17, 194, 185, 86, 77, 160, 60, 215, 46, 80, 61, 153, 33, 113, 189, 200, 152, 155, 61, 79, 217, 103, 61, 227, 74, 174, 60, 218, 36, 79, 62, 72, 191, 123, 190, 7, 2, 64, 189, 237, 198, 137, 61, 161, 75, 59, 62, 26, 28, 89, 61, 238, 100, 115, 188, 41, 114, 115, 187, 212, 26, 99, 61, 24, 188, 176, 189, 212, 36, 107, 190, 78, 155, 236, 62, 211, 95, 161, 61, 219, 119, 151, 190, 157, 243, 88, 60, 141, 100, 76, 189, 101, 55, 58, 62, 236, 90, 5, 190, 68, 219, 227, 189, 236, 161, 66, 60, 193, 156, 220, 61, 22, 172, 197, 190, 4, 212, 45, 62, 161, 158, 243, 189, 10, 88, 224, 189, 117, 231, 140, 188, 118, 56, 16, 190, 176, 88, 235, 61, 30, 25, 164, 61, 227, 126, 222, 61, 253, 111, 105, 61, 200, 241, 174, 188, 248, 186, 131, 190, 224, 78, 247, 188, 1, 164, 170, 61, 172, 123, 2, 189, 24, 233, 164, 61, 136, 68, 20, 62, 2, 150, 49, 61, 138, 193, 179, 189, 190, 40, 5, 61, 225, 172, 252, 61, 124, 20, 89, 191, 243, 176, 103, 62, 195, 75, 26, 62, 92, 103, 204, 189, 10, 172, 237, 61, 212, 162, 151, 189, 133, 243, 133, 62, 126, 95, 0, 190, 232, 162, 39, 189, 191, 165, 85, 62, 16, 94, 13, 62, 191, 18, 50, 191, 92, 52, 240, 60, 77, 142, 71, 190, 184, 181, 125, 189, 32, 222, 19, 190, 223, 32, 71, 189, 62, 94, 171, 60, 93, 222, 82, 62, 177, 229, 149, 60, 213, 80, 64, 62, 96, 170, 226, 61, 40, 137, 174, 190, 192, 193, 201, 61, 203, 194, 122, 62, 253, 59, 80, 62, 18, 160, 157, 189, 97, 135, 55, 190, 55, 10, 141, 188, 211, 249, 159, 189, 149, 79, 239, 61, 32, 3, 156, 189, 242, 83, 203, 62, 173, 57, 236, 189, 74, 128, 109, 61, 129, 133, 93, 189, 68, 216, 244, 190, 236, 228, 19, 61, 152, 193, 114, 189, 115, 217, 148, 61, 39, 97, 138, 190, 68, 216, 210, 187, 127, 228, 78, 62, 4, 186, 77, 62, 232, 192, 158, 62, 53, 52, 16, 60, 34, 104, 225, 189, 185, 39, 76, 61, 219, 208, 178, 61, 233, 128, 233, 189, 82, 2, 5, 62, 89, 188, 246, 189, 120, 187, 49, 188, 126, 35, 235, 189, 29, 102, 55, 190, 64, 105, 204, 190, 107, 15, 254, 189, 124, 142, 53, 190, 118, 239, 98, 62, 81, 90, 151, 190, 95, 224, 89, 188, 206, 112, 47, 62, 8, 35, 202, 189, 35, 22, 207, 60, 3, 27, 252, 189, 233, 123, 235, 62, 107, 120, 15, 190, 118, 222, 46, 188, 154, 177, 201, 60, 255, 175, 252, 61, 64, 160, 7, 61, 239, 39, 99, 190, 36, 51, 17, 62, 227, 36, 129, 61, 18, 0, 207, 188, 242, 52, 231, 189, 178, 146, 162, 62, 50, 19, 160, 58, 229, 29, 59, 62, 96, 85, 166, 61, 255, 172, 0, 62, 57, 139, 68, 62, 149, 234, 39, 62, 118, 227, 71, 60, 164, 194, 205, 61, 37, 13, 157, 189, 49, 182, 19, 190, 79, 3, 80, 61, 193, 216, 2, 62, 120, 83, 230, 189, 82, 20, 81, 190, 140, 126, 46, 61, 99, 29, 88, 190, 164, 91, 65, 188, 79, 248, 29, 189, 48, 176, 79, 62, 248, 42, 248, 188, 246, 126, 229, 190, 111, 158, 45, 60, 72, 202, 145, 190, 195, 47, 17, 190, 115, 29, 201, 188, 7, 238, 54, 190, 72, 148, 47, 190, 142, 140, 47, 190, 209, 222, 36, 62, 28, 186, 58, 189, 243, 44, 130, 62, 227, 183, 117, 189, 74, 1, 178, 189, 84, 224, 7, 189, 222, 29, 79, 57, 107, 216, 156, 61, 225, 58, 147, 189, 96, 113, 138, 61, 164, 240, 34, 62, 227, 67, 12, 190, 208, 51, 148, 61, 190, 56, 102, 59, 55, 236, 113, 61, 158, 46, 15, 61, 58, 59, 173, 190, 130, 168, 68, 62, 194, 68, 164, 187, 85, 131, 84, 62, 50, 114, 158, 61, 93, 171, 127, 190, 221, 225, 46, 60, 44, 13, 97, 190, 223, 88, 204, 62, 29, 175, 173, 61, 225, 169, 106, 190, 29, 93, 8, 190, 121, 254, 9, 190, 4, 11, 2, 189, 27, 84, 179, 190, 73, 42, 26, 190, 55, 97, 100, 62, 48, 109, 4, 62, 103, 219, 5, 191, 93, 237, 79, 190, 105, 194, 20, 190, 66, 79, 30, 62, 42, 184, 88, 189, 65, 167, 29, 190, 219, 241, 33, 62, 82, 114, 225, 61, 131, 176, 45, 62, 237, 216, 135, 189, 77, 83, 222, 61, 89, 57, 199, 190, 252, 97, 12, 62, 91, 37, 161, 188, 132, 18, 97, 62, 232, 40, 102, 61, 103, 246, 71, 186, 202, 123, 94, 61, 12, 66, 52, 62, 51, 215, 30, 62, 156, 49, 13, 59, 129, 72, 100, 62, 206, 77, 149, 62, 126, 25, 35, 189, 89, 251, 69, 189, 139, 145, 223, 189, 240, 190, 33, 62, 236, 8, 179, 61, 23, 137, 165, 61, 200, 150, 198, 189, 57, 50, 30, 62, 11, 152, 218, 61, 173, 6, 224, 61, 12, 240, 120, 62, 181, 119, 7, 190, 181, 180, 245, 60, 61, 11, 149, 61, 69, 60, 137, 61, 192, 83, 217, 60, 192, 79, 187, 61, 115, 96, 188, 59, 195, 37, 48, 62, 28, 165, 22, 190, 201, 9, 160, 189, 166, 82, 159, 60, 217, 167, 208, 189, 3, 174, 155, 189, 244, 224, 40, 62, 90, 190, 19, 61, 217, 10, 213, 61, 192, 210, 162, 60, 11, 124, 93, 189, 105, 216, 50, 62, 34, 49, 25, 190, 100, 231, 244, 61, 161, 77, 12, 190, 112, 134, 237, 189, 24, 199, 246, 189, 117, 255, 27, 189, 28, 44, 46, 190, 217, 212, 2, 62, 129, 5, 11, 190, 237, 162, 124, 61, 213, 19, 141, 60, 193, 199, 246, 189, 0, 255, 114, 189, 109, 41, 111, 189, 59, 130, 242, 61, 238, 203, 203, 59, 90, 39, 251, 189, 204, 64, 230, 61, 141, 213, 36, 190, 160, 33, 65, 189, 46, 224, 32, 190, 154, 35, 5, 190, 49, 27, 185, 61, 160, 21, 12, 190, 189, 21, 121, 189, 156, 1, 117, 61, 47, 65, 51, 62, 147, 40, 25, 190, 161, 152, 203, 61, 114, 144, 44, 190, 100, 38, 1, 189, 5, 209, 51, 190, 94, 81, 76, 189, 252, 67, 16, 61, 3, 58, 123, 189, 255, 13, 225, 59, 202, 228, 160, 189, 13, 94, 75, 189, 220, 75, 179, 61, 190, 36, 239, 189, 16, 26, 169, 61, 98, 182, 209, 61, 120, 95, 38, 62, 253, 88, 177, 61, 100, 118, 196, 62, 196, 172, 249, 60, 249, 173, 5, 61, 158, 172, 134, 61, 220, 60, 49, 61, 29, 26, 131, 61, 187, 217, 126, 188, 142, 32, 175, 61, 38, 232, 192, 60, 13, 150, 44, 188, 142, 147, 195, 189, 25, 67, 75, 61, 26, 88, 152, 61, 94, 108, 47, 62, 102, 112, 168, 61, 251, 95, 32, 190, 25, 172, 138, 61, 226, 12, 26, 189, 105, 246, 38, 60, 158, 119, 158, 61, 86, 22, 120, 62, 235, 243, 205, 62, 170, 68, 109, 190, 181, 64, 117, 61, 158, 26, 70, 190, 52, 99, 12, 61, 246, 145, 15, 61, 3, 9, 174, 189, 56, 69, 99, 62, 178, 94, 119, 190, 53, 115, 152, 189, 72, 35, 153, 61, 233, 86, 94, 62, 53, 195, 40, 190, 48, 93, 73, 189, 180, 130, 12, 62, 69, 239, 100, 61, 29, 51, 221, 60, 55, 32, 166, 188, 155, 91, 223, 189, 69, 65, 152, 60, 228, 236, 7, 190, 227, 17, 157, 61, 196, 78, 229, 61, 209, 195, 8, 190, 17, 88, 42, 188, 60, 225, 91, 62, 110, 193, 220, 61, 124, 251, 80, 61, 255, 17, 37, 61, 223, 49, 253, 60, 28, 10, 184, 188, 90, 41, 8, 190, 232, 69, 0, 63, 93, 104, 224, 61, 104, 182, 132, 190, 152, 67, 135, 189, 183, 5, 49, 61, 151, 209, 193, 61, 88, 10, 120, 190, 255, 166, 120, 62, 77, 178, 128, 61, 38, 63, 155, 61, 217, 216, 202, 190, 164, 67, 127, 62, 50, 206, 126, 190, 141, 189, 120, 61, 29, 157, 4, 190, 46, 2, 248, 60, 118, 174, 28, 62, 162, 57, 73, 62, 128, 5, 213, 61, 132, 209, 60, 187, 155, 144, 5, 190, 162, 191, 194, 188, 101, 147, 16, 62, 152, 94, 78, 62, 123, 30, 86, 189, 126, 182, 221, 189, 237, 40, 122, 189, 164, 239, 7, 190, 52, 45, 99, 189, 84, 101, 79, 62, 116, 79, 7, 62, 136, 26, 200, 62, 39, 203, 118, 190, 232, 214, 64, 61, 227, 38, 68, 61, 248, 158, 64, 62, 177, 103, 214, 189, 230, 31, 102, 61, 121, 92, 103, 60, 230, 8, 46, 189, 184, 16, 190, 189, 147, 23, 98, 62, 80, 95, 166, 62, 177, 184, 80, 188, 60, 215, 214, 61, 74, 45, 190, 61, 68, 122, 170, 61, 36, 177, 86, 189, 37, 50, 158, 187, 128, 112, 12, 61, 47, 242, 106, 61, 174, 165, 87, 62, 173, 97, 106, 189, 15, 148, 218, 187, 251, 246, 192, 188, 176, 88, 209, 59, 198, 122, 183, 61, 121, 176, 189, 189, 63, 195, 64, 189, 235, 206, 4, 190, 224, 184, 32, 190, 134, 146, 21, 61, 98, 87, 87, 61, 247, 174, 187, 62, 165, 240, 125, 191, 156, 183, 106, 60, 174, 216, 58, 190, 147, 142, 24, 191, 223, 130, 32, 190, 151, 166, 0, 191, 176, 179, 85, 60, 163, 119, 161, 190, 46, 118, 55, 190, 20, 105, 127, 62, 211, 252, 108, 62, 240, 36, 1, 190, 18, 122, 135, 60, 165, 228, 103, 190, 235, 6, 33, 189, 33, 190, 75, 62, 127, 4, 204, 61, 199, 240, 9, 62, 3, 70, 172, 61, 239, 67, 8, 190, 51, 233, 30, 61, 230, 234, 177, 61, 168, 21, 186, 190, 87, 75, 141, 189, 176, 170, 233, 190, 100, 241, 183, 62, 188, 70, 141, 190, 5, 197, 52, 190, 95, 198, 136, 61, 75, 216, 25, 62, 158, 54, 12, 190, 178, 236, 154, 62, 118, 134, 208, 190, 57, 147, 249, 60, 128, 227, 74, 189, 130, 54, 232, 190, 139, 190, 104, 190, 89, 108, 17, 189, 240, 164, 183, 61, 68, 106, 59, 190, 45, 159, 54, 189, 89, 158, 241, 61, 157, 208, 162, 62, 94, 144, 181, 62, 43, 209, 58, 189, 174, 143, 210, 189, 188, 27, 57, 189, 37, 181, 136, 187, 96, 162, 149, 60, 68, 138, 3, 62, 141, 209, 30, 190, 150, 71, 158, 62, 59, 89, 37, 189, 94, 207, 164, 189, 171, 175, 228, 190, 98, 135, 75, 189, 20, 147, 4, 190, 21, 57, 7, 188, 93, 11, 151, 190, 56, 204, 120, 61, 96, 38, 249, 61, 93, 93, 64, 189, 205, 228, 236, 189, 90, 116, 86, 62, 6, 124, 4, 62, 126, 181, 71, 190, 6, 247, 214, 188, 151, 139, 94, 190, 247, 113, 238, 189, 146, 177, 230, 61, 183, 129, 252, 60, 81, 75, 144, 62, 119, 179, 74, 190, 122, 66, 78, 61, 31, 67, 141, 62, 6, 64, 10, 61, 73, 144, 89, 188, 213, 205, 210, 188, 195, 10, 135, 62, 21, 165, 63, 62, 50, 5, 16, 190, 51, 106, 22, 190, 90, 117, 196, 61, 209, 170, 157, 190, 152, 61, 145, 61, 143, 156, 103, 189, 139, 16, 24, 61, 238, 90, 18, 190, 101, 66, 17, 190, 151, 128, 232, 188, 152, 78, 131, 62, 65, 33, 183, 190, 220, 158, 7, 190, 174, 21, 55, 62, 71, 59, 153, 60, 91, 26, 234, 62, 174, 150, 214, 188, 198, 226, 89, 61, 244, 155, 151, 61, 163, 217, 133, 190, 48, 240, 167, 60, 235, 181, 89, 62, 158, 74, 65, 61, 42, 223, 162, 190, 139, 140, 172, 184, 117, 140, 65, 62, 52, 240, 218, 62, 238, 174, 12, 62, 83, 133, 45, 61, 34, 229, 102, 190, 54, 176, 100, 62, 230, 215, 18, 188, 143, 153, 200, 189, 20, 3, 28, 190, 217, 195, 38, 62, 158, 255, 74, 62, 13, 233, 132, 61, 26, 76, 165, 61, 172, 208, 228, 190, 9, 127, 172, 61, 163, 238, 62, 190, 81, 85, 79, 189, 222, 37, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 98, 205, 60, 255, 61, 137, 61, 157, 38, 31, 190, 32, 121, 242, 58, 62, 132, 235, 61, 182, 65, 32, 190, 85, 248, 207, 61, 124, 128, 7, 190, 161, 70, 16, 189, 99, 80, 43, 189, 223, 216, 76, 190, 212, 151, 33, 62, 93, 9, 193, 61, 157, 143, 49, 189, 252, 93, 3, 61, 233, 191, 196, 189, 240, 249, 71, 189, 208, 163, 131, 61, 183, 193, 87, 189, 142, 104, 203, 61, 149, 249, 168, 189, 221, 105, 238, 189, 121, 135, 131, 61, 34, 90, 201, 189, 186, 157, 91, 61, 53, 49, 88, 59, 166, 119, 113, 188, 204, 2, 245, 61, 165, 238, 237, 61, 220, 226, 243, 61, 121, 48, 242, 61, 210, 216, 28, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 13, 218, 190, 144, 151, 148, 188, 66, 186, 31, 62, 75, 203, 147, 62, 66, 77, 243, 61, 210, 30, 232, 60, 203, 164, 199, 61, 208, 194, 19, 61, 187, 4, 154, 62, 224, 176, 184, 189, 251, 190, 23, 62, 238, 152, 41, 190, 69, 205, 13, 62, 242, 139, 95, 189, 244, 57, 85, 190, 219, 116, 176, 60, 159, 81, 154, 190, 43, 80, 234, 190, 187, 23, 149, 62, 26, 107, 48, 190, 3, 173, 21, 62, 97, 153, 144, 190, 114, 178, 1, 60, 36, 134, 13, 62, 78, 107, 188, 188, 224, 243, 133, 190, 26, 112, 69, 190, 153, 172, 66, 62, 28, 178, 201, 62, 66, 194, 173, 62, 93, 140, 110, 190, 56, 172, 131, 62, 249, 57, 167, 60, 200, 153, 85, 61, 204, 231, 44, 62, 76, 20, 22, 62, 174, 175, 173, 190, 236, 250, 238, 60, 121, 239, 71, 190, 221, 99, 221, 60, 19, 32, 245, 188, 54, 183, 51, 190, 104, 34, 26, 190, 26, 230, 72, 62, 149, 251, 228, 189, 26, 186, 130, 62, 107, 78, 226, 61, 146, 195, 96, 62, 88, 209, 202, 189, 239, 204, 106, 190, 125, 11, 52, 190, 136, 63, 22, 190, 209, 35, 99, 62, 85, 175, 34, 62, 127, 249, 62, 190, 201, 156, 201, 187, 39, 183, 128, 190, 39, 154, 22, 62, 62, 178, 191, 60, 61, 239, 41, 190, 199, 184, 54, 62, 49, 96, 176, 189, 202, 136, 24, 62, 253, 12, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 198, 12, 61, 14, 157, 16, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 90, 250, 191, 165, 232, 104, 63, 239, 242, 77, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {154, 249, 71, 192, 211, 218, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}