// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 151, 44, 191, 102, 189, 158, 191, 22, 135, 100, 190, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 92, 192, 168, 62, 11, 115, 160, 191, 138, 245, 44, 190, 191, 138, 210, 190, 165, 59, 141, 191, 64, 24, 124, 190, 119, 76, 219, 190, 172, 63, 119, 191, 241, 90, 14, 63, 76, 5, 156, 61, 224, 3, 5, 63, 91, 86, 178, 190, 23, 250, 21, 190, 38, 196, 136, 189, 23, 149, 219, 190, 166, 2, 183, 61, 139, 155, 47, 62, 90, 14, 24, 191, 80, 227, 10, 190, 166, 104, 105, 62, 20, 184, 228, 190, 242, 110, 27, 190, 15, 248, 168, 63, 165, 218, 205, 62, 163, 240, 246, 62, 69, 120, 29, 62, 80, 98, 58, 191, 213, 219, 198, 61, 144, 197, 181, 191, 209, 246, 236, 190, 95, 88, 142, 189, 25, 201, 115, 191, 52, 161, 192, 62, 232, 61, 72, 190, 25, 199, 35, 63, 61, 84, 155, 190, 221, 209, 206, 190, 31, 114, 125, 190, 122, 181, 139, 60, 120, 231, 46, 191, 8, 9, 3, 191, 109, 148, 45, 63, 87, 192, 20, 63, 239, 14, 84, 190, 205, 113, 151, 62, 158, 19, 182, 62, 83, 188, 146, 191, 74, 214, 237, 190, 9, 123, 219, 189, 38, 193, 14, 191, 167, 134, 80, 62, 94, 116, 182, 62, 121, 172, 134, 191, 154, 222, 144, 190, 227, 182, 106, 191, 37, 233, 143, 190, 228, 24, 12, 189, 121, 1, 11, 191, 31, 230, 80, 63, 104, 121, 121, 60, 73, 89, 10, 191, 50, 174, 9, 63, 65, 88, 2, 61, 104, 180, 38, 190, 20, 21, 227, 62, 13, 174, 88, 62, 151, 197, 20, 63, 2, 78, 103, 191, 101, 253, 200, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 66, 69, 36, 63, 147, 134, 149, 190, 65, 219, 132, 190, 6, 48, 104, 63, 17, 31, 100, 63, 244, 102, 12, 63, 252, 122, 180, 190, 190, 199, 106, 63, 167, 225, 66, 190, 1, 223, 149, 190, 88, 139, 187, 190, 63, 71, 77, 191, 71, 136, 86, 189, 119, 239, 156, 191, 63, 203, 159, 61, 34, 13, 33, 62, 148, 192, 139, 62, 251, 206, 11, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 15, 173, 190, 9, 231, 173, 190, 85, 149, 219, 61, 143, 164, 160, 189, 172, 28, 81, 190, 252, 247, 251, 187, 141, 97, 156, 62, 126, 34, 160, 189, 54, 132, 73, 191, 120, 247, 247, 190, 78, 155, 23, 63, 102, 8, 110, 189, 113, 177, 121, 190, 166, 38, 190, 62, 114, 1, 9, 63, 44, 235, 237, 190, 118, 148, 73, 63, 134, 64, 29, 61, 175, 194, 196, 190, 239, 208, 243, 188, 167, 169, 208, 61, 154, 87, 36, 63, 142, 188, 21, 63, 209, 239, 184, 62, 244, 218, 189, 57, 250, 74, 164, 190, 248, 98, 44, 191, 194, 219, 88, 190, 13, 39, 24, 61, 220, 245, 56, 190, 42, 247, 85, 62, 48, 123, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 138, 228, 189, 149, 125, 21, 190, 227, 159, 130, 189, 11, 73, 127, 61, 124, 67, 33, 191, 9, 215, 225, 189, 117, 223, 145, 59, 37, 44, 12, 62, 74, 34, 4, 190, 45, 250, 206, 62, 34, 159, 219, 61, 71, 24, 4, 61, 150, 62, 246, 188, 168, 185, 177, 61, 163, 199, 190, 61, 57, 36, 41, 191, 173, 12, 169, 191, 137, 92, 3, 190, 166, 113, 219, 190, 28, 76, 101, 190, 20, 152, 116, 62, 222, 134, 100, 62, 159, 224, 128, 62, 235, 97, 125, 190, 228, 61, 191, 62, 247, 99, 60, 60, 69, 50, 163, 190, 123, 38, 20, 191, 157, 181, 76, 189, 195, 72, 104, 62, 153, 111, 23, 62, 227, 27, 23, 62, 245, 219, 15, 190, 33, 146, 54, 61, 28, 138, 152, 190, 108, 172, 0, 190, 203, 76, 108, 60, 244, 183, 75, 189, 158, 47, 134, 60, 233, 8, 255, 187, 228, 182, 63, 190, 72, 253, 27, 190, 35, 155, 5, 62, 213, 91, 83, 190, 179, 100, 160, 61, 125, 203, 53, 62, 61, 92, 151, 190, 20, 2, 166, 189, 240, 151, 191, 189, 174, 203, 5, 190, 5, 45, 44, 62, 238, 223, 49, 190, 50, 204, 195, 189, 235, 27, 167, 189, 199, 146, 66, 190, 226, 61, 127, 61, 15, 68, 196, 189, 255, 112, 165, 189, 62, 192, 157, 190, 130, 144, 114, 62, 47, 55, 173, 60, 180, 163, 48, 190, 156, 117, 5, 61, 94, 77, 190, 61, 58, 79, 22, 191, 5, 150, 62, 61, 255, 230, 156, 62, 245, 243, 5, 191, 244, 214, 129, 62, 109, 176, 78, 191, 197, 154, 34, 189, 42, 174, 197, 60, 192, 229, 203, 190, 246, 14, 245, 189, 125, 176, 120, 190, 8, 124, 8, 62, 118, 161, 171, 190, 208, 171, 59, 61, 21, 227, 132, 61, 61, 179, 174, 62, 5, 175, 16, 190, 181, 14, 74, 62, 179, 70, 92, 188, 108, 94, 21, 63, 250, 213, 165, 62, 25, 43, 208, 61, 101, 109, 20, 62, 136, 83, 96, 62, 108, 167, 27, 63, 9, 95, 6, 190, 69, 128, 4, 190, 126, 94, 184, 190, 160, 123, 69, 189, 211, 116, 208, 190, 48, 1, 63, 60, 204, 120, 117, 190, 239, 210, 5, 62, 68, 42, 69, 189, 85, 193, 60, 62, 105, 234, 157, 189, 134, 244, 132, 190, 254, 106, 141, 62, 253, 246, 26, 62, 129, 172, 144, 62, 189, 64, 18, 63, 132, 178, 146, 190, 251, 222, 94, 62, 79, 10, 241, 188, 49, 128, 107, 61, 213, 77, 192, 61, 111, 66, 45, 61, 202, 199, 35, 190, 97, 190, 82, 61, 227, 34, 19, 62, 150, 103, 138, 62, 126, 25, 31, 60, 21, 233, 34, 190, 201, 60, 149, 61, 229, 219, 75, 190, 106, 190, 85, 190, 117, 44, 92, 189, 250, 197, 8, 62, 212, 93, 163, 62, 134, 181, 239, 190, 168, 134, 191, 62, 145, 188, 78, 62, 253, 91, 223, 61, 200, 11, 115, 189, 82, 29, 159, 62, 229, 95, 202, 61, 164, 222, 33, 62, 163, 145, 179, 189, 172, 175, 68, 190, 235, 218, 142, 62, 0, 194, 15, 62, 111, 19, 135, 61, 56, 110, 5, 190, 100, 28, 36, 191, 137, 115, 113, 62, 37, 20, 66, 190, 189, 245, 180, 61, 36, 171, 151, 60, 115, 14, 235, 189, 72, 218, 192, 190, 227, 209, 90, 62, 174, 192, 220, 61, 212, 225, 135, 190, 55, 3, 22, 62, 99, 188, 83, 190, 234, 52, 5, 191, 106, 106, 212, 188, 145, 158, 20, 190, 155, 140, 167, 62, 47, 226, 2, 190, 227, 36, 127, 190, 13, 148, 226, 60, 62, 110, 181, 190, 206, 208, 26, 62, 241, 96, 117, 189, 34, 80, 164, 190, 59, 186, 4, 62, 57, 181, 226, 61, 160, 216, 184, 61, 150, 244, 24, 190, 73, 134, 169, 60, 143, 104, 77, 189, 54, 147, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 147, 228, 206, 61, 67, 224, 223, 61, 37, 118, 145, 60, 8, 139, 9, 61, 22, 95, 27, 62, 213, 13, 19, 190, 108, 183, 210, 189, 8, 40, 209, 188, 198, 165, 147, 61, 206, 40, 65, 61, 64, 147, 48, 61, 85, 81, 1, 190, 119, 239, 152, 189, 57, 132, 10, 62, 118, 58, 10, 62, 99, 239, 13, 59, 171, 35, 141, 188, 110, 38, 21, 62, 140, 136, 34, 60, 17, 157, 24, 190, 26, 189, 200, 189, 216, 216, 72, 190, 234, 23, 238, 189, 107, 40, 131, 60, 146, 23, 15, 191, 102, 194, 187, 62, 52, 9, 36, 190, 2, 156, 231, 187, 172, 251, 185, 57, 100, 7, 248, 190, 142, 221, 219, 59, 71, 32, 116, 61, 204, 30, 135, 190, 110, 78, 138, 190, 172, 97, 4, 60, 32, 161, 165, 186, 26, 244, 229, 61, 194, 36, 192, 62, 14, 70, 226, 61, 251, 9, 162, 61, 147, 239, 3, 189, 90, 58, 148, 61, 1, 36, 30, 61, 30, 198, 237, 61, 84, 103, 237, 189, 242, 55, 73, 61, 196, 21, 167, 189, 196, 241, 130, 190, 142, 107, 27, 189, 234, 192, 199, 189, 69, 241, 129, 190, 58, 78, 241, 187, 93, 71, 17, 190, 43, 182, 123, 60, 198, 183, 9, 190, 9, 205, 221, 189, 105, 242, 0, 190, 246, 253, 183, 189, 37, 173, 99, 189, 234, 230, 4, 190, 29, 195, 188, 61, 39, 71, 29, 62, 237, 170, 108, 61, 16, 40, 151, 60, 248, 114, 83, 61, 183, 81, 173, 188, 102, 205, 10, 190, 213, 239, 214, 189, 78, 175, 235, 59, 74, 83, 205, 60, 83, 179, 31, 187, 122, 197, 216, 60, 254, 16, 48, 190, 236, 76, 245, 61, 79, 168, 246, 187, 203, 129, 243, 189, 215, 208, 76, 190, 227, 16, 59, 189, 219, 178, 40, 190, 19, 138, 40, 62, 60, 86, 142, 60, 177, 200, 188, 189, 200, 25, 198, 189, 111, 86, 189, 189, 118, 240, 6, 62, 250, 183, 107, 190, 134, 17, 129, 61, 23, 37, 9, 190, 172, 231, 173, 60, 65, 179, 255, 190, 97, 2, 107, 62, 237, 37, 42, 62, 29, 251, 176, 188, 152, 190, 58, 62, 227, 227, 15, 191, 96, 60, 125, 62, 9, 45, 106, 187, 252, 125, 85, 190, 249, 193, 158, 61, 237, 81, 202, 189, 249, 59, 92, 190, 210, 192, 58, 188, 38, 148, 217, 189, 134, 209, 74, 61, 185, 89, 70, 189, 15, 114, 78, 190, 151, 33, 43, 190, 41, 95, 226, 189, 151, 68, 3, 190, 48, 20, 247, 190, 222, 15, 210, 61, 244, 188, 34, 62, 61, 128, 70, 191, 250, 17, 189, 61, 14, 43, 143, 62, 168, 187, 11, 191, 91, 152, 11, 190, 234, 28, 220, 61, 153, 218, 71, 61, 116, 108, 24, 187, 213, 11, 231, 61, 134, 193, 43, 190, 216, 143, 63, 62, 214, 165, 146, 189, 65, 228, 230, 187, 54, 129, 38, 190, 240, 58, 5, 190, 246, 225, 4, 62, 244, 51, 159, 190, 225, 54, 104, 190, 92, 169, 174, 61, 19, 37, 14, 62, 214, 146, 141, 188, 80, 38, 64, 62, 52, 228, 25, 190, 204, 233, 36, 190, 138, 163, 5, 61, 230, 142, 22, 62, 32, 215, 77, 61, 89, 50, 42, 62, 40, 214, 40, 62, 237, 232, 142, 62, 117, 124, 66, 190, 117, 157, 244, 190, 209, 113, 21, 62, 146, 204, 195, 61, 159, 61, 135, 60, 101, 44, 242, 61, 9, 149, 54, 190, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 219, 237, 94, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 66, 159, 94, 62, 185, 127, 106, 190, 201, 215, 1, 62, 88, 139, 25, 189, 109, 106, 240, 190, 97, 205, 171, 190, 23, 22, 139, 61, 140, 45, 125, 189, 232, 249, 65, 61, 112, 243, 57, 61, 30, 127, 70, 190, 136, 26, 243, 190, 95, 71, 150, 188, 161, 45, 100, 190, 9, 164, 85, 190, 11, 176, 8, 190, 153, 89, 36, 62, 93, 73, 14, 190, 137, 237, 213, 61, 230, 81, 200, 190, 182, 3, 250, 61, 228, 210, 153, 190, 170, 199, 94, 62, 3, 153, 58, 63, 86, 21, 152, 188, 85, 180, 250, 190, 150, 253, 123, 62, 149, 184, 133, 190, 160, 71, 222, 62, 124, 226, 1, 62, 215, 85, 236, 190, 99, 225, 78, 58, 160, 196, 27, 62, 21, 243, 138, 62, 102, 140, 208, 190, 144, 188, 163, 59, 165, 154, 23, 189, 120, 175, 104, 62, 11, 245, 28, 191, 189, 3, 139, 190, 221, 136, 210, 190, 134, 32, 102, 62, 1, 52, 183, 190, 134, 208, 124, 62, 197, 75, 4, 62, 194, 165, 117, 188, 195, 140, 100, 190, 168, 29, 17, 61, 159, 102, 189, 61, 234, 97, 158, 190, 238, 125, 132, 62, 192, 18, 118, 190, 101, 11, 228, 61, 212, 46, 116, 62, 54, 70, 102, 62, 139, 186, 118, 190, 244, 56, 179, 61, 161, 175, 134, 62, 190, 226, 228, 190, 254, 27, 180, 62, 212, 179, 37, 191, 59, 239, 115, 189, 156, 158, 101, 62, 118, 107, 177, 190, 59, 59, 239, 61, 81, 227, 146, 190, 134, 0, 146, 186, 229, 167, 142, 61, 207, 106, 91, 61, 14, 136, 220, 188, 178, 218, 241, 61, 50, 181, 166, 62, 189, 17, 118, 62, 76, 142, 49, 62, 28, 9, 27, 60, 88, 130, 11, 62, 170, 244, 119, 62, 36, 124, 221, 61, 190, 205, 128, 62, 134, 41, 8, 62, 173, 78, 149, 61, 251, 38, 199, 189, 112, 61, 119, 190, 119, 232, 90, 62, 226, 6, 213, 190, 149, 29, 211, 61, 178, 104, 0, 190, 36, 80, 183, 189, 7, 54, 14, 62, 148, 76, 148, 62, 168, 14, 138, 61, 74, 44, 88, 61, 253, 41, 235, 190, 179, 51, 196, 61, 135, 63, 35, 62, 94, 120, 50, 190, 249, 214, 214, 189, 62, 54, 40, 189, 250, 236, 226, 62, 187, 245, 30, 62, 139, 48, 150, 189, 217, 88, 249, 189, 154, 232, 196, 189, 216, 243, 77, 188, 130, 189, 148, 62, 100, 91, 146, 61, 187, 145, 102, 62, 207, 204, 39, 62, 182, 132, 200, 190, 230, 165, 147, 190, 233, 122, 132, 190, 104, 201, 213, 62, 77, 237, 180, 188, 26, 111, 163, 62, 82, 221, 235, 190, 159, 124, 201, 190, 186, 154, 250, 60, 215, 58, 91, 188, 249, 229, 149, 190, 243, 232, 73, 63, 82, 19, 104, 189, 188, 225, 242, 190, 144, 75, 127, 62, 70, 110, 111, 190, 62, 221, 224, 62, 90, 87, 30, 62, 60, 164, 174, 190, 163, 73, 163, 190, 78, 151, 29, 190, 211, 70, 26, 62, 188, 37, 8, 191, 173, 213, 196, 59, 205, 6, 243, 60, 49, 185, 205, 189, 71, 192, 240, 190, 150, 57, 213, 61, 20, 66, 74, 190, 0, 165, 224, 61, 178, 154, 174, 190, 221, 99, 72, 187, 147, 152, 151, 61, 119, 125, 24, 190, 23, 192, 24, 188, 248, 114, 131, 188, 82, 72, 24, 61, 145, 178, 221, 190, 33, 206, 217, 62, 170, 98, 231, 189, 29, 91, 122, 62, 114, 106, 155, 62, 247, 107, 125, 62, 206, 179, 72, 190, 104, 214, 175, 189, 119, 57, 184, 189, 74, 125, 251, 60, 190, 202, 48, 62, 57, 162, 31, 190, 60, 41, 234, 57, 120, 225, 29, 190, 166, 65, 82, 190, 81, 211, 50, 190, 20, 67, 76, 61, 183, 65, 100, 61, 197, 146, 18, 62, 250, 244, 70, 61, 253, 31, 98, 62, 228, 128, 248, 185, 146, 196, 135, 189, 183, 184, 11, 190, 153, 36, 1, 189, 124, 64, 211, 61, 45, 213, 15, 62, 63, 65, 136, 62, 190, 75, 242, 61, 67, 51, 2, 62, 74, 80, 216, 62, 227, 74, 174, 60, 15, 232, 174, 189, 45, 42, 138, 191, 98, 186, 108, 61, 222, 108, 123, 189, 15, 74, 161, 62, 60, 227, 64, 190, 60, 194, 45, 63, 41, 114, 115, 187, 45, 102, 170, 189, 200, 232, 13, 62, 141, 175, 213, 188, 188, 147, 210, 62, 87, 96, 243, 61, 65, 178, 174, 190, 192, 15, 117, 188, 173, 172, 75, 190, 76, 187, 104, 62, 120, 62, 159, 190, 56, 157, 239, 61, 175, 17, 116, 60, 171, 196, 111, 62, 23, 13, 236, 190, 222, 193, 76, 62, 178, 170, 78, 190, 107, 90, 47, 59, 240, 122, 196, 190, 103, 162, 221, 189, 210, 52, 194, 60, 146, 241, 172, 61, 187, 73, 74, 61, 199, 103, 189, 61, 200, 241, 174, 188, 114, 23, 52, 191, 69, 150, 55, 62, 253, 39, 142, 189, 143, 27, 252, 60, 173, 246, 226, 62, 253, 100, 118, 62, 124, 80, 130, 61, 251, 183, 179, 189, 105, 221, 180, 61, 83, 236, 78, 62, 110, 70, 117, 191, 217, 48, 18, 62, 213, 243, 1, 62, 56, 246, 11, 190, 85, 1, 55, 60, 229, 129, 202, 190, 133, 214, 136, 62, 215, 247, 58, 190, 123, 63, 13, 191, 255, 9, 4, 62, 32, 185, 76, 62, 254, 114, 152, 191, 145, 242, 210, 187, 89, 226, 84, 190, 115, 106, 88, 190, 174, 249, 66, 190, 28, 122, 171, 189, 134, 84, 212, 189, 196, 206, 15, 62, 142, 217, 45, 190, 62, 119, 177, 62, 96, 170, 226, 61, 204, 77, 253, 190, 47, 128, 57, 62, 151, 224, 94, 61, 8, 175, 68, 62, 128, 147, 39, 61, 148, 195, 140, 190, 81, 135, 44, 190, 211, 249, 159, 189, 223, 221, 137, 62, 122, 34, 167, 190, 103, 127, 175, 62, 115, 7, 138, 189, 217, 158, 63, 62, 134, 166, 173, 61, 189, 113, 99, 191, 56, 204, 132, 57, 222, 113, 49, 60, 241, 149, 36, 62, 120, 31, 173, 190, 159, 5, 71, 62, 47, 253, 119, 62, 182, 154, 62, 62, 105, 175, 167, 62, 214, 195, 26, 62, 38, 24, 18, 190, 40, 120, 18, 62, 178, 247, 70, 62, 76, 190, 245, 60, 39, 223, 127, 62, 49, 193, 220, 189, 132, 243, 13, 62, 126, 35, 235, 189, 54, 25, 203, 61, 125, 238, 9, 191, 94, 51, 99, 61, 245, 146, 113, 190, 56, 111, 2, 62, 34, 19, 174, 190, 124, 122, 183, 62, 206, 112, 47, 62, 71, 29, 14, 190, 113, 158, 176, 62, 236, 113, 125, 190, 47, 47, 201, 62, 49, 230, 221, 189, 11, 59, 120, 189, 150, 247, 159, 59, 37, 168, 87, 61, 65, 54, 132, 61, 220, 33, 208, 190, 30, 38, 175, 188, 14, 86, 115, 61, 160, 139, 24, 62, 197, 18, 138, 190, 235, 126, 166, 62, 51, 11, 81, 189, 181, 138, 136, 188, 23, 51, 35, 190, 56, 107, 87, 62, 218, 151, 100, 62, 73, 84, 138, 62, 206, 131, 2, 189, 4, 105, 32, 62, 37, 13, 157, 189, 12, 0, 27, 191, 199, 24, 96, 60, 200, 60, 9, 62, 165, 156, 126, 189, 240, 161, 58, 61, 75, 23, 191, 189, 30, 85, 74, 191, 164, 91, 65, 188, 251, 71, 2, 62, 224, 186, 221, 190, 225, 134, 160, 189, 184, 40, 136, 190, 239, 165, 7, 62, 79, 172, 210, 189, 26, 169, 18, 190, 19, 92, 29, 60, 248, 4, 217, 189, 105, 213, 0, 190, 228, 34, 129, 190, 175, 224, 1, 63, 108, 233, 9, 190, 7, 154, 144, 62, 190, 247, 45, 190, 188, 242, 9, 189, 167, 155, 74, 188, 147, 193, 80, 190, 20, 8, 140, 60, 49, 164, 187, 61, 19, 115, 53, 62, 144, 9, 69, 62, 39, 172, 73, 191, 208, 51, 148, 61, 62, 166, 154, 59, 144, 218, 41, 61, 74, 215, 140, 62, 36, 96, 78, 191, 198, 81, 99, 190, 77, 224, 8, 188, 200, 54, 111, 63, 50, 114, 158, 61, 181, 137, 241, 190, 165, 187, 66, 62, 229, 190, 203, 61, 241, 102, 237, 62, 97, 135, 33, 62, 221, 170, 84, 190, 154, 243, 18, 190, 88, 127, 55, 190, 138, 0, 174, 61, 248, 152, 238, 190, 78, 159, 246, 62, 114, 35, 113, 62, 116, 198, 168, 61, 130, 213, 28, 191, 51, 152, 157, 190, 234, 104, 108, 190, 108, 206, 221, 62, 90, 208, 235, 190, 40, 143, 112, 190, 64, 201, 170, 189, 104, 7, 7, 189, 183, 123, 69, 189, 223, 31, 142, 62, 77, 83, 222, 61, 198, 10, 52, 191, 13, 130, 234, 62, 4, 231, 148, 190, 133, 157, 166, 62, 232, 1, 190, 62, 17, 74, 136, 62, 111, 199, 179, 60, 118, 65, 52, 62, 233, 29, 88, 62, 30, 9, 128, 60, 206, 202, 64, 62, 169, 62, 111, 62, 221, 2, 126, 188, 186, 41, 160, 189, 233, 37, 21, 190, 246, 56, 45, 62, 132, 80, 254, 61, 108, 162, 116, 189, 203, 176, 22, 190, 251, 193, 29, 62, 161, 155, 250, 61, 126, 101, 185, 61, 69, 51, 101, 62, 102, 40, 236, 189, 193, 10, 110, 60, 184, 162, 140, 61, 129, 176, 131, 61, 25, 2, 103, 188, 173, 130, 190, 61, 153, 203, 97, 188, 213, 69, 194, 62, 28, 165, 22, 190, 98, 157, 45, 190, 235, 176, 129, 189, 73, 186, 15, 190, 169, 60, 159, 189, 144, 74, 30, 62, 74, 64, 39, 189, 77, 98, 226, 60, 192, 210, 162, 60, 77, 213, 25, 62, 149, 229, 211, 60, 24, 120, 125, 61, 189, 144, 137, 58, 219, 23, 128, 190, 97, 244, 150, 190, 116, 147, 146, 190, 182, 147, 11, 191, 88, 205, 34, 190, 68, 246, 124, 61, 185, 172, 26, 62, 187, 57, 53, 190, 91, 207, 215, 61, 61, 50, 128, 188, 237, 67, 52, 62, 182, 27, 32, 189, 111, 165, 156, 62, 242, 62, 67, 62, 189, 32, 23, 189, 181, 84, 59, 190, 247, 59, 181, 190, 162, 220, 174, 189, 103, 186, 129, 61, 154, 35, 5, 190, 146, 79, 172, 62, 51, 135, 202, 190, 246, 136, 32, 191, 107, 139, 168, 189, 227, 7, 217, 62, 161, 97, 187, 186, 68, 98, 126, 62, 3, 145, 44, 190, 167, 54, 223, 189, 255, 177, 236, 189, 63, 231, 131, 189, 79, 251, 60, 189, 128, 213, 53, 189, 159, 54, 90, 189, 202, 27, 218, 189, 141, 53, 30, 189, 53, 109, 180, 61, 145, 79, 214, 190, 0, 55, 68, 61, 204, 5, 231, 61, 15, 81, 114, 62, 20, 91, 170, 61, 25, 197, 208, 62, 135, 119, 65, 189, 149, 237, 223, 60, 41, 4, 216, 189, 199, 235, 177, 61, 182, 241, 136, 61, 235, 12, 72, 61, 7, 29, 173, 61, 198, 106, 159, 61, 13, 150, 44, 188, 100, 101, 4, 191, 8, 246, 138, 59, 68, 40, 247, 61, 74, 254, 32, 62, 230, 92, 223, 61, 2, 114, 98, 190, 79, 68, 69, 61, 226, 12, 26, 189, 130, 127, 245, 190, 131, 219, 141, 62, 249, 106, 115, 62, 101, 247, 173, 62, 176, 206, 88, 191, 77, 185, 242, 189, 49, 162, 64, 190, 26, 226, 51, 189, 3, 85, 26, 185, 168, 187, 214, 190, 108, 75, 21, 62, 115, 84, 15, 191, 66, 163, 255, 189, 238, 55, 124, 61, 207, 2, 143, 62, 211, 23, 235, 190, 228, 31, 47, 190, 125, 134, 68, 190, 42, 5, 88, 189, 66, 54, 245, 188, 42, 99, 185, 188, 186, 157, 187, 189, 189, 242, 237, 189, 228, 236, 7, 190, 227, 224, 142, 189, 15, 111, 46, 62, 11, 170, 139, 190, 31, 156, 25, 190, 182, 174, 136, 62, 123, 104, 37, 61, 158, 27, 142, 189, 255, 17, 37, 61, 90, 174, 18, 190, 155, 46, 208, 189, 132, 245, 130, 190, 79, 253, 244, 62, 192, 7, 197, 61, 203, 179, 148, 190, 90, 178, 110, 189, 5, 215, 194, 60, 228, 108, 28, 62, 144, 200, 37, 191, 188, 228, 20, 62, 60, 86, 27, 61, 173, 130, 215, 61, 84, 142, 10, 191, 52, 97, 143, 62, 193, 216, 196, 190, 85, 160, 170, 188, 213, 250, 16, 191, 224, 92, 144, 188, 147, 192, 57, 62, 10, 96, 134, 62, 241, 148, 163, 61, 32, 25, 157, 61, 155, 144, 5, 190, 128, 51, 188, 190, 185, 250, 117, 62, 253, 132, 75, 62, 119, 189, 234, 188, 64, 81, 10, 190, 121, 212, 135, 189, 128, 115, 59, 190, 108, 54, 99, 189, 233, 110, 136, 62, 246, 34, 17, 61, 106, 187, 201, 62, 41, 80, 84, 190, 188, 69, 230, 61, 85, 100, 88, 61, 135, 4, 135, 62, 243, 196, 89, 189, 146, 242, 164, 61, 161, 106, 128, 187, 68, 153, 208, 188, 168, 7, 163, 188, 5, 106, 67, 62, 232, 158, 186, 62, 107, 248, 212, 188, 145, 23, 20, 62, 152, 239, 30, 62, 120, 45, 35, 62, 110, 115, 136, 188, 226, 242, 171, 188, 14, 180, 255, 60, 6, 85, 105, 61, 94, 228, 65, 62, 173, 97, 106, 189, 253, 107, 93, 61, 188, 178, 178, 189, 8, 13, 48, 61, 91, 93, 205, 61, 157, 1, 63, 190, 3, 202, 236, 188, 59, 94, 27, 191, 224, 184, 32, 190, 207, 9, 5, 63, 70, 184, 36, 191, 253, 70, 204, 62, 76, 109, 166, 191, 181, 121, 171, 187, 94, 187, 160, 62, 94, 12, 20, 191, 200, 141, 210, 190, 162, 165, 125, 191, 130, 239, 196, 61, 133, 116, 179, 190, 31, 91, 30, 190, 15, 6, 133, 62, 19, 167, 169, 62, 6, 154, 4, 190, 68, 77, 104, 190, 43, 185, 85, 190, 105, 68, 164, 188, 161, 53, 112, 62, 194, 140, 100, 62, 51, 179, 81, 62, 120, 1, 44, 62, 101, 227, 192, 188, 51, 233, 30, 61, 76, 124, 177, 61, 60, 108, 11, 191, 135, 76, 117, 60, 56, 64, 143, 191, 11, 193, 26, 62, 101, 201, 136, 190, 158, 246, 234, 190, 95, 198, 136, 61, 101, 24, 139, 62, 229, 139, 29, 191, 178, 223, 149, 62, 0, 180, 0, 191, 224, 110, 90, 62, 219, 255, 85, 62, 159, 205, 118, 191, 56, 122, 140, 190, 241, 173, 130, 188, 163, 237, 17, 62, 161, 69, 128, 190, 12, 208, 55, 62, 217, 32, 42, 62, 195, 195, 190, 62, 9, 141, 167, 62, 254, 139, 175, 61, 115, 6, 238, 189, 4, 6, 69, 188, 212, 167, 8, 62, 22, 73, 88, 62, 61, 36, 146, 62, 228, 27, 212, 189, 196, 135, 227, 62, 59, 89, 37, 189, 58, 126, 62, 62, 105, 92, 44, 191, 48, 156, 130, 62, 201, 155, 89, 190, 131, 133, 20, 190, 82, 79, 154, 190, 81, 31, 188, 188, 96, 38, 249, 61, 51, 168, 24, 191, 179, 206, 76, 60, 190, 35, 86, 62, 192, 243, 141, 62, 56, 197, 73, 191, 121, 27, 138, 190, 11, 8, 120, 190, 24, 55, 79, 190, 218, 237, 38, 62, 84, 116, 140, 190, 33, 17, 88, 62, 243, 244, 215, 190, 173, 241, 223, 60, 242, 222, 131, 62, 123, 99, 224, 61, 76, 131, 165, 190, 92, 139, 38, 190, 104, 96, 65, 189, 49, 249, 182, 61, 10, 22, 49, 190, 102, 4, 244, 189, 111, 183, 239, 61, 143, 148, 198, 190, 152, 61, 145, 61, 65, 193, 59, 190, 253, 55, 172, 61, 178, 222, 66, 190, 14, 125, 179, 190, 120, 45, 33, 61, 91, 161, 50, 62, 170, 88, 77, 191, 233, 161, 7, 190, 128, 79, 64, 62, 165, 219, 10, 191, 91, 35, 214, 62, 113, 250, 94, 189, 7, 248, 112, 61, 84, 211, 161, 188, 135, 73, 44, 191, 228, 77, 73, 190, 145, 145, 40, 62, 49, 203, 29, 61, 116, 155, 183, 190, 233, 9, 3, 61, 37, 84, 236, 61, 193, 106, 217, 62, 118, 73, 15, 62, 252, 72, 255, 60, 20, 73, 106, 190, 147, 102, 99, 62, 248, 200, 205, 189, 230, 242, 101, 190, 190, 31, 122, 190, 58, 140, 219, 61, 212, 155, 79, 62, 13, 233, 132, 61, 180, 71, 195, 61, 162, 233, 28, 191, 241, 171, 4, 62, 211, 234, 181, 190, 172, 65, 249, 189, 120, 40, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 150, 101, 61, 158, 117, 59, 61, 160, 235, 184, 189, 124, 132, 93, 61, 138, 155, 62, 62, 92, 84, 33, 190, 145, 156, 172, 61, 110, 240, 12, 190, 30, 127, 15, 190, 159, 126, 94, 61, 120, 66, 13, 191, 33, 46, 98, 62, 24, 176, 183, 61, 149, 106, 195, 189, 223, 86, 3, 62, 72, 250, 253, 58, 166, 242, 0, 61, 101, 55, 85, 61, 220, 26, 112, 60, 156, 117, 133, 62, 24, 70, 48, 190, 42, 103, 1, 190, 167, 35, 251, 61, 101, 172, 183, 59, 88, 246, 8, 62, 119, 192, 69, 61, 54, 22, 165, 61, 200, 133, 200, 61, 33, 76, 169, 61, 25, 7, 35, 62, 3, 62, 65, 62, 56, 210, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 120, 253, 190, 19, 245, 3, 190, 125, 211, 20, 63, 222, 165, 161, 62, 6, 145, 9, 62, 43, 197, 230, 60, 49, 188, 175, 61, 24, 87, 56, 61, 163, 44, 202, 62, 83, 51, 174, 189, 249, 130, 71, 63, 195, 143, 134, 190, 234, 124, 54, 62, 29, 225, 205, 190, 180, 185, 220, 190, 96, 217, 188, 190, 66, 122, 229, 190, 121, 43, 241, 190, 154, 44, 217, 62, 1, 62, 92, 190, 72, 52, 233, 62, 158, 129, 66, 191, 23, 178, 19, 187, 112, 230, 241, 62, 57, 215, 62, 189, 179, 108, 185, 190, 203, 121, 184, 190, 255, 198, 240, 61, 182, 14, 111, 63, 233, 27, 40, 63, 140, 110, 138, 190, 84, 109, 227, 62, 124, 205, 25, 189, 196, 239, 24, 62, 4, 168, 249, 62, 48, 16, 49, 62, 174, 3, 239, 190, 56, 6, 240, 60, 77, 253, 82, 190, 227, 25, 95, 60, 21, 94, 149, 60, 174, 65, 49, 190, 148, 36, 84, 62, 202, 55, 202, 62, 242, 168, 175, 189, 131, 45, 193, 62, 102, 212, 96, 62, 216, 233, 158, 62, 108, 25, 98, 190, 17, 199, 144, 190, 101, 158, 229, 189, 57, 58, 118, 190, 6, 17, 74, 62, 82, 185, 114, 62, 160, 251, 68, 190, 115, 235, 1, 190, 205, 154, 156, 190, 212, 12, 13, 62, 209, 156, 130, 188, 9, 8, 98, 190, 186, 188, 147, 62, 228, 35, 6, 189, 107, 63, 36, 62, 107, 15, 148, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 105, 169, 188, 245, 62, 212, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {85, 135, 147, 191, 251, 244, 218, 191, 181, 25, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 206, 188, 191, 71, 98, 130, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}