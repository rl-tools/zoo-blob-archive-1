// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 1, 41, 191, 106, 43, 174, 191, 148, 55, 114, 190, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 10, 69, 166, 62, 107, 81, 161, 191, 148, 2, 65, 190, 6, 115, 197, 190, 186, 128, 155, 191, 45, 196, 136, 190, 47, 197, 188, 190, 42, 50, 122, 191, 201, 163, 11, 63, 121, 184, 92, 61, 165, 149, 1, 63, 99, 56, 176, 190, 53, 153, 28, 190, 156, 197, 180, 189, 182, 56, 192, 190, 158, 65, 147, 61, 149, 188, 3, 62, 217, 246, 23, 191, 132, 132, 37, 190, 99, 245, 48, 62, 119, 43, 216, 190, 55, 206, 81, 61, 130, 243, 168, 63, 197, 62, 221, 62, 92, 173, 6, 63, 99, 63, 41, 62, 232, 163, 55, 191, 23, 62, 116, 61, 104, 198, 201, 191, 55, 202, 220, 190, 29, 92, 185, 189, 201, 33, 108, 191, 100, 229, 192, 62, 177, 55, 64, 190, 212, 245, 42, 63, 60, 192, 151, 190, 203, 39, 239, 190, 232, 255, 132, 190, 206, 174, 86, 60, 221, 253, 47, 191, 24, 4, 249, 190, 214, 75, 42, 63, 134, 164, 3, 63, 63, 5, 17, 190, 11, 106, 135, 62, 32, 191, 173, 62, 239, 81, 163, 191, 83, 212, 225, 190, 158, 66, 219, 188, 69, 35, 9, 191, 206, 92, 57, 62, 131, 85, 175, 62, 204, 12, 148, 191, 201, 123, 141, 190, 248, 16, 120, 191, 181, 140, 177, 190, 144, 13, 5, 188, 132, 64, 39, 191, 147, 253, 73, 63, 86, 245, 71, 61, 177, 216, 12, 191, 103, 114, 20, 63, 76, 148, 60, 61, 140, 47, 132, 190, 62, 153, 4, 63, 62, 2, 65, 62, 192, 174, 9, 63, 45, 19, 103, 191, 216, 130, 234, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 95, 140, 40, 63, 86, 201, 201, 190, 251, 143, 140, 190, 159, 38, 109, 63, 102, 222, 115, 63, 90, 151, 8, 63, 124, 186, 185, 190, 108, 118, 111, 63, 148, 179, 72, 190, 174, 91, 98, 190, 244, 150, 20, 191, 185, 58, 61, 191, 19, 192, 126, 189, 225, 73, 154, 191, 78, 151, 43, 61, 93, 198, 10, 62, 121, 206, 154, 62, 248, 107, 10, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 91, 147, 190, 9, 231, 173, 190, 224, 204, 15, 62, 111, 51, 190, 189, 185, 233, 72, 190, 144, 213, 168, 189, 206, 11, 172, 62, 198, 243, 144, 189, 15, 64, 90, 191, 17, 102, 207, 190, 155, 57, 16, 63, 50, 91, 173, 189, 154, 54, 138, 190, 26, 43, 181, 62, 2, 233, 4, 63, 9, 38, 238, 190, 88, 57, 74, 63, 184, 133, 120, 60, 89, 152, 234, 190, 187, 96, 88, 189, 98, 193, 1, 62, 74, 203, 30, 63, 222, 196, 27, 63, 104, 102, 175, 62, 144, 234, 57, 188, 250, 74, 164, 190, 226, 129, 47, 191, 189, 197, 112, 190, 171, 90, 217, 187, 209, 26, 94, 190, 36, 43, 81, 62, 177, 55, 125, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 80, 192, 189, 149, 125, 21, 190, 53, 15, 160, 189, 41, 2, 67, 61, 87, 236, 16, 191, 195, 237, 16, 190, 192, 210, 200, 188, 228, 125, 217, 61, 212, 209, 28, 190, 151, 75, 207, 62, 251, 153, 155, 61, 187, 203, 10, 188, 220, 48, 82, 61, 245, 240, 108, 61, 30, 155, 151, 61, 242, 235, 59, 191, 193, 104, 159, 191, 184, 29, 42, 190, 166, 113, 219, 190, 13, 238, 146, 190, 26, 102, 115, 62, 122, 215, 79, 62, 117, 178, 109, 62, 200, 92, 164, 190, 254, 117, 137, 62, 247, 99, 60, 60, 194, 249, 222, 190, 59, 235, 11, 191, 226, 118, 139, 189, 216, 60, 78, 62, 215, 24, 16, 62, 75, 96, 33, 62, 171, 47, 0, 190, 33, 146, 54, 61, 226, 165, 179, 190, 217, 219, 135, 190, 190, 118, 60, 61, 207, 244, 236, 60, 208, 24, 140, 61, 197, 27, 201, 61, 163, 46, 198, 189, 135, 34, 189, 189, 30, 133, 40, 62, 65, 184, 144, 190, 5, 224, 201, 61, 225, 92, 65, 62, 91, 12, 193, 190, 238, 98, 25, 189, 180, 138, 168, 189, 53, 151, 71, 190, 152, 48, 54, 62, 0, 185, 182, 190, 137, 4, 112, 190, 33, 53, 6, 190, 84, 233, 130, 190, 208, 66, 100, 61, 176, 77, 242, 189, 255, 112, 165, 189, 175, 219, 199, 190, 103, 87, 167, 62, 65, 198, 139, 188, 197, 190, 190, 189, 208, 164, 166, 186, 133, 48, 35, 62, 87, 192, 51, 191, 5, 150, 62, 61, 159, 57, 164, 62, 152, 119, 47, 191, 119, 201, 128, 62, 154, 86, 70, 191, 192, 24, 150, 189, 154, 79, 54, 59, 240, 221, 203, 190, 171, 185, 146, 189, 234, 15, 121, 190, 6, 99, 249, 61, 197, 72, 173, 190, 42, 3, 209, 188, 168, 128, 188, 61, 21, 178, 176, 62, 43, 198, 23, 190, 117, 99, 73, 62, 182, 103, 11, 189, 7, 156, 26, 63, 164, 39, 211, 62, 243, 55, 16, 62, 51, 11, 61, 62, 1, 197, 81, 62, 71, 74, 27, 63, 9, 95, 6, 190, 124, 144, 68, 190, 8, 68, 200, 190, 153, 202, 2, 190, 255, 207, 30, 191, 164, 212, 5, 60, 67, 167, 117, 190, 59, 105, 195, 61, 68, 42, 69, 189, 82, 101, 84, 62, 80, 40, 213, 189, 104, 248, 139, 190, 224, 21, 140, 62, 163, 151, 25, 62, 172, 93, 144, 62, 22, 150, 21, 63, 113, 57, 146, 190, 117, 157, 90, 62, 129, 196, 48, 60, 146, 129, 249, 61, 27, 8, 161, 61, 138, 100, 139, 61, 242, 225, 121, 190, 16, 241, 108, 61, 206, 138, 41, 62, 221, 238, 14, 62, 27, 61, 77, 61, 232, 180, 13, 190, 69, 179, 47, 61, 160, 198, 101, 190, 132, 180, 91, 190, 163, 148, 132, 188, 250, 197, 8, 62, 227, 140, 198, 62, 217, 102, 240, 190, 131, 43, 188, 62, 122, 13, 92, 62, 243, 193, 53, 62, 1, 82, 35, 62, 81, 83, 171, 62, 229, 95, 202, 61, 92, 163, 53, 62, 79, 176, 162, 189, 194, 160, 37, 190, 145, 100, 140, 62, 210, 177, 20, 62, 33, 214, 136, 61, 247, 242, 20, 190, 240, 116, 92, 191, 142, 87, 119, 62, 86, 129, 56, 190, 118, 220, 20, 62, 40, 137, 60, 60, 39, 140, 222, 189, 78, 237, 216, 190, 106, 63, 96, 62, 113, 19, 255, 61, 115, 157, 165, 190, 225, 130, 41, 62, 223, 155, 60, 190, 86, 249, 18, 191, 245, 135, 119, 189, 87, 123, 47, 190, 61, 148, 178, 62, 47, 226, 2, 190, 159, 97, 90, 190, 145, 110, 26, 61, 99, 108, 198, 190, 21, 134, 32, 62, 199, 124, 179, 188, 205, 238, 138, 190, 199, 113, 2, 62, 57, 181, 226, 61, 15, 105, 179, 61, 162, 32, 27, 190, 198, 225, 137, 60, 143, 104, 77, 189, 43, 88, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 188, 85, 202, 61, 22, 19, 218, 61, 37, 118, 145, 60, 245, 11, 0, 61, 235, 191, 24, 62, 126, 5, 22, 190, 108, 220, 213, 189, 205, 31, 215, 188, 172, 100, 144, 61, 89, 243, 57, 61, 78, 202, 47, 61, 248, 243, 1, 190, 78, 194, 153, 189, 64, 4, 9, 62, 118, 58, 10, 62, 99, 239, 13, 59, 171, 35, 141, 188, 110, 38, 21, 62, 140, 136, 34, 60, 190, 99, 28, 190, 214, 55, 201, 189, 0, 252, 169, 190, 234, 23, 238, 189, 150, 134, 61, 61, 180, 127, 40, 191, 31, 93, 187, 62, 16, 138, 235, 189, 59, 215, 7, 61, 38, 202, 156, 61, 51, 135, 25, 191, 14, 252, 193, 188, 217, 134, 137, 61, 147, 11, 143, 190, 86, 188, 130, 190, 151, 93, 6, 61, 101, 223, 68, 60, 17, 25, 205, 61, 157, 212, 194, 62, 57, 235, 237, 61, 86, 244, 148, 61, 224, 57, 24, 188, 152, 128, 127, 61, 228, 219, 58, 61, 146, 181, 1, 62, 100, 28, 251, 189, 212, 187, 144, 61, 196, 21, 167, 189, 214, 246, 59, 190, 185, 23, 93, 189, 96, 187, 133, 189, 185, 85, 119, 190, 95, 46, 196, 60, 164, 190, 19, 190, 43, 182, 123, 60, 198, 183, 9, 190, 9, 205, 221, 189, 105, 242, 0, 190, 246, 253, 183, 189, 37, 173, 99, 189, 234, 230, 4, 190, 29, 195, 188, 61, 39, 71, 29, 62, 237, 170, 108, 61, 16, 40, 151, 60, 248, 114, 83, 61, 183, 81, 173, 188, 102, 205, 10, 190, 213, 239, 214, 189, 78, 175, 235, 59, 74, 83, 205, 60, 83, 179, 31, 187, 122, 197, 216, 60, 254, 16, 48, 190, 236, 76, 245, 61, 79, 168, 246, 187, 203, 129, 243, 189, 215, 208, 76, 190, 227, 16, 59, 189, 219, 178, 40, 190, 19, 138, 40, 62, 60, 86, 142, 60, 177, 200, 188, 189, 200, 25, 198, 189, 111, 86, 189, 189, 118, 240, 6, 62, 41, 245, 179, 190, 134, 17, 129, 61, 125, 130, 91, 190, 48, 148, 133, 189, 65, 179, 255, 190, 9, 213, 103, 62, 200, 50, 19, 62, 78, 162, 36, 189, 145, 230, 38, 62, 139, 200, 136, 190, 57, 250, 111, 62, 167, 233, 43, 189, 252, 125, 85, 190, 6, 103, 145, 61, 4, 83, 54, 190, 249, 59, 92, 190, 47, 10, 84, 188, 91, 12, 11, 190, 134, 209, 74, 61, 51, 112, 139, 189, 76, 109, 156, 190, 171, 213, 52, 190, 248, 63, 255, 189, 145, 247, 5, 188, 80, 133, 238, 190, 222, 15, 210, 61, 89, 31, 101, 62, 114, 23, 91, 191, 164, 97, 183, 61, 209, 239, 128, 62, 190, 17, 41, 191, 91, 152, 11, 190, 238, 51, 8, 62, 153, 218, 71, 61, 62, 211, 131, 188, 121, 208, 240, 61, 69, 47, 1, 190, 244, 13, 64, 62, 30, 177, 138, 189, 124, 152, 80, 187, 7, 138, 74, 190, 155, 43, 51, 190, 12, 120, 8, 62, 244, 151, 191, 190, 237, 149, 79, 190, 107, 173, 163, 61, 228, 204, 2, 62, 218, 82, 178, 60, 114, 13, 55, 62, 9, 188, 60, 190, 183, 134, 49, 190, 152, 226, 0, 189, 161, 50, 3, 62, 65, 6, 35, 61, 46, 51, 29, 62, 185, 221, 24, 62, 137, 86, 131, 62, 117, 124, 66, 190, 51, 215, 19, 191, 66, 52, 7, 62, 24, 221, 136, 61, 12, 71, 32, 186, 247, 20, 222, 61, 151, 242, 49, 190, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 83, 170, 104, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 171, 40, 85, 62, 185, 127, 106, 190, 201, 215, 1, 62, 146, 133, 67, 189, 109, 106, 240, 190, 112, 41, 174, 190, 110, 187, 112, 61, 95, 167, 146, 189, 232, 249, 65, 61, 151, 232, 30, 61, 30, 127, 70, 190, 136, 26, 243, 190, 238, 49, 206, 188, 139, 230, 107, 190, 109, 129, 94, 190, 11, 176, 8, 190, 153, 89, 36, 62, 93, 73, 14, 190, 6, 130, 193, 61, 230, 81, 200, 190, 182, 3, 250, 61, 228, 210, 153, 190, 159, 206, 84, 62, 67, 178, 69, 63, 86, 21, 152, 188, 146, 220, 247, 190, 143, 32, 131, 62, 30, 170, 136, 190, 83, 36, 225, 62, 236, 13, 5, 62, 219, 146, 234, 190, 178, 216, 77, 59, 65, 3, 135, 61, 23, 26, 145, 62, 229, 126, 215, 190, 34, 159, 247, 186, 65, 80, 20, 189, 202, 176, 86, 62, 132, 13, 33, 191, 138, 229, 123, 190, 236, 223, 222, 190, 193, 87, 94, 62, 141, 171, 209, 190, 65, 203, 139, 62, 252, 166, 208, 61, 14, 126, 36, 189, 44, 224, 140, 190, 192, 97, 109, 59, 159, 102, 189, 61, 5, 216, 202, 190, 145, 137, 133, 62, 101, 234, 126, 190, 156, 158, 241, 61, 104, 245, 60, 62, 90, 169, 52, 62, 234, 189, 168, 190, 244, 56, 179, 61, 130, 6, 142, 62, 143, 63, 12, 191, 84, 178, 174, 62, 240, 44, 24, 191, 12, 255, 101, 189, 23, 65, 146, 62, 222, 90, 194, 190, 89, 107, 224, 61, 23, 162, 143, 190, 44, 145, 169, 59, 120, 209, 157, 61, 181, 5, 173, 61, 140, 152, 198, 188, 21, 235, 192, 61, 44, 16, 171, 62, 218, 249, 119, 62, 48, 181, 46, 62, 147, 70, 208, 60, 176, 178, 13, 62, 213, 128, 128, 62, 181, 212, 245, 61, 22, 202, 121, 62, 116, 81, 15, 62, 173, 78, 149, 61, 124, 151, 49, 189, 67, 145, 122, 190, 104, 202, 141, 62, 40, 182, 231, 190, 131, 70, 7, 62, 98, 222, 6, 190, 209, 74, 149, 189, 7, 54, 14, 62, 76, 56, 150, 62, 177, 21, 204, 61, 53, 42, 143, 61, 227, 7, 226, 190, 243, 133, 235, 61, 2, 161, 50, 62, 56, 111, 11, 190, 249, 214, 214, 189, 108, 68, 144, 188, 178, 176, 224, 62, 114, 200, 9, 62, 85, 100, 45, 189, 113, 203, 193, 189, 10, 158, 132, 188, 157, 58, 49, 59, 220, 162, 155, 62, 244, 134, 40, 62, 26, 182, 111, 62, 239, 135, 39, 62, 47, 107, 136, 190, 135, 244, 94, 190, 174, 135, 103, 190, 148, 187, 214, 62, 77, 237, 180, 188, 69, 225, 154, 62, 123, 23, 231, 190, 43, 40, 168, 190, 195, 113, 59, 61, 209, 73, 39, 189, 92, 48, 182, 190, 149, 91, 82, 63, 82, 19, 104, 189, 176, 124, 227, 190, 152, 217, 112, 62, 231, 170, 85, 190, 127, 236, 228, 62, 92, 205, 45, 62, 144, 72, 171, 190, 16, 242, 170, 190, 227, 189, 164, 190, 97, 57, 52, 62, 131, 131, 25, 191, 177, 133, 195, 60, 213, 186, 190, 60, 204, 34, 212, 189, 188, 227, 232, 190, 60, 130, 238, 61, 67, 219, 85, 190, 155, 92, 5, 62, 9, 132, 188, 190, 146, 238, 190, 60, 102, 210, 210, 59, 43, 34, 103, 190, 49, 64, 189, 189, 55, 188, 63, 59, 82, 72, 24, 61, 233, 37, 14, 191, 205, 66, 203, 62, 101, 128, 23, 190, 114, 105, 114, 62, 131, 43, 167, 62, 220, 148, 75, 62, 37, 73, 112, 190, 104, 214, 175, 189, 21, 107, 141, 189, 82, 177, 210, 60, 219, 102, 56, 62, 66, 100, 129, 190, 124, 83, 187, 189, 154, 122, 122, 190, 106, 67, 111, 190, 218, 88, 76, 189, 100, 123, 141, 188, 117, 186, 186, 61, 227, 126, 232, 61, 248, 8, 202, 188, 199, 113, 111, 62, 34, 223, 215, 60, 64, 175, 95, 189, 80, 232, 201, 189, 151, 11, 141, 189, 110, 20, 26, 62, 3, 180, 16, 62, 20, 20, 145, 62, 9, 193, 13, 62, 27, 149, 49, 62, 153, 223, 230, 62, 227, 74, 174, 60, 118, 113, 51, 61, 224, 73, 157, 191, 182, 110, 135, 187, 125, 237, 242, 189, 143, 156, 155, 62, 48, 171, 80, 190, 142, 129, 50, 63, 41, 114, 115, 187, 37, 146, 233, 189, 9, 121, 2, 62, 202, 157, 45, 188, 192, 143, 216, 62, 160, 155, 254, 61, 181, 241, 169, 190, 39, 21, 34, 189, 169, 154, 83, 190, 236, 203, 116, 62, 73, 113, 199, 190, 28, 156, 222, 61, 7, 153, 196, 60, 176, 8, 92, 62, 19, 61, 220, 190, 50, 201, 68, 62, 215, 123, 115, 190, 190, 110, 199, 187, 86, 19, 231, 190, 30, 237, 249, 189, 26, 255, 26, 61, 167, 226, 191, 61, 239, 42, 90, 61, 134, 217, 129, 61, 200, 241, 174, 188, 179, 231, 80, 191, 202, 216, 55, 62, 106, 134, 171, 189, 23, 107, 137, 60, 6, 59, 198, 62, 74, 185, 126, 62, 230, 207, 195, 61, 251, 183, 179, 189, 45, 237, 157, 61, 108, 75, 97, 62, 106, 26, 117, 191, 194, 146, 11, 62, 252, 194, 254, 61, 154, 41, 18, 190, 134, 255, 22, 188, 30, 158, 223, 190, 131, 89, 137, 62, 47, 183, 109, 190, 216, 120, 46, 191, 52, 42, 7, 62, 222, 87, 60, 62, 182, 41, 149, 191, 75, 201, 178, 58, 251, 109, 108, 190, 212, 176, 86, 190, 102, 101, 105, 190, 10, 148, 206, 189, 215, 183, 175, 189, 12, 213, 32, 62, 16, 81, 37, 190, 213, 194, 165, 62, 96, 170, 226, 61, 175, 89, 18, 191, 156, 146, 71, 62, 86, 245, 79, 61, 229, 51, 52, 62, 150, 67, 41, 188, 150, 20, 160, 190, 156, 183, 28, 190, 211, 249, 159, 189, 54, 89, 158, 62, 46, 21, 171, 190, 135, 233, 172, 62, 152, 119, 74, 189, 25, 31, 96, 62, 58, 167, 241, 61, 19, 42, 97, 191, 43, 151, 180, 189, 224, 128, 190, 60, 129, 210, 109, 62, 210, 99, 167, 190, 205, 183, 60, 62, 230, 231, 133, 62, 196, 162, 46, 62, 12, 70, 159, 62, 196, 175, 71, 62, 196, 184, 15, 190, 7, 104, 79, 62, 71, 216, 115, 62, 149, 21, 55, 189, 215, 224, 70, 62, 150, 142, 42, 190, 97, 117, 38, 62, 126, 35, 235, 189, 25, 67, 48, 62, 128, 164, 21, 191, 107, 180, 217, 60, 207, 137, 70, 190, 109, 63, 51, 62, 28, 97, 187, 190, 142, 7, 197, 62, 206, 112, 47, 62, 107, 37, 53, 190, 32, 242, 175, 62, 150, 137, 88, 190, 208, 177, 202, 62, 30, 182, 222, 189, 234, 214, 108, 189, 107, 87, 153, 188, 86, 118, 4, 186, 92, 190, 134, 61, 141, 243, 249, 190, 208, 133, 90, 188, 188, 190, 112, 61, 167, 176, 11, 62, 236, 95, 107, 190, 95, 221, 159, 62, 241, 106, 198, 189, 234, 190, 167, 188, 27, 173, 113, 190, 242, 126, 103, 62, 12, 181, 89, 62, 144, 106, 132, 62, 45, 206, 79, 189, 225, 122, 241, 61, 37, 13, 157, 189, 243, 106, 59, 191, 174, 222, 17, 188, 130, 79, 225, 61, 249, 253, 161, 189, 228, 143, 11, 59, 122, 101, 210, 189, 110, 148, 54, 191, 164, 91, 65, 188, 126, 228, 0, 62, 245, 156, 187, 190, 216, 88, 10, 190, 78, 51, 86, 190, 78, 90, 63, 62, 238, 130, 64, 189, 42, 165, 226, 188, 91, 71, 224, 187, 219, 22, 186, 189, 165, 107, 21, 190, 213, 164, 146, 190, 171, 211, 23, 63, 147, 80, 6, 190, 222, 163, 91, 62, 219, 24, 72, 190, 242, 241, 62, 189, 40, 169, 87, 188, 108, 89, 87, 190, 163, 207, 190, 187, 102, 252, 254, 61, 245, 206, 80, 62, 37, 136, 63, 62, 32, 72, 88, 191, 208, 51, 148, 61, 233, 143, 14, 58, 61, 10, 227, 60, 67, 150, 191, 62, 148, 66, 60, 191, 138, 176, 108, 190, 167, 198, 42, 189, 29, 189, 113, 63, 50, 114, 158, 61, 104, 147, 255, 190, 138, 23, 45, 62, 73, 251, 191, 61, 255, 48, 233, 62, 29, 46, 38, 62, 104, 182, 89, 190, 176, 50, 50, 190, 153, 87, 141, 190, 4, 53, 205, 61, 75, 17, 4, 191, 176, 224, 239, 62, 233, 19, 119, 62, 2, 7, 152, 61, 64, 71, 28, 191, 188, 141, 154, 190, 8, 192, 136, 190, 62, 5, 220, 62, 107, 34, 12, 191, 60, 133, 74, 190, 242, 236, 175, 189, 247, 79, 17, 189, 146, 124, 158, 189, 199, 98, 129, 62, 77, 83, 222, 61, 59, 233, 82, 191, 156, 45, 241, 62, 41, 202, 154, 190, 84, 60, 157, 62, 21, 9, 173, 62, 57, 145, 131, 62, 227, 110, 43, 61, 118, 65, 52, 62, 94, 115, 104, 62, 42, 138, 167, 60, 189, 151, 76, 62, 71, 231, 112, 62, 231, 56, 244, 187, 10, 92, 144, 189, 122, 162, 51, 190, 129, 73, 0, 62, 138, 103, 7, 62, 46, 33, 154, 189, 89, 136, 7, 190, 147, 90, 20, 62, 30, 249, 243, 61, 190, 12, 194, 61, 69, 14, 88, 62, 67, 176, 237, 189, 120, 83, 9, 186, 157, 118, 129, 61, 217, 253, 81, 61, 61, 0, 26, 189, 115, 153, 154, 61, 252, 179, 6, 189, 36, 180, 196, 62, 28, 165, 22, 190, 99, 32, 31, 190, 106, 8, 180, 189, 222, 250, 53, 190, 125, 151, 172, 189, 89, 69, 52, 62, 103, 134, 44, 189, 16, 173, 166, 60, 192, 210, 162, 60, 184, 147, 58, 62, 19, 43, 58, 58, 118, 110, 141, 61, 248, 172, 253, 60, 234, 191, 129, 190, 157, 243, 140, 190, 31, 163, 143, 190, 181, 100, 18, 191, 80, 248, 48, 190, 73, 172, 195, 61, 70, 101, 43, 62, 217, 69, 110, 190, 229, 132, 30, 62, 244, 102, 119, 188, 41, 158, 50, 62, 56, 62, 70, 188, 62, 51, 158, 62, 17, 5, 116, 62, 50, 31, 132, 61, 142, 242, 15, 190, 150, 178, 159, 190, 21, 129, 208, 189, 65, 95, 152, 61, 154, 35, 5, 190, 243, 120, 168, 62, 148, 101, 225, 190, 96, 134, 32, 191, 42, 16, 146, 189, 91, 191, 239, 62, 147, 91, 22, 188, 197, 139, 108, 62, 3, 145, 44, 190, 86, 198, 32, 190, 150, 130, 32, 190, 204, 108, 57, 189, 136, 27, 106, 188, 20, 216, 207, 188, 233, 40, 197, 188, 113, 247, 2, 190, 250, 249, 159, 189, 92, 39, 236, 61, 55, 59, 3, 191, 36, 195, 118, 61, 232, 28, 4, 62, 112, 200, 89, 62, 221, 131, 204, 61, 160, 40, 201, 62, 50, 13, 177, 189, 146, 37, 81, 60, 18, 166, 69, 190, 140, 9, 128, 61, 192, 233, 108, 61, 125, 120, 39, 61, 170, 234, 143, 61, 24, 178, 6, 61, 13, 150, 44, 188, 114, 199, 8, 191, 179, 150, 54, 188, 205, 227, 217, 61, 17, 92, 28, 62, 26, 177, 175, 61, 133, 197, 95, 190, 98, 174, 108, 61, 226, 12, 26, 189, 13, 96, 1, 191, 222, 234, 138, 62, 47, 183, 107, 62, 44, 164, 188, 62, 224, 45, 91, 191, 78, 58, 136, 189, 49, 162, 64, 190, 218, 142, 52, 189, 27, 190, 18, 61, 221, 38, 215, 190, 78, 96, 5, 62, 234, 184, 24, 191, 50, 224, 46, 190, 198, 171, 125, 61, 127, 134, 138, 62, 196, 214, 252, 190, 36, 155, 57, 190, 150, 150, 131, 190, 70, 188, 246, 189, 100, 132, 127, 189, 121, 66, 106, 189, 33, 17, 202, 189, 73, 224, 238, 189, 228, 236, 7, 190, 227, 224, 142, 189, 188, 102, 63, 62, 38, 35, 177, 190, 31, 156, 25, 190, 192, 152, 109, 62, 111, 22, 44, 61, 197, 22, 108, 190, 255, 17, 37, 61, 216, 140, 249, 189, 59, 233, 174, 190, 131, 136, 44, 190, 29, 154, 252, 62, 63, 85, 191, 61, 158, 169, 146, 190, 193, 149, 179, 189, 25, 214, 65, 59, 137, 142, 57, 62, 139, 90, 94, 191, 226, 225, 69, 62, 175, 85, 40, 61, 130, 146, 210, 61, 146, 236, 229, 190, 201, 229, 159, 62, 197, 255, 209, 190, 243, 114, 174, 59, 202, 242, 25, 191, 199, 49, 129, 189, 212, 133, 64, 62, 183, 120, 135, 62, 19, 177, 197, 61, 7, 73, 204, 61, 155, 144, 5, 190, 244, 27, 240, 190, 8, 164, 129, 62, 182, 41, 57, 62, 201, 144, 126, 189, 213, 52, 245, 189, 118, 33, 63, 189, 218, 110, 61, 190, 108, 54, 99, 189, 231, 72, 149, 62, 215, 141, 222, 60, 216, 121, 201, 62, 41, 252, 77, 190, 61, 139, 248, 61, 176, 39, 116, 61, 189, 42, 128, 62, 107, 162, 204, 189, 234, 28, 185, 61, 178, 118, 16, 60, 124, 16, 50, 188, 94, 64, 184, 188, 223, 107, 75, 62, 19, 76, 179, 62, 212, 72, 211, 188, 55, 114, 37, 62, 250, 48, 25, 62, 55, 45, 65, 62, 184, 76, 13, 188, 128, 163, 105, 189, 143, 5, 178, 59, 121, 63, 14, 61, 27, 227, 89, 62, 173, 97, 106, 189, 125, 193, 195, 61, 224, 67, 224, 189, 8, 76, 175, 60, 30, 183, 210, 61, 13, 253, 20, 190, 125, 211, 41, 189, 175, 155, 44, 191, 224, 184, 32, 190, 24, 218, 13, 63, 44, 198, 51, 191, 170, 150, 200, 62, 109, 85, 150, 191, 208, 198, 143, 61, 138, 180, 253, 62, 94, 12, 20, 191, 174, 232, 203, 190, 165, 61, 97, 191, 241, 114, 93, 188, 98, 10, 181, 190, 243, 221, 246, 189, 66, 28, 144, 62, 93, 238, 165, 62, 213, 53, 18, 190, 212, 74, 155, 190, 34, 163, 94, 190, 60, 99, 132, 61, 155, 143, 140, 62, 114, 61, 143, 62, 216, 145, 130, 62, 117, 21, 45, 62, 134, 81, 146, 188, 51, 233, 30, 61, 76, 124, 177, 61, 246, 148, 18, 191, 251, 136, 21, 61, 54, 3, 154, 191, 204, 79, 23, 62, 204, 78, 143, 190, 56, 216, 32, 191, 95, 198, 136, 61, 180, 210, 125, 62, 135, 148, 82, 191, 70, 183, 145, 62, 223, 161, 252, 190, 217, 254, 65, 62, 58, 137, 80, 62, 211, 139, 110, 191, 93, 140, 84, 190, 229, 39, 3, 189, 49, 8, 153, 61, 172, 19, 131, 190, 118, 108, 49, 62, 157, 198, 47, 62, 133, 234, 189, 62, 55, 15, 158, 62, 253, 188, 83, 61, 107, 173, 11, 190, 135, 104, 237, 188, 10, 175, 56, 62, 187, 4, 126, 62, 82, 158, 169, 62, 156, 239, 211, 189, 201, 177, 219, 62, 59, 89, 37, 189, 214, 242, 114, 62, 41, 222, 49, 191, 108, 88, 133, 62, 35, 87, 112, 190, 144, 7, 54, 190, 153, 204, 154, 190, 65, 125, 174, 188, 96, 38, 249, 61, 248, 61, 39, 191, 199, 105, 11, 188, 141, 42, 81, 62, 143, 162, 25, 63, 79, 46, 34, 191, 81, 52, 241, 61, 31, 18, 254, 189, 74, 22, 55, 190, 54, 158, 167, 62, 33, 188, 133, 190, 86, 224, 69, 62, 94, 65, 53, 190, 151, 240, 8, 60, 166, 178, 135, 62, 91, 127, 215, 61, 34, 214, 241, 190, 227, 84, 52, 190, 4, 116, 57, 190, 253, 18, 138, 61, 1, 181, 248, 189, 84, 141, 161, 189, 33, 239, 16, 62, 223, 109, 213, 190, 152, 61, 145, 61, 14, 212, 17, 190, 47, 195, 220, 61, 189, 171, 68, 189, 134, 87, 161, 190, 164, 164, 220, 186, 64, 153, 61, 62, 43, 213, 153, 191, 233, 161, 7, 190, 145, 33, 98, 62, 182, 18, 109, 191, 41, 143, 221, 62, 255, 60, 5, 189, 165, 226, 88, 61, 188, 173, 234, 59, 235, 194, 8, 191, 223, 230, 75, 190, 193, 27, 51, 62, 16, 18, 20, 62, 206, 115, 168, 190, 146, 166, 140, 60, 235, 242, 0, 62, 180, 232, 221, 62, 182, 94, 27, 62, 236, 8, 123, 61, 175, 100, 81, 190, 107, 150, 136, 62, 94, 56, 171, 189, 83, 77, 153, 190, 156, 99, 149, 190, 56, 215, 159, 61, 204, 216, 100, 62, 13, 233, 132, 61, 26, 159, 89, 62, 138, 186, 32, 191, 138, 180, 239, 61, 9, 194, 166, 190, 192, 44, 140, 189, 168, 225, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 208, 12, 61, 224, 45, 48, 59, 201, 141, 172, 189, 81, 102, 98, 61, 168, 11, 77, 62, 84, 242, 35, 190, 120, 131, 205, 61, 110, 240, 12, 190, 52, 171, 37, 190, 143, 111, 74, 61, 25, 104, 15, 191, 136, 108, 104, 62, 218, 89, 220, 61, 109, 166, 166, 189, 137, 217, 13, 62, 25, 93, 205, 187, 124, 114, 213, 60, 202, 217, 116, 61, 170, 64, 84, 60, 130, 165, 128, 62, 81, 149, 19, 190, 1, 100, 225, 189, 38, 195, 1, 62, 164, 227, 155, 60, 186, 67, 9, 62, 80, 238, 100, 60, 100, 50, 222, 61, 224, 122, 230, 61, 12, 177, 204, 61, 67, 68, 25, 62, 107, 147, 58, 62, 28, 201, 42, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 242, 230, 190, 199, 217, 156, 190, 77, 2, 54, 63, 248, 23, 163, 62, 244, 33, 13, 62, 6, 194, 229, 60, 42, 5, 166, 61, 24, 87, 56, 61, 176, 215, 203, 62, 151, 10, 171, 189, 143, 68, 71, 63, 224, 68, 153, 190, 75, 235, 59, 62, 188, 221, 176, 190, 146, 145, 241, 190, 23, 90, 247, 190, 119, 244, 225, 190, 223, 33, 241, 190, 204, 135, 235, 62, 238, 73, 97, 190, 87, 57, 243, 62, 179, 55, 78, 191, 195, 38, 153, 59, 104, 119, 7, 63, 235, 44, 84, 189, 118, 156, 185, 190, 147, 233, 209, 190, 107, 89, 227, 61, 115, 45, 129, 63, 70, 15, 44, 63, 115, 242, 141, 190, 43, 246, 6, 63, 168, 70, 26, 188, 255, 39, 96, 62, 153, 135, 12, 63, 128, 210, 47, 62, 245, 168, 254, 190, 144, 62, 240, 60, 47, 6, 108, 190, 227, 25, 95, 60, 109, 165, 197, 60, 220, 217, 56, 190, 107, 53, 83, 62, 192, 137, 228, 62, 216, 21, 180, 189, 251, 88, 194, 62, 33, 3, 60, 62, 226, 216, 151, 62, 106, 99, 133, 190, 55, 65, 151, 190, 95, 72, 242, 189, 192, 138, 111, 190, 22, 251, 72, 62, 202, 247, 121, 62, 116, 234, 79, 190, 55, 13, 32, 190, 78, 142, 165, 190, 1, 206, 234, 61, 48, 44, 11, 189, 240, 114, 100, 190, 200, 164, 113, 62, 231, 69, 61, 189, 170, 181, 31, 62, 37, 89, 54, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 74, 142, 187, 56, 145, 8, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 172, 99, 190, 20, 146, 216, 191, 150, 45, 42, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 154, 151, 63, 108, 130, 254, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}