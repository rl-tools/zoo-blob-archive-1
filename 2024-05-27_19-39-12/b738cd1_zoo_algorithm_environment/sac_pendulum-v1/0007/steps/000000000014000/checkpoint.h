// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 92, 30, 191, 29, 49, 185, 191, 220, 142, 140, 190, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 165, 146, 155, 62, 135, 1, 161, 191, 214, 241, 92, 190, 102, 9, 163, 190, 98, 91, 169, 191, 159, 204, 161, 190, 134, 71, 182, 190, 174, 24, 125, 191, 229, 94, 6, 63, 247, 42, 205, 60, 3, 225, 2, 63, 228, 76, 178, 190, 181, 121, 70, 190, 30, 201, 180, 189, 186, 77, 178, 190, 166, 43, 163, 61, 228, 40, 207, 61, 246, 119, 23, 191, 103, 45, 19, 190, 89, 35, 69, 62, 133, 170, 215, 190, 39, 182, 52, 62, 102, 1, 175, 63, 163, 39, 233, 62, 134, 37, 5, 63, 91, 135, 71, 62, 101, 173, 56, 191, 102, 153, 138, 61, 233, 173, 216, 191, 205, 58, 208, 190, 255, 163, 157, 189, 234, 247, 104, 191, 200, 94, 192, 62, 93, 198, 45, 190, 190, 0, 37, 63, 56, 136, 147, 190, 129, 193, 239, 190, 212, 66, 134, 190, 119, 46, 16, 59, 171, 170, 60, 191, 22, 120, 249, 190, 54, 182, 36, 63, 26, 65, 218, 62, 95, 121, 231, 189, 84, 126, 132, 62, 76, 183, 177, 62, 164, 73, 171, 191, 9, 230, 216, 190, 18, 13, 182, 188, 194, 135, 4, 191, 185, 4, 61, 62, 169, 29, 171, 62, 173, 69, 156, 191, 205, 153, 130, 190, 250, 37, 112, 191, 86, 70, 212, 190, 28, 252, 159, 59, 252, 14, 39, 191, 24, 22, 90, 63, 203, 199, 184, 60, 151, 73, 7, 191, 10, 234, 11, 63, 24, 189, 107, 61, 102, 47, 191, 190, 214, 164, 18, 63, 56, 132, 51, 62, 250, 239, 16, 63, 96, 182, 107, 191, 88, 58, 187, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 42, 248, 37, 63, 132, 173, 223, 190, 80, 115, 137, 190, 167, 247, 108, 63, 98, 206, 129, 63, 3, 79, 7, 63, 211, 11, 197, 190, 157, 36, 106, 63, 131, 122, 78, 190, 60, 121, 237, 189, 233, 196, 43, 191, 208, 230, 57, 191, 176, 241, 155, 189, 42, 23, 158, 191, 112, 131, 175, 60, 222, 101, 1, 62, 134, 45, 165, 62, 222, 47, 12, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 174, 122, 190, 9, 231, 173, 190, 57, 254, 36, 62, 141, 188, 141, 189, 232, 254, 62, 190, 150, 13, 233, 189, 18, 11, 160, 62, 100, 109, 106, 189, 168, 252, 95, 191, 45, 169, 201, 190, 162, 109, 7, 63, 208, 227, 145, 189, 9, 0, 152, 190, 194, 240, 170, 62, 214, 42, 7, 63, 44, 56, 245, 190, 192, 10, 64, 63, 228, 47, 168, 60, 232, 244, 247, 190, 112, 243, 71, 189, 90, 184, 45, 62, 201, 102, 15, 63, 76, 24, 27, 63, 224, 173, 149, 62, 122, 156, 217, 187, 250, 74, 164, 190, 243, 171, 58, 191, 58, 58, 114, 190, 171, 207, 165, 189, 28, 65, 21, 190, 218, 226, 50, 62, 212, 188, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 102, 25, 189, 149, 125, 21, 190, 198, 195, 117, 189, 23, 150, 168, 61, 159, 168, 22, 191, 2, 231, 49, 190, 78, 121, 44, 189, 217, 228, 174, 61, 239, 85, 57, 190, 1, 87, 190, 62, 204, 101, 84, 61, 210, 41, 117, 186, 55, 157, 10, 60, 190, 228, 222, 60, 93, 226, 176, 61, 197, 248, 60, 191, 247, 240, 158, 191, 38, 56, 48, 190, 166, 113, 219, 190, 76, 33, 150, 190, 46, 154, 140, 62, 210, 192, 42, 62, 154, 115, 77, 62, 132, 227, 220, 190, 119, 210, 98, 62, 247, 99, 60, 60, 181, 207, 7, 191, 221, 130, 5, 191, 118, 248, 205, 189, 44, 253, 63, 62, 2, 70, 52, 62, 152, 201, 33, 62, 170, 96, 173, 189, 33, 146, 54, 61, 116, 201, 200, 190, 227, 233, 152, 190, 11, 0, 122, 61, 180, 58, 87, 61, 184, 38, 152, 61, 225, 173, 227, 61, 146, 197, 12, 190, 5, 111, 24, 190, 180, 212, 50, 62, 168, 26, 200, 190, 84, 200, 224, 61, 248, 110, 90, 62, 85, 3, 190, 190, 237, 61, 225, 188, 109, 92, 161, 189, 65, 244, 141, 190, 67, 69, 58, 62, 57, 156, 255, 190, 41, 20, 89, 190, 9, 107, 7, 190, 6, 103, 125, 190, 165, 196, 42, 61, 210, 214, 243, 189, 255, 112, 165, 189, 211, 214, 245, 190, 208, 50, 157, 62, 212, 143, 134, 188, 215, 213, 248, 189, 190, 91, 6, 60, 104, 9, 30, 62, 204, 138, 94, 191, 5, 150, 62, 61, 182, 106, 186, 62, 244, 151, 115, 191, 22, 217, 113, 62, 58, 243, 42, 191, 111, 249, 212, 189, 24, 17, 211, 189, 240, 221, 203, 190, 31, 248, 183, 189, 121, 97, 132, 190, 69, 229, 49, 62, 188, 129, 178, 190, 154, 19, 197, 189, 165, 105, 194, 61, 217, 171, 167, 62, 94, 174, 23, 190, 180, 234, 105, 62, 243, 252, 116, 189, 184, 228, 38, 63, 4, 146, 226, 62, 97, 26, 43, 62, 120, 12, 49, 62, 172, 213, 63, 62, 84, 43, 34, 63, 9, 95, 6, 190, 28, 153, 213, 190, 159, 234, 213, 190, 131, 199, 58, 190, 148, 91, 101, 191, 14, 40, 233, 59, 109, 122, 131, 190, 163, 107, 180, 61, 68, 42, 69, 189, 119, 2, 78, 62, 57, 94, 8, 190, 44, 190, 52, 190, 225, 234, 145, 62, 132, 244, 32, 62, 164, 49, 149, 62, 138, 16, 30, 63, 42, 230, 180, 190, 227, 215, 86, 62, 9, 192, 232, 60, 113, 152, 90, 62, 176, 16, 182, 61, 241, 236, 217, 61, 148, 116, 144, 190, 236, 108, 130, 61, 61, 245, 28, 62, 185, 126, 141, 61, 245, 245, 28, 61, 107, 111, 86, 189, 152, 56, 28, 61, 88, 35, 81, 190, 146, 52, 52, 190, 41, 183, 141, 188, 250, 197, 8, 62, 107, 149, 207, 62, 138, 155, 232, 190, 201, 104, 199, 62, 7, 45, 110, 62, 248, 119, 70, 62, 35, 15, 182, 62, 158, 192, 194, 62, 229, 95, 202, 61, 61, 246, 43, 62, 33, 27, 132, 189, 248, 241, 117, 190, 162, 133, 136, 62, 95, 237, 38, 62, 229, 223, 154, 61, 196, 195, 19, 190, 239, 72, 154, 191, 169, 79, 133, 62, 72, 167, 46, 190, 139, 253, 94, 61, 247, 80, 175, 60, 55, 88, 225, 189, 163, 63, 247, 190, 124, 140, 83, 62, 127, 72, 7, 62, 222, 206, 224, 190, 201, 97, 35, 62, 149, 109, 163, 189, 13, 78, 33, 191, 126, 148, 142, 189, 147, 30, 91, 190, 110, 98, 170, 62, 47, 226, 2, 190, 48, 49, 81, 190, 226, 113, 73, 61, 224, 62, 204, 190, 209, 156, 52, 62, 97, 25, 157, 189, 160, 91, 165, 190, 128, 113, 2, 62, 57, 181, 226, 61, 92, 104, 179, 61, 229, 32, 27, 190, 11, 222, 137, 60, 143, 104, 77, 189, 17, 88, 202, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 29, 85, 202, 61, 105, 18, 218, 61, 37, 118, 145, 60, 213, 10, 0, 61, 164, 191, 24, 62, 216, 5, 22, 190, 223, 220, 213, 189, 124, 32, 215, 188, 59, 100, 144, 61, 136, 242, 57, 61, 76, 202, 47, 61, 5, 244, 1, 190, 92, 194, 153, 189, 15, 4, 9, 62, 118, 58, 10, 62, 99, 239, 13, 59, 171, 35, 141, 188, 110, 38, 21, 62, 140, 136, 34, 60, 51, 100, 28, 190, 214, 55, 201, 189, 39, 64, 0, 191, 234, 23, 238, 189, 41, 68, 141, 61, 171, 35, 54, 191, 45, 82, 186, 62, 15, 161, 129, 190, 123, 219, 1, 61, 74, 69, 156, 188, 152, 148, 30, 191, 44, 88, 125, 189, 148, 239, 132, 61, 182, 130, 128, 190, 223, 99, 127, 190, 187, 87, 30, 188, 154, 137, 154, 187, 213, 137, 186, 61, 87, 38, 198, 62, 8, 48, 255, 61, 207, 48, 151, 61, 226, 37, 168, 185, 223, 24, 35, 61, 237, 175, 176, 188, 81, 250, 166, 61, 179, 72, 23, 190, 13, 128, 183, 61, 196, 21, 167, 189, 97, 71, 61, 190, 79, 175, 77, 189, 20, 251, 8, 190, 220, 64, 152, 190, 59, 50, 105, 60, 78, 245, 20, 190, 219, 114, 125, 60, 198, 183, 9, 190, 177, 200, 108, 190, 4, 34, 1, 190, 207, 74, 148, 189, 47, 114, 106, 189, 234, 230, 4, 190, 29, 195, 188, 61, 39, 71, 29, 62, 95, 122, 1, 62, 241, 144, 58, 61, 248, 114, 83, 61, 233, 26, 59, 188, 19, 84, 249, 189, 246, 155, 11, 190, 159, 250, 26, 61, 138, 121, 54, 61, 65, 174, 73, 187, 104, 225, 33, 61, 203, 206, 90, 190, 79, 80, 212, 61, 173, 68, 254, 59, 78, 185, 237, 189, 186, 60, 57, 190, 207, 74, 150, 189, 219, 178, 40, 190, 19, 138, 40, 62, 171, 10, 167, 61, 40, 190, 220, 189, 200, 25, 198, 189, 145, 208, 26, 190, 115, 67, 53, 62, 170, 57, 213, 190, 134, 17, 129, 61, 12, 69, 122, 190, 250, 21, 236, 189, 65, 179, 255, 190, 212, 103, 118, 62, 35, 8, 24, 62, 8, 24, 11, 189, 112, 119, 42, 62, 184, 146, 98, 190, 201, 209, 120, 62, 117, 72, 110, 189, 252, 125, 85, 190, 221, 99, 170, 61, 208, 242, 75, 190, 249, 59, 92, 190, 116, 144, 133, 189, 252, 21, 17, 190, 134, 209, 74, 61, 134, 105, 155, 189, 53, 5, 174, 190, 247, 141, 45, 190, 210, 16, 248, 189, 71, 164, 148, 61, 4, 172, 229, 190, 222, 15, 210, 61, 168, 49, 137, 62, 55, 140, 121, 191, 171, 59, 210, 61, 244, 183, 130, 62, 158, 98, 52, 191, 91, 152, 11, 190, 123, 211, 64, 62, 153, 218, 71, 61, 41, 218, 163, 188, 186, 73, 34, 62, 55, 108, 1, 190, 195, 231, 55, 62, 212, 52, 115, 189, 121, 185, 73, 58, 16, 0, 93, 190, 126, 75, 23, 190, 145, 219, 8, 62, 37, 226, 209, 190, 151, 111, 92, 190, 180, 89, 179, 61, 29, 188, 8, 62, 157, 38, 15, 61, 178, 209, 56, 62, 231, 255, 62, 190, 118, 3, 79, 190, 230, 228, 48, 189, 75, 153, 233, 61, 254, 97, 133, 61, 134, 133, 45, 62, 101, 137, 44, 62, 200, 95, 128, 62, 117, 124, 66, 190, 96, 71, 36, 191, 69, 181, 24, 62, 76, 27, 143, 61, 197, 206, 243, 58, 109, 189, 145, 61, 254, 187, 22, 190, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 146, 78, 114, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 98, 147, 73, 62, 185, 127, 106, 190, 201, 215, 1, 62, 58, 119, 112, 189, 109, 106, 240, 190, 77, 43, 174, 190, 120, 77, 79, 61, 188, 33, 170, 189, 232, 249, 65, 61, 242, 210, 7, 61, 30, 127, 70, 190, 136, 26, 243, 190, 122, 101, 253, 188, 1, 86, 115, 190, 23, 54, 102, 190, 11, 176, 8, 190, 153, 89, 36, 62, 93, 73, 14, 190, 226, 187, 169, 61, 230, 81, 200, 190, 182, 3, 250, 61, 228, 210, 153, 190, 43, 20, 74, 62, 74, 88, 84, 63, 86, 21, 152, 188, 155, 218, 7, 191, 91, 113, 147, 62, 112, 34, 173, 190, 96, 128, 227, 62, 232, 161, 4, 62, 190, 251, 231, 190, 1, 60, 232, 188, 106, 56, 180, 60, 165, 100, 148, 62, 121, 64, 216, 190, 197, 84, 129, 189, 6, 79, 194, 188, 223, 13, 68, 62, 91, 246, 45, 191, 139, 181, 130, 190, 127, 61, 238, 190, 76, 45, 94, 62, 208, 234, 236, 190, 160, 220, 140, 62, 111, 83, 220, 61, 248, 245, 10, 189, 88, 0, 157, 190, 212, 113, 138, 189, 159, 102, 189, 61, 251, 149, 248, 190, 177, 43, 118, 62, 51, 207, 132, 190, 25, 229, 215, 61, 25, 174, 218, 61, 113, 107, 204, 61, 193, 56, 231, 190, 244, 56, 179, 61, 101, 105, 133, 62, 106, 74, 50, 191, 81, 61, 168, 62, 80, 199, 30, 191, 225, 165, 94, 189, 0, 229, 148, 62, 73, 39, 191, 190, 54, 103, 168, 61, 112, 212, 138, 190, 254, 38, 254, 188, 108, 227, 147, 61, 195, 63, 182, 61, 32, 65, 128, 189, 135, 135, 163, 61, 181, 197, 169, 62, 85, 136, 96, 62, 223, 131, 45, 62, 11, 239, 22, 187, 6, 231, 24, 62, 42, 111, 71, 62, 209, 216, 185, 61, 2, 53, 89, 62, 145, 195, 0, 62, 173, 78, 149, 61, 63, 66, 243, 189, 240, 141, 117, 190, 189, 17, 95, 62, 127, 249, 11, 191, 48, 248, 198, 61, 19, 22, 17, 190, 145, 194, 204, 189, 7, 54, 14, 62, 107, 240, 161, 62, 174, 115, 240, 61, 207, 45, 26, 61, 182, 121, 213, 190, 38, 48, 246, 61, 93, 228, 62, 62, 11, 227, 188, 189, 249, 214, 214, 189, 228, 21, 100, 188, 4, 147, 228, 62, 194, 84, 249, 61, 32, 150, 56, 189, 199, 127, 172, 189, 140, 255, 220, 188, 131, 49, 195, 59, 60, 102, 170, 62, 38, 31, 77, 62, 23, 226, 136, 62, 127, 9, 137, 61, 167, 89, 56, 190, 121, 187, 98, 190, 173, 174, 133, 190, 221, 225, 224, 62, 77, 237, 180, 188, 126, 44, 166, 62, 66, 10, 239, 190, 76, 218, 136, 190, 37, 115, 130, 61, 21, 87, 130, 188, 94, 112, 223, 190, 186, 88, 94, 63, 82, 19, 104, 189, 239, 56, 223, 190, 235, 167, 128, 62, 79, 162, 60, 190, 139, 36, 231, 62, 182, 96, 47, 62, 121, 185, 167, 190, 149, 227, 182, 190, 90, 135, 232, 190, 0, 102, 50, 62, 25, 252, 44, 191, 48, 137, 81, 61, 19, 21, 219, 60, 161, 4, 178, 189, 201, 11, 222, 190, 179, 129, 242, 61, 43, 35, 102, 190, 36, 29, 50, 62, 161, 109, 192, 190, 179, 141, 16, 61, 57, 181, 207, 186, 168, 113, 135, 190, 108, 79, 23, 190, 254, 147, 10, 60, 82, 72, 24, 61, 246, 32, 35, 191, 121, 239, 194, 62, 55, 133, 31, 190, 179, 38, 108, 62, 92, 124, 171, 62, 62, 74, 69, 62, 191, 135, 121, 190, 104, 214, 175, 189, 47, 245, 6, 60, 45, 58, 105, 61, 166, 253, 48, 62, 230, 25, 154, 190, 164, 102, 250, 189, 158, 76, 137, 190, 210, 97, 107, 190, 26, 186, 23, 189, 94, 57, 65, 60, 46, 102, 30, 62, 159, 85, 252, 61, 55, 198, 206, 189, 106, 75, 78, 62, 99, 207, 65, 60, 183, 46, 82, 60, 0, 238, 181, 188, 245, 93, 176, 189, 6, 228, 110, 62, 142, 124, 138, 60, 82, 32, 99, 62, 215, 173, 113, 61, 188, 96, 253, 61, 91, 104, 14, 63, 227, 74, 174, 60, 50, 43, 134, 61, 217, 7, 172, 191, 216, 86, 147, 189, 155, 207, 2, 190, 27, 51, 181, 62, 132, 147, 112, 190, 171, 64, 60, 63, 41, 114, 115, 187, 223, 219, 239, 189, 216, 185, 25, 62, 27, 167, 169, 58, 106, 67, 215, 62, 64, 40, 249, 61, 141, 153, 170, 190, 48, 202, 134, 189, 29, 241, 67, 190, 141, 53, 114, 62, 116, 154, 230, 190, 146, 127, 228, 61, 37, 13, 6, 61, 171, 158, 116, 62, 240, 172, 210, 190, 54, 200, 73, 62, 156, 58, 128, 190, 108, 223, 167, 187, 228, 28, 240, 190, 123, 21, 247, 189, 54, 196, 165, 61, 22, 156, 255, 61, 7, 242, 163, 61, 137, 119, 122, 61, 200, 241, 174, 188, 193, 57, 105, 191, 230, 1, 59, 62, 1, 127, 147, 189, 77, 31, 170, 59, 37, 248, 197, 62, 23, 176, 134, 62, 167, 95, 225, 61, 251, 183, 179, 189, 133, 58, 188, 61, 153, 236, 118, 62, 64, 63, 131, 191, 192, 156, 239, 61, 53, 40, 234, 61, 215, 252, 33, 190, 190, 208, 71, 189, 189, 128, 223, 190, 103, 146, 135, 62, 163, 216, 133, 190, 28, 174, 56, 191, 215, 89, 235, 61, 112, 44, 59, 62, 32, 113, 150, 191, 171, 104, 9, 60, 37, 13, 100, 190, 212, 176, 86, 190, 110, 49, 94, 190, 13, 133, 7, 190, 153, 222, 163, 189, 157, 250, 25, 62, 252, 18, 82, 190, 234, 177, 170, 62, 96, 170, 226, 61, 93, 133, 25, 191, 1, 173, 70, 62, 28, 230, 187, 60, 165, 235, 29, 62, 161, 45, 51, 59, 40, 55, 166, 190, 132, 224, 17, 190, 211, 249, 159, 189, 101, 36, 153, 62, 86, 225, 189, 190, 216, 145, 169, 62, 16, 172, 132, 189, 134, 117, 96, 62, 220, 42, 233, 61, 42, 243, 91, 191, 213, 38, 59, 190, 26, 237, 145, 60, 8, 107, 118, 62, 16, 227, 168, 190, 37, 57, 59, 62, 162, 71, 142, 62, 8, 103, 33, 62, 125, 154, 155, 62, 249, 61, 56, 62, 32, 24, 18, 190, 207, 200, 61, 62, 16, 22, 166, 62, 131, 11, 203, 189, 50, 40, 61, 62, 24, 237, 56, 190, 187, 250, 22, 62, 126, 35, 235, 189, 145, 111, 60, 62, 219, 165, 24, 191, 234, 191, 213, 60, 204, 207, 59, 190, 206, 102, 55, 62, 132, 52, 196, 190, 122, 99, 220, 62, 206, 112, 47, 62, 174, 17, 77, 190, 161, 8, 188, 62, 157, 139, 110, 190, 33, 83, 202, 62, 23, 0, 215, 189, 33, 168, 77, 189, 123, 20, 19, 189, 115, 151, 182, 60, 255, 254, 131, 61, 157, 255, 14, 191, 78, 219, 117, 189, 207, 249, 146, 61, 247, 73, 22, 62, 200, 71, 88, 190, 161, 232, 155, 62, 32, 209, 239, 189, 127, 112, 139, 189, 233, 252, 137, 190, 31, 75, 102, 62, 129, 108, 131, 62, 63, 155, 148, 62, 0, 239, 204, 188, 241, 239, 194, 61, 37, 13, 157, 189, 239, 216, 81, 191, 167, 20, 7, 188, 113, 156, 249, 61, 182, 157, 160, 189, 149, 23, 121, 189, 237, 243, 178, 189, 200, 215, 52, 191, 164, 91, 65, 188, 132, 35, 8, 62, 2, 211, 169, 190, 62, 228, 154, 189, 250, 200, 79, 190, 245, 11, 89, 62, 47, 154, 24, 189, 28, 45, 143, 61, 153, 29, 251, 57, 112, 134, 157, 189, 42, 223, 87, 190, 186, 150, 74, 190, 99, 113, 22, 63, 14, 237, 254, 189, 2, 142, 131, 62, 64, 62, 44, 190, 158, 80, 161, 189, 74, 98, 193, 61, 182, 11, 110, 190, 144, 243, 147, 61, 115, 109, 220, 61, 90, 45, 66, 62, 123, 219, 60, 62, 53, 75, 90, 191, 208, 51, 148, 61, 187, 110, 201, 189, 30, 20, 128, 61, 232, 102, 174, 62, 96, 115, 48, 191, 203, 152, 139, 190, 243, 207, 220, 187, 102, 120, 117, 63, 50, 114, 158, 61, 234, 253, 251, 190, 30, 181, 43, 62, 171, 254, 188, 61, 93, 155, 231, 62, 5, 48, 43, 62, 231, 148, 85, 190, 196, 230, 76, 190, 12, 122, 164, 190, 82, 134, 0, 62, 124, 164, 11, 191, 21, 190, 237, 62, 177, 99, 128, 62, 109, 2, 127, 61, 45, 80, 27, 191, 68, 59, 135, 190, 224, 148, 147, 190, 109, 253, 218, 62, 69, 120, 22, 191, 99, 215, 65, 190, 203, 192, 208, 189, 35, 108, 32, 189, 222, 120, 192, 189, 11, 153, 149, 62, 77, 83, 222, 61, 116, 89, 105, 191, 248, 213, 1, 63, 181, 14, 162, 190, 89, 155, 150, 62, 160, 16, 161, 62, 9, 12, 132, 62, 95, 55, 169, 61, 118, 65, 52, 62, 122, 159, 116, 62, 188, 158, 39, 61, 70, 75, 79, 62, 88, 113, 87, 62, 12, 148, 249, 58, 181, 31, 151, 189, 66, 218, 70, 190, 158, 105, 197, 61, 54, 157, 10, 62, 148, 232, 157, 189, 102, 223, 6, 190, 8, 158, 12, 62, 6, 60, 0, 62, 194, 223, 201, 61, 69, 153, 80, 62, 0, 231, 226, 189, 115, 109, 13, 187, 213, 186, 110, 61, 179, 36, 169, 61, 130, 203, 158, 189, 83, 109, 80, 61, 158, 240, 69, 189, 43, 31, 196, 62, 28, 165, 22, 190, 186, 190, 29, 190, 103, 86, 182, 189, 27, 128, 80, 190, 29, 131, 158, 189, 211, 242, 43, 62, 24, 219, 29, 189, 182, 240, 132, 60, 192, 210, 162, 60, 88, 11, 77, 62, 236, 64, 66, 189, 103, 88, 122, 61, 91, 240, 41, 61, 65, 229, 101, 190, 107, 75, 135, 190, 191, 105, 146, 190, 169, 152, 32, 191, 189, 21, 24, 190, 126, 84, 210, 61, 67, 17, 36, 62, 232, 0, 102, 190, 163, 216, 60, 62, 104, 38, 182, 188, 213, 158, 52, 62, 162, 39, 99, 60, 9, 61, 155, 62, 12, 72, 133, 62, 76, 194, 34, 62, 170, 36, 166, 189, 93, 86, 140, 190, 206, 81, 240, 189, 185, 191, 149, 61, 154, 35, 5, 190, 67, 177, 155, 62, 116, 1, 241, 190, 189, 29, 34, 191, 44, 246, 168, 189, 193, 23, 249, 62, 196, 197, 224, 188, 163, 107, 57, 62, 3, 145, 44, 190, 66, 160, 57, 190, 103, 242, 102, 190, 134, 99, 0, 189, 152, 227, 6, 189, 253, 78, 28, 189, 200, 5, 34, 189, 89, 32, 34, 190, 163, 142, 199, 189, 156, 92, 235, 61, 121, 109, 38, 191, 191, 224, 142, 61, 199, 159, 250, 61, 118, 239, 58, 62, 213, 229, 229, 61, 219, 104, 202, 62, 181, 27, 4, 190, 75, 169, 144, 60, 49, 218, 135, 190, 248, 98, 100, 60, 16, 206, 229, 60, 225, 38, 147, 60, 79, 157, 135, 61, 229, 49, 208, 60, 13, 150, 44, 188, 42, 58, 253, 190, 150, 23, 243, 187, 81, 219, 178, 61, 56, 240, 0, 62, 62, 205, 132, 61, 64, 102, 86, 190, 159, 64, 219, 61, 226, 12, 26, 189, 229, 20, 0, 191, 117, 130, 158, 62, 96, 92, 109, 62, 229, 189, 184, 62, 137, 132, 88, 191, 193, 98, 98, 189, 49, 162, 64, 190, 87, 105, 170, 189, 253, 122, 118, 61, 193, 189, 245, 190, 42, 45, 1, 62, 98, 105, 31, 191, 33, 137, 40, 190, 49, 227, 120, 61, 11, 114, 139, 62, 179, 156, 18, 191, 151, 100, 67, 190, 178, 143, 145, 190, 130, 222, 248, 189, 219, 237, 175, 189, 163, 162, 145, 189, 6, 194, 223, 189, 129, 232, 187, 189, 228, 236, 7, 190, 227, 224, 142, 189, 148, 62, 52, 62, 232, 62, 169, 190, 31, 156, 25, 190, 97, 0, 121, 62, 104, 182, 1, 61, 204, 66, 154, 190, 255, 17, 37, 61, 115, 233, 210, 189, 119, 236, 226, 190, 63, 166, 34, 190, 246, 123, 0, 63, 68, 18, 169, 61, 114, 58, 149, 190, 211, 169, 3, 190, 198, 70, 186, 188, 238, 57, 57, 62, 148, 185, 145, 191, 149, 87, 69, 62, 78, 186, 79, 61, 237, 232, 14, 62, 215, 192, 232, 190, 51, 10, 169, 62, 175, 179, 222, 190, 35, 76, 164, 188, 235, 7, 28, 191, 107, 90, 96, 190, 23, 235, 118, 62, 160, 156, 147, 62, 103, 72, 223, 61, 74, 163, 252, 61, 155, 144, 5, 190, 102, 140, 7, 191, 228, 122, 129, 62, 2, 88, 76, 62, 120, 27, 195, 189, 219, 205, 124, 189, 70, 29, 73, 189, 130, 111, 26, 190, 108, 54, 99, 189, 73, 8, 147, 62, 253, 57, 1, 61, 185, 17, 198, 62, 247, 139, 83, 190, 186, 114, 13, 62, 216, 51, 132, 61, 22, 58, 130, 62, 122, 93, 18, 190, 172, 211, 208, 61, 207, 172, 138, 60, 97, 31, 72, 188, 188, 88, 25, 188, 174, 254, 75, 62, 248, 197, 173, 62, 213, 111, 11, 189, 251, 65, 38, 62, 93, 8, 25, 62, 102, 165, 55, 62, 192, 206, 102, 61, 227, 114, 218, 189, 180, 86, 142, 188, 14, 123, 70, 60, 240, 5, 76, 62, 173, 97, 106, 189, 48, 12, 214, 61, 178, 103, 226, 189, 173, 162, 125, 60, 145, 182, 242, 61, 61, 111, 41, 190, 10, 61, 97, 189, 229, 39, 44, 191, 224, 184, 32, 190, 66, 163, 24, 63, 136, 208, 51, 191, 162, 63, 200, 62, 80, 205, 135, 191, 125, 164, 56, 62, 119, 61, 15, 63, 94, 12, 20, 191, 59, 143, 231, 190, 145, 88, 66, 191, 100, 3, 172, 188, 203, 164, 178, 190, 189, 147, 186, 189, 94, 23, 152, 62, 146, 122, 162, 62, 14, 192, 17, 190, 141, 149, 165, 190, 105, 180, 95, 190, 212, 112, 182, 61, 136, 1, 141, 62, 42, 156, 147, 62, 153, 0, 129, 62, 95, 169, 27, 62, 33, 240, 5, 60, 51, 233, 30, 61, 76, 124, 177, 61, 199, 35, 24, 191, 83, 68, 32, 61, 39, 170, 157, 191, 240, 102, 37, 62, 157, 26, 148, 190, 40, 210, 73, 191, 95, 198, 136, 61, 136, 58, 122, 62, 221, 124, 129, 191, 156, 23, 137, 62, 76, 37, 12, 191, 98, 254, 41, 62, 37, 17, 45, 62, 87, 232, 98, 191, 132, 22, 145, 190, 214, 167, 52, 189, 238, 72, 234, 61, 25, 21, 137, 190, 226, 57, 7, 62, 222, 68, 31, 62, 88, 111, 179, 62, 254, 10, 153, 62, 246, 8, 17, 61, 6, 246, 33, 190, 237, 65, 41, 189, 109, 159, 74, 62, 181, 46, 55, 62, 125, 163, 147, 62, 11, 15, 19, 190, 254, 96, 218, 62, 59, 89, 37, 189, 161, 21, 94, 62, 249, 83, 54, 191, 74, 3, 73, 62, 222, 139, 128, 190, 206, 72, 76, 190, 97, 37, 166, 190, 100, 56, 235, 59, 96, 38, 249, 61, 189, 223, 49, 191, 217, 219, 50, 189, 241, 81, 91, 62, 31, 10, 44, 63, 32, 176, 26, 191, 91, 29, 51, 62, 252, 110, 10, 190, 236, 250, 35, 190, 25, 229, 169, 62, 231, 221, 200, 190, 31, 134, 72, 62, 87, 203, 213, 189, 74, 252, 246, 60, 166, 16, 139, 62, 174, 154, 217, 61, 162, 92, 21, 191, 247, 11, 62, 190, 77, 114, 159, 190, 138, 247, 134, 61, 34, 92, 244, 188, 63, 179, 138, 186, 131, 159, 55, 62, 234, 45, 221, 190, 152, 61, 145, 61, 190, 4, 72, 190, 182, 73, 208, 61, 185, 114, 96, 60, 245, 102, 167, 190, 78, 251, 126, 60, 39, 150, 72, 62, 18, 229, 199, 191, 233, 161, 7, 190, 194, 220, 102, 62, 73, 153, 163, 191, 106, 28, 217, 62, 100, 16, 0, 189, 100, 113, 83, 61, 255, 5, 205, 60, 110, 4, 226, 190, 250, 133, 133, 190, 196, 130, 59, 62, 215, 64, 138, 62, 197, 201, 169, 190, 106, 194, 192, 60, 82, 113, 1, 62, 12, 203, 214, 62, 223, 83, 28, 62, 78, 207, 144, 61, 72, 232, 88, 190, 213, 40, 139, 62, 114, 172, 83, 189, 85, 239, 176, 190, 58, 7, 147, 190, 94, 67, 130, 61, 126, 249, 100, 62, 13, 233, 132, 61, 97, 27, 141, 62, 241, 63, 35, 191, 75, 90, 5, 62, 155, 1, 146, 190, 199, 97, 132, 189, 110, 102, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 59, 143, 60, 14, 18, 4, 60, 46, 12, 156, 189, 108, 218, 118, 61, 170, 105, 82, 62, 163, 242, 35, 190, 46, 148, 209, 61, 206, 4, 28, 190, 246, 225, 38, 190, 24, 8, 94, 61, 128, 33, 18, 191, 158, 75, 110, 62, 176, 167, 217, 61, 71, 131, 171, 189, 215, 188, 13, 62, 77, 124, 30, 60, 235, 35, 3, 61, 134, 206, 136, 61, 247, 94, 88, 60, 19, 195, 127, 62, 199, 61, 23, 190, 35, 223, 139, 189, 204, 29, 5, 62, 145, 7, 61, 61, 51, 166, 9, 62, 4, 29, 118, 60, 75, 101, 4, 62, 106, 31, 237, 61, 222, 65, 245, 61, 205, 70, 16, 62, 27, 153, 72, 62, 191, 214, 50, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 165, 229, 190, 72, 111, 184, 190, 6, 176, 94, 63, 94, 112, 163, 62, 145, 103, 9, 62, 239, 193, 229, 60, 97, 62, 140, 61, 147, 84, 20, 61, 22, 123, 216, 62, 132, 63, 198, 189, 108, 126, 70, 63, 160, 191, 206, 190, 33, 10, 34, 62, 223, 205, 188, 190, 201, 4, 1, 191, 29, 190, 26, 191, 1, 2, 230, 190, 38, 89, 233, 190, 92, 197, 227, 62, 90, 85, 127, 190, 243, 189, 204, 62, 230, 40, 88, 191, 192, 167, 66, 188, 0, 198, 12, 63, 18, 198, 137, 189, 164, 156, 185, 190, 92, 60, 242, 190, 146, 0, 199, 61, 169, 153, 134, 63, 91, 13, 45, 63, 158, 211, 156, 190, 147, 80, 14, 63, 249, 137, 187, 186, 51, 151, 130, 62, 236, 162, 30, 63, 21, 123, 51, 62, 212, 95, 9, 191, 135, 62, 240, 60, 143, 10, 141, 190, 10, 221, 124, 61, 30, 202, 51, 61, 195, 143, 46, 190, 233, 143, 79, 62, 76, 123, 5, 63, 193, 194, 212, 189, 12, 82, 192, 62, 87, 56, 16, 62, 239, 240, 159, 62, 55, 19, 146, 190, 19, 9, 171, 190, 27, 26, 221, 189, 34, 31, 96, 190, 146, 19, 67, 62, 2, 241, 104, 62, 210, 196, 84, 190, 171, 254, 18, 190, 157, 164, 172, 190, 205, 35, 170, 61, 35, 101, 97, 189, 166, 130, 109, 190, 172, 52, 97, 62, 251, 15, 190, 189, 174, 78, 44, 62, 217, 227, 173, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 54, 89, 188, 32, 133, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 114, 140, 191, 124, 177, 241, 62, 81, 154, 184, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 46, 82, 64, 164, 138, 38, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}