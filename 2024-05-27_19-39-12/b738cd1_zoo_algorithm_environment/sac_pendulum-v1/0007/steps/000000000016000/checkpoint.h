// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 158, 27, 191, 2, 74, 202, 191, 27, 184, 140, 190, 178, 40, 111, 62, 250, 129, 192, 189, 203, 120, 10, 188, 4, 100, 150, 62, 85, 30, 162, 191, 136, 9, 102, 190, 110, 113, 159, 190, 222, 116, 182, 191, 77, 50, 185, 190, 10, 183, 189, 190, 239, 197, 123, 191, 130, 227, 3, 63, 188, 27, 24, 59, 6, 148, 231, 62, 27, 142, 182, 190, 255, 186, 141, 190, 41, 134, 149, 189, 12, 78, 157, 190, 234, 173, 102, 60, 185, 130, 175, 61, 112, 86, 21, 191, 154, 32, 4, 190, 46, 165, 67, 62, 235, 219, 217, 190, 189, 63, 137, 62, 42, 44, 176, 63, 176, 188, 237, 62, 233, 47, 251, 62, 205, 65, 134, 62, 236, 191, 55, 191, 92, 226, 154, 61, 56, 63, 227, 191, 248, 236, 218, 190, 105, 162, 171, 188, 243, 206, 107, 191, 223, 142, 190, 62, 242, 182, 82, 190, 55, 155, 52, 63, 189, 254, 131, 190, 218, 2, 2, 191, 201, 74, 140, 190, 53, 199, 70, 59, 29, 130, 53, 191, 190, 84, 249, 190, 170, 210, 34, 63, 108, 224, 179, 62, 149, 237, 236, 189, 90, 133, 109, 62, 48, 97, 172, 62, 73, 9, 175, 191, 62, 83, 222, 190, 150, 142, 187, 189, 105, 27, 2, 191, 236, 169, 72, 62, 222, 59, 172, 62, 11, 184, 159, 191, 235, 203, 131, 190, 239, 205, 113, 191, 31, 95, 237, 190, 166, 227, 34, 60, 214, 126, 59, 191, 100, 58, 91, 63, 104, 119, 250, 60, 5, 38, 14, 191, 151, 135, 15, 63, 123, 194, 144, 61, 137, 251, 240, 190, 201, 242, 26, 63, 134, 162, 76, 62, 190, 115, 16, 63, 74, 37, 112, 191, 84, 57, 163, 189, 82, 102, 81, 62, 155, 218, 38, 190, 155, 161, 11, 188, 148, 17, 41, 63, 243, 110, 226, 190, 56, 15, 137, 190, 139, 237, 105, 63, 230, 60, 137, 63, 225, 150, 4, 63, 113, 63, 201, 190, 85, 195, 116, 63, 2, 166, 71, 190, 155, 247, 153, 189, 219, 194, 84, 191, 39, 12, 52, 191, 194, 191, 164, 189, 101, 33, 153, 191, 31, 53, 35, 189, 66, 19, 217, 61, 6, 115, 166, 62, 221, 116, 11, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 30, 90, 190, 9, 231, 173, 190, 21, 105, 38, 62, 45, 191, 149, 189, 42, 128, 94, 190, 84, 191, 231, 189, 88, 118, 129, 62, 0, 184, 4, 190, 102, 18, 100, 191, 59, 84, 175, 190, 75, 174, 255, 62, 253, 101, 138, 189, 76, 62, 150, 190, 82, 120, 159, 62, 234, 223, 254, 62, 193, 16, 241, 190, 176, 97, 42, 63, 124, 188, 192, 186, 246, 92, 0, 191, 169, 11, 23, 189, 173, 84, 63, 62, 104, 227, 13, 63, 120, 50, 20, 63, 97, 128, 105, 62, 107, 90, 43, 189, 250, 74, 164, 190, 124, 130, 67, 191, 196, 186, 123, 190, 96, 135, 145, 189, 54, 201, 130, 189, 92, 115, 49, 62, 141, 217, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 122, 133, 60, 149, 125, 21, 190, 60, 242, 28, 189, 251, 56, 215, 61, 178, 118, 42, 191, 123, 184, 62, 190, 61, 3, 40, 189, 229, 247, 168, 61, 116, 199, 76, 190, 36, 102, 179, 62, 229, 126, 64, 61, 95, 95, 145, 60, 113, 12, 4, 190, 161, 46, 169, 60, 96, 214, 254, 61, 13, 16, 66, 191, 60, 249, 165, 191, 145, 240, 39, 190, 166, 113, 219, 190, 199, 96, 144, 190, 164, 113, 175, 62, 58, 28, 42, 62, 237, 218, 85, 62, 17, 28, 253, 190, 33, 154, 46, 62, 247, 99, 60, 60, 96, 125, 26, 191, 158, 142, 5, 191, 201, 127, 226, 189, 168, 245, 61, 62, 194, 66, 80, 62, 152, 201, 33, 62, 189, 140, 228, 188, 33, 146, 54, 61, 131, 236, 249, 190, 238, 180, 166, 190, 39, 172, 81, 61, 131, 27, 142, 61, 45, 198, 183, 61, 119, 64, 255, 61, 77, 164, 23, 190, 173, 128, 49, 190, 126, 29, 73, 62, 6, 40, 246, 190, 118, 235, 190, 61, 204, 203, 117, 62, 208, 39, 195, 190, 150, 178, 228, 188, 234, 131, 227, 189, 169, 74, 162, 190, 231, 247, 45, 62, 47, 32, 39, 191, 197, 199, 64, 190, 35, 236, 1, 190, 206, 143, 104, 190, 228, 215, 15, 61, 172, 157, 60, 190, 255, 112, 165, 189, 171, 127, 21, 191, 74, 250, 136, 62, 121, 230, 167, 59, 153, 211, 1, 190, 125, 83, 234, 188, 110, 165, 6, 62, 152, 128, 168, 191, 5, 150, 62, 61, 84, 151, 184, 62, 171, 196, 177, 191, 215, 239, 116, 62, 217, 45, 24, 191, 196, 205, 171, 189, 131, 21, 63, 190, 240, 221, 203, 190, 190, 178, 2, 189, 29, 112, 139, 190, 125, 255, 70, 62, 250, 11, 178, 190, 100, 227, 91, 190, 160, 222, 151, 61, 160, 46, 178, 62, 39, 9, 31, 190, 183, 147, 103, 62, 14, 128, 110, 189, 50, 24, 38, 63, 164, 212, 235, 62, 77, 161, 105, 62, 76, 38, 54, 62, 50, 116, 101, 62, 14, 117, 32, 63, 9, 95, 6, 190, 212, 170, 22, 191, 196, 18, 214, 190, 221, 204, 185, 190, 108, 78, 150, 191, 60, 118, 109, 187, 250, 162, 102, 190, 90, 245, 146, 61, 68, 42, 69, 189, 199, 7, 41, 62, 61, 91, 57, 190, 141, 168, 90, 190, 109, 166, 149, 62, 23, 232, 51, 62, 72, 151, 155, 62, 130, 244, 31, 63, 252, 161, 194, 190, 231, 242, 73, 62, 131, 191, 129, 60, 147, 54, 6, 62, 240, 207, 165, 61, 165, 37, 184, 61, 214, 29, 134, 190, 133, 6, 54, 61, 103, 148, 234, 61, 204, 118, 57, 61, 170, 228, 183, 187, 29, 225, 134, 61, 39, 231, 165, 60, 22, 52, 75, 190, 209, 186, 13, 190, 65, 33, 81, 189, 250, 197, 8, 62, 88, 11, 215, 62, 35, 130, 230, 190, 199, 43, 202, 62, 52, 55, 122, 62, 203, 98, 50, 62, 232, 73, 208, 62, 125, 30, 184, 62, 229, 95, 202, 61, 103, 145, 65, 62, 49, 69, 159, 189, 25, 185, 124, 190, 98, 53, 127, 62, 94, 214, 40, 62, 118, 7, 142, 61, 223, 69, 57, 190, 117, 208, 159, 191, 35, 194, 139, 62, 12, 37, 42, 190, 103, 193, 38, 61, 245, 106, 96, 60, 250, 247, 225, 189, 104, 141, 7, 191, 108, 159, 106, 62, 52, 159, 20, 62, 156, 124, 5, 191, 56, 42, 48, 62, 56, 97, 150, 189, 232, 27, 36, 191, 62, 39, 135, 189, 130, 3, 140, 190, 230, 226, 183, 62, 47, 226, 2, 190, 76, 241, 85, 190, 222, 240, 168, 61, 37, 213, 204, 190, 234, 75, 53, 62, 52, 36, 47, 189, 75, 1, 136, 190, 153, 75, 250, 61, 57, 181, 226, 61, 194, 189, 169, 61, 232, 183, 31, 190, 244, 171, 26, 60, 143, 104, 77, 189, 143, 165, 198, 60, 196, 128, 44, 190, 141, 75, 80, 189, 141, 154, 28, 190, 209, 101, 140, 188, 146, 91, 192, 61, 0, 205, 207, 61, 37, 118, 145, 60, 78, 241, 217, 60, 131, 146, 19, 62, 15, 249, 26, 190, 123, 155, 220, 189, 248, 189, 223, 188, 193, 175, 137, 61, 160, 91, 39, 61, 61, 106, 47, 61, 22, 192, 3, 190, 189, 156, 154, 189, 42, 72, 6, 62, 118, 58, 10, 62, 99, 239, 13, 59, 178, 24, 142, 188, 110, 38, 21, 62, 55, 105, 35, 60, 104, 14, 35, 190, 249, 66, 202, 189, 111, 72, 54, 191, 234, 23, 238, 189, 18, 42, 206, 61, 142, 245, 56, 191, 234, 177, 189, 62, 34, 25, 199, 190, 200, 113, 23, 187, 48, 193, 18, 190, 152, 148, 30, 191, 56, 191, 5, 188, 60, 17, 87, 61, 240, 228, 77, 190, 249, 253, 117, 190, 201, 52, 221, 189, 127, 69, 212, 188, 198, 220, 197, 61, 126, 162, 206, 62, 92, 186, 27, 62, 70, 138, 70, 61, 236, 23, 244, 60, 95, 212, 226, 187, 90, 249, 155, 188, 7, 44, 167, 61, 112, 139, 252, 189, 196, 239, 239, 61, 196, 21, 167, 189, 92, 60, 81, 190, 32, 192, 130, 188, 236, 11, 110, 190, 92, 195, 184, 190, 248, 66, 122, 60, 49, 211, 224, 189, 184, 217, 124, 60, 198, 183, 9, 190, 58, 93, 150, 190, 227, 11, 2, 190, 217, 116, 168, 189, 25, 81, 224, 189, 188, 187, 79, 190, 92, 75, 210, 60, 31, 32, 11, 62, 121, 186, 37, 62, 10, 198, 180, 60, 228, 18, 70, 61, 156, 179, 1, 188, 153, 20, 91, 61, 35, 61, 24, 190, 3, 208, 170, 60, 128, 44, 159, 61, 47, 99, 237, 188, 180, 117, 129, 61, 114, 242, 93, 190, 139, 116, 246, 61, 120, 179, 73, 61, 18, 41, 178, 189, 20, 215, 37, 190, 54, 152, 164, 187, 219, 178, 40, 190, 152, 127, 34, 62, 139, 240, 251, 61, 88, 216, 131, 189, 84, 235, 243, 189, 163, 61, 66, 190, 172, 94, 66, 62, 159, 143, 244, 190, 134, 17, 129, 61, 79, 172, 91, 190, 250, 190, 10, 190, 65, 179, 255, 190, 119, 143, 128, 62, 197, 167, 25, 62, 172, 72, 227, 188, 34, 206, 45, 62, 240, 68, 144, 190, 218, 97, 130, 62, 114, 203, 89, 189, 252, 125, 85, 190, 218, 70, 175, 61, 100, 79, 125, 190, 249, 59, 92, 190, 83, 193, 9, 190, 196, 205, 255, 189, 134, 209, 74, 61, 86, 145, 51, 189, 228, 123, 206, 190, 251, 15, 68, 190, 255, 233, 25, 190, 172, 69, 169, 61, 43, 36, 166, 190, 222, 15, 210, 61, 172, 203, 192, 62, 132, 187, 139, 191, 53, 6, 190, 61, 43, 244, 135, 62, 164, 143, 41, 191, 91, 152, 11, 190, 131, 223, 103, 62, 153, 218, 71, 61, 41, 185, 49, 189, 54, 38, 63, 62, 244, 176, 230, 189, 224, 119, 53, 62, 210, 177, 99, 189, 170, 225, 114, 60, 250, 231, 101, 190, 192, 58, 9, 190, 38, 121, 1, 62, 227, 144, 250, 190, 31, 120, 94, 190, 46, 81, 177, 61, 37, 73, 17, 62, 205, 135, 150, 61, 117, 159, 36, 62, 122, 141, 82, 190, 224, 163, 125, 190, 248, 130, 147, 189, 70, 204, 176, 61, 83, 142, 159, 61, 114, 3, 46, 62, 223, 89, 55, 62, 126, 221, 106, 62, 117, 124, 66, 190, 155, 199, 54, 191, 97, 143, 15, 62, 10, 118, 146, 61, 180, 203, 147, 60, 200, 120, 50, 188, 135, 85, 232, 189, 127, 17, 23, 190, 211, 41, 203, 58, 123, 168, 6, 190, 219, 197, 28, 62, 146, 78, 114, 190, 10, 175, 101, 190, 179, 65, 154, 60, 184, 122, 23, 190, 145, 41, 249, 189, 98, 147, 73, 62, 185, 127, 106, 190, 201, 215, 1, 62, 61, 119, 112, 189, 109, 106, 240, 190, 77, 43, 174, 190, 120, 77, 79, 61, 188, 33, 170, 189, 232, 249, 65, 61, 242, 210, 7, 61, 30, 127, 70, 190, 136, 26, 243, 190, 123, 101, 253, 188, 1, 86, 115, 190, 23, 54, 102, 190, 11, 176, 8, 190, 153, 89, 36, 62, 93, 73, 14, 190, 226, 187, 169, 61, 230, 81, 200, 190, 182, 3, 250, 61, 228, 210, 153, 190, 43, 20, 74, 62, 244, 87, 99, 63, 86, 21, 152, 188, 6, 93, 6, 191, 81, 52, 163, 62, 207, 204, 226, 190, 101, 185, 219, 62, 148, 29, 2, 62, 149, 135, 235, 190, 131, 114, 104, 189, 115, 235, 91, 60, 134, 7, 143, 62, 244, 108, 203, 190, 53, 67, 48, 190, 166, 223, 238, 188, 227, 127, 101, 62, 74, 165, 56, 191, 84, 230, 147, 190, 125, 56, 240, 190, 255, 52, 94, 62, 221, 2, 232, 190, 76, 102, 164, 62, 235, 16, 228, 61, 199, 227, 189, 188, 120, 93, 161, 190, 113, 181, 239, 189, 159, 102, 189, 61, 15, 118, 13, 191, 28, 242, 80, 62, 108, 163, 140, 190, 222, 132, 197, 61, 55, 60, 10, 62, 248, 108, 190, 60, 192, 210, 57, 191, 244, 56, 179, 61, 15, 123, 128, 62, 174, 69, 98, 191, 96, 115, 162, 62, 233, 216, 46, 191, 253, 173, 92, 189, 231, 232, 107, 62, 93, 39, 191, 190, 116, 96, 5, 62, 111, 4, 138, 190, 149, 179, 171, 188, 120, 101, 135, 61, 136, 210, 108, 61, 241, 91, 220, 189, 49, 245, 156, 61, 246, 71, 172, 62, 11, 93, 83, 62, 123, 72, 46, 62, 22, 140, 159, 188, 251, 72, 16, 62, 152, 218, 71, 62, 96, 102, 201, 61, 27, 35, 96, 62, 10, 31, 246, 61, 173, 78, 149, 61, 92, 201, 253, 189, 160, 192, 91, 190, 51, 252, 8, 62, 74, 149, 45, 191, 83, 222, 171, 61, 4, 101, 249, 189, 111, 64, 163, 189, 7, 54, 14, 62, 112, 117, 170, 62, 214, 118, 31, 62, 75, 249, 252, 60, 141, 188, 200, 190, 172, 64, 235, 61, 242, 214, 70, 62, 228, 240, 63, 189, 197, 135, 57, 190, 81, 70, 79, 187, 140, 226, 232, 62, 157, 234, 23, 62, 93, 78, 171, 188, 227, 147, 152, 189, 55, 247, 145, 189, 174, 38, 59, 60, 132, 39, 183, 62, 147, 216, 104, 62, 68, 25, 149, 62, 185, 98, 138, 187, 37, 143, 25, 190, 92, 170, 104, 190, 197, 50, 138, 190, 135, 92, 231, 62, 77, 237, 180, 188, 245, 164, 177, 62, 227, 47, 246, 190, 118, 62, 129, 190, 121, 14, 151, 61, 254, 198, 48, 189, 35, 131, 19, 191, 22, 198, 108, 63, 82, 19, 104, 189, 37, 10, 232, 190, 195, 15, 141, 62, 234, 156, 64, 190, 44, 5, 230, 62, 167, 204, 47, 62, 227, 2, 162, 190, 84, 118, 193, 190, 30, 172, 230, 190, 43, 232, 48, 62, 4, 252, 70, 191, 194, 185, 110, 61, 184, 202, 23, 61, 215, 204, 169, 189, 177, 114, 224, 190, 206, 226, 220, 61, 62, 24, 116, 190, 68, 128, 49, 62, 43, 28, 203, 190, 86, 246, 153, 61, 104, 1, 28, 187, 42, 15, 140, 190, 74, 135, 44, 190, 23, 204, 213, 187, 82, 72, 24, 61, 41, 95, 45, 191, 181, 127, 192, 62, 161, 119, 40, 190, 102, 181, 114, 62, 62, 68, 134, 62, 180, 126, 94, 62, 158, 128, 138, 190, 104, 214, 175, 189, 15, 163, 193, 61, 235, 247, 186, 61, 51, 90, 47, 62, 88, 112, 96, 190, 114, 145, 39, 190, 40, 97, 141, 190, 96, 99, 221, 189, 222, 47, 167, 189, 134, 6, 114, 61, 103, 1, 112, 62, 69, 211, 31, 62, 196, 163, 145, 189, 205, 96, 32, 62, 56, 177, 6, 189, 172, 52, 134, 61, 100, 109, 142, 61, 59, 251, 194, 189, 140, 94, 170, 62, 211, 155, 119, 190, 123, 8, 68, 62, 50, 240, 64, 189, 199, 156, 142, 61, 50, 215, 43, 63, 227, 74, 174, 60, 233, 1, 22, 62, 25, 203, 207, 191, 1, 62, 18, 190, 255, 55, 12, 190, 7, 86, 207, 62, 60, 225, 169, 190, 187, 40, 73, 63, 41, 114, 115, 187, 126, 122, 211, 189, 150, 169, 83, 62, 13, 205, 181, 59, 50, 11, 215, 62, 72, 61, 232, 61, 3, 97, 167, 190, 134, 71, 157, 189, 88, 212, 95, 190, 93, 0, 116, 62, 238, 135, 239, 190, 137, 251, 230, 61, 193, 70, 44, 61, 224, 240, 133, 62, 243, 174, 210, 190, 199, 33, 71, 62, 177, 57, 112, 190, 203, 36, 229, 188, 201, 177, 230, 190, 45, 195, 33, 190, 146, 244, 178, 61, 11, 96, 235, 61, 15, 19, 151, 61, 140, 59, 146, 61, 200, 241, 174, 188, 249, 255, 121, 191, 111, 216, 36, 62, 218, 131, 126, 189, 119, 82, 189, 59, 38, 60, 194, 62, 60, 113, 127, 62, 159, 130, 249, 61, 251, 183, 179, 189, 246, 139, 165, 61, 211, 8, 124, 62, 169, 186, 118, 191, 210, 32, 188, 61, 132, 176, 200, 61, 51, 150, 52, 190, 28, 207, 165, 189, 164, 53, 238, 190, 179, 77, 131, 62, 2, 31, 168, 190, 50, 98, 28, 191, 80, 11, 219, 61, 201, 204, 81, 62, 7, 98, 150, 191, 215, 214, 185, 59, 30, 252, 113, 190, 212, 176, 86, 190, 85, 70, 111, 190, 96, 108, 239, 189, 129, 162, 130, 189, 226, 58, 40, 62, 182, 202, 118, 190, 175, 161, 166, 62, 96, 170, 226, 61, 50, 132, 42, 191, 173, 146, 65, 62, 58, 209, 82, 60, 234, 114, 10, 62, 164, 212, 108, 189, 12, 171, 142, 190, 130, 221, 16, 190, 211, 249, 159, 189, 39, 254, 143, 62, 251, 85, 205, 190, 0, 46, 164, 62, 244, 118, 139, 189, 173, 103, 124, 62, 126, 235, 6, 62, 90, 100, 93, 191, 184, 10, 89, 190, 84, 78, 106, 60, 59, 171, 120, 62, 77, 125, 175, 190, 239, 20, 45, 62, 185, 99, 134, 62, 99, 3, 26, 62, 77, 10, 150, 62, 58, 240, 34, 62, 221, 146, 17, 190, 193, 123, 33, 62, 85, 233, 198, 62, 55, 143, 36, 190, 153, 88, 34, 62, 211, 198, 87, 190, 243, 86, 1, 62, 126, 35, 235, 189, 50, 128, 67, 62, 227, 149, 22, 191, 60, 165, 30, 61, 182, 29, 39, 190, 186, 72, 59, 62, 190, 59, 195, 190, 11, 225, 235, 62, 206, 112, 47, 62, 208, 70, 102, 190, 3, 81, 195, 62, 103, 238, 109, 190, 162, 205, 200, 62, 26, 54, 212, 189, 226, 14, 28, 189, 58, 155, 64, 189, 221, 171, 246, 60, 39, 31, 127, 61, 169, 57, 41, 191, 140, 130, 185, 189, 240, 68, 161, 61, 2, 104, 47, 62, 127, 80, 43, 190, 44, 217, 147, 62, 124, 78, 9, 190, 54, 176, 73, 190, 211, 231, 152, 190, 142, 111, 103, 62, 133, 195, 147, 62, 182, 15, 159, 62, 215, 109, 51, 186, 140, 232, 153, 61, 37, 13, 157, 189, 168, 253, 102, 191, 4, 35, 148, 188, 254, 59, 6, 62, 150, 73, 139, 189, 236, 200, 68, 190, 79, 114, 112, 189, 175, 70, 48, 191, 164, 91, 65, 188, 145, 208, 251, 61, 193, 144, 117, 190, 125, 157, 165, 189, 244, 86, 85, 190, 101, 202, 96, 62, 227, 32, 69, 189, 98, 197, 164, 61, 48, 166, 183, 60, 173, 212, 160, 189, 138, 47, 126, 190, 144, 80, 64, 190, 91, 83, 27, 63, 159, 237, 7, 190, 179, 111, 121, 62, 126, 215, 14, 190, 132, 58, 54, 190, 44, 169, 252, 61, 190, 145, 111, 190, 178, 155, 247, 61, 68, 196, 244, 61, 207, 205, 78, 62, 55, 103, 68, 62, 44, 53, 86, 191, 208, 51, 148, 61, 9, 137, 51, 190, 92, 153, 204, 61, 230, 230, 162, 62, 142, 32, 47, 191, 232, 13, 179, 190, 230, 78, 31, 59, 236, 201, 120, 63, 50, 114, 158, 61, 137, 57, 5, 191, 179, 32, 44, 62, 254, 76, 247, 61, 163, 37, 227, 62, 52, 220, 42, 62, 114, 111, 83, 190, 168, 19, 94, 190, 41, 86, 174, 190, 90, 247, 236, 61, 160, 57, 13, 191, 208, 125, 249, 62, 143, 39, 121, 62, 33, 245, 179, 61, 6, 21, 17, 191, 204, 122, 136, 190, 50, 38, 159, 190, 238, 139, 232, 62, 73, 113, 29, 191, 108, 141, 10, 190, 167, 96, 241, 189, 152, 92, 18, 189, 12, 87, 170, 189, 156, 123, 134, 62, 77, 83, 222, 61, 123, 82, 122, 191, 197, 167, 254, 62, 162, 163, 166, 190, 75, 167, 148, 62, 115, 42, 157, 62, 215, 104, 144, 62, 178, 86, 104, 61, 118, 65, 52, 62, 205, 227, 139, 62, 111, 146, 38, 61, 200, 48, 82, 62, 159, 173, 28, 62, 251, 37, 8, 189, 30, 198, 239, 189, 120, 29, 133, 190, 104, 0, 225, 61, 147, 189, 222, 61, 67, 212, 159, 189, 200, 228, 7, 190, 74, 212, 161, 61, 122, 111, 235, 61, 228, 49, 207, 61, 10, 86, 82, 62, 48, 76, 195, 189, 194, 76, 138, 189, 39, 208, 172, 61, 82, 228, 156, 59, 8, 82, 184, 189, 114, 167, 4, 61, 182, 123, 62, 189, 9, 59, 216, 62, 28, 165, 22, 190, 10, 96, 60, 190, 179, 113, 200, 189, 252, 238, 124, 190, 83, 3, 215, 189, 136, 127, 51, 62, 235, 96, 193, 188, 21, 99, 253, 60, 192, 210, 162, 60, 132, 69, 87, 62, 2, 8, 178, 189, 32, 244, 80, 61, 189, 101, 144, 189, 127, 7, 27, 190, 144, 7, 109, 190, 188, 239, 242, 190, 43, 86, 33, 191, 179, 23, 4, 190, 218, 160, 235, 61, 134, 37, 20, 62, 251, 7, 143, 190, 220, 81, 61, 62, 90, 179, 177, 188, 14, 113, 53, 62, 207, 246, 246, 60, 93, 237, 156, 62, 186, 17, 137, 62, 17, 150, 129, 62, 71, 139, 5, 190, 196, 245, 148, 190, 107, 34, 252, 189, 211, 10, 146, 61, 154, 35, 5, 190, 21, 56, 131, 62, 186, 98, 235, 190, 248, 59, 124, 191, 74, 182, 137, 189, 75, 220, 0, 63, 208, 198, 193, 188, 213, 40, 99, 61, 3, 145, 44, 190, 17, 246, 89, 190, 69, 32, 153, 190, 57, 136, 27, 189, 99, 243, 18, 187, 43, 86, 199, 188, 166, 6, 57, 187, 238, 105, 4, 190, 26, 243, 194, 189, 80, 111, 12, 62, 119, 67, 100, 191, 150, 39, 65, 61, 121, 166, 10, 62, 176, 173, 8, 62, 75, 115, 248, 61, 40, 69, 191, 62, 207, 124, 27, 190, 196, 62, 21, 189, 55, 86, 162, 190, 19, 92, 107, 189, 131, 157, 204, 60, 160, 45, 210, 59, 150, 88, 132, 61, 186, 227, 100, 59, 13, 150, 44, 188, 24, 51, 224, 190, 198, 109, 135, 188, 113, 210, 217, 61, 113, 250, 28, 62, 133, 98, 242, 188, 191, 210, 79, 190, 50, 135, 154, 61, 226, 12, 26, 189, 101, 68, 251, 190, 203, 76, 135, 62, 194, 19, 95, 62, 158, 81, 193, 62, 94, 75, 95, 191, 161, 124, 80, 189, 49, 162, 64, 190, 87, 166, 242, 189, 54, 165, 119, 61, 74, 7, 5, 191, 235, 51, 226, 61, 57, 137, 45, 191, 200, 22, 67, 190, 187, 160, 40, 61, 90, 192, 136, 62, 87, 251, 28, 191, 243, 49, 91, 190, 55, 231, 135, 190, 6, 59, 55, 190, 187, 115, 29, 190, 145, 66, 248, 189, 113, 181, 19, 190, 205, 107, 166, 189, 228, 236, 7, 190, 227, 224, 142, 189, 189, 54, 46, 62, 70, 145, 151, 190, 31, 156, 25, 190, 55, 15, 128, 62, 68, 187, 70, 60, 209, 199, 172, 190, 255, 17, 37, 61, 1, 159, 248, 189, 203, 32, 3, 191, 191, 66, 27, 190, 25, 193, 5, 63, 73, 187, 174, 61, 238, 254, 138, 190, 128, 148, 7, 190, 53, 223, 21, 189, 255, 108, 60, 62, 105, 196, 194, 191, 169, 194, 57, 62, 7, 92, 161, 61, 12, 247, 65, 62, 30, 132, 221, 190, 27, 126, 165, 62, 29, 108, 236, 190, 148, 127, 176, 189, 89, 142, 35, 191, 145, 195, 133, 190, 176, 74, 158, 62, 8, 137, 170, 62, 1, 148, 10, 62, 111, 37, 238, 61, 155, 144, 5, 190, 84, 4, 29, 191, 7, 240, 118, 62, 106, 142, 121, 62, 60, 177, 191, 189, 210, 80, 251, 189, 75, 241, 67, 189, 130, 28, 55, 190, 108, 54, 99, 189, 56, 5, 147, 62, 166, 105, 18, 60, 175, 254, 195, 62, 232, 171, 102, 190, 85, 76, 13, 62, 131, 59, 102, 61, 161, 34, 98, 62, 68, 49, 195, 189, 124, 86, 209, 61, 126, 99, 92, 60, 58, 33, 147, 188, 66, 39, 220, 188, 214, 165, 54, 62, 216, 23, 174, 62, 203, 175, 5, 189, 150, 117, 35, 62, 47, 186, 5, 62, 179, 116, 47, 62, 202, 2, 134, 61, 14, 141, 225, 189, 208, 137, 86, 188, 188, 51, 192, 60, 208, 133, 74, 62, 173, 97, 106, 189, 14, 180, 206, 61, 41, 65, 169, 189, 98, 42, 21, 59, 25, 115, 238, 61, 86, 121, 46, 190, 166, 53, 9, 189, 5, 130, 48, 191, 224, 184, 32, 190, 107, 161, 22, 63, 81, 214, 54, 191, 86, 89, 199, 62, 154, 214, 117, 191, 180, 151, 151, 62, 87, 57, 29, 63, 94, 12, 20, 191, 146, 71, 229, 190, 193, 244, 35, 191, 3, 219, 53, 189, 179, 16, 178, 190, 223, 45, 31, 190, 65, 46, 149, 62, 94, 12, 163, 62, 154, 108, 28, 190, 68, 239, 169, 190, 223, 139, 97, 190, 45, 147, 82, 61, 206, 31, 148, 62, 218, 188, 147, 62, 206, 246, 125, 62, 197, 209, 19, 62, 239, 142, 227, 187, 51, 233, 30, 61, 76, 124, 177, 61, 8, 202, 24, 191, 204, 196, 80, 189, 225, 118, 156, 191, 34, 67, 23, 62, 112, 235, 147, 190, 22, 82, 137, 191, 95, 198, 136, 61, 16, 103, 130, 62, 205, 97, 154, 191, 215, 8, 132, 62, 195, 155, 25, 191, 105, 79, 23, 62, 160, 145, 219, 61, 185, 54, 98, 191, 209, 106, 164, 190, 104, 155, 89, 189, 50, 127, 111, 62, 69, 187, 137, 190, 49, 37, 168, 61, 84, 234, 240, 61, 175, 148, 170, 62, 133, 53, 155, 62, 202, 247, 23, 61, 6, 97, 37, 190, 145, 128, 16, 189, 97, 210, 31, 62, 198, 166, 175, 61, 145, 185, 98, 62, 80, 133, 73, 190, 185, 151, 223, 62, 59, 89, 37, 189, 216, 41, 27, 62, 12, 247, 52, 191, 196, 191, 248, 61, 150, 123, 176, 190, 111, 3, 49, 190, 174, 127, 169, 190, 107, 81, 107, 189, 96, 38, 249, 61, 77, 106, 59, 191, 98, 208, 1, 190, 150, 67, 88, 62, 241, 128, 48, 63, 99, 12, 25, 191, 122, 205, 61, 62, 200, 103, 24, 190, 89, 234, 92, 190, 10, 146, 162, 62, 33, 37, 240, 190, 143, 213, 62, 62, 147, 16, 173, 189, 16, 182, 61, 61, 33, 242, 135, 62, 209, 145, 169, 61, 197, 96, 40, 191, 205, 83, 80, 190, 193, 240, 192, 190, 102, 25, 31, 61, 111, 151, 153, 187, 174, 140, 42, 60, 237, 194, 42, 62, 195, 194, 228, 190, 152, 61, 145, 61, 90, 18, 153, 190, 12, 12, 61, 61, 9, 30, 130, 61, 248, 103, 170, 190, 76, 178, 5, 61, 249, 198, 51, 62, 35, 58, 247, 191, 233, 161, 7, 190, 13, 96, 119, 62, 10, 181, 185, 191, 245, 230, 220, 62, 64, 44, 211, 59, 194, 110, 141, 61, 132, 230, 97, 61, 93, 60, 176, 190, 172, 0, 138, 190, 9, 113, 62, 62, 11, 234, 224, 62, 73, 68, 162, 190, 36, 47, 205, 60, 194, 230, 234, 61, 115, 179, 213, 62, 229, 230, 36, 62, 163, 137, 174, 61, 119, 84, 77, 190, 174, 42, 147, 62, 19, 10, 111, 189, 108, 28, 207, 190, 181, 110, 161, 190, 189, 8, 38, 61, 242, 205, 111, 62, 13, 233, 132, 61, 113, 175, 169, 62, 255, 131, 33, 191, 76, 30, 25, 62, 72, 125, 139, 190, 114, 73, 193, 188, 226, 20, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 12, 27, 61, 4, 35, 160, 188, 93, 141, 186, 189, 192, 162, 33, 61, 208, 132, 116, 62, 108, 251, 40, 190, 193, 38, 223, 61, 111, 229, 207, 189, 76, 245, 47, 190, 85, 127, 20, 61, 128, 33, 18, 191, 131, 158, 109, 62, 209, 30, 218, 61, 167, 100, 162, 189, 186, 173, 7, 62, 75, 195, 17, 61, 50, 128, 7, 61, 196, 224, 137, 61, 119, 124, 120, 59, 214, 78, 117, 62, 92, 178, 236, 189, 59, 167, 180, 189, 189, 87, 4, 62, 110, 183, 100, 61, 212, 200, 241, 61, 136, 75, 139, 59, 199, 118, 4, 62, 214, 18, 248, 61, 69, 181, 220, 61, 157, 121, 14, 62, 144, 134, 50, 62, 68, 136, 57, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 108, 242, 190, 106, 153, 218, 190, 254, 109, 135, 63, 2, 223, 151, 62, 57, 219, 241, 61, 219, 31, 178, 60, 66, 111, 148, 61, 110, 21, 176, 61, 150, 53, 229, 62, 43, 227, 181, 189, 108, 126, 70, 63, 252, 13, 235, 190, 126, 8, 30, 62, 116, 247, 203, 190, 136, 245, 5, 191, 105, 7, 97, 191, 79, 181, 213, 190, 250, 17, 222, 190, 127, 17, 198, 62, 74, 158, 132, 190, 142, 173, 196, 62, 223, 170, 82, 191, 245, 67, 159, 188, 60, 55, 0, 63, 52, 238, 158, 189, 167, 95, 181, 190, 112, 179, 7, 191, 77, 227, 148, 61, 228, 152, 122, 63, 198, 244, 42, 63, 152, 10, 157, 190, 177, 18, 20, 63, 32, 71, 53, 60, 120, 246, 154, 62, 228, 10, 36, 63, 65, 173, 53, 62, 112, 83, 23, 191, 157, 142, 238, 60, 8, 237, 166, 190, 72, 145, 197, 59, 128, 24, 212, 60, 41, 195, 39, 190, 233, 143, 79, 62, 227, 119, 10, 63, 140, 125, 4, 190, 76, 147, 174, 62, 227, 59, 169, 61, 68, 251, 86, 62, 188, 147, 138, 190, 89, 190, 189, 190, 102, 172, 37, 190, 234, 244, 67, 190, 138, 127, 67, 62, 42, 105, 130, 62, 74, 174, 129, 190, 121, 50, 68, 190, 97, 30, 176, 190, 135, 230, 159, 61, 144, 69, 93, 189, 43, 54, 123, 190, 219, 74, 145, 62, 186, 238, 2, 190, 152, 24, 51, 62, 59, 6, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 185, 168, 188, 169, 23, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 58, 36, 63, 253, 151, 213, 63, 5, 24, 170, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 24, 87, 192, 99, 126, 207, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0007/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}