// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 114, 118, 62, 213, 168, 41, 61, 158, 178, 0, 190, 133, 235, 196, 190, 56, 50, 238, 189, 144, 95, 16, 62, 38, 58, 72, 62, 204, 151, 138, 61, 165, 189, 56, 188, 166, 151, 155, 62, 23, 239, 133, 62, 17, 116, 15, 191, 242, 246, 253, 189, 91, 43, 128, 61, 200, 78, 215, 189, 119, 74, 12, 191, 17, 160, 8, 191, 172, 201, 97, 189, 202, 188, 220, 62, 252, 231, 96, 62, 232, 132, 49, 190, 188, 35, 154, 62, 231, 35, 174, 189, 237, 252, 219, 62, 205, 141, 187, 189, 221, 4, 62, 61, 126, 219, 141, 62, 247, 239, 181, 61, 253, 238, 74, 61, 128, 102, 28, 62, 76, 136, 230, 190, 217, 71, 210, 62, 232, 120, 186, 189, 105, 188, 116, 62, 11, 117, 169, 190, 247, 158, 224, 190, 142, 172, 143, 190, 86, 170, 241, 190, 9, 110, 32, 190, 232, 208, 13, 191, 165, 220, 81, 190, 108, 220, 25, 188, 236, 208, 165, 62, 207, 43, 26, 190, 151, 29, 243, 190, 76, 95, 136, 62, 47, 245, 71, 190, 84, 147, 135, 190, 187, 156, 181, 190, 203, 129, 173, 61, 238, 156, 22, 62, 195, 108, 154, 62, 87, 143, 42, 61, 16, 202, 215, 61, 151, 146, 247, 61, 231, 189, 14, 191, 230, 204, 92, 62, 199, 94, 128, 61, 253, 94, 199, 62, 100, 207, 129, 190, 109, 137, 251, 189, 16, 213, 182, 62, 96, 217, 229, 190, 92, 131, 232, 190, 87, 108, 96, 61, 110, 159, 18, 63, 86, 42, 88, 190, 219, 78, 232, 62, 68, 190, 16, 62, 238, 251, 190, 190, 137, 209, 208, 190, 217, 215, 209, 190, 241, 142, 246, 62, 93, 10, 139, 62, 237, 39, 186, 190, 149, 18, 215, 62, 28, 204, 46, 62, 194, 155, 239, 190, 226, 82, 204, 190, 251, 229, 249, 62, 138, 159, 91, 62, 153, 78, 183, 189, 40, 19, 132, 62, 231, 71, 199, 190, 165, 47, 171, 189, 141, 40, 217, 62, 253, 64, 3, 63, 166, 29, 207, 62, 70, 127, 107, 189, 158, 122, 51, 62, 222, 158, 18, 191, 39, 41, 205, 190, 10, 93, 219, 190, 181, 227, 176, 190, 52, 187, 196, 62, 50, 103, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 175, 19, 191, 64, 110, 194, 190, 207, 103, 42, 62, 4, 204, 14, 190, 71, 113, 160, 190, 81, 50, 118, 190, 82, 65, 204, 190, 14, 236, 167, 190, 42, 219, 7, 190, 137, 48, 139, 190, 250, 19, 234, 61, 141, 34, 161, 190, 226, 85, 241, 62, 103, 209, 220, 190, 91, 175, 184, 62, 21, 109, 214, 190, 173, 80, 86, 190, 123, 241, 65, 190, 190, 13, 218, 190, 203, 214, 16, 63, 32, 81, 166, 190, 100, 181, 129, 190, 248, 160, 11, 63, 155, 136, 237, 62, 104, 9, 15, 191, 105, 144, 230, 189, 18, 216, 200, 62, 148, 178, 143, 190, 117, 170, 127, 190, 19, 5, 208, 190, 54, 35, 38, 62, 155, 229, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 49, 221, 189, 245, 198, 190, 189, 110, 103, 177, 189, 37, 248, 113, 61, 254, 11, 180, 61, 237, 171, 127, 61, 59, 100, 198, 61, 159, 2, 153, 187, 115, 21, 12, 60, 29, 168, 33, 62, 40, 255, 7, 190, 52, 110, 18, 190, 114, 136, 163, 61, 184, 189, 69, 189, 17, 105, 161, 60, 67, 120, 254, 189, 8, 84, 251, 61, 169, 119, 193, 189, 196, 87, 224, 61, 134, 197, 1, 62, 189, 248, 21, 62, 137, 192, 111, 61, 189, 71, 47, 190, 197, 198, 209, 188, 120, 48, 226, 189, 187, 10, 158, 189, 214, 114, 19, 190, 238, 67, 90, 188, 4, 33, 207, 189, 3, 59, 147, 61, 240, 89, 37, 62, 201, 163, 74, 61, 45, 136, 0, 62, 219, 99, 66, 189, 148, 29, 153, 188, 4, 183, 47, 62, 137, 2, 182, 61, 8, 9, 186, 189, 13, 3, 129, 189, 59, 55, 26, 62, 36, 5, 138, 61, 96, 88, 240, 189, 69, 111, 145, 61, 144, 255, 164, 189, 224, 235, 51, 61, 187, 147, 63, 61, 242, 245, 18, 62, 126, 103, 13, 62, 66, 151, 31, 62, 101, 65, 202, 189, 207, 218, 235, 61, 168, 166, 28, 190, 134, 140, 176, 189, 0, 89, 178, 59, 66, 164, 192, 189, 35, 239, 44, 62, 209, 143, 102, 61, 132, 245, 81, 189, 66, 168, 185, 61, 188, 53, 18, 62, 169, 146, 40, 190, 47, 240, 219, 61, 54, 229, 45, 61, 195, 167, 141, 61, 236, 193, 215, 60, 66, 177, 228, 59, 40, 198, 166, 189, 90, 89, 8, 189, 49, 116, 31, 190, 99, 12, 3, 190, 111, 77, 226, 61, 158, 77, 97, 189, 170, 168, 125, 61, 198, 230, 246, 188, 49, 187, 184, 61, 175, 50, 4, 189, 232, 8, 191, 189, 178, 210, 162, 189, 148, 56, 11, 190, 69, 73, 253, 188, 22, 84, 148, 61, 112, 17, 168, 188, 139, 209, 204, 189, 45, 163, 114, 189, 123, 177, 79, 186, 202, 210, 243, 61, 202, 245, 40, 190, 164, 36, 237, 61, 150, 128, 43, 62, 16, 54, 226, 189, 251, 167, 198, 61, 48, 122, 59, 61, 8, 151, 125, 189, 210, 52, 39, 189, 174, 226, 29, 62, 145, 83, 34, 190, 93, 170, 233, 189, 38, 207, 179, 61, 180, 44, 246, 189, 221, 234, 29, 189, 21, 196, 174, 61, 139, 50, 17, 190, 28, 85, 41, 62, 61, 66, 118, 188, 165, 43, 50, 62, 246, 252, 178, 61, 173, 246, 15, 190, 212, 187, 182, 189, 193, 88, 37, 62, 242, 80, 214, 188, 141, 43, 249, 61, 168, 164, 2, 190, 34, 54, 50, 61, 241, 37, 208, 61, 146, 181, 36, 62, 181, 183, 241, 61, 184, 224, 249, 189, 111, 137, 191, 188, 81, 8, 42, 190, 29, 202, 36, 190, 217, 4, 171, 188, 5, 245, 18, 190, 51, 180, 160, 189, 20, 252, 141, 189, 216, 112, 222, 61, 59, 22, 151, 61, 95, 77, 55, 188, 173, 245, 99, 61, 74, 206, 170, 189, 24, 37, 233, 61, 54, 242, 239, 189, 88, 19, 40, 62, 35, 220, 13, 190, 149, 39, 19, 62, 33, 132, 13, 62, 62, 120, 4, 190, 76, 239, 238, 61, 97, 49, 174, 60, 42, 184, 125, 189, 224, 125, 10, 62, 192, 128, 166, 61, 56, 94, 144, 189, 141, 169, 164, 187, 121, 1, 46, 61, 226, 188, 44, 62, 166, 163, 131, 60, 132, 94, 31, 189, 236, 10, 14, 62, 164, 98, 223, 60, 223, 236, 204, 61, 178, 131, 0, 190, 49, 46, 154, 188, 6, 151, 221, 61, 178, 63, 38, 62, 26, 245, 140, 189, 249, 106, 91, 61, 2, 116, 45, 190, 157, 217, 183, 189, 14, 252, 36, 190, 161, 216, 38, 189, 107, 185, 21, 62, 122, 42, 229, 189, 92, 129, 224, 189, 20, 104, 59, 189, 117, 25, 168, 186, 74, 170, 64, 60, 73, 63, 66, 59, 51, 223, 16, 189, 216, 82, 0, 190, 205, 63, 141, 189, 172, 5, 9, 62, 59, 168, 81, 59, 14, 40, 224, 60, 220, 118, 175, 189, 162, 179, 138, 61, 190, 35, 49, 62, 134, 152, 13, 62, 1, 154, 240, 61, 151, 101, 181, 189, 92, 120, 48, 62, 59, 160, 226, 61, 84, 53, 255, 61, 112, 54, 148, 189, 216, 220, 183, 189, 142, 42, 182, 61, 75, 128, 6, 62, 62, 212, 7, 188, 140, 206, 18, 189, 178, 185, 136, 61, 42, 227, 10, 190, 214, 132, 17, 62, 100, 19, 37, 62, 213, 223, 50, 62, 140, 38, 225, 188, 138, 84, 43, 62, 93, 131, 216, 189, 219, 33, 10, 62, 107, 32, 37, 190, 185, 25, 210, 61, 140, 6, 166, 189, 50, 77, 202, 61, 62, 103, 185, 189, 19, 234, 49, 62, 213, 48, 1, 62, 57, 238, 34, 62, 123, 15, 173, 189, 194, 15, 138, 187, 142, 111, 209, 189, 34, 228, 246, 189, 171, 166, 187, 61, 168, 248, 229, 189, 136, 142, 205, 186, 18, 79, 34, 62, 45, 114, 17, 189, 38, 225, 206, 187, 60, 223, 53, 189, 120, 232, 165, 61, 27, 29, 23, 187, 208, 85, 12, 62, 210, 99, 136, 189, 114, 80, 118, 61, 209, 79, 235, 189, 83, 250, 72, 60, 114, 59, 56, 61, 197, 52, 151, 189, 27, 14, 190, 61, 149, 122, 47, 62, 252, 95, 211, 61, 59, 147, 255, 61, 22, 162, 224, 61, 38, 224, 12, 61, 77, 44, 20, 188, 65, 134, 241, 60, 95, 139, 37, 190, 172, 193, 23, 189, 13, 217, 185, 189, 100, 83, 121, 61, 32, 78, 7, 190, 209, 135, 218, 189, 167, 78, 33, 190, 87, 32, 17, 190, 109, 148, 167, 189, 67, 85, 147, 61, 253, 188, 107, 189, 225, 123, 197, 60, 185, 233, 235, 187, 205, 83, 177, 189, 21, 129, 153, 188, 233, 160, 166, 61, 53, 243, 204, 189, 164, 30, 159, 189, 68, 151, 25, 190, 196, 104, 132, 189, 46, 69, 28, 190, 124, 157, 28, 62, 104, 211, 23, 190, 201, 180, 127, 189, 41, 181, 234, 61, 37, 212, 166, 188, 223, 74, 3, 189, 122, 131, 177, 61, 97, 60, 8, 62, 2, 113, 50, 190, 249, 83, 124, 61, 254, 33, 42, 62, 161, 201, 33, 61, 94, 25, 235, 189, 41, 200, 35, 188, 176, 160, 148, 189, 215, 249, 34, 61, 246, 54, 41, 62, 206, 211, 49, 62, 216, 179, 230, 61, 204, 212, 6, 188, 176, 103, 149, 189, 94, 189, 199, 60, 80, 113, 202, 60, 200, 112, 177, 189, 134, 35, 231, 61, 130, 66, 20, 61, 46, 18, 236, 189, 86, 36, 21, 62, 103, 200, 254, 189, 95, 211, 233, 60, 144, 32, 63, 189, 183, 196, 133, 189, 238, 230, 224, 59, 186, 51, 196, 61, 134, 146, 240, 60, 166, 22, 206, 59, 137, 74, 2, 188, 23, 157, 65, 188, 211, 85, 173, 61, 200, 42, 13, 62, 9, 32, 28, 62, 241, 176, 116, 189, 161, 172, 106, 61, 183, 106, 22, 190, 96, 35, 112, 61, 233, 5, 133, 186, 10, 89, 177, 189, 207, 247, 42, 62, 6, 204, 38, 189, 149, 83, 135, 61, 200, 88, 83, 61, 126, 203, 89, 189, 143, 16, 228, 61, 50, 147, 182, 189, 166, 99, 76, 61, 139, 206, 19, 61, 19, 16, 23, 62, 14, 11, 130, 189, 229, 189, 48, 62, 36, 64, 224, 188, 74, 36, 220, 189, 209, 30, 97, 61, 210, 236, 214, 189, 112, 21, 176, 61, 198, 78, 135, 61, 179, 46, 210, 189, 164, 96, 76, 61, 188, 36, 72, 188, 167, 155, 212, 61, 255, 51, 23, 188, 52, 14, 211, 61, 104, 129, 180, 188, 178, 240, 36, 190, 110, 92, 160, 188, 181, 138, 31, 62, 224, 38, 33, 62, 163, 228, 135, 61, 39, 98, 215, 61, 198, 67, 15, 62, 64, 138, 137, 189, 232, 218, 43, 62, 74, 254, 194, 60, 168, 32, 43, 190, 22, 141, 211, 189, 134, 248, 31, 190, 31, 10, 2, 190, 98, 52, 84, 61, 34, 212, 140, 189, 49, 177, 75, 61, 245, 17, 132, 59, 118, 137, 17, 190, 188, 136, 212, 189, 113, 80, 187, 189, 169, 77, 68, 61, 211, 192, 186, 61, 88, 3, 100, 189, 252, 64, 199, 189, 243, 35, 83, 186, 120, 167, 168, 189, 7, 217, 191, 61, 146, 250, 9, 61, 197, 110, 0, 62, 4, 168, 187, 61, 202, 43, 141, 189, 109, 136, 139, 61, 222, 154, 156, 189, 95, 31, 153, 188, 143, 4, 33, 62, 6, 140, 75, 188, 186, 109, 23, 62, 7, 55, 142, 189, 68, 91, 90, 188, 108, 171, 34, 62, 77, 34, 255, 189, 160, 253, 203, 188, 250, 119, 189, 61, 124, 22, 57, 189, 73, 168, 6, 189, 245, 228, 139, 61, 74, 1, 123, 61, 94, 239, 38, 61, 202, 78, 22, 62, 23, 240, 165, 189, 164, 105, 228, 61, 119, 112, 124, 189, 80, 161, 172, 61, 165, 192, 6, 60, 254, 210, 255, 187, 15, 125, 61, 189, 158, 152, 113, 189, 144, 109, 243, 61, 105, 116, 0, 62, 223, 22, 204, 61, 126, 136, 175, 61, 231, 86, 19, 62, 83, 214, 31, 188, 124, 7, 174, 61, 173, 122, 52, 62, 20, 58, 26, 62, 230, 218, 211, 189, 136, 254, 51, 190, 127, 65, 252, 60, 168, 5, 133, 189, 98, 134, 248, 61, 131, 29, 243, 189, 91, 95, 12, 189, 190, 84, 68, 189, 115, 49, 24, 62, 183, 207, 214, 61, 113, 123, 43, 61, 155, 144, 136, 61, 25, 8, 30, 189, 227, 137, 244, 188, 4, 101, 68, 188, 176, 245, 118, 61, 68, 26, 113, 61, 241, 25, 137, 61, 176, 175, 247, 61, 77, 224, 142, 61, 52, 166, 11, 62, 21, 106, 67, 188, 147, 191, 170, 59, 128, 180, 158, 187, 134, 254, 171, 189, 215, 41, 190, 189, 46, 129, 61, 57, 238, 239, 19, 190, 195, 91, 201, 61, 236, 66, 84, 189, 204, 24, 40, 190, 70, 226, 17, 62, 144, 152, 16, 62, 247, 64, 13, 190, 239, 113, 36, 190, 22, 19, 199, 188, 234, 53, 152, 189, 135, 14, 154, 188, 168, 108, 10, 60, 136, 125, 5, 190, 228, 228, 150, 188, 107, 52, 8, 62, 59, 107, 182, 60, 78, 215, 31, 190, 114, 206, 242, 189, 228, 193, 208, 60, 42, 128, 16, 62, 63, 197, 133, 61, 82, 141, 34, 60, 242, 83, 3, 190, 137, 73, 243, 61, 193, 92, 0, 61, 6, 69, 182, 189, 231, 192, 165, 61, 252, 2, 19, 62, 175, 204, 160, 61, 110, 143, 22, 62, 74, 84, 50, 62, 199, 107, 10, 190, 246, 119, 148, 60, 183, 108, 35, 190, 18, 14, 218, 61, 219, 24, 19, 62, 103, 203, 202, 189, 153, 218, 135, 189, 147, 79, 12, 190, 37, 8, 231, 61, 217, 117, 9, 190, 97, 168, 254, 189, 239, 252, 179, 187, 244, 41, 36, 189, 62, 180, 183, 189, 82, 229, 194, 188, 167, 190, 95, 60, 131, 103, 133, 61, 133, 84, 42, 190, 240, 68, 198, 189, 250, 51, 88, 189, 101, 245, 151, 189, 235, 56, 147, 189, 11, 108, 193, 189, 109, 106, 3, 62, 60, 154, 187, 189, 252, 229, 32, 62, 58, 66, 24, 62, 249, 146, 245, 61, 103, 225, 118, 61, 161, 195, 153, 61, 164, 122, 36, 61, 26, 70, 255, 188, 4, 57, 238, 189, 120, 59, 41, 62, 226, 100, 223, 61, 12, 71, 243, 61, 74, 123, 70, 189, 75, 24, 39, 62, 115, 86, 239, 60, 178, 16, 84, 189, 173, 215, 135, 189, 87, 9, 50, 189, 176, 236, 185, 189, 193, 222, 13, 62, 218, 176, 196, 60, 6, 174, 8, 62, 207, 136, 39, 61, 39, 156, 6, 62, 226, 43, 32, 60, 200, 238, 195, 189, 37, 88, 248, 60, 215, 68, 43, 61, 212, 182, 207, 189, 24, 145, 9, 190, 254, 153, 211, 189, 73, 122, 12, 62, 125, 68, 26, 62, 125, 177, 18, 190, 90, 168, 12, 60, 98, 187, 32, 61, 85, 78, 25, 62, 59, 95, 1, 190, 129, 120, 68, 61, 45, 79, 145, 61, 61, 100, 71, 189, 131, 182, 15, 189, 17, 232, 10, 61, 219, 234, 47, 61, 245, 44, 244, 189, 170, 212, 210, 61, 130, 89, 202, 189, 38, 245, 73, 61, 43, 157, 44, 189, 92, 110, 234, 189, 134, 176, 44, 62, 112, 146, 141, 189, 161, 80, 37, 189, 212, 9, 12, 62, 143, 226, 62, 60, 24, 228, 98, 189, 196, 221, 182, 189, 82, 104, 9, 62, 24, 11, 19, 189, 38, 148, 32, 62, 206, 244, 23, 190, 169, 191, 216, 189, 104, 98, 247, 188, 95, 233, 35, 62, 9, 114, 220, 61, 196, 108, 25, 189, 194, 243, 9, 62, 234, 225, 132, 61, 24, 124, 22, 62, 247, 141, 41, 190, 43, 197, 193, 189, 240, 28, 204, 61, 72, 86, 150, 189, 100, 199, 29, 62, 252, 205, 15, 190, 143, 36, 55, 61, 95, 244, 45, 190, 87, 209, 41, 62, 191, 201, 47, 62, 79, 38, 255, 189, 242, 9, 29, 190, 222, 2, 180, 189, 42, 233, 252, 189, 143, 247, 40, 190, 41, 151, 33, 59, 130, 140, 153, 61, 136, 0, 40, 61, 81, 35, 145, 189, 98, 202, 37, 61, 180, 207, 63, 61, 178, 92, 53, 61, 5, 59, 85, 189, 60, 143, 208, 61, 71, 93, 81, 58, 213, 192, 67, 188, 217, 218, 53, 60, 144, 35, 1, 190, 37, 157, 128, 188, 26, 97, 241, 189, 232, 61, 143, 61, 92, 32, 55, 189, 92, 61, 232, 61, 177, 181, 248, 189, 156, 127, 135, 60, 20, 242, 205, 61, 248, 116, 238, 61, 131, 0, 52, 188, 208, 92, 193, 189, 220, 68, 185, 189, 17, 143, 13, 190, 231, 117, 10, 62, 109, 119, 155, 189, 15, 159, 6, 62, 100, 30, 33, 190, 105, 30, 254, 61, 158, 3, 51, 190, 227, 21, 21, 190, 175, 81, 38, 188, 77, 206, 28, 62, 68, 183, 28, 62, 211, 101, 185, 61, 49, 151, 9, 62, 59, 29, 16, 62, 197, 127, 176, 61, 78, 61, 121, 189, 48, 249, 7, 62, 1, 137, 233, 61, 147, 127, 197, 189, 72, 53, 184, 189, 67, 132, 168, 61, 25, 115, 37, 190, 151, 24, 215, 61, 226, 220, 198, 189, 202, 216, 251, 61, 156, 56, 166, 189, 220, 20, 188, 189, 22, 20, 236, 61, 97, 4, 173, 189, 242, 144, 246, 186, 180, 229, 25, 190, 1, 76, 19, 190, 251, 192, 209, 58, 136, 151, 212, 60, 184, 58, 253, 189, 213, 211, 72, 61, 214, 227, 170, 189, 149, 121, 5, 62, 147, 58, 243, 61, 142, 208, 193, 189, 152, 184, 180, 61, 101, 35, 123, 189, 192, 226, 244, 61, 226, 213, 138, 61, 88, 152, 18, 190, 251, 166, 22, 190, 127, 180, 171, 61, 167, 185, 34, 190, 198, 205, 164, 189, 8, 218, 2, 190, 167, 178, 32, 62, 22, 239, 33, 61, 86, 26, 7, 62, 28, 218, 0, 189, 179, 15, 28, 190, 232, 110, 61, 61, 197, 158, 205, 189, 161, 179, 162, 61, 162, 170, 28, 190, 238, 33, 76, 60, 227, 26, 203, 61, 247, 172, 14, 62, 186, 77, 39, 62, 126, 210, 164, 189, 42, 127, 152, 61, 148, 45, 221, 189, 46, 31, 19, 61, 209, 242, 40, 62, 45, 135, 64, 61, 66, 71, 32, 62, 175, 97, 3, 190, 58, 160, 97, 189, 145, 169, 27, 62, 68, 207, 251, 61, 18, 42, 7, 189, 72, 223, 223, 61, 146, 236, 28, 62, 199, 20, 226, 188, 57, 101, 211, 60, 78, 151, 212, 189, 78, 13, 24, 62, 154, 148, 186, 189, 90, 207, 113, 61, 160, 155, 16, 62, 244, 201, 110, 61, 143, 50, 244, 61, 46, 162, 156, 61, 179, 201, 205, 189, 77, 147, 120, 189, 1, 248, 238, 60, 163, 46, 208, 189, 226, 58, 176, 189, 181, 71, 23, 62, 6, 76, 3, 189, 169, 226, 139, 61, 122, 125, 72, 188, 51, 96, 208, 61, 0, 43, 190, 189, 221, 94, 23, 189, 180, 68, 161, 61, 254, 138, 216, 61, 215, 119, 224, 61, 12, 10, 193, 61, 184, 199, 179, 189, 140, 141, 157, 59, 31, 244, 28, 190, 51, 233, 210, 189, 170, 76, 23, 62, 208, 186, 138, 189, 147, 52, 75, 189, 25, 16, 3, 190, 116, 179, 2, 190, 233, 10, 31, 62, 163, 113, 195, 61, 11, 186, 28, 190, 169, 154, 174, 61, 7, 11, 99, 189, 180, 208, 203, 187, 204, 155, 231, 61, 108, 98, 61, 59, 120, 86, 180, 61, 49, 72, 202, 188, 198, 136, 128, 61, 15, 124, 48, 62, 26, 119, 202, 187, 126, 204, 201, 61, 140, 69, 217, 60, 210, 81, 140, 189, 176, 1, 127, 188, 33, 169, 32, 61, 51, 28, 18, 190, 183, 112, 11, 61, 151, 145, 229, 61, 51, 246, 246, 189, 171, 38, 9, 190, 150, 67, 38, 59, 73, 16, 16, 190, 19, 248, 21, 61, 124, 202, 48, 190, 77, 97, 148, 189, 174, 67, 75, 189, 247, 45, 134, 188, 21, 189, 5, 62, 125, 60, 25, 190, 121, 137, 201, 61, 57, 92, 42, 186, 207, 156, 26, 61, 26, 241, 17, 62, 146, 85, 255, 60, 215, 174, 231, 189, 84, 49, 192, 61, 150, 211, 18, 61, 174, 67, 135, 189, 160, 62, 214, 61, 111, 70, 89, 188, 166, 159, 21, 190, 191, 166, 103, 187, 195, 65, 53, 188, 226, 41, 5, 61, 217, 156, 42, 62, 193, 30, 13, 62, 72, 148, 181, 61, 180, 58, 184, 189, 242, 88, 187, 189, 192, 248, 3, 62, 208, 11, 35, 190, 14, 226, 55, 189, 58, 161, 31, 189, 210, 39, 5, 62, 114, 132, 49, 190, 155, 85, 210, 60, 239, 11, 35, 190, 22, 100, 87, 189, 41, 121, 155, 61, 147, 173, 155, 189, 105, 95, 39, 62, 191, 41, 235, 187, 71, 53, 99, 189, 157, 185, 194, 60, 175, 27, 41, 188, 43, 231, 246, 61, 161, 1, 186, 59, 233, 4, 98, 189, 56, 165, 66, 189, 46, 64, 74, 189, 129, 114, 204, 189, 46, 190, 34, 62, 39, 223, 140, 60, 19, 55, 40, 62, 46, 13, 255, 60, 232, 112, 97, 60, 175, 108, 26, 61, 101, 75, 160, 61, 207, 224, 221, 189, 134, 132, 87, 189, 159, 73, 185, 189, 3, 26, 128, 61, 236, 212, 32, 62, 99, 135, 236, 61, 202, 239, 155, 61, 219, 14, 38, 190, 94, 45, 151, 60, 188, 222, 192, 61, 52, 140, 125, 189, 215, 224, 7, 62, 190, 162, 5, 189, 172, 83, 145, 60, 51, 132, 229, 61, 113, 47, 33, 62, 4, 140, 187, 189, 12, 190, 192, 189, 66, 48, 74, 61, 189, 40, 31, 190, 144, 121, 232, 61, 94, 250, 39, 61, 210, 3, 46, 190, 205, 68, 141, 61, 116, 245, 215, 60, 5, 169, 135, 61, 68, 252, 27, 189, 84, 99, 243, 189, 126, 174, 26, 190, 219, 232, 131, 61, 148, 12, 113, 189, 89, 239, 27, 62, 108, 90, 82, 58, 166, 195, 82, 61, 149, 169, 255, 60, 200, 187, 22, 190, 214, 62, 40, 62, 94, 64, 51, 62, 134, 45, 27, 62, 97, 154, 83, 189, 215, 225, 127, 61, 176, 196, 203, 189, 192, 183, 151, 61, 13, 248, 11, 190, 210, 108, 138, 61, 167, 157, 200, 60, 192, 102, 95, 61, 18, 243, 178, 189, 226, 35, 213, 61, 66, 9, 236, 61, 166, 63, 160, 189, 102, 128, 6, 62, 67, 152, 237, 186, 142, 59, 120, 189, 123, 88, 176, 60, 179, 45, 13, 190, 168, 83, 100, 60, 143, 118, 45, 62, 92, 93, 205, 189, 2, 174, 96, 61, 211, 175, 20, 190, 131, 138, 45, 62, 96, 194, 242, 61, 235, 184, 112, 189, 243, 207, 161, 61, 174, 249, 218, 188, 170, 175, 222, 61, 141, 19, 10, 189, 111, 91, 48, 190, 221, 101, 194, 188, 141, 92, 209, 188, 10, 135, 10, 61, 73, 145, 200, 189, 129, 46, 51, 190, 148, 243, 136, 189, 44, 187, 68, 61, 137, 57, 161, 61, 235, 161, 206, 61, 1, 100, 197, 61, 143, 20, 178, 189, 225, 233, 41, 62, 29, 226, 186, 188, 17, 113, 40, 190, 33, 88, 15, 62, 208, 70, 52, 190, 87, 125, 239, 187, 201, 249, 28, 190, 211, 221, 150, 189, 37, 13, 83, 61, 19, 109, 24, 62, 102, 37, 30, 61, 187, 105, 21, 62, 38, 125, 168, 61, 24, 207, 19, 189, 5, 10, 32, 190, 136, 100, 41, 62, 222, 2, 178, 189, 154, 197, 213, 60, 19, 22, 52, 62, 95, 171, 131, 61, 144, 226, 187, 61, 13, 54, 36, 61, 80, 72, 143, 189, 74, 163, 132, 61, 244, 15, 190, 189, 53, 214, 251, 61, 91, 221, 39, 190, 209, 186, 131, 61, 226, 113, 246, 189, 43, 48, 10, 190, 197, 47, 73, 189, 62, 45, 196, 60, 246, 218, 14, 62, 74, 143, 142, 189, 52, 180, 107, 188, 114, 133, 40, 61, 61, 25, 126, 189, 134, 178, 214, 187, 237, 251, 40, 190, 23, 50, 21, 190, 230, 127, 78, 189, 194, 15, 19, 62, 197, 232, 202, 60, 204, 140, 39, 62, 112, 28, 152, 61, 128, 202, 185, 189, 163, 9, 50, 62, 144, 38, 235, 60, 15, 194, 32, 190, 241, 232, 8, 61, 122, 5, 144, 188, 113, 209, 186, 61, 228, 211, 252, 61, 212, 42, 39, 190, 57, 202, 32, 190, 79, 179, 11, 190, 150, 113, 248, 189, 61, 205, 160, 61, 87, 197, 40, 62, 104, 47, 37, 189, 155, 218, 26, 189, 101, 245, 147, 189, 180, 4, 1, 190, 100, 64, 34, 190, 55, 75, 172, 189, 66, 202, 156, 189, 122, 39, 253, 189, 86, 113, 40, 189, 63, 193, 251, 60, 124, 74, 3, 189, 205, 32, 190, 61, 168, 110, 47, 62, 10, 113, 59, 61, 19, 93, 20, 62, 230, 162, 47, 190, 57, 152, 15, 62, 73, 107, 52, 61, 204, 116, 4, 189, 132, 9, 189, 189, 230, 28, 79, 61, 169, 131, 208, 189, 139, 129, 137, 60, 222, 116, 190, 188, 184, 89, 145, 189, 239, 124, 131, 61, 131, 65, 140, 60, 92, 178, 29, 189, 86, 9, 143, 189, 9, 170, 26, 189, 198, 159, 80, 186, 49, 77, 115, 61, 141, 226, 209, 189, 233, 64, 168, 61, 173, 172, 29, 62, 100, 181, 174, 189, 2, 36, 193, 189, 170, 170, 24, 189, 30, 170, 130, 61, 147, 28, 193, 188, 94, 231, 13, 62, 114, 212, 5, 190, 219, 91, 135, 61, 222, 123, 23, 189, 181, 132, 233, 60, 124, 177, 244, 60, 240, 140, 197, 188, 228, 152, 4, 190, 52, 84, 20, 62, 194, 147, 8, 189, 80, 218, 254, 188, 21, 130, 37, 61, 251, 28, 82, 189, 236, 40, 41, 62, 111, 29, 160, 188, 60, 115, 62, 189, 92, 190, 236, 189, 185, 164, 144, 189, 83, 96, 19, 190, 213, 76, 231, 61, 125, 225, 91, 189, 246, 236, 25, 61, 106, 248, 27, 62, 176, 2, 0, 190, 147, 232, 246, 61, 223, 76, 79, 61, 212, 253, 36, 189, 200, 88, 75, 61, 81, 232, 141, 58, 120, 65, 41, 62, 23, 82, 15, 62, 77, 93, 19, 62, 143, 71, 64, 61, 188, 171, 31, 190, 32, 32, 29, 190, 217, 28, 196, 189, 127, 201, 193, 61, 124, 103, 31, 61, 86, 242, 169, 59, 197, 135, 36, 190, 234, 141, 35, 188, 36, 194, 36, 62, 110, 245, 11, 190, 80, 131, 241, 189, 184, 29, 11, 61, 223, 94, 33, 190, 111, 149, 247, 189, 59, 158, 132, 61, 200, 87, 202, 61, 224, 57, 214, 189, 156, 114, 41, 62, 230, 75, 222, 61, 63, 133, 76, 189, 44, 200, 7, 62, 47, 11, 29, 62, 181, 116, 43, 62, 66, 131, 40, 190, 111, 232, 12, 61, 27, 57, 253, 61, 213, 102, 206, 189, 11, 125, 245, 60, 213, 187, 36, 190, 170, 234, 41, 190, 83, 211, 225, 188, 63, 121, 32, 190, 114, 191, 215, 61, 196, 252, 81, 189, 230, 191, 209, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 158, 198, 189, 107, 63, 146, 189, 197, 20, 139, 60, 243, 0, 206, 61, 144, 215, 249, 189, 202, 42, 11, 190, 176, 191, 251, 61, 76, 84, 108, 61, 227, 111, 175, 189, 84, 59, 112, 61, 46, 110, 237, 61, 216, 167, 208, 189, 18, 99, 238, 60, 246, 237, 210, 189, 81, 34, 178, 189, 73, 105, 178, 61, 49, 141, 118, 188, 46, 62, 160, 187, 214, 135, 238, 189, 85, 67, 214, 60, 195, 24, 44, 190, 192, 110, 240, 61, 139, 223, 6, 62, 83, 42, 102, 60, 149, 88, 190, 187, 238, 19, 241, 189, 178, 12, 229, 61, 36, 83, 230, 189, 26, 163, 155, 61, 172, 233, 129, 61, 154, 241, 4, 189, 156, 162, 3, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 163, 161, 189, 56, 139, 43, 61, 30, 39, 10, 189, 152, 156, 7, 190, 173, 154, 41, 62, 188, 112, 26, 190, 220, 6, 10, 62, 204, 32, 255, 189, 250, 84, 191, 60, 144, 62, 203, 61, 23, 80, 6, 190, 14, 238, 169, 189, 123, 168, 250, 189, 146, 56, 129, 189, 218, 115, 26, 190, 243, 89, 133, 189, 3, 30, 217, 189, 148, 44, 2, 62, 39, 150, 19, 61, 15, 211, 74, 189, 245, 150, 170, 60, 237, 169, 244, 188, 182, 211, 173, 61, 242, 134, 141, 189, 248, 202, 209, 188, 125, 130, 19, 190, 182, 56, 51, 61, 23, 233, 114, 59, 63, 60, 143, 61, 213, 131, 200, 189, 66, 20, 199, 189, 101, 247, 152, 60, 180, 1, 185, 60, 191, 211, 25, 190, 241, 229, 89, 189, 150, 207, 39, 61, 206, 246, 23, 190, 43, 28, 245, 61, 88, 28, 16, 62, 141, 50, 241, 60, 125, 83, 0, 190, 242, 150, 225, 189, 150, 21, 216, 189, 246, 151, 242, 61, 226, 10, 145, 187, 181, 3, 23, 190, 127, 198, 24, 62, 45, 202, 234, 61, 114, 206, 92, 189, 0, 189, 3, 62, 153, 72, 206, 189, 238, 244, 123, 189, 137, 250, 104, 189, 101, 226, 9, 61, 185, 60, 187, 61, 229, 188, 221, 60, 87, 33, 200, 189, 98, 164, 249, 189, 209, 108, 18, 62, 106, 131, 44, 190, 108, 14, 8, 62, 166, 249, 121, 61, 28, 3, 109, 61, 177, 54, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 95, 98, 189, 32, 24, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 142, 187, 62, 67, 90, 185, 190, 212, 254, 113, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {203, 131, 199, 189, 120, 220, 243, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}