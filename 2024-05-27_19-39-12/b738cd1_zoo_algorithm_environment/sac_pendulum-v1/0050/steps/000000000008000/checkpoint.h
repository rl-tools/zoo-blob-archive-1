// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 91, 131, 62, 169, 235, 175, 60, 189, 180, 28, 189, 249, 233, 138, 190, 138, 114, 9, 191, 11, 85, 132, 62, 144, 132, 182, 62, 108, 104, 49, 62, 143, 178, 248, 189, 51, 225, 152, 189, 214, 26, 249, 62, 28, 62, 37, 191, 95, 102, 247, 61, 231, 28, 246, 188, 219, 237, 45, 190, 182, 36, 196, 190, 135, 175, 87, 191, 185, 249, 185, 62, 169, 62, 59, 190, 148, 129, 97, 63, 49, 245, 190, 190, 28, 241, 246, 61, 14, 154, 207, 62, 255, 115, 254, 62, 112, 239, 151, 189, 105, 216, 145, 63, 86, 72, 152, 62, 153, 200, 51, 62, 110, 135, 39, 63, 79, 34, 120, 62, 110, 78, 172, 189, 8, 131, 43, 63, 82, 143, 15, 191, 53, 2, 110, 61, 127, 50, 153, 191, 223, 49, 221, 190, 146, 220, 121, 190, 92, 246, 79, 191, 252, 21, 176, 61, 141, 218, 244, 190, 184, 135, 141, 63, 117, 243, 173, 62, 59, 91, 41, 63, 30, 72, 128, 191, 215, 198, 165, 190, 170, 125, 130, 189, 163, 187, 151, 191, 173, 89, 133, 190, 112, 238, 72, 62, 167, 222, 253, 62, 169, 85, 84, 62, 136, 66, 50, 63, 55, 16, 47, 190, 214, 206, 32, 188, 174, 111, 138, 62, 207, 58, 88, 191, 108, 139, 77, 62, 23, 114, 1, 189, 82, 80, 128, 62, 148, 17, 178, 190, 51, 11, 103, 190, 53, 156, 200, 189, 110, 113, 104, 191, 24, 60, 249, 190, 198, 198, 71, 63, 75, 47, 56, 63, 96, 138, 180, 190, 237, 115, 9, 63, 1, 238, 82, 188, 91, 119, 21, 191, 75, 166, 255, 190, 24, 90, 36, 190, 237, 61, 73, 190, 252, 218, 218, 62, 246, 225, 28, 191, 149, 218, 27, 62, 97, 90, 45, 62, 34, 142, 28, 191, 138, 60, 211, 190, 243, 238, 82, 63, 178, 231, 169, 189, 157, 192, 223, 190, 54, 162, 55, 191, 146, 161, 40, 191, 120, 17, 81, 62, 109, 37, 95, 63, 234, 214, 217, 62, 35, 203, 55, 63, 11, 139, 187, 61, 9, 208, 81, 62, 78, 51, 105, 191, 79, 183, 112, 191, 238, 189, 59, 190, 53, 128, 182, 190, 47, 102, 104, 188, 249, 169, 24, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 13, 35, 191, 218, 50, 96, 190, 10, 39, 236, 62, 4, 61, 248, 61, 186, 251, 44, 191, 216, 146, 197, 190, 183, 65, 233, 61, 101, 15, 134, 190, 232, 84, 8, 190, 211, 112, 96, 190, 164, 186, 137, 190, 183, 57, 40, 190, 23, 166, 43, 63, 143, 123, 9, 191, 236, 120, 96, 62, 84, 48, 164, 188, 96, 237, 134, 190, 20, 113, 20, 190, 99, 92, 234, 190, 17, 48, 33, 63, 202, 199, 211, 190, 221, 33, 172, 190, 5, 127, 57, 63, 197, 91, 47, 63, 14, 178, 241, 60, 22, 72, 153, 61, 82, 160, 187, 62, 15, 218, 51, 189, 234, 198, 190, 190, 124, 177, 255, 190, 118, 93, 155, 62, 191, 96, 236, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 233, 189, 4, 179, 190, 189, 253, 162, 98, 190, 56, 104, 148, 61, 188, 121, 102, 62, 82, 206, 178, 189, 170, 179, 8, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 109, 1, 101, 190, 101, 115, 218, 189, 92, 246, 21, 189, 245, 109, 2, 190, 181, 129, 67, 60, 235, 205, 159, 60, 20, 89, 251, 61, 25, 205, 192, 189, 247, 14, 203, 61, 21, 19, 48, 61, 124, 212, 255, 61, 175, 88, 115, 61, 164, 10, 252, 190, 133, 248, 227, 189, 179, 135, 129, 188, 132, 134, 62, 189, 97, 154, 232, 190, 244, 100, 210, 188, 4, 33, 207, 189, 3, 59, 147, 61, 28, 210, 159, 61, 164, 137, 217, 187, 237, 99, 6, 62, 9, 207, 30, 190, 231, 237, 225, 62, 41, 245, 98, 62, 102, 74, 149, 62, 132, 244, 23, 189, 198, 69, 154, 189, 255, 237, 25, 61, 8, 61, 28, 61, 89, 180, 184, 190, 207, 233, 123, 189, 237, 185, 158, 189, 173, 67, 242, 61, 117, 185, 225, 61, 132, 160, 193, 62, 103, 109, 144, 189, 168, 67, 91, 61, 53, 22, 91, 62, 13, 188, 223, 61, 35, 108, 83, 189, 26, 101, 41, 190, 8, 14, 176, 60, 153, 55, 48, 189, 89, 151, 31, 62, 190, 7, 132, 186, 148, 42, 241, 186, 153, 190, 169, 61, 53, 57, 186, 61, 144, 30, 145, 190, 186, 45, 139, 189, 154, 28, 179, 60, 182, 105, 74, 189, 206, 4, 208, 60, 214, 175, 67, 190, 219, 162, 213, 62, 204, 194, 5, 62, 0, 158, 158, 190, 120, 67, 114, 190, 250, 146, 129, 62, 150, 153, 203, 189, 86, 112, 10, 62, 187, 176, 39, 190, 87, 229, 78, 188, 84, 23, 114, 190, 89, 28, 72, 190, 251, 247, 95, 189, 119, 117, 117, 189, 165, 229, 41, 191, 176, 250, 59, 187, 86, 26, 19, 62, 90, 96, 72, 190, 81, 203, 247, 60, 218, 221, 185, 190, 205, 180, 38, 62, 51, 242, 126, 58, 111, 37, 15, 191, 30, 233, 143, 62, 95, 215, 25, 62, 207, 242, 110, 62, 72, 221, 129, 189, 45, 106, 171, 188, 212, 32, 27, 189, 56, 230, 39, 191, 45, 34, 226, 190, 93, 170, 233, 189, 74, 142, 82, 61, 228, 55, 69, 189, 229, 223, 0, 190, 9, 240, 173, 61, 229, 109, 183, 61, 166, 87, 14, 62, 12, 176, 128, 189, 253, 108, 47, 62, 101, 149, 163, 189, 132, 219, 144, 190, 163, 30, 241, 189, 208, 247, 171, 62, 155, 80, 183, 61, 149, 243, 239, 189, 18, 90, 156, 190, 117, 197, 138, 189, 38, 205, 93, 59, 48, 167, 43, 62, 82, 183, 131, 190, 103, 69, 173, 190, 143, 37, 121, 188, 129, 57, 90, 190, 242, 214, 145, 190, 143, 116, 222, 188, 44, 37, 162, 190, 176, 235, 65, 190, 95, 82, 193, 190, 16, 132, 36, 61, 158, 192, 162, 62, 142, 130, 247, 189, 141, 76, 227, 190, 121, 47, 134, 189, 179, 222, 111, 61, 174, 156, 18, 189, 28, 144, 58, 62, 107, 210, 165, 188, 219, 18, 157, 62, 50, 156, 136, 61, 175, 89, 158, 190, 10, 148, 103, 62, 230, 145, 37, 190, 135, 31, 139, 190, 209, 200, 126, 62, 222, 98, 48, 62, 229, 138, 100, 62, 53, 235, 67, 62, 231, 47, 81, 188, 219, 49, 135, 62, 180, 129, 169, 62, 51, 134, 98, 190, 195, 138, 14, 62, 82, 52, 43, 190, 205, 250, 99, 62, 20, 77, 54, 189, 147, 70, 61, 60, 252, 20, 2, 61, 221, 131, 84, 62, 65, 14, 133, 189, 222, 180, 184, 189, 37, 133, 103, 190, 82, 43, 128, 190, 0, 158, 44, 190, 77, 153, 132, 190, 224, 3, 13, 62, 232, 82, 82, 190, 44, 134, 145, 190, 115, 77, 22, 190, 63, 126, 151, 190, 200, 190, 160, 189, 75, 205, 41, 190, 77, 43, 171, 189, 28, 16, 72, 190, 240, 255, 162, 189, 113, 205, 9, 190, 141, 227, 154, 61, 155, 55, 218, 61, 196, 236, 235, 189, 32, 132, 19, 62, 89, 34, 191, 62, 170, 197, 169, 61, 185, 38, 194, 62, 72, 116, 156, 62, 98, 107, 15, 61, 248, 158, 130, 188, 127, 113, 135, 61, 1, 122, 244, 190, 134, 52, 249, 189, 172, 230, 10, 61, 195, 221, 159, 61, 19, 5, 231, 190, 73, 153, 210, 189, 65, 69, 140, 189, 196, 153, 188, 190, 157, 75, 234, 61, 8, 196, 123, 187, 49, 12, 43, 62, 93, 243, 30, 190, 56, 77, 74, 60, 99, 248, 233, 187, 97, 185, 149, 62, 230, 40, 36, 60, 81, 242, 110, 62, 246, 29, 119, 190, 21, 118, 90, 62, 76, 74, 181, 190, 9, 248, 43, 61, 30, 36, 212, 62, 149, 76, 40, 62, 154, 253, 244, 62, 72, 108, 81, 62, 142, 250, 16, 62, 8, 18, 56, 190, 151, 202, 193, 62, 253, 151, 70, 190, 169, 57, 79, 189, 252, 204, 59, 189, 169, 104, 26, 61, 59, 107, 1, 189, 220, 39, 182, 189, 218, 63, 58, 62, 126, 58, 17, 62, 127, 143, 32, 62, 167, 194, 173, 190, 43, 250, 21, 190, 89, 151, 240, 190, 21, 24, 69, 190, 63, 146, 49, 190, 197, 52, 151, 189, 205, 211, 202, 61, 215, 144, 169, 62, 175, 130, 153, 61, 42, 127, 255, 61, 102, 27, 159, 62, 56, 77, 68, 190, 117, 229, 54, 61, 0, 249, 228, 61, 31, 132, 144, 190, 118, 240, 143, 190, 188, 83, 72, 62, 127, 54, 130, 62, 244, 27, 17, 60, 54, 129, 29, 189, 169, 243, 194, 189, 149, 68, 86, 190, 19, 234, 94, 190, 59, 123, 61, 62, 52, 19, 197, 190, 62, 116, 113, 190, 246, 26, 164, 61, 147, 81, 196, 189, 216, 120, 130, 189, 130, 131, 131, 190, 244, 213, 51, 62, 13, 18, 36, 190, 181, 44, 237, 61, 124, 43, 98, 189, 229, 221, 10, 62, 130, 102, 50, 61, 39, 241, 103, 191, 9, 125, 96, 189, 160, 6, 152, 189, 17, 88, 207, 62, 222, 204, 225, 188, 56, 197, 167, 62, 3, 160, 82, 62, 221, 160, 137, 190, 110, 68, 185, 61, 228, 203, 181, 189, 179, 195, 198, 190, 147, 17, 136, 190, 193, 239, 22, 61, 96, 138, 20, 61, 194, 92, 62, 189, 211, 95, 218, 62, 73, 156, 114, 60, 126, 16, 146, 190, 165, 244, 238, 62, 207, 70, 198, 187, 112, 204, 207, 61, 72, 64, 175, 188, 138, 2, 140, 190, 234, 63, 235, 61, 0, 210, 196, 61, 35, 228, 111, 190, 143, 79, 54, 62, 229, 81, 3, 191, 192, 205, 13, 61, 126, 39, 137, 190, 6, 86, 122, 62, 59, 52, 194, 60, 8, 207, 22, 188, 37, 115, 61, 61, 74, 146, 13, 189, 163, 81, 1, 62, 102, 104, 154, 61, 194, 35, 79, 189, 193, 166, 144, 62, 167, 252, 34, 62, 141, 197, 16, 190, 78, 117, 36, 62, 181, 191, 144, 190, 5, 95, 33, 190, 3, 100, 26, 62, 31, 9, 37, 188, 83, 250, 221, 62, 145, 27, 91, 62, 110, 162, 4, 189, 226, 76, 177, 61, 123, 241, 137, 62, 115, 237, 225, 61, 154, 162, 179, 189, 141, 218, 6, 190, 247, 115, 9, 62, 94, 115, 222, 61, 70, 17, 46, 189, 105, 65, 29, 62, 23, 198, 183, 61, 107, 21, 102, 190, 134, 188, 156, 189, 132, 255, 48, 190, 108, 210, 11, 188, 52, 133, 151, 60, 56, 195, 174, 190, 164, 96, 76, 61, 238, 57, 2, 61, 66, 183, 62, 62, 13, 212, 111, 190, 162, 223, 194, 189, 103, 26, 207, 189, 66, 58, 61, 191, 135, 152, 86, 61, 67, 246, 145, 189, 164, 115, 218, 62, 181, 149, 161, 61, 215, 225, 240, 190, 157, 76, 80, 62, 117, 13, 200, 191, 82, 53, 176, 190, 132, 29, 94, 191, 127, 183, 222, 61, 3, 118, 121, 190, 94, 25, 196, 188, 23, 45, 103, 60, 139, 193, 42, 62, 136, 161, 184, 190, 159, 132, 40, 62, 74, 193, 140, 61, 195, 57, 29, 191, 64, 60, 78, 191, 242, 61, 96, 188, 186, 108, 220, 62, 43, 120, 155, 62, 250, 61, 57, 61, 220, 165, 67, 186, 94, 115, 135, 61, 196, 132, 165, 189, 222, 91, 20, 189, 214, 36, 42, 189, 238, 189, 225, 61, 237, 114, 185, 190, 197, 171, 51, 190, 35, 30, 80, 189, 242, 113, 59, 190, 195, 65, 47, 189, 66, 252, 155, 188, 123, 30, 130, 190, 178, 200, 177, 62, 18, 103, 29, 61, 93, 7, 128, 189, 231, 133, 167, 62, 114, 55, 84, 62, 112, 175, 54, 190, 171, 152, 148, 62, 249, 241, 224, 61, 91, 106, 205, 189, 31, 13, 7, 187, 11, 12, 191, 61, 159, 28, 217, 190, 43, 44, 70, 62, 139, 136, 160, 189, 76, 110, 34, 62, 218, 121, 42, 191, 195, 47, 172, 61, 12, 16, 233, 189, 5, 151, 147, 189, 217, 11, 91, 188, 80, 130, 37, 190, 144, 109, 243, 61, 54, 234, 85, 61, 195, 85, 177, 62, 224, 71, 70, 62, 56, 22, 80, 60, 241, 106, 250, 60, 241, 236, 160, 62, 235, 8, 31, 62, 192, 211, 51, 62, 245, 178, 89, 190, 138, 217, 83, 190, 30, 127, 35, 190, 137, 39, 61, 190, 240, 21, 142, 58, 195, 165, 43, 191, 239, 210, 223, 190, 80, 148, 0, 190, 191, 41, 82, 189, 122, 68, 171, 62, 136, 163, 110, 62, 173, 40, 114, 190, 138, 165, 61, 189, 13, 56, 8, 62, 161, 91, 245, 190, 197, 139, 183, 61, 50, 200, 154, 61, 224, 35, 170, 62, 234, 78, 9, 61, 79, 73, 186, 61, 238, 237, 189, 62, 63, 164, 52, 191, 244, 0, 147, 190, 128, 180, 158, 187, 216, 174, 252, 190, 198, 108, 7, 62, 253, 116, 139, 189, 192, 142, 134, 190, 219, 254, 133, 62, 15, 43, 54, 190, 211, 200, 94, 190, 207, 89, 177, 62, 36, 53, 66, 190, 80, 40, 220, 190, 211, 113, 28, 190, 246, 59, 254, 61, 44, 65, 122, 62, 80, 72, 177, 61, 105, 98, 145, 60, 139, 106, 200, 190, 191, 14, 11, 62, 76, 97, 180, 62, 40, 67, 185, 189, 42, 107, 32, 191, 137, 110, 39, 61, 47, 61, 8, 62, 249, 67, 100, 62, 205, 40, 240, 61, 143, 82, 147, 190, 108, 12, 206, 189, 170, 138, 32, 191, 3, 116, 241, 189, 202, 231, 137, 190, 253, 213, 61, 62, 148, 180, 129, 188, 193, 191, 152, 61, 21, 97, 37, 63, 184, 239, 175, 62, 0, 244, 174, 190, 143, 180, 59, 191, 189, 8, 210, 190, 197, 245, 242, 189, 134, 216, 191, 62, 60, 212, 134, 191, 96, 178, 135, 62, 254, 99, 141, 62, 172, 40, 110, 190, 49, 226, 134, 61, 125, 46, 18, 192, 233, 89, 114, 190, 142, 126, 221, 190, 153, 40, 187, 62, 64, 98, 70, 61, 18, 154, 147, 189, 126, 148, 170, 62, 243, 240, 63, 62, 23, 166, 19, 191, 246, 10, 185, 60, 160, 231, 5, 62, 238, 175, 110, 190, 49, 202, 186, 190, 65, 168, 185, 61, 7, 54, 34, 62, 112, 169, 230, 62, 238, 187, 163, 190, 19, 115, 218, 62, 131, 125, 188, 62, 161, 195, 153, 61, 11, 35, 186, 186, 113, 5, 173, 62, 40, 119, 168, 61, 84, 252, 41, 62, 122, 124, 21, 62, 248, 108, 11, 63, 74, 121, 20, 189, 183, 245, 114, 62, 47, 50, 6, 188, 18, 225, 50, 190, 146, 66, 174, 190, 123, 78, 17, 190, 211, 105, 136, 189, 80, 220, 67, 61, 41, 47, 61, 191, 97, 74, 192, 61, 0, 122, 9, 62, 99, 5, 166, 62, 112, 10, 143, 62, 19, 150, 59, 191, 80, 76, 147, 61, 50, 153, 111, 62, 149, 128, 34, 191, 207, 112, 140, 185, 126, 183, 150, 61, 94, 175, 195, 62, 244, 184, 175, 190, 149, 146, 158, 189, 213, 56, 157, 62, 122, 116, 126, 191, 36, 79, 159, 190, 134, 37, 1, 190, 203, 142, 150, 62, 217, 53, 185, 62, 177, 43, 240, 189, 72, 214, 39, 191, 109, 60, 170, 188, 195, 233, 154, 190, 20, 40, 63, 189, 55, 158, 40, 191, 210, 177, 224, 61, 253, 141, 40, 62, 13, 224, 245, 190, 232, 34, 164, 61, 20, 37, 213, 191, 214, 85, 25, 190, 127, 153, 91, 191, 98, 106, 209, 62, 81, 208, 210, 61, 234, 184, 178, 189, 25, 47, 175, 61, 210, 72, 165, 62, 114, 247, 191, 190, 39, 33, 79, 62, 4, 130, 105, 189, 122, 147, 175, 190, 115, 121, 55, 190, 90, 243, 141, 61, 83, 118, 133, 62, 128, 231, 43, 62, 62, 219, 180, 60, 5, 149, 78, 62, 102, 89, 163, 62, 247, 141, 41, 190, 200, 16, 5, 190, 139, 237, 178, 189, 72, 86, 150, 189, 100, 199, 29, 62, 158, 48, 204, 190, 227, 85, 93, 190, 16, 171, 163, 189, 151, 225, 46, 62, 95, 11, 208, 62, 103, 219, 168, 190, 242, 9, 29, 190, 62, 197, 67, 191, 151, 3, 140, 190, 136, 122, 60, 190, 41, 151, 33, 59, 115, 25, 33, 62, 140, 252, 109, 190, 98, 142, 254, 60, 174, 163, 9, 191, 180, 207, 63, 61, 59, 184, 240, 60, 252, 255, 213, 189, 42, 153, 246, 190, 71, 93, 81, 58, 213, 192, 67, 188, 210, 250, 19, 61, 144, 35, 1, 190, 180, 5, 35, 61, 60, 123, 223, 190, 196, 37, 174, 190, 154, 218, 69, 189, 92, 61, 232, 61, 2, 72, 17, 190, 40, 204, 170, 59, 162, 161, 153, 61, 50, 219, 206, 61, 115, 130, 90, 188, 5, 145, 249, 189, 47, 202, 214, 189, 173, 191, 37, 190, 21, 242, 215, 61, 57, 119, 6, 190, 44, 51, 220, 61, 91, 129, 33, 190, 152, 185, 134, 61, 120, 200, 72, 190, 60, 200, 42, 190, 1, 170, 60, 189, 186, 81, 30, 62, 8, 75, 80, 62, 180, 166, 129, 61, 164, 120, 218, 61, 178, 220, 242, 61, 255, 112, 126, 61, 27, 234, 162, 189, 53, 58, 209, 61, 235, 9, 180, 61, 93, 206, 1, 190, 179, 220, 236, 189, 254, 36, 104, 61, 102, 203, 28, 190, 100, 52, 172, 61, 13, 93, 253, 189, 69, 195, 224, 61, 3, 148, 251, 61, 206, 188, 64, 62, 163, 33, 206, 61, 228, 125, 5, 191, 188, 205, 24, 188, 112, 246, 196, 190, 95, 243, 98, 61, 236, 113, 54, 191, 91, 54, 135, 189, 71, 143, 39, 189, 83, 117, 26, 190, 236, 165, 79, 62, 169, 92, 226, 191, 193, 215, 224, 61, 236, 40, 159, 190, 145, 235, 72, 62, 138, 181, 164, 61, 3, 49, 131, 62, 107, 40, 97, 62, 52, 168, 81, 61, 57, 4, 207, 190, 5, 51, 203, 61, 19, 99, 141, 189, 19, 40, 69, 190, 135, 202, 100, 190, 209, 130, 126, 61, 227, 106, 117, 62, 79, 223, 170, 62, 46, 131, 129, 62, 225, 45, 117, 61, 11, 83, 97, 62, 8, 115, 210, 189, 75, 70, 176, 62, 221, 82, 222, 190, 88, 255, 57, 190, 13, 46, 172, 61, 227, 217, 88, 62, 130, 170, 1, 190, 244, 87, 43, 190, 47, 244, 129, 191, 21, 36, 19, 190, 167, 123, 237, 61, 190, 26, 153, 190, 143, 7, 148, 62, 145, 174, 238, 191, 56, 190, 32, 191, 216, 82, 77, 191, 67, 121, 242, 61, 155, 109, 141, 61, 78, 108, 153, 190, 221, 208, 55, 62, 206, 66, 120, 62, 241, 79, 51, 191, 99, 166, 93, 61, 0, 95, 197, 61, 22, 13, 167, 189, 156, 48, 170, 190, 0, 69, 47, 60, 250, 249, 139, 62, 218, 72, 240, 188, 97, 134, 243, 59, 237, 27, 164, 62, 179, 194, 194, 60, 134, 51, 125, 189, 222, 206, 242, 188, 222, 19, 67, 190, 228, 11, 5, 190, 157, 201, 43, 190, 190, 172, 138, 59, 218, 178, 40, 189, 78, 9, 151, 189, 75, 61, 146, 61, 72, 49, 60, 190, 108, 115, 156, 190, 24, 205, 111, 62, 64, 209, 208, 61, 62, 40, 9, 62, 164, 129, 98, 62, 134, 83, 44, 62, 35, 155, 153, 189, 33, 161, 29, 190, 190, 149, 193, 61, 186, 192, 85, 61, 21, 207, 56, 190, 8, 97, 151, 189, 80, 111, 48, 191, 45, 41, 24, 190, 128, 244, 22, 62, 5, 141, 242, 61, 242, 88, 76, 191, 246, 29, 64, 61, 186, 10, 6, 190, 219, 15, 82, 190, 6, 132, 158, 61, 241, 46, 31, 190, 120, 86, 180, 61, 172, 73, 202, 189, 90, 226, 66, 190, 213, 160, 199, 62, 22, 54, 192, 189, 227, 74, 219, 62, 255, 158, 89, 62, 95, 186, 167, 190, 252, 181, 113, 61, 222, 234, 175, 190, 102, 178, 166, 190, 206, 66, 129, 62, 14, 27, 156, 62, 12, 139, 212, 62, 158, 94, 187, 61, 87, 136, 9, 62, 173, 118, 130, 190, 215, 185, 32, 63, 129, 154, 188, 190, 22, 16, 164, 189, 78, 144, 12, 191, 100, 243, 125, 61, 98, 170, 71, 62, 60, 35, 31, 189, 254, 123, 188, 62, 255, 22, 135, 62, 224, 42, 154, 61, 244, 148, 195, 190, 233, 102, 93, 190, 142, 94, 208, 190, 216, 62, 18, 62, 13, 144, 185, 190, 174, 67, 135, 189, 30, 157, 70, 188, 216, 62, 250, 62, 238, 72, 179, 56, 48, 68, 165, 189, 55, 124, 65, 59, 0, 226, 4, 63, 198, 170, 213, 61, 175, 80, 2, 62, 182, 163, 10, 189, 163, 39, 146, 188, 7, 203, 177, 190, 231, 119, 15, 189, 183, 99, 158, 190, 150, 214, 36, 191, 58, 170, 216, 190, 82, 2, 71, 60, 117, 167, 79, 190, 216, 48, 112, 62, 1, 161, 136, 62, 228, 118, 98, 190, 119, 145, 255, 58, 42, 192, 145, 61, 197, 95, 252, 190, 147, 156, 46, 62, 93, 165, 149, 188, 132, 45, 137, 62, 127, 77, 230, 189, 149, 114, 210, 61, 158, 67, 178, 62, 18, 77, 112, 191, 203, 84, 139, 190, 253, 214, 36, 189, 53, 88, 57, 190, 119, 210, 65, 63, 123, 153, 227, 61, 203, 162, 245, 62, 198, 233, 180, 61, 137, 68, 147, 61, 144, 11, 85, 187, 97, 3, 89, 62, 31, 103, 163, 190, 131, 166, 84, 190, 226, 117, 6, 189, 221, 90, 19, 62, 199, 218, 82, 62, 95, 255, 192, 62, 6, 227, 212, 189, 23, 97, 26, 190, 136, 76, 187, 62, 200, 138, 16, 62, 107, 128, 30, 61, 87, 237, 103, 61, 165, 235, 223, 61, 157, 131, 42, 62, 66, 67, 184, 61, 8, 2, 28, 62, 252, 167, 38, 60, 70, 57, 53, 189, 194, 85, 56, 60, 204, 164, 30, 190, 2, 77, 43, 61, 201, 229, 178, 59, 48, 172, 149, 190, 92, 240, 94, 61, 149, 170, 130, 61, 222, 105, 47, 62, 44, 47, 10, 190, 175, 192, 22, 191, 62, 178, 168, 190, 254, 28, 18, 190, 111, 19, 87, 190, 77, 111, 12, 191, 21, 44, 253, 60, 40, 1, 10, 62, 79, 46, 53, 190, 88, 210, 152, 61, 75, 195, 244, 191, 150, 162, 26, 61, 66, 175, 250, 187, 182, 35, 20, 190, 240, 3, 198, 189, 181, 181, 154, 190, 188, 162, 84, 62, 38, 152, 175, 188, 121, 17, 201, 190, 102, 76, 136, 61, 79, 225, 102, 62, 71, 26, 104, 190, 44, 208, 115, 189, 199, 139, 199, 61, 151, 12, 44, 61, 207, 175, 9, 62, 53, 203, 103, 190, 44, 247, 127, 62, 58, 228, 65, 62, 179, 45, 13, 190, 249, 174, 42, 61, 248, 114, 139, 190, 142, 16, 217, 189, 28, 106, 94, 61, 188, 132, 196, 190, 223, 120, 178, 190, 251, 229, 39, 62, 116, 107, 122, 189, 6, 205, 116, 62, 104, 13, 81, 190, 85, 51, 243, 61, 228, 21, 198, 190, 248, 212, 120, 190, 48, 61, 9, 62, 107, 70, 224, 188, 181, 191, 129, 61, 118, 41, 251, 190, 51, 69, 235, 190, 199, 71, 62, 191, 202, 162, 13, 61, 82, 101, 156, 61, 102, 38, 230, 61, 240, 224, 54, 63, 12, 4, 181, 189, 44, 251, 28, 62, 8, 99, 191, 61, 184, 5, 54, 190, 59, 245, 12, 62, 174, 235, 117, 191, 33, 0, 155, 190, 235, 180, 60, 190, 211, 221, 150, 189, 150, 102, 28, 62, 38, 60, 156, 61, 68, 133, 246, 59, 235, 157, 249, 61, 164, 54, 31, 62, 74, 62, 79, 189, 145, 30, 2, 189, 223, 141, 88, 62, 31, 40, 202, 189, 201, 183, 32, 59, 188, 87, 10, 62, 208, 12, 130, 61, 17, 35, 158, 61, 100, 211, 225, 61, 41, 161, 33, 191, 77, 227, 174, 61, 17, 66, 113, 189, 128, 87, 220, 62, 120, 207, 146, 190, 254, 119, 25, 61, 67, 188, 92, 189, 248, 50, 173, 190, 15, 53, 36, 191, 18, 63, 18, 186, 161, 65, 222, 61, 245, 224, 206, 189, 199, 174, 36, 189, 137, 158, 243, 61, 1, 161, 131, 62, 40, 107, 47, 191, 35, 105, 68, 190, 23, 50, 21, 190, 56, 173, 128, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 60, 185, 135, 60, 206, 201, 185, 189, 39, 202, 10, 62, 210, 249, 132, 188, 173, 119, 44, 190, 128, 71, 167, 60, 65, 156, 145, 188, 196, 127, 222, 60, 79, 2, 1, 62, 18, 73, 56, 190, 57, 202, 32, 190, 133, 110, 31, 190, 48, 232, 6, 190, 191, 215, 152, 60, 95, 101, 27, 62, 240, 218, 65, 189, 142, 65, 154, 189, 128, 245, 242, 189, 114, 122, 37, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 214, 96, 142, 189, 51, 236, 134, 60, 79, 44, 58, 189, 141, 25, 166, 61, 168, 110, 47, 62, 160, 199, 10, 190, 144, 232, 42, 63, 152, 95, 85, 188, 57, 152, 15, 62, 8, 217, 14, 189, 180, 141, 77, 62, 197, 102, 47, 190, 66, 186, 224, 60, 127, 32, 145, 190, 5, 224, 205, 189, 68, 253, 251, 190, 138, 210, 57, 190, 95, 87, 11, 190, 18, 38, 156, 61, 165, 30, 103, 191, 132, 226, 137, 190, 229, 7, 21, 62, 170, 83, 21, 62, 206, 0, 139, 62, 127, 236, 11, 191, 1, 9, 132, 60, 192, 174, 181, 62, 23, 150, 179, 190, 59, 82, 181, 188, 191, 205, 37, 62, 37, 126, 112, 62, 163, 239, 10, 191, 168, 145, 187, 61, 71, 182, 108, 61, 91, 154, 51, 191, 22, 48, 189, 190, 253, 177, 149, 60, 101, 91, 198, 59, 85, 142, 198, 62, 1, 172, 90, 189, 104, 207, 56, 189, 235, 88, 146, 61, 103, 56, 10, 62, 1, 206, 55, 61, 16, 15, 227, 187, 3, 105, 214, 61, 184, 64, 232, 188, 229, 138, 158, 190, 243, 121, 237, 189, 239, 181, 58, 189, 106, 206, 164, 189, 146, 134, 235, 190, 109, 158, 166, 189, 177, 235, 152, 61, 29, 136, 198, 62, 12, 32, 6, 61, 57, 51, 189, 189, 5, 189, 196, 61, 75, 121, 106, 61, 85, 131, 54, 191, 220, 178, 133, 61, 20, 42, 133, 62, 159, 109, 135, 62, 68, 252, 46, 189, 153, 63, 224, 61, 52, 63, 1, 62, 17, 53, 141, 191, 215, 206, 158, 190, 127, 201, 193, 61, 118, 38, 178, 189, 126, 65, 0, 189, 101, 50, 27, 188, 146, 235, 31, 190, 121, 6, 214, 62, 3, 14, 173, 190, 22, 217, 140, 190, 194, 159, 34, 62, 239, 54, 4, 191, 173, 148, 214, 190, 75, 125, 33, 62, 219, 9, 169, 62, 67, 12, 165, 62, 42, 127, 170, 62, 16, 51, 200, 61, 222, 174, 203, 59, 143, 255, 232, 62, 160, 77, 40, 62, 163, 197, 222, 61, 127, 24, 201, 190, 234, 242, 44, 62, 161, 229, 87, 62, 115, 162, 79, 61, 64, 151, 129, 62, 25, 126, 1, 190, 105, 252, 252, 189, 12, 52, 39, 191, 106, 200, 142, 190, 187, 218, 230, 61, 129, 0, 203, 61, 81, 7, 236, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 52, 149, 190, 163, 142, 206, 61, 181, 126, 80, 62, 37, 81, 0, 62, 230, 200, 130, 60, 244, 89, 118, 190, 230, 52, 224, 61, 71, 195, 27, 62, 197, 124, 227, 61, 40, 193, 9, 62, 91, 224, 79, 62, 19, 250, 47, 190, 226, 70, 161, 61, 168, 25, 124, 61, 153, 78, 116, 61, 107, 208, 74, 62, 109, 122, 3, 62, 166, 67, 130, 190, 255, 87, 9, 190, 21, 197, 77, 62, 101, 69, 165, 189, 145, 229, 41, 189, 208, 71, 113, 62, 227, 9, 156, 61, 234, 93, 116, 62, 12, 163, 193, 58, 41, 194, 9, 190, 206, 32, 80, 190, 30, 94, 70, 60, 227, 53, 128, 62, 248, 122, 136, 61, 81, 202, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 226, 38, 190, 104, 158, 188, 61, 36, 128, 154, 190, 181, 90, 97, 190, 238, 134, 165, 62, 93, 146, 57, 190, 236, 125, 192, 62, 169, 139, 189, 190, 108, 110, 135, 62, 202, 192, 131, 62, 64, 184, 128, 191, 115, 123, 176, 190, 86, 96, 218, 190, 81, 218, 26, 63, 127, 120, 148, 191, 171, 252, 2, 191, 102, 61, 66, 191, 156, 149, 43, 63, 81, 45, 139, 61, 189, 173, 156, 190, 11, 18, 103, 191, 71, 77, 128, 190, 189, 204, 10, 63, 147, 58, 154, 190, 132, 144, 40, 62, 215, 114, 208, 190, 121, 118, 3, 63, 191, 64, 210, 190, 86, 98, 120, 61, 76, 228, 2, 191, 232, 13, 186, 190, 52, 17, 17, 63, 62, 3, 163, 61, 91, 61, 39, 190, 15, 32, 137, 190, 159, 12, 88, 188, 253, 71, 3, 189, 201, 182, 64, 62, 239, 5, 151, 62, 34, 79, 241, 187, 186, 146, 163, 190, 39, 190, 119, 188, 128, 11, 248, 62, 144, 253, 242, 62, 201, 22, 40, 62, 51, 112, 219, 189, 71, 206, 78, 62, 169, 94, 118, 189, 142, 54, 38, 190, 61, 183, 232, 62, 41, 155, 171, 189, 138, 59, 211, 190, 23, 182, 95, 62, 63, 87, 17, 62, 253, 152, 147, 62, 72, 122, 135, 62, 221, 233, 137, 190, 76, 26, 106, 190, 125, 244, 102, 62, 173, 235, 29, 190, 5, 31, 219, 61, 127, 203, 212, 190, 107, 115, 155, 60, 129, 58, 206, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 229, 64, 60, 222, 226, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 254, 88, 191, 76, 148, 101, 63, 110, 39, 232, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 169, 88, 190, 15, 148, 246, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}