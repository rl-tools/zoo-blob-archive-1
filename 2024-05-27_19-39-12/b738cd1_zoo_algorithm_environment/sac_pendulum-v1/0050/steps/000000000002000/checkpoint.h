// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 114, 118, 62, 213, 168, 41, 61, 158, 178, 0, 190, 86, 179, 134, 190, 12, 147, 132, 190, 56, 174, 53, 62, 96, 226, 129, 62, 66, 139, 110, 62, 133, 53, 227, 58, 57, 113, 166, 62, 126, 95, 183, 62, 13, 29, 35, 191, 162, 149, 240, 189, 104, 198, 136, 61, 162, 119, 9, 190, 162, 246, 3, 191, 124, 63, 138, 191, 39, 135, 37, 62, 130, 35, 200, 62, 119, 61, 229, 62, 217, 43, 152, 190, 248, 93, 152, 62, 152, 1, 116, 60, 191, 125, 237, 62, 254, 138, 217, 189, 255, 117, 79, 61, 224, 48, 162, 62, 131, 170, 220, 61, 5, 216, 201, 61, 40, 251, 86, 62, 230, 58, 199, 190, 57, 38, 109, 63, 58, 46, 163, 190, 215, 151, 136, 62, 161, 253, 0, 191, 128, 226, 241, 190, 31, 123, 174, 190, 38, 151, 93, 191, 1, 144, 2, 189, 56, 237, 15, 191, 200, 101, 13, 191, 127, 30, 249, 61, 6, 84, 39, 63, 184, 145, 190, 190, 203, 190, 212, 190, 253, 91, 107, 62, 139, 103, 127, 190, 68, 81, 167, 190, 170, 102, 68, 190, 111, 10, 120, 61, 140, 129, 84, 62, 45, 146, 214, 62, 95, 121, 238, 61, 102, 171, 189, 61, 90, 60, 131, 62, 82, 191, 62, 191, 180, 59, 68, 62, 206, 58, 192, 189, 229, 168, 158, 62, 57, 0, 143, 190, 76, 253, 231, 190, 132, 218, 58, 63, 117, 60, 8, 191, 88, 103, 246, 190, 60, 118, 194, 189, 46, 25, 34, 63, 4, 255, 75, 190, 29, 3, 9, 63, 176, 34, 70, 61, 63, 215, 228, 190, 168, 83, 18, 191, 232, 155, 146, 190, 14, 220, 215, 62, 112, 18, 214, 62, 136, 232, 244, 190, 55, 77, 215, 62, 248, 230, 18, 62, 95, 76, 18, 191, 99, 82, 210, 190, 231, 230, 81, 63, 84, 164, 10, 62, 84, 180, 136, 190, 86, 201, 156, 62, 113, 57, 198, 190, 37, 4, 225, 61, 227, 2, 238, 62, 110, 164, 253, 62, 249, 222, 11, 63, 132, 79, 126, 190, 97, 197, 48, 62, 239, 135, 63, 191, 14, 196, 20, 191, 239, 217, 122, 190, 88, 221, 14, 191, 192, 119, 36, 63, 144, 30, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 175, 19, 191, 232, 238, 210, 190, 43, 200, 171, 62, 113, 19, 218, 189, 85, 221, 187, 190, 52, 63, 57, 190, 65, 238, 110, 190, 104, 183, 186, 190, 26, 193, 117, 61, 98, 11, 161, 190, 63, 25, 70, 60, 96, 169, 103, 190, 196, 207, 13, 63, 48, 88, 221, 190, 222, 172, 172, 62, 34, 131, 186, 190, 170, 129, 170, 190, 61, 11, 28, 190, 158, 79, 176, 190, 111, 17, 31, 63, 63, 212, 214, 189, 225, 224, 99, 190, 148, 2, 45, 63, 49, 80, 22, 63, 97, 24, 218, 190, 17, 252, 203, 189, 32, 162, 228, 62, 15, 73, 247, 189, 217, 129, 146, 190, 80, 23, 165, 190, 111, 178, 137, 62, 210, 25, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 49, 221, 189, 4, 179, 190, 189, 206, 83, 26, 190, 250, 116, 184, 61, 161, 56, 78, 62, 69, 69, 98, 189, 229, 111, 12, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 85, 98, 58, 190, 26, 113, 203, 189, 103, 237, 129, 60, 112, 102, 2, 190, 86, 186, 194, 60, 33, 174, 243, 59, 20, 89, 251, 61, 169, 119, 193, 189, 139, 147, 202, 61, 125, 128, 189, 61, 40, 66, 41, 62, 175, 88, 115, 61, 37, 17, 198, 190, 179, 17, 135, 189, 145, 226, 55, 188, 226, 243, 1, 189, 157, 91, 194, 190, 42, 184, 138, 60, 4, 33, 207, 189, 3, 59, 147, 61, 179, 226, 1, 62, 60, 41, 20, 61, 45, 136, 0, 62, 104, 179, 2, 189, 156, 157, 115, 62, 217, 90, 79, 62, 214, 241, 16, 61, 126, 201, 68, 61, 163, 145, 85, 188, 239, 167, 13, 62, 128, 157, 251, 61, 67, 57, 49, 190, 177, 219, 235, 188, 195, 129, 236, 188, 124, 8, 206, 61, 108, 233, 85, 62, 138, 79, 98, 62, 218, 77, 10, 61, 58, 141, 58, 62, 214, 121, 156, 58, 85, 131, 56, 62, 156, 5, 38, 190, 77, 3, 15, 190, 244, 83, 97, 61, 3, 188, 213, 189, 100, 85, 48, 62, 12, 150, 9, 61, 97, 212, 231, 187, 171, 105, 220, 60, 11, 216, 9, 62, 179, 175, 34, 190, 215, 10, 241, 61, 88, 157, 195, 60, 204, 162, 216, 188, 236, 193, 215, 60, 180, 125, 141, 189, 3, 61, 38, 62, 188, 159, 210, 189, 49, 116, 31, 190, 40, 31, 46, 190, 219, 232, 226, 61, 239, 184, 153, 189, 214, 89, 145, 61, 103, 238, 249, 189, 96, 133, 3, 62, 208, 105, 187, 189, 7, 242, 6, 190, 239, 236, 26, 190, 84, 37, 114, 190, 195, 104, 0, 189, 189, 201, 57, 61, 155, 137, 99, 189, 110, 238, 31, 189, 137, 18, 255, 188, 121, 155, 193, 189, 2, 204, 251, 61, 86, 86, 248, 189, 223, 51, 75, 189, 177, 176, 42, 62, 220, 162, 35, 190, 123, 186, 2, 62, 178, 3, 13, 189, 148, 250, 104, 189, 61, 66, 26, 189, 251, 189, 105, 189, 188, 151, 102, 190, 93, 170, 233, 189, 192, 168, 159, 61, 210, 125, 0, 190, 57, 122, 134, 189, 9, 240, 173, 61, 23, 242, 105, 60, 148, 209, 40, 62, 237, 60, 109, 188, 251, 147, 63, 62, 121, 177, 143, 60, 99, 183, 35, 190, 148, 43, 43, 190, 109, 77, 150, 62, 204, 131, 31, 61, 5, 207, 247, 187, 54, 13, 235, 189, 148, 115, 245, 59, 186, 0, 93, 61, 124, 145, 122, 62, 151, 95, 6, 60, 109, 236, 49, 190, 58, 0, 29, 188, 61, 94, 46, 190, 143, 10, 99, 190, 43, 29, 165, 188, 35, 125, 40, 190, 100, 75, 216, 189, 192, 108, 197, 189, 103, 67, 161, 61, 92, 71, 79, 62, 255, 144, 194, 189, 237, 204, 3, 189, 74, 206, 170, 189, 18, 118, 209, 61, 200, 34, 20, 61, 122, 126, 72, 62, 17, 206, 73, 190, 59, 241, 176, 62, 150, 73, 88, 62, 91, 194, 142, 190, 131, 130, 47, 62, 1, 181, 5, 190, 198, 253, 14, 190, 241, 46, 74, 62, 79, 162, 41, 62, 27, 87, 69, 62, 6, 143, 152, 61, 76, 27, 113, 189, 54, 175, 130, 62, 157, 18, 167, 61, 27, 39, 77, 190, 134, 21, 25, 62, 198, 11, 37, 189, 101, 53, 45, 62, 120, 156, 33, 189, 103, 91, 176, 60, 119, 42, 190, 61, 246, 151, 92, 62, 42, 48, 8, 189, 227, 181, 8, 61, 249, 31, 50, 190, 145, 145, 58, 190, 74, 2, 5, 190, 130, 31, 248, 189, 107, 185, 21, 62, 9, 93, 255, 189, 232, 204, 145, 190, 58, 120, 150, 189, 169, 179, 161, 61, 36, 224, 57, 189, 117, 156, 35, 189, 16, 183, 66, 189, 231, 4, 15, 190, 190, 72, 162, 189, 96, 229, 9, 60, 70, 159, 0, 61, 97, 31, 246, 188, 2, 240, 235, 189, 171, 230, 33, 61, 246, 166, 138, 62, 208, 168, 242, 61, 2, 98, 228, 61, 227, 225, 201, 189, 175, 115, 165, 61, 128, 35, 142, 61, 202, 255, 222, 61, 210, 41, 148, 190, 128, 175, 20, 190, 80, 24, 232, 61, 56, 109, 247, 61, 43, 124, 85, 190, 240, 238, 133, 189, 249, 43, 85, 61, 192, 252, 16, 190, 7, 231, 197, 61, 5, 104, 191, 61, 213, 223, 50, 62, 119, 154, 3, 189, 176, 178, 27, 189, 220, 99, 248, 189, 0, 180, 159, 61, 135, 234, 48, 62, 171, 6, 65, 62, 154, 153, 62, 190, 224, 64, 112, 61, 179, 139, 94, 190, 118, 104, 112, 61, 13, 152, 53, 62, 26, 77, 150, 62, 47, 133, 172, 62, 228, 60, 50, 61, 49, 229, 9, 190, 219, 44, 20, 190, 95, 42, 153, 61, 48, 179, 74, 190, 69, 57, 58, 189, 81, 131, 37, 61, 125, 25, 128, 189, 161, 94, 196, 189, 239, 68, 40, 61, 91, 8, 159, 61, 127, 203, 197, 60, 136, 192, 233, 60, 91, 171, 13, 190, 102, 2, 12, 189, 17, 111, 128, 190, 33, 253, 200, 61, 169, 42, 71, 189, 197, 52, 151, 189, 92, 196, 244, 61, 240, 124, 52, 62, 151, 139, 234, 61, 59, 147, 255, 61, 245, 164, 116, 62, 38, 224, 12, 61, 160, 160, 128, 61, 56, 212, 235, 61, 98, 192, 88, 190, 196, 3, 49, 190, 138, 23, 17, 190, 224, 95, 23, 62, 248, 222, 28, 189, 210, 82, 102, 190, 12, 12, 25, 190, 210, 33, 28, 190, 75, 10, 244, 189, 228, 234, 119, 62, 58, 213, 143, 190, 213, 177, 116, 60, 175, 255, 135, 61, 139, 38, 168, 189, 204, 149, 255, 189, 233, 160, 166, 61, 21, 227, 192, 189, 26, 224, 195, 189, 105, 229, 30, 190, 220, 110, 57, 189, 195, 162, 190, 60, 104, 134, 172, 60, 239, 177, 163, 190, 201, 180, 127, 189, 164, 41, 132, 189, 150, 18, 128, 62, 182, 4, 88, 60, 223, 217, 6, 61, 113, 119, 90, 62, 33, 195, 207, 189, 72, 248, 240, 59, 214, 81, 50, 61, 154, 29, 167, 187, 75, 5, 33, 190, 83, 154, 74, 61, 50, 40, 82, 189, 146, 187, 8, 62, 108, 37, 129, 62, 99, 60, 127, 61, 80, 66, 160, 61, 92, 58, 138, 61, 135, 100, 89, 56, 99, 98, 66, 61, 194, 55, 183, 60, 103, 93, 110, 190, 35, 155, 224, 61, 169, 202, 67, 61, 99, 159, 5, 190, 95, 226, 76, 62, 152, 119, 93, 190, 144, 132, 46, 61, 235, 150, 19, 190, 60, 28, 220, 188, 116, 58, 186, 187, 243, 249, 127, 61, 134, 146, 240, 60, 89, 40, 18, 60, 20, 130, 94, 62, 153, 182, 4, 61, 25, 129, 132, 186, 36, 34, 170, 62, 25, 252, 131, 62, 255, 188, 216, 189, 91, 211, 219, 61, 238, 110, 128, 190, 24, 96, 132, 189, 41, 147, 153, 61, 221, 175, 229, 59, 64, 187, 204, 62, 57, 62, 160, 61, 236, 181, 178, 189, 29, 56, 151, 61, 25, 199, 122, 61, 219, 34, 253, 61, 0, 236, 183, 189, 239, 150, 2, 189, 202, 235, 168, 61, 236, 231, 0, 62, 108, 107, 108, 188, 191, 147, 32, 62, 65, 53, 27, 61, 145, 99, 57, 190, 141, 233, 8, 61, 114, 139, 229, 189, 123, 152, 63, 61, 168, 12, 190, 61, 93, 156, 92, 190, 164, 96, 76, 61, 20, 223, 59, 189, 206, 118, 190, 62, 203, 226, 37, 189, 1, 121, 169, 189, 71, 12, 28, 190, 195, 26, 211, 190, 32, 110, 194, 60, 34, 201, 63, 62, 230, 229, 230, 61, 68, 249, 80, 62, 94, 134, 106, 189, 169, 74, 200, 61, 38, 92, 187, 190, 203, 206, 195, 61, 15, 45, 34, 190, 190, 158, 44, 190, 225, 0, 246, 189, 57, 159, 223, 58, 32, 102, 58, 189, 190, 60, 74, 62, 79, 172, 53, 189, 84, 191, 26, 62, 81, 107, 193, 189, 38, 241, 172, 190, 68, 149, 121, 190, 80, 114, 8, 188, 180, 193, 210, 61, 197, 28, 12, 62, 20, 45, 6, 62, 127, 18, 92, 190, 237, 115, 213, 61, 120, 167, 168, 189, 122, 29, 182, 61, 219, 187, 189, 189, 140, 54, 228, 61, 172, 71, 43, 62, 185, 48, 190, 189, 163, 149, 63, 61, 251, 9, 166, 189, 254, 61, 189, 188, 41, 65, 28, 62, 245, 205, 235, 189, 118, 168, 69, 62, 104, 72, 186, 189, 155, 158, 169, 188, 174, 83, 33, 62, 176, 76, 247, 187, 244, 28, 240, 188, 144, 130, 218, 61, 109, 79, 96, 189, 178, 119, 206, 189, 166, 251, 20, 61, 150, 218, 104, 61, 193, 2, 64, 190, 110, 196, 240, 61, 23, 236, 82, 189, 139, 123, 237, 61, 242, 250, 148, 190, 193, 51, 130, 61, 116, 150, 129, 59, 243, 20, 174, 59, 116, 63, 145, 189, 23, 243, 233, 189, 144, 109, 243, 61, 114, 186, 158, 61, 57, 138, 92, 62, 47, 18, 126, 60, 244, 67, 197, 61, 41, 49, 75, 60, 143, 71, 146, 189, 200, 242, 74, 62, 107, 155, 42, 62, 81, 111, 8, 190, 176, 236, 30, 190, 28, 73, 59, 189, 101, 85, 213, 189, 191, 3, 150, 61, 87, 41, 84, 190, 107, 72, 204, 189, 229, 154, 125, 189, 155, 76, 146, 61, 198, 14, 52, 62, 84, 92, 13, 60, 96, 0, 85, 60, 190, 41, 249, 188, 44, 196, 67, 58, 80, 97, 38, 190, 2, 161, 61, 189, 44, 216, 241, 188, 163, 28, 184, 61, 32, 54, 113, 61, 209, 181, 202, 61, 211, 252, 103, 62, 92, 77, 50, 190, 25, 77, 25, 189, 128, 180, 158, 187, 135, 10, 197, 190, 25, 196, 160, 62, 115, 200, 40, 189, 210, 46, 125, 190, 65, 231, 163, 62, 200, 239, 234, 188, 133, 221, 24, 190, 148, 26, 67, 62, 238, 50, 93, 189, 102, 38, 174, 190, 239, 122, 113, 189, 238, 232, 5, 62, 111, 68, 23, 62, 224, 79, 196, 61, 53, 104, 9, 190, 120, 136, 186, 190, 124, 33, 12, 62, 187, 213, 179, 62, 167, 60, 169, 60, 159, 205, 186, 190, 162, 151, 5, 190, 6, 97, 9, 61, 81, 148, 96, 62, 156, 12, 191, 189, 86, 4, 14, 60, 154, 169, 159, 190, 229, 87, 47, 189, 175, 6, 35, 189, 75, 122, 23, 190, 168, 16, 13, 62, 249, 160, 122, 60, 175, 204, 160, 61, 73, 173, 47, 189, 67, 85, 143, 62, 62, 255, 168, 190, 113, 31, 83, 190, 101, 157, 27, 191, 216, 69, 127, 189, 19, 144, 156, 61, 147, 95, 94, 190, 236, 230, 12, 190, 151, 175, 137, 62, 173, 231, 25, 190, 174, 241, 2, 190, 49, 139, 13, 191, 159, 207, 146, 190, 188, 42, 173, 190, 65, 222, 8, 190, 46, 190, 8, 190, 51, 76, 194, 189, 231, 58, 141, 62, 138, 170, 195, 61, 212, 41, 99, 190, 166, 157, 211, 61, 167, 80, 128, 188, 17, 120, 138, 190, 70, 49, 214, 190, 247, 229, 156, 62, 127, 172, 23, 188, 122, 187, 8, 62, 172, 61, 78, 61, 238, 234, 82, 62, 156, 193, 154, 62, 161, 195, 153, 61, 30, 252, 135, 60, 76, 29, 238, 60, 4, 253, 14, 190, 84, 252, 41, 62, 188, 127, 218, 61, 182, 104, 255, 61, 227, 93, 255, 188, 21, 237, 53, 62, 191, 72, 18, 61, 54, 104, 174, 189, 159, 99, 154, 189, 17, 127, 19, 190, 239, 139, 82, 189, 197, 226, 24, 61, 29, 124, 191, 60, 135, 178, 11, 62, 127, 213, 27, 188, 16, 129, 249, 61, 228, 159, 136, 189, 117, 0, 45, 190, 159, 199, 49, 61, 9, 218, 229, 60, 180, 28, 178, 190, 11, 73, 15, 190, 89, 169, 6, 190, 233, 122, 1, 62, 148, 99, 236, 61, 200, 224, 223, 189, 143, 147, 154, 61, 216, 71, 122, 190, 1, 251, 224, 60, 59, 95, 1, 190, 192, 97, 28, 189, 74, 146, 159, 62, 132, 184, 150, 189, 111, 231, 56, 190, 9, 138, 29, 190, 104, 32, 52, 190, 186, 78, 238, 189, 219, 40, 149, 61, 19, 235, 31, 190, 176, 245, 110, 62, 75, 198, 104, 190, 133, 231, 23, 190, 181, 125, 124, 190, 83, 88, 242, 189, 219, 128, 113, 190, 82, 45, 198, 61, 251, 165, 94, 189, 47, 56, 251, 60, 249, 136, 17, 61, 159, 52, 156, 62, 90, 177, 153, 189, 81, 143, 107, 62, 20, 166, 96, 190, 244, 196, 141, 190, 157, 92, 60, 190, 223, 190, 100, 62, 66, 51, 41, 62, 33, 170, 204, 188, 12, 160, 82, 62, 219, 74, 28, 189, 66, 112, 158, 62, 247, 141, 41, 190, 87, 31, 142, 187, 158, 49, 191, 60, 72, 86, 150, 189, 100, 199, 29, 62, 160, 132, 68, 190, 143, 36, 55, 61, 157, 223, 192, 189, 56, 167, 85, 62, 195, 40, 144, 62, 201, 145, 119, 190, 242, 9, 29, 190, 106, 177, 145, 190, 206, 87, 34, 190, 143, 247, 40, 190, 41, 151, 33, 59, 161, 118, 236, 61, 32, 122, 183, 61, 230, 151, 85, 188, 221, 169, 134, 189, 180, 207, 63, 61, 151, 155, 167, 61, 12, 53, 143, 189, 134, 3, 70, 61, 71, 93, 81, 58, 213, 192, 67, 188, 143, 45, 231, 59, 144, 35, 1, 190, 203, 155, 242, 60, 147, 141, 205, 189, 81, 104, 74, 60, 41, 138, 53, 189, 92, 61, 232, 61, 176, 133, 6, 190, 99, 122, 56, 60, 214, 63, 170, 61, 171, 130, 211, 61, 77, 54, 27, 59, 109, 78, 222, 189, 255, 223, 187, 189, 136, 179, 25, 190, 249, 165, 246, 61, 36, 9, 246, 189, 204, 220, 236, 61, 103, 124, 26, 190, 178, 242, 184, 61, 0, 10, 68, 190, 72, 160, 35, 190, 137, 104, 26, 189, 127, 209, 35, 62, 18, 107, 83, 62, 12, 168, 142, 61, 0, 24, 240, 61, 214, 89, 4, 62, 131, 190, 133, 61, 102, 30, 154, 189, 237, 102, 239, 61, 55, 12, 199, 61, 9, 42, 253, 189, 250, 214, 218, 189, 146, 20, 132, 61, 99, 88, 22, 190, 27, 219, 179, 61, 214, 185, 233, 189, 202, 216, 251, 61, 188, 154, 31, 190, 75, 93, 90, 62, 80, 157, 61, 62, 66, 241, 187, 189, 69, 27, 68, 190, 24, 82, 138, 190, 170, 231, 12, 190, 7, 35, 42, 187, 15, 133, 65, 189, 243, 218, 172, 61, 219, 168, 15, 60, 79, 3, 134, 189, 194, 22, 154, 190, 180, 246, 29, 62, 147, 40, 239, 189, 64, 180, 96, 61, 74, 189, 151, 189, 18, 200, 120, 62, 135, 21, 105, 62, 135, 104, 156, 61, 238, 26, 36, 190, 206, 126, 54, 62, 244, 76, 45, 190, 237, 62, 2, 190, 45, 150, 37, 190, 88, 205, 111, 62, 89, 24, 60, 62, 244, 252, 21, 62, 74, 143, 189, 61, 255, 222, 64, 190, 10, 133, 113, 62, 197, 158, 205, 189, 143, 78, 18, 61, 51, 81, 122, 189, 64, 51, 218, 59, 193, 31, 132, 61, 222, 223, 6, 189, 153, 76, 180, 61, 213, 136, 211, 189, 74, 250, 9, 61, 42, 128, 18, 190, 174, 222, 186, 61, 132, 128, 24, 62, 5, 63, 177, 60, 128, 70, 152, 58, 8, 130, 4, 190, 250, 232, 245, 189, 97, 108, 255, 61, 37, 151, 2, 62, 125, 187, 34, 189, 233, 116, 24, 62, 189, 81, 65, 62, 214, 248, 118, 189, 177, 28, 40, 61, 160, 248, 213, 189, 203, 204, 197, 61, 221, 8, 238, 189, 160, 190, 141, 61, 23, 6, 37, 62, 41, 25, 18, 61, 212, 1, 255, 61, 32, 168, 146, 61, 96, 159, 130, 189, 77, 147, 120, 189, 239, 32, 239, 60, 1, 55, 39, 190, 255, 20, 155, 189, 246, 226, 93, 62, 13, 7, 224, 189, 215, 88, 161, 61, 96, 178, 132, 188, 122, 107, 208, 61, 0, 43, 190, 189, 132, 143, 242, 189, 18, 251, 1, 62, 107, 38, 117, 61, 38, 32, 178, 61, 210, 130, 213, 61, 84, 76, 31, 61, 113, 139, 148, 59, 214, 65, 19, 190, 36, 164, 3, 190, 10, 211, 192, 61, 244, 124, 172, 189, 249, 221, 90, 189, 34, 221, 178, 190, 222, 164, 39, 190, 36, 212, 88, 62, 244, 167, 247, 61, 108, 114, 190, 190, 96, 240, 169, 61, 116, 196, 98, 189, 56, 184, 135, 59, 207, 155, 161, 61, 252, 195, 48, 189, 120, 86, 180, 61, 189, 43, 146, 189, 224, 106, 134, 190, 88, 20, 198, 61, 106, 44, 116, 189, 88, 151, 223, 62, 158, 76, 97, 188, 109, 189, 112, 190, 100, 153, 19, 189, 204, 206, 30, 190, 249, 194, 169, 190, 40, 215, 201, 61, 46, 249, 141, 62, 118, 41, 165, 62, 72, 240, 200, 189, 203, 175, 143, 188, 139, 106, 20, 190, 29, 172, 37, 61, 94, 70, 175, 190, 9, 73, 24, 190, 149, 15, 155, 190, 238, 15, 169, 188, 186, 240, 132, 61, 235, 204, 81, 189, 166, 236, 251, 60, 184, 47, 222, 186, 86, 205, 37, 189, 219, 19, 16, 189, 49, 144, 130, 189, 237, 217, 149, 190, 117, 49, 81, 62, 131, 126, 21, 190, 174, 67, 135, 189, 48, 189, 137, 61, 13, 177, 248, 61, 7, 105, 27, 190, 191, 166, 103, 187, 83, 14, 143, 60, 240, 174, 0, 61, 141, 217, 61, 62, 7, 26, 29, 62, 184, 96, 133, 61, 113, 75, 145, 189, 156, 28, 247, 189, 110, 235, 152, 61, 23, 122, 53, 190, 189, 167, 51, 190, 160, 72, 39, 189, 102, 103, 239, 61, 95, 215, 107, 190, 175, 68, 157, 61, 253, 70, 101, 190, 108, 117, 93, 189, 24, 220, 176, 61, 63, 252, 146, 189, 112, 231, 56, 189, 191, 41, 235, 187, 221, 113, 127, 189, 157, 36, 141, 60, 151, 7, 102, 188, 86, 227, 21, 62, 211, 179, 143, 61, 166, 186, 160, 190, 30, 28, 70, 190, 46, 64, 74, 189, 201, 76, 134, 189, 217, 182, 10, 63, 196, 49, 137, 61, 124, 138, 15, 62, 79, 25, 49, 62, 135, 30, 216, 61, 3, 90, 96, 61, 1, 85, 110, 62, 117, 153, 108, 190, 183, 229, 73, 190, 135, 135, 129, 188, 114, 50, 0, 62, 183, 242, 136, 62, 156, 67, 81, 62, 85, 99, 6, 189, 113, 1, 215, 189, 186, 64, 15, 62, 22, 161, 89, 62, 207, 201, 176, 189, 68, 155, 141, 61, 236, 130, 201, 61, 194, 181, 122, 61, 86, 136, 195, 61, 47, 181, 37, 62, 229, 174, 164, 188, 18, 38, 6, 190, 65, 185, 68, 61, 228, 153, 194, 189, 250, 0, 12, 62, 91, 245, 193, 59, 78, 142, 143, 190, 205, 68, 141, 61, 78, 30, 160, 189, 174, 239, 143, 62, 170, 87, 115, 189, 100, 254, 84, 190, 61, 31, 187, 190, 109, 64, 136, 189, 6, 37, 179, 189, 177, 196, 207, 61, 97, 13, 160, 189, 115, 180, 123, 62, 40, 180, 117, 189, 164, 31, 37, 190, 173, 71, 100, 190, 60, 224, 33, 62, 52, 134, 154, 61, 110, 115, 210, 189, 114, 39, 49, 60, 28, 107, 166, 189, 150, 69, 85, 62, 177, 127, 164, 187, 201, 175, 38, 60, 158, 57, 214, 61, 147, 52, 130, 61, 108, 135, 61, 190, 172, 80, 203, 59, 38, 208, 60, 62, 163, 140, 244, 188, 56, 175, 246, 61, 181, 117, 152, 60, 26, 35, 140, 189, 204, 195, 63, 62, 179, 45, 13, 190, 247, 57, 66, 61, 135, 106, 203, 61, 160, 1, 204, 189, 28, 106, 94, 61, 22, 50, 108, 190, 217, 83, 23, 62, 175, 203, 20, 62, 33, 6, 133, 189, 40, 7, 23, 62, 250, 182, 26, 190, 237, 72, 247, 61, 254, 141, 21, 190, 169, 181, 120, 190, 20, 229, 8, 189, 234, 139, 222, 188, 180, 185, 9, 61, 216, 241, 195, 189, 53, 47, 64, 190, 171, 53, 32, 190, 77, 52, 13, 61, 100, 69, 138, 61, 80, 25, 21, 61, 215, 167, 178, 61, 181, 215, 167, 189, 182, 200, 35, 62, 155, 182, 145, 189, 184, 5, 54, 190, 81, 60, 21, 62, 143, 224, 82, 190, 152, 124, 76, 188, 167, 42, 58, 190, 211, 221, 150, 189, 62, 139, 121, 61, 59, 75, 35, 62, 68, 133, 246, 59, 235, 157, 249, 61, 204, 3, 164, 61, 74, 62, 79, 189, 200, 143, 168, 189, 220, 234, 101, 62, 33, 3, 157, 189, 201, 183, 32, 59, 243, 23, 16, 62, 14, 125, 47, 61, 5, 168, 24, 61, 67, 100, 7, 60, 27, 62, 202, 189, 113, 196, 115, 61, 106, 253, 195, 189, 156, 152, 117, 62, 254, 59, 77, 190, 254, 119, 25, 61, 155, 167, 164, 189, 173, 245, 224, 189, 141, 239, 227, 189, 18, 63, 18, 186, 161, 65, 222, 61, 95, 248, 191, 189, 199, 174, 36, 189, 228, 89, 179, 61, 86, 70, 72, 61, 41, 134, 149, 189, 35, 105, 68, 190, 23, 50, 21, 190, 56, 173, 128, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 60, 185, 135, 60, 206, 201, 185, 189, 39, 202, 10, 62, 210, 249, 132, 188, 173, 119, 44, 190, 128, 71, 167, 60, 65, 156, 145, 188, 196, 127, 222, 60, 79, 2, 1, 62, 18, 73, 56, 190, 57, 202, 32, 190, 133, 110, 31, 190, 48, 232, 6, 190, 191, 215, 152, 60, 95, 101, 27, 62, 240, 218, 65, 189, 142, 65, 154, 189, 128, 245, 242, 189, 114, 122, 37, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 214, 96, 142, 189, 51, 236, 134, 60, 79, 44, 58, 189, 141, 25, 166, 61, 168, 110, 47, 62, 152, 151, 13, 188, 46, 159, 156, 62, 152, 75, 73, 190, 57, 152, 15, 62, 112, 233, 66, 187, 79, 104, 8, 190, 172, 187, 143, 189, 17, 122, 106, 61, 46, 66, 253, 189, 174, 202, 46, 61, 54, 209, 166, 189, 193, 186, 40, 190, 122, 201, 8, 189, 28, 247, 199, 189, 92, 178, 29, 189, 108, 80, 184, 189, 252, 77, 4, 190, 192, 219, 59, 61, 31, 101, 225, 60, 81, 32, 227, 189, 8, 97, 169, 61, 76, 209, 35, 62, 187, 61, 168, 190, 14, 39, 79, 190, 113, 64, 182, 189, 13, 159, 137, 61, 131, 117, 126, 189, 22, 26, 44, 62, 251, 206, 78, 189, 203, 169, 101, 190, 133, 209, 151, 189, 181, 132, 233, 60, 227, 97, 7, 60, 62, 237, 23, 62, 39, 225, 30, 190, 172, 192, 16, 62, 56, 66, 130, 60, 120, 163, 114, 189, 218, 63, 102, 61, 119, 66, 167, 188, 254, 85, 45, 62, 54, 219, 25, 61, 49, 220, 240, 189, 121, 244, 244, 189, 76, 244, 169, 57, 101, 77, 9, 190, 218, 239, 198, 61, 155, 9, 203, 188, 184, 210, 113, 60, 21, 17, 13, 62, 252, 193, 138, 189, 82, 23, 53, 61, 0, 60, 164, 61, 38, 240, 215, 59, 142, 15, 22, 190, 183, 193, 141, 189, 244, 88, 6, 62, 148, 19, 60, 62, 55, 67, 179, 61, 220, 125, 190, 61, 95, 181, 184, 189, 130, 167, 216, 190, 18, 76, 70, 190, 127, 201, 193, 61, 175, 0, 176, 188, 200, 96, 84, 61, 151, 51, 84, 190, 134, 100, 33, 190, 198, 171, 232, 62, 103, 46, 157, 189, 211, 89, 122, 190, 230, 99, 164, 61, 124, 117, 225, 190, 37, 229, 132, 190, 53, 94, 8, 62, 239, 143, 138, 62, 80, 23, 132, 62, 193, 76, 130, 62, 49, 244, 120, 189, 177, 232, 138, 60, 224, 15, 104, 62, 50, 98, 11, 62, 198, 160, 31, 62, 43, 198, 207, 190, 82, 86, 163, 61, 143, 140, 27, 62, 12, 137, 9, 188, 171, 12, 210, 189, 225, 124, 33, 190, 88, 138, 69, 190, 210, 200, 54, 190, 100, 161, 90, 190, 224, 251, 138, 58, 153, 206, 189, 60, 85, 198, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 159, 93, 190, 12, 22, 161, 186, 30, 80, 175, 61, 227, 184, 35, 62, 123, 226, 135, 188, 38, 15, 146, 190, 240, 246, 231, 61, 68, 171, 207, 61, 76, 163, 2, 189, 109, 252, 249, 61, 164, 243, 93, 62, 50, 64, 82, 190, 98, 183, 130, 61, 53, 175, 122, 61, 51, 169, 140, 60, 60, 123, 94, 61, 142, 100, 136, 61, 140, 243, 136, 189, 182, 218, 2, 190, 218, 96, 21, 62, 110, 44, 26, 190, 22, 104, 44, 60, 68, 124, 18, 62, 75, 210, 183, 60, 169, 174, 220, 61, 61, 205, 204, 188, 151, 179, 190, 59, 160, 36, 238, 189, 30, 94, 70, 60, 51, 124, 127, 61, 60, 188, 138, 60, 145, 5, 200, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 230, 17, 190, 68, 140, 206, 61, 193, 235, 147, 189, 223, 105, 69, 190, 51, 37, 140, 62, 86, 209, 64, 190, 47, 10, 50, 62, 116, 40, 154, 190, 93, 47, 11, 62, 64, 212, 108, 62, 194, 183, 130, 190, 190, 193, 13, 190, 79, 169, 36, 190, 121, 154, 240, 62, 226, 184, 40, 191, 14, 198, 31, 190, 98, 184, 152, 190, 129, 67, 109, 62, 24, 233, 139, 61, 162, 25, 87, 190, 8, 66, 250, 188, 221, 162, 160, 189, 251, 87, 143, 62, 207, 141, 214, 189, 131, 66, 37, 62, 253, 47, 122, 190, 131, 87, 116, 61, 52, 184, 128, 189, 86, 98, 120, 61, 108, 76, 45, 190, 86, 146, 25, 190, 13, 14, 188, 62, 195, 33, 88, 61, 215, 73, 13, 190, 23, 156, 42, 189, 37, 158, 33, 190, 253, 75, 40, 190, 81, 203, 11, 62, 120, 211, 42, 62, 19, 139, 97, 190, 217, 126, 245, 189, 216, 54, 7, 190, 31, 190, 106, 190, 128, 127, 19, 62, 254, 202, 72, 189, 188, 171, 60, 190, 73, 2, 59, 62, 162, 216, 23, 61, 48, 188, 220, 189, 7, 173, 96, 62, 57, 230, 171, 189, 158, 25, 93, 190, 61, 185, 102, 189, 118, 236, 138, 61, 229, 225, 61, 62, 221, 186, 159, 59, 241, 145, 70, 190, 128, 202, 19, 190, 64, 138, 47, 62, 81, 190, 78, 190, 5, 31, 219, 61, 73, 196, 38, 188, 21, 88, 89, 61, 10, 116, 69, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 115, 45, 189, 91, 43, 76, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 56, 179, 191, 115, 0, 146, 63, 17, 44, 246, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 121, 84, 192, 136, 140, 107, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}