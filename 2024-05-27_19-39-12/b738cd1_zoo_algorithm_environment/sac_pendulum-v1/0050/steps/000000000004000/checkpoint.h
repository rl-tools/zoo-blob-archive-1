// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 98, 138, 62, 162, 45, 213, 60, 183, 50, 139, 189, 27, 172, 135, 190, 215, 33, 12, 191, 247, 185, 98, 62, 101, 185, 144, 62, 76, 132, 112, 62, 122, 223, 211, 188, 231, 140, 115, 61, 126, 103, 192, 62, 134, 162, 46, 191, 174, 207, 232, 189, 47, 123, 128, 189, 240, 190, 209, 189, 70, 54, 203, 190, 37, 171, 124, 191, 116, 21, 181, 62, 61, 112, 194, 60, 38, 150, 59, 63, 35, 246, 194, 190, 227, 54, 200, 61, 45, 7, 5, 62, 84, 173, 10, 63, 90, 118, 72, 190, 34, 242, 185, 62, 211, 105, 230, 62, 59, 129, 158, 61, 33, 175, 214, 62, 198, 187, 122, 62, 185, 196, 82, 190, 171, 139, 114, 63, 101, 233, 9, 191, 181, 85, 141, 62, 133, 112, 78, 191, 235, 39, 1, 191, 10, 251, 170, 190, 41, 25, 88, 191, 162, 0, 100, 61, 25, 31, 13, 191, 0, 214, 87, 190, 201, 229, 213, 62, 103, 47, 52, 63, 146, 45, 55, 191, 132, 169, 133, 190, 154, 36, 240, 61, 146, 120, 62, 191, 145, 110, 156, 190, 175, 190, 65, 189, 77, 130, 143, 62, 145, 114, 101, 62, 153, 78, 46, 63, 143, 167, 33, 190, 87, 241, 131, 61, 99, 81, 158, 62, 90, 115, 29, 191, 40, 170, 243, 61, 225, 16, 80, 188, 10, 123, 160, 62, 72, 227, 173, 190, 33, 238, 194, 190, 14, 119, 33, 63, 88, 99, 89, 191, 41, 167, 3, 191, 124, 32, 157, 61, 76, 109, 90, 63, 190, 99, 36, 190, 162, 186, 20, 63, 124, 212, 78, 189, 208, 61, 215, 190, 23, 153, 43, 191, 195, 145, 16, 190, 207, 208, 105, 189, 89, 245, 233, 62, 7, 44, 28, 191, 201, 166, 56, 62, 89, 143, 204, 61, 253, 56, 39, 191, 3, 48, 136, 190, 71, 111, 77, 63, 103, 156, 4, 61, 105, 129, 165, 190, 47, 101, 149, 189, 178, 187, 49, 191, 254, 163, 44, 62, 150, 57, 26, 63, 31, 64, 248, 62, 139, 208, 207, 62, 114, 200, 145, 189, 207, 77, 16, 62, 166, 239, 70, 191, 108, 104, 73, 191, 67, 225, 23, 190, 31, 7, 221, 190, 123, 110, 254, 62, 181, 244, 18, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 90, 31, 191, 208, 246, 193, 190, 106, 121, 211, 62, 137, 95, 4, 189, 102, 157, 236, 190, 193, 206, 139, 190, 62, 78, 233, 59, 122, 83, 165, 190, 78, 216, 166, 61, 149, 201, 210, 190, 64, 253, 129, 189, 158, 249, 110, 190, 105, 58, 26, 63, 183, 58, 241, 190, 14, 124, 151, 62, 2, 210, 133, 190, 84, 204, 214, 190, 190, 33, 163, 189, 158, 166, 14, 191, 190, 239, 36, 63, 244, 82, 24, 190, 54, 128, 64, 190, 123, 78, 49, 63, 75, 31, 44, 63, 199, 32, 49, 190, 28, 173, 120, 188, 125, 110, 246, 62, 60, 13, 82, 188, 145, 156, 216, 190, 154, 133, 28, 191, 27, 16, 134, 62, 78, 59, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 233, 189, 4, 179, 190, 189, 120, 156, 83, 190, 27, 254, 168, 61, 136, 180, 106, 62, 82, 206, 178, 189, 228, 38, 19, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 165, 52, 91, 190, 30, 123, 193, 189, 228, 59, 218, 188, 245, 109, 2, 190, 13, 109, 188, 60, 244, 223, 6, 61, 20, 89, 251, 61, 25, 205, 192, 189, 247, 14, 203, 61, 56, 218, 92, 61, 7, 169, 12, 62, 175, 88, 115, 61, 199, 129, 248, 190, 95, 217, 206, 189, 213, 247, 151, 187, 145, 187, 16, 189, 97, 154, 232, 190, 77, 139, 63, 188, 4, 33, 207, 189, 3, 59, 147, 61, 83, 29, 181, 61, 160, 128, 142, 59, 171, 225, 6, 62, 57, 7, 52, 190, 63, 219, 191, 62, 37, 108, 104, 62, 178, 90, 231, 189, 11, 189, 65, 189, 237, 235, 64, 189, 117, 46, 222, 61, 67, 44, 41, 62, 144, 164, 68, 190, 203, 79, 129, 189, 183, 85, 70, 188, 153, 167, 4, 62, 228, 6, 55, 62, 124, 19, 136, 62, 166, 63, 251, 58, 41, 131, 36, 62, 87, 66, 134, 62, 46, 145, 188, 61, 147, 206, 152, 189, 167, 123, 15, 190, 89, 152, 165, 61, 133, 160, 13, 61, 90, 39, 93, 62, 16, 94, 150, 59, 128, 46, 6, 60, 0, 29, 48, 62, 212, 178, 29, 62, 103, 102, 37, 190, 176, 52, 11, 62, 145, 10, 140, 61, 248, 230, 129, 188, 236, 193, 215, 60, 144, 219, 228, 189, 42, 112, 149, 62, 232, 243, 247, 61, 49, 116, 31, 190, 69, 222, 85, 190, 196, 254, 85, 62, 87, 28, 79, 189, 19, 118, 12, 62, 138, 83, 16, 190, 49, 35, 184, 60, 4, 129, 162, 189, 136, 154, 67, 190, 226, 133, 140, 189, 178, 49, 6, 190, 117, 167, 214, 189, 18, 153, 80, 61, 167, 27, 250, 61, 224, 98, 169, 189, 28, 156, 95, 189, 35, 185, 183, 190, 200, 214, 68, 62, 38, 238, 18, 189, 248, 164, 248, 190, 73, 151, 142, 62, 100, 39, 219, 61, 215, 2, 74, 62, 238, 140, 172, 189, 253, 45, 49, 59, 176, 131, 6, 59, 19, 102, 15, 191, 82, 75, 254, 190, 93, 170, 233, 189, 135, 43, 205, 61, 175, 205, 117, 190, 229, 223, 0, 190, 9, 240, 173, 61, 154, 170, 209, 61, 18, 242, 24, 62, 94, 119, 64, 189, 28, 12, 66, 62, 181, 227, 172, 188, 51, 240, 144, 190, 24, 82, 187, 189, 213, 206, 185, 62, 182, 11, 225, 61, 186, 237, 238, 189, 175, 189, 87, 189, 153, 170, 81, 188, 159, 194, 54, 190, 10, 56, 121, 62, 214, 87, 82, 190, 181, 77, 173, 190, 33, 25, 136, 57, 1, 7, 66, 190, 124, 204, 27, 190, 143, 116, 222, 188, 0, 47, 121, 190, 24, 102, 44, 190, 225, 86, 187, 190, 203, 47, 111, 61, 223, 55, 133, 62, 220, 45, 35, 60, 137, 205, 226, 190, 69, 169, 134, 189, 18, 25, 120, 60, 49, 14, 200, 188, 110, 43, 52, 62, 253, 64, 172, 190, 68, 223, 157, 62, 167, 174, 195, 61, 224, 225, 160, 190, 163, 32, 103, 62, 16, 125, 42, 190, 59, 215, 151, 190, 72, 213, 131, 62, 111, 104, 67, 62, 226, 251, 100, 62, 74, 229, 3, 62, 214, 182, 41, 189, 147, 139, 112, 62, 4, 253, 148, 62, 128, 147, 135, 190, 101, 162, 10, 62, 49, 213, 21, 190, 73, 249, 92, 62, 238, 158, 25, 189, 49, 179, 7, 61, 249, 117, 6, 61, 75, 57, 84, 62, 225, 243, 173, 188, 149, 5, 231, 188, 144, 190, 85, 190, 217, 75, 85, 190, 132, 183, 2, 190, 45, 52, 89, 190, 224, 3, 13, 62, 9, 93, 255, 189, 248, 186, 214, 190, 4, 127, 171, 189, 74, 31, 28, 62, 246, 134, 132, 189, 38, 231, 78, 189, 16, 183, 66, 189, 231, 4, 15, 190, 190, 72, 162, 189, 59, 226, 150, 188, 145, 210, 8, 61, 183, 75, 37, 189, 196, 236, 235, 189, 254, 131, 8, 60, 127, 184, 153, 62, 208, 168, 242, 61, 125, 244, 160, 186, 24, 114, 199, 189, 71, 238, 57, 61, 248, 117, 97, 61, 202, 255, 222, 61, 25, 218, 185, 190, 59, 77, 20, 190, 152, 136, 237, 61, 5, 182, 225, 61, 193, 72, 136, 190, 70, 9, 149, 189, 249, 43, 85, 61, 192, 252, 16, 190, 42, 103, 241, 61, 48, 78, 168, 61, 122, 251, 41, 62, 170, 77, 164, 189, 111, 136, 247, 187, 208, 95, 104, 189, 119, 212, 133, 188, 243, 59, 38, 62, 192, 151, 75, 62, 32, 71, 128, 190, 45, 84, 6, 62, 189, 61, 182, 190, 163, 107, 215, 188, 12, 135, 154, 62, 29, 61, 132, 62, 174, 116, 212, 62, 246, 25, 43, 62, 226, 105, 15, 189, 105, 59, 114, 190, 66, 42, 162, 62, 55, 120, 46, 190, 69, 78, 160, 189, 229, 107, 138, 189, 168, 204, 27, 58, 78, 150, 3, 190, 255, 55, 181, 188, 90, 126, 9, 62, 10, 58, 230, 61, 236, 202, 140, 60, 46, 216, 121, 190, 68, 93, 247, 189, 242, 239, 156, 190, 151, 90, 94, 187, 19, 131, 25, 190, 197, 52, 151, 189, 24, 69, 27, 62, 56, 85, 217, 60, 52, 164, 91, 62, 42, 127, 255, 61, 218, 17, 168, 62, 82, 108, 82, 189, 41, 112, 74, 61, 59, 228, 0, 62, 164, 118, 99, 190, 247, 171, 137, 190, 184, 158, 214, 61, 55, 225, 101, 62, 195, 93, 6, 61, 174, 120, 72, 190, 93, 68, 176, 60, 141, 4, 29, 190, 3, 181, 251, 190, 79, 18, 130, 62, 103, 196, 6, 191, 130, 151, 113, 190, 237, 41, 176, 61, 87, 108, 228, 189, 171, 185, 122, 189, 29, 51, 74, 187, 36, 0, 51, 61, 0, 173, 40, 190, 131, 223, 128, 190, 225, 67, 60, 189, 139, 94, 172, 61, 148, 251, 181, 61, 101, 213, 74, 191, 63, 193, 94, 189, 149, 219, 33, 190, 247, 178, 123, 62, 61, 220, 200, 60, 92, 131, 228, 189, 64, 142, 15, 62, 54, 195, 55, 190, 220, 86, 35, 62, 248, 38, 159, 61, 229, 71, 197, 188, 166, 107, 70, 190, 164, 53, 196, 61, 131, 5, 132, 188, 197, 245, 129, 60, 97, 93, 162, 62, 245, 179, 110, 61, 60, 181, 167, 188, 36, 181, 150, 62, 142, 208, 14, 62, 221, 76, 93, 61, 136, 184, 31, 61, 106, 162, 103, 190, 27, 127, 12, 61, 189, 93, 92, 61, 212, 54, 45, 190, 150, 192, 91, 62, 50, 186, 221, 190, 175, 228, 171, 61, 231, 117, 10, 190, 29, 1, 147, 62, 66, 84, 200, 188, 251, 183, 156, 61, 245, 43, 60, 61, 19, 16, 157, 189, 230, 161, 3, 62, 144, 117, 131, 61, 197, 112, 212, 189, 81, 126, 147, 62, 185, 218, 69, 62, 178, 162, 30, 190, 27, 230, 22, 62, 52, 62, 157, 190, 143, 39, 66, 190, 140, 61, 57, 62, 204, 148, 137, 60, 161, 67, 220, 62, 178, 240, 46, 62, 49, 253, 240, 188, 245, 99, 43, 61, 44, 92, 93, 62, 23, 37, 143, 61, 213, 68, 189, 189, 132, 18, 213, 189, 254, 36, 247, 61, 131, 231, 208, 61, 198, 179, 187, 187, 187, 68, 31, 62, 165, 113, 172, 61, 10, 104, 73, 190, 176, 29, 25, 59, 100, 99, 44, 190, 179, 122, 22, 60, 194, 123, 178, 61, 255, 244, 140, 190, 164, 96, 76, 61, 22, 250, 65, 189, 113, 80, 111, 62, 38, 98, 111, 190, 162, 223, 194, 189, 20, 78, 98, 190, 175, 176, 100, 191, 6, 166, 149, 61, 213, 222, 18, 61, 17, 59, 248, 61, 196, 212, 110, 61, 120, 63, 135, 190, 112, 208, 58, 62, 209, 35, 69, 191, 97, 116, 151, 189, 5, 212, 214, 190, 131, 242, 18, 190, 2, 204, 210, 189, 35, 212, 74, 189, 123, 215, 66, 189, 204, 201, 141, 62, 51, 177, 61, 190, 28, 198, 169, 61, 34, 48, 82, 188, 127, 207, 33, 191, 72, 175, 221, 190, 14, 161, 255, 189, 99, 155, 176, 62, 66, 104, 70, 62, 233, 28, 210, 61, 117, 235, 168, 189, 150, 200, 24, 62, 196, 132, 165, 189, 188, 36, 181, 61, 121, 37, 132, 189, 152, 240, 190, 61, 82, 198, 72, 62, 152, 130, 239, 189, 92, 141, 89, 60, 18, 150, 170, 189, 162, 160, 195, 188, 41, 65, 28, 62, 164, 60, 61, 190, 199, 4, 90, 62, 236, 50, 196, 189, 35, 41, 176, 188, 103, 102, 73, 62, 113, 168, 15, 61, 244, 28, 240, 188, 15, 215, 150, 62, 23, 10, 172, 189, 191, 20, 6, 190, 101, 156, 238, 188, 150, 218, 104, 61, 91, 149, 146, 190, 83, 153, 201, 61, 121, 245, 158, 189, 199, 156, 228, 61, 156, 70, 192, 190, 236, 177, 100, 60, 116, 150, 129, 59, 159, 13, 199, 188, 21, 220, 225, 189, 116, 225, 60, 190, 144, 109, 243, 61, 130, 71, 160, 188, 197, 138, 138, 62, 244, 129, 49, 61, 244, 67, 197, 61, 91, 245, 180, 189, 167, 205, 24, 190, 216, 220, 27, 62, 217, 110, 34, 62, 37, 5, 43, 190, 154, 183, 159, 190, 72, 182, 59, 189, 220, 169, 102, 190, 118, 248, 216, 60, 143, 185, 138, 190, 107, 72, 204, 189, 126, 192, 155, 189, 170, 143, 96, 61, 143, 43, 25, 62, 78, 15, 86, 61, 241, 224, 16, 190, 247, 98, 53, 189, 172, 67, 93, 61, 132, 152, 219, 190, 18, 246, 1, 189, 221, 153, 38, 61, 66, 205, 7, 62, 195, 106, 22, 61, 232, 208, 195, 61, 139, 73, 180, 62, 132, 127, 209, 190, 83, 72, 55, 190, 128, 180, 158, 187, 2, 151, 11, 191, 27, 48, 154, 62, 168, 181, 4, 190, 192, 142, 134, 190, 56, 208, 129, 62, 218, 146, 152, 190, 151, 229, 96, 190, 145, 159, 178, 62, 222, 143, 46, 190, 170, 211, 12, 191, 234, 231, 51, 190, 21, 95, 178, 61, 137, 3, 74, 62, 46, 65, 228, 60, 84, 75, 159, 190, 231, 251, 205, 190, 34, 244, 152, 62, 170, 163, 176, 62, 32, 163, 45, 188, 219, 135, 68, 191, 123, 151, 145, 60, 43, 202, 10, 62, 24, 194, 18, 62, 141, 119, 109, 190, 13, 10, 244, 189, 216, 196, 244, 189, 228, 203, 239, 190, 150, 201, 187, 189, 15, 226, 179, 189, 120, 40, 122, 61, 151, 74, 85, 190, 43, 200, 160, 61, 172, 153, 234, 189, 174, 118, 197, 62, 164, 163, 174, 190, 173, 135, 243, 189, 27, 52, 67, 191, 241, 238, 45, 189, 45, 251, 79, 62, 51, 86, 2, 191, 162, 40, 26, 61, 71, 68, 158, 62, 0, 252, 113, 190, 112, 194, 165, 189, 61, 188, 183, 191, 130, 148, 99, 190, 193, 225, 197, 190, 145, 74, 32, 61, 7, 163, 221, 61, 194, 128, 243, 189, 166, 40, 179, 62, 215, 109, 52, 62, 97, 96, 20, 191, 158, 20, 229, 61, 179, 19, 13, 61, 14, 249, 97, 190, 229, 57, 206, 190, 195, 40, 136, 62, 204, 19, 215, 61, 235, 242, 139, 62, 65, 174, 50, 60, 86, 218, 144, 62, 251, 226, 181, 62, 161, 195, 153, 61, 85, 235, 81, 189, 40, 137, 32, 62, 71, 7, 163, 61, 84, 252, 41, 62, 111, 88, 77, 61, 136, 24, 78, 62, 99, 232, 65, 189, 227, 12, 79, 62, 30, 241, 194, 60, 61, 73, 22, 190, 241, 100, 238, 188, 84, 78, 99, 190, 50, 34, 155, 189, 25, 21, 47, 188, 211, 203, 147, 60, 4, 195, 9, 62, 183, 208, 136, 59, 62, 86, 41, 62, 184, 80, 219, 61, 142, 66, 3, 191, 70, 161, 108, 61, 224, 161, 4, 62, 39, 39, 52, 191, 134, 39, 56, 59, 10, 71, 237, 61, 136, 67, 89, 62, 115, 166, 186, 61, 68, 72, 177, 189, 234, 188, 128, 62, 212, 232, 37, 191, 33, 84, 123, 190, 172, 125, 1, 190, 241, 181, 28, 189, 170, 63, 186, 62, 65, 29, 19, 190, 5, 205, 147, 190, 60, 149, 62, 190, 124, 249, 139, 190, 129, 189, 49, 189, 148, 142, 8, 190, 47, 226, 128, 189, 156, 90, 45, 62, 92, 135, 172, 190, 93, 165, 14, 189, 19, 193, 101, 191, 201, 160, 128, 189, 163, 231, 206, 190, 152, 250, 42, 62, 45, 121, 48, 62, 143, 177, 115, 60, 36, 30, 139, 61, 191, 60, 153, 62, 71, 121, 144, 190, 48, 84, 82, 62, 118, 178, 35, 190, 59, 52, 184, 190, 183, 168, 111, 190, 230, 73, 14, 62, 22, 139, 86, 62, 201, 247, 77, 61, 209, 198, 66, 62, 179, 175, 73, 61, 19, 26, 144, 62, 247, 141, 41, 190, 71, 35, 140, 187, 254, 190, 171, 59, 72, 86, 150, 189, 100, 199, 29, 62, 167, 13, 136, 190, 164, 165, 79, 189, 17, 111, 152, 59, 33, 9, 102, 62, 234, 250, 228, 62, 224, 88, 175, 190, 242, 9, 29, 190, 103, 214, 19, 191, 47, 101, 84, 190, 214, 125, 125, 190, 41, 151, 33, 59, 23, 42, 84, 62, 134, 228, 203, 188, 21, 222, 16, 189, 87, 24, 194, 190, 180, 207, 63, 61, 116, 234, 197, 61, 181, 139, 8, 190, 32, 90, 203, 190, 71, 93, 81, 58, 213, 192, 67, 188, 66, 20, 56, 188, 144, 35, 1, 190, 88, 67, 222, 61, 235, 202, 68, 190, 94, 59, 166, 190, 154, 218, 69, 189, 92, 61, 232, 61, 250, 169, 13, 190, 190, 33, 15, 60, 162, 161, 153, 61, 50, 219, 206, 61, 49, 248, 203, 187, 5, 145, 249, 189, 161, 11, 197, 189, 146, 100, 29, 190, 195, 66, 231, 61, 57, 119, 6, 190, 44, 51, 220, 61, 82, 116, 30, 190, 81, 42, 155, 61, 120, 200, 72, 190, 60, 200, 42, 190, 98, 7, 41, 189, 221, 94, 35, 62, 193, 148, 81, 62, 180, 166, 129, 61, 164, 120, 218, 61, 123, 132, 0, 62, 10, 226, 130, 61, 27, 234, 162, 189, 53, 58, 209, 61, 235, 9, 180, 61, 45, 41, 255, 189, 179, 220, 236, 189, 228, 234, 125, 61, 72, 30, 27, 190, 100, 52, 172, 61, 13, 93, 253, 189, 3, 73, 227, 61, 252, 176, 19, 190, 163, 166, 45, 62, 64, 82, 10, 62, 222, 191, 232, 188, 168, 56, 123, 190, 85, 224, 162, 190, 88, 173, 50, 190, 58, 214, 117, 190, 202, 38, 236, 189, 210, 176, 1, 61, 10, 217, 197, 189, 134, 163, 181, 60, 194, 243, 94, 191, 129, 216, 237, 61, 19, 232, 77, 190, 120, 29, 86, 61, 255, 229, 153, 61, 99, 14, 91, 62, 46, 139, 107, 62, 171, 215, 144, 61, 155, 68, 189, 190, 219, 86, 13, 62, 183, 89, 247, 189, 146, 19, 35, 190, 109, 138, 83, 190, 224, 168, 18, 62, 253, 26, 91, 62, 228, 169, 242, 61, 80, 112, 14, 60, 79, 77, 172, 189, 153, 73, 100, 62, 8, 115, 210, 189, 5, 80, 88, 62, 41, 190, 121, 190, 180, 169, 76, 190, 205, 79, 66, 61, 224, 184, 153, 61, 246, 184, 46, 190, 79, 165, 197, 189, 183, 174, 154, 190, 21, 36, 19, 190, 235, 164, 238, 188, 242, 49, 74, 189, 99, 161, 125, 62, 214, 67, 52, 191, 235, 251, 126, 190, 206, 77, 187, 190, 85, 254, 1, 62, 25, 105, 100, 62, 92, 68, 24, 61, 62, 112, 8, 62, 174, 57, 19, 62, 29, 144, 193, 190, 93, 118, 105, 60, 28, 55, 249, 60, 90, 115, 249, 189, 72, 44, 166, 190, 182, 132, 10, 188, 1, 172, 45, 62, 181, 91, 216, 60, 86, 2, 255, 61, 101, 178, 107, 62, 226, 205, 199, 189, 134, 51, 125, 189, 114, 159, 198, 61, 28, 158, 5, 190, 66, 235, 186, 189, 111, 177, 112, 62, 119, 90, 217, 61, 59, 129, 138, 61, 29, 174, 182, 188, 17, 23, 235, 61, 87, 130, 3, 190, 217, 167, 58, 190, 42, 245, 37, 62, 58, 45, 254, 61, 242, 100, 59, 62, 221, 220, 56, 62, 32, 26, 161, 61, 74, 240, 122, 188, 239, 127, 183, 189, 106, 179, 20, 189, 167, 96, 130, 61, 39, 84, 33, 190, 141, 197, 149, 188, 134, 26, 246, 190, 211, 227, 252, 189, 162, 39, 72, 62, 42, 51, 255, 61, 35, 3, 34, 191, 250, 253, 105, 60, 159, 165, 171, 189, 54, 174, 154, 188, 104, 153, 203, 61, 216, 250, 250, 189, 120, 86, 180, 61, 165, 218, 42, 190, 155, 142, 73, 190, 211, 164, 165, 62, 121, 70, 149, 188, 54, 202, 217, 62, 123, 116, 170, 61, 72, 88, 178, 190, 175, 139, 191, 60, 192, 251, 171, 190, 83, 31, 251, 190, 183, 231, 183, 62, 114, 178, 149, 62, 42, 210, 182, 62, 139, 25, 12, 62, 14, 36, 98, 62, 119, 187, 139, 190, 79, 223, 3, 63, 136, 215, 174, 190, 30, 131, 244, 189, 105, 170, 8, 191, 188, 149, 203, 60, 168, 150, 170, 61, 130, 203, 120, 189, 196, 62, 146, 62, 209, 102, 136, 62, 191, 168, 71, 187, 114, 189, 108, 190, 132, 250, 77, 190, 50, 104, 176, 190, 123, 39, 55, 62, 177, 252, 147, 190, 174, 67, 135, 189, 82, 87, 192, 188, 2, 165, 107, 62, 196, 176, 29, 190, 191, 166, 103, 187, 188, 156, 122, 189, 44, 182, 239, 189, 109, 9, 1, 62, 161, 3, 6, 62, 10, 98, 246, 59, 157, 32, 15, 190, 74, 118, 8, 190, 41, 69, 251, 188, 124, 24, 97, 190, 64, 169, 180, 190, 160, 72, 39, 189, 48, 132, 148, 61, 49, 90, 148, 190, 172, 93, 138, 61, 119, 40, 246, 189, 249, 194, 28, 190, 115, 133, 66, 61, 37, 48, 179, 188, 230, 64, 153, 190, 141, 78, 6, 188, 85, 202, 126, 189, 166, 18, 37, 61, 246, 56, 102, 188, 163, 31, 247, 61, 67, 88, 64, 62, 202, 36, 10, 191, 215, 92, 123, 190, 34, 39, 34, 189, 62, 130, 82, 190, 242, 205, 44, 63, 229, 185, 199, 61, 134, 56, 253, 187, 190, 99, 168, 61, 33, 182, 170, 61, 35, 78, 228, 60, 163, 170, 148, 62, 191, 87, 120, 190, 95, 58, 114, 190, 142, 11, 93, 60, 1, 229, 26, 62, 16, 200, 127, 62, 95, 59, 132, 62, 139, 82, 98, 189, 238, 180, 235, 189, 157, 27, 197, 62, 11, 24, 235, 61, 69, 150, 71, 59, 239, 191, 129, 61, 72, 2, 14, 62, 22, 132, 85, 62, 65, 94, 13, 62, 215, 193, 14, 62, 209, 142, 242, 58, 150, 16, 234, 60, 53, 152, 126, 61, 116, 234, 178, 189, 245, 191, 21, 62, 39, 72, 66, 61, 122, 129, 140, 190, 92, 240, 94, 61, 133, 221, 169, 189, 254, 142, 117, 62, 40, 238, 225, 189, 22, 9, 3, 190, 201, 58, 218, 190, 157, 110, 225, 189, 221, 75, 234, 189, 50, 113, 4, 190, 10, 27, 5, 190, 74, 159, 75, 62, 96, 230, 29, 190, 0, 8, 154, 189, 231, 132, 84, 191, 117, 171, 244, 61, 188, 60, 134, 60, 128, 155, 213, 189, 65, 232, 18, 62, 128, 207, 220, 189, 114, 222, 89, 62, 148, 221, 0, 188, 215, 239, 76, 190, 94, 159, 132, 61, 135, 79, 233, 61, 76, 102, 87, 190, 254, 113, 26, 189, 162, 69, 203, 61, 134, 255, 4, 59, 247, 37, 216, 61, 12, 123, 135, 189, 251, 171, 9, 61, 89, 60, 55, 62, 179, 45, 13, 190, 216, 79, 136, 61, 30, 255, 50, 61, 142, 16, 217, 189, 28, 106, 94, 61, 187, 25, 145, 190, 27, 155, 160, 61, 50, 140, 116, 62, 188, 69, 77, 189, 31, 116, 160, 62, 212, 249, 77, 190, 85, 51, 243, 61, 98, 103, 208, 190, 198, 62, 150, 190, 41, 201, 7, 190, 107, 70, 224, 188, 92, 172, 8, 62, 134, 212, 145, 190, 53, 40, 85, 190, 245, 69, 192, 190, 202, 162, 13, 61, 1, 114, 172, 61, 242, 207, 180, 188, 175, 61, 76, 189, 12, 4, 181, 189, 44, 251, 28, 62, 44, 83, 172, 189, 184, 5, 54, 190, 252, 202, 97, 62, 92, 50, 168, 190, 152, 125, 195, 189, 235, 180, 60, 190, 211, 221, 150, 189, 230, 96, 129, 61, 255, 62, 189, 59, 68, 133, 246, 59, 235, 157, 249, 61, 253, 120, 112, 61, 74, 62, 79, 189, 69, 156, 131, 189, 28, 165, 90, 62, 233, 246, 182, 188, 201, 183, 32, 59, 23, 18, 16, 62, 1, 166, 61, 189, 78, 44, 47, 61, 179, 123, 133, 189, 27, 62, 202, 189, 77, 20, 221, 61, 134, 173, 26, 190, 88, 85, 140, 62, 212, 85, 77, 190, 254, 119, 25, 61, 107, 170, 178, 189, 223, 47, 106, 190, 5, 77, 153, 190, 18, 63, 18, 186, 161, 65, 222, 61, 81, 79, 74, 190, 199, 174, 36, 189, 91, 6, 233, 61, 246, 222, 80, 62, 94, 142, 64, 190, 35, 105, 68, 190, 23, 50, 21, 190, 56, 173, 128, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 60, 185, 135, 60, 206, 201, 185, 189, 39, 202, 10, 62, 210, 249, 132, 188, 173, 119, 44, 190, 128, 71, 167, 60, 65, 156, 145, 188, 196, 127, 222, 60, 79, 2, 1, 62, 18, 73, 56, 190, 57, 202, 32, 190, 133, 110, 31, 190, 48, 232, 6, 190, 191, 215, 152, 60, 95, 101, 27, 62, 240, 218, 65, 189, 142, 65, 154, 189, 128, 245, 242, 189, 114, 122, 37, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 214, 96, 142, 189, 51, 236, 134, 60, 79, 44, 58, 189, 141, 25, 166, 61, 168, 110, 47, 62, 67, 247, 145, 189, 89, 55, 222, 62, 16, 62, 160, 60, 57, 152, 15, 62, 216, 196, 82, 189, 183, 52, 27, 189, 160, 133, 157, 189, 212, 100, 167, 61, 19, 19, 28, 190, 28, 47, 136, 189, 59, 208, 142, 61, 59, 19, 98, 190, 254, 152, 119, 189, 29, 195, 237, 188, 18, 50, 250, 187, 148, 80, 218, 189, 232, 213, 215, 60, 246, 200, 137, 61, 212, 213, 143, 61, 98, 116, 173, 190, 108, 98, 218, 61, 84, 173, 91, 62, 112, 132, 35, 191, 123, 43, 214, 60, 71, 2, 79, 62, 159, 254, 210, 61, 64, 190, 246, 189, 110, 172, 67, 62, 126, 228, 175, 61, 196, 2, 17, 191, 121, 162, 147, 190, 1, 109, 153, 60, 41, 123, 141, 189, 105, 132, 161, 62, 147, 187, 1, 189, 71, 105, 182, 61, 128, 210, 83, 189, 176, 68, 123, 61, 96, 140, 240, 60, 17, 181, 6, 188, 115, 255, 26, 62, 98, 81, 36, 188, 38, 114, 32, 190, 109, 69, 89, 190, 81, 249, 12, 189, 18, 50, 99, 189, 37, 237, 172, 188, 1, 35, 11, 189, 33, 35, 26, 61, 12, 43, 30, 62, 47, 28, 31, 61, 249, 127, 149, 189, 103, 156, 176, 61, 34, 124, 205, 61, 154, 113, 6, 191, 79, 159, 151, 61, 85, 181, 148, 62, 26, 122, 132, 62, 198, 240, 0, 188, 197, 86, 217, 61, 7, 90, 135, 61, 48, 26, 79, 191, 3, 139, 179, 190, 127, 201, 193, 61, 77, 245, 11, 190, 133, 123, 63, 61, 201, 199, 134, 190, 146, 235, 31, 190, 38, 105, 214, 62, 9, 150, 174, 190, 66, 229, 177, 190, 233, 216, 246, 61, 110, 89, 22, 191, 101, 221, 230, 190, 138, 102, 166, 61, 149, 218, 136, 62, 86, 132, 141, 62, 230, 70, 92, 62, 175, 150, 16, 190, 84, 220, 180, 189, 105, 2, 208, 62, 242, 194, 210, 61, 169, 189, 37, 62, 16, 4, 79, 191, 188, 98, 224, 61, 167, 55, 97, 62, 196, 70, 29, 189, 175, 181, 57, 190, 46, 111, 114, 190, 13, 61, 165, 189, 229, 225, 12, 191, 91, 18, 168, 190, 170, 66, 47, 189, 175, 160, 166, 187, 124, 231, 215, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 182, 143, 190, 242, 217, 196, 61, 18, 97, 53, 62, 64, 62, 22, 62, 29, 92, 179, 187, 38, 210, 175, 190, 138, 30, 197, 61, 16, 148, 199, 61, 187, 32, 197, 188, 93, 213, 224, 61, 24, 209, 65, 62, 204, 230, 94, 190, 179, 202, 65, 61, 159, 221, 163, 61, 236, 70, 132, 61, 221, 140, 194, 61, 29, 225, 231, 61, 16, 40, 67, 190, 254, 93, 5, 190, 29, 70, 24, 62, 9, 12, 200, 189, 219, 233, 214, 60, 226, 69, 56, 62, 169, 192, 195, 59, 84, 60, 83, 62, 153, 122, 177, 188, 123, 18, 237, 189, 48, 110, 120, 190, 30, 94, 70, 60, 93, 58, 241, 61, 23, 186, 109, 61, 255, 43, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 81, 39, 190, 202, 225, 181, 61, 242, 133, 173, 190, 2, 123, 134, 190, 217, 228, 174, 62, 237, 167, 28, 190, 121, 118, 80, 62, 105, 59, 218, 190, 76, 137, 63, 62, 76, 247, 138, 62, 88, 188, 10, 191, 117, 81, 81, 190, 50, 152, 134, 190, 214, 122, 51, 63, 202, 142, 113, 191, 198, 82, 188, 190, 175, 226, 202, 190, 77, 147, 8, 63, 16, 174, 139, 61, 20, 33, 91, 190, 204, 80, 123, 190, 153, 88, 9, 190, 68, 165, 242, 62, 33, 32, 230, 189, 56, 21, 30, 62, 164, 189, 105, 190, 208, 150, 137, 62, 73, 18, 79, 190, 86, 98, 120, 61, 115, 123, 180, 190, 32, 114, 171, 190, 80, 231, 23, 63, 123, 185, 160, 61, 191, 242, 85, 190, 91, 222, 181, 188, 174, 194, 155, 60, 180, 185, 157, 189, 97, 73, 79, 62, 2, 213, 121, 62, 220, 236, 51, 60, 47, 4, 28, 190, 41, 71, 1, 189, 117, 104, 29, 190, 77, 85, 98, 62, 136, 224, 230, 188, 196, 89, 7, 190, 123, 96, 114, 62, 11, 244, 101, 61, 207, 7, 46, 60, 25, 198, 175, 62, 7, 197, 171, 189, 64, 91, 80, 190, 178, 249, 14, 190, 198, 16, 29, 62, 152, 102, 150, 62, 122, 191, 5, 61, 240, 70, 151, 190, 115, 230, 209, 189, 58, 219, 137, 62, 52, 37, 19, 190, 5, 31, 219, 61, 40, 104, 183, 59, 108, 103, 5, 61, 203, 57, 34, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 96, 109, 188, 140, 251, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 237, 105, 62, 186, 237, 216, 63, 137, 36, 21, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 79, 56, 192, 43, 21, 32, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}