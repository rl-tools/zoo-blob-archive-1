// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 91, 131, 62, 169, 235, 175, 60, 189, 180, 28, 189, 132, 64, 136, 190, 162, 33, 9, 191, 200, 136, 123, 62, 85, 193, 177, 62, 69, 240, 21, 62, 27, 35, 3, 190, 248, 161, 191, 187, 217, 236, 24, 63, 213, 129, 34, 191, 139, 64, 247, 62, 255, 56, 189, 189, 20, 148, 84, 190, 6, 66, 232, 190, 225, 85, 76, 191, 237, 111, 189, 62, 241, 192, 41, 190, 17, 110, 134, 63, 235, 104, 176, 190, 127, 110, 173, 61, 101, 244, 191, 62, 26, 170, 249, 62, 242, 244, 4, 190, 63, 146, 166, 63, 36, 185, 133, 62, 235, 68, 50, 62, 198, 144, 56, 63, 120, 207, 99, 62, 111, 134, 84, 190, 229, 135, 55, 63, 156, 25, 4, 191, 141, 126, 74, 61, 144, 19, 178, 191, 167, 26, 214, 190, 227, 95, 133, 190, 80, 68, 91, 191, 49, 71, 126, 61, 119, 249, 224, 190, 51, 246, 166, 63, 85, 198, 165, 62, 127, 30, 29, 63, 49, 90, 143, 191, 206, 167, 151, 190, 164, 170, 183, 189, 87, 26, 170, 191, 197, 74, 139, 190, 164, 87, 147, 62, 28, 90, 8, 63, 150, 136, 49, 62, 117, 8, 44, 63, 6, 147, 218, 190, 66, 41, 13, 188, 220, 28, 158, 62, 77, 114, 132, 191, 100, 109, 3, 62, 40, 138, 147, 189, 100, 146, 148, 62, 41, 165, 154, 190, 177, 195, 66, 190, 204, 185, 231, 189, 253, 176, 92, 191, 246, 163, 203, 190, 166, 25, 91, 63, 16, 30, 50, 63, 245, 217, 10, 191, 116, 218, 240, 62, 79, 177, 106, 189, 88, 189, 40, 191, 118, 0, 160, 190, 68, 25, 25, 190, 5, 225, 62, 190, 248, 136, 234, 62, 156, 45, 22, 191, 170, 9, 63, 62, 173, 24, 128, 62, 168, 136, 25, 191, 25, 231, 246, 190, 224, 230, 94, 63, 2, 59, 113, 189, 235, 36, 192, 190, 162, 238, 70, 191, 210, 188, 28, 191, 249, 235, 124, 62, 110, 40, 102, 63, 11, 58, 202, 62, 239, 133, 79, 63, 19, 54, 84, 61, 125, 17, 66, 62, 36, 193, 43, 191, 104, 238, 146, 191, 58, 145, 123, 190, 21, 241, 4, 191, 105, 95, 235, 189, 200, 223, 16, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 13, 35, 191, 56, 212, 128, 190, 196, 162, 232, 62, 109, 237, 198, 61, 204, 73, 65, 191, 176, 12, 184, 190, 154, 72, 186, 61, 178, 237, 115, 190, 77, 43, 21, 190, 146, 173, 66, 190, 59, 89, 66, 190, 81, 30, 45, 190, 208, 227, 28, 63, 174, 252, 6, 191, 89, 131, 247, 61, 200, 212, 96, 59, 177, 4, 148, 190, 96, 146, 217, 189, 170, 249, 6, 191, 175, 47, 31, 63, 210, 189, 197, 190, 39, 131, 165, 190, 116, 60, 39, 63, 52, 106, 52, 63, 99, 196, 21, 190, 118, 73, 8, 61, 169, 199, 165, 62, 31, 56, 46, 189, 190, 113, 194, 190, 254, 85, 13, 191, 129, 34, 174, 62, 187, 159, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 233, 189, 4, 179, 190, 189, 253, 162, 98, 190, 56, 104, 148, 61, 188, 121, 102, 62, 82, 206, 178, 189, 170, 179, 8, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 109, 1, 101, 190, 101, 115, 218, 189, 92, 246, 21, 189, 245, 109, 2, 190, 181, 129, 67, 60, 235, 205, 159, 60, 20, 89, 251, 61, 25, 205, 192, 189, 247, 14, 203, 61, 21, 19, 48, 61, 124, 212, 255, 61, 175, 88, 115, 61, 164, 10, 252, 190, 133, 248, 227, 189, 179, 135, 129, 188, 132, 134, 62, 189, 97, 154, 232, 190, 244, 100, 210, 188, 4, 33, 207, 189, 3, 59, 147, 61, 28, 210, 159, 61, 164, 137, 217, 187, 237, 99, 6, 62, 147, 164, 202, 189, 38, 155, 224, 62, 175, 181, 128, 62, 107, 105, 190, 62, 217, 132, 80, 60, 146, 238, 56, 189, 228, 8, 6, 61, 68, 128, 39, 188, 112, 54, 21, 191, 128, 215, 175, 188, 56, 165, 140, 189, 8, 63, 6, 62, 217, 159, 5, 61, 78, 61, 196, 62, 201, 246, 191, 189, 68, 117, 47, 190, 191, 184, 33, 62, 40, 140, 134, 62, 237, 107, 5, 189, 139, 21, 11, 190, 90, 71, 145, 188, 196, 245, 1, 190, 32, 34, 228, 61, 24, 195, 197, 60, 189, 0, 247, 60, 205, 195, 183, 61, 30, 129, 210, 61, 34, 134, 190, 190, 169, 124, 240, 189, 148, 33, 8, 189, 176, 253, 131, 189, 206, 4, 208, 60, 134, 161, 128, 190, 218, 120, 213, 62, 91, 151, 31, 62, 175, 55, 248, 190, 254, 1, 150, 190, 191, 26, 151, 62, 212, 24, 69, 189, 78, 248, 226, 61, 63, 72, 62, 190, 5, 154, 163, 60, 203, 144, 26, 191, 173, 144, 238, 189, 241, 170, 132, 188, 34, 124, 26, 189, 250, 28, 147, 191, 14, 219, 103, 187, 30, 24, 72, 62, 46, 159, 247, 188, 167, 36, 153, 60, 3, 159, 176, 190, 169, 35, 85, 62, 154, 81, 7, 61, 199, 191, 202, 190, 211, 66, 164, 62, 211, 9, 30, 62, 143, 140, 144, 62, 235, 183, 144, 189, 128, 222, 146, 188, 19, 85, 201, 61, 112, 17, 36, 191, 209, 91, 199, 190, 93, 170, 233, 189, 88, 158, 65, 60, 121, 14, 70, 61, 177, 18, 16, 190, 9, 240, 173, 61, 15, 182, 136, 61, 13, 236, 15, 60, 55, 76, 160, 189, 194, 44, 8, 62, 191, 184, 169, 189, 132, 219, 144, 190, 189, 21, 131, 190, 35, 161, 156, 62, 185, 9, 54, 61, 125, 75, 12, 190, 176, 245, 94, 191, 1, 236, 131, 189, 150, 143, 190, 189, 216, 65, 8, 62, 225, 207, 150, 190, 103, 69, 173, 190, 43, 60, 142, 188, 103, 177, 136, 190, 73, 172, 206, 190, 143, 116, 222, 188, 169, 178, 191, 190, 248, 180, 221, 189, 95, 82, 193, 190, 37, 66, 36, 61, 91, 204, 191, 62, 184, 178, 224, 190, 141, 76, 227, 190, 121, 47, 134, 189, 32, 57, 112, 61, 201, 144, 36, 188, 44, 26, 101, 62, 57, 96, 50, 62, 16, 92, 146, 62, 252, 216, 7, 62, 149, 22, 159, 190, 208, 219, 140, 62, 218, 156, 19, 190, 10, 23, 86, 190, 110, 161, 113, 62, 34, 169, 20, 62, 170, 138, 107, 62, 137, 248, 68, 62, 82, 93, 88, 189, 23, 225, 141, 62, 133, 103, 178, 62, 242, 134, 56, 190, 68, 251, 54, 62, 150, 248, 24, 190, 172, 18, 71, 62, 252, 128, 3, 189, 170, 213, 147, 189, 64, 3, 123, 61, 63, 192, 122, 62, 21, 99, 13, 188, 219, 159, 219, 189, 29, 109, 101, 190, 172, 4, 150, 190, 152, 172, 132, 190, 152, 175, 148, 190, 224, 3, 13, 62, 96, 194, 188, 189, 139, 136, 131, 190, 207, 61, 205, 189, 30, 224, 127, 190, 93, 188, 77, 61, 231, 45, 48, 190, 50, 64, 139, 190, 28, 16, 72, 190, 164, 252, 165, 189, 30, 151, 247, 189, 230, 210, 32, 61, 250, 232, 188, 61, 196, 236, 235, 189, 181, 69, 27, 62, 171, 244, 171, 62, 169, 156, 169, 61, 48, 62, 21, 63, 198, 251, 231, 62, 29, 214, 129, 188, 43, 197, 209, 189, 248, 195, 25, 61, 160, 252, 41, 191, 253, 102, 65, 190, 197, 175, 43, 61, 19, 249, 221, 61, 131, 60, 227, 190, 46, 138, 122, 190, 139, 220, 9, 190, 1, 169, 149, 191, 149, 115, 3, 61, 208, 231, 180, 189, 49, 12, 43, 62, 208, 212, 109, 190, 67, 50, 139, 61, 5, 254, 169, 60, 8, 201, 39, 63, 93, 190, 223, 189, 200, 50, 140, 62, 129, 239, 96, 190, 108, 127, 147, 62, 215, 4, 102, 190, 139, 116, 181, 61, 54, 228, 221, 62, 80, 190, 237, 61, 177, 57, 203, 62, 87, 153, 84, 62, 154, 237, 0, 62, 58, 144, 36, 189, 10, 41, 197, 62, 125, 221, 25, 61, 99, 109, 183, 188, 228, 206, 198, 188, 192, 193, 24, 189, 94, 243, 33, 189, 193, 191, 85, 190, 72, 0, 77, 62, 251, 114, 47, 62, 164, 14, 75, 62, 87, 24, 174, 190, 69, 3, 150, 189, 112, 14, 238, 190, 24, 130, 157, 190, 128, 80, 51, 190, 197, 52, 151, 189, 104, 186, 177, 61, 175, 225, 185, 62, 215, 19, 118, 62, 236, 35, 84, 62, 125, 39, 164, 62, 73, 231, 191, 189, 247, 198, 31, 61, 174, 39, 178, 61, 250, 137, 141, 190, 110, 239, 207, 190, 176, 136, 22, 62, 29, 141, 138, 62, 152, 40, 232, 187, 44, 103, 193, 188, 220, 194, 53, 190, 106, 211, 82, 190, 12, 193, 96, 190, 126, 72, 9, 62, 171, 123, 195, 190, 9, 244, 181, 190, 255, 154, 203, 61, 74, 143, 136, 189, 80, 243, 184, 188, 33, 51, 111, 190, 149, 143, 130, 62, 37, 182, 184, 189, 141, 34, 149, 61, 19, 70, 88, 189, 26, 133, 24, 62, 228, 198, 43, 61, 15, 64, 82, 191, 9, 125, 96, 189, 107, 157, 34, 61, 204, 251, 196, 62, 201, 72, 154, 188, 160, 41, 123, 62, 121, 41, 158, 62, 179, 174, 140, 190, 8, 41, 44, 62, 44, 126, 85, 190, 183, 42, 37, 191, 96, 246, 131, 190, 77, 174, 134, 61, 122, 162, 151, 61, 245, 26, 6, 190, 119, 26, 220, 62, 43, 57, 16, 61, 130, 48, 17, 191, 94, 38, 225, 62, 244, 23, 40, 62, 242, 179, 225, 61, 214, 11, 177, 59, 153, 51, 95, 190, 198, 63, 74, 61, 67, 98, 232, 61, 204, 75, 99, 190, 143, 44, 62, 62, 114, 134, 235, 190, 88, 130, 140, 61, 229, 31, 148, 190, 224, 188, 120, 62, 138, 2, 46, 61, 127, 207, 22, 189, 37, 115, 61, 61, 166, 81, 18, 189, 232, 165, 5, 62, 24, 121, 60, 61, 152, 13, 176, 190, 31, 86, 132, 62, 122, 177, 233, 61, 218, 2, 9, 190, 104, 214, 94, 62, 34, 244, 129, 190, 51, 102, 93, 190, 250, 249, 93, 62, 71, 52, 58, 188, 244, 104, 223, 62, 91, 216, 95, 62, 134, 178, 90, 61, 121, 148, 230, 61, 59, 68, 151, 62, 140, 202, 33, 62, 79, 165, 149, 189, 215, 233, 46, 190, 101, 216, 220, 61, 220, 141, 200, 61, 93, 196, 174, 189, 157, 175, 219, 61, 63, 178, 137, 61, 103, 94, 124, 190, 133, 192, 163, 189, 73, 205, 36, 190, 78, 190, 251, 188, 30, 189, 46, 61, 72, 194, 238, 190, 164, 96, 76, 61, 107, 184, 199, 187, 124, 6, 74, 62, 65, 220, 93, 190, 162, 223, 194, 189, 32, 80, 9, 190, 66, 179, 69, 191, 51, 59, 197, 61, 17, 250, 205, 190, 192, 127, 202, 62, 3, 172, 194, 61, 207, 56, 2, 191, 80, 55, 99, 62, 57, 132, 196, 191, 255, 220, 143, 190, 28, 46, 128, 191, 172, 117, 162, 61, 166, 3, 33, 190, 218, 169, 209, 60, 91, 118, 58, 189, 51, 223, 247, 61, 53, 64, 188, 190, 3, 81, 203, 61, 94, 132, 58, 188, 173, 204, 24, 191, 155, 5, 112, 191, 237, 11, 98, 189, 177, 174, 214, 62, 111, 127, 150, 62, 14, 0, 12, 62, 118, 179, 189, 189, 100, 68, 133, 189, 196, 132, 165, 189, 177, 51, 135, 189, 200, 24, 133, 189, 106, 50, 32, 62, 255, 77, 76, 190, 243, 178, 59, 190, 253, 68, 194, 60, 57, 103, 156, 190, 253, 2, 41, 189, 105, 16, 223, 62, 57, 73, 63, 190, 108, 32, 180, 62, 204, 96, 149, 60, 93, 7, 128, 189, 62, 58, 161, 62, 40, 203, 84, 62, 248, 9, 209, 61, 207, 146, 142, 62, 13, 137, 165, 61, 25, 74, 216, 189, 49, 25, 4, 61, 254, 187, 172, 188, 190, 10, 211, 190, 105, 58, 82, 62, 116, 216, 213, 188, 58, 107, 68, 62, 157, 226, 28, 191, 143, 173, 198, 61, 244, 4, 125, 190, 208, 82, 23, 190, 30, 75, 122, 188, 41, 142, 145, 189, 144, 109, 243, 61, 117, 250, 148, 61, 251, 168, 186, 62, 223, 245, 83, 62, 222, 255, 131, 190, 11, 165, 140, 61, 109, 17, 183, 62, 255, 93, 29, 62, 2, 135, 167, 61, 25, 44, 132, 190, 182, 141, 88, 190, 35, 47, 189, 190, 28, 174, 33, 190, 43, 24, 103, 189, 125, 85, 49, 191, 136, 53, 135, 191, 5, 6, 17, 190, 40, 8, 225, 189, 95, 218, 209, 62, 85, 59, 131, 62, 212, 241, 128, 190, 233, 198, 81, 189, 86, 22, 188, 61, 117, 182, 232, 190, 6, 186, 210, 61, 110, 137, 145, 61, 40, 79, 196, 62, 99, 135, 24, 60, 102, 48, 137, 61, 121, 107, 8, 63, 254, 109, 91, 191, 150, 118, 136, 190, 128, 180, 158, 187, 86, 147, 1, 191, 190, 137, 220, 61, 168, 248, 117, 190, 192, 142, 134, 190, 64, 249, 107, 62, 242, 59, 251, 190, 38, 14, 78, 190, 101, 171, 193, 62, 216, 36, 69, 190, 46, 174, 51, 191, 151, 6, 215, 189, 193, 22, 20, 62, 112, 53, 149, 62, 83, 29, 146, 61, 118, 140, 6, 62, 50, 138, 201, 190, 206, 149, 4, 62, 131, 111, 189, 62, 94, 81, 224, 189, 101, 119, 242, 190, 24, 209, 11, 61, 239, 134, 38, 62, 177, 11, 123, 62, 64, 221, 6, 61, 135, 208, 187, 190, 91, 161, 247, 189, 155, 172, 250, 190, 1, 147, 239, 189, 181, 188, 174, 190, 89, 56, 139, 62, 162, 121, 139, 61, 193, 191, 152, 61, 45, 75, 28, 63, 33, 178, 168, 62, 52, 113, 178, 190, 115, 242, 150, 191, 125, 15, 218, 190, 134, 51, 25, 190, 230, 46, 199, 62, 202, 235, 187, 191, 241, 28, 150, 62, 231, 231, 115, 62, 125, 107, 103, 190, 212, 17, 197, 61, 147, 134, 43, 192, 27, 118, 113, 190, 166, 157, 204, 190, 198, 7, 226, 62, 219, 58, 87, 61, 58, 179, 72, 190, 23, 70, 163, 62, 165, 205, 50, 62, 237, 164, 24, 191, 136, 23, 31, 61, 22, 84, 69, 62, 44, 74, 118, 190, 55, 106, 189, 190, 92, 236, 98, 60, 250, 149, 48, 62, 70, 201, 205, 62, 190, 135, 156, 190, 200, 160, 9, 63, 201, 57, 190, 62, 161, 195, 153, 61, 235, 231, 183, 60, 210, 91, 164, 62, 241, 161, 30, 62, 80, 94, 138, 62, 3, 47, 65, 62, 25, 209, 38, 63, 120, 136, 0, 189, 0, 47, 21, 62, 86, 45, 116, 189, 195, 49, 165, 189, 199, 21, 85, 191, 152, 30, 1, 190, 108, 14, 226, 189, 99, 90, 94, 60, 179, 164, 177, 191, 61, 68, 103, 61, 59, 49, 180, 61, 5, 214, 189, 62, 23, 77, 142, 62, 238, 40, 36, 191, 181, 229, 184, 61, 30, 163, 97, 62, 51, 218, 22, 191, 3, 68, 199, 61, 32, 226, 225, 61, 140, 20, 252, 62, 177, 236, 140, 190, 41, 26, 201, 189, 197, 204, 185, 62, 179, 147, 153, 191, 122, 110, 186, 189, 134, 37, 1, 190, 75, 11, 130, 62, 233, 146, 203, 62, 203, 207, 159, 189, 8, 43, 128, 191, 173, 67, 97, 189, 246, 28, 129, 190, 92, 97, 232, 58, 60, 254, 131, 191, 176, 242, 193, 61, 193, 39, 48, 62, 203, 51, 48, 191, 226, 127, 129, 61, 186, 194, 246, 191, 235, 71, 1, 190, 0, 115, 150, 191, 243, 73, 226, 62, 73, 5, 41, 62, 138, 206, 197, 189, 164, 122, 219, 61, 252, 93, 152, 62, 128, 169, 173, 190, 22, 37, 91, 62, 74, 2, 237, 189, 70, 105, 169, 190, 97, 202, 12, 190, 32, 21, 170, 61, 219, 79, 79, 62, 137, 201, 57, 62, 79, 233, 164, 61, 158, 189, 213, 61, 56, 74, 150, 62, 247, 141, 41, 190, 235, 130, 140, 190, 134, 55, 178, 189, 72, 86, 150, 189, 100, 199, 29, 62, 7, 31, 9, 191, 249, 99, 222, 190, 2, 208, 149, 189, 179, 49, 72, 62, 130, 174, 218, 62, 103, 219, 168, 190, 242, 9, 29, 190, 11, 44, 89, 191, 241, 84, 112, 190, 136, 122, 60, 190, 41, 151, 33, 59, 135, 64, 37, 62, 249, 206, 100, 190, 71, 19, 255, 60, 69, 178, 63, 191, 180, 207, 63, 61, 216, 245, 65, 61, 229, 77, 59, 189, 99, 41, 176, 190, 71, 93, 81, 58, 213, 192, 67, 188, 123, 116, 230, 61, 144, 35, 1, 190, 102, 211, 79, 61, 69, 34, 5, 191, 196, 37, 174, 190, 154, 218, 69, 189, 92, 61, 232, 61, 2, 72, 17, 190, 40, 204, 170, 59, 162, 161, 153, 61, 50, 219, 206, 61, 115, 130, 90, 188, 5, 145, 249, 189, 47, 202, 214, 189, 173, 191, 37, 190, 21, 242, 215, 61, 57, 119, 6, 190, 44, 51, 220, 61, 91, 129, 33, 190, 152, 185, 134, 61, 120, 200, 72, 190, 60, 200, 42, 190, 1, 170, 60, 189, 186, 81, 30, 62, 8, 75, 80, 62, 180, 166, 129, 61, 164, 120, 218, 61, 178, 220, 242, 61, 255, 112, 126, 61, 27, 234, 162, 189, 53, 58, 209, 61, 235, 9, 180, 61, 93, 206, 1, 190, 179, 220, 236, 189, 254, 36, 104, 61, 102, 203, 28, 190, 100, 52, 172, 61, 13, 93, 253, 189, 69, 195, 224, 61, 169, 181, 63, 188, 115, 19, 42, 62, 121, 6, 4, 62, 241, 183, 96, 191, 150, 37, 12, 190, 39, 102, 184, 190, 174, 255, 15, 188, 43, 175, 110, 191, 163, 96, 168, 188, 166, 165, 0, 189, 207, 178, 24, 190, 149, 114, 21, 62, 77, 246, 253, 191, 184, 185, 205, 61, 217, 55, 165, 190, 197, 67, 143, 62, 226, 103, 53, 61, 164, 64, 176, 61, 172, 74, 98, 62, 212, 92, 132, 61, 224, 176, 211, 190, 172, 221, 181, 61, 184, 198, 141, 189, 58, 55, 47, 190, 44, 76, 69, 190, 102, 14, 44, 61, 209, 155, 131, 62, 245, 205, 184, 62, 239, 43, 132, 62, 213, 249, 206, 61, 213, 40, 117, 62, 8, 115, 210, 189, 236, 30, 198, 62, 177, 204, 237, 190, 222, 8, 148, 190, 13, 46, 172, 61, 209, 176, 138, 62, 234, 141, 59, 190, 69, 8, 221, 189, 85, 201, 139, 191, 26, 191, 128, 190, 205, 205, 242, 60, 229, 244, 138, 190, 239, 8, 156, 62, 86, 169, 4, 192, 5, 254, 26, 191, 115, 248, 72, 191, 54, 31, 160, 61, 111, 249, 89, 61, 55, 155, 184, 190, 201, 176, 241, 61, 9, 164, 6, 62, 253, 174, 43, 191, 222, 186, 43, 61, 136, 12, 198, 61, 3, 43, 61, 190, 123, 90, 223, 190, 218, 160, 112, 189, 208, 37, 112, 62, 207, 88, 31, 190, 134, 35, 59, 190, 224, 51, 166, 62, 66, 205, 193, 189, 134, 51, 125, 189, 134, 248, 83, 61, 163, 135, 34, 190, 169, 44, 217, 189, 19, 162, 51, 190, 139, 4, 196, 61, 156, 76, 111, 189, 19, 106, 78, 190, 75, 61, 146, 61, 27, 174, 60, 190, 140, 129, 165, 190, 89, 240, 63, 62, 76, 255, 167, 61, 62, 40, 9, 62, 7, 116, 102, 62, 117, 128, 245, 61, 35, 155, 153, 189, 16, 243, 188, 61, 239, 229, 128, 62, 247, 183, 97, 188, 121, 128, 143, 190, 106, 56, 209, 189, 145, 215, 92, 191, 214, 161, 101, 190, 60, 128, 5, 62, 6, 16, 11, 62, 21, 122, 76, 191, 229, 209, 216, 189, 21, 47, 17, 190, 52, 228, 136, 191, 201, 52, 107, 188, 126, 39, 134, 190, 120, 86, 180, 61, 101, 49, 7, 190, 193, 86, 42, 190, 217, 217, 189, 62, 84, 28, 93, 59, 162, 224, 192, 62, 163, 226, 59, 62, 55, 70, 177, 190, 2, 116, 41, 62, 158, 128, 160, 190, 15, 166, 187, 190, 248, 112, 161, 62, 93, 49, 149, 62, 46, 70, 238, 62, 125, 240, 203, 61, 149, 206, 103, 62, 192, 51, 109, 190, 232, 201, 39, 63, 114, 235, 199, 190, 91, 164, 134, 189, 189, 44, 23, 191, 108, 223, 129, 60, 232, 36, 99, 62, 244, 86, 150, 189, 204, 105, 169, 62, 139, 116, 123, 62, 21, 218, 144, 61, 171, 149, 200, 190, 235, 250, 98, 190, 122, 231, 6, 191, 255, 170, 37, 62, 105, 92, 246, 190, 174, 67, 135, 189, 98, 88, 32, 61, 12, 114, 0, 63, 160, 112, 56, 57, 104, 65, 132, 190, 78, 46, 146, 61, 96, 199, 17, 63, 26, 78, 234, 61, 50, 144, 131, 60, 128, 92, 137, 189, 183, 152, 238, 187, 31, 187, 12, 191, 49, 111, 39, 186, 242, 123, 190, 190, 111, 231, 56, 191, 83, 58, 127, 191, 45, 249, 48, 60, 126, 128, 174, 190, 163, 171, 171, 62, 65, 223, 144, 62, 5, 38, 92, 190, 19, 188, 237, 59, 166, 236, 15, 59, 2, 90, 8, 191, 129, 69, 64, 62, 199, 115, 40, 189, 83, 168, 158, 62, 150, 242, 225, 189, 24, 3, 184, 61, 39, 216, 13, 63, 132, 113, 142, 191, 186, 209, 97, 190, 253, 214, 36, 189, 150, 129, 25, 190, 132, 161, 68, 63, 149, 165, 24, 62, 107, 84, 15, 63, 47, 33, 203, 61, 211, 208, 204, 61, 152, 214, 8, 59, 146, 50, 29, 62, 121, 91, 198, 190, 52, 36, 38, 190, 40, 79, 102, 188, 8, 104, 54, 62, 30, 182, 253, 61, 150, 174, 202, 62, 135, 156, 239, 189, 136, 27, 106, 190, 129, 48, 187, 62, 180, 156, 152, 62, 85, 182, 133, 61, 106, 73, 191, 61, 210, 163, 178, 61, 213, 187, 228, 61, 164, 80, 130, 61, 233, 107, 60, 62, 161, 240, 84, 61, 72, 232, 41, 189, 213, 167, 255, 60, 223, 52, 68, 190, 219, 197, 164, 60, 198, 214, 23, 189, 89, 186, 154, 190, 92, 240, 94, 61, 146, 247, 50, 62, 7, 4, 65, 62, 2, 174, 222, 189, 207, 26, 134, 191, 134, 230, 85, 190, 1, 108, 204, 189, 138, 58, 183, 189, 58, 59, 30, 191, 154, 159, 119, 62, 135, 220, 20, 62, 74, 96, 119, 190, 179, 181, 221, 61, 73, 252, 28, 192, 67, 12, 191, 60, 10, 169, 55, 189, 140, 255, 153, 61, 201, 196, 195, 189, 2, 233, 149, 190, 212, 27, 96, 62, 210, 10, 229, 188, 82, 84, 228, 190, 179, 94, 239, 61, 140, 192, 130, 62, 26, 108, 85, 190, 217, 232, 28, 189, 171, 160, 234, 61, 226, 253, 239, 60, 136, 23, 246, 61, 168, 248, 95, 190, 153, 58, 143, 62, 212, 32, 77, 62, 179, 45, 13, 190, 154, 209, 150, 190, 44, 40, 213, 190, 36, 217, 60, 190, 28, 106, 94, 61, 107, 144, 67, 191, 72, 51, 1, 191, 184, 47, 29, 62, 74, 22, 108, 188, 13, 72, 132, 62, 142, 67, 133, 190, 85, 51, 243, 61, 96, 199, 13, 191, 203, 161, 55, 190, 48, 61, 9, 62, 107, 70, 224, 188, 109, 174, 113, 61, 134, 42, 252, 190, 77, 123, 238, 190, 6, 119, 103, 191, 202, 162, 13, 61, 81, 122, 194, 61, 67, 124, 80, 62, 112, 241, 56, 63, 12, 4, 181, 189, 44, 251, 28, 62, 127, 124, 121, 62, 184, 5, 54, 190, 1, 218, 22, 62, 159, 30, 154, 191, 152, 205, 71, 191, 235, 180, 60, 190, 211, 221, 150, 189, 181, 253, 31, 62, 136, 122, 134, 62, 68, 133, 246, 59, 235, 157, 249, 61, 184, 13, 50, 62, 134, 194, 188, 189, 138, 105, 175, 188, 40, 61, 31, 62, 127, 109, 194, 189, 201, 183, 32, 59, 188, 87, 10, 62, 65, 94, 154, 61, 30, 76, 107, 187, 56, 99, 241, 188, 85, 185, 168, 191, 21, 105, 205, 61, 226, 42, 90, 190, 43, 37, 252, 62, 180, 3, 148, 190, 254, 119, 25, 61, 179, 10, 64, 189, 173, 42, 226, 190, 56, 94, 80, 191, 18, 63, 18, 186, 161, 65, 222, 61, 192, 219, 203, 59, 199, 174, 36, 189, 32, 77, 4, 62, 180, 9, 172, 62, 159, 122, 133, 191, 35, 105, 68, 190, 23, 50, 21, 190, 56, 173, 128, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 60, 185, 135, 60, 206, 201, 185, 189, 39, 202, 10, 62, 210, 249, 132, 188, 173, 119, 44, 190, 128, 71, 167, 60, 65, 156, 145, 188, 196, 127, 222, 60, 79, 2, 1, 62, 18, 73, 56, 190, 57, 202, 32, 190, 133, 110, 31, 190, 48, 232, 6, 190, 191, 215, 152, 60, 95, 101, 27, 62, 240, 218, 65, 189, 142, 65, 154, 189, 128, 245, 242, 189, 114, 122, 37, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 214, 96, 142, 189, 51, 236, 134, 60, 79, 44, 58, 189, 141, 25, 166, 61, 168, 110, 47, 62, 155, 24, 43, 190, 79, 208, 33, 63, 249, 76, 242, 188, 123, 226, 192, 62, 25, 71, 69, 189, 55, 56, 63, 62, 255, 152, 47, 190, 53, 18, 133, 189, 169, 159, 208, 190, 65, 242, 220, 189, 132, 126, 134, 191, 90, 105, 54, 190, 5, 104, 136, 189, 209, 80, 163, 61, 216, 132, 178, 191, 73, 168, 195, 190, 157, 70, 31, 62, 184, 2, 234, 61, 19, 141, 103, 62, 26, 158, 8, 191, 45, 136, 137, 61, 2, 97, 170, 62, 5, 136, 137, 190, 174, 93, 49, 188, 6, 146, 14, 62, 220, 41, 94, 62, 41, 195, 12, 191, 101, 191, 145, 60, 64, 60, 203, 61, 34, 205, 47, 191, 14, 159, 98, 190, 253, 177, 149, 60, 241, 99, 45, 60, 124, 48, 202, 62, 151, 171, 191, 189, 160, 128, 24, 189, 155, 118, 191, 61, 66, 70, 196, 61, 243, 35, 4, 61, 120, 19, 22, 190, 124, 240, 255, 60, 174, 12, 131, 189, 34, 152, 30, 191, 182, 59, 150, 189, 251, 21, 9, 190, 83, 249, 136, 189, 141, 81, 92, 191, 80, 205, 245, 189, 245, 206, 163, 61, 106, 145, 222, 62, 235, 20, 163, 59, 30, 30, 223, 189, 90, 68, 171, 61, 85, 132, 137, 189, 134, 11, 68, 191, 93, 5, 36, 61, 172, 127, 108, 62, 120, 74, 68, 62, 62, 230, 158, 189, 16, 198, 142, 61, 68, 73, 103, 62, 95, 115, 183, 191, 255, 29, 124, 190, 127, 201, 193, 61, 12, 199, 162, 189, 88, 200, 160, 189, 152, 185, 195, 189, 62, 252, 57, 61, 193, 86, 206, 62, 85, 209, 30, 191, 243, 5, 121, 190, 55, 94, 57, 62, 116, 218, 0, 191, 132, 112, 2, 191, 6, 151, 135, 62, 20, 225, 178, 62, 25, 84, 171, 62, 34, 50, 164, 62, 159, 181, 106, 62, 67, 0, 228, 60, 98, 154, 233, 62, 33, 50, 113, 62, 96, 41, 165, 61, 216, 129, 129, 190, 153, 61, 45, 62, 244, 16, 57, 62, 243, 99, 148, 61, 85, 3, 137, 62, 38, 87, 58, 190, 94, 83, 40, 190, 203, 150, 5, 191, 207, 52, 132, 190, 32, 160, 234, 61, 222, 84, 56, 62, 90, 255, 235, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 52, 149, 190, 190, 102, 139, 61, 4, 115, 122, 62, 125, 137, 217, 61, 237, 173, 149, 60, 12, 174, 120, 190, 12, 54, 234, 61, 74, 238, 47, 62, 233, 143, 214, 61, 35, 88, 19, 62, 26, 175, 86, 62, 13, 139, 71, 190, 220, 221, 164, 61, 5, 112, 156, 61, 9, 98, 163, 61, 26, 230, 55, 62, 103, 17, 34, 62, 236, 127, 104, 190, 255, 87, 9, 190, 171, 37, 43, 62, 209, 89, 179, 189, 24, 89, 61, 189, 65, 90, 132, 62, 40, 201, 104, 61, 100, 94, 118, 62, 228, 218, 33, 61, 246, 181, 199, 189, 51, 79, 76, 190, 30, 94, 70, 60, 156, 107, 111, 62, 34, 219, 125, 61, 89, 121, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 226, 38, 190, 56, 115, 229, 61, 74, 58, 158, 190, 56, 7, 78, 190, 64, 224, 151, 62, 225, 161, 247, 190, 177, 123, 209, 62, 112, 225, 181, 190, 170, 184, 131, 62, 6, 109, 128, 62, 155, 77, 106, 191, 246, 34, 167, 190, 165, 184, 5, 191, 179, 61, 30, 63, 37, 135, 162, 191, 124, 73, 17, 191, 77, 244, 94, 191, 58, 111, 83, 63, 81, 45, 139, 61, 124, 252, 150, 190, 183, 154, 116, 191, 209, 224, 0, 191, 250, 71, 18, 63, 107, 125, 1, 191, 85, 184, 59, 62, 216, 150, 250, 190, 24, 88, 136, 63, 64, 108, 12, 191, 86, 98, 120, 61, 203, 111, 8, 191, 91, 240, 224, 190, 193, 91, 11, 63, 62, 3, 163, 61, 242, 84, 253, 189, 114, 251, 206, 190, 117, 30, 247, 189, 234, 127, 27, 61, 151, 115, 193, 62, 175, 124, 128, 62, 103, 112, 170, 189, 84, 60, 166, 190, 172, 85, 53, 61, 81, 199, 40, 63, 69, 198, 186, 62, 21, 179, 80, 62, 242, 100, 94, 189, 29, 8, 192, 62, 179, 253, 52, 189, 27, 169, 158, 189, 140, 51, 111, 62, 41, 155, 171, 189, 242, 99, 171, 190, 238, 135, 67, 62, 81, 36, 124, 62, 210, 146, 156, 62, 78, 116, 161, 62, 115, 21, 129, 190, 154, 92, 235, 189, 67, 9, 132, 60, 56, 80, 50, 190, 5, 31, 219, 61, 141, 130, 158, 190, 124, 94, 124, 61, 144, 107, 210, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 254, 1, 61, 165, 190, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {56, 155, 164, 62, 95, 16, 230, 62, 153, 65, 197, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {98, 86, 62, 191, 110, 204, 33, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}