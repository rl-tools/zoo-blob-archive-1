// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 91, 131, 62, 169, 235, 175, 60, 189, 180, 28, 189, 31, 201, 136, 190, 54, 162, 7, 191, 162, 107, 121, 62, 70, 223, 178, 62, 146, 151, 29, 62, 105, 171, 7, 190, 186, 162, 118, 60, 241, 147, 11, 63, 244, 22, 36, 191, 10, 148, 196, 62, 129, 197, 219, 189, 215, 192, 93, 190, 200, 196, 210, 190, 105, 139, 87, 191, 217, 226, 188, 62, 164, 221, 208, 189, 121, 216, 112, 63, 146, 146, 196, 190, 167, 114, 213, 61, 194, 233, 192, 62, 107, 4, 252, 62, 254, 150, 191, 189, 184, 108, 157, 63, 66, 127, 132, 62, 18, 94, 26, 62, 173, 86, 44, 63, 194, 100, 118, 62, 130, 213, 10, 190, 22, 45, 46, 63, 75, 105, 8, 191, 96, 45, 25, 61, 79, 98, 167, 191, 30, 34, 217, 190, 149, 129, 118, 190, 222, 20, 87, 191, 91, 216, 153, 61, 242, 53, 242, 190, 132, 3, 155, 63, 16, 86, 169, 62, 7, 230, 39, 63, 72, 133, 126, 191, 249, 154, 175, 190, 117, 54, 202, 189, 190, 220, 162, 191, 183, 220, 143, 190, 94, 126, 124, 62, 37, 34, 248, 62, 102, 55, 71, 62, 127, 156, 46, 63, 39, 59, 184, 190, 73, 111, 163, 188, 131, 135, 135, 62, 206, 189, 105, 191, 96, 163, 55, 62, 6, 114, 124, 189, 15, 70, 128, 62, 158, 78, 176, 190, 93, 230, 82, 190, 221, 8, 1, 190, 200, 56, 99, 191, 110, 152, 228, 190, 161, 35, 79, 63, 126, 91, 56, 63, 180, 193, 220, 190, 237, 46, 5, 63, 237, 175, 10, 189, 252, 149, 31, 191, 128, 132, 198, 190, 20, 198, 21, 190, 34, 148, 81, 190, 17, 6, 227, 62, 19, 96, 24, 191, 147, 245, 90, 62, 63, 25, 100, 62, 197, 24, 26, 191, 213, 156, 231, 190, 184, 122, 72, 63, 68, 77, 200, 189, 190, 55, 221, 190, 128, 209, 59, 191, 66, 202, 34, 191, 33, 167, 85, 62, 2, 35, 94, 63, 89, 60, 213, 62, 10, 42, 70, 63, 56, 206, 178, 61, 29, 36, 78, 62, 183, 239, 67, 191, 29, 194, 139, 191, 93, 12, 106, 190, 138, 218, 233, 190, 105, 216, 181, 189, 187, 99, 20, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 13, 35, 191, 204, 233, 131, 190, 33, 1, 235, 62, 179, 111, 10, 62, 164, 0, 51, 191, 3, 110, 181, 190, 140, 239, 188, 61, 237, 107, 135, 190, 24, 46, 26, 190, 96, 112, 87, 190, 255, 25, 128, 190, 54, 227, 53, 190, 23, 134, 36, 63, 241, 75, 9, 191, 63, 251, 39, 62, 226, 64, 1, 188, 197, 40, 155, 190, 117, 200, 202, 189, 68, 71, 7, 191, 60, 75, 29, 63, 222, 152, 209, 190, 175, 216, 174, 190, 252, 154, 39, 63, 160, 193, 55, 63, 205, 162, 167, 189, 6, 157, 158, 61, 176, 227, 163, 62, 238, 91, 226, 188, 147, 194, 197, 190, 131, 33, 8, 191, 240, 31, 165, 62, 68, 202, 234, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 233, 189, 4, 179, 190, 189, 253, 162, 98, 190, 56, 104, 148, 61, 188, 121, 102, 62, 82, 206, 178, 189, 170, 179, 8, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 109, 1, 101, 190, 101, 115, 218, 189, 92, 246, 21, 189, 245, 109, 2, 190, 181, 129, 67, 60, 235, 205, 159, 60, 20, 89, 251, 61, 25, 205, 192, 189, 247, 14, 203, 61, 21, 19, 48, 61, 124, 212, 255, 61, 175, 88, 115, 61, 164, 10, 252, 190, 133, 248, 227, 189, 179, 135, 129, 188, 132, 134, 62, 189, 97, 154, 232, 190, 244, 100, 210, 188, 4, 33, 207, 189, 3, 59, 147, 61, 28, 210, 159, 61, 164, 137, 217, 187, 237, 99, 6, 62, 229, 26, 234, 189, 197, 79, 229, 62, 204, 117, 127, 62, 141, 77, 186, 62, 174, 129, 68, 59, 101, 61, 89, 189, 21, 127, 42, 61, 178, 76, 154, 188, 142, 121, 236, 190, 62, 114, 191, 188, 151, 87, 113, 189, 196, 132, 8, 62, 199, 51, 81, 61, 86, 40, 200, 62, 43, 72, 140, 189, 209, 1, 75, 188, 255, 63, 53, 62, 43, 234, 86, 62, 208, 104, 239, 188, 58, 210, 4, 190, 217, 146, 15, 60, 52, 38, 202, 189, 118, 238, 7, 62, 128, 20, 235, 60, 5, 204, 241, 60, 240, 11, 167, 61, 245, 162, 239, 61, 50, 150, 166, 190, 28, 205, 156, 189, 128, 105, 240, 58, 160, 154, 13, 189, 206, 4, 208, 60, 186, 252, 97, 190, 210, 42, 216, 62, 79, 38, 20, 62, 128, 186, 228, 190, 100, 52, 139, 190, 99, 10, 145, 62, 6, 136, 161, 189, 211, 128, 239, 61, 7, 99, 62, 190, 13, 95, 69, 60, 122, 175, 237, 190, 182, 158, 19, 190, 18, 30, 123, 189, 79, 184, 81, 189, 245, 7, 135, 191, 121, 188, 219, 187, 101, 114, 47, 62, 100, 171, 36, 190, 186, 96, 248, 60, 35, 65, 179, 190, 19, 87, 45, 62, 35, 254, 197, 60, 51, 45, 225, 190, 20, 51, 159, 62, 194, 187, 28, 62, 7, 128, 135, 62, 184, 92, 130, 189, 133, 121, 236, 188, 140, 106, 94, 61, 219, 132, 23, 191, 159, 67, 200, 190, 93, 170, 233, 189, 131, 155, 34, 61, 0, 100, 167, 59, 217, 7, 16, 190, 9, 240, 173, 61, 112, 174, 179, 61, 119, 9, 0, 62, 206, 213, 147, 189, 88, 155, 20, 62, 157, 103, 179, 189, 132, 219, 144, 190, 1, 226, 83, 190, 121, 194, 163, 62, 200, 174, 115, 61, 180, 83, 34, 190, 117, 152, 34, 191, 212, 199, 144, 189, 235, 43, 86, 189, 75, 151, 14, 62, 66, 254, 142, 190, 103, 69, 173, 190, 102, 97, 133, 188, 162, 120, 82, 190, 19, 46, 180, 190, 143, 116, 222, 188, 244, 117, 169, 190, 0, 179, 49, 190, 95, 82, 193, 190, 95, 215, 19, 61, 245, 134, 177, 62, 160, 7, 98, 190, 141, 76, 227, 190, 121, 47, 134, 189, 215, 141, 66, 61, 105, 47, 156, 188, 251, 152, 96, 62, 52, 92, 6, 62, 167, 42, 145, 62, 172, 39, 236, 61, 0, 208, 157, 190, 191, 228, 132, 62, 145, 50, 16, 190, 98, 57, 96, 190, 8, 227, 119, 62, 58, 103, 14, 62, 93, 242, 121, 62, 54, 49, 73, 62, 113, 83, 34, 189, 133, 190, 141, 62, 235, 152, 172, 62, 231, 250, 78, 190, 14, 228, 40, 62, 150, 13, 20, 190, 188, 201, 91, 62, 193, 8, 45, 189, 45, 93, 85, 189, 159, 222, 119, 61, 33, 219, 119, 62, 153, 212, 133, 188, 173, 66, 200, 189, 40, 242, 94, 190, 71, 173, 143, 190, 171, 149, 120, 190, 151, 37, 138, 190, 224, 3, 13, 62, 6, 215, 35, 190, 195, 238, 129, 190, 26, 83, 61, 190, 238, 24, 166, 190, 55, 180, 188, 188, 237, 112, 53, 190, 133, 48, 107, 190, 28, 16, 72, 190, 177, 89, 164, 189, 62, 200, 30, 190, 174, 53, 161, 60, 69, 48, 194, 61, 196, 236, 235, 189, 107, 245, 8, 62, 27, 206, 164, 62, 169, 156, 169, 61, 99, 255, 10, 63, 78, 254, 192, 62, 37, 15, 26, 187, 163, 15, 179, 189, 59, 13, 242, 60, 95, 77, 1, 191, 117, 55, 47, 190, 173, 187, 25, 188, 41, 81, 46, 61, 131, 60, 227, 190, 140, 186, 80, 190, 192, 13, 25, 190, 159, 79, 66, 191, 3, 39, 19, 61, 55, 159, 116, 189, 49, 12, 43, 62, 225, 232, 89, 190, 197, 205, 61, 61, 160, 249, 34, 59, 173, 47, 11, 63, 152, 32, 143, 189, 232, 128, 120, 62, 182, 106, 116, 190, 7, 9, 130, 62, 35, 199, 140, 190, 222, 193, 114, 61, 246, 65, 226, 62, 94, 146, 7, 62, 214, 23, 229, 62, 26, 223, 94, 62, 222, 117, 34, 62, 134, 53, 219, 189, 37, 235, 197, 62, 121, 128, 35, 189, 180, 68, 37, 189, 103, 111, 31, 189, 141, 145, 147, 58, 235, 84, 58, 189, 184, 21, 44, 190, 165, 192, 58, 62, 24, 196, 30, 62, 87, 228, 39, 62, 90, 118, 175, 190, 112, 239, 211, 189, 228, 219, 245, 190, 252, 154, 133, 190, 38, 254, 61, 190, 197, 52, 151, 189, 212, 220, 207, 61, 224, 175, 187, 62, 131, 254, 109, 62, 151, 125, 33, 62, 97, 201, 166, 62, 245, 142, 84, 189, 19, 214, 59, 61, 234, 98, 203, 61, 134, 225, 143, 190, 244, 110, 166, 190, 199, 146, 42, 62, 44, 24, 140, 62, 49, 110, 252, 186, 120, 222, 143, 188, 41, 76, 23, 190, 4, 110, 83, 190, 155, 239, 82, 190, 56, 72, 33, 62, 7, 234, 188, 190, 130, 34, 149, 190, 232, 172, 187, 61, 71, 178, 132, 189, 7, 161, 45, 189, 76, 177, 63, 190, 158, 44, 124, 62, 148, 78, 27, 190, 216, 231, 181, 61, 70, 9, 82, 189, 176, 168, 26, 62, 157, 108, 50, 61, 61, 100, 93, 191, 9, 125, 96, 189, 109, 240, 141, 60, 201, 193, 199, 62, 245, 141, 233, 188, 50, 121, 136, 62, 249, 44, 150, 62, 231, 69, 147, 190, 193, 41, 28, 62, 40, 165, 44, 190, 139, 156, 8, 191, 172, 214, 133, 190, 13, 132, 134, 61, 67, 199, 134, 61, 152, 87, 230, 189, 86, 45, 219, 62, 207, 122, 56, 61, 199, 215, 211, 190, 63, 58, 227, 62, 206, 94, 225, 61, 15, 16, 220, 61, 118, 126, 102, 59, 230, 244, 93, 190, 88, 21, 152, 61, 7, 123, 229, 61, 104, 107, 101, 190, 161, 30, 56, 62, 78, 44, 250, 190, 222, 231, 142, 61, 223, 164, 140, 190, 21, 120, 131, 62, 17, 240, 101, 61, 140, 76, 136, 187, 37, 115, 61, 61, 177, 89, 51, 189, 231, 48, 5, 62, 142, 117, 141, 61, 181, 70, 147, 190, 224, 66, 133, 62, 86, 91, 13, 62, 193, 65, 8, 190, 142, 189, 79, 62, 163, 36, 129, 190, 69, 82, 57, 190, 213, 233, 55, 62, 164, 125, 131, 188, 250, 200, 231, 62, 116, 43, 94, 62, 181, 175, 123, 60, 150, 3, 224, 61, 250, 73, 144, 62, 183, 211, 9, 62, 94, 210, 153, 189, 15, 27, 22, 190, 191, 245, 3, 62, 187, 99, 234, 61, 211, 217, 118, 189, 77, 241, 10, 62, 123, 99, 173, 61, 211, 218, 77, 190, 233, 8, 157, 189, 120, 10, 32, 190, 4, 112, 189, 188, 162, 49, 214, 60, 225, 197, 210, 190, 164, 96, 76, 61, 3, 173, 140, 188, 212, 238, 76, 62, 226, 11, 124, 190, 162, 223, 194, 189, 70, 216, 25, 190, 138, 101, 52, 191, 6, 96, 186, 61, 9, 21, 51, 190, 116, 38, 247, 62, 150, 48, 186, 61, 207, 105, 255, 190, 126, 158, 79, 62, 77, 63, 199, 191, 43, 77, 157, 190, 147, 183, 126, 191, 12, 96, 47, 62, 24, 28, 57, 190, 49, 159, 215, 187, 208, 85, 99, 188, 181, 197, 4, 62, 62, 89, 190, 190, 121, 47, 16, 62, 0, 122, 132, 60, 247, 238, 25, 191, 176, 66, 109, 191, 125, 219, 39, 188, 201, 185, 224, 62, 186, 68, 176, 62, 128, 203, 3, 62, 72, 141, 107, 189, 238, 173, 108, 188, 196, 132, 165, 189, 178, 128, 134, 188, 141, 120, 18, 189, 231, 199, 48, 62, 28, 243, 131, 190, 230, 177, 21, 190, 154, 149, 74, 61, 84, 133, 114, 190, 192, 232, 45, 189, 109, 195, 132, 61, 91, 195, 60, 190, 154, 22, 175, 62, 8, 116, 2, 61, 93, 7, 128, 189, 103, 175, 169, 62, 76, 124, 71, 62, 114, 140, 36, 190, 103, 49, 152, 62, 120, 154, 7, 62, 226, 126, 165, 189, 237, 242, 220, 60, 53, 53, 234, 60, 207, 84, 202, 190, 60, 176, 82, 62, 206, 13, 211, 188, 124, 222, 83, 62, 136, 156, 20, 191, 6, 40, 177, 61, 254, 134, 31, 190, 184, 169, 3, 190, 77, 224, 13, 189, 228, 118, 228, 189, 144, 109, 243, 61, 73, 22, 166, 61, 165, 242, 184, 62, 201, 110, 86, 62, 154, 190, 56, 190, 135, 0, 144, 61, 42, 67, 178, 62, 141, 57, 28, 62, 60, 84, 213, 61, 117, 158, 131, 190, 178, 132, 86, 190, 247, 6, 131, 190, 234, 230, 38, 190, 148, 37, 101, 189, 200, 6, 46, 191, 147, 4, 81, 191, 102, 202, 23, 190, 214, 206, 147, 189, 223, 167, 200, 62, 1, 68, 126, 62, 225, 177, 127, 190, 69, 222, 109, 189, 179, 66, 166, 61, 38, 120, 254, 190, 199, 68, 211, 61, 223, 190, 166, 61, 239, 152, 166, 62, 46, 16, 85, 60, 82, 33, 136, 61, 9, 12, 226, 62, 92, 31, 88, 191, 204, 117, 145, 190, 128, 180, 158, 187, 211, 147, 254, 190, 90, 235, 238, 61, 33, 234, 10, 190, 192, 142, 134, 190, 207, 100, 125, 62, 100, 211, 151, 190, 64, 187, 84, 190, 196, 50, 187, 62, 241, 109, 66, 190, 119, 51, 242, 190, 247, 120, 225, 189, 175, 225, 16, 62, 100, 193, 135, 62, 135, 197, 151, 61, 70, 236, 213, 61, 51, 36, 203, 190, 46, 242, 2, 62, 118, 250, 195, 62, 252, 220, 195, 189, 250, 150, 0, 191, 159, 62, 38, 61, 107, 219, 37, 62, 4, 154, 125, 62, 190, 218, 234, 61, 60, 136, 172, 190, 131, 119, 107, 189, 240, 188, 6, 191, 78, 45, 241, 189, 93, 183, 164, 190, 79, 235, 109, 62, 94, 200, 146, 61, 193, 191, 152, 61, 48, 12, 29, 63, 150, 55, 172, 62, 40, 187, 172, 190, 178, 34, 134, 191, 137, 151, 222, 190, 222, 91, 245, 189, 188, 59, 195, 62, 248, 177, 159, 191, 103, 253, 99, 62, 251, 231, 132, 62, 51, 51, 118, 190, 69, 191, 167, 61, 230, 163, 34, 192, 127, 63, 117, 190, 114, 89, 219, 190, 180, 27, 188, 62, 61, 161, 86, 61, 141, 115, 6, 190, 247, 21, 170, 62, 119, 219, 57, 62, 133, 27, 32, 191, 176, 229, 35, 61, 198, 156, 47, 62, 123, 136, 108, 190, 186, 210, 185, 190, 141, 31, 144, 61, 139, 240, 42, 62, 149, 226, 219, 62, 52, 5, 160, 190, 54, 157, 251, 62, 79, 140, 187, 62, 161, 195, 153, 61, 92, 180, 147, 60, 11, 252, 168, 62, 104, 212, 21, 62, 239, 153, 155, 62, 147, 111, 52, 62, 46, 14, 33, 63, 52, 180, 39, 189, 176, 134, 42, 62, 144, 4, 105, 189, 73, 139, 209, 189, 13, 97, 41, 191, 131, 229, 13, 190, 11, 133, 248, 189, 110, 234, 201, 60, 45, 105, 157, 191, 151, 150, 125, 61, 111, 45, 214, 61, 123, 158, 181, 62, 17, 38, 144, 62, 235, 200, 40, 191, 136, 140, 138, 61, 58, 67, 81, 62, 77, 77, 38, 191, 139, 79, 161, 61, 7, 140, 230, 61, 15, 235, 210, 62, 180, 216, 147, 190, 155, 201, 211, 189, 66, 237, 174, 62, 84, 121, 150, 191, 41, 114, 19, 190, 134, 37, 1, 190, 105, 69, 135, 62, 77, 158, 193, 62, 226, 152, 194, 189, 58, 193, 93, 191, 154, 231, 74, 189, 148, 151, 140, 190, 22, 171, 51, 59, 93, 24, 99, 191, 39, 161, 115, 61, 197, 27, 47, 62, 247, 252, 22, 191, 9, 70, 111, 61, 179, 227, 237, 191, 105, 86, 10, 190, 145, 153, 140, 191, 182, 125, 210, 62, 46, 88, 17, 62, 75, 206, 183, 189, 51, 99, 189, 61, 238, 24, 159, 62, 77, 66, 182, 190, 0, 60, 69, 62, 136, 29, 223, 189, 39, 110, 170, 190, 224, 154, 30, 190, 224, 206, 129, 61, 13, 34, 108, 62, 78, 229, 64, 62, 25, 187, 114, 61, 150, 159, 1, 62, 32, 166, 159, 62, 247, 141, 41, 190, 185, 250, 12, 190, 196, 22, 229, 189, 72, 86, 150, 189, 100, 199, 29, 62, 120, 47, 208, 190, 76, 131, 133, 190, 20, 162, 173, 189, 253, 76, 42, 62, 10, 134, 207, 62, 103, 219, 168, 190, 242, 9, 29, 190, 35, 118, 68, 191, 234, 55, 139, 190, 136, 122, 60, 190, 41, 151, 33, 59, 183, 157, 27, 62, 62, 9, 110, 190, 98, 142, 254, 60, 33, 224, 21, 191, 180, 207, 63, 61, 49, 235, 219, 60, 217, 79, 214, 189, 125, 173, 244, 190, 71, 93, 81, 58, 213, 192, 67, 188, 120, 109, 13, 61, 144, 35, 1, 190, 71, 245, 13, 61, 55, 136, 232, 190, 196, 37, 174, 190, 154, 218, 69, 189, 92, 61, 232, 61, 2, 72, 17, 190, 40, 204, 170, 59, 162, 161, 153, 61, 50, 219, 206, 61, 115, 130, 90, 188, 5, 145, 249, 189, 47, 202, 214, 189, 173, 191, 37, 190, 21, 242, 215, 61, 57, 119, 6, 190, 44, 51, 220, 61, 91, 129, 33, 190, 152, 185, 134, 61, 120, 200, 72, 190, 60, 200, 42, 190, 1, 170, 60, 189, 186, 81, 30, 62, 8, 75, 80, 62, 180, 166, 129, 61, 164, 120, 218, 61, 178, 220, 242, 61, 255, 112, 126, 61, 27, 234, 162, 189, 53, 58, 209, 61, 235, 9, 180, 61, 93, 206, 1, 190, 179, 220, 236, 189, 254, 36, 104, 61, 102, 203, 28, 190, 100, 52, 172, 61, 13, 93, 253, 189, 69, 195, 224, 61, 171, 133, 178, 60, 112, 36, 39, 62, 210, 244, 233, 61, 103, 118, 63, 191, 27, 214, 223, 189, 33, 252, 189, 190, 4, 216, 224, 186, 132, 187, 98, 191, 51, 225, 169, 189, 161, 176, 242, 188, 148, 92, 23, 190, 78, 9, 28, 62, 244, 43, 241, 191, 223, 4, 208, 61, 133, 62, 167, 190, 35, 162, 94, 62, 39, 61, 91, 61, 111, 108, 11, 62, 66, 46, 94, 62, 132, 69, 136, 61, 182, 252, 225, 190, 236, 38, 156, 61, 247, 161, 155, 189, 180, 197, 50, 190, 16, 26, 86, 190, 200, 249, 62, 61, 60, 21, 133, 62, 216, 61, 168, 62, 173, 56, 133, 62, 191, 192, 162, 61, 237, 157, 126, 62, 8, 115, 210, 189, 11, 95, 200, 62, 66, 128, 235, 190, 101, 137, 129, 190, 13, 46, 172, 61, 62, 18, 138, 62, 73, 196, 41, 190, 192, 226, 206, 189, 168, 146, 135, 191, 154, 67, 77, 190, 131, 148, 111, 61, 228, 18, 112, 190, 29, 144, 160, 62, 74, 17, 1, 192, 177, 98, 15, 191, 151, 90, 65, 191, 54, 31, 160, 61, 96, 238, 140, 61, 179, 84, 141, 190, 134, 213, 15, 62, 241, 159, 46, 62, 89, 254, 51, 191, 253, 252, 16, 61, 6, 193, 201, 61, 76, 61, 26, 190, 218, 124, 203, 190, 176, 137, 56, 189, 37, 103, 128, 62, 117, 16, 243, 188, 193, 234, 23, 190, 204, 61, 169, 62, 29, 86, 120, 189, 134, 51, 125, 189, 250, 39, 25, 188, 191, 143, 26, 190, 48, 72, 49, 190, 136, 234, 88, 190, 142, 202, 243, 60, 116, 171, 125, 189, 141, 79, 20, 190, 75, 61, 146, 61, 72, 49, 60, 190, 54, 62, 174, 190, 124, 19, 44, 62, 1, 167, 173, 61, 62, 40, 9, 62, 232, 97, 85, 62, 5, 11, 216, 61, 35, 155, 153, 189, 196, 84, 78, 61, 23, 77, 42, 62, 146, 112, 25, 60, 223, 55, 132, 190, 246, 219, 167, 189, 155, 220, 55, 191, 14, 245, 83, 190, 196, 13, 197, 61, 224, 219, 163, 61, 21, 122, 76, 191, 120, 104, 128, 189, 113, 97, 11, 190, 0, 140, 24, 191, 48, 151, 67, 188, 253, 59, 97, 190, 120, 86, 180, 61, 219, 252, 238, 189, 62, 194, 45, 190, 32, 108, 193, 62, 190, 17, 217, 188, 43, 61, 204, 62, 166, 37, 70, 62, 89, 31, 176, 190, 161, 168, 161, 61, 62, 46, 175, 190, 227, 204, 182, 190, 100, 172, 138, 62, 92, 77, 156, 62, 236, 177, 205, 62, 46, 247, 192, 61, 62, 170, 56, 62, 98, 217, 136, 190, 5, 177, 38, 63, 1, 23, 178, 190, 204, 144, 143, 189, 179, 58, 21, 191, 142, 132, 239, 60, 206, 236, 92, 62, 3, 56, 88, 189, 219, 91, 173, 62, 207, 100, 127, 62, 249, 108, 193, 61, 75, 86, 203, 190, 71, 187, 108, 190, 33, 47, 246, 190, 9, 160, 24, 62, 39, 199, 231, 190, 174, 67, 135, 189, 244, 204, 214, 60, 225, 156, 254, 62, 157, 237, 86, 59, 131, 67, 71, 190, 38, 125, 89, 61, 138, 49, 14, 63, 141, 167, 208, 61, 3, 136, 72, 61, 62, 104, 154, 189, 2, 157, 131, 188, 224, 95, 222, 190, 233, 148, 109, 188, 191, 118, 191, 190, 186, 109, 48, 191, 248, 217, 66, 191, 163, 73, 9, 188, 118, 139, 137, 190, 229, 226, 156, 62, 87, 184, 139, 62, 0, 159, 103, 190, 240, 184, 72, 188, 140, 126, 104, 186, 135, 101, 14, 191, 245, 86, 58, 62, 96, 38, 242, 188, 26, 6, 135, 62, 214, 13, 251, 189, 46, 110, 161, 61, 76, 214, 229, 62, 46, 3, 138, 191, 114, 68, 133, 190, 253, 214, 36, 189, 138, 238, 45, 190, 2, 66, 68, 63, 73, 43, 19, 62, 250, 160, 14, 63, 192, 226, 181, 61, 145, 77, 191, 61, 148, 59, 204, 59, 133, 142, 64, 62, 106, 119, 177, 190, 120, 183, 40, 190, 225, 12, 28, 188, 18, 135, 40, 62, 211, 227, 43, 62, 75, 83, 202, 62, 188, 167, 198, 189, 105, 247, 53, 190, 83, 199, 183, 62, 199, 185, 109, 62, 235, 242, 131, 61, 28, 100, 199, 61, 168, 40, 217, 61, 110, 85, 20, 62, 251, 206, 171, 61, 79, 100, 63, 62, 122, 223, 63, 61, 249, 147, 163, 188, 73, 81, 45, 61, 164, 100, 43, 190, 146, 46, 95, 61, 117, 21, 16, 188, 148, 142, 139, 190, 92, 240, 94, 61, 74, 45, 226, 61, 112, 172, 45, 62, 237, 30, 11, 190, 33, 227, 100, 191, 138, 89, 142, 190, 214, 134, 2, 190, 104, 74, 4, 190, 200, 2, 14, 191, 50, 64, 159, 61, 61, 223, 6, 62, 226, 94, 105, 190, 45, 181, 183, 61, 124, 55, 17, 192, 176, 100, 123, 60, 212, 211, 85, 189, 24, 180, 175, 189, 28, 56, 203, 189, 20, 200, 164, 190, 240, 173, 79, 62, 230, 211, 16, 189, 65, 236, 241, 190, 125, 5, 177, 61, 2, 240, 114, 62, 246, 46, 103, 190, 56, 222, 134, 189, 236, 95, 222, 61, 204, 203, 229, 60, 162, 130, 45, 62, 241, 212, 94, 190, 130, 93, 132, 62, 21, 193, 71, 62, 179, 45, 13, 190, 155, 253, 32, 190, 88, 43, 199, 190, 247, 218, 248, 189, 28, 106, 94, 61, 75, 39, 30, 191, 244, 164, 246, 190, 137, 220, 34, 62, 206, 106, 196, 188, 239, 14, 131, 62, 104, 13, 81, 190, 85, 51, 243, 61, 60, 35, 231, 190, 4, 113, 68, 190, 48, 61, 9, 62, 107, 70, 224, 188, 237, 6, 123, 61, 100, 205, 253, 190, 77, 123, 238, 190, 123, 248, 98, 191, 202, 162, 13, 61, 27, 99, 194, 61, 87, 208, 63, 62, 139, 53, 57, 63, 12, 4, 181, 189, 44, 251, 28, 62, 188, 95, 86, 62, 184, 5, 54, 190, 24, 158, 22, 62, 33, 254, 148, 191, 199, 59, 61, 191, 235, 180, 60, 190, 211, 221, 150, 189, 28, 160, 29, 62, 32, 217, 108, 62, 68, 133, 246, 59, 235, 157, 249, 61, 112, 2, 41, 62, 248, 151, 69, 189, 53, 213, 213, 188, 208, 149, 62, 62, 110, 33, 191, 189, 201, 183, 32, 59, 188, 87, 10, 62, 40, 180, 133, 61, 148, 146, 22, 61, 192, 87, 5, 61, 76, 196, 132, 191, 93, 126, 199, 61, 25, 25, 243, 189, 174, 51, 236, 62, 66, 132, 79, 190, 254, 119, 25, 61, 130, 164, 79, 189, 132, 188, 184, 190, 240, 108, 80, 191, 18, 63, 18, 186, 161, 65, 222, 61, 233, 254, 250, 188, 199, 174, 36, 189, 183, 228, 1, 62, 115, 30, 155, 62, 133, 214, 114, 191, 35, 105, 68, 190, 23, 50, 21, 190, 56, 173, 128, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 60, 185, 135, 60, 206, 201, 185, 189, 39, 202, 10, 62, 210, 249, 132, 188, 173, 119, 44, 190, 128, 71, 167, 60, 65, 156, 145, 188, 196, 127, 222, 60, 79, 2, 1, 62, 18, 73, 56, 190, 57, 202, 32, 190, 133, 110, 31, 190, 48, 232, 6, 190, 191, 215, 152, 60, 95, 101, 27, 62, 240, 218, 65, 189, 142, 65, 154, 189, 128, 245, 242, 189, 114, 122, 37, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 214, 96, 142, 189, 51, 236, 134, 60, 79, 44, 58, 189, 141, 25, 166, 61, 168, 110, 47, 62, 25, 223, 59, 190, 128, 165, 36, 63, 244, 208, 91, 189, 28, 179, 115, 62, 234, 41, 149, 189, 187, 200, 44, 62, 162, 38, 41, 190, 166, 167, 54, 188, 10, 129, 173, 190, 225, 215, 4, 190, 127, 177, 94, 191, 180, 51, 60, 190, 107, 12, 5, 190, 116, 125, 147, 61, 25, 194, 167, 191, 16, 125, 153, 190, 232, 79, 23, 62, 155, 94, 172, 61, 100, 189, 112, 62, 36, 107, 19, 191, 26, 104, 190, 60, 141, 214, 167, 62, 146, 117, 160, 190, 106, 106, 35, 189, 105, 195, 3, 62, 58, 19, 79, 62, 219, 129, 24, 191, 20, 57, 128, 61, 137, 21, 212, 61, 179, 151, 64, 191, 125, 61, 150, 190, 253, 177, 149, 60, 128, 213, 161, 60, 48, 148, 200, 62, 203, 5, 111, 189, 32, 236, 196, 187, 33, 72, 195, 61, 186, 103, 24, 62, 60, 237, 13, 61, 124, 188, 182, 189, 252, 9, 76, 61, 111, 228, 208, 188, 110, 252, 250, 190, 23, 75, 181, 189, 50, 169, 228, 189, 201, 115, 164, 189, 131, 170, 73, 191, 195, 130, 232, 189, 136, 120, 148, 61, 237, 214, 218, 62, 81, 78, 187, 60, 66, 37, 190, 189, 209, 81, 164, 61, 14, 78, 162, 59, 86, 68, 62, 191, 111, 186, 147, 61, 49, 78, 125, 62, 90, 224, 119, 62, 75, 144, 82, 189, 90, 244, 158, 61, 21, 126, 62, 62, 124, 213, 166, 191, 16, 30, 131, 190, 127, 201, 193, 61, 106, 252, 185, 189, 225, 106, 135, 189, 60, 52, 84, 189, 198, 38, 163, 60, 207, 149, 205, 62, 77, 142, 5, 191, 172, 50, 131, 190, 100, 104, 56, 62, 61, 44, 255, 190, 113, 17, 229, 190, 225, 185, 113, 62, 50, 136, 172, 62, 160, 168, 173, 62, 32, 80, 165, 62, 180, 65, 70, 62, 75, 37, 221, 60, 70, 199, 229, 62, 99, 89, 77, 62, 144, 52, 189, 61, 172, 160, 139, 190, 69, 148, 48, 62, 41, 211, 72, 62, 252, 124, 154, 61, 249, 141, 144, 62, 229, 192, 34, 190, 13, 173, 239, 189, 191, 247, 12, 191, 211, 136, 134, 190, 89, 17, 237, 61, 142, 86, 24, 62, 43, 174, 199, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 52, 149, 190, 93, 89, 174, 61, 116, 225, 105, 62, 224, 139, 220, 61, 151, 153, 127, 60, 38, 214, 105, 190, 22, 24, 231, 61, 11, 158, 48, 62, 61, 193, 223, 61, 113, 146, 22, 62, 71, 246, 86, 62, 73, 90, 47, 190, 109, 224, 119, 61, 56, 86, 159, 61, 235, 38, 148, 61, 11, 44, 51, 62, 47, 60, 10, 62, 223, 204, 133, 190, 255, 87, 9, 190, 242, 156, 36, 62, 130, 181, 161, 189, 232, 210, 236, 188, 103, 187, 134, 62, 59, 200, 44, 61, 101, 152, 124, 62, 120, 23, 93, 60, 69, 151, 200, 189, 137, 16, 80, 190, 30, 94, 70, 60, 102, 58, 112, 62, 48, 27, 105, 61, 35, 45, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 226, 38, 190, 239, 55, 223, 61, 185, 205, 158, 190, 228, 42, 79, 190, 211, 94, 159, 62, 185, 193, 123, 190, 99, 130, 208, 62, 228, 3, 192, 190, 16, 7, 134, 62, 66, 204, 131, 62, 168, 29, 129, 191, 25, 213, 166, 190, 246, 139, 251, 190, 60, 14, 29, 63, 79, 94, 160, 191, 55, 65, 13, 191, 198, 207, 84, 191, 13, 200, 45, 63, 81, 45, 139, 61, 171, 137, 154, 190, 47, 198, 106, 191, 73, 122, 142, 190, 251, 233, 15, 63, 251, 116, 220, 190, 21, 239, 53, 62, 8, 140, 241, 190, 177, 23, 108, 63, 17, 7, 0, 191, 86, 98, 120, 61, 102, 83, 7, 191, 167, 200, 216, 190, 171, 193, 11, 63, 62, 3, 163, 61, 219, 167, 11, 190, 60, 188, 180, 190, 210, 246, 165, 189, 239, 178, 224, 60, 79, 152, 139, 62, 29, 64, 141, 62, 234, 169, 102, 189, 124, 6, 164, 190, 189, 187, 191, 60, 159, 29, 34, 63, 173, 25, 211, 62, 245, 100, 64, 62, 73, 92, 206, 189, 3, 18, 147, 62, 51, 13, 66, 189, 134, 206, 48, 190, 175, 88, 232, 62, 41, 155, 171, 189, 169, 123, 194, 190, 169, 239, 138, 62, 102, 243, 55, 62, 202, 223, 168, 62, 177, 245, 147, 62, 149, 163, 132, 190, 250, 71, 50, 190, 24, 160, 76, 61, 215, 44, 55, 190, 5, 31, 219, 61, 159, 159, 194, 190, 30, 37, 12, 61, 24, 56, 238, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 200, 211, 60, 171, 70, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 246, 129, 191, 33, 205, 89, 191, 191, 174, 28, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {16, 68, 130, 61, 45, 176, 209, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}