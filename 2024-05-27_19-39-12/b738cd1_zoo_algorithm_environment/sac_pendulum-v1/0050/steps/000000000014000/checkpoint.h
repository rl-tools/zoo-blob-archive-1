// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 91, 131, 62, 169, 235, 175, 60, 189, 180, 28, 189, 175, 114, 142, 190, 51, 130, 255, 190, 103, 93, 128, 62, 183, 210, 174, 62, 227, 148, 16, 62, 217, 248, 237, 189, 244, 42, 98, 189, 68, 62, 32, 63, 195, 183, 33, 191, 194, 233, 9, 63, 239, 6, 53, 189, 238, 218, 87, 190, 98, 209, 224, 190, 250, 62, 74, 191, 234, 123, 185, 62, 197, 40, 81, 190, 247, 100, 137, 63, 8, 62, 175, 190, 137, 34, 79, 61, 88, 68, 193, 62, 155, 145, 242, 62, 194, 77, 2, 190, 126, 0, 168, 63, 120, 156, 149, 62, 128, 77, 51, 62, 127, 143, 70, 63, 64, 24, 89, 62, 15, 7, 108, 190, 87, 143, 63, 63, 187, 12, 251, 190, 57, 157, 50, 61, 6, 80, 178, 191, 161, 165, 219, 190, 54, 175, 145, 190, 151, 217, 79, 191, 124, 181, 21, 61, 221, 161, 152, 190, 109, 254, 178, 63, 33, 204, 170, 62, 197, 97, 21, 63, 229, 140, 155, 191, 0, 19, 140, 190, 19, 65, 216, 189, 133, 206, 168, 191, 74, 37, 138, 190, 157, 30, 155, 62, 87, 244, 11, 63, 8, 51, 62, 62, 226, 208, 39, 63, 84, 210, 237, 190, 88, 78, 145, 60, 1, 15, 178, 62, 23, 23, 136, 191, 64, 199, 226, 61, 170, 10, 194, 189, 89, 219, 151, 62, 40, 234, 161, 190, 48, 106, 196, 189, 225, 225, 188, 189, 40, 241, 84, 191, 94, 11, 191, 190, 151, 166, 102, 63, 67, 244, 40, 63, 68, 37, 18, 191, 243, 44, 233, 62, 10, 121, 168, 189, 119, 76, 46, 191, 231, 1, 161, 190, 145, 30, 39, 190, 159, 86, 52, 190, 40, 118, 210, 62, 225, 32, 23, 191, 15, 75, 58, 62, 114, 239, 117, 62, 250, 67, 27, 191, 175, 43, 0, 191, 219, 30, 103, 63, 169, 85, 105, 189, 243, 31, 195, 190, 166, 207, 81, 191, 202, 190, 17, 191, 88, 147, 161, 62, 138, 221, 107, 63, 54, 21, 195, 62, 20, 123, 79, 63, 80, 123, 66, 188, 80, 78, 75, 62, 196, 117, 38, 191, 127, 124, 147, 191, 9, 226, 119, 190, 96, 230, 17, 191, 165, 55, 202, 189, 109, 251, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 13, 35, 191, 64, 110, 144, 190, 96, 251, 232, 62, 31, 225, 77, 61, 189, 205, 66, 191, 16, 199, 164, 190, 5, 216, 136, 61, 7, 239, 139, 190, 158, 40, 72, 190, 107, 236, 72, 190, 18, 204, 68, 190, 115, 47, 54, 190, 196, 102, 23, 63, 232, 4, 229, 190, 49, 46, 191, 61, 146, 56, 175, 58, 106, 181, 141, 190, 215, 167, 244, 189, 189, 18, 3, 191, 24, 164, 26, 63, 70, 65, 198, 190, 91, 254, 166, 190, 135, 248, 50, 63, 113, 244, 48, 63, 41, 17, 31, 190, 35, 202, 170, 60, 125, 67, 148, 62, 46, 80, 168, 189, 220, 208, 179, 190, 203, 181, 14, 191, 0, 168, 218, 62, 64, 132, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 233, 189, 4, 179, 190, 189, 253, 162, 98, 190, 56, 104, 148, 61, 188, 121, 102, 62, 82, 206, 178, 189, 170, 179, 8, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 109, 1, 101, 190, 101, 115, 218, 189, 92, 246, 21, 189, 245, 109, 2, 190, 181, 129, 67, 60, 235, 205, 159, 60, 20, 89, 251, 61, 25, 205, 192, 189, 247, 14, 203, 61, 21, 19, 48, 61, 124, 212, 255, 61, 175, 88, 115, 61, 164, 10, 252, 190, 133, 248, 227, 189, 179, 135, 129, 188, 132, 134, 62, 189, 97, 154, 232, 190, 244, 100, 210, 188, 4, 33, 207, 189, 3, 59, 147, 61, 28, 210, 159, 61, 164, 137, 217, 187, 237, 99, 6, 62, 252, 92, 224, 189, 193, 249, 223, 62, 36, 136, 132, 62, 230, 93, 179, 62, 67, 115, 111, 187, 92, 84, 28, 189, 6, 189, 115, 60, 90, 106, 252, 59, 113, 210, 65, 191, 237, 22, 35, 188, 114, 45, 137, 189, 168, 21, 8, 62, 36, 118, 145, 61, 93, 94, 198, 62, 120, 30, 227, 189, 118, 26, 190, 190, 217, 171, 19, 62, 140, 78, 139, 62, 120, 254, 203, 188, 233, 90, 254, 189, 227, 15, 46, 189, 163, 222, 3, 190, 105, 137, 235, 61, 44, 139, 9, 61, 134, 139, 6, 61, 235, 253, 194, 61, 131, 155, 238, 61, 73, 169, 225, 190, 125, 186, 231, 189, 182, 86, 14, 189, 243, 167, 113, 189, 206, 4, 208, 60, 0, 240, 150, 190, 209, 179, 218, 62, 127, 205, 23, 62, 187, 137, 8, 191, 244, 189, 168, 190, 50, 103, 150, 62, 11, 19, 89, 189, 217, 20, 124, 61, 232, 204, 99, 190, 239, 144, 178, 60, 9, 129, 22, 191, 178, 68, 110, 189, 165, 177, 32, 189, 230, 164, 61, 187, 87, 158, 131, 191, 87, 58, 20, 189, 10, 251, 107, 62, 71, 252, 5, 61, 4, 193, 191, 60, 207, 188, 173, 190, 139, 104, 78, 62, 179, 211, 249, 60, 53, 150, 171, 190, 239, 92, 165, 62, 52, 245, 47, 62, 243, 103, 145, 62, 2, 91, 150, 189, 176, 9, 47, 189, 35, 92, 248, 61, 80, 241, 33, 191, 235, 184, 194, 190, 93, 170, 233, 189, 0, 183, 211, 59, 0, 227, 253, 60, 177, 18, 16, 190, 9, 240, 173, 61, 244, 29, 141, 61, 117, 102, 248, 187, 124, 225, 164, 189, 250, 100, 12, 62, 89, 235, 183, 189, 132, 219, 144, 190, 188, 127, 130, 190, 167, 240, 153, 62, 148, 201, 127, 61, 209, 143, 16, 190, 199, 110, 115, 191, 33, 217, 146, 189, 89, 23, 17, 190, 228, 34, 228, 61, 33, 120, 189, 190, 103, 69, 173, 190, 192, 236, 77, 188, 113, 137, 172, 190, 144, 145, 3, 191, 143, 116, 222, 188, 242, 50, 218, 190, 12, 69, 50, 190, 95, 82, 193, 190, 75, 186, 23, 61, 20, 163, 181, 62, 134, 234, 16, 191, 141, 76, 227, 190, 121, 47, 134, 189, 142, 75, 115, 61, 218, 1, 47, 59, 39, 241, 114, 62, 168, 169, 89, 62, 196, 152, 142, 62, 28, 228, 25, 62, 74, 6, 161, 190, 76, 154, 146, 62, 179, 20, 14, 190, 58, 151, 75, 190, 101, 242, 90, 62, 238, 209, 18, 62, 247, 2, 84, 62, 28, 210, 65, 62, 29, 191, 205, 189, 55, 162, 142, 62, 142, 118, 178, 62, 117, 93, 24, 190, 35, 178, 67, 62, 18, 159, 19, 190, 219, 248, 53, 62, 217, 9, 152, 188, 164, 90, 174, 189, 180, 20, 140, 61, 187, 138, 124, 62, 88, 84, 19, 60, 170, 6, 226, 189, 128, 221, 103, 190, 251, 23, 140, 190, 10, 54, 146, 190, 225, 165, 153, 190, 224, 3, 13, 62, 22, 254, 147, 189, 147, 141, 116, 190, 146, 157, 58, 189, 12, 28, 139, 189, 36, 193, 148, 61, 235, 246, 46, 190, 107, 185, 146, 190, 28, 16, 72, 190, 42, 123, 173, 189, 135, 116, 48, 189, 95, 228, 75, 61, 87, 73, 171, 61, 196, 236, 235, 189, 79, 48, 45, 62, 3, 23, 175, 62, 184, 177, 169, 61, 51, 239, 29, 63, 50, 237, 237, 62, 108, 48, 56, 188, 2, 211, 217, 189, 124, 119, 32, 61, 146, 243, 75, 191, 142, 196, 85, 190, 133, 162, 173, 61, 233, 164, 41, 62, 131, 60, 227, 190, 245, 175, 135, 190, 252, 248, 98, 190, 230, 204, 191, 191, 212, 57, 195, 60, 215, 123, 2, 190, 49, 12, 43, 62, 157, 235, 115, 190, 50, 1, 177, 61, 40, 6, 55, 61, 72, 75, 57, 63, 147, 33, 3, 190, 146, 222, 150, 62, 37, 45, 98, 190, 143, 70, 173, 62, 85, 67, 60, 190, 36, 240, 214, 61, 188, 192, 220, 62, 51, 252, 228, 61, 129, 11, 205, 62, 91, 124, 82, 62, 48, 216, 197, 61, 52, 77, 243, 58, 198, 56, 193, 62, 46, 200, 214, 61, 224, 102, 128, 187, 95, 130, 12, 188, 220, 8, 129, 189, 132, 28, 193, 188, 242, 206, 100, 190, 149, 118, 93, 62, 54, 32, 58, 62, 135, 21, 98, 62, 55, 120, 168, 190, 250, 128, 81, 189, 49, 25, 228, 190, 251, 159, 160, 190, 197, 94, 48, 190, 197, 52, 151, 189, 126, 127, 161, 61, 129, 43, 184, 62, 137, 241, 92, 62, 205, 53, 159, 62, 241, 32, 164, 62, 216, 213, 150, 189, 226, 186, 253, 60, 233, 40, 189, 61, 227, 9, 143, 190, 44, 112, 227, 190, 233, 179, 98, 62, 191, 35, 136, 62, 254, 70, 107, 60, 252, 234, 141, 188, 109, 141, 15, 190, 149, 35, 91, 190, 214, 69, 100, 190, 151, 77, 196, 61, 13, 115, 197, 190, 225, 65, 228, 190, 99, 144, 212, 61, 106, 220, 207, 189, 104, 191, 65, 189, 58, 236, 147, 190, 27, 123, 145, 62, 62, 213, 201, 189, 26, 38, 22, 61, 238, 62, 107, 189, 34, 117, 238, 61, 81, 68, 255, 187, 136, 232, 107, 191, 9, 125, 96, 189, 189, 148, 146, 188, 101, 136, 198, 62, 174, 85, 197, 188, 25, 198, 76, 62, 178, 123, 122, 62, 95, 173, 153, 190, 127, 242, 216, 61, 63, 197, 144, 190, 174, 151, 80, 191, 243, 225, 136, 190, 230, 97, 181, 61, 251, 30, 144, 61, 118, 246, 5, 190, 128, 34, 229, 62, 42, 216, 94, 61, 132, 74, 70, 191, 202, 254, 219, 62, 204, 177, 8, 62, 89, 146, 245, 61, 1, 14, 138, 60, 129, 16, 146, 190, 123, 180, 10, 61, 146, 75, 11, 62, 16, 73, 100, 190, 60, 127, 57, 62, 57, 70, 5, 191, 211, 79, 202, 61, 253, 135, 197, 190, 54, 194, 121, 62, 126, 117, 152, 61, 214, 34, 235, 188, 37, 115, 61, 61, 205, 191, 12, 189, 106, 22, 16, 62, 197, 251, 155, 61, 82, 22, 195, 190, 61, 230, 128, 62, 71, 105, 35, 62, 112, 199, 10, 190, 177, 228, 104, 62, 186, 104, 123, 190, 249, 98, 67, 190, 55, 227, 62, 62, 217, 77, 95, 188, 17, 239, 210, 62, 162, 200, 88, 62, 201, 24, 152, 60, 111, 68, 243, 61, 126, 46, 152, 62, 190, 165, 67, 62, 164, 251, 96, 189, 168, 183, 38, 190, 45, 152, 188, 61, 227, 106, 27, 62, 40, 235, 108, 189, 0, 55, 4, 62, 27, 201, 128, 61, 247, 106, 74, 190, 49, 171, 148, 189, 32, 14, 36, 190, 70, 13, 0, 188, 30, 239, 115, 61, 177, 130, 251, 190, 164, 96, 76, 61, 41, 124, 186, 58, 35, 148, 64, 62, 197, 163, 45, 190, 162, 223, 194, 189, 160, 106, 241, 189, 137, 120, 82, 191, 202, 19, 197, 61, 74, 178, 36, 191, 33, 2, 166, 62, 3, 172, 194, 61, 52, 184, 206, 190, 116, 235, 111, 62, 225, 209, 207, 191, 120, 96, 138, 190, 36, 70, 124, 191, 135, 7, 153, 188, 63, 227, 27, 190, 47, 203, 66, 61, 107, 186, 190, 189, 51, 223, 247, 61, 142, 42, 185, 190, 159, 218, 96, 61, 5, 68, 248, 188, 173, 204, 24, 191, 98, 15, 131, 191, 229, 166, 202, 189, 176, 162, 203, 62, 230, 246, 131, 62, 206, 74, 4, 62, 211, 148, 12, 190, 114, 201, 135, 189, 196, 132, 165, 189, 241, 194, 99, 189, 232, 73, 230, 189, 87, 211, 35, 62, 29, 111, 4, 190, 117, 116, 44, 190, 153, 84, 223, 60, 133, 230, 135, 190, 253, 2, 41, 189, 11, 139, 217, 62, 238, 207, 39, 190, 16, 105, 191, 62, 82, 183, 1, 188, 93, 7, 128, 189, 217, 46, 147, 62, 85, 34, 104, 62, 57, 222, 15, 62, 176, 97, 131, 62, 23, 201, 145, 61, 17, 47, 20, 190, 183, 101, 85, 61, 22, 104, 93, 59, 166, 153, 217, 190, 160, 188, 90, 62, 153, 32, 183, 187, 233, 118, 65, 62, 161, 238, 21, 191, 235, 249, 237, 61, 91, 177, 77, 190, 176, 215, 63, 190, 188, 126, 54, 187, 2, 248, 177, 188, 144, 109, 243, 61, 63, 20, 151, 61, 134, 130, 176, 62, 22, 33, 89, 62, 122, 249, 171, 190, 151, 131, 157, 61, 120, 248, 188, 62, 171, 215, 27, 62, 81, 49, 104, 61, 202, 133, 139, 190, 173, 235, 75, 190, 136, 107, 253, 190, 90, 99, 31, 190, 103, 21, 76, 189, 69, 157, 66, 191, 214, 131, 142, 191, 37, 247, 23, 190, 105, 23, 40, 190, 29, 224, 210, 62, 113, 203, 130, 62, 92, 152, 120, 190, 65, 77, 55, 189, 249, 150, 179, 61, 199, 203, 239, 190, 182, 141, 227, 61, 69, 140, 143, 61, 18, 155, 203, 62, 237, 193, 116, 60, 84, 77, 118, 61, 115, 21, 13, 63, 27, 114, 83, 191, 199, 214, 109, 190, 128, 180, 158, 187, 26, 216, 0, 191, 181, 190, 234, 61, 8, 29, 139, 190, 192, 142, 134, 190, 113, 38, 104, 62, 247, 235, 23, 191, 195, 168, 67, 190, 254, 16, 198, 62, 8, 151, 55, 190, 124, 65, 91, 191, 0, 197, 78, 190, 206, 171, 22, 62, 220, 226, 152, 62, 79, 1, 133, 61, 120, 87, 159, 61, 65, 37, 195, 190, 134, 117, 3, 62, 44, 77, 190, 62, 191, 26, 226, 189, 199, 218, 230, 190, 190, 102, 23, 61, 34, 155, 67, 62, 147, 223, 122, 62, 218, 189, 96, 187, 65, 211, 209, 190, 82, 215, 252, 189, 106, 224, 246, 190, 20, 24, 222, 189, 178, 13, 166, 190, 122, 124, 154, 62, 126, 211, 2, 62, 193, 191, 152, 61, 169, 227, 26, 63, 104, 53, 159, 62, 228, 71, 182, 190, 75, 205, 156, 191, 229, 176, 217, 190, 112, 145, 39, 190, 57, 58, 191, 62, 226, 6, 192, 191, 146, 245, 216, 62, 87, 135, 109, 62, 91, 179, 72, 190, 199, 173, 162, 61, 255, 72, 41, 192, 12, 44, 120, 190, 53, 116, 185, 190, 195, 88, 248, 62, 112, 43, 54, 61, 79, 250, 141, 190, 120, 3, 156, 62, 54, 87, 49, 62, 113, 82, 22, 191, 49, 101, 62, 61, 2, 203, 91, 62, 8, 163, 118, 190, 164, 73, 189, 190, 69, 56, 238, 187, 212, 49, 54, 62, 3, 174, 210, 62, 73, 27, 170, 190, 9, 90, 16, 63, 39, 7, 199, 62, 161, 195, 153, 61, 243, 25, 179, 60, 203, 151, 160, 62, 91, 234, 23, 62, 37, 115, 79, 62, 147, 177, 72, 62, 134, 103, 39, 63, 144, 227, 245, 188, 66, 201, 1, 62, 143, 51, 152, 189, 200, 99, 154, 189, 21, 152, 87, 191, 85, 198, 230, 189, 106, 52, 188, 189, 17, 24, 102, 60, 114, 251, 169, 191, 30, 198, 50, 61, 130, 117, 173, 61, 145, 206, 180, 62, 166, 24, 139, 62, 34, 46, 35, 191, 89, 50, 211, 61, 146, 206, 85, 62, 109, 5, 21, 191, 75, 155, 202, 61, 231, 238, 237, 61, 209, 210, 255, 62, 68, 29, 142, 190, 68, 190, 212, 189, 143, 70, 179, 62, 146, 97, 157, 191, 76, 122, 128, 189, 134, 37, 1, 190, 229, 102, 154, 62, 206, 124, 208, 62, 156, 23, 151, 189, 102, 140, 129, 191, 95, 28, 55, 58, 195, 204, 106, 190, 173, 161, 35, 61, 108, 104, 147, 191, 10, 168, 15, 62, 193, 79, 48, 62, 246, 31, 60, 191, 60, 195, 173, 61, 156, 92, 1, 192, 140, 178, 250, 189, 234, 10, 148, 191, 177, 179, 235, 62, 6, 75, 50, 62, 68, 247, 150, 189, 20, 133, 238, 61, 175, 120, 141, 62, 91, 52, 142, 190, 163, 147, 110, 62, 243, 171, 252, 189, 178, 166, 171, 190, 8, 150, 250, 189, 208, 32, 235, 61, 167, 67, 30, 62, 69, 225, 98, 62, 76, 81, 162, 61, 156, 57, 37, 188, 66, 115, 129, 62, 247, 141, 41, 190, 142, 210, 194, 190, 69, 18, 59, 61, 72, 86, 150, 189, 100, 199, 29, 62, 19, 11, 35, 191, 114, 149, 233, 190, 128, 117, 129, 189, 46, 135, 91, 62, 37, 173, 230, 62, 103, 219, 168, 190, 242, 9, 29, 190, 20, 9, 110, 191, 200, 27, 103, 190, 136, 122, 60, 190, 41, 151, 33, 59, 215, 6, 65, 62, 73, 144, 53, 190, 71, 19, 255, 60, 28, 134, 58, 191, 180, 207, 63, 61, 246, 193, 87, 61, 193, 31, 183, 188, 61, 127, 178, 190, 71, 93, 81, 58, 213, 192, 67, 188, 208, 23, 13, 62, 144, 35, 1, 190, 201, 122, 147, 61, 23, 128, 241, 190, 196, 37, 174, 190, 154, 218, 69, 189, 92, 61, 232, 61, 2, 72, 17, 190, 176, 116, 217, 188, 69, 47, 49, 61, 18, 143, 198, 61, 115, 130, 90, 188, 89, 77, 29, 190, 47, 202, 214, 189, 173, 191, 37, 190, 21, 242, 215, 61, 238, 59, 38, 190, 15, 125, 207, 61, 91, 129, 33, 190, 152, 185, 134, 61, 32, 213, 101, 190, 60, 200, 42, 190, 1, 170, 60, 189, 55, 251, 17, 62, 8, 75, 80, 62, 250, 58, 1, 61, 110, 112, 153, 61, 178, 220, 242, 61, 166, 242, 62, 61, 105, 2, 183, 189, 219, 48, 144, 61, 55, 255, 101, 61, 158, 107, 13, 190, 57, 136, 8, 190, 254, 36, 104, 61, 102, 203, 28, 190, 100, 52, 172, 61, 221, 228, 2, 190, 69, 195, 224, 61, 202, 138, 84, 188, 245, 57, 42, 62, 86, 178, 9, 62, 163, 130, 126, 191, 124, 149, 6, 190, 208, 100, 169, 190, 42, 37, 175, 188, 20, 157, 128, 191, 196, 14, 255, 188, 245, 43, 133, 188, 95, 73, 40, 190, 122, 60, 5, 62, 107, 69, 2, 192, 211, 8, 194, 61, 89, 30, 165, 190, 110, 57, 116, 62, 106, 52, 62, 61, 132, 157, 53, 61, 28, 73, 105, 62, 81, 87, 110, 61, 31, 62, 203, 190, 111, 35, 222, 61, 41, 182, 128, 189, 168, 42, 39, 190, 51, 185, 55, 190, 206, 37, 173, 61, 174, 21, 118, 62, 224, 31, 180, 62, 210, 215, 115, 62, 183, 121, 164, 61, 8, 74, 117, 62, 8, 115, 210, 189, 158, 40, 213, 62, 126, 208, 0, 191, 145, 136, 160, 190, 13, 46, 172, 61, 248, 136, 154, 62, 252, 180, 81, 190, 56, 77, 176, 189, 87, 219, 139, 191, 93, 71, 119, 190, 3, 23, 171, 59, 114, 137, 146, 190, 226, 59, 161, 62, 69, 111, 4, 192, 199, 91, 22, 191, 61, 123, 71, 191, 163, 50, 211, 61, 92, 215, 173, 61, 240, 190, 165, 190, 181, 202, 164, 61, 108, 239, 227, 61, 76, 209, 38, 191, 171, 90, 213, 60, 227, 188, 184, 61, 164, 235, 81, 190, 180, 205, 231, 190, 6, 81, 175, 189, 132, 40, 70, 62, 18, 208, 35, 190, 0, 231, 12, 190, 119, 196, 165, 62, 137, 211, 9, 190, 134, 51, 125, 189, 245, 187, 157, 61, 23, 27, 25, 190, 224, 234, 48, 189, 209, 85, 194, 60, 48, 221, 250, 61, 240, 73, 1, 189, 151, 170, 97, 190, 75, 61, 146, 61, 40, 248, 60, 190, 115, 200, 87, 190, 66, 77, 93, 62, 230, 18, 171, 61, 62, 40, 9, 62, 61, 251, 126, 62, 226, 128, 18, 62, 35, 155, 153, 189, 241, 5, 246, 61, 4, 149, 143, 62, 9, 102, 27, 188, 107, 242, 142, 190, 213, 251, 207, 189, 21, 179, 124, 191, 98, 192, 103, 190, 107, 1, 56, 62, 133, 218, 77, 62, 21, 122, 76, 191, 82, 35, 217, 189, 149, 195, 99, 190, 39, 151, 186, 191, 30, 112, 185, 186, 23, 55, 170, 190, 120, 86, 180, 61, 152, 113, 25, 190, 244, 242, 44, 190, 87, 135, 194, 62, 118, 177, 135, 189, 164, 149, 180, 62, 92, 237, 65, 62, 66, 91, 181, 190, 119, 15, 94, 62, 138, 222, 147, 190, 170, 13, 189, 190, 51, 145, 157, 62, 217, 55, 143, 62, 244, 2, 249, 62, 201, 5, 188, 61, 54, 158, 103, 62, 114, 27, 91, 190, 131, 163, 37, 63, 142, 149, 200, 190, 67, 189, 125, 189, 24, 243, 23, 191, 212, 2, 93, 185, 1, 216, 139, 62, 10, 157, 247, 188, 18, 199, 169, 62, 21, 67, 100, 62, 51, 192, 234, 61, 162, 180, 189, 190, 170, 57, 96, 190, 188, 191, 6, 191, 130, 88, 111, 62, 165, 102, 247, 190, 174, 67, 135, 189, 36, 213, 221, 60, 86, 205, 249, 62, 68, 51, 6, 188, 241, 15, 177, 190, 54, 104, 130, 61, 150, 199, 17, 63, 9, 141, 191, 61, 245, 255, 50, 189, 128, 40, 203, 189, 34, 59, 233, 187, 39, 108, 49, 191, 251, 159, 104, 188, 16, 83, 199, 190, 137, 119, 76, 191, 165, 121, 141, 191, 166, 13, 115, 188, 215, 198, 203, 190, 212, 148, 167, 62, 117, 65, 142, 62, 164, 93, 93, 190, 46, 61, 89, 187, 223, 161, 244, 188, 222, 122, 18, 191, 1, 81, 58, 62, 150, 87, 82, 189, 223, 15, 157, 62, 91, 193, 238, 189, 138, 43, 126, 61, 19, 102, 19, 63, 4, 37, 147, 191, 87, 206, 70, 190, 253, 214, 36, 189, 236, 161, 10, 190, 116, 158, 72, 63, 122, 211, 34, 62, 97, 138, 8, 63, 197, 57, 218, 61, 223, 33, 233, 61, 32, 230, 192, 60, 227, 126, 72, 62, 12, 185, 185, 190, 159, 254, 23, 190, 135, 83, 25, 188, 14, 159, 73, 62, 218, 127, 26, 62, 147, 22, 208, 62, 129, 188, 5, 190, 28, 233, 97, 190, 4, 181, 185, 62, 0, 123, 151, 62, 187, 116, 172, 61, 75, 141, 218, 61, 218, 122, 218, 61, 50, 246, 29, 62, 37, 241, 183, 61, 79, 19, 72, 62, 15, 69, 112, 61, 255, 156, 31, 188, 145, 107, 63, 61, 83, 84, 44, 190, 245, 6, 202, 60, 191, 222, 3, 189, 101, 213, 150, 190, 92, 240, 94, 61, 97, 240, 78, 62, 3, 171, 59, 62, 107, 137, 211, 189, 238, 183, 147, 191, 2, 75, 61, 190, 21, 176, 150, 189, 50, 252, 45, 190, 91, 234, 29, 191, 53, 73, 196, 62, 139, 241, 30, 62, 128, 178, 133, 190, 160, 226, 172, 61, 150, 47, 28, 192, 32, 239, 221, 59, 142, 12, 37, 189, 33, 171, 12, 62, 79, 121, 210, 189, 94, 197, 214, 190, 250, 235, 98, 62, 120, 27, 30, 189, 216, 1, 231, 190, 129, 52, 25, 62, 249, 116, 136, 62, 248, 88, 80, 190, 102, 197, 230, 188, 43, 150, 36, 62, 136, 93, 22, 60, 36, 8, 60, 62, 231, 44, 129, 190, 36, 93, 137, 62, 186, 206, 72, 62, 179, 45, 13, 190, 221, 215, 132, 190, 197, 87, 214, 190, 94, 64, 61, 190, 28, 106, 94, 61, 143, 16, 60, 191, 158, 23, 17, 191, 118, 76, 52, 62, 2, 234, 93, 187, 218, 178, 139, 62, 41, 135, 140, 190, 85, 51, 243, 61, 164, 150, 11, 191, 186, 23, 39, 190, 48, 61, 9, 62, 107, 70, 224, 188, 52, 188, 157, 61, 119, 250, 243, 190, 77, 123, 238, 190, 64, 107, 114, 191, 202, 162, 13, 61, 34, 125, 235, 61, 132, 226, 74, 62, 245, 254, 55, 63, 12, 4, 181, 189, 44, 251, 28, 62, 237, 126, 120, 62, 184, 5, 54, 190, 101, 208, 40, 62, 250, 24, 149, 191, 6, 117, 66, 191, 235, 180, 60, 190, 211, 221, 150, 189, 53, 0, 45, 62, 149, 231, 155, 62, 68, 133, 246, 59, 235, 157, 249, 61, 190, 225, 70, 62, 163, 111, 235, 189, 88, 229, 130, 188, 136, 91, 24, 62, 49, 162, 221, 189, 201, 183, 32, 59, 188, 87, 10, 62, 141, 86, 198, 61, 22, 140, 38, 59, 132, 88, 138, 60, 177, 208, 169, 191, 51, 72, 184, 61, 252, 211, 103, 190, 228, 65, 254, 62, 227, 34, 154, 190, 254, 119, 25, 61, 195, 96, 32, 189, 148, 33, 6, 191, 185, 208, 102, 191, 18, 63, 18, 186, 161, 65, 222, 61, 92, 181, 174, 189, 199, 174, 36, 189, 142, 192, 255, 61, 61, 201, 176, 62, 102, 11, 140, 191, 35, 105, 68, 190, 23, 50, 21, 190, 56, 173, 128, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 60, 185, 135, 60, 206, 201, 185, 189, 39, 202, 10, 62, 210, 249, 132, 188, 173, 119, 44, 190, 128, 71, 167, 60, 65, 156, 145, 188, 196, 127, 222, 60, 79, 2, 1, 62, 18, 73, 56, 190, 57, 202, 32, 190, 133, 110, 31, 190, 48, 232, 6, 190, 191, 215, 152, 60, 95, 101, 27, 62, 240, 218, 65, 189, 142, 65, 154, 189, 128, 245, 242, 189, 114, 122, 37, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 214, 96, 142, 189, 51, 236, 134, 60, 79, 44, 58, 189, 141, 25, 166, 61, 168, 110, 47, 62, 235, 187, 147, 189, 60, 129, 34, 63, 220, 248, 181, 187, 46, 172, 227, 62, 50, 71, 145, 61, 44, 124, 86, 62, 129, 163, 10, 190, 219, 134, 27, 190, 107, 172, 244, 190, 68, 166, 140, 189, 152, 81, 124, 191, 189, 168, 18, 190, 208, 43, 154, 189, 179, 79, 200, 61, 148, 119, 166, 191, 228, 154, 235, 190, 67, 6, 44, 62, 45, 248, 19, 62, 118, 3, 112, 62, 164, 95, 241, 190, 14, 160, 10, 62, 107, 114, 171, 62, 255, 102, 91, 190, 46, 65, 0, 61, 199, 59, 66, 62, 212, 240, 101, 62, 228, 230, 251, 190, 201, 22, 185, 188, 198, 98, 193, 61, 69, 71, 50, 191, 213, 94, 0, 190, 253, 177, 149, 60, 224, 89, 127, 187, 78, 111, 204, 62, 112, 145, 129, 189, 182, 55, 70, 189, 19, 111, 176, 61, 180, 8, 9, 62, 204, 237, 70, 60, 58, 207, 76, 190, 177, 98, 62, 188, 35, 39, 158, 188, 77, 192, 16, 191, 141, 201, 136, 189, 51, 155, 32, 190, 35, 111, 105, 189, 254, 83, 71, 191, 227, 47, 32, 190, 67, 36, 169, 61, 222, 42, 218, 62, 3, 38, 95, 60, 28, 19, 138, 189, 138, 217, 139, 61, 164, 247, 228, 189, 228, 100, 69, 191, 150, 8, 168, 61, 240, 64, 140, 62, 12, 29, 47, 62, 210, 105, 106, 189, 122, 32, 25, 61, 253, 176, 95, 62, 175, 47, 195, 191, 50, 202, 38, 190, 127, 201, 193, 61, 153, 145, 149, 189, 5, 97, 163, 189, 247, 96, 209, 189, 112, 10, 155, 189, 112, 105, 205, 62, 148, 98, 42, 191, 75, 120, 120, 190, 34, 177, 38, 62, 140, 139, 4, 191, 129, 186, 13, 191, 10, 168, 113, 62, 43, 73, 182, 62, 201, 204, 157, 62, 46, 44, 161, 62, 143, 239, 91, 62, 92, 81, 46, 60, 246, 114, 233, 62, 163, 21, 135, 62, 195, 14, 166, 61, 102, 83, 122, 190, 94, 13, 37, 62, 53, 95, 80, 62, 147, 144, 203, 61, 168, 110, 133, 62, 201, 115, 88, 190, 223, 44, 47, 190, 168, 71, 0, 191, 72, 106, 137, 190, 140, 49, 4, 62, 208, 132, 94, 62, 142, 170, 182, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 52, 149, 190, 228, 208, 122, 61, 232, 157, 137, 62, 25, 16, 164, 61, 189, 141, 206, 60, 255, 4, 124, 190, 64, 51, 249, 61, 128, 51, 39, 62, 119, 220, 205, 61, 174, 89, 31, 62, 51, 109, 81, 62, 234, 189, 115, 190, 124, 172, 123, 61, 104, 100, 182, 61, 130, 103, 139, 61, 1, 184, 51, 62, 127, 90, 49, 62, 249, 222, 57, 190, 182, 215, 41, 190, 188, 166, 45, 62, 34, 177, 173, 189, 254, 87, 80, 189, 136, 58, 134, 62, 223, 208, 212, 60, 23, 236, 132, 62, 223, 57, 27, 61, 10, 100, 201, 189, 42, 105, 72, 190, 30, 94, 70, 60, 159, 198, 119, 62, 97, 132, 117, 61, 179, 41, 34, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 226, 38, 190, 24, 250, 238, 61, 158, 7, 140, 190, 195, 142, 93, 190, 189, 69, 141, 62, 160, 12, 38, 191, 43, 144, 209, 62, 104, 101, 173, 190, 232, 61, 138, 62, 29, 226, 112, 62, 151, 33, 89, 191, 61, 16, 162, 190, 143, 200, 7, 191, 161, 49, 25, 63, 247, 75, 156, 191, 40, 59, 6, 191, 244, 42, 89, 191, 217, 120, 101, 63, 165, 126, 134, 61, 251, 13, 136, 190, 57, 255, 115, 191, 70, 188, 49, 191, 8, 213, 15, 63, 222, 59, 10, 191, 74, 242, 71, 62, 53, 184, 248, 190, 162, 30, 133, 63, 231, 192, 22, 191, 86, 98, 120, 61, 191, 235, 0, 191, 118, 45, 204, 190, 113, 118, 8, 63, 62, 3, 163, 61, 255, 119, 0, 190, 127, 61, 231, 190, 232, 37, 222, 189, 165, 229, 134, 59, 186, 87, 201, 62, 128, 152, 122, 62, 197, 179, 223, 189, 70, 6, 168, 190, 241, 96, 19, 188, 226, 6, 70, 63, 209, 157, 184, 62, 156, 90, 132, 62, 235, 16, 168, 189, 69, 150, 219, 62, 188, 1, 64, 189, 141, 65, 20, 189, 221, 29, 214, 61, 184, 150, 170, 189, 179, 3, 181, 190, 101, 160, 59, 62, 153, 29, 121, 62, 28, 171, 134, 62, 216, 216, 208, 62, 144, 81, 131, 190, 100, 10, 0, 190, 218, 21, 134, 189, 26, 122, 18, 190, 5, 31, 219, 61, 161, 219, 169, 190, 177, 87, 234, 61, 101, 77, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 184, 87, 61, 164, 219, 210, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {30, 107, 183, 191, 242, 106, 250, 62, 212, 163, 135, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 93, 101, 63, 97, 10, 239, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}