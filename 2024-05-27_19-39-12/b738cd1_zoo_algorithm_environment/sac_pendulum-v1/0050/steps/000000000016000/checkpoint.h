// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 91, 131, 62, 169, 235, 175, 60, 189, 180, 28, 189, 67, 43, 149, 190, 101, 73, 225, 190, 225, 151, 121, 62, 182, 11, 168, 62, 155, 76, 36, 62, 201, 224, 226, 189, 239, 189, 120, 60, 166, 159, 36, 63, 168, 14, 33, 191, 47, 163, 31, 63, 204, 147, 5, 189, 232, 226, 94, 190, 181, 164, 235, 190, 64, 28, 75, 191, 99, 158, 196, 62, 200, 102, 144, 190, 225, 53, 138, 63, 198, 134, 174, 190, 44, 13, 103, 61, 190, 244, 208, 62, 227, 149, 237, 62, 125, 144, 52, 190, 22, 7, 170, 63, 254, 51, 124, 62, 84, 63, 59, 62, 223, 82, 101, 63, 105, 65, 51, 62, 15, 7, 131, 190, 136, 242, 67, 63, 218, 30, 244, 190, 109, 154, 74, 61, 209, 16, 179, 191, 126, 94, 228, 190, 255, 129, 163, 190, 204, 162, 79, 191, 6, 87, 60, 61, 29, 32, 108, 190, 175, 21, 181, 63, 160, 140, 170, 62, 188, 254, 19, 63, 203, 55, 162, 191, 51, 42, 128, 190, 201, 157, 232, 189, 40, 53, 171, 191, 172, 232, 131, 190, 169, 84, 166, 62, 69, 192, 31, 63, 213, 232, 47, 62, 108, 31, 37, 63, 222, 213, 232, 190, 207, 47, 194, 188, 213, 222, 190, 62, 150, 107, 135, 191, 80, 80, 204, 61, 207, 189, 244, 189, 135, 126, 152, 62, 100, 54, 165, 190, 192, 127, 149, 188, 224, 246, 18, 190, 112, 3, 88, 191, 201, 133, 189, 190, 40, 135, 106, 63, 133, 250, 36, 63, 253, 193, 29, 191, 216, 90, 226, 62, 47, 219, 155, 189, 66, 86, 49, 191, 166, 122, 179, 190, 139, 12, 40, 190, 193, 223, 25, 190, 204, 69, 206, 62, 8, 252, 18, 191, 193, 117, 54, 62, 250, 250, 132, 62, 207, 105, 26, 191, 249, 190, 10, 191, 112, 1, 114, 63, 96, 117, 88, 189, 60, 26, 209, 190, 229, 204, 109, 191, 232, 231, 17, 191, 153, 104, 133, 62, 88, 120, 125, 63, 144, 135, 182, 62, 1, 45, 76, 63, 64, 201, 187, 188, 215, 162, 82, 62, 160, 254, 38, 191, 99, 248, 148, 191, 199, 77, 118, 190, 204, 26, 40, 191, 148, 42, 9, 190, 7, 66, 8, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 13, 35, 191, 1, 30, 167, 190, 72, 50, 231, 62, 104, 132, 172, 61, 225, 213, 63, 191, 130, 179, 159, 190, 110, 45, 8, 61, 52, 220, 140, 190, 68, 216, 108, 190, 155, 238, 118, 190, 151, 33, 12, 190, 200, 129, 57, 190, 28, 56, 16, 63, 134, 135, 218, 190, 3, 26, 144, 61, 129, 36, 190, 186, 90, 249, 134, 190, 106, 162, 3, 190, 124, 202, 10, 191, 117, 122, 23, 63, 214, 87, 161, 190, 94, 199, 155, 190, 64, 114, 53, 63, 19, 21, 48, 63, 81, 149, 71, 190, 224, 129, 41, 188, 155, 73, 135, 62, 192, 50, 37, 189, 137, 1, 207, 190, 112, 113, 19, 191, 7, 179, 232, 62, 207, 207, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 233, 189, 4, 179, 190, 189, 253, 162, 98, 190, 56, 104, 148, 61, 188, 121, 102, 62, 82, 206, 178, 189, 170, 179, 8, 62, 159, 2, 153, 187, 252, 236, 13, 60, 29, 168, 33, 62, 109, 1, 101, 190, 101, 115, 218, 189, 92, 246, 21, 189, 245, 109, 2, 190, 181, 129, 67, 60, 235, 205, 159, 60, 20, 89, 251, 61, 25, 205, 192, 189, 247, 14, 203, 61, 21, 19, 48, 61, 124, 212, 255, 61, 175, 88, 115, 61, 164, 10, 252, 190, 133, 248, 227, 189, 179, 135, 129, 188, 132, 134, 62, 189, 97, 154, 232, 190, 244, 100, 210, 188, 4, 33, 207, 189, 3, 59, 147, 61, 28, 210, 159, 61, 164, 137, 217, 187, 237, 99, 6, 62, 135, 10, 204, 189, 216, 179, 219, 62, 8, 178, 138, 62, 254, 179, 194, 62, 75, 205, 21, 59, 236, 62, 191, 188, 7, 53, 119, 60, 69, 238, 113, 61, 145, 212, 97, 191, 29, 62, 131, 59, 240, 147, 132, 189, 78, 58, 242, 61, 46, 158, 9, 62, 4, 86, 195, 62, 96, 22, 254, 189, 212, 44, 230, 190, 15, 129, 255, 61, 74, 85, 157, 62, 138, 211, 151, 188, 87, 173, 232, 189, 180, 215, 89, 189, 17, 88, 255, 189, 74, 157, 224, 61, 216, 181, 51, 61, 96, 113, 47, 61, 226, 130, 223, 61, 37, 244, 239, 61, 143, 235, 244, 190, 90, 221, 246, 189, 204, 20, 62, 189, 211, 194, 137, 189, 206, 4, 208, 60, 254, 54, 146, 190, 1, 48, 209, 62, 238, 242, 9, 62, 188, 60, 9, 191, 27, 198, 161, 190, 208, 110, 158, 62, 148, 41, 44, 189, 156, 9, 150, 61, 232, 23, 103, 190, 222, 6, 180, 60, 254, 108, 49, 191, 105, 25, 24, 189, 231, 228, 138, 188, 84, 193, 136, 188, 3, 239, 139, 191, 124, 139, 130, 189, 137, 200, 101, 62, 144, 115, 47, 61, 110, 244, 156, 59, 237, 52, 176, 190, 105, 102, 106, 62, 138, 146, 58, 61, 117, 232, 162, 190, 235, 118, 163, 62, 192, 233, 29, 62, 23, 139, 161, 62, 105, 200, 188, 189, 176, 197, 59, 189, 159, 90, 251, 61, 249, 207, 63, 191, 88, 97, 203, 190, 93, 170, 233, 189, 34, 188, 206, 59, 181, 135, 13, 61, 177, 18, 16, 190, 9, 240, 173, 61, 208, 200, 145, 61, 149, 240, 80, 189, 125, 226, 140, 189, 87, 254, 38, 62, 24, 222, 149, 189, 132, 219, 144, 190, 132, 149, 134, 190, 26, 146, 152, 62, 249, 124, 194, 61, 21, 33, 0, 190, 153, 193, 124, 191, 36, 241, 76, 189, 225, 56, 14, 190, 129, 157, 208, 61, 202, 185, 224, 190, 103, 69, 173, 190, 67, 165, 88, 59, 211, 74, 189, 190, 5, 90, 31, 191, 143, 116, 222, 188, 227, 28, 218, 190, 253, 37, 15, 190, 95, 82, 193, 190, 213, 62, 98, 61, 134, 23, 189, 62, 133, 112, 28, 191, 141, 76, 227, 190, 121, 47, 134, 189, 71, 100, 151, 61, 202, 244, 94, 60, 239, 252, 123, 62, 92, 93, 140, 62, 168, 15, 149, 62, 170, 173, 24, 62, 112, 252, 159, 190, 244, 153, 140, 62, 10, 86, 24, 190, 25, 100, 72, 190, 137, 36, 81, 62, 34, 105, 17, 62, 60, 196, 62, 62, 70, 78, 70, 62, 152, 189, 5, 190, 109, 19, 140, 62, 37, 68, 177, 62, 78, 28, 246, 189, 165, 231, 73, 62, 138, 67, 18, 190, 173, 102, 44, 62, 26, 19, 240, 188, 163, 214, 225, 189, 249, 41, 144, 61, 226, 131, 130, 62, 191, 17, 158, 188, 42, 199, 3, 190, 7, 199, 112, 190, 24, 253, 137, 190, 42, 104, 166, 190, 235, 139, 163, 190, 224, 3, 13, 62, 135, 240, 196, 189, 173, 51, 142, 190, 215, 87, 35, 189, 93, 144, 58, 188, 176, 75, 94, 61, 235, 101, 47, 190, 103, 153, 153, 190, 28, 16, 72, 190, 42, 123, 173, 189, 99, 232, 157, 58, 66, 198, 104, 61, 158, 150, 139, 61, 196, 236, 235, 189, 236, 108, 33, 62, 85, 196, 176, 62, 184, 177, 169, 61, 218, 83, 23, 63, 112, 45, 241, 62, 206, 132, 2, 189, 82, 198, 209, 189, 28, 203, 52, 61, 146, 243, 84, 191, 25, 30, 93, 190, 225, 41, 188, 61, 205, 73, 47, 62, 234, 102, 226, 190, 253, 219, 130, 190, 67, 63, 108, 190, 122, 49, 231, 191, 65, 106, 206, 60, 73, 198, 210, 189, 49, 12, 43, 62, 133, 117, 132, 190, 166, 195, 212, 61, 92, 215, 97, 61, 15, 253, 77, 63, 58, 23, 26, 190, 42, 89, 149, 62, 103, 241, 109, 190, 113, 127, 171, 62, 156, 167, 44, 190, 16, 170, 221, 61, 213, 66, 213, 62, 201, 196, 174, 61, 247, 66, 196, 62, 20, 42, 84, 62, 160, 169, 106, 61, 233, 24, 70, 61, 97, 128, 191, 62, 108, 3, 209, 61, 194, 194, 206, 59, 42, 125, 18, 188, 113, 161, 195, 189, 47, 107, 61, 189, 189, 252, 135, 190, 8, 64, 95, 62, 217, 23, 68, 62, 158, 170, 68, 62, 101, 193, 178, 190, 215, 181, 39, 189, 38, 68, 222, 190, 94, 55, 181, 190, 145, 250, 64, 190, 197, 52, 151, 189, 149, 87, 133, 61, 130, 197, 179, 62, 28, 174, 63, 62, 195, 54, 166, 62, 18, 147, 157, 62, 198, 63, 171, 187, 249, 58, 210, 60, 64, 200, 203, 61, 159, 107, 140, 190, 175, 6, 193, 190, 68, 235, 83, 62, 87, 183, 127, 62, 26, 182, 202, 60, 87, 243, 203, 188, 46, 251, 37, 190, 0, 24, 82, 190, 189, 17, 106, 190, 32, 90, 103, 61, 67, 137, 203, 190, 139, 156, 235, 190, 224, 85, 211, 61, 132, 175, 38, 190, 31, 171, 212, 189, 214, 2, 157, 190, 196, 3, 144, 62, 209, 201, 196, 189, 79, 145, 120, 61, 16, 223, 82, 189, 38, 114, 213, 61, 180, 3, 67, 189, 53, 53, 130, 191, 9, 125, 96, 189, 68, 106, 219, 188, 254, 179, 196, 62, 88, 211, 118, 187, 213, 147, 107, 62, 130, 213, 108, 62, 24, 220, 142, 190, 70, 65, 176, 61, 43, 124, 167, 190, 26, 98, 102, 191, 215, 76, 128, 190, 133, 224, 213, 61, 91, 125, 128, 61, 232, 13, 49, 190, 241, 111, 229, 62, 59, 114, 131, 61, 5, 60, 80, 191, 228, 26, 212, 62, 31, 66, 32, 62, 30, 83, 7, 62, 36, 154, 20, 61, 108, 76, 162, 190, 228, 170, 34, 61, 181, 255, 15, 62, 16, 87, 83, 190, 116, 129, 75, 62, 48, 17, 5, 191, 15, 87, 227, 61, 101, 83, 214, 190, 175, 181, 114, 62, 184, 83, 169, 61, 143, 251, 42, 189, 37, 115, 61, 61, 143, 174, 161, 188, 105, 82, 12, 62, 138, 34, 126, 61, 152, 97, 210, 190, 26, 76, 135, 62, 150, 75, 15, 62, 214, 66, 8, 190, 62, 97, 90, 62, 78, 30, 131, 190, 137, 65, 85, 190, 241, 133, 29, 62, 24, 39, 128, 188, 1, 129, 200, 62, 137, 213, 78, 62, 4, 137, 141, 188, 196, 193, 232, 61, 166, 47, 149, 62, 35, 181, 102, 62, 162, 58, 132, 189, 128, 44, 73, 190, 16, 242, 171, 61, 5, 163, 24, 62, 146, 159, 151, 189, 65, 68, 224, 61, 211, 113, 44, 61, 8, 166, 101, 190, 202, 56, 2, 190, 132, 60, 44, 190, 43, 135, 179, 187, 122, 67, 255, 60, 50, 47, 13, 191, 164, 96, 76, 61, 244, 252, 140, 60, 52, 233, 54, 62, 194, 20, 62, 189, 162, 223, 194, 189, 134, 105, 193, 189, 213, 157, 82, 191, 50, 208, 255, 61, 70, 35, 56, 191, 252, 201, 148, 62, 3, 172, 194, 61, 21, 113, 219, 190, 245, 135, 128, 62, 208, 169, 218, 191, 26, 79, 141, 190, 84, 243, 124, 191, 155, 127, 23, 189, 105, 199, 25, 190, 228, 81, 155, 61, 98, 2, 26, 190, 51, 223, 247, 61, 92, 169, 169, 190, 242, 209, 240, 60, 186, 205, 206, 188, 173, 204, 24, 191, 228, 118, 135, 191, 173, 128, 225, 189, 148, 215, 202, 62, 24, 199, 137, 62, 218, 53, 12, 62, 170, 163, 245, 189, 15, 228, 136, 189, 196, 132, 165, 189, 142, 88, 119, 189, 199, 131, 236, 189, 149, 249, 39, 62, 92, 124, 229, 189, 212, 7, 33, 190, 159, 194, 173, 60, 2, 226, 14, 190, 253, 2, 41, 189, 239, 144, 217, 62, 122, 127, 39, 190, 13, 210, 196, 62, 7, 235, 116, 187, 93, 7, 128, 189, 58, 150, 149, 62, 182, 109, 115, 62, 210, 55, 13, 62, 159, 171, 136, 62, 217, 227, 94, 61, 92, 76, 26, 190, 205, 31, 110, 61, 105, 149, 39, 61, 91, 152, 215, 190, 22, 152, 99, 62, 178, 82, 107, 58, 34, 222, 70, 62, 215, 130, 24, 191, 120, 110, 3, 62, 198, 136, 75, 190, 83, 62, 60, 190, 95, 114, 217, 59, 170, 249, 209, 187, 144, 109, 243, 61, 220, 170, 128, 61, 8, 194, 152, 62, 165, 206, 77, 62, 109, 206, 212, 190, 122, 71, 138, 61, 187, 254, 189, 62, 65, 11, 25, 62, 198, 60, 124, 61, 237, 28, 134, 190, 209, 26, 80, 190, 202, 141, 19, 191, 113, 196, 56, 190, 218, 186, 21, 189, 216, 253, 95, 191, 168, 130, 156, 191, 86, 136, 13, 190, 239, 217, 107, 190, 10, 206, 205, 62, 68, 205, 120, 62, 255, 130, 129, 190, 222, 123, 29, 189, 60, 183, 175, 61, 147, 42, 247, 190, 190, 163, 211, 61, 231, 254, 95, 61, 213, 230, 220, 62, 76, 248, 14, 60, 115, 127, 136, 61, 28, 207, 13, 63, 112, 225, 72, 191, 188, 8, 83, 190, 128, 180, 158, 187, 229, 7, 248, 190, 95, 238, 217, 61, 121, 22, 136, 190, 192, 142, 134, 190, 88, 168, 121, 62, 221, 204, 48, 191, 148, 200, 65, 190, 100, 136, 185, 62, 126, 189, 84, 190, 24, 21, 110, 191, 53, 183, 92, 190, 49, 126, 27, 62, 227, 185, 140, 62, 185, 113, 109, 61, 205, 49, 148, 61, 190, 63, 213, 190, 235, 96, 243, 61, 226, 178, 202, 62, 234, 230, 239, 189, 250, 48, 13, 191, 119, 86, 15, 61, 101, 254, 73, 62, 225, 217, 137, 62, 137, 225, 101, 189, 170, 47, 216, 190, 110, 21, 49, 190, 72, 19, 14, 191, 221, 225, 2, 190, 50, 53, 169, 190, 70, 240, 160, 62, 49, 245, 200, 61, 193, 191, 152, 61, 20, 255, 27, 63, 0, 70, 156, 62, 62, 187, 189, 190, 51, 98, 165, 191, 50, 176, 214, 190, 75, 106, 53, 190, 81, 128, 181, 62, 38, 103, 168, 191, 134, 71, 13, 63, 142, 52, 93, 62, 147, 53, 62, 190, 46, 247, 169, 61, 152, 130, 38, 192, 11, 20, 120, 190, 230, 19, 174, 190, 94, 249, 4, 63, 253, 187, 58, 61, 220, 142, 181, 190, 144, 177, 152, 62, 237, 9, 36, 62, 148, 133, 22, 191, 79, 214, 81, 61, 37, 156, 108, 62, 241, 114, 129, 190, 66, 11, 195, 190, 9, 117, 110, 188, 86, 123, 58, 62, 4, 250, 233, 62, 13, 182, 175, 190, 90, 156, 21, 63, 85, 151, 200, 62, 161, 195, 153, 61, 74, 245, 206, 59, 176, 105, 161, 62, 162, 198, 29, 62, 165, 165, 19, 62, 159, 44, 58, 62, 23, 245, 45, 63, 136, 3, 4, 189, 180, 33, 14, 62, 237, 116, 134, 189, 124, 90, 112, 189, 116, 89, 103, 191, 201, 206, 225, 189, 1, 94, 144, 189, 82, 236, 86, 60, 31, 68, 173, 191, 61, 126, 60, 61, 193, 93, 193, 61, 191, 164, 168, 62, 224, 17, 141, 62, 175, 88, 32, 191, 116, 45, 227, 61, 137, 247, 103, 62, 118, 39, 18, 191, 20, 173, 228, 61, 1, 131, 239, 61, 123, 249, 13, 63, 100, 207, 135, 190, 56, 38, 198, 189, 255, 94, 184, 62, 106, 175, 160, 191, 123, 102, 161, 188, 134, 37, 1, 190, 16, 42, 146, 62, 69, 44, 214, 62, 203, 82, 112, 189, 170, 62, 130, 191, 36, 16, 105, 188, 127, 210, 76, 190, 135, 164, 25, 61, 8, 164, 154, 191, 169, 85, 66, 62, 172, 115, 64, 62, 82, 119, 79, 191, 48, 37, 185, 61, 244, 207, 16, 192, 190, 125, 0, 190, 197, 120, 156, 191, 60, 83, 233, 62, 211, 228, 58, 62, 217, 141, 211, 189, 229, 255, 255, 61, 175, 112, 143, 62, 59, 113, 139, 190, 34, 152, 129, 62, 83, 43, 1, 190, 246, 41, 165, 190, 97, 102, 228, 189, 77, 161, 27, 62, 53, 31, 16, 62, 64, 186, 115, 62, 19, 120, 168, 61, 128, 223, 208, 189, 153, 120, 130, 62, 247, 141, 41, 190, 129, 184, 0, 191, 237, 183, 30, 62, 72, 86, 150, 189, 100, 199, 29, 62, 150, 206, 65, 191, 168, 84, 2, 191, 147, 40, 56, 189, 124, 192, 101, 62, 191, 193, 244, 62, 103, 219, 168, 190, 242, 9, 29, 190, 137, 23, 119, 191, 76, 87, 101, 190, 136, 122, 60, 190, 41, 151, 33, 59, 199, 57, 105, 62, 43, 107, 123, 189, 71, 19, 255, 60, 66, 24, 64, 191, 180, 207, 63, 61, 228, 208, 108, 61, 171, 57, 39, 189, 102, 224, 162, 190, 71, 93, 81, 58, 213, 192, 67, 188, 129, 4, 242, 61, 144, 35, 1, 190, 171, 66, 204, 61, 1, 21, 178, 190, 196, 37, 174, 190, 154, 218, 69, 189, 92, 61, 232, 61, 2, 72, 17, 190, 176, 116, 217, 188, 69, 47, 49, 61, 18, 143, 198, 61, 115, 130, 90, 188, 89, 77, 29, 190, 47, 202, 214, 189, 173, 191, 37, 190, 21, 242, 215, 61, 238, 59, 38, 190, 15, 125, 207, 61, 91, 129, 33, 190, 152, 185, 134, 61, 32, 213, 101, 190, 60, 200, 42, 190, 1, 170, 60, 189, 55, 251, 17, 62, 8, 75, 80, 62, 250, 58, 1, 61, 110, 112, 153, 61, 178, 220, 242, 61, 166, 242, 62, 61, 105, 2, 183, 189, 219, 48, 144, 61, 55, 255, 101, 61, 158, 107, 13, 190, 57, 136, 8, 190, 254, 36, 104, 61, 102, 203, 28, 190, 100, 52, 172, 61, 221, 228, 2, 190, 69, 195, 224, 61, 121, 133, 70, 189, 145, 97, 26, 62, 187, 193, 16, 62, 32, 83, 138, 191, 6, 111, 38, 190, 165, 52, 157, 190, 159, 252, 68, 189, 54, 94, 124, 191, 128, 125, 171, 60, 180, 243, 75, 187, 174, 202, 20, 190, 29, 201, 8, 62, 202, 245, 4, 192, 164, 24, 161, 61, 16, 13, 146, 190, 250, 241, 119, 62, 14, 69, 7, 61, 144, 144, 159, 59, 136, 23, 104, 62, 38, 235, 141, 61, 208, 157, 216, 190, 157, 3, 17, 62, 237, 43, 168, 188, 190, 253, 25, 190, 92, 254, 50, 190, 72, 82, 3, 62, 209, 95, 136, 62, 98, 162, 192, 62, 61, 20, 92, 62, 95, 99, 252, 61, 249, 91, 131, 62, 8, 115, 210, 189, 242, 85, 240, 62, 98, 125, 1, 191, 68, 223, 173, 190, 13, 46, 172, 61, 181, 172, 184, 62, 175, 225, 126, 190, 70, 135, 62, 189, 6, 46, 137, 191, 178, 28, 110, 190, 230, 78, 137, 188, 75, 83, 115, 190, 175, 51, 186, 62, 72, 109, 1, 192, 168, 73, 19, 191, 197, 243, 56, 191, 243, 169, 23, 62, 223, 168, 130, 61, 17, 5, 151, 190, 150, 116, 157, 61, 241, 124, 226, 61, 9, 220, 25, 191, 132, 129, 58, 61, 136, 101, 4, 62, 144, 91, 100, 190, 2, 198, 235, 190, 93, 171, 3, 190, 232, 188, 99, 62, 16, 121, 200, 189, 215, 222, 151, 189, 171, 186, 189, 62, 91, 12, 37, 190, 134, 51, 125, 189, 86, 38, 59, 61, 101, 92, 64, 190, 117, 8, 133, 189, 158, 92, 225, 61, 54, 220, 194, 61, 200, 185, 229, 188, 205, 29, 123, 190, 75, 61, 146, 61, 40, 248, 60, 190, 252, 227, 10, 190, 220, 61, 105, 62, 14, 234, 153, 61, 62, 40, 9, 62, 175, 118, 122, 62, 239, 160, 28, 62, 35, 155, 153, 189, 182, 46, 217, 61, 236, 195, 156, 62, 8, 106, 45, 189, 235, 125, 148, 190, 51, 92, 249, 189, 49, 253, 134, 191, 81, 241, 110, 190, 8, 211, 38, 62, 119, 190, 64, 62, 21, 122, 76, 191, 60, 144, 195, 189, 72, 233, 103, 190, 148, 126, 225, 191, 214, 19, 150, 59, 129, 208, 161, 190, 120, 86, 180, 61, 229, 240, 7, 190, 211, 111, 48, 190, 174, 243, 191, 62, 6, 177, 151, 189, 68, 151, 188, 62, 86, 183, 50, 62, 174, 104, 180, 190, 133, 51, 70, 62, 82, 170, 162, 190, 180, 37, 193, 190, 151, 70, 126, 62, 231, 138, 140, 62, 144, 47, 236, 62, 205, 58, 173, 61, 211, 72, 41, 62, 175, 63, 112, 190, 26, 52, 37, 63, 136, 117, 182, 190, 225, 251, 142, 189, 87, 227, 32, 191, 45, 255, 40, 188, 183, 174, 128, 62, 125, 218, 137, 189, 84, 164, 162, 62, 5, 82, 85, 62, 20, 197, 154, 61, 195, 26, 227, 190, 76, 239, 115, 190, 119, 34, 5, 191, 143, 176, 57, 62, 78, 175, 6, 191, 174, 67, 135, 189, 35, 245, 73, 61, 15, 169, 229, 62, 1, 219, 50, 188, 138, 85, 215, 190, 32, 71, 181, 61, 7, 21, 21, 63, 58, 45, 192, 61, 53, 239, 187, 189, 54, 88, 27, 190, 224, 8, 170, 183, 62, 173, 65, 191, 243, 109, 68, 60, 236, 46, 215, 190, 27, 151, 105, 191, 227, 122, 147, 191, 155, 163, 177, 189, 127, 235, 230, 190, 75, 181, 178, 62, 164, 182, 140, 62, 115, 157, 89, 190, 47, 7, 46, 60, 136, 168, 55, 188, 201, 230, 7, 191, 97, 163, 61, 62, 88, 148, 106, 189, 111, 172, 175, 62, 52, 200, 213, 189, 122, 53, 252, 60, 153, 181, 14, 63, 229, 115, 136, 191, 253, 102, 16, 190, 253, 214, 36, 189, 249, 17, 217, 189, 54, 134, 73, 63, 39, 189, 50, 62, 67, 18, 15, 63, 171, 50, 9, 62, 184, 90, 10, 62, 169, 50, 32, 61, 159, 236, 85, 62, 198, 116, 185, 190, 191, 128, 5, 190, 195, 112, 40, 187, 194, 213, 82, 62, 101, 55, 34, 62, 244, 106, 206, 62, 252, 130, 13, 190, 95, 53, 105, 190, 191, 42, 177, 62, 59, 209, 163, 62, 31, 237, 200, 61, 248, 89, 246, 61, 80, 185, 244, 61, 113, 5, 64, 62, 250, 151, 227, 61, 106, 95, 85, 62, 40, 98, 146, 61, 37, 75, 49, 60, 130, 187, 84, 61, 175, 200, 38, 190, 251, 88, 62, 60, 62, 51, 14, 189, 236, 226, 153, 190, 92, 240, 94, 61, 165, 19, 138, 62, 100, 79, 52, 62, 22, 96, 200, 189, 122, 189, 159, 191, 179, 123, 242, 189, 245, 199, 76, 189, 22, 249, 0, 190, 155, 154, 21, 191, 146, 44, 5, 63, 236, 205, 40, 62, 128, 26, 142, 190, 241, 167, 176, 61, 195, 62, 30, 192, 233, 158, 63, 188, 25, 226, 27, 189, 218, 251, 80, 62, 2, 223, 224, 189, 130, 240, 8, 191, 154, 25, 101, 62, 150, 22, 37, 189, 219, 53, 186, 190, 38, 213, 64, 62, 135, 212, 151, 62, 150, 146, 73, 190, 240, 62, 222, 188, 193, 189, 81, 62, 97, 182, 70, 60, 89, 161, 141, 62, 56, 74, 137, 190, 212, 13, 147, 62, 138, 42, 80, 62, 179, 45, 13, 190, 49, 210, 108, 190, 3, 124, 185, 190, 190, 193, 61, 190, 28, 106, 94, 61, 163, 26, 52, 191, 236, 46, 31, 191, 67, 144, 87, 62, 34, 11, 133, 60, 9, 77, 153, 62, 187, 6, 203, 190, 85, 51, 243, 61, 155, 39, 2, 191, 210, 35, 19, 190, 48, 61, 9, 62, 107, 70, 224, 188, 54, 87, 227, 61, 46, 0, 243, 190, 77, 123, 238, 190, 150, 2, 126, 191, 202, 162, 13, 61, 72, 53, 18, 62, 72, 161, 77, 62, 252, 137, 57, 63, 12, 4, 181, 189, 44, 251, 28, 62, 202, 158, 123, 62, 184, 5, 54, 190, 114, 32, 72, 62, 196, 88, 139, 191, 119, 155, 74, 191, 235, 180, 60, 190, 211, 221, 150, 189, 211, 24, 50, 62, 193, 26, 173, 62, 164, 68, 175, 58, 235, 157, 249, 61, 96, 10, 79, 62, 121, 8, 100, 190, 207, 174, 174, 58, 168, 163, 56, 62, 73, 233, 179, 189, 201, 183, 32, 59, 204, 168, 246, 61, 76, 2, 216, 61, 135, 58, 42, 61, 241, 95, 150, 61, 135, 189, 170, 191, 236, 72, 234, 61, 139, 227, 74, 190, 43, 75, 252, 62, 174, 197, 157, 190, 254, 119, 25, 61, 128, 82, 145, 188, 240, 70, 11, 191, 71, 223, 126, 191, 18, 63, 18, 186, 69, 228, 39, 62, 164, 146, 41, 189, 199, 174, 36, 189, 115, 202, 22, 62, 100, 235, 190, 62, 220, 219, 144, 191, 35, 105, 68, 190, 23, 50, 21, 190, 161, 182, 193, 189, 47, 229, 186, 61, 137, 2, 151, 60, 204, 140, 39, 62, 232, 233, 120, 188, 206, 201, 185, 189, 160, 137, 212, 61, 91, 236, 167, 188, 225, 63, 46, 190, 128, 71, 167, 60, 65, 156, 145, 188, 160, 214, 129, 187, 128, 225, 239, 61, 18, 73, 56, 190, 57, 202, 32, 190, 160, 196, 36, 190, 203, 169, 8, 190, 33, 177, 118, 186, 95, 101, 27, 62, 240, 218, 65, 189, 43, 77, 219, 189, 128, 245, 242, 189, 209, 1, 39, 190, 243, 56, 34, 190, 33, 181, 180, 189, 239, 55, 228, 189, 114, 213, 6, 190, 5, 218, 178, 189, 92, 109, 140, 59, 197, 116, 70, 189, 141, 25, 166, 61, 168, 110, 47, 62, 208, 11, 53, 189, 95, 191, 32, 63, 133, 200, 162, 188, 219, 108, 232, 62, 229, 20, 212, 61, 100, 112, 90, 62, 42, 73, 237, 189, 70, 168, 65, 190, 93, 138, 9, 191, 13, 218, 155, 189, 9, 159, 136, 191, 156, 54, 250, 189, 163, 18, 196, 189, 8, 36, 190, 61, 41, 47, 172, 191, 198, 63, 17, 191, 78, 96, 44, 62, 145, 64, 24, 62, 215, 202, 99, 62, 181, 5, 244, 190, 198, 190, 65, 62, 13, 192, 169, 62, 6, 182, 80, 190, 115, 37, 186, 60, 9, 222, 53, 62, 50, 219, 108, 62, 195, 71, 2, 191, 24, 127, 96, 189, 180, 93, 192, 61, 75, 17, 102, 191, 185, 80, 21, 190, 253, 177, 149, 60, 76, 220, 91, 188, 139, 159, 212, 62, 249, 215, 151, 189, 245, 65, 187, 189, 85, 88, 160, 61, 82, 156, 4, 62, 222, 186, 55, 59, 208, 196, 100, 190, 92, 252, 3, 189, 222, 60, 20, 189, 202, 4, 30, 191, 226, 239, 60, 189, 211, 177, 49, 190, 142, 94, 36, 189, 197, 130, 68, 191, 168, 98, 55, 190, 254, 192, 213, 61, 201, 170, 213, 62, 207, 81, 131, 60, 148, 62, 182, 189, 210, 25, 124, 61, 51, 140, 9, 190, 224, 141, 73, 191, 149, 214, 132, 61, 22, 247, 136, 62, 78, 254, 38, 62, 115, 57, 204, 189, 244, 147, 187, 60, 8, 243, 107, 62, 182, 215, 210, 191, 250, 201, 61, 190, 127, 201, 193, 61, 0, 8, 80, 189, 52, 118, 175, 189, 90, 135, 20, 190, 8, 45, 75, 190, 71, 143, 215, 62, 115, 222, 54, 191, 117, 112, 117, 190, 116, 172, 21, 62, 11, 117, 10, 191, 234, 179, 49, 191, 39, 144, 80, 62, 24, 90, 185, 62, 124, 65, 149, 62, 140, 227, 156, 62, 144, 88, 68, 62, 230, 139, 180, 188, 176, 99, 230, 62, 132, 36, 152, 62, 241, 1, 158, 61, 82, 99, 162, 190, 200, 160, 38, 62, 133, 249, 117, 62, 112, 31, 228, 61, 228, 121, 48, 62, 209, 15, 117, 190, 48, 117, 45, 190, 122, 100, 16, 191, 51, 160, 146, 190, 45, 241, 247, 61, 40, 48, 81, 62, 108, 111, 246, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 52, 149, 190, 4, 130, 66, 61, 123, 12, 136, 62, 37, 174, 152, 61, 234, 157, 234, 60, 86, 172, 146, 190, 24, 214, 249, 61, 181, 33, 26, 62, 25, 43, 188, 61, 153, 44, 28, 62, 46, 213, 80, 62, 226, 247, 113, 190, 62, 142, 131, 60, 3, 16, 171, 61, 153, 71, 141, 61, 136, 241, 56, 62, 152, 54, 61, 62, 235, 196, 8, 190, 182, 215, 41, 190, 2, 255, 39, 62, 14, 246, 70, 189, 227, 4, 177, 189, 24, 11, 132, 62, 165, 211, 8, 59, 242, 197, 134, 62, 213, 16, 35, 61, 30, 72, 136, 189, 8, 146, 59, 190, 170, 67, 195, 187, 193, 66, 121, 62, 170, 73, 159, 61, 70, 178, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 226, 38, 190, 132, 139, 245, 61, 54, 208, 142, 190, 5, 202, 117, 190, 145, 203, 141, 62, 230, 75, 60, 191, 40, 138, 211, 62, 124, 46, 160, 190, 204, 2, 142, 62, 102, 104, 105, 62, 92, 90, 86, 191, 243, 45, 162, 190, 18, 54, 18, 191, 55, 32, 24, 63, 68, 178, 156, 191, 122, 163, 9, 191, 130, 45, 96, 191, 48, 204, 119, 63, 165, 126, 134, 61, 80, 191, 133, 190, 204, 126, 123, 191, 87, 52, 72, 191, 184, 102, 13, 63, 149, 180, 24, 191, 39, 124, 82, 62, 31, 43, 4, 191, 6, 135, 131, 63, 209, 181, 31, 191, 228, 41, 110, 61, 247, 30, 5, 191, 44, 182, 218, 190, 87, 112, 10, 63, 62, 3, 163, 61, 165, 157, 192, 189, 48, 69, 237, 190, 172, 6, 250, 189, 197, 22, 147, 60, 41, 16, 162, 62, 5, 0, 128, 62, 52, 7, 237, 189, 10, 120, 143, 190, 184, 198, 144, 188, 8, 143, 77, 63, 152, 46, 180, 62, 63, 67, 103, 62, 29, 65, 150, 189, 110, 172, 209, 62, 195, 216, 158, 189, 207, 53, 20, 61, 227, 132, 205, 61, 184, 150, 170, 189, 153, 116, 169, 190, 225, 49, 239, 61, 87, 8, 34, 62, 117, 51, 117, 62, 216, 224, 211, 62, 10, 222, 124, 190, 195, 141, 4, 190, 122, 75, 38, 188, 203, 35, 21, 190, 85, 91, 219, 61, 120, 152, 153, 190, 95, 17, 23, 62, 154, 11, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 34, 131, 61, 243, 56, 209, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 13, 130, 63, 86, 160, 204, 63, 103, 207, 205, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 214, 251, 191, 37, 57, 197, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0050/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}