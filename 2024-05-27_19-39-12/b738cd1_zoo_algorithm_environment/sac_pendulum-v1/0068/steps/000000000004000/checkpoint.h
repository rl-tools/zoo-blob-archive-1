// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 114, 50, 191, 170, 84, 74, 191, 157, 101, 129, 62, 141, 102, 189, 190, 92, 191, 226, 189, 77, 10, 39, 63, 223, 181, 53, 62, 110, 71, 193, 61, 113, 239, 182, 62, 132, 154, 220, 189, 230, 107, 29, 63, 78, 26, 62, 60, 193, 139, 180, 62, 207, 104, 225, 60, 127, 86, 8, 62, 70, 228, 116, 189, 25, 244, 235, 189, 124, 234, 144, 190, 150, 196, 213, 190, 229, 117, 34, 191, 227, 116, 129, 189, 185, 207, 224, 61, 163, 214, 85, 63, 248, 50, 225, 190, 247, 43, 162, 189, 47, 215, 20, 63, 95, 25, 156, 62, 3, 141, 147, 190, 72, 235, 26, 191, 17, 249, 31, 189, 134, 135, 6, 63, 142, 239, 239, 62, 117, 128, 20, 63, 204, 138, 15, 191, 209, 241, 145, 62, 101, 92, 17, 191, 163, 199, 203, 190, 138, 57, 117, 63, 164, 52, 107, 62, 247, 26, 76, 63, 235, 33, 241, 62, 209, 226, 150, 189, 61, 249, 4, 63, 211, 109, 153, 62, 148, 65, 14, 191, 183, 229, 185, 62, 57, 71, 47, 62, 254, 253, 39, 191, 223, 96, 0, 191, 137, 60, 27, 63, 51, 89, 7, 191, 199, 241, 21, 191, 173, 199, 5, 60, 244, 213, 219, 189, 165, 16, 17, 191, 91, 150, 190, 62, 241, 166, 85, 191, 38, 111, 74, 189, 9, 73, 119, 190, 169, 88, 185, 190, 140, 233, 226, 60, 84, 11, 48, 191, 236, 72, 224, 61, 222, 58, 236, 61, 117, 189, 74, 63, 170, 230, 62, 191, 159, 181, 156, 190, 201, 95, 74, 191, 27, 174, 24, 190, 154, 246, 52, 189, 102, 96, 63, 63, 132, 43, 161, 190, 67, 166, 33, 191, 223, 213, 234, 62, 82, 52, 178, 61, 176, 253, 96, 190, 70, 231, 100, 62, 219, 34, 232, 190, 179, 61, 202, 189, 46, 79, 66, 191, 240, 98, 210, 188, 43, 247, 236, 189, 137, 250, 1, 63, 73, 223, 63, 189, 254, 20, 156, 62, 94, 23, 51, 191, 246, 165, 16, 191, 163, 23, 33, 63, 120, 227, 187, 187, 69, 71, 250, 62, 176, 223, 79, 63, 187, 246, 254, 190, 149, 189, 178, 61, 158, 169, 19, 63, 144, 105, 209, 62, 106, 204, 232, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 169, 205, 190, 154, 133, 78, 62, 147, 142, 15, 63, 108, 156, 13, 62, 31, 151, 150, 190, 81, 198, 218, 62, 79, 184, 75, 62, 187, 152, 242, 61, 107, 149, 176, 190, 117, 240, 130, 62, 39, 80, 7, 191, 81, 66, 239, 62, 151, 209, 159, 62, 84, 18, 159, 189, 191, 202, 221, 61, 133, 124, 87, 190, 36, 185, 13, 191, 228, 107, 8, 190, 88, 144, 239, 190, 100, 204, 17, 63, 100, 207, 148, 190, 205, 69, 251, 61, 49, 45, 55, 63, 181, 201, 153, 190, 3, 64, 190, 189, 213, 19, 2, 191, 219, 34, 154, 62, 173, 220, 1, 63, 234, 240, 199, 190, 234, 180, 45, 191, 145, 235, 46, 190, 246, 17, 33, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 104, 87, 62, 60, 129, 119, 189, 42, 194, 98, 62, 243, 48, 152, 190, 157, 87, 219, 190, 8, 224, 63, 61, 198, 204, 185, 61, 30, 178, 145, 190, 119, 90, 162, 190, 18, 177, 11, 61, 23, 155, 58, 190, 200, 26, 169, 61, 178, 0, 17, 62, 214, 100, 226, 61, 5, 55, 187, 61, 73, 236, 112, 62, 6, 172, 136, 190, 195, 136, 69, 62, 131, 70, 179, 61, 211, 247, 111, 188, 223, 233, 5, 190, 148, 50, 135, 190, 132, 31, 160, 188, 11, 31, 178, 62, 116, 168, 225, 61, 40, 47, 212, 61, 17, 28, 198, 188, 186, 238, 28, 61, 173, 203, 142, 62, 125, 174, 230, 60, 114, 44, 15, 62, 54, 221, 46, 190, 7, 156, 43, 62, 139, 22, 194, 189, 5, 67, 69, 62, 102, 213, 151, 190, 231, 156, 48, 190, 115, 154, 70, 62, 60, 232, 82, 62, 67, 167, 112, 191, 69, 233, 194, 190, 222, 76, 229, 61, 149, 206, 1, 190, 235, 10, 153, 188, 198, 145, 19, 62, 193, 86, 67, 190, 93, 76, 61, 61, 57, 72, 131, 190, 6, 108, 167, 191, 110, 152, 79, 62, 56, 39, 38, 191, 219, 77, 243, 60, 174, 216, 169, 189, 175, 18, 44, 191, 54, 126, 217, 62, 44, 195, 5, 62, 65, 169, 131, 62, 39, 136, 249, 61, 156, 159, 129, 62, 187, 128, 126, 189, 94, 183, 118, 61, 251, 86, 200, 61, 152, 232, 15, 62, 8, 143, 60, 190, 50, 217, 103, 62, 104, 242, 7, 62, 75, 17, 250, 61, 120, 220, 122, 190, 47, 17, 75, 60, 115, 221, 148, 61, 45, 214, 68, 60, 130, 123, 179, 190, 156, 108, 216, 188, 132, 11, 34, 62, 35, 93, 178, 61, 126, 190, 141, 189, 150, 183, 67, 60, 241, 53, 124, 190, 35, 212, 63, 62, 27, 30, 83, 62, 185, 99, 248, 189, 24, 122, 176, 61, 229, 159, 201, 189, 139, 125, 119, 62, 52, 16, 232, 189, 82, 181, 10, 190, 190, 193, 59, 62, 248, 70, 79, 62, 249, 150, 202, 188, 8, 206, 5, 62, 136, 90, 163, 188, 14, 72, 24, 62, 122, 89, 190, 61, 75, 237, 3, 190, 6, 192, 145, 62, 129, 245, 34, 190, 119, 40, 123, 189, 24, 114, 122, 190, 137, 241, 147, 60, 17, 175, 75, 190, 178, 242, 143, 62, 105, 51, 109, 60, 13, 17, 138, 190, 80, 117, 36, 189, 226, 185, 170, 61, 47, 128, 188, 60, 146, 159, 91, 62, 148, 64, 59, 60, 220, 4, 42, 189, 54, 160, 248, 62, 81, 151, 90, 189, 29, 96, 201, 61, 29, 213, 231, 189, 107, 165, 149, 190, 83, 183, 209, 61, 129, 167, 153, 60, 168, 81, 29, 190, 42, 60, 9, 61, 47, 110, 109, 190, 198, 209, 228, 189, 66, 101, 182, 190, 71, 243, 173, 189, 153, 168, 228, 190, 161, 107, 200, 57, 82, 214, 25, 190, 244, 127, 116, 62, 103, 223, 117, 189, 244, 42, 183, 62, 129, 200, 154, 189, 119, 113, 142, 187, 246, 60, 136, 61, 97, 13, 67, 62, 121, 189, 154, 189, 214, 221, 231, 61, 225, 165, 113, 61, 209, 231, 59, 62, 18, 34, 62, 62, 226, 248, 59, 61, 60, 18, 39, 189, 156, 79, 24, 62, 170, 63, 218, 59, 245, 242, 174, 62, 102, 40, 129, 188, 228, 38, 94, 59, 147, 132, 59, 60, 59, 20, 219, 189, 73, 117, 156, 61, 98, 197, 144, 188, 125, 209, 143, 62, 36, 38, 105, 188, 148, 230, 227, 61, 194, 229, 156, 188, 11, 1, 50, 61, 34, 203, 79, 190, 42, 90, 107, 189, 250, 16, 21, 61, 215, 210, 123, 190, 139, 80, 225, 189, 95, 177, 157, 62, 175, 241, 235, 61, 98, 32, 137, 190, 186, 61, 110, 190, 125, 161, 229, 189, 21, 16, 139, 62, 151, 180, 140, 61, 197, 90, 150, 61, 51, 39, 74, 190, 255, 21, 174, 62, 214, 199, 214, 60, 201, 221, 202, 60, 208, 33, 147, 62, 48, 61, 75, 189, 155, 195, 230, 61, 85, 133, 91, 62, 3, 131, 118, 190, 168, 77, 52, 190, 89, 181, 154, 61, 153, 146, 77, 190, 175, 87, 191, 189, 125, 2, 33, 189, 224, 54, 208, 60, 228, 186, 101, 61, 135, 169, 106, 61, 79, 15, 79, 189, 221, 40, 193, 189, 255, 181, 227, 189, 250, 84, 165, 190, 19, 60, 163, 60, 7, 64, 108, 60, 226, 39, 127, 62, 103, 62, 141, 190, 77, 130, 103, 61, 81, 37, 140, 60, 45, 153, 125, 61, 177, 8, 167, 61, 167, 244, 139, 62, 44, 205, 21, 189, 139, 152, 198, 189, 218, 146, 19, 62, 43, 206, 145, 62, 13, 239, 81, 62, 43, 229, 191, 189, 52, 243, 139, 189, 98, 177, 218, 60, 222, 233, 249, 187, 239, 17, 36, 62, 245, 239, 54, 60, 183, 92, 156, 188, 205, 10, 30, 62, 3, 158, 245, 61, 196, 123, 218, 60, 209, 235, 11, 62, 152, 70, 140, 62, 116, 152, 77, 188, 183, 174, 190, 61, 54, 108, 90, 189, 88, 3, 157, 61, 252, 41, 136, 189, 138, 65, 140, 61, 167, 1, 195, 189, 151, 105, 20, 190, 75, 112, 235, 189, 167, 177, 64, 62, 19, 148, 247, 61, 198, 195, 1, 190, 129, 157, 38, 189, 149, 111, 52, 62, 84, 163, 2, 191, 42, 81, 5, 62, 189, 70, 66, 190, 122, 137, 54, 190, 46, 157, 37, 61, 196, 185, 162, 190, 80, 154, 101, 190, 147, 227, 36, 62, 86, 43, 134, 189, 29, 220, 41, 190, 138, 113, 8, 190, 248, 7, 68, 190, 101, 249, 5, 61, 109, 50, 246, 61, 9, 61, 23, 190, 74, 152, 226, 189, 124, 20, 149, 60, 75, 48, 199, 62, 56, 204, 104, 190, 186, 33, 144, 190, 195, 214, 47, 190, 14, 146, 64, 62, 201, 129, 149, 189, 242, 75, 51, 61, 239, 50, 116, 190, 43, 133, 180, 189, 18, 175, 6, 60, 30, 129, 159, 61, 212, 51, 161, 188, 104, 150, 178, 61, 121, 117, 244, 61, 3, 105, 82, 62, 190, 137, 161, 190, 223, 177, 51, 190, 218, 253, 24, 62, 26, 48, 24, 62, 181, 57, 89, 190, 19, 187, 199, 190, 42, 38, 59, 61, 214, 236, 40, 189, 193, 63, 150, 189, 174, 189, 99, 60, 62, 69, 94, 190, 178, 89, 100, 62, 213, 117, 74, 61, 68, 254, 108, 190, 184, 38, 130, 62, 94, 146, 100, 190, 97, 244, 55, 62, 162, 33, 188, 189, 139, 244, 83, 190, 215, 253, 61, 62, 243, 79, 218, 62, 71, 237, 150, 188, 182, 107, 228, 62, 69, 245, 133, 61, 95, 227, 170, 188, 248, 134, 149, 62, 99, 75, 29, 190, 74, 146, 133, 62, 217, 141, 250, 188, 72, 172, 136, 61, 243, 141, 24, 61, 217, 176, 129, 62, 156, 221, 157, 62, 117, 61, 111, 190, 79, 183, 79, 61, 84, 86, 143, 190, 213, 218, 232, 189, 126, 59, 141, 61, 119, 2, 25, 191, 207, 96, 54, 190, 209, 237, 162, 190, 99, 32, 165, 189, 150, 33, 127, 62, 199, 45, 37, 62, 195, 19, 30, 62, 133, 157, 71, 189, 127, 168, 82, 190, 81, 122, 234, 189, 157, 13, 165, 189, 28, 92, 52, 188, 254, 6, 14, 62, 166, 194, 183, 190, 102, 142, 247, 189, 15, 220, 106, 62, 43, 10, 84, 189, 184, 91, 3, 191, 86, 152, 118, 62, 38, 57, 176, 189, 56, 157, 215, 61, 249, 170, 6, 62, 103, 43, 187, 62, 123, 151, 209, 190, 132, 76, 197, 190, 240, 247, 123, 187, 255, 117, 233, 61, 243, 185, 202, 62, 9, 45, 132, 62, 244, 191, 165, 189, 143, 217, 50, 62, 174, 171, 16, 62, 245, 108, 247, 189, 222, 173, 245, 61, 133, 177, 136, 62, 63, 82, 53, 189, 148, 56, 174, 62, 169, 12, 200, 190, 230, 43, 112, 190, 199, 40, 189, 62, 84, 187, 23, 62, 65, 239, 69, 62, 9, 60, 80, 62, 100, 185, 201, 187, 29, 213, 82, 62, 26, 206, 0, 190, 247, 88, 226, 190, 233, 28, 128, 189, 162, 251, 12, 191, 123, 146, 160, 190, 39, 57, 15, 59, 211, 150, 13, 191, 79, 212, 129, 62, 40, 46, 163, 61, 45, 52, 247, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 128, 226, 2, 188, 7, 107, 169, 189, 37, 183, 189, 61, 121, 126, 31, 62, 223, 34, 190, 61, 191, 109, 44, 190, 253, 128, 23, 61, 208, 95, 71, 188, 221, 240, 9, 62, 33, 115, 112, 189, 31, 160, 144, 61, 216, 202, 54, 62, 64, 98, 51, 61, 129, 186, 124, 62, 18, 48, 92, 190, 159, 147, 107, 61, 17, 176, 44, 190, 222, 217, 41, 190, 221, 212, 197, 189, 230, 251, 58, 190, 160, 172, 147, 61, 194, 79, 151, 190, 129, 87, 125, 60, 146, 159, 40, 190, 238, 167, 200, 189, 153, 118, 146, 61, 228, 48, 144, 190, 16, 115, 46, 62, 121, 169, 169, 188, 96, 40, 10, 62, 66, 249, 57, 62, 0, 236, 137, 56, 23, 57, 0, 62, 139, 221, 97, 61, 178, 106, 15, 62, 189, 99, 124, 60, 235, 146, 162, 59, 5, 103, 26, 61, 216, 79, 221, 190, 201, 244, 226, 61, 132, 48, 13, 61, 173, 38, 182, 190, 203, 68, 7, 190, 108, 63, 205, 189, 50, 160, 35, 62, 36, 123, 123, 61, 51, 136, 224, 189, 104, 43, 209, 189, 40, 95, 55, 189, 57, 255, 34, 61, 193, 133, 101, 190, 132, 189, 15, 187, 178, 173, 153, 62, 59, 211, 78, 190, 66, 170, 147, 190, 61, 90, 36, 61, 77, 172, 79, 188, 52, 107, 61, 61, 123, 141, 176, 190, 110, 156, 9, 189, 76, 188, 207, 188, 179, 115, 164, 189, 56, 249, 138, 62, 178, 49, 160, 62, 60, 248, 98, 62, 142, 150, 204, 189, 13, 180, 148, 189, 129, 71, 140, 62, 130, 39, 130, 62, 13, 63, 162, 189, 199, 9, 27, 60, 55, 57, 160, 61, 132, 16, 234, 61, 57, 102, 122, 190, 133, 69, 131, 62, 226, 243, 101, 62, 102, 108, 78, 62, 243, 59, 152, 62, 142, 135, 132, 62, 140, 164, 27, 62, 30, 49, 23, 190, 111, 128, 144, 190, 12, 249, 20, 190, 24, 3, 83, 189, 27, 40, 21, 61, 29, 92, 196, 187, 17, 175, 57, 190, 206, 8, 142, 61, 88, 44, 23, 190, 62, 137, 132, 62, 168, 235, 35, 190, 104, 210, 124, 189, 213, 41, 156, 61, 14, 228, 148, 61, 43, 201, 136, 189, 77, 140, 105, 62, 192, 208, 230, 189, 116, 167, 178, 189, 77, 176, 100, 62, 167, 59, 140, 62, 72, 202, 213, 60, 221, 130, 3, 189, 14, 175, 5, 191, 81, 135, 108, 190, 140, 159, 26, 62, 47, 233, 78, 190, 120, 189, 29, 190, 95, 185, 65, 189, 177, 95, 253, 61, 240, 133, 158, 62, 6, 131, 71, 60, 28, 118, 28, 190, 180, 6, 11, 61, 25, 11, 20, 190, 250, 173, 248, 189, 25, 183, 60, 190, 227, 83, 59, 62, 71, 52, 68, 190, 44, 110, 142, 190, 231, 223, 129, 189, 14, 60, 121, 62, 236, 225, 22, 190, 227, 230, 159, 190, 193, 101, 25, 62, 234, 231, 175, 188, 120, 206, 87, 61, 222, 102, 98, 62, 27, 44, 133, 62, 147, 97, 218, 61, 219, 32, 27, 62, 184, 139, 87, 189, 192, 165, 219, 60, 174, 215, 28, 190, 44, 106, 29, 62, 173, 112, 15, 190, 176, 94, 103, 189, 191, 153, 27, 190, 55, 172, 132, 189, 12, 238, 130, 61, 29, 77, 110, 61, 151, 147, 217, 61, 20, 38, 119, 188, 18, 201, 47, 61, 187, 128, 0, 189, 94, 23, 135, 189, 59, 51, 155, 61, 159, 180, 167, 61, 141, 229, 208, 61, 211, 217, 189, 60, 1, 120, 192, 189, 253, 17, 245, 188, 231, 2, 149, 62, 212, 41, 40, 62, 20, 13, 232, 60, 72, 240, 195, 61, 67, 65, 57, 62, 84, 68, 187, 188, 111, 49, 141, 189, 148, 88, 98, 62, 149, 190, 130, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 228, 60, 206, 189, 72, 174, 213, 189, 122, 158, 74, 62, 239, 152, 150, 189, 229, 252, 9, 190, 191, 84, 223, 187, 3, 22, 6, 62, 153, 25, 135, 62, 209, 23, 187, 61, 5, 119, 173, 61, 81, 201, 30, 190, 237, 122, 140, 189, 53, 148, 72, 190, 8, 152, 190, 61, 170, 52, 132, 62, 41, 232, 4, 62, 212, 167, 2, 62, 8, 145, 56, 61, 89, 132, 104, 62, 173, 216, 166, 189, 179, 190, 82, 62, 234, 203, 85, 62, 234, 94, 135, 189, 172, 194, 170, 62, 175, 237, 228, 190, 67, 125, 2, 62, 236, 211, 55, 62, 184, 202, 94, 190, 90, 94, 92, 61, 183, 78, 52, 190, 253, 159, 210, 62, 178, 227, 234, 188, 178, 13, 31, 62, 148, 53, 163, 189, 210, 140, 253, 189, 200, 8, 221, 189, 227, 176, 30, 62, 25, 117, 159, 188, 216, 199, 228, 189, 54, 203, 4, 190, 178, 81, 206, 61, 87, 179, 11, 186, 254, 55, 241, 189, 168, 213, 215, 188, 250, 35, 41, 190, 23, 78, 139, 188, 165, 40, 7, 190, 248, 61, 51, 62, 123, 41, 23, 187, 127, 127, 255, 61, 230, 126, 45, 190, 126, 162, 165, 189, 60, 63, 254, 61, 199, 186, 46, 62, 151, 54, 49, 190, 255, 77, 138, 61, 138, 120, 198, 61, 223, 78, 121, 189, 190, 120, 24, 190, 8, 106, 162, 189, 59, 178, 24, 61, 128, 215, 106, 61, 40, 229, 42, 190, 135, 60, 52, 62, 127, 20, 98, 190, 52, 23, 241, 190, 127, 15, 183, 190, 51, 143, 72, 62, 135, 23, 150, 62, 169, 7, 129, 61, 199, 82, 188, 61, 180, 132, 154, 61, 88, 123, 1, 190, 184, 51, 32, 190, 144, 20, 118, 62, 175, 132, 52, 62, 104, 228, 133, 190, 103, 5, 180, 62, 84, 137, 176, 61, 193, 214, 53, 190, 105, 179, 208, 61, 97, 220, 99, 189, 15, 178, 111, 61, 152, 165, 183, 188, 31, 55, 87, 62, 144, 41, 141, 62, 196, 157, 21, 62, 148, 26, 15, 190, 80, 21, 191, 60, 241, 16, 122, 190, 230, 129, 225, 189, 236, 53, 79, 190, 131, 36, 134, 189, 161, 4, 138, 61, 18, 251, 61, 62, 179, 105, 215, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 133, 116, 30, 191, 73, 53, 227, 190, 47, 52, 199, 190, 99, 130, 90, 62, 254, 14, 122, 60, 122, 179, 42, 189, 204, 31, 34, 189, 253, 10, 116, 62, 114, 28, 158, 189, 3, 8, 101, 189, 165, 215, 218, 190, 12, 52, 43, 62, 106, 194, 140, 189, 17, 122, 48, 190, 239, 121, 191, 188, 137, 104, 225, 61, 155, 216, 4, 62, 193, 59, 215, 189, 101, 74, 190, 62, 150, 56, 33, 62, 88, 219, 63, 62, 80, 114, 49, 62, 59, 247, 137, 57, 23, 147, 150, 190, 35, 70, 153, 189, 223, 189, 87, 190, 215, 117, 221, 61, 188, 94, 230, 189, 232, 156, 131, 190, 59, 116, 70, 190, 121, 142, 120, 189, 125, 144, 244, 61, 109, 135, 76, 190, 183, 84, 42, 191, 128, 55, 15, 191, 71, 25, 163, 190, 46, 178, 35, 62, 16, 242, 97, 62, 27, 214, 152, 62, 205, 43, 240, 61, 195, 9, 65, 190, 122, 90, 114, 62, 236, 200, 8, 190, 121, 101, 188, 61, 36, 176, 88, 190, 147, 141, 166, 190, 22, 27, 189, 190, 210, 103, 116, 190, 189, 240, 68, 62, 185, 168, 62, 61, 214, 122, 16, 189, 31, 98, 145, 62, 181, 255, 47, 189, 52, 192, 5, 61, 132, 8, 40, 61, 77, 120, 171, 189, 209, 209, 33, 60, 87, 95, 68, 190, 198, 61, 129, 62, 7, 218, 185, 189, 151, 203, 217, 189, 80, 189, 81, 188, 59, 223, 130, 62, 220, 119, 250, 189, 74, 39, 152, 62, 106, 60, 236, 188, 79, 63, 161, 61, 15, 172, 63, 190, 151, 2, 94, 190, 131, 10, 191, 61, 29, 152, 53, 190, 208, 180, 35, 190, 34, 47, 27, 189, 11, 186, 96, 60, 75, 54, 178, 190, 67, 239, 34, 61, 11, 187, 156, 61, 89, 235, 109, 189, 202, 13, 31, 62, 56, 13, 35, 61, 165, 110, 231, 60, 48, 26, 141, 189, 229, 229, 5, 190, 187, 250, 236, 61, 154, 251, 189, 60, 246, 227, 194, 61, 239, 94, 129, 61, 223, 13, 130, 62, 90, 69, 36, 189, 191, 62, 208, 61, 32, 138, 5, 190, 248, 2, 25, 62, 157, 102, 25, 62, 98, 106, 74, 190, 34, 234, 177, 62, 127, 27, 35, 62, 215, 105, 20, 190, 109, 153, 119, 61, 80, 166, 20, 190, 222, 20, 148, 61, 63, 253, 151, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 204, 34, 46, 62, 93, 137, 146, 188, 179, 111, 244, 189, 194, 128, 173, 61, 179, 190, 204, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 102, 195, 228, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 195, 78, 98, 189, 149, 191, 46, 190, 84, 22, 10, 190, 163, 0, 36, 190, 213, 163, 44, 62, 181, 3, 52, 190, 8, 14, 87, 61, 248, 7, 40, 189, 11, 54, 180, 188, 88, 52, 158, 189, 233, 82, 137, 190, 78, 56, 148, 190, 67, 218, 41, 187, 176, 139, 224, 60, 164, 125, 141, 61, 237, 154, 225, 190, 130, 13, 6, 189, 137, 101, 205, 189, 202, 233, 135, 189, 46, 20, 93, 190, 53, 24, 50, 190, 232, 241, 103, 189, 12, 169, 66, 62, 160, 211, 189, 62, 247, 80, 179, 190, 176, 157, 12, 191, 30, 137, 160, 189, 90, 29, 162, 189, 34, 117, 21, 62, 189, 79, 4, 62, 51, 108, 19, 60, 211, 190, 205, 190, 0, 218, 5, 191, 51, 247, 174, 61, 0, 75, 2, 61, 19, 226, 12, 191, 185, 243, 213, 62, 119, 172, 204, 61, 20, 126, 205, 61, 184, 155, 156, 59, 23, 118, 149, 190, 137, 162, 251, 189, 240, 23, 186, 61, 243, 211, 174, 61, 213, 8, 211, 60, 64, 46, 138, 61, 3, 214, 127, 189, 61, 172, 141, 62, 135, 131, 130, 62, 88, 123, 6, 62, 5, 174, 167, 61, 136, 180, 171, 61, 30, 58, 230, 61, 212, 37, 209, 61, 115, 84, 218, 190, 107, 54, 77, 190, 181, 167, 157, 62, 19, 118, 132, 188, 59, 122, 202, 62, 221, 196, 193, 189, 107, 82, 32, 188, 204, 240, 181, 62, 104, 244, 179, 60, 93, 248, 226, 190, 229, 182, 4, 62, 116, 109, 163, 190, 125, 151, 145, 190, 141, 191, 15, 62, 85, 51, 10, 191, 241, 18, 65, 62, 12, 57, 248, 61, 176, 170, 79, 62, 64, 204, 111, 62, 102, 96, 219, 187, 202, 128, 233, 60, 116, 106, 141, 189, 143, 72, 49, 190, 55, 67, 151, 61, 229, 112, 122, 188, 98, 198, 153, 190, 144, 80, 137, 60, 43, 34, 136, 189, 41, 182, 246, 61, 51, 10, 114, 61, 133, 67, 105, 189, 107, 163, 206, 189, 88, 26, 71, 62, 186, 65, 31, 62, 82, 5, 13, 190, 226, 128, 231, 61, 232, 104, 44, 190, 24, 239, 225, 61, 36, 162, 158, 59, 219, 235, 130, 190, 39, 186, 94, 62, 56, 209, 191, 62, 198, 98, 13, 61, 184, 209, 98, 62, 23, 126, 166, 59, 26, 245, 101, 189, 214, 209, 78, 62, 81, 8, 19, 62, 172, 225, 216, 61, 79, 83, 50, 190, 8, 201, 161, 62, 231, 101, 22, 62, 142, 64, 153, 62, 191, 249, 242, 61, 243, 131, 247, 61, 85, 209, 211, 189, 123, 203, 30, 188, 182, 118, 122, 190, 78, 140, 235, 188, 105, 186, 212, 61, 154, 83, 55, 61, 246, 69, 221, 189, 181, 0, 6, 61, 153, 0, 132, 62, 120, 131, 23, 61, 231, 176, 190, 61, 104, 30, 95, 59, 164, 130, 12, 190, 217, 228, 156, 190, 230, 78, 59, 189, 82, 146, 158, 62, 196, 162, 135, 189, 10, 252, 101, 189, 198, 160, 223, 61, 74, 93, 174, 188, 37, 213, 240, 61, 233, 86, 97, 62, 113, 137, 52, 190, 180, 130, 70, 190, 106, 168, 25, 189, 120, 35, 97, 190, 168, 252, 200, 189, 236, 236, 5, 62, 197, 37, 140, 62, 14, 85, 93, 62, 221, 92, 63, 61, 80, 140, 147, 60, 125, 151, 5, 189, 208, 112, 251, 60, 99, 108, 172, 190, 160, 10, 54, 60, 255, 84, 84, 189, 139, 243, 94, 190, 254, 40, 14, 188, 47, 213, 235, 61, 63, 242, 87, 190, 83, 62, 163, 59, 219, 150, 42, 190, 82, 177, 70, 191, 168, 20, 237, 61, 238, 89, 13, 191, 199, 84, 166, 60, 196, 209, 250, 61, 126, 98, 159, 190, 189, 139, 67, 61, 89, 111, 8, 188, 157, 206, 194, 62, 245, 198, 43, 189, 1, 201, 152, 62, 186, 162, 130, 62, 49, 0, 221, 61, 77, 61, 15, 190, 125, 224, 59, 62, 13, 42, 145, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 62, 165, 60, 106, 39, 129, 62, 118, 113, 8, 189, 177, 2, 160, 190, 21, 230, 105, 62, 147, 179, 24, 60, 159, 204, 77, 61, 160, 207, 28, 190, 158, 2, 21, 189, 103, 202, 140, 61, 134, 68, 167, 189, 8, 161, 143, 61, 51, 79, 221, 59, 198, 106, 118, 188, 199, 143, 79, 189, 202, 25, 185, 187, 25, 2, 72, 62, 188, 1, 242, 61, 225, 116, 161, 189, 204, 186, 39, 60, 144, 251, 158, 188, 100, 186, 238, 61, 103, 154, 5, 61, 164, 240, 156, 61, 131, 163, 150, 60, 151, 32, 46, 189, 11, 19, 104, 189, 18, 14, 89, 190, 81, 176, 159, 189, 177, 29, 0, 62, 213, 195, 18, 189, 25, 66, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 218, 70, 62, 65, 3, 46, 63, 234, 3, 28, 62, 22, 42, 151, 190, 186, 247, 37, 189, 19, 38, 89, 62, 104, 118, 11, 189, 78, 80, 102, 62, 172, 110, 176, 62, 90, 135, 237, 189, 173, 199, 44, 191, 144, 157, 238, 61, 235, 134, 12, 190, 207, 10, 37, 190, 217, 240, 122, 190, 109, 182, 31, 190, 65, 66, 147, 61, 166, 224, 158, 189, 46, 133, 187, 61, 122, 237, 91, 62, 228, 87, 97, 189, 151, 239, 103, 190, 252, 253, 149, 61, 118, 45, 197, 190, 74, 254, 214, 190, 19, 14, 177, 61, 16, 129, 219, 189, 219, 209, 194, 190, 152, 71, 167, 190, 222, 48, 76, 62, 136, 187, 92, 190, 12, 157, 166, 62, 19, 218, 34, 61, 78, 198, 171, 60, 128, 7, 74, 60, 59, 22, 128, 62, 63, 69, 99, 190, 14, 150, 172, 62, 38, 57, 75, 190, 190, 65, 121, 189, 97, 115, 74, 61, 99, 186, 165, 190, 240, 172, 169, 62, 71, 78, 140, 189, 37, 225, 48, 62, 172, 16, 159, 190, 239, 136, 132, 62, 37, 122, 175, 190, 144, 134, 61, 190, 30, 239, 86, 188, 25, 228, 249, 61, 24, 139, 187, 184, 215, 176, 14, 190, 172, 2, 144, 190, 159, 3, 130, 189, 238, 168, 155, 189, 222, 242, 81, 190, 79, 150, 166, 189, 226, 206, 48, 62, 199, 0, 164, 62, 13, 187, 28, 60, 73, 219, 50, 61, 210, 34, 225, 61, 198, 145, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 88, 93, 62, 43, 62, 32, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {101, 18, 191, 63, 89, 156, 139, 62, 82, 10, 164, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {243, 141, 84, 191, 20, 141, 186, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}