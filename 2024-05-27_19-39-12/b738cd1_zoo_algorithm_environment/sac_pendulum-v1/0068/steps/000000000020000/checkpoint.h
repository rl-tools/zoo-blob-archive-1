// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 57, 40, 191, 51, 23, 167, 190, 190, 69, 130, 62, 111, 208, 173, 61, 142, 66, 65, 63, 20, 169, 29, 63, 243, 155, 45, 63, 59, 187, 61, 63, 181, 95, 34, 61, 42, 86, 26, 190, 105, 191, 232, 62, 135, 96, 153, 189, 216, 206, 28, 63, 171, 243, 17, 63, 37, 50, 45, 62, 126, 47, 36, 190, 157, 59, 122, 191, 152, 136, 107, 190, 160, 201, 196, 189, 101, 97, 146, 191, 44, 66, 214, 60, 211, 123, 116, 61, 213, 56, 155, 63, 254, 37, 96, 190, 79, 95, 84, 62, 249, 114, 59, 63, 95, 214, 128, 62, 66, 224, 193, 188, 200, 100, 157, 191, 164, 138, 129, 190, 205, 228, 68, 63, 47, 67, 96, 63, 118, 40, 235, 62, 105, 61, 100, 191, 97, 204, 26, 190, 211, 184, 187, 190, 141, 139, 59, 190, 9, 237, 188, 63, 49, 51, 173, 62, 7, 233, 69, 63, 0, 96, 76, 63, 12, 2, 80, 190, 244, 35, 17, 63, 57, 196, 143, 190, 96, 17, 19, 191, 161, 58, 1, 63, 81, 96, 144, 190, 103, 165, 29, 191, 249, 242, 54, 191, 90, 182, 247, 61, 22, 171, 5, 191, 197, 218, 118, 191, 144, 184, 34, 190, 127, 21, 184, 189, 137, 124, 49, 191, 12, 169, 145, 190, 178, 63, 75, 191, 174, 237, 26, 190, 76, 141, 181, 191, 241, 44, 159, 190, 102, 160, 242, 62, 193, 221, 247, 190, 194, 190, 127, 62, 138, 91, 217, 189, 48, 24, 50, 63, 137, 1, 36, 191, 151, 180, 82, 190, 219, 244, 144, 191, 126, 160, 0, 190, 172, 24, 116, 189, 39, 180, 30, 63, 80, 194, 129, 190, 179, 103, 88, 191, 146, 127, 30, 63, 24, 160, 212, 61, 169, 99, 202, 190, 171, 102, 67, 190, 9, 229, 221, 190, 85, 162, 46, 190, 180, 144, 101, 191, 91, 228, 75, 189, 126, 144, 244, 188, 214, 233, 70, 63, 225, 118, 209, 189, 196, 101, 105, 62, 20, 198, 195, 191, 13, 254, 16, 191, 65, 224, 131, 63, 145, 215, 170, 62, 233, 118, 213, 62, 216, 121, 65, 63, 125, 83, 12, 191, 30, 44, 208, 61, 247, 113, 211, 62, 187, 27, 26, 63, 219, 65, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 112, 77, 191, 70, 43, 10, 191, 238, 46, 73, 62, 222, 19, 124, 62, 122, 85, 249, 190, 230, 5, 185, 62, 162, 136, 82, 62, 120, 22, 134, 61, 19, 169, 221, 190, 24, 148, 138, 62, 243, 39, 46, 191, 59, 83, 88, 63, 105, 55, 126, 190, 236, 159, 4, 190, 88, 57, 53, 62, 87, 161, 162, 190, 36, 76, 209, 190, 95, 239, 34, 189, 74, 201, 20, 190, 64, 15, 252, 62, 227, 235, 253, 190, 98, 138, 15, 61, 130, 12, 24, 63, 53, 190, 181, 190, 235, 114, 189, 190, 35, 2, 140, 190, 141, 236, 127, 62, 154, 146, 187, 62, 91, 226, 57, 190, 69, 1, 94, 191, 168, 156, 2, 190, 192, 140, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 226, 155, 62, 209, 187, 221, 188, 47, 239, 70, 62, 109, 215, 139, 190, 116, 195, 160, 191, 43, 190, 123, 61, 16, 130, 239, 61, 188, 102, 140, 190, 185, 166, 200, 190, 192, 104, 194, 61, 101, 192, 223, 190, 25, 135, 104, 61, 170, 38, 57, 62, 79, 20, 64, 190, 49, 189, 164, 61, 202, 140, 131, 62, 249, 190, 134, 190, 170, 99, 80, 62, 35, 240, 155, 61, 128, 51, 105, 60, 44, 31, 27, 190, 68, 47, 120, 190, 84, 201, 95, 187, 52, 34, 148, 62, 141, 177, 182, 62, 142, 93, 124, 61, 215, 56, 55, 61, 227, 168, 202, 60, 140, 193, 161, 62, 136, 104, 229, 190, 241, 158, 2, 62, 108, 244, 29, 190, 43, 12, 239, 61, 145, 123, 92, 190, 175, 233, 94, 62, 198, 168, 1, 191, 0, 30, 5, 191, 67, 115, 96, 61, 46, 144, 31, 62, 0, 64, 128, 191, 117, 10, 24, 191, 244, 76, 150, 61, 51, 208, 200, 190, 101, 152, 215, 190, 78, 15, 100, 62, 204, 131, 30, 190, 172, 68, 129, 189, 167, 216, 98, 190, 186, 238, 187, 191, 120, 224, 150, 62, 115, 25, 91, 191, 168, 122, 93, 189, 109, 185, 161, 189, 14, 13, 34, 191, 9, 25, 193, 62, 238, 81, 254, 61, 244, 230, 214, 62, 169, 200, 181, 62, 104, 81, 106, 62, 33, 219, 109, 190, 231, 196, 181, 189, 248, 250, 93, 190, 85, 250, 60, 62, 103, 228, 89, 190, 74, 138, 238, 61, 86, 255, 147, 61, 245, 189, 155, 61, 43, 49, 172, 190, 194, 248, 155, 190, 99, 241, 249, 60, 117, 53, 229, 188, 185, 204, 195, 190, 217, 205, 43, 189, 184, 157, 142, 62, 253, 198, 189, 189, 164, 2, 247, 190, 246, 165, 6, 62, 202, 163, 1, 191, 21, 49, 100, 62, 188, 226, 202, 62, 155, 137, 227, 190, 187, 4, 18, 191, 163, 127, 155, 190, 186, 215, 130, 62, 106, 249, 102, 190, 74, 235, 34, 190, 155, 128, 213, 61, 27, 182, 9, 190, 129, 113, 201, 60, 0, 191, 9, 190, 93, 243, 142, 189, 53, 84, 140, 61, 194, 20, 112, 62, 89, 16, 219, 190, 74, 206, 141, 62, 149, 190, 79, 190, 211, 170, 240, 190, 243, 161, 242, 190, 184, 101, 104, 189, 107, 131, 67, 189, 146, 5, 42, 62, 125, 150, 115, 190, 245, 215, 66, 191, 64, 3, 138, 60, 212, 20, 225, 61, 133, 88, 44, 191, 136, 6, 142, 62, 65, 123, 68, 62, 222, 195, 22, 62, 39, 146, 224, 62, 209, 99, 162, 190, 41, 12, 214, 189, 147, 223, 197, 61, 28, 253, 92, 62, 42, 225, 144, 62, 127, 153, 149, 190, 164, 227, 26, 191, 170, 171, 47, 61, 47, 184, 19, 191, 16, 129, 129, 61, 74, 230, 159, 190, 111, 7, 147, 61, 225, 45, 76, 191, 223, 84, 21, 62, 124, 143, 13, 190, 51, 123, 150, 188, 94, 141, 193, 190, 243, 20, 176, 62, 215, 64, 239, 188, 101, 169, 82, 61, 205, 7, 167, 61, 181, 151, 8, 62, 241, 64, 84, 62, 93, 77, 246, 61, 217, 47, 124, 61, 115, 137, 2, 62, 6, 39, 229, 61, 233, 14, 201, 188, 98, 143, 195, 61, 118, 196, 152, 62, 249, 9, 0, 190, 88, 210, 231, 62, 46, 20, 61, 189, 22, 108, 187, 60, 44, 98, 192, 189, 178, 193, 108, 62, 204, 110, 8, 61, 184, 68, 110, 188, 221, 118, 109, 62, 84, 109, 191, 189, 101, 94, 120, 62, 178, 144, 6, 190, 119, 195, 148, 190, 88, 38, 151, 190, 31, 8, 242, 187, 122, 49, 212, 59, 251, 10, 140, 190, 121, 153, 22, 62, 49, 187, 156, 62, 20, 194, 102, 61, 219, 236, 54, 191, 65, 20, 97, 190, 91, 201, 15, 190, 182, 40, 242, 62, 90, 206, 130, 62, 165, 195, 138, 62, 167, 148, 155, 60, 245, 128, 148, 62, 119, 106, 53, 62, 93, 24, 167, 62, 235, 189, 207, 62, 29, 37, 230, 61, 218, 227, 15, 62, 249, 224, 12, 189, 235, 190, 16, 191, 61, 220, 229, 190, 137, 32, 137, 62, 134, 33, 21, 60, 224, 86, 168, 61, 211, 241, 53, 62, 112, 13, 181, 62, 213, 205, 216, 61, 164, 149, 66, 62, 67, 2, 42, 190, 10, 100, 38, 190, 213, 253, 15, 190, 162, 195, 155, 189, 67, 168, 228, 61, 58, 11, 10, 191, 39, 144, 184, 62, 251, 151, 96, 190, 60, 217, 140, 189, 117, 110, 93, 61, 201, 60, 178, 61, 42, 214, 81, 61, 171, 117, 86, 62, 112, 236, 64, 62, 117, 59, 191, 189, 86, 20, 16, 62, 61, 168, 96, 62, 241, 119, 203, 61, 105, 187, 39, 190, 208, 160, 228, 59, 88, 108, 53, 62, 216, 68, 23, 190, 175, 128, 116, 62, 131, 164, 3, 189, 165, 60, 116, 185, 44, 60, 54, 61, 223, 111, 1, 63, 177, 143, 132, 188, 40, 13, 14, 62, 194, 91, 47, 62, 226, 70, 190, 189, 83, 206, 89, 62, 212, 143, 50, 190, 23, 49, 90, 190, 122, 181, 41, 190, 223, 29, 2, 62, 182, 9, 17, 190, 137, 22, 44, 190, 9, 160, 132, 61, 69, 191, 12, 62, 3, 160, 47, 61, 67, 174, 196, 189, 242, 58, 124, 60, 160, 11, 71, 62, 130, 231, 194, 190, 43, 255, 240, 62, 103, 56, 44, 191, 61, 222, 206, 190, 1, 130, 67, 189, 174, 207, 232, 189, 99, 98, 37, 191, 165, 16, 160, 62, 44, 70, 67, 60, 233, 153, 25, 189, 74, 96, 154, 189, 224, 20, 96, 62, 168, 9, 102, 61, 218, 27, 59, 62, 236, 85, 213, 190, 181, 47, 33, 189, 142, 223, 121, 191, 153, 64, 239, 62, 236, 210, 158, 189, 197, 145, 163, 191, 87, 228, 23, 190, 202, 170, 141, 190, 249, 22, 159, 188, 246, 207, 83, 190, 207, 218, 255, 60, 84, 24, 39, 190, 51, 197, 80, 62, 10, 140, 200, 61, 255, 190, 134, 190, 38, 237, 44, 61, 209, 56, 46, 62, 165, 150, 90, 62, 170, 120, 129, 190, 190, 113, 10, 191, 170, 177, 65, 62, 249, 254, 4, 62, 61, 39, 54, 190, 234, 64, 178, 190, 120, 74, 240, 61, 208, 31, 84, 190, 188, 28, 201, 189, 224, 154, 139, 62, 248, 255, 196, 190, 167, 77, 88, 62, 142, 112, 142, 61, 90, 27, 119, 190, 37, 241, 140, 62, 101, 105, 121, 190, 130, 77, 122, 62, 25, 225, 43, 190, 252, 108, 94, 190, 250, 211, 89, 62, 206, 95, 193, 62, 126, 115, 152, 62, 6, 84, 211, 62, 105, 100, 195, 61, 224, 110, 82, 188, 167, 60, 175, 62, 195, 114, 187, 190, 164, 138, 148, 62, 233, 159, 110, 187, 235, 201, 95, 62, 168, 137, 48, 60, 156, 1, 109, 62, 142, 109, 189, 62, 64, 235, 164, 189, 190, 236, 61, 190, 2, 222, 36, 190, 14, 111, 86, 60, 200, 33, 38, 190, 170, 207, 152, 191, 14, 45, 24, 190, 121, 49, 129, 187, 9, 21, 180, 190, 136, 56, 163, 62, 13, 129, 200, 61, 195, 213, 185, 61, 103, 111, 108, 61, 157, 131, 201, 61, 155, 194, 76, 188, 72, 241, 145, 190, 247, 240, 189, 62, 139, 45, 124, 62, 47, 32, 232, 189, 147, 216, 104, 188, 118, 151, 149, 188, 234, 201, 88, 59, 178, 229, 132, 190, 22, 122, 165, 62, 229, 222, 254, 190, 13, 62, 127, 62, 84, 70, 173, 62, 156, 157, 229, 62, 126, 154, 225, 189, 141, 216, 228, 190, 55, 14, 224, 61, 155, 180, 141, 61, 92, 96, 50, 63, 191, 139, 222, 61, 72, 149, 122, 189, 219, 165, 90, 62, 58, 86, 121, 62, 255, 151, 75, 190, 223, 101, 161, 62, 30, 221, 93, 62, 26, 167, 103, 190, 169, 39, 193, 62, 18, 79, 205, 190, 24, 171, 170, 190, 99, 91, 199, 62, 120, 220, 60, 61, 97, 220, 41, 62, 174, 69, 64, 61, 38, 212, 43, 190, 64, 44, 74, 62, 248, 99, 36, 190, 52, 156, 190, 190, 152, 197, 122, 190, 24, 49, 6, 191, 130, 157, 145, 190, 46, 164, 193, 61, 28, 188, 65, 191, 43, 169, 225, 62, 151, 160, 144, 61, 200, 21, 24, 62, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 86, 109, 50, 62, 249, 38, 60, 190, 239, 230, 183, 61, 150, 121, 159, 62, 227, 139, 116, 62, 200, 4, 93, 191, 67, 94, 36, 60, 248, 114, 121, 62, 169, 182, 157, 187, 91, 115, 41, 191, 186, 120, 115, 61, 44, 245, 194, 62, 61, 59, 74, 190, 101, 86, 208, 62, 254, 240, 2, 191, 114, 170, 36, 190, 114, 141, 16, 190, 167, 189, 61, 190, 231, 71, 225, 190, 169, 94, 101, 191, 40, 169, 182, 62, 152, 85, 17, 189, 187, 200, 0, 190, 116, 147, 246, 61, 250, 68, 156, 190, 200, 111, 66, 189, 181, 5, 123, 190, 134, 164, 171, 62, 14, 176, 224, 190, 87, 104, 82, 62, 90, 118, 159, 62, 62, 82, 77, 62, 78, 173, 64, 62, 100, 45, 162, 61, 82, 234, 99, 62, 97, 221, 112, 60, 192, 66, 129, 62, 248, 219, 134, 190, 230, 41, 17, 191, 60, 51, 60, 62, 165, 199, 139, 189, 43, 80, 76, 191, 32, 233, 176, 189, 89, 168, 156, 62, 15, 48, 208, 61, 55, 51, 68, 62, 65, 103, 111, 190, 146, 98, 138, 190, 20, 74, 25, 62, 203, 5, 131, 62, 213, 202, 53, 190, 165, 82, 182, 190, 169, 220, 9, 63, 228, 193, 25, 190, 86, 81, 120, 189, 244, 9, 124, 61, 119, 155, 173, 189, 166, 30, 84, 190, 234, 197, 161, 190, 165, 95, 150, 58, 2, 55, 145, 191, 115, 250, 109, 61, 192, 158, 253, 62, 8, 75, 226, 62, 12, 16, 5, 62, 149, 234, 164, 190, 42, 159, 30, 190, 58, 130, 141, 62, 223, 130, 156, 62, 116, 124, 26, 190, 107, 193, 96, 61, 48, 12, 223, 61, 19, 146, 224, 189, 203, 173, 194, 190, 154, 158, 74, 62, 93, 22, 164, 62, 219, 227, 86, 61, 57, 160, 95, 62, 133, 77, 93, 62, 182, 60, 22, 62, 215, 248, 0, 190, 120, 17, 233, 190, 13, 248, 226, 189, 166, 252, 19, 190, 214, 162, 69, 62, 170, 159, 130, 61, 204, 75, 128, 190, 205, 57, 15, 62, 179, 68, 247, 188, 232, 187, 150, 62, 21, 71, 33, 190, 42, 125, 110, 189, 196, 166, 163, 61, 143, 248, 134, 61, 137, 139, 219, 188, 128, 115, 120, 62, 150, 126, 6, 190, 8, 20, 180, 189, 97, 59, 152, 62, 45, 113, 120, 62, 134, 63, 36, 62, 118, 77, 168, 190, 35, 145, 26, 191, 54, 1, 82, 190, 27, 213, 89, 61, 65, 75, 62, 191, 192, 11, 239, 189, 240, 113, 107, 62, 83, 177, 230, 61, 90, 116, 202, 62, 228, 68, 46, 190, 107, 188, 205, 190, 200, 129, 155, 61, 192, 247, 6, 62, 133, 64, 123, 190, 98, 91, 220, 190, 82, 205, 208, 62, 29, 13, 64, 190, 190, 237, 51, 189, 90, 177, 17, 189, 248, 103, 160, 62, 120, 188, 10, 191, 66, 20, 185, 190, 2, 154, 34, 62, 136, 168, 148, 191, 161, 64, 34, 62, 74, 170, 192, 62, 235, 67, 188, 62, 200, 130, 249, 61, 9, 135, 56, 62, 180, 136, 190, 189, 32, 235, 154, 188, 171, 113, 196, 188, 180, 0, 37, 62, 152, 239, 7, 190, 89, 30, 10, 190, 112, 210, 103, 190, 18, 68, 190, 189, 25, 243, 181, 61, 72, 160, 204, 61, 145, 229, 53, 61, 204, 200, 233, 60, 127, 156, 98, 58, 77, 80, 168, 188, 54, 45, 72, 190, 133, 182, 193, 62, 136, 169, 214, 58, 209, 238, 253, 61, 36, 8, 215, 189, 22, 81, 77, 190, 12, 230, 72, 61, 214, 119, 160, 61, 185, 13, 130, 189, 101, 102, 250, 189, 40, 39, 12, 62, 156, 198, 0, 62, 77, 103, 55, 189, 129, 200, 234, 60, 113, 108, 111, 62, 213, 87, 97, 62, 237, 98, 250, 61, 236, 208, 11, 190, 213, 74, 88, 189, 52, 129, 61, 61, 171, 71, 0, 62, 90, 254, 103, 61, 87, 105, 230, 189, 12, 118, 43, 190, 208, 175, 158, 61, 84, 89, 3, 62, 167, 160, 2, 190, 14, 168, 21, 190, 79, 24, 254, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 37, 198, 74, 61, 146, 239, 79, 188, 1, 151, 228, 189, 199, 166, 167, 60, 210, 234, 44, 190, 199, 192, 14, 190, 69, 75, 234, 188, 235, 242, 14, 62, 112, 101, 23, 189, 59, 44, 4, 189, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 227, 189, 18, 191, 219, 139, 16, 191, 137, 196, 60, 62, 121, 227, 146, 188, 112, 198, 181, 190, 210, 46, 173, 61, 42, 0, 63, 62, 233, 104, 141, 62, 26, 7, 42, 191, 42, 136, 112, 62, 36, 216, 51, 191, 128, 49, 61, 189, 154, 143, 72, 190, 56, 65, 35, 62, 2, 37, 133, 62, 15, 131, 47, 62, 169, 210, 187, 61, 11, 247, 176, 61, 66, 10, 85, 62, 176, 154, 15, 61, 191, 69, 198, 62, 147, 58, 59, 62, 99, 34, 140, 61, 144, 193, 92, 62, 249, 27, 190, 61, 186, 132, 23, 61, 234, 137, 179, 62, 23, 248, 135, 190, 10, 95, 182, 61, 169, 89, 197, 190, 234, 219, 24, 63, 160, 196, 214, 60, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 194, 176, 151, 62, 246, 48, 160, 190, 64, 54, 241, 190, 86, 158, 132, 61, 92, 183, 204, 62, 241, 48, 46, 187, 125, 230, 126, 62, 154, 201, 105, 188, 213, 130, 148, 190, 178, 204, 110, 190, 29, 202, 228, 62, 135, 83, 135, 62, 21, 68, 34, 191, 128, 254, 143, 62, 198, 228, 141, 60, 98, 73, 133, 190, 160, 148, 106, 61, 162, 129, 67, 62, 28, 68, 2, 61, 190, 247, 216, 189, 6, 92, 133, 189, 43, 25, 93, 62, 138, 65, 88, 62, 68, 73, 12, 190, 106, 29, 49, 62, 98, 172, 128, 190, 253, 153, 64, 61, 7, 36, 92, 190, 239, 126, 33, 190, 221, 205, 128, 62, 238, 37, 243, 61, 111, 154, 144, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 246, 200, 245, 60, 22, 88, 235, 190, 210, 224, 94, 191, 9, 238, 92, 61, 164, 56, 50, 191, 90, 160, 223, 60, 83, 17, 100, 62, 118, 170, 1, 62, 146, 168, 162, 189, 223, 97, 195, 61, 81, 77, 17, 61, 53, 154, 66, 62, 136, 80, 11, 190, 236, 32, 2, 190, 52, 112, 158, 189, 6, 83, 64, 60, 43, 220, 158, 61, 97, 183, 179, 61, 236, 237, 162, 62, 116, 219, 99, 62, 168, 135, 237, 189, 104, 171, 139, 61, 185, 179, 36, 62, 71, 100, 166, 190, 55, 25, 185, 187, 104, 40, 99, 190, 198, 23, 184, 62, 204, 26, 22, 190, 213, 205, 140, 190, 89, 244, 43, 190, 180, 74, 220, 189, 85, 131, 137, 189, 126, 98, 182, 62, 165, 252, 74, 191, 6, 4, 170, 191, 225, 246, 149, 190, 98, 9, 102, 191, 248, 81, 161, 62, 137, 97, 6, 63, 113, 60, 38, 62, 13, 27, 13, 60, 28, 92, 184, 62, 198, 126, 154, 62, 16, 203, 42, 62, 93, 218, 173, 190, 66, 160, 156, 62, 244, 10, 152, 190, 184, 195, 94, 190, 60, 32, 117, 62, 252, 136, 75, 62, 179, 225, 189, 58, 234, 173, 189, 62, 41, 53, 146, 190, 191, 4, 106, 61, 227, 192, 41, 62, 5, 143, 98, 61, 241, 202, 155, 189, 50, 150, 213, 189, 226, 168, 208, 62, 1, 146, 14, 59, 184, 6, 77, 189, 96, 171, 231, 190, 64, 174, 103, 61, 143, 251, 30, 190, 26, 113, 35, 63, 181, 115, 247, 61, 112, 202, 128, 61, 254, 9, 95, 190, 216, 52, 210, 190, 52, 148, 247, 61, 60, 176, 108, 189, 92, 231, 89, 190, 22, 7, 31, 191, 43, 159, 92, 61, 219, 201, 21, 191, 99, 190, 215, 60, 116, 55, 251, 61, 140, 13, 80, 188, 132, 165, 4, 62, 89, 16, 109, 61, 210, 223, 180, 189, 165, 117, 116, 62, 117, 152, 93, 190, 76, 98, 42, 62, 152, 107, 132, 62, 118, 229, 39, 59, 181, 126, 59, 62, 126, 231, 122, 61, 59, 107, 31, 62, 149, 11, 53, 189, 128, 108, 141, 61, 88, 207, 211, 61, 36, 141, 20, 62, 96, 154, 143, 190, 126, 157, 14, 63, 162, 12, 54, 62, 54, 135, 23, 190, 181, 76, 26, 61, 139, 121, 34, 190, 225, 38, 144, 61, 34, 54, 152, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 78, 57, 34, 62, 93, 137, 146, 188, 42, 43, 8, 190, 194, 128, 173, 61, 37, 177, 158, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 168, 226, 232, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 142, 247, 136, 189, 149, 191, 46, 190, 84, 22, 10, 190, 218, 230, 37, 190, 213, 163, 44, 62, 101, 244, 51, 190, 8, 14, 87, 61, 63, 135, 42, 189, 127, 243, 182, 62, 98, 16, 1, 62, 139, 83, 3, 191, 201, 173, 161, 190, 39, 39, 153, 190, 184, 67, 24, 190, 96, 77, 134, 61, 175, 186, 17, 191, 106, 79, 41, 189, 172, 160, 135, 190, 193, 58, 9, 190, 212, 7, 252, 190, 43, 0, 65, 190, 185, 134, 7, 62, 166, 123, 14, 62, 49, 76, 54, 62, 143, 38, 1, 191, 120, 14, 157, 191, 251, 243, 137, 190, 226, 218, 133, 190, 186, 95, 146, 62, 204, 168, 110, 189, 119, 78, 224, 187, 41, 101, 167, 190, 136, 172, 9, 191, 19, 144, 35, 190, 23, 201, 157, 61, 250, 166, 46, 191, 87, 24, 170, 62, 54, 117, 61, 188, 60, 244, 177, 62, 233, 109, 191, 60, 134, 239, 75, 190, 235, 242, 147, 190, 72, 97, 9, 62, 21, 45, 206, 61, 78, 245, 96, 62, 18, 69, 164, 189, 50, 207, 62, 190, 191, 70, 173, 62, 209, 234, 113, 61, 89, 234, 68, 60, 108, 184, 140, 61, 214, 224, 62, 62, 170, 107, 204, 189, 147, 163, 251, 61, 121, 192, 196, 190, 131, 171, 92, 190, 56, 2, 158, 62, 244, 195, 46, 60, 52, 22, 200, 62, 209, 57, 109, 190, 213, 55, 215, 61, 242, 52, 207, 62, 61, 42, 107, 187, 91, 25, 184, 190, 252, 81, 194, 61, 31, 194, 159, 190, 134, 224, 192, 190, 88, 84, 109, 62, 51, 246, 48, 191, 110, 101, 148, 62, 74, 152, 79, 62, 96, 90, 130, 62, 245, 16, 41, 62, 147, 1, 241, 188, 172, 192, 38, 61, 166, 129, 146, 188, 249, 6, 193, 190, 129, 126, 98, 61, 191, 175, 159, 189, 173, 241, 152, 190, 24, 214, 129, 187, 52, 8, 88, 189, 124, 117, 0, 60, 247, 233, 219, 188, 101, 148, 24, 61, 164, 209, 55, 190, 249, 215, 65, 62, 28, 225, 17, 62, 199, 6, 135, 190, 200, 154, 136, 60, 127, 139, 136, 190, 145, 136, 232, 61, 116, 249, 89, 190, 137, 206, 170, 190, 187, 143, 44, 62, 225, 183, 122, 62, 214, 59, 234, 61, 145, 186, 188, 61, 62, 14, 72, 189, 184, 72, 235, 188, 7, 18, 84, 62, 234, 68, 207, 188, 92, 36, 136, 61, 167, 102, 252, 189, 74, 179, 138, 62, 34, 5, 246, 61, 165, 52, 202, 62, 34, 88, 224, 61, 70, 177, 159, 62, 27, 40, 134, 191, 46, 32, 95, 190, 123, 56, 208, 61, 69, 59, 178, 189, 130, 95, 140, 191, 169, 93, 163, 61, 46, 232, 70, 60, 198, 51, 19, 189, 160, 35, 11, 63, 118, 189, 186, 190, 200, 139, 145, 190, 55, 78, 93, 62, 201, 80, 227, 190, 18, 27, 176, 190, 196, 177, 145, 191, 93, 98, 220, 62, 25, 57, 129, 62, 56, 173, 126, 190, 29, 117, 4, 63, 44, 187, 93, 189, 29, 61, 153, 190, 151, 210, 120, 61, 214, 186, 96, 190, 89, 181, 239, 190, 39, 77, 71, 61, 76, 74, 130, 189, 239, 0, 135, 61, 119, 83, 227, 61, 183, 101, 136, 62, 202, 73, 54, 62, 34, 212, 216, 61, 246, 183, 179, 189, 34, 34, 211, 189, 0, 136, 62, 190, 25, 41, 233, 187, 234, 166, 238, 59, 128, 154, 219, 189, 24, 122, 169, 190, 21, 130, 208, 190, 14, 117, 67, 62, 24, 152, 120, 189, 151, 23, 111, 62, 113, 0, 2, 61, 194, 44, 232, 190, 77, 80, 107, 189, 173, 141, 34, 191, 247, 165, 29, 60, 59, 210, 147, 189, 67, 34, 101, 189, 138, 222, 14, 190, 180, 251, 207, 62, 31, 76, 180, 62, 236, 172, 162, 62, 53, 15, 177, 61, 80, 191, 163, 62, 205, 92, 105, 62, 51, 180, 137, 190, 89, 70, 28, 62, 15, 101, 196, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 136, 132, 61, 93, 159, 127, 62, 52, 93, 181, 189, 223, 165, 184, 190, 35, 94, 147, 62, 34, 45, 86, 60, 122, 161, 214, 61, 136, 221, 228, 190, 208, 35, 15, 60, 109, 137, 66, 62, 244, 52, 215, 188, 8, 161, 143, 61, 18, 131, 35, 61, 114, 173, 150, 61, 248, 148, 199, 189, 148, 243, 247, 61, 60, 212, 116, 62, 211, 108, 222, 61, 225, 116, 161, 189, 113, 216, 87, 61, 71, 25, 229, 188, 87, 105, 33, 62, 103, 154, 5, 61, 106, 237, 68, 62, 124, 190, 240, 61, 86, 181, 124, 61, 237, 77, 136, 189, 18, 188, 142, 190, 225, 133, 238, 188, 66, 156, 1, 62, 15, 70, 0, 189, 53, 63, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 114, 8, 62, 91, 100, 99, 63, 197, 83, 199, 62, 216, 133, 30, 191, 29, 2, 166, 60, 178, 249, 48, 63, 46, 117, 190, 60, 227, 225, 72, 63, 59, 166, 164, 62, 79, 247, 87, 190, 242, 181, 32, 191, 144, 157, 238, 61, 21, 164, 244, 190, 252, 62, 151, 190, 202, 8, 4, 190, 67, 197, 177, 190, 186, 150, 226, 60, 160, 77, 157, 189, 46, 133, 187, 61, 21, 247, 124, 62, 147, 183, 140, 189, 148, 88, 20, 189, 252, 253, 149, 61, 35, 150, 143, 190, 218, 195, 14, 191, 14, 161, 201, 61, 35, 65, 215, 189, 193, 101, 61, 191, 55, 55, 133, 190, 30, 78, 219, 59, 34, 246, 140, 190, 116, 118, 147, 62, 203, 216, 83, 62, 174, 245, 196, 62, 57, 227, 12, 62, 145, 168, 43, 63, 195, 159, 164, 190, 153, 194, 248, 61, 125, 244, 113, 190, 2, 51, 193, 60, 144, 76, 2, 61, 124, 219, 185, 190, 208, 26, 158, 62, 71, 78, 140, 189, 162, 19, 20, 63, 69, 231, 184, 190, 56, 168, 131, 62, 151, 27, 138, 190, 3, 151, 136, 190, 2, 74, 87, 188, 25, 228, 249, 61, 80, 170, 54, 189, 98, 107, 166, 189, 9, 95, 121, 190, 159, 3, 130, 189, 123, 144, 192, 189, 232, 135, 5, 189, 147, 244, 138, 190, 56, 249, 47, 62, 181, 83, 44, 61, 171, 141, 191, 188, 139, 9, 16, 190, 149, 48, 224, 62, 226, 10, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 76, 135, 62, 200, 78, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {162, 0, 132, 62, 204, 70, 172, 60, 173, 172, 223, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 106, 236, 62, 248, 140, 176, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}