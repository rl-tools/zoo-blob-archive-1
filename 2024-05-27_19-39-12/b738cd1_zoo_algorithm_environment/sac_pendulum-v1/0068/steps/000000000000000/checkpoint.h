// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 155, 250, 190, 226, 190, 214, 190, 238, 165, 45, 62, 242, 164, 231, 190, 189, 30, 150, 190, 177, 254, 201, 62, 34, 56, 234, 187, 233, 105, 53, 189, 183, 217, 200, 62, 70, 106, 7, 190, 88, 77, 95, 62, 49, 60, 105, 61, 57, 114, 19, 61, 102, 158, 81, 189, 198, 144, 4, 62, 218, 60, 5, 190, 143, 208, 36, 62, 203, 74, 177, 190, 41, 205, 39, 190, 94, 151, 54, 190, 198, 106, 224, 190, 162, 88, 11, 190, 164, 137, 184, 62, 109, 197, 216, 61, 184, 253, 132, 190, 55, 62, 171, 62, 48, 48, 47, 62, 127, 230, 181, 190, 152, 5, 12, 190, 36, 106, 172, 190, 178, 250, 174, 62, 145, 241, 214, 62, 59, 89, 14, 63, 114, 69, 15, 191, 18, 204, 195, 61, 160, 143, 6, 191, 206, 40, 229, 190, 132, 120, 229, 62, 125, 2, 9, 63, 237, 130, 10, 63, 193, 6, 171, 62, 39, 42, 80, 188, 227, 142, 1, 63, 84, 37, 139, 62, 75, 208, 189, 190, 237, 128, 184, 62, 147, 202, 18, 62, 206, 224, 15, 191, 237, 181, 245, 190, 175, 215, 32, 190, 130, 141, 141, 190, 229, 43, 243, 190, 249, 193, 102, 61, 121, 196, 219, 59, 242, 3, 4, 191, 127, 163, 120, 61, 139, 250, 5, 191, 47, 19, 81, 189, 239, 100, 82, 61, 0, 103, 210, 190, 132, 156, 49, 62, 198, 131, 239, 190, 54, 62, 129, 59, 89, 114, 145, 189, 181, 15, 177, 62, 26, 2, 4, 191, 196, 231, 94, 190, 117, 33, 242, 190, 198, 19, 215, 190, 149, 234, 198, 189, 128, 148, 169, 62, 17, 125, 22, 190, 88, 208, 0, 191, 79, 6, 196, 61, 52, 210, 63, 62, 0, 175, 124, 190, 137, 204, 187, 62, 167, 7, 103, 190, 1, 0, 132, 189, 248, 114, 30, 190, 114, 165, 129, 190, 235, 0, 248, 189, 67, 62, 248, 62, 129, 78, 28, 62, 162, 254, 56, 189, 179, 217, 227, 190, 149, 12, 236, 190, 145, 169, 84, 62, 203, 194, 90, 190, 245, 165, 19, 63, 221, 2, 4, 63, 102, 61, 173, 190, 100, 238, 203, 61, 122, 42, 13, 63, 230, 29, 126, 62, 177, 171, 126, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 164, 19, 191, 227, 68, 154, 62, 218, 154, 219, 62, 34, 50, 65, 190, 51, 122, 97, 190, 83, 57, 181, 62, 57, 94, 7, 190, 238, 40, 113, 62, 151, 2, 231, 190, 149, 204, 51, 62, 47, 76, 6, 191, 90, 111, 6, 63, 190, 103, 187, 62, 70, 67, 221, 189, 183, 211, 164, 61, 229, 171, 186, 189, 247, 78, 249, 190, 164, 146, 246, 189, 200, 117, 225, 190, 87, 207, 252, 62, 88, 4, 225, 190, 150, 213, 241, 62, 134, 190, 8, 63, 207, 129, 165, 190, 133, 22, 157, 189, 134, 222, 251, 190, 167, 70, 252, 61, 113, 232, 222, 62, 110, 44, 138, 190, 35, 184, 12, 191, 6, 13, 131, 190, 191, 143, 209, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 132, 20, 62, 123, 132, 215, 189, 17, 36, 50, 62, 63, 190, 55, 189, 101, 90, 48, 190, 150, 137, 47, 61, 252, 57, 183, 61, 136, 3, 207, 187, 181, 221, 231, 189, 92, 240, 183, 59, 100, 222, 96, 189, 135, 123, 157, 61, 209, 55, 25, 62, 180, 88, 54, 189, 72, 246, 200, 189, 49, 4, 252, 61, 131, 172, 213, 189, 70, 197, 206, 61, 200, 14, 45, 62, 253, 143, 21, 189, 183, 63, 150, 61, 206, 118, 46, 190, 160, 139, 133, 189, 151, 2, 142, 61, 178, 23, 205, 61, 197, 204, 42, 190, 234, 241, 232, 188, 42, 13, 176, 61, 104, 8, 30, 62, 156, 48, 14, 62, 213, 196, 254, 188, 138, 108, 16, 190, 168, 77, 3, 62, 70, 59, 44, 190, 227, 197, 37, 62, 76, 5, 206, 189, 99, 154, 207, 188, 107, 211, 216, 61, 75, 184, 50, 189, 164, 106, 136, 189, 176, 48, 34, 190, 66, 74, 13, 190, 27, 197, 74, 189, 165, 59, 223, 189, 148, 10, 18, 62, 98, 37, 211, 189, 166, 39, 98, 188, 120, 125, 128, 189, 4, 107, 39, 190, 3, 180, 242, 188, 201, 153, 10, 190, 79, 234, 210, 189, 11, 169, 229, 61, 78, 74, 155, 189, 69, 213, 39, 62, 188, 249, 254, 61, 145, 223, 13, 62, 78, 30, 156, 61, 151, 190, 174, 189, 163, 201, 17, 189, 150, 29, 198, 59, 32, 200, 20, 62, 179, 241, 210, 188, 28, 159, 255, 188, 106, 248, 14, 62, 13, 12, 81, 61, 173, 54, 102, 61, 52, 212, 134, 189, 148, 78, 18, 62, 79, 222, 101, 60, 252, 69, 138, 188, 60, 24, 12, 190, 159, 99, 0, 62, 194, 11, 172, 61, 218, 142, 39, 62, 44, 50, 23, 190, 86, 188, 185, 186, 255, 112, 3, 190, 63, 217, 196, 60, 170, 122, 212, 61, 78, 140, 196, 187, 242, 224, 70, 189, 251, 120, 85, 189, 249, 124, 45, 62, 0, 195, 46, 189, 22, 60, 181, 189, 159, 180, 181, 61, 144, 221, 232, 189, 231, 59, 132, 189, 148, 186, 3, 190, 33, 192, 199, 189, 182, 228, 41, 62, 172, 102, 22, 186, 181, 75, 198, 189, 174, 169, 171, 61, 156, 186, 27, 190, 80, 250, 194, 61, 24, 168, 182, 189, 186, 13, 178, 61, 168, 119, 0, 189, 117, 223, 59, 60, 84, 68, 23, 61, 251, 60, 26, 190, 208, 108, 169, 189, 126, 146, 6, 62, 81, 145, 199, 61, 32, 192, 206, 61, 139, 66, 133, 59, 221, 113, 234, 61, 6, 42, 102, 189, 60, 0, 174, 189, 246, 7, 102, 61, 253, 47, 220, 189, 245, 75, 9, 61, 232, 243, 30, 62, 49, 242, 14, 61, 163, 6, 171, 58, 89, 53, 35, 60, 159, 39, 38, 190, 179, 15, 31, 190, 244, 223, 72, 189, 11, 71, 227, 189, 195, 153, 44, 190, 184, 212, 233, 61, 194, 172, 19, 190, 80, 24, 38, 62, 173, 246, 243, 189, 62, 53, 154, 61, 25, 23, 231, 189, 66, 65, 10, 60, 248, 150, 74, 61, 168, 164, 156, 61, 178, 116, 172, 188, 27, 56, 185, 61, 74, 246, 169, 61, 247, 245, 6, 61, 64, 20, 238, 61, 145, 26, 144, 61, 112, 229, 44, 189, 64, 199, 16, 62, 20, 151, 219, 60, 125, 3, 188, 61, 23, 134, 14, 61, 234, 59, 22, 61, 134, 161, 21, 190, 219, 159, 253, 189, 228, 251, 52, 188, 255, 86, 40, 189, 204, 85, 203, 61, 209, 68, 191, 189, 216, 141, 248, 61, 14, 0, 246, 61, 69, 247, 176, 60, 251, 13, 245, 188, 15, 176, 34, 188, 249, 135, 47, 188, 130, 201, 213, 189, 2, 189, 248, 189, 1, 211, 10, 62, 24, 165, 240, 189, 147, 44, 10, 190, 6, 82, 48, 190, 41, 147, 2, 190, 158, 247, 213, 61, 223, 37, 44, 190, 6, 140, 245, 61, 202, 67, 38, 190, 145, 246, 35, 62, 67, 115, 219, 189, 241, 163, 149, 61, 69, 202, 14, 62, 200, 129, 161, 189, 30, 210, 108, 61, 251, 115, 51, 62, 74, 22, 153, 189, 242, 172, 15, 190, 237, 251, 41, 61, 57, 0, 143, 189, 148, 211, 202, 189, 144, 81, 206, 60, 76, 213, 178, 61, 206, 67, 17, 59, 179, 255, 5, 62, 96, 193, 248, 189, 80, 139, 145, 187, 19, 39, 81, 189, 143, 67, 11, 190, 236, 222, 226, 188, 33, 173, 49, 62, 114, 124, 220, 61, 119, 182, 106, 189, 177, 194, 46, 188, 21, 87, 232, 60, 32, 103, 179, 61, 51, 115, 165, 61, 105, 99, 2, 62, 8, 28, 132, 60, 151, 56, 10, 190, 43, 169, 241, 61, 214, 229, 243, 61, 58, 132, 188, 61, 120, 167, 165, 189, 238, 148, 16, 189, 150, 82, 141, 59, 207, 22, 239, 59, 124, 185, 84, 189, 70, 53, 104, 61, 99, 97, 94, 188, 118, 168, 163, 189, 252, 177, 168, 61, 189, 243, 225, 189, 87, 158, 208, 61, 165, 104, 6, 62, 22, 43, 226, 189, 111, 120, 195, 61, 144, 134, 132, 61, 250, 94, 65, 61, 109, 251, 163, 61, 2, 92, 209, 61, 40, 39, 28, 190, 94, 221, 49, 189, 172, 149, 190, 189, 106, 196, 161, 61, 39, 172, 48, 189, 176, 146, 204, 189, 51, 149, 41, 190, 26, 58, 24, 62, 223, 182, 66, 189, 111, 208, 132, 61, 88, 6, 116, 189, 90, 37, 22, 189, 128, 215, 29, 62, 45, 30, 44, 190, 20, 99, 192, 189, 143, 86, 12, 62, 195, 232, 153, 188, 81, 202, 45, 189, 178, 184, 9, 60, 89, 212, 19, 190, 211, 105, 202, 61, 109, 50, 246, 61, 193, 168, 6, 190, 74, 152, 226, 189, 155, 58, 5, 62, 231, 237, 243, 188, 108, 88, 52, 190, 88, 186, 154, 189, 247, 8, 47, 190, 73, 112, 225, 61, 201, 129, 149, 189, 147, 71, 215, 189, 157, 67, 165, 59, 85, 36, 179, 189, 22, 102, 121, 189, 166, 113, 43, 190, 110, 174, 241, 59, 35, 204, 180, 188, 175, 195, 88, 189, 30, 33, 199, 61, 125, 28, 35, 61, 202, 156, 89, 60, 241, 185, 13, 62, 15, 234, 13, 62, 139, 3, 43, 61, 78, 136, 178, 189, 162, 171, 18, 188, 131, 104, 32, 62, 143, 169, 240, 189, 66, 204, 103, 189, 233, 78, 145, 189, 0, 68, 106, 61, 243, 60, 102, 189, 143, 106, 14, 189, 183, 243, 81, 61, 160, 186, 244, 189, 208, 142, 33, 62, 57, 11, 79, 60, 78, 121, 197, 189, 22, 136, 227, 61, 14, 85, 7, 62, 242, 177, 31, 190, 254, 47, 31, 62, 147, 176, 253, 186, 51, 30, 67, 187, 70, 157, 41, 62, 108, 221, 127, 60, 126, 73, 9, 62, 107, 219, 222, 61, 61, 142, 166, 61, 160, 105, 11, 60, 120, 166, 52, 62, 248, 179, 4, 62, 175, 228, 52, 190, 5, 52, 254, 61, 166, 162, 40, 62, 2, 167, 18, 190, 193, 218, 216, 188, 176, 157, 11, 190, 127, 9, 25, 190, 245, 198, 43, 190, 56, 144, 34, 190, 7, 16, 207, 61, 244, 80, 185, 61, 224, 186, 48, 62, 199, 95, 7, 62, 220, 37, 52, 190, 156, 188, 128, 188, 118, 50, 136, 188, 92, 18, 245, 189, 151, 197, 49, 62, 118, 138, 187, 189, 172, 130, 53, 189, 136, 239, 25, 62, 77, 29, 137, 61, 254, 62, 255, 189, 16, 121, 237, 61, 176, 27, 57, 61, 31, 59, 238, 61, 141, 69, 200, 189, 190, 171, 6, 62, 228, 228, 159, 189, 198, 179, 16, 190, 148, 30, 37, 62, 7, 74, 8, 62, 63, 169, 201, 187, 16, 36, 33, 62, 74, 88, 233, 189, 100, 156, 224, 189, 39, 246, 23, 62, 91, 78, 37, 190, 81, 222, 104, 188, 238, 206, 248, 61, 144, 177, 174, 61, 138, 56, 233, 188, 96, 135, 1, 190, 197, 213, 80, 189, 250, 110, 218, 61, 46, 182, 139, 61, 193, 27, 198, 188, 146, 130, 15, 62, 217, 140, 143, 61, 200, 114, 51, 60, 22, 139, 245, 189, 139, 201, 36, 190, 237, 124, 128, 60, 232, 197, 15, 190, 75, 2, 20, 190, 148, 79, 150, 188, 0, 67, 173, 189, 69, 23, 229, 61, 244, 21, 28, 190, 126, 212, 142, 186, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 34, 247, 215, 188, 176, 135, 163, 189, 176, 87, 148, 61, 171, 228, 194, 61, 223, 5, 155, 189, 198, 254, 239, 189, 138, 115, 235, 61, 253, 156, 147, 61, 217, 242, 246, 61, 146, 117, 216, 60, 103, 83, 5, 61, 103, 177, 255, 61, 173, 248, 131, 60, 238, 71, 132, 189, 217, 117, 36, 190, 79, 153, 160, 61, 171, 103, 175, 189, 89, 33, 28, 190, 213, 117, 200, 188, 152, 37, 182, 189, 151, 241, 227, 60, 222, 22, 192, 189, 25, 112, 215, 61, 127, 45, 246, 189, 167, 22, 131, 189, 76, 25, 163, 61, 149, 64, 155, 189, 96, 235, 249, 61, 135, 116, 55, 60, 210, 128, 207, 61, 189, 36, 47, 62, 146, 134, 198, 189, 130, 243, 156, 61, 35, 231, 2, 61, 221, 165, 168, 61, 9, 211, 20, 190, 153, 112, 8, 61, 76, 206, 50, 62, 111, 46, 186, 189, 239, 232, 27, 62, 209, 188, 104, 189, 158, 133, 26, 189, 14, 112, 254, 189, 243, 73, 4, 61, 194, 208, 230, 61, 13, 143, 17, 190, 131, 122, 222, 189, 49, 26, 247, 188, 244, 111, 1, 61, 27, 237, 161, 61, 27, 119, 28, 190, 11, 85, 9, 62, 125, 200, 17, 62, 118, 185, 200, 189, 37, 134, 71, 189, 152, 156, 3, 62, 240, 84, 106, 189, 9, 134, 13, 62, 109, 217, 233, 187, 199, 245, 181, 189, 13, 230, 21, 62, 28, 106, 161, 189, 58, 65, 224, 61, 212, 108, 227, 61, 84, 170, 44, 62, 78, 126, 231, 189, 20, 138, 241, 189, 96, 195, 46, 62, 135, 222, 200, 60, 28, 235, 7, 190, 184, 60, 167, 61, 9, 44, 98, 189, 17, 191, 4, 61, 115, 126, 6, 190, 19, 157, 1, 62, 32, 16, 228, 60, 58, 196, 26, 62, 113, 42, 174, 189, 77, 86, 240, 61, 42, 182, 12, 190, 178, 242, 205, 189, 57, 113, 11, 190, 184, 39, 2, 190, 9, 65, 160, 189, 152, 255, 177, 61, 147, 31, 6, 190, 37, 80, 30, 190, 104, 99, 17, 190, 50, 47, 14, 190, 188, 108, 249, 61, 205, 241, 34, 190, 54, 52, 20, 190, 143, 123, 23, 189, 31, 27, 226, 188, 214, 89, 204, 188, 68, 212, 120, 61, 78, 62, 2, 190, 30, 122, 229, 189, 233, 202, 41, 62, 166, 103, 231, 61, 180, 93, 202, 61, 239, 117, 174, 61, 20, 44, 48, 190, 141, 157, 45, 190, 89, 253, 153, 61, 217, 82, 251, 61, 252, 157, 7, 190, 146, 244, 156, 61, 199, 30, 135, 61, 194, 200, 1, 62, 71, 126, 140, 57, 104, 7, 189, 189, 162, 15, 242, 61, 96, 0, 7, 190, 236, 223, 146, 189, 137, 72, 143, 189, 201, 127, 108, 61, 209, 142, 171, 189, 12, 54, 66, 189, 232, 254, 8, 60, 62, 235, 47, 62, 78, 25, 201, 189, 103, 30, 121, 61, 130, 223, 161, 61, 249, 244, 241, 61, 231, 144, 151, 61, 123, 70, 4, 61, 99, 91, 105, 61, 36, 20, 133, 60, 218, 127, 175, 61, 126, 246, 7, 190, 45, 89, 113, 61, 127, 124, 116, 60, 45, 43, 4, 62, 70, 189, 221, 189, 90, 235, 211, 60, 112, 71, 183, 189, 34, 253, 145, 189, 200, 50, 4, 62, 87, 105, 214, 60, 99, 89, 151, 61, 33, 102, 165, 60, 33, 242, 148, 189, 43, 4, 197, 189, 109, 0, 188, 188, 205, 32, 129, 60, 151, 217, 229, 61, 127, 237, 135, 61, 110, 81, 19, 61, 244, 167, 184, 189, 241, 101, 110, 189, 200, 135, 142, 61, 160, 58, 2, 62, 150, 11, 254, 189, 68, 96, 145, 61, 249, 31, 21, 62, 39, 147, 79, 189, 1, 149, 210, 188, 146, 147, 150, 59, 21, 1, 33, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 127, 153, 234, 60, 153, 231, 1, 62, 185, 116, 19, 190, 117, 137, 9, 190, 126, 31, 6, 61, 198, 255, 14, 190, 153, 101, 45, 190, 74, 58, 2, 62, 147, 237, 20, 190, 113, 73, 204, 61, 144, 77, 122, 189, 171, 55, 60, 60, 82, 74, 22, 61, 199, 111, 173, 61, 222, 61, 186, 189, 10, 41, 52, 60, 167, 127, 198, 189, 154, 47, 43, 190, 222, 192, 111, 186, 190, 187, 44, 190, 150, 126, 105, 61, 21, 33, 29, 189, 94, 177, 12, 62, 111, 245, 21, 62, 61, 199, 28, 190, 221, 239, 91, 189, 51, 140, 36, 62, 139, 227, 114, 189, 236, 124, 230, 60, 178, 201, 52, 62, 34, 130, 177, 189, 55, 221, 183, 189, 243, 93, 42, 62, 161, 198, 190, 187, 245, 118, 171, 61, 100, 188, 42, 188, 94, 86, 10, 190, 115, 56, 191, 188, 63, 135, 4, 62, 80, 117, 13, 62, 122, 162, 152, 188, 57, 175, 199, 61, 199, 91, 110, 186, 175, 75, 162, 189, 250, 217, 78, 189, 158, 99, 233, 61, 132, 227, 243, 61, 245, 183, 143, 60, 234, 211, 176, 187, 230, 156, 42, 62, 146, 92, 16, 62, 178, 127, 195, 189, 124, 227, 100, 61, 11, 55, 30, 62, 241, 222, 88, 189, 157, 164, 97, 60, 72, 248, 222, 189, 221, 8, 49, 190, 108, 210, 46, 62, 96, 3, 146, 189, 119, 138, 145, 189, 164, 89, 172, 189, 121, 49, 44, 62, 230, 0, 170, 189, 178, 13, 31, 62, 148, 53, 163, 189, 210, 140, 253, 189, 200, 8, 221, 189, 227, 176, 30, 62, 25, 117, 159, 188, 216, 199, 228, 189, 54, 203, 4, 190, 178, 81, 206, 61, 87, 179, 11, 186, 254, 55, 241, 189, 168, 213, 215, 188, 250, 35, 41, 190, 23, 78, 139, 188, 165, 40, 7, 190, 248, 61, 51, 62, 123, 41, 23, 187, 127, 127, 255, 61, 230, 126, 45, 190, 126, 162, 165, 189, 60, 63, 254, 61, 199, 186, 46, 62, 151, 54, 49, 190, 255, 77, 138, 61, 138, 120, 198, 61, 223, 78, 121, 189, 190, 120, 24, 190, 8, 106, 162, 189, 59, 178, 24, 61, 128, 215, 106, 61, 40, 229, 42, 190, 135, 60, 52, 62, 94, 46, 215, 61, 98, 82, 217, 189, 65, 212, 12, 190, 191, 127, 187, 61, 180, 100, 94, 61, 224, 214, 155, 60, 120, 217, 231, 61, 72, 187, 16, 190, 153, 233, 9, 61, 126, 240, 21, 190, 51, 88, 238, 61, 197, 99, 2, 62, 12, 3, 32, 61, 188, 138, 192, 60, 244, 147, 218, 61, 114, 53, 36, 190, 226, 185, 15, 189, 161, 115, 165, 188, 184, 197, 16, 189, 193, 78, 144, 189, 235, 105, 12, 62, 114, 135, 37, 62, 33, 32, 14, 62, 80, 12, 222, 188, 32, 149, 44, 62, 108, 210, 109, 189, 0, 175, 38, 189, 240, 8, 52, 190, 191, 143, 144, 61, 3, 253, 50, 190, 246, 42, 155, 189, 147, 248, 220, 61, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 152, 26, 17, 61, 241, 54, 137, 60, 8, 56, 176, 61, 32, 7, 234, 61, 244, 247, 107, 61, 240, 26, 15, 190, 124, 160, 18, 190, 67, 165, 28, 61, 77, 131, 61, 186, 69, 185, 4, 190, 239, 55, 39, 190, 113, 221, 129, 61, 6, 245, 7, 62, 226, 179, 28, 190, 201, 120, 1, 62, 148, 68, 52, 62, 83, 75, 11, 190, 8, 72, 48, 190, 128, 89, 35, 62, 47, 29, 155, 61, 82, 104, 33, 62, 116, 230, 159, 60, 147, 176, 37, 189, 68, 180, 87, 60, 48, 36, 82, 189, 217, 182, 75, 61, 41, 164, 193, 61, 102, 248, 198, 189, 91, 108, 24, 190, 202, 167, 251, 59, 63, 70, 240, 60, 4, 18, 209, 61, 100, 75, 24, 61, 54, 229, 52, 190, 112, 206, 184, 61, 112, 128, 250, 189, 46, 178, 35, 62, 183, 11, 214, 61, 11, 23, 251, 61, 116, 14, 147, 61, 254, 6, 23, 62, 194, 122, 123, 61, 236, 200, 8, 190, 154, 243, 27, 59, 184, 65, 48, 61, 91, 113, 16, 190, 202, 188, 52, 190, 244, 17, 22, 190, 237, 142, 189, 61, 91, 53, 136, 188, 213, 97, 18, 190, 70, 204, 41, 62, 45, 232, 28, 190, 31, 205, 52, 189, 174, 254, 248, 189, 215, 66, 27, 62, 71, 190, 202, 189, 82, 139, 104, 58, 200, 33, 117, 61, 222, 98, 134, 188, 166, 20, 118, 61, 80, 189, 81, 188, 76, 76, 35, 62, 36, 31, 130, 189, 236, 191, 52, 62, 88, 64, 194, 187, 145, 242, 140, 61, 2, 242, 9, 190, 194, 70, 65, 61, 90, 32, 57, 61, 226, 82, 38, 190, 203, 167, 205, 189, 230, 20, 19, 62, 5, 76, 142, 58, 16, 173, 13, 190, 163, 55, 165, 188, 137, 110, 188, 61, 237, 11, 141, 189, 2, 108, 236, 60, 197, 130, 194, 188, 92, 153, 197, 61, 65, 182, 19, 190, 64, 128, 190, 189, 197, 40, 112, 61, 123, 247, 174, 61, 240, 71, 187, 61, 242, 181, 7, 61, 225, 196, 58, 60, 89, 121, 15, 189, 28, 240, 61, 189, 93, 122, 10, 190, 57, 39, 19, 62, 193, 42, 236, 61, 18, 205, 132, 189, 127, 152, 43, 62, 152, 109, 8, 60, 215, 105, 20, 190, 109, 153, 119, 61, 80, 166, 20, 190, 222, 20, 148, 61, 63, 253, 151, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 204, 34, 46, 62, 93, 137, 146, 188, 179, 111, 244, 189, 194, 128, 173, 61, 179, 190, 204, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 102, 195, 228, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 195, 78, 98, 189, 149, 191, 46, 190, 84, 22, 10, 190, 163, 0, 36, 190, 213, 163, 44, 62, 181, 3, 52, 190, 8, 14, 87, 61, 248, 7, 40, 189, 112, 18, 60, 61, 228, 248, 197, 189, 24, 218, 183, 189, 12, 197, 52, 190, 251, 52, 254, 60, 184, 90, 72, 61, 59, 41, 198, 61, 134, 86, 3, 190, 240, 178, 62, 189, 50, 167, 155, 189, 12, 179, 109, 60, 4, 201, 236, 189, 87, 4, 112, 189, 36, 101, 20, 62, 18, 142, 5, 188, 61, 237, 51, 62, 132, 74, 161, 189, 69, 98, 124, 61, 195, 83, 42, 61, 146, 18, 156, 189, 191, 208, 220, 61, 146, 7, 46, 62, 122, 160, 150, 59, 198, 135, 46, 190, 234, 51, 189, 189, 179, 45, 216, 61, 243, 96, 87, 189, 214, 36, 1, 62, 106, 47, 199, 61, 178, 80, 20, 62, 52, 207, 194, 61, 128, 4, 105, 189, 123, 142, 52, 190, 208, 153, 190, 187, 83, 171, 49, 62, 155, 111, 4, 188, 108, 133, 185, 189, 166, 137, 177, 189, 8, 36, 187, 60, 95, 234, 106, 188, 6, 64, 18, 62, 225, 138, 16, 62, 45, 59, 57, 61, 208, 125, 176, 189, 2, 193, 252, 61, 80, 235, 124, 189, 3, 95, 239, 189, 219, 237, 136, 189, 12, 60, 250, 189, 179, 241, 250, 189, 162, 94, 132, 61, 95, 75, 48, 190, 96, 124, 95, 189, 56, 101, 193, 61, 7, 142, 204, 59, 198, 188, 178, 189, 244, 67, 157, 61, 72, 1, 11, 62, 69, 183, 173, 60, 73, 84, 163, 60, 17, 138, 156, 189, 196, 90, 42, 62, 163, 66, 19, 62, 173, 163, 214, 61, 217, 117, 45, 62, 136, 144, 21, 190, 55, 216, 194, 189, 123, 211, 248, 61, 115, 87, 250, 189, 175, 24, 116, 61, 50, 10, 188, 188, 165, 244, 127, 189, 12, 61, 27, 62, 203, 131, 239, 189, 86, 84, 44, 62, 213, 111, 253, 60, 81, 62, 239, 189, 195, 216, 162, 189, 4, 194, 189, 60, 206, 146, 84, 61, 162, 37, 248, 60, 132, 133, 27, 188, 134, 147, 172, 189, 27, 150, 164, 61, 194, 38, 227, 61, 215, 8, 35, 190, 103, 111, 21, 62, 180, 142, 189, 61, 72, 96, 193, 188, 141, 140, 78, 189, 119, 188, 114, 189, 230, 209, 87, 189, 211, 2, 171, 61, 168, 173, 31, 62, 28, 156, 157, 189, 57, 108, 8, 190, 33, 198, 54, 189, 243, 202, 172, 189, 56, 37, 146, 61, 232, 233, 194, 61, 142, 101, 188, 61, 97, 142, 102, 187, 194, 98, 171, 189, 78, 1, 74, 189, 214, 64, 28, 190, 194, 147, 159, 61, 108, 59, 120, 60, 200, 80, 169, 61, 193, 35, 252, 60, 46, 233, 76, 61, 66, 169, 96, 61, 220, 43, 7, 62, 44, 113, 0, 61, 185, 157, 236, 189, 242, 66, 174, 189, 206, 23, 31, 61, 221, 186, 17, 62, 71, 211, 182, 61, 233, 99, 239, 189, 17, 171, 4, 62, 16, 95, 36, 189, 172, 5, 245, 61, 232, 3, 2, 62, 78, 140, 197, 189, 158, 237, 19, 190, 42, 22, 219, 189, 189, 202, 254, 189, 99, 234, 61, 189, 213, 223, 196, 60, 235, 101, 32, 62, 26, 38, 142, 61, 209, 1, 52, 190, 107, 214, 49, 62, 116, 123, 150, 189, 57, 221, 188, 60, 153, 211, 100, 188, 137, 15, 206, 60, 214, 23, 181, 189, 173, 123, 39, 190, 177, 67, 24, 189, 113, 39, 91, 189, 203, 54, 38, 190, 32, 203, 137, 189, 192, 197, 19, 190, 137, 170, 212, 188, 95, 18, 234, 188, 52, 243, 213, 189, 143, 136, 51, 189, 6, 13, 6, 62, 186, 232, 210, 60, 243, 169, 38, 189, 83, 16, 194, 189, 117, 75, 41, 62, 134, 140, 150, 61, 133, 190, 46, 62, 240, 148, 136, 61, 67, 171, 204, 61, 33, 56, 219, 189, 241, 53, 28, 190, 236, 4, 142, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 165, 210, 187, 250, 83, 7, 62, 121, 27, 251, 189, 71, 203, 30, 190, 98, 111, 22, 62, 228, 34, 177, 61, 100, 239, 170, 188, 79, 83, 26, 190, 115, 249, 11, 190, 12, 24, 58, 189, 162, 101, 81, 189, 8, 161, 143, 61, 5, 39, 152, 60, 151, 210, 16, 189, 123, 68, 13, 189, 132, 185, 70, 189, 72, 220, 213, 61, 188, 1, 242, 61, 134, 82, 6, 189, 45, 168, 157, 61, 144, 251, 158, 188, 148, 167, 96, 61, 103, 154, 5, 61, 208, 75, 209, 61, 224, 143, 74, 189, 133, 250, 240, 189, 11, 19, 104, 189, 201, 77, 69, 189, 244, 249, 0, 190, 84, 40, 53, 61, 124, 134, 132, 189, 60, 24, 50, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 61, 207, 61, 48, 53, 15, 62, 229, 3, 111, 61, 3, 168, 81, 188, 53, 142, 222, 189, 146, 110, 58, 61, 146, 208, 222, 189, 83, 130, 33, 61, 207, 34, 32, 62, 35, 94, 27, 60, 137, 120, 150, 189, 144, 157, 238, 61, 172, 240, 253, 189, 201, 1, 2, 190, 45, 143, 247, 189, 164, 106, 180, 189, 21, 198, 174, 61, 166, 224, 158, 189, 66, 110, 142, 61, 87, 170, 132, 60, 228, 87, 97, 189, 67, 136, 210, 189, 252, 253, 149, 61, 204, 160, 31, 190, 14, 66, 35, 190, 94, 69, 86, 60, 16, 129, 219, 189, 110, 74, 129, 188, 202, 139, 189, 189, 21, 212, 239, 61, 99, 144, 141, 189, 95, 244, 206, 60, 227, 224, 52, 188, 213, 119, 137, 61, 46, 158, 81, 189, 166, 28, 156, 61, 147, 181, 13, 190, 105, 131, 16, 62, 114, 194, 163, 189, 75, 148, 49, 189, 10, 102, 144, 60, 120, 156, 198, 188, 109, 69, 45, 62, 71, 78, 140, 189, 5, 179, 200, 61, 142, 184, 33, 190, 146, 206, 14, 62, 23, 158, 32, 190, 222, 146, 10, 190, 30, 239, 86, 188, 238, 78, 9, 62, 204, 228, 212, 61, 215, 176, 14, 190, 228, 96, 111, 189, 159, 3, 130, 189, 74, 47, 107, 61, 154, 249, 49, 190, 10, 147, 121, 189, 226, 206, 48, 62, 255, 34, 92, 58, 8, 26, 231, 188, 193, 115, 175, 188, 45, 115, 62, 189, 152, 12, 235, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 253, 50, 62, 18, 128, 182, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 150, 142, 187, 45, 138, 15, 64, 189, 102, 44, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 105, 166, 188, 28, 69, 216, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}