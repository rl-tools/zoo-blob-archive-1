// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 194, 79, 191, 210, 247, 32, 190, 239, 218, 124, 62, 139, 27, 62, 61, 145, 227, 102, 63, 221, 177, 11, 63, 109, 248, 27, 63, 173, 83, 74, 63, 222, 173, 50, 62, 207, 194, 191, 189, 174, 192, 194, 62, 203, 85, 246, 189, 29, 151, 33, 63, 119, 87, 129, 62, 246, 235, 46, 62, 238, 116, 59, 190, 161, 233, 111, 191, 157, 247, 58, 190, 239, 125, 222, 189, 102, 33, 129, 191, 109, 242, 188, 59, 248, 145, 183, 61, 154, 94, 122, 63, 214, 187, 176, 190, 217, 136, 103, 62, 250, 73, 56, 63, 79, 37, 149, 62, 102, 117, 245, 188, 14, 55, 142, 191, 176, 215, 136, 190, 148, 150, 30, 63, 164, 11, 69, 63, 253, 82, 7, 63, 12, 47, 88, 191, 68, 66, 37, 188, 0, 111, 236, 190, 52, 101, 73, 190, 173, 163, 195, 63, 113, 192, 165, 62, 110, 69, 73, 63, 228, 58, 73, 63, 162, 69, 69, 190, 33, 7, 22, 63, 176, 219, 179, 190, 179, 59, 246, 190, 201, 118, 6, 63, 43, 39, 157, 190, 168, 182, 19, 191, 91, 171, 55, 191, 21, 148, 52, 62, 31, 212, 10, 191, 12, 233, 77, 191, 73, 97, 55, 190, 192, 103, 127, 189, 169, 150, 72, 191, 195, 203, 178, 189, 156, 81, 75, 191, 223, 225, 32, 190, 180, 139, 165, 191, 239, 99, 179, 190, 225, 11, 189, 62, 13, 25, 25, 191, 181, 128, 134, 62, 117, 202, 211, 189, 82, 99, 1, 63, 186, 190, 49, 191, 38, 208, 77, 190, 204, 158, 147, 191, 20, 166, 25, 190, 141, 218, 129, 189, 108, 164, 9, 63, 133, 69, 183, 190, 107, 157, 66, 191, 80, 82, 41, 63, 201, 70, 21, 62, 99, 192, 204, 190, 117, 5, 135, 189, 118, 195, 231, 190, 228, 6, 32, 190, 0, 190, 68, 191, 110, 165, 190, 188, 188, 113, 76, 61, 93, 207, 58, 63, 179, 17, 77, 190, 206, 69, 95, 62, 209, 225, 170, 191, 194, 32, 8, 191, 153, 178, 133, 63, 249, 221, 12, 62, 245, 83, 192, 62, 161, 105, 86, 63, 105, 77, 9, 191, 55, 145, 70, 62, 58, 50, 245, 62, 196, 121, 221, 62, 161, 229, 83, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 229, 81, 191, 230, 192, 236, 190, 187, 5, 188, 62, 11, 26, 143, 62, 79, 65, 238, 190, 83, 81, 194, 62, 125, 105, 132, 62, 196, 24, 186, 61, 114, 102, 157, 190, 91, 147, 130, 62, 138, 191, 53, 191, 101, 152, 52, 63, 167, 134, 54, 190, 88, 188, 18, 190, 116, 158, 91, 62, 237, 150, 143, 190, 116, 44, 196, 190, 142, 13, 129, 189, 81, 191, 161, 190, 10, 47, 1, 63, 154, 16, 4, 191, 195, 245, 171, 61, 190, 26, 24, 63, 22, 23, 52, 190, 132, 145, 129, 190, 255, 226, 177, 190, 238, 232, 141, 62, 54, 115, 232, 62, 243, 218, 61, 190, 151, 5, 90, 191, 200, 102, 104, 189, 180, 232, 44, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 84, 177, 62, 241, 13, 173, 61, 235, 207, 143, 62, 103, 60, 160, 190, 184, 34, 148, 191, 240, 206, 67, 61, 249, 204, 244, 61, 190, 237, 121, 190, 228, 45, 137, 190, 156, 221, 201, 61, 191, 72, 104, 190, 124, 230, 70, 61, 193, 250, 155, 62, 240, 156, 166, 189, 185, 217, 246, 61, 171, 124, 159, 62, 163, 30, 134, 190, 114, 147, 228, 61, 96, 50, 184, 61, 113, 15, 143, 57, 142, 151, 20, 190, 166, 218, 88, 190, 73, 251, 1, 189, 80, 52, 169, 62, 133, 48, 174, 62, 60, 91, 186, 61, 211, 119, 79, 60, 124, 43, 128, 60, 190, 156, 180, 62, 100, 104, 81, 190, 67, 174, 132, 61, 50, 13, 32, 190, 22, 220, 25, 62, 199, 42, 54, 190, 243, 189, 172, 61, 45, 134, 245, 190, 252, 45, 24, 191, 43, 111, 219, 61, 159, 184, 102, 62, 83, 169, 87, 191, 1, 17, 29, 191, 110, 198, 4, 62, 37, 240, 155, 190, 179, 178, 132, 190, 186, 241, 81, 62, 160, 216, 156, 190, 51, 228, 171, 189, 88, 196, 117, 190, 237, 215, 192, 191, 235, 188, 51, 62, 228, 19, 84, 191, 205, 207, 84, 59, 52, 238, 86, 189, 211, 81, 51, 191, 125, 72, 226, 62, 238, 81, 254, 61, 64, 91, 133, 62, 205, 36, 95, 62, 222, 106, 156, 62, 153, 87, 184, 190, 242, 23, 142, 188, 156, 33, 220, 189, 55, 48, 56, 62, 213, 120, 169, 190, 39, 67, 254, 61, 209, 225, 251, 61, 223, 28, 43, 62, 118, 33, 116, 190, 200, 164, 130, 190, 218, 204, 213, 61, 179, 225, 35, 61, 75, 198, 171, 190, 158, 239, 158, 188, 73, 254, 158, 62, 223, 111, 154, 60, 26, 155, 124, 190, 78, 31, 29, 62, 177, 20, 231, 190, 77, 81, 110, 62, 79, 188, 160, 62, 197, 1, 104, 190, 55, 212, 37, 190, 75, 55, 50, 190, 145, 132, 160, 62, 128, 34, 125, 190, 137, 159, 10, 190, 156, 88, 70, 62, 172, 8, 103, 61, 63, 204, 8, 61, 144, 66, 46, 61, 27, 78, 237, 60, 218, 110, 21, 62, 117, 2, 57, 62, 178, 165, 144, 190, 126, 143, 134, 62, 242, 214, 53, 190, 153, 224, 176, 190, 18, 8, 192, 190, 98, 254, 186, 61, 82, 86, 181, 189, 185, 109, 67, 62, 102, 255, 157, 190, 48, 33, 59, 191, 19, 171, 108, 60, 172, 147, 2, 62, 44, 158, 56, 191, 174, 161, 145, 62, 58, 252, 157, 61, 23, 63, 36, 61, 138, 243, 18, 63, 187, 211, 74, 190, 189, 76, 4, 189, 208, 35, 85, 189, 239, 205, 151, 189, 58, 183, 34, 62, 85, 130, 162, 190, 233, 175, 245, 190, 84, 231, 47, 61, 105, 35, 25, 191, 113, 13, 226, 59, 32, 159, 211, 190, 22, 163, 83, 189, 186, 23, 61, 191, 57, 113, 17, 62, 23, 12, 138, 190, 159, 46, 61, 61, 155, 112, 112, 190, 19, 6, 209, 62, 245, 103, 38, 190, 89, 91, 75, 189, 54, 206, 160, 61, 69, 121, 236, 61, 68, 34, 55, 62, 127, 117, 206, 61, 103, 14, 115, 61, 236, 145, 2, 62, 207, 80, 144, 61, 214, 209, 159, 187, 114, 100, 155, 186, 108, 120, 121, 62, 234, 205, 240, 189, 236, 195, 8, 63, 110, 102, 14, 189, 252, 33, 195, 59, 122, 195, 38, 189, 251, 189, 200, 61, 140, 88, 66, 61, 148, 32, 171, 188, 80, 23, 129, 62, 103, 59, 116, 189, 16, 71, 87, 62, 54, 175, 228, 189, 203, 205, 116, 190, 107, 204, 133, 190, 119, 154, 28, 189, 228, 2, 109, 60, 35, 96, 139, 190, 160, 118, 180, 61, 213, 26, 175, 62, 223, 168, 180, 61, 139, 120, 26, 191, 42, 184, 143, 190, 234, 215, 44, 190, 109, 188, 231, 62, 143, 56, 41, 62, 92, 150, 83, 62, 189, 110, 30, 61, 26, 157, 190, 62, 196, 99, 221, 60, 96, 150, 135, 62, 158, 235, 166, 62, 150, 3, 100, 61, 133, 11, 248, 61, 99, 215, 76, 62, 31, 206, 8, 191, 211, 136, 234, 190, 236, 69, 46, 62, 47, 150, 139, 189, 194, 240, 181, 188, 162, 14, 206, 61, 153, 94, 165, 62, 237, 247, 150, 61, 51, 231, 34, 62, 242, 227, 168, 189, 190, 239, 74, 190, 83, 238, 112, 190, 88, 229, 233, 189, 188, 232, 228, 61, 106, 247, 17, 191, 143, 224, 155, 62, 56, 138, 100, 190, 19, 120, 232, 60, 62, 143, 104, 189, 37, 131, 53, 60, 236, 191, 159, 61, 46, 58, 69, 62, 53, 147, 48, 62, 109, 247, 242, 189, 170, 205, 24, 62, 19, 29, 96, 62, 253, 132, 140, 61, 98, 94, 25, 190, 43, 123, 133, 189, 210, 215, 225, 61, 153, 9, 242, 189, 187, 34, 174, 62, 167, 116, 193, 188, 238, 24, 230, 188, 134, 120, 183, 61, 125, 28, 188, 62, 208, 121, 112, 188, 170, 86, 0, 62, 105, 145, 85, 62, 46, 24, 140, 189, 198, 136, 65, 62, 162, 146, 35, 190, 81, 236, 30, 190, 105, 89, 17, 190, 147, 226, 208, 61, 209, 48, 1, 190, 12, 31, 58, 190, 45, 32, 16, 61, 16, 197, 71, 62, 34, 60, 173, 61, 66, 184, 213, 189, 163, 233, 61, 60, 252, 134, 65, 62, 203, 184, 178, 190, 244, 34, 199, 62, 127, 179, 0, 191, 133, 122, 171, 190, 70, 156, 96, 62, 89, 208, 15, 190, 183, 192, 33, 191, 222, 217, 152, 62, 238, 151, 146, 60, 200, 137, 44, 189, 23, 186, 16, 62, 125, 55, 58, 62, 103, 6, 162, 61, 14, 57, 58, 62, 200, 177, 156, 190, 180, 20, 35, 189, 225, 236, 117, 191, 37, 255, 245, 62, 56, 215, 134, 189, 175, 173, 143, 191, 169, 156, 15, 190, 212, 224, 152, 190, 252, 112, 156, 188, 81, 91, 245, 189, 68, 205, 70, 61, 205, 41, 35, 190, 229, 192, 55, 62, 113, 125, 211, 61, 58, 239, 164, 189, 11, 29, 197, 60, 24, 14, 44, 62, 125, 20, 128, 62, 13, 163, 142, 190, 5, 206, 23, 191, 61, 100, 77, 62, 225, 101, 35, 62, 143, 178, 11, 190, 22, 168, 203, 190, 88, 34, 22, 62, 54, 56, 60, 190, 130, 164, 166, 189, 173, 88, 144, 62, 245, 117, 152, 190, 113, 31, 137, 62, 73, 64, 12, 62, 169, 72, 92, 190, 115, 195, 59, 62, 6, 147, 83, 190, 61, 95, 130, 62, 214, 184, 62, 190, 129, 178, 17, 190, 248, 225, 99, 62, 22, 21, 218, 62, 46, 92, 127, 62, 130, 149, 234, 62, 30, 170, 203, 61, 27, 142, 207, 187, 150, 143, 196, 62, 230, 81, 181, 190, 203, 224, 132, 62, 40, 2, 155, 60, 196, 187, 35, 62, 71, 126, 137, 188, 96, 58, 95, 62, 194, 54, 162, 62, 16, 145, 157, 189, 82, 30, 238, 189, 208, 229, 75, 190, 57, 73, 184, 188, 223, 186, 148, 189, 242, 29, 139, 191, 131, 131, 45, 190, 110, 255, 48, 190, 32, 255, 176, 190, 146, 143, 171, 62, 147, 102, 12, 62, 253, 238, 13, 62, 67, 9, 138, 58, 2, 44, 83, 190, 98, 208, 129, 189, 10, 13, 97, 190, 78, 124, 167, 62, 158, 106, 69, 62, 192, 28, 15, 190, 236, 35, 87, 189, 234, 37, 145, 189, 68, 20, 225, 188, 140, 227, 158, 190, 113, 216, 144, 62, 32, 123, 152, 190, 1, 60, 128, 62, 20, 82, 173, 62, 53, 151, 227, 62, 198, 153, 137, 188, 13, 188, 164, 190, 21, 189, 127, 61, 9, 35, 171, 61, 68, 60, 49, 63, 60, 115, 103, 62, 178, 112, 122, 61, 30, 200, 61, 62, 121, 83, 156, 62, 164, 34, 227, 189, 19, 146, 187, 62, 230, 191, 158, 62, 10, 14, 151, 190, 21, 198, 181, 62, 122, 196, 200, 190, 226, 111, 130, 190, 9, 98, 195, 62, 215, 252, 75, 62, 37, 149, 90, 62, 2, 245, 31, 62, 10, 11, 134, 189, 217, 223, 74, 62, 165, 3, 158, 189, 49, 73, 202, 190, 143, 51, 127, 190, 52, 188, 1, 191, 193, 25, 254, 189, 166, 163, 153, 61, 53, 236, 26, 191, 242, 184, 245, 62, 226, 145, 129, 61, 109, 169, 234, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 181, 140, 72, 62, 45, 166, 27, 190, 24, 99, 210, 61, 184, 62, 164, 62, 3, 248, 121, 62, 96, 4, 76, 191, 158, 174, 2, 61, 28, 4, 164, 62, 183, 3, 50, 60, 141, 94, 31, 191, 246, 21, 132, 61, 28, 6, 97, 62, 115, 28, 167, 190, 148, 2, 238, 62, 91, 181, 228, 190, 30, 120, 181, 188, 82, 155, 208, 190, 150, 134, 7, 191, 111, 205, 17, 191, 163, 31, 89, 191, 29, 239, 196, 62, 3, 18, 57, 189, 221, 210, 198, 189, 50, 33, 97, 61, 12, 24, 217, 190, 4, 231, 159, 189, 232, 127, 113, 190, 64, 229, 182, 62, 100, 154, 63, 190, 90, 157, 98, 62, 123, 67, 177, 62, 174, 224, 103, 62, 202, 114, 62, 62, 226, 38, 90, 61, 10, 92, 80, 62, 7, 142, 199, 60, 174, 119, 140, 62, 18, 120, 56, 190, 213, 242, 2, 191, 147, 78, 122, 62, 143, 39, 52, 189, 141, 125, 53, 191, 196, 212, 214, 189, 247, 101, 75, 62, 91, 181, 220, 60, 246, 243, 93, 62, 65, 99, 71, 190, 146, 162, 63, 190, 119, 38, 149, 61, 163, 120, 3, 188, 243, 10, 63, 190, 167, 128, 137, 190, 158, 114, 20, 63, 146, 202, 199, 189, 51, 174, 23, 189, 7, 248, 199, 61, 127, 27, 45, 190, 64, 207, 112, 190, 0, 188, 137, 190, 204, 148, 94, 60, 209, 220, 37, 191, 75, 120, 183, 61, 49, 67, 2, 63, 28, 91, 232, 62, 190, 145, 128, 62, 77, 62, 76, 190, 111, 201, 9, 190, 244, 158, 157, 62, 45, 204, 170, 62, 134, 28, 5, 190, 116, 255, 239, 60, 218, 174, 10, 62, 212, 81, 222, 188, 135, 242, 197, 190, 219, 182, 94, 62, 130, 120, 154, 62, 52, 231, 44, 189, 63, 97, 106, 62, 148, 107, 107, 62, 200, 53, 4, 62, 157, 31, 190, 189, 158, 84, 175, 190, 44, 191, 198, 189, 125, 149, 255, 189, 61, 163, 135, 62, 182, 145, 7, 61, 252, 116, 95, 190, 142, 77, 41, 62, 110, 227, 149, 190, 7, 81, 163, 62, 78, 23, 2, 190, 231, 118, 205, 188, 228, 232, 24, 61, 79, 174, 229, 61, 149, 16, 2, 61, 165, 40, 137, 62, 9, 219, 204, 189, 234, 127, 206, 189, 245, 178, 138, 62, 153, 147, 138, 62, 44, 24, 46, 62, 100, 83, 128, 190, 209, 24, 15, 191, 71, 41, 10, 190, 7, 60, 164, 61, 109, 248, 41, 191, 43, 48, 33, 190, 17, 200, 34, 62, 123, 220, 90, 61, 187, 171, 217, 62, 109, 73, 1, 190, 34, 170, 167, 190, 111, 226, 67, 61, 169, 197, 49, 189, 211, 159, 71, 190, 160, 96, 176, 190, 1, 27, 213, 62, 213, 11, 42, 190, 250, 144, 143, 188, 151, 28, 152, 188, 79, 161, 108, 62, 55, 96, 231, 190, 155, 20, 158, 190, 146, 40, 64, 62, 124, 159, 37, 191, 18, 248, 22, 62, 86, 59, 189, 62, 173, 178, 198, 62, 53, 75, 197, 60, 137, 145, 243, 61, 105, 36, 101, 189, 85, 175, 23, 188, 54, 247, 154, 189, 210, 194, 61, 62, 157, 167, 223, 189, 134, 89, 218, 189, 244, 108, 132, 190, 175, 56, 17, 189, 56, 27, 23, 61, 214, 169, 219, 61, 129, 65, 209, 61, 140, 243, 11, 62, 151, 105, 29, 61, 142, 73, 123, 59, 204, 14, 246, 189, 20, 50, 141, 62, 196, 141, 87, 61, 75, 33, 32, 62, 38, 173, 180, 189, 60, 11, 235, 189, 41, 79, 127, 61, 38, 126, 255, 61, 80, 13, 217, 60, 93, 255, 83, 189, 113, 15, 19, 62, 209, 23, 35, 62, 51, 42, 237, 58, 213, 244, 175, 58, 127, 73, 122, 62, 131, 54, 131, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 120, 57, 1, 191, 34, 115, 2, 191, 29, 51, 78, 62, 37, 24, 1, 190, 41, 123, 192, 190, 199, 43, 176, 61, 248, 52, 107, 62, 215, 238, 118, 62, 6, 227, 55, 191, 139, 11, 127, 62, 71, 199, 11, 191, 19, 44, 159, 189, 88, 58, 220, 190, 221, 239, 64, 62, 22, 119, 140, 62, 211, 182, 60, 62, 198, 6, 232, 61, 203, 51, 171, 188, 38, 167, 108, 62, 10, 90, 10, 61, 202, 255, 211, 62, 134, 163, 87, 62, 53, 9, 131, 61, 154, 79, 106, 62, 188, 114, 165, 190, 3, 67, 168, 61, 184, 245, 179, 62, 252, 58, 160, 190, 244, 126, 227, 61, 239, 176, 173, 190, 18, 158, 15, 63, 29, 123, 117, 60, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 83, 38, 153, 62, 103, 164, 159, 190, 40, 168, 239, 190, 241, 1, 208, 61, 184, 192, 221, 62, 62, 116, 109, 60, 115, 249, 105, 62, 125, 185, 86, 187, 50, 102, 75, 190, 61, 247, 92, 190, 51, 255, 217, 62, 184, 83, 109, 62, 233, 198, 26, 191, 148, 204, 152, 62, 10, 218, 13, 61, 70, 230, 122, 190, 158, 189, 136, 61, 120, 178, 100, 62, 176, 32, 10, 61, 72, 209, 169, 189, 172, 90, 125, 189, 81, 2, 83, 62, 87, 203, 94, 62, 191, 158, 31, 190, 203, 36, 118, 62, 183, 53, 131, 190, 198, 227, 62, 61, 51, 191, 71, 190, 109, 40, 24, 190, 81, 95, 97, 62, 27, 163, 34, 62, 59, 34, 157, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 227, 35, 212, 61, 2, 132, 186, 190, 29, 252, 106, 191, 182, 123, 157, 61, 41, 218, 78, 190, 41, 138, 151, 60, 36, 103, 51, 62, 167, 178, 3, 62, 128, 11, 242, 61, 168, 232, 154, 61, 162, 209, 11, 61, 253, 10, 79, 62, 242, 110, 103, 190, 221, 186, 207, 190, 48, 0, 133, 189, 201, 59, 4, 61, 247, 124, 203, 61, 180, 195, 31, 62, 229, 194, 174, 62, 244, 69, 98, 62, 107, 56, 186, 189, 234, 50, 181, 61, 154, 35, 37, 62, 241, 114, 160, 190, 133, 102, 73, 60, 114, 34, 92, 190, 162, 214, 183, 62, 173, 74, 17, 190, 47, 178, 149, 190, 177, 34, 102, 190, 18, 210, 30, 61, 223, 168, 29, 189, 224, 95, 198, 62, 169, 255, 60, 191, 250, 218, 168, 191, 0, 31, 117, 190, 198, 236, 185, 190, 6, 116, 155, 62, 68, 254, 238, 62, 68, 17, 52, 62, 181, 120, 38, 62, 1, 114, 172, 62, 27, 72, 146, 62, 254, 168, 69, 62, 129, 224, 175, 190, 190, 25, 9, 189, 100, 199, 150, 190, 79, 5, 85, 190, 229, 244, 131, 62, 219, 84, 149, 62, 202, 31, 164, 60, 26, 51, 187, 62, 135, 211, 147, 190, 138, 160, 154, 61, 191, 247, 37, 62, 93, 221, 143, 61, 39, 228, 30, 61, 253, 241, 214, 189, 69, 151, 204, 62, 148, 15, 27, 61, 73, 228, 150, 189, 108, 46, 5, 191, 49, 146, 67, 62, 55, 80, 242, 189, 241, 104, 16, 63, 191, 176, 21, 62, 133, 116, 247, 61, 237, 209, 74, 190, 193, 149, 204, 190, 67, 15, 9, 62, 160, 46, 40, 189, 162, 24, 58, 190, 58, 116, 16, 191, 144, 105, 186, 61, 134, 43, 4, 191, 80, 201, 106, 61, 143, 111, 151, 62, 149, 212, 89, 61, 188, 25, 32, 62, 228, 115, 180, 61, 94, 173, 46, 188, 254, 216, 42, 62, 173, 177, 31, 190, 38, 108, 57, 62, 4, 142, 132, 62, 106, 35, 192, 61, 24, 135, 63, 62, 180, 244, 5, 62, 102, 121, 131, 62, 177, 173, 21, 61, 247, 174, 122, 61, 41, 18, 7, 62, 0, 112, 59, 62, 38, 76, 100, 190, 222, 193, 10, 63, 13, 13, 69, 62, 54, 135, 23, 190, 181, 76, 26, 61, 139, 121, 34, 190, 225, 38, 144, 61, 34, 54, 152, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 78, 57, 34, 62, 93, 137, 146, 188, 42, 43, 8, 190, 194, 128, 173, 61, 37, 177, 158, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 168, 226, 232, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 142, 247, 136, 189, 149, 191, 46, 190, 84, 22, 10, 190, 218, 230, 37, 190, 213, 163, 44, 62, 101, 244, 51, 190, 8, 14, 87, 61, 63, 135, 42, 189, 70, 235, 193, 62, 244, 7, 201, 61, 23, 226, 187, 190, 29, 212, 164, 190, 215, 13, 149, 189, 38, 64, 121, 189, 153, 140, 64, 61, 104, 82, 17, 191, 4, 164, 27, 61, 244, 152, 74, 190, 208, 51, 9, 190, 149, 79, 233, 190, 85, 230, 4, 190, 198, 84, 232, 61, 193, 17, 17, 62, 26, 162, 81, 62, 185, 233, 3, 191, 223, 164, 92, 191, 170, 20, 158, 190, 23, 225, 40, 190, 121, 159, 132, 62, 163, 102, 155, 189, 209, 126, 36, 188, 196, 66, 169, 190, 202, 237, 198, 190, 7, 76, 55, 190, 190, 60, 111, 61, 251, 116, 43, 191, 177, 32, 176, 62, 168, 151, 13, 189, 163, 82, 166, 62, 158, 229, 160, 61, 228, 191, 40, 190, 124, 71, 38, 190, 6, 26, 176, 61, 1, 185, 204, 60, 200, 14, 87, 62, 177, 186, 141, 188, 226, 61, 145, 189, 175, 193, 136, 62, 37, 159, 62, 62, 174, 135, 131, 61, 94, 220, 208, 61, 63, 6, 203, 61, 181, 32, 237, 189, 77, 25, 159, 61, 145, 14, 212, 190, 165, 235, 80, 190, 101, 161, 150, 62, 88, 57, 142, 189, 74, 123, 197, 62, 142, 165, 61, 190, 16, 137, 60, 62, 146, 100, 174, 62, 37, 209, 177, 60, 230, 107, 212, 190, 182, 201, 178, 189, 63, 141, 157, 190, 14, 100, 123, 190, 45, 133, 30, 62, 235, 70, 24, 191, 151, 174, 155, 62, 160, 19, 57, 62, 162, 252, 68, 62, 255, 179, 18, 62, 215, 113, 1, 188, 69, 168, 35, 61, 32, 24, 200, 60, 69, 96, 208, 190, 244, 86, 203, 61, 89, 63, 6, 189, 7, 88, 117, 190, 91, 27, 152, 60, 231, 90, 131, 59, 201, 54, 25, 61, 235, 58, 23, 61, 215, 27, 200, 61, 6, 250, 15, 190, 242, 57, 105, 62, 224, 208, 93, 62, 115, 194, 23, 190, 29, 164, 107, 61, 78, 199, 53, 190, 98, 130, 32, 62, 83, 219, 42, 190, 136, 101, 87, 190, 36, 212, 83, 62, 31, 147, 180, 62, 172, 55, 33, 62, 54, 25, 76, 62, 98, 201, 36, 188, 205, 110, 30, 188, 111, 123, 132, 62, 61, 199, 213, 59, 86, 8, 91, 61, 205, 120, 6, 190, 145, 205, 161, 62, 163, 239, 23, 62, 157, 10, 198, 62, 52, 20, 6, 62, 192, 153, 185, 62, 196, 244, 75, 191, 141, 251, 43, 190, 120, 133, 29, 61, 146, 116, 37, 189, 139, 207, 56, 191, 121, 87, 191, 61, 43, 14, 198, 60, 142, 136, 68, 188, 50, 198, 233, 62, 254, 140, 128, 190, 208, 106, 184, 189, 91, 231, 175, 61, 67, 54, 189, 190, 113, 199, 225, 190, 25, 39, 88, 191, 121, 48, 244, 62, 206, 48, 61, 62, 71, 48, 110, 190, 180, 28, 213, 62, 34, 85, 60, 188, 99, 78, 117, 190, 89, 162, 198, 61, 192, 173, 56, 190, 143, 119, 120, 190, 211, 155, 152, 61, 61, 5, 254, 189, 39, 206, 135, 60, 55, 171, 120, 61, 80, 40, 137, 62, 209, 89, 87, 62, 59, 133, 28, 62, 5, 49, 201, 189, 93, 130, 252, 189, 73, 79, 41, 190, 189, 128, 62, 189, 192, 226, 181, 188, 47, 145, 4, 190, 191, 123, 139, 190, 92, 161, 215, 189, 155, 235, 122, 62, 153, 101, 188, 189, 93, 240, 70, 62, 7, 246, 137, 189, 154, 182, 220, 190, 93, 228, 204, 61, 215, 24, 53, 191, 90, 95, 195, 188, 103, 60, 165, 188, 30, 253, 60, 189, 90, 20, 220, 189, 163, 129, 184, 62, 111, 4, 228, 62, 82, 196, 49, 62, 133, 192, 235, 61, 226, 223, 166, 62, 41, 253, 88, 60, 196, 93, 50, 190, 21, 60, 78, 62, 100, 130, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 213, 42, 61, 75, 9, 89, 62, 249, 113, 164, 188, 74, 27, 166, 190, 139, 10, 135, 62, 143, 34, 17, 61, 224, 63, 206, 61, 154, 184, 191, 190, 62, 51, 67, 60, 252, 150, 24, 62, 32, 182, 16, 189, 8, 161, 143, 61, 42, 81, 58, 61, 59, 225, 120, 61, 93, 191, 145, 189, 77, 234, 220, 61, 236, 142, 128, 62, 188, 1, 242, 61, 225, 116, 161, 189, 223, 103, 222, 60, 71, 25, 229, 188, 177, 183, 57, 62, 103, 154, 5, 61, 15, 189, 100, 62, 213, 121, 43, 62, 165, 22, 158, 61, 237, 77, 136, 189, 248, 116, 81, 190, 200, 137, 172, 189, 18, 255, 9, 62, 134, 205, 201, 188, 249, 83, 26, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 238, 103, 62, 240, 142, 129, 63, 35, 71, 75, 62, 221, 179, 68, 191, 33, 168, 140, 58, 78, 243, 53, 63, 9, 13, 125, 59, 110, 197, 62, 63, 241, 37, 213, 62, 39, 213, 84, 190, 51, 238, 41, 191, 144, 157, 238, 61, 178, 163, 29, 191, 106, 96, 147, 190, 110, 32, 95, 190, 118, 184, 158, 190, 113, 248, 83, 61, 166, 224, 158, 189, 46, 133, 187, 61, 189, 120, 142, 62, 147, 183, 140, 189, 239, 77, 40, 190, 252, 253, 149, 61, 119, 66, 188, 190, 153, 211, 24, 191, 4, 238, 17, 62, 35, 65, 215, 189, 37, 168, 31, 191, 5, 196, 41, 190, 185, 8, 139, 61, 50, 51, 167, 190, 221, 84, 169, 62, 163, 242, 33, 62, 4, 237, 46, 62, 89, 248, 72, 62, 162, 29, 7, 63, 124, 228, 138, 190, 17, 7, 237, 61, 45, 185, 69, 190, 6, 120, 91, 189, 47, 189, 150, 61, 247, 21, 145, 190, 194, 110, 134, 62, 71, 78, 140, 189, 246, 237, 222, 62, 254, 193, 170, 190, 39, 177, 135, 62, 219, 41, 99, 190, 90, 51, 73, 190, 30, 239, 86, 188, 25, 228, 249, 61, 133, 38, 105, 189, 98, 107, 166, 189, 184, 125, 64, 190, 159, 3, 130, 189, 3, 117, 93, 189, 11, 31, 217, 187, 115, 136, 99, 190, 56, 249, 47, 62, 195, 10, 69, 62, 242, 59, 72, 188, 191, 239, 80, 188, 202, 35, 139, 62, 196, 242, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 17, 130, 62, 67, 76, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 213, 72, 191, 84, 165, 207, 60, 218, 80, 188, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {64, 229, 165, 187, 254, 132, 107, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}