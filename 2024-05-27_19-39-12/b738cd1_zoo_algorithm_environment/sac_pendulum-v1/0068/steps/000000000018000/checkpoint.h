// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 247, 60, 191, 14, 67, 150, 190, 44, 109, 146, 62, 149, 237, 67, 61, 138, 53, 68, 63, 76, 77, 30, 63, 230, 172, 26, 63, 80, 107, 78, 63, 178, 216, 12, 62, 103, 22, 22, 190, 11, 223, 226, 62, 124, 223, 1, 190, 172, 124, 25, 63, 176, 66, 232, 62, 126, 55, 46, 62, 144, 237, 28, 190, 203, 32, 119, 191, 172, 238, 86, 190, 58, 144, 173, 189, 222, 150, 136, 191, 96, 226, 216, 60, 53, 247, 183, 61, 146, 48, 123, 63, 156, 156, 174, 190, 79, 45, 77, 62, 185, 43, 60, 63, 117, 73, 134, 62, 131, 15, 175, 186, 101, 225, 149, 191, 73, 56, 144, 190, 55, 180, 59, 63, 86, 4, 76, 63, 188, 83, 2, 63, 0, 84, 102, 191, 208, 244, 100, 189, 15, 250, 203, 190, 30, 132, 29, 190, 139, 182, 186, 63, 29, 167, 180, 62, 66, 46, 74, 63, 39, 67, 61, 63, 83, 125, 85, 190, 27, 33, 18, 63, 24, 31, 176, 190, 237, 207, 5, 191, 42, 136, 5, 63, 72, 15, 173, 190, 129, 124, 20, 191, 34, 174, 37, 191, 79, 175, 70, 62, 96, 245, 20, 191, 223, 55, 93, 191, 99, 55, 65, 190, 181, 195, 170, 189, 250, 223, 37, 191, 193, 228, 2, 190, 250, 57, 87, 191, 247, 222, 18, 190, 190, 146, 178, 191, 119, 134, 146, 190, 222, 58, 251, 62, 226, 53, 3, 191, 64, 97, 136, 62, 41, 91, 7, 190, 10, 76, 44, 63, 140, 231, 49, 191, 212, 67, 61, 190, 83, 30, 146, 191, 50, 170, 4, 190, 193, 238, 66, 190, 120, 254, 37, 63, 14, 253, 110, 190, 146, 70, 78, 191, 189, 138, 36, 63, 123, 208, 186, 61, 21, 134, 225, 190, 171, 171, 70, 190, 24, 99, 219, 190, 254, 117, 37, 190, 75, 130, 87, 191, 122, 225, 142, 188, 2, 135, 192, 187, 138, 21, 68, 63, 234, 172, 24, 190, 14, 193, 101, 62, 181, 73, 186, 191, 115, 149, 14, 191, 227, 130, 131, 63, 227, 41, 134, 62, 90, 85, 201, 62, 148, 92, 62, 63, 55, 154, 27, 191, 47, 58, 230, 61, 176, 8, 216, 62, 108, 121, 26, 63, 60, 171, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 37, 62, 191, 84, 15, 251, 190, 191, 75, 52, 62, 40, 55, 135, 62, 23, 104, 255, 190, 231, 45, 202, 62, 80, 108, 123, 62, 232, 243, 169, 61, 43, 109, 207, 190, 206, 141, 143, 62, 30, 175, 45, 191, 51, 42, 77, 63, 170, 147, 132, 190, 67, 219, 23, 190, 226, 222, 77, 62, 197, 153, 149, 190, 166, 7, 169, 190, 91, 71, 88, 189, 149, 130, 76, 190, 40, 246, 5, 63, 25, 157, 236, 190, 96, 170, 242, 187, 126, 42, 30, 63, 195, 177, 186, 190, 219, 6, 159, 190, 191, 233, 162, 190, 30, 27, 138, 62, 129, 185, 202, 62, 171, 0, 55, 190, 210, 40, 95, 191, 80, 167, 169, 189, 58, 150, 33, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 65, 169, 62, 126, 40, 118, 60, 220, 38, 132, 62, 111, 243, 160, 190, 0, 112, 149, 191, 214, 182, 105, 61, 159, 10, 211, 61, 22, 154, 143, 190, 72, 31, 177, 190, 99, 252, 215, 61, 220, 218, 180, 190, 111, 121, 12, 61, 82, 4, 104, 62, 241, 62, 42, 190, 178, 238, 209, 61, 70, 115, 131, 62, 250, 103, 136, 190, 240, 108, 28, 62, 112, 65, 146, 61, 86, 244, 67, 60, 64, 155, 66, 190, 233, 83, 134, 190, 53, 18, 137, 188, 68, 124, 157, 62, 210, 0, 160, 62, 76, 7, 145, 61, 132, 161, 163, 60, 198, 104, 147, 60, 161, 83, 168, 62, 246, 172, 150, 190, 49, 136, 11, 62, 149, 7, 11, 190, 225, 143, 17, 62, 247, 118, 69, 190, 40, 54, 109, 62, 69, 94, 22, 191, 56, 146, 240, 190, 174, 98, 75, 61, 181, 238, 64, 62, 115, 68, 116, 191, 170, 148, 30, 191, 207, 55, 177, 61, 132, 216, 172, 190, 32, 211, 229, 190, 20, 131, 107, 62, 63, 5, 46, 190, 182, 76, 136, 189, 182, 65, 107, 190, 47, 112, 195, 191, 76, 91, 39, 62, 139, 156, 87, 191, 4, 25, 119, 189, 5, 28, 112, 189, 146, 25, 47, 191, 73, 227, 202, 62, 238, 81, 254, 61, 151, 210, 139, 62, 206, 37, 152, 62, 34, 70, 131, 62, 80, 27, 130, 190, 136, 206, 117, 189, 124, 132, 5, 190, 252, 250, 81, 62, 174, 210, 87, 190, 187, 42, 248, 61, 255, 119, 157, 61, 196, 211, 208, 61, 161, 59, 177, 190, 100, 142, 144, 190, 216, 105, 180, 61, 234, 35, 42, 59, 97, 71, 204, 190, 105, 54, 17, 189, 0, 114, 166, 62, 158, 109, 89, 189, 237, 135, 190, 190, 157, 96, 9, 62, 96, 97, 4, 191, 20, 22, 117, 62, 147, 215, 194, 62, 241, 39, 192, 190, 176, 205, 192, 190, 141, 184, 133, 190, 215, 57, 158, 62, 22, 170, 140, 190, 122, 10, 78, 190, 130, 7, 27, 62, 15, 139, 126, 189, 113, 112, 1, 61, 241, 207, 139, 189, 27, 161, 187, 188, 52, 132, 151, 61, 31, 158, 137, 62, 121, 168, 186, 190, 8, 178, 127, 62, 89, 1, 78, 190, 153, 224, 176, 190, 106, 250, 204, 190, 170, 155, 169, 61, 132, 43, 138, 189, 129, 243, 138, 62, 142, 138, 120, 190, 196, 219, 66, 191, 171, 208, 27, 61, 240, 34, 45, 62, 72, 0, 41, 191, 1, 130, 179, 62, 143, 228, 233, 61, 113, 109, 1, 62, 19, 229, 17, 63, 141, 161, 111, 190, 90, 149, 17, 189, 127, 177, 21, 61, 87, 140, 94, 187, 8, 28, 131, 62, 130, 99, 146, 190, 7, 75, 246, 190, 24, 145, 86, 61, 104, 144, 25, 191, 205, 148, 22, 61, 75, 163, 226, 190, 54, 96, 6, 61, 73, 65, 65, 191, 90, 22, 41, 62, 33, 63, 247, 189, 176, 196, 163, 61, 232, 79, 153, 190, 58, 229, 211, 62, 0, 62, 163, 189, 152, 51, 65, 61, 220, 90, 51, 61, 144, 181, 18, 62, 15, 42, 65, 62, 215, 132, 9, 62, 120, 251, 214, 61, 186, 139, 9, 62, 96, 201, 11, 62, 113, 85, 206, 59, 34, 118, 163, 61, 119, 143, 148, 62, 228, 137, 233, 188, 109, 192, 245, 62, 121, 138, 74, 189, 3, 26, 82, 61, 115, 244, 2, 190, 34, 29, 21, 62, 169, 138, 37, 60, 134, 0, 173, 58, 242, 27, 106, 62, 191, 200, 187, 189, 211, 140, 129, 62, 51, 51, 53, 190, 38, 88, 0, 190, 199, 4, 166, 190, 177, 196, 192, 60, 84, 5, 255, 59, 32, 248, 102, 190, 83, 84, 194, 61, 207, 31, 114, 62, 242, 209, 16, 61, 166, 163, 54, 191, 170, 80, 134, 190, 198, 113, 246, 189, 29, 68, 0, 63, 117, 219, 89, 62, 105, 48, 135, 62, 198, 78, 185, 187, 92, 96, 187, 62, 246, 192, 176, 61, 76, 248, 173, 62, 46, 140, 179, 62, 132, 24, 242, 61, 124, 45, 13, 62, 81, 119, 90, 61, 149, 153, 1, 191, 98, 128, 204, 190, 44, 148, 157, 62, 101, 20, 175, 188, 101, 39, 247, 61, 42, 167, 48, 62, 112, 102, 171, 62, 130, 33, 37, 62, 38, 135, 45, 62, 117, 237, 151, 189, 59, 221, 90, 190, 196, 50, 203, 189, 45, 247, 247, 189, 165, 112, 27, 62, 108, 32, 1, 191, 146, 66, 177, 62, 164, 84, 84, 190, 227, 94, 164, 60, 109, 142, 129, 60, 156, 100, 189, 61, 199, 4, 195, 60, 215, 63, 93, 62, 141, 16, 51, 62, 180, 108, 156, 189, 44, 131, 71, 62, 237, 179, 102, 62, 125, 139, 253, 61, 17, 0, 4, 190, 230, 137, 184, 58, 144, 90, 43, 62, 153, 97, 66, 189, 29, 72, 135, 62, 193, 227, 21, 189, 201, 139, 199, 60, 0, 41, 32, 60, 159, 42, 219, 62, 229, 118, 44, 189, 38, 3, 33, 62, 162, 65, 52, 62, 107, 188, 195, 189, 63, 48, 110, 62, 57, 128, 99, 190, 184, 32, 108, 189, 50, 127, 71, 190, 255, 62, 41, 62, 15, 170, 15, 190, 176, 115, 245, 189, 71, 21, 234, 60, 124, 157, 160, 61, 56, 164, 185, 60, 88, 48, 180, 188, 88, 252, 125, 61, 69, 18, 47, 62, 209, 33, 215, 190, 212, 169, 216, 62, 103, 56, 44, 191, 38, 243, 177, 190, 13, 75, 168, 60, 212, 71, 187, 189, 99, 98, 37, 191, 37, 9, 176, 62, 44, 70, 67, 60, 14, 199, 234, 187, 194, 34, 118, 188, 244, 17, 92, 62, 168, 9, 102, 61, 218, 27, 59, 62, 58, 67, 123, 190, 181, 47, 33, 189, 142, 223, 121, 191, 79, 83, 10, 63, 236, 210, 158, 189, 151, 4, 163, 191, 87, 228, 23, 190, 199, 210, 110, 190, 249, 22, 159, 188, 225, 41, 41, 190, 221, 172, 38, 189, 84, 24, 39, 190, 182, 216, 112, 62, 122, 24, 204, 61, 71, 174, 108, 190, 217, 133, 36, 61, 120, 152, 40, 62, 28, 5, 121, 62, 8, 205, 143, 190, 33, 86, 13, 191, 195, 18, 76, 62, 165, 159, 21, 62, 225, 22, 38, 190, 188, 226, 194, 190, 188, 150, 12, 62, 15, 13, 89, 190, 248, 63, 229, 189, 32, 241, 140, 62, 59, 17, 185, 190, 249, 217, 114, 62, 178, 232, 178, 61, 255, 55, 128, 190, 127, 197, 96, 62, 34, 72, 128, 190, 146, 73, 130, 62, 117, 162, 60, 190, 255, 249, 97, 190, 70, 208, 101, 62, 209, 249, 197, 62, 214, 188, 132, 62, 37, 23, 213, 62, 150, 231, 206, 61, 204, 157, 120, 188, 205, 56, 186, 62, 90, 183, 183, 190, 136, 54, 152, 62, 32, 12, 111, 60, 14, 186, 95, 62, 163, 119, 27, 61, 81, 31, 88, 62, 24, 82, 194, 62, 115, 53, 160, 189, 252, 213, 60, 190, 4, 128, 72, 190, 104, 163, 85, 61, 130, 35, 154, 189, 199, 22, 150, 191, 181, 252, 224, 189, 162, 143, 238, 188, 153, 45, 157, 190, 149, 50, 175, 62, 181, 214, 249, 61, 115, 118, 34, 62, 157, 20, 151, 61, 221, 11, 250, 188, 100, 145, 202, 60, 12, 244, 141, 190, 220, 28, 193, 62, 202, 74, 150, 62, 136, 108, 32, 190, 135, 49, 155, 60, 139, 239, 201, 185, 164, 112, 5, 61, 244, 157, 157, 190, 62, 92, 166, 62, 113, 86, 202, 190, 131, 175, 137, 62, 0, 129, 157, 62, 102, 128, 227, 62, 64, 218, 63, 189, 238, 203, 199, 190, 94, 219, 150, 61, 181, 242, 133, 61, 191, 237, 48, 63, 176, 190, 5, 62, 13, 0, 86, 188, 8, 80, 27, 62, 17, 72, 154, 62, 253, 75, 71, 190, 141, 63, 165, 62, 136, 153, 138, 62, 14, 6, 84, 190, 129, 232, 180, 62, 224, 225, 217, 190, 52, 203, 184, 190, 214, 230, 177, 62, 119, 176, 32, 62, 233, 10, 30, 62, 147, 202, 133, 61, 79, 153, 46, 190, 222, 195, 21, 62, 213, 209, 23, 190, 206, 158, 207, 190, 23, 252, 57, 190, 164, 63, 14, 191, 184, 62, 98, 190, 241, 188, 146, 61, 103, 45, 65, 191, 52, 20, 223, 62, 26, 148, 43, 61, 112, 9, 240, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 254, 168, 215, 61, 238, 141, 101, 190, 34, 111, 227, 61, 184, 214, 140, 62, 206, 55, 136, 62, 59, 110, 87, 191, 44, 241, 157, 188, 240, 143, 121, 62, 227, 210, 175, 58, 36, 118, 35, 191, 166, 191, 78, 61, 203, 88, 76, 62, 61, 146, 150, 190, 229, 1, 227, 62, 209, 92, 245, 190, 160, 154, 232, 189, 233, 89, 154, 190, 110, 236, 212, 190, 167, 61, 13, 191, 221, 214, 94, 191, 210, 238, 161, 62, 127, 134, 160, 189, 74, 116, 9, 190, 150, 49, 12, 61, 8, 0, 238, 190, 99, 99, 163, 189, 79, 182, 141, 190, 152, 138, 170, 62, 115, 205, 198, 190, 163, 97, 81, 62, 203, 7, 167, 62, 110, 189, 90, 62, 123, 224, 63, 62, 144, 251, 203, 61, 183, 121, 79, 62, 54, 222, 46, 61, 141, 87, 136, 62, 12, 113, 138, 190, 193, 181, 13, 191, 143, 242, 82, 62, 241, 190, 176, 188, 90, 63, 80, 191, 189, 157, 109, 189, 182, 124, 151, 62, 219, 155, 220, 61, 162, 116, 59, 62, 250, 158, 127, 190, 52, 145, 144, 190, 203, 130, 11, 62, 228, 28, 74, 62, 183, 161, 37, 190, 236, 16, 184, 190, 122, 92, 17, 63, 15, 233, 242, 189, 123, 139, 154, 189, 152, 94, 170, 61, 178, 138, 178, 189, 51, 165, 95, 190, 64, 16, 157, 190, 20, 244, 96, 59, 215, 59, 139, 191, 77, 52, 176, 61, 242, 208, 243, 62, 144, 164, 216, 62, 39, 165, 10, 62, 233, 3, 143, 190, 139, 121, 253, 189, 110, 82, 161, 62, 188, 94, 182, 62, 62, 13, 19, 190, 165, 224, 10, 61, 187, 116, 20, 62, 149, 90, 66, 189, 237, 161, 195, 190, 251, 232, 130, 62, 160, 240, 166, 62, 124, 99, 221, 60, 235, 179, 128, 62, 37, 128, 108, 62, 39, 59, 9, 62, 187, 228, 237, 189, 37, 163, 209, 190, 135, 131, 213, 189, 119, 102, 10, 190, 115, 198, 133, 62, 128, 223, 157, 61, 18, 86, 112, 190, 95, 126, 38, 62, 98, 174, 43, 190, 61, 4, 148, 62, 246, 80, 33, 190, 231, 254, 88, 188, 33, 105, 60, 61, 109, 214, 14, 62, 102, 209, 193, 60, 177, 161, 142, 62, 187, 24, 222, 189, 43, 38, 136, 189, 246, 180, 139, 62, 178, 103, 128, 62, 98, 126, 46, 62, 20, 217, 170, 190, 74, 148, 22, 191, 207, 28, 101, 190, 29, 175, 197, 61, 6, 248, 65, 191, 100, 200, 218, 189, 216, 94, 82, 62, 132, 58, 242, 61, 159, 147, 196, 62, 162, 165, 64, 190, 147, 85, 224, 190, 170, 113, 48, 61, 32, 223, 171, 61, 225, 159, 131, 190, 111, 210, 222, 190, 130, 53, 212, 62, 146, 198, 110, 190, 228, 128, 99, 189, 83, 73, 189, 189, 171, 249, 148, 62, 182, 63, 26, 191, 80, 106, 174, 190, 126, 50, 29, 62, 205, 95, 142, 191, 11, 112, 28, 62, 38, 76, 178, 62, 18, 67, 178, 62, 28, 34, 183, 61, 247, 105, 54, 62, 106, 105, 244, 189, 59, 131, 55, 188, 91, 240, 86, 189, 144, 81, 82, 62, 143, 62, 152, 189, 204, 74, 2, 190, 12, 10, 96, 190, 253, 135, 3, 189, 160, 220, 157, 61, 119, 246, 230, 61, 122, 15, 246, 61, 73, 161, 32, 61, 185, 97, 63, 60, 122, 85, 163, 60, 152, 235, 96, 190, 195, 234, 158, 62, 247, 160, 248, 187, 80, 213, 44, 62, 111, 67, 226, 189, 241, 156, 69, 190, 26, 248, 182, 61, 176, 186, 208, 60, 127, 127, 110, 61, 232, 221, 7, 190, 165, 117, 68, 62, 82, 33, 246, 61, 166, 127, 230, 60, 21, 127, 184, 187, 171, 241, 56, 62, 113, 148, 76, 62, 237, 98, 250, 61, 236, 208, 11, 190, 213, 74, 88, 189, 52, 129, 61, 61, 171, 71, 0, 62, 90, 254, 103, 61, 87, 105, 230, 189, 12, 118, 43, 190, 208, 175, 158, 61, 84, 89, 3, 62, 167, 160, 2, 190, 14, 168, 21, 190, 79, 24, 254, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 37, 198, 74, 61, 146, 239, 79, 188, 1, 151, 228, 189, 199, 166, 167, 60, 210, 234, 44, 190, 199, 192, 14, 190, 69, 75, 234, 188, 235, 242, 14, 62, 112, 101, 23, 189, 59, 44, 4, 189, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 156, 37, 23, 191, 179, 247, 22, 191, 129, 48, 73, 62, 105, 228, 169, 189, 172, 202, 181, 190, 193, 3, 183, 61, 226, 100, 85, 62, 50, 85, 128, 62, 28, 222, 67, 191, 117, 85, 128, 62, 137, 67, 39, 191, 74, 217, 158, 189, 232, 202, 187, 190, 141, 135, 19, 62, 4, 62, 133, 62, 206, 218, 38, 62, 162, 10, 179, 61, 18, 104, 209, 60, 172, 146, 75, 62, 56, 102, 36, 61, 206, 90, 175, 62, 203, 61, 35, 62, 175, 9, 144, 61, 164, 179, 88, 62, 14, 169, 10, 190, 176, 145, 45, 61, 108, 246, 179, 62, 45, 80, 155, 190, 205, 88, 213, 61, 248, 5, 184, 190, 157, 113, 24, 63, 242, 223, 149, 60, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 11, 248, 159, 62, 190, 53, 148, 190, 160, 122, 250, 190, 37, 39, 197, 61, 101, 43, 202, 62, 90, 191, 227, 59, 211, 124, 134, 62, 164, 1, 25, 59, 45, 137, 103, 190, 169, 175, 102, 190, 212, 31, 235, 62, 68, 144, 141, 62, 98, 97, 16, 191, 108, 192, 156, 62, 192, 224, 214, 60, 124, 171, 108, 190, 43, 13, 98, 61, 169, 16, 86, 62, 83, 252, 29, 61, 239, 66, 195, 189, 103, 210, 29, 189, 221, 167, 116, 62, 213, 21, 93, 62, 135, 152, 32, 190, 226, 96, 174, 62, 71, 252, 130, 190, 49, 21, 131, 61, 34, 196, 78, 190, 76, 190, 15, 190, 51, 239, 113, 62, 252, 207, 206, 61, 4, 88, 145, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 107, 162, 143, 61, 236, 71, 222, 190, 72, 128, 77, 191, 213, 96, 167, 61, 175, 14, 21, 191, 77, 198, 246, 60, 87, 221, 103, 62, 242, 33, 2, 62, 122, 183, 61, 188, 133, 237, 178, 61, 240, 246, 68, 61, 61, 70, 77, 62, 20, 33, 55, 190, 116, 210, 166, 189, 25, 43, 144, 189, 14, 244, 210, 60, 44, 246, 154, 61, 121, 197, 12, 62, 204, 227, 163, 62, 131, 48, 102, 62, 86, 59, 161, 189, 253, 166, 159, 61, 235, 33, 53, 62, 237, 57, 179, 190, 231, 70, 148, 61, 184, 227, 108, 190, 180, 41, 192, 62, 51, 77, 4, 190, 36, 111, 146, 190, 23, 159, 82, 190, 30, 194, 44, 189, 7, 173, 37, 189, 89, 168, 192, 62, 255, 73, 72, 191, 142, 162, 158, 191, 211, 87, 126, 190, 65, 39, 70, 191, 83, 72, 160, 62, 126, 187, 2, 63, 82, 108, 46, 62, 78, 61, 90, 61, 15, 248, 176, 62, 179, 35, 151, 62, 62, 174, 62, 62, 47, 199, 172, 190, 218, 53, 174, 62, 57, 45, 151, 190, 70, 17, 86, 190, 77, 247, 116, 62, 158, 5, 137, 62, 178, 81, 116, 59, 209, 40, 188, 62, 50, 96, 137, 190, 38, 140, 138, 61, 189, 125, 50, 62, 145, 159, 16, 61, 142, 130, 118, 61, 39, 51, 232, 189, 22, 64, 210, 62, 170, 170, 44, 61, 204, 151, 137, 189, 130, 205, 2, 191, 212, 229, 225, 61, 217, 154, 255, 189, 16, 56, 33, 63, 154, 44, 12, 62, 96, 77, 136, 61, 48, 86, 115, 190, 17, 236, 209, 190, 136, 5, 16, 62, 202, 137, 197, 188, 148, 18, 90, 190, 158, 184, 26, 191, 254, 112, 177, 61, 47, 51, 17, 191, 149, 244, 202, 60, 230, 158, 78, 62, 103, 186, 122, 188, 228, 223, 11, 62, 63, 110, 156, 61, 4, 78, 197, 189, 45, 30, 55, 62, 132, 171, 99, 190, 125, 245, 61, 62, 164, 246, 126, 62, 19, 114, 92, 186, 196, 55, 78, 62, 62, 40, 71, 61, 104, 179, 99, 62, 183, 206, 36, 189, 179, 124, 187, 61, 10, 12, 187, 61, 227, 224, 61, 62, 228, 21, 138, 190, 199, 74, 10, 63, 125, 169, 44, 62, 54, 135, 23, 190, 181, 76, 26, 61, 139, 121, 34, 190, 225, 38, 144, 61, 34, 54, 152, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 78, 57, 34, 62, 93, 137, 146, 188, 42, 43, 8, 190, 194, 128, 173, 61, 37, 177, 158, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 168, 226, 232, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 142, 247, 136, 189, 149, 191, 46, 190, 84, 22, 10, 190, 218, 230, 37, 190, 213, 163, 44, 62, 101, 244, 51, 190, 8, 14, 87, 61, 63, 135, 42, 189, 176, 25, 187, 62, 60, 240, 7, 62, 133, 156, 229, 190, 201, 173, 161, 190, 238, 208, 69, 190, 105, 136, 232, 189, 107, 167, 105, 61, 175, 186, 17, 191, 44, 37, 173, 60, 139, 33, 101, 190, 29, 44, 236, 189, 27, 183, 249, 190, 155, 248, 27, 190, 132, 224, 10, 62, 208, 101, 19, 62, 186, 198, 58, 62, 143, 38, 1, 191, 179, 208, 140, 191, 251, 243, 137, 190, 127, 231, 91, 190, 190, 137, 145, 62, 204, 168, 110, 189, 54, 150, 191, 188, 41, 101, 167, 190, 164, 188, 222, 190, 19, 144, 35, 190, 150, 106, 134, 61, 62, 169, 46, 191, 50, 199, 172, 62, 187, 83, 179, 187, 110, 10, 173, 62, 107, 84, 45, 61, 180, 123, 41, 190, 31, 16, 116, 190, 106, 227, 241, 61, 114, 24, 61, 61, 205, 159, 106, 62, 120, 241, 177, 189, 159, 190, 23, 190, 70, 146, 154, 62, 51, 143, 18, 62, 144, 152, 156, 60, 38, 165, 175, 61, 243, 52, 231, 61, 249, 46, 241, 189, 23, 19, 8, 62, 154, 22, 197, 190, 126, 55, 78, 190, 159, 81, 141, 62, 168, 92, 0, 190, 173, 136, 190, 62, 253, 137, 107, 190, 188, 71, 240, 61, 99, 12, 195, 62, 98, 19, 162, 188, 194, 65, 195, 190, 172, 21, 83, 189, 55, 123, 171, 190, 91, 109, 176, 190, 156, 218, 72, 62, 240, 149, 40, 191, 132, 237, 151, 62, 156, 51, 65, 62, 129, 1, 116, 62, 198, 225, 45, 62, 227, 102, 13, 60, 235, 126, 182, 60, 15, 120, 87, 61, 47, 66, 196, 190, 47, 67, 166, 61, 50, 169, 95, 189, 40, 93, 115, 190, 172, 59, 46, 61, 37, 100, 210, 188, 19, 127, 23, 61, 46, 25, 196, 60, 99, 60, 236, 61, 11, 20, 71, 190, 150, 168, 66, 62, 202, 134, 52, 62, 207, 244, 72, 190, 179, 172, 185, 61, 200, 123, 100, 190, 50, 39, 11, 62, 77, 95, 66, 190, 139, 66, 141, 190, 89, 189, 68, 62, 238, 229, 154, 62, 152, 31, 71, 62, 94, 155, 22, 62, 74, 101, 152, 188, 105, 137, 217, 187, 250, 200, 113, 62, 206, 231, 14, 188, 128, 228, 65, 61, 221, 178, 19, 190, 189, 20, 136, 62, 48, 85, 241, 61, 164, 136, 224, 62, 30, 106, 173, 61, 124, 55, 192, 62, 36, 93, 131, 191, 215, 124, 126, 190, 187, 195, 22, 61, 75, 36, 129, 189, 71, 172, 112, 191, 77, 243, 181, 61, 169, 200, 10, 190, 159, 198, 254, 188, 124, 70, 26, 63, 171, 36, 138, 190, 241, 98, 62, 190, 162, 92, 251, 61, 206, 231, 249, 190, 137, 132, 222, 190, 77, 23, 138, 191, 181, 193, 211, 62, 142, 49, 52, 62, 126, 230, 153, 190, 18, 75, 200, 62, 143, 251, 81, 189, 211, 84, 132, 190, 123, 73, 196, 60, 196, 68, 83, 190, 34, 156, 173, 190, 195, 247, 107, 61, 135, 249, 238, 189, 21, 125, 148, 61, 201, 137, 206, 61, 240, 12, 139, 62, 85, 162, 63, 62, 118, 176, 9, 62, 39, 142, 212, 189, 211, 91, 230, 189, 60, 218, 49, 190, 238, 121, 139, 187, 114, 192, 133, 188, 20, 190, 238, 189, 185, 8, 161, 190, 230, 121, 135, 190, 205, 196, 85, 62, 114, 196, 148, 189, 165, 229, 97, 62, 238, 199, 226, 59, 121, 127, 14, 191, 221, 220, 60, 61, 154, 234, 74, 191, 52, 70, 68, 187, 185, 0, 42, 189, 221, 224, 238, 189, 35, 206, 236, 189, 120, 96, 149, 62, 31, 227, 203, 62, 93, 223, 252, 61, 206, 118, 214, 61, 215, 245, 168, 62, 199, 251, 15, 62, 169, 4, 103, 190, 67, 129, 58, 62, 61, 18, 197, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 56, 128, 61, 199, 9, 128, 62, 168, 180, 135, 189, 109, 92, 163, 190, 73, 55, 142, 62, 94, 108, 168, 60, 19, 252, 211, 61, 56, 186, 206, 190, 90, 199, 157, 60, 52, 246, 33, 62, 165, 64, 49, 189, 8, 161, 143, 61, 83, 95, 255, 60, 9, 95, 85, 61, 137, 41, 121, 189, 113, 165, 194, 61, 140, 120, 120, 62, 211, 108, 222, 61, 225, 116, 161, 189, 178, 248, 37, 61, 71, 25, 229, 188, 227, 210, 38, 62, 103, 154, 5, 61, 71, 215, 123, 62, 50, 181, 52, 62, 13, 54, 131, 61, 237, 77, 136, 189, 52, 183, 136, 190, 238, 160, 119, 189, 148, 245, 9, 62, 158, 159, 77, 189, 179, 4, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 114, 62, 62, 15, 59, 121, 63, 113, 104, 179, 62, 35, 92, 54, 191, 145, 31, 147, 59, 174, 227, 42, 63, 76, 203, 76, 60, 232, 193, 75, 63, 108, 92, 199, 62, 70, 124, 90, 190, 85, 98, 42, 191, 144, 157, 238, 61, 34, 158, 14, 191, 34, 50, 148, 190, 222, 45, 76, 190, 192, 31, 171, 190, 47, 237, 30, 61, 160, 77, 157, 189, 46, 133, 187, 61, 190, 160, 131, 62, 147, 183, 140, 189, 50, 253, 234, 189, 252, 253, 149, 61, 230, 123, 161, 190, 210, 68, 19, 191, 162, 86, 3, 62, 35, 65, 215, 189, 119, 117, 46, 191, 194, 225, 81, 190, 150, 218, 229, 60, 190, 203, 174, 190, 239, 254, 163, 62, 142, 99, 132, 61, 193, 174, 145, 62, 156, 189, 36, 62, 166, 16, 36, 63, 129, 232, 142, 190, 237, 255, 143, 188, 228, 77, 84, 190, 177, 214, 214, 188, 89, 199, 221, 60, 204, 107, 176, 190, 188, 27, 79, 62, 71, 78, 140, 189, 191, 62, 177, 62, 57, 88, 230, 190, 223, 180, 121, 62, 75, 9, 167, 190, 92, 189, 115, 190, 2, 74, 87, 188, 25, 228, 249, 61, 250, 237, 224, 188, 98, 107, 166, 189, 197, 143, 85, 190, 159, 3, 130, 189, 46, 82, 254, 189, 197, 51, 189, 189, 0, 197, 114, 190, 56, 249, 47, 62, 186, 79, 196, 61, 117, 141, 68, 189, 245, 195, 181, 189, 131, 3, 162, 62, 52, 156, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 28, 132, 62, 225, 64, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {65, 214, 29, 63, 78, 55, 72, 191, 31, 119, 204, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 168, 8, 64, 250, 108, 176, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}