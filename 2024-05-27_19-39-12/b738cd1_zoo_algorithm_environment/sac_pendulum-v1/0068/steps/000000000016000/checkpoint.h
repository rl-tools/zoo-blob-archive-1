// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 171, 96, 191, 204, 240, 47, 190, 229, 161, 131, 62, 49, 235, 37, 61, 48, 175, 97, 63, 50, 41, 20, 63, 111, 192, 29, 63, 232, 142, 71, 63, 181, 132, 26, 62, 105, 90, 0, 190, 177, 163, 225, 62, 184, 18, 152, 189, 80, 111, 31, 63, 185, 116, 176, 62, 71, 172, 33, 62, 112, 46, 47, 190, 75, 186, 125, 191, 30, 137, 52, 190, 218, 121, 217, 189, 17, 83, 138, 191, 91, 57, 51, 61, 171, 145, 127, 61, 96, 132, 139, 63, 179, 43, 160, 190, 53, 229, 120, 62, 213, 91, 57, 63, 241, 91, 138, 62, 122, 149, 93, 188, 59, 128, 151, 191, 234, 206, 130, 190, 42, 153, 58, 63, 99, 244, 63, 63, 75, 121, 4, 63, 66, 159, 84, 191, 146, 73, 68, 189, 123, 19, 232, 190, 231, 27, 31, 190, 39, 173, 192, 63, 92, 190, 183, 62, 228, 205, 72, 63, 153, 198, 77, 63, 93, 118, 42, 190, 70, 30, 23, 63, 95, 205, 188, 190, 168, 168, 0, 191, 184, 32, 10, 63, 26, 205, 174, 190, 32, 0, 21, 191, 73, 207, 45, 191, 202, 121, 52, 62, 104, 2, 12, 191, 186, 185, 85, 191, 152, 224, 51, 190, 92, 218, 150, 189, 208, 128, 51, 191, 115, 182, 11, 190, 67, 196, 79, 191, 128, 183, 27, 190, 11, 198, 173, 191, 125, 121, 169, 190, 96, 75, 239, 62, 104, 236, 15, 191, 138, 58, 140, 62, 206, 165, 252, 189, 5, 162, 14, 63, 71, 42, 49, 191, 234, 162, 66, 190, 118, 13, 153, 191, 52, 79, 0, 190, 250, 237, 241, 189, 14, 114, 5, 63, 121, 103, 175, 190, 82, 168, 78, 191, 78, 108, 43, 63, 51, 7, 9, 62, 202, 182, 229, 190, 153, 49, 234, 189, 70, 96, 226, 190, 241, 196, 32, 190, 255, 239, 80, 191, 88, 8, 170, 188, 22, 212, 187, 60, 15, 129, 68, 63, 73, 28, 64, 190, 188, 45, 108, 62, 22, 166, 185, 191, 85, 231, 7, 191, 210, 63, 133, 63, 14, 7, 69, 62, 190, 75, 192, 62, 122, 59, 66, 63, 149, 46, 13, 191, 209, 91, 65, 62, 192, 158, 230, 62, 197, 171, 4, 63, 183, 118, 124, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 246, 67, 191, 188, 46, 223, 190, 24, 159, 155, 62, 175, 96, 143, 62, 180, 85, 246, 190, 199, 9, 201, 62, 9, 182, 130, 62, 121, 192, 80, 61, 6, 130, 184, 190, 235, 214, 137, 62, 137, 88, 41, 191, 182, 87, 69, 63, 35, 31, 69, 190, 97, 192, 29, 190, 107, 38, 85, 62, 132, 207, 146, 190, 175, 247, 198, 190, 198, 49, 129, 189, 56, 200, 144, 190, 164, 36, 3, 63, 204, 92, 233, 190, 96, 234, 201, 60, 158, 24, 27, 63, 189, 72, 55, 190, 165, 222, 128, 190, 100, 34, 171, 190, 64, 168, 145, 62, 143, 240, 218, 62, 170, 46, 56, 190, 246, 237, 91, 191, 36, 221, 164, 189, 110, 243, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 67, 169, 62, 141, 186, 111, 61, 211, 21, 135, 62, 139, 120, 167, 190, 241, 181, 150, 191, 216, 41, 38, 61, 183, 183, 165, 61, 21, 90, 140, 190, 97, 206, 150, 190, 121, 149, 210, 61, 5, 99, 147, 190, 223, 176, 171, 60, 86, 93, 150, 62, 88, 189, 252, 189, 6, 37, 238, 61, 28, 178, 156, 62, 235, 54, 132, 190, 152, 240, 170, 61, 235, 133, 172, 61, 101, 28, 141, 186, 111, 111, 47, 190, 181, 185, 108, 190, 11, 110, 63, 189, 156, 21, 165, 62, 246, 145, 179, 62, 118, 195, 180, 61, 216, 186, 63, 188, 127, 37, 28, 60, 78, 84, 182, 62, 165, 115, 114, 190, 112, 13, 165, 61, 226, 151, 29, 190, 54, 251, 58, 62, 164, 59, 34, 190, 122, 24, 247, 61, 22, 72, 33, 191, 205, 255, 23, 191, 247, 171, 149, 61, 146, 205, 103, 62, 210, 194, 85, 191, 219, 13, 28, 191, 231, 89, 225, 61, 201, 224, 158, 190, 81, 252, 214, 190, 48, 142, 110, 62, 124, 172, 147, 190, 36, 33, 216, 189, 227, 174, 92, 190, 231, 123, 192, 191, 65, 107, 216, 61, 175, 9, 79, 191, 191, 110, 38, 189, 129, 202, 251, 188, 221, 255, 47, 191, 87, 25, 217, 62, 238, 81, 254, 61, 36, 2, 98, 62, 138, 84, 150, 62, 215, 158, 151, 62, 62, 85, 198, 190, 20, 135, 63, 189, 212, 102, 223, 189, 38, 254, 78, 62, 129, 45, 152, 190, 159, 158, 26, 62, 1, 44, 253, 61, 15, 201, 2, 62, 126, 183, 147, 190, 90, 12, 150, 190, 136, 35, 63, 61, 221, 166, 151, 59, 107, 155, 176, 190, 180, 139, 137, 188, 213, 215, 137, 62, 200, 123, 215, 59, 232, 33, 179, 190, 7, 72, 38, 62, 125, 32, 251, 190, 88, 85, 83, 62, 197, 213, 170, 62, 244, 167, 133, 190, 46, 142, 153, 190, 140, 200, 93, 190, 253, 53, 134, 62, 226, 235, 108, 190, 100, 218, 30, 190, 250, 105, 10, 62, 198, 226, 178, 61, 207, 219, 8, 61, 88, 181, 35, 60, 91, 71, 201, 188, 126, 61, 232, 61, 198, 151, 62, 62, 156, 235, 158, 190, 89, 235, 126, 62, 102, 181, 81, 190, 153, 224, 176, 190, 166, 134, 207, 190, 101, 234, 158, 61, 171, 2, 166, 189, 28, 136, 89, 62, 35, 72, 160, 190, 44, 25, 54, 191, 169, 169, 247, 60, 249, 167, 9, 62, 232, 202, 61, 191, 138, 228, 152, 62, 207, 74, 195, 61, 53, 234, 42, 61, 217, 42, 18, 63, 36, 56, 96, 190, 184, 201, 44, 189, 84, 10, 129, 60, 106, 169, 29, 188, 185, 218, 104, 62, 215, 37, 170, 190, 119, 105, 254, 190, 245, 95, 89, 61, 148, 98, 36, 191, 189, 157, 22, 61, 222, 101, 253, 190, 138, 197, 139, 60, 93, 206, 65, 191, 5, 8, 22, 62, 116, 174, 102, 190, 8, 130, 103, 61, 194, 170, 139, 190, 52, 145, 205, 62, 122, 172, 241, 189, 157, 3, 146, 60, 97, 57, 112, 61, 224, 11, 1, 62, 124, 19, 57, 62, 249, 22, 245, 61, 255, 6, 163, 61, 48, 253, 0, 62, 11, 120, 255, 61, 126, 8, 39, 60, 223, 229, 44, 61, 121, 123, 133, 62, 49, 5, 41, 189, 109, 237, 4, 63, 68, 96, 203, 188, 27, 120, 129, 61, 129, 125, 190, 189, 135, 132, 201, 61, 251, 166, 244, 60, 178, 64, 23, 187, 199, 0, 114, 62, 167, 249, 153, 189, 90, 220, 106, 62, 13, 230, 36, 190, 146, 159, 47, 190, 27, 163, 152, 190, 172, 219, 51, 188, 188, 67, 63, 60, 247, 252, 102, 190, 139, 25, 164, 61, 136, 131, 135, 62, 214, 83, 114, 61, 144, 6, 37, 191, 215, 83, 137, 190, 109, 179, 42, 190, 61, 5, 2, 63, 175, 38, 34, 62, 21, 131, 127, 62, 155, 156, 229, 60, 205, 218, 186, 62, 123, 249, 43, 61, 217, 129, 158, 62, 144, 251, 168, 62, 177, 238, 218, 61, 250, 95, 14, 62, 147, 108, 126, 61, 97, 112, 26, 191, 79, 182, 1, 191, 40, 94, 119, 62, 233, 101, 79, 188, 75, 74, 74, 61, 144, 196, 17, 62, 93, 242, 176, 62, 14, 61, 210, 61, 174, 111, 57, 62, 169, 145, 166, 189, 21, 199, 63, 190, 221, 40, 49, 190, 105, 147, 197, 189, 144, 225, 37, 62, 5, 10, 18, 191, 117, 222, 159, 62, 227, 42, 92, 190, 89, 90, 96, 60, 108, 22, 37, 188, 235, 185, 152, 61, 244, 186, 68, 61, 133, 173, 72, 62, 118, 224, 43, 62, 207, 236, 211, 189, 201, 187, 44, 62, 209, 76, 90, 62, 221, 158, 242, 61, 35, 68, 13, 190, 223, 5, 206, 188, 116, 173, 254, 61, 47, 91, 72, 189, 145, 184, 161, 62, 127, 136, 165, 188, 169, 186, 203, 60, 223, 92, 11, 61, 2, 46, 187, 62, 127, 171, 15, 189, 225, 76, 15, 62, 226, 223, 70, 62, 73, 88, 176, 189, 173, 12, 80, 62, 210, 205, 88, 190, 174, 141, 191, 189, 1, 40, 58, 190, 30, 97, 2, 62, 21, 142, 12, 190, 150, 159, 12, 190, 123, 19, 194, 60, 253, 212, 229, 61, 47, 11, 64, 61, 51, 38, 87, 189, 183, 165, 15, 61, 123, 26, 57, 62, 196, 160, 204, 190, 226, 159, 204, 62, 203, 98, 33, 191, 95, 180, 174, 190, 47, 26, 234, 61, 161, 140, 244, 189, 135, 6, 35, 191, 219, 210, 163, 62, 172, 9, 79, 60, 166, 150, 220, 188, 146, 73, 206, 61, 246, 96, 106, 62, 139, 72, 108, 61, 218, 27, 59, 62, 159, 197, 67, 190, 181, 47, 33, 189, 44, 217, 120, 191, 29, 235, 1, 63, 64, 25, 154, 189, 132, 196, 160, 191, 170, 194, 23, 190, 227, 30, 135, 190, 249, 22, 159, 188, 39, 215, 19, 190, 174, 168, 175, 60, 84, 24, 39, 190, 27, 196, 78, 62, 137, 30, 225, 61, 116, 155, 239, 189, 149, 58, 83, 61, 148, 254, 57, 62, 226, 16, 123, 62, 48, 167, 142, 190, 162, 255, 23, 191, 132, 223, 74, 62, 44, 208, 21, 62, 145, 23, 22, 190, 110, 97, 200, 190, 156, 215, 23, 62, 34, 78, 69, 190, 23, 227, 220, 189, 227, 231, 150, 62, 147, 0, 164, 190, 26, 130, 136, 62, 236, 76, 21, 62, 233, 75, 105, 190, 180, 200, 29, 62, 161, 46, 99, 190, 210, 167, 129, 62, 11, 202, 43, 190, 162, 44, 37, 190, 159, 94, 97, 62, 246, 240, 208, 62, 45, 147, 140, 62, 75, 48, 226, 62, 246, 189, 192, 61, 87, 140, 57, 187, 163, 41, 202, 62, 189, 83, 180, 190, 79, 255, 140, 62, 223, 111, 195, 60, 82, 152, 42, 62, 13, 243, 15, 60, 188, 171, 88, 62, 133, 131, 177, 62, 238, 86, 148, 189, 185, 234, 39, 190, 75, 49, 95, 190, 230, 255, 26, 61, 63, 142, 133, 189, 38, 67, 146, 191, 240, 55, 19, 190, 183, 186, 197, 189, 100, 187, 178, 190, 111, 108, 175, 62, 108, 48, 11, 62, 135, 220, 49, 62, 247, 121, 186, 61, 152, 155, 231, 189, 104, 229, 238, 60, 44, 36, 129, 190, 66, 196, 181, 62, 198, 48, 137, 62, 238, 72, 42, 190, 213, 13, 136, 60, 7, 61, 204, 189, 180, 249, 109, 61, 65, 10, 171, 190, 102, 20, 155, 62, 66, 249, 182, 190, 246, 28, 133, 62, 232, 148, 162, 62, 193, 15, 225, 62, 27, 61, 208, 188, 5, 72, 188, 190, 227, 24, 102, 61, 211, 5, 106, 61, 29, 173, 46, 63, 208, 189, 44, 62, 127, 89, 86, 61, 173, 88, 66, 62, 22, 30, 135, 62, 122, 130, 41, 190, 166, 83, 167, 62, 245, 156, 140, 62, 32, 180, 165, 190, 173, 95, 184, 62, 209, 199, 208, 190, 6, 235, 142, 190, 98, 89, 179, 62, 133, 97, 21, 62, 72, 68, 57, 62, 148, 82, 210, 61, 16, 219, 148, 189, 239, 243, 61, 62, 163, 229, 241, 189, 102, 115, 200, 190, 247, 35, 137, 190, 188, 125, 8, 191, 17, 98, 35, 190, 226, 252, 111, 61, 159, 18, 42, 191, 80, 248, 237, 62, 211, 168, 87, 61, 192, 169, 215, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 207, 17, 48, 62, 190, 70, 53, 190, 4, 40, 207, 61, 228, 121, 145, 62, 219, 205, 127, 62, 30, 222, 85, 191, 70, 185, 79, 60, 140, 79, 149, 62, 4, 55, 21, 188, 8, 254, 37, 191, 175, 142, 100, 61, 242, 78, 49, 62, 169, 202, 191, 190, 34, 245, 234, 62, 11, 146, 234, 190, 215, 111, 96, 189, 135, 75, 196, 190, 243, 21, 15, 191, 159, 65, 10, 191, 37, 124, 95, 191, 104, 25, 190, 62, 184, 83, 64, 189, 60, 135, 247, 189, 42, 208, 31, 61, 122, 210, 1, 191, 221, 15, 97, 189, 136, 61, 130, 190, 118, 62, 173, 62, 183, 148, 166, 190, 212, 69, 98, 62, 155, 45, 172, 62, 37, 183, 93, 62, 102, 66, 53, 62, 250, 171, 172, 61, 149, 111, 78, 62, 149, 187, 143, 60, 235, 92, 142, 62, 35, 178, 119, 190, 119, 111, 12, 191, 232, 144, 118, 62, 230, 227, 172, 188, 192, 117, 71, 191, 244, 85, 160, 189, 241, 27, 63, 62, 203, 144, 99, 61, 21, 46, 83, 62, 92, 5, 94, 190, 142, 255, 87, 190, 234, 76, 158, 61, 9, 152, 166, 187, 189, 14, 56, 190, 85, 252, 165, 190, 105, 222, 19, 63, 253, 53, 204, 189, 242, 5, 139, 189, 242, 69, 166, 61, 115, 165, 35, 190, 122, 211, 116, 190, 128, 126, 156, 190, 16, 135, 170, 58, 30, 113, 96, 191, 60, 11, 178, 61, 37, 72, 247, 62, 213, 85, 222, 62, 79, 153, 51, 62, 115, 198, 121, 190, 158, 93, 6, 190, 224, 148, 152, 62, 123, 3, 180, 62, 183, 9, 45, 190, 127, 108, 149, 60, 212, 206, 12, 62, 93, 126, 40, 189, 122, 243, 214, 190, 31, 147, 94, 62, 197, 28, 150, 62, 186, 92, 56, 189, 169, 231, 113, 62, 184, 135, 89, 62, 0, 250, 210, 61, 13, 232, 214, 189, 160, 122, 194, 190, 82, 16, 222, 189, 163, 127, 34, 190, 204, 53, 132, 62, 172, 80, 26, 61, 84, 237, 128, 190, 110, 78, 52, 62, 12, 154, 155, 190, 255, 26, 156, 62, 38, 80, 44, 190, 31, 86, 230, 188, 254, 166, 180, 185, 67, 237, 5, 62, 240, 251, 234, 60, 168, 218, 134, 62, 6, 96, 176, 189, 3, 52, 97, 189, 31, 233, 138, 62, 170, 161, 115, 62, 218, 98, 54, 62, 133, 77, 154, 190, 199, 93, 16, 191, 21, 73, 46, 190, 106, 80, 234, 61, 71, 66, 57, 191, 48, 208, 227, 189, 102, 8, 191, 61, 42, 34, 165, 61, 172, 253, 208, 62, 184, 205, 28, 190, 255, 44, 188, 190, 206, 151, 22, 59, 3, 12, 172, 189, 150, 156, 113, 190, 49, 209, 204, 190, 68, 168, 229, 62, 15, 53, 81, 190, 33, 15, 26, 189, 63, 59, 171, 189, 216, 101, 110, 62, 128, 18, 5, 191, 15, 118, 163, 190, 50, 215, 34, 62, 79, 211, 101, 191, 9, 221, 40, 62, 223, 92, 183, 62, 12, 243, 185, 62, 182, 229, 134, 61, 215, 91, 36, 62, 252, 159, 193, 189, 91, 235, 17, 187, 236, 40, 172, 189, 189, 30, 72, 62, 174, 142, 200, 189, 174, 220, 230, 189, 243, 153, 111, 190, 38, 181, 210, 188, 195, 78, 92, 61, 240, 95, 212, 61, 188, 28, 6, 62, 185, 99, 216, 61, 140, 72, 64, 61, 178, 105, 100, 61, 132, 33, 49, 190, 126, 123, 130, 62, 35, 98, 225, 60, 195, 210, 42, 62, 197, 204, 200, 189, 195, 232, 14, 190, 252, 225, 148, 61, 113, 37, 137, 61, 23, 28, 77, 61, 218, 78, 191, 189, 82, 115, 39, 62, 12, 7, 34, 62, 126, 194, 30, 61, 249, 116, 120, 188, 251, 191, 65, 62, 137, 150, 117, 62, 237, 98, 250, 61, 236, 208, 11, 190, 213, 74, 88, 189, 52, 129, 61, 61, 171, 71, 0, 62, 90, 254, 103, 61, 87, 105, 230, 189, 12, 118, 43, 190, 208, 175, 158, 61, 84, 89, 3, 62, 167, 160, 2, 190, 14, 168, 21, 190, 79, 24, 254, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 37, 198, 74, 61, 146, 239, 79, 188, 1, 151, 228, 189, 199, 166, 167, 60, 210, 234, 44, 190, 199, 192, 14, 190, 69, 75, 234, 188, 235, 242, 14, 62, 112, 101, 23, 189, 59, 44, 4, 189, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 161, 22, 246, 190, 151, 29, 20, 191, 15, 14, 71, 62, 19, 218, 243, 189, 17, 78, 195, 190, 67, 117, 175, 61, 40, 113, 74, 62, 95, 247, 113, 62, 20, 3, 79, 191, 38, 188, 130, 62, 240, 74, 32, 191, 46, 186, 196, 189, 232, 48, 194, 190, 131, 160, 49, 62, 177, 169, 142, 62, 255, 120, 78, 62, 13, 84, 198, 61, 14, 179, 56, 189, 112, 112, 92, 62, 149, 66, 28, 61, 63, 238, 181, 62, 101, 66, 72, 62, 81, 19, 129, 61, 79, 84, 90, 62, 53, 92, 28, 190, 208, 28, 129, 61, 204, 3, 173, 62, 11, 167, 158, 190, 89, 216, 0, 62, 31, 116, 190, 190, 85, 230, 15, 63, 99, 189, 166, 60, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 254, 114, 150, 62, 236, 225, 157, 190, 120, 17, 247, 190, 32, 211, 190, 61, 19, 37, 215, 62, 12, 0, 144, 60, 168, 91, 131, 62, 184, 252, 223, 186, 223, 120, 89, 190, 240, 113, 96, 190, 101, 1, 220, 62, 82, 126, 134, 62, 17, 220, 32, 191, 242, 125, 153, 62, 190, 53, 243, 60, 21, 58, 124, 190, 205, 115, 116, 61, 32, 182, 128, 62, 242, 76, 22, 61, 251, 100, 167, 189, 49, 31, 117, 189, 77, 215, 90, 62, 20, 209, 99, 62, 245, 148, 32, 190, 191, 209, 132, 62, 155, 254, 130, 190, 116, 81, 133, 61, 224, 123, 84, 190, 140, 111, 24, 190, 129, 66, 96, 62, 47, 171, 5, 62, 18, 201, 147, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 172, 70, 249, 61, 117, 93, 205, 190, 127, 165, 116, 191, 210, 237, 141, 61, 91, 143, 157, 190, 191, 82, 29, 61, 255, 245, 113, 62, 148, 112, 229, 61, 44, 76, 208, 61, 116, 249, 179, 61, 15, 136, 147, 61, 168, 190, 91, 62, 202, 114, 109, 190, 190, 52, 161, 190, 176, 7, 158, 189, 3, 66, 61, 60, 176, 237, 183, 61, 253, 194, 70, 62, 117, 37, 170, 62, 225, 88, 111, 62, 74, 161, 195, 189, 211, 130, 150, 61, 84, 212, 62, 62, 24, 253, 167, 190, 77, 250, 64, 58, 159, 207, 96, 190, 126, 112, 201, 62, 201, 109, 35, 190, 197, 75, 147, 190, 155, 186, 100, 190, 19, 55, 145, 60, 57, 168, 134, 189, 121, 135, 215, 62, 89, 132, 65, 191, 214, 98, 171, 191, 195, 187, 113, 190, 157, 138, 247, 190, 101, 237, 163, 62, 59, 36, 5, 63, 115, 102, 43, 62, 42, 73, 33, 62, 110, 216, 176, 62, 235, 231, 161, 62, 144, 211, 87, 62, 199, 130, 160, 190, 40, 181, 152, 61, 140, 181, 156, 190, 71, 23, 106, 190, 173, 228, 129, 62, 133, 43, 173, 62, 242, 68, 116, 60, 120, 105, 192, 62, 58, 194, 148, 190, 15, 161, 133, 61, 209, 27, 60, 62, 236, 172, 126, 61, 148, 243, 71, 61, 238, 70, 215, 189, 104, 131, 219, 62, 250, 178, 246, 60, 114, 11, 147, 189, 158, 76, 7, 191, 185, 183, 43, 62, 191, 194, 14, 190, 70, 240, 31, 63, 1, 222, 28, 62, 153, 168, 172, 61, 82, 176, 78, 190, 233, 223, 225, 190, 145, 128, 16, 62, 162, 193, 29, 189, 139, 212, 62, 190, 87, 96, 23, 191, 174, 251, 205, 61, 240, 27, 13, 191, 94, 224, 48, 61, 159, 23, 138, 62, 184, 213, 248, 60, 241, 3, 44, 62, 128, 248, 2, 62, 19, 74, 58, 189, 2, 201, 14, 62, 71, 208, 52, 190, 155, 216, 65, 62, 15, 106, 133, 62, 150, 66, 149, 61, 218, 123, 71, 62, 36, 21, 186, 61, 69, 14, 140, 62, 2, 211, 186, 59, 81, 98, 151, 61, 245, 248, 4, 62, 169, 209, 89, 62, 57, 143, 136, 190, 36, 73, 6, 63, 126, 208, 67, 62, 54, 135, 23, 190, 181, 76, 26, 61, 139, 121, 34, 190, 225, 38, 144, 61, 34, 54, 152, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 78, 57, 34, 62, 93, 137, 146, 188, 42, 43, 8, 190, 194, 128, 173, 61, 37, 177, 158, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 168, 226, 232, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 142, 247, 136, 189, 149, 191, 46, 190, 84, 22, 10, 190, 218, 230, 37, 190, 213, 163, 44, 62, 101, 244, 51, 190, 8, 14, 87, 61, 63, 135, 42, 189, 124, 85, 185, 62, 153, 22, 242, 61, 171, 7, 187, 190, 218, 71, 160, 190, 205, 251, 42, 189, 160, 2, 193, 189, 255, 45, 57, 61, 175, 186, 17, 191, 94, 41, 31, 61, 216, 189, 100, 190, 237, 204, 250, 189, 169, 185, 232, 190, 146, 119, 19, 190, 164, 82, 240, 61, 84, 118, 24, 62, 192, 163, 79, 62, 143, 38, 1, 191, 222, 93, 99, 191, 241, 135, 137, 190, 228, 219, 65, 190, 11, 144, 136, 62, 131, 200, 100, 189, 100, 36, 182, 188, 41, 101, 167, 190, 2, 241, 200, 190, 19, 144, 35, 190, 90, 95, 99, 61, 252, 103, 44, 191, 34, 42, 179, 62, 195, 161, 164, 188, 86, 55, 166, 62, 114, 102, 65, 61, 171, 154, 47, 190, 54, 193, 70, 190, 139, 233, 211, 61, 68, 2, 7, 60, 85, 231, 104, 62, 187, 215, 140, 189, 91, 45, 187, 189, 14, 55, 152, 62, 21, 155, 25, 62, 81, 162, 26, 61, 69, 183, 166, 61, 101, 60, 130, 61, 120, 135, 52, 190, 45, 46, 246, 61, 212, 32, 197, 190, 46, 43, 50, 190, 84, 204, 151, 62, 147, 97, 53, 190, 182, 239, 199, 62, 90, 180, 91, 190, 15, 51, 66, 62, 85, 240, 187, 62, 96, 192, 69, 188, 79, 169, 193, 190, 167, 100, 68, 190, 240, 163, 153, 190, 165, 221, 152, 190, 229, 158, 39, 62, 173, 18, 29, 191, 146, 126, 161, 62, 33, 44, 74, 62, 247, 22, 93, 62, 105, 211, 48, 62, 7, 171, 93, 60, 7, 19, 14, 61, 103, 155, 32, 61, 88, 227, 208, 190, 40, 226, 181, 61, 189, 167, 72, 189, 219, 99, 109, 190, 40, 12, 11, 61, 252, 193, 119, 187, 111, 187, 31, 61, 80, 219, 130, 60, 166, 158, 248, 61, 194, 98, 29, 190, 5, 209, 103, 62, 103, 237, 107, 62, 162, 174, 43, 190, 123, 160, 231, 60, 55, 40, 72, 190, 18, 152, 23, 62, 179, 180, 37, 190, 194, 150, 103, 190, 247, 132, 73, 62, 252, 36, 171, 62, 64, 3, 57, 62, 175, 17, 54, 62, 113, 124, 154, 188, 185, 255, 130, 59, 18, 139, 136, 62, 10, 55, 101, 57, 233, 41, 92, 61, 24, 176, 0, 190, 214, 247, 134, 62, 42, 108, 246, 61, 252, 122, 214, 62, 124, 177, 158, 61, 253, 24, 203, 62, 117, 32, 121, 191, 1, 145, 130, 190, 174, 93, 145, 60, 228, 45, 80, 189, 119, 148, 92, 191, 183, 166, 173, 61, 7, 3, 168, 189, 156, 14, 205, 188, 49, 5, 2, 63, 34, 12, 134, 190, 129, 166, 17, 190, 234, 250, 214, 61, 89, 34, 233, 190, 19, 135, 216, 190, 23, 16, 118, 191, 3, 172, 212, 62, 241, 92, 45, 62, 127, 121, 158, 190, 197, 156, 201, 62, 216, 217, 210, 188, 57, 70, 100, 190, 103, 90, 114, 60, 84, 22, 105, 190, 31, 236, 152, 190, 226, 237, 121, 61, 229, 212, 14, 190, 255, 204, 172, 60, 42, 52, 190, 61, 74, 62, 144, 62, 83, 156, 74, 62, 209, 178, 47, 62, 99, 226, 218, 189, 87, 83, 249, 189, 8, 24, 33, 190, 56, 115, 4, 189, 18, 18, 177, 188, 210, 224, 1, 190, 24, 54, 144, 190, 224, 21, 253, 189, 207, 155, 124, 62, 113, 18, 186, 189, 48, 223, 71, 62, 221, 169, 67, 189, 235, 24, 229, 190, 122, 4, 0, 62, 28, 53, 62, 191, 97, 163, 176, 188, 134, 19, 40, 188, 115, 222, 152, 189, 94, 6, 223, 189, 202, 49, 171, 62, 191, 150, 227, 62, 180, 128, 12, 62, 236, 217, 244, 61, 30, 77, 175, 62, 133, 187, 133, 61, 244, 42, 58, 190, 88, 90, 76, 62, 187, 181, 194, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 254, 243, 60, 114, 94, 94, 62, 161, 235, 132, 189, 134, 130, 174, 190, 132, 75, 133, 62, 254, 142, 63, 61, 125, 177, 183, 61, 122, 78, 199, 190, 16, 193, 71, 60, 9, 68, 15, 62, 131, 55, 75, 189, 8, 161, 143, 61, 176, 38, 0, 61, 178, 183, 58, 61, 186, 22, 158, 189, 133, 167, 191, 61, 66, 98, 116, 62, 211, 108, 222, 61, 225, 116, 161, 189, 11, 218, 210, 60, 71, 25, 229, 188, 224, 104, 47, 62, 103, 154, 5, 61, 81, 127, 121, 62, 156, 255, 69, 62, 159, 106, 138, 61, 237, 77, 136, 189, 111, 60, 105, 190, 74, 41, 173, 189, 18, 91, 9, 62, 184, 167, 73, 189, 148, 232, 24, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 111, 104, 62, 71, 137, 129, 63, 84, 92, 100, 62, 237, 34, 73, 191, 160, 85, 131, 186, 128, 231, 72, 63, 43, 27, 7, 59, 31, 93, 70, 63, 5, 252, 211, 62, 44, 25, 93, 190, 218, 17, 36, 191, 144, 157, 238, 61, 116, 238, 32, 191, 19, 223, 144, 190, 70, 36, 102, 190, 74, 116, 160, 190, 157, 251, 64, 61, 160, 77, 157, 189, 46, 133, 187, 61, 246, 203, 138, 62, 147, 183, 140, 189, 221, 238, 34, 190, 252, 253, 149, 61, 126, 197, 188, 190, 211, 84, 30, 191, 5, 134, 25, 62, 35, 65, 215, 189, 105, 4, 31, 191, 12, 199, 73, 190, 120, 244, 90, 61, 251, 56, 171, 190, 255, 121, 169, 62, 9, 11, 212, 61, 207, 238, 136, 62, 198, 75, 60, 62, 224, 125, 34, 63, 15, 67, 129, 190, 199, 136, 194, 61, 90, 51, 50, 190, 47, 86, 79, 189, 34, 146, 22, 61, 169, 19, 168, 190, 82, 220, 137, 62, 71, 78, 140, 189, 197, 159, 185, 62, 194, 38, 200, 190, 243, 11, 124, 62, 30, 149, 141, 190, 154, 234, 84, 190, 2, 74, 87, 188, 25, 228, 249, 61, 129, 178, 80, 189, 98, 107, 166, 189, 117, 78, 46, 190, 159, 3, 130, 189, 188, 198, 225, 189, 209, 128, 143, 189, 59, 161, 113, 190, 56, 249, 47, 62, 20, 27, 8, 62, 37, 83, 168, 188, 0, 219, 139, 189, 50, 136, 154, 62, 85, 142, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 158, 131, 62, 207, 38, 163, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {216, 33, 52, 63, 223, 254, 43, 62, 156, 33, 86, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 99, 230, 190, 206, 159, 234, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}