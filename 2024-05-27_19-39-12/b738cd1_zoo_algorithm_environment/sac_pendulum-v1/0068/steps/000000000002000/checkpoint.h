// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 38, 68, 191, 251, 109, 77, 191, 106, 154, 81, 62, 34, 221, 199, 190, 2, 99, 5, 191, 214, 21, 199, 62, 237, 214, 35, 186, 118, 81, 206, 59, 154, 0, 155, 62, 102, 98, 49, 190, 5, 2, 38, 63, 17, 184, 235, 61, 61, 57, 75, 62, 219, 79, 0, 61, 131, 22, 1, 62, 74, 39, 9, 190, 240, 113, 83, 189, 245, 243, 160, 190, 84, 171, 221, 190, 199, 50, 0, 191, 66, 137, 102, 190, 199, 117, 150, 60, 205, 60, 118, 63, 162, 191, 84, 190, 161, 228, 104, 190, 165, 99, 21, 63, 179, 73, 146, 62, 50, 67, 180, 190, 109, 173, 205, 190, 29, 149, 91, 190, 59, 133, 6, 63, 70, 158, 197, 62, 199, 11, 11, 63, 20, 173, 19, 191, 120, 97, 208, 62, 213, 55, 245, 190, 170, 75, 220, 190, 243, 193, 70, 63, 108, 203, 187, 62, 4, 188, 23, 63, 198, 95, 167, 62, 1, 90, 119, 189, 88, 153, 49, 63, 4, 91, 239, 62, 114, 211, 224, 190, 195, 166, 200, 62, 165, 206, 146, 62, 31, 73, 27, 191, 117, 20, 27, 191, 54, 77, 16, 63, 156, 192, 171, 190, 68, 192, 25, 191, 208, 50, 101, 189, 96, 153, 154, 186, 133, 112, 54, 191, 244, 102, 252, 62, 242, 248, 28, 191, 143, 209, 75, 189, 117, 171, 24, 190, 7, 163, 189, 190, 73, 169, 72, 62, 22, 15, 49, 191, 118, 103, 21, 62, 82, 35, 97, 189, 7, 37, 99, 63, 76, 229, 7, 191, 206, 171, 148, 190, 88, 35, 75, 191, 134, 28, 207, 190, 178, 172, 158, 61, 205, 238, 40, 63, 101, 111, 137, 190, 220, 209, 30, 191, 15, 7, 203, 61, 228, 142, 197, 61, 67, 242, 47, 189, 253, 199, 222, 62, 77, 46, 173, 190, 92, 10, 243, 189, 82, 62, 21, 191, 143, 128, 32, 190, 20, 102, 224, 189, 147, 27, 1, 63, 237, 192, 181, 61, 122, 107, 130, 62, 109, 94, 204, 190, 0, 192, 0, 191, 177, 240, 214, 62, 54, 20, 164, 60, 198, 129, 5, 63, 246, 123, 34, 63, 165, 49, 252, 190, 170, 9, 109, 61, 241, 230, 23, 63, 192, 101, 193, 62, 73, 248, 165, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 153, 195, 190, 208, 132, 147, 62, 38, 181, 8, 63, 35, 165, 107, 59, 32, 20, 175, 190, 229, 160, 225, 62, 195, 36, 196, 61, 19, 12, 57, 62, 39, 183, 152, 190, 19, 186, 38, 62, 18, 62, 31, 191, 211, 237, 10, 63, 192, 48, 208, 62, 38, 77, 65, 188, 172, 31, 99, 61, 96, 43, 5, 190, 196, 50, 223, 190, 138, 183, 185, 189, 52, 150, 190, 190, 224, 58, 25, 63, 54, 72, 100, 190, 129, 6, 173, 62, 247, 228, 19, 63, 251, 131, 184, 190, 239, 230, 32, 189, 183, 145, 23, 191, 98, 247, 69, 62, 64, 187, 211, 62, 180, 14, 185, 190, 64, 140, 48, 191, 92, 213, 221, 189, 148, 34, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 1, 148, 62, 118, 134, 83, 189, 137, 235, 61, 62, 158, 178, 150, 190, 233, 62, 151, 190, 158, 175, 111, 61, 116, 117, 214, 61, 93, 43, 77, 190, 44, 153, 133, 190, 3, 245, 74, 61, 68, 95, 227, 189, 206, 219, 158, 61, 37, 138, 237, 61, 174, 51, 187, 185, 135, 146, 132, 61, 213, 217, 86, 62, 237, 242, 115, 190, 153, 82, 176, 61, 251, 150, 233, 61, 198, 71, 21, 187, 221, 133, 175, 188, 8, 193, 82, 190, 102, 140, 218, 58, 77, 90, 143, 62, 109, 117, 169, 61, 151, 61, 58, 60, 115, 64, 99, 61, 242, 175, 219, 60, 196, 109, 108, 62, 42, 115, 201, 61, 195, 237, 46, 60, 60, 166, 21, 190, 199, 88, 139, 62, 242, 154, 140, 189, 23, 253, 75, 62, 240, 26, 153, 190, 180, 90, 35, 190, 180, 215, 56, 62, 202, 201, 104, 62, 170, 102, 16, 191, 154, 240, 149, 190, 149, 81, 237, 61, 35, 30, 156, 189, 63, 94, 85, 187, 150, 55, 37, 62, 68, 114, 116, 189, 187, 126, 17, 190, 205, 120, 181, 190, 191, 227, 77, 191, 84, 173, 68, 62, 118, 7, 187, 190, 14, 241, 1, 60, 56, 138, 181, 189, 63, 108, 198, 190, 129, 125, 210, 62, 128, 244, 149, 61, 63, 71, 127, 62, 68, 188, 61, 189, 57, 207, 100, 62, 53, 57, 221, 188, 7, 232, 145, 189, 51, 44, 229, 61, 35, 147, 153, 189, 89, 25, 105, 190, 105, 190, 167, 62, 110, 105, 17, 62, 7, 47, 221, 61, 156, 108, 130, 190, 22, 169, 110, 59, 236, 171, 102, 61, 167, 26, 194, 59, 75, 150, 153, 190, 224, 55, 51, 60, 63, 241, 28, 62, 107, 63, 219, 61, 245, 119, 219, 189, 214, 217, 91, 60, 127, 196, 228, 189, 211, 154, 31, 62, 73, 131, 43, 62, 101, 243, 10, 190, 242, 136, 79, 188, 29, 13, 213, 189, 25, 215, 105, 62, 174, 99, 215, 189, 165, 168, 212, 189, 133, 73, 57, 62, 184, 79, 160, 61, 251, 62, 255, 188, 232, 253, 13, 60, 224, 146, 92, 187, 180, 80, 40, 62, 8, 43, 89, 61, 50, 164, 6, 190, 242, 95, 5, 62, 83, 100, 249, 189, 63, 22, 196, 188, 120, 172, 60, 190, 226, 231, 210, 60, 174, 77, 95, 59, 126, 240, 75, 62, 5, 74, 21, 61, 233, 115, 57, 190, 65, 225, 176, 60, 64, 194, 41, 62, 224, 133, 213, 61, 60, 138, 74, 62, 155, 214, 64, 61, 88, 199, 147, 61, 87, 217, 149, 61, 119, 97, 21, 190, 1, 208, 38, 61, 106, 208, 242, 189, 111, 242, 47, 190, 190, 169, 226, 61, 0, 248, 162, 60, 174, 151, 118, 189, 93, 76, 192, 60, 120, 21, 33, 190, 217, 1, 32, 190, 216, 215, 31, 190, 191, 120, 239, 189, 14, 208, 74, 190, 78, 186, 147, 61, 17, 31, 26, 190, 81, 112, 85, 62, 178, 216, 27, 190, 142, 240, 22, 62, 100, 195, 202, 189, 179, 3, 131, 188, 138, 103, 157, 61, 107, 67, 126, 62, 18, 13, 138, 60, 39, 180, 211, 61, 68, 190, 82, 61, 20, 82, 73, 62, 28, 243, 71, 62, 148, 36, 5, 61, 78, 135, 31, 189, 21, 115, 13, 62, 166, 55, 19, 61, 226, 142, 110, 62, 244, 84, 38, 60, 134, 233, 155, 60, 104, 30, 137, 189, 69, 144, 48, 190, 188, 239, 138, 60, 51, 181, 217, 188, 67, 61, 151, 62, 173, 15, 231, 188, 73, 136, 206, 61, 213, 154, 24, 60, 29, 199, 237, 187, 170, 47, 55, 190, 231, 168, 21, 189, 9, 42, 21, 61, 75, 227, 36, 190, 136, 232, 190, 189, 223, 6, 150, 62, 228, 190, 19, 62, 165, 31, 90, 190, 31, 234, 53, 190, 132, 84, 220, 189, 48, 129, 34, 62, 90, 99, 210, 189, 119, 90, 25, 61, 50, 216, 66, 190, 9, 190, 77, 62, 119, 248, 136, 189, 212, 100, 46, 61, 42, 142, 94, 62, 166, 43, 239, 189, 241, 96, 151, 61, 74, 194, 120, 62, 108, 127, 98, 190, 230, 15, 50, 190, 33, 21, 160, 59, 204, 96, 8, 190, 166, 93, 10, 190, 252, 38, 135, 189, 161, 225, 179, 61, 46, 143, 61, 189, 197, 151, 167, 61, 229, 55, 2, 190, 31, 162, 20, 189, 225, 14, 106, 189, 131, 78, 64, 190, 171, 78, 21, 189, 223, 212, 19, 62, 25, 65, 49, 62, 106, 107, 198, 188, 150, 165, 240, 59, 222, 74, 33, 188, 122, 50, 107, 61, 164, 131, 201, 61, 117, 138, 172, 62, 135, 18, 77, 61, 160, 198, 221, 189, 56, 222, 6, 62, 195, 135, 151, 62, 27, 74, 96, 62, 210, 129, 227, 189, 243, 24, 129, 189, 231, 79, 144, 60, 21, 78, 206, 60, 241, 185, 108, 61, 2, 34, 24, 61, 128, 219, 28, 55, 131, 59, 160, 61, 144, 182, 132, 61, 162, 52, 0, 189, 171, 135, 0, 62, 79, 221, 146, 62, 90, 146, 223, 188, 106, 44, 160, 61, 71, 76, 148, 188, 138, 126, 30, 61, 179, 134, 11, 189, 154, 241, 163, 61, 127, 83, 181, 189, 74, 146, 115, 189, 69, 204, 199, 189, 134, 50, 64, 62, 188, 86, 22, 62, 142, 173, 45, 190, 172, 253, 19, 190, 206, 209, 47, 62, 150, 151, 88, 190, 240, 157, 224, 60, 241, 195, 29, 190, 90, 37, 22, 189, 207, 110, 233, 61, 54, 165, 138, 190, 88, 198, 193, 189, 60, 85, 18, 62, 140, 62, 134, 189, 168, 30, 131, 189, 35, 164, 218, 61, 109, 193, 198, 189, 156, 150, 51, 61, 109, 50, 246, 61, 73, 194, 22, 190, 74, 152, 226, 189, 176, 116, 146, 61, 65, 38, 41, 62, 15, 47, 36, 190, 242, 91, 75, 190, 195, 214, 47, 190, 106, 137, 149, 61, 201, 129, 149, 189, 50, 31, 56, 190, 157, 158, 53, 188, 43, 133, 180, 189, 234, 86, 129, 189, 120, 185, 210, 60, 5, 88, 247, 61, 207, 176, 21, 62, 219, 39, 149, 61, 112, 31, 29, 62, 205, 58, 164, 190, 116, 18, 171, 189, 233, 29, 48, 62, 39, 142, 36, 62, 124, 135, 188, 189, 160, 161, 164, 190, 159, 163, 116, 61, 69, 100, 121, 61, 203, 250, 142, 189, 181, 245, 247, 188, 8, 163, 129, 189, 4, 253, 111, 62, 244, 88, 33, 61, 190, 74, 59, 190, 248, 127, 224, 61, 206, 164, 56, 190, 241, 234, 82, 62, 49, 54, 200, 189, 33, 154, 1, 190, 170, 7, 81, 62, 41, 11, 197, 62, 36, 95, 200, 189, 25, 55, 190, 62, 1, 118, 173, 61, 110, 117, 139, 59, 84, 70, 126, 62, 57, 111, 167, 189, 239, 220, 4, 62, 4, 137, 190, 61, 147, 17, 237, 61, 203, 223, 219, 60, 63, 228, 126, 62, 118, 230, 159, 62, 194, 124, 2, 190, 207, 28, 187, 61, 78, 160, 12, 189, 48, 50, 92, 60, 132, 149, 144, 61, 45, 0, 196, 190, 113, 79, 45, 190, 24, 254, 145, 190, 68, 47, 204, 189, 109, 226, 58, 62, 14, 63, 33, 62, 171, 5, 25, 62, 18, 205, 245, 60, 25, 83, 160, 190, 145, 180, 169, 189, 44, 123, 53, 189, 1, 188, 80, 61, 53, 157, 110, 62, 181, 167, 109, 190, 109, 118, 161, 189, 161, 97, 18, 62, 183, 196, 98, 189, 42, 40, 102, 190, 62, 173, 96, 62, 17, 178, 159, 189, 4, 251, 10, 62, 90, 22, 92, 61, 191, 100, 204, 62, 177, 131, 193, 190, 238, 160, 118, 190, 58, 234, 211, 61, 227, 43, 167, 62, 0, 222, 54, 62, 235, 158, 110, 62, 242, 73, 196, 189, 171, 145, 9, 62, 203, 213, 128, 62, 109, 7, 12, 190, 249, 33, 147, 61, 170, 4, 112, 62, 48, 217, 254, 61, 171, 104, 68, 189, 2, 49, 150, 190, 195, 114, 247, 189, 213, 46, 126, 62, 209, 92, 251, 61, 52, 5, 191, 61, 70, 33, 54, 62, 65, 128, 142, 59, 49, 202, 16, 62, 247, 152, 12, 190, 31, 131, 211, 190, 244, 3, 54, 61, 127, 236, 233, 190, 97, 76, 145, 190, 140, 214, 171, 61, 223, 215, 150, 190, 124, 236, 29, 62, 140, 96, 124, 190, 213, 116, 145, 187, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 13, 251, 146, 189, 215, 56, 201, 189, 241, 146, 151, 61, 150, 90, 36, 62, 122, 164, 160, 61, 130, 235, 86, 190, 207, 90, 192, 61, 169, 188, 29, 62, 92, 38, 10, 62, 43, 51, 179, 187, 34, 114, 177, 61, 32, 180, 191, 61, 121, 72, 88, 60, 65, 142, 160, 188, 199, 76, 151, 190, 26, 2, 126, 61, 225, 215, 19, 190, 34, 213, 151, 190, 30, 235, 155, 189, 92, 12, 98, 190, 82, 77, 250, 61, 145, 54, 0, 190, 160, 83, 223, 60, 254, 115, 242, 189, 213, 193, 21, 190, 153, 118, 146, 61, 61, 201, 47, 190, 36, 183, 232, 61, 130, 162, 167, 188, 62, 41, 24, 62, 44, 220, 91, 62, 135, 221, 37, 189, 113, 218, 12, 62, 59, 97, 81, 61, 83, 143, 22, 62, 236, 83, 19, 61, 18, 192, 179, 61, 34, 19, 255, 61, 140, 92, 93, 190, 202, 121, 130, 62, 248, 75, 58, 61, 169, 192, 39, 190, 17, 68, 251, 189, 112, 140, 125, 189, 31, 100, 23, 62, 92, 211, 213, 58, 162, 62, 68, 189, 177, 232, 108, 189, 31, 43, 179, 60, 202, 178, 44, 189, 175, 137, 70, 190, 83, 162, 195, 61, 237, 129, 190, 62, 217, 18, 178, 189, 128, 71, 248, 189, 65, 113, 175, 61, 15, 16, 163, 189, 199, 216, 80, 61, 76, 102, 126, 189, 203, 247, 65, 189, 50, 75, 161, 61, 212, 215, 94, 189, 97, 58, 143, 62, 197, 98, 193, 62, 48, 77, 27, 62, 7, 118, 0, 190, 132, 239, 206, 189, 156, 175, 147, 62, 97, 204, 99, 62, 214, 184, 28, 190, 184, 60, 167, 61, 45, 30, 218, 61, 200, 131, 241, 61, 252, 234, 6, 190, 24, 90, 133, 62, 39, 208, 3, 62, 186, 230, 60, 62, 113, 79, 92, 60, 141, 12, 202, 60, 122, 62, 241, 189, 151, 242, 9, 190, 204, 11, 200, 190, 122, 47, 33, 190, 210, 167, 44, 190, 192, 33, 124, 61, 180, 51, 111, 189, 61, 167, 47, 190, 15, 172, 255, 189, 243, 48, 48, 190, 184, 193, 249, 61, 231, 246, 237, 189, 26, 252, 240, 189, 143, 123, 23, 189, 122, 171, 146, 61, 79, 209, 109, 189, 116, 249, 7, 62, 49, 102, 210, 189, 7, 164, 216, 189, 186, 103, 94, 62, 75, 123, 139, 62, 138, 239, 12, 62, 248, 70, 31, 61, 5, 19, 151, 190, 56, 204, 172, 189, 18, 36, 23, 62, 40, 30, 34, 187, 108, 50, 20, 190, 112, 219, 175, 188, 82, 11, 187, 61, 226, 78, 132, 62, 206, 213, 116, 61, 154, 244, 235, 189, 90, 182, 188, 61, 83, 8, 132, 190, 19, 118, 222, 189, 138, 111, 214, 189, 160, 148, 133, 62, 88, 59, 148, 189, 55, 134, 246, 189, 110, 27, 211, 188, 36, 43, 15, 62, 140, 254, 54, 190, 103, 135, 59, 60, 134, 241, 238, 61, 10, 14, 136, 61, 62, 52, 176, 61, 13, 249, 88, 62, 192, 86, 160, 62, 116, 14, 59, 62, 236, 83, 1, 62, 216, 25, 228, 189, 61, 170, 156, 189, 180, 20, 194, 189, 122, 147, 57, 62, 157, 239, 191, 189, 31, 51, 5, 189, 177, 46, 56, 190, 17, 19, 200, 188, 173, 228, 135, 61, 70, 195, 130, 61, 81, 61, 91, 61, 73, 100, 176, 61, 164, 185, 148, 61, 176, 1, 142, 188, 71, 4, 159, 189, 247, 225, 209, 185, 31, 89, 211, 61, 237, 91, 9, 62, 76, 74, 10, 61, 173, 75, 76, 189, 76, 150, 89, 60, 127, 219, 102, 62, 8, 211, 224, 61, 171, 248, 4, 189, 12, 185, 26, 62, 83, 200, 6, 62, 33, 177, 181, 186, 43, 26, 116, 189, 80, 18, 197, 61, 90, 223, 149, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 126, 61, 217, 187, 39, 118, 204, 61, 251, 141, 41, 190, 98, 25, 50, 190, 192, 152, 31, 61, 224, 171, 22, 190, 33, 15, 70, 190, 248, 53, 225, 61, 68, 55, 86, 190, 10, 86, 189, 61, 17, 101, 136, 189, 249, 206, 106, 59, 38, 189, 64, 60, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 76, 25, 57, 190, 111, 106, 130, 188, 244, 93, 54, 190, 210, 162, 3, 61, 142, 96, 44, 189, 50, 46, 0, 62, 111, 245, 21, 62, 127, 234, 60, 190, 221, 239, 91, 189, 17, 125, 29, 62, 112, 218, 175, 189, 180, 155, 211, 186, 84, 12, 45, 62, 241, 11, 43, 189, 132, 124, 134, 189, 101, 63, 154, 61, 157, 157, 115, 189, 120, 112, 207, 60, 38, 246, 48, 59, 54, 247, 13, 190, 255, 4, 61, 189, 164, 174, 180, 61, 142, 71, 111, 62, 189, 189, 33, 188, 22, 240, 40, 61, 26, 94, 71, 189, 47, 31, 219, 189, 155, 23, 223, 189, 33, 218, 3, 61, 82, 209, 133, 62, 78, 237, 254, 61, 169, 83, 30, 61, 38, 253, 79, 189, 64, 105, 43, 62, 74, 25, 250, 189, 229, 57, 25, 61, 97, 188, 57, 62, 73, 227, 244, 189, 111, 251, 143, 62, 176, 200, 166, 190, 119, 155, 134, 61, 44, 191, 219, 61, 75, 235, 22, 190, 100, 96, 169, 59, 137, 132, 241, 189, 54, 123, 185, 61, 243, 90, 91, 189, 178, 13, 31, 62, 148, 53, 163, 189, 210, 140, 253, 189, 200, 8, 221, 189, 227, 176, 30, 62, 25, 117, 159, 188, 216, 199, 228, 189, 54, 203, 4, 190, 178, 81, 206, 61, 87, 179, 11, 186, 254, 55, 241, 189, 168, 213, 215, 188, 250, 35, 41, 190, 23, 78, 139, 188, 165, 40, 7, 190, 248, 61, 51, 62, 123, 41, 23, 187, 127, 127, 255, 61, 230, 126, 45, 190, 126, 162, 165, 189, 60, 63, 254, 61, 199, 186, 46, 62, 151, 54, 49, 190, 255, 77, 138, 61, 138, 120, 198, 61, 223, 78, 121, 189, 190, 120, 24, 190, 8, 106, 162, 189, 59, 178, 24, 61, 128, 215, 106, 61, 40, 229, 42, 190, 135, 60, 52, 62, 88, 107, 101, 60, 221, 91, 112, 190, 182, 234, 42, 190, 104, 233, 168, 62, 131, 210, 244, 188, 243, 176, 10, 61, 178, 155, 147, 61, 162, 161, 82, 61, 239, 19, 171, 61, 143, 226, 51, 190, 154, 1, 143, 59, 87, 6, 13, 62, 69, 182, 215, 189, 177, 71, 62, 62, 16, 85, 207, 61, 208, 166, 49, 190, 44, 40, 211, 60, 156, 150, 155, 189, 6, 167, 188, 188, 112, 30, 74, 189, 31, 245, 155, 62, 255, 90, 101, 62, 186, 65, 14, 62, 146, 88, 181, 189, 119, 233, 148, 60, 249, 164, 72, 190, 244, 216, 146, 189, 224, 181, 54, 190, 161, 131, 11, 60, 35, 24, 85, 190, 90, 129, 244, 61, 42, 169, 191, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 40, 248, 242, 190, 101, 219, 2, 190, 65, 91, 61, 187, 244, 32, 202, 62, 183, 88, 205, 59, 204, 251, 198, 189, 45, 186, 185, 189, 177, 70, 97, 62, 78, 33, 175, 61, 159, 189, 229, 189, 218, 61, 163, 190, 18, 169, 251, 61, 171, 84, 8, 62, 96, 233, 16, 190, 39, 68, 230, 188, 129, 181, 241, 61, 6, 69, 162, 61, 3, 210, 154, 189, 91, 156, 148, 62, 137, 158, 202, 61, 138, 216, 81, 62, 228, 178, 220, 61, 100, 76, 68, 189, 206, 96, 90, 190, 99, 220, 15, 189, 2, 174, 7, 190, 54, 143, 117, 61, 162, 129, 101, 187, 96, 107, 77, 190, 83, 6, 21, 190, 24, 113, 116, 60, 22, 80, 10, 62, 134, 60, 101, 61, 108, 250, 38, 190, 33, 242, 183, 61, 68, 70, 247, 189, 46, 178, 35, 62, 69, 49, 248, 61, 4, 146, 25, 62, 15, 110, 120, 61, 192, 68, 23, 62, 234, 113, 171, 61, 236, 200, 8, 190, 4, 72, 149, 60, 233, 224, 208, 60, 101, 87, 19, 190, 52, 154, 67, 190, 13, 247, 27, 190, 225, 54, 189, 61, 9, 19, 38, 188, 110, 204, 13, 190, 65, 100, 61, 62, 109, 29, 24, 190, 182, 102, 53, 189, 86, 205, 192, 189, 203, 148, 21, 62, 254, 249, 203, 189, 21, 200, 222, 187, 101, 204, 171, 61, 2, 73, 225, 188, 158, 24, 134, 61, 80, 189, 81, 188, 50, 71, 33, 62, 239, 209, 152, 189, 176, 38, 194, 62, 120, 182, 163, 60, 8, 0, 173, 61, 57, 3, 100, 190, 72, 162, 211, 189, 64, 143, 168, 61, 122, 167, 45, 190, 87, 22, 16, 190, 74, 73, 151, 61, 234, 17, 153, 60, 192, 208, 94, 190, 195, 213, 33, 187, 213, 40, 108, 61, 91, 35, 181, 60, 94, 14, 64, 62, 218, 157, 91, 61, 142, 127, 167, 60, 8, 144, 71, 190, 109, 134, 246, 189, 171, 190, 227, 61, 87, 89, 182, 61, 73, 32, 251, 61, 223, 247, 154, 61, 54, 24, 76, 62, 0, 240, 159, 189, 157, 95, 83, 61, 207, 208, 155, 189, 5, 122, 252, 61, 201, 78, 26, 62, 246, 167, 230, 189, 187, 76, 136, 62, 255, 245, 80, 62, 215, 105, 20, 190, 109, 153, 119, 61, 80, 166, 20, 190, 222, 20, 148, 61, 63, 253, 151, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 204, 34, 46, 62, 93, 137, 146, 188, 179, 111, 244, 189, 194, 128, 173, 61, 179, 190, 204, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 102, 195, 228, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 195, 78, 98, 189, 149, 191, 46, 190, 84, 22, 10, 190, 163, 0, 36, 190, 213, 163, 44, 62, 181, 3, 52, 190, 8, 14, 87, 61, 248, 7, 40, 189, 122, 196, 249, 60, 127, 188, 126, 189, 36, 181, 85, 189, 101, 150, 52, 190, 232, 44, 190, 59, 89, 14, 28, 61, 143, 19, 229, 61, 38, 255, 145, 190, 209, 230, 65, 189, 190, 235, 149, 189, 138, 97, 31, 189, 141, 216, 5, 190, 136, 120, 10, 190, 197, 4, 25, 62, 50, 211, 108, 187, 108, 8, 61, 62, 194, 52, 116, 189, 130, 186, 12, 61, 118, 240, 34, 61, 249, 206, 168, 189, 178, 52, 244, 61, 86, 115, 25, 62, 86, 182, 137, 60, 151, 135, 74, 190, 24, 13, 197, 189, 207, 65, 243, 61, 13, 56, 1, 189, 110, 186, 0, 61, 160, 21, 11, 62, 92, 215, 248, 61, 147, 195, 240, 61, 86, 152, 134, 189, 191, 240, 131, 190, 20, 227, 159, 188, 103, 14, 68, 62, 77, 201, 75, 62, 254, 245, 33, 61, 40, 153, 140, 60, 111, 32, 157, 189, 196, 154, 128, 62, 97, 109, 141, 62, 21, 214, 233, 61, 180, 101, 166, 61, 21, 36, 23, 61, 108, 47, 72, 62, 57, 182, 23, 190, 40, 11, 184, 190, 118, 218, 223, 189, 3, 0, 62, 62, 127, 220, 162, 189, 11, 10, 140, 62, 241, 179, 23, 190, 88, 182, 140, 61, 91, 53, 145, 62, 33, 115, 27, 188, 124, 200, 201, 190, 141, 11, 5, 62, 104, 154, 103, 190, 209, 255, 71, 190, 131, 204, 24, 62, 162, 148, 160, 190, 57, 116, 77, 62, 38, 143, 234, 61, 158, 252, 28, 62, 102, 92, 168, 62, 143, 9, 98, 188, 155, 12, 137, 188, 197, 74, 130, 189, 206, 215, 115, 190, 146, 68, 165, 61, 136, 203, 184, 187, 139, 129, 97, 190, 94, 17, 42, 61, 53, 146, 101, 189, 254, 239, 225, 61, 85, 49, 80, 61, 188, 16, 126, 189, 239, 180, 37, 190, 197, 41, 42, 62, 78, 19, 4, 62, 226, 1, 235, 189, 212, 234, 59, 61, 54, 224, 22, 190, 174, 243, 240, 61, 115, 188, 165, 60, 207, 79, 80, 190, 11, 68, 109, 62, 46, 119, 157, 62, 37, 164, 97, 61, 159, 175, 6, 62, 192, 201, 247, 60, 80, 253, 42, 189, 254, 51, 30, 62, 1, 1, 239, 61, 102, 48, 178, 189, 212, 161, 74, 190, 21, 49, 13, 62, 140, 251, 143, 61, 120, 47, 128, 62, 212, 168, 238, 61, 84, 170, 16, 62, 210, 59, 13, 189, 142, 9, 155, 189, 87, 250, 71, 190, 177, 192, 175, 189, 140, 249, 134, 61, 214, 15, 202, 60, 40, 188, 149, 60, 141, 33, 251, 187, 222, 177, 115, 61, 239, 123, 67, 61, 182, 19, 229, 61, 88, 2, 7, 61, 255, 160, 38, 190, 214, 24, 224, 189, 217, 55, 175, 60, 11, 213, 169, 62, 238, 140, 57, 61, 253, 18, 196, 189, 248, 197, 218, 61, 78, 251, 72, 189, 153, 18, 243, 61, 143, 116, 39, 62, 77, 209, 94, 190, 7, 31, 27, 190, 143, 245, 8, 189, 247, 148, 45, 188, 27, 198, 12, 189, 72, 177, 118, 62, 24, 31, 110, 62, 11, 12, 7, 62, 6, 120, 99, 190, 147, 159, 66, 61, 50, 15, 3, 189, 98, 20, 206, 61, 216, 203, 155, 190, 234, 198, 112, 188, 177, 118, 195, 187, 27, 196, 93, 190, 222, 178, 138, 188, 126, 4, 17, 189, 181, 216, 87, 189, 161, 243, 147, 189, 178, 5, 67, 190, 3, 48, 151, 190, 36, 86, 64, 61, 195, 31, 99, 190, 125, 29, 191, 60, 199, 51, 250, 61, 48, 254, 205, 189, 74, 28, 143, 61, 199, 18, 14, 190, 105, 56, 97, 62, 165, 227, 40, 188, 67, 118, 168, 62, 181, 222, 180, 61, 237, 42, 243, 61, 80, 78, 10, 190, 8, 63, 47, 189, 216, 182, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 18, 129, 60, 196, 228, 114, 62, 130, 224, 48, 189, 221, 183, 149, 190, 157, 56, 84, 62, 121, 20, 23, 61, 189, 222, 11, 61, 106, 77, 208, 189, 213, 103, 82, 189, 230, 83, 105, 61, 16, 104, 147, 189, 8, 161, 143, 61, 138, 11, 224, 188, 218, 41, 156, 59, 254, 237, 212, 189, 86, 62, 84, 188, 207, 84, 50, 62, 188, 1, 242, 61, 240, 17, 116, 189, 52, 62, 27, 189, 144, 251, 158, 188, 216, 79, 254, 61, 103, 154, 5, 61, 163, 41, 3, 62, 116, 1, 250, 188, 119, 42, 109, 189, 11, 19, 104, 189, 52, 65, 131, 189, 145, 124, 145, 189, 251, 209, 231, 61, 19, 127, 95, 189, 30, 194, 141, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 156, 30, 62, 77, 117, 248, 62, 42, 60, 56, 62, 170, 224, 0, 190, 4, 175, 154, 189, 208, 209, 86, 189, 80, 190, 164, 189, 90, 83, 251, 61, 218, 80, 147, 62, 179, 61, 137, 189, 53, 24, 219, 190, 144, 157, 238, 61, 144, 246, 87, 190, 173, 215, 22, 190, 186, 101, 142, 190, 40, 33, 243, 189, 146, 252, 198, 61, 166, 224, 158, 189, 187, 246, 190, 61, 153, 205, 37, 62, 228, 87, 97, 189, 41, 21, 156, 189, 252, 253, 149, 61, 169, 187, 135, 190, 189, 220, 12, 190, 239, 192, 216, 61, 16, 129, 219, 189, 228, 200, 210, 186, 192, 23, 91, 190, 234, 36, 89, 62, 160, 67, 254, 189, 112, 252, 51, 62, 156, 151, 122, 187, 39, 86, 59, 61, 118, 88, 48, 189, 83, 204, 212, 61, 233, 58, 92, 190, 34, 237, 128, 62, 69, 247, 71, 190, 11, 82, 200, 60, 110, 9, 145, 59, 64, 111, 158, 190, 3, 254, 61, 62, 71, 78, 140, 189, 173, 244, 43, 62, 54, 56, 154, 190, 10, 57, 117, 62, 57, 221, 145, 190, 222, 68, 51, 190, 30, 239, 86, 188, 135, 62, 2, 62, 216, 88, 107, 61, 215, 176, 14, 190, 23, 3, 147, 190, 159, 3, 130, 189, 137, 204, 196, 189, 45, 129, 64, 190, 119, 221, 247, 189, 226, 206, 48, 62, 219, 141, 99, 61, 178, 8, 48, 189, 198, 16, 98, 188, 59, 251, 23, 61, 40, 121, 76, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 150, 82, 62, 126, 116, 231, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 70, 52, 191, 23, 176, 170, 187, 87, 85, 196, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 229, 38, 63, 132, 130, 94, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}