// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 77, 55, 191, 167, 8, 178, 190, 63, 38, 130, 62, 86, 79, 247, 189, 114, 174, 100, 63, 121, 110, 26, 63, 128, 198, 249, 62, 254, 65, 96, 63, 144, 107, 60, 62, 241, 225, 150, 189, 179, 51, 188, 62, 214, 124, 37, 190, 83, 221, 31, 63, 24, 23, 49, 62, 71, 78, 46, 62, 1, 102, 33, 190, 96, 160, 85, 191, 7, 106, 92, 190, 215, 75, 22, 190, 7, 37, 115, 191, 158, 81, 235, 188, 231, 177, 207, 61, 65, 79, 76, 63, 207, 203, 199, 190, 216, 184, 75, 62, 251, 93, 55, 63, 8, 103, 153, 62, 158, 46, 67, 189, 104, 116, 124, 191, 160, 71, 116, 190, 75, 28, 46, 63, 116, 239, 60, 63, 175, 197, 14, 63, 87, 6, 79, 191, 24, 133, 7, 62, 29, 182, 6, 191, 206, 178, 139, 190, 112, 236, 192, 63, 201, 33, 163, 62, 232, 30, 78, 63, 91, 64, 56, 63, 25, 231, 9, 190, 139, 101, 5, 63, 138, 215, 113, 190, 148, 249, 6, 191, 126, 104, 224, 62, 133, 200, 105, 190, 81, 184, 29, 191, 52, 208, 80, 191, 126, 221, 9, 62, 23, 9, 9, 191, 252, 39, 69, 191, 146, 193, 142, 189, 45, 219, 180, 188, 1, 33, 106, 191, 98, 61, 250, 189, 162, 57, 74, 191, 96, 210, 24, 190, 131, 99, 154, 191, 65, 95, 158, 190, 233, 52, 167, 62, 41, 202, 33, 191, 221, 232, 135, 62, 53, 231, 65, 189, 254, 37, 15, 63, 178, 213, 55, 191, 14, 232, 73, 190, 51, 206, 142, 191, 166, 49, 41, 190, 99, 208, 189, 189, 31, 142, 34, 63, 81, 147, 171, 190, 175, 1, 40, 191, 7, 51, 50, 63, 197, 64, 34, 62, 105, 235, 199, 190, 80, 141, 160, 189, 107, 132, 238, 190, 27, 12, 3, 190, 136, 101, 53, 191, 184, 17, 186, 58, 2, 175, 131, 188, 78, 244, 30, 63, 48, 159, 91, 190, 120, 241, 74, 62, 172, 174, 153, 191, 127, 238, 14, 191, 31, 247, 130, 63, 55, 240, 175, 61, 91, 180, 200, 62, 73, 37, 112, 63, 20, 148, 246, 190, 214, 104, 72, 62, 156, 96, 243, 62, 43, 174, 206, 62, 95, 183, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 125, 25, 191, 242, 111, 137, 190, 223, 87, 212, 62, 114, 130, 135, 62, 22, 216, 233, 190, 155, 254, 197, 62, 15, 147, 66, 62, 133, 140, 212, 61, 239, 126, 136, 190, 149, 14, 135, 62, 154, 76, 26, 191, 48, 93, 23, 63, 93, 107, 232, 189, 199, 223, 186, 189, 41, 217, 124, 62, 207, 207, 108, 190, 129, 111, 141, 190, 19, 53, 145, 189, 231, 240, 78, 190, 149, 212, 5, 63, 49, 199, 230, 190, 230, 69, 84, 61, 100, 22, 22, 63, 154, 121, 6, 190, 166, 203, 11, 190, 169, 13, 156, 190, 202, 84, 155, 62, 190, 253, 242, 62, 235, 103, 36, 190, 0, 236, 92, 191, 252, 216, 26, 189, 174, 153, 50, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 96, 153, 62, 38, 205, 199, 61, 237, 165, 163, 62, 253, 109, 168, 190, 201, 66, 125, 191, 143, 202, 104, 61, 54, 69, 18, 62, 18, 238, 120, 190, 119, 189, 119, 190, 192, 192, 196, 61, 184, 2, 43, 190, 89, 165, 149, 61, 113, 161, 160, 62, 227, 40, 112, 189, 38, 221, 188, 61, 50, 165, 135, 62, 216, 167, 126, 190, 169, 59, 24, 62, 63, 74, 224, 61, 202, 85, 128, 59, 120, 188, 72, 190, 67, 137, 96, 190, 75, 17, 141, 187, 173, 140, 163, 62, 190, 57, 138, 62, 181, 120, 225, 61, 74, 123, 225, 60, 138, 244, 77, 187, 13, 221, 183, 62, 139, 232, 23, 190, 6, 46, 15, 189, 180, 246, 86, 190, 237, 247, 14, 62, 62, 71, 32, 190, 212, 116, 239, 61, 138, 148, 209, 190, 97, 175, 1, 191, 53, 189, 154, 61, 56, 103, 80, 62, 174, 205, 94, 191, 47, 219, 19, 191, 146, 186, 165, 61, 30, 194, 133, 190, 128, 114, 114, 190, 127, 76, 40, 62, 31, 112, 142, 190, 114, 131, 178, 188, 176, 71, 134, 190, 114, 248, 203, 191, 16, 133, 239, 61, 130, 90, 106, 191, 159, 216, 15, 189, 152, 70, 154, 189, 10, 47, 62, 191, 53, 255, 215, 62, 238, 81, 254, 61, 49, 219, 105, 62, 198, 167, 136, 62, 155, 152, 145, 62, 12, 126, 137, 190, 107, 207, 178, 61, 51, 158, 99, 189, 117, 136, 50, 62, 46, 218, 166, 190, 194, 212, 219, 61, 13, 101, 24, 62, 62, 94, 58, 62, 8, 163, 136, 190, 7, 146, 92, 190, 110, 182, 238, 61, 46, 99, 129, 61, 52, 164, 207, 190, 180, 232, 210, 59, 88, 65, 151, 62, 3, 139, 88, 61, 195, 61, 46, 190, 237, 0, 31, 62, 73, 34, 242, 190, 5, 169, 44, 62, 190, 96, 63, 62, 34, 96, 76, 190, 56, 74, 13, 189, 87, 9, 22, 190, 141, 62, 160, 62, 228, 246, 144, 190, 91, 190, 47, 190, 193, 81, 114, 62, 211, 248, 236, 188, 39, 27, 171, 59, 158, 227, 113, 61, 201, 255, 119, 61, 110, 80, 233, 61, 49, 197, 29, 62, 205, 74, 134, 190, 5, 89, 98, 62, 138, 227, 101, 190, 1, 140, 176, 190, 20, 99, 155, 190, 194, 121, 128, 61, 48, 88, 16, 190, 173, 116, 142, 62, 115, 51, 122, 190, 61, 237, 184, 190, 236, 207, 232, 188, 158, 110, 1, 62, 190, 129, 26, 191, 3, 11, 158, 62, 89, 134, 134, 61, 222, 104, 17, 60, 202, 150, 14, 63, 218, 160, 39, 190, 99, 125, 202, 60, 188, 70, 140, 189, 209, 193, 120, 190, 182, 229, 29, 62, 178, 46, 127, 190, 120, 73, 240, 190, 87, 209, 57, 61, 36, 167, 14, 191, 42, 59, 0, 187, 214, 232, 184, 190, 111, 68, 49, 189, 108, 190, 45, 191, 202, 14, 191, 61, 186, 127, 99, 190, 10, 21, 82, 62, 233, 9, 37, 190, 236, 251, 197, 62, 159, 77, 230, 189, 29, 237, 103, 189, 24, 123, 140, 61, 158, 155, 214, 61, 27, 2, 37, 62, 24, 241, 219, 61, 162, 68, 83, 61, 74, 189, 13, 62, 35, 77, 156, 61, 164, 67, 174, 60, 116, 49, 100, 188, 82, 57, 101, 62, 76, 10, 185, 189, 91, 48, 245, 62, 229, 131, 36, 189, 200, 215, 71, 188, 196, 113, 26, 60, 215, 39, 153, 61, 140, 85, 146, 61, 83, 1, 117, 188, 132, 144, 152, 62, 132, 139, 40, 189, 162, 48, 62, 62, 90, 156, 64, 189, 43, 80, 230, 189, 184, 216, 95, 190, 218, 112, 90, 189, 103, 40, 39, 60, 183, 118, 143, 190, 70, 148, 188, 61, 220, 223, 217, 62, 169, 232, 205, 61, 40, 114, 219, 190, 103, 175, 134, 190, 76, 60, 26, 190, 240, 195, 160, 62, 16, 188, 50, 62, 12, 210, 65, 62, 143, 190, 180, 186, 173, 176, 172, 62, 1, 173, 175, 60, 104, 227, 135, 62, 219, 128, 181, 62, 232, 150, 22, 189, 111, 214, 220, 61, 61, 2, 122, 62, 82, 152, 184, 190, 247, 45, 191, 190, 184, 94, 8, 62, 186, 223, 48, 190, 15, 175, 76, 189, 143, 38, 175, 61, 145, 57, 151, 62, 144, 126, 150, 61, 118, 198, 33, 62, 194, 184, 248, 189, 212, 92, 128, 190, 194, 234, 80, 190, 12, 151, 30, 190, 22, 194, 92, 60, 94, 21, 104, 190, 88, 105, 162, 62, 238, 138, 115, 190, 98, 127, 66, 61, 97, 165, 17, 189, 157, 176, 192, 58, 123, 189, 159, 61, 196, 37, 59, 62, 71, 29, 57, 62, 88, 81, 217, 189, 210, 61, 3, 62, 254, 74, 112, 62, 110, 240, 177, 61, 95, 120, 242, 189, 116, 89, 97, 189, 192, 15, 193, 61, 78, 248, 202, 189, 62, 148, 149, 62, 89, 123, 176, 188, 206, 119, 48, 189, 135, 122, 21, 62, 21, 134, 149, 62, 137, 120, 125, 60, 73, 158, 12, 62, 4, 253, 138, 62, 65, 212, 56, 189, 116, 197, 35, 62, 150, 221, 185, 189, 123, 194, 157, 189, 71, 195, 188, 189, 80, 237, 132, 61, 27, 72, 3, 190, 19, 82, 61, 190, 193, 95, 143, 61, 135, 76, 152, 62, 185, 161, 211, 61, 212, 119, 32, 190, 77, 99, 35, 189, 29, 225, 37, 62, 183, 224, 17, 191, 214, 65, 167, 62, 165, 195, 130, 190, 47, 151, 180, 190, 36, 220, 147, 61, 93, 180, 83, 190, 170, 236, 239, 190, 124, 36, 121, 62, 86, 43, 134, 189, 45, 117, 203, 189, 170, 224, 7, 187, 87, 208, 45, 190, 101, 249, 5, 61, 109, 50, 246, 61, 113, 219, 20, 191, 74, 152, 226, 189, 9, 77, 11, 191, 213, 104, 227, 62, 56, 204, 104, 190, 97, 226, 91, 191, 195, 214, 47, 190, 131, 194, 157, 190, 201, 129, 149, 189, 98, 73, 6, 190, 125, 138, 25, 190, 43, 133, 180, 189, 197, 105, 255, 61, 198, 116, 178, 61, 253, 224, 4, 190, 87, 80, 3, 60, 131, 55, 56, 62, 99, 238, 141, 62, 163, 146, 162, 190, 165, 153, 8, 191, 133, 178, 74, 62, 97, 8, 30, 62, 187, 195, 23, 190, 241, 197, 191, 190, 17, 185, 9, 62, 38, 137, 250, 189, 110, 244, 159, 189, 33, 174, 100, 62, 34, 236, 135, 190, 154, 87, 139, 62, 75, 135, 221, 61, 46, 181, 86, 190, 252, 3, 68, 62, 70, 134, 72, 190, 92, 58, 124, 62, 42, 189, 105, 190, 146, 209, 21, 190, 203, 137, 100, 62, 213, 204, 213, 62, 104, 38, 3, 62, 6, 11, 243, 62, 231, 101, 185, 61, 237, 132, 254, 188, 206, 74, 197, 62, 204, 128, 166, 190, 113, 92, 98, 62, 57, 199, 138, 184, 7, 248, 101, 61, 166, 44, 15, 189, 224, 205, 106, 62, 89, 124, 159, 62, 127, 65, 149, 189, 140, 38, 202, 60, 249, 51, 78, 190, 177, 34, 143, 189, 207, 52, 65, 189, 159, 190, 99, 191, 213, 225, 82, 190, 166, 69, 60, 190, 227, 152, 105, 190, 116, 187, 163, 62, 67, 13, 39, 62, 110, 57, 20, 62, 69, 194, 184, 188, 155, 6, 85, 190, 58, 202, 180, 189, 220, 4, 178, 189, 60, 179, 106, 62, 127, 101, 45, 62, 59, 126, 204, 189, 251, 147, 148, 189, 204, 241, 219, 61, 84, 85, 244, 188, 164, 224, 166, 190, 57, 187, 139, 62, 77, 149, 12, 190, 217, 204, 104, 62, 29, 173, 178, 62, 13, 0, 236, 62, 253, 91, 111, 189, 137, 232, 160, 190, 152, 100, 31, 61, 236, 77, 186, 61, 186, 106, 54, 63, 232, 253, 120, 62, 45, 219, 6, 61, 40, 37, 47, 62, 35, 204, 167, 62, 23, 103, 173, 189, 94, 70, 187, 62, 61, 200, 165, 62, 162, 108, 132, 190, 207, 216, 174, 62, 9, 210, 201, 190, 142, 191, 108, 190, 112, 86, 201, 62, 131, 9, 105, 62, 84, 43, 104, 62, 41, 139, 54, 62, 187, 100, 171, 189, 182, 9, 76, 62, 146, 251, 178, 189, 122, 141, 198, 190, 193, 90, 56, 190, 195, 244, 255, 190, 41, 194, 23, 190, 226, 251, 132, 61, 74, 136, 23, 191, 180, 194, 252, 62, 118, 246, 127, 61, 2, 195, 214, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 91, 252, 98, 61, 208, 101, 44, 190, 194, 192, 160, 61, 129, 43, 159, 62, 152, 35, 133, 62, 203, 247, 58, 191, 144, 14, 12, 189, 116, 152, 131, 62, 9, 161, 160, 187, 52, 166, 14, 191, 65, 49, 132, 60, 55, 222, 172, 62, 40, 161, 71, 190, 148, 167, 214, 62, 176, 180, 243, 190, 239, 180, 168, 189, 36, 124, 139, 190, 169, 177, 213, 190, 104, 22, 4, 191, 203, 49, 76, 191, 75, 29, 148, 62, 105, 235, 19, 190, 13, 71, 181, 189, 82, 203, 58, 61, 45, 111, 153, 190, 216, 143, 125, 61, 35, 24, 155, 190, 232, 218, 170, 62, 65, 105, 226, 189, 68, 17, 81, 62, 107, 195, 163, 62, 208, 43, 73, 62, 91, 22, 83, 62, 3, 102, 48, 61, 255, 195, 47, 62, 15, 113, 49, 59, 190, 176, 139, 62, 115, 39, 210, 189, 180, 45, 242, 190, 113, 98, 25, 62, 138, 124, 20, 189, 204, 198, 21, 191, 111, 104, 238, 189, 37, 79, 72, 62, 139, 238, 80, 61, 142, 48, 48, 62, 82, 255, 90, 190, 84, 77, 132, 190, 191, 6, 32, 61, 246, 87, 212, 60, 136, 31, 131, 190, 131, 184, 74, 190, 67, 97, 23, 63, 241, 175, 63, 190, 191, 165, 97, 189, 165, 51, 144, 61, 103, 196, 227, 189, 28, 183, 86, 190, 77, 185, 119, 190, 215, 107, 107, 188, 221, 228, 221, 190, 141, 37, 227, 61, 59, 32, 7, 63, 253, 100, 227, 62, 1, 172, 134, 62, 59, 233, 29, 190, 194, 131, 228, 189, 123, 59, 155, 62, 112, 137, 184, 62, 149, 154, 5, 190, 116, 78, 201, 188, 64, 35, 8, 62, 78, 171, 112, 60, 241, 73, 196, 190, 91, 225, 110, 62, 59, 112, 144, 62, 247, 9, 5, 61, 78, 157, 123, 62, 49, 92, 122, 62, 78, 7, 22, 62, 136, 24, 208, 189, 145, 189, 177, 190, 170, 233, 226, 189, 49, 135, 245, 189, 66, 238, 88, 62, 167, 163, 239, 60, 156, 131, 112, 190, 5, 64, 34, 62, 31, 107, 133, 190, 234, 23, 158, 62, 211, 43, 52, 190, 14, 23, 7, 189, 162, 15, 55, 61, 63, 101, 254, 61, 86, 63, 222, 60, 189, 48, 138, 62, 70, 43, 204, 189, 32, 128, 6, 190, 188, 87, 115, 62, 95, 203, 149, 62, 81, 173, 35, 62, 163, 17, 26, 190, 212, 245, 6, 191, 181, 108, 47, 190, 38, 242, 129, 61, 101, 58, 8, 191, 182, 210, 70, 190, 62, 222, 99, 62, 239, 154, 109, 61, 135, 3, 209, 62, 6, 103, 242, 189, 121, 249, 170, 190, 165, 128, 202, 61, 98, 214, 234, 60, 72, 254, 43, 190, 185, 26, 127, 190, 206, 27, 203, 62, 253, 161, 51, 190, 42, 58, 150, 188, 242, 137, 58, 60, 229, 137, 131, 62, 63, 192, 169, 190, 226, 159, 146, 190, 155, 170, 71, 62, 65, 140, 187, 190, 171, 79, 19, 62, 221, 23, 193, 62, 95, 143, 203, 62, 115, 206, 61, 59, 162, 54, 235, 61, 99, 192, 1, 189, 70, 120, 241, 188, 15, 254, 133, 189, 202, 99, 73, 62, 31, 149, 255, 189, 116, 89, 191, 189, 65, 166, 104, 190, 243, 245, 124, 188, 202, 152, 127, 61, 209, 232, 210, 61, 193, 35, 12, 62, 106, 209, 211, 61, 141, 87, 252, 60, 150, 239, 10, 189, 216, 238, 136, 189, 23, 42, 86, 62, 121, 235, 174, 61, 214, 46, 40, 62, 185, 250, 124, 189, 254, 79, 201, 189, 3, 134, 74, 61, 153, 112, 64, 62, 186, 132, 157, 61, 148, 124, 56, 187, 117, 69, 229, 61, 225, 153, 26, 62, 10, 93, 68, 59, 63, 41, 199, 60, 169, 175, 146, 62, 146, 198, 129, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 239, 232, 215, 190, 13, 216, 187, 190, 185, 188, 107, 62, 210, 184, 20, 190, 34, 242, 180, 190, 73, 94, 164, 61, 104, 80, 128, 62, 219, 178, 114, 62, 78, 161, 219, 190, 14, 61, 115, 62, 5, 254, 202, 190, 210, 122, 148, 189, 98, 241, 185, 190, 45, 219, 68, 62, 152, 139, 133, 62, 131, 124, 13, 62, 225, 150, 255, 61, 141, 194, 93, 59, 126, 39, 120, 62, 253, 106, 189, 60, 170, 243, 222, 62, 68, 116, 84, 62, 98, 235, 132, 61, 221, 249, 109, 62, 90, 15, 39, 191, 25, 69, 212, 61, 197, 250, 189, 62, 93, 4, 163, 190, 159, 94, 224, 61, 28, 95, 152, 190, 231, 40, 11, 63, 83, 60, 207, 59, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 42, 149, 34, 62, 203, 242, 194, 190, 170, 35, 223, 190, 11, 88, 245, 61, 251, 36, 5, 63, 26, 141, 212, 60, 144, 216, 30, 62, 96, 26, 135, 60, 18, 89, 51, 190, 84, 159, 63, 190, 1, 207, 210, 62, 18, 74, 86, 62, 25, 117, 11, 191, 102, 180, 169, 62, 148, 12, 96, 61, 195, 1, 82, 190, 150, 25, 168, 61, 205, 120, 42, 62, 54, 216, 43, 61, 240, 223, 135, 189, 253, 156, 179, 189, 6, 168, 99, 62, 127, 66, 66, 62, 127, 56, 7, 190, 239, 73, 22, 62, 63, 16, 126, 190, 244, 142, 234, 188, 36, 201, 48, 190, 146, 84, 16, 190, 126, 215, 128, 62, 36, 145, 98, 62, 120, 104, 179, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 106, 167, 17, 61, 62, 82, 212, 190, 161, 34, 111, 191, 156, 172, 135, 61, 219, 179, 22, 60, 103, 137, 63, 188, 106, 210, 229, 61, 201, 66, 1, 62, 101, 207, 154, 189, 140, 109, 84, 61, 210, 255, 113, 189, 144, 8, 50, 62, 70, 31, 164, 190, 42, 138, 246, 190, 246, 175, 144, 189, 38, 171, 131, 61, 131, 78, 184, 61, 68, 16, 222, 61, 143, 32, 170, 62, 192, 6, 73, 62, 143, 149, 145, 188, 58, 7, 178, 61, 76, 94, 254, 61, 178, 128, 166, 190, 28, 107, 146, 61, 51, 131, 107, 190, 132, 18, 156, 62, 70, 28, 32, 190, 163, 88, 164, 190, 87, 203, 41, 190, 121, 195, 66, 62, 235, 212, 34, 189, 242, 81, 135, 62, 170, 121, 84, 191, 160, 108, 162, 191, 55, 146, 131, 190, 78, 8, 240, 189, 221, 236, 142, 62, 108, 49, 210, 62, 127, 234, 32, 62, 146, 108, 54, 189, 153, 61, 162, 62, 3, 177, 69, 62, 139, 67, 38, 62, 232, 195, 236, 190, 217, 75, 9, 190, 18, 237, 153, 190, 226, 44, 57, 190, 77, 197, 119, 62, 11, 137, 128, 62, 154, 199, 153, 59, 0, 151, 176, 62, 153, 195, 124, 190, 170, 96, 128, 61, 197, 49, 8, 62, 68, 50, 49, 61, 86, 129, 0, 62, 193, 247, 4, 190, 251, 76, 180, 62, 185, 201, 131, 60, 177, 90, 213, 189, 217, 181, 223, 190, 65, 3, 185, 62, 86, 198, 234, 189, 173, 27, 207, 62, 209, 67, 48, 61, 231, 2, 23, 62, 235, 34, 96, 190, 98, 51, 169, 190, 26, 247, 12, 62, 221, 20, 137, 189, 247, 53, 60, 190, 133, 193, 24, 191, 132, 244, 196, 61, 83, 38, 6, 191, 178, 55, 104, 61, 206, 85, 105, 62, 226, 248, 100, 61, 155, 189, 14, 62, 92, 171, 16, 61, 198, 191, 163, 60, 116, 242, 226, 61, 137, 54, 11, 190, 128, 41, 56, 62, 95, 182, 98, 62, 251, 85, 192, 61, 105, 15, 54, 62, 38, 117, 36, 62, 221, 198, 229, 61, 173, 193, 135, 61, 179, 163, 197, 60, 241, 87, 254, 61, 106, 113, 55, 62, 110, 152, 76, 190, 66, 247, 12, 63, 184, 181, 67, 62, 215, 105, 20, 190, 109, 153, 119, 61, 80, 166, 20, 190, 222, 20, 148, 61, 63, 253, 151, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 204, 34, 46, 62, 93, 137, 146, 188, 179, 111, 244, 189, 194, 128, 173, 61, 179, 190, 204, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 102, 195, 228, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 195, 78, 98, 189, 149, 191, 46, 190, 84, 22, 10, 190, 163, 0, 36, 190, 213, 163, 44, 62, 181, 3, 52, 190, 8, 14, 87, 61, 248, 7, 40, 189, 156, 70, 145, 62, 131, 52, 75, 61, 186, 194, 188, 190, 173, 32, 115, 190, 130, 137, 90, 188, 24, 91, 57, 188, 218, 226, 191, 60, 30, 64, 9, 191, 149, 71, 11, 61, 51, 112, 17, 190, 40, 173, 20, 190, 77, 216, 181, 190, 140, 166, 145, 189, 250, 169, 101, 61, 178, 71, 48, 62, 105, 178, 151, 62, 50, 80, 2, 191, 36, 135, 43, 191, 92, 246, 129, 190, 188, 200, 235, 189, 188, 46, 118, 62, 154, 215, 105, 60, 60, 91, 148, 188, 244, 238, 168, 190, 237, 221, 203, 190, 22, 231, 197, 189, 226, 66, 16, 61, 170, 197, 24, 191, 238, 119, 194, 62, 98, 204, 207, 188, 52, 30, 165, 62, 242, 185, 126, 61, 63, 151, 63, 190, 90, 75, 37, 190, 2, 95, 137, 61, 217, 5, 97, 61, 234, 207, 88, 62, 128, 106, 83, 61, 97, 138, 71, 188, 245, 29, 128, 62, 98, 28, 78, 62, 137, 91, 6, 62, 215, 124, 168, 61, 124, 27, 19, 62, 236, 76, 83, 189, 28, 20, 63, 61, 100, 215, 219, 190, 85, 58, 79, 190, 13, 28, 161, 62, 61, 129, 87, 61, 173, 125, 207, 62, 57, 21, 249, 189, 8, 127, 37, 62, 24, 177, 171, 62, 22, 47, 149, 61, 133, 9, 212, 190, 215, 95, 75, 61, 251, 213, 150, 190, 37, 46, 63, 190, 136, 130, 37, 62, 207, 245, 18, 191, 34, 100, 153, 62, 122, 254, 55, 62, 221, 106, 61, 62, 216, 6, 243, 61, 158, 220, 248, 59, 99, 234, 158, 61, 178, 181, 213, 58, 102, 132, 184, 190, 61, 109, 239, 61, 233, 222, 25, 188, 16, 176, 118, 190, 64, 113, 59, 61, 39, 215, 130, 60, 79, 26, 178, 61, 163, 214, 85, 61, 105, 246, 179, 61, 101, 244, 244, 189, 41, 186, 111, 62, 218, 80, 75, 62, 136, 207, 0, 190, 59, 243, 128, 61, 190, 126, 27, 190, 217, 185, 45, 62, 238, 175, 53, 190, 124, 127, 81, 190, 155, 22, 115, 62, 28, 41, 182, 62, 36, 68, 198, 61, 188, 217, 107, 62, 81, 42, 15, 60, 149, 2, 190, 188, 81, 239, 141, 62, 51, 110, 13, 61, 242, 61, 56, 61, 62, 39, 14, 190, 207, 64, 190, 62, 152, 134, 25, 62, 208, 6, 168, 62, 233, 85, 36, 62, 111, 251, 156, 62, 58, 10, 37, 191, 191, 210, 20, 190, 150, 147, 254, 188, 43, 255, 92, 189, 141, 246, 225, 190, 179, 166, 107, 61, 57, 52, 141, 60, 97, 252, 99, 187, 103, 208, 224, 62, 31, 31, 82, 190, 75, 101, 141, 189, 196, 229, 252, 61, 211, 44, 111, 190, 247, 104, 225, 190, 187, 154, 43, 191, 31, 235, 237, 62, 135, 29, 137, 61, 27, 156, 114, 190, 25, 83, 166, 62, 37, 160, 82, 188, 203, 8, 169, 189, 247, 192, 5, 62, 184, 75, 23, 190, 236, 138, 149, 190, 60, 89, 49, 61, 159, 43, 28, 190, 217, 178, 40, 61, 5, 134, 251, 60, 52, 7, 143, 62, 13, 189, 119, 62, 2, 173, 5, 62, 180, 87, 176, 189, 35, 114, 11, 190, 54, 78, 50, 190, 29, 83, 132, 189, 117, 145, 142, 58, 250, 209, 49, 190, 119, 17, 113, 190, 203, 250, 157, 189, 165, 0, 134, 62, 241, 70, 207, 189, 12, 207, 52, 62, 116, 20, 249, 189, 154, 203, 215, 190, 9, 143, 193, 61, 202, 203, 47, 191, 73, 99, 76, 189, 109, 179, 183, 188, 175, 30, 201, 189, 23, 11, 178, 189, 138, 180, 155, 62, 52, 32, 250, 62, 33, 29, 32, 61, 255, 101, 221, 61, 159, 171, 157, 62, 222, 20, 24, 190, 77, 71, 48, 190, 98, 84, 76, 62, 98, 29, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 18, 53, 61, 249, 66, 73, 62, 40, 53, 94, 59, 192, 175, 178, 190, 136, 149, 135, 62, 127, 107, 143, 186, 245, 226, 165, 61, 69, 112, 186, 190, 195, 170, 84, 59, 92, 85, 37, 62, 153, 180, 88, 189, 8, 161, 143, 61, 229, 225, 224, 60, 56, 137, 36, 61, 37, 92, 174, 189, 149, 66, 198, 61, 126, 215, 118, 62, 188, 1, 242, 61, 225, 116, 161, 189, 192, 207, 11, 61, 71, 25, 229, 188, 214, 181, 62, 62, 103, 154, 5, 61, 115, 222, 55, 62, 176, 179, 15, 62, 159, 22, 128, 61, 11, 19, 104, 189, 54, 255, 71, 190, 70, 55, 125, 189, 237, 214, 26, 62, 47, 120, 32, 189, 213, 87, 42, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 174, 119, 62, 47, 112, 122, 63, 68, 189, 124, 62, 230, 85, 54, 191, 109, 201, 208, 187, 56, 9, 0, 63, 94, 15, 91, 187, 196, 144, 51, 63, 177, 128, 218, 62, 83, 188, 69, 190, 178, 219, 58, 191, 144, 157, 238, 61, 228, 254, 227, 190, 153, 77, 146, 190, 128, 27, 128, 190, 255, 184, 150, 190, 150, 186, 114, 61, 166, 224, 158, 189, 46, 133, 187, 61, 24, 167, 137, 62, 147, 183, 140, 189, 90, 214, 75, 190, 252, 253, 149, 61, 4, 27, 198, 190, 217, 169, 20, 191, 179, 251, 1, 62, 16, 129, 219, 189, 218, 240, 0, 191, 28, 220, 101, 190, 139, 130, 240, 61, 71, 78, 156, 190, 50, 205, 181, 62, 32, 26, 53, 62, 108, 208, 23, 61, 253, 225, 17, 62, 39, 0, 226, 62, 42, 153, 138, 190, 29, 121, 62, 62, 176, 162, 78, 190, 52, 167, 193, 188, 223, 189, 179, 61, 10, 75, 25, 190, 142, 81, 147, 62, 71, 78, 140, 189, 206, 101, 229, 62, 15, 91, 151, 190, 63, 154, 148, 62, 115, 238, 69, 190, 77, 130, 77, 190, 30, 239, 86, 188, 25, 228, 249, 61, 123, 72, 164, 189, 98, 107, 166, 189, 148, 72, 84, 190, 159, 3, 130, 189, 198, 133, 184, 188, 56, 88, 164, 60, 220, 163, 91, 190, 226, 206, 48, 62, 253, 61, 158, 62, 213, 209, 246, 188, 114, 220, 114, 59, 229, 251, 79, 62, 196, 54, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 75, 129, 62, 125, 135, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 74, 77, 186, 207, 188, 27, 191, 19, 170, 105, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 249, 170, 63, 220, 70, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}