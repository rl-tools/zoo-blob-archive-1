// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 2, 3, 191, 40, 157, 189, 190, 89, 54, 159, 62, 253, 119, 244, 189, 140, 17, 72, 63, 237, 2, 30, 63, 154, 217, 224, 62, 190, 171, 95, 63, 56, 16, 133, 62, 96, 138, 230, 189, 161, 60, 248, 62, 242, 35, 217, 189, 94, 104, 28, 63, 115, 17, 24, 62, 231, 186, 18, 62, 79, 17, 9, 190, 209, 231, 75, 191, 126, 142, 114, 190, 110, 57, 156, 190, 172, 100, 94, 191, 128, 107, 122, 60, 103, 141, 214, 61, 213, 0, 67, 63, 44, 61, 208, 190, 131, 24, 70, 62, 242, 207, 57, 63, 66, 9, 150, 62, 224, 235, 163, 189, 148, 167, 106, 191, 52, 15, 88, 190, 67, 136, 41, 63, 89, 56, 57, 63, 176, 143, 14, 63, 10, 200, 77, 191, 123, 50, 40, 62, 191, 225, 8, 191, 38, 255, 153, 190, 105, 13, 190, 63, 105, 234, 154, 62, 203, 27, 78, 63, 245, 210, 40, 63, 214, 72, 228, 189, 202, 43, 251, 62, 161, 86, 228, 189, 187, 225, 12, 191, 100, 48, 192, 62, 201, 9, 54, 190, 110, 117, 34, 191, 146, 38, 73, 191, 145, 160, 14, 62, 108, 202, 7, 191, 153, 95, 51, 191, 252, 123, 13, 190, 206, 241, 130, 60, 137, 237, 78, 191, 65, 102, 2, 190, 116, 11, 81, 191, 31, 13, 8, 190, 206, 60, 146, 191, 13, 240, 156, 190, 253, 34, 168, 62, 37, 237, 58, 191, 194, 141, 118, 62, 109, 122, 26, 189, 221, 164, 4, 63, 83, 99, 61, 191, 34, 177, 49, 190, 136, 216, 140, 191, 219, 4, 53, 190, 128, 23, 12, 190, 121, 79, 41, 63, 213, 170, 165, 190, 59, 149, 41, 191, 149, 78, 25, 63, 84, 111, 10, 62, 115, 161, 187, 190, 114, 199, 195, 187, 88, 93, 232, 190, 154, 254, 228, 189, 67, 31, 41, 191, 201, 185, 179, 60, 200, 19, 189, 189, 6, 58, 56, 63, 136, 4, 10, 190, 75, 52, 139, 62, 20, 82, 140, 191, 101, 203, 14, 191, 133, 255, 128, 63, 155, 232, 99, 61, 43, 89, 207, 62, 232, 195, 111, 63, 60, 45, 22, 191, 249, 34, 4, 62, 13, 111, 221, 62, 155, 197, 242, 62, 91, 152, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 206, 38, 191, 45, 250, 97, 190, 228, 244, 218, 62, 230, 210, 155, 62, 197, 95, 244, 190, 22, 8, 196, 62, 235, 193, 32, 62, 60, 188, 137, 61, 30, 252, 116, 190, 114, 137, 138, 62, 228, 60, 31, 191, 228, 36, 23, 63, 25, 68, 123, 188, 234, 90, 177, 189, 165, 157, 122, 62, 86, 106, 27, 190, 243, 79, 140, 190, 59, 152, 184, 189, 84, 117, 145, 190, 214, 152, 7, 63, 89, 253, 224, 190, 28, 225, 195, 61, 197, 247, 17, 63, 28, 227, 6, 190, 193, 223, 27, 190, 103, 39, 193, 190, 21, 203, 161, 62, 175, 96, 4, 63, 216, 95, 51, 190, 240, 140, 89, 191, 182, 175, 59, 189, 243, 105, 61, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 31, 156, 62, 110, 20, 52, 61, 233, 47, 163, 62, 12, 39, 169, 190, 183, 152, 116, 191, 46, 119, 128, 61, 223, 87, 255, 61, 61, 77, 128, 190, 103, 241, 140, 190, 136, 35, 189, 61, 11, 148, 66, 190, 183, 49, 156, 61, 208, 86, 142, 62, 176, 87, 196, 187, 182, 134, 176, 61, 181, 52, 121, 62, 37, 204, 111, 190, 4, 0, 74, 62, 216, 186, 233, 61, 227, 27, 254, 59, 193, 141, 134, 190, 124, 203, 109, 190, 149, 197, 240, 58, 134, 19, 165, 62, 147, 149, 91, 62, 38, 203, 225, 61, 47, 255, 172, 60, 222, 153, 148, 187, 182, 140, 174, 62, 61, 189, 52, 190, 223, 57, 147, 189, 124, 67, 69, 190, 118, 206, 41, 62, 52, 44, 224, 189, 145, 25, 36, 62, 110, 251, 206, 190, 22, 167, 223, 190, 254, 28, 145, 61, 58, 28, 79, 62, 8, 101, 102, 191, 252, 108, 0, 191, 196, 207, 203, 61, 74, 209, 98, 190, 103, 146, 149, 190, 250, 74, 26, 62, 179, 78, 141, 190, 98, 139, 70, 61, 122, 239, 84, 190, 149, 238, 200, 191, 85, 106, 129, 61, 57, 158, 97, 191, 219, 246, 20, 189, 87, 140, 115, 189, 151, 38, 71, 191, 206, 87, 213, 62, 238, 81, 254, 61, 188, 146, 81, 62, 21, 40, 59, 62, 93, 243, 146, 62, 116, 129, 118, 190, 64, 162, 90, 62, 44, 91, 146, 188, 109, 89, 75, 62, 225, 136, 150, 190, 28, 245, 18, 62, 9, 122, 30, 62, 41, 245, 38, 62, 231, 186, 134, 190, 131, 97, 54, 190, 54, 50, 177, 61, 209, 120, 66, 61, 81, 138, 200, 190, 138, 9, 192, 60, 120, 223, 128, 62, 203, 57, 165, 61, 101, 59, 24, 190, 77, 123, 12, 62, 74, 129, 243, 190, 72, 234, 224, 61, 232, 13, 24, 62, 171, 25, 38, 190, 0, 230, 22, 61, 219, 19, 3, 190, 196, 88, 141, 62, 232, 178, 144, 190, 232, 46, 44, 190, 15, 208, 88, 62, 179, 27, 18, 61, 210, 144, 6, 187, 251, 218, 140, 61, 208, 36, 31, 61, 220, 133, 154, 61, 95, 240, 248, 61, 103, 196, 120, 190, 68, 119, 43, 62, 199, 17, 138, 190, 171, 127, 176, 190, 146, 51, 174, 190, 207, 141, 59, 61, 136, 246, 38, 190, 104, 52, 142, 62, 90, 173, 44, 190, 36, 90, 187, 190, 158, 228, 33, 189, 134, 78, 215, 60, 218, 137, 242, 190, 76, 197, 114, 62, 249, 16, 98, 61, 186, 180, 146, 189, 233, 204, 12, 63, 66, 36, 6, 190, 106, 178, 72, 61, 188, 227, 221, 189, 150, 107, 158, 190, 163, 81, 254, 61, 37, 130, 46, 190, 103, 148, 253, 190, 23, 163, 12, 61, 30, 131, 234, 190, 214, 201, 18, 189, 213, 194, 207, 190, 181, 34, 160, 189, 140, 87, 35, 191, 90, 127, 158, 61, 80, 22, 79, 190, 195, 49, 83, 62, 251, 191, 220, 189, 117, 59, 202, 62, 227, 85, 143, 189, 48, 178, 155, 188, 19, 20, 133, 61, 207, 92, 226, 61, 195, 180, 248, 61, 164, 21, 223, 61, 158, 85, 70, 61, 12, 58, 15, 62, 14, 162, 203, 61, 43, 107, 47, 61, 146, 53, 243, 187, 175, 145, 94, 62, 219, 250, 126, 189, 31, 71, 196, 62, 244, 202, 237, 188, 152, 158, 190, 188, 203, 184, 99, 60, 177, 44, 114, 60, 48, 53, 167, 61, 234, 241, 41, 188, 163, 53, 181, 62, 178, 218, 20, 189, 249, 229, 47, 62, 92, 28, 96, 189, 26, 217, 130, 188, 98, 92, 95, 190, 200, 111, 111, 189, 121, 253, 159, 60, 35, 245, 133, 190, 151, 100, 140, 61, 234, 250, 234, 62, 245, 113, 217, 61, 115, 30, 196, 190, 4, 147, 139, 190, 134, 154, 1, 190, 128, 51, 164, 62, 180, 208, 48, 62, 85, 231, 63, 62, 162, 94, 9, 61, 218, 130, 172, 62, 79, 91, 252, 59, 48, 79, 137, 62, 45, 255, 172, 62, 129, 49, 111, 189, 3, 82, 248, 61, 13, 241, 144, 62, 241, 184, 155, 190, 113, 87, 139, 190, 169, 49, 160, 61, 48, 131, 69, 190, 105, 120, 201, 189, 139, 233, 172, 61, 28, 142, 156, 62, 88, 143, 108, 61, 30, 62, 56, 62, 212, 143, 255, 189, 214, 29, 130, 190, 63, 167, 112, 190, 23, 0, 234, 189, 65, 177, 166, 60, 82, 159, 152, 189, 234, 252, 158, 62, 191, 226, 108, 190, 120, 241, 160, 61, 55, 144, 44, 60, 74, 166, 39, 61, 183, 184, 157, 61, 115, 208, 66, 62, 211, 149, 20, 62, 126, 55, 210, 189, 119, 168, 2, 62, 153, 98, 115, 62, 126, 222, 230, 61, 2, 203, 195, 189, 227, 20, 52, 189, 215, 203, 183, 61, 232, 8, 145, 189, 110, 144, 74, 62, 207, 18, 14, 188, 112, 120, 88, 189, 224, 122, 28, 62, 43, 124, 111, 62, 49, 33, 226, 60, 59, 48, 19, 62, 56, 71, 170, 62, 132, 182, 31, 189, 217, 45, 24, 62, 186, 172, 197, 189, 208, 155, 139, 60, 126, 219, 183, 189, 91, 99, 125, 61, 39, 106, 241, 189, 197, 59, 41, 190, 42, 219, 78, 61, 241, 39, 171, 62, 136, 157, 227, 61, 152, 164, 47, 190, 171, 77, 12, 189, 118, 157, 56, 62, 183, 202, 23, 191, 213, 182, 164, 62, 45, 188, 102, 190, 99, 169, 229, 190, 46, 157, 37, 61, 101, 109, 77, 190, 55, 101, 230, 190, 61, 246, 125, 62, 86, 43, 134, 189, 5, 157, 168, 189, 153, 7, 131, 61, 4, 122, 68, 190, 101, 249, 5, 61, 109, 50, 246, 61, 70, 239, 240, 190, 74, 152, 226, 189, 165, 21, 221, 190, 232, 199, 211, 62, 56, 204, 104, 190, 210, 121, 71, 191, 195, 214, 47, 190, 69, 122, 129, 190, 201, 129, 149, 189, 78, 12, 62, 190, 41, 41, 100, 190, 43, 133, 180, 189, 175, 80, 244, 61, 70, 80, 167, 61, 28, 201, 105, 189, 112, 191, 101, 61, 158, 144, 47, 62, 2, 247, 140, 62, 121, 243, 173, 190, 76, 87, 255, 190, 29, 169, 61, 62, 207, 15, 25, 62, 107, 81, 43, 190, 80, 24, 193, 190, 222, 190, 230, 61, 176, 111, 216, 189, 39, 167, 189, 189, 121, 15, 58, 62, 43, 110, 129, 190, 174, 168, 133, 62, 29, 123, 181, 61, 27, 223, 83, 190, 61, 24, 101, 62, 167, 84, 77, 190, 147, 221, 107, 62, 188, 13, 103, 190, 106, 5, 43, 190, 71, 209, 92, 62, 216, 187, 207, 62, 63, 165, 147, 61, 182, 19, 238, 62, 222, 185, 194, 61, 225, 86, 109, 189, 57, 197, 186, 62, 245, 231, 162, 190, 134, 229, 89, 62, 251, 27, 8, 188, 117, 172, 18, 60, 117, 180, 105, 188, 229, 195, 109, 62, 153, 206, 155, 62, 238, 80, 240, 189, 96, 109, 115, 61, 174, 61, 136, 190, 99, 91, 196, 189, 164, 126, 186, 188, 76, 183, 79, 191, 206, 4, 105, 190, 181, 4, 70, 190, 185, 133, 11, 190, 93, 122, 153, 62, 110, 252, 52, 62, 215, 5, 32, 62, 191, 112, 134, 189, 74, 123, 26, 190, 143, 55, 251, 189, 219, 127, 61, 189, 120, 35, 16, 62, 81, 211, 24, 62, 139, 83, 239, 189, 55, 32, 209, 189, 222, 51, 143, 62, 2, 141, 93, 189, 81, 183, 192, 190, 61, 52, 144, 62, 221, 166, 146, 189, 178, 61, 64, 62, 113, 251, 164, 62, 176, 155, 232, 62, 60, 241, 193, 189, 55, 45, 154, 190, 199, 48, 21, 61, 233, 108, 146, 61, 175, 226, 53, 63, 103, 11, 138, 62, 143, 174, 84, 61, 4, 162, 46, 62, 203, 206, 169, 62, 24, 62, 64, 189, 240, 11, 180, 62, 128, 149, 161, 62, 6, 115, 92, 190, 165, 249, 176, 62, 25, 42, 197, 190, 78, 168, 87, 190, 161, 117, 194, 62, 233, 15, 91, 62, 160, 75, 98, 62, 73, 161, 85, 62, 72, 32, 230, 189, 180, 74, 82, 62, 3, 76, 117, 189, 249, 206, 197, 190, 155, 42, 13, 190, 93, 105, 253, 190, 13, 160, 7, 190, 32, 74, 100, 61, 5, 163, 17, 191, 109, 18, 246, 62, 201, 24, 139, 61, 9, 229, 200, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 133, 195, 91, 188, 46, 179, 212, 189, 225, 175, 231, 61, 30, 130, 176, 62, 61, 189, 94, 62, 23, 112, 44, 191, 161, 4, 165, 188, 131, 108, 65, 62, 130, 53, 151, 61, 92, 76, 238, 190, 6, 237, 31, 61, 19, 38, 245, 62, 85, 144, 19, 187, 230, 106, 172, 62, 195, 48, 11, 191, 139, 240, 18, 190, 198, 102, 145, 190, 213, 37, 148, 190, 119, 143, 1, 191, 41, 43, 62, 191, 244, 157, 123, 62, 167, 56, 65, 190, 174, 251, 153, 189, 0, 7, 202, 61, 22, 10, 222, 189, 237, 56, 204, 61, 156, 148, 166, 190, 8, 39, 190, 62, 177, 202, 237, 189, 15, 124, 70, 62, 150, 243, 131, 62, 254, 244, 11, 62, 242, 53, 88, 62, 177, 147, 135, 61, 235, 168, 45, 62, 6, 77, 14, 61, 63, 20, 118, 62, 127, 196, 206, 189, 170, 36, 212, 190, 223, 168, 7, 62, 98, 175, 196, 188, 190, 36, 17, 191, 189, 107, 248, 189, 27, 29, 138, 62, 2, 5, 193, 61, 151, 109, 223, 61, 179, 113, 100, 190, 240, 208, 139, 190, 121, 232, 175, 188, 203, 164, 151, 61, 5, 80, 163, 190, 165, 119, 74, 190, 155, 6, 27, 63, 220, 131, 74, 190, 231, 52, 121, 189, 11, 158, 184, 61, 93, 220, 218, 188, 74, 77, 38, 190, 5, 247, 98, 190, 244, 47, 248, 60, 214, 62, 191, 190, 235, 203, 202, 61, 102, 128, 5, 63, 66, 74, 214, 62, 253, 183, 132, 62, 49, 129, 209, 189, 210, 236, 125, 189, 42, 181, 159, 62, 192, 104, 185, 62, 90, 213, 244, 189, 52, 81, 28, 188, 195, 76, 15, 62, 183, 96, 141, 61, 66, 208, 184, 190, 209, 134, 135, 62, 200, 98, 140, 62, 68, 201, 4, 62, 236, 219, 145, 62, 91, 82, 135, 62, 19, 116, 52, 62, 217, 12, 230, 189, 114, 92, 177, 190, 186, 251, 242, 189, 120, 7, 212, 189, 246, 88, 100, 62, 107, 147, 1, 61, 201, 86, 100, 190, 40, 153, 42, 62, 195, 118, 58, 190, 166, 52, 158, 62, 28, 173, 38, 190, 156, 134, 223, 187, 91, 218, 149, 61, 204, 64, 14, 62, 39, 43, 61, 61, 253, 158, 145, 62, 69, 215, 33, 190, 182, 55, 5, 190, 248, 172, 109, 62, 200, 178, 161, 62, 182, 221, 7, 62, 52, 246, 251, 189, 29, 193, 10, 191, 170, 223, 62, 190, 251, 226, 125, 61, 46, 134, 247, 190, 18, 174, 94, 190, 20, 8, 137, 62, 111, 108, 188, 61, 169, 86, 186, 62, 10, 10, 230, 189, 218, 72, 168, 190, 154, 136, 157, 60, 251, 35, 156, 60, 216, 116, 117, 190, 232, 2, 101, 190, 53, 39, 174, 62, 180, 208, 50, 190, 208, 32, 228, 188, 250, 114, 111, 60, 94, 39, 159, 62, 207, 74, 152, 190, 35, 52, 163, 190, 239, 226, 111, 62, 24, 40, 125, 190, 184, 196, 247, 61, 51, 163, 187, 62, 108, 159, 196, 62, 69, 15, 129, 61, 164, 226, 25, 62, 103, 5, 233, 188, 212, 154, 214, 188, 233, 154, 198, 189, 244, 83, 69, 62, 135, 255, 3, 190, 51, 10, 193, 189, 29, 128, 75, 190, 99, 220, 22, 188, 124, 48, 169, 61, 164, 131, 197, 61, 234, 239, 28, 62, 105, 95, 228, 60, 108, 43, 20, 61, 178, 20, 98, 189, 150, 158, 85, 189, 59, 20, 54, 62, 77, 76, 201, 61, 88, 188, 36, 62, 54, 219, 62, 188, 143, 116, 203, 189, 135, 82, 32, 61, 151, 205, 59, 62, 225, 133, 17, 62, 184, 95, 158, 187, 28, 60, 226, 61, 41, 86, 25, 62, 102, 26, 10, 60, 6, 110, 131, 59, 75, 254, 155, 62, 98, 212, 130, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 128, 157, 176, 190, 22, 135, 159, 190, 209, 39, 132, 62, 29, 29, 32, 190, 244, 6, 179, 190, 70, 232, 87, 61, 159, 21, 113, 62, 162, 0, 106, 62, 130, 193, 186, 190, 163, 109, 82, 62, 61, 11, 198, 190, 188, 181, 179, 189, 226, 30, 150, 190, 95, 197, 46, 62, 187, 216, 129, 62, 55, 77, 245, 61, 71, 168, 233, 61, 197, 244, 153, 59, 62, 211, 104, 62, 250, 86, 215, 187, 116, 115, 211, 62, 133, 207, 68, 62, 225, 18, 28, 61, 224, 180, 109, 62, 246, 166, 57, 191, 14, 54, 198, 61, 54, 126, 179, 62, 226, 9, 164, 190, 168, 57, 195, 61, 248, 11, 164, 190, 23, 141, 6, 63, 69, 114, 174, 186, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 126, 220, 251, 61, 26, 180, 198, 190, 243, 51, 231, 190, 5, 145, 213, 61, 89, 238, 8, 63, 26, 170, 25, 61, 185, 63, 255, 61, 108, 103, 198, 60, 119, 77, 21, 190, 105, 55, 33, 190, 229, 94, 219, 62, 29, 163, 65, 62, 121, 247, 17, 191, 243, 103, 185, 62, 167, 255, 143, 61, 100, 148, 67, 190, 69, 50, 161, 61, 114, 32, 119, 61, 226, 139, 70, 61, 13, 79, 78, 189, 101, 119, 174, 189, 62, 156, 114, 62, 254, 185, 50, 62, 33, 40, 10, 190, 143, 98, 145, 61, 222, 51, 117, 190, 108, 65, 140, 189, 237, 205, 70, 190, 137, 82, 236, 189, 167, 230, 133, 62, 21, 75, 115, 62, 7, 76, 188, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 19, 191, 171, 189, 76, 188, 200, 190, 235, 76, 120, 191, 119, 220, 121, 61, 154, 96, 134, 188, 32, 254, 117, 188, 51, 183, 159, 61, 222, 158, 28, 62, 125, 173, 202, 189, 198, 44, 97, 61, 53, 38, 214, 190, 95, 192, 37, 62, 28, 1, 220, 190, 186, 41, 182, 190, 204, 120, 75, 189, 254, 201, 189, 61, 233, 227, 185, 61, 243, 125, 0, 61, 36, 93, 175, 62, 188, 218, 71, 62, 41, 138, 2, 190, 148, 10, 230, 61, 144, 127, 217, 61, 12, 157, 160, 190, 251, 157, 184, 187, 73, 150, 90, 190, 206, 222, 136, 62, 20, 105, 44, 190, 10, 142, 157, 190, 203, 239, 177, 190, 193, 74, 47, 62, 49, 88, 90, 188, 79, 40, 2, 62, 147, 16, 90, 191, 176, 209, 158, 191, 233, 100, 159, 190, 74, 24, 8, 61, 3, 38, 133, 62, 10, 18, 193, 62, 129, 210, 4, 62, 212, 183, 62, 190, 98, 94, 155, 62, 21, 45, 181, 189, 204, 49, 1, 62, 159, 251, 12, 191, 83, 167, 88, 190, 105, 255, 168, 190, 136, 10, 78, 190, 203, 183, 93, 62, 50, 58, 62, 62, 87, 184, 94, 188, 42, 154, 167, 62, 191, 153, 199, 190, 131, 209, 57, 61, 136, 131, 219, 61, 48, 229, 164, 59, 31, 123, 145, 61, 7, 147, 21, 190, 69, 134, 162, 62, 103, 29, 66, 189, 114, 243, 2, 190, 226, 123, 240, 190, 86, 66, 187, 62, 210, 119, 25, 190, 210, 228, 188, 62, 249, 188, 136, 60, 4, 161, 38, 62, 97, 211, 96, 190, 35, 78, 131, 190, 120, 186, 4, 62, 148, 245, 174, 189, 182, 31, 69, 190, 25, 112, 13, 191, 18, 164, 189, 61, 91, 81, 241, 190, 121, 27, 67, 61, 76, 82, 43, 62, 247, 54, 250, 60, 52, 250, 14, 62, 213, 178, 63, 60, 83, 235, 13, 61, 132, 178, 230, 60, 32, 228, 1, 190, 214, 79, 47, 62, 165, 124, 111, 62, 201, 194, 179, 61, 108, 123, 40, 62, 30, 130, 32, 62, 195, 132, 229, 60, 147, 243, 122, 61, 142, 79, 45, 59, 100, 17, 2, 62, 211, 30, 52, 62, 62, 181, 57, 190, 7, 119, 16, 63, 104, 221, 77, 62, 215, 105, 20, 190, 109, 153, 119, 61, 80, 166, 20, 190, 222, 20, 148, 61, 63, 253, 151, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 204, 34, 46, 62, 93, 137, 146, 188, 179, 111, 244, 189, 194, 128, 173, 61, 179, 190, 204, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 102, 195, 228, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 195, 78, 98, 189, 149, 191, 46, 190, 84, 22, 10, 190, 163, 0, 36, 190, 213, 163, 44, 62, 181, 3, 52, 190, 8, 14, 87, 61, 248, 7, 40, 189, 73, 161, 33, 59, 211, 187, 56, 190, 62, 153, 180, 190, 147, 84, 11, 190, 160, 142, 194, 187, 207, 135, 181, 59, 50, 169, 54, 60, 227, 148, 239, 190, 233, 243, 158, 189, 133, 147, 254, 189, 252, 120, 131, 190, 160, 2, 158, 190, 53, 24, 50, 190, 101, 234, 133, 61, 210, 18, 81, 62, 199, 50, 180, 62, 149, 70, 254, 190, 181, 225, 48, 191, 71, 28, 67, 190, 43, 108, 199, 189, 186, 47, 55, 62, 55, 18, 176, 61, 156, 180, 41, 188, 174, 111, 169, 190, 0, 218, 5, 191, 90, 41, 193, 188, 104, 150, 213, 60, 202, 46, 7, 191, 15, 245, 206, 62, 181, 127, 167, 189, 165, 211, 165, 62, 88, 94, 169, 61, 25, 19, 86, 190, 235, 23, 13, 190, 134, 13, 137, 61, 91, 203, 109, 61, 220, 79, 68, 62, 6, 19, 151, 61, 254, 232, 91, 60, 195, 142, 129, 62, 101, 58, 96, 62, 196, 252, 44, 62, 125, 205, 160, 61, 16, 140, 23, 62, 4, 41, 53, 187, 100, 254, 192, 60, 70, 1, 219, 190, 47, 35, 69, 190, 78, 79, 159, 62, 38, 78, 5, 61, 85, 107, 209, 62, 231, 21, 196, 189, 161, 210, 41, 62, 156, 73, 175, 62, 140, 106, 182, 61, 95, 37, 210, 190, 238, 80, 224, 61, 212, 81, 146, 190, 79, 74, 49, 190, 52, 138, 47, 62, 130, 218, 12, 191, 112, 84, 149, 62, 179, 118, 56, 62, 64, 211, 54, 62, 229, 133, 29, 62, 160, 209, 171, 59, 230, 137, 141, 61, 124, 249, 237, 188, 201, 254, 170, 190, 36, 141, 230, 61, 75, 199, 246, 187, 212, 126, 135, 190, 65, 203, 52, 61, 162, 196, 130, 59, 38, 95, 215, 61, 211, 100, 45, 61, 147, 112, 74, 61, 206, 240, 6, 190, 127, 250, 101, 62, 14, 72, 60, 62, 106, 189, 235, 189, 186, 163, 192, 61, 63, 101, 23, 190, 111, 126, 38, 62, 26, 5, 46, 190, 202, 173, 98, 190, 44, 89, 120, 62, 175, 254, 175, 62, 50, 8, 93, 61, 3, 215, 106, 62, 121, 40, 163, 60, 102, 15, 134, 189, 20, 239, 135, 62, 80, 50, 48, 61, 59, 239, 48, 61, 197, 196, 34, 190, 228, 199, 166, 62, 113, 131, 9, 62, 70, 131, 167, 62, 26, 64, 127, 62, 216, 108, 128, 62, 220, 242, 11, 191, 252, 209, 8, 190, 58, 147, 30, 59, 166, 56, 127, 189, 70, 171, 169, 190, 114, 53, 6, 61, 196, 94, 240, 61, 54, 6, 43, 60, 147, 142, 221, 62, 108, 240, 51, 190, 120, 139, 7, 189, 214, 109, 224, 61, 238, 130, 132, 190, 93, 237, 240, 190, 88, 134, 21, 191, 252, 127, 227, 62, 152, 254, 95, 61, 99, 147, 116, 190, 9, 96, 168, 62, 126, 7, 176, 188, 108, 190, 228, 189, 126, 194, 223, 61, 21, 227, 8, 189, 119, 17, 139, 190, 180, 1, 137, 60, 191, 231, 59, 190, 10, 170, 148, 61, 108, 240, 154, 61, 242, 169, 147, 62, 91, 182, 123, 62, 251, 238, 9, 62, 126, 223, 161, 189, 86, 30, 39, 190, 123, 189, 69, 190, 161, 84, 134, 59, 49, 48, 70, 60, 84, 101, 80, 190, 43, 225, 92, 190, 148, 96, 224, 189, 197, 117, 117, 62, 95, 11, 153, 189, 240, 144, 68, 62, 219, 68, 192, 189, 121, 5, 117, 190, 98, 55, 154, 61, 229, 247, 1, 191, 197, 214, 158, 189, 20, 158, 110, 59, 143, 179, 146, 188, 153, 90, 222, 189, 18, 206, 186, 62, 142, 204, 239, 62, 96, 174, 15, 62, 22, 21, 203, 61, 140, 206, 149, 62, 205, 154, 62, 190, 196, 32, 53, 190, 51, 113, 72, 62, 244, 168, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 140, 86, 61, 20, 161, 77, 62, 78, 72, 198, 188, 163, 67, 170, 190, 112, 144, 134, 62, 41, 63, 176, 60, 195, 80, 165, 61, 38, 248, 170, 190, 68, 224, 189, 187, 237, 242, 40, 62, 118, 255, 32, 189, 8, 161, 143, 61, 174, 4, 60, 61, 211, 243, 125, 61, 74, 40, 75, 189, 198, 58, 213, 61, 188, 4, 119, 62, 188, 1, 242, 61, 225, 116, 161, 189, 206, 73, 243, 60, 71, 25, 229, 188, 21, 146, 22, 62, 103, 154, 5, 61, 29, 243, 5, 62, 240, 24, 163, 61, 217, 61, 69, 61, 11, 19, 104, 189, 38, 132, 66, 190, 41, 127, 90, 189, 154, 55, 17, 62, 141, 79, 7, 189, 103, 105, 29, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 56, 135, 62, 186, 25, 112, 63, 238, 133, 95, 62, 109, 137, 22, 191, 121, 95, 68, 188, 159, 101, 219, 62, 247, 58, 94, 187, 159, 252, 51, 63, 221, 215, 214, 62, 56, 62, 66, 190, 209, 116, 49, 191, 144, 157, 238, 61, 40, 126, 188, 190, 23, 205, 144, 190, 9, 207, 132, 190, 59, 96, 157, 190, 66, 78, 118, 61, 166, 224, 158, 189, 46, 133, 187, 61, 244, 146, 129, 62, 147, 183, 140, 189, 107, 42, 95, 190, 252, 253, 149, 61, 218, 70, 198, 190, 245, 2, 19, 191, 149, 69, 235, 61, 16, 129, 219, 189, 223, 73, 0, 191, 13, 60, 110, 190, 164, 23, 8, 62, 24, 92, 144, 190, 63, 145, 170, 62, 198, 98, 246, 61, 143, 21, 242, 61, 223, 240, 168, 61, 125, 32, 213, 62, 100, 218, 135, 190, 170, 41, 110, 62, 152, 135, 85, 190, 248, 130, 31, 61, 92, 248, 138, 61, 57, 175, 243, 189, 42, 198, 141, 62, 71, 78, 140, 189, 6, 172, 194, 62, 55, 10, 157, 190, 70, 107, 164, 62, 175, 239, 63, 190, 104, 84, 95, 190, 30, 239, 86, 188, 25, 228, 249, 61, 127, 182, 151, 189, 98, 107, 166, 189, 69, 10, 117, 190, 159, 3, 130, 189, 157, 40, 178, 188, 57, 116, 112, 60, 52, 162, 83, 190, 226, 206, 48, 62, 77, 92, 175, 62, 57, 246, 134, 189, 57, 131, 18, 60, 82, 199, 47, 62, 81, 6, 96, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 148, 128, 62, 176, 222, 110, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 80, 148, 191, 251, 172, 135, 61, 32, 211, 6, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {171, 114, 131, 191, 206, 37, 79, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}