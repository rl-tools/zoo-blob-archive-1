// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 18, 225, 190, 24, 229, 251, 190, 80, 85, 167, 62, 101, 136, 137, 190, 51, 33, 10, 63, 102, 31, 36, 63, 111, 186, 192, 62, 205, 37, 34, 63, 6, 188, 161, 62, 116, 79, 7, 190, 244, 52, 8, 63, 63, 63, 168, 189, 230, 210, 6, 63, 132, 99, 197, 61, 238, 225, 55, 62, 236, 88, 184, 189, 112, 196, 12, 191, 149, 203, 135, 190, 103, 160, 162, 190, 245, 138, 77, 191, 158, 9, 186, 188, 39, 246, 199, 61, 54, 100, 111, 63, 17, 203, 204, 190, 22, 67, 226, 188, 118, 225, 23, 63, 151, 136, 165, 62, 96, 5, 69, 190, 4, 81, 64, 191, 101, 197, 6, 190, 172, 196, 41, 63, 228, 166, 25, 63, 179, 251, 17, 63, 208, 158, 75, 191, 55, 231, 82, 62, 162, 131, 10, 191, 218, 235, 190, 190, 224, 35, 177, 63, 132, 130, 118, 62, 122, 255, 74, 63, 22, 193, 0, 63, 135, 107, 124, 189, 66, 199, 10, 63, 11, 202, 62, 61, 187, 3, 18, 191, 207, 177, 192, 62, 73, 78, 2, 190, 27, 132, 41, 191, 166, 67, 50, 191, 150, 219, 77, 62, 216, 104, 13, 191, 133, 225, 24, 191, 13, 164, 136, 190, 92, 198, 162, 187, 247, 16, 61, 191, 178, 66, 233, 189, 198, 199, 90, 191, 146, 72, 231, 189, 102, 133, 82, 191, 120, 178, 166, 190, 6, 255, 122, 62, 15, 166, 75, 191, 40, 251, 54, 62, 185, 205, 128, 189, 251, 249, 249, 62, 93, 242, 65, 191, 35, 41, 97, 190, 129, 114, 130, 191, 26, 116, 212, 189, 226, 91, 19, 190, 253, 107, 27, 63, 18, 8, 171, 190, 64, 89, 50, 191, 2, 24, 5, 63, 196, 220, 160, 61, 79, 149, 128, 190, 138, 172, 25, 59, 137, 30, 237, 190, 144, 172, 207, 189, 79, 35, 51, 191, 27, 183, 24, 186, 1, 119, 199, 189, 58, 229, 43, 63, 91, 0, 208, 189, 134, 114, 179, 62, 58, 169, 133, 191, 186, 87, 15, 191, 173, 179, 107, 63, 168, 203, 26, 61, 167, 165, 230, 62, 188, 33, 114, 63, 206, 151, 240, 190, 163, 146, 133, 61, 48, 17, 205, 62, 104, 241, 242, 62, 205, 170, 1, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 65, 41, 191, 199, 227, 126, 59, 162, 255, 6, 63, 209, 71, 153, 62, 207, 3, 185, 190, 203, 101, 192, 62, 47, 71, 101, 62, 27, 43, 136, 61, 17, 125, 130, 190, 44, 62, 115, 62, 59, 91, 13, 191, 253, 185, 13, 63, 99, 84, 21, 62, 180, 67, 18, 190, 109, 148, 63, 62, 207, 41, 38, 190, 95, 251, 186, 190, 160, 178, 232, 189, 76, 81, 162, 190, 94, 158, 16, 63, 146, 228, 232, 190, 170, 111, 101, 62, 143, 145, 23, 63, 182, 157, 16, 190, 32, 244, 210, 189, 210, 195, 244, 190, 177, 19, 149, 62, 192, 178, 2, 63, 225, 84, 184, 190, 11, 200, 66, 191, 30, 2, 24, 190, 17, 81, 57, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 23, 158, 62, 205, 55, 43, 61, 6, 242, 164, 62, 60, 178, 189, 190, 235, 59, 65, 191, 230, 121, 148, 61, 112, 80, 31, 62, 24, 51, 147, 190, 195, 121, 137, 190, 0, 56, 209, 61, 88, 6, 22, 190, 53, 104, 146, 61, 108, 15, 129, 62, 20, 178, 20, 60, 10, 15, 213, 61, 65, 132, 131, 62, 18, 230, 113, 190, 254, 60, 78, 62, 248, 225, 218, 61, 146, 83, 143, 60, 10, 128, 120, 190, 136, 50, 128, 190, 44, 188, 249, 60, 113, 200, 156, 62, 44, 200, 50, 62, 38, 155, 4, 62, 126, 230, 89, 61, 116, 88, 3, 189, 7, 234, 182, 62, 169, 133, 212, 189, 17, 188, 79, 61, 100, 127, 85, 190, 198, 106, 21, 62, 31, 241, 214, 189, 26, 225, 67, 62, 46, 124, 210, 190, 180, 211, 166, 190, 230, 106, 137, 61, 172, 239, 194, 61, 56, 96, 114, 191, 91, 48, 215, 190, 250, 162, 48, 61, 91, 224, 48, 190, 70, 233, 151, 190, 124, 99, 14, 62, 134, 80, 46, 190, 144, 73, 49, 62, 253, 17, 19, 190, 99, 113, 188, 191, 190, 102, 6, 61, 211, 58, 107, 191, 54, 203, 163, 189, 243, 12, 18, 190, 137, 232, 65, 191, 201, 83, 176, 62, 238, 81, 254, 61, 54, 193, 83, 62, 67, 253, 16, 62, 199, 20, 93, 62, 29, 188, 100, 190, 100, 229, 90, 62, 240, 119, 127, 59, 217, 54, 90, 62, 238, 212, 82, 190, 11, 253, 26, 62, 186, 131, 17, 62, 124, 59, 32, 62, 3, 89, 78, 190, 19, 111, 194, 189, 210, 8, 128, 61, 14, 149, 46, 61, 117, 180, 207, 190, 15, 231, 228, 59, 9, 130, 79, 62, 186, 200, 175, 61, 102, 191, 4, 190, 8, 109, 206, 61, 155, 170, 178, 190, 218, 122, 17, 62, 138, 192, 36, 62, 68, 191, 37, 190, 231, 222, 141, 61, 157, 144, 22, 190, 83, 61, 120, 62, 126, 132, 140, 190, 1, 236, 55, 190, 226, 222, 83, 62, 69, 187, 133, 61, 184, 9, 156, 60, 131, 130, 161, 61, 249, 62, 57, 61, 164, 24, 14, 62, 153, 115, 226, 61, 84, 193, 98, 190, 11, 185, 83, 62, 122, 248, 60, 190, 186, 149, 124, 190, 239, 111, 118, 190, 168, 38, 223, 59, 129, 79, 173, 190, 47, 182, 178, 62, 85, 83, 108, 59, 237, 181, 187, 190, 207, 219, 245, 189, 47, 20, 87, 61, 42, 1, 205, 189, 149, 42, 131, 62, 197, 138, 185, 59, 63, 4, 2, 190, 52, 59, 254, 62, 15, 30, 185, 189, 29, 64, 219, 61, 249, 44, 145, 189, 82, 73, 158, 190, 214, 19, 19, 62, 7, 83, 122, 59, 26, 157, 214, 190, 132, 192, 208, 59, 198, 201, 135, 190, 209, 232, 5, 190, 121, 27, 207, 190, 11, 124, 10, 189, 233, 47, 9, 191, 214, 134, 132, 189, 183, 20, 254, 189, 249, 84, 137, 62, 123, 62, 0, 60, 4, 242, 176, 62, 124, 188, 235, 188, 26, 161, 98, 60, 141, 26, 147, 61, 31, 71, 20, 62, 19, 253, 128, 60, 168, 204, 237, 61, 55, 124, 210, 61, 54, 29, 48, 62, 35, 162, 47, 62, 76, 190, 154, 61, 117, 52, 224, 187, 20, 171, 60, 62, 54, 169, 234, 188, 244, 119, 187, 62, 121, 144, 69, 189, 186, 218, 163, 188, 73, 246, 37, 59, 44, 42, 208, 188, 72, 66, 162, 61, 118, 71, 63, 188, 107, 69, 183, 62, 135, 224, 170, 188, 151, 35, 30, 62, 0, 49, 85, 189, 64, 255, 143, 60, 238, 197, 93, 190, 94, 132, 34, 189, 106, 162, 46, 61, 15, 147, 135, 190, 119, 223, 206, 188, 217, 134, 179, 62, 7, 103, 150, 61, 118, 40, 215, 190, 1, 166, 136, 190, 100, 102, 165, 189, 110, 188, 180, 62, 84, 174, 66, 62, 235, 155, 211, 61, 200, 45, 147, 189, 241, 226, 186, 62, 118, 157, 200, 60, 40, 157, 32, 62, 60, 198, 179, 62, 216, 175, 157, 189, 107, 7, 14, 62, 218, 246, 202, 62, 89, 48, 103, 190, 164, 33, 88, 190, 198, 27, 250, 60, 247, 241, 67, 190, 130, 82, 17, 190, 188, 138, 27, 187, 66, 71, 1, 62, 248, 96, 134, 61, 218, 96, 250, 61, 64, 19, 202, 189, 10, 70, 61, 190, 87, 245, 97, 190, 169, 145, 63, 190, 174, 112, 124, 61, 119, 67, 30, 189, 73, 240, 153, 62, 156, 71, 142, 190, 173, 230, 9, 62, 167, 35, 107, 61, 1, 109, 156, 61, 56, 14, 178, 61, 211, 208, 103, 62, 205, 180, 68, 61, 116, 253, 196, 189, 227, 119, 63, 62, 217, 115, 138, 62, 68, 173, 64, 62, 183, 196, 131, 189, 109, 138, 25, 189, 24, 185, 106, 61, 174, 254, 39, 189, 23, 76, 65, 62, 225, 208, 199, 188, 21, 84, 62, 189, 206, 134, 16, 62, 90, 144, 75, 62, 15, 102, 205, 60, 113, 96, 16, 62, 182, 236, 175, 62, 251, 94, 186, 188, 203, 0, 10, 62, 127, 235, 189, 189, 230, 41, 66, 61, 176, 160, 174, 189, 207, 237, 176, 61, 172, 195, 189, 189, 189, 182, 40, 190, 106, 114, 24, 189, 4, 60, 106, 62, 2, 130, 164, 61, 85, 181, 25, 190, 50, 247, 40, 189, 70, 245, 50, 62, 3, 89, 40, 191, 199, 102, 66, 62, 89, 121, 66, 190, 189, 98, 216, 190, 46, 157, 37, 61, 188, 21, 131, 190, 28, 92, 179, 190, 168, 5, 70, 62, 86, 43, 134, 189, 215, 130, 220, 189, 79, 19, 219, 189, 248, 7, 68, 190, 101, 249, 5, 61, 109, 50, 246, 61, 46, 152, 25, 190, 74, 152, 226, 189, 230, 74, 194, 59, 43, 87, 193, 62, 56, 204, 104, 190, 46, 242, 238, 190, 195, 214, 47, 190, 31, 227, 22, 62, 201, 129, 149, 189, 52, 214, 71, 189, 127, 81, 156, 190, 43, 133, 180, 189, 30, 70, 35, 61, 38, 83, 162, 61, 51, 6, 81, 189, 24, 14, 138, 61, 195, 194, 30, 62, 222, 192, 131, 62, 134, 52, 188, 190, 129, 236, 170, 190, 175, 236, 46, 62, 110, 202, 49, 62, 74, 187, 83, 190, 128, 171, 196, 190, 187, 76, 173, 61, 191, 8, 145, 189, 169, 230, 162, 189, 237, 93, 223, 61, 134, 88, 150, 190, 235, 28, 130, 62, 171, 128, 175, 61, 177, 56, 73, 190, 19, 121, 133, 62, 246, 121, 76, 190, 100, 142, 84, 62, 15, 186, 73, 190, 131, 202, 62, 190, 6, 240, 90, 62, 154, 149, 204, 62, 252, 248, 221, 60, 75, 84, 248, 62, 199, 22, 233, 61, 84, 226, 160, 189, 145, 4, 194, 62, 133, 216, 130, 190, 115, 200, 118, 62, 166, 18, 47, 189, 255, 32, 18, 61, 99, 121, 64, 60, 28, 173, 81, 62, 42, 200, 158, 62, 105, 220, 103, 190, 122, 45, 147, 61, 56, 205, 17, 191, 75, 180, 173, 189, 164, 158, 32, 60, 40, 255, 80, 191, 209, 29, 125, 190, 229, 231, 87, 190, 175, 52, 173, 189, 5, 161, 103, 62, 210, 214, 44, 62, 196, 195, 59, 62, 212, 93, 79, 189, 72, 172, 28, 190, 132, 44, 215, 189, 123, 163, 107, 189, 96, 158, 181, 60, 246, 224, 36, 62, 246, 205, 158, 190, 229, 214, 207, 189, 234, 79, 167, 62, 130, 156, 14, 189, 210, 72, 32, 191, 221, 66, 144, 62, 244, 45, 236, 188, 189, 54, 242, 61, 53, 43, 109, 62, 145, 246, 205, 62, 134, 73, 234, 189, 146, 146, 151, 190, 37, 223, 49, 60, 62, 122, 164, 60, 72, 37, 32, 63, 249, 204, 147, 62, 58, 196, 126, 60, 247, 241, 23, 62, 76, 23, 161, 62, 156, 145, 204, 188, 71, 124, 164, 62, 150, 102, 151, 62, 96, 118, 46, 190, 8, 226, 136, 62, 132, 33, 209, 190, 8, 233, 112, 190, 221, 45, 197, 62, 39, 70, 66, 62, 113, 172, 99, 62, 152, 88, 114, 62, 217, 220, 231, 189, 217, 138, 73, 62, 44, 191, 88, 189, 106, 71, 207, 190, 22, 199, 226, 189, 195, 205, 4, 191, 86, 66, 23, 190, 105, 40, 124, 59, 86, 32, 25, 191, 118, 38, 220, 62, 235, 234, 17, 62, 107, 80, 153, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 169, 89, 80, 60, 8, 103, 152, 189, 172, 150, 188, 61, 99, 38, 96, 62, 250, 162, 13, 62, 209, 4, 172, 190, 180, 53, 145, 189, 94, 146, 134, 60, 226, 130, 202, 61, 216, 114, 44, 190, 227, 206, 1, 61, 60, 13, 239, 62, 113, 71, 120, 61, 208, 214, 95, 62, 82, 8, 16, 191, 84, 61, 43, 190, 26, 236, 53, 190, 253, 12, 1, 190, 247, 135, 185, 190, 56, 57, 207, 190, 186, 69, 30, 62, 253, 19, 180, 190, 84, 96, 138, 188, 20, 51, 42, 189, 241, 236, 229, 188, 52, 23, 137, 61, 143, 59, 180, 190, 190, 216, 134, 62, 135, 124, 198, 188, 144, 166, 48, 62, 84, 164, 100, 62, 250, 76, 141, 61, 91, 6, 98, 62, 164, 54, 190, 61, 193, 212, 31, 62, 205, 54, 241, 60, 29, 87, 5, 62, 144, 134, 123, 188, 108, 11, 228, 190, 107, 75, 4, 62, 29, 231, 60, 60, 74, 148, 186, 190, 214, 84, 8, 190, 63, 121, 72, 62, 37, 239, 30, 62, 7, 175, 89, 189, 22, 122, 179, 190, 125, 174, 157, 190, 0, 250, 18, 61, 176, 18, 138, 61, 155, 234, 105, 190, 21, 244, 182, 189, 122, 221, 21, 63, 113, 155, 79, 190, 63, 27, 2, 190, 219, 69, 179, 61, 158, 8, 35, 61, 22, 63, 67, 187, 177, 22, 138, 190, 184, 171, 89, 60, 221, 233, 110, 189, 190, 68, 42, 61, 27, 59, 241, 62, 134, 35, 171, 62, 175, 65, 133, 62, 193, 96, 213, 189, 41, 233, 201, 189, 47, 23, 146, 62, 197, 170, 155, 62, 217, 55, 212, 189, 65, 114, 173, 189, 95, 248, 9, 62, 142, 253, 117, 61, 12, 90, 182, 190, 34, 175, 118, 62, 98, 109, 148, 62, 14, 111, 39, 62, 31, 233, 119, 62, 187, 106, 130, 62, 218, 34, 42, 62, 190, 125, 190, 189, 121, 132, 144, 190, 206, 27, 233, 189, 48, 139, 168, 189, 141, 66, 29, 62, 119, 251, 213, 60, 47, 131, 113, 190, 69, 182, 42, 62, 71, 254, 211, 189, 54, 157, 155, 62, 106, 88, 107, 190, 175, 141, 246, 188, 136, 176, 241, 60, 7, 62, 252, 61, 137, 180, 117, 60, 58, 36, 136, 62, 247, 108, 221, 189, 81, 170, 194, 189, 242, 112, 75, 62, 18, 12, 149, 62, 114, 73, 213, 60, 36, 143, 153, 189, 214, 57, 73, 191, 6, 178, 98, 190, 93, 80, 211, 61, 85, 108, 223, 190, 148, 64, 103, 190, 99, 102, 86, 62, 82, 92, 13, 62, 246, 137, 77, 62, 254, 88, 108, 190, 200, 202, 192, 190, 119, 47, 169, 61, 148, 85, 216, 60, 18, 35, 31, 190, 123, 142, 111, 190, 189, 24, 127, 62, 39, 17, 80, 190, 92, 201, 108, 190, 197, 30, 197, 188, 120, 40, 186, 62, 213, 143, 79, 190, 90, 202, 2, 191, 80, 224, 79, 62, 151, 237, 105, 189, 35, 11, 136, 61, 188, 60, 151, 62, 178, 65, 146, 62, 87, 222, 199, 61, 208, 163, 38, 62, 35, 221, 135, 188, 237, 170, 78, 60, 203, 7, 21, 190, 44, 75, 60, 62, 140, 184, 145, 189, 60, 228, 134, 189, 177, 1, 23, 190, 189, 14, 187, 186, 81, 174, 196, 61, 154, 119, 138, 61, 28, 194, 11, 62, 207, 126, 148, 61, 250, 30, 43, 61, 133, 237, 23, 189, 175, 7, 146, 189, 28, 75, 28, 62, 94, 158, 179, 61, 156, 143, 16, 62, 204, 237, 171, 59, 34, 38, 178, 189, 246, 164, 1, 61, 220, 55, 67, 62, 193, 170, 7, 62, 163, 167, 58, 60, 0, 168, 16, 62, 32, 121, 59, 62, 183, 173, 209, 60, 21, 251, 126, 189, 231, 179, 96, 62, 54, 240, 127, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 146, 48, 158, 190, 135, 219, 77, 190, 245, 126, 195, 62, 33, 96, 249, 189, 47, 251, 91, 190, 223, 62, 65, 60, 187, 74, 53, 62, 48, 163, 129, 62, 13, 216, 24, 189, 166, 197, 23, 62, 233, 39, 106, 190, 20, 52, 189, 189, 181, 45, 19, 190, 86, 184, 109, 62, 139, 13, 142, 62, 206, 25, 13, 62, 30, 109, 223, 61, 8, 21, 11, 60, 218, 4, 99, 62, 7, 81, 101, 189, 141, 95, 177, 62, 244, 255, 83, 62, 103, 60, 162, 188, 13, 246, 136, 62, 106, 103, 51, 191, 107, 112, 240, 61, 96, 103, 149, 62, 76, 202, 141, 190, 161, 70, 243, 61, 242, 202, 106, 190, 3, 73, 255, 62, 34, 235, 57, 61, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 196, 180, 53, 61, 129, 97, 194, 190, 218, 101, 240, 190, 232, 226, 222, 61, 56, 11, 11, 63, 171, 93, 129, 61, 47, 127, 22, 62, 228, 15, 13, 61, 0, 139, 228, 189, 17, 31, 243, 189, 96, 99, 230, 62, 151, 119, 69, 62, 253, 137, 238, 190, 80, 4, 178, 62, 14, 8, 80, 61, 65, 41, 75, 190, 35, 207, 179, 61, 97, 86, 208, 60, 160, 151, 110, 61, 98, 140, 178, 188, 218, 240, 156, 189, 7, 22, 126, 62, 167, 26, 62, 62, 193, 8, 14, 190, 125, 39, 40, 61, 51, 140, 125, 190, 220, 177, 152, 189, 20, 88, 75, 190, 86, 149, 6, 190, 104, 203, 135, 62, 253, 162, 104, 62, 19, 103, 179, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 187, 65, 132, 190, 93, 106, 227, 190, 101, 21, 60, 191, 120, 201, 17, 62, 40, 200, 115, 59, 158, 29, 155, 188, 160, 44, 6, 61, 184, 28, 92, 62, 41, 172, 202, 189, 159, 36, 208, 60, 72, 88, 219, 190, 237, 120, 64, 62, 123, 64, 152, 190, 50, 187, 94, 190, 43, 240, 22, 189, 72, 150, 198, 61, 235, 109, 236, 61, 229, 144, 239, 188, 199, 113, 188, 62, 175, 200, 61, 62, 22, 213, 191, 189, 180, 56, 28, 62, 241, 184, 146, 61, 191, 8, 136, 190, 120, 145, 233, 188, 167, 59, 90, 190, 100, 219, 88, 62, 62, 171, 199, 189, 128, 39, 166, 190, 54, 164, 85, 190, 97, 107, 105, 61, 58, 147, 140, 61, 143, 48, 147, 189, 32, 125, 99, 191, 215, 180, 135, 191, 59, 187, 147, 190, 8, 125, 185, 61, 33, 74, 116, 62, 23, 184, 169, 62, 98, 210, 11, 62, 195, 9, 65, 190, 80, 139, 135, 62, 3, 231, 39, 190, 158, 6, 249, 61, 10, 235, 252, 190, 104, 70, 199, 190, 20, 135, 189, 190, 56, 32, 123, 190, 149, 61, 87, 62, 67, 208, 253, 61, 4, 86, 144, 188, 59, 157, 154, 62, 106, 221, 198, 190, 78, 113, 42, 61, 139, 66, 137, 61, 62, 199, 188, 58, 128, 248, 175, 60, 198, 52, 56, 190, 105, 90, 135, 62, 66, 198, 13, 189, 16, 236, 52, 190, 112, 1, 104, 190, 89, 139, 135, 62, 41, 107, 15, 190, 38, 53, 146, 62, 166, 232, 76, 189, 36, 163, 58, 62, 144, 86, 137, 190, 115, 186, 239, 189, 246, 210, 236, 61, 90, 205, 237, 189, 170, 210, 51, 190, 167, 112, 159, 190, 142, 35, 177, 61, 98, 223, 150, 190, 86, 145, 251, 60, 231, 11, 70, 61, 151, 57, 11, 62, 15, 52, 36, 62, 211, 146, 13, 61, 89, 101, 157, 60, 207, 29, 54, 189, 249, 133, 12, 190, 253, 207, 22, 62, 10, 117, 29, 62, 50, 13, 195, 61, 209, 247, 3, 62, 211, 56, 41, 62, 221, 146, 36, 190, 121, 212, 166, 61, 6, 45, 77, 189, 32, 183, 194, 61, 178, 125, 78, 62, 192, 209, 244, 189, 186, 181, 246, 62, 247, 28, 92, 62, 215, 105, 20, 190, 109, 153, 119, 61, 80, 166, 20, 190, 222, 20, 148, 61, 63, 253, 151, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 204, 34, 46, 62, 93, 137, 146, 188, 179, 111, 244, 189, 194, 128, 173, 61, 179, 190, 204, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 102, 195, 228, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 195, 78, 98, 189, 149, 191, 46, 190, 84, 22, 10, 190, 163, 0, 36, 190, 213, 163, 44, 62, 181, 3, 52, 190, 8, 14, 87, 61, 248, 7, 40, 189, 167, 48, 206, 188, 179, 82, 163, 189, 209, 26, 185, 190, 129, 238, 1, 190, 139, 40, 215, 58, 134, 251, 56, 61, 109, 252, 151, 61, 195, 135, 224, 190, 130, 13, 6, 189, 14, 199, 159, 189, 202, 233, 135, 189, 229, 201, 102, 190, 53, 24, 50, 190, 27, 239, 61, 189, 162, 239, 101, 62, 139, 240, 200, 62, 211, 213, 217, 190, 197, 233, 37, 191, 166, 1, 222, 189, 20, 39, 116, 189, 33, 231, 28, 62, 124, 123, 7, 62, 159, 191, 224, 60, 186, 10, 191, 190, 0, 218, 5, 191, 50, 230, 31, 61, 16, 153, 108, 61, 20, 196, 11, 191, 254, 114, 228, 62, 180, 40, 196, 61, 166, 247, 107, 62, 164, 150, 114, 61, 67, 12, 68, 190, 68, 65, 219, 189, 166, 231, 140, 61, 142, 122, 97, 61, 248, 181, 243, 61, 51, 157, 168, 61, 92, 129, 98, 188, 196, 57, 134, 62, 180, 22, 118, 62, 5, 167, 56, 62, 49, 226, 149, 61, 77, 73, 15, 62, 252, 51, 93, 61, 96, 108, 15, 189, 189, 112, 230, 190, 226, 91, 85, 190, 199, 239, 162, 62, 217, 40, 14, 61, 149, 223, 211, 62, 23, 13, 167, 189, 78, 234, 42, 62, 180, 172, 177, 62, 236, 209, 161, 61, 180, 123, 208, 190, 1, 75, 41, 62, 142, 224, 152, 190, 239, 173, 70, 190, 235, 21, 40, 62, 31, 239, 20, 191, 74, 163, 139, 62, 234, 17, 85, 62, 82, 5, 40, 62, 58, 141, 39, 62, 86, 46, 229, 56, 61, 38, 108, 61, 51, 43, 18, 189, 67, 134, 137, 190, 39, 204, 201, 61, 59, 24, 210, 60, 139, 238, 155, 190, 191, 242, 45, 61, 106, 188, 113, 188, 144, 110, 248, 61, 149, 128, 72, 61, 213, 119, 124, 60, 205, 110, 92, 190, 33, 215, 84, 62, 206, 237, 52, 62, 145, 26, 227, 189, 237, 195, 248, 61, 112, 114, 26, 190, 192, 161, 17, 62, 196, 225, 22, 190, 136, 166, 121, 190, 213, 165, 129, 62, 18, 18, 170, 62, 153, 201, 125, 61, 20, 142, 122, 62, 251, 225, 93, 61, 154, 71, 150, 189, 72, 154, 141, 62, 203, 197, 128, 61, 109, 200, 216, 60, 253, 78, 71, 190, 2, 102, 165, 62, 248, 124, 21, 62, 24, 183, 148, 62, 168, 183, 61, 62, 66, 5, 52, 62, 234, 225, 91, 190, 9, 65, 11, 190, 184, 57, 201, 189, 30, 126, 122, 189, 134, 58, 17, 189, 149, 89, 96, 60, 46, 45, 51, 62, 199, 2, 64, 61, 18, 146, 91, 62, 237, 43, 146, 190, 190, 0, 149, 189, 97, 131, 166, 62, 213, 132, 36, 190, 254, 37, 132, 190, 222, 177, 92, 190, 228, 155, 209, 62, 49, 83, 118, 188, 20, 115, 13, 190, 191, 42, 141, 62, 207, 64, 28, 61, 237, 17, 13, 62, 164, 216, 232, 61, 179, 207, 199, 189, 130, 22, 61, 190, 57, 182, 233, 59, 225, 30, 57, 190, 160, 235, 255, 188, 25, 226, 187, 61, 218, 6, 143, 62, 39, 153, 130, 62, 80, 40, 32, 62, 164, 37, 33, 189, 9, 195, 234, 189, 73, 18, 150, 189, 92, 88, 249, 59, 250, 243, 189, 60, 157, 100, 26, 190, 198, 246, 75, 190, 155, 25, 238, 189, 33, 82, 62, 62, 79, 106, 177, 60, 239, 28, 122, 62, 152, 191, 123, 189, 127, 51, 209, 190, 29, 155, 159, 61, 241, 102, 28, 191, 70, 37, 99, 189, 11, 224, 245, 60, 83, 103, 12, 189, 91, 251, 52, 189, 150, 177, 169, 62, 75, 64, 208, 62, 29, 99, 183, 60, 13, 37, 67, 62, 233, 9, 162, 62, 96, 87, 219, 186, 222, 83, 64, 190, 118, 70, 51, 62, 246, 98, 211, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 5, 76, 61, 255, 206, 64, 62, 57, 108, 135, 187, 35, 201, 177, 190, 127, 238, 127, 62, 58, 41, 54, 61, 201, 108, 144, 61, 170, 136, 93, 190, 48, 161, 169, 188, 142, 40, 210, 61, 150, 51, 32, 189, 8, 161, 143, 61, 212, 223, 26, 61, 103, 117, 36, 61, 83, 1, 102, 189, 159, 171, 12, 61, 130, 95, 111, 62, 188, 1, 242, 61, 225, 116, 161, 189, 205, 82, 27, 61, 71, 25, 229, 188, 200, 159, 15, 62, 103, 154, 5, 61, 220, 101, 6, 62, 131, 227, 66, 61, 75, 126, 169, 187, 11, 19, 104, 189, 67, 200, 57, 190, 48, 205, 57, 189, 141, 130, 13, 62, 233, 184, 13, 189, 249, 123, 54, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 204, 146, 62, 70, 93, 77, 63, 48, 154, 69, 62, 16, 184, 210, 190, 153, 70, 170, 188, 114, 240, 223, 62, 28, 181, 245, 187, 73, 205, 184, 62, 77, 120, 217, 62, 17, 224, 43, 190, 22, 56, 59, 191, 144, 157, 238, 61, 155, 161, 111, 190, 8, 166, 131, 190, 229, 182, 132, 190, 117, 78, 137, 190, 7, 151, 125, 61, 166, 224, 158, 189, 46, 133, 187, 61, 235, 104, 124, 62, 147, 183, 140, 189, 67, 77, 107, 190, 252, 253, 149, 61, 51, 216, 202, 190, 188, 125, 14, 191, 44, 6, 227, 61, 16, 129, 219, 189, 141, 113, 241, 190, 172, 141, 158, 190, 106, 119, 60, 62, 165, 108, 96, 190, 39, 241, 173, 62, 159, 56, 74, 61, 58, 166, 170, 61, 199, 41, 0, 61, 104, 247, 68, 62, 198, 245, 128, 190, 146, 52, 141, 62, 180, 167, 96, 190, 230, 131, 88, 61, 44, 214, 87, 61, 46, 171, 119, 190, 18, 86, 153, 62, 71, 78, 140, 189, 2, 181, 54, 62, 105, 134, 155, 190, 235, 66, 151, 62, 161, 173, 118, 190, 106, 174, 80, 190, 30, 239, 86, 188, 25, 228, 249, 61, 79, 168, 103, 188, 98, 107, 166, 189, 27, 101, 149, 190, 159, 3, 130, 189, 154, 216, 148, 189, 222, 132, 66, 190, 31, 90, 202, 189, 226, 206, 48, 62, 166, 20, 187, 62, 175, 47, 236, 188, 174, 89, 6, 60, 19, 10, 151, 61, 132, 47, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 2, 129, 62, 16, 72, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {113, 174, 143, 189, 179, 195, 36, 191, 75, 177, 36, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 2, 149, 63, 32, 144, 78, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}