// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 132, 71, 191, 156, 67, 167, 190, 156, 33, 126, 62, 98, 187, 118, 189, 69, 247, 103, 63, 107, 21, 14, 63, 43, 92, 15, 63, 237, 104, 86, 63, 60, 83, 47, 62, 28, 170, 168, 189, 47, 110, 181, 62, 30, 59, 247, 189, 182, 121, 32, 63, 235, 161, 109, 62, 145, 69, 47, 62, 109, 210, 22, 190, 223, 131, 95, 191, 91, 204, 103, 190, 4, 74, 236, 189, 67, 148, 120, 191, 80, 121, 0, 60, 57, 149, 184, 61, 37, 215, 92, 63, 39, 8, 186, 190, 57, 63, 69, 62, 131, 40, 58, 63, 122, 60, 156, 62, 125, 249, 254, 188, 170, 20, 134, 191, 115, 233, 129, 190, 132, 140, 29, 63, 72, 153, 73, 63, 139, 135, 11, 63, 164, 128, 90, 191, 76, 170, 51, 61, 171, 5, 252, 190, 26, 222, 136, 190, 49, 37, 192, 63, 27, 11, 161, 62, 219, 212, 75, 63, 191, 69, 63, 63, 141, 168, 19, 190, 170, 103, 17, 63, 24, 221, 158, 190, 201, 195, 254, 190, 237, 95, 252, 62, 227, 80, 122, 190, 29, 10, 26, 191, 15, 18, 81, 191, 87, 91, 22, 62, 200, 122, 7, 191, 191, 231, 73, 191, 244, 176, 26, 190, 67, 206, 32, 189, 63, 36, 104, 191, 235, 30, 194, 189, 40, 48, 73, 191, 21, 179, 14, 190, 99, 23, 160, 191, 123, 243, 171, 190, 50, 235, 202, 62, 15, 206, 20, 191, 66, 41, 129, 62, 199, 24, 167, 189, 136, 118, 3, 63, 222, 151, 53, 191, 222, 242, 64, 190, 112, 105, 148, 191, 80, 241, 3, 190, 146, 114, 101, 189, 246, 241, 13, 63, 135, 147, 179, 190, 129, 183, 48, 191, 207, 146, 37, 63, 168, 148, 23, 62, 142, 187, 207, 190, 75, 13, 237, 189, 241, 229, 234, 190, 9, 17, 24, 190, 241, 111, 61, 191, 215, 15, 14, 59, 24, 233, 47, 59, 0, 11, 29, 63, 186, 55, 124, 190, 226, 236, 57, 62, 35, 240, 155, 191, 97, 231, 13, 191, 38, 36, 133, 63, 248, 175, 6, 62, 80, 144, 195, 62, 113, 96, 96, 63, 155, 164, 1, 191, 3, 210, 81, 62, 225, 19, 246, 62, 151, 52, 219, 62, 98, 10, 79, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 40, 54, 191, 183, 126, 179, 190, 61, 89, 203, 62, 224, 24, 146, 62, 240, 162, 233, 190, 205, 230, 199, 62, 221, 156, 118, 62, 49, 91, 178, 61, 148, 111, 140, 190, 177, 204, 132, 62, 216, 28, 45, 191, 216, 81, 36, 63, 106, 215, 21, 190, 119, 85, 249, 189, 254, 36, 118, 62, 182, 102, 136, 190, 60, 189, 153, 190, 237, 31, 100, 189, 250, 228, 86, 190, 122, 200, 5, 63, 84, 146, 239, 190, 88, 25, 128, 61, 14, 137, 21, 63, 229, 161, 9, 190, 122, 220, 105, 190, 56, 147, 157, 190, 127, 26, 144, 62, 232, 8, 237, 62, 44, 203, 63, 190, 96, 248, 88, 191, 181, 34, 158, 189, 163, 140, 48, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 58, 176, 62, 163, 28, 154, 61, 109, 43, 130, 62, 243, 214, 161, 190, 226, 106, 139, 191, 88, 236, 51, 61, 131, 34, 7, 62, 69, 135, 102, 190, 177, 136, 148, 190, 217, 18, 175, 61, 11, 221, 87, 190, 157, 5, 140, 61, 202, 226, 127, 62, 49, 211, 156, 189, 240, 225, 216, 61, 209, 235, 149, 62, 254, 62, 132, 190, 206, 27, 1, 62, 36, 193, 202, 61, 61, 29, 212, 187, 166, 126, 220, 189, 155, 102, 83, 190, 54, 178, 157, 188, 209, 197, 166, 62, 43, 182, 135, 62, 43, 245, 207, 61, 21, 70, 211, 60, 139, 121, 52, 60, 110, 61, 178, 62, 193, 203, 35, 190, 142, 218, 5, 61, 60, 27, 64, 190, 163, 56, 30, 62, 213, 133, 27, 190, 27, 106, 213, 61, 101, 89, 6, 191, 2, 60, 9, 191, 19, 123, 137, 61, 225, 58, 97, 62, 234, 174, 92, 191, 169, 189, 18, 191, 117, 5, 166, 61, 37, 210, 133, 190, 226, 141, 146, 190, 100, 37, 120, 62, 141, 48, 168, 190, 224, 192, 223, 189, 214, 36, 161, 190, 246, 100, 200, 191, 39, 190, 21, 62, 186, 157, 99, 191, 245, 206, 29, 189, 211, 126, 24, 189, 138, 211, 57, 191, 116, 153, 216, 62, 238, 81, 254, 61, 20, 134, 139, 62, 191, 108, 163, 62, 86, 32, 153, 62, 64, 247, 205, 190, 9, 55, 28, 59, 152, 120, 124, 189, 135, 182, 64, 62, 140, 93, 188, 190, 97, 26, 248, 61, 120, 224, 238, 61, 33, 90, 45, 62, 91, 232, 121, 190, 85, 126, 110, 190, 194, 160, 239, 61, 81, 172, 36, 61, 255, 194, 164, 190, 78, 118, 227, 188, 203, 251, 159, 62, 103, 206, 191, 60, 67, 128, 83, 190, 212, 61, 253, 61, 185, 171, 224, 190, 141, 41, 103, 62, 207, 219, 146, 62, 196, 96, 89, 190, 205, 33, 238, 189, 172, 227, 30, 190, 33, 247, 164, 62, 171, 216, 130, 190, 123, 32, 3, 190, 193, 43, 95, 62, 220, 221, 165, 60, 140, 192, 196, 188, 189, 243, 127, 61, 130, 48, 38, 61, 102, 126, 17, 62, 105, 93, 50, 62, 126, 194, 139, 190, 186, 91, 127, 62, 18, 56, 60, 190, 153, 224, 176, 190, 27, 211, 182, 190, 125, 59, 163, 61, 205, 93, 226, 189, 121, 199, 99, 62, 32, 112, 138, 190, 255, 11, 12, 191, 108, 56, 177, 186, 242, 145, 214, 61, 53, 81, 42, 191, 146, 100, 145, 62, 105, 199, 152, 61, 13, 21, 34, 188, 82, 42, 20, 63, 247, 246, 40, 190, 58, 103, 134, 59, 203, 121, 94, 189, 155, 84, 9, 190, 186, 116, 38, 62, 2, 28, 141, 190, 70, 251, 252, 190, 199, 37, 88, 61, 150, 211, 16, 191, 205, 103, 122, 60, 64, 183, 200, 190, 190, 57, 55, 189, 39, 234, 40, 191, 180, 136, 0, 62, 183, 119, 124, 190, 58, 113, 254, 61, 9, 243, 68, 190, 6, 195, 208, 62, 39, 44, 64, 190, 208, 3, 133, 189, 99, 251, 164, 61, 229, 111, 189, 61, 194, 169, 75, 62, 35, 50, 217, 61, 249, 104, 122, 61, 216, 255, 15, 62, 119, 217, 151, 61, 9, 228, 85, 60, 53, 37, 55, 185, 157, 114, 101, 62, 141, 177, 236, 189, 193, 33, 1, 63, 251, 82, 21, 189, 117, 61, 86, 60, 120, 56, 67, 60, 121, 78, 76, 61, 195, 211, 168, 61, 235, 86, 147, 188, 103, 184, 144, 62, 252, 66, 208, 188, 195, 59, 72, 62, 175, 24, 86, 189, 169, 107, 122, 190, 250, 17, 78, 190, 125, 213, 74, 189, 64, 236, 60, 187, 109, 252, 124, 190, 240, 87, 235, 61, 169, 216, 204, 62, 191, 83, 161, 61, 86, 168, 253, 190, 38, 193, 140, 190, 118, 4, 35, 190, 197, 0, 181, 62, 246, 78, 65, 62, 65, 88, 84, 62, 136, 235, 169, 58, 82, 255, 182, 62, 250, 141, 236, 60, 208, 112, 141, 62, 147, 200, 172, 62, 205, 194, 231, 59, 74, 51, 1, 62, 229, 179, 97, 62, 68, 45, 227, 190, 34, 132, 229, 190, 111, 57, 43, 62, 50, 50, 248, 189, 141, 126, 247, 188, 173, 181, 210, 61, 112, 161, 153, 62, 242, 221, 166, 61, 66, 22, 34, 62, 223, 251, 182, 189, 81, 54, 75, 190, 81, 85, 70, 190, 243, 13, 28, 190, 248, 156, 29, 61, 34, 176, 217, 190, 229, 102, 163, 62, 178, 130, 99, 190, 65, 74, 14, 61, 188, 145, 165, 189, 61, 73, 191, 59, 166, 137, 189, 61, 11, 145, 46, 62, 184, 231, 82, 62, 15, 72, 226, 189, 191, 239, 20, 62, 229, 129, 112, 62, 71, 182, 175, 61, 197, 122, 4, 190, 142, 74, 72, 189, 162, 235, 190, 61, 73, 71, 215, 189, 11, 245, 160, 62, 78, 138, 176, 188, 187, 218, 162, 188, 21, 229, 20, 62, 123, 74, 157, 62, 98, 99, 191, 60, 113, 101, 6, 62, 169, 145, 125, 62, 209, 193, 1, 189, 243, 144, 49, 62, 206, 63, 201, 189, 1, 242, 32, 190, 188, 143, 159, 189, 127, 3, 171, 61, 128, 136, 17, 190, 202, 190, 30, 190, 54, 118, 158, 61, 42, 132, 134, 62, 161, 251, 159, 61, 7, 175, 0, 190, 33, 17, 103, 187, 150, 109, 73, 62, 192, 85, 191, 190, 6, 20, 194, 62, 229, 189, 207, 190, 167, 102, 198, 190, 56, 10, 155, 62, 56, 10, 32, 190, 176, 113, 19, 191, 118, 26, 145, 62, 38, 208, 53, 188, 23, 147, 71, 189, 59, 8, 33, 62, 66, 111, 64, 62, 10, 82, 204, 61, 191, 192, 14, 62, 121, 52, 248, 190, 144, 175, 153, 189, 195, 57, 92, 191, 92, 80, 234, 62, 40, 14, 171, 189, 62, 56, 129, 191, 9, 166, 36, 190, 171, 244, 155, 190, 135, 84, 70, 189, 151, 248, 42, 190, 168, 36, 242, 60, 189, 106, 229, 189, 114, 23, 37, 62, 118, 15, 186, 61, 168, 51, 119, 189, 143, 244, 33, 60, 243, 17, 17, 62, 130, 43, 123, 62, 62, 128, 156, 190, 173, 180, 14, 191, 64, 217, 75, 62, 114, 213, 48, 62, 205, 205, 15, 190, 36, 242, 223, 190, 229, 106, 16, 62, 2, 93, 52, 190, 218, 45, 164, 189, 179, 50, 54, 62, 120, 158, 148, 190, 172, 159, 135, 62, 133, 120, 242, 61, 132, 35, 96, 190, 177, 133, 56, 62, 220, 211, 83, 190, 111, 69, 128, 62, 238, 93, 29, 190, 194, 228, 20, 190, 78, 8, 112, 62, 35, 45, 210, 62, 42, 199, 5, 62, 108, 167, 237, 62, 82, 32, 228, 61, 124, 196, 208, 188, 155, 118, 192, 62, 168, 159, 161, 190, 72, 51, 133, 62, 24, 87, 172, 59, 241, 178, 126, 61, 28, 127, 251, 188, 184, 64, 107, 62, 77, 37, 164, 62, 183, 255, 112, 189, 244, 238, 170, 188, 191, 127, 59, 190, 240, 162, 70, 189, 229, 130, 98, 189, 5, 72, 120, 191, 204, 35, 55, 190, 113, 58, 42, 190, 115, 57, 148, 190, 193, 49, 167, 62, 160, 249, 27, 62, 247, 46, 20, 62, 68, 111, 41, 60, 135, 243, 102, 190, 79, 223, 96, 189, 38, 153, 12, 190, 84, 8, 141, 62, 187, 53, 68, 62, 79, 9, 219, 189, 210, 33, 56, 189, 239, 161, 115, 188, 148, 92, 56, 188, 124, 107, 155, 190, 248, 255, 144, 62, 28, 210, 48, 190, 224, 71, 129, 62, 93, 53, 180, 62, 241, 98, 233, 62, 39, 23, 183, 188, 194, 224, 156, 190, 92, 44, 110, 61, 109, 61, 204, 61, 117, 49, 48, 63, 72, 249, 115, 62, 60, 187, 82, 61, 213, 39, 50, 62, 65, 51, 167, 62, 33, 180, 196, 189, 213, 178, 190, 62, 126, 174, 166, 62, 106, 225, 136, 190, 202, 52, 182, 62, 75, 76, 199, 190, 82, 70, 123, 190, 238, 185, 200, 62, 8, 161, 111, 62, 165, 38, 102, 62, 32, 134, 47, 62, 218, 137, 180, 189, 110, 182, 73, 62, 88, 181, 163, 189, 69, 67, 198, 190, 13, 170, 65, 190, 183, 169, 1, 191, 118, 34, 4, 190, 106, 63, 166, 61, 254, 219, 24, 191, 133, 34, 245, 62, 31, 53, 121, 61, 75, 123, 240, 61, 58, 205, 72, 189, 192, 94, 40, 190, 151, 207, 204, 189, 216, 1, 89, 59, 137, 61, 20, 62, 65, 103, 148, 189, 101, 95, 231, 61, 236, 211, 41, 190, 152, 147, 133, 60, 239, 231, 61, 61, 226, 181, 130, 59, 71, 222, 7, 190, 233, 23, 32, 190, 55, 182, 147, 188, 41, 21, 99, 189, 52, 151, 44, 190, 181, 46, 154, 189, 196, 143, 128, 61, 209, 131, 47, 61, 64, 255, 60, 187, 97, 147, 4, 189, 171, 251, 254, 61, 40, 128, 28, 190, 117, 149, 189, 189, 221, 153, 36, 62, 230, 215, 223, 61, 142, 196, 170, 189, 117, 95, 148, 61, 25, 110, 30, 188, 172, 236, 233, 61, 182, 198, 170, 189, 184, 7, 94, 59, 70, 233, 227, 61, 15, 45, 27, 190, 193, 52, 112, 61, 190, 29, 142, 62, 225, 167, 119, 62, 170, 41, 80, 191, 185, 149, 204, 188, 144, 223, 133, 62, 27, 106, 121, 60, 169, 205, 39, 191, 58, 87, 102, 61, 76, 81, 129, 62, 228, 168, 141, 190, 130, 135, 210, 62, 217, 72, 251, 190, 216, 253, 159, 189, 210, 33, 153, 190, 132, 82, 3, 191, 164, 78, 253, 190, 103, 111, 96, 191, 156, 156, 172, 62, 58, 17, 204, 189, 128, 167, 4, 190, 129, 17, 57, 61, 107, 153, 198, 190, 48, 137, 9, 61, 79, 78, 149, 190, 29, 87, 156, 62, 62, 145, 27, 190, 199, 242, 88, 62, 186, 69, 155, 62, 189, 106, 50, 62, 32, 192, 59, 62, 244, 98, 136, 61, 6, 186, 80, 62, 207, 42, 32, 60, 153, 46, 144, 62, 7, 43, 243, 189, 193, 69, 235, 190, 220, 158, 52, 62, 219, 153, 152, 188, 83, 192, 31, 191, 16, 65, 192, 189, 233, 223, 48, 62, 132, 101, 128, 61, 90, 140, 67, 62, 1, 248, 82, 190, 12, 173, 103, 190, 206, 15, 133, 61, 71, 128, 150, 59, 62, 127, 76, 190, 13, 80, 94, 190, 45, 13, 22, 63, 17, 250, 16, 190, 135, 92, 201, 188, 61, 198, 172, 61, 93, 51, 0, 190, 60, 45, 90, 190, 243, 190, 104, 190, 210, 11, 147, 187, 88, 2, 227, 190, 178, 30, 221, 61, 113, 233, 7, 63, 214, 172, 230, 62, 147, 50, 132, 62, 251, 246, 70, 190, 171, 170, 5, 190, 93, 225, 152, 62, 192, 234, 173, 62, 137, 74, 5, 190, 73, 216, 74, 58, 44, 50, 251, 61, 202, 167, 20, 189, 240, 164, 197, 190, 164, 246, 77, 62, 224, 227, 147, 62, 194, 37, 21, 189, 77, 217, 115, 62, 176, 227, 119, 62, 226, 169, 2, 62, 147, 149, 205, 189, 83, 196, 174, 190, 92, 123, 219, 189, 188, 58, 247, 189, 74, 200, 97, 62, 225, 38, 194, 60, 221, 252, 102, 190, 89, 130, 34, 62, 107, 71, 141, 190, 145, 230, 156, 62, 185, 132, 26, 190, 27, 108, 11, 189, 6, 65, 13, 61, 85, 112, 230, 61, 83, 91, 14, 61, 109, 68, 139, 62, 217, 140, 232, 189, 114, 33, 207, 189, 93, 245, 135, 62, 40, 223, 146, 62, 125, 57, 39, 62, 218, 13, 77, 190, 117, 159, 10, 191, 46, 159, 47, 190, 255, 187, 188, 61, 52, 70, 25, 191, 39, 67, 41, 190, 101, 135, 73, 62, 168, 138, 176, 61, 231, 194, 210, 62, 0, 65, 2, 190, 65, 93, 176, 190, 166, 38, 225, 61, 233, 217, 170, 60, 182, 26, 18, 190, 231, 222, 151, 190, 56, 236, 196, 62, 255, 111, 48, 190, 176, 149, 168, 188, 73, 121, 192, 59, 255, 195, 139, 62, 76, 142, 190, 190, 77, 139, 150, 190, 207, 108, 69, 62, 112, 4, 223, 190, 198, 51, 15, 62, 197, 81, 189, 62, 216, 141, 201, 62, 31, 37, 175, 188, 29, 70, 220, 61, 175, 101, 34, 189, 38, 185, 35, 189, 62, 149, 14, 189, 253, 206, 68, 62, 255, 185, 238, 189, 243, 201, 178, 189, 70, 210, 122, 190, 1, 58, 177, 188, 127, 173, 90, 61, 119, 93, 199, 61, 154, 204, 232, 61, 4, 191, 240, 61, 101, 30, 14, 61, 47, 10, 171, 56, 219, 42, 150, 189, 193, 109, 99, 62, 128, 205, 176, 61, 140, 4, 36, 62, 102, 164, 130, 189, 28, 44, 167, 189, 154, 237, 94, 61, 192, 82, 52, 62, 175, 197, 19, 60, 114, 93, 207, 59, 223, 39, 255, 61, 141, 93, 12, 62, 117, 81, 168, 60, 202, 186, 39, 61, 83, 46, 143, 62, 13, 82, 119, 62, 47, 164, 4, 62, 113, 20, 3, 190, 62, 93, 86, 189, 52, 129, 61, 61, 171, 71, 0, 62, 112, 253, 115, 61, 0, 218, 216, 189, 12, 118, 43, 190, 122, 91, 161, 61, 84, 89, 3, 62, 42, 2, 2, 190, 61, 147, 20, 190, 104, 139, 243, 189, 136, 24, 176, 188, 170, 0, 65, 61, 18, 11, 143, 188, 176, 65, 191, 188, 4, 76, 99, 61, 146, 239, 79, 188, 1, 151, 228, 189, 214, 70, 178, 60, 210, 234, 44, 190, 227, 2, 8, 190, 69, 75, 234, 188, 100, 46, 22, 62, 112, 101, 23, 189, 7, 185, 217, 188, 197, 107, 25, 190, 116, 223, 213, 189, 238, 98, 241, 189, 186, 105, 59, 60, 240, 120, 166, 189, 135, 245, 61, 189, 40, 254, 156, 61, 45, 205, 60, 190, 98, 25, 50, 190, 19, 39, 13, 61, 48, 113, 23, 190, 124, 75, 84, 190, 248, 53, 225, 61, 89, 141, 87, 190, 249, 199, 164, 61, 90, 139, 159, 189, 249, 206, 106, 59, 82, 176, 170, 59, 125, 153, 218, 61, 113, 8, 186, 189, 197, 105, 52, 60, 2, 58, 221, 189, 93, 166, 57, 190, 111, 106, 130, 188, 68, 246, 53, 190, 154, 88, 50, 187, 142, 96, 44, 189, 127, 231, 219, 61, 111, 245, 21, 62, 236, 101, 61, 190, 221, 239, 91, 189, 162, 189, 216, 61, 60, 30, 183, 189, 180, 155, 211, 186, 184, 82, 32, 62, 0, 77, 132, 189, 104, 238, 136, 189, 246, 149, 253, 190, 79, 163, 230, 190, 193, 191, 87, 62, 183, 100, 13, 190, 101, 41, 188, 190, 215, 25, 169, 61, 0, 237, 109, 62, 241, 78, 122, 62, 123, 153, 22, 191, 78, 59, 122, 62, 130, 108, 239, 190, 71, 125, 163, 189, 227, 140, 209, 190, 91, 84, 64, 62, 189, 95, 136, 62, 106, 83, 40, 62, 97, 11, 248, 61, 150, 76, 197, 188, 213, 149, 117, 62, 34, 222, 225, 60, 33, 41, 229, 62, 200, 148, 92, 62, 131, 141, 124, 61, 229, 187, 100, 62, 142, 26, 23, 191, 32, 244, 202, 61, 191, 216, 180, 62, 156, 158, 162, 190, 211, 162, 220, 61, 176, 112, 165, 190, 206, 172, 13, 63, 30, 175, 5, 60, 178, 13, 31, 62, 148, 53, 163, 189, 103, 153, 5, 190, 169, 61, 238, 189, 227, 176, 30, 62, 86, 108, 235, 188, 41, 59, 238, 189, 21, 28, 7, 190, 178, 81, 206, 61, 180, 219, 199, 187, 254, 55, 241, 189, 213, 58, 247, 188, 87, 109, 48, 190, 48, 143, 72, 188, 220, 4, 3, 190, 247, 117, 53, 62, 148, 84, 195, 188, 71, 34, 247, 61, 239, 89, 49, 190, 113, 124, 174, 189, 60, 63, 254, 61, 165, 151, 49, 62, 51, 137, 57, 190, 152, 187, 88, 61, 187, 112, 188, 61, 89, 221, 161, 189, 45, 161, 28, 190, 96, 184, 186, 189, 185, 247, 14, 61, 128, 215, 106, 61, 192, 216, 44, 190, 206, 29, 53, 62, 118, 64, 89, 62, 9, 113, 178, 190, 31, 78, 234, 190, 109, 195, 216, 61, 141, 118, 248, 62, 169, 132, 177, 60, 170, 177, 80, 62, 52, 238, 178, 59, 29, 224, 75, 190, 232, 32, 76, 190, 126, 116, 214, 62, 217, 139, 100, 62, 237, 206, 29, 191, 170, 28, 154, 62, 12, 68, 57, 61, 198, 26, 98, 190, 25, 106, 174, 61, 127, 165, 69, 62, 167, 151, 60, 61, 138, 115, 151, 189, 78, 10, 137, 189, 207, 160, 96, 62, 155, 212, 80, 62, 181, 254, 2, 190, 29, 248, 14, 62, 254, 12, 122, 190, 228, 129, 129, 60, 240, 95, 66, 190, 43, 13, 4, 190, 125, 158, 129, 62, 243, 188, 68, 62, 182, 29, 163, 62, 34, 220, 26, 190, 122, 214, 8, 189, 149, 80, 35, 189, 210, 143, 16, 190, 51, 246, 8, 188, 151, 87, 12, 190, 175, 195, 65, 189, 232, 229, 150, 61, 102, 87, 21, 190, 205, 45, 4, 61, 68, 145, 116, 60, 255, 128, 16, 190, 254, 28, 243, 189, 149, 230, 143, 188, 129, 250, 114, 188, 17, 242, 96, 59, 165, 150, 114, 61, 240, 52, 29, 62, 159, 243, 130, 60, 60, 241, 17, 189, 169, 165, 160, 61, 61, 244, 47, 189, 3, 24, 0, 189, 47, 108, 5, 62, 45, 38, 8, 189, 247, 248, 45, 189, 130, 143, 3, 189, 246, 128, 65, 61, 146, 49, 169, 189, 210, 172, 185, 189, 63, 63, 132, 61, 32, 107, 241, 189, 21, 165, 159, 61, 218, 200, 190, 190, 173, 2, 103, 191, 197, 182, 157, 61, 21, 203, 177, 189, 182, 34, 179, 186, 67, 130, 13, 62, 251, 169, 9, 62, 19, 94, 197, 61, 170, 50, 115, 61, 68, 7, 233, 60, 248, 247, 67, 62, 215, 99, 132, 190, 220, 96, 220, 190, 16, 79, 138, 189, 25, 122, 76, 61, 22, 38, 201, 61, 64, 243, 13, 62, 248, 53, 173, 62, 63, 170, 81, 62, 58, 228, 148, 189, 60, 226, 180, 61, 183, 21, 12, 62, 50, 238, 158, 190, 222, 15, 120, 61, 24, 17, 102, 190, 65, 145, 167, 62, 214, 56, 18, 190, 21, 193, 157, 190, 30, 114, 64, 190, 3, 162, 167, 61, 12, 52, 42, 189, 132, 35, 191, 62, 125, 11, 55, 191, 174, 126, 169, 191, 151, 254, 130, 190, 67, 226, 113, 190, 151, 49, 146, 62, 193, 144, 227, 62, 26, 200, 35, 62, 192, 23, 58, 62, 104, 9, 164, 62, 234, 251, 162, 62, 110, 79, 49, 62, 193, 27, 219, 190, 156, 81, 197, 189, 123, 138, 156, 190, 35, 35, 76, 190, 179, 1, 124, 62, 187, 69, 140, 62, 157, 191, 239, 59, 240, 160, 178, 62, 117, 86, 121, 190, 244, 236, 118, 61, 25, 173, 20, 62, 187, 57, 95, 61, 202, 159, 185, 61, 185, 173, 0, 190, 146, 251, 194, 62, 148, 113, 147, 60, 201, 148, 191, 189, 166, 34, 231, 190, 230, 225, 132, 62, 70, 169, 15, 190, 167, 228, 233, 62, 77, 214, 151, 61, 178, 201, 2, 62, 173, 184, 96, 190, 216, 183, 188, 190, 1, 51, 11, 62, 150, 55, 103, 189, 240, 69, 48, 190, 105, 68, 28, 191, 170, 214, 195, 61, 200, 119, 11, 191, 61, 252, 83, 61, 217, 31, 125, 62, 225, 161, 64, 61, 172, 73, 22, 62, 86, 75, 148, 61, 144, 168, 99, 60, 1, 240, 4, 62, 213, 137, 12, 190, 208, 3, 56, 62, 199, 58, 125, 62, 215, 124, 226, 61, 195, 240, 57, 62, 171, 89, 27, 62, 139, 67, 19, 62, 108, 73, 148, 61, 124, 135, 35, 61, 227, 79, 240, 61, 95, 46, 67, 62, 129, 144, 90, 190, 102, 76, 11, 63, 167, 166, 58, 62, 54, 135, 23, 190, 181, 76, 26, 61, 139, 121, 34, 190, 225, 38, 144, 61, 34, 54, 152, 61, 216, 88, 246, 188, 213, 230, 42, 62, 227, 20, 140, 189, 78, 57, 34, 62, 93, 137, 146, 188, 42, 43, 8, 190, 194, 128, 173, 61, 37, 177, 158, 61, 212, 7, 38, 62, 150, 31, 236, 189, 133, 38, 142, 61, 234, 27, 38, 190, 168, 226, 232, 189, 206, 38, 82, 60, 140, 73, 185, 189, 51, 21, 133, 61, 147, 6, 191, 60, 67, 170, 51, 190, 106, 135, 5, 62, 142, 247, 136, 189, 149, 191, 46, 190, 84, 22, 10, 190, 218, 230, 37, 190, 213, 163, 44, 62, 101, 244, 51, 190, 8, 14, 87, 61, 63, 135, 42, 189, 13, 167, 190, 62, 249, 81, 187, 61, 1, 116, 204, 190, 235, 238, 151, 190, 97, 185, 191, 189, 50, 122, 246, 188, 192, 161, 2, 61, 86, 136, 17, 191, 178, 139, 53, 61, 20, 79, 47, 190, 171, 180, 16, 190, 153, 32, 206, 190, 220, 237, 152, 189, 101, 6, 129, 61, 216, 53, 32, 62, 147, 182, 129, 62, 185, 233, 3, 191, 84, 6, 68, 191, 239, 91, 156, 190, 182, 205, 15, 190, 218, 71, 122, 62, 243, 28, 66, 189, 222, 167, 175, 188, 196, 66, 169, 190, 227, 227, 192, 190, 184, 69, 42, 190, 8, 128, 51, 61, 63, 91, 37, 191, 252, 63, 186, 62, 16, 44, 93, 189, 107, 8, 155, 62, 160, 160, 91, 61, 217, 144, 67, 190, 4, 181, 33, 190, 110, 218, 176, 61, 247, 54, 76, 61, 188, 226, 84, 62, 153, 187, 6, 61, 235, 109, 192, 188, 30, 241, 128, 62, 214, 218, 78, 62, 188, 250, 223, 61, 64, 109, 198, 61, 209, 3, 5, 62, 157, 116, 148, 189, 72, 190, 145, 61, 199, 112, 212, 190, 236, 199, 80, 190, 67, 171, 157, 62, 122, 155, 2, 60, 186, 196, 204, 62, 102, 134, 15, 190, 9, 7, 29, 62, 137, 207, 172, 62, 38, 6, 126, 61, 247, 4, 212, 190, 65, 118, 166, 187, 1, 171, 154, 190, 104, 30, 73, 190, 246, 175, 40, 62, 131, 75, 18, 191, 188, 67, 152, 62, 30, 219, 57, 62, 194, 85, 73, 62, 65, 74, 2, 62, 169, 40, 129, 188, 201, 20, 65, 61, 28, 21, 127, 59, 252, 154, 191, 190, 203, 16, 223, 61, 198, 124, 228, 188, 216, 166, 116, 190, 24, 201, 121, 60, 34, 141, 72, 60, 107, 88, 86, 61, 134, 100, 52, 61, 73, 241, 143, 61, 127, 144, 10, 190, 163, 104, 105, 62, 235, 98, 83, 62, 39, 85, 14, 190, 101, 233, 103, 61, 169, 1, 42, 190, 222, 222, 39, 62, 127, 39, 30, 190, 111, 4, 82, 190, 145, 250, 99, 62, 149, 212, 177, 62, 11, 130, 212, 61, 57, 18, 95, 62, 126, 8, 176, 187, 203, 226, 198, 188, 187, 152, 135, 62, 213, 188, 5, 61, 56, 65, 99, 61, 58, 196, 14, 190, 26, 57, 190, 62, 128, 216, 51, 62, 92, 44, 190, 62, 40, 48, 51, 62, 217, 108, 155, 62, 134, 19, 54, 191, 253, 80, 20, 190, 109, 16, 3, 188, 88, 29, 198, 188, 85, 120, 23, 191, 60, 145, 188, 61, 18, 60, 156, 60, 48, 168, 160, 60, 218, 241, 229, 62, 100, 62, 82, 190, 233, 45, 101, 189, 206, 60, 4, 62, 66, 123, 137, 190, 64, 236, 202, 190, 144, 53, 63, 191, 45, 112, 241, 62, 239, 240, 12, 62, 232, 4, 103, 190, 14, 205, 187, 62, 196, 103, 193, 60, 237, 107, 13, 190, 130, 139, 5, 62, 242, 222, 17, 190, 217, 61, 105, 190, 203, 217, 25, 61, 88, 158, 26, 190, 21, 65, 38, 61, 61, 85, 226, 60, 32, 240, 125, 62, 5, 74, 93, 62, 49, 46, 5, 62, 223, 202, 164, 189, 26, 71, 18, 190, 189, 136, 70, 190, 203, 218, 16, 189, 246, 98, 15, 189, 160, 214, 41, 190, 69, 136, 138, 190, 57, 199, 195, 189, 23, 14, 102, 62, 6, 160, 188, 189, 194, 38, 59, 62, 197, 15, 169, 189, 160, 78, 248, 190, 25, 44, 186, 61, 233, 75, 65, 191, 234, 169, 73, 189, 73, 142, 179, 188, 252, 175, 118, 189, 150, 216, 225, 189, 178, 76, 169, 62, 155, 168, 224, 62, 120, 193, 217, 61, 147, 166, 188, 61, 41, 6, 157, 62, 42, 112, 245, 189, 99, 230, 40, 190, 111, 38, 74, 62, 198, 250, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 98, 193, 60, 222, 224, 75, 62, 8, 72, 105, 188, 84, 244, 169, 190, 23, 17, 119, 62, 110, 147, 89, 60, 118, 35, 160, 61, 203, 226, 187, 190, 60, 219, 74, 59, 181, 81, 35, 62, 210, 131, 6, 189, 8, 161, 143, 61, 79, 129, 33, 187, 73, 208, 133, 61, 188, 122, 157, 189, 171, 93, 225, 61, 43, 207, 108, 62, 188, 1, 242, 61, 225, 116, 161, 189, 218, 200, 192, 60, 71, 25, 229, 188, 207, 135, 53, 62, 103, 154, 5, 61, 214, 104, 75, 62, 150, 203, 18, 62, 112, 223, 111, 61, 237, 77, 136, 189, 29, 104, 87, 190, 48, 147, 117, 189, 182, 217, 8, 62, 19, 198, 3, 188, 102, 55, 21, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 104, 78, 62, 199, 155, 130, 63, 32, 83, 74, 62, 1, 9, 67, 191, 25, 32, 135, 185, 59, 110, 29, 63, 24, 91, 149, 59, 60, 214, 63, 63, 150, 50, 212, 62, 129, 163, 75, 190, 239, 92, 51, 191, 144, 157, 238, 61, 46, 152, 11, 191, 66, 195, 142, 190, 69, 205, 107, 190, 186, 252, 153, 190, 19, 194, 77, 61, 166, 224, 158, 189, 46, 133, 187, 61, 137, 208, 141, 62, 147, 183, 140, 189, 218, 121, 62, 190, 252, 253, 149, 61, 82, 205, 190, 190, 100, 66, 22, 191, 231, 196, 11, 62, 35, 65, 215, 189, 128, 108, 21, 191, 53, 95, 58, 190, 239, 42, 169, 61, 138, 84, 168, 190, 234, 11, 170, 62, 38, 52, 28, 62, 29, 213, 36, 61, 10, 15, 45, 62, 58, 129, 216, 62, 215, 137, 135, 190, 131, 131, 23, 62, 108, 51, 67, 190, 233, 40, 196, 189, 239, 237, 141, 61, 238, 106, 75, 190, 104, 5, 149, 62, 71, 78, 140, 189, 183, 201, 221, 62, 206, 97, 153, 190, 56, 96, 142, 62, 93, 23, 59, 190, 88, 14, 63, 190, 30, 239, 86, 188, 25, 228, 249, 61, 136, 227, 177, 189, 98, 107, 166, 189, 186, 251, 49, 190, 159, 3, 130, 189, 211, 46, 138, 188, 248, 214, 233, 60, 20, 108, 84, 190, 56, 249, 47, 62, 55, 186, 133, 62, 91, 66, 131, 188, 189, 149, 17, 188, 51, 172, 102, 62, 100, 31, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 52, 120, 62, 73, 6, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 28, 244, 189, 32, 189, 199, 62, 109, 219, 14, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 174, 13, 191, 46, 189, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0068/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}