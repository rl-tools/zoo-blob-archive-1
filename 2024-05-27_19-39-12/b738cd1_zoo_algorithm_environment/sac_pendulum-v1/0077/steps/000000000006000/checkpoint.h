// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 209, 138, 61, 194, 224, 104, 63, 62, 172, 202, 62, 123, 232, 133, 190, 136, 204, 193, 63, 37, 93, 19, 63, 165, 6, 8, 63, 250, 234, 131, 63, 3, 131, 76, 61, 180, 52, 91, 63, 106, 148, 182, 190, 24, 241, 214, 189, 14, 108, 72, 190, 246, 20, 34, 63, 239, 180, 177, 190, 33, 60, 55, 62, 15, 185, 90, 63, 57, 242, 77, 190, 96, 106, 20, 63, 97, 102, 72, 191, 81, 169, 217, 190, 240, 171, 177, 62, 46, 193, 79, 191, 109, 167, 87, 61, 91, 62, 158, 61, 60, 35, 54, 190, 37, 58, 155, 62, 43, 112, 135, 191, 121, 156, 203, 190, 28, 172, 174, 189, 78, 117, 77, 60, 47, 247, 169, 189, 110, 59, 225, 62, 105, 208, 208, 62, 245, 203, 123, 191, 33, 232, 224, 190, 201, 188, 9, 191, 218, 52, 177, 189, 120, 24, 19, 191, 146, 70, 118, 62, 248, 109, 0, 191, 119, 137, 254, 62, 46, 108, 120, 191, 131, 110, 5, 63, 80, 149, 252, 61, 68, 136, 20, 190, 23, 79, 217, 60, 221, 16, 63, 63, 249, 159, 0, 62, 128, 232, 127, 190, 217, 137, 32, 191, 7, 50, 238, 62, 22, 64, 193, 62, 166, 158, 86, 63, 116, 239, 5, 191, 76, 182, 60, 191, 244, 136, 245, 189, 115, 69, 37, 63, 175, 29, 55, 191, 154, 23, 255, 190, 183, 25, 40, 63, 142, 138, 147, 189, 94, 102, 56, 62, 127, 114, 65, 191, 55, 192, 210, 61, 88, 22, 9, 61, 158, 99, 104, 190, 136, 239, 36, 190, 218, 115, 52, 63, 160, 206, 208, 190, 54, 22, 202, 62, 123, 104, 116, 63, 200, 16, 239, 62, 116, 22, 123, 191, 248, 248, 146, 190, 107, 79, 109, 62, 27, 79, 174, 63, 76, 156, 3, 63, 47, 179, 115, 62, 101, 223, 34, 63, 252, 115, 218, 61, 223, 148, 200, 62, 35, 141, 154, 62, 48, 214, 216, 189, 72, 38, 222, 62, 95, 153, 107, 63, 186, 79, 118, 62, 84, 175, 7, 190, 164, 160, 186, 189, 16, 117, 49, 191, 22, 160, 180, 62, 221, 46, 103, 191, 118, 213, 128, 190, 111, 108, 207, 62, 131, 229, 38, 190, 205, 29, 182, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 107, 9, 191, 62, 238, 50, 62, 117, 85, 217, 62, 160, 125, 20, 62, 119, 215, 2, 62, 139, 239, 122, 61, 19, 183, 91, 191, 100, 159, 95, 62, 206, 140, 218, 61, 248, 230, 37, 62, 55, 75, 187, 189, 179, 228, 33, 62, 124, 151, 170, 190, 254, 40, 8, 62, 146, 45, 84, 63, 129, 152, 238, 189, 45, 55, 240, 62, 230, 105, 26, 63, 43, 214, 34, 63, 21, 231, 86, 190, 230, 227, 149, 62, 215, 241, 196, 62, 71, 0, 247, 62, 73, 155, 119, 190, 52, 12, 204, 190, 88, 11, 14, 63, 202, 124, 219, 62, 23, 113, 18, 63, 136, 68, 34, 190, 50, 246, 152, 189, 16, 229, 130, 190, 208, 79, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 56, 141, 61, 104, 0, 13, 190, 173, 232, 241, 61, 182, 0, 143, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 209, 149, 0, 62, 81, 119, 176, 188, 122, 106, 158, 61, 210, 200, 9, 62, 80, 10, 55, 190, 22, 232, 254, 59, 118, 116, 143, 189, 137, 97, 149, 187, 23, 51, 38, 61, 215, 239, 1, 62, 150, 126, 59, 190, 76, 64, 44, 190, 219, 89, 68, 61, 56, 189, 42, 190, 94, 29, 14, 190, 130, 104, 10, 62, 245, 133, 180, 61, 246, 149, 227, 59, 202, 37, 237, 61, 61, 97, 41, 190, 187, 53, 3, 62, 139, 49, 163, 61, 140, 102, 46, 188, 163, 179, 62, 61, 225, 202, 186, 189, 192, 248, 217, 188, 148, 111, 224, 61, 108, 143, 187, 61, 201, 24, 126, 189, 185, 214, 201, 188, 122, 180, 30, 189, 216, 148, 129, 62, 131, 224, 129, 190, 149, 108, 24, 59, 6, 46, 221, 190, 10, 190, 122, 189, 36, 146, 86, 61, 102, 76, 26, 62, 149, 181, 164, 188, 255, 25, 78, 189, 87, 207, 48, 189, 34, 67, 68, 189, 29, 60, 242, 60, 241, 92, 184, 189, 66, 15, 60, 189, 248, 245, 57, 188, 179, 66, 80, 190, 113, 74, 197, 61, 28, 127, 0, 61, 78, 67, 91, 61, 161, 9, 50, 62, 238, 133, 161, 61, 244, 12, 12, 62, 59, 74, 122, 62, 253, 125, 5, 61, 78, 203, 39, 62, 81, 164, 1, 62, 45, 161, 165, 190, 12, 235, 1, 190, 254, 110, 107, 188, 81, 119, 33, 62, 90, 73, 151, 189, 108, 105, 90, 188, 117, 85, 48, 62, 21, 117, 226, 62, 227, 100, 8, 62, 214, 70, 197, 190, 205, 146, 37, 62, 206, 208, 146, 62, 57, 141, 51, 190, 66, 155, 6, 189, 230, 200, 18, 191, 167, 109, 128, 62, 167, 186, 17, 61, 141, 76, 134, 60, 6, 238, 251, 61, 136, 247, 146, 62, 0, 129, 171, 62, 252, 19, 196, 190, 185, 78, 40, 190, 159, 253, 83, 62, 81, 170, 233, 60, 83, 47, 32, 190, 185, 45, 10, 62, 52, 217, 219, 60, 219, 28, 45, 191, 148, 159, 216, 61, 108, 51, 250, 187, 205, 49, 4, 189, 229, 40, 34, 61, 32, 120, 182, 59, 39, 64, 37, 188, 76, 230, 61, 189, 123, 138, 66, 189, 202, 93, 230, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 167, 50, 136, 188, 0, 117, 30, 62, 183, 26, 39, 189, 132, 41, 139, 187, 19, 19, 28, 62, 17, 51, 39, 62, 6, 246, 238, 189, 234, 41, 11, 190, 229, 138, 35, 190, 4, 148, 14, 190, 92, 71, 129, 189, 46, 45, 160, 61, 217, 249, 248, 61, 73, 123, 148, 187, 201, 77, 169, 189, 150, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 65, 114, 86, 61, 138, 195, 105, 189, 243, 143, 102, 62, 200, 213, 129, 62, 129, 87, 21, 190, 199, 156, 135, 62, 218, 233, 156, 190, 44, 209, 236, 189, 77, 218, 224, 189, 51, 96, 26, 191, 228, 44, 208, 61, 78, 199, 39, 189, 117, 30, 62, 189, 23, 141, 34, 62, 77, 38, 2, 190, 57, 56, 205, 188, 170, 180, 153, 185, 120, 95, 64, 62, 226, 35, 138, 191, 186, 243, 220, 189, 114, 151, 49, 62, 123, 172, 18, 62, 139, 140, 103, 61, 70, 67, 91, 190, 96, 135, 45, 191, 155, 253, 229, 61, 208, 112, 120, 60, 29, 123, 194, 62, 166, 176, 23, 62, 172, 120, 109, 188, 239, 38, 4, 191, 200, 36, 25, 190, 134, 186, 55, 190, 213, 71, 72, 61, 169, 157, 240, 190, 222, 227, 55, 62, 135, 98, 145, 189, 2, 165, 37, 190, 220, 157, 191, 60, 225, 163, 165, 62, 35, 18, 135, 190, 113, 251, 69, 190, 184, 231, 255, 189, 209, 163, 29, 62, 45, 90, 103, 188, 16, 55, 167, 60, 19, 44, 162, 61, 33, 208, 80, 187, 137, 183, 210, 60, 217, 151, 71, 189, 166, 154, 205, 188, 26, 240, 117, 62, 175, 202, 80, 189, 190, 34, 98, 189, 2, 146, 201, 187, 218, 8, 232, 60, 160, 111, 236, 62, 160, 0, 94, 190, 158, 41, 197, 190, 180, 176, 13, 61, 78, 97, 136, 189, 213, 200, 191, 60, 247, 112, 77, 62, 14, 54, 88, 190, 217, 223, 153, 61, 167, 182, 54, 189, 255, 55, 111, 190, 77, 30, 34, 190, 202, 204, 148, 61, 237, 32, 193, 189, 209, 205, 9, 62, 176, 68, 16, 60, 72, 36, 14, 190, 216, 42, 247, 61, 178, 16, 17, 190, 195, 165, 169, 61, 6, 221, 173, 60, 245, 147, 178, 60, 157, 27, 70, 188, 160, 40, 97, 62, 77, 49, 39, 61, 25, 196, 185, 61, 86, 124, 50, 62, 99, 130, 5, 62, 130, 62, 154, 190, 85, 68, 122, 190, 168, 94, 237, 62, 33, 16, 192, 61, 144, 11, 53, 62, 196, 110, 44, 59, 248, 172, 204, 190, 99, 237, 63, 59, 95, 200, 133, 60, 164, 79, 48, 190, 221, 155, 35, 62, 221, 236, 31, 190, 59, 246, 109, 61, 35, 22, 84, 191, 71, 210, 22, 61, 105, 140, 194, 190, 144, 135, 191, 190, 145, 126, 64, 62, 182, 143, 255, 189, 66, 153, 191, 61, 171, 90, 207, 62, 181, 171, 225, 62, 166, 21, 147, 62, 170, 173, 45, 62, 184, 253, 213, 62, 193, 248, 210, 62, 86, 247, 65, 62, 118, 236, 79, 191, 96, 146, 247, 61, 84, 171, 122, 191, 40, 92, 155, 62, 128, 135, 62, 190, 210, 37, 95, 190, 244, 87, 33, 62, 151, 232, 52, 61, 68, 199, 111, 191, 50, 2, 58, 191, 144, 251, 135, 191, 27, 19, 48, 189, 123, 157, 15, 191, 111, 161, 80, 189, 129, 129, 242, 61, 65, 165, 220, 190, 195, 235, 29, 190, 28, 84, 210, 188, 164, 122, 187, 60, 45, 31, 77, 189, 145, 196, 228, 189, 104, 209, 191, 188, 103, 46, 47, 189, 74, 37, 242, 61, 157, 79, 26, 190, 106, 236, 236, 61, 63, 11, 30, 189, 71, 30, 173, 189, 26, 143, 52, 190, 135, 64, 3, 62, 15, 180, 244, 60, 220, 170, 80, 190, 74, 87, 50, 188, 215, 41, 222, 189, 250, 65, 151, 61, 33, 224, 22, 190, 187, 85, 67, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 203, 41, 57, 58, 160, 155, 245, 188, 13, 24, 21, 190, 198, 183, 15, 62, 25, 50, 218, 189, 192, 183, 101, 61, 112, 45, 171, 60, 212, 170, 205, 61, 26, 186, 27, 190, 202, 196, 213, 187, 206, 27, 152, 60, 5, 235, 147, 61, 54, 13, 101, 189, 158, 176, 218, 60, 109, 201, 190, 60, 198, 93, 131, 62, 169, 172, 43, 190, 35, 130, 34, 62, 126, 95, 174, 188, 109, 122, 127, 61, 197, 214, 197, 188, 110, 85, 241, 189, 5, 114, 181, 62, 158, 138, 238, 61, 113, 0, 140, 62, 162, 14, 48, 62, 78, 98, 67, 62, 135, 59, 54, 62, 143, 113, 30, 62, 79, 98, 176, 62, 33, 88, 30, 61, 47, 231, 99, 62, 112, 13, 92, 189, 16, 228, 86, 62, 78, 95, 232, 61, 12, 116, 39, 62, 34, 223, 127, 189, 50, 210, 35, 60, 209, 139, 138, 62, 168, 97, 45, 190, 191, 11, 18, 191, 138, 212, 26, 62, 66, 146, 188, 190, 162, 146, 127, 62, 229, 119, 132, 62, 66, 232, 3, 191, 189, 61, 23, 189, 173, 85, 112, 62, 197, 133, 80, 190, 233, 249, 2, 61, 193, 238, 182, 190, 213, 126, 0, 62, 156, 155, 27, 191, 44, 23, 228, 189, 145, 49, 123, 62, 144, 70, 91, 62, 133, 55, 49, 190, 62, 159, 39, 188, 213, 102, 114, 188, 205, 126, 5, 62, 191, 78, 129, 190, 184, 160, 152, 62, 184, 128, 147, 62, 212, 110, 33, 188, 154, 56, 194, 61, 166, 168, 218, 61, 180, 56, 19, 189, 9, 80, 169, 62, 0, 158, 11, 191, 82, 209, 35, 191, 15, 28, 171, 62, 74, 71, 201, 189, 227, 41, 177, 190, 233, 194, 210, 190, 50, 212, 9, 61, 60, 41, 92, 62, 105, 206, 55, 62, 30, 221, 211, 189, 83, 176, 244, 189, 70, 148, 12, 62, 91, 122, 134, 189, 233, 12, 206, 60, 182, 135, 7, 189, 103, 6, 29, 190, 14, 181, 45, 62, 59, 63, 48, 62, 219, 70, 168, 190, 5, 205, 16, 190, 21, 200, 34, 62, 128, 48, 9, 62, 95, 151, 181, 190, 86, 21, 59, 190, 55, 42, 148, 62, 242, 143, 202, 189, 112, 221, 222, 189, 7, 216, 8, 190, 14, 233, 128, 191, 242, 119, 27, 188, 14, 123, 134, 62, 131, 83, 150, 61, 109, 140, 225, 189, 60, 39, 59, 59, 95, 254, 17, 191, 53, 180, 249, 189, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 175, 215, 224, 190, 30, 8, 132, 62, 248, 223, 250, 189, 133, 179, 231, 62, 156, 35, 140, 62, 204, 42, 171, 190, 132, 246, 215, 189, 175, 242, 179, 62, 2, 165, 143, 190, 154, 199, 205, 189, 228, 253, 198, 190, 246, 190, 180, 61, 63, 103, 22, 191, 204, 91, 24, 190, 116, 215, 243, 61, 91, 45, 114, 62, 233, 194, 135, 189, 172, 68, 155, 61, 137, 221, 6, 190, 150, 202, 15, 62, 187, 15, 114, 190, 253, 24, 198, 61, 144, 5, 52, 62, 25, 10, 38, 62, 208, 126, 139, 188, 141, 165, 235, 60, 198, 199, 184, 189, 50, 119, 9, 62, 85, 95, 56, 191, 233, 42, 50, 189, 185, 10, 241, 61, 165, 237, 177, 190, 24, 173, 191, 190, 239, 181, 83, 62, 162, 198, 245, 189, 242, 9, 164, 61, 141, 159, 46, 62, 87, 139, 32, 190, 80, 229, 75, 62, 49, 216, 184, 60, 100, 187, 45, 190, 53, 218, 230, 56, 208, 79, 84, 190, 126, 36, 28, 61, 170, 78, 68, 190, 234, 76, 87, 61, 145, 197, 97, 61, 203, 1, 143, 60, 57, 250, 193, 190, 243, 104, 6, 62, 108, 225, 8, 62, 104, 65, 50, 62, 142, 239, 77, 190, 44, 162, 159, 61, 9, 132, 124, 60, 74, 176, 66, 59, 178, 202, 149, 62, 0, 166, 163, 61, 113, 29, 222, 189, 12, 52, 192, 189, 254, 49, 148, 190, 221, 124, 236, 190, 5, 109, 5, 62, 129, 67, 28, 61, 86, 226, 234, 189, 69, 49, 37, 190, 65, 252, 62, 61, 131, 117, 190, 61, 181, 75, 53, 190, 37, 143, 179, 189, 10, 212, 140, 190, 5, 207, 240, 62, 164, 161, 136, 61, 177, 154, 191, 190, 119, 115, 17, 190, 7, 248, 89, 61, 41, 85, 140, 190, 95, 118, 156, 61, 208, 2, 2, 191, 1, 3, 249, 60, 236, 220, 3, 62, 235, 243, 110, 61, 226, 190, 83, 188, 92, 50, 42, 62, 166, 212, 57, 62, 44, 66, 156, 190, 70, 176, 43, 190, 6, 169, 39, 61, 98, 127, 55, 61, 164, 108, 158, 189, 169, 46, 114, 190, 131, 188, 30, 189, 223, 115, 252, 190, 163, 233, 145, 61, 94, 191, 128, 61, 218, 12, 174, 60, 136, 137, 79, 62, 155, 74, 113, 189, 15, 9, 34, 62, 212, 227, 158, 190, 41, 19, 175, 188, 66, 109, 58, 62, 84, 180, 112, 189, 169, 214, 132, 61, 87, 217, 234, 61, 70, 249, 228, 60, 127, 87, 227, 61, 14, 236, 232, 189, 205, 147, 153, 62, 204, 4, 166, 61, 19, 202, 39, 61, 56, 254, 245, 189, 14, 109, 16, 62, 46, 207, 146, 190, 248, 235, 184, 189, 48, 50, 126, 61, 128, 111, 113, 190, 218, 102, 49, 62, 247, 146, 91, 190, 4, 53, 204, 190, 105, 107, 229, 189, 52, 148, 250, 189, 158, 190, 225, 59, 140, 231, 1, 190, 191, 40, 200, 62, 121, 206, 34, 62, 56, 56, 151, 61, 88, 255, 9, 190, 176, 105, 137, 62, 184, 251, 112, 190, 187, 225, 74, 62, 90, 0, 186, 189, 145, 72, 118, 190, 243, 165, 188, 62, 231, 108, 108, 190, 229, 43, 12, 191, 38, 175, 46, 62, 200, 160, 9, 62, 175, 156, 52, 60, 199, 97, 15, 190, 222, 254, 118, 62, 101, 23, 7, 61, 211, 159, 52, 62, 159, 159, 12, 191, 11, 57, 119, 62, 233, 230, 123, 190, 115, 253, 64, 190, 213, 30, 125, 190, 25, 3, 179, 189, 144, 210, 227, 61, 254, 69, 168, 190, 11, 74, 213, 190, 245, 27, 75, 191, 237, 88, 56, 190, 92, 227, 130, 62, 117, 203, 193, 189, 164, 140, 3, 63, 166, 59, 85, 62, 4, 20, 97, 190, 192, 137, 144, 190, 203, 207, 127, 190, 178, 43, 165, 190, 250, 195, 166, 188, 84, 126, 176, 62, 60, 219, 12, 60, 125, 140, 154, 190, 190, 63, 60, 190, 46, 199, 192, 62, 98, 150, 151, 61, 183, 30, 108, 190, 95, 106, 207, 61, 115, 80, 70, 62, 121, 87, 133, 190, 24, 107, 87, 61, 201, 37, 10, 191, 95, 57, 120, 189, 253, 238, 43, 61, 112, 247, 185, 188, 79, 49, 223, 61, 59, 19, 149, 189, 44, 151, 69, 62, 249, 223, 128, 190, 227, 0, 17, 62, 94, 29, 50, 190, 61, 217, 48, 190, 49, 98, 161, 188, 119, 255, 45, 62, 254, 149, 217, 61, 0, 176, 89, 191, 70, 47, 230, 189, 198, 199, 55, 62, 118, 243, 163, 60, 86, 136, 24, 60, 163, 81, 179, 188, 128, 240, 185, 61, 251, 189, 5, 62, 61, 52, 49, 190, 250, 132, 159, 61, 37, 223, 119, 61, 144, 54, 61, 59, 33, 137, 121, 189, 204, 55, 173, 61, 9, 30, 55, 190, 134, 171, 134, 189, 210, 142, 37, 61, 241, 157, 208, 61, 40, 200, 31, 189, 159, 167, 195, 58, 50, 5, 86, 62, 154, 18, 246, 61, 180, 236, 27, 61, 76, 42, 72, 62, 111, 27, 178, 188, 133, 235, 194, 188, 211, 127, 43, 60, 103, 56, 146, 61, 219, 95, 32, 190, 239, 122, 143, 188, 22, 172, 93, 61, 200, 128, 195, 61, 10, 93, 47, 189, 182, 26, 249, 61, 172, 20, 152, 61, 65, 210, 86, 190, 134, 181, 167, 62, 20, 246, 24, 190, 255, 213, 51, 62, 252, 103, 112, 190, 66, 84, 203, 189, 67, 238, 128, 62, 124, 66, 175, 58, 37, 164, 227, 190, 58, 211, 139, 62, 221, 26, 157, 61, 247, 242, 134, 62, 25, 157, 165, 61, 255, 208, 153, 62, 147, 94, 95, 62, 246, 235, 138, 61, 106, 22, 109, 189, 32, 79, 64, 62, 232, 157, 244, 188, 151, 132, 21, 61, 103, 70, 133, 190, 220, 4, 239, 61, 75, 166, 58, 60, 206, 223, 193, 190, 147, 21, 37, 190, 248, 96, 131, 189, 114, 177, 96, 57, 195, 39, 68, 62, 77, 55, 67, 62, 210, 59, 73, 62, 133, 224, 63, 62, 225, 32, 43, 61, 99, 253, 187, 62, 148, 160, 135, 190, 190, 109, 228, 190, 247, 94, 180, 190, 215, 5, 76, 58, 127, 38, 5, 189, 232, 14, 41, 190, 23, 238, 85, 62, 20, 92, 43, 62, 25, 251, 200, 189, 128, 225, 133, 190, 138, 47, 205, 189, 141, 58, 64, 62, 182, 162, 116, 189, 116, 198, 204, 61, 124, 158, 200, 62, 20, 37, 185, 61, 111, 164, 200, 61, 147, 182, 39, 60, 160, 91, 242, 61, 150, 167, 104, 62, 204, 175, 27, 191, 69, 135, 157, 190, 150, 171, 50, 62, 83, 104, 170, 60, 38, 76, 174, 62, 60, 173, 182, 190, 120, 39, 60, 191, 28, 98, 116, 190, 109, 124, 205, 60, 67, 84, 10, 190, 108, 146, 7, 189, 74, 151, 132, 187, 43, 15, 189, 61, 46, 13, 86, 61, 38, 222, 86, 62, 108, 3, 210, 189, 123, 195, 191, 61, 17, 171, 122, 62, 183, 165, 206, 189, 233, 226, 146, 189, 163, 133, 35, 60, 28, 189, 42, 190, 86, 146, 179, 189, 138, 205, 221, 60, 226, 168, 8, 62, 250, 11, 147, 61, 153, 235, 23, 190, 164, 162, 134, 190, 211, 24, 20, 189, 111, 229, 221, 189, 45, 50, 158, 190, 58, 195, 49, 190, 49, 194, 111, 62, 192, 100, 165, 189, 125, 137, 3, 61, 82, 154, 137, 186, 218, 30, 187, 190, 231, 35, 26, 62, 251, 229, 62, 62, 137, 220, 118, 60, 55, 130, 205, 61, 102, 221, 254, 189, 238, 124, 137, 190, 76, 219, 182, 60, 183, 179, 191, 189, 178, 5, 188, 61, 142, 236, 18, 62, 174, 153, 93, 61, 66, 220, 166, 61, 228, 211, 238, 189, 180, 251, 80, 62, 82, 214, 250, 61, 64, 10, 74, 190, 216, 174, 149, 190, 255, 180, 163, 59, 250, 116, 96, 62, 209, 116, 128, 189, 18, 102, 109, 190, 14, 193, 47, 191, 216, 42, 85, 190, 144, 126, 9, 62, 131, 92, 157, 190, 115, 121, 228, 188, 179, 104, 17, 62, 211, 78, 146, 187, 4, 114, 1, 190, 141, 132, 220, 190, 251, 162, 80, 190, 51, 148, 36, 62, 120, 69, 193, 190, 157, 5, 182, 61, 194, 148, 196, 61, 206, 209, 196, 190, 25, 155, 209, 189, 118, 173, 70, 62, 176, 43, 57, 59, 104, 124, 228, 61, 127, 91, 159, 189, 248, 27, 192, 61, 212, 237, 139, 62, 130, 7, 53, 62, 37, 137, 188, 62, 135, 2, 247, 190, 96, 168, 131, 189, 157, 114, 197, 187, 244, 223, 51, 191, 65, 186, 51, 190, 20, 49, 69, 190, 140, 253, 165, 190, 90, 215, 138, 61, 45, 31, 96, 190, 32, 2, 7, 190, 174, 197, 242, 189, 140, 54, 61, 62, 206, 76, 57, 191, 157, 239, 98, 61, 58, 141, 148, 189, 179, 125, 226, 60, 7, 65, 18, 62, 146, 34, 47, 189, 17, 131, 30, 191, 118, 14, 148, 189, 140, 119, 140, 62, 170, 225, 116, 62, 255, 248, 119, 62, 139, 212, 49, 60, 6, 122, 21, 191, 164, 31, 86, 62, 79, 166, 23, 62, 167, 92, 87, 60, 245, 136, 146, 62, 42, 83, 16, 60, 250, 81, 29, 190, 25, 146, 99, 62, 136, 235, 173, 190, 176, 141, 89, 190, 97, 230, 193, 62, 246, 193, 186, 190, 152, 96, 11, 62, 229, 90, 54, 189, 119, 55, 207, 62, 156, 218, 232, 61, 175, 166, 25, 59, 57, 157, 109, 190, 82, 61, 1, 62, 238, 186, 19, 62, 196, 2, 34, 189, 144, 17, 222, 190, 224, 152, 166, 61, 14, 181, 68, 190, 142, 139, 61, 190, 70, 54, 235, 189, 174, 223, 47, 191, 188, 1, 226, 189, 226, 170, 219, 188, 220, 132, 223, 61, 192, 80, 169, 62, 247, 83, 63, 61, 193, 141, 206, 190, 51, 68, 139, 62, 159, 225, 135, 187, 19, 222, 47, 191, 4, 229, 111, 190, 169, 115, 168, 189, 100, 138, 214, 190, 26, 67, 91, 190, 249, 180, 41, 62, 186, 163, 82, 62, 18, 221, 13, 63, 100, 197, 157, 62, 93, 187, 5, 63, 181, 87, 235, 61, 119, 195, 65, 62, 154, 85, 207, 62, 31, 88, 60, 61, 23, 160, 13, 190, 195, 237, 132, 189, 80, 184, 241, 190, 6, 227, 25, 62, 142, 0, 69, 186, 36, 145, 117, 190, 130, 96, 147, 62, 64, 85, 41, 62, 114, 240, 3, 191, 88, 222, 138, 190, 188, 215, 58, 191, 167, 167, 125, 189, 140, 217, 25, 191, 174, 139, 79, 190, 108, 104, 32, 190, 232, 253, 249, 61, 94, 252, 35, 62, 29, 97, 9, 62, 12, 101, 70, 189, 205, 216, 157, 62, 93, 67, 135, 189, 91, 80, 113, 62, 178, 72, 0, 63, 87, 23, 5, 190, 203, 147, 24, 190, 101, 181, 225, 189, 240, 232, 255, 190, 230, 206, 12, 61, 57, 28, 43, 190, 108, 198, 229, 189, 235, 177, 36, 62, 12, 143, 48, 190, 143, 219, 20, 190, 182, 226, 135, 189, 199, 179, 19, 62, 73, 35, 24, 191, 237, 93, 134, 190, 75, 142, 103, 62, 130, 167, 27, 190, 72, 153, 237, 187, 234, 6, 183, 60, 146, 160, 180, 190, 144, 48, 128, 189, 14, 242, 158, 62, 28, 222, 85, 189, 25, 179, 3, 62, 239, 218, 1, 190, 147, 205, 144, 190, 191, 64, 129, 62, 228, 59, 57, 62, 242, 56, 38, 189, 83, 248, 167, 62, 123, 246, 70, 62, 158, 36, 69, 62, 6, 249, 153, 62, 38, 194, 152, 190, 1, 32, 182, 189, 112, 204, 135, 189, 38, 212, 89, 191, 90, 133, 163, 189, 185, 54, 162, 190, 2, 135, 57, 190, 199, 150, 11, 190, 31, 115, 79, 190, 206, 155, 155, 189, 157, 175, 250, 189, 40, 213, 15, 62, 155, 10, 134, 191, 192, 236, 27, 190, 65, 2, 138, 62, 221, 0, 114, 189, 230, 89, 248, 60, 150, 44, 214, 60, 225, 98, 29, 191, 171, 239, 47, 62, 77, 40, 12, 62, 178, 58, 147, 62, 91, 92, 109, 60, 106, 254, 24, 189, 161, 5, 27, 191, 138, 14, 79, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 249, 27, 38, 62, 242, 140, 123, 60, 106, 222, 62, 62, 160, 111, 93, 190, 10, 239, 170, 61, 162, 245, 169, 61, 224, 222, 106, 62, 134, 192, 219, 189, 125, 33, 133, 58, 167, 65, 205, 190, 186, 162, 8, 190, 88, 172, 242, 61, 196, 66, 236, 61, 231, 150, 190, 61, 102, 129, 50, 190, 46, 216, 138, 61, 3, 39, 214, 60, 211, 200, 184, 188, 57, 185, 23, 190, 62, 19, 21, 189, 84, 218, 60, 62, 71, 138, 97, 190, 132, 211, 94, 190, 174, 220, 201, 61, 166, 77, 205, 62, 82, 21, 232, 61, 94, 45, 242, 61, 173, 195, 123, 189, 63, 38, 249, 61, 1, 187, 153, 189, 48, 42, 72, 62, 181, 11, 61, 62, 174, 83, 146, 189, 105, 163, 202, 190, 9, 44, 128, 62, 136, 3, 210, 187, 52, 122, 50, 190, 1, 2, 30, 62, 45, 184, 98, 190, 162, 133, 162, 59, 76, 251, 80, 61, 249, 20, 62, 61, 182, 99, 239, 189, 174, 99, 47, 61, 9, 102, 63, 189, 67, 196, 51, 62, 116, 82, 248, 188, 2, 7, 136, 190, 117, 124, 91, 62, 24, 63, 101, 61, 177, 209, 70, 189, 99, 29, 129, 190, 78, 64, 227, 188, 83, 237, 251, 59, 158, 210, 115, 61, 227, 46, 183, 189, 214, 215, 87, 191, 30, 177, 44, 189, 151, 196, 47, 61, 28, 34, 23, 62, 208, 244, 219, 189, 58, 198, 24, 188, 126, 14, 238, 190, 22, 155, 43, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 209, 40, 190, 195, 47, 92, 190, 51, 15, 69, 62, 118, 230, 5, 190, 117, 4, 22, 61, 32, 125, 45, 190, 172, 68, 34, 190, 24, 132, 162, 62, 174, 201, 70, 190, 243, 96, 176, 62, 222, 240, 133, 62, 47, 143, 175, 59, 159, 17, 34, 187, 159, 81, 38, 62, 14, 50, 32, 62, 188, 184, 66, 61, 126, 88, 142, 61, 20, 78, 185, 61, 250, 85, 53, 189, 59, 182, 94, 188, 212, 49, 207, 189, 227, 184, 51, 188, 159, 162, 138, 60, 19, 183, 122, 189, 67, 223, 5, 62, 87, 240, 136, 61, 241, 194, 20, 62, 143, 90, 19, 190, 227, 172, 66, 62, 248, 59, 28, 190, 193, 30, 146, 190, 231, 117, 44, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 206, 86, 60, 36, 252, 91, 61, 144, 230, 156, 62, 5, 116, 221, 189, 42, 134, 164, 190, 122, 172, 235, 190, 120, 194, 25, 190, 17, 45, 150, 191, 237, 2, 149, 60, 188, 77, 133, 62, 9, 106, 17, 63, 26, 71, 196, 190, 190, 58, 99, 61, 252, 172, 169, 62, 252, 161, 153, 62, 183, 83, 135, 62, 202, 233, 178, 190, 74, 11, 9, 191, 16, 95, 154, 62, 125, 213, 228, 60, 120, 84, 22, 63, 227, 26, 222, 190, 190, 22, 71, 190, 22, 17, 190, 62, 166, 56, 154, 190, 124, 188, 177, 190, 87, 235, 52, 191, 230, 250, 67, 190, 48, 238, 56, 191, 44, 61, 27, 61, 40, 78, 6, 61, 87, 230, 120, 190, 221, 80, 6, 62, 240, 38, 62, 62, 182, 75, 18, 190, 54, 83, 177, 61, 58, 146, 76, 190, 237, 49, 155, 62, 67, 79, 3, 62, 29, 106, 25, 62, 108, 189, 136, 61, 163, 9, 124, 190, 66, 76, 27, 61, 206, 228, 208, 190, 103, 13, 5, 62, 225, 79, 30, 61, 58, 90, 200, 61, 46, 219, 18, 189, 1, 62, 3, 190, 141, 161, 54, 60, 17, 236, 80, 190, 217, 139, 48, 190, 194, 157, 28, 62, 170, 49, 243, 189, 96, 147, 192, 189, 25, 187, 243, 61, 171, 209, 215, 189, 57, 48, 91, 61, 244, 1, 182, 189, 104, 170, 105, 62, 180, 251, 77, 187, 251, 241, 131, 189, 33, 126, 44, 62, 180, 238, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 139, 154, 62, 73, 14, 31, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 20, 109, 191, 208, 102, 87, 62, 21, 188, 138, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 163, 32, 64, 105, 80, 18, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}