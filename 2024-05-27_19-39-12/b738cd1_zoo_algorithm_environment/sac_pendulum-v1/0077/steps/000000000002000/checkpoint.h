// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 14, 50, 190, 150, 125, 67, 63, 205, 5, 190, 62, 82, 133, 228, 190, 76, 29, 225, 62, 224, 207, 0, 63, 194, 63, 184, 62, 63, 88, 101, 63, 106, 143, 169, 189, 34, 16, 212, 62, 228, 98, 205, 190, 145, 0, 159, 189, 220, 1, 72, 62, 149, 39, 3, 63, 28, 74, 155, 190, 67, 112, 149, 188, 13, 121, 88, 63, 9, 236, 66, 189, 205, 231, 162, 61, 163, 144, 3, 191, 102, 120, 8, 191, 5, 231, 43, 62, 169, 193, 104, 191, 143, 87, 84, 188, 138, 34, 16, 62, 217, 122, 219, 189, 1, 67, 215, 61, 97, 140, 72, 191, 250, 245, 191, 190, 4, 152, 31, 189, 176, 237, 178, 61, 53, 24, 66, 190, 10, 116, 143, 62, 117, 126, 149, 62, 2, 0, 28, 191, 80, 132, 13, 191, 107, 45, 25, 191, 85, 95, 225, 62, 27, 242, 181, 190, 201, 126, 6, 62, 91, 26, 217, 190, 244, 22, 11, 63, 230, 187, 85, 191, 142, 148, 224, 62, 129, 225, 71, 62, 86, 8, 162, 190, 142, 1, 63, 191, 40, 11, 222, 62, 224, 10, 40, 62, 140, 58, 38, 62, 174, 39, 4, 191, 25, 141, 181, 62, 52, 130, 190, 190, 131, 211, 17, 63, 191, 116, 208, 190, 14, 92, 31, 191, 2, 19, 36, 190, 76, 57, 9, 63, 222, 46, 172, 190, 180, 242, 12, 191, 235, 87, 18, 63, 46, 219, 60, 190, 237, 93, 120, 62, 154, 80, 18, 191, 202, 129, 7, 189, 243, 189, 160, 61, 190, 33, 11, 190, 137, 187, 25, 191, 157, 91, 253, 62, 197, 197, 214, 190, 17, 128, 245, 190, 15, 18, 8, 63, 17, 190, 25, 62, 176, 67, 76, 191, 29, 77, 45, 190, 110, 39, 29, 62, 117, 51, 169, 61, 186, 34, 232, 62, 35, 205, 69, 62, 33, 75, 1, 63, 78, 147, 4, 61, 61, 30, 230, 62, 171, 206, 78, 62, 122, 22, 69, 188, 67, 176, 165, 60, 58, 95, 218, 62, 92, 138, 133, 62, 176, 74, 214, 189, 47, 99, 3, 63, 203, 158, 210, 190, 112, 167, 30, 62, 197, 52, 20, 191, 188, 248, 149, 190, 7, 88, 30, 62, 122, 42, 144, 190, 11, 147, 147, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 72, 12, 191, 34, 239, 62, 62, 195, 49, 31, 63, 122, 59, 180, 62, 14, 120, 165, 190, 99, 147, 119, 62, 255, 148, 71, 191, 29, 92, 147, 62, 151, 140, 147, 189, 25, 72, 151, 189, 251, 221, 178, 190, 67, 24, 149, 62, 181, 208, 23, 190, 29, 139, 55, 188, 121, 207, 24, 63, 108, 134, 20, 62, 100, 188, 18, 63, 184, 32, 63, 63, 83, 38, 246, 62, 80, 157, 36, 190, 58, 33, 47, 62, 189, 52, 195, 62, 15, 171, 33, 63, 85, 126, 2, 190, 154, 141, 168, 190, 1, 150, 34, 63, 242, 237, 11, 63, 128, 19, 204, 62, 83, 112, 121, 190, 61, 81, 44, 62, 111, 38, 109, 190, 187, 83, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 243, 153, 61, 180, 148, 6, 190, 173, 232, 241, 61, 199, 255, 142, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 173, 219, 18, 62, 50, 188, 95, 188, 197, 48, 173, 61, 241, 16, 17, 62, 80, 10, 55, 190, 22, 232, 254, 59, 244, 40, 129, 189, 74, 116, 208, 57, 12, 152, 72, 61, 215, 239, 1, 62, 187, 48, 51, 190, 162, 13, 43, 190, 219, 89, 68, 61, 69, 4, 35, 190, 207, 44, 6, 190, 254, 255, 18, 62, 222, 119, 195, 61, 246, 149, 227, 59, 42, 18, 251, 61, 9, 24, 40, 190, 187, 53, 3, 62, 152, 226, 177, 61, 140, 102, 46, 188, 163, 179, 62, 61, 202, 111, 168, 189, 60, 62, 60, 189, 155, 79, 231, 61, 145, 209, 169, 187, 202, 32, 131, 189, 198, 54, 25, 188, 240, 241, 198, 189, 26, 134, 70, 62, 84, 181, 39, 190, 150, 213, 47, 189, 219, 32, 138, 190, 201, 201, 173, 189, 25, 129, 220, 61, 98, 51, 24, 62, 29, 207, 153, 188, 107, 93, 127, 61, 77, 92, 123, 188, 143, 70, 211, 187, 14, 41, 79, 187, 97, 60, 60, 60, 132, 173, 101, 188, 94, 251, 180, 189, 99, 213, 141, 188, 98, 93, 202, 61, 252, 241, 142, 61, 56, 213, 147, 188, 194, 174, 11, 62, 59, 8, 33, 61, 196, 136, 87, 61, 145, 35, 218, 61, 244, 238, 32, 61, 80, 162, 47, 62, 196, 197, 248, 61, 243, 25, 68, 190, 226, 225, 35, 190, 210, 33, 68, 188, 209, 111, 52, 61, 158, 80, 72, 189, 141, 172, 65, 61, 179, 22, 243, 61, 139, 236, 192, 62, 3, 47, 6, 60, 38, 52, 93, 190, 219, 104, 19, 61, 169, 158, 98, 62, 21, 213, 21, 190, 131, 154, 11, 190, 190, 35, 131, 190, 174, 58, 77, 62, 150, 202, 197, 58, 232, 249, 206, 188, 7, 181, 51, 62, 104, 59, 62, 62, 210, 175, 81, 62, 246, 83, 45, 190, 46, 59, 59, 190, 150, 194, 238, 61, 255, 187, 201, 188, 151, 63, 25, 190, 47, 41, 3, 62, 250, 133, 24, 189, 169, 154, 42, 190, 69, 37, 183, 61, 28, 200, 183, 189, 174, 136, 31, 190, 174, 89, 34, 61, 26, 7, 190, 59, 111, 112, 33, 188, 64, 229, 61, 189, 154, 15, 66, 189, 215, 170, 230, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 47, 197, 134, 188, 0, 117, 30, 62, 6, 228, 38, 189, 138, 131, 134, 187, 19, 19, 28, 62, 17, 51, 39, 62, 190, 220, 238, 189, 92, 28, 11, 190, 193, 131, 35, 190, 4, 148, 14, 190, 92, 71, 129, 189, 186, 192, 160, 61, 19, 80, 249, 61, 202, 178, 143, 187, 215, 14, 169, 189, 150, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 245, 6, 189, 61, 75, 84, 176, 188, 136, 180, 24, 62, 216, 181, 1, 62, 117, 18, 54, 190, 201, 10, 102, 62, 236, 93, 142, 189, 167, 237, 91, 189, 132, 85, 126, 189, 221, 46, 63, 190, 13, 34, 23, 62, 167, 198, 50, 189, 68, 100, 171, 61, 76, 34, 47, 62, 171, 128, 173, 189, 92, 228, 10, 61, 1, 209, 47, 189, 212, 21, 79, 62, 190, 7, 12, 191, 80, 110, 40, 190, 84, 186, 55, 62, 35, 120, 35, 62, 231, 127, 175, 61, 138, 247, 42, 190, 135, 116, 136, 61, 168, 224, 210, 61, 22, 203, 99, 189, 17, 180, 148, 62, 209, 149, 10, 62, 106, 141, 68, 61, 75, 208, 131, 190, 233, 65, 22, 190, 207, 76, 189, 189, 126, 76, 41, 62, 196, 82, 154, 190, 146, 198, 47, 61, 250, 160, 195, 189, 3, 136, 41, 61, 89, 175, 61, 189, 4, 118, 83, 62, 38, 50, 187, 189, 140, 206, 17, 190, 31, 91, 179, 188, 116, 26, 131, 61, 162, 191, 156, 60, 102, 17, 27, 62, 243, 202, 24, 190, 88, 108, 35, 188, 165, 236, 206, 188, 82, 186, 105, 188, 23, 241, 215, 189, 53, 144, 23, 62, 77, 7, 213, 61, 1, 166, 169, 189, 151, 33, 66, 59, 144, 128, 91, 61, 129, 225, 134, 62, 136, 224, 205, 189, 20, 195, 6, 190, 249, 143, 220, 188, 241, 205, 104, 61, 218, 195, 201, 60, 143, 76, 161, 61, 24, 82, 173, 189, 93, 37, 7, 62, 25, 214, 146, 189, 159, 174, 25, 189, 206, 140, 248, 189, 36, 146, 8, 62, 170, 221, 166, 60, 210, 218, 18, 62, 141, 54, 186, 189, 106, 173, 214, 189, 15, 217, 66, 189, 227, 44, 15, 190, 174, 191, 210, 61, 186, 67, 172, 61, 191, 6, 18, 189, 69, 108, 20, 190, 237, 170, 254, 189, 226, 238, 170, 61, 184, 180, 251, 189, 83, 17, 51, 61, 52, 31, 31, 62, 74, 159, 14, 190, 120, 149, 206, 190, 234, 193, 149, 61, 110, 252, 108, 189, 62, 206, 2, 62, 41, 137, 221, 189, 83, 20, 51, 190, 149, 116, 4, 62, 243, 63, 158, 61, 149, 28, 209, 189, 107, 64, 29, 62, 250, 143, 178, 189, 196, 60, 52, 61, 172, 137, 93, 190, 227, 107, 115, 61, 134, 119, 97, 190, 112, 100, 152, 190, 9, 199, 236, 61, 125, 31, 251, 189, 118, 139, 134, 190, 102, 133, 34, 190, 164, 146, 144, 62, 55, 78, 71, 190, 243, 177, 158, 61, 0, 84, 164, 62, 66, 164, 155, 189, 167, 81, 56, 62, 141, 84, 255, 190, 83, 4, 161, 60, 21, 95, 222, 190, 100, 56, 240, 61, 87, 14, 132, 190, 179, 97, 3, 190, 239, 163, 189, 61, 243, 26, 217, 188, 148, 83, 20, 190, 155, 213, 217, 190, 197, 207, 121, 190, 158, 199, 23, 62, 137, 13, 216, 190, 160, 82, 33, 61, 137, 107, 2, 61, 172, 4, 213, 190, 112, 133, 23, 190, 236, 214, 247, 186, 31, 57, 36, 61, 216, 246, 169, 188, 209, 225, 206, 189, 104, 209, 191, 188, 238, 48, 18, 189, 74, 37, 242, 61, 30, 110, 20, 190, 172, 18, 15, 62, 43, 229, 7, 189, 34, 155, 122, 189, 234, 96, 47, 190, 135, 64, 3, 62, 32, 170, 78, 61, 239, 198, 49, 190, 23, 134, 184, 59, 215, 41, 222, 189, 21, 228, 165, 61, 12, 50, 18, 190, 187, 85, 67, 61, 220, 62, 216, 59, 145, 125, 207, 189, 137, 79, 136, 189, 215, 148, 92, 59, 192, 39, 253, 57, 7, 121, 134, 188, 213, 151, 240, 189, 7, 213, 33, 62, 214, 115, 167, 189, 192, 183, 101, 61, 112, 45, 171, 60, 65, 47, 236, 61, 101, 15, 32, 190, 175, 247, 10, 190, 42, 123, 221, 189, 49, 197, 246, 188, 224, 136, 226, 189, 217, 232, 59, 189, 144, 85, 182, 59, 28, 230, 175, 62, 192, 188, 12, 190, 77, 60, 146, 61, 233, 195, 6, 61, 149, 99, 26, 188, 72, 30, 146, 189, 126, 152, 193, 189, 234, 95, 59, 62, 238, 180, 255, 61, 53, 12, 89, 62, 210, 10, 11, 62, 65, 10, 34, 62, 14, 134, 191, 61, 185, 157, 196, 61, 61, 239, 79, 62, 57, 155, 249, 60, 21, 73, 65, 62, 83, 188, 160, 189, 213, 49, 9, 62, 120, 107, 1, 190, 136, 5, 79, 61, 24, 227, 5, 61, 119, 183, 239, 188, 95, 195, 69, 62, 46, 130, 62, 190, 119, 86, 220, 190, 46, 48, 2, 58, 70, 74, 200, 190, 158, 187, 23, 62, 167, 110, 103, 190, 34, 229, 18, 191, 220, 35, 56, 190, 197, 117, 176, 62, 203, 101, 176, 189, 14, 199, 55, 62, 203, 204, 117, 190, 60, 251, 16, 62, 23, 206, 151, 190, 31, 75, 199, 188, 39, 191, 216, 61, 85, 25, 95, 62, 138, 209, 237, 188, 65, 189, 76, 188, 13, 174, 236, 61, 30, 110, 78, 189, 17, 122, 87, 190, 166, 39, 101, 62, 94, 236, 136, 62, 199, 249, 29, 189, 42, 92, 218, 189, 19, 223, 51, 61, 189, 95, 76, 190, 3, 134, 122, 62, 3, 140, 140, 190, 138, 173, 186, 190, 241, 71, 33, 62, 18, 105, 136, 189, 132, 235, 19, 190, 14, 103, 10, 190, 195, 203, 236, 189, 169, 71, 13, 62, 34, 254, 16, 62, 40, 3, 44, 190, 193, 181, 217, 61, 0, 171, 79, 62, 65, 225, 163, 188, 35, 90, 200, 188, 146, 202, 207, 61, 41, 107, 255, 189, 203, 219, 250, 61, 252, 51, 94, 62, 117, 87, 129, 190, 75, 127, 216, 60, 190, 162, 154, 61, 208, 232, 27, 62, 86, 93, 127, 189, 66, 183, 55, 190, 26, 215, 123, 62, 68, 170, 3, 190, 230, 246, 97, 188, 54, 55, 175, 59, 196, 25, 39, 190, 232, 32, 87, 60, 154, 181, 12, 62, 144, 92, 160, 189, 255, 119, 124, 189, 21, 68, 247, 188, 85, 31, 47, 190, 254, 179, 74, 189, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 233, 145, 174, 190, 189, 202, 169, 61, 3, 146, 253, 189, 25, 58, 180, 62, 196, 216, 22, 62, 62, 169, 163, 190, 202, 169, 173, 189, 5, 132, 236, 62, 59, 47, 29, 190, 31, 121, 33, 61, 99, 76, 153, 190, 88, 12, 174, 61, 235, 55, 144, 190, 13, 206, 129, 189, 238, 56, 191, 187, 236, 100, 88, 62, 159, 168, 169, 60, 183, 67, 187, 61, 246, 178, 128, 60, 188, 151, 3, 188, 152, 212, 64, 190, 90, 249, 192, 60, 24, 253, 26, 62, 203, 142, 197, 61, 123, 13, 219, 189, 200, 78, 104, 187, 143, 78, 101, 190, 166, 106, 161, 61, 63, 143, 215, 190, 232, 171, 246, 61, 92, 139, 173, 185, 254, 10, 178, 190, 8, 124, 78, 190, 222, 191, 10, 62, 240, 77, 45, 189, 93, 20, 166, 186, 66, 63, 30, 190, 44, 157, 5, 190, 16, 209, 175, 61, 172, 15, 14, 62, 190, 189, 192, 189, 231, 77, 218, 61, 249, 229, 239, 189, 94, 120, 11, 62, 171, 62, 0, 189, 119, 210, 233, 61, 167, 94, 77, 188, 127, 133, 66, 61, 130, 110, 47, 190, 77, 6, 29, 62, 109, 222, 111, 62, 110, 114, 135, 61, 65, 78, 45, 190, 193, 21, 73, 61, 229, 213, 97, 60, 104, 186, 160, 60, 159, 142, 94, 61, 227, 102, 115, 61, 136, 236, 60, 190, 18, 121, 36, 190, 196, 158, 158, 187, 255, 249, 85, 190, 157, 135, 37, 189, 213, 59, 187, 60, 160, 231, 136, 61, 71, 255, 145, 189, 53, 126, 118, 61, 95, 240, 15, 60, 104, 66, 203, 189, 122, 227, 24, 189, 254, 149, 217, 189, 156, 14, 197, 62, 108, 19, 252, 59, 38, 8, 48, 190, 252, 20, 83, 190, 172, 233, 135, 61, 212, 20, 189, 189, 189, 250, 187, 60, 33, 141, 104, 190, 112, 119, 241, 59, 52, 210, 44, 62, 78, 50, 179, 61, 220, 48, 85, 61, 7, 137, 51, 62, 151, 92, 217, 61, 15, 244, 146, 189, 27, 255, 17, 190, 250, 129, 213, 60, 245, 215, 17, 61, 78, 35, 55, 60, 103, 160, 113, 190, 215, 29, 130, 189, 72, 70, 35, 190, 43, 225, 30, 62, 240, 40, 201, 61, 77, 171, 18, 189, 94, 175, 220, 61, 119, 126, 233, 61, 89, 156, 128, 62, 89, 16, 235, 189, 219, 115, 111, 60, 160, 157, 72, 62, 222, 246, 225, 188, 164, 62, 210, 189, 255, 233, 194, 61, 119, 183, 139, 60, 66, 151, 213, 61, 165, 248, 226, 189, 84, 253, 124, 62, 185, 168, 173, 61, 107, 70, 52, 61, 197, 99, 128, 188, 179, 27, 248, 61, 136, 75, 73, 190, 47, 107, 27, 190, 89, 205, 197, 61, 25, 177, 210, 189, 208, 30, 48, 62, 20, 11, 70, 190, 237, 194, 93, 190, 193, 24, 220, 189, 29, 167, 129, 59, 12, 16, 238, 61, 217, 95, 208, 188, 126, 106, 250, 61, 191, 78, 9, 62, 203, 129, 248, 61, 94, 242, 201, 189, 225, 28, 218, 61, 197, 90, 128, 59, 163, 104, 98, 62, 199, 104, 251, 61, 237, 78, 74, 190, 170, 146, 175, 62, 117, 47, 19, 190, 170, 32, 203, 190, 211, 75, 237, 188, 136, 168, 244, 61, 164, 223, 5, 187, 117, 241, 144, 189, 57, 82, 38, 62, 232, 4, 9, 188, 165, 220, 124, 62, 21, 17, 130, 190, 54, 42, 107, 62, 83, 18, 6, 190, 163, 181, 42, 190, 123, 25, 27, 190, 202, 7, 42, 190, 181, 58, 30, 62, 126, 88, 141, 190, 0, 192, 126, 188, 126, 72, 215, 190, 84, 22, 93, 189, 118, 228, 159, 62, 28, 20, 237, 188, 135, 230, 50, 62, 99, 23, 59, 62, 92, 177, 29, 58, 205, 87, 63, 190, 124, 116, 205, 60, 15, 164, 62, 190, 29, 23, 214, 188, 14, 26, 95, 62, 171, 97, 39, 62, 85, 136, 6, 190, 219, 156, 165, 188, 222, 143, 136, 62, 212, 192, 248, 188, 56, 203, 206, 189, 209, 220, 152, 61, 52, 88, 60, 62, 218, 103, 40, 189, 100, 38, 252, 188, 235, 100, 134, 190, 90, 60, 214, 188, 9, 156, 150, 61, 177, 50, 64, 189, 226, 119, 10, 62, 213, 104, 152, 189, 211, 185, 246, 60, 239, 5, 131, 189, 207, 8, 35, 62, 179, 18, 26, 190, 88, 139, 35, 190, 164, 180, 144, 59, 128, 204, 5, 62, 12, 98, 211, 60, 162, 6, 178, 190, 161, 4, 93, 60, 63, 85, 71, 62, 38, 1, 6, 59, 214, 10, 58, 61, 198, 242, 183, 60, 63, 51, 247, 61, 91, 162, 233, 61, 52, 102, 61, 190, 127, 149, 207, 61, 61, 43, 62, 61, 99, 102, 51, 61, 76, 120, 56, 189, 132, 149, 186, 61, 17, 23, 2, 190, 165, 40, 12, 190, 198, 167, 148, 188, 255, 195, 203, 61, 91, 186, 6, 189, 25, 218, 72, 61, 155, 237, 24, 62, 72, 28, 5, 62, 241, 76, 132, 61, 252, 169, 15, 62, 53, 123, 167, 186, 41, 93, 57, 189, 107, 206, 44, 61, 32, 148, 192, 61, 154, 228, 33, 189, 123, 194, 155, 58, 168, 148, 150, 61, 38, 134, 175, 61, 94, 209, 190, 60, 1, 217, 175, 61, 33, 218, 167, 61, 169, 14, 40, 190, 163, 14, 157, 61, 4, 90, 17, 190, 36, 188, 205, 61, 218, 54, 105, 189, 150, 31, 4, 190, 181, 146, 34, 62, 181, 220, 148, 189, 88, 101, 121, 190, 231, 117, 128, 189, 133, 124, 219, 189, 171, 224, 179, 188, 65, 142, 174, 187, 8, 1, 237, 61, 202, 8, 250, 189, 91, 160, 43, 61, 184, 123, 151, 61, 108, 198, 171, 61, 232, 41, 173, 189, 36, 156, 33, 190, 157, 237, 86, 190, 227, 93, 239, 189, 65, 139, 207, 60, 176, 56, 40, 190, 34, 127, 22, 189, 104, 225, 236, 58, 22, 11, 12, 189, 92, 162, 5, 62, 213, 127, 48, 62, 132, 182, 51, 190, 99, 134, 59, 61, 25, 171, 68, 60, 188, 242, 32, 189, 182, 148, 41, 190, 89, 199, 74, 190, 92, 31, 230, 188, 143, 125, 178, 188, 11, 92, 97, 188, 30, 181, 214, 60, 72, 165, 240, 61, 86, 219, 27, 188, 163, 97, 102, 188, 75, 206, 128, 190, 76, 109, 255, 59, 89, 70, 0, 62, 157, 154, 60, 189, 32, 224, 22, 62, 74, 154, 130, 188, 141, 193, 232, 188, 61, 167, 169, 61, 188, 75, 149, 60, 165, 199, 3, 189, 41, 42, 32, 62, 212, 111, 55, 190, 87, 122, 162, 190, 77, 88, 162, 189, 102, 4, 91, 60, 88, 98, 157, 61, 144, 144, 46, 190, 132, 66, 95, 190, 132, 192, 44, 190, 51, 179, 7, 62, 254, 113, 249, 189, 119, 44, 40, 190, 233, 19, 32, 62, 89, 217, 12, 62, 38, 105, 26, 62, 163, 24, 116, 62, 178, 221, 228, 189, 102, 176, 11, 62, 208, 179, 147, 62, 119, 209, 135, 61, 14, 232, 98, 189, 151, 255, 238, 188, 79, 23, 192, 188, 54, 192, 146, 189, 173, 58, 236, 61, 5, 17, 18, 62, 184, 207, 11, 61, 146, 85, 178, 189, 208, 64, 62, 190, 75, 245, 29, 60, 64, 250, 220, 189, 193, 235, 17, 190, 69, 5, 109, 189, 135, 188, 58, 62, 156, 215, 66, 189, 134, 44, 145, 61, 248, 222, 175, 61, 141, 56, 217, 61, 132, 129, 30, 62, 139, 53, 76, 62, 238, 89, 28, 61, 28, 142, 157, 61, 47, 69, 121, 189, 248, 210, 36, 60, 211, 110, 82, 58, 154, 194, 201, 189, 97, 20, 203, 59, 125, 32, 22, 62, 227, 164, 178, 187, 25, 73, 217, 61, 90, 252, 227, 189, 231, 155, 37, 62, 66, 207, 59, 62, 1, 176, 232, 189, 65, 238, 30, 190, 167, 202, 189, 188, 142, 213, 83, 62, 79, 98, 17, 189, 87, 215, 48, 190, 135, 208, 204, 190, 209, 77, 251, 59, 254, 161, 1, 62, 9, 197, 38, 190, 115, 159, 198, 61, 10, 94, 185, 61, 36, 148, 93, 60, 222, 28, 95, 61, 178, 69, 64, 190, 204, 86, 100, 61, 83, 215, 6, 62, 203, 218, 36, 190, 183, 167, 208, 61, 64, 215, 214, 61, 70, 142, 135, 61, 76, 205, 253, 189, 119, 41, 15, 62, 52, 190, 233, 56, 23, 156, 8, 62, 39, 117, 46, 189, 43, 221, 33, 61, 151, 46, 41, 62, 214, 58, 17, 62, 218, 186, 172, 62, 25, 207, 93, 190, 209, 104, 106, 60, 12, 149, 177, 186, 14, 217, 15, 190, 229, 182, 51, 190, 185, 157, 40, 190, 3, 255, 112, 190, 212, 221, 65, 61, 231, 157, 23, 190, 134, 109, 205, 189, 166, 190, 14, 190, 129, 8, 51, 62, 51, 141, 43, 190, 179, 231, 57, 61, 79, 210, 173, 189, 190, 53, 172, 61, 242, 106, 28, 62, 246, 82, 168, 188, 156, 8, 25, 61, 188, 191, 197, 189, 253, 0, 95, 62, 51, 113, 51, 62, 30, 148, 81, 62, 114, 220, 136, 61, 224, 74, 137, 190, 16, 171, 37, 62, 246, 137, 45, 62, 242, 199, 18, 62, 201, 95, 164, 62, 241, 251, 86, 61, 245, 71, 226, 189, 122, 82, 111, 62, 250, 109, 97, 190, 232, 134, 138, 190, 122, 217, 114, 62, 25, 174, 107, 190, 55, 146, 46, 61, 118, 143, 52, 61, 165, 147, 164, 62, 164, 52, 177, 60, 233, 244, 33, 62, 5, 19, 41, 190, 216, 83, 16, 62, 170, 183, 23, 62, 184, 143, 217, 61, 133, 111, 151, 190, 210, 83, 12, 189, 183, 65, 142, 189, 52, 100, 44, 190, 53, 166, 98, 188, 42, 125, 29, 190, 193, 50, 194, 189, 154, 130, 179, 60, 70, 218, 35, 62, 157, 83, 94, 62, 198, 162, 52, 61, 184, 112, 11, 190, 79, 39, 239, 61, 11, 139, 164, 187, 142, 41, 110, 190, 46, 147, 12, 190, 227, 120, 130, 60, 16, 80, 23, 190, 70, 162, 28, 190, 66, 47, 34, 62, 178, 24, 60, 190, 113, 243, 74, 61, 227, 240, 54, 62, 210, 79, 9, 189, 108, 140, 37, 62, 159, 114, 131, 62, 240, 227, 51, 189, 75, 135, 227, 187, 84, 240, 208, 188, 230, 55, 215, 188, 210, 57, 47, 190, 173, 173, 29, 187, 235, 30, 69, 61, 66, 110, 19, 190, 125, 222, 84, 62, 148, 119, 162, 189, 139, 252, 140, 189, 42, 179, 108, 190, 250, 41, 227, 189, 129, 130, 15, 62, 217, 234, 149, 190, 174, 139, 79, 190, 85, 215, 163, 189, 184, 119, 171, 61, 100, 51, 79, 190, 153, 233, 48, 62, 252, 230, 253, 187, 226, 34, 143, 61, 236, 19, 156, 59, 211, 185, 9, 62, 158, 223, 20, 62, 39, 85, 22, 62, 143, 26, 36, 189, 121, 177, 171, 189, 79, 50, 92, 190, 159, 175, 132, 61, 244, 211, 22, 61, 155, 46, 15, 190, 165, 80, 53, 62, 225, 149, 236, 189, 168, 151, 159, 189, 68, 143, 133, 188, 143, 61, 40, 62, 156, 10, 150, 190, 6, 167, 156, 189, 223, 237, 88, 62, 164, 44, 104, 189, 7, 60, 16, 61, 140, 70, 217, 61, 183, 56, 24, 60, 164, 236, 145, 189, 180, 163, 18, 62, 33, 155, 8, 190, 27, 250, 176, 60, 38, 143, 5, 190, 168, 153, 236, 61, 91, 73, 119, 62, 139, 230, 82, 62, 196, 165, 26, 60, 13, 108, 119, 62, 1, 82, 243, 61, 12, 18, 23, 62, 164, 33, 109, 62, 13, 232, 68, 60, 169, 81, 4, 188, 102, 55, 147, 189, 193, 187, 173, 190, 207, 207, 188, 189, 113, 120, 126, 190, 67, 44, 148, 189, 194, 50, 38, 190, 198, 181, 217, 189, 92, 197, 34, 189, 31, 234, 243, 189, 41, 174, 13, 62, 54, 48, 4, 191, 174, 129, 240, 189, 205, 99, 126, 62, 197, 53, 48, 61, 120, 149, 52, 61, 41, 225, 142, 61, 7, 116, 233, 189, 219, 189, 33, 62, 63, 35, 119, 61, 242, 21, 87, 62, 154, 33, 66, 189, 80, 119, 184, 60, 11, 17, 163, 190, 206, 24, 3, 62, 155, 245, 20, 62, 104, 166, 158, 189, 5, 89, 122, 189, 32, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 184, 86, 4, 189, 205, 65, 197, 60, 77, 107, 11, 190, 234, 171, 237, 189, 26, 177, 109, 61, 79, 24, 15, 190, 242, 21, 162, 60, 187, 40, 43, 190, 30, 20, 183, 61, 29, 119, 197, 189, 190, 0, 54, 190, 119, 250, 79, 61, 11, 252, 175, 189, 168, 11, 29, 61, 156, 210, 130, 61, 57, 83, 9, 62, 179, 80, 244, 186, 40, 111, 64, 60, 228, 45, 229, 61, 172, 91, 3, 190, 185, 213, 138, 189, 137, 42, 20, 61, 132, 211, 250, 61, 70, 199, 231, 60, 74, 230, 180, 187, 233, 10, 62, 62, 147, 144, 52, 61, 26, 137, 5, 62, 33, 233, 47, 190, 135, 72, 115, 61, 127, 47, 132, 189, 140, 116, 205, 61, 211, 195, 89, 189, 79, 64, 66, 61, 118, 33, 139, 190, 60, 119, 158, 189, 236, 17, 4, 62, 12, 13, 94, 61, 228, 25, 10, 62, 167, 10, 203, 189, 104, 97, 13, 62, 8, 237, 3, 61, 25, 31, 142, 60, 37, 238, 160, 189, 47, 136, 69, 189, 101, 4, 97, 62, 96, 167, 205, 189, 214, 62, 45, 190, 148, 175, 46, 62, 85, 24, 154, 62, 93, 130, 1, 62, 10, 182, 213, 61, 236, 128, 65, 189, 22, 218, 234, 60, 143, 175, 213, 189, 86, 31, 7, 62, 88, 197, 112, 62, 205, 21, 16, 61, 100, 243, 39, 190, 11, 101, 106, 62, 157, 213, 152, 188, 205, 180, 28, 190, 127, 149, 18, 62, 202, 35, 24, 190, 217, 124, 144, 189, 6, 233, 154, 59, 224, 197, 84, 61, 226, 6, 111, 188, 4, 38, 168, 61, 233, 117, 165, 189, 16, 135, 21, 62, 11, 78, 137, 59, 118, 197, 21, 190, 129, 125, 62, 62, 119, 141, 157, 61, 150, 57, 178, 187, 100, 177, 107, 190, 231, 237, 96, 189, 45, 76, 164, 59, 199, 30, 113, 60, 241, 199, 129, 61, 214, 32, 168, 189, 87, 162, 115, 60, 88, 60, 65, 61, 66, 151, 5, 62, 19, 208, 195, 189, 20, 141, 29, 188, 218, 197, 24, 190, 71, 104, 227, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 222, 34, 190, 8, 224, 14, 190, 182, 149, 74, 62, 141, 190, 5, 190, 171, 39, 7, 60, 136, 203, 83, 190, 11, 219, 70, 190, 11, 111, 108, 62, 51, 26, 38, 190, 113, 30, 94, 62, 195, 150, 107, 62, 187, 137, 89, 189, 159, 17, 34, 187, 229, 155, 15, 62, 202, 3, 44, 62, 63, 75, 91, 61, 91, 169, 171, 61, 249, 44, 10, 62, 40, 151, 168, 189, 154, 226, 204, 188, 34, 100, 25, 190, 149, 232, 33, 189, 222, 204, 37, 61, 3, 42, 135, 59, 40, 199, 245, 61, 77, 112, 227, 61, 28, 164, 122, 61, 138, 65, 12, 190, 10, 5, 68, 62, 64, 86, 25, 190, 124, 83, 92, 190, 99, 17, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 66, 132, 60, 192, 46, 38, 60, 61, 235, 66, 62, 39, 194, 221, 189, 109, 132, 53, 190, 192, 100, 40, 190, 134, 28, 25, 189, 150, 167, 30, 191, 206, 231, 60, 61, 219, 205, 61, 62, 182, 189, 190, 62, 174, 65, 101, 190, 190, 58, 99, 61, 105, 203, 36, 62, 149, 248, 65, 62, 245, 252, 45, 62, 28, 234, 155, 190, 247, 60, 192, 190, 131, 72, 44, 62, 76, 161, 107, 189, 82, 213, 144, 62, 182, 218, 14, 190, 85, 254, 69, 190, 193, 60, 121, 62, 67, 123, 193, 189, 86, 126, 131, 190, 71, 95, 11, 190, 22, 59, 172, 189, 6, 157, 235, 190, 174, 196, 28, 61, 71, 158, 194, 189, 196, 196, 29, 190, 19, 69, 8, 62, 55, 71, 20, 62, 35, 225, 250, 189, 179, 246, 176, 61, 48, 228, 255, 189, 195, 127, 133, 62, 55, 238, 62, 62, 145, 190, 41, 62, 195, 121, 182, 61, 99, 237, 92, 190, 138, 52, 179, 189, 13, 249, 55, 190, 103, 13, 5, 62, 249, 163, 98, 189, 197, 21, 136, 61, 250, 145, 84, 188, 177, 209, 246, 189, 219, 117, 236, 188, 163, 88, 253, 189, 245, 152, 60, 190, 210, 182, 38, 62, 81, 216, 170, 189, 49, 156, 3, 190, 185, 206, 86, 61, 205, 201, 169, 189, 172, 24, 21, 61, 49, 182, 120, 190, 53, 240, 206, 61, 205, 10, 208, 188, 213, 212, 131, 189, 23, 193, 252, 61, 176, 182, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 114, 64, 62, 126, 123, 180, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 6, 246, 63, 141, 216, 216, 191, 161, 109, 120, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 4, 252, 63, 3, 74, 138, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}