// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 119, 184, 62, 121, 100, 124, 63, 127, 155, 218, 62, 115, 247, 76, 190, 162, 145, 243, 63, 97, 130, 17, 63, 102, 165, 4, 63, 237, 229, 134, 63, 138, 39, 172, 61, 10, 40, 64, 63, 47, 198, 189, 190, 77, 85, 12, 190, 7, 19, 131, 190, 85, 107, 89, 63, 61, 214, 150, 190, 24, 11, 79, 62, 176, 131, 93, 63, 176, 167, 69, 190, 136, 99, 63, 63, 81, 108, 119, 191, 87, 80, 199, 190, 224, 100, 187, 62, 216, 101, 94, 191, 96, 36, 193, 188, 120, 228, 26, 60, 138, 39, 107, 188, 94, 181, 143, 62, 106, 237, 172, 191, 154, 138, 216, 190, 135, 89, 125, 60, 138, 190, 25, 190, 206, 68, 91, 61, 68, 52, 209, 62, 170, 250, 202, 62, 18, 244, 144, 191, 58, 222, 172, 190, 22, 224, 6, 191, 14, 116, 162, 189, 177, 103, 4, 191, 128, 144, 90, 62, 213, 82, 168, 190, 185, 254, 3, 63, 124, 44, 134, 191, 181, 237, 214, 62, 97, 201, 99, 62, 178, 171, 40, 189, 228, 26, 210, 60, 56, 166, 52, 63, 61, 245, 220, 61, 26, 231, 63, 190, 48, 53, 17, 191, 164, 34, 150, 62, 115, 61, 162, 62, 213, 88, 49, 63, 115, 180, 25, 191, 25, 196, 114, 191, 102, 156, 50, 190, 138, 69, 31, 63, 135, 120, 74, 191, 194, 22, 253, 190, 2, 191, 44, 63, 189, 189, 136, 190, 140, 232, 19, 62, 16, 212, 110, 191, 126, 131, 242, 189, 30, 153, 18, 61, 45, 67, 166, 190, 103, 48, 121, 190, 83, 94, 23, 63, 72, 218, 14, 191, 251, 145, 29, 63, 98, 255, 55, 63, 82, 213, 243, 62, 143, 55, 142, 191, 51, 145, 151, 190, 81, 102, 241, 60, 200, 121, 215, 63, 126, 153, 24, 63, 122, 95, 49, 62, 103, 239, 92, 63, 188, 107, 149, 61, 241, 36, 175, 62, 107, 80, 157, 62, 20, 134, 209, 189, 188, 120, 241, 62, 174, 20, 139, 63, 231, 253, 110, 62, 205, 141, 133, 59, 120, 208, 89, 190, 78, 170, 14, 191, 188, 151, 181, 62, 84, 50, 138, 191, 2, 224, 132, 190, 181, 75, 251, 62, 206, 2, 84, 190, 114, 1, 179, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 170, 210, 190, 233, 107, 218, 62, 22, 88, 220, 62, 91, 118, 204, 60, 57, 14, 252, 61, 226, 110, 77, 61, 174, 101, 95, 191, 23, 242, 97, 62, 133, 73, 79, 61, 45, 6, 105, 62, 124, 134, 182, 189, 151, 208, 243, 61, 180, 190, 239, 190, 43, 62, 184, 61, 207, 36, 81, 63, 51, 86, 121, 190, 40, 253, 150, 62, 76, 52, 56, 63, 61, 194, 7, 63, 95, 40, 128, 190, 61, 72, 143, 62, 153, 85, 214, 62, 229, 22, 28, 63, 175, 7, 30, 190, 16, 155, 183, 190, 125, 84, 26, 63, 166, 38, 171, 62, 17, 244, 10, 63, 17, 73, 213, 189, 219, 30, 28, 190, 117, 188, 73, 190, 112, 94, 245, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 40, 131, 61, 77, 236, 21, 190, 71, 171, 238, 61, 182, 0, 143, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 209, 149, 0, 62, 185, 122, 207, 188, 51, 1, 157, 61, 197, 30, 4, 62, 80, 10, 55, 190, 22, 232, 254, 59, 220, 129, 155, 189, 252, 53, 27, 188, 218, 134, 0, 61, 215, 239, 1, 62, 218, 129, 70, 190, 76, 64, 44, 190, 219, 89, 68, 61, 166, 102, 44, 190, 51, 51, 16, 190, 10, 180, 0, 62, 26, 180, 155, 61, 246, 149, 227, 59, 240, 37, 221, 61, 76, 99, 43, 190, 187, 53, 3, 62, 152, 57, 157, 61, 140, 102, 46, 188, 163, 179, 62, 61, 216, 14, 193, 189, 103, 7, 23, 61, 148, 89, 54, 62, 158, 0, 15, 62, 206, 159, 96, 189, 149, 225, 40, 189, 204, 32, 91, 188, 249, 238, 189, 62, 62, 215, 217, 190, 34, 150, 26, 60, 76, 2, 209, 190, 224, 119, 17, 189, 70, 42, 212, 58, 121, 183, 88, 62, 83, 142, 175, 189, 225, 238, 23, 189, 201, 53, 75, 188, 242, 106, 127, 188, 117, 129, 24, 61, 97, 179, 112, 190, 244, 12, 96, 189, 243, 209, 27, 189, 107, 177, 81, 190, 195, 133, 196, 61, 127, 144, 186, 61, 74, 140, 27, 189, 103, 26, 134, 62, 45, 115, 10, 62, 251, 241, 21, 62, 20, 24, 181, 62, 208, 234, 183, 61, 165, 35, 107, 61, 65, 23, 101, 61, 233, 28, 17, 191, 107, 234, 128, 190, 20, 29, 24, 189, 254, 235, 26, 62, 224, 34, 77, 189, 122, 161, 167, 61, 156, 220, 144, 62, 31, 201, 230, 62, 162, 204, 80, 62, 215, 200, 40, 191, 147, 137, 99, 62, 137, 249, 134, 62, 89, 115, 13, 190, 69, 175, 143, 60, 62, 251, 2, 191, 239, 241, 148, 62, 95, 246, 236, 60, 12, 88, 41, 61, 119, 217, 151, 61, 233, 96, 148, 62, 114, 39, 177, 62, 206, 135, 246, 190, 138, 200, 175, 189, 185, 140, 127, 62, 183, 100, 223, 188, 40, 54, 62, 190, 220, 6, 227, 61, 45, 166, 208, 60, 161, 24, 87, 191, 44, 147, 5, 62, 7, 67, 128, 189, 103, 28, 206, 188, 75, 134, 22, 61, 162, 197, 249, 187, 18, 65, 190, 188, 224, 69, 62, 189, 44, 68, 97, 189, 15, 165, 212, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 60, 47, 208, 188, 0, 117, 30, 62, 60, 193, 54, 189, 254, 26, 58, 188, 19, 19, 28, 62, 17, 51, 39, 62, 43, 246, 242, 189, 171, 109, 13, 190, 21, 61, 36, 190, 4, 148, 14, 190, 92, 71, 129, 189, 172, 162, 127, 61, 112, 124, 229, 61, 98, 218, 84, 188, 202, 217, 183, 189, 188, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 82, 107, 204, 60, 169, 90, 135, 189, 251, 24, 111, 62, 157, 42, 128, 62, 67, 216, 10, 188, 66, 157, 160, 62, 19, 167, 9, 191, 200, 173, 138, 189, 44, 198, 175, 189, 136, 7, 142, 191, 57, 61, 186, 61, 71, 20, 60, 189, 2, 228, 21, 189, 71, 248, 98, 62, 106, 156, 24, 190, 17, 61, 235, 188, 5, 203, 122, 58, 90, 159, 85, 62, 194, 235, 149, 191, 137, 149, 185, 189, 86, 50, 59, 62, 196, 232, 158, 61, 202, 23, 181, 61, 148, 127, 119, 190, 176, 76, 58, 191, 23, 156, 243, 61, 144, 215, 159, 60, 188, 142, 200, 62, 165, 187, 18, 62, 129, 251, 219, 187, 83, 123, 21, 191, 147, 89, 87, 187, 134, 167, 60, 190, 6, 209, 50, 61, 134, 92, 29, 191, 41, 184, 88, 62, 230, 43, 34, 189, 56, 162, 75, 190, 63, 31, 238, 60, 68, 146, 171, 62, 33, 11, 113, 190, 38, 109, 122, 188, 197, 103, 23, 189, 82, 118, 89, 62, 89, 243, 224, 60, 134, 170, 87, 61, 247, 74, 37, 190, 198, 105, 29, 62, 196, 244, 133, 61, 133, 9, 42, 190, 234, 128, 139, 61, 67, 108, 147, 62, 154, 126, 166, 189, 219, 255, 197, 187, 153, 127, 41, 190, 255, 38, 205, 61, 93, 118, 13, 63, 94, 96, 0, 191, 134, 236, 27, 191, 95, 255, 21, 61, 104, 51, 36, 191, 127, 63, 121, 61, 68, 112, 150, 62, 12, 131, 44, 62, 130, 211, 2, 62, 42, 178, 25, 189, 37, 143, 168, 190, 225, 175, 163, 189, 225, 100, 212, 60, 191, 238, 66, 190, 66, 148, 225, 61, 97, 140, 126, 189, 207, 44, 71, 190, 2, 225, 67, 62, 141, 118, 54, 190, 191, 49, 210, 61, 182, 230, 154, 187, 185, 218, 30, 189, 87, 100, 139, 189, 65, 75, 73, 62, 8, 189, 70, 61, 56, 142, 39, 61, 38, 171, 37, 62, 54, 107, 51, 62, 77, 47, 171, 190, 219, 73, 103, 190, 238, 72, 207, 62, 144, 135, 190, 61, 52, 80, 133, 62, 206, 33, 249, 188, 201, 79, 226, 190, 187, 49, 73, 188, 146, 184, 96, 61, 9, 225, 73, 190, 28, 130, 88, 62, 224, 49, 46, 190, 59, 246, 109, 61, 3, 204, 195, 191, 39, 89, 135, 61, 251, 142, 247, 190, 118, 111, 201, 190, 57, 242, 63, 62, 119, 197, 71, 190, 12, 119, 78, 60, 95, 78, 15, 63, 93, 126, 191, 62, 55, 248, 31, 63, 89, 128, 144, 61, 201, 35, 205, 62, 7, 91, 192, 62, 4, 194, 5, 62, 143, 13, 20, 191, 250, 78, 182, 61, 101, 204, 89, 191, 193, 82, 108, 62, 232, 49, 69, 190, 146, 113, 16, 191, 166, 89, 156, 61, 55, 194, 158, 58, 37, 86, 32, 191, 143, 105, 62, 191, 102, 228, 232, 191, 115, 234, 69, 189, 149, 191, 18, 191, 118, 245, 128, 189, 109, 11, 223, 61, 20, 99, 255, 190, 187, 13, 126, 190, 28, 84, 210, 188, 164, 122, 187, 60, 45, 31, 77, 189, 145, 196, 228, 189, 104, 209, 191, 188, 103, 46, 47, 189, 74, 37, 242, 61, 157, 79, 26, 190, 106, 236, 236, 61, 63, 11, 30, 189, 71, 30, 173, 189, 26, 143, 52, 190, 135, 64, 3, 62, 15, 180, 244, 60, 220, 170, 80, 190, 74, 87, 50, 188, 215, 41, 222, 189, 250, 65, 151, 61, 33, 224, 22, 190, 187, 85, 67, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 203, 41, 57, 58, 160, 155, 245, 188, 13, 24, 21, 190, 198, 183, 15, 62, 25, 50, 218, 189, 192, 183, 101, 61, 112, 45, 171, 60, 212, 170, 205, 61, 153, 239, 132, 190, 187, 103, 11, 189, 236, 75, 119, 60, 136, 100, 135, 61, 109, 9, 151, 189, 139, 245, 69, 61, 129, 118, 250, 61, 228, 221, 152, 62, 136, 112, 26, 190, 111, 23, 180, 61, 217, 74, 2, 189, 72, 163, 167, 61, 123, 46, 35, 59, 38, 54, 214, 189, 83, 246, 184, 62, 30, 183, 176, 61, 78, 68, 139, 62, 239, 47, 57, 62, 113, 3, 108, 62, 41, 5, 57, 62, 154, 255, 51, 62, 144, 255, 153, 62, 223, 196, 74, 61, 79, 175, 70, 62, 204, 50, 153, 189, 221, 216, 87, 62, 40, 152, 200, 61, 46, 224, 39, 62, 234, 221, 6, 190, 196, 26, 156, 60, 62, 110, 137, 62, 121, 37, 64, 190, 237, 67, 22, 191, 239, 104, 67, 62, 244, 44, 195, 190, 189, 36, 94, 62, 6, 65, 103, 62, 44, 101, 0, 191, 200, 182, 49, 189, 127, 204, 111, 62, 236, 124, 35, 190, 187, 142, 245, 61, 27, 146, 163, 190, 45, 241, 7, 62, 95, 224, 6, 191, 154, 220, 186, 189, 102, 112, 181, 62, 29, 220, 101, 62, 231, 248, 58, 190, 180, 183, 120, 188, 222, 89, 152, 61, 191, 73, 156, 61, 52, 212, 136, 190, 45, 174, 203, 62, 80, 39, 169, 62, 26, 182, 98, 60, 200, 197, 158, 187, 34, 124, 200, 61, 22, 160, 42, 189, 126, 141, 158, 62, 78, 33, 24, 191, 4, 88, 20, 191, 253, 129, 159, 62, 214, 76, 41, 190, 226, 101, 71, 188, 92, 135, 46, 191, 209, 117, 49, 61, 25, 187, 118, 62, 19, 82, 48, 62, 111, 156, 46, 190, 212, 119, 170, 190, 161, 176, 45, 62, 165, 82, 73, 189, 100, 228, 80, 60, 195, 120, 180, 189, 106, 227, 238, 189, 46, 237, 16, 62, 189, 83, 86, 62, 205, 195, 197, 190, 24, 153, 54, 190, 9, 196, 37, 62, 45, 121, 27, 62, 122, 205, 191, 190, 254, 82, 23, 190, 202, 227, 153, 62, 136, 192, 237, 189, 182, 13, 140, 189, 160, 93, 32, 190, 209, 166, 126, 191, 3, 44, 21, 189, 249, 123, 135, 62, 110, 65, 178, 61, 182, 240, 20, 190, 153, 103, 82, 188, 92, 233, 13, 191, 55, 6, 85, 190, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 177, 84, 14, 191, 242, 95, 71, 62, 221, 41, 231, 189, 13, 186, 241, 62, 82, 192, 140, 62, 203, 243, 83, 190, 115, 63, 44, 61, 186, 214, 193, 62, 213, 42, 110, 190, 73, 148, 126, 190, 3, 80, 179, 190, 35, 49, 217, 61, 221, 46, 58, 191, 206, 244, 234, 189, 105, 40, 255, 61, 227, 115, 130, 62, 100, 188, 97, 189, 53, 187, 153, 61, 210, 207, 65, 190, 80, 66, 27, 62, 49, 102, 81, 190, 120, 200, 70, 187, 137, 213, 89, 62, 64, 72, 31, 62, 168, 164, 36, 189, 240, 5, 25, 57, 207, 240, 157, 189, 32, 41, 31, 62, 126, 75, 70, 191, 66, 40, 84, 189, 7, 83, 2, 62, 45, 124, 180, 190, 243, 151, 22, 191, 101, 237, 150, 60, 97, 197, 113, 190, 101, 195, 138, 61, 178, 97, 129, 62, 143, 184, 162, 187, 147, 67, 5, 190, 126, 20, 110, 62, 23, 212, 169, 189, 129, 206, 21, 187, 133, 252, 34, 190, 226, 228, 23, 62, 192, 64, 151, 190, 97, 251, 58, 62, 212, 158, 10, 60, 128, 140, 61, 61, 168, 149, 243, 190, 65, 30, 34, 62, 131, 117, 110, 62, 89, 27, 77, 60, 109, 159, 225, 189, 108, 113, 89, 61, 142, 190, 190, 61, 155, 59, 35, 189, 191, 4, 143, 62, 58, 93, 62, 189, 83, 18, 111, 190, 85, 20, 226, 189, 62, 183, 85, 191, 74, 60, 49, 191, 95, 143, 142, 62, 198, 205, 210, 61, 129, 37, 3, 191, 240, 154, 191, 190, 170, 39, 129, 61, 122, 106, 242, 61, 243, 243, 130, 190, 18, 127, 65, 59, 60, 245, 2, 190, 36, 144, 243, 62, 72, 158, 207, 61, 223, 184, 74, 191, 48, 50, 214, 189, 166, 156, 126, 61, 87, 227, 187, 190, 234, 116, 166, 61, 98, 92, 248, 190, 252, 47, 111, 61, 193, 9, 15, 62, 242, 164, 141, 61, 238, 223, 157, 189, 34, 111, 67, 62, 246, 238, 81, 62, 8, 47, 76, 191, 143, 39, 43, 190, 154, 81, 53, 61, 19, 15, 65, 61, 245, 90, 155, 189, 41, 246, 85, 190, 97, 211, 143, 188, 47, 242, 3, 191, 176, 223, 197, 61, 107, 49, 139, 61, 118, 181, 213, 61, 28, 66, 184, 61, 229, 232, 132, 190, 82, 122, 92, 62, 140, 43, 189, 190, 31, 89, 242, 60, 14, 46, 106, 62, 223, 46, 241, 189, 99, 16, 162, 188, 107, 5, 11, 62, 125, 176, 13, 62, 20, 127, 218, 61, 134, 240, 180, 189, 159, 187, 171, 62, 47, 22, 130, 61, 218, 81, 7, 61, 30, 220, 246, 189, 61, 23, 55, 62, 75, 103, 54, 191, 85, 252, 42, 189, 4, 21, 196, 61, 59, 138, 35, 191, 231, 179, 131, 62, 212, 173, 175, 190, 15, 35, 27, 191, 128, 95, 188, 189, 164, 196, 165, 190, 43, 170, 134, 61, 172, 237, 204, 189, 231, 38, 243, 62, 96, 96, 77, 62, 16, 244, 212, 61, 88, 255, 9, 190, 10, 96, 68, 62, 7, 56, 206, 190, 65, 130, 142, 62, 153, 212, 13, 190, 73, 3, 81, 190, 99, 254, 212, 62, 13, 11, 6, 191, 188, 234, 157, 191, 143, 214, 69, 62, 241, 33, 165, 61, 254, 31, 52, 61, 153, 25, 118, 190, 243, 114, 52, 62, 233, 142, 186, 60, 173, 64, 80, 62, 213, 254, 0, 191, 37, 182, 105, 62, 87, 140, 22, 191, 82, 233, 163, 190, 198, 48, 148, 190, 53, 2, 232, 189, 214, 92, 14, 62, 25, 241, 233, 190, 195, 170, 203, 190, 14, 160, 144, 191, 55, 30, 175, 190, 216, 49, 185, 62, 53, 135, 77, 189, 115, 174, 36, 63, 189, 232, 60, 62, 34, 134, 10, 191, 202, 78, 144, 190, 172, 142, 31, 191, 51, 246, 21, 191, 86, 67, 22, 58, 27, 114, 191, 62, 17, 206, 230, 60, 50, 164, 30, 190, 150, 146, 78, 189, 10, 142, 201, 62, 104, 216, 225, 61, 152, 18, 219, 190, 31, 39, 221, 61, 244, 41, 87, 62, 246, 170, 179, 190, 23, 191, 167, 61, 185, 176, 153, 190, 185, 76, 158, 189, 224, 64, 89, 61, 234, 154, 184, 187, 89, 49, 166, 61, 247, 27, 86, 189, 128, 131, 98, 62, 41, 228, 176, 190, 189, 48, 78, 62, 201, 214, 85, 190, 100, 30, 67, 190, 248, 159, 16, 189, 251, 91, 76, 62, 147, 23, 13, 62, 186, 182, 101, 191, 25, 64, 215, 189, 180, 71, 55, 62, 197, 240, 1, 59, 158, 74, 101, 189, 1, 183, 37, 190, 59, 88, 240, 188, 255, 167, 156, 61, 107, 215, 76, 190, 104, 93, 171, 60, 91, 15, 255, 61, 16, 79, 7, 189, 177, 137, 78, 189, 48, 156, 21, 190, 22, 20, 77, 190, 111, 180, 211, 189, 176, 90, 192, 61, 26, 42, 196, 61, 227, 226, 85, 190, 151, 136, 170, 188, 16, 215, 43, 62, 36, 128, 199, 61, 0, 87, 120, 189, 102, 83, 78, 62, 128, 189, 142, 189, 12, 251, 85, 190, 226, 227, 171, 188, 48, 49, 84, 61, 124, 61, 65, 190, 197, 161, 220, 189, 197, 39, 146, 189, 137, 182, 176, 60, 250, 128, 104, 190, 40, 42, 11, 62, 156, 92, 156, 60, 214, 236, 75, 190, 23, 134, 203, 62, 95, 47, 183, 189, 171, 140, 68, 62, 69, 157, 105, 190, 103, 137, 74, 190, 227, 180, 80, 62, 117, 122, 171, 61, 150, 171, 236, 190, 127, 199, 141, 62, 187, 167, 71, 61, 103, 194, 146, 62, 119, 195, 185, 61, 57, 109, 156, 62, 108, 5, 63, 62, 197, 32, 203, 188, 2, 203, 236, 188, 52, 103, 62, 62, 164, 44, 142, 188, 239, 104, 126, 60, 198, 33, 136, 190, 125, 198, 7, 62, 218, 84, 148, 189, 53, 48, 207, 190, 46, 48, 246, 189, 45, 87, 200, 189, 80, 119, 126, 61, 95, 243, 71, 62, 163, 170, 49, 62, 67, 92, 153, 62, 161, 30, 74, 62, 15, 90, 155, 60, 154, 107, 166, 62, 182, 194, 157, 190, 205, 86, 71, 191, 2, 83, 196, 190, 13, 186, 2, 62, 131, 40, 140, 187, 14, 12, 37, 190, 186, 195, 141, 62, 164, 22, 58, 62, 253, 139, 32, 190, 251, 20, 26, 190, 73, 2, 9, 190, 91, 122, 99, 62, 111, 145, 246, 188, 155, 187, 73, 61, 229, 125, 212, 62, 157, 10, 168, 61, 203, 46, 10, 62, 226, 123, 17, 188, 84, 79, 64, 62, 212, 83, 162, 62, 177, 208, 29, 191, 183, 118, 98, 190, 194, 169, 37, 62, 221, 7, 146, 60, 216, 169, 238, 62, 250, 42, 27, 191, 83, 199, 65, 191, 106, 163, 27, 190, 149, 54, 187, 60, 40, 245, 224, 189, 172, 133, 102, 61, 126, 43, 31, 62, 105, 79, 141, 59, 128, 88, 139, 60, 92, 229, 108, 62, 164, 69, 164, 189, 209, 255, 34, 62, 89, 15, 125, 62, 40, 144, 205, 190, 229, 96, 188, 59, 111, 212, 106, 188, 188, 130, 93, 190, 188, 140, 86, 190, 142, 50, 41, 61, 199, 114, 170, 61, 20, 237, 210, 61, 206, 150, 160, 189, 71, 167, 196, 190, 240, 82, 104, 189, 94, 12, 194, 189, 119, 56, 107, 190, 44, 46, 65, 190, 70, 16, 130, 62, 185, 6, 255, 59, 17, 90, 68, 61, 208, 27, 4, 190, 41, 193, 195, 190, 72, 147, 19, 62, 231, 88, 85, 62, 113, 172, 55, 61, 92, 144, 134, 61, 214, 117, 48, 190, 152, 18, 135, 190, 63, 29, 26, 189, 121, 139, 192, 189, 137, 37, 42, 63, 4, 3, 30, 62, 20, 171, 1, 62, 102, 109, 5, 62, 121, 76, 13, 187, 236, 49, 175, 62, 248, 31, 11, 62, 134, 73, 134, 190, 252, 185, 71, 191, 50, 85, 214, 58, 96, 242, 91, 62, 64, 251, 133, 188, 137, 194, 185, 190, 173, 22, 132, 191, 189, 119, 85, 190, 234, 79, 47, 62, 196, 202, 143, 190, 245, 59, 110, 190, 99, 17, 85, 62, 135, 136, 224, 61, 125, 113, 2, 191, 148, 15, 37, 191, 251, 162, 80, 190, 67, 150, 49, 62, 127, 45, 201, 190, 0, 189, 180, 61, 17, 27, 26, 62, 61, 171, 31, 191, 207, 112, 107, 189, 76, 241, 38, 62, 57, 107, 118, 62, 62, 252, 207, 61, 245, 25, 190, 189, 208, 211, 216, 61, 50, 73, 139, 62, 68, 145, 152, 62, 26, 221, 207, 62, 241, 214, 66, 191, 43, 11, 195, 188, 1, 83, 16, 60, 170, 225, 138, 191, 7, 1, 59, 190, 26, 113, 75, 190, 51, 216, 165, 190, 215, 170, 240, 61, 208, 230, 108, 190, 152, 163, 2, 190, 81, 207, 230, 189, 70, 233, 78, 62, 180, 220, 79, 191, 239, 243, 135, 61, 237, 59, 128, 189, 59, 165, 16, 188, 203, 64, 45, 62, 37, 223, 129, 189, 137, 222, 43, 191, 2, 192, 148, 189, 6, 63, 144, 62, 119, 149, 129, 62, 51, 85, 120, 62, 43, 88, 98, 60, 49, 12, 39, 191, 190, 159, 174, 62, 236, 104, 9, 62, 189, 135, 42, 189, 229, 160, 157, 62, 215, 32, 185, 60, 33, 13, 225, 189, 42, 108, 100, 62, 160, 131, 42, 191, 74, 251, 50, 190, 176, 147, 184, 62, 184, 215, 202, 190, 37, 10, 220, 61, 119, 79, 117, 189, 227, 203, 167, 62, 196, 254, 5, 62, 219, 56, 185, 59, 220, 209, 120, 190, 21, 149, 254, 61, 80, 104, 20, 62, 60, 187, 244, 189, 24, 100, 231, 190, 47, 88, 218, 61, 166, 77, 50, 190, 229, 131, 75, 190, 0, 146, 31, 190, 4, 143, 64, 191, 233, 131, 3, 190, 249, 124, 164, 187, 229, 9, 9, 62, 88, 9, 172, 62, 239, 246, 37, 188, 171, 94, 241, 190, 174, 198, 186, 62, 38, 248, 138, 188, 32, 250, 144, 191, 19, 98, 122, 190, 147, 114, 37, 187, 217, 98, 236, 190, 44, 162, 145, 190, 51, 253, 182, 62, 166, 16, 33, 62, 51, 171, 16, 63, 194, 219, 152, 62, 154, 138, 16, 63, 179, 143, 92, 61, 156, 28, 117, 62, 119, 167, 204, 62, 220, 139, 210, 188, 108, 26, 169, 189, 191, 231, 158, 189, 134, 179, 212, 190, 104, 193, 250, 61, 85, 164, 180, 61, 11, 122, 10, 191, 107, 225, 134, 62, 148, 73, 29, 62, 219, 177, 245, 190, 45, 158, 23, 190, 151, 53, 147, 191, 72, 254, 155, 189, 153, 219, 36, 191, 174, 139, 79, 190, 1, 95, 12, 190, 66, 201, 42, 62, 125, 61, 244, 62, 241, 151, 60, 62, 212, 249, 218, 189, 13, 77, 145, 62, 171, 5, 195, 189, 205, 101, 160, 62, 115, 138, 2, 63, 110, 13, 210, 190, 233, 115, 74, 190, 217, 26, 240, 189, 66, 245, 253, 190, 122, 119, 112, 61, 14, 145, 102, 190, 188, 32, 246, 189, 138, 106, 26, 62, 69, 127, 110, 190, 237, 153, 211, 189, 128, 170, 96, 189, 6, 35, 213, 61, 210, 49, 62, 191, 233, 44, 152, 190, 25, 142, 64, 62, 102, 236, 54, 190, 114, 223, 2, 189, 77, 174, 39, 61, 241, 80, 238, 190, 15, 107, 237, 189, 8, 168, 145, 62, 213, 85, 150, 189, 232, 18, 223, 61, 112, 30, 212, 189, 108, 176, 210, 190, 254, 0, 175, 62, 253, 102, 44, 62, 36, 134, 186, 189, 204, 139, 166, 62, 143, 77, 75, 62, 239, 9, 153, 62, 139, 140, 167, 62, 115, 3, 8, 191, 49, 189, 95, 189, 143, 11, 26, 189, 242, 164, 154, 191, 243, 192, 111, 189, 85, 89, 166, 190, 198, 236, 94, 190, 93, 240, 154, 189, 58, 165, 154, 190, 70, 73, 36, 189, 45, 216, 240, 189, 75, 125, 32, 62, 116, 151, 148, 191, 149, 12, 8, 190, 42, 250, 143, 62, 236, 169, 68, 190, 199, 125, 137, 61, 110, 99, 172, 60, 201, 203, 37, 191, 136, 190, 28, 62, 100, 207, 0, 62, 181, 223, 150, 62, 85, 5, 35, 59, 103, 178, 253, 188, 24, 123, 42, 191, 198, 59, 193, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 248, 15, 73, 62, 184, 12, 23, 61, 40, 63, 60, 62, 33, 19, 61, 190, 0, 126, 255, 61, 194, 41, 62, 62, 77, 140, 196, 62, 137, 99, 246, 189, 167, 196, 89, 60, 99, 3, 90, 191, 47, 162, 92, 188, 164, 107, 237, 61, 24, 54, 23, 62, 198, 115, 221, 60, 41, 199, 165, 190, 32, 103, 100, 62, 176, 110, 178, 61, 59, 163, 229, 189, 181, 121, 132, 190, 163, 21, 134, 60, 153, 22, 114, 62, 12, 151, 25, 191, 114, 127, 161, 190, 133, 88, 9, 62, 15, 225, 242, 62, 62, 45, 237, 61, 253, 23, 228, 61, 242, 89, 9, 189, 118, 210, 187, 61, 147, 7, 142, 188, 94, 154, 105, 62, 63, 205, 19, 63, 95, 183, 32, 190, 98, 25, 126, 191, 11, 139, 112, 62, 152, 38, 182, 185, 166, 190, 12, 190, 165, 44, 3, 62, 6, 77, 181, 190, 149, 6, 192, 60, 167, 118, 248, 60, 56, 166, 193, 60, 228, 187, 90, 190, 112, 150, 48, 61, 27, 18, 21, 189, 176, 107, 70, 62, 89, 95, 211, 188, 158, 30, 201, 190, 86, 152, 105, 62, 118, 156, 46, 61, 159, 84, 105, 189, 254, 53, 79, 190, 139, 160, 48, 189, 231, 166, 163, 60, 212, 22, 223, 61, 64, 34, 1, 190, 62, 44, 82, 191, 212, 203, 37, 190, 223, 163, 62, 60, 56, 75, 26, 62, 167, 58, 91, 190, 136, 128, 171, 59, 238, 158, 252, 190, 10, 91, 60, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 113, 42, 190, 60, 149, 117, 190, 104, 8, 55, 62, 167, 185, 14, 190, 44, 38, 72, 61, 17, 63, 27, 190, 41, 25, 69, 190, 169, 101, 126, 62, 174, 201, 70, 190, 185, 96, 177, 62, 26, 93, 133, 62, 157, 121, 185, 60, 159, 17, 34, 187, 7, 90, 44, 62, 242, 175, 55, 62, 36, 52, 97, 61, 144, 196, 186, 61, 250, 156, 233, 61, 213, 131, 175, 188, 86, 78, 16, 190, 151, 230, 251, 189, 230, 183, 134, 61, 167, 159, 133, 61, 65, 182, 198, 189, 171, 33, 21, 62, 104, 185, 190, 61, 8, 91, 179, 61, 124, 84, 58, 190, 149, 89, 68, 62, 248, 59, 28, 190, 98, 90, 171, 190, 163, 10, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 155, 36, 60, 74, 69, 96, 62, 12, 54, 162, 62, 123, 136, 220, 189, 227, 19, 167, 190, 54, 182, 11, 191, 138, 76, 1, 190, 244, 84, 158, 191, 237, 2, 149, 60, 207, 222, 112, 62, 42, 188, 248, 62, 32, 20, 174, 190, 190, 58, 99, 61, 195, 183, 150, 62, 12, 170, 20, 63, 151, 63, 139, 62, 145, 94, 225, 190, 142, 3, 90, 191, 7, 166, 163, 62, 208, 116, 240, 60, 16, 149, 3, 63, 100, 130, 240, 190, 211, 172, 27, 190, 21, 52, 37, 63, 176, 156, 173, 190, 141, 166, 156, 190, 129, 110, 89, 191, 188, 12, 81, 190, 213, 212, 64, 191, 44, 61, 27, 61, 200, 221, 230, 62, 113, 86, 107, 190, 104, 56, 6, 62, 12, 198, 0, 62, 142, 202, 106, 190, 185, 108, 177, 61, 146, 5, 135, 190, 230, 40, 170, 62, 142, 6, 48, 61, 250, 210, 76, 62, 108, 189, 136, 61, 48, 231, 138, 190, 134, 60, 151, 60, 133, 30, 246, 190, 103, 13, 5, 62, 242, 148, 42, 61, 44, 251, 55, 62, 214, 59, 174, 189, 75, 93, 254, 189, 110, 30, 244, 61, 88, 184, 77, 190, 66, 89, 64, 190, 181, 61, 43, 62, 216, 102, 21, 190, 91, 240, 46, 190, 24, 139, 252, 61, 103, 40, 37, 190, 200, 194, 182, 61, 163, 101, 102, 60, 229, 200, 149, 62, 220, 177, 49, 189, 251, 241, 131, 189, 96, 107, 174, 59, 71, 79, 142, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 182, 157, 62, 37, 141, 78, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 27, 218, 63, 165, 11, 154, 61, 51, 50, 3, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 231, 137, 64, 187, 56, 149, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}