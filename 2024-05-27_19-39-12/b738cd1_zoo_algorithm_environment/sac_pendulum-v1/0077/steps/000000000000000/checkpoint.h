// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 235, 141, 190, 4, 62, 1, 63, 26, 105, 162, 62, 168, 1, 249, 190, 64, 101, 72, 62, 19, 115, 5, 63, 153, 14, 240, 62, 160, 67, 244, 62, 73, 241, 136, 60, 217, 125, 104, 62, 0, 24, 195, 190, 55, 214, 88, 190, 35, 145, 237, 61, 87, 71, 240, 62, 5, 68, 169, 190, 80, 115, 161, 61, 62, 30, 2, 63, 127, 27, 175, 61, 68, 56, 236, 190, 133, 43, 193, 190, 120, 31, 18, 191, 60, 12, 100, 62, 251, 80, 18, 191, 109, 163, 101, 189, 52, 31, 111, 62, 190, 117, 202, 189, 153, 217, 241, 61, 223, 203, 19, 191, 69, 102, 107, 190, 155, 152, 135, 187, 125, 67, 36, 62, 12, 168, 28, 190, 89, 192, 154, 62, 239, 106, 72, 62, 105, 115, 137, 190, 179, 175, 17, 191, 119, 243, 7, 191, 124, 111, 169, 62, 239, 17, 140, 190, 219, 108, 135, 189, 207, 25, 13, 191, 246, 31, 16, 63, 91, 184, 14, 191, 241, 66, 247, 62, 208, 112, 132, 62, 107, 17, 46, 190, 59, 133, 135, 190, 41, 92, 227, 62, 98, 191, 14, 61, 120, 72, 153, 62, 126, 251, 249, 190, 175, 60, 149, 62, 134, 127, 3, 191, 230, 227, 8, 63, 181, 99, 131, 190, 203, 123, 84, 190, 103, 136, 161, 190, 1, 91, 240, 62, 72, 242, 240, 189, 205, 178, 250, 190, 145, 166, 164, 62, 189, 21, 155, 190, 76, 232, 107, 62, 168, 227, 233, 190, 165, 38, 176, 189, 176, 60, 194, 61, 121, 70, 98, 190, 41, 191, 183, 190, 175, 103, 232, 62, 58, 90, 9, 191, 101, 109, 232, 190, 75, 212, 15, 63, 207, 248, 34, 62, 162, 206, 17, 191, 87, 163, 234, 189, 3, 11, 57, 187, 189, 106, 230, 189, 153, 34, 242, 62, 199, 165, 210, 61, 241, 68, 207, 61, 153, 233, 184, 61, 239, 131, 225, 62, 209, 149, 171, 60, 63, 119, 29, 190, 157, 156, 212, 188, 20, 218, 140, 62, 22, 194, 83, 62, 105, 193, 223, 61, 79, 64, 146, 62, 176, 33, 193, 190, 204, 53, 194, 189, 133, 71, 157, 190, 19, 229, 90, 190, 59, 135, 30, 190, 163, 97, 203, 190, 151, 231, 123, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 159, 19, 191, 11, 16, 132, 61, 42, 103, 15, 63, 219, 103, 186, 62, 6, 198, 49, 190, 108, 32, 151, 61, 59, 128, 19, 191, 229, 45, 118, 189, 37, 149, 7, 189, 126, 81, 54, 190, 151, 140, 136, 190, 226, 68, 188, 62, 199, 41, 135, 190, 205, 123, 91, 61, 22, 137, 4, 63, 83, 216, 148, 61, 80, 105, 7, 63, 214, 159, 251, 62, 81, 225, 4, 62, 244, 232, 244, 189, 254, 241, 164, 61, 158, 0, 132, 62, 77, 77, 7, 63, 31, 217, 14, 190, 125, 121, 211, 190, 45, 57, 242, 62, 116, 228, 16, 63, 2, 55, 93, 62, 8, 88, 143, 190, 99, 91, 52, 189, 87, 28, 238, 190, 226, 163, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 29, 194, 61, 62, 227, 227, 189, 2, 139, 2, 62, 46, 189, 163, 61, 164, 133, 0, 190, 217, 38, 19, 190, 9, 101, 186, 189, 211, 180, 45, 62, 204, 127, 47, 59, 80, 160, 217, 61, 33, 177, 36, 62, 38, 182, 42, 190, 45, 149, 253, 59, 47, 166, 46, 189, 100, 173, 161, 60, 131, 56, 143, 61, 130, 243, 10, 62, 8, 152, 30, 190, 172, 137, 30, 190, 196, 48, 112, 61, 137, 81, 15, 190, 168, 74, 221, 189, 25, 128, 40, 62, 186, 60, 239, 61, 128, 199, 234, 60, 108, 89, 17, 62, 228, 248, 22, 190, 254, 219, 10, 62, 211, 159, 215, 61, 27, 89, 145, 187, 77, 76, 74, 61, 88, 201, 115, 189, 49, 82, 65, 189, 241, 250, 255, 61, 114, 158, 207, 189, 33, 106, 117, 189, 42, 219, 168, 189, 20, 233, 24, 190, 154, 64, 18, 62, 152, 107, 51, 190, 187, 138, 193, 189, 76, 217, 23, 190, 119, 203, 224, 189, 110, 96, 91, 61, 252, 214, 120, 60, 207, 198, 164, 186, 132, 172, 172, 61, 150, 49, 95, 60, 52, 231, 21, 190, 22, 211, 161, 59, 219, 176, 171, 189, 207, 184, 159, 189, 252, 167, 17, 190, 82, 15, 119, 61, 12, 200, 237, 61, 116, 135, 209, 61, 134, 12, 50, 190, 107, 85, 15, 62, 68, 252, 98, 59, 247, 140, 255, 189, 111, 37, 187, 61, 231, 76, 77, 188, 245, 117, 239, 61, 89, 90, 195, 61, 102, 17, 33, 190, 104, 102, 212, 189, 161, 251, 83, 189, 245, 39, 168, 189, 187, 103, 123, 189, 20, 38, 174, 61, 241, 8, 197, 61, 63, 15, 52, 62, 201, 36, 161, 188, 212, 54, 18, 189, 68, 20, 193, 60, 250, 196, 23, 62, 238, 111, 7, 190, 209, 116, 28, 190, 217, 255, 148, 189, 148, 48, 47, 62, 101, 46, 57, 189, 137, 38, 128, 189, 248, 43, 24, 62, 207, 21, 219, 61, 87, 199, 231, 61, 254, 204, 125, 188, 137, 71, 13, 190, 144, 26, 0, 62, 52, 17, 122, 187, 90, 10, 13, 190, 207, 143, 34, 62, 27, 162, 2, 190, 172, 51, 22, 190, 22, 203, 84, 61, 8, 55, 3, 190, 33, 110, 24, 190, 246, 10, 189, 60, 140, 232, 108, 186, 88, 8, 97, 60, 25, 124, 227, 188, 140, 160, 208, 188, 229, 82, 1, 62, 20, 1, 7, 190, 21, 191, 238, 189, 210, 139, 225, 61, 125, 219, 209, 61, 237, 25, 56, 61, 223, 22, 1, 190, 14, 82, 186, 61, 103, 213, 145, 189, 201, 97, 60, 188, 80, 149, 23, 62, 223, 185, 204, 187, 174, 255, 12, 186, 19, 19, 28, 62, 216, 49, 46, 62, 97, 23, 233, 189, 92, 191, 25, 190, 70, 55, 36, 190, 126, 50, 28, 190, 92, 71, 129, 189, 90, 20, 168, 61, 77, 80, 15, 62, 223, 204, 238, 60, 204, 52, 192, 189, 253, 170, 22, 190, 150, 62, 49, 190, 115, 183, 187, 189, 201, 156, 73, 61, 159, 76, 53, 189, 38, 63, 52, 189, 72, 199, 5, 61, 194, 108, 14, 190, 149, 172, 130, 61, 157, 218, 98, 61, 46, 89, 128, 189, 88, 198, 120, 189, 57, 168, 167, 189, 237, 229, 19, 62, 9, 100, 4, 189, 21, 145, 52, 62, 43, 26, 49, 62, 6, 0, 250, 189, 31, 89, 10, 61, 199, 203, 1, 190, 200, 151, 35, 62, 192, 16, 50, 190, 21, 38, 6, 190, 47, 138, 10, 62, 18, 91, 39, 62, 142, 78, 139, 61, 248, 230, 39, 190, 141, 205, 30, 62, 235, 201, 79, 61, 46, 8, 33, 190, 212, 34, 9, 62, 166, 207, 214, 61, 98, 182, 33, 61, 188, 158, 142, 189, 190, 160, 31, 190, 61, 53, 202, 189, 124, 217, 26, 62, 103, 188, 11, 190, 104, 113, 56, 59, 130, 23, 153, 189, 180, 35, 50, 62, 117, 202, 139, 189, 154, 17, 166, 61, 13, 218, 200, 189, 44, 232, 5, 189, 132, 97, 13, 189, 47, 1, 105, 61, 149, 152, 149, 61, 190, 6, 4, 62, 155, 58, 252, 60, 175, 32, 246, 189, 30, 185, 225, 187, 170, 102, 39, 190, 145, 138, 213, 189, 16, 120, 3, 62, 212, 239, 154, 61, 107, 62, 241, 61, 124, 249, 247, 189, 130, 172, 33, 61, 199, 167, 0, 62, 205, 174, 17, 190, 9, 14, 189, 188, 219, 127, 193, 188, 66, 65, 77, 61, 226, 39, 87, 61, 213, 240, 161, 60, 229, 215, 197, 189, 93, 37, 7, 62, 202, 148, 1, 189, 129, 176, 25, 61, 226, 167, 224, 189, 69, 185, 8, 62, 24, 1, 97, 61, 114, 184, 0, 62, 227, 155, 9, 190, 41, 106, 180, 189, 80, 66, 206, 61, 227, 44, 15, 190, 209, 24, 246, 61, 210, 133, 221, 61, 191, 6, 18, 189, 114, 120, 178, 61, 49, 130, 21, 190, 69, 255, 239, 61, 66, 210, 202, 189, 159, 24, 138, 61, 80, 68, 29, 62, 15, 62, 114, 189, 10, 114, 23, 190, 215, 213, 21, 62, 124, 144, 107, 189, 10, 76, 248, 60, 156, 104, 99, 189, 179, 85, 188, 189, 30, 232, 33, 62, 195, 15, 167, 61, 153, 56, 168, 189, 250, 22, 230, 61, 250, 143, 178, 189, 66, 200, 130, 61, 191, 188, 241, 189, 87, 172, 33, 189, 38, 185, 251, 189, 21, 222, 14, 61, 50, 104, 5, 61, 216, 53, 214, 61, 190, 126, 113, 61, 105, 129, 184, 189, 168, 0, 239, 61, 218, 143, 4, 190, 253, 212, 140, 60, 80, 93, 169, 61, 193, 32, 161, 61, 29, 134, 94, 60, 53, 147, 1, 190, 209, 167, 209, 189, 6, 24, 32, 190, 175, 20, 206, 188, 87, 42, 65, 61, 103, 81, 104, 189, 16, 160, 171, 189, 73, 156, 218, 61, 10, 41, 218, 61, 214, 99, 86, 189, 37, 146, 115, 189, 184, 91, 109, 61, 77, 244, 192, 189, 200, 135, 159, 61, 20, 59, 118, 188, 68, 116, 26, 190, 36, 142, 187, 189, 236, 214, 247, 186, 31, 57, 36, 61, 216, 246, 169, 188, 209, 225, 206, 189, 104, 209, 191, 188, 238, 48, 18, 189, 74, 37, 242, 61, 30, 110, 20, 190, 172, 18, 15, 62, 43, 229, 7, 189, 34, 155, 122, 189, 234, 96, 47, 190, 135, 64, 3, 62, 32, 170, 78, 61, 239, 198, 49, 190, 23, 134, 184, 59, 215, 41, 222, 189, 21, 228, 165, 61, 12, 50, 18, 190, 187, 85, 67, 61, 220, 62, 216, 59, 145, 125, 207, 189, 137, 79, 136, 189, 215, 148, 92, 59, 192, 39, 253, 57, 7, 121, 134, 188, 213, 151, 240, 189, 7, 213, 33, 62, 214, 115, 167, 189, 192, 183, 101, 61, 112, 45, 171, 60, 65, 47, 236, 61, 219, 70, 142, 189, 102, 43, 43, 190, 189, 251, 173, 189, 9, 239, 28, 190, 136, 167, 5, 190, 65, 35, 240, 61, 240, 31, 196, 187, 129, 165, 44, 62, 49, 253, 139, 189, 45, 55, 6, 190, 118, 238, 204, 61, 237, 64, 152, 189, 243, 232, 147, 188, 172, 105, 222, 189, 56, 214, 31, 62, 215, 249, 72, 61, 145, 164, 48, 62, 26, 21, 238, 61, 228, 186, 199, 61, 183, 218, 160, 60, 171, 175, 24, 62, 62, 83, 134, 61, 187, 171, 12, 189, 182, 118, 17, 62, 102, 242, 25, 189, 249, 179, 233, 61, 44, 102, 8, 190, 14, 112, 248, 188, 45, 75, 246, 61, 225, 119, 57, 189, 11, 2, 50, 62, 55, 249, 214, 189, 192, 119, 17, 190, 137, 60, 238, 188, 241, 130, 39, 190, 58, 225, 24, 190, 242, 221, 120, 189, 111, 23, 218, 189, 190, 19, 185, 189, 117, 171, 180, 60, 224, 43, 20, 62, 6, 132, 19, 190, 1, 56, 95, 189, 168, 194, 4, 62, 32, 141, 109, 61, 164, 128, 21, 188, 195, 162, 163, 61, 202, 9, 181, 61, 57, 189, 136, 61, 95, 200, 186, 188, 62, 92, 43, 61, 245, 129, 163, 189, 185, 195, 199, 189, 49, 31, 80, 61, 111, 107, 24, 62, 76, 115, 136, 189, 154, 81, 168, 189, 47, 242, 147, 60, 84, 47, 47, 190, 82, 76, 0, 62, 201, 79, 140, 59, 6, 184, 33, 190, 55, 185, 49, 62, 7, 194, 51, 62, 96, 140, 4, 189, 222, 254, 238, 189, 4, 219, 42, 190, 57, 199, 243, 61, 76, 114, 47, 62, 254, 4, 152, 189, 111, 165, 10, 62, 188, 114, 18, 62, 81, 103, 18, 190, 164, 185, 43, 62, 109, 206, 71, 60, 168, 254, 196, 189, 202, 115, 29, 62, 163, 37, 32, 62, 165, 125, 38, 190, 125, 84, 97, 188, 141, 67, 156, 61, 81, 55, 68, 61, 123, 232, 177, 61, 230, 157, 40, 190, 227, 168, 192, 61, 221, 66, 169, 188, 105, 50, 149, 189, 41, 74, 17, 189, 43, 78, 147, 189, 224, 122, 140, 189, 49, 255, 168, 61, 98, 203, 225, 189, 185, 130, 152, 188, 223, 18, 202, 186, 203, 202, 208, 189, 177, 157, 17, 190, 116, 179, 202, 189, 182, 96, 187, 187, 50, 240, 112, 61, 194, 146, 204, 61, 11, 26, 44, 62, 98, 0, 47, 190, 171, 192, 63, 189, 140, 140, 32, 190, 181, 215, 145, 189, 92, 240, 174, 189, 138, 254, 11, 62, 173, 127, 160, 187, 44, 0, 104, 61, 139, 87, 33, 190, 49, 142, 156, 187, 51, 24, 44, 189, 81, 6, 214, 189, 157, 252, 78, 61, 219, 117, 179, 61, 160, 11, 30, 190, 64, 146, 9, 60, 59, 211, 98, 61, 177, 220, 48, 62, 247, 126, 50, 190, 180, 47, 1, 190, 134, 170, 177, 189, 68, 112, 242, 60, 96, 1, 94, 189, 206, 127, 34, 62, 220, 110, 190, 189, 242, 110, 186, 189, 235, 143, 23, 190, 250, 77, 115, 189, 156, 44, 184, 61, 252, 194, 223, 187, 167, 181, 10, 62, 95, 68, 250, 61, 57, 102, 19, 61, 236, 52, 226, 189, 218, 228, 8, 62, 12, 104, 166, 60, 100, 62, 2, 190, 30, 103, 240, 189, 1, 193, 68, 189, 36, 124, 48, 190, 85, 218, 59, 58, 202, 79, 190, 60, 165, 92, 2, 62, 105, 120, 131, 189, 35, 224, 2, 62, 214, 143, 243, 189, 9, 113, 39, 190, 19, 198, 125, 189, 248, 174, 179, 189, 12, 77, 186, 61, 158, 85, 250, 61, 84, 162, 242, 189, 127, 125, 209, 60, 87, 162, 252, 189, 36, 46, 130, 188, 107, 60, 25, 190, 62, 13, 211, 61, 9, 17, 89, 189, 165, 233, 167, 189, 149, 61, 15, 190, 234, 70, 226, 61, 102, 112, 183, 61, 150, 119, 245, 188, 185, 162, 24, 190, 148, 106, 107, 61, 11, 212, 141, 61, 21, 64, 181, 60, 228, 20, 161, 189, 183, 222, 83, 60, 1, 237, 194, 189, 241, 5, 38, 62, 160, 184, 239, 61, 108, 30, 228, 61, 161, 238, 2, 59, 222, 112, 24, 188, 236, 17, 217, 189, 102, 14, 37, 62, 92, 208, 31, 62, 87, 210, 219, 60, 242, 95, 15, 190, 144, 54, 235, 60, 35, 102, 235, 188, 172, 48, 109, 58, 73, 140, 145, 59, 120, 158, 89, 61, 246, 26, 1, 190, 195, 103, 47, 190, 124, 14, 47, 61, 102, 12, 237, 189, 44, 107, 199, 189, 179, 205, 121, 61, 136, 59, 0, 62, 128, 95, 58, 188, 152, 63, 179, 61, 233, 237, 0, 190, 209, 184, 227, 189, 118, 254, 149, 61, 238, 14, 16, 190, 248, 217, 252, 61, 227, 142, 255, 60, 16, 135, 239, 187, 227, 234, 48, 190, 201, 188, 234, 188, 196, 178, 101, 189, 113, 141, 112, 61, 2, 12, 141, 189, 184, 162, 215, 60, 110, 105, 226, 61, 59, 152, 10, 62, 228, 187, 99, 59, 92, 26, 137, 61, 158, 171, 9, 62, 82, 81, 19, 61, 191, 121, 188, 189, 50, 139, 129, 61, 228, 3, 235, 188, 239, 48, 166, 61, 177, 214, 29, 190, 145, 191, 8, 190, 218, 114, 214, 189, 212, 142, 218, 61, 10, 24, 236, 60, 157, 177, 45, 60, 199, 70, 179, 61, 168, 33, 214, 61, 187, 136, 243, 61, 243, 45, 131, 189, 240, 137, 35, 61, 221, 202, 4, 185, 125, 203, 232, 187, 187, 142, 201, 61, 40, 223, 43, 62, 227, 157, 107, 189, 136, 13, 45, 62, 26, 123, 238, 189, 160, 30, 44, 62, 173, 95, 251, 61, 249, 161, 152, 189, 154, 175, 87, 61, 233, 127, 151, 61, 226, 197, 34, 190, 49, 74, 33, 190, 146, 169, 19, 62, 250, 89, 87, 188, 126, 161, 115, 61, 78, 176, 41, 190, 169, 41, 51, 190, 25, 4, 225, 189, 46, 77, 190, 59, 28, 156, 216, 60, 32, 24, 71, 188, 185, 182, 244, 61, 67, 30, 145, 61, 99, 219, 26, 62, 2, 22, 108, 188, 73, 153, 156, 189, 84, 94, 3, 61, 51, 106, 3, 190, 9, 76, 217, 61, 72, 250, 134, 189, 84, 247, 140, 188, 212, 99, 144, 187, 227, 54, 42, 190, 189, 111, 16, 61, 64, 66, 218, 61, 35, 45, 71, 61, 226, 87, 16, 190, 115, 116, 45, 61, 139, 173, 241, 60, 8, 220, 28, 62, 19, 170, 224, 188, 5, 139, 213, 61, 4, 145, 233, 189, 149, 58, 36, 190, 158, 89, 50, 188, 161, 145, 43, 190, 42, 252, 159, 61, 243, 92, 49, 190, 15, 230, 169, 61, 254, 44, 9, 190, 13, 160, 74, 189, 108, 131, 6, 62, 223, 143, 37, 190, 108, 57, 229, 60, 30, 76, 113, 61, 99, 199, 34, 62, 82, 237, 203, 189, 101, 242, 38, 62, 187, 7, 152, 61, 114, 136, 66, 189, 99, 126, 208, 61, 131, 179, 43, 62, 141, 213, 222, 188, 240, 225, 245, 188, 205, 142, 114, 61, 253, 64, 227, 60, 165, 17, 194, 189, 112, 11, 252, 61, 164, 90, 3, 62, 141, 103, 48, 189, 113, 241, 228, 189, 97, 178, 72, 189, 83, 44, 179, 189, 13, 95, 21, 61, 155, 41, 26, 190, 94, 131, 202, 61, 61, 220, 248, 189, 19, 65, 34, 190, 6, 251, 2, 190, 28, 234, 38, 62, 42, 228, 211, 189, 0, 69, 244, 189, 253, 162, 32, 61, 127, 90, 230, 61, 9, 32, 52, 189, 151, 238, 51, 190, 237, 28, 2, 188, 40, 34, 47, 62, 131, 172, 185, 61, 90, 28, 57, 60, 95, 115, 2, 61, 170, 208, 172, 187, 136, 252, 211, 61, 117, 64, 36, 190, 18, 144, 11, 189, 140, 113, 189, 61, 12, 162, 209, 61, 188, 129, 235, 188, 241, 121, 8, 62, 157, 55, 238, 189, 61, 211, 18, 190, 32, 99, 11, 189, 213, 155, 216, 61, 216, 163, 107, 189, 66, 205, 150, 61, 187, 25, 255, 61, 165, 149, 212, 61, 42, 82, 27, 62, 167, 180, 52, 62, 184, 27, 175, 188, 95, 143, 69, 189, 226, 16, 99, 61, 131, 8, 205, 61, 185, 248, 91, 61, 171, 218, 152, 188, 137, 91, 93, 58, 32, 18, 77, 61, 209, 253, 137, 59, 248, 185, 135, 61, 28, 77, 27, 62, 137, 46, 23, 190, 143, 238, 217, 61, 23, 21, 35, 190, 76, 97, 138, 61, 223, 212, 13, 60, 75, 199, 46, 190, 4, 145, 159, 61, 152, 111, 148, 189, 49, 252, 29, 190, 241, 206, 128, 189, 99, 231, 89, 61, 137, 71, 146, 188, 233, 77, 96, 61, 17, 134, 168, 61, 138, 132, 212, 189, 77, 227, 47, 61, 15, 24, 232, 61, 101, 74, 199, 61, 143, 100, 81, 189, 144, 80, 121, 189, 177, 49, 52, 190, 157, 151, 137, 189, 9, 105, 190, 61, 134, 6, 196, 189, 254, 36, 193, 188, 127, 167, 145, 61, 183, 97, 59, 189, 190, 53, 206, 61, 144, 236, 39, 62, 92, 155, 25, 190, 98, 33, 216, 60, 62, 19, 133, 61, 188, 242, 32, 189, 182, 148, 41, 190, 74, 237, 49, 190, 208, 145, 174, 60, 21, 101, 106, 59, 25, 61, 248, 59, 41, 135, 54, 61, 112, 234, 10, 62, 101, 128, 238, 188, 130, 229, 192, 185, 254, 93, 49, 190, 119, 72, 133, 60, 122, 68, 27, 62, 139, 204, 187, 59, 0, 1, 33, 62, 236, 88, 231, 61, 74, 202, 162, 188, 16, 82, 249, 61, 135, 209, 61, 61, 9, 236, 199, 186, 129, 40, 50, 62, 166, 120, 233, 189, 82, 176, 176, 189, 79, 163, 166, 189, 87, 187, 189, 60, 193, 91, 213, 186, 81, 11, 10, 190, 142, 41, 37, 190, 32, 175, 4, 190, 49, 205, 8, 62, 158, 142, 168, 189, 44, 71, 46, 190, 169, 63, 36, 62, 42, 84, 169, 61, 7, 89, 14, 62, 19, 73, 175, 61, 157, 33, 248, 189, 186, 87, 43, 62, 203, 38, 202, 61, 113, 142, 189, 61, 61, 16, 3, 189, 100, 24, 12, 189, 57, 224, 235, 60, 116, 18, 170, 189, 161, 180, 255, 61, 133, 159, 244, 61, 66, 9, 11, 61, 26, 57, 7, 190, 205, 11, 49, 190, 131, 34, 144, 188, 128, 249, 16, 190, 16, 36, 136, 189, 29, 17, 141, 188, 182, 228, 17, 62, 223, 98, 102, 189, 206, 58, 132, 61, 35, 119, 191, 61, 136, 40, 159, 61, 138, 57, 232, 61, 15, 183, 224, 61, 247, 98, 208, 185, 180, 169, 24, 61, 207, 171, 162, 189, 101, 140, 76, 61, 194, 46, 147, 188, 28, 148, 185, 189, 154, 47, 25, 62, 57, 244, 10, 62, 117, 105, 223, 189, 144, 152, 180, 61, 52, 203, 223, 188, 225, 231, 250, 61, 148, 131, 212, 188, 75, 87, 143, 189, 27, 216, 125, 189, 53, 2, 190, 188, 81, 60, 16, 62, 40, 71, 44, 189, 235, 135, 25, 190, 120, 216, 16, 190, 194, 93, 143, 189, 255, 9, 173, 61, 211, 169, 47, 190, 201, 111, 75, 61, 71, 183, 134, 60, 211, 1, 186, 189, 223, 33, 44, 62, 145, 182, 185, 188, 74, 28, 235, 61, 16, 200, 211, 61, 115, 115, 152, 189, 133, 15, 5, 62, 17, 78, 20, 61, 39, 91, 143, 61, 28, 33, 44, 190, 146, 155, 146, 61, 52, 190, 233, 56, 153, 200, 164, 61, 248, 216, 28, 189, 107, 146, 247, 189, 159, 91, 37, 62, 186, 111, 33, 62, 246, 151, 16, 62, 38, 196, 52, 190, 132, 250, 181, 61, 237, 85, 174, 59, 183, 245, 249, 188, 210, 60, 50, 190, 213, 10, 3, 190, 206, 242, 18, 190, 208, 234, 129, 61, 21, 56, 21, 190, 218, 35, 166, 189, 72, 215, 8, 190, 28, 8, 18, 62, 239, 126, 188, 61, 248, 189, 210, 61, 121, 143, 244, 189, 96, 236, 1, 62, 168, 53, 38, 62, 142, 55, 176, 187, 121, 99, 1, 62, 34, 197, 4, 190, 46, 28, 12, 62, 97, 140, 2, 62, 29, 220, 43, 62, 157, 121, 206, 61, 191, 22, 10, 190, 129, 111, 42, 62, 245, 38, 91, 61, 152, 106, 30, 62, 88, 151, 143, 61, 218, 208, 204, 187, 87, 198, 62, 189, 73, 6, 9, 189, 44, 227, 202, 189, 139, 56, 248, 189, 174, 167, 14, 62, 60, 195, 51, 190, 103, 92, 103, 189, 28, 212, 59, 189, 100, 175, 14, 61, 161, 54, 14, 188, 3, 185, 7, 62, 143, 30, 228, 189, 83, 212, 203, 187, 147, 248, 216, 61, 222, 43, 178, 61, 152, 227, 0, 190, 68, 212, 32, 190, 103, 84, 150, 189, 147, 170, 14, 190, 58, 166, 38, 188, 55, 244, 43, 62, 6, 6, 249, 189, 210, 105, 171, 189, 154, 139, 159, 61, 188, 191, 219, 61, 105, 88, 197, 189, 120, 206, 214, 61, 164, 95, 226, 58, 85, 232, 231, 60, 15, 156, 190, 189, 205, 175, 0, 190, 175, 239, 148, 188, 136, 57, 190, 189, 178, 221, 24, 190, 254, 148, 41, 62, 66, 192, 37, 190, 181, 140, 220, 61, 105, 46, 226, 61, 134, 12, 54, 60, 79, 233, 148, 61, 119, 209, 42, 62, 128, 131, 198, 188, 3, 157, 128, 60, 90, 101, 239, 61, 154, 235, 170, 189, 116, 220, 242, 189, 32, 116, 143, 189, 93, 149, 152, 61, 228, 152, 211, 189, 205, 135, 48, 62, 32, 136, 35, 61, 168, 150, 240, 188, 150, 97, 33, 189, 93, 89, 111, 60, 138, 150, 38, 62, 108, 200, 33, 190, 56, 192, 46, 190, 39, 226, 51, 190, 111, 198, 168, 61, 11, 139, 37, 190, 187, 124, 216, 61, 108, 20, 197, 59, 165, 84, 4, 189, 78, 59, 142, 61, 5, 250, 25, 62, 238, 10, 4, 61, 208, 24, 39, 62, 90, 16, 128, 61, 94, 53, 28, 190, 137, 144, 217, 61, 248, 198, 14, 60, 53, 208, 188, 61, 242, 216, 245, 189, 18, 159, 47, 62, 76, 48, 4, 189, 217, 79, 97, 189, 229, 33, 215, 60, 214, 40, 14, 62, 23, 27, 52, 190, 2, 125, 4, 189, 218, 173, 4, 62, 225, 162, 13, 62, 52, 79, 152, 61, 108, 200, 250, 61, 118, 217, 214, 60, 79, 160, 180, 189, 106, 228, 7, 62, 3, 245, 32, 190, 66, 200, 82, 189, 105, 155, 215, 189, 48, 118, 21, 62, 58, 33, 50, 62, 58, 205, 37, 62, 53, 6, 135, 60, 203, 16, 41, 190, 241, 235, 27, 62, 111, 31, 11, 62, 89, 46, 43, 190, 193, 18, 163, 61, 78, 244, 139, 61, 71, 92, 29, 190, 25, 177, 129, 189, 225, 171, 0, 190, 10, 188, 246, 189, 57, 162, 24, 189, 55, 13, 30, 190, 175, 227, 191, 189, 66, 106, 178, 188, 194, 166, 235, 189, 74, 176, 91, 61, 144, 226, 243, 189, 203, 98, 83, 60, 120, 184, 235, 61, 61, 103, 36, 62, 8, 80, 58, 61, 112, 243, 222, 61, 181, 113, 144, 60, 142, 31, 141, 61, 12, 128, 218, 189, 89, 211, 187, 61, 196, 178, 192, 189, 124, 28, 107, 61, 70, 121, 249, 189, 31, 229, 226, 61, 113, 121, 44, 62, 245, 131, 133, 189, 254, 46, 29, 189, 172, 51, 175, 189, 101, 248, 204, 61, 54, 18, 224, 189, 126, 154, 149, 188, 116, 229, 66, 189, 17, 152, 207, 60, 218, 3, 255, 189, 250, 70, 224, 189, 26, 177, 109, 61, 79, 24, 15, 190, 41, 25, 208, 60, 169, 52, 26, 190, 178, 218, 198, 61, 29, 119, 197, 189, 55, 68, 48, 190, 119, 250, 79, 61, 11, 252, 175, 189, 7, 67, 39, 61, 211, 216, 150, 61, 197, 80, 17, 62, 162, 109, 154, 59, 40, 111, 64, 60, 38, 75, 245, 61, 105, 98, 247, 189, 218, 185, 137, 189, 187, 57, 101, 61, 132, 211, 250, 61, 70, 199, 231, 60, 224, 188, 149, 187, 182, 196, 195, 61, 145, 134, 16, 61, 112, 233, 243, 61, 7, 142, 21, 190, 30, 68, 134, 61, 209, 89, 41, 190, 14, 209, 136, 61, 127, 225, 192, 189, 121, 197, 216, 188, 107, 105, 12, 61, 137, 189, 19, 190, 255, 202, 22, 62, 150, 236, 212, 61, 62, 1, 226, 61, 135, 170, 184, 188, 151, 238, 16, 62, 62, 77, 151, 61, 106, 239, 122, 188, 194, 75, 221, 188, 181, 106, 101, 189, 39, 222, 28, 62, 178, 105, 222, 61, 52, 235, 30, 190, 130, 149, 45, 62, 200, 166, 237, 61, 13, 71, 198, 61, 161, 185, 246, 61, 187, 75, 35, 189, 215, 208, 129, 189, 131, 245, 168, 189, 233, 249, 136, 61, 67, 212, 30, 62, 102, 134, 56, 188, 246, 93, 13, 190, 147, 233, 207, 61, 128, 60, 215, 187, 173, 87, 180, 189, 94, 139, 99, 188, 130, 65, 151, 189, 246, 179, 27, 61, 149, 249, 169, 60, 4, 197, 251, 61, 77, 243, 4, 188, 2, 136, 181, 61, 188, 196, 4, 190, 46, 70, 38, 62, 120, 150, 225, 187, 78, 109, 192, 189, 161, 181, 38, 62, 216, 122, 138, 61, 207, 27, 246, 61, 144, 13, 25, 190, 121, 105, 153, 189, 169, 116, 175, 60, 197, 219, 92, 61, 212, 36, 174, 61, 179, 81, 102, 61, 200, 37, 100, 60, 162, 108, 111, 188, 208, 25, 233, 61, 211, 76, 0, 190, 9, 84, 21, 189, 241, 98, 216, 188, 94, 63, 239, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 60, 13, 190, 41, 248, 244, 189, 255, 3, 37, 62, 103, 88, 217, 189, 222, 217, 147, 189, 86, 154, 31, 190, 157, 249, 189, 189, 206, 4, 202, 61, 51, 26, 38, 190, 7, 105, 162, 61, 41, 141, 44, 61, 178, 17, 169, 188, 254, 17, 90, 60, 5, 190, 201, 186, 217, 147, 44, 62, 60, 148, 119, 61, 45, 181, 78, 188, 148, 84, 63, 59, 240, 193, 43, 190, 17, 86, 152, 189, 120, 143, 249, 189, 55, 25, 193, 60, 242, 174, 138, 188, 79, 235, 249, 188, 196, 16, 216, 61, 46, 56, 114, 61, 134, 234, 18, 61, 21, 67, 131, 188, 50, 170, 1, 62, 62, 144, 17, 190, 84, 141, 165, 189, 48, 176, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 34, 109, 60, 203, 150, 69, 60, 180, 204, 213, 61, 103, 222, 4, 190, 24, 102, 141, 189, 123, 140, 7, 189, 161, 107, 92, 189, 137, 175, 98, 189, 206, 231, 60, 61, 36, 198, 16, 62, 110, 201, 54, 189, 55, 152, 12, 190, 68, 234, 84, 61, 84, 131, 146, 60, 254, 38, 145, 61, 234, 22, 158, 61, 213, 173, 48, 190, 223, 116, 78, 187, 218, 191, 176, 61, 160, 202, 2, 190, 27, 181, 171, 61, 148, 155, 14, 190, 198, 246, 223, 189, 112, 250, 29, 62, 203, 5, 75, 189, 103, 90, 174, 189, 2, 94, 192, 187, 55, 30, 209, 188, 231, 247, 49, 190, 76, 236, 67, 61, 231, 156, 97, 189, 152, 198, 23, 190, 195, 127, 24, 62, 191, 3, 52, 62, 77, 122, 77, 189, 19, 55, 192, 61, 246, 148, 8, 190, 20, 126, 27, 62, 228, 41, 39, 62, 94, 180, 198, 61, 195, 121, 182, 61, 141, 220, 33, 190, 116, 113, 64, 189, 179, 224, 37, 190, 111, 202, 24, 62, 119, 31, 95, 60, 155, 210, 9, 62, 226, 168, 121, 61, 127, 66, 52, 190, 214, 9, 172, 189, 181, 2, 209, 189, 176, 223, 42, 190, 245, 31, 49, 62, 66, 1, 214, 189, 230, 81, 16, 190, 219, 171, 148, 61, 120, 164, 15, 189, 92, 112, 249, 188, 253, 9, 42, 190, 212, 23, 175, 61, 183, 81, 139, 61, 209, 73, 128, 189, 190, 242, 159, 61, 139, 247, 249, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 134, 231, 61, 33, 112, 234, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {182, 50, 103, 63, 95, 175, 52, 63, 57, 82, 92, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {153, 13, 107, 61, 9, 183, 231, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}