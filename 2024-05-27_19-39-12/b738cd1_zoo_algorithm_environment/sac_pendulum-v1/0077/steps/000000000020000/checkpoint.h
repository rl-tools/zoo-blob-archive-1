// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 110, 5, 63, 187, 184, 154, 63, 11, 74, 215, 62, 103, 14, 7, 190, 57, 157, 5, 64, 61, 201, 42, 63, 17, 241, 251, 62, 250, 232, 160, 63, 73, 75, 181, 61, 219, 32, 29, 63, 191, 243, 3, 191, 169, 237, 216, 189, 166, 51, 41, 191, 4, 255, 67, 63, 125, 84, 64, 190, 106, 212, 101, 62, 96, 96, 114, 63, 40, 103, 80, 190, 219, 203, 50, 63, 205, 101, 104, 191, 61, 167, 219, 190, 2, 33, 180, 62, 145, 191, 150, 191, 123, 2, 26, 189, 50, 3, 101, 189, 228, 243, 216, 61, 170, 226, 131, 62, 90, 36, 194, 191, 3, 245, 36, 62, 175, 82, 30, 189, 139, 154, 0, 190, 183, 211, 14, 62, 74, 228, 232, 62, 173, 165, 172, 62, 215, 253, 185, 191, 100, 168, 103, 190, 132, 30, 24, 191, 128, 168, 141, 189, 98, 211, 20, 191, 49, 29, 96, 62, 110, 221, 145, 190, 212, 61, 205, 62, 234, 229, 113, 191, 74, 78, 42, 63, 246, 150, 97, 62, 239, 213, 29, 188, 229, 195, 87, 61, 74, 148, 50, 63, 146, 198, 109, 61, 53, 235, 206, 190, 187, 52, 207, 190, 220, 55, 96, 62, 225, 53, 87, 62, 243, 187, 36, 63, 20, 11, 27, 191, 120, 14, 158, 191, 88, 55, 81, 190, 214, 206, 10, 63, 38, 247, 109, 191, 223, 215, 13, 191, 121, 101, 49, 63, 157, 23, 136, 190, 205, 241, 32, 62, 229, 138, 150, 191, 247, 227, 170, 61, 120, 249, 150, 61, 207, 255, 239, 190, 52, 182, 255, 190, 23, 193, 17, 63, 24, 81, 11, 191, 113, 132, 34, 63, 118, 105, 31, 63, 130, 18, 242, 62, 240, 143, 157, 191, 41, 220, 166, 190, 97, 240, 115, 189, 49, 208, 247, 63, 176, 3, 39, 63, 142, 102, 247, 61, 235, 80, 141, 63, 114, 112, 217, 61, 87, 0, 125, 62, 185, 107, 166, 62, 148, 75, 98, 189, 108, 133, 240, 62, 143, 70, 161, 63, 60, 195, 154, 62, 167, 101, 83, 61, 200, 58, 59, 190, 237, 187, 7, 191, 191, 224, 164, 62, 14, 74, 179, 191, 21, 101, 43, 190, 139, 181, 142, 62, 121, 143, 135, 190, 130, 194, 131, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 139, 174, 190, 142, 90, 220, 62, 67, 28, 200, 62, 5, 41, 90, 190, 30, 227, 32, 62, 218, 0, 76, 61, 38, 71, 109, 191, 52, 145, 98, 62, 53, 9, 27, 190, 68, 92, 132, 62, 205, 223, 128, 190, 223, 149, 144, 61, 146, 48, 1, 191, 184, 8, 254, 60, 178, 121, 111, 63, 54, 173, 144, 190, 212, 122, 126, 62, 3, 113, 62, 63, 250, 166, 6, 63, 171, 205, 165, 190, 192, 32, 104, 62, 125, 25, 217, 62, 236, 52, 28, 63, 41, 207, 122, 62, 235, 141, 185, 190, 47, 1, 211, 62, 139, 205, 135, 62, 91, 243, 249, 62, 157, 153, 226, 189, 39, 46, 233, 189, 221, 3, 98, 190, 196, 52, 49, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 40, 131, 61, 77, 236, 21, 190, 62, 63, 226, 61, 58, 145, 133, 61, 18, 143, 2, 190, 253, 94, 36, 190, 120, 72, 217, 189, 217, 10, 254, 61, 185, 122, 207, 188, 51, 1, 157, 61, 197, 30, 4, 62, 165, 171, 57, 190, 22, 232, 254, 59, 220, 129, 155, 189, 252, 53, 27, 188, 218, 134, 0, 61, 55, 214, 245, 61, 218, 129, 70, 190, 76, 64, 44, 190, 107, 82, 48, 61, 57, 45, 47, 190, 51, 51, 16, 190, 10, 180, 0, 62, 26, 180, 155, 61, 200, 252, 196, 59, 51, 205, 219, 61, 164, 168, 46, 190, 175, 62, 250, 61, 66, 170, 152, 61, 138, 134, 125, 188, 116, 50, 59, 61, 216, 14, 193, 189, 136, 98, 5, 62, 129, 98, 182, 62, 131, 58, 121, 62, 224, 224, 209, 190, 193, 36, 254, 60, 185, 182, 205, 189, 18, 205, 149, 62, 69, 64, 106, 191, 193, 103, 196, 189, 96, 215, 165, 188, 160, 202, 182, 189, 190, 52, 123, 190, 14, 189, 71, 62, 135, 69, 159, 190, 232, 1, 29, 62, 186, 238, 139, 189, 10, 193, 218, 189, 102, 127, 119, 189, 26, 32, 203, 189, 50, 223, 2, 190, 228, 215, 146, 190, 72, 16, 242, 189, 225, 252, 84, 189, 171, 122, 10, 62, 145, 95, 166, 189, 50, 3, 203, 62, 61, 36, 152, 62, 46, 154, 120, 61, 173, 20, 244, 62, 58, 16, 33, 61, 213, 185, 235, 189, 171, 189, 250, 189, 103, 167, 80, 191, 245, 36, 32, 191, 229, 185, 160, 189, 29, 136, 30, 62, 244, 190, 129, 188, 130, 215, 130, 61, 174, 49, 132, 62, 232, 35, 251, 62, 250, 83, 143, 62, 151, 169, 21, 191, 138, 181, 154, 62, 43, 63, 161, 62, 142, 16, 224, 189, 116, 207, 179, 61, 116, 3, 241, 190, 102, 150, 189, 62, 132, 163, 139, 60, 78, 103, 65, 61, 156, 218, 151, 62, 165, 167, 158, 62, 180, 52, 190, 62, 40, 132, 15, 191, 26, 106, 198, 188, 59, 172, 154, 62, 228, 196, 228, 59, 177, 182, 168, 190, 80, 117, 71, 61, 201, 214, 165, 58, 47, 102, 122, 191, 241, 59, 20, 62, 66, 202, 214, 60, 187, 141, 80, 61, 155, 74, 145, 61, 120, 160, 231, 60, 214, 26, 9, 62, 104, 153, 182, 190, 17, 249, 177, 61, 196, 24, 146, 62, 86, 31, 176, 190, 167, 201, 46, 190, 130, 53, 133, 189, 231, 25, 156, 190, 153, 211, 215, 189, 175, 21, 217, 190, 186, 174, 236, 61, 244, 17, 94, 190, 180, 59, 31, 189, 1, 208, 163, 60, 5, 235, 181, 189, 171, 113, 70, 189, 3, 122, 50, 62, 42, 18, 163, 60, 76, 95, 22, 190, 165, 70, 175, 190, 147, 134, 186, 190, 161, 118, 130, 190, 208, 161, 159, 190, 24, 27, 210, 61, 115, 8, 135, 62, 87, 91, 201, 61, 20, 186, 78, 61, 96, 237, 106, 190, 228, 45, 153, 189, 27, 118, 69, 190, 47, 132, 190, 59, 176, 86, 125, 59, 244, 253, 101, 62, 141, 105, 128, 62, 208, 247, 248, 189, 54, 163, 172, 62, 48, 17, 43, 191, 86, 31, 138, 189, 47, 127, 134, 189, 20, 186, 146, 191, 133, 53, 243, 61, 181, 10, 222, 189, 101, 215, 20, 190, 36, 193, 105, 62, 185, 147, 169, 189, 105, 73, 20, 189, 32, 147, 144, 188, 16, 32, 113, 62, 24, 127, 220, 191, 227, 236, 5, 190, 128, 240, 51, 62, 251, 103, 1, 63, 202, 155, 4, 62, 195, 182, 65, 190, 118, 99, 77, 191, 208, 49, 50, 62, 36, 81, 107, 185, 164, 15, 203, 62, 234, 8, 36, 62, 30, 134, 163, 189, 15, 103, 49, 191, 209, 95, 145, 189, 188, 27, 132, 190, 167, 144, 224, 189, 34, 137, 93, 191, 63, 66, 154, 62, 232, 108, 175, 189, 133, 101, 164, 190, 178, 85, 240, 60, 94, 87, 228, 62, 2, 176, 18, 190, 77, 3, 156, 189, 106, 124, 27, 61, 23, 213, 158, 62, 80, 87, 10, 61, 83, 55, 92, 62, 47, 217, 46, 190, 161, 205, 157, 62, 33, 184, 45, 61, 83, 38, 140, 189, 28, 120, 206, 61, 43, 74, 150, 62, 217, 8, 63, 61, 20, 12, 1, 190, 190, 34, 216, 189, 56, 222, 228, 61, 128, 141, 32, 63, 197, 166, 45, 191, 45, 110, 100, 191, 136, 218, 187, 187, 176, 1, 171, 191, 104, 230, 108, 61, 136, 57, 210, 62, 241, 197, 153, 62, 104, 226, 126, 61, 189, 125, 209, 189, 160, 130, 82, 191, 36, 119, 197, 189, 219, 103, 38, 188, 220, 87, 124, 190, 248, 228, 207, 61, 7, 233, 69, 189, 12, 242, 16, 190, 38, 15, 0, 62, 221, 15, 8, 190, 243, 61, 66, 190, 6, 157, 120, 61, 22, 245, 245, 60, 175, 27, 215, 189, 171, 68, 127, 62, 52, 161, 30, 61, 110, 255, 92, 61, 59, 72, 17, 62, 115, 72, 104, 62, 239, 15, 142, 190, 75, 101, 110, 190, 216, 105, 225, 62, 50, 84, 234, 61, 194, 144, 165, 62, 70, 252, 217, 189, 239, 33, 96, 191, 38, 130, 235, 61, 78, 200, 92, 190, 17, 51, 31, 190, 24, 253, 25, 187, 56, 178, 74, 189, 59, 246, 109, 61, 176, 195, 157, 191, 201, 245, 221, 61, 85, 119, 35, 191, 23, 116, 154, 190, 13, 146, 113, 62, 90, 13, 136, 190, 192, 50, 136, 189, 252, 111, 29, 63, 1, 215, 133, 62, 57, 194, 45, 63, 231, 197, 254, 60, 213, 4, 235, 62, 252, 27, 248, 62, 89, 211, 106, 60, 54, 47, 236, 190, 169, 13, 255, 61, 110, 174, 104, 191, 186, 100, 56, 62, 220, 113, 47, 190, 228, 115, 167, 190, 193, 144, 106, 189, 124, 123, 177, 190, 167, 136, 65, 191, 17, 91, 54, 191, 3, 99, 208, 191, 178, 202, 99, 61, 255, 190, 3, 191, 95, 236, 80, 190, 136, 190, 27, 62, 92, 101, 251, 190, 199, 163, 131, 190, 28, 84, 210, 188, 164, 122, 187, 60, 111, 129, 88, 189, 131, 206, 228, 189, 52, 225, 233, 188, 237, 36, 63, 189, 39, 57, 238, 61, 157, 79, 26, 190, 106, 236, 236, 61, 227, 155, 30, 189, 71, 30, 173, 189, 86, 142, 52, 190, 148, 121, 248, 61, 15, 180, 244, 60, 141, 183, 80, 190, 74, 87, 50, 188, 10, 63, 235, 189, 250, 65, 151, 61, 135, 196, 24, 190, 51, 254, 47, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 28, 104, 190, 54, 160, 155, 245, 188, 166, 167, 22, 190, 62, 167, 12, 62, 25, 50, 218, 189, 145, 77, 74, 61, 112, 45, 171, 60, 212, 170, 205, 61, 79, 73, 149, 190, 226, 26, 144, 189, 179, 25, 232, 60, 128, 138, 36, 61, 94, 239, 206, 186, 25, 163, 60, 60, 108, 207, 142, 61, 30, 51, 137, 62, 2, 181, 115, 190, 5, 72, 58, 62, 195, 113, 235, 189, 226, 192, 250, 61, 128, 32, 46, 189, 82, 108, 32, 190, 249, 127, 195, 62, 247, 244, 87, 59, 233, 52, 121, 62, 88, 189, 10, 62, 10, 87, 171, 62, 174, 74, 42, 62, 92, 254, 32, 62, 70, 1, 124, 62, 124, 34, 197, 187, 150, 179, 15, 62, 93, 208, 140, 189, 124, 93, 69, 62, 65, 12, 14, 62, 185, 185, 16, 62, 188, 31, 15, 190, 203, 84, 50, 188, 63, 81, 176, 62, 164, 142, 127, 190, 197, 155, 72, 191, 88, 79, 201, 61, 172, 54, 173, 190, 246, 167, 116, 62, 239, 167, 241, 62, 22, 181, 233, 190, 32, 180, 100, 61, 7, 227, 144, 62, 219, 153, 143, 190, 163, 113, 43, 62, 126, 63, 229, 190, 117, 170, 84, 62, 150, 218, 92, 191, 155, 7, 60, 190, 228, 52, 249, 62, 53, 61, 175, 61, 110, 124, 84, 190, 9, 1, 142, 189, 157, 246, 106, 62, 32, 5, 166, 61, 87, 116, 142, 190, 9, 245, 236, 62, 148, 180, 144, 62, 52, 172, 91, 189, 133, 160, 168, 61, 71, 198, 246, 60, 125, 240, 193, 59, 162, 8, 168, 62, 205, 246, 40, 191, 26, 61, 53, 191, 217, 12, 220, 62, 62, 196, 174, 190, 58, 199, 243, 62, 217, 155, 4, 190, 40, 160, 251, 61, 90, 78, 126, 62, 17, 59, 52, 62, 232, 48, 208, 189, 101, 15, 156, 190, 204, 94, 48, 62, 181, 104, 187, 190, 150, 142, 226, 189, 54, 13, 217, 190, 86, 91, 10, 190, 19, 134, 10, 62, 113, 61, 46, 62, 25, 162, 225, 190, 98, 219, 1, 191, 143, 114, 63, 62, 176, 34, 59, 62, 104, 2, 60, 191, 191, 113, 9, 190, 88, 176, 161, 62, 66, 222, 103, 190, 121, 128, 171, 189, 27, 62, 160, 190, 163, 203, 130, 191, 143, 251, 54, 62, 131, 12, 189, 62, 192, 160, 5, 62, 120, 1, 103, 60, 203, 153, 207, 59, 19, 216, 24, 191, 120, 18, 18, 191, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 23, 28, 58, 191, 179, 198, 247, 60, 54, 240, 35, 190, 210, 222, 239, 62, 253, 157, 10, 63, 115, 151, 137, 190, 147, 85, 166, 61, 182, 32, 201, 62, 82, 112, 97, 190, 138, 164, 222, 190, 162, 153, 187, 190, 55, 238, 11, 62, 205, 102, 111, 191, 96, 176, 187, 189, 65, 75, 19, 62, 209, 107, 123, 62, 58, 47, 236, 189, 203, 111, 104, 61, 177, 104, 18, 189, 204, 22, 10, 62, 214, 234, 76, 190, 232, 0, 86, 190, 93, 184, 101, 62, 7, 226, 247, 61, 238, 176, 104, 188, 59, 238, 216, 189, 132, 47, 8, 190, 133, 166, 242, 61, 28, 117, 98, 191, 97, 173, 56, 190, 106, 58, 77, 62, 35, 125, 136, 190, 117, 109, 29, 191, 15, 147, 0, 190, 131, 117, 161, 190, 205, 241, 96, 189, 186, 206, 163, 62, 207, 128, 167, 190, 127, 252, 131, 190, 169, 233, 163, 62, 222, 134, 184, 188, 153, 60, 140, 190, 165, 87, 248, 189, 7, 135, 56, 62, 81, 161, 182, 190, 230, 115, 137, 62, 80, 197, 46, 190, 43, 221, 197, 61, 54, 235, 118, 191, 236, 106, 91, 62, 188, 153, 67, 62, 160, 192, 210, 190, 89, 170, 102, 187, 159, 33, 165, 190, 163, 178, 17, 62, 63, 136, 9, 190, 172, 191, 202, 189, 206, 60, 1, 190, 211, 11, 179, 190, 146, 94, 234, 190, 67, 125, 129, 191, 131, 112, 75, 191, 127, 206, 107, 62, 68, 76, 107, 62, 44, 179, 144, 191, 157, 124, 147, 191, 92, 166, 196, 60, 49, 37, 241, 61, 155, 236, 140, 189, 144, 142, 131, 187, 193, 183, 54, 190, 27, 213, 234, 62, 201, 208, 43, 189, 50, 239, 79, 191, 77, 146, 97, 190, 204, 89, 137, 61, 140, 36, 23, 191, 88, 6, 101, 61, 108, 22, 2, 191, 47, 170, 142, 190, 6, 169, 10, 62, 202, 64, 0, 60, 35, 1, 158, 61, 213, 175, 99, 62, 116, 200, 62, 62, 8, 170, 63, 191, 64, 19, 106, 190, 67, 110, 122, 190, 164, 9, 209, 61, 132, 241, 151, 190, 252, 84, 133, 190, 153, 178, 237, 188, 150, 241, 33, 191, 99, 202, 183, 61, 170, 78, 222, 61, 43, 184, 174, 61, 34, 202, 42, 61, 237, 251, 122, 190, 231, 27, 49, 62, 50, 143, 200, 190, 61, 22, 147, 61, 134, 36, 102, 62, 235, 22, 240, 189, 250, 157, 98, 61, 45, 155, 4, 62, 163, 32, 11, 62, 126, 239, 215, 61, 51, 82, 169, 60, 112, 29, 188, 62, 136, 141, 63, 61, 37, 35, 14, 60, 30, 220, 246, 189, 123, 84, 90, 62, 95, 176, 127, 191, 34, 76, 36, 61, 148, 85, 12, 62, 72, 148, 133, 191, 198, 9, 131, 62, 8, 224, 71, 191, 63, 192, 58, 191, 187, 126, 111, 60, 163, 206, 170, 190, 67, 36, 130, 61, 21, 190, 192, 189, 60, 146, 240, 62, 77, 77, 111, 62, 213, 135, 117, 62, 88, 255, 9, 190, 113, 136, 220, 61, 115, 182, 214, 190, 18, 7, 81, 62, 165, 139, 117, 190, 163, 87, 77, 190, 170, 255, 179, 62, 2, 233, 42, 191, 182, 200, 226, 191, 143, 214, 69, 62, 32, 207, 118, 62, 254, 31, 52, 61, 115, 214, 165, 190, 163, 141, 0, 62, 233, 142, 186, 60, 123, 150, 147, 62, 213, 254, 0, 191, 194, 196, 38, 62, 18, 46, 61, 191, 213, 66, 167, 190, 252, 82, 189, 190, 139, 212, 223, 190, 225, 1, 172, 62, 91, 217, 4, 191, 168, 248, 242, 190, 0, 205, 174, 191, 107, 72, 190, 190, 247, 136, 165, 62, 232, 124, 221, 189, 32, 246, 30, 63, 191, 157, 239, 61, 208, 26, 20, 191, 202, 78, 144, 190, 247, 17, 162, 191, 233, 147, 176, 191, 198, 227, 61, 189, 22, 139, 193, 62, 222, 123, 139, 61, 72, 144, 91, 190, 16, 129, 0, 190, 41, 122, 196, 62, 145, 35, 160, 189, 67, 151, 252, 190, 172, 128, 82, 189, 184, 143, 100, 62, 104, 41, 27, 191, 207, 140, 140, 61, 206, 12, 226, 190, 65, 89, 211, 190, 67, 209, 12, 61, 83, 233, 101, 189, 218, 140, 68, 62, 200, 227, 13, 189, 181, 51, 86, 62, 140, 239, 203, 190, 242, 138, 17, 62, 170, 203, 241, 190, 214, 174, 4, 190, 254, 24, 127, 190, 235, 25, 7, 62, 147, 201, 248, 61, 242, 83, 130, 191, 21, 15, 133, 190, 81, 198, 108, 62, 61, 201, 231, 189, 234, 248, 51, 190, 32, 163, 180, 190, 137, 160, 78, 61, 88, 220, 26, 62, 70, 25, 86, 190, 226, 168, 29, 62, 5, 22, 216, 61, 167, 77, 89, 189, 195, 65, 86, 189, 78, 128, 201, 190, 15, 65, 80, 190, 96, 200, 63, 190, 208, 185, 137, 61, 141, 182, 140, 60, 28, 226, 233, 190, 104, 153, 29, 189, 164, 44, 73, 62, 72, 149, 138, 189, 136, 111, 24, 190, 95, 213, 95, 62, 94, 97, 48, 61, 14, 43, 220, 190, 40, 68, 165, 189, 99, 103, 46, 61, 19, 43, 133, 190, 59, 29, 121, 190, 24, 117, 119, 60, 11, 226, 187, 61, 54, 183, 3, 190, 188, 96, 49, 62, 15, 190, 210, 189, 49, 15, 77, 190, 106, 190, 1, 63, 89, 134, 229, 185, 223, 175, 153, 62, 180, 153, 149, 190, 142, 189, 137, 190, 60, 251, 65, 62, 128, 132, 17, 62, 145, 222, 48, 191, 0, 141, 126, 62, 53, 216, 42, 62, 63, 23, 145, 62, 206, 37, 106, 61, 214, 40, 150, 62, 168, 103, 193, 61, 67, 242, 173, 189, 53, 125, 156, 188, 200, 184, 59, 62, 183, 17, 46, 189, 116, 209, 185, 188, 210, 101, 115, 190, 140, 75, 168, 61, 78, 92, 64, 190, 61, 142, 253, 190, 179, 130, 228, 189, 103, 181, 99, 189, 243, 233, 27, 62, 9, 39, 162, 62, 234, 170, 51, 62, 40, 205, 227, 62, 23, 71, 86, 62, 112, 88, 106, 189, 150, 204, 173, 62, 141, 222, 27, 191, 253, 223, 253, 190, 177, 220, 206, 190, 75, 89, 36, 62, 173, 1, 128, 60, 82, 241, 34, 190, 119, 96, 112, 62, 81, 167, 18, 62, 80, 192, 129, 190, 104, 170, 226, 189, 58, 131, 92, 190, 8, 92, 78, 62, 42, 112, 24, 188, 190, 135, 7, 189, 11, 239, 229, 62, 153, 197, 191, 60, 175, 49, 16, 62, 19, 45, 61, 189, 59, 138, 70, 62, 75, 137, 168, 62, 234, 30, 79, 191, 106, 80, 92, 190, 139, 41, 22, 61, 33, 74, 147, 61, 78, 13, 3, 63, 75, 8, 205, 190, 44, 96, 62, 191, 238, 188, 217, 189, 55, 114, 76, 190, 144, 157, 189, 189, 177, 216, 91, 61, 102, 121, 163, 190, 213, 87, 169, 61, 94, 227, 203, 61, 77, 210, 143, 62, 99, 248, 172, 189, 190, 22, 58, 62, 2, 130, 166, 62, 66, 29, 199, 190, 119, 28, 178, 59, 83, 190, 86, 190, 214, 110, 98, 191, 51, 189, 210, 190, 5, 61, 110, 60, 148, 134, 247, 61, 173, 72, 57, 61, 53, 171, 140, 190, 104, 216, 12, 191, 138, 32, 56, 189, 86, 26, 198, 189, 1, 161, 20, 191, 139, 80, 79, 190, 222, 164, 130, 62, 5, 93, 223, 189, 132, 57, 210, 188, 46, 129, 150, 190, 214, 56, 228, 190, 217, 225, 76, 62, 114, 128, 132, 62, 151, 3, 142, 61, 15, 227, 16, 62, 118, 17, 8, 190, 129, 231, 167, 190, 182, 218, 63, 190, 63, 86, 214, 189, 175, 215, 132, 63, 182, 95, 14, 62, 228, 234, 159, 61, 29, 91, 56, 62, 32, 214, 76, 61, 18, 171, 193, 62, 152, 250, 161, 61, 211, 105, 50, 190, 99, 101, 47, 191, 174, 239, 226, 61, 174, 166, 67, 62, 74, 108, 111, 60, 121, 193, 21, 191, 191, 236, 95, 191, 207, 157, 221, 58, 56, 87, 76, 62, 96, 58, 11, 191, 121, 220, 74, 190, 16, 15, 101, 62, 11, 183, 157, 61, 162, 33, 196, 190, 66, 80, 48, 191, 222, 174, 153, 61, 245, 82, 48, 62, 61, 131, 161, 190, 155, 122, 220, 61, 249, 197, 6, 62, 39, 216, 28, 191, 153, 124, 49, 188, 29, 76, 28, 62, 248, 219, 163, 62, 149, 203, 121, 59, 237, 163, 247, 189, 48, 213, 250, 61, 67, 37, 137, 62, 35, 59, 164, 62, 233, 254, 249, 62, 165, 94, 72, 191, 13, 47, 149, 188, 3, 141, 168, 189, 5, 36, 218, 191, 215, 108, 143, 190, 150, 17, 129, 190, 247, 106, 157, 190, 61, 118, 116, 61, 100, 142, 172, 190, 4, 0, 119, 190, 113, 53, 218, 189, 129, 252, 61, 62, 125, 188, 165, 191, 52, 66, 63, 61, 248, 41, 162, 189, 49, 71, 114, 62, 107, 77, 253, 61, 152, 16, 31, 190, 56, 17, 64, 191, 221, 91, 195, 189, 217, 177, 144, 62, 193, 45, 139, 62, 194, 73, 115, 62, 226, 127, 162, 60, 48, 105, 62, 191, 20, 108, 97, 62, 241, 108, 78, 62, 216, 23, 198, 61, 4, 30, 165, 62, 23, 89, 10, 61, 142, 64, 167, 190, 208, 57, 27, 62, 139, 40, 126, 191, 107, 14, 37, 190, 185, 153, 226, 61, 222, 240, 50, 191, 187, 67, 44, 190, 116, 112, 186, 189, 207, 2, 251, 61, 153, 240, 191, 61, 116, 211, 151, 190, 193, 219, 242, 190, 237, 128, 99, 61, 28, 149, 39, 62, 84, 179, 41, 191, 65, 7, 12, 191, 187, 55, 233, 61, 185, 8, 115, 190, 138, 153, 106, 190, 117, 253, 220, 190, 76, 81, 94, 191, 93, 100, 83, 189, 225, 149, 24, 59, 51, 199, 6, 62, 4, 114, 200, 62, 211, 147, 136, 190, 206, 87, 14, 191, 156, 51, 67, 62, 38, 248, 138, 188, 147, 121, 136, 191, 124, 248, 121, 190, 25, 212, 194, 188, 172, 36, 66, 191, 71, 143, 248, 190, 51, 157, 209, 62, 168, 90, 14, 62, 56, 38, 9, 63, 36, 109, 235, 61, 64, 160, 18, 63, 135, 241, 81, 61, 117, 76, 146, 62, 59, 56, 128, 62, 2, 118, 107, 190, 227, 87, 117, 189, 219, 79, 162, 189, 102, 52, 14, 191, 62, 227, 155, 61, 104, 167, 8, 62, 89, 224, 148, 191, 111, 48, 91, 61, 134, 131, 164, 189, 203, 66, 247, 190, 5, 247, 201, 189, 92, 43, 139, 191, 72, 254, 155, 189, 229, 110, 59, 191, 174, 139, 79, 190, 63, 250, 201, 189, 162, 72, 65, 62, 139, 223, 255, 62, 2, 20, 131, 62, 73, 220, 147, 189, 177, 219, 192, 62, 27, 33, 232, 60, 67, 9, 151, 62, 104, 90, 22, 63, 212, 33, 241, 190, 185, 190, 5, 190, 183, 98, 187, 190, 145, 166, 45, 191, 187, 51, 57, 190, 53, 206, 91, 190, 249, 19, 211, 189, 50, 167, 8, 61, 180, 149, 249, 190, 253, 172, 168, 190, 119, 187, 50, 188, 198, 202, 16, 62, 191, 99, 149, 191, 244, 5, 141, 190, 239, 220, 138, 62, 121, 210, 36, 190, 139, 239, 78, 190, 211, 182, 63, 190, 46, 83, 34, 191, 233, 78, 160, 189, 96, 155, 180, 62, 77, 239, 238, 60, 205, 188, 79, 62, 85, 219, 136, 189, 244, 131, 18, 191, 54, 143, 109, 62, 233, 17, 30, 62, 132, 167, 38, 188, 61, 29, 163, 62, 176, 151, 70, 62, 115, 44, 65, 62, 162, 95, 189, 62, 85, 248, 37, 191, 114, 209, 99, 189, 195, 8, 59, 60, 158, 132, 172, 191, 92, 227, 71, 188, 195, 82, 203, 190, 145, 223, 145, 190, 42, 241, 138, 189, 75, 221, 109, 190, 224, 30, 186, 188, 214, 203, 3, 190, 247, 13, 60, 62, 224, 129, 219, 191, 179, 255, 48, 190, 123, 44, 139, 62, 248, 225, 102, 62, 88, 231, 230, 61, 209, 20, 152, 61, 119, 95, 60, 191, 37, 209, 84, 62, 140, 7, 224, 61, 105, 35, 153, 62, 44, 228, 187, 60, 210, 79, 171, 189, 21, 197, 75, 191, 98, 173, 169, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 3, 223, 92, 62, 35, 175, 226, 188, 85, 215, 109, 62, 212, 22, 140, 190, 136, 32, 29, 62, 252, 245, 112, 62, 236, 131, 201, 62, 241, 149, 185, 190, 249, 132, 30, 189, 155, 151, 78, 191, 193, 108, 28, 189, 252, 167, 229, 61, 84, 80, 39, 62, 147, 187, 221, 189, 61, 233, 26, 191, 9, 93, 97, 62, 219, 202, 20, 62, 86, 224, 127, 190, 188, 198, 129, 190, 114, 162, 136, 61, 35, 86, 137, 62, 189, 16, 132, 191, 185, 169, 1, 191, 243, 121, 126, 61, 2, 255, 248, 62, 199, 122, 77, 61, 19, 231, 7, 62, 66, 21, 97, 60, 239, 203, 6, 62, 54, 51, 50, 61, 98, 77, 77, 62, 73, 115, 50, 63, 153, 143, 8, 191, 79, 27, 131, 191, 61, 74, 136, 62, 28, 68, 58, 59, 183, 82, 250, 189, 49, 174, 42, 62, 208, 151, 122, 190, 41, 170, 170, 60, 231, 239, 143, 187, 48, 165, 131, 189, 199, 252, 140, 190, 177, 247, 9, 61, 92, 7, 107, 189, 59, 171, 53, 62, 243, 123, 170, 189, 254, 47, 230, 190, 193, 217, 130, 62, 159, 249, 112, 60, 6, 21, 46, 190, 225, 72, 3, 190, 92, 9, 118, 189, 103, 208, 128, 189, 160, 13, 0, 62, 37, 246, 167, 189, 102, 175, 63, 191, 91, 116, 68, 190, 165, 38, 61, 61, 219, 191, 43, 62, 209, 220, 107, 190, 118, 253, 93, 61, 46, 209, 246, 190, 153, 255, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 55, 48, 190, 37, 139, 181, 190, 171, 77, 55, 62, 217, 183, 187, 189, 120, 61, 107, 61, 0, 144, 19, 190, 40, 56, 122, 190, 200, 30, 96, 62, 5, 32, 73, 190, 14, 131, 171, 62, 115, 11, 153, 62, 2, 129, 131, 61, 159, 17, 34, 187, 229, 208, 23, 62, 186, 157, 38, 62, 169, 130, 240, 60, 120, 46, 180, 61, 119, 158, 55, 61, 23, 180, 75, 189, 240, 150, 192, 189, 197, 173, 43, 190, 4, 44, 155, 61, 188, 77, 173, 61, 191, 167, 243, 189, 218, 240, 31, 62, 199, 95, 215, 61, 206, 62, 62, 189, 149, 8, 181, 189, 164, 3, 73, 62, 248, 59, 28, 190, 143, 79, 182, 190, 139, 197, 59, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 214, 44, 60, 84, 98, 248, 62, 150, 132, 208, 62, 157, 190, 184, 190, 208, 152, 186, 190, 229, 59, 27, 191, 158, 174, 130, 190, 129, 105, 132, 191, 142, 226, 88, 60, 149, 8, 66, 62, 223, 3, 50, 63, 28, 198, 177, 190, 190, 58, 99, 61, 18, 205, 162, 62, 14, 148, 121, 63, 125, 188, 195, 62, 135, 251, 251, 190, 166, 170, 101, 191, 113, 196, 246, 62, 18, 75, 52, 60, 161, 163, 28, 63, 109, 27, 236, 190, 118, 47, 108, 190, 225, 109, 31, 63, 157, 192, 217, 190, 239, 181, 240, 190, 131, 124, 134, 191, 160, 90, 1, 191, 170, 56, 78, 191, 44, 61, 27, 61, 142, 160, 38, 63, 9, 33, 63, 188, 180, 33, 6, 62, 157, 146, 127, 61, 24, 68, 168, 190, 24, 83, 188, 60, 140, 198, 106, 190, 116, 117, 6, 63, 5, 97, 226, 61, 147, 190, 90, 62, 68, 76, 137, 61, 93, 13, 154, 190, 123, 78, 217, 60, 122, 6, 245, 190, 103, 13, 5, 62, 8, 225, 189, 58, 75, 20, 15, 62, 23, 216, 11, 190, 75, 124, 5, 190, 12, 100, 4, 62, 9, 9, 114, 190, 232, 244, 191, 190, 122, 206, 179, 61, 247, 218, 44, 189, 182, 237, 50, 190, 72, 42, 110, 61, 156, 37, 8, 190, 191, 168, 151, 62, 27, 49, 199, 189, 132, 201, 105, 62, 139, 238, 49, 60, 251, 241, 131, 189, 31, 93, 60, 190, 87, 226, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 219, 152, 62, 52, 105, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 29, 18, 64, 251, 185, 229, 191, 22, 171, 248, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 77, 208, 64, 36, 10, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}