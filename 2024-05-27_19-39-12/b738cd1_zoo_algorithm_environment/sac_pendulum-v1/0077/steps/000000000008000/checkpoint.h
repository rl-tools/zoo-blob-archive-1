// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 194, 71, 62, 228, 213, 114, 63, 122, 67, 227, 62, 240, 50, 72, 190, 52, 183, 228, 63, 94, 97, 25, 63, 188, 15, 9, 63, 130, 251, 131, 63, 176, 61, 205, 61, 93, 89, 70, 63, 181, 186, 212, 190, 157, 196, 229, 189, 118, 197, 98, 190, 76, 189, 62, 63, 242, 230, 167, 190, 101, 205, 54, 62, 198, 91, 95, 63, 199, 192, 59, 190, 164, 227, 64, 63, 192, 96, 92, 191, 85, 226, 212, 190, 237, 114, 175, 62, 123, 235, 102, 191, 155, 94, 10, 60, 236, 49, 15, 61, 103, 229, 177, 189, 193, 185, 158, 62, 254, 142, 143, 191, 125, 209, 227, 190, 221, 74, 6, 189, 114, 158, 182, 189, 250, 26, 173, 188, 99, 96, 222, 62, 102, 146, 208, 62, 112, 18, 133, 191, 240, 125, 207, 190, 147, 224, 1, 191, 198, 140, 173, 189, 0, 92, 9, 191, 13, 41, 79, 62, 219, 134, 207, 190, 91, 158, 4, 63, 227, 202, 115, 191, 181, 227, 225, 62, 211, 115, 50, 62, 84, 185, 146, 189, 61, 151, 232, 60, 94, 129, 54, 63, 20, 66, 43, 62, 65, 154, 105, 190, 137, 203, 16, 191, 79, 8, 206, 62, 186, 84, 191, 62, 11, 236, 72, 63, 2, 95, 12, 191, 194, 208, 82, 191, 179, 194, 29, 190, 215, 52, 35, 63, 112, 187, 61, 191, 211, 141, 2, 191, 227, 79, 38, 63, 225, 236, 142, 190, 254, 196, 248, 61, 88, 5, 59, 191, 150, 6, 7, 188, 169, 11, 198, 60, 147, 41, 145, 190, 163, 89, 114, 190, 108, 46, 38, 63, 227, 230, 219, 190, 240, 72, 7, 63, 164, 179, 89, 63, 43, 84, 241, 62, 81, 52, 133, 191, 252, 148, 152, 190, 84, 70, 100, 62, 163, 224, 202, 63, 176, 63, 19, 63, 76, 172, 89, 62, 217, 29, 66, 63, 130, 153, 196, 61, 1, 231, 200, 62, 225, 12, 140, 62, 118, 194, 203, 189, 142, 30, 229, 62, 40, 44, 132, 63, 32, 234, 118, 62, 56, 11, 18, 189, 208, 217, 12, 190, 68, 206, 26, 191, 114, 87, 178, 62, 217, 110, 128, 191, 188, 31, 131, 190, 108, 42, 221, 62, 164, 93, 56, 190, 56, 251, 173, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 154, 203, 190, 249, 180, 38, 62, 216, 75, 216, 62, 234, 74, 23, 62, 12, 216, 9, 62, 136, 53, 85, 61, 79, 143, 85, 191, 38, 96, 90, 62, 0, 189, 81, 61, 204, 249, 36, 62, 41, 181, 63, 189, 203, 0, 21, 62, 138, 70, 216, 190, 210, 67, 245, 61, 229, 66, 86, 63, 78, 254, 99, 190, 144, 144, 213, 62, 5, 215, 35, 63, 30, 142, 26, 63, 173, 54, 103, 190, 217, 29, 151, 62, 175, 42, 205, 62, 45, 174, 0, 63, 162, 179, 93, 190, 76, 141, 193, 190, 89, 64, 2, 63, 247, 0, 192, 62, 43, 159, 18, 63, 68, 221, 7, 190, 45, 112, 41, 190, 110, 210, 105, 190, 8, 119, 251, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 40, 131, 61, 77, 236, 21, 190, 71, 171, 238, 61, 182, 0, 143, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 209, 149, 0, 62, 185, 122, 207, 188, 51, 1, 157, 61, 197, 30, 4, 62, 80, 10, 55, 190, 22, 232, 254, 59, 220, 129, 155, 189, 252, 53, 27, 188, 218, 134, 0, 61, 215, 239, 1, 62, 218, 129, 70, 190, 76, 64, 44, 190, 219, 89, 68, 61, 166, 102, 44, 190, 51, 51, 16, 190, 10, 180, 0, 62, 26, 180, 155, 61, 246, 149, 227, 59, 240, 37, 221, 61, 76, 99, 43, 190, 187, 53, 3, 62, 152, 57, 157, 61, 140, 102, 46, 188, 163, 179, 62, 61, 216, 14, 193, 189, 63, 85, 198, 60, 128, 117, 14, 62, 23, 40, 4, 62, 173, 119, 46, 189, 32, 97, 81, 189, 176, 130, 93, 189, 0, 66, 146, 62, 149, 130, 187, 190, 100, 141, 96, 188, 96, 144, 165, 190, 21, 76, 157, 189, 117, 212, 42, 61, 151, 247, 55, 62, 144, 54, 103, 189, 130, 177, 51, 189, 175, 107, 76, 189, 90, 122, 27, 189, 66, 109, 70, 61, 76, 243, 24, 190, 56, 113, 86, 189, 37, 180, 192, 188, 118, 159, 40, 190, 169, 197, 201, 61, 1, 100, 67, 61, 163, 20, 188, 60, 199, 150, 93, 62, 132, 194, 236, 61, 164, 201, 19, 62, 3, 174, 161, 62, 226, 19, 59, 61, 224, 135, 8, 62, 80, 102, 128, 60, 81, 129, 240, 190, 94, 206, 85, 190, 168, 84, 178, 188, 146, 192, 34, 62, 72, 179, 159, 189, 137, 40, 225, 60, 53, 18, 99, 62, 227, 144, 232, 62, 152, 127, 30, 62, 217, 103, 234, 190, 191, 101, 54, 62, 64, 108, 143, 62, 231, 152, 52, 190, 85, 163, 54, 188, 16, 129, 4, 191, 7, 222, 133, 62, 43, 114, 222, 60, 179, 25, 216, 60, 33, 228, 239, 61, 230, 8, 147, 62, 35, 53, 171, 62, 243, 193, 197, 190, 46, 95, 247, 189, 67, 14, 91, 62, 210, 233, 19, 60, 121, 7, 64, 190, 26, 47, 250, 61, 109, 8, 212, 60, 105, 27, 71, 191, 182, 163, 208, 61, 177, 42, 195, 188, 200, 94, 116, 189, 71, 158, 28, 61, 79, 81, 100, 186, 56, 79, 137, 188, 224, 69, 62, 189, 0, 206, 79, 189, 3, 217, 221, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 72, 255, 173, 188, 0, 117, 30, 62, 242, 85, 45, 189, 11, 242, 8, 188, 19, 19, 28, 62, 17, 51, 39, 62, 223, 33, 242, 189, 97, 114, 12, 190, 21, 61, 36, 190, 4, 148, 14, 190, 92, 71, 129, 189, 100, 196, 143, 61, 236, 83, 239, 61, 239, 145, 15, 188, 147, 114, 176, 189, 188, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 11, 128, 121, 60, 232, 213, 156, 189, 49, 200, 107, 62, 240, 179, 128, 62, 49, 20, 166, 189, 110, 23, 151, 62, 225, 243, 215, 190, 72, 176, 170, 189, 207, 72, 172, 189, 51, 161, 82, 191, 98, 121, 224, 61, 215, 224, 33, 189, 30, 26, 61, 189, 213, 110, 76, 62, 138, 93, 24, 190, 22, 250, 176, 188, 107, 40, 41, 59, 76, 164, 73, 62, 95, 153, 142, 191, 96, 116, 204, 189, 118, 147, 63, 62, 153, 244, 213, 61, 47, 60, 135, 61, 100, 213, 98, 190, 118, 255, 57, 191, 254, 209, 238, 61, 194, 135, 143, 60, 123, 240, 199, 62, 8, 131, 19, 62, 18, 2, 246, 187, 172, 92, 15, 191, 98, 190, 22, 189, 134, 186, 55, 190, 213, 71, 72, 61, 57, 150, 8, 191, 175, 69, 98, 62, 212, 98, 172, 189, 18, 44, 80, 190, 149, 81, 26, 61, 35, 101, 180, 62, 197, 62, 128, 190, 39, 26, 54, 190, 110, 88, 190, 189, 72, 236, 57, 62, 178, 154, 152, 188, 201, 112, 70, 61, 194, 12, 202, 189, 32, 146, 240, 60, 24, 188, 255, 60, 126, 69, 112, 189, 177, 246, 166, 59, 98, 224, 133, 62, 154, 179, 77, 59, 218, 80, 185, 189, 28, 128, 71, 189, 172, 220, 58, 61, 79, 228, 3, 63, 45, 75, 165, 190, 131, 113, 239, 190, 95, 224, 18, 61, 191, 41, 53, 190, 61, 154, 195, 60, 239, 58, 129, 62, 29, 143, 4, 190, 232, 90, 235, 61, 31, 148, 8, 189, 210, 142, 131, 190, 233, 138, 222, 189, 44, 155, 80, 61, 190, 142, 17, 190, 8, 107, 0, 62, 166, 37, 195, 188, 227, 184, 40, 190, 126, 120, 9, 62, 213, 140, 38, 190, 164, 170, 176, 61, 99, 41, 220, 186, 251, 68, 131, 187, 55, 100, 8, 189, 111, 244, 84, 62, 236, 52, 16, 61, 156, 16, 151, 61, 151, 237, 28, 62, 245, 67, 21, 62, 3, 124, 152, 190, 210, 65, 121, 190, 214, 59, 225, 62, 120, 45, 179, 61, 134, 60, 94, 62, 227, 209, 191, 186, 229, 187, 196, 190, 148, 78, 240, 59, 182, 88, 57, 61, 37, 76, 71, 190, 36, 46, 62, 62, 93, 117, 35, 190, 59, 246, 109, 61, 97, 193, 146, 191, 97, 184, 166, 187, 179, 156, 214, 190, 164, 32, 199, 190, 54, 158, 31, 62, 58, 11, 186, 189, 105, 128, 64, 61, 91, 81, 237, 62, 103, 188, 231, 62, 14, 21, 230, 62, 18, 130, 10, 62, 251, 190, 215, 62, 197, 226, 200, 62, 74, 192, 55, 62, 94, 68, 38, 191, 66, 246, 227, 61, 9, 22, 107, 191, 171, 77, 152, 62, 160, 130, 50, 190, 142, 234, 231, 190, 134, 148, 24, 62, 23, 105, 63, 61, 74, 78, 74, 191, 31, 122, 46, 191, 163, 52, 181, 191, 114, 99, 175, 189, 129, 114, 21, 191, 44, 255, 128, 189, 14, 245, 246, 61, 196, 209, 214, 190, 65, 219, 77, 190, 28, 84, 210, 188, 164, 122, 187, 60, 45, 31, 77, 189, 145, 196, 228, 189, 104, 209, 191, 188, 103, 46, 47, 189, 74, 37, 242, 61, 157, 79, 26, 190, 106, 236, 236, 61, 63, 11, 30, 189, 71, 30, 173, 189, 26, 143, 52, 190, 135, 64, 3, 62, 15, 180, 244, 60, 220, 170, 80, 190, 74, 87, 50, 188, 215, 41, 222, 189, 250, 65, 151, 61, 33, 224, 22, 190, 187, 85, 67, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 203, 41, 57, 58, 160, 155, 245, 188, 13, 24, 21, 190, 198, 183, 15, 62, 25, 50, 218, 189, 192, 183, 101, 61, 112, 45, 171, 60, 212, 170, 205, 61, 78, 61, 111, 190, 14, 227, 128, 189, 148, 110, 136, 60, 59, 40, 166, 61, 133, 12, 177, 189, 68, 219, 220, 60, 221, 110, 134, 61, 67, 32, 147, 62, 166, 63, 34, 190, 232, 197, 7, 62, 193, 235, 223, 188, 195, 189, 165, 61, 160, 211, 112, 188, 35, 243, 209, 189, 205, 161, 165, 62, 40, 178, 209, 61, 234, 153, 141, 62, 137, 41, 54, 62, 93, 189, 89, 62, 13, 2, 61, 62, 246, 221, 49, 62, 51, 241, 154, 62, 168, 0, 41, 61, 201, 201, 74, 62, 231, 115, 130, 189, 20, 160, 60, 62, 27, 228, 190, 61, 219, 135, 42, 62, 46, 63, 242, 189, 43, 18, 16, 60, 124, 130, 139, 62, 75, 173, 63, 190, 0, 100, 25, 191, 184, 83, 11, 62, 247, 194, 191, 190, 188, 25, 115, 62, 124, 181, 121, 62, 246, 31, 253, 190, 69, 110, 183, 189, 110, 175, 128, 62, 14, 159, 64, 190, 189, 64, 130, 61, 117, 12, 175, 190, 196, 194, 20, 62, 75, 108, 5, 191, 138, 124, 195, 189, 66, 89, 134, 62, 166, 32, 98, 62, 200, 25, 35, 190, 171, 168, 140, 188, 206, 245, 34, 61, 188, 87, 230, 61, 182, 216, 130, 190, 140, 64, 164, 62, 176, 120, 154, 62, 160, 29, 107, 188, 178, 196, 116, 61, 59, 144, 188, 61, 194, 232, 53, 189, 69, 9, 165, 62, 87, 245, 21, 191, 105, 151, 21, 191, 8, 248, 174, 62, 185, 82, 9, 190, 25, 208, 166, 190, 189, 163, 19, 191, 66, 180, 17, 61, 231, 96, 107, 62, 68, 8, 38, 62, 17, 189, 20, 190, 116, 209, 105, 190, 37, 236, 30, 62, 87, 48, 129, 189, 69, 43, 71, 61, 192, 124, 160, 189, 102, 50, 8, 190, 59, 155, 25, 62, 191, 68, 58, 62, 225, 118, 189, 190, 180, 140, 64, 190, 158, 21, 35, 62, 115, 164, 12, 62, 60, 25, 188, 190, 232, 199, 39, 190, 157, 164, 153, 62, 69, 63, 207, 189, 151, 199, 236, 189, 223, 216, 27, 190, 54, 12, 132, 191, 191, 29, 168, 188, 27, 179, 133, 62, 128, 248, 163, 61, 64, 101, 5, 190, 210, 182, 57, 188, 235, 129, 21, 191, 212, 227, 36, 190, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 47, 47, 236, 190, 59, 145, 122, 62, 42, 18, 7, 190, 107, 57, 232, 62, 109, 81, 107, 62, 58, 243, 164, 190, 5, 111, 6, 189, 88, 156, 192, 62, 182, 237, 134, 190, 60, 59, 19, 190, 192, 91, 189, 190, 105, 97, 235, 61, 78, 144, 16, 191, 50, 9, 7, 190, 234, 92, 218, 61, 233, 42, 124, 62, 122, 73, 100, 189, 67, 96, 148, 61, 83, 154, 241, 189, 58, 107, 27, 62, 88, 235, 110, 190, 200, 172, 135, 61, 222, 37, 67, 62, 240, 7, 36, 62, 52, 64, 45, 60, 97, 31, 57, 60, 28, 166, 201, 189, 208, 140, 4, 62, 90, 126, 67, 191, 90, 29, 170, 188, 102, 169, 41, 62, 91, 188, 194, 190, 137, 236, 252, 190, 82, 246, 1, 62, 123, 114, 80, 190, 31, 144, 157, 61, 118, 99, 76, 62, 245, 164, 4, 190, 152, 188, 161, 185, 47, 182, 22, 62, 253, 84, 9, 190, 3, 10, 30, 188, 110, 244, 70, 190, 64, 180, 191, 61, 106, 156, 67, 190, 230, 123, 229, 61, 75, 73, 128, 60, 36, 16, 121, 60, 93, 226, 205, 190, 166, 97, 3, 62, 156, 134, 70, 62, 47, 230, 195, 61, 20, 51, 29, 190, 115, 225, 78, 61, 130, 137, 13, 61, 6, 227, 21, 189, 107, 157, 148, 62, 11, 152, 98, 60, 76, 81, 51, 190, 155, 119, 239, 189, 184, 242, 253, 190, 169, 241, 8, 191, 126, 118, 80, 62, 109, 68, 111, 61, 81, 14, 165, 190, 111, 103, 159, 190, 237, 76, 56, 61, 160, 186, 199, 61, 137, 44, 41, 190, 86, 36, 53, 189, 24, 158, 84, 190, 43, 69, 239, 62, 240, 184, 158, 61, 141, 5, 242, 190, 41, 253, 235, 189, 254, 178, 92, 61, 74, 81, 115, 190, 185, 253, 162, 61, 21, 70, 234, 190, 166, 40, 101, 61, 166, 157, 14, 62, 132, 98, 131, 61, 78, 150, 13, 189, 79, 100, 55, 62, 239, 84, 59, 62, 139, 206, 223, 190, 29, 203, 28, 190, 235, 40, 100, 61, 65, 218, 43, 61, 191, 222, 178, 189, 163, 107, 111, 190, 137, 250, 19, 189, 174, 111, 7, 191, 200, 12, 219, 61, 232, 74, 112, 61, 227, 249, 79, 61, 153, 79, 45, 62, 254, 166, 59, 190, 139, 88, 54, 62, 33, 162, 162, 190, 220, 237, 223, 59, 60, 80, 88, 62, 202, 232, 141, 189, 16, 145, 160, 59, 168, 235, 202, 61, 86, 144, 9, 61, 249, 236, 234, 61, 26, 5, 235, 189, 216, 176, 159, 62, 74, 54, 72, 61, 107, 29, 247, 60, 30, 220, 246, 189, 85, 205, 33, 62, 69, 130, 206, 190, 126, 237, 198, 189, 35, 88, 165, 61, 21, 104, 146, 190, 145, 56, 59, 62, 11, 225, 103, 190, 90, 93, 214, 190, 46, 33, 227, 189, 169, 155, 54, 190, 39, 112, 246, 60, 111, 78, 207, 189, 20, 170, 233, 62, 149, 172, 53, 62, 66, 161, 146, 61, 88, 255, 9, 190, 208, 148, 147, 62, 62, 133, 179, 190, 15, 120, 105, 62, 231, 18, 222, 189, 3, 80, 127, 190, 85, 110, 189, 62, 111, 52, 185, 190, 133, 23, 45, 191, 37, 37, 60, 62, 48, 228, 235, 61, 10, 191, 153, 61, 4, 70, 82, 190, 165, 160, 61, 62, 154, 71, 207, 59, 63, 239, 73, 62, 123, 26, 1, 191, 39, 164, 91, 62, 101, 1, 177, 190, 192, 113, 115, 190, 56, 219, 147, 190, 33, 117, 173, 188, 23, 15, 251, 61, 62, 54, 153, 190, 148, 237, 184, 190, 228, 240, 113, 191, 151, 4, 94, 190, 240, 199, 153, 62, 207, 200, 163, 189, 67, 185, 24, 63, 154, 44, 48, 62, 170, 137, 180, 190, 202, 78, 144, 190, 11, 72, 219, 190, 138, 104, 242, 190, 60, 168, 142, 188, 131, 115, 183, 62, 123, 13, 242, 59, 33, 128, 130, 190, 189, 22, 241, 189, 195, 143, 203, 62, 236, 134, 206, 61, 136, 145, 99, 190, 83, 127, 239, 61, 232, 0, 89, 62, 159, 123, 113, 190, 254, 31, 163, 61, 104, 151, 181, 190, 250, 214, 85, 189, 109, 211, 94, 61, 180, 24, 183, 187, 76, 203, 19, 62, 62, 125, 108, 189, 15, 176, 81, 62, 243, 6, 71, 190, 246, 145, 67, 62, 74, 146, 53, 190, 47, 243, 41, 190, 37, 151, 237, 188, 175, 155, 51, 62, 16, 242, 239, 61, 162, 136, 100, 191, 33, 1, 201, 189, 74, 173, 73, 62, 212, 34, 61, 60, 104, 63, 75, 189, 73, 242, 157, 189, 125, 126, 159, 61, 222, 175, 8, 62, 45, 255, 59, 190, 151, 107, 164, 61, 142, 228, 201, 61, 179, 133, 70, 188, 252, 56, 128, 189, 191, 116, 78, 188, 82, 199, 71, 190, 72, 176, 166, 189, 23, 69, 66, 61, 140, 227, 207, 61, 60, 117, 212, 189, 12, 39, 127, 188, 146, 85, 71, 62, 67, 36, 254, 61, 46, 122, 63, 189, 183, 211, 84, 62, 44, 146, 35, 188, 150, 203, 222, 189, 104, 245, 17, 188, 89, 172, 92, 61, 87, 247, 67, 190, 221, 167, 54, 189, 222, 47, 196, 60, 54, 120, 195, 61, 176, 77, 200, 189, 74, 206, 244, 61, 182, 235, 231, 60, 153, 191, 91, 190, 70, 226, 190, 62, 215, 9, 214, 189, 186, 208, 60, 62, 136, 152, 110, 190, 227, 31, 22, 190, 214, 75, 104, 62, 204, 77, 153, 60, 24, 31, 239, 190, 144, 203, 142, 62, 40, 220, 59, 61, 209, 15, 144, 62, 180, 231, 136, 61, 194, 171, 145, 62, 76, 2, 86, 62, 5, 251, 31, 61, 237, 1, 14, 189, 7, 95, 47, 62, 15, 115, 156, 188, 251, 131, 188, 187, 186, 73, 144, 190, 2, 52, 247, 61, 208, 7, 13, 189, 125, 157, 193, 190, 235, 222, 9, 190, 159, 196, 213, 189, 184, 78, 226, 60, 58, 49, 71, 62, 220, 153, 54, 62, 45, 27, 116, 62, 101, 24, 47, 62, 170, 138, 188, 59, 60, 221, 166, 62, 155, 95, 144, 190, 30, 68, 7, 191, 230, 59, 161, 190, 199, 25, 160, 61, 249, 109, 141, 188, 100, 235, 20, 190, 201, 200, 131, 62, 77, 123, 8, 62, 228, 207, 249, 189, 81, 225, 123, 190, 166, 77, 248, 189, 170, 117, 55, 62, 183, 75, 115, 189, 93, 103, 148, 61, 165, 179, 210, 62, 225, 59, 150, 61, 254, 183, 215, 61, 173, 220, 203, 60, 124, 165, 239, 61, 255, 102, 138, 62, 242, 213, 9, 191, 201, 155, 143, 190, 218, 224, 82, 62, 60, 39, 1, 61, 255, 171, 197, 62, 254, 197, 212, 190, 32, 102, 38, 191, 99, 135, 56, 190, 109, 124, 205, 60, 212, 163, 7, 190, 184, 6, 138, 188, 178, 173, 131, 60, 223, 147, 30, 61, 99, 162, 41, 61, 60, 221, 103, 62, 67, 242, 181, 189, 68, 109, 243, 61, 237, 144, 126, 62, 228, 193, 116, 190, 136, 219, 217, 188, 200, 254, 87, 60, 3, 38, 239, 189, 226, 106, 5, 190, 126, 219, 20, 61, 140, 152, 216, 61, 178, 59, 180, 61, 229, 203, 199, 189, 215, 36, 161, 190, 6, 68, 48, 189, 52, 168, 207, 189, 233, 62, 133, 190, 142, 22, 53, 190, 162, 188, 127, 62, 90, 180, 88, 188, 193, 182, 13, 61, 159, 168, 49, 189, 144, 131, 200, 190, 123, 200, 37, 62, 232, 151, 82, 62, 197, 25, 23, 61, 14, 89, 179, 61, 143, 203, 19, 190, 110, 44, 143, 190, 223, 234, 31, 60, 183, 179, 191, 189, 20, 4, 205, 61, 149, 18, 49, 62, 64, 55, 214, 61, 72, 61, 204, 61, 6, 156, 142, 189, 67, 20, 138, 62, 181, 108, 239, 61, 238, 131, 86, 190, 80, 161, 248, 190, 249, 108, 29, 59, 204, 11, 92, 62, 93, 101, 41, 189, 156, 153, 124, 190, 14, 19, 86, 191, 74, 61, 85, 190, 105, 9, 21, 62, 166, 117, 125, 190, 100, 212, 35, 190, 113, 107, 50, 62, 213, 226, 78, 61, 30, 136, 157, 190, 86, 221, 251, 190, 251, 162, 80, 190, 221, 177, 41, 62, 219, 196, 209, 190, 97, 163, 217, 61, 200, 157, 4, 62, 83, 25, 6, 191, 202, 229, 183, 189, 251, 151, 52, 62, 26, 110, 98, 61, 94, 4, 185, 61, 20, 152, 173, 189, 211, 231, 206, 61, 165, 119, 136, 62, 17, 116, 129, 62, 23, 46, 206, 62, 146, 123, 32, 191, 53, 9, 62, 189, 50, 242, 34, 60, 229, 31, 82, 191, 247, 55, 45, 190, 135, 107, 73, 190, 156, 145, 161, 190, 103, 22, 194, 61, 31, 8, 94, 190, 216, 206, 2, 190, 226, 216, 229, 189, 144, 10, 65, 62, 84, 250, 68, 191, 170, 204, 105, 61, 243, 18, 138, 189, 94, 138, 181, 60, 50, 40, 23, 62, 217, 218, 51, 189, 50, 185, 44, 191, 79, 219, 131, 189, 205, 209, 143, 62, 249, 115, 126, 62, 109, 14, 124, 62, 247, 145, 208, 60, 136, 141, 34, 191, 73, 176, 156, 62, 54, 201, 6, 62, 214, 182, 45, 187, 150, 155, 151, 62, 204, 126, 5, 60, 61, 108, 211, 189, 44, 124, 120, 62, 242, 166, 249, 190, 157, 76, 76, 190, 187, 11, 192, 62, 169, 158, 158, 190, 114, 74, 2, 62, 95, 69, 82, 189, 161, 94, 202, 62, 251, 153, 244, 61, 52, 168, 221, 60, 68, 115, 118, 190, 135, 153, 10, 62, 191, 120, 13, 62, 102, 162, 129, 189, 119, 88, 226, 190, 92, 81, 184, 61, 255, 82, 28, 190, 255, 225, 75, 190, 62, 253, 255, 189, 170, 1, 63, 191, 151, 73, 220, 189, 151, 204, 71, 188, 80, 188, 252, 61, 185, 134, 173, 62, 74, 249, 59, 61, 83, 70, 232, 190, 12, 17, 173, 62, 159, 225, 135, 187, 136, 78, 103, 191, 220, 3, 121, 190, 63, 158, 32, 189, 146, 0, 213, 190, 17, 144, 82, 190, 40, 235, 145, 62, 11, 29, 29, 62, 250, 158, 12, 63, 123, 222, 146, 62, 119, 249, 8, 63, 132, 48, 108, 61, 213, 60, 69, 62, 131, 157, 198, 62, 227, 61, 148, 60, 219, 127, 255, 189, 15, 174, 163, 189, 24, 231, 236, 190, 64, 174, 239, 61, 10, 3, 56, 61, 125, 216, 142, 190, 177, 243, 137, 62, 26, 160, 42, 62, 80, 139, 2, 191, 216, 51, 89, 190, 150, 236, 114, 191, 192, 61, 136, 189, 88, 167, 25, 191, 174, 139, 79, 190, 94, 164, 33, 190, 19, 223, 4, 62, 139, 51, 107, 62, 230, 127, 13, 62, 103, 229, 96, 189, 8, 42, 163, 62, 160, 38, 128, 189, 104, 3, 162, 62, 160, 106, 9, 63, 243, 162, 143, 190, 32, 0, 30, 190, 114, 60, 227, 189, 34, 233, 241, 190, 134, 99, 43, 61, 237, 20, 49, 190, 65, 153, 214, 189, 217, 212, 41, 62, 237, 71, 49, 190, 27, 168, 11, 190, 156, 210, 58, 189, 239, 94, 13, 62, 57, 183, 40, 191, 198, 77, 136, 190, 54, 223, 102, 62, 149, 137, 11, 190, 93, 210, 53, 188, 235, 43, 223, 60, 34, 159, 199, 190, 22, 245, 110, 189, 247, 23, 164, 62, 83, 202, 32, 189, 33, 96, 19, 62, 205, 232, 206, 189, 32, 159, 164, 190, 102, 169, 158, 62, 61, 146, 41, 62, 243, 238, 83, 189, 88, 55, 164, 62, 29, 20, 63, 62, 132, 196, 113, 62, 77, 173, 156, 62, 9, 36, 244, 190, 219, 108, 153, 189, 136, 142, 32, 189, 140, 146, 117, 191, 15, 187, 88, 189, 242, 206, 169, 190, 117, 177, 111, 190, 167, 96, 206, 189, 185, 123, 106, 190, 211, 164, 83, 189, 210, 182, 13, 190, 58, 115, 22, 62, 87, 145, 141, 191, 251, 152, 39, 190, 255, 24, 140, 62, 86, 243, 183, 189, 184, 194, 72, 61, 92, 114, 42, 61, 62, 225, 40, 191, 251, 62, 51, 62, 105, 227, 4, 62, 118, 220, 145, 62, 208, 180, 109, 60, 153, 54, 112, 189, 66, 244, 38, 191, 204, 210, 164, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 83, 150, 6, 62, 145, 129, 250, 186, 165, 49, 73, 62, 64, 126, 59, 190, 127, 210, 192, 61, 54, 90, 219, 61, 39, 69, 152, 62, 165, 121, 16, 190, 250, 34, 75, 189, 40, 26, 247, 190, 214, 29, 38, 190, 178, 82, 247, 61, 133, 213, 0, 62, 191, 104, 49, 61, 5, 77, 125, 190, 194, 230, 37, 61, 251, 253, 68, 61, 87, 37, 115, 189, 189, 46, 65, 190, 203, 198, 140, 188, 241, 188, 67, 62, 232, 58, 168, 190, 180, 56, 137, 190, 19, 167, 114, 61, 99, 207, 229, 62, 193, 93, 179, 61, 177, 76, 236, 61, 135, 182, 67, 189, 13, 148, 219, 61, 48, 5, 119, 189, 214, 17, 103, 62, 221, 150, 74, 62, 106, 185, 31, 190, 135, 176, 16, 191, 186, 38, 128, 62, 53, 4, 49, 187, 228, 237, 44, 190, 189, 69, 19, 62, 94, 215, 150, 190, 190, 202, 137, 60, 22, 209, 98, 61, 197, 92, 94, 61, 101, 237, 48, 190, 61, 169, 9, 61, 20, 152, 113, 189, 229, 52, 64, 62, 149, 203, 34, 188, 13, 189, 170, 190, 107, 6, 93, 62, 147, 118, 78, 61, 10, 23, 77, 189, 36, 233, 113, 190, 189, 173, 243, 188, 104, 63, 14, 61, 189, 46, 172, 61, 135, 136, 227, 189, 223, 231, 96, 191, 113, 137, 164, 189, 212, 96, 20, 61, 64, 112, 29, 62, 75, 6, 10, 190, 138, 145, 124, 188, 12, 14, 5, 191, 92, 56, 93, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 113, 42, 190, 36, 3, 100, 190, 202, 53, 67, 62, 56, 80, 10, 190, 171, 100, 54, 61, 254, 166, 34, 190, 32, 104, 43, 190, 250, 143, 147, 62, 174, 201, 70, 190, 30, 61, 177, 62, 3, 136, 135, 62, 138, 255, 65, 60, 159, 17, 34, 187, 46, 98, 34, 62, 10, 155, 42, 62, 126, 110, 58, 61, 217, 91, 158, 61, 93, 138, 216, 61, 64, 255, 228, 188, 46, 163, 109, 189, 210, 170, 239, 189, 124, 40, 164, 60, 202, 213, 67, 61, 112, 245, 170, 189, 21, 68, 12, 62, 8, 48, 161, 61, 181, 142, 239, 61, 104, 155, 16, 190, 227, 124, 61, 62, 248, 59, 28, 190, 252, 95, 157, 190, 172, 218, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 155, 36, 60, 10, 50, 238, 61, 150, 242, 158, 62, 221, 139, 220, 189, 126, 243, 165, 190, 239, 212, 254, 190, 36, 153, 246, 189, 89, 254, 155, 191, 237, 2, 149, 60, 37, 72, 128, 62, 67, 36, 7, 63, 116, 191, 194, 190, 190, 58, 99, 61, 77, 207, 159, 62, 178, 71, 191, 62, 7, 175, 128, 62, 211, 38, 192, 190, 38, 218, 30, 191, 110, 191, 158, 62, 145, 193, 203, 60, 28, 24, 12, 63, 60, 185, 218, 190, 125, 13, 66, 190, 51, 157, 248, 62, 82, 227, 166, 190, 168, 71, 183, 190, 167, 233, 58, 191, 100, 62, 94, 190, 106, 127, 62, 191, 44, 61, 27, 61, 76, 127, 84, 62, 145, 71, 135, 190, 104, 56, 6, 62, 255, 62, 73, 62, 46, 133, 65, 190, 24, 108, 177, 61, 84, 4, 132, 190, 111, 209, 184, 62, 109, 7, 206, 61, 67, 188, 24, 62, 108, 189, 136, 61, 4, 140, 124, 190, 73, 36, 21, 61, 9, 43, 248, 190, 103, 13, 5, 62, 79, 212, 200, 60, 21, 138, 255, 61, 43, 136, 162, 189, 232, 193, 243, 189, 160, 102, 121, 61, 74, 144, 95, 190, 57, 121, 58, 190, 220, 60, 26, 62, 175, 26, 212, 189, 149, 20, 243, 189, 81, 167, 14, 62, 60, 247, 25, 190, 188, 186, 117, 61, 23, 68, 177, 60, 107, 108, 129, 62, 199, 63, 16, 189, 251, 241, 131, 189, 2, 245, 180, 61, 249, 105, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 90, 156, 62, 11, 246, 44, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 148, 12, 63, 48, 188, 204, 61, 248, 26, 196, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 131, 1, 191, 220, 37, 161, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}