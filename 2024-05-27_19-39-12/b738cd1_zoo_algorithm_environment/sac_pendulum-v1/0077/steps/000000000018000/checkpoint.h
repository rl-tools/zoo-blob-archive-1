// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 253, 2, 63, 179, 33, 142, 63, 111, 170, 205, 62, 87, 56, 15, 190, 226, 251, 0, 64, 242, 10, 31, 63, 2, 86, 252, 62, 44, 133, 157, 63, 73, 158, 127, 61, 245, 40, 31, 63, 139, 32, 21, 191, 226, 184, 230, 189, 113, 129, 49, 191, 216, 42, 75, 63, 68, 91, 60, 190, 206, 234, 102, 62, 78, 62, 125, 63, 154, 135, 248, 189, 129, 193, 56, 63, 24, 8, 109, 191, 247, 102, 217, 190, 144, 249, 185, 62, 113, 231, 147, 191, 245, 49, 1, 189, 193, 86, 69, 189, 114, 246, 120, 189, 178, 93, 123, 62, 188, 184, 206, 191, 47, 193, 154, 61, 205, 74, 253, 60, 117, 146, 18, 190, 66, 143, 3, 60, 15, 169, 214, 62, 31, 39, 183, 62, 192, 180, 180, 191, 99, 182, 68, 190, 62, 77, 9, 191, 26, 34, 96, 189, 230, 0, 7, 191, 82, 224, 119, 62, 185, 102, 188, 190, 97, 122, 204, 62, 14, 210, 111, 191, 40, 198, 17, 63, 137, 248, 109, 62, 177, 144, 253, 60, 45, 153, 165, 60, 60, 12, 47, 63, 210, 159, 225, 61, 180, 174, 206, 190, 121, 167, 198, 190, 208, 16, 137, 62, 140, 180, 143, 62, 231, 204, 33, 63, 30, 141, 21, 191, 176, 31, 143, 191, 69, 219, 101, 190, 253, 204, 14, 63, 160, 158, 96, 191, 8, 114, 6, 191, 60, 148, 53, 63, 14, 132, 131, 190, 121, 225, 23, 62, 169, 202, 137, 191, 35, 39, 23, 62, 254, 121, 201, 61, 157, 127, 191, 190, 37, 161, 154, 190, 169, 35, 21, 63, 182, 223, 195, 190, 162, 249, 25, 63, 8, 222, 41, 63, 32, 226, 239, 62, 127, 230, 152, 191, 71, 165, 158, 190, 207, 126, 38, 189, 222, 41, 241, 63, 214, 6, 28, 63, 170, 246, 246, 61, 218, 243, 132, 63, 41, 46, 248, 61, 93, 173, 116, 62, 55, 236, 175, 62, 83, 152, 133, 189, 17, 197, 239, 62, 124, 34, 155, 63, 61, 27, 134, 62, 118, 111, 140, 61, 152, 220, 111, 190, 176, 55, 252, 190, 160, 107, 171, 62, 108, 201, 169, 191, 46, 136, 250, 189, 158, 157, 186, 62, 118, 7, 122, 190, 177, 22, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 57, 177, 190, 208, 244, 219, 62, 231, 55, 202, 62, 113, 226, 55, 190, 3, 100, 7, 62, 96, 150, 128, 61, 117, 175, 104, 191, 169, 151, 95, 62, 12, 145, 15, 190, 100, 235, 77, 62, 96, 117, 134, 190, 164, 172, 182, 61, 190, 41, 235, 190, 194, 201, 132, 61, 173, 64, 102, 63, 209, 29, 137, 190, 42, 38, 165, 62, 102, 27, 65, 63, 153, 19, 12, 63, 32, 205, 157, 190, 202, 17, 119, 62, 216, 179, 235, 62, 87, 254, 29, 63, 120, 142, 9, 62, 206, 227, 186, 190, 238, 118, 224, 62, 71, 243, 136, 62, 185, 159, 250, 62, 28, 235, 222, 189, 25, 101, 151, 189, 55, 168, 85, 190, 116, 191, 36, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 40, 131, 61, 77, 236, 21, 190, 62, 63, 226, 61, 58, 145, 133, 61, 18, 143, 2, 190, 253, 94, 36, 190, 120, 72, 217, 189, 217, 10, 254, 61, 185, 122, 207, 188, 51, 1, 157, 61, 197, 30, 4, 62, 165, 171, 57, 190, 22, 232, 254, 59, 220, 129, 155, 189, 252, 53, 27, 188, 218, 134, 0, 61, 55, 214, 245, 61, 218, 129, 70, 190, 76, 64, 44, 190, 107, 82, 48, 61, 57, 45, 47, 190, 51, 51, 16, 190, 10, 180, 0, 62, 26, 180, 155, 61, 200, 252, 196, 59, 51, 205, 219, 61, 164, 168, 46, 190, 175, 62, 250, 61, 66, 170, 152, 61, 138, 134, 125, 188, 116, 50, 59, 61, 216, 14, 193, 189, 60, 18, 193, 61, 61, 113, 165, 62, 108, 251, 8, 62, 163, 135, 151, 190, 173, 135, 54, 189, 40, 219, 233, 189, 235, 6, 139, 62, 8, 157, 119, 191, 154, 87, 137, 189, 87, 100, 235, 60, 0, 133, 128, 189, 142, 135, 198, 189, 58, 59, 29, 62, 205, 244, 147, 190, 12, 34, 7, 62, 184, 158, 70, 189, 196, 80, 167, 189, 181, 246, 106, 189, 124, 10, 144, 190, 90, 138, 8, 190, 93, 143, 135, 190, 49, 87, 185, 189, 200, 29, 7, 189, 80, 73, 13, 62, 208, 163, 227, 189, 251, 102, 186, 62, 186, 101, 99, 62, 109, 239, 71, 60, 118, 147, 215, 62, 104, 141, 2, 61, 76, 67, 242, 188, 82, 98, 95, 189, 11, 232, 59, 191, 32, 235, 10, 191, 187, 131, 125, 189, 201, 212, 30, 62, 230, 152, 224, 188, 33, 170, 111, 61, 146, 245, 144, 62, 232, 247, 252, 62, 82, 242, 138, 62, 29, 96, 26, 191, 214, 247, 147, 62, 151, 247, 159, 62, 108, 23, 212, 189, 175, 124, 185, 61, 29, 131, 242, 190, 209, 57, 184, 62, 6, 6, 90, 60, 115, 170, 125, 61, 215, 252, 133, 62, 103, 172, 148, 62, 169, 124, 193, 62, 117, 138, 7, 191, 75, 243, 203, 188, 21, 183, 149, 62, 190, 165, 140, 188, 160, 14, 136, 190, 147, 214, 153, 61, 235, 16, 37, 60, 165, 48, 109, 191, 231, 191, 13, 62, 139, 192, 209, 59, 165, 141, 13, 61, 142, 131, 159, 61, 115, 229, 102, 61, 51, 221, 10, 62, 182, 170, 169, 190, 118, 240, 191, 61, 162, 2, 146, 62, 109, 251, 180, 190, 185, 13, 102, 190, 200, 64, 35, 188, 234, 33, 93, 190, 103, 176, 64, 189, 88, 26, 198, 190, 155, 195, 192, 61, 226, 180, 67, 190, 104, 184, 157, 60, 11, 132, 149, 61, 164, 20, 182, 189, 126, 107, 83, 189, 188, 186, 7, 62, 44, 105, 243, 60, 11, 115, 120, 190, 43, 242, 128, 190, 142, 91, 161, 190, 82, 189, 66, 190, 40, 235, 159, 190, 223, 157, 1, 62, 239, 192, 144, 62, 183, 232, 178, 61, 186, 81, 107, 61, 213, 108, 105, 190, 228, 45, 153, 189, 2, 224, 62, 190, 253, 15, 10, 188, 150, 172, 16, 188, 189, 142, 115, 62, 30, 190, 131, 62, 252, 56, 13, 189, 114, 123, 180, 62, 162, 94, 47, 191, 192, 239, 97, 189, 112, 75, 167, 189, 57, 173, 156, 191, 61, 30, 221, 61, 100, 152, 185, 189, 236, 95, 139, 189, 19, 225, 95, 62, 73, 100, 139, 189, 234, 166, 65, 189, 158, 117, 7, 59, 43, 213, 106, 62, 48, 1, 198, 191, 57, 8, 184, 189, 108, 223, 48, 62, 25, 28, 236, 62, 59, 7, 240, 61, 89, 84, 64, 190, 173, 213, 63, 191, 234, 55, 39, 62, 225, 180, 133, 60, 79, 225, 205, 62, 216, 35, 30, 62, 107, 48, 102, 189, 63, 27, 38, 191, 107, 243, 205, 189, 165, 136, 79, 190, 42, 66, 140, 189, 35, 94, 67, 191, 192, 140, 143, 62, 255, 203, 142, 189, 3, 192, 113, 190, 135, 161, 48, 61, 118, 136, 216, 62, 58, 146, 38, 190, 63, 49, 251, 188, 165, 220, 181, 60, 8, 29, 139, 62, 119, 18, 68, 60, 219, 31, 46, 62, 161, 16, 249, 189, 1, 47, 144, 62, 137, 24, 40, 61, 159, 198, 214, 189, 255, 239, 172, 61, 227, 71, 144, 62, 191, 213, 194, 60, 59, 87, 154, 189, 187, 236, 178, 189, 106, 115, 218, 61, 128, 23, 25, 63, 176, 119, 36, 191, 122, 24, 79, 191, 74, 117, 176, 60, 211, 188, 160, 191, 11, 213, 73, 61, 197, 146, 188, 62, 37, 93, 148, 62, 162, 137, 44, 61, 91, 228, 235, 189, 72, 244, 63, 191, 57, 219, 250, 189, 17, 8, 199, 187, 224, 129, 81, 190, 81, 224, 203, 61, 252, 82, 30, 187, 248, 133, 19, 190, 179, 99, 56, 62, 167, 9, 10, 190, 170, 3, 46, 190, 92, 152, 87, 188, 212, 95, 0, 61, 120, 123, 144, 189, 242, 221, 122, 62, 42, 253, 142, 60, 146, 97, 112, 61, 125, 108, 96, 62, 40, 164, 59, 62, 50, 109, 137, 190, 111, 33, 68, 190, 165, 104, 235, 62, 73, 78, 235, 61, 146, 167, 147, 62, 164, 247, 239, 189, 151, 102, 105, 191, 239, 161, 139, 61, 69, 48, 124, 190, 75, 182, 86, 190, 228, 9, 40, 60, 187, 163, 81, 189, 59, 246, 109, 61, 89, 193, 170, 191, 77, 61, 29, 62, 48, 216, 13, 191, 175, 147, 163, 190, 96, 221, 136, 62, 168, 103, 124, 190, 255, 131, 237, 188, 252, 111, 29, 63, 30, 145, 128, 62, 57, 194, 45, 63, 108, 79, 189, 60, 110, 221, 223, 62, 238, 67, 249, 62, 18, 161, 183, 60, 54, 47, 236, 190, 61, 145, 1, 62, 22, 97, 90, 191, 192, 1, 41, 62, 136, 151, 44, 190, 151, 137, 149, 190, 162, 66, 76, 189, 29, 18, 26, 190, 11, 92, 46, 191, 190, 216, 61, 191, 11, 51, 217, 191, 234, 121, 189, 61, 212, 241, 250, 190, 152, 176, 200, 189, 62, 78, 23, 62, 174, 243, 2, 191, 199, 163, 131, 190, 28, 84, 210, 188, 164, 122, 187, 60, 111, 129, 88, 189, 131, 206, 228, 189, 52, 225, 233, 188, 237, 36, 63, 189, 39, 57, 238, 61, 157, 79, 26, 190, 106, 236, 236, 61, 227, 155, 30, 189, 71, 30, 173, 189, 86, 142, 52, 190, 148, 121, 248, 61, 15, 180, 244, 60, 141, 183, 80, 190, 74, 87, 50, 188, 10, 63, 235, 189, 250, 65, 151, 61, 135, 196, 24, 190, 51, 254, 47, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 28, 104, 190, 54, 160, 155, 245, 188, 166, 167, 22, 190, 62, 167, 12, 62, 25, 50, 218, 189, 145, 77, 74, 61, 112, 45, 171, 60, 212, 170, 205, 61, 60, 187, 141, 190, 196, 192, 142, 189, 121, 33, 123, 60, 135, 238, 66, 61, 239, 12, 133, 188, 245, 53, 234, 187, 44, 80, 227, 61, 34, 162, 138, 62, 32, 138, 92, 190, 48, 251, 25, 62, 77, 177, 191, 189, 138, 207, 247, 61, 226, 179, 104, 60, 77, 193, 9, 190, 83, 209, 171, 62, 104, 129, 178, 60, 102, 62, 130, 62, 222, 13, 27, 62, 181, 230, 110, 62, 170, 46, 45, 62, 42, 123, 49, 62, 162, 164, 98, 62, 47, 31, 169, 187, 20, 35, 17, 62, 1, 141, 156, 189, 89, 88, 71, 62, 87, 208, 241, 61, 204, 216, 17, 62, 171, 161, 16, 190, 131, 102, 128, 60, 209, 98, 167, 62, 88, 134, 74, 190, 227, 237, 37, 191, 184, 223, 44, 62, 59, 52, 198, 190, 31, 239, 77, 62, 140, 26, 208, 62, 255, 106, 9, 191, 31, 163, 172, 61, 183, 90, 98, 62, 236, 152, 110, 190, 246, 243, 229, 61, 20, 31, 204, 190, 140, 178, 40, 62, 84, 221, 25, 191, 75, 111, 33, 190, 19, 130, 217, 62, 155, 174, 6, 62, 206, 90, 75, 190, 86, 43, 105, 189, 0, 237, 12, 62, 216, 120, 185, 61, 110, 253, 154, 190, 196, 127, 209, 62, 213, 9, 144, 62, 36, 124, 231, 188, 112, 202, 69, 61, 37, 184, 197, 61, 53, 106, 146, 185, 100, 34, 146, 62, 55, 52, 22, 191, 17, 121, 7, 191, 73, 202, 191, 62, 174, 120, 141, 190, 196, 225, 65, 62, 26, 158, 222, 190, 93, 173, 184, 61, 203, 119, 135, 62, 247, 163, 34, 62, 27, 134, 33, 190, 165, 204, 198, 190, 159, 157, 68, 62, 33, 164, 181, 190, 186, 143, 163, 189, 98, 236, 211, 190, 185, 165, 213, 189, 52, 182, 7, 62, 118, 98, 56, 62, 117, 181, 28, 191, 158, 9, 1, 191, 255, 12, 63, 62, 183, 34, 52, 62, 31, 199, 20, 191, 37, 139, 237, 189, 230, 4, 162, 62, 131, 119, 52, 190, 72, 108, 178, 189, 231, 246, 190, 190, 111, 126, 120, 191, 16, 143, 190, 60, 191, 249, 157, 62, 132, 99, 240, 61, 180, 120, 151, 189, 216, 235, 29, 189, 118, 188, 9, 191, 161, 51, 11, 191, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 19, 251, 29, 191, 235, 65, 254, 61, 213, 105, 244, 189, 106, 202, 244, 62, 27, 36, 15, 63, 213, 27, 86, 190, 145, 84, 222, 61, 34, 46, 205, 62, 169, 212, 100, 190, 247, 231, 17, 191, 92, 81, 191, 190, 102, 44, 9, 62, 3, 140, 90, 191, 115, 154, 167, 189, 15, 71, 212, 61, 133, 39, 123, 62, 135, 29, 214, 189, 181, 171, 164, 61, 223, 199, 42, 190, 225, 100, 4, 62, 148, 101, 57, 190, 60, 124, 141, 190, 56, 34, 102, 62, 98, 59, 228, 61, 253, 23, 64, 189, 244, 177, 235, 188, 109, 203, 153, 189, 142, 132, 21, 62, 80, 248, 76, 191, 90, 76, 210, 189, 182, 159, 48, 62, 234, 217, 134, 190, 202, 249, 26, 191, 234, 45, 254, 189, 174, 84, 144, 190, 140, 91, 254, 59, 228, 186, 144, 62, 133, 127, 167, 190, 154, 173, 171, 190, 219, 186, 169, 62, 103, 31, 195, 188, 95, 47, 186, 190, 155, 219, 1, 190, 16, 110, 77, 62, 81, 161, 182, 190, 243, 204, 139, 62, 252, 14, 65, 190, 95, 223, 198, 61, 13, 205, 112, 191, 231, 175, 95, 62, 85, 241, 24, 62, 46, 166, 208, 190, 189, 103, 8, 60, 187, 164, 173, 190, 58, 65, 16, 62, 66, 119, 14, 190, 83, 2, 144, 189, 164, 51, 255, 189, 60, 216, 177, 190, 244, 72, 195, 190, 232, 129, 126, 191, 23, 26, 93, 191, 23, 137, 128, 62, 10, 57, 107, 62, 110, 79, 91, 191, 96, 183, 92, 191, 59, 112, 2, 61, 60, 180, 214, 61, 86, 157, 25, 190, 250, 39, 150, 187, 122, 46, 247, 189, 216, 6, 232, 62, 211, 246, 166, 185, 233, 235, 50, 191, 3, 99, 42, 190, 112, 38, 96, 61, 20, 167, 1, 191, 186, 110, 115, 61, 10, 33, 232, 190, 250, 38, 56, 190, 73, 221, 0, 62, 163, 15, 144, 60, 163, 95, 20, 61, 185, 184, 72, 62, 145, 52, 59, 62, 120, 242, 35, 191, 124, 64, 89, 190, 177, 219, 29, 190, 190, 246, 137, 61, 195, 251, 59, 190, 127, 152, 116, 190, 36, 95, 5, 189, 106, 14, 21, 191, 141, 51, 222, 61, 147, 54, 163, 61, 51, 200, 235, 61, 134, 60, 170, 188, 96, 67, 99, 190, 207, 171, 37, 62, 79, 175, 210, 190, 46, 18, 133, 61, 115, 126, 102, 62, 0, 49, 237, 189, 229, 11, 89, 60, 45, 155, 4, 62, 86, 24, 11, 62, 126, 239, 215, 61, 138, 229, 235, 188, 140, 246, 177, 62, 34, 68, 144, 61, 168, 246, 236, 60, 30, 220, 246, 189, 128, 204, 60, 62, 0, 39, 118, 191, 154, 182, 232, 59, 238, 196, 216, 61, 186, 193, 140, 191, 129, 120, 136, 62, 49, 148, 6, 191, 226, 49, 19, 191, 62, 55, 13, 189, 47, 8, 161, 190, 146, 170, 95, 61, 205, 55, 236, 189, 18, 67, 230, 62, 111, 220, 84, 62, 14, 165, 86, 62, 88, 255, 9, 190, 43, 168, 169, 60, 143, 0, 206, 190, 41, 141, 106, 62, 33, 231, 75, 190, 29, 158, 74, 190, 176, 53, 189, 62, 248, 37, 42, 191, 204, 39, 215, 191, 143, 214, 69, 62, 243, 198, 148, 62, 254, 31, 52, 61, 240, 176, 165, 190, 70, 86, 239, 61, 233, 142, 186, 60, 4, 7, 164, 62, 213, 254, 0, 191, 253, 150, 47, 62, 128, 203, 58, 191, 95, 147, 169, 190, 183, 119, 183, 190, 27, 188, 219, 190, 7, 71, 202, 62, 60, 180, 199, 190, 82, 236, 166, 190, 24, 83, 175, 191, 0, 158, 183, 190, 73, 200, 179, 62, 116, 50, 181, 189, 182, 101, 37, 63, 70, 227, 246, 61, 235, 138, 20, 191, 202, 78, 144, 190, 83, 168, 130, 191, 4, 240, 141, 191, 193, 46, 27, 189, 227, 140, 184, 62, 54, 7, 164, 61, 229, 55, 65, 190, 134, 213, 174, 189, 77, 17, 189, 62, 40, 78, 204, 59, 25, 110, 243, 190, 64, 218, 78, 61, 248, 89, 78, 62, 143, 39, 0, 191, 232, 204, 123, 61, 112, 223, 198, 190, 237, 53, 151, 190, 46, 194, 206, 60, 35, 122, 92, 189, 51, 86, 15, 62, 199, 215, 119, 189, 119, 238, 75, 62, 36, 169, 179, 190, 207, 220, 28, 62, 169, 220, 176, 190, 69, 167, 51, 190, 200, 169, 21, 190, 215, 172, 34, 62, 207, 123, 238, 61, 137, 92, 120, 191, 251, 1, 70, 190, 172, 175, 67, 62, 31, 45, 84, 189, 18, 195, 104, 189, 85, 211, 100, 190, 149, 131, 186, 188, 70, 45, 220, 61, 247, 122, 31, 190, 41, 56, 201, 61, 159, 197, 8, 62, 86, 206, 173, 186, 177, 137, 78, 189, 209, 70, 158, 190, 22, 20, 77, 190, 155, 61, 2, 190, 136, 77, 19, 62, 156, 246, 163, 61, 186, 188, 154, 190, 151, 136, 170, 188, 170, 225, 79, 62, 218, 63, 66, 189, 131, 216, 140, 189, 204, 179, 102, 62, 148, 151, 136, 189, 210, 169, 169, 190, 13, 159, 180, 188, 48, 49, 84, 61, 211, 123, 92, 190, 128, 77, 58, 190, 206, 123, 106, 189, 150, 112, 66, 61, 242, 185, 120, 190, 32, 178, 56, 62, 252, 241, 99, 188, 214, 236, 75, 190, 59, 78, 233, 62, 85, 164, 127, 189, 60, 215, 76, 62, 148, 2, 158, 190, 186, 19, 137, 190, 237, 162, 31, 62, 143, 2, 12, 62, 199, 187, 33, 191, 214, 235, 140, 62, 5, 110, 118, 62, 86, 2, 156, 62, 136, 252, 186, 61, 179, 75, 153, 62, 133, 124, 14, 62, 228, 29, 232, 189, 136, 255, 12, 187, 113, 71, 66, 62, 48, 156, 76, 189, 245, 234, 25, 61, 1, 227, 125, 190, 135, 185, 231, 61, 204, 153, 23, 190, 153, 67, 241, 190, 58, 182, 2, 190, 200, 101, 92, 189, 50, 147, 184, 61, 173, 71, 81, 62, 202, 98, 12, 62, 47, 253, 180, 62, 46, 205, 89, 62, 134, 235, 6, 59, 149, 60, 232, 62, 141, 222, 27, 191, 137, 40, 228, 190, 114, 232, 211, 190, 103, 235, 46, 62, 74, 165, 6, 60, 96, 46, 30, 190, 145, 166, 129, 62, 87, 103, 38, 62, 114, 146, 114, 190, 112, 40, 1, 189, 36, 8, 71, 190, 155, 48, 78, 62, 32, 203, 31, 189, 52, 10, 14, 189, 107, 41, 15, 63, 160, 166, 5, 61, 153, 98, 1, 62, 204, 111, 132, 188, 4, 24, 100, 62, 104, 169, 158, 62, 41, 15, 77, 191, 244, 135, 245, 189, 111, 146, 33, 62, 46, 85, 11, 62, 68, 15, 252, 62, 77, 117, 180, 190, 205, 25, 68, 191, 164, 26, 236, 189, 55, 114, 76, 190, 88, 247, 239, 189, 31, 191, 49, 61, 190, 181, 163, 190, 10, 50, 75, 61, 153, 240, 179, 61, 29, 84, 138, 62, 127, 198, 138, 189, 115, 224, 66, 62, 135, 253, 150, 62, 149, 153, 233, 190, 105, 193, 178, 60, 100, 222, 192, 189, 162, 2, 69, 191, 177, 119, 146, 190, 13, 244, 51, 61, 49, 119, 253, 61, 12, 195, 144, 61, 25, 179, 37, 190, 24, 64, 227, 190, 156, 184, 27, 189, 29, 139, 173, 189, 123, 234, 213, 190, 168, 216, 50, 190, 179, 167, 131, 62, 153, 35, 149, 60, 202, 35, 126, 60, 97, 212, 41, 190, 144, 3, 199, 190, 8, 142, 70, 62, 34, 67, 125, 62, 234, 67, 133, 61, 26, 209, 250, 61, 172, 182, 35, 190, 211, 46, 138, 190, 101, 163, 50, 190, 75, 12, 191, 189, 252, 107, 133, 63, 97, 17, 14, 62, 203, 4, 147, 61, 39, 54, 41, 62, 186, 249, 28, 61, 163, 166, 194, 62, 244, 206, 169, 61, 211, 105, 50, 190, 209, 114, 61, 191, 174, 239, 226, 61, 80, 155, 73, 62, 8, 32, 74, 187, 153, 160, 7, 191, 60, 30, 94, 191, 207, 157, 221, 58, 14, 31, 70, 62, 105, 182, 14, 191, 111, 103, 91, 190, 149, 27, 93, 62, 19, 82, 162, 61, 170, 57, 235, 190, 245, 192, 74, 191, 26, 54, 81, 61, 154, 190, 52, 62, 240, 205, 177, 190, 107, 154, 209, 61, 127, 9, 5, 62, 33, 171, 35, 191, 131, 141, 163, 188, 251, 128, 33, 62, 248, 219, 163, 62, 129, 117, 235, 60, 187, 207, 163, 189, 185, 11, 247, 61, 111, 129, 141, 62, 151, 76, 167, 62, 221, 149, 241, 62, 208, 191, 84, 191, 241, 230, 84, 188, 45, 101, 201, 188, 205, 42, 204, 191, 199, 127, 87, 190, 196, 118, 113, 190, 89, 16, 156, 190, 217, 208, 157, 61, 180, 209, 93, 190, 187, 25, 58, 190, 199, 121, 204, 189, 252, 217, 73, 62, 69, 23, 147, 191, 173, 13, 153, 61, 73, 92, 171, 189, 6, 77, 174, 62, 8, 131, 32, 62, 186, 135, 136, 189, 186, 63, 51, 191, 90, 71, 122, 189, 108, 8, 152, 62, 107, 204, 136, 62, 248, 21, 129, 62, 194, 34, 221, 59, 27, 11, 52, 191, 117, 7, 97, 62, 25, 72, 2, 61, 250, 121, 138, 189, 177, 211, 160, 62, 102, 235, 58, 61, 175, 147, 153, 190, 109, 27, 49, 62, 175, 87, 102, 191, 131, 64, 32, 190, 210, 190, 114, 62, 193, 133, 25, 191, 55, 67, 69, 189, 235, 56, 142, 189, 241, 73, 1, 62, 180, 184, 176, 61, 165, 39, 101, 190, 48, 172, 199, 190, 120, 0, 182, 61, 133, 0, 20, 62, 229, 57, 237, 190, 115, 171, 245, 190, 229, 116, 220, 61, 240, 206, 14, 190, 154, 16, 105, 190, 106, 40, 178, 190, 108, 159, 76, 191, 87, 90, 12, 190, 217, 123, 74, 188, 155, 115, 7, 62, 134, 161, 176, 62, 113, 153, 3, 190, 121, 186, 3, 191, 161, 253, 94, 62, 38, 248, 138, 188, 147, 121, 136, 191, 124, 248, 121, 190, 254, 116, 132, 188, 26, 218, 53, 191, 20, 46, 159, 190, 152, 4, 210, 62, 133, 30, 26, 62, 125, 106, 9, 63, 142, 201, 42, 62, 64, 160, 18, 63, 84, 136, 95, 61, 115, 1, 133, 62, 203, 59, 135, 62, 131, 226, 46, 190, 227, 87, 117, 189, 222, 102, 170, 189, 162, 243, 7, 191, 54, 2, 168, 61, 209, 195, 245, 61, 44, 145, 126, 191, 110, 208, 211, 61, 252, 244, 182, 60, 203, 6, 247, 190, 182, 195, 220, 189, 92, 43, 139, 191, 72, 254, 155, 189, 152, 3, 55, 191, 174, 139, 79, 190, 136, 151, 232, 189, 211, 143, 65, 62, 139, 223, 255, 62, 171, 155, 226, 61, 189, 136, 27, 190, 140, 179, 172, 62, 152, 191, 160, 60, 6, 250, 158, 62, 220, 142, 17, 63, 83, 194, 0, 191, 171, 76, 27, 190, 189, 73, 73, 190, 230, 236, 7, 191, 167, 190, 109, 188, 65, 89, 87, 190, 147, 94, 3, 190, 46, 80, 59, 60, 49, 123, 167, 190, 182, 158, 79, 190, 210, 34, 96, 188, 27, 83, 200, 61, 107, 206, 107, 191, 247, 74, 120, 190, 132, 121, 102, 62, 204, 172, 1, 61, 55, 43, 62, 190, 212, 29, 189, 188, 33, 164, 16, 191, 201, 208, 17, 190, 64, 193, 163, 62, 233, 176, 174, 187, 198, 209, 8, 62, 85, 151, 136, 189, 184, 177, 3, 191, 143, 18, 128, 62, 26, 136, 21, 62, 122, 196, 75, 188, 159, 142, 170, 62, 181, 43, 75, 62, 13, 95, 136, 62, 16, 20, 198, 62, 253, 9, 43, 191, 203, 253, 60, 189, 44, 174, 143, 187, 24, 22, 180, 191, 72, 241, 191, 188, 215, 183, 194, 190, 94, 160, 124, 190, 185, 149, 158, 189, 235, 114, 85, 190, 108, 233, 4, 189, 100, 110, 236, 189, 235, 112, 54, 62, 248, 4, 198, 191, 211, 142, 13, 190, 218, 19, 137, 62, 89, 190, 67, 62, 155, 193, 212, 61, 219, 194, 161, 61, 229, 250, 47, 191, 74, 5, 83, 62, 255, 169, 6, 62, 48, 192, 155, 62, 48, 222, 203, 60, 253, 87, 139, 189, 101, 150, 64, 191, 116, 231, 151, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 56, 252, 132, 62, 39, 229, 155, 60, 48, 101, 109, 62, 69, 9, 152, 190, 96, 38, 17, 62, 13, 192, 100, 62, 135, 123, 211, 62, 97, 242, 180, 190, 176, 183, 29, 189, 238, 163, 88, 191, 144, 113, 27, 189, 172, 176, 5, 62, 163, 206, 31, 62, 62, 4, 178, 189, 208, 153, 14, 191, 248, 60, 98, 62, 17, 159, 15, 62, 191, 127, 118, 190, 195, 16, 112, 190, 83, 129, 111, 61, 249, 252, 136, 62, 55, 119, 137, 191, 242, 211, 255, 190, 106, 44, 135, 61, 105, 217, 2, 63, 101, 160, 175, 61, 64, 120, 13, 62, 136, 190, 20, 60, 29, 225, 25, 62, 167, 54, 24, 61, 216, 118, 119, 62, 216, 108, 50, 63, 58, 255, 247, 190, 217, 16, 129, 191, 193, 113, 126, 62, 141, 165, 83, 60, 39, 116, 3, 190, 120, 253, 204, 61, 1, 200, 178, 190, 204, 28, 113, 61, 146, 50, 196, 186, 101, 136, 88, 189, 214, 236, 139, 190, 182, 133, 132, 61, 193, 29, 23, 189, 146, 187, 107, 62, 143, 142, 173, 189, 220, 124, 232, 190, 38, 180, 107, 62, 210, 98, 145, 61, 119, 236, 248, 189, 187, 37, 45, 190, 8, 60, 255, 188, 194, 68, 92, 189, 177, 97, 29, 62, 130, 87, 156, 189, 165, 197, 63, 191, 70, 152, 30, 190, 142, 54, 119, 60, 178, 196, 35, 62, 89, 35, 107, 190, 9, 241, 167, 188, 93, 55, 219, 190, 28, 98, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 55, 48, 190, 144, 228, 187, 190, 175, 31, 64, 62, 180, 245, 196, 189, 218, 110, 113, 61, 69, 106, 11, 190, 143, 58, 74, 190, 92, 248, 130, 62, 5, 32, 73, 190, 185, 235, 169, 62, 0, 83, 119, 62, 122, 90, 101, 61, 159, 17, 34, 187, 86, 124, 45, 62, 90, 36, 45, 62, 78, 214, 242, 60, 202, 164, 132, 61, 159, 182, 154, 61, 27, 13, 90, 189, 99, 203, 240, 189, 252, 85, 56, 190, 32, 159, 252, 61, 49, 52, 173, 61, 191, 221, 253, 189, 230, 66, 29, 62, 86, 216, 209, 61, 153, 146, 155, 188, 182, 151, 252, 189, 236, 70, 75, 62, 248, 59, 28, 190, 25, 215, 182, 190, 59, 161, 65, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 214, 44, 60, 99, 214, 222, 62, 161, 6, 190, 62, 143, 23, 162, 190, 217, 160, 176, 190, 217, 80, 18, 191, 49, 13, 151, 190, 222, 138, 132, 191, 142, 226, 88, 60, 172, 36, 62, 62, 247, 161, 214, 62, 211, 252, 159, 190, 190, 58, 99, 61, 205, 215, 142, 62, 87, 15, 129, 63, 62, 220, 133, 62, 127, 32, 239, 190, 216, 35, 117, 191, 50, 209, 169, 62, 210, 226, 218, 60, 198, 47, 13, 63, 162, 253, 252, 190, 24, 222, 50, 190, 128, 85, 43, 63, 80, 13, 184, 190, 152, 225, 109, 190, 28, 182, 120, 191, 202, 69, 136, 190, 100, 64, 73, 191, 44, 61, 27, 61, 240, 16, 50, 63, 195, 221, 95, 189, 180, 33, 6, 62, 153, 221, 157, 61, 193, 104, 189, 190, 223, 213, 218, 61, 82, 124, 65, 190, 125, 235, 236, 62, 227, 53, 193, 61, 228, 99, 42, 62, 68, 76, 137, 61, 178, 178, 147, 190, 113, 135, 165, 61, 48, 243, 7, 191, 103, 13, 5, 62, 27, 67, 136, 189, 169, 150, 44, 62, 217, 126, 57, 190, 188, 214, 41, 190, 220, 114, 205, 61, 45, 244, 168, 190, 49, 152, 151, 190, 229, 219, 17, 62, 235, 35, 67, 189, 129, 182, 236, 189, 204, 138, 238, 61, 85, 233, 119, 189, 212, 235, 165, 62, 135, 143, 14, 190, 133, 143, 184, 62, 52, 220, 114, 61, 251, 241, 131, 189, 53, 225, 177, 189, 26, 172, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 134, 151, 62, 34, 111, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {126, 5, 211, 62, 185, 70, 163, 190, 36, 143, 173, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 159, 232, 63, 17, 218, 115, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}