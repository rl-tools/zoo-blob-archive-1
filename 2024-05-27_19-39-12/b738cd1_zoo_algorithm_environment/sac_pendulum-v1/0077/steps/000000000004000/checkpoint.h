// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 152, 100, 61, 7, 170, 73, 63, 207, 204, 192, 62, 99, 98, 175, 190, 25, 158, 42, 63, 25, 116, 25, 63, 177, 8, 247, 62, 95, 71, 121, 63, 206, 44, 236, 188, 243, 54, 65, 63, 89, 226, 198, 190, 186, 44, 173, 189, 166, 18, 225, 188, 221, 18, 53, 63, 249, 154, 204, 190, 153, 56, 241, 61, 191, 145, 89, 63, 95, 228, 48, 190, 233, 238, 156, 62, 180, 71, 21, 191, 71, 226, 253, 190, 191, 131, 156, 62, 242, 170, 80, 191, 188, 232, 193, 61, 99, 53, 53, 62, 35, 10, 48, 190, 197, 175, 139, 62, 157, 140, 108, 191, 171, 123, 220, 190, 148, 6, 83, 189, 169, 73, 157, 61, 124, 152, 101, 190, 32, 233, 222, 62, 233, 92, 211, 62, 242, 117, 90, 191, 130, 63, 237, 190, 153, 156, 19, 191, 248, 147, 89, 62, 113, 216, 11, 191, 26, 223, 170, 62, 40, 101, 239, 190, 134, 48, 3, 63, 247, 213, 97, 191, 146, 14, 240, 62, 180, 225, 18, 62, 225, 255, 44, 190, 226, 188, 11, 191, 204, 25, 56, 63, 45, 47, 224, 61, 112, 225, 0, 189, 224, 3, 30, 191, 221, 2, 244, 62, 241, 149, 94, 190, 161, 121, 87, 63, 42, 4, 231, 190, 236, 167, 68, 191, 197, 250, 188, 189, 71, 192, 39, 63, 41, 167, 1, 191, 105, 109, 10, 191, 128, 214, 28, 63, 206, 133, 181, 188, 42, 178, 138, 62, 154, 219, 65, 191, 128, 34, 172, 61, 114, 43, 70, 61, 42, 121, 20, 190, 52, 14, 143, 190, 213, 14, 55, 63, 111, 172, 210, 190, 77, 42, 204, 190, 231, 166, 111, 63, 48, 172, 210, 62, 72, 124, 137, 191, 160, 175, 230, 189, 218, 189, 107, 62, 246, 105, 215, 62, 215, 130, 42, 63, 183, 117, 82, 62, 175, 71, 10, 63, 77, 27, 38, 60, 250, 79, 243, 62, 241, 7, 143, 62, 83, 216, 1, 190, 208, 241, 203, 62, 208, 79, 25, 63, 64, 228, 140, 62, 226, 33, 43, 190, 187, 255, 142, 62, 117, 47, 38, 191, 15, 67, 180, 62, 57, 160, 47, 191, 206, 63, 129, 190, 78, 37, 63, 62, 197, 230, 52, 190, 164, 197, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 77, 39, 191, 163, 189, 68, 62, 118, 44, 0, 63, 213, 9, 149, 62, 146, 60, 251, 188, 57, 51, 240, 61, 82, 10, 69, 191, 84, 199, 134, 62, 147, 52, 43, 61, 217, 172, 143, 188, 119, 27, 51, 190, 195, 236, 63, 62, 207, 247, 92, 190, 245, 247, 114, 61, 229, 137, 46, 63, 115, 76, 47, 188, 138, 37, 8, 63, 161, 180, 39, 63, 190, 193, 32, 63, 96, 78, 32, 190, 189, 223, 118, 62, 188, 124, 193, 62, 168, 50, 252, 62, 19, 236, 58, 190, 177, 227, 192, 190, 83, 254, 16, 63, 153, 189, 1, 63, 29, 215, 246, 62, 210, 10, 63, 190, 150, 197, 174, 61, 137, 128, 82, 190, 196, 248, 222, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 56, 141, 61, 104, 0, 13, 190, 173, 232, 241, 61, 182, 0, 143, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 209, 149, 0, 62, 81, 119, 176, 188, 122, 106, 158, 61, 210, 200, 9, 62, 80, 10, 55, 190, 22, 232, 254, 59, 118, 116, 143, 189, 137, 97, 149, 187, 23, 51, 38, 61, 215, 239, 1, 62, 150, 126, 59, 190, 76, 64, 44, 190, 219, 89, 68, 61, 56, 189, 42, 190, 94, 29, 14, 190, 130, 104, 10, 62, 245, 133, 180, 61, 246, 149, 227, 59, 202, 37, 237, 61, 61, 97, 41, 190, 187, 53, 3, 62, 139, 49, 163, 61, 140, 102, 46, 188, 163, 179, 62, 61, 225, 202, 186, 189, 244, 182, 104, 189, 208, 149, 168, 61, 182, 36, 197, 61, 36, 0, 112, 189, 94, 119, 45, 188, 34, 240, 44, 189, 201, 88, 91, 62, 29, 154, 67, 190, 51, 138, 34, 189, 216, 206, 217, 190, 165, 189, 207, 189, 3, 32, 160, 61, 122, 46, 253, 61, 250, 63, 50, 189, 56, 38, 2, 189, 211, 157, 174, 189, 69, 246, 3, 189, 183, 60, 164, 188, 252, 29, 106, 189, 74, 0, 0, 189, 126, 42, 23, 189, 216, 1, 56, 190, 97, 33, 80, 61, 196, 50, 206, 187, 92, 19, 41, 61, 204, 244, 11, 62, 132, 226, 166, 61, 32, 213, 31, 62, 49, 110, 54, 62, 172, 46, 174, 60, 137, 62, 52, 62, 197, 7, 223, 61, 244, 111, 118, 190, 1, 242, 83, 190, 168, 83, 84, 188, 143, 1, 7, 62, 83, 40, 251, 189, 101, 243, 145, 189, 170, 206, 111, 61, 35, 38, 228, 62, 63, 255, 183, 61, 171, 175, 148, 190, 254, 145, 209, 61, 115, 235, 110, 62, 32, 35, 84, 190, 228, 72, 151, 189, 26, 209, 193, 190, 125, 39, 75, 62, 156, 31, 218, 187, 82, 38, 151, 59, 198, 167, 20, 62, 198, 198, 82, 62, 247, 17, 171, 62, 219, 70, 121, 190, 190, 47, 78, 190, 164, 221, 8, 62, 56, 206, 190, 188, 171, 117, 26, 190, 222, 62, 21, 62, 58, 119, 58, 60, 243, 195, 252, 190, 134, 56, 101, 61, 241, 204, 207, 189, 113, 181, 173, 189, 174, 89, 34, 61, 26, 7, 190, 59, 111, 112, 33, 188, 64, 229, 61, 189, 154, 15, 66, 189, 215, 170, 230, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 47, 197, 134, 188, 0, 117, 30, 62, 6, 228, 38, 189, 138, 131, 134, 187, 19, 19, 28, 62, 17, 51, 39, 62, 190, 220, 238, 189, 92, 28, 11, 190, 193, 131, 35, 190, 4, 148, 14, 190, 92, 71, 129, 189, 186, 192, 160, 61, 19, 80, 249, 61, 202, 178, 143, 187, 215, 14, 169, 189, 150, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 167, 39, 204, 61, 72, 62, 241, 188, 15, 236, 65, 62, 178, 69, 104, 62, 227, 77, 105, 190, 239, 30, 76, 62, 251, 14, 94, 190, 114, 173, 21, 190, 90, 71, 234, 189, 239, 238, 177, 190, 247, 160, 207, 61, 167, 0, 111, 189, 204, 230, 86, 188, 189, 78, 15, 62, 166, 76, 211, 189, 31, 171, 50, 188, 246, 52, 0, 189, 94, 1, 69, 62, 132, 153, 114, 191, 183, 203, 14, 190, 106, 203, 51, 62, 235, 187, 32, 62, 22, 245, 124, 61, 14, 13, 71, 190, 230, 219, 235, 190, 94, 201, 215, 61, 129, 65, 88, 188, 135, 81, 175, 62, 113, 171, 21, 62, 248, 229, 136, 188, 69, 86, 211, 190, 3, 92, 94, 190, 206, 172, 3, 190, 196, 82, 208, 61, 133, 5, 234, 190, 158, 184, 10, 62, 149, 97, 239, 188, 201, 223, 134, 189, 68, 58, 253, 60, 203, 107, 154, 62, 196, 74, 71, 190, 137, 14, 52, 190, 143, 135, 189, 189, 129, 168, 17, 62, 142, 83, 133, 60, 83, 43, 172, 61, 13, 142, 1, 190, 55, 244, 47, 60, 220, 30, 168, 60, 211, 198, 166, 188, 145, 149, 14, 189, 91, 81, 102, 62, 251, 136, 188, 188, 105, 241, 0, 190, 177, 235, 28, 61, 143, 81, 236, 60, 142, 59, 220, 62, 88, 4, 45, 190, 34, 139, 177, 190, 173, 89, 13, 59, 159, 77, 53, 59, 191, 200, 38, 61, 130, 61, 67, 62, 69, 14, 31, 190, 73, 115, 147, 61, 127, 53, 156, 188, 216, 206, 253, 189, 241, 151, 6, 190, 31, 12, 215, 61, 17, 14, 12, 189, 171, 71, 43, 62, 166, 55, 20, 188, 164, 117, 226, 189, 193, 24, 41, 61, 238, 138, 249, 189, 100, 162, 233, 61, 106, 113, 47, 61, 96, 13, 64, 61, 180, 123, 161, 189, 60, 185, 100, 62, 51, 67, 109, 61, 168, 104, 218, 61, 205, 162, 0, 62, 221, 164, 41, 62, 22, 103, 121, 190, 188, 210, 167, 190, 198, 169, 237, 62, 109, 220, 207, 61, 178, 148, 72, 62, 75, 111, 207, 60, 36, 25, 162, 190, 221, 69, 129, 61, 138, 1, 24, 61, 217, 88, 18, 190, 107, 143, 83, 62, 74, 130, 229, 189, 59, 246, 109, 61, 159, 71, 197, 190, 197, 140, 12, 60, 37, 30, 100, 190, 209, 249, 216, 190, 23, 18, 171, 61, 30, 112, 161, 189, 56, 203, 87, 190, 160, 254, 34, 190, 147, 160, 207, 62, 55, 78, 71, 190, 255, 139, 26, 62, 49, 41, 196, 62, 38, 100, 156, 189, 177, 33, 87, 62, 86, 233, 128, 191, 78, 184, 151, 61, 225, 191, 119, 191, 219, 146, 108, 62, 12, 69, 106, 190, 251, 35, 2, 190, 83, 91, 28, 62, 37, 242, 179, 189, 0, 86, 98, 191, 121, 141, 29, 191, 103, 76, 4, 191, 23, 196, 158, 61, 152, 38, 28, 191, 144, 137, 138, 60, 227, 101, 154, 61, 139, 125, 188, 190, 112, 133, 23, 190, 236, 214, 247, 186, 31, 57, 36, 61, 216, 246, 169, 188, 209, 225, 206, 189, 104, 209, 191, 188, 238, 48, 18, 189, 74, 37, 242, 61, 30, 110, 20, 190, 172, 18, 15, 62, 43, 229, 7, 189, 34, 155, 122, 189, 234, 96, 47, 190, 135, 64, 3, 62, 32, 170, 78, 61, 239, 198, 49, 190, 23, 134, 184, 59, 215, 41, 222, 189, 21, 228, 165, 61, 12, 50, 18, 190, 187, 85, 67, 61, 220, 62, 216, 59, 145, 125, 207, 189, 137, 79, 136, 189, 215, 148, 92, 59, 192, 39, 253, 57, 7, 121, 134, 188, 213, 151, 240, 189, 7, 213, 33, 62, 214, 115, 167, 189, 192, 183, 101, 61, 112, 45, 171, 60, 65, 47, 236, 61, 196, 22, 19, 190, 98, 250, 133, 189, 64, 40, 136, 188, 145, 193, 50, 61, 229, 167, 161, 189, 162, 19, 51, 59, 200, 81, 32, 189, 202, 240, 141, 62, 144, 253, 58, 190, 205, 246, 230, 61, 1, 220, 184, 188, 96, 30, 72, 60, 236, 170, 120, 189, 193, 165, 5, 190, 64, 150, 163, 62, 97, 116, 242, 61, 140, 202, 113, 62, 7, 177, 34, 62, 93, 153, 32, 62, 25, 57, 5, 62, 64, 41, 4, 62, 246, 159, 162, 62, 222, 54, 252, 60, 178, 161, 85, 62, 215, 118, 209, 189, 146, 64, 56, 62, 7, 130, 129, 61, 159, 234, 6, 62, 18, 187, 238, 188, 57, 166, 164, 188, 32, 17, 58, 62, 149, 29, 66, 190, 96, 128, 2, 191, 97, 177, 177, 61, 181, 84, 179, 190, 66, 6, 121, 62, 210, 96, 14, 190, 249, 191, 15, 191, 70, 63, 156, 189, 9, 107, 128, 62, 59, 226, 86, 190, 218, 31, 178, 61, 40, 192, 189, 190, 35, 74, 1, 62, 233, 243, 29, 191, 96, 142, 249, 189, 214, 151, 59, 62, 255, 241, 86, 62, 170, 215, 42, 190, 136, 49, 198, 58, 236, 135, 171, 60, 60, 190, 204, 61, 185, 70, 129, 190, 121, 198, 134, 62, 21, 6, 143, 62, 105, 60, 222, 188, 64, 104, 237, 60, 173, 64, 198, 61, 95, 60, 100, 189, 151, 200, 165, 62, 63, 212, 218, 190, 125, 217, 41, 191, 254, 116, 141, 62, 78, 27, 18, 190, 129, 119, 130, 190, 66, 37, 95, 190, 215, 252, 60, 60, 196, 25, 79, 62, 252, 74, 41, 62, 90, 112, 221, 189, 95, 73, 188, 58, 12, 44, 6, 62, 70, 39, 56, 189, 46, 253, 89, 189, 242, 79, 53, 61, 206, 114, 42, 190, 193, 205, 32, 62, 95, 174, 64, 62, 147, 127, 148, 190, 94, 2, 105, 189, 208, 211, 8, 62, 138, 235, 27, 62, 29, 219, 152, 190, 184, 244, 75, 190, 148, 48, 145, 62, 160, 241, 6, 190, 45, 10, 117, 189, 243, 32, 101, 189, 187, 197, 61, 191, 236, 251, 83, 60, 14, 116, 125, 62, 217, 65, 72, 61, 35, 159, 208, 189, 18, 0, 247, 187, 95, 39, 206, 190, 15, 169, 162, 189, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 125, 203, 195, 190, 206, 23, 70, 62, 236, 114, 255, 189, 56, 142, 218, 62, 187, 31, 30, 62, 195, 82, 207, 190, 83, 175, 196, 189, 90, 183, 188, 62, 19, 92, 147, 190, 151, 103, 175, 187, 196, 77, 210, 190, 234, 228, 183, 61, 198, 223, 6, 191, 222, 151, 36, 190, 252, 186, 170, 61, 126, 84, 102, 62, 51, 127, 132, 189, 82, 28, 186, 61, 67, 245, 106, 189, 55, 48, 201, 61, 166, 92, 122, 190, 207, 149, 186, 61, 214, 176, 41, 62, 245, 13, 12, 62, 112, 180, 94, 189, 82, 101, 10, 61, 104, 125, 0, 190, 163, 218, 224, 61, 106, 70, 18, 191, 156, 151, 60, 189, 107, 167, 146, 61, 246, 243, 205, 190, 244, 190, 156, 190, 13, 80, 29, 62, 156, 95, 40, 189, 198, 97, 118, 61, 183, 181, 12, 190, 146, 242, 239, 189, 69, 25, 25, 62, 87, 57, 218, 60, 238, 128, 69, 190, 32, 108, 158, 61, 253, 131, 105, 190, 216, 245, 148, 61, 3, 234, 78, 190, 243, 213, 190, 60, 215, 123, 37, 60, 12, 128, 54, 60, 88, 213, 164, 190, 176, 31, 12, 62, 51, 9, 63, 62, 138, 46, 28, 62, 55, 18, 89, 190, 99, 117, 101, 61, 107, 154, 74, 185, 206, 1, 37, 188, 197, 62, 55, 62, 5, 242, 138, 61, 84, 212, 240, 189, 30, 235, 182, 189, 86, 145, 24, 190, 62, 115, 220, 190, 134, 67, 46, 61, 45, 125, 173, 188, 151, 97, 65, 61, 137, 31, 247, 189, 214, 39, 33, 61, 231, 81, 167, 61, 62, 196, 50, 190, 57, 221, 16, 190, 153, 35, 67, 190, 99, 203, 230, 62, 141, 46, 61, 61, 196, 135, 142, 190, 69, 226, 50, 190, 243, 106, 136, 61, 72, 159, 58, 190, 164, 126, 81, 61, 52, 171, 192, 190, 83, 117, 17, 59, 190, 1, 19, 62, 11, 107, 151, 61, 149, 83, 73, 59, 176, 44, 59, 62, 128, 252, 45, 62, 201, 251, 58, 190, 46, 5, 51, 190, 70, 77, 56, 60, 1, 183, 153, 61, 52, 48, 12, 189, 166, 7, 123, 190, 148, 150, 54, 189, 234, 135, 185, 190, 71, 46, 220, 61, 172, 59, 178, 61, 106, 223, 12, 187, 109, 104, 27, 62, 238, 152, 27, 61, 232, 147, 76, 62, 161, 52, 105, 190, 193, 58, 227, 188, 0, 139, 62, 62, 201, 142, 55, 189, 91, 116, 254, 189, 131, 200, 194, 61, 145, 151, 19, 61, 165, 67, 231, 61, 151, 131, 5, 190, 168, 208, 144, 62, 155, 6, 203, 61, 174, 13, 51, 61, 46, 121, 9, 190, 54, 121, 2, 62, 108, 87, 160, 190, 123, 119, 18, 190, 92, 245, 45, 61, 116, 153, 58, 190, 211, 213, 67, 62, 57, 18, 101, 190, 166, 211, 181, 190, 112, 121, 154, 190, 215, 30, 189, 189, 98, 47, 117, 61, 19, 40, 245, 189, 231, 1, 11, 62, 97, 201, 21, 62, 44, 231, 58, 61, 88, 255, 9, 190, 90, 136, 47, 62, 57, 41, 35, 190, 88, 180, 79, 62, 125, 60, 145, 61, 30, 113, 133, 190, 38, 231, 172, 62, 184, 201, 27, 190, 218, 10, 208, 190, 44, 42, 214, 61, 143, 81, 25, 62, 143, 108, 57, 60, 97, 57, 129, 189, 192, 99, 106, 62, 131, 175, 47, 61, 79, 60, 62, 62, 187, 199, 18, 191, 159, 154, 133, 62, 131, 221, 135, 190, 14, 27, 20, 190, 134, 254, 84, 190, 112, 117, 7, 190, 175, 123, 255, 61, 91, 26, 196, 190, 179, 219, 191, 190, 91, 106, 48, 191, 186, 162, 43, 190, 139, 75, 135, 62, 83, 81, 154, 189, 196, 123, 119, 62, 211, 107, 87, 62, 67, 250, 147, 189, 192, 137, 144, 190, 4, 152, 250, 189, 209, 100, 137, 190, 121, 197, 19, 189, 56, 195, 164, 62, 158, 225, 177, 60, 130, 39, 182, 190, 97, 10, 240, 189, 206, 169, 179, 62, 17, 129, 63, 61, 17, 97, 39, 190, 240, 182, 221, 61, 247, 73, 60, 62, 190, 9, 44, 190, 126, 186, 188, 60, 222, 61, 217, 190, 207, 194, 69, 189, 164, 210, 48, 61, 8, 200, 141, 188, 118, 104, 219, 61, 28, 89, 153, 189, 26, 14, 47, 62, 174, 161, 17, 190, 10, 96, 14, 62, 109, 112, 40, 190, 123, 156, 45, 190, 155, 52, 219, 59, 33, 173, 27, 62, 45, 251, 179, 61, 156, 180, 67, 191, 11, 30, 143, 189, 43, 136, 49, 62, 49, 188, 7, 61, 9, 147, 103, 61, 51, 162, 8, 60, 13, 248, 250, 61, 59, 168, 54, 62, 165, 17, 64, 190, 67, 2, 172, 61, 3, 152, 36, 61, 241, 6, 147, 59, 220, 242, 68, 189, 60, 55, 133, 61, 46, 26, 26, 190, 69, 84, 209, 189, 232, 212, 72, 60, 252, 243, 220, 61, 134, 195, 159, 188, 108, 136, 226, 60, 162, 93, 65, 62, 44, 13, 15, 62, 157, 86, 148, 60, 209, 255, 41, 62, 175, 176, 142, 60, 94, 90, 128, 188, 98, 63, 11, 61, 135, 98, 181, 61, 18, 235, 52, 190, 20, 150, 170, 59, 37, 169, 198, 61, 202, 136, 232, 61, 31, 187, 29, 187, 205, 31, 220, 61, 68, 78, 32, 61, 200, 196, 68, 190, 134, 74, 154, 62, 124, 29, 53, 190, 255, 168, 9, 62, 137, 153, 183, 190, 160, 94, 238, 189, 152, 63, 107, 62, 142, 125, 32, 190, 16, 95, 184, 190, 43, 240, 151, 62, 97, 202, 27, 188, 78, 74, 152, 62, 78, 161, 169, 188, 159, 43, 131, 62, 54, 128, 129, 62, 251, 12, 174, 61, 180, 115, 223, 188, 185, 191, 1, 62, 245, 169, 154, 188, 173, 245, 76, 189, 179, 132, 176, 190, 214, 209, 187, 61, 57, 24, 203, 60, 135, 212, 178, 190, 151, 182, 11, 190, 62, 70, 60, 190, 50, 172, 252, 186, 16, 152, 44, 62, 180, 182, 19, 62, 103, 19, 48, 62, 104, 183, 5, 62, 157, 89, 20, 190, 95, 82, 209, 62, 178, 181, 66, 190, 49, 252, 120, 190, 84, 187, 31, 190, 63, 231, 13, 61, 44, 81, 16, 187, 8, 65, 96, 189, 179, 41, 56, 62, 199, 243, 196, 61, 202, 248, 164, 189, 3, 125, 171, 190, 77, 62, 96, 189, 94, 90, 51, 62, 156, 31, 94, 189, 219, 2, 245, 61, 242, 204, 58, 61, 202, 8, 180, 61, 94, 26, 200, 61, 16, 135, 122, 61, 171, 42, 170, 60, 75, 47, 84, 62, 144, 52, 198, 190, 55, 126, 235, 190, 237, 18, 194, 61, 23, 203, 49, 61, 64, 34, 132, 62, 230, 59, 98, 190, 160, 93, 211, 190, 221, 89, 61, 190, 91, 180, 136, 61, 225, 246, 0, 190, 117, 38, 141, 189, 175, 168, 175, 61, 151, 42, 36, 62, 32, 145, 248, 61, 90, 158, 101, 62, 243, 217, 186, 189, 91, 119, 238, 61, 17, 71, 140, 62, 237, 166, 148, 61, 224, 81, 7, 190, 118, 31, 190, 59, 229, 190, 252, 189, 73, 255, 124, 189, 46, 159, 156, 61, 75, 235, 58, 62, 113, 187, 87, 61, 236, 221, 1, 190, 19, 80, 100, 190, 87, 67, 172, 59, 174, 215, 211, 189, 234, 40, 141, 190, 204, 221, 201, 189, 242, 204, 91, 62, 51, 68, 172, 189, 109, 223, 106, 61, 176, 179, 84, 61, 171, 229, 24, 190, 33, 0, 36, 62, 182, 72, 69, 62, 108, 32, 206, 60, 122, 199, 229, 61, 255, 182, 130, 189, 17, 229, 176, 189, 93, 128, 254, 187, 183, 179, 191, 189, 219, 221, 129, 61, 226, 89, 38, 62, 159, 236, 219, 60, 241, 188, 161, 61, 254, 76, 7, 190, 184, 21, 214, 61, 216, 97, 67, 62, 217, 147, 22, 190, 235, 235, 217, 189, 132, 245, 192, 186, 57, 2, 90, 62, 34, 160, 40, 189, 106, 121, 57, 190, 73, 65, 163, 190, 113, 208, 80, 190, 191, 246, 16, 62, 72, 92, 115, 190, 55, 217, 211, 61, 152, 218, 185, 61, 4, 61, 59, 61, 168, 149, 27, 62, 183, 162, 181, 190, 40, 237, 78, 190, 246, 20, 12, 62, 94, 4, 130, 190, 229, 35, 7, 62, 123, 245, 230, 61, 136, 126, 223, 189, 143, 228, 221, 189, 59, 71, 7, 62, 52, 190, 233, 56, 227, 49, 45, 62, 174, 143, 25, 189, 41, 40, 137, 61, 197, 206, 129, 62, 234, 119, 164, 61, 146, 158, 153, 62, 211, 250, 194, 190, 125, 94, 197, 189, 32, 233, 165, 188, 20, 222, 179, 190, 142, 99, 66, 190, 69, 179, 78, 190, 146, 51, 164, 190, 27, 169, 32, 61, 46, 138, 42, 190, 6, 190, 2, 190, 161, 85, 25, 190, 97, 22, 63, 62, 104, 58, 21, 191, 43, 38, 248, 60, 213, 236, 147, 189, 244, 168, 153, 61, 102, 180, 20, 62, 245, 201, 229, 188, 116, 119, 206, 190, 232, 177, 154, 189, 36, 91, 131, 62, 198, 110, 86, 62, 163, 171, 118, 62, 61, 219, 11, 188, 140, 248, 237, 190, 244, 138, 243, 61, 247, 54, 84, 62, 232, 166, 154, 61, 127, 15, 147, 62, 213, 14, 208, 60, 229, 42, 42, 190, 245, 244, 82, 62, 168, 132, 67, 190, 48, 27, 134, 190, 211, 14, 182, 62, 70, 143, 115, 190, 238, 168, 248, 61, 248, 107, 106, 60, 0, 42, 221, 62, 153, 5, 161, 61, 173, 212, 156, 61, 143, 59, 105, 190, 233, 80, 40, 62, 151, 89, 11, 62, 226, 165, 157, 61, 103, 83, 195, 190, 209, 219, 104, 61, 197, 99, 1, 190, 89, 178, 60, 190, 202, 228, 185, 189, 198, 136, 1, 191, 73, 134, 221, 189, 132, 28, 215, 188, 187, 164, 227, 61, 170, 230, 166, 62, 111, 116, 174, 61, 117, 148, 115, 190, 227, 244, 65, 62, 159, 225, 135, 187, 111, 16, 148, 190, 237, 114, 73, 190, 3, 27, 247, 188, 12, 189, 173, 190, 146, 130, 85, 190, 168, 128, 218, 61, 147, 22, 226, 189, 113, 243, 74, 61, 76, 105, 130, 62, 210, 79, 9, 189, 13, 3, 10, 62, 88, 34, 101, 62, 237, 159, 47, 189, 1, 20, 149, 61, 76, 164, 0, 191, 130, 119, 121, 189, 103, 255, 31, 191, 174, 89, 136, 61, 203, 167, 244, 188, 95, 162, 19, 190, 251, 255, 146, 62, 196, 34, 96, 189, 219, 218, 28, 191, 22, 70, 203, 190, 169, 124, 145, 190, 92, 51, 197, 61, 105, 122, 247, 190, 174, 139, 79, 190, 229, 188, 4, 190, 44, 196, 123, 61, 100, 51, 79, 190, 165, 75, 68, 62, 66, 188, 175, 187, 45, 15, 160, 62, 195, 0, 125, 189, 45, 137, 130, 62, 43, 6, 1, 63, 26, 175, 225, 61, 153, 150, 68, 190, 174, 237, 17, 190, 79, 183, 180, 190, 158, 68, 238, 59, 150, 20, 180, 189, 211, 127, 120, 189, 5, 148, 249, 61, 50, 41, 247, 189, 6, 168, 30, 190, 12, 63, 25, 188, 188, 1, 2, 62, 114, 82, 7, 191, 133, 178, 39, 190, 77, 59, 72, 62, 113, 23, 204, 189, 25, 98, 139, 188, 151, 108, 7, 61, 189, 37, 107, 190, 171, 236, 136, 189, 130, 237, 157, 62, 115, 173, 60, 189, 123, 172, 238, 61, 114, 250, 103, 189, 61, 173, 193, 189, 211, 7, 50, 62, 149, 91, 116, 62, 107, 93, 167, 59, 223, 36, 166, 62, 90, 167, 61, 62, 126, 60, 28, 62, 197, 4, 140, 62, 59, 34, 240, 189, 104, 115, 6, 190, 111, 143, 212, 189, 107, 187, 13, 191, 190, 247, 241, 189, 129, 243, 149, 190, 105, 84, 5, 190, 17, 19, 63, 190, 84, 89, 9, 190, 135, 191, 187, 189, 23, 201, 219, 189, 66, 3, 4, 62, 225, 143, 110, 191, 151, 7, 4, 190, 153, 19, 133, 62, 117, 101, 4, 60, 161, 129, 97, 60, 91, 38, 0, 61, 131, 54, 225, 190, 178, 62, 44, 62, 14, 63, 11, 62, 80, 65, 143, 62, 226, 28, 69, 60, 84, 238, 249, 187, 110, 6, 239, 190, 240, 235, 168, 61, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 107, 158, 85, 62, 115, 29, 142, 61, 211, 68, 97, 62, 123, 12, 131, 190, 122, 116, 238, 61, 7, 244, 239, 61, 32, 177, 95, 62, 243, 154, 41, 190, 197, 231, 18, 60, 121, 24, 159, 190, 146, 106, 232, 189, 39, 38, 0, 62, 176, 161, 243, 61, 100, 80, 199, 61, 113, 221, 197, 189, 73, 71, 183, 61, 200, 140, 46, 61, 92, 97, 129, 188, 88, 248, 9, 190, 219, 250, 213, 188, 10, 238, 24, 62, 107, 166, 18, 190, 219, 44, 75, 190, 207, 163, 4, 62, 143, 22, 168, 62, 194, 169, 16, 62, 83, 199, 27, 62, 252, 147, 98, 189, 245, 111, 2, 62, 123, 36, 109, 189, 189, 114, 63, 62, 173, 6, 67, 62, 226, 24, 83, 188, 158, 206, 127, 190, 18, 165, 98, 62, 239, 9, 232, 59, 152, 76, 63, 190, 56, 238, 238, 61, 184, 247, 24, 190, 248, 90, 12, 189, 203, 203, 68, 61, 210, 214, 90, 61, 184, 72, 215, 188, 30, 173, 194, 61, 5, 223, 148, 188, 95, 64, 41, 62, 168, 119, 49, 189, 117, 122, 96, 190, 234, 239, 102, 62, 140, 37, 132, 61, 137, 74, 252, 188, 82, 26, 125, 190, 26, 211, 138, 188, 113, 238, 66, 188, 34, 80, 29, 188, 158, 52, 18, 188, 213, 248, 11, 191, 73, 160, 78, 188, 46, 179, 200, 60, 56, 224, 5, 62, 122, 190, 3, 190, 134, 148, 150, 60, 169, 64, 133, 190, 16, 134, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 209, 40, 190, 176, 66, 59, 190, 87, 2, 86, 62, 141, 190, 5, 190, 178, 33, 102, 60, 223, 18, 67, 190, 58, 195, 54, 190, 163, 228, 145, 62, 51, 26, 38, 190, 217, 55, 159, 62, 71, 141, 133, 62, 15, 175, 37, 188, 159, 17, 34, 187, 113, 203, 39, 62, 60, 232, 40, 62, 26, 16, 39, 61, 114, 18, 138, 61, 30, 153, 255, 61, 206, 94, 119, 189, 185, 164, 184, 58, 83, 250, 7, 190, 176, 123, 72, 189, 145, 100, 73, 60, 139, 72, 249, 60, 251, 146, 241, 61, 252, 19, 178, 61, 22, 105, 236, 61, 111, 165, 20, 190, 125, 43, 66, 62, 248, 59, 28, 190, 157, 72, 132, 190, 149, 96, 24, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 206, 86, 60, 3, 105, 83, 189, 181, 38, 112, 62, 39, 194, 221, 189, 50, 95, 137, 190, 102, 112, 202, 190, 141, 205, 4, 190, 9, 62, 128, 191, 206, 231, 60, 61, 29, 121, 101, 62, 182, 55, 9, 63, 169, 1, 161, 190, 190, 58, 99, 61, 56, 101, 145, 62, 184, 190, 130, 62, 149, 127, 105, 62, 8, 109, 185, 190, 250, 167, 250, 190, 78, 222, 127, 62, 67, 219, 58, 188, 73, 34, 29, 63, 174, 254, 154, 190, 174, 114, 85, 190, 30, 8, 121, 62, 184, 34, 93, 190, 219, 109, 161, 190, 17, 250, 235, 190, 1, 243, 21, 190, 96, 221, 37, 191, 44, 61, 27, 61, 136, 240, 212, 189, 117, 172, 55, 190, 221, 80, 6, 62, 25, 143, 43, 62, 198, 255, 46, 190, 179, 246, 176, 61, 130, 78, 34, 190, 213, 161, 190, 62, 102, 138, 75, 62, 215, 142, 13, 62, 195, 121, 182, 61, 228, 57, 129, 190, 172, 170, 205, 60, 159, 147, 164, 190, 103, 13, 5, 62, 163, 189, 246, 59, 186, 185, 224, 61, 174, 96, 74, 189, 180, 178, 228, 189, 231, 250, 28, 188, 208, 153, 86, 190, 74, 98, 76, 190, 190, 34, 51, 62, 91, 199, 17, 189, 14, 109, 221, 189, 42, 80, 9, 61, 30, 63, 148, 189, 26, 222, 25, 61, 238, 203, 78, 190, 16, 4, 69, 62, 122, 198, 194, 60, 251, 241, 131, 189, 91, 154, 29, 62, 10, 63, 123, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 50, 131, 62, 106, 104, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 77, 247, 190, 28, 237, 120, 190, 192, 59, 208, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 208, 230, 63, 71, 213, 6, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}