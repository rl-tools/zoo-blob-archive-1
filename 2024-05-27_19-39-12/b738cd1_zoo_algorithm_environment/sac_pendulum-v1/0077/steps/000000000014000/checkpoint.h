// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 69, 253, 62, 187, 159, 130, 63, 193, 16, 214, 62, 221, 17, 67, 190, 162, 161, 253, 63, 16, 85, 17, 63, 2, 178, 3, 63, 212, 121, 139, 63, 134, 110, 243, 61, 177, 80, 62, 63, 173, 230, 243, 190, 79, 64, 10, 190, 110, 153, 244, 190, 189, 166, 103, 63, 229, 173, 97, 190, 199, 131, 82, 62, 232, 242, 103, 63, 86, 232, 36, 190, 53, 49, 56, 63, 168, 147, 118, 191, 114, 70, 200, 190, 36, 200, 186, 62, 68, 254, 111, 191, 207, 153, 26, 189, 131, 87, 188, 187, 250, 154, 131, 189, 24, 243, 147, 62, 7, 87, 177, 191, 40, 12, 210, 190, 120, 158, 12, 59, 130, 59, 109, 189, 215, 48, 196, 187, 234, 245, 219, 62, 125, 28, 190, 62, 148, 118, 149, 191, 135, 53, 183, 190, 76, 215, 19, 191, 237, 71, 11, 189, 173, 199, 251, 190, 78, 55, 124, 62, 1, 49, 187, 190, 164, 230, 197, 62, 100, 223, 134, 191, 178, 90, 217, 62, 228, 248, 95, 62, 231, 108, 184, 61, 134, 155, 144, 188, 249, 236, 58, 63, 137, 94, 154, 61, 61, 118, 48, 190, 160, 69, 16, 191, 69, 66, 146, 62, 186, 105, 164, 62, 83, 250, 39, 63, 55, 30, 22, 191, 186, 28, 131, 191, 73, 160, 62, 190, 117, 26, 25, 63, 38, 10, 82, 191, 36, 217, 2, 191, 79, 116, 50, 63, 176, 108, 132, 190, 78, 251, 11, 62, 183, 110, 119, 191, 247, 19, 244, 189, 48, 48, 130, 61, 156, 48, 135, 190, 203, 153, 134, 190, 32, 22, 13, 63, 22, 105, 17, 191, 211, 146, 34, 63, 10, 240, 54, 63, 232, 206, 242, 62, 2, 161, 143, 191, 95, 126, 156, 190, 33, 98, 204, 59, 8, 151, 224, 63, 188, 125, 20, 63, 92, 253, 42, 62, 150, 42, 93, 63, 185, 61, 243, 61, 91, 240, 158, 62, 11, 188, 145, 62, 250, 78, 181, 189, 125, 7, 245, 62, 162, 206, 144, 63, 129, 207, 113, 62, 72, 145, 40, 61, 224, 77, 93, 190, 173, 228, 8, 191, 88, 190, 179, 62, 132, 141, 141, 191, 101, 129, 138, 190, 129, 221, 224, 62, 32, 233, 43, 190, 131, 177, 148, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 212, 181, 190, 19, 74, 217, 62, 73, 111, 216, 62, 119, 232, 144, 188, 219, 173, 181, 61, 169, 171, 81, 61, 69, 104, 101, 191, 202, 248, 90, 62, 245, 242, 54, 189, 244, 206, 70, 62, 162, 163, 80, 190, 248, 33, 193, 61, 103, 118, 249, 190, 209, 186, 244, 61, 11, 215, 86, 63, 17, 80, 49, 190, 155, 161, 141, 62, 240, 116, 57, 63, 29, 188, 11, 63, 178, 21, 139, 190, 247, 244, 136, 62, 197, 23, 196, 62, 64, 249, 54, 63, 132, 54, 34, 190, 102, 57, 183, 190, 6, 71, 12, 63, 86, 208, 156, 62, 69, 93, 11, 63, 125, 98, 202, 189, 201, 57, 143, 189, 76, 134, 73, 190, 81, 227, 12, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 40, 131, 61, 77, 236, 21, 190, 71, 171, 238, 61, 182, 0, 143, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 209, 149, 0, 62, 185, 122, 207, 188, 51, 1, 157, 61, 197, 30, 4, 62, 80, 10, 55, 190, 22, 232, 254, 59, 220, 129, 155, 189, 252, 53, 27, 188, 218, 134, 0, 61, 215, 239, 1, 62, 218, 129, 70, 190, 76, 64, 44, 190, 219, 89, 68, 61, 166, 102, 44, 190, 51, 51, 16, 190, 10, 180, 0, 62, 26, 180, 155, 61, 246, 149, 227, 59, 240, 37, 221, 61, 76, 99, 43, 190, 187, 53, 3, 62, 152, 57, 157, 61, 140, 102, 46, 188, 163, 179, 62, 61, 216, 14, 193, 189, 218, 152, 55, 61, 22, 225, 57, 62, 131, 56, 38, 62, 54, 53, 143, 189, 252, 149, 106, 189, 3, 67, 209, 60, 183, 4, 183, 62, 170, 241, 244, 190, 98, 80, 153, 186, 204, 233, 204, 190, 199, 143, 166, 188, 163, 207, 141, 188, 88, 75, 60, 62, 228, 73, 24, 190, 112, 79, 119, 189, 130, 54, 194, 59, 93, 71, 16, 188, 125, 245, 116, 59, 219, 67, 139, 190, 239, 149, 95, 189, 106, 148, 249, 188, 13, 55, 132, 190, 118, 192, 6, 61, 229, 175, 198, 61, 97, 214, 131, 189, 206, 39, 136, 62, 222, 92, 35, 62, 24, 92, 36, 62, 245, 233, 191, 62, 111, 166, 184, 61, 172, 56, 199, 60, 179, 192, 225, 61, 213, 136, 35, 191, 8, 96, 209, 190, 157, 230, 78, 189, 39, 225, 18, 62, 77, 251, 59, 189, 16, 59, 169, 61, 77, 173, 137, 62, 145, 166, 228, 62, 141, 118, 52, 62, 19, 53, 37, 191, 36, 203, 79, 62, 88, 74, 139, 62, 116, 196, 239, 189, 222, 222, 185, 59, 68, 174, 10, 191, 252, 119, 136, 62, 253, 7, 11, 61, 226, 183, 217, 60, 50, 39, 6, 62, 212, 162, 151, 62, 63, 141, 176, 62, 55, 247, 233, 190, 141, 112, 230, 189, 224, 183, 122, 62, 147, 204, 112, 188, 204, 221, 95, 190, 16, 26, 199, 61, 174, 39, 169, 60, 234, 179, 94, 191, 39, 147, 18, 62, 191, 133, 70, 189, 60, 104, 73, 189, 75, 134, 22, 61, 162, 197, 249, 187, 18, 65, 190, 188, 224, 69, 62, 189, 44, 68, 97, 189, 15, 165, 212, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 60, 47, 208, 188, 0, 117, 30, 62, 60, 193, 54, 189, 254, 26, 58, 188, 19, 19, 28, 62, 17, 51, 39, 62, 43, 246, 242, 189, 171, 109, 13, 190, 21, 61, 36, 190, 4, 148, 14, 190, 92, 71, 129, 189, 172, 162, 127, 61, 112, 124, 229, 61, 98, 218, 84, 188, 202, 217, 183, 189, 188, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 192, 238, 183, 186, 233, 80, 173, 188, 202, 202, 121, 62, 131, 75, 135, 62, 229, 112, 109, 188, 236, 10, 152, 62, 105, 117, 21, 191, 40, 69, 91, 189, 13, 202, 12, 190, 254, 83, 145, 191, 5, 81, 69, 61, 11, 183, 48, 189, 244, 225, 69, 189, 95, 105, 85, 62, 177, 199, 190, 189, 105, 202, 188, 189, 176, 149, 78, 187, 116, 103, 95, 62, 206, 92, 174, 191, 192, 69, 179, 189, 161, 44, 56, 62, 250, 38, 66, 62, 232, 99, 198, 61, 158, 237, 115, 190, 97, 111, 58, 191, 8, 47, 14, 62, 133, 63, 1, 61, 74, 241, 202, 62, 16, 134, 31, 62, 201, 30, 67, 189, 219, 35, 22, 191, 131, 232, 8, 190, 134, 167, 60, 190, 6, 209, 50, 61, 149, 157, 16, 191, 41, 171, 121, 62, 107, 165, 9, 189, 134, 169, 63, 190, 140, 33, 28, 61, 237, 108, 176, 62, 204, 110, 121, 190, 95, 45, 139, 60, 189, 71, 217, 188, 217, 181, 103, 62, 249, 39, 168, 60, 169, 105, 130, 61, 190, 175, 57, 189, 107, 47, 57, 62, 27, 194, 148, 61, 131, 127, 59, 190, 195, 203, 154, 61, 129, 222, 152, 62, 39, 234, 133, 189, 122, 224, 53, 58, 140, 87, 230, 189, 179, 113, 196, 61, 114, 33, 17, 63, 103, 14, 5, 191, 156, 205, 22, 191, 101, 42, 123, 61, 12, 99, 61, 191, 157, 120, 131, 61, 125, 37, 158, 62, 195, 64, 93, 62, 166, 154, 200, 61, 213, 196, 121, 189, 122, 55, 174, 190, 174, 44, 165, 189, 80, 72, 185, 60, 182, 30, 72, 190, 95, 85, 170, 61, 102, 2, 153, 189, 39, 219, 111, 190, 110, 100, 50, 62, 247, 121, 90, 190, 41, 43, 183, 61, 242, 223, 168, 188, 130, 125, 150, 189, 253, 163, 164, 189, 87, 46, 38, 62, 15, 9, 20, 61, 190, 155, 184, 59, 176, 160, 21, 62, 30, 56, 36, 62, 196, 12, 188, 190, 10, 67, 124, 190, 159, 212, 190, 62, 193, 93, 136, 61, 242, 193, 125, 62, 197, 165, 120, 189, 125, 173, 234, 190, 223, 35, 89, 188, 86, 5, 3, 61, 13, 248, 91, 190, 227, 247, 73, 62, 231, 62, 91, 190, 59, 246, 109, 61, 134, 40, 191, 191, 9, 29, 135, 61, 52, 197, 8, 191, 115, 169, 191, 190, 2, 175, 77, 62, 251, 207, 113, 190, 148, 197, 45, 60, 34, 171, 26, 63, 47, 176, 190, 62, 242, 87, 43, 63, 30, 218, 134, 61, 202, 147, 209, 62, 68, 189, 221, 62, 49, 28, 15, 62, 62, 27, 249, 190, 159, 23, 197, 61, 36, 51, 82, 191, 197, 215, 109, 62, 21, 45, 69, 190, 21, 250, 3, 191, 225, 114, 164, 61, 89, 115, 224, 58, 45, 169, 23, 191, 123, 185, 66, 191, 59, 211, 231, 191, 196, 18, 1, 189, 218, 252, 14, 191, 111, 78, 167, 189, 231, 193, 234, 61, 125, 163, 2, 191, 199, 163, 131, 190, 28, 84, 210, 188, 164, 122, 187, 60, 45, 31, 77, 189, 145, 196, 228, 189, 104, 209, 191, 188, 103, 46, 47, 189, 74, 37, 242, 61, 157, 79, 26, 190, 106, 236, 236, 61, 63, 11, 30, 189, 71, 30, 173, 189, 26, 143, 52, 190, 135, 64, 3, 62, 15, 180, 244, 60, 220, 170, 80, 190, 74, 87, 50, 188, 215, 41, 222, 189, 250, 65, 151, 61, 33, 224, 22, 190, 187, 85, 67, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 203, 41, 57, 58, 160, 155, 245, 188, 13, 24, 21, 190, 198, 183, 15, 62, 25, 50, 218, 189, 192, 183, 101, 61, 112, 45, 171, 60, 212, 170, 205, 61, 237, 123, 143, 190, 130, 71, 196, 189, 49, 182, 225, 59, 159, 233, 101, 61, 14, 113, 111, 189, 234, 226, 67, 61, 192, 166, 204, 61, 97, 134, 148, 62, 184, 68, 51, 190, 166, 233, 187, 61, 123, 91, 90, 189, 18, 36, 186, 61, 30, 8, 251, 60, 60, 220, 236, 189, 75, 183, 163, 62, 147, 191, 128, 61, 109, 159, 143, 62, 93, 190, 41, 62, 155, 107, 141, 62, 159, 226, 63, 62, 106, 220, 57, 62, 141, 211, 144, 62, 148, 35, 133, 60, 124, 142, 43, 62, 181, 253, 128, 189, 255, 171, 56, 62, 33, 145, 181, 61, 169, 194, 38, 62, 66, 129, 26, 190, 178, 245, 4, 61, 46, 145, 144, 62, 78, 26, 37, 190, 85, 65, 39, 191, 232, 13, 3, 62, 96, 53, 204, 190, 161, 78, 94, 62, 133, 13, 146, 62, 32, 33, 9, 191, 109, 39, 129, 61, 163, 118, 113, 62, 151, 4, 59, 190, 63, 193, 32, 62, 76, 170, 184, 190, 80, 38, 27, 62, 184, 184, 231, 190, 241, 93, 188, 189, 69, 45, 193, 62, 87, 187, 58, 62, 51, 123, 59, 190, 135, 34, 203, 188, 31, 196, 47, 62, 246, 45, 185, 61, 115, 142, 139, 190, 151, 3, 224, 62, 112, 183, 167, 62, 66, 239, 155, 188, 233, 191, 48, 61, 132, 134, 134, 61, 84, 192, 115, 189, 147, 56, 156, 62, 185, 124, 34, 191, 218, 145, 2, 191, 73, 172, 181, 62, 14, 218, 70, 190, 239, 253, 33, 62, 117, 228, 7, 191, 179, 225, 150, 61, 253, 30, 136, 62, 136, 120, 42, 62, 145, 204, 50, 190, 142, 29, 193, 190, 161, 250, 74, 62, 115, 40, 237, 189, 199, 171, 38, 189, 91, 60, 15, 190, 122, 64, 197, 189, 226, 208, 8, 62, 171, 166, 113, 62, 116, 55, 195, 190, 33, 244, 132, 190, 47, 253, 46, 62, 186, 25, 63, 62, 28, 44, 6, 191, 64, 143, 4, 190, 248, 159, 165, 62, 40, 14, 3, 190, 226, 96, 247, 188, 10, 138, 199, 189, 19, 242, 118, 191, 199, 13, 71, 59, 119, 254, 149, 62, 188, 167, 225, 61, 245, 108, 209, 189, 18, 48, 73, 189, 179, 48, 7, 191, 167, 60, 153, 190, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 212, 214, 24, 191, 254, 86, 67, 62, 22, 208, 233, 189, 167, 168, 241, 62, 71, 246, 167, 62, 22, 43, 50, 190, 145, 35, 136, 61, 72, 245, 185, 62, 206, 253, 120, 190, 126, 75, 122, 190, 4, 107, 188, 190, 107, 27, 222, 61, 246, 94, 72, 191, 109, 244, 14, 190, 26, 67, 70, 62, 238, 162, 108, 62, 173, 64, 92, 189, 68, 181, 112, 61, 66, 165, 53, 190, 134, 146, 36, 62, 190, 206, 89, 190, 136, 124, 210, 60, 60, 188, 67, 62, 89, 186, 54, 62, 60, 7, 253, 188, 58, 165, 202, 187, 107, 124, 144, 189, 224, 101, 34, 62, 75, 203, 71, 191, 46, 61, 76, 188, 29, 207, 8, 62, 46, 253, 202, 190, 101, 200, 35, 191, 252, 53, 22, 189, 204, 69, 98, 190, 42, 31, 203, 61, 93, 188, 150, 62, 62, 233, 164, 188, 31, 227, 33, 190, 92, 55, 105, 62, 158, 175, 170, 189, 164, 63, 54, 189, 194, 232, 47, 190, 77, 95, 9, 62, 166, 239, 178, 190, 170, 196, 75, 62, 49, 201, 156, 188, 189, 182, 32, 61, 121, 65, 15, 191, 26, 31, 49, 62, 73, 37, 57, 62, 191, 57, 93, 189, 102, 73, 167, 189, 135, 162, 90, 60, 192, 13, 207, 61, 228, 254, 177, 189, 33, 6, 117, 62, 209, 161, 166, 189, 166, 62, 113, 190, 93, 203, 171, 189, 183, 217, 106, 191, 231, 62, 72, 191, 123, 102, 132, 62, 140, 157, 199, 61, 227, 8, 36, 191, 177, 58, 21, 191, 93, 253, 128, 61, 121, 29, 0, 62, 152, 73, 150, 190, 251, 99, 61, 60, 244, 34, 19, 190, 71, 91, 248, 62, 237, 161, 4, 62, 124, 221, 56, 191, 160, 64, 168, 189, 38, 237, 155, 61, 101, 70, 228, 190, 74, 240, 170, 61, 232, 20, 250, 190, 131, 123, 195, 61, 30, 45, 18, 62, 147, 243, 128, 61, 7, 254, 196, 59, 185, 197, 75, 62, 249, 204, 89, 62, 37, 154, 58, 191, 205, 164, 54, 190, 185, 211, 176, 60, 30, 253, 137, 61, 88, 94, 202, 189, 164, 214, 85, 190, 168, 151, 55, 188, 104, 32, 6, 191, 243, 92, 218, 61, 104, 18, 183, 61, 174, 211, 27, 62, 100, 109, 145, 61, 35, 146, 135, 190, 72, 217, 106, 62, 205, 174, 194, 190, 109, 242, 44, 61, 193, 138, 123, 62, 11, 138, 7, 190, 139, 129, 135, 189, 45, 155, 4, 62, 153, 120, 3, 62, 126, 239, 215, 61, 147, 61, 189, 189, 242, 160, 168, 62, 112, 150, 219, 61, 7, 194, 47, 61, 30, 220, 246, 189, 143, 7, 58, 62, 229, 198, 88, 191, 153, 81, 110, 189, 160, 121, 203, 61, 153, 201, 79, 191, 180, 168, 126, 62, 172, 195, 160, 190, 225, 10, 30, 191, 31, 1, 210, 189, 111, 26, 189, 190, 202, 56, 164, 61, 228, 248, 187, 189, 133, 197, 6, 63, 213, 233, 79, 62, 50, 223, 192, 61, 88, 255, 9, 190, 56, 164, 160, 61, 22, 23, 230, 190, 122, 225, 142, 62, 21, 170, 3, 190, 219, 49, 88, 190, 189, 95, 210, 62, 187, 223, 6, 191, 110, 64, 180, 191, 143, 214, 69, 62, 83, 27, 219, 61, 254, 31, 52, 61, 135, 18, 114, 190, 209, 197, 26, 62, 233, 142, 186, 60, 201, 1, 52, 62, 213, 254, 0, 191, 51, 216, 100, 62, 124, 10, 62, 191, 246, 247, 179, 190, 7, 198, 144, 190, 224, 37, 94, 190, 20, 231, 25, 62, 186, 28, 233, 190, 44, 241, 199, 190, 126, 212, 144, 191, 16, 59, 216, 190, 53, 89, 184, 62, 146, 232, 81, 189, 229, 131, 48, 63, 185, 118, 54, 62, 24, 177, 11, 191, 202, 78, 144, 190, 102, 97, 74, 191, 83, 54, 83, 191, 239, 219, 139, 59, 32, 188, 196, 62, 225, 244, 134, 59, 55, 7, 16, 190, 211, 29, 127, 189, 228, 161, 206, 62, 138, 186, 239, 61, 73, 119, 215, 190, 152, 247, 213, 61, 134, 243, 103, 62, 134, 13, 210, 190, 176, 230, 170, 61, 150, 81, 167, 190, 67, 75, 150, 189, 219, 249, 111, 61, 14, 184, 38, 188, 12, 128, 12, 62, 164, 68, 35, 189, 115, 190, 108, 62, 160, 34, 173, 190, 222, 79, 65, 62, 212, 104, 127, 190, 194, 226, 43, 190, 241, 15, 126, 189, 228, 207, 79, 62, 1, 117, 23, 62, 138, 182, 103, 191, 166, 160, 204, 189, 236, 79, 79, 62, 27, 4, 5, 60, 158, 74, 101, 189, 236, 220, 55, 190, 251, 224, 202, 189, 166, 201, 72, 188, 5, 213, 39, 190, 136, 134, 20, 61, 97, 60, 128, 61, 36, 140, 149, 189, 177, 137, 78, 189, 107, 177, 80, 190, 22, 20, 77, 190, 187, 200, 28, 190, 0, 91, 6, 62, 33, 115, 195, 61, 220, 103, 49, 190, 151, 136, 170, 188, 83, 139, 35, 62, 169, 244, 197, 61, 34, 103, 142, 189, 242, 255, 41, 62, 243, 58, 217, 189, 178, 0, 74, 190, 157, 78, 175, 188, 48, 49, 84, 61, 24, 3, 131, 190, 97, 145, 228, 189, 27, 70, 233, 189, 68, 178, 75, 188, 195, 179, 155, 190, 225, 107, 12, 62, 70, 187, 58, 189, 214, 236, 75, 190, 46, 146, 206, 62, 206, 124, 8, 190, 22, 56, 82, 62, 0, 106, 130, 190, 71, 236, 93, 190, 164, 158, 99, 62, 9, 196, 1, 61, 230, 204, 255, 190, 60, 168, 138, 62, 66, 246, 163, 61, 2, 74, 147, 62, 242, 228, 136, 61, 204, 59, 152, 62, 7, 147, 39, 62, 184, 129, 10, 190, 245, 129, 107, 188, 19, 236, 61, 62, 35, 180, 33, 189, 141, 246, 135, 60, 174, 189, 145, 190, 7, 53, 35, 62, 96, 114, 3, 190, 87, 158, 238, 190, 232, 92, 38, 190, 18, 146, 25, 190, 171, 50, 40, 61, 136, 55, 76, 62, 228, 83, 52, 62, 219, 38, 163, 62, 47, 175, 71, 62, 152, 96, 224, 188, 0, 163, 233, 62, 52, 126, 160, 190, 81, 30, 58, 191, 182, 75, 178, 190, 99, 31, 249, 61, 200, 250, 129, 60, 252, 249, 7, 190, 29, 76, 134, 62, 98, 190, 51, 62, 189, 47, 33, 190, 96, 154, 25, 190, 247, 250, 213, 189, 227, 97, 98, 62, 199, 80, 207, 188, 34, 112, 48, 61, 140, 134, 232, 62, 90, 46, 3, 62, 42, 94, 19, 62, 69, 201, 226, 188, 175, 69, 62, 62, 178, 79, 164, 62, 194, 243, 49, 191, 33, 40, 101, 190, 203, 195, 57, 62, 156, 104, 165, 61, 83, 254, 235, 62, 57, 2, 10, 191, 222, 166, 57, 191, 86, 156, 7, 190, 33, 85, 222, 60, 108, 190, 209, 189, 215, 63, 84, 61, 44, 124, 27, 62, 17, 209, 192, 189, 226, 237, 57, 189, 229, 121, 104, 62, 12, 108, 134, 189, 226, 214, 3, 62, 168, 48, 87, 62, 232, 198, 221, 190, 196, 225, 218, 60, 31, 62, 227, 189, 240, 50, 173, 190, 66, 184, 152, 190, 249, 131, 91, 61, 168, 252, 120, 61, 115, 174, 211, 61, 81, 249, 29, 190, 194, 156, 2, 191, 112, 99, 135, 189, 246, 160, 186, 189, 173, 73, 192, 190, 219, 106, 59, 190, 82, 206, 131, 62, 164, 2, 24, 189, 99, 7, 78, 61, 79, 96, 84, 190, 246, 140, 187, 190, 39, 188, 237, 61, 204, 157, 70, 62, 96, 253, 51, 61, 60, 205, 60, 61, 147, 86, 96, 190, 238, 105, 125, 190, 234, 239, 40, 190, 198, 86, 151, 189, 139, 52, 118, 63, 105, 214, 36, 62, 48, 206, 248, 61, 113, 186, 6, 62, 9, 46, 179, 60, 255, 20, 186, 62, 54, 41, 17, 62, 107, 199, 133, 190, 77, 128, 62, 191, 50, 85, 214, 58, 44, 109, 105, 62, 137, 76, 218, 187, 87, 21, 6, 191, 158, 217, 137, 191, 189, 119, 85, 190, 120, 40, 68, 62, 64, 125, 174, 190, 90, 197, 63, 190, 253, 129, 100, 62, 165, 183, 246, 61, 134, 184, 242, 190, 149, 211, 79, 191, 54, 22, 78, 190, 255, 102, 64, 62, 164, 211, 167, 190, 132, 138, 216, 61, 22, 161, 30, 62, 253, 141, 25, 191, 20, 158, 6, 189, 158, 92, 53, 62, 248, 219, 163, 62, 241, 169, 61, 61, 239, 221, 139, 189, 222, 197, 229, 61, 158, 119, 145, 62, 43, 220, 150, 62, 173, 102, 202, 62, 6, 230, 74, 191, 69, 29, 36, 188, 155, 38, 66, 189, 206, 242, 147, 191, 173, 71, 116, 190, 57, 126, 75, 190, 214, 40, 171, 190, 139, 229, 208, 61, 152, 229, 76, 190, 36, 193, 77, 190, 172, 89, 237, 189, 177, 104, 83, 62, 64, 69, 125, 191, 98, 116, 137, 61, 115, 36, 136, 189, 61, 78, 163, 61, 163, 108, 48, 62, 25, 158, 181, 189, 204, 56, 45, 191, 90, 231, 136, 189, 206, 68, 147, 62, 220, 122, 131, 62, 122, 227, 121, 62, 168, 205, 160, 188, 183, 186, 40, 191, 19, 103, 96, 62, 236, 248, 70, 61, 9, 103, 43, 189, 117, 120, 154, 62, 111, 73, 199, 60, 129, 200, 11, 190, 178, 151, 79, 62, 114, 192, 49, 191, 189, 97, 49, 190, 60, 21, 150, 62, 44, 244, 235, 190, 81, 221, 193, 60, 64, 114, 159, 189, 194, 184, 140, 62, 181, 198, 209, 61, 10, 13, 119, 188, 49, 15, 172, 190, 221, 53, 193, 61, 236, 61, 9, 62, 71, 48, 153, 190, 205, 252, 243, 190, 9, 160, 190, 61, 252, 117, 28, 190, 228, 219, 87, 190, 205, 117, 108, 190, 131, 120, 72, 191, 190, 173, 17, 190, 139, 0, 96, 188, 213, 13, 1, 62, 210, 15, 165, 62, 170, 20, 125, 189, 173, 207, 255, 190, 154, 247, 131, 62, 38, 248, 138, 188, 45, 28, 141, 191, 124, 248, 121, 190, 70, 56, 233, 188, 163, 65, 10, 191, 11, 97, 170, 190, 239, 24, 177, 62, 187, 23, 5, 62, 108, 78, 14, 63, 237, 184, 119, 62, 133, 174, 18, 63, 67, 71, 187, 60, 205, 20, 78, 62, 130, 150, 195, 62, 106, 63, 57, 189, 145, 38, 118, 189, 24, 35, 240, 189, 200, 124, 220, 190, 238, 246, 160, 61, 22, 209, 123, 61, 163, 155, 54, 191, 97, 20, 78, 62, 162, 152, 32, 62, 102, 28, 225, 190, 225, 180, 42, 190, 79, 114, 140, 191, 72, 254, 155, 189, 235, 252, 52, 191, 174, 139, 79, 190, 131, 107, 48, 190, 26, 125, 19, 62, 209, 42, 0, 63, 71, 206, 242, 61, 129, 3, 29, 190, 119, 27, 137, 62, 144, 27, 190, 189, 115, 185, 178, 62, 133, 204, 9, 63, 42, 110, 200, 190, 130, 225, 88, 190, 67, 129, 53, 190, 27, 127, 13, 191, 205, 67, 39, 188, 172, 29, 112, 190, 115, 244, 234, 189, 101, 62, 202, 61, 66, 43, 132, 190, 213, 75, 48, 190, 51, 170, 59, 189, 127, 3, 105, 61, 121, 145, 70, 191, 238, 11, 151, 190, 125, 50, 21, 62, 126, 20, 38, 190, 42, 117, 156, 189, 201, 85, 222, 188, 208, 158, 250, 190, 113, 243, 50, 190, 237, 233, 136, 62, 252, 123, 146, 189, 64, 101, 114, 61, 249, 148, 171, 189, 120, 133, 225, 190, 159, 198, 138, 62, 4, 237, 7, 62, 71, 34, 24, 189, 197, 246, 170, 62, 40, 194, 84, 62, 227, 8, 156, 62, 40, 79, 167, 62, 179, 44, 11, 191, 6, 195, 49, 189, 161, 221, 134, 189, 25, 25, 163, 191, 63, 116, 186, 189, 109, 179, 168, 190, 238, 159, 96, 190, 221, 7, 175, 189, 117, 71, 120, 190, 48, 67, 177, 189, 25, 255, 241, 189, 251, 200, 40, 62, 59, 53, 172, 191, 202, 99, 9, 190, 132, 34, 141, 62, 240, 63, 166, 189, 199, 1, 167, 61, 209, 112, 126, 60, 88, 127, 41, 191, 171, 253, 47, 62, 218, 9, 12, 62, 156, 171, 152, 62, 23, 178, 58, 60, 153, 226, 86, 189, 236, 80, 46, 191, 91, 220, 135, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 158, 85, 149, 62, 98, 4, 139, 61, 59, 230, 94, 62, 135, 81, 116, 190, 208, 56, 239, 61, 39, 76, 96, 62, 72, 186, 183, 62, 37, 173, 77, 190, 223, 138, 11, 61, 5, 255, 99, 191, 182, 60, 51, 61, 224, 237, 216, 61, 207, 18, 19, 62, 187, 117, 217, 188, 235, 237, 224, 190, 66, 185, 150, 62, 213, 232, 204, 61, 28, 113, 30, 190, 26, 75, 132, 190, 121, 60, 129, 60, 99, 20, 135, 62, 230, 254, 49, 191, 184, 72, 206, 190, 189, 162, 36, 62, 29, 106, 232, 62, 102, 64, 19, 62, 82, 30, 24, 62, 184, 101, 209, 188, 104, 61, 45, 62, 53, 113, 214, 187, 133, 135, 86, 62, 93, 128, 47, 63, 47, 224, 173, 190, 168, 38, 124, 191, 103, 30, 128, 62, 73, 103, 192, 60, 246, 186, 30, 190, 199, 101, 207, 61, 164, 197, 202, 190, 222, 41, 110, 61, 222, 187, 140, 188, 149, 92, 12, 189, 255, 30, 144, 190, 115, 123, 140, 61, 163, 208, 85, 189, 154, 62, 110, 62, 165, 241, 153, 189, 185, 161, 3, 191, 93, 54, 101, 62, 29, 239, 153, 61, 1, 72, 4, 190, 18, 175, 63, 190, 253, 170, 159, 188, 166, 37, 2, 189, 248, 99, 27, 62, 27, 236, 35, 190, 26, 64, 70, 191, 169, 101, 23, 190, 202, 89, 163, 60, 66, 190, 40, 62, 173, 110, 79, 190, 243, 112, 23, 189, 70, 239, 229, 190, 6, 101, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 113, 42, 190, 27, 24, 124, 190, 219, 149, 46, 62, 167, 185, 14, 190, 24, 82, 119, 61, 9, 123, 4, 190, 75, 247, 89, 190, 36, 205, 130, 62, 174, 201, 70, 190, 245, 156, 173, 62, 141, 142, 131, 62, 20, 47, 78, 61, 159, 17, 34, 187, 3, 213, 39, 62, 242, 158, 52, 62, 250, 6, 122, 61, 144, 73, 178, 61, 28, 45, 222, 61, 136, 252, 96, 188, 168, 159, 56, 190, 90, 237, 7, 190, 202, 150, 147, 61, 63, 171, 143, 61, 39, 160, 184, 189, 249, 251, 30, 62, 13, 143, 183, 61, 199, 51, 193, 60, 90, 128, 66, 190, 254, 181, 78, 62, 248, 59, 28, 190, 135, 238, 180, 190, 147, 114, 69, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 155, 36, 60, 239, 217, 106, 62, 207, 52, 160, 62, 123, 136, 220, 189, 200, 158, 169, 190, 119, 15, 9, 191, 172, 49, 136, 189, 176, 239, 153, 191, 237, 2, 149, 60, 142, 164, 95, 62, 76, 191, 3, 63, 211, 112, 160, 190, 190, 58, 99, 61, 121, 142, 140, 62, 186, 81, 34, 63, 215, 125, 142, 62, 212, 143, 233, 190, 57, 93, 100, 191, 82, 22, 169, 62, 216, 90, 211, 60, 2, 243, 19, 63, 34, 155, 236, 190, 214, 235, 14, 190, 91, 7, 45, 63, 241, 2, 174, 190, 102, 132, 130, 190, 172, 192, 86, 191, 204, 16, 89, 190, 15, 68, 65, 191, 44, 61, 27, 61, 156, 25, 15, 63, 214, 145, 5, 190, 104, 56, 6, 62, 207, 101, 16, 62, 255, 141, 130, 190, 185, 108, 177, 61, 250, 134, 137, 190, 108, 244, 185, 62, 245, 104, 103, 61, 237, 95, 66, 62, 108, 189, 136, 61, 197, 9, 141, 190, 190, 228, 9, 61, 87, 222, 22, 191, 103, 13, 5, 62, 177, 64, 146, 188, 176, 191, 142, 62, 102, 102, 45, 190, 197, 45, 30, 190, 34, 89, 230, 61, 0, 252, 160, 190, 198, 129, 83, 190, 72, 27, 16, 62, 167, 61, 251, 189, 170, 168, 41, 190, 47, 178, 93, 62, 244, 21, 12, 190, 237, 161, 91, 62, 67, 217, 251, 188, 198, 171, 172, 62, 163, 15, 6, 189, 251, 241, 131, 189, 1, 86, 33, 188, 50, 239, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 202, 154, 62, 97, 22, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 66, 188, 191, 80, 2, 60, 64, 135, 54, 204, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 150, 178, 190, 201, 10, 80, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}