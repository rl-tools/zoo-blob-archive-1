// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 100, 150, 62, 38, 224, 120, 63, 176, 217, 222, 62, 213, 148, 72, 190, 241, 137, 241, 63, 8, 110, 21, 63, 125, 56, 8, 63, 106, 146, 131, 63, 217, 44, 231, 61, 23, 5, 64, 63, 171, 102, 205, 190, 200, 124, 251, 189, 19, 159, 104, 190, 199, 91, 79, 63, 224, 32, 162, 190, 10, 219, 74, 62, 220, 234, 91, 63, 28, 240, 82, 190, 229, 236, 71, 63, 253, 98, 114, 191, 78, 99, 199, 190, 50, 10, 177, 62, 68, 139, 108, 191, 184, 197, 87, 60, 156, 237, 26, 187, 241, 82, 42, 187, 145, 241, 161, 62, 42, 181, 158, 191, 211, 175, 232, 190, 214, 142, 23, 188, 217, 183, 33, 190, 121, 158, 81, 61, 20, 11, 224, 62, 151, 109, 205, 62, 245, 160, 141, 191, 7, 167, 180, 190, 147, 194, 250, 190, 225, 39, 179, 189, 224, 135, 4, 191, 183, 6, 91, 62, 233, 240, 168, 190, 79, 118, 9, 63, 155, 54, 124, 191, 81, 40, 215, 62, 228, 32, 83, 62, 12, 119, 147, 188, 170, 250, 138, 61, 152, 48, 48, 63, 87, 40, 26, 62, 203, 88, 75, 190, 126, 99, 15, 191, 72, 245, 155, 62, 3, 96, 162, 62, 25, 156, 51, 63, 54, 231, 15, 191, 27, 32, 107, 191, 251, 240, 49, 190, 216, 190, 32, 63, 53, 136, 69, 191, 199, 42, 254, 190, 70, 191, 40, 63, 207, 189, 137, 190, 215, 10, 17, 62, 183, 41, 89, 191, 171, 213, 143, 189, 8, 5, 13, 61, 30, 13, 153, 190, 2, 76, 152, 190, 93, 144, 29, 63, 226, 54, 8, 191, 197, 224, 34, 63, 88, 15, 52, 63, 21, 12, 239, 62, 176, 162, 140, 191, 244, 239, 149, 190, 120, 28, 201, 61, 63, 236, 213, 63, 181, 182, 23, 63, 109, 127, 80, 62, 245, 247, 82, 63, 45, 90, 193, 61, 255, 18, 187, 62, 115, 20, 140, 62, 171, 167, 206, 189, 140, 31, 237, 62, 107, 141, 137, 63, 223, 193, 124, 62, 157, 128, 131, 60, 241, 233, 76, 190, 186, 162, 21, 191, 86, 35, 177, 62, 1, 186, 136, 191, 77, 156, 130, 190, 77, 243, 238, 62, 94, 66, 25, 190, 170, 235, 184, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 57, 210, 190, 115, 209, 172, 62, 199, 143, 220, 62, 165, 194, 191, 61, 98, 245, 238, 61, 2, 63, 103, 61, 87, 251, 85, 191, 130, 34, 84, 62, 213, 61, 52, 61, 248, 9, 60, 62, 49, 177, 109, 189, 102, 218, 5, 62, 87, 74, 237, 190, 72, 193, 208, 61, 156, 11, 88, 63, 152, 128, 116, 190, 107, 229, 166, 62, 183, 34, 57, 63, 195, 22, 18, 63, 22, 229, 118, 190, 41, 49, 146, 62, 60, 122, 221, 62, 142, 8, 20, 63, 5, 6, 21, 190, 13, 11, 188, 190, 48, 240, 16, 63, 164, 59, 181, 62, 110, 34, 15, 63, 80, 200, 239, 189, 153, 100, 51, 190, 222, 253, 87, 190, 125, 120, 249, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 40, 131, 61, 77, 236, 21, 190, 71, 171, 238, 61, 182, 0, 143, 61, 176, 212, 0, 190, 150, 183, 31, 190, 157, 38, 217, 189, 209, 149, 0, 62, 185, 122, 207, 188, 51, 1, 157, 61, 197, 30, 4, 62, 80, 10, 55, 190, 22, 232, 254, 59, 220, 129, 155, 189, 252, 53, 27, 188, 218, 134, 0, 61, 215, 239, 1, 62, 218, 129, 70, 190, 76, 64, 44, 190, 219, 89, 68, 61, 166, 102, 44, 190, 51, 51, 16, 190, 10, 180, 0, 62, 26, 180, 155, 61, 246, 149, 227, 59, 240, 37, 221, 61, 76, 99, 43, 190, 187, 53, 3, 62, 152, 57, 157, 61, 140, 102, 46, 188, 163, 179, 62, 61, 216, 14, 193, 189, 17, 17, 173, 60, 36, 142, 27, 62, 176, 148, 9, 62, 122, 72, 99, 189, 5, 59, 23, 189, 64, 217, 220, 188, 214, 126, 178, 62, 62, 117, 212, 190, 212, 171, 195, 188, 46, 168, 195, 190, 244, 38, 188, 189, 104, 182, 161, 60, 99, 159, 80, 62, 190, 202, 204, 189, 11, 190, 35, 189, 96, 226, 151, 189, 121, 185, 238, 188, 199, 30, 20, 61, 105, 246, 90, 190, 214, 171, 76, 189, 148, 79, 78, 189, 64, 124, 69, 190, 21, 194, 176, 61, 68, 167, 76, 61, 228, 119, 186, 56, 244, 224, 113, 62, 165, 127, 0, 62, 162, 224, 19, 62, 139, 31, 173, 62, 218, 150, 155, 61, 232, 162, 202, 61, 182, 251, 144, 188, 122, 213, 8, 191, 163, 47, 136, 190, 223, 203, 13, 189, 10, 157, 29, 62, 173, 214, 138, 189, 132, 76, 71, 61, 109, 176, 138, 62, 252, 107, 230, 62, 231, 168, 60, 62, 66, 78, 27, 191, 232, 73, 78, 62, 136, 33, 137, 62, 108, 183, 33, 190, 21, 222, 21, 60, 252, 208, 0, 191, 208, 36, 141, 62, 48, 43, 154, 60, 180, 55, 25, 61, 192, 65, 145, 61, 58, 71, 146, 62, 238, 243, 171, 62, 97, 7, 238, 190, 83, 92, 189, 189, 159, 43, 104, 62, 239, 35, 17, 188, 192, 140, 73, 190, 28, 241, 223, 61, 10, 107, 169, 60, 85, 80, 85, 191, 11, 13, 228, 61, 95, 16, 56, 189, 203, 36, 31, 189, 75, 134, 22, 61, 162, 197, 249, 187, 18, 65, 190, 188, 224, 69, 62, 189, 44, 68, 97, 189, 15, 165, 212, 61, 20, 1, 7, 190, 146, 108, 0, 190, 123, 212, 216, 61, 125, 219, 209, 61, 18, 188, 95, 61, 177, 251, 11, 190, 14, 82, 186, 61, 15, 208, 131, 189, 60, 47, 208, 188, 0, 117, 30, 62, 60, 193, 54, 189, 254, 26, 58, 188, 19, 19, 28, 62, 17, 51, 39, 62, 43, 246, 242, 189, 171, 109, 13, 190, 21, 61, 36, 190, 4, 148, 14, 190, 92, 71, 129, 189, 172, 162, 127, 61, 112, 124, 229, 61, 98, 218, 84, 188, 202, 217, 183, 189, 188, 142, 41, 190, 150, 62, 49, 190, 113, 81, 175, 189, 160, 249, 24, 61, 194, 136, 142, 189, 95, 69, 108, 62, 25, 224, 128, 62, 111, 42, 111, 189, 67, 7, 154, 62, 215, 243, 255, 190, 232, 16, 158, 189, 179, 30, 138, 189, 108, 156, 119, 191, 253, 93, 4, 62, 168, 152, 57, 189, 169, 236, 81, 189, 20, 172, 103, 62, 250, 185, 34, 190, 2, 227, 34, 60, 52, 99, 181, 59, 12, 12, 82, 62, 181, 33, 147, 191, 111, 62, 195, 189, 85, 19, 65, 62, 186, 239, 148, 61, 41, 156, 168, 61, 110, 169, 85, 190, 45, 249, 60, 191, 226, 35, 245, 61, 99, 79, 138, 60, 66, 15, 199, 62, 182, 37, 24, 62, 102, 250, 0, 188, 154, 248, 21, 191, 180, 100, 75, 60, 134, 167, 60, 190, 6, 209, 50, 61, 200, 233, 30, 191, 145, 246, 96, 62, 109, 252, 109, 189, 174, 196, 86, 190, 252, 215, 170, 60, 232, 17, 190, 62, 188, 152, 128, 190, 20, 219, 166, 189, 126, 68, 164, 189, 221, 187, 82, 62, 61, 215, 193, 59, 112, 241, 72, 61, 44, 125, 68, 190, 128, 179, 160, 61, 95, 187, 85, 61, 183, 200, 1, 190, 88, 105, 108, 61, 7, 127, 141, 62, 16, 69, 55, 57, 199, 175, 213, 188, 221, 195, 9, 190, 167, 236, 145, 61, 62, 116, 10, 63, 123, 138, 229, 190, 14, 186, 22, 191, 177, 90, 35, 61, 88, 141, 1, 191, 203, 240, 48, 61, 47, 172, 144, 62, 83, 115, 195, 60, 90, 88, 7, 62, 15, 40, 239, 188, 55, 151, 136, 190, 220, 245, 116, 189, 30, 166, 49, 61, 62, 95, 44, 190, 27, 197, 228, 61, 41, 169, 142, 188, 27, 93, 48, 190, 195, 80, 39, 62, 170, 22, 39, 190, 160, 59, 217, 61, 233, 133, 172, 187, 9, 65, 72, 188, 115, 130, 108, 189, 250, 18, 88, 62, 144, 2, 85, 61, 218, 195, 137, 61, 43, 51, 41, 62, 6, 136, 48, 62, 238, 169, 143, 190, 104, 134, 110, 190, 3, 14, 219, 62, 208, 145, 200, 61, 109, 203, 127, 62, 151, 140, 17, 188, 249, 33, 202, 190, 60, 59, 0, 61, 82, 83, 142, 61, 92, 209, 69, 190, 88, 143, 83, 62, 148, 44, 31, 190, 59, 246, 109, 61, 3, 215, 179, 191, 48, 145, 35, 60, 134, 215, 219, 190, 126, 63, 202, 190, 8, 175, 43, 62, 244, 233, 221, 189, 247, 54, 180, 60, 109, 213, 15, 63, 89, 78, 210, 62, 79, 48, 32, 63, 220, 38, 200, 61, 28, 93, 212, 62, 133, 20, 204, 62, 148, 122, 23, 62, 177, 13, 5, 191, 154, 95, 204, 61, 242, 183, 91, 191, 196, 117, 133, 62, 9, 159, 53, 190, 82, 217, 15, 191, 15, 81, 221, 61, 78, 96, 7, 59, 156, 239, 29, 191, 81, 161, 46, 191, 225, 127, 214, 191, 42, 182, 176, 189, 154, 109, 21, 191, 43, 29, 128, 189, 77, 13, 244, 61, 183, 217, 226, 190, 20, 126, 84, 190, 28, 84, 210, 188, 164, 122, 187, 60, 45, 31, 77, 189, 145, 196, 228, 189, 104, 209, 191, 188, 103, 46, 47, 189, 74, 37, 242, 61, 157, 79, 26, 190, 106, 236, 236, 61, 63, 11, 30, 189, 71, 30, 173, 189, 26, 143, 52, 190, 135, 64, 3, 62, 15, 180, 244, 60, 220, 170, 80, 190, 74, 87, 50, 188, 215, 41, 222, 189, 250, 65, 151, 61, 33, 224, 22, 190, 187, 85, 67, 61, 90, 39, 128, 188, 76, 151, 253, 189, 194, 126, 169, 189, 63, 82, 242, 187, 203, 41, 57, 58, 160, 155, 245, 188, 13, 24, 21, 190, 198, 183, 15, 62, 25, 50, 218, 189, 192, 183, 101, 61, 112, 45, 171, 60, 212, 170, 205, 61, 200, 51, 118, 190, 219, 146, 73, 189, 110, 188, 141, 60, 141, 27, 151, 61, 19, 65, 179, 189, 31, 244, 252, 60, 28, 81, 229, 61, 241, 160, 148, 62, 86, 10, 29, 190, 171, 93, 200, 61, 72, 215, 7, 189, 89, 247, 170, 61, 16, 118, 204, 187, 250, 151, 206, 189, 18, 73, 177, 62, 107, 78, 184, 61, 223, 50, 137, 62, 246, 208, 60, 62, 76, 31, 89, 62, 59, 15, 58, 62, 56, 151, 48, 62, 112, 11, 149, 62, 20, 54, 78, 61, 205, 175, 66, 62, 10, 205, 132, 189, 53, 169, 74, 62, 47, 154, 191, 61, 101, 124, 39, 62, 9, 213, 1, 190, 210, 11, 17, 60, 179, 60, 141, 62, 105, 179, 64, 190, 234, 228, 18, 191, 49, 0, 62, 62, 246, 32, 192, 190, 12, 161, 99, 62, 22, 176, 118, 62, 218, 208, 253, 190, 50, 208, 153, 189, 168, 61, 123, 62, 53, 177, 54, 190, 91, 190, 180, 61, 65, 2, 175, 190, 181, 106, 22, 62, 202, 219, 3, 191, 218, 138, 201, 189, 231, 214, 161, 62, 95, 38, 88, 62, 77, 214, 50, 190, 88, 47, 143, 188, 3, 174, 131, 61, 118, 251, 183, 61, 160, 85, 136, 190, 98, 162, 187, 62, 126, 115, 162, 62, 200, 16, 32, 188, 58, 215, 254, 60, 206, 224, 206, 61, 128, 181, 34, 189, 236, 215, 160, 62, 145, 75, 22, 191, 252, 69, 22, 191, 150, 199, 174, 62, 48, 74, 42, 190, 144, 20, 20, 190, 162, 72, 42, 191, 139, 18, 39, 61, 213, 182, 115, 62, 206, 29, 38, 62, 221, 136, 32, 190, 31, 158, 154, 190, 26, 19, 37, 62, 162, 165, 133, 189, 192, 196, 149, 61, 197, 107, 171, 189, 216, 56, 250, 189, 153, 214, 16, 62, 175, 15, 68, 62, 150, 211, 189, 190, 125, 16, 60, 190, 138, 242, 39, 62, 10, 30, 18, 62, 140, 111, 179, 190, 16, 36, 27, 190, 166, 115, 155, 62, 156, 252, 198, 189, 182, 86, 207, 189, 235, 237, 13, 190, 229, 147, 130, 191, 39, 119, 240, 188, 193, 43, 135, 62, 168, 54, 175, 61, 235, 244, 10, 190, 74, 232, 63, 188, 103, 79, 19, 191, 16, 89, 88, 190, 102, 6, 209, 189, 205, 203, 0, 189, 254, 112, 87, 61, 210, 2, 191, 61, 190, 90, 44, 62, 141, 86, 58, 190, 157, 137, 121, 189, 75, 176, 33, 190, 38, 67, 158, 189, 105, 28, 242, 189, 137, 232, 0, 62, 152, 33, 162, 188, 26, 89, 28, 61, 158, 116, 42, 190, 36, 193, 46, 189, 35, 68, 86, 189, 60, 228, 251, 189, 135, 31, 50, 61, 109, 218, 66, 61, 66, 162, 26, 190, 162, 127, 68, 59, 186, 198, 68, 60, 179, 206, 30, 62, 49, 50, 63, 190, 173, 25, 2, 190, 154, 108, 197, 189, 25, 91, 142, 60, 114, 120, 101, 189, 165, 31, 24, 62, 245, 43, 204, 189, 242, 110, 186, 189, 235, 143, 23, 190, 130, 130, 4, 191, 106, 28, 70, 62, 14, 216, 7, 190, 49, 221, 234, 62, 140, 43, 129, 62, 65, 135, 145, 190, 149, 13, 201, 60, 240, 15, 196, 62, 205, 179, 128, 190, 23, 67, 70, 190, 140, 231, 190, 190, 88, 120, 232, 61, 145, 71, 29, 191, 232, 9, 249, 189, 199, 181, 252, 61, 162, 106, 118, 62, 207, 44, 118, 189, 35, 239, 145, 61, 126, 173, 10, 190, 168, 10, 22, 62, 15, 9, 98, 190, 33, 75, 41, 61, 171, 229, 82, 62, 212, 55, 11, 62, 69, 38, 3, 188, 39, 43, 5, 188, 168, 15, 205, 189, 142, 185, 11, 62, 167, 21, 75, 191, 197, 84, 62, 189, 73, 49, 34, 62, 91, 19, 184, 190, 126, 121, 17, 191, 7, 80, 43, 61, 238, 36, 84, 190, 33, 202, 149, 61, 10, 251, 116, 62, 14, 67, 162, 59, 138, 46, 26, 190, 159, 244, 83, 62, 44, 249, 241, 189, 128, 2, 87, 188, 235, 39, 72, 190, 73, 165, 4, 62, 164, 80, 125, 190, 197, 28, 23, 62, 208, 150, 205, 186, 196, 44, 122, 60, 246, 191, 228, 190, 149, 24, 15, 62, 98, 147, 92, 62, 81, 110, 38, 60, 101, 226, 246, 189, 16, 108, 57, 61, 144, 5, 120, 61, 101, 148, 149, 189, 37, 85, 125, 62, 133, 198, 229, 188, 198, 123, 68, 190, 23, 202, 203, 189, 222, 206, 49, 191, 146, 214, 41, 191, 119, 121, 116, 62, 197, 240, 163, 61, 166, 127, 233, 190, 210, 235, 206, 190, 232, 164, 36, 61, 205, 133, 211, 61, 122, 252, 99, 190, 88, 154, 90, 189, 87, 91, 251, 189, 42, 89, 240, 62, 126, 247, 209, 61, 118, 201, 47, 191, 96, 96, 203, 189, 38, 150, 105, 61, 171, 180, 113, 190, 201, 151, 181, 61, 2, 146, 243, 190, 115, 171, 133, 61, 110, 162, 7, 62, 45, 4, 146, 61, 188, 151, 135, 189, 116, 140, 63, 62, 18, 231, 64, 62, 12, 73, 50, 191, 247, 226, 23, 190, 206, 141, 98, 61, 149, 78, 123, 61, 231, 5, 185, 189, 90, 246, 114, 190, 12, 147, 25, 189, 136, 195, 12, 191, 205, 248, 232, 61, 223, 82, 156, 61, 235, 61, 196, 61, 55, 108, 8, 62, 13, 20, 117, 190, 230, 172, 90, 62, 2, 20, 174, 190, 161, 109, 14, 61, 137, 190, 107, 62, 224, 33, 215, 189, 163, 72, 48, 188, 75, 107, 207, 61, 49, 155, 210, 61, 69, 195, 227, 61, 40, 232, 216, 189, 83, 93, 170, 62, 232, 100, 43, 60, 155, 77, 16, 61, 30, 220, 246, 189, 202, 232, 53, 62, 158, 140, 24, 191, 126, 68, 129, 189, 113, 65, 177, 61, 66, 159, 206, 190, 117, 5, 116, 62, 21, 62, 169, 190, 41, 233, 16, 191, 235, 148, 224, 189, 93, 217, 128, 190, 69, 219, 133, 61, 124, 152, 172, 189, 147, 223, 243, 62, 12, 111, 73, 62, 179, 226, 161, 61, 88, 255, 9, 190, 218, 164, 137, 62, 121, 21, 189, 190, 19, 22, 138, 62, 232, 115, 239, 189, 130, 194, 97, 190, 172, 205, 203, 62, 2, 178, 235, 190, 155, 204, 104, 191, 209, 64, 36, 62, 22, 203, 248, 61, 245, 80, 143, 61, 43, 223, 109, 190, 108, 215, 49, 62, 168, 75, 5, 188, 62, 82, 114, 62, 162, 44, 1, 191, 191, 144, 99, 62, 18, 8, 240, 190, 179, 221, 134, 190, 220, 17, 154, 190, 14, 145, 33, 58, 155, 33, 34, 62, 168, 152, 200, 190, 242, 23, 220, 190, 114, 205, 135, 191, 16, 158, 135, 190, 92, 3, 179, 62, 86, 20, 90, 189, 108, 144, 33, 63, 248, 148, 49, 62, 187, 16, 240, 190, 202, 78, 144, 190, 151, 189, 6, 191, 132, 101, 14, 191, 116, 82, 162, 188, 250, 188, 184, 62, 160, 117, 112, 60, 67, 6, 104, 190, 34, 125, 119, 189, 51, 179, 204, 62, 90, 166, 9, 62, 243, 70, 164, 190, 175, 29, 18, 62, 225, 104, 86, 62, 152, 244, 128, 190, 206, 238, 211, 61, 32, 244, 134, 190, 200, 224, 23, 189, 74, 72, 57, 61, 23, 107, 202, 59, 137, 151, 244, 61, 29, 93, 110, 189, 31, 136, 88, 62, 67, 150, 124, 190, 25, 96, 108, 62, 125, 88, 42, 190, 149, 219, 49, 190, 11, 254, 20, 189, 116, 138, 50, 62, 135, 191, 242, 61, 118, 12, 108, 191, 243, 220, 205, 189, 44, 78, 70, 62, 73, 133, 14, 61, 158, 74, 101, 189, 103, 149, 14, 190, 239, 171, 166, 60, 237, 131, 225, 61, 53, 218, 85, 190, 65, 175, 169, 60, 166, 212, 6, 62, 168, 70, 9, 189, 158, 32, 88, 189, 14, 222, 149, 189, 177, 30, 77, 190, 234, 18, 181, 189, 227, 182, 143, 61, 70, 226, 215, 61, 174, 223, 30, 190, 152, 217, 170, 188, 67, 252, 47, 62, 66, 154, 235, 61, 62, 10, 142, 189, 44, 205, 87, 62, 69, 65, 59, 189, 130, 178, 48, 190, 179, 99, 51, 188, 48, 49, 84, 61, 169, 105, 52, 190, 43, 21, 174, 189, 91, 162, 13, 189, 44, 98, 77, 61, 245, 181, 49, 190, 239, 241, 253, 61, 217, 49, 6, 61, 151, 156, 77, 190, 4, 217, 198, 62, 209, 8, 181, 189, 49, 59, 61, 62, 44, 175, 114, 190, 75, 126, 55, 190, 49, 36, 85, 62, 172, 116, 142, 61, 73, 187, 242, 190, 218, 245, 138, 62, 108, 119, 57, 60, 16, 128, 133, 62, 53, 41, 160, 61, 92, 51, 149, 62, 243, 0, 57, 62, 128, 186, 41, 186, 93, 170, 124, 189, 58, 237, 43, 62, 58, 76, 171, 188, 255, 49, 156, 188, 170, 42, 140, 190, 230, 10, 229, 61, 154, 217, 175, 189, 94, 33, 202, 190, 0, 222, 10, 190, 175, 123, 186, 189, 211, 24, 72, 61, 133, 163, 67, 62, 179, 100, 44, 62, 9, 70, 140, 62, 241, 149, 58, 62, 161, 224, 169, 60, 48, 189, 142, 62, 56, 99, 159, 190, 33, 69, 46, 191, 129, 188, 185, 190, 121, 114, 232, 61, 200, 157, 138, 187, 139, 171, 38, 190, 175, 141, 135, 62, 244, 2, 31, 62, 77, 137, 245, 189, 192, 177, 63, 190, 222, 41, 203, 189, 154, 187, 65, 62, 82, 17, 53, 189, 142, 193, 155, 61, 4, 55, 212, 62, 216, 19, 193, 61, 40, 240, 242, 61, 254, 251, 221, 60, 161, 78, 29, 62, 225, 166, 150, 62, 206, 66, 8, 191, 207, 168, 114, 190, 204, 114, 67, 62, 179, 153, 129, 61, 79, 152, 218, 62, 206, 53, 4, 191, 26, 210, 55, 191, 70, 155, 32, 190, 109, 124, 205, 60, 76, 220, 253, 189, 19, 9, 75, 60, 175, 29, 122, 61, 224, 168, 132, 59, 135, 90, 189, 59, 252, 123, 104, 62, 217, 43, 170, 189, 253, 68, 21, 62, 104, 115, 131, 62, 121, 50, 176, 190, 114, 36, 78, 188, 215, 204, 252, 187, 147, 18, 254, 189, 148, 10, 38, 190, 25, 195, 27, 61, 176, 240, 218, 61, 110, 48, 195, 61, 91, 140, 199, 189, 166, 147, 170, 190, 114, 8, 15, 189, 47, 41, 218, 189, 168, 254, 93, 190, 193, 22, 56, 190, 46, 231, 129, 62, 250, 123, 169, 59, 188, 216, 204, 60, 214, 185, 178, 189, 82, 29, 205, 190, 201, 53, 15, 62, 58, 159, 81, 62, 137, 211, 46, 61, 131, 211, 135, 61, 121, 247, 18, 190, 88, 64, 145, 190, 210, 123, 170, 187, 183, 179, 191, 189, 143, 190, 214, 62, 37, 118, 42, 62, 129, 130, 236, 61, 210, 249, 233, 61, 199, 25, 251, 188, 154, 131, 163, 62, 184, 167, 209, 61, 177, 105, 105, 190, 136, 15, 52, 191, 50, 85, 214, 58, 73, 109, 78, 62, 199, 243, 238, 188, 52, 146, 147, 190, 8, 5, 106, 191, 189, 119, 85, 190, 1, 240, 27, 62, 47, 173, 128, 190, 116, 96, 123, 190, 162, 70, 65, 62, 78, 102, 127, 61, 231, 106, 242, 190, 255, 230, 14, 191, 251, 162, 80, 190, 112, 183, 36, 62, 128, 17, 217, 190, 161, 18, 200, 61, 58, 206, 12, 62, 83, 193, 24, 191, 55, 248, 159, 189, 47, 151, 28, 62, 194, 145, 40, 62, 221, 146, 230, 61, 237, 90, 176, 189, 65, 14, 215, 61, 190, 186, 138, 62, 32, 63, 143, 62, 29, 190, 211, 62, 172, 126, 51, 191, 37, 137, 26, 189, 238, 143, 177, 60, 204, 95, 112, 191, 201, 10, 28, 190, 217, 72, 74, 190, 149, 227, 157, 190, 47, 47, 239, 61, 27, 143, 108, 190, 25, 104, 202, 189, 120, 94, 202, 189, 18, 125, 72, 62, 65, 54, 74, 191, 92, 17, 139, 61, 215, 160, 126, 189, 228, 10, 88, 187, 107, 177, 35, 62, 28, 92, 7, 189, 193, 224, 46, 191, 184, 89, 136, 189, 218, 12, 145, 62, 209, 45, 129, 62, 153, 162, 127, 62, 42, 169, 20, 61, 95, 15, 40, 191, 122, 141, 178, 62, 54, 2, 14, 62, 82, 186, 195, 188, 56, 57, 156, 62, 252, 123, 144, 60, 180, 217, 218, 189, 72, 74, 116, 62, 194, 221, 26, 191, 188, 125, 64, 190, 220, 158, 189, 62, 79, 147, 165, 190, 72, 150, 2, 62, 150, 175, 114, 189, 193, 90, 183, 62, 122, 5, 4, 62, 30, 228, 149, 60, 85, 44, 105, 190, 221, 181, 12, 62, 107, 49, 15, 62, 29, 163, 192, 189, 252, 192, 229, 190, 177, 211, 209, 61, 70, 172, 34, 190, 243, 116, 80, 190, 75, 168, 6, 190, 150, 14, 68, 191, 217, 10, 239, 189, 222, 37, 127, 187, 58, 62, 6, 62, 211, 7, 175, 62, 10, 5, 154, 60, 50, 217, 244, 190, 75, 146, 187, 62, 59, 28, 113, 188, 196, 190, 137, 191, 223, 34, 129, 190, 17, 31, 156, 188, 90, 225, 225, 190, 182, 153, 156, 190, 237, 21, 164, 62, 160, 208, 18, 62, 192, 170, 18, 63, 155, 231, 148, 62, 33, 148, 19, 63, 196, 124, 28, 61, 146, 119, 83, 62, 2, 204, 203, 62, 159, 119, 128, 188, 253, 173, 174, 189, 65, 104, 185, 189, 38, 123, 220, 190, 202, 4, 226, 61, 203, 237, 130, 61, 69, 246, 213, 190, 110, 64, 136, 62, 202, 27, 29, 62, 41, 194, 232, 190, 11, 102, 55, 190, 177, 184, 139, 191, 212, 231, 163, 189, 87, 55, 33, 191, 174, 139, 79, 190, 40, 33, 32, 190, 228, 29, 15, 62, 247, 182, 175, 62, 222, 255, 28, 62, 211, 165, 173, 189, 122, 208, 165, 62, 134, 4, 96, 189, 30, 62, 167, 62, 5, 227, 11, 63, 146, 172, 179, 190, 86, 170, 30, 190, 91, 12, 226, 189, 171, 242, 218, 190, 98, 229, 100, 61, 236, 79, 53, 190, 101, 223, 203, 189, 237, 170, 49, 62, 60, 243, 87, 190, 248, 141, 230, 189, 88, 133, 191, 188, 165, 17, 13, 62, 107, 8, 52, 191, 146, 163, 131, 190, 38, 46, 110, 62, 140, 97, 22, 190, 226, 176, 82, 188, 235, 100, 28, 61, 221, 207, 212, 190, 144, 181, 145, 189, 32, 143, 165, 62, 128, 249, 0, 189, 65, 113, 23, 62, 129, 189, 177, 189, 221, 255, 181, 190, 105, 7, 176, 62, 26, 213, 51, 62, 219, 204, 156, 189, 209, 171, 164, 62, 46, 239, 69, 62, 77, 182, 137, 62, 241, 42, 165, 62, 7, 41, 3, 191, 165, 243, 138, 189, 39, 121, 247, 188, 235, 55, 137, 191, 22, 40, 27, 189, 246, 151, 168, 190, 166, 169, 97, 190, 182, 150, 164, 189, 238, 222, 144, 190, 128, 69, 192, 188, 240, 114, 242, 189, 233, 159, 25, 62, 236, 209, 145, 191, 0, 138, 19, 190, 159, 61, 143, 62, 113, 42, 36, 190, 204, 23, 106, 61, 61, 0, 61, 61, 139, 94, 42, 191, 134, 125, 37, 62, 103, 169, 0, 62, 40, 59, 148, 62, 186, 12, 26, 60, 182, 27, 243, 188, 98, 107, 44, 191, 175, 161, 192, 62, 154, 14, 18, 62, 43, 123, 164, 189, 5, 89, 122, 189, 85, 58, 176, 189, 101, 248, 204, 61, 91, 94, 13, 190, 126, 154, 149, 188, 168, 68, 37, 189, 105, 180, 164, 60, 98, 23, 13, 190, 30, 110, 244, 189, 26, 177, 109, 61, 79, 24, 15, 190, 206, 199, 136, 60, 68, 81, 45, 190, 241, 236, 174, 61, 29, 119, 197, 189, 126, 218, 57, 190, 3, 61, 75, 61, 11, 252, 175, 189, 84, 62, 14, 61, 19, 218, 120, 61, 98, 59, 5, 62, 242, 230, 168, 187, 40, 111, 64, 60, 249, 135, 222, 61, 112, 196, 3, 190, 185, 213, 138, 189, 139, 27, 6, 61, 132, 211, 250, 61, 70, 199, 231, 60, 79, 213, 26, 188, 153, 201, 57, 62, 13, 10, 241, 60, 83, 57, 65, 62, 220, 113, 77, 190, 169, 89, 239, 61, 115, 218, 34, 62, 225, 149, 188, 62, 145, 87, 52, 190, 41, 191, 79, 188, 182, 206, 57, 191, 66, 111, 153, 189, 29, 87, 210, 61, 132, 110, 17, 62, 80, 175, 160, 60, 215, 42, 138, 190, 70, 190, 9, 62, 22, 37, 132, 61, 233, 205, 167, 189, 244, 154, 132, 190, 92, 19, 0, 186, 18, 121, 43, 62, 231, 131, 4, 191, 222, 142, 141, 190, 200, 95, 233, 61, 72, 50, 236, 62, 64, 236, 202, 61, 177, 105, 230, 61, 131, 201, 80, 189, 22, 142, 210, 61, 26, 181, 10, 189, 72, 136, 93, 62, 210, 97, 210, 62, 140, 180, 216, 189, 214, 247, 79, 191, 214, 144, 120, 62, 166, 128, 101, 56, 154, 85, 35, 190, 252, 228, 7, 62, 207, 37, 180, 190, 24, 33, 109, 60, 91, 118, 49, 61, 136, 133, 49, 61, 112, 227, 29, 190, 115, 15, 255, 60, 188, 42, 77, 189, 164, 7, 67, 62, 93, 30, 142, 188, 35, 248, 172, 190, 13, 163, 96, 62, 73, 90, 62, 61, 204, 93, 94, 189, 219, 40, 99, 190, 48, 78, 10, 189, 178, 183, 243, 60, 52, 74, 167, 61, 25, 181, 124, 189, 251, 191, 93, 191, 110, 17, 1, 190, 82, 85, 184, 60, 180, 213, 27, 62, 41, 66, 50, 190, 204, 215, 197, 187, 112, 105, 7, 191, 63, 17, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 113, 42, 190, 176, 141, 114, 190, 11, 226, 54, 62, 167, 185, 14, 190, 227, 204, 47, 61, 132, 159, 12, 190, 54, 225, 33, 190, 131, 50, 132, 62, 174, 201, 70, 190, 40, 75, 176, 62, 2, 221, 134, 62, 1, 169, 148, 60, 159, 17, 34, 187, 252, 21, 37, 62, 66, 204, 57, 62, 64, 0, 34, 61, 69, 22, 211, 61, 127, 243, 8, 62, 108, 180, 238, 188, 44, 69, 230, 189, 153, 88, 5, 190, 212, 117, 95, 61, 84, 3, 102, 61, 45, 110, 216, 189, 168, 82, 15, 62, 19, 172, 177, 61, 229, 210, 198, 61, 58, 135, 14, 190, 84, 2, 61, 62, 248, 59, 28, 190, 21, 152, 176, 190, 103, 246, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 155, 36, 60, 78, 50, 75, 62, 79, 12, 163, 62, 123, 136, 220, 189, 15, 219, 168, 190, 142, 74, 7, 191, 95, 144, 244, 189, 17, 31, 156, 191, 237, 2, 149, 60, 105, 230, 115, 62, 247, 11, 4, 63, 130, 84, 190, 190, 190, 58, 99, 61, 220, 115, 155, 62, 94, 213, 251, 62, 122, 231, 138, 62, 245, 128, 213, 190, 68, 152, 65, 191, 28, 47, 165, 62, 16, 241, 196, 60, 223, 41, 5, 63, 3, 130, 224, 190, 235, 103, 47, 190, 186, 34, 22, 63, 182, 178, 173, 190, 99, 227, 181, 190, 66, 246, 73, 191, 111, 85, 96, 190, 234, 25, 65, 191, 44, 61, 27, 61, 53, 108, 195, 62, 86, 167, 138, 190, 104, 56, 6, 62, 149, 49, 30, 62, 136, 62, 86, 190, 185, 108, 177, 61, 167, 46, 136, 190, 206, 230, 189, 62, 22, 181, 82, 61, 219, 97, 27, 62, 108, 189, 136, 61, 208, 193, 133, 190, 89, 95, 8, 61, 134, 180, 245, 190, 103, 13, 5, 62, 194, 161, 83, 61, 165, 169, 28, 62, 176, 130, 145, 189, 123, 179, 0, 190, 175, 142, 139, 61, 198, 166, 65, 190, 134, 63, 56, 190, 4, 225, 27, 62, 166, 176, 228, 189, 127, 75, 11, 190, 40, 14, 8, 62, 147, 33, 30, 190, 227, 71, 157, 61, 254, 240, 81, 61, 214, 10, 137, 62, 39, 183, 43, 189, 251, 241, 131, 189, 42, 239, 116, 60, 220, 196, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 145, 155, 62, 116, 139, 61, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 66, 202, 63, 198, 23, 87, 63, 163, 132, 14, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {154, 57, 104, 192, 145, 15, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0077/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}