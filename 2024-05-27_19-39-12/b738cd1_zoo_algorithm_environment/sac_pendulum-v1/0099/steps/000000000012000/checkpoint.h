// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 115, 145, 190, 61, 133, 139, 63, 230, 97, 255, 62, 18, 214, 20, 62, 32, 165, 172, 63, 113, 240, 171, 62, 192, 151, 54, 190, 74, 113, 73, 63, 38, 54, 11, 63, 182, 113, 230, 189, 121, 152, 146, 190, 184, 15, 45, 63, 233, 238, 95, 189, 176, 32, 81, 61, 215, 137, 170, 62, 204, 111, 196, 62, 49, 205, 22, 63, 243, 9, 22, 191, 79, 112, 62, 63, 189, 104, 76, 191, 13, 249, 45, 190, 155, 113, 224, 190, 59, 143, 130, 191, 8, 217, 108, 189, 42, 197, 126, 63, 205, 170, 98, 62, 71, 162, 126, 62, 255, 99, 35, 63, 30, 207, 99, 191, 3, 98, 124, 190, 70, 116, 114, 62, 238, 126, 42, 191, 76, 233, 5, 62, 137, 18, 10, 191, 57, 170, 19, 62, 183, 110, 215, 62, 221, 184, 47, 63, 94, 131, 92, 63, 75, 191, 130, 62, 169, 1, 5, 189, 204, 247, 211, 62, 246, 246, 135, 189, 123, 158, 20, 62, 4, 75, 221, 62, 213, 255, 212, 190, 54, 34, 125, 190, 187, 9, 242, 62, 10, 20, 25, 63, 46, 63, 179, 189, 144, 162, 6, 191, 147, 6, 88, 191, 71, 33, 128, 61, 69, 188, 79, 191, 134, 168, 59, 189, 189, 101, 39, 61, 144, 183, 13, 63, 167, 133, 13, 190, 197, 207, 166, 190, 184, 39, 184, 191, 135, 162, 215, 190, 33, 163, 84, 190, 90, 119, 31, 63, 93, 188, 1, 63, 130, 114, 118, 63, 123, 248, 145, 62, 102, 13, 231, 61, 12, 227, 133, 62, 126, 68, 137, 190, 178, 62, 232, 62, 94, 19, 8, 191, 241, 117, 109, 191, 189, 253, 95, 62, 231, 233, 211, 190, 100, 21, 95, 62, 57, 160, 213, 190, 164, 180, 13, 62, 72, 134, 113, 63, 7, 90, 110, 62, 198, 88, 63, 191, 33, 212, 169, 190, 113, 104, 32, 61, 219, 189, 139, 62, 39, 133, 98, 62, 63, 122, 221, 62, 84, 98, 175, 190, 45, 34, 98, 191, 51, 151, 208, 190, 9, 194, 41, 191, 81, 25, 127, 62, 81, 99, 178, 190, 111, 212, 148, 62, 142, 250, 3, 191, 232, 73, 64, 190, 6, 210, 127, 63, 41, 2, 33, 63, 100, 225, 241, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 230, 128, 190, 175, 220, 104, 61, 82, 0, 33, 63, 154, 90, 238, 190, 118, 21, 159, 190, 241, 158, 56, 62, 196, 172, 170, 62, 38, 38, 161, 62, 192, 235, 65, 191, 217, 220, 45, 190, 219, 179, 25, 63, 72, 128, 162, 190, 242, 44, 214, 190, 10, 241, 201, 62, 141, 96, 16, 61, 203, 186, 39, 61, 250, 92, 170, 188, 128, 206, 203, 62, 143, 173, 171, 62, 102, 137, 192, 190, 89, 200, 213, 62, 66, 51, 139, 62, 117, 143, 29, 63, 176, 132, 66, 190, 36, 100, 227, 190, 6, 133, 98, 62, 114, 63, 213, 62, 107, 192, 57, 61, 249, 211, 165, 190, 164, 239, 232, 62, 116, 13, 50, 191, 244, 103, 159, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 85, 226, 190, 1, 185, 210, 190, 156, 102, 135, 190, 62, 212, 177, 189, 51, 20, 250, 189, 131, 110, 15, 190, 199, 242, 188, 62, 142, 167, 124, 62, 59, 40, 61, 190, 189, 57, 209, 62, 125, 202, 25, 62, 92, 179, 113, 61, 120, 140, 17, 191, 170, 78, 207, 190, 120, 125, 132, 188, 107, 65, 46, 189, 59, 163, 57, 189, 52, 163, 186, 61, 17, 28, 177, 190, 102, 142, 26, 190, 218, 7, 223, 60, 52, 98, 101, 189, 68, 200, 92, 62, 161, 103, 123, 62, 131, 206, 198, 190, 216, 227, 163, 190, 65, 255, 206, 61, 221, 143, 173, 189, 119, 35, 177, 190, 89, 6, 207, 190, 178, 184, 207, 189, 12, 93, 145, 190, 158, 232, 145, 62, 24, 147, 5, 189, 235, 60, 96, 61, 244, 148, 125, 190, 122, 29, 210, 61, 247, 134, 160, 61, 153, 34, 53, 191, 96, 154, 57, 191, 7, 99, 108, 190, 84, 1, 21, 191, 249, 175, 171, 191, 215, 198, 90, 190, 25, 208, 76, 189, 216, 206, 10, 60, 22, 183, 98, 62, 87, 52, 128, 60, 60, 233, 194, 189, 84, 159, 231, 190, 251, 220, 30, 62, 181, 170, 152, 190, 111, 116, 4, 62, 231, 72, 165, 60, 197, 99, 38, 190, 170, 62, 73, 190, 201, 149, 116, 62, 164, 193, 23, 62, 181, 2, 200, 191, 227, 80, 22, 190, 120, 150, 232, 190, 36, 222, 245, 60, 92, 101, 71, 190, 201, 219, 9, 62, 255, 127, 149, 189, 212, 251, 60, 190, 187, 119, 252, 60, 71, 76, 186, 61, 113, 78, 145, 189, 114, 120, 109, 188, 16, 41, 15, 189, 253, 208, 102, 60, 204, 210, 149, 190, 172, 232, 211, 61, 212, 190, 38, 62, 172, 71, 147, 62, 43, 91, 239, 189, 79, 177, 31, 191, 93, 207, 237, 189, 54, 23, 34, 62, 43, 205, 69, 190, 109, 252, 92, 190, 227, 221, 217, 190, 219, 219, 45, 61, 48, 90, 229, 61, 184, 42, 54, 190, 122, 61, 67, 62, 163, 96, 197, 190, 237, 55, 167, 190, 112, 137, 206, 60, 212, 250, 171, 188, 237, 43, 198, 189, 223, 106, 102, 190, 236, 232, 95, 190, 185, 55, 193, 62, 146, 202, 86, 61, 237, 129, 207, 189, 100, 80, 2, 62, 127, 53, 236, 189, 110, 175, 48, 191, 175, 104, 251, 190, 146, 92, 185, 62, 156, 171, 69, 61, 100, 217, 54, 62, 109, 51, 121, 61, 141, 122, 1, 62, 172, 82, 116, 61, 13, 149, 60, 190, 138, 128, 80, 189, 157, 56, 253, 61, 160, 52, 156, 62, 174, 2, 148, 190, 217, 238, 148, 61, 48, 91, 57, 61, 205, 108, 220, 61, 43, 227, 106, 60, 167, 139, 195, 190, 90, 185, 168, 62, 114, 20, 155, 61, 49, 114, 141, 189, 141, 104, 143, 190, 195, 5, 127, 62, 238, 15, 38, 62, 125, 160, 179, 61, 140, 130, 193, 189, 248, 74, 68, 190, 89, 100, 56, 189, 182, 211, 35, 62, 179, 232, 133, 189, 46, 249, 114, 190, 17, 78, 219, 189, 8, 212, 162, 59, 4, 105, 98, 61, 157, 33, 135, 60, 133, 144, 235, 188, 35, 11, 5, 62, 55, 85, 169, 61, 172, 132, 160, 189, 38, 93, 168, 62, 175, 46, 150, 62, 148, 143, 134, 188, 81, 115, 77, 189, 103, 177, 88, 61, 182, 56, 147, 61, 133, 244, 56, 59, 84, 78, 1, 62, 51, 228, 245, 188, 74, 90, 9, 190, 51, 56, 216, 189, 173, 136, 231, 61, 75, 183, 193, 61, 125, 253, 160, 61, 245, 101, 148, 62, 156, 9, 64, 59, 31, 25, 149, 62, 201, 174, 38, 190, 125, 84, 89, 61, 10, 252, 101, 62, 237, 247, 182, 190, 211, 215, 138, 61, 149, 147, 137, 191, 42, 171, 78, 191, 211, 78, 201, 62, 52, 197, 39, 189, 230, 236, 110, 190, 56, 250, 84, 61, 74, 79, 122, 190, 201, 67, 147, 190, 134, 249, 29, 187, 186, 237, 83, 189, 57, 109, 245, 189, 88, 18, 4, 63, 206, 113, 136, 190, 76, 230, 54, 62, 193, 131, 119, 62, 173, 38, 180, 62, 228, 101, 162, 190, 78, 48, 117, 190, 134, 26, 240, 188, 141, 104, 194, 61, 47, 123, 176, 62, 249, 231, 58, 191, 176, 214, 160, 59, 234, 109, 228, 190, 161, 30, 137, 190, 108, 225, 46, 191, 59, 3, 62, 190, 248, 64, 144, 190, 102, 110, 21, 190, 231, 79, 4, 188, 38, 75, 165, 62, 71, 233, 19, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 196, 10, 148, 189, 88, 250, 15, 190, 43, 186, 70, 60, 46, 8, 217, 189, 151, 109, 86, 189, 213, 249, 181, 62, 223, 17, 151, 190, 216, 119, 0, 190, 192, 100, 54, 62, 176, 29, 16, 191, 184, 14, 23, 189, 97, 43, 151, 62, 60, 95, 54, 61, 155, 58, 5, 62, 87, 115, 116, 62, 6, 239, 99, 61, 49, 185, 7, 190, 32, 217, 167, 61, 77, 139, 11, 61, 210, 19, 185, 190, 200, 163, 201, 189, 38, 148, 146, 62, 67, 206, 151, 62, 105, 78, 154, 189, 86, 70, 222, 190, 60, 156, 219, 187, 157, 3, 47, 61, 133, 230, 14, 62, 38, 83, 186, 190, 236, 181, 203, 61, 39, 23, 160, 190, 149, 121, 231, 61, 244, 210, 152, 189, 59, 204, 65, 190, 105, 32, 75, 62, 250, 46, 178, 60, 34, 157, 122, 190, 125, 41, 42, 62, 170, 185, 59, 62, 42, 142, 14, 62, 180, 82, 81, 190, 208, 72, 168, 62, 101, 134, 137, 62, 239, 250, 129, 62, 129, 17, 179, 190, 34, 179, 161, 61, 45, 219, 170, 189, 163, 225, 212, 61, 240, 19, 127, 190, 24, 68, 134, 62, 247, 26, 148, 60, 139, 204, 106, 190, 139, 137, 214, 61, 238, 202, 145, 61, 199, 42, 25, 62, 0, 150, 157, 190, 183, 14, 84, 190, 19, 32, 61, 189, 56, 221, 10, 62, 202, 237, 55, 190, 147, 120, 40, 189, 67, 164, 202, 61, 169, 70, 237, 61, 112, 81, 49, 61, 73, 141, 192, 189, 117, 145, 255, 188, 39, 238, 243, 189, 176, 99, 43, 62, 167, 168, 231, 59, 254, 66, 64, 190, 18, 60, 156, 190, 199, 14, 79, 62, 108, 47, 9, 62, 246, 127, 5, 191, 55, 46, 170, 61, 41, 225, 125, 190, 172, 249, 33, 62, 82, 112, 47, 62, 28, 189, 125, 189, 253, 2, 244, 188, 209, 171, 87, 62, 86, 20, 71, 61, 237, 240, 69, 61, 84, 150, 72, 190, 97, 151, 69, 190, 31, 172, 4, 63, 233, 192, 53, 190, 193, 199, 135, 61, 77, 145, 164, 62, 199, 104, 180, 61, 222, 213, 128, 189, 255, 46, 154, 61, 242, 145, 14, 62, 111, 74, 37, 62, 155, 137, 239, 190, 230, 69, 170, 62, 193, 32, 23, 190, 132, 136, 3, 62, 91, 206, 136, 190, 213, 154, 7, 62, 183, 98, 196, 187, 139, 173, 30, 188, 64, 139, 22, 191, 178, 221, 125, 62, 170, 105, 15, 63, 146, 177, 234, 190, 130, 77, 173, 62, 123, 145, 106, 190, 20, 119, 192, 62, 249, 204, 100, 59, 34, 92, 114, 61, 191, 253, 119, 190, 144, 144, 78, 61, 33, 1, 56, 62, 216, 227, 226, 61, 164, 203, 49, 189, 221, 37, 150, 190, 33, 210, 180, 62, 146, 51, 18, 189, 142, 86, 32, 63, 229, 64, 242, 61, 242, 198, 163, 187, 76, 26, 159, 62, 142, 207, 14, 62, 93, 89, 125, 60, 110, 135, 100, 62, 195, 30, 163, 190, 241, 110, 217, 62, 95, 89, 3, 191, 241, 38, 218, 190, 121, 250, 109, 62, 188, 92, 25, 59, 61, 14, 56, 190, 185, 172, 136, 62, 88, 145, 33, 62, 45, 12, 137, 188, 250, 146, 246, 190, 185, 158, 21, 62, 142, 234, 249, 61, 101, 189, 47, 62, 217, 28, 165, 191, 95, 204, 140, 189, 123, 86, 139, 61, 31, 255, 134, 62, 94, 96, 127, 191, 179, 201, 204, 61, 81, 253, 41, 190, 171, 78, 27, 189, 111, 9, 209, 61, 54, 193, 134, 190, 199, 87, 107, 62, 55, 126, 44, 190, 78, 70, 201, 190, 196, 225, 135, 190, 45, 125, 2, 62, 88, 231, 6, 190, 167, 224, 85, 191, 5, 213, 134, 62, 95, 193, 40, 190, 87, 251, 14, 190, 218, 11, 6, 190, 81, 65, 109, 189, 45, 101, 138, 61, 130, 92, 72, 61, 31, 2, 23, 190, 6, 122, 47, 57, 74, 151, 138, 190, 202, 254, 77, 62, 195, 73, 121, 62, 132, 170, 197, 190, 172, 131, 99, 62, 116, 100, 143, 190, 95, 29, 203, 189, 221, 189, 51, 62, 132, 59, 118, 190, 80, 23, 217, 187, 123, 52, 132, 61, 224, 115, 225, 61, 43, 193, 148, 62, 207, 26, 46, 190, 197, 248, 159, 60, 174, 183, 68, 62, 39, 56, 228, 61, 127, 137, 188, 61, 251, 238, 222, 62, 58, 105, 25, 61, 231, 38, 151, 62, 78, 6, 2, 62, 201, 241, 72, 61, 99, 21, 38, 62, 182, 248, 231, 190, 237, 185, 70, 62, 211, 44, 42, 191, 222, 145, 88, 191, 106, 24, 188, 62, 15, 109, 110, 191, 123, 34, 4, 191, 10, 121, 142, 62, 102, 237, 140, 62, 101, 158, 72, 190, 186, 71, 27, 191, 192, 180, 8, 63, 253, 99, 84, 188, 30, 16, 75, 190, 44, 94, 60, 191, 54, 91, 113, 60, 41, 208, 174, 189, 72, 55, 231, 62, 232, 114, 202, 190, 120, 62, 193, 61, 205, 213, 251, 61, 214, 222, 154, 189, 86, 199, 194, 62, 171, 45, 128, 60, 55, 29, 183, 62, 119, 234, 95, 191, 75, 18, 141, 60, 162, 114, 182, 190, 76, 24, 129, 190, 20, 47, 248, 190, 15, 15, 223, 190, 83, 235, 205, 61, 55, 119, 19, 191, 243, 142, 74, 190, 77, 38, 142, 190, 178, 129, 99, 190, 173, 75, 202, 61, 101, 171, 215, 189, 169, 139, 86, 190, 197, 14, 39, 188, 71, 177, 27, 62, 162, 175, 127, 191, 126, 148, 142, 189, 32, 126, 168, 60, 163, 184, 165, 190, 71, 195, 29, 190, 111, 169, 127, 61, 5, 27, 194, 189, 191, 50, 168, 61, 217, 174, 193, 186, 211, 121, 202, 190, 179, 255, 41, 190, 41, 83, 119, 61, 215, 144, 57, 61, 127, 66, 252, 188, 36, 153, 165, 62, 103, 121, 170, 58, 40, 61, 216, 190, 195, 169, 25, 62, 164, 23, 19, 190, 201, 102, 118, 191, 239, 52, 167, 60, 177, 95, 163, 189, 136, 222, 120, 190, 245, 160, 17, 188, 79, 68, 159, 61, 108, 255, 40, 191, 157, 200, 60, 191, 240, 157, 154, 185, 223, 246, 1, 189, 122, 123, 202, 188, 230, 181, 114, 62, 179, 252, 55, 61, 36, 39, 148, 62, 193, 54, 241, 190, 253, 196, 97, 62, 77, 119, 188, 62, 163, 46, 169, 190, 121, 150, 171, 191, 117, 5, 20, 61, 25, 75, 31, 189, 202, 208, 70, 62, 172, 217, 32, 62, 169, 128, 153, 62, 73, 12, 47, 62, 145, 126, 178, 189, 111, 71, 212, 189, 14, 9, 69, 61, 54, 93, 226, 61, 190, 84, 37, 63, 240, 35, 127, 62, 114, 148, 170, 190, 178, 150, 160, 61, 131, 241, 144, 62, 161, 225, 211, 189, 133, 13, 254, 59, 237, 255, 204, 189, 12, 41, 8, 62, 93, 141, 117, 190, 56, 35, 134, 190, 10, 104, 166, 61, 181, 247, 215, 61, 201, 110, 222, 189, 19, 235, 17, 62, 42, 235, 22, 189, 87, 189, 94, 190, 251, 58, 188, 189, 82, 101, 242, 190, 125, 195, 103, 61, 85, 228, 207, 189, 201, 235, 16, 190, 173, 40, 95, 189, 57, 102, 77, 189, 247, 104, 62, 190, 28, 37, 210, 61, 197, 49, 185, 189, 215, 235, 39, 62, 76, 32, 91, 190, 147, 129, 114, 189, 243, 27, 87, 62, 151, 12, 4, 62, 93, 225, 6, 62, 133, 179, 179, 62, 164, 61, 101, 62, 31, 156, 121, 190, 141, 246, 100, 61, 234, 28, 225, 189, 132, 48, 97, 62, 74, 164, 93, 190, 66, 115, 14, 61, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 168, 111, 64, 190, 89, 129, 134, 189, 204, 163, 242, 188, 212, 21, 189, 60, 174, 225, 44, 189, 115, 41, 129, 62, 53, 117, 80, 190, 40, 13, 10, 190, 18, 160, 14, 62, 244, 110, 34, 62, 155, 165, 3, 190, 50, 121, 4, 191, 47, 106, 220, 61, 128, 151, 202, 62, 122, 93, 227, 61, 156, 199, 67, 190, 114, 45, 89, 62, 14, 180, 154, 190, 207, 170, 3, 62, 197, 12, 157, 189, 76, 236, 139, 190, 215, 179, 207, 61, 181, 11, 211, 190, 60, 44, 35, 191, 33, 4, 225, 62, 46, 191, 104, 190, 221, 62, 143, 190, 17, 195, 59, 60, 222, 97, 14, 62, 96, 133, 72, 61, 44, 237, 171, 62, 192, 82, 127, 62, 70, 95, 40, 62, 129, 176, 125, 189, 104, 143, 103, 62, 42, 39, 78, 190, 28, 153, 113, 189, 140, 55, 30, 62, 64, 132, 214, 62, 73, 128, 187, 189, 142, 179, 18, 191, 46, 72, 226, 62, 156, 198, 209, 189, 152, 23, 94, 62, 208, 241, 164, 188, 183, 222, 87, 59, 117, 219, 13, 61, 217, 29, 205, 61, 118, 224, 156, 189, 70, 149, 124, 190, 99, 28, 29, 62, 236, 161, 89, 61, 194, 27, 39, 62, 148, 31, 206, 190, 16, 5, 152, 61, 60, 160, 199, 190, 51, 170, 13, 190, 248, 10, 31, 62, 43, 168, 199, 59, 64, 30, 140, 61, 110, 44, 155, 188, 213, 175, 38, 190, 100, 41, 7, 62, 127, 98, 47, 190, 40, 65, 72, 189, 133, 88, 114, 189, 96, 106, 9, 62, 34, 86, 145, 190, 38, 200, 12, 190, 87, 146, 6, 62, 195, 115, 163, 62, 194, 212, 128, 190, 13, 198, 106, 191, 112, 197, 7, 63, 243, 45, 227, 189, 29, 242, 87, 61, 229, 91, 8, 191, 29, 229, 253, 189, 48, 137, 19, 62, 104, 122, 184, 62, 183, 253, 140, 189, 128, 123, 113, 62, 216, 141, 129, 190, 243, 142, 163, 61, 187, 205, 208, 62, 142, 50, 205, 189, 67, 101, 214, 62, 148, 209, 131, 190, 125, 38, 250, 190, 217, 178, 158, 61, 88, 61, 207, 61, 104, 210, 118, 190, 144, 189, 5, 61, 230, 127, 160, 61, 197, 10, 193, 62, 33, 221, 181, 190, 186, 129, 183, 188, 53, 215, 109, 62, 16, 101, 92, 190, 175, 222, 139, 61, 27, 227, 194, 61, 230, 103, 31, 62, 254, 209, 3, 191, 190, 2, 46, 189, 210, 128, 240, 62, 30, 85, 21, 190, 173, 135, 22, 190, 81, 242, 226, 189, 169, 253, 129, 62, 133, 101, 168, 61, 173, 29, 109, 189, 214, 136, 174, 60, 164, 34, 212, 190, 32, 113, 145, 61, 232, 34, 84, 190, 138, 215, 25, 61, 42, 220, 6, 190, 38, 69, 213, 62, 189, 233, 20, 62, 248, 164, 10, 62, 68, 34, 83, 190, 60, 157, 70, 61, 12, 52, 249, 188, 90, 239, 148, 189, 89, 19, 192, 61, 74, 117, 29, 191, 26, 122, 22, 62, 66, 23, 248, 61, 76, 87, 129, 189, 70, 23, 41, 62, 86, 213, 5, 190, 13, 205, 30, 190, 74, 52, 93, 62, 81, 218, 12, 190, 243, 84, 224, 189, 49, 222, 136, 188, 181, 0, 28, 62, 138, 12, 160, 190, 209, 129, 15, 188, 124, 14, 214, 190, 224, 134, 77, 62, 30, 108, 5, 62, 54, 198, 229, 189, 232, 129, 90, 190, 191, 216, 79, 62, 55, 48, 130, 62, 246, 187, 1, 62, 121, 169, 246, 61, 222, 113, 136, 189, 199, 111, 122, 62, 163, 131, 91, 60, 208, 64, 96, 190, 150, 11, 187, 62, 208, 252, 160, 60, 134, 253, 101, 190, 173, 124, 97, 62, 39, 21, 114, 62, 113, 70, 107, 189, 84, 57, 185, 190, 227, 109, 139, 62, 156, 40, 50, 62, 204, 64, 205, 61, 208, 205, 3, 62, 157, 244, 253, 189, 160, 192, 221, 188, 112, 119, 152, 62, 72, 52, 229, 62, 237, 16, 25, 190, 217, 250, 197, 190, 37, 215, 207, 62, 104, 182, 149, 60, 208, 210, 162, 62, 6, 58, 137, 188, 5, 132, 80, 62, 13, 177, 11, 189, 248, 218, 29, 62, 234, 208, 186, 190, 235, 103, 115, 189, 151, 90, 127, 62, 191, 213, 157, 190, 186, 28, 15, 62, 141, 208, 11, 59, 66, 177, 71, 62, 68, 16, 3, 191, 228, 115, 34, 61, 236, 83, 216, 61, 228, 220, 242, 189, 118, 172, 130, 189, 119, 130, 29, 191, 92, 135, 89, 189, 71, 72, 19, 191, 225, 150, 85, 189, 179, 111, 38, 191, 183, 217, 179, 190, 219, 197, 197, 190, 124, 6, 16, 63, 46, 41, 219, 62, 79, 162, 190, 190, 196, 174, 45, 191, 135, 73, 88, 188, 70, 126, 14, 62, 203, 203, 31, 191, 58, 38, 5, 61, 94, 76, 4, 191, 159, 35, 33, 62, 125, 206, 148, 60, 45, 192, 209, 190, 213, 75, 9, 191, 45, 69, 182, 189, 123, 254, 65, 190, 192, 153, 84, 62, 180, 63, 101, 191, 113, 228, 141, 190, 252, 88, 118, 188, 191, 169, 90, 189, 72, 246, 235, 62, 209, 83, 133, 62, 54, 152, 37, 191, 32, 13, 145, 62, 94, 235, 132, 62, 212, 45, 156, 61, 220, 76, 129, 62, 20, 127, 36, 191, 184, 156, 236, 61, 60, 8, 223, 60, 252, 185, 35, 190, 37, 26, 115, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 168, 151, 26, 190, 204, 209, 93, 189, 180, 121, 50, 60, 27, 234, 106, 189, 213, 87, 35, 190, 97, 70, 237, 61, 243, 154, 215, 189, 107, 242, 2, 62, 240, 147, 11, 190, 31, 181, 146, 188, 201, 86, 126, 61, 185, 19, 193, 189, 233, 195, 239, 61, 56, 127, 21, 62, 44, 10, 44, 190, 124, 206, 148, 61, 129, 37, 152, 188, 145, 226, 35, 62, 157, 68, 41, 190, 200, 0, 148, 189, 92, 111, 250, 61, 75, 136, 246, 187, 101, 33, 112, 189, 59, 25, 205, 189, 177, 64, 19, 62, 128, 189, 190, 189, 86, 59, 238, 60, 207, 125, 46, 189, 210, 58, 173, 61, 27, 203, 211, 61, 176, 242, 16, 62, 185, 253, 35, 62, 1, 66, 247, 61, 177, 33, 41, 62, 36, 37, 188, 62, 197, 95, 190, 62, 249, 229, 49, 62, 194, 40, 243, 61, 44, 0, 237, 61, 101, 104, 127, 189, 47, 232, 117, 62, 127, 119, 141, 61, 27, 210, 130, 61, 25, 249, 225, 61, 108, 170, 213, 189, 174, 219, 104, 188, 241, 61, 89, 61, 189, 124, 243, 189, 191, 180, 139, 61, 188, 43, 178, 62, 185, 121, 131, 190, 241, 76, 211, 189, 210, 193, 69, 190, 32, 0, 198, 61, 52, 33, 77, 190, 92, 184, 195, 190, 79, 223, 177, 62, 117, 174, 16, 62, 97, 127, 145, 61, 135, 189, 27, 190, 236, 128, 206, 61, 70, 205, 84, 190, 9, 176, 60, 190, 55, 54, 46, 60, 235, 138, 143, 62, 45, 99, 111, 61, 176, 125, 206, 190, 17, 40, 12, 63, 189, 4, 29, 190, 211, 246, 152, 62, 23, 15, 247, 190, 138, 175, 17, 190, 193, 237, 49, 62, 136, 25, 101, 62, 36, 208, 180, 190, 139, 156, 44, 190, 51, 111, 145, 190, 27, 251, 161, 62, 167, 53, 120, 62, 79, 213, 36, 62, 39, 161, 217, 62, 79, 92, 41, 191, 233, 81, 237, 190, 245, 165, 176, 189, 50, 233, 49, 61, 19, 213, 28, 190, 248, 173, 168, 190, 163, 208, 21, 62, 189, 0, 183, 62, 91, 149, 125, 190, 97, 173, 136, 190, 229, 86, 144, 62, 24, 147, 200, 190, 86, 139, 172, 61, 5, 54, 231, 61, 184, 215, 169, 190, 241, 232, 30, 191, 36, 167, 67, 62, 67, 11, 60, 63, 82, 34, 3, 191, 64, 84, 189, 61, 15, 93, 154, 191, 8, 102, 173, 62, 67, 81, 202, 62, 230, 48, 7, 190, 15, 2, 60, 191, 70, 115, 38, 62, 84, 106, 6, 62, 26, 136, 112, 62, 191, 236, 166, 190, 159, 174, 172, 190, 205, 6, 180, 62, 109, 205, 26, 191, 51, 162, 228, 60, 59, 121, 219, 62, 219, 151, 174, 61, 54, 172, 109, 62, 44, 108, 113, 62, 112, 179, 233, 61, 227, 31, 94, 62, 208, 53, 40, 191, 31, 173, 29, 63, 50, 57, 37, 191, 10, 149, 37, 191, 1, 78, 34, 190, 231, 78, 142, 60, 19, 226, 156, 190, 189, 17, 57, 62, 253, 83, 111, 62, 161, 18, 1, 189, 245, 213, 229, 190, 176, 237, 163, 62, 192, 162, 144, 62, 251, 107, 237, 60, 240, 142, 20, 191, 19, 226, 251, 60, 75, 158, 2, 61, 187, 183, 195, 189, 105, 108, 175, 61, 49, 220, 206, 61, 122, 189, 133, 189, 229, 200, 56, 62, 202, 90, 185, 189, 56, 100, 193, 61, 166, 167, 187, 62, 115, 3, 166, 190, 147, 145, 88, 190, 54, 55, 82, 190, 175, 248, 3, 61, 221, 28, 249, 189, 202, 251, 22, 190, 240, 125, 169, 189, 162, 43, 164, 189, 196, 231, 182, 61, 207, 36, 21, 189, 201, 148, 20, 190, 22, 67, 2, 191, 20, 20, 29, 62, 205, 198, 82, 188, 123, 109, 3, 190, 108, 60, 88, 190, 127, 100, 167, 62, 74, 100, 178, 188, 212, 78, 203, 190, 100, 18, 102, 62, 104, 227, 205, 190, 169, 235, 125, 61, 44, 140, 162, 61, 146, 105, 29, 61, 214, 102, 2, 191, 193, 246, 109, 189, 73, 245, 159, 62, 164, 143, 76, 62, 222, 246, 11, 189, 124, 50, 195, 190, 250, 49, 1, 62, 133, 100, 188, 189, 213, 84, 27, 63, 68, 19, 252, 61, 193, 99, 12, 189, 5, 206, 38, 61, 28, 152, 76, 61, 45, 173, 12, 61, 32, 28, 174, 61, 221, 90, 64, 191, 240, 232, 25, 60, 171, 105, 126, 61, 108, 73, 143, 62, 40, 107, 148, 189, 227, 77, 67, 189, 248, 90, 11, 62, 245, 90, 218, 61, 96, 231, 220, 190, 15, 243, 27, 190, 41, 190, 192, 62, 6, 249, 25, 191, 100, 252, 104, 190, 37, 179, 204, 61, 116, 139, 39, 60, 211, 145, 186, 60, 145, 227, 176, 62, 170, 27, 11, 62, 13, 8, 199, 188, 123, 154, 204, 61, 180, 202, 83, 61, 215, 185, 119, 189, 92, 34, 159, 61, 106, 236, 151, 62, 213, 220, 242, 188, 223, 47, 244, 187, 179, 42, 78, 61, 41, 111, 31, 61, 99, 253, 54, 190, 158, 149, 217, 61, 229, 30, 160, 189, 45, 46, 99, 188, 206, 176, 174, 190, 182, 50, 31, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 86, 49, 190, 35, 188, 30, 189, 133, 6, 58, 60, 82, 44, 40, 188, 228, 167, 155, 62, 4, 51, 54, 188, 0, 69, 26, 190, 191, 175, 142, 61, 199, 226, 134, 62, 160, 6, 27, 190, 29, 160, 29, 190, 37, 159, 164, 62, 254, 48, 228, 61, 7, 78, 194, 61, 10, 234, 193, 60, 32, 192, 134, 61, 222, 88, 108, 62, 192, 0, 29, 62, 110, 78, 194, 189, 150, 15, 53, 189, 190, 25, 171, 61, 147, 216, 184, 189, 239, 190, 147, 62, 88, 0, 254, 61, 32, 204, 32, 62, 197, 222, 118, 189, 33, 102, 55, 59, 110, 182, 238, 61, 2, 42, 162, 62, 152, 216, 85, 62, 243, 186, 45, 62, 125, 238, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 14, 65, 191, 40, 14, 54, 191, 4, 193, 37, 62, 14, 203, 254, 190, 198, 91, 28, 189, 141, 193, 128, 63, 179, 160, 24, 189, 197, 36, 17, 190, 229, 86, 57, 60, 78, 0, 83, 190, 127, 213, 29, 191, 128, 255, 178, 63, 145, 57, 137, 189, 195, 145, 160, 63, 100, 21, 140, 190, 104, 2, 165, 62, 207, 93, 91, 189, 104, 189, 10, 190, 195, 204, 216, 62, 6, 240, 144, 62, 155, 209, 0, 63, 20, 12, 37, 190, 177, 104, 87, 190, 151, 239, 177, 62, 137, 132, 116, 191, 102, 101, 44, 189, 162, 2, 113, 190, 33, 15, 39, 63, 200, 217, 26, 191, 239, 173, 66, 62, 184, 85, 237, 190, 218, 119, 137, 60, 52, 200, 190, 62, 233, 2, 163, 62, 15, 121, 128, 189, 45, 33, 11, 61, 29, 28, 94, 190, 230, 248, 98, 62, 230, 137, 44, 62, 197, 202, 62, 190, 215, 29, 94, 190, 121, 234, 240, 189, 111, 196, 134, 62, 181, 27, 133, 62, 210, 238, 31, 190, 116, 96, 0, 62, 164, 122, 52, 190, 117, 191, 35, 190, 176, 147, 152, 190, 177, 188, 176, 188, 213, 44, 205, 61, 131, 109, 143, 62, 210, 227, 54, 62, 99, 51, 23, 62, 72, 86, 57, 190, 50, 75, 37, 190, 154, 192, 153, 62, 20, 91, 21, 190, 50, 112, 152, 61, 72, 11, 200, 189, 171, 51, 123, 62, 1, 84, 121, 190, 185, 197, 140, 62, 213, 136, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 239, 190, 189, 223, 219, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 217, 149, 190, 144, 35, 80, 62, 244, 2, 95, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 245, 22, 190, 41, 181, 42, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}