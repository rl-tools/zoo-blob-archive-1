// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 3, 42, 190, 242, 56, 75, 62, 209, 242, 176, 62, 105, 73, 242, 62, 182, 170, 139, 62, 37, 32, 230, 62, 219, 30, 92, 189, 231, 170, 242, 189, 226, 40, 250, 62, 31, 242, 138, 189, 19, 145, 188, 190, 101, 90, 7, 63, 176, 188, 117, 62, 2, 20, 125, 190, 232, 210, 144, 62, 20, 190, 13, 63, 209, 155, 232, 62, 219, 172, 22, 191, 112, 130, 112, 62, 37, 48, 23, 191, 118, 241, 222, 189, 200, 162, 219, 190, 5, 55, 55, 191, 151, 58, 44, 190, 114, 76, 205, 62, 157, 6, 147, 61, 33, 87, 184, 62, 91, 78, 208, 61, 171, 196, 36, 191, 134, 237, 119, 190, 97, 61, 129, 190, 198, 57, 2, 191, 223, 189, 15, 190, 70, 19, 214, 190, 67, 73, 42, 191, 225, 64, 35, 62, 167, 139, 122, 62, 117, 145, 202, 62, 190, 120, 142, 62, 28, 160, 250, 187, 238, 98, 83, 63, 10, 93, 74, 61, 86, 180, 11, 63, 33, 93, 221, 62, 188, 163, 11, 191, 165, 223, 130, 190, 250, 203, 5, 190, 253, 228, 238, 62, 132, 159, 203, 189, 68, 43, 140, 62, 137, 71, 11, 191, 213, 13, 53, 189, 61, 191, 17, 191, 57, 246, 115, 189, 83, 245, 196, 189, 174, 17, 114, 63, 247, 145, 204, 189, 173, 151, 199, 190, 10, 204, 41, 191, 189, 105, 4, 191, 115, 213, 39, 190, 180, 76, 160, 189, 203, 56, 209, 62, 70, 97, 15, 63, 76, 13, 116, 62, 75, 232, 33, 62, 37, 11, 193, 62, 173, 61, 27, 191, 197, 205, 130, 62, 180, 203, 82, 190, 120, 146, 30, 191, 154, 150, 41, 62, 189, 222, 244, 190, 91, 60, 122, 63, 162, 12, 61, 190, 68, 38, 201, 62, 8, 215, 149, 62, 14, 126, 195, 62, 245, 84, 20, 191, 213, 202, 29, 191, 131, 3, 0, 190, 57, 222, 233, 62, 182, 92, 160, 60, 85, 127, 197, 62, 118, 190, 217, 190, 246, 189, 130, 62, 242, 118, 207, 190, 59, 127, 250, 190, 194, 138, 224, 61, 82, 121, 195, 190, 202, 54, 117, 189, 154, 232, 172, 190, 35, 110, 239, 189, 208, 113, 60, 63, 20, 58, 235, 62, 251, 47, 3, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 120, 54, 191, 95, 45, 167, 190, 175, 119, 9, 63, 130, 236, 201, 190, 116, 18, 185, 190, 84, 158, 72, 62, 8, 184, 151, 62, 172, 146, 85, 62, 3, 247, 206, 190, 63, 123, 56, 61, 233, 166, 164, 62, 72, 235, 101, 190, 170, 112, 140, 190, 116, 65, 195, 62, 137, 40, 160, 189, 93, 231, 223, 61, 22, 207, 49, 62, 216, 199, 158, 62, 183, 70, 154, 62, 59, 126, 246, 190, 86, 249, 185, 62, 139, 36, 185, 62, 202, 78, 41, 63, 13, 37, 197, 190, 128, 28, 92, 190, 3, 205, 184, 62, 93, 58, 48, 61, 68, 96, 90, 61, 235, 113, 153, 189, 232, 130, 40, 63, 172, 153, 211, 190, 132, 196, 118, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 49, 142, 61, 165, 47, 74, 61, 183, 47, 254, 189, 75, 130, 61, 190, 213, 5, 20, 190, 205, 132, 247, 187, 166, 125, 41, 62, 50, 241, 47, 62, 133, 104, 141, 61, 48, 143, 109, 62, 227, 16, 96, 60, 113, 97, 234, 189, 138, 1, 213, 187, 224, 203, 216, 188, 227, 234, 155, 61, 252, 57, 166, 189, 238, 35, 204, 61, 241, 238, 181, 189, 163, 240, 240, 189, 149, 187, 197, 189, 78, 65, 212, 61, 63, 27, 192, 189, 155, 118, 31, 190, 53, 198, 210, 60, 52, 51, 56, 189, 184, 123, 2, 62, 150, 171, 31, 62, 3, 58, 34, 61, 213, 113, 38, 190, 213, 219, 25, 190, 140, 144, 115, 189, 74, 64, 160, 61, 18, 248, 36, 62, 226, 2, 202, 188, 173, 240, 249, 61, 141, 238, 222, 189, 188, 51, 58, 62, 208, 38, 30, 189, 136, 150, 13, 62, 146, 231, 191, 190, 192, 2, 193, 189, 241, 110, 89, 61, 79, 213, 183, 190, 6, 18, 223, 189, 5, 80, 242, 189, 49, 42, 43, 61, 184, 132, 173, 59, 43, 90, 166, 60, 150, 25, 5, 188, 26, 228, 64, 190, 145, 137, 129, 62, 117, 241, 43, 190, 90, 130, 33, 62, 94, 230, 30, 189, 102, 54, 203, 189, 216, 199, 89, 61, 225, 76, 150, 62, 241, 170, 45, 62, 195, 168, 88, 191, 72, 119, 243, 189, 61, 10, 106, 190, 132, 237, 67, 61, 181, 195, 38, 190, 212, 85, 3, 62, 246, 189, 1, 190, 151, 20, 73, 190, 76, 194, 34, 189, 253, 17, 6, 62, 105, 231, 238, 189, 246, 12, 70, 62, 200, 198, 50, 61, 113, 74, 187, 61, 5, 201, 198, 189, 1, 174, 183, 61, 185, 176, 61, 62, 132, 21, 149, 62, 224, 102, 194, 189, 108, 157, 60, 190, 241, 28, 78, 61, 217, 112, 187, 61, 233, 217, 92, 61, 186, 104, 191, 189, 192, 104, 81, 61, 144, 119, 36, 62, 37, 95, 52, 61, 199, 180, 9, 190, 28, 41, 98, 62, 77, 71, 111, 190, 150, 236, 17, 189, 21, 212, 152, 60, 101, 88, 163, 186, 104, 101, 202, 189, 17, 224, 198, 188, 239, 49, 98, 189, 33, 230, 190, 61, 137, 111, 52, 61, 37, 125, 17, 62, 246, 220, 35, 61, 180, 28, 41, 60, 19, 175, 71, 190, 223, 13, 65, 189, 49, 5, 1, 62, 44, 226, 36, 190, 88, 182, 23, 62, 73, 126, 142, 186, 64, 53, 20, 61, 219, 163, 70, 60, 248, 138, 84, 188, 50, 155, 16, 190, 136, 191, 3, 62, 197, 27, 139, 61, 235, 166, 17, 61, 40, 7, 78, 188, 253, 109, 1, 190, 92, 105, 216, 61, 138, 186, 92, 189, 209, 216, 59, 190, 251, 75, 157, 60, 89, 25, 49, 190, 15, 94, 29, 190, 49, 28, 231, 189, 175, 118, 129, 61, 236, 41, 19, 62, 159, 233, 168, 61, 131, 27, 212, 189, 129, 36, 52, 190, 23, 136, 223, 59, 151, 248, 9, 61, 54, 230, 177, 61, 131, 227, 137, 189, 3, 38, 198, 189, 125, 71, 111, 189, 120, 15, 201, 61, 24, 135, 45, 60, 6, 119, 144, 61, 198, 49, 7, 190, 118, 196, 150, 61, 48, 18, 139, 61, 167, 56, 227, 61, 234, 197, 141, 62, 144, 81, 175, 61, 107, 77, 179, 189, 149, 99, 147, 60, 71, 142, 164, 61, 143, 132, 186, 188, 241, 130, 65, 189, 138, 2, 123, 189, 40, 37, 6, 189, 197, 71, 229, 189, 65, 136, 43, 61, 58, 251, 147, 61, 199, 136, 145, 189, 15, 31, 121, 62, 228, 229, 160, 61, 0, 185, 201, 61, 1, 134, 28, 190, 135, 58, 111, 61, 141, 184, 24, 62, 208, 111, 20, 61, 190, 168, 224, 61, 243, 32, 152, 189, 248, 29, 56, 190, 149, 142, 10, 62, 52, 220, 72, 189, 227, 245, 232, 187, 227, 233, 129, 187, 49, 63, 30, 61, 188, 119, 152, 189, 2, 155, 248, 61, 63, 231, 22, 189, 41, 146, 133, 61, 173, 18, 106, 62, 142, 216, 127, 60, 96, 5, 216, 60, 192, 133, 89, 62, 198, 53, 139, 61, 199, 141, 215, 189, 89, 204, 69, 61, 45, 198, 55, 190, 172, 77, 229, 61, 248, 140, 16, 62, 207, 61, 123, 190, 79, 117, 143, 189, 98, 131, 82, 190, 153, 14, 76, 190, 89, 124, 118, 190, 18, 234, 7, 189, 199, 33, 32, 188, 254, 121, 0, 62, 114, 148, 217, 60, 19, 249, 12, 61, 112, 59, 36, 61, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 27, 84, 166, 61, 135, 48, 34, 189, 221, 248, 167, 187, 155, 117, 221, 189, 195, 86, 174, 60, 55, 202, 151, 61, 88, 157, 67, 62, 205, 62, 235, 189, 230, 97, 0, 61, 123, 136, 222, 188, 56, 114, 149, 61, 19, 143, 98, 62, 86, 127, 204, 60, 137, 247, 188, 189, 38, 230, 214, 189, 12, 86, 69, 61, 219, 205, 142, 189, 239, 131, 37, 62, 5, 214, 166, 189, 48, 167, 94, 190, 12, 186, 227, 189, 238, 85, 232, 61, 111, 52, 132, 62, 58, 152, 124, 189, 182, 5, 179, 190, 136, 165, 222, 187, 128, 193, 206, 61, 76, 245, 38, 62, 243, 199, 153, 189, 127, 233, 45, 189, 120, 199, 148, 189, 44, 159, 139, 61, 26, 251, 15, 60, 22, 123, 98, 189, 238, 203, 56, 62, 59, 19, 68, 61, 224, 110, 60, 190, 104, 3, 113, 62, 63, 110, 25, 62, 122, 208, 200, 60, 160, 253, 132, 188, 86, 36, 144, 62, 27, 107, 43, 62, 97, 174, 161, 62, 54, 186, 97, 190, 140, 10, 64, 61, 236, 104, 230, 188, 61, 113, 157, 61, 181, 120, 41, 190, 213, 169, 90, 62, 237, 45, 142, 188, 117, 179, 18, 190, 98, 234, 167, 61, 54, 35, 185, 60, 127, 152, 59, 62, 221, 49, 95, 190, 172, 173, 16, 190, 147, 209, 207, 59, 79, 139, 69, 61, 51, 81, 28, 190, 109, 94, 148, 61, 166, 115, 176, 61, 227, 65, 250, 61, 65, 15, 160, 61, 204, 189, 136, 59, 171, 184, 105, 189, 90, 56, 214, 58, 224, 74, 170, 61, 5, 249, 11, 190, 240, 84, 5, 190, 0, 190, 58, 61, 90, 151, 52, 61, 7, 145, 229, 189, 221, 35, 121, 190, 112, 198, 107, 60, 248, 137, 123, 189, 172, 122, 141, 61, 37, 166, 151, 62, 224, 58, 30, 188, 130, 254, 229, 61, 223, 137, 66, 62, 138, 12, 136, 188, 35, 238, 100, 62, 215, 84, 240, 189, 119, 204, 140, 189, 141, 54, 130, 62, 234, 250, 43, 190, 21, 133, 152, 59, 106, 136, 196, 62, 10, 216, 139, 61, 49, 120, 9, 190, 234, 240, 142, 188, 174, 231, 218, 61, 38, 136, 34, 62, 15, 68, 135, 189, 31, 23, 63, 62, 103, 31, 212, 188, 51, 68, 69, 189, 212, 236, 80, 61, 167, 18, 250, 188, 155, 240, 231, 189, 59, 86, 55, 189, 70, 38, 61, 190, 101, 207, 26, 189, 60, 207, 38, 61, 165, 6, 2, 190, 79, 1, 30, 62, 122, 85, 131, 190, 88, 153, 187, 61, 129, 179, 6, 62, 67, 148, 89, 189, 150, 141, 205, 61, 112, 76, 163, 189, 130, 167, 10, 190, 93, 42, 101, 62, 135, 250, 60, 187, 60, 82, 152, 185, 246, 82, 212, 57, 220, 120, 34, 190, 242, 211, 47, 62, 100, 151, 138, 61, 255, 166, 226, 188, 58, 111, 19, 62, 173, 76, 225, 188, 232, 230, 252, 189, 62, 212, 80, 62, 142, 213, 249, 61, 3, 252, 76, 62, 9, 10, 230, 189, 94, 173, 86, 190, 209, 245, 45, 62, 205, 26, 155, 61, 216, 227, 77, 190, 43, 76, 158, 190, 14, 168, 144, 189, 106, 49, 26, 189, 46, 172, 134, 188, 248, 118, 61, 190, 34, 239, 211, 61, 12, 83, 51, 62, 187, 193, 82, 190, 176, 180, 174, 189, 53, 2, 39, 190, 231, 43, 123, 62, 246, 73, 149, 189, 46, 59, 42, 61, 107, 194, 99, 190, 8, 205, 177, 61, 108, 0, 101, 61, 99, 134, 214, 190, 46, 43, 233, 61, 189, 164, 133, 189, 186, 45, 5, 191, 62, 254, 42, 190, 35, 96, 60, 62, 126, 96, 246, 189, 82, 72, 45, 190, 150, 130, 234, 61, 27, 92, 7, 190, 142, 235, 0, 190, 205, 186, 21, 61, 138, 109, 149, 61, 135, 114, 19, 62, 113, 68, 171, 60, 170, 211, 194, 189, 20, 152, 178, 57, 45, 191, 215, 189, 65, 58, 207, 189, 51, 11, 4, 62, 192, 124, 116, 190, 33, 85, 105, 59, 140, 226, 118, 190, 116, 18, 153, 189, 56, 250, 61, 62, 141, 100, 131, 190, 33, 244, 168, 61, 56, 100, 81, 60, 17, 19, 10, 190, 183, 96, 172, 62, 249, 9, 33, 190, 3, 94, 183, 61, 112, 129, 229, 61, 240, 91, 187, 61, 43, 103, 62, 189, 67, 21, 205, 62, 28, 184, 207, 61, 93, 198, 177, 61, 78, 190, 31, 62, 249, 183, 188, 59, 136, 49, 160, 61, 148, 84, 234, 189, 219, 60, 80, 62, 245, 235, 239, 189, 44, 43, 40, 190, 136, 105, 145, 61, 247, 215, 164, 190, 43, 80, 212, 189, 230, 27, 66, 62, 89, 224, 120, 60, 172, 211, 26, 61, 198, 126, 214, 189, 164, 161, 71, 62, 92, 64, 239, 61, 151, 4, 158, 60, 58, 249, 52, 189, 65, 104, 99, 190, 9, 143, 10, 59, 85, 116, 100, 61, 186, 235, 16, 190, 125, 10, 17, 62, 89, 9, 189, 189, 204, 107, 117, 59, 118, 77, 205, 61, 107, 220, 151, 189, 236, 178, 250, 61, 131, 103, 30, 190, 55, 201, 30, 189, 34, 12, 245, 189, 210, 98, 157, 189, 79, 157, 21, 190, 55, 47, 132, 60, 241, 142, 17, 61, 75, 39, 210, 189, 169, 64, 28, 190, 37, 47, 139, 61, 146, 191, 183, 189, 74, 160, 68, 62, 57, 105, 223, 60, 124, 214, 0, 189, 23, 126, 149, 60, 117, 172, 133, 62, 155, 222, 45, 190, 239, 124, 7, 190, 144, 13, 90, 61, 172, 72, 117, 190, 149, 203, 67, 61, 143, 38, 133, 61, 213, 176, 144, 189, 197, 81, 229, 61, 117, 223, 39, 62, 199, 82, 105, 190, 196, 158, 152, 189, 135, 239, 57, 62, 183, 42, 244, 61, 61, 64, 179, 61, 230, 111, 28, 62, 220, 137, 176, 188, 59, 151, 184, 189, 157, 78, 44, 62, 59, 227, 203, 189, 149, 249, 132, 190, 215, 96, 137, 61, 23, 179, 138, 61, 185, 97, 65, 190, 120, 234, 149, 61, 14, 181, 32, 61, 214, 4, 236, 189, 25, 32, 225, 189, 231, 218, 81, 189, 52, 34, 77, 190, 26, 134, 142, 189, 156, 48, 134, 62, 62, 128, 97, 189, 116, 19, 72, 60, 145, 238, 40, 190, 41, 104, 197, 61, 181, 73, 94, 61, 252, 35, 163, 189, 83, 179, 87, 190, 3, 242, 109, 61, 16, 67, 34, 60, 22, 108, 175, 61, 182, 218, 20, 62, 150, 39, 184, 61, 3, 10, 21, 62, 186, 20, 233, 189, 178, 75, 21, 190, 249, 143, 33, 62, 126, 111, 14, 61, 129, 195, 158, 189, 1, 156, 86, 62, 91, 235, 247, 60, 178, 84, 98, 190, 121, 32, 141, 61, 57, 152, 2, 190, 213, 220, 220, 188, 4, 227, 60, 190, 146, 56, 182, 61, 114, 9, 208, 189, 190, 104, 236, 189, 204, 51, 225, 61, 190, 26, 175, 61, 124, 83, 99, 189, 188, 182, 140, 61, 81, 222, 137, 61, 16, 183, 16, 190, 23, 3, 4, 190, 80, 232, 208, 190, 53, 213, 238, 188, 190, 31, 46, 188, 140, 46, 29, 190, 3, 28, 64, 59, 186, 171, 42, 190, 208, 106, 8, 190, 83, 87, 221, 60, 27, 245, 47, 60, 90, 17, 84, 62, 188, 237, 83, 190, 12, 246, 16, 189, 156, 123, 219, 61, 126, 108, 1, 62, 76, 170, 102, 62, 115, 180, 139, 62, 54, 1, 129, 62, 200, 104, 126, 190, 101, 90, 168, 61, 159, 4, 23, 190, 20, 232, 32, 62, 64, 176, 254, 189, 61, 19, 34, 61, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 133, 8, 187, 61, 42, 48, 163, 189, 91, 19, 155, 61, 180, 106, 195, 61, 195, 160, 152, 61, 74, 205, 137, 62, 215, 81, 73, 190, 63, 244, 151, 189, 50, 31, 15, 62, 101, 75, 145, 61, 8, 252, 109, 190, 119, 228, 101, 190, 140, 108, 128, 189, 0, 140, 69, 62, 38, 150, 1, 62, 129, 121, 126, 189, 234, 133, 37, 62, 37, 183, 60, 190, 254, 140, 163, 189, 23, 180, 129, 189, 21, 92, 11, 190, 148, 71, 34, 62, 3, 237, 98, 190, 163, 203, 54, 190, 54, 203, 133, 62, 106, 66, 159, 189, 85, 12, 91, 190, 195, 38, 62, 61, 201, 5, 165, 61, 215, 252, 199, 60, 202, 28, 44, 62, 194, 204, 112, 62, 245, 11, 174, 61, 19, 228, 152, 189, 84, 7, 12, 62, 233, 97, 183, 189, 222, 106, 225, 187, 112, 40, 2, 62, 135, 80, 5, 62, 116, 133, 68, 62, 12, 104, 21, 190, 224, 60, 33, 62, 249, 182, 240, 61, 172, 185, 131, 62, 255, 252, 8, 62, 157, 151, 27, 190, 14, 139, 194, 61, 127, 55, 81, 60, 182, 18, 218, 186, 143, 0, 128, 188, 45, 90, 163, 189, 194, 246, 63, 188, 5, 92, 143, 61, 63, 103, 233, 189, 183, 37, 88, 62, 97, 40, 211, 189, 12, 88, 78, 190, 24, 191, 66, 62, 128, 150, 2, 62, 65, 230, 20, 62, 205, 203, 165, 61, 148, 96, 23, 190, 241, 65, 75, 189, 137, 9, 246, 188, 143, 254, 2, 190, 185, 146, 73, 189, 176, 42, 160, 60, 33, 59, 229, 189, 151, 55, 173, 189, 167, 131, 42, 62, 43, 155, 31, 189, 106, 83, 43, 190, 188, 100, 214, 190, 34, 63, 69, 62, 242, 101, 183, 189, 80, 93, 34, 62, 162, 100, 130, 190, 12, 160, 108, 190, 226, 217, 10, 62, 158, 149, 167, 62, 152, 31, 11, 61, 48, 179, 115, 62, 200, 55, 132, 190, 127, 168, 8, 61, 119, 165, 165, 62, 230, 177, 125, 190, 163, 22, 219, 62, 183, 99, 85, 187, 20, 82, 199, 190, 124, 214, 37, 61, 186, 150, 61, 62, 5, 229, 70, 190, 93, 101, 196, 61, 0, 24, 1, 62, 30, 158, 149, 189, 222, 62, 168, 190, 251, 67, 54, 62, 146, 76, 82, 62, 224, 96, 35, 190, 182, 161, 146, 61, 131, 137, 243, 61, 217, 104, 83, 189, 75, 167, 50, 190, 226, 217, 236, 189, 188, 163, 35, 62, 103, 101, 146, 61, 14, 36, 125, 189, 30, 130, 54, 189, 228, 137, 34, 62, 46, 129, 88, 61, 242, 154, 183, 189, 68, 101, 173, 61, 110, 250, 231, 189, 9, 206, 150, 60, 134, 122, 255, 189, 138, 215, 25, 61, 180, 191, 150, 189, 251, 60, 178, 61, 125, 170, 151, 61, 231, 33, 215, 61, 138, 194, 235, 189, 12, 70, 4, 61, 27, 149, 198, 61, 64, 225, 245, 189, 136, 181, 202, 61, 220, 214, 39, 190, 26, 122, 22, 62, 155, 184, 105, 188, 33, 30, 177, 189, 233, 138, 216, 61, 7, 152, 37, 189, 24, 32, 42, 190, 166, 112, 8, 62, 122, 25, 227, 189, 137, 10, 38, 188, 150, 138, 22, 190, 210, 45, 151, 59, 175, 167, 147, 190, 240, 73, 250, 189, 5, 211, 36, 190, 18, 227, 157, 61, 226, 111, 125, 62, 56, 75, 178, 189, 85, 210, 141, 189, 66, 189, 32, 62, 33, 160, 44, 62, 214, 136, 134, 62, 74, 247, 179, 61, 132, 49, 250, 60, 174, 176, 180, 186, 95, 178, 61, 61, 10, 250, 43, 189, 21, 242, 203, 62, 195, 179, 90, 189, 60, 88, 98, 190, 13, 6, 47, 62, 209, 226, 51, 62, 179, 131, 140, 189, 63, 167, 164, 188, 174, 92, 27, 62, 34, 163, 249, 61, 99, 6, 207, 61, 246, 181, 30, 61, 5, 60, 79, 189, 210, 255, 143, 59, 7, 253, 25, 62, 174, 172, 169, 62, 108, 118, 223, 61, 85, 177, 211, 189, 195, 185, 165, 62, 158, 43, 43, 62, 35, 131, 189, 62, 123, 23, 211, 61, 221, 61, 140, 189, 102, 156, 112, 189, 72, 59, 137, 61, 140, 96, 49, 190, 129, 123, 95, 62, 231, 79, 45, 190, 243, 68, 11, 189, 98, 193, 87, 61, 34, 90, 100, 61, 98, 42, 125, 62, 190, 179, 140, 190, 37, 176, 142, 190, 68, 141, 212, 61, 149, 251, 207, 60, 119, 246, 30, 189, 46, 250, 83, 190, 33, 32, 23, 189, 204, 26, 249, 189, 80, 181, 163, 187, 197, 250, 223, 61, 12, 64, 134, 61, 202, 232, 98, 189, 80, 234, 75, 187, 142, 169, 203, 61, 97, 60, 50, 190, 24, 250, 118, 190, 208, 16, 209, 189, 141, 123, 16, 62, 45, 166, 153, 190, 137, 130, 127, 189, 102, 225, 199, 190, 240, 108, 25, 62, 147, 245, 140, 61, 77, 168, 137, 190, 221, 226, 208, 189, 176, 57, 78, 60, 211, 208, 83, 190, 227, 150, 70, 62, 134, 79, 45, 190, 17, 43, 20, 189, 245, 226, 14, 190, 31, 4, 145, 190, 222, 54, 51, 62, 214, 145, 128, 62, 38, 135, 56, 190, 192, 189, 229, 61, 128, 15, 110, 189, 71, 198, 137, 62, 194, 125, 136, 62, 0, 164, 179, 189, 180, 232, 170, 61, 56, 189, 227, 60, 15, 149, 35, 190, 114, 164, 173, 187, 145, 69, 6, 61, 68, 191, 239, 61, 186, 41, 31, 189, 23, 4, 26, 190, 6, 84, 203, 188, 180, 121, 50, 60, 27, 234, 106, 189, 129, 174, 16, 190, 89, 172, 247, 61, 39, 224, 214, 189, 96, 198, 13, 62, 72, 106, 9, 190, 20, 5, 58, 188, 123, 72, 177, 61, 65, 58, 160, 189, 137, 136, 255, 61, 53, 133, 35, 62, 229, 106, 36, 190, 2, 190, 150, 61, 37, 181, 50, 188, 246, 242, 48, 62, 171, 24, 36, 190, 21, 226, 142, 189, 141, 203, 25, 62, 112, 111, 143, 187, 12, 199, 35, 189, 241, 212, 133, 189, 177, 64, 19, 62, 191, 104, 190, 189, 134, 122, 112, 61, 236, 233, 184, 189, 119, 155, 147, 61, 120, 106, 83, 61, 108, 114, 30, 62, 109, 240, 1, 190, 39, 60, 230, 60, 145, 116, 233, 61, 6, 160, 128, 61, 237, 94, 57, 62, 47, 230, 15, 62, 23, 220, 0, 188, 104, 14, 72, 189, 52, 178, 56, 190, 150, 238, 94, 61, 138, 242, 58, 61, 202, 226, 20, 61, 221, 246, 0, 61, 163, 141, 200, 188, 22, 129, 85, 189, 239, 115, 19, 61, 181, 175, 202, 189, 120, 252, 30, 189, 113, 44, 56, 62, 207, 136, 26, 190, 114, 72, 255, 189, 183, 171, 88, 190, 235, 24, 185, 61, 68, 105, 132, 189, 220, 43, 80, 190, 107, 94, 48, 61, 83, 213, 5, 62, 204, 236, 49, 61, 241, 175, 46, 190, 197, 127, 205, 60, 129, 170, 11, 190, 214, 238, 135, 190, 252, 129, 128, 190, 253, 78, 56, 62, 160, 232, 90, 62, 200, 80, 63, 190, 29, 101, 197, 62, 127, 19, 146, 188, 126, 182, 145, 62, 125, 116, 94, 190, 134, 117, 242, 60, 244, 188, 91, 190, 215, 166, 39, 62, 115, 93, 60, 190, 239, 108, 200, 188, 90, 24, 66, 190, 245, 58, 134, 61, 223, 235, 51, 62, 103, 248, 166, 61, 224, 233, 207, 62, 246, 211, 222, 190, 68, 231, 36, 191, 125, 127, 221, 189, 220, 135, 11, 62, 48, 218, 21, 190, 153, 173, 36, 190, 129, 140, 126, 61, 134, 193, 135, 188, 57, 125, 121, 190, 154, 91, 93, 61, 88, 136, 66, 189, 14, 195, 9, 190, 144, 64, 148, 190, 75, 45, 70, 190, 195, 35, 125, 190, 143, 242, 158, 190, 233, 0, 93, 61, 155, 83, 176, 61, 182, 162, 78, 190, 133, 72, 160, 189, 4, 84, 40, 191, 234, 47, 149, 189, 17, 80, 242, 62, 220, 195, 174, 189, 193, 60, 18, 190, 172, 234, 24, 62, 50, 235, 208, 60, 212, 76, 172, 62, 96, 14, 109, 190, 111, 55, 232, 189, 77, 249, 67, 190, 208, 186, 21, 191, 66, 152, 234, 61, 206, 109, 220, 62, 6, 180, 39, 190, 69, 161, 46, 62, 128, 46, 55, 190, 226, 30, 165, 61, 200, 185, 68, 62, 215, 249, 90, 190, 112, 43, 8, 62, 126, 168, 206, 60, 43, 160, 67, 190, 16, 147, 132, 189, 225, 0, 133, 61, 201, 7, 89, 190, 30, 35, 83, 62, 150, 36, 239, 61, 63, 192, 229, 189, 143, 80, 166, 189, 197, 123, 142, 62, 95, 251, 68, 62, 40, 165, 197, 61, 112, 65, 190, 60, 32, 157, 162, 61, 124, 92, 130, 61, 64, 211, 54, 189, 45, 231, 20, 62, 39, 6, 16, 188, 52, 142, 169, 189, 91, 219, 59, 62, 198, 163, 68, 59, 219, 32, 93, 61, 189, 81, 171, 62, 22, 14, 158, 190, 225, 126, 97, 190, 242, 249, 141, 60, 254, 4, 114, 187, 72, 47, 141, 189, 240, 95, 169, 189, 240, 140, 242, 188, 201, 223, 251, 189, 254, 211, 22, 62, 136, 32, 180, 60, 180, 42, 217, 189, 118, 231, 200, 189, 29, 15, 151, 61, 37, 122, 11, 189, 121, 172, 250, 189, 154, 205, 103, 190, 121, 252, 167, 61, 136, 52, 233, 61, 61, 209, 145, 190, 172, 225, 219, 60, 236, 21, 55, 190, 47, 134, 24, 61, 70, 217, 109, 62, 233, 181, 251, 59, 183, 219, 115, 189, 228, 181, 249, 189, 5, 199, 68, 61, 160, 173, 159, 62, 39, 52, 250, 60, 161, 28, 197, 188, 177, 18, 8, 62, 161, 222, 48, 189, 191, 30, 113, 61, 70, 96, 54, 62, 155, 55, 9, 61, 159, 234, 59, 190, 37, 254, 238, 61, 222, 115, 1, 59, 166, 21, 120, 61, 216, 65, 168, 189, 118, 45, 99, 62, 118, 12, 238, 61, 16, 0, 90, 62, 16, 65, 122, 189, 189, 180, 194, 189, 196, 29, 136, 61, 162, 3, 250, 189, 170, 199, 166, 189, 212, 172, 56, 190, 159, 90, 251, 61, 222, 185, 214, 188, 130, 133, 128, 190, 194, 72, 8, 61, 163, 89, 39, 189, 152, 172, 230, 60, 194, 61, 223, 189, 197, 251, 25, 62, 163, 219, 205, 189, 4, 134, 35, 59, 95, 231, 212, 61, 49, 61, 115, 188, 228, 33, 186, 61, 249, 94, 174, 61, 5, 178, 237, 189, 246, 23, 210, 189, 75, 250, 206, 61, 20, 239, 128, 59, 85, 64, 35, 190, 51, 64, 97, 61, 245, 243, 146, 188, 134, 161, 146, 60, 151, 42, 227, 189, 101, 107, 129, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 69, 83, 190, 122, 113, 132, 61, 100, 22, 87, 61, 216, 132, 15, 190, 161, 131, 98, 62, 196, 163, 18, 60, 0, 69, 26, 190, 231, 34, 95, 60, 243, 140, 22, 62, 148, 199, 135, 189, 27, 24, 191, 189, 129, 22, 67, 62, 102, 173, 130, 61, 99, 250, 5, 189, 185, 86, 21, 59, 169, 56, 239, 188, 137, 112, 103, 62, 192, 0, 29, 62, 70, 46, 212, 189, 27, 239, 64, 189, 24, 200, 131, 189, 164, 23, 158, 61, 122, 243, 146, 62, 164, 196, 22, 61, 31, 118, 113, 62, 147, 161, 240, 188, 50, 111, 138, 61, 106, 247, 193, 61, 24, 242, 128, 62, 51, 67, 79, 62, 223, 218, 15, 62, 142, 117, 22, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 36, 42, 190, 112, 120, 180, 190, 106, 12, 15, 62, 15, 242, 109, 189, 91, 11, 19, 189, 226, 25, 19, 62, 179, 160, 24, 189, 237, 57, 135, 189, 248, 223, 7, 61, 168, 217, 36, 190, 177, 147, 56, 190, 234, 191, 23, 63, 159, 133, 201, 189, 26, 8, 233, 61, 119, 177, 75, 190, 1, 211, 244, 61, 190, 98, 57, 190, 104, 189, 10, 190, 39, 247, 144, 62, 227, 29, 77, 62, 76, 193, 147, 62, 9, 115, 49, 188, 224, 8, 57, 190, 199, 248, 107, 62, 84, 208, 151, 190, 117, 132, 51, 189, 121, 103, 249, 189, 124, 243, 253, 62, 211, 83, 174, 190, 33, 71, 197, 61, 107, 154, 104, 190, 181, 56, 103, 189, 125, 78, 253, 61, 53, 203, 199, 61, 171, 94, 8, 190, 66, 46, 152, 61, 245, 156, 26, 190, 101, 102, 147, 61, 230, 137, 44, 62, 191, 33, 97, 190, 12, 22, 58, 190, 175, 104, 172, 189, 64, 10, 99, 61, 14, 120, 76, 62, 15, 44, 124, 189, 138, 48, 222, 61, 146, 245, 42, 190, 155, 128, 140, 190, 35, 42, 110, 190, 177, 188, 176, 188, 22, 141, 223, 61, 151, 236, 42, 187, 1, 252, 39, 61, 255, 8, 255, 61, 128, 237, 13, 190, 108, 152, 110, 190, 133, 65, 56, 62, 88, 27, 22, 190, 55, 186, 233, 61, 62, 240, 170, 60, 240, 170, 218, 60, 250, 36, 38, 190, 106, 71, 167, 189, 22, 246, 201, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 61, 210, 189, 105, 62, 22, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {20, 135, 120, 63, 122, 125, 25, 63, 206, 139, 120, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 123, 117, 191, 160, 3, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}