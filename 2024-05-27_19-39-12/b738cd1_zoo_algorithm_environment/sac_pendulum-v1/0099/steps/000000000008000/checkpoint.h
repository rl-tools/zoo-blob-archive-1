// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 218, 171, 190, 140, 192, 153, 63, 27, 205, 160, 62, 145, 150, 44, 62, 58, 13, 141, 63, 91, 236, 211, 62, 110, 162, 255, 189, 124, 27, 98, 63, 218, 29, 11, 63, 133, 190, 187, 189, 61, 242, 163, 190, 219, 23, 45, 63, 44, 44, 21, 61, 187, 64, 1, 60, 155, 168, 173, 62, 224, 250, 231, 62, 224, 254, 18, 63, 49, 191, 25, 191, 138, 189, 76, 63, 210, 205, 78, 191, 28, 79, 67, 190, 240, 31, 226, 190, 92, 200, 131, 191, 56, 138, 199, 58, 227, 113, 96, 63, 162, 222, 46, 62, 67, 25, 117, 62, 229, 235, 48, 63, 102, 220, 92, 191, 36, 234, 67, 190, 108, 137, 139, 187, 5, 140, 19, 191, 253, 45, 164, 61, 6, 129, 168, 190, 60, 181, 141, 60, 169, 3, 234, 62, 208, 132, 17, 63, 249, 10, 71, 63, 208, 204, 123, 62, 13, 59, 42, 61, 65, 8, 9, 63, 116, 99, 156, 189, 197, 197, 137, 62, 120, 42, 229, 62, 232, 200, 13, 191, 224, 4, 130, 190, 186, 25, 8, 63, 243, 1, 27, 63, 35, 177, 9, 190, 192, 14, 244, 190, 211, 80, 89, 191, 17, 24, 191, 189, 212, 194, 80, 191, 102, 154, 64, 189, 61, 155, 213, 188, 126, 222, 53, 63, 106, 149, 75, 190, 157, 57, 166, 190, 145, 17, 178, 191, 25, 9, 228, 190, 226, 80, 71, 190, 34, 112, 44, 63, 232, 71, 6, 63, 113, 69, 102, 63, 185, 219, 183, 62, 187, 51, 20, 62, 10, 221, 214, 62, 135, 134, 153, 190, 51, 21, 242, 62, 245, 204, 254, 190, 255, 192, 74, 191, 78, 9, 132, 62, 113, 227, 109, 190, 47, 90, 247, 62, 99, 106, 228, 190, 19, 198, 151, 62, 228, 32, 66, 63, 61, 27, 133, 62, 199, 57, 56, 191, 81, 99, 225, 190, 251, 43, 33, 62, 129, 127, 137, 62, 131, 145, 33, 62, 212, 253, 219, 62, 183, 254, 188, 190, 133, 188, 96, 191, 142, 242, 228, 190, 0, 95, 233, 190, 239, 2, 212, 61, 9, 81, 185, 190, 227, 5, 120, 62, 74, 28, 59, 191, 127, 58, 20, 190, 27, 176, 112, 63, 202, 8, 34, 63, 77, 89, 240, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 5, 212, 190, 176, 114, 59, 189, 203, 205, 32, 63, 229, 203, 202, 190, 37, 132, 127, 190, 93, 236, 123, 62, 218, 100, 133, 62, 0, 169, 171, 62, 55, 82, 56, 191, 29, 50, 5, 190, 135, 155, 25, 63, 146, 22, 237, 190, 101, 79, 179, 190, 198, 138, 201, 62, 16, 218, 38, 60, 30, 37, 38, 189, 164, 181, 113, 61, 80, 204, 141, 62, 69, 195, 99, 62, 161, 223, 187, 190, 10, 193, 193, 62, 20, 190, 192, 62, 88, 152, 13, 63, 111, 155, 70, 190, 235, 91, 11, 191, 251, 88, 132, 62, 216, 184, 189, 62, 169, 135, 136, 61, 105, 40, 116, 190, 77, 68, 9, 63, 249, 78, 40, 191, 214, 97, 233, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 217, 190, 193, 195, 93, 190, 151, 110, 62, 190, 197, 114, 33, 190, 59, 205, 65, 190, 122, 136, 25, 187, 173, 38, 147, 62, 234, 79, 60, 62, 31, 223, 55, 60, 28, 199, 188, 62, 12, 148, 60, 61, 244, 47, 40, 61, 199, 124, 177, 189, 245, 40, 127, 190, 90, 127, 236, 61, 62, 213, 66, 189, 185, 208, 196, 60, 186, 58, 150, 59, 84, 51, 128, 190, 162, 234, 37, 190, 246, 76, 193, 61, 167, 103, 69, 189, 122, 206, 191, 61, 134, 39, 180, 61, 7, 171, 5, 190, 68, 252, 55, 190, 188, 227, 161, 61, 26, 6, 10, 190, 66, 123, 150, 190, 108, 252, 115, 190, 69, 140, 11, 62, 139, 167, 42, 190, 250, 30, 9, 62, 229, 118, 55, 188, 68, 243, 249, 60, 53, 30, 100, 190, 141, 159, 239, 61, 231, 188, 234, 61, 57, 55, 25, 191, 73, 33, 69, 191, 235, 197, 146, 189, 69, 34, 221, 190, 170, 221, 147, 191, 154, 158, 116, 190, 10, 204, 38, 189, 215, 2, 148, 60, 51, 83, 129, 62, 57, 70, 228, 189, 255, 203, 213, 189, 94, 242, 234, 190, 253, 71, 36, 62, 240, 80, 138, 190, 175, 231, 82, 61, 178, 50, 19, 62, 223, 89, 61, 190, 170, 62, 73, 190, 136, 242, 97, 62, 20, 86, 53, 62, 106, 187, 223, 191, 237, 235, 64, 190, 8, 129, 240, 190, 3, 193, 99, 58, 181, 195, 38, 190, 190, 79, 24, 62, 55, 17, 238, 189, 116, 54, 66, 190, 129, 188, 43, 61, 121, 130, 206, 61, 165, 41, 150, 189, 55, 227, 131, 61, 27, 161, 194, 61, 99, 137, 19, 62, 219, 244, 129, 190, 77, 74, 34, 62, 219, 137, 95, 62, 180, 77, 157, 62, 159, 89, 11, 190, 229, 132, 203, 190, 181, 248, 116, 189, 245, 131, 52, 62, 0, 107, 126, 189, 187, 248, 33, 189, 238, 70, 133, 190, 230, 84, 96, 62, 30, 231, 254, 61, 185, 97, 57, 190, 111, 13, 86, 62, 58, 7, 178, 190, 232, 223, 159, 190, 56, 225, 166, 60, 105, 133, 218, 60, 216, 158, 196, 189, 248, 26, 188, 189, 247, 36, 37, 190, 184, 242, 188, 62, 113, 129, 25, 61, 36, 241, 97, 190, 195, 26, 195, 61, 149, 200, 14, 190, 223, 236, 18, 191, 22, 175, 189, 190, 206, 62, 178, 62, 28, 80, 234, 188, 57, 19, 7, 62, 184, 197, 154, 61, 195, 10, 15, 61, 57, 123, 9, 59, 229, 83, 128, 190, 147, 137, 202, 189, 217, 171, 227, 61, 93, 172, 155, 62, 61, 92, 140, 190, 254, 182, 114, 61, 144, 117, 244, 59, 126, 104, 202, 61, 6, 123, 54, 189, 6, 100, 210, 190, 150, 99, 200, 62, 198, 59, 177, 61, 69, 201, 233, 190, 145, 14, 139, 190, 210, 2, 97, 62, 87, 119, 148, 60, 157, 13, 38, 62, 41, 206, 232, 189, 49, 103, 91, 190, 208, 10, 58, 190, 110, 142, 77, 62, 28, 123, 9, 189, 66, 202, 60, 190, 107, 152, 185, 189, 11, 212, 38, 187, 165, 216, 54, 61, 132, 95, 123, 187, 57, 253, 112, 189, 31, 173, 125, 61, 215, 180, 222, 60, 27, 205, 43, 190, 132, 115, 155, 62, 172, 204, 151, 62, 16, 171, 125, 60, 46, 174, 211, 189, 168, 188, 215, 60, 176, 126, 135, 61, 255, 94, 38, 189, 42, 234, 141, 61, 78, 78, 115, 189, 43, 125, 19, 190, 47, 216, 193, 189, 194, 243, 246, 61, 234, 65, 197, 61, 161, 156, 138, 61, 180, 105, 132, 62, 221, 13, 91, 61, 88, 42, 156, 62, 58, 218, 30, 190, 105, 167, 0, 61, 0, 69, 52, 62, 7, 98, 175, 190, 35, 195, 151, 61, 237, 1, 131, 191, 34, 63, 66, 191, 242, 85, 231, 62, 187, 69, 97, 60, 88, 118, 59, 190, 174, 37, 95, 61, 33, 168, 96, 190, 150, 125, 123, 190, 54, 129, 224, 60, 157, 8, 86, 189, 105, 129, 148, 189, 101, 161, 21, 63, 196, 28, 124, 190, 224, 160, 66, 62, 69, 109, 122, 62, 174, 5, 211, 62, 243, 237, 157, 190, 199, 184, 73, 190, 169, 62, 129, 188, 153, 153, 183, 61, 131, 162, 206, 62, 105, 7, 53, 191, 165, 92, 138, 61, 126, 126, 202, 190, 123, 224, 135, 190, 116, 205, 31, 191, 181, 149, 15, 190, 237, 28, 105, 190, 158, 180, 16, 190, 103, 80, 135, 186, 38, 75, 165, 62, 2, 5, 219, 189, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 110, 142, 225, 57, 21, 85, 170, 189, 228, 86, 197, 60, 142, 54, 239, 189, 111, 22, 108, 189, 164, 177, 177, 62, 192, 104, 90, 190, 152, 75, 135, 190, 94, 216, 221, 61, 144, 88, 198, 190, 240, 68, 89, 189, 201, 185, 147, 62, 233, 33, 133, 61, 229, 209, 138, 61, 54, 236, 97, 62, 52, 239, 79, 61, 26, 131, 71, 190, 93, 31, 14, 189, 115, 0, 181, 60, 124, 237, 172, 190, 106, 44, 188, 189, 135, 24, 155, 62, 4, 243, 144, 62, 159, 32, 233, 189, 129, 134, 5, 191, 250, 163, 42, 61, 204, 64, 203, 59, 80, 175, 16, 62, 219, 168, 212, 190, 118, 125, 1, 60, 157, 195, 204, 189, 243, 100, 236, 61, 224, 230, 211, 189, 54, 125, 43, 190, 240, 28, 85, 62, 30, 9, 237, 60, 82, 44, 124, 190, 107, 98, 60, 62, 123, 72, 50, 62, 188, 120, 138, 61, 243, 212, 68, 190, 131, 64, 135, 62, 220, 21, 129, 62, 198, 185, 140, 62, 164, 217, 155, 190, 26, 68, 9, 61, 48, 29, 194, 189, 217, 102, 201, 61, 131, 128, 136, 190, 149, 118, 100, 62, 144, 173, 22, 189, 83, 34, 88, 190, 6, 80, 226, 61, 118, 40, 118, 61, 105, 102, 39, 62, 121, 42, 157, 190, 225, 249, 73, 190, 6, 104, 170, 188, 161, 172, 237, 61, 102, 162, 42, 190, 24, 17, 30, 189, 45, 172, 174, 60, 50, 91, 11, 62, 224, 99, 75, 61, 190, 198, 94, 188, 221, 87, 109, 60, 81, 161, 201, 189, 45, 48, 37, 62, 169, 45, 174, 59, 181, 124, 63, 190, 213, 204, 158, 190, 192, 72, 76, 62, 122, 183, 143, 61, 189, 36, 4, 191, 225, 204, 194, 61, 6, 217, 121, 190, 166, 146, 45, 62, 23, 224, 26, 62, 148, 152, 95, 189, 196, 209, 143, 188, 110, 66, 77, 62, 229, 18, 15, 61, 92, 30, 99, 61, 232, 202, 82, 190, 126, 91, 50, 190, 45, 168, 5, 63, 111, 254, 44, 190, 191, 142, 150, 61, 55, 214, 165, 62, 15, 166, 254, 61, 92, 163, 29, 187, 139, 44, 161, 61, 174, 61, 11, 62, 152, 79, 29, 62, 172, 81, 13, 191, 219, 122, 166, 62, 241, 252, 138, 189, 193, 106, 14, 62, 24, 65, 147, 190, 56, 211, 7, 62, 212, 242, 35, 59, 144, 30, 218, 59, 11, 155, 50, 191, 79, 251, 56, 62, 25, 17, 218, 62, 191, 237, 0, 191, 223, 64, 139, 62, 50, 7, 95, 190, 12, 163, 164, 62, 90, 127, 172, 189, 164, 82, 177, 61, 251, 33, 117, 190, 180, 51, 99, 61, 161, 51, 154, 61, 12, 2, 195, 61, 124, 221, 103, 189, 99, 135, 157, 190, 87, 206, 142, 62, 227, 242, 136, 189, 12, 137, 30, 63, 19, 169, 32, 62, 29, 29, 176, 188, 130, 77, 160, 62, 82, 177, 243, 61, 194, 57, 234, 60, 208, 180, 91, 62, 129, 129, 179, 190, 241, 221, 197, 62, 144, 134, 214, 190, 168, 216, 185, 190, 152, 22, 90, 62, 201, 167, 162, 60, 80, 7, 24, 190, 47, 65, 8, 60, 8, 185, 236, 190, 203, 196, 25, 190, 201, 11, 76, 190, 236, 180, 190, 190, 168, 88, 28, 188, 231, 234, 121, 62, 239, 29, 86, 191, 35, 97, 116, 190, 245, 119, 143, 190, 245, 41, 147, 62, 134, 252, 53, 191, 44, 113, 224, 189, 81, 200, 180, 190, 45, 5, 145, 190, 120, 144, 192, 61, 229, 190, 219, 190, 218, 25, 59, 62, 254, 12, 74, 190, 98, 75, 234, 190, 182, 42, 132, 190, 110, 199, 145, 61, 17, 215, 15, 190, 244, 106, 89, 191, 151, 205, 155, 61, 95, 193, 40, 190, 53, 83, 47, 190, 248, 200, 131, 189, 153, 81, 171, 58, 179, 151, 176, 61, 90, 74, 63, 61, 160, 29, 23, 190, 5, 18, 191, 60, 97, 214, 110, 190, 113, 98, 10, 62, 100, 83, 58, 62, 240, 159, 181, 190, 178, 202, 86, 62, 7, 108, 142, 190, 20, 80, 148, 189, 150, 92, 26, 62, 187, 120, 96, 190, 15, 149, 100, 187, 31, 134, 133, 61, 92, 213, 132, 61, 226, 191, 153, 62, 14, 153, 34, 190, 135, 170, 12, 61, 246, 209, 91, 62, 110, 208, 228, 61, 125, 192, 150, 61, 28, 209, 223, 62, 18, 46, 179, 61, 243, 49, 155, 62, 150, 146, 12, 62, 84, 0, 116, 61, 37, 233, 26, 62, 121, 33, 214, 190, 201, 65, 80, 62, 168, 94, 67, 191, 248, 239, 50, 191, 60, 43, 206, 62, 127, 55, 141, 191, 65, 162, 50, 191, 175, 160, 149, 62, 142, 233, 67, 62, 174, 163, 84, 190, 180, 202, 252, 190, 0, 17, 204, 62, 21, 107, 91, 189, 19, 29, 56, 61, 249, 95, 245, 190, 240, 143, 77, 61, 226, 225, 186, 189, 214, 98, 200, 62, 73, 112, 211, 190, 190, 137, 165, 189, 226, 65, 27, 62, 149, 30, 210, 61, 158, 253, 201, 62, 50, 21, 174, 60, 217, 220, 167, 62, 77, 29, 96, 191, 187, 22, 114, 188, 46, 102, 98, 190, 251, 147, 125, 190, 9, 40, 247, 190, 56, 166, 220, 190, 233, 203, 239, 61, 73, 13, 228, 188, 3, 49, 216, 189, 189, 222, 211, 189, 216, 215, 22, 190, 113, 172, 8, 62, 98, 225, 4, 190, 64, 113, 84, 190, 122, 7, 18, 61, 119, 233, 99, 61, 170, 79, 225, 190, 4, 96, 11, 190, 195, 102, 23, 190, 214, 54, 189, 190, 69, 97, 29, 190, 109, 13, 154, 61, 144, 175, 204, 188, 166, 68, 32, 62, 90, 138, 10, 61, 247, 91, 197, 190, 26, 34, 7, 190, 230, 155, 49, 62, 215, 144, 57, 61, 220, 220, 87, 59, 91, 227, 157, 62, 215, 226, 212, 188, 194, 175, 215, 190, 219, 185, 67, 62, 228, 121, 194, 189, 128, 238, 111, 191, 125, 78, 49, 60, 56, 63, 162, 189, 44, 155, 19, 190, 245, 160, 17, 188, 177, 53, 134, 61, 217, 172, 204, 190, 168, 93, 240, 190, 131, 0, 58, 188, 6, 9, 73, 190, 125, 129, 41, 190, 66, 163, 135, 62, 213, 133, 202, 60, 225, 105, 24, 62, 58, 254, 147, 190, 1, 77, 105, 62, 94, 31, 75, 62, 57, 158, 246, 190, 187, 171, 24, 191, 188, 254, 176, 61, 107, 103, 184, 188, 108, 103, 191, 61, 83, 208, 60, 62, 155, 184, 15, 62, 27, 127, 92, 62, 39, 86, 29, 189, 181, 17, 26, 190, 99, 64, 59, 189, 184, 62, 160, 189, 192, 95, 207, 62, 118, 88, 126, 62, 39, 6, 34, 190, 146, 24, 32, 189, 83, 104, 9, 62, 140, 131, 170, 189, 40, 236, 70, 61, 126, 95, 121, 61, 229, 136, 69, 61, 211, 206, 159, 190, 149, 26, 105, 190, 148, 106, 164, 61, 213, 230, 90, 61, 174, 44, 68, 190, 131, 99, 239, 61, 114, 33, 12, 60, 239, 105, 227, 188, 24, 90, 63, 190, 227, 2, 241, 190, 49, 164, 5, 62, 151, 23, 38, 190, 11, 43, 44, 190, 94, 111, 57, 189, 121, 57, 167, 189, 194, 190, 121, 190, 147, 128, 141, 61, 217, 63, 204, 61, 25, 62, 21, 62, 64, 7, 56, 190, 23, 62, 146, 189, 230, 214, 110, 62, 169, 166, 22, 62, 219, 132, 82, 62, 126, 168, 153, 62, 168, 20, 129, 62, 207, 17, 28, 190, 48, 234, 45, 61, 124, 229, 240, 189, 216, 22, 68, 62, 216, 153, 115, 190, 78, 23, 137, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 225, 27, 201, 60, 98, 202, 81, 190, 7, 215, 250, 60, 212, 21, 189, 60, 30, 233, 44, 189, 97, 152, 125, 62, 93, 85, 129, 190, 57, 5, 166, 190, 186, 35, 237, 61, 201, 157, 18, 62, 147, 36, 173, 190, 50, 121, 4, 191, 98, 212, 98, 189, 115, 124, 200, 62, 91, 55, 208, 61, 32, 167, 178, 189, 162, 111, 60, 62, 151, 27, 251, 190, 189, 76, 3, 62, 134, 227, 11, 190, 206, 152, 56, 190, 166, 2, 64, 189, 16, 12, 221, 190, 129, 211, 223, 190, 244, 37, 221, 62, 236, 141, 136, 190, 216, 24, 195, 190, 140, 111, 73, 189, 0, 210, 179, 61, 233, 36, 32, 61, 75, 200, 243, 62, 11, 73, 12, 62, 5, 234, 156, 61, 42, 15, 247, 189, 162, 189, 88, 62, 158, 46, 72, 190, 136, 190, 119, 189, 81, 137, 55, 62, 71, 165, 189, 62, 165, 69, 21, 189, 185, 68, 182, 190, 196, 113, 203, 62, 181, 219, 61, 189, 2, 32, 68, 62, 235, 194, 97, 60, 2, 167, 104, 61, 81, 251, 77, 61, 71, 238, 179, 61, 73, 96, 160, 189, 197, 90, 70, 190, 145, 170, 38, 62, 9, 62, 202, 60, 68, 103, 22, 62, 176, 75, 136, 190, 155, 69, 8, 62, 27, 85, 190, 190, 224, 183, 4, 190, 163, 135, 3, 62, 99, 168, 56, 189, 27, 160, 178, 61, 203, 171, 32, 189, 62, 206, 26, 190, 87, 74, 93, 62, 208, 183, 242, 189, 43, 13, 145, 189, 192, 124, 199, 188, 11, 167, 7, 62, 22, 186, 78, 190, 253, 80, 83, 189, 216, 55, 69, 62, 223, 242, 200, 61, 4, 132, 105, 190, 149, 8, 34, 191, 215, 232, 205, 62, 193, 58, 31, 190, 92, 58, 35, 62, 198, 207, 202, 190, 22, 237, 33, 190, 4, 183, 73, 62, 164, 155, 211, 62, 230, 224, 161, 188, 14, 243, 83, 62, 107, 103, 134, 190, 118, 118, 7, 62, 87, 57, 217, 62, 225, 87, 121, 190, 59, 239, 210, 62, 71, 50, 45, 190, 168, 75, 6, 191, 48, 208, 134, 61, 43, 64, 190, 61, 5, 188, 96, 190, 17, 129, 110, 61, 244, 140, 116, 61, 139, 130, 190, 62, 52, 84, 185, 190, 199, 208, 182, 61, 108, 12, 139, 62, 67, 206, 81, 190, 118, 179, 124, 61, 20, 165, 203, 61, 251, 167, 203, 188, 15, 135, 10, 191, 138, 232, 206, 189, 162, 236, 204, 62, 231, 160, 15, 189, 24, 151, 44, 190, 170, 40, 222, 189, 159, 53, 141, 62, 163, 192, 183, 188, 194, 45, 202, 189, 39, 122, 1, 61, 182, 214, 118, 190, 236, 170, 252, 188, 66, 75, 27, 190, 138, 215, 25, 61, 209, 125, 253, 189, 96, 152, 205, 62, 86, 125, 254, 61, 224, 138, 212, 61, 12, 172, 246, 189, 2, 134, 157, 61, 110, 210, 236, 188, 117, 185, 160, 189, 89, 19, 192, 61, 87, 42, 166, 190, 26, 122, 22, 62, 66, 38, 232, 61, 206, 46, 215, 189, 127, 215, 66, 62, 246, 145, 10, 190, 74, 239, 26, 190, 64, 48, 78, 62, 138, 180, 26, 190, 216, 81, 89, 190, 200, 162, 96, 189, 163, 206, 29, 62, 114, 101, 225, 190, 206, 159, 84, 189, 236, 83, 225, 190, 173, 215, 69, 62, 109, 168, 241, 61, 111, 168, 247, 189, 85, 32, 94, 190, 152, 117, 56, 62, 151, 215, 97, 62, 181, 81, 238, 61, 3, 81, 175, 61, 173, 11, 154, 189, 173, 199, 146, 62, 121, 67, 187, 60, 117, 194, 83, 190, 90, 229, 182, 62, 2, 151, 245, 60, 65, 144, 164, 190, 96, 208, 122, 62, 21, 102, 99, 62, 99, 236, 197, 189, 163, 76, 234, 190, 178, 244, 149, 62, 16, 151, 151, 61, 208, 11, 78, 61, 33, 201, 234, 61, 62, 133, 244, 189, 34, 221, 17, 189, 191, 156, 168, 62, 155, 162, 234, 62, 44, 246, 164, 189, 0, 40, 158, 190, 12, 0, 170, 62, 249, 173, 21, 61, 2, 50, 171, 62, 14, 166, 125, 188, 88, 155, 100, 62, 171, 49, 158, 188, 61, 51, 22, 62, 243, 168, 152, 190, 72, 178, 43, 61, 77, 24, 79, 62, 49, 186, 196, 189, 242, 82, 3, 62, 255, 59, 137, 188, 186, 146, 85, 62, 221, 95, 246, 190, 30, 63, 162, 61, 141, 194, 138, 61, 174, 74, 230, 189, 97, 7, 134, 189, 105, 204, 0, 191, 58, 240, 155, 189, 96, 99, 143, 190, 253, 214, 98, 189, 32, 16, 30, 191, 252, 198, 188, 190, 85, 158, 242, 190, 119, 165, 16, 63, 87, 106, 208, 62, 100, 63, 175, 190, 39, 240, 37, 191, 102, 71, 88, 61, 83, 122, 14, 62, 244, 1, 29, 191, 173, 158, 183, 61, 162, 254, 242, 190, 159, 35, 33, 62, 144, 18, 11, 190, 51, 165, 187, 190, 78, 94, 5, 191, 226, 110, 116, 189, 75, 181, 171, 189, 200, 241, 140, 60, 155, 208, 18, 191, 139, 81, 178, 190, 75, 95, 117, 60, 117, 234, 205, 187, 100, 251, 12, 63, 232, 217, 125, 62, 122, 243, 52, 191, 65, 230, 144, 62, 37, 94, 124, 62, 122, 50, 87, 62, 67, 117, 67, 62, 20, 127, 36, 191, 0, 227, 158, 61, 60, 8, 223, 60, 252, 185, 35, 190, 152, 132, 103, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 8, 136, 26, 190, 254, 94, 72, 189, 180, 121, 50, 60, 27, 234, 106, 189, 155, 199, 32, 190, 97, 70, 237, 61, 243, 154, 215, 189, 0, 164, 4, 62, 93, 87, 11, 190, 31, 181, 146, 188, 5, 61, 135, 61, 129, 6, 187, 189, 55, 28, 242, 61, 147, 50, 25, 62, 217, 205, 43, 190, 124, 206, 148, 61, 7, 141, 146, 188, 175, 1, 38, 62, 226, 51, 40, 190, 200, 0, 148, 189, 204, 18, 3, 62, 75, 136, 246, 187, 211, 207, 100, 189, 248, 224, 192, 189, 177, 64, 19, 62, 128, 189, 190, 189, 153, 115, 248, 61, 148, 103, 179, 188, 27, 87, 189, 61, 219, 39, 233, 61, 161, 139, 39, 62, 128, 191, 134, 188, 203, 183, 46, 61, 218, 231, 6, 62, 190, 70, 156, 62, 169, 202, 167, 62, 195, 251, 32, 62, 126, 198, 249, 61, 0, 40, 252, 61, 155, 43, 93, 190, 134, 86, 21, 62, 124, 138, 160, 61, 58, 74, 122, 60, 25, 147, 15, 61, 217, 238, 29, 190, 229, 174, 91, 189, 22, 71, 125, 61, 174, 7, 12, 190, 157, 208, 79, 61, 207, 104, 161, 62, 177, 121, 158, 190, 51, 49, 195, 189, 197, 235, 63, 190, 129, 192, 221, 61, 70, 103, 96, 190, 237, 81, 144, 190, 202, 80, 81, 62, 167, 79, 30, 62, 212, 224, 36, 188, 65, 19, 26, 190, 135, 111, 221, 61, 242, 75, 69, 190, 139, 182, 52, 190, 77, 21, 20, 61, 128, 97, 168, 62, 15, 133, 208, 61, 13, 246, 132, 190, 233, 114, 9, 63, 203, 101, 233, 189, 111, 250, 159, 62, 198, 100, 210, 190, 179, 36, 26, 189, 97, 122, 11, 62, 54, 38, 110, 62, 195, 219, 180, 190, 98, 233, 189, 189, 147, 130, 160, 190, 224, 134, 141, 62, 28, 6, 127, 62, 142, 53, 108, 62, 93, 232, 237, 62, 110, 14, 33, 191, 31, 165, 47, 191, 74, 198, 159, 189, 93, 24, 190, 60, 202, 60, 4, 190, 235, 49, 191, 190, 219, 62, 81, 187, 76, 220, 125, 62, 41, 23, 88, 190, 235, 226, 232, 58, 238, 75, 194, 62, 102, 186, 196, 190, 116, 183, 177, 58, 160, 243, 131, 61, 141, 220, 152, 190, 163, 128, 58, 191, 62, 253, 103, 62, 231, 173, 213, 62, 209, 37, 21, 191, 110, 129, 138, 188, 239, 196, 111, 191, 106, 250, 137, 62, 92, 37, 215, 62, 207, 242, 190, 189, 1, 29, 19, 191, 41, 33, 53, 62, 105, 147, 21, 62, 2, 41, 142, 62, 77, 195, 167, 190, 167, 207, 157, 190, 118, 127, 133, 62, 31, 52, 39, 191, 252, 218, 208, 62, 111, 51, 238, 62, 182, 23, 175, 61, 110, 57, 166, 62, 72, 47, 204, 61, 131, 254, 5, 62, 170, 247, 102, 62, 192, 12, 52, 191, 225, 211, 242, 62, 23, 218, 241, 190, 24, 105, 194, 190, 44, 103, 98, 189, 232, 86, 209, 60, 68, 167, 145, 190, 181, 28, 71, 62, 9, 244, 133, 62, 106, 244, 158, 189, 132, 47, 153, 190, 100, 62, 181, 62, 7, 38, 130, 62, 41, 13, 145, 61, 161, 110, 137, 190, 60, 36, 164, 61, 191, 209, 235, 60, 194, 88, 21, 189, 210, 168, 202, 61, 137, 167, 30, 61, 24, 16, 27, 189, 32, 167, 99, 62, 52, 29, 159, 59, 157, 86, 254, 61, 156, 103, 199, 62, 139, 150, 171, 190, 167, 70, 102, 190, 76, 36, 238, 188, 212, 221, 180, 60, 162, 105, 148, 189, 93, 87, 10, 190, 201, 247, 131, 189, 46, 92, 138, 61, 102, 184, 21, 62, 78, 202, 158, 189, 126, 85, 20, 190, 154, 138, 224, 190, 87, 240, 30, 62, 226, 240, 217, 188, 72, 221, 3, 190, 31, 60, 101, 190, 232, 15, 164, 62, 16, 165, 187, 61, 5, 157, 180, 190, 243, 71, 52, 62, 53, 248, 169, 190, 241, 197, 189, 61, 65, 189, 247, 59, 143, 83, 45, 61, 141, 67, 221, 190, 139, 214, 128, 189, 162, 170, 160, 62, 193, 242, 24, 62, 154, 192, 192, 188, 90, 121, 162, 190, 14, 51, 117, 62, 77, 214, 123, 189, 43, 38, 27, 63, 37, 205, 19, 62, 187, 200, 197, 189, 242, 57, 126, 60, 11, 125, 170, 61, 206, 28, 104, 61, 16, 196, 62, 61, 243, 205, 244, 190, 134, 148, 1, 62, 59, 197, 10, 62, 60, 120, 150, 62, 151, 194, 134, 189, 172, 193, 39, 189, 198, 168, 25, 62, 160, 90, 155, 188, 128, 41, 35, 191, 254, 119, 33, 190, 191, 115, 166, 62, 2, 14, 208, 190, 106, 163, 145, 190, 9, 29, 210, 61, 90, 9, 151, 60, 228, 203, 128, 189, 220, 171, 85, 62, 94, 160, 30, 62, 61, 254, 246, 189, 96, 191, 96, 189, 33, 69, 5, 188, 49, 61, 115, 188, 82, 126, 181, 61, 114, 197, 106, 62, 94, 116, 77, 189, 132, 135, 63, 59, 105, 196, 44, 189, 190, 215, 8, 61, 55, 220, 88, 190, 149, 87, 218, 61, 56, 186, 45, 189, 6, 150, 218, 189, 151, 42, 227, 189, 61, 226, 14, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 123, 91, 190, 89, 71, 21, 189, 100, 222, 164, 61, 231, 225, 138, 189, 79, 194, 152, 62, 228, 77, 212, 60, 0, 69, 26, 190, 239, 114, 125, 61, 227, 78, 112, 62, 106, 194, 253, 189, 57, 230, 119, 190, 249, 246, 254, 61, 65, 191, 0, 62, 68, 73, 218, 61, 91, 145, 35, 61, 164, 120, 89, 61, 107, 175, 149, 62, 192, 0, 29, 62, 123, 60, 1, 190, 248, 11, 161, 186, 175, 18, 98, 189, 76, 94, 163, 189, 181, 123, 119, 62, 191, 133, 240, 61, 183, 226, 16, 62, 161, 200, 98, 189, 89, 181, 147, 188, 52, 107, 13, 62, 82, 14, 142, 62, 18, 20, 133, 62, 252, 33, 182, 61, 161, 84, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 48, 182, 190, 242, 190, 63, 191, 174, 121, 50, 62, 159, 4, 10, 191, 94, 135, 89, 189, 188, 50, 130, 63, 179, 160, 24, 189, 249, 29, 29, 190, 64, 120, 66, 61, 225, 31, 131, 190, 31, 109, 48, 191, 71, 152, 142, 63, 197, 192, 199, 189, 49, 77, 129, 63, 32, 119, 94, 190, 134, 143, 101, 62, 69, 86, 176, 189, 104, 189, 10, 190, 41, 5, 229, 62, 253, 154, 78, 62, 71, 68, 218, 62, 105, 138, 72, 190, 229, 188, 136, 190, 15, 215, 155, 62, 237, 244, 87, 191, 84, 233, 45, 189, 13, 3, 108, 190, 109, 80, 47, 63, 101, 92, 45, 191, 75, 10, 43, 62, 139, 167, 213, 190, 178, 80, 217, 189, 78, 191, 208, 62, 183, 36, 202, 61, 162, 238, 234, 189, 113, 131, 40, 60, 224, 150, 82, 190, 193, 178, 105, 62, 230, 137, 44, 62, 163, 61, 88, 190, 28, 55, 84, 190, 175, 167, 129, 189, 73, 135, 144, 62, 41, 13, 20, 62, 173, 60, 251, 189, 103, 3, 142, 62, 100, 20, 134, 190, 21, 81, 2, 190, 91, 118, 165, 190, 177, 188, 176, 188, 135, 15, 30, 62, 167, 48, 197, 61, 12, 66, 216, 61, 213, 155, 54, 62, 45, 166, 118, 190, 198, 233, 51, 190, 205, 31, 195, 62, 103, 133, 21, 190, 157, 90, 242, 61, 249, 222, 129, 189, 164, 36, 20, 62, 200, 95, 83, 190, 81, 1, 109, 61, 254, 125, 66, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 65, 163, 189, 177, 251, 246, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 10, 68, 61, 97, 250, 18, 191, 206, 24, 209, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 96, 51, 63, 244, 20, 69, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}