// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 155, 83, 190, 45, 201, 155, 63, 213, 147, 255, 62, 158, 163, 199, 61, 84, 73, 202, 63, 147, 25, 148, 62, 148, 146, 91, 190, 144, 111, 59, 63, 190, 211, 16, 63, 197, 113, 70, 190, 61, 251, 84, 190, 161, 96, 31, 63, 254, 60, 61, 190, 109, 200, 27, 62, 189, 52, 147, 62, 74, 109, 203, 62, 109, 209, 230, 62, 115, 83, 12, 191, 186, 110, 62, 63, 84, 85, 77, 191, 185, 127, 87, 190, 152, 38, 218, 190, 124, 54, 133, 191, 15, 8, 37, 190, 169, 47, 132, 63, 89, 2, 137, 62, 187, 29, 137, 62, 153, 191, 37, 63, 144, 100, 125, 191, 187, 181, 134, 190, 221, 94, 53, 62, 11, 110, 39, 191, 241, 181, 181, 61, 252, 142, 34, 191, 52, 218, 176, 62, 142, 95, 161, 62, 133, 184, 50, 63, 253, 123, 108, 63, 79, 41, 154, 62, 63, 82, 57, 190, 12, 30, 48, 63, 159, 119, 146, 188, 27, 65, 135, 61, 216, 97, 232, 62, 97, 88, 159, 190, 112, 185, 175, 190, 111, 3, 254, 62, 32, 37, 20, 63, 178, 46, 15, 190, 145, 23, 54, 191, 252, 250, 56, 191, 209, 135, 254, 61, 56, 69, 83, 191, 168, 195, 153, 189, 122, 214, 146, 189, 231, 159, 73, 63, 46, 232, 162, 189, 144, 23, 194, 190, 167, 63, 175, 191, 163, 87, 239, 190, 44, 189, 88, 190, 220, 93, 25, 63, 125, 231, 250, 62, 215, 109, 115, 63, 77, 161, 168, 62, 190, 15, 243, 61, 153, 211, 132, 62, 71, 228, 146, 190, 36, 57, 205, 62, 162, 57, 241, 190, 131, 36, 131, 191, 79, 167, 114, 62, 181, 110, 3, 191, 54, 195, 18, 62, 45, 11, 210, 190, 7, 104, 176, 61, 226, 150, 135, 63, 3, 241, 136, 62, 94, 11, 99, 191, 99, 41, 187, 190, 105, 122, 155, 189, 215, 225, 145, 62, 189, 218, 197, 62, 222, 104, 188, 62, 247, 192, 59, 191, 211, 30, 160, 191, 159, 195, 158, 190, 51, 221, 61, 191, 44, 80, 191, 62, 87, 116, 179, 190, 163, 0, 9, 63, 94, 173, 218, 190, 233, 124, 26, 190, 103, 186, 128, 63, 60, 116, 87, 63, 243, 252, 202, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 85, 184, 190, 149, 5, 100, 188, 236, 109, 23, 63, 84, 69, 3, 191, 241, 196, 238, 190, 4, 123, 41, 62, 218, 156, 156, 62, 59, 162, 192, 62, 10, 49, 67, 191, 103, 29, 67, 190, 211, 154, 19, 63, 153, 52, 213, 190, 91, 11, 219, 190, 13, 50, 140, 62, 46, 212, 118, 189, 12, 3, 115, 189, 25, 245, 226, 61, 216, 120, 36, 62, 227, 234, 140, 62, 204, 113, 115, 190, 209, 239, 212, 62, 139, 252, 127, 62, 224, 1, 30, 63, 209, 187, 237, 189, 149, 148, 233, 190, 170, 241, 23, 62, 179, 123, 173, 62, 143, 157, 16, 61, 113, 132, 110, 189, 112, 136, 229, 62, 48, 23, 59, 191, 10, 99, 122, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 145, 212, 190, 175, 183, 244, 190, 98, 33, 236, 190, 165, 13, 199, 190, 54, 32, 128, 190, 27, 201, 25, 191, 60, 35, 206, 62, 224, 252, 153, 62, 230, 134, 200, 189, 201, 1, 229, 62, 27, 134, 66, 62, 98, 42, 4, 61, 137, 46, 47, 191, 248, 6, 19, 191, 32, 8, 122, 190, 1, 239, 165, 190, 103, 92, 101, 190, 4, 124, 2, 62, 117, 53, 221, 190, 115, 155, 234, 189, 110, 187, 74, 190, 165, 221, 121, 189, 251, 234, 130, 62, 85, 68, 140, 62, 127, 144, 155, 190, 243, 219, 140, 190, 134, 145, 101, 62, 222, 45, 150, 190, 200, 226, 147, 190, 183, 157, 69, 191, 196, 195, 36, 191, 30, 78, 221, 190, 97, 174, 144, 62, 226, 76, 145, 60, 61, 147, 144, 60, 77, 145, 105, 190, 104, 18, 17, 62, 221, 192, 216, 61, 203, 54, 54, 191, 84, 20, 54, 191, 160, 168, 26, 191, 45, 233, 82, 191, 132, 183, 215, 191, 72, 9, 132, 190, 71, 29, 71, 190, 59, 92, 82, 61, 2, 83, 119, 62, 47, 78, 54, 189, 135, 142, 239, 189, 154, 158, 231, 190, 24, 227, 70, 62, 127, 24, 8, 191, 134, 177, 214, 61, 77, 142, 132, 189, 22, 80, 171, 190, 79, 108, 130, 190, 139, 7, 85, 62, 254, 25, 63, 62, 153, 167, 216, 191, 131, 113, 142, 190, 103, 152, 22, 191, 200, 242, 131, 61, 13, 181, 72, 190, 210, 38, 13, 61, 116, 161, 192, 189, 105, 247, 94, 190, 233, 236, 16, 59, 226, 234, 178, 61, 20, 5, 137, 189, 229, 156, 109, 62, 136, 24, 187, 59, 27, 43, 5, 62, 20, 223, 44, 191, 82, 29, 140, 62, 44, 253, 45, 62, 75, 179, 147, 62, 153, 188, 231, 190, 62, 38, 111, 191, 197, 0, 231, 189, 95, 109, 9, 62, 44, 156, 164, 189, 234, 168, 64, 190, 0, 234, 15, 191, 137, 167, 98, 188, 230, 195, 176, 61, 141, 111, 162, 190, 80, 23, 46, 62, 29, 1, 171, 190, 237, 55, 167, 190, 124, 34, 27, 189, 1, 232, 182, 61, 54, 94, 1, 190, 183, 27, 16, 191, 244, 166, 47, 190, 168, 55, 220, 62, 35, 236, 11, 189, 62, 207, 20, 191, 113, 179, 139, 62, 247, 44, 201, 189, 48, 39, 49, 191, 67, 154, 25, 191, 232, 199, 208, 62, 106, 43, 225, 61, 239, 43, 88, 62, 194, 133, 42, 61, 36, 102, 7, 62, 178, 211, 221, 61, 99, 32, 209, 60, 80, 72, 154, 189, 51, 192, 31, 62, 150, 118, 175, 62, 43, 65, 1, 191, 103, 66, 133, 61, 39, 251, 177, 61, 75, 104, 20, 62, 26, 114, 37, 61, 50, 230, 196, 190, 27, 65, 180, 62, 5, 135, 22, 62, 64, 236, 192, 62, 149, 174, 139, 190, 251, 217, 153, 62, 204, 77, 34, 62, 252, 138, 151, 60, 108, 245, 195, 189, 111, 30, 47, 190, 93, 2, 62, 189, 88, 84, 35, 62, 149, 25, 106, 189, 109, 196, 66, 190, 180, 38, 163, 189, 36, 153, 146, 187, 208, 234, 99, 61, 186, 234, 152, 59, 34, 121, 197, 188, 117, 118, 146, 61, 27, 23, 49, 62, 20, 94, 231, 189, 1, 164, 164, 62, 107, 33, 148, 62, 133, 36, 16, 60, 9, 38, 196, 59, 90, 8, 49, 61, 42, 75, 138, 61, 200, 133, 16, 189, 108, 194, 23, 62, 60, 36, 134, 188, 236, 14, 61, 190, 207, 93, 142, 189, 160, 138, 8, 62, 104, 169, 238, 61, 238, 57, 137, 61, 150, 25, 116, 62, 44, 186, 129, 61, 183, 101, 45, 62, 92, 85, 37, 190, 246, 254, 186, 188, 99, 172, 102, 62, 81, 66, 194, 190, 208, 46, 130, 61, 149, 147, 137, 191, 42, 171, 78, 191, 211, 78, 201, 62, 52, 197, 39, 189, 230, 236, 110, 190, 56, 250, 84, 61, 74, 79, 122, 190, 201, 67, 147, 190, 134, 249, 29, 187, 186, 237, 83, 189, 57, 109, 245, 189, 88, 18, 4, 63, 206, 113, 136, 190, 76, 230, 54, 62, 193, 131, 119, 62, 173, 38, 180, 62, 228, 101, 162, 190, 78, 48, 117, 190, 134, 26, 240, 188, 141, 104, 194, 61, 47, 123, 176, 62, 249, 231, 58, 191, 176, 214, 160, 59, 234, 109, 228, 190, 161, 30, 137, 190, 108, 225, 46, 191, 59, 3, 62, 190, 248, 64, 144, 190, 102, 110, 21, 190, 231, 79, 4, 188, 38, 75, 165, 62, 71, 233, 19, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 34, 123, 227, 189, 3, 57, 21, 190, 135, 33, 161, 60, 217, 152, 189, 189, 6, 240, 236, 188, 54, 90, 208, 62, 126, 54, 146, 190, 17, 10, 93, 190, 190, 16, 142, 62, 16, 159, 46, 191, 207, 231, 88, 189, 35, 209, 158, 62, 41, 203, 117, 61, 44, 219, 34, 62, 52, 52, 136, 62, 190, 229, 84, 61, 105, 4, 57, 190, 50, 24, 175, 61, 218, 212, 206, 60, 24, 48, 41, 191, 84, 228, 176, 189, 48, 83, 159, 62, 56, 137, 157, 62, 249, 127, 203, 189, 220, 187, 255, 190, 92, 74, 39, 59, 161, 247, 111, 189, 70, 223, 2, 62, 82, 115, 11, 191, 136, 234, 13, 62, 135, 58, 3, 191, 6, 78, 249, 61, 107, 84, 117, 189, 128, 1, 25, 190, 9, 215, 100, 62, 216, 199, 135, 187, 146, 148, 134, 190, 221, 92, 57, 62, 137, 100, 59, 62, 61, 91, 232, 61, 135, 189, 9, 190, 190, 139, 159, 62, 47, 96, 124, 62, 70, 209, 110, 62, 97, 133, 177, 190, 196, 91, 108, 62, 162, 220, 91, 189, 170, 112, 184, 61, 242, 47, 122, 190, 103, 213, 154, 62, 19, 74, 243, 61, 2, 246, 151, 190, 201, 224, 16, 62, 31, 243, 140, 61, 25, 154, 27, 62, 246, 226, 169, 190, 232, 225, 133, 190, 177, 207, 129, 60, 207, 166, 71, 61, 38, 197, 54, 190, 57, 129, 23, 190, 204, 212, 93, 62, 160, 23, 237, 61, 84, 9, 145, 60, 28, 12, 61, 190, 98, 6, 208, 189, 27, 125, 200, 189, 205, 178, 98, 62, 45, 255, 64, 61, 146, 244, 26, 190, 168, 134, 158, 190, 190, 52, 23, 62, 10, 165, 78, 62, 7, 104, 30, 191, 70, 20, 173, 61, 44, 240, 104, 190, 24, 102, 216, 61, 88, 198, 37, 62, 198, 92, 10, 189, 198, 3, 138, 188, 222, 74, 72, 62, 30, 142, 78, 61, 55, 74, 71, 61, 61, 153, 93, 190, 200, 72, 44, 190, 35, 19, 8, 63, 5, 204, 15, 190, 224, 64, 213, 61, 222, 26, 167, 62, 9, 184, 130, 61, 246, 225, 1, 190, 217, 132, 150, 61, 197, 17, 214, 61, 152, 100, 62, 62, 180, 125, 228, 190, 125, 62, 174, 62, 14, 186, 133, 190, 122, 201, 219, 61, 46, 254, 144, 190, 241, 6, 253, 61, 64, 247, 134, 188, 15, 105, 27, 60, 46, 146, 11, 191, 36, 124, 116, 62, 164, 249, 61, 63, 81, 104, 4, 191, 154, 87, 189, 62, 227, 254, 127, 190, 57, 76, 227, 62, 26, 207, 20, 59, 149, 144, 142, 61, 53, 92, 138, 190, 208, 177, 146, 60, 149, 78, 96, 62, 121, 222, 214, 61, 118, 66, 57, 189, 91, 79, 162, 190, 67, 85, 198, 62, 52, 153, 113, 187, 147, 123, 25, 63, 170, 35, 216, 61, 146, 104, 250, 188, 154, 110, 115, 62, 189, 82, 211, 61, 113, 190, 98, 59, 127, 149, 100, 62, 147, 175, 202, 190, 249, 36, 227, 62, 86, 126, 15, 191, 174, 174, 4, 191, 238, 188, 87, 62, 57, 56, 91, 188, 85, 89, 106, 190, 231, 28, 56, 62, 126, 133, 101, 62, 158, 228, 27, 189, 85, 146, 37, 191, 17, 225, 94, 62, 109, 102, 21, 62, 148, 135, 238, 61, 253, 214, 193, 191, 29, 14, 245, 189, 137, 83, 123, 190, 137, 118, 115, 62, 71, 184, 135, 191, 91, 152, 0, 62, 15, 180, 84, 190, 176, 41, 183, 190, 77, 112, 159, 61, 37, 102, 122, 190, 2, 212, 106, 62, 245, 120, 80, 190, 248, 244, 241, 190, 104, 155, 150, 190, 41, 149, 21, 62, 97, 68, 249, 189, 137, 99, 187, 191, 31, 46, 153, 62, 201, 80, 91, 62, 37, 241, 16, 190, 29, 92, 29, 190, 15, 181, 22, 189, 89, 34, 151, 61, 247, 139, 221, 60, 254, 178, 38, 190, 212, 159, 23, 188, 4, 254, 113, 190, 248, 158, 89, 62, 211, 233, 165, 62, 189, 132, 207, 190, 40, 1, 116, 62, 164, 13, 152, 190, 184, 133, 199, 189, 247, 139, 81, 62, 238, 44, 130, 190, 78, 207, 235, 188, 11, 39, 68, 61, 2, 150, 50, 62, 220, 99, 143, 62, 84, 175, 46, 190, 138, 248, 12, 61, 71, 83, 83, 62, 228, 29, 3, 62, 153, 116, 157, 61, 151, 63, 201, 62, 141, 120, 139, 61, 113, 182, 98, 62, 89, 230, 222, 61, 104, 203, 158, 60, 69, 164, 51, 62, 189, 77, 250, 190, 52, 124, 48, 62, 6, 85, 42, 191, 106, 75, 132, 191, 205, 249, 172, 62, 93, 94, 70, 191, 128, 148, 236, 190, 113, 222, 157, 62, 209, 167, 152, 62, 35, 110, 236, 190, 95, 201, 12, 191, 12, 33, 15, 63, 60, 209, 87, 60, 19, 209, 82, 190, 76, 220, 55, 191, 35, 22, 106, 61, 172, 179, 6, 189, 223, 32, 235, 62, 48, 201, 172, 190, 16, 162, 186, 61, 114, 219, 37, 62, 221, 114, 126, 190, 101, 68, 171, 62, 92, 178, 83, 61, 179, 190, 181, 62, 42, 176, 146, 191, 148, 195, 40, 61, 135, 158, 192, 190, 16, 198, 243, 190, 124, 232, 219, 190, 197, 238, 18, 191, 26, 190, 7, 62, 241, 185, 95, 191, 163, 110, 37, 190, 195, 39, 45, 191, 214, 64, 52, 190, 251, 80, 40, 62, 165, 178, 114, 189, 178, 37, 179, 189, 54, 13, 207, 60, 243, 230, 59, 62, 43, 42, 172, 191, 120, 87, 235, 188, 14, 219, 232, 187, 54, 14, 157, 190, 234, 56, 192, 189, 189, 206, 216, 61, 160, 145, 235, 189, 225, 69, 116, 61, 71, 150, 139, 189, 59, 153, 236, 190, 236, 28, 42, 190, 34, 5, 48, 61, 215, 144, 57, 61, 45, 135, 84, 61, 22, 239, 176, 62, 100, 237, 55, 61, 18, 82, 26, 191, 195, 169, 25, 62, 202, 197, 0, 190, 86, 226, 118, 191, 71, 92, 28, 61, 177, 95, 163, 189, 152, 101, 160, 190, 77, 159, 16, 188, 86, 239, 225, 61, 120, 179, 23, 191, 66, 146, 78, 191, 40, 6, 94, 61, 116, 213, 20, 61, 195, 37, 37, 61, 140, 43, 96, 62, 108, 92, 202, 61, 97, 164, 156, 62, 41, 216, 17, 191, 174, 125, 133, 62, 196, 45, 224, 62, 230, 53, 130, 190, 199, 249, 183, 191, 5, 112, 49, 61, 214, 183, 122, 189, 209, 27, 117, 62, 218, 54, 26, 62, 13, 242, 181, 62, 16, 13, 53, 62, 154, 223, 10, 190, 28, 11, 73, 189, 153, 41, 196, 61, 144, 149, 25, 62, 133, 24, 51, 63, 191, 180, 96, 62, 171, 71, 147, 190, 161, 92, 26, 62, 145, 104, 191, 62, 94, 80, 17, 190, 96, 246, 91, 188, 215, 63, 236, 189, 245, 73, 58, 62, 212, 245, 164, 190, 51, 19, 134, 190, 199, 51, 187, 61, 155, 134, 10, 62, 243, 16, 88, 189, 193, 1, 75, 62, 58, 170, 69, 188, 3, 208, 136, 190, 233, 121, 77, 189, 170, 225, 1, 191, 10, 61, 165, 60, 97, 142, 161, 189, 127, 175, 49, 190, 50, 87, 129, 188, 82, 37, 11, 188, 67, 221, 96, 190, 213, 73, 23, 62, 179, 242, 161, 189, 18, 174, 82, 62, 229, 103, 46, 190, 136, 208, 184, 188, 159, 61, 98, 62, 47, 125, 238, 61, 81, 25, 26, 62, 77, 116, 192, 62, 219, 21, 144, 62, 213, 131, 163, 190, 57, 11, 17, 61, 86, 224, 156, 189, 220, 156, 151, 62, 8, 3, 51, 190, 241, 60, 101, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 44, 47, 170, 61, 210, 95, 191, 190, 69, 97, 236, 189, 212, 21, 189, 60, 174, 225, 44, 189, 55, 124, 95, 62, 64, 161, 88, 190, 206, 209, 157, 189, 33, 118, 122, 190, 43, 110, 87, 62, 219, 171, 87, 187, 202, 113, 11, 191, 191, 68, 5, 190, 255, 224, 187, 62, 178, 84, 179, 61, 145, 24, 104, 190, 249, 201, 90, 62, 215, 10, 81, 190, 12, 99, 194, 61, 232, 183, 172, 189, 87, 229, 150, 189, 116, 175, 19, 61, 200, 84, 15, 191, 232, 48, 204, 190, 181, 9, 217, 62, 53, 96, 229, 190, 15, 144, 55, 190, 254, 61, 165, 190, 55, 60, 33, 62, 127, 205, 45, 61, 116, 180, 132, 62, 129, 66, 89, 62, 144, 75, 107, 62, 175, 180, 97, 189, 145, 147, 138, 62, 109, 198, 39, 190, 187, 212, 189, 188, 254, 165, 33, 62, 253, 14, 206, 62, 190, 183, 38, 190, 196, 226, 84, 191, 107, 44, 242, 62, 46, 55, 37, 190, 218, 150, 136, 62, 183, 80, 152, 189, 92, 251, 235, 59, 185, 220, 45, 61, 139, 222, 34, 62, 140, 247, 136, 189, 128, 34, 132, 190, 252, 230, 73, 62, 33, 140, 66, 60, 15, 102, 92, 62, 120, 236, 228, 190, 167, 161, 79, 61, 60, 36, 189, 190, 117, 99, 25, 190, 170, 185, 39, 62, 194, 63, 253, 187, 138, 212, 207, 61, 206, 34, 185, 189, 234, 5, 49, 190, 182, 46, 103, 62, 206, 36, 42, 190, 236, 151, 148, 189, 214, 193, 24, 190, 203, 29, 202, 61, 180, 182, 143, 190, 6, 68, 24, 190, 96, 43, 222, 61, 152, 6, 160, 62, 98, 9, 157, 190, 141, 171, 147, 191, 199, 235, 249, 62, 212, 240, 241, 189, 252, 88, 70, 61, 82, 132, 100, 191, 227, 96, 20, 190, 44, 84, 1, 62, 113, 144, 175, 62, 13, 81, 2, 190, 9, 179, 104, 62, 99, 128, 124, 190, 31, 115, 146, 189, 48, 201, 193, 62, 81, 97, 13, 190, 8, 49, 193, 62, 166, 99, 135, 190, 145, 81, 14, 191, 155, 72, 121, 188, 76, 39, 218, 61, 118, 178, 134, 190, 199, 176, 240, 189, 32, 150, 152, 61, 169, 156, 168, 62, 134, 215, 211, 190, 193, 154, 187, 189, 210, 134, 37, 62, 226, 101, 113, 190, 116, 99, 196, 61, 195, 115, 4, 62, 210, 66, 154, 62, 97, 68, 23, 191, 204, 183, 16, 190, 65, 195, 16, 63, 90, 30, 25, 191, 208, 155, 35, 190, 38, 91, 158, 189, 150, 72, 106, 62, 198, 68, 16, 189, 2, 30, 174, 62, 205, 119, 138, 60, 184, 68, 34, 190, 34, 149, 53, 61, 195, 80, 148, 190, 121, 104, 180, 61, 239, 77, 20, 190, 191, 62, 185, 62, 185, 171, 18, 62, 180, 92, 53, 62, 79, 156, 246, 189, 106, 85, 128, 188, 31, 89, 128, 188, 50, 249, 173, 189, 14, 117, 15, 62, 94, 69, 248, 187, 26, 122, 22, 62, 29, 109, 191, 61, 173, 239, 46, 190, 241, 165, 202, 61, 97, 219, 255, 189, 209, 245, 144, 189, 93, 133, 164, 62, 148, 252, 221, 189, 122, 95, 111, 189, 143, 27, 94, 188, 91, 83, 66, 62, 36, 69, 174, 190, 117, 118, 241, 60, 247, 53, 193, 190, 233, 98, 44, 62, 211, 45, 209, 61, 233, 100, 185, 189, 113, 126, 82, 190, 228, 186, 62, 62, 164, 133, 162, 62, 196, 17, 233, 61, 126, 251, 2, 62, 186, 175, 96, 189, 65, 72, 132, 62, 41, 242, 153, 61, 108, 172, 56, 189, 130, 175, 182, 62, 149, 39, 12, 187, 60, 79, 163, 190, 150, 141, 75, 62, 229, 208, 92, 62, 32, 161, 132, 189, 123, 151, 190, 190, 198, 62, 136, 62, 138, 22, 112, 62, 206, 106, 13, 62, 170, 19, 23, 62, 169, 202, 14, 190, 202, 28, 130, 189, 16, 166, 34, 62, 160, 216, 198, 62, 237, 18, 130, 188, 140, 148, 252, 190, 115, 225, 231, 62, 252, 78, 46, 60, 60, 30, 150, 62, 149, 205, 77, 189, 183, 49, 86, 62, 30, 116, 45, 190, 207, 17, 39, 62, 87, 200, 213, 190, 121, 161, 107, 189, 18, 215, 133, 62, 79, 246, 252, 190, 204, 10, 39, 62, 224, 53, 244, 188, 10, 69, 58, 62, 184, 216, 243, 190, 135, 44, 63, 189, 82, 206, 17, 62, 228, 29, 186, 59, 213, 209, 51, 189, 211, 35, 95, 191, 175, 237, 144, 189, 232, 46, 85, 191, 4, 209, 156, 189, 120, 105, 62, 191, 139, 243, 173, 190, 29, 185, 118, 190, 33, 18, 0, 63, 246, 198, 153, 62, 192, 245, 21, 191, 234, 20, 110, 191, 86, 169, 27, 62, 5, 60, 124, 190, 83, 148, 38, 191, 8, 188, 139, 61, 196, 198, 175, 190, 23, 68, 150, 61, 0, 199, 55, 62, 247, 29, 12, 191, 164, 119, 243, 190, 173, 212, 14, 191, 54, 193, 23, 190, 247, 153, 140, 62, 108, 238, 187, 191, 240, 231, 16, 190, 171, 14, 12, 191, 31, 76, 203, 188, 183, 33, 19, 63, 202, 105, 57, 61, 165, 94, 80, 191, 198, 28, 9, 63, 224, 245, 213, 61, 169, 45, 80, 62, 196, 172, 157, 62, 20, 127, 36, 191, 216, 105, 197, 190, 60, 8, 223, 60, 252, 185, 35, 190, 37, 26, 115, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 168, 151, 26, 190, 204, 209, 93, 189, 180, 121, 50, 60, 27, 234, 106, 189, 213, 87, 35, 190, 97, 70, 237, 61, 243, 154, 215, 189, 107, 242, 2, 62, 240, 147, 11, 190, 31, 181, 146, 188, 201, 86, 126, 61, 185, 19, 193, 189, 233, 195, 239, 61, 56, 127, 21, 62, 44, 10, 44, 190, 124, 206, 148, 61, 129, 37, 152, 188, 145, 226, 35, 62, 157, 68, 41, 190, 200, 0, 148, 189, 92, 111, 250, 61, 75, 136, 246, 187, 101, 33, 112, 189, 59, 25, 205, 189, 177, 64, 19, 62, 128, 189, 190, 189, 145, 230, 82, 188, 52, 173, 209, 189, 56, 18, 192, 61, 12, 61, 237, 61, 233, 186, 41, 62, 98, 180, 245, 61, 197, 11, 42, 62, 151, 122, 61, 62, 54, 73, 231, 62, 232, 168, 188, 62, 98, 25, 77, 62, 141, 94, 41, 62, 86, 114, 206, 61, 140, 172, 23, 190, 47, 133, 243, 61, 78, 15, 159, 61, 48, 10, 76, 59, 131, 53, 42, 62, 87, 223, 93, 190, 228, 225, 164, 61, 59, 105, 119, 61, 181, 153, 4, 190, 118, 179, 209, 61, 51, 187, 194, 62, 212, 133, 185, 190, 40, 205, 33, 190, 56, 188, 39, 190, 14, 81, 141, 61, 61, 13, 201, 189, 209, 6, 7, 191, 134, 104, 184, 62, 227, 210, 251, 61, 150, 132, 127, 61, 50, 134, 52, 190, 21, 60, 167, 61, 106, 99, 75, 190, 119, 36, 77, 190, 156, 84, 67, 61, 128, 12, 146, 62, 88, 54, 145, 61, 227, 164, 2, 191, 57, 33, 14, 63, 174, 201, 25, 190, 156, 186, 146, 62, 201, 213, 23, 191, 135, 203, 216, 189, 226, 119, 91, 62, 132, 155, 92, 62, 249, 205, 146, 190, 42, 98, 46, 190, 85, 190, 89, 190, 81, 114, 95, 62, 30, 115, 104, 62, 32, 44, 35, 62, 9, 146, 202, 62, 173, 40, 47, 191, 35, 230, 34, 191, 194, 207, 163, 189, 129, 121, 62, 61, 237, 139, 10, 190, 91, 241, 251, 190, 101, 114, 156, 62, 150, 87, 185, 62, 5, 218, 128, 190, 1, 161, 53, 191, 53, 54, 184, 62, 25, 177, 206, 190, 203, 7, 4, 63, 156, 91, 237, 62, 106, 29, 156, 190, 7, 67, 39, 191, 237, 34, 19, 62, 190, 144, 55, 63, 0, 128, 34, 191, 81, 89, 42, 61, 111, 125, 88, 191, 242, 124, 151, 62, 196, 16, 200, 62, 102, 83, 211, 189, 154, 178, 73, 191, 198, 7, 28, 62, 105, 249, 33, 61, 164, 34, 103, 62, 234, 123, 155, 190, 2, 195, 191, 190, 193, 13, 162, 62, 97, 75, 30, 191, 186, 212, 236, 190, 87, 34, 232, 62, 74, 215, 194, 61, 169, 6, 112, 62, 209, 145, 48, 62, 212, 88, 240, 61, 194, 83, 123, 62, 141, 53, 26, 191, 156, 104, 24, 63, 206, 106, 50, 191, 242, 190, 132, 191, 158, 12, 52, 190, 204, 168, 5, 62, 231, 250, 100, 190, 65, 202, 41, 62, 13, 205, 128, 62, 183, 21, 18, 189, 43, 250, 231, 190, 203, 149, 167, 62, 26, 130, 169, 62, 24, 40, 86, 61, 176, 155, 54, 191, 62, 183, 241, 60, 139, 177, 235, 60, 85, 125, 149, 189, 181, 210, 186, 61, 150, 45, 26, 62, 131, 241, 133, 189, 72, 24, 1, 62, 109, 105, 181, 189, 176, 14, 226, 61, 71, 39, 195, 62, 131, 75, 129, 190, 148, 200, 108, 190, 8, 116, 143, 190, 84, 189, 51, 60, 100, 34, 47, 189, 139, 49, 71, 190, 18, 162, 164, 189, 193, 19, 197, 189, 179, 178, 208, 61, 34, 134, 88, 189, 156, 118, 212, 62, 204, 144, 240, 190, 143, 203, 182, 188, 231, 164, 51, 188, 30, 47, 217, 189, 31, 255, 104, 190, 149, 37, 227, 62, 30, 61, 223, 189, 15, 59, 235, 190, 255, 201, 68, 62, 10, 210, 180, 189, 197, 34, 196, 62, 62, 174, 25, 62, 72, 118, 118, 61, 255, 38, 11, 191, 130, 64, 133, 189, 178, 13, 182, 62, 105, 155, 132, 62, 46, 84, 68, 60, 116, 200, 188, 190, 225, 175, 174, 61, 7, 43, 169, 188, 72, 93, 104, 63, 55, 80, 13, 62, 94, 49, 148, 62, 55, 198, 72, 62, 109, 237, 70, 190, 63, 183, 143, 61, 113, 40, 235, 61, 48, 209, 77, 191, 134, 113, 29, 190, 46, 226, 185, 61, 20, 103, 194, 62, 159, 211, 143, 189, 205, 130, 95, 190, 66, 104, 122, 57, 120, 127, 248, 189, 75, 50, 41, 191, 27, 59, 142, 190, 143, 116, 201, 62, 101, 0, 74, 191, 138, 163, 199, 190, 150, 123, 157, 187, 232, 129, 38, 62, 90, 23, 144, 61, 187, 75, 3, 62, 167, 110, 194, 61, 19, 180, 4, 190, 19, 43, 1, 189, 209, 179, 10, 62, 135, 25, 163, 189, 66, 8, 135, 61, 96, 65, 198, 62, 138, 240, 170, 189, 198, 157, 158, 190, 77, 183, 13, 61, 19, 172, 244, 61, 24, 65, 226, 190, 157, 167, 235, 61, 179, 202, 192, 189, 19, 92, 81, 190, 141, 183, 195, 190, 58, 93, 104, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 236, 9, 190, 210, 9, 191, 187, 138, 62, 177, 60, 208, 197, 48, 61, 192, 173, 161, 62, 4, 51, 54, 188, 0, 69, 26, 190, 111, 20, 154, 61, 154, 96, 155, 62, 97, 226, 24, 190, 98, 5, 9, 190, 173, 229, 176, 62, 123, 222, 9, 62, 187, 157, 226, 61, 157, 34, 41, 61, 253, 95, 228, 61, 8, 209, 118, 62, 192, 0, 29, 62, 99, 213, 200, 189, 74, 251, 177, 189, 113, 254, 123, 61, 116, 47, 36, 190, 129, 148, 157, 62, 12, 204, 236, 61, 101, 212, 160, 62, 197, 222, 118, 189, 5, 234, 38, 60, 115, 189, 248, 61, 123, 253, 145, 62, 95, 103, 85, 62, 200, 79, 129, 62, 36, 137, 114, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 119, 148, 191, 185, 222, 128, 191, 149, 120, 110, 62, 242, 78, 4, 191, 130, 42, 255, 188, 141, 193, 128, 63, 179, 160, 24, 189, 154, 200, 17, 190, 52, 75, 176, 188, 37, 1, 169, 189, 194, 143, 24, 191, 14, 208, 205, 63, 224, 153, 145, 188, 39, 223, 157, 63, 0, 89, 123, 190, 153, 198, 176, 62, 56, 154, 112, 189, 104, 189, 10, 190, 150, 78, 198, 62, 150, 54, 174, 62, 23, 136, 33, 63, 57, 215, 45, 190, 238, 136, 34, 190, 181, 20, 143, 62, 236, 176, 172, 191, 102, 101, 44, 189, 25, 212, 118, 190, 210, 81, 10, 63, 237, 143, 240, 190, 192, 182, 93, 62, 32, 16, 52, 191, 213, 50, 149, 62, 64, 86, 156, 62, 162, 36, 183, 61, 231, 254, 142, 61, 102, 48, 128, 188, 92, 32, 81, 190, 230, 248, 98, 62, 230, 137, 44, 62, 11, 252, 156, 190, 2, 211, 146, 190, 196, 182, 20, 190, 77, 7, 99, 62, 161, 243, 44, 63, 152, 40, 80, 190, 23, 165, 129, 62, 43, 170, 155, 190, 249, 233, 130, 190, 94, 46, 181, 190, 177, 188, 176, 188, 199, 164, 147, 61, 36, 152, 172, 62, 230, 125, 156, 62, 124, 228, 84, 62, 90, 31, 44, 190, 169, 189, 109, 190, 88, 72, 194, 62, 20, 91, 21, 190, 174, 156, 239, 59, 92, 107, 192, 189, 190, 82, 211, 62, 187, 204, 139, 190, 99, 33, 153, 62, 16, 81, 16, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 176, 244, 189, 78, 74, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 250, 237, 63, 213, 95, 147, 63, 160, 208, 142, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 203, 169, 192, 196, 200, 54, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}