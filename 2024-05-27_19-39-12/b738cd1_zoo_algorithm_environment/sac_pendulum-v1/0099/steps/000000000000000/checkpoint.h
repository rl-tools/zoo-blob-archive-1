// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 176, 204, 190, 240, 37, 143, 61, 89, 204, 215, 62, 217, 17, 234, 62, 23, 194, 113, 62, 17, 124, 228, 62, 226, 63, 17, 189, 202, 29, 49, 190, 168, 140, 2, 63, 125, 96, 74, 189, 248, 229, 53, 190, 117, 240, 10, 63, 192, 132, 159, 62, 232, 85, 59, 190, 34, 212, 89, 62, 158, 155, 81, 62, 15, 26, 235, 62, 20, 230, 6, 191, 174, 15, 100, 62, 12, 112, 179, 190, 142, 165, 255, 189, 240, 54, 225, 190, 92, 81, 10, 191, 93, 167, 165, 190, 37, 180, 145, 62, 209, 216, 255, 61, 169, 53, 191, 62, 27, 199, 38, 62, 189, 69, 234, 190, 241, 45, 32, 61, 38, 212, 144, 190, 148, 81, 138, 190, 131, 104, 66, 190, 232, 207, 136, 190, 45, 245, 198, 190, 154, 132, 10, 189, 242, 226, 38, 62, 153, 190, 48, 62, 247, 128, 161, 62, 197, 62, 48, 188, 255, 37, 252, 62, 162, 54, 50, 62, 154, 10, 157, 62, 40, 201, 248, 62, 181, 30, 3, 191, 128, 167, 97, 189, 116, 195, 24, 62, 30, 110, 238, 62, 9, 255, 241, 189, 249, 83, 7, 62, 43, 70, 252, 190, 56, 233, 19, 190, 166, 204, 253, 190, 254, 221, 202, 189, 197, 211, 11, 190, 164, 85, 12, 63, 132, 13, 131, 189, 175, 81, 17, 191, 67, 20, 206, 190, 85, 193, 13, 191, 100, 207, 44, 61, 64, 50, 205, 61, 154, 71, 204, 62, 17, 78, 6, 63, 199, 201, 16, 62, 111, 220, 66, 61, 16, 49, 211, 62, 163, 112, 85, 190, 140, 75, 28, 62, 168, 30, 76, 190, 129, 196, 229, 190, 60, 31, 232, 61, 23, 75, 206, 190, 114, 61, 255, 62, 180, 163, 58, 61, 13, 122, 172, 62, 255, 203, 130, 62, 112, 188, 196, 62, 18, 197, 197, 190, 10, 96, 153, 190, 111, 32, 102, 190, 57, 191, 205, 62, 132, 160, 42, 61, 234, 169, 194, 62, 193, 0, 252, 190, 82, 143, 142, 188, 36, 5, 175, 190, 147, 238, 132, 190, 220, 44, 9, 189, 242, 43, 7, 191, 183, 202, 66, 189, 163, 135, 108, 190, 137, 33, 167, 189, 1, 120, 14, 63, 80, 74, 171, 62, 63, 42, 17, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 146, 19, 191, 158, 0, 132, 190, 162, 1, 254, 62, 12, 136, 238, 190, 167, 166, 227, 190, 243, 248, 146, 62, 131, 249, 9, 62, 164, 84, 236, 61, 169, 148, 150, 190, 4, 156, 139, 190, 157, 20, 113, 62, 253, 210, 205, 190, 103, 99, 135, 190, 191, 6, 164, 62, 217, 106, 51, 62, 71, 19, 36, 189, 96, 42, 66, 62, 159, 108, 163, 62, 162, 39, 118, 62, 245, 170, 237, 190, 135, 143, 166, 62, 252, 248, 191, 62, 194, 198, 3, 63, 201, 148, 235, 190, 56, 150, 172, 190, 108, 54, 136, 62, 3, 90, 23, 190, 97, 26, 130, 189, 78, 211, 68, 189, 248, 237, 12, 63, 209, 13, 237, 190, 235, 218, 93, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 225, 183, 61, 172, 35, 144, 61, 80, 249, 212, 189, 142, 227, 40, 190, 252, 71, 4, 190, 161, 246, 235, 60, 226, 85, 197, 61, 203, 164, 43, 62, 181, 104, 183, 61, 20, 84, 158, 61, 142, 186, 166, 60, 85, 22, 49, 190, 77, 209, 108, 60, 131, 250, 37, 61, 142, 50, 228, 61, 185, 114, 117, 189, 110, 94, 8, 62, 237, 69, 230, 189, 243, 194, 106, 187, 5, 18, 208, 189, 4, 123, 254, 61, 250, 100, 12, 189, 250, 94, 13, 190, 214, 70, 21, 61, 160, 58, 44, 62, 201, 218, 25, 62, 90, 143, 26, 62, 117, 242, 119, 61, 9, 161, 7, 190, 249, 184, 243, 189, 174, 135, 139, 189, 232, 195, 205, 61, 140, 48, 28, 62, 237, 96, 125, 189, 166, 99, 244, 61, 73, 221, 240, 189, 59, 217, 88, 61, 72, 179, 215, 189, 231, 15, 180, 61, 173, 175, 41, 190, 106, 253, 9, 190, 206, 201, 187, 60, 171, 166, 204, 189, 180, 216, 202, 189, 160, 131, 14, 190, 240, 98, 68, 60, 114, 169, 140, 189, 131, 105, 125, 59, 144, 185, 133, 189, 118, 255, 49, 60, 161, 202, 35, 62, 23, 125, 195, 189, 47, 207, 14, 62, 148, 204, 240, 189, 255, 217, 242, 189, 26, 225, 15, 60, 239, 66, 38, 62, 199, 252, 13, 62, 235, 120, 48, 190, 212, 227, 21, 190, 115, 81, 7, 190, 236, 108, 10, 61, 181, 195, 38, 190, 158, 120, 185, 61, 28, 124, 199, 189, 41, 131, 3, 190, 81, 188, 163, 189, 59, 198, 28, 62, 207, 74, 47, 188, 220, 31, 16, 62, 159, 66, 202, 189, 204, 89, 155, 61, 89, 118, 169, 188, 108, 13, 7, 190, 100, 67, 28, 62, 119, 164, 175, 61, 251, 188, 163, 188, 157, 202, 98, 189, 209, 176, 12, 189, 149, 152, 120, 61, 136, 189, 98, 61, 166, 158, 51, 190, 103, 226, 43, 62, 34, 93, 26, 62, 64, 10, 186, 60, 210, 240, 26, 190, 67, 92, 94, 61, 94, 203, 237, 189, 45, 41, 20, 62, 94, 82, 21, 61, 170, 116, 233, 185, 223, 228, 114, 189, 69, 155, 224, 59, 236, 120, 100, 189, 244, 193, 14, 62, 45, 252, 193, 61, 67, 230, 36, 62, 5, 157, 108, 61, 245, 165, 255, 60, 211, 87, 52, 190, 41, 77, 24, 189, 11, 224, 23, 62, 216, 112, 40, 190, 122, 240, 29, 62, 24, 20, 154, 60, 64, 53, 20, 61, 35, 33, 212, 60, 102, 67, 69, 188, 251, 32, 253, 189, 106, 21, 43, 62, 15, 82, 183, 61, 253, 238, 110, 61, 210, 29, 183, 59, 238, 13, 252, 189, 238, 9, 21, 62, 204, 23, 74, 189, 146, 87, 35, 190, 202, 141, 67, 61, 252, 121, 31, 190, 54, 50, 21, 190, 78, 167, 110, 189, 66, 18, 169, 61, 174, 62, 23, 62, 213, 55, 197, 61, 221, 111, 181, 189, 96, 172, 32, 190, 123, 178, 23, 60, 221, 158, 77, 61, 1, 62, 6, 62, 55, 174, 130, 188, 232, 56, 236, 189, 213, 28, 16, 189, 165, 132, 37, 62, 242, 56, 38, 189, 37, 114, 82, 189, 71, 157, 14, 190, 127, 106, 10, 62, 119, 169, 205, 189, 59, 72, 184, 61, 245, 183, 47, 62, 8, 151, 24, 62, 224, 252, 204, 189, 217, 189, 11, 189, 147, 25, 135, 61, 18, 86, 36, 189, 201, 237, 183, 189, 150, 239, 205, 189, 161, 134, 21, 189, 233, 93, 5, 190, 142, 250, 229, 189, 215, 123, 127, 189, 174, 245, 8, 189, 85, 26, 43, 62, 146, 178, 82, 61, 166, 160, 227, 61, 20, 115, 16, 190, 58, 39, 136, 61, 78, 232, 242, 61, 47, 194, 197, 61, 91, 169, 212, 61, 199, 219, 74, 189, 215, 122, 243, 189, 179, 174, 31, 62, 41, 173, 35, 188, 145, 223, 17, 61, 178, 86, 5, 188, 117, 250, 51, 61, 73, 33, 149, 189, 43, 170, 35, 62, 177, 95, 99, 189, 88, 161, 80, 61, 202, 232, 232, 61, 228, 95, 145, 61, 28, 198, 8, 62, 131, 6, 47, 62, 245, 115, 176, 61, 6, 230, 175, 189, 250, 170, 34, 61, 105, 167, 29, 189, 161, 107, 216, 61, 250, 240, 40, 62, 6, 149, 145, 189, 204, 137, 141, 189, 226, 213, 239, 189, 158, 92, 60, 60, 41, 217, 44, 190, 207, 38, 123, 189, 195, 236, 132, 61, 84, 177, 16, 62, 206, 224, 17, 61, 146, 112, 64, 60, 6, 118, 0, 62, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 36, 117, 25, 62, 199, 17, 229, 186, 199, 226, 228, 188, 35, 88, 146, 189, 239, 152, 36, 61, 103, 50, 206, 61, 70, 162, 105, 61, 163, 225, 49, 190, 126, 252, 122, 61, 233, 97, 20, 189, 103, 99, 13, 189, 157, 175, 217, 60, 22, 39, 152, 61, 164, 41, 211, 189, 230, 231, 25, 190, 8, 49, 141, 61, 99, 165, 204, 61, 215, 69, 109, 61, 40, 187, 186, 189, 247, 54, 238, 189, 6, 9, 251, 189, 20, 180, 196, 60, 176, 87, 35, 62, 33, 177, 36, 189, 106, 86, 10, 190, 63, 22, 216, 188, 47, 40, 200, 60, 159, 2, 50, 62, 72, 242, 138, 189, 208, 3, 118, 189, 231, 100, 145, 189, 156, 42, 115, 61, 43, 76, 66, 61, 141, 136, 246, 187, 93, 221, 251, 61, 249, 239, 133, 61, 189, 134, 13, 189, 158, 75, 43, 62, 51, 52, 239, 60, 254, 217, 222, 60, 17, 199, 134, 61, 9, 191, 18, 62, 41, 101, 28, 62, 134, 141, 4, 62, 39, 143, 42, 190, 247, 253, 6, 61, 58, 195, 223, 189, 161, 136, 31, 61, 50, 231, 46, 190, 168, 101, 29, 62, 253, 43, 46, 189, 217, 66, 18, 190, 116, 248, 254, 60, 223, 54, 28, 190, 37, 126, 33, 60, 217, 8, 30, 190, 54, 26, 43, 190, 233, 7, 51, 189, 154, 106, 146, 61, 253, 51, 31, 190, 229, 13, 203, 61, 187, 137, 156, 61, 61, 154, 52, 62, 184, 182, 87, 61, 215, 120, 8, 61, 231, 216, 62, 189, 82, 156, 184, 60, 233, 0, 201, 61, 118, 220, 10, 190, 61, 123, 10, 190, 145, 58, 179, 61, 204, 87, 136, 61, 148, 193, 188, 189, 104, 7, 242, 189, 175, 181, 44, 61, 107, 175, 29, 62, 69, 171, 184, 61, 222, 104, 40, 62, 231, 220, 41, 61, 61, 82, 15, 62, 165, 215, 28, 62, 161, 114, 55, 61, 116, 55, 170, 60, 44, 133, 180, 189, 228, 32, 110, 189, 106, 49, 237, 61, 149, 70, 5, 190, 204, 70, 253, 188, 38, 23, 189, 61, 30, 22, 7, 61, 36, 204, 154, 189, 90, 176, 12, 189, 31, 98, 139, 61, 41, 149, 224, 61, 239, 139, 216, 188, 76, 84, 17, 62, 230, 89, 192, 188, 210, 86, 141, 189, 105, 3, 211, 61, 184, 175, 111, 188, 193, 171, 30, 190, 53, 87, 166, 187, 205, 254, 227, 189, 56, 207, 71, 189, 246, 208, 145, 60, 254, 130, 99, 61, 81, 44, 37, 62, 151, 200, 63, 189, 82, 254, 142, 61, 61, 79, 28, 61, 112, 22, 13, 61, 231, 210, 29, 62, 63, 221, 223, 189, 185, 139, 180, 189, 226, 211, 174, 61, 90, 155, 51, 60, 120, 186, 46, 61, 78, 84, 69, 189, 210, 126, 111, 189, 197, 208, 39, 62, 133, 60, 40, 190, 144, 199, 218, 188, 121, 166, 32, 62, 14, 103, 12, 189, 220, 101, 47, 190, 163, 161, 40, 62, 220, 241, 20, 62, 243, 102, 51, 62, 104, 54, 224, 189, 92, 108, 241, 189, 172, 44, 128, 61, 105, 13, 70, 61, 157, 80, 32, 190, 223, 79, 241, 189, 90, 161, 173, 189, 254, 48, 172, 189, 3, 55, 105, 61, 68, 232, 255, 189, 213, 81, 230, 187, 196, 125, 61, 189, 198, 249, 143, 189, 86, 82, 6, 61, 192, 184, 1, 189, 65, 63, 44, 62, 37, 14, 191, 61, 106, 177, 217, 189, 207, 70, 255, 186, 59, 129, 22, 62, 250, 92, 237, 188, 201, 41, 15, 190, 115, 50, 13, 189, 190, 52, 213, 61, 121, 156, 82, 189, 140, 132, 226, 189, 41, 25, 101, 61, 133, 18, 61, 189, 85, 211, 243, 189, 111, 37, 23, 62, 93, 68, 221, 189, 78, 95, 78, 60, 39, 221, 157, 61, 234, 126, 198, 61, 188, 216, 18, 62, 189, 168, 6, 61, 76, 245, 121, 189, 6, 181, 69, 60, 254, 20, 3, 190, 138, 150, 179, 189, 239, 19, 43, 62, 145, 84, 172, 187, 255, 12, 197, 186, 44, 226, 40, 190, 36, 183, 38, 189, 113, 189, 65, 61, 48, 2, 50, 190, 253, 5, 196, 61, 177, 35, 214, 59, 195, 235, 247, 189, 152, 246, 0, 62, 30, 173, 32, 189, 214, 74, 161, 61, 154, 123, 82, 189, 5, 150, 128, 61, 27, 155, 225, 189, 196, 4, 235, 61, 26, 100, 103, 61, 217, 116, 45, 62, 245, 254, 18, 62, 108, 243, 11, 60, 130, 132, 174, 60, 4, 43, 211, 189, 46, 22, 35, 62, 10, 131, 239, 189, 136, 18, 37, 190, 243, 155, 138, 189, 110, 187, 247, 189, 77, 182, 189, 189, 127, 144, 44, 62, 144, 254, 142, 186, 99, 188, 72, 61, 115, 223, 215, 189, 239, 155, 176, 61, 190, 79, 10, 62, 228, 140, 68, 189, 58, 249, 52, 189, 182, 194, 248, 189, 248, 160, 65, 189, 113, 189, 157, 189, 155, 157, 16, 190, 64, 110, 44, 62, 115, 114, 154, 189, 34, 65, 76, 60, 252, 100, 4, 190, 253, 63, 128, 189, 73, 18, 34, 61, 125, 63, 52, 188, 232, 100, 221, 59, 39, 32, 132, 61, 137, 194, 92, 189, 170, 37, 11, 189, 54, 211, 247, 60, 60, 69, 23, 61, 8, 50, 11, 190, 218, 0, 17, 61, 131, 106, 180, 61, 34, 86, 183, 189, 88, 165, 40, 62, 245, 71, 242, 60, 121, 154, 191, 188, 64, 252, 80, 61, 211, 137, 32, 62, 126, 29, 211, 189, 48, 93, 234, 189, 42, 93, 69, 60, 14, 152, 1, 190, 126, 255, 115, 189, 239, 133, 149, 61, 98, 172, 236, 189, 5, 203, 27, 62, 10, 61, 22, 62, 228, 90, 34, 190, 22, 47, 125, 188, 194, 140, 16, 62, 251, 212, 41, 62, 118, 157, 83, 61, 25, 204, 85, 188, 152, 66, 233, 189, 53, 68, 248, 189, 20, 189, 243, 61, 84, 175, 29, 190, 66, 58, 173, 189, 161, 192, 30, 61, 229, 220, 34, 62, 145, 7, 10, 190, 110, 18, 162, 61, 241, 64, 139, 188, 251, 222, 49, 189, 161, 96, 243, 189, 167, 59, 132, 189, 104, 10, 247, 189, 161, 180, 152, 189, 215, 197, 37, 62, 142, 145, 211, 189, 39, 81, 93, 61, 109, 161, 30, 190, 8, 123, 77, 189, 69, 84, 168, 61, 11, 70, 138, 61, 103, 207, 33, 190, 168, 12, 182, 61, 135, 207, 245, 189, 231, 125, 245, 61, 122, 40, 188, 61, 201, 194, 35, 62, 73, 162, 222, 61, 215, 101, 223, 189, 44, 12, 25, 190, 235, 159, 107, 60, 27, 235, 250, 189, 36, 211, 158, 189, 194, 163, 24, 62, 53, 249, 16, 60, 3, 188, 4, 190, 168, 190, 111, 60, 205, 27, 14, 190, 244, 205, 72, 189, 225, 80, 52, 190, 19, 196, 94, 61, 48, 229, 187, 189, 28, 155, 254, 189, 110, 216, 135, 61, 92, 41, 138, 61, 250, 166, 137, 188, 173, 122, 157, 61, 8, 142, 250, 61, 112, 84, 159, 189, 61, 102, 218, 189, 25, 36, 17, 190, 112, 123, 252, 60, 47, 218, 58, 61, 11, 76, 27, 190, 215, 143, 12, 190, 35, 25, 242, 189, 218, 222, 48, 190, 253, 25, 19, 61, 14, 119, 167, 61, 236, 1, 66, 61, 190, 60, 12, 190, 188, 82, 192, 189, 231, 239, 60, 189, 111, 76, 168, 61, 214, 29, 46, 62, 154, 178, 145, 60, 215, 19, 42, 62, 79, 223, 36, 190, 44, 106, 12, 61, 77, 140, 7, 190, 66, 93, 25, 62, 246, 117, 243, 189, 191, 127, 40, 189, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 247, 116, 115, 61, 254, 100, 48, 190, 243, 129, 144, 61, 147, 192, 183, 61, 76, 235, 133, 61, 106, 40, 45, 62, 176, 185, 36, 190, 202, 24, 232, 188, 133, 129, 110, 61, 58, 223, 155, 60, 146, 67, 49, 190, 171, 32, 108, 189, 126, 75, 35, 190, 216, 157, 235, 61, 150, 71, 105, 60, 39, 15, 90, 189, 88, 76, 179, 61, 120, 165, 144, 189, 253, 225, 43, 190, 4, 18, 254, 189, 55, 101, 10, 190, 66, 184, 174, 61, 219, 64, 43, 190, 43, 142, 62, 189, 147, 174, 35, 62, 129, 136, 1, 190, 224, 95, 252, 189, 27, 159, 213, 187, 232, 137, 7, 61, 161, 130, 76, 60, 82, 87, 8, 62, 181, 58, 14, 62, 86, 199, 131, 61, 47, 116, 148, 189, 23, 170, 85, 61, 116, 23, 183, 189, 51, 243, 87, 61, 157, 79, 198, 61, 24, 33, 42, 61, 96, 39, 48, 62, 163, 54, 7, 190, 192, 82, 117, 188, 93, 118, 149, 61, 117, 202, 189, 61, 47, 31, 254, 61, 104, 144, 25, 190, 12, 146, 175, 60, 36, 146, 131, 189, 55, 177, 37, 60, 39, 83, 182, 189, 48, 45, 152, 188, 182, 224, 188, 188, 228, 51, 98, 188, 40, 193, 228, 189, 122, 103, 173, 61, 227, 10, 75, 187, 21, 119, 202, 189, 120, 206, 37, 62, 58, 41, 197, 61, 175, 234, 25, 62, 38, 145, 224, 61, 27, 255, 30, 190, 5, 150, 59, 189, 212, 244, 250, 188, 92, 38, 6, 190, 164, 239, 240, 61, 141, 220, 47, 190, 241, 1, 169, 188, 72, 97, 192, 61, 65, 160, 34, 62, 199, 236, 8, 190, 97, 86, 51, 190, 58, 49, 24, 190, 124, 57, 185, 189, 124, 50, 2, 190, 198, 216, 122, 189, 79, 174, 201, 189, 8, 156, 244, 189, 242, 41, 159, 61, 233, 179, 34, 62, 57, 210, 134, 61, 214, 9, 23, 62, 101, 204, 224, 189, 243, 31, 194, 60, 216, 93, 48, 62, 25, 164, 51, 190, 162, 10, 48, 62, 18, 17, 22, 62, 235, 161, 24, 190, 41, 91, 223, 61, 46, 173, 36, 62, 234, 176, 135, 189, 47, 230, 13, 62, 160, 172, 22, 62, 28, 76, 154, 189, 52, 232, 48, 190, 68, 141, 30, 62, 112, 179, 47, 62, 170, 194, 15, 190, 6, 18, 130, 61, 102, 224, 78, 61, 163, 236, 49, 188, 106, 240, 172, 189, 145, 108, 141, 189, 45, 28, 231, 61, 60, 218, 29, 62, 209, 234, 237, 59, 224, 177, 92, 61, 195, 31, 247, 61, 243, 250, 84, 61, 49, 180, 139, 189, 84, 230, 179, 61, 11, 92, 172, 189, 232, 168, 186, 61, 183, 20, 236, 189, 208, 232, 131, 61, 130, 227, 117, 189, 126, 54, 191, 61, 254, 229, 1, 62, 140, 159, 218, 61, 48, 6, 18, 190, 18, 28, 255, 60, 22, 94, 8, 62, 253, 157, 9, 190, 230, 156, 5, 62, 237, 63, 188, 189, 167, 135, 24, 62, 144, 35, 209, 188, 252, 162, 87, 189, 191, 112, 3, 62, 32, 59, 35, 189, 193, 106, 26, 190, 6, 157, 40, 62, 107, 140, 25, 190, 89, 38, 156, 189, 148, 156, 48, 190, 116, 37, 45, 61, 211, 89, 52, 190, 64, 92, 41, 190, 92, 189, 182, 189, 109, 18, 230, 61, 255, 239, 246, 61, 61, 55, 133, 189, 202, 251, 92, 189, 221, 2, 223, 61, 205, 63, 34, 62, 91, 86, 61, 61, 34, 33, 21, 62, 112, 183, 196, 60, 78, 80, 43, 190, 9, 98, 195, 60, 208, 179, 153, 189, 245, 229, 231, 61, 248, 70, 194, 189, 131, 55, 48, 190, 115, 238, 33, 62, 139, 30, 9, 62, 49, 230, 45, 190, 245, 14, 104, 60, 202, 8, 222, 61, 159, 227, 26, 62, 204, 230, 35, 62, 41, 73, 106, 189, 224, 101, 217, 188, 201, 210, 38, 62, 11, 1, 45, 62, 151, 233, 18, 62, 86, 135, 88, 61, 11, 145, 108, 187, 1, 19, 18, 62, 5, 45, 171, 61, 2, 117, 193, 61, 40, 239, 34, 62, 52, 201, 200, 188, 163, 97, 76, 189, 8, 154, 109, 187, 26, 151, 251, 189, 172, 105, 134, 61, 240, 224, 183, 188, 210, 108, 46, 188, 22, 95, 248, 188, 64, 42, 199, 189, 46, 92, 170, 60, 175, 252, 22, 190, 141, 124, 220, 189, 231, 199, 93, 61, 213, 177, 157, 188, 84, 250, 250, 188, 156, 210, 16, 190, 244, 196, 67, 189, 83, 120, 176, 188, 178, 115, 92, 188, 69, 139, 220, 61, 100, 136, 131, 61, 191, 209, 252, 60, 231, 210, 247, 60, 27, 239, 12, 61, 5, 54, 251, 189, 204, 36, 138, 187, 239, 233, 19, 190, 66, 78, 4, 62, 203, 65, 162, 60, 12, 227, 30, 190, 248, 82, 109, 188, 130, 111, 22, 62, 81, 11, 214, 189, 33, 205, 224, 189, 222, 137, 130, 57, 164, 152, 109, 189, 201, 117, 51, 190, 140, 125, 38, 189, 222, 175, 184, 189, 126, 67, 43, 61, 232, 177, 251, 189, 36, 56, 177, 189, 35, 173, 36, 62, 110, 171, 141, 189, 53, 186, 9, 190, 250, 224, 182, 61, 235, 220, 0, 189, 73, 254, 31, 62, 199, 71, 18, 62, 99, 144, 140, 189, 44, 240, 204, 61, 56, 189, 227, 60, 15, 149, 35, 190, 114, 164, 173, 187, 145, 69, 6, 61, 68, 191, 239, 61, 207, 242, 239, 188, 8, 251, 15, 190, 29, 169, 115, 188, 180, 121, 50, 60, 27, 234, 106, 189, 114, 126, 6, 190, 213, 25, 2, 62, 39, 224, 214, 189, 96, 198, 13, 62, 14, 100, 255, 189, 20, 5, 58, 188, 114, 45, 197, 61, 168, 145, 139, 189, 134, 107, 9, 62, 180, 150, 45, 62, 229, 106, 36, 190, 2, 190, 150, 61, 37, 181, 50, 188, 246, 242, 48, 62, 224, 202, 36, 190, 21, 226, 142, 189, 43, 248, 35, 62, 112, 111, 143, 187, 245, 248, 246, 188, 193, 133, 99, 189, 254, 158, 23, 62, 191, 104, 190, 189, 56, 125, 113, 61, 151, 22, 235, 189, 12, 9, 162, 61, 27, 227, 17, 61, 127, 48, 71, 61, 64, 116, 178, 189, 141, 1, 150, 189, 39, 33, 43, 61, 240, 125, 10, 61, 164, 254, 224, 61, 94, 10, 49, 62, 133, 143, 152, 189, 42, 69, 128, 189, 248, 72, 1, 190, 9, 138, 121, 61, 250, 174, 21, 61, 250, 232, 142, 61, 148, 226, 121, 61, 47, 150, 42, 61, 78, 218, 147, 189, 94, 99, 16, 61, 64, 227, 187, 189, 1, 127, 126, 189, 49, 46, 5, 62, 244, 177, 242, 189, 198, 106, 249, 189, 41, 138, 6, 190, 247, 0, 170, 61, 71, 176, 175, 60, 34, 144, 51, 190, 251, 67, 26, 61, 26, 225, 7, 62, 95, 111, 189, 188, 229, 183, 197, 189, 66, 154, 2, 190, 222, 13, 63, 59, 74, 181, 22, 190, 56, 106, 1, 190, 38, 24, 79, 61, 110, 144, 51, 62, 190, 251, 153, 188, 15, 172, 34, 62, 30, 16, 172, 189, 58, 165, 77, 61, 67, 164, 231, 189, 111, 137, 162, 61, 139, 217, 186, 189, 133, 136, 243, 188, 169, 142, 144, 189, 207, 74, 19, 190, 113, 39, 160, 61, 7, 31, 29, 62, 209, 182, 209, 60, 253, 0, 144, 188, 249, 31, 2, 62, 66, 90, 133, 189, 120, 122, 237, 189, 38, 40, 185, 189, 109, 127, 153, 61, 234, 175, 202, 188, 232, 170, 123, 189, 78, 81, 141, 61, 181, 40, 151, 61, 143, 6, 1, 190, 132, 125, 174, 61, 248, 99, 145, 61, 1, 220, 182, 189, 217, 199, 38, 190, 220, 8, 51, 190, 35, 70, 3, 190, 40, 173, 103, 189, 90, 148, 151, 61, 179, 94, 18, 62, 12, 53, 88, 188, 47, 208, 227, 189, 144, 142, 0, 61, 46, 175, 8, 59, 17, 157, 82, 61, 61, 253, 245, 61, 81, 187, 140, 189, 116, 91, 13, 62, 195, 61, 187, 61, 133, 66, 119, 61, 253, 229, 253, 189, 27, 80, 13, 190, 2, 184, 144, 189, 49, 74, 97, 189, 87, 107, 239, 61, 138, 172, 222, 61, 142, 248, 8, 190, 25, 201, 5, 62, 86, 239, 176, 189, 163, 230, 162, 60, 146, 177, 215, 61, 151, 254, 17, 190, 51, 167, 40, 62, 239, 137, 69, 61, 54, 237, 17, 190, 121, 145, 10, 190, 172, 252, 155, 61, 26, 167, 210, 189, 207, 199, 20, 62, 234, 186, 60, 189, 239, 22, 4, 190, 57, 22, 8, 188, 166, 184, 90, 61, 113, 238, 29, 62, 251, 60, 228, 189, 42, 57, 162, 61, 5, 244, 39, 62, 237, 180, 207, 188, 107, 126, 218, 189, 250, 68, 19, 62, 185, 82, 201, 189, 20, 240, 67, 188, 242, 154, 51, 62, 234, 148, 84, 189, 79, 131, 131, 189, 197, 62, 7, 62, 18, 213, 46, 190, 188, 60, 201, 189, 251, 242, 103, 188, 138, 231, 119, 59, 21, 40, 130, 189, 204, 103, 79, 189, 147, 50, 27, 189, 216, 56, 139, 189, 66, 116, 28, 62, 200, 88, 58, 61, 28, 178, 213, 189, 71, 186, 160, 189, 180, 202, 182, 61, 36, 3, 29, 189, 61, 151, 183, 189, 53, 76, 30, 190, 235, 38, 226, 61, 179, 109, 255, 61, 186, 155, 7, 189, 16, 92, 98, 61, 235, 247, 246, 60, 39, 52, 65, 61, 210, 51, 206, 61, 55, 5, 210, 61, 120, 93, 1, 189, 179, 186, 11, 190, 136, 254, 228, 61, 138, 105, 235, 61, 2, 250, 214, 61, 207, 79, 136, 188, 79, 75, 168, 186, 192, 8, 87, 188, 4, 247, 0, 61, 226, 81, 187, 189, 74, 212, 227, 58, 59, 66, 6, 190, 227, 169, 201, 61, 246, 0, 183, 188, 173, 28, 136, 60, 218, 83, 96, 189, 102, 107, 52, 62, 54, 129, 202, 61, 211, 223, 38, 62, 203, 25, 100, 189, 191, 48, 212, 189, 244, 91, 203, 189, 224, 215, 212, 189, 118, 76, 29, 190, 205, 24, 225, 189, 232, 201, 73, 61, 0, 75, 231, 188, 218, 214, 118, 189, 73, 192, 167, 61, 226, 13, 164, 189, 138, 98, 89, 60, 41, 116, 194, 189, 199, 127, 22, 62, 174, 51, 250, 189, 225, 27, 21, 62, 69, 229, 38, 61, 49, 61, 115, 188, 53, 236, 183, 61, 83, 77, 77, 61, 116, 118, 220, 189, 170, 10, 213, 189, 0, 230, 101, 188, 136, 90, 99, 188, 176, 103, 249, 61, 216, 138, 5, 61, 12, 204, 65, 189, 16, 37, 119, 189, 151, 42, 227, 189, 147, 77, 21, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 149, 20, 190, 228, 88, 79, 61, 32, 80, 244, 60, 164, 170, 213, 189, 248, 240, 13, 62, 8, 7, 157, 61, 0, 69, 26, 190, 14, 189, 158, 189, 194, 117, 78, 61, 153, 189, 41, 190, 196, 109, 251, 189, 199, 236, 25, 62, 42, 255, 159, 189, 121, 188, 39, 59, 255, 64, 45, 189, 202, 56, 219, 188, 106, 155, 8, 62, 192, 0, 29, 62, 73, 16, 134, 189, 15, 5, 186, 189, 11, 69, 199, 189, 186, 251, 18, 62, 117, 58, 12, 62, 80, 166, 163, 189, 172, 220, 5, 62, 61, 179, 158, 188, 73, 219, 214, 61, 11, 39, 131, 188, 152, 24, 156, 61, 20, 54, 24, 62, 99, 14, 23, 61, 209, 187, 249, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 4, 34, 190, 236, 158, 18, 190, 76, 177, 13, 62, 183, 91, 126, 189, 20, 192, 59, 188, 105, 81, 182, 61, 179, 160, 24, 189, 213, 254, 4, 190, 99, 35, 221, 188, 245, 123, 176, 189, 162, 159, 46, 190, 110, 76, 21, 62, 238, 214, 233, 188, 116, 180, 150, 60, 55, 133, 43, 190, 86, 246, 42, 62, 154, 82, 10, 190, 104, 189, 10, 190, 199, 47, 180, 61, 100, 149, 24, 62, 179, 215, 23, 62, 88, 26, 239, 59, 245, 96, 56, 189, 210, 118, 69, 61, 191, 31, 195, 189, 63, 179, 77, 189, 142, 236, 228, 189, 209, 191, 220, 61, 116, 94, 154, 188, 215, 112, 153, 61, 69, 239, 13, 190, 185, 200, 182, 188, 141, 97, 140, 61, 190, 114, 42, 62, 184, 33, 178, 189, 179, 3, 200, 61, 179, 24, 248, 189, 57, 193, 203, 61, 230, 137, 44, 62, 226, 107, 144, 189, 55, 203, 183, 189, 215, 96, 89, 189, 25, 110, 89, 61, 170, 76, 35, 62, 249, 83, 35, 189, 255, 195, 33, 62, 177, 112, 231, 189, 87, 19, 16, 189, 16, 51, 35, 189, 177, 188, 176, 188, 212, 38, 21, 62, 226, 219, 16, 61, 103, 211, 147, 61, 228, 17, 199, 61, 89, 172, 193, 189, 188, 67, 41, 190, 96, 255, 139, 61, 33, 3, 28, 190, 116, 174, 20, 62, 19, 161, 196, 61, 62, 189, 231, 60, 90, 193, 173, 189, 169, 142, 74, 189, 67, 170, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 11, 158, 189, 192, 243, 232, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 167, 89, 63, 147, 187, 151, 189, 3, 46, 169, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {240, 144, 80, 189, 198, 63, 243, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}