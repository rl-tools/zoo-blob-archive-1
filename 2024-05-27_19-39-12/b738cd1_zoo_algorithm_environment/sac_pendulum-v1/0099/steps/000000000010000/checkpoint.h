// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 49, 190, 190, 156, 181, 137, 63, 21, 171, 228, 62, 150, 147, 34, 62, 36, 125, 150, 63, 218, 82, 201, 62, 169, 72, 38, 190, 157, 33, 64, 63, 185, 254, 18, 63, 81, 216, 158, 189, 68, 30, 128, 190, 147, 89, 47, 63, 216, 38, 230, 59, 244, 200, 201, 60, 18, 59, 174, 62, 2, 77, 226, 62, 193, 4, 34, 63, 86, 20, 25, 191, 69, 149, 63, 63, 179, 132, 76, 191, 233, 90, 65, 190, 248, 247, 226, 190, 183, 82, 128, 191, 117, 42, 81, 189, 194, 113, 126, 63, 161, 36, 136, 62, 70, 203, 128, 62, 66, 163, 39, 63, 118, 190, 78, 191, 229, 163, 106, 190, 104, 64, 232, 61, 126, 45, 9, 191, 105, 204, 204, 61, 154, 138, 244, 190, 196, 160, 160, 61, 203, 183, 223, 62, 113, 53, 48, 63, 251, 221, 74, 63, 167, 255, 128, 62, 236, 191, 240, 60, 113, 154, 211, 62, 243, 121, 200, 189, 198, 108, 149, 62, 150, 69, 239, 62, 244, 6, 237, 190, 183, 144, 72, 190, 9, 108, 247, 62, 58, 243, 28, 63, 215, 211, 187, 189, 186, 57, 1, 191, 201, 178, 93, 191, 51, 52, 158, 187, 252, 119, 79, 191, 73, 185, 59, 189, 177, 241, 22, 60, 233, 162, 6, 63, 7, 241, 77, 190, 83, 145, 178, 190, 62, 128, 182, 191, 144, 179, 215, 190, 162, 139, 92, 190, 5, 97, 19, 63, 40, 181, 8, 63, 170, 217, 116, 63, 74, 37, 170, 62, 239, 254, 230, 61, 183, 104, 139, 62, 179, 182, 158, 190, 249, 66, 245, 62, 86, 182, 230, 190, 59, 93, 78, 191, 182, 29, 127, 62, 33, 207, 220, 190, 106, 133, 162, 62, 196, 57, 233, 190, 168, 131, 43, 62, 55, 107, 82, 63, 130, 153, 134, 62, 219, 65, 61, 191, 26, 145, 120, 190, 172, 142, 217, 61, 12, 27, 165, 62, 11, 39, 59, 62, 194, 181, 218, 62, 208, 63, 165, 190, 67, 254, 84, 191, 110, 132, 230, 190, 53, 21, 21, 191, 8, 233, 114, 62, 38, 174, 183, 190, 62, 4, 85, 62, 228, 91, 242, 190, 38, 183, 71, 190, 16, 190, 124, 63, 120, 21, 22, 63, 230, 60, 249, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 82, 152, 190, 141, 20, 177, 61, 215, 6, 24, 63, 100, 163, 238, 190, 118, 161, 154, 190, 242, 49, 241, 61, 116, 117, 163, 62, 2, 80, 162, 62, 59, 73, 53, 191, 83, 85, 182, 189, 208, 108, 19, 63, 68, 223, 179, 190, 252, 73, 199, 190, 217, 184, 220, 62, 6, 116, 201, 61, 142, 237, 56, 61, 35, 241, 120, 59, 158, 198, 145, 62, 251, 130, 154, 62, 227, 43, 188, 190, 26, 53, 197, 62, 40, 203, 167, 62, 232, 178, 24, 63, 99, 7, 90, 190, 12, 12, 207, 190, 245, 99, 134, 62, 255, 92, 209, 62, 241, 159, 95, 61, 157, 121, 164, 190, 106, 126, 2, 63, 211, 101, 50, 191, 27, 52, 159, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 203, 227, 190, 235, 32, 98, 190, 139, 118, 88, 190, 93, 184, 7, 190, 18, 112, 36, 190, 229, 163, 68, 189, 9, 147, 173, 62, 77, 119, 116, 62, 163, 135, 233, 189, 55, 216, 211, 62, 30, 153, 199, 61, 133, 154, 94, 61, 231, 3, 104, 190, 140, 242, 156, 190, 9, 173, 130, 61, 104, 57, 251, 188, 227, 200, 19, 61, 210, 152, 128, 61, 205, 147, 162, 190, 101, 48, 230, 189, 9, 59, 166, 61, 209, 133, 184, 189, 254, 199, 243, 61, 191, 78, 26, 62, 90, 82, 141, 190, 160, 137, 114, 190, 13, 244, 239, 61, 2, 102, 19, 190, 142, 243, 140, 190, 124, 148, 129, 190, 108, 163, 130, 61, 125, 35, 151, 190, 137, 43, 39, 62, 112, 149, 49, 189, 45, 72, 201, 60, 146, 9, 103, 190, 45, 185, 232, 61, 220, 93, 103, 61, 236, 126, 65, 191, 96, 154, 57, 191, 87, 253, 130, 189, 193, 183, 16, 191, 100, 217, 153, 191, 126, 19, 122, 190, 214, 118, 165, 189, 80, 195, 144, 188, 65, 226, 79, 62, 183, 179, 171, 189, 242, 229, 252, 189, 84, 159, 231, 190, 138, 25, 5, 62, 143, 235, 139, 190, 112, 38, 128, 61, 72, 251, 76, 59, 201, 16, 62, 190, 170, 62, 73, 190, 1, 6, 101, 62, 173, 59, 3, 62, 109, 209, 198, 191, 131, 117, 59, 190, 179, 167, 238, 190, 168, 130, 34, 60, 181, 195, 38, 190, 21, 82, 236, 61, 225, 33, 230, 189, 40, 97, 84, 190, 255, 238, 36, 61, 202, 13, 183, 61, 207, 82, 173, 189, 85, 64, 141, 187, 231, 47, 247, 61, 35, 73, 188, 61, 35, 214, 136, 190, 134, 207, 12, 62, 252, 108, 115, 62, 179, 148, 143, 62, 26, 137, 31, 190, 76, 28, 3, 191, 24, 242, 220, 189, 8, 143, 35, 62, 53, 58, 27, 190, 188, 179, 160, 189, 226, 27, 175, 190, 23, 41, 250, 61, 125, 114, 243, 61, 64, 77, 12, 190, 190, 123, 101, 62, 131, 109, 180, 190, 190, 40, 167, 190, 205, 53, 110, 60, 41, 206, 179, 60, 72, 254, 186, 189, 55, 230, 48, 190, 32, 95, 59, 190, 140, 101, 197, 62, 184, 174, 103, 61, 244, 237, 178, 189, 217, 33, 211, 61, 122, 211, 12, 190, 200, 135, 53, 191, 31, 154, 244, 190, 145, 179, 181, 62, 183, 171, 237, 60, 63, 176, 59, 62, 62, 208, 43, 61, 79, 73, 246, 61, 58, 128, 45, 61, 252, 196, 70, 190, 203, 88, 179, 189, 9, 62, 10, 62, 97, 71, 153, 62, 151, 155, 173, 190, 120, 224, 134, 61, 117, 75, 115, 61, 22, 19, 224, 61, 186, 81, 142, 187, 202, 35, 223, 190, 209, 174, 171, 62, 116, 143, 250, 60, 207, 76, 173, 190, 168, 83, 148, 190, 215, 94, 109, 62, 137, 115, 55, 62, 28, 208, 147, 61, 198, 55, 207, 189, 149, 195, 70, 190, 77, 12, 182, 189, 182, 146, 28, 62, 245, 139, 248, 188, 156, 202, 61, 190, 205, 56, 173, 189, 139, 237, 133, 60, 45, 173, 142, 61, 25, 206, 243, 59, 73, 234, 130, 189, 223, 246, 154, 61, 150, 247, 186, 61, 79, 12, 5, 190, 198, 205, 143, 62, 111, 108, 155, 62, 175, 199, 8, 61, 210, 130, 137, 189, 154, 6, 56, 61, 16, 1, 181, 61, 40, 67, 2, 188, 217, 98, 176, 61, 23, 225, 57, 189, 3, 30, 35, 190, 180, 227, 171, 189, 200, 243, 229, 61, 3, 124, 188, 61, 71, 47, 222, 60, 163, 6, 143, 62, 130, 69, 52, 61, 77, 161, 141, 62, 239, 17, 17, 190, 174, 232, 14, 61, 213, 174, 94, 62, 55, 18, 176, 190, 39, 138, 172, 61, 75, 125, 137, 191, 42, 171, 78, 191, 79, 236, 201, 62, 57, 88, 39, 189, 230, 236, 110, 190, 56, 250, 84, 61, 74, 79, 122, 190, 131, 125, 146, 190, 134, 249, 29, 187, 186, 237, 83, 189, 38, 12, 243, 189, 9, 74, 4, 63, 206, 113, 136, 190, 197, 183, 55, 62, 193, 131, 119, 62, 224, 141, 180, 62, 228, 101, 162, 190, 30, 216, 115, 190, 37, 47, 238, 188, 8, 201, 194, 61, 37, 16, 177, 62, 249, 231, 58, 191, 239, 41, 191, 59, 51, 236, 227, 190, 161, 30, 137, 190, 53, 200, 46, 191, 201, 89, 60, 190, 248, 64, 144, 190, 102, 110, 21, 190, 208, 100, 225, 187, 38, 75, 165, 62, 71, 233, 19, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 40, 127, 159, 188, 154, 28, 183, 189, 255, 45, 238, 60, 83, 184, 194, 189, 20, 41, 12, 189, 29, 16, 198, 62, 59, 20, 162, 190, 38, 230, 54, 190, 222, 84, 56, 62, 222, 140, 254, 190, 70, 50, 115, 189, 167, 165, 157, 62, 146, 30, 179, 61, 234, 81, 13, 62, 47, 129, 139, 62, 98, 7, 141, 61, 104, 107, 216, 189, 155, 234, 218, 60, 235, 248, 114, 61, 135, 5, 169, 190, 65, 196, 171, 189, 124, 200, 144, 62, 238, 244, 148, 62, 219, 51, 215, 189, 26, 202, 206, 190, 180, 29, 4, 61, 106, 130, 31, 61, 128, 130, 27, 62, 40, 181, 174, 190, 182, 153, 14, 62, 19, 25, 114, 190, 16, 93, 252, 61, 208, 67, 155, 189, 56, 23, 42, 190, 70, 121, 87, 62, 16, 18, 11, 61, 246, 176, 113, 190, 128, 50, 80, 62, 199, 36, 49, 62, 242, 172, 102, 61, 174, 137, 58, 190, 223, 22, 137, 62, 120, 254, 110, 62, 4, 38, 133, 62, 107, 116, 159, 190, 207, 8, 54, 61, 220, 31, 58, 189, 0, 127, 235, 61, 241, 165, 101, 190, 177, 6, 90, 62, 132, 224, 234, 187, 151, 39, 134, 190, 94, 171, 243, 61, 83, 225, 134, 61, 78, 200, 34, 62, 213, 195, 174, 190, 159, 180, 4, 190, 225, 217, 252, 188, 62, 162, 192, 61, 85, 58, 33, 190, 161, 3, 73, 189, 66, 108, 175, 61, 72, 52, 20, 62, 118, 206, 96, 61, 36, 139, 230, 188, 86, 83, 147, 60, 207, 13, 188, 189, 7, 12, 58, 62, 186, 73, 232, 60, 194, 203, 67, 190, 71, 92, 170, 190, 181, 9, 90, 62, 41, 85, 12, 62, 0, 250, 252, 190, 176, 99, 153, 61, 117, 239, 97, 190, 149, 94, 73, 62, 66, 47, 58, 62, 66, 152, 130, 189, 122, 252, 209, 187, 49, 0, 79, 62, 168, 207, 49, 61, 220, 238, 81, 61, 121, 39, 85, 190, 232, 123, 44, 190, 154, 164, 3, 63, 184, 156, 47, 190, 29, 104, 95, 61, 246, 196, 159, 62, 225, 207, 2, 62, 115, 80, 147, 188, 54, 48, 184, 61, 69, 183, 4, 62, 27, 249, 41, 62, 199, 32, 253, 190, 240, 16, 174, 62, 10, 158, 171, 189, 57, 102, 34, 62, 179, 208, 135, 190, 8, 77, 6, 62, 103, 163, 138, 59, 77, 132, 181, 59, 231, 21, 42, 191, 63, 183, 54, 62, 153, 164, 5, 63, 150, 143, 223, 190, 13, 78, 138, 62, 26, 91, 89, 190, 241, 252, 200, 62, 78, 32, 48, 60, 217, 3, 153, 61, 178, 0, 115, 190, 241, 238, 78, 61, 63, 165, 172, 61, 98, 40, 238, 61, 14, 102, 151, 189, 101, 136, 150, 190, 181, 154, 174, 62, 154, 53, 125, 189, 60, 152, 21, 63, 46, 38, 6, 62, 100, 81, 62, 60, 53, 218, 149, 62, 142, 176, 8, 62, 121, 109, 45, 60, 141, 31, 102, 62, 155, 209, 156, 190, 251, 225, 214, 62, 203, 76, 237, 190, 193, 82, 196, 190, 34, 159, 101, 62, 90, 169, 26, 59, 87, 253, 46, 190, 172, 138, 220, 61, 159, 7, 57, 61, 169, 153, 159, 189, 167, 240, 178, 190, 163, 88, 112, 189, 246, 177, 130, 61, 60, 3, 83, 62, 148, 202, 131, 191, 106, 19, 2, 190, 29, 221, 242, 189, 94, 125, 140, 62, 193, 0, 82, 191, 251, 129, 75, 59, 167, 38, 124, 190, 150, 18, 129, 188, 218, 244, 201, 61, 241, 223, 175, 190, 23, 199, 79, 62, 22, 116, 64, 190, 113, 147, 219, 190, 118, 102, 131, 190, 64, 234, 229, 61, 84, 154, 19, 190, 170, 95, 70, 191, 174, 15, 69, 62, 95, 193, 40, 190, 63, 2, 42, 190, 248, 236, 172, 189, 193, 168, 1, 188, 234, 77, 176, 61, 6, 21, 124, 61, 110, 159, 3, 190, 13, 60, 174, 59, 12, 7, 153, 190, 172, 117, 21, 62, 115, 53, 128, 62, 244, 69, 196, 190, 140, 172, 52, 62, 124, 112, 136, 190, 157, 207, 95, 189, 145, 0, 45, 62, 76, 185, 111, 190, 103, 191, 9, 60, 15, 185, 131, 61, 203, 213, 129, 61, 215, 177, 147, 62, 142, 124, 63, 190, 197, 189, 21, 61, 240, 217, 66, 62, 149, 3, 210, 61, 209, 247, 39, 61, 83, 166, 220, 62, 115, 234, 153, 61, 10, 55, 144, 62, 209, 162, 18, 62, 136, 210, 41, 61, 151, 218, 41, 62, 128, 132, 220, 190, 200, 216, 83, 62, 53, 214, 54, 191, 71, 30, 60, 191, 91, 158, 195, 62, 161, 99, 120, 191, 225, 62, 26, 191, 243, 166, 149, 62, 50, 231, 105, 62, 85, 243, 44, 190, 76, 172, 30, 191, 6, 69, 234, 62, 239, 7, 130, 189, 55, 101, 234, 188, 189, 36, 40, 191, 213, 68, 191, 60, 242, 39, 155, 189, 220, 194, 243, 62, 112, 238, 200, 190, 3, 41, 120, 60, 89, 227, 9, 62, 182, 84, 157, 58, 134, 63, 211, 62, 134, 15, 142, 59, 113, 171, 162, 62, 249, 170, 80, 191, 138, 57, 139, 188, 75, 77, 153, 190, 145, 63, 128, 190, 54, 27, 1, 191, 129, 214, 228, 190, 249, 211, 232, 61, 152, 24, 124, 190, 44, 216, 79, 190, 61, 142, 244, 189, 180, 107, 60, 190, 213, 9, 209, 61, 146, 76, 24, 190, 193, 75, 99, 190, 119, 64, 17, 61, 171, 189, 250, 61, 181, 225, 62, 191, 169, 51, 253, 189, 31, 30, 65, 60, 88, 207, 180, 190, 88, 102, 29, 190, 113, 49, 136, 61, 32, 42, 82, 189, 8, 5, 3, 62, 134, 67, 40, 60, 225, 144, 209, 190, 204, 5, 45, 190, 181, 89, 1, 62, 215, 144, 57, 61, 101, 146, 241, 188, 118, 180, 161, 62, 53, 212, 237, 188, 40, 61, 216, 190, 123, 96, 30, 62, 192, 184, 243, 189, 217, 108, 118, 191, 85, 74, 122, 187, 177, 95, 163, 189, 0, 22, 107, 190, 245, 160, 17, 188, 229, 32, 129, 61, 63, 244, 69, 191, 33, 171, 43, 191, 143, 172, 255, 188, 153, 22, 146, 189, 83, 27, 124, 189, 213, 70, 130, 62, 32, 34, 9, 61, 12, 100, 114, 62, 126, 227, 182, 190, 205, 197, 57, 62, 184, 118, 156, 62, 31, 223, 206, 190, 243, 177, 145, 191, 88, 242, 252, 60, 81, 98, 189, 188, 149, 230, 38, 62, 8, 211, 48, 62, 85, 210, 106, 62, 37, 48, 61, 62, 45, 218, 141, 189, 169, 173, 2, 190, 47, 53, 243, 60, 161, 245, 154, 61, 211, 197, 23, 63, 141, 80, 136, 62, 149, 136, 156, 190, 113, 170, 173, 186, 74, 37, 130, 62, 183, 129, 192, 189, 43, 229, 159, 60, 50, 11, 69, 189, 124, 207, 227, 61, 207, 20, 150, 190, 150, 227, 114, 190, 247, 104, 181, 61, 181, 100, 184, 61, 231, 248, 13, 190, 204, 150, 250, 61, 141, 144, 198, 188, 94, 29, 8, 190, 50, 149, 192, 189, 111, 40, 243, 190, 224, 217, 154, 61, 28, 171, 30, 190, 18, 224, 16, 190, 112, 20, 74, 189, 211, 79, 139, 189, 99, 5, 76, 190, 212, 131, 191, 61, 37, 58, 42, 188, 135, 123, 32, 62, 7, 156, 92, 190, 228, 4, 97, 189, 46, 161, 92, 62, 157, 20, 11, 62, 131, 50, 246, 61, 103, 244, 165, 62, 142, 81, 115, 62, 245, 101, 87, 190, 239, 83, 130, 61, 15, 107, 0, 190, 107, 23, 98, 62, 246, 121, 129, 190, 89, 56, 237, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 84, 231, 207, 189, 112, 120, 221, 189, 43, 52, 180, 188, 212, 21, 189, 60, 30, 233, 44, 189, 72, 147, 140, 62, 73, 51, 74, 190, 83, 46, 85, 190, 172, 11, 28, 62, 229, 98, 37, 62, 15, 23, 57, 190, 50, 121, 4, 191, 95, 171, 236, 61, 218, 119, 205, 62, 130, 169, 4, 62, 129, 159, 243, 189, 168, 161, 98, 62, 8, 27, 200, 190, 2, 167, 16, 62, 83, 76, 159, 189, 174, 96, 107, 190, 50, 139, 239, 61, 89, 137, 202, 190, 134, 203, 219, 190, 65, 211, 233, 62, 29, 0, 96, 190, 242, 188, 184, 190, 47, 225, 190, 59, 232, 135, 16, 62, 216, 52, 91, 61, 166, 191, 200, 62, 35, 159, 133, 62, 34, 225, 217, 61, 217, 82, 7, 190, 8, 160, 86, 62, 221, 100, 66, 190, 200, 161, 131, 189, 123, 122, 45, 62, 204, 213, 173, 62, 73, 179, 175, 189, 246, 197, 21, 191, 59, 143, 175, 62, 231, 80, 110, 189, 89, 175, 96, 62, 176, 245, 216, 189, 142, 217, 137, 60, 167, 147, 63, 61, 142, 224, 191, 61, 45, 46, 186, 189, 249, 56, 139, 190, 193, 107, 43, 62, 101, 64, 114, 59, 227, 55, 26, 62, 112, 43, 189, 190, 193, 181, 224, 61, 53, 170, 154, 190, 125, 125, 10, 190, 29, 74, 213, 61, 234, 29, 11, 60, 236, 115, 135, 61, 184, 243, 72, 189, 129, 208, 50, 190, 36, 108, 253, 61, 131, 38, 56, 190, 205, 50, 60, 189, 12, 40, 65, 189, 35, 166, 6, 62, 115, 216, 135, 190, 50, 168, 245, 189, 146, 202, 14, 62, 162, 229, 108, 62, 140, 248, 143, 190, 147, 76, 94, 191, 70, 206, 221, 62, 70, 30, 4, 190, 44, 251, 179, 61, 204, 54, 254, 190, 64, 50, 15, 190, 144, 128, 19, 62, 120, 10, 190, 62, 141, 37, 216, 189, 114, 26, 52, 62, 224, 70, 130, 190, 58, 81, 8, 61, 35, 79, 210, 62, 96, 67, 19, 190, 18, 57, 214, 62, 158, 55, 73, 190, 217, 49, 15, 191, 139, 226, 159, 61, 139, 73, 200, 61, 86, 253, 123, 190, 59, 97, 210, 188, 94, 67, 143, 60, 147, 209, 157, 62, 62, 161, 190, 190, 197, 129, 146, 60, 166, 229, 128, 62, 18, 122, 93, 190, 50, 212, 136, 61, 157, 169, 208, 61, 134, 132, 148, 62, 71, 34, 2, 191, 44, 229, 79, 189, 200, 180, 239, 62, 67, 134, 129, 59, 184, 106, 24, 190, 200, 197, 214, 189, 29, 52, 148, 62, 202, 125, 206, 61, 61, 41, 155, 61, 227, 192, 166, 60, 95, 217, 198, 190, 205, 7, 11, 61, 75, 75, 245, 189, 138, 215, 25, 61, 106, 135, 11, 190, 53, 49, 228, 62, 57, 28, 14, 62, 139, 113, 239, 61, 41, 184, 40, 190, 55, 238, 144, 61, 140, 159, 34, 189, 9, 44, 153, 189, 89, 19, 192, 61, 96, 237, 35, 191, 26, 122, 22, 62, 53, 88, 6, 62, 206, 91, 60, 190, 54, 249, 230, 61, 25, 174, 51, 190, 163, 37, 64, 190, 189, 60, 43, 62, 233, 187, 22, 190, 125, 196, 244, 189, 177, 28, 163, 186, 36, 33, 2, 62, 132, 168, 165, 190, 0, 89, 203, 188, 64, 206, 2, 191, 201, 202, 9, 62, 34, 67, 248, 61, 88, 48, 246, 189, 13, 203, 139, 190, 213, 126, 69, 62, 113, 146, 144, 62, 126, 201, 244, 61, 140, 15, 205, 61, 174, 150, 249, 189, 55, 27, 113, 62, 169, 83, 89, 188, 19, 185, 162, 190, 237, 44, 181, 62, 118, 202, 201, 188, 116, 246, 105, 190, 42, 144, 70, 62, 62, 37, 102, 62, 174, 152, 131, 189, 211, 111, 201, 190, 148, 199, 121, 62, 72, 171, 231, 61, 233, 33, 102, 61, 132, 199, 238, 61, 149, 223, 7, 190, 212, 62, 58, 189, 68, 180, 142, 62, 58, 166, 249, 62, 224, 21, 5, 190, 181, 111, 188, 190, 84, 246, 171, 62, 165, 248, 11, 61, 229, 254, 157, 62, 35, 221, 52, 189, 161, 32, 44, 62, 173, 80, 96, 189, 255, 111, 21, 62, 12, 177, 173, 190, 193, 231, 22, 187, 98, 163, 56, 62, 223, 240, 109, 190, 51, 15, 7, 62, 19, 211, 147, 59, 89, 81, 79, 62, 213, 169, 0, 191, 244, 251, 166, 60, 146, 134, 140, 61, 226, 129, 0, 190, 133, 130, 137, 189, 158, 62, 19, 191, 67, 46, 182, 189, 223, 105, 187, 190, 145, 30, 105, 189, 34, 178, 33, 191, 232, 243, 182, 190, 14, 1, 210, 190, 184, 251, 15, 63, 239, 150, 214, 62, 16, 90, 186, 190, 74, 170, 41, 191, 225, 1, 248, 59, 70, 126, 14, 62, 104, 5, 30, 191, 189, 61, 110, 61, 97, 244, 248, 190, 159, 35, 33, 62, 12, 146, 8, 189, 133, 175, 205, 190, 216, 164, 3, 191, 236, 60, 214, 189, 96, 76, 26, 190, 96, 20, 7, 62, 20, 221, 75, 191, 69, 45, 151, 190, 139, 235, 237, 60, 108, 110, 216, 188, 236, 217, 0, 63, 230, 31, 105, 62, 51, 187, 46, 191, 229, 66, 142, 62, 1, 220, 129, 62, 232, 129, 221, 61, 249, 70, 102, 62, 20, 127, 36, 191, 90, 1, 242, 61, 60, 8, 223, 60, 252, 185, 35, 190, 152, 132, 103, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 8, 136, 26, 190, 254, 94, 72, 189, 180, 121, 50, 60, 27, 234, 106, 189, 155, 199, 32, 190, 97, 70, 237, 61, 243, 154, 215, 189, 0, 164, 4, 62, 93, 87, 11, 190, 31, 181, 146, 188, 5, 61, 135, 61, 129, 6, 187, 189, 55, 28, 242, 61, 147, 50, 25, 62, 217, 205, 43, 190, 124, 206, 148, 61, 7, 141, 146, 188, 175, 1, 38, 62, 226, 51, 40, 190, 200, 0, 148, 189, 204, 18, 3, 62, 75, 136, 246, 187, 211, 207, 100, 189, 248, 224, 192, 189, 177, 64, 19, 62, 128, 189, 190, 189, 72, 94, 168, 61, 25, 78, 175, 188, 116, 136, 181, 61, 250, 140, 236, 61, 254, 21, 41, 62, 246, 90, 23, 62, 87, 74, 119, 61, 79, 210, 19, 62, 229, 145, 184, 62, 4, 92, 203, 62, 210, 60, 22, 62, 127, 221, 12, 62, 35, 41, 30, 62, 181, 190, 228, 189, 41, 232, 107, 62, 211, 99, 162, 61, 57, 194, 115, 61, 128, 115, 71, 61, 5, 8, 7, 190, 56, 194, 169, 188, 196, 36, 107, 61, 186, 30, 2, 190, 48, 54, 80, 61, 252, 81, 163, 62, 128, 29, 132, 190, 199, 207, 185, 189, 56, 111, 76, 190, 180, 230, 212, 61, 201, 49, 62, 190, 255, 106, 188, 190, 176, 103, 152, 62, 230, 94, 30, 62, 94, 148, 5, 61, 121, 39, 22, 190, 204, 241, 235, 61, 36, 213, 82, 190, 222, 76, 67, 190, 211, 77, 83, 60, 23, 96, 170, 62, 170, 9, 150, 61, 213, 78, 167, 190, 66, 113, 1, 63, 201, 217, 217, 189, 70, 45, 149, 62, 36, 195, 227, 190, 177, 133, 183, 189, 203, 111, 47, 62, 248, 23, 106, 62, 108, 30, 188, 190, 108, 185, 237, 189, 222, 10, 126, 190, 48, 82, 147, 62, 100, 109, 130, 62, 7, 31, 96, 62, 240, 215, 237, 62, 114, 166, 32, 191, 45, 241, 248, 190, 24, 112, 153, 189, 72, 100, 27, 61, 12, 19, 8, 190, 3, 8, 189, 190, 148, 214, 172, 61, 69, 79, 166, 62, 3, 83, 95, 190, 17, 121, 11, 190, 68, 44, 152, 62, 37, 140, 202, 190, 77, 68, 168, 188, 113, 202, 227, 61, 111, 40, 159, 190, 46, 169, 30, 191, 38, 242, 92, 62, 192, 13, 43, 63, 40, 243, 243, 190, 243, 161, 140, 61, 173, 19, 139, 191, 141, 51, 155, 62, 101, 121, 221, 62, 215, 44, 228, 189, 16, 130, 64, 191, 103, 232, 48, 62, 23, 58, 39, 62, 220, 189, 136, 62, 91, 65, 167, 190, 226, 167, 187, 190, 7, 197, 177, 62, 88, 36, 33, 191, 55, 111, 170, 61, 75, 92, 225, 62, 246, 157, 180, 61, 164, 169, 144, 62, 81, 121, 49, 62, 97, 153, 249, 61, 38, 189, 109, 62, 69, 82, 38, 191, 91, 96, 20, 63, 168, 85, 17, 191, 162, 55, 247, 190, 115, 191, 181, 189, 102, 106, 124, 61, 45, 209, 134, 190, 200, 8, 69, 62, 46, 44, 96, 62, 99, 162, 247, 188, 133, 161, 206, 190, 124, 53, 146, 62, 209, 22, 140, 62, 49, 254, 160, 61, 186, 147, 241, 190, 238, 251, 41, 61, 203, 95, 44, 61, 90, 224, 233, 188, 69, 142, 200, 61, 188, 31, 154, 61, 45, 24, 61, 189, 31, 35, 67, 62, 54, 31, 32, 188, 175, 8, 187, 61, 19, 181, 208, 62, 71, 200, 134, 190, 184, 123, 73, 190, 190, 137, 232, 189, 32, 66, 54, 61, 193, 60, 133, 189, 203, 172, 19, 190, 163, 111, 142, 189, 4, 181, 244, 188, 75, 59, 239, 61, 67, 22, 47, 189, 55, 68, 20, 190, 97, 42, 235, 190, 248, 232, 8, 62, 16, 211, 14, 189, 219, 52, 27, 190, 198, 152, 72, 190, 171, 19, 163, 62, 7, 123, 150, 61, 66, 124, 175, 190, 16, 237, 99, 62, 161, 61, 189, 190, 152, 128, 175, 61, 188, 253, 42, 61, 106, 43, 140, 60, 225, 207, 242, 190, 121, 153, 147, 189, 82, 249, 166, 62, 78, 168, 30, 62, 84, 7, 38, 189, 229, 45, 178, 190, 32, 174, 33, 62, 30, 130, 246, 189, 130, 39, 9, 63, 214, 74, 193, 61, 136, 93, 181, 189, 175, 254, 147, 60, 80, 221, 102, 61, 231, 114, 11, 61, 99, 123, 110, 61, 227, 103, 33, 191, 198, 163, 159, 61, 226, 72, 185, 61, 142, 12, 137, 62, 183, 242, 126, 189, 180, 68, 96, 188, 88, 9, 44, 62, 13, 120, 135, 61, 99, 212, 34, 191, 185, 76, 114, 189, 249, 29, 171, 62, 116, 192, 255, 190, 101, 221, 100, 190, 70, 155, 2, 62, 128, 145, 42, 189, 21, 61, 85, 189, 17, 23, 160, 62, 61, 242, 37, 62, 136, 148, 116, 188, 77, 7, 181, 61, 236, 133, 173, 60, 171, 76, 227, 188, 93, 235, 192, 61, 107, 20, 89, 62, 119, 24, 154, 188, 231, 146, 128, 61, 94, 222, 41, 61, 151, 60, 140, 60, 23, 176, 38, 190, 123, 77, 242, 61, 76, 157, 82, 189, 54, 148, 44, 189, 95, 83, 32, 190, 154, 79, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 209, 61, 190, 29, 28, 134, 189, 214, 1, 200, 61, 160, 99, 233, 187, 174, 54, 148, 62, 153, 230, 29, 188, 0, 69, 26, 190, 79, 18, 145, 61, 242, 159, 100, 62, 155, 79, 4, 190, 115, 229, 64, 190, 40, 115, 122, 62, 33, 89, 206, 61, 65, 17, 169, 61, 201, 217, 230, 60, 67, 73, 0, 61, 138, 29, 137, 62, 192, 0, 29, 62, 243, 206, 231, 189, 6, 13, 65, 189, 129, 162, 22, 61, 26, 20, 143, 189, 58, 179, 143, 62, 166, 146, 235, 61, 174, 199, 23, 62, 161, 200, 98, 189, 202, 209, 216, 188, 66, 121, 33, 62, 98, 250, 175, 62, 17, 130, 93, 62, 63, 70, 21, 62, 51, 193, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 26, 8, 191, 53, 200, 51, 191, 118, 18, 56, 62, 67, 108, 5, 191, 5, 222, 0, 189, 22, 195, 128, 63, 179, 160, 24, 189, 111, 202, 35, 190, 129, 215, 54, 61, 151, 237, 98, 190, 65, 176, 27, 191, 66, 68, 149, 63, 162, 173, 149, 189, 26, 66, 140, 63, 103, 129, 151, 190, 111, 4, 150, 62, 246, 36, 36, 189, 104, 189, 10, 190, 136, 41, 233, 62, 204, 75, 128, 62, 103, 50, 249, 62, 148, 205, 118, 190, 174, 71, 105, 190, 212, 130, 166, 62, 200, 67, 90, 191, 84, 233, 45, 189, 253, 107, 118, 190, 85, 201, 44, 63, 47, 163, 36, 191, 135, 98, 49, 62, 68, 56, 201, 190, 48, 16, 136, 189, 121, 194, 202, 62, 81, 172, 92, 62, 39, 72, 182, 189, 230, 50, 170, 61, 84, 48, 73, 190, 10, 239, 98, 62, 230, 137, 44, 62, 172, 108, 78, 190, 249, 194, 63, 190, 227, 184, 244, 189, 211, 47, 146, 62, 112, 188, 64, 62, 232, 210, 20, 190, 145, 178, 33, 62, 92, 91, 98, 188, 213, 121, 15, 190, 44, 40, 165, 190, 177, 188, 176, 188, 37, 25, 234, 61, 17, 54, 52, 62, 2, 193, 49, 62, 89, 49, 15, 62, 248, 52, 68, 190, 125, 103, 32, 190, 249, 252, 188, 62, 103, 133, 21, 190, 220, 5, 177, 61, 27, 29, 115, 189, 34, 117, 57, 62, 140, 230, 65, 190, 23, 211, 119, 62, 184, 94, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 8, 184, 189, 26, 174, 233, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {69, 190, 161, 63, 73, 127, 194, 63, 148, 239, 58, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 88, 198, 192, 159, 151, 19, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}