// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 57, 72, 190, 237, 68, 154, 63, 140, 38, 1, 63, 135, 66, 236, 61, 139, 205, 200, 63, 158, 215, 150, 62, 44, 105, 75, 190, 117, 136, 61, 63, 241, 112, 12, 63, 133, 83, 48, 190, 10, 28, 90, 190, 154, 160, 33, 63, 11, 130, 229, 189, 172, 88, 12, 62, 193, 32, 150, 62, 109, 10, 196, 62, 131, 43, 247, 62, 105, 219, 14, 191, 76, 138, 63, 63, 72, 55, 70, 191, 237, 153, 90, 190, 249, 160, 225, 190, 31, 186, 135, 191, 171, 34, 23, 190, 78, 18, 131, 63, 204, 223, 135, 62, 41, 178, 139, 62, 121, 154, 36, 63, 218, 250, 126, 191, 230, 101, 120, 190, 200, 212, 131, 62, 183, 161, 32, 191, 180, 22, 96, 61, 134, 217, 42, 191, 188, 24, 164, 62, 146, 79, 177, 62, 189, 65, 49, 63, 168, 243, 110, 63, 248, 202, 149, 62, 254, 114, 13, 190, 122, 138, 29, 63, 10, 73, 45, 189, 170, 162, 62, 61, 177, 42, 223, 62, 104, 246, 148, 190, 37, 251, 131, 190, 133, 102, 236, 62, 69, 68, 22, 63, 238, 199, 78, 190, 165, 107, 58, 191, 194, 201, 57, 191, 184, 12, 236, 61, 63, 254, 114, 191, 22, 240, 49, 188, 89, 15, 19, 189, 184, 5, 48, 63, 67, 216, 138, 189, 174, 212, 159, 190, 247, 94, 173, 191, 0, 145, 233, 190, 17, 58, 96, 190, 174, 2, 20, 63, 106, 98, 0, 63, 94, 176, 117, 63, 26, 222, 172, 62, 157, 181, 225, 61, 49, 12, 135, 62, 180, 118, 155, 190, 182, 50, 211, 62, 142, 60, 220, 190, 202, 48, 131, 191, 134, 26, 103, 62, 179, 112, 220, 190, 246, 221, 36, 62, 230, 122, 215, 190, 103, 100, 180, 61, 243, 37, 137, 63, 3, 116, 129, 62, 253, 45, 80, 191, 88, 43, 210, 190, 73, 251, 74, 189, 132, 52, 144, 62, 43, 238, 203, 62, 76, 55, 182, 62, 154, 225, 45, 191, 149, 68, 155, 191, 185, 0, 166, 190, 69, 5, 46, 191, 23, 41, 164, 62, 230, 91, 179, 190, 141, 204, 247, 62, 221, 75, 235, 190, 117, 103, 57, 190, 189, 176, 129, 63, 129, 146, 91, 63, 63, 6, 199, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 83, 167, 190, 119, 18, 155, 59, 51, 220, 27, 63, 67, 138, 3, 191, 74, 87, 225, 190, 213, 249, 35, 62, 207, 147, 159, 62, 25, 124, 184, 62, 89, 185, 68, 191, 33, 249, 78, 190, 228, 26, 41, 63, 128, 144, 195, 190, 30, 100, 222, 190, 21, 105, 159, 62, 14, 174, 134, 189, 200, 29, 69, 60, 69, 154, 2, 61, 116, 174, 82, 62, 50, 254, 159, 62, 166, 106, 170, 190, 130, 38, 210, 62, 20, 150, 133, 62, 108, 47, 31, 63, 82, 74, 236, 189, 233, 53, 231, 190, 254, 139, 25, 62, 147, 90, 176, 62, 210, 16, 255, 60, 177, 218, 209, 189, 173, 17, 231, 62, 105, 18, 51, 191, 199, 69, 148, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 145, 212, 190, 175, 183, 244, 190, 29, 212, 205, 190, 118, 218, 151, 190, 235, 214, 122, 190, 35, 241, 8, 191, 112, 181, 219, 62, 27, 255, 149, 62, 46, 81, 174, 189, 73, 137, 234, 62, 163, 241, 102, 62, 163, 230, 243, 60, 49, 226, 75, 191, 140, 101, 249, 190, 44, 251, 88, 190, 166, 28, 117, 190, 7, 166, 131, 190, 197, 221, 20, 62, 45, 11, 181, 190, 231, 247, 44, 190, 74, 199, 14, 190, 63, 195, 149, 60, 68, 137, 159, 62, 118, 199, 153, 62, 160, 104, 202, 190, 160, 186, 202, 190, 249, 238, 30, 62, 178, 190, 106, 190, 196, 114, 186, 190, 166, 209, 94, 191, 104, 241, 23, 191, 205, 14, 187, 190, 16, 241, 158, 62, 239, 39, 181, 59, 96, 150, 69, 61, 8, 237, 99, 190, 10, 239, 19, 62, 164, 253, 165, 61, 2, 104, 56, 191, 219, 93, 59, 191, 12, 192, 10, 191, 100, 139, 60, 191, 128, 15, 208, 191, 58, 175, 93, 190, 188, 191, 35, 190, 46, 189, 241, 60, 96, 46, 95, 62, 203, 59, 188, 187, 101, 120, 2, 190, 154, 158, 231, 190, 238, 220, 46, 62, 61, 109, 243, 190, 238, 87, 11, 62, 101, 68, 167, 189, 80, 81, 144, 190, 79, 108, 130, 190, 2, 62, 78, 62, 76, 10, 56, 62, 164, 156, 213, 191, 238, 166, 114, 190, 146, 196, 22, 191, 146, 216, 34, 61, 13, 181, 72, 190, 46, 142, 94, 61, 155, 46, 210, 189, 111, 40, 106, 190, 73, 158, 87, 60, 30, 18, 191, 61, 182, 250, 149, 189, 9, 184, 194, 61, 253, 219, 129, 187, 133, 102, 21, 62, 38, 171, 30, 191, 221, 239, 60, 62, 32, 157, 60, 62, 80, 194, 143, 62, 47, 180, 209, 190, 130, 240, 86, 191, 154, 99, 235, 189, 87, 90, 17, 62, 202, 197, 37, 190, 106, 161, 49, 190, 86, 213, 4, 191, 241, 1, 222, 188, 231, 104, 197, 61, 0, 23, 150, 190, 126, 158, 59, 62, 155, 212, 166, 190, 237, 55, 167, 190, 54, 166, 10, 189, 186, 126, 175, 61, 140, 51, 239, 189, 62, 109, 226, 190, 92, 171, 72, 190, 139, 207, 197, 62, 200, 221, 155, 188, 187, 85, 241, 190, 87, 144, 140, 62, 27, 211, 236, 189, 162, 174, 45, 191, 221, 38, 18, 191, 254, 201, 202, 62, 187, 64, 201, 61, 160, 9, 96, 62, 232, 196, 11, 61, 73, 16, 3, 62, 196, 123, 198, 61, 252, 64, 205, 189, 82, 192, 144, 189, 33, 196, 11, 62, 246, 135, 168, 62, 5, 117, 230, 190, 240, 19, 138, 61, 140, 185, 152, 61, 227, 164, 2, 62, 108, 222, 79, 61, 238, 191, 207, 190, 117, 35, 177, 62, 32, 39, 5, 62, 95, 217, 149, 62, 202, 213, 142, 190, 81, 209, 152, 62, 69, 176, 37, 62, 193, 137, 144, 60, 64, 199, 172, 189, 37, 119, 61, 190, 11, 19, 165, 188, 202, 147, 28, 62, 99, 209, 35, 189, 120, 39, 87, 190, 226, 37, 181, 189, 55, 33, 228, 60, 90, 8, 176, 61, 106, 229, 199, 60, 93, 139, 209, 188, 144, 110, 192, 61, 216, 246, 18, 62, 121, 215, 229, 189, 4, 179, 167, 62, 117, 10, 159, 62, 195, 108, 22, 58, 138, 2, 26, 59, 173, 77, 83, 61, 4, 121, 185, 61, 108, 182, 1, 189, 5, 222, 22, 62, 120, 84, 65, 188, 236, 59, 45, 190, 252, 42, 164, 189, 216, 120, 8, 62, 189, 147, 241, 61, 168, 209, 204, 61, 250, 24, 128, 62, 230, 255, 93, 61, 178, 117, 74, 62, 198, 1, 37, 190, 106, 200, 239, 187, 74, 132, 90, 62, 151, 58, 201, 190, 62, 166, 132, 61, 149, 147, 137, 191, 42, 171, 78, 191, 211, 78, 201, 62, 52, 197, 39, 189, 230, 236, 110, 190, 56, 250, 84, 61, 74, 79, 122, 190, 201, 67, 147, 190, 134, 249, 29, 187, 186, 237, 83, 189, 57, 109, 245, 189, 88, 18, 4, 63, 206, 113, 136, 190, 76, 230, 54, 62, 193, 131, 119, 62, 173, 38, 180, 62, 228, 101, 162, 190, 78, 48, 117, 190, 134, 26, 240, 188, 141, 104, 194, 61, 47, 123, 176, 62, 249, 231, 58, 191, 176, 214, 160, 59, 234, 109, 228, 190, 161, 30, 137, 190, 108, 225, 46, 191, 59, 3, 62, 190, 248, 64, 144, 190, 102, 110, 21, 190, 231, 79, 4, 188, 38, 75, 165, 62, 71, 233, 19, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 180, 87, 185, 189, 255, 33, 19, 190, 193, 231, 167, 60, 88, 9, 163, 189, 241, 216, 198, 188, 176, 93, 204, 62, 241, 220, 148, 190, 144, 6, 61, 190, 192, 9, 135, 62, 164, 128, 45, 191, 173, 21, 86, 189, 170, 212, 159, 62, 190, 123, 111, 61, 36, 41, 36, 62, 3, 87, 125, 62, 161, 1, 140, 61, 123, 226, 76, 190, 53, 57, 185, 61, 158, 73, 254, 60, 227, 16, 35, 191, 145, 47, 176, 189, 93, 105, 158, 62, 183, 113, 156, 62, 171, 81, 169, 189, 13, 173, 7, 191, 143, 213, 25, 60, 137, 118, 52, 189, 31, 56, 8, 62, 143, 216, 8, 191, 41, 234, 221, 61, 135, 58, 3, 191, 114, 218, 248, 61, 176, 247, 59, 189, 173, 67, 55, 190, 58, 242, 82, 62, 194, 6, 20, 61, 19, 183, 97, 190, 240, 224, 72, 62, 8, 228, 55, 62, 177, 193, 25, 62, 161, 44, 59, 190, 5, 217, 161, 62, 210, 202, 127, 62, 234, 59, 135, 62, 100, 139, 186, 190, 198, 141, 74, 62, 202, 43, 126, 189, 215, 53, 232, 61, 143, 125, 129, 190, 91, 26, 155, 62, 55, 125, 199, 61, 68, 252, 136, 190, 34, 160, 250, 61, 168, 54, 125, 61, 25, 124, 24, 62, 130, 81, 147, 190, 223, 67, 135, 190, 171, 112, 138, 187, 64, 18, 176, 61, 189, 51, 64, 190, 126, 151, 229, 189, 191, 173, 41, 62, 127, 226, 200, 61, 196, 86, 70, 60, 83, 159, 23, 190, 97, 32, 144, 189, 172, 149, 199, 189, 79, 44, 106, 62, 186, 82, 81, 61, 1, 49, 29, 190, 56, 2, 159, 190, 96, 90, 54, 62, 68, 167, 71, 62, 228, 138, 28, 191, 216, 51, 172, 61, 168, 156, 100, 190, 138, 7, 252, 61, 143, 63, 39, 62, 156, 34, 34, 189, 50, 58, 42, 187, 156, 243, 80, 62, 18, 242, 85, 61, 82, 159, 68, 61, 3, 99, 67, 190, 114, 184, 43, 190, 81, 244, 7, 63, 196, 100, 20, 190, 135, 126, 220, 61, 181, 218, 166, 62, 43, 118, 167, 61, 149, 217, 205, 189, 4, 10, 165, 61, 141, 235, 7, 62, 125, 242, 57, 62, 157, 125, 235, 190, 153, 92, 175, 62, 254, 226, 82, 190, 157, 192, 41, 62, 104, 114, 134, 190, 70, 108, 20, 62, 205, 170, 147, 58, 39, 177, 12, 188, 129, 78, 12, 191, 18, 35, 124, 62, 107, 117, 64, 63, 2, 195, 3, 191, 184, 229, 190, 62, 249, 206, 115, 190, 126, 176, 241, 62, 74, 246, 155, 187, 60, 11, 83, 61, 239, 103, 119, 190, 158, 147, 96, 60, 179, 192, 100, 62, 2, 202, 195, 61, 48, 236, 32, 189, 118, 73, 150, 190, 187, 13, 200, 62, 17, 168, 103, 59, 107, 206, 28, 63, 190, 39, 184, 61, 53, 125, 0, 60, 60, 187, 116, 62, 55, 60, 6, 62, 94, 59, 17, 60, 33, 71, 87, 62, 187, 235, 202, 190, 147, 196, 232, 62, 31, 61, 14, 191, 70, 107, 12, 191, 50, 252, 98, 62, 198, 25, 2, 188, 48, 78, 92, 190, 13, 82, 45, 62, 59, 59, 95, 62, 30, 238, 137, 188, 119, 48, 37, 191, 127, 91, 86, 62, 120, 143, 25, 62, 105, 114, 11, 62, 2, 32, 194, 191, 77, 106, 16, 190, 203, 223, 199, 189, 197, 49, 124, 62, 60, 0, 124, 191, 217, 148, 7, 62, 195, 16, 103, 190, 46, 25, 141, 190, 13, 128, 185, 61, 83, 27, 128, 190, 97, 199, 114, 62, 95, 148, 69, 190, 229, 122, 220, 190, 231, 239, 156, 190, 40, 118, 30, 62, 45, 243, 243, 189, 27, 23, 172, 191, 127, 245, 83, 62, 217, 212, 52, 62, 118, 68, 19, 190, 141, 137, 11, 190, 201, 175, 110, 189, 189, 184, 134, 61, 178, 3, 119, 61, 165, 124, 5, 190, 163, 134, 232, 59, 17, 241, 121, 190, 18, 255, 97, 62, 252, 106, 150, 62, 23, 132, 213, 190, 9, 108, 118, 62, 188, 185, 139, 190, 73, 213, 219, 189, 152, 126, 78, 62, 27, 9, 124, 190, 234, 171, 162, 187, 34, 216, 44, 61, 159, 127, 40, 62, 50, 245, 145, 62, 200, 157, 45, 190, 197, 22, 202, 60, 90, 35, 82, 62, 12, 53, 5, 62, 205, 182, 228, 61, 174, 93, 206, 62, 84, 7, 109, 61, 249, 75, 123, 62, 192, 223, 222, 61, 72, 137, 185, 60, 112, 199, 36, 62, 49, 68, 11, 191, 0, 112, 49, 62, 147, 82, 44, 191, 139, 92, 134, 191, 87, 249, 182, 62, 96, 239, 77, 191, 45, 167, 3, 191, 35, 101, 154, 62, 114, 207, 153, 62, 88, 152, 216, 190, 82, 162, 11, 191, 132, 188, 15, 63, 233, 151, 161, 60, 19, 209, 82, 190, 82, 228, 55, 191, 207, 168, 80, 61, 139, 4, 40, 189, 216, 43, 233, 62, 12, 137, 175, 190, 90, 177, 213, 61, 190, 36, 30, 62, 108, 146, 131, 190, 166, 206, 186, 62, 51, 139, 84, 61, 96, 185, 189, 62, 63, 115, 146, 191, 225, 28, 122, 61, 92, 208, 194, 190, 110, 248, 192, 190, 83, 167, 216, 190, 209, 0, 12, 191, 3, 167, 10, 62, 146, 88, 107, 191, 102, 122, 34, 190, 232, 187, 34, 191, 91, 63, 77, 190, 49, 194, 11, 62, 48, 139, 72, 61, 200, 169, 177, 189, 9, 94, 214, 60, 23, 135, 49, 62, 225, 22, 178, 191, 1, 169, 37, 189, 179, 176, 128, 188, 125, 2, 162, 190, 234, 56, 192, 189, 76, 11, 185, 61, 174, 233, 233, 189, 209, 164, 129, 61, 209, 186, 133, 188, 246, 98, 2, 191, 166, 68, 50, 190, 103, 25, 49, 61, 215, 144, 57, 61, 227, 215, 217, 59, 83, 253, 171, 62, 3, 149, 229, 60, 100, 90, 244, 190, 195, 169, 25, 62, 51, 254, 13, 190, 86, 226, 118, 191, 130, 181, 200, 60, 177, 95, 163, 189, 150, 149, 137, 190, 77, 159, 16, 188, 188, 149, 200, 61, 162, 217, 43, 191, 143, 148, 99, 191, 124, 103, 77, 60, 175, 109, 91, 188, 148, 93, 84, 188, 132, 40, 106, 62, 64, 5, 194, 61, 158, 216, 150, 62, 89, 79, 23, 191, 183, 212, 130, 62, 139, 119, 217, 62, 140, 117, 158, 190, 3, 18, 188, 191, 15, 36, 120, 61, 37, 103, 80, 189, 56, 15, 64, 62, 221, 98, 25, 62, 28, 31, 178, 62, 128, 48, 69, 62, 118, 193, 17, 190, 116, 216, 195, 189, 93, 114, 179, 61, 91, 247, 2, 62, 131, 193, 42, 63, 245, 227, 107, 62, 136, 97, 174, 190, 16, 105, 4, 62, 12, 91, 168, 62, 248, 65, 20, 190, 77, 7, 230, 187, 252, 181, 19, 190, 176, 22, 40, 62, 115, 103, 139, 190, 157, 207, 145, 190, 135, 40, 156, 61, 249, 182, 63, 62, 72, 89, 46, 60, 201, 242, 82, 62, 222, 33, 181, 188, 72, 32, 139, 190, 129, 44, 178, 189, 139, 39, 3, 191, 237, 204, 151, 60, 145, 157, 154, 188, 219, 225, 60, 190, 4, 7, 218, 188, 42, 151, 72, 188, 215, 217, 52, 190, 203, 105, 8, 62, 253, 209, 198, 189, 82, 147, 77, 62, 48, 238, 54, 190, 126, 85, 36, 189, 91, 224, 89, 62, 235, 237, 224, 61, 140, 153, 77, 62, 211, 247, 187, 62, 60, 32, 137, 62, 148, 104, 156, 190, 131, 88, 2, 61, 137, 203, 177, 189, 117, 167, 136, 62, 204, 7, 65, 190, 168, 6, 20, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 142, 112, 50, 61, 251, 5, 172, 190, 149, 46, 172, 59, 212, 21, 189, 60, 174, 225, 44, 189, 32, 156, 95, 62, 206, 117, 117, 190, 242, 14, 234, 189, 169, 178, 212, 60, 114, 17, 43, 62, 0, 143, 63, 189, 141, 99, 4, 191, 127, 135, 98, 189, 204, 119, 197, 62, 57, 162, 182, 61, 13, 70, 85, 190, 162, 75, 76, 62, 48, 253, 105, 190, 137, 17, 232, 61, 169, 88, 225, 189, 21, 97, 28, 189, 28, 164, 233, 60, 222, 138, 233, 190, 169, 29, 111, 190, 191, 114, 219, 62, 134, 215, 208, 190, 73, 74, 85, 190, 182, 88, 22, 190, 191, 121, 5, 62, 10, 217, 37, 61, 71, 150, 119, 62, 175, 142, 93, 62, 84, 82, 84, 62, 60, 89, 209, 189, 1, 180, 133, 62, 244, 5, 34, 190, 19, 57, 162, 188, 13, 88, 22, 62, 68, 186, 220, 62, 129, 186, 42, 190, 142, 21, 71, 191, 234, 136, 248, 62, 134, 10, 8, 190, 134, 234, 137, 62, 84, 96, 176, 189, 15, 144, 17, 189, 186, 19, 170, 60, 205, 224, 26, 62, 89, 128, 180, 189, 90, 177, 123, 190, 27, 137, 25, 62, 154, 62, 38, 187, 148, 143, 79, 62, 149, 148, 223, 190, 130, 48, 134, 61, 145, 88, 185, 190, 230, 54, 30, 190, 80, 109, 4, 62, 96, 6, 62, 60, 225, 87, 199, 61, 165, 111, 166, 189, 240, 203, 69, 190, 123, 248, 66, 62, 98, 100, 42, 190, 110, 200, 148, 189, 223, 64, 40, 190, 145, 165, 203, 61, 73, 89, 142, 190, 12, 236, 17, 190, 176, 81, 252, 61, 178, 174, 167, 62, 11, 250, 144, 190, 251, 104, 142, 191, 255, 225, 2, 63, 40, 144, 223, 189, 132, 135, 78, 61, 17, 128, 80, 191, 214, 202, 23, 190, 53, 248, 15, 62, 96, 105, 176, 62, 49, 161, 190, 189, 255, 175, 119, 62, 70, 12, 130, 190, 223, 47, 9, 189, 152, 130, 194, 62, 227, 237, 1, 190, 244, 52, 195, 62, 236, 160, 134, 190, 118, 199, 8, 191, 221, 175, 29, 188, 10, 60, 243, 61, 65, 17, 131, 190, 4, 161, 144, 189, 59, 17, 165, 61, 43, 63, 156, 62, 180, 74, 204, 190, 144, 120, 136, 189, 4, 13, 55, 62, 121, 130, 101, 190, 32, 118, 206, 61, 240, 137, 11, 62, 21, 124, 119, 62, 179, 142, 14, 191, 106, 191, 4, 190, 87, 76, 12, 63, 235, 105, 226, 190, 3, 6, 31, 190, 84, 179, 142, 189, 66, 67, 114, 62, 123, 187, 249, 187, 179, 17, 123, 62, 248, 98, 237, 60, 12, 63, 141, 190, 125, 75, 90, 61, 224, 90, 136, 190, 138, 215, 25, 61, 84, 85, 8, 190, 40, 216, 195, 62, 2, 57, 24, 62, 77, 217, 57, 62, 116, 189, 81, 190, 208, 56, 160, 58, 166, 123, 183, 188, 169, 234, 155, 189, 89, 19, 192, 61, 81, 246, 32, 190, 26, 122, 22, 62, 62, 38, 213, 61, 155, 180, 4, 190, 157, 107, 31, 62, 114, 12, 12, 190, 108, 193, 205, 189, 245, 19, 141, 62, 26, 30, 227, 189, 41, 104, 118, 189, 75, 239, 90, 188, 94, 76, 57, 62, 86, 193, 171, 190, 209, 147, 150, 60, 246, 75, 212, 190, 196, 220, 66, 62, 77, 126, 235, 61, 193, 100, 196, 189, 120, 154, 90, 190, 165, 166, 65, 62, 8, 135, 155, 62, 85, 222, 245, 61, 224, 60, 15, 62, 40, 195, 145, 189, 167, 86, 133, 62, 25, 143, 109, 61, 248, 106, 201, 189, 154, 21, 182, 62, 189, 80, 214, 60, 238, 62, 160, 190, 192, 139, 71, 62, 160, 205, 105, 62, 63, 216, 140, 189, 107, 244, 181, 190, 184, 41, 137, 62, 115, 189, 99, 62, 58, 159, 209, 61, 109, 80, 10, 62, 187, 94, 12, 190, 23, 254, 49, 189, 147, 63, 56, 62, 90, 16, 202, 62, 156, 61, 40, 189, 238, 5, 1, 191, 238, 232, 232, 62, 141, 169, 28, 60, 91, 225, 160, 62, 146, 47, 128, 189, 14, 92, 57, 62, 14, 56, 32, 190, 81, 208, 30, 62, 71, 113, 215, 190, 67, 141, 136, 189, 121, 141, 115, 62, 58, 21, 3, 191, 12, 114, 25, 62, 53, 200, 0, 189, 49, 245, 55, 62, 204, 133, 245, 190, 52, 56, 13, 189, 130, 216, 238, 61, 114, 13, 71, 58, 181, 79, 109, 189, 124, 153, 83, 191, 97, 70, 206, 189, 201, 122, 94, 191, 65, 60, 165, 189, 0, 66, 53, 191, 106, 215, 191, 190, 80, 212, 133, 190, 196, 18, 0, 63, 181, 129, 167, 62, 81, 164, 22, 191, 243, 6, 118, 191, 97, 163, 235, 61, 105, 123, 54, 190, 88, 191, 50, 191, 195, 210, 91, 61, 8, 5, 190, 190, 204, 156, 177, 61, 191, 23, 34, 62, 60, 60, 19, 191, 100, 191, 248, 190, 48, 222, 0, 191, 59, 38, 34, 190, 245, 193, 112, 62, 62, 74, 160, 191, 35, 22, 36, 190, 169, 241, 249, 190, 53, 88, 11, 189, 123, 196, 14, 63, 224, 234, 221, 60, 32, 158, 67, 191, 126, 247, 245, 62, 195, 98, 0, 62, 138, 111, 9, 62, 86, 159, 160, 62, 20, 127, 36, 191, 72, 69, 140, 190, 60, 8, 223, 60, 252, 185, 35, 190, 37, 26, 115, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 168, 151, 26, 190, 204, 209, 93, 189, 180, 121, 50, 60, 27, 234, 106, 189, 213, 87, 35, 190, 97, 70, 237, 61, 243, 154, 215, 189, 107, 242, 2, 62, 240, 147, 11, 190, 31, 181, 146, 188, 201, 86, 126, 61, 185, 19, 193, 189, 233, 195, 239, 61, 56, 127, 21, 62, 44, 10, 44, 190, 124, 206, 148, 61, 129, 37, 152, 188, 145, 226, 35, 62, 157, 68, 41, 190, 200, 0, 148, 189, 92, 111, 250, 61, 75, 136, 246, 187, 101, 33, 112, 189, 59, 25, 205, 189, 177, 64, 19, 62, 128, 189, 190, 189, 128, 110, 81, 188, 79, 27, 160, 189, 33, 156, 191, 61, 137, 39, 236, 61, 105, 52, 26, 62, 209, 194, 9, 62, 122, 170, 40, 62, 160, 149, 72, 62, 236, 146, 235, 62, 184, 252, 188, 62, 28, 197, 76, 62, 33, 53, 12, 62, 75, 3, 237, 61, 241, 115, 237, 189, 20, 220, 58, 62, 8, 175, 159, 61, 18, 198, 254, 60, 40, 80, 48, 62, 120, 248, 60, 190, 66, 194, 194, 61, 168, 87, 115, 61, 95, 230, 249, 189, 157, 115, 207, 61, 61, 183, 191, 62, 248, 23, 153, 190, 252, 172, 14, 190, 2, 204, 60, 190, 93, 21, 161, 61, 234, 92, 205, 189, 129, 86, 234, 190, 191, 87, 216, 62, 226, 246, 4, 62, 144, 182, 200, 61, 217, 116, 36, 190, 119, 63, 203, 61, 172, 45, 58, 190, 213, 141, 37, 190, 122, 210, 35, 61, 12, 5, 145, 62, 150, 185, 95, 61, 156, 147, 4, 191, 142, 20, 14, 63, 102, 49, 25, 190, 76, 211, 166, 62, 241, 208, 20, 191, 146, 54, 255, 189, 17, 127, 61, 62, 46, 178, 111, 62, 216, 218, 174, 190, 54, 11, 51, 190, 46, 228, 113, 190, 214, 132, 63, 62, 249, 60, 124, 62, 52, 13, 32, 62, 135, 219, 207, 62, 49, 151, 43, 191, 12, 204, 34, 191, 89, 179, 146, 189, 60, 194, 130, 61, 104, 40, 3, 190, 184, 51, 254, 190, 123, 86, 99, 62, 138, 127, 159, 62, 152, 18, 126, 190, 88, 217, 33, 191, 156, 235, 191, 62, 64, 195, 189, 190, 140, 152, 238, 62, 32, 21, 209, 62, 150, 252, 157, 190, 145, 3, 32, 191, 223, 78, 52, 62, 220, 44, 64, 63, 213, 169, 24, 191, 10, 108, 148, 61, 137, 180, 114, 191, 112, 140, 170, 62, 138, 139, 194, 62, 175, 172, 246, 189, 72, 240, 57, 191, 228, 247, 29, 62, 224, 52, 164, 61, 245, 252, 98, 62, 216, 206, 148, 190, 66, 226, 168, 190, 108, 48, 177, 62, 172, 233, 22, 191, 220, 210, 184, 190, 132, 10, 223, 62, 79, 39, 246, 61, 74, 75, 115, 62, 236, 131, 94, 62, 21, 137, 12, 62, 246, 187, 105, 62, 219, 126, 32, 191, 108, 53, 32, 63, 250, 210, 40, 191, 6, 96, 135, 191, 151, 244, 45, 190, 88, 164, 11, 62, 81, 213, 70, 190, 209, 58, 45, 62, 105, 251, 124, 62, 133, 240, 26, 189, 76, 146, 241, 190, 81, 147, 165, 62, 58, 138, 169, 62, 10, 186, 219, 61, 24, 128, 57, 191, 76, 231, 21, 61, 157, 71, 216, 60, 145, 196, 123, 189, 87, 85, 168, 61, 200, 254, 24, 62, 21, 254, 110, 189, 187, 232, 246, 61, 209, 186, 169, 189, 107, 187, 210, 61, 182, 145, 197, 62, 117, 93, 109, 190, 219, 251, 103, 190, 203, 146, 147, 190, 165, 144, 24, 61, 32, 107, 83, 189, 158, 93, 73, 190, 97, 50, 178, 189, 99, 27, 1, 190, 98, 106, 200, 61, 49, 22, 158, 186, 79, 207, 183, 62, 50, 174, 234, 190, 130, 241, 67, 60, 144, 148, 233, 59, 243, 182, 242, 189, 140, 150, 96, 190, 49, 81, 236, 62, 195, 203, 13, 190, 127, 75, 221, 190, 52, 1, 85, 62, 32, 209, 211, 189, 27, 96, 125, 62, 31, 250, 236, 61, 27, 181, 76, 61, 68, 226, 250, 190, 9, 49, 111, 189, 128, 190, 188, 62, 196, 98, 99, 62, 116, 242, 189, 60, 76, 48, 174, 190, 24, 199, 179, 61, 121, 46, 128, 188, 149, 53, 94, 63, 113, 243, 4, 62, 97, 209, 109, 62, 172, 166, 69, 62, 27, 237, 30, 190, 103, 39, 159, 61, 135, 121, 219, 61, 231, 191, 68, 191, 59, 179, 36, 190, 185, 209, 158, 60, 149, 132, 145, 62, 195, 1, 235, 189, 28, 54, 16, 190, 156, 175, 107, 61, 177, 248, 84, 189, 55, 86, 250, 190, 27, 59, 142, 190, 23, 43, 202, 62, 75, 95, 62, 191, 17, 195, 142, 190, 80, 62, 177, 60, 246, 147, 147, 61, 182, 236, 15, 189, 58, 19, 47, 62, 84, 83, 144, 61, 176, 128, 246, 189, 239, 27, 238, 188, 42, 164, 215, 60, 135, 25, 163, 189, 163, 22, 199, 60, 237, 140, 173, 62, 197, 190, 155, 189, 208, 66, 223, 189, 11, 148, 80, 60, 238, 128, 23, 61, 111, 167, 155, 190, 14, 87, 155, 61, 179, 202, 192, 189, 160, 66, 84, 190, 141, 183, 195, 190, 255, 203, 44, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 48, 203, 189, 88, 75, 219, 188, 139, 210, 18, 61, 216, 131, 244, 60, 132, 92, 161, 62, 4, 51, 54, 188, 0, 69, 26, 190, 49, 92, 149, 61, 243, 29, 150, 62, 119, 153, 25, 190, 36, 118, 9, 190, 147, 186, 175, 62, 99, 102, 6, 62, 105, 109, 235, 61, 137, 71, 254, 60, 198, 228, 213, 61, 77, 252, 106, 62, 192, 0, 29, 62, 88, 76, 212, 189, 210, 0, 166, 189, 161, 227, 143, 61, 10, 138, 20, 190, 154, 37, 156, 62, 129, 25, 229, 61, 132, 9, 143, 62, 197, 222, 118, 189, 76, 221, 93, 60, 0, 28, 246, 61, 229, 163, 158, 62, 226, 204, 85, 62, 32, 151, 112, 62, 236, 59, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 155, 150, 191, 212, 86, 107, 191, 46, 115, 91, 62, 196, 196, 2, 191, 15, 203, 28, 189, 141, 193, 128, 63, 179, 160, 24, 189, 173, 229, 36, 190, 180, 89, 203, 188, 2, 217, 4, 190, 98, 0, 30, 191, 231, 126, 214, 63, 235, 122, 23, 189, 88, 211, 161, 63, 105, 143, 129, 190, 1, 41, 182, 62, 66, 199, 103, 189, 104, 189, 10, 190, 149, 68, 199, 62, 207, 40, 166, 62, 217, 94, 12, 63, 53, 193, 211, 189, 66, 38, 53, 190, 116, 148, 149, 62, 247, 215, 163, 191, 102, 101, 44, 189, 237, 109, 120, 190, 252, 87, 19, 63, 172, 78, 243, 190, 169, 65, 102, 62, 21, 152, 38, 191, 87, 67, 246, 61, 157, 122, 153, 62, 15, 113, 25, 62, 206, 57, 9, 187, 141, 198, 138, 188, 215, 137, 80, 190, 230, 248, 98, 62, 230, 137, 44, 62, 177, 97, 140, 190, 71, 165, 134, 190, 168, 223, 247, 189, 211, 99, 126, 62, 164, 239, 20, 63, 229, 4, 56, 190, 151, 78, 139, 62, 206, 145, 148, 190, 41, 51, 135, 190, 41, 114, 183, 190, 177, 188, 176, 188, 193, 33, 132, 61, 136, 177, 172, 62, 90, 151, 159, 62, 184, 147, 93, 62, 87, 194, 4, 190, 201, 48, 91, 190, 253, 111, 183, 62, 20, 91, 21, 190, 34, 91, 136, 60, 189, 222, 145, 189, 80, 147, 183, 62, 72, 45, 132, 190, 72, 73, 124, 62, 193, 164, 31, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 229, 246, 189, 93, 196, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {126, 191, 244, 62, 14, 71, 92, 63, 60, 134, 228, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {124, 192, 143, 191, 161, 141, 67, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}