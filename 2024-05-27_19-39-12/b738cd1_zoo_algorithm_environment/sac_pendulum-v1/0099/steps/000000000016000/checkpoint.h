// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 240, 60, 190, 240, 239, 153, 63, 11, 0, 1, 63, 83, 107, 240, 61, 74, 208, 197, 63, 224, 224, 157, 62, 92, 5, 56, 190, 59, 99, 68, 63, 189, 206, 8, 63, 82, 42, 211, 189, 194, 44, 96, 190, 202, 255, 39, 63, 23, 128, 197, 189, 126, 97, 12, 62, 180, 254, 154, 62, 71, 95, 202, 62, 78, 28, 1, 63, 159, 36, 17, 191, 102, 173, 65, 63, 149, 250, 64, 191, 21, 47, 85, 190, 34, 38, 230, 190, 245, 167, 135, 191, 248, 19, 235, 189, 54, 151, 129, 63, 54, 180, 133, 62, 100, 148, 133, 62, 39, 118, 35, 63, 97, 230, 120, 191, 20, 29, 129, 190, 202, 113, 133, 62, 54, 151, 31, 191, 82, 14, 135, 61, 37, 128, 20, 191, 64, 181, 141, 62, 116, 226, 190, 62, 170, 121, 48, 63, 52, 85, 111, 63, 242, 154, 144, 62, 130, 138, 236, 189, 201, 4, 1, 63, 39, 69, 230, 188, 167, 85, 183, 61, 210, 181, 223, 62, 22, 149, 158, 190, 188, 39, 135, 190, 102, 205, 241, 62, 161, 107, 20, 63, 218, 1, 73, 190, 202, 208, 67, 191, 239, 28, 56, 191, 120, 165, 196, 61, 148, 59, 121, 191, 34, 127, 248, 60, 43, 1, 105, 188, 241, 216, 17, 63, 74, 146, 134, 189, 237, 59, 60, 190, 229, 94, 177, 191, 238, 213, 223, 190, 208, 120, 92, 190, 146, 60, 20, 63, 160, 59, 0, 63, 71, 243, 118, 63, 26, 48, 160, 62, 8, 36, 212, 61, 168, 186, 138, 62, 31, 203, 157, 190, 112, 182, 210, 62, 248, 125, 250, 190, 87, 253, 121, 191, 241, 163, 104, 62, 165, 191, 230, 190, 178, 123, 30, 62, 246, 21, 203, 190, 18, 239, 200, 61, 70, 66, 136, 63, 16, 116, 118, 62, 60, 122, 70, 191, 2, 25, 210, 190, 54, 15, 181, 188, 56, 128, 139, 62, 93, 157, 188, 62, 0, 129, 198, 62, 207, 77, 29, 191, 226, 122, 149, 191, 63, 249, 176, 190, 28, 102, 38, 191, 199, 137, 137, 62, 3, 66, 180, 190, 238, 81, 242, 62, 18, 34, 2, 191, 122, 52, 77, 190, 228, 145, 129, 63, 21, 166, 84, 63, 83, 197, 205, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 212, 141, 190, 183, 236, 171, 60, 213, 126, 31, 63, 62, 242, 228, 190, 83, 151, 207, 190, 236, 248, 52, 62, 145, 65, 163, 62, 223, 206, 178, 62, 139, 221, 70, 191, 16, 55, 83, 190, 114, 87, 40, 63, 35, 204, 173, 190, 28, 53, 221, 190, 158, 47, 175, 62, 39, 11, 241, 188, 87, 186, 142, 59, 140, 125, 43, 60, 223, 162, 99, 62, 76, 23, 179, 62, 26, 95, 196, 190, 5, 55, 209, 62, 5, 50, 134, 62, 138, 102, 31, 63, 58, 41, 12, 190, 1, 7, 247, 190, 79, 64, 46, 62, 129, 51, 189, 62, 212, 193, 252, 60, 237, 90, 208, 189, 198, 85, 233, 62, 250, 29, 39, 191, 252, 61, 162, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 192, 216, 190, 175, 183, 244, 190, 246, 123, 190, 190, 33, 19, 81, 190, 36, 120, 82, 190, 93, 85, 231, 190, 170, 121, 190, 62, 242, 1, 137, 62, 203, 141, 83, 190, 109, 68, 206, 62, 61, 212, 58, 62, 28, 24, 50, 61, 57, 165, 128, 191, 238, 219, 244, 190, 148, 6, 60, 190, 193, 12, 31, 190, 44, 87, 133, 190, 25, 236, 226, 61, 206, 25, 209, 190, 105, 29, 84, 190, 253, 177, 190, 189, 4, 200, 108, 189, 39, 14, 142, 62, 78, 158, 160, 62, 160, 104, 202, 190, 70, 139, 8, 191, 132, 30, 18, 62, 62, 71, 87, 190, 165, 95, 208, 190, 42, 200, 69, 191, 208, 209, 12, 191, 11, 65, 202, 190, 121, 122, 146, 62, 67, 28, 233, 188, 161, 222, 198, 60, 60, 184, 142, 190, 158, 245, 192, 61, 31, 226, 170, 61, 253, 249, 54, 191, 119, 58, 59, 191, 26, 222, 242, 190, 136, 247, 59, 191, 107, 122, 196, 191, 112, 182, 103, 190, 224, 251, 3, 190, 154, 77, 156, 60, 149, 90, 99, 62, 162, 175, 248, 187, 106, 96, 221, 189, 154, 158, 231, 190, 251, 69, 39, 62, 233, 230, 211, 190, 30, 25, 230, 61, 170, 151, 145, 189, 205, 115, 123, 190, 170, 62, 73, 190, 80, 91, 101, 62, 205, 31, 22, 62, 122, 60, 208, 191, 141, 31, 97, 190, 80, 24, 8, 191, 245, 231, 27, 61, 13, 181, 72, 190, 51, 246, 133, 61, 83, 224, 233, 189, 171, 133, 128, 190, 164, 207, 56, 59, 161, 205, 165, 61, 178, 157, 176, 189, 159, 193, 176, 188, 194, 77, 154, 188, 100, 243, 229, 61, 72, 169, 0, 191, 184, 151, 31, 62, 201, 203, 50, 62, 205, 22, 136, 62, 67, 197, 153, 190, 100, 246, 75, 191, 61, 190, 237, 189, 139, 61, 7, 62, 72, 20, 80, 190, 27, 64, 60, 190, 39, 78, 238, 190, 155, 108, 84, 60, 75, 127, 175, 61, 207, 186, 129, 190, 49, 173, 52, 62, 105, 169, 178, 190, 237, 55, 167, 190, 26, 53, 24, 189, 164, 49, 7, 61, 144, 223, 248, 189, 172, 120, 167, 190, 73, 65, 100, 190, 151, 246, 184, 62, 244, 131, 55, 187, 159, 220, 218, 190, 21, 47, 93, 62, 87, 151, 13, 190, 58, 82, 41, 191, 195, 198, 10, 191, 228, 244, 192, 62, 131, 229, 158, 61, 146, 244, 74, 62, 71, 207, 23, 61, 57, 39, 229, 61, 197, 73, 178, 61, 80, 82, 20, 190, 236, 29, 148, 189, 72, 29, 246, 61, 105, 189, 162, 62, 30, 113, 204, 190, 254, 52, 120, 61, 47, 198, 122, 61, 239, 86, 225, 61, 236, 169, 6, 61, 35, 106, 218, 190, 0, 169, 171, 62, 49, 60, 233, 61, 114, 125, 43, 62, 15, 71, 145, 190, 146, 137, 138, 62, 240, 34, 43, 62, 217, 90, 193, 60, 26, 56, 193, 189, 54, 216, 69, 190, 231, 77, 22, 189, 143, 102, 20, 62, 158, 195, 77, 189, 126, 208, 97, 190, 31, 126, 205, 189, 102, 249, 163, 60, 157, 97, 160, 61, 193, 207, 104, 60, 3, 254, 197, 188, 106, 8, 226, 61, 211, 0, 255, 61, 138, 175, 223, 189, 140, 226, 173, 62, 80, 249, 160, 62, 102, 181, 24, 60, 234, 90, 117, 188, 53, 161, 45, 61, 68, 72, 174, 61, 120, 4, 57, 189, 156, 42, 20, 62, 120, 159, 180, 188, 171, 87, 51, 190, 44, 80, 197, 189, 73, 46, 19, 62, 19, 10, 237, 61, 213, 42, 178, 61, 249, 243, 122, 62, 207, 177, 35, 61, 175, 188, 110, 62, 108, 253, 38, 190, 129, 79, 139, 58, 147, 236, 69, 62, 110, 113, 203, 190, 144, 39, 158, 61, 149, 147, 137, 191, 42, 171, 78, 191, 211, 78, 201, 62, 52, 197, 39, 189, 230, 236, 110, 190, 56, 250, 84, 61, 74, 79, 122, 190, 201, 67, 147, 190, 134, 249, 29, 187, 186, 237, 83, 189, 57, 109, 245, 189, 88, 18, 4, 63, 206, 113, 136, 190, 76, 230, 54, 62, 193, 131, 119, 62, 173, 38, 180, 62, 228, 101, 162, 190, 78, 48, 117, 190, 134, 26, 240, 188, 141, 104, 194, 61, 47, 123, 176, 62, 249, 231, 58, 191, 176, 214, 160, 59, 234, 109, 228, 190, 161, 30, 137, 190, 108, 225, 46, 191, 59, 3, 62, 190, 248, 64, 144, 190, 102, 110, 21, 190, 231, 79, 4, 188, 38, 75, 165, 62, 71, 233, 19, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 68, 77, 183, 189, 33, 135, 20, 190, 124, 57, 84, 60, 54, 106, 184, 189, 208, 253, 21, 189, 71, 12, 196, 62, 231, 11, 148, 190, 217, 17, 23, 190, 69, 225, 112, 62, 160, 16, 40, 191, 152, 61, 60, 189, 137, 141, 161, 62, 201, 65, 89, 61, 14, 31, 30, 62, 126, 31, 123, 62, 216, 147, 134, 61, 118, 121, 70, 190, 235, 124, 199, 61, 92, 57, 226, 60, 14, 104, 8, 191, 166, 163, 193, 189, 43, 4, 157, 62, 186, 164, 154, 62, 242, 207, 177, 189, 43, 217, 4, 191, 157, 39, 113, 59, 33, 250, 32, 60, 110, 228, 7, 62, 179, 12, 232, 190, 241, 237, 195, 61, 209, 85, 223, 190, 144, 160, 244, 61, 114, 77, 115, 189, 222, 229, 63, 190, 218, 180, 67, 62, 45, 138, 210, 60, 12, 193, 105, 190, 171, 183, 71, 62, 4, 172, 67, 62, 22, 49, 34, 62, 102, 85, 76, 190, 212, 114, 169, 62, 237, 252, 134, 62, 246, 186, 135, 62, 194, 44, 177, 190, 76, 163, 45, 62, 216, 154, 139, 189, 163, 242, 213, 61, 31, 228, 142, 190, 108, 208, 151, 62, 145, 235, 171, 61, 48, 47, 138, 190, 212, 51, 207, 61, 241, 186, 166, 61, 70, 28, 23, 62, 14, 89, 156, 190, 115, 128, 140, 190, 249, 186, 149, 188, 160, 124, 203, 61, 47, 118, 69, 190, 64, 244, 202, 189, 97, 19, 221, 61, 10, 31, 214, 61, 73, 151, 4, 61, 108, 196, 5, 190, 62, 96, 70, 189, 6, 185, 219, 189, 151, 73, 91, 62, 196, 232, 30, 61, 195, 112, 49, 190, 35, 130, 159, 190, 15, 180, 73, 62, 19, 114, 51, 62, 46, 104, 25, 191, 110, 26, 177, 61, 21, 11, 96, 190, 190, 37, 12, 62, 87, 159, 30, 62, 129, 185, 91, 189, 184, 58, 222, 187, 112, 251, 77, 62, 186, 119, 85, 61, 49, 228, 15, 61, 252, 94, 64, 190, 81, 203, 53, 190, 184, 51, 7, 63, 82, 178, 29, 190, 243, 218, 183, 61, 62, 89, 162, 62, 231, 69, 180, 61, 193, 208, 144, 189, 159, 94, 168, 61, 243, 35, 17, 62, 198, 119, 45, 62, 107, 91, 247, 190, 35, 214, 174, 62, 78, 64, 65, 190, 169, 16, 39, 62, 255, 122, 135, 190, 161, 16, 22, 62, 66, 214, 99, 58, 126, 115, 222, 188, 174, 127, 14, 191, 121, 171, 130, 62, 157, 59, 57, 63, 20, 233, 2, 191, 83, 25, 190, 62, 32, 38, 106, 190, 230, 58, 234, 62, 172, 89, 179, 188, 34, 133, 41, 61, 69, 2, 114, 190, 235, 144, 138, 60, 67, 52, 102, 62, 201, 165, 156, 61, 209, 9, 28, 189, 13, 76, 149, 190, 181, 189, 194, 62, 117, 154, 31, 187, 19, 50, 28, 63, 181, 182, 183, 61, 255, 199, 174, 59, 223, 249, 138, 62, 11, 136, 15, 62, 148, 83, 78, 60, 49, 227, 82, 62, 211, 77, 202, 190, 157, 71, 229, 62, 168, 204, 12, 191, 157, 16, 7, 191, 58, 116, 98, 62, 108, 140, 146, 187, 215, 149, 81, 190, 163, 6, 67, 62, 81, 43, 67, 62, 251, 183, 4, 189, 8, 134, 30, 191, 210, 89, 43, 62, 92, 184, 7, 62, 178, 25, 9, 62, 95, 253, 188, 191, 233, 21, 6, 190, 135, 207, 162, 189, 227, 163, 125, 62, 90, 120, 141, 191, 245, 41, 237, 61, 93, 183, 94, 190, 179, 249, 138, 190, 177, 133, 187, 61, 46, 10, 134, 190, 246, 164, 106, 62, 82, 103, 67, 190, 93, 238, 206, 190, 248, 35, 156, 190, 18, 204, 225, 61, 117, 246, 253, 189, 224, 42, 163, 191, 129, 42, 45, 62, 205, 63, 161, 189, 92, 52, 23, 190, 91, 104, 16, 190, 210, 10, 128, 189, 47, 203, 116, 61, 107, 127, 96, 61, 55, 71, 12, 190, 109, 252, 41, 188, 88, 5, 132, 190, 251, 85, 92, 62, 49, 163, 141, 62, 104, 52, 224, 190, 146, 242, 121, 62, 237, 47, 137, 190, 173, 71, 196, 189, 207, 148, 65, 62, 117, 139, 132, 190, 173, 27, 205, 187, 101, 51, 150, 60, 218, 223, 25, 62, 138, 54, 142, 62, 142, 119, 71, 190, 217, 2, 111, 60, 224, 79, 90, 62, 15, 156, 3, 62, 206, 240, 205, 61, 231, 17, 202, 62, 187, 21, 78, 61, 17, 157, 139, 62, 166, 245, 228, 61, 243, 228, 109, 60, 14, 219, 13, 62, 217, 180, 22, 191, 243, 30, 64, 62, 146, 54, 41, 191, 234, 184, 136, 191, 101, 198, 180, 62, 104, 76, 81, 191, 161, 229, 0, 191, 255, 55, 156, 62, 189, 28, 151, 62, 210, 119, 182, 190, 198, 97, 17, 191, 114, 64, 15, 63, 229, 133, 35, 60, 19, 209, 82, 190, 57, 132, 62, 191, 104, 84, 50, 61, 89, 143, 59, 189, 36, 251, 215, 62, 195, 30, 175, 190, 242, 165, 210, 61, 32, 117, 23, 62, 164, 34, 116, 190, 125, 51, 182, 62, 54, 146, 38, 61, 25, 68, 188, 62, 128, 30, 139, 191, 48, 19, 157, 61, 242, 206, 203, 190, 242, 222, 156, 190, 216, 251, 227, 190, 228, 49, 4, 191, 45, 193, 19, 62, 238, 160, 107, 191, 221, 112, 48, 190, 16, 164, 27, 191, 229, 216, 103, 190, 33, 205, 255, 61, 101, 145, 203, 61, 160, 71, 194, 189, 31, 120, 150, 60, 113, 34, 45, 62, 159, 253, 172, 191, 245, 193, 25, 189, 4, 242, 110, 188, 62, 70, 161, 190, 185, 151, 200, 189, 25, 37, 166, 61, 129, 149, 232, 189, 196, 184, 233, 61, 202, 51, 50, 61, 115, 145, 248, 190, 227, 96, 39, 190, 233, 53, 36, 61, 215, 144, 57, 61, 183, 52, 175, 187, 234, 143, 170, 62, 91, 78, 202, 60, 183, 15, 210, 190, 195, 169, 25, 62, 230, 43, 21, 190, 86, 226, 118, 191, 246, 250, 248, 60, 177, 95, 163, 189, 173, 233, 124, 190, 15, 175, 18, 188, 55, 29, 192, 61, 90, 107, 42, 191, 94, 25, 106, 191, 90, 70, 49, 59, 24, 20, 143, 188, 169, 99, 35, 188, 183, 37, 114, 62, 206, 5, 179, 61, 170, 2, 157, 62, 245, 146, 25, 191, 234, 41, 132, 62, 164, 128, 210, 62, 70, 202, 158, 190, 217, 172, 189, 191, 52, 159, 102, 61, 190, 196, 65, 189, 253, 38, 62, 62, 81, 203, 30, 62, 69, 203, 174, 62, 71, 185, 65, 62, 150, 105, 252, 189, 76, 24, 216, 189, 30, 100, 150, 61, 156, 27, 244, 61, 222, 246, 43, 63, 207, 246, 113, 62, 165, 7, 186, 190, 134, 239, 245, 61, 13, 142, 156, 62, 210, 136, 2, 190, 46, 149, 138, 187, 63, 16, 4, 190, 141, 84, 23, 62, 38, 122, 160, 190, 112, 156, 148, 190, 19, 243, 248, 60, 2, 101, 225, 61, 249, 195, 166, 189, 125, 87, 59, 62, 144, 213, 195, 188, 59, 198, 143, 190, 47, 76, 212, 189, 198, 162, 2, 191, 57, 167, 231, 60, 212, 182, 151, 189, 32, 244, 44, 190, 82, 244, 51, 189, 107, 62, 242, 188, 191, 108, 103, 190, 210, 186, 222, 61, 246, 13, 3, 190, 79, 216, 59, 62, 10, 206, 70, 190, 165, 146, 225, 189, 181, 48, 100, 62, 139, 106, 199, 61, 35, 246, 235, 61, 0, 152, 178, 62, 67, 208, 125, 62, 133, 174, 144, 190, 77, 81, 60, 60, 41, 74, 190, 189, 71, 46, 115, 62, 81, 177, 93, 190, 136, 190, 162, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 167, 115, 122, 189, 13, 247, 155, 190, 89, 118, 215, 60, 212, 21, 189, 60, 174, 225, 44, 189, 1, 1, 101, 62, 133, 37, 127, 190, 55, 55, 19, 190, 154, 33, 15, 62, 100, 137, 23, 62, 87, 214, 15, 190, 50, 121, 4, 191, 97, 198, 166, 187, 94, 203, 196, 62, 152, 111, 191, 61, 93, 32, 85, 190, 207, 54, 72, 62, 246, 60, 151, 190, 153, 13, 235, 61, 240, 135, 238, 189, 113, 157, 27, 190, 168, 185, 6, 61, 113, 250, 201, 190, 50, 48, 236, 190, 58, 204, 221, 62, 143, 55, 197, 190, 197, 177, 125, 190, 147, 140, 26, 60, 144, 191, 238, 61, 68, 135, 13, 61, 4, 212, 135, 62, 192, 40, 95, 62, 150, 198, 60, 62, 77, 24, 207, 189, 252, 220, 124, 62, 184, 173, 52, 190, 170, 55, 28, 189, 164, 54, 31, 62, 245, 235, 232, 62, 87, 182, 233, 189, 61, 191, 61, 191, 234, 202, 3, 63, 29, 109, 242, 189, 63, 95, 124, 62, 0, 128, 182, 189, 178, 68, 163, 188, 220, 225, 244, 60, 16, 67, 0, 62, 191, 166, 145, 189, 227, 98, 94, 190, 254, 113, 31, 62, 3, 6, 243, 60, 189, 11, 61, 62, 28, 85, 224, 190, 230, 184, 137, 61, 131, 232, 184, 190, 41, 241, 13, 190, 250, 7, 0, 62, 141, 228, 255, 60, 243, 179, 167, 61, 88, 205, 62, 189, 66, 78, 50, 190, 111, 40, 59, 62, 130, 39, 59, 190, 43, 155, 236, 189, 89, 41, 106, 190, 26, 41, 196, 61, 242, 182, 143, 190, 79, 102, 35, 190, 252, 144, 3, 62, 197, 194, 179, 62, 100, 152, 133, 190, 47, 224, 130, 191, 93, 32, 9, 63, 33, 166, 179, 189, 23, 250, 67, 60, 245, 60, 63, 191, 145, 13, 41, 190, 193, 221, 25, 62, 250, 218, 171, 62, 8, 175, 139, 189, 116, 58, 139, 62, 26, 81, 136, 190, 12, 223, 3, 58, 190, 192, 191, 62, 127, 0, 214, 189, 182, 11, 205, 62, 254, 79, 134, 190, 202, 94, 2, 191, 16, 48, 16, 189, 192, 56, 151, 61, 151, 232, 124, 190, 183, 83, 23, 189, 27, 201, 164, 61, 40, 176, 161, 62, 244, 57, 194, 190, 75, 237, 161, 189, 116, 58, 51, 62, 207, 172, 103, 190, 199, 205, 178, 61, 145, 72, 214, 61, 58, 53, 47, 62, 73, 30, 2, 191, 161, 101, 212, 189, 154, 234, 10, 63, 21, 182, 150, 190, 84, 57, 12, 190, 37, 169, 205, 189, 253, 89, 104, 62, 57, 35, 201, 187, 130, 67, 65, 61, 39, 210, 150, 60, 87, 52, 216, 190, 75, 83, 157, 61, 111, 0, 145, 190, 138, 215, 25, 61, 152, 234, 12, 190, 185, 197, 209, 62, 67, 226, 30, 62, 44, 125, 42, 62, 68, 34, 83, 190, 216, 81, 149, 187, 147, 220, 255, 188, 217, 73, 151, 189, 89, 19, 192, 61, 50, 226, 246, 190, 26, 122, 22, 62, 202, 143, 234, 61, 108, 218, 204, 189, 18, 88, 50, 62, 182, 112, 12, 190, 52, 192, 236, 189, 94, 93, 130, 62, 194, 95, 2, 190, 0, 219, 140, 189, 149, 33, 196, 188, 191, 20, 50, 62, 251, 11, 173, 190, 194, 165, 132, 60, 50, 99, 199, 190, 215, 78, 81, 62, 38, 129, 233, 61, 244, 223, 216, 189, 146, 203, 83, 190, 21, 88, 57, 62, 194, 67, 149, 62, 180, 59, 232, 61, 44, 225, 253, 61, 253, 165, 145, 189, 112, 38, 133, 62, 47, 87, 78, 61, 30, 248, 17, 190, 216, 196, 179, 62, 9, 193, 13, 61, 38, 176, 146, 190, 14, 60, 82, 62, 99, 243, 98, 62, 170, 59, 153, 189, 158, 187, 189, 190, 173, 115, 139, 62, 95, 186, 87, 62, 214, 94, 207, 61, 179, 37, 6, 62, 42, 88, 9, 190, 181, 255, 10, 189, 15, 155, 101, 62, 223, 163, 207, 62, 159, 158, 136, 189, 23, 118, 245, 190, 235, 171, 229, 62, 239, 57, 61, 60, 74, 19, 158, 62, 238, 161, 15, 189, 235, 207, 70, 62, 19, 189, 243, 189, 61, 5, 25, 62, 25, 126, 211, 190, 247, 164, 149, 189, 81, 181, 130, 62, 51, 169, 2, 191, 186, 127, 17, 62, 11, 68, 146, 188, 162, 178, 59, 62, 62, 183, 248, 190, 28, 255, 21, 188, 186, 227, 234, 61, 151, 187, 109, 189, 118, 22, 125, 189, 99, 218, 68, 191, 189, 199, 206, 189, 190, 15, 100, 191, 82, 126, 137, 189, 63, 56, 55, 191, 211, 88, 193, 190, 90, 68, 148, 190, 237, 223, 1, 63, 51, 171, 173, 62, 111, 250, 0, 191, 23, 236, 95, 191, 0, 205, 214, 61, 39, 192, 127, 189, 142, 106, 45, 191, 247, 186, 141, 61, 180, 127, 218, 190, 58, 150, 207, 61, 60, 135, 26, 62, 178, 111, 2, 191, 204, 216, 0, 191, 142, 16, 180, 190, 241, 12, 13, 190, 248, 91, 110, 62, 31, 243, 138, 191, 184, 71, 64, 190, 242, 179, 172, 190, 160, 49, 221, 188, 141, 120, 13, 63, 234, 94, 246, 61, 145, 188, 65, 191, 240, 69, 225, 62, 17, 112, 31, 62, 77, 218, 14, 62, 136, 208, 171, 62, 20, 127, 36, 191, 85, 155, 6, 190, 60, 8, 223, 60, 252, 185, 35, 190, 37, 26, 115, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 168, 151, 26, 190, 204, 209, 93, 189, 180, 121, 50, 60, 27, 234, 106, 189, 213, 87, 35, 190, 97, 70, 237, 61, 243, 154, 215, 189, 107, 242, 2, 62, 240, 147, 11, 190, 31, 181, 146, 188, 201, 86, 126, 61, 185, 19, 193, 189, 233, 195, 239, 61, 56, 127, 21, 62, 44, 10, 44, 190, 124, 206, 148, 61, 129, 37, 152, 188, 145, 226, 35, 62, 157, 68, 41, 190, 200, 0, 148, 189, 92, 111, 250, 61, 75, 136, 246, 187, 101, 33, 112, 189, 59, 25, 205, 189, 177, 64, 19, 62, 128, 189, 190, 189, 247, 248, 11, 188, 74, 113, 121, 189, 101, 134, 186, 61, 56, 128, 227, 61, 186, 118, 16, 62, 10, 161, 20, 62, 108, 252, 33, 62, 212, 190, 28, 62, 231, 82, 225, 62, 9, 113, 184, 62, 27, 53, 70, 62, 99, 218, 7, 62, 199, 79, 216, 61, 98, 19, 182, 189, 126, 171, 117, 62, 222, 48, 156, 61, 254, 86, 54, 60, 132, 141, 34, 62, 13, 123, 35, 190, 146, 164, 249, 59, 178, 114, 111, 61, 51, 72, 240, 189, 68, 56, 193, 61, 175, 23, 187, 62, 161, 10, 150, 190, 76, 42, 0, 190, 210, 85, 68, 190, 33, 141, 171, 61, 193, 114, 76, 190, 249, 35, 216, 190, 184, 22, 206, 62, 118, 248, 6, 62, 243, 95, 175, 61, 137, 144, 65, 190, 136, 207, 185, 61, 33, 220, 58, 190, 138, 131, 35, 190, 169, 52, 118, 61, 191, 125, 144, 62, 31, 23, 153, 61, 213, 201, 4, 191, 23, 192, 13, 63, 98, 101, 26, 190, 227, 254, 160, 62, 152, 191, 22, 191, 167, 47, 0, 190, 190, 253, 82, 62, 46, 226, 103, 62, 147, 78, 168, 190, 213, 189, 45, 190, 212, 14, 113, 190, 216, 202, 98, 62, 14, 24, 114, 62, 142, 72, 29, 62, 124, 26, 208, 62, 113, 38, 40, 191, 246, 169, 22, 191, 137, 114, 193, 189, 182, 156, 60, 61, 33, 206, 17, 190, 88, 143, 224, 190, 77, 79, 95, 62, 113, 180, 152, 62, 125, 96, 130, 190, 226, 176, 12, 191, 34, 166, 173, 62, 199, 61, 191, 190, 57, 183, 226, 62, 244, 169, 199, 62, 155, 85, 169, 190, 143, 206, 33, 191, 254, 54, 77, 62, 32, 134, 66, 63, 13, 175, 22, 191, 65, 6, 162, 61, 220, 171, 111, 191, 30, 84, 170, 62, 81, 126, 187, 62, 9, 206, 6, 190, 4, 214, 42, 191, 132, 118, 33, 62, 22, 181, 225, 61, 36, 32, 83, 62, 115, 118, 148, 190, 93, 122, 160, 190, 105, 200, 173, 62, 149, 226, 22, 191, 108, 206, 90, 190, 205, 37, 220, 62, 181, 178, 211, 61, 249, 17, 131, 62, 115, 78, 114, 62, 175, 139, 17, 62, 167, 206, 101, 62, 112, 127, 36, 191, 196, 180, 30, 63, 63, 40, 31, 191, 110, 65, 133, 191, 245, 217, 44, 190, 44, 20, 10, 62, 60, 63, 55, 190, 89, 117, 51, 62, 195, 16, 124, 62, 0, 81, 176, 188, 3, 1, 250, 190, 79, 181, 169, 62, 108, 221, 165, 62, 69, 49, 4, 62, 173, 228, 57, 191, 138, 251, 0, 61, 119, 95, 203, 60, 239, 0, 100, 189, 39, 37, 169, 61, 153, 127, 16, 62, 104, 66, 122, 189, 236, 209, 14, 62, 75, 32, 174, 189, 165, 20, 194, 61, 62, 84, 196, 62, 253, 108, 97, 190, 140, 47, 101, 190, 226, 246, 149, 190, 171, 97, 61, 61, 242, 5, 143, 189, 41, 78, 54, 190, 10, 46, 186, 189, 166, 81, 229, 189, 136, 56, 185, 61, 248, 218, 18, 190, 235, 48, 128, 62, 86, 18, 7, 191, 199, 33, 154, 60, 19, 20, 58, 189, 181, 20, 5, 190, 95, 39, 127, 190, 99, 157, 218, 62, 56, 209, 236, 189, 253, 158, 238, 190, 185, 192, 59, 62, 37, 78, 79, 190, 248, 255, 186, 61, 65, 221, 209, 61, 197, 233, 42, 61, 42, 129, 5, 191, 0, 94, 142, 189, 64, 77, 166, 62, 56, 189, 85, 62, 172, 233, 142, 187, 80, 159, 196, 190, 199, 130, 178, 61, 138, 92, 103, 189, 98, 27, 73, 63, 128, 94, 251, 61, 205, 152, 15, 62, 69, 6, 53, 62, 226, 66, 34, 190, 205, 166, 102, 61, 220, 247, 206, 61, 226, 22, 79, 191, 173, 137, 21, 190, 215, 147, 121, 60, 240, 113, 143, 62, 30, 43, 207, 189, 107, 76, 242, 189, 9, 226, 148, 61, 243, 25, 130, 59, 58, 96, 212, 190, 159, 147, 142, 190, 137, 240, 196, 62, 190, 1, 47, 191, 175, 219, 116, 190, 130, 25, 12, 61, 109, 159, 46, 61, 152, 197, 162, 188, 160, 14, 104, 62, 37, 34, 156, 61, 125, 194, 244, 189, 13, 49, 228, 58, 87, 251, 23, 61, 135, 25, 163, 189, 216, 74, 24, 61, 99, 174, 171, 62, 159, 223, 116, 189, 201, 207, 89, 189, 175, 67, 114, 59, 12, 31, 28, 61, 97, 123, 102, 190, 85, 243, 156, 61, 179, 202, 192, 189, 143, 26, 252, 189, 141, 183, 195, 190, 62, 71, 39, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 128, 23, 190, 14, 239, 23, 189, 176, 128, 138, 60, 44, 152, 94, 60, 6, 217, 162, 62, 4, 51, 54, 188, 0, 69, 26, 190, 184, 136, 154, 61, 175, 35, 150, 62, 140, 100, 26, 190, 86, 211, 15, 190, 7, 33, 165, 62, 149, 11, 4, 62, 77, 78, 223, 61, 188, 133, 231, 60, 61, 175, 189, 61, 19, 96, 104, 62, 192, 0, 29, 62, 67, 70, 1, 190, 92, 89, 118, 189, 210, 219, 158, 61, 179, 55, 243, 189, 72, 19, 155, 62, 173, 83, 237, 61, 179, 116, 137, 62, 197, 222, 118, 189, 189, 17, 119, 60, 169, 63, 241, 61, 226, 184, 156, 62, 143, 70, 81, 62, 227, 24, 89, 62, 46, 65, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 234, 136, 191, 185, 162, 90, 191, 86, 252, 39, 62, 97, 129, 255, 190, 249, 72, 52, 189, 141, 193, 128, 63, 179, 160, 24, 189, 62, 72, 36, 190, 51, 244, 177, 188, 85, 186, 32, 190, 206, 225, 31, 191, 69, 63, 208, 63, 172, 77, 74, 189, 185, 13, 166, 63, 156, 148, 137, 190, 113, 152, 188, 62, 27, 118, 90, 189, 104, 189, 10, 190, 169, 109, 204, 62, 213, 225, 149, 62, 185, 73, 2, 63, 220, 138, 212, 189, 174, 83, 61, 190, 136, 138, 158, 62, 13, 57, 158, 191, 102, 101, 44, 189, 245, 32, 118, 190, 238, 69, 24, 63, 252, 191, 4, 191, 197, 254, 107, 62, 254, 129, 33, 191, 60, 225, 106, 61, 7, 252, 163, 62, 159, 64, 131, 62, 42, 212, 70, 189, 233, 43, 156, 188, 219, 35, 78, 190, 230, 248, 98, 62, 230, 137, 44, 62, 255, 22, 125, 190, 169, 21, 129, 190, 11, 232, 227, 189, 146, 50, 126, 62, 144, 41, 218, 62, 203, 138, 43, 190, 61, 148, 143, 62, 89, 43, 148, 190, 11, 152, 112, 190, 174, 35, 176, 190, 177, 188, 176, 188, 189, 179, 182, 61, 127, 40, 186, 62, 156, 124, 129, 62, 101, 74, 77, 62, 215, 209, 255, 189, 44, 10, 87, 190, 62, 118, 146, 62, 20, 91, 21, 190, 219, 35, 10, 61, 152, 131, 118, 189, 46, 38, 164, 62, 71, 72, 118, 190, 150, 176, 87, 62, 250, 205, 20, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 17, 238, 189, 153, 117, 75, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 117, 77, 62, 136, 116, 45, 62, 241, 46, 66, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 147, 127, 63, 150, 127, 117, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}