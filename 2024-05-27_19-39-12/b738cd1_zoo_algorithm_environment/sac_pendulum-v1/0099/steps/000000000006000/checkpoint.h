// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 82, 173, 190, 193, 180, 124, 63, 61, 74, 189, 62, 237, 124, 58, 62, 147, 1, 107, 63, 30, 39, 236, 62, 181, 37, 173, 189, 69, 176, 72, 63, 0, 98, 28, 63, 153, 147, 144, 190, 14, 0, 128, 190, 44, 184, 46, 63, 212, 113, 204, 189, 9, 231, 232, 60, 150, 156, 181, 62, 33, 156, 156, 62, 82, 177, 31, 63, 73, 73, 30, 191, 170, 46, 49, 63, 188, 24, 85, 191, 20, 109, 78, 190, 66, 34, 223, 190, 58, 63, 114, 191, 243, 140, 2, 61, 68, 180, 89, 63, 44, 42, 95, 62, 81, 156, 133, 62, 115, 167, 4, 63, 9, 81, 130, 191, 93, 48, 26, 190, 217, 239, 165, 189, 6, 227, 36, 191, 65, 59, 182, 61, 164, 87, 133, 190, 248, 181, 238, 189, 152, 7, 237, 62, 212, 81, 21, 63, 108, 98, 70, 63, 173, 18, 112, 62, 216, 4, 152, 61, 236, 93, 39, 63, 175, 22, 4, 190, 73, 249, 254, 62, 175, 107, 215, 62, 139, 78, 21, 191, 182, 101, 115, 190, 162, 115, 237, 62, 234, 201, 26, 63, 75, 123, 223, 60, 13, 78, 213, 190, 19, 106, 96, 191, 172, 168, 52, 189, 159, 208, 32, 191, 244, 228, 124, 189, 154, 242, 7, 62, 75, 91, 75, 63, 23, 13, 85, 190, 30, 126, 128, 190, 94, 194, 151, 191, 20, 103, 230, 190, 105, 126, 66, 190, 222, 133, 24, 63, 13, 176, 10, 63, 144, 168, 126, 63, 224, 176, 188, 62, 228, 119, 184, 61, 37, 228, 232, 62, 213, 23, 176, 190, 254, 183, 247, 62, 105, 47, 0, 191, 63, 46, 84, 191, 143, 158, 127, 62, 150, 53, 61, 190, 217, 12, 20, 63, 134, 39, 219, 190, 54, 21, 177, 62, 186, 41, 28, 63, 126, 127, 155, 62, 56, 107, 50, 191, 236, 229, 42, 191, 219, 57, 17, 62, 138, 157, 75, 62, 182, 230, 64, 62, 31, 192, 225, 62, 110, 47, 154, 190, 102, 94, 65, 191, 139, 167, 9, 191, 252, 241, 0, 191, 228, 28, 162, 61, 143, 74, 194, 190, 17, 53, 239, 61, 12, 86, 100, 191, 185, 30, 12, 190, 205, 54, 120, 63, 169, 112, 33, 63, 26, 100, 244, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 176, 192, 190, 6, 40, 218, 189, 216, 147, 30, 63, 188, 239, 161, 190, 160, 12, 122, 190, 8, 163, 168, 62, 113, 235, 130, 62, 254, 7, 161, 62, 73, 240, 45, 191, 29, 99, 194, 189, 94, 11, 223, 62, 111, 223, 225, 190, 87, 214, 190, 190, 118, 202, 207, 62, 212, 9, 116, 188, 12, 33, 57, 61, 68, 54, 184, 187, 239, 182, 141, 62, 162, 77, 79, 62, 194, 132, 17, 191, 243, 178, 214, 62, 185, 123, 184, 62, 189, 247, 9, 63, 219, 160, 119, 190, 10, 136, 10, 191, 204, 18, 149, 62, 162, 145, 37, 62, 1, 229, 149, 61, 246, 65, 132, 190, 31, 6, 19, 63, 206, 73, 6, 191, 97, 128, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 203, 129, 190, 6, 181, 136, 189, 129, 100, 245, 189, 112, 231, 255, 189, 123, 78, 35, 190, 223, 220, 132, 61, 100, 126, 138, 62, 99, 237, 66, 62, 7, 172, 74, 188, 106, 159, 177, 62, 251, 112, 31, 61, 12, 89, 159, 61, 228, 25, 227, 189, 200, 186, 36, 190, 60, 205, 64, 62, 11, 26, 216, 59, 43, 38, 92, 61, 97, 52, 32, 188, 154, 110, 27, 190, 46, 24, 26, 190, 71, 125, 34, 62, 203, 140, 147, 189, 196, 10, 168, 61, 92, 236, 5, 62, 221, 201, 112, 189, 4, 109, 29, 190, 255, 172, 8, 62, 27, 141, 228, 189, 253, 197, 143, 190, 50, 106, 85, 190, 21, 112, 27, 62, 197, 32, 117, 190, 108, 86, 3, 62, 238, 133, 200, 58, 216, 201, 136, 61, 169, 57, 56, 190, 28, 237, 34, 62, 250, 31, 87, 59, 41, 28, 113, 190, 231, 251, 68, 191, 52, 123, 151, 188, 101, 13, 229, 189, 236, 177, 105, 191, 112, 224, 61, 190, 98, 131, 75, 189, 231, 40, 90, 189, 11, 186, 33, 62, 65, 190, 101, 189, 102, 137, 0, 190, 92, 68, 236, 190, 234, 72, 98, 61, 69, 89, 80, 190, 109, 87, 190, 61, 185, 110, 24, 62, 138, 116, 196, 189, 20, 185, 64, 190, 195, 125, 241, 61, 74, 237, 70, 62, 134, 235, 178, 191, 91, 242, 8, 190, 195, 64, 219, 190, 243, 172, 76, 189, 181, 195, 38, 190, 198, 169, 64, 62, 97, 70, 179, 189, 108, 224, 80, 190, 206, 229, 72, 61, 48, 207, 164, 61, 140, 236, 196, 189, 192, 213, 5, 62, 194, 149, 25, 62, 39, 87, 212, 61, 75, 40, 146, 190, 156, 125, 106, 62, 230, 66, 81, 62, 1, 175, 150, 62, 232, 211, 87, 190, 39, 165, 134, 190, 81, 235, 92, 187, 104, 147, 44, 62, 144, 1, 130, 188, 97, 2, 150, 189, 64, 56, 219, 189, 254, 49, 121, 62, 117, 237, 3, 62, 190, 65, 96, 190, 72, 196, 81, 62, 194, 165, 194, 190, 249, 109, 90, 190, 45, 170, 128, 60, 135, 82, 208, 60, 40, 29, 231, 189, 222, 30, 108, 189, 88, 242, 215, 189, 164, 227, 205, 62, 37, 135, 73, 60, 62, 251, 181, 190, 71, 232, 234, 60, 52, 169, 43, 190, 54, 70, 31, 191, 249, 128, 206, 190, 206, 45, 202, 62, 40, 161, 192, 61, 79, 126, 167, 61, 78, 215, 0, 61, 224, 170, 6, 62, 51, 126, 95, 188, 81, 77, 82, 190, 158, 115, 0, 190, 46, 194, 29, 62, 6, 33, 179, 62, 127, 134, 173, 190, 251, 167, 172, 61, 200, 65, 77, 188, 146, 165, 22, 62, 131, 189, 123, 189, 204, 251, 234, 190, 38, 175, 225, 62, 69, 16, 97, 61, 91, 19, 194, 190, 123, 91, 136, 190, 237, 204, 51, 62, 201, 163, 29, 189, 32, 68, 5, 62, 129, 115, 243, 189, 23, 137, 75, 190, 147, 137, 18, 190, 135, 187, 67, 62, 123, 185, 127, 61, 20, 208, 29, 190, 87, 27, 203, 189, 131, 224, 207, 188, 218, 220, 47, 61, 45, 29, 224, 188, 58, 178, 133, 189, 207, 126, 18, 61, 145, 202, 38, 189, 59, 167, 172, 189, 106, 95, 120, 62, 96, 39, 158, 62, 46, 102, 229, 60, 66, 84, 3, 190, 80, 201, 104, 56, 39, 182, 156, 61, 246, 230, 31, 189, 237, 53, 180, 60, 160, 79, 207, 189, 99, 245, 244, 189, 247, 34, 204, 189, 149, 114, 68, 61, 198, 41, 167, 60, 72, 205, 233, 60, 5, 143, 67, 62, 180, 167, 20, 61, 229, 30, 168, 62, 144, 109, 62, 190, 186, 252, 48, 61, 14, 224, 71, 62, 39, 140, 147, 190, 31, 179, 67, 61, 189, 82, 81, 191, 24, 212, 49, 191, 182, 229, 200, 62, 124, 200, 68, 190, 26, 192, 207, 190, 146, 110, 73, 61, 94, 203, 239, 189, 131, 158, 19, 190, 71, 24, 241, 60, 194, 30, 64, 189, 80, 200, 51, 60, 29, 12, 207, 62, 0, 9, 75, 190, 32, 86, 86, 62, 134, 51, 130, 62, 39, 204, 130, 62, 47, 84, 111, 190, 97, 114, 200, 189, 253, 33, 171, 188, 207, 70, 248, 61, 201, 84, 191, 62, 128, 130, 41, 191, 186, 112, 128, 189, 24, 177, 252, 190, 54, 162, 139, 190, 43, 9, 45, 191, 185, 119, 100, 189, 26, 242, 204, 190, 204, 39, 170, 188, 38, 8, 139, 61, 38, 75, 165, 62, 105, 119, 25, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 118, 59, 131, 61, 4, 7, 83, 189, 125, 153, 33, 61, 111, 78, 179, 189, 221, 208, 174, 188, 176, 160, 163, 62, 156, 125, 147, 190, 79, 46, 130, 190, 5, 93, 176, 61, 152, 3, 178, 190, 148, 225, 152, 189, 179, 177, 168, 62, 149, 200, 183, 61, 121, 215, 0, 61, 50, 151, 77, 62, 126, 119, 174, 61, 233, 33, 37, 190, 106, 192, 52, 189, 180, 218, 10, 188, 129, 183, 153, 190, 10, 55, 144, 189, 141, 128, 131, 62, 213, 201, 141, 62, 65, 62, 197, 189, 240, 162, 28, 191, 160, 239, 65, 61, 70, 186, 27, 61, 81, 7, 32, 62, 193, 19, 180, 190, 160, 16, 63, 59, 65, 220, 224, 189, 60, 19, 238, 61, 202, 151, 184, 58, 75, 36, 244, 189, 131, 232, 117, 62, 198, 225, 235, 186, 92, 178, 134, 190, 116, 157, 77, 62, 213, 8, 28, 62, 107, 215, 109, 61, 6, 133, 127, 190, 238, 240, 162, 62, 138, 181, 97, 62, 38, 237, 137, 62, 20, 255, 140, 190, 69, 237, 246, 61, 42, 32, 183, 189, 150, 115, 231, 61, 8, 138, 86, 190, 156, 195, 80, 62, 40, 200, 44, 60, 166, 45, 3, 190, 134, 157, 14, 62, 176, 61, 83, 60, 110, 137, 2, 62, 229, 74, 183, 190, 104, 249, 62, 190, 39, 73, 240, 59, 87, 165, 16, 62, 22, 188, 58, 190, 159, 60, 72, 61, 38, 53, 250, 61, 168, 227, 71, 62, 176, 148, 78, 61, 243, 70, 90, 61, 92, 159, 60, 61, 140, 179, 207, 189, 39, 87, 32, 62, 87, 221, 68, 60, 88, 43, 60, 190, 82, 70, 113, 190, 139, 103, 39, 62, 39, 176, 140, 61, 110, 66, 221, 190, 30, 129, 122, 61, 145, 173, 118, 190, 175, 48, 74, 62, 207, 207, 7, 62, 132, 210, 31, 189, 8, 205, 187, 186, 211, 244, 98, 62, 235, 141, 29, 60, 39, 111, 23, 61, 178, 51, 44, 190, 139, 153, 52, 190, 163, 219, 2, 63, 213, 237, 60, 190, 150, 144, 57, 61, 125, 80, 164, 62, 29, 177, 7, 62, 149, 26, 239, 188, 17, 166, 164, 61, 30, 17, 26, 62, 78, 75, 18, 62, 169, 25, 254, 190, 156, 43, 166, 62, 54, 221, 9, 190, 108, 235, 13, 62, 158, 118, 134, 190, 226, 14, 183, 61, 63, 99, 41, 189, 144, 175, 199, 188, 189, 133, 38, 191, 127, 126, 24, 62, 8, 187, 197, 62, 53, 137, 10, 191, 100, 68, 134, 62, 93, 203, 138, 190, 73, 186, 161, 62, 228, 142, 156, 189, 254, 251, 76, 61, 241, 61, 120, 190, 95, 128, 71, 60, 142, 100, 29, 60, 86, 202, 158, 61, 226, 250, 139, 189, 215, 208, 150, 190, 79, 134, 160, 62, 132, 87, 153, 189, 12, 211, 27, 63, 56, 116, 11, 62, 32, 126, 24, 187, 106, 18, 163, 62, 77, 228, 217, 61, 121, 101, 15, 188, 6, 81, 71, 62, 230, 66, 177, 190, 55, 69, 200, 62, 235, 70, 169, 190, 10, 133, 173, 190, 8, 237, 104, 62, 34, 63, 95, 60, 229, 245, 34, 190, 222, 136, 148, 61, 155, 5, 19, 190, 52, 153, 36, 190, 190, 28, 12, 190, 128, 73, 0, 190, 231, 93, 26, 60, 146, 15, 104, 62, 143, 237, 64, 191, 37, 135, 137, 189, 242, 177, 139, 190, 228, 116, 147, 62, 171, 71, 55, 191, 104, 57, 150, 189, 43, 51, 13, 190, 105, 49, 130, 190, 110, 122, 212, 61, 149, 153, 168, 190, 210, 89, 83, 62, 132, 205, 101, 190, 206, 131, 232, 190, 25, 137, 99, 190, 240, 117, 93, 61, 139, 28, 7, 190, 254, 64, 78, 191, 58, 186, 97, 61, 6, 107, 122, 60, 90, 163, 32, 190, 238, 168, 192, 58, 106, 69, 32, 61, 53, 46, 184, 61, 3, 236, 85, 61, 244, 158, 1, 190, 255, 223, 247, 59, 71, 76, 131, 190, 77, 105, 196, 61, 27, 183, 41, 62, 118, 32, 179, 190, 87, 122, 22, 62, 27, 26, 128, 190, 235, 4, 39, 189, 173, 156, 249, 61, 75, 10, 108, 190, 19, 203, 183, 60, 73, 212, 135, 61, 209, 213, 40, 188, 141, 19, 138, 62, 128, 159, 23, 190, 145, 40, 40, 61, 35, 0, 67, 62, 50, 242, 157, 61, 222, 166, 139, 61, 49, 243, 204, 62, 32, 62, 187, 61, 246, 178, 156, 62, 128, 118, 12, 62, 38, 212, 113, 61, 100, 211, 32, 62, 97, 12, 196, 190, 178, 170, 84, 62, 47, 57, 43, 191, 42, 163, 34, 191, 148, 174, 230, 62, 3, 93, 151, 191, 59, 11, 40, 191, 246, 223, 147, 62, 52, 247, 2, 59, 60, 53, 230, 189, 14, 46, 216, 190, 9, 46, 8, 62, 9, 13, 10, 61, 23, 57, 88, 61, 49, 30, 221, 190, 245, 135, 167, 61, 6, 4, 196, 189, 231, 59, 194, 62, 119, 160, 211, 190, 246, 186, 223, 188, 152, 127, 63, 62, 25, 238, 191, 188, 197, 209, 229, 62, 211, 184, 202, 60, 144, 22, 165, 62, 120, 90, 122, 191, 124, 228, 66, 61, 36, 76, 40, 190, 206, 139, 54, 190, 105, 218, 224, 190, 34, 113, 171, 190, 4, 98, 26, 62, 236, 15, 123, 189, 238, 224, 187, 189, 219, 67, 43, 60, 156, 82, 222, 189, 26, 177, 25, 62, 77, 2, 124, 189, 104, 10, 6, 190, 178, 150, 100, 187, 96, 236, 27, 61, 234, 189, 219, 190, 136, 65, 20, 190, 177, 149, 248, 187, 225, 219, 245, 190, 138, 200, 2, 189, 173, 33, 190, 61, 186, 206, 176, 189, 75, 247, 26, 62, 177, 148, 204, 61, 157, 113, 171, 190, 53, 170, 95, 190, 245, 91, 199, 61, 10, 20, 223, 61, 91, 156, 22, 61, 57, 57, 137, 62, 131, 31, 26, 189, 150, 5, 174, 190, 224, 59, 197, 60, 4, 249, 196, 189, 61, 246, 33, 191, 71, 126, 1, 61, 177, 187, 112, 188, 41, 52, 114, 190, 53, 24, 150, 61, 206, 14, 124, 61, 58, 30, 197, 190, 220, 156, 209, 190, 90, 67, 181, 60, 9, 233, 162, 190, 205, 22, 206, 189, 96, 208, 98, 62, 0, 91, 161, 189, 24, 184, 1, 62, 166, 162, 59, 190, 137, 251, 34, 62, 28, 224, 14, 62, 114, 86, 185, 190, 21, 22, 242, 190, 124, 181, 96, 61, 134, 175, 136, 189, 183, 139, 108, 61, 127, 207, 49, 62, 17, 72, 205, 61, 87, 236, 50, 62, 130, 50, 9, 189, 75, 7, 204, 189, 145, 32, 120, 190, 84, 239, 112, 190, 153, 9, 59, 62, 152, 78, 113, 62, 192, 60, 36, 190, 140, 185, 102, 189, 148, 190, 129, 187, 39, 57, 137, 189, 69, 233, 118, 61, 0, 132, 157, 61, 104, 221, 125, 189, 203, 50, 61, 190, 195, 140, 66, 190, 81, 76, 105, 61, 204, 242, 116, 61, 119, 214, 21, 190, 86, 109, 199, 61, 200, 41, 198, 188, 18, 236, 50, 189, 113, 82, 62, 190, 236, 6, 220, 190, 46, 32, 138, 61, 120, 156, 158, 189, 64, 201, 31, 190, 55, 215, 126, 189, 92, 60, 209, 189, 132, 224, 90, 190, 146, 125, 144, 61, 104, 241, 133, 61, 98, 84, 244, 61, 188, 2, 39, 190, 30, 6, 179, 189, 107, 104, 78, 62, 212, 70, 164, 61, 28, 143, 101, 62, 22, 136, 122, 62, 34, 54, 107, 62, 72, 132, 227, 189, 115, 236, 197, 60, 125, 87, 223, 189, 34, 194, 86, 62, 242, 143, 72, 190, 51, 7, 156, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 0, 179, 54, 62, 183, 40, 143, 189, 154, 218, 232, 61, 101, 194, 204, 60, 84, 244, 17, 189, 212, 238, 126, 62, 57, 2, 203, 190, 65, 164, 122, 190, 73, 19, 232, 61, 71, 183, 31, 61, 170, 89, 173, 190, 12, 156, 4, 191, 227, 97, 159, 60, 145, 151, 213, 62, 114, 125, 192, 61, 11, 242, 244, 188, 65, 128, 56, 62, 143, 91, 228, 190, 252, 147, 26, 62, 28, 63, 207, 189, 254, 141, 184, 189, 165, 83, 185, 189, 177, 158, 234, 190, 129, 211, 223, 190, 141, 85, 229, 62, 40, 98, 31, 190, 243, 221, 180, 190, 168, 180, 178, 188, 234, 187, 221, 61, 208, 94, 107, 61, 249, 67, 236, 62, 149, 244, 35, 62, 225, 254, 161, 61, 30, 142, 237, 189, 240, 115, 104, 62, 141, 174, 64, 190, 127, 24, 126, 189, 114, 75, 34, 62, 116, 198, 160, 62, 244, 131, 21, 61, 240, 15, 174, 190, 222, 173, 164, 62, 176, 222, 210, 60, 146, 154, 63, 62, 29, 37, 75, 60, 102, 132, 156, 61, 119, 199, 116, 60, 89, 31, 184, 61, 249, 214, 194, 189, 223, 98, 223, 189, 192, 86, 47, 62, 255, 226, 51, 61, 176, 202, 36, 62, 140, 8, 129, 190, 58, 59, 49, 62, 193, 90, 177, 190, 118, 78, 235, 189, 130, 240, 28, 62, 253, 64, 26, 60, 8, 224, 212, 61, 180, 183, 148, 188, 200, 37, 21, 190, 114, 128, 21, 62, 187, 160, 208, 189, 191, 37, 243, 189, 12, 56, 158, 189, 230, 93, 219, 61, 66, 60, 64, 190, 186, 122, 45, 189, 132, 38, 51, 62, 110, 216, 47, 61, 173, 76, 89, 190, 94, 114, 22, 191, 73, 128, 179, 62, 13, 120, 6, 190, 206, 139, 50, 62, 86, 44, 235, 190, 120, 82, 142, 190, 50, 110, 59, 62, 20, 6, 205, 62, 186, 48, 147, 187, 130, 169, 84, 62, 116, 232, 178, 190, 44, 173, 9, 62, 60, 130, 207, 62, 33, 6, 202, 190, 173, 85, 217, 62, 26, 97, 49, 190, 41, 137, 247, 190, 97, 161, 64, 60, 223, 122, 11, 62, 128, 20, 99, 190, 37, 127, 165, 61, 170, 161, 163, 61, 103, 152, 163, 62, 169, 187, 198, 190, 130, 137, 194, 61, 28, 98, 144, 62, 10, 39, 83, 190, 54, 249, 133, 61, 94, 149, 221, 61, 178, 1, 207, 189, 44, 148, 4, 191, 42, 25, 241, 189, 39, 66, 219, 62, 209, 85, 169, 189, 40, 148, 60, 190, 186, 217, 218, 189, 196, 48, 155, 62, 190, 240, 152, 189, 196, 38, 160, 189, 145, 202, 10, 61, 203, 167, 117, 190, 190, 218, 142, 189, 190, 88, 137, 190, 138, 215, 25, 61, 121, 6, 255, 189, 7, 190, 211, 62, 245, 212, 243, 61, 246, 90, 131, 61, 159, 15, 249, 189, 113, 86, 168, 61, 187, 55, 128, 189, 159, 124, 151, 189, 89, 19, 192, 61, 154, 170, 176, 190, 26, 122, 22, 62, 143, 252, 245, 61, 243, 185, 22, 189, 95, 183, 69, 62, 236, 133, 28, 190, 158, 204, 14, 190, 127, 83, 105, 62, 180, 141, 26, 190, 145, 95, 102, 190, 147, 122, 194, 189, 201, 207, 7, 62, 52, 169, 215, 190, 51, 167, 12, 190, 95, 137, 187, 190, 192, 109, 60, 62, 253, 69, 224, 61, 143, 156, 228, 189, 184, 98, 72, 190, 244, 138, 71, 62, 87, 228, 26, 62, 3, 160, 224, 61, 92, 166, 150, 61, 0, 32, 176, 189, 116, 22, 98, 62, 75, 66, 252, 188, 168, 103, 10, 190, 27, 113, 173, 62, 21, 53, 8, 188, 241, 123, 72, 190, 2, 98, 99, 62, 159, 65, 99, 62, 72, 163, 166, 189, 36, 84, 212, 190, 109, 105, 129, 62, 114, 84, 245, 61, 66, 94, 137, 61, 71, 127, 6, 62, 228, 187, 14, 190, 155, 15, 96, 189, 49, 102, 155, 62, 18, 89, 232, 62, 184, 248, 80, 189, 149, 83, 170, 190, 55, 38, 220, 62, 183, 41, 129, 61, 255, 111, 163, 62, 95, 38, 95, 188, 110, 241, 128, 62, 55, 24, 140, 189, 228, 72, 19, 62, 70, 126, 146, 190, 202, 73, 205, 61, 128, 240, 73, 62, 176, 158, 46, 61, 249, 213, 16, 62, 86, 59, 10, 189, 13, 250, 84, 62, 2, 240, 0, 191, 78, 224, 75, 61, 118, 152, 185, 61, 28, 159, 179, 189, 218, 65, 144, 189, 2, 176, 198, 190, 203, 19, 26, 189, 118, 52, 134, 189, 226, 24, 86, 189, 60, 213, 122, 189, 212, 46, 1, 62, 108, 3, 233, 190, 180, 106, 225, 62, 33, 17, 169, 62, 205, 239, 152, 190, 27, 5, 47, 191, 90, 203, 178, 61, 163, 93, 82, 62, 123, 100, 41, 191, 20, 34, 165, 61, 151, 233, 7, 191, 215, 146, 52, 62, 66, 226, 31, 190, 209, 67, 157, 190, 117, 133, 219, 190, 144, 253, 59, 61, 88, 198, 144, 189, 249, 145, 180, 188, 138, 111, 141, 190, 184, 154, 168, 190, 157, 52, 35, 190, 103, 72, 36, 190, 188, 206, 9, 63, 70, 90, 155, 62, 125, 242, 0, 191, 57, 76, 163, 62, 145, 77, 15, 62, 132, 236, 176, 62, 53, 41, 138, 62, 82, 178, 22, 191, 226, 100, 42, 61, 60, 8, 223, 60, 252, 185, 35, 190, 152, 132, 103, 188, 225, 176, 211, 60, 72, 198, 234, 61, 85, 85, 47, 189, 9, 97, 26, 190, 233, 9, 9, 189, 180, 121, 50, 60, 27, 234, 106, 189, 145, 24, 23, 190, 97, 70, 237, 61, 243, 154, 215, 189, 108, 27, 8, 62, 38, 36, 11, 190, 31, 181, 146, 188, 158, 68, 164, 61, 4, 208, 168, 189, 160, 234, 244, 61, 214, 203, 34, 62, 217, 205, 43, 190, 124, 206, 148, 61, 7, 141, 146, 188, 209, 192, 42, 62, 226, 51, 40, 190, 200, 0, 148, 189, 181, 37, 17, 62, 75, 136, 246, 187, 104, 247, 54, 189, 22, 13, 154, 189, 177, 64, 19, 62, 128, 189, 190, 189, 121, 126, 200, 61, 28, 254, 155, 188, 202, 11, 205, 61, 190, 217, 18, 62, 15, 159, 67, 62, 166, 236, 222, 189, 99, 137, 29, 189, 205, 61, 67, 62, 229, 20, 171, 62, 1, 200, 84, 62, 96, 43, 51, 62, 18, 238, 20, 62, 174, 250, 26, 62, 159, 19, 149, 190, 168, 110, 244, 61, 83, 115, 194, 61, 123, 10, 25, 189, 230, 75, 137, 61, 71, 164, 138, 190, 178, 200, 180, 189, 208, 155, 150, 61, 59, 174, 11, 190, 134, 243, 108, 61, 51, 89, 179, 62, 72, 217, 158, 190, 176, 90, 204, 189, 251, 160, 30, 190, 166, 163, 253, 61, 254, 13, 133, 190, 188, 152, 96, 190, 114, 27, 77, 62, 66, 190, 36, 62, 254, 230, 246, 188, 121, 252, 54, 190, 60, 46, 200, 61, 235, 186, 83, 190, 60, 5, 72, 190, 233, 177, 83, 190, 2, 134, 212, 62, 251, 77, 1, 62, 112, 254, 134, 190, 41, 252, 30, 63, 130, 9, 138, 189, 60, 76, 151, 62, 128, 141, 228, 190, 203, 19, 155, 189, 16, 175, 51, 190, 23, 146, 93, 62, 183, 44, 197, 190, 163, 99, 46, 189, 28, 245, 231, 190, 93, 105, 139, 62, 222, 26, 115, 62, 192, 87, 106, 62, 82, 80, 246, 62, 57, 29, 32, 191, 173, 107, 112, 191, 240, 20, 187, 189, 244, 239, 92, 61, 91, 220, 10, 190, 11, 113, 163, 190, 174, 247, 38, 189, 251, 153, 96, 62, 188, 247, 94, 190, 202, 235, 47, 190, 86, 156, 144, 62, 29, 100, 242, 190, 4, 91, 166, 60, 83, 108, 54, 189, 192, 19, 150, 190, 71, 212, 20, 191, 184, 128, 79, 62, 70, 38, 230, 62, 232, 106, 1, 191, 37, 6, 169, 59, 175, 51, 120, 191, 172, 161, 100, 62, 232, 188, 203, 62, 208, 2, 166, 189, 88, 246, 29, 191, 248, 232, 56, 62, 245, 15, 20, 62, 126, 39, 136, 62, 71, 199, 163, 190, 208, 24, 214, 190, 226, 234, 151, 62, 253, 228, 255, 190, 72, 4, 32, 63, 133, 109, 240, 62, 105, 186, 0, 61, 143, 45, 171, 62, 86, 123, 0, 62, 131, 88, 251, 61, 29, 3, 74, 62, 97, 51, 46, 191, 192, 37, 253, 62, 209, 6, 135, 190, 247, 154, 149, 190, 196, 144, 56, 186, 40, 248, 73, 60, 153, 15, 144, 190, 185, 229, 45, 62, 30, 36, 98, 62, 168, 118, 160, 189, 184, 175, 131, 190, 56, 150, 192, 62, 95, 142, 122, 62, 216, 3, 136, 61, 227, 64, 19, 190, 111, 183, 27, 62, 142, 44, 103, 188, 97, 27, 140, 188, 59, 21, 182, 61, 20, 13, 64, 61, 206, 58, 177, 187, 72, 16, 112, 62, 111, 54, 89, 61, 231, 47, 19, 62, 105, 170, 202, 62, 233, 82, 201, 190, 207, 95, 127, 190, 125, 229, 41, 61, 35, 0, 239, 59, 253, 136, 94, 189, 110, 13, 233, 189, 10, 111, 209, 188, 21, 27, 219, 61, 93, 71, 83, 62, 118, 229, 29, 188, 197, 132, 109, 188, 237, 65, 194, 190, 204, 2, 22, 62, 24, 134, 183, 60, 102, 214, 189, 189, 126, 189, 28, 190, 75, 168, 125, 62, 170, 184, 80, 62, 90, 60, 165, 190, 105, 143, 12, 62, 72, 158, 145, 190, 192, 96, 22, 62, 163, 115, 98, 61, 153, 238, 155, 61, 242, 95, 181, 190, 118, 76, 84, 189, 6, 24, 114, 62, 16, 42, 66, 62, 210, 137, 142, 188, 42, 245, 140, 190, 134, 109, 175, 62, 201, 218, 83, 189, 44, 150, 27, 63, 231, 144, 41, 62, 14, 57, 46, 188, 224, 118, 1, 188, 243, 22, 1, 62, 88, 83, 74, 61, 246, 48, 130, 61, 223, 205, 227, 190, 231, 34, 117, 62, 224, 138, 175, 61, 5, 214, 141, 62, 133, 130, 185, 189, 100, 127, 72, 189, 2, 94, 20, 62, 48, 167, 32, 190, 141, 149, 246, 190, 169, 50, 50, 190, 50, 82, 204, 62, 173, 102, 132, 190, 249, 175, 143, 190, 54, 45, 160, 61, 101, 80, 126, 61, 126, 92, 30, 190, 187, 163, 227, 61, 139, 14, 7, 62, 80, 103, 13, 190, 18, 185, 0, 189, 24, 129, 19, 190, 49, 61, 115, 188, 251, 78, 128, 61, 9, 149, 152, 62, 171, 85, 44, 189, 25, 18, 77, 189, 211, 2, 134, 189, 40, 144, 237, 60, 210, 224, 146, 190, 148, 198, 224, 61, 56, 186, 45, 189, 115, 48, 33, 190, 151, 42, 227, 189, 35, 148, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 65, 64, 190, 30, 120, 199, 188, 66, 27, 228, 61, 45, 115, 0, 189, 150, 65, 147, 62, 40, 38, 136, 61, 0, 69, 26, 190, 249, 12, 45, 61, 183, 58, 148, 62, 178, 41, 8, 190, 19, 72, 72, 190, 23, 45, 55, 62, 157, 133, 203, 61, 170, 70, 247, 61, 160, 141, 59, 188, 176, 241, 83, 60, 22, 236, 139, 62, 192, 0, 29, 62, 133, 188, 230, 189, 142, 84, 74, 61, 233, 231, 174, 189, 136, 152, 181, 189, 106, 163, 91, 62, 245, 139, 35, 62, 30, 181, 60, 62, 105, 153, 39, 189, 140, 73, 194, 188, 138, 56, 41, 62, 4, 10, 136, 62, 44, 94, 150, 62, 169, 169, 225, 61, 253, 120, 162, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 210, 85, 190, 228, 174, 4, 191, 41, 20, 85, 62, 94, 227, 39, 191, 90, 46, 134, 189, 21, 35, 75, 63, 179, 160, 24, 189, 15, 208, 46, 190, 249, 221, 170, 61, 178, 139, 142, 190, 247, 178, 50, 191, 251, 238, 114, 63, 145, 226, 180, 189, 144, 69, 115, 63, 117, 5, 51, 190, 185, 215, 51, 62, 217, 182, 184, 189, 104, 189, 10, 190, 129, 146, 229, 62, 215, 134, 114, 62, 184, 171, 244, 62, 223, 225, 142, 190, 46, 178, 121, 190, 168, 25, 168, 62, 116, 57, 76, 191, 96, 18, 48, 189, 5, 37, 127, 190, 215, 154, 81, 63, 210, 62, 39, 191, 74, 147, 48, 62, 25, 51, 200, 190, 157, 65, 59, 190, 193, 201, 250, 62, 21, 105, 112, 61, 98, 33, 238, 189, 103, 50, 158, 187, 205, 220, 81, 190, 237, 202, 225, 61, 230, 137, 44, 62, 109, 3, 102, 190, 98, 203, 104, 190, 74, 215, 50, 189, 107, 194, 6, 62, 185, 89, 88, 62, 81, 164, 208, 189, 237, 250, 84, 62, 159, 211, 104, 190, 68, 63, 57, 190, 222, 185, 117, 190, 177, 188, 176, 188, 143, 178, 97, 62, 8, 5, 140, 57, 179, 183, 8, 61, 154, 98, 43, 62, 233, 216, 246, 189, 1, 170, 95, 190, 127, 225, 138, 62, 25, 196, 21, 190, 187, 122, 40, 62, 182, 108, 59, 58, 18, 151, 25, 61, 156, 218, 64, 190, 61, 209, 107, 189, 85, 204, 0, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 123, 112, 189, 234, 70, 31, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 104, 254, 190, 51, 229, 181, 63, 162, 253, 82, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 90, 252, 62, 152, 240, 132, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}