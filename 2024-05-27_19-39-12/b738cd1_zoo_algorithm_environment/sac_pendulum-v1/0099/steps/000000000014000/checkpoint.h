// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 177, 109, 190, 165, 107, 149, 63, 7, 126, 1, 63, 247, 125, 10, 62, 69, 12, 187, 63, 241, 71, 170, 62, 77, 243, 55, 190, 63, 90, 75, 63, 57, 63, 9, 63, 198, 41, 210, 189, 44, 185, 122, 190, 209, 59, 43, 63, 245, 197, 226, 189, 68, 7, 7, 62, 137, 53, 156, 62, 149, 35, 200, 62, 130, 94, 252, 62, 246, 15, 18, 191, 227, 35, 64, 63, 131, 41, 74, 191, 104, 73, 55, 190, 5, 32, 219, 190, 124, 124, 134, 191, 0, 239, 162, 189, 218, 148, 126, 63, 22, 139, 115, 62, 175, 175, 133, 62, 233, 34, 32, 63, 227, 4, 121, 191, 171, 138, 126, 190, 24, 98, 139, 62, 213, 164, 44, 191, 42, 196, 152, 61, 132, 166, 11, 191, 115, 177, 71, 62, 145, 139, 206, 62, 122, 90, 48, 63, 29, 241, 109, 63, 30, 46, 133, 62, 127, 136, 155, 189, 156, 193, 244, 62, 90, 43, 9, 189, 228, 4, 140, 61, 177, 183, 213, 62, 249, 61, 186, 190, 43, 101, 105, 190, 213, 1, 239, 62, 169, 219, 22, 63, 186, 69, 77, 190, 133, 73, 50, 191, 229, 132, 68, 191, 123, 80, 202, 61, 138, 106, 113, 191, 245, 53, 158, 188, 174, 251, 175, 60, 164, 112, 9, 63, 82, 241, 176, 189, 56, 116, 121, 190, 223, 253, 183, 191, 4, 137, 216, 190, 146, 22, 88, 190, 103, 35, 27, 63, 107, 137, 0, 63, 15, 56, 119, 63, 5, 82, 137, 62, 246, 241, 243, 61, 115, 237, 138, 62, 98, 140, 151, 190, 105, 225, 216, 62, 21, 167, 11, 191, 194, 88, 114, 191, 22, 186, 101, 62, 19, 164, 194, 190, 113, 71, 93, 62, 254, 185, 204, 190, 51, 108, 245, 61, 189, 151, 128, 63, 242, 40, 122, 62, 31, 242, 58, 191, 111, 118, 203, 190, 245, 167, 103, 60, 94, 211, 137, 62, 182, 200, 147, 62, 193, 25, 212, 62, 106, 113, 3, 191, 52, 108, 143, 191, 130, 189, 170, 190, 51, 182, 29, 191, 56, 114, 147, 62, 242, 154, 178, 190, 113, 88, 181, 62, 55, 145, 10, 191, 108, 25, 74, 190, 76, 40, 129, 63, 206, 163, 63, 63, 173, 47, 223, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 16, 134, 190, 59, 221, 252, 60, 229, 216, 30, 63, 116, 135, 226, 190, 242, 11, 198, 190, 144, 116, 65, 62, 192, 92, 167, 62, 20, 199, 170, 62, 201, 194, 71, 191, 80, 240, 76, 190, 247, 104, 40, 63, 164, 51, 164, 190, 175, 40, 218, 190, 61, 174, 191, 62, 54, 31, 182, 187, 255, 100, 25, 61, 239, 237, 5, 189, 20, 137, 175, 62, 239, 85, 185, 62, 253, 43, 210, 190, 87, 27, 209, 62, 168, 41, 135, 62, 91, 72, 31, 63, 180, 124, 33, 190, 156, 99, 252, 190, 93, 211, 69, 62, 39, 120, 208, 62, 157, 111, 12, 61, 133, 126, 39, 190, 176, 215, 241, 62, 203, 94, 43, 191, 15, 56, 166, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 163, 225, 190, 175, 183, 244, 190, 230, 133, 170, 190, 59, 169, 35, 190, 155, 108, 75, 190, 215, 146, 174, 190, 32, 131, 197, 62, 240, 143, 136, 62, 242, 230, 50, 190, 147, 201, 211, 62, 198, 17, 63, 62, 59, 132, 57, 186, 176, 205, 97, 191, 227, 110, 250, 190, 51, 222, 31, 190, 73, 217, 0, 190, 4, 197, 62, 190, 240, 111, 238, 61, 144, 155, 223, 190, 206, 203, 59, 190, 117, 213, 92, 189, 244, 232, 23, 189, 209, 119, 140, 62, 21, 63, 151, 62, 160, 104, 202, 190, 45, 92, 239, 190, 180, 219, 250, 61, 165, 110, 17, 190, 16, 76, 203, 190, 40, 134, 19, 191, 83, 119, 201, 190, 6, 134, 159, 190, 7, 195, 156, 62, 107, 44, 30, 189, 97, 42, 59, 61, 254, 164, 145, 190, 9, 176, 184, 61, 142, 186, 144, 61, 38, 25, 54, 191, 96, 154, 57, 191, 200, 207, 208, 190, 53, 91, 34, 191, 238, 3, 188, 191, 119, 4, 68, 190, 103, 50, 161, 189, 180, 145, 117, 59, 32, 174, 89, 62, 28, 5, 251, 60, 106, 181, 203, 189, 154, 158, 231, 190, 58, 70, 25, 62, 148, 207, 169, 190, 87, 165, 7, 62, 121, 209, 17, 189, 8, 204, 65, 190, 170, 62, 73, 190, 226, 208, 109, 62, 111, 60, 10, 62, 114, 254, 197, 191, 125, 90, 42, 190, 99, 41, 236, 190, 6, 165, 207, 60, 22, 197, 66, 190, 207, 169, 209, 61, 232, 38, 211, 189, 18, 235, 100, 190, 72, 98, 46, 60, 44, 90, 163, 61, 64, 104, 177, 189, 61, 245, 55, 188, 13, 73, 214, 188, 232, 14, 131, 61, 200, 110, 195, 190, 111, 156, 42, 62, 81, 62, 47, 62, 228, 163, 136, 62, 215, 79, 59, 190, 219, 128, 57, 191, 93, 207, 237, 189, 234, 106, 13, 62, 216, 105, 59, 190, 20, 39, 75, 190, 7, 237, 212, 190, 106, 84, 108, 61, 199, 137, 188, 61, 60, 246, 78, 190, 214, 94, 57, 62, 52, 59, 191, 190, 237, 55, 167, 190, 53, 49, 0, 188, 45, 70, 196, 187, 1, 221, 230, 189, 141, 36, 109, 190, 148, 113, 100, 190, 242, 243, 193, 62, 225, 189, 224, 60, 230, 160, 138, 190, 155, 119, 35, 62, 156, 123, 5, 190, 136, 194, 34, 191, 48, 196, 1, 191, 75, 164, 192, 62, 105, 67, 156, 61, 174, 147, 78, 62, 166, 25, 84, 61, 238, 247, 3, 62, 71, 82, 199, 61, 44, 180, 190, 189, 81, 36, 117, 189, 157, 120, 3, 62, 224, 183, 163, 62, 188, 2, 173, 190, 203, 253, 146, 61, 39, 16, 155, 61, 206, 30, 237, 61, 247, 64, 230, 60, 177, 38, 208, 190, 96, 199, 170, 62, 61, 155, 234, 61, 246, 247, 23, 62, 169, 136, 141, 190, 104, 165, 128, 62, 239, 33, 54, 62, 234, 250, 112, 61, 105, 72, 186, 189, 205, 165, 62, 190, 110, 167, 197, 188, 251, 44, 30, 62, 12, 34, 93, 189, 47, 62, 91, 190, 123, 165, 211, 189, 35, 233, 41, 59, 102, 11, 115, 61, 1, 21, 154, 60, 123, 52, 95, 188, 27, 176, 12, 62, 124, 47, 244, 61, 13, 88, 165, 189, 192, 5, 175, 62, 21, 234, 150, 62, 30, 13, 174, 60, 252, 119, 146, 188, 177, 193, 86, 61, 90, 22, 153, 61, 164, 146, 135, 188, 54, 99, 21, 62, 137, 78, 150, 188, 103, 67, 17, 190, 128, 236, 209, 189, 226, 33, 15, 62, 8, 42, 215, 61, 102, 96, 135, 61, 148, 216, 137, 62, 161, 251, 6, 61, 162, 66, 135, 62, 50, 99, 40, 190, 210, 28, 28, 61, 54, 134, 87, 62, 134, 65, 189, 190, 5, 151, 167, 61, 149, 147, 137, 191, 42, 171, 78, 191, 211, 78, 201, 62, 52, 197, 39, 189, 230, 236, 110, 190, 56, 250, 84, 61, 74, 79, 122, 190, 201, 67, 147, 190, 134, 249, 29, 187, 186, 237, 83, 189, 57, 109, 245, 189, 88, 18, 4, 63, 206, 113, 136, 190, 76, 230, 54, 62, 193, 131, 119, 62, 173, 38, 180, 62, 228, 101, 162, 190, 78, 48, 117, 190, 134, 26, 240, 188, 141, 104, 194, 61, 47, 123, 176, 62, 249, 231, 58, 191, 176, 214, 160, 59, 234, 109, 228, 190, 161, 30, 137, 190, 108, 225, 46, 191, 59, 3, 62, 190, 248, 64, 144, 190, 102, 110, 21, 190, 231, 79, 4, 188, 38, 75, 165, 62, 71, 233, 19, 190, 58, 217, 225, 61, 139, 70, 223, 61, 115, 83, 22, 190, 104, 31, 11, 62, 200, 211, 44, 190, 115, 138, 143, 189, 209, 27, 135, 61, 125, 201, 1, 61, 140, 0, 205, 61, 202, 108, 27, 62, 17, 72, 236, 61, 212, 173, 43, 62, 255, 17, 28, 189, 48, 218, 232, 189, 24, 32, 51, 61, 159, 7, 26, 189, 0, 163, 2, 62, 166, 56, 25, 190, 30, 46, 15, 188, 227, 197, 27, 190, 31, 29, 47, 190, 122, 19, 249, 189, 244, 76, 37, 190, 109, 86, 155, 61, 243, 241, 3, 190, 120, 82, 229, 189, 45, 71, 185, 60, 43, 156, 89, 61, 79, 194, 38, 190, 244, 116, 49, 190, 91, 60, 43, 189, 143, 53, 238, 189, 94, 237, 170, 189, 65, 3, 8, 190, 123, 177, 211, 59, 222, 45, 233, 189, 41, 56, 115, 189, 131, 42, 187, 62, 121, 250, 148, 190, 116, 45, 14, 190, 50, 166, 83, 62, 185, 97, 30, 191, 229, 190, 75, 189, 159, 168, 149, 62, 135, 188, 127, 61, 40, 75, 33, 62, 131, 80, 118, 62, 144, 31, 80, 61, 196, 8, 37, 190, 199, 207, 167, 61, 146, 20, 23, 61, 59, 98, 198, 190, 161, 142, 213, 189, 204, 231, 153, 62, 188, 30, 148, 62, 145, 172, 214, 189, 63, 29, 243, 190, 112, 46, 121, 59, 0, 37, 182, 60, 154, 250, 3, 62, 16, 197, 194, 190, 180, 153, 197, 61, 251, 11, 198, 190, 194, 110, 239, 61, 80, 30, 126, 189, 59, 158, 47, 190, 165, 232, 72, 62, 14, 24, 72, 60, 13, 42, 123, 190, 156, 168, 42, 62, 4, 245, 69, 62, 209, 210, 52, 62, 170, 78, 64, 190, 113, 145, 175, 62, 206, 179, 137, 62, 102, 2, 126, 62, 85, 211, 164, 190, 34, 43, 5, 62, 219, 196, 183, 189, 197, 154, 204, 61, 170, 1, 138, 190, 88, 216, 147, 62, 4, 170, 63, 61, 184, 88, 108, 190, 152, 192, 208, 61, 164, 241, 181, 61, 234, 81, 21, 62, 162, 95, 168, 190, 80, 33, 134, 190, 202, 198, 150, 188, 116, 31, 3, 62, 176, 124, 65, 190, 86, 86, 92, 189, 252, 65, 183, 61, 94, 88, 227, 61, 79, 249, 65, 61, 152, 155, 216, 189, 82, 170, 154, 188, 237, 254, 237, 189, 224, 68, 50, 62, 69, 153, 30, 60, 169, 29, 56, 190, 21, 131, 158, 190, 193, 206, 33, 62, 104, 230, 13, 62, 206, 62, 20, 191, 99, 57, 159, 61, 47, 176, 119, 190, 57, 245, 34, 62, 7, 88, 55, 62, 193, 50, 99, 189, 86, 191, 215, 188, 220, 31, 75, 62, 133, 222, 205, 60, 135, 240, 85, 61, 200, 141, 90, 190, 205, 190, 66, 190, 226, 38, 6, 63, 36, 185, 51, 190, 110, 53, 102, 61, 127, 132, 160, 62, 246, 95, 206, 61, 156, 209, 187, 189, 105, 92, 148, 61, 89, 202, 249, 61, 22, 114, 37, 62, 170, 230, 250, 190, 28, 169, 172, 62, 15, 215, 48, 190, 21, 226, 9, 62, 57, 136, 138, 190, 110, 159, 13, 62, 218, 196, 142, 187, 53, 70, 143, 188, 217, 146, 13, 191, 234, 128, 134, 62, 104, 244, 35, 63, 233, 201, 245, 190, 125, 58, 191, 62, 138, 250, 102, 190, 81, 194, 209, 62, 27, 52, 231, 187, 194, 67, 86, 61, 70, 116, 119, 190, 106, 151, 8, 61, 133, 115, 100, 62, 228, 219, 192, 61, 115, 227, 42, 189, 184, 153, 151, 190, 15, 249, 187, 62, 0, 241, 110, 188, 230, 5, 34, 63, 109, 240, 206, 61, 172, 65, 47, 188, 94, 198, 156, 62, 39, 82, 13, 62, 26, 116, 34, 60, 11, 124, 92, 62, 95, 43, 185, 190, 227, 203, 221, 62, 116, 66, 10, 191, 29, 29, 244, 190, 161, 30, 109, 62, 205, 32, 120, 59, 50, 120, 69, 190, 41, 82, 113, 62, 181, 168, 41, 62, 18, 55, 8, 189, 83, 217, 15, 191, 85, 3, 9, 62, 27, 59, 252, 61, 193, 155, 20, 62, 19, 56, 179, 191, 211, 196, 179, 189, 250, 100, 26, 61, 167, 174, 132, 62, 56, 13, 141, 191, 177, 179, 206, 61, 47, 85, 57, 190, 118, 126, 100, 190, 211, 103, 208, 61, 65, 152, 133, 190, 118, 119, 106, 62, 93, 249, 57, 190, 149, 188, 193, 190, 102, 141, 143, 190, 155, 142, 214, 61, 230, 206, 251, 189, 29, 242, 143, 191, 179, 180, 120, 62, 3, 233, 35, 190, 29, 235, 15, 190, 91, 127, 11, 190, 145, 117, 69, 189, 174, 74, 123, 61, 9, 3, 30, 61, 154, 166, 29, 190, 88, 117, 70, 188, 149, 41, 132, 190, 125, 187, 95, 62, 134, 192, 136, 62, 49, 96, 212, 190, 51, 178, 117, 62, 137, 255, 145, 190, 110, 200, 162, 189, 57, 72, 69, 62, 217, 32, 130, 190, 160, 74, 92, 188, 61, 183, 14, 61, 220, 4, 14, 62, 227, 23, 147, 62, 254, 6, 58, 190, 187, 52, 81, 60, 30, 220, 84, 62, 34, 121, 239, 61, 196, 88, 169, 61, 104, 101, 208, 62, 25, 0, 86, 61, 129, 249, 144, 62, 64, 31, 234, 61, 142, 105, 243, 60, 31, 3, 21, 62, 177, 86, 8, 191, 198, 210, 71, 62, 64, 2, 41, 191, 12, 74, 127, 191, 57, 91, 175, 62, 50, 131, 106, 191, 64, 6, 254, 190, 55, 129, 145, 62, 19, 171, 147, 62, 172, 34, 122, 190, 50, 164, 25, 191, 188, 117, 15, 63, 171, 163, 95, 187, 22, 212, 82, 190, 12, 35, 67, 191, 34, 134, 153, 60, 4, 209, 164, 189, 45, 55, 205, 62, 240, 114, 190, 190, 37, 190, 218, 61, 180, 182, 254, 61, 226, 204, 35, 190, 158, 11, 175, 62, 241, 182, 207, 60, 191, 204, 181, 62, 74, 92, 129, 191, 72, 12, 186, 60, 29, 20, 200, 190, 166, 75, 143, 190, 176, 156, 246, 190, 234, 211, 254, 190, 195, 173, 213, 61, 230, 27, 61, 191, 26, 170, 73, 190, 61, 26, 3, 191, 215, 24, 124, 190, 19, 233, 244, 61, 0, 167, 245, 61, 94, 61, 191, 189, 86, 157, 32, 59, 107, 57, 45, 62, 110, 13, 150, 191, 253, 245, 254, 188, 248, 72, 223, 59, 13, 118, 156, 190, 108, 93, 237, 189, 244, 192, 143, 61, 111, 228, 229, 189, 179, 61, 217, 61, 120, 61, 107, 61, 99, 75, 225, 190, 219, 44, 22, 190, 129, 26, 28, 61, 215, 144, 57, 61, 243, 171, 170, 187, 154, 3, 171, 62, 66, 224, 231, 60, 36, 60, 198, 190, 195, 169, 25, 62, 254, 149, 26, 190, 209, 240, 118, 191, 152, 236, 59, 61, 177, 95, 163, 189, 110, 25, 116, 190, 245, 160, 17, 188, 38, 155, 191, 61, 145, 166, 49, 191, 252, 136, 100, 191, 153, 96, 83, 188, 145, 254, 7, 189, 156, 229, 253, 188, 167, 248, 102, 62, 55, 229, 127, 61, 82, 132, 154, 62, 50, 254, 15, 191, 73, 34, 117, 62, 18, 177, 196, 62, 234, 198, 173, 190, 20, 75, 187, 191, 116, 37, 254, 60, 46, 146, 97, 189, 17, 216, 52, 62, 165, 137, 26, 62, 85, 132, 165, 62, 241, 134, 40, 62, 247, 68, 218, 189, 2, 83, 244, 189, 186, 154, 109, 61, 104, 56, 216, 61, 114, 123, 37, 63, 101, 245, 113, 62, 68, 85, 194, 190, 112, 116, 189, 61, 5, 253, 144, 62, 10, 11, 237, 189, 246, 249, 4, 188, 152, 39, 4, 190, 70, 109, 5, 62, 121, 8, 143, 190, 117, 194, 150, 190, 153, 195, 46, 61, 219, 25, 231, 61, 240, 198, 188, 189, 211, 21, 43, 62, 190, 54, 20, 189, 226, 185, 144, 190, 140, 23, 194, 189, 23, 7, 253, 190, 240, 62, 6, 61, 54, 142, 169, 189, 124, 126, 31, 190, 18, 60, 97, 189, 79, 168, 4, 189, 19, 52, 84, 190, 203, 246, 220, 61, 6, 62, 252, 189, 96, 241, 46, 62, 207, 58, 79, 190, 210, 120, 195, 189, 141, 88, 80, 62, 186, 103, 210, 61, 64, 7, 238, 61, 159, 169, 180, 62, 193, 32, 93, 62, 171, 143, 142, 190, 230, 78, 217, 60, 136, 18, 208, 189, 229, 115, 106, 62, 101, 254, 73, 190, 162, 53, 163, 60, 200, 112, 23, 190, 138, 161, 1, 190, 50, 141, 33, 61, 66, 72, 185, 188, 34, 68, 125, 189, 129, 88, 1, 190, 187, 209, 0, 62, 112, 98, 148, 61, 136, 34, 176, 61, 153, 68, 7, 62, 29, 80, 26, 190, 126, 184, 214, 61, 125, 53, 145, 59, 20, 114, 247, 189, 27, 195, 12, 62, 209, 121, 5, 190, 148, 246, 8, 190, 171, 84, 197, 189, 216, 164, 3, 190, 123, 23, 242, 189, 238, 249, 244, 189, 190, 160, 212, 189, 9, 196, 29, 190, 182, 225, 9, 59, 55, 229, 164, 59, 232, 226, 157, 61, 97, 24, 147, 189, 245, 146, 229, 189, 72, 4, 157, 61, 8, 208, 12, 190, 209, 175, 17, 60, 154, 7, 215, 189, 37, 42, 24, 190, 243, 175, 79, 190, 2, 160, 147, 188, 212, 21, 189, 60, 174, 225, 44, 189, 206, 45, 101, 62, 54, 152, 128, 190, 123, 139, 5, 190, 119, 10, 29, 62, 237, 82, 10, 62, 181, 154, 48, 190, 50, 121, 4, 191, 78, 161, 49, 60, 191, 187, 191, 62, 53, 177, 182, 61, 150, 204, 85, 190, 176, 29, 72, 62, 161, 175, 157, 190, 110, 237, 216, 61, 13, 219, 206, 189, 64, 161, 119, 190, 169, 162, 99, 61, 61, 137, 198, 190, 176, 154, 26, 191, 210, 250, 220, 62, 69, 231, 164, 190, 208, 147, 123, 190, 178, 74, 240, 60, 88, 85, 254, 61, 4, 154, 8, 61, 30, 225, 139, 62, 59, 156, 86, 62, 95, 105, 41, 62, 163, 107, 170, 189, 172, 167, 105, 62, 236, 136, 80, 190, 114, 69, 115, 189, 182, 140, 18, 62, 50, 20, 235, 62, 33, 255, 197, 189, 196, 203, 45, 191, 177, 70, 253, 62, 192, 146, 237, 189, 189, 27, 99, 62, 243, 239, 129, 189, 153, 217, 152, 188, 53, 27, 138, 60, 120, 95, 199, 61, 46, 88, 169, 189, 112, 185, 121, 190, 54, 124, 18, 62, 66, 145, 48, 61, 245, 8, 38, 62, 201, 232, 209, 190, 164, 193, 111, 61, 51, 109, 202, 190, 250, 1, 28, 190, 255, 144, 14, 62, 174, 188, 47, 61, 67, 172, 129, 61, 70, 214, 228, 188, 243, 143, 55, 190, 3, 93, 22, 62, 232, 22, 57, 190, 251, 47, 224, 189, 68, 176, 57, 190, 189, 236, 227, 61, 65, 83, 144, 190, 110, 212, 29, 190, 180, 238, 12, 62, 222, 218, 184, 62, 73, 129, 123, 190, 113, 7, 117, 191, 20, 27, 13, 63, 185, 42, 166, 189, 246, 211, 144, 60, 178, 147, 43, 191, 28, 225, 31, 190, 239, 43, 22, 62, 160, 56, 174, 62, 115, 202, 123, 189, 25, 166, 138, 62, 7, 99, 133, 190, 133, 3, 37, 61, 157, 27, 197, 62, 216, 227, 167, 189, 142, 167, 214, 62, 166, 207, 135, 190, 220, 150, 251, 190, 158, 150, 73, 186, 252, 167, 167, 61, 122, 161, 116, 190, 28, 67, 174, 59, 133, 3, 163, 61, 216, 231, 175, 62, 145, 12, 183, 190, 199, 62, 25, 189, 41, 212, 98, 62, 147, 252, 91, 190, 166, 205, 158, 61, 234, 41, 208, 61, 67, 210, 34, 62, 237, 83, 1, 191, 128, 218, 192, 189, 143, 212, 248, 62, 44, 8, 88, 190, 113, 232, 24, 190, 138, 124, 195, 189, 182, 141, 121, 62, 255, 137, 112, 61, 29, 188, 206, 188, 49, 81, 204, 60, 8, 231, 214, 190, 144, 53, 121, 61, 43, 104, 114, 190, 138, 215, 25, 61, 221, 31, 4, 190, 233, 156, 207, 62, 194, 21, 24, 62, 203, 112, 26, 62, 68, 34, 83, 190, 23, 134, 18, 61, 35, 251, 171, 188, 113, 174, 146, 189, 89, 19, 192, 61, 237, 104, 14, 191, 26, 122, 22, 62, 84, 61, 240, 61, 192, 81, 156, 189, 1, 188, 62, 62, 195, 236, 12, 190, 134, 179, 39, 190, 87, 183, 88, 62, 190, 125, 0, 190, 214, 114, 151, 189, 82, 66, 141, 188, 210, 61, 29, 62, 2, 18, 162, 190, 153, 203, 97, 60, 239, 6, 215, 190, 120, 21, 94, 62, 9, 128, 12, 62, 77, 232, 206, 189, 132, 182, 99, 190, 147, 124, 73, 62, 33, 206, 143, 62, 13, 112, 6, 62, 188, 93, 3, 62, 76, 189, 154, 189, 67, 12, 130, 62, 175, 12, 1, 61, 57, 2, 70, 190, 159, 163, 185, 62, 85, 250, 29, 61, 171, 94, 127, 190, 98, 140, 81, 62, 220, 149, 111, 62, 87, 160, 119, 189, 90, 105, 178, 190, 111, 119, 140, 62, 202, 200, 77, 62, 229, 53, 215, 61, 188, 155, 13, 62, 234, 147, 242, 189, 12, 140, 150, 188, 116, 243, 135, 62, 138, 160, 213, 62, 81, 83, 220, 189, 136, 220, 216, 190, 240, 221, 220, 62, 47, 61, 138, 60, 212, 196, 163, 62, 199, 198, 145, 188, 215, 221, 75, 62, 159, 48, 142, 189, 163, 88, 36, 62, 151, 136, 196, 190, 125, 93, 142, 189, 253, 138, 131, 62, 243, 199, 214, 190, 243, 221, 24, 62, 191, 251, 227, 187, 134, 166, 72, 62, 242, 112, 253, 190, 191, 2, 12, 61, 199, 36, 240, 61, 16, 105, 192, 189, 161, 206, 98, 189, 87, 50, 51, 191, 167, 79, 137, 189, 94, 46, 68, 191, 174, 64, 91, 189, 235, 58, 38, 191, 179, 164, 179, 190, 92, 8, 153, 190, 107, 215, 5, 63, 167, 70, 196, 62, 21, 80, 222, 190, 69, 213, 87, 191, 211, 30, 183, 61, 235, 218, 95, 60, 241, 147, 54, 191, 163, 118, 131, 61, 195, 225, 218, 190, 30, 155, 235, 61, 200, 189, 7, 62, 18, 192, 238, 190, 88, 223, 254, 190, 50, 74, 57, 190, 231, 47, 16, 190, 72, 119, 99, 62, 80, 147, 108, 191, 240, 138, 72, 190, 231, 1, 108, 190, 49, 173, 239, 188, 81, 84, 11, 63, 240, 59, 76, 62, 126, 88, 52, 191, 181, 124, 214, 62, 174, 106, 66, 62, 219, 165, 26, 62, 100, 116, 181, 62, 20, 127, 36, 191, 67, 67, 211, 188, 60, 8, 223, 60, 252, 185, 35, 190, 37, 26, 115, 188, 225, 176, 211, 60, 72, 198, 234, 61, 67, 36, 61, 189, 168, 151, 26, 190, 204, 209, 93, 189, 180, 121, 50, 60, 27, 234, 106, 189, 213, 87, 35, 190, 97, 70, 237, 61, 243, 154, 215, 189, 107, 242, 2, 62, 240, 147, 11, 190, 31, 181, 146, 188, 201, 86, 126, 61, 185, 19, 193, 189, 233, 195, 239, 61, 56, 127, 21, 62, 44, 10, 44, 190, 124, 206, 148, 61, 129, 37, 152, 188, 145, 226, 35, 62, 157, 68, 41, 190, 200, 0, 148, 189, 92, 111, 250, 61, 75, 136, 246, 187, 101, 33, 112, 189, 59, 25, 205, 189, 177, 64, 19, 62, 128, 189, 190, 189, 149, 100, 232, 58, 35, 120, 41, 189, 3, 26, 164, 61, 50, 237, 188, 61, 251, 7, 1, 62, 54, 243, 28, 62, 68, 229, 29, 62, 67, 157, 58, 62, 111, 75, 202, 62, 10, 142, 190, 62, 25, 206, 63, 62, 21, 249, 234, 61, 172, 141, 220, 61, 229, 205, 117, 189, 96, 189, 121, 62, 85, 130, 121, 61, 168, 181, 43, 61, 121, 60, 24, 62, 180, 95, 0, 190, 213, 109, 206, 60, 77, 240, 62, 61, 30, 84, 237, 189, 94, 74, 156, 61, 176, 217, 180, 62, 14, 85, 141, 190, 174, 32, 221, 189, 240, 115, 51, 190, 16, 203, 164, 61, 116, 129, 52, 190, 59, 15, 195, 190, 108, 203, 204, 62, 159, 161, 7, 62, 147, 79, 163, 61, 84, 127, 64, 190, 168, 3, 198, 61, 176, 91, 61, 190, 152, 61, 39, 190, 155, 191, 39, 61, 90, 117, 141, 62, 12, 70, 152, 61, 107, 109, 252, 190, 184, 104, 13, 63, 92, 126, 28, 190, 200, 173, 160, 62, 64, 190, 16, 191, 150, 211, 22, 190, 115, 235, 59, 62, 54, 135, 108, 62, 92, 0, 174, 190, 78, 208, 45, 190, 42, 133, 136, 190, 172, 118, 132, 62, 92, 45, 119, 62, 104, 17, 23, 62, 51, 251, 211, 62, 114, 140, 38, 191, 74, 77, 15, 191, 103, 253, 208, 189, 224, 122, 86, 61, 6, 24, 23, 190, 104, 41, 198, 190, 190, 51, 43, 62, 183, 91, 158, 62, 120, 2, 132, 190, 215, 96, 236, 190, 182, 195, 152, 62, 154, 193, 192, 190, 252, 232, 198, 62, 186, 224, 135, 62, 143, 109, 167, 190, 175, 35, 32, 191, 147, 80, 32, 62, 2, 67, 70, 63, 131, 9, 17, 191, 56, 9, 196, 61, 82, 89, 144, 191, 213, 170, 176, 62, 161, 170, 197, 62, 122, 0, 0, 190, 195, 238, 41, 191, 184, 182, 34, 62, 186, 76, 240, 61, 66, 79, 103, 62, 55, 0, 166, 190, 196, 144, 158, 190, 221, 85, 179, 62, 87, 28, 21, 191, 20, 170, 128, 189, 24, 255, 219, 62, 200, 41, 184, 61, 185, 47, 85, 62, 217, 151, 134, 62, 83, 21, 231, 61, 39, 219, 98, 62, 143, 75, 40, 191, 241, 227, 32, 63, 15, 90, 31, 191, 233, 85, 106, 191, 56, 171, 27, 190, 9, 62, 244, 61, 176, 72, 74, 190, 118, 190, 38, 62, 253, 232, 115, 62, 118, 241, 138, 188, 154, 16, 236, 190, 205, 210, 166, 62, 156, 192, 159, 62, 255, 33, 226, 61, 230, 196, 44, 191, 153, 238, 238, 59, 131, 54, 72, 60, 234, 55, 66, 189, 153, 167, 156, 61, 235, 233, 4, 62, 146, 98, 171, 189, 93, 145, 35, 62, 193, 156, 146, 189, 225, 161, 192, 61, 120, 254, 197, 62, 85, 85, 125, 190, 140, 63, 104, 190, 172, 122, 137, 190, 155, 173, 56, 61, 220, 48, 155, 189, 155, 89, 38, 190, 238, 99, 207, 189, 159, 224, 222, 189, 30, 218, 194, 61, 71, 225, 58, 189, 115, 147, 0, 62, 136, 58, 7, 191, 171, 150, 32, 61, 220, 71, 180, 189, 153, 87, 12, 190, 231, 85, 100, 190, 165, 227, 200, 62, 172, 193, 216, 189, 98, 69, 223, 190, 93, 92, 99, 62, 98, 68, 160, 190, 39, 108, 173, 61, 75, 250, 198, 61, 79, 170, 10, 61, 83, 255, 11, 191, 101, 44, 158, 189, 143, 170, 168, 62, 245, 66, 84, 62, 146, 33, 4, 189, 236, 161, 200, 190, 9, 201, 0, 62, 195, 100, 126, 189, 162, 79, 59, 63, 10, 106, 221, 61, 33, 153, 149, 61, 98, 76, 10, 62, 25, 137, 190, 189, 117, 254, 0, 61, 38, 169, 183, 61, 201, 146, 76, 191, 2, 137, 131, 189, 130, 118, 14, 61, 99, 130, 139, 62, 198, 152, 170, 189, 57, 151, 157, 189, 225, 41, 227, 61, 248, 49, 57, 61, 132, 159, 203, 190, 89, 225, 115, 190, 129, 201, 189, 62, 139, 80, 42, 191, 170, 210, 98, 190, 21, 26, 162, 61, 13, 148, 129, 60, 90, 155, 68, 188, 82, 198, 139, 62, 59, 228, 219, 61, 103, 37, 175, 189, 93, 99, 115, 61, 155, 179, 248, 60, 101, 25, 163, 189, 176, 174, 122, 61, 246, 248, 160, 62, 234, 208, 24, 189, 152, 38, 230, 187, 230, 98, 161, 60, 178, 211, 11, 61, 54, 64, 52, 190, 119, 182, 189, 61, 99, 212, 192, 189, 195, 49, 150, 189, 141, 183, 195, 190, 162, 223, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 117, 24, 190, 62, 226, 71, 189, 163, 185, 124, 60, 191, 15, 127, 60, 188, 236, 165, 62, 4, 51, 54, 188, 0, 69, 26, 190, 101, 93, 147, 61, 249, 71, 147, 62, 59, 11, 25, 190, 55, 188, 10, 190, 216, 100, 163, 62, 158, 249, 4, 62, 104, 150, 200, 61, 222, 71, 248, 60, 154, 193, 138, 61, 17, 1, 93, 62, 192, 0, 29, 62, 165, 241, 3, 190, 159, 21, 69, 189, 92, 118, 184, 61, 47, 78, 213, 189, 201, 51, 158, 62, 179, 58, 250, 61, 182, 18, 130, 62, 197, 222, 118, 189, 150, 77, 154, 60, 29, 129, 230, 61, 235, 230, 160, 62, 237, 136, 73, 62, 207, 182, 87, 62, 86, 206, 90, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 250, 119, 191, 216, 254, 59, 191, 58, 209, 23, 62, 150, 213, 1, 191, 98, 138, 57, 189, 141, 193, 128, 63, 179, 160, 24, 189, 141, 197, 20, 190, 6, 250, 234, 187, 63, 229, 58, 190, 25, 205, 31, 191, 66, 168, 195, 63, 179, 24, 114, 189, 48, 208, 166, 63, 13, 89, 142, 190, 91, 40, 181, 62, 116, 170, 139, 189, 104, 189, 10, 190, 137, 81, 205, 62, 35, 107, 156, 62, 215, 245, 2, 63, 77, 181, 235, 189, 245, 244, 82, 190, 227, 62, 168, 62, 51, 151, 147, 191, 102, 101, 44, 189, 130, 59, 108, 190, 127, 196, 35, 63, 2, 185, 21, 191, 68, 172, 89, 62, 205, 179, 31, 191, 59, 202, 164, 60, 76, 62, 174, 62, 72, 54, 163, 62, 203, 46, 55, 189, 12, 77, 125, 59, 229, 66, 76, 190, 230, 248, 98, 62, 230, 137, 44, 62, 176, 88, 85, 190, 230, 31, 106, 190, 29, 84, 226, 189, 80, 245, 128, 62, 32, 176, 179, 62, 124, 125, 33, 190, 56, 97, 127, 62, 63, 23, 120, 190, 5, 169, 85, 190, 15, 227, 159, 190, 177, 188, 176, 188, 247, 66, 194, 61, 102, 92, 170, 62, 81, 187, 97, 62, 63, 149, 28, 62, 123, 37, 33, 190, 113, 64, 71, 190, 76, 115, 148, 62, 20, 91, 21, 190, 241, 95, 108, 61, 5, 109, 111, 189, 132, 155, 146, 62, 253, 42, 124, 190, 206, 129, 78, 62, 137, 217, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 90, 231, 189, 15, 42, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {246, 223, 146, 62, 184, 67, 112, 188, 232, 11, 39, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 56, 243, 63, 144, 107, 114, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0099/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}