// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 79, 230, 62, 155, 85, 132, 191, 102, 87, 151, 190, 165, 32, 176, 62, 5, 21, 26, 62, 103, 165, 42, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 207, 108, 210, 61, 220, 228, 4, 63, 9, 97, 37, 191, 104, 207, 175, 189, 68, 54, 61, 191, 59, 65, 0, 63, 183, 102, 142, 61, 23, 105, 78, 191, 178, 206, 29, 190, 149, 204, 125, 63, 103, 141, 185, 62, 255, 212, 55, 62, 99, 180, 135, 190, 59, 216, 12, 191, 0, 0, 246, 189, 94, 140, 13, 62, 49, 102, 139, 191, 234, 177, 27, 62, 159, 0, 233, 190, 255, 21, 177, 190, 216, 226, 113, 190, 216, 79, 55, 191, 195, 212, 160, 190, 246, 134, 11, 63, 181, 207, 157, 62, 85, 99, 186, 190, 7, 163, 22, 63, 209, 39, 28, 191, 185, 163, 226, 190, 13, 169, 112, 189, 220, 177, 145, 61, 9, 205, 128, 191, 220, 84, 27, 63, 93, 41, 44, 62, 125, 44, 155, 191, 33, 195, 36, 190, 43, 36, 214, 62, 222, 116, 113, 190, 43, 249, 21, 63, 80, 233, 6, 191, 123, 174, 38, 191, 137, 151, 17, 63, 27, 215, 15, 63, 156, 177, 18, 191, 17, 134, 165, 190, 91, 122, 180, 60, 208, 171, 46, 191, 217, 87, 240, 62, 103, 185, 104, 62, 228, 217, 129, 62, 17, 25, 235, 62, 245, 130, 165, 62, 118, 190, 63, 63, 80, 166, 245, 190, 118, 55, 13, 62, 146, 42, 48, 191, 211, 162, 202, 189, 217, 119, 35, 191, 39, 96, 231, 189, 217, 233, 139, 190, 166, 118, 2, 191, 159, 228, 235, 61, 226, 47, 132, 62, 164, 106, 222, 62, 216, 140, 44, 191, 31, 52, 244, 190, 97, 252, 218, 61, 116, 0, 57, 191, 82, 0, 91, 62, 105, 16, 183, 190, 238, 147, 59, 190, 222, 250, 141, 62, 15, 107, 55, 62, 184, 150, 54, 62, 192, 65, 116, 62, 125, 63, 207, 190, 156, 243, 31, 190, 230, 187, 186, 62, 173, 190, 233, 190, 78, 58, 134, 63, 228, 236, 50, 62, 210, 243, 94, 61, 7, 62, 146, 190, 255, 11, 76, 63, 111, 105, 158, 62, 3, 216, 73, 63, 6, 93, 101, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 95, 213, 190, 39, 172, 176, 190, 48, 0, 19, 191, 99, 68, 157, 190, 119, 245, 180, 61, 30, 208, 237, 190, 135, 176, 121, 62, 1, 161, 26, 191, 250, 131, 209, 62, 35, 138, 116, 188, 144, 184, 222, 190, 201, 34, 238, 60, 56, 212, 50, 189, 24, 106, 109, 62, 15, 96, 196, 62, 19, 2, 158, 62, 48, 204, 143, 190, 200, 0, 5, 189, 124, 162, 94, 62, 174, 229, 2, 63, 229, 2, 157, 62, 159, 187, 27, 191, 254, 90, 75, 63, 10, 69, 54, 62, 235, 77, 166, 62, 24, 198, 103, 62, 34, 85, 185, 190, 166, 145, 148, 190, 36, 171, 95, 190, 20, 229, 15, 61, 62, 108, 251, 62, 33, 99, 2, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 195, 251, 61, 72, 231, 14, 191, 172, 51, 171, 60, 144, 39, 69, 62, 125, 36, 77, 62, 185, 135, 150, 61, 26, 183, 237, 189, 171, 139, 9, 62, 204, 6, 173, 62, 90, 90, 117, 190, 228, 115, 74, 62, 44, 135, 196, 190, 120, 119, 44, 61, 249, 171, 100, 62, 14, 12, 142, 62, 188, 79, 92, 190, 108, 85, 114, 62, 45, 154, 78, 62, 198, 174, 209, 62, 175, 227, 146, 189, 153, 39, 143, 190, 119, 85, 148, 190, 221, 123, 198, 61, 248, 182, 92, 61, 51, 255, 205, 60, 229, 193, 11, 60, 195, 160, 149, 190, 29, 253, 144, 190, 245, 122, 56, 62, 60, 116, 82, 188, 247, 18, 22, 62, 36, 217, 72, 191, 78, 113, 33, 62, 127, 117, 33, 187, 69, 4, 180, 58, 177, 96, 180, 60, 235, 101, 95, 62, 67, 93, 66, 61, 65, 139, 68, 190, 211, 23, 199, 61, 74, 142, 139, 62, 224, 17, 106, 189, 210, 157, 111, 62, 74, 61, 208, 189, 222, 140, 23, 61, 53, 98, 84, 61, 76, 239, 87, 61, 16, 127, 32, 190, 244, 30, 234, 61, 202, 251, 6, 62, 254, 86, 10, 62, 43, 194, 41, 62, 27, 174, 220, 190, 230, 149, 1, 187, 248, 233, 189, 60, 117, 0, 220, 60, 118, 52, 143, 190, 37, 123, 158, 190, 223, 48, 202, 189, 157, 160, 36, 188, 130, 152, 153, 62, 7, 197, 55, 62, 243, 200, 47, 62, 216, 78, 106, 190, 52, 95, 147, 190, 190, 32, 90, 61, 247, 157, 75, 60, 233, 184, 155, 189, 181, 85, 152, 62, 120, 140, 77, 62, 253, 90, 9, 190, 147, 164, 149, 60, 128, 147, 104, 62, 133, 184, 143, 61, 197, 6, 3, 61, 30, 34, 197, 61, 58, 24, 202, 61, 117, 15, 48, 62, 165, 109, 89, 62, 225, 238, 178, 61, 177, 94, 10, 62, 102, 46, 21, 191, 253, 5, 98, 62, 121, 25, 204, 189, 131, 20, 234, 189, 222, 170, 15, 189, 76, 241, 51, 190, 137, 138, 232, 188, 222, 221, 117, 190, 6, 55, 201, 62, 0, 5, 4, 62, 254, 40, 108, 61, 74, 93, 249, 61, 196, 190, 51, 60, 58, 99, 135, 62, 115, 112, 78, 189, 62, 242, 30, 62, 71, 50, 160, 61, 12, 215, 13, 62, 50, 69, 220, 189, 5, 17, 160, 62, 6, 218, 183, 61, 18, 182, 51, 62, 158, 213, 173, 60, 201, 45, 6, 62, 177, 195, 204, 61, 231, 57, 25, 62, 161, 249, 117, 61, 183, 184, 20, 62, 241, 126, 30, 62, 196, 53, 36, 61, 185, 197, 108, 62, 62, 84, 179, 61, 128, 240, 91, 190, 63, 199, 154, 62, 70, 177, 87, 60, 132, 86, 104, 190, 126, 4, 221, 62, 155, 218, 72, 190, 82, 216, 169, 189, 232, 193, 230, 61, 172, 244, 85, 62, 176, 247, 190, 61, 36, 108, 47, 190, 199, 156, 188, 188, 253, 48, 111, 190, 31, 216, 162, 62, 240, 135, 64, 189, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 75, 103, 51, 187, 69, 52, 64, 189, 119, 39, 112, 189, 113, 74, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 173, 110, 129, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 144, 41, 175, 189, 195, 45, 170, 60, 139, 92, 241, 189, 104, 227, 29, 190, 1, 59, 19, 62, 128, 135, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 210, 56, 56, 189, 173, 151, 0, 62, 116, 210, 84, 189, 72, 138, 112, 189, 145, 208, 42, 189, 21, 254, 49, 189, 114, 120, 58, 61, 89, 159, 18, 59, 198, 141, 254, 61, 94, 31, 12, 190, 207, 73, 215, 61, 147, 104, 19, 62, 165, 96, 207, 188, 70, 13, 101, 188, 67, 252, 45, 62, 185, 117, 141, 61, 160, 210, 70, 190, 130, 154, 1, 62, 27, 204, 51, 190, 107, 143, 232, 189, 109, 238, 6, 189, 63, 93, 234, 61, 243, 47, 123, 189, 100, 73, 11, 190, 140, 74, 164, 189, 195, 206, 174, 189, 73, 168, 9, 189, 176, 44, 131, 60, 17, 191, 10, 61, 100, 176, 217, 60, 120, 232, 18, 190, 121, 232, 202, 57, 67, 181, 244, 189, 58, 158, 142, 61, 212, 126, 3, 190, 39, 39, 63, 190, 59, 245, 238, 189, 173, 92, 139, 188, 115, 132, 242, 61, 190, 99, 107, 61, 208, 110, 34, 61, 114, 140, 245, 61, 155, 68, 87, 60, 84, 178, 190, 189, 107, 113, 133, 60, 175, 177, 190, 61, 154, 71, 254, 189, 103, 29, 223, 60, 190, 234, 204, 188, 73, 107, 23, 61, 29, 17, 234, 61, 107, 229, 206, 189, 148, 86, 40, 61, 68, 169, 221, 189, 225, 141, 26, 190, 181, 111, 83, 189, 143, 215, 55, 61, 216, 144, 37, 190, 191, 218, 135, 189, 10, 141, 39, 189, 154, 85, 47, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 178, 121, 42, 62, 240, 46, 56, 189, 181, 6, 205, 189, 8, 119, 94, 60, 148, 192, 203, 190, 122, 110, 197, 62, 220, 211, 63, 60, 246, 118, 143, 190, 98, 43, 199, 190, 226, 221, 172, 190, 241, 203, 130, 62, 96, 147, 154, 190, 230, 246, 9, 191, 63, 81, 107, 62, 218, 10, 232, 189, 58, 18, 80, 62, 17, 159, 241, 187, 82, 36, 212, 190, 8, 117, 183, 189, 185, 60, 29, 62, 92, 142, 164, 190, 21, 124, 237, 190, 216, 174, 61, 190, 253, 35, 72, 62, 69, 237, 209, 62, 131, 60, 241, 61, 150, 238, 193, 61, 210, 71, 147, 61, 69, 79, 255, 189, 187, 42, 58, 61, 140, 180, 46, 61, 156, 48, 224, 61, 0, 66, 146, 190, 166, 210, 237, 61, 33, 219, 2, 190, 15, 90, 113, 62, 85, 81, 130, 190, 75, 103, 11, 62, 49, 41, 239, 187, 136, 251, 251, 190, 121, 201, 24, 191, 215, 89, 169, 189, 62, 133, 87, 190, 243, 64, 117, 190, 24, 139, 13, 62, 77, 203, 114, 62, 86, 69, 22, 191, 168, 216, 112, 188, 24, 29, 148, 62, 203, 211, 12, 191, 175, 173, 128, 62, 241, 226, 13, 190, 112, 148, 36, 191, 71, 141, 117, 190, 199, 0, 7, 191, 77, 5, 191, 190, 27, 40, 114, 190, 217, 43, 86, 62, 146, 56, 134, 62, 99, 22, 93, 62, 107, 29, 213, 189, 205, 97, 15, 63, 213, 148, 135, 61, 0, 188, 68, 61, 101, 21, 87, 191, 120, 213, 19, 190, 19, 123, 198, 190, 174, 140, 143, 189, 221, 37, 208, 190, 52, 213, 228, 61, 110, 131, 5, 62, 203, 57, 38, 189, 45, 80, 245, 190, 58, 116, 144, 190, 117, 17, 152, 62, 118, 33, 112, 190, 167, 139, 66, 60, 48, 107, 177, 188, 144, 136, 140, 190, 116, 254, 165, 62, 209, 199, 0, 190, 194, 170, 112, 61, 79, 60, 192, 189, 207, 209, 217, 61, 187, 119, 214, 190, 176, 111, 128, 190, 114, 241, 168, 58, 100, 22, 18, 62, 30, 149, 213, 62, 32, 76, 155, 61, 39, 164, 28, 61, 121, 7, 112, 189, 121, 214, 211, 189, 125, 232, 185, 62, 52, 161, 229, 189, 77, 217, 252, 61, 32, 43, 37, 190, 39, 82, 1, 190, 66, 72, 58, 61, 86, 222, 130, 62, 130, 42, 247, 187, 31, 21, 29, 190, 73, 139, 1, 61, 38, 164, 22, 62, 252, 135, 139, 189, 199, 169, 211, 61, 129, 43, 239, 61, 251, 178, 27, 62, 202, 21, 189, 189, 242, 180, 2, 190, 194, 136, 16, 190, 136, 195, 52, 190, 203, 209, 35, 62, 90, 115, 131, 189, 65, 82, 150, 189, 249, 187, 128, 61, 129, 155, 13, 62, 170, 239, 82, 189, 97, 112, 221, 188, 191, 214, 208, 61, 8, 219, 222, 189, 154, 222, 152, 60, 227, 20, 96, 60, 134, 204, 68, 60, 4, 94, 202, 189, 55, 221, 220, 189, 111, 223, 202, 61, 103, 196, 217, 186, 131, 15, 175, 189, 126, 94, 59, 190, 112, 136, 157, 61, 159, 143, 6, 189, 156, 116, 143, 60, 217, 207, 129, 190, 93, 159, 13, 190, 34, 234, 96, 62, 79, 99, 19, 62, 34, 60, 32, 62, 54, 24, 228, 60, 88, 16, 44, 62, 25, 90, 68, 62, 140, 81, 26, 189, 245, 8, 121, 62, 167, 240, 73, 190, 22, 109, 29, 61, 156, 190, 101, 62, 220, 27, 254, 61, 152, 36, 149, 189, 165, 6, 13, 62, 3, 181, 150, 61, 60, 131, 93, 62, 89, 45, 208, 189, 207, 228, 152, 190, 251, 111, 29, 190, 34, 12, 40, 189, 218, 105, 48, 62, 106, 96, 251, 60, 4, 58, 118, 190, 50, 248, 177, 189, 214, 95, 70, 61, 75, 79, 3, 62, 212, 186, 159, 188, 68, 163, 70, 62, 133, 86, 137, 190, 172, 254, 179, 62, 11, 156, 190, 61, 251, 218, 173, 188, 222, 184, 42, 62, 4, 252, 55, 190, 165, 162, 129, 62, 106, 145, 153, 190, 224, 209, 182, 61, 52, 236, 230, 61, 94, 42, 23, 190, 112, 186, 24, 188, 197, 22, 91, 61, 78, 164, 52, 189, 36, 34, 66, 190, 161, 142, 87, 60, 62, 109, 41, 190, 116, 129, 59, 187, 124, 107, 109, 62, 92, 165, 119, 190, 3, 21, 22, 190, 203, 84, 25, 190, 84, 23, 221, 62, 3, 116, 206, 188, 66, 41, 47, 190, 217, 177, 89, 189, 203, 143, 136, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 20, 213, 23, 190, 172, 48, 131, 190, 45, 120, 246, 60, 130, 34, 161, 189, 103, 51, 176, 61, 90, 175, 11, 189, 234, 103, 142, 189, 126, 234, 35, 190, 96, 33, 109, 189, 241, 176, 184, 60, 127, 25, 115, 188, 53, 187, 174, 187, 98, 178, 25, 62, 63, 30, 152, 188, 137, 184, 197, 61, 30, 137, 12, 62, 36, 145, 151, 61, 142, 58, 31, 62, 186, 99, 152, 189, 147, 221, 149, 189, 199, 237, 135, 189, 54, 61, 122, 189, 161, 193, 250, 189, 59, 234, 51, 190, 123, 168, 233, 189, 72, 14, 27, 190, 21, 69, 197, 189, 64, 85, 112, 58, 6, 106, 11, 62, 64, 198, 29, 190, 32, 87, 15, 190, 120, 135, 248, 189, 229, 51, 2, 190, 218, 62, 27, 190, 29, 70, 10, 190, 221, 226, 62, 191, 134, 123, 65, 59, 83, 183, 48, 190, 134, 65, 45, 190, 185, 142, 151, 191, 218, 38, 204, 190, 97, 159, 144, 62, 16, 86, 151, 190, 3, 76, 67, 190, 223, 87, 126, 62, 145, 23, 64, 191, 191, 203, 139, 189, 125, 24, 156, 62, 8, 118, 103, 191, 129, 7, 132, 187, 61, 79, 73, 190, 57, 185, 33, 191, 196, 130, 170, 190, 82, 35, 8, 191, 183, 202, 245, 190, 158, 168, 228, 62, 51, 8, 193, 190, 133, 52, 197, 62, 13, 9, 45, 60, 18, 158, 12, 190, 34, 36, 228, 62, 91, 225, 166, 189, 8, 229, 16, 190, 244, 4, 9, 191, 215, 162, 68, 189, 30, 212, 248, 190, 188, 219, 118, 61, 24, 206, 154, 60, 251, 80, 17, 189, 125, 104, 23, 62, 112, 60, 89, 60, 181, 238, 136, 62, 140, 188, 172, 186, 249, 25, 148, 189, 78, 96, 66, 61, 27, 152, 116, 62, 34, 168, 156, 189, 232, 241, 8, 61, 91, 182, 91, 190, 15, 252, 237, 189, 250, 119, 148, 62, 11, 166, 63, 62, 221, 134, 252, 61, 52, 142, 125, 62, 250, 51, 139, 62, 156, 245, 141, 62, 201, 170, 251, 187, 7, 47, 184, 189, 219, 175, 197, 190, 242, 56, 27, 62, 56, 67, 177, 187, 106, 3, 128, 61, 200, 63, 129, 190, 40, 57, 155, 56, 191, 79, 27, 190, 13, 212, 190, 60, 120, 238, 115, 188, 103, 240, 68, 62, 33, 104, 134, 190, 199, 69, 223, 189, 14, 231, 184, 61, 48, 211, 247, 188, 216, 130, 1, 190, 65, 214, 99, 61, 39, 91, 27, 190, 198, 55, 55, 190, 137, 40, 211, 189, 206, 216, 73, 190, 230, 159, 250, 60, 86, 90, 131, 189, 251, 142, 135, 188, 57, 136, 173, 60, 128, 237, 158, 61, 34, 81, 50, 60, 62, 177, 21, 190, 111, 209, 50, 190, 155, 77, 8, 62, 93, 16, 143, 189, 244, 224, 51, 61, 138, 202, 43, 189, 177, 10, 236, 61, 234, 140, 180, 60, 186, 250, 135, 189, 21, 147, 36, 190, 205, 248, 9, 190, 223, 65, 225, 61, 79, 226, 239, 61, 25, 240, 44, 190, 10, 120, 40, 62, 49, 11, 0, 62, 212, 20, 71, 59, 185, 23, 138, 190, 94, 164, 46, 61, 83, 134, 169, 61, 170, 245, 226, 189, 145, 221, 56, 190, 40, 57, 52, 190, 60, 204, 43, 60, 190, 120, 193, 189, 223, 222, 248, 189, 188, 76, 59, 190, 148, 49, 251, 189, 172, 215, 29, 61, 240, 193, 10, 190, 49, 163, 34, 190, 23, 189, 34, 189, 212, 218, 118, 61, 255, 174, 146, 190, 10, 65, 95, 60, 220, 174, 245, 59, 210, 243, 1, 62, 252, 24, 118, 62, 182, 23, 133, 61, 195, 251, 20, 62, 111, 251, 213, 61, 74, 51, 99, 62, 90, 167, 18, 62, 144, 39, 138, 189, 145, 166, 9, 190, 20, 90, 130, 189, 78, 214, 87, 189, 76, 3, 13, 60, 75, 85, 77, 62, 68, 49, 63, 62, 6, 197, 92, 61, 212, 147, 31, 62, 74, 173, 228, 188, 88, 21, 97, 190, 37, 151, 177, 188, 58, 162, 202, 61, 149, 215, 251, 189, 111, 103, 75, 189, 120, 180, 10, 62, 12, 123, 122, 188, 88, 181, 213, 187, 199, 83, 255, 61, 185, 126, 34, 190, 129, 31, 10, 188, 54, 80, 191, 61, 231, 107, 0, 190, 80, 144, 201, 189, 239, 19, 16, 190, 106, 176, 131, 190, 127, 28, 142, 62, 75, 234, 241, 62, 196, 210, 77, 61, 85, 48, 15, 61, 21, 100, 90, 61, 46, 187, 43, 190, 155, 122, 169, 60, 148, 26, 64, 189, 187, 67, 42, 190, 142, 7, 129, 188, 84, 142, 36, 190, 160, 245, 5, 62, 207, 165, 53, 62, 52, 199, 89, 62, 221, 132, 26, 190, 136, 244, 101, 190, 220, 49, 27, 191, 171, 79, 81, 188, 246, 246, 186, 62, 67, 212, 76, 190, 142, 235, 27, 190, 142, 176, 192, 59, 126, 174, 16, 190, 26, 126, 17, 62, 79, 128, 82, 62, 89, 66, 95, 190, 228, 35, 0, 62, 129, 253, 8, 62, 80, 40, 82, 190, 229, 38, 64, 60, 146, 94, 193, 190, 12, 34, 23, 62, 153, 75, 191, 62, 7, 145, 40, 62, 231, 225, 194, 186, 113, 77, 60, 61, 159, 162, 127, 60, 217, 170, 221, 61, 137, 143, 17, 190, 122, 134, 105, 62, 191, 218, 80, 190, 176, 174, 4, 190, 130, 108, 148, 61, 168, 50, 48, 62, 99, 233, 74, 190, 93, 0, 51, 190, 204, 60, 226, 189, 28, 150, 25, 190, 254, 228, 241, 61, 39, 36, 10, 188, 115, 176, 10, 62, 49, 28, 233, 61, 231, 8, 20, 189, 5, 115, 12, 190, 40, 147, 93, 61, 222, 35, 21, 188, 132, 247, 208, 60, 45, 147, 230, 61, 119, 183, 104, 62, 233, 125, 24, 190, 184, 111, 13, 190, 66, 157, 159, 61, 142, 1, 215, 189, 233, 214, 3, 62, 245, 62, 111, 61, 94, 179, 202, 190, 2, 70, 126, 61, 174, 41, 230, 60, 105, 204, 198, 61, 211, 139, 64, 62, 182, 26, 129, 190, 138, 40, 114, 190, 170, 185, 14, 190, 70, 127, 54, 189, 209, 194, 36, 62, 215, 3, 66, 190, 112, 202, 124, 190, 142, 215, 81, 189, 112, 26, 72, 60, 31, 65, 3, 190, 40, 78, 182, 61, 188, 145, 131, 61, 76, 99, 166, 62, 0, 253, 214, 189, 216, 61, 1, 62, 129, 172, 104, 61, 135, 122, 14, 62, 54, 55, 224, 189, 238, 220, 6, 61, 72, 177, 128, 62, 70, 113, 171, 62, 9, 37, 6, 190, 198, 43, 4, 61, 84, 34, 174, 61, 73, 239, 30, 62, 137, 32, 90, 189, 142, 227, 214, 60, 103, 222, 176, 190, 106, 179, 199, 61, 14, 4, 219, 61, 104, 201, 10, 62, 110, 66, 147, 60, 59, 178, 7, 190, 158, 213, 142, 190, 163, 148, 226, 59, 164, 161, 34, 61, 38, 220, 0, 62, 136, 162, 67, 190, 102, 254, 32, 62, 172, 245, 244, 189, 248, 91, 82, 61, 38, 197, 245, 61, 29, 158, 135, 61, 110, 172, 45, 190, 144, 164, 31, 60, 234, 26, 0, 62, 61, 66, 240, 61, 135, 209, 43, 61, 20, 168, 179, 188, 54, 44, 184, 189, 123, 112, 62, 61, 207, 145, 213, 61, 140, 203, 8, 189, 61, 107, 246, 189, 140, 45, 130, 61, 88, 134, 183, 62, 53, 152, 211, 60, 126, 123, 80, 62, 33, 182, 22, 61, 232, 203, 139, 190, 244, 138, 130, 189, 194, 222, 105, 62, 170, 53, 25, 61, 78, 109, 77, 190, 222, 231, 173, 61, 131, 219, 182, 60, 247, 29, 83, 62, 9, 90, 50, 62, 21, 135, 16, 62, 161, 82, 37, 62, 145, 132, 19, 191, 119, 78, 164, 61, 222, 47, 35, 190, 231, 53, 137, 62, 229, 162, 12, 62, 57, 82, 59, 60, 255, 128, 139, 62, 205, 190, 188, 189, 59, 35, 221, 188, 20, 4, 103, 62, 51, 194, 197, 189, 22, 211, 153, 62, 33, 185, 120, 62, 53, 6, 87, 62, 41, 237, 43, 189, 145, 9, 36, 62, 184, 146, 154, 61, 2, 206, 25, 191, 8, 220, 133, 60, 11, 5, 25, 62, 167, 51, 235, 58, 121, 223, 19, 62, 52, 67, 130, 190, 207, 98, 38, 62, 250, 165, 181, 190, 246, 238, 5, 62, 40, 52, 123, 189, 139, 158, 106, 62, 215, 7, 12, 61, 41, 168, 13, 190, 132, 66, 29, 62, 115, 239, 244, 61, 121, 154, 255, 190, 194, 140, 87, 62, 13, 221, 172, 189, 53, 118, 32, 191, 59, 192, 2, 191, 189, 143, 179, 190, 198, 134, 5, 190, 225, 55, 6, 190, 77, 110, 227, 189, 41, 79, 124, 62, 92, 147, 216, 189, 143, 165, 35, 188, 221, 190, 159, 62, 157, 65, 110, 190, 3, 49, 191, 61, 238, 48, 25, 187, 220, 226, 92, 190, 71, 69, 193, 190, 89, 29, 15, 190, 112, 151, 19, 190, 37, 234, 160, 61, 248, 85, 71, 190, 183, 12, 17, 62, 124, 60, 155, 189, 95, 246, 116, 61, 157, 104, 134, 62, 59, 233, 38, 62, 221, 70, 36, 61, 14, 70, 229, 190, 90, 247, 6, 190, 3, 84, 132, 190, 187, 143, 38, 190, 132, 179, 73, 188, 149, 48, 126, 61, 190, 45, 223, 60, 137, 188, 162, 60, 186, 89, 99, 61, 249, 76, 208, 61, 192, 107, 27, 62, 71, 97, 119, 60, 189, 56, 206, 189, 103, 162, 243, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 149, 166, 196, 61, 237, 203, 131, 189, 27, 139, 152, 189, 207, 86, 133, 61, 43, 127, 196, 61, 146, 113, 254, 189, 112, 5, 169, 189, 219, 2, 67, 189, 236, 158, 220, 189, 15, 159, 43, 62, 186, 41, 46, 61, 23, 182, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 204, 225, 83, 62, 223, 252, 212, 61, 98, 95, 207, 189, 121, 122, 10, 191, 200, 136, 189, 189, 126, 71, 128, 190, 87, 109, 94, 62, 98, 152, 173, 189, 255, 229, 222, 189, 182, 8, 208, 190, 137, 22, 166, 189, 254, 242, 148, 188, 140, 240, 243, 189, 207, 137, 16, 62, 115, 8, 237, 62, 137, 109, 205, 61, 45, 81, 64, 190, 104, 146, 7, 63, 184, 222, 125, 189, 3, 138, 92, 61, 157, 211, 134, 190, 75, 29, 227, 189, 7, 147, 240, 190, 99, 111, 111, 189, 232, 177, 135, 62, 97, 21, 34, 62, 245, 129, 22, 60, 196, 139, 4, 62, 240, 63, 63, 190, 0, 252, 205, 189, 198, 150, 210, 61, 41, 144, 202, 186, 218, 95, 99, 189, 56, 214, 232, 59, 145, 74, 51, 61, 182, 173, 180, 61, 212, 204, 175, 62, 123, 0, 187, 189, 31, 13, 32, 189, 101, 36, 34, 58, 30, 91, 19, 62, 130, 148, 53, 61, 240, 79, 253, 61, 112, 108, 50, 190, 57, 186, 30, 62, 194, 124, 53, 62, 210, 137, 94, 62, 0, 212, 189, 59, 211, 219, 129, 62, 143, 225, 134, 62, 192, 154, 174, 62, 201, 6, 101, 189, 144, 72, 153, 190, 168, 123, 238, 190, 141, 34, 162, 61, 190, 175, 82, 62, 120, 56, 237, 61, 180, 207, 87, 190, 215, 129, 176, 189, 0, 21, 24, 62, 187, 111, 89, 62, 211, 84, 1, 61, 170, 123, 77, 62, 245, 137, 69, 61, 224, 239, 19, 189, 156, 44, 18, 190, 79, 25, 39, 188, 240, 117, 125, 61, 85, 40, 134, 62, 158, 166, 242, 61, 74, 44, 103, 60, 57, 159, 157, 189, 219, 104, 61, 62, 117, 121, 187, 187, 54, 49, 197, 61, 83, 148, 126, 188, 48, 70, 182, 61, 231, 34, 84, 62, 20, 188, 126, 61, 222, 185, 5, 62, 156, 106, 45, 61, 46, 142, 105, 62, 247, 248, 181, 61, 112, 73, 8, 62, 22, 169, 117, 190, 33, 254, 205, 189, 181, 202, 155, 61, 232, 131, 187, 61, 202, 180, 146, 59, 73, 224, 58, 189, 121, 99, 18, 62, 46, 219, 54, 190, 203, 220, 206, 61, 39, 131, 142, 62, 224, 173, 148, 189, 232, 79, 11, 190, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 82, 48, 153, 189, 222, 117, 148, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 228, 69, 25, 189, 214, 122, 14, 62, 115, 150, 91, 61, 12, 143, 35, 190, 86, 167, 23, 190, 181, 38, 32, 190, 220, 112, 242, 189, 4, 194, 5, 62, 44, 74, 66, 190, 210, 68, 29, 62, 4, 209, 59, 190, 11, 4, 91, 190, 74, 185, 20, 190, 254, 41, 248, 61, 91, 153, 217, 61, 228, 194, 79, 61, 101, 34, 193, 188, 38, 219, 135, 61, 148, 180, 255, 187, 207, 92, 20, 62, 216, 104, 146, 189, 39, 143, 2, 62, 8, 175, 107, 61, 8, 135, 12, 190, 228, 189, 220, 190, 35, 33, 65, 190, 168, 188, 46, 190, 243, 226, 65, 189, 208, 192, 149, 187, 70, 195, 252, 61, 54, 66, 7, 191, 224, 141, 248, 189, 65, 183, 54, 190, 4, 80, 76, 189, 0, 209, 48, 62, 204, 117, 158, 190, 249, 86, 114, 62, 198, 239, 31, 190, 69, 57, 4, 191, 1, 241, 164, 190, 114, 26, 125, 62, 120, 214, 190, 190, 99, 132, 74, 62, 96, 101, 195, 61, 238, 78, 75, 191, 205, 188, 33, 190, 139, 176, 81, 62, 211, 239, 4, 62, 126, 169, 36, 191, 112, 39, 47, 191, 25, 14, 25, 190, 172, 99, 11, 189, 83, 24, 3, 62, 30, 43, 137, 62, 158, 17, 59, 62, 4, 231, 145, 188, 230, 233, 99, 188, 190, 178, 5, 62, 146, 31, 216, 189, 238, 71, 2, 62, 42, 3, 220, 189, 113, 146, 73, 61, 192, 29, 163, 189, 149, 80, 150, 189, 69, 66, 254, 189, 1, 108, 111, 61, 126, 165, 0, 190, 124, 239, 131, 189, 214, 248, 47, 190, 6, 232, 25, 190, 246, 158, 15, 61, 121, 142, 246, 58, 219, 186, 24, 62, 167, 143, 68, 61, 58, 77, 227, 189, 87, 206, 87, 188, 113, 10, 161, 189, 236, 83, 253, 189, 246, 176, 156, 189, 186, 127, 176, 188, 138, 194, 200, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 104, 166, 29, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 77, 61, 132, 39, 192, 189, 215, 231, 6, 190, 24, 5, 51, 189, 200, 76, 239, 59, 146, 38, 73, 188, 53, 20, 103, 189, 114, 65, 231, 61, 115, 247, 2, 61, 231, 245, 148, 62, 222, 44, 206, 189, 239, 245, 151, 59, 75, 231, 207, 189, 91, 89, 19, 190, 153, 202, 67, 62, 61, 44, 74, 62, 231, 230, 206, 188, 216, 34, 2, 62, 213, 103, 144, 188, 149, 55, 232, 61, 254, 111, 78, 62, 176, 103, 53, 62, 58, 247, 98, 62, 64, 89, 232, 183, 120, 143, 171, 61, 19, 74, 49, 190, 62, 20, 26, 190, 68, 36, 182, 189, 148, 86, 189, 61, 114, 182, 70, 190, 8, 238, 11, 62, 7, 122, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 211, 239, 62, 34, 198, 130, 62, 178, 199, 153, 190, 125, 101, 203, 190, 188, 165, 182, 188, 200, 210, 237, 58, 227, 143, 83, 189, 5, 252, 167, 190, 129, 156, 120, 191, 157, 243, 252, 190, 163, 35, 145, 189, 205, 212, 158, 62, 208, 107, 194, 190, 190, 18, 203, 188, 226, 20, 132, 191, 175, 76, 165, 62, 249, 13, 70, 61, 230, 47, 32, 189, 204, 93, 109, 190, 13, 175, 188, 190, 108, 114, 130, 61, 60, 254, 69, 62, 196, 93, 59, 62, 163, 59, 163, 190, 202, 101, 247, 190, 43, 90, 23, 62, 190, 3, 167, 62, 194, 70, 187, 62, 52, 74, 27, 62, 241, 5, 7, 62, 111, 230, 69, 63, 220, 213, 181, 189, 202, 223, 65, 62, 205, 94, 40, 189, 70, 193, 56, 62, 132, 95, 114, 189, 126, 93, 22, 190, 166, 251, 68, 61, 13, 233, 143, 61, 203, 148, 5, 61, 64, 72, 0, 190, 223, 32, 8, 190, 181, 161, 17, 62, 215, 103, 85, 186, 208, 179, 148, 61, 49, 10, 154, 189, 40, 171, 136, 61, 236, 253, 77, 190, 6, 199, 100, 187, 69, 38, 97, 190, 238, 90, 125, 61, 222, 117, 209, 189, 160, 124, 99, 190, 215, 135, 96, 190, 150, 230, 36, 190, 186, 165, 222, 61, 16, 1, 73, 62, 87, 61, 11, 189, 197, 16, 194, 61, 196, 166, 226, 60, 107, 174, 10, 190, 86, 87, 103, 61, 230, 170, 102, 61, 188, 14, 43, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 239, 250, 61, 131, 158, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {119, 242, 73, 63, 163, 240, 18, 63, 224, 20, 215, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {20, 125, 17, 192, 13, 64, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}