// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 231, 3, 63, 86, 186, 27, 191, 202, 160, 140, 190, 221, 193, 117, 62, 96, 150, 49, 60, 175, 237, 17, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 115, 164, 237, 62, 155, 78, 22, 63, 119, 1, 6, 191, 69, 101, 55, 189, 162, 214, 81, 191, 54, 240, 58, 62, 194, 217, 72, 188, 2, 47, 4, 191, 61, 139, 73, 190, 241, 85, 30, 63, 96, 222, 209, 62, 125, 165, 63, 62, 119, 221, 127, 190, 233, 10, 101, 190, 72, 254, 17, 190, 162, 22, 232, 61, 209, 21, 133, 191, 133, 146, 140, 60, 141, 201, 199, 190, 114, 79, 6, 190, 111, 50, 38, 190, 206, 193, 34, 191, 102, 133, 209, 190, 57, 111, 206, 62, 75, 201, 221, 62, 97, 133, 144, 190, 213, 37, 2, 63, 84, 7, 224, 190, 253, 117, 101, 190, 51, 33, 227, 189, 107, 252, 167, 60, 152, 236, 134, 191, 94, 183, 167, 62, 158, 67, 29, 62, 70, 188, 85, 191, 67, 163, 140, 190, 222, 80, 193, 62, 239, 73, 9, 190, 215, 9, 10, 63, 12, 129, 4, 191, 139, 183, 64, 191, 57, 161, 183, 62, 194, 53, 28, 63, 248, 47, 193, 189, 86, 1, 159, 190, 62, 165, 7, 189, 137, 229, 75, 191, 69, 178, 130, 62, 81, 190, 150, 62, 107, 133, 206, 61, 14, 239, 186, 62, 72, 125, 9, 62, 245, 226, 96, 63, 148, 72, 132, 190, 119, 136, 220, 60, 27, 17, 28, 191, 32, 178, 206, 189, 145, 165, 36, 191, 36, 84, 210, 187, 93, 76, 147, 190, 230, 90, 178, 190, 193, 31, 26, 62, 160, 140, 148, 62, 51, 230, 178, 62, 206, 168, 13, 191, 73, 149, 9, 191, 139, 33, 109, 62, 27, 109, 240, 190, 74, 217, 51, 62, 31, 131, 107, 190, 17, 188, 212, 189, 219, 232, 147, 62, 85, 228, 176, 188, 108, 81, 195, 188, 73, 156, 71, 62, 236, 193, 194, 190, 18, 111, 186, 190, 95, 40, 48, 62, 250, 111, 224, 190, 68, 64, 107, 63, 131, 255, 149, 62, 195, 243, 169, 61, 61, 181, 11, 191, 211, 72, 254, 62, 16, 87, 48, 60, 60, 154, 69, 63, 209, 82, 79, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 141, 30, 191, 203, 139, 190, 190, 48, 0, 19, 191, 57, 216, 16, 191, 19, 177, 242, 61, 184, 230, 210, 190, 146, 160, 183, 62, 55, 82, 25, 191, 61, 194, 226, 62, 100, 162, 39, 189, 104, 244, 215, 190, 60, 121, 182, 189, 78, 162, 222, 189, 126, 40, 144, 62, 206, 174, 173, 62, 82, 192, 196, 62, 161, 60, 51, 190, 13, 20, 176, 189, 234, 3, 141, 62, 200, 123, 209, 62, 168, 121, 4, 63, 164, 203, 32, 191, 140, 24, 65, 63, 9, 41, 101, 62, 45, 131, 176, 62, 185, 111, 57, 61, 249, 134, 217, 190, 201, 160, 130, 190, 193, 168, 31, 190, 228, 53, 38, 62, 200, 15, 226, 62, 71, 146, 34, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 6, 7, 189, 128, 246, 180, 190, 172, 51, 171, 60, 1, 212, 144, 62, 132, 196, 39, 62, 92, 136, 157, 60, 126, 111, 152, 189, 200, 152, 153, 61, 163, 142, 131, 62, 42, 52, 8, 190, 46, 61, 55, 62, 86, 212, 115, 190, 219, 50, 109, 61, 226, 42, 54, 62, 78, 2, 75, 62, 223, 117, 8, 190, 24, 45, 97, 62, 101, 88, 141, 61, 13, 191, 189, 62, 173, 40, 86, 189, 231, 107, 12, 190, 138, 246, 140, 190, 171, 105, 11, 62, 132, 167, 31, 61, 236, 160, 140, 61, 235, 0, 206, 61, 22, 213, 0, 190, 129, 176, 133, 189, 249, 50, 50, 62, 61, 51, 32, 189, 238, 180, 223, 61, 171, 227, 251, 190, 156, 244, 1, 188, 40, 15, 9, 61, 69, 4, 180, 58, 243, 73, 239, 60, 238, 251, 63, 62, 41, 104, 6, 61, 194, 51, 10, 190, 139, 152, 184, 61, 248, 96, 151, 62, 250, 165, 180, 61, 54, 85, 42, 62, 188, 51, 87, 189, 113, 119, 101, 61, 245, 95, 224, 60, 217, 225, 56, 61, 48, 149, 252, 189, 158, 123, 132, 61, 69, 33, 251, 189, 27, 123, 227, 61, 72, 187, 43, 62, 121, 99, 72, 190, 203, 207, 10, 190, 138, 180, 178, 59, 55, 76, 238, 188, 246, 212, 25, 190, 231, 129, 85, 190, 170, 185, 208, 189, 67, 189, 216, 187, 171, 174, 122, 62, 240, 169, 147, 61, 157, 151, 14, 62, 64, 248, 31, 190, 102, 181, 248, 189, 127, 139, 18, 61, 247, 157, 75, 60, 5, 236, 155, 189, 37, 248, 77, 62, 182, 190, 138, 61, 127, 80, 2, 190, 84, 68, 131, 189, 100, 122, 3, 62, 115, 215, 115, 189, 94, 233, 194, 188, 124, 188, 153, 61, 131, 136, 232, 60, 2, 97, 186, 61, 243, 57, 160, 62, 23, 248, 104, 61, 154, 87, 114, 61, 108, 109, 143, 190, 47, 85, 16, 62, 9, 61, 12, 190, 8, 224, 157, 61, 34, 235, 118, 188, 110, 251, 91, 190, 2, 187, 133, 189, 180, 144, 84, 190, 54, 35, 167, 62, 215, 231, 13, 62, 175, 89, 118, 61, 195, 70, 44, 61, 158, 214, 69, 61, 59, 70, 77, 62, 62, 50, 176, 189, 167, 46, 88, 62, 61, 206, 190, 61, 12, 215, 13, 62, 106, 233, 154, 189, 220, 127, 99, 62, 70, 217, 21, 61, 153, 174, 48, 62, 251, 95, 87, 60, 135, 232, 98, 60, 200, 241, 56, 61, 33, 226, 246, 61, 154, 164, 95, 61, 223, 131, 187, 61, 130, 132, 167, 61, 30, 89, 214, 61, 57, 107, 75, 62, 75, 122, 232, 60, 106, 227, 74, 189, 16, 241, 105, 62, 146, 248, 8, 189, 64, 4, 33, 190, 173, 24, 190, 62, 224, 63, 76, 190, 242, 94, 243, 189, 143, 100, 29, 62, 228, 120, 38, 62, 233, 110, 20, 62, 234, 159, 206, 189, 149, 9, 165, 189, 89, 186, 66, 190, 223, 22, 131, 62, 96, 51, 205, 189, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 75, 103, 51, 187, 69, 52, 64, 189, 119, 39, 112, 189, 79, 233, 138, 189, 4, 141, 147, 189, 171, 50, 27, 61, 72, 184, 128, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 134, 79, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 179, 134, 173, 189, 40, 99, 186, 60, 139, 92, 241, 189, 35, 232, 27, 190, 163, 112, 20, 62, 128, 135, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 210, 56, 56, 189, 62, 205, 2, 62, 32, 202, 84, 189, 39, 72, 106, 189, 139, 127, 32, 189, 21, 254, 49, 189, 114, 120, 58, 61, 167, 231, 52, 61, 117, 25, 10, 62, 34, 62, 9, 190, 142, 241, 200, 61, 100, 29, 18, 62, 94, 184, 88, 188, 109, 56, 126, 59, 67, 252, 45, 62, 253, 166, 140, 61, 174, 200, 64, 190, 24, 243, 14, 62, 162, 63, 35, 190, 199, 174, 240, 189, 246, 21, 7, 189, 82, 120, 11, 62, 199, 114, 82, 189, 150, 157, 16, 190, 246, 133, 40, 189, 39, 228, 174, 189, 156, 192, 64, 60, 80, 220, 130, 60, 14, 222, 133, 61, 121, 140, 253, 60, 120, 232, 18, 190, 121, 232, 202, 57, 67, 181, 244, 189, 244, 209, 156, 61, 195, 142, 253, 189, 117, 39, 56, 190, 59, 245, 238, 189, 173, 92, 139, 188, 115, 132, 242, 61, 236, 195, 142, 61, 208, 110, 34, 61, 114, 140, 245, 61, 144, 52, 189, 60, 84, 178, 190, 189, 107, 113, 133, 60, 147, 179, 196, 61, 154, 71, 254, 189, 103, 29, 223, 60, 158, 158, 200, 188, 73, 107, 23, 61, 29, 17, 234, 61, 188, 56, 206, 189, 148, 86, 40, 61, 228, 114, 221, 189, 225, 141, 26, 190, 141, 152, 64, 189, 204, 82, 140, 61, 216, 144, 37, 190, 97, 60, 97, 189, 32, 89, 23, 189, 23, 29, 45, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 178, 121, 42, 62, 168, 59, 217, 188, 181, 6, 205, 189, 234, 151, 238, 60, 9, 111, 166, 189, 37, 234, 48, 62, 220, 211, 63, 60, 254, 149, 149, 190, 214, 72, 10, 190, 162, 123, 25, 190, 68, 235, 238, 60, 74, 94, 30, 190, 54, 60, 192, 190, 251, 95, 131, 62, 59, 16, 4, 61, 240, 133, 178, 188, 201, 152, 159, 61, 23, 13, 138, 190, 47, 134, 243, 189, 143, 246, 191, 59, 141, 30, 19, 190, 51, 193, 251, 190, 63, 144, 98, 189, 62, 136, 12, 62, 156, 83, 224, 62, 23, 74, 0, 62, 74, 35, 115, 62, 69, 82, 38, 62, 109, 68, 40, 190, 150, 121, 109, 189, 19, 189, 140, 189, 129, 63, 22, 189, 50, 143, 228, 189, 155, 33, 118, 62, 48, 226, 85, 189, 53, 241, 55, 62, 49, 179, 127, 189, 253, 95, 31, 62, 49, 41, 239, 187, 7, 86, 238, 188, 80, 36, 182, 61, 5, 134, 76, 60, 153, 65, 231, 187, 58, 184, 135, 189, 152, 216, 22, 190, 65, 45, 221, 61, 38, 38, 111, 60, 132, 122, 1, 187, 18, 112, 168, 61, 17, 226, 234, 189, 16, 244, 195, 60, 0, 77, 117, 189, 231, 222, 53, 189, 40, 71, 203, 188, 130, 109, 245, 188, 248, 15, 242, 60, 230, 38, 6, 190, 89, 78, 148, 61, 142, 201, 223, 61, 162, 185, 156, 61, 163, 121, 87, 189, 96, 139, 179, 189, 109, 188, 139, 61, 83, 85, 91, 61, 145, 131, 187, 189, 39, 35, 195, 189, 76, 31, 197, 59, 96, 166, 83, 61, 95, 66, 237, 189, 254, 217, 43, 189, 110, 131, 5, 62, 28, 241, 202, 189, 255, 77, 183, 190, 90, 176, 246, 189, 35, 113, 31, 61, 63, 69, 67, 190, 110, 127, 172, 189, 18, 199, 118, 189, 151, 176, 139, 189, 237, 38, 226, 61, 94, 82, 228, 189, 201, 155, 146, 61, 16, 215, 180, 189, 184, 37, 134, 189, 16, 49, 133, 190, 143, 209, 96, 190, 64, 211, 73, 60, 107, 77, 79, 61, 80, 82, 220, 62, 16, 180, 34, 62, 242, 194, 2, 62, 117, 107, 93, 61, 248, 21, 2, 190, 170, 133, 13, 62, 200, 212, 53, 189, 254, 47, 171, 61, 126, 131, 56, 61, 99, 45, 197, 61, 164, 85, 53, 61, 197, 74, 121, 62, 130, 42, 247, 187, 217, 196, 19, 190, 73, 139, 1, 61, 174, 246, 25, 62, 134, 101, 140, 189, 199, 169, 211, 61, 179, 139, 23, 62, 251, 178, 27, 62, 7, 112, 192, 189, 242, 180, 2, 190, 194, 136, 16, 190, 226, 19, 45, 190, 203, 209, 35, 62, 117, 188, 128, 189, 233, 183, 151, 189, 88, 94, 171, 61, 129, 155, 13, 62, 55, 233, 72, 189, 52, 243, 211, 188, 0, 89, 2, 62, 66, 185, 166, 189, 154, 222, 152, 60, 176, 188, 133, 60, 214, 209, 146, 60, 195, 129, 201, 189, 105, 222, 220, 189, 111, 223, 202, 61, 209, 230, 79, 186, 131, 15, 175, 189, 172, 14, 41, 190, 213, 208, 176, 61, 88, 229, 37, 188, 65, 108, 209, 189, 228, 26, 90, 190, 93, 159, 13, 190, 170, 99, 140, 62, 168, 217, 220, 61, 4, 24, 238, 61, 19, 161, 87, 61, 148, 95, 182, 61, 77, 17, 88, 62, 4, 165, 123, 61, 227, 70, 43, 62, 206, 125, 22, 190, 218, 118, 78, 61, 191, 15, 68, 62, 151, 125, 165, 61, 10, 35, 33, 189, 177, 51, 163, 61, 124, 178, 162, 189, 9, 0, 62, 62, 53, 111, 189, 189, 238, 135, 38, 190, 171, 243, 210, 189, 6, 117, 62, 188, 87, 33, 1, 62, 170, 108, 131, 61, 144, 168, 27, 190, 7, 3, 205, 189, 142, 165, 55, 61, 2, 169, 131, 61, 108, 149, 218, 189, 77, 111, 37, 62, 84, 91, 51, 190, 120, 147, 148, 62, 11, 156, 190, 61, 251, 218, 173, 188, 109, 38, 114, 61, 207, 236, 228, 188, 72, 97, 105, 62, 220, 125, 142, 190, 129, 249, 215, 61, 100, 216, 7, 62, 15, 97, 2, 190, 112, 186, 24, 188, 253, 85, 110, 61, 59, 239, 28, 61, 131, 88, 205, 60, 249, 50, 227, 60, 122, 39, 141, 189, 57, 223, 167, 60, 17, 52, 34, 62, 182, 100, 102, 189, 102, 137, 144, 189, 140, 28, 124, 190, 33, 156, 191, 62, 109, 244, 173, 185, 254, 232, 1, 190, 197, 252, 176, 189, 237, 237, 69, 190, 186, 51, 32, 190, 201, 163, 42, 61, 122, 96, 17, 188, 225, 32, 26, 190, 155, 28, 67, 190, 208, 224, 246, 60, 51, 97, 158, 189, 103, 51, 176, 61, 90, 175, 11, 189, 234, 103, 142, 189, 18, 24, 35, 190, 237, 115, 105, 189, 241, 176, 184, 60, 208, 184, 109, 188, 152, 112, 31, 187, 99, 167, 27, 62, 63, 30, 152, 188, 137, 184, 197, 61, 169, 114, 14, 62, 222, 42, 154, 61, 205, 35, 35, 62, 186, 99, 152, 189, 21, 172, 149, 189, 117, 123, 133, 189, 41, 128, 118, 189, 161, 193, 250, 189, 59, 234, 51, 190, 242, 103, 233, 189, 99, 193, 23, 190, 198, 148, 196, 189, 153, 48, 67, 59, 78, 235, 12, 62, 64, 198, 29, 190, 32, 87, 15, 190, 120, 135, 248, 189, 229, 51, 2, 190, 119, 59, 27, 190, 29, 70, 10, 190, 53, 127, 218, 190, 71, 232, 31, 188, 83, 183, 48, 190, 28, 159, 82, 190, 139, 51, 32, 191, 164, 211, 62, 190, 59, 187, 24, 62, 122, 125, 17, 190, 218, 213, 69, 190, 93, 249, 16, 62, 229, 133, 137, 190, 133, 253, 6, 190, 134, 163, 63, 62, 253, 75, 235, 190, 76, 9, 199, 189, 37, 210, 3, 190, 84, 112, 80, 190, 47, 4, 200, 190, 232, 112, 62, 190, 28, 46, 32, 190, 204, 198, 205, 62, 126, 173, 73, 190, 47, 67, 170, 62, 27, 54, 232, 61, 41, 165, 79, 190, 7, 42, 154, 189, 175, 100, 236, 189, 146, 206, 49, 190, 123, 2, 156, 189, 107, 49, 113, 62, 97, 132, 62, 189, 195, 1, 129, 62, 191, 7, 134, 187, 48, 151, 5, 60, 125, 104, 23, 62, 229, 241, 153, 61, 109, 78, 120, 62, 185, 251, 92, 60, 45, 221, 129, 188, 133, 18, 17, 60, 119, 234, 129, 62, 53, 10, 212, 188, 50, 156, 167, 188, 7, 186, 46, 190, 141, 87, 251, 189, 232, 69, 135, 62, 43, 72, 240, 61, 4, 11, 18, 62, 39, 203, 85, 62, 41, 244, 101, 62, 99, 58, 130, 62, 253, 37, 159, 188, 124, 38, 37, 189, 57, 217, 144, 190, 178, 96, 242, 61, 89, 129, 89, 189, 61, 117, 167, 61, 252, 83, 58, 190, 227, 216, 154, 59, 196, 86, 9, 190, 234, 185, 139, 188, 208, 75, 28, 190, 11, 195, 33, 62, 131, 81, 92, 190, 76, 76, 226, 189, 249, 117, 179, 61, 48, 211, 247, 188, 162, 107, 22, 189, 21, 21, 182, 61, 63, 148, 27, 190, 231, 12, 56, 190, 137, 40, 211, 189, 164, 156, 232, 189, 0, 193, 181, 60, 150, 224, 126, 189, 47, 105, 10, 58, 206, 72, 117, 188, 247, 194, 228, 61, 188, 107, 179, 61, 94, 160, 4, 190, 240, 196, 32, 190, 229, 19, 5, 62, 170, 35, 19, 189, 41, 61, 42, 61, 111, 247, 67, 189, 52, 241, 235, 61, 196, 54, 17, 190, 206, 68, 181, 189, 222, 80, 34, 190, 147, 167, 163, 189, 45, 14, 220, 61, 1, 109, 218, 61, 97, 32, 30, 190, 128, 219, 146, 61, 197, 172, 8, 62, 65, 21, 96, 189, 170, 231, 28, 190, 206, 126, 83, 61, 83, 134, 169, 61, 57, 124, 192, 189, 133, 0, 142, 189, 48, 192, 29, 190, 81, 49, 254, 188, 7, 85, 235, 189, 236, 254, 23, 190, 39, 123, 38, 190, 163, 60, 81, 189, 158, 200, 131, 58, 197, 25, 216, 189, 206, 218, 210, 189, 3, 158, 214, 189, 194, 187, 254, 59, 235, 38, 77, 190, 55, 197, 196, 188, 65, 121, 118, 61, 207, 136, 211, 61, 94, 53, 142, 62, 237, 169, 57, 62, 127, 182, 70, 62, 33, 109, 20, 62, 3, 30, 64, 62, 34, 158, 244, 61, 161, 8, 87, 189, 4, 253, 113, 189, 219, 207, 184, 60, 165, 229, 140, 60, 120, 178, 25, 61, 141, 88, 111, 62, 61, 177, 101, 62, 53, 7, 11, 61, 212, 147, 31, 62, 209, 28, 153, 189, 156, 247, 150, 189, 174, 40, 98, 60, 72, 165, 6, 62, 203, 150, 108, 189, 97, 21, 246, 188, 251, 200, 135, 60, 151, 101, 157, 61, 193, 53, 59, 188, 28, 178, 186, 59, 32, 113, 9, 189, 28, 22, 55, 189, 114, 84, 17, 62, 191, 117, 27, 189, 84, 43, 184, 189, 149, 131, 240, 188, 31, 9, 12, 190, 99, 175, 131, 62, 152, 98, 204, 62, 23, 99, 173, 187, 88, 148, 63, 61, 161, 229, 48, 61, 27, 148, 173, 189, 195, 143, 135, 60, 95, 186, 59, 189, 245, 137, 128, 189, 249, 95, 223, 61, 53, 128, 35, 189, 50, 208, 83, 62, 133, 245, 151, 62, 131, 130, 94, 61, 221, 132, 26, 190, 159, 64, 126, 190, 81, 252, 190, 190, 220, 118, 124, 61, 128, 237, 52, 62, 118, 201, 246, 189, 96, 36, 40, 190, 157, 9, 48, 189, 146, 138, 37, 61, 35, 186, 107, 189, 162, 231, 58, 62, 49, 21, 244, 189, 39, 84, 185, 61, 171, 230, 177, 188, 111, 7, 246, 188, 72, 245, 175, 60, 106, 126, 153, 190, 239, 143, 153, 61, 9, 145, 197, 62, 210, 164, 1, 62, 47, 158, 3, 61, 143, 85, 172, 61, 98, 35, 197, 186, 58, 23, 60, 60, 8, 174, 24, 190, 16, 127, 59, 62, 16, 116, 205, 187, 108, 85, 171, 186, 175, 145, 175, 61, 137, 194, 15, 62, 215, 136, 132, 189, 174, 225, 178, 189, 204, 60, 226, 189, 234, 108, 160, 189, 51, 151, 170, 61, 108, 75, 157, 61, 234, 188, 39, 62, 183, 246, 212, 61, 170, 195, 191, 189, 193, 88, 110, 189, 12, 57, 184, 60, 77, 82, 187, 58, 5, 252, 144, 61, 137, 38, 135, 61, 81, 112, 13, 62, 243, 196, 47, 190, 19, 241, 47, 190, 215, 11, 164, 61, 84, 5, 23, 190, 151, 241, 194, 61, 177, 165, 182, 61, 180, 3, 57, 190, 247, 75, 173, 61, 68, 203, 236, 187, 218, 184, 8, 62, 9, 15, 64, 62, 213, 48, 75, 190, 14, 241, 157, 189, 48, 60, 39, 190, 27, 128, 145, 189, 181, 179, 217, 61, 254, 30, 62, 189, 21, 240, 114, 190, 192, 247, 69, 188, 112, 26, 72, 60, 29, 134, 105, 189, 238, 108, 141, 61, 95, 208, 189, 61, 135, 203, 168, 62, 136, 132, 12, 190, 24, 186, 9, 62, 13, 154, 214, 61, 64, 61, 152, 61, 6, 106, 158, 189, 151, 148, 239, 60, 34, 140, 100, 62, 40, 83, 134, 62, 53, 120, 10, 190, 74, 86, 41, 188, 253, 218, 65, 61, 170, 92, 4, 62, 68, 19, 202, 189, 63, 237, 208, 60, 104, 202, 104, 190, 126, 58, 77, 61, 79, 191, 151, 60, 28, 231, 33, 62, 79, 181, 165, 61, 10, 199, 255, 189, 192, 246, 128, 190, 171, 92, 16, 189, 249, 36, 49, 190, 2, 142, 151, 61, 167, 31, 111, 190, 149, 17, 39, 62, 190, 108, 115, 189, 248, 91, 82, 61, 227, 138, 76, 62, 181, 17, 122, 61, 229, 243, 13, 190, 129, 171, 30, 61, 17, 111, 164, 61, 188, 23, 7, 62, 108, 199, 171, 61, 55, 220, 109, 189, 78, 45, 24, 189, 246, 121, 192, 60, 35, 90, 191, 61, 218, 132, 229, 189, 202, 98, 206, 189, 239, 73, 39, 61, 173, 139, 163, 62, 85, 211, 127, 60, 49, 180, 59, 62, 155, 204, 1, 61, 68, 127, 1, 190, 18, 157, 8, 190, 60, 49, 36, 62, 90, 51, 134, 61, 130, 160, 246, 189, 120, 180, 226, 61, 129, 223, 142, 61, 253, 188, 58, 62, 33, 108, 150, 186, 227, 92, 232, 61, 38, 80, 28, 62, 126, 187, 170, 190, 71, 1, 146, 61, 222, 47, 35, 190, 43, 54, 219, 61, 157, 78, 96, 61, 179, 56, 35, 189, 207, 187, 114, 62, 73, 216, 191, 189, 120, 38, 11, 190, 166, 18, 48, 189, 188, 194, 14, 190, 144, 90, 144, 62, 228, 2, 188, 61, 28, 88, 16, 62, 215, 247, 141, 61, 78, 31, 6, 62, 149, 181, 133, 60, 16, 138, 153, 190, 41, 112, 96, 189, 28, 245, 236, 61, 163, 96, 199, 61, 234, 197, 23, 62, 81, 248, 134, 190, 236, 157, 14, 62, 58, 168, 67, 190, 214, 61, 183, 61, 128, 107, 26, 189, 5, 127, 129, 62, 85, 252, 244, 188, 199, 125, 165, 189, 0, 117, 199, 61, 213, 12, 223, 61, 240, 107, 244, 189, 180, 189, 84, 62, 13, 221, 172, 189, 107, 191, 180, 190, 204, 209, 138, 190, 251, 24, 66, 190, 239, 160, 16, 189, 179, 164, 90, 61, 200, 235, 71, 190, 253, 183, 3, 62, 34, 37, 232, 61, 230, 147, 58, 188, 122, 2, 43, 62, 41, 7, 149, 189, 72, 92, 3, 190, 210, 45, 41, 61, 220, 195, 53, 188, 0, 180, 100, 190, 95, 147, 170, 60, 134, 70, 154, 61, 0, 188, 85, 62, 85, 163, 59, 190, 174, 174, 226, 61, 54, 98, 118, 188, 34, 147, 2, 61, 198, 216, 204, 61, 93, 191, 26, 62, 167, 216, 243, 60, 241, 223, 78, 190, 117, 248, 136, 61, 135, 83, 26, 189, 34, 191, 168, 187, 245, 141, 191, 187, 149, 48, 126, 61, 190, 45, 223, 60, 210, 239, 198, 60, 186, 89, 99, 61, 185, 3, 214, 61, 65, 26, 29, 62, 71, 97, 119, 60, 78, 252, 196, 189, 154, 235, 241, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 157, 91, 213, 61, 237, 203, 131, 189, 27, 139, 152, 189, 237, 144, 149, 61, 43, 127, 196, 61, 146, 113, 254, 189, 108, 197, 158, 189, 219, 2, 67, 189, 6, 170, 209, 189, 15, 159, 43, 62, 200, 228, 96, 61, 151, 201, 27, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 193, 93, 133, 61, 108, 223, 63, 60, 98, 95, 207, 189, 249, 243, 61, 190, 44, 210, 106, 189, 176, 39, 40, 190, 229, 230, 163, 61, 84, 86, 12, 62, 64, 200, 145, 189, 57, 70, 236, 189, 253, 65, 123, 189, 181, 234, 174, 189, 5, 72, 25, 62, 15, 183, 38, 62, 215, 33, 57, 61, 236, 215, 142, 61, 23, 87, 13, 190, 178, 89, 134, 62, 230, 68, 27, 189, 76, 52, 74, 61, 58, 243, 191, 189, 155, 68, 28, 62, 9, 98, 115, 190, 34, 142, 232, 188, 130, 119, 98, 61, 24, 160, 194, 61, 24, 144, 209, 189, 122, 39, 40, 189, 5, 179, 12, 190, 188, 235, 53, 190, 68, 205, 253, 61, 139, 99, 92, 189, 219, 3, 96, 190, 96, 247, 63, 60, 145, 74, 51, 61, 214, 9, 77, 60, 63, 37, 151, 62, 186, 21, 6, 190, 255, 224, 170, 189, 175, 220, 123, 189, 178, 153, 20, 62, 127, 94, 229, 61, 147, 180, 31, 61, 241, 186, 31, 190, 158, 160, 22, 62, 113, 104, 4, 62, 222, 52, 6, 62, 113, 63, 195, 59, 60, 99, 63, 62, 157, 45, 71, 189, 202, 22, 150, 62, 100, 139, 195, 189, 59, 92, 160, 190, 180, 100, 220, 190, 79, 116, 179, 60, 221, 33, 244, 61, 185, 188, 141, 61, 72, 126, 20, 190, 165, 110, 230, 189, 255, 117, 228, 61, 27, 118, 13, 62, 138, 140, 251, 189, 226, 129, 11, 62, 246, 157, 118, 61, 170, 127, 1, 189, 10, 38, 163, 189, 79, 25, 39, 188, 94, 93, 35, 61, 40, 231, 132, 62, 44, 61, 25, 62, 150, 216, 64, 61, 67, 142, 236, 189, 202, 241, 72, 62, 2, 114, 204, 60, 38, 37, 125, 61, 181, 62, 39, 61, 89, 62, 114, 61, 47, 20, 76, 62, 174, 116, 51, 189, 204, 99, 29, 62, 11, 64, 180, 60, 247, 107, 183, 61, 139, 80, 167, 61, 68, 91, 244, 61, 238, 51, 137, 190, 195, 224, 239, 60, 224, 19, 104, 59, 209, 161, 41, 61, 68, 34, 11, 189, 224, 234, 22, 61, 86, 200, 46, 62, 69, 100, 4, 190, 168, 56, 162, 61, 232, 22, 31, 62, 57, 104, 199, 189, 201, 97, 188, 189, 221, 48, 156, 189, 120, 121, 161, 61, 109, 103, 34, 61, 82, 48, 153, 189, 129, 100, 148, 188, 85, 225, 23, 62, 129, 249, 149, 61, 246, 222, 91, 60, 155, 254, 24, 189, 248, 142, 21, 62, 98, 45, 95, 61, 94, 18, 35, 190, 244, 168, 15, 190, 174, 13, 32, 190, 72, 128, 241, 189, 211, 11, 7, 62, 146, 142, 65, 190, 210, 68, 29, 62, 5, 252, 58, 190, 221, 24, 89, 190, 241, 129, 14, 190, 254, 41, 248, 61, 125, 214, 238, 61, 142, 104, 99, 61, 234, 162, 193, 188, 160, 224, 135, 61, 158, 167, 240, 187, 172, 187, 20, 62, 65, 117, 144, 189, 251, 242, 6, 62, 224, 120, 116, 61, 65, 202, 9, 190, 13, 104, 183, 190, 98, 65, 113, 189, 168, 188, 46, 190, 122, 116, 132, 61, 60, 249, 98, 61, 125, 211, 70, 62, 66, 241, 109, 190, 75, 130, 251, 189, 89, 127, 76, 59, 245, 142, 215, 60, 92, 194, 190, 61, 244, 81, 234, 189, 193, 202, 68, 62, 45, 100, 194, 189, 235, 241, 21, 61, 255, 241, 72, 190, 172, 242, 96, 62, 71, 128, 155, 190, 150, 193, 121, 62, 98, 70, 0, 61, 234, 0, 4, 191, 136, 163, 21, 190, 128, 4, 204, 61, 49, 125, 45, 189, 52, 208, 223, 189, 228, 82, 151, 190, 92, 86, 98, 188, 68, 253, 178, 61, 181, 128, 155, 61, 33, 120, 53, 60, 232, 83, 3, 62, 29, 62, 8, 189, 254, 138, 6, 60, 190, 178, 5, 62, 146, 31, 216, 189, 233, 143, 27, 62, 42, 3, 220, 189, 12, 142, 102, 61, 192, 29, 163, 189, 60, 103, 137, 189, 69, 66, 254, 189, 58, 183, 175, 61, 126, 165, 0, 190, 124, 239, 131, 189, 61, 132, 29, 190, 6, 232, 25, 190, 59, 12, 122, 61, 121, 142, 246, 58, 219, 186, 24, 62, 97, 111, 154, 61, 58, 77, 227, 189, 87, 206, 87, 188, 25, 196, 89, 189, 236, 83, 253, 189, 217, 247, 83, 189, 186, 127, 176, 188, 98, 47, 149, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 104, 166, 29, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 121, 8, 189, 61, 174, 159, 189, 46, 15, 74, 190, 233, 237, 30, 190, 60, 169, 22, 60, 38, 251, 134, 60, 233, 227, 49, 189, 115, 105, 74, 62, 72, 140, 25, 190, 42, 192, 155, 62, 255, 111, 155, 189, 76, 170, 76, 61, 250, 119, 143, 189, 47, 164, 16, 190, 183, 133, 44, 62, 202, 123, 39, 62, 201, 20, 18, 188, 128, 90, 225, 61, 218, 123, 43, 189, 161, 160, 184, 61, 114, 246, 247, 61, 134, 56, 200, 61, 142, 3, 12, 62, 7, 14, 153, 189, 122, 187, 195, 61, 40, 105, 43, 190, 62, 200, 46, 60, 74, 69, 9, 190, 48, 43, 153, 60, 229, 120, 63, 190, 240, 156, 169, 60, 255, 224, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 141, 129, 62, 195, 139, 35, 62, 246, 40, 90, 190, 79, 248, 167, 190, 178, 224, 182, 188, 59, 157, 203, 188, 238, 87, 95, 189, 33, 200, 127, 190, 117, 94, 32, 189, 108, 238, 157, 190, 122, 160, 99, 189, 24, 132, 122, 62, 186, 44, 157, 190, 62, 66, 204, 188, 18, 200, 36, 191, 229, 233, 155, 62, 43, 246, 52, 188, 2, 241, 188, 189, 155, 82, 45, 190, 139, 161, 131, 190, 210, 140, 3, 61, 147, 149, 83, 62, 149, 83, 2, 62, 27, 246, 144, 190, 81, 235, 86, 190, 220, 179, 23, 62, 102, 162, 252, 61, 168, 159, 152, 62, 176, 216, 232, 61, 71, 94, 7, 62, 11, 23, 61, 62, 43, 158, 201, 189, 116, 105, 64, 62, 198, 141, 142, 189, 160, 60, 250, 61, 242, 106, 4, 190, 145, 97, 22, 190, 53, 235, 109, 61, 40, 228, 148, 61, 170, 46, 36, 189, 104, 98, 183, 189, 143, 204, 80, 190, 204, 5, 27, 62, 10, 237, 229, 58, 119, 228, 4, 190, 26, 57, 154, 189, 197, 49, 185, 60, 42, 132, 67, 190, 17, 239, 65, 61, 237, 29, 86, 190, 99, 210, 250, 60, 218, 152, 0, 190, 183, 175, 36, 190, 185, 152, 73, 190, 2, 193, 64, 190, 72, 246, 105, 61, 188, 14, 29, 62, 114, 154, 14, 189, 171, 112, 173, 61, 118, 211, 245, 187, 243, 158, 30, 190, 28, 222, 104, 61, 108, 70, 44, 61, 64, 82, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 157, 157, 61, 78, 62, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {199, 191, 153, 190, 83, 190, 159, 63, 49, 96, 230, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {184, 182, 36, 192, 11, 156, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}