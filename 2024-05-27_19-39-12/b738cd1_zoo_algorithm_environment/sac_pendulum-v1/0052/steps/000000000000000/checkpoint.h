// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 96, 11, 63, 81, 226, 5, 191, 167, 123, 98, 190, 202, 235, 247, 61, 19, 16, 251, 187, 223, 214, 13, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 142, 120, 196, 62, 208, 37, 197, 62, 243, 201, 251, 190, 14, 142, 217, 189, 252, 157, 83, 190, 114, 170, 73, 61, 243, 244, 238, 189, 26, 11, 168, 190, 221, 243, 92, 190, 18, 148, 252, 62, 143, 49, 221, 62, 246, 120, 58, 62, 56, 45, 199, 190, 170, 146, 149, 190, 204, 196, 244, 189, 58, 191, 147, 60, 106, 39, 16, 191, 134, 246, 244, 189, 4, 138, 242, 190, 158, 78, 236, 60, 223, 12, 34, 190, 74, 42, 251, 190, 124, 76, 107, 190, 7, 244, 252, 62, 15, 80, 208, 62, 15, 248, 220, 188, 10, 67, 230, 62, 175, 220, 218, 190, 26, 226, 18, 62, 33, 23, 85, 190, 139, 175, 165, 61, 64, 171, 7, 191, 122, 18, 192, 62, 208, 54, 179, 61, 105, 112, 184, 190, 230, 128, 171, 190, 94, 184, 141, 62, 26, 110, 33, 190, 62, 167, 241, 62, 249, 187, 188, 190, 25, 35, 233, 190, 30, 151, 182, 62, 115, 160, 241, 62, 158, 63, 49, 61, 204, 22, 38, 190, 130, 10, 160, 189, 85, 79, 250, 190, 143, 184, 8, 62, 5, 160, 54, 62, 60, 60, 37, 190, 237, 174, 189, 62, 240, 178, 42, 62, 47, 152, 201, 62, 188, 139, 96, 188, 178, 173, 30, 190, 92, 235, 13, 191, 159, 114, 123, 189, 30, 214, 239, 190, 239, 84, 38, 190, 212, 162, 156, 190, 3, 74, 175, 190, 79, 43, 74, 190, 3, 64, 199, 62, 66, 162, 236, 61, 202, 184, 133, 190, 229, 24, 15, 191, 61, 35, 177, 62, 76, 52, 164, 190, 214, 2, 102, 189, 68, 50, 111, 190, 15, 21, 2, 61, 18, 229, 148, 62, 217, 126, 190, 189, 235, 149, 30, 62, 122, 155, 60, 62, 112, 253, 171, 190, 192, 108, 226, 190, 108, 119, 23, 62, 215, 135, 132, 190, 84, 112, 224, 62, 89, 245, 243, 62, 247, 123, 123, 61, 46, 157, 201, 190, 80, 64, 7, 63, 112, 104, 14, 62, 183, 153, 118, 62, 145, 138, 126, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 173, 19, 191, 174, 175, 155, 190, 48, 0, 19, 191, 55, 162, 7, 191, 16, 181, 167, 61, 249, 169, 220, 190, 165, 14, 205, 62, 111, 159, 5, 191, 93, 102, 242, 62, 251, 38, 13, 61, 200, 149, 240, 190, 74, 46, 16, 61, 133, 82, 91, 189, 153, 81, 241, 61, 52, 190, 168, 62, 67, 5, 4, 63, 122, 231, 117, 190, 99, 188, 158, 190, 159, 36, 91, 62, 88, 228, 219, 62, 117, 76, 221, 62, 89, 191, 14, 191, 235, 78, 11, 63, 2, 125, 245, 61, 34, 45, 201, 62, 76, 132, 216, 188, 34, 154, 208, 190, 96, 237, 77, 190, 68, 43, 253, 189, 90, 222, 24, 189, 46, 168, 190, 62, 159, 173, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 167, 238, 61, 81, 55, 49, 190, 172, 51, 171, 60, 183, 88, 41, 62, 226, 180, 12, 190, 185, 22, 150, 188, 175, 51, 143, 60, 185, 2, 159, 187, 60, 41, 231, 61, 138, 64, 9, 190, 32, 116, 228, 61, 169, 94, 162, 189, 133, 234, 69, 61, 121, 127, 12, 188, 34, 230, 254, 61, 195, 82, 11, 190, 166, 106, 110, 61, 135, 141, 190, 59, 192, 41, 31, 62, 18, 213, 70, 189, 192, 167, 13, 62, 202, 146, 7, 61, 155, 150, 30, 62, 103, 17, 130, 61, 38, 92, 252, 60, 247, 35, 24, 62, 16, 100, 87, 189, 53, 55, 156, 61, 196, 142, 190, 59, 12, 176, 33, 62, 97, 22, 182, 60, 16, 236, 3, 190, 31, 140, 65, 61, 150, 36, 197, 61, 69, 4, 180, 58, 176, 9, 209, 61, 53, 34, 23, 61, 167, 16, 29, 60, 38, 15, 205, 189, 7, 141, 178, 61, 44, 0, 36, 62, 15, 17, 31, 62, 74, 117, 11, 62, 216, 199, 11, 61, 40, 223, 192, 61, 88, 113, 70, 189, 52, 194, 254, 188, 11, 156, 245, 189, 254, 236, 36, 59, 28, 125, 5, 190, 10, 138, 15, 60, 108, 217, 42, 62, 226, 108, 7, 62, 62, 153, 47, 189, 243, 184, 87, 60, 2, 254, 4, 189, 5, 92, 46, 190, 237, 223, 236, 189, 19, 51, 176, 189, 192, 216, 53, 61, 81, 168, 44, 62, 49, 144, 228, 61, 86, 85, 232, 61, 117, 22, 117, 189, 156, 89, 188, 185, 107, 137, 224, 188, 247, 157, 75, 60, 155, 8, 156, 189, 229, 77, 151, 61, 194, 58, 185, 59, 200, 242, 204, 189, 84, 68, 131, 189, 183, 66, 243, 60, 17, 142, 10, 190, 54, 190, 112, 189, 97, 105, 190, 187, 148, 33, 170, 189, 47, 142, 208, 187, 79, 145, 32, 62, 164, 26, 191, 60, 74, 99, 115, 188, 176, 217, 128, 189, 132, 200, 127, 61, 144, 82, 27, 190, 151, 84, 27, 62, 192, 14, 179, 188, 185, 76, 155, 188, 102, 228, 136, 189, 71, 182, 48, 190, 41, 105, 38, 62, 128, 215, 234, 61, 69, 127, 162, 60, 99, 137, 129, 188, 35, 119, 225, 61, 37, 225, 21, 62, 193, 167, 35, 189, 91, 72, 221, 60, 37, 84, 236, 60, 12, 215, 13, 62, 138, 58, 238, 189, 240, 104, 238, 61, 81, 163, 49, 189, 82, 97, 5, 62, 150, 191, 184, 188, 107, 115, 222, 188, 183, 164, 73, 61, 95, 77, 169, 61, 42, 129, 161, 189, 208, 23, 159, 61, 162, 221, 140, 189, 174, 38, 202, 61, 72, 202, 182, 61, 31, 85, 84, 189, 241, 157, 209, 189, 212, 17, 36, 62, 85, 245, 1, 190, 121, 164, 243, 188, 219, 55, 113, 61, 4, 154, 41, 190, 46, 39, 36, 190, 246, 140, 48, 62, 62, 53, 141, 60, 223, 193, 22, 62, 21, 145, 2, 190, 78, 91, 237, 189, 33, 193, 27, 190, 73, 43, 9, 62, 170, 209, 117, 189, 104, 155, 24, 62, 109, 1, 49, 190, 166, 39, 115, 189, 75, 103, 51, 187, 213, 40, 64, 189, 119, 39, 112, 189, 217, 203, 131, 189, 4, 141, 147, 189, 3, 222, 27, 61, 8, 219, 77, 188, 147, 210, 202, 189, 219, 242, 106, 61, 183, 181, 167, 189, 32, 236, 133, 61, 98, 133, 33, 190, 66, 33, 236, 189, 128, 234, 129, 60, 190, 194, 30, 189, 220, 117, 36, 62, 221, 24, 159, 189, 201, 119, 16, 61, 139, 92, 241, 189, 43, 167, 12, 190, 12, 113, 29, 62, 239, 229, 157, 188, 202, 248, 193, 189, 6, 59, 16, 190, 185, 252, 255, 61, 43, 131, 53, 189, 69, 212, 17, 62, 155, 25, 75, 189, 205, 200, 73, 189, 149, 174, 44, 189, 101, 245, 35, 189, 114, 120, 58, 61, 224, 198, 74, 61, 117, 156, 12, 62, 155, 143, 8, 190, 77, 33, 17, 62, 50, 238, 18, 62, 98, 123, 178, 187, 99, 233, 207, 60, 186, 227, 49, 62, 223, 200, 148, 61, 225, 165, 41, 190, 115, 22, 15, 62, 3, 254, 19, 190, 51, 187, 199, 189, 41, 146, 242, 188, 79, 55, 11, 62, 86, 166, 78, 189, 39, 183, 243, 189, 13, 89, 32, 188, 178, 232, 174, 189, 141, 193, 235, 60, 4, 37, 201, 60, 50, 234, 160, 61, 205, 44, 5, 61, 11, 179, 15, 190, 53, 117, 142, 59, 118, 63, 241, 189, 81, 218, 179, 61, 187, 14, 237, 189, 177, 74, 48, 190, 243, 183, 238, 189, 107, 204, 112, 188, 115, 132, 242, 61, 201, 84, 158, 61, 5, 170, 48, 61, 162, 229, 238, 61, 118, 39, 133, 61, 123, 238, 200, 189, 134, 116, 159, 60, 101, 14, 219, 61, 81, 233, 254, 189, 220, 126, 11, 61, 212, 250, 115, 188, 73, 107, 23, 61, 231, 150, 246, 61, 245, 64, 189, 189, 148, 86, 40, 61, 105, 184, 216, 189, 40, 253, 26, 190, 60, 131, 240, 188, 243, 246, 237, 61, 216, 144, 37, 190, 111, 116, 12, 189, 192, 54, 4, 189, 50, 64, 34, 190, 41, 226, 146, 189, 79, 54, 17, 190, 168, 239, 155, 189, 178, 121, 42, 62, 156, 69, 176, 59, 218, 13, 201, 189, 213, 132, 152, 61, 142, 202, 34, 62, 178, 180, 211, 61, 220, 211, 63, 60, 203, 210, 24, 190, 172, 49, 33, 62, 242, 83, 83, 61, 104, 197, 5, 190, 237, 92, 247, 188, 185, 49, 25, 190, 106, 10, 167, 61, 22, 25, 205, 61, 40, 237, 249, 189, 226, 51, 140, 189, 55, 161, 238, 189, 214, 35, 228, 59, 248, 89, 55, 188, 39, 100, 171, 59, 39, 171, 1, 190, 134, 88, 5, 62, 99, 165, 246, 61, 36, 112, 148, 60, 134, 80, 6, 62, 235, 114, 227, 61, 212, 160, 36, 62, 17, 199, 26, 190, 41, 202, 198, 189, 20, 92, 165, 189, 35, 115, 191, 189, 195, 131, 79, 61, 66, 192, 7, 62, 94, 240, 3, 186, 215, 79, 214, 60, 180, 86, 109, 189, 14, 191, 50, 62, 49, 41, 239, 187, 229, 76, 121, 60, 236, 67, 241, 61, 75, 146, 97, 61, 154, 85, 177, 188, 189, 9, 157, 188, 204, 24, 200, 189, 35, 157, 27, 62, 142, 14, 8, 61, 31, 15, 142, 60, 20, 163, 0, 62, 26, 18, 185, 189, 82, 239, 152, 61, 88, 214, 69, 189, 19, 207, 176, 188, 254, 77, 212, 186, 114, 211, 232, 57, 161, 147, 32, 61, 130, 249, 8, 190, 75, 37, 142, 61, 114, 152, 27, 62, 141, 107, 176, 61, 143, 13, 254, 186, 124, 127, 75, 189, 228, 89, 175, 61, 161, 188, 131, 61, 170, 105, 127, 189, 253, 205, 195, 189, 218, 2, 172, 60, 223, 107, 109, 61, 111, 216, 249, 189, 54, 249, 227, 189, 110, 131, 5, 62, 35, 220, 48, 61, 167, 49, 16, 190, 206, 101, 151, 60, 8, 76, 36, 190, 80, 87, 141, 189, 160, 186, 178, 61, 125, 55, 21, 190, 87, 95, 48, 189, 46, 187, 161, 60, 61, 86, 49, 190, 155, 121, 35, 62, 67, 75, 87, 60, 158, 179, 242, 189, 2, 90, 51, 190, 161, 130, 225, 188, 243, 204, 11, 62, 42, 80, 37, 187, 29, 112, 254, 60, 40, 71, 45, 62, 206, 159, 45, 61, 172, 233, 140, 60, 118, 193, 214, 189, 119, 157, 124, 61, 214, 150, 143, 189, 255, 241, 183, 60, 144, 250, 22, 62, 2, 123, 233, 188, 209, 10, 68, 61, 4, 233, 164, 61, 147, 78, 108, 187, 109, 224, 19, 190, 73, 139, 1, 61, 47, 166, 39, 62, 145, 155, 135, 189, 77, 14, 237, 61, 42, 60, 34, 62, 24, 214, 42, 62, 175, 81, 165, 189, 242, 245, 232, 189, 81, 90, 14, 190, 120, 9, 44, 190, 53, 71, 49, 62, 117, 188, 128, 189, 239, 14, 123, 189, 207, 162, 192, 61, 129, 155, 13, 62, 70, 35, 56, 189, 76, 37, 194, 188, 199, 182, 13, 62, 143, 24, 131, 189, 154, 222, 152, 60, 49, 253, 252, 60, 0, 175, 204, 60, 208, 181, 174, 189, 105, 222, 220, 189, 111, 223, 202, 61, 188, 134, 167, 58, 131, 15, 175, 189, 50, 159, 30, 190, 6, 119, 190, 61, 38, 107, 91, 186, 201, 147, 32, 61, 32, 147, 6, 190, 93, 159, 13, 190, 3, 196, 26, 62, 107, 132, 202, 189, 104, 214, 179, 61, 187, 48, 230, 61, 150, 212, 0, 61, 220, 150, 130, 61, 235, 229, 135, 61, 64, 13, 22, 62, 235, 152, 37, 189, 47, 189, 30, 61, 129, 254, 212, 61, 24, 243, 180, 188, 183, 61, 62, 188, 84, 236, 15, 60, 46, 2, 22, 190, 145, 202, 48, 61, 253, 244, 140, 189, 110, 248, 105, 61, 204, 101, 22, 62, 132, 38, 164, 188, 15, 77, 35, 62, 17, 193, 115, 188, 55, 92, 174, 189, 97, 43, 131, 189, 78, 99, 250, 61, 167, 92, 7, 189, 124, 119, 188, 59, 86, 137, 21, 62, 126, 55, 81, 188, 163, 97, 210, 61, 167, 49, 210, 61, 251, 218, 173, 188, 101, 118, 66, 61, 62, 51, 26, 189, 115, 177, 10, 62, 162, 238, 22, 190, 236, 88, 176, 61, 180, 42, 221, 61, 194, 96, 3, 190, 88, 171, 147, 59, 148, 235, 164, 61, 1, 82, 185, 60, 71, 85, 15, 62, 65, 164, 180, 187, 127, 44, 178, 188, 53, 162, 216, 60, 137, 237, 21, 61, 168, 192, 67, 60, 115, 209, 67, 188, 206, 69, 99, 189, 140, 59, 230, 61, 209, 49, 200, 60, 174, 20, 210, 189, 30, 158, 226, 189, 33, 41, 104, 189, 229, 210, 20, 190, 131, 14, 46, 61, 70, 98, 196, 60, 207, 236, 17, 190, 170, 38, 224, 189, 229, 194, 7, 61, 180, 72, 152, 189, 103, 51, 176, 61, 90, 175, 11, 189, 103, 100, 98, 189, 176, 239, 39, 190, 57, 47, 78, 189, 252, 133, 183, 60, 53, 170, 54, 188, 184, 236, 33, 59, 199, 118, 36, 62, 63, 30, 152, 188, 137, 184, 197, 61, 25, 156, 23, 62, 222, 42, 154, 61, 191, 167, 43, 62, 186, 99, 152, 189, 21, 172, 149, 189, 141, 252, 63, 189, 127, 225, 100, 189, 161, 193, 250, 189, 252, 27, 38, 190, 115, 33, 238, 189, 205, 64, 15, 190, 198, 148, 196, 189, 29, 124, 75, 60, 98, 111, 17, 62, 64, 198, 29, 190, 32, 87, 15, 190, 144, 115, 231, 189, 229, 51, 2, 190, 119, 59, 27, 190, 29, 70, 10, 190, 121, 57, 240, 188, 211, 5, 149, 57, 83, 183, 48, 190, 8, 5, 195, 61, 81, 201, 202, 189, 139, 164, 9, 58, 197, 154, 103, 188, 110, 157, 114, 59, 235, 177, 191, 187, 23, 99, 12, 189, 115, 163, 220, 189, 193, 130, 7, 190, 90, 169, 95, 61, 218, 66, 165, 189, 107, 163, 5, 60, 26, 175, 184, 189, 244, 162, 135, 61, 200, 131, 247, 61, 221, 215, 156, 61, 169, 190, 22, 190, 151, 176, 166, 188, 104, 11, 206, 189, 68, 127, 7, 62, 233, 109, 154, 61, 246, 174, 33, 190, 212, 72, 66, 61, 197, 201, 120, 189, 144, 18, 12, 190, 28, 208, 10, 62, 156, 253, 78, 61, 152, 156, 212, 61, 189, 97, 172, 60, 119, 48, 188, 61, 178, 14, 128, 61, 125, 104, 23, 62, 124, 45, 83, 189, 132, 247, 35, 61, 122, 55, 59, 188, 255, 182, 144, 189, 108, 94, 185, 188, 233, 182, 233, 61, 18, 151, 31, 189, 213, 198, 120, 189, 47, 195, 183, 189, 142, 188, 24, 190, 126, 37, 45, 62, 167, 165, 174, 59, 81, 8, 4, 62, 228, 240, 6, 62, 197, 232, 14, 62, 184, 252, 222, 61, 55, 39, 29, 189, 200, 171, 32, 61, 196, 59, 205, 189, 116, 200, 145, 61, 225, 142, 76, 189, 131, 65, 178, 188, 157, 113, 17, 190, 91, 192, 49, 60, 157, 122, 190, 189, 110, 231, 233, 189, 203, 227, 208, 189, 237, 176, 239, 61, 221, 212, 10, 190, 76, 76, 226, 189, 246, 69, 187, 61, 48, 211, 247, 188, 162, 107, 22, 189, 226, 225, 180, 61, 63, 148, 27, 190, 211, 91, 46, 190, 137, 40, 211, 189, 116, 57, 235, 189, 81, 22, 181, 60, 11, 114, 116, 189, 204, 16, 155, 59, 206, 72, 117, 188, 32, 37, 231, 61, 188, 107, 179, 61, 146, 34, 0, 190, 219, 183, 31, 190, 229, 19, 5, 62, 102, 154, 22, 189, 43, 212, 59, 61, 19, 178, 10, 189, 52, 241, 235, 61, 159, 120, 17, 190, 208, 218, 173, 189, 222, 80, 34, 190, 147, 167, 163, 189, 41, 25, 227, 61, 35, 23, 229, 61, 57, 138, 32, 190, 30, 242, 158, 61, 229, 8, 12, 62, 130, 234, 69, 189, 40, 52, 48, 190, 214, 245, 159, 60, 83, 134, 169, 61, 125, 155, 170, 188, 166, 244, 204, 187, 1, 25, 242, 189, 68, 123, 44, 190, 234, 253, 83, 189, 48, 88, 243, 189, 54, 246, 22, 190, 153, 145, 61, 189, 238, 172, 13, 189, 9, 18, 187, 189, 133, 63, 149, 189, 222, 53, 209, 189, 43, 224, 31, 189, 130, 197, 47, 190, 35, 151, 46, 61, 162, 233, 189, 61, 36, 189, 128, 61, 153, 167, 170, 61, 196, 67, 117, 61, 185, 220, 50, 62, 98, 170, 1, 62, 225, 81, 50, 62, 171, 190, 130, 61, 114, 191, 146, 189, 136, 56, 183, 189, 133, 31, 89, 61, 180, 242, 32, 189, 104, 231, 197, 60, 122, 48, 23, 62, 176, 243, 212, 61, 140, 105, 122, 188, 212, 147, 31, 62, 135, 23, 16, 61, 185, 105, 219, 61, 123, 28, 207, 188, 170, 205, 94, 61, 122, 190, 135, 189, 16, 5, 107, 61, 9, 41, 19, 190, 192, 42, 250, 61, 3, 83, 160, 189, 186, 10, 11, 190, 121, 179, 164, 61, 145, 7, 9, 188, 249, 80, 22, 62, 214, 189, 112, 61, 75, 107, 162, 185, 228, 241, 197, 61, 27, 237, 9, 190, 26, 191, 1, 60, 155, 246, 35, 62, 174, 28, 214, 189, 16, 234, 38, 61, 40, 224, 124, 61, 89, 227, 124, 189, 96, 88, 47, 60, 1, 60, 177, 189, 231, 123, 23, 61, 140, 181, 7, 61, 153, 19, 169, 59, 164, 17, 205, 61, 146, 220, 2, 62, 49, 68, 189, 59, 221, 132, 26, 190, 251, 201, 194, 189, 108, 126, 4, 190, 124, 43, 152, 61, 223, 85, 27, 61, 18, 249, 149, 189, 47, 143, 35, 189, 230, 237, 171, 189, 44, 247, 176, 61, 158, 150, 250, 189, 129, 169, 31, 62, 241, 228, 46, 60, 169, 224, 33, 62, 67, 171, 47, 189, 184, 105, 159, 61, 245, 167, 167, 61, 21, 181, 28, 190, 224, 95, 75, 61, 28, 210, 234, 61, 105, 143, 28, 190, 56, 159, 34, 188, 66, 56, 104, 61, 83, 47, 12, 61, 97, 219, 116, 188, 129, 139, 31, 190, 146, 141, 20, 62, 0, 3, 224, 61, 219, 82, 237, 189, 128, 138, 243, 61, 123, 101, 242, 187, 16, 165, 215, 59, 84, 189, 101, 189, 204, 60, 226, 189, 178, 60, 243, 189, 226, 149, 219, 60, 95, 195, 168, 61, 56, 142, 191, 61, 47, 63, 226, 61, 224, 30, 34, 190, 185, 138, 104, 189, 173, 19, 110, 61, 80, 254, 211, 60, 44, 111, 128, 61, 203, 83, 112, 61, 162, 169, 138, 61, 34, 231, 22, 190, 69, 123, 15, 190, 113, 160, 54, 61, 78, 254, 41, 190, 249, 133, 2, 62, 215, 197, 226, 61, 73, 81, 172, 189, 138, 128, 168, 61, 163, 53, 148, 61, 252, 117, 131, 61, 93, 130, 23, 62, 157, 86, 36, 190, 12, 142, 37, 189, 171, 211, 15, 190, 2, 105, 10, 61, 95, 20, 3, 62, 106, 250, 68, 61, 202, 246, 35, 190, 7, 221, 189, 61, 112, 26, 72, 60, 98, 92, 20, 190, 212, 239, 12, 190, 115, 85, 187, 61, 131, 142, 230, 61, 48, 230, 19, 190, 81, 212, 127, 60, 57, 232, 199, 61, 217, 57, 112, 61, 163, 180, 182, 59, 65, 221, 161, 60, 39, 224, 204, 61, 56, 100, 50, 62, 202, 153, 50, 190, 78, 35, 160, 189, 198, 15, 169, 188, 237, 115, 138, 188, 67, 29, 27, 190, 109, 150, 9, 61, 120, 251, 133, 189, 120, 196, 159, 60, 217, 146, 38, 61, 35, 48, 160, 61, 252, 131, 160, 61, 118, 245, 125, 189, 221, 136, 15, 190, 112, 192, 245, 189, 28, 1, 212, 189, 160, 209, 93, 60, 228, 255, 17, 190, 130, 101, 15, 62, 239, 54, 210, 188, 248, 91, 82, 61, 18, 208, 12, 62, 174, 103, 210, 187, 97, 159, 173, 189, 148, 189, 171, 188, 204, 38, 19, 62, 141, 214, 179, 61, 114, 167, 239, 61, 207, 230, 175, 189, 87, 228, 110, 60, 220, 48, 65, 61, 52, 150, 68, 61, 111, 211, 35, 190, 168, 245, 235, 189, 130, 111, 35, 186, 54, 63, 3, 62, 195, 152, 10, 189, 196, 91, 43, 62, 19, 209, 126, 59, 133, 23, 112, 189, 217, 67, 38, 190, 72, 51, 32, 62, 30, 201, 170, 59, 24, 193, 171, 189, 87, 80, 222, 61, 209, 191, 189, 61, 128, 166, 11, 62, 46, 156, 236, 59, 53, 136, 185, 61, 63, 31, 52, 62, 51, 196, 48, 190, 132, 110, 188, 188, 222, 47, 35, 190, 73, 185, 242, 61, 114, 150, 85, 59, 102, 195, 207, 188, 199, 250, 5, 62, 73, 180, 170, 189, 163, 0, 232, 189, 40, 230, 90, 189, 158, 233, 52, 190, 237, 78, 37, 62, 140, 216, 79, 61, 29, 9, 158, 61, 164, 103, 188, 61, 224, 4, 130, 61, 154, 94, 142, 188, 74, 205, 98, 189, 120, 81, 158, 189, 177, 163, 129, 61, 23, 23, 74, 61, 234, 197, 23, 62, 225, 149, 147, 189, 37, 24, 220, 61, 44, 165, 185, 189, 236, 83, 51, 189, 56, 146, 176, 189, 13, 175, 52, 62, 227, 11, 223, 188, 32, 71, 229, 189, 60, 65, 6, 61, 12, 65, 67, 61, 166, 225, 161, 189, 230, 158, 42, 62, 13, 221, 172, 189, 161, 43, 31, 190, 205, 74, 147, 189, 5, 236, 32, 61, 159, 110, 6, 190, 0, 109, 165, 61, 58, 196, 145, 189, 123, 20, 44, 190, 155, 68, 50, 62, 153, 40, 164, 189, 115, 77, 11, 190, 82, 214, 57, 61, 104, 186, 151, 189, 222, 133, 82, 61, 228, 144, 208, 61, 92, 135, 92, 61, 140, 232, 21, 62, 118, 103, 166, 61, 49, 61, 50, 190, 13, 102, 27, 190, 10, 166, 23, 189, 101, 228, 181, 186, 255, 82, 53, 60, 134, 180, 21, 61, 76, 129, 34, 62, 100, 158, 53, 59, 76, 211, 188, 189, 10, 77, 171, 60, 57, 240, 115, 60, 105, 233, 162, 189, 217, 165, 26, 59, 149, 48, 126, 61, 190, 45, 223, 60, 226, 178, 243, 60, 223, 104, 104, 61, 115, 3, 218, 61, 92, 211, 32, 62, 71, 97, 119, 60, 211, 208, 172, 189, 187, 166, 239, 189, 115, 24, 223, 61, 180, 202, 18, 62, 82, 190, 35, 190, 184, 24, 52, 190, 144, 200, 244, 61, 237, 203, 131, 189, 27, 139, 152, 189, 132, 90, 161, 61, 150, 248, 199, 61, 18, 16, 254, 189, 156, 240, 148, 189, 219, 2, 67, 189, 3, 61, 189, 189, 15, 159, 43, 62, 113, 198, 154, 61, 253, 231, 23, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 209, 153, 108, 61, 190, 79, 165, 188, 98, 95, 207, 189, 222, 127, 35, 190, 62, 58, 121, 189, 103, 208, 47, 190, 229, 69, 82, 61, 84, 86, 12, 62, 235, 148, 8, 189, 92, 49, 75, 189, 24, 70, 156, 189, 152, 191, 4, 190, 223, 152, 13, 62, 133, 69, 15, 62, 241, 240, 54, 61, 1, 45, 130, 61, 41, 148, 20, 190, 70, 188, 51, 62, 219, 136, 20, 189, 240, 18, 70, 61, 215, 34, 139, 189, 249, 194, 26, 62, 56, 124, 41, 190, 36, 233, 144, 188, 88, 252, 12, 61, 89, 200, 182, 61, 42, 31, 233, 189, 81, 19, 61, 189, 125, 252, 6, 190, 91, 63, 52, 190, 107, 0, 240, 61, 110, 254, 126, 189, 235, 206, 172, 188, 186, 65, 152, 61, 145, 74, 51, 61, 60, 202, 130, 189, 135, 142, 95, 61, 230, 232, 32, 190, 186, 28, 147, 60, 73, 63, 233, 189, 155, 28, 122, 188, 251, 188, 226, 61, 167, 44, 109, 188, 192, 215, 88, 189, 64, 78, 4, 62, 109, 81, 156, 60, 111, 65, 14, 61, 76, 157, 93, 187, 159, 110, 180, 61, 81, 223, 44, 61, 73, 81, 233, 61, 127, 80, 235, 189, 45, 57, 26, 188, 192, 165, 42, 190, 54, 208, 208, 186, 129, 156, 193, 61, 20, 148, 52, 60, 47, 79, 175, 188, 102, 35, 219, 189, 37, 41, 34, 62, 179, 157, 4, 60, 68, 109, 160, 189, 187, 159, 170, 61, 160, 33, 37, 62, 50, 157, 3, 60, 211, 51, 58, 189, 79, 25, 39, 188, 191, 104, 119, 61, 104, 160, 10, 62, 217, 107, 50, 62, 10, 254, 30, 189, 52, 120, 169, 189, 106, 169, 245, 61, 251, 151, 148, 61, 108, 71, 14, 61, 131, 190, 189, 61, 242, 36, 194, 61, 160, 145, 17, 62, 134, 224, 162, 189, 215, 13, 3, 62, 66, 52, 139, 188, 46, 139, 153, 61, 240, 220, 208, 186, 80, 104, 180, 61, 102, 152, 35, 190, 255, 60, 9, 62, 133, 118, 118, 60, 64, 44, 17, 61, 96, 34, 92, 189, 185, 50, 110, 61, 94, 22, 46, 62, 49, 125, 220, 189, 125, 76, 9, 61, 163, 148, 39, 62, 58, 126, 5, 190, 231, 245, 128, 189, 188, 74, 132, 189, 19, 250, 210, 61, 109, 103, 34, 61, 189, 96, 119, 189, 255, 83, 222, 187, 155, 141, 39, 62, 21, 220, 0, 62, 217, 108, 236, 60, 12, 111, 137, 188, 50, 155, 47, 62, 44, 78, 149, 61, 74, 82, 10, 190, 110, 60, 236, 189, 146, 189, 23, 190, 139, 235, 204, 189, 98, 254, 43, 62, 10, 206, 52, 190, 202, 174, 37, 62, 209, 55, 43, 190, 255, 37, 50, 190, 75, 83, 161, 189, 17, 30, 9, 62, 81, 194, 28, 62, 221, 147, 187, 61, 36, 43, 1, 188, 70, 8, 162, 61, 163, 169, 49, 60, 70, 174, 45, 62, 149, 253, 130, 189, 40, 94, 52, 62, 128, 66, 183, 61, 105, 24, 178, 189, 97, 9, 12, 190, 88, 181, 140, 60, 168, 188, 46, 190, 77, 123, 87, 61, 210, 69, 107, 189, 192, 97, 42, 62, 56, 149, 236, 189, 218, 246, 41, 190, 68, 143, 208, 189, 60, 147, 214, 186, 203, 197, 128, 61, 29, 241, 233, 59, 69, 164, 11, 62, 11, 12, 11, 190, 100, 151, 130, 187, 60, 196, 35, 190, 136, 214, 27, 62, 126, 18, 52, 190, 135, 47, 41, 62, 34, 39, 78, 61, 4, 168, 27, 190, 186, 213, 193, 188, 62, 110, 141, 61, 123, 0, 115, 189, 30, 17, 168, 189, 104, 72, 20, 189, 80, 77, 169, 60, 5, 62, 32, 62, 122, 242, 94, 188, 63, 32, 60, 61, 222, 134, 255, 61, 91, 240, 136, 61, 254, 138, 6, 60, 190, 178, 5, 62, 146, 31, 216, 189, 233, 143, 27, 62, 42, 3, 220, 189, 12, 142, 102, 61, 192, 29, 163, 189, 60, 103, 137, 189, 69, 66, 254, 189, 58, 183, 175, 61, 126, 165, 0, 190, 124, 239, 131, 189, 61, 132, 29, 190, 6, 232, 25, 190, 59, 12, 122, 61, 121, 142, 246, 58, 219, 186, 24, 62, 97, 111, 154, 61, 58, 77, 227, 189, 87, 206, 87, 188, 25, 196, 89, 189, 236, 83, 253, 189, 217, 247, 83, 189, 186, 127, 176, 188, 98, 47, 149, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 104, 166, 29, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 96, 253, 60, 204, 96, 180, 189, 44, 103, 31, 190, 56, 112, 254, 189, 68, 212, 210, 60, 228, 43, 60, 61, 26, 165, 50, 188, 151, 49, 151, 61, 82, 192, 5, 190, 38, 229, 40, 62, 204, 202, 116, 189, 156, 76, 152, 61, 125, 3, 58, 188, 238, 254, 9, 190, 28, 121, 43, 189, 36, 0, 228, 61, 58, 120, 232, 186, 224, 229, 15, 60, 84, 125, 219, 189, 58, 37, 245, 187, 43, 206, 252, 61, 210, 149, 2, 61, 117, 190, 166, 61, 112, 39, 96, 189, 209, 127, 234, 60, 139, 194, 32, 190, 214, 129, 92, 61, 225, 18, 20, 190, 195, 228, 204, 188, 135, 92, 10, 190, 155, 48, 46, 61, 255, 224, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 41, 201, 61, 202, 132, 188, 61, 95, 147, 128, 189, 232, 57, 34, 190, 117, 22, 180, 188, 237, 192, 54, 188, 52, 164, 181, 189, 211, 90, 137, 189, 80, 65, 163, 189, 8, 243, 21, 190, 191, 46, 61, 189, 87, 221, 10, 62, 232, 188, 37, 190, 180, 51, 253, 188, 199, 162, 221, 189, 150, 17, 44, 62, 247, 174, 202, 187, 96, 187, 92, 188, 59, 108, 32, 190, 121, 93, 247, 189, 188, 75, 186, 61, 207, 152, 163, 61, 186, 161, 251, 61, 90, 70, 161, 189, 49, 33, 34, 190, 49, 244, 23, 62, 188, 183, 135, 61, 233, 15, 164, 61, 237, 132, 84, 61, 174, 144, 37, 62, 167, 174, 194, 60, 43, 158, 201, 189, 205, 52, 52, 62, 65, 190, 177, 189, 181, 82, 213, 61, 28, 43, 27, 190, 29, 211, 22, 190, 96, 137, 169, 61, 93, 140, 157, 61, 92, 224, 146, 188, 207, 31, 224, 189, 134, 10, 206, 189, 241, 146, 36, 62, 145, 146, 156, 60, 251, 200, 25, 190, 137, 128, 143, 189, 217, 231, 247, 60, 193, 218, 26, 190, 135, 219, 96, 61, 133, 128, 251, 189, 64, 246, 168, 61, 223, 166, 48, 189, 81, 65, 135, 189, 27, 36, 49, 190, 151, 93, 37, 190, 65, 203, 142, 61, 38, 221, 44, 62, 1, 186, 21, 189, 30, 38, 219, 61, 221, 151, 145, 189, 62, 219, 35, 190, 242, 173, 186, 61, 48, 132, 61, 61, 64, 82, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 134, 180, 61, 36, 195, 53, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {24, 253, 55, 190, 184, 190, 208, 190, 211, 16, 14, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 99, 66, 62, 240, 46, 236, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}