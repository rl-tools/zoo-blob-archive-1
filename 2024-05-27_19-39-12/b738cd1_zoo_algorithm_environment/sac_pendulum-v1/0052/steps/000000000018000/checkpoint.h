// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 220, 87, 63, 163, 127, 93, 191, 71, 117, 157, 190, 206, 252, 20, 63, 172, 175, 9, 63, 133, 92, 29, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 175, 218, 209, 61, 52, 228, 169, 62, 124, 147, 55, 191, 42, 235, 232, 189, 83, 61, 85, 191, 2, 92, 119, 62, 2, 101, 37, 62, 196, 11, 113, 191, 127, 98, 246, 189, 41, 151, 162, 63, 207, 30, 153, 62, 120, 212, 73, 62, 218, 101, 2, 62, 127, 176, 212, 188, 144, 155, 28, 190, 198, 3, 111, 62, 98, 239, 152, 191, 115, 253, 51, 62, 155, 187, 51, 191, 80, 51, 64, 191, 3, 207, 69, 190, 103, 14, 2, 191, 43, 55, 221, 62, 106, 182, 253, 62, 146, 137, 165, 62, 70, 69, 153, 190, 225, 179, 15, 63, 124, 226, 93, 191, 206, 48, 142, 191, 181, 8, 45, 59, 123, 157, 71, 62, 233, 98, 136, 191, 4, 8, 194, 62, 12, 183, 77, 61, 134, 153, 203, 191, 3, 252, 139, 190, 28, 78, 172, 62, 243, 33, 156, 187, 70, 244, 3, 63, 166, 254, 136, 190, 255, 199, 32, 191, 251, 207, 15, 63, 11, 154, 234, 62, 161, 26, 146, 191, 211, 200, 115, 190, 75, 27, 217, 61, 121, 17, 62, 191, 110, 72, 181, 62, 222, 179, 242, 62, 238, 147, 99, 63, 31, 46, 9, 63, 42, 81, 94, 62, 203, 55, 27, 63, 95, 58, 247, 190, 5, 160, 12, 63, 86, 63, 57, 191, 90, 28, 71, 190, 246, 5, 129, 191, 106, 107, 248, 190, 160, 11, 49, 188, 254, 60, 55, 191, 15, 78, 42, 61, 25, 243, 66, 62, 157, 201, 57, 62, 235, 39, 179, 191, 125, 171, 181, 190, 153, 93, 93, 62, 10, 204, 43, 191, 76, 129, 98, 62, 64, 184, 234, 190, 233, 181, 88, 61, 125, 102, 126, 62, 17, 110, 21, 63, 156, 45, 231, 62, 142, 113, 139, 62, 106, 181, 184, 189, 34, 192, 174, 63, 115, 144, 156, 62, 9, 20, 118, 190, 62, 147, 213, 63, 54, 67, 151, 62, 4, 53, 76, 62, 140, 176, 65, 62, 97, 239, 10, 63, 233, 197, 131, 62, 79, 53, 150, 63, 231, 46, 144, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 70, 35, 191, 93, 27, 23, 191, 48, 0, 19, 191, 99, 56, 211, 190, 27, 14, 53, 190, 243, 71, 0, 191, 11, 246, 122, 62, 227, 117, 111, 191, 204, 74, 7, 63, 78, 119, 133, 62, 130, 249, 30, 191, 200, 37, 3, 60, 108, 35, 151, 189, 53, 209, 77, 61, 136, 154, 186, 62, 246, 226, 128, 62, 120, 154, 208, 190, 226, 166, 220, 61, 191, 215, 75, 61, 49, 53, 110, 62, 192, 96, 123, 62, 161, 66, 42, 191, 236, 75, 96, 63, 228, 183, 32, 63, 91, 29, 202, 62, 161, 88, 158, 61, 46, 37, 196, 190, 243, 246, 26, 191, 10, 147, 99, 190, 139, 111, 148, 190, 193, 249, 112, 62, 216, 99, 105, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 26, 130, 62, 30, 206, 57, 191, 172, 51, 171, 60, 80, 65, 58, 62, 110, 88, 36, 62, 78, 4, 134, 190, 106, 195, 167, 61, 30, 232, 189, 62, 92, 125, 252, 62, 39, 171, 243, 190, 21, 199, 189, 61, 241, 97, 203, 190, 75, 154, 83, 61, 233, 79, 49, 62, 198, 29, 199, 62, 150, 129, 55, 190, 80, 33, 98, 62, 18, 218, 190, 62, 241, 236, 182, 62, 251, 71, 254, 187, 62, 249, 81, 189, 134, 12, 16, 191, 183, 220, 4, 62, 12, 45, 54, 62, 79, 199, 144, 61, 132, 108, 166, 61, 115, 67, 162, 190, 175, 52, 153, 191, 243, 93, 171, 189, 135, 65, 137, 186, 152, 69, 2, 62, 87, 195, 142, 191, 239, 43, 253, 62, 21, 76, 34, 186, 69, 4, 180, 58, 79, 61, 254, 62, 133, 68, 130, 62, 87, 129, 143, 190, 128, 138, 126, 190, 91, 111, 145, 60, 29, 248, 143, 62, 40, 244, 193, 190, 176, 77, 31, 62, 245, 20, 118, 189, 30, 172, 222, 188, 195, 68, 128, 61, 184, 125, 105, 61, 189, 167, 228, 189, 80, 61, 235, 61, 75, 18, 190, 62, 183, 74, 17, 62, 187, 75, 103, 62, 81, 46, 0, 62, 122, 211, 133, 190, 12, 223, 88, 189, 94, 216, 142, 61, 77, 33, 234, 190, 159, 63, 148, 190, 129, 251, 222, 189, 129, 79, 184, 190, 224, 13, 191, 62, 232, 174, 6, 63, 253, 54, 80, 62, 48, 177, 152, 190, 170, 253, 65, 62, 176, 219, 154, 61, 247, 157, 75, 60, 95, 27, 137, 190, 59, 19, 119, 62, 40, 26, 55, 63, 6, 12, 32, 61, 135, 81, 230, 61, 247, 168, 141, 62, 116, 136, 147, 62, 134, 107, 50, 61, 148, 194, 177, 61, 197, 6, 173, 190, 30, 229, 77, 62, 107, 187, 122, 188, 67, 225, 148, 61, 33, 240, 177, 61, 210, 117, 246, 190, 30, 197, 128, 62, 154, 203, 234, 189, 115, 112, 160, 190, 143, 244, 43, 63, 58, 107, 148, 190, 201, 216, 8, 190, 39, 141, 167, 189, 53, 56, 198, 62, 233, 16, 169, 61, 94, 184, 229, 62, 176, 253, 148, 61, 6, 244, 72, 190, 148, 74, 135, 62, 13, 116, 107, 60, 84, 151, 2, 63, 57, 19, 152, 61, 12, 215, 13, 62, 165, 254, 99, 189, 160, 111, 146, 62, 142, 180, 4, 63, 129, 141, 172, 62, 224, 46, 45, 62, 244, 100, 57, 62, 151, 42, 163, 62, 208, 248, 40, 62, 67, 120, 16, 61, 52, 148, 65, 188, 237, 122, 89, 62, 255, 163, 153, 61, 27, 148, 73, 62, 46, 151, 109, 61, 76, 198, 33, 189, 63, 224, 179, 62, 172, 29, 204, 188, 30, 161, 80, 190, 94, 144, 104, 63, 29, 144, 147, 190, 51, 200, 90, 190, 141, 193, 134, 62, 125, 66, 99, 62, 216, 50, 89, 61, 99, 151, 206, 61, 19, 57, 212, 189, 105, 18, 8, 191, 248, 135, 157, 62, 174, 31, 132, 189, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 28, 114, 78, 188, 69, 52, 64, 189, 119, 39, 112, 189, 143, 149, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 187, 34, 134, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 41, 136, 183, 189, 104, 226, 235, 59, 139, 92, 241, 189, 104, 93, 39, 190, 68, 24, 14, 62, 250, 204, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 238, 98, 59, 189, 69, 79, 236, 61, 100, 172, 87, 189, 113, 97, 129, 189, 158, 214, 148, 62, 108, 142, 16, 190, 114, 120, 58, 61, 127, 159, 40, 62, 120, 174, 230, 189, 214, 166, 46, 191, 144, 139, 131, 62, 227, 189, 247, 62, 78, 145, 17, 189, 98, 224, 135, 189, 106, 40, 192, 61, 203, 232, 3, 61, 18, 122, 17, 191, 197, 242, 81, 188, 31, 226, 132, 190, 195, 76, 223, 189, 54, 3, 30, 62, 147, 104, 133, 62, 49, 204, 74, 190, 57, 30, 28, 190, 29, 57, 4, 62, 168, 102, 185, 190, 97, 94, 111, 190, 132, 52, 65, 62, 121, 173, 236, 61, 149, 179, 248, 188, 221, 31, 75, 190, 184, 122, 148, 61, 241, 189, 188, 190, 153, 107, 35, 191, 0, 209, 64, 190, 9, 29, 156, 190, 108, 126, 243, 189, 173, 92, 139, 188, 115, 132, 242, 61, 10, 31, 47, 60, 208, 110, 34, 61, 114, 140, 245, 61, 114, 12, 59, 60, 84, 42, 196, 189, 107, 113, 133, 60, 112, 116, 167, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 6, 33, 225, 61, 107, 229, 206, 189, 148, 86, 40, 61, 167, 147, 233, 189, 225, 141, 26, 190, 58, 35, 122, 189, 126, 57, 231, 186, 216, 144, 37, 190, 104, 18, 177, 189, 132, 79, 76, 189, 94, 63, 63, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 79, 35, 32, 62, 195, 80, 113, 189, 181, 6, 205, 189, 94, 240, 98, 59, 3, 217, 165, 191, 54, 91, 9, 190, 220, 211, 63, 60, 242, 201, 72, 190, 0, 186, 27, 191, 13, 94, 171, 190, 30, 75, 203, 62, 20, 247, 182, 190, 140, 189, 26, 191, 178, 213, 119, 62, 162, 130, 160, 190, 224, 187, 210, 188, 166, 246, 80, 190, 182, 11, 197, 190, 95, 232, 214, 190, 191, 110, 136, 61, 50, 66, 206, 190, 78, 209, 17, 191, 225, 63, 69, 190, 163, 186, 191, 61, 19, 255, 15, 63, 221, 52, 81, 186, 132, 10, 99, 62, 89, 104, 153, 190, 173, 15, 170, 189, 182, 240, 184, 189, 97, 22, 141, 59, 32, 6, 217, 190, 162, 226, 133, 191, 1, 222, 21, 191, 107, 193, 109, 190, 72, 38, 47, 62, 185, 170, 225, 190, 14, 126, 102, 190, 49, 41, 239, 187, 186, 16, 132, 191, 157, 202, 253, 189, 207, 172, 130, 188, 162, 32, 107, 62, 198, 128, 60, 190, 93, 226, 100, 62, 213, 215, 244, 61, 223, 196, 61, 191, 165, 1, 90, 61, 231, 135, 100, 62, 142, 214, 6, 190, 204, 224, 14, 62, 119, 1, 209, 61, 134, 178, 39, 189, 155, 182, 228, 190, 48, 91, 85, 189, 42, 197, 188, 191, 23, 206, 67, 191, 18, 191, 182, 59, 48, 167, 135, 62, 123, 9, 225, 62, 66, 158, 192, 190, 6, 216, 72, 63, 193, 193, 250, 62, 139, 244, 117, 61, 79, 76, 188, 191, 59, 167, 134, 190, 9, 193, 211, 189, 124, 16, 79, 190, 129, 168, 101, 191, 29, 140, 71, 61, 110, 131, 5, 62, 177, 58, 3, 189, 196, 4, 253, 190, 192, 81, 184, 191, 212, 147, 189, 62, 80, 218, 211, 190, 10, 126, 197, 61, 208, 60, 193, 189, 163, 31, 98, 189, 52, 210, 164, 62, 11, 9, 171, 190, 233, 194, 33, 62, 33, 40, 133, 190, 61, 34, 238, 61, 240, 113, 17, 191, 92, 21, 198, 190, 199, 52, 177, 61, 52, 5, 206, 61, 38, 131, 197, 62, 249, 193, 248, 191, 151, 22, 131, 190, 178, 109, 56, 191, 249, 92, 60, 190, 133, 238, 204, 62, 111, 34, 61, 61, 152, 169, 139, 60, 109, 69, 86, 191, 183, 244, 121, 191, 91, 154, 236, 60, 45, 216, 69, 62, 131, 90, 106, 191, 130, 137, 237, 190, 73, 139, 1, 61, 213, 105, 134, 62, 177, 207, 36, 190, 39, 197, 191, 61, 104, 169, 130, 62, 105, 241, 170, 188, 199, 82, 43, 190, 201, 167, 19, 190, 163, 150, 2, 191, 134, 194, 173, 190, 174, 209, 99, 190, 192, 182, 179, 188, 102, 235, 61, 191, 230, 169, 233, 60, 236, 225, 133, 189, 217, 187, 176, 190, 171, 163, 62, 189, 84, 193, 104, 62, 122, 198, 173, 61, 36, 132, 6, 188, 179, 5, 71, 62, 65, 43, 192, 190, 57, 134, 120, 190, 189, 233, 124, 190, 208, 254, 46, 190, 159, 188, 132, 190, 1, 178, 31, 191, 5, 250, 7, 191, 127, 222, 231, 61, 43, 40, 186, 61, 63, 232, 119, 190, 70, 120, 204, 190, 93, 159, 13, 190, 148, 208, 254, 189, 133, 145, 240, 61, 129, 205, 143, 189, 209, 53, 83, 190, 136, 162, 223, 189, 253, 218, 151, 62, 195, 37, 93, 190, 148, 229, 207, 61, 224, 168, 97, 190, 3, 241, 202, 62, 44, 225, 96, 62, 125, 69, 3, 63, 150, 215, 203, 189, 80, 166, 156, 61, 206, 184, 98, 62, 218, 103, 78, 62, 53, 231, 64, 190, 161, 90, 38, 191, 183, 15, 13, 191, 238, 149, 50, 62, 184, 166, 96, 62, 29, 235, 146, 61, 209, 48, 35, 190, 182, 91, 29, 190, 163, 99, 88, 191, 6, 80, 192, 189, 191, 7, 4, 60, 146, 129, 17, 62, 135, 250, 96, 191, 94, 152, 198, 62, 11, 156, 190, 61, 251, 218, 173, 188, 204, 181, 87, 62, 183, 137, 82, 190, 220, 244, 7, 189, 104, 36, 137, 189, 93, 126, 18, 63, 31, 93, 39, 191, 76, 26, 133, 190, 112, 186, 24, 188, 89, 54, 91, 61, 87, 33, 189, 189, 246, 142, 157, 190, 2, 94, 178, 189, 135, 143, 110, 190, 45, 212, 58, 187, 37, 27, 80, 62, 37, 12, 173, 190, 200, 200, 138, 190, 30, 180, 3, 190, 201, 54, 177, 62, 220, 27, 75, 190, 103, 207, 44, 190, 213, 8, 225, 189, 70, 50, 191, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 128, 81, 153, 190, 53, 150, 166, 186, 136, 135, 90, 191, 90, 175, 11, 189, 108, 75, 104, 190, 97, 81, 128, 188, 70, 168, 107, 189, 108, 159, 80, 62, 160, 121, 155, 190, 21, 96, 50, 62, 9, 20, 146, 62, 11, 32, 42, 190, 134, 233, 221, 188, 25, 110, 215, 62, 137, 53, 147, 62, 218, 188, 211, 62, 211, 99, 138, 190, 62, 106, 12, 62, 225, 125, 82, 61, 39, 247, 12, 62, 91, 1, 180, 191, 150, 148, 159, 190, 18, 125, 113, 190, 228, 242, 6, 62, 51, 98, 203, 61, 231, 155, 253, 61, 35, 204, 216, 62, 186, 45, 113, 190, 244, 207, 134, 191, 150, 11, 202, 190, 120, 145, 149, 190, 141, 52, 144, 190, 23, 7, 105, 191, 220, 243, 117, 191, 4, 239, 174, 61, 83, 183, 48, 190, 171, 245, 127, 190, 50, 25, 85, 191, 177, 240, 24, 62, 122, 253, 187, 62, 219, 66, 240, 190, 196, 232, 227, 190, 164, 147, 188, 62, 95, 182, 41, 191, 32, 187, 133, 62, 213, 45, 76, 63, 245, 89, 39, 191, 186, 102, 133, 62, 190, 252, 62, 62, 204, 214, 32, 62, 131, 151, 206, 190, 154, 182, 128, 190, 178, 113, 134, 191, 234, 146, 158, 62, 188, 174, 193, 189, 26, 113, 13, 63, 45, 182, 13, 190, 85, 84, 254, 189, 116, 183, 228, 62, 119, 122, 205, 62, 221, 233, 158, 188, 19, 17, 164, 191, 238, 122, 39, 190, 46, 31, 189, 190, 155, 248, 28, 63, 197, 103, 39, 61, 137, 180, 172, 189, 125, 104, 23, 62, 254, 14, 44, 62, 17, 132, 130, 62, 168, 95, 135, 189, 6, 19, 35, 190, 247, 50, 38, 62, 138, 218, 103, 62, 12, 216, 54, 190, 233, 252, 158, 187, 231, 170, 120, 190, 48, 88, 54, 189, 76, 181, 90, 62, 115, 57, 25, 62, 83, 188, 204, 61, 9, 82, 129, 62, 248, 35, 146, 62, 126, 81, 81, 62, 146, 2, 97, 187, 205, 47, 57, 62, 10, 161, 32, 191, 157, 157, 51, 62, 231, 55, 217, 60, 178, 234, 3, 61, 204, 95, 139, 190, 154, 160, 160, 60, 9, 111, 12, 191, 22, 127, 189, 188, 247, 48, 229, 61, 48, 228, 13, 62, 66, 97, 174, 190, 199, 69, 223, 189, 82, 58, 236, 189, 48, 211, 247, 188, 103, 90, 200, 190, 86, 193, 210, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 57, 68, 133, 190, 64, 215, 234, 61, 198, 51, 15, 188, 235, 170, 61, 190, 105, 119, 211, 61, 116, 200, 243, 61, 76, 223, 220, 190, 146, 174, 96, 190, 4, 255, 150, 187, 164, 162, 185, 61, 105, 153, 163, 61, 162, 228, 234, 189, 80, 250, 21, 190, 177, 10, 236, 61, 85, 94, 24, 62, 195, 175, 197, 186, 185, 211, 220, 191, 39, 88, 145, 189, 6, 115, 192, 62, 72, 62, 79, 61, 139, 231, 230, 190, 51, 71, 11, 62, 57, 148, 226, 61, 230, 182, 27, 191, 220, 244, 219, 190, 87, 156, 101, 191, 83, 134, 169, 61, 133, 130, 4, 190, 11, 188, 46, 189, 20, 111, 158, 62, 123, 230, 48, 189, 132, 144, 218, 190, 225, 148, 221, 187, 156, 190, 113, 59, 207, 19, 83, 62, 56, 125, 175, 190, 19, 193, 157, 62, 177, 70, 69, 190, 66, 22, 204, 61, 194, 143, 34, 190, 52, 165, 133, 61, 91, 193, 180, 60, 255, 221, 146, 189, 249, 193, 243, 189, 233, 247, 116, 62, 11, 114, 18, 61, 23, 60, 235, 62, 241, 121, 155, 62, 31, 196, 143, 62, 82, 113, 39, 62, 32, 22, 220, 62, 196, 187, 151, 191, 114, 30, 161, 190, 228, 52, 44, 190, 221, 57, 114, 190, 144, 50, 239, 189, 108, 84, 7, 190, 134, 117, 31, 59, 212, 147, 31, 62, 166, 173, 14, 190, 208, 22, 234, 190, 63, 22, 189, 188, 149, 210, 153, 59, 202, 8, 161, 190, 10, 134, 27, 191, 244, 34, 83, 62, 163, 44, 80, 62, 238, 154, 184, 60, 102, 111, 8, 63, 85, 247, 170, 190, 108, 231, 65, 61, 231, 50, 129, 62, 30, 203, 11, 62, 252, 43, 114, 190, 153, 214, 12, 190, 18, 12, 53, 191, 6, 92, 232, 61, 89, 10, 2, 63, 103, 130, 167, 62, 216, 114, 134, 62, 111, 93, 115, 188, 187, 81, 9, 191, 14, 241, 149, 62, 140, 108, 124, 188, 61, 101, 163, 190, 217, 142, 129, 62, 1, 170, 227, 60, 15, 26, 197, 62, 20, 242, 247, 188, 208, 214, 89, 61, 221, 132, 26, 190, 31, 165, 160, 190, 62, 173, 50, 191, 163, 39, 243, 61, 68, 48, 206, 62, 50, 213, 231, 190, 128, 229, 37, 190, 208, 16, 243, 188, 2, 117, 147, 190, 243, 210, 41, 62, 222, 239, 153, 62, 64, 136, 133, 60, 110, 31, 57, 62, 4, 121, 39, 62, 65, 89, 1, 191, 91, 0, 64, 188, 229, 177, 47, 190, 247, 131, 151, 61, 34, 106, 113, 62, 246, 206, 90, 62, 59, 161, 239, 188, 51, 32, 6, 191, 31, 128, 10, 188, 119, 123, 43, 62, 245, 118, 65, 190, 127, 233, 12, 190, 67, 104, 75, 191, 245, 68, 34, 191, 155, 112, 171, 61, 11, 37, 2, 61, 235, 211, 176, 190, 180, 131, 127, 190, 204, 60, 226, 189, 235, 69, 214, 189, 126, 84, 79, 62, 129, 60, 186, 190, 121, 224, 96, 62, 51, 129, 9, 190, 171, 160, 187, 60, 213, 246, 221, 190, 39, 174, 55, 188, 194, 190, 206, 60, 182, 227, 61, 62, 31, 164, 13, 62, 26, 75, 145, 62, 250, 200, 17, 190, 116, 151, 15, 189, 94, 53, 87, 61, 158, 129, 172, 189, 9, 105, 90, 61, 172, 22, 168, 62, 205, 195, 157, 191, 111, 101, 248, 61, 89, 121, 147, 61, 180, 118, 170, 187, 251, 8, 148, 62, 251, 145, 76, 190, 127, 65, 179, 191, 234, 44, 10, 191, 103, 142, 250, 190, 125, 203, 201, 61, 150, 97, 96, 191, 195, 217, 167, 190, 226, 142, 119, 188, 112, 26, 72, 60, 70, 96, 31, 190, 135, 220, 216, 61, 27, 170, 108, 62, 103, 58, 169, 62, 14, 218, 18, 191, 222, 121, 68, 61, 247, 101, 126, 190, 65, 116, 174, 61, 245, 61, 3, 190, 7, 73, 88, 62, 125, 77, 43, 62, 13, 147, 134, 62, 78, 149, 14, 190, 136, 69, 218, 60, 247, 18, 18, 187, 151, 13, 152, 61, 16, 217, 15, 60, 0, 39, 65, 62, 151, 211, 170, 190, 85, 119, 61, 189, 43, 177, 241, 61, 73, 14, 186, 188, 250, 108, 0, 189, 38, 13, 21, 190, 250, 85, 190, 190, 201, 134, 28, 61, 1, 150, 103, 62, 150, 209, 199, 61, 6, 23, 239, 189, 67, 81, 26, 62, 221, 52, 240, 189, 248, 91, 82, 61, 128, 90, 129, 62, 235, 117, 161, 61, 156, 169, 122, 190, 66, 31, 153, 189, 16, 237, 98, 62, 178, 137, 125, 61, 144, 232, 169, 189, 250, 178, 196, 189, 81, 229, 215, 189, 188, 212, 222, 61, 66, 11, 153, 60, 115, 191, 194, 189, 207, 25, 3, 190, 178, 34, 117, 61, 21, 127, 162, 62, 141, 149, 106, 189, 190, 255, 123, 62, 102, 115, 140, 62, 190, 172, 7, 191, 158, 249, 247, 189, 132, 112, 132, 62, 24, 199, 41, 189, 62, 213, 114, 190, 160, 180, 140, 61, 184, 209, 77, 190, 37, 14, 128, 62, 189, 102, 207, 62, 33, 128, 222, 61, 166, 185, 52, 62, 52, 120, 106, 191, 163, 37, 68, 61, 222, 47, 35, 190, 230, 232, 16, 62, 173, 208, 195, 61, 192, 200, 156, 63, 221, 155, 227, 62, 46, 34, 231, 190, 147, 137, 62, 61, 64, 228, 246, 62, 92, 47, 121, 189, 203, 56, 134, 62, 176, 54, 137, 186, 186, 48, 122, 62, 68, 169, 83, 190, 172, 134, 247, 61, 225, 175, 41, 61, 24, 60, 33, 191, 42, 61, 80, 61, 58, 88, 195, 61, 200, 199, 250, 60, 164, 223, 131, 189, 218, 128, 93, 190, 61, 221, 205, 61, 161, 129, 58, 190, 106, 252, 254, 61, 235, 242, 174, 189, 216, 149, 229, 62, 230, 112, 193, 189, 199, 57, 239, 190, 183, 188, 11, 62, 164, 202, 155, 61, 177, 142, 200, 190, 125, 203, 87, 60, 13, 221, 172, 189, 198, 61, 108, 191, 154, 173, 190, 190, 193, 227, 79, 190, 106, 105, 49, 190, 44, 165, 147, 189, 138, 38, 181, 189, 184, 144, 164, 61, 14, 128, 225, 60, 46, 253, 21, 189, 22, 127, 65, 62, 76, 110, 2, 190, 152, 41, 54, 189, 28, 111, 87, 61, 148, 117, 240, 60, 236, 235, 65, 191, 29, 172, 221, 187, 136, 253, 34, 191, 187, 202, 118, 190, 101, 231, 219, 189, 42, 20, 142, 61, 201, 206, 63, 59, 178, 116, 167, 190, 172, 134, 213, 62, 34, 76, 3, 63, 221, 70, 36, 61, 153, 119, 53, 191, 63, 52, 136, 190, 163, 59, 23, 190, 206, 161, 78, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 187, 9, 137, 62, 239, 246, 112, 62, 98, 95, 207, 189, 194, 78, 93, 190, 52, 255, 8, 188, 86, 174, 239, 189, 34, 205, 174, 62, 100, 222, 2, 191, 233, 251, 117, 190, 139, 136, 35, 191, 193, 167, 42, 190, 211, 160, 7, 61, 58, 225, 193, 60, 168, 252, 75, 61, 60, 234, 12, 63, 29, 15, 43, 62, 234, 32, 7, 190, 18, 76, 36, 63, 182, 249, 9, 190, 200, 90, 57, 62, 174, 164, 10, 62, 44, 211, 99, 190, 174, 30, 0, 191, 107, 112, 186, 61, 219, 93, 183, 62, 98, 123, 27, 61, 206, 227, 50, 189, 237, 82, 157, 62, 9, 204, 66, 188, 221, 47, 212, 62, 165, 160, 35, 62, 42, 164, 125, 62, 182, 65, 184, 190, 6, 22, 128, 189, 145, 74, 51, 61, 132, 240, 213, 189, 91, 81, 175, 62, 210, 77, 87, 190, 108, 89, 140, 190, 106, 131, 56, 190, 13, 156, 25, 62, 252, 165, 1, 190, 141, 132, 93, 61, 214, 207, 66, 190, 164, 189, 3, 63, 252, 122, 23, 62, 49, 179, 18, 63, 110, 130, 176, 188, 76, 48, 126, 62, 43, 94, 136, 62, 94, 133, 157, 62, 89, 87, 223, 189, 139, 40, 24, 191, 110, 67, 74, 191, 183, 31, 2, 62, 53, 210, 80, 62, 225, 102, 11, 62, 75, 247, 52, 190, 226, 6, 186, 189, 30, 192, 158, 190, 2, 47, 154, 61, 110, 212, 170, 61, 203, 127, 35, 62, 228, 139, 116, 190, 74, 102, 210, 189, 49, 157, 35, 190, 79, 25, 39, 188, 79, 242, 242, 188, 185, 220, 125, 62, 248, 245, 203, 62, 62, 202, 40, 189, 180, 209, 207, 190, 46, 249, 236, 61, 142, 196, 118, 190, 10, 60, 74, 59, 94, 234, 79, 189, 179, 252, 156, 62, 139, 155, 209, 61, 244, 231, 205, 61, 171, 40, 226, 61, 1, 243, 89, 60, 122, 249, 65, 62, 102, 219, 97, 188, 104, 148, 66, 62, 11, 29, 155, 189, 244, 255, 227, 61, 156, 231, 145, 60, 50, 11, 222, 61, 59, 57, 226, 189, 131, 207, 209, 189, 101, 115, 214, 61, 157, 93, 211, 190, 15, 203, 2, 62, 198, 101, 11, 63, 26, 120, 244, 189, 228, 98, 91, 189, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 144, 222, 153, 189, 168, 188, 46, 190, 46, 143, 43, 62, 177, 17, 210, 61, 70, 195, 252, 61, 50, 92, 137, 191, 224, 141, 248, 189, 35, 110, 73, 190, 232, 1, 125, 190, 144, 94, 144, 62, 99, 199, 84, 190, 187, 145, 155, 62, 241, 116, 12, 189, 92, 48, 65, 191, 137, 188, 147, 190, 175, 169, 193, 62, 120, 214, 190, 190, 249, 52, 154, 62, 98, 26, 35, 61, 77, 193, 50, 191, 205, 188, 33, 190, 76, 2, 244, 61, 194, 72, 213, 61, 92, 210, 232, 191, 63, 200, 15, 191, 217, 164, 16, 61, 198, 162, 116, 189, 36, 81, 245, 61, 189, 161, 95, 62, 215, 35, 68, 62, 151, 208, 36, 190, 33, 252, 250, 188, 190, 178, 5, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 228, 231, 150, 189, 209, 119, 152, 189, 69, 66, 254, 189, 213, 44, 139, 60, 126, 165, 0, 190, 124, 239, 131, 189, 188, 222, 76, 190, 6, 232, 25, 190, 122, 123, 98, 187, 121, 142, 246, 58, 219, 186, 24, 62, 104, 52, 217, 60, 58, 77, 227, 189, 87, 206, 87, 188, 81, 29, 205, 189, 175, 0, 244, 189, 173, 191, 244, 189, 114, 128, 176, 188, 9, 100, 253, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 89, 192, 28, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 212, 128, 62, 108, 246, 74, 189, 44, 84, 47, 190, 163, 112, 136, 188, 51, 92, 87, 187, 6, 213, 68, 189, 222, 49, 168, 189, 78, 207, 112, 62, 185, 32, 80, 61, 44, 125, 146, 62, 41, 142, 221, 61, 201, 236, 250, 61, 90, 36, 173, 190, 236, 147, 117, 61, 225, 100, 146, 62, 209, 190, 89, 62, 186, 185, 5, 189, 154, 218, 140, 62, 243, 52, 228, 61, 212, 45, 60, 62, 116, 241, 149, 62, 214, 62, 93, 62, 205, 221, 91, 62, 174, 241, 102, 61, 147, 127, 151, 60, 73, 149, 51, 190, 24, 205, 44, 189, 117, 114, 8, 190, 208, 0, 19, 62, 163, 116, 88, 190, 78, 166, 225, 189, 14, 175, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 93, 78, 63, 176, 217, 196, 62, 109, 61, 162, 190, 220, 12, 221, 190, 129, 173, 181, 188, 108, 221, 144, 62, 211, 51, 55, 189, 116, 45, 151, 191, 8, 33, 191, 191, 188, 212, 57, 191, 94, 193, 129, 191, 136, 125, 63, 63, 54, 189, 19, 191, 167, 118, 35, 191, 196, 43, 191, 191, 127, 8, 115, 62, 110, 40, 77, 63, 235, 201, 106, 190, 222, 127, 17, 191, 124, 28, 163, 190, 72, 68, 197, 62, 128, 6, 163, 61, 156, 242, 72, 62, 19, 255, 152, 190, 138, 26, 22, 191, 252, 181, 22, 62, 170, 150, 209, 62, 89, 183, 209, 62, 216, 148, 226, 61, 188, 36, 246, 61, 166, 84, 72, 63, 48, 98, 57, 189, 62, 79, 207, 62, 160, 239, 172, 188, 5, 32, 9, 62, 249, 178, 11, 190, 192, 80, 22, 190, 126, 167, 213, 61, 52, 255, 148, 61, 126, 99, 73, 190, 154, 1, 206, 189, 189, 213, 21, 191, 203, 100, 149, 62, 33, 97, 140, 189, 25, 244, 144, 62, 253, 74, 92, 62, 10, 188, 47, 62, 97, 64, 90, 190, 164, 218, 181, 61, 239, 78, 233, 190, 191, 200, 61, 62, 46, 101, 69, 190, 4, 202, 201, 190, 140, 75, 90, 190, 164, 206, 12, 190, 124, 160, 86, 189, 216, 22, 159, 62, 117, 232, 1, 189, 184, 38, 157, 189, 207, 143, 112, 59, 193, 149, 207, 189, 23, 26, 158, 61, 7, 170, 157, 62, 192, 182, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 255, 231, 61, 190, 148, 181, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 12, 42, 191, 203, 185, 183, 191, 145, 151, 181, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 19, 5, 63, 40, 87, 186, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}