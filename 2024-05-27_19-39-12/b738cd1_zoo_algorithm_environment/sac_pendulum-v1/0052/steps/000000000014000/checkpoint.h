// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 3, 87, 63, 6, 214, 86, 191, 187, 156, 159, 190, 236, 203, 30, 63, 80, 213, 2, 63, 145, 245, 27, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 11, 33, 2, 62, 69, 201, 176, 62, 45, 133, 58, 191, 95, 150, 11, 189, 25, 211, 63, 191, 89, 132, 149, 62, 51, 117, 40, 62, 37, 198, 116, 191, 226, 107, 7, 190, 37, 80, 161, 63, 196, 65, 177, 62, 193, 84, 67, 62, 176, 28, 115, 61, 133, 156, 33, 58, 2, 86, 90, 190, 220, 31, 91, 62, 168, 167, 145, 191, 116, 146, 13, 62, 62, 220, 30, 191, 219, 150, 66, 191, 66, 160, 78, 190, 145, 81, 8, 191, 120, 103, 204, 62, 126, 102, 4, 63, 30, 133, 172, 62, 221, 89, 155, 190, 218, 240, 14, 63, 165, 27, 71, 191, 123, 205, 139, 191, 173, 77, 148, 57, 150, 129, 67, 62, 192, 223, 131, 191, 246, 74, 217, 62, 141, 136, 130, 61, 222, 50, 200, 191, 39, 118, 143, 190, 185, 187, 197, 62, 162, 47, 167, 60, 73, 144, 4, 63, 152, 59, 175, 190, 208, 86, 9, 191, 16, 23, 7, 63, 219, 219, 240, 62, 116, 176, 140, 191, 48, 1, 134, 190, 9, 3, 231, 61, 14, 175, 51, 191, 92, 248, 183, 62, 202, 111, 235, 62, 65, 222, 100, 63, 158, 217, 0, 63, 170, 132, 117, 62, 192, 208, 20, 63, 185, 240, 237, 190, 194, 93, 233, 62, 15, 255, 73, 191, 62, 220, 87, 190, 76, 168, 108, 191, 224, 200, 233, 190, 2, 101, 68, 188, 31, 255, 54, 191, 81, 230, 173, 61, 149, 246, 61, 62, 193, 77, 76, 62, 5, 216, 172, 191, 220, 34, 196, 190, 238, 192, 40, 62, 198, 246, 58, 191, 35, 0, 71, 62, 134, 42, 184, 190, 188, 32, 126, 189, 139, 96, 151, 62, 146, 68, 31, 63, 130, 132, 235, 62, 252, 69, 123, 62, 56, 21, 36, 190, 185, 35, 163, 63, 4, 43, 146, 62, 186, 34, 129, 190, 194, 1, 204, 63, 161, 126, 140, 62, 211, 245, 74, 62, 253, 163, 47, 62, 235, 128, 13, 63, 188, 179, 129, 62, 23, 107, 146, 63, 10, 93, 143, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 244, 31, 191, 79, 254, 3, 191, 48, 0, 19, 191, 225, 47, 205, 190, 226, 63, 248, 189, 9, 117, 233, 190, 135, 54, 133, 62, 179, 217, 90, 191, 175, 105, 13, 63, 170, 67, 114, 62, 218, 160, 18, 191, 18, 224, 70, 60, 244, 230, 208, 189, 118, 213, 183, 61, 244, 31, 188, 62, 168, 16, 150, 62, 1, 152, 226, 190, 226, 120, 8, 62, 205, 104, 14, 62, 130, 162, 147, 62, 150, 53, 131, 62, 230, 49, 30, 191, 166, 16, 93, 63, 54, 121, 17, 63, 130, 30, 216, 62, 136, 205, 235, 61, 197, 62, 182, 190, 139, 48, 13, 191, 104, 240, 109, 190, 107, 246, 108, 190, 124, 205, 201, 62, 16, 188, 9, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 154, 129, 62, 44, 57, 50, 191, 172, 51, 171, 60, 7, 124, 61, 62, 183, 104, 230, 61, 68, 98, 134, 190, 123, 143, 198, 61, 214, 51, 189, 62, 46, 220, 255, 62, 55, 250, 239, 190, 153, 245, 165, 61, 18, 205, 201, 190, 94, 254, 11, 60, 26, 37, 71, 62, 74, 198, 204, 62, 246, 226, 51, 190, 1, 8, 48, 62, 149, 149, 200, 62, 42, 195, 192, 62, 64, 227, 23, 58, 197, 36, 205, 189, 201, 117, 16, 191, 48, 162, 210, 61, 114, 107, 34, 62, 15, 92, 172, 61, 23, 20, 176, 61, 79, 132, 178, 190, 44, 96, 140, 191, 40, 75, 249, 56, 9, 216, 181, 61, 184, 225, 17, 62, 240, 220, 137, 191, 164, 202, 8, 63, 187, 119, 184, 188, 69, 4, 180, 58, 141, 178, 252, 62, 241, 188, 78, 62, 3, 19, 115, 190, 62, 135, 128, 190, 5, 129, 112, 60, 147, 83, 129, 62, 27, 104, 173, 190, 21, 9, 60, 62, 181, 206, 184, 189, 149, 2, 47, 189, 108, 148, 5, 61, 69, 228, 106, 61, 55, 106, 15, 190, 116, 173, 179, 61, 52, 220, 213, 62, 198, 227, 236, 61, 255, 118, 78, 62, 167, 237, 218, 61, 180, 168, 100, 190, 215, 245, 224, 188, 11, 82, 180, 61, 68, 134, 216, 190, 99, 37, 166, 190, 175, 216, 228, 189, 221, 26, 170, 190, 216, 26, 176, 62, 193, 50, 0, 63, 205, 135, 61, 62, 60, 56, 148, 190, 71, 23, 177, 186, 79, 84, 104, 61, 247, 157, 75, 60, 197, 230, 162, 190, 165, 162, 152, 62, 26, 125, 70, 63, 57, 91, 103, 189, 233, 62, 228, 61, 42, 254, 112, 62, 187, 198, 178, 62, 4, 33, 40, 61, 193, 191, 137, 61, 52, 143, 134, 190, 101, 85, 48, 62, 89, 2, 80, 189, 28, 210, 87, 61, 36, 217, 254, 61, 249, 152, 22, 191, 30, 231, 98, 62, 181, 55, 12, 190, 215, 50, 75, 190, 90, 190, 36, 63, 109, 149, 77, 190, 195, 130, 180, 189, 191, 125, 37, 190, 17, 141, 187, 62, 86, 57, 222, 61, 65, 104, 193, 62, 56, 136, 202, 61, 52, 64, 40, 190, 50, 240, 120, 62, 233, 111, 134, 60, 213, 249, 230, 62, 232, 212, 75, 61, 12, 215, 13, 62, 248, 110, 16, 190, 210, 88, 171, 62, 152, 80, 6, 63, 121, 214, 160, 62, 121, 234, 37, 62, 198, 87, 54, 62, 69, 85, 160, 62, 252, 143, 50, 62, 209, 153, 19, 61, 208, 32, 191, 60, 145, 2, 68, 62, 1, 157, 104, 61, 226, 148, 79, 62, 98, 144, 205, 61, 169, 36, 159, 189, 208, 82, 170, 62, 78, 167, 155, 188, 4, 23, 85, 190, 62, 141, 105, 63, 39, 162, 105, 190, 77, 68, 44, 190, 13, 12, 102, 62, 108, 127, 97, 62, 101, 218, 184, 61, 4, 166, 69, 60, 156, 1, 177, 189, 189, 13, 251, 190, 223, 124, 155, 62, 210, 228, 144, 189, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 28, 114, 78, 188, 69, 52, 64, 189, 119, 39, 112, 189, 143, 149, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 187, 34, 134, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 41, 136, 183, 189, 104, 226, 235, 59, 139, 92, 241, 189, 104, 93, 39, 190, 68, 24, 14, 62, 250, 204, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 238, 98, 59, 189, 69, 79, 236, 61, 100, 172, 87, 189, 113, 97, 129, 189, 134, 61, 147, 62, 220, 18, 75, 188, 114, 120, 58, 61, 240, 178, 46, 62, 151, 93, 210, 189, 193, 130, 32, 191, 105, 239, 116, 62, 21, 194, 240, 62, 59, 30, 247, 58, 242, 82, 125, 189, 94, 42, 200, 61, 103, 251, 220, 61, 91, 142, 14, 191, 14, 10, 4, 62, 220, 9, 85, 190, 201, 71, 178, 189, 214, 75, 35, 62, 192, 130, 140, 62, 244, 178, 127, 189, 167, 242, 30, 190, 109, 88, 169, 61, 70, 135, 159, 190, 215, 192, 90, 190, 214, 38, 110, 62, 39, 58, 4, 62, 250, 107, 27, 61, 205, 116, 69, 190, 236, 148, 1, 62, 33, 171, 117, 190, 122, 210, 199, 190, 40, 243, 26, 190, 234, 223, 170, 190, 94, 101, 242, 189, 173, 92, 139, 188, 115, 132, 242, 61, 113, 152, 240, 60, 208, 110, 34, 61, 114, 140, 245, 61, 115, 33, 46, 60, 118, 123, 191, 189, 107, 113, 133, 60, 51, 109, 185, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 139, 197, 234, 61, 107, 229, 206, 189, 148, 86, 40, 61, 240, 54, 226, 189, 225, 141, 26, 190, 142, 155, 100, 189, 177, 101, 125, 60, 216, 144, 37, 190, 2, 22, 151, 189, 174, 182, 51, 189, 27, 189, 52, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 148, 97, 39, 62, 112, 139, 84, 189, 181, 6, 205, 189, 22, 46, 21, 60, 79, 205, 166, 191, 102, 194, 214, 61, 220, 211, 63, 60, 179, 52, 92, 190, 0, 186, 27, 191, 85, 93, 170, 190, 8, 120, 193, 62, 153, 148, 192, 190, 107, 73, 22, 191, 245, 89, 56, 62, 91, 199, 147, 190, 221, 120, 223, 61, 189, 109, 45, 190, 6, 86, 131, 190, 5, 157, 232, 190, 152, 55, 225, 61, 50, 66, 206, 190, 184, 2, 26, 191, 66, 63, 157, 189, 1, 253, 253, 61, 35, 47, 8, 63, 182, 62, 78, 58, 5, 23, 40, 62, 152, 17, 54, 190, 19, 94, 6, 190, 213, 23, 184, 60, 97, 22, 141, 59, 93, 8, 103, 190, 75, 3, 67, 191, 98, 247, 164, 190, 98, 129, 82, 190, 7, 211, 73, 62, 122, 184, 134, 190, 103, 82, 93, 61, 49, 41, 239, 187, 21, 5, 60, 191, 180, 63, 59, 190, 205, 182, 66, 61, 252, 157, 117, 189, 198, 128, 60, 190, 33, 104, 50, 62, 251, 71, 152, 61, 62, 2, 27, 191, 203, 118, 128, 61, 54, 142, 37, 62, 42, 124, 55, 190, 71, 70, 211, 61, 239, 162, 201, 61, 85, 63, 26, 189, 51, 93, 232, 190, 248, 78, 210, 189, 223, 229, 158, 191, 96, 70, 219, 190, 117, 53, 72, 62, 30, 30, 85, 62, 215, 49, 190, 62, 70, 14, 207, 190, 9, 99, 64, 63, 30, 189, 20, 63, 0, 188, 68, 61, 251, 129, 193, 191, 253, 139, 130, 190, 159, 136, 234, 189, 39, 156, 75, 190, 248, 245, 91, 191, 69, 92, 142, 189, 110, 131, 5, 62, 235, 218, 139, 189, 189, 186, 234, 190, 223, 45, 137, 191, 22, 2, 185, 62, 197, 242, 232, 190, 96, 8, 152, 61, 11, 224, 230, 189, 66, 96, 211, 189, 249, 95, 136, 62, 219, 220, 143, 190, 44, 31, 170, 61, 211, 65, 122, 190, 48, 153, 172, 61, 42, 109, 9, 191, 45, 116, 195, 190, 104, 53, 106, 60, 33, 32, 159, 61, 137, 78, 215, 62, 186, 226, 227, 191, 116, 3, 57, 190, 126, 85, 41, 191, 59, 190, 47, 190, 193, 83, 189, 62, 87, 7, 226, 60, 215, 219, 234, 189, 12, 88, 44, 191, 162, 209, 86, 191, 103, 87, 164, 188, 155, 131, 47, 62, 89, 48, 111, 191, 198, 131, 120, 190, 73, 139, 1, 61, 11, 147, 122, 62, 119, 59, 38, 190, 39, 197, 191, 61, 12, 217, 129, 62, 245, 174, 139, 189, 90, 190, 16, 190, 199, 146, 52, 190, 208, 82, 1, 191, 251, 71, 87, 190, 223, 103, 57, 190, 157, 20, 157, 61, 31, 225, 63, 191, 248, 9, 172, 61, 236, 225, 133, 189, 216, 113, 181, 190, 203, 197, 66, 61, 72, 68, 139, 62, 233, 239, 119, 61, 36, 132, 6, 188, 249, 139, 40, 62, 52, 117, 23, 190, 141, 77, 135, 190, 32, 157, 21, 190, 208, 254, 46, 190, 248, 8, 90, 189, 189, 181, 227, 190, 123, 150, 188, 190, 4, 25, 30, 62, 131, 142, 1, 62, 155, 82, 49, 190, 148, 20, 205, 190, 93, 159, 13, 190, 106, 150, 80, 189, 97, 184, 166, 61, 173, 0, 199, 189, 255, 164, 250, 189, 246, 83, 36, 189, 129, 139, 137, 62, 249, 7, 59, 190, 218, 248, 7, 62, 130, 184, 120, 190, 0, 0, 187, 62, 0, 5, 70, 62, 252, 57, 237, 62, 40, 79, 220, 189, 35, 139, 110, 61, 74, 190, 113, 62, 235, 24, 55, 62, 252, 108, 45, 190, 217, 86, 5, 191, 126, 205, 12, 191, 26, 60, 41, 62, 78, 44, 108, 62, 12, 202, 172, 61, 131, 204, 68, 190, 84, 121, 24, 190, 198, 27, 61, 191, 190, 1, 62, 60, 42, 139, 152, 61, 128, 171, 19, 62, 14, 9, 48, 191, 18, 120, 198, 62, 11, 156, 190, 61, 251, 218, 173, 188, 19, 177, 73, 62, 183, 137, 82, 190, 118, 247, 18, 188, 191, 213, 241, 189, 69, 108, 14, 63, 177, 168, 28, 191, 180, 104, 130, 190, 112, 186, 24, 188, 89, 54, 91, 61, 95, 85, 169, 189, 246, 142, 157, 190, 75, 159, 162, 189, 135, 143, 110, 190, 45, 212, 58, 187, 193, 161, 83, 62, 37, 12, 173, 190, 200, 200, 138, 190, 232, 174, 20, 190, 104, 206, 184, 62, 120, 98, 66, 190, 103, 207, 44, 190, 89, 8, 221, 189, 70, 50, 191, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 128, 81, 153, 190, 165, 142, 102, 60, 25, 213, 34, 191, 90, 175, 11, 189, 46, 44, 103, 190, 157, 32, 160, 60, 83, 25, 1, 188, 186, 227, 141, 61, 163, 3, 150, 190, 6, 200, 85, 62, 210, 110, 155, 62, 161, 23, 235, 189, 243, 37, 39, 61, 141, 65, 236, 62, 250, 229, 143, 62, 242, 201, 220, 62, 18, 180, 81, 190, 6, 221, 210, 61, 124, 233, 144, 61, 76, 233, 16, 62, 216, 243, 139, 191, 150, 153, 158, 190, 33, 252, 82, 190, 54, 237, 17, 62, 165, 150, 145, 61, 132, 27, 16, 62, 85, 58, 207, 62, 141, 169, 84, 190, 162, 72, 127, 191, 1, 150, 238, 190, 60, 181, 178, 190, 202, 44, 92, 190, 47, 44, 87, 191, 234, 46, 100, 191, 167, 142, 143, 60, 83, 183, 48, 190, 33, 254, 129, 190, 189, 93, 116, 191, 115, 88, 43, 62, 38, 154, 157, 62, 52, 219, 247, 190, 197, 79, 159, 190, 221, 201, 177, 62, 193, 80, 62, 191, 12, 101, 166, 61, 211, 156, 58, 63, 223, 93, 59, 191, 234, 199, 134, 62, 140, 49, 46, 61, 208, 56, 158, 189, 249, 93, 194, 190, 190, 85, 185, 190, 194, 60, 132, 191, 63, 181, 162, 62, 139, 190, 102, 189, 72, 12, 4, 63, 78, 61, 129, 190, 93, 78, 239, 189, 241, 239, 238, 62, 6, 18, 151, 62, 169, 151, 238, 189, 173, 164, 159, 191, 237, 43, 4, 190, 170, 208, 1, 191, 135, 215, 18, 63, 226, 14, 79, 61, 79, 66, 189, 189, 125, 104, 23, 62, 147, 145, 36, 62, 238, 140, 84, 62, 75, 228, 5, 190, 44, 144, 24, 190, 138, 72, 32, 62, 233, 179, 114, 62, 244, 38, 55, 190, 240, 168, 69, 189, 36, 120, 124, 190, 116, 108, 191, 189, 82, 119, 114, 62, 177, 191, 33, 62, 70, 167, 188, 61, 0, 44, 77, 62, 175, 23, 151, 62, 208, 48, 99, 62, 242, 174, 204, 188, 8, 8, 234, 61, 52, 168, 40, 191, 177, 166, 27, 62, 77, 250, 16, 60, 115, 76, 25, 61, 227, 228, 132, 190, 126, 70, 28, 189, 47, 128, 5, 191, 202, 60, 152, 189, 185, 247, 54, 61, 117, 8, 15, 62, 181, 54, 205, 190, 199, 69, 223, 189, 82, 58, 236, 189, 48, 211, 247, 188, 180, 129, 191, 190, 86, 193, 210, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 57, 68, 133, 190, 195, 101, 179, 61, 198, 51, 15, 188, 235, 170, 61, 190, 21, 148, 141, 61, 116, 200, 243, 61, 109, 107, 222, 190, 146, 174, 96, 190, 4, 255, 150, 187, 164, 162, 185, 61, 105, 153, 163, 61, 162, 228, 234, 189, 194, 155, 47, 190, 177, 10, 236, 61, 103, 161, 2, 62, 183, 229, 164, 188, 69, 165, 221, 191, 39, 88, 145, 189, 6, 115, 192, 62, 72, 62, 79, 61, 118, 101, 220, 190, 179, 106, 22, 62, 57, 148, 226, 61, 167, 101, 23, 191, 245, 154, 216, 190, 170, 253, 75, 191, 83, 134, 169, 61, 15, 88, 236, 189, 171, 222, 171, 190, 9, 0, 105, 62, 133, 25, 210, 60, 197, 50, 219, 190, 109, 141, 24, 188, 225, 131, 235, 188, 84, 152, 75, 189, 225, 29, 130, 190, 207, 60, 69, 62, 198, 132, 124, 190, 179, 13, 111, 61, 10, 84, 222, 189, 63, 196, 221, 189, 243, 160, 206, 59, 116, 84, 233, 189, 55, 90, 88, 189, 245, 140, 139, 62, 213, 235, 71, 59, 99, 130, 182, 62, 96, 176, 126, 61, 0, 101, 133, 62, 78, 213, 11, 62, 242, 103, 85, 62, 96, 118, 151, 191, 28, 179, 240, 190, 200, 156, 151, 190, 116, 100, 91, 190, 43, 183, 239, 189, 182, 14, 192, 189, 0, 0, 142, 61, 212, 147, 31, 62, 105, 90, 36, 190, 221, 131, 137, 190, 139, 94, 3, 189, 193, 184, 5, 61, 14, 67, 158, 190, 116, 147, 210, 190, 176, 157, 36, 62, 230, 159, 48, 61, 92, 124, 195, 188, 134, 241, 227, 62, 121, 112, 136, 190, 252, 84, 195, 60, 242, 50, 56, 62, 78, 13, 246, 61, 210, 6, 129, 190, 207, 149, 18, 190, 93, 198, 73, 191, 145, 127, 225, 61, 212, 146, 9, 63, 190, 54, 86, 62, 2, 195, 28, 60, 226, 225, 32, 189, 216, 211, 191, 190, 51, 228, 48, 62, 177, 251, 240, 188, 69, 236, 238, 190, 101, 212, 229, 61, 222, 121, 158, 189, 153, 129, 147, 62, 162, 136, 3, 189, 57, 121, 186, 189, 221, 132, 26, 190, 248, 186, 153, 190, 123, 246, 20, 191, 12, 159, 254, 61, 73, 189, 203, 62, 200, 90, 236, 190, 31, 65, 67, 190, 132, 82, 160, 59, 64, 168, 135, 190, 157, 98, 184, 61, 228, 254, 187, 62, 49, 7, 2, 190, 36, 23, 48, 62, 36, 222, 10, 62, 220, 195, 147, 190, 117, 212, 154, 188, 31, 128, 154, 190, 151, 34, 144, 61, 127, 81, 154, 62, 182, 198, 86, 62, 104, 144, 38, 61, 224, 232, 140, 190, 234, 49, 4, 187, 61, 48, 196, 61, 111, 118, 31, 190, 129, 248, 93, 190, 31, 132, 25, 191, 124, 128, 234, 190, 67, 183, 44, 61, 46, 203, 90, 61, 254, 15, 170, 190, 247, 17, 93, 190, 204, 60, 226, 189, 14, 6, 228, 189, 45, 54, 38, 62, 119, 78, 226, 190, 234, 214, 100, 62, 107, 16, 13, 190, 124, 127, 31, 61, 71, 92, 237, 190, 48, 31, 177, 187, 253, 150, 71, 61, 28, 210, 219, 61, 210, 158, 53, 62, 205, 174, 142, 62, 127, 218, 5, 190, 118, 184, 122, 189, 128, 2, 82, 61, 67, 16, 67, 189, 200, 48, 82, 61, 237, 254, 131, 62, 201, 67, 158, 191, 218, 239, 155, 61, 95, 19, 119, 61, 196, 216, 132, 188, 78, 180, 157, 62, 42, 68, 91, 190, 203, 44, 172, 191, 166, 224, 217, 190, 176, 219, 165, 190, 152, 5, 243, 61, 191, 213, 102, 191, 228, 15, 124, 190, 133, 80, 97, 188, 112, 26, 72, 60, 68, 84, 31, 190, 235, 111, 139, 61, 173, 32, 48, 62, 221, 96, 171, 62, 53, 39, 2, 191, 150, 7, 170, 61, 43, 230, 103, 190, 189, 219, 212, 61, 54, 20, 205, 189, 67, 36, 24, 62, 41, 243, 91, 62, 198, 250, 160, 62, 171, 154, 3, 190, 77, 27, 149, 60, 131, 117, 55, 61, 104, 189, 245, 61, 117, 71, 53, 188, 121, 4, 168, 61, 37, 160, 169, 190, 74, 24, 37, 189, 196, 138, 248, 61, 119, 221, 140, 60, 45, 202, 188, 59, 186, 106, 19, 190, 45, 159, 200, 190, 6, 11, 72, 187, 52, 216, 65, 62, 28, 207, 229, 61, 228, 180, 87, 190, 186, 237, 42, 62, 66, 24, 203, 189, 248, 91, 82, 61, 59, 253, 127, 62, 203, 169, 7, 61, 151, 61, 155, 190, 203, 107, 154, 189, 44, 1, 95, 62, 183, 186, 156, 61, 63, 37, 159, 189, 112, 171, 138, 189, 113, 112, 176, 189, 10, 42, 118, 61, 19, 88, 97, 61, 48, 183, 166, 189, 134, 224, 245, 189, 144, 103, 33, 61, 210, 95, 172, 62, 180, 202, 165, 188, 161, 73, 116, 62, 101, 230, 79, 62, 40, 195, 14, 191, 222, 191, 239, 189, 74, 226, 140, 62, 71, 196, 224, 188, 118, 159, 96, 190, 133, 118, 140, 61, 248, 238, 36, 190, 130, 117, 105, 62, 123, 243, 197, 62, 107, 226, 1, 62, 116, 69, 8, 62, 248, 25, 98, 191, 79, 53, 18, 61, 222, 47, 35, 190, 37, 62, 15, 62, 180, 188, 18, 62, 49, 76, 144, 63, 30, 76, 241, 62, 21, 22, 238, 190, 247, 242, 59, 61, 71, 165, 219, 62, 55, 249, 159, 189, 74, 244, 133, 62, 103, 128, 152, 60, 182, 152, 105, 62, 36, 145, 79, 190, 140, 174, 6, 62, 180, 187, 152, 61, 154, 7, 33, 191, 61, 189, 5, 61, 219, 255, 238, 61, 238, 58, 241, 61, 23, 160, 165, 188, 33, 237, 83, 190, 172, 84, 230, 61, 52, 221, 59, 190, 226, 172, 7, 62, 189, 247, 150, 189, 99, 208, 205, 62, 123, 95, 14, 189, 101, 25, 203, 190, 13, 111, 10, 62, 71, 34, 255, 61, 177, 142, 200, 190, 77, 223, 196, 61, 13, 221, 172, 189, 5, 225, 98, 191, 156, 127, 191, 190, 193, 227, 79, 190, 213, 255, 31, 190, 44, 165, 147, 189, 211, 98, 201, 189, 248, 5, 222, 61, 109, 87, 91, 61, 231, 249, 83, 188, 192, 12, 68, 62, 247, 94, 3, 190, 18, 119, 93, 189, 54, 79, 138, 61, 79, 105, 12, 61, 231, 161, 66, 191, 165, 53, 33, 188, 34, 109, 17, 191, 91, 68, 95, 189, 101, 231, 219, 189, 184, 15, 200, 61, 44, 97, 250, 60, 29, 212, 169, 190, 39, 5, 213, 62, 3, 59, 5, 63, 221, 70, 36, 61, 151, 245, 51, 191, 18, 100, 118, 190, 217, 177, 18, 190, 114, 194, 58, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 55, 63, 152, 62, 152, 90, 116, 62, 98, 95, 207, 189, 93, 103, 130, 190, 74, 238, 1, 190, 22, 240, 63, 190, 19, 31, 171, 62, 29, 21, 232, 190, 86, 209, 133, 190, 151, 111, 46, 191, 169, 149, 52, 190, 168, 3, 178, 60, 143, 193, 50, 190, 75, 184, 91, 61, 60, 102, 8, 63, 155, 92, 19, 62, 105, 184, 102, 190, 71, 113, 37, 63, 41, 111, 6, 190, 232, 152, 20, 62, 59, 231, 46, 186, 211, 218, 119, 190, 103, 202, 33, 191, 143, 237, 193, 186, 3, 238, 175, 62, 128, 214, 164, 60, 245, 92, 217, 189, 228, 185, 172, 62, 106, 84, 174, 189, 105, 172, 172, 62, 134, 31, 21, 62, 100, 200, 60, 62, 22, 232, 174, 190, 137, 163, 81, 189, 145, 74, 51, 61, 81, 34, 88, 189, 200, 38, 152, 62, 69, 180, 107, 190, 167, 191, 77, 190, 185, 145, 246, 189, 79, 186, 222, 61, 207, 123, 191, 189, 110, 223, 145, 61, 166, 7, 88, 190, 138, 49, 245, 62, 178, 111, 231, 61, 46, 226, 255, 62, 249, 250, 187, 188, 225, 170, 90, 62, 2, 180, 116, 62, 49, 223, 142, 62, 216, 37, 128, 189, 46, 36, 8, 191, 212, 232, 73, 191, 146, 126, 6, 62, 69, 76, 116, 62, 37, 47, 221, 61, 159, 38, 101, 190, 144, 203, 224, 189, 193, 191, 73, 190, 157, 109, 100, 62, 9, 251, 126, 62, 120, 14, 48, 62, 69, 185, 250, 188, 45, 11, 128, 189, 117, 55, 9, 190, 79, 25, 39, 188, 214, 42, 35, 60, 59, 249, 90, 62, 176, 109, 170, 62, 53, 23, 77, 189, 54, 7, 191, 190, 170, 45, 14, 62, 220, 192, 99, 190, 64, 246, 24, 61, 119, 160, 190, 188, 68, 88, 134, 62, 22, 211, 20, 62, 143, 57, 242, 61, 205, 154, 1, 62, 160, 194, 88, 59, 56, 4, 86, 62, 199, 88, 245, 60, 219, 124, 65, 62, 216, 105, 79, 190, 37, 28, 162, 61, 227, 33, 223, 60, 222, 81, 1, 62, 255, 93, 190, 189, 147, 132, 156, 189, 68, 168, 230, 61, 215, 160, 188, 190, 105, 143, 222, 61, 100, 144, 6, 63, 75, 118, 192, 189, 18, 213, 213, 189, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 230, 151, 250, 189, 168, 188, 46, 190, 46, 143, 43, 62, 76, 203, 168, 61, 70, 195, 252, 61, 183, 143, 130, 191, 224, 141, 248, 189, 74, 148, 65, 190, 68, 226, 43, 190, 190, 183, 117, 62, 60, 248, 114, 190, 57, 119, 169, 62, 8, 52, 94, 189, 82, 44, 30, 191, 175, 99, 158, 190, 249, 194, 174, 62, 120, 214, 190, 190, 203, 81, 143, 62, 195, 253, 182, 60, 193, 31, 57, 191, 205, 188, 33, 190, 190, 234, 26, 62, 160, 12, 228, 61, 34, 172, 233, 191, 49, 19, 20, 191, 112, 160, 52, 188, 96, 162, 22, 190, 194, 101, 174, 61, 18, 201, 73, 62, 195, 144, 52, 62, 61, 139, 59, 190, 33, 252, 250, 188, 190, 178, 5, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 228, 231, 150, 189, 209, 119, 152, 189, 69, 66, 254, 189, 213, 44, 139, 60, 126, 165, 0, 190, 124, 239, 131, 189, 188, 222, 76, 190, 6, 232, 25, 190, 122, 123, 98, 187, 121, 142, 246, 58, 219, 186, 24, 62, 104, 52, 217, 60, 58, 77, 227, 189, 87, 206, 87, 188, 81, 29, 205, 189, 175, 0, 244, 189, 173, 191, 244, 189, 114, 128, 176, 188, 9, 100, 253, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 89, 192, 28, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 252, 132, 62, 210, 182, 37, 189, 249, 41, 81, 190, 75, 17, 234, 188, 51, 92, 87, 187, 207, 189, 100, 189, 156, 156, 143, 189, 251, 189, 83, 62, 138, 7, 124, 59, 4, 141, 144, 62, 113, 151, 207, 61, 178, 181, 48, 62, 10, 150, 177, 190, 79, 105, 141, 61, 63, 126, 145, 62, 69, 100, 87, 62, 52, 34, 75, 189, 43, 209, 143, 62, 133, 191, 105, 61, 77, 64, 68, 62, 84, 174, 144, 62, 11, 97, 83, 62, 36, 161, 86, 62, 237, 86, 174, 61, 220, 134, 74, 61, 73, 149, 51, 190, 252, 13, 174, 189, 132, 224, 149, 189, 25, 120, 6, 62, 163, 116, 88, 190, 164, 200, 41, 189, 14, 175, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 9, 84, 63, 134, 157, 192, 62, 247, 202, 159, 190, 145, 97, 219, 190, 129, 173, 181, 188, 113, 228, 144, 62, 247, 177, 62, 189, 141, 203, 143, 191, 148, 122, 160, 191, 66, 229, 52, 191, 184, 162, 135, 191, 42, 219, 32, 63, 130, 251, 12, 191, 156, 148, 23, 191, 160, 15, 181, 191, 57, 26, 129, 62, 186, 177, 66, 63, 96, 42, 80, 190, 106, 137, 190, 190, 150, 146, 173, 190, 80, 237, 183, 62, 155, 221, 183, 61, 250, 234, 73, 62, 65, 171, 168, 190, 232, 92, 18, 191, 252, 181, 22, 62, 151, 7, 224, 62, 194, 45, 189, 62, 163, 118, 10, 62, 188, 36, 246, 61, 202, 237, 71, 63, 48, 98, 57, 189, 111, 235, 170, 62, 211, 154, 9, 189, 234, 146, 232, 61, 200, 112, 9, 190, 192, 80, 22, 190, 255, 203, 195, 61, 29, 92, 147, 61, 44, 159, 137, 59, 181, 93, 243, 188, 241, 200, 230, 190, 55, 220, 22, 63, 170, 96, 98, 59, 190, 235, 138, 62, 127, 85, 161, 62, 16, 72, 45, 189, 252, 87, 115, 190, 9, 31, 90, 61, 198, 164, 214, 190, 16, 5, 130, 61, 233, 38, 30, 190, 34, 226, 0, 191, 163, 30, 100, 190, 83, 94, 4, 190, 19, 100, 39, 187, 209, 68, 172, 62, 117, 232, 1, 189, 194, 7, 170, 189, 19, 172, 76, 61, 230, 37, 213, 189, 23, 26, 158, 61, 9, 234, 173, 62, 192, 182, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 192, 210, 61, 79, 171, 158, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {139, 252, 250, 63, 49, 107, 23, 190, 221, 156, 2, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 156, 196, 190, 13, 197, 178, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}