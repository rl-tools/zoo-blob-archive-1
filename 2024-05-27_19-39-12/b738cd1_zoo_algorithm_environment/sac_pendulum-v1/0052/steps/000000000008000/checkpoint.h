// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 77, 82, 63, 252, 154, 68, 191, 73, 60, 165, 190, 62, 108, 18, 63, 102, 129, 221, 62, 107, 57, 33, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 138, 68, 146, 61, 127, 125, 177, 62, 200, 130, 56, 191, 232, 23, 164, 61, 237, 140, 11, 191, 83, 57, 251, 62, 43, 59, 156, 62, 0, 93, 68, 191, 3, 225, 7, 190, 84, 101, 149, 63, 91, 95, 4, 63, 50, 229, 42, 62, 205, 199, 79, 190, 153, 128, 49, 190, 231, 67, 3, 190, 43, 42, 115, 62, 133, 104, 141, 191, 29, 70, 23, 62, 63, 120, 22, 191, 44, 126, 44, 191, 22, 155, 84, 190, 47, 90, 18, 191, 209, 114, 80, 62, 189, 7, 16, 63, 167, 149, 164, 62, 112, 104, 140, 190, 84, 21, 19, 63, 240, 176, 34, 191, 117, 251, 95, 191, 125, 204, 168, 189, 161, 59, 137, 62, 31, 98, 136, 191, 66, 252, 240, 62, 195, 74, 82, 61, 22, 145, 178, 191, 204, 86, 145, 190, 55, 210, 202, 62, 108, 206, 61, 61, 207, 57, 15, 63, 116, 59, 213, 190, 170, 189, 242, 190, 1, 57, 22, 63, 21, 220, 7, 63, 151, 106, 112, 191, 236, 110, 137, 190, 75, 123, 22, 62, 27, 166, 71, 191, 166, 92, 208, 62, 73, 182, 207, 62, 81, 130, 123, 63, 248, 253, 241, 62, 118, 19, 141, 62, 232, 101, 10, 63, 179, 159, 244, 190, 14, 98, 253, 62, 84, 65, 72, 191, 219, 40, 54, 190, 71, 0, 81, 191, 196, 254, 218, 190, 158, 82, 102, 189, 57, 66, 37, 191, 197, 199, 33, 62, 186, 121, 84, 62, 44, 215, 143, 62, 207, 16, 146, 191, 136, 167, 223, 190, 43, 135, 214, 61, 11, 255, 59, 191, 46, 143, 76, 62, 5, 49, 215, 190, 145, 121, 7, 189, 63, 47, 142, 62, 8, 42, 7, 63, 98, 246, 186, 62, 60, 86, 113, 62, 136, 103, 133, 190, 33, 183, 87, 63, 41, 148, 188, 62, 146, 152, 151, 190, 143, 48, 173, 63, 128, 168, 148, 62, 89, 213, 10, 62, 140, 129, 145, 62, 232, 179, 44, 63, 157, 115, 137, 62, 201, 212, 139, 63, 103, 189, 125, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 251, 0, 191, 146, 187, 226, 190, 48, 0, 19, 191, 106, 46, 109, 190, 191, 253, 23, 190, 142, 155, 229, 190, 126, 93, 162, 62, 211, 166, 75, 191, 249, 39, 0, 63, 2, 145, 32, 62, 249, 10, 20, 191, 215, 53, 209, 61, 217, 103, 229, 189, 243, 6, 7, 62, 73, 126, 195, 62, 30, 134, 186, 62, 88, 87, 201, 190, 22, 232, 55, 62, 100, 222, 3, 62, 220, 52, 207, 62, 92, 108, 130, 62, 60, 17, 17, 191, 225, 41, 61, 63, 83, 60, 219, 62, 176, 6, 243, 62, 245, 48, 68, 62, 63, 104, 157, 190, 186, 77, 4, 191, 179, 149, 137, 190, 184, 221, 252, 189, 152, 215, 244, 62, 51, 39, 124, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 18, 112, 62, 35, 223, 42, 191, 172, 51, 171, 60, 96, 202, 32, 62, 205, 167, 38, 62, 156, 136, 36, 190, 186, 154, 228, 60, 67, 176, 69, 62, 101, 209, 239, 62, 106, 232, 221, 190, 22, 28, 30, 62, 216, 213, 208, 190, 29, 227, 6, 61, 12, 191, 96, 62, 38, 88, 184, 62, 228, 203, 102, 190, 41, 111, 87, 62, 83, 75, 180, 62, 57, 248, 203, 62, 19, 100, 137, 189, 37, 72, 35, 190, 49, 25, 8, 191, 220, 17, 87, 61, 19, 158, 168, 61, 156, 121, 155, 61, 2, 125, 176, 61, 178, 149, 159, 190, 103, 216, 81, 191, 22, 114, 0, 62, 191, 150, 174, 61, 82, 36, 240, 61, 49, 169, 139, 191, 170, 54, 187, 62, 25, 6, 190, 58, 69, 4, 180, 58, 71, 219, 219, 62, 124, 114, 91, 62, 243, 128, 76, 190, 213, 116, 56, 190, 229, 234, 24, 190, 147, 219, 129, 62, 21, 82, 125, 190, 216, 103, 98, 62, 140, 186, 179, 189, 233, 51, 50, 60, 128, 222, 61, 61, 76, 170, 79, 189, 110, 120, 17, 190, 245, 202, 218, 61, 180, 84, 187, 62, 103, 54, 2, 62, 190, 150, 79, 62, 222, 183, 139, 61, 106, 170, 134, 190, 6, 92, 127, 60, 26, 216, 35, 61, 170, 64, 219, 190, 18, 2, 165, 190, 1, 34, 195, 189, 69, 74, 16, 190, 208, 32, 149, 62, 116, 179, 173, 62, 141, 254, 57, 62, 25, 52, 131, 190, 154, 60, 75, 59, 248, 56, 30, 61, 247, 157, 75, 60, 196, 198, 30, 191, 223, 49, 152, 62, 221, 27, 5, 63, 171, 30, 36, 189, 233, 62, 228, 61, 45, 119, 131, 62, 56, 115, 56, 62, 5, 99, 204, 60, 20, 119, 166, 61, 157, 211, 56, 190, 114, 21, 55, 62, 245, 23, 12, 62, 221, 211, 153, 61, 194, 117, 250, 61, 179, 249, 252, 190, 56, 42, 106, 62, 44, 15, 254, 189, 11, 178, 93, 190, 50, 246, 227, 62, 4, 138, 18, 190, 250, 118, 45, 189, 48, 152, 5, 190, 132, 98, 202, 62, 41, 35, 223, 61, 107, 61, 61, 62, 240, 230, 210, 61, 216, 191, 196, 189, 237, 176, 131, 62, 85, 25, 60, 189, 6, 5, 185, 62, 183, 156, 147, 61, 12, 215, 13, 62, 210, 8, 114, 189, 141, 54, 161, 62, 67, 74, 227, 62, 175, 214, 150, 62, 212, 179, 172, 62, 38, 231, 22, 62, 99, 190, 119, 62, 180, 4, 29, 62, 138, 119, 96, 61, 152, 158, 197, 188, 5, 202, 38, 62, 50, 170, 2, 61, 49, 59, 113, 62, 2, 33, 177, 61, 18, 111, 0, 190, 140, 119, 159, 62, 7, 82, 191, 60, 242, 157, 18, 190, 12, 238, 98, 63, 193, 192, 80, 190, 62, 172, 177, 189, 14, 146, 44, 62, 60, 78, 78, 62, 88, 131, 179, 61, 173, 120, 119, 189, 57, 246, 23, 189, 10, 0, 179, 190, 35, 80, 169, 62, 208, 180, 100, 187, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 28, 102, 196, 187, 69, 52, 64, 189, 119, 39, 112, 189, 143, 149, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 63, 159, 131, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 56, 17, 183, 189, 61, 2, 116, 60, 139, 92, 241, 189, 225, 181, 36, 190, 49, 126, 15, 62, 128, 135, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 69, 86, 56, 189, 114, 254, 241, 61, 100, 172, 87, 189, 245, 214, 122, 189, 169, 42, 120, 62, 218, 38, 2, 190, 114, 120, 58, 61, 100, 160, 210, 61, 78, 173, 62, 61, 103, 101, 3, 191, 187, 34, 101, 62, 13, 95, 245, 61, 221, 182, 154, 60, 62, 131, 174, 189, 198, 244, 13, 62, 17, 150, 67, 61, 161, 137, 184, 190, 35, 232, 243, 61, 238, 10, 74, 190, 153, 116, 8, 190, 139, 125, 137, 189, 174, 2, 143, 62, 156, 32, 156, 189, 35, 134, 44, 190, 182, 3, 66, 61, 111, 206, 171, 190, 204, 138, 58, 190, 232, 230, 50, 62, 205, 172, 12, 62, 136, 53, 30, 61, 176, 231, 47, 190, 217, 196, 200, 189, 9, 29, 26, 190, 150, 240, 137, 190, 178, 122, 58, 190, 15, 109, 173, 190, 59, 245, 238, 189, 173, 92, 139, 188, 115, 132, 242, 61, 185, 57, 60, 61, 208, 110, 34, 61, 114, 140, 245, 61, 129, 1, 89, 60, 84, 178, 190, 189, 107, 113, 133, 60, 218, 41, 183, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 189, 243, 232, 61, 107, 229, 206, 189, 148, 86, 40, 61, 166, 166, 223, 189, 225, 141, 26, 190, 45, 118, 83, 189, 63, 89, 16, 61, 216, 144, 37, 190, 17, 205, 147, 189, 123, 99, 39, 189, 218, 31, 51, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 178, 121, 42, 62, 170, 94, 61, 189, 181, 6, 205, 189, 172, 198, 102, 60, 207, 186, 69, 191, 101, 89, 105, 62, 220, 211, 63, 60, 105, 90, 86, 190, 23, 198, 16, 191, 8, 90, 170, 190, 12, 190, 155, 62, 235, 129, 133, 190, 98, 65, 33, 191, 254, 218, 54, 62, 137, 21, 133, 189, 209, 156, 184, 61, 11, 7, 43, 61, 205, 29, 18, 191, 246, 218, 160, 189, 89, 192, 10, 62, 112, 232, 192, 190, 244, 198, 250, 190, 220, 83, 175, 190, 41, 232, 58, 62, 213, 205, 1, 63, 211, 87, 173, 60, 13, 134, 255, 61, 148, 190, 131, 187, 194, 171, 153, 189, 240, 199, 22, 190, 20, 195, 84, 61, 114, 207, 35, 190, 79, 51, 119, 190, 231, 47, 5, 62, 236, 0, 38, 190, 38, 214, 169, 62, 42, 129, 32, 190, 75, 103, 11, 62, 49, 41, 239, 187, 87, 91, 40, 191, 28, 178, 200, 190, 26, 95, 180, 61, 140, 9, 165, 190, 198, 128, 60, 190, 119, 175, 171, 61, 252, 203, 115, 61, 171, 26, 7, 191, 69, 214, 161, 189, 218, 96, 237, 61, 19, 112, 217, 190, 92, 61, 191, 61, 153, 166, 140, 189, 46, 212, 140, 190, 205, 62, 233, 190, 180, 80, 183, 190, 154, 101, 104, 191, 201, 248, 164, 190, 77, 238, 202, 62, 59, 92, 35, 62, 12, 193, 148, 62, 154, 160, 180, 190, 78, 8, 26, 63, 82, 24, 247, 62, 0, 188, 68, 61, 4, 131, 168, 191, 171, 143, 128, 190, 175, 139, 165, 190, 107, 226, 160, 189, 238, 195, 73, 191, 55, 65, 183, 60, 110, 131, 5, 62, 63, 30, 25, 189, 88, 114, 1, 191, 34, 96, 148, 190, 141, 89, 169, 62, 11, 6, 18, 190, 97, 175, 45, 61, 135, 158, 21, 189, 45, 105, 173, 190, 252, 79, 149, 62, 56, 100, 56, 189, 251, 238, 93, 61, 2, 193, 31, 190, 185, 79, 179, 61, 59, 199, 247, 190, 102, 198, 191, 190, 248, 26, 29, 188, 181, 228, 114, 61, 100, 255, 212, 62, 187, 79, 32, 191, 167, 209, 94, 189, 137, 89, 249, 190, 100, 133, 43, 190, 105, 137, 188, 62, 192, 224, 27, 190, 85, 10, 168, 188, 249, 38, 249, 190, 188, 236, 24, 191, 253, 88, 177, 188, 106, 200, 55, 62, 249, 2, 201, 190, 121, 175, 93, 190, 73, 139, 1, 61, 229, 110, 75, 62, 34, 131, 104, 190, 39, 197, 191, 61, 175, 123, 94, 62, 58, 53, 22, 62, 132, 0, 61, 190, 167, 34, 144, 190, 100, 21, 140, 190, 147, 241, 119, 190, 95, 93, 44, 190, 216, 43, 49, 190, 61, 119, 180, 190, 91, 125, 210, 61, 246, 112, 102, 189, 27, 182, 63, 190, 109, 46, 26, 190, 90, 215, 158, 62, 211, 22, 145, 59, 102, 184, 220, 59, 9, 154, 241, 61, 68, 202, 179, 60, 173, 136, 96, 190, 38, 201, 147, 190, 82, 187, 167, 189, 208, 239, 24, 189, 173, 75, 225, 189, 147, 151, 61, 189, 137, 251, 57, 62, 198, 21, 84, 62, 179, 118, 238, 189, 249, 122, 146, 190, 93, 159, 13, 190, 169, 89, 146, 60, 92, 245, 238, 61, 14, 177, 87, 61, 12, 155, 190, 189, 85, 143, 163, 62, 14, 210, 58, 62, 42, 46, 30, 190, 72, 74, 107, 62, 189, 167, 92, 190, 105, 255, 104, 62, 8, 203, 73, 62, 223, 170, 63, 62, 180, 109, 185, 189, 2, 128, 242, 61, 15, 78, 75, 61, 3, 45, 64, 62, 126, 61, 214, 189, 204, 184, 239, 190, 0, 36, 194, 190, 206, 1, 224, 188, 126, 214, 57, 62, 13, 99, 149, 188, 115, 175, 113, 190, 200, 115, 177, 189, 222, 185, 38, 190, 243, 244, 254, 61, 96, 103, 203, 61, 226, 35, 52, 62, 170, 98, 170, 190, 24, 237, 192, 62, 11, 156, 190, 61, 251, 218, 173, 188, 129, 229, 49, 62, 183, 137, 82, 190, 246, 158, 243, 61, 89, 82, 37, 190, 221, 115, 201, 62, 66, 163, 164, 190, 94, 28, 100, 190, 112, 186, 24, 188, 89, 54, 91, 61, 81, 111, 46, 190, 220, 98, 156, 190, 89, 165, 0, 189, 135, 143, 110, 190, 45, 212, 58, 187, 32, 97, 113, 62, 37, 12, 173, 190, 113, 223, 84, 190, 129, 97, 26, 190, 2, 37, 220, 62, 215, 217, 245, 189, 191, 216, 44, 190, 242, 99, 158, 189, 165, 134, 210, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 32, 200, 136, 189, 16, 74, 120, 61, 175, 238, 111, 190, 90, 175, 11, 189, 144, 97, 146, 190, 22, 236, 218, 189, 6, 170, 15, 189, 253, 160, 156, 61, 0, 150, 135, 190, 32, 138, 48, 62, 229, 20, 63, 62, 209, 229, 143, 188, 245, 179, 20, 61, 6, 128, 94, 62, 142, 113, 26, 62, 135, 103, 157, 62, 64, 198, 1, 190, 195, 207, 81, 188, 157, 116, 20, 188, 96, 38, 251, 60, 24, 183, 212, 190, 115, 153, 176, 190, 87, 10, 2, 190, 228, 157, 126, 60, 73, 193, 10, 62, 130, 167, 65, 61, 31, 73, 152, 62, 186, 253, 43, 190, 129, 103, 10, 191, 126, 123, 145, 190, 113, 120, 117, 190, 76, 135, 57, 190, 31, 240, 13, 191, 183, 72, 69, 191, 167, 142, 143, 60, 83, 183, 48, 190, 131, 170, 69, 190, 87, 207, 87, 191, 81, 227, 63, 188, 61, 127, 99, 62, 73, 41, 121, 190, 122, 48, 89, 190, 146, 96, 187, 62, 112, 154, 54, 191, 170, 219, 14, 61, 193, 24, 27, 63, 187, 67, 40, 191, 107, 172, 146, 62, 45, 9, 170, 188, 84, 61, 104, 190, 168, 122, 182, 190, 92, 162, 146, 190, 154, 142, 127, 191, 52, 235, 187, 62, 123, 255, 61, 190, 170, 80, 237, 62, 55, 104, 118, 190, 100, 187, 168, 189, 90, 20, 28, 63, 160, 159, 125, 62, 33, 151, 245, 189, 68, 39, 147, 191, 190, 212, 131, 190, 237, 181, 13, 191, 255, 220, 163, 62, 112, 66, 151, 61, 253, 152, 84, 189, 125, 104, 23, 62, 160, 70, 186, 61, 38, 46, 128, 62, 7, 97, 198, 189, 55, 38, 18, 190, 162, 90, 72, 60, 17, 99, 117, 62, 49, 144, 17, 190, 188, 94, 197, 60, 227, 225, 101, 190, 77, 31, 200, 189, 117, 191, 138, 62, 151, 238, 30, 62, 233, 232, 210, 61, 191, 237, 122, 62, 44, 30, 158, 62, 240, 2, 131, 62, 164, 65, 194, 188, 244, 62, 53, 61, 224, 236, 35, 191, 198, 153, 224, 61, 0, 144, 174, 51, 19, 26, 110, 61, 60, 229, 128, 190, 146, 109, 199, 59, 62, 102, 163, 190, 18, 90, 15, 60, 68, 67, 146, 61, 51, 217, 40, 62, 255, 171, 190, 190, 199, 69, 223, 189, 107, 255, 201, 60, 48, 211, 247, 188, 119, 106, 148, 190, 58, 147, 37, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 50, 158, 139, 190, 158, 10, 4, 62, 169, 158, 126, 189, 64, 65, 1, 190, 190, 115, 36, 61, 48, 138, 147, 61, 154, 12, 198, 190, 69, 221, 145, 190, 244, 209, 157, 189, 164, 162, 185, 61, 163, 206, 92, 187, 183, 15, 219, 189, 223, 156, 241, 59, 177, 10, 236, 61, 115, 40, 45, 62, 31, 56, 100, 60, 159, 247, 183, 191, 173, 26, 234, 189, 187, 200, 152, 62, 72, 62, 79, 61, 246, 30, 212, 190, 204, 169, 96, 62, 125, 248, 35, 61, 206, 66, 224, 190, 83, 73, 196, 190, 6, 174, 6, 190, 83, 134, 169, 61, 56, 187, 5, 190, 246, 52, 206, 190, 10, 150, 182, 61, 248, 77, 26, 62, 37, 63, 150, 190, 184, 80, 197, 57, 250, 148, 195, 189, 253, 65, 229, 189, 131, 37, 133, 60, 162, 49, 62, 61, 188, 216, 112, 190, 237, 212, 239, 60, 6, 109, 250, 61, 141, 80, 92, 190, 139, 224, 151, 188, 29, 65, 157, 189, 134, 222, 53, 62, 172, 70, 136, 62, 254, 85, 147, 188, 91, 80, 116, 62, 47, 43, 188, 61, 117, 10, 98, 62, 15, 40, 224, 61, 26, 163, 105, 61, 155, 169, 6, 191, 137, 5, 124, 190, 55, 161, 196, 189, 215, 96, 84, 60, 111, 146, 78, 62, 31, 54, 55, 61, 0, 0, 142, 61, 212, 147, 31, 62, 156, 61, 233, 189, 240, 31, 82, 190, 47, 209, 149, 60, 84, 151, 253, 60, 114, 232, 239, 189, 55, 182, 158, 190, 193, 131, 54, 62, 10, 126, 223, 188, 212, 146, 27, 60, 73, 167, 174, 62, 43, 57, 143, 190, 241, 169, 157, 61, 36, 230, 212, 61, 149, 196, 39, 189, 21, 13, 66, 190, 28, 75, 86, 190, 144, 72, 221, 190, 167, 224, 26, 62, 211, 101, 22, 63, 243, 216, 12, 62, 223, 240, 97, 189, 53, 174, 43, 60, 130, 154, 192, 190, 94, 162, 44, 61, 177, 251, 240, 188, 180, 183, 202, 190, 116, 38, 137, 187, 111, 71, 8, 190, 123, 149, 161, 62, 34, 115, 118, 188, 67, 212, 20, 62, 221, 132, 26, 190, 90, 61, 129, 190, 56, 76, 31, 191, 208, 54, 153, 61, 27, 230, 202, 62, 120, 14, 138, 190, 180, 226, 112, 190, 136, 89, 42, 60, 86, 241, 61, 190, 219, 229, 39, 62, 102, 81, 152, 62, 136, 0, 76, 190, 98, 49, 37, 62, 205, 76, 78, 62, 35, 2, 111, 190, 101, 193, 104, 189, 42, 32, 182, 190, 191, 161, 45, 62, 130, 231, 170, 62, 217, 6, 77, 62, 137, 14, 44, 61, 108, 113, 234, 188, 92, 54, 165, 188, 107, 170, 0, 61, 22, 231, 40, 190, 11, 190, 156, 60, 207, 247, 143, 190, 154, 226, 31, 190, 130, 143, 255, 61, 67, 88, 129, 62, 44, 204, 162, 190, 81, 159, 108, 190, 204, 60, 226, 189, 166, 91, 121, 190, 251, 156, 16, 62, 33, 97, 114, 190, 142, 87, 103, 62, 45, 42, 163, 61, 218, 18, 104, 61, 190, 84, 156, 190, 126, 30, 221, 59, 59, 89, 10, 61, 134, 152, 206, 60, 26, 185, 44, 62, 232, 32, 140, 62, 195, 216, 0, 190, 33, 240, 181, 189, 9, 141, 96, 61, 27, 167, 123, 189, 187, 30, 167, 61, 88, 85, 36, 62, 113, 144, 110, 191, 224, 72, 105, 61, 207, 177, 4, 61, 44, 23, 30, 60, 140, 38, 147, 62, 28, 111, 113, 190, 232, 249, 122, 191, 43, 191, 144, 190, 219, 100, 20, 190, 68, 34, 4, 62, 206, 222, 54, 191, 23, 58, 67, 190, 70, 2, 116, 189, 112, 26, 72, 60, 18, 30, 134, 190, 106, 156, 144, 61, 184, 25, 59, 62, 248, 109, 160, 62, 118, 102, 84, 190, 156, 167, 8, 62, 43, 178, 184, 189, 80, 200, 11, 62, 0, 175, 230, 189, 236, 14, 143, 61, 66, 85, 110, 62, 61, 155, 189, 62, 173, 253, 12, 190, 7, 114, 16, 61, 161, 226, 208, 61, 142, 139, 9, 62, 255, 220, 59, 189, 36, 100, 217, 183, 212, 17, 153, 190, 183, 220, 216, 187, 31, 76, 226, 61, 140, 125, 187, 61, 52, 183, 106, 60, 28, 119, 242, 189, 159, 33, 223, 190, 4, 176, 88, 186, 121, 45, 16, 62, 42, 121, 223, 61, 230, 44, 134, 190, 234, 144, 75, 62, 69, 0, 5, 190, 248, 91, 82, 61, 194, 40, 60, 62, 83, 82, 73, 61, 170, 79, 140, 190, 179, 223, 132, 189, 200, 239, 167, 61, 17, 170, 242, 61, 10, 153, 15, 189, 197, 252, 4, 189, 22, 62, 196, 189, 56, 171, 104, 61, 232, 94, 174, 61, 115, 148, 148, 189, 58, 177, 9, 190, 234, 21, 120, 61, 133, 243, 194, 62, 179, 22, 150, 59, 50, 206, 73, 62, 221, 88, 29, 62, 97, 53, 11, 191, 51, 67, 240, 189, 103, 156, 113, 62, 163, 81, 153, 60, 89, 121, 76, 190, 222, 161, 183, 61, 207, 167, 12, 190, 101, 36, 74, 62, 252, 131, 139, 62, 101, 95, 244, 61, 157, 9, 130, 61, 20, 135, 99, 191, 241, 70, 147, 61, 222, 47, 35, 190, 2, 5, 98, 62, 83, 191, 5, 62, 223, 98, 53, 62, 178, 94, 229, 62, 170, 168, 88, 190, 18, 234, 177, 187, 49, 138, 201, 62, 65, 8, 200, 189, 197, 73, 145, 62, 58, 34, 246, 61, 40, 123, 81, 62, 172, 160, 244, 189, 111, 232, 34, 62, 43, 159, 134, 61, 30, 213, 40, 191, 7, 243, 96, 60, 216, 175, 40, 62, 14, 137, 18, 62, 220, 237, 149, 61, 220, 94, 45, 190, 108, 125, 37, 62, 19, 194, 107, 190, 248, 242, 241, 61, 131, 252, 157, 189, 236, 99, 184, 62, 11, 177, 218, 60, 230, 131, 117, 190, 142, 156, 35, 62, 55, 1, 89, 62, 177, 142, 200, 190, 240, 247, 252, 61, 13, 221, 172, 189, 172, 211, 82, 191, 245, 121, 196, 190, 193, 227, 79, 190, 90, 69, 32, 190, 44, 165, 147, 189, 79, 161, 156, 189, 160, 50, 4, 62, 27, 81, 183, 61, 168, 241, 241, 59, 221, 100, 93, 62, 89, 210, 14, 190, 46, 194, 109, 60, 173, 29, 165, 61, 118, 217, 153, 60, 180, 184, 39, 191, 9, 68, 186, 188, 45, 147, 210, 190, 203, 65, 52, 186, 101, 231, 219, 189, 182, 99, 180, 61, 246, 83, 157, 187, 82, 109, 77, 190, 231, 222, 216, 62, 141, 252, 251, 62, 221, 70, 36, 61, 124, 78, 31, 191, 189, 154, 148, 190, 49, 235, 80, 190, 170, 178, 42, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 102, 35, 171, 62, 189, 73, 33, 62, 98, 95, 207, 189, 142, 147, 204, 190, 241, 14, 226, 189, 17, 155, 137, 190, 218, 230, 161, 62, 49, 117, 236, 190, 196, 246, 63, 190, 111, 208, 34, 191, 4, 102, 197, 189, 105, 33, 48, 188, 147, 10, 7, 190, 109, 50, 196, 61, 94, 101, 13, 63, 166, 175, 225, 61, 158, 69, 66, 190, 249, 168, 41, 63, 166, 20, 201, 189, 68, 229, 214, 61, 35, 175, 123, 189, 57, 206, 158, 190, 33, 62, 236, 190, 39, 175, 43, 60, 113, 192, 188, 62, 172, 229, 157, 61, 65, 72, 105, 188, 161, 63, 89, 62, 193, 200, 19, 190, 107, 202, 82, 62, 115, 237, 246, 61, 22, 33, 203, 61, 125, 153, 66, 190, 70, 183, 2, 187, 145, 74, 51, 61, 91, 163, 18, 190, 254, 114, 167, 62, 160, 47, 32, 190, 213, 120, 8, 190, 122, 44, 34, 62, 74, 116, 240, 61, 168, 0, 224, 189, 104, 139, 223, 61, 131, 10, 62, 190, 21, 221, 162, 62, 217, 35, 28, 62, 216, 231, 104, 62, 239, 126, 38, 188, 112, 70, 120, 62, 162, 109, 21, 62, 133, 124, 161, 62, 110, 130, 86, 189, 173, 11, 0, 191, 43, 96, 29, 191, 35, 124, 107, 61, 113, 61, 78, 62, 39, 10, 122, 187, 157, 33, 91, 190, 171, 178, 185, 189, 230, 85, 158, 60, 49, 51, 82, 62, 159, 221, 37, 62, 154, 157, 60, 62, 84, 131, 143, 60, 209, 167, 36, 59, 237, 9, 33, 190, 79, 25, 39, 188, 187, 23, 58, 189, 82, 197, 116, 62, 219, 212, 123, 62, 138, 69, 34, 189, 220, 255, 66, 190, 240, 4, 60, 62, 57, 163, 17, 190, 31, 62, 166, 61, 8, 50, 209, 188, 57, 57, 63, 62, 197, 153, 59, 62, 11, 224, 240, 61, 167, 170, 235, 61, 168, 28, 12, 61, 87, 47, 125, 62, 155, 193, 127, 61, 175, 47, 8, 62, 113, 186, 123, 190, 87, 243, 66, 188, 48, 38, 187, 60, 16, 229, 193, 61, 189, 94, 247, 188, 6, 250, 77, 189, 17, 158, 18, 62, 14, 63, 176, 190, 234, 244, 178, 61, 228, 175, 209, 62, 235, 148, 198, 189, 69, 160, 85, 190, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 122, 65, 249, 189, 168, 188, 46, 190, 221, 53, 102, 62, 175, 6, 159, 61, 70, 195, 252, 61, 233, 37, 102, 191, 224, 141, 248, 189, 227, 226, 39, 190, 5, 89, 7, 190, 180, 113, 107, 62, 178, 203, 116, 190, 151, 148, 58, 62, 166, 100, 92, 189, 224, 245, 76, 191, 210, 17, 158, 190, 111, 84, 169, 62, 120, 214, 190, 190, 195, 149, 143, 62, 130, 44, 128, 61, 133, 199, 0, 191, 205, 188, 33, 190, 164, 253, 79, 62, 67, 194, 20, 62, 109, 52, 208, 191, 164, 224, 20, 191, 85, 190, 44, 189, 16, 152, 167, 189, 17, 147, 249, 61, 121, 20, 141, 62, 66, 199, 58, 62, 201, 49, 222, 189, 33, 252, 250, 188, 190, 178, 5, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 228, 231, 150, 189, 209, 119, 152, 189, 69, 66, 254, 189, 213, 44, 139, 60, 126, 165, 0, 190, 124, 239, 131, 189, 188, 222, 76, 190, 6, 232, 25, 190, 122, 123, 98, 187, 121, 142, 246, 58, 219, 186, 24, 62, 104, 52, 217, 60, 58, 77, 227, 189, 87, 206, 87, 188, 81, 29, 205, 189, 175, 0, 244, 189, 173, 191, 244, 189, 114, 128, 176, 188, 9, 100, 253, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 89, 192, 28, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 118, 65, 62, 79, 27, 19, 189, 203, 177, 252, 189, 80, 120, 218, 57, 154, 81, 79, 58, 135, 161, 167, 188, 237, 179, 119, 189, 187, 176, 13, 62, 140, 57, 75, 189, 111, 29, 122, 62, 116, 41, 108, 61, 152, 13, 58, 60, 219, 87, 118, 190, 162, 209, 105, 61, 249, 162, 79, 62, 238, 151, 58, 62, 179, 18, 164, 59, 75, 54, 143, 62, 165, 165, 165, 58, 56, 212, 54, 62, 164, 117, 134, 62, 254, 37, 54, 62, 97, 2, 81, 62, 196, 26, 182, 61, 173, 251, 12, 61, 73, 149, 51, 190, 85, 152, 167, 189, 234, 181, 1, 190, 13, 8, 204, 61, 163, 116, 88, 190, 138, 118, 117, 61, 14, 175, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 1, 78, 63, 240, 159, 147, 62, 205, 148, 149, 190, 83, 188, 211, 190, 204, 217, 181, 188, 106, 147, 162, 62, 80, 105, 80, 189, 236, 153, 6, 191, 97, 13, 132, 191, 9, 35, 40, 191, 156, 214, 206, 190, 5, 94, 152, 62, 76, 213, 234, 190, 66, 102, 153, 190, 223, 246, 157, 191, 176, 159, 151, 62, 222, 168, 29, 63, 59, 72, 160, 189, 41, 81, 145, 190, 69, 15, 181, 190, 131, 57, 127, 62, 98, 11, 20, 62, 217, 79, 59, 62, 194, 105, 180, 190, 219, 169, 228, 190, 252, 181, 22, 62, 142, 203, 215, 62, 33, 181, 180, 62, 102, 37, 30, 62, 188, 36, 246, 61, 213, 219, 75, 63, 48, 98, 57, 189, 148, 127, 154, 62, 112, 24, 156, 189, 105, 36, 57, 62, 99, 119, 169, 189, 212, 84, 22, 190, 41, 133, 250, 61, 107, 231, 143, 61, 35, 40, 8, 62, 246, 83, 143, 61, 154, 182, 168, 190, 94, 42, 20, 63, 33, 73, 127, 186, 87, 243, 232, 61, 137, 255, 148, 62, 219, 169, 63, 188, 177, 217, 102, 190, 114, 148, 237, 60, 111, 88, 180, 190, 89, 8, 157, 61, 249, 160, 79, 190, 66, 75, 239, 190, 111, 208, 131, 190, 199, 32, 43, 190, 128, 26, 207, 61, 52, 235, 204, 62, 117, 232, 1, 189, 220, 53, 62, 189, 232, 193, 229, 60, 43, 226, 16, 190, 23, 26, 158, 61, 93, 58, 126, 62, 192, 182, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 179, 184, 61, 40, 23, 126, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 32, 236, 191, 111, 242, 122, 191, 4, 115, 105, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {24, 151, 20, 63, 240, 16, 250, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}