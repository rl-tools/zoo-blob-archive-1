// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 169, 90, 63, 252, 202, 75, 191, 227, 39, 160, 190, 212, 58, 21, 63, 172, 110, 247, 62, 87, 152, 31, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 129, 92, 185, 61, 219, 179, 148, 62, 205, 50, 57, 191, 131, 135, 96, 60, 21, 245, 227, 190, 43, 120, 233, 62, 119, 52, 88, 62, 159, 8, 91, 191, 208, 176, 245, 189, 253, 117, 153, 63, 241, 206, 204, 62, 191, 159, 64, 62, 135, 232, 227, 189, 36, 31, 208, 189, 236, 219, 61, 190, 141, 23, 65, 62, 105, 246, 139, 191, 98, 77, 242, 61, 250, 107, 14, 191, 243, 73, 51, 191, 105, 208, 100, 190, 140, 193, 254, 190, 84, 191, 134, 62, 119, 174, 17, 63, 215, 82, 168, 62, 103, 221, 144, 190, 50, 174, 17, 63, 106, 118, 31, 191, 105, 97, 129, 191, 125, 186, 177, 188, 133, 219, 130, 62, 153, 166, 133, 191, 43, 47, 220, 62, 121, 23, 151, 61, 215, 242, 188, 191, 152, 202, 133, 190, 45, 234, 209, 62, 211, 68, 42, 61, 22, 98, 8, 63, 98, 174, 184, 190, 4, 97, 242, 190, 159, 27, 19, 63, 10, 235, 251, 62, 148, 241, 129, 191, 74, 198, 137, 190, 87, 38, 32, 62, 150, 53, 60, 191, 65, 102, 193, 62, 155, 183, 232, 62, 96, 87, 129, 63, 123, 159, 237, 62, 44, 196, 133, 62, 17, 190, 16, 63, 230, 93, 237, 190, 44, 254, 242, 62, 176, 161, 86, 191, 53, 139, 42, 190, 84, 148, 92, 191, 18, 163, 232, 190, 232, 132, 82, 189, 149, 178, 46, 191, 25, 19, 59, 62, 58, 148, 65, 62, 28, 15, 141, 62, 102, 210, 157, 191, 28, 38, 220, 190, 53, 120, 247, 61, 87, 107, 71, 191, 31, 79, 60, 62, 40, 208, 211, 190, 244, 172, 22, 189, 218, 103, 138, 62, 18, 104, 19, 63, 33, 147, 220, 62, 92, 223, 126, 62, 28, 10, 68, 190, 71, 76, 140, 63, 242, 120, 183, 62, 22, 234, 110, 190, 131, 44, 187, 63, 3, 131, 150, 62, 133, 176, 16, 62, 152, 222, 119, 62, 85, 154, 34, 63, 89, 172, 110, 62, 188, 160, 145, 63, 158, 21, 136, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 195, 20, 191, 86, 88, 241, 190, 48, 0, 19, 191, 203, 178, 179, 190, 67, 101, 54, 190, 147, 229, 229, 190, 103, 215, 151, 62, 163, 146, 82, 191, 65, 62, 6, 63, 151, 141, 132, 62, 138, 109, 22, 191, 144, 124, 135, 61, 94, 69, 201, 189, 203, 83, 222, 61, 220, 181, 195, 62, 114, 225, 185, 62, 52, 28, 218, 190, 211, 13, 44, 62, 146, 133, 7, 62, 170, 149, 207, 62, 128, 178, 123, 62, 74, 25, 15, 191, 121, 32, 78, 63, 185, 249, 4, 63, 201, 249, 234, 62, 165, 53, 73, 62, 253, 160, 184, 190, 145, 9, 4, 191, 81, 10, 113, 190, 80, 147, 68, 190, 153, 78, 233, 62, 224, 130, 207, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 63, 148, 62, 114, 249, 48, 191, 172, 51, 171, 60, 191, 178, 35, 62, 57, 15, 11, 62, 0, 247, 76, 190, 48, 168, 158, 61, 96, 253, 179, 62, 210, 198, 246, 62, 51, 49, 228, 190, 255, 141, 4, 62, 139, 112, 204, 190, 8, 15, 218, 60, 164, 252, 93, 62, 118, 41, 201, 62, 127, 67, 81, 190, 141, 42, 76, 62, 62, 56, 193, 62, 236, 166, 201, 62, 240, 35, 13, 189, 158, 2, 15, 190, 5, 93, 9, 191, 82, 166, 135, 61, 80, 101, 8, 62, 67, 190, 177, 61, 84, 98, 186, 61, 217, 132, 168, 190, 30, 237, 124, 191, 138, 187, 150, 61, 255, 243, 121, 61, 237, 255, 4, 62, 48, 2, 142, 191, 17, 11, 220, 62, 244, 206, 150, 58, 69, 4, 180, 58, 237, 29, 224, 62, 197, 76, 89, 62, 29, 29, 9, 190, 76, 97, 62, 190, 12, 16, 217, 186, 29, 178, 120, 62, 25, 110, 139, 190, 121, 55, 97, 62, 249, 138, 177, 189, 139, 87, 98, 61, 203, 73, 40, 61, 168, 17, 121, 188, 170, 19, 14, 190, 153, 141, 232, 61, 160, 28, 184, 62, 32, 175, 253, 61, 129, 31, 108, 62, 135, 0, 148, 61, 244, 79, 77, 190, 128, 235, 81, 187, 85, 131, 170, 61, 95, 169, 228, 190, 223, 24, 167, 190, 149, 232, 192, 189, 139, 141, 75, 190, 42, 167, 164, 62, 236, 121, 212, 62, 249, 157, 70, 62, 136, 11, 93, 190, 251, 209, 145, 188, 81, 204, 253, 60, 247, 157, 75, 60, 208, 133, 13, 191, 74, 147, 151, 62, 217, 105, 33, 63, 100, 23, 142, 189, 233, 62, 228, 61, 135, 253, 133, 62, 97, 19, 138, 62, 34, 106, 184, 60, 163, 30, 143, 61, 131, 109, 77, 190, 235, 245, 55, 62, 220, 136, 253, 61, 151, 102, 109, 61, 230, 141, 232, 61, 149, 121, 234, 190, 22, 48, 105, 62, 236, 96, 23, 190, 227, 206, 144, 190, 214, 63, 239, 62, 214, 214, 11, 190, 106, 104, 136, 189, 228, 113, 131, 189, 188, 161, 201, 62, 141, 103, 219, 61, 164, 97, 102, 62, 53, 9, 194, 61, 109, 252, 7, 190, 44, 186, 118, 62, 240, 234, 117, 189, 45, 67, 168, 62, 94, 114, 131, 61, 12, 215, 13, 62, 215, 127, 32, 190, 156, 77, 162, 62, 144, 212, 237, 62, 8, 82, 156, 62, 123, 75, 168, 61, 50, 122, 37, 62, 39, 134, 111, 62, 178, 93, 26, 62, 121, 48, 40, 61, 66, 145, 120, 188, 155, 107, 38, 62, 205, 84, 68, 60, 173, 7, 100, 62, 102, 185, 164, 61, 144, 164, 242, 189, 123, 127, 158, 62, 5, 143, 64, 60, 112, 98, 83, 190, 30, 251, 97, 63, 18, 115, 101, 190, 45, 43, 9, 190, 76, 106, 42, 62, 245, 0, 76, 62, 114, 63, 172, 61, 222, 135, 12, 188, 212, 182, 115, 189, 87, 28, 209, 190, 118, 11, 161, 62, 207, 58, 229, 187, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 28, 102, 196, 187, 69, 52, 64, 189, 119, 39, 112, 189, 143, 149, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 63, 159, 131, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 56, 17, 183, 189, 61, 2, 116, 60, 139, 92, 241, 189, 225, 181, 36, 190, 49, 126, 15, 62, 128, 135, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 69, 86, 56, 189, 114, 254, 241, 61, 100, 172, 87, 189, 245, 214, 122, 189, 87, 166, 157, 62, 149, 19, 252, 189, 114, 120, 58, 61, 149, 62, 185, 61, 185, 63, 41, 190, 130, 48, 3, 191, 221, 118, 110, 62, 164, 242, 144, 62, 144, 210, 237, 60, 195, 35, 197, 189, 198, 244, 13, 62, 184, 73, 134, 61, 207, 240, 197, 190, 247, 214, 10, 62, 69, 122, 62, 190, 1, 14, 2, 190, 205, 148, 110, 189, 10, 27, 147, 62, 84, 113, 128, 189, 212, 35, 50, 190, 163, 74, 235, 60, 36, 50, 166, 190, 202, 242, 107, 190, 164, 141, 82, 62, 97, 129, 10, 62, 189, 184, 128, 61, 176, 231, 47, 190, 98, 66, 148, 188, 9, 29, 26, 190, 231, 100, 182, 190, 118, 52, 59, 190, 108, 152, 185, 190, 59, 245, 238, 189, 173, 92, 139, 188, 115, 132, 242, 61, 56, 198, 37, 61, 208, 110, 34, 61, 114, 140, 245, 61, 27, 239, 58, 60, 84, 178, 190, 189, 107, 113, 133, 60, 218, 41, 183, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 189, 243, 232, 61, 107, 229, 206, 189, 148, 86, 40, 61, 166, 166, 223, 189, 225, 141, 26, 190, 132, 2, 93, 189, 140, 79, 231, 60, 216, 144, 37, 190, 13, 31, 151, 189, 241, 20, 44, 189, 138, 75, 51, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 89, 183, 41, 62, 190, 5, 73, 189, 181, 6, 205, 189, 159, 207, 58, 60, 223, 203, 110, 191, 24, 212, 255, 61, 220, 211, 63, 60, 32, 198, 112, 190, 75, 127, 31, 191, 85, 93, 170, 190, 238, 31, 163, 62, 221, 22, 139, 190, 83, 152, 11, 191, 18, 39, 46, 62, 169, 152, 33, 190, 101, 71, 158, 61, 128, 179, 212, 189, 206, 54, 1, 191, 151, 170, 76, 190, 234, 117, 18, 62, 154, 249, 205, 190, 192, 225, 2, 191, 147, 98, 145, 190, 137, 75, 213, 61, 187, 129, 253, 62, 253, 83, 173, 60, 206, 116, 241, 61, 202, 68, 7, 190, 245, 138, 210, 189, 201, 1, 156, 189, 101, 205, 175, 59, 111, 97, 100, 190, 204, 117, 13, 191, 54, 212, 5, 190, 128, 152, 92, 190, 231, 220, 49, 62, 42, 129, 32, 190, 75, 103, 11, 62, 49, 41, 239, 187, 135, 194, 39, 191, 127, 122, 193, 190, 26, 95, 180, 61, 140, 9, 165, 190, 198, 128, 60, 190, 189, 52, 105, 61, 52, 253, 212, 60, 153, 129, 11, 191, 224, 138, 163, 189, 100, 25, 167, 61, 74, 66, 210, 190, 71, 8, 15, 61, 113, 219, 41, 189, 211, 250, 74, 190, 179, 142, 3, 191, 68, 33, 167, 190, 119, 162, 135, 191, 99, 171, 170, 190, 77, 238, 202, 62, 124, 241, 22, 62, 214, 129, 153, 62, 143, 49, 222, 190, 250, 44, 24, 63, 230, 212, 16, 63, 0, 188, 68, 61, 84, 252, 184, 191, 218, 10, 135, 190, 131, 185, 121, 190, 9, 188, 234, 189, 36, 115, 104, 191, 23, 153, 52, 61, 110, 131, 5, 62, 181, 227, 94, 189, 108, 65, 243, 190, 150, 150, 75, 191, 195, 168, 181, 62, 29, 176, 153, 190, 85, 172, 71, 61, 162, 45, 68, 189, 248, 150, 154, 190, 201, 165, 151, 62, 128, 168, 17, 190, 172, 244, 65, 61, 61, 24, 132, 190, 62, 24, 234, 61, 129, 74, 14, 191, 241, 58, 207, 190, 76, 199, 106, 188, 24, 173, 196, 61, 223, 172, 212, 62, 90, 203, 175, 191, 167, 0, 139, 189, 23, 68, 21, 191, 28, 216, 73, 190, 139, 254, 178, 62, 68, 245, 35, 190, 54, 178, 213, 60, 181, 23, 12, 191, 218, 162, 43, 191, 7, 218, 195, 59, 234, 5, 110, 62, 136, 16, 20, 191, 30, 51, 97, 190, 73, 139, 1, 61, 240, 74, 94, 62, 3, 237, 133, 190, 39, 197, 191, 61, 160, 29, 61, 62, 33, 153, 145, 61, 147, 65, 27, 190, 16, 150, 81, 190, 77, 242, 177, 190, 121, 23, 93, 190, 246, 217, 136, 190, 131, 166, 226, 189, 132, 71, 242, 190, 199, 218, 237, 61, 240, 131, 185, 189, 231, 57, 128, 190, 58, 208, 185, 189, 180, 93, 132, 62, 131, 253, 3, 60, 102, 184, 220, 59, 168, 122, 12, 62, 18, 139, 132, 189, 84, 246, 118, 190, 170, 24, 116, 190, 74, 192, 12, 190, 220, 169, 179, 188, 105, 245, 129, 190, 4, 157, 66, 190, 32, 38, 51, 62, 165, 62, 247, 61, 178, 119, 33, 190, 201, 60, 163, 190, 93, 159, 13, 190, 4, 233, 87, 61, 56, 250, 217, 61, 67, 214, 133, 189, 96, 140, 129, 189, 194, 44, 175, 62, 39, 216, 92, 62, 229, 167, 13, 190, 173, 129, 67, 62, 33, 123, 96, 190, 31, 207, 143, 62, 61, 86, 79, 62, 190, 218, 137, 62, 53, 71, 187, 189, 67, 33, 206, 61, 75, 190, 166, 61, 241, 196, 65, 62, 25, 185, 251, 189, 4, 239, 197, 190, 180, 158, 242, 190, 214, 113, 126, 61, 227, 24, 80, 62, 155, 144, 132, 188, 106, 95, 97, 190, 177, 78, 240, 189, 38, 156, 157, 190, 226, 82, 130, 61, 109, 250, 83, 61, 67, 31, 45, 62, 207, 182, 223, 190, 127, 193, 206, 62, 11, 156, 190, 61, 251, 218, 173, 188, 201, 67, 63, 62, 183, 137, 82, 190, 75, 37, 36, 61, 70, 140, 141, 189, 203, 163, 194, 62, 82, 66, 229, 190, 85, 71, 142, 190, 112, 186, 24, 188, 89, 54, 91, 61, 109, 18, 119, 190, 246, 142, 157, 190, 255, 247, 125, 189, 135, 143, 110, 190, 45, 212, 58, 187, 88, 113, 112, 62, 37, 12, 173, 190, 173, 151, 131, 190, 5, 32, 5, 190, 185, 207, 204, 62, 7, 212, 87, 190, 191, 216, 44, 190, 158, 19, 181, 189, 191, 186, 178, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 49, 61, 90, 190, 87, 12, 157, 60, 129, 183, 173, 190, 90, 175, 11, 189, 59, 174, 111, 190, 151, 188, 117, 189, 11, 239, 84, 189, 43, 192, 149, 189, 34, 0, 186, 190, 10, 218, 91, 62, 11, 158, 118, 62, 51, 175, 185, 188, 100, 60, 189, 60, 74, 142, 156, 62, 190, 34, 63, 62, 188, 46, 192, 62, 141, 206, 54, 190, 76, 98, 22, 61, 190, 205, 36, 61, 183, 68, 133, 61, 44, 189, 39, 191, 123, 185, 157, 190, 238, 66, 72, 190, 104, 209, 83, 61, 63, 54, 109, 61, 235, 198, 218, 61, 33, 226, 181, 62, 46, 194, 41, 190, 62, 165, 58, 191, 217, 219, 223, 190, 15, 66, 192, 190, 112, 192, 98, 190, 171, 106, 57, 191, 115, 56, 95, 191, 167, 142, 143, 60, 83, 183, 48, 190, 105, 35, 104, 190, 33, 227, 78, 191, 76, 99, 37, 61, 177, 200, 57, 62, 76, 17, 208, 190, 233, 123, 43, 190, 215, 232, 183, 62, 60, 19, 70, 191, 124, 251, 115, 61, 120, 144, 32, 63, 176, 111, 19, 191, 165, 131, 143, 62, 72, 20, 16, 188, 64, 253, 57, 190, 34, 144, 188, 190, 218, 211, 85, 190, 70, 187, 153, 191, 182, 5, 175, 62, 116, 10, 62, 190, 11, 242, 254, 62, 215, 90, 138, 190, 117, 168, 201, 189, 204, 52, 47, 63, 174, 219, 119, 62, 33, 151, 245, 189, 35, 142, 164, 191, 3, 119, 54, 190, 142, 136, 19, 191, 55, 66, 187, 62, 86, 25, 223, 61, 204, 34, 203, 189, 125, 104, 23, 62, 220, 50, 198, 61, 50, 170, 98, 62, 244, 91, 166, 189, 158, 164, 26, 190, 226, 48, 17, 62, 224, 123, 109, 62, 98, 140, 48, 190, 150, 28, 143, 188, 112, 203, 127, 190, 99, 180, 170, 189, 179, 160, 131, 62, 108, 8, 38, 62, 171, 35, 153, 61, 231, 93, 100, 62, 231, 135, 151, 62, 240, 225, 115, 62, 85, 120, 123, 189, 171, 211, 63, 61, 170, 133, 30, 191, 179, 147, 179, 61, 222, 47, 101, 188, 131, 56, 35, 61, 188, 245, 132, 190, 187, 135, 227, 188, 132, 94, 224, 190, 216, 225, 109, 189, 180, 39, 4, 60, 175, 250, 5, 62, 44, 83, 232, 190, 199, 69, 223, 189, 228, 158, 115, 60, 48, 211, 247, 188, 43, 47, 181, 190, 209, 9, 41, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 200, 88, 135, 190, 246, 186, 203, 61, 163, 112, 74, 60, 181, 144, 209, 189, 203, 87, 141, 61, 247, 152, 36, 62, 147, 252, 216, 190, 64, 238, 78, 190, 16, 21, 18, 60, 164, 162, 185, 61, 24, 52, 187, 61, 62, 132, 238, 189, 253, 164, 239, 189, 177, 10, 236, 61, 211, 200, 13, 62, 12, 173, 47, 188, 125, 49, 209, 191, 74, 211, 144, 189, 178, 225, 189, 62, 72, 62, 79, 61, 33, 41, 216, 190, 64, 164, 37, 62, 218, 104, 213, 61, 246, 139, 18, 191, 146, 170, 201, 190, 198, 35, 153, 190, 83, 134, 169, 61, 128, 214, 7, 190, 247, 28, 176, 190, 124, 165, 61, 62, 196, 234, 242, 61, 37, 245, 204, 190, 143, 117, 63, 61, 71, 83, 161, 189, 81, 39, 184, 189, 118, 40, 105, 189, 223, 87, 144, 61, 61, 174, 81, 190, 110, 25, 222, 60, 195, 190, 121, 61, 253, 164, 19, 190, 173, 240, 183, 59, 175, 210, 64, 189, 88, 28, 192, 61, 193, 131, 141, 62, 57, 30, 222, 60, 101, 130, 145, 62, 227, 235, 178, 61, 235, 121, 110, 62, 176, 92, 18, 62, 41, 123, 30, 62, 220, 61, 55, 191, 225, 248, 208, 190, 45, 40, 78, 190, 98, 70, 96, 189, 188, 142, 191, 61, 226, 77, 67, 60, 0, 0, 142, 61, 212, 147, 31, 62, 9, 149, 218, 189, 164, 64, 39, 190, 169, 244, 181, 187, 226, 110, 178, 188, 44, 229, 139, 190, 14, 217, 118, 190, 137, 147, 67, 62, 130, 71, 169, 188, 111, 139, 184, 60, 157, 11, 182, 62, 85, 58, 88, 190, 181, 55, 184, 61, 6, 157, 24, 62, 52, 160, 154, 61, 32, 1, 49, 190, 18, 179, 149, 189, 159, 29, 59, 191, 89, 74, 43, 62, 82, 14, 17, 63, 70, 39, 65, 62, 69, 185, 111, 189, 221, 102, 214, 60, 57, 11, 127, 190, 171, 122, 231, 61, 177, 251, 240, 188, 170, 106, 8, 191, 250, 184, 95, 61, 33, 70, 2, 190, 78, 83, 114, 62, 115, 151, 108, 189, 253, 6, 12, 62, 221, 132, 26, 190, 53, 250, 131, 190, 38, 190, 6, 191, 254, 24, 185, 61, 180, 209, 206, 62, 235, 21, 217, 190, 130, 190, 58, 190, 167, 83, 149, 60, 5, 38, 106, 190, 26, 76, 51, 62, 102, 54, 149, 62, 177, 1, 9, 190, 86, 200, 24, 62, 19, 131, 79, 62, 174, 51, 86, 190, 154, 195, 31, 189, 123, 207, 148, 190, 166, 77, 250, 61, 21, 91, 171, 62, 110, 88, 69, 62, 204, 184, 94, 61, 41, 2, 52, 190, 89, 12, 67, 188, 212, 30, 183, 61, 43, 253, 57, 190, 117, 25, 244, 60, 19, 121, 2, 191, 30, 141, 196, 190, 58, 227, 214, 61, 186, 1, 25, 62, 140, 12, 101, 190, 123, 39, 125, 190, 204, 60, 226, 189, 36, 248, 48, 190, 94, 92, 38, 62, 66, 15, 186, 190, 17, 187, 89, 62, 122, 39, 4, 190, 79, 187, 55, 61, 154, 183, 211, 190, 149, 103, 18, 61, 5, 164, 34, 61, 151, 165, 228, 60, 241, 120, 58, 62, 80, 54, 141, 62, 224, 196, 15, 190, 168, 165, 39, 189, 128, 230, 64, 61, 111, 80, 53, 189, 170, 40, 39, 61, 4, 155, 95, 62, 181, 30, 133, 191, 253, 243, 60, 61, 209, 243, 139, 61, 192, 122, 158, 187, 68, 18, 154, 62, 26, 153, 73, 190, 212, 249, 157, 191, 11, 223, 165, 190, 153, 9, 88, 190, 45, 28, 239, 61, 186, 135, 93, 191, 15, 206, 50, 190, 25, 217, 85, 189, 112, 26, 72, 60, 54, 40, 69, 190, 55, 58, 138, 61, 61, 108, 33, 62, 150, 104, 171, 62, 194, 139, 73, 190, 55, 151, 202, 61, 192, 16, 19, 190, 243, 210, 11, 62, 131, 214, 228, 189, 59, 180, 161, 61, 224, 208, 102, 62, 6, 110, 178, 62, 169, 220, 13, 190, 126, 34, 31, 61, 72, 98, 153, 61, 224, 160, 3, 62, 102, 226, 2, 189, 137, 190, 143, 61, 154, 187, 164, 190, 144, 121, 188, 188, 157, 146, 13, 62, 59, 169, 133, 61, 98, 247, 141, 59, 105, 101, 249, 189, 18, 157, 224, 190, 220, 180, 145, 60, 170, 238, 68, 62, 14, 8, 226, 61, 128, 234, 114, 190, 205, 128, 109, 62, 249, 245, 253, 189, 248, 91, 82, 61, 56, 80, 66, 62, 8, 57, 53, 61, 141, 227, 128, 190, 179, 162, 122, 189, 161, 72, 84, 62, 219, 241, 199, 61, 153, 75, 134, 189, 207, 85, 10, 189, 60, 90, 187, 189, 32, 145, 149, 61, 202, 171, 161, 61, 174, 195, 139, 189, 9, 12, 6, 190, 183, 32, 130, 61, 204, 165, 183, 62, 72, 199, 76, 185, 78, 171, 94, 62, 214, 28, 31, 62, 182, 243, 4, 191, 220, 117, 13, 190, 159, 137, 139, 62, 181, 175, 246, 187, 3, 136, 83, 190, 195, 176, 177, 61, 12, 244, 42, 190, 33, 27, 100, 62, 219, 252, 172, 62, 225, 84, 0, 62, 123, 197, 183, 61, 145, 40, 121, 191, 70, 240, 121, 61, 222, 47, 35, 190, 223, 247, 71, 62, 67, 200, 4, 62, 189, 77, 185, 62, 211, 235, 231, 62, 48, 234, 139, 190, 142, 45, 222, 57, 44, 122, 210, 62, 236, 49, 209, 189, 204, 208, 138, 62, 254, 20, 241, 60, 83, 175, 78, 62, 2, 6, 91, 190, 247, 160, 23, 62, 221, 46, 104, 61, 3, 82, 42, 191, 21, 135, 31, 60, 235, 81, 15, 62, 109, 159, 6, 62, 205, 207, 144, 189, 147, 98, 51, 190, 248, 151, 246, 61, 3, 101, 111, 190, 238, 44, 223, 61, 78, 242, 166, 189, 55, 71, 205, 62, 172, 169, 5, 188, 40, 80, 161, 190, 158, 134, 19, 62, 4, 218, 57, 62, 177, 142, 200, 190, 147, 104, 254, 61, 13, 221, 172, 189, 134, 19, 86, 191, 85, 2, 214, 190, 193, 227, 79, 190, 90, 69, 32, 190, 44, 165, 147, 189, 229, 98, 239, 189, 23, 3, 216, 61, 3, 169, 78, 61, 227, 239, 13, 189, 161, 127, 57, 62, 184, 81, 53, 190, 71, 119, 48, 189, 102, 196, 43, 61, 68, 23, 2, 188, 30, 187, 55, 191, 177, 73, 107, 189, 88, 203, 242, 190, 111, 142, 176, 188, 101, 231, 219, 189, 13, 210, 168, 61, 214, 59, 184, 59, 105, 189, 144, 190, 116, 178, 197, 62, 136, 89, 250, 62, 221, 70, 36, 61, 32, 93, 41, 191, 185, 61, 132, 190, 141, 147, 66, 190, 50, 39, 42, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 16, 94, 167, 62, 169, 182, 55, 62, 98, 95, 207, 189, 165, 54, 205, 190, 12, 87, 239, 189, 84, 183, 143, 190, 95, 61, 168, 62, 211, 205, 185, 190, 116, 47, 101, 190, 187, 174, 59, 191, 212, 139, 224, 189, 195, 34, 40, 58, 126, 136, 84, 190, 211, 213, 190, 61, 210, 89, 5, 63, 121, 53, 239, 61, 200, 181, 66, 190, 219, 105, 34, 63, 194, 61, 206, 189, 57, 12, 243, 61, 250, 255, 115, 189, 141, 115, 170, 190, 169, 24, 26, 191, 3, 106, 249, 60, 101, 19, 169, 62, 216, 177, 133, 61, 222, 217, 29, 189, 161, 46, 109, 62, 31, 143, 232, 189, 193, 88, 140, 62, 42, 224, 4, 62, 228, 66, 254, 61, 125, 22, 132, 190, 17, 89, 241, 187, 145, 74, 51, 61, 44, 134, 129, 188, 118, 128, 163, 62, 173, 174, 52, 190, 222, 77, 46, 190, 241, 63, 45, 62, 125, 248, 190, 61, 121, 192, 106, 189, 201, 104, 220, 61, 181, 201, 68, 190, 100, 29, 212, 62, 20, 112, 5, 62, 230, 143, 153, 62, 42, 168, 44, 188, 95, 67, 122, 62, 77, 107, 187, 61, 130, 184, 151, 62, 149, 28, 43, 189, 208, 132, 212, 190, 7, 156, 32, 191, 9, 6, 209, 61, 89, 118, 115, 62, 18, 230, 141, 188, 193, 121, 109, 190, 59, 58, 186, 189, 94, 159, 72, 189, 224, 42, 97, 62, 119, 4, 82, 62, 3, 75, 66, 62, 253, 27, 224, 60, 161, 255, 80, 61, 133, 182, 28, 190, 79, 25, 39, 188, 94, 226, 113, 60, 113, 89, 109, 62, 39, 120, 149, 62, 149, 111, 68, 189, 165, 119, 42, 190, 232, 172, 36, 62, 78, 137, 56, 190, 72, 10, 160, 61, 88, 61, 187, 188, 153, 2, 70, 62, 65, 213, 50, 62, 192, 146, 8, 62, 47, 51, 244, 61, 252, 134, 15, 61, 0, 35, 113, 62, 235, 147, 98, 61, 202, 91, 28, 62, 142, 13, 77, 190, 43, 23, 100, 61, 107, 44, 249, 59, 192, 84, 4, 62, 174, 98, 63, 189, 120, 104, 116, 189, 155, 23, 14, 62, 37, 124, 192, 190, 162, 226, 228, 61, 210, 94, 247, 62, 37, 97, 186, 189, 238, 41, 54, 190, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 7, 84, 234, 189, 168, 188, 46, 190, 153, 138, 58, 62, 165, 86, 154, 61, 70, 195, 252, 61, 57, 46, 93, 191, 224, 141, 248, 189, 192, 157, 52, 190, 183, 82, 62, 190, 40, 191, 108, 62, 233, 127, 114, 190, 67, 216, 147, 62, 74, 203, 108, 189, 76, 119, 69, 191, 123, 105, 155, 190, 42, 226, 168, 62, 120, 214, 190, 190, 110, 118, 142, 62, 27, 76, 111, 61, 124, 218, 36, 191, 205, 188, 33, 190, 11, 216, 15, 62, 171, 2, 234, 61, 182, 9, 224, 191, 166, 189, 21, 191, 252, 119, 28, 189, 183, 199, 171, 189, 21, 42, 231, 61, 187, 48, 128, 62, 105, 163, 59, 62, 108, 220, 246, 189, 33, 252, 250, 188, 190, 178, 5, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 228, 231, 150, 189, 209, 119, 152, 189, 69, 66, 254, 189, 213, 44, 139, 60, 126, 165, 0, 190, 124, 239, 131, 189, 188, 222, 76, 190, 6, 232, 25, 190, 122, 123, 98, 187, 121, 142, 246, 58, 219, 186, 24, 62, 104, 52, 217, 60, 58, 77, 227, 189, 87, 206, 87, 188, 81, 29, 205, 189, 175, 0, 244, 189, 173, 191, 244, 189, 114, 128, 176, 188, 9, 100, 253, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 89, 192, 28, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 113, 98, 62, 192, 60, 40, 189, 13, 86, 29, 190, 182, 51, 18, 188, 154, 81, 79, 58, 245, 235, 63, 189, 192, 59, 132, 189, 250, 124, 6, 62, 52, 0, 107, 189, 240, 105, 136, 62, 44, 129, 242, 60, 7, 82, 201, 61, 157, 100, 130, 190, 111, 92, 63, 61, 62, 152, 129, 62, 220, 107, 37, 62, 215, 48, 24, 189, 206, 169, 161, 62, 14, 190, 160, 61, 43, 25, 72, 62, 11, 58, 133, 62, 240, 68, 74, 62, 28, 67, 74, 62, 129, 76, 158, 61, 31, 84, 6, 61, 73, 149, 51, 190, 20, 83, 182, 189, 191, 110, 215, 189, 190, 200, 222, 61, 163, 116, 88, 190, 111, 223, 173, 59, 14, 175, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 78, 95, 63, 57, 229, 163, 62, 90, 27, 149, 190, 224, 116, 211, 190, 204, 217, 181, 188, 13, 241, 174, 62, 176, 32, 80, 189, 180, 199, 28, 191, 78, 178, 142, 191, 206, 205, 64, 191, 50, 167, 237, 190, 51, 197, 174, 62, 2, 17, 11, 191, 231, 16, 232, 190, 120, 84, 172, 191, 36, 76, 150, 62, 168, 52, 56, 63, 135, 247, 234, 189, 186, 129, 150, 190, 125, 102, 184, 190, 144, 248, 171, 62, 83, 165, 14, 62, 114, 55, 76, 62, 75, 50, 182, 190, 217, 66, 1, 191, 252, 181, 22, 62, 122, 74, 223, 62, 91, 136, 182, 62, 198, 110, 40, 62, 188, 36, 246, 61, 130, 161, 61, 63, 48, 98, 57, 189, 42, 97, 152, 62, 220, 108, 123, 189, 140, 121, 46, 62, 202, 167, 187, 189, 212, 84, 22, 190, 56, 113, 0, 62, 29, 248, 143, 61, 114, 11, 165, 61, 54, 182, 140, 61, 8, 37, 168, 190, 232, 234, 33, 63, 123, 18, 178, 188, 42, 38, 12, 62, 206, 35, 139, 62, 226, 161, 19, 61, 26, 41, 74, 190, 142, 236, 17, 61, 212, 241, 187, 190, 78, 246, 170, 61, 27, 222, 28, 190, 242, 90, 234, 190, 21, 172, 100, 190, 66, 146, 20, 190, 170, 202, 168, 61, 141, 149, 193, 62, 117, 232, 1, 189, 201, 96, 161, 189, 196, 191, 7, 61, 117, 194, 247, 189, 23, 26, 158, 61, 168, 124, 148, 62, 192, 182, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 138, 172, 61, 91, 156, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {249, 132, 199, 189, 80, 113, 71, 63, 212, 249, 105, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 25, 95, 63, 58, 3, 19, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}