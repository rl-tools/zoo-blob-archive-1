// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 119, 90, 63, 173, 97, 89, 191, 91, 139, 160, 190, 20, 237, 21, 63, 198, 20, 6, 63, 102, 100, 31, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 83, 182, 173, 61, 143, 36, 159, 62, 189, 117, 52, 191, 39, 211, 180, 189, 113, 46, 83, 191, 43, 144, 133, 62, 84, 240, 141, 61, 174, 194, 107, 191, 15, 104, 252, 189, 73, 218, 160, 63, 81, 102, 154, 62, 232, 21, 68, 62, 36, 86, 20, 62, 97, 10, 247, 188, 127, 159, 16, 190, 97, 12, 133, 62, 62, 231, 153, 191, 202, 8, 35, 62, 76, 236, 78, 191, 218, 209, 65, 191, 172, 48, 74, 190, 98, 2, 250, 190, 4, 63, 210, 62, 179, 223, 240, 62, 42, 208, 153, 62, 28, 13, 173, 190, 5, 170, 17, 63, 234, 151, 107, 191, 113, 238, 144, 191, 55, 21, 156, 59, 150, 95, 106, 62, 110, 37, 139, 191, 164, 84, 197, 62, 249, 3, 51, 61, 104, 25, 203, 191, 48, 72, 143, 190, 142, 143, 154, 62, 137, 0, 78, 189, 102, 169, 4, 63, 44, 57, 84, 190, 245, 208, 44, 191, 185, 11, 16, 63, 118, 54, 236, 62, 116, 154, 142, 191, 164, 166, 124, 190, 167, 140, 252, 61, 76, 25, 73, 191, 26, 199, 178, 62, 105, 3, 241, 62, 46, 227, 102, 63, 4, 158, 6, 63, 114, 209, 82, 62, 114, 47, 27, 63, 208, 201, 245, 190, 110, 142, 234, 62, 118, 173, 48, 191, 38, 139, 61, 190, 16, 169, 135, 191, 102, 168, 11, 191, 23, 158, 106, 60, 174, 237, 60, 191, 158, 65, 37, 61, 159, 82, 70, 62, 217, 7, 50, 62, 85, 181, 175, 191, 160, 71, 183, 190, 243, 124, 68, 62, 247, 213, 45, 191, 151, 238, 104, 62, 109, 231, 213, 190, 127, 33, 189, 61, 144, 188, 113, 62, 182, 148, 20, 63, 130, 122, 228, 62, 45, 166, 143, 62, 201, 140, 101, 189, 195, 84, 176, 63, 92, 15, 166, 62, 32, 11, 127, 190, 207, 125, 217, 63, 8, 185, 159, 62, 93, 154, 30, 62, 91, 246, 25, 62, 255, 120, 9, 63, 203, 167, 131, 62, 10, 113, 151, 63, 26, 90, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 53, 34, 191, 145, 232, 25, 191, 48, 0, 19, 191, 21, 65, 227, 190, 175, 219, 101, 190, 82, 69, 2, 191, 209, 0, 107, 62, 44, 15, 115, 191, 237, 146, 8, 63, 231, 0, 62, 62, 255, 57, 42, 191, 180, 36, 131, 188, 161, 108, 67, 189, 215, 79, 40, 61, 45, 234, 187, 62, 101, 57, 84, 62, 67, 219, 189, 190, 246, 110, 216, 61, 172, 85, 222, 60, 229, 71, 75, 62, 236, 225, 102, 62, 139, 181, 48, 191, 198, 115, 99, 63, 217, 141, 30, 63, 49, 86, 194, 62, 66, 22, 34, 61, 47, 237, 212, 190, 241, 16, 30, 191, 72, 77, 115, 190, 53, 151, 153, 190, 187, 108, 62, 62, 53, 79, 141, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 3, 100, 62, 92, 187, 62, 191, 172, 51, 171, 60, 117, 224, 47, 62, 134, 64, 52, 62, 190, 17, 116, 190, 242, 241, 175, 61, 193, 159, 188, 62, 16, 2, 249, 62, 164, 52, 249, 190, 204, 166, 184, 61, 230, 13, 205, 190, 149, 162, 102, 61, 72, 123, 27, 62, 57, 52, 183, 62, 11, 183, 50, 190, 81, 67, 109, 62, 247, 141, 179, 62, 17, 70, 172, 62, 148, 101, 22, 59, 92, 157, 240, 188, 226, 30, 248, 190, 91, 68, 10, 62, 97, 109, 54, 62, 158, 35, 72, 61, 94, 194, 161, 61, 7, 144, 157, 190, 136, 41, 156, 191, 90, 142, 27, 190, 25, 133, 183, 189, 76, 125, 250, 61, 7, 104, 138, 191, 124, 100, 245, 62, 14, 154, 33, 59, 69, 4, 180, 58, 71, 228, 0, 63, 27, 243, 141, 62, 254, 13, 77, 190, 198, 190, 159, 190, 59, 36, 123, 60, 162, 206, 149, 62, 239, 119, 188, 190, 9, 64, 31, 62, 200, 244, 94, 189, 232, 74, 39, 60, 53, 150, 150, 61, 65, 230, 190, 61, 93, 11, 221, 189, 200, 137, 2, 62, 5, 63, 183, 62, 52, 56, 27, 62, 24, 112, 108, 62, 87, 220, 10, 62, 232, 37, 67, 190, 234, 21, 199, 188, 165, 13, 181, 61, 101, 174, 231, 190, 154, 172, 141, 190, 250, 1, 206, 189, 228, 15, 194, 190, 141, 71, 220, 62, 227, 197, 28, 63, 34, 68, 83, 62, 37, 130, 141, 190, 19, 223, 162, 62, 212, 88, 169, 61, 247, 157, 75, 60, 0, 97, 146, 190, 200, 156, 87, 62, 27, 49, 27, 63, 170, 18, 133, 61, 135, 81, 230, 61, 67, 75, 147, 62, 217, 75, 9, 62, 179, 197, 19, 61, 177, 120, 189, 61, 194, 216, 200, 190, 215, 150, 89, 62, 58, 209, 165, 186, 201, 255, 157, 61, 24, 22, 134, 61, 243, 252, 223, 190, 169, 173, 133, 62, 211, 76, 225, 189, 124, 116, 223, 190, 163, 10, 32, 63, 112, 80, 181, 190, 8, 72, 42, 190, 175, 8, 90, 189, 245, 5, 201, 62, 189, 97, 129, 61, 106, 145, 239, 62, 223, 188, 160, 61, 109, 216, 96, 190, 180, 104, 138, 62, 70, 21, 184, 188, 201, 142, 13, 63, 236, 180, 170, 61, 12, 215, 13, 62, 7, 148, 50, 187, 36, 226, 135, 62, 138, 8, 251, 62, 37, 56, 168, 62, 190, 151, 45, 62, 239, 81, 57, 62, 181, 234, 169, 62, 228, 159, 28, 62, 222, 72, 241, 60, 220, 165, 228, 188, 217, 191, 103, 62, 38, 215, 212, 61, 246, 26, 59, 62, 223, 188, 33, 61, 83, 202, 159, 188, 202, 96, 186, 62, 129, 104, 56, 189, 60, 209, 101, 190, 190, 12, 83, 63, 168, 167, 160, 190, 200, 245, 108, 190, 148, 122, 147, 62, 202, 127, 94, 62, 143, 0, 244, 60, 222, 59, 246, 61, 172, 8, 236, 189, 131, 17, 21, 191, 170, 178, 154, 62, 106, 247, 237, 189, 1, 66, 12, 62, 79, 89, 54, 190, 166, 39, 115, 189, 153, 177, 126, 189, 90, 163, 68, 189, 119, 39, 112, 189, 110, 201, 146, 189, 201, 210, 147, 189, 236, 249, 19, 61, 139, 250, 204, 188, 216, 116, 200, 189, 146, 6, 45, 61, 241, 30, 190, 189, 179, 71, 128, 61, 49, 236, 47, 190, 112, 236, 235, 189, 227, 123, 32, 59, 0, 115, 105, 189, 11, 82, 29, 62, 238, 86, 10, 189, 72, 27, 17, 187, 139, 92, 241, 189, 205, 23, 225, 189, 70, 253, 84, 62, 241, 251, 102, 189, 181, 208, 196, 189, 105, 86, 21, 190, 238, 26, 254, 61, 22, 138, 162, 60, 204, 246, 60, 62, 175, 208, 12, 189, 91, 192, 5, 188, 83, 15, 121, 62, 229, 223, 70, 190, 114, 120, 58, 61, 160, 208, 24, 62, 244, 251, 231, 189, 56, 27, 48, 191, 129, 93, 144, 62, 146, 79, 246, 62, 144, 156, 254, 188, 148, 143, 177, 189, 106, 40, 192, 61, 116, 125, 33, 61, 62, 172, 27, 191, 44, 236, 176, 189, 20, 249, 158, 190, 189, 53, 173, 189, 54, 3, 30, 62, 239, 121, 126, 62, 170, 64, 150, 190, 186, 20, 235, 189, 8, 114, 22, 62, 192, 194, 185, 190, 213, 225, 134, 190, 6, 78, 40, 62, 142, 134, 196, 61, 26, 93, 5, 189, 221, 31, 75, 190, 225, 97, 248, 61, 33, 253, 221, 190, 47, 213, 61, 191, 121, 239, 50, 190, 100, 121, 118, 190, 108, 126, 243, 189, 173, 92, 139, 188, 115, 132, 242, 61, 10, 31, 47, 60, 208, 110, 34, 61, 114, 140, 245, 61, 114, 12, 59, 60, 84, 42, 196, 189, 107, 113, 133, 60, 112, 116, 167, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 6, 33, 225, 61, 107, 229, 206, 189, 148, 86, 40, 61, 167, 147, 233, 189, 225, 141, 26, 190, 58, 35, 122, 189, 126, 57, 231, 186, 216, 144, 37, 190, 104, 18, 177, 189, 132, 79, 76, 189, 94, 63, 63, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 79, 35, 32, 62, 195, 80, 113, 189, 181, 6, 205, 189, 94, 240, 98, 59, 113, 12, 165, 191, 144, 5, 46, 190, 220, 211, 63, 60, 255, 57, 73, 190, 0, 186, 27, 191, 231, 103, 171, 190, 118, 210, 196, 62, 105, 157, 178, 190, 137, 25, 34, 191, 166, 215, 118, 62, 162, 130, 160, 190, 43, 20, 156, 189, 4, 56, 136, 190, 101, 57, 225, 190, 137, 181, 219, 190, 76, 35, 20, 61, 50, 66, 206, 190, 227, 37, 19, 191, 135, 129, 128, 190, 50, 228, 138, 61, 109, 102, 13, 63, 148, 40, 236, 187, 72, 228, 80, 62, 168, 181, 227, 190, 182, 49, 181, 189, 135, 217, 28, 190, 97, 22, 141, 59, 212, 237, 250, 190, 87, 178, 146, 191, 16, 58, 45, 191, 7, 115, 123, 190, 141, 8, 22, 62, 136, 220, 250, 190, 213, 106, 85, 190, 49, 41, 239, 187, 200, 26, 136, 191, 77, 18, 17, 190, 115, 63, 47, 59, 140, 27, 142, 62, 198, 128, 60, 190, 190, 167, 103, 62, 190, 40, 22, 62, 81, 147, 71, 191, 206, 118, 161, 188, 66, 38, 116, 62, 202, 39, 27, 190, 253, 219, 42, 62, 102, 213, 252, 60, 148, 227, 219, 189, 132, 146, 213, 190, 56, 40, 159, 189, 146, 180, 189, 191, 249, 176, 85, 191, 25, 147, 133, 189, 224, 226, 139, 62, 168, 208, 218, 62, 119, 241, 175, 190, 68, 77, 67, 63, 21, 35, 225, 62, 139, 244, 117, 61, 130, 115, 190, 191, 142, 112, 168, 190, 232, 255, 46, 190, 4, 59, 83, 190, 228, 138, 84, 191, 89, 209, 203, 61, 110, 131, 5, 62, 134, 203, 67, 188, 217, 112, 251, 190, 217, 190, 185, 191, 164, 126, 184, 62, 179, 213, 215, 190, 119, 184, 232, 61, 81, 106, 204, 189, 15, 28, 17, 189, 195, 239, 176, 62, 178, 176, 175, 190, 174, 9, 91, 62, 211, 113, 86, 190, 172, 105, 245, 61, 240, 174, 14, 191, 50, 176, 186, 190, 92, 159, 20, 62, 210, 231, 173, 61, 42, 207, 185, 62, 67, 194, 248, 191, 160, 188, 135, 190, 4, 51, 54, 191, 213, 99, 37, 190, 72, 118, 216, 62, 243, 117, 66, 61, 110, 159, 126, 61, 115, 154, 85, 191, 180, 186, 118, 191, 163, 107, 58, 61, 214, 43, 20, 62, 110, 97, 105, 191, 33, 91, 251, 190, 73, 139, 1, 61, 189, 158, 131, 62, 177, 207, 36, 190, 39, 197, 191, 61, 88, 114, 132, 62, 130, 165, 229, 188, 97, 236, 48, 190, 172, 248, 11, 190, 163, 150, 2, 191, 69, 91, 189, 190, 196, 107, 115, 190, 253, 175, 92, 189, 33, 241, 59, 191, 190, 27, 162, 60, 236, 225, 133, 189, 34, 179, 173, 190, 78, 209, 183, 189, 232, 29, 96, 62, 222, 229, 164, 61, 36, 132, 6, 188, 90, 252, 94, 62, 251, 169, 233, 190, 85, 120, 119, 190, 245, 24, 147, 190, 208, 254, 46, 190, 245, 125, 161, 190, 97, 88, 44, 191, 89, 145, 13, 191, 130, 148, 237, 61, 171, 135, 186, 61, 19, 112, 91, 190, 9, 57, 205, 190, 93, 159, 13, 190, 121, 77, 4, 190, 187, 252, 8, 62, 251, 145, 38, 189, 57, 37, 124, 190, 182, 156, 223, 189, 68, 211, 155, 62, 209, 94, 114, 190, 50, 245, 178, 61, 47, 62, 91, 190, 250, 163, 199, 62, 197, 113, 107, 62, 32, 38, 10, 63, 156, 29, 203, 189, 255, 164, 173, 61, 69, 120, 99, 62, 214, 98, 88, 62, 191, 63, 83, 190, 221, 96, 41, 191, 95, 244, 234, 190, 8, 151, 50, 62, 242, 216, 88, 62, 157, 201, 148, 61, 224, 84, 21, 190, 112, 26, 32, 190, 65, 15, 93, 191, 155, 115, 35, 190, 3, 1, 206, 188, 39, 232, 13, 62, 15, 115, 117, 191, 94, 152, 198, 62, 11, 156, 190, 61, 251, 218, 173, 188, 204, 181, 87, 62, 183, 137, 82, 190, 220, 244, 7, 189, 104, 36, 137, 189, 93, 126, 18, 63, 31, 93, 39, 191, 76, 26, 133, 190, 112, 186, 24, 188, 89, 54, 91, 61, 87, 33, 189, 189, 246, 142, 157, 190, 2, 94, 178, 189, 135, 143, 110, 190, 45, 212, 58, 187, 37, 27, 80, 62, 37, 12, 173, 190, 200, 200, 138, 190, 30, 180, 3, 190, 201, 54, 177, 62, 220, 27, 75, 190, 103, 207, 44, 190, 213, 8, 225, 189, 70, 50, 191, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 128, 81, 153, 190, 238, 123, 123, 189, 100, 69, 85, 191, 90, 175, 11, 189, 56, 236, 77, 190, 16, 38, 62, 189, 170, 239, 188, 189, 232, 241, 113, 62, 223, 167, 154, 190, 128, 214, 16, 62, 125, 229, 157, 62, 197, 81, 81, 190, 21, 229, 165, 189, 194, 85, 224, 62, 69, 31, 128, 62, 220, 18, 210, 62, 68, 10, 164, 190, 163, 188, 159, 61, 229, 139, 22, 61, 200, 83, 191, 61, 108, 233, 179, 191, 188, 90, 150, 190, 37, 41, 162, 190, 170, 188, 28, 62, 244, 48, 250, 61, 86, 248, 251, 61, 10, 34, 194, 62, 61, 80, 144, 190, 15, 209, 134, 191, 212, 17, 202, 190, 255, 98, 161, 190, 190, 19, 170, 190, 43, 150, 104, 191, 120, 178, 124, 191, 22, 31, 9, 60, 83, 183, 48, 190, 198, 146, 129, 190, 120, 62, 84, 191, 35, 37, 8, 62, 93, 29, 205, 62, 46, 20, 239, 190, 250, 137, 243, 190, 203, 142, 206, 62, 212, 231, 19, 191, 89, 240, 4, 62, 159, 164, 90, 63, 44, 168, 46, 191, 122, 150, 144, 62, 213, 197, 223, 61, 214, 41, 0, 62, 141, 168, 199, 190, 87, 67, 145, 190, 150, 133, 141, 191, 159, 57, 156, 62, 61, 240, 54, 190, 245, 11, 29, 63, 71, 156, 233, 188, 60, 3, 224, 189, 215, 106, 196, 62, 108, 52, 234, 62, 148, 73, 171, 189, 100, 222, 159, 191, 176, 34, 3, 190, 157, 48, 206, 190, 255, 151, 32, 63, 189, 251, 161, 60, 193, 74, 197, 189, 125, 104, 23, 62, 213, 80, 54, 62, 11, 73, 141, 62, 103, 26, 11, 189, 238, 173, 35, 190, 153, 214, 36, 62, 64, 42, 98, 62, 99, 154, 82, 190, 70, 233, 12, 188, 174, 62, 124, 190, 243, 175, 17, 189, 202, 90, 77, 62, 162, 172, 246, 61, 111, 79, 206, 61, 32, 156, 135, 62, 189, 118, 135, 62, 115, 137, 68, 62, 193, 121, 153, 59, 69, 37, 102, 62, 3, 205, 15, 191, 230, 197, 56, 62, 213, 1, 2, 61, 88, 76, 62, 60, 11, 68, 139, 190, 92, 153, 206, 60, 25, 33, 19, 191, 25, 78, 85, 188, 48, 174, 17, 62, 79, 16, 9, 62, 245, 12, 152, 190, 199, 69, 223, 189, 82, 58, 236, 189, 48, 211, 247, 188, 59, 217, 199, 190, 86, 193, 210, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 61, 148, 142, 190, 202, 209, 229, 61, 111, 163, 37, 189, 108, 1, 84, 190, 3, 172, 202, 61, 116, 200, 243, 61, 59, 41, 220, 190, 201, 144, 128, 190, 164, 247, 15, 189, 164, 162, 185, 61, 105, 153, 163, 61, 40, 240, 21, 190, 132, 143, 196, 189, 177, 10, 236, 61, 95, 89, 14, 62, 142, 106, 102, 188, 36, 166, 220, 191, 39, 88, 145, 189, 144, 58, 176, 62, 72, 62, 79, 61, 113, 106, 248, 190, 24, 228, 222, 61, 166, 250, 161, 61, 150, 178, 36, 191, 17, 226, 196, 190, 166, 51, 118, 191, 83, 134, 169, 61, 100, 98, 243, 189, 134, 156, 195, 189, 203, 185, 153, 62, 90, 160, 241, 188, 133, 164, 216, 190, 182, 189, 130, 188, 171, 52, 132, 60, 162, 91, 135, 62, 39, 147, 221, 190, 88, 195, 169, 62, 8, 43, 123, 190, 217, 174, 3, 62, 130, 202, 77, 190, 255, 42, 235, 186, 92, 159, 112, 61, 178, 148, 4, 190, 236, 55, 35, 190, 21, 231, 129, 62, 184, 90, 18, 189, 189, 127, 250, 62, 158, 70, 183, 62, 183, 149, 159, 62, 131, 246, 203, 61, 37, 51, 250, 62, 58, 33, 156, 191, 243, 18, 151, 190, 21, 87, 21, 190, 47, 253, 139, 190, 109, 179, 21, 190, 16, 33, 89, 190, 48, 126, 142, 188, 212, 147, 31, 62, 150, 164, 20, 190, 202, 29, 247, 190, 40, 146, 177, 188, 209, 14, 40, 189, 254, 204, 159, 190, 100, 37, 28, 191, 39, 174, 132, 62, 48, 29, 99, 62, 53, 166, 172, 60, 80, 190, 24, 63, 55, 179, 177, 190, 195, 70, 157, 61, 121, 185, 114, 62, 19, 173, 22, 62, 213, 154, 113, 190, 148, 154, 15, 190, 230, 122, 62, 191, 25, 9, 197, 61, 40, 53, 220, 62, 180, 240, 193, 62, 54, 109, 149, 62, 0, 207, 6, 186, 165, 215, 17, 191, 135, 248, 168, 62, 30, 174, 94, 60, 230, 94, 178, 190, 154, 176, 106, 62, 218, 132, 184, 59, 57, 27, 174, 62, 62, 172, 146, 59, 192, 31, 206, 61, 221, 132, 26, 190, 4, 169, 148, 190, 56, 140, 68, 191, 213, 157, 165, 61, 177, 227, 196, 62, 68, 160, 230, 190, 65, 117, 40, 190, 171, 137, 11, 189, 201, 10, 162, 190, 57, 35, 46, 62, 51, 41, 157, 62, 190, 134, 138, 61, 214, 211, 79, 62, 37, 12, 24, 62, 162, 94, 14, 191, 75, 15, 188, 187, 199, 244, 231, 189, 7, 155, 57, 61, 171, 68, 83, 62, 229, 241, 10, 62, 200, 52, 82, 189, 176, 8, 6, 191, 108, 2, 129, 185, 49, 147, 43, 62, 245, 118, 65, 190, 174, 175, 6, 190, 21, 143, 77, 191, 126, 130, 34, 191, 235, 30, 166, 61, 90, 167, 229, 188, 170, 152, 205, 190, 207, 234, 129, 190, 204, 60, 226, 189, 223, 97, 222, 189, 89, 232, 107, 62, 212, 40, 201, 190, 124, 184, 95, 62, 133, 59, 11, 190, 156, 146, 81, 60, 205, 105, 246, 190, 195, 194, 14, 188, 235, 212, 238, 60, 211, 140, 54, 62, 153, 21, 3, 62, 117, 193, 102, 62, 136, 220, 10, 190, 88, 6, 82, 188, 210, 131, 91, 60, 163, 230, 189, 189, 66, 213, 123, 61, 93, 149, 181, 62, 164, 184, 154, 191, 68, 194, 229, 61, 188, 143, 160, 61, 168, 76, 68, 189, 204, 203, 149, 62, 94, 151, 62, 190, 100, 201, 179, 191, 249, 133, 28, 191, 99, 219, 36, 191, 130, 198, 201, 61, 214, 68, 89, 191, 123, 97, 179, 190, 204, 90, 196, 188, 112, 26, 72, 60, 234, 240, 14, 190, 116, 24, 5, 62, 160, 254, 138, 62, 185, 7, 158, 62, 239, 137, 20, 191, 72, 147, 7, 61, 116, 188, 147, 190, 61, 164, 154, 61, 37, 226, 11, 190, 18, 123, 103, 62, 241, 202, 31, 62, 21, 222, 106, 62, 19, 18, 24, 190, 43, 22, 26, 61, 108, 171, 19, 189, 94, 9, 132, 61, 216, 163, 83, 59, 12, 184, 108, 62, 111, 69, 139, 190, 221, 152, 32, 189, 254, 210, 4, 62, 225, 175, 97, 189, 192, 75, 20, 189, 81, 46, 22, 190, 232, 167, 202, 190, 111, 41, 115, 61, 77, 117, 134, 62, 116, 138, 179, 61, 238, 158, 179, 189, 66, 129, 218, 61, 192, 108, 0, 190, 248, 91, 82, 61, 31, 220, 132, 62, 0, 74, 199, 61, 150, 73, 113, 190, 3, 252, 173, 189, 158, 175, 96, 62, 80, 6, 166, 60, 73, 37, 0, 190, 178, 65, 154, 189, 1, 1, 1, 190, 225, 32, 228, 61, 97, 252, 221, 188, 62, 142, 63, 190, 81, 133, 14, 190, 151, 109, 157, 61, 11, 74, 135, 62, 110, 138, 198, 189, 78, 191, 132, 62, 47, 154, 163, 62, 193, 72, 243, 190, 104, 46, 3, 190, 192, 124, 141, 62, 252, 205, 192, 189, 148, 234, 137, 190, 212, 182, 184, 61, 151, 186, 79, 190, 192, 67, 173, 62, 241, 186, 251, 62, 16, 99, 201, 61, 98, 101, 130, 62, 16, 134, 101, 191, 185, 70, 87, 61, 222, 47, 35, 190, 85, 127, 19, 62, 85, 41, 149, 61, 168, 53, 150, 63, 138, 224, 212, 62, 217, 102, 232, 190, 234, 244, 48, 61, 71, 61, 232, 62, 66, 88, 145, 189, 13, 164, 130, 62, 74, 92, 32, 189, 104, 191, 130, 62, 155, 34, 75, 190, 103, 86, 214, 61, 87, 98, 188, 60, 230, 165, 33, 191, 202, 207, 122, 61, 202, 246, 135, 61, 62, 1, 184, 188, 75, 160, 133, 189, 10, 170, 133, 190, 188, 49, 141, 61, 192, 115, 63, 190, 172, 220, 243, 61, 91, 27, 216, 189, 64, 27, 235, 62, 110, 255, 7, 190, 57, 192, 7, 191, 51, 9, 3, 62, 22, 198, 175, 59, 177, 142, 200, 190, 125, 203, 87, 60, 13, 221, 172, 189, 29, 75, 108, 191, 154, 173, 190, 190, 193, 227, 79, 190, 106, 105, 49, 190, 44, 165, 147, 189, 33, 170, 192, 189, 178, 42, 63, 61, 14, 128, 225, 60, 46, 253, 21, 189, 160, 154, 43, 62, 76, 110, 2, 190, 150, 236, 117, 189, 28, 111, 87, 61, 148, 117, 240, 60, 236, 235, 65, 191, 29, 172, 221, 187, 136, 253, 34, 191, 204, 192, 130, 190, 101, 231, 219, 189, 116, 63, 39, 61, 120, 227, 185, 188, 250, 56, 176, 190, 172, 134, 213, 62, 18, 45, 3, 63, 221, 70, 36, 61, 81, 176, 53, 191, 255, 31, 138, 190, 163, 59, 23, 190, 206, 161, 78, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 153, 183, 112, 62, 192, 200, 103, 62, 98, 95, 207, 189, 11, 117, 61, 190, 51, 48, 26, 60, 28, 137, 176, 189, 140, 252, 176, 62, 84, 216, 4, 191, 121, 9, 128, 190, 66, 50, 41, 191, 56, 143, 41, 190, 104, 156, 241, 60, 101, 52, 218, 60, 235, 249, 247, 60, 58, 233, 3, 63, 8, 141, 48, 62, 173, 86, 249, 189, 65, 77, 30, 63, 186, 88, 29, 190, 152, 159, 78, 62, 74, 9, 78, 62, 167, 232, 14, 190, 175, 181, 246, 190, 239, 129, 221, 61, 220, 79, 172, 62, 3, 223, 15, 61, 189, 193, 15, 189, 56, 120, 149, 62, 159, 187, 108, 61, 24, 252, 4, 63, 234, 94, 35, 62, 120, 26, 163, 62, 67, 227, 152, 190, 116, 100, 133, 189, 145, 74, 51, 61, 126, 47, 177, 189, 166, 2, 185, 62, 32, 202, 52, 190, 25, 182, 160, 190, 86, 138, 55, 190, 68, 69, 36, 62, 53, 144, 17, 190, 175, 146, 74, 61, 184, 95, 60, 190, 9, 91, 6, 63, 179, 194, 35, 62, 114, 144, 27, 63, 134, 106, 176, 188, 76, 60, 133, 62, 235, 143, 143, 62, 174, 239, 162, 62, 183, 194, 3, 190, 20, 76, 16, 191, 118, 213, 48, 191, 115, 43, 2, 62, 32, 245, 68, 62, 8, 197, 28, 62, 206, 229, 36, 190, 3, 24, 170, 189, 106, 114, 174, 190, 141, 96, 187, 60, 204, 106, 40, 61, 193, 90, 30, 62, 143, 5, 159, 190, 105, 254, 7, 190, 255, 112, 48, 190, 79, 25, 39, 188, 234, 94, 74, 189, 85, 17, 136, 62, 146, 214, 220, 62, 16, 142, 42, 189, 56, 73, 208, 190, 123, 129, 207, 61, 244, 30, 135, 190, 251, 3, 83, 187, 60, 67, 113, 189, 154, 83, 161, 62, 119, 178, 170, 61, 105, 65, 150, 61, 135, 239, 219, 61, 255, 111, 177, 60, 250, 69, 41, 62, 138, 23, 2, 189, 156, 93, 74, 62, 71, 250, 195, 188, 10, 254, 60, 62, 200, 147, 252, 60, 198, 137, 238, 61, 58, 117, 11, 190, 77, 142, 222, 189, 228, 37, 219, 61, 151, 48, 223, 190, 167, 40, 43, 62, 122, 182, 27, 63, 218, 168, 1, 190, 9, 97, 7, 59, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 33, 1, 139, 189, 168, 188, 46, 190, 46, 143, 43, 62, 137, 18, 222, 61, 70, 195, 252, 61, 225, 95, 141, 191, 224, 141, 248, 189, 165, 24, 77, 190, 244, 200, 158, 190, 234, 222, 147, 62, 116, 212, 83, 190, 111, 206, 154, 62, 36, 55, 4, 189, 27, 104, 89, 191, 145, 140, 147, 190, 116, 213, 195, 62, 120, 214, 190, 190, 1, 175, 154, 62, 108, 184, 78, 61, 65, 177, 3, 191, 205, 188, 33, 190, 85, 132, 0, 62, 130, 215, 236, 61, 244, 240, 232, 191, 142, 222, 14, 191, 132, 222, 47, 61, 130, 41, 74, 189, 172, 32, 51, 62, 139, 144, 147, 62, 54, 14, 70, 62, 15, 255, 227, 189, 33, 252, 250, 188, 145, 81, 3, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 152, 195, 153, 189, 209, 119, 152, 189, 169, 74, 254, 189, 213, 44, 139, 60, 149, 41, 2, 190, 32, 192, 135, 189, 188, 222, 76, 190, 126, 101, 26, 190, 122, 123, 98, 187, 223, 92, 146, 185, 90, 166, 23, 62, 104, 52, 217, 60, 250, 139, 228, 189, 13, 46, 133, 188, 81, 29, 205, 189, 175, 0, 244, 189, 240, 28, 245, 189, 126, 24, 186, 188, 9, 100, 253, 189, 196, 230, 122, 61, 29, 244, 183, 189, 246, 204, 119, 61, 193, 166, 215, 61, 90, 32, 31, 190, 125, 189, 6, 62, 52, 105, 123, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 48, 131, 62, 176, 94, 91, 189, 157, 161, 51, 190, 128, 141, 227, 188, 218, 144, 208, 60, 144, 202, 234, 188, 222, 49, 168, 189, 49, 219, 94, 62, 187, 135, 94, 61, 85, 233, 142, 62, 51, 77, 225, 61, 70, 202, 206, 61, 90, 36, 173, 190, 115, 187, 88, 61, 29, 195, 156, 62, 62, 56, 100, 62, 146, 117, 53, 189, 50, 169, 151, 62, 68, 119, 197, 61, 57, 53, 43, 62, 8, 42, 149, 62, 91, 76, 90, 62, 195, 104, 89, 62, 188, 7, 179, 60, 158, 25, 2, 188, 73, 149, 51, 190, 49, 187, 194, 188, 173, 200, 29, 190, 29, 165, 26, 62, 163, 116, 88, 190, 45, 143, 202, 189, 254, 154, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 97, 62, 63, 234, 97, 207, 62, 108, 175, 169, 190, 75, 140, 218, 190, 104, 255, 132, 60, 243, 100, 129, 62, 211, 51, 55, 189, 175, 165, 148, 191, 111, 129, 190, 191, 223, 62, 49, 191, 188, 181, 121, 191, 47, 214, 71, 63, 54, 189, 19, 191, 25, 94, 34, 191, 131, 165, 203, 191, 203, 166, 87, 62, 160, 137, 83, 63, 219, 31, 134, 190, 220, 198, 36, 191, 109, 82, 152, 190, 102, 172, 186, 62, 28, 77, 152, 61, 113, 194, 104, 62, 0, 39, 134, 190, 56, 2, 20, 191, 252, 181, 22, 62, 71, 168, 206, 62, 178, 93, 216, 62, 164, 29, 222, 61, 188, 36, 246, 61, 49, 156, 74, 63, 29, 70, 57, 189, 96, 240, 191, 62, 47, 220, 81, 189, 35, 238, 217, 61, 203, 243, 20, 190, 36, 225, 42, 190, 205, 121, 109, 188, 52, 255, 148, 61, 210, 69, 148, 190, 242, 232, 248, 189, 98, 207, 17, 191, 84, 56, 96, 62, 127, 14, 204, 189, 25, 244, 144, 62, 210, 208, 77, 62, 134, 51, 106, 62, 233, 114, 132, 190, 136, 253, 220, 61, 120, 208, 248, 190, 249, 203, 102, 62, 189, 8, 20, 190, 250, 98, 208, 190, 150, 143, 98, 190, 179, 249, 51, 190, 164, 171, 103, 189, 69, 230, 160, 62, 117, 232, 1, 189, 91, 150, 132, 189, 231, 64, 243, 188, 58, 150, 228, 189, 23, 26, 158, 61, 214, 70, 170, 62, 225, 181, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 149, 7, 62, 136, 75, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {48, 234, 108, 191, 65, 158, 131, 190, 6, 118, 9, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 10, 218, 192, 227, 109, 34, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}