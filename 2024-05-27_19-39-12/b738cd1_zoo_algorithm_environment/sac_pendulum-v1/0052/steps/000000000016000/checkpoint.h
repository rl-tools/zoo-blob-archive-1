// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 11, 86, 63, 100, 17, 92, 191, 139, 241, 162, 190, 220, 82, 28, 63, 169, 153, 10, 63, 105, 205, 28, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 160, 39, 228, 61, 76, 107, 174, 62, 249, 168, 57, 191, 56, 97, 171, 189, 70, 18, 73, 191, 202, 212, 131, 62, 162, 33, 65, 62, 106, 16, 120, 191, 159, 21, 10, 190, 184, 232, 162, 63, 84, 41, 156, 62, 119, 122, 70, 62, 67, 23, 203, 61, 31, 9, 32, 58, 55, 151, 68, 190, 104, 162, 93, 62, 40, 47, 152, 191, 92, 140, 40, 62, 135, 101, 36, 191, 241, 80, 65, 191, 56, 239, 81, 190, 170, 86, 2, 191, 173, 236, 213, 62, 13, 135, 2, 63, 23, 247, 156, 62, 36, 125, 145, 190, 17, 82, 16, 63, 185, 252, 79, 191, 136, 147, 141, 191, 2, 36, 160, 60, 150, 135, 84, 62, 66, 130, 132, 191, 28, 9, 210, 62, 135, 172, 96, 61, 69, 9, 203, 191, 144, 198, 141, 190, 27, 3, 180, 62, 4, 56, 17, 61, 76, 89, 4, 63, 43, 179, 156, 190, 198, 85, 16, 191, 166, 127, 10, 63, 118, 101, 238, 62, 163, 177, 143, 191, 147, 233, 132, 190, 112, 180, 250, 61, 249, 107, 53, 191, 118, 123, 182, 62, 183, 75, 244, 62, 130, 234, 77, 63, 235, 128, 16, 63, 36, 219, 93, 62, 240, 45, 27, 63, 253, 114, 240, 190, 193, 231, 18, 63, 90, 109, 71, 191, 42, 252, 75, 190, 158, 97, 122, 191, 204, 157, 231, 190, 1, 81, 8, 188, 236, 65, 54, 191, 176, 24, 57, 61, 251, 200, 43, 62, 188, 174, 61, 62, 78, 111, 177, 191, 223, 188, 193, 190, 148, 244, 75, 62, 246, 69, 49, 191, 116, 99, 80, 62, 221, 126, 231, 190, 10, 168, 38, 188, 31, 48, 142, 62, 129, 134, 25, 63, 139, 199, 238, 62, 155, 119, 134, 62, 66, 109, 66, 189, 121, 65, 166, 63, 113, 251, 143, 62, 118, 73, 74, 190, 14, 150, 202, 63, 125, 236, 145, 62, 203, 214, 128, 62, 78, 110, 59, 62, 50, 135, 12, 63, 156, 110, 121, 62, 221, 104, 149, 63, 232, 69, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 166, 33, 191, 95, 156, 12, 191, 48, 0, 19, 191, 241, 57, 226, 190, 48, 45, 29, 190, 199, 84, 236, 190, 164, 169, 130, 62, 66, 140, 98, 191, 31, 100, 8, 63, 26, 150, 144, 62, 57, 3, 26, 191, 118, 140, 83, 187, 91, 167, 208, 189, 5, 83, 187, 61, 220, 165, 185, 62, 225, 206, 140, 62, 70, 162, 221, 190, 126, 96, 241, 61, 230, 59, 217, 61, 88, 244, 103, 62, 188, 197, 130, 62, 39, 236, 28, 191, 118, 225, 98, 63, 166, 75, 26, 63, 83, 225, 205, 62, 76, 19, 196, 61, 129, 176, 173, 190, 195, 186, 20, 191, 90, 147, 116, 190, 123, 39, 147, 190, 139, 2, 156, 62, 44, 100, 98, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 250, 139, 62, 189, 19, 58, 191, 172, 51, 171, 60, 117, 79, 66, 62, 216, 210, 0, 62, 46, 220, 140, 190, 169, 73, 191, 61, 58, 240, 186, 62, 95, 84, 254, 62, 100, 235, 245, 190, 145, 165, 146, 61, 164, 58, 206, 190, 4, 177, 154, 60, 244, 212, 55, 62, 106, 196, 207, 62, 78, 62, 58, 190, 26, 172, 60, 62, 47, 45, 202, 62, 192, 123, 185, 62, 248, 96, 31, 188, 71, 61, 143, 189, 29, 177, 19, 191, 82, 188, 207, 61, 143, 253, 27, 62, 125, 83, 180, 61, 99, 149, 161, 61, 237, 63, 177, 190, 150, 10, 151, 191, 215, 72, 216, 188, 38, 35, 137, 61, 124, 73, 4, 62, 63, 182, 143, 191, 133, 236, 3, 63, 214, 2, 40, 188, 69, 4, 180, 58, 75, 181, 0, 63, 112, 89, 116, 62, 51, 169, 138, 190, 100, 224, 118, 190, 222, 182, 80, 60, 101, 38, 143, 62, 112, 101, 185, 190, 62, 94, 40, 62, 120, 201, 130, 189, 130, 55, 249, 188, 178, 212, 121, 61, 253, 154, 104, 61, 252, 41, 244, 189, 39, 165, 226, 61, 32, 204, 206, 62, 204, 54, 17, 62, 75, 142, 78, 62, 109, 209, 228, 61, 196, 1, 128, 190, 62, 143, 117, 189, 188, 129, 84, 61, 145, 147, 222, 190, 121, 99, 150, 190, 24, 34, 218, 189, 98, 42, 185, 190, 105, 171, 141, 62, 148, 44, 210, 62, 108, 185, 73, 62, 221, 84, 192, 190, 183, 75, 8, 62, 30, 145, 134, 61, 247, 157, 75, 60, 30, 135, 142, 190, 86, 132, 135, 62, 66, 115, 72, 63, 153, 204, 21, 61, 135, 81, 230, 61, 91, 188, 132, 62, 198, 18, 182, 62, 29, 85, 41, 61, 161, 232, 150, 61, 160, 235, 153, 190, 27, 3, 55, 62, 139, 160, 194, 188, 114, 115, 138, 61, 103, 129, 202, 61, 128, 224, 1, 191, 92, 66, 107, 62, 192, 55, 224, 189, 52, 86, 55, 190, 143, 156, 50, 63, 46, 75, 119, 190, 34, 79, 222, 189, 21, 255, 196, 189, 244, 190, 189, 62, 94, 50, 185, 61, 12, 196, 222, 62, 30, 31, 200, 61, 15, 175, 32, 190, 211, 28, 132, 62, 233, 148, 140, 61, 4, 147, 236, 62, 37, 219, 122, 61, 12, 215, 13, 62, 130, 167, 210, 189, 161, 93, 155, 62, 61, 107, 9, 63, 229, 151, 162, 62, 38, 204, 52, 62, 11, 21, 44, 62, 84, 23, 175, 62, 77, 89, 41, 62, 94, 188, 228, 60, 30, 39, 245, 59, 168, 204, 67, 62, 96, 255, 131, 61, 154, 213, 67, 62, 56, 255, 146, 61, 71, 87, 135, 189, 140, 158, 169, 62, 148, 177, 227, 188, 47, 193, 85, 190, 252, 242, 108, 63, 253, 208, 124, 190, 87, 226, 71, 190, 159, 217, 117, 62, 193, 59, 88, 62, 76, 76, 133, 61, 189, 168, 142, 61, 149, 7, 206, 189, 156, 82, 2, 191, 233, 107, 152, 62, 33, 161, 91, 189, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 28, 114, 78, 188, 69, 52, 64, 189, 119, 39, 112, 189, 143, 149, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 187, 34, 134, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 41, 136, 183, 189, 104, 226, 235, 59, 139, 92, 241, 189, 104, 93, 39, 190, 68, 24, 14, 62, 250, 204, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 238, 98, 59, 189, 69, 79, 236, 61, 100, 172, 87, 189, 113, 97, 129, 189, 0, 219, 157, 62, 77, 15, 211, 189, 114, 120, 58, 61, 71, 155, 47, 62, 160, 69, 232, 189, 241, 105, 47, 191, 177, 28, 125, 62, 6, 242, 241, 62, 149, 5, 140, 188, 175, 76, 154, 189, 106, 40, 192, 61, 8, 148, 110, 61, 100, 185, 20, 191, 127, 208, 132, 61, 239, 51, 103, 190, 104, 155, 220, 189, 175, 253, 29, 62, 179, 1, 139, 62, 63, 136, 251, 189, 22, 220, 42, 190, 161, 58, 229, 61, 161, 27, 183, 190, 210, 97, 108, 190, 6, 222, 81, 62, 81, 73, 2, 62, 98, 152, 245, 57, 221, 31, 75, 190, 71, 220, 129, 61, 201, 201, 118, 190, 62, 23, 206, 190, 72, 23, 57, 190, 69, 58, 175, 190, 108, 126, 243, 189, 173, 92, 139, 188, 115, 132, 242, 61, 10, 31, 47, 60, 208, 110, 34, 61, 114, 140, 245, 61, 114, 12, 59, 60, 84, 42, 196, 189, 107, 113, 133, 60, 112, 116, 167, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 6, 33, 225, 61, 107, 229, 206, 189, 148, 86, 40, 61, 167, 147, 233, 189, 225, 141, 26, 190, 58, 35, 122, 189, 126, 57, 231, 186, 216, 144, 37, 190, 104, 18, 177, 189, 132, 79, 76, 189, 94, 63, 63, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 79, 35, 32, 62, 195, 80, 113, 189, 181, 6, 205, 189, 94, 240, 98, 59, 171, 246, 166, 191, 229, 33, 116, 189, 220, 211, 63, 60, 6, 13, 88, 190, 0, 186, 27, 191, 85, 93, 170, 190, 46, 124, 201, 62, 111, 156, 185, 190, 126, 2, 25, 191, 58, 183, 91, 62, 162, 130, 160, 190, 182, 180, 139, 60, 225, 224, 90, 190, 92, 81, 174, 190, 25, 32, 225, 190, 170, 82, 160, 61, 50, 66, 206, 190, 167, 68, 21, 191, 120, 88, 29, 190, 55, 181, 221, 61, 7, 58, 13, 63, 70, 130, 156, 186, 79, 17, 87, 62, 133, 233, 51, 190, 156, 48, 214, 189, 133, 42, 94, 189, 97, 22, 141, 59, 206, 226, 181, 190, 72, 92, 98, 191, 47, 118, 214, 190, 28, 166, 106, 190, 5, 28, 66, 62, 195, 98, 199, 190, 6, 243, 83, 190, 49, 41, 239, 187, 100, 211, 88, 191, 127, 64, 250, 189, 250, 100, 74, 60, 91, 68, 68, 62, 198, 128, 60, 190, 206, 137, 101, 62, 164, 242, 228, 61, 164, 176, 58, 191, 68, 122, 195, 61, 175, 70, 88, 62, 17, 45, 252, 189, 120, 163, 9, 62, 187, 166, 16, 62, 37, 241, 61, 188, 127, 42, 227, 190, 16, 254, 44, 189, 180, 98, 182, 191, 123, 247, 15, 191, 200, 193, 86, 61, 139, 63, 134, 62, 165, 162, 224, 62, 225, 5, 195, 190, 56, 193, 75, 63, 115, 38, 3, 63, 156, 245, 101, 61, 3, 39, 186, 191, 122, 122, 96, 190, 150, 255, 138, 189, 26, 168, 69, 190, 76, 217, 111, 191, 213, 183, 252, 60, 110, 131, 5, 62, 219, 210, 155, 189, 215, 73, 232, 190, 24, 41, 174, 191, 148, 206, 185, 62, 37, 59, 224, 190, 17, 111, 161, 61, 164, 253, 252, 189, 127, 236, 137, 188, 205, 99, 159, 62, 208, 113, 137, 190, 141, 97, 6, 62, 194, 209, 152, 190, 103, 185, 223, 61, 114, 159, 6, 191, 68, 116, 211, 190, 39, 151, 123, 61, 56, 177, 208, 61, 26, 125, 195, 62, 213, 101, 246, 191, 12, 90, 102, 190, 200, 50, 42, 191, 6, 56, 91, 190, 73, 59, 198, 62, 244, 125, 194, 61, 242, 77, 113, 188, 189, 244, 72, 191, 152, 179, 111, 191, 118, 99, 135, 60, 58, 236, 85, 62, 9, 117, 103, 191, 255, 190, 194, 190, 73, 139, 1, 61, 167, 111, 129, 62, 177, 207, 36, 190, 39, 197, 191, 61, 72, 245, 139, 62, 120, 52, 230, 188, 136, 140, 14, 190, 116, 209, 31, 190, 163, 150, 2, 191, 4, 45, 142, 190, 87, 6, 67, 190, 45, 10, 3, 61, 24, 38, 59, 191, 40, 192, 119, 61, 236, 225, 133, 189, 129, 164, 168, 190, 170, 18, 16, 59, 52, 194, 133, 62, 78, 22, 168, 61, 36, 132, 6, 188, 114, 113, 54, 62, 74, 136, 106, 190, 192, 5, 112, 190, 50, 123, 69, 190, 208, 254, 46, 190, 159, 119, 55, 190, 137, 6, 15, 191, 27, 78, 236, 190, 107, 97, 12, 62, 106, 205, 239, 61, 197, 103, 120, 190, 62, 177, 199, 190, 93, 159, 13, 190, 74, 78, 152, 189, 145, 8, 221, 61, 153, 193, 222, 189, 159, 152, 37, 190, 118, 87, 165, 189, 198, 55, 145, 62, 33, 89, 86, 190, 14, 221, 0, 62, 16, 73, 97, 190, 129, 197, 203, 62, 102, 180, 92, 62, 180, 45, 241, 62, 190, 166, 188, 189, 45, 167, 157, 61, 132, 102, 88, 62, 50, 208, 76, 62, 109, 106, 41, 190, 108, 84, 25, 191, 198, 127, 22, 191, 138, 9, 48, 62, 41, 113, 107, 62, 162, 155, 126, 61, 8, 104, 45, 190, 144, 209, 16, 190, 91, 204, 77, 191, 50, 93, 188, 188, 90, 231, 26, 61, 40, 11, 30, 62, 122, 191, 74, 191, 94, 152, 198, 62, 11, 156, 190, 61, 251, 218, 173, 188, 204, 181, 87, 62, 183, 137, 82, 190, 220, 244, 7, 189, 104, 36, 137, 189, 93, 126, 18, 63, 31, 93, 39, 191, 76, 26, 133, 190, 112, 186, 24, 188, 89, 54, 91, 61, 87, 33, 189, 189, 246, 142, 157, 190, 2, 94, 178, 189, 135, 143, 110, 190, 45, 212, 58, 187, 37, 27, 80, 62, 37, 12, 173, 190, 200, 200, 138, 190, 30, 180, 3, 190, 201, 54, 177, 62, 220, 27, 75, 190, 103, 207, 44, 190, 213, 8, 225, 189, 70, 50, 191, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 128, 81, 153, 190, 245, 9, 190, 60, 124, 196, 82, 191, 90, 175, 11, 189, 177, 101, 120, 190, 118, 68, 43, 60, 62, 97, 169, 188, 225, 242, 64, 62, 55, 111, 157, 190, 136, 58, 116, 62, 89, 137, 149, 62, 166, 121, 38, 190, 43, 47, 100, 60, 154, 88, 224, 62, 49, 75, 163, 62, 174, 239, 223, 62, 139, 34, 111, 190, 234, 93, 34, 62, 24, 219, 161, 61, 121, 39, 41, 62, 22, 123, 171, 191, 40, 65, 164, 190, 73, 111, 85, 190, 84, 113, 20, 62, 247, 81, 234, 61, 26, 113, 18, 62, 170, 206, 239, 62, 249, 177, 99, 190, 74, 229, 133, 191, 96, 129, 209, 190, 195, 132, 148, 190, 35, 174, 122, 190, 237, 123, 102, 191, 55, 114, 109, 191, 172, 235, 57, 61, 83, 183, 48, 190, 120, 177, 130, 190, 10, 117, 103, 191, 162, 91, 25, 62, 97, 167, 180, 62, 122, 70, 237, 190, 74, 216, 205, 190, 88, 15, 182, 62, 32, 81, 46, 191, 7, 230, 139, 62, 114, 26, 66, 63, 20, 197, 52, 191, 137, 131, 129, 62, 251, 49, 79, 62, 192, 116, 12, 62, 73, 105, 204, 190, 141, 61, 160, 190, 142, 111, 126, 191, 11, 47, 160, 62, 104, 165, 159, 189, 49, 185, 9, 63, 51, 118, 25, 190, 218, 7, 2, 190, 130, 148, 222, 62, 115, 67, 213, 62, 232, 105, 120, 189, 75, 24, 159, 191, 227, 80, 253, 189, 252, 150, 186, 190, 81, 157, 32, 63, 188, 13, 118, 61, 113, 200, 137, 189, 125, 104, 23, 62, 163, 214, 46, 62, 23, 219, 118, 62, 89, 193, 220, 189, 140, 79, 10, 190, 25, 163, 34, 62, 180, 185, 125, 62, 117, 214, 51, 190, 9, 149, 165, 187, 106, 33, 101, 190, 191, 31, 103, 189, 39, 43, 119, 62, 220, 2, 46, 62, 150, 132, 243, 61, 151, 177, 121, 62, 39, 116, 158, 62, 121, 197, 108, 62, 166, 40, 17, 60, 226, 179, 26, 62, 77, 33, 40, 191, 45, 174, 36, 62, 58, 101, 157, 60, 50, 73, 85, 61, 165, 54, 129, 190, 248, 29, 70, 60, 169, 102, 3, 191, 12, 242, 22, 189, 179, 195, 163, 61, 231, 95, 36, 62, 115, 153, 186, 190, 199, 69, 223, 189, 82, 58, 236, 189, 48, 211, 247, 188, 7, 160, 190, 190, 86, 193, 210, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 57, 68, 133, 190, 68, 217, 211, 61, 198, 51, 15, 188, 235, 170, 61, 190, 64, 114, 164, 61, 116, 200, 243, 61, 5, 231, 221, 190, 146, 174, 96, 190, 4, 255, 150, 187, 164, 162, 185, 61, 105, 153, 163, 61, 162, 228, 234, 189, 58, 213, 19, 190, 177, 10, 236, 61, 234, 214, 17, 62, 202, 126, 196, 187, 60, 61, 221, 191, 39, 88, 145, 189, 6, 115, 192, 62, 72, 62, 79, 61, 149, 252, 216, 190, 191, 140, 32, 62, 57, 148, 226, 61, 97, 23, 23, 191, 130, 163, 228, 190, 57, 91, 84, 191, 83, 134, 169, 61, 35, 110, 249, 189, 46, 181, 235, 189, 125, 164, 142, 62, 91, 49, 11, 189, 165, 23, 214, 190, 195, 237, 171, 188, 7, 154, 57, 60, 207, 79, 232, 61, 217, 62, 161, 190, 202, 194, 142, 62, 29, 76, 107, 190, 85, 4, 168, 61, 248, 253, 29, 190, 123, 74, 91, 61, 32, 144, 134, 59, 29, 35, 220, 189, 223, 42, 191, 189, 159, 62, 131, 62, 169, 95, 208, 60, 133, 223, 229, 62, 45, 4, 132, 62, 99, 5, 138, 62, 235, 22, 21, 62, 41, 34, 181, 62, 19, 123, 152, 191, 155, 178, 175, 190, 108, 37, 66, 190, 36, 252, 120, 190, 11, 107, 197, 189, 179, 11, 250, 189, 14, 211, 84, 60, 212, 147, 31, 62, 199, 175, 30, 190, 148, 108, 236, 190, 67, 6, 33, 189, 20, 216, 94, 61, 61, 103, 155, 190, 36, 123, 14, 191, 142, 249, 62, 62, 219, 219, 29, 62, 55, 183, 244, 186, 124, 237, 246, 62, 245, 176, 191, 190, 190, 56, 248, 60, 218, 18, 132, 62, 28, 1, 163, 61, 102, 35, 129, 190, 48, 111, 68, 190, 76, 58, 40, 191, 94, 254, 234, 61, 4, 214, 1, 63, 20, 62, 153, 62, 5, 228, 128, 62, 110, 249, 5, 189, 106, 238, 10, 191, 233, 244, 104, 62, 52, 64, 197, 186, 36, 178, 131, 190, 174, 220, 160, 62, 88, 202, 4, 61, 200, 45, 234, 62, 154, 195, 95, 189, 138, 103, 110, 60, 221, 132, 26, 190, 27, 98, 153, 190, 26, 175, 28, 191, 234, 240, 5, 62, 129, 151, 204, 62, 43, 44, 232, 190, 192, 84, 50, 190, 63, 32, 164, 59, 129, 44, 137, 190, 195, 198, 14, 62, 143, 246, 172, 62, 172, 74, 52, 189, 121, 33, 51, 62, 204, 220, 28, 62, 77, 195, 201, 190, 40, 222, 146, 188, 153, 42, 108, 190, 74, 12, 158, 61, 39, 168, 140, 62, 247, 33, 98, 62, 218, 28, 5, 61, 178, 64, 191, 190, 169, 99, 158, 187, 116, 194, 18, 62, 118, 129, 53, 190, 167, 201, 34, 190, 76, 161, 58, 191, 122, 124, 17, 191, 186, 85, 139, 61, 212, 45, 108, 61, 95, 175, 159, 190, 230, 223, 117, 190, 204, 60, 226, 189, 209, 79, 210, 189, 83, 222, 51, 62, 46, 8, 213, 190, 212, 214, 122, 62, 175, 27, 21, 190, 25, 160, 61, 61, 179, 10, 228, 190, 231, 177, 138, 188, 102, 76, 24, 61, 132, 233, 31, 62, 43, 47, 35, 62, 233, 174, 159, 62, 157, 72, 4, 190, 154, 208, 104, 189, 241, 10, 174, 61, 217, 198, 131, 189, 199, 154, 130, 61, 31, 255, 157, 62, 137, 53, 162, 191, 78, 147, 211, 61, 37, 51, 128, 61, 124, 16, 153, 60, 128, 116, 155, 62, 91, 228, 90, 190, 89, 19, 178, 191, 249, 210, 228, 190, 209, 199, 173, 190, 47, 88, 235, 61, 88, 170, 98, 191, 224, 97, 156, 190, 228, 184, 189, 187, 112, 26, 72, 60, 173, 241, 29, 190, 56, 57, 193, 61, 95, 93, 37, 62, 99, 213, 184, 62, 207, 171, 5, 191, 171, 119, 161, 61, 14, 195, 119, 190, 86, 22, 198, 61, 153, 106, 205, 189, 229, 143, 68, 62, 62, 70, 81, 62, 88, 128, 146, 62, 44, 3, 243, 189, 44, 60, 3, 61, 22, 246, 232, 60, 209, 147, 227, 61, 175, 45, 18, 60, 34, 66, 18, 62, 21, 249, 197, 190, 133, 253, 125, 189, 66, 180, 203, 61, 178, 158, 68, 59, 218, 186, 22, 58, 93, 99, 13, 190, 24, 128, 187, 190, 66, 249, 214, 188, 17, 162, 25, 62, 151, 183, 236, 61, 80, 161, 62, 190, 248, 72, 52, 62, 122, 81, 229, 189, 248, 91, 82, 61, 159, 163, 131, 62, 249, 200, 128, 61, 58, 222, 146, 190, 188, 78, 128, 189, 196, 59, 95, 62, 48, 188, 175, 61, 197, 16, 161, 189, 250, 180, 178, 189, 212, 0, 181, 189, 252, 70, 194, 61, 249, 50, 74, 61, 157, 147, 145, 189, 24, 119, 242, 189, 107, 22, 104, 61, 65, 164, 177, 62, 23, 167, 218, 188, 213, 56, 113, 62, 187, 70, 116, 62, 194, 39, 15, 191, 4, 43, 13, 190, 167, 143, 115, 62, 247, 204, 134, 188, 176, 145, 92, 190, 166, 216, 145, 61, 14, 183, 71, 190, 172, 232, 39, 62, 178, 96, 153, 62, 189, 59, 244, 61, 145, 195, 202, 61, 24, 43, 114, 191, 83, 124, 67, 61, 222, 47, 35, 190, 131, 9, 26, 62, 207, 168, 231, 61, 39, 232, 157, 63, 64, 206, 230, 62, 209, 179, 226, 190, 82, 28, 226, 60, 117, 51, 253, 62, 241, 252, 131, 189, 181, 206, 131, 62, 124, 215, 56, 60, 114, 138, 101, 62, 245, 53, 110, 190, 196, 240, 252, 61, 10, 54, 83, 61, 142, 61, 39, 191, 198, 13, 255, 60, 72, 251, 233, 61, 48, 20, 162, 61, 0, 69, 39, 189, 228, 158, 68, 190, 89, 189, 252, 61, 48, 112, 77, 190, 114, 18, 232, 61, 102, 90, 167, 189, 72, 194, 227, 62, 108, 20, 131, 188, 8, 247, 189, 190, 17, 36, 11, 62, 226, 73, 19, 62, 177, 142, 200, 190, 125, 203, 87, 60, 13, 221, 172, 189, 85, 131, 106, 191, 154, 173, 190, 190, 193, 227, 79, 190, 106, 105, 49, 190, 44, 165, 147, 189, 229, 124, 177, 189, 215, 145, 231, 61, 14, 128, 225, 60, 46, 253, 21, 189, 36, 109, 80, 62, 76, 110, 2, 190, 86, 193, 16, 189, 28, 111, 87, 61, 148, 117, 240, 60, 236, 235, 65, 191, 29, 172, 221, 187, 136, 253, 34, 191, 50, 140, 52, 190, 101, 231, 219, 189, 151, 4, 201, 61, 70, 10, 239, 60, 136, 180, 159, 190, 172, 134, 213, 62, 34, 76, 3, 63, 221, 70, 36, 61, 185, 113, 52, 191, 90, 153, 128, 190, 163, 59, 23, 190, 206, 161, 78, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 208, 73, 157, 62, 40, 62, 109, 62, 98, 95, 207, 189, 194, 74, 96, 190, 139, 241, 54, 189, 174, 120, 34, 190, 246, 72, 177, 62, 0, 95, 247, 190, 113, 125, 111, 190, 156, 100, 41, 191, 166, 161, 51, 190, 141, 222, 22, 61, 103, 22, 252, 188, 131, 86, 138, 61, 165, 131, 15, 63, 1, 55, 38, 62, 58, 231, 29, 190, 207, 10, 42, 63, 243, 51, 240, 189, 147, 192, 33, 62, 67, 203, 165, 61, 234, 78, 124, 190, 169, 150, 17, 191, 220, 208, 1, 61, 91, 159, 190, 62, 253, 24, 53, 61, 62, 175, 119, 189, 177, 22, 158, 62, 236, 224, 227, 189, 255, 78, 152, 62, 128, 38, 32, 62, 27, 64, 45, 62, 233, 228, 200, 190, 44, 94, 97, 189, 145, 74, 51, 61, 98, 56, 146, 189, 252, 230, 167, 62, 12, 141, 128, 190, 60, 165, 120, 190, 49, 165, 12, 190, 4, 157, 2, 62, 191, 128, 0, 190, 150, 140, 125, 61, 6, 40, 72, 190, 172, 160, 0, 63, 81, 60, 12, 62, 183, 94, 4, 63, 182, 19, 179, 188, 224, 200, 117, 62, 175, 225, 109, 62, 207, 101, 153, 62, 12, 206, 193, 189, 84, 18, 22, 191, 75, 209, 84, 191, 77, 95, 231, 61, 83, 109, 83, 62, 37, 77, 210, 61, 137, 186, 71, 190, 37, 80, 193, 189, 77, 221, 134, 190, 59, 217, 224, 61, 133, 17, 211, 61, 244, 159, 40, 62, 118, 229, 62, 190, 142, 49, 131, 189, 255, 85, 25, 190, 79, 25, 39, 188, 112, 119, 30, 59, 93, 109, 115, 62, 208, 196, 182, 62, 72, 134, 13, 189, 40, 128, 198, 190, 179, 57, 18, 62, 77, 8, 111, 190, 146, 32, 128, 60, 211, 50, 242, 188, 175, 92, 152, 62, 165, 243, 10, 62, 171, 38, 0, 62, 235, 198, 254, 61, 200, 235, 125, 60, 155, 207, 94, 62, 33, 23, 160, 60, 106, 184, 60, 62, 97, 52, 13, 190, 20, 68, 166, 61, 11, 124, 50, 186, 88, 210, 187, 61, 239, 204, 171, 189, 220, 191, 157, 189, 42, 239, 227, 61, 120, 219, 205, 190, 163, 147, 82, 61, 184, 212, 229, 62, 209, 114, 214, 189, 131, 60, 4, 190, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 66, 235, 182, 189, 168, 188, 46, 190, 46, 143, 43, 62, 97, 111, 188, 61, 70, 195, 252, 61, 16, 126, 133, 191, 224, 141, 248, 189, 162, 239, 74, 190, 206, 189, 90, 190, 70, 49, 137, 62, 73, 112, 94, 190, 165, 177, 156, 62, 50, 12, 48, 189, 179, 108, 52, 191, 82, 255, 151, 190, 172, 72, 187, 62, 120, 214, 190, 190, 177, 255, 149, 62, 64, 129, 250, 60, 104, 21, 75, 191, 205, 188, 33, 190, 227, 85, 239, 61, 183, 69, 198, 61, 8, 32, 233, 191, 37, 82, 18, 191, 236, 242, 173, 60, 189, 142, 144, 189, 130, 97, 196, 61, 138, 140, 72, 62, 185, 181, 60, 62, 217, 2, 57, 190, 33, 252, 250, 188, 190, 178, 5, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 228, 231, 150, 189, 209, 119, 152, 189, 69, 66, 254, 189, 213, 44, 139, 60, 126, 165, 0, 190, 124, 239, 131, 189, 188, 222, 76, 190, 6, 232, 25, 190, 122, 123, 98, 187, 121, 142, 246, 58, 219, 186, 24, 62, 104, 52, 217, 60, 58, 77, 227, 189, 87, 206, 87, 188, 81, 29, 205, 189, 175, 0, 244, 189, 173, 191, 244, 189, 114, 128, 176, 188, 9, 100, 253, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 89, 192, 28, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 180, 131, 62, 25, 117, 139, 189, 170, 44, 27, 190, 199, 16, 240, 188, 51, 92, 87, 187, 181, 226, 85, 189, 222, 49, 168, 189, 34, 109, 110, 62, 156, 103, 104, 61, 103, 213, 140, 62, 42, 177, 251, 61, 240, 242, 15, 62, 90, 36, 173, 190, 98, 10, 195, 61, 168, 118, 148, 62, 121, 8, 98, 62, 254, 14, 17, 189, 88, 188, 141, 62, 110, 37, 8, 62, 177, 242, 66, 62, 209, 59, 160, 62, 55, 40, 92, 62, 254, 50, 85, 62, 114, 222, 143, 61, 75, 18, 64, 61, 73, 149, 51, 190, 77, 232, 124, 189, 152, 23, 9, 190, 186, 125, 8, 62, 163, 116, 88, 190, 204, 180, 217, 189, 14, 175, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 216, 90, 63, 83, 6, 191, 62, 240, 81, 154, 190, 217, 156, 214, 190, 129, 173, 181, 188, 59, 105, 159, 62, 211, 51, 55, 189, 145, 251, 148, 191, 164, 185, 185, 191, 104, 150, 55, 191, 35, 75, 129, 191, 45, 145, 48, 63, 54, 189, 19, 191, 46, 124, 42, 191, 226, 139, 185, 191, 214, 25, 134, 62, 107, 163, 68, 63, 53, 140, 106, 190, 212, 88, 12, 191, 50, 195, 161, 190, 58, 198, 209, 62, 121, 124, 185, 61, 174, 233, 53, 62, 141, 225, 163, 190, 117, 69, 26, 191, 252, 181, 22, 62, 200, 165, 217, 62, 138, 38, 200, 62, 4, 197, 233, 61, 188, 36, 246, 61, 234, 223, 72, 63, 48, 98, 57, 189, 127, 33, 193, 62, 243, 191, 83, 188, 234, 133, 232, 61, 176, 235, 28, 190, 192, 80, 22, 190, 219, 109, 250, 61, 52, 255, 148, 61, 66, 246, 197, 189, 43, 32, 142, 189, 50, 36, 21, 191, 87, 26, 220, 62, 178, 232, 194, 188, 25, 244, 144, 62, 22, 126, 138, 62, 138, 234, 129, 187, 247, 98, 113, 190, 218, 57, 123, 61, 134, 95, 232, 190, 24, 242, 30, 62, 68, 162, 97, 190, 188, 192, 238, 190, 162, 213, 113, 190, 179, 247, 6, 190, 42, 87, 109, 189, 44, 130, 155, 62, 117, 232, 1, 189, 73, 193, 199, 189, 84, 81, 1, 61, 141, 15, 188, 189, 23, 26, 158, 61, 168, 129, 168, 62, 192, 182, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 52, 206, 61, 204, 50, 179, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 104, 79, 62, 34, 143, 47, 63, 95, 253, 222, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 166, 177, 190, 242, 56, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}