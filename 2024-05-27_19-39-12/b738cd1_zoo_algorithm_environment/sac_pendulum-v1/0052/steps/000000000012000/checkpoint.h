// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 183, 92, 63, 31, 182, 79, 191, 255, 173, 155, 190, 203, 215, 27, 63, 189, 121, 0, 63, 52, 121, 28, 63, 10, 38, 55, 61, 113, 51, 78, 190, 233, 122, 9, 61, 97, 100, 163, 61, 165, 203, 167, 62, 41, 16, 55, 191, 180, 226, 155, 60, 24, 210, 24, 191, 6, 171, 198, 62, 177, 88, 58, 62, 99, 225, 104, 191, 192, 137, 15, 190, 196, 71, 158, 63, 34, 118, 198, 62, 32, 39, 48, 62, 132, 104, 19, 60, 210, 117, 131, 189, 151, 176, 74, 190, 39, 107, 61, 62, 77, 142, 144, 191, 167, 42, 168, 61, 119, 38, 25, 191, 33, 12, 63, 191, 236, 132, 93, 190, 230, 71, 6, 191, 38, 91, 177, 62, 68, 232, 10, 63, 97, 59, 172, 62, 49, 111, 143, 190, 171, 241, 15, 63, 155, 148, 54, 191, 92, 230, 129, 191, 99, 191, 9, 189, 110, 4, 97, 62, 242, 59, 130, 191, 159, 224, 229, 62, 240, 184, 135, 61, 187, 108, 195, 191, 212, 241, 139, 190, 16, 145, 203, 62, 233, 168, 49, 61, 101, 122, 5, 63, 188, 210, 181, 190, 166, 127, 0, 191, 72, 176, 12, 63, 15, 41, 246, 62, 45, 19, 137, 191, 84, 198, 128, 190, 156, 198, 18, 62, 167, 39, 53, 191, 69, 116, 190, 62, 129, 36, 253, 62, 134, 245, 128, 63, 125, 188, 231, 62, 34, 183, 116, 62, 80, 76, 19, 63, 173, 53, 236, 190, 2, 70, 219, 62, 10, 82, 74, 191, 161, 134, 98, 190, 15, 145, 110, 191, 201, 86, 228, 190, 251, 230, 216, 188, 33, 67, 51, 191, 230, 156, 232, 61, 2, 144, 68, 62, 10, 109, 104, 62, 43, 230, 163, 191, 59, 22, 214, 190, 123, 196, 29, 62, 137, 8, 79, 191, 18, 25, 38, 62, 188, 5, 199, 190, 113, 190, 137, 189, 152, 244, 141, 62, 174, 10, 31, 63, 149, 218, 239, 62, 54, 40, 113, 62, 34, 240, 38, 190, 102, 166, 148, 63, 103, 124, 164, 62, 157, 191, 104, 190, 133, 135, 193, 63, 238, 229, 149, 62, 26, 4, 61, 62, 198, 53, 209, 61, 130, 102, 22, 63, 239, 106, 129, 62, 157, 205, 148, 63, 18, 74, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 89, 27, 191, 102, 233, 251, 190, 48, 0, 19, 191, 197, 196, 204, 190, 208, 166, 4, 190, 43, 182, 219, 190, 218, 92, 146, 62, 70, 43, 87, 191, 52, 34, 16, 63, 219, 163, 130, 62, 186, 12, 20, 191, 44, 79, 255, 60, 162, 251, 99, 189, 221, 240, 186, 61, 202, 84, 193, 62, 38, 91, 165, 62, 229, 27, 231, 190, 177, 76, 31, 62, 246, 35, 17, 62, 45, 172, 190, 62, 68, 244, 132, 62, 58, 252, 25, 191, 201, 20, 87, 63, 207, 251, 15, 63, 214, 168, 232, 62, 168, 239, 36, 62, 163, 40, 183, 190, 155, 31, 7, 191, 118, 166, 130, 190, 34, 88, 95, 190, 65, 240, 220, 62, 179, 214, 191, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 208, 140, 62, 80, 73, 50, 191, 172, 51, 171, 60, 142, 225, 39, 62, 31, 87, 247, 61, 110, 73, 112, 190, 137, 65, 174, 61, 39, 69, 187, 62, 217, 59, 252, 62, 60, 42, 238, 190, 213, 244, 219, 61, 99, 193, 201, 190, 38, 190, 13, 61, 1, 52, 87, 62, 43, 40, 204, 62, 148, 162, 62, 190, 191, 123, 62, 62, 86, 66, 195, 62, 51, 100, 199, 62, 23, 118, 147, 188, 193, 172, 6, 190, 74, 219, 15, 191, 61, 20, 171, 61, 237, 197, 31, 62, 242, 3, 166, 61, 65, 62, 183, 61, 45, 160, 171, 190, 97, 64, 138, 191, 14, 19, 228, 60, 85, 21, 91, 61, 246, 121, 13, 62, 166, 228, 142, 191, 254, 168, 254, 62, 109, 97, 28, 188, 69, 4, 180, 58, 224, 52, 234, 62, 201, 77, 79, 62, 235, 10, 49, 190, 148, 72, 81, 190, 101, 2, 164, 59, 34, 81, 120, 62, 137, 170, 167, 190, 157, 24, 88, 62, 212, 232, 181, 189, 196, 154, 90, 186, 129, 152, 7, 61, 19, 99, 76, 60, 109, 18, 11, 190, 52, 93, 211, 61, 149, 54, 200, 62, 176, 188, 240, 61, 17, 146, 99, 62, 48, 16, 177, 61, 218, 233, 79, 190, 57, 183, 30, 189, 199, 89, 172, 61, 211, 23, 226, 190, 171, 186, 170, 190, 21, 20, 192, 189, 41, 234, 134, 190, 145, 135, 167, 62, 122, 145, 228, 62, 214, 118, 67, 62, 197, 44, 126, 190, 13, 179, 13, 61, 186, 9, 255, 60, 247, 157, 75, 60, 178, 138, 160, 190, 175, 141, 151, 62, 211, 157, 61, 63, 55, 168, 162, 189, 233, 62, 228, 61, 155, 143, 129, 62, 225, 90, 170, 62, 125, 248, 153, 60, 176, 202, 121, 61, 157, 18, 107, 190, 130, 55, 49, 62, 65, 166, 81, 61, 4, 157, 53, 61, 125, 118, 235, 61, 200, 118, 2, 191, 4, 204, 97, 62, 34, 151, 38, 190, 154, 186, 95, 190, 110, 72, 33, 63, 115, 104, 45, 190, 115, 207, 185, 189, 19, 102, 176, 189, 90, 15, 195, 62, 156, 82, 200, 61, 89, 139, 146, 62, 18, 204, 157, 61, 49, 55, 50, 190, 227, 60, 109, 62, 217, 167, 90, 189, 171, 249, 200, 62, 198, 194, 100, 61, 12, 215, 13, 62, 220, 51, 249, 189, 152, 89, 168, 62, 180, 101, 254, 62, 137, 234, 161, 62, 97, 69, 13, 62, 196, 55, 54, 62, 10, 120, 149, 62, 74, 92, 30, 62, 68, 12, 26, 61, 16, 45, 23, 187, 254, 49, 53, 62, 80, 222, 19, 61, 195, 102, 88, 62, 80, 95, 182, 61, 49, 235, 186, 189, 127, 34, 164, 62, 70, 248, 72, 187, 161, 6, 53, 190, 151, 23, 105, 63, 242, 160, 92, 190, 124, 30, 37, 190, 103, 126, 85, 62, 88, 137, 93, 62, 173, 43, 162, 61, 81, 239, 107, 60, 12, 163, 169, 189, 179, 246, 236, 190, 127, 85, 157, 62, 122, 154, 8, 189, 104, 155, 24, 62, 208, 3, 49, 190, 166, 39, 115, 189, 28, 102, 196, 187, 69, 52, 64, 189, 119, 39, 112, 189, 143, 149, 140, 189, 4, 141, 147, 189, 171, 50, 27, 61, 63, 159, 131, 188, 60, 123, 203, 189, 219, 242, 106, 61, 245, 250, 170, 189, 32, 236, 133, 61, 98, 133, 33, 190, 100, 119, 246, 189, 6, 163, 129, 60, 190, 194, 30, 189, 229, 180, 34, 62, 56, 17, 183, 189, 61, 2, 116, 60, 139, 92, 241, 189, 225, 181, 36, 190, 49, 126, 15, 62, 128, 135, 161, 188, 202, 248, 193, 189, 190, 81, 16, 190, 244, 250, 255, 61, 69, 86, 56, 189, 114, 254, 241, 61, 100, 172, 87, 189, 245, 214, 122, 189, 247, 227, 160, 62, 5, 214, 5, 189, 114, 120, 58, 61, 252, 105, 253, 61, 237, 147, 199, 189, 47, 4, 19, 191, 127, 239, 115, 62, 92, 24, 198, 62, 200, 146, 198, 60, 16, 60, 172, 189, 137, 228, 36, 62, 19, 62, 218, 61, 43, 116, 238, 190, 94, 49, 29, 62, 20, 90, 67, 190, 153, 179, 191, 189, 87, 171, 59, 62, 88, 174, 145, 62, 128, 206, 38, 189, 171, 182, 38, 190, 111, 197, 57, 61, 136, 194, 166, 190, 151, 157, 109, 190, 69, 151, 132, 62, 84, 246, 6, 62, 58, 107, 130, 61, 187, 221, 16, 190, 7, 152, 164, 61, 82, 250, 53, 190, 69, 217, 203, 190, 201, 50, 28, 190, 71, 232, 184, 190, 59, 245, 238, 189, 173, 92, 139, 188, 115, 132, 242, 61, 56, 198, 37, 61, 208, 110, 34, 61, 114, 140, 245, 61, 27, 239, 58, 60, 84, 178, 190, 189, 107, 113, 133, 60, 218, 41, 183, 61, 154, 71, 254, 189, 103, 29, 223, 60, 29, 162, 206, 188, 73, 107, 23, 61, 189, 243, 232, 61, 107, 229, 206, 189, 148, 86, 40, 61, 166, 166, 223, 189, 225, 141, 26, 190, 132, 2, 93, 189, 140, 79, 231, 60, 216, 144, 37, 190, 13, 31, 151, 189, 241, 20, 44, 189, 138, 75, 51, 190, 41, 226, 146, 189, 79, 54, 17, 190, 204, 191, 156, 189, 89, 183, 41, 62, 190, 5, 73, 189, 181, 6, 205, 189, 159, 207, 58, 60, 78, 197, 143, 191, 78, 232, 3, 62, 220, 211, 63, 60, 173, 183, 98, 190, 133, 72, 31, 191, 85, 93, 170, 190, 203, 179, 169, 62, 186, 192, 164, 190, 61, 64, 32, 191, 205, 38, 57, 62, 97, 204, 60, 190, 79, 225, 134, 61, 182, 113, 75, 190, 144, 83, 216, 190, 236, 36, 180, 190, 42, 197, 214, 61, 42, 209, 205, 190, 221, 89, 17, 191, 47, 128, 96, 190, 83, 151, 250, 61, 149, 226, 4, 63, 20, 105, 119, 60, 85, 226, 42, 62, 25, 171, 180, 189, 94, 215, 250, 189, 181, 131, 152, 189, 184, 233, 151, 186, 37, 63, 118, 190, 97, 161, 16, 191, 3, 219, 13, 190, 203, 42, 77, 190, 217, 161, 97, 62, 143, 41, 34, 190, 75, 103, 11, 62, 49, 41, 239, 187, 175, 35, 52, 191, 235, 236, 137, 190, 219, 137, 134, 61, 140, 9, 165, 190, 198, 128, 60, 190, 1, 232, 1, 62, 123, 62, 84, 61, 216, 222, 16, 191, 103, 140, 181, 188, 221, 167, 0, 62, 97, 220, 128, 190, 105, 218, 154, 61, 1, 232, 182, 60, 112, 96, 206, 189, 208, 7, 239, 190, 111, 186, 53, 190, 159, 235, 151, 191, 196, 12, 191, 190, 49, 25, 176, 62, 81, 27, 55, 62, 225, 126, 172, 62, 98, 92, 216, 190, 162, 245, 50, 63, 85, 187, 24, 63, 0, 188, 68, 61, 243, 218, 195, 191, 212, 81, 140, 190, 101, 245, 49, 190, 188, 67, 93, 190, 227, 16, 104, 191, 65, 232, 181, 187, 110, 131, 5, 62, 169, 14, 67, 189, 177, 234, 230, 190, 87, 80, 128, 191, 31, 25, 187, 62, 68, 219, 192, 190, 49, 88, 99, 61, 252, 89, 130, 189, 2, 94, 83, 190, 250, 90, 143, 62, 77, 68, 142, 190, 4, 92, 113, 61, 75, 193, 133, 190, 133, 195, 203, 61, 240, 189, 11, 191, 190, 206, 201, 190, 47, 225, 165, 187, 205, 191, 192, 61, 135, 185, 221, 62, 231, 168, 210, 191, 194, 5, 228, 189, 116, 175, 39, 191, 47, 55, 56, 190, 137, 7, 181, 62, 33, 164, 165, 189, 9, 138, 253, 188, 101, 132, 30, 191, 234, 133, 68, 191, 45, 129, 255, 187, 144, 187, 97, 62, 0, 178, 63, 191, 231, 29, 121, 190, 73, 139, 1, 61, 92, 122, 131, 62, 28, 176, 147, 190, 39, 197, 191, 61, 179, 22, 55, 62, 44, 105, 245, 186, 57, 197, 97, 190, 110, 10, 26, 190, 212, 134, 213, 190, 57, 197, 129, 190, 79, 30, 117, 190, 45, 40, 157, 189, 230, 150, 25, 191, 13, 242, 136, 61, 237, 84, 225, 189, 136, 10, 157, 190, 181, 242, 167, 189, 23, 79, 130, 62, 246, 76, 116, 61, 204, 77, 198, 59, 189, 193, 75, 62, 194, 9, 61, 189, 25, 187, 114, 190, 9, 168, 113, 190, 233, 27, 48, 190, 175, 155, 179, 189, 65, 103, 137, 190, 53, 226, 73, 190, 115, 230, 34, 62, 72, 18, 25, 62, 77, 203, 68, 190, 39, 210, 190, 190, 93, 159, 13, 190, 227, 11, 87, 59, 19, 164, 152, 61, 77, 57, 0, 190, 195, 122, 79, 189, 231, 9, 52, 62, 61, 146, 113, 62, 205, 25, 38, 190, 6, 22, 35, 62, 46, 185, 118, 190, 72, 151, 164, 62, 168, 188, 62, 62, 244, 2, 191, 62, 28, 65, 205, 189, 45, 84, 135, 61, 54, 248, 45, 62, 112, 183, 49, 62, 167, 80, 6, 190, 226, 209, 212, 190, 37, 14, 18, 191, 87, 14, 3, 62, 128, 30, 101, 62, 131, 218, 51, 61, 213, 214, 93, 190, 164, 187, 11, 190, 125, 113, 12, 191, 47, 18, 58, 61, 75, 110, 168, 61, 92, 145, 29, 62, 9, 52, 6, 191, 31, 187, 194, 62, 11, 156, 190, 61, 251, 218, 173, 188, 188, 164, 84, 62, 183, 137, 82, 190, 51, 9, 153, 188, 38, 13, 66, 190, 215, 38, 2, 63, 43, 58, 11, 191, 80, 125, 129, 190, 112, 186, 24, 188, 89, 54, 91, 61, 74, 167, 94, 190, 246, 142, 157, 190, 239, 147, 163, 189, 135, 143, 110, 190, 45, 212, 58, 187, 119, 215, 84, 62, 37, 12, 173, 190, 200, 200, 138, 190, 69, 1, 0, 190, 252, 171, 181, 62, 167, 175, 54, 190, 191, 216, 44, 190, 154, 17, 207, 189, 120, 98, 190, 190, 186, 51, 32, 190, 201, 163, 42, 61, 251, 179, 217, 187, 67, 80, 252, 189, 176, 219, 130, 190, 128, 81, 153, 190, 137, 90, 44, 61, 74, 174, 249, 190, 90, 175, 11, 189, 97, 29, 38, 190, 71, 110, 47, 187, 245, 77, 240, 188, 114, 28, 167, 189, 26, 177, 127, 190, 194, 159, 90, 62, 1, 117, 162, 62, 158, 202, 27, 189, 104, 156, 30, 61, 152, 252, 199, 62, 229, 44, 97, 62, 189, 156, 220, 62, 58, 92, 73, 190, 164, 22, 246, 61, 226, 215, 164, 61, 240, 0, 187, 61, 37, 202, 99, 191, 71, 69, 115, 190, 239, 58, 61, 190, 222, 218, 6, 62, 80, 230, 100, 61, 196, 178, 34, 62, 187, 115, 194, 62, 141, 113, 17, 190, 152, 179, 99, 191, 242, 194, 250, 190, 182, 187, 196, 190, 75, 128, 84, 190, 65, 16, 84, 191, 196, 251, 98, 191, 167, 142, 143, 60, 83, 183, 48, 190, 87, 180, 124, 190, 221, 197, 104, 191, 49, 45, 200, 61, 138, 54, 102, 62, 202, 66, 222, 190, 196, 58, 104, 190, 97, 207, 183, 62, 130, 101, 75, 191, 255, 25, 0, 61, 43, 182, 38, 63, 175, 137, 36, 191, 58, 119, 141, 62, 48, 167, 210, 187, 236, 203, 22, 190, 175, 4, 191, 190, 65, 157, 144, 190, 202, 155, 156, 191, 78, 73, 164, 62, 35, 211, 218, 189, 159, 174, 3, 63, 224, 69, 144, 190, 127, 63, 223, 189, 237, 10, 30, 63, 12, 8, 131, 62, 33, 151, 245, 189, 64, 138, 165, 191, 235, 212, 25, 190, 54, 147, 13, 191, 95, 150, 216, 62, 213, 159, 187, 61, 146, 46, 203, 189, 125, 104, 23, 62, 116, 71, 252, 61, 45, 8, 89, 62, 240, 16, 209, 189, 61, 103, 35, 190, 167, 66, 16, 62, 205, 85, 113, 62, 86, 144, 67, 190, 64, 125, 210, 188, 217, 206, 126, 190, 70, 180, 176, 189, 71, 42, 128, 62, 27, 146, 39, 62, 209, 123, 168, 61, 159, 224, 88, 62, 4, 177, 151, 62, 122, 187, 110, 62, 96, 191, 67, 189, 3, 165, 142, 61, 238, 73, 36, 191, 83, 168, 248, 61, 177, 14, 47, 60, 89, 128, 22, 61, 44, 47, 132, 190, 121, 217, 225, 188, 13, 181, 5, 191, 63, 154, 108, 189, 116, 251, 19, 61, 76, 142, 10, 62, 38, 102, 228, 190, 199, 69, 223, 189, 82, 58, 236, 189, 48, 211, 247, 188, 229, 82, 181, 190, 86, 193, 210, 189, 39, 91, 27, 190, 92, 18, 235, 190, 137, 40, 211, 189, 57, 68, 133, 190, 86, 91, 195, 61, 198, 51, 15, 188, 235, 170, 61, 190, 56, 201, 145, 61, 116, 200, 243, 61, 158, 114, 222, 190, 146, 174, 96, 190, 4, 255, 150, 187, 164, 162, 185, 61, 105, 153, 163, 61, 86, 250, 245, 189, 89, 56, 22, 190, 177, 10, 236, 61, 157, 213, 9, 62, 24, 126, 101, 188, 90, 203, 221, 191, 39, 88, 145, 189, 6, 115, 192, 62, 72, 62, 79, 61, 150, 226, 217, 190, 154, 197, 30, 62, 48, 250, 222, 61, 210, 222, 24, 191, 112, 204, 205, 190, 166, 147, 247, 190, 83, 134, 169, 61, 195, 165, 230, 189, 212, 9, 174, 190, 254, 126, 95, 62, 77, 3, 156, 61, 218, 198, 224, 190, 174, 76, 220, 60, 186, 13, 104, 189, 117, 155, 137, 189, 91, 119, 38, 190, 41, 172, 203, 61, 73, 191, 117, 190, 18, 234, 23, 61, 191, 52, 6, 189, 220, 139, 22, 190, 66, 78, 77, 60, 12, 216, 191, 189, 74, 202, 217, 60, 249, 190, 149, 62, 244, 118, 1, 61, 26, 8, 162, 62, 196, 171, 153, 61, 98, 151, 128, 62, 67, 78, 23, 62, 83, 195, 65, 62, 42, 85, 111, 191, 5, 230, 212, 190, 90, 176, 100, 190, 185, 237, 13, 190, 232, 184, 154, 60, 109, 82, 49, 188, 0, 0, 142, 61, 212, 147, 31, 62, 124, 54, 12, 190, 231, 61, 153, 190, 58, 159, 130, 187, 122, 201, 1, 188, 18, 157, 144, 190, 53, 144, 137, 190, 233, 244, 62, 62, 216, 188, 160, 188, 105, 163, 125, 189, 127, 144, 182, 62, 235, 74, 128, 190, 141, 50, 165, 61, 44, 80, 10, 62, 116, 191, 125, 61, 210, 175, 62, 190, 121, 108, 8, 190, 242, 240, 81, 191, 70, 62, 9, 62, 121, 149, 22, 63, 6, 231, 80, 62, 121, 206, 125, 189, 167, 225, 251, 59, 186, 169, 129, 190, 61, 146, 1, 62, 177, 251, 240, 188, 197, 202, 6, 191, 210, 115, 162, 61, 109, 244, 242, 189, 248, 94, 97, 62, 109, 96, 50, 189, 126, 89, 47, 61, 221, 132, 26, 190, 31, 149, 136, 190, 119, 253, 11, 191, 119, 64, 220, 61, 109, 159, 207, 62, 189, 61, 226, 190, 94, 238, 64, 190, 51, 101, 149, 60, 167, 253, 115, 190, 70, 249, 1, 62, 30, 102, 155, 62, 59, 79, 24, 190, 153, 43, 31, 62, 208, 237, 42, 62, 230, 196, 111, 190, 110, 252, 206, 188, 130, 27, 160, 190, 48, 19, 210, 61, 175, 194, 171, 62, 176, 81, 91, 62, 3, 63, 88, 61, 222, 158, 105, 190, 75, 24, 36, 187, 35, 232, 182, 61, 143, 166, 31, 190, 23, 89, 152, 189, 159, 118, 13, 191, 117, 247, 213, 190, 123, 185, 149, 61, 235, 84, 250, 61, 148, 116, 130, 190, 188, 20, 104, 190, 204, 60, 226, 189, 94, 178, 254, 189, 93, 243, 47, 62, 175, 106, 207, 190, 56, 170, 71, 62, 144, 147, 228, 189, 173, 174, 58, 61, 254, 9, 231, 190, 251, 19, 7, 61, 243, 249, 70, 61, 65, 116, 152, 61, 14, 46, 70, 62, 86, 199, 146, 62, 157, 211, 15, 190, 17, 217, 34, 189, 72, 107, 69, 61, 165, 38, 10, 189, 210, 147, 223, 60, 65, 31, 115, 62, 94, 185, 147, 191, 62, 32, 139, 61, 183, 121, 159, 61, 155, 35, 19, 188, 36, 42, 161, 62, 149, 14, 64, 190, 237, 231, 174, 191, 188, 100, 188, 190, 40, 25, 137, 190, 129, 182, 235, 61, 239, 111, 113, 191, 20, 181, 61, 190, 91, 117, 236, 188, 112, 26, 72, 60, 41, 53, 54, 190, 230, 177, 145, 61, 123, 246, 55, 62, 117, 221, 162, 62, 5, 172, 214, 190, 231, 152, 185, 61, 188, 85, 63, 190, 69, 138, 6, 62, 217, 234, 211, 189, 50, 59, 232, 61, 34, 236, 105, 62, 84, 48, 180, 62, 82, 191, 13, 190, 150, 219, 5, 61, 68, 199, 141, 61, 26, 27, 7, 62, 21, 209, 26, 189, 201, 183, 74, 61, 9, 177, 159, 190, 192, 45, 249, 188, 93, 16, 7, 62, 7, 169, 71, 61, 92, 181, 8, 60, 199, 23, 0, 190, 143, 153, 217, 190, 101, 136, 217, 59, 53, 40, 62, 62, 76, 93, 219, 61, 219, 40, 130, 190, 79, 179, 86, 62, 177, 253, 223, 189, 248, 91, 82, 61, 116, 124, 92, 62, 116, 212, 32, 61, 21, 237, 139, 190, 206, 6, 170, 189, 24, 16, 82, 62, 65, 185, 168, 61, 1, 0, 176, 189, 136, 114, 36, 189, 117, 59, 178, 189, 6, 74, 144, 61, 35, 32, 147, 61, 191, 199, 148, 189, 16, 181, 3, 190, 55, 252, 96, 61, 209, 138, 176, 62, 33, 239, 176, 187, 184, 95, 92, 62, 120, 24, 39, 62, 24, 188, 10, 191, 70, 198, 13, 190, 128, 146, 141, 62, 10, 71, 183, 188, 217, 108, 91, 190, 90, 130, 177, 61, 52, 23, 54, 190, 14, 205, 98, 62, 149, 26, 180, 62, 77, 88, 252, 61, 147, 242, 168, 61, 86, 207, 114, 191, 131, 88, 64, 61, 222, 47, 35, 190, 194, 107, 46, 62, 113, 152, 14, 62, 232, 219, 72, 63, 42, 70, 246, 62, 225, 225, 194, 190, 200, 182, 8, 61, 174, 73, 222, 62, 1, 175, 203, 189, 213, 148, 136, 62, 234, 149, 251, 60, 213, 76, 94, 62, 48, 50, 87, 190, 164, 91, 19, 62, 89, 224, 129, 61, 158, 121, 35, 191, 135, 184, 188, 60, 195, 44, 14, 62, 6, 27, 19, 62, 45, 250, 77, 189, 125, 252, 55, 190, 46, 52, 239, 61, 95, 14, 75, 190, 12, 42, 3, 62, 178, 164, 177, 189, 240, 142, 212, 62, 228, 116, 150, 188, 182, 234, 177, 190, 206, 116, 18, 62, 139, 181, 52, 62, 177, 142, 200, 190, 147, 104, 254, 61, 13, 221, 172, 189, 116, 178, 91, 191, 94, 105, 202, 190, 193, 227, 79, 190, 90, 69, 32, 190, 44, 165, 147, 189, 6, 220, 228, 189, 18, 111, 217, 61, 38, 79, 9, 61, 201, 247, 203, 188, 176, 86, 58, 62, 238, 40, 23, 190, 64, 87, 97, 189, 95, 127, 77, 61, 186, 71, 77, 60, 128, 73, 60, 191, 120, 172, 251, 188, 155, 175, 13, 191, 218, 225, 52, 59, 101, 231, 219, 189, 244, 82, 188, 61, 113, 55, 180, 60, 115, 91, 163, 190, 144, 139, 206, 62, 23, 201, 255, 62, 221, 70, 36, 61, 170, 155, 51, 191, 185, 90, 116, 190, 170, 190, 38, 190, 192, 248, 58, 190, 92, 186, 163, 188, 149, 48, 126, 61, 190, 45, 223, 60, 210, 222, 215, 58, 186, 89, 99, 61, 16, 90, 205, 61, 174, 9, 29, 62, 71, 97, 119, 60, 127, 73, 200, 189, 159, 114, 255, 189, 115, 24, 223, 61, 180, 202, 18, 62, 200, 198, 36, 190, 6, 28, 52, 190, 72, 128, 187, 61, 237, 203, 131, 189, 27, 139, 152, 189, 187, 240, 100, 61, 43, 127, 196, 61, 23, 228, 252, 189, 72, 75, 201, 189, 242, 8, 72, 189, 127, 220, 228, 189, 15, 159, 43, 62, 187, 87, 239, 60, 123, 97, 28, 190, 54, 12, 17, 60, 42, 124, 91, 189, 19, 93, 217, 189, 21, 181, 1, 190, 179, 198, 28, 190, 47, 123, 157, 188, 78, 1, 165, 62, 201, 13, 91, 62, 98, 95, 207, 189, 78, 126, 152, 190, 83, 43, 237, 189, 254, 175, 131, 190, 64, 71, 165, 62, 169, 82, 163, 190, 166, 81, 132, 190, 184, 137, 53, 191, 134, 156, 251, 189, 76, 61, 161, 60, 207, 225, 83, 190, 144, 82, 169, 61, 7, 8, 6, 63, 221, 92, 6, 62, 83, 1, 70, 190, 178, 152, 34, 63, 180, 85, 218, 189, 105, 160, 241, 61, 226, 222, 26, 189, 197, 120, 151, 190, 198, 219, 39, 191, 150, 127, 181, 59, 252, 115, 170, 62, 152, 64, 16, 61, 216, 26, 73, 189, 183, 254, 144, 62, 156, 223, 218, 189, 227, 112, 150, 62, 212, 104, 13, 62, 82, 103, 1, 62, 104, 250, 203, 190, 51, 138, 197, 188, 145, 74, 51, 61, 114, 81, 15, 61, 228, 105, 156, 62, 196, 200, 135, 190, 41, 206, 61, 190, 10, 71, 40, 62, 5, 118, 179, 61, 140, 218, 84, 189, 41, 181, 199, 61, 204, 104, 77, 190, 102, 125, 232, 62, 201, 123, 245, 61, 196, 215, 206, 62, 51, 93, 119, 188, 71, 208, 107, 62, 18, 103, 25, 62, 92, 238, 146, 62, 234, 144, 80, 189, 144, 141, 241, 190, 128, 128, 80, 191, 91, 181, 251, 61, 49, 3, 117, 62, 201, 254, 63, 61, 220, 35, 113, 190, 78, 128, 188, 189, 44, 89, 240, 189, 186, 124, 94, 62, 248, 38, 93, 62, 136, 123, 58, 62, 158, 146, 98, 186, 223, 248, 113, 188, 144, 248, 16, 190, 79, 25, 39, 188, 230, 143, 128, 188, 245, 101, 100, 62, 44, 225, 145, 62, 30, 109, 118, 189, 122, 102, 171, 190, 38, 150, 19, 62, 121, 121, 113, 190, 140, 148, 138, 61, 108, 171, 178, 188, 144, 13, 95, 62, 52, 70, 40, 62, 67, 193, 241, 61, 230, 73, 244, 61, 28, 52, 181, 60, 127, 38, 87, 62, 146, 42, 64, 61, 156, 65, 36, 62, 45, 43, 114, 190, 207, 35, 10, 61, 208, 220, 193, 59, 154, 0, 5, 62, 214, 59, 176, 189, 238, 167, 142, 189, 80, 91, 9, 62, 160, 249, 197, 190, 19, 72, 218, 61, 156, 228, 253, 62, 152, 242, 196, 189, 178, 79, 42, 190, 221, 48, 156, 189, 254, 39, 160, 61, 109, 103, 34, 61, 142, 104, 183, 189, 230, 169, 163, 188, 85, 225, 23, 62, 59, 96, 147, 61, 246, 222, 91, 60, 68, 56, 135, 189, 128, 111, 222, 61, 128, 158, 117, 61, 12, 143, 35, 190, 71, 72, 49, 190, 129, 39, 32, 190, 136, 220, 36, 190, 229, 93, 3, 62, 194, 28, 67, 190, 210, 68, 29, 62, 247, 203, 61, 190, 189, 136, 82, 190, 5, 161, 40, 190, 254, 41, 248, 61, 15, 232, 188, 61, 99, 50, 21, 61, 47, 42, 77, 189, 133, 161, 101, 61, 150, 58, 26, 188, 207, 92, 20, 62, 157, 148, 129, 189, 192, 136, 243, 61, 184, 124, 130, 61, 21, 214, 13, 190, 228, 189, 220, 190, 19, 50, 215, 189, 168, 188, 46, 190, 49, 209, 47, 62, 36, 83, 177, 61, 70, 195, 252, 61, 201, 190, 112, 191, 224, 141, 248, 189, 5, 80, 63, 190, 62, 226, 65, 190, 21, 43, 128, 62, 152, 214, 105, 190, 114, 248, 159, 62, 54, 226, 74, 189, 149, 226, 49, 191, 207, 59, 152, 190, 78, 90, 177, 62, 120, 214, 190, 190, 243, 127, 146, 62, 132, 114, 76, 61, 107, 233, 60, 191, 205, 188, 33, 190, 88, 83, 18, 62, 7, 20, 241, 61, 215, 84, 234, 191, 196, 28, 20, 191, 2, 90, 25, 188, 241, 148, 180, 189, 213, 116, 238, 61, 30, 237, 120, 62, 230, 216, 65, 62, 159, 143, 11, 190, 33, 252, 250, 188, 190, 178, 5, 62, 146, 31, 216, 189, 179, 97, 213, 61, 42, 3, 220, 189, 113, 137, 74, 61, 228, 231, 150, 189, 209, 119, 152, 189, 69, 66, 254, 189, 213, 44, 139, 60, 126, 165, 0, 190, 124, 239, 131, 189, 188, 222, 76, 190, 6, 232, 25, 190, 122, 123, 98, 187, 121, 142, 246, 58, 219, 186, 24, 62, 104, 52, 217, 60, 58, 77, 227, 189, 87, 206, 87, 188, 81, 29, 205, 189, 175, 0, 244, 189, 173, 191, 244, 189, 114, 128, 176, 188, 9, 100, 253, 189, 10, 68, 124, 61, 250, 201, 182, 189, 247, 203, 123, 61, 59, 44, 220, 61, 89, 192, 28, 190, 171, 28, 9, 62, 50, 19, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 67, 112, 62, 138, 218, 50, 189, 19, 50, 67, 190, 226, 196, 11, 188, 154, 81, 79, 58, 26, 79, 93, 189, 192, 59, 132, 189, 1, 21, 51, 62, 147, 50, 218, 188, 159, 218, 143, 62, 126, 53, 146, 61, 63, 55, 47, 62, 234, 199, 156, 190, 32, 252, 169, 61, 200, 244, 132, 62, 71, 152, 59, 62, 137, 205, 44, 189, 148, 79, 161, 62, 54, 67, 147, 61, 193, 174, 79, 62, 166, 226, 132, 62, 25, 53, 64, 62, 223, 240, 63, 62, 177, 77, 207, 61, 176, 112, 55, 61, 73, 149, 51, 190, 140, 234, 219, 189, 79, 224, 197, 189, 188, 23, 218, 61, 163, 116, 88, 190, 119, 57, 241, 188, 14, 175, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 65, 96, 63, 191, 30, 176, 62, 60, 173, 153, 190, 179, 249, 215, 190, 204, 217, 181, 188, 151, 47, 160, 62, 176, 32, 80, 189, 109, 4, 94, 191, 174, 219, 152, 191, 90, 41, 66, 191, 109, 81, 60, 191, 211, 59, 230, 62, 155, 199, 12, 191, 142, 36, 7, 191, 234, 127, 176, 191, 15, 184, 141, 62, 230, 56, 67, 63, 159, 122, 18, 190, 241, 132, 157, 190, 27, 184, 183, 190, 136, 166, 191, 62, 176, 166, 227, 61, 161, 53, 65, 62, 43, 70, 182, 190, 123, 84, 15, 191, 252, 181, 22, 62, 229, 218, 219, 62, 188, 16, 185, 62, 227, 31, 26, 62, 188, 36, 246, 61, 73, 142, 72, 63, 48, 98, 57, 189, 121, 231, 143, 62, 254, 153, 77, 189, 18, 155, 11, 62, 84, 88, 241, 189, 212, 84, 22, 190, 206, 28, 179, 61, 29, 248, 143, 61, 105, 17, 98, 60, 86, 16, 100, 60, 203, 154, 166, 190, 205, 65, 32, 63, 77, 204, 114, 189, 85, 130, 63, 62, 52, 68, 139, 62, 124, 34, 254, 187, 199, 15, 110, 190, 65, 140, 82, 61, 223, 137, 202, 190, 230, 222, 160, 61, 216, 28, 233, 189, 221, 194, 252, 190, 19, 77, 101, 190, 9, 22, 251, 189, 26, 18, 79, 61, 96, 248, 166, 62, 117, 232, 1, 189, 194, 1, 178, 189, 57, 55, 21, 61, 26, 162, 240, 189, 23, 26, 158, 61, 245, 72, 160, 62, 192, 182, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 85, 161, 61, 98, 187, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {186, 102, 127, 63, 164, 36, 142, 189, 60, 252, 33, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 29, 9, 64, 156, 91, 184, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0052/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}