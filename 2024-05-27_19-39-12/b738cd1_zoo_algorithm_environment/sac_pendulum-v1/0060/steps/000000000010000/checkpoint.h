// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 8, 186, 190, 94, 136, 240, 61, 161, 245, 118, 63, 104, 0, 36, 58, 2, 42, 19, 63, 216, 219, 69, 190, 125, 12, 192, 190, 109, 129, 109, 63, 130, 1, 38, 63, 65, 55, 203, 190, 20, 112, 165, 191, 182, 206, 124, 190, 40, 67, 81, 61, 164, 63, 98, 191, 179, 64, 59, 190, 178, 156, 41, 63, 121, 45, 168, 63, 30, 31, 157, 62, 208, 129, 68, 191, 213, 240, 139, 62, 185, 98, 7, 189, 121, 159, 51, 63, 234, 42, 170, 62, 5, 165, 76, 62, 92, 236, 79, 63, 169, 208, 3, 191, 168, 85, 202, 190, 71, 135, 190, 190, 11, 7, 249, 190, 156, 134, 186, 190, 138, 29, 54, 62, 198, 122, 69, 191, 192, 110, 84, 63, 136, 144, 140, 61, 88, 122, 87, 63, 84, 77, 54, 63, 219, 98, 186, 188, 58, 250, 187, 62, 27, 231, 4, 191, 174, 228, 73, 58, 10, 50, 62, 63, 190, 169, 249, 190, 205, 183, 146, 62, 11, 106, 17, 63, 136, 251, 86, 62, 84, 71, 172, 62, 216, 24, 186, 189, 231, 83, 56, 190, 143, 130, 142, 190, 136, 235, 121, 191, 97, 214, 211, 62, 55, 160, 48, 62, 71, 152, 25, 190, 243, 199, 17, 190, 206, 12, 158, 62, 177, 141, 181, 190, 15, 119, 8, 188, 34, 66, 69, 191, 193, 205, 61, 63, 212, 173, 47, 62, 48, 248, 57, 63, 211, 221, 161, 63, 66, 244, 197, 62, 191, 177, 32, 189, 217, 153, 89, 63, 58, 115, 234, 190, 196, 164, 189, 190, 167, 185, 9, 191, 250, 143, 235, 61, 247, 94, 145, 60, 90, 30, 40, 191, 155, 56, 48, 63, 83, 125, 178, 190, 189, 146, 140, 191, 84, 242, 128, 190, 98, 211, 65, 189, 188, 21, 177, 63, 238, 101, 150, 62, 106, 237, 68, 63, 24, 20, 200, 190, 231, 153, 226, 190, 250, 233, 35, 188, 29, 190, 118, 63, 154, 222, 131, 62, 45, 241, 1, 190, 159, 45, 160, 191, 200, 131, 180, 60, 64, 36, 229, 62, 232, 232, 75, 63, 174, 231, 35, 63, 92, 89, 176, 62, 135, 233, 166, 191, 3, 219, 185, 190, 119, 16, 11, 190, 58, 132, 24, 191, 89, 161, 37, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 236, 69, 191, 59, 182, 86, 190, 33, 223, 118, 190, 55, 5, 127, 190, 248, 245, 196, 62, 85, 205, 133, 189, 101, 234, 234, 62, 137, 12, 212, 62, 59, 73, 131, 191, 186, 153, 220, 188, 169, 46, 116, 190, 8, 116, 138, 62, 186, 188, 101, 62, 93, 231, 54, 62, 61, 32, 211, 62, 2, 72, 9, 191, 68, 230, 131, 190, 129, 47, 141, 62, 246, 105, 228, 62, 146, 69, 20, 188, 68, 32, 152, 190, 243, 79, 251, 62, 34, 66, 196, 62, 47, 25, 83, 190, 212, 44, 144, 190, 235, 85, 47, 62, 220, 103, 11, 191, 13, 91, 25, 62, 18, 74, 186, 62, 222, 3, 71, 62, 96, 102, 52, 61, 21, 163, 55, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 40, 83, 190, 73, 64, 13, 62, 251, 101, 140, 188, 135, 249, 51, 190, 56, 213, 52, 191, 45, 158, 183, 62, 174, 198, 62, 61, 149, 202, 119, 62, 8, 168, 182, 61, 114, 163, 16, 189, 224, 97, 173, 61, 62, 158, 41, 62, 64, 62, 240, 61, 146, 119, 102, 62, 255, 215, 210, 189, 204, 10, 224, 61, 21, 252, 154, 190, 121, 136, 108, 190, 145, 201, 103, 190, 24, 50, 226, 189, 104, 0, 192, 62, 223, 37, 215, 189, 204, 186, 9, 190, 124, 21, 107, 190, 144, 210, 26, 190, 138, 6, 158, 61, 221, 149, 127, 190, 74, 88, 100, 61, 43, 119, 229, 190, 62, 94, 136, 62, 107, 153, 173, 189, 72, 54, 229, 190, 183, 68, 15, 62, 120, 22, 54, 62, 67, 212, 167, 61, 64, 34, 155, 190, 229, 24, 168, 190, 186, 58, 211, 62, 222, 204, 8, 62, 157, 66, 39, 60, 26, 182, 210, 190, 152, 117, 27, 191, 60, 56, 83, 62, 173, 38, 82, 62, 46, 221, 147, 61, 40, 7, 168, 62, 111, 244, 32, 62, 210, 162, 9, 191, 173, 165, 152, 62, 70, 216, 24, 61, 158, 30, 71, 61, 28, 72, 146, 189, 142, 228, 147, 61, 98, 39, 113, 62, 33, 204, 139, 61, 254, 82, 61, 61, 47, 39, 190, 62, 49, 180, 45, 62, 214, 248, 96, 190, 77, 132, 174, 61, 186, 185, 242, 61, 201, 134, 73, 62, 22, 127, 128, 190, 235, 208, 63, 62, 176, 88, 120, 190, 121, 214, 45, 190, 243, 74, 166, 189, 26, 48, 14, 62, 143, 109, 99, 61, 153, 53, 155, 190, 98, 26, 231, 190, 220, 123, 149, 62, 251, 244, 15, 190, 209, 60, 99, 62, 67, 196, 132, 61, 159, 11, 193, 189, 68, 160, 128, 60, 62, 197, 185, 188, 11, 53, 57, 62, 239, 254, 192, 61, 167, 113, 83, 62, 37, 25, 83, 62, 16, 50, 79, 62, 130, 124, 54, 191, 7, 187, 166, 190, 240, 69, 32, 62, 51, 15, 44, 60, 3, 35, 87, 61, 245, 219, 12, 189, 176, 188, 182, 191, 193, 74, 25, 190, 196, 248, 234, 189, 14, 143, 168, 62, 249, 244, 9, 62, 16, 167, 159, 62, 18, 224, 156, 62, 53, 7, 130, 190, 68, 132, 98, 62, 249, 88, 17, 62, 67, 123, 86, 190, 9, 167, 240, 190, 170, 214, 159, 61, 61, 249, 75, 62, 53, 56, 155, 190, 221, 243, 244, 190, 78, 215, 20, 190, 252, 74, 157, 190, 167, 120, 54, 189, 42, 166, 239, 61, 222, 152, 42, 62, 137, 103, 27, 62, 170, 114, 175, 190, 146, 130, 93, 190, 167, 115, 156, 61, 19, 239, 180, 188, 239, 62, 171, 60, 151, 162, 92, 190, 104, 72, 242, 61, 15, 33, 182, 190, 140, 169, 208, 190, 21, 193, 54, 190, 218, 210, 232, 61, 43, 5, 84, 190, 14, 15, 158, 61, 33, 91, 178, 189, 83, 76, 73, 190, 203, 119, 157, 190, 60, 250, 144, 189, 177, 18, 205, 60, 150, 60, 192, 61, 212, 35, 73, 62, 103, 166, 63, 62, 191, 151, 28, 188, 131, 83, 111, 189, 7, 91, 203, 189, 165, 69, 92, 62, 62, 62, 216, 189, 200, 216, 171, 189, 136, 84, 116, 61, 104, 225, 44, 62, 241, 86, 16, 61, 146, 139, 50, 190, 144, 63, 19, 61, 16, 52, 23, 190, 242, 34, 224, 60, 120, 190, 63, 62, 26, 4, 186, 58, 101, 184, 66, 62, 144, 29, 140, 61, 95, 4, 62, 62, 192, 151, 139, 62, 42, 101, 171, 60, 139, 221, 62, 190, 64, 0, 41, 190, 30, 205, 137, 188, 47, 52, 164, 59, 183, 101, 0, 62, 84, 230, 67, 61, 134, 104, 65, 189, 38, 216, 162, 60, 142, 89, 229, 190, 109, 150, 243, 61, 114, 115, 9, 191, 229, 219, 87, 62, 72, 23, 185, 188, 55, 220, 144, 62, 149, 238, 150, 189, 103, 78, 196, 62, 109, 207, 73, 190, 202, 45, 254, 61, 248, 208, 134, 61, 132, 154, 11, 190, 222, 146, 109, 62, 89, 118, 96, 190, 0, 119, 33, 189, 6, 109, 152, 190, 39, 204, 6, 191, 191, 217, 203, 189, 210, 98, 216, 61, 8, 252, 101, 189, 250, 165, 3, 189, 250, 194, 144, 62, 46, 178, 169, 187, 139, 223, 135, 189, 70, 3, 163, 190, 67, 153, 11, 190, 52, 176, 41, 190, 252, 225, 242, 190, 110, 130, 162, 189, 86, 148, 4, 61, 42, 181, 43, 191, 169, 10, 59, 61, 121, 63, 120, 62, 231, 34, 110, 190, 191, 216, 20, 62, 85, 77, 19, 189, 202, 162, 147, 60, 81, 60, 24, 191, 117, 138, 157, 60, 240, 39, 33, 62, 206, 140, 145, 61, 15, 148, 41, 190, 235, 3, 222, 190, 233, 79, 238, 61, 234, 35, 142, 190, 145, 107, 220, 61, 80, 66, 182, 189, 152, 160, 137, 61, 20, 145, 146, 62, 136, 3, 105, 62, 138, 137, 175, 188, 164, 51, 69, 61, 21, 142, 36, 191, 183, 251, 66, 190, 135, 204, 181, 188, 254, 97, 187, 62, 161, 129, 18, 61, 174, 175, 95, 62, 214, 116, 210, 61, 99, 164, 210, 61, 198, 218, 227, 189, 40, 228, 90, 190, 111, 135, 172, 62, 36, 72, 153, 187, 54, 6, 76, 62, 137, 165, 141, 190, 225, 76, 99, 62, 90, 95, 21, 191, 51, 117, 197, 189, 228, 119, 66, 190, 242, 100, 195, 60, 159, 52, 34, 62, 60, 218, 154, 190, 163, 46, 231, 61, 7, 88, 225, 190, 94, 185, 68, 62, 98, 159, 183, 61, 155, 105, 208, 188, 73, 132, 91, 62, 46, 187, 247, 189, 33, 174, 209, 61, 44, 124, 140, 61, 55, 148, 167, 58, 138, 227, 149, 62, 43, 202, 156, 190, 44, 103, 28, 190, 186, 213, 183, 189, 136, 162, 209, 62, 232, 89, 119, 191, 214, 219, 70, 188, 230, 135, 165, 189, 206, 83, 117, 62, 99, 108, 36, 60, 156, 88, 141, 190, 204, 179, 125, 62, 201, 255, 147, 61, 40, 144, 100, 189, 111, 88, 8, 62, 228, 110, 108, 61, 108, 61, 178, 191, 220, 213, 223, 190, 67, 18, 154, 62, 11, 20, 50, 189, 107, 254, 97, 62, 243, 184, 36, 190, 116, 26, 121, 190, 251, 234, 28, 190, 160, 200, 79, 62, 54, 220, 81, 190, 187, 247, 80, 62, 6, 144, 132, 62, 165, 217, 78, 62, 19, 26, 145, 62, 110, 59, 26, 62, 207, 61, 223, 61, 18, 86, 37, 62, 48, 241, 70, 61, 86, 5, 99, 62, 1, 148, 127, 189, 104, 202, 103, 61, 25, 153, 21, 190, 150, 254, 147, 61, 251, 41, 24, 190, 30, 39, 103, 189, 176, 221, 204, 190, 133, 196, 90, 62, 188, 18, 166, 190, 143, 67, 212, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 176, 48, 97, 62, 77, 9, 171, 190, 41, 59, 3, 62, 51, 47, 46, 62, 17, 98, 70, 61, 76, 105, 75, 61, 205, 211, 121, 61, 91, 49, 156, 190, 7, 15, 143, 62, 4, 244, 195, 190, 164, 139, 128, 62, 197, 109, 89, 62, 122, 109, 37, 190, 14, 96, 23, 190, 111, 98, 105, 61, 242, 254, 45, 62, 121, 185, 54, 62, 63, 221, 93, 190, 255, 207, 152, 62, 127, 73, 22, 62, 34, 97, 20, 190, 180, 101, 75, 190, 234, 131, 25, 189, 190, 174, 150, 62, 18, 175, 172, 62, 189, 82, 212, 189, 175, 135, 162, 62, 149, 97, 121, 62, 218, 69, 2, 62, 60, 234, 223, 61, 118, 208, 202, 62, 182, 89, 197, 61, 218, 221, 168, 61, 51, 193, 140, 62, 70, 227, 54, 191, 225, 220, 175, 62, 45, 69, 28, 189, 70, 50, 142, 62, 23, 139, 61, 190, 10, 163, 152, 62, 70, 122, 217, 190, 63, 230, 124, 62, 192, 227, 226, 189, 187, 12, 119, 190, 234, 54, 166, 62, 241, 134, 187, 190, 163, 7, 95, 190, 175, 13, 165, 190, 171, 128, 243, 190, 149, 225, 11, 61, 43, 158, 35, 61, 196, 157, 195, 189, 252, 17, 26, 62, 91, 113, 167, 62, 28, 131, 234, 61, 129, 52, 39, 191, 195, 161, 136, 190, 56, 228, 206, 190, 162, 254, 167, 190, 62, 146, 137, 191, 195, 46, 175, 62, 212, 172, 227, 61, 175, 219, 55, 191, 48, 71, 131, 62, 236, 176, 0, 61, 87, 224, 36, 59, 74, 192, 35, 190, 98, 103, 217, 189, 49, 6, 106, 189, 185, 119, 167, 188, 28, 223, 37, 189, 254, 88, 150, 61, 66, 246, 127, 189, 143, 213, 0, 62, 246, 78, 119, 60, 206, 90, 211, 189, 87, 165, 158, 60, 22, 163, 14, 190, 237, 21, 156, 61, 89, 28, 232, 60, 117, 254, 234, 188, 78, 225, 130, 189, 212, 130, 19, 188, 167, 217, 213, 61, 6, 152, 254, 61, 38, 121, 158, 186, 139, 249, 7, 190, 160, 126, 222, 189, 98, 218, 178, 189, 94, 245, 70, 190, 182, 150, 135, 61, 111, 27, 147, 61, 166, 36, 35, 190, 239, 52, 246, 61, 63, 124, 21, 190, 220, 117, 15, 62, 130, 54, 1, 191, 33, 154, 27, 190, 228, 254, 84, 191, 152, 247, 54, 62, 209, 45, 48, 62, 229, 51, 116, 62, 169, 95, 61, 191, 50, 126, 171, 62, 212, 173, 250, 189, 199, 9, 253, 189, 202, 13, 232, 188, 250, 11, 83, 190, 129, 168, 144, 61, 112, 237, 187, 189, 38, 165, 23, 62, 232, 12, 166, 58, 150, 108, 83, 62, 4, 110, 22, 190, 163, 53, 128, 61, 10, 138, 212, 190, 251, 239, 72, 61, 250, 24, 225, 189, 74, 167, 166, 60, 203, 114, 53, 190, 91, 73, 114, 62, 75, 81, 159, 191, 187, 238, 142, 189, 226, 198, 226, 190, 240, 32, 175, 61, 28, 53, 113, 62, 149, 5, 17, 60, 58, 161, 138, 62, 35, 254, 157, 61, 208, 177, 36, 190, 61, 92, 227, 59, 56, 238, 169, 189, 170, 93, 53, 62, 152, 191, 20, 191, 69, 48, 235, 189, 254, 3, 205, 62, 146, 38, 163, 189, 136, 194, 235, 61, 8, 75, 236, 190, 153, 125, 117, 61, 245, 54, 18, 189, 83, 198, 147, 61, 138, 41, 125, 62, 236, 152, 189, 62, 32, 176, 167, 62, 98, 151, 213, 61, 161, 16, 0, 61, 187, 66, 124, 62, 191, 68, 254, 190, 193, 56, 106, 190, 135, 228, 174, 62, 30, 75, 152, 62, 113, 216, 89, 190, 41, 210, 99, 189, 96, 30, 33, 190, 118, 239, 79, 62, 136, 147, 105, 61, 248, 182, 228, 189, 111, 98, 89, 62, 184, 142, 115, 60, 42, 102, 151, 62, 232, 90, 45, 61, 214, 106, 131, 62, 145, 26, 238, 190, 184, 202, 173, 190, 167, 157, 174, 61, 126, 25, 91, 188, 229, 68, 156, 190, 2, 40, 194, 189, 59, 160, 191, 190, 40, 235, 25, 61, 233, 231, 149, 62, 38, 117, 47, 60, 95, 252, 141, 62, 113, 44, 84, 188, 181, 54, 129, 190, 2, 119, 207, 62, 230, 83, 32, 190, 164, 213, 161, 62, 43, 120, 63, 62, 6, 107, 82, 60, 90, 19, 221, 61, 146, 68, 218, 189, 145, 16, 179, 62, 53, 67, 8, 63, 98, 125, 67, 62, 191, 197, 189, 189, 15, 232, 211, 61, 12, 197, 245, 60, 239, 137, 93, 62, 224, 171, 51, 61, 35, 162, 93, 62, 192, 65, 129, 189, 133, 140, 212, 189, 0, 96, 222, 189, 137, 174, 209, 188, 192, 97, 39, 190, 106, 80, 41, 62, 126, 197, 81, 60, 181, 45, 30, 189, 127, 46, 158, 61, 40, 242, 240, 61, 208, 121, 17, 190, 238, 191, 51, 190, 41, 37, 89, 185, 101, 229, 240, 189, 204, 121, 239, 186, 168, 164, 226, 189, 62, 197, 92, 61, 19, 7, 16, 190, 81, 159, 173, 186, 77, 239, 9, 190, 206, 3, 128, 187, 31, 196, 121, 188, 1, 221, 41, 61, 80, 212, 252, 61, 154, 97, 164, 188, 32, 150, 92, 61, 138, 22, 184, 189, 192, 49, 217, 61, 197, 103, 255, 60, 3, 183, 31, 190, 1, 186, 90, 60, 117, 187, 35, 190, 247, 234, 150, 62, 55, 191, 223, 61, 72, 54, 164, 61, 119, 197, 16, 191, 122, 6, 240, 61, 121, 33, 50, 191, 128, 252, 161, 61, 234, 143, 244, 62, 82, 72, 82, 62, 248, 239, 160, 60, 90, 70, 15, 191, 112, 152, 24, 62, 16, 135, 20, 190, 216, 204, 153, 62, 219, 142, 145, 62, 254, 127, 57, 63, 113, 187, 135, 62, 219, 41, 129, 62, 38, 62, 89, 62, 243, 207, 136, 62, 152, 190, 15, 191, 112, 77, 235, 61, 70, 95, 207, 61, 112, 102, 98, 62, 99, 147, 100, 191, 140, 41, 143, 61, 181, 119, 18, 61, 68, 83, 24, 62, 63, 57, 17, 190, 232, 171, 134, 190, 51, 183, 79, 62, 180, 220, 183, 189, 9, 205, 135, 61, 115, 112, 244, 61, 209, 10, 36, 187, 11, 139, 101, 61, 121, 9, 89, 60, 123, 131, 172, 189, 80, 53, 233, 189, 224, 75, 48, 62, 229, 31, 5, 62, 120, 160, 11, 62, 245, 195, 21, 190, 239, 209, 18, 62, 146, 52, 84, 189, 175, 244, 174, 189, 164, 108, 94, 189, 106, 1, 71, 189, 42, 26, 175, 188, 166, 28, 175, 61, 22, 190, 62, 190, 77, 201, 34, 189, 39, 199, 19, 190, 67, 122, 220, 189, 172, 46, 127, 190, 168, 119, 189, 61, 55, 232, 120, 61, 19, 149, 211, 189, 29, 172, 174, 61, 227, 86, 149, 189, 45, 66, 113, 190, 23, 183, 214, 61, 58, 236, 197, 189, 3, 255, 128, 190, 121, 71, 104, 62, 139, 56, 40, 61, 219, 0, 108, 60, 101, 97, 11, 62, 12, 47, 230, 61, 165, 163, 243, 189, 56, 174, 154, 62, 79, 120, 39, 191, 102, 28, 144, 61, 66, 138, 40, 191, 163, 148, 11, 190, 32, 194, 192, 60, 97, 217, 132, 190, 122, 164, 95, 188, 220, 27, 163, 189, 64, 136, 13, 62, 79, 228, 24, 62, 79, 136, 234, 189, 74, 72, 63, 62, 98, 47, 87, 62, 148, 165, 230, 189, 179, 238, 108, 61, 241, 173, 227, 61, 93, 6, 34, 190, 126, 196, 143, 62, 226, 17, 0, 62, 236, 210, 117, 61, 66, 131, 29, 190, 173, 58, 15, 62, 240, 151, 168, 190, 56, 120, 217, 60, 55, 42, 88, 62, 204, 160, 62, 62, 248, 22, 24, 190, 77, 171, 25, 62, 122, 2, 164, 61, 1, 151, 61, 61, 190, 132, 146, 190, 106, 27, 86, 62, 48, 237, 163, 62, 112, 75, 177, 190, 149, 240, 65, 62, 166, 55, 12, 188, 69, 34, 143, 62, 27, 55, 58, 186, 198, 106, 37, 189, 102, 224, 156, 62, 113, 248, 186, 190, 240, 15, 150, 62, 255, 48, 130, 61, 155, 129, 0, 189, 3, 167, 8, 189, 84, 17, 62, 190, 68, 47, 0, 189, 22, 255, 144, 61, 77, 229, 75, 62, 70, 25, 188, 187, 136, 173, 183, 189, 77, 79, 231, 189, 101, 107, 166, 188, 100, 39, 143, 61, 216, 233, 191, 60, 253, 32, 179, 189, 97, 115, 24, 61, 192, 65, 148, 62, 231, 239, 198, 190, 214, 117, 103, 62, 130, 205, 176, 189, 8, 48, 24, 62, 69, 248, 34, 191, 18, 241, 161, 188, 241, 73, 161, 62, 249, 150, 186, 189, 205, 146, 82, 62, 197, 204, 198, 190, 32, 132, 192, 61, 129, 119, 165, 189, 41, 92, 195, 61, 150, 116, 121, 62, 205, 137, 183, 190, 80, 41, 84, 62, 213, 69, 54, 62, 110, 155, 166, 188, 152, 79, 21, 62, 32, 68, 134, 190, 94, 181, 139, 190, 33, 106, 71, 188, 141, 49, 139, 62, 22, 194, 76, 62, 92, 95, 157, 61, 25, 45, 249, 189, 160, 248, 33, 62, 159, 88, 105, 188, 122, 184, 180, 190, 78, 138, 52, 62, 76, 26, 136, 61, 192, 131, 177, 190, 85, 123, 190, 61, 39, 250, 203, 189, 44, 252, 28, 61, 151, 31, 58, 189, 255, 129, 151, 62, 72, 217, 89, 62, 162, 31, 91, 62, 19, 105, 14, 62, 165, 207, 161, 61, 156, 110, 68, 62, 161, 216, 27, 60, 120, 91, 130, 62, 88, 59, 252, 189, 6, 36, 38, 62, 166, 190, 83, 188, 92, 200, 65, 191, 155, 239, 85, 62, 171, 22, 177, 62, 184, 92, 5, 188, 202, 39, 216, 61, 76, 102, 145, 62, 255, 25, 154, 189, 233, 146, 245, 190, 64, 131, 95, 190, 219, 128, 50, 59, 127, 84, 197, 61, 230, 113, 34, 190, 216, 182, 58, 190, 25, 68, 214, 62, 66, 162, 157, 189, 42, 51, 12, 190, 161, 235, 128, 190, 197, 24, 173, 62, 125, 82, 82, 190, 101, 229, 139, 62, 244, 21, 120, 189, 157, 16, 171, 62, 240, 64, 133, 62, 186, 124, 178, 62, 74, 252, 204, 190, 58, 183, 213, 61, 18, 76, 163, 189, 172, 156, 40, 62, 188, 98, 49, 62, 189, 125, 87, 190, 250, 64, 30, 61, 242, 99, 240, 189, 222, 91, 175, 190, 27, 81, 165, 61, 219, 126, 64, 189, 234, 67, 51, 190, 23, 174, 179, 62, 161, 144, 126, 62, 105, 237, 117, 189, 76, 189, 6, 191, 88, 123, 185, 190, 9, 90, 233, 60, 192, 90, 163, 190, 66, 214, 91, 190, 176, 173, 147, 61, 50, 102, 211, 62, 17, 251, 13, 191, 147, 123, 68, 61, 142, 53, 97, 62, 144, 190, 216, 61, 190, 220, 225, 61, 242, 166, 51, 191, 175, 59, 226, 61, 4, 6, 33, 191, 213, 116, 210, 61, 235, 198, 130, 62, 137, 109, 251, 62, 168, 248, 12, 61, 34, 187, 250, 189, 213, 59, 129, 186, 118, 224, 21, 61, 223, 0, 194, 189, 15, 127, 82, 190, 229, 238, 230, 62, 161, 225, 54, 62, 23, 228, 51, 190, 0, 69, 174, 189, 75, 220, 60, 62, 87, 63, 193, 190, 18, 157, 99, 189, 21, 206, 12, 62, 175, 108, 152, 61, 65, 32, 6, 191, 179, 143, 59, 189, 137, 14, 172, 62, 235, 188, 128, 62, 217, 235, 213, 187, 136, 211, 0, 190, 247, 39, 197, 62, 215, 11, 170, 189, 94, 79, 4, 189, 104, 170, 251, 61, 0, 192, 33, 191, 239, 9, 133, 62, 213, 45, 99, 62, 248, 242, 128, 62, 250, 204, 155, 189, 19, 249, 153, 62, 49, 29, 184, 190, 220, 63, 124, 62, 80, 154, 89, 190, 17, 139, 194, 190, 249, 62, 200, 62, 60, 37, 177, 190, 32, 212, 174, 190, 221, 71, 246, 188, 51, 59, 124, 191, 150, 122, 110, 62, 210, 82, 38, 189, 7, 119, 24, 190, 150, 123, 42, 190, 122, 211, 70, 61, 96, 120, 88, 62, 85, 102, 42, 191, 243, 247, 119, 190, 131, 216, 0, 191, 55, 35, 99, 190, 134, 149, 162, 191, 44, 14, 140, 62, 203, 52, 159, 61, 41, 215, 40, 191, 103, 113, 167, 62, 74, 241, 194, 189, 251, 96, 176, 59, 83, 142, 2, 191, 242, 253, 13, 190, 146, 131, 35, 190, 61, 158, 19, 191, 238, 164, 8, 189, 17, 7, 131, 189, 64, 200, 69, 189, 17, 193, 99, 62, 17, 148, 168, 187, 240, 118, 181, 190, 213, 223, 92, 62, 144, 53, 36, 61, 82, 19, 225, 190, 29, 253, 215, 61, 92, 111, 212, 190, 235, 161, 108, 190, 60, 14, 189, 189, 180, 77, 114, 62, 165, 59, 18, 62, 172, 21, 23, 62, 154, 157, 236, 61, 68, 206, 138, 190, 61, 161, 38, 62, 44, 4, 24, 190, 170, 36, 147, 190, 49, 15, 159, 61, 52, 62, 175, 190, 200, 239, 235, 190, 250, 137, 105, 190, 254, 160, 11, 62, 233, 77, 32, 191, 123, 38, 181, 61, 38, 46, 218, 190, 211, 29, 86, 62, 100, 112, 110, 62, 109, 170, 224, 61, 195, 206, 45, 190, 144, 105, 159, 62, 64, 67, 8, 190, 231, 172, 84, 189, 168, 156, 106, 191, 220, 23, 9, 61, 13, 165, 48, 61, 66, 241, 170, 189, 66, 197, 3, 190, 241, 195, 115, 190, 235, 27, 147, 191, 198, 22, 19, 61, 201, 68, 189, 62, 76, 205, 138, 188, 134, 206, 225, 61, 98, 66, 203, 61, 62, 223, 212, 189, 204, 170, 116, 191, 18, 179, 203, 189, 112, 206, 110, 190, 70, 83, 95, 62, 247, 133, 90, 191, 246, 59, 51, 62, 167, 189, 181, 189, 230, 56, 195, 60, 110, 168, 56, 62, 222, 228, 3, 191, 128, 254, 13, 62, 87, 62, 244, 190, 107, 148, 77, 62, 217, 177, 126, 62, 194, 197, 23, 190, 69, 57, 6, 62, 14, 218, 138, 62, 245, 51, 76, 190, 236, 221, 255, 60, 146, 166, 166, 188, 176, 224, 12, 191, 0, 80, 92, 62, 3, 17, 208, 190, 105, 138, 95, 191, 14, 250, 246, 190, 13, 43, 90, 191, 240, 165, 136, 62, 86, 165, 45, 62, 44, 125, 247, 60, 213, 185, 47, 190, 14, 210, 66, 62, 114, 11, 19, 62, 15, 224, 146, 191, 109, 249, 88, 190, 79, 66, 4, 191, 63, 205, 119, 58, 72, 128, 225, 191, 120, 67, 180, 62, 55, 72, 15, 191, 197, 126, 14, 191, 208, 109, 116, 62, 184, 147, 106, 62, 176, 109, 188, 190, 243, 163, 241, 61, 209, 20, 7, 191, 87, 235, 101, 60, 243, 93, 180, 190, 13, 225, 22, 62, 148, 189, 239, 62, 171, 96, 24, 62, 22, 46, 237, 189, 77, 139, 195, 190, 118, 221, 107, 62, 196, 111, 236, 189, 91, 255, 15, 62, 24, 243, 147, 62, 45, 59, 36, 62, 2, 205, 189, 62, 162, 31, 186, 189, 172, 100, 245, 189, 127, 208, 49, 62, 152, 231, 28, 190, 10, 209, 202, 189, 153, 88, 27, 62, 193, 34, 182, 62, 177, 179, 231, 191, 2, 206, 55, 190, 80, 49, 201, 62, 164, 167, 66, 61, 229, 33, 194, 190, 156, 160, 120, 189, 186, 119, 51, 60, 128, 159, 237, 60, 180, 120, 141, 190, 112, 194, 0, 189, 226, 107, 88, 190, 2, 202, 208, 61, 3, 125, 42, 189, 6, 248, 60, 190, 129, 22, 51, 191, 117, 1, 167, 62, 117, 32, 13, 190, 79, 32, 148, 61, 45, 188, 94, 62, 26, 198, 163, 190, 194, 242, 19, 62, 115, 247, 82, 60, 231, 161, 183, 61, 245, 239, 136, 62, 206, 99, 101, 62, 249, 203, 235, 61, 129, 130, 142, 61, 158, 136, 226, 190, 38, 151, 12, 190, 204, 230, 213, 61, 96, 173, 150, 62, 240, 19, 30, 188, 103, 15, 183, 188, 143, 15, 203, 191, 66, 132, 18, 190, 243, 245, 55, 190, 97, 251, 117, 62, 164, 153, 142, 62, 76, 78, 44, 189, 102, 17, 84, 62, 44, 195, 54, 62, 114, 80, 232, 60, 237, 253, 134, 62, 79, 88, 19, 191, 138, 236, 245, 189, 184, 169, 46, 191, 221, 183, 98, 62, 176, 147, 5, 63, 188, 214, 27, 61, 188, 199, 131, 189, 101, 185, 36, 191, 196, 218, 100, 62, 224, 118, 157, 190, 253, 233, 58, 62, 170, 111, 178, 61, 195, 76, 133, 62, 230, 104, 136, 62, 158, 44, 94, 188, 205, 16, 121, 61, 173, 78, 240, 61, 236, 48, 215, 190, 41, 45, 254, 189, 3, 16, 172, 61, 33, 65, 156, 62, 13, 243, 223, 191, 225, 63, 245, 189, 106, 230, 196, 61, 137, 51, 20, 62, 235, 66, 78, 61, 219, 53, 180, 190, 214, 126, 200, 62, 186, 191, 64, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 218, 182, 190, 157, 244, 27, 190, 28, 129, 141, 189, 20, 37, 173, 61, 142, 77, 151, 61, 145, 74, 18, 62, 175, 34, 94, 62, 193, 45, 51, 62, 54, 62, 48, 62, 194, 170, 239, 189, 51, 126, 136, 189, 31, 26, 55, 62, 122, 33, 77, 190, 250, 128, 51, 62, 214, 150, 120, 62, 114, 248, 80, 189, 27, 35, 97, 60, 134, 98, 51, 62, 13, 116, 246, 189, 45, 132, 17, 61, 87, 247, 121, 189, 76, 13, 155, 61, 137, 251, 13, 189, 13, 96, 253, 61, 46, 35, 159, 61, 152, 140, 22, 62, 102, 146, 164, 61, 218, 194, 144, 62, 21, 172, 163, 61, 231, 112, 20, 62, 0, 156, 201, 61, 59, 45, 68, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 137, 58, 63, 18, 103, 111, 190, 231, 213, 230, 62, 51, 204, 228, 190, 29, 82, 167, 188, 116, 138, 6, 191, 179, 190, 164, 62, 164, 175, 245, 62, 41, 123, 138, 190, 36, 61, 140, 189, 165, 16, 126, 190, 162, 36, 50, 191, 119, 189, 205, 60, 92, 121, 138, 62, 19, 78, 130, 62, 76, 125, 154, 190, 21, 217, 77, 61, 197, 68, 42, 63, 245, 62, 147, 60, 46, 65, 189, 190, 104, 252, 101, 60, 242, 193, 231, 62, 128, 74, 135, 190, 52, 36, 229, 190, 99, 131, 189, 62, 239, 96, 57, 191, 60, 230, 153, 62, 66, 178, 181, 190, 225, 193, 117, 191, 135, 152, 200, 62, 88, 15, 247, 62, 241, 16, 76, 63, 203, 8, 40, 63, 108, 93, 15, 62, 73, 8, 242, 60, 169, 239, 86, 62, 158, 224, 60, 190, 30, 54, 188, 190, 95, 251, 145, 62, 26, 49, 158, 61, 47, 10, 195, 189, 163, 177, 127, 189, 37, 177, 21, 62, 65, 100, 213, 188, 82, 233, 180, 188, 147, 25, 190, 190, 165, 250, 60, 189, 182, 11, 60, 190, 113, 162, 238, 61, 174, 117, 85, 188, 2, 118, 12, 62, 212, 164, 91, 190, 76, 70, 69, 190, 101, 81, 178, 61, 159, 101, 89, 190, 216, 18, 134, 190, 92, 234, 113, 62, 143, 193, 27, 61, 255, 234, 73, 60, 226, 118, 153, 190, 19, 51, 194, 62, 186, 126, 115, 190, 215, 66, 34, 190, 174, 47, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 27, 2, 190, 174, 254, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {115, 181, 139, 63, 249, 23, 48, 190, 65, 68, 5, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 110, 14, 64, 231, 155, 146, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}