// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 112, 12, 191, 185, 199, 53, 189, 117, 58, 127, 63, 217, 25, 10, 62, 123, 146, 12, 63, 159, 209, 70, 190, 199, 158, 207, 190, 36, 105, 232, 62, 186, 90, 74, 63, 9, 15, 253, 190, 30, 218, 132, 191, 77, 170, 39, 190, 32, 30, 199, 59, 211, 72, 27, 191, 166, 81, 214, 189, 183, 191, 40, 63, 147, 81, 141, 63, 219, 152, 139, 62, 100, 16, 6, 191, 203, 163, 40, 63, 10, 39, 223, 61, 146, 154, 103, 63, 221, 19, 131, 61, 32, 192, 28, 62, 141, 6, 42, 63, 90, 233, 175, 190, 185, 78, 209, 190, 127, 43, 0, 191, 241, 207, 207, 188, 36, 81, 213, 190, 96, 104, 199, 60, 151, 72, 39, 191, 29, 254, 93, 63, 178, 66, 51, 61, 242, 135, 241, 62, 54, 116, 95, 63, 89, 4, 162, 188, 132, 226, 205, 62, 244, 24, 17, 191, 191, 44, 145, 61, 119, 59, 51, 63, 186, 151, 0, 191, 179, 240, 153, 62, 145, 39, 178, 62, 39, 93, 156, 62, 107, 230, 179, 62, 210, 47, 169, 187, 212, 208, 177, 189, 246, 195, 28, 190, 172, 92, 85, 191, 210, 205, 188, 62, 129, 23, 2, 62, 108, 157, 222, 61, 37, 189, 247, 189, 3, 244, 187, 62, 75, 124, 161, 190, 116, 15, 123, 60, 67, 187, 61, 191, 92, 200, 58, 63, 158, 66, 221, 61, 119, 184, 31, 63, 198, 84, 138, 63, 45, 98, 238, 62, 219, 154, 48, 188, 159, 191, 79, 63, 237, 125, 253, 190, 244, 127, 163, 190, 106, 135, 165, 190, 247, 18, 56, 62, 213, 143, 79, 189, 66, 207, 212, 190, 145, 131, 52, 63, 34, 100, 184, 190, 158, 96, 77, 191, 79, 153, 100, 190, 107, 182, 26, 190, 165, 25, 149, 63, 247, 207, 72, 62, 208, 140, 51, 63, 72, 242, 70, 190, 82, 211, 213, 190, 207, 145, 197, 189, 82, 9, 225, 62, 214, 246, 248, 62, 222, 205, 1, 190, 247, 174, 85, 191, 56, 24, 125, 61, 242, 88, 3, 63, 230, 174, 18, 63, 96, 89, 40, 63, 204, 173, 187, 62, 219, 2, 151, 191, 25, 174, 188, 190, 56, 229, 68, 190, 215, 114, 188, 190, 86, 218, 40, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 27, 12, 191, 10, 82, 4, 190, 184, 23, 78, 190, 117, 232, 111, 189, 100, 242, 10, 63, 19, 59, 244, 189, 2, 255, 189, 62, 77, 91, 157, 62, 170, 57, 64, 191, 121, 159, 147, 60, 140, 146, 112, 190, 149, 105, 149, 62, 47, 239, 114, 62, 67, 147, 54, 62, 124, 38, 203, 62, 31, 12, 217, 190, 189, 177, 6, 191, 101, 167, 151, 62, 43, 79, 241, 62, 87, 120, 236, 61, 52, 155, 151, 190, 88, 5, 246, 62, 106, 117, 245, 62, 12, 65, 129, 190, 115, 122, 162, 190, 39, 250, 94, 62, 241, 80, 232, 190, 35, 208, 157, 61, 90, 195, 183, 62, 1, 137, 19, 62, 27, 27, 144, 60, 73, 97, 145, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 91, 30, 190, 138, 88, 13, 190, 178, 181, 125, 187, 109, 195, 50, 190, 135, 26, 181, 190, 231, 215, 131, 62, 52, 210, 164, 59, 65, 176, 228, 61, 15, 235, 21, 62, 183, 10, 181, 61, 29, 194, 19, 62, 175, 168, 35, 62, 226, 191, 49, 190, 122, 55, 179, 60, 104, 114, 43, 190, 157, 92, 46, 62, 201, 147, 68, 190, 61, 222, 159, 190, 160, 150, 195, 190, 18, 77, 200, 189, 26, 150, 163, 62, 190, 120, 103, 190, 218, 250, 238, 189, 250, 231, 43, 190, 195, 79, 20, 190, 127, 245, 212, 59, 89, 155, 225, 189, 171, 23, 133, 60, 251, 254, 151, 190, 99, 71, 122, 62, 161, 5, 60, 61, 194, 70, 207, 190, 217, 194, 38, 62, 31, 251, 3, 62, 79, 57, 204, 61, 94, 15, 174, 190, 78, 61, 163, 190, 202, 55, 181, 62, 107, 127, 115, 61, 195, 208, 129, 188, 139, 14, 189, 189, 208, 104, 248, 190, 242, 40, 65, 62, 168, 133, 52, 62, 48, 253, 6, 62, 53, 79, 170, 62, 28, 1, 179, 61, 77, 106, 91, 190, 62, 197, 120, 62, 251, 42, 165, 61, 81, 220, 239, 60, 16, 146, 96, 189, 143, 18, 89, 61, 0, 203, 62, 62, 90, 170, 51, 61, 223, 225, 223, 60, 208, 58, 152, 61, 107, 30, 156, 61, 68, 251, 220, 188, 176, 71, 188, 61, 67, 154, 109, 60, 19, 200, 70, 62, 20, 141, 250, 189, 107, 146, 10, 62, 234, 104, 35, 190, 119, 20, 83, 190, 119, 1, 17, 189, 227, 7, 210, 61, 198, 48, 50, 187, 63, 221, 146, 190, 200, 68, 169, 190, 57, 61, 140, 62, 175, 64, 95, 190, 42, 235, 105, 62, 213, 130, 176, 60, 150, 2, 254, 59, 19, 249, 130, 60, 221, 173, 187, 188, 94, 47, 66, 62, 216, 139, 240, 186, 84, 61, 168, 61, 139, 65, 39, 62, 233, 231, 15, 62, 90, 30, 29, 191, 94, 19, 133, 190, 237, 76, 7, 62, 72, 0, 29, 190, 213, 187, 67, 61, 191, 72, 8, 189, 216, 103, 72, 191, 227, 140, 72, 190, 20, 198, 211, 189, 112, 178, 107, 62, 238, 42, 34, 62, 86, 19, 147, 62, 254, 245, 28, 62, 179, 227, 236, 189, 67, 164, 200, 61, 153, 93, 215, 61, 66, 171, 231, 189, 97, 24, 40, 190, 116, 254, 52, 189, 197, 212, 154, 188, 66, 85, 173, 189, 190, 170, 48, 190, 159, 184, 14, 190, 39, 3, 174, 189, 237, 76, 91, 189, 73, 53, 35, 61, 130, 42, 90, 61, 0, 139, 5, 189, 197, 34, 213, 189, 71, 45, 163, 189, 171, 197, 176, 61, 56, 171, 187, 61, 57, 68, 29, 189, 219, 82, 47, 189, 80, 140, 147, 188, 65, 166, 66, 190, 112, 155, 33, 190, 135, 34, 0, 190, 244, 197, 180, 189, 181, 146, 150, 189, 19, 51, 207, 187, 112, 43, 61, 60, 213, 152, 54, 189, 207, 104, 221, 188, 244, 52, 50, 190, 34, 29, 161, 188, 18, 136, 170, 61, 166, 23, 80, 62, 37, 219, 4, 62, 101, 196, 225, 60, 193, 219, 228, 189, 200, 128, 30, 190, 101, 154, 148, 62, 93, 152, 32, 188, 212, 128, 232, 189, 142, 199, 193, 60, 164, 92, 27, 62, 253, 199, 139, 188, 68, 36, 124, 190, 252, 128, 216, 60, 218, 240, 138, 189, 119, 65, 159, 189, 163, 191, 75, 62, 154, 131, 136, 61, 88, 167, 23, 62, 189, 3, 152, 61, 198, 73, 241, 61, 132, 72, 140, 62, 34, 221, 180, 188, 151, 234, 87, 190, 61, 92, 241, 189, 34, 0, 151, 188, 184, 165, 7, 61, 248, 65, 44, 62, 244, 5, 103, 61, 126, 82, 144, 61, 69, 123, 5, 61, 153, 35, 249, 190, 54, 146, 128, 61, 189, 34, 249, 190, 170, 41, 82, 62, 190, 119, 36, 61, 61, 66, 124, 62, 35, 225, 192, 189, 192, 197, 194, 62, 74, 18, 64, 188, 124, 247, 12, 62, 35, 62, 162, 189, 242, 105, 107, 190, 82, 239, 108, 62, 117, 86, 124, 190, 152, 103, 149, 189, 159, 245, 16, 190, 174, 254, 236, 190, 152, 109, 180, 189, 76, 134, 240, 61, 198, 99, 123, 60, 226, 77, 53, 188, 85, 126, 138, 62, 108, 127, 207, 61, 108, 162, 179, 190, 62, 72, 142, 190, 3, 46, 64, 190, 41, 199, 181, 189, 223, 255, 177, 190, 21, 14, 158, 189, 151, 187, 237, 59, 223, 42, 18, 191, 142, 187, 129, 60, 122, 97, 144, 62, 251, 189, 8, 190, 154, 238, 5, 62, 204, 213, 114, 58, 171, 36, 130, 60, 166, 29, 237, 190, 74, 166, 157, 60, 132, 81, 70, 62, 202, 59, 35, 61, 49, 81, 60, 190, 129, 12, 205, 190, 16, 114, 35, 62, 244, 32, 95, 190, 36, 67, 61, 62, 112, 151, 138, 189, 105, 17, 166, 60, 143, 132, 205, 62, 1, 199, 98, 62, 113, 8, 127, 188, 95, 188, 165, 59, 123, 230, 7, 191, 248, 4, 163, 189, 235, 3, 201, 188, 148, 234, 211, 62, 219, 66, 198, 61, 118, 245, 4, 62, 65, 115, 24, 62, 155, 82, 102, 61, 222, 94, 247, 189, 37, 188, 74, 190, 65, 111, 135, 62, 112, 172, 46, 60, 94, 114, 30, 62, 35, 36, 122, 187, 145, 10, 65, 62, 12, 105, 168, 190, 179, 136, 198, 189, 2, 40, 15, 190, 111, 201, 211, 188, 26, 15, 26, 62, 113, 214, 165, 190, 100, 127, 74, 189, 224, 8, 236, 190, 205, 168, 62, 62, 229, 94, 206, 59, 236, 122, 217, 188, 187, 174, 95, 62, 95, 231, 85, 190, 231, 75, 9, 62, 242, 161, 89, 61, 106, 57, 172, 59, 119, 221, 95, 62, 225, 107, 135, 190, 90, 108, 243, 189, 98, 158, 236, 189, 137, 139, 201, 62, 118, 239, 38, 190, 55, 241, 129, 188, 138, 71, 31, 190, 253, 159, 100, 62, 248, 72, 206, 61, 247, 82, 153, 190, 181, 239, 104, 62, 254, 201, 180, 61, 180, 109, 227, 59, 46, 75, 149, 189, 211, 58, 184, 61, 146, 201, 36, 191, 121, 246, 172, 190, 12, 116, 131, 62, 109, 225, 92, 189, 39, 207, 72, 62, 158, 31, 97, 189, 118, 3, 158, 190, 230, 239, 200, 189, 54, 199, 89, 62, 22, 188, 144, 190, 196, 235, 54, 61, 74, 227, 102, 62, 250, 120, 13, 62, 106, 227, 162, 62, 41, 244, 13, 62, 247, 68, 3, 62, 196, 141, 42, 62, 151, 91, 14, 61, 180, 104, 148, 60, 15, 182, 23, 61, 156, 116, 202, 61, 251, 132, 166, 61, 174, 166, 165, 58, 99, 157, 229, 189, 248, 197, 103, 189, 23, 223, 159, 190, 77, 175, 110, 62, 113, 26, 132, 190, 142, 150, 11, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 7, 165, 112, 62, 3, 127, 158, 190, 220, 218, 13, 62, 196, 251, 50, 62, 90, 220, 86, 60, 209, 186, 145, 61, 125, 142, 253, 188, 230, 123, 178, 190, 245, 21, 134, 62, 84, 176, 183, 190, 255, 190, 133, 62, 20, 136, 51, 62, 34, 94, 251, 189, 148, 48, 228, 189, 226, 59, 54, 61, 92, 244, 237, 60, 162, 198, 46, 62, 15, 201, 75, 190, 206, 133, 141, 62, 204, 120, 101, 61, 56, 6, 57, 190, 89, 195, 76, 190, 131, 67, 171, 189, 27, 0, 152, 62, 227, 158, 152, 62, 212, 70, 254, 189, 41, 32, 160, 62, 11, 237, 125, 62, 112, 212, 146, 61, 138, 115, 231, 61, 228, 59, 205, 62, 244, 57, 137, 61, 115, 184, 209, 190, 184, 150, 157, 62, 201, 31, 60, 191, 129, 11, 33, 62, 11, 199, 229, 188, 5, 132, 123, 62, 251, 216, 11, 190, 255, 172, 171, 62, 4, 11, 30, 190, 165, 94, 106, 62, 157, 67, 221, 188, 187, 90, 197, 190, 22, 136, 171, 62, 68, 19, 184, 190, 183, 148, 84, 190, 21, 149, 11, 61, 187, 108, 91, 190, 79, 83, 133, 61, 115, 147, 155, 61, 171, 68, 185, 60, 149, 141, 36, 62, 64, 192, 187, 62, 79, 3, 48, 62, 15, 121, 41, 191, 15, 18, 211, 190, 64, 120, 174, 190, 36, 208, 77, 190, 148, 77, 83, 191, 30, 236, 136, 62, 161, 156, 235, 61, 100, 141, 46, 191, 157, 3, 164, 62, 236, 176, 0, 61, 87, 224, 36, 59, 182, 213, 34, 190, 98, 103, 217, 189, 124, 31, 104, 189, 121, 6, 128, 188, 52, 155, 37, 189, 225, 81, 161, 61, 66, 246, 127, 189, 143, 213, 0, 62, 232, 94, 130, 60, 215, 42, 201, 189, 87, 165, 158, 60, 75, 108, 14, 190, 83, 7, 165, 61, 89, 28, 232, 60, 117, 254, 234, 188, 101, 241, 128, 189, 212, 38, 206, 187, 167, 217, 213, 61, 44, 244, 3, 62, 165, 218, 84, 57, 58, 225, 7, 190, 243, 33, 221, 189, 98, 218, 178, 189, 179, 27, 68, 190, 182, 150, 135, 61, 126, 248, 151, 61, 166, 36, 35, 190, 85, 11, 1, 62, 63, 124, 21, 190, 160, 185, 15, 62, 167, 127, 157, 190, 202, 160, 6, 60, 27, 34, 218, 190, 176, 243, 141, 61, 105, 81, 50, 62, 22, 135, 140, 61, 186, 32, 28, 191, 121, 18, 188, 62, 159, 53, 143, 189, 4, 160, 141, 189, 24, 204, 134, 59, 183, 99, 147, 189, 163, 12, 30, 62, 95, 219, 5, 189, 84, 236, 230, 61, 4, 60, 173, 60, 91, 84, 214, 60, 53, 214, 202, 189, 149, 104, 104, 61, 40, 55, 193, 190, 62, 148, 81, 189, 46, 18, 183, 189, 1, 205, 166, 189, 168, 93, 217, 189, 52, 208, 36, 62, 235, 181, 48, 191, 178, 105, 188, 59, 67, 247, 169, 190, 153, 118, 68, 61, 132, 210, 140, 62, 42, 95, 169, 61, 254, 210, 75, 62, 148, 214, 224, 60, 186, 214, 61, 61, 102, 83, 56, 189, 160, 12, 220, 189, 153, 86, 5, 62, 61, 206, 3, 191, 122, 122, 33, 189, 80, 188, 211, 62, 175, 210, 72, 190, 176, 184, 4, 62, 213, 101, 0, 191, 98, 98, 174, 61, 231, 13, 127, 60, 74, 97, 40, 62, 163, 66, 137, 62, 57, 33, 22, 62, 108, 211, 155, 62, 29, 170, 146, 61, 228, 222, 30, 188, 28, 167, 91, 62, 30, 24, 228, 190, 134, 89, 6, 190, 6, 52, 147, 62, 65, 203, 135, 62, 24, 214, 46, 190, 139, 109, 165, 188, 93, 89, 98, 190, 166, 86, 36, 62, 111, 61, 158, 60, 180, 215, 2, 190, 212, 50, 9, 62, 93, 130, 58, 188, 123, 207, 142, 62, 124, 72, 207, 60, 111, 88, 140, 62, 239, 31, 237, 190, 62, 137, 155, 190, 10, 73, 86, 59, 197, 151, 12, 189, 15, 118, 171, 190, 48, 82, 135, 59, 215, 92, 149, 190, 138, 181, 80, 59, 229, 24, 139, 62, 71, 86, 33, 189, 69, 105, 39, 62, 132, 234, 161, 189, 165, 66, 34, 190, 225, 60, 154, 62, 211, 125, 27, 190, 218, 213, 124, 62, 199, 15, 78, 62, 169, 236, 25, 188, 52, 109, 144, 189, 29, 190, 172, 189, 75, 245, 159, 62, 81, 77, 136, 62, 91, 188, 59, 62, 65, 11, 135, 189, 77, 153, 241, 61, 78, 22, 140, 188, 104, 51, 98, 62, 161, 211, 117, 62, 181, 54, 76, 62, 192, 65, 129, 189, 133, 140, 212, 189, 0, 96, 222, 189, 137, 174, 209, 188, 192, 97, 39, 190, 106, 80, 41, 62, 126, 197, 81, 60, 181, 45, 30, 189, 127, 46, 158, 61, 40, 242, 240, 61, 208, 121, 17, 190, 238, 191, 51, 190, 41, 37, 89, 185, 101, 229, 240, 189, 204, 121, 239, 186, 168, 164, 226, 189, 62, 197, 92, 61, 19, 7, 16, 190, 81, 159, 173, 186, 77, 239, 9, 190, 206, 3, 128, 187, 31, 196, 121, 188, 1, 221, 41, 61, 80, 212, 252, 61, 154, 97, 164, 188, 32, 150, 92, 61, 138, 22, 184, 189, 192, 49, 217, 61, 197, 103, 255, 60, 3, 183, 31, 190, 1, 186, 90, 60, 117, 187, 35, 190, 199, 75, 124, 62, 254, 125, 147, 61, 186, 138, 125, 61, 64, 117, 255, 190, 255, 39, 146, 61, 125, 179, 17, 191, 66, 182, 24, 62, 183, 179, 246, 62, 93, 243, 170, 189, 5, 66, 145, 189, 99, 6, 27, 191, 222, 60, 23, 62, 11, 234, 95, 190, 227, 24, 136, 62, 193, 170, 157, 62, 241, 240, 180, 62, 125, 29, 130, 62, 76, 79, 86, 62, 108, 171, 71, 62, 250, 237, 142, 62, 151, 160, 236, 190, 77, 87, 2, 62, 189, 3, 181, 61, 120, 155, 65, 62, 223, 102, 8, 191, 196, 113, 27, 62, 153, 0, 30, 190, 224, 163, 21, 62, 157, 50, 201, 189, 209, 184, 136, 190, 118, 165, 122, 61, 28, 206, 241, 189, 9, 205, 135, 61, 74, 4, 254, 61, 209, 10, 36, 187, 141, 199, 147, 61, 28, 60, 217, 60, 123, 131, 172, 189, 250, 141, 219, 189, 224, 59, 47, 62, 94, 30, 14, 62, 136, 133, 23, 62, 245, 195, 21, 190, 239, 209, 18, 62, 54, 178, 44, 189, 173, 27, 157, 189, 160, 108, 94, 189, 179, 81, 66, 189, 42, 26, 175, 188, 210, 36, 193, 61, 247, 102, 56, 190, 73, 65, 3, 189, 39, 199, 19, 190, 221, 250, 202, 189, 244, 149, 126, 190, 168, 119, 189, 61, 32, 213, 156, 61, 112, 79, 212, 189, 225, 62, 192, 61, 227, 86, 149, 189, 197, 249, 103, 190, 23, 183, 214, 61, 131, 224, 170, 189, 3, 255, 128, 190, 51, 128, 149, 62, 155, 184, 13, 190, 51, 75, 194, 61, 201, 194, 110, 61, 106, 205, 137, 60, 98, 138, 224, 187, 48, 157, 74, 62, 136, 46, 7, 191, 167, 225, 48, 62, 112, 32, 213, 190, 54, 0, 197, 189, 137, 50, 162, 60, 100, 219, 34, 190, 162, 123, 21, 190, 244, 190, 149, 189, 10, 11, 40, 62, 52, 31, 197, 61, 12, 9, 152, 189, 140, 253, 140, 61, 225, 5, 198, 61, 199, 229, 230, 60, 125, 247, 118, 190, 186, 243, 30, 61, 234, 207, 253, 189, 194, 189, 100, 62, 173, 90, 33, 62, 134, 130, 253, 188, 87, 72, 181, 189, 53, 195, 132, 60, 11, 221, 100, 190, 97, 230, 24, 62, 109, 231, 50, 62, 106, 253, 32, 62, 198, 24, 172, 188, 165, 11, 29, 62, 112, 164, 105, 61, 76, 199, 199, 61, 76, 152, 166, 190, 89, 105, 69, 62, 54, 89, 201, 62, 196, 100, 98, 190, 192, 170, 55, 62, 230, 40, 214, 188, 216, 182, 149, 62, 231, 231, 14, 61, 112, 229, 214, 185, 191, 97, 158, 62, 212, 111, 0, 190, 107, 47, 128, 62, 157, 126, 16, 62, 89, 229, 22, 61, 51, 158, 136, 189, 148, 115, 51, 190, 116, 92, 95, 60, 27, 54, 128, 61, 255, 233, 56, 62, 90, 133, 94, 60, 134, 48, 245, 188, 52, 153, 2, 189, 157, 186, 20, 188, 151, 154, 3, 62, 247, 34, 233, 60, 148, 120, 94, 60, 199, 24, 80, 61, 247, 52, 161, 62, 252, 10, 50, 190, 186, 110, 116, 62, 245, 193, 10, 190, 7, 78, 233, 61, 103, 106, 14, 191, 156, 74, 88, 189, 211, 118, 188, 62, 102, 122, 199, 189, 71, 255, 17, 62, 130, 174, 187, 190, 221, 109, 40, 62, 112, 51, 150, 189, 164, 215, 12, 62, 35, 218, 140, 62, 242, 41, 237, 189, 4, 116, 140, 62, 113, 216, 39, 62, 22, 2, 174, 188, 129, 225, 194, 61, 51, 35, 47, 190, 60, 145, 108, 190, 157, 178, 84, 189, 29, 1, 156, 62, 188, 4, 72, 62, 245, 49, 62, 61, 247, 13, 157, 189, 61, 217, 22, 62, 96, 138, 85, 189, 7, 136, 162, 190, 70, 170, 235, 61, 28, 183, 145, 61, 63, 184, 143, 190, 5, 238, 88, 61, 241, 161, 29, 190, 40, 186, 6, 61, 16, 71, 205, 187, 121, 17, 149, 62, 185, 176, 218, 60, 163, 204, 103, 62, 108, 69, 88, 62, 119, 26, 164, 61, 176, 61, 128, 62, 188, 67, 137, 189, 157, 87, 107, 62, 46, 228, 54, 190, 85, 222, 227, 61, 23, 119, 38, 61, 43, 161, 41, 191, 139, 59, 77, 62, 134, 16, 185, 62, 210, 205, 193, 189, 14, 40, 46, 62, 15, 246, 105, 62, 169, 196, 229, 187, 104, 213, 224, 190, 129, 78, 108, 190, 238, 90, 9, 190, 238, 80, 250, 61, 78, 151, 121, 190, 144, 65, 25, 190, 205, 43, 211, 62, 190, 158, 116, 189, 138, 141, 135, 189, 160, 96, 54, 190, 87, 177, 164, 62, 108, 182, 84, 190, 69, 57, 85, 62, 61, 112, 90, 59, 48, 29, 175, 62, 184, 32, 184, 61, 206, 83, 196, 62, 1, 155, 185, 189, 94, 117, 5, 62, 81, 218, 68, 189, 119, 78, 221, 61, 43, 124, 65, 62, 83, 87, 115, 190, 31, 85, 149, 187, 215, 75, 70, 62, 98, 144, 184, 190, 14, 155, 235, 61, 201, 122, 159, 188, 49, 237, 121, 190, 161, 135, 218, 62, 44, 45, 89, 62, 103, 228, 142, 189, 145, 83, 255, 190, 52, 154, 197, 190, 66, 241, 92, 189, 246, 101, 40, 190, 224, 246, 123, 190, 161, 225, 45, 61, 234, 96, 215, 62, 67, 122, 213, 190, 228, 194, 122, 61, 151, 118, 97, 62, 175, 96, 200, 61, 126, 254, 172, 61, 86, 32, 240, 190, 107, 47, 57, 58, 69, 235, 172, 190, 115, 27, 184, 61, 71, 151, 160, 62, 108, 59, 29, 62, 226, 73, 16, 190, 14, 110, 210, 189, 248, 81, 149, 59, 31, 60, 255, 186, 21, 170, 166, 189, 135, 17, 252, 189, 35, 116, 138, 61, 224, 26, 160, 62, 216, 42, 94, 190, 106, 171, 129, 189, 26, 130, 152, 61, 26, 64, 92, 190, 81, 144, 23, 60, 131, 228, 218, 61, 166, 120, 224, 61, 17, 123, 70, 190, 126, 76, 197, 188, 253, 222, 27, 62, 255, 150, 118, 62, 35, 125, 151, 61, 202, 13, 233, 189, 14, 252, 140, 61, 34, 242, 169, 189, 248, 146, 225, 190, 31, 149, 40, 62, 30, 187, 55, 191, 225, 208, 6, 62, 214, 236, 52, 62, 109, 243, 134, 62, 93, 86, 79, 61, 87, 173, 157, 62, 158, 135, 34, 190, 9, 94, 140, 62, 243, 164, 26, 190, 148, 61, 6, 191, 56, 182, 213, 62, 232, 202, 161, 190, 171, 185, 165, 190, 101, 177, 73, 62, 64, 97, 46, 191, 254, 193, 106, 62, 27, 11, 144, 189, 124, 18, 119, 188, 127, 123, 243, 189, 50, 22, 205, 61, 215, 160, 35, 62, 216, 234, 52, 191, 175, 144, 155, 190, 64, 186, 176, 190, 141, 143, 30, 190, 166, 250, 71, 191, 202, 200, 222, 61, 62, 51, 210, 61, 13, 37, 46, 191, 215, 149, 119, 62, 100, 219, 74, 188, 190, 33, 201, 61, 173, 62, 205, 190, 130, 76, 45, 189, 13, 114, 7, 190, 187, 100, 75, 190, 79, 244, 202, 189, 122, 137, 33, 189, 240, 61, 85, 188, 127, 6, 137, 62, 67, 163, 172, 60, 7, 222, 135, 190, 199, 22, 159, 62, 157, 108, 31, 62, 181, 79, 205, 189, 243, 64, 40, 62, 150, 142, 155, 190, 243, 145, 12, 190, 151, 53, 209, 187, 145, 222, 4, 62, 72, 14, 94, 62, 152, 103, 122, 62, 238, 236, 102, 190, 6, 161, 137, 190, 34, 69, 138, 62, 143, 230, 208, 61, 253, 198, 92, 190, 212, 149, 144, 62, 198, 1, 161, 190, 215, 96, 158, 190, 237, 121, 252, 189, 48, 108, 135, 190, 104, 10, 52, 191, 10, 209, 3, 62, 37, 125, 1, 191, 198, 226, 57, 62, 22, 63, 112, 62, 247, 173, 189, 61, 131, 221, 89, 190, 172, 90, 157, 62, 87, 77, 94, 189, 137, 213, 135, 189, 149, 11, 22, 191, 100, 13, 207, 189, 173, 214, 59, 61, 158, 157, 172, 189, 6, 30, 3, 190, 219, 58, 50, 190, 210, 175, 24, 191, 177, 133, 30, 61, 23, 104, 195, 62, 216, 110, 185, 188, 161, 2, 220, 61, 16, 59, 227, 61, 58, 86, 146, 189, 97, 14, 77, 191, 98, 195, 249, 189, 186, 23, 2, 190, 51, 51, 105, 62, 229, 228, 26, 191, 23, 218, 75, 62, 70, 91, 233, 189, 227, 170, 227, 60, 224, 119, 144, 62, 59, 173, 108, 191, 28, 73, 39, 62, 122, 146, 1, 191, 233, 133, 165, 61, 77, 114, 46, 62, 63, 219, 199, 189, 118, 241, 95, 62, 27, 249, 109, 62, 50, 33, 143, 188, 125, 177, 130, 61, 239, 133, 36, 189, 199, 232, 83, 191, 122, 241, 116, 62, 21, 11, 188, 190, 16, 195, 29, 191, 66, 178, 140, 190, 213, 15, 7, 191, 6, 71, 125, 62, 123, 88, 53, 61, 239, 69, 49, 62, 122, 233, 127, 189, 147, 131, 128, 62, 203, 158, 32, 62, 32, 49, 106, 191, 58, 25, 139, 190, 39, 132, 99, 190, 240, 110, 24, 61, 60, 115, 159, 191, 222, 81, 58, 62, 141, 105, 46, 190, 114, 167, 28, 191, 73, 105, 79, 62, 32, 142, 98, 62, 153, 239, 129, 190, 115, 79, 194, 61, 192, 74, 125, 190, 30, 61, 134, 61, 243, 122, 166, 190, 138, 63, 184, 61, 131, 223, 238, 62, 166, 32, 0, 62, 242, 68, 52, 190, 104, 204, 169, 190, 154, 41, 129, 62, 213, 255, 216, 189, 37, 177, 66, 62, 27, 193, 152, 62, 122, 10, 227, 61, 85, 155, 243, 62, 246, 250, 204, 189, 69, 148, 181, 189, 13, 30, 84, 61, 217, 60, 255, 189, 245, 182, 66, 189, 119, 4, 53, 62, 224, 148, 208, 62, 140, 183, 102, 191, 122, 67, 58, 190, 220, 252, 184, 62, 109, 26, 22, 60, 45, 134, 84, 190, 96, 47, 130, 189, 122, 223, 168, 60, 127, 198, 223, 61, 238, 158, 54, 190, 193, 126, 137, 189, 116, 89, 2, 190, 178, 18, 163, 61, 208, 207, 174, 189, 166, 137, 102, 190, 74, 99, 32, 191, 18, 132, 159, 62, 160, 79, 4, 190, 19, 96, 235, 61, 168, 97, 48, 62, 249, 4, 105, 190, 202, 117, 22, 62, 181, 159, 103, 187, 237, 204, 174, 61, 0, 52, 135, 62, 164, 174, 146, 61, 0, 20, 158, 61, 171, 66, 137, 59, 169, 123, 227, 190, 18, 76, 249, 189, 105, 110, 93, 61, 44, 0, 246, 61, 157, 128, 102, 188, 60, 233, 123, 60, 51, 65, 95, 191, 113, 221, 24, 190, 175, 101, 17, 190, 39, 204, 32, 62, 151, 159, 157, 62, 240, 213, 171, 188, 94, 81, 119, 61, 63, 15, 6, 62, 79, 56, 211, 61, 73, 105, 132, 62, 48, 25, 185, 190, 190, 187, 26, 190, 53, 175, 5, 191, 42, 193, 105, 62, 248, 243, 7, 63, 237, 85, 202, 188, 187, 215, 147, 189, 68, 9, 50, 191, 232, 39, 113, 62, 224, 142, 161, 190, 107, 255, 86, 62, 29, 74, 238, 61, 92, 123, 246, 61, 39, 222, 128, 62, 224, 106, 185, 188, 149, 46, 23, 61, 175, 101, 144, 61, 88, 197, 138, 190, 206, 12, 99, 189, 145, 10, 70, 60, 137, 191, 137, 62, 116, 92, 83, 191, 56, 83, 191, 188, 138, 85, 224, 60, 193, 251, 41, 62, 193, 122, 171, 61, 98, 231, 170, 190, 65, 140, 193, 62, 85, 162, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 47, 229, 190, 157, 134, 66, 190, 173, 179, 253, 189, 235, 241, 133, 188, 66, 22, 47, 61, 151, 230, 15, 62, 208, 199, 100, 62, 173, 16, 31, 62, 216, 105, 49, 62, 194, 170, 239, 189, 165, 170, 218, 189, 61, 2, 78, 62, 9, 234, 72, 190, 59, 255, 25, 62, 86, 167, 115, 62, 209, 249, 229, 189, 27, 35, 97, 60, 53, 104, 70, 62, 124, 159, 225, 189, 186, 75, 222, 189, 37, 190, 13, 189, 86, 146, 96, 61, 38, 137, 160, 189, 225, 213, 163, 61, 91, 84, 6, 62, 216, 226, 5, 62, 40, 217, 7, 62, 198, 228, 142, 62, 57, 243, 139, 61, 34, 244, 15, 62, 49, 149, 59, 60, 81, 147, 46, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 75, 8, 63, 169, 90, 45, 190, 204, 215, 195, 62, 223, 172, 97, 61, 25, 35, 197, 188, 36, 182, 0, 191, 19, 82, 145, 62, 75, 232, 206, 62, 173, 74, 91, 190, 36, 61, 140, 189, 219, 238, 118, 190, 162, 233, 35, 191, 181, 241, 231, 60, 13, 11, 49, 62, 103, 6, 107, 62, 33, 172, 144, 190, 21, 217, 77, 61, 177, 140, 25, 63, 84, 150, 204, 60, 31, 244, 90, 190, 203, 175, 82, 61, 218, 50, 242, 62, 194, 241, 145, 190, 55, 254, 209, 190, 7, 73, 239, 61, 83, 91, 33, 191, 219, 135, 191, 62, 133, 6, 179, 190, 73, 82, 86, 191, 222, 73, 168, 62, 251, 243, 178, 62, 7, 233, 27, 63, 57, 28, 36, 63, 97, 182, 30, 62, 100, 252, 198, 189, 189, 221, 176, 61, 155, 115, 91, 190, 66, 136, 53, 190, 232, 40, 133, 62, 230, 102, 69, 61, 133, 38, 185, 189, 163, 177, 127, 189, 226, 201, 66, 62, 8, 146, 117, 189, 138, 200, 164, 188, 202, 2, 189, 190, 74, 99, 3, 190, 50, 6, 30, 190, 113, 162, 238, 61, 76, 114, 77, 188, 179, 79, 10, 62, 51, 209, 82, 190, 103, 213, 47, 190, 92, 247, 86, 61, 169, 255, 39, 190, 101, 2, 14, 190, 169, 71, 53, 62, 172, 229, 24, 189, 255, 178, 78, 61, 182, 190, 146, 190, 98, 82, 56, 62, 25, 49, 103, 190, 233, 66, 146, 190, 138, 182, 47, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 159, 209, 189, 67, 252, 55, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 215, 52, 191, 108, 70, 43, 63, 37, 30, 216, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {247, 93, 174, 63, 172, 1, 154, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}