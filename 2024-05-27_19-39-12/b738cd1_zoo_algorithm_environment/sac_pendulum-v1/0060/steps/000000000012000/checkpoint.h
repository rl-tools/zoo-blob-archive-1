// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 88, 212, 190, 145, 221, 105, 62, 122, 93, 115, 63, 32, 217, 19, 190, 176, 131, 19, 63, 82, 107, 36, 190, 191, 161, 194, 190, 61, 2, 127, 63, 246, 45, 33, 63, 125, 98, 201, 190, 79, 1, 173, 191, 18, 139, 108, 190, 84, 99, 4, 61, 61, 201, 115, 191, 36, 232, 68, 190, 157, 167, 44, 63, 94, 235, 165, 63, 160, 148, 154, 62, 160, 176, 55, 191, 116, 56, 93, 62, 92, 99, 135, 189, 168, 38, 42, 63, 43, 255, 219, 62, 236, 187, 47, 62, 151, 212, 89, 63, 26, 53, 29, 191, 203, 90, 195, 190, 138, 20, 216, 190, 187, 152, 29, 191, 162, 223, 180, 190, 102, 6, 11, 62, 95, 170, 61, 191, 136, 22, 87, 63, 138, 42, 156, 61, 155, 164, 85, 63, 32, 107, 60, 63, 201, 210, 133, 189, 205, 21, 194, 62, 61, 21, 8, 191, 26, 137, 5, 185, 136, 49, 68, 63, 173, 95, 240, 190, 27, 13, 146, 62, 201, 139, 5, 63, 219, 66, 91, 62, 30, 87, 168, 62, 100, 7, 19, 190, 178, 245, 56, 190, 207, 11, 175, 190, 112, 203, 112, 191, 31, 56, 223, 62, 70, 20, 251, 61, 170, 241, 72, 190, 107, 57, 208, 189, 31, 161, 159, 62, 187, 208, 190, 190, 136, 145, 197, 188, 97, 22, 76, 191, 114, 81, 85, 63, 59, 116, 8, 62, 242, 209, 65, 63, 121, 155, 146, 63, 138, 64, 199, 62, 84, 139, 151, 189, 65, 194, 89, 63, 86, 116, 238, 190, 108, 66, 180, 190, 222, 189, 27, 191, 228, 112, 35, 62, 211, 139, 254, 187, 8, 47, 61, 191, 105, 72, 37, 63, 154, 80, 174, 190, 205, 51, 143, 191, 6, 31, 132, 190, 61, 196, 165, 189, 109, 111, 181, 63, 205, 147, 146, 62, 32, 57, 74, 63, 24, 193, 255, 190, 162, 137, 206, 190, 73, 187, 93, 188, 164, 133, 116, 63, 140, 207, 136, 62, 173, 151, 18, 190, 243, 162, 162, 191, 148, 34, 19, 61, 220, 55, 224, 62, 109, 2, 61, 63, 175, 15, 37, 63, 6, 74, 182, 62, 63, 67, 173, 191, 95, 252, 172, 190, 116, 17, 84, 190, 164, 156, 34, 191, 107, 46, 247, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 153, 55, 191, 155, 16, 81, 190, 223, 66, 150, 190, 39, 86, 144, 190, 141, 36, 166, 62, 219, 170, 200, 189, 27, 13, 237, 62, 238, 104, 218, 62, 202, 37, 139, 191, 9, 50, 54, 189, 54, 239, 150, 190, 158, 30, 129, 62, 193, 154, 71, 62, 91, 9, 57, 62, 32, 232, 205, 62, 189, 43, 22, 191, 85, 6, 139, 190, 10, 147, 117, 62, 43, 53, 195, 62, 183, 222, 189, 58, 88, 109, 189, 190, 0, 65, 253, 62, 140, 212, 182, 62, 8, 161, 68, 190, 149, 88, 116, 190, 150, 31, 50, 62, 183, 211, 19, 191, 120, 106, 4, 62, 50, 196, 145, 62, 194, 214, 35, 62, 200, 236, 86, 61, 146, 50, 193, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 161, 101, 190, 254, 236, 103, 62, 85, 43, 203, 187, 131, 130, 19, 190, 212, 104, 77, 191, 159, 84, 184, 62, 68, 207, 198, 61, 240, 170, 86, 62, 68, 211, 73, 188, 115, 166, 14, 189, 157, 95, 219, 61, 73, 248, 48, 62, 6, 186, 253, 61, 126, 152, 137, 62, 73, 49, 225, 189, 131, 7, 104, 188, 81, 154, 92, 190, 224, 75, 177, 190, 128, 236, 201, 190, 7, 79, 175, 189, 160, 248, 179, 62, 228, 95, 109, 189, 247, 176, 192, 189, 154, 22, 80, 190, 167, 165, 18, 190, 13, 103, 197, 61, 194, 25, 201, 190, 115, 30, 140, 61, 36, 28, 159, 190, 79, 124, 134, 62, 31, 204, 107, 190, 248, 74, 198, 190, 48, 83, 8, 62, 35, 71, 234, 61, 41, 75, 97, 61, 218, 228, 129, 190, 43, 112, 170, 190, 67, 129, 213, 62, 176, 20, 234, 61, 186, 166, 244, 60, 217, 184, 32, 191, 46, 188, 46, 191, 254, 52, 83, 62, 208, 113, 54, 62, 116, 83, 35, 61, 205, 185, 154, 62, 71, 36, 49, 62, 134, 191, 58, 191, 84, 109, 149, 62, 135, 86, 46, 61, 182, 102, 131, 61, 20, 216, 173, 189, 100, 142, 205, 61, 230, 21, 86, 62, 173, 136, 130, 61, 126, 238, 78, 61, 189, 59, 210, 62, 14, 208, 26, 62, 156, 185, 138, 190, 178, 48, 153, 61, 81, 78, 3, 62, 250, 190, 51, 62, 120, 70, 137, 190, 222, 97, 53, 62, 165, 241, 146, 190, 63, 255, 234, 189, 143, 102, 27, 190, 34, 59, 213, 61, 87, 56, 36, 61, 204, 160, 159, 190, 59, 223, 201, 190, 15, 66, 147, 62, 150, 252, 19, 190, 169, 35, 89, 62, 110, 244, 236, 60, 129, 203, 3, 190, 162, 219, 210, 60, 145, 227, 64, 188, 196, 224, 42, 62, 4, 180, 201, 61, 239, 249, 107, 62, 114, 199, 79, 62, 66, 174, 80, 62, 198, 184, 101, 191, 82, 155, 179, 190, 18, 117, 54, 62, 139, 64, 234, 60, 96, 189, 148, 60, 118, 81, 145, 189, 172, 83, 193, 191, 188, 0, 19, 190, 140, 24, 102, 190, 19, 78, 162, 62, 126, 67, 239, 61, 228, 177, 146, 62, 255, 168, 161, 62, 213, 37, 156, 190, 202, 108, 67, 62, 145, 193, 251, 60, 125, 151, 220, 188, 118, 74, 2, 191, 199, 56, 46, 190, 121, 205, 144, 62, 102, 228, 183, 190, 200, 156, 48, 191, 223, 235, 64, 190, 244, 33, 157, 190, 31, 137, 91, 190, 179, 204, 232, 61, 24, 36, 40, 62, 143, 8, 51, 62, 68, 201, 6, 191, 7, 183, 106, 190, 106, 18, 157, 61, 205, 50, 120, 61, 93, 51, 250, 61, 161, 88, 36, 191, 178, 115, 249, 61, 171, 45, 132, 190, 27, 15, 206, 190, 206, 232, 190, 189, 57, 89, 16, 62, 165, 41, 131, 190, 20, 143, 194, 60, 137, 157, 62, 190, 111, 242, 255, 190, 234, 115, 182, 190, 129, 254, 214, 189, 47, 212, 87, 60, 247, 78, 163, 61, 150, 242, 48, 62, 72, 52, 58, 62, 82, 238, 172, 187, 233, 55, 156, 189, 101, 164, 17, 190, 184, 57, 61, 62, 67, 233, 134, 189, 149, 190, 176, 189, 199, 223, 71, 61, 195, 121, 46, 62, 69, 26, 59, 61, 99, 27, 41, 190, 153, 116, 160, 58, 51, 34, 14, 190, 174, 231, 46, 60, 27, 44, 79, 62, 222, 9, 114, 60, 183, 111, 21, 62, 253, 141, 128, 61, 222, 210, 60, 62, 166, 202, 134, 62, 118, 120, 40, 60, 243, 153, 75, 190, 174, 192, 73, 190, 223, 62, 19, 61, 138, 15, 87, 185, 211, 197, 255, 61, 224, 23, 12, 61, 62, 239, 2, 189, 151, 138, 226, 60, 38, 4, 152, 190, 92, 122, 7, 62, 130, 210, 28, 191, 64, 197, 152, 62, 156, 111, 84, 189, 145, 19, 148, 62, 131, 40, 4, 189, 33, 163, 195, 62, 168, 108, 178, 190, 28, 86, 5, 62, 77, 185, 21, 62, 12, 240, 222, 189, 184, 20, 129, 62, 106, 200, 59, 190, 33, 198, 180, 188, 45, 219, 208, 190, 42, 135, 211, 190, 19, 236, 205, 189, 142, 115, 185, 61, 78, 154, 56, 189, 13, 247, 215, 188, 88, 250, 155, 62, 245, 30, 109, 189, 181, 198, 179, 61, 43, 227, 129, 190, 52, 112, 66, 189, 33, 47, 50, 190, 78, 135, 177, 190, 253, 18, 23, 190, 133, 203, 4, 61, 79, 55, 52, 191, 175, 45, 85, 59, 255, 6, 117, 62, 225, 194, 163, 190, 169, 255, 25, 62, 172, 132, 186, 189, 195, 181, 135, 60, 46, 24, 24, 191, 2, 67, 22, 60, 37, 232, 86, 62, 208, 44, 10, 62, 67, 139, 109, 190, 146, 89, 226, 190, 111, 142, 253, 61, 36, 145, 190, 190, 248, 89, 65, 60, 242, 70, 100, 189, 84, 49, 44, 62, 4, 101, 150, 62, 11, 91, 115, 62, 127, 163, 199, 60, 14, 27, 132, 61, 17, 2, 54, 191, 177, 161, 144, 190, 100, 11, 145, 188, 36, 221, 183, 62, 91, 146, 239, 188, 245, 250, 112, 62, 55, 111, 12, 62, 113, 188, 199, 61, 113, 100, 236, 189, 162, 205, 72, 190, 122, 52, 170, 62, 255, 21, 217, 186, 222, 174, 72, 62, 201, 65, 152, 190, 183, 250, 117, 62, 86, 141, 36, 191, 188, 106, 193, 189, 55, 69, 44, 190, 104, 196, 223, 188, 86, 215, 41, 62, 191, 94, 146, 190, 160, 70, 154, 61, 134, 163, 225, 190, 14, 54, 84, 62, 171, 210, 56, 61, 22, 137, 147, 189, 8, 132, 95, 62, 58, 140, 230, 189, 13, 44, 220, 61, 5, 88, 113, 61, 28, 225, 118, 59, 155, 37, 147, 62, 111, 225, 166, 190, 85, 162, 39, 190, 249, 245, 201, 189, 121, 134, 206, 62, 154, 203, 141, 191, 39, 143, 72, 60, 89, 186, 155, 189, 164, 37, 114, 62, 4, 221, 169, 187, 41, 121, 131, 190, 139, 65, 131, 62, 116, 73, 145, 61, 200, 129, 94, 189, 117, 33, 231, 61, 85, 117, 252, 60, 13, 5, 196, 191, 7, 110, 250, 190, 95, 206, 151, 62, 213, 76, 187, 189, 60, 177, 94, 62, 66, 19, 130, 190, 231, 194, 153, 190, 125, 54, 28, 190, 104, 161, 64, 62, 170, 75, 86, 190, 199, 99, 85, 62, 179, 158, 132, 62, 50, 57, 24, 62, 148, 246, 139, 62, 148, 125, 16, 62, 242, 46, 196, 61, 1, 12, 230, 61, 251, 224, 149, 61, 229, 241, 88, 62, 215, 241, 166, 189, 193, 200, 122, 61, 139, 37, 160, 190, 181, 28, 60, 61, 134, 240, 29, 190, 43, 83, 128, 189, 43, 226, 218, 190, 219, 202, 72, 62, 31, 125, 196, 190, 82, 9, 244, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 252, 184, 91, 62, 36, 77, 201, 190, 181, 255, 234, 61, 11, 131, 89, 62, 21, 200, 116, 61, 114, 167, 51, 61, 223, 63, 54, 189, 153, 65, 158, 190, 81, 236, 177, 62, 71, 168, 178, 190, 65, 46, 124, 62, 125, 216, 67, 62, 118, 236, 6, 190, 162, 202, 2, 190, 77, 168, 73, 61, 215, 249, 137, 62, 132, 186, 24, 62, 253, 255, 82, 190, 16, 223, 146, 62, 159, 251, 235, 61, 1, 170, 231, 189, 41, 108, 83, 190, 26, 59, 141, 189, 57, 174, 148, 62, 73, 52, 196, 62, 177, 185, 27, 190, 218, 80, 185, 62, 171, 188, 101, 62, 209, 114, 4, 62, 224, 62, 181, 61, 159, 25, 219, 62, 20, 139, 156, 61, 218, 221, 168, 61, 103, 100, 133, 62, 16, 31, 58, 191, 241, 244, 199, 62, 39, 123, 44, 189, 0, 37, 155, 62, 248, 136, 96, 190, 163, 47, 158, 62, 67, 116, 20, 191, 231, 120, 116, 62, 106, 134, 209, 189, 22, 19, 114, 190, 131, 122, 166, 62, 171, 150, 180, 190, 242, 99, 79, 190, 191, 232, 232, 190, 231, 153, 2, 191, 52, 9, 26, 61, 180, 161, 9, 61, 5, 58, 62, 190, 70, 27, 36, 62, 111, 221, 167, 62, 22, 117, 150, 61, 36, 173, 11, 191, 124, 142, 103, 190, 75, 136, 170, 190, 57, 116, 172, 190, 108, 115, 129, 191, 101, 53, 155, 62, 3, 233, 216, 61, 223, 243, 57, 191, 201, 38, 92, 62, 236, 176, 0, 61, 87, 224, 36, 59, 74, 192, 35, 190, 98, 103, 217, 189, 49, 6, 106, 189, 185, 119, 167, 188, 28, 223, 37, 189, 254, 88, 150, 61, 66, 246, 127, 189, 143, 213, 0, 62, 246, 78, 119, 60, 206, 90, 211, 189, 87, 165, 158, 60, 22, 163, 14, 190, 237, 21, 156, 61, 89, 28, 232, 60, 117, 254, 234, 188, 78, 225, 130, 189, 212, 130, 19, 188, 167, 217, 213, 61, 6, 152, 254, 61, 38, 121, 158, 186, 139, 249, 7, 190, 160, 126, 222, 189, 98, 218, 178, 189, 94, 245, 70, 190, 182, 150, 135, 61, 111, 27, 147, 61, 166, 36, 35, 190, 239, 52, 246, 61, 63, 124, 21, 190, 220, 117, 15, 62, 68, 126, 209, 190, 115, 83, 18, 190, 190, 114, 60, 191, 91, 200, 235, 61, 23, 98, 40, 62, 132, 63, 131, 62, 141, 213, 70, 191, 202, 140, 174, 62, 113, 153, 39, 189, 36, 206, 68, 190, 213, 83, 48, 61, 24, 15, 11, 190, 44, 7, 93, 61, 49, 245, 206, 189, 96, 50, 19, 62, 157, 103, 127, 61, 86, 214, 165, 62, 150, 155, 22, 190, 210, 109, 184, 61, 251, 234, 248, 190, 18, 254, 148, 61, 10, 198, 204, 189, 141, 245, 165, 61, 98, 0, 217, 189, 240, 156, 38, 62, 64, 168, 150, 191, 1, 120, 2, 189, 0, 112, 223, 190, 101, 222, 216, 61, 49, 90, 132, 62, 1, 223, 245, 187, 41, 180, 171, 62, 197, 84, 170, 61, 19, 128, 92, 190, 142, 145, 220, 60, 26, 193, 252, 189, 142, 244, 52, 62, 140, 87, 17, 191, 4, 24, 10, 190, 151, 224, 206, 62, 240, 44, 223, 188, 149, 5, 152, 61, 203, 212, 240, 190, 136, 57, 156, 61, 65, 245, 161, 189, 230, 185, 167, 60, 183, 44, 121, 62, 170, 170, 212, 62, 58, 189, 172, 62, 151, 22, 210, 61, 188, 138, 56, 61, 241, 183, 125, 62, 133, 78, 6, 191, 226, 199, 135, 190, 240, 37, 181, 62, 223, 14, 147, 62, 37, 109, 133, 190, 81, 130, 250, 188, 92, 110, 5, 190, 185, 170, 76, 62, 241, 161, 101, 61, 40, 161, 197, 189, 249, 119, 81, 62, 90, 16, 189, 60, 158, 186, 148, 62, 53, 224, 23, 61, 144, 255, 104, 62, 89, 135, 253, 190, 181, 250, 201, 190, 17, 246, 108, 61, 247, 13, 175, 189, 72, 203, 160, 190, 240, 19, 5, 190, 93, 211, 213, 190, 169, 129, 37, 61, 63, 162, 138, 62, 245, 177, 148, 60, 73, 215, 144, 62, 87, 236, 219, 188, 106, 114, 140, 190, 173, 198, 198, 62, 150, 24, 34, 190, 36, 185, 166, 62, 86, 193, 11, 62, 205, 202, 180, 60, 36, 3, 207, 61, 60, 151, 7, 190, 250, 111, 180, 62, 239, 153, 254, 62, 103, 171, 32, 62, 99, 237, 146, 189, 29, 225, 158, 61, 201, 38, 11, 61, 210, 243, 67, 62, 16, 91, 97, 60, 24, 185, 79, 62, 192, 65, 129, 189, 133, 140, 212, 189, 0, 96, 222, 189, 137, 174, 209, 188, 192, 97, 39, 190, 106, 80, 41, 62, 126, 197, 81, 60, 181, 45, 30, 189, 127, 46, 158, 61, 40, 242, 240, 61, 208, 121, 17, 190, 238, 191, 51, 190, 41, 37, 89, 185, 101, 229, 240, 189, 204, 121, 239, 186, 168, 164, 226, 189, 62, 197, 92, 61, 19, 7, 16, 190, 81, 159, 173, 186, 77, 239, 9, 190, 206, 3, 128, 187, 31, 196, 121, 188, 1, 221, 41, 61, 80, 212, 252, 61, 154, 97, 164, 188, 32, 150, 92, 61, 138, 22, 184, 189, 192, 49, 217, 61, 197, 103, 255, 60, 3, 183, 31, 190, 1, 186, 90, 60, 117, 187, 35, 190, 123, 52, 141, 62, 65, 119, 34, 62, 7, 212, 178, 61, 127, 178, 9, 191, 124, 77, 16, 62, 139, 36, 50, 191, 177, 120, 13, 62, 71, 96, 243, 62, 119, 211, 125, 62, 78, 43, 142, 61, 4, 168, 19, 191, 230, 71, 38, 62, 58, 215, 250, 189, 223, 161, 161, 62, 40, 223, 141, 62, 64, 245, 61, 63, 138, 115, 131, 62, 40, 229, 129, 62, 1, 232, 87, 62, 101, 35, 149, 62, 60, 234, 25, 191, 103, 185, 18, 62, 231, 129, 218, 61, 155, 251, 75, 62, 134, 1, 92, 191, 123, 23, 192, 61, 243, 174, 46, 61, 84, 205, 28, 62, 153, 145, 8, 190, 202, 14, 128, 190, 83, 232, 101, 62, 135, 186, 159, 189, 9, 205, 135, 61, 115, 112, 244, 61, 209, 10, 36, 187, 11, 139, 101, 61, 121, 9, 89, 60, 123, 131, 172, 189, 80, 53, 233, 189, 224, 75, 48, 62, 229, 31, 5, 62, 120, 160, 11, 62, 245, 195, 21, 190, 239, 209, 18, 62, 146, 52, 84, 189, 175, 244, 174, 189, 164, 108, 94, 189, 106, 1, 71, 189, 42, 26, 175, 188, 166, 28, 175, 61, 22, 190, 62, 190, 77, 201, 34, 189, 39, 199, 19, 190, 67, 122, 220, 189, 172, 46, 127, 190, 168, 119, 189, 61, 55, 232, 120, 61, 19, 149, 211, 189, 29, 172, 174, 61, 227, 86, 149, 189, 45, 66, 113, 190, 23, 183, 214, 61, 58, 236, 197, 189, 3, 255, 128, 190, 228, 252, 63, 62, 66, 12, 123, 61, 235, 50, 3, 189, 78, 105, 66, 62, 109, 116, 7, 62, 96, 47, 173, 190, 250, 9, 185, 62, 251, 86, 78, 191, 138, 227, 93, 61, 27, 173, 42, 191, 127, 160, 8, 190, 168, 124, 171, 185, 250, 35, 84, 190, 255, 152, 55, 61, 189, 139, 240, 60, 84, 128, 188, 61, 52, 158, 9, 62, 25, 255, 210, 189, 104, 158, 101, 62, 138, 111, 202, 62, 118, 71, 165, 190, 220, 116, 241, 61, 45, 249, 26, 62, 199, 42, 30, 190, 234, 176, 167, 62, 231, 6, 133, 62, 194, 96, 90, 61, 255, 75, 90, 189, 178, 142, 78, 62, 157, 50, 217, 190, 211, 71, 175, 61, 135, 112, 112, 62, 55, 14, 51, 62, 100, 4, 59, 190, 168, 188, 11, 62, 100, 218, 210, 61, 208, 27, 9, 60, 172, 215, 135, 190, 113, 33, 74, 62, 69, 202, 144, 62, 40, 94, 184, 190, 233, 114, 71, 62, 240, 33, 155, 188, 30, 28, 151, 62, 167, 208, 99, 189, 99, 3, 193, 189, 241, 69, 146, 62, 238, 248, 188, 190, 30, 198, 147, 62, 86, 200, 84, 187, 6, 45, 164, 189, 207, 53, 124, 189, 80, 53, 51, 190, 12, 110, 201, 189, 4, 88, 139, 61, 40, 15, 65, 62, 74, 40, 137, 60, 177, 8, 181, 189, 201, 33, 84, 190, 97, 177, 249, 187, 240, 87, 119, 61, 61, 208, 12, 61, 238, 199, 28, 190, 240, 220, 40, 61, 103, 50, 146, 62, 192, 26, 204, 190, 143, 161, 96, 62, 8, 22, 229, 189, 104, 188, 13, 62, 155, 69, 49, 191, 169, 117, 201, 59, 152, 207, 143, 62, 81, 191, 157, 189, 89, 251, 63, 62, 76, 121, 201, 190, 161, 57, 174, 61, 197, 68, 249, 189, 230, 161, 98, 61, 186, 76, 82, 62, 201, 50, 181, 190, 57, 203, 99, 62, 107, 15, 35, 62, 89, 161, 17, 189, 204, 159, 22, 62, 135, 65, 180, 190, 129, 105, 163, 190, 250, 45, 85, 60, 193, 226, 136, 62, 193, 10, 45, 62, 154, 227, 137, 61, 91, 69, 1, 190, 44, 154, 8, 62, 187, 255, 141, 188, 57, 88, 188, 190, 62, 150, 27, 62, 124, 57, 171, 61, 156, 69, 160, 190, 138, 122, 219, 60, 221, 121, 10, 190, 143, 51, 196, 61, 225, 105, 78, 188, 226, 53, 146, 62, 47, 142, 31, 62, 70, 199, 91, 62, 233, 213, 16, 62, 136, 27, 164, 61, 239, 104, 90, 62, 9, 197, 149, 186, 144, 50, 120, 62, 252, 232, 14, 190, 3, 36, 44, 62, 121, 67, 221, 188, 103, 37, 91, 191, 58, 192, 111, 62, 215, 174, 188, 62, 143, 190, 37, 189, 241, 24, 227, 61, 38, 117, 131, 62, 185, 17, 37, 188, 129, 222, 228, 190, 73, 124, 49, 190, 187, 127, 248, 186, 37, 57, 237, 61, 61, 63, 20, 190, 197, 187, 229, 189, 141, 184, 207, 62, 224, 223, 9, 189, 88, 162, 43, 189, 64, 108, 46, 190, 119, 192, 158, 62, 248, 51, 53, 190, 236, 172, 181, 62, 110, 246, 152, 189, 51, 30, 175, 62, 123, 37, 156, 62, 179, 179, 178, 62, 210, 193, 19, 191, 86, 222, 219, 61, 111, 221, 40, 189, 67, 247, 71, 62, 164, 156, 57, 62, 162, 216, 75, 190, 184, 132, 105, 61, 214, 2, 142, 190, 199, 169, 173, 190, 189, 214, 174, 61, 107, 43, 110, 189, 114, 0, 7, 190, 60, 224, 190, 62, 39, 157, 126, 62, 7, 142, 21, 189, 130, 41, 242, 190, 18, 94, 154, 190, 79, 92, 152, 61, 240, 248, 174, 190, 237, 139, 31, 190, 1, 19, 24, 61, 251, 32, 215, 62, 114, 161, 19, 191, 19, 78, 217, 60, 247, 245, 110, 62, 133, 162, 160, 61, 157, 203, 10, 62, 31, 179, 61, 191, 101, 21, 11, 62, 177, 68, 32, 191, 115, 56, 81, 61, 90, 103, 153, 62, 114, 191, 3, 63, 169, 133, 11, 61, 23, 29, 7, 190, 191, 231, 227, 60, 199, 222, 25, 187, 178, 3, 22, 190, 255, 69, 73, 190, 224, 199, 229, 62, 166, 241, 31, 62, 245, 19, 46, 190, 37, 151, 66, 189, 233, 212, 49, 62, 201, 223, 211, 190, 210, 110, 225, 189, 3, 189, 7, 62, 138, 26, 125, 61, 244, 137, 12, 191, 169, 121, 147, 189, 44, 132, 176, 62, 97, 74, 120, 62, 3, 77, 129, 188, 99, 115, 167, 189, 138, 165, 215, 62, 161, 147, 188, 189, 94, 79, 4, 189, 191, 129, 250, 61, 207, 43, 40, 191, 85, 93, 137, 62, 122, 51, 93, 62, 248, 248, 97, 62, 51, 124, 208, 189, 239, 224, 138, 62, 186, 70, 239, 190, 10, 176, 111, 62, 169, 129, 142, 190, 228, 154, 233, 190, 16, 165, 199, 62, 79, 237, 174, 190, 156, 96, 191, 190, 248, 166, 7, 190, 51, 246, 128, 191, 142, 183, 98, 62, 143, 55, 109, 189, 82, 38, 28, 190, 194, 193, 95, 190, 36, 117, 56, 61, 98, 177, 108, 62, 168, 29, 45, 191, 169, 245, 115, 190, 119, 143, 213, 190, 182, 41, 112, 190, 101, 209, 170, 191, 95, 3, 137, 62, 16, 253, 163, 60, 225, 140, 41, 191, 100, 202, 191, 62, 74, 241, 194, 189, 52, 121, 92, 61, 15, 204, 21, 191, 104, 146, 130, 189, 58, 0, 208, 189, 230, 60, 53, 191, 32, 47, 131, 61, 239, 0, 93, 190, 60, 119, 171, 189, 71, 15, 153, 62, 195, 206, 181, 187, 188, 173, 211, 190, 224, 155, 132, 62, 10, 127, 145, 61, 226, 171, 48, 191, 18, 253, 147, 61, 28, 0, 12, 191, 116, 168, 83, 190, 100, 227, 50, 190, 206, 205, 3, 62, 244, 169, 18, 62, 155, 153, 55, 62, 201, 136, 114, 62, 161, 50, 145, 190, 48, 111, 118, 62, 33, 247, 211, 190, 198, 121, 150, 190, 60, 105, 50, 190, 183, 17, 155, 190, 17, 39, 236, 190, 152, 25, 85, 190, 26, 130, 154, 62, 233, 77, 32, 191, 134, 44, 14, 61, 62, 4, 162, 190, 97, 201, 107, 62, 112, 26, 118, 62, 76, 69, 12, 62, 53, 52, 113, 190, 175, 221, 163, 62, 69, 0, 7, 190, 214, 57, 118, 189, 210, 129, 91, 191, 161, 248, 154, 61, 157, 198, 1, 61, 28, 154, 180, 189, 52, 52, 228, 189, 102, 77, 129, 190, 75, 204, 166, 191, 182, 170, 56, 61, 156, 217, 192, 62, 203, 240, 44, 189, 81, 8, 15, 62, 199, 2, 176, 61, 244, 222, 169, 189, 157, 46, 79, 191, 214, 229, 176, 189, 191, 72, 220, 189, 99, 37, 109, 62, 168, 63, 54, 191, 118, 249, 67, 62, 210, 79, 166, 189, 201, 238, 30, 61, 34, 178, 80, 62, 222, 228, 3, 191, 20, 172, 203, 61, 102, 191, 7, 191, 89, 151, 127, 62, 72, 194, 134, 62, 62, 10, 24, 190, 191, 32, 220, 61, 251, 44, 76, 62, 75, 74, 136, 190, 182, 23, 80, 61, 148, 59, 147, 189, 66, 63, 16, 191, 26, 159, 86, 62, 230, 19, 214, 190, 186, 139, 86, 191, 17, 190, 9, 191, 6, 104, 111, 191, 98, 106, 132, 62, 244, 211, 25, 62, 183, 192, 34, 61, 213, 185, 47, 190, 156, 227, 51, 62, 233, 18, 42, 62, 113, 77, 159, 191, 149, 204, 36, 190, 158, 213, 9, 191, 57, 167, 201, 188, 62, 89, 235, 191, 73, 145, 193, 62, 239, 83, 3, 191, 162, 221, 8, 191, 173, 250, 134, 62, 150, 194, 101, 62, 255, 170, 186, 190, 69, 236, 7, 62, 155, 2, 13, 191, 64, 189, 58, 60, 95, 202, 183, 190, 58, 35, 248, 61, 3, 148, 233, 62, 176, 44, 58, 62, 168, 62, 196, 189, 179, 168, 196, 190, 252, 179, 123, 62, 142, 51, 15, 190, 86, 6, 223, 61, 12, 245, 140, 62, 140, 50, 63, 62, 98, 5, 189, 62, 241, 198, 225, 189, 76, 232, 5, 190, 68, 183, 55, 62, 161, 95, 71, 190, 253, 128, 242, 189, 149, 0, 21, 62, 199, 7, 178, 62, 178, 249, 244, 191, 117, 195, 45, 190, 30, 108, 198, 62, 203, 234, 39, 61, 165, 208, 200, 190, 116, 26, 60, 189, 231, 153, 101, 60, 248, 8, 3, 61, 42, 202, 150, 190, 101, 104, 5, 61, 7, 251, 129, 190, 113, 199, 143, 61, 234, 3, 86, 189, 187, 196, 67, 190, 82, 23, 29, 191, 197, 6, 165, 62, 77, 251, 24, 190, 20, 162, 150, 61, 197, 75, 82, 62, 13, 209, 168, 190, 254, 242, 40, 62, 175, 118, 13, 61, 244, 168, 153, 61, 109, 142, 129, 62, 47, 162, 134, 62, 2, 205, 237, 61, 15, 149, 149, 61, 49, 206, 29, 191, 80, 206, 27, 190, 120, 89, 12, 62, 5, 147, 163, 62, 38, 66, 172, 188, 151, 61, 91, 189, 65, 161, 216, 191, 197, 165, 14, 190, 120, 17, 131, 190, 50, 250, 107, 62, 96, 84, 139, 62, 222, 72, 131, 189, 67, 25, 103, 62, 65, 173, 49, 62, 92, 56, 44, 188, 250, 19, 147, 62, 208, 225, 33, 191, 202, 12, 239, 189, 58, 168, 41, 191, 69, 222, 53, 62, 130, 99, 7, 63, 95, 248, 163, 61, 37, 169, 94, 189, 181, 20, 42, 191, 23, 216, 121, 62, 140, 209, 173, 190, 253, 189, 11, 62, 180, 196, 187, 61, 63, 5, 155, 62, 111, 4, 127, 62, 23, 160, 134, 188, 32, 152, 132, 61, 169, 9, 255, 61, 83, 138, 226, 190, 24, 200, 15, 190, 53, 152, 138, 61, 69, 195, 142, 62, 144, 72, 243, 191, 64, 104, 169, 189, 28, 199, 244, 61, 74, 62, 26, 62, 133, 236, 7, 61, 143, 236, 167, 190, 205, 21, 207, 62, 186, 233, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 103, 188, 190, 209, 174, 16, 190, 198, 209, 110, 189, 7, 205, 38, 62, 11, 57, 144, 61, 216, 1, 24, 62, 92, 101, 133, 62, 88, 0, 45, 62, 135, 240, 32, 62, 194, 170, 239, 189, 203, 81, 213, 189, 136, 52, 53, 62, 122, 33, 77, 190, 211, 177, 82, 62, 240, 162, 130, 62, 44, 123, 154, 189, 27, 35, 97, 60, 194, 68, 59, 62, 13, 116, 246, 189, 62, 154, 212, 61, 106, 101, 206, 189, 96, 149, 146, 61, 165, 105, 188, 188, 187, 121, 11, 62, 169, 193, 107, 61, 99, 241, 8, 62, 85, 47, 145, 61, 201, 200, 146, 62, 68, 246, 107, 61, 14, 82, 3, 62, 187, 152, 236, 61, 219, 35, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 227, 53, 63, 137, 176, 110, 190, 169, 94, 219, 62, 230, 145, 39, 191, 20, 123, 43, 188, 200, 212, 7, 191, 4, 166, 219, 62, 95, 212, 236, 62, 236, 219, 138, 190, 36, 61, 140, 189, 92, 120, 129, 190, 180, 57, 45, 191, 119, 189, 205, 60, 131, 122, 133, 62, 202, 164, 134, 62, 224, 51, 149, 190, 21, 217, 77, 61, 93, 103, 42, 63, 245, 62, 147, 60, 52, 190, 6, 191, 173, 37, 206, 60, 58, 47, 236, 62, 10, 50, 117, 190, 117, 76, 228, 190, 122, 120, 221, 62, 7, 16, 63, 191, 152, 95, 208, 62, 145, 69, 179, 190, 197, 63, 122, 191, 74, 105, 195, 62, 70, 232, 239, 62, 96, 94, 73, 63, 233, 121, 46, 63, 21, 124, 17, 62, 46, 207, 108, 61, 233, 33, 126, 62, 102, 203, 44, 190, 127, 122, 198, 190, 51, 34, 130, 62, 28, 254, 196, 61, 236, 65, 197, 189, 163, 177, 127, 189, 166, 196, 243, 61, 64, 120, 193, 186, 82, 233, 180, 188, 52, 108, 179, 190, 195, 233, 9, 189, 140, 51, 46, 190, 113, 162, 238, 61, 253, 78, 217, 58, 2, 118, 12, 62, 162, 10, 79, 190, 240, 182, 66, 190, 250, 11, 171, 61, 201, 32, 82, 190, 214, 131, 142, 190, 199, 242, 93, 62, 5, 247, 128, 61, 6, 79, 169, 60, 222, 128, 151, 190, 58, 99, 198, 62, 93, 236, 98, 190, 255, 120, 38, 190, 210, 170, 111, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 7, 252, 189, 71, 92, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 104, 69, 62, 164, 168, 68, 190, 158, 111, 34, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 57, 226, 63, 139, 76, 24, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}