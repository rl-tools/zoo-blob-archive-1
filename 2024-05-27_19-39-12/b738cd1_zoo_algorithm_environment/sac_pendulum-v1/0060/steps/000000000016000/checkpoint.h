// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 136, 206, 190, 147, 226, 128, 62, 67, 155, 110, 63, 228, 165, 128, 190, 200, 42, 6, 63, 247, 252, 244, 189, 235, 244, 142, 190, 67, 18, 143, 63, 54, 90, 33, 63, 200, 77, 127, 190, 119, 170, 185, 191, 5, 24, 114, 190, 134, 80, 153, 59, 248, 199, 134, 191, 194, 164, 57, 190, 96, 17, 41, 63, 25, 63, 169, 63, 216, 49, 197, 62, 0, 34, 124, 191, 187, 167, 247, 61, 104, 1, 75, 189, 53, 251, 40, 63, 121, 151, 200, 62, 210, 130, 30, 62, 2, 169, 120, 63, 18, 197, 22, 191, 100, 42, 201, 190, 46, 198, 227, 190, 249, 228, 22, 191, 96, 168, 169, 190, 92, 156, 114, 62, 223, 88, 36, 191, 0, 242, 88, 63, 0, 41, 209, 61, 19, 102, 71, 63, 14, 20, 62, 63, 67, 209, 158, 189, 220, 55, 187, 62, 173, 85, 4, 191, 52, 221, 138, 189, 251, 22, 62, 63, 216, 95, 237, 190, 250, 41, 91, 62, 227, 200, 2, 63, 162, 184, 110, 62, 87, 161, 253, 62, 207, 120, 10, 190, 19, 40, 63, 190, 43, 248, 187, 190, 78, 242, 116, 191, 11, 17, 211, 62, 254, 253, 106, 61, 237, 182, 106, 190, 219, 104, 152, 189, 54, 149, 103, 62, 232, 128, 214, 190, 38, 51, 144, 189, 106, 142, 117, 191, 191, 143, 95, 63, 52, 104, 71, 62, 72, 182, 67, 63, 1, 38, 157, 63, 12, 212, 205, 62, 104, 28, 197, 189, 38, 127, 87, 63, 219, 242, 230, 190, 158, 178, 163, 190, 203, 120, 51, 191, 111, 133, 25, 62, 18, 116, 199, 61, 142, 43, 79, 191, 22, 125, 27, 63, 123, 0, 40, 190, 246, 176, 154, 191, 5, 147, 139, 190, 112, 212, 102, 189, 230, 76, 191, 63, 186, 161, 143, 62, 78, 102, 74, 63, 152, 129, 17, 191, 17, 234, 189, 190, 180, 16, 145, 189, 171, 23, 130, 63, 45, 25, 128, 62, 64, 119, 21, 190, 245, 225, 173, 191, 139, 113, 134, 60, 30, 99, 237, 62, 9, 16, 78, 63, 38, 213, 26, 63, 25, 22, 181, 62, 84, 211, 180, 191, 205, 151, 168, 190, 192, 149, 169, 189, 101, 249, 66, 191, 17, 72, 242, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 90, 19, 191, 184, 124, 111, 190, 41, 187, 125, 190, 142, 1, 147, 190, 71, 211, 146, 62, 164, 182, 14, 190, 128, 22, 3, 63, 146, 54, 210, 62, 207, 36, 147, 191, 47, 118, 224, 189, 107, 180, 144, 190, 138, 237, 132, 62, 192, 96, 72, 62, 91, 177, 251, 61, 136, 191, 185, 62, 32, 25, 31, 191, 225, 55, 136, 190, 70, 208, 50, 62, 252, 41, 104, 62, 89, 251, 64, 62, 229, 107, 210, 190, 132, 210, 241, 62, 222, 163, 196, 62, 102, 133, 7, 190, 199, 187, 108, 190, 65, 44, 118, 62, 248, 122, 36, 191, 96, 64, 200, 61, 144, 51, 61, 62, 237, 113, 5, 62, 37, 68, 206, 60, 234, 47, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 140, 93, 190, 133, 99, 138, 62, 96, 50, 113, 61, 40, 17, 209, 189, 56, 13, 83, 191, 163, 215, 245, 62, 66, 22, 1, 62, 101, 45, 139, 62, 31, 13, 234, 189, 3, 226, 5, 60, 49, 146, 22, 62, 175, 176, 128, 62, 47, 72, 186, 61, 107, 248, 136, 62, 140, 11, 6, 189, 220, 35, 73, 190, 189, 148, 53, 190, 45, 213, 0, 191, 228, 57, 61, 191, 233, 238, 180, 188, 36, 245, 231, 62, 115, 130, 82, 189, 119, 42, 160, 189, 173, 173, 38, 190, 142, 210, 157, 189, 141, 69, 65, 62, 251, 27, 35, 191, 32, 23, 32, 62, 92, 10, 66, 190, 28, 111, 180, 62, 201, 45, 175, 190, 211, 34, 181, 190, 90, 180, 20, 62, 131, 207, 149, 61, 36, 60, 202, 58, 88, 104, 114, 190, 229, 104, 180, 190, 25, 212, 198, 62, 244, 184, 98, 61, 151, 179, 90, 61, 207, 6, 88, 191, 12, 85, 47, 191, 37, 21, 76, 62, 26, 51, 8, 62, 214, 146, 18, 61, 176, 150, 154, 62, 151, 37, 51, 62, 244, 50, 95, 191, 190, 231, 144, 62, 194, 3, 162, 61, 5, 38, 173, 61, 188, 28, 89, 190, 190, 167, 183, 61, 149, 62, 73, 62, 61, 40, 253, 60, 169, 229, 63, 61, 46, 228, 199, 62, 67, 15, 6, 60, 150, 76, 141, 190, 188, 142, 219, 188, 104, 55, 39, 61, 71, 108, 26, 62, 129, 202, 147, 190, 143, 136, 10, 62, 175, 170, 148, 190, 168, 117, 192, 189, 140, 133, 137, 190, 150, 170, 219, 60, 173, 205, 39, 60, 175, 104, 186, 190, 173, 222, 236, 190, 162, 52, 136, 62, 198, 223, 195, 189, 118, 155, 52, 62, 159, 241, 59, 61, 61, 163, 40, 190, 254, 33, 26, 61, 84, 58, 112, 188, 121, 73, 20, 62, 142, 54, 35, 62, 95, 109, 98, 62, 230, 60, 62, 62, 227, 3, 79, 62, 0, 94, 155, 191, 196, 209, 222, 190, 11, 66, 65, 62, 150, 7, 170, 186, 155, 158, 147, 60, 87, 244, 7, 190, 12, 114, 227, 191, 26, 62, 254, 189, 155, 174, 242, 190, 223, 108, 156, 62, 110, 86, 209, 61, 172, 46, 139, 62, 136, 25, 153, 62, 107, 47, 100, 190, 108, 16, 30, 62, 202, 147, 55, 62, 226, 28, 71, 62, 51, 71, 245, 190, 133, 142, 230, 190, 255, 58, 194, 62, 19, 172, 222, 190, 190, 37, 129, 191, 31, 86, 66, 190, 29, 29, 159, 190, 14, 108, 50, 190, 154, 56, 188, 61, 25, 253, 20, 62, 143, 185, 42, 62, 189, 18, 71, 191, 31, 86, 191, 189, 18, 195, 63, 61, 63, 9, 254, 60, 72, 42, 184, 62, 3, 151, 142, 191, 218, 237, 216, 61, 218, 107, 183, 185, 174, 32, 176, 190, 232, 69, 6, 189, 99, 183, 126, 62, 169, 156, 169, 190, 244, 214, 173, 61, 205, 9, 213, 190, 70, 150, 46, 191, 225, 76, 186, 190, 230, 35, 7, 190, 232, 71, 8, 189, 142, 21, 143, 61, 84, 205, 84, 62, 173, 4, 59, 62, 9, 188, 55, 60, 37, 7, 98, 189, 178, 7, 18, 190, 111, 40, 32, 62, 2, 142, 223, 188, 123, 231, 19, 190, 233, 22, 170, 60, 118, 178, 59, 62, 200, 83, 36, 61, 49, 65, 23, 190, 149, 167, 67, 188, 26, 31, 228, 189, 149, 160, 66, 189, 93, 40, 39, 62, 155, 73, 191, 188, 83, 193, 85, 62, 153, 165, 196, 61, 44, 168, 54, 62, 235, 57, 129, 62, 11, 133, 150, 188, 63, 191, 85, 190, 140, 104, 222, 189, 191, 178, 148, 61, 50, 209, 158, 61, 178, 101, 52, 62, 69, 157, 87, 60, 155, 156, 153, 188, 41, 29, 5, 61, 241, 182, 169, 190, 220, 207, 208, 61, 207, 16, 78, 191, 147, 21, 164, 62, 47, 172, 139, 189, 227, 76, 148, 62, 40, 33, 192, 188, 53, 68, 204, 62, 168, 220, 52, 191, 186, 236, 237, 61, 133, 90, 84, 62, 215, 200, 185, 189, 48, 222, 120, 62, 79, 192, 47, 190, 117, 11, 156, 57, 155, 153, 42, 191, 68, 2, 250, 190, 155, 88, 195, 189, 246, 179, 180, 61, 93, 165, 157, 189, 173, 61, 165, 188, 133, 41, 152, 62, 242, 25, 104, 189, 129, 205, 35, 62, 95, 243, 139, 190, 122, 239, 69, 189, 203, 180, 95, 190, 4, 43, 175, 190, 120, 247, 107, 190, 152, 3, 240, 60, 187, 54, 60, 191, 113, 108, 207, 188, 223, 81, 116, 62, 130, 232, 238, 190, 215, 213, 221, 61, 139, 58, 153, 190, 231, 77, 16, 188, 145, 3, 23, 191, 36, 8, 116, 189, 59, 92, 127, 62, 212, 129, 199, 188, 168, 171, 219, 190, 115, 124, 210, 190, 126, 151, 8, 62, 119, 228, 243, 190, 20, 111, 6, 190, 64, 16, 95, 188, 6, 184, 225, 61, 149, 17, 154, 62, 193, 242, 103, 62, 135, 32, 90, 61, 90, 140, 164, 61, 213, 207, 63, 191, 73, 235, 155, 190, 30, 135, 240, 188, 19, 73, 195, 62, 227, 185, 135, 190, 62, 191, 40, 62, 60, 195, 178, 61, 39, 160, 32, 61, 8, 22, 234, 189, 107, 199, 29, 190, 113, 91, 153, 62, 164, 106, 139, 187, 108, 10, 37, 62, 227, 132, 11, 190, 59, 170, 135, 62, 235, 204, 44, 191, 198, 213, 87, 189, 61, 184, 29, 190, 130, 185, 88, 61, 154, 44, 37, 62, 120, 81, 54, 190, 182, 51, 122, 62, 175, 137, 233, 190, 91, 18, 96, 62, 180, 94, 95, 61, 239, 216, 149, 189, 207, 114, 94, 62, 146, 40, 188, 189, 160, 248, 204, 61, 206, 114, 50, 61, 61, 164, 194, 59, 247, 64, 196, 62, 51, 155, 171, 190, 137, 227, 7, 190, 182, 53, 163, 189, 13, 77, 195, 62, 237, 79, 159, 191, 7, 1, 238, 61, 151, 212, 196, 189, 55, 142, 153, 62, 212, 82, 178, 61, 142, 120, 120, 190, 25, 138, 153, 62, 42, 175, 192, 61, 137, 201, 143, 188, 241, 10, 5, 62, 194, 184, 45, 60, 76, 206, 239, 191, 191, 69, 5, 191, 105, 180, 142, 62, 64, 33, 149, 189, 147, 25, 103, 62, 136, 24, 193, 190, 11, 103, 135, 190, 130, 229, 248, 189, 178, 111, 62, 62, 203, 75, 44, 190, 148, 234, 133, 62, 246, 228, 135, 62, 20, 80, 254, 61, 49, 115, 147, 62, 61, 156, 36, 62, 158, 240, 193, 61, 15, 90, 77, 61, 193, 254, 167, 61, 227, 243, 111, 62, 19, 143, 144, 189, 3, 17, 198, 61, 244, 214, 208, 190, 75, 92, 242, 188, 151, 137, 3, 190, 47, 128, 220, 189, 42, 122, 252, 190, 162, 51, 64, 62, 223, 66, 219, 190, 7, 187, 239, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 230, 216, 109, 62, 93, 127, 164, 190, 175, 211, 31, 62, 194, 174, 158, 62, 59, 0, 140, 61, 46, 204, 184, 60, 72, 138, 211, 59, 210, 115, 172, 190, 122, 136, 203, 62, 97, 251, 135, 190, 47, 229, 110, 62, 170, 249, 64, 62, 152, 26, 242, 189, 230, 45, 253, 189, 194, 11, 109, 60, 58, 184, 152, 62, 254, 23, 31, 62, 10, 182, 89, 190, 43, 132, 127, 62, 132, 33, 212, 61, 64, 249, 223, 189, 12, 78, 107, 190, 63, 63, 131, 189, 42, 121, 146, 62, 64, 92, 247, 62, 235, 105, 49, 190, 66, 94, 195, 62, 202, 200, 101, 62, 116, 44, 21, 62, 58, 15, 144, 61, 147, 152, 230, 62, 87, 238, 134, 61, 50, 66, 147, 61, 32, 146, 97, 62, 25, 153, 40, 191, 45, 217, 224, 62, 137, 156, 86, 189, 4, 74, 186, 62, 96, 230, 132, 190, 163, 45, 179, 62, 132, 114, 95, 191, 207, 96, 99, 62, 231, 139, 226, 189, 29, 237, 54, 190, 11, 164, 159, 62, 135, 178, 173, 190, 236, 122, 32, 190, 122, 179, 44, 191, 218, 60, 4, 191, 219, 122, 67, 61, 199, 132, 22, 61, 117, 212, 202, 190, 194, 178, 112, 62, 231, 98, 167, 62, 240, 142, 172, 182, 94, 255, 244, 190, 82, 47, 106, 190, 85, 72, 215, 188, 92, 153, 189, 190, 137, 87, 75, 191, 30, 136, 62, 62, 158, 214, 7, 62, 91, 246, 63, 191, 231, 83, 186, 60, 236, 176, 0, 61, 87, 224, 36, 59, 74, 192, 35, 190, 98, 103, 217, 189, 49, 6, 106, 189, 185, 119, 167, 188, 28, 223, 37, 189, 254, 88, 150, 61, 66, 246, 127, 189, 143, 213, 0, 62, 246, 78, 119, 60, 206, 90, 211, 189, 87, 165, 158, 60, 22, 163, 14, 190, 237, 21, 156, 61, 89, 28, 232, 60, 117, 254, 234, 188, 78, 225, 130, 189, 212, 130, 19, 188, 167, 217, 213, 61, 6, 152, 254, 61, 38, 121, 158, 186, 139, 249, 7, 190, 160, 126, 222, 189, 98, 218, 178, 189, 94, 245, 70, 190, 182, 150, 135, 61, 111, 27, 147, 61, 166, 36, 35, 190, 239, 52, 246, 61, 63, 124, 21, 190, 220, 117, 15, 62, 9, 68, 194, 190, 201, 220, 86, 190, 83, 204, 78, 191, 209, 8, 76, 61, 119, 1, 53, 62, 229, 45, 28, 62, 94, 25, 133, 191, 129, 214, 152, 62, 219, 148, 107, 61, 208, 198, 117, 190, 73, 127, 216, 61, 97, 48, 45, 190, 152, 47, 232, 61, 0, 149, 111, 189, 188, 207, 188, 61, 153, 152, 55, 62, 144, 120, 184, 62, 224, 27, 34, 190, 166, 77, 193, 61, 254, 8, 35, 191, 63, 102, 129, 189, 103, 59, 153, 189, 124, 123, 187, 61, 148, 141, 91, 189, 79, 39, 210, 61, 253, 102, 223, 191, 101, 91, 227, 60, 204, 194, 82, 191, 223, 195, 24, 62, 72, 94, 97, 62, 254, 127, 179, 60, 249, 16, 183, 62, 184, 72, 124, 61, 15, 226, 206, 190, 207, 13, 6, 60, 213, 180, 217, 189, 46, 119, 77, 62, 210, 93, 27, 191, 53, 145, 73, 190, 79, 230, 189, 62, 167, 27, 171, 61, 241, 170, 211, 61, 133, 83, 248, 190, 97, 249, 109, 61, 230, 183, 79, 189, 192, 211, 42, 60, 223, 177, 90, 62, 227, 29, 14, 63, 215, 99, 159, 62, 138, 123, 185, 61, 16, 89, 59, 61, 203, 30, 136, 62, 22, 223, 24, 191, 188, 12, 134, 190, 246, 132, 172, 62, 7, 74, 135, 62, 103, 112, 124, 190, 223, 236, 104, 189, 146, 151, 151, 189, 42, 66, 25, 62, 245, 242, 202, 61, 118, 85, 230, 189, 133, 40, 114, 62, 4, 250, 55, 60, 158, 116, 150, 62, 251, 196, 163, 60, 147, 43, 82, 62, 183, 58, 34, 191, 220, 69, 1, 191, 132, 210, 254, 187, 49, 223, 16, 190, 154, 1, 177, 190, 63, 164, 84, 190, 186, 103, 225, 190, 237, 53, 197, 60, 79, 116, 109, 62, 22, 160, 172, 60, 40, 114, 144, 62, 27, 6, 159, 189, 168, 95, 147, 190, 197, 130, 174, 62, 207, 63, 40, 190, 75, 240, 159, 62, 18, 113, 133, 61, 43, 43, 18, 58, 188, 133, 191, 61, 136, 172, 69, 190, 130, 81, 169, 62, 231, 68, 189, 62, 30, 84, 148, 61, 37, 175, 96, 189, 130, 229, 187, 60, 98, 98, 84, 189, 13, 214, 34, 62, 223, 106, 176, 189, 150, 7, 20, 62, 192, 65, 129, 189, 133, 140, 212, 189, 0, 96, 222, 189, 137, 174, 209, 188, 192, 97, 39, 190, 106, 80, 41, 62, 126, 197, 81, 60, 181, 45, 30, 189, 127, 46, 158, 61, 40, 242, 240, 61, 208, 121, 17, 190, 238, 191, 51, 190, 41, 37, 89, 185, 101, 229, 240, 189, 204, 121, 239, 186, 168, 164, 226, 189, 62, 197, 92, 61, 19, 7, 16, 190, 81, 159, 173, 186, 77, 239, 9, 190, 206, 3, 128, 187, 31, 196, 121, 188, 1, 221, 41, 61, 80, 212, 252, 61, 154, 97, 164, 188, 32, 150, 92, 61, 138, 22, 184, 189, 192, 49, 217, 61, 197, 103, 255, 60, 3, 183, 31, 190, 1, 186, 90, 60, 117, 187, 35, 190, 53, 139, 129, 62, 70, 12, 89, 62, 232, 187, 81, 61, 223, 24, 21, 191, 219, 10, 13, 62, 7, 135, 64, 191, 77, 226, 71, 62, 14, 154, 223, 62, 127, 108, 173, 62, 157, 56, 169, 61, 141, 178, 12, 191, 208, 197, 19, 62, 93, 225, 208, 189, 154, 200, 166, 62, 7, 152, 127, 62, 229, 154, 86, 63, 65, 143, 151, 62, 196, 86, 104, 62, 32, 64, 76, 62, 196, 36, 166, 62, 94, 42, 52, 191, 49, 199, 36, 62, 132, 243, 6, 62, 222, 126, 101, 62, 229, 99, 97, 191, 254, 121, 20, 61, 167, 197, 51, 61, 238, 95, 184, 61, 124, 94, 161, 189, 125, 132, 134, 190, 230, 62, 92, 62, 171, 134, 43, 189, 9, 205, 135, 61, 115, 112, 244, 61, 209, 10, 36, 187, 11, 139, 101, 61, 121, 9, 89, 60, 123, 131, 172, 189, 80, 53, 233, 189, 224, 75, 48, 62, 229, 31, 5, 62, 120, 160, 11, 62, 245, 195, 21, 190, 239, 209, 18, 62, 146, 52, 84, 189, 175, 244, 174, 189, 164, 108, 94, 189, 106, 1, 71, 189, 42, 26, 175, 188, 166, 28, 175, 61, 22, 190, 62, 190, 77, 201, 34, 189, 39, 199, 19, 190, 67, 122, 220, 189, 172, 46, 127, 190, 168, 119, 189, 61, 55, 232, 120, 61, 19, 149, 211, 189, 29, 172, 174, 61, 227, 86, 149, 189, 45, 66, 113, 190, 23, 183, 214, 61, 58, 236, 197, 189, 3, 255, 128, 190, 2, 155, 16, 62, 109, 198, 66, 60, 226, 96, 6, 61, 132, 151, 121, 62, 129, 16, 56, 62, 232, 136, 2, 191, 137, 221, 227, 62, 44, 91, 53, 191, 123, 218, 97, 61, 176, 142, 45, 191, 95, 30, 73, 190, 219, 7, 34, 189, 57, 153, 142, 190, 231, 197, 64, 189, 18, 58, 100, 61, 138, 87, 106, 61, 88, 96, 27, 62, 235, 237, 181, 189, 156, 73, 145, 62, 61, 2, 4, 63, 17, 146, 42, 191, 85, 70, 26, 61, 204, 135, 97, 62, 70, 213, 70, 190, 87, 152, 191, 62, 156, 78, 193, 62, 188, 56, 95, 61, 119, 47, 171, 61, 214, 225, 137, 62, 10, 172, 3, 191, 2, 150, 24, 62, 211, 246, 141, 62, 20, 4, 1, 62, 121, 31, 143, 61, 1, 216, 52, 62, 108, 65, 72, 62, 74, 179, 166, 61, 13, 100, 55, 190, 209, 231, 180, 62, 34, 48, 146, 62, 190, 131, 173, 190, 17, 78, 156, 62, 126, 207, 47, 189, 188, 145, 167, 62, 91, 38, 86, 61, 3, 169, 126, 61, 163, 194, 162, 62, 83, 217, 135, 190, 241, 145, 112, 62, 229, 44, 103, 188, 165, 172, 203, 189, 210, 34, 39, 61, 214, 36, 200, 189, 194, 177, 197, 60, 200, 24, 149, 61, 31, 235, 36, 62, 50, 106, 249, 61, 31, 110, 119, 61, 195, 107, 89, 190, 159, 229, 222, 61, 161, 255, 1, 62, 2, 202, 91, 61, 61, 44, 190, 189, 106, 170, 104, 61, 202, 197, 137, 62, 108, 143, 8, 191, 126, 199, 42, 62, 235, 153, 255, 189, 138, 200, 87, 62, 191, 183, 64, 191, 80, 55, 179, 60, 77, 56, 175, 62, 33, 121, 66, 190, 113, 120, 99, 62, 16, 208, 182, 190, 178, 218, 164, 61, 177, 75, 225, 189, 41, 23, 214, 60, 57, 56, 126, 62, 82, 247, 203, 190, 253, 170, 84, 62, 1, 37, 83, 62, 132, 146, 237, 60, 157, 204, 11, 62, 163, 96, 239, 190, 153, 168, 183, 190, 129, 30, 92, 61, 23, 230, 146, 62, 55, 211, 23, 62, 16, 104, 254, 187, 146, 204, 6, 190, 176, 75, 130, 61, 214, 128, 93, 61, 222, 242, 179, 190, 216, 99, 87, 62, 98, 177, 235, 61, 43, 14, 165, 190, 198, 9, 182, 187, 5, 15, 103, 190, 231, 220, 178, 61, 65, 116, 254, 187, 49, 98, 129, 62, 95, 149, 7, 62, 84, 133, 111, 62, 118, 196, 57, 61, 179, 155, 109, 61, 198, 38, 127, 62, 228, 119, 136, 188, 60, 186, 102, 62, 133, 133, 20, 190, 109, 179, 41, 62, 157, 13, 13, 190, 26, 199, 117, 191, 88, 49, 128, 62, 85, 106, 194, 62, 227, 132, 203, 189, 4, 229, 191, 61, 242, 178, 109, 62, 205, 148, 87, 188, 124, 203, 205, 190, 21, 80, 68, 190, 181, 156, 139, 189, 195, 171, 219, 61, 61, 98, 81, 190, 173, 102, 250, 189, 118, 18, 194, 62, 187, 161, 1, 189, 163, 152, 155, 188, 246, 159, 55, 190, 30, 2, 138, 62, 183, 109, 123, 190, 160, 191, 190, 62, 170, 245, 180, 189, 182, 84, 157, 62, 148, 75, 156, 62, 97, 87, 180, 62, 247, 166, 102, 191, 246, 221, 200, 61, 108, 191, 255, 188, 60, 118, 45, 62, 6, 172, 55, 62, 47, 90, 63, 190, 251, 247, 90, 61, 154, 195, 2, 191, 138, 203, 193, 190, 96, 11, 192, 61, 212, 118, 126, 189, 108, 154, 47, 190, 167, 162, 179, 62, 15, 103, 118, 62, 0, 155, 31, 189, 129, 62, 233, 190, 234, 52, 163, 190, 16, 89, 16, 60, 34, 147, 191, 190, 104, 150, 92, 190, 248, 55, 232, 188, 77, 189, 198, 62, 45, 93, 27, 191, 19, 229, 8, 61, 116, 133, 93, 62, 49, 148, 176, 188, 239, 101, 146, 61, 208, 92, 49, 191, 28, 113, 55, 62, 236, 14, 35, 191, 93, 143, 16, 59, 33, 137, 168, 62, 41, 82, 10, 63, 88, 126, 11, 61, 245, 129, 244, 189, 219, 205, 185, 59, 221, 133, 197, 188, 235, 17, 66, 190, 187, 190, 50, 190, 187, 20, 2, 63, 47, 109, 79, 62, 171, 110, 27, 190, 73, 62, 17, 60, 196, 121, 14, 62, 60, 139, 243, 190, 138, 48, 4, 190, 216, 66, 40, 62, 15, 118, 156, 61, 93, 27, 8, 191, 56, 234, 65, 190, 215, 37, 179, 62, 35, 186, 9, 62, 10, 224, 143, 61, 128, 159, 140, 189, 170, 65, 232, 62, 183, 246, 56, 189, 179, 15, 252, 188, 113, 70, 14, 62, 207, 43, 40, 191, 78, 94, 140, 62, 147, 73, 103, 62, 139, 173, 98, 62, 164, 224, 159, 189, 140, 97, 144, 62, 190, 108, 64, 191, 175, 196, 117, 62, 247, 54, 168, 190, 68, 245, 42, 191, 105, 162, 203, 62, 83, 24, 164, 190, 85, 137, 200, 190, 195, 73, 172, 190, 174, 91, 100, 191, 190, 246, 88, 62, 143, 128, 156, 189, 23, 39, 183, 189, 47, 192, 77, 190, 246, 24, 102, 61, 30, 150, 12, 62, 229, 191, 21, 191, 105, 141, 108, 190, 206, 1, 201, 190, 149, 126, 138, 190, 199, 123, 162, 191, 6, 113, 44, 62, 198, 23, 76, 189, 136, 157, 41, 191, 230, 212, 206, 62, 174, 146, 195, 189, 171, 80, 155, 61, 217, 129, 37, 191, 160, 127, 250, 189, 137, 10, 22, 190, 199, 201, 11, 191, 172, 165, 165, 61, 40, 97, 40, 190, 100, 56, 248, 189, 8, 213, 139, 62, 55, 183, 229, 188, 56, 103, 245, 190, 129, 205, 128, 62, 242, 58, 107, 61, 238, 52, 20, 191, 56, 77, 180, 60, 214, 4, 27, 191, 131, 120, 88, 190, 229, 192, 64, 190, 202, 201, 211, 61, 53, 222, 18, 62, 196, 212, 51, 62, 159, 58, 240, 62, 86, 95, 245, 190, 110, 35, 78, 62, 167, 247, 1, 191, 47, 70, 173, 190, 218, 7, 124, 190, 184, 195, 181, 190, 17, 39, 236, 190, 82, 62, 137, 190, 191, 90, 17, 63, 192, 195, 74, 191, 67, 254, 234, 60, 76, 251, 215, 190, 92, 128, 105, 62, 43, 104, 116, 62, 190, 247, 25, 62, 19, 28, 117, 190, 165, 142, 176, 62, 158, 41, 100, 190, 193, 100, 129, 189, 3, 251, 92, 191, 11, 34, 210, 61, 174, 64, 21, 61, 223, 125, 128, 189, 192, 133, 202, 189, 231, 213, 182, 190, 80, 236, 162, 191, 89, 101, 110, 61, 53, 187, 192, 62, 104, 13, 17, 190, 158, 160, 40, 62, 98, 195, 189, 61, 108, 41, 217, 189, 9, 46, 68, 191, 36, 246, 199, 189, 252, 204, 59, 59, 238, 231, 96, 62, 204, 50, 41, 191, 124, 170, 31, 62, 191, 215, 176, 189, 223, 36, 4, 61, 231, 138, 33, 62, 118, 187, 2, 191, 55, 187, 170, 61, 102, 191, 7, 191, 121, 151, 146, 62, 74, 23, 175, 62, 70, 184, 145, 190, 182, 144, 192, 61, 103, 203, 170, 62, 168, 251, 172, 190, 171, 167, 36, 61, 118, 163, 60, 190, 4, 240, 18, 191, 89, 233, 78, 62, 228, 242, 216, 190, 141, 19, 115, 191, 13, 254, 43, 191, 79, 113, 79, 191, 130, 114, 153, 62, 90, 24, 135, 62, 245, 20, 15, 62, 56, 163, 57, 190, 187, 219, 44, 62, 197, 143, 134, 62, 130, 181, 160, 191, 111, 61, 13, 190, 156, 99, 199, 190, 4, 88, 199, 187, 204, 184, 239, 191, 101, 97, 0, 63, 249, 121, 53, 191, 42, 58, 232, 190, 200, 14, 196, 62, 221, 4, 65, 62, 117, 206, 147, 190, 124, 88, 50, 62, 248, 244, 14, 191, 236, 167, 133, 61, 129, 60, 172, 190, 13, 98, 45, 62, 162, 107, 236, 62, 222, 102, 107, 62, 2, 126, 67, 190, 112, 132, 202, 190, 248, 214, 138, 62, 110, 67, 237, 189, 151, 250, 6, 62, 190, 176, 144, 62, 69, 171, 60, 62, 164, 239, 178, 62, 96, 52, 246, 189, 202, 104, 248, 189, 42, 192, 147, 62, 254, 69, 74, 190, 130, 140, 159, 189, 177, 203, 45, 62, 227, 45, 168, 62, 223, 194, 3, 192, 157, 95, 214, 188, 203, 192, 209, 62, 206, 138, 253, 61, 190, 0, 146, 190, 119, 216, 218, 188, 232, 149, 143, 61, 222, 73, 120, 61, 201, 255, 134, 190, 173, 145, 122, 61, 38, 139, 155, 190, 24, 93, 190, 59, 121, 241, 138, 189, 104, 223, 134, 190, 41, 111, 37, 191, 200, 218, 151, 62, 27, 114, 226, 189, 114, 49, 78, 61, 24, 63, 129, 62, 49, 59, 178, 190, 229, 247, 68, 62, 58, 226, 64, 61, 100, 226, 68, 61, 217, 36, 153, 62, 61, 145, 150, 62, 84, 72, 215, 61, 146, 99, 151, 61, 160, 235, 68, 191, 25, 35, 134, 190, 127, 99, 35, 62, 176, 169, 169, 62, 14, 233, 97, 60, 25, 177, 205, 189, 40, 182, 253, 191, 121, 74, 243, 189, 200, 5, 3, 191, 227, 149, 128, 62, 159, 69, 131, 62, 231, 21, 139, 189, 184, 191, 123, 62, 15, 139, 29, 62, 77, 52, 143, 188, 217, 41, 131, 62, 139, 234, 60, 191, 9, 172, 170, 189, 44, 222, 52, 191, 165, 40, 19, 62, 134, 94, 4, 63, 115, 67, 67, 62, 233, 61, 253, 188, 29, 188, 42, 191, 143, 242, 103, 62, 71, 165, 160, 190, 107, 125, 4, 62, 4, 210, 135, 61, 192, 85, 235, 62, 126, 195, 138, 62, 62, 46, 163, 188, 238, 154, 163, 61, 51, 117, 192, 61, 141, 187, 6, 191, 107, 26, 1, 190, 183, 100, 223, 61, 58, 219, 139, 62, 41, 245, 17, 192, 81, 54, 18, 190, 94, 3, 28, 62, 72, 219, 139, 61, 176, 73, 22, 62, 70, 123, 170, 190, 234, 51, 223, 62, 244, 92, 113, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 207, 174, 190, 204, 245, 16, 190, 203, 204, 167, 189, 203, 22, 104, 62, 50, 214, 128, 61, 145, 204, 38, 62, 165, 219, 147, 62, 57, 158, 61, 62, 219, 214, 33, 62, 194, 170, 239, 189, 101, 45, 26, 190, 68, 85, 72, 62, 122, 33, 77, 190, 210, 227, 63, 62, 169, 9, 121, 62, 226, 111, 255, 189, 27, 35, 97, 60, 7, 172, 43, 62, 13, 116, 246, 189, 45, 215, 32, 62, 213, 207, 89, 189, 16, 131, 3, 62, 209, 8, 105, 188, 56, 45, 16, 62, 70, 0, 191, 61, 47, 239, 31, 62, 158, 14, 142, 61, 205, 150, 154, 62, 191, 157, 25, 62, 251, 68, 31, 62, 254, 191, 208, 61, 141, 149, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 70, 126, 63, 91, 122, 89, 190, 185, 39, 239, 62, 118, 191, 115, 191, 146, 121, 44, 59, 124, 128, 26, 191, 171, 213, 221, 62, 154, 149, 230, 62, 210, 11, 142, 190, 36, 61, 140, 189, 226, 114, 138, 190, 30, 69, 55, 191, 119, 189, 205, 60, 132, 84, 136, 62, 178, 100, 122, 62, 45, 253, 137, 190, 21, 217, 77, 61, 156, 252, 43, 63, 245, 62, 147, 60, 84, 80, 62, 191, 66, 197, 131, 60, 45, 219, 253, 62, 212, 160, 102, 190, 172, 139, 221, 190, 59, 151, 224, 62, 148, 198, 87, 191, 5, 26, 207, 62, 18, 178, 182, 190, 215, 138, 138, 191, 247, 171, 180, 62, 79, 183, 2, 63, 112, 114, 82, 63, 43, 109, 237, 62, 191, 133, 230, 61, 52, 252, 221, 60, 236, 183, 71, 62, 234, 186, 48, 190, 166, 144, 189, 190, 164, 147, 138, 62, 142, 149, 36, 61, 236, 139, 2, 190, 163, 177, 127, 189, 58, 206, 247, 61, 8, 63, 90, 61, 82, 233, 180, 188, 219, 170, 202, 190, 155, 41, 46, 189, 241, 147, 51, 190, 113, 162, 238, 61, 46, 123, 87, 187, 2, 118, 12, 62, 152, 161, 70, 190, 200, 136, 79, 190, 216, 163, 0, 62, 163, 1, 61, 190, 214, 206, 179, 190, 1, 55, 112, 62, 130, 161, 20, 61, 241, 240, 72, 189, 204, 194, 95, 190, 181, 151, 216, 62, 125, 23, 105, 190, 53, 49, 108, 190, 61, 42, 112, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 30, 254, 189, 183, 244, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 151, 206, 63, 67, 216, 6, 63, 72, 197, 134, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 236, 238, 190, 145, 169, 136, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}