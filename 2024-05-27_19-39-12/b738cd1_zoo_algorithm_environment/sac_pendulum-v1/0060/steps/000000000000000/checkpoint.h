// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 195, 12, 191, 194, 65, 241, 190, 131, 50, 13, 63, 255, 169, 41, 190, 245, 148, 218, 62, 238, 16, 211, 189, 66, 254, 14, 191, 235, 141, 251, 189, 22, 9, 90, 62, 191, 56, 231, 190, 54, 52, 141, 190, 110, 162, 94, 190, 242, 212, 15, 189, 203, 2, 4, 190, 155, 219, 249, 190, 158, 108, 232, 62, 11, 201, 252, 62, 24, 184, 151, 62, 182, 67, 211, 190, 225, 229, 1, 62, 78, 3, 230, 62, 176, 45, 161, 62, 223, 219, 11, 61, 247, 250, 223, 187, 145, 185, 233, 62, 38, 18, 237, 62, 156, 54, 13, 191, 66, 56, 212, 190, 141, 247, 92, 189, 147, 112, 125, 190, 84, 193, 0, 63, 203, 244, 246, 190, 160, 105, 6, 63, 173, 117, 156, 189, 14, 142, 12, 61, 44, 22, 10, 63, 105, 47, 15, 62, 201, 116, 151, 62, 191, 221, 211, 190, 224, 56, 159, 62, 149, 114, 245, 62, 224, 209, 202, 190, 188, 245, 151, 62, 80, 44, 53, 189, 182, 227, 101, 62, 164, 28, 163, 62, 108, 56, 234, 187, 118, 105, 56, 189, 244, 56, 217, 190, 120, 199, 156, 190, 112, 38, 36, 61, 116, 185, 197, 186, 204, 0, 76, 61, 168, 56, 159, 189, 50, 149, 143, 62, 228, 58, 91, 190, 206, 152, 71, 190, 211, 129, 3, 191, 0, 70, 97, 189, 54, 159, 14, 63, 186, 39, 46, 62, 85, 82, 10, 63, 97, 141, 18, 63, 225, 102, 231, 189, 243, 54, 242, 62, 67, 185, 147, 190, 0, 165, 175, 190, 247, 165, 162, 190, 79, 126, 91, 62, 167, 4, 97, 190, 132, 173, 2, 191, 245, 2, 248, 61, 33, 120, 70, 190, 106, 110, 169, 189, 177, 72, 62, 190, 238, 46, 75, 61, 232, 193, 188, 60, 93, 120, 223, 62, 228, 77, 219, 62, 131, 15, 4, 63, 82, 253, 14, 191, 226, 63, 219, 189, 216, 213, 131, 190, 0, 117, 44, 62, 69, 29, 67, 190, 58, 35, 227, 190, 223, 80, 32, 190, 118, 64, 13, 63, 221, 29, 230, 61, 81, 208, 6, 63, 158, 186, 147, 62, 73, 109, 187, 190, 87, 220, 134, 190, 185, 171, 109, 190, 141, 108, 170, 190, 190, 26, 31, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 169, 19, 191, 112, 101, 181, 186, 11, 203, 148, 189, 105, 87, 95, 62, 68, 25, 2, 63, 160, 194, 29, 189, 134, 95, 9, 62, 104, 170, 18, 190, 73, 244, 16, 191, 84, 22, 215, 61, 19, 151, 254, 190, 63, 114, 143, 62, 109, 253, 31, 62, 110, 114, 160, 59, 36, 243, 81, 62, 173, 234, 186, 190, 90, 33, 186, 190, 238, 105, 185, 62, 184, 168, 237, 62, 118, 2, 237, 189, 216, 248, 109, 187, 243, 226, 8, 63, 184, 6, 10, 63, 27, 69, 208, 189, 179, 166, 214, 190, 14, 231, 162, 62, 119, 136, 17, 190, 133, 227, 239, 61, 213, 222, 194, 62, 106, 84, 145, 62, 154, 108, 110, 61, 85, 228, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 99, 60, 189, 199, 124, 14, 190, 136, 138, 199, 61, 191, 160, 238, 189, 129, 234, 179, 60, 115, 252, 72, 60, 229, 6, 91, 61, 32, 3, 183, 187, 213, 215, 52, 62, 222, 136, 230, 61, 212, 9, 232, 60, 42, 204, 51, 62, 116, 87, 159, 189, 225, 213, 25, 62, 252, 136, 39, 190, 157, 92, 46, 62, 39, 103, 29, 62, 27, 174, 90, 61, 250, 138, 110, 188, 135, 50, 46, 189, 155, 199, 216, 61, 28, 146, 140, 189, 150, 161, 55, 61, 254, 9, 136, 61, 136, 242, 227, 189, 112, 70, 21, 188, 131, 238, 37, 189, 47, 34, 166, 61, 221, 252, 163, 61, 85, 240, 23, 62, 12, 122, 48, 62, 77, 44, 10, 190, 176, 176, 179, 61, 246, 81, 19, 189, 234, 45, 167, 61, 218, 67, 52, 190, 83, 26, 47, 190, 125, 117, 108, 61, 63, 212, 214, 61, 91, 124, 42, 190, 53, 29, 52, 190, 141, 33, 44, 190, 7, 136, 49, 61, 5, 175, 14, 62, 123, 31, 111, 189, 7, 47, 155, 189, 3, 235, 183, 188, 194, 12, 187, 189, 150, 50, 197, 61, 75, 54, 198, 61, 40, 161, 129, 189, 137, 200, 2, 61, 0, 145, 95, 189, 112, 126, 240, 61, 213, 80, 181, 61, 68, 230, 5, 190, 209, 241, 129, 188, 64, 131, 161, 188, 213, 120, 175, 189, 105, 60, 144, 59, 62, 217, 178, 61, 28, 136, 3, 62, 230, 152, 51, 61, 50, 104, 6, 62, 168, 111, 219, 189, 8, 236, 40, 190, 19, 143, 12, 61, 128, 155, 216, 61, 94, 20, 140, 189, 21, 241, 42, 190, 194, 71, 242, 61, 102, 186, 205, 189, 240, 61, 203, 189, 219, 192, 26, 62, 151, 190, 86, 61, 113, 228, 204, 61, 135, 8, 45, 189, 112, 245, 137, 189, 109, 221, 176, 189, 61, 233, 231, 189, 190, 212, 42, 188, 210, 228, 247, 61, 51, 62, 169, 59, 191, 239, 43, 190, 175, 71, 95, 61, 4, 10, 249, 61, 151, 76, 17, 190, 251, 224, 184, 189, 58, 212, 242, 189, 168, 173, 35, 190, 27, 63, 44, 190, 71, 213, 171, 189, 42, 161, 44, 62, 120, 91, 217, 59, 252, 181, 235, 61, 91, 101, 165, 61, 179, 227, 236, 189, 46, 32, 22, 62, 235, 221, 230, 61, 47, 59, 151, 189, 119, 23, 231, 189, 238, 247, 82, 187, 75, 221, 38, 188, 182, 156, 87, 189, 215, 69, 255, 189, 17, 216, 211, 189, 39, 3, 174, 189, 1, 45, 25, 189, 215, 196, 196, 61, 146, 16, 234, 61, 167, 51, 225, 59, 197, 34, 213, 189, 71, 45, 163, 189, 245, 198, 17, 62, 223, 130, 33, 62, 147, 113, 60, 189, 15, 244, 104, 188, 153, 2, 13, 61, 210, 224, 39, 190, 112, 155, 33, 190, 236, 180, 235, 189, 187, 249, 63, 189, 39, 191, 46, 188, 158, 107, 218, 187, 247, 94, 63, 61, 253, 114, 165, 59, 48, 255, 242, 59, 217, 49, 45, 190, 112, 63, 148, 60, 140, 172, 193, 61, 221, 242, 47, 62, 112, 9, 23, 61, 150, 49, 11, 189, 219, 187, 36, 190, 87, 122, 43, 190, 113, 0, 33, 62, 159, 1, 158, 61, 39, 109, 23, 190, 63, 103, 217, 61, 248, 131, 203, 61, 232, 159, 225, 188, 23, 18, 201, 189, 185, 199, 123, 189, 76, 3, 33, 189, 177, 165, 228, 61, 72, 137, 195, 61, 201, 227, 208, 189, 185, 103, 240, 61, 218, 200, 137, 61, 56, 185, 145, 61, 211, 212, 44, 62, 138, 56, 12, 62, 222, 211, 51, 190, 74, 60, 127, 189, 7, 102, 154, 189, 184, 11, 106, 61, 90, 196, 209, 61, 34, 174, 43, 60, 50, 25, 48, 61, 192, 196, 170, 189, 56, 88, 181, 189, 96, 79, 217, 189, 26, 234, 39, 189, 136, 173, 157, 61, 79, 75, 124, 188, 112, 153, 220, 187, 232, 19, 41, 188, 98, 114, 27, 62, 105, 188, 246, 61, 73, 158, 73, 61, 156, 111, 165, 188, 150, 142, 75, 187, 139, 152, 251, 61, 222, 253, 157, 188, 191, 128, 137, 61, 140, 138, 243, 189, 120, 203, 194, 59, 89, 41, 19, 190, 135, 246, 208, 61, 66, 252, 4, 62, 104, 82, 13, 190, 79, 109, 10, 62, 229, 119, 163, 61, 235, 102, 3, 62, 124, 209, 23, 61, 141, 244, 23, 188, 151, 38, 30, 61, 216, 16, 41, 62, 64, 126, 24, 190, 132, 222, 161, 189, 251, 52, 177, 189, 219, 54, 187, 189, 104, 220, 7, 62, 147, 77, 21, 61, 19, 14, 158, 189, 206, 141, 209, 61, 9, 184, 242, 60, 16, 162, 43, 62, 148, 161, 174, 189, 28, 71, 42, 190, 91, 97, 100, 61, 55, 171, 39, 190, 2, 112, 198, 61, 47, 41, 157, 60, 218, 222, 120, 187, 45, 91, 45, 62, 33, 177, 180, 189, 35, 13, 89, 189, 89, 250, 158, 188, 88, 3, 41, 62, 192, 37, 60, 61, 145, 229, 15, 190, 143, 75, 89, 189, 5, 199, 38, 61, 102, 181, 21, 190, 102, 214, 132, 60, 229, 208, 99, 189, 12, 202, 136, 59, 204, 192, 32, 62, 252, 30, 234, 189, 140, 7, 236, 189, 158, 32, 8, 62, 151, 50, 43, 62, 66, 249, 36, 190, 212, 4, 242, 60, 134, 39, 21, 62, 88, 55, 164, 61, 131, 128, 201, 189, 2, 112, 134, 189, 167, 238, 48, 62, 189, 78, 171, 189, 3, 30, 235, 189, 243, 167, 34, 190, 84, 197, 202, 187, 152, 77, 110, 189, 59, 214, 217, 61, 97, 125, 248, 61, 34, 106, 93, 189, 170, 86, 221, 61, 78, 37, 8, 190, 142, 149, 233, 189, 251, 107, 67, 61, 10, 99, 32, 60, 167, 70, 0, 62, 146, 251, 190, 187, 149, 31, 184, 188, 206, 214, 34, 190, 226, 208, 47, 62, 176, 59, 168, 188, 249, 37, 174, 189, 212, 81, 190, 189, 57, 189, 7, 62, 86, 44, 34, 62, 149, 81, 16, 190, 81, 20, 190, 61, 180, 93, 137, 60, 97, 222, 35, 189, 72, 28, 121, 61, 139, 46, 56, 61, 252, 214, 24, 190, 37, 206, 227, 189, 132, 30, 198, 61, 139, 74, 242, 189, 84, 253, 56, 60, 141, 80, 189, 189, 125, 151, 215, 189, 191, 157, 167, 189, 130, 187, 1, 62, 241, 172, 17, 190, 100, 217, 196, 61, 169, 8, 135, 61, 18, 5, 255, 61, 176, 42, 24, 62, 74, 81, 203, 60, 204, 209, 115, 189, 184, 179, 201, 61, 157, 17, 120, 189, 12, 80, 93, 188, 210, 90, 57, 189, 17, 127, 138, 189, 216, 91, 200, 61, 199, 185, 253, 189, 43, 44, 10, 190, 8, 156, 21, 190, 133, 35, 0, 190, 96, 16, 12, 62, 216, 201, 158, 61, 57, 65, 191, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 28, 51, 11, 62, 104, 235, 10, 61, 104, 129, 197, 61, 28, 248, 23, 62, 37, 54, 20, 189, 95, 189, 36, 189, 25, 64, 182, 60, 255, 192, 23, 190, 158, 154, 10, 61, 170, 228, 12, 190, 175, 33, 205, 61, 243, 51, 29, 62, 210, 211, 66, 189, 150, 10, 59, 189, 203, 190, 169, 61, 220, 111, 176, 60, 209, 109, 94, 189, 208, 27, 41, 190, 227, 128, 28, 62, 172, 156, 14, 62, 224, 231, 49, 190, 10, 152, 114, 60, 202, 75, 54, 189, 58, 214, 222, 61, 78, 95, 17, 62, 28, 53, 254, 189, 170, 187, 29, 62, 127, 71, 44, 62, 66, 41, 174, 189, 44, 251, 30, 62, 186, 151, 22, 62, 17, 138, 124, 186, 196, 253, 47, 62, 19, 96, 236, 60, 40, 7, 244, 189, 219, 225, 203, 189, 74, 135, 29, 190, 31, 121, 251, 59, 214, 65, 131, 189, 31, 107, 224, 61, 194, 251, 35, 61, 226, 217, 102, 61, 239, 34, 154, 61, 129, 68, 177, 189, 72, 161, 241, 61, 182, 0, 9, 190, 89, 199, 30, 189, 213, 142, 177, 61, 169, 248, 18, 62, 152, 116, 43, 189, 52, 39, 48, 61, 182, 77, 16, 62, 25, 202, 74, 60, 209, 241, 10, 62, 238, 4, 185, 61, 201, 195, 18, 190, 26, 172, 212, 189, 8, 166, 40, 190, 248, 247, 150, 189, 133, 168, 162, 189, 238, 37, 31, 62, 33, 180, 117, 61, 246, 241, 20, 190, 70, 55, 48, 62, 219, 99, 28, 61, 228, 167, 58, 60, 182, 204, 26, 190, 247, 249, 215, 189, 124, 31, 104, 189, 129, 144, 21, 60, 118, 211, 132, 188, 243, 250, 161, 61, 66, 246, 127, 189, 235, 219, 0, 62, 216, 200, 151, 60, 104, 187, 151, 189, 87, 165, 158, 60, 75, 108, 14, 190, 234, 238, 191, 61, 89, 28, 232, 60, 59, 126, 242, 188, 238, 75, 109, 189, 2, 43, 205, 187, 1, 93, 1, 62, 82, 219, 38, 62, 185, 146, 24, 60, 159, 75, 229, 189, 23, 33, 228, 189, 98, 218, 178, 189, 196, 67, 41, 190, 182, 150, 135, 61, 81, 121, 168, 61, 42, 3, 35, 190, 193, 238, 31, 62, 63, 124, 21, 190, 170, 91, 20, 62, 248, 89, 149, 58, 246, 166, 113, 61, 103, 81, 28, 190, 195, 157, 156, 61, 94, 54, 228, 61, 249, 132, 126, 61, 240, 76, 12, 189, 154, 139, 217, 189, 50, 49, 25, 62, 134, 52, 236, 189, 22, 206, 215, 61, 194, 238, 131, 61, 61, 130, 5, 62, 61, 243, 8, 189, 180, 207, 22, 190, 70, 42, 86, 189, 236, 199, 31, 62, 62, 137, 36, 190, 122, 175, 213, 189, 156, 67, 191, 59, 51, 219, 42, 62, 116, 109, 219, 189, 87, 34, 193, 189, 210, 72, 133, 60, 54, 22, 30, 62, 247, 40, 22, 189, 219, 244, 196, 61, 3, 82, 234, 189, 20, 177, 136, 60, 243, 32, 151, 61, 107, 107, 172, 188, 25, 189, 40, 62, 194, 102, 219, 189, 65, 149, 246, 61, 46, 190, 20, 190, 4, 136, 51, 189, 135, 224, 14, 62, 120, 97, 135, 189, 156, 114, 18, 190, 172, 164, 26, 62, 167, 145, 89, 60, 174, 114, 192, 61, 206, 90, 26, 60, 121, 1, 86, 189, 143, 174, 210, 61, 63, 83, 192, 61, 94, 133, 128, 61, 47, 252, 128, 61, 126, 159, 140, 188, 86, 245, 250, 187, 40, 239, 206, 188, 185, 42, 131, 61, 23, 240, 18, 190, 71, 37, 237, 189, 131, 156, 41, 62, 231, 88, 8, 189, 20, 239, 23, 190, 82, 193, 188, 189, 62, 36, 225, 189, 62, 134, 19, 61, 111, 226, 73, 61, 42, 224, 59, 60, 37, 134, 33, 61, 79, 36, 11, 190, 234, 241, 34, 62, 23, 170, 27, 62, 179, 153, 32, 62, 185, 144, 21, 190, 43, 221, 219, 189, 51, 65, 15, 190, 147, 135, 248, 189, 138, 64, 165, 61, 197, 47, 168, 189, 79, 135, 43, 61, 177, 207, 197, 189, 76, 81, 46, 62, 94, 110, 10, 62, 31, 119, 23, 62, 61, 39, 50, 190, 165, 66, 34, 190, 182, 248, 255, 61, 192, 16, 49, 190, 149, 57, 152, 60, 212, 27, 251, 61, 129, 95, 3, 190, 156, 164, 173, 61, 151, 217, 40, 190, 14, 187, 31, 62, 15, 163, 153, 61, 68, 23, 104, 61, 35, 83, 16, 190, 219, 216, 228, 187, 195, 216, 0, 59, 58, 176, 38, 62, 21, 234, 152, 61, 241, 197, 12, 62, 67, 7, 65, 189, 253, 166, 180, 189, 227, 240, 166, 189, 29, 219, 53, 60, 151, 40, 0, 190, 106, 80, 41, 62, 223, 158, 25, 61, 181, 45, 30, 189, 117, 201, 152, 61, 16, 215, 27, 62, 208, 121, 17, 190, 26, 50, 37, 190, 143, 96, 241, 60, 145, 202, 225, 189, 199, 204, 243, 59, 168, 164, 226, 189, 254, 209, 178, 61, 232, 209, 212, 189, 100, 140, 26, 61, 27, 30, 247, 189, 221, 245, 137, 58, 255, 36, 77, 60, 204, 247, 156, 61, 49, 48, 45, 62, 250, 88, 128, 188, 81, 48, 153, 61, 48, 205, 175, 189, 197, 213, 3, 62, 228, 154, 149, 61, 188, 113, 26, 190, 128, 189, 144, 61, 114, 131, 250, 189, 246, 60, 31, 62, 47, 244, 250, 61, 214, 94, 121, 60, 132, 254, 39, 190, 13, 192, 115, 61, 145, 52, 240, 188, 70, 67, 34, 61, 95, 148, 137, 61, 197, 133, 32, 62, 17, 231, 28, 188, 144, 102, 177, 189, 110, 11, 178, 61, 184, 78, 215, 189, 137, 179, 4, 62, 145, 215, 24, 62, 61, 24, 24, 62, 184, 173, 199, 189, 147, 241, 72, 61, 177, 235, 35, 61, 124, 14, 28, 62, 63, 109, 254, 189, 6, 112, 250, 61, 85, 103, 171, 60, 118, 212, 2, 190, 35, 64, 36, 62, 208, 47, 92, 60, 180, 45, 73, 189, 184, 3, 106, 61, 99, 159, 210, 188, 36, 238, 160, 189, 46, 203, 34, 190, 242, 10, 19, 190, 9, 205, 135, 61, 254, 129, 100, 61, 174, 241, 193, 59, 41, 67, 2, 62, 188, 60, 143, 61, 85, 227, 168, 189, 91, 100, 107, 189, 58, 108, 249, 60, 204, 238, 7, 62, 203, 130, 30, 62, 245, 195, 21, 190, 239, 209, 18, 62, 75, 240, 74, 189, 72, 248, 192, 189, 208, 94, 75, 189, 93, 118, 200, 189, 121, 65, 156, 188, 22, 137, 190, 61, 91, 0, 4, 190, 49, 132, 205, 60, 39, 199, 19, 190, 145, 91, 237, 189, 112, 51, 36, 190, 243, 175, 191, 61, 90, 61, 6, 62, 156, 105, 108, 189, 184, 129, 175, 61, 227, 86, 149, 189, 167, 173, 19, 190, 23, 183, 214, 61, 234, 240, 38, 189, 216, 183, 47, 190, 66, 157, 22, 62, 136, 55, 193, 183, 199, 146, 9, 189, 33, 249, 253, 61, 55, 106, 54, 61, 188, 186, 208, 60, 183, 92, 171, 61, 143, 200, 19, 190, 229, 8, 23, 62, 159, 20, 46, 190, 86, 62, 9, 190, 39, 113, 206, 189, 7, 230, 87, 61, 201, 105, 234, 189, 245, 110, 28, 189, 10, 11, 40, 62, 121, 92, 20, 61, 12, 50, 87, 189, 177, 216, 46, 62, 136, 159, 187, 188, 238, 161, 174, 61, 34, 49, 52, 190, 95, 195, 0, 189, 198, 240, 16, 190, 204, 204, 14, 62, 83, 179, 169, 61, 181, 110, 244, 59, 2, 63, 15, 190, 14, 241, 156, 60, 63, 214, 204, 189, 92, 251, 18, 62, 35, 187, 6, 62, 217, 202, 165, 61, 199, 255, 222, 61, 46, 74, 116, 61, 42, 231, 129, 61, 158, 35, 186, 61, 109, 203, 20, 190, 138, 182, 43, 62, 36, 47, 43, 62, 34, 216, 235, 188, 194, 173, 23, 62, 105, 121, 22, 62, 126, 199, 52, 62, 193, 142, 0, 62, 191, 172, 170, 60, 10, 27, 20, 62, 136, 217, 38, 190, 253, 49, 216, 61, 221, 103, 173, 61, 148, 101, 20, 60, 150, 42, 29, 190, 185, 14, 115, 189, 66, 36, 49, 61, 166, 236, 57, 189, 209, 65, 143, 61, 65, 247, 164, 61, 73, 93, 50, 61, 43, 234, 180, 60, 13, 49, 117, 189, 101, 49, 0, 62, 68, 160, 58, 61, 35, 67, 159, 188, 198, 142, 132, 189, 37, 213, 24, 62, 224, 170, 219, 187, 76, 183, 233, 61, 12, 114, 218, 188, 160, 89, 10, 62, 81, 228, 248, 189, 232, 213, 130, 189, 222, 208, 10, 61, 173, 222, 201, 60, 195, 6, 28, 62, 145, 58, 179, 61, 106, 25, 136, 61, 173, 241, 240, 60, 217, 2, 125, 61, 25, 215, 15, 62, 158, 103, 43, 190, 61, 0, 104, 189, 189, 28, 32, 62, 172, 255, 213, 188, 68, 197, 134, 61, 132, 207, 174, 61, 24, 192, 3, 190, 54, 241, 199, 189, 218, 50, 222, 59, 48, 173, 252, 61, 24, 107, 38, 60, 58, 82, 82, 189, 99, 224, 153, 60, 98, 97, 202, 188, 201, 126, 14, 190, 132, 225, 254, 188, 106, 14, 142, 188, 3, 106, 183, 187, 239, 241, 241, 188, 152, 45, 188, 59, 228, 239, 239, 186, 255, 41, 242, 187, 71, 39, 227, 189, 164, 16, 18, 62, 38, 112, 139, 189, 226, 78, 23, 62, 43, 223, 152, 61, 202, 175, 16, 62, 186, 146, 129, 189, 207, 99, 16, 62, 211, 69, 121, 60, 206, 6, 183, 61, 218, 146, 247, 61, 214, 3, 23, 190, 20, 58, 16, 62, 20, 225, 43, 62, 118, 223, 134, 61, 231, 221, 10, 190, 123, 3, 1, 62, 13, 192, 163, 61, 221, 212, 8, 189, 19, 154, 101, 188, 202, 94, 129, 189, 149, 136, 28, 61, 194, 201, 218, 189, 24, 126, 25, 190, 47, 76, 10, 62, 184, 227, 158, 61, 183, 166, 237, 60, 89, 140, 221, 61, 123, 209, 49, 62, 180, 39, 22, 189, 54, 96, 238, 61, 91, 81, 249, 60, 93, 19, 169, 189, 24, 178, 46, 62, 77, 195, 184, 188, 171, 123, 105, 189, 24, 151, 174, 61, 198, 16, 46, 190, 166, 61, 230, 61, 41, 235, 187, 61, 168, 94, 27, 189, 76, 93, 138, 189, 4, 71, 245, 61, 191, 242, 204, 61, 140, 14, 129, 61, 145, 236, 10, 190, 117, 169, 219, 189, 24, 238, 211, 61, 186, 194, 171, 61, 41, 110, 102, 189, 143, 130, 238, 189, 162, 91, 145, 189, 78, 23, 67, 59, 119, 192, 48, 190, 134, 107, 12, 190, 15, 188, 181, 61, 149, 67, 255, 61, 91, 100, 254, 60, 70, 89, 153, 61, 246, 149, 31, 62, 203, 225, 47, 62, 90, 22, 63, 59, 237, 53, 14, 190, 141, 25, 52, 61, 222, 64, 147, 61, 151, 49, 142, 187, 43, 204, 205, 189, 194, 73, 28, 61, 149, 107, 90, 189, 187, 238, 165, 60, 251, 72, 31, 189, 113, 102, 5, 62, 140, 247, 67, 189, 255, 76, 0, 190, 248, 224, 66, 189, 231, 15, 199, 61, 93, 247, 33, 190, 116, 173, 225, 58, 203, 19, 90, 189, 72, 36, 87, 60, 145, 112, 161, 61, 12, 161, 199, 61, 215, 50, 208, 189, 250, 255, 7, 62, 29, 218, 33, 190, 188, 201, 223, 61, 2, 10, 46, 62, 180, 146, 36, 62, 184, 220, 132, 59, 151, 126, 183, 189, 70, 132, 146, 189, 132, 42, 183, 61, 226, 71, 24, 190, 115, 213, 3, 190, 75, 247, 86, 189, 208, 215, 84, 61, 210, 73, 155, 61, 47, 69, 50, 62, 161, 187, 46, 189, 240, 177, 242, 60, 34, 83, 243, 61, 182, 6, 113, 188, 38, 230, 235, 189, 109, 65, 18, 62, 175, 158, 250, 189, 30, 24, 210, 189, 204, 233, 7, 62, 99, 193, 41, 190, 116, 128, 19, 62, 222, 166, 50, 190, 8, 134, 19, 62, 60, 131, 46, 190, 82, 147, 30, 190, 113, 172, 22, 62, 137, 190, 178, 189, 140, 19, 166, 60, 4, 100, 199, 189, 155, 105, 129, 189, 94, 144, 56, 61, 99, 109, 150, 59, 71, 238, 165, 61, 13, 156, 45, 190, 173, 112, 47, 62, 66, 99, 8, 62, 193, 102, 32, 190, 1, 86, 252, 189, 224, 234, 50, 189, 235, 44, 46, 190, 100, 110, 155, 61, 151, 145, 138, 189, 2, 223, 17, 190, 144, 253, 139, 61, 49, 118, 18, 62, 1, 175, 161, 61, 222, 252, 183, 188, 57, 248, 243, 61, 53, 242, 210, 188, 29, 167, 16, 189, 194, 41, 136, 61, 9, 88, 29, 190, 170, 87, 20, 190, 14, 5, 41, 62, 238, 116, 31, 62, 138, 129, 51, 62, 205, 163, 178, 61, 61, 147, 46, 190, 161, 159, 246, 189, 165, 90, 42, 62, 62, 87, 11, 62, 233, 165, 254, 189, 110, 196, 150, 61, 71, 49, 34, 190, 136, 33, 52, 190, 47, 70, 188, 189, 51, 131, 83, 189, 148, 79, 40, 190, 40, 151, 41, 62, 162, 105, 188, 188, 42, 42, 246, 189, 130, 84, 47, 61, 114, 164, 93, 189, 177, 145, 244, 189, 118, 39, 100, 61, 23, 58, 253, 188, 128, 63, 35, 190, 192, 0, 53, 190, 118, 111, 189, 61, 82, 154, 16, 61, 81, 239, 167, 61, 208, 187, 89, 60, 30, 147, 185, 189, 237, 59, 48, 190, 129, 185, 255, 189, 151, 61, 159, 61, 94, 88, 166, 61, 154, 137, 73, 61, 108, 116, 216, 58, 65, 123, 51, 190, 10, 115, 27, 189, 105, 161, 38, 189, 234, 89, 44, 61, 246, 159, 198, 61, 254, 166, 17, 62, 86, 40, 254, 189, 235, 247, 18, 190, 119, 183, 182, 61, 1, 193, 85, 61, 168, 84, 172, 189, 13, 7, 210, 188, 188, 57, 167, 61, 87, 59, 26, 190, 200, 118, 183, 60, 112, 49, 8, 190, 114, 215, 44, 62, 128, 213, 70, 189, 93, 138, 6, 62, 7, 51, 143, 189, 74, 193, 35, 61, 198, 180, 49, 190, 249, 114, 223, 61, 141, 217, 11, 190, 196, 31, 201, 189, 126, 185, 21, 190, 88, 133, 219, 61, 81, 171, 28, 62, 48, 27, 1, 61, 88, 249, 9, 62, 105, 146, 142, 61, 154, 239, 233, 61, 196, 94, 46, 60, 73, 77, 212, 188, 3, 203, 60, 60, 240, 123, 163, 189, 70, 205, 195, 61, 29, 168, 51, 189, 162, 199, 175, 188, 247, 211, 64, 188, 191, 34, 46, 190, 137, 91, 171, 60, 245, 160, 86, 61, 252, 77, 176, 188, 2, 73, 227, 188, 61, 70, 250, 60, 140, 235, 229, 61, 31, 118, 133, 189, 158, 181, 82, 61, 44, 205, 35, 62, 42, 15, 138, 61, 77, 24, 25, 190, 242, 28, 102, 189, 151, 101, 255, 61, 12, 153, 120, 61, 242, 223, 128, 61, 49, 166, 13, 62, 208, 230, 136, 189, 146, 64, 212, 61, 117, 19, 206, 189, 202, 192, 0, 190, 226, 181, 63, 189, 235, 166, 131, 60, 45, 86, 79, 188, 221, 24, 25, 62, 73, 145, 188, 61, 237, 250, 128, 188, 115, 84, 38, 190, 178, 58, 28, 62, 27, 80, 242, 189, 164, 3, 43, 190, 182, 240, 47, 188, 90, 155, 46, 190, 120, 145, 136, 61, 233, 186, 185, 189, 155, 157, 9, 189, 25, 84, 75, 189, 198, 83, 151, 61, 74, 84, 35, 190, 95, 66, 195, 189, 253, 251, 203, 189, 185, 146, 141, 61, 222, 2, 75, 61, 115, 57, 28, 61, 56, 205, 31, 61, 252, 8, 7, 190, 188, 40, 171, 61, 127, 163, 47, 189, 40, 250, 26, 190, 196, 184, 38, 62, 19, 23, 174, 189, 47, 162, 254, 60, 236, 253, 11, 190, 120, 159, 54, 61, 95, 14, 48, 62, 217, 93, 6, 61, 136, 135, 28, 62, 121, 15, 17, 190, 166, 64, 122, 189, 149, 76, 10, 190, 84, 220, 210, 189, 4, 73, 22, 190, 34, 45, 200, 61, 113, 195, 21, 62, 235, 213, 52, 190, 165, 236, 39, 60, 170, 18, 132, 60, 85, 12, 19, 62, 149, 134, 34, 62, 63, 143, 67, 188, 136, 26, 19, 190, 184, 209, 12, 188, 87, 11, 24, 62, 135, 132, 11, 62, 99, 190, 74, 189, 177, 19, 172, 186, 150, 16, 20, 190, 157, 0, 1, 62, 25, 78, 212, 189, 88, 172, 167, 60, 86, 80, 76, 187, 163, 216, 145, 189, 93, 228, 235, 189, 65, 10, 29, 190, 55, 160, 220, 189, 34, 124, 233, 188, 0, 56, 31, 61, 189, 153, 72, 189, 230, 80, 61, 189, 66, 48, 110, 189, 17, 171, 5, 190, 161, 178, 223, 189, 47, 88, 11, 190, 118, 61, 131, 61, 191, 107, 212, 61, 60, 161, 5, 190, 79, 120, 43, 62, 15, 12, 136, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 121, 40, 190, 41, 115, 30, 190, 116, 122, 14, 190, 9, 13, 24, 61, 251, 63, 185, 189, 106, 156, 135, 61, 211, 192, 36, 62, 178, 167, 13, 62, 64, 160, 48, 61, 194, 170, 239, 189, 56, 24, 99, 189, 211, 246, 147, 61, 159, 82, 49, 190, 82, 214, 187, 61, 64, 237, 13, 62, 26, 220, 20, 190, 104, 58, 82, 61, 61, 255, 129, 61, 76, 83, 143, 189, 125, 111, 17, 190, 67, 130, 255, 189, 179, 158, 49, 61, 17, 68, 245, 189, 42, 112, 194, 60, 244, 90, 42, 62, 51, 148, 33, 61, 205, 146, 51, 62, 147, 163, 164, 61, 140, 150, 154, 189, 187, 123, 6, 62, 187, 184, 53, 188, 216, 162, 162, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 51, 204, 61, 162, 36, 121, 189, 151, 192, 50, 62, 125, 181, 186, 61, 233, 201, 133, 189, 40, 109, 35, 190, 130, 207, 159, 61, 136, 222, 38, 62, 224, 195, 13, 190, 36, 61, 140, 189, 234, 15, 117, 189, 142, 187, 79, 189, 80, 169, 10, 61, 168, 97, 200, 61, 217, 225, 126, 61, 138, 184, 35, 61, 37, 27, 34, 61, 238, 102, 6, 62, 103, 106, 8, 62, 228, 50, 86, 189, 141, 63, 147, 60, 22, 73, 41, 62, 11, 58, 161, 189, 250, 67, 240, 189, 159, 154, 146, 60, 96, 177, 196, 189, 158, 18, 32, 62, 77, 189, 3, 61, 166, 146, 166, 188, 92, 189, 14, 62, 196, 203, 29, 62, 174, 140, 15, 62, 192, 230, 168, 61, 87, 243, 42, 62, 60, 7, 217, 60, 142, 118, 14, 62, 88, 68, 18, 190, 205, 193, 132, 189, 110, 119, 51, 62, 99, 164, 21, 62, 75, 6, 60, 189, 163, 177, 127, 189, 46, 236, 40, 62, 67, 83, 202, 188, 227, 189, 213, 188, 211, 120, 233, 189, 89, 62, 188, 189, 108, 188, 29, 190, 246, 214, 11, 62, 52, 47, 139, 189, 14, 202, 221, 61, 188, 34, 249, 60, 127, 81, 210, 189, 38, 27, 122, 61, 102, 95, 230, 189, 115, 216, 231, 189, 185, 118, 50, 62, 135, 166, 71, 189, 235, 79, 23, 189, 148, 223, 15, 189, 103, 75, 169, 61, 178, 80, 17, 190, 137, 0, 239, 184, 249, 30, 23, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 146, 57, 189, 48, 6, 53, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 46, 34, 190, 48, 59, 136, 63, 33, 55, 143, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 131, 139, 61, 196, 65, 12, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}