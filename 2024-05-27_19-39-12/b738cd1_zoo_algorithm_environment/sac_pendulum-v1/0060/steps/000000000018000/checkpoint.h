// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 80, 5, 191, 19, 84, 140, 62, 122, 49, 111, 63, 179, 74, 144, 190, 14, 161, 5, 63, 140, 54, 8, 190, 52, 182, 179, 190, 0, 117, 134, 63, 150, 83, 45, 63, 95, 85, 105, 190, 157, 192, 187, 191, 193, 217, 133, 190, 154, 199, 215, 186, 51, 184, 133, 191, 120, 106, 60, 190, 67, 161, 39, 63, 94, 92, 179, 63, 46, 152, 188, 62, 46, 40, 132, 191, 159, 172, 204, 61, 144, 10, 48, 59, 153, 248, 37, 63, 214, 249, 201, 62, 75, 203, 22, 62, 235, 5, 119, 63, 2, 195, 16, 191, 221, 151, 200, 190, 70, 11, 30, 191, 180, 130, 23, 191, 248, 180, 174, 190, 233, 239, 161, 62, 71, 168, 37, 191, 136, 60, 96, 63, 51, 40, 168, 61, 22, 141, 73, 63, 1, 195, 46, 63, 21, 88, 198, 189, 95, 116, 191, 62, 197, 69, 1, 191, 1, 208, 190, 188, 248, 69, 56, 63, 155, 154, 235, 190, 222, 45, 63, 62, 125, 164, 16, 63, 147, 227, 91, 62, 101, 205, 3, 63, 62, 188, 236, 189, 98, 195, 57, 190, 246, 48, 187, 190, 90, 202, 131, 191, 216, 113, 214, 62, 9, 200, 26, 61, 116, 246, 68, 190, 244, 235, 128, 189, 155, 238, 104, 62, 72, 20, 198, 190, 251, 67, 146, 189, 159, 28, 132, 191, 184, 188, 97, 63, 103, 158, 75, 62, 21, 53, 65, 63, 84, 148, 159, 63, 73, 62, 232, 62, 203, 59, 222, 189, 111, 78, 91, 63, 141, 233, 217, 190, 66, 199, 158, 190, 199, 227, 56, 191, 105, 238, 231, 61, 36, 224, 210, 60, 35, 80, 79, 191, 230, 2, 41, 63, 52, 127, 23, 190, 53, 223, 160, 191, 110, 179, 133, 190, 85, 12, 113, 189, 91, 2, 198, 63, 168, 244, 143, 62, 171, 225, 76, 63, 80, 83, 14, 191, 149, 83, 191, 190, 248, 155, 168, 189, 137, 248, 130, 63, 53, 66, 118, 62, 235, 8, 253, 189, 110, 166, 181, 191, 118, 253, 192, 60, 169, 212, 230, 62, 163, 224, 88, 63, 124, 30, 34, 63, 225, 238, 184, 62, 184, 94, 181, 191, 211, 58, 169, 190, 8, 147, 139, 189, 180, 154, 81, 191, 11, 27, 31, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 128, 28, 191, 13, 161, 88, 190, 191, 204, 158, 190, 71, 243, 132, 190, 51, 253, 144, 62, 179, 108, 20, 190, 85, 215, 7, 63, 83, 191, 192, 62, 231, 35, 150, 191, 13, 234, 42, 189, 124, 30, 89, 190, 112, 159, 108, 62, 107, 28, 61, 62, 180, 222, 28, 62, 56, 244, 171, 62, 109, 176, 34, 191, 89, 220, 111, 190, 69, 39, 32, 62, 54, 168, 103, 62, 203, 179, 134, 62, 80, 86, 219, 190, 33, 121, 237, 62, 255, 12, 200, 62, 125, 56, 78, 190, 61, 96, 131, 190, 254, 157, 114, 62, 29, 54, 38, 191, 172, 200, 168, 61, 222, 157, 73, 62, 240, 188, 222, 61, 8, 21, 229, 60, 154, 167, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 85, 126, 190, 241, 95, 131, 62, 168, 121, 134, 61, 57, 124, 136, 189, 66, 251, 83, 191, 113, 24, 228, 62, 200, 105, 255, 61, 247, 61, 67, 62, 68, 55, 217, 189, 46, 133, 117, 61, 45, 78, 168, 61, 165, 125, 100, 62, 102, 195, 101, 61, 175, 76, 113, 62, 141, 119, 171, 189, 95, 40, 85, 190, 199, 154, 94, 190, 64, 141, 14, 191, 231, 43, 104, 191, 244, 65, 37, 60, 168, 46, 221, 62, 35, 39, 181, 189, 97, 50, 9, 190, 67, 239, 97, 190, 228, 119, 195, 189, 62, 192, 47, 62, 254, 28, 48, 191, 70, 30, 20, 62, 20, 23, 138, 190, 229, 16, 164, 62, 22, 128, 170, 190, 246, 185, 219, 190, 190, 0, 9, 62, 187, 119, 86, 61, 36, 127, 9, 189, 104, 134, 150, 190, 184, 210, 191, 190, 144, 97, 202, 62, 201, 22, 84, 61, 243, 14, 108, 61, 67, 50, 104, 191, 217, 217, 53, 191, 80, 223, 84, 62, 127, 186, 29, 62, 224, 250, 15, 189, 201, 165, 114, 62, 237, 16, 66, 62, 42, 140, 113, 191, 207, 249, 128, 62, 194, 116, 141, 61, 191, 159, 161, 61, 232, 81, 108, 190, 255, 3, 204, 61, 51, 113, 17, 62, 181, 24, 197, 60, 124, 194, 61, 60, 63, 48, 176, 62, 248, 96, 125, 187, 114, 237, 172, 190, 49, 227, 67, 189, 81, 114, 22, 60, 221, 32, 41, 62, 31, 15, 162, 190, 91, 122, 5, 62, 171, 157, 71, 190, 129, 72, 221, 189, 161, 38, 242, 189, 141, 13, 122, 60, 182, 60, 19, 60, 176, 191, 188, 190, 76, 60, 249, 190, 226, 209, 137, 62, 141, 97, 221, 189, 161, 32, 43, 62, 184, 51, 149, 61, 108, 200, 45, 190, 191, 213, 27, 61, 53, 186, 202, 188, 163, 246, 18, 62, 10, 139, 28, 62, 40, 23, 142, 62, 166, 14, 52, 62, 158, 11, 82, 62, 29, 242, 169, 191, 214, 128, 227, 190, 163, 66, 57, 62, 133, 113, 14, 188, 107, 211, 217, 61, 183, 233, 18, 190, 187, 48, 238, 191, 139, 227, 242, 189, 71, 153, 212, 190, 134, 175, 150, 62, 175, 232, 235, 61, 140, 191, 139, 62, 217, 204, 146, 62, 123, 176, 84, 190, 95, 13, 20, 62, 96, 241, 99, 62, 244, 255, 82, 62, 31, 96, 237, 190, 201, 108, 210, 190, 119, 185, 205, 62, 94, 241, 237, 190, 21, 65, 137, 191, 193, 122, 61, 190, 93, 72, 89, 190, 140, 58, 6, 190, 119, 111, 155, 61, 5, 175, 6, 62, 151, 28, 97, 62, 173, 216, 86, 191, 136, 63, 204, 189, 28, 164, 88, 60, 85, 10, 52, 189, 108, 176, 227, 62, 160, 87, 148, 191, 204, 189, 183, 61, 169, 231, 98, 188, 206, 158, 154, 190, 137, 145, 9, 188, 100, 168, 136, 62, 113, 1, 184, 190, 222, 126, 38, 62, 94, 72, 15, 191, 74, 253, 42, 191, 142, 244, 182, 190, 178, 29, 64, 190, 168, 242, 157, 189, 101, 44, 193, 61, 225, 81, 68, 62, 61, 54, 86, 62, 86, 88, 48, 59, 8, 109, 184, 189, 22, 50, 46, 190, 80, 227, 217, 61, 31, 195, 146, 60, 71, 121, 58, 190, 87, 250, 55, 59, 132, 85, 17, 62, 33, 22, 249, 61, 75, 10, 55, 189, 84, 22, 148, 189, 210, 138, 69, 189, 206, 4, 40, 189, 232, 122, 12, 62, 35, 210, 139, 189, 111, 193, 34, 62, 0, 91, 147, 61, 5, 163, 124, 62, 235, 243, 116, 62, 28, 70, 255, 187, 30, 173, 57, 190, 71, 119, 179, 189, 153, 29, 236, 61, 98, 87, 197, 61, 180, 251, 65, 62, 252, 205, 106, 189, 205, 178, 226, 188, 218, 120, 73, 61, 201, 173, 193, 190, 248, 19, 241, 61, 115, 223, 105, 191, 122, 75, 163, 62, 191, 220, 150, 189, 136, 79, 159, 62, 232, 218, 57, 188, 121, 80, 209, 62, 83, 175, 48, 191, 21, 4, 0, 62, 176, 249, 163, 62, 115, 157, 184, 188, 46, 90, 124, 62, 74, 1, 32, 190, 80, 135, 174, 60, 144, 141, 36, 191, 228, 66, 250, 190, 80, 177, 193, 189, 118, 225, 170, 61, 104, 254, 72, 189, 120, 116, 87, 60, 219, 8, 156, 62, 30, 146, 34, 188, 225, 47, 52, 62, 155, 28, 133, 190, 128, 163, 155, 59, 96, 40, 108, 190, 33, 114, 162, 190, 127, 55, 99, 190, 126, 242, 89, 61, 117, 238, 62, 191, 169, 44, 184, 61, 209, 71, 155, 62, 157, 225, 10, 191, 40, 211, 55, 62, 226, 104, 179, 190, 140, 145, 209, 187, 113, 193, 21, 191, 247, 100, 174, 188, 62, 30, 130, 62, 193, 64, 226, 189, 27, 202, 211, 190, 248, 205, 207, 190, 111, 217, 254, 61, 227, 212, 164, 190, 35, 219, 33, 61, 235, 243, 62, 188, 192, 28, 244, 61, 66, 104, 182, 62, 128, 241, 102, 62, 0, 81, 109, 61, 155, 56, 48, 62, 109, 97, 64, 191, 86, 213, 128, 190, 242, 144, 20, 189, 144, 59, 224, 62, 16, 15, 166, 190, 165, 222, 36, 62, 65, 23, 236, 61, 196, 97, 195, 61, 200, 116, 4, 190, 183, 72, 21, 190, 163, 42, 156, 62, 250, 243, 25, 189, 127, 226, 62, 62, 255, 49, 206, 189, 224, 209, 158, 62, 32, 119, 66, 191, 127, 90, 222, 188, 187, 243, 40, 190, 160, 210, 224, 61, 9, 134, 33, 62, 100, 87, 28, 190, 76, 175, 169, 62, 130, 60, 242, 190, 143, 15, 75, 62, 6, 87, 2, 62, 81, 187, 130, 188, 105, 147, 82, 62, 149, 82, 154, 189, 228, 16, 5, 62, 86, 141, 96, 61, 182, 13, 102, 60, 73, 128, 225, 62, 102, 237, 178, 190, 143, 68, 175, 189, 101, 102, 175, 189, 160, 241, 212, 62, 235, 254, 161, 191, 5, 114, 208, 61, 82, 24, 88, 189, 91, 234, 159, 62, 37, 114, 207, 61, 19, 118, 125, 190, 34, 104, 167, 62, 182, 170, 136, 61, 54, 175, 144, 189, 252, 75, 249, 61, 249, 137, 81, 189, 219, 57, 246, 191, 225, 170, 10, 191, 191, 170, 144, 62, 80, 186, 212, 189, 119, 98, 105, 62, 96, 212, 162, 190, 10, 138, 149, 190, 138, 244, 229, 189, 220, 48, 73, 62, 64, 2, 67, 190, 26, 92, 129, 62, 57, 27, 139, 62, 141, 107, 49, 62, 103, 57, 116, 62, 153, 71, 29, 62, 159, 154, 176, 61, 46, 167, 16, 59, 14, 167, 185, 61, 68, 80, 97, 62, 216, 184, 149, 189, 189, 166, 96, 61, 195, 44, 209, 190, 28, 100, 125, 188, 189, 204, 22, 190, 8, 10, 243, 189, 217, 82, 3, 191, 183, 244, 59, 62, 72, 58, 230, 190, 210, 83, 204, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 99, 65, 98, 62, 199, 55, 181, 190, 174, 133, 37, 62, 12, 111, 166, 62, 16, 146, 30, 61, 75, 109, 36, 60, 176, 181, 190, 188, 41, 11, 192, 190, 98, 222, 203, 62, 65, 110, 140, 190, 201, 208, 67, 62, 83, 67, 44, 62, 103, 232, 20, 190, 87, 9, 38, 190, 206, 246, 51, 188, 214, 134, 141, 62, 13, 202, 1, 62, 47, 14, 124, 190, 119, 37, 89, 62, 69, 140, 169, 61, 220, 92, 248, 189, 49, 236, 131, 190, 110, 91, 214, 189, 99, 205, 121, 62, 44, 141, 253, 62, 135, 191, 18, 190, 9, 249, 191, 62, 89, 101, 132, 62, 210, 151, 251, 61, 240, 248, 54, 61, 95, 47, 221, 62, 244, 184, 204, 60, 64, 213, 14, 61, 166, 50, 100, 62, 103, 109, 69, 191, 244, 157, 232, 62, 139, 62, 125, 189, 144, 230, 192, 62, 150, 173, 132, 190, 65, 243, 178, 62, 242, 218, 97, 191, 15, 197, 115, 62, 0, 19, 159, 59, 88, 74, 255, 189, 119, 237, 150, 62, 222, 127, 177, 190, 127, 243, 23, 190, 91, 127, 46, 191, 140, 102, 13, 191, 82, 59, 38, 61, 177, 241, 184, 60, 115, 134, 233, 190, 58, 157, 137, 62, 118, 165, 161, 62, 152, 170, 141, 60, 48, 140, 46, 191, 12, 222, 79, 190, 63, 43, 185, 187, 29, 118, 202, 190, 115, 224, 78, 191, 128, 163, 38, 62, 177, 158, 23, 62, 223, 33, 68, 191, 67, 108, 236, 61, 236, 176, 0, 61, 87, 224, 36, 59, 74, 192, 35, 190, 98, 103, 217, 189, 49, 6, 106, 189, 185, 119, 167, 188, 28, 223, 37, 189, 254, 88, 150, 61, 66, 246, 127, 189, 143, 213, 0, 62, 246, 78, 119, 60, 206, 90, 211, 189, 87, 165, 158, 60, 22, 163, 14, 190, 237, 21, 156, 61, 89, 28, 232, 60, 117, 254, 234, 188, 78, 225, 130, 189, 212, 130, 19, 188, 167, 217, 213, 61, 6, 152, 254, 61, 38, 121, 158, 186, 139, 249, 7, 190, 160, 126, 222, 189, 98, 218, 178, 189, 94, 245, 70, 190, 182, 150, 135, 61, 111, 27, 147, 61, 166, 36, 35, 190, 239, 52, 246, 61, 63, 124, 21, 190, 220, 117, 15, 62, 202, 64, 160, 190, 0, 250, 135, 190, 30, 91, 51, 191, 8, 184, 192, 59, 221, 204, 41, 62, 21, 40, 213, 61, 231, 39, 138, 191, 147, 21, 139, 62, 245, 6, 18, 61, 154, 22, 152, 190, 206, 73, 8, 62, 67, 240, 78, 190, 72, 179, 48, 62, 136, 111, 174, 187, 59, 176, 97, 61, 186, 56, 50, 62, 253, 73, 217, 62, 88, 213, 58, 190, 22, 204, 157, 61, 190, 109, 62, 191, 18, 171, 240, 189, 84, 62, 130, 189, 160, 216, 200, 61, 247, 142, 0, 61, 93, 143, 139, 61, 11, 125, 240, 191, 245, 188, 241, 60, 87, 254, 66, 191, 77, 75, 32, 62, 213, 237, 67, 62, 248, 160, 61, 60, 165, 32, 190, 62, 73, 132, 179, 61, 20, 23, 3, 191, 15, 201, 175, 60, 167, 70, 253, 189, 222, 191, 78, 62, 36, 5, 32, 191, 148, 143, 69, 190, 6, 196, 185, 62, 5, 141, 22, 61, 140, 209, 242, 61, 146, 135, 243, 190, 104, 67, 237, 60, 162, 28, 63, 60, 135, 79, 109, 61, 127, 26, 72, 62, 1, 191, 5, 63, 128, 2, 179, 62, 131, 178, 166, 61, 215, 120, 47, 61, 54, 205, 128, 62, 211, 123, 31, 191, 209, 100, 116, 190, 84, 101, 175, 62, 230, 222, 163, 62, 141, 231, 134, 190, 147, 146, 4, 190, 51, 8, 140, 189, 189, 229, 10, 62, 247, 27, 224, 61, 49, 25, 3, 190, 236, 75, 112, 62, 174, 185, 54, 60, 243, 75, 138, 62, 151, 226, 200, 187, 43, 97, 34, 62, 195, 254, 25, 191, 64, 86, 250, 190, 114, 149, 86, 187, 75, 109, 58, 190, 104, 44, 152, 190, 71, 113, 34, 190, 43, 132, 250, 190, 230, 217, 177, 60, 36, 103, 98, 62, 61, 60, 140, 60, 162, 9, 144, 62, 183, 45, 99, 189, 102, 58, 111, 190, 45, 237, 167, 62, 213, 13, 30, 190, 183, 166, 183, 62, 44, 186, 98, 60, 33, 158, 90, 188, 109, 28, 190, 61, 151, 110, 62, 190, 143, 221, 166, 62, 82, 89, 181, 62, 2, 98, 150, 61, 198, 31, 3, 189, 133, 160, 109, 60, 146, 22, 27, 189, 23, 42, 26, 62, 251, 233, 128, 189, 70, 214, 28, 62, 192, 65, 129, 189, 133, 140, 212, 189, 0, 96, 222, 189, 137, 174, 209, 188, 192, 97, 39, 190, 106, 80, 41, 62, 126, 197, 81, 60, 181, 45, 30, 189, 127, 46, 158, 61, 40, 242, 240, 61, 208, 121, 17, 190, 238, 191, 51, 190, 41, 37, 89, 185, 101, 229, 240, 189, 204, 121, 239, 186, 168, 164, 226, 189, 62, 197, 92, 61, 19, 7, 16, 190, 81, 159, 173, 186, 77, 239, 9, 190, 206, 3, 128, 187, 31, 196, 121, 188, 1, 221, 41, 61, 80, 212, 252, 61, 154, 97, 164, 188, 32, 150, 92, 61, 138, 22, 184, 189, 192, 49, 217, 61, 197, 103, 255, 60, 3, 183, 31, 190, 1, 186, 90, 60, 117, 187, 35, 190, 158, 199, 130, 62, 56, 220, 99, 62, 206, 249, 146, 61, 77, 151, 32, 191, 87, 152, 209, 61, 245, 55, 69, 191, 236, 163, 95, 62, 204, 32, 213, 62, 16, 233, 154, 62, 132, 0, 185, 61, 221, 2, 29, 191, 227, 150, 189, 61, 144, 131, 174, 189, 205, 205, 172, 62, 46, 72, 104, 62, 250, 121, 81, 63, 47, 40, 153, 62, 124, 101, 83, 62, 88, 110, 51, 62, 223, 193, 175, 62, 60, 203, 59, 191, 106, 15, 49, 62, 108, 233, 145, 61, 203, 105, 110, 62, 232, 92, 108, 191, 31, 105, 169, 60, 26, 76, 241, 60, 138, 182, 226, 61, 61, 157, 41, 190, 219, 202, 147, 190, 60, 192, 56, 62, 138, 17, 22, 190, 9, 205, 135, 61, 115, 112, 244, 61, 209, 10, 36, 187, 11, 139, 101, 61, 121, 9, 89, 60, 123, 131, 172, 189, 80, 53, 233, 189, 224, 75, 48, 62, 229, 31, 5, 62, 120, 160, 11, 62, 245, 195, 21, 190, 239, 209, 18, 62, 146, 52, 84, 189, 175, 244, 174, 189, 164, 108, 94, 189, 106, 1, 71, 189, 42, 26, 175, 188, 166, 28, 175, 61, 22, 190, 62, 190, 77, 201, 34, 189, 39, 199, 19, 190, 67, 122, 220, 189, 172, 46, 127, 190, 168, 119, 189, 61, 55, 232, 120, 61, 19, 149, 211, 189, 29, 172, 174, 61, 227, 86, 149, 189, 45, 66, 113, 190, 23, 183, 214, 61, 58, 236, 197, 189, 3, 255, 128, 190, 32, 194, 72, 62, 200, 244, 112, 189, 37, 250, 144, 61, 120, 39, 130, 62, 117, 124, 86, 62, 168, 241, 13, 191, 66, 245, 211, 62, 156, 246, 34, 191, 136, 177, 163, 61, 52, 234, 56, 191, 166, 77, 50, 190, 67, 13, 205, 187, 185, 181, 165, 190, 212, 70, 214, 189, 235, 110, 202, 61, 68, 10, 131, 61, 159, 99, 68, 62, 148, 53, 146, 189, 227, 100, 174, 62, 113, 168, 255, 62, 200, 229, 89, 191, 253, 15, 38, 188, 40, 53, 124, 62, 255, 82, 43, 190, 221, 71, 196, 62, 198, 253, 194, 62, 123, 249, 173, 61, 130, 236, 199, 61, 211, 255, 161, 62, 34, 19, 249, 190, 65, 20, 61, 62, 8, 174, 159, 62, 9, 121, 181, 61, 68, 102, 224, 61, 241, 66, 42, 62, 48, 119, 79, 62, 217, 234, 73, 61, 15, 72, 80, 190, 99, 95, 177, 62, 71, 10, 113, 62, 149, 75, 209, 190, 205, 47, 150, 62, 229, 121, 112, 189, 54, 158, 148, 62, 51, 111, 213, 61, 70, 19, 9, 62, 88, 250, 135, 62, 248, 36, 152, 190, 143, 31, 123, 62, 187, 254, 106, 189, 106, 72, 36, 190, 164, 188, 106, 187, 66, 226, 234, 189, 101, 176, 148, 61, 141, 29, 125, 61, 35, 26, 54, 62, 53, 74, 246, 61, 107, 70, 166, 61, 17, 42, 109, 190, 235, 83, 3, 62, 217, 14, 4, 62, 193, 41, 122, 187, 99, 102, 12, 190, 121, 236, 145, 61, 228, 75, 160, 62, 195, 135, 50, 191, 194, 205, 91, 62, 221, 226, 35, 190, 88, 254, 95, 62, 188, 146, 63, 191, 102, 151, 187, 60, 123, 176, 179, 62, 181, 199, 134, 190, 42, 149, 82, 62, 5, 165, 186, 190, 167, 26, 130, 61, 143, 177, 43, 189, 39, 135, 119, 61, 150, 143, 128, 62, 130, 23, 226, 190, 76, 231, 118, 62, 139, 115, 84, 62, 163, 102, 37, 61, 74, 169, 82, 62, 34, 144, 241, 190, 244, 199, 167, 190, 7, 153, 77, 61, 128, 121, 165, 62, 222, 81, 219, 61, 194, 93, 2, 189, 121, 230, 210, 189, 71, 58, 192, 61, 28, 209, 78, 61, 148, 137, 176, 190, 209, 86, 98, 62, 0, 112, 176, 61, 224, 146, 173, 190, 237, 15, 128, 187, 116, 22, 131, 190, 165, 181, 178, 61, 126, 147, 91, 57, 166, 46, 136, 62, 128, 191, 1, 62, 88, 194, 124, 62, 249, 93, 122, 61, 180, 103, 58, 61, 162, 133, 178, 62, 132, 46, 33, 61, 167, 85, 98, 62, 100, 146, 15, 190, 184, 110, 57, 62, 17, 26, 2, 190, 46, 179, 121, 191, 45, 59, 132, 62, 159, 179, 197, 62, 178, 87, 172, 189, 238, 80, 240, 61, 121, 81, 109, 62, 112, 109, 14, 61, 177, 54, 203, 190, 34, 129, 58, 190, 140, 197, 233, 188, 122, 109, 230, 61, 188, 18, 64, 190, 152, 55, 162, 189, 25, 117, 201, 62, 53, 218, 196, 188, 5, 172, 209, 61, 136, 212, 65, 190, 223, 45, 148, 62, 1, 215, 136, 190, 151, 160, 198, 62, 195, 217, 200, 189, 112, 200, 165, 62, 48, 37, 162, 62, 207, 75, 183, 62, 0, 13, 97, 191, 119, 75, 235, 61, 185, 36, 116, 61, 23, 25, 104, 62, 24, 30, 67, 62, 63, 220, 40, 190, 4, 156, 143, 61, 111, 95, 248, 190, 100, 248, 198, 190, 84, 105, 188, 61, 241, 141, 144, 189, 137, 74, 54, 190, 153, 218, 193, 62, 19, 225, 129, 62, 40, 114, 126, 188, 101, 13, 228, 190, 63, 234, 149, 190, 58, 204, 78, 61, 149, 79, 194, 190, 26, 183, 72, 190, 204, 183, 17, 189, 103, 193, 208, 62, 115, 188, 29, 191, 35, 143, 235, 61, 235, 54, 131, 62, 4, 28, 97, 189, 102, 49, 234, 61, 207, 225, 65, 191, 116, 169, 45, 62, 14, 186, 36, 191, 81, 41, 133, 61, 10, 201, 167, 62, 175, 213, 209, 62, 54, 28, 83, 188, 226, 34, 1, 190, 53, 202, 146, 188, 69, 215, 221, 188, 147, 38, 79, 190, 52, 131, 56, 190, 26, 75, 210, 62, 121, 28, 134, 62, 184, 4, 41, 190, 189, 106, 141, 59, 60, 140, 90, 62, 2, 74, 252, 190, 72, 11, 5, 190, 140, 209, 49, 62, 209, 52, 250, 61, 156, 143, 28, 191, 63, 2, 102, 190, 191, 212, 160, 62, 209, 176, 35, 62, 70, 66, 122, 61, 107, 156, 145, 189, 84, 67, 224, 62, 89, 254, 123, 189, 179, 15, 252, 188, 201, 237, 8, 62, 207, 43, 40, 191, 75, 113, 144, 62, 222, 106, 114, 62, 240, 78, 101, 62, 147, 89, 142, 189, 8, 56, 143, 62, 126, 162, 78, 191, 248, 92, 129, 62, 247, 54, 168, 190, 120, 26, 43, 191, 1, 184, 201, 62, 4, 217, 164, 190, 130, 157, 199, 190, 227, 105, 199, 190, 209, 221, 105, 191, 228, 216, 71, 62, 179, 113, 218, 189, 129, 8, 130, 189, 78, 185, 72, 190, 185, 251, 78, 61, 86, 37, 128, 61, 253, 219, 18, 191, 71, 192, 86, 190, 218, 221, 237, 190, 85, 166, 144, 190, 1, 248, 150, 191, 232, 87, 233, 61, 246, 223, 78, 189, 133, 254, 38, 191, 52, 63, 174, 62, 13, 246, 56, 187, 26, 246, 185, 61, 188, 30, 30, 191, 42, 15, 199, 189, 137, 115, 17, 190, 127, 82, 30, 191, 105, 146, 216, 61, 131, 50, 113, 190, 102, 64, 209, 189, 190, 167, 143, 62, 1, 15, 91, 61, 123, 188, 193, 190, 237, 160, 128, 62, 131, 220, 87, 61, 29, 153, 27, 191, 34, 203, 215, 60, 133, 60, 235, 190, 162, 8, 81, 190, 162, 68, 66, 190, 102, 33, 63, 62, 53, 222, 18, 62, 81, 158, 50, 62, 94, 243, 31, 63, 46, 191, 190, 190, 5, 87, 89, 62, 100, 129, 232, 190, 111, 215, 177, 190, 90, 168, 236, 189, 95, 57, 165, 190, 17, 39, 236, 190, 41, 187, 139, 190, 65, 30, 78, 63, 188, 3, 75, 191, 104, 38, 24, 61, 3, 227, 4, 191, 202, 121, 91, 62, 101, 49, 106, 62, 239, 161, 28, 62, 225, 5, 121, 190, 184, 9, 177, 62, 41, 159, 84, 190, 52, 102, 140, 189, 145, 79, 59, 191, 153, 114, 19, 62, 191, 249, 21, 61, 242, 91, 87, 189, 158, 115, 197, 189, 16, 251, 177, 190, 36, 190, 170, 191, 92, 135, 100, 61, 7, 124, 187, 62, 55, 38, 15, 190, 7, 225, 59, 62, 187, 105, 200, 61, 38, 99, 218, 189, 145, 125, 113, 191, 151, 43, 203, 189, 83, 22, 105, 61, 108, 143, 95, 62, 65, 182, 37, 191, 33, 222, 27, 62, 242, 125, 176, 189, 217, 58, 183, 60, 45, 193, 91, 62, 194, 165, 28, 191, 155, 126, 160, 61, 164, 56, 10, 191, 192, 219, 153, 62, 241, 93, 184, 62, 173, 207, 109, 190, 63, 212, 187, 61, 120, 155, 199, 62, 45, 143, 196, 190, 166, 153, 24, 61, 229, 124, 94, 190, 46, 195, 33, 191, 27, 149, 68, 62, 167, 158, 221, 190, 221, 40, 107, 191, 168, 3, 62, 191, 9, 250, 80, 191, 120, 210, 152, 62, 73, 172, 143, 62, 43, 33, 169, 61, 85, 118, 132, 189, 31, 171, 33, 62, 41, 30, 146, 62, 4, 189, 163, 191, 212, 159, 248, 189, 164, 49, 242, 190, 62, 40, 135, 188, 4, 43, 239, 191, 181, 12, 9, 63, 63, 40, 46, 191, 199, 222, 220, 190, 28, 193, 212, 62, 221, 180, 75, 62, 55, 39, 159, 190, 85, 17, 86, 62, 246, 202, 27, 191, 125, 69, 170, 61, 81, 218, 178, 190, 215, 25, 37, 62, 48, 75, 233, 62, 109, 249, 104, 62, 142, 64, 74, 190, 27, 44, 216, 190, 24, 180, 120, 62, 74, 105, 130, 189, 65, 183, 45, 62, 202, 221, 135, 62, 0, 242, 35, 62, 204, 159, 184, 62, 100, 157, 243, 189, 37, 215, 242, 189, 197, 9, 157, 62, 97, 76, 89, 190, 93, 219, 66, 189, 231, 120, 21, 62, 217, 31, 179, 62, 94, 155, 4, 192, 150, 68, 247, 188, 134, 178, 233, 62, 160, 193, 17, 62, 108, 217, 142, 190, 18, 212, 50, 189, 81, 127, 192, 61, 187, 249, 207, 60, 153, 31, 125, 190, 98, 135, 144, 61, 165, 8, 143, 190, 216, 41, 57, 188, 36, 130, 159, 189, 77, 238, 145, 190, 141, 49, 40, 191, 79, 162, 147, 62, 108, 115, 250, 189, 102, 146, 49, 61, 57, 125, 121, 62, 34, 111, 200, 190, 93, 230, 95, 62, 229, 113, 136, 61, 6, 112, 245, 60, 69, 32, 152, 62, 255, 226, 159, 62, 243, 188, 202, 61, 152, 9, 147, 61, 130, 245, 100, 191, 73, 112, 153, 190, 72, 148, 54, 62, 110, 226, 157, 62, 86, 127, 118, 61, 237, 183, 244, 189, 206, 60, 0, 192, 61, 126, 216, 189, 31, 178, 245, 190, 126, 102, 108, 62, 50, 2, 113, 62, 125, 171, 149, 189, 45, 120, 97, 62, 81, 212, 25, 62, 145, 89, 5, 190, 32, 138, 106, 62, 94, 102, 90, 191, 61, 127, 149, 189, 45, 254, 59, 191, 1, 186, 159, 61, 102, 55, 2, 63, 207, 187, 5, 62, 102, 85, 167, 189, 198, 175, 54, 191, 57, 38, 39, 62, 63, 172, 154, 190, 186, 237, 239, 61, 191, 217, 50, 61, 177, 26, 211, 62, 50, 205, 146, 62, 54, 25, 209, 188, 41, 191, 168, 61, 220, 90, 12, 61, 226, 148, 18, 191, 224, 184, 11, 190, 225, 250, 159, 61, 201, 84, 152, 62, 75, 95, 26, 192, 9, 61, 130, 190, 6, 227, 40, 62, 112, 100, 173, 60, 159, 102, 17, 62, 91, 201, 184, 190, 73, 247, 229, 62, 173, 57, 54, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 89, 213, 190, 127, 8, 26, 190, 99, 91, 179, 189, 125, 72, 89, 62, 138, 60, 0, 61, 221, 219, 43, 62, 63, 158, 152, 62, 121, 51, 72, 62, 108, 170, 26, 62, 194, 170, 239, 189, 215, 229, 67, 190, 117, 17, 63, 62, 122, 33, 77, 190, 134, 128, 41, 62, 225, 147, 116, 62, 188, 69, 193, 189, 27, 35, 97, 60, 223, 2, 23, 62, 13, 116, 246, 189, 143, 104, 68, 62, 15, 195, 186, 189, 176, 49, 17, 62, 160, 66, 83, 187, 111, 245, 16, 62, 27, 240, 195, 61, 133, 140, 17, 62, 35, 89, 134, 61, 213, 238, 153, 62, 30, 37, 33, 62, 25, 209, 31, 62, 187, 173, 193, 61, 34, 85, 65, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 221, 128, 63, 177, 73, 92, 190, 176, 169, 248, 62, 196, 43, 123, 191, 122, 25, 116, 59, 169, 96, 33, 191, 254, 82, 232, 62, 63, 209, 248, 62, 127, 24, 138, 190, 36, 61, 140, 189, 98, 130, 133, 190, 101, 175, 55, 191, 119, 189, 205, 60, 66, 148, 134, 62, 18, 129, 128, 62, 223, 147, 117, 190, 21, 217, 77, 61, 73, 247, 47, 63, 245, 62, 147, 60, 58, 158, 80, 191, 251, 200, 141, 60, 82, 115, 3, 63, 240, 56, 116, 190, 7, 66, 233, 190, 50, 131, 235, 62, 74, 194, 75, 191, 46, 81, 206, 62, 158, 169, 179, 190, 39, 183, 146, 191, 191, 238, 185, 62, 70, 83, 5, 63, 241, 161, 95, 63, 204, 223, 206, 62, 200, 132, 216, 61, 177, 207, 226, 186, 188, 255, 114, 62, 121, 77, 51, 190, 94, 73, 160, 190, 48, 65, 161, 62, 72, 234, 173, 61, 155, 82, 16, 190, 163, 177, 127, 189, 55, 86, 240, 61, 186, 81, 60, 62, 82, 233, 180, 188, 149, 165, 193, 190, 95, 20, 122, 189, 131, 107, 43, 190, 113, 162, 238, 61, 94, 253, 97, 189, 2, 118, 12, 62, 255, 76, 116, 190, 216, 186, 80, 190, 253, 14, 204, 61, 181, 163, 37, 190, 213, 225, 160, 190, 67, 39, 78, 62, 215, 171, 203, 60, 65, 141, 132, 189, 68, 3, 50, 190, 216, 94, 202, 62, 137, 227, 74, 190, 245, 117, 145, 190, 109, 167, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 229, 3, 190, 151, 46, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 250, 12, 64, 142, 94, 178, 62, 178, 147, 240, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 149, 211, 191, 82, 22, 216, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}