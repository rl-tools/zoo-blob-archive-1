// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 165, 37, 191, 195, 129, 134, 62, 172, 15, 107, 63, 126, 71, 149, 190, 10, 178, 18, 63, 241, 48, 52, 190, 80, 14, 209, 190, 185, 254, 150, 63, 163, 204, 34, 63, 71, 41, 105, 190, 253, 114, 182, 191, 28, 148, 137, 190, 235, 93, 25, 188, 40, 194, 139, 191, 74, 159, 54, 190, 15, 77, 37, 63, 155, 220, 189, 63, 14, 208, 194, 62, 134, 198, 138, 191, 118, 138, 151, 61, 48, 136, 197, 60, 33, 153, 30, 63, 178, 172, 167, 62, 224, 60, 247, 61, 95, 21, 117, 63, 47, 230, 24, 191, 131, 19, 197, 190, 113, 250, 42, 191, 147, 214, 30, 191, 10, 9, 172, 190, 210, 174, 171, 62, 121, 51, 24, 191, 212, 14, 121, 63, 86, 251, 254, 188, 165, 88, 105, 63, 151, 148, 39, 63, 233, 106, 68, 190, 211, 34, 211, 62, 171, 195, 4, 191, 71, 192, 41, 188, 159, 208, 47, 63, 80, 116, 233, 190, 157, 89, 29, 62, 105, 142, 18, 63, 168, 72, 62, 62, 137, 60, 2, 63, 251, 215, 29, 190, 2, 148, 53, 190, 45, 150, 195, 190, 181, 32, 129, 191, 168, 204, 196, 62, 246, 112, 217, 60, 100, 101, 90, 190, 102, 78, 16, 189, 204, 45, 92, 62, 190, 130, 164, 190, 141, 24, 226, 58, 145, 137, 130, 191, 251, 215, 134, 63, 14, 21, 47, 62, 157, 57, 64, 63, 60, 193, 167, 63, 118, 9, 10, 63, 32, 106, 211, 189, 47, 46, 88, 63, 115, 168, 211, 190, 227, 51, 164, 190, 80, 200, 72, 191, 137, 59, 52, 61, 140, 199, 4, 61, 12, 103, 77, 191, 221, 186, 42, 63, 225, 241, 221, 189, 120, 108, 159, 191, 136, 229, 112, 190, 210, 245, 246, 189, 192, 6, 215, 63, 232, 135, 151, 62, 11, 122, 69, 63, 87, 21, 25, 191, 243, 199, 185, 190, 70, 33, 77, 188, 3, 223, 141, 63, 142, 160, 116, 62, 216, 2, 236, 189, 32, 150, 191, 191, 116, 230, 122, 60, 241, 39, 219, 62, 138, 87, 104, 63, 81, 12, 60, 63, 127, 71, 185, 62, 216, 192, 189, 191, 193, 1, 164, 190, 247, 69, 144, 189, 56, 146, 87, 191, 134, 23, 46, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 167, 18, 191, 131, 61, 44, 190, 205, 214, 160, 190, 209, 47, 143, 190, 167, 18, 140, 62, 244, 242, 30, 190, 190, 229, 31, 63, 242, 148, 171, 62, 103, 15, 151, 191, 85, 5, 251, 188, 29, 19, 81, 190, 115, 120, 13, 62, 249, 64, 207, 61, 96, 21, 29, 62, 225, 43, 159, 62, 12, 50, 35, 191, 235, 69, 127, 190, 243, 92, 34, 62, 126, 87, 94, 62, 254, 69, 158, 62, 54, 153, 225, 190, 142, 191, 240, 62, 1, 165, 196, 62, 154, 172, 77, 190, 59, 221, 159, 190, 143, 114, 60, 62, 82, 230, 48, 191, 148, 42, 10, 62, 218, 6, 69, 62, 47, 84, 155, 61, 250, 194, 201, 60, 130, 47, 12, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 92, 144, 190, 80, 242, 111, 62, 243, 206, 149, 61, 72, 48, 130, 189, 29, 98, 86, 191, 196, 135, 239, 62, 212, 186, 243, 61, 13, 5, 35, 62, 133, 175, 226, 189, 157, 113, 147, 60, 235, 236, 84, 59, 144, 100, 88, 62, 207, 16, 250, 60, 174, 156, 107, 62, 232, 145, 158, 189, 223, 191, 93, 190, 133, 209, 93, 190, 1, 116, 38, 191, 38, 180, 145, 191, 239, 181, 111, 61, 187, 238, 223, 62, 53, 74, 159, 189, 84, 170, 42, 190, 196, 28, 149, 190, 101, 16, 194, 189, 84, 25, 99, 62, 85, 62, 54, 191, 41, 146, 65, 62, 58, 73, 163, 190, 42, 83, 155, 62, 117, 117, 170, 190, 249, 228, 238, 190, 98, 251, 1, 62, 124, 23, 172, 188, 71, 92, 114, 189, 105, 152, 167, 190, 45, 176, 239, 190, 199, 163, 203, 62, 67, 166, 17, 189, 179, 51, 201, 60, 69, 24, 110, 191, 66, 124, 55, 191, 142, 184, 97, 62, 121, 144, 49, 62, 252, 129, 193, 189, 175, 210, 8, 62, 55, 150, 42, 62, 189, 218, 119, 191, 108, 243, 89, 62, 155, 206, 97, 60, 50, 161, 209, 60, 192, 171, 172, 190, 162, 170, 23, 62, 107, 26, 27, 61, 165, 190, 42, 189, 247, 196, 144, 188, 147, 49, 162, 62, 122, 135, 3, 189, 24, 177, 218, 190, 48, 242, 244, 189, 51, 0, 177, 189, 61, 248, 48, 62, 229, 76, 212, 190, 119, 2, 144, 61, 169, 82, 96, 190, 84, 215, 4, 190, 185, 159, 44, 190, 135, 154, 43, 61, 93, 20, 48, 61, 129, 69, 202, 190, 186, 246, 4, 191, 110, 110, 140, 62, 168, 181, 215, 188, 227, 165, 54, 62, 131, 177, 223, 188, 79, 7, 115, 190, 95, 183, 14, 61, 114, 157, 231, 188, 29, 195, 253, 61, 131, 56, 38, 62, 18, 57, 38, 62, 30, 161, 61, 62, 219, 115, 105, 62, 21, 38, 178, 191, 12, 22, 5, 191, 19, 155, 59, 62, 232, 168, 156, 189, 8, 211, 95, 61, 99, 89, 237, 189, 217, 103, 6, 192, 205, 212, 23, 189, 144, 59, 14, 191, 26, 30, 134, 62, 137, 40, 164, 61, 118, 155, 168, 62, 229, 207, 83, 62, 241, 163, 6, 189, 84, 145, 50, 62, 209, 19, 164, 62, 152, 136, 91, 62, 204, 80, 230, 190, 183, 13, 236, 190, 132, 238, 225, 62, 83, 28, 250, 190, 102, 244, 136, 191, 149, 55, 35, 190, 219, 25, 163, 61, 242, 75, 121, 189, 242, 67, 208, 61, 82, 79, 34, 62, 233, 215, 89, 62, 115, 149, 81, 191, 175, 20, 165, 189, 151, 126, 156, 60, 202, 171, 47, 189, 240, 85, 5, 63, 124, 79, 158, 191, 19, 191, 234, 61, 251, 67, 123, 189, 66, 64, 234, 189, 27, 228, 166, 185, 52, 164, 144, 62, 142, 87, 175, 190, 240, 230, 58, 62, 49, 247, 46, 191, 66, 17, 30, 191, 63, 249, 173, 190, 98, 166, 123, 190, 116, 221, 8, 190, 79, 129, 165, 61, 9, 237, 29, 62, 116, 132, 132, 62, 108, 14, 45, 61, 49, 119, 223, 189, 58, 57, 254, 189, 247, 237, 196, 61, 197, 229, 11, 188, 141, 128, 52, 190, 50, 84, 46, 189, 105, 127, 196, 61, 76, 14, 251, 61, 170, 186, 230, 188, 205, 192, 189, 189, 65, 32, 163, 189, 104, 66, 41, 189, 77, 193, 28, 62, 227, 96, 106, 189, 231, 111, 51, 62, 221, 205, 158, 60, 33, 238, 140, 62, 137, 75, 135, 62, 240, 18, 237, 188, 109, 104, 13, 190, 8, 253, 176, 189, 216, 15, 250, 61, 174, 187, 217, 61, 52, 33, 109, 62, 159, 233, 220, 189, 240, 126, 60, 59, 129, 252, 135, 61, 130, 15, 193, 190, 147, 196, 21, 62, 119, 223, 128, 191, 23, 6, 146, 62, 101, 49, 236, 189, 154, 97, 145, 62, 165, 86, 234, 187, 61, 58, 204, 62, 99, 41, 38, 191, 112, 176, 2, 62, 220, 220, 194, 62, 145, 73, 155, 59, 208, 2, 138, 62, 229, 192, 15, 190, 0, 45, 124, 60, 180, 85, 16, 191, 155, 247, 252, 190, 218, 104, 209, 189, 95, 34, 134, 61, 102, 0, 182, 189, 244, 236, 187, 60, 68, 165, 158, 62, 112, 110, 129, 188, 41, 228, 33, 62, 93, 170, 146, 190, 57, 188, 47, 188, 120, 165, 111, 190, 116, 178, 217, 190, 200, 183, 138, 190, 127, 68, 106, 61, 57, 198, 73, 191, 170, 216, 158, 61, 57, 59, 184, 62, 211, 106, 28, 191, 171, 28, 100, 62, 83, 228, 208, 190, 2, 128, 117, 187, 228, 53, 29, 191, 138, 37, 124, 187, 182, 4, 125, 62, 129, 69, 189, 189, 188, 100, 227, 190, 207, 148, 221, 190, 153, 18, 215, 61, 242, 8, 133, 190, 94, 0, 62, 62, 181, 31, 21, 189, 175, 40, 5, 62, 202, 33, 185, 62, 46, 130, 90, 62, 236, 73, 116, 61, 37, 48, 140, 62, 37, 151, 79, 191, 84, 234, 62, 190, 227, 54, 86, 189, 167, 16, 238, 62, 14, 29, 197, 190, 103, 208, 110, 61, 192, 165, 80, 62, 3, 99, 252, 61, 117, 196, 17, 190, 214, 220, 41, 190, 178, 244, 163, 62, 134, 26, 66, 189, 208, 61, 75, 62, 149, 177, 27, 190, 9, 102, 171, 62, 136, 182, 47, 191, 98, 138, 162, 60, 73, 66, 36, 190, 62, 35, 58, 62, 204, 184, 31, 62, 248, 49, 134, 190, 2, 235, 165, 62, 239, 193, 254, 190, 8, 206, 51, 62, 38, 28, 169, 61, 220, 89, 60, 189, 130, 27, 77, 62, 244, 65, 59, 190, 131, 153, 62, 62, 38, 201, 111, 61, 95, 6, 200, 60, 54, 83, 8, 63, 102, 233, 196, 190, 44, 38, 206, 189, 173, 166, 180, 188, 186, 152, 231, 62, 44, 127, 156, 191, 33, 222, 200, 61, 135, 247, 158, 189, 99, 169, 188, 62, 64, 29, 55, 62, 185, 149, 134, 190, 104, 126, 181, 62, 110, 207, 2, 62, 252, 102, 169, 189, 50, 163, 9, 62, 20, 20, 186, 189, 234, 53, 248, 191, 8, 117, 17, 191, 241, 143, 142, 62, 102, 55, 17, 190, 178, 0, 109, 62, 186, 251, 97, 190, 55, 96, 154, 190, 74, 213, 116, 189, 186, 78, 109, 62, 15, 127, 53, 190, 218, 29, 129, 62, 209, 40, 143, 62, 107, 177, 138, 62, 243, 150, 103, 62, 197, 204, 32, 62, 250, 134, 168, 61, 228, 214, 152, 189, 212, 175, 3, 62, 32, 177, 84, 62, 30, 33, 135, 189, 194, 59, 85, 61, 77, 134, 224, 190, 213, 243, 85, 188, 180, 19, 24, 190, 50, 193, 54, 190, 241, 38, 6, 191, 141, 167, 84, 62, 46, 80, 246, 190, 123, 213, 201, 189, 101, 148, 166, 188, 242, 97, 0, 62, 0, 128, 191, 188, 229, 30, 185, 189, 65, 206, 147, 60, 40, 3, 216, 189, 138, 211, 10, 59, 169, 82, 217, 189, 247, 227, 21, 190, 151, 106, 16, 190, 85, 33, 197, 189, 88, 122, 210, 61, 59, 243, 41, 190, 208, 128, 5, 62, 184, 236, 255, 189, 107, 84, 25, 190, 239, 232, 175, 188, 181, 179, 153, 61, 135, 84, 238, 189, 129, 220, 28, 188, 84, 118, 53, 189, 112, 210, 175, 187, 31, 117, 201, 188, 166, 27, 94, 188, 140, 189, 29, 190, 6, 182, 131, 61, 253, 158, 162, 61, 30, 79, 220, 189, 122, 65, 197, 61, 219, 13, 8, 190, 73, 128, 204, 188, 64, 32, 217, 61, 139, 49, 93, 62, 23, 246, 205, 190, 36, 228, 73, 62, 60, 244, 143, 62, 216, 123, 25, 189, 81, 128, 192, 61, 142, 64, 108, 189, 190, 150, 195, 190, 208, 101, 153, 62, 247, 95, 173, 190, 137, 138, 68, 62, 106, 228, 63, 62, 207, 126, 97, 190, 138, 45, 110, 190, 143, 156, 101, 60, 67, 130, 84, 62, 238, 43, 251, 61, 232, 158, 158, 190, 168, 49, 25, 62, 135, 213, 132, 61, 165, 112, 42, 189, 48, 191, 161, 190, 115, 153, 14, 190, 150, 116, 123, 62, 54, 212, 230, 62, 74, 223, 80, 189, 207, 166, 129, 62, 26, 128, 177, 62, 161, 200, 166, 61, 144, 48, 140, 61, 193, 28, 176, 62, 54, 96, 138, 59, 89, 84, 92, 62, 39, 226, 133, 62, 57, 4, 90, 191, 175, 68, 225, 62, 222, 163, 199, 189, 139, 29, 178, 62, 234, 13, 131, 190, 21, 107, 170, 62, 203, 66, 84, 191, 145, 108, 131, 62, 88, 30, 234, 61, 195, 249, 163, 189, 128, 32, 166, 62, 62, 134, 166, 190, 199, 87, 34, 190, 147, 2, 24, 191, 244, 211, 220, 190, 27, 15, 238, 60, 229, 4, 176, 186, 46, 38, 7, 191, 167, 182, 146, 62, 211, 225, 166, 62, 109, 240, 94, 59, 106, 53, 76, 191, 126, 33, 91, 190, 241, 135, 253, 59, 208, 90, 204, 190, 149, 13, 110, 191, 147, 203, 228, 61, 25, 61, 29, 62, 88, 18, 78, 191, 162, 172, 162, 61, 236, 176, 0, 61, 87, 224, 36, 59, 74, 192, 35, 190, 98, 103, 217, 189, 49, 6, 106, 189, 185, 119, 167, 188, 28, 223, 37, 189, 254, 88, 150, 61, 66, 246, 127, 189, 143, 213, 0, 62, 246, 78, 119, 60, 206, 90, 211, 189, 87, 165, 158, 60, 22, 163, 14, 190, 237, 21, 156, 61, 89, 28, 232, 60, 117, 254, 234, 188, 78, 225, 130, 189, 212, 130, 19, 188, 167, 217, 213, 61, 6, 152, 254, 61, 38, 121, 158, 186, 139, 249, 7, 190, 160, 126, 222, 189, 98, 218, 178, 189, 94, 245, 70, 190, 182, 150, 135, 61, 111, 27, 147, 61, 166, 36, 35, 190, 239, 52, 246, 61, 63, 124, 21, 190, 220, 117, 15, 62, 8, 231, 138, 190, 1, 70, 203, 190, 107, 13, 45, 191, 88, 62, 177, 58, 37, 82, 65, 62, 45, 28, 145, 61, 232, 149, 151, 191, 237, 36, 138, 62, 210, 55, 178, 61, 50, 108, 154, 190, 121, 116, 208, 61, 41, 33, 119, 190, 221, 120, 85, 62, 135, 154, 129, 61, 244, 6, 249, 60, 64, 122, 55, 62, 126, 74, 202, 62, 95, 205, 52, 190, 128, 157, 192, 61, 229, 92, 54, 191, 98, 123, 56, 190, 166, 187, 156, 188, 255, 107, 154, 61, 128, 175, 80, 61, 183, 134, 148, 61, 159, 3, 8, 192, 158, 168, 218, 61, 85, 216, 82, 191, 67, 27, 38, 62, 85, 200, 46, 62, 187, 91, 83, 61, 25, 45, 183, 62, 240, 92, 241, 61, 96, 163, 35, 191, 42, 189, 143, 60, 212, 32, 250, 189, 91, 232, 123, 62, 232, 166, 35, 191, 32, 66, 86, 190, 125, 77, 193, 62, 52, 5, 223, 61, 66, 17, 13, 62, 126, 194, 249, 190, 37, 53, 60, 60, 236, 228, 87, 60, 218, 163, 177, 61, 221, 117, 60, 62, 46, 8, 7, 63, 206, 18, 173, 62, 111, 109, 206, 61, 161, 76, 155, 61, 160, 124, 149, 62, 229, 122, 43, 191, 65, 6, 87, 190, 153, 142, 178, 62, 168, 98, 185, 62, 120, 213, 133, 190, 176, 11, 142, 190, 56, 103, 218, 60, 194, 61, 148, 61, 213, 27, 19, 62, 192, 153, 8, 190, 117, 200, 146, 62, 108, 199, 202, 60, 45, 118, 128, 62, 53, 233, 161, 59, 73, 194, 6, 62, 54, 16, 27, 191, 137, 131, 0, 191, 210, 152, 181, 188, 157, 69, 98, 190, 7, 107, 136, 190, 13, 125, 149, 189, 163, 82, 0, 191, 149, 25, 219, 60, 94, 22, 93, 62, 52, 204, 7, 61, 166, 65, 151, 62, 101, 88, 115, 189, 132, 255, 23, 190, 235, 168, 150, 62, 152, 122, 3, 190, 187, 201, 205, 62, 210, 242, 85, 189, 185, 248, 96, 188, 117, 192, 203, 61, 133, 41, 77, 190, 208, 169, 166, 62, 107, 87, 178, 62, 25, 205, 33, 61, 55, 252, 4, 60, 217, 234, 229, 188, 20, 65, 75, 189, 43, 237, 27, 62, 139, 174, 67, 189, 172, 64, 9, 62, 192, 65, 129, 189, 133, 140, 212, 189, 0, 96, 222, 189, 137, 174, 209, 188, 192, 97, 39, 190, 106, 80, 41, 62, 126, 197, 81, 60, 181, 45, 30, 189, 127, 46, 158, 61, 40, 242, 240, 61, 208, 121, 17, 190, 238, 191, 51, 190, 41, 37, 89, 185, 101, 229, 240, 189, 204, 121, 239, 186, 168, 164, 226, 189, 62, 197, 92, 61, 19, 7, 16, 190, 81, 159, 173, 186, 77, 239, 9, 190, 206, 3, 128, 187, 31, 196, 121, 188, 1, 221, 41, 61, 80, 212, 252, 61, 154, 97, 164, 188, 32, 150, 92, 61, 138, 22, 184, 189, 192, 49, 217, 61, 197, 103, 255, 60, 3, 183, 31, 190, 1, 186, 90, 60, 117, 187, 35, 190, 178, 244, 97, 62, 16, 244, 68, 62, 194, 237, 185, 59, 189, 219, 15, 191, 200, 89, 23, 62, 176, 101, 68, 191, 166, 55, 112, 62, 133, 132, 211, 62, 225, 42, 156, 62, 247, 5, 216, 61, 189, 56, 61, 191, 211, 134, 104, 186, 219, 76, 211, 189, 15, 55, 165, 62, 63, 87, 83, 62, 165, 179, 69, 63, 90, 104, 172, 62, 149, 22, 95, 62, 247, 222, 67, 62, 154, 136, 161, 62, 51, 152, 70, 191, 100, 136, 44, 62, 63, 160, 188, 61, 142, 53, 115, 62, 1, 72, 95, 191, 0, 170, 56, 189, 222, 164, 88, 61, 56, 237, 208, 61, 96, 12, 245, 189, 161, 26, 173, 190, 79, 246, 96, 62, 95, 140, 10, 190, 9, 205, 135, 61, 115, 112, 244, 61, 209, 10, 36, 187, 11, 139, 101, 61, 121, 9, 89, 60, 123, 131, 172, 189, 80, 53, 233, 189, 224, 75, 48, 62, 229, 31, 5, 62, 120, 160, 11, 62, 245, 195, 21, 190, 239, 209, 18, 62, 146, 52, 84, 189, 175, 244, 174, 189, 164, 108, 94, 189, 106, 1, 71, 189, 42, 26, 175, 188, 166, 28, 175, 61, 22, 190, 62, 190, 77, 201, 34, 189, 39, 199, 19, 190, 67, 122, 220, 189, 172, 46, 127, 190, 168, 119, 189, 61, 55, 232, 120, 61, 19, 149, 211, 189, 29, 172, 174, 61, 227, 86, 149, 189, 45, 66, 113, 190, 23, 183, 214, 61, 58, 236, 197, 189, 3, 255, 128, 190, 174, 104, 246, 61, 85, 123, 183, 188, 102, 177, 113, 61, 35, 224, 123, 62, 171, 200, 78, 62, 134, 82, 253, 190, 133, 89, 223, 62, 245, 232, 43, 191, 123, 181, 62, 189, 147, 85, 65, 191, 219, 39, 41, 190, 138, 9, 51, 189, 180, 68, 182, 190, 36, 133, 251, 189, 118, 87, 22, 62, 130, 103, 226, 188, 201, 45, 106, 62, 28, 160, 172, 189, 191, 171, 165, 62, 249, 45, 253, 62, 91, 21, 109, 191, 183, 204, 73, 188, 20, 240, 135, 62, 169, 243, 14, 190, 237, 63, 191, 62, 227, 184, 232, 62, 74, 49, 117, 189, 46, 163, 40, 62, 253, 88, 171, 62, 36, 15, 6, 191, 203, 136, 42, 62, 151, 216, 176, 62, 82, 18, 85, 61, 98, 27, 210, 61, 238, 82, 24, 62, 37, 214, 127, 62, 121, 242, 198, 61, 66, 223, 86, 190, 161, 114, 208, 62, 120, 141, 115, 62, 81, 171, 219, 190, 221, 17, 156, 62, 6, 206, 177, 189, 163, 171, 135, 62, 89, 16, 225, 61, 7, 243, 26, 62, 151, 244, 133, 62, 53, 144, 167, 190, 56, 63, 131, 62, 160, 67, 2, 189, 250, 71, 15, 190, 222, 202, 20, 61, 204, 133, 27, 190, 174, 198, 210, 61, 212, 168, 200, 61, 86, 13, 46, 62, 94, 176, 36, 62, 10, 56, 197, 61, 249, 11, 94, 190, 166, 23, 30, 62, 133, 65, 52, 62, 180, 153, 10, 189, 108, 204, 199, 189, 70, 74, 198, 61, 91, 59, 166, 62, 153, 142, 80, 191, 252, 220, 80, 62, 161, 22, 86, 190, 111, 122, 116, 62, 215, 82, 72, 191, 98, 36, 228, 188, 15, 169, 184, 62, 89, 19, 237, 189, 129, 146, 30, 62, 145, 229, 203, 190, 215, 95, 222, 60, 236, 63, 113, 189, 127, 194, 175, 61, 37, 15, 109, 62, 87, 230, 142, 190, 74, 242, 98, 62, 108, 250, 89, 62, 92, 22, 129, 61, 112, 32, 120, 62, 212, 160, 10, 191, 144, 231, 152, 190, 235, 27, 46, 61, 131, 130, 169, 62, 137, 213, 110, 61, 39, 232, 79, 190, 162, 193, 59, 60, 51, 118, 68, 61, 56, 79, 126, 61, 214, 226, 187, 190, 18, 193, 129, 62, 54, 233, 165, 61, 66, 47, 159, 190, 9, 253, 157, 60, 47, 92, 137, 190, 100, 224, 197, 60, 247, 4, 135, 189, 176, 26, 135, 62, 119, 228, 4, 62, 211, 200, 117, 62, 156, 155, 62, 60, 194, 9, 12, 61, 67, 233, 219, 62, 173, 70, 191, 61, 203, 141, 110, 62, 59, 162, 8, 190, 75, 160, 62, 62, 153, 237, 224, 189, 247, 29, 123, 191, 243, 63, 111, 62, 124, 223, 180, 62, 136, 246, 214, 189, 157, 68, 37, 62, 124, 97, 106, 62, 59, 175, 254, 59, 86, 1, 204, 190, 83, 14, 116, 190, 45, 237, 77, 187, 1, 16, 142, 61, 139, 22, 100, 190, 188, 166, 34, 190, 109, 8, 214, 62, 110, 98, 191, 189, 55, 195, 161, 61, 60, 67, 38, 190, 227, 35, 163, 62, 200, 81, 143, 190, 93, 250, 188, 62, 191, 189, 7, 190, 55, 107, 167, 62, 71, 106, 160, 62, 107, 214, 183, 62, 140, 200, 86, 191, 124, 48, 248, 61, 227, 101, 12, 62, 54, 86, 144, 62, 172, 99, 93, 62, 96, 73, 22, 190, 7, 208, 164, 61, 125, 191, 207, 190, 226, 16, 197, 190, 148, 83, 180, 61, 61, 220, 168, 189, 250, 48, 92, 190, 32, 214, 219, 62, 93, 212, 133, 62, 174, 142, 70, 188, 129, 72, 223, 190, 96, 129, 156, 190, 222, 147, 145, 61, 70, 18, 195, 190, 42, 82, 113, 190, 96, 199, 120, 189, 136, 101, 225, 62, 157, 77, 38, 191, 72, 103, 231, 61, 136, 128, 144, 62, 235, 52, 60, 190, 208, 165, 3, 62, 103, 19, 76, 191, 24, 62, 22, 62, 211, 84, 60, 191, 112, 0, 96, 61, 154, 93, 140, 62, 32, 217, 208, 62, 76, 209, 62, 189, 246, 171, 63, 190, 235, 252, 151, 189, 245, 7, 106, 189, 127, 102, 90, 190, 183, 168, 129, 190, 139, 24, 194, 62, 78, 154, 124, 62, 46, 122, 93, 190, 62, 80, 20, 189, 57, 179, 132, 62, 235, 175, 29, 191, 229, 164, 30, 190, 55, 67, 15, 62, 65, 67, 249, 61, 28, 145, 39, 191, 51, 105, 213, 190, 200, 94, 181, 62, 53, 207, 19, 62, 60, 62, 40, 61, 142, 246, 17, 190, 143, 161, 216, 62, 102, 209, 173, 189, 196, 18, 81, 189, 62, 220, 12, 62, 207, 43, 40, 191, 242, 17, 146, 62, 165, 3, 125, 62, 200, 52, 100, 62, 213, 245, 94, 189, 206, 138, 145, 62, 124, 6, 93, 191, 112, 189, 134, 62, 247, 54, 168, 190, 112, 56, 43, 191, 174, 20, 204, 62, 92, 225, 161, 190, 100, 122, 196, 190, 201, 155, 216, 190, 65, 12, 129, 191, 173, 221, 68, 62, 251, 132, 250, 189, 98, 130, 223, 187, 78, 185, 72, 190, 193, 40, 97, 61, 189, 176, 41, 61, 28, 177, 26, 191, 118, 83, 80, 190, 182, 199, 231, 190, 42, 252, 153, 190, 60, 89, 132, 191, 42, 248, 254, 61, 246, 223, 78, 189, 242, 42, 37, 191, 32, 159, 149, 62, 221, 13, 63, 62, 17, 21, 147, 61, 52, 223, 29, 191, 77, 122, 182, 189, 121, 222, 18, 190, 212, 187, 33, 191, 24, 248, 255, 61, 63, 123, 165, 190, 191, 137, 168, 189, 178, 70, 142, 62, 1, 163, 132, 61, 221, 253, 125, 190, 184, 249, 104, 62, 166, 89, 193, 60, 227, 66, 32, 191, 114, 98, 24, 60, 157, 163, 212, 190, 0, 100, 95, 190, 35, 202, 110, 190, 51, 218, 127, 62, 53, 222, 18, 62, 251, 195, 21, 62, 254, 245, 37, 63, 253, 75, 182, 190, 149, 222, 92, 62, 118, 215, 249, 190, 100, 62, 183, 190, 27, 39, 128, 189, 162, 64, 170, 190, 6, 87, 241, 190, 37, 231, 149, 190, 89, 72, 81, 63, 32, 105, 80, 191, 233, 46, 108, 61, 147, 93, 36, 191, 207, 142, 11, 62, 244, 133, 43, 62, 146, 223, 7, 62, 243, 164, 128, 190, 237, 23, 175, 62, 34, 71, 129, 190, 56, 235, 168, 189, 119, 105, 18, 191, 115, 202, 62, 62, 86, 91, 63, 61, 191, 203, 57, 189, 132, 44, 192, 189, 239, 191, 169, 190, 115, 48, 184, 191, 19, 234, 23, 61, 235, 0, 174, 62, 176, 255, 87, 190, 76, 140, 78, 62, 173, 220, 199, 61, 30, 103, 32, 190, 35, 158, 149, 191, 61, 239, 43, 190, 200, 89, 94, 61, 196, 184, 49, 62, 149, 122, 65, 191, 50, 46, 118, 61, 97, 162, 142, 189, 18, 206, 43, 189, 36, 43, 27, 62, 217, 63, 68, 191, 80, 149, 185, 61, 126, 178, 9, 191, 109, 196, 142, 62, 131, 161, 190, 62, 98, 174, 89, 190, 113, 95, 232, 61, 201, 88, 217, 62, 87, 206, 5, 191, 24, 127, 8, 61, 23, 185, 138, 188, 30, 254, 34, 191, 88, 81, 63, 62, 23, 6, 222, 190, 17, 23, 85, 191, 18, 103, 94, 191, 101, 231, 43, 191, 6, 112, 158, 62, 146, 238, 150, 62, 203, 50, 142, 61, 35, 50, 200, 189, 94, 107, 28, 62, 58, 209, 185, 62, 60, 84, 143, 191, 91, 188, 18, 190, 127, 52, 38, 191, 36, 52, 161, 189, 93, 81, 237, 191, 106, 127, 26, 63, 239, 67, 33, 191, 232, 8, 220, 190, 235, 29, 4, 63, 186, 214, 57, 62, 127, 109, 170, 190, 107, 189, 94, 62, 186, 111, 30, 191, 88, 246, 237, 61, 165, 148, 180, 190, 2, 58, 86, 62, 203, 168, 231, 62, 249, 173, 7, 62, 81, 200, 68, 190, 155, 128, 239, 190, 1, 177, 82, 62, 74, 102, 168, 189, 173, 182, 44, 62, 189, 3, 131, 62, 154, 157, 113, 61, 70, 112, 190, 62, 177, 179, 240, 189, 142, 7, 224, 189, 18, 182, 192, 62, 180, 148, 132, 190, 81, 34, 11, 189, 59, 65, 32, 62, 246, 122, 181, 62, 40, 158, 3, 192, 109, 187, 4, 189, 135, 119, 231, 62, 8, 16, 61, 62, 29, 16, 124, 190, 118, 151, 142, 189, 122, 52, 0, 62, 96, 207, 49, 61, 28, 70, 54, 190, 161, 154, 49, 61, 172, 14, 94, 190, 214, 78, 119, 59, 24, 220, 60, 189, 83, 209, 151, 190, 75, 253, 47, 191, 124, 89, 150, 62, 226, 115, 179, 189, 7, 199, 57, 61, 141, 23, 126, 62, 98, 80, 202, 190, 48, 14, 80, 62, 148, 179, 75, 61, 192, 141, 176, 60, 164, 147, 135, 62, 198, 41, 155, 62, 224, 178, 218, 61, 226, 22, 195, 61, 219, 238, 117, 191, 209, 208, 169, 190, 238, 211, 41, 62, 13, 215, 150, 62, 202, 84, 215, 61, 234, 154, 205, 189, 135, 248, 9, 192, 64, 245, 126, 189, 141, 86, 249, 190, 155, 231, 123, 62, 54, 127, 121, 62, 186, 116, 1, 189, 20, 83, 99, 62, 158, 182, 9, 62, 203, 57, 118, 190, 200, 190, 91, 62, 41, 112, 95, 191, 67, 19, 151, 189, 106, 145, 70, 191, 19, 2, 145, 61, 49, 34, 248, 62, 84, 158, 114, 61, 197, 204, 182, 189, 71, 117, 89, 191, 70, 217, 159, 61, 57, 76, 176, 190, 73, 93, 203, 61, 20, 55, 225, 58, 122, 49, 173, 62, 191, 189, 142, 62, 153, 204, 61, 189, 188, 123, 148, 61, 54, 71, 247, 60, 236, 228, 39, 191, 173, 203, 11, 190, 13, 198, 185, 60, 67, 165, 152, 62, 176, 150, 27, 192, 91, 45, 194, 190, 107, 15, 53, 62, 88, 253, 225, 188, 38, 174, 221, 61, 132, 192, 214, 190, 163, 91, 234, 62, 200, 146, 211, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 108, 227, 190, 32, 22, 91, 190, 196, 134, 177, 189, 96, 8, 115, 62, 166, 176, 50, 61, 250, 230, 30, 62, 222, 80, 154, 62, 251, 248, 88, 62, 179, 39, 18, 62, 194, 170, 239, 189, 209, 162, 106, 190, 200, 141, 44, 62, 122, 33, 77, 190, 206, 23, 45, 62, 203, 110, 133, 62, 33, 86, 168, 189, 27, 35, 97, 60, 97, 216, 28, 62, 13, 116, 246, 189, 210, 215, 82, 62, 94, 174, 130, 189, 28, 42, 33, 62, 172, 145, 160, 188, 208, 0, 11, 62, 115, 127, 73, 61, 75, 36, 26, 62, 65, 251, 253, 60, 130, 161, 146, 62, 252, 228, 68, 62, 41, 143, 43, 62, 253, 187, 195, 61, 134, 33, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 5, 133, 63, 219, 180, 133, 190, 79, 32, 19, 63, 121, 72, 134, 191, 152, 228, 20, 60, 116, 127, 39, 191, 239, 239, 16, 63, 77, 59, 8, 63, 193, 33, 133, 190, 36, 61, 140, 189, 241, 221, 126, 190, 80, 178, 62, 191, 119, 189, 205, 60, 213, 124, 150, 62, 102, 72, 158, 62, 39, 72, 107, 190, 21, 217, 77, 61, 187, 33, 46, 63, 245, 62, 147, 60, 204, 216, 87, 191, 165, 69, 23, 60, 197, 195, 18, 63, 118, 181, 124, 190, 172, 169, 244, 190, 81, 31, 25, 63, 137, 248, 83, 191, 124, 158, 197, 62, 202, 119, 168, 190, 186, 94, 137, 191, 211, 196, 185, 62, 195, 147, 13, 63, 126, 221, 119, 63, 41, 25, 187, 62, 53, 1, 250, 61, 194, 156, 141, 189, 217, 151, 132, 62, 253, 64, 71, 190, 24, 162, 150, 190, 224, 51, 149, 62, 246, 50, 108, 61, 10, 54, 31, 190, 163, 177, 127, 189, 113, 44, 241, 61, 162, 243, 107, 62, 82, 233, 180, 188, 87, 80, 214, 190, 179, 19, 220, 189, 202, 242, 30, 190, 113, 162, 238, 61, 150, 92, 172, 189, 2, 118, 12, 62, 63, 239, 155, 190, 241, 133, 105, 190, 138, 161, 124, 61, 27, 119, 43, 190, 151, 82, 157, 190, 114, 206, 47, 62, 253, 225, 95, 61, 142, 232, 144, 189, 66, 91, 62, 190, 241, 34, 203, 62, 168, 32, 94, 190, 66, 241, 193, 190, 58, 105, 87, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 37, 240, 189, 144, 112, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 81, 147, 61, 26, 237, 191, 190, 119, 230, 63, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 31, 209, 63, 210, 113, 150, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0060/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}