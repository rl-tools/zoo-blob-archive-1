// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 111, 100, 63, 193, 59, 109, 63, 204, 60, 205, 62, 116, 38, 231, 189, 45, 231, 98, 190, 254, 105, 141, 190, 150, 205, 168, 190, 55, 114, 87, 191, 235, 210, 76, 190, 20, 8, 86, 189, 68, 157, 193, 62, 21, 199, 26, 191, 227, 213, 104, 190, 96, 84, 14, 62, 57, 209, 25, 63, 169, 172, 171, 62, 218, 6, 207, 61, 4, 69, 181, 62, 39, 223, 161, 62, 204, 158, 47, 63, 123, 219, 10, 190, 154, 189, 34, 63, 126, 136, 188, 190, 13, 14, 52, 190, 244, 99, 80, 62, 118, 105, 230, 190, 197, 145, 79, 190, 221, 0, 68, 63, 204, 201, 22, 191, 242, 78, 20, 191, 148, 19, 14, 61, 78, 119, 255, 190, 244, 115, 192, 62, 71, 123, 212, 190, 74, 25, 28, 191, 109, 51, 136, 190, 137, 228, 217, 190, 204, 73, 57, 63, 49, 46, 139, 190, 11, 192, 193, 189, 209, 196, 21, 191, 140, 242, 188, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 249, 12, 96, 190, 73, 92, 26, 191, 149, 210, 10, 62, 19, 120, 23, 63, 36, 98, 22, 63, 66, 13, 131, 62, 24, 149, 153, 62, 28, 224, 94, 191, 66, 188, 207, 189, 251, 11, 220, 62, 98, 157, 76, 191, 120, 98, 69, 190, 147, 250, 26, 63, 182, 101, 149, 189, 123, 132, 5, 63, 91, 177, 136, 190, 84, 240, 155, 190, 143, 154, 43, 63, 141, 40, 17, 62, 124, 35, 151, 62, 170, 191, 151, 62, 245, 248, 128, 62, 34, 172, 48, 191, 150, 224, 172, 62, 29, 106, 73, 63, 219, 133, 18, 63, 77, 190, 154, 61, 73, 67, 25, 191, 163, 46, 100, 63, 240, 96, 222, 61, 138, 48, 134, 62, 173, 226, 141, 191, 108, 78, 247, 190, 144, 28, 228, 189, 52, 65, 14, 190, 172, 113, 254, 187, 76, 60, 115, 62, 124, 187, 100, 62, 164, 175, 180, 190, 188, 40, 80, 63, 6, 198, 10, 191, 142, 93, 153, 190, 223, 226, 203, 62, 70, 239, 78, 63, 202, 1, 168, 61, 171, 125, 235, 190, 71, 71, 169, 62, 194, 52, 68, 62, 111, 171, 98, 190, 39, 195, 252, 62, 207, 68, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 57, 63, 191, 31, 44, 124, 190, 22, 221, 124, 190, 66, 173, 216, 189, 179, 51, 135, 188, 182, 164, 10, 63, 164, 155, 38, 61, 111, 163, 143, 62, 233, 182, 166, 188, 144, 36, 159, 62, 212, 61, 104, 61, 8, 185, 169, 190, 115, 107, 85, 190, 76, 123, 61, 187, 53, 32, 19, 191, 29, 40, 8, 63, 144, 18, 52, 191, 140, 37, 123, 190, 27, 199, 205, 189, 36, 115, 13, 62, 5, 83, 148, 190, 166, 50, 57, 190, 97, 168, 129, 62, 187, 209, 232, 62, 80, 223, 255, 62, 199, 10, 201, 62, 46, 106, 116, 190, 214, 35, 78, 62, 199, 244, 21, 191, 105, 95, 160, 62, 7, 182, 162, 62, 192, 234, 205, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 129, 139, 190, 157, 242, 51, 61, 67, 247, 135, 191, 112, 39, 187, 190, 253, 28, 195, 61, 68, 39, 255, 61, 28, 157, 119, 189, 102, 12, 160, 62, 54, 197, 113, 60, 103, 160, 99, 60, 68, 169, 68, 190, 4, 162, 138, 191, 230, 30, 151, 62, 29, 152, 56, 191, 179, 179, 39, 62, 225, 3, 120, 62, 211, 168, 83, 191, 87, 157, 65, 61, 164, 212, 138, 62, 37, 221, 141, 61, 194, 17, 220, 188, 250, 71, 74, 190, 161, 6, 163, 188, 156, 139, 105, 189, 9, 27, 17, 62, 174, 165, 127, 190, 194, 221, 3, 61, 167, 92, 159, 190, 156, 18, 137, 190, 254, 175, 239, 189, 230, 60, 245, 61, 208, 102, 225, 61, 39, 218, 192, 62, 151, 203, 157, 190, 210, 126, 208, 61, 254, 52, 220, 62, 121, 26, 182, 189, 220, 171, 65, 189, 208, 182, 87, 60, 54, 28, 162, 189, 182, 255, 99, 190, 205, 226, 2, 190, 5, 224, 89, 62, 210, 139, 14, 61, 18, 168, 17, 189, 227, 123, 65, 61, 158, 209, 163, 61, 130, 178, 40, 62, 249, 106, 200, 62, 150, 214, 221, 190, 38, 195, 155, 191, 182, 35, 132, 61, 173, 22, 245, 188, 84, 230, 137, 62, 153, 82, 35, 190, 218, 119, 179, 62, 71, 250, 17, 190, 74, 230, 194, 190, 212, 102, 78, 188, 69, 126, 156, 62, 136, 148, 239, 190, 78, 47, 178, 61, 95, 108, 95, 190, 242, 149, 209, 189, 131, 133, 200, 190, 27, 24, 138, 189, 80, 72, 13, 189, 99, 139, 148, 189, 33, 127, 163, 189, 11, 121, 50, 62, 209, 199, 105, 62, 70, 4, 145, 189, 184, 123, 216, 61, 65, 205, 136, 62, 224, 4, 13, 190, 126, 126, 0, 190, 152, 254, 180, 190, 83, 253, 142, 188, 93, 0, 72, 61, 165, 33, 217, 61, 13, 211, 30, 191, 165, 95, 152, 189, 92, 220, 156, 60, 29, 207, 157, 189, 191, 47, 164, 62, 218, 224, 40, 190, 177, 151, 150, 188, 41, 205, 152, 61, 143, 43, 176, 190, 254, 190, 151, 61, 15, 250, 13, 62, 157, 95, 112, 189, 62, 197, 54, 62, 150, 115, 192, 58, 124, 140, 188, 189, 3, 212, 178, 189, 229, 54, 183, 61, 40, 176, 80, 62, 18, 242, 125, 190, 251, 10, 255, 61, 242, 209, 132, 187, 77, 88, 189, 61, 130, 192, 2, 191, 74, 106, 24, 62, 22, 175, 158, 62, 247, 109, 33, 189, 71, 132, 231, 188, 59, 151, 161, 190, 142, 252, 136, 190, 45, 187, 230, 60, 4, 251, 12, 61, 198, 113, 139, 190, 249, 45, 39, 190, 198, 3, 236, 62, 199, 103, 3, 63, 3, 62, 100, 189, 198, 15, 28, 62, 113, 136, 19, 190, 14, 126, 37, 60, 94, 80, 75, 190, 112, 83, 85, 191, 160, 85, 91, 62, 244, 0, 145, 61, 176, 132, 36, 62, 56, 140, 192, 62, 172, 40, 68, 191, 109, 143, 108, 190, 197, 132, 172, 61, 192, 2, 234, 190, 114, 166, 181, 62, 220, 166, 135, 191, 19, 182, 40, 61, 122, 62, 206, 61, 11, 211, 49, 62, 216, 224, 164, 61, 79, 211, 183, 62, 13, 97, 114, 190, 68, 222, 198, 189, 220, 23, 191, 190, 1, 168, 25, 191, 0, 8, 27, 63, 234, 184, 230, 190, 189, 73, 46, 190, 56, 210, 53, 62, 113, 106, 129, 191, 245, 191, 76, 62, 70, 147, 186, 62, 130, 53, 170, 189, 19, 145, 45, 62, 166, 158, 161, 190, 40, 231, 82, 62, 187, 5, 48, 190, 138, 162, 66, 62, 127, 255, 15, 191, 71, 163, 85, 189, 136, 37, 45, 190, 27, 67, 33, 191, 141, 213, 113, 189, 16, 137, 80, 62, 88, 171, 98, 60, 198, 88, 163, 190, 173, 25, 228, 188, 29, 31, 22, 189, 54, 67, 114, 61, 111, 21, 143, 60, 76, 23, 38, 62, 14, 66, 122, 61, 248, 110, 118, 62, 245, 208, 37, 61, 170, 1, 111, 62, 235, 64, 158, 189, 34, 121, 18, 190, 50, 147, 164, 190, 215, 163, 156, 60, 43, 90, 208, 61, 206, 3, 73, 62, 222, 119, 120, 191, 79, 89, 197, 60, 211, 196, 134, 62, 190, 24, 240, 61, 7, 184, 20, 61, 11, 204, 250, 189, 63, 97, 248, 61, 225, 155, 143, 62, 234, 83, 46, 191, 88, 76, 4, 62, 222, 24, 218, 189, 5, 18, 83, 189, 234, 87, 162, 59, 210, 92, 16, 190, 138, 161, 123, 190, 146, 117, 106, 190, 253, 27, 33, 190, 201, 40, 86, 190, 112, 199, 254, 188, 83, 88, 74, 190, 142, 162, 158, 190, 255, 117, 215, 190, 57, 53, 8, 190, 180, 31, 105, 189, 247, 93, 82, 189, 122, 107, 173, 59, 153, 200, 147, 62, 227, 71, 153, 190, 110, 168, 82, 61, 149, 0, 109, 188, 171, 251, 37, 190, 168, 101, 76, 62, 126, 166, 240, 61, 203, 92, 177, 189, 183, 211, 252, 61, 146, 223, 224, 190, 145, 168, 242, 189, 204, 192, 81, 61, 55, 40, 3, 190, 109, 113, 128, 62, 173, 3, 209, 61, 53, 140, 189, 61, 123, 100, 220, 61, 179, 23, 99, 190, 151, 220, 188, 189, 61, 51, 158, 188, 157, 198, 100, 62, 12, 34, 159, 61, 196, 109, 211, 60, 134, 215, 120, 190, 199, 230, 222, 61, 180, 84, 183, 61, 9, 49, 145, 189, 0, 77, 116, 62, 71, 209, 182, 61, 239, 186, 88, 62, 219, 102, 133, 190, 114, 26, 177, 189, 16, 251, 101, 61, 158, 66, 150, 62, 12, 248, 249, 189, 71, 255, 9, 62, 57, 40, 15, 62, 67, 213, 25, 62, 60, 137, 222, 189, 254, 162, 25, 191, 43, 190, 79, 191, 88, 248, 251, 61, 50, 20, 217, 189, 100, 29, 81, 188, 236, 232, 16, 62, 23, 218, 159, 62, 35, 163, 238, 61, 106, 127, 225, 189, 14, 77, 186, 61, 247, 186, 93, 62, 8, 94, 27, 191, 200, 139, 131, 62, 26, 49, 23, 62, 152, 229, 198, 188, 80, 23, 125, 190, 184, 89, 1, 190, 187, 207, 22, 62, 191, 204, 72, 62, 24, 169, 145, 190, 5, 61, 157, 190, 179, 173, 133, 61, 103, 176, 114, 188, 69, 153, 254, 189, 30, 42, 231, 60, 90, 5, 80, 62, 102, 104, 135, 62, 26, 240, 209, 61, 35, 242, 28, 188, 227, 245, 246, 59, 229, 188, 168, 62, 9, 101, 39, 189, 217, 224, 83, 190, 28, 182, 180, 190, 210, 34, 60, 190, 170, 52, 146, 190, 106, 117, 158, 190, 15, 220, 237, 190, 67, 103, 148, 189, 134, 4, 200, 62, 115, 254, 160, 60, 93, 237, 54, 62, 22, 132, 155, 61, 125, 44, 167, 190, 75, 12, 59, 62, 20, 120, 60, 62, 48, 40, 162, 189, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 75, 74, 38, 189, 84, 238, 58, 190, 198, 71, 53, 191, 173, 131, 190, 190, 35, 247, 59, 190, 237, 155, 158, 189, 93, 141, 206, 189, 39, 24, 142, 187, 49, 32, 165, 189, 187, 182, 143, 190, 251, 223, 217, 190, 22, 30, 62, 191, 141, 44, 221, 62, 50, 15, 15, 191, 34, 5, 45, 190, 65, 37, 12, 189, 201, 45, 30, 62, 199, 163, 164, 190, 114, 155, 53, 62, 111, 88, 184, 189, 11, 118, 216, 60, 220, 170, 190, 190, 198, 18, 146, 190, 10, 146, 17, 61, 174, 59, 168, 62, 109, 238, 103, 191, 90, 36, 180, 61, 236, 221, 198, 190, 129, 59, 108, 60, 204, 223, 51, 62, 65, 170, 45, 62, 84, 50, 76, 62, 121, 100, 181, 189, 208, 142, 129, 189, 51, 63, 135, 191, 62, 167, 195, 189, 149, 204, 203, 189, 52, 40, 129, 189, 25, 18, 7, 191, 232, 142, 196, 190, 128, 14, 126, 188, 134, 25, 106, 190, 145, 251, 247, 189, 47, 125, 73, 191, 131, 70, 248, 61, 27, 55, 66, 191, 236, 243, 29, 190, 162, 68, 70, 62, 172, 97, 157, 190, 155, 101, 229, 61, 216, 154, 176, 190, 133, 111, 83, 190, 100, 23, 89, 62, 207, 34, 195, 61, 82, 201, 199, 59, 64, 224, 18, 191, 167, 141, 177, 62, 74, 118, 137, 191, 142, 94, 183, 61, 141, 97, 0, 60, 46, 126, 188, 189, 27, 182, 136, 190, 221, 128, 0, 188, 106, 228, 67, 62, 4, 222, 209, 190, 210, 66, 237, 188, 14, 157, 213, 189, 27, 132, 73, 62, 127, 60, 170, 190, 169, 174, 104, 190, 239, 9, 73, 62, 206, 173, 172, 61, 79, 92, 143, 60, 91, 224, 174, 60, 201, 28, 87, 61, 89, 195, 187, 189, 248, 138, 155, 190, 161, 42, 68, 62, 106, 164, 250, 61, 235, 230, 23, 60, 200, 201, 53, 191, 16, 233, 143, 190, 6, 143, 52, 61, 175, 69, 48, 190, 221, 178, 157, 61, 199, 255, 107, 190, 156, 195, 125, 188, 43, 197, 119, 61, 65, 83, 189, 190, 42, 226, 96, 62, 9, 79, 231, 61, 15, 88, 65, 62, 46, 96, 183, 188, 140, 106, 228, 61, 152, 82, 135, 62, 67, 241, 161, 61, 111, 188, 204, 61, 212, 191, 21, 62, 124, 47, 5, 62, 162, 178, 12, 61, 106, 120, 192, 61, 204, 39, 60, 61, 28, 152, 96, 61, 163, 116, 176, 60, 29, 55, 156, 189, 247, 250, 203, 189, 137, 83, 239, 60, 84, 175, 196, 62, 131, 148, 117, 190, 254, 239, 133, 62, 230, 23, 128, 59, 148, 159, 20, 62, 30, 208, 249, 60, 230, 113, 142, 189, 187, 194, 205, 190, 191, 248, 53, 62, 193, 183, 8, 190, 19, 230, 24, 190, 205, 138, 179, 61, 5, 139, 51, 61, 252, 26, 253, 188, 231, 104, 124, 62, 227, 57, 9, 61, 174, 28, 117, 62, 159, 189, 11, 190, 33, 59, 236, 189, 247, 40, 160, 60, 212, 129, 29, 62, 34, 61, 173, 62, 223, 28, 117, 189, 214, 243, 155, 62, 253, 168, 16, 61, 217, 255, 25, 190, 30, 88, 245, 187, 40, 84, 31, 61, 197, 119, 86, 190, 173, 42, 249, 189, 167, 146, 103, 190, 83, 48, 46, 62, 3, 5, 57, 62, 62, 2, 55, 62, 56, 45, 123, 62, 8, 68, 207, 188, 178, 37, 122, 62, 83, 103, 88, 189, 170, 58, 12, 191, 205, 165, 83, 191, 30, 10, 153, 62, 246, 6, 252, 190, 206, 75, 128, 62, 198, 240, 110, 189, 198, 178, 120, 62, 49, 176, 126, 62, 61, 152, 14, 61, 228, 219, 66, 190, 209, 107, 150, 61, 69, 186, 196, 190, 68, 140, 81, 62, 175, 225, 140, 190, 234, 28, 168, 186, 183, 89, 125, 61, 93, 169, 166, 189, 117, 252, 8, 62, 161, 101, 75, 61, 3, 138, 147, 61, 105, 113, 144, 61, 30, 62, 177, 189, 44, 189, 180, 62, 124, 114, 197, 61, 51, 87, 54, 62, 121, 47, 140, 190, 96, 186, 236, 188, 154, 107, 80, 189, 3, 180, 251, 189, 191, 188, 31, 190, 204, 84, 166, 62, 199, 65, 71, 190, 159, 200, 27, 190, 121, 103, 24, 190, 22, 33, 96, 62, 110, 162, 118, 190, 68, 234, 38, 190, 249, 81, 100, 190, 119, 116, 81, 62, 208, 107, 11, 62, 43, 79, 58, 62, 170, 199, 184, 61, 227, 216, 142, 60, 74, 194, 182, 190, 174, 228, 2, 62, 104, 174, 179, 189, 182, 83, 92, 188, 239, 175, 228, 61, 254, 237, 87, 61, 111, 22, 130, 191, 40, 191, 171, 190, 119, 228, 99, 62, 179, 77, 87, 61, 171, 39, 178, 189, 116, 178, 155, 189, 12, 77, 191, 189, 130, 15, 252, 188, 8, 97, 18, 190, 111, 95, 113, 191, 74, 239, 238, 62, 252, 159, 13, 191, 6, 21, 13, 189, 59, 195, 139, 189, 38, 2, 53, 189, 4, 183, 8, 62, 80, 62, 235, 62, 86, 71, 9, 190, 129, 187, 7, 61, 76, 23, 255, 61, 216, 222, 201, 61, 121, 189, 72, 60, 100, 158, 81, 62, 251, 97, 20, 190, 21, 40, 255, 61, 116, 24, 17, 191, 146, 176, 246, 188, 123, 19, 158, 189, 125, 48, 41, 62, 56, 188, 25, 62, 129, 0, 130, 189, 84, 180, 255, 61, 65, 175, 226, 189, 42, 204, 17, 189, 109, 80, 205, 189, 123, 75, 154, 189, 160, 249, 56, 61, 208, 24, 136, 189, 200, 59, 8, 190, 119, 206, 21, 60, 116, 36, 221, 189, 231, 194, 144, 189, 28, 197, 43, 60, 247, 224, 221, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 73, 19, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 97, 120, 25, 61, 165, 53, 31, 190, 196, 33, 248, 61, 152, 199, 161, 189, 4, 79, 178, 61, 47, 108, 239, 189, 2, 211, 176, 189, 82, 192, 233, 189, 114, 233, 27, 190, 32, 71, 236, 190, 118, 106, 10, 190, 6, 39, 67, 190, 81, 136, 239, 189, 42, 219, 58, 189, 224, 18, 116, 61, 7, 196, 205, 61, 253, 236, 92, 62, 176, 89, 249, 61, 159, 214, 144, 62, 232, 41, 243, 59, 28, 18, 252, 190, 202, 143, 138, 190, 52, 119, 113, 188, 214, 71, 232, 188, 2, 199, 223, 61, 134, 142, 135, 191, 253, 106, 172, 59, 200, 135, 64, 61, 62, 239, 15, 60, 216, 21, 144, 62, 175, 88, 75, 190, 147, 51, 113, 189, 186, 75, 189, 61, 41, 29, 211, 190, 197, 178, 22, 62, 82, 185, 167, 189, 118, 137, 42, 188, 178, 238, 194, 188, 241, 155, 12, 190, 119, 255, 145, 60, 131, 205, 172, 188, 224, 91, 246, 190, 51, 219, 63, 190, 119, 136, 122, 189, 77, 236, 64, 62, 80, 151, 142, 189, 209, 219, 6, 62, 49, 186, 51, 62, 87, 53, 123, 62, 218, 52, 205, 61, 235, 134, 24, 62, 202, 148, 117, 62, 44, 248, 166, 190, 9, 93, 164, 190, 37, 115, 6, 189, 181, 111, 11, 190, 83, 205, 5, 62, 41, 1, 97, 191, 135, 22, 249, 61, 18, 149, 182, 62, 180, 198, 29, 190, 115, 46, 11, 62, 190, 59, 62, 190, 72, 64, 17, 62, 251, 7, 124, 61, 109, 25, 82, 191, 174, 84, 126, 62, 182, 231, 186, 189, 69, 252, 163, 189, 181, 244, 150, 62, 230, 100, 141, 190, 176, 204, 255, 60, 185, 110, 40, 189, 77, 177, 115, 189, 7, 80, 237, 61, 79, 206, 133, 61, 154, 246, 72, 189, 184, 214, 127, 189, 141, 46, 69, 189, 241, 250, 104, 61, 187, 229, 211, 62, 121, 41, 52, 61, 167, 43, 137, 60, 3, 119, 99, 189, 180, 12, 165, 61, 104, 233, 194, 189, 98, 167, 29, 62, 220, 182, 146, 59, 252, 175, 251, 61, 252, 223, 87, 190, 81, 218, 85, 61, 113, 96, 192, 190, 226, 192, 103, 62, 177, 69, 221, 188, 44, 195, 64, 190, 7, 70, 47, 62, 64, 211, 92, 62, 47, 199, 44, 189, 51, 236, 223, 189, 7, 147, 36, 190, 246, 13, 114, 62, 22, 202, 157, 190, 96, 65, 17, 60, 105, 244, 106, 189, 160, 128, 167, 61, 20, 180, 32, 62, 199, 217, 97, 189, 175, 155, 128, 62, 222, 168, 15, 62, 150, 178, 4, 191, 31, 170, 205, 61, 164, 23, 36, 59, 44, 56, 10, 58, 46, 171, 54, 61, 127, 18, 241, 61, 1, 34, 43, 190, 213, 5, 252, 61, 169, 21, 170, 190, 132, 71, 88, 62, 185, 71, 64, 189, 12, 28, 140, 62, 66, 159, 111, 190, 100, 28, 71, 61, 148, 60, 28, 191, 32, 0, 54, 62, 222, 248, 212, 190, 112, 46, 103, 190, 240, 245, 181, 189, 230, 36, 88, 62, 211, 96, 13, 62, 240, 39, 208, 189, 26, 178, 77, 187, 222, 145, 140, 188, 236, 169, 21, 191, 205, 47, 75, 62, 243, 187, 144, 190, 21, 22, 204, 188, 212, 129, 197, 187, 86, 40, 199, 61, 204, 234, 114, 191, 233, 223, 215, 190, 255, 252, 89, 62, 133, 8, 20, 62, 179, 73, 244, 189, 83, 11, 209, 189, 107, 177, 45, 62, 194, 83, 98, 190, 110, 201, 61, 189, 254, 250, 59, 191, 32, 88, 187, 62, 105, 52, 60, 191, 36, 191, 163, 189, 102, 174, 54, 61, 174, 179, 42, 61, 156, 85, 148, 62, 47, 142, 241, 62, 29, 144, 40, 190, 148, 201, 84, 61, 116, 150, 4, 189, 3, 90, 174, 189, 24, 217, 126, 189, 1, 211, 54, 62, 85, 110, 46, 191, 173, 28, 196, 189, 212, 102, 169, 190, 164, 130, 248, 190, 178, 90, 135, 62, 224, 226, 38, 62, 139, 69, 52, 62, 158, 50, 160, 190, 14, 59, 59, 189, 151, 62, 118, 189, 71, 209, 100, 190, 103, 165, 154, 61, 86, 127, 251, 57, 28, 189, 57, 190, 215, 207, 184, 62, 162, 84, 49, 62, 122, 251, 142, 187, 244, 115, 66, 61, 64, 119, 140, 190, 174, 174, 166, 189, 5, 63, 138, 189, 240, 156, 124, 189, 211, 43, 80, 62, 55, 95, 28, 191, 62, 57, 212, 62, 109, 223, 140, 62, 186, 21, 247, 189, 50, 73, 178, 61, 224, 72, 22, 190, 55, 154, 109, 61, 205, 181, 208, 190, 254, 214, 183, 190, 85, 177, 60, 61, 238, 47, 154, 59, 84, 21, 163, 190, 172, 123, 126, 190, 183, 121, 149, 190, 251, 30, 22, 190, 252, 225, 168, 61, 135, 70, 40, 62, 247, 111, 219, 61, 251, 124, 68, 189, 90, 194, 220, 61, 29, 163, 175, 189, 3, 141, 48, 62, 75, 152, 134, 62, 236, 100, 53, 61, 99, 88, 27, 190, 7, 175, 130, 61, 227, 247, 16, 62, 122, 95, 192, 190, 81, 156, 42, 187, 21, 140, 241, 189, 95, 0, 246, 189, 227, 244, 146, 188, 52, 133, 4, 62, 215, 153, 113, 62, 218, 45, 171, 190, 151, 183, 56, 62, 226, 32, 26, 62, 130, 224, 227, 188, 50, 41, 58, 60, 237, 11, 11, 189, 226, 40, 69, 190, 151, 41, 46, 190, 204, 73, 8, 189, 140, 55, 155, 60, 90, 24, 169, 189, 201, 222, 135, 189, 102, 38, 50, 190, 30, 149, 92, 189, 92, 78, 53, 191, 157, 203, 20, 187, 237, 193, 193, 190, 133, 147, 53, 190, 61, 159, 156, 61, 169, 195, 178, 61, 182, 155, 117, 60, 44, 43, 154, 62, 214, 91, 72, 61, 125, 182, 93, 62, 226, 226, 133, 190, 43, 126, 28, 191, 14, 193, 252, 188, 75, 47, 8, 190, 110, 49, 225, 189, 34, 82, 12, 62, 47, 51, 74, 191, 38, 249, 2, 62, 158, 132, 217, 62, 169, 90, 51, 190, 193, 72, 127, 62, 213, 112, 224, 59, 137, 144, 53, 62, 192, 163, 219, 189, 230, 106, 172, 190, 186, 99, 209, 61, 94, 89, 201, 61, 211, 207, 240, 188, 247, 200, 69, 62, 232, 10, 227, 189, 67, 182, 130, 61, 118, 70, 133, 61, 222, 24, 80, 187, 221, 165, 129, 189, 239, 80, 1, 62, 62, 155, 210, 60, 181, 238, 118, 61, 91, 90, 156, 61, 53, 7, 167, 61, 83, 55, 208, 62, 255, 167, 46, 60, 25, 58, 57, 61, 146, 134, 56, 61, 70, 199, 136, 190, 124, 164, 58, 189, 218, 150, 1, 61, 162, 252, 247, 189, 80, 189, 44, 62, 191, 125, 196, 190, 135, 109, 225, 189, 192, 50, 45, 190, 225, 48, 56, 189, 168, 93, 17, 188, 36, 151, 230, 188, 197, 179, 193, 189, 201, 170, 25, 62, 216, 138, 165, 188, 148, 7, 41, 62, 61, 167, 143, 188, 88, 73, 67, 189, 212, 107, 52, 190, 132, 178, 158, 188, 161, 116, 46, 190, 62, 142, 230, 61, 4, 117, 197, 190, 60, 45, 113, 189, 151, 135, 51, 191, 226, 100, 142, 59, 71, 236, 149, 61, 2, 177, 54, 62, 169, 250, 37, 62, 34, 201, 103, 62, 5, 120, 136, 189, 158, 251, 119, 62, 39, 30, 44, 189, 232, 172, 53, 191, 14, 129, 17, 62, 98, 95, 145, 189, 28, 142, 176, 188, 15, 41, 92, 62, 229, 151, 112, 191, 241, 140, 253, 190, 157, 174, 109, 60, 0, 201, 25, 190, 36, 146, 54, 61, 55, 230, 135, 190, 128, 151, 124, 62, 28, 181, 207, 189, 164, 19, 129, 190, 255, 237, 123, 189, 253, 109, 195, 189, 73, 141, 224, 189, 210, 193, 178, 61, 7, 94, 12, 190, 49, 42, 4, 60, 34, 158, 37, 190, 151, 44, 91, 189, 101, 58, 250, 189, 149, 97, 159, 62, 30, 235, 245, 61, 206, 6, 248, 190, 22, 109, 132, 189, 155, 74, 199, 188, 79, 82, 88, 189, 87, 73, 60, 190, 123, 21, 136, 190, 253, 0, 6, 189, 37, 4, 44, 62, 24, 168, 44, 190, 243, 25, 119, 62, 215, 69, 189, 61, 150, 52, 133, 62, 121, 222, 46, 190, 4, 29, 253, 187, 80, 9, 9, 191, 136, 147, 101, 62, 213, 214, 236, 190, 201, 117, 140, 61, 94, 177, 88, 190, 181, 226, 175, 62, 245, 102, 118, 62, 219, 120, 251, 61, 209, 171, 130, 61, 47, 41, 192, 61, 111, 188, 217, 190, 146, 3, 160, 62, 3, 125, 38, 190, 153, 173, 163, 188, 227, 201, 150, 188, 220, 97, 4, 62, 9, 25, 22, 190, 22, 246, 84, 188, 237, 81, 171, 61, 42, 236, 5, 61, 35, 12, 165, 189, 208, 166, 135, 56, 108, 18, 73, 189, 100, 114, 115, 190, 55, 51, 88, 62, 122, 242, 159, 190, 192, 190, 185, 189, 194, 11, 154, 189, 131, 142, 171, 61, 20, 77, 215, 61, 16, 124, 147, 62, 20, 133, 9, 190, 98, 230, 132, 190, 251, 49, 27, 61, 172, 79, 202, 61, 53, 157, 44, 189, 68, 205, 126, 62, 238, 226, 103, 59, 237, 159, 28, 191, 250, 4, 215, 190, 140, 209, 62, 189, 33, 196, 76, 190, 84, 138, 134, 60, 56, 251, 246, 190, 5, 87, 138, 189, 26, 122, 13, 61, 102, 253, 208, 189, 151, 34, 240, 60, 246, 40, 126, 189, 233, 236, 172, 189, 89, 227, 252, 61, 171, 155, 158, 61, 62, 92, 36, 189, 80, 178, 56, 62, 242, 182, 9, 62, 43, 214, 19, 62, 118, 52, 112, 62, 41, 187, 164, 188, 231, 174, 37, 190, 179, 105, 171, 189, 150, 117, 81, 61, 14, 226, 204, 60, 150, 145, 37, 191, 169, 177, 162, 189, 20, 176, 111, 62, 10, 187, 46, 189, 95, 168, 209, 189, 120, 52, 248, 189, 73, 78, 234, 61, 130, 76, 180, 61, 93, 212, 31, 191, 66, 20, 149, 62, 103, 99, 183, 188, 122, 247, 103, 61, 96, 116, 103, 62, 196, 22, 140, 190, 55, 149, 128, 190, 247, 62, 205, 190, 188, 153, 21, 62, 161, 106, 189, 60, 41, 92, 250, 188, 173, 215, 133, 61, 188, 7, 182, 61, 89, 205, 46, 190, 104, 183, 37, 62, 105, 156, 141, 189, 57, 18, 212, 188, 132, 127, 167, 188, 199, 16, 107, 188, 74, 194, 121, 188, 3, 44, 80, 60, 109, 71, 226, 189, 127, 55, 27, 190, 241, 6, 212, 61, 83, 108, 203, 61, 165, 1, 48, 190, 143, 77, 133, 189, 223, 39, 34, 190, 7, 79, 14, 61, 252, 146, 17, 189, 6, 125, 39, 61, 10, 47, 153, 189, 247, 13, 220, 189, 172, 115, 177, 189, 93, 227, 43, 190, 10, 201, 144, 189, 251, 160, 90, 61, 134, 177, 247, 61, 39, 206, 135, 189, 239, 129, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 149, 190, 61, 137, 85, 184, 189, 16, 76, 22, 62, 42, 73, 10, 190, 231, 118, 76, 62, 123, 117, 147, 189, 233, 115, 187, 62, 88, 56, 156, 62, 106, 116, 64, 61, 180, 26, 24, 190, 52, 61, 2, 62, 0, 229, 197, 59, 58, 189, 17, 62, 182, 164, 149, 62, 158, 148, 107, 62, 114, 0, 137, 62, 63, 71, 98, 188, 10, 101, 100, 189, 126, 8, 71, 62, 198, 122, 194, 61, 116, 96, 124, 62, 30, 39, 230, 188, 167, 44, 12, 62, 58, 22, 41, 62, 4, 23, 2, 60, 168, 140, 2, 62, 60, 38, 212, 62, 233, 0, 217, 61, 94, 29, 38, 62, 84, 36, 103, 190, 34, 128, 21, 62, 142, 109, 46, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 180, 26, 63, 11, 43, 187, 190, 61, 139, 38, 62, 94, 170, 61, 191, 218, 39, 73, 63, 211, 166, 225, 60, 175, 182, 19, 190, 223, 107, 188, 190, 58, 228, 202, 190, 254, 54, 152, 189, 213, 181, 73, 63, 105, 29, 70, 63, 204, 105, 108, 62, 129, 182, 12, 190, 237, 70, 81, 190, 185, 3, 5, 190, 14, 210, 132, 62, 17, 24, 49, 188, 127, 125, 201, 62, 189, 18, 218, 62, 222, 245, 249, 189, 91, 96, 133, 190, 15, 225, 186, 62, 59, 216, 183, 62, 110, 246, 29, 190, 193, 62, 243, 62, 255, 107, 151, 189, 34, 208, 3, 63, 155, 14, 0, 191, 230, 201, 171, 190, 227, 93, 158, 62, 195, 45, 159, 61, 25, 62, 93, 60, 242, 46, 228, 62, 115, 86, 155, 190, 130, 40, 138, 62, 96, 100, 14, 62, 77, 245, 211, 190, 44, 219, 217, 189, 155, 25, 148, 190, 100, 194, 28, 62, 97, 142, 52, 62, 77, 57, 252, 188, 103, 45, 3, 62, 138, 123, 139, 189, 182, 83, 254, 189, 99, 147, 68, 62, 197, 113, 134, 190, 150, 248, 135, 189, 93, 23, 139, 61, 200, 17, 192, 190, 105, 103, 45, 62, 236, 31, 66, 190, 50, 194, 47, 189, 36, 71, 131, 59, 67, 231, 176, 62, 51, 220, 156, 61, 109, 173, 163, 62, 58, 10, 43, 190, 134, 44, 68, 189, 11, 118, 141, 61, 251, 9, 52, 190, 129, 144, 85, 60, 216, 238, 161, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 153, 142, 190, 222, 253, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 172, 135, 63, 213, 144, 170, 191, 108, 12, 122, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 178, 15, 64, 46, 43, 15, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}