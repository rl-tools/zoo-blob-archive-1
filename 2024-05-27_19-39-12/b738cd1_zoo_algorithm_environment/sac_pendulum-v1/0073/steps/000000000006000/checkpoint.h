// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 96, 91, 63, 93, 213, 116, 63, 114, 71, 218, 62, 212, 15, 134, 60, 177, 247, 123, 190, 35, 119, 138, 190, 26, 236, 183, 190, 253, 42, 9, 191, 131, 111, 145, 190, 27, 79, 140, 60, 220, 64, 101, 62, 52, 119, 20, 191, 114, 21, 228, 189, 231, 77, 7, 188, 20, 93, 28, 63, 128, 106, 184, 62, 251, 215, 7, 62, 243, 217, 188, 62, 66, 135, 218, 62, 187, 203, 0, 63, 158, 233, 59, 189, 207, 197, 39, 63, 144, 105, 143, 190, 130, 75, 80, 190, 127, 220, 89, 62, 245, 71, 190, 190, 200, 127, 88, 190, 146, 191, 77, 63, 7, 52, 14, 191, 151, 99, 9, 191, 118, 51, 66, 61, 180, 208, 229, 190, 16, 75, 190, 62, 22, 109, 182, 190, 208, 80, 231, 190, 198, 158, 171, 190, 128, 97, 144, 190, 223, 31, 86, 63, 146, 251, 147, 190, 2, 225, 171, 189, 128, 107, 246, 190, 227, 62, 222, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 64, 186, 58, 190, 172, 125, 8, 191, 255, 30, 26, 62, 192, 239, 5, 63, 182, 45, 33, 63, 62, 9, 131, 62, 89, 46, 130, 62, 122, 132, 56, 191, 0, 238, 156, 189, 68, 107, 223, 62, 36, 182, 55, 191, 200, 153, 75, 190, 131, 191, 20, 63, 149, 77, 0, 189, 179, 82, 9, 63, 160, 135, 147, 190, 159, 140, 161, 190, 219, 207, 40, 63, 105, 239, 228, 61, 153, 201, 131, 62, 5, 39, 156, 62, 132, 127, 147, 62, 52, 95, 33, 191, 147, 144, 182, 62, 122, 0, 74, 63, 11, 122, 14, 63, 250, 129, 170, 61, 44, 92, 12, 191, 127, 179, 85, 63, 27, 83, 112, 61, 243, 105, 161, 62, 244, 182, 122, 191, 216, 27, 246, 190, 144, 28, 228, 189, 52, 65, 14, 190, 172, 113, 254, 187, 219, 0, 108, 62, 185, 150, 108, 62, 161, 254, 173, 190, 175, 118, 76, 63, 250, 71, 12, 191, 212, 225, 157, 190, 49, 132, 198, 62, 90, 131, 79, 63, 234, 246, 106, 61, 238, 227, 231, 190, 50, 241, 140, 62, 90, 119, 95, 62, 92, 224, 121, 190, 38, 50, 220, 62, 195, 112, 89, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 111, 56, 191, 229, 246, 135, 190, 31, 132, 146, 190, 131, 225, 24, 190, 214, 159, 165, 61, 60, 148, 13, 63, 226, 79, 255, 61, 122, 185, 148, 62, 81, 116, 153, 188, 37, 108, 172, 62, 114, 171, 134, 61, 81, 160, 154, 190, 75, 101, 134, 190, 114, 214, 125, 188, 53, 32, 19, 191, 91, 100, 10, 63, 183, 133, 35, 191, 145, 194, 179, 190, 148, 116, 199, 189, 46, 114, 26, 62, 197, 198, 147, 190, 11, 9, 75, 190, 47, 227, 135, 62, 30, 43, 227, 62, 246, 194, 11, 63, 162, 29, 195, 62, 46, 106, 116, 190, 3, 117, 64, 62, 32, 68, 12, 191, 141, 64, 154, 62, 20, 217, 158, 62, 231, 4, 239, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 0, 144, 190, 83, 226, 33, 61, 13, 164, 52, 191, 228, 224, 202, 189, 7, 29, 175, 61, 41, 42, 232, 61, 5, 188, 160, 189, 181, 202, 157, 62, 153, 148, 178, 61, 174, 2, 141, 60, 195, 252, 61, 190, 158, 91, 100, 191, 51, 240, 238, 62, 134, 21, 6, 191, 179, 179, 39, 62, 15, 64, 129, 62, 102, 138, 39, 191, 52, 58, 1, 61, 181, 20, 165, 62, 200, 67, 89, 61, 107, 239, 21, 189, 199, 167, 92, 190, 163, 30, 217, 187, 182, 140, 155, 189, 109, 227, 214, 61, 67, 238, 69, 190, 194, 221, 3, 61, 59, 65, 167, 190, 172, 54, 99, 190, 23, 28, 7, 190, 31, 218, 223, 61, 225, 221, 176, 61, 75, 197, 197, 62, 195, 36, 144, 190, 223, 128, 16, 62, 30, 224, 203, 62, 1, 207, 239, 189, 51, 101, 100, 189, 172, 233, 204, 187, 244, 201, 0, 190, 90, 38, 213, 189, 44, 22, 217, 189, 120, 16, 46, 62, 106, 33, 185, 61, 16, 144, 124, 189, 119, 62, 163, 61, 158, 209, 163, 61, 111, 234, 13, 62, 208, 91, 205, 62, 245, 233, 60, 190, 200, 253, 107, 191, 168, 42, 88, 61, 60, 111, 142, 189, 235, 163, 127, 62, 30, 77, 68, 190, 204, 35, 180, 62, 63, 166, 4, 190, 133, 151, 128, 190, 212, 102, 78, 188, 119, 62, 143, 62, 32, 32, 141, 190, 51, 185, 189, 61, 234, 133, 93, 190, 56, 243, 236, 189, 112, 148, 171, 190, 139, 89, 113, 189, 29, 90, 77, 189, 213, 100, 129, 189, 132, 154, 199, 189, 229, 48, 70, 62, 36, 83, 75, 62, 119, 235, 145, 189, 49, 192, 152, 61, 199, 16, 120, 62, 10, 200, 25, 190, 166, 96, 228, 189, 162, 201, 150, 190, 67, 156, 15, 189, 93, 0, 72, 61, 221, 76, 123, 61, 235, 7, 149, 190, 89, 198, 182, 189, 238, 179, 90, 60, 128, 190, 134, 189, 91, 0, 139, 62, 194, 67, 33, 190, 75, 238, 154, 188, 224, 228, 174, 61, 227, 158, 120, 190, 4, 92, 32, 61, 15, 250, 13, 62, 152, 229, 1, 190, 248, 68, 219, 61, 104, 143, 140, 59, 30, 159, 221, 189, 157, 226, 135, 189, 164, 93, 193, 61, 235, 245, 46, 62, 184, 178, 146, 190, 193, 5, 217, 61, 78, 253, 253, 188, 31, 111, 16, 188, 165, 129, 114, 190, 19, 192, 18, 62, 193, 39, 143, 62, 63, 160, 109, 189, 139, 20, 6, 189, 166, 22, 182, 190, 90, 213, 136, 190, 230, 227, 68, 59, 4, 251, 12, 61, 75, 176, 102, 190, 21, 42, 45, 190, 10, 76, 214, 62, 26, 41, 245, 62, 11, 173, 24, 190, 166, 169, 246, 61, 171, 111, 31, 61, 209, 89, 179, 188, 172, 5, 93, 190, 118, 81, 33, 191, 16, 130, 64, 62, 244, 0, 145, 61, 239, 139, 38, 62, 195, 87, 186, 62, 145, 55, 10, 191, 113, 124, 3, 190, 61, 253, 36, 62, 199, 11, 209, 190, 4, 34, 68, 61, 185, 8, 102, 191, 84, 120, 123, 60, 35, 37, 219, 61, 220, 232, 47, 62, 176, 157, 211, 61, 142, 193, 180, 62, 240, 81, 25, 190, 8, 139, 144, 189, 118, 14, 188, 190, 135, 162, 54, 191, 129, 253, 22, 63, 37, 188, 28, 191, 189, 73, 46, 190, 6, 117, 45, 62, 170, 141, 84, 191, 175, 201, 188, 188, 170, 25, 164, 62, 61, 160, 181, 189, 162, 45, 61, 62, 104, 36, 161, 190, 240, 232, 89, 62, 234, 221, 44, 190, 190, 214, 11, 62, 208, 32, 16, 191, 71, 163, 85, 189, 20, 99, 14, 190, 66, 105, 251, 190, 111, 130, 57, 189, 5, 26, 73, 62, 239, 28, 78, 59, 183, 104, 113, 190, 150, 227, 44, 189, 186, 188, 14, 190, 215, 13, 218, 61, 231, 0, 13, 188, 81, 104, 70, 62, 78, 242, 152, 61, 126, 206, 140, 62, 32, 107, 173, 187, 109, 7, 80, 62, 61, 109, 129, 189, 16, 239, 77, 190, 47, 200, 110, 190, 63, 61, 134, 186, 43, 90, 208, 61, 76, 58, 35, 62, 83, 55, 38, 191, 7, 67, 2, 61, 94, 121, 133, 62, 8, 207, 15, 62, 188, 44, 70, 189, 6, 255, 243, 189, 112, 76, 16, 62, 86, 229, 174, 62, 49, 132, 13, 191, 205, 43, 180, 61, 222, 24, 218, 189, 68, 19, 214, 189, 86, 185, 107, 189, 157, 246, 200, 189, 249, 118, 162, 190, 41, 249, 106, 190, 237, 87, 69, 189, 98, 16, 48, 190, 55, 175, 45, 61, 219, 163, 63, 190, 224, 147, 209, 190, 254, 73, 1, 191, 120, 137, 107, 190, 33, 132, 245, 188, 99, 234, 79, 59, 82, 128, 39, 61, 206, 210, 162, 62, 76, 190, 104, 190, 65, 182, 20, 188, 60, 77, 71, 61, 171, 251, 37, 190, 141, 183, 136, 62, 129, 220, 11, 62, 26, 85, 219, 187, 123, 244, 46, 62, 129, 73, 171, 190, 169, 28, 75, 190, 152, 121, 188, 61, 158, 117, 211, 189, 63, 109, 117, 61, 16, 30, 71, 61, 195, 65, 32, 62, 123, 100, 220, 61, 37, 184, 107, 190, 186, 72, 207, 189, 67, 188, 109, 190, 31, 233, 69, 62, 29, 201, 211, 60, 99, 163, 122, 61, 30, 17, 136, 190, 89, 81, 166, 61, 160, 78, 153, 61, 149, 32, 133, 189, 147, 223, 90, 62, 76, 220, 137, 61, 199, 162, 66, 62, 187, 184, 142, 190, 198, 83, 223, 189, 15, 167, 34, 61, 249, 153, 138, 62, 43, 74, 58, 190, 226, 25, 16, 62, 57, 40, 15, 62, 7, 26, 230, 61, 237, 242, 36, 189, 218, 53, 173, 190, 107, 55, 70, 191, 31, 151, 210, 61, 255, 104, 226, 189, 214, 152, 138, 60, 19, 112, 190, 61, 46, 166, 148, 62, 238, 95, 39, 62, 40, 208, 231, 189, 14, 77, 186, 61, 208, 54, 71, 62, 6, 37, 15, 191, 123, 71, 130, 62, 0, 171, 56, 62, 90, 164, 17, 188, 136, 58, 159, 189, 76, 176, 29, 190, 190, 190, 89, 61, 24, 209, 47, 62, 138, 243, 4, 191, 100, 48, 9, 191, 151, 126, 89, 61, 78, 103, 41, 60, 185, 58, 255, 189, 51, 9, 6, 61, 70, 21, 175, 61, 48, 213, 69, 62, 175, 178, 152, 61, 142, 113, 168, 188, 227, 245, 246, 59, 187, 160, 180, 62, 153, 112, 241, 60, 213, 186, 97, 190, 85, 50, 163, 190, 51, 51, 93, 189, 184, 109, 25, 191, 142, 217, 129, 190, 226, 131, 195, 190, 45, 210, 16, 190, 223, 199, 161, 62, 31, 82, 56, 60, 93, 237, 54, 62, 4, 43, 100, 61, 227, 220, 109, 190, 205, 226, 136, 61, 137, 180, 4, 62, 26, 71, 70, 190, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 162, 191, 243, 189, 229, 88, 135, 190, 19, 181, 26, 191, 89, 16, 84, 190, 151, 199, 27, 190, 32, 135, 161, 189, 127, 49, 48, 189, 159, 1, 26, 190, 48, 173, 181, 189, 81, 108, 74, 190, 21, 53, 196, 190, 97, 40, 58, 191, 148, 65, 20, 63, 250, 70, 12, 191, 34, 5, 45, 190, 50, 40, 144, 189, 90, 243, 215, 61, 199, 163, 164, 190, 114, 155, 53, 62, 8, 206, 1, 190, 202, 250, 213, 61, 99, 111, 188, 190, 255, 36, 153, 190, 55, 97, 10, 61, 16, 84, 199, 62, 6, 112, 75, 191, 90, 36, 180, 61, 128, 95, 103, 190, 129, 59, 108, 60, 49, 130, 125, 62, 77, 111, 85, 62, 35, 25, 120, 62, 5, 148, 119, 189, 170, 80, 161, 189, 141, 246, 73, 191, 184, 233, 17, 189, 59, 189, 193, 189, 42, 178, 30, 189, 142, 74, 194, 190, 110, 74, 114, 190, 128, 14, 126, 188, 186, 87, 22, 190, 207, 62, 238, 189, 97, 117, 56, 191, 166, 9, 92, 62, 1, 212, 62, 191, 236, 243, 29, 190, 7, 26, 83, 62, 205, 128, 94, 190, 139, 62, 139, 187, 91, 134, 168, 190, 147, 145, 78, 190, 38, 59, 88, 62, 81, 183, 184, 61, 223, 22, 192, 60, 70, 88, 201, 190, 204, 242, 186, 62, 84, 26, 86, 191, 142, 94, 183, 61, 187, 175, 169, 61, 46, 126, 188, 189, 199, 65, 0, 190, 129, 198, 75, 58, 111, 216, 88, 62, 94, 251, 215, 190, 213, 144, 154, 187, 123, 182, 163, 189, 26, 90, 79, 62, 151, 230, 143, 190, 114, 188, 94, 190, 128, 154, 32, 62, 28, 125, 130, 61, 0, 137, 174, 60, 221, 97, 243, 58, 122, 160, 7, 62, 144, 244, 126, 189, 42, 64, 136, 190, 75, 255, 62, 62, 106, 164, 250, 61, 190, 179, 74, 189, 75, 206, 94, 190, 166, 127, 94, 190, 227, 56, 69, 61, 195, 216, 20, 190, 77, 90, 240, 189, 205, 12, 171, 61, 233, 118, 141, 60, 125, 187, 66, 61, 230, 10, 185, 190, 50, 9, 75, 62, 9, 79, 231, 61, 131, 243, 32, 62, 124, 142, 155, 189, 255, 65, 192, 61, 232, 33, 161, 61, 199, 108, 150, 61, 26, 254, 10, 62, 27, 150, 9, 62, 134, 59, 175, 61, 220, 53, 68, 61, 62, 234, 212, 61, 1, 125, 216, 60, 248, 40, 146, 61, 171, 106, 150, 60, 22, 175, 172, 189, 37, 237, 208, 189, 232, 210, 165, 60, 78, 198, 181, 62, 44, 6, 129, 190, 21, 215, 138, 62, 230, 23, 128, 59, 213, 145, 249, 61, 34, 244, 200, 61, 7, 13, 125, 189, 155, 107, 200, 190, 2, 120, 38, 62, 56, 19, 10, 190, 37, 178, 238, 189, 77, 253, 60, 61, 135, 30, 15, 61, 189, 5, 20, 61, 42, 152, 128, 62, 227, 57, 9, 61, 39, 63, 126, 62, 193, 225, 212, 189, 64, 22, 212, 189, 17, 82, 101, 61, 24, 126, 49, 62, 61, 107, 224, 62, 127, 242, 167, 189, 201, 4, 144, 62, 142, 41, 140, 188, 237, 213, 2, 190, 64, 215, 60, 188, 131, 54, 32, 61, 61, 250, 132, 190, 138, 128, 247, 189, 41, 166, 121, 190, 73, 164, 32, 62, 76, 243, 35, 62, 148, 210, 250, 61, 155, 251, 109, 62, 8, 68, 207, 188, 77, 11, 101, 62, 86, 55, 198, 61, 247, 81, 235, 190, 8, 35, 76, 191, 137, 27, 153, 62, 58, 87, 237, 190, 115, 154, 146, 62, 247, 9, 177, 189, 196, 241, 106, 62, 172, 174, 148, 62, 161, 134, 39, 61, 228, 219, 66, 190, 78, 60, 129, 61, 17, 109, 159, 190, 100, 14, 77, 62, 80, 15, 98, 190, 83, 113, 226, 60, 144, 238, 126, 61, 205, 49, 190, 189, 208, 28, 179, 61, 23, 150, 137, 61, 252, 100, 178, 61, 209, 58, 132, 61, 54, 188, 172, 189, 180, 126, 187, 62, 154, 222, 163, 61, 214, 146, 47, 62, 39, 131, 86, 190, 62, 138, 102, 189, 172, 234, 100, 189, 11, 56, 235, 189, 191, 188, 31, 190, 237, 104, 178, 62, 128, 76, 50, 190, 148, 46, 21, 190, 189, 211, 15, 190, 134, 246, 115, 62, 137, 101, 104, 190, 127, 4, 16, 190, 2, 229, 59, 190, 147, 25, 66, 62, 251, 56, 166, 61, 226, 247, 58, 62, 170, 199, 184, 61, 155, 19, 124, 60, 171, 68, 181, 190, 50, 143, 177, 61, 27, 21, 2, 190, 167, 190, 92, 189, 123, 231, 12, 61, 68, 170, 199, 60, 150, 143, 49, 191, 71, 94, 230, 189, 30, 170, 107, 62, 200, 18, 139, 61, 151, 253, 144, 189, 73, 26, 23, 60, 254, 239, 48, 189, 161, 54, 23, 61, 158, 177, 235, 189, 3, 110, 67, 191, 58, 128, 35, 63, 187, 95, 230, 190, 6, 21, 13, 189, 56, 254, 133, 188, 232, 1, 28, 190, 144, 171, 201, 58, 86, 182, 223, 62, 161, 144, 4, 190, 48, 146, 79, 61, 181, 102, 201, 61, 10, 130, 14, 62, 170, 220, 99, 60, 193, 243, 54, 62, 216, 250, 99, 189, 21, 40, 255, 61, 240, 203, 196, 190, 71, 182, 165, 60, 188, 199, 191, 189, 190, 96, 46, 62, 198, 19, 30, 62, 129, 0, 130, 189, 84, 180, 255, 61, 65, 175, 226, 189, 42, 204, 17, 189, 109, 80, 205, 189, 123, 75, 154, 189, 160, 249, 56, 61, 208, 24, 136, 189, 200, 59, 8, 190, 119, 206, 21, 60, 116, 36, 221, 189, 231, 194, 144, 189, 28, 197, 43, 60, 247, 224, 221, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 73, 19, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 97, 120, 25, 61, 165, 53, 31, 190, 196, 33, 248, 61, 152, 199, 161, 189, 4, 79, 178, 61, 47, 108, 239, 189, 2, 211, 176, 189, 82, 192, 233, 189, 114, 233, 27, 190, 124, 122, 199, 190, 69, 6, 217, 189, 246, 164, 72, 190, 86, 179, 159, 189, 135, 123, 132, 189, 154, 24, 156, 61, 187, 167, 185, 61, 133, 57, 91, 62, 214, 141, 188, 61, 93, 63, 137, 62, 40, 243, 26, 188, 163, 186, 237, 190, 244, 52, 250, 189, 55, 83, 206, 188, 214, 71, 232, 188, 144, 224, 139, 61, 60, 177, 42, 191, 155, 193, 43, 189, 163, 122, 140, 60, 47, 194, 169, 60, 61, 213, 116, 62, 224, 135, 70, 190, 136, 140, 108, 189, 32, 22, 227, 61, 250, 138, 171, 190, 40, 94, 239, 61, 82, 185, 167, 189, 20, 106, 55, 189, 51, 110, 208, 189, 129, 251, 253, 189, 255, 110, 228, 187, 188, 226, 58, 188, 123, 219, 210, 190, 242, 166, 11, 190, 45, 189, 172, 60, 191, 196, 76, 62, 171, 117, 207, 189, 223, 186, 3, 62, 108, 143, 31, 62, 173, 75, 116, 62, 15, 165, 7, 62, 145, 92, 37, 62, 11, 93, 59, 62, 24, 92, 122, 190, 176, 147, 150, 190, 124, 57, 37, 185, 181, 111, 11, 190, 64, 91, 153, 61, 195, 158, 20, 191, 30, 38, 245, 61, 22, 203, 181, 62, 134, 83, 32, 190, 54, 240, 207, 61, 187, 64, 58, 190, 1, 142, 229, 61, 197, 40, 111, 61, 196, 4, 70, 191, 109, 215, 136, 62, 182, 231, 186, 189, 80, 126, 172, 189, 221, 222, 130, 62, 229, 146, 140, 190, 48, 30, 12, 187, 175, 242, 54, 189, 92, 171, 22, 189, 146, 35, 211, 61, 150, 190, 148, 60, 179, 27, 5, 189, 155, 210, 68, 189, 175, 143, 123, 189, 241, 228, 131, 61, 197, 87, 217, 62, 157, 151, 232, 60, 99, 93, 56, 60, 138, 252, 81, 189, 224, 150, 83, 61, 118, 9, 208, 189, 149, 179, 37, 62, 220, 182, 146, 59, 17, 82, 218, 61, 165, 9, 28, 190, 215, 62, 128, 61, 116, 188, 187, 190, 46, 198, 93, 62, 194, 206, 248, 188, 64, 195, 29, 190, 54, 158, 15, 62, 212, 244, 82, 62, 162, 10, 190, 60, 13, 31, 220, 189, 7, 147, 36, 190, 118, 177, 114, 62, 115, 172, 153, 190, 54, 41, 134, 60, 19, 7, 176, 188, 2, 92, 212, 61, 243, 220, 54, 62, 159, 52, 98, 189, 140, 99, 76, 62, 164, 82, 27, 62, 66, 23, 1, 191, 240, 147, 150, 61, 205, 163, 22, 60, 186, 52, 51, 188, 77, 71, 1, 61, 139, 100, 222, 61, 99, 234, 163, 190, 178, 153, 195, 61, 10, 70, 167, 190, 188, 42, 93, 62, 185, 71, 64, 189, 161, 235, 87, 62, 240, 247, 70, 190, 80, 89, 20, 190, 250, 202, 35, 191, 248, 154, 22, 62, 139, 48, 221, 190, 137, 120, 84, 190, 195, 218, 16, 190, 4, 98, 73, 62, 40, 32, 8, 62, 241, 250, 239, 189, 26, 178, 77, 187, 204, 54, 186, 187, 44, 37, 250, 190, 228, 30, 59, 62, 100, 14, 102, 190, 54, 39, 22, 189, 217, 60, 177, 189, 91, 158, 164, 61, 47, 238, 37, 191, 193, 240, 51, 190, 151, 223, 93, 62, 145, 113, 20, 62, 255, 96, 229, 189, 2, 50, 112, 189, 61, 9, 240, 61, 5, 167, 32, 190, 48, 64, 178, 188, 74, 111, 22, 191, 141, 91, 17, 63, 49, 136, 35, 191, 36, 191, 163, 189, 72, 162, 182, 61, 95, 211, 114, 189, 36, 11, 184, 61, 21, 164, 174, 62, 150, 29, 48, 190, 75, 134, 140, 61, 72, 3, 128, 189, 131, 5, 87, 189, 115, 128, 186, 189, 247, 132, 22, 62, 191, 20, 25, 191, 173, 28, 196, 189, 86, 130, 224, 189, 25, 134, 248, 190, 54, 27, 95, 62, 80, 86, 41, 62, 129, 154, 48, 62, 94, 72, 23, 190, 158, 35, 235, 59, 147, 195, 192, 189, 86, 53, 18, 190, 33, 246, 163, 61, 105, 119, 182, 188, 61, 226, 51, 190, 72, 167, 139, 62, 187, 181, 223, 61, 125, 70, 20, 189, 80, 192, 13, 60, 58, 129, 151, 190, 195, 152, 98, 61, 134, 177, 155, 189, 240, 156, 124, 189, 43, 54, 24, 62, 67, 179, 177, 190, 108, 47, 228, 61, 198, 65, 4, 62, 106, 188, 18, 190, 75, 111, 176, 61, 128, 157, 240, 189, 35, 87, 7, 60, 83, 141, 201, 190, 248, 207, 97, 190, 249, 252, 41, 189, 238, 47, 154, 59, 121, 230, 89, 190, 106, 133, 247, 189, 22, 92, 49, 190, 207, 202, 195, 189, 221, 210, 0, 62, 72, 25, 73, 62, 14, 181, 218, 61, 181, 197, 87, 189, 215, 66, 79, 61, 138, 165, 164, 189, 142, 3, 28, 62, 141, 237, 135, 62, 58, 36, 143, 186, 89, 93, 19, 190, 203, 70, 80, 61, 5, 222, 244, 61, 43, 250, 169, 190, 68, 137, 34, 190, 140, 78, 10, 190, 95, 0, 246, 189, 90, 115, 94, 189, 12, 118, 58, 62, 234, 208, 114, 62, 80, 19, 169, 190, 248, 81, 37, 62, 240, 53, 35, 62, 88, 22, 110, 188, 110, 90, 2, 189, 242, 122, 73, 189, 62, 102, 254, 189, 174, 172, 46, 190, 204, 73, 8, 189, 170, 145, 9, 61, 179, 236, 15, 187, 198, 192, 95, 189, 209, 112, 18, 190, 155, 211, 23, 189, 59, 97, 33, 191, 243, 240, 74, 61, 221, 62, 143, 190, 130, 21, 60, 190, 208, 57, 131, 61, 86, 196, 207, 61, 181, 148, 99, 60, 129, 157, 147, 62, 185, 93, 38, 61, 163, 81, 94, 62, 32, 114, 154, 190, 190, 103, 2, 191, 4, 133, 48, 61, 99, 162, 11, 190, 110, 49, 225, 189, 171, 189, 193, 61, 121, 222, 7, 191, 28, 6, 143, 58, 7, 147, 191, 62, 183, 50, 46, 190, 127, 241, 114, 62, 160, 117, 63, 60, 135, 53, 40, 62, 80, 209, 204, 189, 156, 78, 134, 190, 192, 214, 174, 61, 94, 89, 201, 61, 34, 127, 1, 189, 102, 54, 27, 62, 244, 125, 195, 189, 75, 180, 163, 61, 139, 159, 194, 61, 199, 31, 143, 59, 219, 91, 149, 189, 48, 139, 172, 61, 246, 125, 52, 61, 19, 118, 140, 61, 125, 203, 134, 61, 36, 35, 175, 61, 105, 22, 220, 62, 216, 5, 128, 187, 4, 173, 45, 61, 32, 194, 82, 61, 153, 35, 149, 190, 24, 183, 67, 189, 75, 59, 36, 61, 162, 252, 247, 189, 41, 51, 33, 62, 28, 110, 175, 190, 63, 163, 199, 189, 70, 45, 33, 190, 19, 169, 93, 189, 37, 144, 161, 188, 132, 196, 150, 187, 141, 58, 241, 189, 250, 242, 16, 62, 34, 205, 10, 61, 44, 191, 44, 62, 61, 167, 143, 188, 39, 47, 71, 189, 55, 97, 54, 190, 21, 218, 128, 188, 0, 35, 21, 190, 227, 212, 3, 62, 35, 179, 166, 190, 254, 233, 65, 189, 95, 14, 18, 191, 47, 118, 251, 188, 228, 10, 84, 61, 170, 61, 63, 62, 165, 201, 26, 62, 16, 195, 120, 62, 211, 208, 212, 188, 187, 155, 130, 62, 41, 133, 129, 189, 159, 40, 36, 191, 215, 20, 35, 62, 10, 72, 95, 189, 28, 142, 176, 188, 93, 94, 95, 62, 90, 93, 31, 191, 200, 23, 171, 190, 66, 254, 104, 61, 21, 219, 22, 190, 137, 9, 56, 60, 254, 124, 134, 190, 36, 24, 130, 62, 174, 203, 200, 189, 69, 194, 80, 190, 98, 79, 240, 188, 253, 109, 195, 189, 19, 189, 19, 190, 143, 139, 83, 61, 79, 51, 8, 190, 54, 125, 92, 188, 87, 208, 37, 190, 3, 3, 78, 61, 26, 223, 32, 190, 178, 1, 137, 62, 52, 184, 173, 61, 120, 160, 192, 190, 238, 73, 136, 189, 254, 178, 244, 188, 182, 40, 166, 189, 112, 1, 68, 190, 247, 202, 144, 190, 138, 219, 149, 189, 234, 240, 11, 62, 96, 0, 101, 190, 23, 142, 114, 62, 215, 69, 189, 61, 173, 162, 113, 62, 75, 165, 1, 188, 127, 162, 94, 189, 155, 118, 7, 191, 254, 165, 104, 62, 59, 135, 171, 190, 212, 20, 93, 62, 89, 114, 132, 190, 65, 64, 171, 62, 183, 89, 155, 62, 250, 165, 242, 61, 209, 171, 130, 61, 127, 85, 162, 61, 23, 238, 189, 190, 196, 157, 159, 62, 86, 51, 205, 188, 115, 170, 17, 61, 9, 8, 177, 189, 220, 97, 4, 62, 213, 46, 134, 61, 22, 246, 84, 188, 188, 30, 101, 61, 82, 0, 134, 185, 60, 219, 72, 190, 151, 33, 30, 189, 122, 224, 205, 61, 7, 133, 134, 189, 107, 105, 47, 62, 101, 166, 18, 190, 192, 190, 185, 189, 239, 203, 206, 60, 131, 142, 171, 61, 177, 124, 172, 61, 110, 173, 110, 62, 139, 120, 29, 62, 118, 137, 157, 187, 97, 34, 58, 188, 19, 213, 129, 61, 212, 59, 148, 189, 141, 223, 71, 62, 159, 23, 64, 189, 153, 207, 193, 190, 47, 223, 36, 190, 140, 209, 62, 189, 240, 85, 76, 190, 174, 45, 77, 61, 188, 221, 187, 190, 52, 131, 14, 189, 220, 104, 131, 61, 141, 89, 235, 188, 63, 206, 131, 61, 13, 64, 92, 187, 233, 148, 180, 189, 222, 170, 134, 61, 58, 2, 189, 61, 58, 116, 131, 189, 9, 11, 55, 62, 0, 208, 24, 62, 2, 224, 20, 62, 227, 97, 33, 62, 155, 60, 54, 61, 226, 134, 28, 190, 51, 172, 135, 189, 150, 117, 81, 61, 77, 70, 17, 189, 16, 113, 125, 190, 244, 63, 87, 189, 30, 33, 112, 62, 8, 246, 193, 188, 34, 48, 80, 190, 222, 175, 237, 189, 68, 15, 201, 61, 2, 104, 196, 61, 241, 235, 26, 191, 63, 58, 150, 62, 103, 99, 183, 188, 146, 196, 237, 60, 237, 185, 49, 62, 62, 234, 136, 190, 221, 131, 193, 190, 34, 223, 205, 190, 188, 153, 21, 62, 161, 106, 189, 60, 41, 92, 250, 188, 173, 215, 133, 61, 188, 7, 182, 61, 89, 205, 46, 190, 104, 183, 37, 62, 105, 156, 141, 189, 57, 18, 212, 188, 132, 127, 167, 188, 199, 16, 107, 188, 74, 194, 121, 188, 3, 44, 80, 60, 109, 71, 226, 189, 127, 55, 27, 190, 241, 6, 212, 61, 83, 108, 203, 61, 165, 1, 48, 190, 143, 77, 133, 189, 223, 39, 34, 190, 7, 79, 14, 61, 252, 146, 17, 189, 6, 125, 39, 61, 10, 47, 153, 189, 247, 13, 220, 189, 172, 115, 177, 189, 93, 227, 43, 190, 10, 201, 144, 189, 251, 160, 90, 61, 134, 177, 247, 61, 39, 206, 135, 189, 239, 129, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 63, 172, 61, 46, 12, 173, 189, 188, 174, 7, 62, 111, 102, 248, 189, 239, 241, 39, 62, 100, 137, 129, 189, 80, 25, 203, 62, 135, 186, 141, 62, 118, 87, 192, 59, 180, 26, 24, 190, 30, 4, 16, 62, 124, 66, 97, 61, 241, 11, 238, 61, 188, 224, 144, 62, 6, 7, 88, 62, 130, 52, 129, 62, 124, 116, 49, 61, 10, 101, 100, 189, 6, 231, 59, 62, 21, 170, 158, 61, 99, 50, 118, 62, 46, 56, 91, 189, 216, 131, 53, 62, 210, 190, 235, 61, 146, 199, 138, 188, 31, 27, 234, 61, 208, 55, 211, 62, 75, 130, 224, 61, 38, 23, 26, 62, 27, 57, 78, 190, 232, 135, 11, 62, 142, 109, 46, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 2, 20, 63, 254, 11, 130, 190, 81, 88, 1, 62, 204, 63, 45, 191, 116, 67, 52, 63, 27, 106, 221, 60, 151, 218, 134, 190, 15, 0, 178, 190, 234, 124, 189, 190, 254, 54, 152, 189, 159, 207, 89, 63, 160, 235, 44, 63, 54, 17, 81, 62, 183, 128, 15, 190, 147, 21, 98, 190, 212, 125, 237, 189, 150, 132, 125, 62, 17, 24, 49, 188, 179, 7, 168, 62, 166, 80, 188, 62, 146, 218, 212, 189, 60, 159, 115, 190, 186, 204, 181, 62, 59, 223, 65, 62, 103, 214, 27, 190, 34, 5, 195, 62, 107, 106, 138, 189, 85, 144, 252, 62, 183, 183, 250, 190, 12, 102, 105, 190, 242, 11, 163, 62, 195, 45, 159, 61, 73, 187, 102, 189, 191, 21, 201, 62, 30, 248, 66, 190, 237, 56, 156, 62, 198, 171, 1, 62, 217, 182, 202, 190, 241, 148, 167, 189, 110, 48, 145, 190, 202, 136, 16, 62, 97, 142, 52, 62, 8, 137, 180, 61, 19, 218, 194, 61, 182, 227, 17, 188, 244, 103, 9, 190, 207, 42, 51, 62, 234, 207, 135, 190, 218, 29, 150, 189, 93, 23, 139, 61, 163, 229, 155, 190, 200, 183, 60, 62, 251, 220, 91, 190, 58, 136, 110, 189, 41, 127, 37, 60, 119, 77, 85, 62, 78, 207, 196, 61, 118, 218, 159, 62, 28, 232, 74, 190, 217, 197, 167, 189, 115, 201, 129, 61, 210, 82, 62, 189, 40, 130, 200, 60, 216, 238, 161, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 79, 133, 190, 93, 244, 58, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 110, 134, 63, 204, 49, 180, 189, 71, 200, 196, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {203, 221, 178, 191, 65, 148, 184, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}