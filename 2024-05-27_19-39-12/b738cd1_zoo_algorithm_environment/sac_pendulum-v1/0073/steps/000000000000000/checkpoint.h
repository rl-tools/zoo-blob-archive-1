// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 56, 138, 62, 152, 58, 245, 62, 17, 25, 2, 63, 175, 153, 175, 190, 180, 223, 176, 188, 197, 21, 156, 190, 172, 181, 196, 190, 231, 227, 14, 190, 5, 110, 149, 189, 123, 244, 137, 61, 188, 215, 6, 63, 122, 167, 178, 190, 93, 191, 164, 61, 212, 115, 22, 190, 114, 239, 3, 63, 89, 226, 189, 62, 161, 73, 199, 61, 79, 72, 208, 62, 10, 167, 17, 63, 63, 142, 180, 62, 202, 15, 2, 190, 28, 115, 229, 62, 42, 29, 33, 190, 69, 52, 230, 189, 137, 25, 106, 60, 192, 155, 13, 189, 132, 24, 121, 190, 36, 58, 12, 63, 105, 2, 65, 190, 245, 111, 9, 191, 112, 203, 118, 62, 18, 204, 218, 188, 190, 208, 146, 62, 127, 92, 15, 190, 106, 118, 142, 62, 194, 204, 21, 189, 88, 13, 115, 190, 158, 109, 130, 62, 175, 209, 46, 190, 106, 131, 57, 190, 0, 115, 202, 61, 160, 5, 83, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 180, 117, 67, 190, 80, 12, 174, 190, 215, 55, 0, 62, 167, 89, 128, 61, 76, 53, 102, 62, 60, 80, 125, 62, 128, 85, 73, 189, 143, 85, 4, 191, 28, 197, 173, 189, 171, 213, 16, 62, 215, 150, 176, 190, 32, 232, 26, 190, 196, 212, 115, 62, 130, 238, 46, 190, 46, 93, 18, 63, 22, 209, 131, 190, 250, 155, 192, 190, 133, 191, 3, 63, 239, 224, 203, 61, 163, 96, 183, 188, 73, 105, 85, 62, 168, 94, 150, 62, 106, 1, 144, 190, 99, 109, 70, 62, 78, 142, 14, 63, 192, 79, 143, 62, 12, 183, 242, 61, 189, 235, 134, 190, 13, 233, 253, 62, 228, 106, 141, 62, 48, 217, 20, 62, 228, 154, 145, 190, 55, 148, 179, 190, 36, 148, 105, 190, 238, 57, 16, 190, 144, 129, 127, 189, 17, 28, 229, 62, 132, 147, 104, 62, 2, 100, 21, 190, 67, 25, 245, 62, 35, 101, 154, 190, 173, 142, 95, 190, 109, 6, 144, 62, 189, 180, 229, 62, 66, 70, 51, 62, 2, 102, 85, 190, 119, 95, 164, 190, 230, 119, 58, 62, 234, 22, 252, 60, 189, 19, 226, 189, 191, 207, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 161, 19, 191, 138, 228, 177, 189, 238, 50, 137, 190, 184, 6, 34, 188, 158, 41, 67, 62, 187, 233, 232, 62, 218, 146, 9, 62, 227, 223, 167, 62, 131, 150, 185, 189, 90, 97, 186, 62, 242, 139, 129, 190, 205, 11, 170, 190, 75, 222, 188, 190, 22, 99, 225, 61, 53, 32, 19, 191, 88, 88, 3, 63, 189, 101, 16, 191, 199, 13, 216, 190, 249, 92, 153, 59, 121, 176, 28, 62, 193, 201, 142, 190, 173, 161, 147, 190, 102, 241, 7, 63, 20, 115, 12, 63, 171, 228, 227, 187, 130, 1, 154, 62, 253, 120, 19, 190, 207, 29, 105, 61, 109, 54, 8, 191, 235, 214, 190, 62, 106, 235, 137, 62, 30, 129, 16, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 64, 64, 186, 62, 216, 70, 61, 176, 82, 179, 189, 196, 214, 7, 190, 76, 206, 232, 188, 92, 166, 145, 60, 153, 201, 138, 61, 212, 20, 46, 62, 87, 33, 23, 62, 163, 146, 139, 188, 197, 68, 210, 60, 255, 87, 115, 61, 174, 255, 144, 61, 241, 240, 249, 189, 179, 179, 39, 62, 9, 147, 191, 61, 96, 239, 181, 189, 72, 81, 247, 186, 254, 8, 219, 61, 126, 223, 99, 61, 31, 95, 253, 189, 206, 57, 106, 189, 178, 50, 9, 190, 238, 146, 123, 189, 168, 54, 204, 61, 166, 66, 52, 61, 233, 234, 190, 60, 206, 142, 50, 189, 12, 116, 222, 189, 224, 175, 52, 190, 100, 68, 210, 188, 222, 72, 103, 189, 125, 235, 223, 61, 9, 89, 38, 190, 176, 230, 16, 190, 162, 19, 162, 61, 207, 30, 176, 60, 220, 108, 93, 59, 51, 189, 11, 190, 165, 40, 70, 189, 165, 146, 150, 61, 44, 0, 92, 60, 185, 81, 232, 61, 95, 11, 52, 190, 147, 183, 174, 189, 234, 80, 40, 190, 158, 209, 163, 61, 58, 84, 52, 62, 231, 31, 36, 62, 214, 142, 139, 61, 31, 17, 4, 62, 42, 140, 44, 188, 135, 5, 3, 62, 5, 182, 32, 62, 182, 110, 201, 189, 29, 23, 27, 62, 241, 44, 152, 189, 159, 158, 173, 189, 133, 88, 87, 59, 61, 113, 147, 61, 144, 48, 7, 62, 130, 166, 171, 188, 3, 62, 205, 188, 224, 235, 38, 185, 37, 201, 212, 189, 26, 23, 15, 189, 47, 162, 233, 61, 144, 252, 113, 59, 81, 6, 43, 190, 126, 112, 47, 62, 200, 186, 39, 62, 34, 93, 35, 190, 56, 124, 55, 61, 186, 212, 50, 62, 71, 52, 3, 189, 113, 36, 195, 61, 67, 87, 28, 190, 20, 45, 95, 61, 93, 0, 72, 61, 51, 47, 128, 61, 229, 116, 4, 62, 117, 16, 182, 60, 214, 137, 52, 190, 207, 173, 124, 189, 1, 165, 37, 62, 121, 160, 178, 189, 19, 172, 156, 189, 182, 25, 12, 62, 204, 114, 252, 188, 115, 8, 192, 60, 145, 192, 252, 61, 170, 9, 155, 189, 30, 218, 234, 61, 66, 86, 212, 61, 233, 103, 230, 189, 242, 221, 4, 189, 164, 93, 193, 61, 107, 154, 239, 61, 97, 192, 25, 190, 153, 213, 2, 62, 214, 113, 179, 189, 18, 129, 144, 189, 1, 102, 124, 189, 219, 239, 207, 189, 40, 176, 34, 62, 141, 241, 50, 190, 90, 169, 68, 189, 137, 81, 22, 190, 93, 142, 194, 189, 32, 235, 101, 60, 4, 251, 12, 61, 63, 23, 139, 61, 21, 42, 45, 190, 238, 179, 92, 61, 143, 90, 29, 62, 80, 254, 64, 189, 111, 26, 98, 61, 254, 48, 31, 61, 224, 19, 37, 190, 93, 120, 29, 190, 214, 233, 196, 189, 113, 185, 233, 61, 12, 137, 44, 61, 179, 255, 20, 62, 196, 236, 211, 58, 151, 113, 72, 189, 221, 233, 224, 189, 240, 7, 15, 62, 13, 80, 126, 189, 228, 202, 51, 62, 45, 110, 35, 190, 85, 157, 82, 60, 73, 202, 255, 60, 145, 94, 235, 61, 185, 1, 219, 61, 214, 121, 52, 62, 106, 157, 197, 61, 25, 198, 104, 188, 122, 45, 10, 190, 156, 210, 252, 61, 167, 189, 24, 62, 91, 96, 202, 189, 189, 73, 46, 190, 210, 51, 138, 187, 139, 214, 50, 190, 171, 79, 172, 189, 18, 104, 9, 62, 30, 5, 84, 189, 228, 77, 244, 61, 163, 222, 220, 189, 119, 220, 187, 61, 183, 74, 31, 190, 168, 80, 103, 61, 34, 169, 17, 190, 194, 115, 88, 188, 133, 70, 18, 188, 156, 190, 20, 190, 82, 21, 146, 189, 235, 60, 121, 61, 168, 40, 14, 190, 198, 180, 154, 189, 119, 54, 245, 59, 42, 224, 190, 189, 51, 212, 41, 62, 251, 105, 210, 58, 153, 156, 226, 61, 89, 129, 254, 59, 106, 141, 157, 61, 43, 247, 128, 60, 181, 85, 7, 62, 250, 40, 234, 189, 163, 246, 167, 189, 84, 48, 216, 61, 134, 179, 1, 61, 43, 90, 208, 61, 226, 208, 137, 61, 203, 16, 202, 188, 157, 206, 28, 62, 49, 50, 49, 62, 151, 132, 129, 59, 118, 154, 23, 189, 145, 86, 45, 190, 167, 50, 247, 60, 239, 78, 40, 62, 37, 232, 21, 62, 141, 237, 98, 61, 51, 128, 230, 189, 38, 253, 212, 189, 38, 127, 134, 61, 22, 51, 39, 189, 72, 189, 47, 190, 148, 67, 12, 190, 154, 37, 241, 59, 32, 85, 106, 189, 194, 144, 10, 62, 100, 68, 250, 189, 179, 135, 21, 189, 77, 220, 22, 190, 48, 95, 28, 190, 231, 103, 205, 189, 246, 117, 144, 61, 171, 213, 114, 61, 94, 13, 211, 61, 8, 109, 73, 189, 159, 41, 210, 61, 42, 134, 153, 61, 171, 251, 37, 190, 202, 176, 41, 190, 26, 250, 22, 62, 208, 79, 108, 189, 246, 13, 21, 62, 2, 219, 19, 190, 87, 189, 208, 60, 31, 237, 213, 61, 234, 231, 26, 190, 187, 112, 167, 189, 120, 104, 31, 62, 50, 158, 170, 61, 255, 198, 229, 61, 243, 149, 52, 190, 73, 67, 6, 190, 110, 203, 252, 60, 42, 138, 166, 188, 26, 175, 21, 190, 101, 111, 69, 189, 246, 132, 14, 190, 154, 244, 150, 189, 213, 248, 232, 60, 187, 196, 248, 188, 42, 82, 24, 62, 207, 23, 166, 61, 197, 98, 207, 61, 47, 11, 175, 189, 124, 183, 132, 188, 135, 255, 77, 189, 116, 93, 163, 61, 137, 218, 71, 188, 92, 85, 66, 61, 57, 40, 15, 62, 187, 118, 134, 189, 210, 3, 47, 189, 75, 172, 136, 189, 94, 30, 17, 190, 106, 66, 55, 61, 166, 69, 55, 189, 100, 185, 228, 187, 165, 34, 133, 61, 254, 248, 206, 61, 194, 48, 114, 61, 43, 27, 134, 189, 188, 40, 131, 61, 91, 212, 21, 62, 193, 102, 28, 190, 116, 74, 249, 61, 150, 206, 31, 62, 225, 239, 177, 189, 125, 235, 49, 188, 90, 117, 163, 189, 68, 5, 64, 189, 240, 201, 33, 62, 56, 117, 175, 189, 193, 70, 246, 61, 237, 143, 42, 62, 120, 242, 135, 60, 91, 145, 34, 189, 77, 118, 195, 61, 240, 97, 111, 187, 45, 172, 2, 62, 45, 199, 174, 61, 90, 65, 47, 189, 227, 245, 246, 59, 41, 154, 196, 61, 177, 210, 35, 62, 82, 209, 138, 61, 171, 14, 131, 61, 171, 215, 147, 60, 174, 196, 245, 188, 214, 43, 117, 189, 36, 53, 20, 190, 241, 175, 197, 189, 130, 110, 2, 62, 14, 123, 169, 60, 150, 165, 45, 62, 129, 26, 177, 61, 118, 85, 78, 189, 103, 238, 238, 61, 75, 147, 241, 187, 123, 116, 38, 190, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 80, 242, 184, 61, 51, 225, 7, 189, 60, 245, 32, 59, 85, 185, 178, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 178, 70, 237, 189, 83, 214, 30, 62, 224, 112, 192, 189, 57, 27, 70, 61, 137, 119, 132, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 36, 118, 158, 188, 195, 182, 39, 62, 145, 9, 131, 189, 69, 22, 21, 62, 149, 19, 14, 61, 161, 147, 253, 188, 173, 243, 45, 190, 125, 190, 18, 190, 214, 20, 241, 189, 227, 147, 15, 189, 104, 42, 242, 189, 116, 103, 157, 188, 48, 10, 17, 190, 56, 47, 155, 189, 194, 131, 233, 188, 88, 126, 182, 188, 17, 2, 55, 59, 165, 1, 183, 189, 22, 215, 54, 61, 119, 87, 48, 59, 105, 224, 254, 188, 89, 57, 10, 188, 163, 46, 145, 188, 34, 5, 45, 190, 96, 121, 85, 189, 23, 250, 38, 62, 127, 212, 14, 190, 60, 121, 5, 62, 11, 162, 197, 61, 228, 80, 9, 62, 252, 7, 254, 189, 42, 5, 43, 190, 137, 72, 222, 189, 255, 131, 33, 62, 145, 159, 214, 60, 153, 180, 30, 62, 218, 52, 10, 190, 153, 29, 133, 59, 198, 18, 38, 61, 27, 11, 22, 62, 151, 210, 51, 62, 227, 234, 159, 61, 111, 80, 164, 188, 232, 168, 52, 190, 66, 114, 138, 61, 16, 117, 30, 190, 40, 235, 11, 189, 132, 244, 63, 61, 217, 36, 149, 189, 129, 15, 59, 61, 1, 162, 133, 187, 44, 235, 67, 61, 162, 194, 149, 189, 171, 67, 128, 189, 142, 72, 160, 189, 236, 243, 29, 190, 16, 52, 233, 61, 60, 77, 18, 60, 68, 128, 48, 62, 146, 248, 183, 189, 25, 250, 189, 189, 92, 122, 238, 61, 149, 150, 37, 62, 107, 160, 71, 61, 68, 60, 121, 189, 219, 234, 24, 62, 210, 11, 236, 188, 124, 229, 178, 61, 56, 98, 43, 62, 34, 236, 130, 61, 101, 198, 234, 188, 179, 44, 8, 190, 171, 141, 243, 61, 154, 155, 136, 189, 151, 112, 35, 61, 234, 0, 89, 189, 172, 150, 52, 62, 82, 50, 52, 190, 88, 168, 220, 189, 94, 213, 131, 61, 40, 127, 192, 60, 160, 217, 101, 60, 70, 70, 18, 189, 170, 208, 4, 62, 99, 190, 213, 189, 59, 180, 242, 189, 48, 142, 34, 62, 106, 164, 250, 61, 54, 85, 137, 189, 164, 103, 205, 61, 58, 189, 161, 189, 170, 238, 163, 189, 228, 78, 63, 189, 125, 122, 206, 189, 56, 254, 218, 61, 134, 91, 131, 61, 175, 34, 225, 59, 163, 32, 13, 190, 111, 204, 19, 62, 182, 7, 206, 61, 46, 80, 210, 61, 191, 132, 211, 189, 95, 201, 227, 61, 221, 3, 213, 61, 129, 68, 25, 62, 220, 19, 163, 61, 146, 220, 211, 61, 134, 160, 254, 189, 146, 134, 219, 189, 180, 33, 37, 62, 192, 231, 165, 188, 247, 216, 193, 61, 120, 119, 48, 190, 249, 30, 90, 189, 209, 250, 41, 190, 99, 1, 41, 187, 37, 71, 20, 62, 54, 111, 39, 190, 232, 147, 97, 61, 230, 23, 128, 59, 209, 239, 119, 189, 182, 254, 50, 62, 182, 228, 44, 190, 120, 240, 193, 189, 101, 235, 0, 62, 164, 160, 75, 189, 248, 8, 189, 189, 107, 157, 139, 61, 199, 167, 226, 189, 12, 183, 79, 188, 253, 88, 235, 61, 30, 217, 146, 189, 31, 168, 23, 62, 134, 101, 14, 62, 131, 96, 50, 190, 175, 166, 111, 61, 241, 38, 249, 61, 237, 58, 155, 61, 153, 141, 78, 61, 64, 119, 155, 61, 163, 129, 12, 190, 41, 137, 174, 61, 170, 239, 185, 61, 217, 121, 48, 189, 103, 20, 83, 189, 88, 94, 181, 61, 136, 172, 81, 189, 52, 114, 29, 190, 208, 0, 96, 189, 177, 75, 190, 61, 122, 77, 197, 60, 8, 68, 207, 188, 37, 38, 186, 61, 130, 172, 131, 189, 185, 46, 3, 190, 154, 130, 247, 60, 120, 170, 200, 61, 224, 165, 160, 189, 38, 181, 20, 61, 145, 237, 57, 189, 35, 79, 98, 61, 101, 177, 52, 62, 25, 194, 251, 61, 63, 214, 207, 189, 190, 185, 165, 189, 191, 222, 175, 61, 231, 254, 164, 61, 105, 126, 133, 189, 177, 203, 14, 62, 99, 157, 187, 61, 95, 221, 101, 189, 96, 14, 170, 61, 111, 243, 200, 61, 198, 158, 14, 62, 105, 251, 32, 189, 146, 53, 236, 189, 228, 13, 147, 61, 136, 107, 4, 62, 239, 36, 4, 62, 210, 143, 30, 190, 64, 159, 148, 60, 190, 7, 31, 62, 209, 20, 220, 189, 191, 188, 31, 190, 209, 25, 46, 62, 246, 93, 233, 61, 159, 211, 125, 189, 11, 42, 71, 61, 69, 38, 39, 62, 15, 153, 10, 190, 15, 143, 103, 189, 233, 98, 26, 190, 39, 167, 34, 189, 54, 47, 204, 61, 180, 97, 34, 62, 172, 203, 201, 61, 195, 123, 104, 57, 250, 180, 38, 190, 42, 77, 210, 188, 60, 208, 1, 190, 77, 242, 0, 190, 231, 196, 100, 61, 246, 56, 144, 60, 60, 6, 4, 189, 142, 38, 180, 189, 64, 47, 22, 62, 100, 139, 147, 60, 161, 185, 134, 61, 226, 133, 135, 61, 11, 77, 212, 189, 96, 13, 94, 61, 241, 220, 8, 61, 183, 204, 18, 62, 19, 53, 253, 188, 69, 60, 244, 189, 6, 21, 13, 189, 43, 129, 6, 190, 227, 65, 67, 189, 213, 29, 44, 189, 219, 154, 34, 62, 72, 30, 1, 190, 188, 174, 250, 188, 8, 247, 226, 61, 173, 190, 160, 61, 194, 69, 83, 61, 34, 255, 147, 187, 197, 130, 215, 61, 52, 154, 255, 61, 216, 180, 168, 188, 240, 240, 149, 59, 95, 133, 44, 190, 69, 112, 245, 59, 100, 17, 185, 60, 129, 0, 130, 189, 218, 30, 33, 62, 42, 167, 193, 189, 232, 155, 118, 58, 240, 81, 202, 189, 134, 135, 124, 189, 147, 247, 139, 61, 21, 91, 72, 189, 255, 249, 209, 189, 244, 52, 26, 61, 116, 36, 221, 189, 64, 91, 204, 188, 35, 177, 73, 61, 233, 231, 146, 189, 56, 22, 225, 60, 55, 158, 99, 61, 136, 109, 224, 189, 160, 39, 240, 189, 162, 61, 9, 190, 59, 246, 99, 189, 16, 113, 231, 61, 49, 42, 64, 61, 206, 191, 164, 61, 2, 182, 8, 61, 31, 36, 2, 190, 28, 43, 28, 62, 185, 46, 104, 189, 220, 214, 242, 61, 188, 31, 224, 189, 114, 41, 201, 189, 234, 252, 210, 189, 230, 221, 5, 190, 215, 205, 47, 190, 162, 100, 13, 190, 54, 0, 225, 60, 202, 200, 247, 189, 36, 75, 43, 190, 239, 45, 182, 58, 18, 80, 212, 60, 32, 213, 49, 60, 67, 234, 34, 188, 84, 86, 224, 61, 223, 218, 164, 61, 8, 40, 35, 190, 109, 130, 176, 189, 70, 110, 200, 188, 214, 71, 232, 188, 167, 191, 14, 61, 187, 162, 207, 189, 107, 21, 32, 62, 145, 75, 17, 190, 224, 191, 201, 188, 218, 106, 193, 61, 199, 173, 42, 190, 62, 141, 38, 190, 137, 16, 64, 61, 85, 254, 186, 60, 33, 102, 24, 61, 189, 122, 208, 189, 38, 5, 80, 189, 141, 80, 174, 189, 137, 99, 51, 189, 252, 252, 140, 60, 143, 198, 75, 61, 228, 182, 216, 58, 6, 112, 17, 190, 175, 28, 231, 61, 111, 210, 46, 62, 254, 143, 144, 189, 34, 32, 43, 62, 170, 152, 142, 61, 171, 55, 31, 189, 138, 121, 94, 61, 248, 87, 248, 185, 26, 198, 46, 62, 155, 220, 29, 190, 187, 5, 35, 190, 234, 86, 10, 188, 181, 111, 11, 190, 95, 162, 244, 188, 188, 219, 20, 62, 17, 27, 47, 62, 131, 75, 39, 188, 74, 47, 16, 190, 135, 45, 46, 62, 236, 75, 22, 189, 144, 122, 226, 189, 204, 245, 183, 60, 64, 231, 51, 190, 220, 171, 223, 61, 62, 116, 165, 189, 19, 223, 36, 190, 116, 6, 74, 61, 60, 142, 242, 189, 147, 75, 25, 189, 249, 66, 37, 189, 155, 67, 220, 189, 102, 250, 228, 61, 143, 62, 143, 188, 82, 215, 168, 189, 12, 143, 212, 188, 213, 170, 37, 190, 224, 170, 137, 61, 238, 5, 47, 62, 48, 46, 73, 61, 128, 185, 73, 189, 191, 12, 127, 189, 243, 130, 168, 188, 209, 93, 80, 61, 181, 68, 188, 61, 220, 182, 146, 59, 222, 254, 99, 189, 121, 39, 209, 188, 204, 75, 216, 61, 120, 246, 23, 190, 138, 171, 16, 62, 245, 59, 146, 60, 74, 9, 23, 190, 102, 95, 20, 62, 90, 61, 183, 188, 10, 35, 233, 189, 219, 103, 46, 190, 6, 100, 43, 190, 240, 224, 49, 62, 226, 49, 217, 189, 174, 7, 32, 190, 199, 243, 27, 189, 124, 50, 140, 60, 223, 60, 8, 61, 86, 246, 87, 61, 45, 170, 22, 62, 239, 78, 248, 61, 209, 226, 3, 190, 58, 176, 26, 62, 94, 250, 64, 61, 128, 58, 242, 189, 56, 5, 48, 62, 149, 162, 28, 62, 77, 35, 51, 190, 4, 176, 99, 189, 213, 23, 52, 190, 175, 152, 52, 62, 185, 71, 64, 189, 148, 18, 29, 62, 110, 201, 134, 189, 250, 217, 9, 62, 15, 220, 49, 190, 29, 209, 133, 61, 48, 30, 23, 61, 236, 219, 95, 189, 152, 200, 186, 188, 237, 67, 36, 61, 247, 58, 28, 62, 86, 59, 206, 189, 222, 111, 38, 60, 135, 50, 4, 189, 144, 3, 186, 189, 131, 249, 229, 61, 97, 211, 236, 60, 59, 65, 200, 61, 167, 83, 174, 188, 184, 84, 16, 62, 165, 254, 221, 61, 86, 227, 82, 189, 196, 214, 43, 62, 188, 234, 228, 61, 230, 1, 42, 190, 39, 179, 210, 189, 23, 154, 230, 61, 218, 214, 1, 190, 19, 175, 32, 62, 34, 182, 39, 62, 250, 129, 213, 189, 164, 43, 78, 61, 36, 191, 163, 189, 241, 55, 128, 61, 137, 175, 100, 61, 30, 112, 236, 60, 131, 244, 26, 60, 18, 177, 18, 190, 96, 49, 17, 61, 106, 60, 231, 60, 34, 210, 103, 189, 20, 26, 41, 190, 117, 49, 183, 189, 132, 1, 151, 189, 159, 153, 2, 189, 100, 116, 203, 61, 46, 77, 49, 190, 143, 237, 8, 61, 225, 48, 103, 61, 110, 61, 99, 61, 80, 245, 250, 61, 206, 255, 81, 61, 128, 66, 152, 61, 250, 204, 140, 61, 192, 196, 152, 61, 92, 157, 167, 58, 87, 217, 151, 189, 71, 167, 246, 61, 50, 17, 161, 61, 145, 120, 6, 190, 64, 216, 25, 62, 86, 9, 59, 188, 223, 230, 233, 61, 71, 214, 172, 61, 240, 156, 124, 189, 19, 11, 161, 61, 51, 19, 211, 60, 178, 8, 93, 189, 43, 142, 200, 189, 130, 181, 153, 189, 154, 45, 113, 61, 150, 121, 192, 60, 40, 116, 250, 188, 20, 213, 1, 190, 155, 102, 170, 189, 204, 84, 200, 189, 28, 112, 110, 187, 215, 222, 132, 60, 23, 221, 68, 60, 58, 140, 137, 61, 145, 170, 213, 189, 251, 51, 39, 62, 218, 37, 15, 62, 66, 45, 11, 62, 220, 100, 72, 60, 197, 224, 28, 62, 59, 214, 157, 189, 130, 202, 255, 61, 111, 142, 232, 61, 71, 166, 49, 59, 90, 30, 74, 189, 227, 18, 182, 61, 5, 23, 163, 61, 220, 43, 24, 190, 155, 143, 204, 189, 159, 171, 136, 189, 95, 0, 246, 189, 74, 148, 1, 189, 168, 55, 58, 61, 134, 31, 147, 61, 62, 46, 75, 188, 83, 59, 46, 62, 111, 234, 15, 62, 75, 211, 61, 60, 158, 88, 167, 189, 222, 47, 7, 190, 40, 28, 134, 61, 11, 134, 4, 189, 232, 168, 121, 188, 86, 18, 8, 190, 190, 119, 41, 61, 142, 77, 138, 189, 49, 47, 169, 189, 167, 235, 106, 188, 139, 208, 42, 190, 82, 159, 170, 61, 65, 169, 23, 62, 98, 81, 17, 190, 208, 253, 52, 189, 202, 113, 34, 62, 230, 180, 141, 61, 87, 246, 172, 61, 52, 121, 193, 189, 206, 32, 118, 61, 186, 141, 47, 190, 186, 211, 170, 61, 180, 195, 118, 61, 104, 32, 17, 189, 110, 49, 225, 189, 215, 200, 7, 189, 33, 125, 33, 61, 99, 37, 150, 61, 67, 138, 61, 61, 90, 75, 170, 189, 75, 108, 140, 61, 13, 196, 32, 62, 180, 115, 193, 61, 139, 41, 240, 61, 76, 197, 33, 190, 148, 55, 243, 60, 210, 50, 4, 62, 220, 33, 234, 60, 30, 172, 255, 189, 148, 7, 29, 62, 20, 102, 130, 189, 81, 115, 170, 61, 198, 21, 26, 188, 22, 125, 203, 188, 59, 75, 126, 61, 212, 8, 206, 61, 93, 215, 13, 62, 23, 57, 197, 189, 181, 244, 69, 61, 92, 95, 30, 62, 105, 209, 104, 61, 250, 94, 103, 60, 232, 208, 225, 61, 75, 112, 33, 190, 216, 159, 52, 62, 213, 5, 112, 61, 162, 252, 247, 189, 219, 69, 123, 189, 186, 39, 162, 189, 246, 110, 42, 61, 44, 232, 198, 59, 93, 178, 31, 190, 249, 179, 3, 62, 27, 219, 225, 60, 105, 151, 9, 190, 114, 126, 30, 190, 140, 61, 146, 61, 1, 1, 44, 62, 153, 203, 16, 188, 251, 91, 40, 189, 0, 249, 158, 60, 17, 241, 51, 190, 8, 149, 42, 190, 251, 167, 32, 60, 126, 69, 20, 58, 9, 74, 34, 189, 48, 234, 51, 190, 162, 30, 162, 189, 106, 29, 168, 188, 202, 71, 33, 62, 83, 168, 97, 61, 160, 100, 182, 188, 161, 50, 20, 190, 164, 36, 132, 61, 211, 6, 184, 61, 174, 19, 33, 190, 159, 88, 212, 61, 123, 114, 22, 189, 28, 142, 176, 188, 138, 90, 41, 62, 193, 56, 167, 188, 197, 86, 6, 190, 42, 150, 33, 190, 120, 137, 5, 190, 43, 180, 156, 189, 206, 26, 251, 189, 107, 20, 37, 62, 47, 208, 40, 190, 245, 79, 85, 61, 174, 160, 245, 189, 96, 145, 21, 190, 239, 179, 24, 190, 25, 207, 111, 60, 31, 218, 148, 189, 200, 82, 10, 189, 252, 15, 0, 190, 153, 10, 21, 190, 162, 87, 215, 59, 226, 241, 17, 62, 130, 227, 165, 61, 176, 17, 37, 190, 65, 251, 93, 188, 203, 16, 198, 188, 40, 142, 0, 190, 194, 110, 142, 60, 191, 234, 44, 190, 29, 91, 3, 190, 234, 191, 78, 60, 64, 240, 53, 189, 83, 173, 37, 62, 215, 69, 189, 61, 196, 44, 236, 61, 54, 17, 198, 185, 89, 147, 111, 60, 160, 125, 40, 61, 135, 88, 42, 62, 64, 223, 214, 57, 213, 137, 46, 62, 51, 48, 4, 190, 21, 228, 14, 62, 133, 168, 37, 62, 27, 53, 13, 62, 149, 185, 219, 61, 144, 253, 116, 61, 54, 163, 225, 61, 16, 152, 20, 62, 37, 53, 153, 61, 184, 254, 140, 61, 160, 228, 136, 189, 93, 6, 50, 62, 176, 58, 48, 62, 133, 106, 59, 61, 253, 31, 38, 61, 51, 103, 163, 59, 57, 32, 155, 60, 155, 87, 130, 61, 58, 221, 35, 62, 73, 95, 19, 61, 160, 248, 6, 62, 136, 44, 147, 189, 99, 214, 80, 189, 165, 226, 197, 61, 131, 142, 171, 61, 42, 133, 26, 61, 92, 174, 239, 61, 254, 28, 11, 62, 212, 24, 246, 60, 87, 85, 223, 60, 238, 207, 215, 187, 118, 118, 244, 188, 127, 37, 19, 62, 91, 130, 146, 59, 170, 247, 36, 190, 15, 112, 231, 189, 200, 196, 115, 188, 110, 237, 204, 189, 183, 33, 220, 61, 139, 241, 12, 190, 239, 109, 151, 188, 39, 89, 195, 61, 201, 152, 148, 61, 186, 130, 120, 61, 154, 3, 112, 61, 143, 115, 32, 190, 246, 198, 238, 61, 154, 172, 17, 62, 118, 133, 241, 189, 159, 47, 15, 189, 47, 208, 152, 61, 141, 201, 107, 60, 214, 252, 53, 61, 57, 201, 35, 61, 213, 26, 62, 189, 211, 43, 231, 189, 150, 117, 81, 61, 74, 127, 162, 188, 173, 149, 128, 60, 105, 138, 109, 61, 196, 94, 88, 189, 224, 166, 89, 189, 170, 208, 15, 188, 96, 114, 197, 189, 177, 115, 166, 188, 238, 224, 10, 61, 130, 219, 145, 189, 196, 192, 21, 62, 241, 120, 180, 59, 186, 40, 133, 189, 175, 102, 108, 61, 114, 216, 7, 190, 68, 64, 11, 190, 240, 56, 46, 190, 185, 111, 37, 62, 197, 232, 3, 61, 45, 179, 250, 188, 21, 85, 154, 61, 45, 203, 218, 61, 90, 5, 34, 190, 10, 156, 41, 62, 42, 94, 130, 189, 147, 204, 135, 188, 246, 136, 40, 188, 48, 43, 179, 58, 156, 5, 215, 187, 246, 140, 180, 60, 27, 91, 204, 189, 127, 55, 27, 190, 8, 118, 244, 61, 101, 14, 242, 61, 130, 171, 47, 190, 48, 137, 110, 189, 65, 52, 17, 190, 206, 194, 100, 61, 114, 153, 130, 188, 77, 136, 81, 61, 249, 104, 150, 189, 171, 205, 187, 189, 219, 154, 158, 189, 36, 2, 44, 190, 210, 155, 131, 189, 251, 160, 90, 61, 91, 173, 3, 62, 193, 232, 48, 189, 240, 141, 123, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 168, 36, 189, 102, 181, 176, 189, 163, 141, 28, 62, 244, 78, 36, 188, 190, 250, 102, 188, 245, 251, 41, 190, 132, 23, 51, 62, 232, 245, 135, 61, 228, 18, 148, 189, 31, 120, 8, 190, 224, 179, 35, 61, 28, 102, 160, 188, 165, 244, 192, 61, 172, 241, 125, 61, 43, 92, 160, 61, 48, 227, 68, 60, 96, 108, 32, 189, 112, 26, 200, 188, 116, 61, 43, 62, 214, 251, 232, 187, 233, 23, 19, 59, 232, 194, 34, 190, 134, 85, 171, 61, 48, 55, 219, 61, 144, 11, 22, 61, 51, 255, 12, 62, 106, 134, 27, 62, 234, 168, 69, 61, 88, 27, 204, 188, 215, 238, 201, 189, 70, 100, 251, 61, 158, 111, 73, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 249, 96, 60, 126, 203, 180, 189, 41, 102, 38, 62, 142, 71, 159, 189, 227, 7, 66, 189, 182, 117, 40, 61, 115, 52, 34, 61, 219, 113, 46, 190, 200, 114, 207, 189, 21, 82, 152, 189, 189, 78, 14, 62, 217, 210, 7, 62, 230, 11, 6, 62, 234, 108, 62, 189, 235, 22, 107, 188, 17, 159, 17, 189, 17, 184, 152, 188, 75, 166, 154, 189, 33, 243, 241, 61, 9, 149, 114, 60, 190, 45, 103, 189, 245, 158, 170, 187, 129, 64, 44, 62, 217, 185, 49, 62, 181, 251, 12, 190, 243, 228, 23, 61, 66, 121, 80, 189, 124, 109, 51, 62, 31, 254, 12, 190, 111, 64, 241, 189, 4, 139, 103, 61, 218, 42, 176, 61, 109, 169, 33, 190, 8, 106, 72, 61, 158, 165, 57, 188, 168, 79, 0, 62, 88, 220, 10, 190, 7, 249, 2, 190, 92, 103, 128, 189, 253, 170, 37, 190, 220, 214, 106, 61, 236, 160, 52, 62, 247, 187, 2, 62, 122, 74, 22, 61, 160, 131, 178, 61, 232, 148, 16, 190, 227, 221, 154, 60, 201, 83, 234, 189, 86, 54, 36, 189, 102, 215, 133, 61, 156, 108, 235, 189, 47, 131, 25, 62, 230, 37, 38, 190, 128, 68, 55, 189, 186, 193, 57, 60, 129, 97, 80, 188, 12, 79, 14, 62, 121, 20, 28, 62, 239, 172, 192, 189, 26, 198, 223, 189, 117, 94, 90, 189, 12, 172, 251, 189, 167, 113, 207, 61, 90, 243, 28, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 242, 49, 190, 223, 120, 57, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {125, 206, 163, 63, 201, 171, 96, 62, 237, 101, 8, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {201, 88, 244, 189, 190, 101, 24, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}