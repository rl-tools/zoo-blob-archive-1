// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 245, 45, 63, 19, 190, 111, 63, 250, 50, 228, 62, 204, 51, 165, 188, 75, 43, 127, 60, 44, 79, 154, 190, 146, 143, 208, 190, 220, 240, 211, 61, 207, 142, 115, 190, 14, 47, 166, 187, 103, 7, 48, 63, 151, 61, 26, 191, 149, 202, 3, 190, 95, 222, 120, 190, 114, 127, 24, 63, 229, 201, 143, 62, 159, 108, 203, 188, 231, 201, 217, 62, 149, 178, 201, 62, 124, 163, 18, 63, 131, 74, 177, 188, 63, 219, 31, 63, 177, 91, 128, 190, 46, 86, 6, 190, 226, 86, 75, 62, 238, 156, 235, 189, 76, 235, 105, 190, 72, 237, 75, 63, 221, 116, 163, 190, 94, 6, 18, 191, 30, 68, 137, 61, 128, 254, 243, 190, 91, 163, 198, 62, 49, 161, 195, 190, 96, 81, 101, 62, 179, 5, 154, 190, 223, 63, 136, 190, 82, 166, 90, 63, 9, 76, 4, 190, 105, 140, 72, 189, 233, 81, 164, 62, 7, 163, 4, 191, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 172, 172, 141, 190, 70, 142, 7, 191, 131, 165, 7, 62, 252, 102, 158, 62, 220, 179, 21, 63, 48, 247, 119, 62, 30, 245, 6, 62, 206, 163, 36, 191, 214, 120, 50, 189, 169, 102, 226, 62, 171, 225, 6, 191, 128, 181, 251, 189, 191, 230, 244, 62, 88, 75, 49, 190, 168, 147, 17, 63, 224, 58, 250, 190, 199, 3, 236, 190, 132, 30, 34, 63, 27, 193, 4, 62, 23, 166, 113, 61, 71, 177, 163, 62, 51, 170, 151, 62, 137, 211, 48, 191, 145, 37, 167, 62, 139, 77, 53, 63, 221, 81, 37, 63, 118, 148, 14, 60, 86, 28, 29, 191, 3, 215, 54, 63, 55, 26, 71, 61, 231, 73, 163, 62, 134, 225, 247, 190, 107, 127, 196, 190, 144, 28, 228, 189, 52, 65, 14, 190, 172, 113, 254, 187, 7, 131, 79, 62, 53, 21, 190, 62, 158, 201, 180, 190, 27, 27, 46, 63, 50, 116, 208, 190, 247, 180, 187, 190, 185, 173, 195, 62, 193, 80, 76, 63, 71, 128, 34, 61, 173, 228, 222, 190, 99, 207, 53, 61, 168, 14, 123, 62, 108, 227, 72, 190, 45, 145, 59, 62, 124, 76, 99, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 76, 51, 191, 16, 49, 150, 190, 89, 108, 166, 190, 241, 239, 68, 61, 225, 235, 94, 62, 109, 63, 10, 63, 111, 139, 128, 62, 24, 172, 178, 62, 30, 112, 176, 189, 102, 65, 174, 62, 88, 218, 18, 60, 2, 77, 153, 190, 14, 95, 142, 190, 116, 24, 74, 61, 53, 32, 19, 191, 39, 110, 20, 63, 17, 60, 36, 191, 64, 135, 231, 190, 160, 242, 155, 189, 136, 232, 157, 61, 184, 45, 54, 190, 42, 19, 81, 190, 170, 97, 202, 62, 197, 67, 236, 62, 78, 167, 232, 62, 135, 171, 217, 62, 46, 106, 116, 190, 138, 94, 89, 62, 8, 28, 9, 191, 240, 46, 146, 62, 189, 88, 150, 62, 162, 74, 255, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 57, 85, 190, 165, 188, 66, 61, 207, 56, 207, 190, 253, 239, 6, 191, 208, 45, 189, 61, 1, 24, 236, 61, 231, 233, 199, 189, 49, 25, 131, 62, 207, 9, 14, 62, 72, 20, 209, 188, 191, 185, 72, 190, 168, 75, 58, 191, 36, 29, 128, 62, 247, 125, 218, 190, 179, 179, 39, 62, 22, 179, 141, 62, 203, 70, 230, 190, 173, 75, 15, 61, 52, 21, 70, 62, 147, 110, 68, 61, 171, 241, 165, 188, 134, 105, 82, 190, 118, 225, 136, 187, 233, 127, 130, 189, 150, 116, 153, 61, 87, 24, 98, 188, 194, 221, 3, 61, 155, 162, 193, 190, 3, 181, 101, 190, 202, 97, 22, 190, 45, 62, 250, 61, 190, 58, 180, 61, 117, 191, 154, 62, 236, 192, 174, 190, 6, 139, 10, 62, 101, 159, 189, 62, 181, 196, 215, 189, 91, 106, 114, 189, 241, 242, 182, 189, 137, 102, 85, 190, 124, 217, 159, 189, 61, 175, 19, 190, 96, 251, 33, 62, 111, 85, 76, 61, 29, 123, 49, 190, 222, 37, 116, 61, 158, 209, 163, 61, 190, 22, 42, 62, 138, 44, 151, 62, 224, 13, 41, 189, 233, 32, 222, 190, 163, 152, 106, 60, 20, 175, 138, 189, 198, 92, 124, 62, 240, 200, 118, 190, 136, 213, 151, 62, 148, 118, 130, 61, 0, 106, 61, 190, 212, 102, 78, 188, 42, 223, 97, 62, 222, 151, 89, 190, 72, 84, 212, 61, 98, 154, 247, 189, 82, 45, 33, 189, 202, 220, 111, 190, 137, 119, 85, 185, 103, 3, 24, 188, 87, 248, 15, 189, 198, 48, 173, 189, 210, 12, 93, 62, 243, 29, 123, 62, 174, 96, 27, 189, 170, 153, 203, 61, 179, 112, 130, 62, 239, 203, 25, 190, 154, 120, 92, 189, 83, 64, 248, 189, 211, 8, 184, 59, 93, 0, 72, 61, 69, 133, 218, 61, 241, 255, 114, 189, 179, 142, 89, 61, 134, 18, 11, 189, 186, 216, 87, 189, 205, 159, 144, 62, 125, 13, 24, 190, 178, 123, 0, 60, 195, 101, 254, 61, 77, 152, 45, 190, 97, 98, 162, 61, 15, 250, 13, 62, 96, 67, 185, 189, 144, 100, 20, 62, 151, 104, 61, 61, 98, 110, 155, 189, 152, 175, 212, 188, 164, 93, 193, 61, 65, 144, 9, 62, 215, 223, 130, 190, 47, 57, 188, 61, 214, 113, 179, 189, 128, 170, 139, 189, 220, 171, 173, 189, 122, 244, 133, 59, 63, 206, 69, 62, 60, 100, 25, 190, 90, 169, 68, 189, 193, 48, 169, 190, 15, 73, 246, 189, 228, 198, 206, 188, 4, 251, 12, 61, 0, 144, 97, 190, 21, 42, 45, 190, 177, 109, 86, 62, 21, 91, 159, 62, 80, 254, 64, 189, 111, 26, 98, 61, 254, 48, 31, 61, 192, 44, 146, 190, 223, 175, 91, 190, 103, 237, 166, 190, 121, 197, 238, 61, 244, 0, 145, 61, 206, 92, 254, 61, 51, 7, 60, 62, 49, 31, 80, 190, 5, 95, 253, 189, 0, 106, 5, 62, 229, 42, 165, 190, 182, 24, 227, 61, 118, 164, 12, 191, 252, 224, 186, 190, 193, 122, 244, 61, 233, 158, 50, 62, 223, 26, 199, 60, 211, 207, 140, 62, 115, 194, 132, 59, 161, 225, 2, 190, 134, 89, 191, 190, 35, 36, 13, 191, 30, 64, 166, 62, 177, 20, 5, 191, 189, 73, 46, 190, 17, 112, 62, 62, 194, 3, 35, 191, 250, 48, 230, 189, 109, 102, 49, 62, 21, 207, 178, 189, 163, 9, 88, 62, 201, 39, 150, 190, 154, 104, 91, 62, 243, 130, 54, 190, 237, 107, 185, 61, 72, 197, 159, 190, 71, 163, 85, 189, 73, 175, 160, 190, 236, 217, 181, 190, 41, 14, 198, 189, 103, 247, 82, 62, 240, 166, 123, 187, 36, 214, 205, 189, 193, 159, 32, 188, 72, 75, 35, 190, 199, 175, 41, 62, 87, 5, 60, 60, 88, 134, 43, 62, 211, 202, 210, 61, 20, 112, 92, 62, 96, 41, 130, 60, 164, 85, 65, 62, 154, 164, 139, 189, 78, 64, 68, 190, 105, 27, 14, 60, 148, 128, 51, 61, 43, 90, 208, 61, 68, 2, 68, 62, 237, 109, 236, 189, 189, 170, 250, 61, 85, 212, 105, 62, 124, 119, 216, 61, 199, 30, 255, 188, 54, 51, 226, 189, 255, 64, 6, 62, 220, 227, 149, 62, 81, 13, 76, 190, 247, 35, 241, 61, 222, 24, 218, 189, 127, 120, 165, 189, 202, 171, 6, 189, 138, 204, 93, 189, 134, 229, 105, 190, 39, 249, 49, 190, 237, 87, 69, 189, 65, 155, 179, 189, 90, 234, 18, 62, 241, 127, 233, 189, 72, 1, 248, 190, 241, 159, 239, 190, 159, 98, 50, 190, 83, 11, 244, 189, 253, 251, 60, 61, 1, 81, 124, 61, 151, 245, 89, 61, 8, 161, 241, 189, 28, 249, 232, 60, 44, 76, 224, 61, 171, 251, 37, 190, 234, 69, 26, 62, 129, 220, 11, 62, 240, 75, 250, 189, 241, 234, 137, 61, 46, 220, 59, 190, 233, 96, 189, 190, 56, 212, 192, 61, 157, 9, 198, 190, 181, 219, 218, 189, 218, 125, 138, 61, 219, 127, 7, 62, 123, 100, 220, 61, 114, 65, 60, 190, 87, 255, 138, 190, 52, 37, 219, 189, 135, 145, 213, 61, 229, 85, 38, 189, 255, 197, 139, 61, 147, 86, 145, 190, 210, 235, 76, 61, 230, 247, 183, 61, 96, 246, 110, 189, 167, 211, 49, 62, 50, 7, 74, 61, 176, 50, 247, 61, 16, 19, 115, 190, 10, 32, 203, 189, 236, 40, 55, 61, 20, 139, 112, 62, 45, 9, 145, 190, 9, 212, 27, 62, 57, 40, 15, 62, 193, 30, 149, 61, 35, 72, 83, 61, 196, 221, 71, 189, 147, 76, 1, 191, 54, 215, 140, 61, 109, 148, 206, 189, 41, 251, 40, 61, 244, 70, 39, 61, 209, 234, 114, 62, 104, 121, 73, 62, 68, 183, 169, 189, 14, 77, 186, 61, 14, 48, 59, 62, 103, 21, 235, 190, 253, 11, 133, 62, 213, 234, 88, 62, 34, 14, 23, 187, 13, 20, 19, 61, 94, 120, 53, 190, 196, 243, 106, 61, 131, 57, 20, 62, 93, 218, 19, 191, 3, 72, 144, 190, 224, 246, 36, 61, 10, 51, 27, 59, 95, 101, 254, 189, 203, 158, 229, 60, 238, 119, 142, 189, 238, 140, 53, 62, 226, 211, 0, 189, 191, 30, 20, 189, 227, 245, 246, 59, 72, 254, 157, 62, 167, 150, 14, 61, 85, 216, 30, 190, 185, 96, 44, 190, 140, 19, 54, 189, 69, 109, 49, 191, 236, 163, 121, 190, 198, 159, 220, 190, 45, 68, 248, 189, 60, 240, 175, 62, 69, 78, 225, 57, 93, 237, 54, 62, 59, 204, 43, 61, 79, 218, 81, 190, 76, 71, 244, 61, 38, 82, 9, 62, 66, 15, 156, 189, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 80, 242, 184, 61, 51, 225, 7, 189, 60, 245, 32, 59, 85, 185, 178, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 178, 70, 237, 189, 83, 214, 30, 62, 224, 112, 192, 189, 57, 27, 70, 61, 137, 119, 132, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 36, 118, 158, 188, 195, 182, 39, 62, 145, 9, 131, 189, 69, 22, 21, 62, 149, 19, 14, 61, 161, 147, 253, 188, 173, 243, 45, 190, 125, 190, 18, 190, 214, 20, 241, 189, 242, 212, 41, 190, 107, 73, 9, 190, 232, 223, 171, 190, 215, 131, 39, 191, 170, 170, 170, 189, 36, 253, 102, 189, 119, 119, 56, 190, 162, 46, 19, 190, 35, 7, 202, 189, 115, 216, 253, 189, 9, 214, 220, 190, 146, 180, 24, 191, 35, 156, 156, 62, 46, 174, 9, 191, 34, 5, 45, 190, 198, 1, 108, 188, 109, 62, 243, 60, 199, 163, 164, 190, 114, 155, 53, 62, 182, 140, 216, 189, 201, 129, 250, 61, 24, 77, 179, 190, 83, 65, 171, 190, 93, 87, 152, 189, 212, 40, 169, 62, 234, 183, 162, 190, 90, 36, 180, 61, 47, 239, 50, 191, 129, 59, 108, 60, 90, 217, 30, 62, 97, 254, 96, 62, 235, 45, 106, 62, 50, 19, 67, 189, 170, 80, 161, 189, 33, 254, 15, 191, 100, 239, 242, 190, 169, 89, 2, 190, 12, 198, 109, 189, 80, 101, 132, 190, 173, 231, 70, 190, 128, 14, 126, 188, 224, 29, 45, 190, 112, 80, 49, 190, 23, 155, 46, 191, 103, 162, 16, 62, 180, 59, 60, 191, 236, 243, 29, 190, 159, 39, 65, 62, 244, 3, 52, 190, 126, 70, 94, 61, 19, 134, 4, 190, 40, 119, 121, 190, 182, 223, 41, 62, 16, 92, 86, 61, 90, 148, 114, 188, 65, 170, 131, 190, 85, 24, 163, 62, 63, 134, 142, 190, 142, 94, 183, 61, 215, 209, 165, 190, 46, 126, 188, 189, 117, 225, 116, 189, 188, 241, 12, 189, 214, 232, 59, 62, 127, 43, 119, 190, 153, 91, 149, 61, 124, 103, 109, 189, 9, 204, 121, 62, 71, 158, 107, 190, 131, 83, 61, 190, 220, 221, 56, 62, 196, 94, 214, 61, 82, 126, 137, 61, 249, 206, 27, 61, 146, 90, 18, 61, 103, 174, 145, 188, 91, 165, 177, 189, 160, 226, 89, 62, 106, 164, 250, 61, 100, 63, 255, 189, 66, 239, 223, 61, 191, 231, 130, 187, 63, 63, 101, 61, 41, 116, 99, 189, 182, 202, 236, 189, 231, 237, 211, 61, 155, 39, 170, 61, 62, 71, 79, 61, 198, 116, 168, 190, 81, 51, 85, 62, 9, 79, 231, 61, 103, 32, 71, 62, 205, 38, 147, 188, 14, 145, 219, 61, 171, 126, 89, 189, 168, 73, 141, 61, 98, 94, 24, 62, 11, 234, 171, 61, 234, 251, 2, 61, 211, 249, 56, 61, 126, 52, 239, 61, 77, 66, 87, 188, 18, 40, 125, 61, 244, 220, 208, 189, 13, 166, 212, 189, 220, 133, 15, 190, 89, 87, 9, 61, 86, 161, 154, 62, 202, 107, 161, 190, 28, 85, 130, 62, 230, 23, 128, 59, 190, 150, 191, 61, 241, 3, 86, 62, 188, 254, 130, 190, 210, 99, 164, 190, 251, 230, 3, 62, 134, 26, 236, 189, 223, 228, 178, 189, 119, 139, 126, 187, 213, 45, 164, 188, 178, 87, 168, 61, 115, 205, 108, 62, 227, 57, 9, 61, 240, 11, 94, 62, 152, 157, 10, 190, 117, 218, 192, 189, 113, 103, 201, 61, 122, 84, 61, 62, 73, 255, 220, 62, 233, 76, 132, 189, 184, 216, 167, 62, 46, 22, 251, 59, 57, 11, 17, 190, 219, 102, 8, 189, 253, 164, 59, 60, 13, 122, 151, 190, 117, 215, 90, 189, 148, 73, 86, 190, 196, 33, 220, 61, 70, 147, 64, 62, 53, 218, 46, 188, 42, 158, 130, 62, 8, 68, 207, 188, 186, 43, 253, 61, 227, 199, 188, 61, 126, 111, 196, 190, 44, 212, 251, 190, 31, 178, 128, 62, 23, 90, 247, 190, 1, 62, 148, 62, 1, 69, 74, 190, 188, 118, 85, 62, 245, 100, 184, 62, 228, 15, 155, 61, 228, 219, 66, 190, 4, 19, 133, 61, 86, 154, 96, 190, 205, 147, 105, 62, 69, 80, 76, 190, 225, 83, 89, 61, 179, 121, 167, 61, 117, 227, 4, 190, 24, 128, 32, 61, 6, 248, 144, 61, 119, 165, 226, 61, 248, 255, 78, 60, 255, 166, 217, 189, 36, 69, 121, 62, 177, 45, 143, 61, 131, 160, 11, 62, 161, 55, 50, 190, 59, 19, 204, 189, 152, 102, 188, 189, 252, 206, 242, 189, 191, 188, 31, 190, 56, 77, 190, 62, 28, 2, 105, 188, 210, 236, 92, 190, 53, 82, 191, 189, 126, 162, 72, 62, 169, 8, 60, 190, 218, 155, 225, 189, 201, 187, 89, 190, 234, 62, 225, 61, 155, 164, 217, 61, 54, 10, 64, 62, 170, 199, 184, 61, 115, 91, 57, 188, 116, 78, 189, 190, 160, 124, 136, 61, 53, 215, 153, 189, 182, 245, 72, 189, 75, 76, 227, 60, 93, 52, 50, 61, 59, 115, 182, 190, 73, 42, 0, 191, 255, 207, 105, 62, 225, 123, 167, 61, 227, 143, 125, 189, 16, 204, 228, 61, 185, 16, 174, 189, 6, 40, 148, 61, 196, 132, 234, 189, 166, 141, 21, 191, 61, 244, 190, 62, 129, 217, 212, 190, 6, 21, 13, 189, 215, 89, 27, 61, 170, 211, 29, 190, 107, 132, 113, 60, 12, 57, 141, 62, 20, 106, 255, 189, 81, 52, 104, 61, 223, 202, 161, 61, 23, 255, 45, 62, 152, 4, 121, 61, 184, 214, 158, 61, 153, 208, 207, 61, 21, 40, 255, 61, 213, 133, 189, 190, 36, 150, 125, 189, 141, 143, 244, 189, 205, 246, 25, 62, 58, 229, 13, 62, 129, 0, 130, 189, 204, 128, 0, 62, 84, 253, 224, 189, 13, 61, 13, 189, 109, 80, 205, 189, 123, 75, 154, 189, 160, 249, 56, 61, 12, 145, 124, 189, 164, 74, 6, 190, 58, 112, 70, 60, 116, 36, 221, 189, 235, 74, 143, 189, 28, 197, 43, 60, 160, 169, 215, 189, 56, 22, 225, 60, 206, 157, 51, 61, 136, 109, 224, 189, 21, 224, 242, 189, 115, 19, 21, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 34, 170, 159, 61, 97, 120, 25, 61, 3, 54, 31, 190, 27, 45, 1, 62, 152, 199, 161, 189, 76, 54, 184, 61, 156, 24, 238, 189, 2, 211, 176, 189, 212, 64, 231, 189, 66, 132, 26, 190, 166, 228, 128, 190, 143, 48, 139, 189, 135, 243, 16, 190, 80, 98, 27, 190, 221, 187, 154, 189, 143, 122, 176, 61, 19, 88, 177, 61, 102, 30, 65, 62, 194, 122, 134, 61, 29, 44, 105, 62, 203, 214, 62, 189, 47, 130, 210, 190, 75, 173, 231, 189, 158, 225, 63, 189, 214, 71, 232, 188, 52, 101, 186, 61, 41, 191, 147, 190, 89, 66, 22, 62, 219, 19, 220, 188, 73, 127, 7, 60, 182, 147, 104, 62, 39, 127, 83, 190, 102, 173, 138, 189, 34, 239, 219, 61, 39, 141, 94, 190, 84, 171, 4, 62, 82, 185, 167, 189, 227, 217, 151, 189, 32, 9, 171, 189, 47, 22, 193, 189, 194, 90, 145, 60, 3, 254, 14, 61, 56, 64, 91, 190, 153, 42, 12, 190, 143, 99, 130, 188, 230, 246, 28, 62, 65, 173, 151, 189, 165, 59, 30, 62, 62, 130, 11, 62, 225, 39, 66, 62, 71, 173, 228, 61, 217, 107, 223, 61, 111, 244, 49, 62, 13, 219, 137, 190, 130, 175, 128, 190, 88, 82, 21, 189, 181, 111, 11, 190, 150, 157, 0, 61, 121, 236, 46, 190, 132, 133, 191, 62, 180, 187, 139, 62, 3, 71, 242, 189, 118, 113, 28, 62, 196, 159, 231, 189, 69, 191, 229, 61, 122, 63, 134, 61, 114, 201, 71, 191, 168, 142, 84, 62, 182, 231, 186, 189, 147, 61, 221, 189, 128, 55, 122, 62, 32, 58, 138, 190, 94, 167, 68, 60, 50, 166, 94, 188, 142, 16, 144, 188, 64, 7, 129, 61, 1, 10, 5, 189, 19, 252, 245, 188, 162, 224, 9, 189, 10, 70, 238, 189, 70, 113, 57, 61, 0, 73, 152, 62, 194, 182, 130, 60, 57, 140, 215, 188, 88, 124, 20, 189, 3, 122, 181, 59, 246, 104, 17, 190, 94, 94, 31, 62, 220, 182, 146, 59, 242, 244, 223, 61, 19, 179, 37, 59, 36, 47, 217, 188, 39, 121, 161, 190, 138, 232, 43, 62, 79, 128, 122, 187, 165, 137, 3, 190, 114, 255, 188, 61, 107, 184, 4, 62, 144, 116, 137, 61, 66, 72, 219, 189, 7, 147, 36, 190, 225, 121, 85, 62, 80, 58, 163, 190, 174, 243, 207, 59, 22, 42, 1, 61, 215, 27, 231, 61, 96, 56, 43, 62, 139, 235, 120, 189, 96, 23, 73, 62, 241, 157, 48, 62, 168, 187, 188, 190, 190, 211, 136, 61, 46, 37, 192, 188, 129, 186, 127, 189, 21, 112, 134, 61, 86, 182, 192, 61, 74, 179, 233, 189, 189, 64, 164, 61, 249, 232, 188, 190, 29, 114, 111, 62, 185, 71, 64, 189, 55, 135, 83, 62, 143, 183, 204, 189, 86, 205, 38, 190, 186, 28, 241, 190, 36, 38, 6, 62, 13, 170, 178, 190, 187, 79, 165, 188, 206, 105, 52, 190, 119, 36, 51, 62, 109, 175, 41, 62, 110, 114, 204, 189, 26, 178, 77, 187, 27, 237, 121, 188, 85, 185, 215, 190, 182, 141, 69, 62, 128, 1, 1, 190, 87, 14, 133, 60, 211, 225, 2, 190, 20, 106, 197, 61, 45, 148, 144, 190, 56, 168, 29, 191, 219, 157, 90, 62, 55, 76, 22, 62, 101, 1, 134, 190, 219, 137, 23, 61, 201, 166, 183, 61, 66, 208, 90, 190, 22, 94, 82, 188, 228, 87, 215, 190, 250, 253, 163, 62, 192, 72, 6, 191, 36, 191, 163, 189, 113, 222, 27, 62, 147, 254, 240, 189, 246, 120, 133, 61, 88, 56, 71, 62, 203, 118, 48, 190, 222, 214, 148, 61, 166, 153, 173, 189, 36, 180, 128, 188, 27, 252, 8, 190, 245, 149, 136, 60, 245, 92, 136, 190, 173, 28, 196, 189, 143, 216, 188, 190, 24, 170, 254, 190, 85, 110, 153, 61, 255, 103, 13, 62, 153, 119, 10, 62, 172, 98, 26, 57, 243, 12, 154, 61, 122, 169, 139, 189, 55, 29, 81, 189, 80, 106, 213, 61, 146, 129, 202, 59, 169, 165, 29, 190, 16, 216, 129, 62, 53, 247, 246, 61, 94, 64, 155, 189, 33, 231, 207, 60, 198, 18, 140, 190, 138, 62, 194, 61, 23, 58, 177, 188, 240, 156, 124, 189, 182, 150, 5, 62, 178, 214, 20, 190, 196, 153, 64, 61, 75, 14, 161, 60, 180, 133, 211, 189, 234, 158, 211, 61, 189, 130, 125, 189, 154, 92, 1, 61, 73, 190, 128, 190, 229, 131, 132, 190, 20, 237, 106, 189, 238, 47, 154, 59, 13, 237, 237, 189, 114, 69, 225, 60, 87, 68, 204, 189, 93, 112, 197, 189, 250, 236, 13, 62, 232, 76, 76, 62, 14, 181, 218, 61, 88, 103, 89, 189, 73, 13, 239, 61, 183, 136, 74, 189, 43, 46, 38, 62, 115, 78, 74, 62, 79, 91, 138, 189, 185, 227, 172, 189, 70, 22, 69, 61, 158, 232, 26, 62, 43, 250, 169, 190, 205, 225, 136, 190, 250, 225, 189, 189, 95, 0, 246, 189, 61, 229, 3, 189, 9, 7, 26, 62, 142, 67, 55, 62, 55, 235, 9, 190, 74, 15, 55, 62, 148, 199, 56, 62, 103, 134, 204, 60, 106, 38, 180, 188, 251, 26, 228, 189, 223, 84, 39, 189, 23, 147, 191, 189, 204, 73, 8, 189, 62, 140, 190, 189, 52, 174, 113, 61, 167, 116, 145, 189, 177, 209, 189, 189, 210, 128, 81, 187, 10, 212, 238, 190, 50, 37, 226, 61, 125, 155, 151, 189, 250, 234, 140, 190, 70, 231, 67, 61, 187, 101, 18, 62, 145, 198, 253, 60, 193, 142, 135, 62, 104, 7, 3, 188, 240, 237, 40, 62, 32, 231, 173, 190, 71, 148, 172, 190, 254, 18, 143, 61, 4, 54, 29, 190, 110, 49, 225, 189, 16, 93, 224, 61, 3, 101, 151, 190, 96, 211, 3, 62, 241, 84, 142, 62, 12, 54, 20, 190, 68, 150, 90, 62, 229, 46, 89, 60, 138, 227, 49, 62, 173, 251, 251, 188, 207, 111, 83, 190, 186, 123, 166, 61, 94, 89, 201, 61, 165, 148, 75, 189, 152, 33, 204, 61, 250, 7, 16, 189, 20, 148, 141, 61, 219, 106, 11, 62, 86, 222, 197, 60, 182, 50, 211, 189, 243, 22, 34, 61, 170, 165, 75, 61, 13, 137, 166, 61, 14, 46, 14, 60, 164, 59, 128, 61, 35, 124, 161, 62, 135, 156, 35, 188, 6, 63, 42, 60, 183, 10, 132, 61, 121, 177, 168, 190, 246, 130, 148, 189, 244, 183, 40, 61, 162, 252, 247, 189, 175, 85, 56, 62, 239, 101, 50, 190, 70, 219, 1, 190, 77, 69, 254, 189, 167, 82, 217, 189, 218, 3, 217, 59, 188, 124, 103, 60, 91, 74, 31, 190, 209, 152, 110, 61, 178, 238, 154, 61, 81, 239, 58, 62, 61, 167, 143, 188, 171, 139, 147, 189, 200, 206, 62, 190, 39, 44, 18, 189, 114, 234, 189, 189, 163, 97, 11, 62, 159, 91, 44, 190, 127, 219, 124, 61, 5, 155, 177, 190, 187, 152, 190, 189, 118, 133, 111, 61, 212, 79, 95, 62, 116, 171, 241, 61, 194, 197, 104, 62, 135, 87, 36, 188, 64, 95, 115, 62, 39, 165, 166, 189, 247, 20, 223, 190, 63, 5, 209, 61, 110, 68, 224, 188, 28, 142, 176, 188, 70, 176, 126, 62, 145, 164, 143, 190, 233, 172, 22, 189, 249, 3, 59, 61, 248, 221, 1, 190, 118, 46, 179, 60, 128, 149, 119, 190, 241, 235, 135, 62, 158, 158, 223, 189, 87, 218, 25, 190, 122, 246, 170, 60, 253, 109, 195, 189, 87, 184, 37, 190, 186, 116, 168, 61, 201, 201, 5, 190, 246, 208, 236, 58, 115, 187, 243, 189, 28, 142, 7, 62, 194, 139, 52, 190, 212, 167, 128, 62, 102, 171, 192, 61, 24, 197, 157, 190, 241, 88, 251, 188, 14, 205, 58, 189, 126, 117, 1, 190, 51, 190, 36, 190, 181, 218, 147, 190, 53, 194, 64, 61, 247, 250, 222, 61, 17, 102, 176, 190, 185, 185, 117, 62, 215, 69, 189, 61, 209, 237, 63, 62, 102, 182, 248, 61, 119, 150, 12, 189, 204, 59, 150, 190, 115, 153, 151, 62, 57, 41, 145, 190, 8, 6, 179, 62, 233, 33, 89, 190, 110, 35, 179, 62, 21, 90, 137, 62, 186, 100, 247, 61, 209, 171, 130, 61, 86, 133, 122, 61, 163, 225, 160, 190, 173, 39, 166, 62, 22, 252, 220, 188, 244, 201, 39, 61, 158, 55, 11, 190, 220, 97, 4, 62, 12, 47, 166, 61, 22, 246, 84, 188, 145, 192, 120, 61, 113, 127, 236, 188, 168, 160, 143, 190, 66, 10, 148, 190, 158, 27, 219, 61, 72, 120, 10, 189, 243, 72, 22, 62, 35, 85, 9, 190, 205, 14, 185, 189, 81, 83, 18, 61, 131, 142, 171, 61, 250, 116, 169, 61, 226, 76, 55, 62, 17, 54, 16, 62, 37, 177, 27, 190, 56, 211, 96, 189, 222, 133, 159, 61, 238, 232, 161, 189, 60, 102, 11, 62, 239, 225, 152, 190, 68, 78, 42, 190, 115, 235, 84, 190, 140, 209, 62, 189, 171, 60, 76, 190, 80, 232, 35, 61, 96, 107, 156, 190, 170, 22, 36, 61, 37, 118, 236, 61, 77, 217, 107, 61, 204, 5, 177, 61, 69, 92, 116, 188, 96, 25, 253, 189, 196, 95, 174, 61, 225, 207, 239, 61, 185, 198, 128, 189, 44, 60, 14, 62, 9, 161, 12, 62, 177, 160, 231, 61, 222, 229, 241, 61, 186, 45, 56, 61, 98, 58, 192, 189, 193, 194, 180, 189, 150, 117, 81, 61, 143, 195, 141, 189, 217, 131, 73, 189, 183, 62, 44, 62, 167, 75, 29, 62, 89, 128, 151, 186, 160, 169, 242, 189, 114, 46, 182, 189, 164, 82, 194, 61, 136, 129, 171, 61, 143, 122, 15, 191, 158, 79, 118, 62, 103, 99, 183, 188, 203, 201, 135, 60, 162, 71, 61, 62, 137, 89, 132, 190, 233, 79, 162, 190, 210, 103, 169, 190, 188, 153, 21, 62, 161, 106, 189, 60, 41, 92, 250, 188, 173, 215, 133, 61, 188, 7, 182, 61, 89, 205, 46, 190, 104, 183, 37, 62, 105, 156, 141, 189, 57, 18, 212, 188, 132, 127, 167, 188, 199, 16, 107, 188, 74, 194, 121, 188, 3, 44, 80, 60, 109, 71, 226, 189, 127, 55, 27, 190, 241, 6, 212, 61, 83, 108, 203, 61, 165, 1, 48, 190, 143, 77, 133, 189, 223, 39, 34, 190, 7, 79, 14, 61, 252, 146, 17, 189, 6, 125, 39, 61, 10, 47, 153, 189, 247, 13, 220, 189, 172, 115, 177, 189, 93, 227, 43, 190, 10, 201, 144, 189, 251, 160, 90, 61, 134, 177, 247, 61, 39, 206, 135, 189, 239, 129, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 22, 166, 61, 188, 236, 77, 187, 126, 243, 56, 62, 217, 111, 20, 190, 92, 141, 9, 62, 60, 163, 59, 189, 155, 24, 178, 62, 75, 252, 111, 62, 155, 248, 13, 61, 31, 120, 8, 190, 107, 159, 211, 61, 235, 98, 31, 61, 217, 230, 202, 61, 103, 186, 111, 62, 241, 19, 65, 62, 75, 33, 83, 62, 15, 218, 165, 61, 199, 128, 72, 189, 207, 120, 92, 62, 132, 174, 143, 60, 119, 107, 67, 62, 152, 4, 103, 189, 98, 88, 64, 62, 197, 9, 192, 61, 229, 62, 241, 187, 219, 26, 44, 62, 123, 174, 189, 62, 154, 218, 9, 62, 94, 163, 242, 61, 94, 234, 68, 190, 195, 43, 216, 61, 142, 109, 46, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 43, 4, 63, 7, 62, 84, 190, 228, 73, 44, 62, 201, 84, 135, 190, 73, 121, 23, 63, 230, 251, 167, 61, 77, 28, 21, 190, 65, 11, 166, 190, 88, 1, 179, 190, 21, 82, 152, 189, 46, 13, 65, 63, 45, 111, 24, 63, 130, 120, 94, 62, 239, 30, 4, 190, 188, 21, 110, 190, 230, 188, 167, 189, 41, 13, 127, 62, 168, 254, 51, 188, 232, 244, 141, 62, 130, 148, 139, 62, 48, 132, 147, 189, 231, 137, 35, 190, 143, 149, 176, 62, 224, 125, 49, 62, 131, 147, 37, 190, 142, 225, 167, 62, 140, 177, 68, 189, 139, 70, 209, 62, 228, 191, 243, 190, 236, 186, 96, 190, 158, 71, 132, 62, 195, 45, 159, 61, 52, 121, 203, 189, 108, 91, 69, 62, 151, 116, 230, 189, 90, 86, 148, 62, 240, 94, 194, 61, 101, 149, 84, 190, 137, 225, 97, 190, 135, 224, 110, 190, 154, 50, 165, 61, 236, 160, 52, 62, 140, 147, 74, 62, 29, 164, 41, 61, 15, 184, 40, 188, 2, 138, 17, 190, 82, 228, 26, 62, 136, 204, 104, 190, 37, 140, 120, 189, 142, 139, 139, 61, 29, 200, 89, 190, 231, 98, 96, 62, 90, 178, 47, 190, 4, 246, 174, 189, 225, 11, 38, 61, 234, 87, 131, 61, 212, 63, 244, 61, 185, 254, 78, 62, 32, 62, 65, 190, 11, 106, 155, 189, 119, 31, 140, 60, 7, 10, 243, 188, 23, 229, 112, 61, 216, 238, 161, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 111, 94, 190, 153, 1, 16, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {30, 139, 84, 190, 22, 127, 10, 191, 235, 28, 82, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 194, 164, 63, 36, 40, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}