// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 99, 112, 63, 133, 217, 112, 63, 73, 102, 192, 62, 191, 197, 69, 189, 151, 66, 98, 190, 126, 126, 166, 190, 164, 142, 168, 190, 249, 213, 107, 191, 124, 83, 140, 190, 50, 213, 102, 190, 180, 72, 162, 62, 250, 89, 25, 191, 226, 174, 80, 190, 69, 81, 175, 62, 8, 161, 13, 63, 246, 102, 179, 62, 91, 155, 18, 62, 158, 39, 154, 62, 19, 59, 65, 62, 17, 164, 75, 63, 87, 165, 24, 190, 113, 176, 42, 63, 190, 94, 153, 190, 218, 158, 217, 189, 98, 118, 104, 62, 199, 35, 37, 191, 209, 85, 27, 190, 199, 174, 65, 63, 234, 55, 40, 191, 50, 102, 16, 191, 53, 46, 145, 187, 35, 111, 1, 191, 206, 121, 185, 62, 179, 214, 16, 191, 60, 222, 13, 191, 16, 196, 153, 190, 123, 235, 210, 190, 140, 24, 58, 63, 210, 219, 125, 190, 48, 87, 156, 190, 160, 116, 8, 191, 77, 9, 197, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 236, 215, 238, 190, 12, 11, 50, 191, 75, 185, 197, 61, 71, 214, 44, 63, 245, 49, 20, 63, 247, 91, 128, 62, 21, 65, 8, 63, 142, 248, 111, 191, 175, 92, 0, 190, 119, 234, 245, 62, 86, 230, 98, 191, 169, 141, 93, 190, 12, 29, 38, 63, 47, 106, 200, 188, 215, 54, 244, 62, 229, 50, 158, 190, 205, 94, 150, 190, 218, 227, 40, 63, 13, 241, 191, 61, 168, 195, 158, 62, 209, 38, 152, 62, 224, 118, 73, 62, 113, 252, 84, 191, 124, 156, 138, 62, 17, 173, 83, 63, 27, 62, 248, 62, 71, 34, 172, 61, 232, 151, 25, 191, 231, 90, 120, 63, 145, 181, 5, 62, 39, 31, 244, 61, 2, 201, 155, 191, 110, 97, 242, 190, 96, 176, 180, 189, 150, 254, 6, 190, 27, 217, 33, 60, 224, 70, 86, 62, 194, 87, 94, 62, 2, 27, 222, 190, 220, 16, 87, 63, 121, 238, 47, 191, 216, 96, 147, 190, 166, 62, 203, 62, 45, 120, 78, 63, 107, 64, 32, 62, 62, 153, 249, 190, 98, 118, 213, 62, 166, 201, 16, 62, 5, 82, 129, 190, 156, 154, 34, 63, 146, 52, 39, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 104, 58, 191, 166, 193, 28, 190, 27, 105, 9, 190, 4, 222, 49, 190, 193, 39, 192, 188, 109, 127, 249, 62, 72, 77, 2, 62, 120, 18, 161, 62, 18, 198, 15, 188, 194, 245, 147, 62, 133, 225, 14, 189, 45, 172, 158, 190, 177, 142, 104, 190, 29, 42, 171, 61, 53, 32, 19, 191, 12, 34, 232, 62, 201, 164, 52, 191, 237, 182, 34, 190, 68, 1, 202, 189, 127, 189, 228, 61, 203, 191, 151, 190, 65, 13, 96, 190, 8, 140, 112, 62, 106, 75, 222, 62, 213, 179, 7, 63, 135, 201, 238, 62, 12, 226, 130, 190, 101, 131, 112, 62, 117, 96, 23, 191, 240, 176, 154, 62, 216, 155, 151, 62, 220, 211, 168, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 80, 128, 190, 114, 197, 32, 190, 162, 244, 134, 191, 227, 30, 247, 190, 127, 216, 172, 61, 77, 222, 11, 62, 104, 181, 224, 189, 70, 172, 169, 62, 189, 175, 120, 61, 28, 89, 130, 187, 44, 29, 64, 190, 157, 114, 158, 191, 103, 46, 146, 62, 162, 248, 131, 191, 179, 179, 39, 62, 223, 121, 117, 62, 199, 1, 98, 191, 138, 152, 44, 62, 118, 135, 185, 62, 18, 194, 171, 61, 23, 14, 113, 189, 8, 186, 70, 190, 76, 199, 49, 188, 247, 156, 239, 188, 116, 247, 56, 62, 190, 127, 118, 190, 217, 76, 195, 60, 99, 119, 188, 190, 40, 108, 111, 190, 23, 18, 188, 189, 86, 233, 255, 61, 213, 23, 250, 61, 220, 163, 181, 62, 141, 88, 180, 190, 98, 165, 235, 61, 160, 116, 207, 62, 206, 250, 180, 189, 150, 76, 30, 189, 227, 183, 158, 61, 10, 253, 17, 61, 191, 63, 206, 190, 202, 69, 67, 189, 252, 248, 92, 62, 196, 136, 188, 60, 167, 113, 6, 190, 89, 99, 154, 59, 158, 209, 163, 61, 45, 181, 55, 62, 27, 184, 160, 62, 205, 120, 84, 191, 81, 170, 212, 191, 120, 136, 115, 61, 125, 53, 245, 59, 243, 155, 128, 62, 72, 58, 28, 190, 1, 68, 190, 62, 86, 53, 100, 190, 13, 91, 212, 190, 205, 48, 212, 187, 131, 167, 193, 62, 153, 144, 38, 191, 3, 82, 194, 61, 52, 107, 130, 190, 136, 223, 234, 189, 45, 44, 6, 191, 93, 3, 188, 189, 76, 64, 237, 188, 172, 155, 131, 189, 209, 195, 224, 189, 109, 185, 177, 61, 158, 236, 141, 62, 213, 237, 187, 189, 128, 145, 1, 62, 121, 109, 143, 62, 105, 85, 39, 190, 34, 205, 54, 190, 80, 17, 190, 190, 88, 86, 187, 188, 93, 0, 72, 61, 224, 54, 218, 61, 35, 151, 100, 191, 179, 244, 9, 190, 184, 70, 122, 60, 132, 132, 72, 190, 152, 203, 155, 62, 126, 160, 111, 190, 30, 104, 154, 189, 224, 151, 53, 61, 119, 139, 249, 190, 117, 192, 224, 61, 130, 89, 21, 62, 76, 18, 70, 188, 64, 118, 120, 62, 7, 239, 103, 188, 160, 159, 235, 189, 116, 109, 29, 190, 236, 223, 215, 61, 34, 146, 137, 62, 215, 229, 100, 190, 102, 195, 73, 62, 234, 44, 241, 60, 245, 239, 30, 61, 228, 63, 14, 191, 112, 167, 74, 62, 249, 221, 183, 62, 36, 163, 32, 61, 107, 182, 167, 189, 200, 119, 172, 190, 127, 252, 82, 190, 228, 91, 182, 61, 4, 251, 12, 61, 252, 129, 127, 190, 249, 45, 39, 190, 115, 41, 1, 63, 221, 103, 16, 63, 97, 248, 217, 189, 162, 90, 5, 62, 83, 26, 42, 190, 79, 199, 72, 189, 90, 86, 129, 190, 240, 69, 69, 191, 113, 87, 138, 62, 132, 40, 97, 61, 35, 204, 127, 62, 162, 40, 250, 62, 106, 158, 164, 191, 79, 12, 225, 189, 22, 116, 232, 61, 183, 62, 250, 190, 52, 41, 153, 62, 144, 146, 142, 191, 65, 187, 173, 61, 89, 179, 178, 61, 4, 217, 40, 62, 225, 82, 32, 62, 80, 143, 206, 62, 142, 54, 1, 191, 222, 109, 60, 190, 184, 94, 184, 190, 178, 95, 119, 191, 180, 216, 37, 63, 159, 131, 33, 191, 189, 73, 46, 190, 187, 52, 29, 62, 74, 89, 138, 191, 100, 116, 122, 62, 107, 254, 212, 62, 187, 160, 169, 189, 200, 153, 30, 62, 242, 215, 164, 190, 111, 180, 91, 62, 223, 6, 214, 189, 220, 237, 19, 62, 28, 45, 76, 191, 195, 103, 44, 189, 128, 230, 45, 190, 138, 58, 79, 191, 2, 200, 94, 188, 101, 36, 23, 62, 15, 235, 200, 188, 93, 125, 218, 190, 78, 201, 160, 189, 186, 155, 172, 59, 239, 216, 253, 60, 255, 193, 228, 61, 47, 222, 184, 61, 121, 148, 248, 61, 126, 207, 52, 62, 131, 188, 52, 61, 112, 75, 95, 62, 85, 83, 136, 188, 182, 189, 59, 190, 120, 82, 187, 190, 190, 252, 30, 60, 43, 90, 208, 61, 224, 226, 147, 62, 86, 97, 135, 191, 170, 195, 142, 188, 11, 144, 105, 62, 187, 87, 29, 61, 155, 71, 22, 62, 179, 64, 126, 189, 209, 82, 238, 61, 129, 7, 89, 62, 170, 151, 47, 191, 209, 186, 29, 62, 56, 17, 221, 189, 215, 213, 155, 188, 150, 173, 85, 60, 158, 138, 53, 190, 127, 11, 30, 190, 96, 27, 95, 190, 177, 35, 168, 190, 76, 50, 70, 190, 14, 235, 122, 189, 161, 110, 20, 190, 13, 168, 215, 190, 13, 57, 4, 191, 37, 16, 55, 190, 96, 85, 121, 188, 201, 224, 248, 187, 219, 180, 35, 61, 47, 204, 177, 62, 156, 12, 202, 190, 242, 238, 206, 61, 207, 28, 182, 59, 171, 251, 37, 190, 160, 39, 124, 62, 107, 212, 9, 62, 92, 113, 146, 188, 166, 226, 246, 61, 250, 233, 16, 191, 104, 139, 0, 190, 222, 140, 76, 190, 208, 100, 168, 188, 7, 247, 65, 62, 24, 34, 135, 61, 21, 136, 236, 61, 146, 100, 218, 61, 238, 107, 71, 190, 95, 192, 233, 59, 117, 38, 28, 190, 144, 116, 67, 62, 124, 104, 32, 188, 34, 27, 237, 59, 169, 201, 134, 190, 251, 2, 207, 61, 235, 117, 138, 61, 213, 162, 149, 189, 170, 95, 105, 62, 9, 46, 229, 61, 162, 231, 74, 62, 192, 67, 187, 190, 100, 12, 245, 189, 224, 192, 101, 61, 189, 145, 146, 62, 144, 96, 234, 189, 95, 9, 238, 61, 57, 40, 15, 62, 98, 170, 67, 62, 38, 43, 8, 190, 203, 193, 70, 191, 0, 133, 131, 191, 4, 229, 218, 61, 79, 131, 183, 189, 145, 233, 8, 189, 126, 157, 18, 62, 85, 150, 149, 62, 154, 46, 207, 61, 132, 92, 33, 190, 1, 232, 201, 61, 221, 110, 94, 62, 102, 204, 83, 191, 116, 82, 113, 62, 135, 60, 250, 61, 229, 186, 146, 188, 219, 246, 197, 190, 204, 84, 8, 190, 32, 35, 68, 62, 63, 210, 76, 62, 136, 96, 154, 190, 38, 218, 140, 190, 213, 161, 172, 60, 186, 230, 127, 188, 58, 247, 30, 190, 176, 70, 184, 60, 57, 129, 149, 62, 165, 202, 154, 62, 153, 221, 166, 61, 69, 240, 14, 188, 227, 245, 246, 59, 198, 235, 225, 62, 255, 179, 129, 59, 192, 125, 128, 190, 46, 159, 223, 190, 41, 13, 152, 190, 135, 65, 82, 190, 237, 53, 207, 190, 18, 187, 18, 191, 219, 238, 215, 189, 172, 189, 214, 62, 73, 180, 189, 60, 224, 86, 51, 62, 240, 215, 140, 61, 127, 94, 207, 190, 31, 2, 31, 62, 129, 54, 104, 62, 209, 33, 41, 189, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 211, 128, 186, 61, 139, 124, 206, 190, 110, 149, 67, 191, 6, 119, 9, 191, 135, 61, 41, 190, 213, 233, 129, 188, 8, 191, 230, 60, 71, 153, 94, 190, 49, 32, 165, 189, 96, 46, 198, 190, 132, 115, 227, 190, 190, 214, 96, 191, 217, 79, 172, 62, 200, 194, 87, 191, 34, 5, 45, 190, 143, 229, 197, 189, 81, 74, 148, 62, 129, 3, 173, 190, 26, 201, 54, 62, 61, 132, 102, 189, 134, 197, 45, 189, 253, 77, 179, 190, 8, 151, 128, 190, 172, 7, 29, 62, 65, 34, 162, 62, 65, 181, 142, 191, 79, 252, 107, 61, 175, 131, 11, 191, 129, 59, 108, 60, 12, 142, 100, 62, 150, 8, 33, 62, 171, 225, 83, 62, 100, 115, 149, 188, 189, 146, 23, 190, 168, 131, 142, 191, 20, 32, 142, 190, 174, 12, 90, 189, 151, 163, 6, 189, 37, 5, 125, 191, 224, 231, 91, 190, 25, 200, 219, 189, 181, 244, 106, 190, 34, 132, 169, 189, 126, 223, 113, 191, 118, 224, 48, 190, 60, 6, 102, 191, 236, 243, 29, 190, 140, 187, 94, 62, 73, 68, 165, 190, 28, 193, 144, 62, 232, 198, 223, 190, 134, 142, 46, 190, 251, 158, 129, 62, 167, 243, 25, 62, 77, 129, 152, 60, 47, 9, 17, 191, 141, 251, 204, 62, 200, 4, 149, 191, 16, 97, 181, 61, 218, 167, 21, 190, 46, 126, 188, 189, 63, 7, 109, 190, 98, 123, 8, 61, 63, 95, 107, 62, 20, 175, 252, 190, 105, 191, 38, 189, 74, 15, 2, 190, 116, 174, 106, 62, 74, 74, 101, 190, 128, 57, 138, 190, 235, 174, 81, 62, 129, 79, 134, 61, 202, 102, 32, 60, 115, 149, 136, 60, 137, 184, 59, 62, 191, 11, 194, 189, 148, 196, 149, 190, 90, 254, 64, 62, 106, 164, 250, 61, 130, 21, 23, 60, 226, 103, 172, 191, 94, 148, 177, 190, 11, 1, 77, 61, 65, 133, 84, 190, 41, 217, 151, 62, 30, 220, 152, 190, 91, 85, 144, 188, 225, 95, 60, 61, 37, 108, 253, 190, 115, 242, 102, 62, 216, 163, 11, 62, 57, 127, 86, 62, 77, 149, 210, 60, 159, 190, 222, 61, 106, 249, 151, 62, 248, 172, 127, 60, 191, 105, 165, 61, 132, 185, 6, 62, 5, 202, 247, 61, 50, 54, 117, 60, 159, 3, 177, 61, 213, 37, 228, 60, 60, 138, 150, 61, 32, 84, 181, 60, 225, 59, 200, 189, 63, 248, 225, 189, 120, 164, 207, 60, 85, 19, 171, 62, 15, 54, 111, 190, 196, 158, 130, 62, 230, 23, 128, 59, 117, 144, 63, 62, 38, 35, 71, 60, 188, 190, 152, 189, 120, 191, 245, 190, 26, 249, 26, 62, 215, 110, 255, 189, 140, 133, 50, 190, 239, 211, 179, 61, 134, 126, 193, 60, 155, 104, 71, 189, 153, 238, 113, 62, 180, 255, 48, 61, 180, 206, 126, 62, 138, 117, 74, 190, 250, 21, 26, 190, 77, 243, 11, 188, 128, 15, 30, 62, 255, 202, 134, 62, 24, 159, 188, 189, 161, 215, 192, 62, 208, 98, 239, 187, 203, 152, 86, 190, 188, 193, 73, 187, 41, 205, 164, 60, 177, 53, 36, 190, 217, 98, 38, 190, 5, 156, 81, 190, 73, 249, 156, 61, 11, 74, 133, 62, 186, 50, 235, 61, 187, 34, 122, 62, 8, 68, 207, 188, 215, 131, 148, 62, 63, 134, 137, 190, 111, 98, 29, 191, 108, 42, 108, 191, 180, 192, 137, 62, 17, 9, 11, 191, 174, 89, 51, 62, 133, 64, 254, 189, 87, 225, 125, 62, 141, 233, 161, 62, 203, 210, 191, 60, 46, 89, 55, 190, 65, 139, 143, 61, 207, 5, 3, 191, 118, 137, 94, 62, 95, 189, 129, 190, 117, 220, 36, 61, 222, 72, 138, 61, 216, 152, 188, 189, 82, 126, 4, 62, 3, 108, 32, 61, 0, 23, 100, 61, 62, 7, 209, 60, 198, 64, 52, 189, 2, 140, 172, 62, 194, 78, 161, 61, 95, 71, 41, 62, 58, 191, 166, 190, 97, 164, 162, 189, 158, 24, 21, 189, 247, 168, 1, 190, 191, 188, 31, 190, 209, 110, 184, 62, 206, 144, 41, 190, 99, 193, 94, 190, 248, 136, 109, 190, 205, 163, 18, 62, 173, 130, 134, 190, 251, 140, 76, 190, 38, 190, 150, 190, 160, 152, 63, 62, 73, 5, 54, 62, 240, 162, 55, 62, 27, 205, 187, 61, 172, 58, 32, 61, 177, 21, 211, 190, 0, 240, 240, 61, 69, 5, 174, 189, 191, 39, 186, 60, 225, 206, 96, 62, 145, 98, 141, 59, 23, 201, 148, 191, 31, 36, 237, 190, 6, 157, 85, 62, 25, 108, 70, 61, 247, 103, 3, 62, 151, 132, 68, 190, 97, 53, 59, 190, 78, 48, 254, 189, 227, 234, 51, 190, 170, 92, 149, 191, 171, 111, 216, 62, 11, 55, 100, 191, 6, 21, 13, 189, 179, 38, 9, 190, 187, 157, 134, 61, 112, 50, 48, 62, 39, 211, 35, 63, 141, 62, 20, 190, 55, 198, 227, 187, 39, 188, 11, 62, 199, 28, 84, 61, 13, 45, 1, 62, 182, 67, 137, 62, 75, 33, 162, 190, 243, 133, 223, 61, 29, 23, 40, 191, 72, 254, 207, 189, 231, 175, 46, 61, 8, 184, 35, 62, 159, 134, 56, 62, 129, 0, 130, 189, 139, 66, 242, 61, 252, 21, 227, 189, 149, 100, 96, 189, 109, 80, 205, 189, 123, 75, 154, 189, 84, 17, 21, 61, 63, 11, 145, 189, 100, 189, 10, 190, 171, 117, 210, 187, 116, 36, 221, 189, 22, 186, 147, 189, 25, 232, 51, 58, 224, 227, 237, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 174, 190, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 98, 94, 8, 61, 194, 209, 34, 190, 223, 114, 228, 61, 152, 199, 161, 189, 94, 242, 150, 61, 75, 220, 244, 189, 202, 189, 183, 189, 82, 192, 233, 189, 38, 99, 28, 190, 238, 118, 253, 190, 94, 106, 31, 190, 236, 250, 130, 190, 236, 203, 194, 189, 241, 218, 181, 188, 246, 24, 93, 61, 146, 60, 190, 61, 136, 173, 102, 62, 4, 82, 5, 62, 161, 100, 139, 62, 242, 75, 89, 61, 216, 243, 16, 191, 109, 175, 142, 190, 15, 49, 28, 189, 214, 71, 232, 188, 71, 125, 20, 62, 175, 221, 147, 191, 5, 81, 215, 186, 29, 95, 164, 61, 184, 119, 40, 60, 223, 98, 156, 62, 217, 141, 66, 190, 251, 60, 4, 189, 198, 92, 184, 61, 164, 131, 250, 190, 156, 145, 25, 62, 165, 179, 166, 189, 209, 177, 32, 187, 19, 59, 240, 60, 89, 44, 10, 190, 228, 159, 217, 60, 44, 139, 121, 189, 126, 30, 238, 190, 30, 12, 80, 190, 42, 238, 28, 190, 37, 6, 71, 62, 126, 178, 248, 189, 208, 235, 24, 62, 236, 135, 18, 62, 198, 56, 147, 62, 239, 207, 166, 61, 73, 141, 9, 62, 92, 126, 119, 62, 8, 149, 190, 190, 251, 86, 172, 190, 108, 150, 145, 189, 181, 111, 11, 190, 1, 145, 206, 61, 90, 43, 91, 191, 69, 137, 12, 62, 143, 39, 210, 62, 235, 28, 8, 190, 10, 88, 152, 61, 112, 106, 116, 190, 97, 130, 36, 62, 18, 68, 203, 61, 94, 195, 132, 191, 32, 132, 96, 62, 199, 150, 173, 189, 236, 88, 208, 189, 27, 39, 181, 62, 57, 38, 123, 190, 90, 103, 252, 188, 141, 175, 219, 189, 162, 161, 134, 189, 186, 54, 218, 61, 128, 237, 126, 61, 29, 43, 125, 189, 217, 49, 177, 189, 96, 141, 153, 189, 169, 155, 205, 61, 174, 228, 207, 62, 165, 105, 204, 60, 220, 218, 130, 59, 168, 54, 181, 189, 123, 45, 11, 61, 245, 75, 168, 189, 238, 216, 27, 62, 220, 182, 146, 59, 89, 92, 22, 62, 9, 240, 108, 190, 12, 14, 46, 61, 24, 201, 235, 190, 183, 131, 56, 62, 122, 58, 72, 189, 159, 105, 110, 190, 49, 203, 18, 62, 74, 254, 83, 62, 103, 61, 231, 188, 187, 172, 234, 189, 68, 200, 69, 190, 59, 91, 129, 62, 90, 205, 188, 190, 99, 52, 248, 187, 195, 147, 165, 189, 86, 130, 210, 61, 49, 137, 147, 62, 144, 114, 127, 189, 145, 113, 119, 62, 139, 214, 221, 61, 66, 227, 241, 190, 189, 117, 26, 62, 186, 230, 39, 61, 6, 56, 12, 60, 230, 34, 62, 189, 67, 168, 202, 61, 61, 146, 4, 190, 126, 92, 233, 61, 100, 186, 190, 190, 54, 122, 38, 62, 185, 71, 64, 189, 195, 8, 69, 62, 20, 194, 231, 60, 255, 82, 152, 189, 231, 223, 63, 191, 178, 95, 105, 62, 46, 172, 139, 190, 84, 198, 8, 190, 141, 89, 8, 190, 51, 99, 129, 62, 105, 240, 247, 61, 191, 87, 38, 190, 207, 79, 86, 187, 168, 98, 208, 188, 61, 89, 62, 191, 160, 165, 130, 62, 199, 208, 245, 190, 231, 193, 27, 61, 46, 123, 154, 61, 177, 43, 95, 188, 139, 166, 126, 191, 17, 144, 20, 191, 66, 239, 77, 62, 36, 21, 10, 62, 60, 152, 105, 60, 20, 70, 110, 190, 211, 123, 39, 61, 132, 85, 158, 190, 78, 5, 161, 189, 143, 222, 109, 191, 90, 33, 148, 62, 17, 16, 136, 191, 36, 191, 163, 189, 82, 72, 160, 188, 67, 56, 250, 61, 5, 34, 166, 62, 156, 208, 55, 63, 150, 228, 55, 190, 87, 61, 110, 60, 188, 247, 175, 188, 244, 141, 8, 190, 29, 108, 53, 60, 34, 197, 115, 62, 38, 231, 86, 191, 133, 84, 224, 189, 104, 181, 247, 190, 75, 16, 0, 191, 56, 55, 180, 62, 246, 75, 35, 62, 60, 52, 76, 62, 163, 99, 252, 190, 52, 218, 82, 189, 205, 230, 167, 189, 167, 35, 83, 190, 241, 255, 214, 61, 234, 63, 134, 188, 253, 9, 193, 58, 235, 173, 18, 62, 0, 224, 154, 61, 237, 155, 161, 189, 35, 56, 150, 61, 235, 206, 148, 190, 18, 235, 104, 190, 38, 58, 19, 190, 240, 156, 124, 189, 170, 114, 89, 62, 152, 72, 85, 191, 76, 88, 130, 62, 38, 74, 47, 62, 97, 60, 8, 190, 203, 177, 254, 61, 120, 114, 25, 190, 110, 103, 45, 61, 150, 153, 43, 191, 122, 209, 152, 190, 97, 212, 124, 188, 162, 138, 54, 61, 206, 235, 191, 190, 187, 82, 229, 190, 166, 51, 216, 190, 189, 24, 219, 189, 143, 135, 253, 61, 211, 70, 8, 62, 198, 188, 114, 61, 114, 87, 125, 190, 55, 131, 148, 61, 9, 148, 191, 189, 150, 13, 63, 62, 131, 144, 162, 62, 244, 204, 131, 61, 215, 25, 137, 190, 73, 37, 103, 61, 155, 211, 13, 62, 229, 72, 19, 191, 120, 45, 86, 60, 16, 117, 79, 190, 95, 0, 246, 189, 155, 171, 31, 188, 192, 107, 33, 61, 70, 195, 43, 62, 87, 44, 252, 190, 77, 28, 59, 62, 32, 156, 33, 62, 106, 224, 69, 189, 48, 180, 194, 60, 71, 137, 177, 188, 56, 24, 71, 190, 18, 170, 110, 190, 222, 158, 162, 188, 95, 180, 248, 60, 94, 192, 119, 190, 220, 19, 86, 189, 19, 195, 74, 190, 231, 138, 24, 189, 132, 191, 50, 191, 245, 24, 139, 188, 133, 233, 246, 190, 49, 45, 46, 190, 12, 19, 137, 61, 35, 43, 239, 61, 173, 193, 130, 188, 166, 172, 173, 62, 153, 212, 58, 61, 52, 159, 84, 62, 187, 237, 107, 190, 71, 69, 43, 191, 198, 88, 124, 189, 20, 103, 36, 190, 110, 49, 225, 189, 252, 160, 38, 62, 250, 150, 88, 191, 3, 49, 12, 62, 126, 16, 241, 62, 57, 50, 5, 190, 108, 247, 114, 62, 170, 71, 14, 59, 137, 42, 93, 62, 228, 133, 165, 189, 143, 138, 227, 190, 238, 183, 189, 61, 54, 94, 211, 61, 69, 185, 77, 189, 101, 14, 78, 62, 244, 82, 173, 189, 198, 113, 74, 61, 218, 9, 155, 60, 136, 25, 208, 187, 198, 190, 155, 189, 209, 55, 239, 61, 59, 69, 123, 60, 106, 172, 107, 61, 113, 147, 52, 61, 131, 69, 0, 62, 209, 248, 194, 62, 29, 35, 53, 188, 93, 148, 195, 60, 98, 229, 60, 61, 222, 66, 164, 190, 53, 232, 2, 189, 94, 88, 210, 60, 162, 252, 247, 189, 59, 25, 89, 62, 51, 71, 193, 190, 223, 31, 6, 190, 109, 195, 132, 190, 245, 0, 177, 189, 118, 248, 4, 59, 184, 148, 79, 189, 67, 183, 206, 189, 215, 12, 1, 62, 173, 91, 16, 189, 142, 106, 33, 62, 2, 18, 35, 188, 234, 16, 245, 188, 27, 18, 110, 190, 3, 106, 91, 189, 13, 209, 73, 190, 152, 176, 228, 61, 119, 83, 233, 190, 143, 253, 143, 189, 102, 181, 121, 191, 251, 28, 184, 60, 250, 213, 158, 61, 162, 235, 21, 62, 87, 165, 28, 62, 186, 175, 89, 62, 228, 171, 78, 189, 39, 255, 130, 62, 0, 68, 84, 189, 200, 79, 89, 191, 61, 71, 232, 61, 205, 74, 168, 189, 28, 142, 176, 188, 39, 224, 105, 62, 28, 80, 140, 191, 54, 140, 56, 191, 203, 11, 83, 61, 4, 221, 68, 190, 75, 255, 52, 61, 164, 203, 148, 190, 57, 87, 83, 62, 2, 160, 232, 189, 144, 31, 45, 190, 150, 4, 41, 189, 37, 27, 75, 189, 229, 21, 179, 189, 143, 12, 103, 62, 172, 216, 15, 190, 65, 237, 250, 61, 250, 27, 14, 190, 60, 129, 231, 59, 225, 149, 18, 190, 220, 65, 144, 62, 141, 66, 205, 61, 172, 207, 12, 191, 66, 151, 189, 188, 72, 212, 153, 188, 78, 196, 20, 189, 226, 179, 157, 190, 66, 72, 148, 190, 252, 30, 158, 61, 125, 34, 36, 62, 74, 108, 65, 190, 30, 160, 76, 62, 215, 69, 189, 61, 178, 40, 183, 62, 254, 206, 185, 189, 251, 252, 63, 190, 253, 107, 50, 191, 193, 142, 137, 62, 42, 223, 195, 190, 114, 238, 243, 188, 245, 73, 70, 190, 75, 69, 187, 62, 59, 176, 126, 62, 165, 131, 99, 61, 226, 159, 117, 61, 58, 243, 173, 61, 43, 167, 24, 191, 23, 141, 167, 62, 138, 11, 84, 190, 54, 166, 50, 60, 47, 148, 147, 188, 220, 97, 4, 62, 217, 239, 155, 190, 22, 246, 84, 188, 74, 59, 246, 61, 33, 32, 136, 61, 148, 37, 67, 59, 132, 137, 231, 60, 123, 65, 143, 61, 53, 65, 187, 190, 90, 203, 124, 62, 238, 33, 198, 190, 192, 190, 185, 189, 118, 187, 229, 189, 131, 142, 171, 61, 226, 184, 16, 62, 64, 245, 135, 62, 33, 69, 50, 190, 159, 215, 23, 191, 111, 203, 150, 61, 194, 30, 19, 62, 224, 46, 99, 188, 249, 99, 151, 62, 9, 136, 21, 188, 133, 233, 59, 191, 244, 114, 203, 190, 183, 98, 40, 189, 33, 196, 76, 190, 84, 138, 134, 60, 85, 216, 11, 191, 214, 107, 95, 189, 224, 215, 7, 61, 1, 50, 214, 189, 145, 187, 77, 61, 90, 192, 251, 189, 4, 199, 14, 189, 69, 208, 203, 61, 198, 46, 182, 61, 192, 232, 94, 189, 113, 27, 82, 62, 228, 55, 14, 62, 209, 236, 20, 62, 166, 96, 133, 62, 59, 133, 225, 188, 218, 31, 8, 190, 89, 61, 167, 189, 150, 117, 81, 61, 246, 147, 70, 60, 44, 83, 35, 191, 46, 64, 166, 189, 49, 204, 145, 62, 254, 1, 172, 188, 29, 232, 4, 190, 37, 33, 23, 190, 82, 137, 18, 62, 53, 227, 224, 61, 31, 241, 90, 191, 43, 114, 148, 62, 129, 139, 48, 189, 33, 143, 133, 61, 254, 231, 147, 62, 12, 128, 130, 190, 60, 98, 154, 190, 16, 122, 240, 190, 68, 148, 1, 62, 189, 156, 21, 188, 96, 43, 21, 189, 157, 20, 133, 61, 132, 241, 151, 61, 8, 253, 52, 190, 61, 235, 38, 62, 150, 36, 179, 189, 72, 175, 139, 189, 199, 99, 46, 189, 167, 169, 200, 188, 109, 168, 206, 180, 235, 192, 100, 60, 23, 39, 19, 190, 127, 55, 27, 190, 109, 161, 97, 61, 166, 133, 185, 61, 36, 27, 96, 190, 109, 180, 176, 189, 135, 11, 57, 190, 102, 43, 202, 60, 184, 83, 73, 189, 83, 233, 87, 59, 86, 200, 96, 189, 167, 217, 149, 189, 214, 30, 13, 190, 93, 227, 43, 190, 74, 182, 164, 189, 59, 172, 143, 60, 189, 181, 12, 62, 114, 50, 60, 189, 127, 215, 95, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 58, 233, 61, 84, 227, 182, 189, 175, 125, 5, 62, 207, 35, 208, 189, 239, 85, 65, 62, 3, 229, 169, 189, 143, 7, 172, 62, 104, 3, 159, 62, 55, 178, 188, 61, 180, 26, 24, 190, 195, 38, 25, 62, 209, 195, 156, 60, 192, 66, 0, 62, 63, 161, 152, 62, 123, 114, 135, 62, 14, 160, 145, 62, 203, 255, 38, 188, 115, 123, 123, 189, 26, 198, 79, 62, 172, 107, 216, 61, 94, 110, 135, 62, 157, 212, 148, 188, 147, 222, 251, 61, 26, 63, 219, 61, 136, 207, 153, 60, 151, 206, 27, 62, 159, 64, 215, 62, 52, 71, 229, 61, 247, 63, 73, 62, 106, 229, 105, 190, 150, 206, 27, 62, 227, 86, 90, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 56, 27, 63, 10, 159, 39, 191, 50, 12, 45, 62, 156, 102, 87, 191, 193, 48, 79, 63, 27, 150, 60, 61, 34, 215, 41, 190, 75, 163, 201, 190, 209, 230, 240, 190, 254, 54, 152, 189, 5, 4, 96, 63, 143, 18, 82, 63, 4, 144, 125, 62, 173, 108, 248, 189, 5, 192, 141, 190, 70, 45, 16, 190, 145, 53, 159, 62, 201, 200, 24, 188, 239, 197, 200, 62, 229, 221, 232, 62, 193, 70, 7, 190, 198, 200, 184, 190, 155, 85, 214, 62, 154, 251, 199, 62, 141, 108, 56, 190, 132, 243, 248, 62, 9, 200, 158, 189, 141, 249, 13, 63, 80, 177, 23, 191, 150, 225, 211, 190, 238, 121, 175, 62, 125, 77, 224, 60, 197, 203, 10, 62, 207, 133, 175, 62, 241, 207, 230, 190, 176, 69, 127, 62, 172, 69, 56, 62, 71, 1, 192, 190, 195, 139, 21, 190, 149, 62, 163, 190, 29, 68, 45, 62, 97, 142, 52, 62, 87, 200, 215, 189, 165, 196, 227, 61, 97, 168, 63, 190, 221, 240, 233, 189, 54, 23, 17, 62, 101, 193, 110, 190, 15, 115, 174, 189, 91, 45, 138, 61, 151, 13, 210, 190, 90, 160, 0, 62, 84, 213, 30, 190, 135, 176, 223, 61, 129, 191, 251, 188, 92, 63, 205, 62, 109, 58, 97, 61, 127, 32, 160, 62, 56, 9, 33, 190, 57, 149, 0, 190, 157, 207, 240, 61, 1, 253, 86, 190, 195, 96, 210, 60, 198, 110, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 160, 148, 190, 57, 5, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 204, 142, 191, 100, 60, 137, 189, 140, 7, 37, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {201, 176, 32, 192, 46, 247, 6, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}