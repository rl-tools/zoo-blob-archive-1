// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 20, 120, 63, 191, 235, 118, 63, 171, 108, 191, 62, 67, 101, 82, 190, 26, 115, 83, 190, 242, 56, 107, 190, 121, 69, 203, 190, 24, 139, 135, 191, 8, 105, 55, 190, 233, 10, 36, 190, 127, 137, 169, 62, 180, 96, 12, 191, 199, 61, 137, 190, 107, 222, 164, 62, 117, 117, 9, 63, 106, 19, 123, 62, 113, 74, 25, 62, 67, 212, 150, 62, 52, 14, 196, 61, 58, 3, 133, 63, 239, 183, 2, 190, 154, 219, 32, 63, 43, 78, 177, 190, 172, 218, 158, 189, 105, 194, 118, 62, 48, 12, 54, 191, 79, 240, 35, 190, 189, 168, 61, 63, 168, 66, 73, 191, 193, 225, 4, 191, 206, 107, 125, 189, 151, 159, 237, 190, 143, 27, 177, 62, 145, 211, 108, 191, 188, 234, 5, 191, 49, 250, 88, 190, 242, 168, 13, 191, 190, 193, 76, 63, 205, 39, 181, 190, 137, 4, 201, 190, 204, 213, 37, 191, 19, 99, 183, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 213, 245, 238, 190, 189, 170, 52, 191, 50, 5, 149, 61, 222, 245, 41, 63, 31, 38, 53, 63, 76, 45, 113, 62, 139, 62, 13, 63, 87, 114, 129, 191, 142, 57, 28, 190, 97, 249, 246, 62, 78, 227, 116, 191, 67, 226, 112, 190, 15, 38, 42, 63, 68, 55, 12, 62, 106, 105, 210, 62, 81, 55, 213, 190, 37, 214, 133, 190, 109, 253, 37, 63, 28, 110, 78, 62, 164, 175, 217, 62, 73, 247, 131, 62, 41, 103, 88, 62, 25, 70, 89, 191, 237, 33, 139, 62, 64, 74, 69, 63, 83, 171, 6, 63, 116, 181, 134, 61, 77, 60, 33, 191, 254, 157, 127, 63, 34, 65, 252, 61, 25, 76, 207, 61, 132, 6, 175, 191, 71, 197, 232, 190, 96, 176, 180, 189, 150, 254, 6, 190, 27, 217, 33, 60, 141, 203, 53, 62, 60, 75, 125, 62, 112, 215, 218, 190, 55, 84, 91, 63, 124, 82, 61, 191, 188, 34, 156, 190, 157, 87, 186, 62, 81, 13, 112, 63, 144, 100, 44, 62, 76, 231, 236, 190, 218, 106, 226, 62, 213, 78, 37, 62, 145, 201, 143, 190, 239, 119, 42, 63, 166, 64, 172, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 244, 48, 191, 107, 200, 188, 190, 28, 89, 150, 190, 55, 90, 84, 190, 143, 133, 159, 189, 68, 248, 202, 62, 143, 204, 194, 61, 146, 90, 151, 62, 213, 1, 154, 57, 235, 34, 125, 62, 121, 211, 159, 189, 211, 231, 102, 190, 134, 151, 91, 190, 87, 19, 176, 60, 53, 32, 19, 191, 142, 204, 36, 63, 204, 39, 47, 191, 167, 102, 34, 190, 2, 29, 242, 189, 229, 99, 7, 62, 41, 192, 171, 190, 124, 109, 64, 190, 25, 62, 106, 62, 64, 78, 216, 62, 66, 37, 2, 63, 159, 94, 208, 62, 12, 226, 130, 190, 140, 142, 82, 62, 122, 46, 19, 191, 139, 19, 149, 62, 68, 251, 157, 62, 123, 127, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 4, 147, 190, 208, 178, 13, 190, 130, 229, 108, 191, 63, 28, 225, 190, 171, 23, 116, 61, 13, 4, 211, 61, 153, 220, 55, 190, 53, 127, 153, 62, 11, 209, 200, 60, 225, 90, 84, 189, 255, 2, 59, 190, 216, 143, 142, 191, 28, 121, 162, 62, 3, 105, 141, 191, 179, 179, 39, 62, 74, 240, 133, 62, 204, 210, 132, 191, 60, 127, 56, 62, 237, 167, 173, 62, 51, 142, 139, 61, 249, 59, 159, 189, 138, 87, 103, 190, 90, 159, 72, 188, 217, 47, 117, 189, 96, 135, 2, 62, 228, 119, 137, 190, 217, 76, 195, 60, 202, 24, 221, 190, 164, 200, 149, 190, 115, 5, 4, 190, 105, 107, 201, 61, 238, 45, 195, 61, 204, 225, 176, 62, 195, 218, 157, 190, 196, 114, 250, 189, 115, 200, 213, 62, 199, 166, 186, 189, 42, 224, 145, 189, 139, 155, 10, 62, 167, 191, 51, 189, 144, 95, 86, 191, 62, 10, 136, 189, 234, 106, 75, 62, 212, 31, 76, 189, 119, 234, 244, 189, 227, 231, 70, 61, 158, 209, 163, 61, 236, 92, 59, 62, 157, 36, 162, 62, 151, 208, 152, 191, 48, 58, 255, 191, 181, 230, 134, 60, 25, 138, 7, 59, 178, 10, 122, 62, 125, 77, 69, 190, 57, 135, 157, 62, 129, 217, 32, 190, 202, 71, 225, 190, 205, 48, 212, 187, 4, 194, 204, 62, 91, 180, 86, 191, 116, 78, 145, 61, 22, 203, 110, 190, 80, 223, 149, 189, 99, 244, 220, 190, 208, 165, 177, 189, 69, 167, 117, 61, 76, 75, 10, 190, 196, 232, 206, 189, 37, 116, 16, 62, 227, 206, 27, 62, 35, 82, 125, 189, 159, 128, 35, 62, 135, 182, 139, 62, 184, 82, 48, 190, 89, 200, 249, 189, 156, 69, 255, 190, 187, 18, 225, 188, 93, 0, 72, 61, 189, 189, 129, 61, 214, 88, 196, 191, 120, 199, 20, 189, 252, 206, 103, 61, 249, 30, 219, 189, 131, 144, 171, 62, 62, 137, 170, 190, 252, 81, 1, 189, 98, 53, 140, 61, 13, 28, 47, 191, 206, 75, 235, 61, 130, 89, 21, 62, 19, 43, 142, 189, 138, 239, 122, 62, 75, 175, 105, 61, 180, 246, 49, 190, 5, 187, 30, 190, 117, 201, 7, 62, 105, 32, 125, 62, 46, 233, 71, 190, 53, 251, 45, 62, 198, 239, 6, 190, 140, 16, 67, 188, 44, 158, 32, 191, 225, 118, 206, 61, 8, 13, 168, 62, 220, 219, 86, 188, 161, 238, 68, 190, 167, 17, 135, 190, 146, 64, 55, 190, 160, 150, 154, 61, 4, 251, 12, 61, 22, 64, 93, 190, 249, 45, 39, 190, 37, 116, 213, 62, 201, 148, 6, 63, 167, 253, 106, 190, 108, 155, 49, 189, 244, 48, 142, 190, 120, 251, 85, 187, 4, 176, 105, 190, 204, 241, 147, 191, 88, 173, 114, 62, 132, 40, 97, 61, 40, 70, 69, 62, 123, 150, 235, 62, 170, 71, 231, 191, 63, 12, 247, 60, 202, 138, 14, 191, 10, 248, 20, 191, 244, 166, 4, 62, 23, 48, 135, 191, 51, 44, 11, 62, 191, 174, 177, 61, 2, 238, 32, 62, 59, 84, 65, 62, 92, 242, 215, 62, 202, 149, 7, 191, 66, 78, 137, 190, 134, 211, 173, 190, 226, 70, 171, 191, 215, 60, 51, 63, 59, 234, 91, 191, 189, 73, 46, 190, 52, 175, 48, 62, 54, 67, 153, 191, 87, 12, 152, 62, 148, 91, 211, 62, 175, 25, 170, 189, 251, 47, 37, 62, 60, 223, 166, 190, 174, 6, 110, 62, 234, 30, 229, 189, 49, 55, 8, 62, 76, 176, 134, 191, 195, 103, 44, 189, 108, 177, 0, 190, 202, 4, 118, 191, 53, 158, 180, 188, 244, 104, 6, 62, 91, 44, 57, 189, 220, 183, 150, 190, 69, 30, 149, 189, 200, 159, 212, 61, 235, 12, 42, 189, 164, 200, 146, 61, 229, 174, 10, 62, 22, 91, 9, 190, 218, 187, 83, 62, 20, 206, 172, 61, 247, 66, 80, 62, 26, 98, 129, 189, 11, 179, 195, 189, 240, 236, 242, 190, 213, 133, 83, 60, 43, 90, 208, 61, 61, 148, 100, 62, 154, 130, 189, 191, 158, 160, 171, 61, 82, 245, 141, 62, 124, 91, 193, 61, 26, 120, 201, 61, 96, 22, 210, 189, 242, 179, 223, 61, 70, 230, 116, 62, 131, 12, 95, 191, 250, 199, 34, 62, 56, 17, 221, 189, 165, 67, 202, 189, 30, 251, 73, 60, 91, 160, 172, 189, 189, 148, 97, 190, 238, 64, 146, 190, 228, 165, 187, 190, 66, 215, 179, 190, 183, 208, 198, 60, 160, 43, 150, 190, 171, 93, 200, 190, 21, 102, 10, 191, 99, 98, 120, 190, 17, 116, 248, 188, 225, 169, 103, 61, 133, 46, 97, 61, 132, 10, 220, 62, 3, 180, 169, 190, 9, 0, 21, 189, 143, 90, 144, 61, 171, 251, 37, 190, 56, 232, 234, 62, 107, 212, 9, 62, 185, 212, 201, 186, 159, 249, 21, 62, 205, 169, 55, 191, 97, 59, 43, 189, 247, 180, 121, 190, 203, 252, 79, 62, 230, 96, 59, 62, 235, 137, 121, 189, 166, 43, 71, 62, 146, 100, 218, 61, 200, 45, 135, 190, 157, 61, 149, 189, 216, 212, 2, 191, 50, 7, 92, 62, 83, 76, 215, 189, 123, 147, 27, 188, 237, 28, 135, 190, 60, 70, 68, 190, 53, 100, 165, 61, 173, 238, 8, 189, 200, 192, 129, 62, 47, 41, 60, 62, 207, 188, 101, 62, 223, 49, 176, 190, 98, 184, 149, 189, 87, 148, 122, 61, 239, 144, 252, 61, 243, 181, 170, 189, 20, 117, 182, 61, 57, 40, 15, 62, 59, 77, 69, 62, 87, 81, 98, 190, 147, 204, 64, 191, 35, 225, 129, 191, 28, 156, 213, 61, 93, 65, 103, 189, 109, 43, 130, 188, 246, 110, 24, 62, 48, 60, 159, 62, 200, 199, 78, 62, 42, 6, 0, 190, 1, 232, 201, 61, 236, 14, 136, 62, 231, 160, 74, 191, 195, 74, 135, 62, 87, 179, 73, 62, 184, 23, 38, 61, 130, 13, 163, 61, 237, 206, 34, 190, 168, 56, 220, 62, 128, 98, 228, 61, 135, 70, 115, 190, 61, 172, 100, 190, 41, 16, 176, 189, 69, 216, 104, 189, 189, 103, 38, 59, 104, 107, 179, 187, 122, 180, 201, 62, 100, 147, 207, 62, 168, 138, 179, 188, 167, 130, 22, 61, 227, 245, 246, 59, 245, 178, 47, 63, 90, 196, 226, 62, 129, 191, 113, 189, 60, 144, 171, 190, 186, 252, 165, 189, 157, 95, 39, 190, 44, 35, 97, 190, 223, 144, 164, 190, 40, 137, 58, 190, 231, 58, 184, 62, 239, 192, 218, 61, 224, 86, 51, 62, 151, 87, 132, 188, 134, 147, 227, 190, 184, 67, 12, 62, 162, 5, 143, 62, 164, 62, 154, 188, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 34, 195, 131, 61, 1, 248, 158, 188, 110, 149, 67, 191, 15, 251, 65, 187, 140, 162, 76, 190, 242, 217, 156, 189, 79, 141, 3, 62, 8, 246, 167, 190, 192, 118, 246, 189, 41, 245, 128, 190, 196, 58, 234, 190, 72, 213, 157, 191, 102, 85, 53, 63, 31, 129, 80, 191, 34, 5, 45, 190, 18, 52, 161, 190, 115, 69, 186, 62, 38, 27, 109, 191, 157, 117, 161, 190, 171, 185, 202, 189, 52, 114, 180, 189, 180, 234, 192, 190, 121, 0, 120, 190, 119, 93, 37, 62, 2, 34, 165, 62, 61, 198, 129, 191, 79, 252, 107, 61, 59, 27, 53, 190, 31, 196, 90, 190, 251, 117, 103, 62, 81, 19, 225, 61, 127, 41, 71, 62, 234, 210, 254, 189, 189, 146, 23, 190, 135, 230, 144, 191, 207, 102, 137, 190, 195, 205, 175, 189, 197, 186, 128, 189, 232, 145, 150, 191, 139, 186, 9, 190, 219, 222, 186, 189, 181, 244, 106, 190, 235, 220, 198, 189, 71, 16, 92, 191, 182, 203, 92, 189, 38, 71, 89, 191, 236, 243, 29, 190, 172, 129, 92, 62, 68, 117, 223, 190, 22, 49, 197, 62, 127, 68, 8, 191, 187, 15, 73, 190, 55, 139, 103, 62, 59, 207, 236, 61, 207, 127, 159, 58, 235, 50, 34, 191, 233, 62, 187, 62, 211, 41, 144, 191, 16, 97, 181, 61, 143, 68, 231, 189, 46, 126, 188, 189, 87, 150, 157, 190, 129, 19, 4, 187, 252, 199, 64, 62, 115, 75, 25, 191, 189, 230, 34, 59, 209, 31, 251, 189, 146, 26, 150, 62, 137, 222, 133, 190, 50, 169, 189, 190, 14, 85, 129, 62, 246, 93, 201, 60, 141, 133, 40, 186, 144, 3, 224, 60, 223, 34, 170, 61, 153, 124, 210, 189, 0, 203, 131, 190, 168, 4, 104, 62, 106, 164, 250, 61, 13, 229, 32, 190, 242, 31, 174, 191, 243, 192, 171, 190, 159, 83, 94, 61, 121, 154, 161, 190, 116, 54, 122, 62, 158, 181, 159, 190, 76, 183, 118, 190, 34, 170, 161, 188, 183, 229, 155, 190, 91, 145, 101, 62, 216, 163, 11, 62, 240, 165, 133, 62, 198, 71, 68, 61, 95, 136, 26, 62, 7, 160, 160, 62, 121, 58, 194, 61, 147, 140, 62, 61, 12, 52, 36, 62, 153, 177, 57, 62, 43, 132, 193, 60, 72, 110, 249, 61, 17, 153, 22, 61, 20, 219, 146, 61, 224, 32, 15, 188, 67, 245, 222, 189, 48, 130, 237, 189, 224, 78, 235, 60, 202, 73, 214, 62, 45, 162, 55, 190, 143, 7, 141, 62, 230, 23, 128, 59, 190, 134, 66, 62, 92, 115, 204, 189, 136, 87, 201, 189, 109, 59, 1, 191, 236, 226, 10, 62, 69, 160, 194, 189, 147, 167, 40, 190, 63, 199, 179, 61, 55, 70, 157, 58, 97, 119, 27, 60, 103, 231, 114, 62, 180, 255, 48, 61, 80, 147, 123, 62, 153, 45, 107, 190, 113, 186, 34, 190, 97, 1, 113, 61, 17, 154, 73, 62, 233, 107, 92, 62, 206, 211, 34, 189, 15, 132, 11, 62, 171, 145, 43, 188, 234, 160, 182, 190, 183, 108, 206, 189, 228, 252, 147, 61, 25, 56, 112, 190, 77, 173, 11, 191, 111, 246, 126, 190, 138, 21, 150, 189, 98, 24, 119, 62, 249, 7, 250, 61, 73, 145, 144, 62, 8, 68, 207, 188, 172, 11, 103, 62, 35, 170, 186, 190, 21, 88, 112, 191, 17, 141, 159, 191, 40, 116, 14, 62, 63, 132, 58, 191, 199, 49, 156, 61, 227, 96, 186, 190, 253, 200, 31, 62, 186, 137, 172, 62, 123, 217, 97, 189, 46, 89, 55, 190, 250, 126, 160, 61, 53, 29, 86, 191, 180, 101, 22, 62, 224, 148, 185, 190, 178, 127, 2, 61, 52, 110, 77, 61, 48, 190, 51, 189, 152, 203, 80, 62, 28, 30, 136, 61, 222, 86, 185, 61, 234, 146, 71, 61, 109, 46, 35, 189, 202, 1, 162, 62, 41, 117, 161, 61, 121, 37, 45, 62, 40, 91, 175, 190, 234, 36, 174, 60, 80, 220, 34, 61, 217, 25, 181, 189, 191, 188, 31, 190, 31, 96, 156, 62, 23, 101, 141, 190, 31, 217, 89, 190, 219, 25, 123, 190, 202, 108, 16, 62, 90, 36, 118, 190, 149, 112, 94, 190, 234, 147, 149, 190, 6, 95, 54, 62, 222, 181, 111, 62, 41, 34, 70, 62, 27, 205, 187, 61, 183, 184, 73, 61, 157, 186, 227, 190, 55, 123, 5, 62, 85, 204, 8, 189, 98, 86, 129, 61, 178, 56, 69, 62, 202, 110, 201, 60, 204, 40, 150, 191, 205, 145, 179, 190, 199, 206, 56, 62, 46, 193, 145, 60, 99, 101, 197, 60, 30, 41, 65, 190, 151, 112, 213, 189, 93, 104, 105, 190, 166, 231, 59, 190, 52, 239, 142, 191, 137, 154, 233, 62, 222, 30, 118, 191, 6, 21, 13, 189, 254, 5, 27, 190, 160, 76, 180, 61, 178, 28, 66, 62, 207, 157, 54, 63, 70, 219, 35, 190, 17, 116, 230, 188, 196, 10, 231, 61, 104, 63, 52, 61, 171, 226, 172, 61, 24, 192, 78, 62, 208, 152, 185, 190, 243, 133, 223, 61, 121, 25, 58, 191, 125, 111, 53, 189, 116, 121, 198, 188, 223, 201, 209, 61, 107, 97, 229, 61, 129, 0, 130, 189, 139, 66, 242, 61, 252, 21, 227, 189, 149, 100, 96, 189, 109, 80, 205, 189, 123, 75, 154, 189, 84, 17, 21, 61, 63, 11, 145, 189, 100, 189, 10, 190, 171, 117, 210, 187, 116, 36, 221, 189, 22, 186, 147, 189, 25, 232, 51, 58, 224, 227, 237, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 174, 190, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 98, 94, 8, 61, 194, 209, 34, 190, 223, 114, 228, 61, 152, 199, 161, 189, 94, 242, 150, 61, 75, 220, 244, 189, 202, 189, 183, 189, 82, 192, 233, 189, 38, 99, 28, 190, 1, 3, 223, 190, 79, 49, 225, 189, 138, 117, 116, 190, 60, 173, 201, 189, 202, 92, 215, 60, 222, 151, 158, 61, 167, 110, 37, 61, 175, 182, 126, 62, 209, 114, 31, 62, 194, 227, 141, 62, 64, 162, 187, 61, 250, 117, 20, 191, 166, 92, 172, 190, 188, 213, 217, 188, 214, 71, 232, 188, 89, 146, 19, 62, 0, 29, 161, 191, 179, 4, 163, 61, 223, 227, 4, 62, 208, 194, 110, 61, 198, 238, 174, 62, 129, 98, 6, 190, 21, 154, 23, 188, 169, 123, 201, 61, 234, 60, 211, 190, 60, 144, 36, 62, 165, 179, 166, 189, 239, 4, 119, 188, 31, 67, 79, 61, 77, 159, 179, 189, 127, 188, 176, 61, 78, 154, 5, 59, 109, 108, 215, 190, 54, 164, 73, 190, 88, 240, 72, 190, 141, 26, 81, 62, 133, 224, 17, 190, 29, 238, 17, 62, 30, 43, 246, 61, 48, 187, 155, 62, 188, 11, 196, 61, 79, 96, 9, 62, 236, 19, 128, 62, 168, 3, 239, 190, 53, 52, 198, 190, 148, 24, 161, 189, 181, 111, 11, 190, 218, 131, 161, 61, 208, 155, 61, 191, 179, 159, 80, 62, 150, 192, 226, 62, 122, 60, 226, 189, 52, 10, 86, 61, 2, 236, 119, 190, 118, 231, 44, 62, 91, 56, 217, 61, 153, 140, 147, 191, 199, 165, 99, 62, 199, 150, 173, 189, 51, 117, 212, 189, 223, 143, 190, 62, 149, 42, 105, 190, 112, 125, 238, 189, 180, 93, 224, 189, 168, 225, 205, 189, 186, 118, 130, 61, 40, 77, 139, 60, 66, 7, 188, 189, 9, 153, 188, 189, 203, 249, 164, 189, 103, 137, 251, 61, 193, 176, 195, 62, 140, 188, 207, 188, 159, 240, 126, 188, 212, 19, 241, 189, 35, 224, 113, 188, 183, 214, 156, 189, 238, 240, 224, 61, 220, 182, 146, 59, 11, 143, 234, 61, 202, 117, 197, 190, 164, 9, 187, 60, 19, 103, 5, 191, 204, 119, 25, 62, 94, 222, 114, 189, 199, 60, 136, 190, 34, 79, 250, 61, 9, 19, 71, 62, 247, 227, 149, 60, 123, 52, 22, 190, 68, 200, 69, 190, 130, 150, 107, 62, 92, 220, 232, 190, 73, 40, 132, 188, 142, 144, 131, 189, 30, 131, 0, 62, 161, 182, 134, 62, 94, 83, 39, 61, 225, 178, 69, 61, 94, 241, 35, 62, 227, 24, 239, 190, 177, 250, 26, 62, 182, 213, 190, 61, 220, 102, 186, 60, 16, 132, 76, 189, 58, 75, 1, 62, 69, 143, 146, 189, 20, 204, 180, 60, 81, 209, 170, 190, 182, 74, 86, 62, 185, 71, 64, 189, 18, 66, 76, 62, 179, 179, 74, 189, 178, 86, 191, 189, 253, 161, 68, 191, 23, 6, 75, 62, 22, 199, 136, 190, 43, 238, 6, 190, 34, 50, 31, 190, 52, 136, 130, 62, 189, 181, 195, 61, 187, 190, 14, 190, 207, 79, 86, 187, 128, 242, 211, 60, 205, 11, 60, 191, 78, 145, 130, 62, 112, 184, 37, 191, 173, 226, 229, 188, 143, 73, 240, 60, 134, 65, 162, 62, 15, 182, 135, 191, 216, 31, 71, 189, 95, 61, 47, 62, 69, 30, 192, 61, 168, 127, 194, 61, 213, 96, 106, 190, 109, 0, 56, 62, 46, 233, 134, 190, 216, 210, 176, 189, 81, 227, 143, 191, 23, 14, 42, 63, 77, 178, 128, 191, 36, 191, 163, 189, 13, 45, 58, 189, 186, 216, 13, 62, 26, 119, 184, 62, 70, 76, 88, 63, 132, 171, 83, 190, 197, 123, 35, 188, 70, 71, 69, 189, 52, 222, 19, 190, 30, 128, 26, 60, 33, 42, 115, 62, 255, 237, 70, 191, 133, 84, 224, 189, 137, 101, 18, 190, 57, 89, 248, 190, 173, 49, 171, 62, 2, 137, 224, 61, 188, 173, 40, 62, 205, 116, 35, 191, 150, 54, 112, 189, 139, 214, 140, 190, 185, 17, 62, 190, 82, 21, 175, 61, 16, 87, 193, 188, 171, 118, 6, 59, 136, 200, 122, 62, 102, 208, 201, 61, 14, 53, 220, 189, 26, 0, 141, 61, 213, 230, 28, 191, 114, 80, 90, 190, 136, 128, 179, 190, 240, 156, 124, 189, 30, 12, 51, 62, 93, 133, 103, 191, 24, 42, 187, 62, 161, 250, 77, 62, 113, 114, 4, 190, 228, 13, 222, 61, 215, 28, 48, 190, 255, 222, 8, 61, 223, 170, 48, 191, 255, 242, 170, 190, 172, 72, 204, 189, 162, 138, 54, 61, 85, 93, 216, 190, 88, 42, 161, 190, 71, 46, 254, 190, 154, 17, 28, 190, 5, 66, 170, 61, 44, 134, 206, 61, 88, 237, 54, 62, 121, 54, 144, 190, 240, 130, 21, 62, 71, 142, 126, 189, 220, 197, 60, 62, 74, 150, 196, 62, 190, 139, 90, 61, 72, 42, 145, 190, 159, 25, 162, 61, 49, 3, 11, 62, 166, 26, 14, 191, 132, 127, 198, 61, 179, 151, 178, 189, 95, 0, 246, 189, 149, 243, 191, 59, 135, 244, 204, 60, 198, 62, 238, 61, 182, 185, 6, 191, 211, 26, 30, 62, 86, 29, 57, 62, 194, 227, 1, 189, 8, 148, 226, 56, 152, 219, 26, 189, 60, 91, 134, 189, 201, 21, 75, 190, 222, 158, 162, 188, 168, 180, 180, 61, 86, 79, 124, 190, 246, 45, 93, 189, 70, 241, 5, 190, 115, 75, 73, 60, 23, 242, 41, 191, 43, 120, 114, 188, 38, 158, 221, 190, 195, 149, 42, 190, 211, 34, 186, 61, 141, 174, 245, 61, 113, 69, 143, 189, 100, 126, 181, 62, 119, 131, 215, 61, 90, 55, 82, 62, 204, 30, 73, 190, 6, 33, 61, 191, 149, 153, 99, 190, 157, 158, 12, 190, 110, 49, 225, 189, 194, 107, 63, 62, 244, 209, 60, 191, 232, 5, 127, 62, 84, 126, 8, 63, 249, 53, 204, 189, 86, 211, 129, 62, 89, 53, 55, 61, 109, 202, 111, 62, 67, 7, 170, 189, 37, 25, 188, 190, 111, 74, 0, 62, 54, 94, 211, 61, 157, 8, 147, 189, 149, 98, 108, 62, 211, 235, 137, 189, 195, 177, 135, 61, 163, 222, 173, 61, 230, 113, 18, 189, 67, 30, 197, 189, 4, 214, 109, 61, 28, 239, 133, 60, 26, 173, 231, 61, 25, 2, 102, 61, 30, 247, 38, 62, 56, 8, 175, 62, 97, 43, 199, 189, 18, 63, 193, 57, 116, 169, 119, 61, 114, 201, 179, 190, 27, 87, 202, 60, 156, 177, 229, 58, 162, 252, 247, 189, 95, 64, 85, 62, 101, 199, 1, 191, 52, 240, 45, 190, 145, 183, 179, 190, 22, 98, 198, 189, 104, 178, 68, 61, 167, 171, 213, 188, 101, 35, 198, 189, 43, 50, 218, 61, 100, 24, 136, 61, 126, 220, 252, 61, 2, 18, 35, 188, 77, 93, 23, 189, 30, 68, 196, 190, 99, 202, 58, 189, 94, 117, 241, 189, 166, 27, 59, 62, 148, 24, 21, 191, 77, 203, 130, 61, 162, 26, 137, 191, 1, 8, 54, 62, 78, 141, 1, 62, 47, 239, 15, 62, 176, 154, 134, 62, 65, 178, 34, 62, 198, 106, 209, 189, 234, 135, 145, 62, 3, 5, 184, 187, 250, 191, 69, 191, 98, 229, 157, 62, 41, 127, 193, 60, 28, 142, 176, 188, 122, 242, 134, 62, 187, 251, 143, 191, 100, 224, 91, 191, 37, 30, 9, 60, 194, 125, 68, 190, 0, 71, 185, 61, 249, 112, 119, 190, 170, 193, 104, 62, 24, 82, 24, 190, 210, 132, 5, 61, 143, 107, 44, 188, 37, 27, 75, 189, 188, 85, 153, 60, 140, 117, 76, 62, 220, 74, 228, 189, 13, 119, 87, 62, 138, 109, 137, 189, 222, 24, 55, 188, 232, 135, 225, 189, 130, 127, 240, 62, 117, 1, 181, 61, 192, 32, 27, 191, 157, 225, 239, 188, 207, 216, 38, 60, 243, 10, 228, 188, 100, 49, 118, 190, 183, 151, 136, 190, 105, 63, 151, 61, 155, 48, 133, 62, 226, 159, 80, 190, 198, 14, 143, 62, 215, 69, 189, 61, 83, 94, 24, 63, 221, 109, 29, 190, 161, 144, 65, 190, 42, 190, 45, 191, 137, 73, 105, 62, 63, 63, 224, 190, 198, 98, 152, 189, 51, 62, 71, 190, 203, 27, 183, 62, 13, 20, 94, 62, 105, 217, 255, 61, 226, 159, 117, 61, 200, 170, 204, 61, 35, 125, 28, 191, 126, 181, 164, 62, 106, 56, 134, 190, 12, 172, 21, 189, 85, 175, 152, 188, 220, 97, 4, 62, 224, 101, 133, 190, 22, 246, 84, 188, 245, 205, 252, 61, 106, 50, 143, 61, 165, 162, 176, 187, 150, 236, 232, 60, 108, 155, 114, 61, 85, 144, 37, 190, 73, 175, 117, 62, 153, 251, 74, 189, 192, 190, 185, 189, 7, 167, 203, 61, 131, 142, 171, 61, 118, 142, 18, 62, 218, 3, 130, 62, 153, 208, 92, 190, 247, 210, 38, 191, 228, 28, 139, 61, 27, 166, 21, 62, 144, 246, 193, 188, 78, 68, 152, 62, 147, 118, 127, 186, 219, 91, 62, 191, 87, 13, 183, 190, 183, 98, 40, 189, 33, 196, 76, 190, 177, 61, 141, 189, 232, 32, 13, 191, 253, 233, 38, 189, 153, 88, 35, 61, 228, 218, 208, 189, 119, 237, 4, 62, 81, 186, 47, 190, 105, 102, 105, 61, 254, 163, 170, 61, 141, 1, 141, 61, 72, 27, 23, 189, 84, 35, 85, 62, 255, 190, 26, 62, 26, 113, 44, 62, 58, 6, 139, 62, 156, 137, 53, 189, 162, 92, 114, 189, 38, 59, 134, 188, 150, 117, 81, 61, 71, 219, 200, 187, 208, 88, 58, 191, 139, 127, 208, 188, 219, 239, 162, 62, 219, 62, 53, 188, 36, 213, 15, 190, 164, 106, 33, 190, 21, 223, 23, 62, 31, 142, 197, 61, 152, 29, 77, 191, 0, 141, 166, 62, 129, 139, 48, 189, 61, 203, 238, 61, 180, 0, 158, 62, 223, 31, 131, 190, 208, 55, 188, 190, 206, 94, 249, 190, 83, 29, 139, 190, 181, 74, 140, 190, 112, 116, 45, 189, 107, 24, 199, 61, 169, 3, 134, 189, 86, 220, 166, 190, 31, 42, 110, 62, 174, 205, 157, 189, 62, 85, 37, 190, 19, 128, 142, 189, 106, 9, 114, 189, 193, 82, 218, 190, 91, 88, 137, 61, 164, 207, 235, 190, 127, 55, 27, 190, 203, 96, 161, 190, 120, 6, 225, 189, 195, 73, 189, 190, 113, 157, 50, 190, 34, 196, 17, 191, 46, 147, 114, 189, 144, 116, 145, 190, 147, 49, 104, 59, 212, 101, 192, 60, 31, 43, 159, 188, 28, 28, 190, 190, 93, 227, 43, 190, 194, 10, 205, 188, 149, 92, 218, 189, 234, 209, 96, 62, 2, 207, 83, 189, 32, 41, 8, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 174, 187, 61, 84, 130, 254, 189, 96, 150, 28, 62, 239, 184, 75, 190, 133, 207, 78, 62, 212, 214, 171, 189, 114, 62, 222, 62, 73, 184, 174, 62, 82, 195, 216, 61, 180, 26, 24, 190, 56, 85, 31, 62, 134, 141, 184, 60, 135, 128, 187, 61, 113, 8, 145, 62, 40, 190, 77, 62, 206, 197, 146, 62, 243, 149, 74, 189, 115, 123, 123, 189, 204, 107, 98, 62, 7, 214, 232, 61, 103, 6, 131, 62, 120, 134, 93, 188, 146, 24, 242, 61, 232, 155, 157, 61, 255, 177, 162, 60, 243, 147, 43, 62, 100, 17, 214, 62, 73, 243, 11, 62, 209, 151, 90, 62, 209, 9, 108, 190, 82, 209, 34, 62, 254, 202, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 99, 1, 63, 160, 178, 97, 191, 183, 165, 228, 61, 30, 247, 92, 191, 74, 98, 119, 63, 6, 166, 246, 60, 231, 104, 13, 191, 13, 205, 191, 190, 253, 27, 243, 190, 254, 54, 152, 189, 138, 144, 105, 63, 200, 79, 78, 63, 58, 181, 147, 62, 189, 134, 116, 189, 53, 78, 4, 191, 194, 140, 211, 189, 157, 121, 111, 62, 201, 200, 24, 188, 177, 80, 181, 62, 66, 60, 223, 62, 69, 243, 177, 189, 172, 208, 156, 190, 192, 201, 188, 62, 239, 137, 3, 63, 229, 206, 199, 189, 41, 59, 234, 62, 174, 19, 88, 189, 170, 137, 50, 63, 174, 29, 10, 191, 140, 183, 210, 190, 57, 168, 164, 62, 125, 225, 253, 62, 126, 72, 135, 61, 172, 167, 209, 62, 0, 13, 236, 190, 39, 39, 122, 62, 189, 144, 102, 62, 236, 114, 227, 190, 224, 128, 244, 61, 61, 54, 189, 190, 16, 3, 178, 61, 97, 142, 52, 62, 14, 41, 38, 190, 153, 208, 140, 61, 61, 251, 57, 190, 232, 161, 55, 190, 138, 74, 93, 62, 48, 19, 157, 190, 112, 230, 160, 189, 91, 45, 138, 61, 33, 173, 201, 190, 112, 177, 231, 61, 148, 147, 133, 190, 223, 154, 192, 61, 226, 122, 69, 189, 5, 64, 7, 63, 68, 51, 175, 59, 183, 185, 169, 62, 182, 82, 126, 190, 106, 82, 195, 59, 76, 64, 245, 61, 229, 146, 54, 190, 223, 8, 12, 189, 243, 243, 174, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 10, 144, 190, 124, 125, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {124, 63, 217, 61, 128, 35, 201, 60, 100, 136, 234, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {139, 224, 26, 63, 148, 132, 182, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}