// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 54, 106, 63, 179, 37, 109, 63, 42, 237, 192, 62, 251, 36, 34, 190, 14, 70, 87, 190, 166, 72, 150, 190, 143, 241, 185, 190, 211, 153, 98, 191, 92, 17, 94, 190, 171, 125, 57, 190, 253, 75, 180, 62, 144, 240, 31, 191, 25, 131, 116, 190, 70, 145, 141, 62, 50, 25, 18, 63, 236, 49, 163, 62, 241, 202, 208, 61, 18, 77, 172, 62, 32, 100, 130, 62, 197, 87, 59, 63, 245, 164, 53, 190, 173, 30, 35, 63, 67, 243, 178, 190, 173, 97, 8, 190, 166, 78, 77, 62, 208, 153, 11, 191, 57, 32, 42, 190, 116, 39, 65, 63, 179, 245, 27, 191, 74, 246, 18, 191, 42, 212, 66, 61, 11, 101, 253, 190, 118, 125, 188, 62, 179, 182, 3, 191, 110, 97, 27, 191, 220, 59, 119, 190, 81, 131, 202, 190, 125, 132, 64, 63, 55, 229, 129, 190, 17, 156, 94, 190, 157, 59, 4, 191, 184, 184, 198, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 33, 241, 169, 190, 192, 248, 30, 191, 227, 24, 230, 61, 167, 29, 32, 63, 11, 3, 16, 63, 232, 90, 133, 62, 166, 73, 228, 62, 47, 218, 99, 191, 133, 209, 1, 190, 101, 83, 227, 62, 34, 9, 90, 191, 185, 157, 69, 190, 22, 159, 31, 63, 163, 112, 132, 189, 144, 254, 0, 63, 76, 36, 161, 190, 231, 147, 167, 190, 161, 24, 41, 63, 15, 209, 15, 62, 2, 165, 155, 62, 197, 36, 154, 62, 216, 222, 109, 62, 92, 21, 68, 191, 235, 31, 145, 62, 91, 99, 78, 63, 117, 39, 6, 63, 151, 140, 155, 61, 203, 9, 34, 191, 252, 174, 114, 63, 68, 160, 2, 62, 143, 205, 40, 62, 30, 161, 151, 191, 181, 208, 246, 190, 144, 28, 228, 189, 52, 65, 14, 190, 172, 113, 254, 187, 189, 206, 103, 62, 217, 216, 48, 62, 71, 34, 201, 190, 21, 45, 83, 63, 158, 54, 28, 191, 53, 88, 144, 190, 241, 102, 206, 62, 144, 17, 76, 63, 135, 150, 235, 61, 224, 112, 234, 190, 248, 232, 190, 62, 66, 140, 43, 62, 216, 167, 86, 190, 182, 168, 24, 63, 206, 37, 25, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 181, 63, 191, 211, 116, 39, 190, 81, 157, 63, 190, 3, 21, 245, 189, 223, 232, 35, 189, 154, 38, 3, 63, 56, 115, 199, 61, 109, 146, 149, 62, 67, 19, 155, 188, 180, 254, 150, 62, 9, 158, 30, 61, 243, 231, 183, 190, 82, 104, 24, 190, 200, 157, 144, 61, 53, 32, 19, 191, 158, 196, 5, 63, 236, 19, 57, 191, 195, 99, 71, 190, 13, 216, 204, 189, 39, 244, 232, 61, 203, 153, 147, 190, 99, 126, 62, 190, 13, 61, 134, 62, 142, 33, 228, 62, 167, 157, 241, 62, 112, 190, 217, 62, 46, 106, 116, 190, 247, 121, 103, 62, 67, 88, 25, 191, 19, 138, 161, 62, 90, 15, 165, 62, 162, 70, 181, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 63, 132, 190, 35, 112, 142, 189, 221, 133, 133, 191, 128, 71, 240, 190, 218, 98, 202, 61, 66, 106, 7, 62, 230, 241, 107, 189, 124, 43, 161, 62, 156, 188, 170, 188, 198, 30, 151, 186, 41, 157, 56, 190, 31, 34, 150, 191, 118, 248, 155, 62, 54, 223, 95, 191, 179, 179, 39, 62, 33, 183, 126, 62, 84, 19, 105, 191, 188, 34, 254, 60, 83, 76, 139, 62, 169, 223, 157, 61, 216, 246, 252, 188, 167, 210, 65, 190, 138, 46, 120, 188, 220, 151, 59, 189, 104, 31, 34, 62, 146, 219, 135, 190, 194, 221, 3, 61, 159, 37, 164, 190, 138, 243, 150, 190, 65, 232, 212, 189, 245, 176, 2, 62, 74, 29, 1, 62, 231, 155, 180, 62, 248, 188, 178, 190, 241, 45, 92, 61, 84, 12, 221, 62, 10, 119, 189, 189, 247, 203, 102, 189, 95, 79, 32, 61, 160, 147, 109, 188, 0, 245, 143, 190, 117, 57, 187, 189, 161, 45, 79, 62, 204, 247, 44, 189, 185, 157, 245, 189, 27, 225, 157, 60, 158, 209, 163, 61, 51, 215, 36, 62, 90, 57, 178, 62, 232, 66, 32, 191, 117, 140, 187, 191, 188, 155, 62, 61, 86, 84, 167, 188, 163, 194, 132, 62, 253, 201, 49, 190, 153, 39, 184, 62, 114, 3, 40, 190, 25, 36, 212, 190, 212, 102, 78, 188, 16, 244, 173, 62, 5, 147, 16, 191, 219, 153, 198, 61, 137, 50, 113, 190, 75, 17, 216, 189, 148, 245, 218, 190, 5, 182, 113, 189, 96, 227, 166, 56, 75, 242, 141, 189, 19, 35, 171, 189, 173, 70, 12, 62, 126, 137, 117, 62, 214, 195, 207, 189, 1, 23, 231, 61, 37, 178, 133, 62, 137, 179, 23, 190, 129, 20, 244, 189, 168, 56, 176, 190, 163, 191, 193, 187, 93, 0, 72, 61, 148, 16, 230, 61, 232, 100, 74, 191, 45, 242, 9, 190, 128, 203, 20, 59, 204, 186, 250, 189, 65, 140, 168, 62, 238, 125, 88, 190, 122, 59, 40, 189, 247, 98, 48, 61, 243, 148, 1, 191, 71, 34, 185, 61, 15, 250, 13, 62, 245, 168, 34, 189, 58, 148, 101, 62, 243, 43, 194, 188, 22, 229, 169, 189, 207, 136, 4, 190, 228, 21, 198, 61, 220, 232, 113, 62, 242, 4, 94, 190, 231, 145, 29, 62, 198, 156, 23, 61, 86, 104, 221, 61, 14, 54, 25, 191, 112, 226, 31, 62, 109, 38, 172, 62, 228, 184, 113, 188, 69, 17, 2, 189, 152, 14, 149, 190, 235, 217, 115, 190, 144, 222, 128, 61, 4, 251, 12, 61, 141, 198, 113, 190, 249, 45, 39, 190, 237, 20, 248, 62, 254, 184, 8, 63, 112, 147, 226, 188, 202, 65, 54, 62, 196, 2, 27, 190, 180, 177, 220, 59, 0, 29, 140, 190, 32, 190, 54, 191, 68, 246, 123, 62, 244, 0, 145, 61, 43, 57, 61, 62, 117, 70, 192, 62, 119, 158, 135, 191, 213, 165, 67, 190, 120, 110, 198, 61, 206, 47, 239, 190, 121, 80, 170, 62, 6, 245, 136, 191, 144, 9, 104, 61, 7, 231, 207, 61, 4, 98, 48, 62, 25, 165, 18, 62, 166, 236, 188, 62, 167, 43, 221, 190, 196, 29, 38, 190, 201, 179, 188, 190, 180, 250, 74, 191, 97, 218, 34, 63, 115, 40, 7, 191, 189, 73, 46, 190, 156, 200, 44, 62, 174, 157, 138, 191, 164, 16, 99, 62, 71, 177, 199, 62, 114, 114, 173, 189, 119, 237, 38, 62, 93, 14, 160, 190, 204, 248, 80, 62, 191, 8, 11, 190, 8, 173, 84, 62, 137, 111, 41, 191, 71, 163, 85, 189, 123, 39, 49, 190, 206, 9, 77, 191, 132, 147, 125, 188, 79, 217, 73, 62, 23, 204, 160, 60, 64, 147, 187, 190, 184, 100, 99, 189, 14, 67, 47, 60, 40, 19, 203, 60, 251, 158, 129, 61, 222, 47, 253, 61, 49, 0, 166, 61, 164, 53, 59, 62, 166, 93, 28, 61, 188, 180, 93, 62, 148, 212, 149, 189, 88, 110, 9, 190, 9, 175, 179, 190, 71, 150, 78, 60, 43, 90, 208, 61, 9, 246, 113, 62, 93, 239, 135, 191, 183, 71, 163, 188, 78, 237, 101, 62, 223, 239, 142, 61, 118, 76, 205, 61, 121, 91, 1, 190, 10, 42, 216, 61, 241, 205, 104, 62, 121, 81, 67, 191, 129, 10, 16, 62, 222, 24, 218, 189, 14, 78, 53, 189, 196, 210, 93, 59, 99, 235, 48, 190, 186, 229, 48, 190, 204, 53, 111, 190, 169, 100, 154, 190, 131, 137, 59, 190, 150, 236, 146, 189, 67, 43, 230, 189, 183, 146, 200, 190, 58, 44, 246, 190, 42, 225, 199, 189, 155, 22, 76, 188, 79, 46, 54, 189, 31, 61, 85, 61, 56, 178, 139, 62, 63, 235, 175, 190, 149, 64, 227, 61, 51, 76, 148, 188, 171, 251, 37, 190, 182, 131, 48, 62, 41, 150, 3, 62, 138, 19, 202, 189, 233, 101, 175, 61, 75, 208, 19, 191, 130, 31, 247, 189, 230, 80, 42, 190, 147, 42, 9, 190, 255, 53, 132, 62, 98, 81, 177, 61, 101, 237, 187, 61, 123, 100, 220, 61, 129, 222, 26, 190, 14, 119, 74, 189, 108, 44, 250, 188, 82, 84, 55, 62, 21, 78, 38, 61, 45, 87, 242, 59, 181, 206, 110, 190, 96, 162, 3, 62, 222, 60, 199, 61, 228, 3, 152, 189, 127, 229, 114, 62, 89, 81, 187, 61, 67, 138, 96, 62, 29, 138, 132, 190, 75, 48, 176, 189, 119, 142, 73, 61, 83, 67, 166, 62, 13, 137, 229, 189, 235, 122, 8, 62, 57, 40, 15, 62, 177, 73, 32, 62, 48, 78, 243, 189, 213, 157, 38, 191, 215, 200, 98, 191, 112, 212, 243, 61, 9, 64, 210, 189, 119, 199, 214, 188, 250, 115, 20, 62, 50, 57, 159, 62, 143, 64, 210, 61, 170, 51, 237, 189, 14, 77, 186, 61, 12, 2, 104, 62, 22, 93, 46, 191, 189, 246, 128, 62, 32, 75, 1, 62, 97, 163, 227, 188, 37, 163, 249, 190, 5, 199, 6, 190, 104, 251, 70, 62, 131, 109, 75, 62, 86, 24, 164, 190, 99, 138, 160, 190, 100, 100, 15, 61, 142, 56, 176, 187, 227, 132, 7, 190, 18, 177, 252, 60, 198, 193, 110, 62, 125, 92, 155, 62, 72, 150, 162, 61, 168, 154, 89, 188, 227, 245, 246, 59, 96, 47, 196, 62, 62, 96, 154, 189, 205, 193, 108, 190, 234, 31, 203, 190, 199, 217, 189, 190, 154, 206, 108, 190, 80, 78, 246, 190, 111, 56, 9, 191, 98, 110, 153, 189, 59, 131, 201, 62, 82, 138, 196, 60, 93, 237, 54, 62, 147, 82, 158, 61, 45, 253, 197, 190, 56, 10, 57, 62, 26, 183, 62, 62, 31, 33, 136, 189, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 89, 102, 100, 61, 224, 14, 175, 190, 215, 111, 67, 191, 70, 165, 13, 191, 240, 158, 30, 190, 17, 63, 233, 188, 216, 202, 66, 189, 147, 160, 2, 190, 49, 32, 165, 189, 118, 164, 153, 190, 69, 210, 218, 190, 39, 64, 79, 191, 36, 204, 175, 62, 30, 252, 48, 191, 34, 5, 45, 190, 132, 194, 231, 188, 79, 200, 122, 62, 199, 163, 164, 190, 114, 155, 53, 62, 70, 67, 122, 189, 32, 206, 177, 187, 250, 255, 175, 190, 179, 211, 134, 190, 252, 58, 208, 61, 163, 21, 165, 62, 81, 87, 128, 191, 90, 36, 180, 61, 47, 14, 3, 191, 129, 59, 108, 60, 73, 115, 74, 62, 143, 66, 47, 62, 195, 229, 83, 62, 160, 54, 146, 189, 16, 32, 28, 190, 108, 225, 147, 191, 103, 28, 108, 190, 216, 124, 164, 189, 0, 122, 107, 189, 40, 154, 61, 191, 178, 105, 186, 190, 128, 14, 126, 188, 181, 244, 106, 190, 250, 2, 221, 189, 7, 58, 101, 191, 251, 207, 18, 189, 77, 253, 89, 191, 236, 243, 29, 190, 77, 228, 71, 62, 129, 32, 183, 190, 114, 205, 33, 62, 55, 98, 191, 190, 162, 251, 71, 190, 158, 235, 106, 62, 229, 23, 244, 61, 146, 170, 141, 59, 114, 235, 34, 191, 170, 5, 183, 62, 2, 12, 151, 191, 142, 94, 183, 61, 139, 143, 201, 189, 46, 126, 188, 189, 234, 157, 147, 190, 167, 40, 62, 59, 35, 160, 72, 62, 175, 147, 210, 190, 158, 33, 162, 188, 8, 56, 231, 189, 186, 0, 97, 62, 56, 91, 72, 190, 134, 29, 105, 190, 68, 18, 87, 62, 207, 240, 168, 61, 228, 117, 72, 60, 85, 23, 201, 60, 2, 12, 78, 62, 175, 35, 212, 189, 37, 2, 144, 190, 89, 203, 78, 62, 106, 164, 250, 61, 11, 91, 249, 60, 160, 112, 147, 191, 206, 135, 164, 190, 196, 186, 82, 61, 176, 83, 34, 190, 39, 86, 164, 62, 29, 86, 140, 190, 119, 12, 133, 60, 199, 87, 113, 61, 64, 134, 247, 190, 59, 60, 107, 62, 9, 79, 231, 61, 56, 85, 86, 62, 29, 36, 235, 60, 45, 193, 229, 61, 75, 213, 159, 62, 181, 110, 91, 61, 10, 73, 169, 61, 35, 80, 10, 62, 94, 218, 9, 62, 156, 212, 193, 60, 74, 73, 182, 61, 33, 230, 47, 61, 196, 79, 49, 61, 134, 231, 194, 60, 130, 56, 158, 189, 208, 68, 221, 189, 223, 75, 172, 60, 79, 27, 197, 62, 47, 122, 120, 190, 223, 229, 127, 62, 230, 23, 128, 59, 132, 6, 31, 62, 92, 197, 185, 60, 162, 96, 105, 189, 127, 33, 226, 190, 247, 99, 47, 62, 13, 114, 7, 190, 254, 241, 40, 190, 246, 171, 188, 61, 221, 240, 22, 61, 25, 97, 65, 189, 83, 195, 115, 62, 227, 57, 9, 61, 135, 157, 111, 62, 16, 135, 64, 190, 145, 234, 2, 190, 173, 251, 61, 187, 189, 112, 23, 62, 227, 58, 132, 62, 186, 87, 129, 189, 127, 209, 188, 62, 230, 63, 34, 61, 246, 17, 65, 190, 198, 242, 166, 188, 9, 28, 156, 60, 185, 56, 59, 190, 88, 211, 194, 189, 0, 78, 83, 190, 154, 184, 245, 61, 179, 149, 125, 62, 249, 134, 19, 62, 72, 37, 133, 62, 8, 68, 207, 188, 200, 48, 129, 62, 201, 134, 73, 190, 230, 53, 5, 191, 71, 170, 88, 191, 72, 217, 137, 62, 163, 95, 9, 191, 124, 40, 90, 62, 196, 0, 197, 189, 89, 165, 117, 62, 4, 212, 150, 62, 11, 202, 59, 61, 228, 219, 66, 190, 192, 184, 147, 61, 15, 125, 223, 190, 76, 193, 80, 62, 115, 39, 139, 190, 205, 160, 0, 60, 30, 9, 130, 61, 26, 213, 180, 189, 56, 196, 17, 62, 52, 87, 55, 61, 114, 139, 164, 61, 89, 193, 100, 61, 199, 32, 167, 189, 120, 67, 172, 62, 187, 101, 197, 61, 26, 88, 44, 62, 234, 73, 159, 190, 177, 175, 232, 188, 79, 220, 58, 189, 157, 49, 7, 190, 191, 188, 31, 190, 23, 241, 162, 62, 137, 115, 49, 190, 35, 56, 65, 190, 136, 72, 76, 190, 191, 110, 66, 62, 66, 87, 112, 190, 162, 245, 51, 190, 125, 57, 131, 190, 93, 53, 70, 62, 149, 10, 36, 62, 99, 214, 54, 62, 170, 199, 184, 61, 131, 110, 180, 60, 191, 98, 206, 190, 146, 208, 4, 62, 45, 133, 157, 189, 75, 85, 0, 60, 222, 131, 52, 62, 155, 71, 218, 60, 159, 104, 145, 191, 159, 94, 248, 190, 125, 127, 92, 62, 149, 152, 73, 61, 29, 107, 223, 60, 73, 201, 29, 190, 207, 168, 219, 189, 152, 231, 64, 189, 61, 134, 36, 190, 71, 48, 137, 191, 105, 192, 218, 62, 207, 148, 52, 191, 6, 21, 13, 189, 28, 231, 211, 189, 239, 148, 165, 60, 93, 61, 57, 62, 234, 193, 20, 63, 164, 13, 15, 190, 17, 169, 82, 60, 36, 158, 8, 62, 164, 117, 152, 61, 142, 45, 139, 61, 252, 90, 104, 62, 124, 237, 35, 190, 21, 40, 255, 61, 79, 210, 33, 191, 222, 102, 64, 189, 110, 116, 173, 188, 207, 219, 31, 62, 73, 253, 33, 62, 129, 0, 130, 189, 139, 66, 242, 61, 252, 21, 227, 189, 149, 100, 96, 189, 109, 80, 205, 189, 123, 75, 154, 189, 84, 17, 21, 61, 63, 11, 145, 189, 100, 189, 10, 190, 171, 117, 210, 187, 116, 36, 221, 189, 22, 186, 147, 189, 25, 232, 51, 58, 224, 227, 237, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 174, 190, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 98, 94, 8, 61, 194, 209, 34, 190, 223, 114, 228, 61, 152, 199, 161, 189, 94, 242, 150, 61, 75, 220, 244, 189, 202, 189, 183, 189, 82, 192, 233, 189, 38, 99, 28, 190, 118, 156, 241, 190, 226, 179, 10, 190, 164, 250, 93, 190, 134, 71, 219, 189, 128, 10, 22, 189, 88, 65, 91, 61, 131, 59, 229, 61, 170, 35, 88, 62, 245, 233, 240, 61, 117, 240, 141, 62, 93, 85, 201, 60, 25, 42, 8, 191, 84, 227, 132, 190, 16, 245, 161, 188, 214, 71, 232, 188, 37, 237, 252, 61, 23, 11, 153, 191, 138, 208, 21, 189, 56, 228, 71, 61, 45, 123, 69, 59, 28, 177, 151, 62, 198, 218, 89, 190, 152, 0, 87, 189, 33, 204, 171, 61, 253, 175, 250, 190, 162, 126, 25, 62, 82, 185, 167, 189, 154, 80, 160, 59, 127, 135, 158, 60, 111, 100, 18, 190, 58, 68, 211, 60, 251, 33, 55, 189, 133, 134, 251, 190, 99, 193, 73, 190, 15, 188, 216, 189, 80, 224, 59, 62, 102, 118, 194, 189, 4, 98, 11, 62, 48, 153, 42, 62, 101, 83, 133, 62, 87, 60, 169, 61, 115, 235, 12, 62, 120, 184, 127, 62, 140, 53, 189, 190, 156, 48, 172, 190, 255, 17, 78, 189, 181, 111, 11, 190, 3, 250, 9, 62, 78, 89, 126, 191, 86, 59, 203, 61, 93, 229, 195, 62, 254, 81, 29, 190, 225, 125, 222, 61, 213, 53, 104, 190, 181, 211, 26, 62, 136, 227, 146, 61, 202, 235, 109, 191, 97, 16, 111, 62, 182, 231, 186, 189, 216, 90, 180, 189, 116, 238, 177, 62, 58, 123, 138, 190, 69, 251, 224, 60, 116, 254, 127, 189, 75, 4, 153, 189, 99, 73, 222, 61, 105, 253, 151, 61, 141, 40, 99, 189, 163, 130, 141, 189, 148, 102, 99, 189, 116, 129, 94, 61, 82, 188, 209, 62, 255, 81, 54, 61, 126, 93, 232, 59, 255, 166, 136, 189, 79, 176, 169, 61, 211, 159, 188, 189, 44, 178, 20, 62, 220, 182, 146, 59, 137, 33, 9, 62, 216, 2, 96, 190, 128, 42, 115, 61, 233, 23, 216, 190, 190, 8, 91, 62, 213, 167, 222, 188, 150, 172, 87, 190, 12, 82, 49, 62, 101, 134, 84, 62, 161, 78, 130, 189, 234, 238, 233, 189, 7, 147, 36, 190, 80, 127, 114, 62, 10, 79, 183, 190, 240, 100, 141, 187, 191, 44, 169, 189, 121, 77, 149, 61, 38, 246, 76, 62, 74, 97, 62, 189, 160, 67, 136, 62, 250, 31, 16, 62, 190, 6, 235, 190, 90, 143, 255, 61, 37, 42, 169, 59, 94, 248, 129, 60, 237, 230, 86, 61, 50, 247, 253, 61, 95, 135, 173, 189, 68, 50, 8, 62, 58, 145, 186, 190, 69, 189, 74, 62, 185, 71, 64, 189, 230, 144, 138, 62, 35, 191, 13, 189, 154, 88, 157, 61, 164, 197, 33, 191, 148, 188, 88, 62, 39, 183, 131, 190, 190, 54, 11, 190, 112, 76, 152, 189, 244, 2, 109, 62, 42, 167, 197, 61, 222, 182, 209, 189, 26, 178, 77, 187, 38, 234, 153, 188, 154, 179, 34, 191, 73, 152, 94, 62, 36, 228, 222, 190, 38, 126, 240, 188, 67, 105, 39, 61, 93, 99, 60, 60, 82, 212, 131, 191, 127, 112, 27, 191, 164, 182, 82, 62, 85, 196, 11, 62, 194, 129, 115, 189, 212, 145, 68, 190, 125, 228, 16, 62, 87, 94, 119, 190, 21, 198, 132, 189, 204, 134, 94, 191, 63, 25, 147, 62, 226, 102, 104, 191, 36, 191, 163, 189, 249, 78, 216, 59, 0, 140, 175, 61, 169, 228, 172, 62, 11, 112, 38, 63, 49, 235, 48, 190, 187, 222, 3, 61, 20, 165, 200, 188, 195, 123, 227, 189, 252, 166, 8, 189, 223, 136, 65, 62, 83, 224, 47, 191, 173, 28, 196, 189, 104, 175, 232, 190, 90, 190, 250, 190, 136, 198, 151, 62, 234, 77, 24, 62, 170, 58, 50, 62, 65, 125, 222, 190, 52, 185, 137, 189, 64, 99, 103, 189, 25, 171, 120, 190, 65, 11, 151, 61, 18, 103, 25, 188, 99, 132, 178, 58, 99, 121, 141, 62, 55, 20, 0, 62, 193, 156, 130, 189, 111, 237, 120, 61, 89, 182, 140, 190, 184, 5, 105, 190, 97, 163, 227, 189, 240, 156, 124, 189, 88, 75, 89, 62, 13, 183, 74, 191, 174, 171, 187, 62, 128, 11, 102, 62, 133, 182, 7, 190, 145, 106, 194, 61, 132, 176, 51, 190, 161, 137, 101, 61, 52, 95, 2, 191, 79, 12, 210, 190, 145, 92, 169, 60, 238, 47, 154, 59, 3, 231, 189, 190, 180, 119, 190, 190, 129, 254, 178, 190, 15, 85, 31, 190, 11, 78, 129, 61, 65, 34, 5, 62, 144, 181, 148, 61, 226, 231, 143, 190, 0, 12, 209, 61, 218, 4, 184, 189, 204, 230, 57, 62, 246, 222, 139, 62, 255, 125, 130, 61, 163, 95, 47, 190, 97, 175, 130, 61, 42, 191, 16, 62, 125, 155, 10, 191, 213, 169, 102, 58, 115, 70, 47, 190, 95, 0, 246, 189, 240, 188, 97, 188, 110, 237, 145, 61, 131, 124, 142, 62, 198, 139, 194, 190, 119, 17, 61, 62, 233, 77, 23, 62, 188, 215, 1, 189, 45, 253, 178, 60, 56, 194, 203, 188, 254, 128, 46, 190, 32, 251, 72, 190, 204, 73, 8, 189, 183, 184, 98, 60, 229, 183, 17, 190, 250, 155, 114, 189, 245, 115, 59, 190, 179, 248, 52, 189, 31, 20, 55, 191, 216, 19, 119, 60, 183, 224, 223, 190, 65, 228, 23, 190, 116, 205, 109, 61, 71, 28, 177, 61, 248, 99, 196, 60, 183, 218, 160, 62, 17, 147, 47, 61, 7, 144, 95, 62, 120, 106, 124, 190, 87, 143, 41, 191, 52, 35, 25, 188, 158, 4, 255, 189, 110, 49, 225, 189, 48, 210, 24, 62, 180, 165, 101, 191, 242, 159, 189, 61, 174, 84, 225, 62, 193, 225, 45, 190, 82, 48, 113, 62, 252, 25, 118, 188, 203, 107, 63, 62, 66, 52, 210, 189, 191, 248, 220, 190, 107, 161, 217, 61, 94, 89, 201, 61, 123, 139, 139, 188, 240, 235, 93, 62, 176, 62, 224, 189, 44, 170, 27, 61, 236, 235, 198, 60, 198, 115, 153, 59, 161, 143, 143, 189, 144, 58, 9, 62, 175, 39, 173, 60, 0, 152, 140, 61, 35, 109, 149, 61, 164, 192, 175, 61, 30, 15, 200, 62, 105, 157, 7, 60, 70, 237, 252, 60, 216, 163, 48, 61, 156, 217, 136, 190, 150, 31, 34, 189, 172, 144, 184, 60, 162, 252, 247, 189, 197, 88, 55, 62, 25, 74, 186, 190, 29, 156, 234, 189, 211, 173, 99, 190, 239, 228, 84, 189, 120, 223, 150, 59, 223, 3, 16, 189, 127, 213, 183, 189, 119, 116, 18, 62, 127, 32, 3, 189, 249, 38, 35, 62, 61, 167, 143, 188, 152, 53, 55, 189, 60, 236, 99, 190, 105, 51, 214, 188, 182, 208, 57, 190, 241, 124, 233, 61, 143, 41, 205, 190, 83, 73, 23, 189, 94, 49, 63, 191, 67, 157, 155, 60, 15, 148, 143, 61, 235, 67, 45, 62, 185, 237, 34, 62, 68, 13, 99, 62, 170, 121, 157, 189, 225, 207, 116, 62, 204, 173, 56, 189, 221, 214, 54, 191, 163, 202, 14, 62, 224, 64, 109, 189, 28, 142, 176, 188, 38, 148, 104, 62, 244, 129, 137, 191, 202, 198, 39, 191, 123, 217, 165, 60, 129, 19, 40, 190, 55, 231, 39, 61, 9, 32, 151, 190, 134, 112, 108, 62, 176, 245, 212, 189, 122, 234, 128, 190, 55, 210, 119, 189, 253, 109, 195, 189, 104, 204, 200, 189, 158, 31, 22, 62, 161, 205, 12, 190, 94, 199, 98, 61, 239, 190, 32, 190, 192, 159, 133, 189, 53, 206, 248, 189, 193, 176, 154, 62, 123, 101, 7, 62, 241, 111, 4, 191, 92, 105, 76, 189, 139, 16, 13, 189, 64, 142, 19, 189, 206, 215, 84, 190, 12, 70, 136, 190, 84, 185, 137, 61, 240, 199, 44, 62, 102, 179, 54, 190, 222, 48, 98, 62, 215, 69, 189, 61, 194, 74, 165, 62, 104, 49, 4, 190, 29, 29, 72, 189, 150, 33, 22, 191, 93, 171, 121, 62, 119, 27, 208, 190, 114, 145, 14, 60, 50, 2, 56, 190, 236, 137, 180, 62, 96, 177, 110, 62, 143, 102, 216, 61, 209, 171, 130, 61, 40, 84, 193, 61, 31, 182, 250, 190, 169, 126, 159, 62, 36, 89, 78, 190, 245, 115, 228, 188, 177, 40, 244, 187, 220, 97, 4, 62, 78, 113, 157, 190, 22, 246, 84, 188, 7, 29, 199, 61, 162, 22, 58, 61, 228, 30, 0, 189, 10, 166, 202, 58, 122, 26, 172, 189, 226, 239, 208, 190, 169, 65, 101, 62, 206, 194, 191, 190, 192, 190, 185, 189, 44, 116, 220, 189, 131, 142, 171, 61, 111, 72, 233, 61, 137, 117, 153, 62, 216, 210, 84, 190, 64, 113, 9, 191, 255, 64, 89, 61, 24, 222, 237, 61, 146, 60, 241, 188, 81, 112, 136, 62, 249, 142, 125, 58, 96, 159, 49, 191, 10, 5, 28, 191, 140, 209, 62, 189, 33, 196, 76, 190, 84, 138, 134, 60, 97, 23, 5, 191, 187, 32, 141, 189, 240, 30, 233, 60, 187, 139, 237, 189, 78, 8, 33, 61, 152, 45, 202, 189, 236, 230, 128, 189, 193, 238, 220, 61, 51, 228, 161, 61, 79, 240, 1, 189, 212, 183, 67, 62, 81, 242, 2, 62, 7, 182, 19, 62, 181, 109, 128, 62, 132, 201, 83, 189, 33, 114, 22, 190, 250, 188, 168, 189, 150, 117, 81, 61, 74, 233, 250, 60, 186, 150, 67, 191, 10, 84, 222, 189, 242, 111, 129, 62, 217, 68, 48, 189, 111, 62, 237, 189, 36, 37, 32, 190, 122, 194, 255, 61, 5, 56, 194, 61, 8, 213, 60, 191, 146, 66, 148, 62, 103, 99, 183, 188, 120, 76, 143, 61, 103, 133, 144, 62, 53, 160, 137, 190, 73, 39, 128, 190, 131, 73, 216, 190, 13, 127, 9, 62, 252, 176, 147, 60, 29, 28, 21, 189, 86, 173, 167, 61, 70, 129, 159, 61, 248, 97, 54, 190, 251, 246, 47, 62, 247, 28, 150, 189, 82, 62, 88, 189, 215, 19, 165, 188, 193, 136, 199, 188, 159, 234, 114, 57, 67, 228, 187, 60, 63, 172, 239, 189, 127, 55, 27, 190, 25, 102, 85, 61, 22, 16, 201, 61, 36, 27, 96, 190, 13, 10, 161, 189, 0, 255, 50, 190, 18, 50, 202, 60, 182, 146, 41, 189, 83, 233, 87, 59, 193, 1, 89, 189, 201, 96, 205, 189, 211, 178, 221, 189, 93, 227, 43, 190, 91, 45, 132, 189, 177, 200, 20, 61, 187, 24, 7, 62, 70, 86, 167, 189, 207, 231, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 22, 210, 61, 25, 150, 198, 189, 10, 193, 4, 62, 170, 195, 217, 189, 247, 156, 80, 62, 95, 174, 179, 189, 225, 169, 178, 62, 64, 222, 159, 62, 176, 133, 159, 61, 180, 26, 24, 190, 151, 253, 11, 62, 11, 90, 134, 188, 144, 135, 18, 62, 141, 148, 150, 62, 58, 140, 120, 62, 110, 207, 138, 62, 120, 36, 211, 188, 115, 123, 123, 189, 51, 128, 70, 62, 143, 213, 206, 61, 247, 15, 128, 62, 66, 103, 174, 188, 193, 54, 218, 61, 132, 170, 18, 62, 4, 18, 132, 60, 41, 54, 9, 62, 79, 242, 213, 62, 175, 88, 233, 61, 162, 21, 56, 62, 78, 39, 115, 190, 4, 72, 27, 62, 168, 148, 75, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 143, 25, 63, 46, 131, 3, 191, 150, 186, 44, 62, 55, 120, 68, 191, 45, 110, 81, 63, 177, 83, 70, 61, 201, 34, 9, 190, 203, 198, 189, 190, 53, 110, 230, 190, 254, 54, 152, 189, 87, 175, 85, 63, 119, 127, 85, 63, 127, 41, 123, 62, 58, 203, 254, 189, 65, 47, 82, 190, 138, 208, 7, 190, 229, 32, 146, 62, 201, 200, 24, 188, 24, 240, 206, 62, 224, 212, 234, 62, 163, 132, 0, 190, 224, 224, 148, 190, 69, 39, 197, 62, 248, 223, 215, 62, 209, 225, 33, 190, 65, 37, 250, 62, 49, 47, 148, 189, 42, 132, 5, 63, 242, 137, 4, 191, 170, 192, 195, 190, 108, 100, 169, 62, 144, 150, 130, 60, 21, 121, 168, 61, 250, 104, 204, 62, 43, 67, 179, 190, 89, 235, 143, 62, 227, 178, 35, 62, 168, 96, 193, 190, 174, 5, 254, 188, 32, 81, 158, 190, 49, 53, 39, 62, 97, 142, 52, 62, 26, 39, 99, 188, 194, 61, 168, 61, 19, 146, 4, 190, 35, 235, 7, 190, 253, 138, 58, 62, 202, 165, 119, 190, 85, 248, 140, 189, 91, 45, 138, 61, 54, 43, 197, 190, 29, 85, 33, 62, 32, 51, 53, 190, 28, 219, 18, 61, 80, 136, 47, 188, 106, 170, 180, 62, 88, 91, 103, 61, 245, 6, 168, 62, 147, 204, 29, 190, 173, 116, 78, 189, 56, 3, 214, 61, 32, 152, 82, 190, 65, 46, 198, 60, 47, 105, 52, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 10, 145, 190, 93, 193, 84, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 148, 162, 62, 28, 245, 41, 191, 172, 66, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 116, 125, 63, 193, 72, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}