// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 74, 119, 63, 86, 56, 120, 63, 144, 51, 188, 62, 92, 157, 128, 190, 193, 159, 109, 190, 146, 167, 123, 190, 191, 240, 152, 190, 58, 16, 142, 191, 165, 106, 105, 190, 20, 170, 21, 190, 167, 56, 208, 62, 20, 57, 11, 191, 152, 197, 86, 190, 202, 157, 75, 62, 132, 135, 8, 63, 208, 39, 156, 62, 126, 174, 149, 62, 3, 97, 151, 62, 127, 3, 10, 62, 209, 43, 148, 63, 80, 241, 239, 189, 44, 109, 35, 63, 14, 181, 168, 190, 131, 41, 150, 189, 63, 160, 120, 62, 202, 75, 55, 191, 98, 125, 27, 190, 90, 145, 64, 63, 111, 227, 60, 191, 20, 192, 247, 190, 140, 212, 6, 190, 79, 233, 6, 191, 149, 14, 170, 62, 163, 252, 126, 191, 172, 145, 21, 191, 194, 53, 55, 190, 68, 167, 32, 191, 196, 23, 74, 63, 149, 208, 166, 190, 25, 133, 255, 190, 71, 204, 40, 191, 63, 128, 168, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 106, 253, 7, 191, 38, 9, 70, 191, 161, 158, 66, 61, 131, 29, 24, 63, 247, 228, 35, 63, 176, 10, 145, 62, 212, 247, 11, 63, 125, 222, 136, 191, 211, 60, 45, 190, 102, 43, 250, 62, 9, 77, 118, 191, 3, 229, 102, 190, 150, 62, 51, 63, 138, 148, 147, 62, 205, 235, 177, 62, 3, 95, 191, 190, 51, 17, 141, 190, 71, 176, 40, 63, 113, 152, 85, 62, 217, 161, 232, 62, 158, 185, 131, 62, 131, 152, 133, 62, 243, 123, 64, 191, 151, 201, 117, 62, 233, 166, 61, 63, 5, 48, 8, 63, 107, 58, 122, 61, 178, 255, 47, 191, 149, 66, 130, 63, 158, 210, 23, 62, 152, 88, 239, 61, 93, 142, 176, 191, 83, 19, 232, 190, 96, 176, 180, 189, 150, 254, 6, 190, 27, 217, 33, 60, 103, 112, 63, 62, 245, 196, 145, 62, 161, 33, 209, 190, 48, 66, 93, 63, 83, 222, 54, 191, 178, 112, 154, 190, 184, 246, 219, 62, 82, 106, 93, 63, 175, 79, 59, 62, 155, 3, 241, 190, 1, 6, 218, 62, 211, 142, 17, 62, 34, 83, 156, 190, 109, 216, 44, 63, 84, 206, 231, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 183, 46, 191, 80, 10, 169, 190, 247, 63, 117, 190, 227, 49, 6, 190, 78, 163, 238, 189, 2, 200, 174, 62, 225, 120, 217, 61, 68, 218, 152, 62, 237, 103, 59, 187, 114, 190, 125, 62, 31, 162, 246, 189, 157, 239, 26, 190, 19, 122, 140, 190, 183, 137, 212, 61, 53, 32, 19, 191, 69, 210, 46, 63, 44, 161, 56, 191, 74, 231, 35, 190, 240, 248, 229, 189, 67, 209, 4, 62, 145, 157, 131, 190, 171, 236, 79, 190, 219, 240, 147, 62, 87, 203, 211, 62, 75, 209, 239, 62, 208, 110, 180, 62, 12, 226, 130, 190, 179, 121, 125, 62, 94, 65, 18, 191, 219, 28, 180, 62, 102, 170, 140, 62, 205, 84, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 250, 198, 190, 208, 178, 13, 190, 195, 158, 147, 191, 169, 235, 16, 191, 28, 248, 138, 61, 73, 23, 169, 61, 180, 230, 107, 190, 113, 193, 154, 62, 155, 128, 17, 62, 41, 192, 34, 189, 120, 243, 47, 190, 83, 117, 146, 191, 33, 248, 158, 62, 250, 131, 159, 191, 179, 179, 39, 62, 216, 92, 163, 62, 85, 18, 150, 191, 123, 202, 145, 62, 14, 124, 220, 62, 14, 237, 50, 61, 51, 46, 167, 189, 157, 122, 132, 190, 141, 204, 228, 58, 162, 188, 166, 189, 109, 203, 41, 62, 33, 250, 48, 190, 217, 76, 195, 60, 38, 205, 224, 190, 58, 123, 94, 190, 172, 39, 48, 190, 111, 176, 214, 61, 132, 45, 250, 61, 35, 125, 141, 62, 101, 182, 156, 190, 244, 186, 65, 190, 200, 149, 224, 62, 9, 251, 136, 189, 216, 142, 98, 189, 108, 50, 68, 62, 180, 215, 177, 188, 170, 198, 97, 191, 97, 37, 38, 189, 152, 215, 87, 62, 121, 86, 228, 188, 242, 228, 222, 189, 66, 197, 42, 61, 158, 209, 163, 61, 215, 164, 106, 62, 242, 229, 118, 62, 136, 66, 177, 191, 113, 63, 2, 192, 137, 81, 125, 59, 178, 126, 165, 60, 92, 9, 122, 62, 222, 41, 73, 190, 59, 161, 167, 62, 91, 253, 134, 189, 229, 146, 209, 190, 205, 48, 212, 187, 159, 44, 221, 62, 87, 40, 86, 191, 229, 206, 230, 61, 208, 39, 44, 190, 100, 235, 123, 60, 83, 31, 234, 190, 155, 125, 11, 190, 191, 190, 142, 188, 188, 172, 30, 190, 106, 152, 153, 189, 135, 91, 15, 62, 205, 22, 40, 62, 211, 137, 127, 189, 104, 15, 238, 61, 19, 253, 131, 62, 6, 195, 44, 190, 215, 100, 31, 190, 236, 70, 9, 191, 37, 135, 215, 189, 93, 0, 72, 61, 16, 167, 186, 60, 25, 156, 219, 191, 167, 4, 138, 189, 200, 11, 170, 60, 1, 247, 201, 189, 218, 47, 181, 62, 146, 212, 195, 190, 19, 255, 47, 189, 84, 195, 166, 61, 127, 137, 56, 191, 77, 40, 149, 61, 130, 89, 21, 62, 34, 229, 139, 189, 40, 79, 93, 62, 107, 28, 158, 61, 127, 48, 80, 190, 65, 3, 14, 190, 117, 201, 7, 62, 36, 184, 77, 62, 194, 149, 50, 190, 250, 190, 17, 62, 48, 192, 86, 190, 184, 246, 66, 190, 102, 64, 47, 191, 207, 79, 9, 62, 150, 248, 188, 62, 185, 237, 182, 187, 39, 89, 7, 60, 207, 83, 165, 190, 45, 122, 73, 190, 191, 62, 163, 61, 4, 251, 12, 61, 99, 132, 212, 189, 249, 45, 39, 190, 156, 217, 240, 62, 119, 59, 16, 63, 208, 173, 5, 191, 92, 151, 54, 189, 25, 0, 143, 190, 59, 30, 0, 62, 165, 25, 83, 190, 113, 150, 153, 191, 147, 96, 133, 62, 132, 40, 97, 61, 190, 58, 44, 62, 140, 175, 245, 62, 221, 86, 23, 192, 62, 232, 202, 61, 70, 106, 57, 191, 158, 95, 44, 191, 15, 201, 240, 61, 89, 252, 134, 191, 1, 96, 3, 62, 180, 72, 137, 61, 72, 79, 21, 62, 60, 121, 44, 62, 93, 68, 246, 62, 99, 216, 149, 190, 255, 162, 146, 190, 165, 146, 179, 190, 136, 192, 190, 191, 226, 15, 49, 63, 72, 9, 106, 191, 189, 73, 46, 190, 218, 118, 45, 62, 99, 50, 166, 191, 26, 37, 250, 62, 182, 216, 39, 63, 58, 20, 193, 189, 14, 203, 12, 62, 117, 250, 179, 190, 188, 115, 107, 62, 80, 131, 203, 189, 97, 182, 0, 62, 234, 78, 130, 191, 195, 103, 44, 189, 58, 91, 30, 190, 70, 86, 144, 191, 107, 163, 34, 189, 12, 37, 208, 61, 25, 58, 79, 189, 221, 137, 197, 190, 104, 79, 186, 189, 39, 21, 139, 61, 217, 218, 132, 189, 246, 47, 18, 61, 11, 17, 206, 61, 246, 131, 161, 190, 49, 148, 58, 62, 213, 29, 179, 61, 86, 242, 46, 62, 152, 72, 194, 189, 12, 59, 222, 189, 8, 140, 247, 190, 89, 40, 196, 188, 43, 90, 208, 61, 38, 6, 94, 62, 60, 60, 227, 191, 172, 120, 218, 61, 97, 69, 143, 62, 184, 46, 146, 61, 184, 220, 66, 61, 239, 4, 63, 190, 170, 56, 3, 62, 165, 108, 80, 62, 232, 186, 129, 191, 165, 14, 22, 62, 56, 17, 221, 189, 61, 165, 35, 190, 195, 55, 236, 59, 74, 2, 17, 190, 223, 44, 136, 190, 49, 188, 4, 191, 125, 174, 222, 190, 224, 50, 23, 191, 96, 172, 16, 61, 138, 147, 185, 190, 149, 47, 165, 190, 4, 86, 43, 191, 201, 131, 146, 190, 194, 23, 183, 60, 248, 194, 237, 61, 75, 123, 194, 61, 67, 176, 16, 63, 162, 112, 38, 191, 106, 146, 158, 189, 58, 113, 109, 61, 171, 251, 37, 190, 47, 78, 9, 63, 107, 212, 9, 62, 116, 80, 149, 61, 192, 241, 86, 62, 241, 53, 130, 191, 254, 236, 40, 61, 56, 4, 178, 190, 241, 12, 170, 62, 87, 223, 244, 61, 219, 195, 92, 60, 153, 114, 114, 62, 146, 100, 218, 61, 146, 74, 144, 190, 118, 147, 128, 60, 116, 77, 150, 191, 187, 124, 164, 62, 77, 245, 55, 189, 78, 165, 198, 189, 216, 71, 155, 190, 205, 185, 144, 190, 211, 147, 147, 61, 9, 174, 165, 188, 91, 79, 124, 62, 243, 173, 34, 62, 65, 236, 111, 62, 13, 120, 125, 190, 248, 226, 85, 189, 30, 120, 110, 61, 138, 203, 171, 61, 113, 68, 210, 189, 117, 150, 229, 60, 57, 40, 15, 62, 57, 214, 117, 62, 210, 218, 204, 190, 51, 158, 42, 191, 250, 224, 109, 191, 8, 97, 163, 61, 137, 149, 54, 189, 243, 147, 151, 189, 84, 13, 57, 62, 122, 166, 154, 62, 127, 7, 140, 62, 16, 130, 136, 189, 1, 232, 201, 61, 102, 104, 131, 62, 177, 186, 45, 191, 141, 49, 128, 62, 171, 97, 124, 62, 245, 81, 99, 60, 70, 172, 101, 61, 170, 146, 60, 190, 150, 103, 197, 62, 36, 164, 171, 61, 203, 57, 133, 190, 123, 165, 102, 190, 139, 169, 199, 189, 96, 124, 196, 189, 26, 104, 117, 189, 38, 68, 99, 189, 49, 59, 193, 62, 164, 71, 198, 62, 121, 71, 200, 188, 193, 116, 18, 187, 227, 245, 246, 59, 56, 79, 51, 63, 33, 2, 195, 62, 223, 167, 0, 190, 217, 25, 211, 190, 128, 83, 218, 189, 161, 86, 64, 190, 138, 151, 127, 190, 189, 117, 171, 190, 39, 19, 38, 190, 216, 11, 201, 62, 192, 139, 136, 61, 224, 86, 51, 62, 234, 102, 74, 189, 62, 192, 13, 191, 87, 108, 30, 62, 171, 153, 152, 62, 233, 226, 71, 60, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 238, 5, 206, 61, 124, 162, 187, 186, 110, 149, 67, 191, 205, 84, 192, 60, 162, 25, 45, 190, 182, 246, 137, 189, 118, 177, 3, 62, 251, 84, 215, 190, 198, 54, 2, 190, 191, 219, 134, 190, 209, 208, 227, 190, 171, 94, 173, 191, 27, 103, 57, 63, 192, 168, 90, 191, 34, 5, 45, 190, 104, 146, 227, 190, 139, 255, 233, 62, 177, 190, 108, 191, 175, 95, 195, 190, 149, 222, 175, 189, 95, 245, 102, 189, 91, 8, 182, 190, 130, 52, 118, 190, 45, 150, 48, 62, 220, 146, 158, 62, 3, 159, 142, 191, 79, 252, 107, 61, 229, 206, 48, 190, 101, 37, 196, 190, 33, 111, 110, 62, 62, 214, 184, 61, 39, 1, 61, 62, 160, 206, 14, 190, 189, 146, 23, 190, 125, 20, 141, 191, 139, 59, 131, 190, 188, 218, 146, 189, 182, 150, 95, 189, 57, 71, 124, 191, 225, 115, 43, 190, 14, 43, 202, 60, 181, 244, 106, 190, 8, 100, 186, 189, 243, 18, 93, 191, 247, 243, 89, 62, 105, 200, 83, 191, 236, 243, 29, 190, 195, 204, 112, 62, 153, 187, 217, 190, 164, 200, 222, 62, 142, 94, 1, 191, 142, 191, 73, 190, 53, 81, 113, 62, 20, 64, 4, 62, 123, 121, 224, 187, 204, 93, 48, 191, 89, 20, 222, 62, 48, 8, 135, 191, 16, 97, 181, 61, 217, 49, 190, 189, 46, 126, 188, 189, 0, 177, 136, 190, 175, 244, 26, 61, 96, 20, 128, 62, 53, 144, 236, 190, 100, 63, 61, 61, 185, 69, 154, 189, 228, 97, 166, 62, 99, 21, 136, 190, 86, 210, 170, 190, 84, 58, 143, 62, 89, 17, 201, 60, 231, 165, 141, 60, 136, 171, 66, 61, 44, 166, 163, 61, 159, 197, 59, 189, 157, 37, 107, 190, 171, 155, 135, 62, 106, 164, 250, 61, 64, 95, 99, 190, 229, 158, 139, 191, 61, 234, 168, 190, 18, 200, 149, 61, 29, 230, 72, 190, 27, 143, 123, 62, 175, 80, 68, 190, 35, 225, 133, 190, 146, 46, 145, 188, 190, 145, 167, 190, 109, 43, 122, 62, 216, 163, 11, 62, 143, 100, 149, 62, 31, 54, 142, 61, 5, 162, 70, 62, 88, 95, 131, 62, 198, 32, 174, 61, 92, 141, 204, 185, 85, 239, 1, 62, 50, 53, 35, 62, 177, 82, 46, 60, 80, 248, 10, 62, 225, 192, 234, 60, 30, 232, 106, 61, 65, 192, 51, 188, 10, 6, 196, 189, 210, 7, 241, 189, 206, 163, 230, 60, 183, 142, 197, 62, 253, 199, 61, 190, 196, 144, 118, 62, 230, 23, 128, 59, 187, 107, 81, 62, 141, 197, 88, 190, 46, 161, 148, 189, 29, 12, 252, 190, 34, 152, 232, 61, 93, 249, 183, 189, 73, 138, 61, 190, 64, 164, 228, 61, 192, 137, 80, 186, 159, 11, 146, 61, 143, 10, 119, 62, 180, 255, 48, 61, 107, 77, 109, 62, 217, 224, 95, 190, 124, 99, 37, 190, 11, 229, 203, 61, 55, 166, 82, 62, 48, 24, 137, 62, 124, 168, 217, 56, 156, 199, 93, 62, 120, 211, 29, 60, 32, 136, 195, 190, 32, 2, 177, 189, 99, 32, 211, 61, 83, 136, 129, 190, 12, 190, 2, 191, 88, 44, 112, 190, 130, 162, 128, 190, 155, 192, 153, 62, 206, 158, 22, 62, 207, 10, 164, 62, 8, 68, 207, 188, 205, 125, 203, 62, 121, 86, 150, 190, 211, 234, 111, 191, 11, 207, 159, 191, 231, 28, 37, 62, 112, 242, 93, 191, 44, 32, 14, 62, 65, 196, 24, 191, 68, 145, 44, 62, 166, 233, 200, 62, 26, 18, 32, 188, 46, 89, 55, 190, 54, 159, 194, 61, 162, 19, 102, 191, 125, 239, 55, 62, 59, 112, 167, 190, 181, 216, 174, 61, 54, 142, 107, 189, 156, 112, 167, 189, 190, 73, 63, 62, 14, 133, 88, 61, 183, 1, 21, 62, 123, 243, 183, 60, 221, 189, 151, 189, 88, 228, 154, 62, 53, 92, 211, 61, 213, 118, 37, 62, 102, 239, 158, 190, 164, 75, 47, 188, 14, 109, 1, 61, 9, 99, 0, 190, 191, 188, 31, 190, 14, 234, 201, 62, 0, 51, 235, 190, 57, 138, 48, 190, 153, 194, 102, 190, 30, 172, 176, 61, 237, 119, 69, 190, 173, 104, 150, 190, 17, 31, 114, 190, 100, 42, 31, 62, 245, 149, 172, 62, 176, 140, 81, 62, 27, 205, 187, 61, 149, 67, 206, 60, 234, 147, 219, 190, 27, 43, 211, 61, 144, 115, 138, 61, 131, 239, 134, 61, 237, 194, 85, 62, 202, 110, 201, 60, 204, 40, 150, 191, 206, 223, 200, 190, 124, 121, 74, 62, 144, 230, 209, 60, 44, 70, 242, 187, 156, 212, 130, 190, 188, 47, 17, 190, 49, 161, 106, 190, 34, 59, 40, 190, 140, 208, 123, 191, 251, 39, 230, 62, 155, 249, 122, 191, 6, 21, 13, 189, 70, 73, 6, 190, 241, 23, 11, 62, 144, 145, 30, 62, 71, 75, 46, 63, 104, 137, 27, 190, 32, 122, 14, 188, 151, 110, 1, 62, 30, 180, 95, 61, 22, 61, 80, 61, 183, 0, 82, 62, 39, 217, 187, 190, 243, 133, 223, 61, 38, 246, 80, 191, 125, 111, 53, 189, 144, 141, 28, 189, 145, 227, 231, 61, 178, 203, 227, 61, 129, 0, 130, 189, 139, 66, 242, 61, 252, 21, 227, 189, 149, 100, 96, 189, 109, 80, 205, 189, 123, 75, 154, 189, 84, 17, 21, 61, 63, 11, 145, 189, 100, 189, 10, 190, 171, 117, 210, 187, 116, 36, 221, 189, 22, 186, 147, 189, 25, 232, 51, 58, 224, 227, 237, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 174, 190, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 98, 94, 8, 61, 194, 209, 34, 190, 223, 114, 228, 61, 152, 199, 161, 189, 94, 242, 150, 61, 75, 220, 244, 189, 202, 189, 183, 189, 82, 192, 233, 189, 38, 99, 28, 190, 66, 250, 189, 190, 236, 114, 160, 189, 63, 58, 135, 190, 184, 244, 227, 189, 138, 142, 27, 61, 113, 4, 207, 61, 154, 95, 139, 61, 136, 91, 127, 62, 29, 41, 202, 61, 232, 122, 132, 62, 209, 228, 201, 61, 183, 162, 254, 190, 224, 166, 178, 190, 155, 165, 13, 189, 214, 71, 232, 188, 127, 41, 237, 61, 240, 87, 143, 191, 35, 179, 36, 61, 209, 121, 158, 61, 4, 155, 201, 61, 67, 51, 176, 62, 11, 44, 110, 189, 35, 95, 255, 188, 217, 46, 241, 61, 53, 36, 212, 190, 113, 141, 221, 61, 165, 179, 166, 189, 200, 30, 45, 188, 222, 23, 156, 188, 33, 137, 46, 189, 95, 143, 185, 61, 11, 214, 200, 61, 103, 122, 172, 190, 119, 65, 227, 189, 141, 162, 58, 190, 176, 152, 126, 62, 157, 170, 34, 190, 68, 37, 43, 62, 189, 106, 62, 62, 148, 208, 157, 62, 223, 36, 47, 61, 229, 207, 5, 62, 71, 249, 116, 62, 154, 23, 184, 190, 204, 49, 162, 190, 25, 135, 196, 188, 181, 111, 11, 190, 188, 71, 217, 60, 160, 191, 255, 190, 221, 174, 31, 62, 75, 195, 200, 62, 128, 76, 137, 189, 24, 50, 236, 60, 238, 70, 6, 190, 13, 106, 5, 62, 10, 128, 5, 62, 33, 215, 159, 191, 114, 138, 68, 62, 199, 150, 173, 189, 197, 7, 133, 189, 73, 78, 157, 62, 158, 159, 57, 190, 226, 171, 61, 190, 1, 94, 35, 61, 123, 44, 76, 190, 69, 176, 220, 60, 198, 237, 115, 189, 227, 243, 176, 189, 194, 132, 224, 189, 221, 193, 0, 190, 43, 228, 220, 61, 160, 249, 180, 62, 180, 26, 8, 189, 40, 232, 255, 188, 187, 164, 26, 190, 64, 25, 132, 189, 140, 65, 164, 189, 202, 204, 84, 61, 220, 182, 146, 59, 0, 148, 185, 61, 8, 32, 28, 191, 215, 216, 192, 60, 213, 41, 7, 191, 29, 225, 185, 61, 91, 240, 176, 189, 254, 238, 190, 190, 244, 4, 216, 61, 154, 105, 40, 62, 104, 94, 152, 61, 47, 148, 29, 190, 68, 200, 69, 190, 197, 89, 92, 62, 102, 25, 221, 190, 54, 215, 53, 189, 224, 188, 34, 189, 213, 109, 186, 61, 224, 99, 83, 62, 130, 212, 146, 61, 37, 129, 237, 61, 43, 211, 35, 62, 196, 220, 229, 190, 89, 16, 26, 62, 149, 14, 131, 61, 131, 128, 241, 60, 215, 251, 58, 61, 165, 25, 22, 62, 25, 254, 57, 190, 94, 42, 121, 61, 11, 63, 177, 190, 17, 162, 87, 62, 185, 71, 64, 189, 247, 112, 158, 62, 56, 122, 30, 190, 75, 204, 155, 188, 221, 141, 49, 191, 21, 155, 60, 62, 162, 133, 169, 190, 128, 136, 128, 190, 163, 133, 249, 189, 219, 118, 124, 62, 118, 130, 34, 62, 147, 2, 123, 189, 207, 79, 86, 187, 20, 113, 98, 60, 67, 157, 40, 191, 80, 137, 115, 62, 187, 244, 30, 191, 133, 179, 211, 189, 252, 149, 207, 60, 61, 68, 186, 62, 223, 119, 135, 191, 46, 197, 179, 59, 37, 59, 58, 62, 147, 75, 174, 61, 177, 95, 217, 61, 191, 51, 168, 190, 128, 91, 3, 62, 161, 2, 114, 190, 214, 230, 149, 189, 6, 92, 156, 191, 202, 219, 51, 63, 161, 193, 129, 191, 36, 191, 163, 189, 145, 229, 92, 189, 205, 241, 52, 62, 42, 185, 154, 62, 238, 133, 74, 63, 71, 209, 89, 190, 19, 206, 130, 59, 1, 187, 46, 189, 0, 202, 19, 190, 141, 186, 167, 188, 20, 11, 106, 62, 125, 167, 87, 191, 133, 84, 224, 189, 220, 68, 227, 189, 177, 114, 34, 191, 229, 114, 163, 62, 231, 145, 208, 61, 216, 30, 29, 62, 232, 123, 51, 191, 150, 54, 112, 189, 163, 75, 224, 190, 185, 17, 62, 190, 135, 77, 148, 61, 86, 43, 125, 188, 171, 118, 6, 59, 179, 46, 164, 62, 229, 29, 100, 61, 209, 54, 83, 190, 139, 50, 126, 61, 121, 161, 61, 191, 114, 80, 90, 190, 236, 133, 242, 190, 240, 156, 124, 189, 205, 96, 17, 62, 213, 48, 129, 191, 233, 254, 201, 62, 2, 202, 21, 62, 223, 194, 218, 189, 118, 138, 194, 61, 220, 94, 55, 190, 254, 53, 252, 60, 61, 162, 13, 191, 2, 17, 209, 190, 147, 217, 85, 190, 162, 138, 54, 61, 173, 254, 225, 190, 158, 170, 208, 190, 169, 138, 1, 191, 190, 123, 79, 190, 227, 97, 38, 61, 167, 45, 214, 60, 153, 51, 36, 62, 49, 124, 182, 190, 33, 106, 5, 62, 231, 160, 120, 189, 35, 186, 17, 62, 134, 197, 178, 62, 106, 152, 214, 59, 143, 0, 168, 190, 211, 52, 39, 61, 26, 193, 2, 62, 103, 221, 13, 191, 177, 147, 166, 61, 112, 75, 246, 189, 95, 0, 246, 189, 87, 230, 254, 59, 21, 72, 202, 189, 19, 26, 134, 61, 53, 192, 18, 191, 190, 123, 199, 61, 75, 161, 61, 62, 66, 33, 150, 189, 86, 42, 6, 189, 128, 164, 177, 189, 224, 195, 128, 188, 49, 211, 99, 190, 222, 158, 162, 188, 110, 199, 86, 61, 35, 27, 139, 190, 143, 4, 220, 189, 35, 235, 202, 189, 5, 64, 13, 60, 13, 108, 20, 191, 74, 19, 121, 61, 110, 135, 209, 190, 202, 217, 53, 190, 171, 165, 210, 61, 97, 133, 23, 62, 220, 74, 6, 189, 70, 23, 180, 62, 79, 127, 85, 61, 141, 11, 63, 62, 174, 174, 66, 190, 187, 31, 32, 191, 199, 155, 102, 190, 160, 95, 189, 189, 110, 49, 225, 189, 212, 155, 41, 62, 158, 13, 0, 191, 82, 45, 81, 62, 63, 226, 245, 62, 254, 182, 100, 189, 205, 140, 132, 62, 161, 96, 7, 62, 189, 210, 76, 62, 225, 232, 137, 189, 142, 163, 183, 190, 10, 219, 166, 61, 54, 94, 211, 61, 47, 238, 133, 189, 247, 244, 28, 62, 70, 135, 188, 188, 24, 231, 159, 61, 28, 104, 85, 62, 16, 44, 2, 190, 31, 49, 42, 190, 81, 70, 186, 61, 88, 176, 14, 59, 198, 37, 9, 62, 124, 83, 6, 61, 6, 223, 5, 62, 255, 177, 169, 62, 64, 247, 131, 188, 145, 101, 38, 58, 104, 190, 119, 61, 84, 45, 204, 190, 115, 71, 235, 59, 36, 200, 82, 189, 162, 252, 247, 189, 56, 46, 137, 62, 206, 68, 41, 191, 22, 121, 159, 189, 160, 51, 145, 190, 29, 190, 16, 190, 142, 55, 97, 61, 170, 239, 133, 189, 112, 201, 116, 189, 8, 125, 172, 61, 118, 173, 22, 62, 65, 39, 48, 62, 2, 18, 35, 188, 22, 102, 126, 189, 60, 39, 171, 190, 37, 34, 131, 189, 22, 86, 133, 189, 44, 7, 65, 62, 217, 94, 238, 190, 92, 208, 253, 60, 21, 168, 157, 191, 90, 207, 29, 62, 30, 73, 241, 61, 177, 90, 65, 62, 26, 56, 165, 62, 23, 70, 98, 62, 182, 250, 72, 190, 106, 28, 142, 62, 236, 205, 164, 59, 57, 39, 76, 191, 218, 96, 160, 62, 251, 161, 134, 188, 28, 142, 176, 188, 165, 106, 109, 62, 188, 227, 107, 191, 118, 57, 108, 191, 177, 4, 156, 189, 6, 121, 250, 189, 182, 216, 172, 61, 50, 217, 63, 190, 9, 216, 112, 62, 147, 30, 112, 189, 235, 192, 12, 188, 208, 161, 161, 189, 37, 27, 75, 189, 114, 16, 1, 61, 64, 51, 160, 61, 255, 68, 159, 188, 173, 119, 49, 62, 207, 181, 213, 59, 33, 153, 147, 189, 28, 254, 5, 190, 124, 55, 232, 62, 21, 60, 154, 61, 127, 200, 32, 191, 57, 23, 248, 188, 35, 130, 7, 188, 188, 198, 138, 188, 239, 223, 37, 190, 66, 30, 130, 190, 202, 130, 47, 60, 177, 116, 127, 62, 134, 90, 95, 190, 108, 224, 124, 62, 215, 69, 189, 61, 208, 150, 56, 63, 21, 39, 136, 190, 127, 118, 227, 189, 207, 27, 29, 191, 129, 189, 90, 62, 255, 48, 2, 191, 189, 146, 89, 190, 183, 132, 23, 190, 76, 133, 182, 62, 37, 67, 153, 62, 37, 1, 46, 62, 226, 159, 117, 61, 35, 90, 171, 61, 159, 228, 13, 191, 107, 175, 160, 62, 10, 165, 78, 190, 65, 137, 180, 189, 45, 194, 167, 59, 220, 97, 4, 62, 191, 43, 242, 189, 22, 246, 84, 188, 5, 8, 5, 62, 204, 215, 160, 61, 202, 41, 179, 186, 205, 39, 147, 60, 187, 101, 136, 60, 244, 146, 71, 190, 6, 48, 124, 62, 46, 148, 143, 62, 192, 190, 185, 189, 2, 77, 73, 62, 131, 142, 171, 61, 28, 207, 42, 62, 45, 160, 130, 62, 134, 107, 137, 190, 105, 196, 49, 191, 113, 69, 139, 61, 169, 73, 30, 62, 50, 71, 12, 189, 176, 230, 159, 62, 29, 88, 233, 59, 16, 97, 64, 191, 193, 120, 185, 190, 183, 98, 40, 189, 33, 196, 76, 190, 21, 218, 144, 189, 129, 223, 14, 191, 84, 239, 245, 188, 109, 29, 228, 60, 172, 112, 185, 188, 92, 128, 52, 62, 232, 148, 63, 190, 179, 117, 153, 61, 173, 136, 141, 61, 2, 32, 188, 61, 132, 231, 21, 59, 181, 253, 84, 62, 103, 122, 194, 61, 217, 228, 34, 62, 239, 111, 134, 62, 179, 53, 251, 59, 248, 244, 42, 189, 18, 49, 6, 60, 150, 117, 81, 61, 168, 82, 183, 189, 187, 173, 4, 191, 80, 161, 163, 189, 202, 159, 137, 62, 182, 68, 0, 61, 194, 84, 38, 190, 122, 126, 58, 189, 65, 247, 226, 61, 8, 76, 231, 61, 49, 120, 99, 191, 139, 152, 148, 62, 129, 139, 48, 189, 92, 74, 12, 62, 54, 248, 133, 62, 238, 241, 97, 190, 164, 226, 226, 190, 16, 87, 201, 190, 165, 16, 180, 190, 173, 29, 137, 190, 112, 116, 45, 189, 240, 103, 241, 61, 10, 210, 55, 189, 83, 3, 196, 190, 135, 38, 122, 62, 157, 23, 20, 190, 138, 5, 53, 190, 105, 207, 210, 189, 106, 9, 114, 189, 206, 126, 2, 191, 201, 193, 199, 61, 206, 28, 236, 190, 127, 55, 27, 190, 234, 172, 4, 191, 54, 116, 17, 190, 45, 148, 196, 190, 181, 98, 78, 190, 205, 224, 46, 191, 46, 147, 114, 189, 32, 33, 142, 190, 147, 49, 104, 59, 239, 218, 72, 60, 4, 51, 53, 186, 0, 70, 231, 190, 93, 227, 43, 190, 32, 200, 168, 188, 104, 227, 63, 190, 219, 56, 96, 62, 240, 247, 59, 189, 86, 185, 123, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 232, 184, 61, 81, 126, 136, 189, 156, 157, 29, 62, 68, 123, 56, 190, 198, 62, 86, 62, 75, 61, 1, 190, 179, 102, 239, 62, 231, 187, 177, 62, 19, 227, 232, 61, 180, 26, 24, 190, 131, 191, 6, 62, 83, 192, 103, 61, 12, 202, 197, 61, 122, 162, 146, 62, 169, 132, 118, 62, 45, 83, 144, 62, 188, 137, 83, 189, 115, 123, 123, 189, 96, 71, 108, 62, 235, 150, 4, 62, 58, 156, 103, 62, 185, 24, 86, 188, 243, 239, 191, 61, 187, 247, 133, 61, 224, 112, 181, 188, 123, 67, 54, 62, 0, 148, 213, 62, 49, 237, 67, 62, 191, 164, 99, 62, 60, 244, 85, 190, 243, 133, 38, 62, 216, 161, 152, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 53, 67, 63, 96, 52, 107, 191, 45, 142, 73, 187, 101, 135, 116, 191, 62, 97, 140, 63, 205, 177, 93, 189, 6, 86, 114, 191, 102, 172, 158, 190, 139, 137, 5, 191, 254, 54, 152, 189, 255, 170, 118, 63, 8, 174, 89, 63, 181, 255, 150, 62, 107, 0, 3, 188, 150, 110, 36, 191, 179, 60, 168, 189, 110, 138, 91, 62, 201, 200, 24, 188, 142, 67, 147, 62, 226, 229, 176, 62, 110, 106, 42, 189, 172, 125, 88, 190, 67, 254, 188, 62, 178, 20, 27, 63, 207, 141, 35, 189, 118, 140, 169, 62, 224, 143, 26, 189, 103, 54, 39, 63, 157, 134, 242, 190, 14, 253, 216, 190, 187, 131, 141, 62, 64, 101, 33, 63, 12, 159, 187, 61, 30, 172, 130, 62, 131, 246, 11, 191, 192, 182, 147, 62, 120, 235, 101, 62, 14, 58, 1, 191, 172, 45, 84, 62, 68, 83, 194, 190, 61, 19, 173, 61, 97, 142, 52, 62, 140, 99, 137, 190, 65, 94, 253, 61, 232, 214, 100, 190, 247, 75, 44, 190, 32, 94, 22, 62, 196, 103, 168, 190, 250, 229, 15, 190, 91, 45, 138, 61, 157, 77, 227, 190, 99, 234, 139, 61, 14, 165, 142, 190, 64, 29, 50, 62, 232, 50, 12, 190, 68, 39, 17, 63, 121, 50, 22, 60, 248, 231, 130, 62, 100, 165, 144, 190, 144, 155, 37, 189, 59, 235, 37, 62, 52, 225, 52, 190, 199, 157, 85, 189, 240, 64, 161, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 195, 139, 190, 47, 35, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 21, 35, 191, 165, 212, 188, 63, 21, 91, 130, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {179, 124, 75, 64, 121, 72, 20, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}