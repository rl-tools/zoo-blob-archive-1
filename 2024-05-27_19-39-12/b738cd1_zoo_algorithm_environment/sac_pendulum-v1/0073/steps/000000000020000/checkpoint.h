// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 203, 127, 63, 252, 186, 117, 63, 92, 120, 193, 62, 242, 28, 216, 190, 215, 64, 161, 190, 16, 128, 144, 190, 109, 82, 75, 190, 165, 31, 150, 191, 28, 172, 103, 190, 150, 207, 195, 189, 137, 199, 1, 63, 245, 14, 16, 191, 100, 119, 137, 190, 192, 106, 157, 62, 56, 79, 7, 63, 136, 180, 130, 62, 255, 160, 156, 62, 79, 42, 144, 62, 160, 83, 185, 61, 179, 193, 156, 63, 131, 79, 21, 190, 54, 147, 31, 63, 66, 201, 220, 190, 86, 116, 130, 189, 3, 154, 121, 62, 58, 221, 63, 191, 218, 142, 34, 190, 220, 110, 58, 63, 228, 53, 55, 191, 1, 136, 253, 190, 192, 175, 243, 189, 56, 133, 12, 191, 40, 246, 170, 62, 53, 31, 131, 191, 107, 43, 33, 191, 11, 66, 35, 190, 40, 176, 38, 191, 100, 117, 64, 63, 171, 224, 160, 190, 226, 119, 15, 191, 105, 36, 50, 191, 95, 178, 165, 190, 27, 169, 173, 189, 242, 60, 129, 190, 25, 137, 172, 188, 209, 245, 6, 191, 129, 93, 92, 191, 11, 79, 224, 61, 255, 24, 21, 63, 114, 253, 35, 63, 218, 107, 160, 62, 24, 198, 18, 63, 246, 161, 146, 191, 187, 162, 19, 190, 184, 50, 241, 62, 245, 137, 125, 191, 71, 196, 123, 190, 124, 67, 55, 63, 151, 8, 123, 62, 33, 122, 180, 62, 4, 188, 221, 190, 139, 10, 29, 190, 79, 77, 41, 63, 233, 142, 121, 62, 18, 159, 7, 63, 34, 8, 114, 62, 225, 11, 138, 62, 174, 186, 50, 191, 211, 254, 130, 62, 203, 88, 55, 63, 132, 213, 252, 62, 51, 99, 85, 61, 192, 237, 51, 191, 230, 21, 140, 63, 182, 238, 30, 62, 94, 247, 13, 62, 81, 246, 176, 191, 179, 243, 227, 190, 96, 176, 180, 189, 150, 254, 6, 190, 27, 217, 33, 60, 44, 140, 32, 62, 55, 184, 160, 62, 111, 120, 222, 190, 47, 81, 91, 63, 91, 194, 53, 191, 148, 238, 154, 190, 251, 5, 221, 62, 42, 245, 118, 63, 228, 210, 59, 62, 255, 177, 16, 191, 89, 87, 241, 62, 103, 160, 20, 62, 35, 54, 163, 190, 168, 64, 108, 63, 74, 119, 6, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 25, 41, 191, 77, 198, 152, 190, 20, 245, 142, 190, 176, 124, 156, 188, 91, 20, 246, 189, 224, 169, 130, 62, 6, 201, 156, 61, 2, 218, 143, 62, 132, 66, 28, 60, 66, 122, 105, 62, 147, 208, 24, 190, 193, 248, 214, 189, 124, 227, 166, 190, 69, 88, 83, 62, 53, 32, 19, 191, 92, 9, 47, 63, 59, 117, 55, 191, 41, 198, 53, 190, 97, 114, 237, 189, 225, 150, 171, 61, 113, 101, 64, 190, 52, 243, 85, 190, 254, 30, 158, 62, 222, 139, 225, 62, 206, 55, 225, 62, 119, 227, 170, 62, 12, 226, 130, 190, 36, 224, 130, 62, 22, 6, 19, 191, 212, 85, 174, 62, 228, 39, 141, 62, 226, 74, 127, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 213, 31, 191, 208, 178, 13, 190, 159, 80, 201, 191, 61, 182, 135, 190, 28, 8, 144, 61, 77, 198, 52, 61, 180, 107, 193, 190, 39, 59, 165, 62, 88, 89, 155, 62, 233, 43, 71, 61, 123, 164, 40, 190, 7, 97, 146, 191, 18, 134, 165, 62, 202, 133, 213, 191, 179, 179, 39, 62, 199, 150, 189, 62, 72, 4, 166, 191, 87, 7, 215, 62, 247, 92, 20, 63, 245, 86, 52, 60, 85, 151, 156, 189, 140, 187, 171, 190, 188, 239, 48, 60, 15, 34, 202, 189, 50, 120, 65, 62, 127, 151, 189, 58, 217, 76, 195, 60, 219, 159, 192, 190, 222, 55, 184, 188, 3, 211, 114, 190, 15, 84, 233, 61, 220, 205, 4, 62, 238, 226, 58, 62, 123, 48, 173, 190, 173, 164, 166, 190, 96, 91, 237, 62, 217, 219, 210, 189, 153, 2, 196, 189, 238, 3, 101, 62, 224, 74, 88, 56, 52, 238, 141, 191, 71, 87, 8, 189, 166, 145, 70, 62, 217, 148, 0, 190, 129, 189, 211, 189, 114, 199, 98, 59, 158, 209, 163, 61, 124, 103, 113, 62, 232, 52, 35, 62, 171, 109, 215, 191, 37, 87, 13, 192, 67, 201, 43, 189, 69, 228, 146, 187, 3, 136, 56, 62, 187, 118, 93, 190, 14, 37, 170, 62, 211, 142, 184, 189, 65, 226, 231, 190, 205, 48, 212, 187, 74, 243, 230, 62, 133, 233, 95, 191, 122, 129, 188, 61, 151, 100, 103, 190, 81, 234, 138, 60, 52, 51, 7, 191, 246, 121, 51, 190, 136, 41, 189, 189, 160, 218, 213, 189, 230, 147, 208, 189, 241, 148, 228, 61, 127, 237, 69, 62, 12, 191, 161, 189, 169, 243, 172, 61, 87, 111, 127, 62, 184, 57, 61, 190, 102, 67, 124, 190, 8, 138, 6, 191, 69, 32, 45, 190, 93, 0, 72, 61, 160, 243, 129, 189, 130, 158, 221, 191, 111, 50, 225, 189, 83, 159, 173, 57, 24, 81, 12, 190, 108, 228, 168, 62, 227, 111, 243, 190, 85, 166, 176, 189, 186, 121, 141, 61, 65, 78, 25, 191, 48, 189, 67, 61, 130, 89, 21, 62, 100, 54, 124, 189, 228, 13, 96, 62, 225, 83, 95, 61, 154, 205, 90, 190, 228, 243, 240, 189, 117, 201, 7, 62, 116, 241, 57, 62, 38, 148, 114, 190, 235, 43, 34, 62, 247, 3, 94, 190, 169, 10, 108, 190, 165, 166, 24, 191, 238, 36, 2, 62, 49, 167, 169, 62, 156, 252, 31, 188, 91, 68, 157, 61, 214, 185, 183, 190, 177, 105, 40, 190, 176, 92, 104, 61, 4, 251, 12, 61, 10, 103, 66, 190, 249, 45, 39, 190, 8, 216, 213, 62, 32, 122, 8, 63, 126, 108, 19, 191, 110, 36, 219, 188, 25, 0, 143, 190, 116, 201, 23, 62, 25, 174, 9, 190, 106, 71, 139, 191, 215, 0, 115, 62, 132, 40, 97, 61, 252, 223, 57, 62, 125, 159, 239, 62, 145, 150, 38, 192, 229, 35, 243, 61, 63, 176, 77, 191, 229, 115, 72, 191, 64, 182, 194, 61, 237, 226, 140, 191, 91, 188, 3, 62, 253, 243, 4, 61, 15, 143, 235, 61, 184, 40, 24, 62, 147, 51, 0, 63, 34, 42, 219, 189, 58, 208, 64, 190, 84, 109, 191, 190, 186, 50, 202, 191, 104, 166, 44, 63, 217, 55, 124, 191, 189, 73, 46, 190, 35, 155, 29, 62, 90, 125, 180, 191, 8, 152, 24, 63, 84, 247, 86, 63, 74, 161, 247, 189, 243, 29, 216, 61, 46, 118, 204, 190, 44, 5, 94, 62, 123, 238, 194, 189, 87, 197, 191, 61, 70, 124, 90, 191, 195, 103, 44, 189, 137, 12, 35, 190, 223, 134, 111, 191, 190, 205, 160, 189, 153, 55, 90, 61, 36, 217, 177, 189, 240, 73, 213, 190, 42, 78, 175, 189, 117, 187, 210, 60, 51, 210, 96, 189, 69, 102, 239, 60, 12, 106, 246, 61, 65, 58, 229, 190, 67, 66, 76, 62, 35, 227, 244, 61, 114, 60, 46, 62, 83, 230, 222, 189, 172, 67, 28, 190, 200, 205, 213, 190, 243, 110, 72, 189, 43, 90, 208, 61, 149, 101, 89, 62, 120, 74, 215, 191, 31, 23, 33, 62, 207, 148, 163, 62, 169, 154, 177, 61, 38, 174, 9, 61, 101, 176, 131, 190, 97, 110, 91, 62, 210, 219, 74, 62, 133, 38, 136, 191, 150, 44, 27, 62, 56, 17, 221, 189, 7, 238, 77, 190, 97, 122, 80, 61, 27, 152, 62, 190, 93, 135, 154, 190, 200, 126, 121, 191, 179, 39, 210, 190, 45, 62, 92, 191, 145, 195, 215, 189, 177, 21, 206, 190, 196, 234, 147, 190, 167, 255, 52, 191, 95, 255, 130, 190, 25, 99, 150, 60, 119, 194, 158, 61, 188, 187, 161, 61, 104, 177, 25, 63, 68, 42, 107, 191, 136, 38, 12, 190, 80, 95, 151, 189, 171, 251, 37, 190, 146, 207, 249, 62, 76, 66, 45, 62, 7, 245, 45, 61, 83, 128, 53, 62, 177, 139, 139, 191, 196, 253, 151, 61, 212, 166, 156, 190, 244, 169, 167, 62, 4, 102, 38, 62, 232, 210, 20, 61, 235, 216, 66, 62, 146, 100, 218, 61, 52, 159, 147, 190, 66, 77, 87, 60, 199, 147, 171, 191, 13, 76, 179, 62, 253, 43, 2, 188, 241, 171, 13, 190, 221, 254, 176, 190, 186, 123, 208, 190, 196, 145, 161, 61, 67, 155, 113, 189, 21, 7, 128, 62, 249, 128, 243, 61, 174, 96, 143, 62, 75, 28, 48, 190, 159, 94, 247, 188, 207, 193, 30, 61, 91, 130, 181, 188, 56, 211, 215, 189, 165, 245, 158, 188, 57, 40, 15, 62, 36, 165, 141, 62, 81, 187, 222, 190, 53, 111, 16, 191, 113, 94, 91, 191, 99, 99, 179, 61, 167, 171, 152, 189, 16, 101, 32, 190, 211, 191, 122, 62, 173, 101, 160, 62, 29, 201, 91, 62, 28, 8, 59, 189, 1, 232, 201, 61, 47, 93, 120, 62, 133, 135, 25, 191, 1, 53, 113, 62, 81, 188, 36, 62, 134, 251, 2, 190, 47, 251, 149, 60, 81, 150, 98, 190, 115, 82, 202, 62, 160, 136, 204, 60, 252, 167, 145, 190, 68, 123, 121, 190, 161, 209, 52, 190, 115, 99, 147, 189, 48, 23, 254, 188, 120, 97, 188, 189, 184, 74, 179, 62, 220, 115, 192, 62, 46, 172, 164, 189, 166, 23, 229, 188, 227, 245, 246, 59, 146, 102, 59, 63, 70, 203, 162, 62, 16, 187, 129, 189, 243, 207, 200, 190, 186, 98, 8, 190, 17, 164, 92, 190, 225, 156, 142, 190, 218, 12, 181, 190, 49, 27, 96, 190, 78, 126, 185, 62, 71, 37, 91, 61, 224, 86, 51, 62, 163, 31, 221, 189, 10, 100, 14, 191, 16, 176, 244, 61, 238, 54, 150, 62, 24, 73, 74, 188, 133, 96, 246, 189, 113, 94, 139, 61, 112, 66, 4, 188, 42, 85, 165, 61, 51, 225, 7, 189, 136, 50, 28, 59, 106, 105, 185, 189, 142, 101, 42, 190, 232, 98, 3, 190, 160, 157, 8, 190, 55, 69, 77, 189, 173, 82, 239, 189, 80, 115, 18, 62, 15, 193, 199, 189, 57, 27, 70, 61, 163, 190, 126, 61, 169, 29, 166, 189, 234, 10, 133, 61, 106, 80, 65, 61, 89, 77, 29, 190, 110, 196, 42, 190, 124, 140, 28, 62, 79, 37, 52, 62, 252, 246, 177, 188, 108, 34, 17, 62, 213, 223, 132, 189, 69, 22, 21, 62, 33, 38, 220, 60, 161, 147, 253, 188, 179, 212, 53, 190, 242, 249, 27, 190, 171, 205, 3, 190, 16, 80, 43, 62, 211, 251, 137, 188, 110, 149, 67, 191, 161, 99, 188, 60, 237, 212, 13, 190, 131, 128, 56, 189, 223, 253, 64, 62, 157, 42, 35, 191, 83, 215, 5, 190, 121, 101, 184, 190, 109, 60, 249, 190, 92, 64, 193, 191, 102, 154, 51, 63, 242, 128, 107, 191, 34, 5, 45, 190, 96, 57, 35, 191, 85, 201, 16, 63, 130, 73, 151, 191, 105, 97, 2, 191, 230, 158, 145, 189, 193, 215, 160, 189, 52, 199, 148, 190, 1, 208, 221, 190, 220, 131, 83, 62, 248, 192, 174, 62, 172, 55, 150, 191, 79, 252, 107, 61, 66, 148, 60, 190, 159, 139, 236, 190, 68, 116, 143, 62, 83, 154, 211, 61, 39, 181, 103, 62, 200, 107, 3, 190, 189, 146, 23, 190, 220, 24, 134, 191, 161, 40, 182, 190, 4, 242, 145, 189, 133, 52, 129, 189, 97, 172, 131, 191, 19, 20, 131, 190, 201, 125, 7, 62, 181, 244, 106, 190, 154, 63, 216, 189, 178, 216, 87, 191, 197, 132, 94, 62, 70, 243, 86, 191, 236, 243, 29, 190, 52, 84, 99, 62, 238, 113, 199, 190, 239, 138, 179, 62, 2, 48, 230, 190, 143, 135, 92, 190, 148, 0, 108, 62, 210, 33, 12, 62, 33, 93, 36, 189, 42, 175, 64, 191, 175, 49, 0, 63, 103, 70, 128, 191, 16, 97, 181, 61, 209, 204, 40, 190, 46, 126, 188, 189, 245, 171, 117, 190, 29, 71, 148, 61, 117, 226, 158, 62, 140, 208, 177, 190, 239, 105, 239, 61, 152, 160, 26, 61, 42, 157, 182, 62, 215, 206, 141, 190, 192, 4, 143, 190, 42, 18, 155, 62, 93, 182, 137, 61, 76, 237, 158, 61, 48, 251, 205, 61, 71, 223, 217, 61, 74, 100, 133, 61, 44, 76, 87, 190, 62, 210, 173, 62, 106, 164, 250, 61, 85, 199, 117, 190, 180, 189, 174, 191, 213, 183, 143, 190, 202, 79, 4, 62, 216, 178, 240, 189, 42, 110, 146, 62, 25, 208, 40, 62, 190, 9, 119, 190, 71, 63, 149, 60, 71, 253, 212, 190, 152, 77, 157, 62, 216, 163, 11, 62, 149, 244, 175, 62, 52, 154, 206, 61, 163, 97, 135, 62, 128, 247, 60, 62, 202, 166, 17, 62, 186, 192, 35, 58, 132, 73, 220, 61, 164, 141, 43, 62, 34, 181, 78, 188, 0, 93, 195, 61, 153, 6, 66, 60, 102, 75, 46, 61, 121, 187, 205, 188, 176, 91, 5, 190, 128, 251, 14, 190, 40, 70, 51, 60, 35, 117, 210, 62, 227, 2, 94, 190, 126, 97, 100, 62, 230, 23, 128, 59, 165, 114, 32, 62, 237, 168, 112, 190, 240, 187, 236, 189, 183, 200, 7, 191, 190, 106, 215, 61, 201, 235, 1, 190, 250, 108, 75, 190, 252, 239, 161, 61, 69, 85, 29, 187, 219, 111, 139, 186, 67, 237, 89, 62, 180, 255, 48, 61, 166, 48, 91, 62, 168, 232, 136, 190, 115, 1, 28, 190, 252, 220, 11, 61, 47, 56, 71, 62, 49, 56, 48, 62, 51, 42, 44, 61, 214, 184, 144, 62, 70, 60, 138, 61, 26, 18, 11, 191, 152, 197, 20, 190, 222, 69, 36, 62, 79, 228, 62, 190, 208, 108, 247, 190, 223, 143, 41, 190, 251, 40, 169, 190, 224, 15, 163, 62, 38, 150, 58, 62, 182, 36, 183, 62, 8, 68, 207, 188, 146, 133, 252, 62, 69, 167, 209, 190, 34, 132, 152, 191, 114, 9, 156, 191, 128, 162, 211, 61, 166, 12, 124, 191, 179, 234, 219, 187, 10, 39, 80, 191, 8, 24, 89, 62, 116, 131, 193, 62, 239, 194, 16, 61, 46, 89, 55, 190, 37, 162, 32, 62, 239, 188, 88, 191, 82, 231, 75, 62, 99, 234, 214, 190, 172, 13, 195, 61, 195, 13, 180, 189, 241, 211, 30, 190, 1, 200, 231, 61, 103, 118, 178, 60, 59, 9, 189, 61, 21, 215, 10, 61, 76, 88, 3, 190, 1, 100, 170, 62, 123, 25, 150, 61, 151, 105, 12, 62, 112, 130, 153, 190, 208, 199, 178, 189, 172, 218, 64, 187, 131, 25, 79, 190, 191, 188, 31, 190, 124, 1, 201, 62, 210, 154, 229, 190, 212, 86, 44, 190, 38, 72, 128, 190, 109, 146, 206, 61, 7, 159, 105, 190, 57, 68, 193, 190, 42, 83, 19, 190, 1, 182, 47, 62, 97, 61, 143, 62, 41, 42, 28, 62, 27, 205, 187, 61, 185, 111, 176, 188, 123, 165, 227, 190, 245, 183, 184, 61, 1, 236, 47, 189, 111, 97, 82, 189, 60, 226, 156, 62, 202, 110, 201, 60, 204, 40, 150, 191, 52, 177, 21, 191, 177, 181, 80, 62, 77, 186, 24, 61, 90, 127, 35, 62, 227, 37, 233, 190, 88, 122, 68, 190, 170, 84, 254, 190, 172, 221, 73, 190, 99, 164, 110, 191, 127, 244, 174, 62, 190, 149, 148, 191, 6, 21, 13, 189, 211, 207, 56, 190, 116, 1, 128, 62, 251, 214, 177, 60, 81, 174, 39, 63, 224, 130, 32, 190, 77, 163, 201, 188, 32, 58, 53, 62, 113, 174, 146, 188, 255, 165, 3, 62, 245, 132, 169, 62, 39, 217, 187, 190, 243, 133, 223, 61, 140, 63, 80, 191, 125, 111, 53, 189, 83, 172, 131, 61, 173, 216, 59, 62, 59, 16, 125, 62, 129, 0, 130, 189, 139, 66, 242, 61, 252, 21, 227, 189, 149, 100, 96, 189, 109, 80, 205, 189, 123, 75, 154, 189, 84, 17, 21, 61, 63, 11, 145, 189, 100, 189, 10, 190, 171, 117, 210, 187, 116, 36, 221, 189, 22, 186, 147, 189, 25, 232, 51, 58, 224, 227, 237, 189, 56, 22, 225, 60, 34, 236, 0, 61, 136, 109, 224, 189, 131, 143, 246, 189, 174, 190, 26, 190, 68, 117, 107, 189, 16, 113, 231, 61, 49, 42, 64, 61, 175, 186, 147, 61, 98, 94, 8, 61, 194, 209, 34, 190, 223, 114, 228, 61, 152, 199, 161, 189, 94, 242, 150, 61, 75, 220, 244, 189, 202, 189, 183, 189, 82, 192, 233, 189, 38, 99, 28, 190, 73, 53, 191, 190, 159, 223, 164, 189, 65, 144, 75, 190, 115, 126, 255, 189, 191, 22, 9, 61, 144, 51, 161, 61, 91, 251, 209, 61, 85, 179, 116, 62, 139, 84, 170, 61, 171, 46, 136, 62, 202, 178, 209, 61, 91, 95, 240, 190, 118, 37, 235, 190, 180, 118, 255, 188, 214, 71, 232, 188, 210, 32, 159, 61, 81, 31, 150, 191, 90, 245, 133, 60, 202, 144, 114, 61, 115, 59, 169, 61, 4, 23, 176, 62, 33, 5, 15, 189, 155, 175, 179, 189, 194, 251, 234, 61, 170, 114, 233, 190, 58, 85, 215, 61, 165, 179, 166, 189, 117, 80, 125, 60, 195, 240, 223, 188, 17, 87, 191, 188, 123, 2, 182, 61, 121, 223, 80, 62, 15, 146, 170, 190, 87, 175, 163, 189, 237, 15, 226, 189, 150, 54, 109, 62, 232, 70, 45, 190, 235, 125, 17, 62, 82, 123, 66, 62, 78, 188, 146, 62, 111, 77, 39, 61, 215, 254, 3, 62, 209, 47, 118, 62, 165, 123, 153, 190, 18, 93, 179, 190, 98, 89, 113, 60, 181, 111, 11, 190, 229, 182, 8, 59, 74, 22, 33, 191, 59, 89, 9, 62, 3, 206, 195, 62, 7, 40, 173, 189, 98, 242, 212, 60, 188, 207, 176, 189, 36, 175, 132, 61, 224, 148, 236, 61, 230, 161, 185, 191, 41, 86, 80, 62, 199, 150, 173, 189, 66, 233, 91, 189, 218, 65, 151, 62, 80, 37, 52, 190, 197, 196, 73, 190, 242, 1, 41, 62, 26, 101, 82, 190, 51, 126, 105, 186, 128, 136, 210, 189, 43, 249, 107, 189, 112, 193, 162, 189, 93, 143, 206, 189, 35, 253, 233, 61, 27, 198, 196, 62, 75, 118, 13, 188, 90, 141, 131, 188, 162, 175, 229, 189, 116, 232, 12, 190, 194, 140, 151, 189, 55, 179, 131, 60, 220, 182, 146, 59, 240, 209, 36, 62, 127, 100, 0, 191, 192, 99, 126, 61, 248, 45, 1, 191, 120, 8, 229, 61, 149, 156, 85, 189, 212, 159, 189, 190, 121, 26, 58, 62, 108, 119, 53, 62, 121, 152, 174, 61, 205, 252, 29, 190, 68, 200, 69, 190, 60, 147, 92, 62, 176, 27, 205, 190, 0, 54, 17, 189, 154, 1, 190, 189, 228, 198, 147, 61, 62, 187, 41, 62, 244, 91, 135, 61, 242, 29, 178, 61, 182, 3, 39, 62, 202, 57, 216, 190, 90, 98, 27, 62, 222, 82, 18, 60, 230, 254, 34, 61, 213, 20, 216, 61, 109, 53, 22, 62, 47, 131, 14, 190, 114, 58, 227, 186, 35, 110, 176, 190, 25, 166, 78, 62, 185, 71, 64, 189, 241, 99, 9, 63, 176, 208, 182, 189, 18, 215, 118, 61, 255, 99, 37, 191, 128, 41, 59, 62, 177, 202, 137, 190, 151, 245, 189, 190, 244, 118, 53, 189, 2, 56, 109, 62, 4, 192, 25, 62, 35, 3, 24, 189, 207, 79, 86, 187, 144, 79, 103, 188, 212, 253, 29, 191, 34, 84, 83, 62, 71, 29, 64, 191, 156, 1, 135, 190, 51, 176, 197, 61, 21, 77, 164, 62, 223, 119, 135, 191, 70, 93, 47, 188, 189, 247, 66, 62, 98, 194, 180, 61, 200, 69, 54, 62, 252, 246, 6, 191, 57, 173, 223, 61, 74, 196, 164, 190, 13, 152, 216, 189, 54, 214, 160, 191, 9, 49, 43, 63, 20, 192, 139, 191, 36, 191, 163, 189, 24, 29, 230, 189, 122, 172, 145, 62, 64, 16, 128, 62, 148, 53, 68, 63, 156, 240, 104, 190, 79, 146, 31, 188, 21, 134, 148, 186, 139, 197, 95, 190, 100, 9, 117, 60, 200, 76, 167, 62, 51, 93, 108, 191, 133, 84, 224, 189, 6, 105, 245, 189, 42, 16, 55, 191, 40, 23, 201, 62, 0, 208, 34, 62, 213, 130, 131, 62, 74, 205, 46, 191, 150, 54, 112, 189, 203, 162, 12, 191, 185, 17, 62, 190, 110, 179, 210, 61, 65, 129, 233, 60, 171, 118, 6, 59, 113, 197, 205, 62, 145, 148, 157, 61, 7, 183, 101, 190, 192, 201, 211, 61, 111, 203, 55, 191, 114, 80, 90, 190, 110, 188, 18, 191, 240, 156, 124, 189, 247, 43, 60, 62, 32, 47, 131, 191, 59, 172, 230, 62, 129, 137, 229, 61, 99, 250, 91, 189, 111, 36, 4, 62, 137, 158, 32, 190, 210, 169, 157, 61, 221, 79, 213, 190, 224, 231, 213, 190, 175, 146, 135, 190, 162, 138, 54, 61, 166, 10, 211, 190, 16, 154, 233, 190, 82, 151, 217, 190, 21, 17, 90, 190, 210, 105, 35, 58, 174, 34, 51, 60, 166, 229, 31, 62, 172, 0, 228, 190, 249, 237, 37, 62, 161, 81, 169, 189, 45, 194, 10, 62, 14, 184, 186, 62, 106, 94, 198, 60, 151, 30, 191, 190, 197, 162, 43, 61, 68, 129, 247, 61, 158, 239, 33, 191, 208, 52, 197, 61, 175, 228, 9, 190, 95, 0, 246, 189, 90, 232, 147, 60, 214, 74, 4, 190, 14, 184, 121, 61, 111, 34, 30, 191, 160, 76, 191, 61, 14, 113, 47, 62, 73, 169, 215, 189, 3, 69, 188, 188, 143, 84, 161, 189, 71, 219, 94, 189, 77, 30, 120, 190, 222, 158, 162, 188, 97, 69, 135, 61, 108, 132, 160, 190, 205, 117, 231, 189, 243, 49, 40, 190, 68, 46, 44, 188, 254, 77, 22, 191, 17, 233, 101, 61, 180, 14, 192, 190, 61, 171, 88, 190, 86, 150, 232, 61, 2, 51, 249, 61, 112, 146, 229, 186, 137, 173, 164, 62, 134, 108, 146, 60, 235, 147, 49, 62, 140, 64, 59, 190, 133, 50, 29, 191, 166, 252, 161, 190, 188, 128, 161, 189, 110, 49, 225, 189, 134, 236, 24, 62, 222, 175, 17, 191, 116, 195, 39, 62, 193, 28, 226, 62, 62, 235, 166, 189, 156, 219, 138, 62, 81, 212, 38, 62, 235, 229, 11, 62, 43, 60, 179, 189, 242, 34, 164, 190, 223, 134, 133, 61, 54, 94, 211, 61, 159, 209, 103, 189, 116, 148, 243, 61, 222, 228, 144, 188, 21, 23, 8, 62, 21, 148, 188, 62, 158, 17, 31, 190, 140, 206, 76, 190, 219, 40, 49, 60, 18, 236, 48, 61, 24, 132, 155, 61, 254, 157, 236, 60, 243, 178, 246, 61, 53, 27, 193, 62, 21, 155, 203, 59, 36, 123, 219, 60, 196, 182, 4, 61, 97, 60, 5, 191, 203, 11, 107, 60, 109, 180, 215, 189, 162, 252, 247, 189, 138, 133, 105, 62, 141, 179, 37, 191, 144, 65, 233, 188, 87, 52, 128, 190, 147, 251, 12, 190, 77, 115, 143, 59, 108, 222, 11, 190, 184, 81, 147, 188, 169, 237, 213, 61, 9, 203, 162, 61, 160, 170, 45, 62, 2, 18, 35, 188, 147, 11, 96, 189, 188, 245, 140, 190, 153, 67, 163, 189, 114, 13, 58, 190, 47, 235, 165, 61, 69, 129, 224, 190, 123, 29, 196, 60, 39, 244, 161, 191, 71, 41, 25, 62, 133, 235, 15, 62, 242, 167, 54, 62, 233, 239, 179, 62, 49, 0, 80, 62, 184, 83, 139, 190, 11, 99, 138, 62, 252, 121, 14, 61, 200, 98, 63, 191, 72, 56, 158, 62, 126, 28, 46, 188, 28, 142, 176, 188, 200, 241, 83, 62, 171, 61, 110, 191, 1, 65, 128, 191, 41, 120, 27, 190, 92, 200, 255, 189, 170, 193, 224, 61, 35, 140, 3, 190, 111, 59, 79, 62, 114, 195, 110, 189, 133, 53, 50, 189, 203, 36, 215, 189, 37, 27, 75, 189, 49, 93, 95, 61, 202, 154, 144, 59, 228, 224, 8, 188, 10, 20, 53, 62, 192, 137, 177, 61, 109, 252, 225, 189, 250, 197, 58, 190, 41, 188, 181, 62, 139, 178, 107, 61, 203, 206, 32, 191, 89, 96, 179, 188, 130, 216, 107, 189, 44, 156, 159, 58, 91, 178, 37, 190, 18, 194, 137, 190, 126, 150, 181, 61, 237, 19, 42, 62, 101, 19, 108, 190, 54, 106, 65, 62, 215, 69, 189, 61, 152, 107, 83, 63, 75, 100, 79, 190, 35, 183, 137, 189, 81, 174, 28, 191, 33, 141, 98, 62, 121, 211, 232, 190, 20, 50, 178, 190, 79, 37, 111, 189, 97, 201, 179, 62, 233, 242, 152, 62, 161, 30, 16, 62, 226, 159, 117, 61, 126, 205, 51, 61, 200, 103, 10, 191, 160, 36, 148, 62, 163, 115, 143, 190, 250, 93, 126, 190, 59, 61, 255, 61, 6, 54, 232, 61, 143, 171, 188, 189, 200, 147, 56, 188, 180, 158, 9, 62, 45, 255, 246, 61, 36, 72, 129, 62, 223, 209, 32, 62, 4, 103, 159, 60, 180, 83, 111, 190, 31, 175, 125, 62, 46, 159, 190, 62, 112, 9, 187, 189, 210, 131, 196, 61, 131, 142, 171, 61, 183, 146, 54, 62, 184, 108, 161, 62, 109, 28, 90, 190, 182, 135, 40, 191, 250, 174, 234, 61, 241, 118, 32, 62, 82, 253, 141, 188, 25, 92, 177, 62, 56, 180, 61, 62, 100, 255, 73, 191, 177, 7, 231, 190, 183, 98, 40, 189, 117, 128, 6, 189, 193, 228, 105, 190, 77, 211, 225, 190, 22, 86, 92, 189, 60, 236, 110, 60, 137, 120, 177, 188, 37, 130, 118, 62, 47, 32, 188, 189, 167, 71, 185, 61, 30, 104, 142, 61, 210, 165, 141, 61, 223, 98, 144, 60, 214, 35, 60, 62, 106, 56, 212, 61, 99, 75, 47, 62, 105, 46, 141, 62, 170, 162, 227, 61, 245, 207, 0, 189, 36, 135, 152, 61, 150, 117, 81, 61, 185, 35, 229, 189, 188, 227, 44, 191, 250, 39, 210, 189, 20, 52, 138, 62, 137, 81, 126, 60, 152, 197, 27, 190, 159, 216, 206, 59, 217, 102, 58, 61, 60, 168, 184, 61, 140, 176, 125, 191, 220, 50, 166, 62, 129, 139, 48, 189, 43, 246, 43, 62, 113, 222, 129, 62, 96, 62, 98, 190, 84, 101, 225, 190, 138, 179, 146, 190, 255, 100, 208, 190, 231, 212, 184, 190, 112, 116, 45, 189, 2, 34, 250, 61, 61, 38, 87, 188, 7, 158, 194, 190, 17, 81, 134, 62, 51, 183, 10, 190, 53, 106, 25, 190, 165, 141, 230, 189, 106, 9, 114, 189, 222, 201, 244, 190, 54, 188, 186, 61, 157, 135, 2, 191, 127, 55, 27, 190, 124, 219, 22, 191, 87, 87, 24, 190, 150, 212, 198, 190, 129, 230, 39, 190, 155, 38, 58, 191, 147, 78, 115, 189, 16, 104, 159, 190, 147, 49, 104, 59, 146, 250, 58, 61, 100, 203, 7, 61, 79, 157, 0, 191, 93, 227, 43, 190, 220, 52, 71, 188, 114, 30, 53, 190, 160, 11, 134, 62, 20, 160, 211, 59, 198, 245, 69, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 36, 205, 61, 2, 189, 132, 189, 184, 244, 6, 62, 107, 174, 57, 190, 152, 250, 76, 62, 38, 103, 18, 190, 143, 194, 232, 62, 75, 223, 182, 62, 244, 97, 167, 61, 180, 26, 24, 190, 204, 142, 209, 61, 108, 66, 76, 61, 89, 135, 27, 62, 214, 219, 138, 62, 228, 86, 144, 62, 60, 162, 140, 62, 173, 94, 79, 189, 115, 123, 123, 189, 151, 127, 103, 62, 150, 153, 241, 61, 124, 50, 120, 62, 231, 235, 182, 188, 109, 15, 151, 61, 195, 1, 244, 61, 107, 240, 150, 188, 208, 171, 42, 62, 242, 167, 215, 62, 97, 118, 69, 62, 84, 191, 91, 62, 46, 85, 13, 190, 118, 189, 31, 62, 72, 81, 49, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 208, 156, 63, 138, 175, 140, 191, 205, 79, 147, 188, 228, 30, 111, 191, 174, 141, 149, 63, 54, 105, 25, 190, 158, 133, 138, 191, 224, 183, 137, 190, 231, 165, 16, 191, 254, 54, 152, 189, 109, 37, 146, 63, 115, 127, 102, 63, 50, 114, 170, 62, 220, 182, 32, 61, 152, 204, 56, 191, 113, 20, 130, 189, 25, 171, 206, 62, 201, 200, 24, 188, 0, 213, 136, 62, 91, 187, 166, 62, 180, 200, 219, 188, 145, 37, 49, 190, 55, 193, 5, 63, 108, 253, 30, 63, 21, 214, 207, 189, 241, 107, 143, 62, 241, 243, 55, 189, 79, 67, 31, 63, 76, 46, 209, 190, 57, 231, 222, 190, 82, 110, 142, 62, 140, 152, 60, 63, 133, 80, 39, 62, 18, 34, 10, 62, 55, 72, 15, 191, 60, 172, 151, 62, 242, 117, 141, 62, 202, 145, 240, 190, 41, 19, 169, 62, 123, 2, 210, 190, 189, 167, 243, 61, 97, 142, 52, 62, 123, 114, 46, 190, 189, 76, 154, 62, 248, 71, 114, 190, 188, 72, 14, 190, 131, 233, 20, 62, 85, 200, 176, 190, 105, 183, 178, 61, 91, 45, 138, 61, 26, 203, 1, 191, 13, 179, 245, 60, 22, 190, 170, 190, 194, 252, 4, 62, 121, 167, 154, 60, 215, 121, 21, 63, 109, 116, 230, 188, 217, 75, 93, 62, 251, 57, 151, 190, 245, 225, 95, 189, 185, 55, 16, 62, 196, 161, 79, 190, 4, 176, 139, 189, 251, 97, 180, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 88, 134, 190, 21, 160, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 210, 27, 62, 153, 253, 4, 63, 62, 46, 229, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 146, 224, 191, 34, 88, 219, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0073/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}