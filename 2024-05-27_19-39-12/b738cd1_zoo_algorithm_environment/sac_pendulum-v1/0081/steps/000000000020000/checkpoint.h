// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 162, 23, 63, 117, 245, 157, 63, 214, 135, 6, 62, 205, 52, 83, 62, 18, 103, 69, 63, 42, 69, 93, 61, 114, 236, 190, 190, 225, 11, 151, 62, 172, 10, 229, 61, 55, 17, 40, 63, 99, 20, 77, 191, 135, 155, 141, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 112, 248, 57, 63, 23, 12, 198, 190, 84, 188, 166, 190, 222, 46, 139, 190, 94, 125, 255, 62, 232, 10, 166, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 153, 217, 155, 62, 251, 252, 196, 190, 247, 61, 73, 63, 244, 63, 137, 191, 252, 247, 115, 63, 88, 89, 176, 62, 142, 35, 145, 190, 153, 174, 78, 62, 221, 48, 72, 63, 247, 67, 251, 62, 66, 123, 249, 62, 96, 44, 179, 61, 71, 199, 34, 61, 64, 33, 39, 63, 124, 48, 2, 191, 112, 13, 52, 190, 93, 38, 143, 63, 42, 88, 116, 189, 245, 72, 139, 190, 56, 227, 147, 63, 23, 116, 215, 62, 65, 207, 179, 62, 201, 50, 235, 190, 67, 34, 7, 191, 85, 41, 196, 62, 203, 121, 133, 63, 61, 67, 135, 190, 171, 213, 99, 191, 99, 228, 189, 189, 172, 238, 161, 62, 92, 123, 41, 63, 136, 146, 60, 191, 175, 251, 253, 190, 166, 130, 51, 191, 247, 184, 111, 191, 236, 138, 8, 191, 11, 139, 220, 190, 209, 18, 196, 190, 245, 117, 175, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 235, 157, 54, 63, 198, 189, 178, 191, 173, 59, 111, 190, 245, 57, 49, 191, 106, 124, 182, 62, 24, 76, 249, 190, 212, 253, 181, 190, 0, 150, 219, 191, 117, 180, 167, 190, 244, 110, 113, 62, 132, 219, 25, 62, 39, 89, 65, 62, 116, 189, 132, 62, 14, 224, 161, 63, 83, 249, 209, 62, 155, 123, 201, 62, 152, 189, 132, 191, 9, 93, 198, 61, 98, 23, 167, 190, 232, 185, 231, 191, 112, 218, 215, 190, 195, 119, 25, 63, 18, 7, 204, 62, 248, 29, 159, 62, 207, 0, 62, 60, 212, 162, 29, 63, 95, 100, 2, 63, 155, 129, 116, 190, 230, 75, 235, 62, 158, 156, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 204, 244, 190, 94, 146, 245, 61, 246, 67, 133, 62, 107, 85, 190, 190, 106, 173, 9, 191, 155, 35, 47, 191, 237, 235, 120, 189, 92, 107, 229, 190, 126, 93, 199, 62, 118, 32, 18, 63, 146, 200, 7, 62, 179, 169, 50, 189, 209, 197, 86, 61, 196, 215, 97, 61, 109, 26, 152, 62, 45, 169, 52, 191, 46, 138, 13, 62, 134, 40, 17, 62, 223, 19, 60, 62, 107, 170, 22, 191, 90, 38, 29, 63, 253, 145, 179, 190, 112, 32, 168, 62, 3, 54, 192, 62, 142, 34, 241, 189, 71, 197, 91, 191, 120, 154, 223, 61, 3, 207, 138, 62, 193, 94, 20, 190, 59, 251, 92, 191, 148, 156, 160, 190, 45, 192, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 209, 195, 12, 191, 47, 171, 183, 190, 123, 62, 240, 61, 7, 162, 176, 189, 224, 42, 43, 62, 133, 173, 254, 58, 89, 7, 216, 189, 125, 243, 82, 61, 64, 90, 109, 61, 3, 99, 123, 62, 83, 155, 214, 61, 91, 253, 167, 190, 81, 107, 22, 190, 94, 240, 104, 62, 177, 201, 6, 62, 239, 176, 92, 190, 70, 151, 231, 191, 168, 73, 85, 62, 144, 238, 45, 189, 161, 8, 255, 190, 51, 105, 151, 62, 106, 185, 20, 189, 14, 253, 158, 61, 130, 204, 189, 62, 189, 43, 33, 62, 103, 253, 37, 190, 9, 133, 168, 190, 146, 161, 116, 190, 120, 43, 2, 191, 168, 194, 148, 190, 247, 47, 26, 190, 38, 32, 192, 190, 164, 253, 71, 62, 40, 56, 181, 61, 69, 243, 132, 189, 241, 67, 23, 191, 206, 73, 53, 61, 194, 52, 27, 189, 178, 220, 183, 189, 186, 113, 33, 62, 185, 46, 5, 191, 79, 132, 81, 190, 129, 233, 64, 191, 166, 128, 88, 61, 186, 107, 149, 189, 6, 234, 32, 62, 20, 63, 4, 62, 102, 2, 68, 189, 132, 86, 38, 62, 123, 222, 5, 191, 235, 182, 140, 62, 171, 65, 156, 189, 84, 121, 34, 62, 115, 90, 102, 61, 72, 140, 164, 62, 148, 5, 31, 62, 205, 169, 206, 187, 142, 247, 132, 61, 247, 254, 8, 61, 125, 124, 76, 62, 218, 230, 160, 188, 119, 167, 237, 190, 68, 150, 50, 191, 165, 159, 7, 189, 153, 216, 32, 191, 177, 176, 22, 190, 177, 124, 158, 190, 254, 1, 58, 189, 35, 67, 22, 61, 122, 172, 76, 190, 252, 38, 9, 60, 40, 199, 6, 190, 2, 36, 174, 60, 14, 169, 26, 189, 178, 180, 197, 61, 56, 106, 181, 189, 9, 129, 84, 190, 201, 242, 130, 190, 174, 14, 47, 190, 36, 106, 96, 190, 231, 9, 245, 61, 6, 207, 93, 190, 51, 99, 25, 62, 69, 191, 185, 61, 185, 236, 200, 60, 240, 238, 107, 60, 132, 184, 121, 189, 23, 166, 72, 190, 15, 117, 15, 61, 169, 60, 23, 62, 118, 46, 96, 190, 63, 0, 29, 188, 28, 164, 70, 62, 79, 174, 13, 61, 155, 53, 223, 61, 205, 43, 103, 188, 216, 160, 54, 62, 185, 207, 128, 62, 239, 175, 94, 187, 254, 19, 68, 191, 97, 220, 52, 61, 8, 206, 250, 190, 220, 77, 99, 60, 140, 219, 84, 61, 234, 25, 13, 62, 13, 72, 181, 190, 77, 237, 169, 189, 175, 7, 214, 62, 94, 23, 147, 190, 144, 87, 26, 60, 252, 60, 68, 190, 196, 43, 86, 190, 105, 142, 66, 62, 202, 104, 55, 62, 231, 119, 31, 189, 141, 245, 190, 62, 35, 150, 209, 62, 31, 55, 166, 61, 5, 210, 173, 61, 102, 220, 49, 62, 62, 116, 241, 188, 28, 24, 219, 189, 56, 254, 59, 62, 222, 141, 222, 61, 170, 52, 38, 62, 129, 99, 138, 62, 193, 14, 219, 61, 57, 205, 74, 190, 186, 138, 32, 191, 44, 159, 219, 189, 231, 41, 73, 62, 229, 34, 70, 62, 86, 188, 26, 190, 117, 192, 252, 189, 251, 110, 128, 190, 199, 149, 174, 61, 239, 77, 232, 62, 66, 92, 190, 62, 191, 158, 211, 62, 213, 97, 234, 188, 185, 127, 253, 189, 234, 132, 100, 191, 150, 181, 163, 60, 5, 190, 34, 190, 16, 30, 121, 61, 114, 82, 144, 62, 97, 198, 252, 60, 129, 93, 96, 190, 154, 158, 135, 189, 90, 44, 82, 61, 84, 61, 113, 62, 160, 52, 2, 191, 48, 208, 164, 189, 177, 52, 96, 62, 174, 87, 93, 189, 9, 238, 211, 62, 35, 239, 246, 190, 106, 135, 36, 63, 99, 145, 102, 61, 158, 170, 53, 190, 204, 65, 176, 189, 25, 112, 13, 189, 6, 21, 156, 189, 129, 23, 55, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 64, 126, 34, 61, 170, 170, 235, 61, 104, 57, 210, 189, 179, 18, 207, 189, 148, 217, 132, 61, 176, 255, 37, 190, 110, 214, 153, 189, 184, 103, 3, 190, 212, 21, 119, 61, 90, 15, 55, 190, 28, 43, 153, 189, 112, 26, 194, 61, 249, 38, 83, 190, 248, 66, 63, 189, 111, 205, 150, 60, 23, 49, 114, 189, 233, 198, 245, 189, 45, 194, 16, 62, 86, 252, 175, 60, 231, 243, 144, 61, 75, 141, 138, 189, 13, 252, 252, 61, 17, 245, 49, 190, 46, 98, 67, 189, 6, 72, 28, 191, 67, 207, 217, 189, 216, 136, 17, 62, 99, 9, 238, 62, 68, 15, 205, 61, 129, 149, 27, 63, 95, 65, 179, 190, 240, 111, 136, 60, 157, 227, 106, 190, 201, 152, 242, 61, 197, 191, 208, 62, 116, 128, 143, 61, 248, 223, 18, 62, 98, 84, 187, 62, 140, 85, 215, 188, 123, 12, 84, 63, 189, 102, 153, 190, 233, 161, 56, 62, 47, 237, 202, 62, 91, 140, 5, 191, 179, 104, 236, 188, 69, 122, 36, 190, 206, 166, 188, 62, 59, 64, 13, 190, 91, 77, 233, 190, 133, 76, 78, 191, 91, 76, 141, 190, 7, 184, 128, 61, 63, 70, 251, 190, 108, 123, 156, 191, 95, 175, 79, 190, 100, 171, 87, 191, 133, 9, 89, 63, 154, 206, 160, 62, 141, 147, 10, 61, 149, 104, 60, 191, 10, 25, 31, 61, 9, 24, 219, 190, 225, 58, 70, 62, 114, 189, 64, 61, 55, 92, 68, 191, 173, 126, 126, 191, 53, 209, 165, 191, 30, 125, 115, 62, 65, 151, 78, 190, 20, 195, 113, 61, 153, 74, 216, 190, 138, 142, 217, 190, 69, 99, 154, 61, 44, 216, 85, 190, 121, 96, 24, 190, 215, 18, 93, 62, 103, 245, 233, 61, 156, 50, 18, 190, 239, 231, 108, 190, 106, 120, 147, 62, 119, 172, 157, 62, 69, 119, 81, 62, 44, 219, 220, 62, 237, 210, 225, 190, 235, 74, 145, 62, 51, 168, 96, 190, 104, 161, 30, 62, 168, 157, 229, 61, 155, 57, 236, 190, 34, 59, 12, 188, 70, 21, 36, 61, 18, 253, 109, 190, 35, 179, 0, 62, 204, 172, 74, 62, 47, 219, 11, 191, 172, 166, 25, 62, 115, 80, 146, 187, 168, 106, 2, 189, 62, 131, 168, 61, 248, 175, 200, 188, 176, 5, 88, 62, 125, 212, 56, 61, 8, 222, 52, 61, 136, 239, 67, 62, 201, 32, 181, 189, 160, 40, 160, 62, 101, 13, 85, 62, 157, 137, 100, 190, 62, 231, 65, 62, 247, 201, 177, 188, 158, 9, 71, 62, 55, 111, 228, 189, 173, 57, 134, 61, 204, 159, 173, 190, 191, 158, 118, 190, 59, 255, 239, 189, 124, 125, 231, 189, 90, 163, 52, 191, 168, 117, 138, 61, 156, 44, 43, 191, 170, 207, 129, 191, 172, 245, 22, 190, 25, 98, 62, 190, 88, 204, 231, 62, 115, 93, 59, 189, 210, 118, 93, 63, 139, 16, 133, 190, 89, 59, 41, 61, 61, 230, 203, 189, 186, 178, 199, 61, 241, 249, 139, 62, 49, 48, 215, 189, 27, 150, 10, 63, 228, 131, 69, 62, 34, 176, 114, 59, 162, 215, 201, 62, 55, 29, 156, 189, 70, 13, 215, 61, 58, 254, 72, 62, 211, 81, 240, 189, 27, 208, 181, 189, 81, 246, 2, 190, 91, 96, 106, 62, 28, 216, 171, 60, 163, 70, 187, 190, 217, 115, 226, 190, 76, 40, 117, 191, 167, 80, 129, 60, 34, 167, 145, 190, 4, 110, 193, 190, 30, 52, 84, 190, 122, 45, 164, 190, 141, 140, 166, 191, 168, 63, 22, 62, 116, 3, 138, 62, 103, 12, 147, 189, 195, 79, 19, 62, 198, 127, 61, 191, 86, 32, 172, 62, 171, 191, 173, 59, 176, 45, 0, 62, 57, 95, 210, 62, 60, 131, 85, 62, 248, 149, 219, 188, 41, 108, 56, 62, 23, 11, 240, 62, 29, 96, 44, 61, 137, 139, 153, 191, 160, 78, 2, 191, 131, 166, 37, 62, 170, 88, 163, 190, 6, 216, 152, 190, 159, 103, 235, 62, 154, 34, 26, 62, 15, 168, 164, 62, 181, 206, 182, 62, 229, 243, 35, 60, 107, 210, 41, 191, 44, 147, 143, 190, 204, 139, 141, 188, 248, 248, 58, 191, 17, 63, 71, 191, 200, 181, 19, 190, 15, 166, 86, 61, 167, 101, 6, 190, 194, 72, 82, 189, 105, 15, 44, 62, 118, 100, 161, 60, 132, 92, 34, 62, 206, 91, 241, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 83, 19, 252, 189, 195, 102, 246, 189, 25, 27, 7, 190, 228, 21, 181, 188, 17, 63, 53, 61, 33, 89, 50, 190, 6, 208, 222, 189, 217, 237, 163, 61, 124, 209, 220, 61, 101, 160, 122, 59, 103, 213, 173, 189, 114, 38, 68, 188, 151, 233, 10, 190, 199, 75, 18, 61, 44, 159, 41, 189, 198, 112, 10, 62, 233, 249, 53, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 20, 83, 76, 191, 131, 134, 254, 189, 231, 251, 35, 62, 48, 253, 215, 62, 88, 69, 170, 61, 200, 129, 160, 62, 152, 255, 165, 60, 137, 110, 176, 61, 66, 50, 215, 189, 166, 76, 29, 62, 190, 244, 139, 62, 65, 105, 14, 62, 159, 121, 204, 62, 190, 118, 4, 62, 180, 134, 1, 60, 140, 228, 15, 190, 66, 241, 177, 190, 160, 179, 101, 62, 137, 7, 131, 189, 117, 7, 225, 190, 185, 252, 169, 188, 250, 84, 170, 189, 246, 201, 30, 62, 238, 175, 187, 189, 138, 143, 182, 190, 183, 231, 42, 191, 207, 118, 56, 191, 195, 58, 244, 61, 0, 234, 136, 191, 89, 205, 65, 191, 110, 155, 156, 190, 151, 66, 64, 190, 144, 201, 234, 190, 67, 66, 28, 62, 41, 94, 81, 62, 66, 198, 155, 62, 10, 1, 244, 188, 30, 48, 21, 62, 117, 46, 132, 191, 61, 42, 196, 61, 187, 38, 82, 188, 8, 43, 67, 62, 215, 198, 179, 60, 231, 36, 181, 61, 43, 10, 14, 63, 6, 95, 148, 61, 225, 59, 126, 61, 242, 75, 118, 62, 58, 41, 179, 190, 75, 168, 126, 62, 34, 153, 133, 62, 117, 54, 82, 191, 217, 119, 145, 62, 211, 2, 173, 60, 248, 83, 137, 62, 164, 251, 217, 190, 25, 169, 207, 190, 249, 218, 14, 191, 248, 173, 192, 190, 112, 253, 69, 62, 20, 112, 77, 191, 50, 120, 61, 191, 206, 38, 141, 190, 104, 31, 110, 191, 154, 16, 99, 62, 52, 179, 82, 62, 21, 105, 203, 61, 157, 145, 165, 191, 22, 219, 4, 188, 92, 114, 78, 191, 174, 251, 152, 189, 5, 83, 51, 62, 236, 4, 218, 60, 139, 179, 122, 190, 210, 113, 182, 61, 60, 212, 37, 62, 105, 54, 214, 189, 252, 145, 237, 189, 153, 90, 133, 59, 187, 81, 221, 190, 27, 218, 180, 62, 226, 249, 136, 62, 131, 69, 43, 190, 102, 21, 171, 61, 43, 161, 138, 62, 109, 140, 3, 62, 108, 77, 122, 190, 126, 92, 253, 62, 92, 249, 162, 190, 120, 223, 16, 188, 242, 101, 42, 62, 9, 87, 55, 62, 19, 27, 27, 190, 175, 214, 48, 189, 174, 197, 5, 190, 140, 23, 76, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 127, 197, 36, 191, 126, 133, 222, 190, 110, 246, 160, 190, 176, 60, 24, 191, 64, 69, 7, 189, 53, 222, 28, 188, 245, 253, 75, 191, 202, 101, 143, 61, 248, 12, 227, 62, 173, 197, 201, 190, 138, 106, 29, 189, 138, 243, 109, 190, 181, 84, 109, 191, 47, 190, 149, 59, 162, 39, 40, 191, 54, 204, 6, 191, 126, 175, 93, 191, 46, 247, 218, 186, 233, 3, 17, 190, 254, 200, 205, 190, 1, 254, 59, 62, 60, 227, 223, 61, 214, 58, 211, 62, 164, 39, 14, 191, 241, 180, 168, 61, 52, 179, 224, 190, 240, 29, 33, 191, 149, 82, 28, 63, 98, 131, 2, 62, 159, 63, 32, 191, 20, 239, 157, 189, 17, 217, 42, 191, 138, 38, 31, 190, 243, 26, 98, 62, 183, 71, 212, 190, 87, 122, 3, 191, 67, 168, 24, 62, 192, 32, 244, 189, 219, 83, 86, 190, 41, 84, 220, 61, 72, 236, 23, 62, 236, 55, 193, 191, 133, 120, 69, 62, 172, 189, 169, 62, 185, 171, 45, 61, 14, 226, 161, 62, 247, 13, 53, 60, 154, 98, 225, 61, 190, 151, 41, 62, 119, 30, 29, 190, 196, 158, 139, 61, 86, 157, 159, 61, 101, 243, 82, 188, 137, 144, 182, 189, 181, 155, 177, 62, 146, 20, 163, 61, 146, 3, 69, 60, 194, 142, 216, 190, 63, 17, 249, 61, 180, 61, 39, 62, 142, 48, 68, 61, 24, 76, 128, 62, 132, 199, 183, 61, 22, 142, 202, 60, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 17, 199, 173, 62, 222, 82, 74, 187, 208, 22, 140, 61, 13, 51, 57, 191, 202, 52, 28, 61, 16, 179, 55, 191, 240, 89, 1, 62, 107, 244, 0, 190, 207, 67, 1, 191, 201, 132, 135, 190, 217, 119, 110, 191, 35, 188, 137, 62, 230, 196, 141, 189, 150, 124, 16, 62, 219, 219, 129, 190, 22, 138, 180, 190, 230, 9, 181, 188, 243, 15, 12, 190, 113, 210, 22, 190, 147, 189, 225, 188, 96, 194, 252, 61, 153, 188, 164, 188, 224, 171, 19, 190, 57, 131, 141, 62, 14, 61, 174, 62, 34, 89, 147, 190, 185, 86, 57, 62, 124, 22, 240, 60, 95, 48, 239, 62, 40, 22, 164, 191, 253, 80, 236, 190, 117, 185, 21, 190, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 251, 158, 186, 61, 99, 222, 82, 62, 65, 138, 177, 61, 139, 171, 171, 191, 177, 216, 42, 62, 177, 54, 45, 191, 143, 221, 28, 62, 207, 69, 31, 61, 237, 185, 112, 62, 222, 81, 185, 190, 95, 238, 85, 61, 0, 162, 132, 62, 230, 25, 228, 62, 150, 112, 205, 62, 49, 35, 30, 62, 247, 112, 189, 61, 252, 113, 73, 61, 206, 54, 12, 61, 190, 74, 140, 60, 152, 136, 65, 62, 65, 61, 50, 189, 253, 24, 16, 190, 157, 142, 166, 190, 73, 251, 1, 62, 221, 64, 121, 191, 126, 147, 115, 61, 37, 104, 109, 188, 202, 27, 189, 189, 198, 95, 237, 189, 221, 159, 211, 62, 6, 142, 71, 61, 146, 74, 243, 60, 213, 12, 231, 190, 251, 70, 201, 190, 92, 86, 15, 189, 243, 96, 239, 62, 99, 108, 208, 61, 132, 65, 192, 62, 214, 209, 9, 62, 136, 116, 48, 190, 118, 226, 0, 62, 216, 125, 153, 62, 62, 201, 125, 62, 229, 48, 105, 190, 23, 207, 212, 62, 149, 39, 1, 62, 214, 170, 112, 62, 110, 204, 186, 62, 130, 200, 160, 61, 180, 192, 134, 62, 75, 30, 140, 189, 36, 138, 135, 61, 147, 172, 65, 62, 105, 85, 39, 189, 66, 203, 176, 189, 152, 182, 38, 62, 27, 26, 185, 190, 183, 115, 26, 190, 33, 51, 219, 190, 13, 55, 209, 190, 103, 148, 42, 188, 10, 17, 127, 190, 227, 189, 205, 189, 206, 158, 195, 189, 14, 56, 60, 189, 138, 87, 110, 62, 18, 62, 193, 62, 149, 228, 139, 62, 179, 2, 31, 61, 95, 231, 131, 62, 104, 33, 31, 62, 233, 51, 51, 62, 32, 220, 138, 62, 108, 167, 52, 189, 11, 44, 79, 62, 176, 253, 250, 189, 35, 158, 103, 62, 108, 2, 164, 61, 22, 72, 29, 188, 197, 196, 65, 190, 36, 74, 129, 62, 238, 44, 186, 190, 98, 85, 131, 190, 240, 209, 128, 61, 98, 66, 38, 61, 183, 28, 228, 189, 206, 229, 29, 187, 88, 250, 44, 62, 153, 248, 193, 189, 215, 201, 151, 60, 178, 127, 42, 189, 80, 55, 145, 61, 56, 241, 156, 189, 15, 207, 53, 190, 117, 113, 187, 62, 17, 236, 177, 62, 229, 91, 129, 191, 141, 75, 57, 190, 67, 36, 101, 189, 115, 58, 226, 62, 222, 142, 72, 189, 176, 12, 244, 62, 72, 246, 2, 188, 114, 177, 218, 60, 88, 71, 165, 189, 199, 72, 91, 60, 52, 3, 65, 62, 202, 236, 234, 189, 78, 60, 78, 62, 19, 74, 181, 62, 132, 13, 216, 188, 238, 59, 195, 62, 132, 88, 121, 190, 76, 251, 97, 62, 193, 48, 149, 62, 143, 143, 253, 190, 146, 185, 51, 189, 201, 197, 75, 61, 179, 23, 31, 62, 226, 217, 134, 190, 24, 13, 29, 190, 252, 153, 7, 191, 119, 58, 223, 190, 158, 191, 91, 62, 121, 58, 161, 190, 83, 115, 77, 191, 69, 11, 130, 190, 246, 148, 180, 190, 233, 17, 135, 62, 82, 44, 192, 61, 160, 163, 10, 62, 1, 132, 82, 191, 7, 200, 239, 60, 229, 194, 177, 190, 206, 219, 231, 188, 244, 171, 255, 189, 187, 211, 210, 61, 201, 180, 11, 190, 88, 229, 173, 189, 255, 131, 58, 62, 168, 21, 11, 63, 151, 196, 7, 62, 24, 119, 115, 62, 75, 186, 138, 190, 11, 217, 59, 62, 171, 188, 196, 61, 2, 57, 4, 190, 142, 174, 182, 190, 12, 214, 154, 59, 188, 214, 20, 189, 182, 124, 10, 191, 180, 234, 145, 62, 239, 72, 211, 190, 168, 191, 6, 60, 159, 84, 68, 62, 158, 243, 138, 189, 105, 230, 10, 190, 59, 99, 176, 60, 250, 245, 108, 187, 40, 91, 138, 188, 195, 26, 246, 190, 154, 121, 68, 62, 186, 133, 18, 62, 214, 166, 175, 190, 185, 72, 4, 189, 233, 247, 203, 61, 225, 66, 110, 191, 238, 220, 22, 62, 237, 193, 123, 190, 166, 134, 184, 190, 66, 52, 222, 61, 18, 233, 87, 62, 229, 157, 117, 187, 55, 169, 63, 191, 220, 92, 145, 190, 45, 90, 212, 61, 189, 167, 140, 188, 39, 161, 170, 62, 175, 162, 138, 62, 150, 239, 107, 60, 169, 171, 134, 62, 12, 37, 59, 61, 1, 4, 138, 62, 232, 39, 11, 190, 82, 251, 179, 62, 231, 103, 181, 189, 27, 145, 0, 62, 98, 246, 56, 62, 216, 92, 139, 61, 96, 70, 134, 190, 212, 231, 255, 190, 14, 142, 168, 190, 127, 111, 79, 189, 101, 130, 154, 62, 111, 139, 4, 191, 146, 207, 30, 191, 77, 141, 162, 61, 176, 110, 142, 61, 146, 214, 97, 190, 221, 14, 187, 189, 70, 44, 190, 61, 122, 171, 166, 191, 61, 157, 193, 189, 236, 158, 176, 62, 80, 38, 89, 61, 160, 78, 118, 60, 10, 62, 217, 60, 39, 35, 7, 190, 63, 17, 124, 62, 110, 195, 52, 62, 244, 238, 132, 62, 255, 176, 183, 189, 85, 196, 163, 189, 163, 68, 26, 62, 188, 18, 16, 62, 199, 190, 36, 62, 175, 103, 16, 190, 182, 176, 173, 189, 40, 57, 236, 61, 227, 93, 191, 62, 139, 191, 244, 61, 207, 200, 135, 62, 240, 119, 226, 61, 158, 160, 13, 62, 144, 155, 74, 62, 56, 12, 102, 62, 197, 96, 75, 186, 168, 217, 105, 62, 102, 112, 35, 62, 186, 223, 50, 189, 23, 158, 201, 187, 136, 158, 34, 190, 44, 92, 210, 190, 169, 139, 128, 190, 71, 186, 134, 191, 240, 73, 235, 61, 231, 201, 190, 61, 221, 206, 5, 190, 18, 176, 142, 190, 211, 188, 52, 62, 40, 80, 89, 62, 24, 178, 191, 190, 10, 50, 62, 62, 228, 3, 150, 62, 85, 166, 133, 62, 67, 162, 52, 190, 167, 239, 134, 62, 187, 123, 71, 62, 154, 85, 140, 61, 215, 70, 68, 190, 59, 160, 194, 62, 8, 7, 84, 61, 59, 179, 91, 62, 194, 202, 85, 191, 168, 129, 21, 191, 140, 93, 192, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 19, 70, 72, 63, 158, 26, 118, 62, 20, 98, 141, 190, 143, 230, 165, 62, 69, 153, 144, 61, 95, 131, 21, 63, 250, 82, 87, 62, 17, 9, 15, 62, 162, 66, 183, 61, 113, 237, 146, 61, 98, 144, 36, 60, 75, 168, 107, 62, 67, 32, 66, 62, 24, 187, 39, 62, 200, 201, 241, 62, 124, 168, 31, 62, 162, 184, 18, 62, 203, 164, 211, 190, 94, 39, 180, 190, 8, 155, 236, 187, 218, 170, 5, 191, 101, 193, 112, 61, 186, 88, 157, 191, 216, 252, 190, 189, 74, 128, 235, 190, 229, 72, 25, 62, 24, 188, 229, 62, 222, 237, 132, 191, 73, 17, 131, 61, 145, 178, 138, 62, 13, 12, 83, 62, 71, 90, 62, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 139, 143, 239, 188, 19, 109, 195, 62, 208, 231, 157, 61, 75, 189, 238, 61, 41, 126, 59, 189, 3, 2, 148, 189, 241, 176, 120, 62, 12, 146, 238, 61, 127, 100, 217, 60, 60, 227, 204, 189, 143, 26, 144, 62, 152, 109, 159, 189, 21, 165, 93, 189, 83, 60, 122, 61, 117, 177, 180, 62, 99, 67, 39, 188, 190, 24, 159, 62, 82, 175, 200, 185, 148, 134, 24, 190, 78, 166, 145, 62, 176, 0, 23, 190, 50, 68, 136, 189, 62, 247, 88, 190, 197, 6, 132, 62, 220, 218, 161, 60, 201, 24, 67, 189, 98, 199, 9, 62, 109, 239, 141, 61, 139, 164, 181, 62, 13, 55, 152, 60, 93, 136, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 75, 210, 44, 63, 16, 67, 17, 190, 48, 236, 169, 188, 197, 192, 85, 190, 116, 29, 93, 191, 49, 92, 249, 189, 80, 55, 68, 63, 108, 32, 151, 191, 54, 8, 64, 60, 106, 89, 83, 63, 148, 48, 141, 63, 5, 13, 214, 188, 161, 20, 80, 63, 238, 109, 49, 63, 14, 182, 179, 190, 98, 86, 192, 60, 46, 130, 124, 63, 58, 124, 9, 190, 147, 40, 172, 61, 169, 117, 47, 191, 110, 79, 164, 61, 230, 138, 199, 190, 234, 67, 205, 62, 139, 92, 159, 62, 71, 204, 232, 62, 206, 36, 241, 189, 71, 193, 20, 63, 16, 42, 16, 190, 152, 118, 169, 190, 8, 220, 23, 190, 215, 23, 123, 63, 188, 156, 177, 61, 8, 152, 198, 188, 61, 216, 191, 190, 180, 198, 242, 61, 44, 31, 111, 190, 227, 11, 108, 62, 253, 241, 225, 60, 199, 220, 165, 62, 105, 20, 54, 63, 57, 113, 130, 190, 226, 9, 164, 189, 248, 208, 140, 190, 226, 135, 17, 190, 3, 232, 14, 63, 124, 96, 219, 189, 201, 114, 7, 191, 150, 71, 232, 60, 87, 153, 136, 61, 45, 234, 184, 190, 24, 91, 3, 190, 177, 51, 167, 62, 34, 48, 40, 190, 86, 167, 170, 190, 61, 141, 74, 61, 214, 45, 184, 189, 41, 238, 0, 63, 4, 97, 9, 63, 6, 30, 69, 59, 72, 32, 248, 190, 23, 81, 46, 190, 209, 27, 86, 61, 124, 214, 149, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 112, 150, 189, 98, 112, 228, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {241, 231, 161, 62, 189, 159, 46, 191, 116, 128, 144, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 193, 60, 64, 38, 123, 134, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}