// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 147, 26, 63, 252, 108, 148, 63, 161, 15, 40, 62, 228, 37, 210, 62, 76, 6, 52, 63, 196, 57, 41, 61, 93, 84, 136, 190, 146, 151, 154, 62, 238, 92, 183, 61, 128, 100, 33, 63, 103, 204, 51, 191, 225, 146, 132, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 211, 74, 218, 62, 162, 52, 212, 190, 130, 184, 156, 190, 73, 1, 201, 190, 81, 13, 150, 62, 247, 228, 177, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 150, 154, 167, 189, 82, 240, 42, 191, 97, 37, 50, 63, 14, 138, 116, 191, 159, 151, 60, 63, 114, 192, 151, 62, 3, 20, 216, 190, 97, 35, 103, 189, 237, 140, 46, 63, 205, 43, 68, 63, 247, 105, 209, 62, 140, 209, 7, 62, 178, 182, 217, 61, 63, 41, 41, 63, 28, 193, 243, 190, 68, 225, 157, 189, 75, 214, 132, 63, 56, 130, 168, 61, 231, 0, 61, 59, 193, 216, 138, 63, 7, 169, 252, 62, 160, 237, 139, 62, 246, 130, 224, 190, 73, 54, 5, 191, 86, 31, 230, 62, 242, 204, 92, 63, 146, 165, 179, 190, 250, 186, 6, 191, 103, 87, 4, 190, 253, 131, 150, 62, 244, 83, 47, 63, 144, 75, 0, 191, 237, 106, 248, 190, 191, 129, 6, 191, 81, 70, 94, 191, 64, 221, 10, 191, 175, 95, 172, 190, 245, 176, 161, 190, 219, 89, 159, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 210, 67, 63, 63, 92, 182, 154, 191, 51, 8, 100, 190, 34, 42, 20, 191, 123, 7, 37, 62, 208, 77, 2, 191, 218, 77, 138, 190, 126, 57, 201, 191, 177, 1, 177, 190, 4, 16, 58, 62, 123, 79, 191, 61, 245, 192, 130, 62, 42, 104, 145, 62, 160, 127, 161, 63, 170, 39, 149, 62, 88, 248, 7, 63, 72, 166, 45, 191, 238, 101, 221, 60, 16, 138, 202, 190, 204, 18, 214, 191, 45, 54, 232, 190, 195, 142, 17, 63, 176, 129, 93, 62, 45, 196, 141, 62, 188, 249, 18, 62, 94, 189, 175, 62, 248, 81, 13, 63, 113, 95, 175, 190, 133, 5, 149, 62, 114, 164, 255, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 86, 214, 190, 162, 142, 154, 62, 40, 16, 179, 62, 169, 9, 173, 190, 106, 173, 9, 191, 13, 24, 43, 191, 241, 42, 84, 190, 92, 107, 229, 190, 151, 151, 180, 61, 80, 120, 199, 62, 88, 17, 12, 189, 230, 13, 83, 62, 237, 186, 52, 62, 253, 55, 235, 61, 184, 56, 228, 62, 53, 48, 28, 191, 154, 39, 61, 62, 251, 104, 251, 61, 76, 121, 135, 62, 19, 104, 24, 191, 142, 172, 19, 63, 253, 145, 179, 190, 18, 90, 171, 62, 85, 176, 138, 62, 193, 119, 249, 60, 0, 214, 52, 191, 198, 33, 49, 62, 78, 222, 201, 62, 246, 83, 25, 190, 200, 130, 80, 191, 203, 184, 7, 190, 200, 234, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 27, 101, 151, 190, 120, 137, 39, 190, 218, 250, 153, 61, 111, 148, 16, 189, 224, 42, 43, 62, 133, 173, 254, 58, 95, 207, 148, 190, 125, 243, 82, 61, 221, 28, 185, 61, 22, 90, 123, 62, 247, 231, 25, 62, 21, 243, 38, 190, 15, 186, 10, 190, 52, 185, 177, 62, 101, 219, 79, 62, 239, 176, 92, 190, 77, 235, 179, 191, 47, 118, 58, 62, 190, 166, 170, 189, 59, 16, 83, 191, 251, 131, 117, 61, 106, 185, 20, 189, 75, 79, 127, 188, 102, 222, 167, 61, 214, 168, 158, 188, 68, 76, 84, 60, 91, 66, 77, 190, 197, 112, 130, 190, 77, 203, 39, 191, 159, 152, 187, 189, 19, 90, 163, 189, 242, 60, 246, 190, 87, 84, 60, 62, 230, 112, 108, 61, 119, 173, 109, 62, 152, 39, 2, 191, 206, 73, 53, 61, 78, 95, 138, 60, 232, 33, 48, 189, 186, 113, 33, 62, 65, 150, 188, 190, 223, 108, 49, 62, 198, 144, 46, 190, 242, 186, 18, 61, 62, 33, 223, 189, 206, 42, 150, 61, 251, 243, 46, 62, 223, 241, 8, 189, 121, 135, 31, 62, 171, 94, 69, 190, 136, 50, 115, 62, 242, 143, 106, 189, 72, 37, 55, 62, 115, 90, 102, 61, 123, 213, 137, 62, 222, 235, 55, 62, 11, 105, 155, 188, 70, 14, 44, 61, 98, 4, 16, 59, 200, 161, 72, 62, 163, 178, 241, 188, 33, 98, 0, 189, 248, 233, 152, 190, 138, 211, 210, 60, 5, 244, 182, 190, 19, 77, 128, 189, 213, 168, 109, 190, 216, 140, 133, 189, 35, 67, 22, 61, 43, 121, 170, 188, 112, 93, 88, 61, 40, 199, 6, 190, 251, 166, 2, 62, 234, 90, 212, 60, 140, 49, 74, 62, 227, 213, 189, 188, 15, 185, 145, 189, 119, 248, 135, 189, 155, 55, 11, 189, 104, 18, 29, 190, 253, 217, 80, 62, 59, 116, 9, 190, 170, 157, 54, 62, 220, 54, 131, 61, 139, 184, 173, 60, 240, 238, 107, 60, 217, 232, 135, 189, 126, 218, 79, 190, 25, 90, 9, 60, 151, 46, 76, 62, 86, 42, 103, 189, 37, 178, 147, 186, 49, 233, 45, 62, 42, 34, 206, 61, 66, 252, 108, 62, 219, 149, 18, 61, 178, 189, 104, 62, 123, 179, 138, 62, 237, 58, 45, 62, 8, 82, 54, 191, 97, 220, 52, 61, 226, 224, 183, 190, 147, 228, 42, 61, 140, 219, 84, 61, 36, 14, 12, 62, 162, 144, 72, 190, 192, 234, 144, 189, 111, 145, 232, 62, 8, 19, 170, 190, 93, 157, 92, 60, 115, 167, 6, 190, 156, 73, 63, 190, 66, 182, 107, 62, 231, 120, 52, 62, 117, 124, 220, 189, 115, 211, 214, 62, 127, 167, 213, 62, 31, 55, 166, 61, 11, 148, 198, 59, 116, 234, 47, 62, 207, 181, 118, 189, 149, 147, 111, 190, 192, 248, 112, 62, 11, 124, 182, 61, 189, 15, 7, 62, 75, 205, 57, 62, 233, 47, 13, 62, 64, 95, 35, 190, 150, 71, 47, 191, 232, 38, 12, 190, 77, 78, 23, 62, 27, 201, 184, 61, 86, 188, 26, 190, 221, 54, 21, 190, 129, 75, 58, 190, 199, 149, 174, 61, 102, 4, 163, 62, 243, 227, 140, 62, 254, 183, 143, 62, 8, 116, 148, 189, 229, 98, 177, 61, 186, 243, 89, 191, 113, 86, 12, 190, 227, 9, 170, 188, 32, 104, 65, 62, 147, 4, 104, 62, 220, 224, 16, 61, 80, 251, 237, 190, 29, 38, 114, 188, 90, 44, 82, 61, 187, 169, 72, 62, 113, 66, 149, 190, 30, 185, 193, 58, 243, 252, 36, 61, 119, 88, 27, 190, 235, 215, 185, 62, 79, 21, 210, 190, 50, 11, 173, 62, 167, 34, 23, 190, 143, 155, 151, 189, 66, 111, 171, 189, 118, 175, 86, 188, 88, 253, 150, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 189, 202, 199, 61, 86, 255, 246, 61, 242, 170, 78, 189, 110, 113, 126, 189, 148, 217, 132, 61, 176, 255, 37, 190, 213, 207, 232, 188, 184, 103, 3, 190, 212, 21, 119, 61, 199, 134, 46, 190, 171, 200, 98, 189, 112, 26, 194, 61, 67, 189, 70, 190, 248, 66, 63, 189, 88, 32, 83, 61, 23, 49, 114, 189, 233, 198, 245, 189, 186, 186, 21, 62, 135, 65, 82, 61, 66, 238, 224, 61, 75, 141, 138, 189, 64, 182, 13, 62, 175, 232, 1, 190, 46, 98, 67, 189, 17, 26, 52, 191, 203, 23, 8, 190, 226, 140, 185, 61, 174, 187, 187, 62, 68, 15, 205, 61, 2, 176, 252, 61, 255, 165, 131, 190, 240, 111, 136, 60, 142, 123, 34, 190, 25, 105, 114, 61, 245, 137, 213, 62, 9, 218, 10, 61, 27, 202, 248, 61, 209, 107, 219, 62, 120, 221, 11, 188, 39, 28, 2, 63, 97, 126, 168, 190, 199, 178, 66, 62, 42, 48, 174, 62, 30, 99, 188, 190, 181, 44, 64, 189, 69, 122, 36, 190, 148, 118, 162, 62, 24, 29, 152, 189, 217, 24, 8, 191, 166, 190, 32, 191, 25, 137, 152, 190, 151, 31, 16, 61, 168, 69, 1, 191, 208, 37, 117, 191, 20, 103, 48, 190, 123, 95, 74, 191, 138, 74, 203, 62, 164, 55, 132, 62, 139, 97, 155, 189, 204, 30, 10, 191, 10, 25, 31, 61, 201, 24, 133, 190, 108, 143, 105, 62, 114, 189, 64, 61, 139, 92, 162, 190, 246, 192, 63, 191, 97, 57, 91, 191, 250, 51, 122, 62, 217, 88, 103, 190, 9, 175, 16, 190, 85, 53, 10, 191, 229, 237, 197, 190, 125, 152, 182, 61, 107, 192, 29, 61, 19, 240, 245, 189, 24, 0, 71, 62, 133, 189, 181, 61, 156, 50, 18, 190, 16, 113, 188, 189, 17, 60, 141, 62, 6, 173, 4, 62, 69, 119, 81, 62, 54, 218, 170, 61, 93, 5, 244, 189, 143, 152, 245, 61, 183, 42, 160, 62, 242, 47, 140, 62, 42, 53, 35, 62, 154, 172, 20, 191, 120, 151, 55, 61, 36, 222, 35, 188, 178, 41, 6, 190, 35, 179, 0, 62, 79, 151, 140, 61, 87, 239, 216, 190, 172, 166, 25, 62, 232, 122, 146, 61, 123, 155, 130, 189, 251, 74, 140, 61, 232, 255, 11, 61, 118, 102, 7, 62, 52, 234, 65, 190, 105, 238, 149, 61, 100, 194, 80, 62, 231, 233, 15, 190, 12, 213, 120, 62, 91, 222, 142, 62, 100, 211, 135, 189, 14, 15, 151, 62, 247, 201, 177, 188, 225, 132, 145, 62, 127, 49, 100, 61, 205, 12, 62, 62, 242, 224, 111, 190, 151, 126, 66, 190, 254, 8, 66, 189, 60, 153, 63, 60, 59, 236, 211, 190, 86, 199, 180, 61, 234, 206, 16, 191, 184, 35, 124, 191, 234, 68, 68, 189, 47, 76, 140, 189, 210, 235, 193, 62, 115, 93, 59, 189, 165, 10, 47, 63, 29, 83, 147, 190, 89, 59, 41, 61, 138, 23, 30, 189, 193, 1, 39, 62, 62, 16, 134, 62, 189, 238, 4, 188, 39, 190, 255, 62, 57, 97, 32, 62, 84, 215, 157, 61, 57, 210, 171, 62, 107, 129, 217, 189, 118, 111, 225, 61, 215, 227, 78, 62, 118, 85, 230, 189, 27, 240, 97, 189, 81, 246, 2, 190, 68, 143, 132, 62, 172, 68, 155, 58, 149, 157, 170, 190, 248, 151, 212, 190, 4, 212, 39, 191, 180, 228, 61, 61, 156, 159, 132, 190, 214, 161, 218, 190, 181, 110, 105, 190, 66, 177, 178, 190, 35, 82, 166, 191, 124, 242, 153, 61, 144, 139, 150, 61, 8, 108, 132, 62, 195, 79, 19, 62, 99, 237, 244, 190, 23, 198, 111, 62, 171, 191, 173, 59, 26, 77, 128, 61, 174, 107, 119, 62, 149, 0, 29, 62, 186, 119, 24, 60, 10, 189, 78, 62, 150, 79, 171, 62, 211, 97, 87, 189, 22, 22, 77, 191, 3, 137, 188, 190, 252, 72, 142, 61, 130, 24, 157, 189, 168, 43, 84, 190, 35, 167, 127, 62, 154, 34, 26, 62, 8, 175, 100, 62, 3, 13, 80, 62, 229, 155, 89, 190, 252, 65, 36, 191, 125, 210, 195, 190, 14, 0, 145, 186, 50, 159, 107, 191, 116, 190, 31, 191, 119, 114, 74, 190, 204, 1, 209, 188, 167, 101, 6, 190, 194, 72, 82, 189, 105, 15, 44, 62, 118, 100, 161, 60, 132, 92, 34, 62, 206, 91, 241, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 83, 19, 252, 189, 195, 102, 246, 189, 25, 27, 7, 190, 228, 21, 181, 188, 17, 63, 53, 61, 33, 89, 50, 190, 6, 208, 222, 189, 217, 237, 163, 61, 124, 209, 220, 61, 101, 160, 122, 59, 103, 213, 173, 189, 114, 38, 68, 188, 151, 233, 10, 190, 199, 75, 18, 61, 44, 159, 41, 189, 198, 112, 10, 62, 233, 249, 53, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 141, 97, 57, 191, 217, 205, 57, 189, 177, 170, 23, 62, 124, 96, 223, 62, 88, 69, 170, 61, 45, 144, 135, 62, 23, 240, 121, 61, 137, 110, 176, 61, 173, 48, 67, 189, 238, 187, 243, 61, 189, 145, 129, 62, 241, 238, 86, 62, 161, 214, 222, 62, 164, 206, 101, 62, 53, 242, 173, 61, 199, 100, 146, 189, 173, 107, 144, 190, 80, 162, 96, 62, 66, 65, 3, 60, 227, 232, 195, 190, 245, 164, 216, 59, 250, 84, 170, 189, 57, 131, 101, 62, 30, 141, 100, 189, 230, 255, 23, 190, 64, 38, 37, 191, 245, 3, 21, 191, 138, 105, 72, 62, 143, 116, 77, 191, 217, 137, 49, 191, 175, 199, 157, 190, 30, 217, 15, 190, 65, 77, 23, 191, 222, 13, 216, 61, 190, 43, 37, 62, 63, 81, 141, 62, 10, 1, 244, 188, 57, 220, 144, 190, 111, 159, 64, 191, 61, 42, 196, 61, 29, 167, 37, 61, 185, 161, 30, 62, 63, 244, 215, 60, 162, 110, 20, 61, 37, 150, 235, 62, 244, 3, 167, 61, 88, 92, 162, 61, 36, 204, 143, 187, 2, 195, 221, 190, 34, 121, 122, 62, 68, 189, 83, 62, 61, 1, 61, 191, 66, 85, 129, 62, 211, 2, 173, 60, 181, 197, 95, 62, 155, 203, 146, 190, 224, 245, 228, 190, 88, 0, 185, 190, 84, 95, 209, 190, 169, 254, 19, 62, 30, 139, 85, 191, 124, 31, 233, 190, 177, 120, 114, 190, 160, 25, 35, 191, 174, 33, 138, 62, 1, 72, 120, 62, 174, 74, 131, 62, 224, 85, 135, 191, 22, 219, 4, 188, 149, 6, 29, 191, 220, 246, 253, 189, 5, 83, 51, 62, 201, 45, 115, 59, 204, 160, 182, 189, 44, 42, 188, 61, 221, 222, 73, 62, 170, 105, 76, 190, 139, 141, 41, 190, 149, 163, 29, 61, 26, 82, 220, 190, 179, 45, 183, 62, 77, 127, 128, 62, 126, 216, 88, 190, 127, 29, 197, 61, 10, 73, 157, 62, 109, 140, 3, 62, 109, 114, 129, 190, 55, 162, 221, 62, 49, 128, 21, 190, 118, 4, 11, 190, 130, 180, 67, 62, 111, 71, 54, 62, 163, 141, 210, 187, 69, 131, 9, 190, 231, 225, 223, 189, 167, 111, 46, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 79, 189, 71, 190, 73, 10, 233, 190, 105, 234, 145, 190, 8, 188, 1, 191, 64, 69, 7, 189, 227, 61, 111, 190, 158, 195, 234, 190, 202, 101, 143, 61, 96, 222, 207, 62, 11, 32, 167, 190, 136, 144, 160, 188, 104, 236, 173, 190, 87, 169, 188, 190, 47, 190, 149, 59, 132, 90, 27, 191, 12, 41, 186, 190, 214, 211, 253, 190, 114, 93, 188, 60, 52, 105, 129, 189, 230, 17, 238, 189, 4, 21, 60, 62, 60, 227, 223, 61, 118, 157, 145, 62, 223, 133, 132, 190, 149, 104, 55, 62, 67, 166, 161, 190, 136, 212, 183, 190, 55, 219, 0, 63, 111, 102, 117, 62, 88, 16, 189, 190, 151, 86, 29, 188, 206, 241, 144, 190, 98, 32, 123, 190, 173, 77, 21, 62, 57, 212, 133, 190, 95, 221, 192, 190, 67, 168, 24, 62, 126, 91, 170, 189, 192, 78, 72, 190, 41, 84, 220, 61, 215, 134, 154, 61, 172, 231, 103, 191, 198, 95, 28, 62, 211, 30, 145, 62, 53, 61, 201, 188, 165, 7, 200, 61, 74, 83, 1, 190, 162, 188, 241, 61, 151, 130, 8, 62, 128, 80, 153, 190, 91, 86, 34, 61, 150, 147, 178, 61, 214, 202, 32, 189, 137, 144, 182, 189, 17, 227, 148, 62, 101, 239, 166, 61, 106, 233, 123, 188, 145, 220, 182, 190, 12, 154, 36, 60, 73, 30, 2, 62, 177, 235, 199, 60, 69, 27, 66, 62, 117, 204, 23, 61, 48, 50, 45, 61, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 125, 29, 226, 62, 83, 66, 3, 61, 247, 179, 137, 62, 202, 118, 41, 191, 202, 52, 28, 61, 133, 51, 236, 190, 95, 171, 47, 62, 107, 244, 0, 190, 72, 78, 190, 190, 74, 127, 116, 61, 227, 185, 190, 190, 254, 136, 152, 62, 135, 91, 119, 189, 240, 189, 3, 62, 158, 78, 227, 189, 104, 241, 147, 190, 142, 19, 105, 61, 204, 91, 66, 62, 254, 169, 45, 190, 0, 20, 198, 188, 165, 61, 70, 61, 153, 188, 164, 188, 3, 197, 70, 190, 189, 107, 133, 62, 213, 164, 93, 62, 229, 167, 178, 190, 189, 235, 114, 62, 230, 0, 106, 61, 214, 23, 179, 62, 76, 20, 24, 191, 46, 111, 70, 60, 233, 2, 177, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 105, 207, 5, 62, 247, 114, 129, 62, 38, 171, 75, 62, 125, 245, 132, 191, 177, 216, 42, 62, 95, 174, 213, 190, 220, 102, 255, 61, 207, 69, 31, 61, 197, 250, 138, 62, 213, 163, 116, 190, 215, 79, 99, 61, 4, 22, 162, 62, 156, 21, 167, 62, 126, 246, 179, 62, 117, 167, 112, 62, 52, 181, 13, 62, 132, 251, 62, 61, 123, 19, 27, 188, 151, 84, 71, 189, 22, 162, 77, 62, 174, 77, 130, 189, 253, 24, 16, 190, 205, 210, 166, 190, 148, 149, 120, 61, 159, 104, 101, 191, 137, 216, 160, 189, 135, 78, 252, 60, 104, 234, 39, 189, 131, 166, 131, 189, 109, 244, 160, 62, 22, 198, 200, 61, 48, 69, 237, 60, 178, 85, 99, 190, 83, 126, 190, 190, 243, 218, 3, 190, 254, 244, 206, 62, 99, 108, 208, 61, 168, 208, 140, 62, 192, 204, 136, 61, 136, 116, 48, 190, 111, 94, 13, 62, 153, 205, 100, 62, 254, 190, 142, 62, 152, 221, 29, 190, 105, 84, 199, 62, 119, 191, 234, 61, 36, 39, 131, 62, 45, 13, 170, 62, 24, 63, 21, 61, 17, 188, 99, 62, 136, 64, 159, 189, 169, 155, 40, 61, 154, 228, 164, 61, 105, 85, 39, 189, 219, 83, 18, 190, 175, 129, 231, 61, 9, 85, 191, 190, 25, 226, 21, 61, 151, 139, 170, 190, 192, 197, 243, 190, 20, 159, 184, 188, 197, 24, 74, 189, 30, 165, 30, 189, 128, 47, 38, 190, 194, 87, 51, 190, 226, 212, 64, 62, 82, 101, 119, 62, 176, 113, 136, 62, 179, 2, 31, 61, 98, 249, 26, 62, 222, 100, 36, 62, 233, 51, 51, 62, 150, 231, 154, 62, 130, 172, 43, 190, 215, 4, 80, 62, 203, 202, 37, 190, 215, 60, 136, 62, 187, 191, 196, 58, 230, 69, 106, 189, 94, 69, 58, 190, 145, 2, 67, 62, 91, 49, 173, 190, 220, 179, 51, 190, 180, 194, 240, 61, 241, 240, 134, 61, 183, 28, 228, 189, 234, 241, 187, 61, 11, 54, 85, 62, 224, 246, 254, 188, 7, 150, 56, 62, 40, 227, 177, 189, 188, 222, 207, 61, 223, 5, 27, 188, 80, 65, 140, 189, 136, 115, 176, 62, 168, 120, 175, 62, 199, 101, 103, 191, 156, 10, 10, 190, 219, 92, 167, 188, 118, 254, 223, 62, 222, 142, 72, 189, 111, 47, 215, 62, 222, 243, 196, 60, 114, 177, 218, 60, 160, 84, 69, 189, 224, 119, 249, 188, 213, 45, 42, 62, 22, 226, 179, 189, 238, 115, 122, 62, 169, 132, 223, 62, 139, 29, 161, 61, 137, 206, 222, 62, 171, 78, 108, 190, 100, 243, 65, 62, 240, 244, 172, 62, 66, 165, 167, 190, 200, 125, 219, 60, 201, 197, 75, 61, 144, 83, 37, 62, 54, 147, 73, 190, 131, 82, 186, 59, 9, 143, 202, 190, 238, 65, 152, 190, 79, 149, 99, 62, 84, 69, 23, 190, 177, 186, 36, 191, 160, 233, 65, 190, 107, 96, 160, 190, 105, 44, 166, 62, 243, 8, 32, 62, 42, 75, 235, 61, 7, 187, 40, 191, 7, 200, 239, 60, 92, 3, 213, 189, 84, 219, 105, 189, 244, 171, 255, 189, 126, 98, 222, 61, 177, 195, 31, 190, 34, 253, 29, 190, 61, 54, 132, 62, 17, 249, 158, 62, 63, 142, 170, 61, 138, 208, 148, 62, 166, 128, 128, 190, 80, 32, 173, 61, 58, 141, 181, 188, 107, 93, 158, 190, 213, 32, 148, 190, 208, 228, 163, 188, 188, 214, 20, 189, 209, 249, 244, 190, 155, 109, 33, 62, 42, 107, 34, 191, 95, 55, 30, 190, 196, 232, 75, 62, 56, 51, 132, 61, 132, 152, 211, 190, 239, 248, 183, 189, 143, 170, 5, 189, 209, 8, 241, 188, 224, 2, 235, 190, 44, 201, 89, 62, 141, 224, 171, 187, 239, 45, 215, 190, 185, 72, 4, 189, 251, 149, 31, 190, 3, 88, 108, 191, 238, 220, 22, 62, 214, 253, 84, 190, 123, 32, 9, 191, 149, 51, 148, 190, 239, 77, 99, 62, 246, 224, 196, 189, 104, 43, 22, 191, 197, 167, 42, 190, 126, 148, 70, 187, 188, 199, 140, 189, 106, 184, 88, 62, 243, 182, 118, 62, 183, 20, 18, 61, 122, 83, 136, 62, 12, 37, 59, 61, 152, 107, 115, 62, 222, 216, 192, 189, 78, 111, 162, 62, 231, 103, 181, 189, 6, 126, 56, 62, 48, 56, 25, 62, 58, 166, 40, 61, 68, 10, 188, 190, 252, 196, 212, 190, 143, 77, 172, 190, 65, 24, 50, 190, 147, 190, 81, 62, 201, 83, 158, 190, 20, 224, 1, 191, 77, 141, 162, 61, 88, 188, 158, 61, 30, 178, 76, 190, 221, 14, 187, 189, 73, 38, 136, 60, 201, 74, 35, 191, 12, 71, 20, 190, 210, 57, 141, 62, 77, 0, 148, 188, 178, 150, 85, 190, 28, 0, 254, 189, 47, 187, 5, 190, 223, 164, 71, 62, 159, 235, 179, 59, 184, 17, 95, 62, 163, 207, 136, 189, 207, 136, 154, 189, 163, 68, 26, 62, 11, 96, 169, 61, 204, 5, 54, 62, 177, 161, 15, 190, 60, 144, 156, 60, 103, 210, 181, 188, 45, 187, 172, 62, 157, 33, 248, 61, 233, 76, 42, 62, 102, 111, 17, 61, 236, 11, 35, 62, 170, 150, 172, 62, 13, 52, 116, 62, 27, 183, 141, 62, 242, 97, 128, 62, 102, 112, 35, 62, 187, 142, 167, 61, 15, 232, 149, 60, 136, 158, 34, 190, 142, 2, 156, 190, 115, 253, 4, 62, 23, 62, 197, 190, 235, 59, 247, 61, 9, 29, 152, 61, 26, 255, 222, 189, 144, 59, 28, 190, 115, 139, 70, 62, 172, 22, 129, 62, 158, 21, 149, 189, 110, 252, 248, 61, 3, 140, 136, 62, 152, 89, 76, 62, 67, 162, 52, 190, 210, 138, 45, 62, 176, 48, 55, 62, 36, 38, 167, 59, 30, 11, 103, 190, 212, 77, 218, 62, 192, 231, 217, 60, 134, 3, 30, 62, 53, 114, 85, 190, 210, 181, 96, 189, 66, 168, 108, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 152, 218, 17, 63, 144, 144, 153, 61, 83, 222, 183, 190, 213, 95, 111, 62, 69, 153, 144, 61, 3, 124, 235, 62, 109, 207, 73, 62, 17, 9, 15, 62, 154, 99, 175, 61, 193, 96, 6, 188, 127, 4, 81, 61, 95, 196, 36, 61, 191, 81, 144, 62, 206, 118, 177, 61, 28, 154, 174, 62, 185, 165, 37, 62, 182, 106, 254, 61, 5, 94, 131, 190, 28, 131, 37, 190, 102, 81, 146, 58, 252, 128, 223, 190, 101, 193, 112, 61, 104, 20, 194, 190, 124, 107, 149, 189, 214, 92, 210, 190, 63, 147, 164, 62, 160, 155, 165, 62, 254, 113, 43, 191, 120, 10, 166, 61, 213, 52, 170, 62, 199, 49, 12, 62, 107, 57, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 71, 136, 205, 189, 254, 67, 178, 62, 227, 179, 6, 62, 136, 60, 248, 61, 141, 159, 77, 189, 213, 146, 16, 189, 33, 55, 92, 62, 126, 81, 221, 61, 140, 35, 182, 61, 240, 30, 85, 187, 240, 165, 30, 62, 152, 109, 159, 189, 213, 231, 10, 61, 213, 140, 12, 60, 253, 43, 188, 62, 99, 67, 39, 188, 253, 218, 99, 62, 79, 157, 144, 189, 148, 134, 24, 190, 141, 17, 141, 62, 176, 0, 23, 190, 94, 23, 76, 189, 150, 9, 136, 190, 225, 50, 129, 62, 216, 197, 97, 61, 167, 52, 178, 188, 162, 48, 7, 62, 161, 28, 8, 187, 103, 248, 162, 62, 13, 55, 152, 60, 14, 126, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 56, 177, 21, 63, 34, 51, 233, 189, 74, 54, 58, 61, 23, 187, 171, 190, 246, 120, 85, 191, 197, 188, 250, 189, 139, 118, 70, 63, 48, 65, 52, 191, 159, 219, 174, 61, 20, 224, 34, 63, 55, 106, 89, 63, 5, 13, 214, 188, 203, 187, 81, 63, 115, 39, 58, 63, 118, 185, 255, 190, 98, 86, 192, 60, 18, 126, 53, 63, 194, 72, 151, 189, 147, 40, 172, 61, 71, 23, 12, 191, 110, 79, 164, 61, 226, 12, 212, 190, 201, 62, 200, 62, 34, 236, 198, 62, 177, 135, 236, 62, 127, 22, 71, 190, 41, 125, 41, 63, 208, 230, 168, 189, 46, 209, 157, 190, 8, 220, 23, 190, 169, 252, 43, 63, 188, 156, 177, 61, 99, 210, 156, 188, 87, 71, 107, 190, 18, 213, 17, 61, 192, 123, 13, 190, 83, 208, 113, 61, 231, 22, 226, 60, 245, 75, 14, 62, 8, 60, 142, 61, 59, 77, 90, 190, 199, 134, 129, 61, 240, 26, 3, 190, 226, 135, 17, 190, 57, 229, 52, 62, 44, 135, 128, 190, 59, 233, 141, 190, 150, 71, 232, 60, 128, 207, 218, 61, 96, 187, 69, 190, 24, 91, 3, 190, 118, 156, 121, 62, 34, 48, 40, 190, 226, 154, 142, 189, 123, 209, 204, 61, 220, 55, 0, 61, 39, 142, 160, 62, 207, 40, 247, 62, 233, 201, 28, 189, 227, 219, 174, 190, 87, 186, 146, 189, 209, 27, 86, 61, 96, 64, 23, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 72, 195, 189, 208, 21, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 226, 213, 189, 253, 229, 76, 191, 8, 73, 4, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {115, 199, 146, 63, 104, 80, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}