// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 36, 169, 62, 188, 222, 7, 63, 36, 64, 1, 62, 163, 101, 6, 63, 57, 115, 211, 62, 81, 90, 69, 62, 239, 59, 43, 62, 174, 221, 121, 189, 174, 230, 217, 61, 186, 0, 198, 62, 31, 85, 9, 190, 244, 186, 152, 189, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 100, 81, 90, 190, 183, 28, 113, 190, 36, 117, 113, 190, 180, 137, 172, 190, 7, 125, 66, 61, 224, 125, 15, 62, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 106, 206, 231, 62, 206, 14, 39, 190, 15, 121, 245, 62, 110, 55, 12, 191, 16, 229, 138, 190, 146, 81, 7, 63, 8, 119, 163, 61, 76, 251, 142, 190, 247, 175, 162, 62, 151, 12, 8, 63, 172, 215, 173, 62, 182, 125, 89, 61, 184, 237, 168, 62, 91, 113, 208, 62, 7, 187, 192, 190, 54, 90, 72, 61, 159, 120, 62, 189, 126, 155, 53, 62, 9, 247, 254, 61, 179, 55, 130, 61, 24, 213, 9, 63, 36, 173, 24, 190, 76, 252, 65, 190, 130, 152, 200, 190, 74, 92, 230, 59, 73, 118, 191, 62, 199, 168, 141, 189, 110, 200, 5, 191, 125, 169, 2, 191, 189, 43, 208, 185, 84, 1, 0, 63, 208, 147, 143, 189, 191, 156, 245, 190, 70, 105, 232, 190, 140, 7, 132, 189, 14, 235, 202, 190, 177, 22, 130, 190, 0, 31, 107, 190, 243, 181, 92, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 199, 143, 214, 62, 233, 124, 223, 190, 60, 156, 225, 190, 157, 80, 243, 190, 8, 173, 7, 189, 5, 35, 25, 190, 47, 168, 18, 191, 173, 238, 245, 190, 72, 94, 1, 191, 139, 161, 26, 190, 55, 44, 115, 61, 254, 72, 17, 62, 244, 28, 222, 62, 111, 191, 175, 62, 255, 201, 120, 62, 207, 235, 221, 62, 20, 174, 61, 190, 126, 138, 37, 190, 107, 214, 7, 191, 157, 27, 155, 190, 190, 213, 5, 191, 223, 150, 128, 189, 129, 47, 251, 61, 206, 156, 102, 62, 199, 129, 153, 60, 147, 47, 150, 190, 241, 137, 11, 63, 168, 72, 174, 190, 144, 246, 240, 62, 171, 47, 76, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 156, 19, 191, 78, 2, 93, 62, 92, 53, 111, 62, 252, 84, 213, 190, 106, 173, 9, 191, 135, 89, 157, 190, 228, 42, 7, 190, 92, 107, 229, 190, 124, 5, 200, 60, 16, 130, 222, 62, 61, 141, 143, 190, 96, 125, 178, 189, 135, 234, 34, 190, 230, 234, 60, 187, 218, 47, 233, 62, 133, 68, 188, 190, 209, 59, 239, 62, 138, 24, 128, 62, 218, 123, 130, 62, 183, 204, 200, 190, 193, 66, 225, 62, 253, 145, 179, 190, 51, 169, 6, 63, 161, 117, 167, 62, 128, 209, 171, 62, 9, 98, 2, 191, 156, 101, 248, 61, 74, 19, 192, 62, 85, 51, 228, 188, 198, 237, 235, 190, 128, 121, 55, 189, 24, 21, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 49, 225, 168, 61, 161, 168, 52, 188, 209, 215, 121, 189, 103, 24, 6, 62, 167, 29, 70, 61, 34, 128, 212, 61, 209, 84, 45, 62, 89, 165, 17, 190, 131, 238, 253, 189, 242, 192, 107, 189, 153, 225, 32, 189, 14, 154, 98, 189, 127, 149, 22, 61, 180, 144, 254, 189, 251, 187, 61, 61, 171, 153, 218, 59, 227, 33, 59, 61, 226, 27, 129, 189, 11, 130, 124, 61, 130, 243, 31, 190, 52, 188, 34, 190, 252, 81, 224, 61, 190, 161, 111, 189, 208, 165, 45, 189, 107, 207, 232, 189, 5, 235, 16, 61, 218, 184, 30, 189, 50, 192, 12, 189, 78, 154, 43, 62, 101, 221, 254, 61, 233, 36, 128, 189, 15, 107, 25, 62, 82, 40, 113, 61, 10, 223, 122, 189, 5, 75, 30, 62, 224, 42, 43, 62, 39, 8, 83, 61, 0, 105, 140, 61, 125, 243, 82, 61, 175, 107, 186, 61, 51, 93, 50, 61, 160, 172, 168, 60, 160, 156, 144, 189, 82, 237, 236, 61, 207, 189, 37, 62, 105, 135, 181, 61, 7, 110, 24, 190, 209, 200, 203, 189, 233, 168, 110, 189, 174, 31, 105, 61, 12, 240, 20, 190, 105, 46, 113, 189, 106, 185, 20, 189, 255, 83, 188, 188, 97, 193, 89, 61, 164, 14, 164, 61, 236, 3, 55, 60, 94, 160, 110, 59, 71, 17, 3, 61, 119, 211, 79, 61, 148, 153, 134, 187, 98, 216, 193, 189, 209, 133, 38, 190, 172, 75, 18, 62, 162, 160, 48, 190, 254, 58, 11, 62, 232, 239, 43, 190, 206, 73, 53, 61, 45, 54, 165, 186, 60, 113, 234, 60, 186, 113, 33, 62, 129, 80, 172, 189, 128, 51, 220, 61, 67, 36, 162, 61, 43, 18, 28, 190, 52, 17, 229, 189, 45, 96, 213, 187, 246, 9, 35, 62, 178, 128, 151, 189, 206, 253, 8, 62, 151, 232, 22, 190, 193, 175, 245, 61, 68, 145, 159, 189, 171, 68, 132, 61, 115, 90, 102, 61, 222, 208, 29, 62, 215, 54, 232, 61, 121, 238, 189, 60, 141, 208, 95, 61, 146, 74, 35, 190, 132, 74, 50, 62, 4, 42, 95, 189, 60, 173, 105, 57, 28, 58, 19, 190, 64, 202, 180, 61, 75, 176, 69, 189, 12, 78, 243, 189, 121, 40, 52, 190, 71, 85, 46, 62, 35, 67, 22, 61, 162, 28, 249, 188, 64, 33, 27, 62, 40, 199, 6, 190, 171, 110, 123, 61, 21, 25, 214, 60, 78, 55, 13, 62, 105, 184, 215, 189, 87, 225, 156, 189, 25, 52, 32, 190, 233, 43, 107, 189, 230, 106, 0, 190, 117, 94, 32, 62, 238, 27, 97, 189, 152, 203, 26, 62, 116, 101, 10, 61, 212, 215, 144, 61, 240, 238, 107, 60, 173, 90, 35, 190, 160, 236, 26, 190, 142, 147, 246, 188, 135, 222, 76, 61, 28, 23, 237, 189, 246, 152, 178, 189, 64, 45, 40, 62, 165, 160, 221, 61, 80, 3, 240, 61, 18, 84, 250, 60, 105, 98, 36, 62, 99, 49, 183, 61, 53, 157, 146, 61, 58, 231, 86, 61, 97, 220, 52, 61, 168, 212, 79, 60, 126, 28, 123, 59, 140, 219, 84, 61, 5, 216, 10, 62, 216, 27, 25, 190, 223, 222, 143, 61, 147, 110, 41, 62, 97, 165, 25, 190, 57, 181, 186, 61, 146, 108, 151, 189, 94, 252, 146, 61, 6, 130, 161, 189, 248, 53, 77, 61, 173, 127, 3, 190, 2, 191, 18, 62, 107, 237, 26, 62, 31, 55, 166, 61, 74, 129, 53, 61, 57, 131, 48, 190, 235, 133, 204, 189, 159, 247, 224, 189, 25, 3, 86, 61, 172, 63, 157, 189, 155, 45, 194, 58, 218, 229, 25, 62, 239, 27, 29, 62, 212, 24, 49, 190, 180, 181, 249, 189, 138, 2, 112, 189, 46, 1, 50, 62, 167, 16, 36, 190, 86, 188, 26, 190, 150, 33, 238, 189, 129, 190, 19, 190, 199, 149, 174, 61, 244, 16, 17, 62, 27, 192, 31, 62, 237, 142, 57, 61, 252, 141, 33, 190, 177, 1, 38, 61, 77, 105, 2, 190, 185, 121, 36, 189, 20, 3, 60, 61, 120, 104, 50, 60, 12, 146, 1, 190, 228, 150, 229, 188, 214, 75, 206, 189, 117, 51, 41, 190, 90, 44, 82, 61, 43, 84, 166, 61, 90, 241, 174, 189, 216, 206, 214, 61, 127, 14, 95, 60, 45, 249, 135, 61, 112, 122, 104, 61, 56, 132, 13, 61, 182, 96, 21, 62, 104, 208, 17, 190, 69, 81, 102, 189, 175, 144, 198, 189, 149, 163, 198, 187, 8, 226, 118, 189, 96, 11, 199, 189, 182, 213, 76, 189, 28, 90, 197, 189, 191, 24, 79, 61, 210, 131, 44, 190, 130, 201, 218, 61, 231, 140, 17, 62, 116, 180, 238, 188, 166, 43, 131, 189, 4, 226, 232, 61, 118, 198, 21, 190, 76, 174, 140, 188, 152, 83, 1, 190, 83, 10, 178, 61, 78, 190, 15, 190, 129, 85, 47, 188, 118, 179, 200, 61, 179, 54, 19, 190, 248, 66, 63, 189, 100, 19, 185, 61, 131, 63, 8, 189, 236, 170, 194, 189, 127, 6, 35, 62, 211, 66, 107, 61, 74, 92, 14, 62, 106, 219, 114, 189, 223, 55, 34, 62, 78, 67, 222, 189, 7, 7, 231, 188, 26, 36, 52, 62, 147, 111, 198, 189, 215, 123, 171, 187, 75, 99, 162, 61, 68, 15, 205, 61, 34, 60, 171, 189, 241, 41, 3, 62, 240, 111, 136, 60, 164, 247, 193, 189, 158, 228, 212, 189, 19, 106, 20, 62, 239, 229, 57, 189, 237, 46, 52, 190, 212, 22, 225, 61, 235, 174, 230, 189, 217, 30, 42, 62, 221, 230, 37, 190, 1, 96, 220, 61, 101, 50, 187, 61, 63, 18, 75, 61, 148, 174, 140, 189, 69, 122, 36, 190, 246, 10, 24, 62, 25, 89, 229, 61, 27, 190, 39, 190, 245, 237, 90, 189, 248, 101, 84, 61, 249, 9, 154, 60, 110, 109, 56, 189, 157, 108, 27, 190, 111, 90, 213, 189, 103, 44, 197, 189, 131, 235, 231, 59, 59, 215, 35, 62, 101, 115, 176, 59, 88, 59, 212, 187, 10, 25, 31, 61, 14, 206, 37, 62, 183, 42, 143, 61, 114, 189, 64, 61, 221, 0, 13, 189, 188, 173, 37, 190, 21, 32, 243, 189, 54, 200, 238, 189, 119, 29, 47, 62, 104, 37, 19, 62, 171, 210, 157, 186, 102, 137, 173, 189, 21, 149, 191, 188, 219, 246, 192, 61, 35, 207, 131, 59, 211, 95, 158, 61, 20, 242, 48, 61, 156, 50, 18, 190, 165, 89, 62, 60, 62, 121, 211, 61, 91, 113, 1, 190, 140, 54, 91, 189, 23, 206, 80, 189, 48, 218, 253, 189, 240, 188, 231, 189, 164, 106, 147, 187, 215, 95, 73, 61, 86, 103, 34, 61, 187, 180, 152, 188, 125, 240, 71, 189, 150, 183, 37, 190, 82, 53, 49, 189, 35, 179, 0, 62, 243, 212, 248, 189, 87, 53, 154, 61, 172, 166, 25, 62, 151, 164, 9, 188, 186, 208, 3, 190, 68, 148, 211, 189, 77, 118, 6, 189, 86, 57, 38, 62, 120, 98, 252, 189, 132, 200, 183, 189, 161, 4, 9, 61, 31, 156, 148, 61, 164, 143, 43, 62, 201, 102, 23, 62, 224, 133, 36, 190, 191, 51, 228, 61, 247, 201, 177, 188, 114, 29, 223, 61, 215, 54, 77, 189, 225, 179, 234, 61, 144, 68, 123, 189, 222, 98, 111, 189, 211, 65, 195, 189, 140, 24, 168, 189, 123, 111, 162, 61, 172, 184, 12, 62, 153, 221, 188, 189, 190, 254, 213, 61, 76, 24, 118, 61, 204, 195, 58, 61, 67, 184, 32, 190, 115, 93, 59, 189, 239, 34, 45, 62, 243, 67, 34, 190, 89, 59, 41, 61, 103, 117, 206, 60, 165, 96, 170, 60, 189, 186, 228, 189, 18, 81, 129, 189, 77, 212, 254, 61, 103, 63, 10, 186, 9, 16, 203, 188, 136, 67, 255, 189, 244, 230, 241, 188, 207, 68, 192, 61, 118, 44, 63, 189, 215, 109, 199, 61, 81, 170, 199, 60, 81, 246, 2, 190, 69, 164, 227, 61, 53, 120, 202, 188, 58, 209, 0, 61, 133, 137, 34, 60, 91, 9, 19, 190, 98, 14, 3, 61, 205, 129, 147, 59, 196, 181, 58, 187, 147, 162, 28, 190, 121, 177, 51, 62, 162, 59, 18, 190, 21, 149, 15, 62, 31, 13, 33, 190, 24, 142, 46, 62, 195, 79, 19, 62, 103, 20, 234, 189, 40, 188, 4, 190, 171, 191, 173, 59, 21, 187, 179, 60, 218, 152, 102, 188, 241, 7, 192, 188, 174, 58, 244, 189, 27, 252, 135, 60, 161, 150, 25, 61, 95, 7, 47, 190, 152, 196, 16, 190, 183, 30, 19, 62, 53, 201, 156, 189, 66, 74, 184, 189, 79, 150, 239, 61, 105, 215, 146, 61, 154, 34, 26, 62, 98, 239, 34, 62, 41, 96, 37, 188, 126, 67, 119, 61, 205, 242, 221, 189, 230, 24, 159, 61, 204, 142, 12, 189, 126, 45, 207, 189, 10, 132, 209, 60, 48, 60, 145, 189, 70, 225, 75, 189, 167, 101, 6, 190, 194, 72, 82, 189, 83, 184, 46, 62, 184, 224, 191, 60, 132, 92, 34, 62, 156, 186, 244, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 102, 95, 249, 189, 195, 102, 246, 189, 25, 27, 7, 190, 250, 11, 139, 188, 17, 63, 53, 61, 251, 172, 49, 190, 111, 57, 201, 189, 192, 140, 187, 61, 15, 223, 240, 61, 101, 160, 122, 59, 142, 252, 147, 189, 246, 142, 254, 186, 137, 125, 234, 189, 199, 75, 18, 61, 44, 159, 41, 189, 31, 225, 17, 62, 39, 112, 137, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 251, 216, 30, 62, 166, 124, 156, 61, 37, 168, 226, 61, 152, 37, 201, 60, 88, 69, 170, 61, 41, 224, 188, 61, 255, 161, 27, 61, 137, 110, 176, 61, 129, 67, 192, 61, 236, 3, 181, 189, 156, 141, 248, 61, 129, 196, 230, 61, 212, 128, 48, 62, 16, 181, 91, 189, 205, 76, 46, 61, 163, 82, 29, 189, 28, 75, 78, 61, 44, 54, 145, 61, 154, 151, 18, 190, 36, 135, 203, 189, 192, 245, 151, 189, 250, 84, 170, 189, 176, 252, 232, 61, 14, 205, 207, 58, 2, 99, 4, 62, 64, 154, 130, 189, 200, 53, 51, 190, 62, 214, 49, 62, 235, 168, 173, 189, 211, 30, 219, 60, 49, 114, 40, 190, 145, 25, 139, 61, 201, 174, 3, 187, 132, 163, 46, 62, 136, 105, 211, 61, 124, 71, 158, 61, 10, 1, 244, 188, 166, 235, 197, 60, 101, 23, 48, 190, 61, 42, 196, 61, 171, 139, 220, 61, 243, 205, 157, 61, 55, 235, 21, 189, 120, 17, 208, 60, 201, 146, 16, 62, 41, 149, 30, 190, 182, 255, 239, 60, 93, 66, 224, 189, 170, 59, 23, 190, 60, 131, 198, 61, 1, 179, 146, 189, 146, 130, 53, 189, 243, 156, 27, 62, 211, 2, 173, 60, 82, 226, 69, 188, 152, 229, 90, 189, 160, 152, 43, 190, 144, 142, 136, 188, 205, 74, 26, 190, 128, 46, 188, 61, 6, 65, 208, 185, 54, 248, 41, 61, 247, 171, 4, 190, 177, 38, 143, 188, 96, 168, 34, 62, 156, 173, 8, 61, 205, 112, 188, 61, 55, 23, 109, 59, 22, 219, 4, 188, 149, 204, 43, 190, 19, 3, 42, 190, 5, 83, 51, 62, 158, 15, 137, 189, 95, 29, 19, 190, 241, 195, 38, 62, 54, 134, 154, 189, 139, 81, 176, 61, 198, 184, 3, 190, 230, 133, 149, 60, 71, 98, 240, 189, 228, 116, 219, 61, 63, 36, 171, 188, 151, 178, 42, 189, 78, 95, 240, 188, 146, 153, 79, 61, 109, 140, 3, 62, 85, 91, 8, 189, 252, 52, 42, 62, 148, 216, 32, 190, 230, 206, 115, 59, 75, 37, 90, 189, 77, 161, 176, 61, 129, 247, 62, 189, 215, 98, 234, 189, 168, 51, 45, 190, 129, 168, 22, 62, 29, 43, 244, 61, 91, 239, 37, 190, 54, 255, 170, 189, 178, 106, 36, 189, 144, 212, 136, 189, 138, 158, 149, 188, 18, 211, 163, 189, 202, 203, 5, 62, 222, 181, 175, 61, 73, 82, 45, 190, 69, 152, 72, 189, 80, 239, 185, 188, 198, 159, 93, 60, 179, 62, 55, 60, 113, 185, 234, 189, 218, 97, 239, 189, 133, 185, 33, 190, 48, 11, 159, 61, 176, 74, 246, 189, 20, 158, 121, 61, 30, 83, 141, 59, 154, 83, 5, 60, 47, 216, 102, 189, 114, 107, 68, 189, 198, 165, 13, 62, 34, 185, 191, 189, 36, 76, 147, 189, 15, 26, 115, 187, 104, 5, 244, 189, 11, 153, 49, 189, 138, 250, 111, 189, 176, 147, 82, 189, 16, 50, 183, 189, 94, 223, 190, 189, 209, 0, 38, 190, 121, 180, 17, 190, 64, 69, 7, 189, 101, 32, 223, 60, 14, 4, 158, 189, 202, 101, 143, 61, 222, 52, 49, 62, 2, 181, 51, 62, 27, 225, 23, 190, 19, 203, 197, 61, 195, 55, 17, 61, 87, 223, 5, 62, 61, 233, 152, 189, 35, 36, 226, 189, 118, 32, 17, 189, 104, 250, 226, 189, 95, 210, 42, 62, 107, 201, 10, 61, 201, 163, 193, 189, 60, 227, 223, 61, 206, 31, 150, 189, 142, 184, 7, 62, 221, 53, 16, 190, 135, 29, 209, 61, 137, 221, 11, 189, 140, 2, 181, 189, 59, 94, 41, 62, 30, 207, 12, 190, 171, 6, 138, 61, 215, 30, 140, 189, 187, 168, 19, 62, 18, 59, 137, 189, 129, 200, 250, 189, 240, 56, 237, 188, 67, 168, 24, 62, 253, 134, 100, 189, 254, 4, 176, 189, 41, 84, 220, 61, 200, 253, 133, 61, 95, 52, 95, 61, 0, 158, 41, 62, 163, 77, 127, 61, 225, 245, 86, 56, 61, 38, 30, 62, 106, 160, 142, 189, 169, 45, 19, 62, 228, 128, 50, 62, 117, 189, 212, 189, 110, 175, 99, 188, 165, 101, 10, 62, 175, 182, 108, 189, 137, 144, 182, 189, 143, 87, 10, 62, 51, 67, 204, 61, 53, 202, 188, 61, 222, 223, 40, 61, 64, 144, 219, 188, 235, 58, 24, 189, 252, 169, 178, 61, 37, 170, 228, 60, 185, 41, 235, 188, 223, 186, 6, 62, 247, 144, 171, 60, 49, 96, 23, 190, 197, 182, 252, 189, 96, 168, 20, 61, 245, 161, 211, 61, 118, 67, 242, 61, 111, 74, 236, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 85, 168, 186, 61, 162, 200, 8, 190, 82, 238, 172, 60, 88, 168, 52, 190, 253, 123, 212, 61, 79, 234, 21, 61, 97, 195, 35, 189, 180, 142, 15, 62, 113, 21, 16, 62, 209, 210, 116, 189, 45, 68, 7, 190, 28, 0, 52, 190, 147, 76, 144, 189, 152, 12, 22, 190, 176, 233, 168, 61, 132, 67, 189, 189, 2, 135, 39, 189, 161, 17, 210, 189, 132, 204, 81, 188, 35, 251, 201, 61, 36, 230, 7, 189, 246, 58, 157, 189, 31, 73, 28, 62, 137, 76, 204, 61, 202, 52, 28, 61, 47, 56, 19, 189, 222, 196, 16, 62, 107, 244, 0, 190, 125, 26, 51, 190, 17, 98, 31, 62, 115, 138, 217, 60, 84, 55, 5, 62, 60, 221, 232, 61, 4, 140, 93, 61, 223, 183, 166, 61, 60, 228, 145, 189, 146, 154, 8, 190, 184, 49, 21, 62, 127, 113, 218, 60, 5, 5, 15, 190, 27, 223, 27, 190, 153, 188, 164, 188, 207, 31, 141, 60, 162, 12, 203, 188, 195, 161, 199, 189, 1, 110, 161, 61, 201, 253, 120, 60, 48, 248, 29, 62, 31, 108, 35, 62, 223, 249, 19, 190, 48, 16, 44, 62, 91, 255, 195, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 71, 235, 42, 190, 88, 93, 12, 62, 128, 147, 128, 61, 31, 161, 38, 62, 177, 216, 42, 62, 215, 98, 175, 61, 205, 99, 30, 187, 207, 69, 31, 61, 169, 176, 48, 62, 253, 58, 45, 190, 236, 66, 250, 60, 253, 252, 175, 61, 76, 150, 42, 188, 191, 205, 143, 60, 68, 119, 45, 62, 178, 166, 96, 189, 8, 105, 186, 189, 134, 35, 42, 61, 88, 211, 17, 190, 150, 217, 222, 61, 165, 25, 213, 189, 253, 24, 16, 190, 143, 218, 43, 190, 35, 87, 188, 186, 72, 145, 222, 189, 105, 62, 89, 189, 220, 88, 209, 189, 43, 21, 205, 189, 190, 207, 216, 189, 179, 34, 37, 62, 232, 231, 49, 61, 24, 54, 187, 189, 134, 236, 75, 61, 79, 85, 216, 189, 181, 66, 32, 190, 231, 115, 136, 61, 99, 108, 208, 61, 31, 8, 101, 189, 104, 213, 12, 189, 136, 116, 48, 190, 0, 42, 10, 62, 142, 144, 241, 59, 23, 177, 32, 62, 190, 130, 119, 189, 226, 242, 30, 62, 162, 136, 251, 188, 50, 128, 7, 62, 156, 38, 10, 62, 153, 167, 18, 62, 216, 240, 131, 61, 235, 10, 32, 190, 35, 17, 221, 61, 89, 121, 231, 61, 105, 85, 39, 189, 245, 241, 113, 188, 145, 221, 57, 59, 17, 29, 130, 189, 55, 36, 81, 189, 55, 98, 184, 189, 182, 44, 102, 61, 85, 13, 3, 62, 188, 249, 75, 189, 24, 50, 217, 189, 139, 249, 38, 190, 235, 21, 173, 60, 39, 112, 16, 62, 91, 226, 203, 61, 122, 214, 45, 62, 179, 2, 31, 61, 173, 74, 33, 62, 57, 139, 231, 189, 233, 51, 51, 62, 221, 179, 117, 61, 223, 134, 25, 190, 130, 246, 151, 189, 157, 211, 219, 189, 22, 108, 42, 62, 71, 201, 35, 190, 250, 111, 47, 190, 200, 190, 5, 190, 180, 53, 39, 61, 114, 137, 15, 190, 21, 216, 32, 190, 146, 10, 18, 61, 13, 128, 211, 188, 183, 28, 228, 189, 231, 54, 88, 61, 202, 88, 248, 61, 9, 81, 42, 190, 37, 161, 1, 62, 247, 109, 132, 189, 198, 132, 12, 61, 113, 190, 114, 189, 3, 211, 172, 189, 255, 115, 42, 62, 50, 133, 207, 187, 192, 75, 163, 189, 95, 132, 2, 190, 151, 30, 1, 188, 85, 132, 4, 62, 222, 142, 72, 189, 248, 20, 3, 62, 141, 152, 176, 61, 114, 177, 218, 60, 113, 16, 160, 60, 20, 19, 108, 189, 29, 126, 111, 61, 234, 83, 51, 190, 78, 108, 26, 60, 47, 10, 148, 60, 196, 6, 176, 60, 140, 221, 39, 62, 51, 114, 84, 189, 227, 229, 13, 62, 79, 201, 2, 62, 131, 161, 44, 190, 63, 166, 238, 188, 201, 197, 75, 61, 202, 40, 160, 188, 142, 233, 12, 190, 211, 163, 15, 62, 219, 57, 165, 61, 8, 181, 105, 61, 93, 71, 2, 62, 161, 65, 103, 188, 1, 61, 245, 59, 200, 16, 164, 189, 85, 96, 163, 189, 227, 54, 135, 61, 108, 44, 37, 190, 251, 93, 36, 61, 86, 64, 12, 190, 7, 200, 239, 60, 13, 235, 26, 62, 47, 186, 144, 189, 244, 171, 255, 189, 92, 88, 34, 62, 110, 81, 22, 190, 201, 77, 180, 189, 56, 193, 78, 189, 21, 3, 33, 62, 172, 68, 219, 189, 146, 37, 28, 62, 87, 76, 111, 189, 122, 175, 179, 189, 103, 35, 153, 61, 97, 171, 21, 190, 173, 8, 71, 189, 70, 232, 149, 60, 188, 214, 20, 189, 110, 174, 14, 190, 143, 177, 196, 61, 145, 207, 25, 190, 211, 21, 14, 190, 197, 128, 158, 188, 26, 32, 161, 61, 64, 181, 234, 187, 62, 211, 51, 190, 117, 115, 181, 188, 127, 74, 167, 60, 113, 33, 18, 190, 36, 143, 83, 61, 188, 127, 227, 61, 72, 191, 10, 190, 185, 72, 4, 189, 165, 132, 190, 189, 182, 132, 168, 189, 238, 220, 22, 62, 26, 56, 36, 190, 57, 126, 23, 62, 24, 85, 148, 189, 65, 96, 66, 188, 74, 74, 32, 60, 221, 134, 214, 60, 135, 25, 48, 189, 223, 14, 160, 61, 36, 95, 149, 61, 46, 122, 98, 61, 226, 105, 35, 62, 236, 149, 134, 61, 229, 160, 146, 188, 12, 37, 59, 61, 98, 83, 76, 188, 207, 58, 102, 61, 117, 195, 196, 57, 221, 63, 103, 189, 57, 65, 109, 61, 23, 54, 41, 190, 39, 194, 240, 189, 90, 46, 13, 190, 158, 70, 228, 188, 20, 145, 244, 61, 76, 54, 237, 61, 130, 54, 216, 60, 35, 19, 244, 189, 199, 35, 5, 190, 77, 141, 162, 61, 165, 51, 6, 61, 10, 53, 46, 190, 221, 14, 187, 189, 249, 27, 236, 60, 150, 230, 44, 61, 74, 249, 251, 189, 186, 195, 204, 61, 100, 168, 246, 188, 182, 123, 239, 189, 150, 6, 151, 61, 244, 176, 34, 190, 89, 140, 253, 61, 223, 189, 189, 61, 221, 15, 152, 61, 47, 236, 15, 190, 185, 121, 253, 189, 163, 68, 26, 62, 175, 177, 8, 190, 183, 30, 160, 61, 25, 140, 1, 190, 118, 91, 172, 184, 64, 180, 6, 61, 234, 39, 253, 61, 26, 22, 98, 61, 142, 78, 248, 188, 56, 216, 15, 61, 193, 101, 28, 62, 42, 109, 77, 61, 82, 254, 73, 61, 107, 111, 214, 61, 151, 251, 11, 62, 102, 112, 35, 62, 118, 220, 4, 62, 155, 42, 99, 189, 136, 158, 34, 190, 107, 238, 223, 189, 115, 92, 140, 61, 41, 147, 50, 59, 21, 155, 41, 190, 225, 14, 0, 62, 32, 172, 59, 189, 186, 154, 0, 189, 101, 57, 32, 62, 108, 238, 50, 61, 134, 155, 1, 190, 69, 116, 146, 61, 48, 35, 30, 62, 7, 192, 180, 61, 67, 162, 52, 190, 11, 124, 15, 62, 22, 89, 162, 59, 86, 4, 45, 190, 224, 91, 131, 186, 202, 227, 1, 62, 141, 12, 13, 189, 67, 128, 145, 59, 59, 217, 237, 60, 28, 191, 153, 61, 196, 16, 214, 189, 163, 240, 242, 61, 181, 41, 34, 60, 93, 33, 50, 190, 126, 168, 10, 190, 73, 10, 110, 60, 171, 172, 244, 189, 59, 236, 208, 189, 151, 21, 29, 190, 118, 153, 2, 190, 115, 224, 93, 61, 240, 124, 168, 60, 110, 204, 202, 189, 55, 45, 203, 189, 245, 149, 163, 188, 15, 16, 197, 189, 65, 115, 79, 189, 136, 58, 7, 62, 16, 129, 181, 189, 12, 159, 157, 186, 136, 46, 113, 189, 53, 66, 29, 189, 11, 156, 35, 189, 231, 3, 130, 61, 124, 92, 70, 189, 110, 213, 77, 189, 37, 25, 66, 61, 23, 232, 241, 189, 254, 23, 113, 188, 99, 31, 45, 62, 68, 116, 4, 189, 112, 159, 171, 189, 146, 215, 1, 62, 96, 137, 45, 62, 33, 79, 57, 61, 219, 147, 245, 189, 166, 60, 181, 189, 69, 153, 144, 61, 239, 147, 5, 62, 107, 177, 36, 61, 17, 9, 15, 62, 220, 223, 109, 61, 167, 120, 199, 189, 6, 38, 144, 188, 183, 201, 45, 190, 157, 221, 147, 61, 6, 96, 145, 61, 23, 30, 13, 62, 84, 134, 61, 61, 214, 165, 21, 190, 53, 142, 63, 189, 43, 47, 97, 189, 224, 230, 32, 190, 186, 111, 23, 62, 101, 193, 112, 61, 62, 47, 104, 61, 43, 97, 225, 189, 53, 250, 24, 190, 74, 164, 215, 61, 144, 20, 14, 62, 178, 136, 124, 189, 3, 32, 75, 61, 135, 178, 27, 62, 184, 232, 29, 188, 53, 156, 111, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 116, 241, 61, 118, 157, 28, 190, 89, 122, 45, 62, 110, 246, 26, 62, 51, 106, 5, 190, 184, 56, 21, 190, 118, 231, 224, 187, 218, 9, 6, 62, 227, 189, 207, 61, 3, 163, 124, 189, 119, 102, 53, 61, 67, 189, 177, 188, 40, 112, 138, 189, 198, 70, 133, 189, 147, 32, 194, 189, 217, 247, 222, 61, 27, 71, 100, 60, 138, 239, 247, 60, 110, 183, 24, 190, 50, 14, 17, 190, 30, 92, 220, 61, 176, 0, 23, 190, 0, 173, 240, 189, 108, 22, 44, 190, 223, 141, 50, 62, 227, 24, 159, 188, 76, 34, 164, 189, 3, 118, 164, 189, 49, 100, 154, 189, 214, 224, 43, 62, 225, 148, 141, 61, 2, 129, 226, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 75, 121, 60, 50, 49, 230, 61, 39, 154, 61, 61, 223, 240, 47, 62, 61, 200, 185, 189, 86, 199, 219, 189, 238, 194, 22, 190, 93, 104, 116, 61, 156, 220, 35, 190, 208, 218, 106, 59, 114, 86, 0, 62, 131, 229, 91, 189, 36, 182, 220, 188, 31, 120, 168, 61, 107, 216, 31, 62, 56, 139, 39, 190, 248, 41, 222, 60, 255, 190, 141, 61, 43, 25, 95, 61, 169, 150, 170, 61, 91, 137, 4, 190, 110, 79, 164, 61, 130, 181, 8, 189, 8, 59, 10, 62, 61, 227, 29, 61, 66, 182, 21, 62, 188, 97, 32, 61, 219, 84, 2, 62, 55, 24, 19, 62, 137, 115, 15, 190, 53, 177, 42, 190, 179, 197, 236, 188, 23, 62, 209, 61, 174, 115, 80, 189, 154, 69, 182, 189, 177, 157, 127, 61, 148, 77, 6, 190, 145, 214, 159, 61, 67, 246, 17, 61, 204, 92, 21, 59, 23, 136, 247, 61, 32, 80, 14, 190, 53, 21, 7, 62, 178, 67, 233, 187, 216, 182, 17, 190, 217, 120, 44, 62, 216, 128, 211, 189, 30, 23, 240, 189, 249, 73, 42, 61, 183, 40, 246, 61, 206, 152, 182, 189, 169, 56, 5, 190, 233, 91, 30, 62, 34, 48, 40, 190, 251, 39, 119, 61, 244, 177, 33, 62, 159, 232, 19, 62, 86, 153, 15, 62, 202, 152, 236, 61, 8, 30, 150, 189, 146, 32, 40, 190, 222, 242, 28, 187, 163, 231, 96, 61, 8, 171, 145, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 188, 61, 61, 30, 221, 67, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {232, 3, 196, 62, 113, 91, 156, 63, 94, 10, 95, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 197, 161, 189, 54, 132, 109, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}