// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 104, 36, 63, 5, 214, 132, 63, 235, 153, 33, 62, 132, 36, 236, 62, 203, 184, 36, 63, 144, 143, 211, 61, 67, 203, 110, 190, 120, 235, 114, 62, 97, 10, 199, 61, 85, 189, 24, 63, 102, 15, 59, 191, 118, 172, 130, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 93, 207, 213, 62, 2, 68, 223, 190, 126, 53, 158, 190, 103, 92, 158, 190, 160, 220, 111, 62, 229, 200, 189, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 250, 68, 143, 189, 175, 140, 38, 191, 39, 24, 40, 63, 83, 141, 83, 191, 134, 190, 68, 63, 71, 108, 135, 62, 207, 62, 154, 190, 37, 198, 26, 190, 176, 16, 46, 63, 112, 56, 80, 63, 109, 200, 201, 62, 17, 240, 254, 61, 119, 198, 211, 61, 141, 44, 60, 63, 43, 48, 239, 190, 124, 177, 141, 189, 101, 169, 126, 63, 182, 118, 125, 61, 123, 200, 52, 60, 205, 59, 132, 63, 156, 122, 241, 62, 183, 160, 136, 62, 130, 228, 237, 190, 85, 149, 3, 191, 186, 84, 2, 63, 21, 155, 42, 63, 22, 52, 223, 190, 92, 120, 244, 190, 203, 8, 88, 189, 7, 222, 160, 62, 177, 148, 43, 63, 222, 30, 251, 190, 211, 229, 255, 190, 155, 105, 7, 191, 154, 227, 60, 191, 98, 202, 27, 191, 197, 71, 138, 190, 6, 181, 127, 190, 161, 222, 158, 188, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 164, 70, 64, 63, 42, 249, 149, 191, 211, 100, 79, 190, 36, 56, 14, 191, 152, 114, 147, 61, 190, 39, 1, 191, 196, 138, 184, 190, 251, 182, 183, 191, 127, 230, 189, 190, 124, 104, 23, 62, 201, 87, 87, 62, 68, 3, 77, 62, 143, 1, 171, 62, 1, 156, 148, 63, 45, 188, 151, 62, 71, 41, 249, 62, 186, 49, 52, 191, 11, 142, 219, 60, 138, 220, 2, 191, 128, 50, 190, 191, 77, 68, 13, 191, 78, 56, 28, 63, 140, 38, 22, 62, 241, 148, 140, 62, 3, 147, 207, 61, 109, 86, 158, 62, 114, 118, 16, 63, 133, 157, 84, 190, 8, 44, 23, 62, 117, 123, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 53, 223, 190, 241, 218, 176, 62, 121, 16, 196, 62, 97, 113, 175, 190, 106, 173, 9, 191, 153, 129, 19, 191, 109, 0, 107, 190, 92, 107, 229, 190, 236, 227, 221, 60, 124, 177, 188, 62, 116, 107, 237, 189, 1, 135, 71, 62, 38, 219, 75, 62, 26, 218, 244, 61, 67, 102, 229, 62, 152, 103, 12, 191, 200, 151, 193, 61, 29, 13, 237, 61, 8, 176, 131, 62, 5, 156, 13, 191, 199, 216, 29, 63, 253, 145, 179, 190, 188, 213, 159, 62, 191, 250, 24, 62, 121, 235, 150, 61, 254, 94, 63, 191, 82, 199, 60, 62, 22, 121, 172, 62, 154, 232, 1, 190, 232, 153, 53, 191, 212, 232, 198, 189, 62, 220, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 201, 223, 113, 190, 45, 161, 47, 190, 226, 250, 39, 60, 111, 148, 16, 189, 224, 42, 43, 62, 133, 173, 254, 58, 93, 188, 138, 190, 125, 243, 82, 61, 177, 153, 207, 61, 77, 89, 60, 62, 117, 92, 20, 62, 147, 200, 21, 190, 148, 184, 59, 61, 108, 109, 133, 62, 49, 242, 55, 62, 239, 176, 92, 190, 230, 18, 117, 191, 238, 65, 26, 62, 190, 166, 170, 189, 73, 25, 78, 191, 248, 87, 212, 59, 106, 185, 20, 189, 27, 223, 241, 189, 77, 118, 215, 61, 91, 139, 113, 189, 39, 241, 9, 62, 17, 93, 101, 190, 112, 67, 114, 190, 161, 188, 50, 191, 248, 47, 2, 61, 203, 246, 155, 189, 121, 62, 182, 190, 156, 146, 131, 62, 0, 152, 47, 61, 195, 122, 105, 62, 230, 95, 5, 191, 206, 73, 53, 61, 235, 81, 128, 60, 148, 115, 196, 188, 186, 113, 33, 62, 110, 121, 143, 190, 188, 127, 51, 62, 172, 178, 102, 189, 32, 156, 201, 61, 18, 128, 243, 189, 229, 158, 6, 60, 153, 74, 77, 62, 134, 36, 36, 189, 186, 251, 43, 62, 0, 133, 212, 189, 160, 78, 122, 62, 235, 113, 19, 189, 172, 173, 65, 62, 115, 90, 102, 61, 48, 255, 133, 62, 238, 206, 31, 62, 156, 110, 28, 189, 152, 148, 140, 59, 173, 238, 155, 188, 168, 2, 112, 62, 0, 144, 13, 189, 1, 36, 194, 189, 50, 53, 128, 190, 233, 71, 115, 61, 113, 30, 177, 190, 103, 156, 153, 189, 222, 68, 131, 190, 207, 194, 44, 189, 35, 67, 22, 61, 211, 157, 232, 188, 206, 134, 74, 61, 40, 199, 6, 190, 219, 26, 23, 62, 50, 107, 251, 188, 99, 166, 73, 62, 122, 79, 152, 59, 180, 15, 173, 189, 14, 104, 54, 190, 49, 139, 114, 189, 149, 214, 32, 190, 20, 49, 58, 62, 31, 138, 21, 190, 172, 136, 60, 62, 27, 88, 148, 61, 134, 140, 119, 61, 240, 238, 107, 60, 61, 212, 60, 189, 133, 184, 49, 190, 86, 206, 58, 61, 164, 5, 146, 62, 133, 91, 196, 189, 152, 79, 25, 61, 18, 221, 67, 62, 146, 19, 94, 62, 63, 46, 124, 62, 22, 63, 189, 60, 230, 53, 136, 62, 160, 150, 134, 62, 194, 145, 71, 62, 170, 37, 55, 191, 97, 220, 52, 61, 61, 169, 160, 190, 101, 133, 102, 61, 140, 219, 84, 61, 104, 212, 0, 62, 177, 249, 28, 190, 244, 206, 108, 189, 56, 120, 237, 62, 161, 24, 168, 190, 175, 26, 36, 61, 230, 38, 236, 189, 59, 4, 59, 190, 144, 244, 130, 62, 51, 186, 88, 62, 49, 39, 222, 189, 117, 64, 218, 62, 135, 47, 206, 62, 31, 55, 166, 61, 224, 232, 84, 188, 231, 174, 17, 62, 7, 144, 209, 189, 158, 227, 172, 190, 29, 191, 111, 62, 40, 127, 133, 61, 120, 56, 238, 61, 14, 8, 88, 61, 161, 253, 4, 62, 126, 34, 5, 190, 113, 106, 28, 191, 7, 17, 242, 189, 233, 87, 252, 61, 252, 111, 161, 58, 86, 188, 26, 190, 24, 28, 132, 190, 64, 40, 148, 190, 199, 149, 174, 61, 194, 59, 155, 62, 89, 222, 82, 62, 23, 117, 126, 62, 88, 131, 156, 189, 102, 196, 50, 62, 197, 155, 42, 191, 183, 139, 48, 190, 98, 246, 192, 189, 66, 193, 104, 62, 141, 72, 67, 62, 118, 29, 45, 60, 233, 128, 241, 190, 129, 235, 43, 189, 90, 44, 82, 61, 141, 114, 59, 62, 16, 239, 16, 191, 184, 231, 176, 61, 170, 63, 11, 187, 236, 19, 250, 189, 135, 30, 179, 62, 222, 46, 159, 190, 117, 174, 154, 62, 236, 34, 60, 190, 196, 22, 184, 189, 66, 111, 171, 189, 118, 175, 86, 188, 88, 253, 150, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 189, 202, 199, 61, 86, 255, 246, 61, 242, 170, 78, 189, 110, 113, 126, 189, 148, 217, 132, 61, 176, 255, 37, 190, 213, 207, 232, 188, 184, 103, 3, 190, 212, 21, 119, 61, 199, 134, 46, 190, 171, 200, 98, 189, 112, 26, 194, 61, 67, 189, 70, 190, 248, 66, 63, 189, 88, 32, 83, 61, 23, 49, 114, 189, 233, 198, 245, 189, 186, 186, 21, 62, 135, 65, 82, 61, 66, 238, 224, 61, 75, 141, 138, 189, 64, 182, 13, 62, 175, 232, 1, 190, 46, 98, 67, 189, 174, 205, 73, 191, 194, 132, 35, 190, 188, 4, 96, 61, 75, 176, 210, 62, 68, 15, 205, 61, 185, 237, 13, 62, 59, 89, 58, 190, 240, 111, 136, 60, 213, 198, 13, 190, 196, 86, 191, 60, 234, 209, 208, 62, 27, 85, 30, 60, 16, 146, 246, 61, 59, 157, 187, 62, 237, 130, 130, 188, 194, 5, 254, 62, 11, 206, 182, 190, 52, 89, 42, 62, 61, 53, 170, 62, 2, 143, 166, 190, 199, 191, 95, 189, 69, 122, 36, 190, 108, 217, 165, 62, 228, 35, 224, 58, 38, 138, 228, 190, 45, 5, 239, 190, 135, 36, 167, 190, 151, 73, 150, 61, 200, 124, 217, 190, 104, 200, 72, 191, 114, 87, 30, 190, 71, 103, 70, 191, 188, 7, 216, 62, 38, 224, 148, 62, 185, 68, 246, 189, 83, 253, 248, 190, 10, 25, 31, 61, 94, 87, 68, 190, 190, 150, 124, 62, 114, 189, 64, 61, 175, 145, 211, 190, 151, 74, 73, 191, 133, 187, 98, 191, 226, 101, 142, 62, 126, 206, 68, 190, 132, 250, 29, 190, 124, 181, 244, 190, 40, 68, 183, 190, 90, 3, 24, 62, 129, 116, 24, 189, 4, 60, 184, 189, 21, 135, 79, 62, 239, 198, 66, 61, 156, 50, 18, 190, 219, 34, 153, 189, 140, 143, 139, 62, 49, 138, 132, 61, 69, 119, 81, 62, 129, 95, 188, 61, 201, 248, 176, 189, 115, 53, 190, 61, 183, 11, 138, 62, 228, 204, 122, 62, 5, 18, 63, 62, 88, 83, 0, 191, 40, 6, 195, 61, 203, 135, 69, 188, 159, 81, 22, 190, 35, 179, 0, 62, 67, 16, 183, 60, 204, 69, 235, 190, 172, 166, 25, 62, 210, 199, 136, 61, 116, 150, 90, 189, 36, 184, 143, 61, 64, 180, 174, 61, 65, 239, 211, 61, 239, 113, 113, 190, 248, 241, 185, 61, 64, 80, 32, 62, 229, 247, 13, 190, 234, 110, 122, 62, 110, 60, 139, 62, 168, 55, 4, 190, 116, 220, 135, 62, 247, 201, 177, 188, 82, 115, 130, 62, 132, 59, 227, 60, 115, 228, 17, 62, 95, 129, 217, 189, 211, 182, 23, 190, 7, 89, 86, 189, 20, 240, 65, 189, 160, 216, 144, 190, 65, 84, 196, 61, 237, 115, 25, 191, 105, 164, 110, 191, 243, 255, 85, 188, 68, 57, 142, 189, 252, 224, 204, 62, 115, 93, 59, 189, 19, 85, 32, 63, 146, 214, 147, 190, 89, 59, 41, 61, 253, 18, 229, 188, 147, 17, 3, 62, 215, 141, 133, 62, 58, 86, 193, 185, 233, 47, 6, 63, 207, 126, 95, 62, 149, 98, 173, 61, 66, 140, 164, 62, 221, 216, 177, 189, 108, 244, 144, 61, 73, 27, 108, 62, 240, 47, 12, 190, 17, 214, 115, 189, 81, 246, 2, 190, 117, 33, 146, 62, 217, 183, 136, 60, 210, 15, 149, 190, 211, 31, 152, 190, 72, 30, 21, 191, 126, 87, 122, 61, 218, 152, 129, 190, 21, 88, 185, 190, 13, 191, 68, 190, 140, 20, 185, 190, 247, 225, 167, 191, 164, 183, 0, 62, 160, 183, 136, 61, 187, 133, 161, 62, 195, 79, 19, 62, 107, 187, 227, 190, 6, 76, 92, 62, 171, 191, 173, 59, 249, 186, 111, 61, 227, 3, 106, 62, 120, 37, 14, 62, 175, 215, 61, 60, 168, 82, 144, 62, 209, 128, 180, 62, 186, 163, 230, 188, 12, 92, 37, 191, 183, 88, 141, 190, 84, 131, 78, 61, 221, 254, 20, 189, 136, 104, 178, 190, 206, 237, 118, 62, 154, 34, 26, 62, 189, 77, 103, 62, 132, 165, 104, 62, 197, 84, 97, 190, 34, 167, 2, 191, 63, 127, 166, 190, 45, 132, 174, 60, 8, 19, 129, 191, 132, 82, 250, 190, 5, 75, 90, 190, 84, 249, 107, 189, 167, 101, 6, 190, 194, 72, 82, 189, 105, 15, 44, 62, 118, 100, 161, 60, 132, 92, 34, 62, 206, 91, 241, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 83, 19, 252, 189, 195, 102, 246, 189, 25, 27, 7, 190, 228, 21, 181, 188, 17, 63, 53, 61, 33, 89, 50, 190, 6, 208, 222, 189, 217, 237, 163, 61, 124, 209, 220, 61, 101, 160, 122, 59, 103, 213, 173, 189, 114, 38, 68, 188, 151, 233, 10, 190, 199, 75, 18, 61, 44, 159, 41, 189, 198, 112, 10, 62, 233, 249, 53, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 114, 161, 76, 191, 23, 222, 96, 189, 148, 248, 25, 62, 148, 172, 215, 62, 88, 69, 170, 61, 39, 118, 53, 62, 226, 253, 11, 62, 137, 110, 176, 61, 75, 35, 5, 189, 249, 24, 1, 62, 250, 149, 116, 62, 218, 203, 48, 62, 149, 22, 232, 62, 214, 168, 141, 62, 128, 42, 229, 61, 66, 163, 247, 189, 235, 2, 154, 190, 217, 174, 59, 62, 196, 239, 18, 189, 110, 29, 5, 191, 86, 245, 115, 188, 250, 84, 170, 189, 50, 60, 78, 62, 205, 4, 13, 60, 226, 61, 35, 190, 119, 73, 9, 191, 21, 254, 15, 191, 209, 215, 75, 62, 151, 57, 95, 191, 37, 191, 16, 191, 159, 55, 147, 190, 155, 50, 5, 190, 72, 132, 46, 191, 44, 214, 164, 61, 58, 49, 16, 62, 159, 178, 156, 62, 10, 1, 244, 188, 131, 173, 129, 190, 74, 89, 11, 191, 61, 42, 196, 61, 184, 18, 59, 61, 25, 18, 23, 62, 156, 200, 132, 60, 54, 9, 5, 60, 239, 108, 220, 62, 212, 213, 134, 60, 135, 27, 157, 61, 232, 254, 251, 189, 255, 204, 246, 190, 103, 67, 109, 62, 165, 116, 63, 62, 52, 140, 62, 191, 189, 245, 125, 62, 211, 2, 173, 60, 150, 102, 87, 62, 2, 159, 87, 190, 54, 168, 189, 190, 117, 149, 115, 190, 99, 80, 222, 190, 120, 180, 35, 62, 112, 17, 69, 191, 87, 200, 163, 190, 100, 250, 107, 190, 90, 218, 186, 190, 172, 241, 158, 62, 31, 45, 127, 62, 136, 144, 144, 62, 139, 229, 110, 191, 22, 219, 4, 188, 201, 137, 13, 191, 180, 229, 30, 190, 5, 83, 51, 62, 123, 237, 227, 187, 144, 122, 64, 189, 68, 152, 212, 61, 199, 46, 97, 62, 130, 143, 115, 190, 237, 3, 25, 190, 196, 117, 92, 61, 229, 211, 222, 190, 75, 252, 173, 62, 236, 204, 145, 62, 146, 46, 66, 190, 71, 190, 231, 61, 17, 248, 172, 62, 109, 140, 3, 62, 186, 7, 60, 190, 166, 248, 192, 62, 11, 113, 159, 189, 192, 45, 116, 190, 96, 209, 66, 62, 101, 195, 76, 62, 142, 60, 48, 61, 133, 63, 134, 190, 87, 114, 243, 189, 190, 84, 33, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 24, 14, 43, 190, 156, 143, 206, 190, 214, 99, 133, 190, 48, 134, 168, 190, 64, 69, 7, 189, 35, 191, 250, 189, 212, 159, 177, 190, 202, 101, 143, 61, 118, 2, 176, 62, 38, 98, 44, 190, 117, 9, 82, 188, 5, 198, 159, 190, 39, 70, 128, 190, 41, 210, 34, 60, 186, 42, 8, 191, 255, 90, 152, 190, 208, 193, 133, 190, 62, 147, 205, 60, 89, 21, 98, 61, 72, 56, 138, 189, 241, 102, 236, 61, 60, 227, 223, 61, 213, 194, 63, 62, 205, 44, 131, 189, 30, 135, 212, 61, 231, 32, 255, 188, 252, 166, 74, 190, 53, 193, 206, 62, 0, 111, 75, 62, 91, 75, 115, 190, 173, 16, 117, 61, 57, 174, 114, 190, 15, 87, 254, 189, 103, 224, 42, 62, 67, 232, 134, 190, 75, 62, 195, 190, 67, 168, 24, 62, 187, 30, 169, 189, 206, 26, 64, 190, 41, 84, 220, 61, 219, 86, 146, 59, 169, 218, 23, 191, 29, 161, 205, 61, 102, 195, 164, 62, 5, 228, 200, 188, 205, 22, 44, 61, 37, 229, 150, 189, 211, 221, 219, 61, 129, 25, 30, 62, 55, 128, 150, 190, 177, 235, 19, 61, 185, 93, 213, 61, 18, 111, 113, 189, 137, 144, 182, 189, 14, 247, 122, 62, 28, 43, 132, 61, 206, 120, 220, 188, 3, 183, 240, 189, 26, 109, 132, 61, 190, 158, 194, 61, 244, 231, 215, 60, 208, 45, 36, 62, 77, 2, 249, 188, 252, 170, 87, 61, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 6, 100, 232, 62, 121, 249, 225, 188, 113, 26, 98, 62, 220, 103, 40, 191, 202, 52, 28, 61, 249, 116, 203, 190, 119, 63, 73, 62, 107, 244, 0, 190, 180, 71, 136, 190, 86, 129, 1, 61, 156, 125, 137, 190, 69, 187, 140, 62, 122, 212, 131, 189, 90, 87, 143, 61, 42, 127, 233, 189, 208, 153, 142, 190, 193, 231, 131, 61, 167, 232, 105, 62, 45, 101, 62, 190, 232, 88, 44, 186, 125, 59, 85, 59, 153, 188, 164, 188, 35, 211, 93, 190, 122, 205, 113, 62, 178, 24, 56, 62, 153, 212, 191, 190, 216, 184, 42, 62, 138, 192, 129, 61, 223, 19, 177, 62, 50, 116, 31, 191, 106, 200, 191, 61, 156, 54, 79, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 23, 182, 50, 62, 205, 83, 139, 62, 41, 128, 78, 62, 95, 92, 100, 191, 177, 216, 42, 62, 79, 132, 157, 190, 14, 137, 94, 61, 207, 69, 31, 61, 165, 182, 113, 62, 28, 98, 82, 190, 71, 55, 97, 61, 60, 96, 178, 62, 44, 172, 137, 62, 217, 45, 185, 62, 1, 219, 125, 62, 73, 188, 9, 62, 57, 67, 7, 61, 62, 45, 38, 60, 42, 245, 209, 188, 51, 22, 82, 62, 148, 191, 159, 189, 253, 24, 16, 190, 181, 137, 138, 190, 91, 97, 158, 188, 93, 252, 102, 191, 248, 161, 83, 190, 54, 184, 247, 60, 133, 107, 55, 189, 175, 96, 74, 189, 68, 254, 35, 62, 105, 242, 184, 61, 40, 125, 31, 188, 86, 108, 51, 190, 182, 148, 163, 190, 58, 24, 41, 190, 191, 115, 197, 62, 99, 108, 208, 61, 165, 57, 104, 62, 86, 91, 164, 60, 136, 116, 48, 190, 171, 5, 26, 62, 226, 245, 35, 62, 81, 185, 135, 62, 180, 51, 25, 190, 172, 157, 198, 62, 249, 195, 229, 61, 3, 24, 129, 62, 240, 37, 153, 62, 82, 4, 30, 61, 105, 7, 51, 62, 75, 65, 207, 189, 205, 248, 151, 188, 250, 142, 140, 60, 105, 85, 39, 189, 90, 134, 30, 190, 216, 229, 153, 61, 60, 226, 211, 190, 27, 143, 21, 62, 74, 219, 151, 190, 177, 171, 204, 190, 228, 246, 162, 189, 15, 118, 116, 61, 33, 45, 62, 189, 39, 40, 93, 190, 77, 14, 84, 190, 32, 174, 81, 62, 46, 227, 91, 62, 4, 167, 150, 62, 179, 2, 31, 61, 174, 125, 13, 62, 25, 8, 32, 62, 233, 51, 51, 62, 59, 34, 161, 62, 108, 152, 82, 190, 242, 44, 72, 62, 81, 152, 29, 190, 219, 118, 141, 62, 15, 173, 51, 189, 133, 12, 139, 189, 77, 183, 49, 190, 160, 68, 65, 62, 224, 94, 187, 190, 11, 106, 33, 190, 115, 74, 219, 61, 7, 32, 138, 61, 183, 28, 228, 189, 239, 151, 231, 61, 25, 94, 113, 62, 211, 14, 51, 188, 120, 25, 154, 62, 128, 15, 161, 189, 50, 145, 255, 61, 94, 106, 12, 188, 200, 137, 153, 61, 161, 166, 181, 62, 19, 46, 168, 62, 208, 2, 111, 191, 210, 65, 27, 190, 172, 192, 165, 188, 89, 231, 240, 62, 222, 142, 72, 189, 53, 25, 217, 62, 115, 151, 210, 60, 114, 177, 218, 60, 31, 64, 58, 189, 167, 99, 101, 188, 142, 83, 40, 62, 64, 255, 218, 189, 113, 71, 118, 62, 224, 43, 225, 62, 152, 12, 222, 61, 6, 235, 221, 62, 118, 106, 133, 190, 34, 63, 33, 62, 16, 200, 162, 62, 207, 39, 166, 190, 159, 68, 2, 188, 201, 197, 75, 61, 155, 184, 7, 62, 157, 115, 43, 190, 83, 29, 45, 60, 126, 166, 131, 190, 249, 204, 136, 190, 7, 175, 73, 62, 226, 7, 23, 190, 10, 28, 251, 190, 248, 62, 6, 190, 153, 81, 167, 190, 73, 5, 146, 62, 9, 245, 22, 62, 158, 139, 18, 62, 226, 254, 6, 191, 7, 200, 239, 60, 146, 156, 201, 60, 32, 172, 0, 190, 244, 171, 255, 189, 104, 191, 225, 61, 200, 62, 240, 189, 21, 75, 24, 190, 160, 27, 94, 62, 8, 18, 146, 62, 229, 110, 236, 61, 40, 21, 154, 62, 150, 15, 132, 190, 103, 186, 150, 61, 75, 14, 207, 187, 220, 213, 165, 190, 224, 118, 65, 190, 228, 138, 242, 60, 188, 214, 20, 189, 123, 25, 208, 190, 214, 147, 170, 61, 123, 226, 4, 191, 54, 152, 151, 190, 69, 150, 65, 62, 166, 28, 142, 61, 40, 175, 133, 190, 15, 244, 121, 190, 234, 167, 70, 189, 159, 165, 156, 189, 197, 60, 254, 190, 209, 95, 80, 62, 197, 66, 145, 60, 106, 100, 218, 190, 185, 72, 4, 189, 140, 237, 64, 190, 129, 195, 102, 191, 238, 220, 22, 62, 172, 110, 186, 190, 197, 91, 164, 190, 148, 125, 245, 190, 73, 28, 104, 62, 200, 31, 71, 190, 25, 136, 47, 191, 175, 194, 14, 190, 117, 48, 61, 189, 57, 3, 10, 190, 24, 37, 7, 62, 9, 73, 93, 62, 60, 55, 140, 60, 83, 96, 128, 62, 12, 37, 59, 61, 136, 12, 92, 62, 20, 76, 129, 189, 95, 76, 140, 62, 68, 215, 183, 189, 194, 158, 43, 62, 72, 178, 11, 62, 116, 177, 194, 187, 1, 3, 143, 190, 0, 232, 147, 190, 80, 155, 179, 190, 157, 19, 179, 189, 20, 138, 108, 62, 255, 222, 152, 190, 120, 156, 3, 191, 77, 141, 162, 61, 39, 206, 139, 61, 94, 123, 54, 190, 221, 14, 187, 189, 95, 17, 39, 190, 151, 230, 226, 190, 70, 61, 166, 190, 82, 147, 173, 62, 76, 221, 45, 188, 71, 26, 131, 190, 116, 98, 95, 189, 110, 176, 16, 190, 163, 112, 93, 62, 227, 33, 216, 189, 129, 129, 95, 62, 132, 20, 54, 189, 111, 237, 183, 189, 163, 68, 26, 62, 47, 183, 55, 61, 229, 187, 54, 62, 135, 221, 39, 190, 130, 249, 8, 188, 50, 192, 220, 60, 212, 97, 153, 62, 203, 99, 236, 61, 21, 242, 179, 186, 243, 208, 182, 189, 49, 118, 53, 62, 229, 220, 212, 62, 5, 215, 83, 62, 234, 148, 104, 62, 234, 248, 103, 62, 102, 112, 35, 62, 135, 46, 208, 61, 82, 25, 248, 60, 136, 158, 34, 190, 143, 40, 128, 190, 177, 147, 177, 61, 45, 58, 150, 190, 163, 32, 2, 62, 255, 3, 142, 61, 193, 49, 22, 190, 70, 24, 24, 190, 70, 209, 67, 62, 180, 222, 133, 62, 210, 244, 57, 189, 248, 60, 226, 61, 24, 2, 146, 62, 7, 168, 25, 62, 67, 162, 52, 190, 243, 134, 17, 62, 50, 152, 30, 62, 102, 155, 59, 189, 71, 4, 82, 190, 81, 227, 198, 62, 149, 132, 169, 60, 232, 124, 18, 62, 214, 226, 127, 190, 0, 192, 30, 60, 120, 37, 12, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 208, 177, 4, 63, 224, 196, 48, 61, 113, 47, 194, 190, 81, 14, 76, 62, 69, 153, 144, 61, 36, 113, 192, 62, 13, 112, 54, 62, 17, 9, 15, 62, 139, 91, 143, 61, 255, 8, 114, 189, 41, 8, 156, 60, 231, 83, 102, 188, 168, 207, 155, 62, 230, 235, 91, 61, 238, 197, 125, 62, 170, 5, 4, 62, 238, 120, 12, 62, 180, 122, 149, 190, 149, 159, 20, 190, 198, 206, 108, 189, 228, 69, 197, 190, 101, 193, 112, 61, 226, 26, 158, 190, 192, 45, 129, 189, 228, 205, 215, 190, 42, 235, 224, 62, 190, 77, 130, 62, 177, 69, 22, 191, 138, 113, 34, 61, 161, 230, 220, 62, 91, 84, 158, 61, 55, 25, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 185, 229, 29, 190, 110, 225, 183, 62, 74, 149, 29, 62, 210, 199, 242, 61, 90, 184, 137, 189, 213, 146, 16, 189, 0, 175, 81, 62, 125, 192, 236, 61, 85, 52, 191, 61, 153, 43, 74, 60, 147, 170, 45, 62, 152, 109, 159, 189, 64, 141, 147, 60, 19, 223, 183, 187, 181, 123, 200, 62, 99, 67, 39, 188, 114, 114, 56, 62, 109, 154, 157, 189, 148, 134, 24, 190, 125, 126, 110, 62, 176, 0, 23, 190, 99, 132, 39, 189, 13, 59, 152, 190, 88, 178, 132, 62, 54, 245, 228, 60, 122, 70, 48, 60, 194, 231, 0, 62, 212, 236, 183, 58, 220, 176, 142, 62, 13, 55, 152, 60, 208, 139, 224, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 214, 195, 5, 63, 0, 54, 178, 189, 147, 8, 233, 61, 188, 28, 174, 190, 67, 248, 71, 191, 197, 188, 250, 189, 248, 67, 57, 63, 6, 124, 49, 191, 194, 38, 183, 61, 122, 158, 31, 63, 252, 26, 85, 63, 5, 13, 214, 188, 231, 51, 90, 63, 34, 44, 54, 63, 87, 219, 250, 190, 98, 86, 192, 60, 191, 21, 226, 62, 208, 81, 107, 189, 147, 40, 172, 61, 6, 38, 238, 190, 110, 79, 164, 61, 186, 95, 184, 190, 0, 129, 193, 62, 45, 82, 214, 62, 40, 186, 230, 62, 226, 214, 153, 189, 56, 209, 40, 63, 167, 27, 139, 189, 74, 182, 146, 190, 8, 220, 23, 190, 54, 10, 27, 63, 188, 156, 177, 61, 155, 83, 125, 189, 228, 49, 129, 190, 79, 136, 76, 61, 72, 171, 44, 190, 92, 84, 179, 61, 231, 22, 226, 60, 124, 89, 155, 61, 106, 2, 199, 60, 140, 198, 62, 190, 115, 211, 153, 61, 192, 133, 194, 189, 226, 135, 17, 190, 61, 71, 66, 62, 147, 171, 138, 190, 172, 54, 138, 190, 150, 71, 232, 60, 126, 86, 160, 61, 171, 228, 36, 190, 24, 91, 3, 190, 126, 7, 111, 62, 34, 48, 40, 190, 10, 56, 192, 60, 164, 180, 130, 61, 207, 191, 95, 61, 118, 172, 151, 62, 227, 17, 1, 63, 90, 209, 65, 190, 207, 218, 202, 190, 154, 173, 145, 189, 209, 27, 86, 61, 92, 203, 131, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 116, 187, 189, 38, 173, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {24, 130, 92, 191, 130, 239, 236, 188, 31, 218, 192, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {131, 112, 205, 63, 80, 71, 45, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}