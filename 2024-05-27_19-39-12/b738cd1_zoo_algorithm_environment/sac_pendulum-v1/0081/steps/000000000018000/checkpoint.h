// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 171, 25, 63, 10, 60, 161, 63, 44, 244, 28, 62, 143, 249, 129, 62, 150, 37, 69, 63, 146, 163, 143, 61, 29, 251, 207, 190, 102, 115, 164, 62, 16, 1, 226, 61, 232, 209, 34, 63, 47, 183, 76, 191, 206, 187, 143, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 248, 56, 47, 63, 250, 16, 189, 190, 50, 29, 171, 190, 255, 147, 111, 190, 0, 55, 232, 62, 232, 59, 166, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 90, 192, 146, 62, 39, 172, 191, 190, 254, 14, 102, 63, 48, 242, 131, 191, 36, 9, 93, 63, 32, 25, 175, 62, 59, 158, 87, 190, 174, 116, 167, 61, 28, 129, 72, 63, 159, 87, 8, 63, 249, 232, 255, 62, 79, 63, 211, 61, 216, 57, 157, 61, 155, 110, 32, 63, 187, 153, 2, 191, 203, 172, 91, 190, 21, 215, 133, 63, 155, 64, 100, 188, 143, 104, 1, 190, 184, 86, 131, 63, 168, 118, 11, 63, 181, 250, 207, 62, 244, 8, 219, 190, 171, 88, 11, 191, 92, 193, 207, 62, 214, 194, 135, 63, 100, 231, 84, 190, 207, 143, 54, 191, 176, 243, 195, 188, 36, 167, 148, 62, 89, 44, 42, 63, 142, 14, 47, 191, 87, 49, 4, 191, 212, 113, 34, 191, 4, 103, 126, 191, 231, 112, 254, 190, 93, 173, 240, 190, 44, 16, 185, 190, 232, 169, 194, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 194, 197, 55, 63, 99, 227, 180, 191, 20, 89, 102, 190, 115, 251, 51, 191, 240, 45, 192, 62, 164, 8, 246, 190, 91, 121, 170, 190, 200, 33, 216, 191, 149, 48, 181, 190, 234, 253, 103, 62, 171, 127, 214, 61, 123, 62, 97, 62, 169, 61, 117, 62, 162, 91, 166, 63, 137, 186, 203, 62, 159, 104, 192, 62, 29, 218, 137, 191, 16, 113, 130, 61, 224, 189, 158, 190, 211, 163, 234, 191, 25, 124, 218, 190, 117, 253, 33, 63, 45, 22, 198, 62, 51, 126, 158, 62, 186, 191, 7, 62, 158, 6, 13, 63, 59, 156, 8, 63, 14, 79, 115, 190, 66, 251, 209, 62, 163, 190, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 109, 225, 190, 161, 99, 11, 62, 187, 129, 147, 62, 104, 243, 196, 190, 106, 173, 9, 191, 144, 178, 51, 191, 100, 140, 92, 189, 92, 107, 229, 190, 127, 148, 174, 62, 242, 193, 0, 63, 222, 100, 130, 61, 66, 180, 108, 60, 81, 222, 163, 61, 109, 142, 48, 61, 170, 10, 130, 62, 2, 218, 39, 191, 84, 150, 40, 62, 12, 70, 90, 62, 114, 0, 82, 62, 32, 142, 26, 191, 129, 227, 30, 63, 253, 145, 179, 190, 169, 69, 159, 62, 97, 236, 196, 62, 24, 15, 134, 189, 165, 46, 82, 191, 93, 215, 236, 61, 21, 78, 129, 62, 183, 83, 5, 190, 151, 250, 83, 191, 198, 157, 125, 190, 237, 0, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 5, 228, 7, 191, 17, 197, 146, 190, 213, 70, 235, 61, 190, 245, 96, 189, 224, 42, 43, 62, 133, 173, 254, 58, 123, 47, 52, 190, 125, 243, 82, 61, 234, 27, 145, 61, 116, 54, 123, 62, 16, 10, 241, 61, 183, 56, 112, 190, 134, 10, 69, 190, 71, 53, 145, 62, 201, 187, 28, 62, 239, 176, 92, 190, 250, 218, 230, 191, 155, 58, 77, 62, 118, 195, 192, 189, 37, 81, 63, 191, 194, 47, 110, 62, 106, 185, 20, 189, 225, 153, 249, 61, 66, 62, 86, 62, 10, 238, 203, 57, 243, 34, 17, 190, 134, 158, 149, 190, 95, 218, 113, 190, 93, 90, 45, 191, 128, 145, 136, 190, 213, 16, 11, 190, 71, 70, 220, 190, 146, 13, 72, 62, 100, 185, 166, 61, 24, 211, 236, 61, 67, 204, 28, 191, 206, 73, 53, 61, 85, 43, 1, 189, 21, 71, 152, 189, 186, 113, 33, 62, 241, 188, 13, 191, 96, 131, 158, 60, 11, 22, 22, 191, 40, 86, 207, 60, 194, 80, 153, 189, 57, 9, 65, 62, 13, 45, 61, 62, 21, 122, 59, 189, 233, 165, 33, 62, 68, 108, 145, 190, 209, 247, 122, 62, 73, 146, 153, 189, 126, 217, 55, 62, 115, 90, 102, 61, 90, 201, 148, 62, 188, 167, 54, 62, 19, 176, 174, 60, 142, 247, 132, 61, 87, 103, 27, 61, 166, 42, 62, 62, 81, 139, 20, 60, 153, 234, 222, 190, 255, 72, 18, 191, 188, 101, 212, 188, 14, 132, 10, 191, 129, 242, 127, 189, 123, 205, 162, 190, 253, 103, 205, 60, 35, 67, 22, 61, 170, 236, 0, 190, 61, 199, 7, 61, 40, 199, 6, 190, 54, 131, 218, 60, 232, 118, 46, 189, 144, 28, 151, 61, 116, 118, 207, 187, 255, 173, 249, 189, 85, 141, 120, 190, 92, 125, 37, 190, 105, 50, 96, 190, 253, 164, 96, 62, 72, 115, 113, 190, 7, 80, 109, 62, 184, 241, 33, 61, 98, 83, 174, 187, 240, 238, 107, 60, 216, 191, 43, 188, 166, 149, 102, 190, 220, 87, 11, 189, 169, 60, 23, 62, 52, 116, 20, 190, 147, 146, 43, 60, 247, 59, 4, 62, 162, 228, 251, 60, 218, 75, 206, 61, 254, 97, 232, 59, 74, 118, 55, 62, 142, 110, 128, 62, 37, 152, 208, 61, 140, 247, 77, 191, 97, 220, 52, 61, 225, 186, 4, 191, 168, 109, 151, 60, 140, 219, 84, 61, 100, 207, 247, 61, 150, 199, 120, 190, 17, 59, 172, 189, 69, 104, 205, 62, 219, 80, 157, 190, 152, 128, 50, 61, 18, 214, 26, 190, 213, 21, 109, 190, 187, 57, 57, 62, 199, 168, 80, 62, 98, 229, 164, 189, 78, 38, 195, 62, 218, 194, 215, 62, 31, 55, 166, 61, 228, 37, 88, 61, 222, 19, 65, 62, 124, 25, 210, 188, 158, 32, 251, 189, 144, 119, 84, 62, 67, 125, 202, 61, 100, 57, 43, 62, 90, 44, 112, 62, 179, 145, 228, 61, 180, 112, 82, 190, 229, 93, 25, 191, 240, 210, 215, 189, 155, 80, 28, 62, 37, 124, 23, 62, 86, 188, 26, 190, 199, 202, 46, 190, 15, 44, 157, 190, 199, 149, 174, 61, 207, 202, 217, 62, 117, 249, 169, 62, 224, 113, 196, 62, 47, 34, 244, 188, 107, 197, 186, 189, 18, 90, 102, 191, 248, 36, 192, 187, 225, 205, 29, 190, 47, 57, 164, 61, 191, 138, 129, 62, 215, 183, 195, 60, 85, 174, 95, 190, 117, 185, 212, 189, 90, 44, 82, 61, 188, 36, 90, 62, 135, 158, 243, 190, 118, 166, 97, 189, 46, 123, 69, 62, 195, 239, 129, 189, 226, 94, 205, 62, 227, 152, 231, 190, 146, 228, 22, 63, 179, 105, 159, 60, 158, 170, 53, 190, 204, 65, 176, 189, 25, 112, 13, 189, 6, 21, 156, 189, 129, 23, 55, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 64, 126, 34, 61, 170, 170, 235, 61, 104, 57, 210, 189, 179, 18, 207, 189, 148, 217, 132, 61, 176, 255, 37, 190, 110, 214, 153, 189, 184, 103, 3, 190, 212, 21, 119, 61, 90, 15, 55, 190, 28, 43, 153, 189, 112, 26, 194, 61, 249, 38, 83, 190, 248, 66, 63, 189, 111, 205, 150, 60, 23, 49, 114, 189, 233, 198, 245, 189, 45, 194, 16, 62, 86, 252, 175, 60, 231, 243, 144, 61, 75, 141, 138, 189, 13, 252, 252, 61, 17, 245, 49, 190, 46, 98, 67, 189, 40, 183, 33, 191, 88, 54, 221, 189, 216, 89, 245, 61, 131, 51, 244, 62, 68, 15, 205, 61, 202, 164, 26, 63, 24, 179, 163, 190, 240, 111, 136, 60, 134, 118, 96, 190, 201, 37, 177, 61, 234, 225, 203, 62, 102, 242, 148, 61, 245, 226, 16, 62, 96, 43, 189, 62, 19, 106, 32, 189, 103, 103, 87, 63, 102, 81, 157, 190, 216, 4, 42, 62, 78, 228, 203, 62, 250, 128, 42, 191, 251, 226, 182, 188, 69, 122, 36, 190, 72, 179, 193, 62, 185, 176, 242, 189, 141, 112, 45, 191, 8, 179, 81, 191, 105, 180, 146, 190, 112, 245, 108, 61, 192, 146, 55, 191, 222, 215, 151, 191, 7, 100, 86, 190, 192, 123, 79, 191, 177, 12, 76, 63, 53, 2, 159, 62, 119, 66, 135, 61, 109, 246, 54, 191, 10, 25, 31, 61, 181, 185, 221, 190, 175, 51, 66, 62, 114, 189, 64, 61, 77, 190, 64, 191, 53, 204, 109, 191, 221, 103, 141, 191, 106, 107, 102, 62, 41, 39, 87, 190, 220, 63, 43, 61, 36, 98, 244, 190, 66, 108, 224, 190, 253, 150, 145, 61, 182, 64, 119, 61, 245, 253, 29, 190, 32, 202, 64, 62, 192, 8, 237, 61, 156, 50, 18, 190, 195, 105, 89, 190, 81, 252, 144, 62, 109, 148, 146, 62, 69, 119, 81, 62, 158, 10, 190, 62, 4, 65, 167, 190, 97, 76, 136, 62, 100, 97, 11, 190, 227, 31, 102, 62, 56, 209, 223, 61, 150, 38, 217, 190, 87, 56, 245, 60, 45, 119, 157, 61, 235, 61, 71, 190, 35, 179, 0, 62, 15, 120, 61, 62, 15, 3, 5, 191, 172, 166, 25, 62, 64, 87, 239, 60, 136, 126, 165, 59, 161, 181, 197, 61, 40, 88, 244, 59, 217, 217, 81, 62, 204, 100, 111, 61, 186, 6, 168, 61, 124, 148, 97, 62, 210, 244, 151, 189, 153, 248, 169, 62, 102, 131, 118, 62, 116, 97, 55, 190, 164, 148, 134, 62, 247, 201, 177, 188, 247, 150, 124, 62, 242, 125, 128, 189, 49, 181, 5, 62, 23, 29, 166, 190, 16, 149, 65, 190, 152, 155, 173, 189, 44, 154, 87, 189, 71, 242, 52, 191, 200, 13, 170, 61, 212, 247, 35, 191, 69, 148, 128, 191, 230, 118, 245, 189, 215, 131, 254, 189, 65, 226, 226, 62, 115, 93, 59, 189, 60, 65, 90, 63, 80, 98, 128, 190, 89, 59, 41, 61, 243, 44, 126, 189, 158, 201, 34, 62, 38, 130, 150, 62, 19, 65, 156, 189, 241, 13, 14, 63, 51, 125, 87, 62, 66, 55, 78, 60, 118, 184, 199, 62, 2, 188, 103, 189, 239, 206, 250, 61, 117, 116, 79, 62, 156, 219, 223, 189, 84, 252, 148, 189, 81, 246, 2, 190, 113, 90, 114, 62, 112, 219, 8, 61, 104, 26, 194, 190, 82, 28, 225, 190, 104, 109, 98, 191, 46, 249, 56, 60, 40, 152, 154, 190, 171, 170, 193, 190, 84, 220, 71, 190, 72, 63, 160, 190, 122, 233, 175, 191, 144, 55, 227, 60, 54, 171, 85, 62, 229, 48, 205, 61, 195, 79, 19, 62, 195, 23, 13, 191, 46, 224, 151, 62, 171, 191, 173, 59, 32, 42, 21, 62, 215, 36, 181, 62, 141, 238, 110, 62, 70, 232, 34, 188, 243, 244, 31, 62, 189, 82, 191, 62, 246, 232, 159, 60, 84, 229, 136, 191, 204, 123, 15, 191, 48, 105, 28, 62, 3, 144, 112, 190, 199, 56, 82, 190, 190, 188, 192, 62, 154, 34, 26, 62, 110, 160, 181, 62, 101, 48, 149, 62, 19, 146, 44, 190, 60, 3, 34, 191, 157, 109, 162, 190, 137, 121, 130, 188, 143, 71, 101, 191, 70, 185, 53, 191, 158, 196, 228, 189, 144, 1, 79, 61, 167, 101, 6, 190, 194, 72, 82, 189, 105, 15, 44, 62, 118, 100, 161, 60, 132, 92, 34, 62, 206, 91, 241, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 83, 19, 252, 189, 195, 102, 246, 189, 25, 27, 7, 190, 228, 21, 181, 188, 17, 63, 53, 61, 33, 89, 50, 190, 6, 208, 222, 189, 217, 237, 163, 61, 124, 209, 220, 61, 101, 160, 122, 59, 103, 213, 173, 189, 114, 38, 68, 188, 151, 233, 10, 190, 199, 75, 18, 61, 44, 159, 41, 189, 198, 112, 10, 62, 233, 249, 53, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 25, 128, 70, 191, 148, 72, 196, 189, 6, 100, 26, 62, 55, 9, 244, 62, 88, 69, 170, 61, 158, 224, 174, 62, 64, 16, 20, 61, 137, 110, 176, 61, 99, 13, 199, 189, 143, 5, 6, 62, 157, 40, 138, 62, 152, 157, 57, 62, 104, 163, 215, 62, 237, 180, 25, 62, 168, 91, 179, 186, 87, 141, 4, 190, 229, 181, 161, 190, 218, 217, 81, 62, 25, 40, 252, 188, 238, 17, 222, 190, 150, 121, 221, 59, 250, 84, 170, 189, 164, 244, 100, 62, 119, 146, 153, 189, 190, 74, 181, 190, 89, 58, 46, 191, 229, 67, 52, 191, 0, 24, 32, 62, 142, 114, 135, 191, 179, 76, 62, 191, 137, 253, 160, 190, 124, 42, 49, 190, 55, 209, 255, 190, 168, 128, 11, 62, 59, 186, 64, 62, 72, 126, 165, 62, 10, 1, 244, 188, 197, 13, 2, 62, 134, 48, 122, 191, 61, 42, 196, 61, 33, 148, 179, 187, 238, 242, 39, 62, 131, 114, 252, 59, 117, 12, 160, 61, 20, 246, 3, 63, 32, 199, 29, 61, 179, 125, 64, 61, 177, 152, 156, 62, 1, 247, 193, 190, 19, 67, 111, 62, 179, 177, 129, 62, 118, 94, 77, 191, 188, 15, 156, 62, 211, 2, 173, 60, 204, 11, 142, 62, 66, 189, 200, 190, 203, 128, 230, 190, 202, 71, 18, 191, 60, 197, 204, 190, 94, 54, 71, 62, 211, 158, 94, 191, 66, 98, 56, 191, 145, 62, 148, 190, 122, 63, 90, 191, 201, 100, 123, 62, 151, 130, 101, 62, 131, 81, 81, 62, 163, 75, 167, 191, 22, 219, 4, 188, 135, 163, 78, 191, 224, 105, 144, 189, 5, 83, 51, 62, 210, 103, 134, 59, 5, 184, 6, 190, 166, 216, 180, 61, 171, 182, 31, 62, 118, 188, 223, 189, 51, 203, 164, 189, 18, 191, 38, 61, 216, 85, 228, 190, 75, 225, 184, 62, 113, 100, 150, 62, 112, 167, 64, 190, 210, 153, 132, 61, 168, 239, 153, 62, 109, 140, 3, 62, 85, 199, 133, 190, 192, 247, 2, 63, 78, 64, 133, 190, 74, 179, 181, 188, 85, 160, 62, 62, 7, 196, 48, 62, 224, 192, 204, 189, 179, 86, 159, 189, 113, 209, 254, 189, 12, 79, 71, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 114, 141, 37, 191, 252, 142, 240, 190, 141, 66, 176, 190, 10, 41, 23, 191, 64, 69, 7, 189, 214, 153, 59, 190, 211, 52, 72, 191, 202, 101, 143, 61, 62, 231, 228, 62, 89, 101, 225, 190, 46, 114, 8, 189, 222, 169, 92, 190, 177, 43, 70, 191, 47, 190, 149, 59, 65, 77, 44, 191, 6, 34, 15, 191, 79, 39, 32, 191, 155, 178, 11, 187, 202, 130, 1, 190, 128, 171, 184, 190, 229, 2, 73, 62, 60, 227, 223, 61, 180, 230, 223, 62, 164, 17, 13, 191, 152, 134, 173, 61, 178, 255, 230, 190, 134, 33, 37, 191, 253, 135, 31, 63, 255, 81, 4, 62, 67, 179, 22, 191, 119, 171, 143, 189, 60, 227, 29, 191, 29, 221, 63, 190, 205, 65, 65, 62, 169, 211, 233, 190, 58, 234, 4, 191, 67, 168, 24, 62, 171, 58, 232, 189, 175, 26, 92, 190, 41, 84, 220, 61, 43, 247, 252, 61, 28, 166, 185, 191, 138, 213, 49, 62, 28, 117, 157, 62, 97, 99, 166, 60, 202, 69, 132, 62, 56, 179, 183, 188, 174, 11, 242, 61, 60, 54, 9, 62, 219, 183, 84, 190, 25, 244, 71, 61, 193, 51, 174, 61, 185, 46, 7, 189, 137, 144, 182, 189, 147, 65, 166, 62, 95, 46, 151, 61, 69, 78, 170, 60, 115, 154, 215, 190, 46, 207, 181, 61, 126, 243, 30, 62, 219, 181, 121, 61, 115, 24, 40, 62, 36, 50, 140, 61, 131, 238, 195, 60, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 165, 142, 180, 62, 165, 83, 36, 61, 168, 179, 106, 62, 26, 45, 48, 191, 202, 52, 28, 61, 32, 85, 53, 191, 88, 228, 14, 62, 107, 244, 0, 190, 239, 8, 242, 190, 171, 97, 107, 189, 123, 95, 82, 191, 106, 180, 151, 62, 104, 39, 102, 189, 135, 213, 49, 62, 143, 50, 47, 190, 15, 143, 183, 190, 151, 235, 134, 60, 234, 155, 195, 61, 61, 24, 5, 190, 201, 226, 24, 189, 190, 156, 32, 62, 153, 188, 164, 188, 3, 28, 218, 189, 151, 177, 149, 62, 34, 254, 167, 62, 34, 89, 147, 190, 157, 110, 112, 62, 255, 14, 183, 61, 235, 187, 233, 62, 40, 106, 162, 191, 156, 137, 201, 190, 139, 100, 16, 190, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 195, 4, 4, 62, 226, 50, 130, 62, 119, 175, 30, 62, 61, 80, 167, 191, 177, 216, 42, 62, 63, 85, 51, 191, 70, 15, 22, 62, 207, 69, 31, 61, 70, 12, 125, 62, 173, 90, 144, 190, 88, 41, 36, 61, 217, 20, 146, 62, 75, 71, 220, 62, 116, 6, 216, 62, 251, 88, 81, 62, 108, 56, 148, 61, 124, 8, 146, 61, 43, 190, 238, 60, 9, 71, 130, 60, 37, 128, 14, 62, 130, 5, 57, 189, 253, 24, 16, 190, 25, 163, 154, 190, 59, 64, 246, 61, 243, 197, 128, 191, 2, 171, 39, 61, 184, 45, 7, 61, 176, 193, 67, 189, 142, 4, 17, 190, 150, 163, 190, 62, 183, 234, 67, 61, 176, 198, 144, 60, 245, 65, 253, 190, 42, 148, 226, 190, 226, 209, 206, 189, 220, 110, 241, 62, 99, 108, 208, 61, 4, 51, 190, 62, 237, 230, 224, 61, 136, 116, 48, 190, 251, 77, 14, 62, 140, 103, 117, 62, 168, 206, 134, 62, 120, 225, 71, 190, 251, 83, 205, 62, 240, 34, 151, 61, 1, 171, 92, 62, 29, 223, 185, 62, 86, 190, 88, 61, 34, 54, 120, 62, 236, 254, 120, 189, 143, 187, 148, 61, 20, 202, 26, 62, 105, 85, 39, 189, 75, 250, 134, 189, 84, 243, 10, 62, 37, 59, 194, 190, 78, 151, 254, 189, 238, 198, 221, 190, 36, 232, 212, 190, 173, 168, 242, 188, 50, 1, 87, 190, 206, 40, 158, 189, 233, 194, 230, 189, 62, 241, 142, 189, 241, 186, 95, 62, 23, 174, 153, 62, 157, 161, 146, 62, 179, 2, 31, 61, 92, 208, 121, 62, 252, 188, 16, 62, 233, 51, 51, 62, 230, 247, 155, 62, 11, 70, 1, 190, 249, 60, 93, 62, 176, 134, 226, 189, 128, 164, 95, 62, 177, 68, 0, 61, 115, 255, 217, 188, 62, 223, 60, 190, 42, 119, 113, 62, 62, 217, 190, 190, 199, 41, 115, 190, 169, 49, 163, 61, 227, 94, 252, 60, 183, 28, 228, 189, 163, 54, 199, 60, 60, 105, 26, 62, 227, 166, 208, 189, 4, 186, 51, 61, 161, 216, 71, 189, 72, 162, 162, 61, 98, 214, 175, 189, 196, 6, 9, 190, 221, 201, 192, 62, 84, 206, 174, 62, 201, 52, 128, 191, 218, 126, 39, 190, 132, 250, 101, 189, 60, 17, 253, 62, 222, 142, 72, 189, 137, 87, 3, 63, 245, 97, 152, 60, 114, 177, 218, 60, 210, 120, 146, 189, 240, 208, 233, 58, 30, 129, 57, 62, 237, 203, 196, 189, 62, 157, 109, 62, 248, 102, 188, 62, 4, 167, 199, 188, 148, 81, 218, 62, 72, 245, 90, 190, 65, 210, 100, 62, 49, 184, 170, 62, 243, 169, 213, 190, 156, 239, 12, 60, 201, 197, 75, 61, 143, 119, 71, 62, 129, 46, 105, 190, 88, 204, 217, 189, 162, 83, 7, 191, 132, 212, 214, 190, 161, 226, 115, 62, 98, 25, 136, 190, 28, 127, 69, 191, 143, 85, 130, 190, 49, 236, 163, 190, 157, 52, 109, 62, 9, 177, 175, 61, 96, 153, 229, 61, 222, 161, 85, 191, 7, 200, 239, 60, 20, 92, 191, 190, 17, 161, 214, 188, 244, 171, 255, 189, 217, 20, 189, 61, 165, 237, 42, 190, 185, 42, 242, 189, 125, 249, 20, 62, 175, 188, 7, 63, 209, 59, 3, 62, 119, 240, 81, 62, 216, 84, 149, 190, 171, 187, 60, 62, 169, 34, 125, 61, 45, 69, 41, 190, 177, 80, 228, 190, 183, 254, 230, 187, 188, 214, 20, 189, 25, 220, 13, 191, 126, 96, 145, 62, 229, 222, 4, 191, 76, 119, 215, 188, 180, 214, 14, 62, 164, 250, 129, 188, 95, 15, 99, 190, 169, 158, 102, 188, 92, 13, 54, 189, 30, 248, 134, 188, 26, 99, 2, 191, 101, 227, 57, 62, 126, 214, 136, 189, 243, 64, 173, 190, 185, 72, 4, 189, 245, 216, 52, 61, 218, 186, 113, 191, 238, 220, 22, 62, 106, 213, 116, 190, 71, 76, 37, 191, 125, 112, 206, 189, 122, 106, 77, 62, 197, 77, 48, 189, 177, 76, 69, 191, 87, 53, 152, 190, 109, 6, 184, 61, 167, 100, 10, 189, 103, 184, 132, 62, 145, 171, 135, 62, 190, 141, 24, 188, 162, 144, 129, 62, 12, 37, 59, 61, 233, 200, 137, 62, 40, 30, 42, 190, 92, 48, 168, 62, 231, 103, 181, 189, 69, 162, 216, 61, 42, 81, 52, 62, 222, 75, 56, 61, 151, 10, 214, 190, 22, 178, 21, 191, 115, 3, 173, 190, 204, 131, 175, 189, 29, 145, 136, 62, 144, 6, 11, 191, 181, 151, 33, 191, 77, 141, 162, 61, 21, 1, 144, 61, 36, 116, 99, 190, 221, 14, 187, 189, 107, 56, 83, 61, 178, 64, 159, 191, 251, 80, 41, 190, 195, 216, 161, 62, 240, 30, 0, 61, 178, 101, 29, 189, 183, 63, 110, 188, 176, 248, 251, 189, 81, 230, 88, 62, 176, 199, 61, 61, 95, 92, 114, 62, 25, 8, 158, 189, 229, 197, 190, 189, 163, 68, 26, 62, 132, 204, 233, 61, 149, 151, 36, 62, 66, 237, 252, 189, 180, 134, 173, 189, 91, 77, 158, 61, 101, 214, 183, 62, 205, 170, 15, 62, 167, 251, 21, 62, 184, 58, 80, 61, 27, 172, 15, 62, 212, 2, 91, 62, 208, 164, 105, 62, 84, 220, 62, 62, 62, 54, 84, 62, 102, 112, 35, 62, 125, 139, 222, 188, 192, 24, 60, 60, 136, 158, 34, 190, 3, 167, 230, 190, 150, 224, 158, 188, 82, 34, 90, 191, 66, 204, 188, 61, 124, 226, 208, 61, 166, 185, 165, 189, 61, 11, 92, 190, 24, 179, 52, 62, 151, 89, 100, 62, 141, 206, 246, 189, 77, 67, 35, 62, 59, 1, 144, 62, 45, 84, 139, 62, 67, 162, 52, 190, 252, 34, 108, 62, 244, 104, 93, 62, 65, 128, 161, 61, 215, 70, 68, 190, 71, 107, 200, 62, 253, 48, 11, 61, 69, 85, 104, 62, 39, 130, 68, 191, 68, 183, 225, 190, 92, 57, 172, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 70, 189, 70, 63, 122, 109, 71, 62, 88, 164, 189, 190, 139, 59, 167, 62, 69, 153, 144, 61, 145, 5, 25, 63, 245, 35, 49, 62, 17, 9, 15, 62, 21, 16, 23, 62, 101, 80, 68, 188, 200, 237, 116, 61, 95, 247, 151, 62, 191, 17, 50, 62, 220, 228, 170, 61, 51, 97, 239, 62, 186, 196, 53, 62, 43, 95, 240, 61, 39, 138, 186, 190, 247, 204, 159, 190, 70, 228, 62, 61, 255, 163, 18, 191, 101, 193, 112, 61, 111, 70, 132, 191, 218, 56, 13, 190, 224, 164, 206, 190, 29, 186, 62, 62, 23, 213, 240, 62, 81, 43, 120, 191, 129, 130, 209, 61, 75, 64, 168, 62, 20, 122, 123, 62, 185, 210, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 28, 188, 212, 188, 74, 0, 187, 62, 40, 34, 18, 62, 22, 144, 221, 61, 54, 144, 87, 189, 3, 2, 148, 189, 206, 54, 122, 62, 219, 59, 233, 61, 169, 238, 148, 61, 234, 250, 125, 189, 183, 163, 97, 62, 152, 109, 159, 189, 234, 114, 112, 187, 73, 95, 91, 61, 71, 71, 182, 62, 99, 67, 39, 188, 164, 108, 163, 62, 91, 224, 4, 189, 148, 134, 24, 190, 140, 97, 170, 62, 176, 0, 23, 190, 242, 79, 32, 189, 166, 38, 112, 190, 19, 82, 133, 62, 228, 106, 80, 61, 33, 67, 129, 189, 143, 75, 251, 61, 156, 154, 10, 61, 42, 156, 175, 62, 13, 55, 152, 60, 133, 170, 247, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 202, 174, 46, 63, 233, 126, 28, 190, 155, 144, 208, 188, 163, 53, 112, 190, 149, 27, 89, 191, 49, 92, 249, 189, 149, 44, 88, 63, 18, 151, 138, 191, 1, 19, 62, 61, 113, 36, 86, 63, 198, 139, 134, 63, 5, 13, 214, 188, 118, 90, 90, 63, 99, 80, 67, 63, 75, 66, 221, 190, 98, 86, 192, 60, 0, 236, 129, 63, 48, 210, 249, 189, 147, 40, 172, 61, 205, 132, 55, 191, 110, 79, 164, 61, 50, 71, 213, 190, 185, 197, 203, 62, 88, 150, 168, 62, 72, 88, 238, 62, 30, 170, 29, 190, 173, 126, 32, 63, 91, 8, 8, 190, 1, 131, 169, 190, 8, 220, 23, 190, 78, 30, 114, 63, 188, 156, 177, 61, 203, 175, 50, 189, 14, 132, 155, 190, 199, 203, 234, 61, 79, 210, 98, 190, 13, 234, 95, 62, 253, 241, 225, 60, 203, 138, 196, 62, 211, 200, 47, 63, 218, 25, 127, 190, 200, 211, 101, 189, 45, 204, 152, 190, 226, 135, 17, 190, 119, 231, 9, 63, 234, 42, 99, 189, 56, 200, 255, 190, 150, 71, 232, 60, 253, 27, 125, 60, 159, 10, 155, 190, 24, 91, 3, 190, 145, 155, 139, 62, 34, 48, 40, 190, 116, 183, 141, 190, 63, 15, 81, 61, 224, 238, 107, 189, 140, 148, 4, 63, 175, 204, 11, 63, 229, 154, 116, 60, 143, 172, 213, 190, 3, 216, 246, 189, 209, 27, 86, 61, 216, 68, 19, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 253, 149, 189, 89, 127, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 248, 75, 190, 198, 192, 220, 191, 2, 137, 8, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 239, 253, 63, 175, 127, 186, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}