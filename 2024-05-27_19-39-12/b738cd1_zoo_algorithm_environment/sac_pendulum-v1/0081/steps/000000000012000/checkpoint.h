// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 93, 24, 63, 23, 247, 152, 63, 173, 40, 60, 62, 32, 223, 191, 62, 104, 250, 54, 63, 113, 205, 67, 61, 48, 75, 181, 190, 30, 166, 164, 62, 222, 92, 201, 61, 61, 28, 33, 63, 92, 2, 59, 191, 209, 55, 137, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 120, 187, 217, 62, 87, 63, 206, 190, 227, 73, 156, 190, 50, 196, 162, 190, 167, 24, 176, 62, 204, 64, 184, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 33, 47, 179, 61, 23, 136, 28, 191, 172, 125, 70, 63, 25, 110, 112, 191, 6, 228, 69, 63, 1, 65, 158, 62, 226, 82, 193, 190, 202, 250, 213, 59, 25, 127, 54, 63, 70, 225, 50, 63, 18, 58, 214, 62, 187, 189, 253, 61, 46, 115, 226, 61, 165, 49, 36, 63, 129, 171, 250, 190, 171, 188, 177, 189, 127, 51, 142, 63, 34, 251, 191, 60, 177, 138, 51, 60, 72, 144, 147, 63, 162, 71, 247, 62, 113, 32, 156, 62, 197, 74, 227, 190, 197, 85, 5, 191, 160, 148, 239, 62, 62, 16, 106, 63, 255, 241, 139, 190, 167, 31, 30, 191, 179, 235, 245, 189, 127, 60, 148, 62, 251, 209, 48, 63, 133, 11, 14, 191, 205, 226, 241, 190, 209, 21, 11, 191, 218, 108, 115, 191, 247, 251, 255, 190, 221, 37, 185, 190, 19, 44, 191, 190, 41, 159, 132, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 169, 75, 64, 63, 192, 234, 158, 191, 89, 217, 114, 190, 24, 196, 35, 191, 46, 185, 131, 62, 104, 46, 0, 191, 217, 34, 123, 190, 108, 41, 210, 191, 14, 102, 188, 190, 27, 88, 128, 62, 95, 241, 218, 61, 255, 219, 116, 62, 128, 42, 130, 62, 21, 107, 166, 63, 32, 194, 155, 62, 190, 32, 10, 63, 193, 169, 24, 191, 119, 60, 162, 188, 134, 14, 163, 190, 188, 225, 230, 191, 134, 224, 213, 190, 234, 178, 23, 63, 246, 248, 135, 62, 77, 53, 144, 62, 242, 115, 38, 62, 119, 145, 201, 62, 178, 17, 11, 63, 24, 137, 144, 190, 207, 227, 196, 62, 42, 84, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 195, 205, 190, 8, 123, 129, 62, 185, 245, 156, 62, 99, 229, 181, 190, 106, 173, 9, 191, 169, 233, 60, 191, 117, 66, 37, 190, 92, 107, 229, 190, 91, 126, 66, 62, 130, 113, 219, 62, 154, 114, 254, 188, 107, 155, 55, 62, 69, 13, 15, 62, 250, 74, 229, 61, 68, 59, 217, 62, 125, 186, 36, 191, 190, 108, 78, 62, 96, 27, 13, 62, 68, 48, 131, 62, 64, 95, 29, 191, 218, 211, 28, 63, 253, 145, 179, 190, 89, 74, 173, 62, 42, 10, 173, 62, 1, 25, 63, 188, 193, 156, 65, 191, 162, 250, 43, 62, 53, 147, 214, 62, 125, 68, 57, 190, 177, 67, 90, 191, 97, 88, 50, 190, 139, 214, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 69, 10, 157, 190, 155, 236, 29, 190, 125, 54, 210, 61, 222, 7, 95, 61, 224, 42, 43, 62, 133, 173, 254, 58, 247, 128, 129, 190, 125, 243, 82, 61, 186, 44, 180, 61, 112, 236, 131, 62, 45, 205, 18, 62, 33, 183, 237, 189, 126, 21, 85, 190, 63, 69, 185, 62, 175, 77, 83, 62, 239, 176, 92, 190, 186, 136, 224, 191, 48, 229, 62, 62, 175, 203, 75, 61, 208, 179, 101, 191, 27, 233, 201, 61, 106, 185, 20, 189, 69, 81, 58, 60, 205, 23, 87, 61, 76, 177, 60, 189, 225, 166, 143, 189, 123, 224, 84, 190, 12, 62, 68, 190, 195, 189, 58, 191, 171, 196, 37, 190, 130, 174, 190, 189, 175, 71, 221, 190, 20, 121, 3, 62, 179, 191, 94, 61, 148, 11, 117, 62, 224, 36, 7, 191, 206, 73, 53, 61, 180, 10, 170, 60, 18, 203, 22, 189, 186, 113, 33, 62, 232, 178, 215, 190, 93, 135, 37, 62, 1, 210, 160, 190, 163, 106, 204, 60, 238, 169, 202, 189, 89, 233, 149, 61, 119, 98, 10, 62, 55, 186, 182, 188, 109, 174, 25, 62, 19, 76, 109, 190, 218, 78, 114, 62, 80, 78, 137, 189, 9, 122, 71, 62, 115, 90, 102, 61, 57, 12, 144, 62, 97, 110, 87, 62, 244, 80, 133, 188, 142, 247, 132, 61, 152, 164, 175, 188, 72, 184, 73, 62, 198, 116, 214, 188, 164, 113, 40, 189, 209, 3, 198, 190, 100, 135, 195, 60, 175, 95, 196, 190, 101, 253, 151, 189, 243, 194, 104, 190, 212, 193, 139, 189, 35, 67, 22, 61, 121, 100, 216, 188, 202, 121, 100, 61, 40, 199, 6, 190, 123, 95, 174, 61, 110, 242, 23, 61, 155, 184, 49, 62, 248, 71, 65, 189, 207, 104, 141, 189, 56, 237, 70, 189, 139, 191, 109, 189, 41, 222, 31, 190, 223, 242, 79, 62, 16, 214, 23, 190, 205, 78, 46, 62, 238, 14, 131, 61, 175, 200, 205, 60, 240, 238, 107, 60, 133, 240, 184, 189, 133, 134, 82, 190, 236, 156, 5, 60, 139, 145, 21, 62, 201, 210, 152, 189, 228, 8, 196, 188, 179, 107, 43, 62, 34, 34, 142, 61, 12, 161, 73, 62, 176, 42, 28, 61, 63, 166, 52, 62, 217, 154, 132, 62, 241, 144, 46, 62, 71, 179, 55, 191, 97, 220, 52, 61, 190, 19, 198, 190, 144, 241, 59, 61, 140, 219, 84, 61, 250, 161, 12, 62, 5, 47, 70, 190, 10, 168, 168, 189, 174, 41, 220, 62, 96, 229, 164, 190, 10, 196, 5, 59, 170, 64, 21, 190, 142, 190, 48, 190, 219, 6, 100, 62, 235, 126, 55, 62, 151, 205, 185, 189, 40, 51, 218, 62, 86, 190, 225, 62, 31, 55, 166, 61, 250, 66, 5, 61, 48, 27, 88, 62, 219, 22, 3, 189, 57, 193, 43, 190, 76, 252, 97, 62, 154, 71, 154, 61, 230, 13, 40, 62, 111, 170, 91, 62, 238, 159, 12, 62, 123, 153, 35, 190, 7, 189, 49, 191, 143, 180, 13, 190, 37, 65, 23, 62, 4, 57, 243, 61, 86, 188, 26, 190, 80, 10, 15, 190, 244, 86, 9, 190, 199, 149, 174, 61, 33, 111, 184, 62, 185, 178, 157, 62, 233, 137, 161, 62, 10, 252, 116, 189, 75, 184, 10, 189, 188, 1, 117, 191, 254, 106, 186, 189, 200, 79, 221, 188, 119, 84, 15, 62, 204, 179, 123, 62, 126, 188, 9, 61, 178, 63, 181, 190, 188, 19, 34, 189, 90, 44, 82, 61, 182, 200, 83, 62, 26, 227, 80, 190, 209, 126, 91, 189, 58, 196, 11, 62, 11, 142, 1, 190, 66, 14, 186, 62, 39, 45, 231, 190, 200, 86, 224, 62, 254, 86, 161, 189, 69, 59, 193, 189, 204, 65, 176, 189, 236, 38, 121, 188, 6, 21, 156, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 122, 71, 146, 61, 170, 170, 235, 61, 247, 58, 145, 189, 46, 12, 142, 189, 148, 217, 132, 61, 176, 255, 37, 190, 26, 181, 49, 189, 184, 103, 3, 190, 212, 21, 119, 61, 90, 15, 55, 190, 171, 200, 98, 189, 112, 26, 194, 61, 95, 235, 70, 190, 248, 66, 63, 189, 214, 125, 77, 61, 23, 49, 114, 189, 233, 198, 245, 189, 45, 194, 16, 62, 190, 138, 50, 61, 107, 254, 209, 61, 75, 141, 138, 189, 181, 84, 7, 62, 226, 215, 18, 190, 46, 98, 67, 189, 59, 93, 28, 191, 59, 227, 245, 189, 116, 163, 5, 62, 250, 182, 199, 62, 68, 15, 205, 61, 189, 176, 0, 62, 117, 183, 172, 190, 240, 111, 136, 60, 119, 223, 71, 190, 67, 211, 227, 61, 58, 19, 221, 62, 226, 68, 65, 61, 170, 130, 233, 61, 156, 255, 246, 62, 89, 78, 70, 60, 35, 126, 3, 63, 184, 212, 173, 190, 167, 113, 82, 62, 158, 192, 180, 62, 79, 192, 202, 190, 64, 41, 75, 189, 69, 122, 36, 190, 57, 33, 162, 62, 171, 129, 63, 190, 141, 63, 21, 191, 165, 135, 59, 191, 41, 78, 135, 190, 77, 177, 104, 60, 70, 165, 25, 191, 40, 240, 140, 191, 207, 6, 49, 190, 56, 204, 98, 191, 188, 211, 1, 63, 215, 154, 132, 62, 8, 148, 136, 188, 131, 90, 17, 191, 10, 25, 31, 61, 34, 50, 158, 190, 63, 217, 83, 62, 114, 189, 64, 61, 133, 180, 151, 190, 143, 146, 83, 191, 212, 226, 49, 191, 124, 157, 116, 62, 212, 59, 98, 190, 112, 193, 184, 189, 85, 184, 23, 191, 95, 225, 200, 190, 126, 104, 156, 61, 9, 158, 165, 61, 11, 109, 240, 189, 104, 238, 69, 62, 229, 36, 233, 61, 156, 50, 18, 190, 4, 31, 198, 189, 184, 232, 143, 62, 86, 245, 75, 62, 69, 119, 81, 62, 163, 86, 15, 62, 220, 90, 18, 190, 5, 184, 58, 62, 11, 45, 158, 62, 185, 124, 38, 62, 29, 131, 14, 62, 247, 44, 1, 191, 114, 23, 101, 61, 29, 174, 42, 187, 192, 121, 11, 190, 35, 179, 0, 62, 75, 108, 193, 61, 62, 24, 215, 190, 172, 166, 25, 62, 13, 174, 134, 61, 198, 112, 156, 189, 173, 30, 101, 61, 124, 70, 116, 61, 67, 235, 19, 62, 105, 154, 3, 190, 119, 1, 144, 61, 160, 189, 82, 62, 101, 242, 0, 190, 227, 249, 118, 62, 30, 178, 140, 62, 112, 146, 137, 189, 148, 48, 160, 62, 247, 201, 177, 188, 66, 180, 153, 62, 51, 153, 16, 61, 24, 251, 63, 62, 228, 225, 168, 190, 34, 212, 72, 190, 174, 111, 132, 188, 245, 157, 9, 60, 233, 180, 15, 191, 2, 119, 135, 61, 193, 170, 18, 191, 253, 241, 131, 191, 129, 128, 187, 189, 146, 208, 187, 189, 115, 59, 195, 62, 115, 93, 59, 189, 22, 175, 60, 63, 30, 235, 146, 190, 89, 59, 41, 61, 220, 107, 34, 189, 4, 126, 48, 62, 35, 245, 133, 62, 196, 19, 6, 189, 6, 169, 255, 62, 161, 114, 21, 62, 178, 226, 100, 61, 2, 181, 176, 62, 120, 155, 231, 189, 145, 71, 230, 61, 235, 14, 58, 62, 71, 206, 200, 189, 146, 107, 152, 189, 81, 246, 2, 190, 147, 222, 106, 62, 44, 56, 112, 185, 46, 35, 189, 190, 190, 202, 227, 190, 93, 114, 60, 191, 238, 195, 144, 60, 25, 67, 150, 190, 255, 66, 243, 190, 183, 179, 112, 190, 67, 65, 178, 190, 2, 189, 175, 191, 22, 150, 24, 61, 29, 253, 112, 61, 115, 156, 144, 62, 195, 79, 19, 62, 214, 14, 251, 190, 73, 22, 123, 62, 171, 191, 173, 59, 12, 86, 156, 61, 111, 75, 102, 62, 182, 241, 35, 62, 23, 146, 10, 61, 119, 200, 58, 62, 52, 19, 149, 62, 26, 239, 143, 189, 215, 165, 118, 191, 220, 45, 215, 190, 168, 139, 104, 61, 45, 219, 161, 189, 38, 73, 134, 190, 219, 101, 120, 62, 154, 34, 26, 62, 159, 161, 129, 62, 240, 14, 56, 62, 250, 214, 140, 190, 95, 89, 43, 191, 100, 91, 222, 190, 232, 106, 106, 60, 198, 29, 131, 191, 178, 163, 53, 191, 53, 197, 65, 190, 0, 32, 53, 56, 167, 101, 6, 190, 194, 72, 82, 189, 105, 15, 44, 62, 118, 100, 161, 60, 132, 92, 34, 62, 206, 91, 241, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 83, 19, 252, 189, 195, 102, 246, 189, 25, 27, 7, 190, 228, 21, 181, 188, 17, 63, 53, 61, 33, 89, 50, 190, 6, 208, 222, 189, 217, 237, 163, 61, 124, 209, 220, 61, 101, 160, 122, 59, 103, 213, 173, 189, 114, 38, 68, 188, 151, 233, 10, 190, 199, 75, 18, 61, 44, 159, 41, 189, 198, 112, 10, 62, 233, 249, 53, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 114, 147, 57, 191, 93, 197, 48, 189, 129, 197, 11, 62, 248, 186, 227, 62, 88, 69, 170, 61, 36, 67, 143, 62, 17, 140, 168, 61, 137, 110, 176, 61, 109, 178, 152, 189, 30, 106, 220, 61, 71, 195, 127, 62, 216, 144, 99, 62, 11, 19, 233, 62, 211, 116, 90, 62, 44, 66, 129, 61, 198, 154, 193, 189, 0, 86, 136, 190, 148, 186, 79, 62, 141, 0, 155, 60, 243, 194, 155, 190, 6, 178, 208, 60, 250, 84, 170, 189, 184, 57, 109, 62, 82, 24, 75, 189, 181, 209, 121, 190, 189, 82, 39, 191, 211, 56, 31, 191, 52, 134, 83, 62, 138, 208, 114, 191, 180, 43, 61, 191, 77, 143, 172, 190, 247, 152, 248, 189, 81, 120, 3, 191, 98, 123, 250, 61, 147, 136, 53, 62, 163, 93, 151, 62, 10, 1, 244, 188, 64, 196, 131, 190, 28, 106, 73, 191, 61, 42, 196, 61, 2, 153, 166, 60, 82, 137, 46, 62, 67, 248, 7, 61, 89, 250, 99, 61, 119, 186, 0, 63, 126, 55, 239, 61, 75, 119, 158, 61, 130, 148, 89, 61, 232, 110, 209, 190, 93, 168, 130, 62, 52, 127, 108, 62, 128, 126, 61, 191, 128, 242, 139, 62, 211, 2, 173, 60, 24, 18, 109, 62, 16, 248, 183, 190, 25, 48, 235, 190, 63, 26, 233, 190, 20, 234, 204, 190, 95, 126, 24, 62, 253, 191, 101, 191, 223, 195, 25, 191, 34, 140, 129, 190, 71, 146, 51, 191, 155, 87, 101, 62, 252, 83, 101, 62, 65, 133, 133, 62, 146, 147, 148, 191, 22, 219, 4, 188, 115, 18, 52, 191, 221, 126, 252, 189, 5, 83, 51, 62, 17, 192, 51, 60, 209, 254, 166, 189, 141, 250, 173, 61, 216, 177, 48, 62, 49, 201, 72, 190, 7, 172, 49, 190, 23, 249, 249, 60, 15, 127, 228, 190, 253, 162, 181, 62, 238, 210, 133, 62, 59, 50, 104, 190, 134, 236, 102, 61, 192, 7, 152, 62, 109, 140, 3, 62, 217, 79, 138, 190, 145, 49, 237, 62, 69, 182, 102, 190, 225, 89, 137, 189, 190, 163, 56, 62, 128, 23, 26, 62, 52, 173, 133, 189, 15, 134, 208, 189, 84, 202, 214, 189, 202, 107, 39, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 192, 8, 1, 191, 36, 51, 243, 190, 185, 125, 145, 190, 41, 17, 7, 191, 64, 69, 7, 189, 184, 151, 166, 190, 20, 12, 19, 191, 202, 101, 143, 61, 54, 112, 217, 62, 179, 5, 180, 190, 214, 244, 194, 188, 249, 0, 144, 190, 65, 124, 3, 191, 47, 190, 149, 59, 214, 144, 36, 191, 181, 241, 237, 190, 58, 194, 20, 191, 64, 251, 0, 61, 2, 9, 160, 189, 80, 159, 66, 190, 68, 32, 113, 62, 60, 227, 223, 61, 177, 154, 181, 62, 128, 144, 202, 190, 147, 98, 76, 62, 60, 58, 215, 190, 85, 203, 4, 191, 175, 131, 15, 63, 150, 214, 121, 62, 60, 161, 253, 190, 135, 78, 86, 189, 239, 20, 208, 190, 152, 215, 125, 190, 18, 62, 43, 62, 170, 179, 109, 190, 86, 176, 206, 190, 67, 168, 24, 62, 138, 191, 149, 189, 207, 248, 59, 190, 41, 84, 220, 61, 137, 238, 0, 62, 235, 142, 133, 191, 87, 236, 26, 62, 175, 199, 153, 62, 15, 76, 104, 188, 187, 39, 16, 62, 3, 199, 221, 189, 11, 108, 7, 62, 195, 198, 11, 62, 229, 117, 154, 190, 43, 68, 57, 61, 29, 152, 158, 61, 208, 45, 22, 189, 137, 144, 182, 189, 243, 233, 160, 62, 187, 97, 191, 61, 135, 38, 158, 188, 35, 182, 229, 190, 240, 149, 238, 60, 127, 166, 30, 62, 250, 105, 194, 60, 31, 180, 255, 61, 218, 80, 70, 61, 31, 227, 100, 61, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 46, 119, 198, 62, 170, 205, 233, 60, 224, 22, 143, 62, 92, 38, 41, 191, 202, 52, 28, 61, 143, 175, 10, 191, 99, 22, 20, 62, 107, 244, 0, 190, 174, 29, 203, 190, 107, 152, 66, 61, 226, 150, 253, 190, 175, 30, 155, 62, 251, 21, 157, 189, 67, 8, 221, 61, 201, 42, 25, 190, 57, 99, 155, 190, 222, 50, 233, 60, 118, 225, 38, 62, 12, 185, 31, 190, 169, 102, 17, 189, 205, 227, 190, 61, 153, 188, 164, 188, 115, 191, 28, 190, 197, 94, 141, 62, 139, 152, 136, 62, 72, 145, 147, 190, 32, 58, 101, 62, 59, 147, 161, 61, 138, 158, 203, 62, 210, 136, 34, 191, 178, 136, 151, 189, 220, 37, 236, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 85, 158, 186, 61, 159, 24, 100, 62, 127, 95, 73, 62, 100, 147, 151, 191, 177, 216, 42, 62, 232, 89, 8, 191, 47, 154, 240, 61, 207, 69, 31, 61, 9, 130, 131, 62, 95, 84, 121, 190, 50, 240, 41, 61, 99, 96, 137, 62, 60, 43, 177, 62, 120, 209, 180, 62, 220, 204, 80, 62, 59, 120, 244, 61, 41, 251, 87, 61, 205, 239, 6, 188, 9, 79, 112, 189, 67, 11, 39, 62, 255, 97, 147, 189, 253, 24, 16, 190, 39, 73, 188, 190, 147, 67, 168, 61, 244, 26, 113, 191, 238, 71, 25, 188, 42, 123, 89, 60, 111, 252, 226, 189, 87, 51, 160, 189, 220, 136, 180, 62, 216, 207, 158, 61, 168, 225, 134, 60, 45, 223, 119, 190, 18, 69, 197, 190, 231, 105, 20, 190, 9, 58, 226, 62, 99, 108, 208, 61, 206, 238, 164, 62, 206, 99, 164, 61, 136, 116, 48, 190, 196, 243, 17, 62, 219, 135, 88, 62, 124, 73, 142, 62, 46, 13, 6, 190, 161, 156, 196, 62, 237, 41, 207, 61, 111, 171, 128, 62, 112, 127, 176, 62, 228, 47, 184, 60, 206, 5, 91, 62, 222, 24, 147, 189, 25, 253, 123, 61, 139, 188, 154, 61, 105, 85, 39, 189, 193, 3, 3, 190, 246, 187, 217, 61, 101, 201, 193, 190, 5, 186, 15, 189, 51, 3, 183, 190, 233, 12, 209, 190, 58, 182, 237, 188, 51, 207, 195, 189, 254, 193, 48, 189, 140, 46, 18, 190, 14, 253, 235, 189, 129, 102, 74, 62, 1, 224, 126, 62, 216, 182, 135, 62, 179, 2, 31, 61, 109, 189, 45, 62, 184, 109, 35, 62, 233, 51, 51, 62, 42, 32, 156, 62, 32, 185, 39, 190, 102, 76, 93, 62, 177, 50, 17, 190, 109, 165, 130, 62, 227, 32, 25, 61, 49, 50, 33, 189, 0, 146, 71, 190, 165, 2, 67, 62, 85, 14, 173, 190, 252, 184, 70, 190, 199, 5, 243, 61, 133, 75, 107, 61, 183, 28, 228, 189, 209, 89, 149, 61, 98, 185, 52, 62, 161, 128, 38, 189, 103, 74, 229, 61, 133, 201, 141, 189, 1, 61, 245, 61, 171, 1, 199, 188, 25, 96, 223, 189, 209, 27, 178, 62, 175, 206, 175, 62, 42, 154, 108, 191, 78, 179, 18, 190, 96, 70, 128, 188, 213, 199, 231, 62, 222, 142, 72, 189, 160, 195, 228, 62, 130, 233, 135, 60, 114, 177, 218, 60, 112, 246, 120, 189, 85, 9, 9, 60, 184, 199, 60, 62, 59, 156, 183, 189, 24, 6, 123, 62, 98, 34, 219, 62, 13, 53, 130, 61, 149, 126, 221, 62, 247, 183, 94, 190, 41, 83, 112, 62, 214, 131, 174, 62, 166, 169, 169, 190, 24, 195, 84, 61, 201, 197, 75, 61, 173, 144, 53, 62, 97, 105, 95, 190, 95, 45, 195, 187, 96, 184, 236, 190, 169, 227, 169, 190, 29, 153, 118, 62, 28, 19, 43, 190, 93, 25, 58, 191, 91, 218, 119, 190, 63, 112, 163, 190, 140, 150, 148, 62, 8, 48, 0, 62, 188, 29, 225, 61, 174, 227, 67, 191, 7, 200, 239, 60, 153, 144, 116, 190, 250, 32, 198, 189, 244, 171, 255, 189, 157, 48, 255, 61, 23, 103, 41, 190, 102, 36, 16, 190, 4, 237, 100, 62, 137, 3, 187, 62, 225, 217, 141, 61, 92, 23, 136, 62, 122, 245, 130, 190, 190, 238, 9, 62, 183, 170, 100, 59, 83, 49, 156, 190, 2, 124, 221, 190, 125, 65, 138, 188, 188, 214, 20, 189, 0, 113, 16, 191, 46, 169, 65, 62, 24, 214, 49, 191, 71, 154, 207, 189, 68, 109, 50, 62, 159, 66, 12, 60, 196, 204, 229, 190, 36, 73, 12, 189, 158, 204, 0, 189, 111, 168, 120, 189, 130, 64, 235, 190, 204, 168, 84, 62, 45, 253, 5, 189, 188, 165, 199, 190, 185, 72, 4, 189, 151, 29, 248, 189, 139, 134, 107, 191, 238, 220, 22, 62, 161, 244, 57, 190, 6, 228, 20, 191, 161, 155, 56, 190, 195, 225, 93, 62, 210, 173, 30, 189, 253, 40, 16, 191, 176, 44, 97, 190, 2, 61, 166, 60, 37, 78, 7, 189, 39, 184, 151, 62, 42, 51, 132, 62, 57, 23, 185, 60, 11, 25, 149, 62, 12, 37, 59, 61, 92, 58, 134, 62, 190, 140, 7, 190, 52, 254, 178, 62, 231, 103, 181, 189, 46, 26, 33, 62, 15, 38, 43, 62, 45, 168, 134, 61, 96, 187, 221, 190, 162, 88, 2, 191, 67, 32, 170, 190, 182, 56, 47, 190, 11, 184, 107, 62, 78, 227, 153, 190, 37, 247, 6, 191, 77, 141, 162, 61, 19, 121, 194, 61, 4, 90, 63, 190, 221, 14, 187, 189, 212, 151, 182, 61, 190, 68, 74, 191, 126, 247, 3, 190, 57, 195, 152, 62, 187, 34, 1, 188, 55, 95, 44, 190, 101, 155, 195, 189, 245, 163, 231, 189, 175, 200, 76, 62, 150, 210, 9, 60, 77, 210, 102, 62, 65, 134, 155, 189, 36, 142, 174, 189, 163, 68, 26, 62, 39, 97, 210, 61, 250, 221, 62, 62, 152, 204, 26, 190, 35, 40, 203, 188, 235, 165, 226, 59, 223, 204, 187, 62, 156, 70, 235, 61, 217, 69, 30, 62, 230, 53, 149, 61, 215, 108, 50, 62, 153, 61, 147, 62, 48, 252, 121, 62, 65, 3, 152, 62, 96, 5, 126, 62, 102, 112, 35, 62, 28, 120, 116, 61, 59, 231, 110, 60, 136, 158, 34, 190, 254, 225, 172, 190, 208, 240, 6, 62, 102, 168, 1, 191, 65, 140, 251, 61, 186, 5, 164, 61, 246, 202, 249, 189, 2, 89, 54, 190, 56, 238, 78, 62, 19, 15, 124, 62, 201, 255, 182, 189, 146, 54, 10, 62, 200, 152, 132, 62, 150, 9, 108, 62, 67, 162, 52, 190, 3, 65, 70, 62, 226, 101, 84, 62, 6, 187, 190, 60, 244, 180, 70, 190, 11, 24, 212, 62, 33, 14, 244, 60, 94, 28, 48, 62, 161, 251, 95, 190, 212, 201, 251, 189, 12, 155, 131, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 246, 239, 38, 63, 159, 190, 217, 61, 147, 110, 192, 190, 195, 67, 117, 62, 69, 153, 144, 61, 156, 154, 5, 63, 228, 240, 94, 62, 17, 9, 15, 62, 252, 100, 187, 61, 208, 97, 219, 188, 205, 43, 35, 61, 238, 189, 1, 62, 49, 129, 135, 62, 148, 119, 213, 61, 176, 203, 192, 62, 220, 75, 43, 62, 213, 41, 227, 61, 208, 67, 154, 190, 189, 213, 70, 190, 105, 83, 19, 61, 3, 241, 250, 190, 101, 193, 112, 61, 45, 168, 3, 191, 241, 52, 167, 189, 122, 93, 214, 190, 211, 86, 129, 62, 114, 97, 187, 62, 147, 65, 27, 191, 233, 89, 160, 61, 234, 126, 160, 62, 125, 225, 39, 62, 186, 169, 60, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 2, 3, 68, 189, 175, 105, 183, 62, 249, 156, 250, 61, 153, 175, 247, 61, 127, 252, 103, 189, 75, 239, 37, 189, 31, 50, 97, 62, 219, 186, 236, 61, 79, 152, 230, 61, 102, 59, 24, 189, 91, 159, 24, 62, 152, 109, 159, 189, 150, 153, 46, 61, 226, 119, 223, 60, 131, 143, 180, 62, 99, 67, 39, 188, 64, 214, 141, 62, 27, 11, 70, 189, 148, 134, 24, 190, 217, 220, 153, 62, 176, 0, 23, 190, 178, 84, 166, 189, 87, 140, 137, 190, 172, 231, 131, 62, 215, 163, 136, 61, 13, 132, 36, 189, 197, 204, 15, 62, 197, 224, 101, 60, 201, 217, 173, 62, 13, 55, 152, 60, 239, 196, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 140, 166, 34, 63, 37, 183, 8, 190, 126, 222, 212, 59, 174, 183, 157, 190, 45, 164, 95, 191, 23, 164, 250, 189, 235, 186, 91, 63, 44, 14, 67, 191, 21, 100, 183, 61, 174, 104, 54, 63, 129, 35, 114, 63, 5, 13, 214, 188, 112, 37, 98, 63, 14, 6, 73, 63, 66, 87, 254, 190, 98, 86, 192, 60, 145, 15, 86, 63, 97, 120, 180, 189, 147, 40, 172, 61, 66, 137, 26, 191, 110, 79, 164, 61, 135, 252, 219, 190, 59, 206, 191, 62, 196, 157, 190, 62, 129, 230, 250, 62, 74, 163, 89, 190, 98, 57, 43, 63, 23, 216, 222, 189, 37, 235, 164, 190, 8, 220, 23, 190, 183, 185, 62, 63, 188, 156, 177, 61, 231, 28, 62, 189, 99, 154, 121, 190, 155, 8, 232, 60, 34, 31, 24, 190, 204, 38, 152, 61, 9, 255, 225, 60, 139, 192, 99, 62, 196, 85, 39, 62, 156, 68, 89, 190, 148, 107, 166, 61, 130, 160, 67, 190, 226, 135, 17, 190, 33, 220, 119, 62, 144, 8, 68, 190, 120, 211, 171, 190, 150, 71, 232, 60, 247, 88, 170, 61, 8, 147, 116, 190, 24, 91, 3, 190, 26, 102, 119, 62, 34, 48, 40, 190, 12, 168, 230, 189, 30, 93, 61, 61, 167, 43, 174, 187, 145, 40, 190, 62, 214, 38, 1, 63, 125, 74, 184, 187, 32, 44, 186, 190, 47, 125, 170, 189, 209, 27, 86, 61, 229, 84, 59, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 53, 177, 189, 50, 80, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {247, 15, 142, 191, 152, 18, 19, 190, 79, 237, 36, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 84, 20, 192, 70, 143, 112, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}