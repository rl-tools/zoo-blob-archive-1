// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 152, 23, 63, 80, 214, 159, 63, 163, 65, 72, 62, 87, 160, 178, 62, 175, 26, 60, 63, 28, 180, 149, 61, 221, 179, 201, 190, 97, 126, 161, 62, 52, 134, 220, 61, 216, 232, 29, 63, 87, 181, 69, 191, 245, 126, 142, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 227, 219, 233, 62, 171, 190, 196, 190, 112, 206, 161, 190, 119, 148, 134, 190, 107, 137, 229, 62, 235, 230, 175, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 62, 74, 95, 62, 117, 149, 242, 190, 68, 44, 86, 63, 137, 253, 97, 191, 164, 75, 82, 63, 46, 138, 160, 62, 8, 7, 86, 190, 11, 120, 90, 61, 235, 145, 60, 63, 127, 72, 32, 63, 79, 81, 227, 62, 155, 71, 219, 61, 148, 213, 229, 61, 155, 186, 33, 63, 183, 146, 255, 190, 197, 85, 212, 189, 82, 148, 136, 63, 56, 8, 79, 60, 64, 101, 37, 60, 180, 248, 143, 63, 10, 105, 4, 63, 230, 195, 118, 62, 86, 237, 230, 190, 3, 0, 6, 191, 171, 51, 227, 62, 116, 34, 122, 63, 146, 246, 119, 190, 10, 208, 32, 191, 35, 212, 221, 189, 18, 221, 152, 62, 52, 230, 46, 63, 169, 111, 27, 191, 158, 205, 0, 191, 109, 250, 11, 191, 128, 106, 126, 191, 138, 9, 238, 190, 94, 109, 216, 190, 69, 80, 195, 190, 40, 26, 153, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 184, 206, 59, 63, 134, 240, 169, 191, 122, 238, 109, 190, 181, 73, 45, 191, 102, 74, 172, 62, 102, 214, 247, 190, 160, 123, 132, 190, 124, 116, 212, 191, 104, 45, 194, 190, 212, 147, 90, 62, 41, 130, 201, 61, 237, 177, 116, 62, 42, 70, 121, 62, 23, 234, 169, 63, 158, 82, 167, 62, 132, 54, 230, 62, 180, 235, 88, 191, 38, 150, 214, 186, 85, 12, 141, 190, 203, 103, 232, 191, 3, 161, 216, 190, 34, 127, 37, 63, 139, 25, 152, 62, 12, 183, 156, 62, 34, 83, 66, 62, 213, 113, 254, 62, 241, 204, 9, 63, 158, 251, 93, 190, 148, 184, 222, 62, 27, 12, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 117, 206, 190, 131, 124, 101, 62, 146, 129, 153, 62, 56, 1, 195, 190, 106, 173, 9, 191, 128, 32, 68, 191, 195, 237, 190, 189, 92, 107, 229, 190, 224, 119, 134, 62, 111, 126, 2, 63, 79, 152, 6, 61, 12, 64, 4, 62, 71, 29, 253, 61, 231, 73, 6, 62, 106, 250, 197, 62, 162, 252, 53, 191, 130, 162, 82, 62, 77, 185, 47, 62, 130, 165, 119, 62, 105, 110, 36, 191, 63, 92, 31, 63, 253, 145, 179, 190, 201, 57, 171, 62, 194, 99, 180, 62, 9, 18, 34, 188, 101, 196, 72, 191, 226, 175, 27, 62, 55, 255, 165, 62, 121, 147, 31, 190, 180, 123, 81, 191, 212, 33, 41, 190, 26, 173, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 129, 105, 202, 190, 78, 65, 120, 190, 67, 160, 175, 61, 124, 33, 158, 59, 224, 42, 43, 62, 133, 173, 254, 58, 227, 107, 142, 190, 125, 243, 82, 61, 150, 147, 200, 61, 179, 137, 112, 62, 154, 143, 18, 62, 57, 81, 7, 190, 238, 124, 123, 190, 47, 94, 137, 62, 116, 56, 58, 62, 239, 176, 92, 190, 90, 35, 239, 191, 90, 248, 67, 62, 100, 44, 116, 188, 208, 179, 101, 191, 129, 108, 6, 62, 106, 185, 20, 189, 1, 7, 139, 61, 127, 209, 67, 60, 92, 166, 83, 189, 206, 32, 176, 189, 31, 21, 130, 190, 3, 150, 61, 190, 237, 46, 61, 191, 1, 140, 59, 190, 37, 38, 204, 189, 36, 74, 220, 190, 119, 251, 19, 62, 30, 245, 94, 61, 93, 206, 89, 62, 116, 83, 19, 191, 206, 73, 53, 61, 248, 248, 157, 60, 120, 156, 41, 189, 186, 113, 33, 62, 42, 188, 1, 191, 73, 116, 2, 62, 72, 221, 209, 190, 189, 240, 66, 60, 145, 182, 174, 189, 130, 12, 4, 62, 189, 220, 14, 62, 202, 96, 165, 188, 125, 71, 26, 62, 212, 75, 101, 190, 107, 103, 117, 62, 190, 159, 166, 189, 130, 76, 54, 62, 115, 90, 102, 61, 34, 190, 141, 62, 8, 209, 84, 62, 240, 206, 38, 188, 142, 247, 132, 61, 28, 167, 43, 188, 88, 255, 69, 62, 221, 187, 166, 188, 157, 219, 56, 190, 135, 169, 248, 190, 155, 22, 116, 60, 54, 62, 251, 190, 161, 4, 153, 189, 219, 178, 118, 190, 53, 6, 225, 188, 35, 67, 22, 61, 60, 74, 125, 189, 135, 245, 81, 61, 40, 199, 6, 190, 128, 210, 143, 61, 79, 76, 253, 60, 196, 246, 23, 62, 240, 144, 13, 189, 183, 200, 164, 189, 67, 56, 22, 190, 72, 140, 193, 189, 103, 102, 57, 190, 81, 217, 90, 62, 141, 22, 37, 190, 138, 62, 73, 62, 153, 207, 70, 61, 243, 230, 164, 60, 240, 238, 107, 60, 71, 231, 71, 189, 195, 188, 88, 190, 104, 223, 8, 189, 207, 3, 45, 62, 124, 22, 224, 189, 20, 121, 87, 58, 248, 69, 6, 62, 124, 25, 117, 61, 161, 241, 44, 62, 110, 251, 250, 60, 118, 221, 47, 62, 182, 27, 133, 62, 175, 21, 29, 62, 10, 114, 66, 191, 97, 220, 52, 61, 102, 242, 224, 190, 102, 223, 94, 61, 140, 219, 84, 61, 207, 246, 12, 62, 52, 41, 86, 190, 227, 85, 166, 189, 171, 233, 213, 62, 200, 157, 154, 190, 8, 202, 35, 61, 218, 108, 28, 190, 124, 86, 62, 190, 177, 30, 90, 62, 184, 52, 67, 62, 139, 182, 154, 189, 244, 158, 204, 62, 73, 126, 226, 62, 31, 55, 166, 61, 57, 71, 63, 61, 53, 105, 102, 62, 150, 183, 57, 189, 44, 80, 0, 190, 165, 176, 89, 62, 185, 117, 184, 61, 163, 142, 25, 62, 113, 225, 118, 62, 102, 19, 1, 62, 80, 37, 34, 190, 3, 165, 37, 191, 19, 5, 254, 189, 161, 50, 3, 62, 5, 73, 235, 61, 86, 188, 26, 190, 93, 222, 84, 190, 87, 161, 47, 190, 199, 149, 174, 61, 41, 247, 194, 62, 240, 121, 150, 62, 142, 9, 171, 62, 238, 23, 63, 189, 104, 155, 148, 189, 137, 205, 118, 191, 234, 123, 140, 189, 28, 144, 212, 189, 82, 178, 222, 61, 40, 55, 104, 62, 136, 15, 150, 60, 31, 114, 190, 190, 89, 81, 168, 189, 90, 44, 82, 61, 47, 59, 78, 62, 142, 65, 122, 190, 184, 225, 127, 189, 148, 161, 55, 62, 62, 33, 219, 189, 82, 6, 191, 62, 248, 35, 236, 190, 209, 225, 5, 63, 81, 202, 43, 189, 86, 42, 39, 190, 204, 65, 176, 189, 236, 38, 121, 188, 6, 21, 156, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 122, 71, 146, 61, 170, 170, 235, 61, 247, 58, 145, 189, 46, 12, 142, 189, 148, 217, 132, 61, 176, 255, 37, 190, 26, 181, 49, 189, 184, 103, 3, 190, 212, 21, 119, 61, 90, 15, 55, 190, 171, 200, 98, 189, 112, 26, 194, 61, 95, 235, 70, 190, 248, 66, 63, 189, 214, 125, 77, 61, 23, 49, 114, 189, 233, 198, 245, 189, 45, 194, 16, 62, 190, 138, 50, 61, 107, 254, 209, 61, 75, 141, 138, 189, 181, 84, 7, 62, 226, 215, 18, 190, 46, 98, 67, 189, 176, 54, 33, 191, 86, 100, 252, 189, 100, 75, 3, 62, 162, 243, 223, 62, 68, 15, 205, 61, 21, 218, 144, 62, 151, 206, 213, 190, 240, 111, 136, 60, 95, 254, 89, 190, 81, 20, 219, 61, 179, 117, 216, 62, 61, 241, 92, 61, 10, 235, 231, 61, 59, 219, 210, 62, 161, 242, 20, 188, 133, 1, 23, 63, 122, 4, 173, 190, 137, 147, 71, 62, 102, 120, 189, 62, 47, 183, 217, 190, 212, 210, 82, 189, 69, 122, 36, 190, 127, 75, 176, 62, 27, 117, 129, 190, 87, 56, 30, 191, 12, 222, 71, 191, 92, 100, 141, 190, 100, 31, 173, 60, 64, 247, 36, 191, 68, 71, 147, 191, 82, 81, 61, 190, 219, 178, 110, 191, 171, 87, 36, 63, 82, 11, 139, 62, 65, 168, 188, 60, 19, 96, 33, 191, 10, 25, 31, 61, 132, 154, 203, 190, 157, 230, 50, 62, 114, 189, 64, 61, 81, 25, 217, 190, 198, 87, 106, 191, 55, 71, 47, 191, 155, 62, 123, 62, 232, 74, 114, 190, 55, 179, 100, 189, 140, 236, 24, 191, 201, 113, 224, 190, 13, 113, 116, 61, 100, 70, 141, 59, 19, 235, 17, 190, 202, 124, 34, 62, 217, 234, 188, 61, 156, 50, 18, 190, 168, 247, 9, 190, 230, 234, 131, 62, 165, 154, 76, 62, 69, 119, 81, 62, 169, 27, 104, 62, 132, 154, 44, 190, 40, 222, 59, 62, 194, 215, 156, 62, 191, 212, 62, 62, 183, 192, 210, 61, 26, 207, 226, 190, 192, 154, 38, 61, 94, 81, 125, 60, 128, 84, 46, 190, 35, 179, 0, 62, 162, 45, 240, 61, 76, 107, 236, 190, 172, 166, 25, 62, 112, 157, 127, 61, 162, 242, 72, 189, 162, 47, 165, 61, 239, 200, 45, 61, 198, 249, 46, 62, 53, 144, 34, 189, 247, 237, 171, 61, 148, 131, 92, 62, 60, 35, 204, 189, 120, 25, 148, 62, 231, 83, 134, 62, 2, 27, 194, 189, 77, 40, 158, 62, 247, 201, 177, 188, 39, 22, 144, 62, 101, 91, 236, 187, 168, 119, 66, 62, 22, 134, 175, 190, 227, 69, 63, 190, 123, 114, 23, 189, 217, 24, 212, 59, 65, 137, 40, 191, 205, 40, 162, 61, 236, 193, 25, 191, 222, 150, 131, 191, 142, 170, 186, 189, 73, 66, 6, 190, 224, 68, 199, 62, 115, 93, 59, 189, 8, 232, 70, 63, 234, 133, 135, 190, 89, 59, 41, 61, 154, 154, 23, 189, 31, 3, 21, 62, 57, 89, 138, 62, 97, 184, 249, 188, 230, 21, 8, 63, 217, 195, 54, 62, 159, 47, 22, 61, 3, 7, 188, 62, 173, 61, 164, 189, 27, 88, 218, 61, 217, 95, 67, 62, 176, 232, 193, 189, 143, 82, 154, 189, 81, 246, 2, 190, 136, 126, 106, 62, 209, 27, 171, 60, 98, 194, 197, 190, 54, 42, 233, 190, 56, 150, 73, 191, 240, 38, 239, 59, 157, 218, 158, 190, 205, 78, 218, 190, 240, 196, 97, 190, 77, 215, 166, 190, 29, 201, 174, 191, 102, 18, 70, 188, 190, 8, 195, 61, 19, 173, 39, 62, 195, 79, 19, 62, 104, 175, 253, 190, 104, 142, 133, 62, 171, 191, 173, 59, 229, 60, 209, 61, 83, 91, 130, 62, 209, 140, 62, 62, 55, 219, 155, 60, 65, 237, 57, 62, 10, 81, 148, 62, 233, 172, 64, 189, 196, 246, 119, 191, 66, 1, 243, 190, 100, 10, 174, 61, 86, 151, 24, 190, 53, 91, 115, 190, 102, 47, 138, 62, 154, 34, 26, 62, 60, 236, 143, 62, 162, 116, 55, 62, 70, 239, 123, 190, 19, 182, 49, 191, 10, 116, 209, 190, 35, 85, 205, 59, 36, 139, 125, 191, 226, 3, 61, 191, 56, 26, 37, 190, 222, 57, 218, 60, 167, 101, 6, 190, 194, 72, 82, 189, 105, 15, 44, 62, 118, 100, 161, 60, 132, 92, 34, 62, 206, 91, 241, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 83, 19, 252, 189, 195, 102, 246, 189, 25, 27, 7, 190, 228, 21, 181, 188, 17, 63, 53, 61, 33, 89, 50, 190, 6, 208, 222, 189, 217, 237, 163, 61, 124, 209, 220, 61, 101, 160, 122, 59, 103, 213, 173, 189, 114, 38, 68, 188, 151, 233, 10, 190, 199, 75, 18, 61, 44, 159, 41, 189, 198, 112, 10, 62, 233, 249, 53, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 217, 173, 74, 191, 51, 81, 152, 189, 68, 80, 12, 62, 219, 199, 238, 62, 88, 69, 170, 61, 202, 237, 149, 62, 9, 41, 134, 61, 137, 110, 176, 61, 99, 135, 145, 189, 91, 42, 218, 61, 124, 162, 131, 62, 171, 38, 78, 62, 62, 42, 224, 62, 48, 151, 39, 62, 97, 9, 169, 60, 15, 233, 205, 189, 89, 100, 148, 190, 250, 54, 81, 62, 122, 251, 127, 59, 39, 124, 173, 190, 251, 189, 6, 61, 250, 84, 170, 189, 84, 56, 116, 62, 186, 9, 103, 189, 30, 119, 158, 190, 194, 128, 44, 191, 251, 106, 45, 191, 204, 200, 80, 62, 58, 66, 132, 191, 243, 24, 59, 191, 113, 164, 171, 190, 136, 34, 13, 190, 217, 41, 0, 191, 53, 79, 5, 62, 14, 88, 60, 62, 79, 174, 159, 62, 10, 1, 244, 188, 231, 229, 84, 190, 23, 146, 109, 191, 61, 42, 196, 61, 26, 184, 84, 186, 90, 176, 47, 62, 119, 66, 188, 60, 128, 130, 140, 61, 164, 180, 6, 63, 56, 46, 204, 61, 232, 1, 134, 61, 38, 119, 144, 61, 230, 13, 200, 190, 67, 97, 129, 62, 237, 102, 124, 62, 167, 194, 61, 191, 130, 186, 146, 62, 211, 2, 173, 60, 188, 25, 130, 62, 160, 228, 214, 190, 228, 101, 232, 190, 49, 11, 7, 191, 46, 99, 202, 190, 146, 176, 32, 62, 96, 21, 99, 191, 183, 178, 45, 191, 90, 101, 139, 190, 255, 183, 86, 191, 227, 234, 106, 62, 16, 110, 100, 62, 211, 137, 121, 62, 196, 81, 159, 191, 22, 219, 4, 188, 94, 107, 69, 191, 240, 32, 205, 189, 5, 83, 51, 62, 233, 100, 86, 60, 57, 38, 199, 189, 247, 207, 182, 61, 165, 13, 39, 62, 40, 3, 41, 190, 47, 160, 14, 190, 88, 216, 246, 60, 253, 241, 230, 190, 66, 58, 180, 62, 247, 115, 142, 62, 188, 236, 89, 190, 248, 52, 60, 61, 168, 126, 153, 62, 109, 140, 3, 62, 71, 0, 136, 190, 43, 223, 251, 62, 11, 177, 128, 190, 103, 49, 191, 188, 18, 219, 54, 62, 114, 7, 34, 62, 224, 33, 180, 189, 162, 191, 148, 189, 140, 115, 230, 189, 141, 193, 54, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 137, 42, 9, 191, 5, 191, 12, 191, 32, 248, 154, 190, 178, 120, 19, 191, 64, 69, 7, 189, 208, 2, 195, 190, 74, 77, 36, 191, 202, 101, 143, 61, 190, 238, 222, 62, 1, 236, 198, 190, 52, 154, 182, 188, 223, 8, 144, 190, 31, 70, 20, 191, 47, 190, 149, 59, 196, 255, 39, 191, 152, 115, 0, 191, 214, 160, 34, 191, 59, 124, 13, 61, 102, 5, 215, 189, 133, 108, 48, 190, 167, 63, 138, 62, 60, 227, 223, 61, 248, 66, 200, 62, 88, 23, 200, 190, 244, 224, 93, 62, 5, 82, 232, 190, 156, 184, 26, 191, 46, 134, 22, 63, 41, 236, 133, 62, 137, 135, 11, 191, 219, 239, 92, 189, 116, 50, 242, 190, 209, 102, 87, 190, 191, 91, 55, 62, 128, 178, 183, 190, 232, 55, 239, 190, 67, 168, 24, 62, 3, 173, 145, 189, 12, 220, 58, 190, 41, 84, 220, 61, 181, 35, 255, 61, 223, 39, 164, 191, 123, 83, 14, 62, 182, 251, 156, 62, 241, 244, 11, 60, 45, 38, 89, 62, 204, 156, 172, 189, 83, 206, 13, 62, 151, 181, 16, 62, 8, 207, 161, 190, 225, 28, 76, 61, 168, 114, 131, 61, 175, 56, 69, 189, 137, 144, 182, 189, 134, 9, 164, 62, 136, 34, 192, 61, 68, 243, 41, 188, 37, 165, 242, 190, 224, 215, 95, 61, 254, 94, 42, 62, 33, 231, 1, 61, 145, 112, 199, 61, 168, 22, 24, 61, 12, 123, 103, 61, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 149, 163, 163, 62, 223, 234, 108, 60, 13, 145, 160, 62, 5, 73, 46, 191, 202, 52, 28, 61, 66, 72, 33, 191, 94, 199, 16, 62, 107, 244, 0, 190, 158, 137, 231, 190, 195, 3, 116, 61, 110, 245, 14, 191, 37, 173, 142, 62, 44, 124, 143, 189, 240, 21, 9, 62, 77, 164, 74, 190, 171, 143, 172, 190, 233, 42, 124, 60, 146, 64, 102, 62, 191, 86, 23, 190, 70, 66, 142, 189, 237, 122, 250, 61, 153, 188, 164, 188, 134, 233, 16, 190, 126, 182, 145, 62, 237, 105, 133, 62, 34, 89, 147, 190, 239, 143, 67, 62, 118, 243, 170, 61, 122, 28, 200, 62, 22, 51, 109, 191, 20, 113, 126, 190, 105, 211, 1, 190, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 80, 22, 207, 61, 66, 250, 118, 62, 59, 127, 59, 62, 81, 189, 161, 191, 177, 216, 42, 62, 198, 230, 41, 191, 124, 67, 201, 61, 207, 69, 31, 61, 140, 252, 132, 62, 34, 218, 130, 190, 19, 201, 38, 61, 194, 186, 144, 62, 219, 250, 177, 62, 221, 209, 185, 62, 228, 19, 81, 62, 193, 105, 122, 61, 8, 158, 36, 61, 235, 31, 248, 59, 30, 44, 39, 189, 215, 244, 207, 61, 32, 39, 141, 189, 253, 24, 16, 190, 57, 233, 164, 190, 16, 37, 154, 61, 35, 242, 130, 191, 1, 98, 22, 61, 174, 89, 178, 60, 249, 128, 137, 189, 43, 185, 29, 190, 155, 72, 194, 62, 149, 55, 131, 61, 101, 54, 80, 188, 88, 139, 189, 190, 89, 224, 221, 190, 18, 131, 52, 190, 33, 202, 232, 62, 99, 108, 208, 61, 125, 35, 174, 62, 30, 52, 187, 61, 136, 116, 48, 190, 140, 127, 21, 62, 74, 9, 63, 62, 168, 80, 138, 62, 106, 31, 25, 190, 22, 171, 200, 62, 15, 202, 85, 61, 59, 231, 93, 62, 235, 230, 180, 62, 135, 250, 1, 61, 119, 157, 89, 62, 105, 19, 131, 189, 245, 231, 129, 61, 178, 206, 192, 61, 105, 85, 39, 189, 15, 209, 198, 189, 21, 2, 230, 61, 5, 13, 199, 190, 75, 136, 138, 189, 119, 142, 216, 190, 27, 147, 204, 190, 235, 139, 35, 189, 206, 167, 11, 190, 59, 130, 113, 189, 209, 187, 4, 190, 89, 46, 188, 189, 138, 179, 80, 62, 150, 179, 133, 62, 6, 121, 134, 62, 179, 2, 31, 61, 109, 47, 53, 62, 64, 1, 20, 62, 233, 51, 51, 62, 180, 242, 154, 62, 152, 145, 28, 190, 79, 79, 93, 62, 167, 231, 2, 190, 233, 165, 114, 62, 166, 242, 245, 60, 150, 245, 234, 188, 163, 240, 75, 190, 135, 206, 81, 62, 180, 33, 179, 190, 14, 0, 95, 190, 199, 0, 229, 61, 99, 242, 81, 61, 183, 28, 228, 189, 192, 236, 64, 61, 34, 240, 32, 62, 186, 17, 97, 189, 201, 118, 123, 61, 149, 231, 108, 189, 216, 78, 209, 61, 230, 136, 36, 189, 18, 160, 12, 190, 142, 32, 185, 62, 134, 207, 170, 62, 38, 231, 123, 191, 240, 106, 27, 190, 116, 23, 23, 189, 252, 47, 242, 62, 222, 142, 72, 189, 157, 45, 234, 62, 211, 118, 174, 60, 114, 177, 218, 60, 27, 226, 105, 189, 189, 36, 170, 186, 120, 82, 57, 62, 225, 208, 175, 189, 3, 46, 123, 62, 181, 151, 196, 62, 109, 168, 247, 60, 192, 73, 222, 62, 17, 254, 85, 190, 156, 247, 110, 62, 126, 210, 177, 62, 69, 46, 172, 190, 213, 253, 129, 61, 201, 197, 75, 61, 236, 167, 76, 62, 59, 129, 91, 190, 136, 85, 12, 189, 157, 198, 255, 190, 211, 212, 189, 190, 215, 81, 130, 62, 171, 146, 72, 190, 25, 106, 57, 191, 183, 97, 132, 190, 43, 183, 160, 190, 91, 156, 142, 62, 241, 79, 233, 61, 110, 221, 6, 62, 183, 55, 96, 191, 7, 200, 239, 60, 78, 252, 189, 190, 134, 181, 181, 189, 244, 171, 255, 189, 166, 138, 250, 61, 55, 156, 28, 190, 28, 156, 253, 189, 242, 194, 61, 62, 209, 52, 210, 62, 204, 254, 225, 61, 202, 194, 129, 62, 29, 117, 157, 190, 151, 77, 26, 62, 113, 93, 0, 61, 224, 179, 152, 190, 38, 217, 235, 190, 67, 78, 206, 188, 188, 214, 20, 189, 5, 11, 28, 191, 123, 58, 97, 62, 247, 45, 25, 191, 206, 123, 129, 189, 246, 124, 55, 62, 214, 235, 93, 188, 113, 171, 158, 190, 39, 4, 187, 188, 10, 165, 224, 188, 78, 233, 123, 189, 135, 162, 255, 190, 119, 243, 62, 62, 39, 145, 147, 189, 170, 129, 184, 190, 185, 72, 4, 189, 122, 139, 155, 189, 20, 65, 119, 191, 238, 220, 22, 62, 191, 107, 109, 190, 209, 26, 35, 191, 159, 224, 74, 190, 126, 215, 77, 62, 9, 1, 65, 189, 233, 221, 42, 191, 200, 150, 136, 190, 64, 124, 49, 61, 189, 200, 46, 189, 80, 229, 152, 62, 239, 149, 133, 62, 91, 102, 26, 61, 46, 189, 151, 62, 12, 37, 59, 61, 218, 54, 137, 62, 128, 230, 24, 190, 246, 22, 192, 62, 231, 103, 181, 189, 48, 63, 250, 61, 100, 146, 40, 62, 101, 103, 185, 61, 254, 1, 239, 190, 84, 105, 28, 191, 108, 137, 187, 190, 143, 210, 247, 189, 238, 131, 124, 62, 40, 214, 221, 190, 17, 21, 22, 191, 77, 141, 162, 61, 189, 54, 207, 61, 60, 221, 67, 190, 221, 14, 187, 189, 210, 177, 179, 61, 164, 223, 134, 191, 35, 170, 16, 190, 10, 78, 158, 62, 230, 127, 50, 60, 124, 19, 200, 189, 169, 89, 132, 189, 0, 200, 216, 189, 187, 188, 82, 62, 209, 31, 24, 188, 130, 44, 108, 62, 210, 33, 184, 189, 51, 177, 202, 189, 163, 68, 26, 62, 4, 74, 228, 61, 72, 130, 57, 62, 160, 77, 17, 190, 30, 166, 155, 189, 210, 205, 28, 61, 8, 110, 195, 62, 26, 221, 251, 61, 148, 159, 251, 61, 163, 6, 132, 61, 128, 134, 46, 62, 100, 51, 91, 62, 141, 15, 95, 62, 59, 132, 142, 62, 110, 146, 113, 62, 102, 112, 35, 62, 177, 92, 68, 61, 219, 247, 183, 60, 136, 158, 34, 190, 138, 120, 210, 190, 93, 137, 203, 61, 86, 64, 32, 191, 120, 47, 185, 61, 40, 204, 190, 61, 169, 187, 238, 189, 67, 82, 106, 190, 73, 96, 78, 62, 106, 241, 108, 62, 161, 133, 33, 189, 112, 40, 24, 62, 27, 21, 132, 62, 100, 102, 122, 62, 67, 162, 52, 190, 163, 60, 84, 62, 129, 201, 96, 62, 190, 236, 15, 61, 215, 70, 68, 190, 63, 163, 190, 62, 92, 39, 0, 61, 83, 184, 60, 62, 69, 165, 236, 190, 118, 121, 155, 190, 190, 68, 125, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 216, 240, 58, 63, 180, 128, 41, 62, 189, 228, 192, 190, 148, 130, 129, 62, 69, 153, 144, 61, 166, 230, 14, 63, 236, 143, 85, 62, 17, 9, 15, 62, 101, 137, 210, 61, 46, 216, 189, 188, 46, 191, 6, 61, 206, 67, 103, 62, 25, 29, 116, 62, 117, 16, 235, 61, 17, 224, 217, 62, 86, 89, 49, 62, 68, 115, 3, 62, 31, 57, 176, 190, 52, 144, 115, 190, 148, 86, 53, 61, 161, 48, 9, 191, 101, 193, 112, 61, 144, 36, 62, 191, 116, 246, 208, 189, 105, 37, 220, 190, 85, 163, 72, 62, 90, 220, 219, 62, 241, 108, 62, 191, 92, 157, 143, 61, 57, 84, 151, 62, 31, 220, 72, 62, 177, 35, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 235, 115, 77, 189, 33, 147, 179, 62, 27, 148, 8, 62, 232, 235, 250, 61, 241, 83, 129, 189, 75, 239, 37, 189, 171, 66, 99, 62, 168, 143, 222, 61, 67, 35, 210, 61, 109, 142, 29, 189, 251, 252, 33, 62, 152, 109, 159, 189, 100, 249, 221, 60, 118, 55, 33, 61, 145, 74, 180, 62, 99, 67, 39, 188, 137, 65, 152, 62, 236, 181, 39, 189, 148, 134, 24, 190, 228, 234, 155, 62, 176, 0, 23, 190, 130, 11, 125, 189, 43, 152, 137, 190, 62, 82, 132, 62, 175, 240, 147, 61, 128, 12, 88, 189, 221, 193, 3, 62, 82, 101, 192, 60, 246, 228, 168, 62, 13, 55, 152, 60, 252, 34, 240, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 90, 159, 39, 63, 240, 213, 15, 190, 200, 39, 176, 59, 187, 75, 145, 190, 214, 132, 91, 191, 23, 164, 250, 189, 155, 56, 99, 63, 35, 205, 86, 191, 233, 12, 190, 61, 190, 86, 69, 63, 175, 229, 117, 63, 5, 13, 214, 188, 77, 64, 109, 63, 171, 226, 79, 63, 13, 115, 249, 190, 98, 86, 192, 60, 131, 27, 107, 63, 244, 235, 244, 189, 147, 40, 172, 61, 135, 177, 33, 191, 110, 79, 164, 61, 194, 170, 214, 190, 3, 17, 199, 62, 169, 230, 180, 62, 127, 160, 241, 62, 86, 45, 38, 190, 54, 116, 48, 63, 10, 128, 11, 190, 254, 166, 164, 190, 8, 220, 23, 190, 159, 14, 91, 63, 188, 156, 177, 61, 15, 34, 76, 189, 222, 125, 133, 190, 156, 89, 167, 61, 66, 15, 38, 190, 197, 213, 11, 62, 9, 255, 225, 60, 247, 123, 190, 62, 51, 201, 149, 62, 171, 181, 95, 190, 110, 58, 134, 61, 123, 128, 146, 190, 226, 135, 17, 190, 197, 146, 13, 63, 27, 90, 254, 188, 185, 173, 206, 190, 150, 71, 232, 60, 216, 106, 50, 61, 6, 162, 140, 190, 24, 91, 3, 190, 197, 158, 90, 62, 34, 48, 40, 190, 215, 75, 67, 190, 199, 253, 131, 61, 155, 127, 158, 188, 179, 140, 246, 62, 119, 225, 19, 63, 93, 116, 130, 61, 241, 10, 198, 190, 231, 227, 176, 189, 209, 27, 86, 61, 12, 225, 40, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 9, 168, 189, 95, 151, 162, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {1, 173, 245, 191, 158, 22, 149, 63, 233, 125, 142, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {138, 230, 125, 191, 250, 185, 173, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}