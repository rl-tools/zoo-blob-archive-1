// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 153, 237, 62, 59, 146, 50, 63, 253, 112, 208, 61, 144, 108, 208, 62, 92, 243, 24, 63, 146, 141, 71, 62, 229, 103, 60, 60, 202, 217, 92, 62, 132, 133, 222, 61, 165, 217, 167, 62, 36, 111, 127, 189, 39, 188, 133, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 101, 245, 138, 61, 85, 83, 188, 189, 21, 190, 139, 190, 58, 70, 212, 190, 217, 209, 9, 63, 68, 42, 61, 188, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 250, 9, 28, 62, 5, 57, 2, 191, 229, 207, 251, 62, 238, 144, 36, 191, 114, 195, 180, 189, 85, 153, 209, 62, 246, 209, 103, 190, 170, 253, 58, 191, 209, 195, 203, 62, 228, 124, 50, 63, 153, 227, 168, 62, 117, 148, 27, 62, 133, 187, 180, 62, 131, 214, 253, 62, 234, 195, 193, 190, 176, 163, 1, 190, 132, 119, 185, 62, 75, 153, 155, 61, 244, 33, 17, 62, 221, 142, 20, 63, 7, 29, 234, 62, 186, 205, 27, 62, 53, 209, 116, 189, 102, 153, 225, 190, 22, 194, 179, 61, 49, 42, 115, 63, 103, 83, 162, 190, 19, 224, 67, 191, 52, 79, 61, 191, 57, 198, 221, 61, 248, 68, 26, 63, 90, 56, 51, 190, 2, 30, 251, 190, 222, 124, 38, 191, 136, 191, 187, 62, 216, 65, 209, 190, 238, 8, 69, 190, 25, 10, 70, 190, 6, 43, 71, 188, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 154, 150, 210, 62, 236, 242, 98, 191, 222, 176, 166, 190, 45, 155, 244, 190, 76, 7, 38, 63, 29, 233, 156, 190, 59, 168, 174, 190, 149, 88, 143, 191, 238, 218, 188, 190, 159, 50, 147, 189, 20, 250, 128, 62, 46, 114, 5, 62, 255, 29, 232, 62, 83, 241, 234, 62, 205, 3, 167, 62, 228, 31, 159, 62, 78, 97, 12, 191, 219, 126, 180, 189, 75, 104, 17, 191, 137, 174, 122, 188, 120, 195, 16, 191, 172, 244, 211, 61, 49, 116, 224, 61, 222, 228, 121, 62, 89, 243, 164, 62, 170, 73, 199, 189, 205, 107, 9, 63, 87, 129, 217, 190, 207, 231, 74, 63, 26, 79, 6, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 189, 202, 190, 251, 95, 12, 63, 249, 6, 213, 62, 222, 252, 219, 190, 106, 173, 9, 191, 203, 10, 214, 190, 121, 247, 255, 189, 92, 107, 229, 190, 109, 87, 46, 62, 232, 119, 164, 62, 146, 157, 228, 61, 144, 122, 240, 61, 226, 85, 24, 190, 221, 182, 113, 62, 53, 208, 6, 63, 75, 94, 5, 191, 88, 50, 240, 62, 92, 76, 188, 62, 213, 62, 170, 62, 146, 0, 150, 190, 160, 155, 23, 63, 253, 145, 179, 190, 37, 203, 35, 63, 98, 63, 189, 62, 84, 210, 192, 62, 71, 92, 15, 191, 64, 103, 74, 62, 60, 2, 2, 63, 245, 229, 73, 189, 200, 117, 3, 191, 126, 133, 31, 190, 109, 167, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 48, 162, 5, 62, 13, 40, 140, 59, 57, 243, 150, 188, 119, 249, 5, 189, 224, 42, 43, 62, 203, 8, 109, 189, 198, 61, 194, 61, 125, 243, 82, 61, 62, 7, 150, 61, 87, 253, 229, 61, 158, 147, 174, 61, 87, 204, 2, 190, 83, 6, 61, 189, 164, 134, 82, 62, 87, 234, 212, 61, 22, 247, 142, 190, 248, 16, 255, 190, 241, 218, 18, 62, 171, 198, 73, 189, 141, 14, 206, 190, 6, 28, 156, 61, 106, 185, 20, 189, 65, 93, 133, 61, 185, 55, 152, 189, 56, 90, 139, 62, 44, 254, 4, 61, 102, 88, 250, 188, 233, 77, 184, 61, 149, 76, 86, 60, 28, 221, 55, 189, 139, 47, 220, 189, 165, 131, 66, 190, 68, 115, 141, 61, 152, 242, 3, 190, 81, 115, 5, 62, 16, 122, 199, 190, 206, 73, 53, 61, 69, 194, 5, 189, 196, 213, 62, 189, 186, 113, 33, 62, 56, 173, 64, 189, 41, 38, 143, 61, 16, 6, 215, 61, 83, 114, 200, 189, 241, 80, 255, 189, 254, 91, 47, 189, 202, 89, 22, 62, 2, 73, 222, 189, 171, 171, 66, 62, 178, 1, 34, 190, 53, 146, 36, 62, 240, 62, 172, 189, 212, 216, 232, 61, 115, 90, 102, 61, 198, 27, 94, 62, 72, 156, 200, 61, 235, 38, 205, 60, 130, 190, 144, 59, 126, 188, 16, 190, 44, 96, 140, 62, 1, 42, 97, 189, 254, 215, 34, 189, 144, 116, 13, 190, 33, 161, 122, 61, 168, 2, 126, 189, 13, 134, 170, 189, 234, 78, 139, 190, 62, 188, 17, 61, 35, 67, 22, 61, 93, 63, 65, 59, 111, 117, 61, 61, 40, 199, 6, 190, 123, 216, 63, 61, 81, 169, 141, 189, 77, 102, 215, 61, 92, 202, 141, 187, 191, 75, 76, 59, 146, 237, 117, 190, 163, 38, 233, 189, 61, 238, 173, 189, 224, 33, 86, 62, 192, 37, 52, 190, 243, 48, 112, 62, 45, 46, 111, 61, 151, 167, 205, 60, 240, 238, 107, 60, 45, 194, 131, 189, 5, 203, 44, 190, 156, 23, 229, 187, 182, 135, 127, 61, 221, 153, 255, 189, 209, 196, 76, 60, 247, 65, 63, 62, 177, 6, 231, 61, 39, 205, 179, 61, 160, 133, 25, 61, 74, 159, 36, 62, 231, 213, 102, 62, 186, 110, 31, 62, 150, 164, 140, 190, 97, 220, 52, 61, 8, 161, 75, 190, 173, 255, 2, 61, 140, 219, 84, 61, 1, 239, 68, 62, 106, 159, 20, 190, 113, 89, 227, 60, 185, 236, 184, 62, 194, 216, 143, 190, 225, 99, 254, 61, 108, 167, 90, 188, 6, 158, 41, 190, 114, 55, 161, 62, 145, 117, 221, 60, 60, 247, 183, 189, 216, 129, 154, 62, 134, 149, 134, 62, 31, 55, 166, 61, 4, 38, 24, 60, 37, 10, 188, 61, 228, 72, 133, 190, 115, 178, 69, 190, 122, 27, 35, 62, 143, 117, 201, 187, 39, 221, 214, 59, 134, 73, 5, 62, 100, 43, 66, 62, 180, 215, 53, 190, 119, 199, 251, 189, 146, 41, 188, 189, 122, 8, 35, 62, 108, 84, 38, 190, 86, 188, 26, 190, 5, 215, 224, 189, 190, 77, 82, 190, 199, 149, 174, 61, 234, 145, 50, 62, 32, 220, 35, 62, 153, 164, 212, 61, 213, 73, 38, 190, 137, 20, 53, 61, 39, 77, 53, 190, 48, 136, 93, 189, 158, 208, 79, 61, 34, 88, 8, 188, 10, 205, 82, 189, 16, 79, 169, 188, 229, 251, 231, 189, 124, 84, 6, 190, 90, 44, 82, 61, 192, 8, 3, 62, 228, 247, 249, 189, 89, 225, 25, 62, 104, 185, 255, 60, 62, 79, 116, 61, 102, 242, 247, 61, 174, 26, 244, 60, 31, 224, 33, 62, 120, 199, 9, 190, 213, 98, 189, 189, 66, 111, 171, 189, 118, 175, 86, 188, 88, 253, 150, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 189, 202, 199, 61, 86, 255, 246, 61, 242, 170, 78, 189, 110, 113, 126, 189, 148, 217, 132, 61, 176, 255, 37, 190, 213, 207, 232, 188, 184, 103, 3, 190, 212, 21, 119, 61, 199, 134, 46, 190, 171, 200, 98, 189, 112, 26, 194, 61, 67, 189, 70, 190, 248, 66, 63, 189, 88, 32, 83, 61, 23, 49, 114, 189, 233, 198, 245, 189, 186, 186, 21, 62, 135, 65, 82, 61, 66, 238, 224, 61, 75, 141, 138, 189, 64, 182, 13, 62, 175, 232, 1, 190, 46, 98, 67, 189, 27, 216, 164, 61, 204, 136, 69, 190, 202, 142, 44, 61, 78, 158, 196, 61, 68, 15, 205, 61, 92, 94, 248, 189, 225, 6, 148, 189, 240, 111, 136, 60, 175, 202, 216, 189, 11, 175, 249, 188, 252, 106, 201, 62, 221, 159, 224, 60, 84, 96, 49, 190, 44, 33, 102, 61, 94, 196, 2, 190, 187, 41, 7, 62, 146, 93, 195, 190, 217, 128, 144, 62, 87, 45, 248, 61, 5, 217, 237, 189, 182, 208, 7, 61, 69, 122, 36, 190, 8, 122, 134, 62, 108, 214, 90, 189, 219, 121, 24, 190, 219, 74, 33, 190, 119, 90, 251, 189, 178, 236, 43, 62, 222, 120, 26, 190, 149, 101, 229, 190, 192, 25, 210, 189, 18, 42, 217, 190, 90, 228, 58, 62, 138, 16, 163, 62, 130, 68, 3, 62, 107, 140, 158, 190, 10, 25, 31, 61, 127, 115, 85, 189, 207, 12, 143, 62, 114, 189, 64, 61, 218, 92, 155, 190, 119, 158, 39, 190, 88, 128, 35, 191, 88, 217, 151, 61, 179, 176, 131, 189, 61, 112, 143, 62, 81, 174, 45, 61, 118, 183, 158, 190, 155, 40, 103, 62, 164, 213, 209, 61, 50, 56, 166, 189, 144, 133, 254, 61, 69, 218, 255, 61, 156, 50, 18, 190, 191, 204, 3, 190, 45, 171, 156, 62, 188, 91, 1, 190, 113, 212, 83, 189, 97, 131, 20, 61, 43, 47, 125, 190, 30, 169, 191, 188, 124, 133, 103, 189, 108, 246, 165, 189, 154, 107, 53, 62, 91, 62, 137, 189, 191, 71, 32, 61, 193, 23, 214, 189, 50, 53, 90, 190, 35, 179, 0, 62, 69, 115, 2, 190, 236, 46, 20, 190, 172, 166, 25, 62, 13, 169, 188, 61, 217, 33, 5, 190, 4, 145, 145, 61, 56, 13, 162, 61, 120, 215, 48, 62, 108, 137, 87, 190, 89, 42, 151, 189, 138, 207, 229, 60, 95, 235, 126, 61, 122, 170, 129, 62, 164, 107, 64, 62, 169, 53, 59, 190, 26, 253, 76, 62, 247, 201, 177, 188, 103, 127, 49, 62, 19, 123, 88, 189, 107, 180, 12, 62, 227, 4, 22, 190, 16, 130, 150, 189, 32, 69, 138, 185, 135, 198, 177, 189, 216, 136, 96, 190, 174, 5, 4, 62, 219, 22, 147, 190, 100, 199, 149, 61, 128, 139, 68, 189, 203, 216, 59, 60, 221, 64, 33, 190, 115, 93, 59, 189, 120, 155, 60, 62, 225, 169, 179, 190, 89, 59, 41, 61, 234, 88, 118, 189, 88, 25, 128, 61, 166, 153, 92, 62, 105, 199, 169, 188, 100, 185, 26, 62, 40, 110, 215, 189, 178, 175, 151, 189, 138, 123, 216, 189, 251, 3, 89, 190, 235, 121, 119, 62, 219, 71, 7, 189, 64, 6, 13, 187, 104, 52, 161, 61, 81, 246, 2, 190, 32, 69, 42, 62, 14, 130, 5, 190, 74, 34, 74, 61, 5, 228, 6, 188, 14, 27, 150, 190, 102, 91, 205, 61, 122, 32, 119, 189, 96, 99, 35, 190, 77, 64, 51, 190, 10, 44, 12, 190, 247, 78, 40, 190, 40, 13, 6, 62, 211, 111, 149, 189, 179, 2, 36, 61, 195, 79, 19, 62, 126, 164, 27, 190, 191, 154, 53, 190, 171, 191, 173, 59, 219, 89, 182, 60, 148, 156, 18, 62, 210, 128, 249, 61, 208, 100, 149, 189, 46, 166, 98, 189, 33, 255, 131, 61, 73, 4, 206, 189, 185, 98, 58, 190, 169, 73, 22, 190, 173, 228, 120, 61, 213, 66, 0, 190, 129, 161, 5, 189, 143, 55, 26, 62, 154, 34, 26, 62, 63, 215, 59, 62, 177, 192, 252, 189, 28, 85, 99, 61, 86, 118, 45, 190, 238, 165, 44, 59, 37, 59, 139, 60, 28, 206, 59, 190, 213, 200, 14, 190, 102, 240, 33, 190, 2, 5, 76, 190, 167, 101, 6, 190, 194, 72, 82, 189, 83, 184, 46, 62, 184, 224, 191, 60, 132, 92, 34, 62, 156, 186, 244, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 102, 95, 249, 189, 195, 102, 246, 189, 25, 27, 7, 190, 250, 11, 139, 188, 17, 63, 53, 61, 251, 172, 49, 190, 111, 57, 201, 189, 192, 140, 187, 61, 15, 223, 240, 61, 101, 160, 122, 59, 142, 252, 147, 189, 246, 142, 254, 186, 137, 125, 234, 189, 199, 75, 18, 61, 44, 159, 41, 189, 31, 225, 17, 62, 39, 112, 137, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 103, 168, 100, 61, 145, 75, 179, 189, 58, 247, 194, 61, 128, 210, 103, 61, 88, 69, 170, 61, 7, 110, 117, 61, 153, 63, 253, 188, 137, 110, 176, 61, 122, 179, 29, 189, 166, 133, 183, 61, 188, 104, 122, 62, 104, 95, 0, 62, 73, 206, 51, 62, 157, 20, 187, 189, 76, 243, 54, 60, 186, 37, 128, 189, 224, 106, 102, 190, 156, 77, 151, 62, 232, 7, 30, 190, 179, 196, 133, 190, 32, 77, 138, 60, 250, 84, 170, 189, 215, 7, 38, 62, 73, 61, 253, 189, 249, 163, 48, 62, 146, 155, 24, 190, 215, 250, 185, 190, 113, 51, 115, 62, 58, 209, 52, 190, 47, 94, 36, 190, 137, 174, 113, 190, 227, 99, 65, 190, 134, 43, 187, 189, 95, 150, 146, 61, 77, 185, 244, 61, 74, 204, 130, 61, 10, 1, 244, 188, 58, 34, 212, 189, 77, 125, 93, 190, 61, 42, 196, 61, 170, 30, 182, 61, 209, 38, 6, 62, 162, 24, 48, 61, 149, 9, 160, 188, 159, 152, 21, 62, 134, 36, 30, 190, 232, 9, 94, 60, 148, 83, 86, 190, 227, 10, 231, 190, 234, 21, 157, 62, 118, 94, 103, 60, 144, 152, 141, 190, 3, 132, 162, 62, 211, 2, 173, 60, 44, 116, 51, 62, 248, 34, 88, 190, 74, 185, 52, 189, 16, 231, 116, 189, 98, 48, 117, 190, 134, 118, 130, 62, 37, 231, 132, 189, 186, 186, 114, 189, 30, 133, 25, 190, 149, 182, 190, 189, 82, 51, 65, 62, 126, 13, 97, 62, 238, 174, 107, 62, 184, 168, 238, 190, 22, 219, 4, 188, 21, 72, 187, 190, 220, 104, 182, 189, 5, 83, 51, 62, 251, 134, 29, 61, 23, 245, 65, 189, 150, 190, 39, 62, 242, 206, 243, 61, 208, 187, 7, 190, 239, 221, 6, 189, 85, 189, 26, 62, 27, 155, 174, 190, 101, 149, 233, 62, 43, 231, 159, 61, 242, 185, 252, 189, 147, 127, 141, 61, 211, 15, 79, 62, 109, 140, 3, 62, 235, 44, 48, 190, 100, 123, 197, 62, 253, 200, 90, 190, 155, 208, 221, 189, 220, 110, 222, 61, 137, 111, 99, 61, 241, 221, 77, 60, 123, 54, 75, 190, 44, 63, 158, 189, 203, 8, 52, 62, 29, 43, 244, 61, 253, 241, 37, 190, 208, 116, 173, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 112, 158, 167, 61, 21, 151, 47, 190, 105, 225, 94, 189, 80, 239, 185, 188, 198, 159, 93, 60, 139, 11, 57, 60, 192, 54, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 58, 234, 137, 61, 88, 1, 2, 190, 214, 133, 119, 61, 225, 113, 55, 187, 154, 83, 5, 60, 131, 220, 147, 189, 222, 112, 64, 189, 183, 107, 253, 61, 34, 185, 191, 189, 36, 76, 147, 189, 184, 238, 99, 188, 36, 230, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 225, 80, 200, 189, 37, 157, 247, 189, 154, 19, 81, 190, 151, 47, 140, 190, 64, 69, 7, 189, 179, 141, 146, 187, 64, 214, 227, 189, 202, 101, 143, 61, 174, 195, 21, 62, 247, 31, 16, 62, 179, 64, 52, 190, 203, 183, 163, 61, 174, 176, 145, 57, 184, 145, 200, 61, 63, 207, 215, 189, 60, 71, 17, 190, 100, 205, 127, 189, 88, 127, 8, 190, 67, 90, 6, 62, 210, 86, 106, 59, 230, 238, 255, 189, 60, 227, 223, 61, 191, 113, 200, 189, 245, 227, 206, 61, 186, 172, 44, 190, 121, 174, 168, 61, 96, 179, 94, 189, 63, 168, 240, 189, 79, 235, 8, 62, 12, 82, 34, 190, 108, 73, 32, 61, 64, 76, 192, 189, 40, 59, 188, 61, 167, 184, 50, 189, 39, 24, 35, 190, 40, 153, 92, 190, 67, 168, 24, 62, 199, 98, 141, 189, 140, 203, 42, 190, 41, 84, 220, 61, 250, 177, 84, 61, 42, 28, 53, 187, 53, 64, 25, 62, 83, 7, 10, 62, 118, 210, 44, 60, 234, 78, 202, 61, 159, 226, 204, 189, 101, 177, 4, 62, 247, 245, 61, 62, 154, 222, 237, 189, 161, 231, 7, 61, 156, 64, 243, 61, 237, 174, 185, 188, 137, 144, 182, 189, 88, 226, 83, 62, 216, 106, 168, 61, 201, 62, 214, 61, 114, 253, 46, 61, 98, 116, 243, 188, 179, 6, 92, 61, 28, 29, 176, 61, 165, 115, 70, 60, 9, 130, 54, 189, 67, 62, 221, 61, 247, 144, 171, 60, 49, 96, 23, 190, 197, 182, 252, 189, 96, 168, 20, 61, 245, 161, 211, 61, 118, 67, 242, 61, 111, 74, 236, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 85, 168, 186, 61, 162, 200, 8, 190, 82, 238, 172, 60, 88, 168, 52, 190, 253, 123, 212, 61, 79, 234, 21, 61, 97, 195, 35, 189, 180, 142, 15, 62, 113, 21, 16, 62, 209, 210, 116, 189, 45, 68, 7, 190, 28, 0, 52, 190, 147, 76, 144, 189, 152, 12, 22, 190, 176, 233, 168, 61, 132, 67, 189, 189, 2, 135, 39, 189, 161, 17, 210, 189, 132, 204, 81, 188, 35, 251, 201, 61, 38, 251, 126, 61, 106, 228, 208, 187, 188, 64, 72, 62, 55, 49, 235, 189, 202, 52, 28, 61, 14, 206, 44, 190, 211, 231, 105, 62, 107, 244, 0, 190, 89, 81, 66, 190, 62, 204, 47, 62, 150, 67, 150, 189, 15, 52, 109, 62, 134, 151, 78, 189, 171, 253, 186, 61, 29, 71, 249, 61, 54, 194, 85, 190, 109, 196, 230, 61, 245, 240, 25, 62, 31, 120, 230, 189, 237, 119, 157, 189, 42, 50, 4, 190, 153, 188, 164, 188, 155, 2, 60, 190, 145, 215, 69, 62, 202, 148, 7, 190, 197, 111, 135, 61, 182, 81, 173, 61, 178, 191, 81, 188, 92, 115, 88, 62, 222, 205, 230, 189, 226, 121, 48, 62, 196, 86, 141, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 157, 208, 182, 189, 67, 50, 69, 62, 107, 147, 68, 61, 18, 155, 43, 62, 177, 216, 42, 62, 110, 176, 174, 61, 62, 88, 0, 190, 207, 69, 31, 61, 41, 52, 109, 62, 32, 210, 59, 190, 208, 73, 138, 61, 60, 150, 114, 62, 12, 236, 112, 61, 45, 73, 11, 189, 14, 48, 57, 62, 188, 25, 112, 189, 231, 169, 32, 61, 144, 150, 253, 185, 89, 40, 159, 189, 47, 114, 185, 61, 236, 122, 70, 190, 253, 24, 16, 190, 163, 140, 222, 189, 232, 129, 213, 189, 104, 253, 114, 190, 39, 190, 70, 189, 54, 184, 8, 189, 200, 200, 15, 59, 48, 114, 31, 190, 177, 111, 93, 62, 241, 142, 156, 61, 129, 130, 35, 190, 1, 181, 3, 62, 209, 183, 39, 190, 3, 160, 8, 190, 30, 142, 229, 61, 99, 108, 208, 61, 9, 134, 255, 188, 26, 171, 147, 189, 136, 116, 48, 190, 160, 14, 214, 61, 4, 57, 56, 61, 194, 168, 73, 62, 51, 74, 234, 189, 237, 195, 52, 62, 195, 39, 187, 186, 176, 215, 20, 62, 151, 219, 38, 62, 72, 83, 94, 188, 208, 33, 23, 62, 222, 88, 37, 190, 189, 222, 121, 61, 86, 187, 3, 62, 105, 85, 39, 189, 247, 175, 159, 187, 177, 105, 135, 189, 219, 250, 99, 189, 246, 247, 13, 61, 223, 7, 228, 189, 186, 119, 25, 61, 157, 108, 194, 61, 152, 158, 19, 189, 87, 165, 209, 189, 139, 228, 55, 190, 103, 237, 217, 189, 163, 77, 88, 62, 59, 7, 0, 62, 144, 70, 197, 62, 179, 2, 31, 61, 79, 91, 63, 62, 39, 94, 181, 61, 233, 51, 51, 62, 118, 57, 181, 61, 255, 227, 96, 190, 21, 69, 24, 187, 46, 89, 115, 189, 205, 5, 175, 62, 28, 217, 19, 190, 255, 76, 54, 190, 207, 229, 103, 189, 169, 112, 36, 62, 88, 53, 189, 190, 26, 106, 215, 188, 99, 242, 182, 61, 202, 233, 58, 188, 183, 28, 228, 189, 67, 222, 20, 62, 29, 108, 82, 62, 86, 231, 12, 190, 26, 122, 0, 62, 183, 237, 178, 189, 51, 75, 177, 61, 29, 232, 118, 188, 147, 245, 198, 189, 28, 220, 38, 62, 81, 7, 110, 62, 15, 110, 176, 189, 134, 232, 57, 190, 140, 81, 248, 60, 226, 242, 53, 62, 222, 142, 72, 189, 123, 213, 25, 62, 116, 223, 165, 61, 114, 177, 218, 60, 23, 25, 187, 189, 101, 51, 202, 58, 209, 197, 5, 62, 239, 38, 6, 190, 138, 126, 62, 61, 244, 90, 130, 61, 185, 233, 173, 60, 46, 253, 67, 62, 235, 30, 90, 190, 47, 255, 146, 62, 27, 96, 15, 62, 218, 129, 127, 190, 194, 19, 45, 61, 201, 197, 75, 61, 101, 251, 207, 60, 49, 197, 83, 190, 215, 223, 42, 62, 28, 30, 145, 61, 9, 153, 113, 58, 210, 36, 49, 62, 202, 250, 136, 189, 10, 57, 185, 189, 44, 127, 245, 189, 160, 50, 252, 189, 227, 54, 135, 61, 135, 144, 47, 190, 205, 185, 248, 60, 86, 64, 12, 190, 7, 200, 239, 60, 13, 235, 26, 62, 47, 186, 144, 189, 244, 171, 255, 189, 31, 124, 24, 62, 146, 196, 31, 190, 178, 220, 199, 189, 210, 110, 93, 189, 21, 3, 33, 62, 220, 29, 239, 189, 242, 109, 18, 62, 87, 76, 111, 189, 161, 81, 180, 189, 20, 24, 135, 61, 97, 171, 21, 190, 173, 8, 71, 189, 12, 144, 21, 60, 188, 214, 20, 189, 152, 180, 14, 190, 143, 177, 196, 61, 145, 207, 25, 190, 211, 21, 14, 190, 225, 254, 240, 188, 208, 141, 143, 61, 64, 181, 234, 187, 197, 205, 52, 190, 17, 65, 1, 189, 127, 74, 167, 60, 239, 150, 146, 190, 210, 121, 232, 61, 145, 38, 228, 59, 81, 64, 175, 190, 185, 72, 4, 189, 73, 161, 200, 189, 49, 237, 157, 190, 238, 220, 22, 62, 95, 149, 110, 190, 138, 233, 243, 188, 202, 5, 103, 59, 94, 104, 192, 61, 157, 252, 91, 61, 1, 126, 111, 190, 247, 224, 57, 190, 181, 55, 149, 61, 85, 194, 254, 61, 57, 18, 107, 61, 178, 26, 107, 62, 221, 75, 103, 61, 121, 50, 29, 61, 12, 37, 59, 61, 151, 165, 175, 61, 107, 125, 142, 61, 217, 54, 245, 60, 68, 215, 183, 189, 224, 164, 22, 61, 215, 25, 83, 189, 33, 18, 214, 189, 150, 104, 34, 190, 118, 57, 13, 190, 177, 12, 138, 61, 206, 112, 102, 61, 208, 45, 128, 61, 132, 148, 28, 190, 158, 115, 193, 190, 77, 141, 162, 61, 80, 2, 4, 61, 60, 185, 102, 190, 221, 14, 187, 189, 98, 19, 207, 60, 165, 13, 129, 188, 7, 143, 8, 190, 83, 95, 41, 62, 180, 175, 79, 60, 189, 30, 55, 190, 205, 107, 36, 61, 107, 164, 44, 190, 187, 52, 86, 62, 23, 220, 131, 61, 250, 92, 42, 62, 91, 169, 199, 189, 33, 177, 128, 189, 163, 68, 26, 62, 205, 55, 207, 188, 135, 52, 41, 62, 144, 245, 131, 189, 112, 232, 67, 188, 22, 109, 2, 61, 255, 121, 110, 62, 179, 107, 225, 61, 199, 124, 66, 189, 232, 129, 85, 60, 150, 107, 26, 62, 31, 31, 217, 61, 8, 9, 47, 62, 80, 209, 58, 62, 243, 19, 55, 62, 102, 112, 35, 62, 145, 15, 192, 61, 232, 254, 135, 60, 136, 158, 34, 190, 32, 194, 179, 189, 119, 214, 166, 61, 78, 199, 182, 189, 175, 47, 137, 188, 58, 120, 58, 61, 65, 181, 28, 186, 176, 209, 10, 61, 60, 41, 231, 61, 185, 123, 108, 62, 244, 160, 66, 190, 86, 175, 19, 60, 4, 67, 61, 62, 197, 89, 155, 61, 67, 162, 52, 190, 69, 98, 187, 60, 106, 187, 212, 61, 99, 63, 116, 190, 152, 164, 131, 189, 44, 139, 111, 62, 190, 237, 0, 190, 168, 61, 108, 60, 254, 150, 242, 60, 104, 158, 206, 61, 43, 168, 179, 189, 163, 240, 242, 61, 131, 156, 170, 188, 95, 41, 70, 190, 86, 141, 27, 190, 73, 10, 110, 60, 236, 141, 251, 189, 59, 236, 208, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 35, 234, 250, 189, 56, 200, 0, 190, 245, 149, 163, 188, 143, 5, 229, 189, 241, 47, 102, 189, 151, 179, 166, 61, 119, 244, 181, 189, 169, 179, 206, 188, 11, 190, 138, 189, 164, 134, 132, 189, 11, 156, 35, 189, 74, 179, 49, 61, 125, 211, 149, 189, 61, 100, 137, 189, 37, 25, 66, 61, 66, 26, 18, 190, 205, 140, 35, 189, 233, 37, 31, 62, 68, 116, 4, 189, 112, 159, 171, 189, 238, 171, 255, 61, 155, 208, 154, 62, 213, 98, 133, 61, 58, 173, 13, 190, 185, 126, 181, 189, 69, 153, 144, 61, 239, 147, 5, 62, 231, 190, 144, 60, 17, 9, 15, 62, 97, 112, 45, 61, 229, 186, 2, 190, 162, 28, 56, 189, 65, 21, 178, 189, 80, 227, 124, 61, 237, 122, 92, 61, 225, 34, 251, 61, 84, 134, 61, 61, 209, 90, 30, 190, 129, 169, 36, 190, 186, 182, 150, 189, 224, 230, 32, 190, 58, 88, 16, 61, 101, 193, 112, 61, 74, 221, 67, 61, 37, 152, 123, 190, 197, 4, 27, 190, 242, 14, 33, 62, 207, 163, 28, 62, 113, 71, 223, 189, 3, 32, 75, 61, 71, 81, 48, 62, 223, 131, 230, 188, 182, 81, 239, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 115, 83, 190, 189, 196, 8, 119, 62, 149, 174, 11, 62, 64, 94, 163, 60, 74, 210, 8, 190, 213, 146, 16, 189, 234, 213, 105, 62, 64, 114, 94, 62, 30, 199, 72, 61, 174, 53, 153, 61, 23, 188, 9, 61, 40, 112, 138, 189, 164, 142, 156, 188, 252, 72, 144, 187, 36, 127, 147, 62, 233, 61, 144, 59, 89, 193, 24, 58, 14, 211, 210, 189, 50, 14, 17, 190, 214, 57, 37, 62, 176, 0, 23, 190, 214, 118, 4, 190, 17, 142, 61, 190, 54, 183, 100, 62, 174, 76, 18, 61, 93, 7, 184, 189, 125, 172, 168, 59, 70, 44, 151, 188, 20, 10, 90, 62, 63, 136, 197, 60, 17, 166, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 197, 84, 150, 62, 151, 59, 47, 60, 28, 173, 90, 62, 157, 167, 102, 190, 121, 94, 85, 190, 197, 188, 250, 189, 32, 45, 203, 62, 222, 7, 14, 191, 120, 24, 197, 61, 183, 119, 144, 62, 143, 133, 6, 62, 36, 182, 220, 188, 102, 157, 252, 62, 35, 255, 241, 62, 183, 255, 200, 190, 49, 156, 201, 60, 193, 146, 187, 61, 171, 215, 114, 61, 169, 150, 170, 61, 153, 128, 102, 190, 110, 79, 164, 61, 59, 246, 13, 190, 181, 61, 233, 61, 247, 18, 202, 62, 119, 186, 139, 62, 85, 216, 21, 61, 107, 178, 106, 62, 116, 30, 150, 61, 40, 5, 90, 190, 127, 246, 28, 190, 70, 197, 167, 60, 188, 156, 177, 61, 198, 220, 79, 188, 161, 12, 41, 190, 36, 70, 156, 188, 235, 254, 60, 190, 88, 149, 130, 61, 231, 22, 226, 60, 250, 185, 159, 189, 24, 240, 150, 61, 52, 106, 67, 190, 100, 200, 192, 61, 99, 142, 91, 189, 216, 182, 17, 190, 22, 165, 55, 62, 214, 238, 85, 190, 61, 109, 108, 190, 141, 138, 240, 60, 61, 190, 130, 61, 188, 79, 203, 189, 169, 56, 5, 190, 183, 108, 31, 62, 34, 48, 40, 190, 21, 139, 47, 61, 12, 28, 243, 61, 177, 198, 68, 61, 186, 111, 26, 62, 45, 158, 231, 61, 11, 84, 40, 190, 235, 122, 139, 190, 88, 50, 36, 189, 239, 246, 67, 61, 139, 75, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 250, 34, 188, 254, 89, 189, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {6, 93, 133, 63, 192, 72, 163, 62, 254, 239, 124, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 214, 120, 191, 35, 37, 115, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}