// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 45, 32, 63, 75, 254, 110, 63, 179, 47, 53, 62, 52, 93, 39, 63, 175, 4, 239, 62, 239, 147, 251, 61, 238, 246, 252, 59, 115, 100, 208, 61, 42, 128, 128, 61, 218, 78, 211, 62, 131, 51, 34, 191, 32, 80, 119, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 14, 123, 167, 188, 125, 175, 205, 190, 162, 217, 155, 190, 70, 47, 110, 190, 180, 18, 199, 62, 136, 65, 159, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 94, 113, 134, 189, 87, 163, 51, 191, 44, 42, 43, 63, 122, 35, 50, 191, 17, 2, 138, 62, 255, 232, 242, 62, 236, 252, 110, 190, 201, 255, 212, 190, 8, 129, 36, 63, 118, 97, 107, 63, 81, 199, 120, 62, 139, 112, 38, 62, 111, 48, 107, 62, 160, 117, 9, 63, 26, 31, 235, 190, 134, 102, 215, 189, 7, 118, 251, 62, 161, 10, 93, 188, 131, 193, 11, 62, 60, 147, 51, 63, 4, 69, 217, 62, 124, 60, 155, 61, 248, 97, 172, 190, 43, 174, 5, 191, 190, 239, 166, 62, 56, 30, 117, 63, 221, 144, 0, 191, 133, 215, 80, 191, 100, 234, 1, 191, 170, 62, 103, 62, 98, 25, 35, 63, 192, 161, 150, 190, 140, 229, 11, 191, 78, 165, 18, 191, 245, 219, 57, 62, 29, 102, 59, 191, 232, 179, 64, 190, 190, 28, 64, 190, 4, 96, 4, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 57, 25, 45, 63, 157, 145, 118, 191, 56, 113, 153, 190, 159, 28, 206, 190, 195, 81, 197, 62, 204, 95, 4, 191, 77, 203, 148, 190, 191, 114, 150, 191, 159, 251, 83, 190, 194, 3, 88, 189, 173, 18, 182, 62, 10, 176, 69, 62, 78, 14, 216, 62, 68, 173, 20, 63, 214, 31, 182, 62, 212, 27, 176, 62, 124, 5, 6, 191, 117, 158, 0, 189, 59, 178, 248, 190, 96, 208, 123, 190, 154, 81, 105, 191, 71, 220, 176, 61, 99, 24, 148, 62, 81, 208, 123, 62, 23, 211, 87, 62, 148, 203, 62, 190, 22, 6, 32, 63, 197, 126, 203, 190, 195, 170, 24, 63, 3, 179, 37, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 66, 174, 190, 52, 129, 184, 62, 235, 244, 235, 62, 118, 10, 167, 190, 106, 173, 9, 191, 78, 251, 224, 190, 85, 78, 145, 190, 92, 107, 229, 190, 142, 227, 23, 62, 179, 210, 149, 62, 159, 236, 38, 189, 153, 49, 47, 62, 146, 170, 214, 61, 75, 152, 75, 62, 164, 36, 4, 63, 65, 23, 237, 190, 116, 215, 89, 62, 26, 57, 191, 62, 229, 104, 132, 62, 196, 89, 203, 190, 6, 188, 35, 63, 253, 145, 179, 190, 152, 189, 206, 62, 61, 109, 96, 62, 12, 53, 168, 62, 64, 220, 22, 191, 96, 40, 43, 60, 207, 238, 238, 62, 64, 221, 13, 190, 224, 69, 21, 191, 145, 144, 125, 189, 127, 120, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 7, 241, 49, 190, 146, 11, 200, 58, 102, 237, 86, 61, 137, 56, 13, 190, 224, 42, 43, 62, 124, 99, 194, 58, 113, 140, 151, 60, 125, 243, 82, 61, 40, 193, 179, 61, 2, 4, 51, 62, 248, 19, 228, 61, 24, 179, 144, 189, 182, 56, 232, 188, 78, 190, 167, 62, 181, 41, 56, 62, 194, 119, 92, 190, 91, 202, 62, 191, 240, 93, 49, 62, 236, 162, 195, 189, 143, 51, 89, 191, 91, 5, 215, 61, 106, 185, 20, 189, 188, 247, 141, 189, 177, 75, 229, 60, 244, 211, 165, 61, 106, 231, 222, 188, 129, 187, 153, 189, 240, 1, 199, 187, 247, 94, 176, 190, 189, 49, 7, 189, 187, 247, 14, 190, 97, 45, 8, 191, 185, 27, 72, 61, 113, 207, 251, 189, 6, 209, 16, 62, 128, 189, 217, 190, 206, 73, 53, 61, 60, 55, 136, 60, 0, 90, 137, 189, 186, 113, 33, 62, 58, 34, 113, 189, 115, 107, 204, 61, 252, 226, 152, 61, 91, 170, 116, 189, 143, 80, 28, 190, 46, 138, 76, 189, 29, 220, 19, 62, 192, 203, 139, 189, 110, 48, 28, 62, 216, 246, 119, 189, 14, 59, 73, 62, 156, 97, 41, 189, 87, 243, 52, 62, 115, 90, 102, 61, 29, 234, 140, 62, 94, 62, 226, 61, 220, 171, 165, 61, 224, 118, 241, 187, 189, 230, 10, 190, 38, 176, 170, 62, 241, 179, 50, 59, 252, 133, 182, 189, 253, 122, 15, 190, 183, 103, 225, 60, 25, 15, 205, 190, 42, 176, 81, 189, 118, 11, 83, 190, 75, 206, 177, 189, 35, 67, 22, 61, 124, 122, 234, 188, 112, 128, 190, 61, 40, 199, 6, 190, 137, 162, 195, 61, 175, 119, 192, 189, 85, 188, 7, 62, 9, 217, 56, 61, 71, 76, 80, 189, 118, 243, 94, 190, 221, 222, 159, 189, 251, 109, 11, 190, 77, 77, 60, 62, 149, 60, 48, 190, 244, 67, 50, 62, 220, 54, 198, 61, 63, 163, 174, 61, 240, 238, 107, 60, 229, 112, 173, 189, 127, 160, 12, 190, 192, 186, 146, 60, 3, 62, 177, 188, 247, 150, 209, 189, 118, 213, 32, 61, 66, 15, 76, 62, 228, 227, 223, 61, 68, 7, 30, 62, 212, 246, 118, 61, 211, 47, 123, 62, 94, 208, 50, 62, 13, 92, 21, 62, 249, 161, 215, 190, 97, 220, 52, 61, 125, 67, 133, 190, 141, 148, 137, 60, 140, 219, 84, 61, 164, 152, 51, 62, 242, 39, 226, 189, 155, 33, 67, 188, 78, 235, 196, 62, 87, 160, 175, 190, 100, 153, 155, 61, 240, 32, 190, 189, 76, 31, 84, 190, 120, 201, 154, 62, 220, 241, 67, 62, 88, 88, 217, 189, 96, 255, 190, 62, 149, 77, 166, 62, 31, 55, 166, 61, 190, 60, 128, 61, 171, 26, 180, 61, 153, 68, 26, 190, 213, 185, 68, 190, 248, 91, 17, 62, 230, 169, 186, 61, 82, 53, 165, 61, 53, 242, 168, 61, 17, 246, 79, 62, 35, 67, 45, 190, 80, 182, 92, 190, 229, 165, 139, 190, 2, 174, 28, 62, 204, 139, 35, 188, 86, 188, 26, 190, 36, 113, 56, 190, 124, 135, 216, 190, 199, 149, 174, 61, 202, 124, 133, 62, 94, 103, 130, 62, 114, 28, 97, 62, 248, 13, 220, 190, 249, 129, 227, 61, 253, 85, 146, 190, 61, 224, 216, 189, 77, 191, 129, 186, 164, 195, 81, 60, 110, 173, 240, 61, 171, 110, 148, 60, 82, 230, 135, 190, 86, 224, 98, 188, 90, 44, 82, 61, 80, 97, 104, 62, 229, 205, 237, 190, 198, 120, 173, 62, 224, 216, 33, 61, 217, 121, 215, 189, 17, 241, 102, 62, 125, 242, 144, 189, 163, 240, 190, 61, 140, 78, 50, 190, 242, 130, 171, 189, 66, 111, 171, 189, 118, 175, 86, 188, 88, 253, 150, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 189, 202, 199, 61, 86, 255, 246, 61, 242, 170, 78, 189, 110, 113, 126, 189, 148, 217, 132, 61, 176, 255, 37, 190, 213, 207, 232, 188, 184, 103, 3, 190, 212, 21, 119, 61, 199, 134, 46, 190, 171, 200, 98, 189, 112, 26, 194, 61, 67, 189, 70, 190, 248, 66, 63, 189, 88, 32, 83, 61, 23, 49, 114, 189, 233, 198, 245, 189, 186, 186, 21, 62, 135, 65, 82, 61, 66, 238, 224, 61, 75, 141, 138, 189, 64, 182, 13, 62, 175, 232, 1, 190, 46, 98, 67, 189, 86, 149, 16, 191, 214, 41, 244, 189, 154, 55, 222, 61, 129, 102, 160, 62, 68, 15, 205, 61, 199, 183, 234, 61, 135, 183, 50, 190, 240, 111, 136, 60, 110, 72, 255, 189, 205, 116, 41, 59, 29, 76, 198, 62, 15, 173, 139, 61, 53, 151, 86, 61, 33, 200, 56, 62, 247, 215, 25, 189, 170, 158, 195, 62, 169, 152, 209, 190, 68, 33, 135, 62, 168, 58, 151, 62, 221, 165, 171, 190, 30, 111, 125, 61, 69, 122, 36, 190, 128, 133, 161, 62, 234, 4, 233, 60, 37, 151, 90, 190, 250, 14, 237, 190, 210, 187, 57, 190, 85, 28, 42, 62, 186, 31, 132, 190, 155, 43, 18, 191, 41, 246, 57, 190, 120, 16, 108, 191, 101, 41, 203, 62, 76, 75, 163, 62, 80, 39, 216, 61, 7, 54, 209, 190, 10, 25, 31, 61, 206, 134, 11, 190, 241, 134, 140, 62, 114, 189, 64, 61, 84, 122, 4, 191, 29, 121, 104, 190, 39, 127, 122, 191, 174, 75, 148, 62, 73, 37, 1, 190, 250, 25, 63, 62, 7, 71, 55, 190, 51, 209, 188, 190, 3, 139, 104, 62, 138, 96, 82, 62, 168, 220, 193, 189, 139, 205, 66, 62, 116, 61, 27, 62, 156, 50, 18, 190, 15, 78, 164, 189, 176, 145, 169, 62, 33, 210, 57, 189, 175, 155, 87, 62, 133, 133, 25, 62, 84, 180, 219, 189, 17, 245, 132, 61, 108, 194, 32, 62, 172, 245, 81, 62, 96, 76, 91, 62, 234, 207, 13, 191, 114, 95, 248, 61, 24, 72, 180, 189, 175, 10, 47, 190, 35, 179, 0, 62, 236, 156, 34, 188, 53, 61, 129, 190, 172, 166, 25, 62, 15, 185, 188, 61, 44, 176, 239, 189, 89, 53, 154, 61, 154, 208, 185, 61, 175, 177, 102, 62, 81, 201, 40, 190, 120, 218, 20, 61, 246, 181, 7, 62, 188, 193, 134, 186, 62, 213, 106, 62, 242, 105, 134, 62, 32, 130, 121, 190, 192, 174, 69, 62, 247, 201, 177, 188, 29, 88, 90, 62, 30, 112, 138, 189, 33, 249, 213, 61, 47, 185, 105, 190, 243, 70, 128, 189, 215, 50, 46, 188, 249, 165, 2, 190, 204, 91, 151, 190, 191, 147, 192, 61, 99, 188, 21, 191, 91, 194, 0, 191, 40, 136, 162, 61, 15, 105, 167, 61, 177, 166, 15, 62, 115, 93, 59, 189, 121, 227, 228, 62, 158, 61, 212, 190, 89, 59, 41, 61, 1, 73, 76, 189, 10, 66, 217, 61, 113, 34, 120, 62, 27, 187, 177, 61, 217, 184, 200, 62, 188, 62, 198, 58, 176, 144, 119, 61, 53, 232, 59, 62, 202, 104, 58, 190, 47, 47, 88, 62, 219, 244, 62, 62, 84, 222, 32, 190, 6, 183, 193, 61, 81, 246, 2, 190, 16, 49, 121, 62, 46, 82, 124, 189, 191, 148, 243, 188, 222, 96, 89, 190, 228, 119, 159, 190, 93, 244, 214, 61, 99, 34, 25, 190, 57, 137, 81, 190, 149, 113, 102, 190, 54, 214, 6, 191, 96, 139, 115, 191, 9, 179, 71, 62, 94, 40, 81, 61, 252, 242, 32, 62, 195, 79, 19, 62, 178, 92, 46, 190, 113, 63, 125, 190, 171, 191, 173, 59, 74, 15, 139, 188, 108, 46, 83, 62, 9, 100, 188, 61, 74, 181, 66, 61, 146, 238, 72, 62, 204, 161, 134, 62, 52, 141, 6, 189, 60, 179, 73, 190, 182, 5, 144, 190, 128, 243, 180, 61, 226, 75, 201, 188, 12, 45, 18, 191, 13, 104, 109, 62, 154, 34, 26, 62, 220, 123, 10, 62, 232, 251, 124, 61, 132, 176, 219, 189, 184, 223, 6, 191, 191, 240, 215, 189, 53, 190, 17, 188, 106, 195, 26, 191, 3, 130, 165, 190, 69, 165, 143, 190, 122, 23, 67, 191, 167, 101, 6, 190, 194, 72, 82, 189, 83, 184, 46, 62, 184, 224, 191, 60, 132, 92, 34, 62, 156, 186, 244, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 102, 95, 249, 189, 195, 102, 246, 189, 25, 27, 7, 190, 250, 11, 139, 188, 17, 63, 53, 61, 251, 172, 49, 190, 111, 57, 201, 189, 192, 140, 187, 61, 15, 223, 240, 61, 101, 160, 122, 59, 142, 252, 147, 189, 246, 142, 254, 186, 137, 125, 234, 189, 199, 75, 18, 61, 44, 159, 41, 189, 31, 225, 17, 62, 39, 112, 137, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 207, 158, 17, 191, 8, 62, 15, 187, 61, 122, 58, 62, 16, 205, 47, 62, 88, 69, 170, 61, 132, 53, 5, 62, 204, 194, 204, 189, 137, 110, 176, 61, 219, 99, 36, 189, 127, 33, 31, 62, 17, 131, 131, 62, 183, 109, 95, 62, 42, 1, 168, 62, 58, 198, 107, 61, 16, 76, 244, 61, 147, 172, 90, 60, 156, 4, 164, 190, 229, 90, 148, 62, 153, 215, 59, 189, 56, 83, 32, 191, 53, 199, 30, 61, 250, 84, 170, 189, 241, 87, 242, 61, 216, 129, 133, 189, 50, 38, 25, 60, 170, 196, 199, 190, 157, 9, 204, 190, 8, 80, 60, 62, 249, 40, 240, 190, 52, 141, 113, 190, 160, 131, 152, 190, 247, 219, 34, 191, 10, 201, 26, 191, 147, 69, 1, 62, 166, 218, 43, 62, 174, 87, 81, 62, 10, 1, 244, 188, 57, 153, 201, 60, 164, 123, 177, 190, 61, 42, 196, 61, 166, 250, 167, 61, 204, 131, 35, 62, 214, 89, 55, 61, 200, 214, 48, 61, 105, 228, 174, 62, 122, 96, 108, 189, 137, 238, 178, 61, 4, 122, 146, 189, 191, 55, 14, 191, 141, 86, 140, 62, 245, 65, 9, 62, 73, 75, 56, 191, 161, 72, 159, 62, 211, 2, 173, 60, 217, 65, 51, 62, 82, 227, 77, 190, 75, 233, 47, 190, 29, 85, 75, 190, 81, 140, 142, 190, 112, 49, 105, 62, 125, 254, 167, 190, 155, 217, 225, 189, 36, 3, 80, 190, 124, 162, 16, 191, 150, 213, 146, 62, 0, 223, 45, 62, 111, 27, 104, 62, 183, 163, 33, 191, 22, 219, 4, 188, 60, 39, 236, 190, 102, 97, 239, 189, 5, 83, 51, 62, 12, 21, 2, 61, 173, 204, 242, 187, 167, 175, 15, 62, 139, 183, 19, 62, 218, 234, 82, 190, 91, 218, 166, 189, 104, 14, 148, 61, 45, 65, 211, 190, 135, 56, 223, 62, 38, 210, 124, 62, 22, 235, 31, 190, 198, 50, 242, 61, 231, 53, 135, 62, 109, 140, 3, 62, 62, 190, 1, 190, 104, 8, 189, 62, 202, 210, 232, 189, 37, 146, 198, 189, 211, 34, 195, 61, 59, 236, 34, 62, 240, 228, 135, 61, 83, 105, 116, 190, 191, 64, 104, 189, 196, 10, 51, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 205, 96, 193, 189, 247, 227, 63, 190, 241, 119, 45, 190, 142, 99, 167, 190, 64, 69, 7, 189, 29, 252, 119, 187, 6, 146, 36, 189, 202, 101, 143, 61, 161, 25, 21, 62, 64, 179, 192, 61, 165, 143, 54, 190, 215, 176, 107, 59, 3, 52, 155, 60, 142, 188, 11, 62, 242, 39, 32, 190, 120, 1, 11, 190, 2, 189, 242, 188, 145, 204, 8, 190, 183, 248, 7, 62, 164, 30, 99, 61, 170, 24, 152, 189, 60, 227, 223, 61, 126, 84, 227, 189, 227, 246, 28, 62, 189, 196, 252, 189, 121, 174, 168, 61, 147, 219, 128, 189, 189, 136, 8, 190, 100, 93, 53, 62, 12, 82, 34, 190, 108, 73, 32, 61, 43, 60, 135, 188, 157, 189, 156, 189, 229, 124, 163, 188, 58, 252, 76, 190, 152, 110, 164, 190, 67, 168, 24, 62, 254, 71, 135, 189, 155, 207, 76, 190, 41, 84, 220, 61, 180, 210, 237, 60, 111, 178, 81, 189, 76, 164, 202, 61, 233, 47, 62, 62, 79, 109, 30, 189, 91, 158, 48, 61, 203, 19, 162, 189, 109, 213, 234, 61, 216, 231, 3, 62, 133, 126, 23, 190, 4, 202, 73, 186, 130, 62, 236, 61, 154, 178, 71, 189, 137, 144, 182, 189, 99, 20, 55, 62, 11, 185, 129, 61, 137, 229, 168, 61, 92, 166, 229, 60, 40, 55, 201, 187, 129, 9, 0, 61, 246, 20, 151, 61, 44, 154, 133, 60, 120, 69, 44, 189, 23, 67, 80, 61, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 157, 73, 157, 62, 165, 86, 31, 189, 79, 218, 19, 62, 78, 4, 101, 190, 202, 52, 28, 61, 205, 0, 123, 190, 141, 36, 35, 62, 107, 244, 0, 190, 68, 28, 130, 190, 107, 154, 237, 61, 194, 54, 48, 190, 177, 9, 175, 62, 1, 212, 201, 189, 34, 135, 123, 188, 161, 64, 161, 59, 8, 163, 134, 190, 179, 125, 231, 61, 71, 66, 72, 62, 109, 42, 238, 189, 200, 51, 149, 188, 103, 216, 10, 190, 153, 188, 164, 188, 109, 85, 16, 190, 216, 240, 64, 62, 31, 194, 81, 189, 239, 88, 246, 61, 239, 7, 212, 61, 50, 28, 151, 61, 64, 82, 150, 62, 144, 246, 210, 189, 202, 52, 85, 62, 197, 105, 146, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 113, 105, 83, 62, 173, 150, 129, 62, 222, 39, 138, 61, 177, 147, 128, 189, 177, 216, 42, 62, 110, 176, 174, 61, 131, 146, 91, 190, 207, 69, 31, 61, 111, 167, 76, 62, 114, 203, 63, 190, 101, 187, 38, 61, 205, 172, 166, 62, 208, 22, 152, 61, 84, 218, 65, 60, 142, 109, 88, 62, 50, 91, 138, 189, 147, 250, 155, 59, 180, 216, 144, 188, 49, 38, 168, 58, 28, 3, 131, 61, 63, 159, 98, 190, 253, 24, 16, 190, 229, 161, 20, 190, 194, 177, 150, 190, 255, 235, 236, 190, 189, 159, 166, 60, 214, 151, 15, 60, 166, 80, 58, 189, 249, 96, 4, 190, 110, 110, 92, 62, 119, 0, 138, 61, 134, 254, 110, 190, 125, 2, 145, 188, 154, 153, 11, 190, 107, 109, 247, 189, 11, 239, 89, 62, 99, 108, 208, 61, 254, 58, 195, 61, 214, 141, 27, 190, 136, 116, 48, 190, 245, 205, 3, 62, 50, 234, 153, 61, 70, 151, 114, 62, 154, 240, 57, 58, 25, 58, 84, 62, 188, 16, 221, 60, 40, 13, 105, 62, 147, 224, 139, 62, 40, 74, 242, 189, 60, 231, 32, 62, 65, 124, 216, 189, 218, 69, 159, 59, 237, 188, 7, 62, 105, 85, 39, 189, 30, 235, 2, 188, 174, 182, 201, 188, 220, 161, 225, 189, 217, 46, 20, 61, 113, 85, 229, 189, 254, 166, 119, 188, 84, 137, 135, 61, 211, 155, 175, 60, 173, 122, 218, 189, 24, 221, 182, 190, 31, 122, 67, 190, 242, 42, 153, 62, 45, 67, 76, 62, 242, 125, 133, 62, 179, 2, 31, 61, 88, 221, 26, 62, 253, 50, 72, 62, 233, 51, 51, 62, 173, 42, 121, 62, 42, 28, 149, 190, 160, 237, 10, 62, 236, 227, 114, 189, 198, 230, 166, 62, 100, 129, 195, 189, 33, 20, 136, 189, 75, 139, 228, 189, 99, 37, 92, 62, 182, 149, 227, 190, 238, 175, 199, 189, 26, 15, 243, 61, 60, 133, 5, 61, 183, 28, 228, 189, 223, 201, 0, 62, 168, 217, 128, 62, 120, 46, 169, 189, 201, 89, 20, 62, 184, 116, 29, 187, 231, 48, 238, 61, 1, 171, 125, 188, 139, 2, 67, 61, 114, 124, 148, 62, 155, 175, 184, 62, 207, 227, 20, 191, 203, 93, 147, 189, 43, 223, 22, 61, 145, 33, 196, 62, 222, 142, 72, 189, 37, 140, 198, 62, 102, 82, 57, 188, 114, 177, 218, 60, 166, 220, 200, 189, 192, 100, 39, 59, 159, 60, 9, 62, 87, 181, 69, 188, 206, 254, 70, 62, 53, 146, 191, 61, 132, 95, 13, 62, 43, 241, 210, 62, 5, 84, 160, 190, 148, 3, 104, 62, 57, 149, 151, 62, 23, 158, 161, 190, 142, 229, 177, 60, 201, 197, 75, 61, 228, 7, 120, 61, 81, 132, 68, 190, 8, 241, 202, 61, 130, 203, 19, 190, 67, 100, 84, 188, 51, 225, 20, 62, 85, 36, 214, 189, 155, 133, 55, 190, 28, 86, 51, 190, 193, 93, 190, 190, 227, 54, 135, 61, 135, 144, 47, 190, 205, 185, 248, 60, 86, 64, 12, 190, 7, 200, 239, 60, 13, 235, 26, 62, 47, 186, 144, 189, 244, 171, 255, 189, 31, 124, 24, 62, 146, 196, 31, 190, 178, 220, 199, 189, 210, 110, 93, 189, 21, 3, 33, 62, 220, 29, 239, 189, 242, 109, 18, 62, 87, 76, 111, 189, 161, 81, 180, 189, 20, 24, 135, 61, 97, 171, 21, 190, 173, 8, 71, 189, 12, 144, 21, 60, 188, 214, 20, 189, 152, 180, 14, 190, 143, 177, 196, 61, 145, 207, 25, 190, 211, 21, 14, 190, 225, 254, 240, 188, 208, 141, 143, 61, 64, 181, 234, 187, 197, 205, 52, 190, 17, 65, 1, 189, 127, 74, 167, 60, 177, 176, 25, 191, 19, 131, 194, 61, 243, 180, 6, 190, 3, 189, 170, 190, 185, 72, 4, 189, 146, 198, 218, 188, 48, 150, 223, 190, 238, 220, 22, 62, 170, 217, 196, 190, 87, 228, 49, 190, 59, 124, 53, 190, 26, 252, 12, 62, 100, 218, 208, 186, 92, 35, 19, 191, 66, 161, 41, 190, 18, 178, 236, 61, 34, 44, 228, 60, 135, 167, 147, 61, 13, 13, 129, 62, 194, 211, 128, 61, 244, 240, 81, 61, 12, 37, 59, 61, 244, 240, 10, 62, 209, 236, 50, 61, 168, 130, 177, 61, 68, 215, 183, 189, 53, 227, 107, 61, 50, 102, 94, 187, 153, 7, 164, 189, 150, 104, 34, 190, 161, 154, 49, 190, 98, 182, 152, 189, 198, 55, 222, 188, 165, 182, 184, 61, 112, 249, 43, 190, 21, 153, 238, 190, 77, 141, 162, 61, 16, 216, 113, 61, 194, 99, 85, 190, 221, 14, 187, 189, 106, 191, 23, 59, 39, 225, 43, 189, 190, 219, 72, 190, 143, 91, 97, 62, 162, 170, 128, 188, 175, 203, 72, 190, 69, 107, 149, 61, 216, 150, 32, 190, 229, 140, 71, 62, 174, 73, 139, 61, 225, 190, 36, 62, 16, 101, 109, 189, 102, 153, 106, 189, 163, 68, 26, 62, 104, 44, 8, 189, 132, 233, 54, 62, 109, 105, 159, 189, 186, 5, 154, 188, 129, 255, 72, 61, 188, 37, 100, 62, 104, 200, 8, 62, 54, 140, 99, 189, 106, 61, 4, 61, 10, 246, 27, 62, 9, 213, 130, 62, 217, 170, 0, 62, 47, 14, 245, 61, 198, 19, 142, 62, 102, 112, 35, 62, 51, 226, 225, 61, 111, 120, 11, 60, 136, 158, 34, 190, 238, 49, 87, 190, 109, 245, 163, 59, 223, 200, 141, 190, 234, 160, 180, 61, 89, 193, 46, 61, 73, 26, 200, 189, 172, 236, 12, 190, 175, 145, 23, 62, 137, 156, 131, 62, 203, 192, 16, 190, 31, 227, 144, 61, 208, 159, 144, 62, 96, 112, 199, 61, 67, 162, 52, 190, 94, 38, 6, 62, 170, 204, 29, 62, 227, 185, 232, 189, 113, 206, 22, 188, 228, 58, 105, 62, 13, 146, 29, 60, 189, 255, 19, 62, 112, 185, 62, 61, 45, 30, 201, 61, 121, 16, 64, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 125, 245, 190, 62, 168, 234, 140, 61, 104, 33, 26, 190, 185, 126, 181, 189, 69, 153, 144, 61, 239, 147, 5, 62, 247, 125, 222, 60, 17, 9, 15, 62, 214, 240, 97, 61, 158, 207, 10, 190, 76, 60, 155, 188, 63, 232, 70, 189, 163, 51, 90, 62, 223, 80, 74, 61, 83, 227, 254, 61, 84, 134, 61, 61, 125, 213, 163, 188, 80, 99, 53, 190, 218, 231, 47, 190, 2, 226, 15, 190, 110, 41, 246, 188, 101, 193, 112, 61, 169, 160, 212, 189, 225, 138, 221, 189, 101, 213, 25, 190, 191, 75, 132, 62, 1, 234, 46, 62, 25, 11, 59, 190, 188, 133, 40, 61, 92, 21, 122, 62, 122, 58, 102, 188, 65, 163, 80, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 29, 35, 40, 189, 139, 9, 152, 62, 244, 211, 58, 62, 107, 53, 95, 61, 167, 247, 182, 189, 213, 146, 16, 189, 28, 140, 146, 62, 57, 169, 119, 62, 151, 197, 128, 61, 103, 236, 1, 62, 178, 139, 31, 62, 40, 112, 138, 189, 182, 130, 33, 61, 104, 196, 225, 60, 222, 58, 166, 62, 99, 67, 39, 188, 140, 0, 214, 60, 44, 39, 2, 190, 148, 134, 24, 190, 35, 208, 20, 62, 176, 0, 23, 190, 0, 9, 11, 190, 52, 142, 55, 190, 196, 16, 135, 62, 146, 112, 29, 61, 93, 7, 184, 189, 248, 184, 92, 188, 254, 175, 33, 188, 226, 67, 96, 62, 13, 55, 152, 60, 129, 249, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 17, 86, 246, 62, 91, 178, 154, 189, 198, 188, 65, 62, 94, 148, 135, 190, 220, 70, 38, 191, 197, 188, 250, 189, 9, 42, 35, 63, 46, 200, 48, 191, 208, 86, 4, 62, 158, 37, 227, 62, 242, 141, 3, 63, 36, 182, 220, 188, 222, 217, 50, 63, 243, 151, 41, 63, 79, 122, 213, 190, 98, 86, 192, 60, 109, 221, 220, 61, 154, 227, 139, 60, 147, 40, 172, 61, 44, 197, 130, 190, 110, 79, 164, 61, 100, 222, 67, 190, 178, 100, 60, 62, 116, 117, 238, 62, 72, 135, 205, 62, 85, 216, 21, 61, 16, 181, 169, 62, 45, 160, 134, 60, 237, 102, 136, 190, 8, 220, 23, 190, 91, 197, 203, 61, 188, 156, 177, 61, 129, 152, 88, 59, 55, 79, 52, 190, 80, 223, 210, 188, 37, 86, 40, 190, 189, 59, 38, 61, 231, 22, 226, 60, 211, 81, 164, 189, 40, 71, 181, 61, 155, 155, 104, 190, 36, 163, 187, 61, 6, 222, 3, 189, 216, 182, 17, 190, 196, 179, 78, 62, 93, 11, 77, 190, 201, 38, 107, 190, 150, 71, 232, 60, 123, 225, 25, 189, 177, 55, 192, 189, 24, 91, 3, 190, 95, 68, 23, 62, 34, 48, 40, 190, 63, 56, 135, 61, 136, 215, 35, 62, 160, 230, 213, 61, 179, 120, 59, 62, 45, 158, 231, 61, 92, 165, 61, 190, 226, 119, 153, 190, 154, 25, 212, 188, 209, 27, 86, 61, 57, 164, 40, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 58, 135, 189, 186, 10, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {53, 15, 77, 63, 161, 232, 32, 190, 151, 70, 105, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 58, 21, 63, 54, 230, 86, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}