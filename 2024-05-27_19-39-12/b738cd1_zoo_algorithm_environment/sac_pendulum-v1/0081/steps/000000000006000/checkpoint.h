// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 78, 32, 63, 151, 71, 139, 63, 123, 124, 15, 62, 224, 203, 8, 63, 147, 250, 15, 63, 174, 161, 8, 62, 116, 87, 86, 190, 205, 101, 47, 62, 135, 162, 130, 61, 191, 16, 9, 63, 132, 207, 39, 191, 213, 173, 134, 190, 121, 49, 27, 62, 70, 177, 141, 189, 85, 32, 179, 188, 138, 222, 133, 62, 213, 245, 232, 190, 134, 11, 158, 190, 101, 17, 134, 189, 103, 90, 194, 62, 173, 101, 149, 190, 115, 113, 51, 187, 38, 255, 44, 62, 190, 215, 144, 57, 235, 238, 202, 189, 127, 235, 21, 191, 249, 92, 42, 63, 142, 194, 54, 191, 55, 80, 43, 63, 244, 225, 159, 62, 119, 157, 31, 190, 24, 226, 225, 189, 211, 211, 52, 63, 165, 87, 77, 63, 66, 230, 173, 62, 190, 148, 45, 62, 203, 200, 143, 61, 104, 177, 48, 63, 88, 157, 246, 190, 125, 206, 1, 190, 101, 201, 102, 63, 188, 112, 12, 188, 50, 160, 218, 61, 141, 241, 118, 63, 250, 17, 248, 62, 235, 207, 63, 62, 176, 218, 219, 190, 95, 124, 4, 191, 114, 201, 10, 63, 164, 221, 75, 63, 156, 196, 215, 190, 104, 27, 54, 191, 168, 64, 132, 190, 205, 112, 130, 62, 137, 228, 36, 63, 111, 180, 180, 190, 29, 31, 13, 191, 253, 77, 245, 190, 96, 5, 30, 191, 199, 65, 42, 191, 90, 23, 101, 190, 6, 87, 66, 190, 225, 244, 19, 189, 185, 234, 16, 62, 143, 58, 25, 190, 178, 100, 153, 188, 3, 112, 68, 63, 73, 152, 125, 191, 169, 28, 78, 190, 81, 142, 3, 191, 198, 246, 255, 61, 86, 208, 2, 191, 109, 137, 187, 190, 141, 40, 186, 191, 77, 128, 147, 190, 27, 232, 187, 187, 149, 10, 120, 62, 236, 210, 114, 62, 14, 45, 155, 62, 74, 141, 140, 63, 41, 186, 149, 62, 213, 177, 196, 62, 182, 25, 9, 191, 12, 181, 55, 188, 251, 84, 2, 191, 255, 26, 167, 191, 204, 132, 38, 191, 240, 241, 67, 62, 13, 213, 36, 62, 122, 244, 140, 62, 170, 54, 39, 62, 33, 120, 115, 61, 48, 144, 22, 63, 18, 123, 84, 190, 12, 150, 144, 62, 186, 186, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 88, 213, 190, 5, 69, 183, 62, 187, 170, 223, 62, 144, 66, 191, 190, 106, 173, 9, 191, 240, 247, 236, 190, 237, 55, 212, 190, 92, 107, 229, 190, 200, 147, 56, 60, 225, 40, 188, 62, 222, 100, 211, 189, 139, 139, 49, 62, 211, 76, 82, 62, 84, 192, 9, 62, 123, 183, 237, 62, 10, 163, 242, 190, 98, 101, 119, 61, 127, 155, 144, 62, 26, 125, 90, 62, 195, 12, 14, 191, 109, 241, 35, 63, 253, 145, 179, 190, 231, 39, 159, 62, 135, 22, 234, 61, 12, 215, 59, 62, 39, 137, 33, 191, 224, 6, 20, 62, 3, 200, 185, 62, 1, 26, 250, 189, 184, 64, 40, 191, 36, 197, 207, 188, 153, 107, 18, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 44, 39, 190, 88, 98, 140, 61, 213, 255, 209, 188, 245, 226, 142, 189, 103, 24, 6, 62, 168, 10, 42, 61, 34, 128, 212, 61, 209, 84, 45, 62, 216, 21, 22, 190, 112, 193, 254, 189, 242, 192, 107, 189, 163, 235, 95, 189, 124, 99, 149, 189, 26, 18, 19, 61, 50, 64, 4, 190, 59, 210, 27, 61, 10, 52, 77, 188, 152, 5, 30, 61, 190, 130, 166, 189, 218, 152, 105, 61, 255, 95, 49, 190, 52, 188, 34, 190, 16, 127, 187, 61, 27, 117, 141, 189, 76, 36, 95, 189, 107, 207, 232, 189, 137, 220, 198, 60, 101, 255, 105, 189, 138, 6, 50, 189, 78, 154, 43, 62, 186, 11, 250, 61, 233, 36, 128, 189, 246, 175, 143, 190, 185, 189, 165, 189, 73, 106, 117, 60, 206, 165, 124, 189, 224, 42, 43, 62, 133, 173, 254, 58, 3, 87, 115, 189, 125, 243, 82, 61, 203, 82, 227, 61, 223, 159, 38, 62, 231, 20, 15, 62, 198, 20, 28, 189, 111, 29, 82, 62, 198, 41, 171, 62, 173, 39, 74, 62, 239, 176, 92, 190, 195, 234, 84, 191, 0, 116, 6, 62, 105, 8, 181, 189, 91, 111, 92, 191, 213, 128, 7, 61, 106, 185, 20, 189, 69, 66, 22, 189, 76, 116, 234, 61, 129, 239, 230, 189, 2, 16, 88, 61, 95, 47, 65, 190, 209, 32, 160, 189, 162, 26, 47, 191, 193, 205, 70, 61, 20, 44, 151, 189, 32, 115, 168, 190, 73, 57, 45, 62, 150, 86, 212, 188, 65, 173, 56, 62, 206, 62, 250, 190, 206, 73, 53, 61, 116, 17, 228, 60, 55, 95, 211, 188, 186, 113, 33, 62, 235, 198, 11, 190, 149, 131, 204, 61, 252, 115, 228, 59, 36, 0, 10, 61, 201, 181, 23, 190, 226, 47, 152, 189, 59, 71, 32, 62, 10, 80, 94, 189, 218, 204, 46, 62, 116, 225, 77, 189, 159, 60, 104, 62, 46, 116, 7, 189, 81, 82, 79, 62, 115, 90, 102, 61, 155, 112, 149, 62, 235, 102, 221, 61, 82, 214, 144, 61, 146, 88, 214, 188, 56, 130, 148, 189, 68, 221, 171, 62, 32, 244, 189, 58, 55, 176, 52, 190, 114, 56, 111, 190, 167, 40, 85, 61, 43, 40, 219, 190, 164, 214, 64, 189, 214, 52, 113, 190, 94, 108, 51, 189, 35, 67, 22, 61, 180, 130, 228, 188, 206, 150, 70, 61, 40, 199, 6, 190, 149, 210, 45, 62, 100, 119, 13, 189, 79, 134, 91, 62, 161, 240, 93, 61, 176, 13, 176, 189, 204, 186, 108, 190, 62, 148, 198, 188, 145, 213, 21, 190, 142, 212, 22, 62, 171, 196, 71, 190, 10, 40, 46, 62, 4, 71, 194, 61, 147, 73, 138, 61, 240, 238, 107, 60, 146, 209, 134, 189, 117, 6, 21, 190, 209, 177, 14, 60, 93, 86, 87, 62, 30, 61, 155, 189, 100, 192, 52, 61, 1, 211, 66, 62, 32, 177, 146, 62, 45, 250, 143, 62, 39, 156, 9, 61, 185, 43, 162, 62, 128, 13, 97, 62, 45, 85, 66, 62, 204, 169, 37, 191, 97, 220, 52, 61, 73, 245, 141, 190, 176, 73, 130, 61, 140, 219, 84, 61, 40, 247, 255, 61, 133, 44, 6, 190, 174, 72, 117, 189, 135, 128, 206, 62, 169, 151, 174, 190, 40, 117, 81, 61, 21, 27, 2, 190, 106, 92, 79, 190, 30, 116, 150, 62, 21, 170, 130, 62, 125, 38, 221, 189, 123, 71, 208, 62, 90, 132, 204, 62, 31, 55, 166, 61, 111, 252, 137, 60, 79, 121, 217, 61, 93, 48, 114, 189, 232, 223, 132, 190, 245, 35, 89, 62, 54, 249, 173, 61, 4, 223, 242, 61, 25, 163, 131, 188, 43, 137, 211, 61, 97, 172, 9, 190, 29, 2, 231, 190, 92, 100, 135, 190, 247, 232, 54, 62, 48, 204, 24, 189, 86, 188, 26, 190, 60, 93, 138, 190, 105, 29, 154, 190, 199, 149, 174, 61, 221, 11, 131, 62, 58, 175, 128, 62, 86, 50, 78, 62, 3, 59, 163, 190, 11, 177, 254, 61, 117, 59, 219, 190, 156, 241, 77, 190, 229, 132, 157, 189, 98, 101, 25, 62, 227, 54, 89, 62, 198, 58, 234, 59, 184, 46, 161, 190, 2, 137, 252, 60, 90, 44, 82, 61, 130, 30, 87, 62, 153, 171, 4, 191, 175, 217, 180, 62, 231, 202, 249, 59, 240, 121, 10, 190, 28, 232, 143, 62, 110, 230, 143, 189, 94, 10, 235, 61, 214, 107, 123, 190, 164, 196, 194, 189, 66, 111, 171, 189, 118, 175, 86, 188, 88, 253, 150, 189, 154, 202, 50, 190, 182, 213, 76, 189, 200, 111, 199, 189, 168, 204, 224, 60, 210, 131, 44, 190, 189, 202, 199, 61, 86, 255, 246, 61, 242, 170, 78, 189, 110, 113, 126, 189, 148, 217, 132, 61, 176, 255, 37, 190, 213, 207, 232, 188, 184, 103, 3, 190, 212, 21, 119, 61, 199, 134, 46, 190, 171, 200, 98, 189, 112, 26, 194, 61, 67, 189, 70, 190, 248, 66, 63, 189, 88, 32, 83, 61, 23, 49, 114, 189, 233, 198, 245, 189, 186, 186, 21, 62, 135, 65, 82, 61, 66, 238, 224, 61, 75, 141, 138, 189, 64, 182, 13, 62, 175, 232, 1, 190, 46, 98, 67, 189, 103, 14, 89, 191, 246, 152, 26, 190, 119, 22, 163, 61, 152, 129, 217, 62, 68, 15, 205, 61, 254, 114, 23, 62, 197, 181, 48, 190, 240, 111, 136, 60, 63, 216, 248, 189, 178, 228, 23, 61, 247, 235, 207, 62, 91, 69, 224, 60, 67, 202, 12, 62, 186, 135, 185, 62, 8, 252, 53, 60, 138, 1, 239, 62, 253, 59, 197, 190, 147, 47, 45, 62, 98, 224, 159, 62, 3, 117, 179, 190, 221, 228, 255, 188, 69, 122, 36, 190, 41, 136, 159, 62, 152, 117, 124, 61, 102, 29, 221, 190, 188, 138, 250, 190, 83, 156, 153, 190, 32, 53, 180, 61, 106, 115, 189, 190, 191, 61, 34, 191, 159, 254, 255, 189, 33, 2, 77, 191, 210, 193, 214, 62, 126, 197, 157, 62, 69, 77, 129, 188, 26, 29, 235, 190, 10, 25, 31, 61, 35, 75, 27, 190, 231, 75, 145, 62, 114, 189, 64, 61, 200, 76, 236, 190, 70, 71, 247, 190, 5, 54, 125, 191, 251, 123, 142, 62, 162, 195, 33, 190, 72, 92, 28, 189, 151, 23, 192, 190, 130, 46, 188, 190, 97, 77, 86, 62, 18, 0, 240, 61, 78, 154, 183, 189, 135, 250, 66, 62, 139, 56, 163, 61, 156, 50, 18, 190, 97, 108, 149, 189, 211, 129, 145, 62, 28, 106, 72, 60, 69, 119, 81, 62, 219, 178, 11, 62, 160, 15, 106, 189, 97, 44, 143, 61, 238, 48, 33, 62, 26, 70, 39, 62, 194, 56, 84, 62, 240, 189, 5, 191, 127, 233, 57, 62, 26, 16, 48, 189, 33, 198, 14, 190, 35, 179, 0, 62, 152, 164, 166, 60, 35, 7, 185, 190, 172, 166, 25, 62, 15, 153, 150, 61, 223, 7, 177, 189, 24, 20, 134, 61, 81, 0, 26, 62, 171, 132, 102, 62, 59, 195, 225, 189, 72, 140, 204, 61, 241, 194, 28, 62, 237, 122, 144, 188, 9, 71, 85, 62, 49, 36, 153, 62, 240, 178, 92, 190, 125, 194, 85, 62, 247, 201, 177, 188, 71, 49, 124, 62, 20, 140, 225, 188, 67, 149, 56, 61, 76, 99, 49, 190, 128, 79, 167, 189, 142, 136, 0, 189, 183, 90, 19, 190, 139, 14, 147, 190, 61, 86, 214, 61, 12, 50, 17, 191, 57, 128, 92, 191, 64, 112, 163, 60, 79, 99, 214, 188, 245, 244, 159, 62, 115, 93, 59, 189, 41, 206, 3, 63, 56, 230, 177, 190, 89, 59, 41, 61, 48, 83, 28, 189, 114, 156, 202, 61, 167, 102, 134, 62, 189, 120, 7, 61, 229, 165, 5, 63, 248, 11, 62, 62, 223, 133, 152, 61, 22, 29, 144, 62, 153, 70, 226, 189, 59, 146, 139, 61, 8, 222, 108, 62, 9, 253, 55, 190, 55, 232, 62, 189, 81, 246, 2, 190, 132, 157, 132, 62, 172, 1, 73, 59, 20, 134, 143, 190, 50, 227, 133, 190, 15, 13, 0, 191, 60, 48, 212, 60, 157, 244, 130, 190, 245, 241, 125, 190, 35, 255, 33, 190, 94, 204, 212, 190, 39, 221, 156, 191, 9, 66, 42, 62, 166, 29, 137, 61, 221, 163, 136, 62, 195, 79, 19, 62, 219, 46, 162, 190, 161, 245, 9, 62, 171, 191, 173, 59, 230, 121, 37, 61, 185, 233, 96, 62, 248, 220, 4, 62, 135, 54, 61, 61, 90, 48, 159, 62, 219, 81, 204, 62, 91, 168, 14, 60, 66, 233, 151, 190, 140, 39, 139, 190, 142, 148, 106, 61, 156, 178, 142, 188, 14, 51, 17, 191, 82, 11, 100, 62, 154, 34, 26, 62, 166, 201, 53, 62, 187, 249, 98, 62, 160, 58, 153, 190, 74, 178, 12, 191, 160, 222, 130, 190, 247, 56, 70, 188, 173, 252, 127, 191, 238, 196, 186, 190, 65, 134, 69, 190, 53, 7, 11, 190, 167, 101, 6, 190, 194, 72, 82, 189, 83, 184, 46, 62, 184, 224, 191, 60, 132, 92, 34, 62, 156, 186, 244, 61, 4, 203, 33, 190, 80, 7, 135, 60, 79, 53, 32, 190, 202, 94, 10, 190, 107, 44, 19, 62, 109, 174, 193, 61, 102, 95, 249, 189, 195, 102, 246, 189, 25, 27, 7, 190, 250, 11, 139, 188, 17, 63, 53, 61, 251, 172, 49, 190, 111, 57, 201, 189, 192, 140, 187, 61, 15, 223, 240, 61, 101, 160, 122, 59, 142, 252, 147, 189, 246, 142, 254, 186, 137, 125, 234, 189, 199, 75, 18, 61, 44, 159, 41, 189, 31, 225, 17, 62, 39, 112, 137, 61, 102, 217, 102, 61, 11, 50, 138, 61, 228, 180, 188, 189, 144, 13, 67, 191, 76, 224, 246, 188, 243, 174, 51, 62, 173, 170, 194, 62, 88, 69, 170, 61, 100, 95, 82, 62, 173, 39, 97, 59, 137, 110, 176, 61, 131, 23, 10, 189, 226, 203, 27, 62, 136, 113, 126, 62, 55, 97, 82, 62, 125, 145, 228, 62, 245, 232, 131, 62, 114, 67, 37, 62, 167, 210, 142, 61, 240, 205, 166, 190, 255, 24, 87, 62, 221, 231, 242, 188, 181, 92, 43, 191, 239, 170, 111, 187, 250, 84, 170, 189, 225, 198, 42, 62, 73, 34, 232, 60, 100, 47, 59, 190, 99, 217, 0, 191, 88, 184, 3, 191, 64, 166, 44, 62, 48, 141, 69, 191, 251, 52, 185, 190, 49, 253, 121, 190, 70, 230, 137, 190, 55, 196, 60, 191, 149, 10, 204, 61, 61, 54, 37, 62, 36, 152, 172, 62, 10, 1, 244, 188, 159, 165, 254, 60, 35, 62, 197, 190, 61, 42, 196, 61, 122, 49, 91, 61, 5, 177, 41, 62, 15, 7, 130, 60, 115, 132, 203, 60, 178, 23, 235, 62, 85, 247, 192, 61, 238, 100, 230, 61, 42, 179, 99, 189, 127, 52, 8, 191, 145, 156, 93, 62, 48, 105, 34, 62, 97, 153, 75, 191, 28, 31, 137, 62, 211, 2, 173, 60, 90, 212, 68, 62, 205, 227, 233, 189, 20, 99, 182, 190, 19, 132, 140, 190, 116, 213, 197, 190, 69, 187, 54, 62, 170, 71, 33, 191, 72, 233, 78, 190, 77, 7, 76, 190, 107, 133, 172, 190, 145, 15, 183, 62, 238, 44, 82, 62, 192, 61, 142, 62, 233, 202, 75, 191, 22, 219, 4, 188, 113, 79, 241, 190, 206, 124, 248, 189, 5, 83, 51, 62, 185, 104, 41, 188, 98, 147, 218, 188, 74, 210, 202, 61, 122, 32, 33, 62, 228, 147, 116, 190, 255, 172, 25, 190, 127, 75, 35, 61, 196, 55, 211, 190, 195, 169, 195, 62, 110, 186, 166, 62, 5, 244, 34, 190, 212, 92, 25, 62, 80, 151, 189, 62, 109, 140, 3, 62, 58, 146, 248, 189, 73, 17, 192, 62, 125, 144, 117, 61, 254, 82, 39, 190, 90, 151, 42, 62, 132, 106, 99, 62, 254, 76, 247, 61, 160, 60, 170, 190, 110, 150, 23, 190, 102, 197, 55, 62, 29, 43, 244, 61, 253, 241, 37, 190, 255, 98, 181, 189, 178, 106, 36, 189, 144, 212, 136, 189, 50, 240, 151, 188, 18, 211, 163, 189, 202, 203, 5, 62, 165, 176, 137, 61, 115, 178, 58, 190, 7, 36, 140, 189, 80, 239, 185, 188, 198, 159, 93, 60, 55, 17, 57, 60, 89, 97, 234, 189, 110, 35, 240, 189, 192, 44, 33, 190, 222, 17, 67, 61, 255, 210, 3, 190, 214, 133, 119, 61, 48, 192, 126, 188, 154, 83, 5, 60, 32, 214, 183, 189, 222, 112, 64, 189, 162, 213, 207, 61, 34, 185, 191, 189, 36, 76, 147, 189, 108, 187, 224, 188, 141, 238, 247, 189, 11, 153, 49, 189, 114, 2, 111, 189, 176, 147, 82, 189, 184, 226, 41, 190, 1, 142, 213, 190, 74, 220, 153, 190, 20, 99, 144, 190, 64, 69, 7, 189, 63, 4, 0, 61, 99, 58, 192, 189, 202, 101, 143, 61, 195, 161, 191, 61, 204, 124, 112, 61, 178, 164, 33, 190, 108, 238, 191, 190, 83, 197, 96, 189, 4, 168, 142, 61, 75, 234, 155, 190, 192, 172, 10, 190, 46, 169, 222, 189, 53, 107, 228, 189, 243, 17, 237, 61, 27, 214, 137, 61, 68, 48, 159, 187, 60, 227, 223, 61, 63, 166, 140, 189, 86, 111, 15, 62, 235, 35, 121, 60, 121, 174, 168, 61, 79, 229, 130, 189, 77, 125, 35, 189, 191, 25, 80, 62, 12, 82, 34, 190, 108, 186, 21, 61, 182, 27, 77, 189, 115, 171, 28, 189, 171, 218, 199, 61, 122, 213, 84, 190, 167, 83, 182, 190, 67, 168, 24, 62, 11, 254, 129, 189, 216, 197, 44, 190, 41, 84, 220, 61, 110, 254, 57, 189, 104, 165, 42, 190, 65, 26, 241, 59, 166, 6, 142, 62, 138, 147, 238, 188, 34, 244, 91, 61, 185, 54, 237, 188, 185, 193, 212, 61, 41, 219, 27, 62, 213, 229, 137, 190, 242, 9, 41, 60, 38, 106, 233, 61, 16, 210, 76, 189, 137, 144, 182, 189, 9, 242, 64, 62, 81, 104, 128, 61, 104, 24, 162, 60, 130, 100, 0, 60, 70, 140, 71, 61, 210, 16, 51, 61, 153, 170, 69, 61, 236, 230, 233, 188, 83, 242, 198, 189, 119, 187, 133, 61, 247, 144, 171, 60, 244, 120, 24, 190, 83, 45, 0, 190, 114, 44, 11, 61, 245, 161, 211, 61, 123, 180, 232, 61, 250, 244, 216, 61, 226, 51, 225, 189, 165, 253, 228, 189, 175, 51, 177, 189, 71, 207, 75, 189, 223, 201, 7, 190, 34, 0, 155, 61, 240, 27, 13, 190, 224, 109, 173, 60, 236, 203, 61, 190, 82, 126, 169, 61, 143, 17, 21, 61, 93, 197, 91, 189, 173, 222, 249, 61, 37, 57, 11, 62, 209, 210, 116, 189, 135, 178, 13, 190, 13, 37, 73, 190, 66, 179, 153, 189, 152, 12, 22, 190, 176, 233, 168, 61, 208, 198, 189, 189, 123, 45, 130, 189, 161, 17, 210, 189, 132, 204, 81, 188, 203, 190, 168, 61, 18, 123, 230, 62, 28, 96, 95, 189, 214, 212, 76, 62, 162, 254, 16, 191, 202, 52, 28, 61, 1, 183, 171, 190, 227, 13, 88, 62, 107, 244, 0, 190, 140, 160, 117, 190, 252, 210, 59, 61, 2, 73, 99, 190, 117, 222, 139, 62, 161, 139, 168, 189, 84, 221, 50, 61, 78, 124, 201, 189, 248, 186, 149, 190, 180, 78, 209, 61, 194, 177, 145, 62, 252, 0, 52, 190, 166, 133, 211, 187, 133, 99, 140, 188, 153, 188, 164, 188, 135, 62, 79, 190, 199, 62, 95, 62, 229, 213, 40, 62, 228, 5, 59, 190, 159, 12, 0, 62, 68, 8, 242, 61, 98, 170, 176, 62, 189, 161, 209, 190, 209, 54, 232, 61, 132, 183, 55, 189, 231, 235, 50, 188, 17, 57, 63, 189, 116, 11, 214, 189, 156, 168, 233, 189, 162, 102, 19, 62, 156, 178, 125, 189, 157, 115, 4, 190, 156, 244, 117, 61, 29, 198, 48, 190, 171, 84, 21, 190, 123, 148, 21, 190, 205, 97, 173, 59, 72, 53, 42, 190, 80, 105, 13, 62, 25, 62, 165, 189, 192, 68, 36, 62, 128, 76, 53, 189, 220, 196, 43, 189, 95, 188, 46, 62, 230, 66, 145, 189, 105, 147, 181, 61, 174, 114, 241, 189, 61, 74, 15, 190, 80, 187, 203, 59, 103, 144, 31, 190, 247, 248, 44, 190, 99, 126, 170, 60, 72, 184, 1, 62, 141, 72, 146, 59, 14, 253, 156, 61, 243, 246, 128, 188, 49, 171, 5, 190, 58, 129, 128, 62, 233, 247, 123, 62, 28, 232, 216, 61, 169, 37, 7, 191, 177, 216, 42, 62, 16, 1, 225, 187, 224, 122, 129, 188, 207, 69, 31, 61, 142, 167, 69, 62, 194, 133, 53, 190, 236, 190, 52, 61, 109, 189, 155, 62, 233, 59, 60, 62, 207, 12, 83, 62, 79, 218, 105, 62, 170, 104, 15, 62, 59, 111, 186, 60, 31, 23, 42, 60, 154, 246, 110, 188, 254, 43, 65, 62, 241, 94, 67, 190, 253, 24, 16, 190, 231, 153, 104, 190, 16, 209, 8, 190, 195, 228, 58, 191, 57, 246, 188, 189, 88, 202, 219, 59, 28, 104, 204, 189, 102, 13, 86, 189, 54, 228, 238, 61, 229, 65, 117, 61, 34, 96, 78, 189, 180, 114, 19, 190, 247, 175, 63, 190, 145, 1, 18, 190, 58, 42, 147, 62, 99, 108, 208, 61, 73, 91, 254, 61, 152, 213, 71, 189, 136, 116, 48, 190, 204, 194, 50, 62, 48, 15, 187, 61, 169, 218, 138, 62, 222, 67, 32, 61, 126, 156, 187, 62, 247, 116, 216, 61, 94, 239, 135, 62, 193, 101, 142, 62, 60, 183, 44, 188, 250, 201, 17, 62, 147, 225, 213, 189, 141, 60, 10, 189, 251, 190, 131, 61, 105, 85, 39, 189, 198, 47, 91, 60, 39, 72, 56, 61, 77, 31, 177, 190, 115, 171, 142, 61, 32, 23, 98, 190, 171, 48, 240, 189, 185, 6, 97, 189, 165, 105, 191, 61, 65, 143, 226, 188, 246, 137, 139, 190, 100, 16, 131, 190, 54, 173, 133, 62, 195, 239, 91, 62, 92, 57, 156, 62, 179, 2, 31, 61, 98, 233, 22, 62, 133, 120, 36, 62, 233, 51, 51, 62, 3, 78, 165, 62, 179, 244, 110, 190, 65, 43, 78, 62, 141, 184, 164, 189, 121, 19, 159, 62, 74, 133, 136, 189, 48, 113, 86, 189, 90, 187, 7, 190, 202, 104, 65, 62, 98, 129, 208, 190, 149, 224, 1, 190, 73, 93, 249, 61, 25, 55, 132, 61, 183, 28, 228, 189, 89, 171, 242, 61, 39, 222, 136, 62, 206, 146, 78, 189, 122, 158, 99, 62, 121, 0, 60, 189, 130, 171, 5, 62, 56, 232, 87, 188, 135, 77, 11, 62, 202, 72, 196, 62, 21, 61, 175, 62, 45, 231, 91, 191, 114, 127, 217, 189, 25, 252, 5, 61, 49, 105, 233, 62, 222, 142, 72, 189, 56, 134, 208, 62, 177, 158, 13, 189, 114, 177, 218, 60, 156, 95, 175, 189, 184, 130, 162, 60, 19, 14, 23, 62, 137, 149, 91, 189, 65, 234, 113, 62, 208, 43, 187, 62, 213, 151, 22, 62, 79, 49, 224, 62, 105, 171, 162, 190, 238, 50, 18, 62, 227, 95, 158, 62, 235, 225, 158, 190, 252, 22, 151, 60, 201, 197, 75, 61, 28, 52, 185, 61, 211, 225, 4, 190, 255, 195, 44, 61, 11, 148, 104, 190, 221, 234, 64, 190, 253, 47, 16, 62, 110, 140, 245, 189, 20, 245, 136, 190, 219, 131, 219, 189, 137, 114, 184, 190, 59, 195, 75, 62, 209, 148, 187, 60, 177, 0, 149, 61, 122, 208, 155, 190, 7, 200, 239, 60, 121, 164, 186, 61, 182, 149, 210, 189, 244, 171, 255, 189, 187, 164, 8, 62, 221, 4, 49, 190, 82, 48, 8, 190, 16, 97, 26, 62, 55, 255, 99, 62, 2, 57, 132, 188, 145, 127, 93, 62, 111, 111, 39, 190, 155, 176, 5, 189, 13, 76, 173, 60, 167, 236, 131, 190, 113, 134, 161, 189, 36, 171, 145, 60, 188, 214, 20, 189, 9, 141, 122, 190, 221, 239, 9, 62, 142, 46, 102, 190, 47, 10, 133, 190, 33, 132, 118, 61, 231, 219, 223, 61, 98, 51, 37, 189, 18, 142, 93, 190, 171, 73, 27, 189, 149, 150, 21, 187, 181, 129, 34, 191, 234, 85, 34, 62, 26, 65, 97, 189, 194, 226, 185, 190, 185, 72, 4, 189, 36, 5, 149, 189, 113, 64, 29, 191, 238, 220, 22, 62, 243, 73, 216, 190, 117, 179, 210, 60, 113, 213, 219, 190, 120, 175, 73, 62, 235, 176, 193, 189, 15, 108, 54, 191, 209, 212, 43, 190, 25, 75, 128, 61, 154, 61, 215, 189, 57, 73, 171, 59, 98, 176, 99, 62, 61, 96, 91, 61, 137, 235, 35, 62, 12, 37, 59, 61, 246, 52, 27, 62, 96, 238, 45, 61, 253, 194, 41, 62, 68, 215, 183, 189, 203, 224, 145, 61, 176, 14, 54, 61, 168, 123, 138, 189, 150, 104, 34, 190, 94, 216, 14, 190, 150, 220, 35, 190, 104, 221, 171, 188, 128, 35, 77, 62, 159, 138, 101, 190, 127, 165, 255, 190, 77, 141, 162, 61, 189, 67, 166, 61, 164, 11, 37, 190, 221, 14, 187, 189, 244, 8, 186, 189, 102, 29, 86, 190, 80, 11, 158, 190, 147, 55, 168, 62, 161, 241, 34, 187, 115, 181, 124, 190, 10, 9, 60, 61, 57, 219, 19, 190, 151, 69, 98, 62, 127, 30, 90, 189, 101, 88, 70, 62, 248, 215, 32, 189, 235, 108, 153, 189, 163, 68, 26, 62, 96, 169, 170, 187, 144, 38, 60, 62, 73, 109, 3, 190, 10, 136, 10, 188, 40, 118, 129, 61, 60, 51, 128, 62, 17, 64, 1, 62, 148, 81, 162, 189, 225, 98, 30, 189, 3, 109, 61, 62, 7, 91, 203, 62, 39, 137, 45, 62, 0, 9, 62, 62, 202, 220, 101, 62, 102, 112, 35, 62, 252, 229, 204, 61, 118, 69, 10, 61, 136, 158, 34, 190, 212, 119, 6, 190, 165, 148, 164, 60, 159, 34, 114, 190, 27, 204, 219, 61, 19, 247, 39, 61, 58, 182, 52, 190, 146, 43, 53, 190, 26, 64, 32, 62, 145, 255, 137, 62, 229, 180, 245, 186, 243, 85, 179, 61, 52, 210, 141, 62, 31, 1, 31, 62, 67, 162, 52, 190, 82, 143, 32, 62, 105, 86, 3, 62, 82, 8, 96, 188, 13, 239, 214, 189, 253, 107, 166, 62, 155, 182, 207, 61, 216, 4, 30, 62, 84, 121, 15, 190, 201, 246, 247, 60, 48, 81, 40, 189, 215, 164, 242, 61, 118, 255, 172, 188, 50, 114, 73, 190, 187, 10, 27, 190, 73, 10, 110, 60, 83, 123, 255, 189, 7, 84, 231, 189, 151, 21, 29, 190, 38, 0, 15, 190, 115, 224, 93, 61, 240, 124, 168, 60, 199, 93, 249, 189, 198, 63, 7, 190, 67, 111, 210, 188, 237, 92, 230, 189, 10, 31, 114, 189, 71, 230, 142, 61, 232, 31, 188, 189, 24, 158, 229, 188, 179, 108, 158, 189, 193, 56, 147, 189, 11, 156, 35, 189, 166, 98, 45, 61, 119, 9, 176, 189, 78, 246, 140, 189, 37, 25, 66, 61, 66, 26, 18, 190, 110, 99, 36, 189, 219, 47, 23, 62, 68, 116, 4, 189, 112, 159, 171, 189, 64, 168, 215, 61, 138, 167, 225, 62, 121, 10, 160, 61, 84, 25, 156, 190, 254, 88, 144, 61, 69, 153, 144, 61, 152, 238, 126, 62, 205, 180, 204, 61, 17, 9, 15, 62, 135, 131, 144, 61, 30, 172, 46, 190, 157, 159, 8, 188, 0, 249, 34, 61, 93, 227, 148, 62, 248, 233, 34, 59, 174, 200, 40, 62, 152, 179, 204, 61, 115, 74, 206, 61, 33, 78, 137, 190, 75, 18, 249, 189, 109, 115, 161, 189, 233, 109, 68, 190, 101, 193, 112, 61, 233, 96, 158, 189, 215, 49, 164, 189, 113, 59, 118, 190, 194, 219, 167, 62, 51, 230, 90, 62, 40, 202, 110, 190, 139, 153, 160, 61, 94, 178, 178, 62, 174, 95, 160, 60, 9, 80, 112, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 170, 203, 61, 111, 69, 195, 189, 167, 48, 174, 62, 59, 238, 40, 62, 225, 6, 223, 61, 0, 34, 77, 189, 213, 146, 16, 189, 140, 139, 101, 62, 220, 141, 40, 62, 150, 49, 193, 61, 14, 51, 217, 60, 90, 217, 44, 62, 40, 112, 138, 189, 217, 68, 242, 60, 128, 74, 76, 60, 77, 152, 202, 62, 99, 67, 39, 188, 214, 241, 54, 61, 108, 151, 190, 189, 148, 134, 24, 190, 5, 130, 101, 62, 176, 0, 23, 190, 146, 108, 245, 189, 122, 213, 100, 190, 214, 67, 142, 62, 13, 219, 56, 61, 198, 30, 64, 189, 179, 105, 109, 61, 92, 58, 12, 59, 199, 247, 139, 62, 13, 55, 152, 60, 21, 184, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 159, 229, 60, 7, 56, 5, 63, 9, 108, 186, 189, 34, 107, 55, 62, 103, 48, 168, 190, 142, 252, 64, 191, 197, 188, 250, 189, 222, 237, 57, 63, 240, 195, 43, 191, 181, 218, 185, 61, 180, 10, 18, 63, 39, 69, 69, 63, 36, 182, 220, 188, 207, 184, 83, 63, 173, 46, 61, 63, 12, 126, 253, 190, 98, 86, 192, 60, 243, 126, 188, 61, 60, 236, 151, 187, 147, 40, 172, 61, 100, 72, 217, 190, 110, 79, 164, 61, 19, 125, 91, 190, 137, 238, 143, 62, 234, 129, 237, 62, 11, 45, 213, 62, 246, 82, 146, 61, 99, 111, 242, 62, 34, 91, 210, 188, 247, 185, 138, 190, 8, 220, 23, 190, 78, 70, 154, 62, 188, 156, 177, 61, 99, 27, 31, 189, 74, 35, 88, 190, 189, 132, 133, 60, 49, 90, 45, 190, 73, 97, 151, 61, 231, 22, 226, 60, 152, 36, 143, 189, 213, 28, 9, 61, 172, 162, 98, 190, 253, 50, 93, 61, 0, 82, 189, 189, 216, 182, 17, 190, 41, 125, 41, 62, 225, 171, 133, 190, 63, 127, 114, 190, 150, 71, 232, 60, 55, 82, 23, 189, 27, 25, 236, 189, 24, 91, 3, 190, 124, 111, 92, 62, 34, 48, 40, 190, 193, 204, 143, 61, 138, 18, 235, 61, 88, 215, 155, 61, 112, 30, 99, 62, 58, 26, 117, 62, 228, 246, 96, 190, 80, 89, 189, 190, 61, 73, 102, 189, 209, 27, 86, 61, 230, 21, 128, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 114, 163, 189, 37, 140, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {39, 1, 99, 62, 218, 186, 152, 190, 166, 32, 102, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 252, 15, 190, 79, 234, 107, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0081/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}