// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 83, 19, 61, 251, 67, 178, 62, 156, 33, 208, 62, 97, 255, 23, 62, 182, 58, 250, 62, 48, 238, 12, 191, 255, 130, 129, 60, 78, 86, 35, 63, 106, 79, 49, 191, 50, 129, 11, 62, 89, 209, 212, 62, 216, 16, 233, 62, 171, 163, 10, 191, 233, 97, 96, 63, 176, 238, 200, 190, 229, 10, 224, 188, 114, 206, 113, 63, 60, 111, 240, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 95, 137, 143, 62, 223, 93, 92, 61, 85, 76, 77, 62, 133, 91, 70, 63, 53, 231, 133, 63, 121, 32, 161, 62, 206, 101, 167, 190, 253, 155, 189, 191, 117, 122, 159, 190, 116, 67, 180, 190, 87, 164, 237, 190, 191, 90, 214, 61, 112, 0, 168, 61, 224, 26, 69, 63, 6, 89, 179, 61, 220, 237, 149, 191, 53, 108, 50, 63, 80, 42, 148, 61, 232, 228, 188, 190, 50, 71, 36, 191, 163, 97, 122, 61, 255, 175, 116, 191, 117, 146, 252, 190, 236, 121, 237, 188, 253, 133, 171, 62, 230, 244, 159, 191, 115, 131, 133, 190, 161, 186, 86, 189, 28, 115, 44, 63, 68, 93, 161, 62, 76, 189, 151, 63, 93, 105, 76, 63, 46, 63, 173, 62, 252, 68, 215, 189, 197, 234, 148, 191, 117, 99, 158, 190, 128, 208, 25, 63, 89, 197, 219, 189, 154, 113, 61, 191, 157, 47, 36, 63, 176, 204, 49, 63, 83, 130, 154, 62, 64, 74, 136, 62, 36, 57, 9, 63, 238, 39, 214, 190, 151, 7, 135, 62, 7, 43, 173, 190, 82, 85, 184, 62, 223, 33, 226, 189, 64, 16, 88, 63, 212, 204, 6, 63, 82, 8, 45, 63, 202, 2, 32, 58, 8, 209, 243, 190, 13, 214, 200, 189, 2, 58, 175, 63, 115, 158, 234, 62, 226, 47, 6, 191, 135, 46, 21, 191, 214, 56, 58, 190, 147, 223, 18, 191, 49, 211, 52, 191, 55, 60, 55, 190, 82, 221, 80, 63, 82, 22, 196, 188, 201, 213, 161, 62, 66, 57, 62, 191, 128, 37, 75, 191, 127, 66, 16, 191, 248, 0, 240, 62, 209, 69, 201, 191, 141, 209, 156, 190, 239, 182, 246, 62, 229, 54, 196, 190, 120, 178, 209, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 192, 141, 191, 151, 19, 243, 61, 243, 74, 154, 61, 221, 17, 32, 189, 79, 26, 163, 190, 235, 30, 11, 61, 187, 166, 19, 191, 8, 59, 74, 191, 96, 243, 180, 190, 158, 100, 119, 190, 121, 199, 3, 62, 182, 213, 13, 63, 249, 134, 138, 62, 24, 30, 206, 190, 57, 174, 84, 63, 143, 46, 0, 62, 237, 99, 243, 189, 109, 24, 130, 62, 243, 57, 31, 62, 119, 189, 196, 60, 124, 211, 191, 190, 43, 145, 181, 62, 183, 169, 228, 62, 244, 237, 198, 189, 25, 110, 33, 191, 241, 60, 194, 61, 226, 173, 50, 63, 206, 52, 25, 63, 73, 187, 89, 190, 83, 40, 160, 190, 130, 13, 200, 60, 226, 53, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 231, 13, 59, 228, 38, 120, 62, 169, 67, 43, 190, 99, 242, 230, 61, 253, 237, 239, 62, 129, 251, 132, 62, 188, 27, 9, 190, 107, 149, 97, 61, 81, 242, 145, 62, 82, 235, 233, 190, 28, 40, 170, 61, 161, 210, 166, 62, 35, 227, 206, 60, 203, 112, 62, 189, 12, 249, 157, 189, 28, 210, 173, 190, 110, 21, 60, 62, 222, 246, 239, 61, 70, 72, 202, 190, 184, 101, 46, 62, 163, 182, 214, 189, 21, 176, 63, 189, 180, 186, 141, 61, 158, 195, 10, 62, 162, 7, 75, 62, 90, 25, 128, 59, 129, 202, 24, 60, 126, 71, 20, 190, 107, 227, 57, 61, 186, 65, 0, 191, 31, 254, 201, 190, 73, 92, 29, 190, 210, 58, 154, 190, 53, 140, 137, 190, 116, 113, 33, 191, 157, 201, 112, 62, 208, 146, 157, 191, 156, 109, 3, 62, 198, 162, 35, 62, 99, 24, 2, 191, 128, 132, 48, 191, 33, 210, 90, 191, 131, 249, 197, 61, 156, 76, 150, 62, 81, 160, 105, 62, 126, 196, 120, 190, 15, 199, 72, 189, 44, 185, 195, 62, 200, 222, 181, 62, 27, 8, 186, 189, 173, 43, 130, 190, 131, 104, 101, 61, 59, 3, 165, 190, 194, 212, 168, 190, 160, 92, 107, 61, 175, 94, 67, 62, 63, 211, 221, 62, 81, 133, 31, 62, 231, 194, 105, 189, 118, 0, 133, 190, 1, 75, 130, 190, 173, 168, 0, 191, 103, 160, 135, 62, 16, 116, 179, 62, 143, 22, 44, 190, 255, 60, 50, 190, 1, 153, 63, 61, 138, 240, 7, 190, 58, 192, 9, 190, 91, 149, 214, 61, 245, 0, 37, 189, 150, 153, 209, 186, 227, 224, 17, 190, 59, 72, 1, 190, 157, 203, 224, 189, 101, 186, 221, 61, 73, 14, 67, 190, 45, 15, 47, 190, 129, 104, 29, 190, 163, 232, 160, 187, 49, 177, 238, 189, 239, 79, 46, 190, 222, 110, 14, 189, 72, 53, 5, 62, 242, 186, 211, 61, 17, 213, 1, 190, 135, 102, 1, 189, 14, 162, 1, 62, 175, 194, 149, 61, 200, 58, 155, 188, 223, 96, 46, 189, 182, 93, 60, 190, 143, 157, 17, 189, 177, 110, 202, 61, 145, 108, 47, 190, 202, 17, 53, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 215, 12, 1, 62, 225, 240, 159, 62, 178, 224, 220, 61, 111, 192, 201, 61, 103, 58, 186, 62, 229, 62, 169, 188, 152, 156, 120, 189, 144, 194, 179, 61, 196, 218, 110, 186, 253, 222, 83, 191, 35, 111, 47, 190, 166, 67, 234, 61, 217, 19, 223, 190, 244, 26, 191, 62, 203, 119, 69, 191, 247, 164, 2, 191, 17, 50, 248, 189, 184, 169, 102, 62, 78, 172, 192, 190, 249, 225, 5, 62, 149, 204, 181, 61, 10, 150, 41, 62, 167, 217, 250, 61, 179, 200, 19, 189, 224, 81, 152, 62, 23, 158, 20, 190, 227, 210, 148, 190, 184, 200, 105, 191, 112, 210, 207, 62, 161, 183, 156, 190, 64, 11, 156, 190, 142, 66, 12, 190, 35, 180, 198, 190, 174, 113, 96, 61, 81, 253, 222, 189, 58, 76, 134, 62, 100, 239, 63, 191, 139, 8, 108, 62, 46, 234, 250, 189, 134, 34, 238, 190, 104, 219, 16, 191, 208, 118, 59, 191, 50, 33, 160, 188, 23, 5, 132, 60, 171, 228, 42, 62, 73, 5, 162, 189, 154, 10, 6, 190, 241, 131, 165, 62, 65, 59, 170, 62, 252, 117, 188, 189, 88, 62, 131, 190, 253, 243, 31, 62, 38, 105, 230, 188, 182, 222, 26, 190, 233, 66, 234, 61, 39, 108, 232, 61, 77, 176, 218, 62, 100, 114, 7, 62, 175, 74, 153, 189, 109, 232, 54, 190, 226, 11, 143, 60, 154, 75, 198, 190, 197, 176, 245, 61, 148, 154, 87, 62, 179, 106, 44, 62, 224, 206, 65, 60, 31, 205, 100, 62, 90, 57, 132, 61, 213, 223, 137, 62, 125, 172, 102, 61, 3, 50, 209, 188, 82, 178, 214, 60, 87, 202, 184, 190, 169, 98, 137, 189, 234, 94, 17, 190, 88, 79, 247, 61, 33, 90, 140, 62, 85, 0, 50, 191, 179, 224, 134, 190, 121, 212, 101, 61, 238, 94, 101, 191, 243, 44, 92, 190, 218, 91, 9, 62, 50, 109, 118, 62, 63, 235, 225, 189, 188, 0, 19, 62, 107, 243, 4, 62, 183, 102, 57, 191, 158, 247, 64, 62, 90, 143, 152, 190, 102, 56, 175, 189, 177, 254, 6, 190, 203, 107, 202, 61, 31, 192, 255, 189, 86, 16, 35, 61, 210, 101, 227, 188, 164, 65, 103, 189, 142, 199, 86, 60, 163, 55, 87, 61, 195, 112, 25, 190, 193, 191, 159, 189, 167, 112, 181, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 64, 213, 14, 62, 103, 202, 28, 190, 193, 51, 179, 61, 235, 186, 245, 61, 169, 202, 2, 62, 227, 92, 179, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 120, 245, 133, 61, 86, 252, 168, 189, 48, 225, 117, 61, 19, 178, 24, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 110, 184, 132, 189, 214, 155, 15, 190, 30, 130, 74, 189, 135, 127, 213, 189, 245, 249, 34, 60, 187, 192, 9, 190, 4, 63, 2, 190, 8, 178, 183, 61, 13, 18, 192, 61, 34, 229, 4, 191, 150, 250, 180, 61, 135, 234, 154, 190, 56, 201, 239, 188, 191, 60, 55, 190, 42, 20, 23, 62, 214, 144, 245, 60, 38, 201, 142, 61, 120, 143, 84, 191, 180, 160, 70, 62, 233, 105, 48, 61, 111, 71, 29, 61, 29, 49, 146, 190, 35, 68, 165, 191, 245, 63, 126, 189, 30, 95, 73, 190, 118, 253, 43, 190, 216, 236, 42, 60, 238, 122, 177, 61, 100, 199, 200, 190, 33, 90, 177, 190, 141, 215, 151, 190, 136, 189, 97, 191, 83, 168, 186, 60, 33, 85, 7, 62, 230, 186, 7, 187, 124, 13, 245, 61, 145, 176, 157, 190, 186, 87, 57, 190, 246, 255, 143, 190, 201, 25, 34, 61, 136, 237, 54, 190, 157, 199, 77, 61, 246, 173, 164, 190, 73, 192, 44, 62, 243, 37, 187, 189, 152, 117, 47, 190, 213, 70, 152, 190, 255, 130, 83, 191, 221, 90, 79, 61, 195, 160, 220, 61, 184, 201, 240, 189, 250, 32, 250, 189, 37, 242, 33, 190, 152, 204, 39, 62, 80, 12, 23, 61, 123, 193, 50, 62, 63, 20, 132, 190, 35, 67, 15, 62, 138, 141, 216, 61, 124, 249, 251, 60, 165, 161, 178, 61, 216, 53, 71, 62, 192, 237, 180, 61, 116, 97, 65, 62, 226, 135, 208, 189, 111, 240, 189, 190, 116, 18, 11, 62, 55, 46, 131, 190, 116, 189, 84, 62, 190, 185, 118, 190, 63, 124, 79, 190, 51, 183, 91, 61, 175, 141, 66, 190, 33, 81, 158, 189, 107, 139, 143, 190, 113, 64, 66, 190, 42, 246, 48, 61, 83, 189, 112, 190, 225, 173, 166, 190, 99, 144, 160, 190, 91, 29, 213, 61, 234, 153, 216, 61, 183, 69, 58, 189, 224, 196, 97, 62, 92, 124, 250, 61, 52, 53, 80, 61, 47, 122, 30, 190, 21, 211, 240, 189, 234, 51, 23, 62, 40, 153, 42, 62, 68, 83, 2, 190, 83, 99, 218, 61, 149, 218, 63, 62, 122, 139, 96, 190, 238, 226, 109, 62, 231, 20, 126, 190, 42, 2, 107, 189, 216, 64, 53, 62, 64, 48, 225, 61, 83, 104, 156, 190, 86, 222, 123, 62, 47, 246, 14, 189, 60, 213, 218, 189, 11, 22, 246, 60, 233, 158, 162, 59, 250, 119, 14, 189, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 9, 233, 149, 188, 84, 225, 40, 190, 243, 180, 148, 187, 78, 12, 187, 61, 178, 44, 12, 190, 206, 50, 58, 188, 77, 174, 88, 188, 8, 250, 45, 190, 94, 97, 198, 189, 183, 152, 253, 61, 200, 67, 202, 61, 152, 252, 6, 62, 108, 209, 46, 190, 195, 207, 3, 62, 79, 45, 202, 189, 173, 254, 28, 61, 6, 242, 125, 61, 9, 172, 254, 189, 116, 100, 7, 190, 75, 177, 74, 189, 54, 80, 19, 190, 74, 125, 218, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 253, 81, 12, 62, 28, 77, 101, 62, 82, 46, 53, 62, 56, 193, 24, 61, 195, 78, 142, 62, 116, 146, 3, 63, 200, 20, 133, 61, 52, 177, 224, 62, 198, 18, 196, 62, 209, 23, 56, 189, 40, 65, 196, 187, 242, 161, 6, 62, 160, 106, 45, 61, 39, 226, 170, 61, 10, 38, 53, 191, 77, 29, 145, 190, 46, 25, 145, 189, 182, 199, 112, 62, 196, 13, 28, 191, 169, 113, 221, 190, 11, 193, 196, 62, 217, 153, 223, 62, 16, 81, 27, 60, 239, 249, 96, 189, 37, 139, 138, 191, 76, 90, 90, 62, 196, 52, 199, 191, 25, 96, 42, 191, 171, 193, 114, 61, 100, 84, 120, 62, 231, 27, 29, 191, 96, 52, 175, 191, 121, 219, 20, 62, 210, 204, 2, 190, 35, 222, 19, 190, 113, 173, 231, 60, 92, 196, 139, 189, 243, 240, 222, 189, 180, 15, 19, 190, 159, 117, 53, 62, 183, 46, 57, 60, 100, 11, 200, 60, 37, 88, 154, 190, 118, 143, 17, 61, 188, 145, 60, 190, 31, 122, 36, 61, 47, 66, 205, 190, 216, 10, 73, 189, 121, 15, 22, 190, 29, 85, 57, 62, 235, 136, 57, 190, 141, 229, 149, 190, 101, 159, 65, 188, 184, 166, 183, 190, 174, 150, 202, 188, 214, 177, 31, 62, 32, 207, 238, 60, 223, 224, 200, 189, 77, 118, 176, 190, 180, 174, 134, 190, 70, 226, 181, 189, 200, 69, 15, 62, 24, 30, 107, 189, 66, 32, 66, 61, 62, 175, 1, 62, 174, 38, 7, 62, 166, 14, 157, 62, 143, 145, 83, 190, 68, 204, 48, 62, 76, 3, 220, 189, 247, 238, 251, 61, 185, 207, 165, 61, 198, 112, 153, 62, 154, 35, 207, 62, 66, 205, 236, 61, 204, 89, 16, 63, 37, 24, 245, 61, 162, 52, 228, 188, 185, 232, 202, 189, 115, 127, 75, 191, 209, 191, 253, 189, 117, 170, 184, 62, 145, 184, 235, 61, 163, 116, 144, 190, 221, 93, 84, 62, 237, 97, 11, 62, 168, 160, 83, 189, 195, 208, 247, 188, 41, 236, 179, 190, 75, 240, 242, 60, 221, 185, 38, 189, 0, 203, 187, 189, 244, 108, 25, 62, 59, 80, 21, 62, 144, 145, 9, 191, 230, 166, 61, 191, 33, 118, 47, 62, 239, 112, 202, 60, 179, 193, 129, 62, 187, 103, 151, 190, 103, 162, 125, 59, 138, 76, 177, 61, 241, 137, 34, 190, 165, 31, 185, 62, 170, 179, 91, 62, 88, 146, 193, 62, 102, 184, 45, 190, 165, 255, 233, 188, 140, 168, 27, 190, 209, 182, 135, 62, 139, 164, 216, 61, 91, 238, 152, 190, 146, 215, 234, 189, 34, 152, 153, 62, 117, 221, 61, 188, 142, 19, 6, 190, 24, 203, 124, 62, 140, 214, 141, 62, 164, 214, 19, 190, 130, 111, 47, 190, 228, 129, 210, 190, 38, 49, 33, 61, 77, 175, 57, 189, 187, 45, 9, 190, 51, 14, 92, 62, 168, 64, 78, 62, 66, 214, 159, 190, 116, 29, 84, 190, 46, 95, 13, 190, 214, 11, 197, 190, 218, 189, 206, 190, 95, 164, 197, 189, 189, 92, 194, 190, 74, 179, 34, 191, 79, 75, 188, 189, 253, 23, 178, 189, 131, 20, 75, 190, 245, 174, 70, 190, 126, 124, 128, 188, 132, 208, 167, 59, 48, 45, 73, 62, 234, 14, 120, 61, 248, 181, 70, 62, 206, 211, 6, 62, 209, 229, 199, 188, 236, 43, 49, 62, 115, 155, 104, 190, 249, 25, 230, 189, 113, 214, 139, 61, 123, 33, 135, 190, 163, 170, 171, 189, 150, 105, 77, 190, 146, 38, 84, 191, 125, 2, 30, 190, 28, 92, 149, 62, 126, 177, 112, 62, 196, 57, 233, 61, 239, 160, 250, 62, 25, 219, 163, 188, 117, 74, 244, 190, 167, 137, 203, 190, 160, 39, 33, 190, 255, 73, 154, 190, 83, 74, 27, 62, 34, 119, 227, 190, 244, 223, 33, 63, 18, 136, 185, 189, 141, 238, 11, 191, 51, 174, 163, 190, 126, 163, 246, 191, 222, 84, 233, 61, 160, 71, 37, 62, 76, 248, 144, 60, 84, 247, 28, 190, 14, 72, 237, 60, 42, 166, 223, 62, 10, 35, 106, 62, 63, 223, 185, 60, 168, 56, 232, 190, 160, 73, 62, 62, 84, 164, 190, 190, 223, 23, 152, 188, 122, 30, 34, 62, 18, 68, 6, 62, 183, 171, 160, 188, 140, 225, 199, 60, 228, 78, 74, 60, 163, 23, 143, 190, 206, 159, 31, 190, 199, 170, 83, 191, 255, 98, 174, 62, 229, 239, 151, 61, 146, 108, 132, 188, 76, 224, 199, 190, 251, 180, 186, 191, 186, 126, 248, 61, 135, 13, 132, 190, 137, 96, 181, 60, 181, 72, 150, 61, 77, 231, 177, 189, 2, 110, 80, 190, 253, 245, 190, 191, 107, 227, 124, 62, 130, 248, 115, 62, 110, 0, 150, 62, 180, 65, 82, 190, 145, 241, 160, 188, 221, 135, 35, 62, 19, 207, 144, 189, 164, 181, 64, 59, 170, 141, 127, 190, 238, 192, 98, 61, 154, 215, 145, 190, 81, 74, 110, 190, 58, 30, 68, 62, 146, 202, 133, 61, 209, 46, 76, 191, 238, 85, 217, 61, 17, 114, 132, 61, 44, 235, 193, 60, 100, 78, 206, 59, 107, 166, 194, 190, 222, 220, 120, 62, 36, 80, 132, 190, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 23, 234, 133, 60, 234, 10, 84, 190, 147, 196, 54, 191, 253, 51, 220, 62, 95, 165, 68, 190, 44, 203, 135, 187, 191, 60, 255, 189, 46, 150, 240, 189, 245, 29, 60, 189, 118, 89, 142, 189, 117, 140, 43, 62, 127, 135, 216, 190, 243, 7, 228, 190, 11, 146, 36, 62, 222, 117, 52, 62, 136, 181, 189, 62, 124, 184, 253, 62, 251, 14, 171, 190, 49, 42, 92, 62, 52, 249, 163, 62, 190, 198, 26, 190, 201, 8, 162, 188, 80, 218, 115, 62, 93, 6, 161, 61, 14, 20, 21, 62, 23, 186, 142, 60, 228, 147, 34, 61, 78, 60, 66, 62, 165, 95, 151, 190, 190, 156, 26, 191, 43, 168, 162, 62, 211, 42, 203, 62, 227, 69, 200, 190, 223, 140, 121, 61, 38, 43, 134, 189, 75, 92, 178, 60, 233, 225, 157, 190, 157, 55, 199, 189, 178, 247, 31, 62, 25, 134, 203, 189, 105, 78, 166, 189, 94, 165, 220, 190, 31, 241, 38, 62, 224, 43, 19, 63, 221, 92, 209, 189, 17, 96, 156, 62, 104, 12, 253, 57, 141, 61, 18, 62, 139, 30, 158, 62, 198, 147, 133, 62, 3, 245, 41, 61, 249, 95, 136, 62, 183, 210, 1, 62, 185, 240, 9, 62, 134, 147, 20, 62, 23, 109, 2, 60, 32, 72, 17, 189, 18, 0, 132, 188, 30, 156, 158, 61, 190, 184, 116, 61, 226, 236, 134, 61, 65, 128, 124, 190, 101, 47, 185, 61, 64, 63, 36, 62, 212, 206, 64, 62, 124, 108, 232, 61, 242, 252, 154, 62, 157, 238, 87, 189, 240, 101, 141, 61, 115, 159, 100, 60, 117, 123, 44, 189, 237, 181, 28, 62, 227, 78, 38, 62, 60, 254, 202, 62, 53, 63, 139, 189, 170, 70, 84, 62, 207, 47, 125, 62, 170, 12, 65, 62, 193, 173, 177, 62, 225, 7, 95, 61, 43, 64, 225, 188, 91, 21, 197, 189, 41, 122, 146, 62, 217, 80, 142, 189, 0, 21, 19, 189, 134, 122, 41, 189, 99, 185, 72, 62, 148, 212, 246, 61, 63, 72, 224, 189, 191, 27, 17, 62, 108, 141, 140, 62, 172, 167, 174, 62, 5, 215, 61, 62, 79, 200, 137, 60, 237, 29, 133, 62, 102, 61, 235, 189, 253, 128, 238, 190, 132, 238, 50, 189, 124, 95, 233, 60, 27, 125, 159, 61, 246, 159, 89, 61, 141, 143, 157, 188, 114, 60, 25, 62, 3, 85, 223, 190, 192, 252, 233, 190, 91, 120, 56, 191, 223, 66, 202, 62, 166, 231, 37, 189, 203, 32, 65, 191, 112, 22, 193, 61, 110, 113, 246, 190, 53, 146, 151, 62, 55, 193, 178, 189, 125, 183, 84, 190, 59, 127, 27, 190, 244, 239, 180, 189, 162, 142, 52, 190, 81, 105, 31, 190, 27, 252, 180, 62, 233, 202, 99, 62, 12, 175, 138, 62, 44, 108, 142, 190, 98, 38, 106, 190, 6, 86, 144, 190, 92, 231, 168, 61, 29, 93, 162, 189, 143, 248, 129, 62, 71, 43, 146, 62, 194, 116, 149, 62, 143, 3, 64, 191, 3, 84, 226, 190, 7, 217, 7, 62, 168, 253, 185, 61, 58, 108, 67, 191, 140, 228, 52, 190, 19, 102, 188, 62, 113, 114, 211, 62, 6, 49, 147, 190, 251, 1, 43, 190, 64, 145, 245, 189, 117, 16, 63, 191, 12, 51, 6, 61, 45, 157, 142, 191, 208, 197, 186, 190, 72, 60, 177, 60, 245, 176, 226, 62, 121, 108, 134, 190, 218, 144, 92, 61, 175, 218, 84, 62, 103, 73, 168, 190, 161, 249, 239, 61, 75, 152, 224, 61, 158, 102, 13, 191, 43, 95, 51, 189, 217, 63, 243, 190, 10, 177, 158, 191, 14, 61, 219, 62, 209, 146, 99, 189, 213, 224, 219, 190, 227, 96, 138, 188, 180, 173, 159, 62, 200, 81, 174, 62, 212, 114, 5, 62, 187, 99, 106, 190, 2, 105, 117, 62, 204, 216, 192, 61, 68, 59, 13, 190, 138, 65, 162, 61, 133, 95, 219, 62, 218, 245, 195, 190, 153, 53, 128, 61, 98, 193, 83, 62, 171, 70, 148, 189, 138, 88, 125, 62, 84, 11, 65, 61, 68, 227, 113, 191, 251, 43, 121, 190, 11, 232, 12, 62, 32, 59, 14, 189, 53, 241, 160, 190, 59, 15, 74, 61, 189, 115, 12, 62, 231, 238, 81, 61, 35, 197, 173, 189, 44, 67, 101, 189, 54, 227, 156, 190, 223, 194, 46, 61, 21, 144, 11, 189, 91, 176, 188, 62, 150, 32, 84, 190, 7, 56, 200, 190, 252, 141, 195, 190, 180, 49, 237, 189, 123, 170, 162, 61, 167, 133, 128, 62, 134, 2, 63, 191, 133, 232, 146, 62, 181, 186, 191, 189, 249, 76, 47, 62, 216, 102, 49, 61, 140, 232, 184, 61, 192, 65, 132, 61, 47, 35, 206, 190, 108, 234, 166, 62, 168, 66, 202, 62, 244, 36, 48, 190, 68, 178, 160, 61, 206, 122, 240, 190, 195, 33, 54, 191, 157, 119, 22, 62, 32, 205, 244, 189, 157, 103, 124, 190, 190, 243, 136, 189, 85, 233, 66, 62, 197, 153, 26, 189, 66, 175, 232, 190, 51, 183, 16, 191, 3, 137, 30, 191, 147, 139, 158, 62, 48, 195, 22, 190, 113, 210, 30, 62, 80, 62, 52, 190, 222, 175, 0, 191, 208, 200, 27, 191, 184, 54, 23, 190, 14, 93, 44, 61, 66, 7, 105, 62, 131, 229, 107, 191, 235, 190, 35, 62, 86, 112, 68, 61, 55, 194, 222, 187, 198, 41, 252, 188, 49, 123, 141, 190, 87, 244, 184, 62, 120, 113, 120, 191, 240, 101, 49, 62, 229, 233, 137, 62, 133, 107, 190, 190, 222, 143, 29, 62, 23, 81, 14, 191, 97, 33, 238, 190, 68, 148, 209, 61, 187, 217, 75, 190, 237, 23, 92, 190, 143, 68, 140, 189, 188, 254, 51, 62, 170, 152, 203, 189, 237, 92, 226, 188, 228, 199, 171, 189, 87, 240, 37, 188, 240, 198, 172, 61, 157, 255, 82, 188, 189, 124, 58, 190, 66, 95, 71, 62, 255, 63, 227, 189, 129, 238, 45, 190, 52, 68, 64, 62, 191, 65, 58, 62, 134, 218, 150, 62, 168, 91, 225, 59, 174, 7, 129, 62, 53, 64, 79, 190, 37, 247, 70, 189, 233, 216, 22, 62, 77, 198, 116, 61, 253, 69, 129, 189, 99, 54, 46, 60, 119, 173, 72, 62, 213, 90, 133, 61, 202, 147, 47, 62, 185, 164, 93, 61, 21, 18, 39, 191, 29, 140, 226, 190, 54, 51, 128, 62, 143, 191, 71, 190, 177, 104, 29, 190, 176, 103, 13, 62, 248, 146, 121, 62, 100, 22, 192, 61, 212, 71, 102, 190, 124, 101, 171, 190, 56, 106, 111, 189, 57, 255, 174, 189, 121, 115, 153, 61, 70, 70, 117, 61, 248, 15, 118, 189, 56, 180, 4, 191, 7, 153, 7, 191, 3, 31, 46, 189, 195, 67, 193, 62, 68, 159, 14, 62, 117, 160, 97, 189, 198, 211, 128, 61, 30, 197, 243, 61, 163, 81, 162, 61, 182, 58, 66, 190, 187, 203, 196, 190, 81, 195, 5, 191, 237, 23, 182, 62, 98, 176, 156, 62, 27, 22, 224, 190, 224, 18, 247, 61, 6, 177, 102, 190, 142, 38, 58, 62, 174, 204, 66, 190, 31, 194, 237, 58, 231, 220, 76, 190, 140, 242, 107, 61, 182, 146, 151, 61, 17, 201, 175, 62, 199, 187, 184, 62, 18, 180, 150, 190, 27, 68, 186, 61, 64, 245, 48, 188, 71, 109, 171, 189, 236, 63, 167, 190, 25, 178, 107, 62, 222, 215, 99, 189, 34, 7, 212, 189, 114, 213, 76, 190, 109, 222, 190, 189, 29, 85, 37, 189, 48, 108, 137, 62, 239, 214, 253, 190, 85, 57, 186, 61, 47, 179, 31, 191, 122, 109, 249, 61, 119, 14, 22, 190, 239, 110, 118, 189, 219, 94, 197, 189, 94, 219, 47, 187, 213, 52, 146, 191, 131, 20, 104, 62, 144, 221, 183, 187, 115, 219, 220, 61, 169, 195, 29, 191, 31, 86, 120, 191, 15, 222, 70, 190, 186, 196, 27, 190, 76, 166, 19, 191, 197, 160, 165, 61, 107, 43, 104, 61, 150, 198, 124, 188, 42, 130, 219, 190, 198, 111, 28, 60, 227, 55, 103, 191, 204, 145, 12, 62, 231, 17, 26, 61, 199, 74, 160, 61, 99, 22, 133, 190, 122, 157, 19, 191, 248, 42, 16, 190, 55, 93, 130, 190, 13, 251, 54, 191, 113, 134, 247, 191, 233, 149, 194, 61, 173, 239, 128, 191, 27, 72, 80, 189, 218, 82, 0, 190, 135, 13, 129, 190, 218, 96, 142, 190, 58, 112, 249, 190, 225, 131, 245, 61, 25, 60, 239, 62, 104, 74, 65, 62, 80, 60, 241, 189, 201, 105, 172, 62, 84, 222, 53, 62, 228, 115, 166, 62, 205, 72, 200, 61, 233, 65, 159, 190, 103, 4, 80, 190, 122, 68, 60, 190, 208, 146, 250, 190, 134, 189, 11, 62, 214, 7, 98, 62, 38, 185, 18, 191, 246, 3, 135, 60, 202, 254, 143, 62, 121, 8, 197, 62, 61, 180, 5, 188, 242, 109, 174, 190, 194, 15, 152, 61, 201, 244, 149, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 249, 120, 189, 46, 40, 180, 61, 241, 93, 135, 189, 74, 197, 38, 60, 7, 27, 121, 61, 250, 116, 4, 190, 222, 93, 128, 190, 151, 151, 86, 189, 152, 52, 91, 190, 69, 90, 120, 62, 212, 119, 254, 61, 158, 124, 213, 189, 25, 231, 144, 190, 151, 52, 195, 189, 156, 187, 1, 62, 159, 57, 54, 189, 50, 47, 196, 61, 100, 121, 42, 61, 243, 64, 146, 189, 213, 229, 250, 189, 49, 167, 68, 190, 253, 162, 59, 62, 74, 153, 164, 62, 234, 201, 5, 190, 222, 83, 204, 189, 120, 35, 17, 62, 235, 195, 178, 62, 139, 254, 22, 61, 247, 22, 54, 61, 102, 98, 161, 188, 16, 169, 98, 190, 61, 241, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 99, 32, 190, 43, 195, 87, 63, 203, 213, 215, 61, 67, 219, 113, 60, 221, 58, 18, 191, 196, 189, 220, 62, 7, 112, 92, 62, 74, 71, 237, 189, 77, 98, 31, 191, 182, 23, 40, 62, 227, 199, 21, 62, 51, 20, 6, 59, 100, 12, 172, 63, 160, 101, 182, 188, 184, 243, 153, 190, 210, 152, 14, 188, 171, 77, 25, 62, 147, 221, 22, 63, 30, 254, 152, 62, 158, 217, 150, 60, 144, 221, 26, 191, 79, 79, 231, 60, 170, 175, 18, 190, 162, 203, 235, 62, 99, 159, 166, 191, 227, 60, 0, 191, 196, 51, 22, 191, 71, 18, 80, 190, 37, 167, 153, 190, 251, 134, 85, 62, 9, 109, 142, 191, 113, 186, 188, 62, 187, 50, 177, 61, 106, 129, 52, 63, 12, 42, 22, 61, 144, 96, 247, 61, 95, 160, 194, 190, 153, 107, 123, 62, 61, 27, 43, 62, 209, 42, 35, 189, 129, 79, 153, 62, 10, 77, 158, 190, 155, 212, 19, 189, 16, 73, 72, 59, 132, 2, 222, 62, 213, 209, 50, 62, 101, 181, 115, 61, 74, 211, 111, 189, 219, 153, 199, 190, 255, 91, 151, 61, 212, 106, 239, 189, 184, 211, 23, 190, 220, 100, 139, 60, 209, 3, 232, 190, 84, 237, 179, 190, 49, 246, 193, 62, 241, 37, 168, 189, 45, 25, 55, 61, 231, 169, 135, 61, 53, 204, 214, 61, 179, 183, 228, 61, 67, 61, 107, 190, 82, 210, 135, 189, 66, 23, 202, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 207, 202, 61, 86, 41, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 205, 200, 63, 33, 239, 3, 62, 137, 66, 48, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 214, 196, 189, 64, 128, 50, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}