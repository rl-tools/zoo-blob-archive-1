// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 29, 78, 61, 147, 48, 169, 62, 215, 202, 227, 62, 214, 161, 58, 62, 82, 31, 4, 63, 134, 198, 1, 191, 215, 118, 101, 61, 67, 201, 46, 63, 255, 237, 28, 191, 160, 171, 33, 62, 204, 178, 133, 62, 21, 141, 241, 62, 114, 25, 40, 190, 131, 178, 87, 63, 156, 181, 223, 190, 163, 177, 90, 61, 237, 180, 131, 63, 160, 161, 185, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 207, 39, 221, 62, 64, 126, 171, 61, 243, 54, 114, 62, 66, 196, 70, 63, 51, 89, 134, 63, 133, 96, 158, 62, 110, 118, 169, 190, 26, 245, 170, 191, 135, 174, 120, 190, 117, 3, 168, 190, 34, 132, 240, 190, 241, 191, 167, 61, 181, 36, 121, 62, 252, 171, 114, 63, 66, 132, 69, 60, 36, 22, 90, 191, 83, 105, 42, 63, 185, 2, 34, 61, 150, 212, 67, 190, 73, 186, 45, 191, 134, 97, 171, 61, 53, 50, 108, 191, 126, 239, 0, 191, 116, 59, 134, 189, 95, 151, 174, 62, 240, 205, 156, 191, 60, 74, 127, 190, 183, 136, 142, 190, 227, 157, 35, 63, 237, 18, 172, 62, 132, 105, 152, 63, 48, 25, 50, 63, 240, 141, 199, 62, 58, 187, 140, 189, 96, 245, 113, 191, 54, 211, 228, 190, 87, 16, 43, 63, 128, 86, 252, 189, 45, 18, 60, 191, 203, 170, 27, 63, 144, 197, 23, 63, 188, 31, 182, 62, 12, 245, 142, 62, 255, 234, 8, 63, 54, 144, 218, 190, 6, 217, 192, 62, 184, 222, 177, 190, 105, 173, 211, 62, 6, 87, 98, 190, 199, 182, 69, 63, 26, 47, 18, 63, 10, 107, 54, 63, 18, 6, 226, 60, 221, 122, 229, 190, 230, 146, 9, 190, 52, 219, 153, 63, 69, 205, 253, 62, 92, 137, 210, 190, 185, 153, 11, 191, 111, 90, 6, 190, 145, 85, 9, 191, 138, 51, 32, 191, 254, 118, 55, 190, 177, 243, 73, 63, 137, 60, 54, 189, 191, 192, 172, 62, 75, 59, 51, 191, 34, 28, 68, 191, 53, 50, 7, 191, 48, 25, 255, 62, 199, 147, 184, 191, 139, 231, 203, 190, 28, 208, 238, 62, 159, 217, 196, 190, 174, 54, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 103, 128, 191, 135, 50, 255, 61, 236, 164, 158, 61, 205, 247, 219, 187, 116, 84, 133, 190, 158, 91, 62, 62, 187, 166, 19, 191, 118, 238, 39, 191, 230, 157, 169, 190, 32, 28, 64, 190, 202, 31, 2, 62, 85, 9, 21, 63, 238, 124, 195, 62, 112, 149, 134, 190, 193, 135, 72, 63, 28, 228, 225, 61, 14, 218, 14, 190, 239, 189, 149, 62, 251, 3, 38, 62, 192, 143, 221, 61, 122, 251, 185, 190, 240, 92, 179, 62, 29, 17, 16, 63, 10, 142, 142, 189, 64, 177, 19, 191, 32, 88, 165, 61, 181, 138, 66, 63, 3, 177, 27, 63, 23, 201, 49, 190, 230, 241, 139, 190, 132, 11, 42, 60, 27, 112, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 104, 217, 187, 228, 198, 131, 62, 44, 253, 25, 190, 178, 52, 10, 62, 241, 133, 212, 62, 203, 111, 129, 62, 188, 27, 9, 190, 147, 0, 58, 61, 17, 240, 150, 62, 32, 128, 92, 61, 248, 248, 2, 62, 94, 34, 122, 62, 75, 245, 8, 188, 162, 223, 252, 188, 57, 98, 205, 189, 138, 157, 175, 190, 132, 167, 35, 62, 107, 31, 180, 61, 98, 154, 189, 190, 105, 36, 8, 62, 186, 12, 212, 189, 236, 221, 137, 189, 25, 121, 15, 61, 90, 250, 17, 62, 124, 44, 33, 62, 166, 46, 229, 60, 61, 147, 165, 189, 164, 146, 29, 190, 199, 27, 167, 58, 179, 204, 250, 190, 234, 177, 212, 190, 109, 3, 194, 189, 80, 9, 153, 190, 33, 9, 44, 190, 245, 51, 196, 190, 21, 16, 103, 62, 33, 65, 117, 191, 168, 94, 183, 62, 198, 162, 35, 62, 151, 159, 244, 190, 40, 51, 52, 191, 121, 227, 2, 191, 222, 36, 45, 62, 133, 237, 175, 62, 106, 254, 205, 61, 224, 17, 21, 190, 196, 19, 154, 61, 247, 5, 188, 62, 23, 12, 168, 62, 34, 245, 200, 189, 232, 213, 62, 190, 162, 67, 171, 61, 189, 96, 185, 190, 36, 251, 114, 190, 112, 206, 172, 61, 155, 4, 39, 62, 170, 204, 248, 62, 77, 44, 247, 61, 215, 246, 175, 61, 142, 236, 145, 189, 101, 252, 131, 190, 46, 91, 0, 191, 67, 211, 129, 62, 33, 65, 162, 62, 143, 22, 44, 190, 255, 60, 50, 190, 1, 153, 63, 61, 138, 240, 7, 190, 58, 192, 9, 190, 91, 149, 214, 61, 245, 0, 37, 189, 150, 153, 209, 186, 227, 224, 17, 190, 59, 72, 1, 190, 157, 203, 224, 189, 101, 186, 221, 61, 73, 14, 67, 190, 45, 15, 47, 190, 129, 104, 29, 190, 163, 232, 160, 187, 49, 177, 238, 189, 239, 79, 46, 190, 222, 110, 14, 189, 72, 53, 5, 62, 242, 186, 211, 61, 17, 213, 1, 190, 135, 102, 1, 189, 14, 162, 1, 62, 175, 194, 149, 61, 200, 58, 155, 188, 223, 96, 46, 189, 182, 93, 60, 190, 143, 157, 17, 189, 177, 110, 202, 61, 145, 108, 47, 190, 202, 17, 53, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 223, 67, 241, 61, 174, 133, 164, 62, 89, 222, 212, 61, 189, 182, 232, 61, 113, 99, 164, 62, 129, 39, 168, 187, 152, 156, 120, 189, 31, 164, 92, 61, 226, 178, 63, 61, 9, 128, 9, 191, 88, 5, 17, 190, 87, 237, 249, 61, 239, 104, 99, 190, 24, 182, 174, 62, 230, 175, 52, 191, 0, 147, 10, 191, 165, 221, 215, 189, 120, 84, 101, 62, 30, 107, 218, 190, 155, 157, 173, 61, 102, 149, 217, 61, 191, 241, 52, 62, 77, 12, 175, 61, 2, 218, 65, 188, 242, 73, 69, 62, 144, 254, 89, 189, 37, 176, 177, 190, 232, 102, 108, 191, 111, 13, 188, 62, 199, 191, 187, 190, 61, 103, 176, 190, 169, 208, 28, 190, 75, 98, 191, 190, 8, 194, 41, 61, 81, 211, 47, 190, 243, 211, 72, 62, 186, 24, 23, 191, 175, 44, 95, 62, 46, 234, 250, 189, 68, 230, 212, 190, 213, 3, 28, 191, 235, 252, 10, 191, 16, 191, 27, 189, 56, 135, 153, 61, 183, 200, 26, 62, 128, 27, 190, 188, 99, 44, 170, 189, 162, 204, 105, 62, 165, 231, 167, 62, 193, 22, 3, 190, 248, 180, 48, 190, 187, 64, 67, 62, 187, 24, 138, 189, 80, 1, 194, 189, 217, 31, 206, 61, 179, 139, 171, 61, 67, 165, 190, 62, 48, 171, 234, 61, 31, 208, 139, 60, 76, 136, 58, 189, 229, 201, 87, 187, 128, 125, 150, 190, 83, 212, 95, 61, 32, 232, 207, 61, 179, 106, 44, 62, 111, 222, 130, 60, 46, 133, 96, 62, 74, 168, 51, 62, 249, 208, 142, 62, 4, 94, 157, 61, 3, 50, 209, 188, 96, 205, 215, 60, 156, 11, 178, 190, 188, 227, 2, 189, 96, 40, 35, 190, 240, 66, 83, 62, 145, 140, 133, 62, 43, 34, 230, 190, 226, 227, 124, 190, 174, 222, 165, 61, 73, 227, 48, 191, 101, 134, 95, 190, 125, 249, 5, 62, 90, 97, 135, 62, 158, 207, 21, 60, 178, 192, 42, 62, 255, 83, 120, 62, 220, 184, 1, 191, 177, 190, 78, 62, 74, 132, 45, 190, 9, 8, 57, 189, 187, 48, 237, 189, 201, 239, 58, 62, 202, 31, 1, 190, 62, 23, 123, 61, 115, 153, 188, 188, 164, 65, 103, 189, 142, 199, 86, 60, 163, 55, 87, 61, 195, 112, 25, 190, 193, 191, 159, 189, 167, 112, 181, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 64, 213, 14, 62, 103, 202, 28, 190, 193, 51, 179, 61, 235, 186, 245, 61, 169, 202, 2, 62, 227, 92, 179, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 120, 245, 133, 61, 86, 252, 168, 189, 48, 225, 117, 61, 19, 178, 24, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 110, 184, 132, 189, 214, 155, 15, 190, 30, 130, 74, 189, 135, 127, 213, 189, 245, 249, 34, 60, 187, 192, 9, 190, 4, 63, 2, 190, 249, 227, 204, 59, 173, 165, 226, 59, 63, 80, 230, 190, 78, 185, 209, 188, 178, 193, 227, 190, 56, 201, 239, 188, 191, 60, 55, 190, 42, 20, 23, 62, 247, 3, 4, 62, 89, 20, 92, 62, 253, 221, 90, 191, 93, 104, 219, 62, 104, 86, 32, 62, 146, 250, 63, 62, 125, 198, 114, 190, 42, 197, 163, 191, 245, 63, 126, 189, 116, 124, 244, 189, 17, 11, 84, 190, 216, 236, 42, 60, 2, 138, 215, 59, 203, 123, 158, 190, 123, 0, 152, 190, 72, 205, 162, 190, 210, 152, 97, 191, 13, 98, 26, 62, 192, 241, 133, 62, 181, 132, 53, 60, 254, 6, 74, 62, 33, 243, 140, 190, 77, 103, 66, 190, 52, 184, 129, 190, 184, 252, 106, 61, 170, 56, 37, 190, 244, 101, 49, 61, 205, 210, 75, 190, 94, 105, 59, 62, 243, 37, 187, 189, 51, 47, 31, 190, 96, 238, 163, 190, 189, 188, 11, 191, 114, 158, 136, 61, 119, 218, 5, 62, 0, 4, 166, 189, 22, 96, 193, 189, 109, 29, 213, 188, 215, 155, 99, 62, 233, 249, 147, 61, 113, 177, 35, 62, 143, 121, 57, 190, 121, 241, 84, 62, 139, 50, 187, 61, 87, 191, 98, 61, 32, 14, 238, 61, 174, 136, 77, 62, 99, 179, 72, 62, 204, 167, 52, 62, 71, 137, 23, 61, 46, 149, 35, 190, 143, 162, 14, 62, 145, 176, 26, 190, 127, 93, 137, 62, 18, 21, 69, 190, 105, 225, 115, 189, 29, 146, 220, 60, 152, 100, 103, 190, 34, 143, 35, 189, 193, 20, 135, 190, 237, 119, 108, 190, 42, 246, 48, 61, 161, 107, 38, 190, 59, 83, 159, 190, 232, 183, 68, 190, 252, 190, 48, 62, 53, 184, 216, 61, 216, 194, 184, 190, 83, 111, 184, 62, 27, 245, 59, 62, 154, 77, 54, 62, 45, 228, 221, 189, 235, 195, 216, 189, 240, 216, 76, 62, 206, 198, 76, 62, 136, 153, 16, 190, 221, 11, 207, 61, 227, 243, 143, 62, 90, 52, 71, 190, 213, 117, 102, 62, 56, 13, 155, 190, 194, 123, 140, 60, 103, 240, 112, 62, 221, 224, 18, 62, 233, 150, 158, 190, 244, 229, 193, 62, 21, 240, 158, 189, 60, 213, 218, 189, 11, 22, 246, 60, 233, 158, 162, 59, 250, 119, 14, 189, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 9, 233, 149, 188, 84, 225, 40, 190, 243, 180, 148, 187, 78, 12, 187, 61, 178, 44, 12, 190, 206, 50, 58, 188, 77, 174, 88, 188, 8, 250, 45, 190, 94, 97, 198, 189, 183, 152, 253, 61, 200, 67, 202, 61, 152, 252, 6, 62, 108, 209, 46, 190, 195, 207, 3, 62, 79, 45, 202, 189, 173, 254, 28, 61, 6, 242, 125, 61, 9, 172, 254, 189, 116, 100, 7, 190, 75, 177, 74, 189, 54, 80, 19, 190, 74, 125, 218, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 146, 186, 16, 57, 69, 126, 12, 62, 36, 87, 2, 62, 252, 57, 55, 58, 4, 234, 201, 62, 73, 167, 227, 62, 200, 20, 133, 61, 78, 46, 179, 62, 161, 87, 151, 62, 209, 23, 56, 189, 185, 231, 171, 189, 34, 12, 172, 61, 250, 122, 58, 189, 90, 153, 30, 61, 34, 253, 43, 191, 129, 194, 113, 191, 64, 175, 217, 189, 211, 103, 58, 62, 147, 88, 231, 190, 242, 154, 229, 190, 36, 192, 167, 62, 103, 227, 163, 62, 169, 204, 8, 188, 27, 6, 183, 189, 253, 115, 55, 191, 116, 108, 33, 62, 244, 77, 159, 191, 168, 206, 188, 190, 201, 58, 206, 61, 244, 233, 54, 62, 95, 128, 135, 191, 29, 150, 63, 191, 181, 187, 28, 62, 41, 36, 245, 189, 20, 17, 20, 190, 231, 18, 222, 60, 92, 196, 139, 189, 201, 131, 115, 189, 180, 15, 19, 190, 101, 55, 62, 62, 190, 163, 92, 59, 100, 11, 200, 60, 215, 73, 145, 190, 49, 8, 254, 60, 19, 70, 55, 190, 142, 117, 36, 61, 199, 47, 194, 190, 56, 220, 78, 189, 23, 82, 24, 190, 26, 194, 51, 62, 235, 136, 57, 190, 144, 204, 149, 190, 45, 120, 144, 188, 164, 85, 162, 190, 227, 10, 184, 188, 38, 73, 31, 62, 32, 207, 238, 60, 216, 11, 205, 189, 143, 54, 177, 190, 132, 225, 134, 190, 35, 151, 189, 189, 200, 69, 15, 62, 196, 155, 112, 189, 66, 32, 66, 61, 72, 129, 207, 61, 228, 92, 30, 62, 215, 102, 165, 62, 123, 14, 96, 190, 200, 192, 16, 62, 121, 67, 225, 189, 247, 238, 251, 61, 3, 171, 96, 61, 20, 92, 177, 62, 195, 166, 3, 63, 79, 12, 249, 61, 166, 54, 6, 63, 41, 54, 214, 61, 75, 199, 129, 189, 78, 92, 17, 190, 212, 30, 73, 191, 191, 69, 47, 190, 75, 127, 185, 62, 146, 222, 33, 62, 210, 184, 147, 190, 208, 224, 102, 62, 178, 190, 23, 62, 202, 127, 189, 189, 199, 131, 100, 189, 129, 173, 196, 190, 83, 111, 232, 60, 190, 88, 196, 189, 165, 198, 210, 189, 215, 80, 237, 61, 59, 180, 58, 62, 43, 203, 10, 191, 243, 83, 44, 191, 50, 119, 48, 62, 29, 171, 34, 61, 68, 156, 130, 62, 62, 95, 139, 190, 235, 111, 38, 188, 165, 101, 183, 61, 241, 137, 34, 190, 32, 162, 175, 62, 98, 191, 138, 62, 19, 184, 167, 62, 208, 207, 241, 189, 172, 245, 157, 188, 18, 146, 194, 189, 103, 135, 132, 62, 34, 220, 218, 61, 58, 29, 163, 190, 45, 72, 242, 189, 117, 19, 163, 62, 217, 150, 210, 188, 9, 238, 11, 190, 230, 82, 145, 62, 96, 246, 151, 62, 204, 244, 26, 190, 55, 148, 36, 190, 112, 220, 225, 190, 4, 188, 156, 61, 9, 238, 160, 189, 38, 92, 23, 190, 5, 142, 80, 62, 64, 127, 58, 62, 91, 164, 177, 190, 234, 218, 83, 190, 242, 245, 196, 61, 93, 216, 42, 190, 77, 57, 155, 190, 122, 15, 113, 189, 118, 116, 196, 190, 11, 72, 198, 190, 79, 75, 188, 189, 20, 98, 170, 61, 240, 123, 79, 190, 14, 40, 215, 189, 98, 136, 162, 61, 214, 46, 12, 61, 247, 40, 236, 189, 37, 70, 129, 62, 41, 174, 96, 62, 112, 108, 17, 62, 112, 115, 226, 61, 82, 186, 230, 61, 13, 62, 98, 190, 62, 74, 95, 61, 239, 118, 35, 188, 78, 197, 238, 189, 134, 166, 82, 189, 99, 93, 228, 189, 1, 216, 254, 190, 203, 55, 72, 189, 70, 55, 133, 62, 201, 51, 99, 62, 14, 218, 92, 61, 55, 5, 33, 62, 240, 94, 248, 60, 242, 124, 160, 190, 8, 62, 194, 190, 236, 208, 81, 190, 136, 25, 172, 190, 87, 81, 14, 62, 183, 66, 116, 190, 98, 136, 28, 63, 18, 136, 185, 189, 150, 102, 4, 191, 226, 2, 180, 190, 163, 213, 212, 191, 209, 130, 193, 61, 222, 186, 59, 62, 75, 61, 213, 61, 107, 228, 239, 189, 66, 82, 250, 61, 193, 150, 216, 62, 26, 10, 140, 62, 200, 160, 147, 59, 244, 119, 231, 190, 158, 247, 55, 62, 239, 226, 200, 190, 31, 221, 62, 189, 54, 0, 51, 62, 76, 66, 20, 62, 45, 248, 218, 60, 32, 179, 170, 60, 12, 50, 222, 61, 100, 118, 239, 189, 240, 246, 26, 190, 205, 223, 32, 191, 218, 88, 173, 62, 70, 167, 216, 188, 72, 61, 129, 60, 90, 52, 156, 190, 164, 124, 141, 191, 173, 149, 30, 62, 46, 188, 148, 190, 229, 44, 120, 62, 181, 72, 150, 61, 177, 166, 83, 189, 178, 73, 193, 189, 225, 170, 130, 191, 95, 72, 145, 62, 81, 134, 180, 62, 248, 192, 35, 62, 38, 188, 233, 189, 221, 202, 153, 60, 152, 207, 251, 61, 221, 87, 133, 188, 227, 93, 50, 61, 194, 241, 79, 190, 242, 242, 185, 61, 80, 131, 119, 190, 225, 40, 57, 190, 103, 205, 98, 62, 59, 140, 203, 61, 46, 224, 17, 191, 249, 25, 44, 62, 205, 123, 241, 61, 125, 58, 198, 61, 233, 172, 52, 60, 85, 236, 214, 190, 86, 160, 101, 62, 109, 124, 65, 190, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 166, 28, 165, 186, 171, 33, 36, 190, 81, 56, 37, 191, 191, 103, 215, 62, 53, 247, 80, 190, 93, 204, 107, 61, 191, 60, 255, 189, 44, 5, 22, 190, 214, 4, 163, 61, 66, 199, 23, 190, 180, 142, 112, 61, 37, 247, 143, 190, 228, 238, 175, 189, 251, 40, 230, 60, 26, 57, 19, 62, 152, 158, 160, 62, 145, 61, 4, 63, 88, 116, 115, 190, 210, 89, 64, 62, 232, 99, 157, 62, 241, 14, 86, 189, 32, 16, 204, 59, 188, 230, 61, 62, 27, 234, 177, 61, 185, 242, 89, 62, 188, 212, 135, 61, 111, 19, 136, 60, 137, 229, 41, 62, 200, 178, 141, 190, 101, 206, 243, 190, 230, 175, 115, 62, 206, 214, 221, 62, 100, 169, 181, 190, 15, 193, 165, 61, 132, 240, 97, 189, 190, 58, 36, 61, 38, 5, 131, 190, 52, 215, 164, 189, 178, 247, 31, 62, 22, 68, 221, 189, 96, 229, 166, 189, 53, 195, 168, 190, 233, 223, 83, 62, 119, 14, 22, 63, 240, 219, 11, 190, 0, 87, 177, 62, 30, 203, 157, 61, 27, 203, 41, 62, 41, 167, 171, 62, 11, 236, 123, 62, 145, 201, 73, 61, 137, 176, 169, 62, 194, 130, 250, 61, 255, 153, 41, 62, 147, 164, 55, 62, 212, 93, 195, 60, 95, 2, 54, 60, 106, 49, 218, 188, 15, 165, 17, 62, 221, 62, 5, 62, 222, 206, 128, 61, 143, 226, 79, 190, 222, 167, 231, 61, 254, 1, 40, 62, 139, 60, 64, 62, 166, 23, 19, 62, 16, 96, 164, 62, 73, 130, 206, 189, 100, 140, 150, 61, 246, 117, 10, 61, 117, 123, 44, 189, 4, 22, 229, 61, 197, 213, 89, 62, 191, 59, 151, 62, 175, 74, 22, 190, 119, 44, 54, 62, 30, 48, 198, 62, 168, 81, 105, 61, 32, 48, 143, 62, 55, 227, 211, 189, 164, 67, 137, 189, 217, 186, 221, 189, 215, 235, 116, 62, 14, 82, 157, 189, 237, 221, 153, 187, 238, 183, 138, 188, 126, 127, 150, 61, 127, 81, 171, 61, 86, 173, 25, 190, 124, 128, 20, 62, 38, 43, 51, 62, 131, 27, 150, 62, 123, 209, 208, 61, 24, 244, 136, 61, 251, 173, 185, 61, 90, 89, 19, 190, 246, 112, 125, 190, 156, 68, 204, 59, 197, 251, 96, 61, 212, 221, 9, 189, 188, 44, 111, 61, 71, 44, 31, 61, 114, 60, 25, 62, 173, 197, 195, 190, 174, 137, 154, 190, 229, 49, 5, 191, 120, 92, 78, 62, 114, 165, 0, 62, 231, 5, 37, 191, 182, 180, 180, 59, 166, 47, 3, 191, 96, 65, 208, 62, 61, 164, 89, 190, 151, 136, 248, 189, 230, 157, 131, 189, 43, 164, 204, 59, 140, 198, 226, 189, 203, 74, 92, 189, 58, 92, 200, 62, 137, 111, 191, 60, 38, 147, 160, 62, 168, 251, 193, 190, 74, 82, 218, 189, 128, 232, 90, 190, 247, 231, 233, 61, 44, 0, 133, 189, 228, 221, 182, 62, 103, 25, 139, 62, 123, 72, 143, 62, 140, 21, 19, 191, 6, 241, 207, 188, 118, 101, 214, 61, 168, 253, 185, 61, 62, 34, 81, 191, 140, 228, 52, 190, 172, 15, 176, 62, 171, 194, 153, 62, 34, 138, 28, 190, 15, 85, 18, 190, 58, 1, 116, 190, 189, 16, 27, 191, 97, 234, 158, 59, 97, 60, 136, 191, 157, 228, 96, 190, 159, 15, 133, 188, 44, 197, 204, 62, 17, 116, 213, 61, 62, 57, 45, 62, 242, 226, 26, 62, 74, 154, 148, 190, 13, 77, 242, 61, 211, 209, 194, 61, 138, 74, 216, 190, 186, 136, 212, 189, 141, 144, 215, 190, 114, 66, 140, 191, 194, 76, 218, 62, 209, 146, 99, 189, 15, 145, 156, 190, 227, 96, 138, 188, 21, 72, 165, 62, 17, 253, 179, 62, 151, 80, 233, 61, 4, 208, 104, 190, 64, 217, 34, 62, 23, 181, 153, 61, 68, 59, 13, 190, 59, 8, 147, 61, 224, 52, 6, 63, 96, 241, 236, 189, 197, 202, 73, 61, 145, 11, 78, 62, 254, 53, 16, 189, 133, 228, 78, 62, 101, 195, 239, 188, 145, 234, 105, 191, 118, 240, 124, 190, 46, 190, 48, 62, 241, 171, 247, 187, 131, 25, 158, 190, 250, 254, 177, 61, 1, 115, 31, 62, 209, 151, 202, 60, 249, 233, 159, 189, 179, 76, 214, 189, 187, 78, 133, 190, 98, 155, 45, 189, 127, 10, 202, 189, 15, 63, 175, 62, 135, 122, 79, 190, 116, 80, 191, 190, 34, 37, 190, 190, 180, 49, 237, 189, 12, 129, 195, 61, 9, 165, 130, 62, 10, 237, 70, 191, 196, 159, 122, 62, 211, 34, 196, 189, 249, 76, 47, 62, 147, 68, 121, 61, 124, 89, 82, 62, 228, 243, 132, 62, 54, 249, 244, 189, 52, 90, 170, 62, 240, 161, 183, 62, 196, 78, 19, 61, 19, 198, 61, 62, 0, 142, 249, 190, 149, 215, 50, 191, 8, 19, 47, 62, 225, 211, 79, 58, 109, 214, 126, 190, 6, 71, 76, 60, 50, 33, 88, 62, 190, 71, 185, 189, 71, 101, 212, 190, 250, 47, 24, 191, 152, 142, 144, 190, 174, 88, 173, 62, 37, 236, 231, 188, 82, 120, 217, 61, 182, 69, 239, 189, 149, 218, 4, 191, 23, 143, 13, 191, 184, 54, 23, 190, 17, 48, 51, 60, 134, 234, 59, 62, 149, 255, 49, 191, 120, 92, 217, 61, 139, 208, 239, 186, 55, 194, 222, 187, 84, 44, 252, 188, 188, 251, 132, 189, 200, 65, 158, 62, 55, 236, 25, 191, 65, 42, 23, 62, 115, 52, 60, 62, 69, 241, 212, 60, 160, 31, 231, 61, 48, 131, 2, 191, 72, 160, 46, 191, 216, 125, 136, 62, 132, 11, 73, 190, 38, 202, 115, 190, 100, 42, 0, 62, 139, 46, 35, 62, 113, 108, 97, 60, 153, 180, 97, 190, 194, 29, 6, 190, 97, 47, 145, 188, 13, 4, 177, 61, 179, 227, 234, 188, 79, 243, 154, 189, 45, 16, 40, 62, 40, 129, 180, 189, 159, 241, 92, 190, 9, 145, 60, 62, 38, 99, 90, 62, 216, 156, 154, 62, 194, 242, 22, 187, 77, 60, 81, 62, 38, 28, 75, 190, 37, 247, 70, 189, 67, 178, 9, 62, 85, 167, 15, 62, 214, 235, 3, 61, 185, 52, 1, 187, 102, 221, 74, 62, 10, 101, 202, 61, 132, 139, 2, 62, 73, 37, 28, 188, 197, 78, 28, 191, 243, 114, 233, 190, 56, 35, 144, 62, 219, 79, 31, 190, 3, 17, 6, 190, 205, 201, 37, 62, 204, 220, 142, 62, 59, 165, 129, 61, 28, 81, 104, 190, 163, 120, 180, 190, 233, 41, 167, 188, 140, 79, 23, 190, 242, 133, 40, 61, 87, 197, 245, 60, 132, 85, 60, 189, 65, 112, 250, 190, 90, 133, 251, 190, 167, 105, 31, 62, 38, 107, 176, 62, 214, 89, 214, 61, 80, 201, 229, 189, 44, 142, 107, 61, 115, 241, 163, 61, 163, 81, 162, 61, 88, 215, 169, 189, 254, 26, 235, 190, 127, 81, 211, 190, 218, 124, 158, 62, 40, 228, 141, 62, 101, 241, 0, 191, 209, 73, 15, 62, 73, 13, 97, 190, 124, 123, 60, 62, 172, 51, 31, 190, 248, 95, 80, 189, 101, 196, 72, 190, 178, 72, 162, 61, 19, 178, 109, 60, 208, 211, 163, 62, 15, 157, 179, 62, 160, 253, 161, 190, 15, 161, 9, 62, 102, 92, 24, 190, 11, 144, 142, 189, 47, 50, 163, 190, 3, 86, 75, 62, 8, 240, 78, 189, 177, 195, 179, 189, 173, 46, 104, 190, 109, 222, 190, 189, 152, 206, 135, 189, 182, 42, 115, 62, 238, 155, 239, 190, 233, 96, 177, 61, 93, 106, 35, 191, 122, 109, 249, 61, 119, 14, 22, 190, 239, 110, 118, 189, 109, 42, 134, 188, 255, 45, 151, 61, 228, 21, 142, 191, 35, 104, 153, 62, 210, 114, 109, 61, 194, 201, 60, 62, 75, 223, 17, 191, 107, 119, 114, 191, 15, 222, 70, 190, 135, 19, 162, 189, 83, 26, 19, 191, 197, 160, 165, 61, 206, 157, 249, 60, 136, 233, 103, 61, 34, 203, 199, 190, 198, 111, 28, 60, 106, 187, 100, 191, 6, 23, 89, 62, 91, 69, 232, 61, 199, 74, 160, 61, 142, 245, 84, 190, 141, 15, 12, 191, 248, 42, 16, 190, 109, 86, 105, 190, 110, 175, 40, 191, 121, 9, 209, 191, 128, 145, 45, 62, 211, 158, 120, 191, 196, 168, 59, 62, 218, 82, 0, 190, 5, 233, 97, 190, 221, 139, 63, 190, 219, 166, 207, 190, 173, 82, 66, 62, 110, 223, 15, 63, 99, 138, 58, 189, 64, 147, 21, 188, 121, 157, 173, 62, 242, 181, 81, 62, 122, 115, 197, 62, 114, 49, 18, 62, 67, 130, 160, 190, 6, 64, 41, 190, 116, 197, 25, 190, 79, 92, 231, 190, 77, 118, 97, 62, 209, 21, 141, 62, 251, 111, 179, 190, 96, 43, 157, 61, 72, 68, 157, 62, 14, 8, 182, 62, 162, 17, 4, 61, 28, 161, 64, 191, 160, 224, 6, 62, 50, 117, 92, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 113, 3, 190, 123, 153, 25, 62, 241, 93, 135, 189, 74, 197, 38, 60, 216, 144, 68, 61, 161, 128, 203, 189, 185, 249, 53, 190, 151, 151, 86, 189, 176, 197, 176, 189, 76, 225, 144, 62, 48, 72, 50, 62, 158, 124, 213, 189, 229, 231, 151, 190, 18, 150, 193, 189, 176, 217, 189, 61, 232, 37, 45, 189, 250, 137, 182, 61, 133, 236, 113, 61, 177, 42, 171, 188, 213, 229, 250, 189, 28, 204, 67, 190, 211, 125, 83, 62, 52, 13, 115, 62, 114, 183, 168, 187, 1, 41, 223, 189, 77, 117, 1, 62, 225, 9, 180, 62, 3, 85, 139, 61, 232, 241, 19, 61, 111, 221, 35, 189, 112, 21, 23, 190, 49, 144, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 36, 83, 190, 81, 79, 83, 63, 203, 213, 215, 61, 67, 219, 113, 60, 73, 16, 25, 191, 141, 15, 166, 62, 170, 21, 120, 62, 74, 71, 237, 189, 228, 131, 95, 191, 217, 207, 68, 62, 231, 101, 186, 62, 51, 20, 6, 59, 18, 179, 142, 63, 100, 113, 134, 60, 90, 171, 206, 190, 208, 0, 65, 190, 198, 10, 244, 60, 51, 81, 45, 63, 183, 31, 143, 62, 158, 217, 150, 60, 183, 64, 228, 190, 47, 202, 226, 61, 114, 69, 246, 189, 34, 145, 163, 62, 125, 224, 140, 191, 181, 80, 37, 191, 133, 178, 49, 191, 108, 23, 93, 190, 138, 88, 0, 191, 31, 138, 112, 62, 241, 205, 147, 191, 240, 151, 228, 62, 119, 226, 151, 61, 11, 161, 3, 63, 12, 42, 22, 61, 144, 96, 247, 61, 215, 77, 189, 190, 194, 40, 105, 62, 45, 69, 247, 61, 209, 42, 35, 189, 31, 121, 58, 62, 227, 7, 135, 190, 20, 212, 146, 61, 16, 73, 72, 59, 234, 24, 238, 62, 197, 105, 46, 62, 21, 128, 19, 62, 2, 65, 23, 189, 153, 158, 64, 190, 119, 166, 22, 62, 131, 45, 186, 189, 184, 211, 23, 190, 65, 171, 134, 61, 11, 24, 195, 190, 104, 125, 154, 190, 163, 36, 226, 62, 14, 190, 98, 62, 245, 210, 193, 61, 177, 54, 106, 61, 136, 240, 41, 61, 211, 115, 243, 61, 24, 125, 119, 190, 250, 36, 133, 189, 149, 132, 126, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 33, 43, 62, 229, 246, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 69, 9, 64, 178, 40, 21, 63, 0, 82, 1, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 65, 4, 190, 65, 233, 44, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}