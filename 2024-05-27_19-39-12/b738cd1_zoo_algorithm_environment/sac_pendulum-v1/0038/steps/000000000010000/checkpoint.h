// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 61, 226, 189, 10, 100, 104, 62, 76, 208, 222, 62, 119, 139, 100, 62, 140, 52, 28, 63, 115, 199, 204, 190, 31, 234, 131, 188, 12, 174, 59, 63, 58, 53, 12, 191, 140, 148, 46, 189, 164, 54, 79, 62, 30, 81, 242, 62, 162, 178, 189, 189, 70, 169, 72, 63, 43, 25, 205, 190, 194, 109, 0, 188, 26, 169, 136, 63, 96, 247, 156, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 22, 26, 95, 62, 121, 227, 142, 60, 207, 114, 114, 62, 157, 58, 69, 63, 178, 50, 130, 63, 172, 145, 164, 62, 154, 76, 159, 190, 183, 53, 151, 191, 228, 8, 121, 190, 44, 9, 164, 190, 138, 225, 216, 190, 250, 59, 218, 61, 99, 18, 153, 62, 106, 243, 83, 63, 205, 178, 214, 188, 123, 37, 75, 191, 251, 225, 29, 63, 91, 224, 139, 60, 1, 210, 206, 190, 199, 77, 32, 191, 161, 131, 197, 61, 123, 164, 92, 191, 250, 46, 241, 190, 51, 90, 94, 189, 58, 176, 168, 62, 167, 134, 148, 191, 39, 123, 120, 190, 0, 154, 117, 190, 166, 149, 19, 63, 200, 184, 181, 62, 252, 229, 151, 63, 57, 184, 36, 63, 44, 81, 214, 62, 4, 169, 5, 188, 240, 240, 88, 191, 196, 174, 216, 190, 120, 153, 51, 63, 70, 46, 202, 189, 159, 73, 51, 191, 200, 173, 29, 63, 126, 84, 22, 63, 131, 51, 190, 62, 211, 168, 164, 62, 129, 231, 7, 63, 223, 244, 187, 190, 71, 78, 199, 62, 47, 103, 211, 190, 91, 203, 223, 62, 83, 221, 123, 190, 227, 130, 58, 63, 195, 7, 22, 63, 186, 151, 47, 63, 157, 253, 141, 61, 24, 59, 220, 190, 239, 2, 144, 61, 63, 152, 152, 63, 172, 184, 1, 63, 174, 196, 206, 190, 95, 215, 5, 191, 24, 92, 241, 189, 74, 195, 8, 191, 102, 189, 26, 191, 200, 181, 46, 190, 115, 5, 68, 63, 152, 202, 122, 59, 140, 80, 171, 62, 108, 21, 27, 191, 189, 239, 59, 191, 16, 161, 18, 191, 176, 115, 241, 62, 140, 121, 175, 191, 83, 196, 193, 190, 213, 79, 217, 62, 69, 150, 135, 190, 97, 31, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 219, 129, 191, 139, 226, 41, 62, 206, 101, 51, 60, 145, 135, 106, 190, 233, 115, 133, 190, 84, 192, 67, 62, 187, 166, 19, 191, 75, 200, 31, 191, 141, 178, 150, 190, 89, 25, 24, 190, 70, 107, 245, 61, 192, 112, 35, 63, 227, 84, 196, 62, 115, 133, 126, 190, 157, 231, 63, 63, 238, 149, 140, 61, 211, 87, 46, 190, 35, 90, 159, 62, 47, 92, 67, 62, 8, 89, 30, 62, 189, 87, 144, 190, 154, 114, 199, 62, 143, 146, 11, 63, 209, 217, 171, 189, 101, 67, 20, 191, 30, 179, 56, 62, 243, 114, 61, 63, 159, 34, 17, 63, 233, 232, 228, 189, 141, 116, 159, 190, 191, 141, 15, 61, 89, 248, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 39, 145, 59, 13, 233, 74, 62, 142, 114, 92, 190, 207, 73, 25, 62, 31, 66, 158, 62, 228, 148, 71, 62, 188, 27, 9, 190, 182, 252, 45, 61, 162, 43, 117, 62, 226, 99, 218, 61, 123, 119, 33, 62, 124, 94, 10, 62, 165, 194, 105, 189, 192, 147, 179, 60, 41, 218, 135, 189, 208, 86, 235, 189, 46, 39, 50, 62, 159, 135, 89, 61, 241, 26, 118, 190, 206, 108, 196, 61, 154, 170, 231, 189, 164, 120, 236, 189, 90, 86, 246, 60, 16, 208, 39, 62, 252, 221, 44, 62, 49, 254, 252, 60, 159, 234, 202, 189, 70, 137, 60, 189, 165, 26, 134, 188, 98, 252, 239, 190, 18, 250, 57, 190, 155, 95, 118, 60, 230, 149, 145, 190, 93, 5, 36, 190, 166, 194, 192, 190, 34, 172, 119, 62, 171, 13, 64, 191, 133, 138, 76, 62, 198, 162, 35, 62, 52, 94, 206, 190, 162, 236, 35, 191, 202, 71, 199, 190, 8, 0, 36, 62, 212, 43, 160, 62, 190, 6, 155, 61, 117, 251, 65, 190, 238, 10, 143, 61, 166, 122, 165, 62, 165, 29, 169, 62, 30, 121, 186, 189, 110, 143, 82, 190, 104, 215, 97, 61, 11, 86, 167, 190, 113, 52, 157, 190, 125, 94, 180, 61, 13, 158, 43, 62, 234, 227, 250, 62, 206, 58, 0, 62, 157, 151, 207, 61, 17, 142, 79, 189, 214, 100, 105, 190, 179, 139, 187, 190, 85, 17, 71, 62, 228, 85, 181, 62, 143, 22, 44, 190, 255, 60, 50, 190, 1, 153, 63, 61, 138, 240, 7, 190, 58, 192, 9, 190, 91, 149, 214, 61, 245, 0, 37, 189, 150, 153, 209, 186, 227, 224, 17, 190, 59, 72, 1, 190, 157, 203, 224, 189, 101, 186, 221, 61, 73, 14, 67, 190, 45, 15, 47, 190, 129, 104, 29, 190, 163, 232, 160, 187, 49, 177, 238, 189, 239, 79, 46, 190, 222, 110, 14, 189, 72, 53, 5, 62, 242, 186, 211, 61, 17, 213, 1, 190, 135, 102, 1, 189, 14, 162, 1, 62, 175, 194, 149, 61, 200, 58, 155, 188, 223, 96, 46, 189, 182, 93, 60, 190, 143, 157, 17, 189, 177, 110, 202, 61, 145, 108, 47, 190, 202, 17, 53, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 182, 144, 209, 61, 225, 57, 156, 62, 71, 200, 80, 61, 206, 32, 204, 61, 51, 130, 115, 62, 220, 154, 22, 189, 152, 156, 120, 189, 167, 140, 121, 60, 149, 244, 103, 61, 228, 2, 173, 190, 2, 111, 24, 190, 216, 15, 219, 61, 186, 174, 102, 190, 91, 11, 167, 62, 65, 220, 39, 191, 109, 98, 245, 190, 66, 214, 215, 189, 102, 122, 100, 62, 190, 71, 188, 190, 60, 84, 134, 61, 34, 53, 213, 61, 243, 182, 47, 62, 185, 100, 133, 61, 213, 42, 59, 188, 2, 129, 63, 62, 22, 145, 45, 189, 98, 73, 190, 190, 234, 237, 91, 191, 147, 51, 177, 62, 58, 10, 148, 190, 52, 102, 132, 190, 85, 189, 182, 188, 150, 81, 189, 190, 242, 161, 172, 61, 172, 63, 3, 190, 139, 77, 68, 62, 30, 225, 3, 191, 35, 185, 124, 62, 46, 234, 250, 189, 154, 31, 176, 190, 101, 167, 16, 191, 114, 105, 167, 190, 11, 217, 134, 189, 124, 148, 214, 61, 80, 227, 11, 62, 100, 169, 168, 189, 38, 168, 224, 189, 250, 27, 139, 62, 15, 209, 161, 62, 215, 243, 235, 189, 81, 133, 212, 189, 31, 5, 125, 62, 118, 144, 77, 189, 96, 113, 76, 189, 59, 76, 220, 61, 144, 239, 143, 61, 106, 81, 200, 62, 108, 82, 209, 61, 227, 200, 142, 61, 8, 103, 84, 60, 98, 249, 175, 60, 94, 244, 130, 190, 91, 59, 204, 61, 70, 179, 225, 61, 179, 106, 44, 62, 208, 1, 210, 57, 32, 203, 75, 62, 82, 121, 62, 190, 40, 139, 129, 62, 202, 150, 144, 61, 3, 50, 209, 188, 32, 186, 8, 61, 165, 10, 183, 190, 213, 1, 48, 60, 184, 159, 191, 190, 73, 192, 66, 62, 196, 110, 104, 62, 107, 207, 231, 190, 171, 44, 153, 190, 35, 210, 187, 61, 131, 221, 236, 190, 41, 161, 121, 190, 25, 157, 2, 62, 239, 21, 140, 62, 102, 194, 142, 188, 163, 152, 30, 62, 199, 245, 109, 62, 151, 192, 147, 190, 146, 129, 124, 62, 66, 24, 62, 190, 223, 182, 130, 189, 149, 61, 8, 190, 1, 240, 23, 62, 70, 30, 38, 190, 139, 161, 141, 61, 61, 20, 202, 187, 164, 65, 103, 189, 142, 199, 86, 60, 163, 55, 87, 61, 195, 112, 25, 190, 193, 191, 159, 189, 167, 112, 181, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 64, 213, 14, 62, 103, 202, 28, 190, 193, 51, 179, 61, 235, 186, 245, 61, 169, 202, 2, 62, 227, 92, 179, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 120, 245, 133, 61, 86, 252, 168, 189, 48, 225, 117, 61, 19, 178, 24, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 110, 184, 132, 189, 214, 155, 15, 190, 30, 130, 74, 189, 135, 127, 213, 189, 245, 249, 34, 60, 187, 192, 9, 190, 4, 63, 2, 190, 111, 81, 17, 61, 116, 113, 131, 60, 152, 121, 225, 190, 238, 233, 133, 189, 115, 210, 1, 191, 56, 201, 239, 188, 191, 60, 55, 190, 42, 20, 23, 62, 252, 245, 24, 62, 14, 217, 37, 62, 87, 46, 102, 191, 154, 238, 183, 62, 159, 248, 208, 61, 91, 174, 29, 62, 79, 217, 86, 190, 2, 106, 161, 191, 245, 63, 126, 189, 23, 246, 183, 189, 37, 26, 15, 190, 216, 236, 42, 60, 240, 10, 42, 61, 112, 28, 218, 190, 142, 101, 150, 190, 182, 97, 111, 190, 164, 9, 95, 191, 130, 128, 5, 62, 1, 128, 125, 62, 133, 73, 173, 60, 200, 214, 120, 62, 69, 231, 111, 190, 162, 206, 98, 189, 106, 247, 116, 190, 254, 48, 122, 61, 109, 135, 48, 190, 61, 59, 252, 60, 117, 153, 61, 190, 145, 142, 242, 61, 243, 37, 187, 189, 54, 108, 10, 190, 66, 101, 170, 190, 42, 148, 203, 190, 208, 196, 0, 60, 213, 76, 212, 61, 190, 135, 129, 189, 44, 84, 31, 190, 167, 20, 29, 188, 110, 72, 129, 62, 35, 180, 149, 61, 48, 137, 3, 62, 147, 114, 16, 190, 158, 204, 131, 62, 111, 237, 134, 61, 110, 56, 141, 61, 208, 72, 183, 61, 117, 74, 61, 62, 152, 31, 80, 62, 135, 149, 35, 62, 247, 144, 138, 61, 174, 101, 237, 189, 173, 168, 243, 61, 116, 67, 140, 189, 246, 61, 153, 62, 29, 161, 34, 190, 188, 57, 1, 189, 26, 194, 201, 189, 207, 20, 226, 190, 71, 124, 191, 188, 210, 30, 8, 191, 122, 206, 217, 190, 42, 246, 48, 61, 28, 35, 180, 189, 55, 180, 141, 190, 254, 123, 48, 190, 192, 242, 37, 62, 11, 225, 72, 61, 142, 111, 3, 191, 198, 91, 185, 62, 117, 194, 242, 61, 111, 232, 57, 62, 247, 246, 163, 189, 49, 44, 6, 190, 120, 33, 42, 62, 12, 117, 29, 62, 205, 57, 251, 189, 50, 32, 10, 61, 151, 100, 140, 62, 140, 228, 54, 190, 232, 131, 78, 62, 191, 181, 141, 190, 156, 107, 22, 189, 220, 80, 58, 62, 195, 167, 4, 62, 48, 58, 195, 190, 141, 83, 189, 62, 185, 85, 241, 189, 60, 213, 218, 189, 11, 22, 246, 60, 233, 158, 162, 59, 250, 119, 14, 189, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 9, 233, 149, 188, 84, 225, 40, 190, 243, 180, 148, 187, 78, 12, 187, 61, 178, 44, 12, 190, 206, 50, 58, 188, 77, 174, 88, 188, 8, 250, 45, 190, 94, 97, 198, 189, 183, 152, 253, 61, 200, 67, 202, 61, 152, 252, 6, 62, 108, 209, 46, 190, 195, 207, 3, 62, 79, 45, 202, 189, 173, 254, 28, 61, 6, 242, 125, 61, 9, 172, 254, 189, 116, 100, 7, 190, 75, 177, 74, 189, 54, 80, 19, 190, 74, 125, 218, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 52, 245, 70, 60, 85, 142, 44, 62, 52, 53, 10, 62, 127, 13, 92, 188, 148, 187, 169, 62, 57, 44, 155, 62, 200, 20, 133, 61, 155, 191, 143, 62, 207, 232, 144, 62, 209, 23, 56, 189, 219, 176, 235, 189, 104, 193, 2, 62, 115, 243, 235, 188, 198, 107, 107, 61, 233, 87, 44, 191, 141, 84, 7, 191, 174, 32, 208, 189, 12, 19, 72, 62, 228, 143, 222, 190, 55, 11, 146, 190, 196, 159, 154, 62, 8, 5, 157, 62, 107, 79, 217, 187, 55, 241, 200, 189, 198, 22, 18, 191, 41, 67, 29, 62, 138, 23, 97, 191, 189, 175, 248, 190, 224, 209, 192, 61, 22, 78, 109, 61, 46, 216, 52, 191, 255, 137, 43, 191, 191, 27, 210, 61, 95, 156, 51, 190, 182, 157, 62, 190, 94, 183, 145, 187, 107, 251, 144, 189, 229, 151, 239, 189, 180, 15, 19, 190, 231, 79, 46, 61, 29, 231, 180, 188, 100, 11, 200, 60, 226, 249, 158, 190, 151, 208, 211, 61, 222, 118, 139, 189, 124, 0, 31, 61, 205, 236, 170, 190, 77, 189, 130, 61, 220, 59, 13, 190, 118, 196, 19, 62, 89, 56, 37, 190, 214, 142, 99, 190, 75, 100, 115, 189, 215, 27, 164, 190, 132, 66, 120, 189, 3, 92, 8, 62, 32, 207, 238, 60, 133, 170, 210, 189, 151, 146, 100, 190, 225, 152, 43, 190, 71, 160, 24, 190, 200, 69, 15, 62, 208, 27, 189, 60, 66, 32, 66, 61, 196, 41, 190, 61, 115, 117, 29, 62, 177, 165, 161, 62, 51, 115, 93, 190, 49, 160, 227, 61, 26, 194, 245, 189, 247, 238, 251, 61, 103, 222, 173, 60, 210, 28, 184, 62, 80, 235, 11, 63, 79, 69, 9, 62, 224, 146, 253, 62, 34, 99, 175, 61, 138, 148, 81, 189, 170, 134, 0, 190, 5, 91, 63, 191, 231, 56, 44, 190, 217, 235, 184, 62, 85, 74, 73, 62, 124, 123, 154, 190, 251, 203, 110, 62, 1, 118, 14, 62, 88, 170, 212, 189, 82, 212, 51, 189, 62, 18, 179, 190, 123, 178, 43, 61, 115, 139, 8, 190, 199, 178, 191, 189, 115, 119, 213, 61, 46, 235, 114, 62, 251, 212, 250, 190, 224, 153, 9, 191, 41, 53, 17, 62, 142, 30, 130, 61, 223, 131, 133, 62, 82, 32, 147, 190, 222, 61, 174, 188, 44, 217, 188, 61, 241, 137, 34, 190, 209, 35, 151, 62, 221, 214, 145, 62, 76, 254, 182, 62, 4, 188, 237, 189, 63, 42, 20, 188, 254, 22, 13, 190, 145, 150, 124, 62, 165, 105, 249, 61, 163, 234, 108, 190, 105, 8, 8, 190, 225, 164, 169, 62, 130, 153, 3, 61, 89, 2, 230, 189, 189, 128, 146, 62, 167, 249, 164, 62, 78, 239, 32, 190, 215, 83, 44, 190, 176, 242, 216, 190, 225, 182, 150, 61, 144, 51, 145, 189, 188, 40, 236, 189, 151, 41, 73, 62, 32, 53, 100, 62, 70, 135, 130, 190, 28, 109, 6, 190, 5, 176, 32, 62, 19, 179, 6, 189, 165, 66, 115, 190, 215, 74, 87, 189, 71, 163, 211, 190, 177, 184, 134, 190, 79, 75, 188, 189, 148, 22, 46, 61, 232, 236, 35, 190, 227, 16, 79, 190, 68, 142, 165, 60, 94, 249, 1, 62, 12, 234, 70, 189, 214, 14, 79, 62, 153, 90, 57, 62, 56, 156, 153, 61, 39, 250, 73, 62, 173, 90, 232, 61, 99, 210, 132, 190, 249, 80, 38, 62, 88, 180, 33, 189, 121, 90, 22, 60, 170, 160, 167, 189, 92, 188, 161, 189, 167, 238, 138, 190, 59, 62, 172, 187, 204, 128, 78, 62, 212, 20, 18, 62, 94, 244, 52, 59, 77, 54, 58, 61, 193, 159, 56, 187, 222, 234, 131, 190, 87, 50, 175, 190, 118, 237, 104, 190, 17, 92, 162, 190, 4, 168, 28, 62, 149, 7, 237, 189, 83, 211, 21, 63, 18, 136, 185, 189, 230, 222, 217, 190, 209, 78, 179, 190, 251, 155, 160, 191, 91, 180, 173, 61, 81, 207, 24, 62, 183, 66, 255, 61, 248, 72, 24, 190, 154, 101, 225, 61, 117, 207, 182, 62, 139, 154, 152, 62, 156, 69, 238, 188, 28, 143, 254, 190, 93, 100, 48, 62, 75, 27, 202, 190, 183, 247, 163, 189, 7, 14, 41, 62, 248, 251, 29, 62, 196, 42, 189, 60, 63, 139, 213, 60, 17, 179, 210, 61, 168, 120, 2, 190, 230, 22, 35, 190, 11, 146, 6, 191, 236, 255, 138, 62, 212, 29, 44, 190, 222, 169, 177, 60, 129, 122, 84, 190, 50, 250, 43, 191, 161, 135, 21, 62, 243, 5, 56, 190, 17, 100, 154, 62, 181, 72, 150, 61, 8, 2, 17, 189, 52, 14, 176, 189, 58, 34, 73, 191, 248, 244, 132, 62, 163, 249, 187, 62, 144, 67, 218, 61, 104, 204, 2, 190, 15, 6, 2, 189, 11, 115, 189, 61, 201, 105, 143, 188, 166, 220, 203, 60, 173, 179, 61, 190, 230, 117, 49, 62, 119, 206, 136, 190, 223, 76, 16, 190, 133, 199, 77, 62, 12, 158, 175, 61, 38, 20, 161, 190, 226, 55, 26, 62, 105, 243, 204, 61, 145, 12, 74, 188, 208, 191, 134, 188, 165, 164, 252, 190, 238, 192, 77, 62, 63, 139, 75, 190, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 103, 105, 232, 59, 153, 109, 137, 190, 210, 33, 39, 191, 3, 46, 207, 62, 196, 147, 240, 60, 218, 178, 140, 62, 191, 60, 255, 189, 112, 96, 26, 190, 178, 150, 246, 60, 4, 216, 104, 190, 5, 86, 113, 61, 14, 196, 164, 190, 235, 171, 142, 189, 29, 173, 73, 61, 60, 140, 37, 62, 155, 205, 102, 62, 157, 6, 0, 63, 159, 166, 104, 190, 173, 207, 253, 61, 60, 222, 63, 62, 113, 67, 136, 189, 8, 117, 254, 188, 85, 245, 65, 62, 35, 198, 141, 61, 57, 6, 178, 188, 113, 190, 42, 61, 35, 118, 55, 188, 212, 160, 30, 62, 48, 165, 135, 190, 43, 236, 249, 190, 220, 60, 29, 62, 251, 118, 92, 62, 232, 124, 165, 190, 241, 124, 31, 61, 119, 216, 250, 189, 48, 38, 206, 60, 193, 189, 132, 190, 229, 12, 49, 190, 178, 247, 31, 62, 106, 178, 159, 189, 120, 158, 198, 189, 48, 74, 172, 190, 102, 10, 5, 62, 78, 77, 10, 63, 165, 3, 35, 190, 145, 144, 149, 62, 44, 201, 162, 60, 40, 183, 5, 62, 77, 51, 169, 62, 92, 102, 97, 62, 77, 18, 119, 59, 40, 48, 170, 62, 74, 137, 209, 61, 195, 20, 21, 62, 214, 14, 48, 62, 4, 54, 227, 58, 53, 104, 189, 187, 227, 133, 91, 189, 131, 255, 183, 61, 110, 231, 152, 61, 26, 229, 95, 61, 13, 204, 87, 190, 246, 83, 172, 61, 208, 224, 30, 62, 112, 3, 93, 62, 40, 199, 21, 62, 205, 109, 158, 62, 32, 162, 190, 189, 63, 153, 177, 61, 15, 220, 207, 60, 117, 123, 44, 189, 17, 14, 248, 61, 195, 38, 97, 62, 49, 175, 85, 62, 1, 238, 31, 190, 248, 175, 40, 62, 175, 171, 175, 62, 97, 41, 48, 61, 2, 69, 130, 62, 112, 65, 12, 190, 179, 37, 143, 189, 53, 168, 147, 189, 75, 98, 93, 62, 28, 121, 172, 189, 62, 0, 200, 60, 94, 79, 219, 187, 29, 246, 202, 61, 62, 127, 177, 61, 90, 18, 74, 190, 39, 200, 15, 62, 169, 91, 252, 61, 8, 100, 130, 62, 25, 146, 20, 62, 97, 241, 179, 61, 201, 17, 160, 61, 48, 173, 28, 190, 117, 78, 90, 190, 252, 10, 134, 60, 232, 49, 185, 61, 177, 7, 166, 60, 182, 91, 69, 61, 174, 25, 152, 61, 114, 60, 25, 62, 181, 202, 74, 190, 134, 80, 182, 190, 39, 242, 163, 190, 15, 83, 61, 62, 97, 68, 208, 61, 232, 248, 15, 191, 16, 43, 67, 188, 181, 52, 232, 190, 30, 81, 194, 62, 181, 137, 172, 189, 158, 119, 68, 190, 62, 11, 101, 189, 130, 33, 135, 60, 17, 27, 60, 190, 212, 72, 81, 189, 166, 2, 161, 62, 107, 90, 182, 61, 206, 202, 171, 62, 82, 75, 209, 190, 228, 233, 204, 189, 9, 6, 40, 190, 165, 211, 244, 60, 122, 58, 212, 189, 41, 67, 166, 62, 120, 99, 129, 62, 203, 235, 134, 62, 122, 160, 198, 190, 76, 67, 81, 190, 4, 255, 162, 61, 168, 253, 185, 61, 121, 255, 34, 191, 140, 228, 52, 190, 201, 207, 151, 62, 15, 228, 98, 62, 228, 110, 17, 190, 99, 123, 6, 190, 206, 55, 160, 190, 246, 80, 15, 191, 217, 106, 255, 186, 174, 19, 123, 191, 206, 142, 92, 190, 184, 171, 33, 189, 26, 172, 179, 62, 124, 72, 223, 186, 234, 241, 205, 61, 132, 239, 216, 61, 182, 189, 147, 190, 219, 177, 198, 61, 98, 60, 159, 61, 253, 62, 15, 190, 175, 221, 5, 190, 207, 52, 204, 190, 254, 58, 105, 191, 50, 102, 199, 62, 209, 146, 99, 189, 242, 154, 151, 190, 227, 96, 138, 188, 216, 242, 140, 62, 70, 124, 182, 62, 150, 71, 218, 61, 148, 109, 113, 190, 165, 196, 239, 61, 122, 175, 145, 61, 68, 59, 13, 190, 100, 96, 105, 60, 104, 64, 5, 63, 79, 1, 20, 189, 73, 223, 106, 61, 129, 231, 63, 62, 55, 204, 181, 189, 31, 144, 84, 62, 249, 50, 18, 188, 123, 17, 90, 191, 202, 15, 136, 190, 127, 80, 53, 62, 61, 38, 83, 61, 238, 137, 160, 190, 178, 252, 168, 61, 121, 205, 30, 62, 81, 225, 154, 60, 7, 234, 164, 189, 232, 255, 177, 189, 211, 254, 133, 190, 92, 17, 109, 189, 195, 191, 129, 189, 25, 251, 169, 62, 201, 235, 7, 190, 30, 218, 154, 190, 64, 97, 115, 190, 180, 49, 237, 189, 57, 239, 212, 61, 178, 187, 130, 62, 161, 135, 4, 191, 159, 202, 112, 62, 179, 217, 1, 190, 249, 76, 47, 62, 111, 25, 194, 189, 225, 84, 105, 62, 155, 147, 131, 62, 159, 131, 54, 190, 109, 144, 149, 62, 8, 25, 135, 62, 179, 140, 6, 189, 60, 235, 222, 61, 191, 183, 223, 190, 130, 255, 11, 191, 37, 230, 47, 62, 33, 51, 54, 61, 249, 62, 118, 190, 93, 73, 59, 61, 121, 193, 78, 62, 172, 143, 204, 189, 76, 248, 129, 190, 152, 53, 10, 191, 218, 107, 113, 190, 216, 34, 142, 62, 198, 79, 159, 189, 170, 159, 205, 61, 96, 206, 137, 189, 223, 112, 232, 190, 124, 196, 201, 190, 184, 54, 23, 190, 208, 71, 142, 60, 3, 6, 58, 62, 167, 161, 244, 190, 248, 64, 173, 61, 169, 158, 58, 189, 55, 194, 222, 187, 97, 137, 0, 190, 24, 103, 94, 189, 81, 38, 176, 62, 222, 42, 245, 190, 221, 91, 232, 61, 62, 235, 171, 61, 138, 228, 22, 61, 7, 7, 247, 61, 7, 128, 215, 190, 171, 253, 34, 191, 232, 8, 140, 62, 241, 115, 9, 190, 8, 16, 101, 190, 139, 19, 39, 62, 126, 97, 29, 62, 181, 50, 143, 60, 15, 6, 11, 190, 145, 141, 242, 189, 132, 83, 242, 188, 225, 133, 200, 61, 111, 106, 79, 187, 72, 162, 109, 189, 252, 146, 92, 62, 251, 199, 227, 58, 192, 94, 10, 190, 11, 143, 9, 62, 242, 248, 90, 62, 99, 129, 148, 62, 175, 154, 37, 187, 167, 208, 37, 62, 13, 95, 79, 190, 37, 247, 70, 189, 59, 41, 159, 61, 224, 106, 21, 62, 63, 154, 12, 60, 218, 138, 133, 60, 0, 199, 62, 62, 118, 75, 111, 61, 27, 76, 9, 62, 161, 128, 168, 59, 197, 213, 13, 191, 58, 239, 237, 190, 230, 167, 147, 62, 120, 196, 239, 189, 197, 216, 15, 190, 74, 42, 42, 62, 35, 176, 140, 62, 102, 151, 121, 61, 64, 22, 94, 190, 92, 127, 165, 190, 198, 153, 203, 187, 120, 27, 50, 190, 76, 20, 86, 61, 200, 84, 190, 60, 185, 139, 103, 187, 51, 47, 217, 190, 148, 102, 180, 190, 173, 55, 128, 61, 252, 14, 169, 62, 151, 43, 149, 61, 76, 209, 117, 190, 11, 222, 66, 61, 168, 147, 42, 61, 163, 81, 162, 61, 246, 19, 21, 190, 58, 114, 208, 190, 50, 155, 69, 190, 60, 83, 36, 62, 79, 111, 136, 62, 222, 144, 3, 191, 46, 154, 157, 61, 82, 143, 28, 190, 99, 180, 131, 62, 205, 92, 66, 190, 228, 211, 142, 189, 142, 35, 1, 190, 150, 138, 245, 61, 75, 23, 174, 59, 242, 7, 170, 62, 102, 154, 165, 62, 14, 65, 223, 190, 220, 252, 12, 62, 104, 226, 41, 190, 136, 87, 148, 188, 215, 136, 101, 190, 117, 66, 39, 62, 126, 118, 118, 60, 227, 254, 152, 188, 46, 127, 82, 190, 109, 222, 190, 189, 216, 99, 180, 189, 132, 61, 95, 62, 90, 243, 185, 190, 220, 243, 136, 61, 106, 109, 35, 191, 122, 109, 249, 61, 119, 14, 22, 190, 239, 110, 118, 189, 80, 22, 188, 58, 188, 221, 188, 61, 243, 115, 139, 191, 177, 24, 168, 62, 175, 174, 129, 61, 190, 38, 85, 62, 155, 243, 23, 191, 15, 95, 95, 191, 15, 222, 70, 190, 216, 97, 109, 189, 238, 84, 16, 191, 197, 160, 165, 61, 25, 23, 179, 60, 170, 38, 129, 61, 170, 200, 162, 190, 198, 111, 28, 60, 136, 225, 82, 191, 25, 226, 112, 62, 204, 42, 12, 62, 40, 237, 51, 189, 120, 6, 10, 190, 55, 82, 14, 191, 248, 42, 16, 190, 80, 128, 106, 190, 25, 195, 11, 191, 188, 8, 150, 191, 50, 206, 35, 62, 100, 33, 108, 191, 195, 69, 76, 62, 218, 82, 0, 190, 86, 230, 86, 190, 27, 7, 63, 190, 242, 186, 164, 190, 241, 63, 50, 62, 139, 89, 20, 63, 177, 254, 203, 189, 95, 215, 162, 188, 120, 113, 171, 62, 74, 96, 77, 62, 187, 97, 191, 62, 134, 215, 7, 62, 245, 128, 131, 190, 109, 10, 97, 189, 255, 227, 52, 190, 37, 2, 203, 190, 151, 108, 80, 62, 173, 112, 130, 62, 98, 125, 167, 188, 132, 94, 41, 61, 253, 101, 175, 62, 211, 125, 192, 62, 201, 27, 86, 60, 251, 231, 37, 191, 148, 135, 4, 62, 32, 111, 31, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 47, 51, 190, 243, 127, 247, 61, 241, 93, 135, 189, 74, 197, 38, 60, 177, 194, 45, 61, 87, 158, 157, 189, 177, 160, 61, 190, 151, 151, 86, 189, 6, 23, 2, 190, 139, 30, 135, 62, 23, 96, 8, 62, 158, 124, 213, 189, 26, 174, 120, 190, 241, 118, 43, 189, 16, 125, 147, 61, 181, 135, 241, 188, 140, 47, 178, 61, 161, 239, 164, 60, 188, 234, 47, 189, 213, 229, 250, 189, 249, 115, 73, 190, 39, 66, 31, 62, 117, 110, 95, 62, 176, 133, 3, 189, 152, 203, 229, 189, 74, 191, 251, 61, 220, 134, 155, 62, 12, 172, 82, 61, 242, 237, 254, 60, 32, 235, 21, 189, 104, 231, 254, 189, 184, 62, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 36, 16, 190, 33, 93, 52, 63, 203, 213, 215, 61, 67, 219, 113, 60, 195, 209, 10, 191, 24, 171, 154, 62, 15, 196, 142, 62, 74, 71, 237, 189, 7, 45, 90, 191, 225, 64, 66, 62, 37, 13, 221, 62, 51, 20, 6, 59, 61, 239, 120, 63, 91, 125, 152, 61, 216, 206, 197, 190, 231, 128, 121, 190, 91, 88, 238, 60, 28, 99, 36, 63, 78, 152, 112, 62, 158, 217, 150, 60, 5, 146, 215, 190, 141, 232, 222, 61, 119, 2, 43, 190, 161, 167, 132, 62, 134, 123, 102, 191, 97, 246, 30, 191, 155, 25, 6, 191, 210, 105, 75, 190, 145, 169, 245, 190, 11, 18, 100, 62, 134, 52, 146, 191, 241, 202, 198, 62, 247, 94, 248, 61, 149, 132, 197, 62, 12, 42, 22, 61, 144, 96, 247, 61, 178, 158, 145, 190, 85, 197, 75, 62, 227, 130, 56, 62, 209, 42, 35, 189, 234, 13, 83, 62, 22, 24, 108, 190, 26, 56, 5, 62, 16, 73, 72, 59, 21, 72, 219, 62, 171, 173, 232, 61, 9, 227, 43, 62, 13, 125, 148, 189, 255, 151, 230, 189, 112, 64, 239, 61, 136, 56, 197, 189, 184, 211, 23, 190, 66, 8, 169, 61, 231, 142, 173, 190, 233, 123, 87, 190, 206, 6, 236, 62, 198, 60, 59, 62, 209, 112, 197, 61, 1, 171, 191, 60, 163, 9, 170, 188, 18, 114, 198, 61, 103, 213, 61, 190, 169, 183, 135, 189, 223, 78, 231, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 184, 27, 62, 231, 230, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 12, 1, 64, 119, 104, 17, 192, 109, 49, 134, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 58, 134, 64, 7, 207, 145, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}