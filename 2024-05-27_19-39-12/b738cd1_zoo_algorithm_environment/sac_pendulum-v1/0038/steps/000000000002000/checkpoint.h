// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 90, 134, 190, 120, 47, 30, 62, 28, 237, 247, 62, 198, 203, 143, 61, 8, 251, 93, 63, 142, 235, 41, 190, 8, 249, 87, 190, 165, 172, 117, 63, 28, 218, 151, 190, 226, 165, 91, 190, 14, 168, 97, 191, 140, 75, 76, 62, 85, 34, 200, 190, 87, 174, 95, 63, 234, 57, 180, 189, 203, 46, 131, 62, 164, 230, 108, 63, 203, 15, 143, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 64, 181, 173, 189, 242, 106, 207, 189, 87, 249, 112, 62, 87, 161, 241, 62, 96, 34, 205, 62, 195, 85, 212, 62, 166, 195, 16, 190, 159, 154, 38, 62, 156, 138, 132, 190, 55, 10, 241, 189, 16, 241, 61, 191, 187, 9, 159, 188, 171, 238, 12, 63, 240, 87, 209, 62, 116, 186, 137, 189, 20, 74, 44, 191, 82, 215, 68, 63, 96, 181, 10, 62, 158, 186, 44, 62, 208, 206, 39, 191, 53, 11, 15, 62, 57, 77, 19, 191, 4, 111, 131, 190, 89, 180, 206, 189, 138, 108, 44, 62, 82, 13, 16, 191, 18, 195, 186, 189, 34, 222, 100, 190, 136, 194, 22, 191, 239, 133, 34, 62, 136, 201, 57, 63, 143, 227, 150, 62, 60, 29, 8, 63, 202, 195, 48, 62, 104, 72, 6, 190, 176, 90, 217, 190, 168, 45, 61, 63, 83, 33, 103, 62, 233, 48, 16, 191, 101, 246, 250, 62, 124, 185, 145, 185, 167, 41, 208, 62, 234, 181, 19, 62, 119, 121, 79, 63, 170, 127, 111, 190, 152, 115, 171, 62, 231, 225, 31, 191, 223, 137, 168, 62, 231, 59, 7, 191, 173, 100, 65, 190, 228, 71, 10, 63, 188, 170, 14, 63, 154, 233, 149, 61, 220, 161, 210, 190, 70, 128, 189, 189, 232, 182, 170, 189, 143, 118, 241, 62, 57, 96, 97, 190, 95, 223, 4, 191, 98, 238, 11, 190, 89, 206, 11, 190, 137, 84, 233, 190, 215, 228, 87, 190, 118, 208, 229, 62, 236, 129, 49, 189, 255, 120, 186, 62, 103, 118, 248, 190, 51, 118, 166, 62, 20, 42, 235, 190, 63, 170, 231, 62, 191, 32, 234, 190, 221, 60, 199, 190, 229, 188, 154, 62, 213, 213, 231, 61, 1, 88, 141, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 113, 45, 191, 135, 157, 147, 62, 247, 251, 221, 61, 110, 181, 90, 189, 54, 137, 61, 190, 8, 209, 171, 189, 187, 166, 19, 191, 254, 183, 193, 190, 214, 110, 72, 190, 150, 115, 224, 61, 212, 128, 75, 62, 128, 78, 135, 62, 140, 224, 160, 62, 237, 19, 112, 190, 216, 74, 16, 63, 193, 23, 150, 189, 185, 175, 159, 189, 75, 180, 7, 63, 16, 161, 153, 62, 109, 99, 74, 62, 228, 168, 66, 190, 11, 150, 216, 62, 14, 166, 35, 63, 80, 221, 82, 62, 199, 134, 6, 191, 73, 221, 255, 62, 77, 57, 50, 63, 12, 1, 210, 62, 238, 54, 29, 62, 202, 156, 101, 190, 33, 43, 214, 61, 163, 79, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 78, 100, 188, 57, 47, 127, 61, 91, 69, 208, 188, 48, 222, 24, 62, 143, 88, 224, 60, 233, 35, 18, 190, 188, 27, 9, 190, 42, 159, 7, 61, 120, 184, 24, 62, 141, 210, 246, 61, 57, 248, 19, 62, 145, 121, 91, 189, 164, 202, 0, 190, 49, 109, 184, 61, 104, 58, 159, 187, 253, 121, 116, 189, 53, 44, 21, 62, 190, 252, 33, 61, 2, 86, 61, 190, 109, 229, 222, 61, 112, 95, 198, 189, 146, 103, 39, 190, 109, 63, 150, 60, 170, 250, 25, 62, 58, 54, 224, 61, 126, 107, 114, 188, 165, 111, 82, 189, 130, 125, 7, 62, 51, 227, 32, 59, 203, 157, 188, 189, 136, 25, 170, 189, 189, 241, 159, 61, 63, 233, 243, 189, 141, 100, 1, 190, 166, 159, 166, 190, 170, 6, 132, 62, 35, 253, 221, 190, 63, 194, 122, 61, 198, 162, 35, 62, 42, 223, 89, 190, 48, 70, 131, 190, 212, 71, 123, 189, 236, 35, 66, 62, 129, 57, 210, 61, 97, 123, 86, 189, 39, 6, 12, 190, 56, 67, 7, 62, 76, 72, 136, 188, 118, 18, 183, 62, 183, 22, 177, 188, 159, 244, 59, 60, 243, 133, 146, 61, 130, 25, 30, 190, 168, 20, 47, 190, 242, 69, 130, 61, 114, 227, 227, 61, 252, 164, 221, 61, 157, 106, 165, 61, 153, 113, 18, 62, 233, 233, 46, 61, 202, 143, 27, 190, 217, 190, 214, 188, 214, 82, 64, 60, 240, 180, 113, 62, 143, 22, 44, 190, 196, 253, 29, 190, 187, 208, 76, 61, 15, 129, 6, 190, 226, 222, 243, 189, 215, 56, 241, 61, 245, 0, 37, 189, 150, 153, 209, 186, 95, 243, 211, 189, 192, 184, 241, 189, 106, 226, 156, 189, 23, 185, 30, 62, 113, 58, 30, 190, 179, 242, 40, 190, 208, 76, 6, 190, 223, 139, 58, 187, 140, 80, 227, 189, 110, 226, 255, 189, 194, 137, 230, 188, 247, 226, 2, 62, 80, 15, 15, 62, 178, 170, 225, 189, 215, 153, 103, 60, 197, 42, 21, 62, 158, 251, 167, 61, 225, 131, 105, 60, 225, 216, 146, 188, 181, 211, 38, 190, 138, 57, 32, 60, 40, 155, 210, 61, 221, 220, 35, 190, 138, 185, 38, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 191, 192, 206, 188, 132, 96, 180, 62, 82, 77, 15, 60, 11, 106, 153, 61, 189, 235, 57, 62, 221, 5, 36, 189, 152, 156, 120, 189, 74, 184, 181, 189, 141, 106, 159, 189, 178, 207, 26, 190, 208, 138, 218, 59, 91, 108, 84, 61, 12, 234, 7, 62, 106, 3, 171, 62, 91, 190, 50, 190, 76, 21, 243, 60, 179, 224, 32, 189, 188, 108, 223, 61, 238, 74, 75, 190, 167, 101, 175, 60, 237, 187, 166, 60, 184, 39, 68, 62, 62, 206, 69, 60, 238, 255, 15, 61, 68, 58, 131, 61, 124, 4, 19, 188, 76, 105, 91, 189, 47, 51, 205, 189, 73, 203, 110, 62, 96, 177, 254, 189, 160, 203, 49, 190, 70, 49, 230, 189, 10, 196, 141, 190, 91, 136, 97, 61, 44, 232, 114, 189, 236, 227, 103, 62, 187, 138, 246, 190, 157, 241, 132, 62, 46, 234, 250, 189, 72, 79, 98, 190, 103, 154, 166, 190, 164, 176, 178, 61, 17, 202, 229, 60, 65, 138, 0, 62, 180, 101, 14, 60, 166, 167, 139, 188, 141, 217, 201, 59, 149, 233, 243, 61, 147, 141, 163, 62, 196, 12, 212, 189, 248, 15, 156, 61, 142, 5, 106, 62, 189, 228, 217, 187, 79, 162, 62, 189, 4, 154, 138, 61, 117, 135, 131, 188, 178, 116, 75, 62, 9, 23, 51, 61, 252, 241, 64, 62, 253, 9, 31, 62, 7, 232, 39, 59, 109, 213, 190, 189, 185, 248, 114, 59, 118, 210, 0, 61, 220, 83, 48, 62, 195, 104, 20, 190, 77, 241, 209, 61, 168, 30, 52, 190, 238, 247, 133, 61, 160, 110, 179, 188, 3, 50, 209, 188, 71, 44, 18, 61, 16, 252, 201, 189, 230, 161, 24, 62, 83, 70, 38, 190, 253, 14, 252, 60, 110, 123, 10, 62, 161, 53, 50, 190, 71, 17, 224, 189, 85, 113, 98, 189, 87, 43, 201, 189, 157, 158, 9, 190, 88, 114, 14, 62, 74, 75, 75, 62, 151, 11, 174, 61, 57, 127, 158, 60, 222, 147, 33, 62, 160, 71, 243, 189, 178, 172, 67, 62, 53, 163, 107, 61, 150, 177, 240, 60, 68, 180, 116, 59, 175, 93, 11, 62, 225, 10, 236, 189, 8, 222, 156, 60, 88, 220, 41, 188, 164, 65, 103, 189, 141, 81, 146, 60, 204, 171, 107, 61, 195, 112, 25, 190, 71, 230, 153, 189, 177, 154, 193, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 207, 119, 16, 62, 103, 202, 28, 190, 249, 98, 187, 61, 144, 63, 254, 61, 169, 202, 2, 62, 218, 134, 174, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 255, 21, 138, 61, 152, 104, 160, 189, 48, 225, 117, 61, 116, 85, 19, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 189, 54, 129, 189, 240, 191, 14, 190, 30, 130, 74, 189, 164, 44, 208, 189, 245, 249, 34, 60, 187, 192, 9, 190, 58, 71, 203, 189, 4, 184, 37, 62, 237, 211, 165, 187, 19, 92, 25, 191, 24, 65, 193, 61, 141, 84, 185, 190, 56, 201, 239, 188, 180, 159, 34, 190, 169, 195, 16, 62, 28, 189, 225, 61, 252, 103, 59, 61, 153, 149, 25, 191, 106, 101, 218, 62, 190, 94, 42, 62, 4, 168, 238, 61, 105, 235, 107, 60, 240, 216, 17, 191, 206, 36, 132, 188, 4, 29, 10, 190, 101, 189, 233, 189, 107, 72, 2, 188, 145, 242, 146, 61, 28, 74, 183, 190, 235, 9, 214, 60, 94, 54, 23, 190, 229, 121, 209, 189, 77, 151, 168, 61, 216, 129, 79, 62, 206, 148, 242, 61, 28, 204, 65, 62, 213, 19, 233, 189, 74, 219, 131, 189, 66, 131, 51, 190, 211, 208, 149, 189, 168, 16, 33, 190, 30, 5, 67, 61, 57, 99, 21, 190, 158, 82, 92, 62, 243, 37, 187, 189, 247, 217, 138, 189, 3, 75, 123, 190, 206, 204, 231, 189, 79, 9, 100, 61, 118, 75, 195, 185, 117, 47, 105, 59, 4, 168, 37, 190, 91, 154, 192, 61, 96, 152, 61, 62, 50, 78, 184, 61, 4, 250, 168, 61, 27, 196, 125, 60, 229, 31, 52, 62, 229, 97, 137, 61, 236, 24, 65, 189, 93, 42, 150, 61, 166, 55, 44, 62, 219, 7, 169, 61, 126, 221, 16, 62, 89, 164, 15, 62, 32, 40, 247, 188, 65, 196, 169, 61, 63, 85, 135, 61, 67, 27, 125, 62, 88, 149, 60, 190, 124, 142, 123, 58, 113, 175, 195, 189, 143, 143, 148, 190, 203, 83, 94, 189, 19, 212, 239, 187, 50, 211, 185, 190, 42, 246, 48, 61, 109, 79, 175, 189, 49, 239, 35, 62, 38, 114, 201, 59, 25, 208, 35, 190, 194, 218, 136, 61, 95, 232, 31, 190, 196, 91, 134, 189, 162, 183, 26, 61, 154, 226, 7, 188, 131, 21, 206, 188, 179, 248, 178, 189, 160, 160, 33, 62, 38, 123, 5, 62, 121, 120, 122, 61, 239, 217, 107, 61, 109, 80, 70, 62, 255, 155, 2, 190, 24, 199, 135, 60, 133, 132, 177, 189, 118, 58, 64, 190, 10, 230, 181, 188, 105, 190, 237, 61, 109, 116, 84, 190, 220, 148, 125, 62, 16, 233, 147, 60, 197, 178, 216, 189, 11, 22, 246, 60, 233, 158, 162, 59, 108, 182, 254, 188, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 51, 19, 144, 188, 208, 143, 38, 190, 243, 180, 148, 187, 70, 165, 190, 61, 92, 218, 11, 190, 54, 127, 58, 188, 124, 68, 75, 188, 207, 212, 45, 190, 51, 255, 196, 189, 41, 33, 0, 62, 14, 77, 214, 61, 152, 252, 6, 62, 108, 209, 46, 190, 110, 231, 6, 62, 79, 45, 202, 189, 64, 156, 54, 61, 200, 222, 132, 61, 9, 172, 254, 189, 112, 23, 4, 190, 68, 52, 71, 189, 82, 245, 18, 190, 128, 99, 210, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 190, 247, 184, 189, 169, 94, 48, 190, 200, 240, 87, 61, 78, 153, 155, 189, 200, 63, 19, 62, 54, 179, 153, 190, 200, 20, 133, 61, 88, 165, 104, 61, 144, 36, 192, 61, 66, 120, 4, 61, 31, 9, 171, 60, 48, 95, 128, 61, 183, 248, 179, 61, 158, 25, 19, 189, 100, 11, 75, 190, 194, 127, 75, 190, 36, 21, 43, 190, 13, 147, 255, 61, 151, 160, 130, 189, 28, 76, 156, 189, 90, 32, 8, 62, 14, 45, 74, 60, 224, 104, 25, 59, 221, 215, 18, 190, 251, 84, 207, 60, 115, 254, 115, 61, 5, 244, 87, 190, 19, 51, 30, 190, 218, 27, 151, 60, 246, 30, 52, 61, 223, 135, 48, 190, 111, 74, 38, 190, 3, 60, 146, 61, 49, 23, 164, 189, 117, 127, 52, 190, 66, 141, 65, 189, 222, 221, 166, 188, 82, 150, 156, 189, 180, 15, 19, 190, 71, 125, 225, 187, 33, 43, 47, 189, 100, 11, 200, 60, 241, 31, 139, 190, 214, 59, 0, 62, 80, 228, 44, 188, 102, 153, 123, 60, 18, 84, 80, 190, 189, 36, 136, 61, 228, 48, 58, 190, 51, 87, 30, 62, 194, 59, 37, 190, 48, 39, 72, 190, 11, 8, 181, 189, 148, 215, 106, 190, 183, 187, 76, 189, 9, 105, 17, 62, 32, 207, 238, 60, 194, 211, 172, 189, 117, 118, 159, 189, 193, 164, 2, 190, 28, 196, 30, 190, 200, 69, 15, 62, 143, 252, 247, 60, 66, 32, 66, 61, 171, 18, 67, 61, 244, 86, 21, 62, 158, 63, 120, 62, 19, 139, 51, 190, 34, 15, 0, 62, 165, 97, 94, 190, 247, 238, 251, 61, 221, 145, 6, 189, 51, 31, 31, 62, 117, 220, 51, 62, 60, 171, 110, 61, 233, 226, 164, 62, 188, 47, 92, 62, 174, 209, 152, 188, 110, 202, 186, 189, 195, 100, 111, 190, 12, 59, 3, 189, 220, 220, 92, 62, 177, 140, 93, 61, 153, 11, 68, 190, 110, 20, 211, 61, 82, 46, 189, 61, 28, 29, 228, 189, 77, 157, 135, 61, 148, 238, 2, 190, 39, 114, 225, 61, 32, 96, 62, 190, 69, 101, 180, 189, 184, 67, 155, 188, 3, 173, 9, 62, 196, 214, 132, 190, 199, 117, 148, 190, 204, 63, 181, 188, 95, 128, 55, 62, 49, 110, 93, 62, 156, 61, 129, 190, 115, 156, 170, 60, 113, 147, 248, 61, 241, 137, 34, 190, 86, 88, 21, 62, 84, 249, 241, 61, 193, 25, 57, 62, 158, 81, 96, 189, 39, 66, 154, 61, 220, 225, 176, 59, 186, 218, 144, 62, 2, 83, 172, 61, 142, 32, 44, 62, 38, 143, 124, 60, 188, 142, 104, 62, 47, 40, 213, 186, 159, 39, 172, 187, 219, 12, 41, 62, 249, 78, 201, 62, 108, 10, 6, 190, 91, 158, 155, 189, 188, 211, 157, 190, 113, 255, 5, 62, 52, 143, 134, 189, 66, 71, 249, 189, 55, 127, 162, 61, 239, 232, 158, 61, 98, 159, 190, 189, 86, 94, 209, 189, 113, 220, 46, 62, 36, 106, 52, 62, 31, 13, 151, 189, 147, 176, 132, 188, 178, 41, 229, 189, 198, 49, 175, 61, 79, 75, 188, 189, 188, 186, 201, 61, 221, 48, 42, 190, 154, 126, 230, 189, 126, 14, 0, 61, 195, 191, 38, 62, 60, 84, 20, 61, 34, 185, 69, 62, 17, 31, 12, 62, 208, 245, 37, 62, 105, 226, 106, 62, 18, 237, 127, 61, 107, 162, 26, 190, 179, 144, 62, 62, 51, 154, 90, 189, 177, 29, 8, 62, 69, 255, 92, 189, 112, 151, 146, 189, 130, 146, 132, 190, 27, 6, 0, 60, 3, 86, 59, 62, 218, 65, 227, 61, 200, 53, 227, 188, 189, 235, 166, 61, 94, 102, 218, 59, 113, 35, 135, 190, 159, 220, 107, 190, 47, 160, 223, 190, 45, 65, 201, 190, 25, 0, 17, 62, 251, 69, 211, 190, 186, 160, 88, 61, 18, 136, 185, 189, 54, 120, 159, 190, 50, 140, 92, 60, 156, 120, 239, 189, 31, 137, 37, 62, 3, 240, 208, 61, 183, 135, 59, 60, 229, 83, 10, 190, 24, 206, 76, 62, 211, 186, 154, 189, 136, 249, 156, 62, 77, 139, 35, 61, 223, 230, 13, 189, 93, 199, 147, 189, 254, 174, 127, 190, 225, 141, 53, 190, 76, 199, 8, 62, 145, 227, 210, 61, 105, 92, 79, 61, 136, 109, 198, 60, 26, 9, 76, 62, 137, 217, 244, 59, 168, 151, 233, 189, 162, 98, 22, 188, 239, 221, 75, 187, 199, 41, 23, 190, 10, 252, 243, 61, 191, 81, 199, 190, 45, 194, 4, 191, 180, 28, 51, 62, 242, 166, 61, 189, 60, 121, 207, 189, 181, 72, 150, 61, 40, 232, 85, 61, 170, 247, 246, 60, 142, 114, 37, 189, 166, 49, 186, 62, 129, 210, 37, 62, 204, 74, 198, 61, 176, 143, 54, 189, 59, 123, 45, 61, 67, 172, 9, 188, 140, 140, 128, 60, 84, 43, 78, 188, 144, 250, 14, 62, 150, 31, 150, 60, 18, 139, 122, 190, 26, 248, 139, 190, 84, 158, 65, 62, 127, 236, 126, 61, 230, 185, 124, 190, 156, 84, 13, 62, 255, 189, 67, 62, 158, 28, 66, 61, 177, 57, 49, 189, 150, 25, 7, 190, 116, 170, 180, 61, 0, 238, 202, 188, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 34, 61, 187, 189, 130, 154, 94, 190, 112, 202, 2, 190, 204, 171, 151, 62, 179, 9, 78, 190, 201, 14, 235, 61, 191, 60, 255, 189, 94, 99, 96, 190, 137, 68, 219, 188, 141, 180, 250, 189, 213, 151, 133, 188, 156, 164, 67, 190, 83, 93, 126, 190, 96, 253, 209, 61, 0, 166, 244, 61, 145, 9, 144, 62, 124, 199, 156, 62, 240, 96, 179, 189, 129, 76, 18, 61, 166, 140, 146, 189, 32, 15, 71, 58, 231, 156, 32, 190, 152, 174, 62, 62, 122, 153, 104, 189, 166, 7, 19, 190, 0, 108, 22, 189, 230, 240, 106, 188, 143, 90, 57, 62, 126, 215, 11, 190, 177, 115, 232, 189, 150, 71, 255, 61, 98, 224, 96, 58, 133, 12, 156, 190, 141, 118, 235, 60, 223, 0, 170, 189, 93, 43, 61, 61, 109, 236, 19, 190, 27, 20, 33, 60, 178, 247, 31, 62, 128, 115, 82, 189, 104, 32, 84, 190, 229, 97, 19, 190, 220, 81, 21, 62, 126, 73, 213, 62, 136, 43, 27, 190, 189, 142, 111, 62, 203, 222, 3, 61, 4, 124, 18, 62, 82, 63, 170, 62, 44, 11, 226, 61, 143, 33, 3, 62, 142, 100, 122, 62, 167, 149, 128, 188, 249, 124, 159, 61, 190, 182, 25, 62, 0, 42, 9, 189, 182, 210, 232, 189, 125, 186, 231, 189, 233, 49, 193, 61, 139, 206, 159, 61, 20, 112, 243, 188, 9, 43, 16, 190, 13, 225, 70, 61, 225, 174, 169, 61, 45, 22, 19, 62, 223, 245, 131, 62, 89, 133, 149, 62, 205, 255, 149, 189, 62, 193, 36, 62, 183, 97, 226, 61, 117, 123, 44, 189, 211, 64, 164, 61, 107, 96, 220, 61, 22, 61, 180, 188, 158, 218, 123, 190, 117, 222, 66, 62, 198, 20, 130, 62, 101, 86, 219, 60, 199, 75, 29, 61, 179, 229, 61, 60, 90, 29, 138, 189, 177, 183, 179, 189, 41, 127, 180, 61, 118, 144, 197, 189, 5, 197, 50, 60, 46, 95, 60, 61, 191, 24, 246, 61, 56, 186, 210, 61, 216, 38, 64, 190, 24, 212, 8, 62, 173, 81, 137, 189, 238, 232, 125, 61, 45, 109, 31, 62, 155, 36, 92, 189, 168, 184, 155, 61, 198, 156, 119, 190, 128, 231, 8, 190, 38, 94, 188, 60, 95, 245, 8, 62, 255, 159, 35, 188, 77, 137, 235, 189, 17, 106, 96, 61, 114, 60, 25, 62, 102, 149, 207, 189, 205, 77, 255, 189, 224, 46, 216, 189, 240, 233, 10, 62, 26, 243, 49, 60, 67, 250, 172, 190, 198, 115, 247, 189, 168, 139, 46, 190, 204, 109, 38, 62, 168, 21, 208, 189, 148, 205, 116, 190, 64, 100, 33, 189, 121, 208, 92, 189, 204, 37, 42, 61, 200, 110, 19, 189, 81, 167, 68, 190, 140, 73, 21, 62, 105, 178, 112, 62, 150, 47, 2, 190, 151, 203, 160, 187, 22, 160, 37, 189, 60, 200, 112, 189, 80, 7, 15, 61, 213, 227, 68, 62, 45, 231, 86, 62, 139, 221, 12, 62, 165, 197, 87, 60, 142, 194, 63, 190, 250, 182, 51, 189, 2, 245, 61, 62, 58, 84, 129, 189, 140, 228, 52, 190, 167, 80, 17, 62, 13, 45, 101, 189, 171, 172, 8, 190, 195, 146, 23, 190, 92, 118, 13, 190, 221, 20, 47, 190, 112, 134, 232, 187, 106, 176, 138, 190, 62, 39, 154, 190, 126, 85, 90, 189, 222, 196, 25, 62, 25, 95, 182, 61, 229, 20, 170, 61, 228, 106, 1, 190, 60, 151, 190, 189, 113, 147, 214, 188, 95, 195, 158, 61, 194, 194, 5, 189, 239, 20, 42, 190, 158, 100, 40, 61, 70, 39, 168, 189, 107, 152, 45, 62, 209, 146, 99, 189, 133, 141, 95, 190, 98, 21, 60, 188, 164, 79, 27, 62, 110, 109, 160, 62, 246, 235, 46, 188, 79, 70, 87, 190, 163, 246, 120, 61, 77, 102, 190, 188, 68, 59, 13, 190, 105, 223, 219, 189, 20, 138, 129, 62, 67, 219, 24, 189, 38, 124, 180, 189, 195, 133, 65, 61, 139, 8, 102, 61, 115, 134, 181, 61, 212, 205, 144, 61, 234, 198, 212, 189, 186, 15, 171, 189, 169, 184, 254, 60, 68, 226, 146, 61, 139, 235, 115, 190, 19, 145, 195, 189, 58, 95, 169, 61, 34, 131, 134, 59, 6, 134, 132, 61, 251, 69, 198, 189, 241, 119, 28, 190, 60, 88, 145, 189, 200, 98, 64, 61, 101, 234, 70, 62, 19, 72, 220, 60, 81, 46, 50, 61, 201, 55, 49, 190, 151, 7, 26, 62, 181, 77, 28, 62, 222, 98, 101, 62, 233, 225, 107, 190, 117, 184, 131, 62, 200, 36, 241, 189, 249, 76, 47, 62, 128, 158, 115, 61, 54, 105, 128, 62, 36, 24, 54, 62, 56, 157, 110, 190, 196, 196, 41, 62, 153, 112, 37, 62, 38, 79, 47, 62, 220, 199, 153, 189, 11, 62, 14, 62, 124, 217, 221, 189, 113, 220, 4, 62, 50, 254, 108, 61, 122, 68, 253, 189, 240, 210, 254, 61, 2, 221, 84, 62, 14, 121, 133, 189, 251, 182, 75, 61, 68, 139, 193, 190, 46, 89, 159, 189, 83, 138, 200, 61, 34, 37, 120, 190, 187, 209, 172, 61, 97, 159, 150, 189, 99, 204, 64, 190, 84, 183, 133, 190, 97, 255, 25, 188, 61, 68, 33, 62, 89, 34, 46, 62, 65, 177, 67, 190, 61, 249, 53, 62, 57, 236, 43, 61, 55, 194, 222, 187, 74, 197, 10, 189, 34, 169, 214, 189, 96, 219, 19, 62, 56, 162, 121, 190, 62, 38, 15, 62, 133, 102, 11, 62, 173, 195, 135, 62, 254, 213, 11, 60, 97, 125, 27, 190, 115, 108, 138, 190, 122, 227, 117, 62, 100, 209, 69, 190, 207, 92, 19, 190, 241, 99, 78, 62, 172, 203, 124, 62, 67, 96, 234, 61, 159, 141, 230, 61, 11, 157, 167, 187, 152, 102, 232, 60, 40, 92, 73, 61, 59, 50, 129, 189, 126, 97, 87, 189, 162, 151, 140, 61, 100, 77, 203, 61, 83, 224, 225, 189, 25, 75, 48, 61, 232, 12, 72, 62, 194, 235, 133, 62, 170, 234, 98, 61, 88, 157, 45, 62, 138, 45, 147, 190, 37, 247, 70, 189, 98, 125, 173, 59, 232, 164, 67, 189, 110, 230, 54, 188, 126, 132, 132, 189, 253, 226, 115, 61, 209, 55, 58, 62, 54, 52, 182, 61, 39, 225, 24, 61, 16, 108, 0, 190, 238, 162, 138, 190, 152, 61, 75, 62, 166, 72, 100, 189, 95, 221, 50, 189, 245, 218, 124, 61, 19, 204, 106, 62, 147, 216, 208, 61, 57, 8, 121, 189, 108, 227, 101, 190, 3, 113, 231, 61, 187, 168, 70, 190, 35, 135, 237, 61, 135, 197, 118, 189, 79, 55, 33, 62, 23, 226, 96, 190, 147, 135, 68, 190, 46, 85, 24, 62, 168, 188, 14, 62, 149, 98, 204, 61, 29, 84, 36, 190, 207, 120, 222, 188, 127, 226, 223, 61, 163, 81, 162, 61, 124, 24, 9, 190, 84, 150, 176, 189, 223, 39, 129, 61, 158, 64, 169, 60, 123, 213, 24, 62, 184, 0, 123, 190, 223, 86, 6, 189, 5, 77, 48, 60, 102, 13, 59, 62, 237, 65, 82, 189, 230, 240, 129, 190, 15, 235, 209, 188, 240, 2, 211, 61, 156, 231, 101, 58, 124, 188, 64, 62, 127, 253, 50, 62, 91, 194, 20, 190, 168, 175, 206, 61, 222, 29, 49, 190, 250, 168, 64, 61, 188, 152, 194, 189, 100, 139, 12, 190, 22, 122, 37, 62, 79, 194, 5, 189, 141, 33, 12, 190, 251, 156, 176, 188, 175, 241, 8, 61, 215, 244, 19, 62, 103, 160, 49, 191, 154, 169, 221, 61, 197, 169, 193, 190, 122, 109, 249, 61, 191, 5, 200, 189, 70, 219, 99, 188, 4, 117, 184, 61, 43, 99, 24, 190, 177, 89, 227, 190, 38, 109, 163, 62, 102, 193, 11, 59, 202, 38, 10, 62, 226, 45, 117, 188, 142, 238, 116, 190, 23, 139, 142, 189, 240, 109, 91, 61, 90, 128, 65, 190, 252, 125, 205, 61, 25, 246, 194, 61, 116, 190, 85, 190, 62, 102, 16, 189, 235, 25, 225, 61, 179, 12, 92, 188, 227, 35, 49, 62, 176, 6, 147, 61, 173, 193, 212, 61, 229, 159, 98, 61, 138, 238, 156, 189, 141, 3, 86, 188, 247, 5, 235, 189, 63, 20, 24, 191, 186, 117, 13, 191, 175, 211, 67, 62, 176, 151, 217, 190, 76, 13, 200, 185, 218, 82, 0, 190, 24, 102, 231, 189, 218, 144, 127, 189, 249, 174, 76, 60, 208, 30, 83, 62, 214, 19, 228, 62, 29, 28, 224, 189, 70, 29, 97, 189, 164, 228, 122, 62, 1, 26, 242, 60, 120, 145, 203, 62, 235, 226, 248, 61, 29, 112, 18, 189, 175, 94, 8, 190, 224, 56, 14, 190, 202, 186, 192, 190, 14, 130, 61, 62, 69, 161, 99, 62, 50, 106, 157, 60, 107, 222, 74, 60, 193, 64, 146, 62, 38, 251, 140, 62, 190, 24, 26, 59, 172, 244, 179, 190, 178, 15, 11, 189, 27, 220, 239, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 229, 102, 190, 187, 205, 206, 60, 95, 178, 205, 188, 74, 197, 38, 60, 6, 67, 32, 62, 182, 160, 136, 189, 55, 218, 73, 190, 165, 45, 71, 189, 14, 250, 250, 189, 251, 4, 107, 62, 120, 206, 185, 61, 22, 41, 209, 189, 1, 182, 1, 190, 111, 189, 19, 61, 110, 194, 212, 60, 72, 221, 131, 61, 253, 12, 166, 61, 58, 148, 81, 187, 34, 63, 136, 189, 213, 229, 250, 189, 207, 143, 34, 190, 22, 59, 181, 61, 219, 243, 33, 62, 31, 5, 7, 187, 167, 206, 112, 61, 42, 162, 163, 61, 140, 116, 54, 62, 203, 220, 187, 61, 94, 50, 20, 60, 19, 38, 201, 189, 206, 193, 17, 190, 166, 127, 212, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 139, 179, 189, 143, 222, 155, 62, 205, 162, 15, 62, 67, 219, 113, 60, 188, 25, 141, 190, 7, 117, 33, 62, 136, 175, 202, 61, 201, 103, 237, 189, 99, 209, 8, 191, 94, 180, 58, 62, 77, 210, 88, 62, 124, 71, 97, 60, 173, 66, 223, 61, 173, 210, 152, 61, 148, 34, 44, 190, 8, 84, 14, 190, 156, 71, 27, 60, 125, 133, 172, 62, 103, 46, 121, 62, 158, 217, 150, 60, 220, 202, 107, 190, 246, 91, 10, 62, 151, 62, 60, 190, 107, 207, 24, 60, 75, 98, 236, 60, 131, 152, 47, 190, 252, 222, 133, 190, 250, 86, 21, 190, 139, 96, 145, 190, 237, 7, 34, 62, 100, 63, 190, 190, 140, 12, 141, 62, 209, 173, 53, 62, 115, 156, 99, 62, 109, 143, 129, 61, 144, 96, 247, 61, 207, 104, 134, 190, 20, 108, 204, 188, 37, 203, 77, 62, 14, 47, 35, 189, 78, 182, 214, 60, 144, 39, 76, 190, 137, 192, 42, 61, 165, 13, 222, 59, 67, 30, 69, 62, 207, 183, 189, 61, 187, 102, 43, 62, 137, 198, 240, 189, 197, 53, 183, 189, 82, 52, 111, 189, 203, 139, 234, 189, 184, 211, 23, 190, 98, 13, 176, 61, 203, 248, 129, 190, 147, 58, 59, 190, 72, 98, 64, 62, 189, 241, 169, 61, 245, 33, 9, 61, 180, 149, 148, 187, 94, 68, 173, 189, 94, 165, 229, 61, 101, 103, 10, 190, 103, 222, 90, 61, 70, 242, 3, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 24, 51, 62, 254, 84, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 162, 117, 191, 151, 253, 227, 190, 168, 207, 133, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 200, 219, 63, 116, 154, 12, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}