// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 93, 63, 190, 77, 19, 152, 62, 56, 177, 233, 62, 251, 51, 138, 62, 254, 148, 64, 63, 235, 8, 104, 190, 19, 146, 84, 189, 15, 220, 35, 63, 81, 248, 250, 190, 52, 206, 43, 60, 104, 199, 220, 189, 29, 92, 0, 63, 161, 146, 21, 190, 34, 109, 110, 63, 142, 62, 97, 190, 165, 235, 146, 188, 55, 149, 125, 63, 183, 85, 196, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 244, 74, 127, 189, 20, 83, 181, 61, 227, 176, 122, 62, 64, 163, 54, 63, 168, 173, 100, 63, 248, 192, 194, 62, 94, 239, 98, 190, 151, 194, 98, 191, 106, 99, 161, 190, 74, 22, 133, 190, 10, 178, 204, 190, 134, 254, 10, 62, 115, 107, 173, 62, 47, 250, 58, 63, 213, 69, 37, 189, 38, 134, 69, 191, 166, 116, 58, 63, 167, 109, 131, 61, 123, 172, 152, 190, 88, 59, 63, 191, 171, 200, 155, 61, 88, 246, 80, 191, 136, 230, 132, 190, 212, 57, 201, 188, 151, 103, 202, 62, 53, 136, 124, 191, 113, 227, 30, 190, 77, 172, 166, 190, 46, 132, 240, 62, 222, 226, 179, 62, 52, 100, 143, 63, 227, 255, 227, 62, 138, 201, 2, 63, 175, 248, 176, 60, 92, 17, 128, 191, 6, 31, 189, 190, 43, 131, 54, 63, 147, 56, 96, 190, 130, 134, 31, 191, 186, 76, 24, 63, 12, 173, 4, 63, 172, 133, 207, 62, 105, 174, 189, 62, 252, 111, 37, 63, 121, 220, 142, 190, 157, 151, 228, 62, 95, 244, 186, 190, 105, 186, 248, 62, 52, 173, 212, 190, 103, 237, 51, 63, 31, 118, 26, 63, 233, 104, 24, 63, 109, 136, 175, 189, 32, 235, 209, 190, 77, 60, 113, 61, 218, 115, 143, 63, 198, 27, 0, 63, 197, 54, 216, 190, 163, 46, 202, 190, 92, 116, 164, 189, 211, 148, 5, 191, 179, 1, 232, 190, 245, 152, 158, 189, 225, 228, 53, 63, 183, 225, 83, 61, 140, 217, 182, 62, 39, 250, 215, 190, 13, 137, 7, 191, 220, 142, 23, 191, 104, 107, 5, 63, 193, 70, 143, 191, 36, 96, 170, 190, 213, 128, 175, 62, 5, 173, 77, 190, 58, 231, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 51, 88, 191, 131, 101, 82, 62, 187, 114, 84, 190, 80, 148, 134, 190, 36, 70, 142, 190, 191, 221, 1, 62, 187, 166, 19, 191, 14, 72, 235, 190, 228, 73, 138, 190, 136, 168, 87, 189, 90, 2, 69, 62, 251, 175, 23, 63, 195, 88, 172, 62, 40, 234, 27, 190, 67, 235, 40, 63, 30, 199, 214, 60, 252, 244, 9, 190, 4, 145, 170, 62, 40, 253, 65, 62, 8, 217, 105, 62, 45, 9, 69, 190, 88, 7, 199, 62, 65, 11, 11, 63, 121, 118, 130, 189, 3, 15, 15, 191, 65, 174, 144, 62, 181, 83, 59, 63, 198, 245, 5, 63, 152, 181, 58, 61, 235, 175, 191, 190, 86, 211, 140, 61, 128, 8, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 3, 91, 186, 248, 58, 3, 62, 207, 56, 77, 190, 126, 183, 37, 62, 92, 92, 169, 62, 161, 49, 252, 61, 188, 27, 9, 190, 122, 218, 206, 60, 153, 183, 130, 62, 0, 255, 58, 62, 47, 58, 43, 62, 210, 88, 127, 61, 109, 150, 28, 189, 200, 72, 166, 61, 227, 137, 162, 59, 238, 34, 217, 60, 187, 101, 63, 62, 151, 67, 9, 61, 167, 13, 157, 189, 10, 212, 145, 61, 197, 245, 182, 189, 25, 48, 58, 190, 187, 99, 28, 61, 235, 46, 58, 62, 16, 1, 37, 62, 148, 146, 255, 60, 209, 106, 94, 189, 204, 170, 7, 62, 17, 158, 169, 188, 4, 195, 128, 190, 204, 231, 13, 189, 74, 59, 224, 61, 96, 165, 55, 190, 187, 91, 24, 190, 22, 65, 177, 190, 232, 63, 136, 62, 23, 203, 12, 191, 248, 183, 227, 61, 198, 162, 35, 62, 45, 51, 139, 190, 202, 5, 19, 191, 180, 47, 128, 190, 172, 86, 33, 62, 161, 28, 131, 62, 87, 176, 6, 62, 85, 125, 89, 190, 63, 86, 7, 62, 90, 145, 131, 62, 66, 58, 200, 62, 200, 88, 253, 189, 212, 203, 224, 189, 204, 230, 29, 62, 168, 178, 153, 190, 28, 69, 113, 190, 114, 36, 135, 61, 242, 12, 87, 62, 240, 92, 154, 62, 57, 144, 30, 62, 18, 116, 9, 62, 119, 219, 123, 60, 130, 136, 111, 190, 141, 223, 110, 190, 15, 161, 74, 62, 208, 68, 141, 62, 143, 22, 44, 190, 255, 60, 50, 190, 1, 153, 63, 61, 138, 240, 7, 190, 58, 192, 9, 190, 91, 149, 214, 61, 245, 0, 37, 189, 150, 153, 209, 186, 227, 224, 17, 190, 59, 72, 1, 190, 157, 203, 224, 189, 101, 186, 221, 61, 73, 14, 67, 190, 45, 15, 47, 190, 129, 104, 29, 190, 163, 232, 160, 187, 49, 177, 238, 189, 239, 79, 46, 190, 222, 110, 14, 189, 72, 53, 5, 62, 242, 186, 211, 61, 17, 213, 1, 190, 135, 102, 1, 189, 14, 162, 1, 62, 175, 194, 149, 61, 200, 58, 155, 188, 223, 96, 46, 189, 182, 93, 60, 190, 143, 157, 17, 189, 177, 110, 202, 61, 145, 108, 47, 190, 202, 17, 53, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 37, 187, 227, 60, 47, 210, 159, 62, 201, 212, 69, 189, 198, 33, 87, 61, 67, 53, 52, 62, 44, 223, 169, 189, 152, 156, 120, 189, 168, 30, 127, 189, 164, 167, 186, 60, 117, 87, 52, 190, 142, 22, 28, 190, 136, 173, 254, 61, 68, 227, 238, 189, 10, 9, 157, 62, 132, 19, 236, 190, 193, 188, 187, 190, 75, 92, 220, 189, 25, 181, 82, 62, 191, 184, 67, 190, 187, 226, 146, 61, 187, 231, 154, 61, 134, 156, 55, 62, 212, 227, 93, 61, 13, 249, 28, 188, 47, 97, 20, 62, 181, 191, 214, 188, 215, 110, 138, 190, 95, 61, 215, 190, 137, 50, 164, 62, 63, 145, 235, 189, 82, 130, 253, 189, 250, 192, 37, 187, 36, 59, 172, 190, 244, 71, 13, 61, 100, 141, 39, 190, 207, 55, 68, 62, 173, 218, 18, 191, 154, 144, 88, 62, 46, 234, 250, 189, 9, 20, 139, 190, 232, 40, 236, 190, 13, 10, 214, 189, 101, 104, 176, 189, 229, 144, 140, 61, 65, 200, 228, 61, 112, 36, 5, 190, 228, 128, 126, 189, 172, 91, 124, 62, 134, 195, 159, 62, 69, 70, 201, 189, 117, 106, 167, 189, 22, 203, 93, 62, 95, 26, 184, 188, 33, 19, 172, 189, 220, 81, 207, 61, 244, 238, 131, 61, 25, 28, 86, 62, 238, 229, 16, 62, 79, 201, 230, 61, 61, 114, 125, 61, 65, 170, 181, 60, 200, 46, 120, 190, 253, 156, 108, 61, 19, 210, 116, 188, 179, 106, 44, 62, 162, 243, 93, 189, 237, 193, 30, 62, 162, 196, 70, 190, 168, 140, 50, 62, 226, 70, 23, 61, 3, 50, 209, 188, 32, 186, 8, 61, 198, 119, 59, 190, 184, 131, 226, 61, 113, 127, 105, 190, 61, 51, 15, 62, 98, 29, 47, 62, 182, 124, 138, 190, 88, 128, 89, 190, 210, 110, 216, 59, 111, 57, 129, 190, 239, 6, 64, 190, 222, 151, 226, 61, 97, 170, 105, 62, 117, 205, 183, 188, 161, 210, 202, 61, 218, 20, 188, 61, 11, 232, 71, 190, 201, 13, 76, 62, 43, 234, 218, 189, 111, 65, 37, 189, 97, 185, 172, 189, 158, 173, 14, 61, 251, 148, 32, 190, 50, 164, 92, 187, 29, 181, 215, 188, 164, 65, 103, 189, 142, 199, 86, 60, 163, 55, 87, 61, 195, 112, 25, 190, 193, 191, 159, 189, 167, 112, 181, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 64, 213, 14, 62, 103, 202, 28, 190, 193, 51, 179, 61, 235, 186, 245, 61, 169, 202, 2, 62, 227, 92, 179, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 120, 245, 133, 61, 86, 252, 168, 189, 48, 225, 117, 61, 19, 178, 24, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 110, 184, 132, 189, 214, 155, 15, 190, 30, 130, 74, 189, 135, 127, 213, 189, 245, 249, 34, 60, 187, 192, 9, 190, 4, 63, 2, 190, 234, 114, 237, 61, 178, 222, 49, 61, 179, 242, 244, 190, 176, 250, 125, 61, 39, 100, 237, 190, 56, 201, 239, 188, 191, 60, 55, 190, 42, 20, 23, 62, 245, 235, 41, 62, 254, 128, 69, 62, 71, 33, 84, 191, 160, 187, 221, 62, 195, 213, 231, 61, 95, 85, 65, 62, 191, 79, 78, 190, 174, 80, 158, 191, 233, 3, 49, 189, 83, 55, 145, 189, 105, 81, 16, 190, 216, 236, 42, 60, 190, 70, 163, 61, 216, 145, 179, 190, 74, 162, 155, 190, 164, 101, 45, 190, 23, 18, 67, 191, 22, 125, 40, 62, 102, 121, 143, 62, 6, 202, 174, 61, 146, 19, 128, 62, 160, 223, 110, 190, 149, 208, 43, 189, 77, 95, 87, 190, 55, 198, 64, 189, 46, 116, 117, 190, 217, 148, 19, 61, 240, 93, 165, 190, 248, 184, 132, 61, 243, 37, 187, 189, 68, 76, 190, 189, 160, 180, 190, 190, 67, 248, 145, 190, 241, 35, 168, 59, 142, 237, 252, 60, 124, 201, 1, 189, 37, 22, 72, 190, 75, 176, 85, 61, 175, 114, 132, 62, 33, 241, 143, 61, 8, 204, 7, 62, 135, 197, 236, 189, 188, 87, 108, 62, 1, 94, 7, 61, 189, 89, 13, 60, 73, 239, 198, 61, 178, 33, 53, 62, 254, 129, 42, 61, 233, 123, 32, 62, 166, 85, 244, 61, 58, 127, 166, 189, 59, 241, 247, 61, 94, 47, 14, 189, 47, 147, 150, 62, 234, 72, 136, 190, 159, 136, 134, 189, 172, 237, 113, 190, 239, 65, 184, 190, 229, 99, 22, 189, 75, 125, 193, 190, 77, 184, 237, 190, 42, 246, 48, 61, 88, 231, 194, 189, 85, 210, 166, 189, 253, 250, 132, 188, 124, 251, 133, 61, 254, 183, 227, 60, 227, 126, 255, 190, 82, 40, 58, 62, 90, 28, 153, 61, 53, 53, 62, 62, 242, 4, 204, 189, 206, 92, 209, 189, 155, 88, 83, 62, 189, 179, 16, 62, 153, 64, 75, 59, 86, 84, 45, 189, 88, 228, 137, 62, 193, 86, 53, 190, 76, 131, 40, 61, 215, 41, 28, 190, 222, 93, 95, 189, 43, 184, 35, 62, 182, 149, 40, 62, 94, 65, 105, 190, 179, 199, 188, 62, 65, 35, 204, 189, 60, 213, 218, 189, 11, 22, 246, 60, 233, 158, 162, 59, 250, 119, 14, 189, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 9, 233, 149, 188, 84, 225, 40, 190, 243, 180, 148, 187, 78, 12, 187, 61, 178, 44, 12, 190, 206, 50, 58, 188, 77, 174, 88, 188, 8, 250, 45, 190, 94, 97, 198, 189, 183, 152, 253, 61, 200, 67, 202, 61, 152, 252, 6, 62, 108, 209, 46, 190, 195, 207, 3, 62, 79, 45, 202, 189, 173, 254, 28, 61, 6, 242, 125, 61, 9, 172, 254, 189, 116, 100, 7, 190, 75, 177, 74, 189, 54, 80, 19, 190, 74, 125, 218, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 53, 11, 1, 190, 167, 154, 232, 61, 106, 107, 16, 62, 228, 27, 150, 189, 91, 75, 87, 62, 54, 29, 42, 62, 200, 20, 133, 61, 234, 143, 144, 61, 126, 124, 64, 62, 209, 207, 82, 189, 30, 215, 162, 189, 67, 233, 253, 61, 163, 52, 1, 190, 170, 189, 190, 60, 40, 188, 83, 191, 192, 16, 239, 189, 30, 152, 104, 190, 226, 179, 87, 62, 78, 78, 108, 190, 75, 253, 240, 189, 215, 21, 100, 62, 172, 23, 147, 62, 65, 221, 253, 60, 222, 194, 91, 190, 176, 166, 28, 190, 125, 184, 22, 61, 174, 175, 27, 191, 87, 215, 0, 191, 81, 6, 221, 61, 223, 32, 161, 60, 246, 85, 208, 190, 4, 144, 168, 190, 191, 27, 210, 61, 95, 156, 51, 190, 182, 157, 62, 190, 94, 183, 145, 187, 107, 251, 144, 189, 229, 151, 239, 189, 180, 15, 19, 190, 231, 79, 46, 61, 29, 231, 180, 188, 100, 11, 200, 60, 226, 249, 158, 190, 151, 208, 211, 61, 222, 118, 139, 189, 124, 0, 31, 61, 205, 236, 170, 190, 77, 189, 130, 61, 220, 59, 13, 190, 118, 196, 19, 62, 89, 56, 37, 190, 214, 142, 99, 190, 75, 100, 115, 189, 215, 27, 164, 190, 132, 66, 120, 189, 3, 92, 8, 62, 32, 207, 238, 60, 133, 170, 210, 189, 151, 146, 100, 190, 225, 152, 43, 190, 71, 160, 24, 190, 200, 69, 15, 62, 208, 27, 189, 60, 66, 32, 66, 61, 26, 6, 193, 61, 213, 222, 57, 62, 33, 38, 165, 62, 56, 133, 97, 190, 207, 153, 41, 62, 123, 91, 17, 190, 247, 238, 251, 61, 32, 12, 130, 59, 156, 87, 190, 62, 144, 100, 214, 62, 30, 246, 9, 62, 147, 73, 2, 63, 30, 249, 177, 61, 58, 209, 250, 188, 138, 143, 33, 190, 25, 59, 62, 191, 127, 56, 0, 190, 37, 12, 171, 62, 90, 141, 130, 62, 26, 254, 134, 190, 78, 72, 127, 62, 174, 203, 20, 62, 96, 98, 251, 189, 12, 112, 147, 187, 15, 174, 100, 190, 101, 68, 143, 61, 96, 212, 79, 190, 152, 195, 200, 189, 142, 220, 167, 61, 253, 145, 152, 62, 119, 120, 230, 190, 198, 156, 211, 190, 84, 247, 164, 61, 232, 216, 231, 61, 44, 149, 103, 62, 62, 131, 159, 190, 160, 240, 227, 188, 150, 172, 132, 61, 241, 137, 34, 190, 22, 196, 100, 62, 44, 186, 144, 62, 24, 73, 145, 62, 198, 243, 219, 189, 68, 25, 81, 61, 254, 99, 67, 190, 39, 198, 109, 62, 247, 85, 46, 61, 63, 26, 25, 190, 57, 233, 235, 189, 38, 67, 178, 62, 4, 71, 146, 61, 96, 201, 56, 189, 58, 121, 149, 62, 213, 193, 185, 62, 16, 127, 2, 190, 22, 52, 23, 190, 119, 193, 172, 190, 95, 149, 172, 61, 116, 181, 215, 189, 204, 194, 25, 190, 0, 226, 78, 62, 185, 36, 71, 62, 19, 72, 41, 190, 48, 146, 191, 189, 160, 27, 76, 62, 231, 241, 198, 61, 229, 145, 21, 190, 199, 181, 26, 189, 200, 147, 171, 190, 184, 227, 13, 190, 79, 75, 188, 189, 186, 170, 226, 61, 88, 48, 73, 190, 231, 194, 25, 190, 69, 39, 89, 60, 181, 14, 35, 62, 210, 35, 187, 189, 25, 107, 45, 62, 98, 13, 29, 62, 6, 204, 237, 61, 134, 146, 64, 62, 87, 196, 47, 62, 157, 72, 44, 190, 64, 250, 142, 62, 173, 73, 78, 189, 146, 110, 17, 62, 109, 33, 230, 188, 136, 9, 182, 189, 12, 132, 133, 190, 197, 25, 162, 187, 241, 164, 95, 62, 163, 239, 244, 61, 71, 7, 108, 61, 26, 27, 246, 61, 176, 14, 106, 61, 203, 14, 133, 190, 147, 192, 158, 190, 44, 62, 127, 190, 203, 1, 162, 190, 225, 177, 32, 62, 67, 245, 5, 190, 230, 201, 22, 63, 18, 136, 185, 189, 132, 13, 187, 190, 192, 89, 146, 190, 142, 119, 125, 191, 11, 24, 165, 61, 91, 170, 17, 62, 139, 114, 45, 62, 200, 178, 78, 190, 192, 26, 19, 62, 150, 161, 51, 62, 251, 48, 160, 62, 193, 216, 159, 188, 216, 75, 38, 191, 128, 203, 154, 61, 128, 53, 189, 190, 203, 140, 181, 189, 210, 213, 39, 62, 216, 88, 42, 62, 132, 145, 58, 189, 165, 181, 142, 61, 189, 65, 218, 61, 162, 128, 24, 190, 35, 109, 18, 190, 216, 205, 214, 190, 208, 95, 11, 62, 189, 26, 113, 190, 233, 216, 62, 61, 78, 121, 42, 190, 20, 109, 213, 190, 216, 103, 28, 62, 195, 125, 102, 61, 161, 35, 207, 62, 181, 72, 150, 61, 235, 222, 173, 187, 98, 173, 236, 189, 91, 134, 10, 191, 83, 125, 133, 62, 167, 98, 192, 62, 61, 173, 4, 62, 177, 58, 20, 190, 115, 93, 99, 189, 66, 234, 193, 61, 2, 199, 248, 187, 127, 186, 221, 59, 163, 209, 37, 190, 139, 225, 94, 62, 238, 222, 151, 190, 173, 215, 210, 189, 64, 216, 79, 62, 235, 0, 183, 61, 147, 129, 37, 190, 92, 186, 44, 62, 148, 9, 225, 61, 99, 32, 175, 189, 142, 125, 0, 189, 137, 195, 212, 190, 145, 254, 81, 62, 234, 194, 16, 188, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 221, 119, 8, 189, 3, 148, 87, 190, 188, 147, 235, 190, 102, 241, 203, 62, 105, 104, 54, 190, 140, 44, 14, 62, 191, 60, 255, 189, 34, 198, 64, 190, 51, 229, 88, 59, 182, 89, 71, 190, 29, 162, 177, 61, 125, 239, 220, 190, 245, 202, 106, 190, 196, 36, 4, 62, 113, 224, 64, 62, 162, 224, 134, 62, 74, 172, 216, 62, 89, 161, 64, 190, 236, 51, 229, 61, 205, 31, 248, 60, 34, 245, 101, 189, 233, 155, 41, 190, 211, 15, 101, 62, 66, 244, 75, 60, 218, 62, 219, 61, 128, 21, 157, 188, 129, 221, 49, 61, 215, 121, 122, 62, 227, 234, 91, 190, 247, 31, 212, 190, 114, 161, 20, 62, 101, 221, 111, 62, 23, 38, 146, 190, 44, 118, 146, 188, 213, 81, 32, 190, 177, 108, 12, 61, 212, 106, 176, 190, 229, 188, 69, 190, 178, 247, 31, 62, 144, 118, 96, 188, 185, 204, 42, 190, 64, 83, 103, 190, 10, 151, 232, 61, 35, 35, 228, 62, 12, 193, 92, 190, 7, 96, 126, 62, 176, 197, 255, 60, 36, 66, 32, 62, 39, 129, 158, 62, 164, 60, 117, 62, 35, 63, 132, 61, 27, 247, 175, 62, 163, 83, 142, 61, 216, 234, 244, 61, 25, 207, 77, 62, 152, 22, 179, 188, 105, 162, 10, 190, 186, 37, 172, 189, 76, 216, 230, 61, 184, 167, 172, 61, 15, 155, 170, 61, 100, 13, 17, 190, 188, 70, 223, 61, 9, 27, 124, 61, 104, 138, 98, 62, 140, 2, 75, 62, 122, 206, 150, 62, 171, 179, 163, 189, 41, 122, 172, 61, 38, 12, 212, 60, 117, 123, 44, 189, 253, 145, 12, 62, 185, 247, 73, 62, 9, 35, 222, 61, 68, 188, 25, 190, 56, 155, 48, 62, 132, 96, 66, 62, 2, 182, 165, 61, 216, 214, 18, 62, 51, 80, 5, 190, 233, 222, 185, 189, 105, 183, 26, 189, 23, 80, 96, 62, 66, 83, 104, 189, 148, 169, 81, 61, 63, 121, 13, 61, 79, 100, 19, 62, 163, 0, 150, 61, 208, 106, 38, 190, 4, 31, 213, 61, 46, 173, 49, 61, 194, 133, 55, 62, 57, 98, 76, 62, 47, 30, 133, 61, 72, 206, 203, 61, 101, 48, 47, 190, 49, 226, 68, 190, 84, 47, 45, 189, 72, 129, 157, 61, 225, 46, 3, 62, 157, 169, 148, 189, 111, 164, 12, 61, 114, 60, 25, 62, 123, 197, 26, 190, 135, 103, 74, 190, 104, 189, 4, 190, 79, 104, 138, 62, 42, 70, 244, 59, 232, 65, 13, 191, 153, 4, 164, 61, 188, 99, 133, 190, 55, 61, 193, 62, 225, 100, 40, 189, 187, 115, 171, 190, 51, 192, 147, 188, 158, 48, 168, 188, 149, 152, 118, 189, 99, 113, 213, 189, 49, 48, 45, 62, 238, 201, 83, 62, 55, 97, 153, 62, 167, 241, 28, 190, 253, 118, 151, 188, 230, 220, 67, 189, 246, 201, 200, 189, 223, 36, 1, 189, 214, 72, 163, 62, 168, 46, 140, 62, 122, 237, 70, 62, 118, 246, 93, 190, 107, 211, 74, 190, 157, 20, 46, 61, 109, 62, 32, 62, 112, 243, 61, 190, 140, 228, 52, 190, 116, 66, 94, 62, 64, 67, 210, 61, 118, 166, 5, 190, 226, 177, 217, 189, 29, 69, 139, 190, 170, 132, 236, 190, 100, 186, 173, 60, 48, 161, 61, 191, 105, 144, 40, 190, 247, 210, 62, 189, 7, 37, 147, 62, 60, 93, 100, 61, 41, 106, 152, 61, 171, 64, 191, 60, 179, 68, 138, 190, 206, 113, 147, 61, 133, 32, 150, 61, 93, 131, 23, 189, 39, 210, 24, 190, 77, 47, 51, 190, 185, 241, 164, 190, 161, 254, 162, 62, 209, 146, 99, 189, 224, 98, 67, 190, 185, 29, 53, 188, 143, 243, 72, 62, 81, 18, 160, 62, 198, 171, 10, 61, 170, 57, 130, 190, 64, 48, 146, 61, 250, 229, 16, 189, 68, 59, 13, 190, 71, 5, 151, 189, 175, 74, 253, 62, 221, 115, 18, 62, 165, 212, 114, 61, 6, 173, 22, 62, 19, 165, 10, 190, 72, 31, 110, 62, 10, 182, 217, 60, 243, 226, 66, 191, 3, 123, 131, 190, 238, 100, 44, 62, 233, 144, 104, 62, 79, 49, 153, 190, 117, 249, 160, 61, 206, 244, 217, 61, 108, 34, 14, 61, 15, 186, 130, 189, 64, 143, 5, 190, 5, 217, 131, 190, 152, 86, 78, 189, 191, 22, 145, 61, 241, 168, 166, 62, 178, 87, 237, 61, 54, 51, 81, 190, 49, 107, 87, 190, 142, 174, 168, 61, 181, 129, 0, 62, 41, 106, 101, 62, 134, 99, 216, 190, 157, 242, 99, 62, 87, 88, 40, 190, 249, 76, 47, 62, 157, 89, 234, 188, 83, 103, 157, 62, 219, 148, 146, 62, 200, 123, 31, 190, 145, 201, 141, 62, 215, 247, 92, 62, 38, 214, 39, 62, 13, 20, 81, 61, 11, 225, 191, 190, 8, 175, 144, 190, 24, 111, 27, 62, 187, 26, 41, 62, 93, 94, 80, 190, 175, 14, 250, 61, 177, 143, 85, 62, 216, 173, 251, 189, 124, 210, 139, 189, 26, 93, 243, 190, 75, 112, 40, 190, 250, 254, 94, 62, 82, 175, 180, 189, 39, 61, 160, 61, 113, 218, 65, 188, 160, 208, 192, 190, 213, 164, 177, 190, 99, 244, 17, 189, 187, 53, 178, 61, 138, 171, 52, 62, 109, 168, 220, 190, 231, 202, 226, 61, 192, 110, 19, 189, 55, 194, 222, 187, 88, 171, 198, 189, 187, 57, 101, 189, 197, 77, 130, 62, 123, 201, 184, 190, 254, 165, 24, 62, 158, 128, 84, 61, 65, 157, 167, 61, 176, 139, 13, 61, 207, 32, 185, 190, 90, 216, 236, 190, 142, 231, 141, 62, 181, 103, 202, 189, 245, 53, 36, 190, 69, 49, 75, 62, 153, 236, 87, 62, 207, 147, 66, 61, 183, 133, 164, 188, 50, 132, 186, 188, 169, 240, 23, 189, 85, 128, 133, 61, 39, 193, 33, 189, 163, 7, 31, 189, 14, 83, 64, 62, 87, 157, 149, 61, 39, 227, 188, 189, 115, 224, 166, 61, 4, 18, 85, 62, 39, 254, 141, 62, 81, 67, 67, 188, 118, 13, 46, 62, 189, 213, 132, 190, 37, 247, 70, 189, 83, 74, 195, 60, 86, 247, 21, 62, 61, 97, 186, 61, 66, 246, 52, 60, 235, 152, 28, 62, 106, 75, 189, 60, 226, 193, 9, 62, 43, 125, 207, 188, 87, 117, 246, 190, 119, 227, 216, 190, 14, 105, 139, 62, 214, 86, 34, 61, 146, 200, 198, 189, 49, 132, 55, 62, 162, 66, 130, 62, 78, 94, 130, 61, 13, 158, 50, 190, 117, 106, 125, 190, 170, 58, 167, 60, 42, 200, 99, 190, 170, 24, 210, 61, 227, 120, 71, 60, 162, 43, 88, 62, 206, 24, 169, 190, 230, 64, 102, 190, 86, 148, 17, 61, 33, 25, 108, 62, 240, 73, 84, 61, 40, 114, 111, 190, 246, 177, 187, 189, 200, 56, 21, 60, 163, 81, 162, 61, 250, 190, 44, 190, 5, 54, 116, 190, 74, 216, 161, 188, 225, 50, 143, 61, 69, 149, 129, 62, 32, 189, 228, 190, 149, 189, 160, 188, 134, 251, 35, 188, 159, 177, 143, 62, 165, 151, 52, 190, 66, 249, 2, 60, 238, 51, 124, 189, 182, 246, 8, 62, 67, 198, 207, 61, 170, 56, 146, 62, 105, 167, 185, 62, 178, 2, 203, 190, 164, 143, 249, 60, 154, 184, 11, 188, 162, 5, 156, 61, 194, 194, 208, 189, 137, 106, 91, 62, 179, 125, 220, 61, 227, 177, 117, 58, 220, 192, 126, 190, 109, 222, 190, 189, 141, 32, 5, 190, 199, 39, 39, 62, 204, 218, 174, 190, 253, 195, 97, 60, 84, 144, 40, 191, 122, 109, 249, 61, 119, 14, 22, 190, 239, 110, 118, 189, 85, 94, 94, 61, 70, 200, 234, 61, 176, 195, 131, 191, 122, 91, 193, 62, 104, 3, 166, 61, 74, 30, 130, 62, 247, 46, 41, 191, 219, 240, 75, 191, 230, 97, 5, 190, 36, 42, 14, 60, 74, 226, 244, 190, 197, 160, 165, 61, 151, 70, 171, 188, 162, 245, 170, 60, 247, 224, 134, 190, 198, 111, 28, 60, 129, 16, 35, 191, 199, 49, 144, 62, 102, 67, 60, 62, 80, 171, 14, 61, 13, 194, 26, 188, 141, 187, 29, 191, 248, 43, 16, 190, 152, 2, 85, 190, 31, 135, 25, 191, 2, 163, 48, 191, 171, 89, 40, 62, 25, 209, 17, 191, 72, 233, 131, 62, 218, 82, 0, 190, 176, 236, 64, 190, 76, 172, 102, 190, 221, 130, 140, 190, 121, 82, 22, 62, 67, 82, 9, 63, 82, 105, 177, 187, 31, 51, 198, 189, 57, 5, 152, 62, 70, 245, 80, 62, 251, 242, 194, 62, 74, 184, 175, 61, 10, 193, 140, 190, 175, 9, 23, 189, 29, 130, 84, 190, 176, 198, 217, 190, 23, 79, 61, 62, 233, 94, 131, 62, 38, 84, 74, 189, 94, 21, 70, 61, 225, 194, 166, 62, 182, 152, 157, 62, 8, 132, 159, 188, 98, 194, 12, 191, 143, 144, 254, 61, 45, 132, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 149, 75, 190, 77, 141, 169, 61, 241, 93, 135, 189, 74, 197, 38, 60, 184, 250, 160, 61, 176, 113, 143, 189, 225, 145, 80, 190, 151, 151, 86, 189, 174, 55, 165, 189, 206, 128, 136, 62, 131, 76, 233, 61, 158, 124, 213, 189, 193, 30, 45, 190, 241, 118, 43, 189, 244, 231, 29, 61, 241, 190, 152, 59, 105, 6, 254, 61, 52, 57, 170, 60, 218, 27, 25, 189, 213, 229, 250, 189, 81, 129, 42, 190, 49, 177, 16, 62, 92, 208, 76, 62, 240, 89, 7, 189, 203, 199, 16, 189, 166, 167, 216, 61, 226, 193, 132, 62, 63, 7, 133, 61, 109, 109, 254, 187, 16, 82, 147, 59, 5, 255, 160, 189, 132, 69, 24, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 207, 2, 190, 72, 219, 21, 63, 203, 213, 215, 61, 67, 219, 113, 60, 162, 197, 181, 190, 140, 181, 73, 62, 136, 242, 21, 62, 74, 71, 237, 189, 88, 62, 112, 191, 98, 133, 69, 62, 25, 108, 185, 62, 51, 20, 6, 59, 40, 115, 21, 63, 91, 125, 152, 61, 55, 101, 182, 190, 185, 210, 101, 190, 164, 200, 221, 60, 43, 23, 33, 63, 45, 179, 133, 62, 158, 217, 150, 60, 130, 206, 210, 190, 106, 37, 174, 61, 166, 171, 28, 190, 241, 22, 1, 190, 94, 61, 216, 190, 46, 248, 5, 191, 178, 40, 211, 190, 254, 55, 23, 190, 106, 131, 194, 190, 181, 185, 59, 62, 20, 175, 148, 191, 167, 11, 177, 62, 49, 171, 23, 62, 71, 188, 175, 62, 12, 42, 22, 61, 144, 96, 247, 61, 41, 164, 132, 190, 234, 220, 113, 61, 81, 227, 96, 62, 209, 42, 35, 189, 84, 133, 79, 189, 39, 95, 139, 190, 164, 211, 237, 61, 16, 73, 72, 59, 249, 142, 189, 62, 171, 173, 232, 61, 56, 43, 139, 62, 153, 216, 237, 189, 47, 153, 60, 190, 246, 192, 146, 61, 235, 3, 1, 190, 184, 211, 23, 190, 67, 7, 172, 61, 89, 50, 190, 190, 150, 152, 67, 190, 6, 255, 183, 62, 64, 59, 106, 62, 236, 231, 245, 61, 126, 205, 2, 61, 184, 70, 213, 189, 166, 169, 20, 62, 48, 216, 94, 190, 34, 153, 190, 188, 64, 146, 245, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 241, 40, 62, 7, 38, 161, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 216, 232, 191, 207, 35, 27, 63, 22, 81, 141, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 213, 47, 191, 24, 16, 249, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}