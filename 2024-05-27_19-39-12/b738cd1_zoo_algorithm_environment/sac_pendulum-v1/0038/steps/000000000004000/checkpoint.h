// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 240, 196, 190, 6, 240, 165, 62, 249, 92, 250, 62, 194, 133, 95, 62, 94, 98, 68, 63, 252, 224, 123, 190, 46, 185, 1, 189, 60, 180, 42, 63, 45, 138, 6, 191, 64, 44, 91, 190, 69, 67, 247, 190, 174, 242, 0, 63, 211, 182, 42, 190, 224, 7, 55, 63, 180, 80, 115, 190, 101, 11, 62, 61, 115, 75, 132, 63, 195, 144, 178, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 20, 30, 101, 190, 51, 159, 87, 61, 200, 207, 151, 62, 177, 237, 15, 63, 119, 8, 71, 63, 148, 39, 219, 62, 163, 69, 40, 190, 225, 206, 129, 190, 31, 30, 205, 190, 92, 153, 189, 189, 62, 138, 24, 191, 143, 156, 192, 61, 201, 154, 243, 62, 244, 156, 10, 63, 96, 162, 131, 189, 6, 19, 53, 191, 183, 81, 54, 63, 233, 93, 97, 61, 202, 6, 60, 190, 218, 135, 41, 191, 27, 55, 165, 61, 83, 41, 19, 191, 172, 150, 137, 190, 178, 19, 157, 189, 149, 121, 167, 62, 127, 132, 57, 191, 115, 241, 81, 190, 32, 168, 133, 190, 168, 162, 144, 189, 191, 170, 196, 62, 78, 144, 130, 63, 139, 253, 249, 62, 125, 86, 1, 63, 190, 196, 73, 61, 57, 127, 205, 190, 138, 138, 223, 190, 89, 49, 39, 63, 173, 57, 137, 61, 0, 6, 37, 191, 157, 109, 218, 62, 49, 40, 195, 62, 67, 244, 239, 62, 53, 143, 162, 62, 178, 74, 49, 63, 102, 251, 150, 190, 135, 236, 212, 62, 187, 58, 218, 190, 206, 170, 3, 63, 103, 64, 213, 190, 103, 166, 145, 62, 217, 101, 34, 63, 92, 193, 7, 63, 142, 219, 112, 190, 141, 141, 226, 190, 204, 206, 93, 61, 199, 123, 215, 62, 211, 87, 22, 63, 217, 248, 135, 190, 164, 201, 245, 190, 35, 109, 215, 189, 218, 200, 170, 190, 177, 75, 253, 190, 60, 226, 211, 189, 91, 96, 0, 63, 82, 0, 233, 61, 222, 253, 213, 62, 95, 180, 1, 191, 64, 38, 113, 189, 206, 227, 33, 191, 104, 50, 14, 63, 157, 49, 69, 191, 126, 69, 206, 190, 251, 94, 106, 62, 62, 237, 51, 190, 111, 105, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 192, 64, 191, 222, 245, 71, 62, 123, 150, 166, 189, 24, 15, 129, 189, 238, 107, 165, 190, 234, 205, 207, 61, 187, 166, 19, 191, 157, 209, 182, 190, 45, 129, 134, 190, 171, 138, 164, 61, 137, 87, 99, 62, 63, 36, 3, 63, 240, 153, 188, 62, 222, 164, 101, 190, 18, 166, 47, 63, 160, 232, 5, 189, 230, 205, 219, 189, 158, 94, 198, 62, 253, 65, 162, 62, 81, 37, 134, 62, 80, 85, 47, 190, 205, 15, 179, 62, 187, 100, 26, 63, 157, 111, 7, 61, 58, 89, 3, 191, 135, 37, 192, 62, 23, 68, 60, 63, 180, 11, 5, 63, 85, 0, 5, 62, 92, 184, 93, 190, 218, 207, 42, 188, 153, 84, 227, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 137, 72, 61, 180, 214, 112, 60, 15, 183, 205, 189, 159, 44, 69, 62, 47, 188, 52, 61, 112, 235, 91, 190, 188, 27, 9, 190, 154, 197, 153, 61, 236, 81, 101, 62, 106, 19, 19, 62, 248, 161, 51, 62, 156, 166, 227, 60, 86, 163, 190, 189, 130, 162, 240, 61, 165, 225, 129, 60, 12, 210, 120, 61, 132, 177, 75, 62, 138, 154, 96, 61, 131, 234, 220, 189, 12, 20, 225, 61, 191, 152, 152, 189, 201, 24, 111, 190, 222, 69, 37, 61, 95, 107, 67, 62, 0, 0, 205, 61, 203, 15, 168, 60, 90, 41, 67, 189, 200, 161, 37, 62, 38, 217, 68, 60, 106, 205, 13, 190, 50, 34, 209, 188, 65, 49, 40, 61, 91, 158, 107, 190, 98, 98, 148, 189, 219, 201, 204, 190, 253, 18, 106, 62, 205, 190, 186, 190, 201, 192, 16, 62, 198, 162, 35, 62, 23, 144, 163, 190, 81, 248, 230, 190, 12, 31, 66, 190, 22, 15, 253, 61, 173, 9, 155, 62, 10, 91, 77, 61, 178, 234, 52, 190, 132, 189, 207, 61, 150, 23, 211, 61, 241, 64, 178, 62, 35, 125, 159, 189, 103, 89, 153, 189, 123, 92, 74, 62, 109, 231, 138, 190, 54, 120, 16, 190, 204, 90, 161, 61, 80, 131, 40, 62, 113, 3, 70, 62, 181, 217, 10, 62, 132, 126, 0, 62, 244, 15, 220, 187, 181, 40, 98, 190, 246, 52, 68, 190, 99, 95, 18, 62, 216, 187, 143, 62, 143, 22, 44, 190, 196, 253, 29, 190, 187, 208, 76, 61, 15, 129, 6, 190, 226, 222, 243, 189, 215, 56, 241, 61, 245, 0, 37, 189, 150, 153, 209, 186, 95, 243, 211, 189, 192, 184, 241, 189, 106, 226, 156, 189, 23, 185, 30, 62, 113, 58, 30, 190, 179, 242, 40, 190, 208, 76, 6, 190, 223, 139, 58, 187, 140, 80, 227, 189, 110, 226, 255, 189, 194, 137, 230, 188, 247, 226, 2, 62, 80, 15, 15, 62, 178, 170, 225, 189, 215, 153, 103, 60, 197, 42, 21, 62, 158, 251, 167, 61, 225, 131, 105, 60, 225, 216, 146, 188, 181, 211, 38, 190, 138, 57, 32, 60, 40, 155, 210, 61, 221, 220, 35, 190, 138, 185, 38, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 221, 39, 145, 60, 169, 194, 169, 62, 35, 92, 66, 188, 13, 44, 58, 61, 48, 78, 238, 61, 186, 249, 131, 189, 152, 156, 120, 189, 157, 74, 144, 189, 183, 241, 158, 187, 102, 118, 32, 190, 23, 111, 2, 190, 27, 7, 22, 62, 127, 135, 200, 61, 123, 89, 78, 62, 58, 132, 119, 190, 177, 71, 146, 190, 58, 58, 72, 189, 117, 219, 32, 62, 117, 209, 54, 190, 254, 155, 178, 61, 54, 118, 80, 61, 200, 59, 57, 62, 153, 4, 153, 60, 55, 53, 54, 61, 129, 82, 25, 62, 195, 192, 38, 60, 76, 92, 25, 190, 244, 244, 88, 190, 37, 157, 136, 62, 231, 95, 244, 189, 77, 223, 39, 190, 45, 172, 32, 188, 111, 129, 168, 190, 62, 181, 149, 188, 233, 137, 6, 190, 27, 149, 82, 62, 230, 114, 1, 191, 87, 102, 85, 62, 46, 234, 250, 189, 137, 176, 136, 190, 225, 17, 195, 190, 200, 157, 150, 60, 57, 13, 83, 189, 204, 235, 162, 188, 52, 44, 58, 61, 254, 242, 93, 189, 198, 24, 27, 189, 46, 128, 67, 62, 22, 163, 161, 62, 226, 213, 197, 189, 167, 101, 18, 60, 89, 133, 126, 62, 201, 237, 36, 60, 201, 219, 224, 189, 254, 46, 0, 62, 165, 2, 125, 61, 241, 178, 102, 62, 241, 99, 6, 62, 254, 78, 20, 62, 154, 83, 235, 61, 187, 103, 208, 60, 88, 113, 21, 190, 140, 122, 132, 61, 70, 150, 102, 61, 179, 106, 44, 62, 221, 117, 215, 189, 120, 51, 0, 62, 162, 196, 70, 190, 24, 248, 17, 62, 101, 91, 184, 59, 3, 50, 209, 188, 32, 186, 8, 61, 193, 81, 207, 189, 74, 130, 11, 62, 130, 21, 110, 190, 253, 233, 140, 61, 119, 178, 76, 62, 70, 87, 22, 190, 3, 168, 21, 190, 105, 94, 163, 188, 63, 37, 5, 190, 213, 204, 27, 190, 31, 210, 226, 61, 112, 7, 55, 62, 168, 15, 156, 61, 17, 147, 63, 61, 41, 192, 6, 62, 35, 19, 13, 190, 87, 168, 66, 62, 66, 231, 34, 61, 174, 6, 0, 188, 194, 217, 224, 188, 127, 16, 218, 61, 94, 92, 8, 190, 105, 16, 89, 188, 151, 198, 189, 188, 164, 65, 103, 189, 117, 84, 87, 60, 165, 92, 87, 61, 195, 112, 25, 190, 44, 181, 159, 189, 169, 134, 181, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 48, 216, 14, 62, 103, 202, 28, 190, 140, 66, 179, 61, 82, 202, 245, 61, 169, 202, 2, 62, 39, 84, 179, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 236, 252, 133, 61, 209, 236, 168, 189, 48, 225, 117, 61, 98, 168, 24, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 25, 178, 132, 189, 76, 154, 15, 190, 30, 130, 74, 189, 230, 117, 213, 189, 245, 249, 34, 60, 187, 192, 9, 190, 4, 63, 2, 190, 157, 223, 18, 62, 136, 121, 53, 60, 61, 13, 115, 191, 34, 226, 131, 61, 35, 19, 225, 190, 56, 201, 239, 188, 191, 60, 55, 190, 42, 20, 23, 62, 4, 171, 33, 62, 148, 130, 25, 62, 7, 200, 48, 191, 106, 103, 219, 62, 205, 198, 149, 61, 84, 12, 66, 62, 143, 230, 249, 189, 251, 82, 145, 191, 219, 83, 48, 189, 121, 117, 172, 189, 124, 117, 55, 190, 216, 236, 42, 60, 131, 95, 144, 61, 153, 71, 33, 191, 201, 109, 73, 190, 203, 124, 33, 190, 253, 11, 202, 190, 159, 219, 33, 62, 86, 253, 140, 62, 131, 61, 219, 61, 197, 154, 119, 62, 42, 31, 54, 190, 76, 146, 121, 189, 40, 235, 125, 190, 0, 232, 201, 189, 228, 159, 75, 190, 142, 34, 156, 60, 6, 55, 21, 190, 97, 170, 49, 62, 243, 37, 187, 189, 166, 7, 7, 190, 182, 164, 175, 190, 249, 212, 25, 190, 53, 212, 179, 60, 65, 183, 153, 189, 53, 28, 80, 61, 34, 151, 84, 190, 177, 167, 233, 61, 218, 88, 106, 62, 125, 99, 142, 61, 178, 218, 173, 61, 66, 66, 188, 188, 57, 211, 68, 62, 239, 244, 180, 60, 4, 20, 89, 189, 84, 191, 189, 61, 161, 81, 54, 62, 14, 179, 98, 61, 32, 31, 44, 62, 6, 124, 38, 62, 51, 209, 229, 188, 93, 13, 161, 61, 123, 58, 88, 61, 107, 216, 147, 62, 172, 212, 86, 190, 135, 9, 82, 61, 193, 219, 120, 190, 210, 46, 179, 190, 46, 152, 31, 189, 216, 105, 145, 190, 25, 125, 4, 191, 42, 246, 48, 61, 9, 209, 130, 188, 181, 160, 242, 61, 22, 145, 241, 60, 96, 113, 11, 189, 59, 41, 42, 61, 61, 77, 166, 190, 84, 74, 100, 61, 67, 60, 199, 59, 147, 85, 0, 62, 227, 225, 18, 189, 155, 101, 139, 189, 21, 228, 113, 62, 68, 61, 88, 62, 204, 199, 213, 61, 52, 19, 69, 59, 27, 145, 139, 62, 100, 239, 251, 189, 140, 21, 82, 61, 3, 165, 194, 189, 57, 5, 237, 189, 25, 234, 151, 61, 191, 139, 66, 62, 1, 196, 68, 190, 192, 198, 195, 62, 38, 101, 37, 188, 197, 178, 216, 189, 11, 22, 246, 60, 233, 158, 162, 59, 108, 182, 254, 188, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 51, 19, 144, 188, 208, 143, 38, 190, 243, 180, 148, 187, 70, 165, 190, 61, 92, 218, 11, 190, 54, 127, 58, 188, 124, 68, 75, 188, 207, 212, 45, 190, 51, 255, 196, 189, 41, 33, 0, 62, 14, 77, 214, 61, 152, 252, 6, 62, 108, 209, 46, 190, 110, 231, 6, 62, 79, 45, 202, 189, 64, 156, 54, 61, 200, 222, 132, 61, 9, 172, 254, 189, 112, 23, 4, 190, 68, 52, 71, 189, 82, 245, 18, 190, 128, 99, 210, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 118, 234, 8, 60, 253, 91, 78, 190, 97, 102, 205, 61, 60, 244, 217, 188, 141, 163, 8, 62, 51, 255, 111, 190, 200, 20, 133, 61, 160, 2, 60, 62, 91, 224, 13, 62, 141, 99, 8, 61, 209, 153, 179, 189, 23, 251, 21, 189, 126, 245, 243, 60, 219, 207, 50, 61, 187, 154, 239, 190, 120, 97, 89, 190, 154, 126, 235, 189, 185, 246, 252, 61, 228, 23, 149, 189, 52, 150, 8, 190, 26, 177, 62, 62, 10, 191, 42, 188, 233, 227, 113, 188, 103, 107, 1, 190, 251, 84, 207, 60, 226, 226, 84, 61, 178, 229, 31, 191, 31, 30, 142, 190, 102, 238, 33, 61, 246, 30, 52, 61, 173, 225, 63, 190, 111, 74, 38, 190, 191, 27, 210, 61, 95, 156, 51, 190, 182, 157, 62, 190, 94, 183, 145, 187, 107, 251, 144, 189, 229, 151, 239, 189, 180, 15, 19, 190, 231, 79, 46, 61, 29, 231, 180, 188, 100, 11, 200, 60, 226, 249, 158, 190, 151, 208, 211, 61, 222, 118, 139, 189, 124, 0, 31, 61, 205, 236, 170, 190, 77, 189, 130, 61, 220, 59, 13, 190, 118, 196, 19, 62, 89, 56, 37, 190, 214, 142, 99, 190, 75, 100, 115, 189, 215, 27, 164, 190, 132, 66, 120, 189, 3, 92, 8, 62, 32, 207, 238, 60, 133, 170, 210, 189, 151, 146, 100, 190, 225, 152, 43, 190, 71, 160, 24, 190, 200, 69, 15, 62, 208, 27, 189, 60, 66, 32, 66, 61, 29, 109, 243, 61, 194, 135, 18, 62, 193, 38, 142, 62, 180, 76, 124, 190, 46, 80, 14, 61, 230, 67, 142, 190, 247, 238, 251, 61, 49, 234, 185, 60, 128, 75, 161, 62, 218, 227, 158, 62, 159, 249, 199, 61, 81, 138, 255, 62, 240, 79, 50, 62, 177, 103, 166, 189, 158, 43, 183, 189, 212, 49, 38, 191, 197, 142, 214, 189, 23, 72, 139, 62, 47, 81, 62, 62, 0, 79, 115, 190, 159, 190, 78, 62, 189, 190, 245, 61, 104, 185, 48, 190, 27, 65, 101, 60, 46, 157, 135, 190, 234, 176, 102, 61, 251, 139, 56, 190, 92, 0, 22, 189, 86, 234, 204, 60, 188, 168, 100, 62, 242, 45, 223, 190, 44, 81, 231, 190, 5, 211, 87, 61, 192, 200, 34, 62, 102, 246, 101, 62, 154, 159, 182, 190, 207, 120, 74, 189, 132, 226, 136, 61, 241, 137, 34, 190, 239, 115, 68, 62, 246, 190, 116, 62, 2, 150, 103, 62, 129, 34, 224, 189, 204, 21, 4, 62, 184, 211, 186, 187, 202, 127, 155, 61, 74, 200, 205, 61, 223, 81, 128, 189, 50, 71, 165, 189, 5, 159, 152, 62, 66, 215, 53, 61, 217, 148, 164, 188, 69, 23, 122, 62, 27, 7, 200, 62, 156, 246, 50, 190, 223, 200, 215, 189, 77, 12, 167, 190, 204, 85, 221, 61, 194, 36, 138, 189, 71, 7, 243, 189, 238, 170, 13, 62, 86, 180, 4, 62, 234, 99, 31, 190, 38, 191, 220, 189, 6, 68, 0, 62, 207, 55, 207, 61, 22, 92, 251, 189, 49, 208, 148, 189, 144, 207, 94, 190, 195, 140, 228, 188, 79, 75, 188, 189, 116, 130, 25, 61, 211, 159, 65, 190, 170, 91, 213, 189, 69, 132, 229, 60, 218, 8, 227, 61, 63, 116, 154, 60, 111, 235, 214, 61, 70, 111, 65, 62, 173, 246, 245, 61, 44, 57, 55, 62, 143, 131, 227, 61, 165, 116, 10, 190, 167, 7, 62, 62, 55, 3, 151, 189, 127, 47, 193, 61, 116, 82, 50, 189, 169, 7, 180, 189, 146, 197, 157, 190, 183, 98, 94, 60, 145, 210, 113, 62, 133, 76, 18, 62, 238, 148, 25, 58, 18, 221, 246, 61, 196, 107, 78, 60, 252, 42, 153, 190, 55, 186, 165, 190, 195, 157, 132, 190, 250, 170, 4, 191, 170, 254, 2, 62, 122, 183, 40, 190, 135, 46, 244, 62, 18, 136, 185, 189, 74, 118, 199, 190, 197, 76, 62, 190, 20, 133, 3, 191, 84, 123, 179, 61, 26, 188, 75, 62, 240, 240, 50, 62, 128, 225, 28, 190, 52, 173, 77, 62, 70, 172, 7, 190, 225, 66, 159, 62, 228, 254, 133, 188, 52, 252, 179, 190, 101, 3, 0, 61, 61, 220, 181, 190, 38, 153, 181, 189, 68, 49, 32, 62, 21, 250, 38, 62, 255, 168, 146, 61, 168, 168, 167, 61, 121, 233, 51, 62, 92, 160, 165, 189, 124, 198, 42, 190, 64, 20, 219, 190, 221, 174, 31, 61, 159, 83, 20, 190, 145, 183, 18, 61, 147, 129, 139, 190, 97, 127, 32, 191, 4, 63, 27, 62, 9, 49, 226, 61, 137, 224, 156, 62, 181, 72, 150, 61, 197, 121, 160, 188, 142, 157, 152, 189, 97, 184, 123, 190, 151, 254, 160, 62, 15, 31, 160, 62, 162, 245, 55, 62, 72, 171, 162, 189, 213, 155, 2, 61, 165, 217, 216, 59, 138, 85, 46, 59, 92, 216, 128, 188, 43, 24, 63, 188, 131, 128, 14, 62, 203, 28, 150, 190, 54, 44, 70, 190, 200, 100, 93, 62, 131, 85, 198, 61, 228, 83, 83, 190, 3, 157, 58, 62, 1, 241, 65, 62, 100, 208, 162, 59, 250, 2, 91, 189, 237, 12, 180, 190, 120, 152, 42, 62, 229, 48, 56, 60, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 45, 182, 142, 189, 185, 144, 169, 190, 32, 36, 158, 190, 170, 217, 186, 62, 26, 195, 134, 190, 145, 38, 39, 61, 191, 60, 255, 189, 161, 236, 93, 190, 142, 74, 2, 190, 236, 7, 70, 190, 253, 46, 116, 61, 28, 183, 194, 190, 18, 248, 154, 190, 36, 223, 21, 62, 239, 67, 60, 62, 121, 19, 200, 62, 220, 33, 193, 62, 217, 137, 93, 190, 82, 192, 178, 61, 88, 250, 161, 189, 133, 216, 235, 189, 57, 94, 161, 190, 87, 16, 60, 62, 143, 238, 2, 189, 152, 107, 192, 189, 3, 53, 81, 189, 160, 154, 14, 61, 92, 216, 128, 62, 151, 148, 114, 190, 76, 140, 130, 190, 18, 128, 49, 62, 18, 152, 89, 188, 143, 109, 180, 190, 237, 85, 15, 189, 11, 59, 2, 190, 2, 17, 130, 58, 195, 253, 92, 190, 206, 61, 162, 189, 178, 247, 31, 62, 206, 51, 163, 189, 60, 255, 30, 190, 203, 123, 23, 190, 206, 88, 250, 61, 127, 150, 182, 62, 51, 133, 8, 190, 83, 240, 70, 62, 66, 176, 99, 61, 204, 4, 31, 62, 227, 18, 152, 62, 73, 185, 49, 62, 141, 239, 243, 61, 11, 245, 134, 62, 152, 239, 60, 61, 18, 60, 91, 61, 84, 162, 57, 62, 46, 186, 220, 188, 47, 178, 14, 190, 139, 153, 156, 189, 151, 136, 251, 61, 193, 19, 206, 61, 154, 144, 197, 60, 141, 94, 241, 189, 209, 10, 168, 61, 94, 95, 138, 61, 119, 141, 55, 62, 173, 89, 115, 62, 109, 48, 152, 62, 145, 255, 217, 189, 72, 150, 193, 61, 73, 224, 110, 61, 117, 123, 44, 189, 30, 200, 201, 61, 146, 255, 44, 62, 3, 95, 244, 60, 5, 212, 45, 190, 243, 150, 94, 62, 9, 86, 89, 62, 219, 128, 17, 189, 50, 69, 194, 61, 101, 63, 165, 189, 30, 226, 220, 189, 182, 38, 75, 189, 92, 73, 32, 62, 163, 3, 200, 189, 139, 123, 16, 61, 249, 219, 43, 61, 143, 70, 234, 61, 180, 42, 142, 61, 115, 247, 80, 190, 4, 45, 216, 61, 8, 247, 177, 187, 238, 139, 252, 61, 216, 63, 62, 62, 148, 83, 67, 59, 170, 39, 99, 61, 79, 56, 124, 190, 128, 231, 8, 190, 126, 126, 128, 60, 70, 190, 0, 62, 207, 12, 197, 61, 60, 219, 201, 189, 180, 87, 164, 61, 114, 60, 25, 62, 146, 218, 207, 189, 235, 189, 255, 189, 141, 47, 221, 189, 52, 78, 45, 62, 94, 71, 96, 61, 169, 179, 1, 191, 115, 54, 26, 61, 12, 30, 114, 190, 107, 62, 137, 62, 107, 183, 216, 189, 51, 245, 195, 190, 189, 185, 190, 188, 56, 210, 53, 188, 235, 173, 33, 61, 112, 214, 57, 189, 26, 191, 55, 189, 71, 74, 226, 61, 242, 120, 170, 62, 76, 197, 56, 190, 5, 63, 15, 189, 140, 217, 116, 189, 22, 186, 39, 190, 54, 208, 182, 60, 225, 149, 133, 62, 135, 249, 156, 62, 224, 179, 60, 62, 28, 125, 186, 189, 103, 219, 74, 190, 57, 246, 133, 188, 60, 248, 32, 62, 194, 82, 162, 189, 140, 228, 52, 190, 9, 24, 78, 62, 151, 135, 19, 59, 171, 172, 8, 190, 204, 126, 53, 190, 240, 179, 121, 190, 109, 191, 109, 190, 115, 174, 162, 60, 38, 195, 234, 190, 238, 23, 156, 190, 174, 129, 216, 188, 70, 22, 52, 62, 145, 98, 182, 61, 19, 226, 151, 61, 228, 165, 143, 189, 44, 229, 100, 190, 246, 178, 95, 188, 104, 129, 175, 61, 194, 194, 5, 189, 157, 10, 37, 190, 228, 235, 183, 189, 255, 236, 253, 189, 212, 194, 83, 62, 209, 146, 99, 189, 247, 56, 98, 190, 98, 21, 60, 188, 186, 137, 80, 62, 61, 137, 155, 62, 34, 41, 85, 60, 81, 44, 160, 190, 156, 38, 80, 187, 76, 100, 150, 189, 68, 59, 13, 190, 145, 255, 150, 189, 213, 69, 217, 62, 73, 24, 88, 61, 156, 177, 40, 189, 221, 87, 72, 62, 28, 239, 221, 60, 187, 107, 200, 188, 246, 246, 183, 61, 143, 198, 7, 191, 47, 57, 90, 190, 183, 40, 250, 61, 204, 36, 32, 62, 56, 73, 140, 190, 104, 239, 222, 60, 2, 137, 183, 61, 35, 65, 253, 188, 230, 54, 17, 188, 189, 53, 26, 190, 95, 254, 89, 190, 173, 217, 48, 189, 66, 124, 187, 61, 95, 70, 140, 62, 82, 159, 199, 61, 25, 17, 239, 189, 195, 242, 111, 190, 200, 205, 75, 62, 46, 130, 252, 61, 240, 71, 101, 62, 100, 71, 174, 190, 206, 112, 37, 62, 131, 64, 74, 190, 249, 76, 47, 62, 193, 89, 180, 61, 40, 238, 198, 62, 174, 217, 129, 62, 255, 228, 75, 190, 139, 235, 139, 62, 136, 68, 2, 62, 212, 198, 6, 61, 192, 146, 115, 189, 202, 229, 130, 190, 38, 21, 102, 190, 242, 204, 66, 62, 48, 27, 13, 62, 65, 175, 40, 190, 190, 194, 89, 62, 27, 186, 77, 62, 6, 124, 4, 190, 185, 16, 142, 188, 245, 238, 233, 190, 80, 231, 13, 190, 41, 116, 241, 61, 225, 121, 70, 190, 244, 99, 8, 62, 204, 54, 131, 188, 120, 23, 164, 190, 23, 140, 178, 190, 211, 114, 26, 188, 177, 245, 15, 62, 97, 172, 59, 62, 34, 31, 173, 190, 23, 195, 222, 61, 110, 126, 68, 187, 55, 194, 222, 187, 200, 13, 120, 189, 161, 224, 232, 188, 113, 47, 82, 62, 139, 114, 125, 190, 188, 188, 75, 62, 174, 247, 99, 61, 191, 20, 248, 61, 169, 168, 23, 60, 2, 123, 165, 190, 86, 61, 220, 190, 174, 24, 150, 62, 149, 2, 253, 189, 193, 6, 16, 190, 72, 171, 119, 62, 144, 31, 125, 62, 56, 158, 111, 61, 110, 123, 131, 60, 215, 159, 73, 188, 26, 31, 61, 189, 170, 205, 104, 61, 221, 127, 50, 189, 43, 121, 94, 188, 150, 11, 8, 62, 245, 215, 149, 61, 58, 77, 220, 189, 25, 184, 137, 61, 8, 58, 88, 62, 49, 5, 151, 62, 185, 67, 91, 189, 180, 176, 242, 61, 212, 30, 151, 190, 37, 247, 70, 189, 197, 155, 251, 59, 251, 194, 144, 61, 126, 158, 95, 61, 26, 176, 146, 189, 160, 106, 78, 62, 232, 91, 13, 62, 253, 145, 11, 189, 223, 174, 243, 60, 97, 138, 167, 190, 85, 45, 198, 190, 42, 208, 117, 62, 122, 4, 64, 60, 31, 226, 48, 189, 249, 29, 0, 62, 164, 163, 131, 62, 113, 72, 2, 61, 163, 144, 6, 190, 83, 112, 94, 190, 202, 65, 75, 61, 210, 175, 80, 190, 137, 130, 7, 62, 168, 50, 254, 188, 183, 111, 90, 62, 151, 43, 143, 190, 233, 182, 62, 190, 46, 85, 24, 62, 146, 80, 207, 61, 251, 211, 177, 61, 176, 1, 142, 190, 19, 184, 252, 188, 127, 15, 21, 61, 163, 81, 162, 61, 124, 24, 9, 190, 238, 234, 73, 190, 121, 253, 164, 61, 152, 244, 204, 60, 119, 146, 190, 61, 223, 203, 130, 190, 20, 190, 255, 189, 18, 15, 47, 61, 23, 161, 137, 62, 7, 15, 14, 190, 25, 216, 243, 189, 76, 35, 131, 187, 58, 60, 226, 61, 189, 22, 150, 61, 211, 42, 57, 62, 57, 35, 147, 62, 25, 88, 173, 190, 65, 18, 142, 61, 79, 201, 5, 189, 244, 74, 179, 61, 187, 164, 98, 189, 32, 15, 205, 61, 46, 255, 77, 62, 249, 148, 72, 60, 38, 213, 46, 190, 109, 222, 190, 189, 160, 74, 166, 189, 229, 157, 144, 61, 254, 109, 123, 191, 112, 93, 212, 187, 20, 101, 16, 191, 122, 109, 249, 61, 25, 85, 22, 190, 239, 110, 118, 189, 83, 57, 142, 61, 126, 18, 55, 189, 7, 232, 43, 191, 69, 8, 184, 62, 110, 29, 31, 190, 255, 19, 77, 62, 120, 50, 137, 190, 113, 50, 61, 191, 167, 123, 5, 190, 83, 237, 250, 60, 202, 195, 192, 190, 197, 160, 165, 61, 24, 183, 170, 59, 31, 19, 3, 191, 161, 120, 77, 190, 186, 26, 64, 60, 228, 173, 144, 190, 62, 170, 109, 62, 18, 148, 249, 61, 20, 13, 50, 61, 23, 54, 16, 61, 243, 122, 133, 190, 85, 133, 241, 189, 48, 85, 76, 190, 68, 55, 20, 191, 178, 208, 55, 191, 149, 121, 51, 62, 179, 180, 149, 190, 219, 228, 116, 62, 218, 82, 0, 190, 109, 204, 60, 190, 130, 186, 57, 190, 166, 204, 113, 190, 20, 110, 33, 62, 188, 29, 10, 63, 73, 178, 35, 189, 177, 221, 142, 189, 43, 30, 106, 62, 17, 51, 191, 61, 99, 223, 200, 62, 123, 10, 180, 61, 56, 150, 108, 190, 34, 113, 207, 60, 186, 125, 73, 190, 246, 97, 198, 190, 143, 73, 84, 62, 254, 140, 133, 62, 23, 66, 19, 62, 41, 106, 78, 61, 116, 195, 145, 62, 7, 44, 109, 62, 61, 63, 213, 188, 0, 208, 41, 191, 110, 238, 203, 61, 87, 205, 113, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 105, 94, 190, 176, 46, 161, 61, 95, 178, 205, 188, 74, 197, 38, 60, 249, 141, 13, 62, 166, 65, 201, 189, 105, 107, 89, 190, 179, 123, 86, 189, 141, 2, 160, 189, 17, 232, 134, 62, 2, 189, 193, 61, 22, 41, 209, 189, 221, 167, 116, 190, 241, 118, 43, 189, 201, 46, 40, 61, 145, 67, 165, 61, 108, 113, 8, 62, 232, 183, 109, 61, 73, 119, 74, 188, 213, 229, 250, 189, 176, 22, 79, 190, 189, 58, 5, 62, 29, 75, 72, 62, 218, 170, 133, 189, 76, 0, 93, 188, 116, 38, 4, 62, 72, 83, 85, 62, 245, 255, 189, 61, 114, 206, 123, 60, 100, 210, 138, 189, 114, 3, 212, 189, 73, 69, 14, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 33, 2, 190, 247, 138, 235, 62, 205, 162, 15, 62, 67, 219, 113, 60, 23, 95, 143, 190, 209, 88, 52, 62, 177, 82, 146, 61, 129, 71, 237, 189, 122, 193, 96, 191, 156, 173, 65, 62, 134, 239, 187, 62, 124, 71, 97, 60, 24, 116, 63, 62, 91, 125, 152, 61, 117, 110, 164, 190, 135, 163, 69, 190, 64, 73, 19, 55, 172, 120, 18, 63, 21, 16, 147, 62, 158, 217, 150, 60, 255, 115, 213, 190, 106, 2, 122, 61, 208, 29, 37, 190, 50, 173, 84, 188, 178, 51, 146, 61, 18, 221, 191, 190, 215, 233, 199, 190, 108, 66, 38, 190, 42, 52, 169, 190, 163, 26, 29, 62, 111, 105, 75, 191, 201, 111, 172, 62, 38, 2, 70, 62, 183, 94, 130, 62, 109, 143, 129, 61, 144, 96, 247, 61, 125, 9, 90, 190, 51, 124, 134, 187, 156, 103, 89, 62, 214, 42, 35, 189, 125, 138, 65, 189, 242, 45, 134, 190, 197, 129, 77, 61, 165, 13, 222, 59, 33, 33, 153, 62, 171, 173, 232, 61, 21, 156, 97, 62, 184, 47, 220, 189, 8, 33, 244, 189, 72, 244, 51, 189, 201, 129, 212, 189, 184, 211, 23, 190, 70, 24, 26, 62, 83, 116, 147, 190, 175, 220, 63, 190, 219, 102, 186, 62, 224, 226, 48, 62, 5, 213, 196, 61, 43, 170, 104, 61, 237, 24, 151, 189, 154, 51, 15, 62, 195, 176, 35, 190, 136, 180, 57, 188, 50, 160, 223, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 188, 43, 62, 181, 190, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 214, 64, 62, 59, 214, 5, 191, 33, 7, 185, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {7, 151, 194, 63, 184, 33, 90, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}