// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 195, 218, 190, 173, 121, 20, 189, 199, 1, 229, 62, 47, 99, 58, 61, 138, 230, 197, 62, 116, 162, 229, 188, 110, 47, 94, 189, 132, 247, 6, 63, 176, 133, 143, 190, 136, 91, 51, 190, 58, 89, 245, 190, 90, 47, 59, 62, 43, 54, 108, 190, 114, 248, 5, 63, 225, 172, 252, 61, 163, 251, 167, 62, 188, 245, 10, 63, 148, 211, 123, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 86, 148, 53, 190, 200, 31, 62, 59, 4, 115, 133, 62, 8, 149, 207, 62, 4, 253, 116, 62, 109, 8, 178, 62, 128, 52, 45, 55, 82, 231, 49, 62, 107, 220, 148, 190, 182, 120, 85, 190, 61, 247, 186, 190, 27, 218, 12, 190, 247, 231, 197, 62, 12, 39, 30, 62, 194, 97, 135, 59, 89, 224, 13, 191, 249, 132, 232, 62, 130, 136, 27, 62, 158, 223, 130, 62, 133, 115, 16, 191, 4, 81, 235, 187, 203, 66, 17, 191, 12, 94, 65, 189, 164, 41, 35, 190, 192, 145, 80, 62, 215, 143, 215, 190, 151, 124, 136, 189, 68, 225, 138, 190, 252, 81, 14, 190, 221, 123, 54, 61, 144, 107, 222, 62, 156, 109, 2, 61, 144, 88, 14, 63, 192, 54, 36, 62, 145, 92, 61, 62, 110, 145, 228, 190, 94, 253, 5, 63, 225, 93, 107, 62, 80, 147, 8, 191, 129, 32, 230, 62, 182, 132, 12, 62, 76, 199, 206, 62, 44, 219, 118, 61, 202, 144, 123, 62, 72, 11, 119, 190, 53, 119, 54, 62, 207, 172, 239, 190, 136, 0, 4, 63, 186, 147, 14, 191, 246, 1, 4, 191, 194, 208, 17, 63, 110, 139, 188, 62, 13, 76, 127, 59, 165, 33, 177, 190, 69, 134, 148, 190, 146, 154, 176, 190, 67, 111, 6, 63, 2, 241, 114, 190, 56, 201, 115, 190, 14, 96, 121, 190, 11, 45, 140, 189, 139, 112, 142, 190, 10, 43, 187, 190, 86, 40, 141, 62, 96, 192, 26, 190, 192, 189, 200, 62, 26, 170, 111, 190, 98, 237, 220, 62, 18, 94, 244, 190, 1, 13, 119, 62, 253, 112, 226, 190, 127, 134, 202, 190, 217, 86, 88, 62, 167, 113, 184, 61, 169, 166, 41, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 182, 19, 191, 59, 79, 164, 62, 4, 194, 12, 188, 49, 101, 218, 189, 187, 62, 192, 190, 45, 233, 128, 190, 187, 166, 19, 191, 24, 48, 163, 190, 140, 70, 156, 190, 180, 113, 76, 62, 221, 13, 31, 62, 35, 171, 214, 189, 174, 112, 32, 62, 125, 21, 134, 190, 40, 43, 12, 63, 48, 50, 129, 190, 154, 62, 198, 188, 146, 206, 8, 63, 141, 5, 181, 62, 57, 96, 106, 62, 245, 93, 126, 190, 137, 205, 213, 62, 67, 141, 13, 63, 230, 45, 96, 62, 249, 137, 253, 190, 232, 116, 6, 63, 215, 88, 18, 63, 252, 26, 203, 62, 106, 66, 24, 62, 240, 18, 159, 190, 122, 248, 101, 61, 149, 143, 5, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 236, 39, 189, 167, 38, 6, 61, 194, 231, 201, 188, 197, 113, 3, 62, 56, 253, 209, 60, 230, 21, 36, 190, 188, 27, 9, 190, 8, 4, 106, 187, 241, 194, 183, 61, 142, 234, 16, 62, 10, 219, 44, 62, 141, 221, 47, 190, 74, 24, 173, 189, 103, 91, 137, 61, 161, 58, 201, 61, 99, 209, 90, 189, 58, 252, 31, 62, 97, 103, 51, 60, 80, 199, 41, 190, 36, 17, 241, 61, 62, 43, 34, 190, 35, 213, 17, 190, 157, 77, 200, 187, 168, 81, 22, 62, 228, 93, 210, 61, 28, 174, 142, 188, 127, 96, 112, 60, 120, 240, 31, 62, 19, 106, 18, 189, 188, 143, 185, 189, 224, 113, 130, 189, 60, 37, 112, 61, 127, 89, 229, 189, 54, 129, 26, 62, 22, 106, 14, 190, 123, 95, 242, 189, 189, 46, 65, 61, 250, 222, 96, 60, 198, 162, 35, 62, 70, 56, 52, 190, 40, 229, 10, 190, 62, 93, 105, 60, 111, 62, 9, 61, 175, 89, 124, 189, 97, 146, 196, 61, 129, 78, 182, 189, 154, 173, 5, 62, 218, 17, 167, 189, 247, 237, 120, 60, 138, 19, 186, 61, 12, 89, 62, 61, 25, 81, 74, 61, 222, 115, 141, 60, 61, 130, 110, 189, 179, 131, 248, 188, 114, 130, 24, 189, 85, 27, 190, 58, 34, 190, 150, 188, 229, 144, 184, 61, 221, 249, 212, 60, 119, 228, 46, 189, 36, 48, 168, 61, 225, 39, 245, 188, 16, 89, 11, 62, 45, 11, 43, 190, 19, 156, 15, 190, 12, 6, 128, 61, 119, 140, 4, 190, 226, 222, 243, 189, 254, 11, 6, 62, 245, 0, 37, 189, 250, 179, 245, 185, 140, 41, 201, 189, 168, 146, 217, 189, 106, 226, 156, 189, 246, 100, 38, 62, 113, 58, 30, 190, 226, 188, 40, 190, 223, 132, 255, 189, 223, 139, 58, 187, 140, 80, 227, 189, 55, 24, 245, 189, 213, 199, 102, 188, 237, 71, 17, 62, 79, 116, 20, 62, 195, 225, 196, 189, 164, 245, 158, 60, 193, 143, 26, 62, 174, 28, 177, 61, 99, 234, 159, 60, 34, 169, 19, 188, 135, 211, 27, 190, 59, 138, 118, 60, 186, 55, 234, 61, 253, 29, 28, 190, 138, 185, 38, 190, 83, 166, 204, 61, 9, 24, 180, 61, 120, 21, 195, 61, 113, 149, 152, 61, 5, 25, 207, 189, 57, 200, 206, 188, 121, 15, 184, 60, 162, 149, 246, 60, 20, 126, 8, 189, 105, 46, 24, 189, 120, 254, 134, 189, 233, 13, 27, 190, 216, 183, 47, 189, 167, 239, 253, 189, 16, 203, 192, 189, 24, 125, 107, 188, 194, 106, 187, 189, 243, 145, 181, 189, 4, 140, 40, 62, 101, 155, 49, 62, 135, 242, 0, 61, 40, 98, 39, 190, 29, 158, 44, 190, 185, 155, 40, 190, 161, 168, 245, 189, 140, 245, 65, 189, 152, 210, 150, 188, 87, 43, 151, 189, 26, 213, 41, 61, 185, 207, 114, 60, 197, 33, 51, 190, 117, 82, 46, 61, 193, 157, 130, 189, 203, 177, 135, 61, 188, 20, 226, 189, 198, 118, 214, 61, 198, 96, 154, 60, 81, 93, 103, 189, 152, 156, 120, 189, 138, 49, 245, 189, 137, 54, 243, 189, 136, 108, 4, 190, 113, 117, 36, 62, 245, 29, 214, 189, 110, 187, 103, 185, 142, 15, 51, 62, 123, 2, 25, 190, 171, 110, 146, 189, 178, 228, 204, 60, 92, 105, 11, 188, 218, 138, 51, 190, 114, 123, 187, 60, 17, 235, 169, 188, 22, 158, 218, 187, 88, 187, 94, 189, 189, 223, 209, 59, 65, 233, 41, 62, 120, 18, 129, 189, 37, 230, 31, 60, 123, 136, 175, 188, 99, 54, 16, 62, 90, 151, 140, 189, 81, 84, 252, 189, 175, 33, 43, 60, 201, 15, 13, 190, 55, 239, 39, 62, 52, 34, 165, 60, 186, 230, 183, 61, 90, 200, 0, 190, 83, 148, 51, 62, 46, 234, 250, 189, 76, 248, 67, 189, 253, 184, 12, 190, 231, 138, 147, 61, 84, 93, 216, 189, 78, 137, 117, 189, 63, 209, 255, 61, 212, 248, 195, 188, 160, 125, 149, 189, 105, 210, 231, 60, 42, 247, 173, 61, 121, 228, 217, 59, 82, 127, 20, 61, 129, 62, 28, 62, 111, 62, 1, 62, 246, 150, 241, 188, 213, 32, 228, 60, 211, 153, 140, 189, 94, 214, 26, 62, 153, 88, 141, 60, 51, 99, 157, 61, 248, 212, 156, 61, 69, 85, 232, 61, 245, 117, 126, 189, 216, 198, 160, 189, 2, 50, 36, 61, 40, 21, 30, 62, 37, 106, 213, 189, 18, 113, 219, 61, 114, 172, 18, 190, 182, 46, 177, 188, 90, 137, 121, 189, 3, 50, 209, 188, 68, 164, 173, 60, 4, 157, 7, 190, 14, 19, 14, 62, 235, 24, 34, 190, 42, 226, 231, 188, 239, 227, 17, 62, 163, 134, 217, 189, 116, 145, 55, 189, 146, 67, 37, 190, 66, 21, 244, 188, 10, 55, 13, 190, 66, 17, 250, 61, 161, 36, 41, 62, 222, 234, 112, 61, 59, 151, 108, 60, 100, 109, 37, 62, 18, 233, 239, 189, 116, 14, 212, 61, 149, 85, 120, 61, 51, 180, 45, 61, 166, 230, 24, 188, 106, 70, 4, 62, 160, 144, 4, 190, 236, 242, 3, 189, 120, 38, 7, 190, 164, 65, 103, 189, 78, 154, 240, 60, 222, 153, 140, 61, 195, 112, 25, 190, 110, 77, 145, 189, 0, 95, 214, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 163, 66, 22, 62, 103, 202, 28, 190, 147, 159, 198, 61, 205, 217, 4, 62, 169, 202, 2, 62, 145, 28, 167, 189, 248, 198, 205, 60, 22, 98, 24, 61, 124, 142, 42, 190, 92, 66, 155, 61, 93, 186, 132, 189, 48, 225, 117, 61, 126, 106, 5, 190, 139, 41, 17, 62, 220, 224, 15, 189, 254, 215, 126, 61, 124, 233, 241, 189, 10, 92, 115, 189, 141, 191, 10, 190, 30, 130, 74, 189, 164, 104, 196, 189, 128, 133, 84, 60, 2, 102, 9, 190, 161, 244, 182, 189, 59, 19, 222, 61, 206, 67, 202, 189, 22, 40, 27, 61, 32, 255, 204, 189, 46, 145, 217, 189, 56, 201, 239, 188, 136, 185, 36, 190, 28, 201, 151, 188, 168, 11, 147, 61, 85, 188, 108, 61, 238, 50, 50, 190, 188, 34, 28, 62, 123, 175, 232, 61, 101, 129, 207, 58, 34, 201, 186, 61, 239, 12, 18, 190, 209, 37, 68, 189, 127, 155, 35, 190, 132, 47, 132, 189, 252, 66, 174, 189, 83, 140, 26, 61, 184, 44, 249, 189, 70, 119, 184, 61, 95, 134, 180, 189, 20, 212, 197, 189, 36, 228, 242, 60, 254, 108, 43, 62, 15, 150, 66, 61, 226, 114, 238, 61, 69, 159, 159, 189, 75, 181, 251, 188, 96, 40, 252, 189, 220, 152, 157, 59, 105, 1, 6, 190, 84, 175, 64, 60, 177, 117, 189, 60, 75, 139, 22, 62, 243, 37, 187, 189, 31, 247, 133, 187, 140, 3, 251, 189, 16, 158, 29, 190, 112, 27, 29, 189, 181, 146, 0, 190, 213, 135, 162, 61, 228, 28, 18, 190, 215, 117, 41, 188, 105, 67, 231, 61, 66, 12, 12, 187, 191, 7, 22, 62, 2, 79, 34, 189, 74, 32, 201, 61, 79, 218, 38, 62, 168, 182, 99, 189, 3, 218, 145, 61, 212, 61, 35, 62, 88, 136, 142, 61, 120, 239, 20, 62, 30, 123, 178, 60, 245, 18, 212, 189, 68, 21, 24, 62, 251, 166, 134, 61, 126, 131, 51, 62, 199, 64, 16, 190, 198, 52, 142, 60, 99, 61, 151, 61, 242, 67, 46, 190, 210, 29, 97, 60, 240, 154, 109, 61, 85, 8, 17, 190, 42, 246, 48, 61, 132, 111, 158, 189, 105, 152, 36, 62, 183, 3, 134, 60, 243, 210, 236, 189, 44, 9, 193, 188, 86, 67, 115, 189, 253, 92, 190, 189, 43, 107, 3, 62, 28, 0, 53, 189, 142, 99, 249, 61, 255, 93, 204, 189, 2, 220, 223, 61, 241, 135, 70, 61, 43, 70, 34, 61, 190, 12, 233, 61, 49, 184, 38, 62, 153, 62, 249, 189, 224, 150, 4, 190, 173, 134, 162, 189, 35, 26, 50, 190, 133, 226, 210, 188, 112, 103, 185, 61, 125, 94, 43, 190, 21, 95, 51, 62, 237, 117, 33, 186, 11, 40, 214, 189, 11, 22, 246, 60, 233, 158, 162, 59, 91, 133, 236, 188, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 220, 72, 138, 188, 34, 182, 35, 190, 243, 180, 148, 187, 216, 129, 193, 61, 35, 194, 11, 190, 76, 137, 60, 188, 129, 250, 38, 188, 76, 193, 45, 190, 59, 26, 195, 189, 93, 147, 1, 62, 199, 18, 230, 61, 152, 252, 6, 62, 108, 209, 46, 190, 177, 172, 10, 62, 79, 45, 202, 189, 123, 215, 84, 61, 104, 178, 144, 61, 9, 172, 254, 189, 99, 66, 251, 189, 181, 10, 65, 189, 82, 245, 18, 190, 74, 21, 200, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 86, 47, 13, 190, 249, 223, 186, 189, 1, 65, 241, 61, 36, 119, 29, 189, 127, 143, 48, 62, 170, 2, 50, 190, 200, 20, 133, 61, 54, 195, 35, 60, 50, 50, 88, 61, 137, 25, 59, 61, 191, 129, 32, 62, 244, 0, 176, 61, 253, 4, 239, 61, 65, 107, 29, 60, 101, 233, 185, 189, 0, 11, 224, 189, 14, 4, 16, 190, 25, 196, 232, 61, 11, 148, 54, 189, 159, 202, 55, 60, 24, 158, 189, 61, 195, 185, 237, 61, 53, 8, 5, 187, 245, 193, 51, 190, 251, 84, 207, 60, 96, 95, 56, 61, 235, 182, 150, 189, 75, 133, 236, 189, 42, 41, 20, 188, 10, 155, 43, 61, 54, 30, 9, 190, 111, 74, 38, 190, 232, 98, 112, 61, 74, 221, 49, 189, 11, 3, 188, 189, 47, 61, 169, 188, 15, 139, 223, 188, 101, 43, 144, 189, 180, 15, 19, 190, 99, 128, 176, 188, 242, 55, 160, 189, 57, 26, 203, 60, 65, 156, 22, 190, 180, 212, 131, 61, 188, 25, 17, 59, 207, 192, 181, 61, 250, 58, 157, 189, 204, 176, 27, 62, 39, 193, 246, 189, 139, 242, 27, 62, 111, 102, 23, 190, 254, 58, 46, 190, 120, 118, 244, 189, 56, 110, 7, 190, 218, 188, 47, 189, 225, 23, 25, 62, 32, 207, 238, 60, 67, 213, 154, 189, 25, 207, 218, 60, 184, 74, 197, 189, 175, 32, 39, 190, 200, 69, 15, 62, 96, 129, 125, 61, 66, 32, 66, 61, 117, 29, 151, 60, 252, 194, 7, 189, 147, 94, 8, 62, 230, 179, 211, 189, 213, 17, 99, 60, 156, 84, 116, 189, 247, 238, 251, 61, 240, 92, 158, 189, 0, 245, 72, 61, 224, 66, 194, 61, 227, 28, 39, 61, 113, 133, 45, 62, 162, 112, 22, 62, 122, 235, 5, 189, 56, 249, 178, 189, 1, 140, 190, 189, 248, 247, 16, 61, 172, 9, 45, 62, 187, 164, 41, 188, 168, 138, 153, 189, 4, 148, 150, 60, 33, 158, 151, 189, 184, 113, 210, 189, 36, 242, 181, 61, 85, 145, 185, 61, 145, 108, 235, 61, 245, 15, 27, 190, 91, 54, 50, 190, 84, 65, 137, 189, 5, 251, 249, 60, 69, 93, 12, 190, 13, 35, 109, 189, 172, 37, 211, 188, 235, 170, 192, 189, 78, 202, 54, 189, 110, 249, 26, 190, 174, 112, 19, 190, 23, 2, 0, 62, 241, 137, 34, 190, 247, 184, 25, 62, 209, 246, 212, 61, 188, 136, 173, 61, 17, 66, 3, 59, 91, 173, 151, 61, 164, 113, 238, 189, 79, 40, 241, 61, 244, 138, 251, 189, 75, 249, 207, 61, 213, 28, 19, 62, 151, 206, 31, 62, 3, 118, 177, 189, 138, 239, 96, 189, 72, 88, 31, 62, 71, 217, 217, 61, 233, 160, 9, 190, 180, 126, 104, 189, 112, 101, 210, 189, 181, 14, 4, 62, 210, 109, 41, 190, 66, 226, 30, 190, 9, 151, 19, 61, 18, 123, 15, 189, 242, 129, 151, 189, 14, 224, 191, 61, 44, 84, 7, 62, 228, 10, 16, 62, 86, 2, 237, 188, 236, 155, 246, 189, 119, 34, 140, 189, 192, 227, 180, 61, 79, 75, 188, 189, 40, 230, 12, 62, 180, 92, 146, 187, 108, 236, 239, 189, 92, 237, 126, 187, 146, 29, 247, 60, 54, 101, 142, 187, 102, 90, 25, 62, 238, 103, 81, 61, 219, 240, 234, 61, 115, 98, 0, 62, 143, 248, 17, 60, 146, 39, 43, 190, 66, 87, 36, 62, 84, 143, 167, 61, 81, 237, 241, 61, 160, 90, 47, 190, 78, 23, 52, 190, 128, 195, 18, 190, 138, 18, 175, 189, 118, 24, 208, 61, 114, 147, 168, 61, 91, 166, 234, 188, 21, 148, 253, 61, 124, 76, 81, 188, 83, 198, 195, 189, 204, 168, 1, 190, 94, 45, 148, 189, 147, 55, 28, 190, 221, 189, 16, 189, 160, 15, 99, 61, 10, 102, 163, 61, 18, 136, 185, 189, 235, 157, 47, 190, 225, 32, 217, 61, 166, 199, 15, 189, 58, 208, 230, 61, 107, 174, 34, 190, 214, 167, 137, 189, 66, 207, 150, 189, 125, 240, 40, 62, 53, 26, 209, 189, 59, 229, 15, 62, 226, 120, 0, 61, 245, 82, 6, 60, 141, 42, 192, 189, 74, 75, 48, 190, 188, 13, 74, 189, 247, 255, 233, 58, 215, 35, 64, 189, 216, 95, 175, 60, 246, 172, 231, 189, 47, 196, 29, 62, 72, 81, 247, 59, 198, 93, 152, 189, 249, 87, 241, 61, 127, 236, 17, 188, 206, 125, 13, 190, 172, 251, 45, 62, 43, 2, 82, 189, 16, 167, 229, 189, 18, 162, 14, 62, 59, 92, 48, 62, 65, 42, 153, 61, 181, 72, 150, 61, 166, 168, 241, 61, 20, 109, 209, 61, 63, 248, 39, 61, 86, 133, 25, 62, 61, 169, 198, 188, 16, 235, 136, 61, 115, 24, 5, 61, 139, 49, 231, 189, 142, 77, 7, 190, 48, 173, 143, 189, 190, 218, 86, 60, 81, 35, 13, 62, 80, 91, 226, 60, 3, 163, 43, 190, 178, 39, 200, 60, 135, 247, 45, 62, 186, 37, 22, 61, 186, 147, 23, 190, 178, 45, 221, 61, 103, 175, 3, 189, 245, 12, 226, 189, 178, 45, 11, 58, 35, 227, 172, 61, 111, 89, 60, 187, 154, 237, 8, 62, 185, 150, 192, 61, 203, 161, 213, 61, 120, 107, 186, 189, 96, 13, 22, 189, 180, 162, 44, 190, 248, 232, 215, 189, 220, 222, 9, 62, 252, 234, 14, 62, 43, 117, 210, 189, 8, 44, 178, 188, 150, 164, 247, 60, 211, 198, 136, 60, 187, 221, 215, 189, 111, 169, 16, 62, 233, 237, 239, 189, 164, 60, 83, 189, 232, 72, 26, 62, 226, 167, 15, 62, 68, 150, 77, 188, 206, 220, 52, 62, 123, 33, 159, 61, 203, 104, 230, 189, 117, 129, 120, 189, 99, 1, 29, 189, 137, 13, 124, 189, 72, 32, 200, 189, 151, 39, 180, 189, 123, 73, 232, 61, 4, 181, 176, 189, 239, 225, 248, 61, 180, 190, 77, 188, 72, 179, 110, 60, 87, 27, 16, 189, 5, 13, 44, 190, 154, 168, 95, 189, 65, 226, 189, 61, 31, 230, 49, 190, 187, 102, 2, 62, 191, 60, 255, 189, 146, 128, 41, 190, 242, 58, 105, 61, 52, 22, 125, 189, 228, 77, 199, 189, 242, 226, 121, 189, 213, 131, 65, 189, 94, 133, 21, 61, 200, 253, 224, 61, 125, 136, 20, 62, 19, 85, 12, 62, 23, 94, 233, 189, 158, 97, 109, 61, 91, 66, 211, 57, 72, 114, 96, 61, 221, 160, 43, 189, 95, 3, 38, 61, 147, 41, 205, 189, 103, 98, 88, 189, 97, 221, 227, 189, 40, 212, 27, 189, 193, 120, 46, 62, 39, 80, 39, 190, 199, 0, 154, 189, 145, 142, 247, 61, 66, 200, 140, 61, 213, 76, 47, 190, 82, 234, 197, 58, 185, 50, 159, 189, 95, 91, 177, 189, 220, 198, 188, 61, 41, 99, 135, 189, 178, 247, 31, 62, 231, 52, 151, 61, 102, 101, 181, 189, 120, 49, 51, 190, 2, 174, 197, 61, 182, 36, 40, 62, 143, 38, 175, 189, 249, 2, 43, 62, 250, 176, 2, 189, 169, 171, 160, 61, 254, 214, 24, 62, 85, 121, 228, 61, 26, 117, 179, 61, 185, 150, 51, 62, 66, 145, 0, 61, 149, 89, 57, 61, 151, 102, 67, 61, 136, 77, 157, 189, 171, 175, 182, 189, 34, 136, 31, 190, 59, 182, 253, 59, 79, 87, 193, 60, 8, 223, 176, 188, 33, 166, 4, 190, 10, 185, 87, 59, 78, 162, 44, 62, 132, 215, 4, 62, 174, 175, 154, 188, 191, 84, 6, 62, 147, 208, 227, 60, 139, 211, 154, 187, 43, 12, 13, 62, 117, 123, 44, 189, 226, 64, 148, 61, 217, 254, 145, 61, 236, 136, 151, 189, 22, 7, 5, 190, 162, 111, 26, 62, 91, 170, 23, 62, 163, 66, 146, 189, 105, 47, 183, 60, 170, 73, 254, 58, 163, 0, 163, 61, 58, 255, 34, 190, 216, 229, 97, 61, 23, 167, 198, 189, 244, 128, 140, 188, 171, 157, 238, 189, 91, 34, 247, 61, 66, 96, 10, 62, 94, 225, 74, 189, 220, 144, 20, 62, 215, 82, 9, 189, 192, 156, 180, 61, 96, 47, 219, 61, 109, 45, 3, 190, 12, 40, 232, 61, 203, 106, 199, 189, 128, 231, 8, 190, 70, 26, 39, 62, 150, 252, 31, 62, 116, 160, 10, 61, 86, 113, 53, 189, 140, 11, 153, 61, 114, 60, 25, 62, 102, 149, 207, 189, 153, 176, 252, 189, 250, 122, 244, 189, 172, 68, 157, 61, 162, 160, 34, 62, 189, 22, 224, 189, 111, 70, 39, 190, 182, 238, 34, 190, 36, 172, 90, 61, 231, 255, 60, 189, 99, 87, 50, 190, 1, 41, 130, 189, 10, 46, 164, 189, 18, 8, 48, 61, 61, 49, 142, 187, 197, 59, 204, 189, 140, 73, 21, 62, 126, 116, 15, 62, 86, 159, 0, 190, 183, 213, 191, 188, 111, 241, 143, 189, 191, 174, 90, 189, 134, 61, 142, 59, 188, 82, 254, 61, 41, 34, 181, 61, 160, 180, 3, 62, 181, 206, 141, 61, 20, 103, 24, 190, 66, 149, 250, 187, 87, 58, 43, 62, 243, 179, 145, 188, 140, 228, 52, 190, 26, 1, 8, 62, 68, 146, 175, 189, 170, 67, 212, 189, 145, 8, 178, 58, 228, 7, 28, 190, 225, 251, 35, 190, 91, 250, 245, 61, 132, 30, 37, 190, 112, 11, 4, 190, 168, 182, 176, 60, 135, 134, 35, 62, 53, 162, 9, 62, 248, 49, 15, 62, 88, 166, 23, 190, 77, 98, 204, 188, 168, 244, 236, 187, 54, 131, 175, 61, 233, 133, 206, 188, 10, 229, 28, 190, 144, 144, 32, 62, 71, 226, 201, 188, 135, 112, 48, 62, 73, 144, 27, 189, 217, 141, 31, 190, 32, 87, 169, 187, 176, 206, 235, 61, 198, 183, 41, 62, 142, 114, 90, 189, 122, 107, 187, 189, 137, 182, 228, 189, 97, 195, 146, 61, 68, 59, 13, 190, 156, 144, 24, 190, 80, 214, 33, 62, 18, 219, 32, 58, 177, 91, 118, 61, 237, 15, 134, 61, 26, 89, 145, 189, 137, 33, 172, 61, 252, 94, 30, 62, 88, 235, 5, 61, 81, 166, 174, 61, 83, 17, 17, 189, 114, 13, 7, 62, 70, 244, 26, 190, 156, 236, 42, 190, 129, 181, 83, 61, 129, 105, 153, 60, 143, 154, 170, 61, 196, 11, 145, 187, 251, 195, 24, 190, 23, 160, 62, 61, 95, 101, 2, 62, 105, 114, 17, 62, 124, 177, 36, 61, 24, 54, 16, 62, 52, 64, 179, 189, 254, 1, 210, 61, 125, 41, 10, 190, 158, 84, 209, 60, 233, 162, 199, 189, 92, 208, 43, 61, 4, 58, 97, 60, 249, 76, 47, 62, 255, 74, 244, 59, 167, 165, 17, 62, 20, 14, 19, 62, 43, 164, 169, 189, 153, 121, 255, 61, 188, 55, 163, 187, 131, 52, 156, 61, 83, 241, 164, 189, 207, 91, 22, 62, 79, 30, 63, 61, 229, 90, 238, 60, 199, 149, 90, 61, 137, 116, 81, 189, 3, 113, 22, 61, 188, 164, 15, 187, 235, 34, 140, 189, 29, 242, 150, 61, 88, 93, 221, 189, 93, 15, 166, 189, 190, 205, 45, 62, 175, 102, 43, 190, 130, 151, 72, 59, 141, 115, 52, 190, 119, 67, 65, 189, 136, 158, 247, 59, 43, 141, 17, 189, 80, 220, 174, 189, 202, 239, 147, 61, 152, 206, 91, 189, 110, 87, 88, 188, 175, 7, 214, 61, 55, 194, 222, 187, 140, 249, 105, 189, 40, 157, 40, 190, 156, 230, 16, 62, 132, 24, 172, 189, 135, 182, 9, 62, 233, 97, 232, 60, 2, 82, 50, 62, 225, 248, 147, 61, 233, 88, 237, 189, 182, 32, 154, 189, 229, 150, 33, 62, 5, 144, 52, 190, 51, 36, 214, 189, 102, 217, 28, 62, 234, 83, 33, 62, 71, 150, 0, 62, 148, 52, 25, 62, 35, 224, 207, 61, 154, 105, 53, 61, 175, 116, 30, 62, 128, 127, 32, 60, 3, 183, 233, 189, 126, 110, 18, 61, 146, 61, 37, 62, 54, 238, 184, 186, 141, 123, 243, 187, 44, 36, 164, 189, 140, 66, 191, 59, 113, 120, 40, 62, 17, 150, 167, 188, 166, 25, 48, 190, 37, 247, 70, 189, 152, 21, 94, 189, 157, 48, 41, 190, 128, 221, 245, 189, 67, 100, 209, 60, 186, 155, 230, 60, 100, 220, 142, 61, 228, 189, 55, 60, 56, 38, 42, 61, 60, 82, 203, 189, 42, 108, 21, 190, 4, 241, 235, 61, 29, 123, 23, 190, 198, 206, 167, 189, 220, 162, 252, 188, 177, 237, 4, 188, 245, 152, 227, 61, 118, 22, 11, 189, 188, 246, 162, 189, 187, 148, 251, 61, 124, 34, 17, 190, 80, 119, 9, 62, 42, 175, 10, 190, 168, 123, 116, 189, 203, 224, 24, 190, 199, 36, 7, 189, 49, 191, 48, 62, 243, 133, 100, 61, 50, 185, 141, 61, 101, 79, 6, 190, 129, 17, 29, 189, 178, 247, 9, 61, 163, 81, 162, 61, 80, 190, 229, 189, 244, 247, 206, 61, 23, 12, 214, 60, 238, 194, 9, 61, 89, 49, 115, 189, 161, 14, 34, 190, 206, 1, 155, 189, 68, 130, 86, 60, 38, 57, 12, 62, 65, 224, 11, 190, 149, 164, 50, 190, 85, 6, 129, 189, 218, 13, 58, 61, 181, 213, 222, 61, 174, 56, 0, 62, 219, 42, 35, 62, 134, 49, 176, 189, 231, 11, 193, 61, 129, 125, 233, 188, 253, 78, 229, 60, 224, 225, 249, 189, 9, 109, 119, 189, 90, 55, 25, 62, 10, 12, 152, 189, 218, 178, 185, 189, 48, 69, 38, 189, 151, 38, 217, 61, 214, 124, 23, 62, 125, 73, 37, 190, 200, 197, 99, 189, 98, 47, 47, 190, 122, 109, 249, 61, 217, 186, 10, 190, 162, 29, 208, 189, 78, 31, 216, 61, 62, 97, 36, 190, 158, 207, 113, 188, 159, 189, 15, 62, 168, 8, 8, 189, 163, 239, 157, 61, 114, 89, 144, 188, 202, 85, 0, 62, 234, 179, 196, 189, 124, 91, 153, 61, 160, 95, 238, 189, 98, 54, 65, 188, 230, 28, 18, 62, 254, 205, 48, 60, 45, 238, 109, 187, 44, 236, 21, 62, 217, 194, 35, 189, 226, 48, 24, 62, 6, 50, 140, 61, 13, 57, 104, 61, 102, 20, 65, 61, 253, 15, 97, 189, 125, 133, 49, 188, 89, 141, 192, 189, 117, 49, 33, 190, 83, 32, 26, 189, 14, 75, 174, 61, 101, 152, 7, 190, 63, 204, 166, 61, 218, 82, 0, 190, 245, 23, 142, 189, 192, 197, 159, 189, 186, 115, 25, 62, 40, 84, 189, 189, 122, 228, 7, 62, 216, 228, 28, 190, 145, 165, 45, 62, 63, 248, 173, 61, 153, 156, 41, 61, 74, 221, 45, 62, 95, 66, 250, 61, 45, 220, 231, 188, 66, 9, 39, 190, 216, 220, 0, 190, 94, 22, 159, 189, 228, 59, 236, 61, 174, 11, 6, 62, 12, 225, 118, 189, 150, 194, 166, 189, 39, 14, 166, 61, 238, 200, 20, 62, 130, 224, 210, 60, 245, 89, 218, 189, 81, 17, 208, 189, 80, 82, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 32, 33, 190, 116, 35, 234, 60, 163, 7, 0, 188, 128, 177, 16, 61, 5, 48, 86, 61, 165, 79, 42, 190, 225, 0, 10, 190, 24, 5, 32, 189, 147, 143, 45, 190, 187, 28, 3, 62, 63, 40, 224, 61, 41, 39, 202, 189, 211, 99, 167, 189, 120, 113, 179, 61, 156, 17, 135, 187, 200, 63, 110, 189, 70, 240, 193, 189, 161, 7, 178, 189, 113, 99, 48, 190, 254, 151, 0, 190, 88, 230, 24, 190, 204, 225, 156, 189, 21, 175, 163, 61, 138, 199, 149, 61, 170, 134, 16, 62, 255, 146, 241, 61, 148, 191, 217, 61, 143, 156, 164, 61, 6, 107, 205, 188, 153, 74, 35, 190, 206, 229, 3, 190, 12, 83, 201, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 50, 166, 189, 97, 94, 193, 61, 166, 245, 15, 62, 52, 154, 192, 60, 255, 183, 251, 189, 213, 33, 147, 61, 19, 212, 123, 61, 213, 176, 237, 189, 255, 202, 133, 189, 139, 229, 34, 62, 150, 82, 135, 61, 245, 178, 161, 60, 132, 63, 234, 61, 94, 85, 199, 61, 232, 226, 88, 189, 252, 242, 75, 189, 206, 227, 10, 59, 198, 62, 184, 189, 112, 178, 6, 62, 68, 233, 200, 60, 203, 84, 62, 189, 122, 165, 153, 60, 43, 128, 18, 190, 27, 84, 56, 188, 127, 67, 130, 61, 19, 25, 6, 190, 227, 7, 187, 189, 186, 40, 207, 189, 109, 126, 51, 190, 5, 0, 230, 61, 45, 108, 237, 189, 226, 242, 105, 60, 91, 194, 38, 62, 88, 132, 52, 62, 96, 166, 129, 61, 62, 144, 10, 62, 245, 204, 30, 190, 247, 54, 76, 188, 108, 23, 46, 62, 136, 85, 35, 189, 233, 32, 8, 62, 192, 112, 43, 190, 150, 232, 132, 61, 251, 67, 242, 59, 176, 231, 38, 62, 236, 246, 194, 61, 199, 107, 31, 62, 117, 53, 109, 189, 81, 116, 194, 57, 239, 132, 5, 190, 39, 195, 14, 190, 82, 242, 47, 190, 140, 63, 249, 186, 202, 2, 16, 190, 108, 171, 34, 190, 226, 90, 255, 61, 213, 27, 145, 61, 232, 214, 149, 61, 89, 175, 175, 59, 18, 242, 58, 189, 206, 173, 250, 61, 220, 41, 245, 189, 41, 127, 2, 62, 179, 36, 224, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 100, 20, 62, 239, 182, 151, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 247, 131, 190, 142, 180, 47, 191, 146, 46, 192, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 53, 74, 61, 98, 140, 189, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}