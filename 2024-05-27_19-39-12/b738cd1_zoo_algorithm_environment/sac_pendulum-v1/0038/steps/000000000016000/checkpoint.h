// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 215, 165, 187, 135, 209, 183, 62, 211, 228, 222, 62, 160, 13, 66, 62, 103, 125, 251, 62, 232, 19, 3, 191, 215, 71, 1, 61, 146, 216, 49, 63, 21, 8, 40, 191, 151, 254, 196, 61, 143, 228, 151, 62, 42, 240, 245, 62, 162, 221, 157, 190, 7, 141, 73, 63, 236, 229, 206, 190, 143, 169, 131, 61, 251, 65, 129, 63, 64, 67, 196, 190, 196, 136, 109, 61, 226, 221, 204, 61, 199, 224, 86, 59, 12, 117, 174, 62, 21, 217, 15, 62, 99, 36, 75, 62, 19, 214, 73, 63, 116, 132, 135, 63, 251, 31, 159, 62, 253, 48, 176, 190, 105, 89, 183, 191, 157, 73, 137, 190, 214, 2, 173, 190, 56, 248, 235, 190, 41, 177, 196, 61, 11, 103, 97, 62, 227, 127, 89, 63, 162, 140, 105, 61, 30, 91, 104, 191, 133, 160, 43, 63, 46, 233, 32, 61, 207, 127, 149, 190, 64, 58, 32, 191, 98, 28, 118, 61, 194, 177, 111, 191, 133, 140, 3, 191, 226, 20, 113, 189, 112, 37, 169, 62, 123, 252, 158, 191, 222, 179, 130, 190, 220, 79, 66, 190, 171, 61, 43, 63, 156, 236, 173, 62, 205, 242, 152, 63, 185, 15, 48, 63, 174, 67, 204, 62, 195, 192, 109, 189, 124, 221, 124, 191, 0, 79, 223, 190, 7, 4, 38, 63, 68, 49, 196, 189, 187, 234, 62, 191, 169, 76, 34, 63, 219, 118, 31, 63, 153, 102, 174, 62, 81, 108, 146, 62, 57, 196, 8, 63, 221, 117, 222, 190, 139, 189, 164, 62, 110, 65, 175, 190, 60, 185, 208, 62, 32, 185, 81, 190, 13, 111, 83, 63, 33, 51, 15, 63, 243, 225, 56, 63, 28, 39, 202, 60, 16, 95, 232, 190, 48, 201, 210, 189, 85, 70, 162, 63, 141, 163, 242, 62, 110, 164, 224, 190, 103, 191, 21, 191, 104, 125, 5, 190, 247, 87, 20, 191, 226, 97, 36, 191, 90, 79, 74, 190, 219, 233, 77, 63, 217, 85, 100, 189, 7, 108, 172, 62, 119, 46, 56, 191, 50, 54, 79, 191, 164, 166, 4, 191, 181, 45, 246, 62, 237, 235, 193, 191, 14, 30, 173, 190, 179, 45, 250, 62, 128, 92, 181, 190, 54, 92, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 194, 133, 191, 222, 195, 0, 62, 64, 247, 81, 61, 104, 156, 130, 189, 111, 146, 186, 190, 171, 176, 72, 62, 187, 166, 19, 191, 23, 187, 61, 191, 93, 125, 168, 190, 6, 87, 64, 190, 36, 85, 254, 61, 161, 92, 17, 63, 113, 21, 192, 62, 211, 254, 179, 190, 208, 247, 75, 63, 12, 144, 213, 61, 28, 29, 138, 189, 162, 234, 144, 62, 139, 176, 28, 62, 145, 125, 161, 61, 241, 115, 182, 190, 136, 188, 181, 62, 82, 26, 3, 63, 113, 251, 88, 189, 3, 10, 21, 191, 217, 247, 2, 62, 193, 10, 65, 63, 184, 183, 17, 63, 224, 75, 59, 190, 163, 148, 152, 190, 181, 155, 30, 187, 212, 89, 18, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 50, 174, 60, 171, 225, 103, 62, 61, 73, 73, 190, 205, 4, 4, 62, 55, 251, 201, 62, 218, 203, 106, 62, 188, 27, 9, 190, 154, 70, 84, 61, 193, 0, 166, 62, 251, 124, 192, 189, 14, 150, 246, 61, 56, 99, 140, 62, 243, 145, 54, 188, 150, 85, 253, 188, 131, 54, 205, 189, 10, 157, 187, 190, 122, 35, 49, 62, 158, 62, 242, 61, 200, 70, 211, 190, 95, 92, 10, 62, 68, 102, 180, 189, 171, 35, 151, 189, 148, 94, 117, 61, 82, 11, 20, 62, 22, 29, 12, 62, 248, 115, 186, 60, 243, 4, 137, 189, 170, 203, 68, 190, 2, 80, 242, 60, 255, 2, 2, 191, 24, 195, 216, 190, 7, 146, 48, 190, 138, 65, 155, 190, 10, 131, 95, 190, 65, 145, 10, 191, 117, 123, 106, 62, 108, 50, 134, 191, 123, 69, 133, 62, 198, 162, 35, 62, 77, 37, 245, 190, 208, 160, 58, 191, 210, 65, 25, 191, 204, 57, 44, 62, 127, 50, 158, 62, 157, 199, 7, 62, 166, 112, 25, 190, 28, 123, 116, 61, 245, 165, 193, 62, 42, 32, 174, 62, 167, 165, 227, 189, 153, 179, 33, 190, 104, 194, 155, 61, 214, 13, 186, 190, 209, 174, 133, 190, 105, 91, 160, 61, 249, 156, 53, 62, 110, 92, 222, 62, 115, 118, 7, 62, 166, 89, 119, 61, 142, 26, 174, 189, 40, 30, 134, 190, 77, 114, 4, 191, 53, 205, 128, 62, 236, 133, 138, 62, 143, 22, 44, 190, 255, 60, 50, 190, 1, 153, 63, 61, 138, 240, 7, 190, 58, 192, 9, 190, 91, 149, 214, 61, 245, 0, 37, 189, 150, 153, 209, 186, 227, 224, 17, 190, 59, 72, 1, 190, 157, 203, 224, 189, 101, 186, 221, 61, 73, 14, 67, 190, 45, 15, 47, 190, 129, 104, 29, 190, 163, 232, 160, 187, 49, 177, 238, 189, 239, 79, 46, 190, 222, 110, 14, 189, 72, 53, 5, 62, 242, 186, 211, 61, 17, 213, 1, 190, 135, 102, 1, 189, 14, 162, 1, 62, 175, 194, 149, 61, 200, 58, 155, 188, 223, 96, 46, 189, 182, 93, 60, 190, 143, 157, 17, 189, 177, 110, 202, 61, 145, 108, 47, 190, 202, 17, 53, 190, 83, 166, 204, 61, 104, 78, 129, 61, 194, 115, 150, 61, 113, 149, 152, 61, 133, 79, 209, 189, 132, 103, 65, 189, 121, 15, 184, 60, 162, 149, 246, 60, 48, 243, 38, 189, 201, 16, 110, 189, 132, 250, 157, 189, 26, 17, 51, 190, 192, 95, 143, 189, 167, 239, 253, 189, 193, 80, 238, 189, 24, 125, 107, 188, 194, 106, 187, 189, 184, 168, 206, 189, 179, 23, 19, 62, 126, 7, 28, 62, 92, 107, 196, 60, 121, 175, 62, 190, 126, 72, 53, 190, 185, 155, 40, 190, 186, 196, 7, 190, 47, 237, 92, 189, 104, 63, 32, 189, 36, 34, 190, 189, 39, 232, 9, 61, 208, 148, 114, 187, 242, 104, 66, 190, 96, 126, 3, 61, 142, 105, 9, 62, 42, 75, 155, 62, 38, 19, 169, 61, 225, 240, 228, 61, 201, 251, 158, 62, 41, 66, 200, 188, 152, 156, 120, 189, 231, 27, 115, 61, 93, 8, 138, 61, 101, 206, 25, 191, 64, 43, 28, 190, 20, 44, 11, 62, 97, 186, 139, 190, 57, 200, 173, 62, 63, 162, 57, 191, 235, 148, 7, 191, 163, 156, 230, 189, 78, 197, 129, 62, 30, 39, 223, 190, 64, 155, 193, 61, 119, 70, 0, 62, 20, 238, 44, 62, 57, 138, 238, 61, 103, 120, 180, 188, 54, 207, 73, 62, 69, 130, 163, 189, 176, 132, 164, 190, 238, 249, 111, 191, 77, 139, 207, 62, 109, 5, 178, 190, 170, 225, 165, 190, 207, 251, 72, 190, 20, 89, 196, 190, 241, 22, 127, 61, 84, 58, 7, 190, 197, 171, 97, 62, 138, 6, 27, 191, 221, 203, 113, 62, 46, 234, 250, 189, 99, 156, 217, 190, 230, 65, 27, 191, 234, 125, 18, 191, 129, 227, 149, 188, 222, 121, 128, 61, 95, 28, 39, 62, 48, 251, 158, 188, 88, 171, 148, 189, 198, 230, 124, 62, 221, 234, 170, 62, 25, 211, 0, 190, 140, 9, 50, 190, 249, 59, 69, 62, 152, 169, 119, 189, 156, 232, 202, 189, 53, 0, 213, 61, 157, 165, 197, 61, 196, 125, 209, 62, 198, 110, 250, 61, 145, 66, 50, 60, 149, 57, 26, 189, 55, 188, 138, 187, 45, 205, 145, 190, 201, 37, 18, 61, 138, 8, 48, 62, 179, 106, 44, 62, 127, 59, 207, 60, 32, 77, 114, 62, 61, 53, 133, 61, 71, 108, 154, 62, 204, 194, 180, 61, 3, 50, 209, 188, 82, 178, 214, 60, 198, 164, 215, 190, 108, 137, 170, 189, 190, 144, 53, 190, 54, 27, 57, 62, 128, 239, 132, 62, 181, 21, 8, 191, 192, 170, 139, 190, 205, 181, 138, 60, 21, 41, 54, 191, 54, 96, 142, 190, 253, 133, 227, 61, 245, 244, 127, 62, 194, 245, 188, 189, 66, 104, 35, 62, 131, 102, 37, 62, 212, 37, 18, 191, 44, 34, 80, 62, 86, 52, 51, 190, 213, 175, 187, 189, 238, 214, 15, 190, 61, 222, 210, 61, 111, 39, 14, 190, 190, 117, 19, 60, 55, 194, 164, 188, 164, 65, 103, 189, 142, 199, 86, 60, 163, 55, 87, 61, 195, 112, 25, 190, 193, 191, 159, 189, 167, 112, 181, 61, 14, 212, 19, 189, 163, 100, 241, 61, 126, 136, 49, 61, 64, 213, 14, 62, 103, 202, 28, 190, 193, 51, 179, 61, 235, 186, 245, 61, 169, 202, 2, 62, 227, 92, 179, 189, 248, 198, 205, 60, 22, 98, 24, 61, 169, 245, 42, 190, 120, 245, 133, 61, 86, 252, 168, 189, 48, 225, 117, 61, 19, 178, 24, 190, 139, 41, 17, 62, 220, 224, 15, 189, 104, 36, 119, 61, 124, 233, 241, 189, 110, 184, 132, 189, 214, 155, 15, 190, 30, 130, 74, 189, 135, 127, 213, 189, 245, 249, 34, 60, 187, 192, 9, 190, 4, 63, 2, 190, 255, 73, 187, 60, 76, 82, 212, 60, 211, 109, 234, 190, 105, 94, 21, 59, 77, 70, 212, 190, 56, 201, 239, 188, 191, 60, 55, 190, 42, 20, 23, 62, 190, 168, 7, 62, 170, 119, 84, 62, 148, 53, 96, 191, 181, 38, 186, 62, 47, 172, 41, 62, 0, 196, 47, 62, 20, 126, 92, 190, 137, 7, 163, 191, 245, 63, 126, 189, 168, 69, 233, 189, 62, 169, 77, 190, 216, 236, 42, 60, 59, 87, 196, 60, 166, 188, 142, 190, 118, 72, 155, 190, 17, 41, 165, 190, 128, 115, 96, 191, 200, 255, 17, 62, 251, 3, 129, 62, 230, 186, 7, 187, 199, 216, 58, 62, 132, 100, 127, 190, 131, 29, 73, 190, 193, 11, 150, 190, 16, 123, 147, 61, 23, 22, 12, 190, 22, 138, 17, 61, 230, 79, 62, 190, 4, 199, 79, 62, 243, 37, 187, 189, 249, 97, 45, 190, 0, 99, 164, 190, 52, 23, 36, 191, 184, 137, 31, 61, 125, 13, 6, 62, 4, 134, 190, 189, 214, 217, 254, 189, 81, 90, 176, 189, 164, 63, 70, 62, 182, 136, 51, 61, 115, 43, 34, 62, 64, 83, 81, 190, 180, 111, 70, 62, 242, 18, 182, 61, 157, 34, 117, 61, 240, 229, 186, 61, 146, 97, 58, 62, 58, 232, 66, 62, 196, 3, 41, 62, 198, 170, 246, 187, 241, 131, 94, 190, 193, 142, 2, 62, 87, 143, 41, 190, 85, 235, 110, 62, 255, 196, 54, 190, 140, 33, 198, 189, 18, 124, 87, 61, 180, 80, 65, 190, 104, 210, 230, 188, 186, 126, 76, 190, 229, 220, 70, 190, 42, 246, 48, 61, 45, 97, 31, 190, 102, 157, 182, 190, 98, 139, 136, 190, 142, 93, 51, 62, 231, 74, 195, 61, 97, 173, 183, 190, 183, 67, 181, 62, 198, 241, 22, 62, 128, 224, 243, 61, 144, 78, 236, 189, 40, 221, 2, 190, 220, 222, 44, 62, 148, 131, 67, 62, 165, 121, 38, 190, 82, 113, 217, 61, 225, 227, 131, 62, 47, 93, 61, 190, 102, 204, 122, 62, 22, 1, 151, 190, 59, 243, 211, 188, 70, 181, 72, 62, 253, 184, 1, 62, 223, 73, 173, 190, 135, 102, 162, 62, 245, 215, 125, 189, 60, 213, 218, 189, 11, 22, 246, 60, 233, 158, 162, 59, 250, 119, 14, 189, 159, 59, 50, 62, 232, 4, 82, 61, 49, 213, 31, 62, 9, 233, 149, 188, 84, 225, 40, 190, 243, 180, 148, 187, 78, 12, 187, 61, 178, 44, 12, 190, 206, 50, 58, 188, 77, 174, 88, 188, 8, 250, 45, 190, 94, 97, 198, 189, 183, 152, 253, 61, 200, 67, 202, 61, 152, 252, 6, 62, 108, 209, 46, 190, 195, 207, 3, 62, 79, 45, 202, 189, 173, 254, 28, 61, 6, 242, 125, 61, 9, 172, 254, 189, 116, 100, 7, 190, 75, 177, 74, 189, 54, 80, 19, 190, 74, 125, 218, 189, 25, 153, 182, 189, 44, 181, 14, 190, 14, 157, 141, 60, 121, 236, 48, 188, 132, 179, 84, 62, 132, 81, 73, 62, 167, 207, 32, 188, 225, 181, 230, 62, 164, 189, 7, 63, 200, 20, 133, 61, 89, 218, 171, 62, 160, 42, 158, 62, 209, 23, 56, 189, 7, 180, 178, 189, 49, 121, 231, 61, 167, 102, 25, 189, 76, 84, 191, 60, 34, 20, 49, 191, 8, 253, 129, 191, 91, 12, 248, 189, 23, 113, 64, 62, 152, 156, 3, 191, 53, 153, 233, 190, 42, 113, 169, 62, 255, 19, 208, 62, 57, 232, 145, 188, 32, 182, 208, 189, 60, 65, 106, 191, 55, 2, 32, 62, 188, 181, 171, 191, 148, 50, 186, 190, 102, 252, 163, 61, 31, 156, 132, 62, 163, 120, 150, 191, 208, 87, 127, 191, 7, 41, 28, 62, 56, 36, 245, 189, 20, 17, 20, 190, 30, 103, 208, 60, 92, 196, 139, 189, 242, 5, 132, 189, 180, 15, 19, 190, 144, 71, 62, 62, 224, 18, 12, 58, 100, 11, 200, 60, 52, 56, 145, 190, 132, 148, 220, 60, 60, 12, 59, 190, 31, 122, 36, 61, 24, 97, 194, 190, 4, 68, 78, 189, 78, 109, 26, 190, 168, 99, 49, 62, 235, 136, 57, 190, 144, 204, 149, 190, 254, 46, 161, 188, 154, 253, 162, 190, 204, 190, 194, 188, 80, 71, 29, 62, 32, 207, 238, 60, 167, 26, 210, 189, 193, 41, 177, 190, 132, 225, 134, 190, 32, 145, 191, 189, 200, 69, 15, 62, 250, 115, 112, 189, 66, 32, 66, 61, 135, 115, 3, 62, 86, 183, 28, 62, 22, 155, 162, 62, 239, 30, 95, 190, 238, 219, 22, 62, 234, 101, 219, 189, 247, 238, 251, 61, 240, 254, 134, 61, 150, 222, 181, 62, 201, 159, 3, 63, 229, 138, 242, 61, 252, 103, 11, 63, 208, 48, 184, 61, 166, 211, 102, 189, 15, 19, 20, 190, 67, 138, 70, 191, 178, 152, 35, 190, 215, 203, 194, 62, 238, 196, 34, 62, 182, 153, 138, 190, 111, 81, 113, 62, 83, 49, 29, 62, 1, 187, 137, 189, 178, 128, 84, 189, 142, 185, 188, 190, 27, 202, 189, 60, 0, 32, 149, 189, 9, 24, 213, 189, 250, 186, 17, 62, 33, 168, 58, 62, 48, 121, 5, 191, 247, 103, 51, 191, 115, 136, 68, 62, 61, 71, 241, 60, 24, 160, 122, 62, 19, 173, 140, 190, 248, 230, 68, 188, 205, 99, 165, 61, 241, 137, 34, 190, 173, 99, 179, 62, 199, 193, 145, 62, 0, 10, 189, 62, 101, 90, 2, 190, 228, 226, 80, 188, 101, 187, 194, 189, 113, 65, 133, 62, 71, 111, 6, 62, 188, 108, 153, 190, 59, 224, 233, 189, 221, 41, 174, 62, 34, 87, 134, 188, 161, 216, 5, 190, 153, 70, 151, 62, 67, 96, 149, 62, 91, 176, 1, 190, 194, 251, 38, 190, 113, 171, 227, 190, 129, 227, 132, 61, 127, 49, 49, 189, 178, 146, 0, 190, 61, 117, 110, 62, 120, 9, 81, 62, 120, 166, 164, 190, 34, 7, 109, 190, 154, 203, 236, 188, 85, 197, 176, 190, 253, 220, 0, 191, 3, 92, 129, 189, 229, 67, 205, 190, 121, 60, 19, 191, 79, 75, 188, 189, 185, 180, 254, 60, 94, 0, 36, 190, 235, 166, 8, 190, 161, 65, 70, 60, 11, 54, 240, 60, 59, 212, 45, 190, 17, 172, 45, 62, 47, 41, 31, 62, 233, 1, 26, 62, 180, 123, 174, 183, 218, 28, 23, 62, 214, 204, 147, 190, 140, 229, 137, 189, 111, 199, 26, 61, 92, 141, 97, 190, 168, 144, 54, 189, 102, 70, 65, 190, 38, 151, 66, 191, 110, 227, 254, 189, 215, 156, 113, 62, 29, 228, 53, 62, 78, 225, 198, 61, 202, 138, 63, 62, 43, 168, 144, 59, 236, 234, 189, 190, 13, 155, 204, 190, 179, 120, 42, 190, 120, 50, 145, 190, 39, 140, 18, 62, 112, 8, 74, 190, 247, 131, 37, 63, 18, 136, 185, 189, 69, 175, 5, 191, 177, 90, 189, 190, 188, 173, 232, 191, 200, 144, 211, 61, 110, 178, 50, 62, 223, 236, 1, 62, 212, 227, 240, 189, 78, 120, 1, 62, 71, 14, 217, 62, 26, 24, 136, 62, 55, 134, 49, 188, 204, 163, 215, 190, 143, 76, 61, 62, 0, 76, 206, 190, 121, 117, 226, 188, 133, 147, 31, 62, 179, 203, 20, 62, 18, 154, 35, 61, 229, 77, 240, 60, 50, 55, 198, 61, 160, 176, 171, 189, 190, 36, 47, 190, 235, 219, 31, 191, 62, 125, 168, 62, 25, 238, 115, 61, 4, 255, 144, 188, 81, 130, 199, 190, 175, 9, 177, 191, 209, 92, 24, 62, 34, 116, 94, 190, 100, 92, 11, 62, 181, 72, 150, 61, 177, 166, 129, 189, 222, 244, 252, 189, 171, 165, 158, 191, 155, 24, 137, 62, 14, 145, 161, 62, 126, 135, 67, 62, 102, 85, 13, 190, 18, 199, 19, 59, 234, 236, 250, 61, 108, 197, 14, 189, 206, 214, 228, 60, 245, 3, 110, 190, 162, 167, 186, 60, 201, 190, 123, 190, 220, 166, 104, 190, 167, 204, 87, 62, 149, 69, 182, 61, 4, 234, 59, 191, 56, 61, 38, 62, 153, 175, 189, 61, 179, 144, 150, 61, 227, 39, 26, 60, 127, 144, 216, 190, 25, 158, 76, 62, 136, 176, 137, 190, 14, 187, 164, 61, 13, 200, 231, 61, 192, 11, 206, 189, 251, 101, 57, 189, 180, 162, 44, 190, 146, 189, 236, 189, 220, 222, 9, 62, 121, 2, 8, 62, 120, 23, 232, 189, 169, 9, 4, 189, 132, 204, 136, 60, 123, 225, 160, 60, 40, 28, 183, 189, 160, 58, 22, 62, 172, 155, 253, 189, 62, 149, 114, 189, 66, 131, 37, 62, 84, 47, 5, 62, 46, 186, 191, 188, 156, 172, 40, 62, 13, 198, 135, 61, 42, 169, 243, 189, 9, 200, 152, 189, 198, 57, 119, 189, 116, 103, 167, 189, 50, 182, 6, 190, 44, 122, 198, 189, 142, 2, 209, 61, 158, 31, 223, 189, 149, 47, 219, 61, 253, 78, 229, 188, 129, 217, 159, 188, 201, 251, 208, 60, 53, 159, 19, 190, 67, 147, 39, 191, 70, 48, 213, 62, 196, 199, 137, 190, 99, 118, 16, 61, 191, 60, 255, 189, 162, 72, 12, 190, 12, 221, 186, 61, 181, 72, 236, 189, 91, 60, 142, 61, 191, 151, 125, 190, 86, 245, 12, 190, 79, 29, 88, 61, 226, 210, 17, 62, 33, 124, 179, 62, 207, 200, 8, 63, 205, 196, 128, 190, 216, 176, 98, 62, 79, 140, 182, 62, 176, 49, 116, 189, 46, 98, 72, 61, 72, 135, 57, 62, 82, 28, 194, 61, 190, 236, 133, 62, 4, 135, 161, 61, 238, 86, 5, 61, 170, 45, 56, 62, 126, 113, 151, 190, 194, 27, 254, 190, 220, 218, 150, 62, 52, 89, 236, 62, 149, 182, 209, 190, 138, 35, 158, 61, 87, 215, 90, 189, 251, 65, 223, 60, 38, 243, 142, 190, 98, 181, 174, 189, 178, 247, 31, 62, 135, 4, 4, 190, 159, 117, 128, 189, 174, 139, 177, 190, 10, 62, 42, 62, 203, 56, 24, 63, 202, 28, 62, 190, 223, 121, 154, 62, 114, 223, 169, 60, 227, 54, 47, 62, 72, 28, 150, 62, 62, 230, 133, 62, 208, 107, 36, 61, 108, 51, 163, 62, 117, 212, 6, 62, 180, 16, 35, 62, 58, 114, 37, 62, 48, 234, 5, 188, 254, 43, 72, 60, 43, 252, 85, 189, 39, 101, 241, 61, 62, 204, 195, 61, 19, 116, 135, 61, 13, 52, 91, 190, 27, 148, 231, 61, 255, 172, 58, 62, 110, 228, 57, 62, 211, 236, 254, 61, 65, 9, 154, 62, 184, 245, 220, 189, 105, 113, 3, 61, 61, 141, 82, 59, 117, 123, 44, 189, 146, 16, 219, 61, 67, 72, 128, 62, 240, 224, 193, 62, 224, 32, 36, 190, 124, 159, 65, 62, 241, 167, 168, 62, 31, 122, 101, 61, 205, 114, 147, 62, 163, 33, 163, 188, 66, 52, 167, 189, 92, 215, 145, 189, 120, 43, 140, 62, 9, 198, 136, 189, 55, 94, 134, 60, 13, 40, 222, 188, 65, 136, 209, 61, 181, 93, 134, 61, 5, 241, 18, 190, 24, 0, 245, 61, 132, 114, 100, 62, 142, 198, 162, 62, 197, 78, 14, 62, 47, 129, 167, 61, 24, 184, 48, 62, 15, 31, 3, 190, 7, 2, 150, 190, 177, 216, 0, 60, 140, 134, 132, 61, 217, 178, 160, 59, 226, 187, 184, 61, 234, 238, 251, 60, 114, 60, 25, 62, 102, 127, 134, 190, 167, 35, 197, 190, 247, 163, 23, 191, 245, 187, 160, 62, 187, 197, 126, 61, 144, 88, 46, 191, 126, 14, 15, 62, 77, 44, 253, 190, 197, 32, 182, 62, 238, 232, 156, 189, 137, 234, 46, 190, 211, 138, 125, 189, 115, 125, 97, 188, 124, 27, 38, 190, 85, 190, 151, 189, 251, 170, 184, 62, 98, 44, 26, 62, 220, 21, 162, 62, 76, 218, 145, 190, 14, 4, 22, 190, 186, 161, 92, 190, 199, 57, 166, 61, 60, 110, 53, 189, 36, 200, 156, 62, 77, 255, 154, 62, 108, 7, 155, 62, 4, 105, 33, 191, 119, 52, 87, 61, 208, 139, 226, 61, 168, 253, 185, 61, 29, 32, 73, 191, 140, 228, 52, 190, 51, 101, 180, 62, 125, 119, 164, 62, 75, 56, 118, 190, 101, 135, 26, 190, 2, 35, 91, 190, 179, 189, 33, 191, 110, 65, 240, 59, 6, 162, 138, 191, 208, 176, 147, 190, 59, 184, 107, 187, 194, 76, 203, 62, 18, 110, 11, 190, 245, 83, 11, 62, 28, 138, 34, 62, 129, 156, 162, 190, 236, 247, 225, 61, 70, 162, 203, 61, 96, 115, 6, 191, 155, 70, 194, 189, 54, 236, 230, 190, 183, 225, 147, 191, 129, 185, 213, 62, 209, 146, 99, 189, 131, 177, 178, 190, 227, 96, 138, 188, 86, 118, 178, 62, 212, 205, 169, 62, 82, 19, 210, 61, 227, 227, 103, 190, 51, 173, 41, 62, 201, 253, 132, 61, 68, 59, 13, 190, 109, 28, 166, 61, 126, 136, 0, 63, 162, 64, 49, 190, 63, 144, 103, 61, 13, 85, 61, 62, 180, 48, 131, 189, 244, 167, 95, 62, 215, 7, 181, 188, 250, 91, 116, 191, 77, 99, 119, 190, 137, 85, 32, 62, 239, 243, 52, 189, 65, 58, 166, 190, 99, 33, 169, 61, 156, 154, 5, 62, 180, 67, 249, 60, 21, 254, 158, 189, 130, 36, 219, 189, 40, 146, 140, 190, 7, 17, 65, 189, 117, 201, 245, 189, 106, 142, 177, 62, 153, 45, 80, 190, 9, 130, 206, 190, 155, 48, 204, 190, 180, 49, 237, 189, 141, 207, 197, 61, 20, 6, 131, 62, 239, 12, 58, 191, 20, 75, 130, 62, 148, 244, 191, 189, 249, 76, 47, 62, 216, 102, 49, 61, 230, 61, 90, 62, 138, 149, 171, 62, 221, 46, 180, 189, 253, 94, 173, 62, 20, 242, 187, 62, 138, 95, 195, 61, 69, 20, 115, 62, 204, 1, 221, 190, 190, 154, 73, 191, 73, 110, 73, 62, 147, 175, 185, 60, 33, 70, 109, 190, 134, 68, 13, 61, 127, 66, 93, 62, 150, 140, 238, 188, 152, 89, 247, 190, 133, 97, 22, 191, 129, 117, 220, 190, 255, 165, 201, 62, 63, 199, 94, 60, 200, 55, 34, 62, 14, 151, 178, 189, 117, 47, 243, 190, 20, 141, 18, 191, 184, 54, 23, 190, 237, 193, 14, 60, 62, 78, 66, 62, 50, 56, 82, 191, 137, 28, 252, 61, 154, 26, 201, 186, 55, 194, 222, 187, 198, 41, 252, 188, 3, 197, 228, 189, 190, 202, 193, 62, 63, 64, 43, 191, 62, 66, 216, 61, 87, 122, 101, 62, 211, 242, 75, 189, 132, 175, 42, 62, 45, 193, 7, 191, 124, 54, 58, 191, 58, 130, 102, 62, 78, 54, 54, 190, 160, 74, 120, 190, 69, 54, 168, 61, 74, 42, 20, 62, 220, 142, 126, 188, 226, 169, 142, 190, 80, 88, 9, 190, 87, 117, 5, 190, 242, 189, 192, 61, 28, 240, 67, 59, 151, 101, 214, 189, 188, 136, 86, 62, 166, 187, 217, 189, 130, 173, 97, 190, 136, 215, 100, 62, 252, 255, 74, 62, 12, 240, 149, 62, 117, 93, 230, 59, 175, 7, 90, 62, 178, 208, 80, 190, 37, 247, 70, 189, 135, 104, 24, 62, 11, 39, 13, 62, 219, 68, 167, 60, 167, 114, 63, 59, 114, 58, 73, 62, 202, 239, 189, 61, 224, 154, 18, 62, 154, 116, 50, 59, 171, 31, 36, 191, 123, 150, 223, 190, 88, 142, 142, 62, 122, 221, 58, 190, 59, 20, 14, 190, 95, 49, 49, 62, 189, 158, 134, 62, 185, 204, 160, 61, 57, 174, 93, 190, 26, 123, 181, 190, 5, 205, 185, 188, 176, 151, 18, 190, 85, 224, 234, 60, 20, 191, 52, 61, 19, 252, 42, 189, 97, 157, 2, 191, 96, 119, 4, 191, 234, 43, 140, 61, 223, 193, 185, 62, 55, 123, 3, 62, 56, 149, 159, 189, 187, 13, 141, 61, 49, 77, 204, 61, 163, 81, 162, 61, 211, 2, 185, 189, 185, 254, 235, 190, 185, 220, 254, 190, 35, 42, 170, 62, 235, 49, 146, 62, 241, 116, 255, 190, 52, 237, 20, 62, 172, 248, 117, 190, 200, 199, 55, 62, 155, 217, 47, 190, 68, 216, 53, 189, 14, 155, 86, 190, 96, 153, 148, 61, 233, 180, 170, 60, 61, 224, 168, 62, 82, 100, 180, 62, 70, 25, 156, 190, 10, 152, 12, 62, 180, 212, 231, 189, 92, 99, 161, 189, 167, 93, 173, 190, 160, 102, 80, 62, 99, 84, 161, 189, 83, 226, 212, 189, 39, 107, 80, 190, 109, 222, 190, 189, 7, 120, 143, 189, 183, 171, 110, 62, 8, 170, 252, 190, 27, 122, 173, 61, 190, 159, 35, 191, 122, 109, 249, 61, 119, 14, 22, 190, 239, 110, 118, 189, 29, 206, 82, 189, 107, 50, 38, 61, 59, 173, 142, 191, 83, 166, 139, 62, 159, 156, 238, 60, 38, 174, 27, 62, 50, 10, 24, 191, 45, 88, 118, 191, 15, 222, 70, 190, 100, 108, 219, 189, 76, 166, 19, 191, 197, 160, 165, 61, 200, 55, 209, 60, 201, 23, 195, 60, 200, 27, 211, 190, 198, 111, 28, 60, 149, 210, 102, 191, 11, 181, 55, 62, 102, 53, 165, 61, 199, 74, 160, 61, 77, 71, 116, 190, 199, 102, 16, 191, 248, 42, 16, 190, 215, 152, 131, 190, 98, 144, 59, 191, 206, 119, 242, 191, 61, 43, 40, 62, 90, 197, 95, 191, 156, 137, 175, 61, 218, 82, 0, 190, 54, 165, 107, 190, 209, 218, 91, 190, 174, 188, 224, 190, 90, 94, 59, 62, 33, 89, 7, 63, 24, 107, 25, 60, 173, 217, 220, 188, 187, 227, 177, 62, 193, 53, 81, 62, 244, 29, 190, 62, 156, 53, 3, 62, 121, 187, 161, 190, 95, 249, 103, 190, 197, 26, 29, 190, 225, 90, 252, 190, 89, 83, 87, 62, 59, 134, 137, 62, 203, 73, 1, 191, 109, 122, 153, 61, 93, 149, 153, 62, 54, 163, 189, 62, 186, 117, 255, 60, 193, 150, 51, 191, 226, 210, 222, 61, 45, 176, 124, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 13, 213, 189, 246, 180, 3, 62, 241, 93, 135, 189, 74, 197, 38, 60, 162, 114, 140, 61, 30, 225, 210, 189, 44, 86, 110, 190, 151, 151, 86, 189, 98, 206, 187, 189, 121, 82, 136, 62, 220, 106, 20, 62, 158, 124, 213, 189, 69, 214, 146, 190, 64, 116, 199, 189, 227, 116, 232, 61, 123, 227, 178, 188, 15, 160, 185, 61, 91, 96, 73, 61, 37, 169, 41, 189, 213, 229, 250, 189, 222, 208, 51, 190, 212, 30, 79, 62, 32, 127, 141, 62, 120, 24, 127, 189, 156, 54, 255, 189, 124, 13, 226, 61, 108, 77, 197, 62, 205, 155, 22, 61, 239, 175, 6, 61, 123, 55, 16, 189, 71, 146, 55, 190, 242, 238, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 78, 75, 190, 150, 251, 78, 63, 203, 213, 215, 61, 67, 219, 113, 60, 9, 222, 25, 191, 154, 161, 186, 62, 98, 146, 129, 62, 74, 71, 237, 189, 38, 165, 62, 191, 199, 124, 49, 62, 131, 249, 149, 62, 51, 20, 6, 59, 46, 57, 154, 63, 39, 74, 84, 60, 112, 248, 202, 190, 28, 61, 47, 190, 248, 155, 167, 61, 183, 30, 39, 63, 30, 144, 156, 62, 158, 217, 150, 60, 208, 176, 255, 190, 221, 105, 173, 61, 204, 66, 11, 190, 170, 234, 158, 62, 102, 85, 147, 191, 74, 185, 36, 191, 110, 226, 51, 191, 147, 53, 101, 190, 79, 42, 245, 190, 178, 48, 123, 62, 99, 40, 145, 191, 217, 220, 238, 62, 35, 243, 155, 61, 15, 67, 54, 63, 12, 42, 22, 61, 144, 96, 247, 61, 33, 214, 253, 190, 244, 113, 145, 62, 161, 89, 35, 62, 209, 42, 35, 189, 52, 192, 100, 62, 174, 82, 140, 190, 124, 227, 57, 61, 16, 73, 72, 59, 211, 31, 2, 63, 91, 123, 47, 62, 179, 106, 135, 61, 162, 7, 240, 189, 133, 130, 154, 190, 60, 153, 36, 62, 186, 217, 198, 189, 184, 211, 23, 190, 165, 152, 153, 61, 18, 19, 208, 190, 37, 11, 154, 190, 124, 226, 206, 62, 254, 39, 181, 60, 254, 87, 135, 60, 26, 177, 112, 61, 236, 213, 139, 61, 49, 126, 135, 61, 132, 120, 121, 190, 82, 183, 149, 189, 232, 49, 140, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 224, 16, 62, 206, 131, 253, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 104, 240, 190, 133, 253, 154, 190, 49, 4, 101, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 199, 129, 63, 240, 150, 110, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0038/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}