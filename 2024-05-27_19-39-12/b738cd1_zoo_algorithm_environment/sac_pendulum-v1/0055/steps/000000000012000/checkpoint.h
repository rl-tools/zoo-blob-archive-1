// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 51, 143, 190, 173, 169, 33, 63, 231, 46, 223, 62, 124, 179, 45, 190, 157, 73, 255, 190, 138, 180, 30, 191, 65, 78, 21, 63, 244, 53, 246, 189, 81, 242, 250, 190, 41, 253, 18, 63, 43, 244, 216, 63, 36, 64, 206, 62, 171, 12, 109, 190, 176, 3, 170, 62, 248, 35, 51, 61, 120, 157, 19, 190, 84, 224, 132, 191, 18, 87, 145, 190, 195, 148, 166, 190, 255, 219, 150, 62, 180, 29, 62, 63, 17, 8, 164, 190, 77, 90, 153, 63, 248, 230, 235, 189, 247, 151, 33, 62, 134, 129, 29, 191, 179, 108, 20, 61, 8, 72, 14, 190, 227, 37, 140, 190, 246, 225, 207, 190, 168, 5, 226, 190, 215, 56, 15, 191, 88, 57, 19, 190, 118, 69, 209, 190, 2, 150, 175, 63, 64, 210, 197, 62, 199, 197, 10, 63, 153, 189, 73, 63, 34, 39, 169, 62, 29, 184, 8, 190, 101, 181, 149, 191, 71, 19, 199, 189, 225, 155, 187, 190, 197, 194, 50, 189, 220, 116, 246, 190, 65, 208, 224, 190, 190, 250, 128, 63, 85, 180, 78, 62, 85, 170, 228, 61, 213, 32, 72, 63, 125, 234, 231, 190, 77, 243, 47, 191, 189, 146, 132, 62, 245, 62, 59, 63, 75, 41, 225, 189, 13, 132, 134, 191, 173, 96, 61, 191, 78, 192, 53, 63, 156, 41, 33, 191, 138, 190, 226, 190, 76, 13, 100, 191, 184, 223, 69, 62, 27, 239, 49, 61, 54, 131, 169, 190, 51, 39, 8, 191, 115, 253, 117, 62, 79, 208, 58, 62, 11, 30, 153, 191, 182, 129, 107, 190, 38, 25, 253, 62, 205, 150, 151, 191, 143, 76, 81, 190, 3, 43, 201, 190, 233, 19, 117, 191, 175, 92, 195, 190, 157, 183, 232, 190, 203, 229, 174, 190, 196, 190, 59, 63, 156, 80, 84, 191, 58, 134, 27, 63, 173, 6, 215, 187, 165, 111, 56, 63, 227, 31, 178, 63, 16, 237, 233, 62, 131, 249, 16, 63, 59, 26, 136, 62, 192, 116, 231, 190, 188, 64, 152, 62, 207, 224, 102, 191, 159, 210, 52, 61, 37, 10, 70, 63, 85, 236, 231, 190, 100, 231, 143, 190, 44, 156, 37, 63, 72, 190, 131, 62, 75, 33, 25, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 210, 213, 190, 32, 125, 204, 189, 218, 87, 66, 191, 164, 199, 204, 61, 56, 66, 167, 62, 215, 34, 55, 190, 31, 181, 80, 186, 167, 122, 118, 190, 236, 213, 156, 62, 72, 10, 56, 190, 207, 243, 16, 63, 171, 61, 54, 190, 248, 104, 38, 191, 70, 112, 97, 62, 161, 29, 167, 190, 232, 13, 193, 62, 187, 146, 232, 61, 80, 90, 216, 190, 104, 208, 72, 189, 25, 248, 250, 60, 89, 2, 220, 189, 47, 2, 182, 62, 124, 199, 25, 63, 228, 181, 28, 62, 4, 178, 10, 191, 79, 237, 252, 190, 170, 201, 171, 62, 212, 36, 10, 63, 94, 44, 36, 191, 64, 194, 29, 63, 218, 87, 96, 191, 106, 216, 231, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 80, 239, 61, 152, 49, 165, 189, 103, 242, 67, 189, 212, 9, 101, 190, 126, 245, 140, 189, 154, 111, 213, 62, 184, 82, 129, 62, 28, 202, 136, 62, 173, 103, 23, 189, 134, 62, 182, 62, 232, 234, 178, 189, 225, 205, 202, 187, 236, 42, 125, 61, 45, 136, 245, 60, 187, 253, 41, 190, 132, 220, 143, 189, 73, 187, 50, 189, 224, 228, 177, 62, 12, 99, 59, 189, 46, 159, 33, 191, 76, 24, 34, 190, 203, 206, 193, 62, 251, 110, 72, 62, 80, 80, 173, 190, 249, 254, 94, 191, 66, 199, 28, 62, 96, 77, 18, 61, 120, 233, 120, 190, 188, 160, 145, 189, 127, 55, 243, 61, 90, 22, 1, 62, 150, 36, 42, 191, 253, 177, 151, 190, 239, 90, 171, 60, 172, 230, 63, 61, 237, 248, 189, 190, 129, 5, 108, 62, 225, 226, 45, 62, 134, 144, 8, 191, 39, 27, 60, 62, 58, 15, 20, 191, 109, 165, 30, 62, 78, 89, 162, 189, 222, 52, 25, 191, 76, 16, 207, 62, 159, 93, 157, 190, 16, 194, 229, 188, 248, 153, 231, 60, 153, 207, 231, 61, 150, 120, 57, 191, 124, 188, 174, 61, 62, 187, 37, 187, 214, 188, 204, 61, 151, 114, 97, 190, 131, 231, 103, 61, 33, 155, 39, 61, 235, 33, 168, 190, 6, 134, 93, 188, 213, 134, 248, 189, 2, 75, 89, 190, 79, 50, 141, 188, 15, 85, 52, 190, 54, 221, 236, 60, 132, 179, 236, 62, 78, 146, 48, 189, 22, 2, 195, 189, 68, 84, 65, 62, 33, 210, 16, 191, 17, 136, 124, 190, 80, 57, 4, 190, 147, 106, 144, 61, 112, 58, 154, 189, 119, 41, 184, 59, 91, 179, 10, 190, 177, 161, 146, 190, 1, 15, 194, 61, 166, 101, 223, 190, 197, 71, 222, 189, 193, 83, 105, 190, 126, 229, 190, 190, 55, 27, 184, 61, 96, 162, 136, 62, 6, 8, 73, 61, 230, 128, 159, 62, 218, 148, 159, 190, 25, 81, 199, 61, 56, 43, 249, 60, 72, 78, 91, 62, 34, 88, 3, 191, 68, 230, 157, 189, 117, 104, 189, 190, 109, 72, 226, 189, 137, 33, 219, 62, 233, 243, 52, 62, 210, 178, 120, 189, 48, 5, 61, 61, 20, 10, 71, 62, 39, 54, 150, 61, 26, 102, 83, 188, 100, 91, 198, 62, 100, 202, 217, 189, 189, 54, 82, 62, 65, 235, 245, 189, 25, 153, 51, 190, 14, 85, 136, 190, 139, 47, 161, 62, 4, 185, 93, 62, 149, 11, 115, 190, 17, 128, 231, 62, 84, 167, 14, 62, 105, 109, 10, 61, 184, 241, 138, 190, 2, 24, 141, 188, 77, 2, 34, 190, 12, 248, 153, 62, 17, 24, 41, 189, 214, 215, 134, 190, 240, 53, 249, 189, 58, 59, 6, 190, 26, 235, 116, 190, 193, 194, 45, 188, 245, 200, 176, 62, 79, 89, 150, 189, 232, 123, 51, 62, 133, 57, 69, 190, 93, 129, 112, 190, 7, 172, 53, 62, 134, 7, 131, 62, 196, 197, 124, 190, 50, 94, 91, 60, 8, 249, 224, 188, 38, 215, 237, 62, 81, 40, 64, 61, 168, 164, 156, 62, 84, 182, 199, 189, 131, 187, 251, 61, 136, 55, 13, 62, 215, 65, 212, 61, 32, 119, 186, 189, 78, 232, 96, 189, 153, 142, 114, 190, 83, 38, 95, 62, 198, 99, 181, 62, 176, 218, 29, 62, 222, 131, 240, 61, 186, 178, 120, 190, 71, 14, 69, 62, 124, 209, 211, 61, 195, 77, 140, 62, 125, 5, 88, 62, 8, 104, 136, 189, 68, 149, 0, 190, 244, 197, 131, 61, 75, 116, 133, 189, 89, 87, 167, 61, 123, 191, 95, 62, 138, 167, 3, 62, 152, 156, 253, 60, 174, 89, 180, 189, 173, 106, 158, 61, 19, 144, 177, 190, 62, 186, 174, 190, 122, 77, 192, 189, 218, 247, 10, 62, 231, 159, 105, 62, 212, 237, 134, 190, 176, 33, 150, 62, 112, 100, 59, 191, 236, 57, 136, 62, 98, 175, 138, 62, 183, 95, 11, 61, 71, 47, 196, 188, 9, 215, 47, 190, 244, 131, 157, 62, 9, 14, 227, 61, 71, 94, 199, 61, 14, 169, 57, 62, 128, 136, 142, 61, 74, 60, 44, 191, 91, 167, 57, 61, 174, 193, 144, 61, 189, 128, 64, 62, 93, 136, 149, 61, 133, 97, 2, 190, 150, 84, 155, 191, 67, 201, 103, 190, 106, 128, 72, 59, 134, 82, 158, 189, 120, 165, 14, 62, 125, 230, 179, 62, 65, 142, 18, 191, 177, 109, 62, 62, 172, 188, 249, 187, 92, 117, 44, 187, 236, 112, 221, 190, 234, 165, 251, 62, 74, 20, 41, 62, 153, 113, 94, 189, 202, 83, 170, 191, 101, 216, 164, 61, 196, 80, 209, 189, 126, 119, 132, 62, 90, 5, 19, 58, 226, 146, 31, 191, 140, 98, 169, 190, 171, 193, 177, 62, 198, 229, 245, 62, 218, 51, 122, 62, 245, 91, 112, 61, 13, 162, 146, 191, 148, 214, 162, 62, 254, 160, 241, 189, 123, 50, 49, 62, 57, 18, 96, 190, 86, 58, 160, 58, 128, 35, 218, 190, 188, 128, 201, 190, 224, 207, 70, 186, 183, 95, 85, 62, 138, 240, 67, 61, 59, 180, 31, 190, 135, 103, 12, 190, 65, 81, 100, 191, 103, 31, 250, 189, 173, 230, 169, 190, 191, 251, 238, 189, 203, 108, 82, 62, 9, 229, 36, 191, 102, 110, 99, 62, 64, 156, 10, 191, 196, 98, 160, 62, 223, 252, 246, 62, 197, 79, 78, 62, 159, 1, 90, 191, 121, 152, 248, 61, 11, 221, 110, 62, 248, 250, 63, 191, 118, 79, 157, 190, 252, 242, 75, 191, 127, 224, 79, 62, 249, 240, 182, 62, 199, 37, 89, 62, 250, 32, 121, 190, 4, 136, 255, 61, 166, 16, 66, 62, 242, 242, 62, 62, 200, 62, 95, 61, 223, 13, 29, 62, 180, 232, 20, 63, 242, 95, 180, 190, 198, 67, 178, 62, 186, 35, 5, 190, 221, 173, 46, 190, 236, 165, 242, 61, 54, 187, 18, 63, 63, 36, 163, 62, 30, 116, 24, 63, 175, 136, 68, 62, 155, 195, 53, 190, 27, 61, 87, 190, 196, 42, 254, 189, 178, 99, 214, 61, 201, 185, 16, 191, 4, 82, 172, 190, 113, 87, 171, 60, 22, 181, 107, 61, 31, 79, 133, 62, 237, 98, 224, 189, 207, 188, 129, 191, 97, 111, 133, 62, 181, 149, 145, 61, 62, 149, 5, 191, 162, 73, 144, 188, 230, 3, 231, 61, 30, 243, 96, 62, 53, 69, 135, 59, 146, 85, 46, 62, 219, 36, 6, 62, 2, 173, 59, 61, 85, 198, 195, 62, 31, 242, 19, 62, 214, 65, 148, 62, 12, 114, 134, 190, 33, 25, 231, 61, 113, 200, 165, 61, 105, 146, 85, 62, 111, 150, 142, 190, 186, 148, 28, 189, 44, 94, 183, 190, 214, 45, 166, 189, 125, 17, 176, 62, 213, 151, 61, 191, 197, 97, 18, 190, 0, 14, 133, 190, 87, 192, 192, 62, 128, 84, 128, 187, 255, 64, 156, 189, 217, 15, 166, 190, 213, 108, 125, 189, 79, 54, 241, 62, 213, 143, 251, 190, 151, 164, 183, 190, 58, 30, 175, 190, 91, 0, 237, 189, 229, 157, 53, 189, 240, 115, 198, 62, 190, 244, 185, 187, 133, 111, 156, 62, 119, 137, 116, 60, 184, 97, 108, 62, 123, 113, 247, 188, 123, 213, 179, 62, 118, 188, 145, 190, 46, 227, 138, 190, 228, 221, 183, 61, 61, 94, 140, 190, 139, 166, 208, 62, 65, 3, 2, 62, 243, 97, 158, 62, 101, 124, 64, 62, 119, 155, 76, 190, 51, 138, 10, 62, 71, 1, 17, 189, 100, 40, 35, 62, 172, 99, 226, 61, 26, 93, 171, 62, 108, 131, 138, 190, 162, 147, 38, 62, 215, 66, 92, 191, 148, 84, 104, 62, 186, 228, 17, 62, 228, 13, 122, 190, 75, 3, 18, 63, 215, 16, 164, 190, 10, 177, 178, 62, 60, 188, 160, 61, 45, 221, 190, 189, 128, 160, 254, 190, 21, 222, 10, 62, 176, 0, 38, 190, 102, 7, 12, 62, 89, 254, 182, 61, 138, 91, 18, 189, 227, 8, 167, 62, 78, 217, 69, 62, 159, 251, 5, 191, 17, 134, 184, 189, 180, 162, 48, 62, 207, 20, 111, 190, 11, 64, 12, 191, 188, 204, 195, 61, 165, 130, 208, 62, 176, 77, 174, 189, 106, 42, 129, 61, 39, 217, 249, 190, 14, 3, 27, 62, 45, 165, 18, 189, 75, 136, 88, 62, 35, 120, 119, 191, 182, 52, 93, 190, 232, 227, 34, 189, 122, 51, 171, 62, 82, 166, 24, 62, 3, 205, 182, 191, 40, 8, 84, 190, 25, 86, 232, 61, 56, 34, 218, 62, 125, 172, 157, 61, 88, 126, 77, 189, 107, 245, 166, 191, 242, 66, 157, 62, 227, 248, 53, 190, 0, 211, 43, 190, 219, 241, 230, 61, 171, 224, 243, 189, 21, 89, 237, 190, 98, 100, 212, 190, 246, 179, 238, 189, 4, 111, 132, 189, 196, 57, 132, 189, 125, 210, 73, 188, 233, 182, 254, 189, 237, 200, 123, 191, 71, 225, 143, 62, 154, 64, 202, 61, 16, 9, 3, 190, 46, 131, 29, 62, 21, 102, 182, 190, 51, 252, 85, 189, 51, 54, 96, 190, 40, 196, 32, 62, 188, 67, 233, 60, 129, 162, 148, 61, 28, 222, 234, 190, 29, 167, 2, 190, 216, 151, 144, 62, 190, 48, 129, 189, 63, 211, 255, 189, 219, 1, 43, 188, 158, 209, 176, 188, 164, 143, 138, 62, 20, 86, 100, 61, 32, 109, 134, 188, 244, 154, 124, 62, 7, 135, 176, 190, 147, 166, 234, 61, 177, 101, 124, 189, 63, 126, 134, 62, 73, 244, 168, 190, 79, 90, 231, 61, 26, 4, 182, 190, 82, 37, 11, 190, 3, 214, 84, 62, 99, 250, 33, 62, 178, 174, 47, 190, 127, 131, 159, 189, 235, 163, 99, 190, 20, 210, 6, 190, 35, 17, 108, 62, 26, 49, 192, 190, 140, 52, 245, 61, 245, 129, 1, 191, 197, 124, 43, 62, 219, 7, 50, 62, 134, 53, 10, 62, 209, 230, 103, 191, 245, 2, 76, 61, 207, 38, 37, 62, 124, 34, 66, 191, 234, 210, 211, 61, 124, 157, 252, 190, 170, 47, 129, 61, 182, 146, 131, 189, 76, 13, 138, 62, 168, 32, 156, 190, 86, 168, 38, 62, 42, 153, 16, 62, 227, 71, 84, 189, 58, 45, 33, 62, 26, 115, 40, 61, 89, 140, 10, 63, 132, 11, 53, 190, 151, 134, 170, 62, 115, 153, 28, 190, 136, 106, 34, 190, 141, 43, 53, 62, 35, 255, 35, 62, 249, 204, 109, 62, 78, 104, 106, 188, 46, 195, 125, 189, 21, 68, 6, 60, 95, 67, 186, 189, 132, 252, 157, 61, 248, 243, 89, 61, 174, 130, 160, 188, 195, 222, 22, 62, 26, 52, 108, 189, 75, 214, 38, 60, 141, 58, 168, 189, 175, 72, 218, 60, 170, 245, 36, 62, 61, 142, 209, 188, 228, 183, 24, 190, 158, 147, 41, 190, 187, 17, 128, 189, 123, 130, 151, 188, 196, 6, 29, 62, 4, 46, 2, 190, 74, 44, 171, 60, 236, 20, 133, 61, 191, 216, 3, 61, 146, 100, 219, 61, 9, 16, 238, 189, 232, 136, 193, 189, 151, 12, 43, 190, 174, 180, 16, 189, 170, 232, 169, 189, 219, 76, 244, 189, 16, 130, 155, 61, 140, 174, 7, 62, 237, 171, 22, 190, 164, 185, 73, 62, 152, 36, 181, 190, 215, 170, 130, 60, 205, 168, 174, 189, 46, 100, 243, 189, 89, 202, 2, 61, 40, 53, 96, 62, 226, 86, 77, 191, 131, 217, 180, 61, 107, 40, 163, 191, 124, 250, 143, 190, 160, 77, 118, 62, 55, 245, 179, 190, 118, 113, 160, 62, 108, 196, 199, 188, 180, 91, 166, 62, 12, 240, 253, 60, 76, 211, 12, 190, 233, 42, 229, 190, 131, 155, 139, 62, 175, 71, 140, 190, 203, 82, 2, 191, 79, 205, 170, 190, 138, 54, 10, 190, 8, 160, 178, 61, 238, 78, 149, 62, 114, 103, 30, 187, 142, 67, 235, 190, 29, 195, 136, 191, 69, 10, 27, 190, 251, 212, 208, 191, 106, 248, 186, 190, 107, 254, 224, 189, 134, 208, 184, 62, 189, 203, 55, 191, 116, 98, 111, 61, 128, 185, 154, 190, 89, 57, 129, 62, 31, 4, 100, 190, 6, 123, 84, 62, 176, 167, 98, 190, 93, 115, 109, 189, 35, 164, 198, 62, 142, 203, 20, 191, 127, 93, 203, 189, 239, 164, 155, 190, 169, 144, 24, 190, 221, 77, 128, 62, 204, 232, 206, 62, 250, 171, 18, 190, 199, 98, 107, 62, 245, 136, 139, 62, 60, 115, 1, 63, 161, 102, 48, 189, 152, 220, 188, 61, 246, 234, 115, 189, 248, 40, 192, 190, 252, 77, 43, 190, 3, 39, 190, 190, 251, 19, 151, 62, 124, 57, 162, 61, 118, 42, 115, 62, 220, 202, 110, 62, 249, 58, 249, 189, 132, 1, 84, 190, 85, 13, 137, 61, 135, 164, 243, 190, 68, 81, 193, 60, 184, 61, 188, 189, 134, 185, 103, 62, 204, 192, 26, 189, 128, 15, 166, 187, 176, 119, 66, 190, 0, 53, 154, 189, 199, 211, 188, 62, 184, 105, 187, 190, 216, 237, 125, 190, 184, 155, 218, 188, 163, 65, 155, 61, 171, 78, 85, 61, 36, 22, 137, 62, 249, 182, 163, 61, 56, 112, 103, 62, 195, 169, 54, 62, 22, 86, 152, 61, 166, 163, 69, 62, 56, 43, 169, 62, 230, 121, 109, 188, 57, 37, 58, 190, 196, 60, 137, 188, 42, 124, 145, 61, 136, 236, 9, 61, 27, 23, 156, 189, 163, 205, 53, 190, 125, 5, 4, 61, 55, 254, 129, 190, 150, 17, 107, 189, 229, 60, 30, 190, 31, 181, 203, 190, 210, 196, 186, 188, 31, 148, 119, 188, 221, 17, 235, 62, 202, 229, 118, 61, 80, 118, 182, 61, 146, 64, 137, 189, 184, 127, 225, 61, 51, 179, 196, 62, 170, 70, 11, 191, 207, 13, 9, 190, 62, 207, 182, 190, 78, 232, 26, 190, 90, 153, 197, 61, 54, 131, 27, 63, 35, 127, 49, 189, 69, 188, 196, 61, 190, 138, 130, 62, 80, 18, 6, 62, 161, 15, 123, 62, 234, 44, 42, 62, 219, 238, 225, 189, 113, 160, 142, 190, 113, 162, 106, 189, 215, 203, 161, 190, 135, 108, 133, 61, 45, 227, 177, 61, 154, 58, 143, 190, 251, 5, 98, 62, 127, 62, 54, 189, 70, 153, 178, 190, 35, 136, 38, 190, 11, 8, 139, 190, 23, 191, 131, 189, 216, 195, 34, 191, 248, 224, 201, 62, 70, 110, 103, 61, 165, 244, 150, 62, 14, 42, 162, 190, 236, 137, 146, 189, 148, 170, 239, 61, 28, 79, 134, 62, 190, 42, 188, 59, 59, 57, 117, 190, 164, 196, 24, 190, 14, 230, 226, 190, 73, 2, 50, 62, 155, 29, 15, 191, 124, 109, 192, 190, 177, 76, 221, 189, 83, 99, 84, 62, 180, 76, 0, 62, 234, 167, 175, 189, 182, 2, 130, 191, 89, 143, 33, 62, 35, 57, 15, 189, 63, 114, 201, 189, 112, 223, 56, 190, 252, 103, 10, 62, 233, 187, 101, 189, 55, 245, 33, 189, 109, 236, 23, 190, 245, 46, 69, 190, 40, 157, 176, 60, 247, 126, 140, 190, 136, 222, 38, 61, 142, 157, 10, 191, 238, 45, 216, 61, 55, 23, 246, 61, 185, 205, 11, 61, 230, 8, 18, 191, 169, 101, 2, 62, 82, 40, 170, 62, 224, 178, 237, 190, 230, 167, 175, 190, 105, 205, 243, 61, 182, 95, 32, 62, 138, 247, 89, 62, 199, 9, 146, 62, 61, 233, 128, 190, 113, 65, 234, 61, 17, 158, 201, 61, 150, 82, 244, 188, 133, 42, 7, 189, 88, 157, 154, 62, 141, 2, 139, 190, 196, 250, 209, 61, 100, 245, 5, 62, 3, 20, 98, 188, 207, 84, 179, 190, 27, 98, 155, 189, 33, 233, 50, 190, 239, 13, 135, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 45, 54, 1, 191, 64, 84, 137, 62, 158, 70, 149, 189, 110, 202, 224, 190, 217, 153, 0, 190, 136, 74, 49, 62, 28, 32, 109, 191, 179, 98, 162, 190, 6, 15, 174, 62, 207, 9, 193, 61, 219, 180, 69, 62, 236, 9, 184, 191, 199, 108, 57, 186, 0, 176, 231, 62, 55, 155, 108, 62, 133, 56, 21, 190, 37, 83, 143, 190, 180, 173, 249, 190, 55, 63, 170, 62, 86, 45, 44, 62, 49, 162, 168, 190, 89, 74, 132, 62, 94, 92, 179, 62, 133, 237, 51, 190, 19, 136, 114, 188, 154, 169, 104, 63, 22, 64, 134, 189, 141, 168, 187, 191, 60, 234, 19, 189, 57, 76, 184, 62, 210, 5, 57, 62, 253, 18, 5, 191, 62, 144, 212, 189, 214, 32, 61, 62, 63, 185, 79, 190, 245, 190, 31, 63, 84, 11, 28, 61, 3, 118, 55, 62, 192, 54, 212, 189, 4, 0, 138, 189, 96, 101, 191, 189, 126, 45, 136, 62, 226, 214, 90, 190, 68, 58, 17, 191, 118, 53, 73, 62, 243, 33, 184, 62, 0, 243, 175, 62, 27, 133, 16, 190, 156, 88, 20, 190, 215, 83, 176, 190, 80, 124, 28, 62, 114, 227, 63, 190, 11, 133, 77, 190, 25, 160, 173, 62, 76, 43, 184, 189, 198, 28, 214, 190, 77, 232, 148, 190, 84, 78, 131, 62, 6, 7, 187, 189, 57, 90, 164, 62, 211, 130, 18, 190, 179, 22, 140, 61, 146, 47, 254, 190, 70, 244, 47, 61, 151, 184, 170, 188, 230, 45, 248, 189, 9, 16, 9, 61, 187, 104, 25, 188, 143, 155, 35, 62, 114, 101, 9, 61, 172, 56, 72, 61, 20, 14, 129, 60, 179, 155, 21, 190, 87, 129, 70, 190, 93, 191, 98, 62, 194, 236, 162, 62, 186, 176, 198, 190, 36, 70, 242, 189, 179, 241, 213, 61, 232, 188, 133, 58, 84, 105, 56, 62, 103, 26, 74, 62, 115, 9, 248, 189, 44, 181, 127, 60, 179, 51, 44, 62, 71, 231, 63, 62, 250, 98, 249, 61, 65, 247, 28, 190, 105, 80, 149, 189, 250, 86, 148, 189, 162, 118, 153, 189, 57, 147, 31, 61, 191, 252, 53, 190, 90, 209, 141, 61, 124, 29, 23, 190, 234, 163, 185, 61, 144, 108, 222, 61, 57, 249, 104, 62, 156, 225, 121, 188, 133, 67, 189, 62, 252, 9, 131, 61, 14, 18, 45, 61, 26, 27, 54, 190, 227, 208, 9, 62, 209, 53, 88, 190, 145, 9, 78, 62, 88, 129, 134, 189, 249, 222, 31, 191, 36, 164, 238, 62, 136, 51, 147, 61, 239, 16, 130, 62, 221, 138, 27, 62, 252, 107, 32, 190, 65, 16, 11, 191, 146, 200, 23, 62, 142, 13, 175, 190, 193, 83, 17, 190, 221, 128, 78, 62, 21, 207, 10, 189, 8, 67, 172, 190, 185, 213, 122, 188, 96, 145, 143, 62, 6, 248, 20, 188, 83, 1, 142, 62, 113, 31, 8, 190, 214, 52, 134, 190, 184, 49, 9, 191, 78, 60, 161, 61, 108, 82, 209, 189, 117, 2, 233, 189, 56, 43, 28, 189, 241, 174, 144, 190, 109, 208, 99, 62, 4, 11, 198, 188, 66, 221, 184, 61, 238, 225, 19, 60, 79, 58, 32, 190, 32, 62, 22, 190, 191, 146, 16, 190, 104, 243, 23, 190, 171, 24, 209, 190, 58, 40, 54, 61, 12, 231, 72, 190, 78, 196, 77, 190, 83, 160, 123, 62, 136, 79, 59, 62, 79, 176, 193, 61, 125, 189, 167, 189, 223, 54, 159, 61, 87, 119, 204, 61, 207, 99, 58, 62, 120, 49, 122, 62, 102, 17, 38, 190, 186, 19, 19, 62, 211, 49, 77, 61, 67, 7, 150, 189, 15, 46, 254, 60, 52, 24, 9, 190, 87, 54, 144, 189, 147, 232, 217, 61, 64, 213, 34, 191, 182, 119, 112, 186, 154, 223, 66, 58, 133, 239, 236, 62, 193, 161, 177, 62, 91, 243, 135, 190, 216, 179, 197, 188, 35, 31, 213, 62, 32, 149, 3, 190, 98, 55, 111, 61, 56, 217, 3, 190, 221, 5, 117, 60, 243, 145, 68, 190, 25, 43, 53, 190, 71, 139, 169, 61, 71, 188, 99, 62, 201, 11, 105, 62, 124, 110, 201, 61, 10, 184, 111, 190, 64, 201, 92, 189, 79, 234, 22, 62, 156, 150, 129, 61, 46, 87, 123, 190, 28, 155, 242, 190, 27, 164, 137, 61, 139, 244, 153, 190, 216, 188, 195, 61, 236, 18, 67, 62, 5, 103, 140, 60, 73, 69, 4, 190, 248, 112, 252, 190, 22, 159, 57, 61, 214, 0, 214, 190, 206, 204, 151, 190, 75, 163, 55, 62, 25, 254, 7, 191, 10, 42, 43, 62, 169, 80, 142, 190, 83, 10, 128, 62, 245, 156, 141, 62, 240, 125, 236, 187, 52, 235, 8, 191, 37, 167, 92, 190, 194, 62, 11, 63, 58, 239, 60, 191, 115, 81, 83, 190, 25, 224, 205, 190, 165, 104, 173, 61, 58, 134, 159, 189, 41, 107, 227, 62, 15, 244, 106, 190, 237, 187, 124, 62, 179, 169, 143, 62, 187, 104, 195, 62, 167, 20, 9, 62, 109, 166, 250, 62, 113, 11, 121, 190, 232, 232, 226, 190, 92, 5, 61, 62, 227, 173, 184, 190, 148, 220, 116, 62, 199, 4, 175, 61, 209, 103, 123, 61, 244, 163, 58, 62, 79, 82, 185, 61, 12, 179, 255, 61, 170, 100, 133, 61, 57, 66, 168, 190, 122, 66, 129, 190, 3, 32, 91, 188, 184, 182, 34, 190, 218, 167, 151, 190, 218, 162, 121, 62, 238, 95, 147, 188, 231, 141, 104, 62, 244, 91, 25, 190, 40, 181, 70, 191, 23, 238, 61, 62, 78, 54, 252, 60, 161, 0, 36, 191, 126, 196, 134, 61, 50, 50, 93, 61, 1, 73, 104, 62, 69, 70, 27, 62, 185, 90, 167, 62, 195, 101, 84, 62, 206, 169, 188, 62, 160, 164, 207, 61, 191, 60, 217, 61, 159, 187, 1, 62, 118, 5, 188, 190, 124, 196, 197, 189, 176, 206, 75, 62, 254, 5, 232, 61, 77, 144, 9, 61, 237, 95, 176, 188, 131, 209, 240, 189, 7, 22, 51, 62, 5, 170, 16, 189, 253, 50, 21, 190, 170, 83, 167, 61, 35, 200, 244, 61, 137, 125, 236, 190, 209, 52, 158, 189, 41, 128, 1, 62, 143, 125, 197, 188, 155, 168, 18, 189, 23, 49, 249, 190, 55, 156, 221, 190, 30, 34, 38, 189, 52, 203, 142, 190, 69, 95, 193, 190, 29, 212, 202, 188, 13, 149, 157, 190, 77, 69, 43, 190, 79, 230, 103, 62, 73, 2, 248, 189, 106, 135, 49, 190, 136, 236, 173, 61, 194, 154, 141, 189, 199, 121, 50, 190, 89, 157, 28, 190, 66, 189, 121, 190, 42, 17, 24, 62, 95, 238, 243, 60, 160, 119, 54, 62, 32, 160, 255, 190, 223, 227, 186, 62, 99, 121, 6, 190, 133, 50, 48, 189, 9, 145, 241, 189, 122, 33, 75, 190, 27, 225, 255, 61, 248, 158, 20, 62, 169, 177, 164, 62, 155, 249, 227, 61, 58, 248, 167, 190, 119, 134, 195, 61, 195, 222, 110, 62, 93, 115, 3, 62, 109, 91, 17, 62, 0, 88, 38, 190, 191, 185, 118, 62, 7, 181, 172, 62, 151, 232, 170, 59, 237, 229, 172, 62, 209, 66, 188, 189, 230, 2, 222, 60, 201, 81, 21, 63, 111, 212, 47, 61, 164, 202, 2, 190, 163, 197, 125, 61, 106, 252, 135, 62, 87, 39, 79, 61, 51, 4, 37, 62, 235, 190, 234, 190, 25, 36, 128, 61, 19, 83, 57, 190, 244, 163, 49, 62, 33, 216, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 197, 203, 189, 212, 182, 51, 62, 27, 31, 68, 189, 209, 181, 174, 190, 112, 116, 166, 62, 188, 62, 7, 62, 192, 146, 91, 61, 122, 217, 11, 62, 53, 98, 144, 61, 121, 146, 157, 189, 111, 84, 183, 189, 23, 145, 159, 62, 107, 5, 246, 60, 254, 108, 21, 62, 165, 125, 98, 59, 253, 25, 125, 58, 120, 39, 89, 189, 102, 27, 202, 187, 206, 183, 142, 62, 219, 208, 131, 188, 27, 160, 227, 188, 217, 106, 197, 189, 47, 186, 144, 190, 133, 82, 42, 62, 99, 49, 160, 62, 71, 113, 232, 61, 44, 210, 244, 61, 173, 30, 101, 189, 242, 245, 210, 189, 134, 124, 169, 60, 56, 119, 90, 62, 56, 57, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 15, 161, 190, 115, 159, 175, 62, 85, 102, 177, 62, 249, 176, 24, 63, 76, 134, 129, 190, 23, 232, 1, 191, 55, 58, 79, 191, 51, 113, 82, 63, 209, 12, 152, 62, 156, 112, 217, 62, 19, 245, 245, 62, 225, 103, 41, 191, 186, 201, 63, 62, 152, 96, 174, 62, 11, 45, 94, 187, 79, 101, 88, 191, 112, 41, 44, 63, 170, 25, 62, 62, 247, 172, 168, 62, 169, 205, 155, 190, 177, 254, 78, 62, 215, 179, 138, 61, 8, 102, 105, 191, 55, 164, 17, 191, 248, 29, 179, 60, 171, 37, 205, 190, 7, 171, 9, 61, 62, 247, 12, 191, 18, 119, 4, 63, 72, 44, 148, 62, 116, 222, 85, 188, 13, 103, 97, 62, 144, 187, 102, 189, 223, 138, 44, 190, 199, 23, 10, 190, 53, 94, 30, 62, 128, 73, 119, 190, 36, 115, 94, 190, 106, 123, 110, 62, 167, 178, 142, 61, 251, 155, 167, 189, 191, 55, 167, 62, 96, 196, 124, 189, 200, 142, 180, 189, 145, 217, 10, 190, 143, 119, 150, 190, 252, 221, 228, 60, 254, 91, 69, 60, 103, 227, 195, 61, 178, 239, 235, 189, 34, 93, 140, 188, 119, 144, 206, 61, 72, 12, 151, 189, 195, 254, 65, 61, 0, 90, 2, 62, 16, 241, 8, 60, 120, 179, 63, 190, 197, 239, 243, 61, 142, 226, 75, 190, 0, 243, 132, 61, 59, 143, 181, 62, 49, 117, 145, 188, 43, 138, 189, 190, 242, 59, 207, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 98, 12, 190, 80, 17, 225, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {138, 60, 179, 190, 62, 164, 95, 63, 108, 164, 174, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 103, 32, 191, 47, 167, 114, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}