// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 78, 30, 190, 167, 12, 92, 190, 184, 11, 90, 62, 67, 224, 140, 190, 106, 8, 31, 62, 87, 242, 14, 191, 113, 223, 57, 190, 71, 236, 225, 188, 37, 251, 243, 190, 244, 228, 0, 63, 242, 251, 17, 63, 142, 251, 64, 62, 181, 240, 162, 189, 63, 218, 7, 189, 206, 194, 143, 62, 65, 161, 64, 189, 116, 175, 14, 63, 3, 219, 233, 190, 29, 145, 23, 60, 253, 230, 206, 190, 219, 64, 13, 62, 190, 241, 137, 190, 218, 73, 13, 63, 2, 125, 88, 62, 29, 214, 58, 62, 19, 49, 165, 190, 186, 145, 12, 190, 67, 188, 38, 190, 133, 68, 16, 187, 33, 20, 66, 189, 163, 14, 13, 191, 206, 179, 18, 189, 242, 127, 184, 190, 15, 250, 253, 190, 73, 227, 23, 190, 132, 53, 78, 61, 177, 41, 144, 189, 172, 127, 250, 62, 19, 144, 149, 62, 226, 209, 248, 189, 83, 88, 225, 190, 194, 160, 79, 190, 32, 183, 136, 190, 188, 188, 245, 62, 188, 43, 0, 190, 124, 220, 145, 190, 182, 200, 243, 62, 51, 74, 216, 62, 56, 95, 64, 62, 243, 230, 238, 62, 209, 176, 247, 190, 239, 198, 218, 190, 185, 24, 8, 191, 141, 69, 98, 60, 136, 221, 192, 190, 167, 27, 68, 62, 183, 38, 17, 191, 124, 36, 180, 62, 64, 54, 43, 62, 241, 226, 217, 190, 217, 192, 13, 191, 222, 188, 229, 62, 129, 5, 125, 61, 138, 46, 145, 190, 54, 120, 160, 190, 153, 133, 17, 62, 95, 189, 153, 62, 1, 99, 2, 191, 79, 139, 204, 190, 83, 219, 143, 62, 73, 22, 235, 190, 27, 215, 19, 190, 4, 241, 221, 190, 18, 67, 247, 190, 35, 166, 140, 190, 58, 94, 175, 190, 95, 1, 246, 190, 97, 196, 15, 63, 122, 14, 16, 191, 64, 129, 0, 63, 5, 133, 207, 62, 164, 72, 245, 62, 194, 58, 117, 57, 191, 19, 239, 62, 46, 109, 225, 62, 143, 78, 17, 63, 175, 109, 204, 190, 74, 207, 244, 62, 87, 199, 12, 191, 247, 214, 103, 190, 30, 131, 17, 190, 56, 75, 196, 190, 176, 28, 177, 190, 170, 189, 147, 62, 44, 117, 210, 60, 166, 179, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 172, 19, 191, 161, 8, 198, 62, 241, 204, 7, 191, 212, 22, 33, 61, 127, 130, 199, 61, 125, 209, 14, 190, 141, 145, 7, 190, 66, 65, 113, 190, 195, 94, 105, 62, 231, 213, 170, 189, 107, 145, 197, 62, 107, 130, 141, 188, 40, 240, 134, 190, 157, 79, 90, 190, 253, 197, 150, 190, 39, 221, 61, 62, 216, 164, 146, 190, 220, 97, 251, 190, 211, 215, 156, 60, 245, 108, 102, 62, 18, 45, 40, 190, 133, 16, 16, 62, 215, 211, 10, 63, 86, 119, 57, 62, 194, 92, 250, 190, 250, 248, 242, 190, 212, 19, 0, 62, 155, 189, 253, 62, 211, 10, 3, 191, 16, 33, 4, 63, 220, 42, 239, 190, 238, 235, 191, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 88, 204, 61, 73, 83, 120, 61, 174, 24, 177, 59, 88, 73, 235, 188, 152, 134, 249, 189, 133, 245, 24, 61, 216, 243, 153, 61, 220, 196, 47, 62, 186, 112, 172, 189, 70, 118, 10, 62, 217, 251, 85, 189, 248, 85, 36, 190, 177, 31, 134, 58, 186, 209, 0, 190, 218, 91, 147, 189, 181, 116, 29, 190, 149, 136, 13, 62, 205, 252, 31, 62, 100, 134, 66, 61, 129, 232, 9, 190, 183, 90, 79, 189, 125, 216, 47, 62, 142, 170, 232, 61, 224, 30, 32, 190, 128, 17, 227, 189, 16, 216, 8, 62, 119, 238, 188, 189, 135, 78, 18, 190, 149, 144, 44, 188, 213, 141, 225, 61, 253, 233, 42, 62, 70, 67, 9, 62, 131, 96, 218, 61, 232, 218, 42, 189, 136, 230, 0, 61, 200, 154, 17, 187, 107, 248, 10, 62, 97, 17, 36, 62, 166, 144, 31, 190, 99, 226, 44, 62, 69, 53, 94, 189, 81, 120, 11, 61, 66, 240, 244, 189, 85, 237, 22, 190, 128, 158, 45, 62, 164, 148, 109, 188, 83, 17, 238, 189, 113, 132, 191, 60, 71, 24, 1, 62, 91, 99, 129, 186, 75, 115, 212, 60, 14, 233, 119, 189, 130, 42, 144, 189, 229, 55, 236, 189, 205, 54, 53, 187, 131, 128, 33, 190, 22, 82, 32, 190, 15, 174, 16, 62, 24, 121, 50, 190, 70, 82, 211, 189, 23, 76, 30, 189, 101, 19, 113, 189, 14, 191, 48, 61, 20, 60, 205, 61, 39, 165, 11, 62, 126, 198, 161, 189, 62, 253, 192, 188, 208, 110, 20, 61, 97, 126, 229, 189, 189, 49, 240, 60, 154, 126, 127, 189, 154, 48, 159, 189, 57, 211, 152, 188, 7, 200, 119, 61, 167, 252, 215, 189, 45, 82, 18, 190, 82, 67, 223, 61, 214, 165, 211, 61, 76, 167, 227, 189, 200, 157, 147, 189, 147, 70, 21, 190, 120, 224, 77, 61, 138, 117, 4, 62, 91, 113, 129, 61, 214, 131, 25, 190, 102, 110, 246, 61, 22, 30, 191, 60, 157, 14, 81, 60, 183, 249, 27, 190, 104, 130, 42, 61, 59, 214, 17, 189, 231, 126, 33, 62, 210, 118, 90, 61, 199, 131, 35, 62, 115, 152, 44, 189, 202, 65, 31, 189, 8, 71, 235, 189, 73, 4, 116, 189, 146, 236, 116, 187, 151, 241, 246, 61, 130, 77, 97, 188, 124, 139, 213, 61, 159, 34, 203, 189, 164, 150, 10, 189, 150, 192, 27, 190, 45, 206, 44, 62, 167, 17, 131, 61, 189, 96, 232, 61, 113, 157, 68, 189, 88, 124, 52, 61, 131, 106, 230, 189, 10, 54, 237, 189, 105, 36, 148, 188, 238, 217, 249, 61, 56, 28, 35, 62, 237, 126, 19, 61, 158, 127, 139, 189, 132, 247, 180, 59, 145, 244, 40, 190, 199, 50, 35, 190, 17, 59, 139, 189, 114, 22, 167, 61, 237, 97, 7, 62, 206, 162, 27, 189, 188, 249, 202, 189, 153, 169, 12, 190, 30, 55, 247, 186, 119, 213, 245, 61, 110, 190, 5, 189, 19, 161, 148, 189, 12, 231, 223, 60, 178, 213, 205, 61, 136, 168, 176, 189, 208, 58, 44, 62, 216, 9, 38, 62, 137, 65, 100, 60, 118, 120, 198, 61, 251, 166, 129, 189, 40, 98, 30, 190, 220, 63, 240, 61, 194, 126, 25, 190, 192, 81, 189, 61, 85, 249, 18, 62, 250, 226, 207, 58, 221, 135, 15, 62, 50, 114, 100, 61, 96, 192, 217, 61, 100, 31, 3, 62, 131, 161, 65, 61, 10, 83, 175, 61, 98, 220, 30, 190, 138, 229, 113, 61, 198, 128, 18, 62, 63, 225, 76, 61, 144, 173, 147, 189, 88, 187, 98, 61, 8, 188, 18, 62, 216, 99, 34, 189, 37, 20, 241, 61, 15, 49, 126, 189, 75, 126, 23, 190, 250, 204, 138, 61, 52, 59, 154, 189, 255, 229, 127, 60, 127, 122, 44, 62, 36, 187, 36, 59, 210, 64, 49, 62, 81, 207, 242, 189, 106, 148, 30, 187, 154, 194, 33, 188, 46, 178, 245, 189, 86, 41, 67, 56, 70, 209, 153, 61, 189, 142, 254, 61, 182, 239, 223, 189, 219, 121, 221, 60, 225, 174, 147, 61, 201, 226, 86, 188, 183, 32, 46, 190, 79, 186, 26, 62, 80, 18, 96, 188, 221, 3, 64, 189, 150, 52, 49, 190, 179, 72, 33, 190, 64, 0, 233, 189, 227, 8, 237, 189, 27, 99, 120, 60, 176, 172, 229, 189, 205, 66, 40, 189, 123, 55, 142, 61, 107, 169, 227, 60, 240, 239, 14, 61, 30, 94, 29, 62, 169, 109, 48, 190, 51, 222, 6, 190, 199, 177, 222, 186, 221, 120, 168, 61, 33, 196, 49, 190, 233, 38, 44, 190, 6, 127, 89, 61, 238, 62, 158, 61, 33, 86, 75, 61, 164, 207, 41, 189, 249, 213, 148, 61, 40, 255, 202, 189, 224, 166, 45, 61, 108, 176, 5, 62, 216, 14, 203, 61, 137, 184, 218, 61, 116, 102, 70, 189, 129, 11, 19, 62, 55, 137, 216, 61, 94, 248, 87, 61, 88, 90, 50, 190, 119, 221, 205, 61, 114, 150, 38, 62, 242, 4, 40, 190, 252, 237, 116, 58, 77, 139, 22, 62, 104, 65, 185, 189, 165, 190, 225, 188, 175, 197, 19, 60, 170, 71, 178, 189, 204, 212, 109, 189, 32, 103, 181, 188, 149, 46, 244, 61, 75, 231, 80, 189, 20, 141, 50, 190, 117, 70, 242, 60, 104, 148, 17, 189, 72, 205, 27, 62, 140, 163, 125, 189, 186, 146, 229, 61, 137, 225, 171, 189, 10, 67, 4, 62, 113, 233, 255, 59, 138, 147, 186, 61, 168, 168, 190, 189, 61, 81, 52, 190, 228, 43, 1, 61, 141, 61, 72, 61, 221, 188, 139, 188, 162, 97, 39, 61, 63, 89, 18, 190, 247, 188, 21, 60, 83, 211, 37, 62, 101, 18, 93, 61, 39, 105, 205, 189, 248, 35, 249, 60, 151, 140, 189, 189, 169, 81, 187, 61, 86, 208, 14, 188, 249, 8, 5, 190, 140, 204, 245, 60, 166, 167, 251, 61, 54, 98, 227, 61, 150, 201, 81, 189, 166, 161, 179, 61, 100, 108, 40, 190, 49, 96, 176, 61, 161, 42, 73, 188, 164, 75, 235, 61, 36, 203, 21, 190, 170, 73, 21, 61, 23, 72, 15, 190, 71, 88, 19, 62, 88, 174, 160, 61, 232, 138, 242, 189, 157, 12, 142, 61, 40, 43, 139, 61, 75, 187, 236, 61, 55, 206, 226, 188, 147, 10, 61, 189, 228, 230, 7, 60, 156, 97, 226, 61, 94, 56, 236, 189, 245, 216, 146, 188, 202, 26, 77, 189, 108, 103, 18, 190, 127, 237, 36, 62, 93, 23, 44, 62, 145, 59, 50, 60, 14, 243, 64, 61, 76, 168, 241, 61, 60, 30, 186, 61, 5, 92, 18, 61, 225, 206, 9, 190, 82, 200, 51, 190, 17, 101, 48, 190, 168, 210, 134, 61, 159, 250, 36, 62, 135, 82, 81, 189, 155, 114, 0, 190, 208, 164, 132, 60, 143, 190, 203, 189, 145, 213, 169, 189, 158, 113, 54, 189, 167, 106, 19, 190, 10, 193, 33, 62, 65, 102, 80, 61, 224, 79, 1, 190, 32, 69, 230, 188, 93, 169, 169, 189, 63, 85, 43, 189, 105, 152, 37, 190, 117, 209, 41, 190, 245, 115, 50, 62, 67, 121, 2, 62, 184, 106, 55, 59, 127, 168, 123, 60, 220, 194, 123, 61, 131, 206, 29, 189, 198, 132, 43, 190, 116, 27, 34, 190, 160, 163, 38, 62, 105, 127, 215, 188, 29, 154, 48, 62, 97, 3, 29, 62, 98, 93, 168, 60, 202, 49, 222, 58, 69, 75, 190, 61, 107, 196, 49, 60, 96, 251, 156, 189, 218, 132, 142, 61, 33, 243, 8, 61, 49, 37, 21, 62, 176, 40, 142, 189, 89, 61, 190, 61, 137, 216, 167, 189, 171, 17, 34, 60, 41, 131, 170, 61, 191, 73, 66, 189, 162, 29, 61, 61, 140, 15, 103, 189, 39, 93, 0, 62, 19, 183, 185, 60, 28, 188, 226, 189, 20, 79, 46, 61, 245, 232, 221, 186, 172, 187, 46, 190, 29, 47, 237, 61, 171, 100, 25, 62, 104, 43, 43, 59, 92, 23, 103, 61, 116, 159, 168, 184, 250, 170, 128, 61, 59, 251, 20, 190, 252, 174, 140, 189, 15, 223, 49, 190, 200, 7, 2, 190, 85, 137, 27, 190, 29, 29, 52, 62, 18, 84, 55, 61, 96, 145, 236, 189, 224, 9, 47, 189, 7, 198, 39, 190, 80, 43, 21, 62, 110, 232, 250, 188, 163, 105, 4, 59, 125, 160, 135, 60, 32, 216, 46, 60, 9, 187, 218, 61, 110, 177, 0, 61, 55, 159, 21, 190, 130, 212, 198, 60, 106, 166, 150, 189, 44, 243, 117, 61, 21, 160, 33, 62, 232, 241, 114, 61, 136, 21, 27, 190, 10, 231, 51, 62, 67, 102, 251, 189, 101, 181, 11, 190, 36, 178, 201, 61, 152, 203, 227, 189, 114, 63, 51, 190, 25, 78, 189, 189, 212, 196, 217, 188, 205, 113, 223, 61, 192, 134, 50, 190, 248, 145, 167, 61, 187, 77, 26, 190, 57, 81, 196, 189, 61, 162, 103, 61, 191, 207, 160, 61, 255, 234, 221, 189, 26, 5, 211, 188, 148, 232, 42, 62, 19, 158, 50, 61, 24, 93, 164, 185, 160, 210, 12, 61, 19, 188, 2, 62, 8, 121, 52, 61, 183, 141, 41, 190, 110, 5, 161, 189, 49, 218, 30, 62, 223, 173, 29, 62, 205, 72, 17, 188, 77, 57, 40, 62, 205, 250, 49, 62, 119, 82, 13, 62, 183, 149, 6, 190, 10, 253, 73, 61, 221, 59, 172, 61, 138, 204, 125, 189, 133, 8, 38, 62, 13, 55, 145, 189, 11, 179, 235, 61, 36, 126, 93, 188, 177, 12, 253, 61, 147, 177, 225, 189, 127, 20, 208, 61, 7, 38, 55, 189, 122, 202, 21, 62, 224, 178, 161, 189, 63, 88, 208, 189, 48, 188, 242, 186, 43, 172, 76, 188, 36, 71, 93, 61, 134, 252, 28, 61, 255, 82, 135, 188, 198, 186, 197, 189, 248, 242, 8, 62, 76, 111, 10, 190, 188, 137, 21, 62, 108, 242, 83, 60, 170, 103, 133, 188, 28, 245, 68, 189, 177, 63, 89, 61, 34, 178, 251, 61, 98, 248, 191, 61, 28, 143, 179, 188, 22, 83, 82, 60, 11, 164, 178, 61, 156, 86, 38, 190, 23, 60, 102, 60, 93, 62, 176, 59, 244, 29, 231, 189, 123, 200, 17, 62, 162, 224, 200, 189, 212, 248, 224, 61, 63, 11, 91, 188, 48, 152, 36, 62, 48, 120, 15, 59, 81, 181, 196, 60, 238, 59, 45, 62, 31, 76, 245, 60, 10, 224, 29, 62, 78, 104, 106, 188, 172, 95, 48, 189, 221, 176, 108, 60, 200, 77, 183, 189, 133, 111, 161, 61, 116, 236, 130, 61, 75, 174, 149, 188, 195, 222, 22, 62, 50, 153, 47, 189, 89, 96, 98, 60, 231, 169, 130, 189, 212, 14, 248, 60, 170, 245, 36, 62, 127, 84, 121, 188, 143, 179, 23, 190, 38, 75, 41, 190, 29, 220, 90, 189, 81, 209, 128, 188, 245, 19, 47, 62, 200, 192, 229, 189, 46, 21, 179, 60, 203, 84, 144, 61, 12, 31, 103, 61, 250, 248, 251, 61, 138, 139, 225, 189, 175, 22, 191, 189, 204, 152, 43, 190, 61, 174, 227, 188, 78, 171, 150, 189, 170, 9, 198, 189, 5, 43, 163, 61, 248, 78, 14, 62, 88, 108, 116, 189, 192, 200, 196, 61, 246, 88, 233, 189, 158, 86, 6, 190, 129, 94, 23, 190, 11, 118, 124, 188, 210, 180, 51, 62, 57, 132, 36, 190, 191, 132, 11, 190, 71, 153, 17, 61, 5, 236, 151, 189, 113, 164, 255, 189, 14, 216, 59, 61, 26, 3, 234, 60, 238, 33, 145, 188, 138, 172, 137, 189, 49, 85, 4, 62, 90, 219, 226, 61, 140, 102, 208, 189, 62, 121, 226, 189, 0, 179, 132, 61, 168, 186, 107, 61, 195, 16, 124, 189, 33, 21, 25, 190, 43, 165, 22, 62, 92, 33, 29, 62, 133, 24, 51, 62, 182, 29, 147, 61, 26, 174, 144, 189, 39, 143, 186, 189, 4, 102, 245, 189, 65, 235, 7, 189, 12, 161, 177, 189, 123, 213, 164, 188, 134, 156, 47, 62, 68, 199, 33, 62, 174, 243, 197, 61, 120, 255, 157, 189, 188, 211, 11, 190, 232, 161, 161, 189, 15, 207, 181, 61, 57, 169, 218, 60, 12, 249, 61, 189, 129, 176, 153, 61, 101, 127, 9, 62, 243, 44, 239, 60, 71, 171, 252, 188, 125, 166, 154, 189, 209, 114, 229, 61, 149, 245, 60, 189, 103, 175, 16, 188, 248, 11, 147, 61, 63, 124, 138, 61, 184, 12, 41, 62, 180, 243, 117, 189, 66, 103, 42, 190, 243, 158, 237, 61, 5, 47, 30, 190, 143, 3, 15, 190, 57, 246, 111, 189, 2, 201, 145, 60, 215, 239, 3, 188, 181, 207, 138, 61, 247, 210, 73, 60, 254, 15, 165, 187, 50, 185, 38, 190, 202, 72, 107, 61, 168, 41, 243, 189, 127, 82, 143, 189, 89, 53, 188, 61, 249, 215, 9, 190, 94, 84, 82, 189, 83, 150, 125, 188, 78, 251, 165, 61, 111, 70, 216, 189, 117, 8, 8, 189, 27, 97, 164, 61, 121, 229, 49, 190, 244, 244, 44, 62, 153, 158, 154, 61, 218, 132, 56, 188, 175, 230, 6, 190, 149, 57, 37, 62, 19, 129, 197, 61, 154, 99, 13, 62, 183, 122, 191, 189, 8, 20, 37, 62, 135, 190, 39, 62, 127, 17, 165, 61, 123, 65, 52, 190, 253, 182, 155, 188, 162, 179, 17, 62, 65, 158, 169, 188, 159, 39, 201, 189, 115, 88, 54, 189, 9, 211, 192, 189, 181, 4, 178, 189, 179, 116, 6, 189, 50, 133, 41, 190, 53, 60, 233, 61, 12, 49, 171, 189, 25, 44, 5, 62, 104, 130, 206, 61, 127, 74, 22, 62, 176, 8, 52, 187, 89, 124, 20, 62, 59, 138, 134, 61, 208, 49, 33, 189, 112, 47, 150, 61, 132, 152, 116, 60, 82, 219, 229, 189, 18, 81, 249, 189, 86, 106, 111, 188, 215, 18, 252, 61, 82, 183, 69, 60, 118, 166, 243, 189, 248, 236, 47, 62, 149, 123, 75, 60, 44, 11, 15, 62, 160, 64, 36, 190, 182, 166, 55, 189, 230, 47, 24, 190, 208, 238, 175, 187, 22, 198, 166, 189, 20, 174, 253, 188, 56, 94, 232, 188, 235, 28, 20, 190, 58, 199, 45, 61, 126, 0, 43, 189, 199, 115, 11, 62, 31, 111, 128, 189, 149, 6, 106, 189, 136, 158, 163, 188, 216, 239, 40, 190, 70, 233, 18, 62, 174, 234, 5, 61, 102, 172, 152, 61, 174, 129, 147, 189, 102, 92, 68, 61, 125, 14, 212, 188, 191, 72, 37, 62, 140, 37, 2, 60, 45, 196, 11, 190, 146, 115, 17, 190, 124, 150, 234, 189, 186, 42, 105, 189, 170, 127, 1, 189, 253, 219, 183, 60, 132, 29, 237, 188, 77, 142, 121, 60, 159, 165, 214, 60, 54, 213, 25, 190, 255, 209, 22, 190, 196, 4, 30, 62, 202, 179, 193, 189, 122, 134, 77, 189, 109, 81, 207, 189, 166, 161, 134, 189, 102, 69, 145, 187, 221, 22, 182, 61, 170, 79, 31, 188, 50, 48, 169, 189, 45, 48, 63, 189, 101, 107, 27, 61, 166, 106, 167, 189, 205, 206, 67, 187, 10, 45, 56, 188, 1, 162, 8, 190, 68, 18, 187, 60, 119, 121, 32, 190, 51, 65, 187, 61, 39, 221, 46, 62, 90, 89, 185, 189, 12, 109, 180, 189, 214, 202, 5, 60, 80, 200, 138, 61, 71, 225, 3, 62, 145, 155, 212, 61, 91, 33, 68, 188, 200, 235, 180, 188, 202, 81, 64, 61, 190, 51, 0, 60, 25, 116, 32, 188, 148, 175, 35, 62, 236, 1, 127, 189, 118, 171, 28, 62, 56, 34, 38, 61, 188, 158, 38, 61, 4, 38, 174, 189, 143, 72, 193, 189, 154, 208, 23, 190, 170, 221, 192, 61, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 253, 204, 10, 190, 81, 65, 25, 62, 11, 242, 17, 190, 184, 109, 187, 189, 111, 18, 46, 62, 76, 214, 202, 187, 145, 208, 188, 189, 235, 40, 222, 61, 30, 171, 226, 189, 8, 112, 245, 189, 1, 53, 54, 186, 116, 105, 111, 188, 77, 150, 1, 62, 120, 205, 87, 189, 82, 51, 30, 62, 250, 196, 124, 61, 15, 138, 19, 190, 205, 81, 180, 189, 64, 144, 50, 62, 125, 164, 49, 62, 210, 174, 189, 189, 121, 123, 96, 61, 28, 157, 215, 61, 181, 113, 187, 189, 54, 214, 44, 61, 130, 179, 2, 189, 181, 146, 27, 61, 214, 190, 34, 190, 201, 38, 115, 189, 35, 166, 51, 60, 134, 138, 175, 61, 21, 208, 19, 190, 86, 145, 172, 60, 101, 120, 14, 62, 83, 121, 204, 188, 45, 205, 37, 62, 137, 92, 92, 60, 14, 22, 5, 62, 145, 252, 207, 61, 119, 133, 214, 189, 8, 165, 11, 190, 174, 21, 178, 61, 16, 23, 5, 190, 198, 75, 42, 190, 84, 238, 225, 61, 106, 38, 160, 61, 189, 226, 246, 61, 89, 167, 11, 190, 104, 209, 124, 189, 89, 250, 97, 189, 7, 104, 249, 61, 118, 82, 50, 61, 240, 245, 26, 190, 242, 157, 163, 61, 84, 114, 135, 189, 135, 120, 192, 60, 62, 14, 32, 189, 121, 36, 26, 62, 67, 105, 152, 189, 166, 12, 211, 61, 73, 184, 147, 189, 215, 113, 133, 61, 156, 170, 40, 62, 170, 26, 96, 60, 211, 11, 90, 61, 174, 48, 16, 190, 135, 186, 165, 61, 14, 52, 121, 189, 111, 204, 148, 189, 39, 4, 83, 61, 17, 88, 154, 59, 213, 149, 0, 189, 195, 209, 242, 189, 77, 139, 165, 189, 78, 115, 36, 62, 214, 146, 229, 61, 116, 150, 164, 189, 220, 50, 250, 189, 76, 0, 48, 62, 31, 101, 38, 190, 128, 193, 19, 62, 54, 248, 218, 61, 150, 235, 3, 190, 1, 208, 107, 189, 28, 83, 149, 61, 103, 62, 189, 60, 247, 245, 107, 61, 156, 176, 47, 190, 249, 180, 1, 189, 31, 160, 255, 189, 6, 66, 45, 190, 211, 115, 137, 189, 247, 79, 50, 190, 92, 199, 112, 61, 153, 36, 28, 62, 246, 69, 247, 189, 167, 55, 162, 61, 178, 192, 236, 61, 123, 4, 21, 62, 199, 121, 57, 189, 25, 199, 18, 62, 43, 19, 26, 189, 146, 160, 107, 189, 236, 11, 1, 62, 79, 196, 175, 189, 215, 247, 116, 61, 240, 129, 150, 60, 2, 6, 10, 62, 196, 199, 50, 62, 52, 141, 31, 190, 160, 104, 20, 61, 169, 139, 17, 62, 251, 167, 222, 189, 253, 144, 150, 189, 96, 1, 35, 61, 255, 167, 138, 189, 164, 61, 29, 190, 127, 86, 8, 62, 37, 192, 175, 61, 41, 66, 36, 62, 103, 169, 18, 62, 252, 148, 49, 190, 75, 63, 213, 60, 21, 7, 36, 62, 21, 214, 222, 189, 249, 118, 12, 190, 237, 189, 124, 61, 189, 123, 197, 61, 50, 78, 25, 187, 135, 33, 146, 189, 59, 46, 189, 60, 102, 105, 147, 189, 124, 8, 244, 61, 162, 136, 17, 62, 114, 131, 80, 61, 136, 238, 67, 188, 172, 28, 48, 190, 43, 94, 227, 61, 206, 72, 26, 190, 214, 216, 8, 190, 113, 238, 46, 61, 47, 80, 159, 61, 12, 218, 241, 188, 75, 16, 32, 190, 159, 83, 239, 61, 48, 211, 98, 61, 58, 240, 47, 62, 97, 135, 7, 190, 85, 176, 228, 61, 171, 238, 169, 61, 207, 99, 17, 62, 11, 182, 40, 62, 185, 160, 34, 61, 144, 160, 26, 62, 175, 90, 211, 61, 178, 29, 58, 189, 46, 201, 22, 188, 44, 52, 52, 190, 114, 53, 2, 62, 149, 218, 209, 189, 126, 190, 243, 189, 115, 90, 222, 61, 225, 223, 128, 61, 21, 63, 11, 62, 220, 62, 193, 61, 55, 154, 38, 190, 159, 60, 159, 189, 79, 0, 78, 189, 69, 189, 137, 61, 238, 145, 91, 61, 218, 193, 207, 61, 230, 102, 9, 62, 209, 6, 2, 190, 245, 32, 184, 189, 251, 164, 218, 60, 182, 109, 164, 189, 157, 31, 252, 61, 43, 37, 139, 61, 0, 128, 156, 189, 93, 172, 10, 62, 23, 202, 245, 189, 15, 16, 115, 189, 232, 121, 177, 60, 102, 81, 50, 189, 154, 115, 44, 62, 119, 24, 176, 189, 200, 0, 39, 190, 185, 235, 130, 61, 158, 229, 41, 189, 171, 139, 151, 61, 223, 177, 10, 190, 59, 126, 246, 61, 106, 92, 235, 189, 181, 193, 27, 189, 161, 172, 230, 61, 168, 43, 233, 61, 167, 123, 190, 61, 87, 243, 22, 62, 218, 11, 13, 190, 69, 84, 128, 61, 183, 26, 198, 189, 147, 91, 232, 189, 171, 111, 15, 190, 114, 84, 166, 61, 177, 231, 156, 189, 151, 249, 214, 187, 96, 158, 60, 61, 186, 24, 206, 60, 19, 133, 111, 188, 27, 202, 129, 60, 213, 90, 97, 61, 87, 95, 25, 62, 195, 234, 111, 60, 78, 130, 28, 61, 144, 122, 21, 62, 137, 123, 206, 61, 178, 115, 150, 189, 147, 227, 167, 189, 22, 12, 28, 60, 197, 125, 171, 189, 78, 250, 20, 62, 62, 87, 27, 60, 95, 245, 206, 189, 175, 247, 104, 61, 1, 243, 132, 189, 30, 148, 70, 60, 234, 231, 111, 61, 200, 175, 217, 61, 204, 247, 78, 189, 241, 1, 45, 188, 164, 129, 28, 60, 212, 144, 10, 61, 157, 157, 113, 61, 136, 95, 81, 61, 41, 92, 161, 188, 219, 18, 1, 190, 160, 105, 168, 187, 118, 219, 231, 189, 96, 46, 159, 61, 0, 192, 87, 189, 120, 110, 138, 60, 170, 85, 220, 61, 123, 120, 232, 61, 47, 93, 206, 59, 191, 198, 8, 62, 106, 111, 17, 190, 196, 98, 27, 62, 250, 141, 49, 190, 135, 88, 249, 61, 30, 127, 204, 189, 192, 143, 221, 61, 159, 75, 145, 189, 208, 118, 38, 62, 126, 211, 144, 189, 120, 28, 255, 61, 17, 208, 37, 190, 132, 46, 21, 62, 88, 28, 51, 62, 72, 13, 23, 189, 6, 188, 227, 188, 232, 132, 45, 62, 197, 67, 230, 61, 73, 217, 133, 189, 196, 83, 96, 61, 176, 33, 52, 62, 74, 55, 208, 61, 13, 125, 31, 60, 203, 165, 182, 189, 139, 159, 36, 62, 168, 206, 245, 61, 62, 45, 23, 190, 111, 85, 31, 189, 233, 3, 142, 189, 49, 221, 17, 190, 180, 7, 45, 190, 138, 215, 11, 62, 246, 28, 250, 188, 156, 79, 10, 190, 38, 144, 102, 61, 143, 114, 60, 189, 99, 209, 245, 188, 129, 138, 37, 190, 179, 143, 151, 60, 24, 143, 51, 62, 113, 225, 213, 189, 206, 16, 48, 62, 5, 251, 40, 190, 35, 61, 9, 62, 209, 162, 248, 189, 178, 35, 175, 189, 191, 51, 194, 189, 45, 73, 185, 61, 102, 83, 157, 189, 10, 245, 155, 61, 154, 94, 193, 59, 131, 163, 43, 190, 173, 130, 254, 187, 6, 183, 162, 189, 48, 93, 52, 61, 187, 79, 195, 61, 95, 135, 50, 62, 202, 78, 44, 189, 90, 65, 166, 61, 132, 230, 152, 60, 103, 246, 192, 61, 167, 16, 42, 188, 105, 167, 29, 190, 49, 69, 142, 61, 165, 84, 233, 61, 58, 197, 238, 187, 201, 96, 13, 190, 123, 191, 162, 189, 59, 135, 1, 62, 131, 233, 42, 61, 108, 161, 26, 190, 203, 82, 34, 190, 67, 227, 25, 62, 22, 12, 78, 188, 62, 242, 109, 61, 238, 29, 32, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 228, 5, 190, 7, 119, 130, 61, 182, 47, 122, 189, 43, 6, 221, 189, 32, 126, 144, 61, 40, 185, 14, 189, 117, 210, 14, 189, 33, 77, 161, 189, 133, 63, 174, 188, 48, 26, 239, 188, 111, 12, 22, 190, 178, 216, 37, 62, 168, 131, 214, 61, 40, 189, 184, 187, 92, 112, 211, 60, 56, 49, 23, 62, 16, 114, 34, 190, 29, 6, 23, 190, 86, 28, 171, 61, 36, 78, 109, 189, 242, 236, 21, 190, 217, 106, 197, 189, 49, 230, 46, 190, 169, 194, 154, 60, 48, 104, 164, 61, 126, 242, 12, 62, 128, 225, 7, 189, 32, 95, 131, 188, 208, 193, 52, 190, 86, 153, 162, 189, 249, 184, 30, 62, 15, 163, 193, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 96, 42, 190, 198, 81, 43, 62, 209, 54, 144, 61, 6, 228, 31, 62, 22, 170, 1, 190, 242, 238, 30, 190, 73, 27, 144, 189, 132, 56, 157, 60, 166, 48, 244, 61, 169, 5, 124, 60, 213, 117, 166, 61, 234, 229, 136, 189, 254, 175, 7, 62, 42, 82, 142, 60, 200, 118, 53, 189, 190, 246, 77, 188, 215, 0, 19, 62, 192, 73, 4, 62, 239, 79, 173, 61, 249, 130, 80, 189, 65, 235, 158, 60, 215, 179, 138, 61, 136, 222, 49, 190, 118, 229, 190, 189, 101, 193, 124, 187, 45, 219, 245, 189, 203, 224, 204, 61, 119, 167, 34, 190, 44, 47, 203, 60, 200, 237, 169, 60, 136, 6, 233, 60, 155, 171, 162, 61, 81, 118, 254, 189, 39, 117, 44, 190, 171, 196, 90, 188, 115, 106, 184, 61, 147, 29, 21, 190, 92, 238, 24, 190, 226, 201, 33, 62, 48, 63, 182, 189, 16, 85, 175, 189, 4, 82, 185, 61, 65, 148, 22, 190, 42, 4, 5, 190, 162, 0, 122, 188, 15, 224, 5, 190, 76, 157, 234, 60, 72, 217, 32, 62, 175, 70, 41, 61, 64, 242, 21, 190, 69, 23, 120, 59, 33, 199, 126, 188, 98, 103, 163, 189, 195, 254, 65, 61, 71, 60, 42, 62, 56, 105, 48, 189, 236, 209, 13, 190, 18, 78, 187, 61, 15, 113, 253, 189, 150, 142, 153, 61, 30, 180, 220, 61, 144, 164, 37, 189, 127, 115, 23, 190, 40, 159, 88, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 248, 77, 189, 89, 119, 103, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 161, 234, 190, 171, 139, 31, 63, 167, 63, 160, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {112, 28, 111, 189, 76, 59, 152, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}