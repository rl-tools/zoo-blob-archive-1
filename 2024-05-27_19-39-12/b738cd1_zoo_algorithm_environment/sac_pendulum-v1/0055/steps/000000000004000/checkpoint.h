// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 111, 21, 189, 138, 112, 229, 188, 223, 15, 0, 63, 158, 241, 169, 190, 195, 209, 231, 188, 59, 253, 24, 191, 72, 231, 102, 62, 85, 229, 141, 60, 204, 135, 13, 191, 84, 123, 22, 63, 14, 155, 181, 63, 47, 81, 160, 62, 249, 218, 3, 190, 60, 98, 220, 62, 59, 81, 164, 60, 85, 185, 135, 190, 55, 105, 173, 62, 238, 115, 9, 191, 144, 215, 5, 190, 187, 97, 12, 191, 155, 107, 85, 63, 21, 255, 197, 190, 46, 230, 67, 63, 101, 162, 230, 189, 185, 17, 52, 62, 65, 254, 29, 191, 95, 48, 108, 61, 184, 138, 71, 190, 48, 89, 152, 62, 24, 140, 172, 190, 85, 82, 226, 190, 109, 32, 227, 190, 109, 60, 57, 190, 117, 50, 206, 190, 28, 237, 248, 185, 141, 162, 6, 63, 30, 46, 71, 62, 167, 60, 72, 63, 113, 155, 150, 62, 0, 232, 116, 190, 64, 14, 122, 191, 11, 72, 6, 189, 159, 150, 211, 190, 190, 8, 12, 63, 146, 225, 218, 190, 36, 177, 221, 190, 73, 85, 52, 63, 245, 219, 76, 61, 86, 4, 26, 62, 137, 15, 4, 63, 54, 190, 5, 191, 129, 218, 11, 191, 207, 30, 10, 191, 155, 109, 60, 63, 37, 216, 192, 190, 125, 147, 33, 190, 66, 250, 58, 191, 203, 19, 55, 63, 235, 53, 92, 190, 173, 193, 5, 191, 241, 56, 54, 191, 14, 203, 187, 62, 233, 63, 179, 189, 117, 177, 129, 190, 103, 113, 22, 191, 255, 160, 67, 62, 228, 229, 89, 62, 37, 182, 97, 191, 18, 110, 65, 190, 157, 187, 4, 63, 151, 255, 82, 191, 201, 142, 90, 190, 6, 81, 159, 190, 168, 70, 39, 191, 242, 83, 151, 190, 124, 45, 54, 190, 223, 15, 3, 191, 9, 99, 63, 63, 105, 54, 46, 191, 7, 219, 55, 63, 137, 153, 161, 60, 215, 217, 90, 63, 26, 119, 76, 63, 98, 11, 245, 62, 120, 141, 249, 62, 192, 62, 222, 62, 232, 219, 255, 190, 82, 46, 189, 62, 191, 255, 91, 191, 40, 188, 92, 60, 69, 53, 5, 62, 33, 132, 223, 190, 31, 36, 128, 190, 42, 64, 36, 63, 37, 141, 46, 62, 145, 122, 57, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 159, 161, 190, 184, 143, 2, 62, 132, 4, 41, 191, 140, 170, 170, 61, 48, 153, 206, 62, 193, 54, 238, 188, 56, 135, 141, 188, 133, 187, 84, 189, 45, 239, 196, 62, 192, 203, 236, 189, 255, 217, 242, 62, 194, 89, 25, 190, 243, 161, 209, 190, 253, 224, 222, 61, 107, 198, 141, 190, 21, 25, 13, 63, 140, 137, 199, 189, 94, 122, 224, 190, 14, 245, 18, 62, 49, 8, 131, 61, 179, 45, 4, 190, 224, 39, 203, 62, 238, 184, 55, 63, 161, 86, 4, 62, 225, 185, 49, 191, 103, 142, 254, 190, 35, 239, 178, 62, 179, 42, 236, 62, 158, 184, 1, 191, 53, 195, 50, 63, 41, 202, 96, 191, 237, 146, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 17, 86, 62, 63, 126, 192, 189, 116, 5, 1, 189, 220, 208, 18, 190, 212, 127, 197, 189, 154, 48, 146, 189, 212, 160, 167, 62, 235, 92, 94, 62, 241, 106, 164, 60, 237, 201, 85, 61, 231, 27, 11, 190, 132, 243, 36, 61, 54, 137, 147, 61, 201, 60, 186, 188, 5, 89, 46, 190, 111, 205, 216, 189, 234, 11, 203, 61, 239, 9, 212, 62, 210, 225, 230, 189, 85, 76, 156, 190, 234, 45, 128, 190, 221, 51, 185, 62, 21, 154, 39, 62, 119, 116, 23, 190, 153, 190, 47, 190, 91, 181, 133, 62, 204, 121, 32, 189, 193, 143, 245, 189, 50, 212, 34, 189, 18, 124, 56, 62, 90, 22, 1, 62, 36, 50, 119, 190, 138, 52, 20, 62, 185, 107, 200, 58, 56, 68, 0, 61, 138, 97, 28, 189, 126, 203, 127, 62, 108, 169, 89, 62, 17, 175, 121, 190, 240, 92, 192, 62, 164, 40, 49, 190, 25, 218, 45, 62, 56, 238, 189, 189, 243, 109, 233, 190, 175, 57, 159, 62, 225, 178, 85, 190, 177, 111, 57, 60, 170, 181, 36, 62, 255, 236, 27, 62, 142, 193, 171, 190, 213, 75, 120, 61, 123, 14, 143, 189, 73, 26, 250, 61, 230, 24, 136, 190, 103, 58, 33, 189, 252, 148, 107, 190, 62, 206, 132, 190, 225, 5, 3, 62, 80, 101, 246, 188, 137, 209, 14, 189, 154, 53, 205, 188, 218, 154, 12, 190, 93, 60, 4, 61, 117, 157, 242, 61, 86, 122, 9, 189, 162, 185, 142, 189, 209, 128, 19, 61, 125, 145, 188, 190, 26, 94, 100, 190, 208, 120, 200, 59, 75, 80, 23, 62, 206, 234, 29, 190, 146, 204, 212, 61, 62, 19, 191, 189, 135, 27, 2, 190, 96, 201, 14, 62, 85, 173, 166, 189, 218, 76, 142, 188, 89, 154, 137, 190, 8, 111, 80, 190, 172, 153, 43, 189, 253, 28, 154, 62, 122, 187, 214, 61, 226, 126, 137, 62, 110, 235, 6, 190, 41, 121, 56, 62, 37, 121, 175, 61, 119, 235, 122, 62, 223, 116, 56, 190, 228, 241, 164, 189, 194, 10, 28, 190, 245, 62, 206, 60, 67, 220, 48, 62, 8, 193, 134, 62, 61, 150, 81, 189, 50, 45, 191, 61, 133, 124, 15, 62, 203, 246, 30, 61, 45, 167, 231, 59, 35, 106, 192, 62, 59, 187, 233, 60, 29, 226, 47, 62, 53, 54, 19, 190, 59, 98, 85, 61, 23, 207, 89, 190, 222, 208, 143, 62, 236, 186, 49, 62, 210, 29, 66, 190, 153, 179, 128, 62, 56, 199, 78, 60, 132, 62, 58, 60, 130, 232, 231, 189, 46, 116, 200, 188, 155, 90, 102, 190, 224, 147, 132, 62, 177, 234, 237, 187, 40, 246, 0, 190, 87, 254, 29, 190, 170, 189, 6, 190, 103, 126, 63, 190, 92, 210, 38, 189, 162, 1, 85, 62, 5, 180, 225, 61, 7, 232, 24, 62, 240, 71, 34, 190, 44, 123, 44, 190, 78, 128, 183, 61, 241, 209, 16, 62, 155, 217, 250, 189, 244, 80, 88, 189, 57, 197, 132, 189, 45, 175, 209, 62, 10, 199, 127, 59, 224, 176, 80, 62, 254, 147, 145, 189, 119, 45, 80, 61, 91, 232, 90, 61, 29, 135, 11, 61, 133, 54, 67, 190, 11, 136, 139, 61, 134, 20, 101, 190, 229, 11, 245, 61, 73, 117, 160, 62, 155, 204, 178, 61, 224, 250, 96, 61, 5, 67, 27, 190, 54, 151, 6, 62, 182, 225, 154, 61, 212, 58, 116, 62, 254, 136, 8, 62, 96, 35, 25, 190, 162, 166, 183, 189, 207, 29, 153, 61, 209, 27, 43, 61, 66, 253, 167, 187, 141, 211, 78, 62, 20, 66, 153, 61, 138, 172, 36, 189, 164, 114, 146, 60, 147, 25, 155, 61, 209, 163, 129, 190, 137, 92, 152, 190, 12, 129, 159, 61, 97, 233, 2, 62, 170, 65, 24, 62, 73, 66, 117, 190, 156, 35, 150, 62, 107, 226, 22, 191, 55, 225, 122, 62, 27, 157, 191, 61, 89, 66, 27, 189, 228, 105, 138, 61, 30, 206, 46, 190, 97, 136, 237, 62, 240, 206, 43, 190, 232, 182, 243, 188, 177, 145, 150, 61, 222, 192, 253, 61, 74, 239, 4, 191, 185, 151, 161, 61, 247, 21, 43, 190, 208, 172, 190, 61, 175, 223, 171, 61, 103, 24, 27, 189, 26, 241, 185, 190, 113, 63, 28, 190, 158, 100, 11, 190, 176, 236, 223, 189, 89, 98, 54, 189, 90, 152, 168, 62, 189, 166, 72, 61, 204, 235, 224, 61, 216, 12, 152, 62, 90, 186, 104, 189, 203, 181, 193, 190, 199, 117, 176, 62, 222, 31, 44, 62, 2, 93, 166, 189, 183, 213, 98, 191, 192, 23, 109, 61, 130, 143, 174, 189, 144, 190, 113, 62, 46, 199, 36, 60, 8, 144, 83, 190, 131, 209, 102, 60, 64, 40, 90, 62, 28, 204, 237, 62, 25, 159, 60, 62, 179, 95, 131, 189, 38, 54, 61, 191, 185, 235, 143, 62, 2, 238, 180, 189, 212, 36, 119, 62, 155, 140, 16, 190, 66, 121, 120, 61, 128, 51, 72, 190, 187, 94, 198, 190, 117, 223, 200, 61, 229, 4, 75, 62, 77, 149, 81, 61, 75, 101, 80, 190, 106, 108, 197, 189, 174, 26, 216, 190, 224, 93, 199, 188, 22, 111, 168, 190, 228, 166, 55, 190, 98, 67, 23, 190, 182, 30, 23, 191, 233, 103, 151, 61, 247, 187, 15, 191, 123, 11, 179, 62, 101, 236, 77, 61, 82, 239, 118, 62, 210, 169, 138, 191, 173, 14, 214, 61, 247, 208, 68, 62, 252, 90, 142, 190, 218, 138, 119, 190, 49, 87, 168, 191, 113, 253, 142, 61, 212, 95, 187, 61, 78, 54, 103, 62, 166, 180, 166, 190, 134, 161, 82, 61, 79, 136, 28, 60, 167, 124, 126, 62, 209, 145, 131, 61, 90, 119, 241, 61, 114, 179, 77, 62, 17, 171, 179, 190, 86, 247, 60, 62, 66, 123, 233, 189, 183, 15, 39, 190, 51, 175, 13, 62, 8, 157, 138, 61, 249, 135, 161, 62, 43, 160, 4, 189, 202, 173, 245, 61, 196, 249, 55, 190, 52, 33, 134, 189, 83, 233, 71, 190, 20, 238, 232, 61, 111, 12, 193, 190, 24, 250, 38, 190, 117, 124, 141, 60, 182, 51, 109, 61, 194, 154, 245, 61, 175, 174, 42, 190, 72, 13, 53, 60, 84, 240, 163, 61, 19, 231, 102, 61, 36, 154, 189, 190, 168, 138, 76, 189, 206, 181, 168, 189, 61, 212, 8, 62, 69, 235, 121, 188, 239, 36, 92, 190, 106, 249, 193, 189, 13, 65, 95, 188, 244, 121, 186, 62, 6, 104, 121, 62, 158, 225, 29, 60, 227, 147, 150, 190, 249, 14, 55, 62, 220, 63, 105, 61, 162, 148, 71, 62, 161, 110, 17, 190, 227, 248, 34, 188, 190, 21, 206, 190, 212, 66, 85, 189, 58, 46, 134, 62, 23, 218, 245, 190, 53, 111, 189, 189, 95, 131, 195, 189, 195, 77, 166, 62, 134, 31, 229, 189, 182, 157, 186, 188, 131, 79, 132, 190, 2, 156, 88, 61, 100, 181, 219, 62, 245, 124, 188, 190, 37, 106, 116, 190, 52, 71, 178, 190, 174, 153, 153, 189, 85, 207, 83, 189, 156, 143, 189, 62, 81, 183, 44, 61, 253, 148, 160, 62, 216, 145, 3, 189, 163, 54, 88, 62, 232, 211, 169, 60, 183, 81, 99, 62, 161, 89, 37, 190, 176, 163, 166, 190, 68, 202, 14, 62, 51, 32, 72, 190, 112, 37, 167, 62, 95, 208, 38, 62, 255, 106, 230, 61, 218, 119, 78, 62, 213, 46, 40, 188, 214, 219, 154, 61, 141, 151, 150, 188, 206, 101, 232, 61, 193, 163, 57, 62, 139, 113, 137, 62, 53, 167, 131, 190, 22, 67, 155, 62, 66, 245, 47, 191, 95, 213, 48, 62, 244, 84, 254, 61, 201, 1, 189, 190, 27, 161, 199, 61, 119, 96, 226, 190, 207, 213, 173, 62, 32, 73, 79, 62, 155, 62, 15, 189, 115, 141, 191, 190, 158, 177, 79, 61, 22, 25, 95, 190, 31, 225, 159, 62, 10, 8, 236, 61, 107, 191, 60, 190, 107, 155, 225, 189, 84, 154, 191, 188, 180, 112, 28, 189, 61, 158, 94, 61, 241, 162, 45, 61, 142, 29, 45, 190, 34, 215, 14, 191, 67, 226, 10, 60, 123, 35, 76, 189, 71, 61, 101, 189, 222, 82, 34, 61, 99, 147, 213, 190, 231, 43, 216, 61, 89, 151, 225, 61, 119, 29, 60, 62, 46, 243, 65, 191, 246, 213, 240, 187, 218, 230, 188, 189, 205, 225, 162, 62, 100, 230, 223, 61, 18, 214, 10, 191, 235, 128, 125, 189, 49, 185, 27, 190, 49, 113, 223, 62, 130, 170, 252, 61, 118, 208, 14, 188, 74, 252, 120, 191, 101, 212, 139, 62, 98, 232, 1, 190, 111, 65, 31, 186, 40, 34, 93, 61, 29, 85, 244, 189, 37, 121, 140, 190, 60, 93, 208, 190, 77, 12, 72, 189, 36, 104, 38, 61, 114, 86, 7, 189, 188, 10, 12, 60, 107, 43, 11, 190, 24, 250, 21, 191, 117, 102, 193, 62, 15, 212, 102, 61, 206, 159, 0, 190, 198, 66, 124, 60, 100, 67, 98, 190, 0, 51, 78, 189, 111, 132, 124, 189, 188, 22, 52, 62, 206, 203, 18, 61, 145, 62, 31, 62, 175, 121, 194, 190, 4, 102, 73, 189, 223, 12, 131, 62, 245, 194, 70, 61, 151, 234, 107, 189, 109, 223, 106, 187, 175, 60, 91, 61, 106, 128, 45, 62, 63, 40, 2, 61, 156, 8, 88, 60, 57, 126, 83, 62, 57, 27, 82, 190, 134, 52, 34, 62, 234, 167, 139, 188, 177, 104, 146, 62, 227, 183, 42, 61, 151, 161, 130, 61, 176, 231, 73, 190, 206, 190, 244, 188, 68, 214, 125, 188, 132, 133, 108, 62, 30, 209, 101, 189, 55, 38, 94, 189, 96, 16, 85, 190, 74, 71, 22, 190, 114, 54, 90, 187, 129, 112, 130, 190, 133, 103, 47, 60, 251, 188, 156, 190, 153, 193, 108, 62, 203, 160, 72, 190, 72, 25, 96, 62, 148, 183, 44, 191, 73, 184, 23, 189, 217, 191, 237, 61, 172, 174, 102, 190, 52, 236, 45, 188, 51, 123, 35, 191, 37, 92, 72, 189, 65, 87, 160, 59, 161, 161, 149, 62, 62, 211, 171, 190, 28, 79, 53, 62, 220, 250, 117, 188, 130, 245, 17, 189, 75, 105, 31, 62, 103, 129, 64, 61, 179, 141, 90, 62, 248, 128, 30, 190, 244, 44, 56, 62, 139, 149, 22, 189, 227, 91, 62, 189, 103, 207, 121, 62, 204, 4, 107, 189, 107, 33, 181, 62, 78, 104, 106, 188, 46, 195, 125, 189, 21, 68, 6, 60, 95, 67, 186, 189, 132, 252, 157, 61, 248, 243, 89, 61, 174, 130, 160, 188, 195, 222, 22, 62, 26, 52, 108, 189, 75, 214, 38, 60, 141, 58, 168, 189, 175, 72, 218, 60, 170, 245, 36, 62, 61, 142, 209, 188, 228, 183, 24, 190, 158, 147, 41, 190, 187, 17, 128, 189, 123, 130, 151, 188, 196, 6, 29, 62, 4, 46, 2, 190, 74, 44, 171, 60, 236, 20, 133, 61, 191, 216, 3, 61, 146, 100, 219, 61, 9, 16, 238, 189, 232, 136, 193, 189, 151, 12, 43, 190, 174, 180, 16, 189, 170, 232, 169, 189, 219, 76, 244, 189, 16, 130, 155, 61, 140, 174, 7, 62, 101, 0, 181, 189, 182, 33, 7, 188, 246, 88, 233, 189, 230, 253, 253, 186, 150, 193, 198, 189, 112, 182, 227, 188, 177, 155, 158, 61, 152, 183, 106, 61, 112, 56, 247, 190, 14, 248, 31, 188, 119, 235, 38, 191, 244, 72, 83, 190, 59, 16, 17, 62, 149, 163, 174, 190, 191, 151, 29, 61, 218, 207, 201, 187, 115, 40, 184, 61, 248, 242, 59, 61, 181, 72, 82, 190, 16, 214, 16, 190, 124, 113, 57, 62, 128, 10, 102, 189, 103, 148, 175, 190, 202, 9, 152, 190, 43, 165, 22, 62, 29, 39, 192, 61, 32, 45, 125, 62, 169, 53, 112, 61, 148, 58, 175, 189, 78, 163, 210, 190, 4, 102, 245, 189, 37, 160, 27, 191, 214, 246, 160, 190, 106, 61, 146, 189, 95, 46, 145, 62, 0, 253, 166, 190, 205, 115, 132, 61, 252, 42, 23, 190, 143, 106, 134, 62, 112, 162, 43, 190, 57, 73, 91, 62, 184, 14, 1, 190, 165, 102, 78, 189, 14, 150, 245, 62, 67, 248, 128, 190, 16, 183, 198, 189, 246, 244, 146, 190, 243, 156, 149, 189, 168, 64, 108, 62, 178, 102, 226, 62, 202, 62, 173, 189, 88, 86, 141, 62, 177, 120, 1, 62, 63, 57, 216, 62, 127, 107, 216, 188, 160, 98, 184, 61, 247, 234, 37, 62, 132, 93, 203, 190, 79, 218, 12, 190, 191, 44, 121, 190, 231, 41, 52, 62, 144, 198, 180, 61, 177, 51, 34, 62, 95, 170, 67, 62, 185, 49, 33, 190, 163, 191, 96, 190, 248, 58, 70, 61, 158, 23, 193, 190, 26, 153, 141, 189, 59, 216, 29, 60, 17, 108, 117, 62, 246, 158, 20, 190, 115, 251, 164, 61, 113, 248, 20, 190, 44, 130, 235, 189, 159, 231, 164, 62, 4, 246, 30, 190, 6, 246, 132, 190, 17, 240, 12, 189, 185, 25, 81, 61, 64, 128, 30, 188, 34, 249, 121, 62, 33, 119, 167, 61, 137, 198, 82, 62, 216, 26, 3, 62, 69, 41, 151, 61, 60, 234, 73, 62, 123, 88, 167, 62, 236, 135, 14, 62, 48, 210, 98, 190, 200, 79, 34, 189, 103, 18, 35, 62, 168, 66, 6, 189, 102, 196, 71, 188, 188, 165, 39, 189, 5, 246, 51, 61, 41, 96, 149, 190, 60, 254, 162, 187, 165, 149, 13, 190, 64, 170, 190, 190, 254, 239, 229, 189, 151, 83, 244, 61, 131, 73, 247, 62, 189, 44, 146, 61, 152, 185, 29, 62, 116, 142, 13, 61, 63, 197, 10, 62, 52, 229, 161, 62, 192, 248, 179, 190, 53, 11, 186, 189, 138, 87, 151, 190, 206, 76, 36, 190, 68, 92, 150, 61, 140, 2, 24, 63, 229, 14, 181, 59, 241, 192, 110, 61, 162, 29, 85, 62, 196, 52, 51, 62, 137, 248, 119, 62, 138, 215, 232, 61, 21, 2, 17, 189, 41, 202, 156, 190, 24, 141, 4, 189, 224, 211, 148, 190, 64, 140, 141, 60, 221, 215, 241, 61, 225, 21, 21, 190, 222, 124, 67, 62, 225, 124, 6, 61, 23, 31, 1, 190, 23, 156, 171, 189, 60, 220, 105, 190, 55, 81, 200, 189, 246, 130, 249, 190, 109, 75, 209, 62, 92, 131, 92, 189, 255, 220, 150, 62, 131, 238, 43, 190, 228, 75, 129, 60, 119, 161, 24, 62, 196, 195, 7, 62, 98, 111, 72, 62, 224, 225, 117, 190, 78, 132, 69, 190, 231, 225, 56, 190, 182, 50, 108, 62, 82, 149, 148, 190, 139, 253, 118, 190, 35, 102, 150, 190, 125, 146, 76, 62, 10, 205, 83, 62, 9, 57, 20, 60, 43, 96, 149, 190, 140, 114, 121, 62, 173, 16, 18, 190, 35, 114, 227, 189, 38, 211, 7, 190, 84, 119, 4, 62, 233, 187, 101, 189, 53, 148, 247, 189, 148, 241, 62, 190, 202, 122, 55, 190, 114, 148, 226, 189, 154, 125, 128, 190, 138, 229, 51, 189, 215, 189, 24, 190, 115, 44, 148, 61, 47, 223, 11, 190, 35, 107, 244, 61, 52, 240, 74, 191, 139, 138, 37, 62, 245, 133, 143, 62, 65, 253, 154, 190, 45, 35, 131, 190, 148, 252, 214, 190, 194, 76, 148, 61, 10, 171, 255, 61, 253, 168, 115, 62, 213, 155, 36, 190, 10, 163, 248, 61, 15, 186, 69, 61, 193, 106, 27, 61, 164, 232, 245, 60, 201, 92, 175, 62, 115, 45, 27, 60, 183, 85, 19, 61, 210, 46, 183, 61, 164, 245, 51, 60, 216, 191, 2, 190, 56, 104, 174, 187, 177, 124, 131, 190, 20, 24, 145, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 8, 41, 86, 190, 118, 47, 89, 62, 66, 1, 33, 190, 122, 42, 211, 190, 250, 40, 106, 62, 116, 253, 165, 60, 219, 83, 169, 191, 201, 124, 239, 61, 193, 188, 120, 188, 14, 173, 223, 59, 75, 25, 179, 61, 27, 46, 209, 190, 131, 80, 254, 186, 140, 136, 3, 62, 187, 93, 93, 62, 210, 82, 44, 62, 166, 205, 73, 190, 164, 192, 133, 191, 245, 188, 128, 62, 243, 117, 18, 62, 191, 90, 242, 60, 93, 97, 14, 62, 165, 64, 73, 62, 50, 112, 13, 190, 181, 253, 167, 189, 190, 192, 192, 189, 192, 15, 78, 62, 78, 55, 29, 191, 232, 171, 116, 189, 40, 52, 211, 61, 114, 5, 4, 61, 229, 72, 186, 60, 236, 5, 156, 60, 214, 97, 33, 62, 169, 175, 63, 190, 205, 50, 10, 63, 136, 23, 252, 61, 62, 73, 17, 62, 125, 170, 68, 190, 224, 240, 89, 189, 187, 190, 116, 190, 119, 171, 87, 62, 134, 222, 47, 190, 158, 131, 120, 190, 194, 63, 28, 62, 155, 203, 51, 62, 213, 253, 138, 62, 190, 194, 168, 188, 51, 155, 91, 190, 239, 160, 161, 190, 10, 40, 26, 62, 162, 59, 0, 190, 242, 155, 147, 61, 106, 236, 53, 62, 137, 119, 218, 189, 164, 53, 123, 190, 209, 146, 26, 190, 67, 56, 79, 62, 36, 99, 170, 60, 106, 54, 148, 62, 125, 49, 89, 190, 109, 225, 13, 188, 141, 164, 33, 189, 44, 130, 90, 61, 200, 153, 105, 189, 36, 74, 11, 190, 21, 76, 93, 61, 33, 25, 117, 189, 229, 255, 166, 61, 149, 172, 133, 61, 131, 200, 5, 60, 224, 68, 215, 60, 243, 249, 180, 189, 255, 5, 29, 190, 221, 44, 33, 62, 21, 15, 146, 62, 220, 163, 164, 190, 23, 129, 88, 190, 8, 196, 27, 62, 111, 193, 254, 188, 248, 9, 26, 62, 252, 133, 32, 62, 203, 1, 7, 190, 206, 214, 40, 61, 149, 253, 117, 62, 239, 255, 26, 62, 253, 231, 168, 61, 83, 195, 224, 189, 104, 154, 2, 61, 12, 106, 226, 189, 230, 6, 179, 188, 217, 134, 106, 61, 242, 252, 79, 190, 201, 7, 205, 61, 185, 176, 2, 62, 35, 97, 139, 61, 191, 242, 206, 61, 129, 194, 50, 62, 144, 206, 137, 187, 238, 203, 160, 62, 108, 89, 50, 62, 115, 180, 186, 60, 111, 211, 19, 191, 124, 193, 20, 62, 122, 214, 108, 190, 40, 91, 50, 62, 180, 71, 94, 188, 138, 178, 34, 190, 95, 102, 109, 62, 248, 89, 15, 189, 14, 123, 101, 62, 111, 192, 64, 62, 52, 20, 96, 190, 176, 66, 33, 191, 22, 7, 228, 61, 62, 156, 102, 190, 138, 179, 84, 188, 67, 212, 13, 62, 33, 77, 24, 61, 183, 151, 254, 189, 154, 38, 66, 60, 26, 161, 10, 190, 53, 19, 69, 61, 25, 231, 148, 62, 127, 199, 80, 190, 130, 37, 110, 190, 162, 120, 37, 190, 204, 112, 36, 62, 175, 193, 150, 189, 184, 109, 196, 189, 67, 191, 35, 188, 186, 255, 8, 190, 205, 30, 40, 62, 28, 95, 228, 61, 158, 97, 216, 61, 192, 110, 182, 59, 120, 50, 208, 189, 78, 221, 179, 188, 94, 183, 37, 190, 110, 115, 143, 189, 58, 120, 155, 189, 220, 27, 132, 187, 168, 114, 0, 190, 212, 60, 29, 190, 156, 105, 221, 61, 83, 189, 56, 62, 126, 234, 5, 62, 1, 211, 141, 189, 55, 236, 217, 61, 12, 233, 154, 61, 135, 95, 50, 62, 244, 233, 137, 62, 155, 79, 130, 61, 209, 232, 210, 61, 251, 144, 220, 61, 44, 58, 246, 60, 27, 221, 93, 189, 121, 74, 206, 189, 251, 144, 207, 61, 65, 162, 190, 61, 225, 148, 1, 191, 237, 6, 53, 61, 192, 40, 164, 61, 131, 47, 253, 62, 184, 175, 142, 62, 246, 121, 21, 190, 43, 117, 255, 187, 129, 222, 106, 62, 109, 110, 203, 189, 115, 112, 11, 62, 65, 88, 17, 190, 43, 147, 146, 61, 102, 202, 56, 190, 12, 200, 102, 190, 247, 20, 225, 61, 12, 4, 151, 61, 174, 95, 35, 62, 71, 153, 30, 62, 107, 106, 5, 190, 232, 213, 95, 61, 158, 150, 11, 190, 208, 111, 164, 189, 54, 155, 25, 190, 203, 185, 142, 190, 169, 45, 23, 62, 213, 189, 132, 190, 142, 227, 199, 189, 244, 104, 125, 62, 187, 227, 102, 59, 167, 195, 204, 189, 115, 245, 68, 190, 42, 87, 225, 61, 143, 247, 202, 190, 62, 161, 16, 190, 148, 22, 81, 62, 173, 27, 213, 190, 42, 208, 152, 61, 166, 164, 138, 60, 136, 206, 113, 62, 139, 131, 70, 189, 219, 15, 198, 186, 36, 120, 148, 190, 126, 85, 46, 190, 209, 120, 243, 62, 220, 221, 225, 190, 109, 30, 246, 189, 99, 54, 131, 190, 88, 199, 174, 59, 24, 131, 61, 61, 201, 202, 252, 62, 130, 151, 127, 189, 214, 254, 154, 62, 174, 235, 196, 61, 28, 104, 174, 62, 44, 48, 37, 62, 152, 119, 186, 62, 38, 178, 226, 187, 216, 94, 215, 190, 127, 108, 148, 61, 93, 191, 164, 190, 214, 230, 129, 62, 209, 90, 169, 61, 123, 253, 198, 60, 43, 169, 90, 62, 84, 80, 59, 61, 20, 79, 28, 61, 253, 189, 72, 61, 214, 231, 162, 189, 22, 100, 151, 190, 19, 254, 178, 188, 13, 139, 211, 189, 64, 181, 45, 190, 205, 191, 117, 62, 156, 159, 22, 189, 20, 220, 201, 59, 53, 192, 153, 189, 125, 228, 82, 189, 232, 245, 171, 189, 18, 247, 1, 188, 209, 171, 7, 191, 210, 35, 129, 60, 186, 100, 30, 61, 133, 42, 4, 62, 201, 152, 252, 61, 229, 34, 247, 189, 166, 162, 133, 60, 72, 42, 148, 62, 82, 8, 134, 61, 214, 205, 64, 62, 217, 223, 104, 61, 60, 213, 199, 190, 1, 135, 2, 61, 250, 156, 41, 62, 122, 101, 207, 61, 71, 127, 254, 61, 138, 65, 252, 60, 47, 190, 204, 188, 221, 255, 49, 62, 192, 101, 170, 189, 103, 91, 101, 60, 96, 56, 56, 62, 159, 96, 234, 61, 155, 218, 133, 190, 198, 145, 231, 59, 85, 108, 99, 62, 224, 121, 72, 61, 194, 243, 130, 188, 73, 189, 13, 190, 239, 191, 14, 189, 194, 194, 2, 61, 126, 226, 24, 190, 18, 215, 191, 189, 254, 166, 171, 189, 156, 234, 97, 190, 73, 192, 59, 190, 194, 115, 93, 62, 177, 74, 181, 187, 72, 144, 71, 190, 56, 100, 207, 61, 66, 57, 53, 60, 89, 18, 119, 188, 87, 159, 124, 190, 7, 114, 67, 189, 91, 131, 153, 62, 179, 245, 12, 190, 70, 9, 128, 62, 234, 34, 99, 190, 43, 124, 188, 62, 65, 86, 111, 190, 140, 64, 4, 189, 17, 108, 112, 189, 217, 106, 43, 190, 220, 126, 44, 61, 65, 76, 26, 62, 112, 252, 46, 62, 19, 237, 78, 62, 37, 60, 135, 190, 222, 202, 244, 61, 77, 152, 204, 61, 237, 152, 213, 189, 155, 51, 13, 62, 102, 183, 132, 190, 207, 119, 150, 62, 53, 76, 106, 62, 68, 84, 9, 62, 13, 174, 93, 62, 19, 91, 220, 189, 32, 106, 146, 60, 241, 7, 219, 62, 104, 78, 21, 190, 78, 162, 122, 190, 178, 201, 145, 190, 82, 232, 172, 61, 54, 120, 169, 188, 206, 58, 208, 61, 242, 255, 247, 190, 162, 113, 40, 62, 224, 23, 128, 190, 184, 178, 44, 62, 151, 83, 245, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 238, 0, 190, 64, 145, 234, 61, 70, 20, 181, 59, 222, 97, 78, 190, 136, 7, 132, 62, 127, 64, 142, 61, 208, 140, 180, 61, 24, 67, 156, 61, 58, 251, 208, 60, 226, 172, 22, 189, 91, 22, 213, 189, 187, 170, 200, 62, 164, 8, 140, 61, 180, 248, 12, 62, 165, 125, 98, 59, 138, 137, 122, 61, 221, 136, 120, 189, 174, 34, 223, 188, 213, 26, 123, 62, 3, 184, 46, 189, 72, 254, 200, 188, 217, 106, 197, 189, 50, 93, 8, 190, 17, 89, 52, 62, 94, 247, 132, 62, 220, 102, 83, 62, 125, 117, 166, 61, 224, 132, 138, 189, 107, 62, 22, 190, 124, 96, 93, 188, 19, 49, 143, 62, 97, 169, 18, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 128, 202, 190, 10, 209, 181, 62, 156, 27, 115, 62, 57, 3, 180, 62, 131, 174, 79, 190, 79, 77, 1, 191, 152, 223, 5, 191, 18, 130, 66, 63, 166, 250, 92, 62, 101, 221, 67, 62, 250, 76, 244, 62, 147, 182, 225, 190, 109, 154, 49, 62, 214, 232, 170, 62, 11, 45, 94, 187, 159, 139, 96, 190, 225, 227, 204, 62, 18, 222, 132, 62, 193, 53, 190, 62, 130, 78, 182, 190, 34, 93, 93, 62, 215, 179, 138, 61, 57, 132, 24, 191, 253, 71, 192, 190, 41, 250, 255, 60, 161, 124, 194, 190, 41, 121, 43, 61, 128, 184, 213, 190, 159, 98, 164, 62, 73, 88, 33, 62, 153, 164, 6, 188, 191, 171, 148, 62, 94, 102, 60, 189, 145, 134, 132, 189, 176, 51, 248, 188, 160, 10, 160, 62, 27, 43, 91, 190, 228, 202, 4, 190, 225, 82, 50, 62, 90, 30, 221, 187, 163, 251, 239, 189, 111, 156, 56, 62, 93, 100, 145, 189, 59, 86, 17, 190, 237, 180, 122, 189, 72, 224, 152, 190, 252, 221, 228, 60, 141, 252, 205, 61, 42, 233, 28, 62, 16, 7, 21, 190, 60, 121, 119, 60, 67, 42, 9, 62, 123, 74, 49, 190, 195, 254, 65, 61, 174, 228, 144, 61, 105, 11, 82, 189, 89, 122, 45, 190, 200, 121, 83, 61, 219, 54, 167, 189, 37, 226, 79, 189, 119, 167, 112, 62, 252, 192, 27, 60, 245, 159, 164, 190, 135, 14, 133, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 30, 231, 189, 170, 205, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 132, 199, 189, 163, 122, 181, 191, 21, 238, 143, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 203, 232, 63, 14, 153, 94, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}