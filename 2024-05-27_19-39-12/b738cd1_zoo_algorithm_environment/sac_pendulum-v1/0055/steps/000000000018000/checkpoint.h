// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 75, 89, 190, 95, 18, 54, 63, 38, 137, 225, 62, 154, 158, 32, 190, 39, 204, 64, 191, 212, 215, 247, 190, 129, 152, 73, 63, 69, 189, 1, 62, 185, 61, 227, 190, 48, 138, 19, 63, 34, 49, 222, 63, 98, 116, 232, 62, 172, 229, 169, 190, 86, 164, 141, 62, 196, 69, 81, 189, 71, 220, 141, 190, 125, 25, 148, 191, 201, 219, 110, 190, 143, 44, 81, 190, 255, 248, 161, 62, 103, 199, 59, 63, 123, 85, 25, 191, 190, 113, 164, 63, 26, 149, 10, 190, 254, 138, 49, 62, 83, 169, 19, 191, 81, 236, 131, 188, 138, 169, 54, 61, 114, 199, 124, 190, 233, 254, 198, 190, 230, 222, 247, 190, 62, 39, 71, 191, 56, 114, 49, 190, 202, 137, 212, 190, 119, 188, 215, 63, 163, 170, 180, 62, 219, 113, 36, 63, 165, 20, 87, 63, 109, 176, 168, 62, 64, 143, 57, 190, 202, 216, 149, 191, 173, 14, 15, 190, 138, 119, 241, 190, 164, 173, 114, 189, 31, 13, 223, 190, 134, 221, 240, 190, 32, 217, 134, 63, 57, 157, 114, 62, 11, 78, 105, 61, 30, 195, 136, 63, 90, 232, 224, 190, 60, 72, 212, 190, 247, 68, 104, 62, 6, 2, 66, 63, 113, 78, 73, 189, 56, 113, 141, 191, 49, 106, 49, 191, 227, 144, 39, 63, 185, 84, 60, 191, 19, 69, 212, 190, 22, 74, 115, 191, 125, 66, 108, 62, 161, 8, 144, 61, 18, 101, 155, 190, 254, 148, 59, 191, 244, 67, 142, 62, 197, 197, 7, 62, 110, 223, 185, 191, 4, 83, 110, 190, 154, 191, 232, 62, 146, 40, 161, 191, 179, 165, 131, 190, 89, 89, 207, 190, 221, 187, 143, 191, 92, 23, 176, 190, 32, 206, 43, 191, 143, 226, 162, 190, 115, 177, 51, 63, 187, 8, 143, 191, 78, 41, 218, 62, 90, 192, 191, 189, 112, 178, 61, 63, 223, 67, 189, 63, 128, 46, 173, 62, 229, 128, 4, 63, 59, 248, 51, 63, 154, 44, 233, 190, 130, 174, 116, 62, 234, 60, 72, 191, 52, 212, 58, 61, 55, 97, 85, 63, 133, 166, 204, 190, 68, 179, 161, 190, 107, 78, 10, 63, 233, 6, 80, 62, 236, 178, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 172, 217, 190, 235, 151, 140, 190, 154, 31, 47, 191, 143, 224, 96, 61, 23, 18, 157, 62, 72, 198, 97, 190, 0, 102, 63, 187, 166, 217, 202, 190, 149, 159, 121, 62, 94, 16, 60, 190, 10, 206, 10, 63, 15, 187, 77, 189, 213, 194, 65, 191, 178, 35, 64, 62, 171, 201, 232, 190, 48, 128, 242, 62, 89, 233, 105, 61, 80, 81, 156, 190, 197, 88, 144, 189, 123, 155, 14, 188, 106, 110, 228, 189, 132, 241, 161, 62, 99, 87, 3, 63, 53, 225, 10, 62, 173, 132, 47, 191, 131, 168, 14, 191, 139, 165, 230, 62, 12, 119, 7, 63, 133, 249, 41, 191, 196, 63, 0, 63, 115, 198, 117, 191, 148, 181, 14, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 37, 54, 62, 252, 157, 220, 189, 195, 34, 172, 189, 205, 248, 30, 190, 167, 158, 77, 61, 55, 68, 250, 62, 185, 171, 151, 62, 92, 210, 153, 62, 182, 65, 138, 189, 6, 72, 26, 62, 5, 167, 26, 61, 121, 35, 14, 61, 78, 56, 137, 62, 238, 150, 9, 187, 84, 237, 162, 188, 184, 0, 26, 188, 45, 28, 145, 190, 227, 36, 208, 62, 198, 112, 219, 188, 158, 132, 84, 191, 250, 171, 163, 189, 126, 19, 202, 62, 125, 88, 21, 62, 124, 99, 253, 190, 66, 61, 51, 191, 112, 46, 75, 62, 182, 51, 240, 61, 74, 232, 99, 190, 159, 108, 16, 190, 65, 177, 157, 61, 226, 156, 6, 62, 64, 32, 21, 191, 253, 177, 151, 190, 250, 198, 137, 188, 252, 72, 242, 60, 143, 189, 173, 190, 95, 15, 109, 62, 22, 78, 79, 190, 158, 184, 8, 191, 153, 19, 156, 62, 118, 13, 19, 191, 96, 145, 7, 62, 41, 94, 107, 190, 62, 99, 33, 191, 54, 151, 197, 62, 34, 158, 83, 191, 22, 200, 59, 189, 79, 169, 229, 190, 95, 47, 61, 62, 150, 120, 57, 191, 104, 254, 172, 60, 249, 182, 45, 60, 54, 94, 69, 188, 108, 213, 22, 191, 71, 100, 144, 60, 90, 128, 202, 60, 168, 90, 14, 191, 6, 134, 93, 188, 145, 57, 188, 189, 234, 251, 40, 190, 97, 113, 75, 60, 45, 220, 32, 190, 203, 204, 165, 189, 150, 228, 3, 63, 215, 102, 224, 189, 181, 208, 26, 190, 53, 169, 76, 62, 82, 67, 48, 191, 45, 92, 15, 190, 13, 156, 43, 191, 143, 250, 177, 61, 149, 131, 147, 62, 142, 28, 93, 189, 13, 22, 11, 190, 203, 166, 194, 190, 209, 241, 77, 60, 121, 92, 53, 191, 116, 254, 39, 190, 167, 238, 13, 190, 3, 14, 17, 191, 74, 124, 48, 62, 135, 145, 113, 62, 139, 236, 215, 189, 202, 18, 94, 62, 6, 244, 197, 190, 243, 220, 35, 62, 96, 0, 96, 189, 250, 167, 210, 61, 23, 230, 102, 191, 185, 182, 151, 189, 248, 149, 202, 188, 205, 160, 15, 190, 189, 48, 10, 63, 111, 220, 16, 62, 146, 5, 153, 190, 78, 63, 91, 60, 190, 194, 84, 62, 15, 237, 137, 61, 9, 96, 177, 189, 136, 71, 237, 62, 186, 154, 165, 59, 206, 204, 139, 62, 148, 51, 228, 189, 166, 155, 87, 60, 238, 146, 56, 190, 43, 76, 149, 62, 241, 1, 122, 62, 221, 251, 4, 190, 56, 120, 246, 62, 124, 251, 146, 62, 228, 108, 82, 60, 181, 74, 65, 190, 8, 10, 177, 189, 232, 130, 47, 190, 22, 134, 152, 62, 146, 88, 193, 189, 22, 69, 128, 190, 34, 235, 122, 189, 19, 156, 212, 189, 9, 250, 111, 190, 224, 130, 226, 58, 123, 179, 139, 62, 101, 205, 74, 61, 223, 11, 106, 62, 228, 123, 133, 190, 53, 180, 94, 190, 165, 135, 213, 61, 210, 91, 72, 62, 248, 214, 225, 190, 77, 57, 254, 59, 31, 1, 161, 60, 215, 248, 200, 62, 197, 252, 115, 188, 57, 78, 139, 62, 255, 176, 156, 190, 132, 44, 131, 189, 179, 166, 249, 61, 204, 106, 215, 61, 159, 112, 2, 190, 78, 45, 183, 190, 167, 215, 209, 190, 79, 32, 195, 61, 132, 188, 181, 62, 183, 99, 44, 61, 252, 158, 27, 62, 120, 222, 213, 190, 199, 185, 92, 62, 179, 84, 2, 62, 217, 239, 130, 62, 111, 124, 43, 62, 66, 229, 183, 189, 121, 91, 9, 190, 185, 110, 135, 188, 71, 238, 66, 190, 88, 213, 230, 188, 130, 173, 34, 62, 44, 76, 64, 62, 198, 250, 207, 60, 240, 174, 234, 60, 40, 172, 171, 61, 12, 140, 171, 190, 94, 122, 107, 190, 23, 149, 209, 189, 105, 36, 31, 62, 61, 231, 134, 62, 126, 10, 14, 61, 136, 234, 146, 62, 70, 230, 98, 191, 61, 95, 151, 62, 168, 64, 177, 62, 63, 232, 54, 62, 212, 194, 226, 189, 41, 186, 142, 189, 235, 21, 187, 62, 7, 180, 212, 61, 254, 245, 187, 61, 93, 84, 42, 62, 119, 186, 199, 61, 241, 46, 205, 190, 138, 244, 102, 61, 151, 173, 234, 61, 219, 116, 131, 62, 36, 95, 175, 61, 72, 137, 5, 190, 97, 118, 126, 191, 98, 47, 68, 190, 169, 215, 151, 189, 23, 16, 170, 189, 121, 188, 138, 62, 138, 197, 188, 62, 95, 149, 44, 191, 253, 57, 83, 62, 154, 63, 142, 62, 19, 104, 222, 60, 35, 130, 218, 190, 158, 115, 29, 63, 233, 162, 119, 62, 112, 3, 98, 61, 67, 192, 143, 191, 70, 116, 3, 188, 233, 133, 69, 190, 56, 75, 144, 62, 87, 48, 77, 61, 177, 135, 57, 191, 232, 230, 99, 190, 37, 27, 192, 62, 81, 22, 10, 63, 142, 117, 8, 63, 152, 142, 172, 61, 74, 216, 122, 191, 7, 223, 171, 62, 180, 211, 2, 190, 238, 197, 132, 62, 14, 84, 157, 190, 171, 147, 4, 189, 64, 169, 252, 190, 47, 152, 111, 190, 137, 106, 228, 61, 3, 103, 170, 62, 92, 174, 5, 62, 16, 73, 48, 190, 106, 80, 60, 190, 128, 67, 123, 191, 176, 255, 157, 189, 3, 86, 172, 190, 68, 137, 173, 188, 133, 212, 62, 62, 180, 89, 47, 191, 76, 23, 255, 61, 76, 46, 194, 190, 55, 50, 156, 62, 151, 167, 224, 62, 178, 121, 87, 62, 124, 49, 69, 191, 150, 199, 77, 62, 173, 233, 203, 62, 141, 89, 134, 191, 253, 97, 27, 190, 72, 82, 89, 191, 149, 64, 10, 62, 25, 159, 171, 62, 203, 254, 54, 62, 197, 3, 91, 190, 14, 65, 11, 62, 153, 207, 13, 62, 218, 119, 45, 62, 198, 84, 226, 61, 145, 251, 91, 62, 15, 109, 119, 63, 213, 191, 187, 190, 43, 86, 151, 62, 25, 243, 8, 190, 185, 246, 151, 190, 228, 184, 5, 62, 61, 112, 16, 63, 158, 227, 146, 62, 8, 137, 4, 63, 223, 30, 77, 62, 188, 122, 97, 190, 148, 160, 137, 190, 98, 18, 5, 190, 49, 160, 195, 61, 124, 198, 16, 191, 135, 244, 65, 190, 116, 114, 147, 60, 164, 170, 129, 61, 237, 28, 153, 62, 9, 107, 67, 190, 78, 35, 180, 191, 195, 83, 189, 62, 242, 114, 140, 61, 3, 222, 115, 191, 129, 140, 19, 60, 122, 178, 138, 61, 34, 230, 73, 62, 228, 180, 171, 188, 255, 174, 41, 62, 217, 76, 20, 62, 65, 110, 131, 61, 166, 115, 196, 62, 125, 65, 107, 62, 170, 251, 143, 62, 217, 237, 108, 190, 253, 49, 219, 61, 109, 180, 92, 61, 244, 141, 84, 62, 21, 43, 4, 191, 186, 52, 113, 189, 18, 28, 169, 190, 102, 225, 21, 190, 241, 124, 174, 62, 187, 57, 67, 191, 100, 231, 129, 61, 235, 40, 79, 191, 9, 255, 192, 62, 135, 247, 121, 62, 197, 13, 87, 190, 102, 22, 178, 190, 231, 211, 98, 190, 230, 233, 49, 63, 128, 117, 75, 191, 139, 178, 15, 191, 180, 53, 167, 190, 243, 168, 235, 188, 244, 7, 75, 61, 247, 204, 187, 62, 83, 204, 204, 189, 41, 235, 81, 62, 8, 13, 147, 62, 199, 50, 112, 62, 47, 205, 53, 190, 128, 89, 66, 62, 18, 28, 45, 191, 98, 172, 141, 190, 30, 213, 246, 62, 12, 6, 79, 190, 105, 20, 238, 62, 8, 26, 47, 61, 116, 128, 11, 62, 188, 175, 38, 62, 221, 235, 203, 190, 89, 124, 21, 62, 226, 134, 0, 190, 48, 162, 40, 62, 71, 245, 15, 62, 164, 28, 213, 62, 117, 150, 218, 190, 47, 18, 131, 62, 40, 210, 65, 191, 109, 158, 99, 62, 206, 111, 93, 62, 58, 224, 208, 189, 55, 247, 28, 63, 186, 177, 26, 190, 111, 26, 170, 62, 133, 156, 48, 190, 15, 33, 25, 190, 10, 193, 40, 191, 101, 22, 29, 62, 255, 103, 104, 190, 238, 14, 150, 61, 1, 230, 150, 62, 240, 92, 166, 59, 121, 118, 174, 62, 140, 145, 156, 62, 65, 125, 16, 191, 190, 138, 226, 189, 225, 174, 41, 62, 28, 6, 154, 190, 248, 126, 9, 191, 220, 139, 176, 189, 168, 15, 168, 62, 201, 171, 180, 189, 25, 220, 234, 60, 252, 92, 15, 191, 68, 100, 138, 62, 80, 70, 207, 60, 212, 151, 56, 62, 206, 102, 91, 191, 128, 235, 153, 190, 211, 48, 174, 189, 91, 32, 155, 62, 29, 98, 4, 62, 92, 69, 206, 191, 35, 90, 252, 190, 74, 148, 166, 61, 5, 245, 208, 62, 172, 190, 41, 63, 246, 227, 138, 189, 88, 134, 159, 191, 148, 176, 132, 62, 225, 115, 108, 190, 92, 137, 61, 189, 35, 61, 208, 61, 140, 255, 61, 190, 76, 15, 13, 191, 19, 213, 209, 190, 139, 208, 46, 189, 105, 173, 156, 60, 198, 150, 174, 60, 71, 77, 163, 189, 173, 21, 27, 190, 130, 241, 156, 191, 21, 139, 172, 62, 132, 211, 192, 61, 221, 243, 57, 190, 246, 160, 66, 62, 217, 74, 195, 190, 130, 98, 75, 61, 4, 229, 33, 191, 175, 109, 40, 62, 181, 238, 144, 62, 134, 104, 92, 61, 115, 211, 237, 190, 20, 101, 42, 190, 65, 223, 190, 62, 118, 121, 109, 190, 156, 90, 253, 189, 127, 31, 253, 60, 142, 216, 158, 188, 225, 122, 207, 62, 99, 25, 13, 61, 161, 108, 17, 190, 27, 85, 123, 62, 153, 9, 92, 190, 46, 65, 215, 61, 149, 104, 103, 189, 107, 162, 131, 62, 16, 16, 62, 191, 217, 70, 230, 61, 246, 252, 130, 189, 135, 224, 237, 189, 116, 202, 139, 62, 13, 28, 37, 62, 133, 222, 183, 190, 228, 207, 151, 189, 9, 127, 38, 190, 49, 155, 154, 189, 48, 40, 135, 62, 80, 28, 201, 190, 142, 16, 170, 61, 41, 176, 232, 190, 49, 74, 86, 62, 33, 220, 109, 62, 252, 80, 5, 62, 188, 165, 96, 191, 71, 150, 195, 61, 23, 238, 165, 62, 161, 241, 125, 191, 237, 143, 88, 62, 181, 126, 216, 190, 196, 101, 163, 61, 225, 47, 148, 60, 144, 202, 149, 62, 32, 62, 164, 190, 75, 167, 40, 62, 167, 230, 44, 62, 214, 186, 253, 188, 178, 169, 76, 62, 41, 171, 171, 61, 21, 52, 81, 63, 157, 203, 14, 190, 91, 68, 187, 62, 179, 236, 13, 190, 182, 81, 115, 190, 122, 65, 62, 62, 67, 2, 252, 189, 252, 210, 85, 62, 78, 104, 106, 188, 123, 126, 185, 189, 149, 175, 195, 187, 252, 55, 186, 189, 58, 75, 159, 61, 153, 158, 186, 60, 109, 120, 163, 188, 195, 222, 22, 62, 104, 50, 145, 189, 31, 61, 46, 188, 190, 243, 222, 189, 175, 72, 218, 60, 170, 245, 36, 62, 74, 232, 79, 189, 141, 63, 42, 190, 158, 147, 41, 190, 127, 253, 148, 189, 45, 20, 154, 188, 91, 43, 7, 62, 106, 223, 22, 190, 10, 140, 190, 60, 111, 193, 104, 61, 176, 243, 156, 60, 189, 4, 183, 61, 183, 243, 22, 190, 39, 13, 195, 189, 201, 234, 39, 190, 51, 214, 17, 189, 179, 134, 185, 189, 15, 94, 13, 190, 140, 19, 143, 61, 197, 245, 11, 62, 92, 98, 25, 190, 41, 23, 49, 62, 132, 221, 185, 190, 161, 65, 25, 187, 230, 0, 2, 190, 46, 100, 243, 189, 227, 206, 236, 60, 194, 132, 41, 62, 226, 86, 77, 191, 124, 31, 114, 61, 182, 108, 170, 191, 97, 13, 156, 190, 210, 209, 115, 62, 55, 245, 179, 190, 16, 143, 136, 62, 175, 225, 108, 189, 193, 49, 131, 62, 238, 57, 217, 60, 145, 207, 23, 190, 248, 219, 233, 190, 141, 153, 107, 62, 31, 124, 143, 190, 117, 121, 251, 190, 79, 205, 170, 190, 151, 68, 11, 190, 196, 25, 169, 61, 164, 164, 118, 62, 38, 64, 165, 188, 137, 61, 245, 190, 29, 195, 136, 191, 69, 10, 27, 190, 217, 221, 208, 191, 43, 86, 227, 190, 49, 233, 54, 190, 65, 3, 163, 62, 111, 47, 90, 191, 43, 62, 39, 62, 68, 136, 39, 191, 2, 12, 105, 62, 254, 177, 141, 61, 165, 204, 107, 62, 142, 221, 128, 190, 31, 92, 208, 189, 108, 192, 207, 62, 154, 79, 111, 191, 142, 113, 244, 189, 161, 129, 149, 190, 62, 161, 155, 190, 249, 142, 160, 62, 115, 119, 168, 62, 72, 218, 118, 190, 250, 148, 13, 62, 242, 143, 132, 62, 5, 52, 12, 63, 151, 251, 107, 189, 170, 122, 5, 61, 213, 227, 204, 190, 161, 32, 214, 190, 228, 205, 186, 61, 49, 2, 157, 190, 33, 78, 165, 62, 77, 17, 252, 61, 156, 222, 100, 60, 95, 189, 185, 62, 152, 189, 250, 189, 142, 198, 98, 190, 29, 103, 39, 60, 232, 207, 235, 190, 143, 94, 5, 62, 130, 224, 8, 190, 18, 88, 102, 62, 58, 79, 139, 62, 238, 35, 49, 189, 39, 169, 82, 190, 46, 182, 145, 189, 41, 93, 5, 63, 3, 30, 231, 190, 100, 216, 69, 190, 255, 232, 48, 189, 161, 178, 7, 62, 60, 50, 208, 61, 62, 240, 108, 62, 39, 134, 30, 61, 49, 138, 63, 62, 184, 73, 20, 62, 204, 134, 39, 61, 10, 253, 64, 62, 164, 172, 161, 62, 248, 61, 102, 61, 32, 212, 112, 190, 48, 22, 3, 62, 220, 224, 191, 61, 175, 95, 68, 60, 213, 201, 210, 189, 30, 159, 222, 190, 139, 112, 11, 60, 72, 18, 148, 190, 159, 83, 126, 189, 27, 209, 15, 190, 122, 219, 217, 190, 120, 250, 29, 188, 158, 54, 152, 188, 67, 205, 225, 62, 77, 13, 86, 62, 234, 131, 183, 61, 203, 11, 139, 189, 23, 121, 3, 62, 150, 183, 210, 62, 169, 241, 66, 191, 198, 7, 51, 189, 4, 108, 197, 190, 244, 117, 79, 190, 104, 145, 237, 61, 214, 17, 16, 63, 111, 52, 160, 189, 16, 166, 181, 61, 167, 6, 140, 62, 26, 125, 255, 61, 124, 249, 138, 62, 99, 202, 66, 62, 210, 213, 214, 188, 249, 67, 158, 190, 102, 177, 85, 187, 169, 112, 156, 190, 73, 11, 23, 61, 171, 92, 195, 61, 220, 87, 226, 190, 17, 162, 78, 62, 236, 43, 15, 187, 162, 119, 179, 190, 35, 136, 38, 190, 55, 0, 113, 190, 137, 55, 8, 190, 250, 223, 33, 191, 114, 127, 211, 62, 56, 134, 40, 61, 84, 243, 124, 62, 14, 42, 162, 190, 27, 12, 226, 189, 189, 182, 0, 62, 55, 227, 233, 62, 15, 68, 144, 189, 59, 57, 117, 190, 244, 5, 38, 190, 201, 41, 27, 191, 138, 172, 91, 62, 37, 164, 18, 191, 163, 152, 226, 190, 61, 7, 53, 190, 88, 9, 65, 62, 135, 26, 130, 60, 74, 136, 103, 190, 246, 214, 87, 191, 140, 170, 60, 62, 185, 85, 25, 190, 35, 218, 234, 189, 112, 223, 56, 190, 201, 71, 155, 61, 233, 187, 101, 189, 161, 99, 40, 58, 132, 217, 9, 190, 173, 146, 79, 190, 101, 53, 5, 62, 184, 71, 134, 190, 66, 191, 24, 62, 93, 153, 82, 191, 223, 176, 208, 61, 143, 133, 0, 63, 243, 49, 5, 189, 164, 19, 23, 191, 157, 152, 176, 58, 205, 222, 252, 62, 41, 201, 8, 191, 186, 44, 172, 190, 199, 15, 19, 62, 168, 100, 139, 62, 55, 31, 186, 62, 98, 237, 130, 62, 145, 155, 8, 191, 160, 173, 197, 61, 254, 12, 219, 61, 74, 204, 236, 189, 248, 2, 127, 189, 29, 241, 146, 62, 59, 244, 4, 191, 67, 111, 90, 61, 103, 255, 146, 62, 4, 159, 24, 188, 230, 179, 185, 190, 78, 221, 255, 189, 138, 116, 123, 190, 229, 157, 90, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 180, 48, 0, 191, 122, 115, 127, 62, 10, 148, 213, 60, 129, 140, 21, 191, 188, 123, 152, 190, 254, 160, 37, 62, 121, 247, 73, 191, 149, 248, 11, 191, 144, 69, 163, 62, 156, 237, 167, 61, 155, 227, 19, 62, 211, 218, 193, 191, 172, 236, 135, 188, 5, 76, 202, 62, 26, 70, 69, 62, 74, 181, 192, 60, 216, 60, 143, 190, 161, 165, 154, 190, 252, 96, 165, 62, 203, 99, 131, 62, 203, 66, 203, 190, 8, 140, 115, 62, 55, 214, 181, 62, 18, 159, 247, 189, 5, 232, 7, 190, 108, 19, 136, 63, 184, 253, 74, 190, 174, 133, 9, 192, 72, 217, 205, 59, 15, 63, 188, 62, 121, 255, 3, 63, 60, 43, 70, 191, 15, 133, 137, 189, 45, 208, 40, 62, 59, 48, 97, 190, 145, 5, 31, 63, 40, 218, 165, 188, 202, 13, 22, 62, 169, 32, 181, 189, 230, 103, 47, 190, 199, 251, 2, 190, 10, 192, 164, 62, 205, 238, 162, 190, 248, 124, 40, 191, 13, 125, 151, 62, 121, 180, 102, 62, 94, 73, 158, 62, 146, 112, 62, 190, 61, 78, 21, 190, 61, 77, 148, 190, 13, 32, 54, 62, 184, 191, 107, 190, 31, 4, 147, 190, 227, 96, 183, 62, 12, 73, 45, 190, 72, 234, 254, 190, 125, 88, 142, 190, 181, 138, 166, 62, 121, 63, 163, 190, 75, 90, 151, 62, 85, 250, 122, 60, 251, 148, 219, 60, 93, 64, 242, 190, 66, 14, 30, 61, 185, 12, 116, 188, 12, 172, 221, 189, 169, 209, 237, 61, 42, 241, 167, 188, 218, 19, 81, 62, 27, 95, 168, 189, 191, 155, 51, 61, 63, 69, 24, 62, 47, 99, 128, 190, 101, 191, 38, 190, 32, 70, 20, 62, 66, 208, 207, 62, 116, 115, 213, 190, 247, 119, 26, 190, 221, 212, 3, 62, 21, 195, 3, 61, 49, 145, 179, 62, 189, 180, 50, 62, 161, 11, 211, 189, 166, 159, 163, 60, 155, 244, 182, 61, 53, 67, 188, 61, 80, 4, 184, 61, 215, 147, 42, 190, 176, 33, 180, 189, 113, 10, 212, 189, 86, 107, 131, 189, 50, 25, 14, 61, 163, 73, 115, 189, 32, 2, 137, 188, 230, 41, 123, 190, 108, 25, 100, 61, 239, 176, 198, 188, 250, 8, 106, 62, 241, 207, 210, 188, 13, 254, 215, 62, 131, 16, 16, 61, 117, 190, 143, 188, 0, 45, 170, 190, 82, 49, 9, 61, 82, 75, 36, 190, 222, 82, 125, 62, 125, 134, 12, 190, 81, 239, 96, 191, 105, 16, 205, 62, 112, 104, 57, 189, 87, 192, 138, 62, 210, 115, 204, 60, 250, 72, 17, 190, 63, 176, 42, 191, 213, 116, 19, 62, 165, 154, 175, 190, 166, 150, 118, 190, 111, 229, 170, 62, 249, 191, 16, 189, 185, 67, 170, 190, 235, 107, 242, 188, 70, 45, 142, 62, 244, 166, 49, 190, 36, 19, 171, 62, 182, 20, 230, 188, 37, 173, 90, 190, 155, 30, 28, 191, 245, 217, 29, 62, 199, 245, 65, 190, 82, 57, 70, 190, 41, 229, 31, 61, 114, 76, 148, 190, 105, 221, 129, 62, 182, 37, 135, 190, 171, 65, 162, 61, 168, 112, 147, 60, 101, 132, 65, 190, 34, 62, 78, 190, 199, 175, 114, 190, 147, 119, 137, 190, 200, 170, 16, 191, 224, 117, 44, 61, 59, 84, 111, 190, 249, 7, 128, 190, 142, 234, 226, 62, 248, 40, 19, 62, 94, 6, 238, 60, 121, 20, 129, 189, 160, 187, 92, 189, 189, 49, 103, 61, 187, 21, 52, 62, 114, 167, 117, 62, 139, 248, 157, 190, 157, 8, 252, 61, 171, 186, 230, 187, 114, 26, 178, 188, 46, 250, 43, 62, 111, 109, 19, 190, 99, 117, 144, 190, 61, 20, 28, 62, 207, 174, 43, 191, 169, 21, 77, 189, 101, 101, 18, 61, 129, 194, 213, 62, 20, 228, 138, 62, 39, 237, 193, 190, 202, 91, 65, 189, 50, 117, 97, 62, 101, 186, 134, 189, 197, 246, 132, 60, 108, 57, 18, 190, 240, 184, 41, 190, 38, 9, 120, 190, 65, 41, 106, 190, 56, 102, 181, 60, 163, 82, 223, 61, 126, 189, 147, 62, 115, 190, 210, 61, 163, 171, 142, 190, 52, 114, 7, 189, 199, 57, 112, 62, 63, 214, 24, 62, 163, 1, 126, 190, 115, 58, 0, 191, 165, 81, 48, 61, 88, 156, 72, 190, 231, 187, 50, 189, 155, 37, 49, 62, 141, 167, 119, 61, 242, 108, 90, 189, 250, 85, 68, 191, 70, 190, 226, 61, 200, 239, 203, 190, 139, 103, 213, 190, 159, 143, 210, 189, 193, 153, 30, 191, 145, 248, 125, 62, 169, 1, 204, 190, 149, 193, 141, 62, 20, 175, 248, 62, 2, 147, 140, 187, 176, 178, 203, 190, 212, 246, 132, 190, 0, 132, 67, 63, 143, 29, 127, 191, 184, 250, 226, 189, 25, 206, 138, 190, 34, 28, 63, 62, 47, 88, 48, 189, 134, 60, 220, 62, 95, 12, 190, 190, 207, 136, 46, 62, 49, 149, 230, 62, 110, 243, 224, 62, 201, 23, 25, 62, 70, 112, 4, 63, 204, 217, 17, 191, 127, 10, 220, 190, 84, 67, 179, 62, 11, 76, 201, 190, 19, 134, 202, 62, 10, 238, 182, 61, 59, 10, 135, 62, 74, 87, 214, 61, 242, 87, 249, 59, 133, 112, 238, 61, 124, 81, 200, 57, 55, 66, 191, 190, 159, 121, 141, 190, 141, 12, 155, 188, 193, 153, 44, 190, 197, 254, 76, 190, 255, 134, 125, 62, 199, 30, 14, 189, 247, 154, 132, 62, 114, 94, 81, 190, 201, 236, 148, 191, 176, 86, 149, 62, 175, 202, 47, 60, 197, 71, 136, 191, 75, 76, 122, 61, 2, 33, 188, 186, 82, 135, 63, 62, 148, 135, 255, 61, 219, 34, 187, 62, 78, 105, 95, 62, 191, 197, 199, 62, 17, 135, 218, 61, 226, 31, 62, 62, 117, 96, 225, 61, 73, 100, 179, 190, 174, 190, 190, 189, 98, 228, 16, 62, 93, 182, 242, 61, 253, 25, 78, 190, 35, 84, 8, 189, 112, 159, 248, 189, 166, 91, 192, 60, 245, 199, 30, 61, 223, 183, 180, 189, 52, 243, 42, 62, 162, 144, 82, 187, 60, 19, 239, 190, 80, 29, 193, 189, 125, 128, 132, 61, 123, 126, 40, 190, 40, 195, 48, 190, 54, 60, 108, 191, 58, 40, 21, 191, 151, 46, 242, 189, 163, 244, 219, 190, 101, 141, 136, 190, 232, 45, 253, 61, 16, 32, 158, 190, 218, 36, 120, 190, 197, 238, 107, 62, 232, 118, 60, 190, 69, 112, 136, 190, 190, 146, 196, 60, 204, 163, 255, 189, 163, 252, 134, 190, 133, 75, 30, 190, 129, 62, 156, 190, 201, 228, 62, 62, 230, 190, 71, 62, 238, 97, 9, 62, 244, 25, 51, 191, 249, 155, 200, 62, 3, 120, 2, 190, 213, 69, 66, 189, 15, 255, 78, 190, 74, 8, 90, 189, 39, 252, 133, 62, 129, 217, 70, 62, 187, 9, 158, 62, 232, 233, 163, 62, 98, 175, 173, 190, 248, 32, 155, 61, 27, 89, 141, 62, 86, 36, 132, 62, 83, 254, 169, 61, 239, 50, 159, 189, 74, 93, 82, 62, 218, 183, 219, 62, 170, 166, 43, 189, 128, 144, 155, 62, 16, 49, 195, 189, 158, 55, 32, 189, 95, 214, 24, 63, 96, 150, 28, 61, 189, 179, 216, 189, 196, 24, 105, 61, 16, 251, 182, 62, 158, 250, 132, 188, 255, 16, 145, 62, 191, 53, 155, 190, 65, 214, 8, 60, 54, 25, 75, 190, 188, 5, 209, 187, 105, 75, 52, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 154, 3, 190, 165, 100, 77, 62, 85, 128, 137, 189, 91, 137, 151, 190, 172, 72, 153, 62, 4, 13, 4, 62, 77, 87, 100, 61, 253, 248, 23, 62, 102, 155, 158, 61, 100, 4, 67, 189, 86, 62, 6, 190, 99, 23, 169, 62, 160, 115, 141, 61, 192, 7, 48, 62, 181, 196, 93, 188, 247, 157, 57, 189, 208, 169, 246, 60, 85, 175, 60, 60, 48, 87, 155, 62, 168, 202, 238, 189, 241, 146, 5, 189, 217, 106, 197, 189, 202, 58, 155, 190, 72, 108, 212, 61, 124, 215, 150, 62, 55, 26, 8, 62, 51, 16, 39, 62, 138, 240, 98, 189, 152, 52, 225, 189, 24, 118, 0, 61, 63, 25, 89, 62, 67, 191, 101, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 103, 185, 190, 66, 77, 229, 62, 62, 118, 8, 63, 13, 7, 225, 62, 243, 105, 81, 190, 252, 21, 230, 190, 107, 124, 111, 191, 9, 169, 74, 63, 114, 9, 149, 62, 111, 15, 64, 63, 158, 59, 237, 62, 3, 75, 89, 191, 36, 213, 57, 62, 0, 249, 173, 62, 243, 12, 244, 60, 52, 228, 80, 191, 216, 3, 96, 63, 145, 170, 172, 61, 89, 216, 142, 62, 233, 40, 166, 190, 173, 92, 51, 62, 215, 179, 138, 61, 238, 86, 120, 191, 238, 131, 8, 191, 214, 28, 242, 60, 60, 112, 244, 190, 168, 182, 91, 60, 245, 60, 192, 190, 135, 193, 91, 63, 137, 27, 145, 62, 232, 130, 208, 188, 21, 208, 58, 62, 155, 82, 156, 188, 246, 54, 61, 190, 215, 88, 127, 190, 254, 97, 132, 61, 111, 60, 150, 190, 39, 254, 148, 190, 184, 121, 41, 62, 119, 60, 84, 61, 151, 0, 249, 189, 249, 21, 204, 62, 167, 234, 160, 189, 196, 226, 61, 188, 119, 70, 134, 190, 16, 193, 167, 190, 118, 71, 132, 61, 214, 138, 233, 59, 251, 167, 54, 62, 37, 77, 125, 190, 168, 172, 159, 189, 189, 95, 186, 61, 24, 185, 233, 189, 195, 254, 65, 61, 245, 113, 79, 62, 228, 85, 246, 60, 54, 186, 124, 190, 111, 219, 53, 62, 164, 47, 192, 190, 168, 43, 210, 60, 35, 190, 225, 62, 53, 65, 28, 189, 219, 5, 5, 191, 43, 79, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 243, 220, 189, 143, 34, 20, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 180, 9, 191, 191, 210, 77, 190, 219, 133, 29, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 2, 41, 64, 199, 113, 107, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}