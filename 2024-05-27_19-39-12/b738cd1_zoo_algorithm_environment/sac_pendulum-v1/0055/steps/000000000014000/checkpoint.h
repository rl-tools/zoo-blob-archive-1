// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 71, 157, 190, 81, 140, 48, 63, 77, 3, 233, 62, 149, 106, 225, 189, 116, 9, 14, 191, 143, 149, 22, 191, 218, 127, 45, 63, 65, 65, 63, 60, 112, 252, 238, 190, 113, 183, 18, 63, 63, 187, 221, 63, 104, 22, 206, 62, 80, 206, 144, 190, 16, 80, 108, 62, 82, 195, 195, 188, 161, 61, 195, 187, 148, 166, 135, 191, 113, 126, 146, 190, 241, 39, 151, 190, 93, 191, 141, 62, 40, 186, 58, 63, 226, 75, 208, 190, 215, 18, 156, 63, 237, 141, 155, 189, 121, 72, 14, 62, 243, 71, 9, 191, 194, 2, 117, 61, 141, 90, 208, 188, 55, 26, 132, 190, 144, 163, 219, 190, 69, 119, 247, 190, 110, 95, 25, 191, 141, 177, 64, 190, 210, 92, 213, 190, 138, 118, 195, 63, 185, 117, 153, 62, 164, 193, 13, 63, 30, 174, 76, 63, 1, 239, 182, 62, 94, 141, 4, 190, 125, 140, 145, 191, 87, 175, 253, 189, 17, 132, 183, 190, 173, 67, 165, 188, 118, 155, 244, 190, 94, 122, 210, 190, 0, 77, 132, 63, 156, 241, 102, 62, 34, 70, 158, 61, 135, 79, 109, 63, 101, 71, 222, 190, 252, 100, 22, 191, 5, 77, 114, 62, 202, 242, 60, 63, 215, 6, 56, 189, 181, 198, 135, 191, 33, 59, 59, 191, 144, 22, 50, 63, 193, 151, 43, 191, 87, 110, 196, 190, 142, 27, 122, 191, 151, 169, 101, 62, 3, 134, 82, 61, 207, 225, 154, 190, 28, 123, 21, 191, 131, 250, 146, 62, 16, 155, 38, 62, 150, 35, 162, 191, 143, 175, 106, 190, 5, 113, 243, 62, 131, 39, 156, 191, 174, 177, 87, 190, 239, 21, 4, 191, 237, 216, 130, 191, 4, 199, 177, 190, 71, 45, 7, 191, 52, 253, 165, 190, 234, 73, 58, 63, 145, 50, 130, 191, 124, 178, 7, 63, 42, 233, 221, 188, 157, 196, 53, 63, 140, 139, 180, 63, 24, 187, 233, 62, 97, 84, 34, 63, 84, 209, 204, 62, 31, 243, 233, 190, 242, 57, 138, 62, 89, 5, 82, 191, 101, 193, 151, 61, 253, 226, 77, 63, 139, 226, 212, 190, 248, 126, 143, 190, 33, 105, 28, 63, 247, 62, 165, 62, 131, 99, 84, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 168, 222, 190, 57, 134, 37, 190, 207, 131, 67, 191, 8, 58, 173, 61, 223, 197, 175, 62, 253, 96, 82, 190, 203, 149, 76, 61, 77, 6, 138, 190, 132, 30, 142, 62, 244, 212, 84, 190, 253, 159, 15, 63, 107, 244, 82, 190, 20, 107, 52, 191, 150, 143, 72, 62, 84, 16, 208, 190, 35, 184, 199, 62, 141, 137, 109, 61, 111, 162, 169, 190, 139, 4, 14, 190, 243, 194, 168, 60, 58, 253, 134, 189, 99, 157, 178, 62, 68, 152, 19, 63, 196, 4, 34, 62, 131, 94, 249, 190, 132, 44, 15, 191, 61, 213, 209, 62, 224, 163, 2, 63, 174, 84, 39, 191, 140, 245, 20, 63, 86, 226, 100, 191, 132, 214, 140, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 255, 35, 62, 156, 201, 199, 189, 103, 242, 67, 189, 235, 226, 87, 190, 203, 170, 216, 189, 26, 162, 215, 62, 18, 38, 146, 62, 189, 19, 191, 61, 23, 13, 33, 189, 33, 123, 175, 62, 180, 147, 7, 190, 99, 170, 30, 188, 120, 41, 37, 62, 208, 211, 73, 59, 147, 242, 44, 190, 74, 51, 167, 189, 147, 39, 118, 189, 207, 33, 200, 62, 155, 193, 116, 189, 114, 17, 44, 191, 127, 147, 77, 190, 27, 150, 203, 62, 144, 227, 27, 62, 203, 239, 199, 190, 58, 161, 95, 191, 54, 200, 77, 62, 170, 7, 40, 189, 115, 127, 117, 190, 188, 160, 145, 189, 24, 107, 227, 61, 90, 22, 1, 62, 61, 81, 42, 191, 253, 177, 151, 190, 175, 91, 231, 59, 72, 145, 132, 61, 173, 54, 169, 190, 147, 80, 83, 62, 42, 134, 238, 61, 134, 144, 8, 191, 70, 47, 48, 62, 2, 33, 3, 191, 126, 73, 16, 62, 140, 86, 12, 190, 186, 53, 32, 191, 50, 18, 207, 62, 15, 235, 215, 190, 192, 249, 67, 189, 18, 238, 44, 189, 3, 106, 9, 62, 150, 120, 57, 191, 64, 95, 158, 61, 97, 216, 232, 60, 187, 17, 33, 61, 228, 152, 183, 190, 84, 151, 142, 61, 183, 39, 181, 61, 12, 47, 209, 190, 6, 134, 93, 188, 248, 223, 52, 190, 102, 186, 32, 190, 59, 47, 84, 60, 143, 210, 246, 189, 31, 186, 189, 61, 94, 33, 7, 63, 89, 39, 177, 189, 1, 31, 228, 189, 249, 127, 121, 62, 54, 59, 20, 191, 52, 110, 129, 190, 39, 95, 138, 190, 47, 18, 187, 61, 11, 102, 57, 189, 25, 120, 39, 59, 216, 148, 10, 190, 126, 75, 170, 190, 175, 214, 138, 61, 152, 43, 17, 191, 60, 24, 233, 189, 123, 215, 65, 190, 134, 44, 226, 190, 9, 79, 240, 61, 14, 110, 130, 62, 157, 25, 158, 188, 169, 153, 146, 62, 236, 42, 144, 190, 7, 152, 17, 62, 110, 212, 127, 60, 52, 40, 74, 62, 246, 121, 23, 191, 167, 239, 137, 189, 81, 254, 178, 190, 165, 89, 197, 189, 122, 68, 0, 63, 153, 194, 50, 62, 245, 4, 229, 189, 80, 92, 72, 61, 157, 155, 84, 62, 122, 99, 140, 61, 82, 230, 230, 187, 6, 218, 213, 62, 29, 209, 133, 189, 113, 78, 78, 62, 241, 105, 229, 189, 134, 75, 189, 189, 204, 63, 139, 190, 68, 252, 159, 62, 209, 240, 72, 62, 252, 2, 65, 190, 217, 127, 237, 62, 120, 166, 21, 62, 198, 209, 227, 60, 52, 112, 97, 190, 205, 42, 19, 189, 120, 169, 32, 190, 116, 154, 152, 62, 45, 190, 71, 189, 39, 165, 140, 190, 46, 239, 2, 190, 35, 225, 11, 190, 109, 160, 110, 190, 181, 128, 0, 189, 46, 211, 163, 62, 35, 136, 86, 189, 150, 100, 70, 62, 66, 159, 66, 190, 73, 143, 134, 190, 249, 7, 118, 62, 74, 140, 98, 62, 158, 176, 165, 190, 59, 84, 188, 58, 244, 151, 17, 189, 80, 13, 218, 62, 233, 216, 33, 189, 60, 160, 150, 62, 33, 176, 64, 190, 244, 144, 180, 60, 101, 135, 1, 62, 161, 50, 189, 61, 178, 183, 3, 190, 60, 103, 30, 190, 39, 167, 149, 190, 232, 1, 42, 62, 153, 104, 174, 62, 245, 33, 125, 61, 203, 55, 247, 61, 5, 169, 164, 190, 137, 78, 74, 62, 216, 132, 6, 62, 8, 47, 70, 62, 206, 247, 216, 61, 255, 214, 142, 189, 28, 105, 239, 189, 223, 146, 2, 61, 107, 209, 1, 190, 164, 209, 143, 188, 142, 3, 67, 62, 126, 240, 244, 61, 246, 158, 205, 60, 145, 30, 124, 189, 4, 169, 186, 61, 3, 238, 160, 190, 33, 53, 124, 190, 38, 49, 107, 189, 97, 163, 27, 62, 50, 160, 86, 62, 139, 186, 31, 190, 52, 136, 157, 62, 113, 83, 101, 191, 70, 95, 144, 62, 69, 198, 193, 62, 123, 150, 113, 61, 72, 52, 50, 189, 182, 128, 181, 189, 133, 189, 160, 62, 150, 211, 64, 62, 143, 95, 184, 61, 150, 196, 99, 62, 133, 52, 205, 61, 143, 49, 0, 191, 27, 139, 150, 61, 253, 246, 166, 60, 72, 19, 82, 62, 67, 33, 179, 61, 77, 252, 233, 189, 112, 197, 140, 191, 110, 240, 67, 190, 142, 25, 203, 189, 234, 152, 140, 189, 111, 150, 79, 62, 144, 196, 186, 62, 4, 21, 2, 191, 22, 209, 83, 62, 217, 25, 82, 62, 117, 83, 210, 60, 222, 118, 223, 190, 50, 177, 19, 63, 48, 170, 49, 62, 26, 161, 148, 188, 54, 150, 150, 191, 247, 70, 159, 61, 110, 74, 38, 190, 164, 12, 151, 62, 162, 31, 83, 59, 224, 133, 23, 191, 156, 2, 19, 190, 204, 26, 168, 62, 162, 21, 7, 63, 165, 97, 175, 62, 38, 60, 167, 61, 137, 254, 133, 191, 110, 235, 172, 62, 48, 115, 230, 189, 150, 255, 35, 62, 199, 52, 179, 190, 173, 10, 138, 188, 221, 32, 231, 190, 129, 162, 161, 190, 70, 252, 80, 187, 183, 176, 117, 62, 59, 178, 221, 61, 22, 90, 40, 190, 91, 74, 50, 190, 55, 125, 122, 191, 199, 8, 201, 189, 6, 201, 188, 190, 49, 56, 183, 189, 189, 78, 57, 62, 242, 253, 42, 191, 68, 10, 122, 62, 7, 84, 251, 190, 22, 211, 153, 62, 52, 101, 4, 63, 4, 170, 80, 62, 68, 240, 87, 191, 185, 191, 67, 62, 252, 199, 124, 62, 137, 64, 107, 191, 10, 62, 110, 190, 40, 126, 71, 191, 37, 199, 57, 62, 82, 251, 167, 62, 81, 36, 60, 62, 29, 254, 140, 190, 151, 66, 207, 61, 147, 213, 133, 62, 226, 13, 91, 62, 48, 20, 142, 61, 138, 21, 37, 62, 56, 65, 66, 63, 49, 104, 191, 190, 82, 242, 221, 62, 119, 52, 15, 190, 26, 198, 73, 190, 79, 198, 249, 61, 163, 215, 178, 62, 171, 21, 153, 62, 122, 16, 9, 63, 206, 190, 70, 62, 34, 116, 44, 190, 86, 242, 110, 190, 181, 126, 218, 189, 222, 164, 219, 61, 196, 90, 16, 191, 50, 130, 172, 190, 228, 107, 246, 60, 120, 91, 88, 61, 221, 43, 156, 62, 35, 160, 35, 190, 78, 3, 162, 191, 233, 172, 164, 62, 166, 14, 135, 61, 116, 200, 44, 191, 14, 90, 145, 188, 172, 112, 181, 61, 111, 218, 81, 62, 41, 92, 135, 188, 56, 246, 129, 62, 195, 227, 65, 62, 44, 206, 116, 61, 14, 149, 197, 62, 40, 109, 62, 62, 2, 185, 146, 62, 75, 157, 128, 190, 151, 110, 223, 61, 250, 210, 205, 61, 9, 151, 94, 62, 39, 113, 162, 190, 76, 156, 70, 189, 168, 200, 203, 190, 28, 152, 178, 189, 128, 32, 197, 62, 107, 15, 70, 191, 196, 17, 229, 189, 204, 199, 194, 190, 176, 40, 193, 62, 114, 47, 136, 60, 49, 7, 174, 189, 182, 27, 161, 190, 40, 43, 174, 189, 34, 142, 252, 62, 202, 119, 37, 191, 194, 98, 197, 190, 103, 232, 159, 190, 150, 42, 250, 189, 185, 155, 245, 187, 22, 183, 185, 62, 99, 71, 22, 189, 3, 162, 135, 62, 231, 66, 204, 61, 40, 33, 128, 62, 249, 132, 50, 189, 124, 15, 172, 62, 203, 15, 186, 190, 81, 251, 144, 190, 169, 208, 31, 62, 192, 217, 128, 190, 69, 14, 234, 62, 134, 5, 243, 61, 35, 3, 159, 62, 22, 169, 94, 62, 200, 245, 133, 190, 196, 220, 24, 62, 88, 95, 45, 189, 149, 186, 172, 61, 124, 254, 254, 61, 150, 220, 199, 62, 132, 170, 175, 190, 19, 184, 41, 62, 11, 141, 55, 191, 26, 226, 112, 62, 227, 74, 86, 62, 243, 82, 129, 190, 177, 71, 255, 62, 228, 10, 80, 190, 113, 4, 177, 62, 11, 243, 18, 61, 223, 80, 231, 189, 205, 91, 7, 191, 70, 23, 36, 62, 106, 179, 39, 190, 103, 217, 11, 62, 6, 201, 164, 62, 215, 225, 253, 60, 84, 114, 201, 62, 69, 193, 115, 62, 198, 162, 3, 191, 192, 16, 239, 189, 159, 210, 200, 61, 155, 106, 114, 190, 147, 63, 228, 190, 204, 210, 236, 61, 201, 191, 182, 62, 176, 77, 174, 189, 174, 169, 162, 61, 15, 5, 253, 190, 15, 219, 118, 62, 241, 82, 10, 189, 100, 166, 94, 62, 3, 75, 121, 191, 8, 165, 95, 190, 227, 145, 189, 189, 228, 220, 184, 62, 11, 154, 245, 61, 99, 198, 179, 191, 198, 226, 36, 190, 101, 238, 123, 61, 207, 69, 240, 62, 254, 164, 76, 62, 243, 41, 236, 188, 91, 4, 167, 191, 35, 55, 159, 62, 171, 192, 56, 190, 149, 142, 63, 190, 33, 160, 220, 188, 50, 167, 30, 190, 113, 222, 254, 190, 193, 12, 188, 190, 8, 130, 254, 189, 79, 129, 37, 189, 243, 54, 199, 59, 130, 36, 174, 188, 61, 57, 35, 190, 141, 52, 135, 191, 163, 104, 163, 62, 79, 237, 94, 61, 191, 134, 9, 190, 40, 130, 85, 62, 164, 156, 185, 190, 117, 26, 137, 189, 228, 181, 175, 190, 102, 171, 9, 62, 75, 208, 38, 61, 35, 230, 134, 61, 112, 30, 231, 190, 103, 99, 40, 190, 71, 236, 131, 62, 107, 118, 34, 190, 188, 90, 19, 190, 92, 21, 134, 60, 109, 105, 135, 189, 241, 214, 156, 62, 145, 246, 148, 60, 138, 44, 137, 189, 51, 27, 128, 62, 22, 166, 182, 190, 118, 74, 205, 61, 213, 30, 125, 189, 172, 135, 135, 62, 48, 12, 207, 190, 253, 94, 176, 61, 251, 39, 185, 190, 44, 126, 251, 189, 32, 231, 138, 62, 93, 158, 33, 62, 53, 11, 63, 190, 137, 232, 124, 189, 100, 170, 131, 190, 68, 196, 162, 189, 120, 175, 144, 62, 181, 157, 193, 190, 40, 183, 41, 62, 233, 78, 246, 190, 202, 64, 27, 62, 86, 108, 132, 62, 138, 173, 13, 62, 133, 168, 96, 191, 225, 117, 4, 62, 173, 159, 52, 62, 52, 224, 106, 191, 129, 183, 46, 62, 17, 82, 183, 190, 135, 30, 107, 61, 240, 71, 5, 189, 80, 146, 115, 62, 96, 106, 162, 190, 71, 47, 24, 62, 233, 140, 73, 62, 174, 135, 219, 188, 244, 53, 58, 62, 88, 168, 92, 61, 226, 76, 58, 63, 237, 196, 81, 190, 192, 154, 215, 62, 182, 255, 18, 190, 136, 78, 171, 189, 40, 21, 61, 62, 242, 15, 58, 190, 146, 164, 107, 62, 78, 104, 106, 188, 123, 126, 185, 189, 149, 175, 195, 187, 252, 55, 186, 189, 58, 75, 159, 61, 153, 158, 186, 60, 109, 120, 163, 188, 195, 222, 22, 62, 104, 50, 145, 189, 31, 61, 46, 188, 190, 243, 222, 189, 175, 72, 218, 60, 170, 245, 36, 62, 74, 232, 79, 189, 141, 63, 42, 190, 158, 147, 41, 190, 127, 253, 148, 189, 45, 20, 154, 188, 91, 43, 7, 62, 106, 223, 22, 190, 10, 140, 190, 60, 111, 193, 104, 61, 176, 243, 156, 60, 189, 4, 183, 61, 183, 243, 22, 190, 39, 13, 195, 189, 201, 234, 39, 190, 51, 214, 17, 189, 179, 134, 185, 189, 15, 94, 13, 190, 140, 19, 143, 61, 197, 245, 11, 62, 92, 98, 25, 190, 41, 23, 49, 62, 132, 221, 185, 190, 174, 208, 129, 185, 143, 5, 248, 189, 46, 100, 243, 189, 227, 206, 236, 60, 114, 113, 48, 62, 226, 86, 77, 191, 45, 175, 120, 61, 7, 175, 169, 191, 163, 66, 154, 190, 210, 209, 115, 62, 55, 245, 179, 190, 122, 194, 138, 62, 37, 57, 90, 189, 198, 77, 135, 62, 238, 57, 217, 60, 145, 207, 23, 190, 248, 219, 233, 190, 90, 227, 112, 62, 31, 124, 143, 190, 117, 121, 251, 190, 79, 205, 170, 190, 151, 68, 11, 190, 196, 25, 169, 61, 102, 138, 125, 62, 33, 143, 144, 188, 15, 179, 244, 190, 29, 195, 136, 191, 69, 10, 27, 190, 217, 221, 208, 191, 91, 222, 216, 190, 248, 144, 247, 189, 77, 61, 193, 62, 117, 201, 64, 191, 5, 24, 185, 61, 165, 233, 196, 190, 29, 82, 115, 62, 90, 241, 98, 190, 170, 50, 80, 62, 86, 53, 99, 190, 244, 143, 120, 189, 123, 231, 196, 62, 192, 218, 67, 191, 111, 226, 233, 189, 205, 23, 147, 190, 101, 206, 65, 190, 38, 169, 138, 62, 209, 169, 185, 62, 19, 194, 55, 190, 98, 197, 47, 62, 4, 164, 184, 62, 89, 32, 6, 63, 39, 160, 82, 189, 131, 246, 143, 61, 62, 69, 151, 189, 120, 246, 204, 190, 20, 237, 197, 189, 76, 8, 173, 190, 138, 192, 165, 62, 3, 53, 154, 61, 194, 185, 73, 62, 222, 234, 145, 62, 171, 224, 17, 190, 188, 150, 87, 190, 209, 212, 157, 61, 144, 4, 237, 190, 205, 79, 131, 61, 146, 119, 188, 189, 121, 252, 88, 62, 153, 63, 35, 61, 78, 244, 25, 188, 11, 180, 77, 190, 133, 234, 39, 189, 185, 241, 207, 62, 122, 53, 221, 190, 34, 198, 81, 190, 20, 167, 30, 189, 65, 79, 199, 61, 132, 42, 89, 61, 185, 229, 115, 62, 199, 185, 128, 61, 117, 210, 89, 62, 141, 158, 91, 62, 199, 118, 170, 61, 45, 8, 83, 62, 232, 200, 172, 62, 27, 203, 4, 61, 160, 155, 95, 190, 164, 121, 21, 61, 229, 4, 174, 61, 221, 194, 97, 61, 135, 47, 157, 189, 216, 23, 93, 190, 98, 117, 250, 60, 235, 205, 142, 190, 35, 125, 224, 188, 13, 55, 219, 189, 21, 141, 202, 190, 190, 100, 218, 60, 7, 89, 132, 59, 241, 138, 228, 62, 56, 73, 67, 62, 70, 218, 179, 61, 98, 79, 26, 189, 11, 166, 38, 62, 232, 9, 212, 62, 26, 209, 30, 191, 86, 114, 166, 189, 44, 157, 164, 190, 5, 53, 12, 190, 116, 124, 224, 61, 229, 52, 20, 63, 64, 123, 39, 189, 211, 179, 161, 61, 113, 180, 157, 62, 173, 206, 28, 62, 98, 24, 132, 62, 168, 180, 44, 62, 38, 16, 31, 189, 232, 103, 159, 190, 47, 125, 162, 60, 84, 213, 158, 190, 164, 231, 219, 61, 117, 119, 178, 61, 2, 187, 161, 190, 222, 101, 88, 62, 206, 182, 140, 188, 162, 119, 179, 190, 35, 136, 38, 190, 40, 244, 145, 190, 173, 218, 217, 189, 62, 82, 33, 191, 140, 55, 209, 62, 235, 102, 26, 190, 194, 233, 145, 62, 14, 42, 162, 190, 204, 186, 228, 189, 165, 102, 185, 61, 153, 13, 175, 62, 145, 253, 248, 188, 59, 57, 117, 190, 194, 119, 54, 190, 57, 159, 229, 190, 104, 241, 79, 62, 121, 213, 18, 191, 199, 134, 191, 190, 181, 131, 10, 190, 182, 119, 91, 62, 208, 127, 161, 61, 13, 239, 18, 190, 69, 182, 126, 191, 224, 69, 65, 62, 148, 188, 226, 189, 197, 77, 241, 189, 112, 223, 56, 190, 48, 55, 249, 61, 233, 187, 101, 189, 172, 51, 72, 189, 9, 209, 41, 190, 143, 206, 72, 190, 167, 204, 243, 61, 143, 122, 136, 190, 205, 26, 140, 61, 47, 16, 12, 191, 200, 161, 203, 61, 62, 149, 145, 62, 36, 157, 224, 60, 97, 145, 26, 191, 237, 113, 15, 62, 132, 173, 190, 62, 94, 241, 5, 191, 167, 12, 151, 190, 198, 245, 208, 61, 210, 130, 60, 62, 131, 26, 92, 62, 70, 38, 134, 62, 162, 222, 177, 190, 182, 131, 221, 61, 52, 122, 243, 61, 28, 5, 23, 189, 42, 15, 198, 188, 233, 78, 160, 62, 137, 233, 159, 190, 177, 26, 149, 61, 229, 87, 75, 62, 113, 184, 244, 187, 228, 214, 161, 190, 60, 206, 160, 189, 176, 218, 49, 190, 47, 164, 130, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 68, 111, 7, 191, 110, 186, 128, 62, 171, 105, 166, 189, 163, 172, 226, 190, 71, 174, 123, 190, 55, 198, 40, 62, 94, 43, 108, 191, 148, 255, 186, 190, 238, 135, 164, 62, 27, 16, 161, 61, 185, 213, 14, 62, 165, 15, 184, 191, 199, 108, 57, 186, 125, 41, 215, 62, 35, 67, 86, 62, 50, 30, 55, 190, 151, 153, 155, 190, 210, 215, 243, 190, 107, 163, 164, 62, 140, 2, 83, 62, 255, 228, 213, 190, 232, 90, 54, 62, 4, 211, 173, 62, 161, 246, 29, 190, 142, 184, 129, 189, 136, 201, 107, 63, 80, 245, 247, 189, 39, 140, 209, 191, 178, 41, 146, 189, 101, 157, 178, 62, 106, 50, 123, 62, 46, 233, 0, 191, 46, 62, 174, 189, 41, 9, 73, 62, 170, 0, 72, 190, 212, 162, 30, 63, 225, 135, 170, 187, 122, 60, 41, 62, 32, 228, 202, 189, 116, 208, 6, 190, 96, 7, 219, 189, 255, 57, 149, 62, 192, 93, 129, 190, 54, 155, 31, 191, 104, 145, 122, 62, 86, 30, 146, 62, 26, 220, 197, 62, 105, 232, 45, 190, 196, 104, 0, 190, 142, 205, 164, 190, 115, 170, 46, 62, 123, 216, 60, 190, 117, 109, 141, 190, 117, 203, 159, 62, 41, 105, 242, 189, 162, 195, 227, 190, 210, 34, 136, 190, 90, 52, 146, 62, 98, 144, 51, 190, 188, 78, 162, 62, 176, 49, 11, 190, 196, 25, 94, 61, 200, 70, 13, 191, 200, 132, 82, 61, 189, 206, 0, 189, 76, 225, 23, 190, 199, 15, 31, 61, 66, 61, 231, 185, 224, 78, 28, 62, 196, 215, 212, 187, 13, 105, 235, 60, 100, 127, 51, 59, 24, 175, 42, 190, 70, 252, 108, 190, 15, 248, 94, 62, 25, 131, 168, 62, 227, 152, 211, 190, 180, 232, 217, 189, 172, 28, 143, 61, 2, 228, 126, 187, 197, 102, 77, 62, 194, 114, 49, 62, 255, 88, 21, 190, 137, 138, 252, 60, 189, 67, 38, 62, 95, 41, 43, 62, 178, 237, 17, 62, 132, 43, 3, 190, 10, 222, 155, 189, 94, 115, 201, 189, 164, 80, 176, 189, 247, 97, 109, 61, 51, 145, 14, 190, 137, 178, 121, 61, 185, 31, 89, 190, 131, 241, 237, 61, 122, 89, 162, 61, 71, 175, 127, 62, 160, 121, 208, 188, 97, 226, 213, 62, 84, 151, 227, 60, 3, 48, 127, 61, 26, 64, 57, 190, 202, 32, 134, 61, 90, 188, 48, 190, 246, 162, 109, 62, 191, 50, 148, 189, 175, 21, 51, 191, 202, 167, 1, 63, 242, 62, 30, 61, 135, 204, 151, 62, 198, 74, 243, 61, 225, 159, 33, 190, 188, 122, 15, 191, 62, 44, 30, 62, 233, 41, 168, 190, 94, 216, 92, 190, 20, 221, 83, 62, 206, 11, 143, 188, 198, 91, 162, 190, 217, 14, 83, 61, 1, 209, 162, 62, 51, 160, 132, 189, 79, 147, 167, 62, 175, 152, 30, 190, 96, 82, 102, 190, 121, 217, 33, 191, 234, 62, 7, 62, 110, 107, 20, 190, 187, 43, 37, 190, 144, 45, 214, 188, 161, 78, 141, 190, 253, 107, 82, 62, 154, 55, 239, 189, 251, 62, 93, 61, 206, 97, 0, 189, 244, 134, 39, 190, 184, 15, 82, 190, 142, 60, 39, 190, 134, 158, 48, 190, 36, 134, 13, 191, 8, 194, 36, 61, 90, 125, 120, 190, 15, 113, 114, 190, 119, 149, 149, 62, 119, 37, 13, 62, 195, 245, 76, 61, 127, 186, 75, 189, 61, 165, 144, 61, 151, 15, 160, 61, 11, 40, 84, 62, 72, 181, 141, 62, 241, 19, 82, 190, 49, 157, 215, 61, 230, 50, 209, 60, 210, 96, 18, 189, 41, 172, 193, 61, 40, 126, 0, 190, 75, 44, 47, 190, 60, 94, 39, 62, 155, 61, 38, 191, 149, 107, 90, 188, 107, 253, 205, 188, 174, 88, 229, 62, 249, 123, 151, 62, 41, 214, 146, 190, 32, 51, 196, 188, 103, 247, 161, 62, 174, 66, 177, 189, 240, 229, 44, 61, 191, 75, 19, 190, 132, 186, 47, 189, 128, 151, 50, 190, 251, 83, 40, 190, 154, 139, 136, 61, 63, 182, 54, 62, 4, 197, 109, 62, 21, 10, 206, 61, 231, 77, 132, 190, 229, 0, 140, 189, 150, 34, 244, 61, 48, 204, 205, 61, 220, 212, 129, 190, 13, 2, 254, 190, 156, 84, 130, 61, 140, 241, 133, 190, 232, 75, 182, 60, 7, 100, 61, 62, 115, 91, 63, 59, 67, 188, 189, 189, 35, 187, 14, 191, 32, 204, 148, 61, 162, 46, 245, 190, 58, 118, 201, 190, 201, 12, 36, 62, 55, 239, 12, 191, 158, 154, 26, 62, 244, 169, 209, 190, 19, 57, 122, 62, 167, 212, 170, 62, 128, 25, 54, 60, 162, 144, 29, 191, 33, 28, 115, 190, 134, 194, 5, 63, 161, 175, 105, 191, 199, 198, 69, 190, 207, 156, 203, 190, 133, 37, 126, 61, 218, 66, 11, 190, 132, 38, 209, 62, 199, 236, 201, 190, 179, 23, 102, 62, 104, 171, 154, 62, 52, 77, 206, 62, 76, 125, 17, 62, 211, 142, 0, 63, 152, 227, 179, 190, 208, 80, 236, 190, 117, 41, 100, 62, 102, 199, 174, 190, 206, 88, 111, 62, 158, 72, 214, 61, 115, 176, 106, 189, 53, 245, 77, 62, 4, 241, 11, 61, 81, 175, 2, 62, 127, 84, 148, 61, 22, 134, 176, 190, 132, 148, 106, 190, 74, 199, 37, 188, 130, 98, 29, 190, 196, 184, 150, 190, 197, 215, 130, 62, 33, 225, 175, 188, 141, 127, 138, 62, 35, 201, 67, 190, 167, 198, 124, 191, 150, 183, 122, 62, 24, 101, 226, 60, 70, 204, 72, 191, 209, 47, 138, 61, 174, 220, 3, 61, 171, 122, 89, 62, 117, 108, 7, 62, 103, 116, 212, 62, 71, 231, 137, 62, 205, 70, 196, 62, 143, 92, 215, 61, 62, 6, 21, 62, 207, 55, 1, 62, 55, 138, 181, 190, 41, 84, 195, 189, 36, 234, 93, 62, 44, 25, 255, 61, 94, 218, 171, 187, 44, 88, 232, 188, 46, 35, 246, 189, 79, 231, 7, 62, 196, 72, 184, 60, 19, 83, 186, 189, 122, 65, 179, 61, 40, 220, 132, 61, 33, 49, 250, 190, 53, 236, 201, 189, 140, 199, 29, 62, 9, 161, 166, 189, 101, 190, 104, 189, 151, 204, 7, 191, 193, 185, 236, 190, 10, 69, 102, 189, 95, 144, 182, 190, 120, 247, 164, 190, 194, 19, 78, 61, 252, 30, 175, 190, 199, 176, 60, 190, 249, 190, 150, 62, 96, 10, 40, 190, 121, 227, 61, 190, 106, 242, 242, 61, 105, 171, 230, 188, 45, 70, 122, 190, 65, 46, 52, 190, 88, 85, 163, 190, 65, 193, 86, 62, 113, 252, 12, 62, 32, 92, 93, 62, 218, 133, 250, 190, 84, 161, 222, 62, 122, 230, 27, 190, 92, 28, 215, 188, 199, 130, 246, 189, 44, 123, 32, 190, 213, 160, 92, 62, 249, 47, 72, 62, 251, 97, 148, 62, 228, 25, 82, 62, 92, 80, 163, 190, 251, 85, 211, 61, 14, 97, 161, 62, 40, 104, 45, 62, 176, 244, 184, 61, 45, 218, 185, 189, 76, 69, 113, 62, 158, 83, 197, 62, 149, 251, 205, 58, 69, 239, 152, 62, 75, 129, 134, 189, 222, 222, 250, 60, 84, 242, 34, 63, 95, 235, 46, 61, 90, 231, 137, 189, 125, 77, 226, 61, 214, 214, 163, 62, 9, 49, 51, 188, 92, 202, 116, 62, 142, 31, 219, 190, 115, 111, 151, 61, 13, 22, 45, 190, 211, 176, 47, 62, 144, 157, 108, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 69, 23, 190, 187, 9, 81, 62, 228, 221, 50, 189, 45, 244, 173, 190, 85, 168, 157, 62, 210, 192, 12, 62, 149, 176, 91, 61, 90, 122, 17, 62, 150, 172, 162, 61, 184, 199, 112, 189, 231, 236, 145, 189, 196, 158, 156, 62, 219, 20, 41, 61, 251, 121, 45, 62, 181, 196, 93, 188, 1, 40, 34, 189, 165, 11, 253, 188, 6, 93, 55, 60, 117, 157, 150, 62, 202, 177, 132, 189, 169, 50, 144, 188, 217, 106, 197, 189, 110, 245, 163, 190, 110, 118, 20, 62, 213, 29, 169, 62, 21, 251, 9, 62, 74, 154, 32, 62, 127, 107, 136, 189, 173, 244, 171, 189, 55, 51, 6, 61, 243, 111, 138, 62, 160, 230, 92, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 104, 187, 190, 137, 168, 175, 62, 163, 27, 186, 62, 16, 10, 5, 63, 148, 94, 101, 190, 46, 132, 248, 190, 68, 10, 102, 191, 185, 183, 91, 63, 242, 78, 159, 62, 93, 208, 4, 63, 85, 121, 229, 62, 33, 92, 60, 191, 165, 139, 37, 62, 115, 136, 189, 62, 243, 12, 244, 60, 53, 234, 80, 191, 235, 228, 62, 63, 150, 247, 23, 62, 207, 193, 160, 62, 141, 155, 168, 190, 51, 163, 56, 62, 215, 179, 138, 61, 248, 98, 104, 191, 122, 105, 15, 191, 131, 125, 10, 61, 74, 142, 2, 191, 89, 50, 207, 60, 93, 141, 220, 190, 84, 54, 42, 63, 148, 29, 160, 62, 5, 49, 235, 188, 161, 200, 86, 62, 245, 200, 233, 188, 45, 15, 28, 190, 91, 176, 122, 190, 219, 70, 203, 61, 230, 30, 138, 190, 87, 152, 132, 190, 124, 193, 136, 62, 147, 53, 141, 60, 36, 251, 241, 189, 85, 113, 202, 62, 62, 241, 108, 189, 71, 165, 61, 189, 192, 239, 65, 190, 170, 196, 175, 190, 118, 71, 132, 61, 20, 77, 233, 59, 101, 222, 30, 62, 147, 158, 46, 190, 59, 51, 207, 188, 201, 82, 237, 61, 89, 135, 169, 189, 195, 254, 65, 61, 253, 25, 25, 62, 135, 206, 149, 60, 245, 54, 90, 190, 27, 147, 52, 62, 53, 60, 143, 190, 46, 154, 202, 61, 239, 199, 186, 62, 6, 18, 60, 189, 106, 116, 240, 190, 149, 202, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 244, 247, 189, 233, 128, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 86, 199, 62, 54, 127, 115, 191, 5, 115, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 216, 140, 190, 177, 95, 181, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}