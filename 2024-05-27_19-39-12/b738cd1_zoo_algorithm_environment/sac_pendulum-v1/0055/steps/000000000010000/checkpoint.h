// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 224, 150, 190, 30, 33, 24, 63, 14, 1, 236, 62, 58, 238, 1, 190, 159, 84, 248, 190, 127, 96, 29, 191, 215, 92, 6, 63, 245, 139, 53, 190, 39, 135, 245, 190, 150, 70, 15, 63, 27, 213, 220, 63, 210, 56, 190, 62, 4, 82, 61, 190, 39, 36, 163, 62, 145, 114, 190, 60, 136, 112, 149, 189, 62, 29, 109, 191, 72, 170, 163, 190, 240, 121, 156, 190, 239, 186, 117, 62, 47, 27, 68, 63, 224, 95, 163, 190, 184, 132, 155, 63, 131, 145, 173, 189, 153, 89, 64, 62, 117, 184, 41, 191, 231, 61, 56, 61, 198, 175, 12, 190, 60, 144, 154, 190, 208, 179, 176, 190, 187, 222, 223, 190, 58, 95, 32, 191, 73, 220, 220, 189, 131, 107, 243, 190, 159, 56, 168, 63, 108, 40, 206, 62, 87, 152, 255, 62, 105, 246, 73, 63, 53, 191, 164, 62, 241, 248, 15, 190, 113, 165, 152, 191, 66, 129, 101, 189, 24, 53, 135, 190, 118, 116, 138, 187, 68, 11, 236, 190, 111, 8, 230, 190, 114, 110, 112, 63, 31, 215, 68, 62, 104, 198, 1, 62, 146, 80, 47, 63, 132, 113, 234, 190, 188, 176, 27, 191, 255, 179, 44, 62, 253, 178, 63, 63, 144, 5, 243, 189, 12, 252, 134, 191, 226, 131, 57, 191, 91, 164, 54, 63, 203, 90, 7, 191, 0, 242, 0, 191, 98, 117, 80, 191, 129, 59, 96, 62, 35, 35, 85, 61, 83, 125, 131, 190, 94, 5, 14, 191, 21, 238, 79, 62, 79, 181, 75, 62, 97, 237, 146, 191, 151, 231, 102, 190, 188, 58, 5, 63, 46, 185, 148, 191, 39, 147, 102, 190, 54, 7, 167, 190, 116, 178, 119, 191, 181, 103, 169, 190, 64, 122, 233, 190, 149, 26, 174, 190, 227, 103, 61, 63, 136, 37, 80, 191, 221, 148, 20, 63, 203, 45, 225, 187, 40, 79, 58, 63, 177, 90, 176, 63, 63, 240, 232, 62, 73, 165, 32, 63, 214, 153, 69, 62, 143, 13, 235, 190, 238, 178, 170, 62, 203, 46, 109, 191, 122, 50, 159, 61, 180, 46, 53, 63, 154, 207, 234, 190, 229, 137, 144, 190, 135, 119, 46, 63, 225, 202, 139, 62, 109, 180, 3, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 175, 182, 190, 119, 77, 16, 189, 57, 78, 73, 191, 181, 69, 184, 61, 84, 84, 188, 62, 194, 31, 57, 190, 215, 15, 22, 189, 129, 21, 247, 189, 98, 133, 166, 62, 97, 214, 88, 190, 89, 55, 13, 63, 6, 17, 194, 189, 190, 186, 14, 191, 139, 123, 87, 62, 226, 53, 214, 190, 92, 231, 210, 62, 86, 24, 23, 62, 89, 47, 231, 190, 242, 193, 58, 188, 174, 67, 234, 60, 183, 24, 4, 190, 222, 224, 223, 62, 37, 2, 36, 63, 63, 173, 24, 62, 66, 51, 21, 191, 155, 25, 208, 190, 50, 243, 162, 62, 122, 163, 10, 63, 24, 123, 19, 191, 131, 144, 40, 63, 190, 31, 97, 191, 119, 153, 89, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 92, 22, 62, 106, 32, 53, 189, 103, 242, 67, 189, 161, 53, 110, 190, 252, 13, 128, 189, 169, 208, 88, 62, 60, 111, 134, 62, 236, 21, 117, 62, 122, 81, 116, 189, 48, 116, 172, 62, 242, 25, 206, 189, 134, 216, 235, 186, 103, 51, 186, 60, 237, 120, 82, 188, 190, 233, 135, 190, 195, 36, 94, 189, 118, 165, 224, 189, 179, 3, 187, 62, 171, 199, 186, 60, 188, 179, 216, 190, 210, 88, 211, 189, 249, 241, 188, 62, 175, 46, 29, 62, 4, 123, 217, 190, 229, 158, 67, 191, 174, 136, 37, 62, 61, 33, 140, 61, 246, 80, 99, 190, 188, 160, 145, 189, 48, 88, 200, 61, 90, 22, 1, 62, 94, 124, 49, 191, 55, 70, 151, 190, 149, 49, 145, 60, 236, 99, 207, 60, 165, 80, 215, 190, 95, 130, 141, 62, 234, 178, 49, 62, 160, 233, 238, 190, 214, 226, 97, 62, 5, 153, 22, 191, 128, 246, 30, 62, 80, 73, 178, 188, 98, 37, 1, 191, 76, 16, 207, 62, 138, 191, 155, 190, 231, 45, 140, 188, 129, 220, 1, 62, 40, 28, 214, 61, 76, 252, 52, 191, 199, 190, 159, 61, 10, 110, 45, 189, 39, 6, 62, 62, 184, 90, 48, 190, 159, 233, 189, 60, 178, 12, 86, 189, 92, 61, 161, 190, 6, 134, 93, 188, 13, 226, 24, 189, 67, 86, 152, 190, 0, 185, 60, 189, 41, 18, 107, 190, 224, 207, 103, 189, 182, 180, 192, 62, 82, 145, 222, 188, 136, 108, 186, 189, 67, 249, 29, 62, 255, 150, 6, 191, 120, 182, 111, 190, 14, 59, 73, 189, 89, 117, 208, 61, 95, 80, 161, 189, 143, 157, 62, 61, 96, 66, 236, 189, 147, 74, 97, 190, 9, 113, 9, 62, 94, 222, 150, 190, 245, 194, 141, 189, 48, 132, 111, 190, 117, 48, 178, 190, 216, 253, 112, 61, 167, 251, 152, 62, 243, 24, 104, 61, 71, 224, 164, 62, 97, 186, 156, 190, 123, 63, 10, 62, 238, 187, 125, 61, 48, 88, 121, 62, 160, 74, 232, 190, 119, 206, 65, 189, 94, 86, 180, 190, 200, 201, 185, 189, 94, 218, 189, 62, 71, 198, 87, 62, 191, 224, 2, 189, 237, 135, 134, 61, 104, 233, 42, 62, 72, 45, 76, 61, 79, 173, 150, 188, 186, 211, 197, 62, 229, 202, 186, 189, 124, 226, 47, 62, 150, 77, 9, 190, 175, 250, 27, 190, 9, 117, 127, 190, 198, 227, 147, 62, 16, 99, 58, 62, 68, 232, 130, 190, 109, 151, 203, 62, 21, 84, 220, 61, 188, 159, 128, 60, 207, 83, 130, 190, 229, 23, 232, 188, 4, 76, 61, 190, 180, 96, 139, 62, 10, 199, 91, 189, 26, 83, 143, 190, 132, 183, 30, 190, 44, 13, 36, 190, 193, 113, 135, 190, 179, 210, 54, 189, 233, 27, 160, 62, 182, 189, 122, 189, 254, 227, 58, 62, 154, 131, 71, 190, 109, 230, 101, 190, 150, 255, 56, 62, 50, 230, 146, 62, 43, 236, 94, 190, 255, 184, 30, 60, 136, 138, 114, 188, 216, 119, 240, 62, 140, 12, 87, 61, 141, 119, 137, 62, 31, 143, 234, 189, 99, 12, 238, 61, 186, 239, 3, 62, 7, 69, 206, 61, 51, 143, 11, 190, 244, 178, 81, 189, 122, 109, 143, 190, 113, 171, 58, 62, 109, 29, 182, 62, 222, 127, 5, 62, 161, 217, 2, 62, 14, 60, 106, 190, 18, 237, 65, 62, 224, 169, 243, 61, 82, 250, 149, 62, 182, 45, 63, 62, 228, 10, 159, 189, 208, 7, 16, 190, 163, 89, 100, 61, 107, 65, 139, 189, 141, 200, 170, 61, 142, 116, 111, 62, 197, 248, 22, 62, 117, 0, 224, 60, 95, 233, 218, 189, 109, 246, 168, 61, 73, 167, 164, 190, 178, 111, 167, 190, 88, 59, 158, 189, 190, 118, 255, 61, 159, 81, 112, 62, 195, 54, 164, 190, 119, 33, 146, 62, 22, 68, 60, 191, 212, 118, 137, 62, 173, 45, 79, 62, 195, 142, 250, 60, 119, 199, 88, 188, 219, 219, 126, 190, 116, 124, 167, 62, 78, 191, 147, 189, 202, 155, 219, 61, 174, 74, 46, 62, 255, 176, 165, 61, 164, 233, 23, 191, 141, 90, 131, 61, 190, 247, 253, 61, 119, 147, 54, 62, 36, 102, 163, 61, 24, 38, 247, 189, 151, 196, 152, 191, 230, 203, 104, 190, 91, 250, 53, 61, 223, 11, 158, 189, 12, 118, 13, 62, 234, 120, 181, 62, 141, 196, 242, 190, 107, 108, 51, 62, 132, 181, 195, 61, 154, 7, 152, 187, 133, 150, 218, 190, 196, 6, 253, 62, 55, 160, 20, 62, 26, 92, 226, 188, 121, 207, 151, 191, 70, 59, 67, 61, 79, 199, 119, 189, 236, 145, 131, 62, 105, 129, 59, 60, 16, 172, 37, 191, 183, 241, 151, 190, 149, 0, 213, 62, 225, 98, 240, 62, 140, 30, 35, 62, 82, 165, 53, 61, 39, 56, 125, 191, 138, 171, 166, 62, 68, 73, 253, 189, 192, 254, 20, 62, 225, 135, 23, 190, 0, 223, 13, 61, 100, 56, 203, 190, 184, 219, 192, 190, 2, 44, 21, 62, 125, 236, 46, 62, 190, 85, 83, 61, 209, 214, 27, 190, 29, 109, 208, 189, 6, 15, 83, 191, 186, 96, 238, 189, 74, 220, 177, 190, 252, 81, 238, 189, 68, 61, 223, 61, 38, 197, 37, 191, 53, 79, 79, 62, 201, 151, 1, 191, 198, 53, 166, 62, 135, 58, 221, 62, 135, 141, 72, 62, 140, 114, 68, 191, 2, 46, 252, 61, 46, 23, 92, 62, 181, 143, 14, 191, 204, 183, 180, 190, 121, 143, 41, 191, 177, 228, 51, 62, 159, 108, 185, 62, 200, 36, 93, 62, 171, 10, 167, 190, 156, 40, 222, 61, 64, 109, 41, 62, 140, 33, 60, 62, 95, 198, 53, 61, 37, 64, 20, 62, 165, 177, 251, 62, 75, 48, 171, 190, 38, 231, 160, 62, 223, 82, 14, 190, 185, 31, 105, 190, 136, 120, 230, 61, 143, 52, 249, 62, 213, 251, 166, 62, 66, 142, 249, 62, 249, 228, 78, 62, 230, 202, 57, 190, 39, 202, 51, 190, 62, 143, 24, 190, 156, 43, 28, 62, 105, 93, 26, 191, 182, 29, 157, 190, 249, 151, 17, 61, 167, 149, 168, 61, 53, 85, 129, 62, 192, 182, 241, 189, 60, 80, 46, 191, 250, 61, 116, 62, 124, 107, 166, 61, 123, 61, 15, 191, 187, 56, 186, 188, 92, 245, 51, 61, 72, 98, 102, 62, 232, 175, 139, 60, 160, 30, 50, 189, 125, 23, 196, 61, 105, 118, 116, 61, 212, 121, 208, 62, 199, 245, 57, 62, 242, 196, 113, 62, 101, 23, 170, 190, 8, 255, 253, 61, 73, 154, 128, 61, 137, 49, 96, 62, 250, 79, 122, 190, 188, 210, 154, 188, 177, 101, 210, 190, 249, 107, 177, 189, 191, 80, 161, 62, 105, 246, 42, 191, 25, 112, 255, 189, 149, 122, 41, 190, 226, 253, 176, 62, 54, 149, 201, 188, 22, 128, 140, 189, 134, 244, 166, 190, 66, 171, 251, 59, 167, 248, 246, 62, 105, 91, 206, 190, 8, 107, 164, 190, 70, 58, 187, 190, 143, 156, 230, 189, 18, 184, 150, 189, 252, 198, 181, 62, 165, 155, 205, 187, 90, 160, 154, 62, 55, 197, 139, 59, 145, 150, 91, 62, 4, 89, 166, 187, 36, 204, 193, 62, 12, 84, 76, 190, 84, 192, 154, 190, 238, 174, 179, 61, 148, 154, 150, 190, 114, 179, 189, 62, 127, 203, 7, 62, 146, 32, 174, 62, 44, 251, 65, 62, 209, 90, 186, 190, 141, 160, 245, 61, 171, 101, 44, 189, 116, 33, 224, 61, 2, 16, 61, 62, 97, 94, 152, 62, 77, 60, 185, 190, 1, 225, 53, 62, 240, 41, 94, 191, 9, 93, 81, 62, 67, 20, 57, 62, 207, 92, 147, 190, 1, 252, 251, 62, 189, 131, 192, 190, 32, 110, 175, 62, 131, 172, 49, 62, 13, 19, 175, 189, 196, 35, 28, 191, 5, 94, 226, 61, 172, 33, 51, 190, 39, 111, 144, 62, 244, 108, 7, 62, 146, 106, 94, 189, 176, 151, 142, 62, 94, 225, 22, 62, 160, 54, 24, 191, 161, 93, 251, 59, 51, 76, 16, 62, 124, 187, 113, 190, 106, 15, 10, 191, 74, 85, 159, 61, 73, 98, 215, 62, 176, 77, 174, 189, 242, 136, 109, 61, 245, 158, 242, 190, 206, 59, 25, 62, 109, 112, 229, 188, 102, 254, 92, 62, 157, 12, 89, 191, 224, 248, 112, 190, 60, 32, 157, 188, 113, 142, 169, 62, 157, 72, 31, 62, 237, 45, 181, 191, 81, 45, 150, 190, 184, 78, 0, 62, 184, 6, 218, 62, 152, 151, 5, 186, 254, 205, 101, 189, 110, 39, 143, 191, 137, 33, 155, 62, 7, 197, 58, 190, 163, 176, 19, 190, 21, 241, 38, 62, 254, 145, 219, 189, 171, 22, 234, 190, 219, 6, 212, 190, 203, 192, 30, 189, 182, 192, 137, 189, 181, 166, 50, 189, 140, 247, 86, 187, 135, 155, 205, 189, 152, 218, 106, 191, 3, 160, 156, 62, 254, 137, 109, 61, 34, 188, 23, 190, 92, 217, 188, 61, 22, 184, 174, 190, 105, 237, 33, 189, 184, 16, 18, 190, 29, 168, 19, 62, 77, 117, 1, 61, 96, 240, 212, 61, 176, 24, 234, 190, 152, 24, 145, 189, 155, 132, 134, 62, 178, 177, 141, 189, 72, 36, 191, 189, 170, 27, 224, 188, 27, 179, 210, 188, 22, 93, 114, 62, 233, 80, 17, 61, 69, 239, 38, 189, 143, 61, 123, 62, 135, 191, 166, 190, 9, 43, 7, 62, 215, 249, 23, 189, 73, 187, 144, 62, 189, 242, 133, 190, 31, 50, 194, 61, 25, 197, 163, 190, 70, 129, 4, 190, 29, 214, 9, 62, 156, 28, 60, 62, 186, 50, 71, 190, 93, 194, 107, 189, 15, 59, 114, 190, 246, 139, 186, 189, 251, 173, 133, 61, 170, 28, 181, 190, 100, 53, 203, 61, 246, 181, 223, 190, 109, 172, 47, 62, 129, 140, 166, 61, 53, 174, 34, 62, 144, 0, 68, 191, 107, 192, 115, 61, 203, 227, 18, 62, 14, 162, 16, 191, 188, 130, 186, 61, 77, 133, 179, 190, 211, 204, 215, 60, 115, 241, 145, 189, 243, 148, 139, 62, 76, 210, 158, 190, 222, 126, 59, 62, 7, 179, 195, 61, 125, 221, 72, 189, 108, 79, 52, 62, 10, 234, 132, 61, 68, 252, 27, 63, 159, 149, 40, 190, 251, 142, 140, 62, 246, 136, 11, 190, 226, 145, 136, 190, 110, 70, 77, 62, 151, 224, 57, 62, 99, 183, 137, 62, 78, 104, 106, 188, 46, 195, 125, 189, 21, 68, 6, 60, 95, 67, 186, 189, 132, 252, 157, 61, 248, 243, 89, 61, 174, 130, 160, 188, 195, 222, 22, 62, 26, 52, 108, 189, 75, 214, 38, 60, 141, 58, 168, 189, 175, 72, 218, 60, 170, 245, 36, 62, 61, 142, 209, 188, 228, 183, 24, 190, 158, 147, 41, 190, 187, 17, 128, 189, 123, 130, 151, 188, 196, 6, 29, 62, 4, 46, 2, 190, 74, 44, 171, 60, 236, 20, 133, 61, 191, 216, 3, 61, 146, 100, 219, 61, 9, 16, 238, 189, 232, 136, 193, 189, 151, 12, 43, 190, 174, 180, 16, 189, 170, 232, 169, 189, 219, 76, 244, 189, 16, 130, 155, 61, 140, 174, 7, 62, 211, 54, 17, 190, 143, 216, 46, 62, 34, 71, 129, 190, 15, 84, 136, 61, 18, 126, 148, 189, 188, 97, 226, 189, 51, 25, 10, 61, 188, 47, 131, 62, 17, 113, 72, 191, 194, 222, 129, 61, 73, 115, 171, 191, 185, 3, 135, 190, 10, 200, 114, 62, 55, 245, 179, 190, 211, 28, 139, 62, 82, 42, 8, 188, 14, 57, 181, 62, 138, 232, 198, 60, 223, 147, 36, 190, 76, 124, 178, 190, 162, 173, 103, 62, 158, 70, 143, 190, 34, 108, 16, 191, 79, 205, 170, 190, 82, 61, 210, 187, 75, 119, 141, 61, 246, 241, 146, 62, 132, 232, 43, 61, 142, 38, 151, 190, 178, 119, 121, 191, 69, 10, 27, 190, 180, 193, 191, 191, 179, 64, 186, 190, 46, 109, 166, 189, 249, 95, 188, 62, 150, 181, 31, 191, 231, 209, 10, 61, 52, 178, 85, 190, 120, 243, 133, 62, 187, 118, 73, 190, 55, 33, 99, 62, 143, 175, 58, 190, 136, 163, 19, 189, 244, 91, 221, 62, 38, 233, 224, 190, 8, 29, 146, 189, 135, 27, 147, 190, 240, 219, 25, 190, 78, 199, 128, 62, 189, 61, 214, 62, 118, 86, 231, 189, 108, 128, 130, 62, 196, 147, 25, 62, 113, 180, 254, 62, 59, 120, 228, 188, 243, 73, 8, 62, 240, 1, 152, 60, 171, 126, 186, 190, 86, 80, 114, 190, 29, 224, 196, 190, 224, 85, 149, 62, 107, 119, 177, 61, 157, 229, 139, 62, 166, 152, 89, 62, 80, 35, 25, 190, 113, 40, 80, 190, 71, 104, 21, 61, 65, 244, 237, 190, 127, 220, 97, 60, 33, 229, 29, 189, 2, 247, 95, 62, 60, 176, 50, 189, 23, 224, 150, 60, 96, 175, 46, 190, 49, 166, 111, 189, 196, 201, 183, 62, 159, 191, 145, 190, 100, 130, 124, 190, 2, 55, 179, 188, 38, 241, 144, 61, 111, 131, 5, 61, 241, 139, 130, 62, 52, 202, 158, 61, 187, 91, 112, 62, 103, 159, 24, 62, 228, 207, 147, 61, 85, 244, 86, 62, 238, 69, 182, 62, 51, 74, 244, 60, 245, 138, 65, 190, 242, 204, 252, 188, 111, 73, 155, 61, 39, 26, 128, 188, 254, 49, 106, 189, 176, 73, 25, 190, 86, 96, 78, 61, 143, 203, 146, 190, 238, 53, 98, 189, 250, 47, 79, 190, 148, 159, 207, 190, 205, 43, 4, 189, 186, 255, 226, 60, 65, 182, 232, 62, 219, 211, 226, 61, 231, 77, 205, 61, 51, 186, 79, 189, 79, 199, 254, 61, 128, 0, 192, 62, 5, 54, 242, 190, 242, 126, 11, 190, 171, 197, 177, 190, 118, 215, 24, 190, 243, 218, 170, 61, 87, 142, 23, 63, 175, 244, 93, 189, 171, 92, 182, 61, 17, 164, 97, 62, 79, 226, 7, 62, 32, 177, 126, 62, 190, 213, 55, 62, 173, 87, 226, 189, 60, 90, 145, 190, 220, 145, 130, 189, 14, 10, 168, 190, 142, 146, 113, 59, 131, 64, 189, 61, 246, 158, 108, 190, 181, 44, 100, 62, 82, 83, 42, 188, 144, 194, 135, 190, 35, 136, 38, 190, 18, 131, 143, 190, 229, 179, 23, 189, 133, 175, 74, 191, 240, 254, 207, 62, 56, 4, 133, 61, 236, 131, 163, 62, 224, 83, 158, 190, 113, 107, 17, 189, 170, 215, 7, 62, 18, 225, 78, 62, 238, 252, 200, 60, 96, 68, 114, 190, 57, 4, 224, 189, 244, 106, 230, 190, 239, 90, 71, 62, 176, 217, 214, 190, 199, 131, 131, 190, 231, 250, 84, 189, 72, 100, 100, 62, 3, 151, 42, 62, 243, 100, 66, 189, 176, 66, 139, 191, 102, 253, 51, 62, 109, 206, 160, 60, 48, 177, 144, 189, 95, 117, 57, 190, 9, 123, 39, 62, 233, 187, 101, 189, 132, 128, 9, 189, 17, 58, 61, 190, 164, 24, 46, 190, 2, 86, 178, 189, 77, 216, 141, 190, 186, 166, 41, 61, 110, 56, 157, 190, 225, 157, 150, 61, 201, 175, 199, 61, 197, 207, 68, 61, 102, 239, 237, 190, 214, 141, 35, 62, 2, 49, 156, 62, 135, 130, 213, 190, 114, 151, 184, 190, 94, 168, 109, 62, 126, 147, 15, 62, 82, 241, 99, 62, 40, 74, 130, 62, 82, 254, 125, 190, 215, 244, 6, 62, 167, 31, 243, 61, 1, 114, 19, 189, 137, 112, 108, 188, 104, 66, 164, 62, 42, 187, 113, 190, 177, 127, 138, 61, 168, 153, 18, 62, 130, 3, 117, 188, 28, 148, 206, 190, 175, 113, 127, 189, 107, 129, 116, 190, 59, 173, 147, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 221, 234, 76, 190, 1, 166, 132, 62, 53, 112, 158, 189, 89, 40, 238, 190, 73, 53, 143, 189, 78, 63, 248, 61, 104, 127, 113, 191, 94, 104, 145, 190, 132, 196, 168, 62, 120, 101, 174, 61, 44, 180, 49, 62, 142, 126, 176, 191, 199, 108, 57, 186, 157, 223, 216, 62, 94, 20, 128, 62, 144, 116, 156, 189, 135, 38, 133, 190, 74, 60, 1, 191, 205, 222, 165, 62, 26, 121, 37, 62, 129, 253, 87, 190, 90, 48, 135, 62, 63, 206, 167, 62, 173, 128, 91, 190, 215, 100, 64, 189, 76, 70, 88, 63, 32, 221, 177, 60, 106, 235, 136, 191, 84, 77, 250, 188, 172, 252, 180, 62, 211, 141, 229, 61, 63, 213, 199, 190, 9, 205, 202, 189, 255, 65, 61, 62, 43, 167, 70, 190, 68, 123, 27, 63, 79, 41, 118, 61, 224, 55, 37, 62, 97, 92, 7, 190, 200, 110, 217, 189, 103, 144, 219, 189, 194, 133, 128, 62, 190, 185, 68, 190, 130, 196, 16, 191, 230, 185, 8, 62, 229, 68, 196, 62, 132, 38, 168, 62, 146, 26, 0, 190, 7, 28, 13, 190, 213, 49, 182, 190, 167, 72, 41, 62, 248, 103, 57, 190, 154, 245, 201, 189, 229, 89, 171, 62, 186, 132, 176, 189, 67, 26, 215, 190, 117, 197, 148, 190, 2, 58, 119, 62, 150, 12, 15, 189, 57, 224, 161, 62, 63, 206, 2, 190, 194, 225, 125, 61, 89, 184, 220, 190, 38, 154, 3, 61, 11, 76, 122, 189, 15, 47, 212, 189, 110, 83, 68, 61, 229, 56, 169, 188, 101, 119, 14, 62, 63, 137, 72, 61, 102, 48, 123, 59, 130, 66, 196, 188, 230, 220, 193, 189, 147, 190, 27, 190, 175, 12, 84, 62, 234, 170, 139, 62, 223, 233, 213, 190, 243, 65, 29, 190, 58, 234, 9, 62, 254, 114, 98, 189, 143, 31, 55, 62, 38, 198, 45, 62, 84, 229, 229, 189, 174, 235, 221, 61, 128, 125, 40, 62, 111, 20, 31, 62, 150, 174, 45, 62, 75, 65, 196, 189, 99, 139, 204, 188, 86, 183, 209, 189, 159, 152, 181, 189, 87, 106, 117, 61, 155, 139, 70, 190, 217, 112, 2, 62, 102, 153, 230, 189, 239, 195, 77, 62, 49, 85, 159, 61, 51, 211, 96, 62, 206, 20, 236, 188, 44, 33, 198, 62, 169, 176, 138, 61, 192, 229, 133, 61, 100, 184, 131, 190, 2, 78, 224, 61, 247, 59, 59, 190, 210, 224, 70, 62, 221, 106, 102, 189, 192, 198, 36, 191, 12, 207, 201, 62, 215, 187, 19, 62, 112, 86, 114, 62, 130, 220, 149, 61, 160, 5, 35, 190, 67, 178, 20, 191, 116, 112, 25, 62, 126, 236, 160, 190, 164, 250, 66, 190, 116, 96, 92, 62, 144, 50, 207, 186, 166, 111, 153, 190, 34, 228, 166, 187, 185, 242, 127, 62, 113, 27, 104, 189, 93, 206, 152, 62, 26, 148, 8, 190, 79, 37, 110, 190, 15, 162, 255, 190, 171, 169, 209, 61, 76, 136, 231, 189, 87, 110, 196, 189, 67, 213, 76, 189, 197, 43, 117, 190, 109, 71, 96, 62, 49, 74, 185, 60, 81, 211, 138, 61, 252, 205, 135, 188, 206, 235, 29, 190, 151, 201, 173, 189, 155, 119, 27, 190, 7, 5, 244, 189, 3, 18, 145, 190, 25, 47, 212, 187, 97, 134, 36, 190, 228, 91, 79, 190, 6, 217, 44, 62, 156, 107, 48, 62, 26, 61, 207, 61, 35, 45, 103, 189, 191, 205, 157, 61, 241, 172, 112, 61, 204, 129, 56, 62, 120, 2, 128, 62, 202, 171, 133, 189, 136, 165, 232, 61, 24, 76, 122, 61, 84, 160, 59, 189, 235, 210, 71, 189, 204, 220, 6, 190, 146, 84, 235, 188, 241, 35, 15, 62, 115, 94, 33, 191, 176, 2, 135, 188, 189, 23, 79, 186, 14, 23, 248, 62, 75, 175, 162, 62, 142, 145, 128, 190, 212, 79, 54, 189, 76, 217, 215, 62, 117, 207, 17, 190, 187, 104, 67, 61, 108, 117, 98, 190, 49, 72, 203, 60, 108, 172, 129, 190, 71, 139, 125, 190, 137, 172, 131, 61, 131, 167, 67, 62, 70, 196, 92, 62, 103, 205, 163, 61, 235, 237, 116, 190, 95, 131, 69, 189, 201, 96, 88, 61, 38, 78, 185, 188, 53, 251, 128, 190, 210, 232, 229, 190, 195, 23, 205, 61, 118, 46, 173, 190, 98, 114, 45, 61, 211, 71, 81, 62, 127, 74, 170, 60, 214, 76, 21, 190, 239, 85, 209, 190, 217, 197, 2, 61, 186, 173, 220, 190, 248, 54, 120, 190, 225, 130, 63, 62, 74, 143, 254, 190, 25, 0, 44, 62, 111, 37, 12, 190, 196, 218, 114, 62, 35, 213, 95, 62, 30, 247, 64, 60, 161, 167, 228, 190, 150, 139, 38, 190, 15, 93, 15, 63, 121, 221, 19, 191, 186, 210, 64, 190, 90, 208, 171, 190, 21, 12, 143, 61, 159, 222, 35, 189, 249, 160, 223, 62, 226, 213, 51, 190, 132, 107, 143, 62, 207, 85, 112, 62, 124, 66, 194, 62, 215, 5, 47, 62, 56, 231, 7, 63, 116, 104, 251, 189, 243, 24, 228, 190, 1, 242, 15, 62, 58, 186, 177, 190, 228, 174, 115, 62, 229, 158, 215, 61, 4, 38, 3, 62, 202, 154, 87, 62, 205, 216, 151, 61, 20, 107, 6, 62, 118, 6, 129, 61, 65, 165, 160, 190, 56, 141, 150, 190, 217, 190, 1, 61, 1, 180, 11, 190, 18, 23, 138, 190, 62, 240, 131, 62, 227, 32, 0, 59, 31, 162, 95, 62, 25, 231, 222, 189, 95, 218, 13, 191, 108, 85, 55, 62, 234, 12, 30, 61, 201, 38, 48, 191, 59, 229, 80, 61, 37, 165, 103, 61, 104, 75, 107, 62, 15, 238, 26, 62, 124, 127, 186, 61, 181, 234, 77, 62, 35, 141, 190, 62, 156, 234, 239, 61, 145, 105, 12, 62, 69, 135, 12, 62, 115, 106, 232, 190, 247, 104, 203, 189, 138, 33, 56, 62, 167, 151, 244, 61, 42, 123, 135, 61, 218, 215, 171, 188, 234, 203, 238, 189, 194, 101, 21, 62, 236, 212, 234, 189, 45, 142, 20, 189, 89, 233, 12, 62, 145, 19, 148, 61, 238, 241, 19, 191, 15, 27, 226, 189, 173, 242, 48, 62, 135, 195, 237, 187, 251, 167, 201, 189, 153, 239, 238, 190, 157, 122, 210, 190, 201, 45, 235, 189, 8, 140, 125, 190, 8, 223, 191, 190, 136, 3, 149, 189, 129, 246, 172, 190, 202, 136, 95, 190, 181, 56, 144, 62, 187, 153, 217, 189, 11, 226, 140, 190, 53, 62, 227, 61, 191, 121, 255, 188, 54, 94, 61, 190, 185, 81, 162, 190, 86, 150, 97, 190, 191, 31, 141, 62, 87, 74, 198, 189, 201, 10, 113, 62, 136, 219, 0, 191, 81, 182, 248, 62, 189, 80, 56, 190, 169, 136, 43, 189, 96, 223, 197, 189, 205, 25, 109, 190, 73, 224, 232, 61, 140, 78, 7, 62, 55, 45, 144, 62, 224, 19, 12, 62, 2, 142, 188, 190, 160, 19, 201, 61, 233, 17, 87, 62, 119, 177, 238, 61, 200, 195, 36, 62, 36, 146, 88, 190, 21, 75, 132, 62, 234, 4, 169, 62, 143, 225, 24, 61, 178, 37, 151, 62, 204, 95, 218, 189, 52, 185, 30, 61, 56, 117, 12, 63, 167, 197, 27, 188, 253, 186, 15, 190, 181, 65, 184, 61, 250, 188, 91, 62, 181, 51, 133, 60, 96, 48, 26, 62, 124, 108, 4, 191, 225, 68, 171, 61, 248, 253, 100, 190, 201, 10, 83, 62, 26, 151, 109, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 2, 241, 189, 187, 59, 56, 62, 11, 124, 213, 188, 230, 63, 164, 190, 61, 58, 166, 62, 99, 177, 8, 62, 12, 14, 80, 61, 204, 202, 2, 62, 207, 238, 150, 61, 155, 123, 123, 189, 100, 66, 24, 189, 215, 179, 165, 62, 127, 60, 82, 61, 14, 242, 34, 62, 165, 125, 98, 59, 74, 83, 146, 60, 220, 164, 116, 189, 29, 57, 132, 59, 28, 128, 142, 62, 113, 80, 155, 60, 219, 180, 53, 188, 217, 106, 197, 189, 254, 227, 130, 190, 219, 209, 44, 62, 174, 121, 179, 62, 209, 164, 11, 62, 240, 192, 241, 61, 218, 184, 176, 189, 137, 165, 166, 189, 217, 250, 38, 60, 172, 90, 144, 62, 36, 85, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 240, 166, 190, 30, 34, 185, 62, 111, 238, 166, 62, 236, 29, 3, 63, 197, 122, 134, 190, 79, 110, 3, 191, 122, 83, 66, 191, 132, 119, 79, 63, 120, 71, 158, 62, 223, 172, 158, 62, 169, 45, 252, 62, 193, 233, 36, 191, 85, 148, 67, 62, 50, 82, 171, 62, 11, 45, 94, 187, 221, 120, 86, 191, 209, 92, 29, 63, 153, 103, 88, 62, 51, 111, 182, 62, 129, 137, 162, 190, 70, 30, 108, 62, 215, 179, 138, 61, 80, 239, 85, 191, 29, 191, 18, 191, 49, 238, 167, 60, 222, 167, 205, 190, 84, 78, 244, 60, 251, 177, 22, 191, 79, 100, 239, 62, 108, 202, 155, 62, 244, 123, 85, 188, 178, 159, 113, 62, 62, 57, 110, 189, 168, 42, 33, 190, 230, 222, 107, 189, 193, 107, 111, 62, 163, 172, 131, 190, 42, 104, 131, 190, 64, 27, 109, 62, 77, 232, 156, 61, 136, 207, 154, 189, 182, 55, 157, 62, 229, 167, 103, 189, 121, 53, 249, 189, 21, 87, 207, 189, 227, 206, 155, 190, 252, 221, 228, 60, 242, 197, 65, 61, 180, 239, 24, 62, 26, 162, 246, 189, 255, 161, 182, 58, 114, 229, 9, 62, 107, 130, 178, 189, 195, 254, 65, 61, 112, 114, 20, 62, 13, 56, 201, 187, 196, 95, 69, 190, 35, 244, 12, 62, 180, 60, 164, 189, 122, 170, 13, 62, 209, 183, 202, 62, 74, 122, 33, 60, 253, 166, 249, 190, 30, 15, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 178, 8, 190, 45, 2, 224, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 252, 220, 191, 99, 17, 250, 188, 245, 119, 190, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {18, 198, 246, 191, 192, 88, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}