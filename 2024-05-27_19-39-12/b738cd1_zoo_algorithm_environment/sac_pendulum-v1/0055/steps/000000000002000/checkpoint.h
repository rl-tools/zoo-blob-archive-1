// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 161, 163, 188, 237, 178, 85, 189, 209, 49, 195, 62, 184, 222, 157, 190, 74, 136, 18, 62, 173, 133, 4, 191, 197, 162, 147, 189, 226, 101, 173, 61, 3, 43, 251, 190, 55, 66, 20, 63, 243, 197, 132, 63, 132, 175, 104, 62, 189, 89, 107, 189, 174, 25, 223, 62, 81, 245, 149, 61, 254, 109, 230, 189, 37, 39, 19, 63, 126, 190, 237, 190, 32, 101, 217, 189, 78, 157, 69, 191, 38, 100, 153, 62, 254, 6, 186, 190, 233, 177, 82, 63, 211, 190, 162, 61, 198, 227, 45, 62, 166, 62, 41, 191, 102, 132, 100, 189, 229, 253, 48, 190, 0, 247, 155, 62, 27, 84, 200, 189, 127, 217, 207, 190, 113, 27, 199, 190, 227, 213, 145, 190, 46, 135, 212, 190, 126, 55, 243, 190, 12, 241, 114, 62, 117, 45, 102, 188, 29, 179, 4, 63, 176, 105, 152, 62, 97, 32, 50, 190, 180, 161, 47, 191, 143, 56, 17, 190, 32, 63, 219, 190, 42, 111, 59, 63, 112, 19, 114, 190, 249, 103, 169, 190, 83, 164, 91, 63, 171, 18, 79, 62, 135, 136, 12, 62, 183, 224, 23, 63, 159, 70, 238, 190, 106, 240, 17, 191, 252, 122, 91, 191, 170, 211, 144, 62, 64, 238, 184, 190, 202, 173, 159, 61, 233, 45, 28, 191, 208, 96, 221, 62, 54, 109, 182, 188, 192, 56, 205, 190, 133, 136, 30, 191, 158, 99, 191, 62, 192, 252, 201, 188, 136, 35, 121, 190, 159, 229, 230, 190, 163, 26, 24, 62, 29, 92, 89, 62, 214, 139, 108, 191, 202, 57, 136, 190, 120, 233, 168, 62, 99, 4, 47, 191, 199, 48, 0, 190, 169, 241, 209, 190, 27, 195, 10, 191, 18, 131, 116, 190, 179, 33, 139, 189, 158, 170, 174, 190, 10, 63, 39, 63, 82, 53, 35, 191, 224, 87, 90, 63, 156, 229, 55, 62, 242, 151, 80, 63, 61, 204, 16, 63, 48, 77, 182, 62, 140, 69, 165, 62, 177, 243, 22, 63, 137, 142, 225, 190, 84, 202, 186, 62, 225, 35, 115, 191, 181, 141, 14, 190, 121, 203, 246, 189, 62, 96, 214, 190, 123, 181, 146, 190, 21, 105, 249, 62, 84, 32, 205, 61, 23, 63, 24, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 140, 237, 190, 55, 39, 144, 62, 204, 223, 35, 191, 237, 114, 71, 62, 11, 102, 206, 62, 158, 78, 40, 61, 137, 56, 189, 61, 229, 133, 162, 188, 11, 147, 178, 62, 179, 222, 95, 189, 88, 239, 211, 62, 42, 142, 140, 189, 207, 62, 159, 190, 217, 23, 200, 61, 247, 93, 42, 190, 120, 176, 254, 62, 207, 156, 102, 190, 109, 66, 188, 190, 89, 62, 104, 62, 131, 224, 224, 61, 30, 41, 234, 189, 152, 168, 219, 62, 89, 252, 50, 63, 119, 156, 155, 62, 30, 216, 34, 191, 24, 78, 50, 191, 1, 53, 134, 62, 13, 127, 30, 63, 237, 168, 245, 190, 99, 240, 37, 63, 84, 196, 45, 191, 177, 165, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 227, 98, 62, 201, 78, 26, 61, 21, 81, 67, 188, 2, 55, 52, 190, 158, 53, 183, 189, 178, 116, 159, 60, 27, 89, 98, 62, 97, 98, 38, 62, 38, 12, 143, 189, 120, 45, 213, 61, 18, 173, 163, 189, 190, 215, 68, 189, 38, 70, 140, 61, 0, 44, 14, 190, 66, 9, 162, 189, 143, 17, 236, 189, 11, 86, 245, 61, 75, 210, 153, 62, 41, 19, 218, 60, 129, 244, 29, 190, 118, 78, 83, 190, 138, 0, 140, 62, 162, 48, 215, 61, 142, 70, 15, 190, 5, 32, 3, 190, 60, 9, 128, 62, 22, 140, 97, 189, 123, 123, 120, 189, 135, 119, 230, 188, 79, 90, 233, 61, 134, 58, 23, 62, 189, 170, 204, 61, 51, 32, 189, 61, 104, 212, 116, 184, 197, 80, 113, 61, 53, 60, 174, 189, 166, 209, 248, 61, 182, 226, 80, 62, 138, 59, 49, 190, 168, 231, 87, 62, 126, 226, 126, 189, 225, 255, 192, 61, 143, 135, 182, 189, 111, 182, 58, 190, 180, 127, 30, 62, 12, 75, 109, 189, 74, 93, 50, 189, 170, 128, 234, 60, 19, 159, 43, 62, 253, 237, 166, 188, 212, 246, 125, 61, 177, 62, 185, 188, 97, 216, 149, 60, 76, 25, 32, 190, 166, 90, 82, 60, 100, 241, 61, 190, 23, 59, 109, 190, 1, 57, 1, 62, 205, 158, 43, 190, 118, 59, 63, 190, 137, 13, 162, 59, 129, 135, 85, 189, 225, 162, 154, 60, 74, 86, 215, 61, 15, 140, 5, 189, 148, 217, 14, 189, 255, 176, 204, 188, 5, 31, 117, 190, 64, 9, 85, 190, 251, 221, 20, 61, 82, 65, 175, 61, 168, 98, 92, 190, 144, 126, 22, 62, 141, 27, 9, 189, 148, 203, 54, 189, 124, 247, 241, 60, 179, 66, 170, 189, 27, 195, 6, 62, 27, 38, 76, 190, 37, 134, 34, 190, 57, 209, 225, 189, 49, 131, 63, 62, 245, 76, 19, 62, 95, 182, 30, 62, 13, 245, 78, 189, 28, 89, 82, 62, 149, 150, 19, 62, 130, 191, 57, 62, 140, 193, 128, 190, 144, 27, 108, 189, 103, 154, 242, 189, 183, 1, 227, 60, 141, 108, 188, 61, 74, 172, 161, 62, 177, 109, 202, 189, 252, 9, 67, 61, 29, 150, 85, 61, 113, 130, 43, 189, 37, 0, 157, 188, 83, 92, 128, 62, 84, 196, 18, 60, 145, 98, 219, 61, 255, 154, 242, 189, 38, 106, 184, 60, 65, 208, 37, 190, 182, 254, 236, 61, 220, 171, 141, 61, 159, 121, 25, 189, 53, 222, 202, 61, 130, 59, 1, 59, 85, 32, 11, 190, 65, 5, 251, 189, 74, 96, 191, 188, 75, 228, 0, 190, 78, 150, 53, 62, 149, 78, 60, 61, 93, 136, 22, 190, 42, 97, 177, 189, 252, 201, 25, 190, 135, 198, 60, 190, 136, 184, 234, 189, 146, 186, 25, 62, 13, 17, 245, 61, 149, 248, 129, 60, 81, 48, 251, 189, 150, 24, 0, 190, 246, 113, 121, 189, 148, 216, 22, 62, 16, 214, 209, 189, 61, 2, 120, 189, 89, 88, 238, 188, 4, 185, 178, 62, 24, 169, 42, 188, 89, 60, 57, 62, 159, 102, 53, 61, 128, 157, 173, 61, 187, 175, 208, 60, 52, 160, 106, 60, 88, 48, 48, 190, 207, 204, 220, 61, 17, 243, 11, 190, 78, 140, 24, 61, 107, 234, 148, 62, 220, 123, 170, 61, 169, 176, 182, 61, 65, 92, 154, 189, 215, 88, 238, 61, 71, 178, 184, 61, 184, 176, 80, 62, 239, 106, 231, 61, 1, 121, 68, 190, 46, 40, 191, 185, 144, 173, 39, 62, 86, 179, 26, 61, 238, 44, 50, 56, 119, 155, 69, 62, 179, 247, 174, 61, 106, 207, 174, 189, 145, 51, 206, 61, 69, 119, 130, 60, 75, 126, 23, 190, 170, 85, 131, 61, 52, 59, 154, 189, 36, 175, 25, 60, 144, 52, 44, 62, 128, 129, 37, 186, 210, 64, 49, 62, 231, 165, 243, 189, 119, 218, 96, 187, 154, 194, 33, 188, 9, 180, 245, 189, 86, 41, 67, 56, 221, 253, 151, 61, 189, 142, 254, 61, 182, 239, 223, 189, 110, 251, 183, 60, 192, 18, 143, 61, 201, 226, 86, 188, 183, 32, 46, 190, 202, 165, 20, 62, 80, 18, 96, 188, 221, 3, 64, 189, 20, 150, 52, 190, 179, 72, 33, 190, 64, 0, 233, 189, 227, 8, 237, 189, 97, 6, 83, 60, 76, 115, 242, 189, 94, 111, 49, 189, 132, 250, 133, 61, 107, 169, 227, 60, 200, 219, 5, 61, 1, 110, 5, 62, 216, 136, 170, 189, 45, 75, 127, 190, 86, 152, 30, 62, 168, 199, 2, 62, 25, 190, 195, 189, 150, 109, 207, 190, 141, 162, 167, 61, 65, 47, 157, 189, 216, 184, 110, 62, 75, 202, 55, 188, 197, 233, 199, 60, 83, 0, 146, 189, 121, 184, 241, 60, 46, 93, 233, 62, 192, 44, 18, 62, 7, 29, 17, 61, 97, 46, 88, 190, 145, 192, 127, 62, 95, 160, 186, 60, 105, 127, 78, 62, 236, 195, 51, 190, 224, 253, 1, 61, 202, 255, 207, 188, 77, 103, 111, 190, 107, 33, 23, 188, 73, 148, 60, 62, 208, 102, 1, 189, 179, 114, 230, 189, 145, 149, 239, 189, 244, 119, 53, 190, 57, 23, 67, 189, 162, 55, 102, 190, 195, 22, 5, 59, 85, 71, 12, 190, 87, 141, 153, 190, 117, 133, 254, 59, 11, 242, 57, 190, 63, 72, 161, 62, 184, 50, 195, 189, 223, 113, 122, 62, 42, 55, 137, 190, 143, 179, 212, 61, 166, 208, 199, 61, 211, 174, 182, 189, 8, 56, 227, 189, 200, 43, 44, 191, 36, 103, 107, 58, 86, 86, 173, 59, 207, 215, 19, 62, 32, 127, 208, 189, 163, 85, 245, 189, 211, 157, 165, 189, 199, 210, 105, 62, 53, 219, 238, 61, 232, 192, 84, 61, 70, 228, 12, 189, 255, 241, 118, 190, 174, 68, 149, 61, 13, 117, 230, 188, 112, 98, 59, 190, 115, 232, 34, 62, 205, 255, 198, 60, 58, 213, 146, 62, 28, 242, 135, 189, 130, 30, 208, 61, 143, 125, 48, 190, 178, 50, 250, 188, 153, 74, 251, 189, 76, 201, 233, 61, 156, 84, 34, 190, 59, 66, 132, 189, 204, 234, 146, 189, 165, 194, 158, 61, 181, 95, 184, 61, 162, 187, 3, 190, 19, 116, 153, 60, 169, 39, 124, 61, 89, 35, 186, 61, 84, 201, 28, 190, 232, 111, 37, 189, 5, 249, 143, 61, 72, 159, 232, 61, 68, 246, 154, 189, 170, 157, 11, 190, 138, 0, 0, 190, 223, 42, 186, 189, 27, 12, 128, 62, 110, 229, 22, 62, 221, 110, 142, 188, 105, 97, 174, 189, 193, 190, 154, 61, 24, 233, 183, 61, 72, 216, 219, 61, 178, 15, 35, 190, 42, 245, 182, 189, 19, 173, 162, 190, 197, 174, 56, 61, 242, 17, 81, 62, 61, 68, 174, 190, 207, 81, 187, 189, 68, 166, 151, 186, 101, 78, 83, 62, 39, 106, 22, 190, 64, 74, 247, 60, 179, 245, 247, 189, 61, 1, 48, 62, 214, 109, 154, 62, 240, 102, 170, 190, 42, 202, 85, 60, 7, 101, 87, 190, 55, 105, 142, 189, 102, 9, 243, 189, 56, 156, 123, 62, 72, 30, 26, 62, 209, 21, 43, 62, 24, 199, 82, 61, 109, 123, 114, 62, 66, 74, 207, 61, 63, 10, 252, 60, 252, 32, 72, 190, 205, 117, 99, 190, 2, 165, 24, 62, 230, 164, 90, 190, 109, 34, 99, 62, 220, 212, 88, 62, 92, 105, 5, 61, 86, 171, 24, 61, 25, 249, 165, 61, 95, 226, 34, 61, 240, 140, 237, 188, 211, 48, 133, 61, 194, 23, 77, 61, 147, 26, 102, 62, 42, 185, 211, 189, 188, 58, 14, 62, 112, 2, 102, 190, 97, 190, 131, 61, 113, 203, 166, 61, 189, 101, 212, 189, 6, 70, 10, 61, 1, 12, 76, 190, 228, 2, 109, 62, 98, 128, 41, 61, 9, 217, 218, 188, 7, 15, 173, 189, 68, 228, 151, 60, 52, 4, 15, 190, 69, 96, 30, 62, 23, 213, 252, 61, 95, 16, 178, 189, 182, 88, 64, 60, 25, 190, 82, 189, 83, 20, 85, 61, 217, 0, 1, 190, 153, 0, 168, 189, 119, 215, 8, 190, 102, 97, 150, 190, 99, 198, 55, 190, 166, 199, 22, 62, 205, 75, 143, 189, 148, 202, 27, 60, 17, 92, 159, 190, 13, 7, 244, 187, 236, 173, 62, 62, 177, 27, 28, 62, 72, 71, 66, 190, 139, 40, 170, 61, 45, 186, 252, 189, 190, 80, 157, 62, 214, 232, 11, 62, 181, 170, 48, 190, 224, 192, 99, 60, 244, 1, 154, 190, 9, 67, 213, 62, 21, 116, 101, 62, 110, 153, 160, 61, 233, 150, 177, 190, 99, 182, 110, 62, 83, 95, 151, 189, 24, 67, 115, 61, 191, 4, 236, 61, 113, 60, 64, 190, 131, 93, 103, 190, 55, 252, 150, 190, 122, 133, 145, 189, 234, 47, 46, 62, 157, 14, 211, 189, 115, 80, 177, 61, 150, 130, 102, 190, 102, 159, 182, 190, 93, 98, 140, 62, 39, 167, 169, 61, 141, 244, 180, 189, 46, 129, 93, 188, 45, 137, 203, 188, 171, 3, 43, 189, 86, 186, 0, 188, 14, 212, 1, 62, 182, 10, 101, 61, 232, 241, 39, 62, 133, 243, 137, 190, 124, 34, 29, 189, 162, 62, 31, 62, 123, 25, 229, 61, 193, 199, 33, 61, 90, 182, 191, 61, 14, 174, 161, 61, 14, 54, 34, 62, 137, 169, 134, 189, 66, 205, 106, 61, 60, 250, 15, 62, 60, 102, 80, 190, 142, 208, 10, 62, 146, 8, 132, 60, 251, 17, 115, 62, 4, 223, 3, 189, 121, 162, 198, 61, 246, 131, 77, 190, 6, 130, 5, 187, 145, 253, 242, 188, 6, 29, 132, 62, 182, 55, 187, 189, 241, 19, 123, 189, 175, 18, 254, 189, 170, 94, 108, 189, 254, 149, 167, 188, 141, 162, 255, 187, 11, 122, 207, 188, 135, 145, 35, 190, 54, 233, 95, 62, 96, 160, 59, 190, 127, 201, 96, 62, 108, 118, 189, 189, 21, 41, 220, 188, 18, 154, 14, 61, 64, 177, 196, 188, 127, 90, 202, 61, 143, 142, 206, 189, 176, 183, 61, 189, 22, 160, 249, 188, 21, 61, 78, 62, 89, 24, 103, 190, 137, 16, 189, 60, 198, 241, 3, 189, 243, 203, 20, 189, 203, 182, 55, 62, 135, 11, 208, 188, 148, 197, 60, 61, 3, 133, 158, 189, 114, 8, 15, 62, 225, 54, 134, 59, 98, 175, 245, 188, 157, 127, 125, 62, 19, 125, 112, 189, 176, 115, 125, 62, 78, 104, 106, 188, 46, 195, 125, 189, 21, 68, 6, 60, 95, 67, 186, 189, 132, 252, 157, 61, 248, 243, 89, 61, 174, 130, 160, 188, 195, 222, 22, 62, 26, 52, 108, 189, 75, 214, 38, 60, 141, 58, 168, 189, 175, 72, 218, 60, 170, 245, 36, 62, 61, 142, 209, 188, 228, 183, 24, 190, 158, 147, 41, 190, 187, 17, 128, 189, 123, 130, 151, 188, 196, 6, 29, 62, 4, 46, 2, 190, 74, 44, 171, 60, 236, 20, 133, 61, 191, 216, 3, 61, 146, 100, 219, 61, 9, 16, 238, 189, 232, 136, 193, 189, 151, 12, 43, 190, 174, 180, 16, 189, 170, 232, 169, 189, 219, 76, 244, 189, 16, 130, 155, 61, 140, 174, 7, 62, 35, 147, 149, 188, 195, 46, 155, 188, 246, 88, 233, 189, 125, 223, 241, 189, 248, 91, 29, 190, 254, 167, 131, 189, 179, 35, 72, 62, 166, 217, 35, 190, 96, 31, 133, 190, 130, 255, 77, 189, 145, 13, 159, 190, 230, 34, 12, 190, 46, 129, 155, 61, 34, 101, 43, 189, 102, 21, 134, 189, 167, 99, 138, 189, 169, 166, 216, 61, 229, 235, 42, 62, 226, 102, 84, 190, 242, 116, 11, 190, 148, 94, 36, 60, 5, 111, 37, 61, 10, 6, 118, 190, 25, 220, 142, 190, 43, 165, 22, 62, 108, 153, 49, 62, 86, 23, 50, 62, 35, 130, 157, 61, 168, 95, 161, 189, 30, 30, 80, 190, 4, 102, 245, 189, 112, 201, 173, 189, 123, 192, 105, 190, 224, 46, 201, 188, 89, 223, 78, 62, 213, 214, 202, 189, 83, 252, 73, 61, 105, 200, 189, 189, 31, 121, 81, 62, 218, 47, 107, 190, 110, 39, 104, 62, 103, 32, 164, 188, 26, 111, 96, 188, 146, 40, 199, 62, 154, 122, 252, 189, 198, 215, 151, 61, 156, 247, 54, 190, 42, 78, 158, 189, 11, 183, 25, 62, 172, 113, 189, 62, 39, 172, 232, 188, 131, 154, 10, 62, 246, 164, 20, 62, 105, 81, 204, 62, 120, 143, 180, 60, 127, 7, 255, 188, 25, 45, 180, 61, 184, 214, 153, 190, 100, 71, 31, 190, 180, 38, 75, 190, 139, 192, 107, 61, 2, 57, 243, 61, 69, 158, 140, 61, 45, 238, 204, 61, 123, 197, 12, 190, 147, 25, 35, 190, 122, 13, 96, 61, 151, 199, 128, 190, 44, 152, 230, 189, 100, 80, 174, 61, 4, 170, 51, 62, 234, 57, 233, 189, 51, 104, 164, 61, 13, 82, 88, 60, 72, 236, 176, 189, 148, 158, 70, 62, 32, 21, 180, 189, 172, 128, 41, 190, 245, 47, 222, 61, 70, 183, 231, 60, 90, 176, 238, 57, 164, 41, 241, 61, 231, 28, 26, 62, 184, 153, 20, 62, 108, 185, 11, 62, 32, 13, 37, 61, 79, 14, 102, 62, 226, 211, 137, 62, 186, 123, 117, 61, 100, 164, 64, 190, 108, 97, 162, 189, 131, 215, 255, 61, 154, 3, 139, 188, 238, 146, 230, 186, 105, 129, 134, 189, 151, 228, 56, 188, 247, 7, 101, 190, 185, 240, 144, 60, 113, 20, 31, 190, 119, 194, 79, 190, 205, 34, 23, 190, 161, 101, 24, 62, 2, 101, 225, 62, 53, 33, 225, 59, 39, 109, 64, 62, 145, 168, 199, 61, 203, 97, 23, 62, 65, 238, 126, 62, 57, 205, 108, 190, 50, 67, 74, 61, 5, 27, 113, 190, 9, 145, 59, 190, 255, 93, 34, 61, 51, 191, 4, 63, 227, 131, 17, 61, 121, 93, 133, 188, 17, 174, 47, 62, 165, 4, 76, 62, 0, 48, 141, 62, 91, 174, 216, 60, 39, 16, 14, 190, 100, 162, 109, 190, 54, 121, 150, 189, 189, 140, 147, 190, 191, 24, 109, 60, 231, 154, 23, 62, 140, 241, 78, 190, 199, 15, 15, 62, 166, 7, 154, 61, 61, 30, 182, 61, 10, 55, 173, 189, 161, 104, 32, 190, 202, 109, 83, 188, 89, 79, 72, 190, 54, 56, 150, 62, 96, 43, 231, 57, 55, 250, 28, 62, 244, 75, 254, 189, 208, 216, 141, 188, 202, 57, 174, 61, 151, 250, 69, 62, 107, 229, 152, 188, 254, 108, 45, 190, 186, 82, 8, 190, 1, 160, 9, 190, 72, 82, 2, 62, 246, 102, 188, 189, 152, 110, 54, 59, 232, 93, 74, 190, 169, 250, 205, 61, 105, 170, 141, 61, 206, 128, 136, 189, 89, 227, 51, 190, 76, 197, 129, 62, 61, 32, 182, 189, 41, 130, 132, 59, 11, 16, 238, 189, 36, 146, 182, 59, 96, 114, 137, 188, 107, 72, 207, 61, 221, 193, 238, 189, 231, 157, 173, 189, 211, 84, 198, 189, 59, 124, 235, 188, 168, 71, 200, 189, 57, 211, 127, 188, 124, 134, 80, 61, 114, 18, 20, 190, 241, 7, 3, 62, 241, 232, 139, 190, 110, 68, 41, 62, 180, 248, 65, 62, 163, 118, 14, 190, 165, 75, 14, 190, 14, 252, 167, 189, 79, 20, 94, 61, 217, 92, 1, 62, 184, 208, 16, 62, 37, 1, 49, 189, 4, 19, 177, 59, 252, 25, 77, 60, 96, 226, 219, 60, 55, 16, 130, 61, 176, 20, 148, 62, 122, 132, 3, 190, 16, 105, 208, 61, 116, 84, 225, 60, 34, 72, 48, 61, 37, 212, 185, 189, 156, 129, 4, 60, 151, 209, 108, 190, 54, 30, 63, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 42, 111, 71, 190, 37, 64, 42, 62, 75, 40, 29, 190, 102, 64, 133, 190, 92, 43, 106, 62, 66, 165, 96, 188, 232, 34, 32, 191, 86, 128, 34, 62, 2, 233, 188, 189, 9, 129, 204, 188, 244, 86, 231, 60, 172, 20, 173, 189, 79, 80, 193, 61, 71, 210, 43, 60, 185, 47, 56, 62, 252, 184, 46, 62, 60, 142, 50, 190, 128, 121, 199, 190, 23, 116, 77, 62, 50, 129, 26, 62, 151, 101, 238, 188, 125, 215, 208, 61, 81, 62, 252, 61, 195, 8, 167, 189, 198, 79, 99, 61, 81, 197, 184, 189, 131, 32, 35, 62, 229, 64, 154, 190, 165, 40, 181, 189, 64, 245, 184, 60, 240, 38, 198, 61, 72, 213, 39, 190, 109, 13, 18, 189, 60, 174, 30, 62, 13, 28, 155, 189, 5, 89, 213, 62, 252, 174, 213, 61, 36, 62, 16, 62, 80, 40, 14, 189, 251, 87, 22, 189, 4, 23, 101, 190, 232, 250, 89, 62, 97, 109, 13, 190, 6, 205, 33, 190, 248, 228, 6, 62, 223, 83, 30, 61, 232, 205, 134, 62, 241, 84, 56, 189, 59, 163, 231, 189, 239, 246, 21, 190, 31, 236, 17, 62, 197, 146, 82, 188, 176, 104, 206, 60, 205, 206, 1, 62, 182, 142, 231, 189, 177, 145, 152, 189, 137, 154, 173, 188, 36, 169, 24, 62, 152, 19, 10, 60, 181, 84, 115, 62, 78, 237, 255, 189, 247, 80, 136, 187, 156, 98, 26, 62, 184, 236, 94, 61, 145, 80, 3, 186, 121, 246, 1, 190, 187, 249, 141, 61, 19, 108, 19, 60, 249, 65, 180, 60, 156, 36, 142, 61, 63, 251, 88, 61, 23, 176, 33, 61, 29, 191, 216, 189, 62, 217, 246, 189, 84, 225, 48, 62, 50, 170, 116, 62, 13, 68, 230, 189, 36, 53, 28, 190, 254, 81, 62, 62, 128, 179, 39, 189, 146, 46, 24, 62, 188, 160, 211, 61, 104, 183, 248, 189, 110, 28, 14, 189, 107, 210, 46, 62, 42, 27, 33, 62, 148, 55, 141, 61, 204, 35, 19, 190, 167, 115, 39, 189, 148, 38, 161, 189, 90, 23, 22, 189, 62, 172, 164, 59, 123, 30, 52, 190, 69, 61, 152, 61, 89, 105, 8, 62, 174, 168, 156, 189, 106, 186, 101, 61, 229, 115, 10, 62, 153, 213, 174, 61, 246, 162, 88, 62, 124, 18, 95, 62, 60, 118, 53, 187, 66, 199, 103, 190, 148, 129, 72, 62, 131, 92, 94, 190, 126, 141, 34, 62, 80, 253, 169, 188, 176, 186, 167, 61, 152, 238, 97, 62, 21, 193, 124, 190, 233, 5, 79, 62, 63, 43, 102, 62, 171, 213, 5, 190, 41, 145, 95, 190, 212, 108, 127, 61, 94, 177, 229, 189, 244, 65, 206, 187, 27, 218, 13, 62, 36, 81, 115, 60, 170, 186, 197, 60, 224, 125, 172, 61, 192, 143, 39, 190, 177, 141, 212, 61, 248, 94, 144, 62, 224, 26, 252, 189, 17, 218, 117, 190, 143, 196, 222, 186, 160, 222, 88, 62, 98, 175, 3, 189, 58, 118, 147, 189, 95, 233, 71, 60, 149, 11, 137, 189, 246, 98, 234, 61, 216, 249, 10, 62, 6, 49, 231, 61, 193, 185, 149, 58, 64, 189, 190, 189, 1, 3, 19, 61, 78, 255, 17, 190, 11, 122, 248, 189, 109, 105, 25, 61, 138, 10, 142, 61, 143, 92, 155, 189, 68, 208, 45, 190, 119, 42, 244, 61, 102, 150, 219, 61, 163, 214, 35, 62, 18, 186, 201, 189, 114, 216, 112, 61, 214, 167, 181, 61, 201, 48, 69, 62, 229, 72, 131, 62, 174, 232, 163, 60, 201, 215, 6, 62, 203, 120, 174, 61, 144, 127, 115, 188, 117, 102, 104, 188, 110, 64, 186, 189, 46, 43, 212, 61, 200, 165, 170, 60, 25, 24, 255, 190, 17, 228, 89, 61, 168, 73, 97, 61, 100, 151, 205, 62, 50, 59, 110, 62, 100, 28, 60, 190, 246, 195, 159, 189, 252, 39, 240, 61, 109, 64, 134, 188, 138, 236, 35, 61, 250, 6, 24, 61, 129, 137, 35, 189, 186, 225, 242, 189, 203, 57, 25, 190, 126, 153, 142, 60, 126, 91, 89, 59, 240, 218, 211, 61, 200, 159, 16, 61, 253, 229, 252, 189, 172, 139, 157, 61, 46, 161, 70, 190, 168, 244, 138, 189, 244, 113, 99, 189, 3, 126, 0, 190, 218, 144, 71, 62, 200, 93, 138, 190, 23, 189, 215, 189, 74, 127, 102, 62, 8, 32, 78, 189, 213, 93, 151, 187, 146, 232, 0, 190, 130, 161, 4, 62, 92, 96, 140, 190, 64, 16, 106, 189, 201, 16, 33, 62, 126, 82, 21, 190, 166, 195, 131, 61, 206, 203, 6, 62, 18, 202, 23, 62, 214, 123, 137, 189, 136, 46, 215, 188, 31, 152, 225, 189, 164, 59, 4, 190, 33, 215, 181, 62, 77, 46, 170, 190, 29, 133, 255, 60, 34, 131, 174, 189, 135, 63, 75, 188, 41, 1, 227, 60, 251, 4, 207, 62, 169, 21, 9, 61, 251, 52, 65, 62, 64, 92, 211, 61, 199, 149, 146, 62, 143, 74, 59, 62, 144, 96, 38, 62, 204, 88, 184, 189, 148, 126, 144, 190, 208, 0, 188, 60, 148, 236, 144, 190, 25, 30, 71, 62, 142, 126, 134, 61, 144, 214, 165, 189, 116, 8, 211, 61, 59, 173, 140, 189, 218, 100, 18, 60, 184, 180, 246, 60, 185, 5, 28, 61, 67, 181, 7, 190, 120, 61, 245, 188, 55, 248, 59, 61, 117, 162, 50, 189, 151, 106, 252, 61, 228, 150, 131, 188, 32, 114, 205, 188, 226, 195, 159, 189, 196, 247, 18, 189, 164, 147, 14, 190, 48, 160, 14, 61, 111, 167, 28, 190, 107, 57, 128, 59, 118, 155, 9, 62, 20, 249, 199, 61, 178, 15, 3, 61, 56, 255, 84, 61, 140, 162, 246, 189, 98, 246, 71, 62, 248, 72, 184, 189, 176, 45, 157, 61, 164, 155, 202, 189, 75, 133, 143, 185, 98, 96, 10, 189, 215, 113, 19, 62, 232, 206, 84, 58, 196, 151, 166, 61, 34, 183, 96, 189, 118, 77, 163, 61, 30, 238, 53, 62, 144, 142, 136, 189, 21, 236, 55, 188, 238, 49, 47, 62, 12, 84, 222, 61, 222, 71, 119, 189, 54, 225, 66, 61, 170, 233, 105, 62, 132, 98, 116, 61, 108, 178, 137, 60, 57, 84, 165, 189, 217, 44, 245, 61, 122, 109, 189, 61, 36, 46, 13, 190, 198, 186, 78, 189, 93, 80, 169, 189, 126, 222, 42, 190, 187, 62, 56, 190, 136, 165, 36, 62, 110, 32, 248, 188, 134, 31, 242, 189, 250, 41, 190, 61, 198, 56, 209, 60, 157, 251, 62, 189, 250, 74, 68, 190, 2, 60, 43, 58, 71, 116, 95, 62, 157, 243, 255, 189, 231, 4, 114, 62, 56, 76, 76, 190, 146, 247, 108, 62, 209, 162, 248, 189, 163, 139, 155, 188, 225, 7, 158, 188, 112, 200, 13, 60, 176, 119, 143, 189, 36, 232, 34, 62, 141, 164, 108, 59, 86, 99, 154, 59, 130, 236, 146, 189, 68, 61, 98, 61, 110, 2, 178, 61, 74, 43, 181, 189, 149, 236, 44, 62, 147, 230, 154, 189, 8, 167, 110, 62, 236, 210, 99, 61, 150, 175, 54, 62, 48, 233, 166, 188, 195, 33, 181, 189, 154, 74, 251, 61, 136, 217, 116, 62, 147, 233, 56, 190, 145, 9, 14, 190, 58, 37, 34, 190, 138, 164, 180, 61, 131, 233, 42, 61, 40, 59, 231, 189, 128, 62, 182, 190, 76, 229, 112, 62, 21, 124, 102, 189, 252, 102, 178, 61, 151, 32, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 32, 12, 190, 129, 225, 189, 61, 38, 245, 69, 61, 178, 101, 94, 190, 16, 218, 105, 62, 46, 74, 40, 189, 69, 219, 53, 61, 186, 122, 245, 60, 39, 208, 163, 187, 72, 234, 14, 187, 150, 102, 13, 190, 18, 160, 214, 62, 39, 133, 158, 61, 18, 244, 201, 61, 165, 125, 98, 59, 51, 163, 211, 61, 226, 43, 109, 189, 60, 230, 77, 189, 170, 20, 112, 62, 39, 112, 66, 189, 99, 166, 140, 189, 217, 106, 197, 189, 45, 36, 52, 190, 41, 47, 34, 62, 72, 90, 70, 62, 206, 233, 108, 62, 44, 249, 64, 61, 233, 97, 18, 189, 199, 195, 36, 190, 15, 42, 63, 188, 114, 17, 135, 62, 74, 62, 250, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 10, 142, 190, 56, 224, 141, 62, 177, 12, 78, 62, 41, 93, 106, 62, 4, 63, 85, 190, 17, 237, 30, 190, 6, 59, 128, 190, 52, 53, 176, 62, 142, 102, 208, 61, 61, 101, 206, 61, 199, 44, 78, 62, 70, 49, 152, 190, 167, 71, 10, 62, 11, 7, 62, 62, 11, 45, 94, 187, 223, 191, 6, 190, 20, 28, 92, 62, 239, 178, 38, 62, 70, 156, 172, 62, 211, 159, 94, 190, 160, 130, 141, 61, 215, 179, 138, 61, 99, 109, 158, 190, 94, 109, 92, 190, 179, 99, 150, 60, 190, 36, 138, 190, 229, 138, 105, 61, 186, 238, 150, 190, 166, 184, 246, 61, 8, 82, 238, 60, 89, 29, 220, 60, 196, 209, 56, 62, 192, 36, 195, 189, 1, 87, 195, 189, 10, 223, 96, 189, 97, 45, 244, 61, 239, 103, 48, 190, 24, 238, 24, 190, 34, 134, 7, 62, 1, 33, 50, 189, 69, 135, 171, 189, 176, 173, 227, 61, 214, 134, 23, 190, 204, 217, 33, 190, 157, 39, 131, 189, 198, 60, 62, 190, 252, 221, 228, 60, 51, 206, 3, 62, 252, 234, 218, 61, 95, 161, 0, 190, 115, 124, 8, 188, 16, 187, 20, 60, 149, 218, 147, 189, 195, 254, 65, 61, 79, 243, 0, 62, 65, 184, 185, 189, 214, 234, 207, 189, 176, 136, 30, 61, 192, 164, 171, 189, 16, 6, 246, 188, 161, 83, 10, 62, 52, 192, 23, 188, 223, 208, 114, 190, 29, 187, 180, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 128, 207, 189, 84, 156, 65, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {203, 163, 61, 63, 73, 47, 235, 62, 120, 159, 239, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 161, 116, 191, 107, 137, 86, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}