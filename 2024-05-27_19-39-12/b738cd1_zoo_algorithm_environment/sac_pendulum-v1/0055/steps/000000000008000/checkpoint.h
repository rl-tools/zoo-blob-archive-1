// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 202, 131, 190, 117, 62, 7, 63, 24, 181, 245, 62, 190, 15, 252, 189, 27, 66, 243, 190, 226, 21, 35, 191, 217, 164, 220, 62, 33, 222, 90, 190, 188, 157, 248, 190, 9, 236, 15, 63, 184, 19, 212, 63, 60, 163, 191, 62, 114, 100, 54, 190, 161, 59, 188, 62, 110, 137, 96, 60, 72, 116, 12, 61, 46, 35, 54, 191, 142, 95, 243, 190, 210, 215, 114, 190, 216, 143, 52, 62, 69, 179, 82, 63, 241, 133, 194, 190, 65, 205, 152, 63, 151, 107, 216, 189, 252, 1, 44, 62, 5, 156, 52, 191, 17, 166, 173, 61, 172, 116, 254, 189, 113, 74, 132, 190, 187, 51, 171, 190, 151, 183, 236, 190, 145, 170, 19, 191, 199, 123, 83, 189, 155, 18, 245, 190, 171, 206, 142, 63, 35, 10, 237, 62, 27, 255, 187, 62, 142, 37, 79, 63, 45, 105, 172, 62, 66, 66, 116, 190, 249, 240, 149, 191, 28, 115, 158, 189, 217, 104, 150, 190, 143, 113, 131, 61, 45, 179, 225, 190, 64, 74, 249, 190, 55, 76, 78, 63, 59, 187, 56, 62, 138, 18, 195, 61, 189, 200, 34, 63, 75, 230, 244, 190, 145, 222, 2, 191, 196, 79, 249, 61, 12, 80, 70, 63, 224, 171, 36, 190, 239, 57, 123, 191, 66, 225, 65, 191, 75, 209, 48, 63, 157, 142, 14, 191, 240, 237, 5, 191, 214, 4, 77, 191, 3, 183, 200, 62, 101, 165, 75, 188, 79, 48, 136, 190, 145, 0, 17, 191, 189, 10, 42, 62, 27, 202, 75, 62, 91, 92, 136, 191, 19, 128, 111, 190, 25, 112, 11, 63, 137, 241, 144, 191, 102, 171, 85, 190, 39, 216, 147, 190, 162, 26, 127, 191, 165, 54, 155, 190, 165, 103, 5, 191, 75, 222, 169, 190, 219, 243, 57, 63, 174, 45, 92, 191, 104, 159, 26, 63, 193, 95, 139, 189, 196, 9, 64, 63, 4, 3, 158, 63, 75, 21, 2, 63, 85, 251, 27, 63, 201, 161, 115, 62, 5, 186, 217, 190, 164, 13, 169, 62, 127, 34, 108, 191, 171, 178, 133, 61, 10, 150, 26, 63, 245, 145, 210, 190, 183, 82, 140, 190, 90, 209, 42, 63, 74, 168, 90, 62, 249, 216, 2, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 116, 158, 190, 11, 48, 211, 60, 26, 187, 65, 191, 87, 175, 174, 61, 7, 190, 196, 62, 27, 255, 251, 189, 93, 72, 103, 189, 255, 210, 30, 189, 47, 96, 165, 62, 36, 13, 122, 190, 252, 218, 14, 63, 11, 10, 64, 189, 132, 173, 208, 190, 1, 165, 52, 62, 56, 59, 0, 191, 2, 150, 243, 62, 42, 198, 12, 62, 208, 31, 254, 190, 54, 234, 124, 60, 146, 5, 82, 61, 150, 122, 14, 190, 115, 74, 231, 62, 230, 129, 40, 63, 171, 69, 9, 62, 233, 191, 22, 191, 156, 44, 180, 190, 66, 39, 186, 62, 236, 251, 9, 63, 23, 221, 25, 191, 123, 169, 41, 63, 13, 1, 91, 191, 41, 134, 102, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 39, 38, 62, 175, 136, 228, 188, 103, 242, 67, 189, 106, 25, 131, 190, 20, 152, 116, 189, 208, 149, 232, 61, 215, 45, 138, 62, 44, 166, 47, 62, 225, 18, 145, 189, 145, 247, 145, 62, 135, 8, 190, 189, 239, 207, 171, 59, 149, 3, 28, 189, 55, 71, 61, 187, 212, 34, 100, 190, 19, 110, 52, 189, 158, 65, 171, 189, 126, 31, 193, 62, 18, 224, 30, 61, 125, 187, 220, 190, 249, 57, 185, 189, 8, 209, 189, 62, 207, 122, 5, 62, 199, 47, 229, 190, 45, 51, 28, 191, 205, 0, 55, 62, 166, 55, 115, 61, 124, 111, 100, 190, 188, 160, 145, 189, 180, 175, 168, 61, 90, 22, 1, 62, 115, 10, 57, 191, 102, 25, 141, 190, 45, 135, 182, 60, 242, 104, 8, 61, 239, 70, 180, 190, 163, 73, 141, 62, 240, 23, 75, 62, 179, 233, 212, 190, 110, 92, 129, 62, 108, 219, 4, 191, 18, 188, 44, 62, 31, 247, 149, 188, 151, 25, 220, 190, 179, 224, 206, 62, 46, 92, 154, 190, 58, 101, 242, 56, 135, 133, 32, 62, 109, 61, 234, 61, 39, 66, 45, 191, 191, 216, 167, 61, 100, 246, 54, 189, 220, 39, 66, 62, 72, 22, 85, 190, 17, 68, 248, 59, 150, 170, 92, 189, 213, 77, 117, 190, 183, 246, 175, 189, 164, 95, 160, 188, 14, 14, 142, 190, 179, 149, 80, 189, 73, 255, 95, 190, 228, 54, 189, 189, 74, 83, 151, 62, 140, 48, 233, 187, 90, 158, 175, 189, 254, 195, 231, 61, 152, 136, 243, 190, 105, 77, 138, 190, 62, 32, 191, 59, 61, 135, 11, 62, 76, 91, 191, 189, 89, 47, 176, 61, 16, 144, 185, 189, 230, 29, 31, 190, 77, 149, 16, 62, 101, 202, 0, 190, 192, 65, 161, 60, 39, 107, 133, 190, 191, 166, 186, 190, 170, 33, 166, 60, 137, 176, 163, 62, 123, 243, 173, 61, 190, 131, 155, 62, 208, 242, 235, 190, 242, 66, 70, 62, 3, 40, 185, 61, 122, 222, 135, 62, 216, 135, 164, 190, 156, 106, 222, 188, 27, 212, 221, 190, 203, 96, 151, 189, 164, 223, 157, 62, 219, 154, 116, 62, 40, 7, 146, 189, 114, 44, 101, 61, 219, 134, 31, 62, 20, 149, 49, 61, 149, 170, 210, 187, 64, 119, 202, 62, 233, 181, 162, 189, 34, 167, 39, 62, 137, 150, 7, 190, 250, 132, 5, 190, 22, 10, 93, 190, 176, 65, 143, 62, 58, 120, 58, 62, 104, 126, 133, 190, 220, 60, 194, 62, 176, 162, 153, 61, 245, 51, 22, 60, 6, 27, 123, 190, 6, 62, 30, 189, 21, 248, 85, 190, 101, 104, 135, 62, 130, 90, 73, 189, 236, 181, 138, 190, 231, 173, 52, 190, 122, 233, 25, 190, 218, 233, 115, 190, 95, 240, 11, 189, 219, 241, 144, 62, 177, 8, 72, 189, 187, 244, 73, 62, 133, 223, 60, 190, 12, 156, 52, 190, 99, 114, 38, 62, 150, 1, 158, 62, 225, 84, 51, 190, 130, 188, 31, 187, 198, 194, 206, 188, 210, 85, 237, 62, 193, 170, 80, 61, 5, 93, 129, 62, 237, 242, 217, 189, 156, 235, 159, 61, 31, 218, 239, 61, 210, 208, 164, 61, 243, 46, 47, 190, 196, 156, 176, 188, 139, 182, 154, 190, 233, 131, 47, 62, 94, 56, 175, 62, 53, 149, 9, 62, 77, 128, 240, 61, 49, 134, 65, 190, 82, 180, 57, 62, 22, 232, 233, 61, 14, 102, 155, 62, 14, 213, 60, 62, 131, 110, 192, 189, 79, 194, 34, 190, 130, 127, 200, 58, 111, 166, 224, 188, 196, 95, 169, 61, 165, 192, 110, 62, 40, 151, 22, 62, 120, 175, 85, 60, 6, 41, 106, 189, 11, 232, 149, 61, 110, 103, 151, 190, 62, 68, 129, 190, 176, 223, 56, 189, 76, 43, 243, 61, 185, 227, 123, 62, 9, 134, 95, 190, 35, 207, 144, 62, 232, 43, 84, 191, 2, 102, 135, 62, 64, 65, 49, 62, 64, 32, 45, 61, 26, 50, 170, 60, 122, 128, 163, 190, 199, 114, 200, 62, 154, 83, 212, 189, 72, 105, 4, 62, 213, 43, 40, 62, 129, 183, 196, 61, 97, 16, 247, 190, 166, 145, 172, 61, 249, 156, 21, 62, 197, 60, 43, 62, 203, 171, 182, 61, 78, 14, 214, 189, 79, 246, 142, 191, 247, 57, 91, 190, 247, 146, 72, 61, 129, 44, 166, 189, 26, 178, 21, 62, 89, 59, 180, 62, 51, 141, 153, 189, 123, 166, 39, 62, 140, 11, 147, 62, 252, 136, 216, 187, 71, 85, 198, 190, 156, 40, 241, 62, 18, 203, 21, 62, 153, 33, 187, 188, 126, 150, 128, 191, 104, 79, 251, 59, 80, 148, 85, 189, 198, 152, 145, 62, 117, 94, 181, 60, 111, 58, 23, 191, 189, 58, 207, 189, 34, 18, 209, 62, 187, 137, 3, 63, 222, 242, 36, 62, 64, 61, 160, 60, 148, 128, 80, 191, 106, 94, 170, 62, 76, 32, 11, 190, 7, 41, 44, 62, 67, 29, 3, 190, 11, 105, 51, 61, 104, 29, 198, 190, 56, 225, 204, 190, 248, 239, 161, 62, 116, 108, 70, 62, 218, 200, 131, 61, 255, 66, 31, 190, 129, 79, 211, 189, 27, 124, 22, 191, 227, 117, 211, 189, 194, 220, 174, 190, 43, 16, 57, 190, 207, 244, 183, 189, 243, 188, 34, 191, 157, 9, 63, 62, 204, 200, 28, 191, 141, 245, 173, 62, 205, 108, 239, 62, 155, 139, 51, 62, 49, 150, 67, 191, 4, 169, 187, 61, 113, 232, 103, 62, 65, 124, 203, 190, 37, 31, 229, 190, 115, 213, 32, 191, 62, 172, 49, 62, 225, 25, 192, 62, 171, 187, 106, 62, 153, 205, 224, 190, 243, 214, 182, 61, 158, 140, 46, 62, 30, 31, 51, 62, 142, 171, 166, 60, 203, 155, 244, 61, 158, 175, 186, 62, 67, 146, 167, 190, 69, 182, 158, 62, 168, 183, 20, 190, 94, 160, 129, 190, 70, 6, 192, 61, 187, 251, 130, 61, 250, 13, 164, 62, 167, 67, 50, 62, 225, 250, 80, 62, 172, 210, 49, 190, 45, 232, 27, 190, 135, 156, 36, 190, 10, 173, 51, 62, 58, 89, 59, 191, 253, 98, 125, 190, 173, 10, 158, 60, 245, 205, 221, 61, 107, 247, 133, 62, 161, 181, 5, 190, 147, 34, 14, 191, 226, 207, 102, 62, 221, 46, 183, 61, 171, 236, 247, 190, 94, 83, 111, 188, 248, 102, 14, 190, 207, 207, 105, 62, 84, 156, 148, 60, 61, 41, 14, 190, 171, 35, 96, 61, 40, 120, 98, 61, 251, 96, 208, 62, 59, 173, 128, 62, 201, 25, 79, 61, 6, 162, 194, 190, 153, 197, 234, 61, 12, 242, 114, 61, 22, 78, 81, 62, 15, 82, 135, 190, 25, 5, 196, 188, 250, 115, 214, 190, 130, 71, 197, 189, 234, 248, 138, 62, 163, 38, 24, 191, 179, 53, 244, 189, 147, 167, 14, 190, 220, 127, 170, 62, 39, 202, 223, 59, 175, 163, 43, 189, 253, 92, 162, 190, 231, 23, 26, 61, 211, 102, 1, 63, 158, 102, 163, 190, 194, 107, 152, 190, 101, 120, 202, 190, 174, 220, 197, 189, 86, 56, 204, 189, 114, 228, 177, 62, 223, 192, 181, 187, 137, 62, 157, 62, 55, 203, 186, 188, 22, 55, 95, 62, 135, 107, 161, 60, 116, 90, 212, 62, 19, 222, 201, 189, 140, 3, 165, 190, 134, 191, 184, 61, 176, 184, 140, 190, 37, 219, 159, 62, 125, 35, 34, 62, 167, 234, 132, 62, 55, 93, 48, 62, 48, 179, 230, 190, 87, 32, 192, 61, 19, 178, 34, 189, 139, 163, 177, 61, 205, 188, 122, 62, 64, 148, 127, 62, 72, 177, 179, 190, 238, 91, 92, 62, 72, 232, 102, 191, 69, 120, 30, 62, 102, 77, 57, 62, 226, 230, 143, 190, 212, 79, 171, 62, 85, 36, 244, 190, 135, 136, 159, 62, 51, 104, 111, 62, 180, 136, 112, 189, 89, 31, 12, 191, 51, 127, 136, 61, 243, 178, 38, 190, 178, 177, 188, 62, 66, 98, 16, 62, 151, 120, 174, 189, 66, 11, 110, 62, 49, 76, 172, 61, 123, 217, 246, 190, 203, 44, 119, 61, 137, 201, 4, 62, 41, 145, 78, 190, 91, 98, 5, 191, 228, 157, 223, 60, 181, 44, 237, 62, 176, 77, 174, 189, 60, 130, 118, 61, 62, 253, 228, 190, 38, 205, 244, 61, 52, 209, 34, 186, 217, 223, 84, 62, 54, 215, 59, 191, 152, 104, 99, 190, 65, 26, 144, 188, 36, 49, 170, 62, 221, 18, 28, 62, 170, 44, 165, 191, 227, 64, 146, 190, 138, 137, 196, 61, 98, 196, 227, 62, 4, 253, 3, 60, 211, 48, 31, 189, 79, 180, 127, 191, 198, 118, 154, 62, 172, 46, 56, 190, 175, 56, 224, 189, 185, 144, 48, 62, 139, 20, 212, 189, 207, 157, 226, 190, 218, 162, 236, 190, 153, 155, 11, 62, 218, 243, 34, 189, 92, 110, 42, 189, 101, 164, 150, 60, 46, 2, 209, 189, 227, 44, 58, 191, 155, 91, 172, 62, 231, 129, 54, 61, 150, 55, 25, 190, 7, 116, 134, 61, 164, 105, 152, 190, 68, 86, 135, 189, 99, 31, 170, 189, 198, 56, 28, 62, 179, 206, 74, 61, 222, 74, 10, 62, 87, 110, 209, 190, 62, 213, 14, 189, 26, 139, 123, 62, 13, 167, 15, 61, 170, 241, 1, 189, 133, 172, 188, 188, 184, 132, 50, 189, 121, 248, 88, 62, 150, 159, 250, 60, 68, 227, 193, 188, 90, 213, 109, 62, 56, 3, 202, 190, 79, 90, 38, 62, 58, 47, 46, 188, 147, 50, 153, 62, 224, 232, 211, 189, 8, 75, 183, 61, 106, 94, 186, 190, 12, 105, 230, 189, 33, 64, 162, 61, 138, 143, 86, 62, 195, 158, 70, 190, 111, 164, 96, 189, 45, 95, 124, 190, 126, 43, 66, 190, 125, 148, 42, 190, 60, 80, 172, 190, 48, 51, 139, 61, 206, 141, 205, 190, 222, 227, 59, 62, 160, 11, 155, 61, 170, 106, 53, 62, 66, 24, 65, 191, 15, 114, 119, 61, 67, 165, 6, 62, 81, 179, 205, 190, 118, 126, 143, 61, 200, 71, 216, 190, 199, 9, 121, 186, 97, 171, 238, 189, 105, 34, 141, 62, 73, 220, 198, 190, 57, 145, 30, 62, 141, 105, 95, 61, 145, 217, 221, 188, 252, 73, 45, 62, 94, 151, 95, 61, 164, 100, 44, 63, 107, 43, 37, 190, 251, 79, 124, 62, 162, 149, 5, 190, 122, 186, 200, 190, 85, 59, 88, 62, 240, 114, 200, 188, 28, 95, 140, 62, 78, 104, 106, 188, 46, 195, 125, 189, 21, 68, 6, 60, 95, 67, 186, 189, 132, 252, 157, 61, 248, 243, 89, 61, 174, 130, 160, 188, 195, 222, 22, 62, 26, 52, 108, 189, 75, 214, 38, 60, 141, 58, 168, 189, 175, 72, 218, 60, 170, 245, 36, 62, 61, 142, 209, 188, 228, 183, 24, 190, 158, 147, 41, 190, 187, 17, 128, 189, 123, 130, 151, 188, 196, 6, 29, 62, 4, 46, 2, 190, 74, 44, 171, 60, 236, 20, 133, 61, 191, 216, 3, 61, 146, 100, 219, 61, 9, 16, 238, 189, 232, 136, 193, 189, 151, 12, 43, 190, 174, 180, 16, 189, 170, 232, 169, 189, 219, 76, 244, 189, 16, 130, 155, 61, 140, 174, 7, 62, 147, 53, 12, 190, 178, 24, 154, 61, 111, 12, 248, 189, 254, 24, 3, 62, 118, 45, 53, 189, 112, 94, 150, 189, 222, 46, 229, 60, 41, 253, 139, 62, 21, 163, 51, 191, 33, 75, 142, 60, 16, 177, 174, 191, 103, 9, 111, 190, 130, 213, 105, 62, 55, 245, 179, 190, 35, 156, 40, 62, 87, 110, 160, 60, 19, 183, 173, 62, 116, 129, 78, 59, 124, 38, 96, 190, 237, 128, 121, 190, 184, 14, 81, 62, 199, 100, 129, 190, 139, 36, 9, 191, 131, 24, 152, 190, 239, 101, 19, 62, 0, 207, 29, 61, 214, 47, 148, 62, 86, 229, 213, 61, 89, 110, 17, 190, 85, 183, 75, 191, 52, 23, 249, 189, 247, 168, 159, 191, 199, 212, 185, 190, 72, 159, 182, 189, 105, 59, 165, 62, 115, 19, 5, 191, 244, 37, 194, 185, 236, 10, 56, 190, 2, 135, 132, 62, 44, 77, 24, 190, 65, 126, 104, 62, 235, 103, 45, 190, 146, 40, 11, 189, 91, 170, 232, 62, 194, 84, 160, 190, 150, 88, 101, 189, 239, 244, 162, 190, 252, 120, 23, 190, 132, 30, 87, 62, 23, 27, 215, 62, 21, 187, 229, 189, 111, 192, 120, 62, 135, 115, 147, 61, 94, 23, 253, 62, 28, 54, 251, 188, 79, 156, 23, 62, 203, 161, 228, 61, 229, 96, 192, 190, 5, 246, 133, 190, 170, 147, 191, 190, 182, 43, 108, 62, 243, 121, 183, 61, 53, 73, 94, 62, 196, 31, 20, 62, 130, 230, 33, 190, 70, 57, 95, 190, 213, 209, 28, 61, 198, 54, 218, 190, 79, 34, 212, 59, 157, 243, 61, 188, 239, 197, 107, 62, 164, 54, 38, 60, 43, 231, 46, 61, 85, 132, 32, 190, 17, 47, 83, 189, 229, 40, 185, 62, 234, 153, 48, 190, 255, 128, 122, 190, 55, 176, 3, 189, 84, 214, 158, 61, 111, 130, 171, 60, 120, 194, 130, 62, 220, 242, 138, 61, 231, 164, 108, 62, 119, 253, 1, 62, 120, 192, 198, 61, 124, 7, 95, 62, 30, 89, 187, 62, 207, 138, 202, 61, 117, 148, 67, 190, 23, 196, 28, 189, 107, 121, 189, 61, 0, 162, 217, 188, 84, 167, 26, 189, 95, 112, 37, 190, 101, 176, 91, 61, 135, 98, 156, 190, 34, 118, 144, 189, 181, 57, 79, 190, 118, 148, 204, 190, 17, 150, 95, 189, 154, 191, 45, 61, 98, 180, 235, 62, 165, 227, 67, 62, 187, 189, 235, 61, 12, 214, 21, 189, 8, 67, 252, 61, 222, 13, 186, 62, 182, 219, 197, 190, 125, 6, 12, 190, 19, 232, 181, 190, 35, 208, 26, 190, 201, 113, 159, 61, 56, 29, 22, 63, 66, 153, 142, 189, 169, 238, 154, 61, 71, 131, 65, 62, 67, 79, 23, 62, 163, 42, 121, 62, 129, 221, 57, 62, 1, 144, 126, 189, 158, 88, 148, 190, 252, 160, 153, 189, 154, 189, 170, 190, 163, 235, 111, 188, 156, 62, 205, 61, 98, 129, 103, 190, 161, 200, 89, 62, 88, 164, 140, 58, 219, 32, 43, 190, 35, 136, 38, 190, 156, 32, 155, 190, 122, 68, 221, 188, 135, 163, 70, 191, 39, 93, 204, 62, 201, 248, 134, 189, 22, 99, 165, 62, 17, 184, 169, 190, 79, 66, 187, 187, 251, 120, 6, 62, 86, 127, 200, 61, 112, 62, 148, 61, 96, 68, 114, 190, 228, 189, 216, 189, 112, 122, 200, 190, 64, 147, 77, 62, 146, 88, 163, 190, 237, 197, 75, 190, 16, 224, 96, 189, 99, 142, 98, 62, 82, 143, 68, 62, 179, 223, 188, 188, 194, 162, 130, 191, 202, 94, 61, 62, 63, 206, 61, 187, 169, 80, 139, 189, 77, 95, 66, 190, 11, 89, 47, 62, 233, 187, 101, 189, 79, 58, 149, 188, 98, 146, 76, 190, 246, 112, 91, 190, 123, 56, 31, 190, 210, 104, 144, 190, 33, 46, 46, 61, 28, 73, 135, 190, 147, 27, 115, 61, 95, 67, 46, 62, 32, 250, 236, 60, 10, 224, 238, 190, 98, 92, 37, 62, 47, 31, 155, 62, 93, 30, 173, 190, 91, 125, 214, 190, 125, 188, 115, 62, 166, 0, 23, 62, 46, 79, 107, 62, 241, 194, 121, 62, 163, 63, 157, 190, 173, 42, 0, 62, 0, 16, 21, 62, 148, 228, 51, 189, 247, 215, 255, 188, 138, 214, 151, 62, 219, 182, 159, 189, 141, 197, 66, 61, 247, 23, 57, 62, 174, 87, 5, 189, 215, 213, 210, 190, 182, 29, 163, 189, 57, 199, 131, 190, 211, 74, 144, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 112, 35, 95, 190, 58, 154, 135, 62, 134, 220, 157, 189, 115, 240, 242, 190, 11, 230, 19, 186, 1, 155, 185, 61, 134, 17, 154, 191, 250, 223, 71, 190, 53, 122, 81, 62, 211, 225, 158, 61, 151, 20, 246, 61, 110, 133, 156, 191, 199, 108, 57, 186, 142, 92, 166, 62, 199, 121, 139, 62, 39, 33, 81, 188, 241, 253, 89, 190, 236, 60, 97, 191, 90, 16, 163, 62, 153, 10, 37, 62, 167, 250, 6, 190, 121, 194, 54, 62, 37, 84, 139, 62, 108, 253, 140, 190, 175, 248, 233, 189, 135, 253, 25, 63, 7, 4, 193, 61, 138, 209, 63, 191, 64, 206, 130, 188, 176, 226, 121, 62, 201, 131, 237, 61, 179, 249, 91, 190, 23, 245, 180, 189, 84, 66, 67, 62, 118, 138, 56, 190, 215, 87, 21, 63, 242, 167, 154, 61, 96, 61, 45, 62, 189, 91, 69, 190, 250, 254, 51, 190, 20, 213, 24, 190, 91, 223, 127, 62, 169, 91, 60, 190, 204, 74, 0, 191, 173, 147, 162, 61, 83, 36, 187, 62, 188, 188, 164, 62, 216, 84, 156, 189, 196, 160, 36, 190, 106, 68, 194, 190, 35, 251, 56, 62, 42, 51, 56, 190, 64, 201, 238, 59, 167, 17, 146, 62, 27, 0, 192, 189, 60, 175, 215, 190, 161, 201, 145, 190, 93, 82, 80, 62, 138, 69, 151, 60, 160, 17, 157, 62, 144, 99, 7, 190, 240, 197, 15, 61, 207, 234, 92, 190, 138, 157, 153, 60, 138, 64, 166, 189, 188, 105, 255, 189, 45, 48, 48, 61, 133, 164, 53, 189, 242, 7, 15, 62, 30, 53, 117, 61, 0, 180, 80, 188, 157, 75, 78, 187, 18, 232, 162, 189, 156, 82, 31, 190, 19, 134, 96, 62, 182, 112, 138, 62, 190, 231, 212, 190, 7, 69, 16, 190, 34, 190, 252, 61, 144, 68, 59, 189, 216, 190, 32, 62, 86, 232, 37, 62, 172, 222, 1, 190, 59, 200, 188, 61, 120, 204, 76, 62, 78, 162, 61, 62, 102, 237, 42, 62, 150, 84, 214, 189, 21, 37, 84, 188, 54, 144, 224, 189, 188, 241, 113, 189, 69, 66, 199, 60, 146, 5, 83, 190, 20, 98, 9, 62, 220, 166, 142, 189, 228, 11, 17, 62, 153, 119, 168, 61, 215, 210, 99, 62, 116, 209, 61, 188, 245, 88, 192, 62, 107, 246, 208, 61, 131, 192, 160, 61, 43, 134, 231, 190, 156, 67, 199, 61, 120, 32, 70, 190, 204, 182, 91, 62, 72, 247, 134, 188, 110, 176, 2, 191, 6, 123, 145, 62, 0, 138, 33, 62, 129, 155, 136, 62, 5, 122, 8, 62, 244, 177, 52, 190, 194, 3, 47, 191, 190, 133, 36, 62, 96, 140, 156, 190, 200, 195, 224, 189, 43, 99, 79, 62, 41, 75, 39, 60, 130, 128, 145, 190, 185, 64, 239, 187, 142, 145, 131, 61, 140, 26, 83, 60, 169, 109, 151, 62, 214, 159, 24, 190, 4, 76, 115, 190, 4, 223, 153, 190, 204, 243, 205, 61, 51, 144, 249, 189, 58, 102, 0, 190, 144, 245, 104, 189, 171, 34, 61, 190, 164, 142, 69, 62, 156, 96, 97, 61, 99, 199, 132, 61, 158, 107, 2, 60, 162, 70, 16, 190, 28, 132, 152, 189, 2, 18, 24, 190, 147, 18, 205, 189, 69, 152, 35, 190, 15, 210, 6, 59, 17, 117, 55, 190, 100, 131, 72, 190, 229, 42, 227, 61, 35, 215, 37, 62, 73, 206, 175, 61, 139, 136, 146, 189, 230, 66, 50, 61, 167, 33, 140, 61, 191, 154, 57, 62, 77, 198, 131, 62, 131, 152, 7, 59, 153, 87, 195, 61, 82, 128, 45, 61, 32, 93, 38, 189, 245, 189, 170, 189, 142, 14, 0, 190, 238, 243, 141, 188, 22, 253, 244, 61, 209, 177, 28, 191, 5, 211, 247, 59, 201, 249, 16, 61, 11, 87, 0, 63, 94, 138, 144, 62, 86, 85, 56, 190, 81, 64, 89, 189, 136, 181, 199, 62, 216, 113, 202, 189, 153, 249, 249, 61, 113, 79, 161, 190, 136, 110, 158, 60, 239, 245, 140, 190, 163, 150, 134, 190, 101, 107, 5, 62, 254, 229, 252, 61, 29, 205, 81, 62, 30, 36, 143, 61, 191, 64, 65, 190, 34, 231, 196, 188, 25, 216, 74, 189, 76, 179, 181, 189, 125, 61, 99, 190, 253, 145, 208, 190, 145, 184, 203, 61, 145, 219, 184, 190, 19, 192, 249, 187, 110, 5, 106, 62, 71, 17, 227, 60, 251, 61, 251, 189, 74, 236, 114, 190, 39, 3, 51, 61, 219, 223, 212, 190, 127, 184, 88, 190, 30, 86, 70, 62, 75, 117, 247, 190, 85, 91, 10, 62, 62, 157, 93, 189, 46, 187, 124, 62, 137, 141, 86, 62, 44, 182, 228, 58, 68, 86, 190, 190, 197, 40, 26, 190, 252, 149, 19, 63, 29, 22, 224, 190, 67, 92, 59, 190, 231, 4, 163, 190, 95, 214, 133, 61, 3, 167, 252, 188, 61, 157, 235, 62, 39, 64, 11, 190, 12, 110, 146, 62, 221, 33, 75, 62, 239, 21, 192, 62, 185, 9, 48, 62, 8, 2, 9, 63, 70, 53, 97, 61, 74, 47, 221, 190, 191, 167, 225, 61, 116, 0, 182, 190, 71, 243, 83, 62, 83, 130, 195, 61, 169, 41, 18, 62, 199, 226, 74, 62, 114, 102, 191, 61, 197, 124, 1, 62, 148, 250, 160, 61, 81, 2, 136, 190, 149, 191, 171, 190, 246, 195, 78, 61, 212, 175, 204, 189, 145, 116, 96, 190, 16, 53, 135, 62, 13, 240, 204, 60, 209, 3, 51, 62, 187, 246, 153, 189, 238, 114, 170, 190, 55, 30, 21, 62, 93, 229, 69, 61, 15, 139, 56, 191, 248, 235, 85, 61, 75, 205, 152, 61, 233, 74, 103, 62, 182, 180, 23, 62, 207, 128, 171, 189, 238, 24, 64, 62, 175, 44, 185, 62, 250, 29, 247, 61, 150, 29, 82, 62, 108, 138, 22, 62, 86, 191, 8, 191, 235, 171, 174, 189, 250, 80, 55, 62, 58, 250, 242, 61, 147, 59, 30, 61, 91, 87, 208, 188, 222, 13, 166, 189, 220, 9, 47, 62, 172, 238, 215, 189, 19, 185, 39, 61, 10, 244, 69, 62, 89, 82, 218, 61, 83, 231, 3, 191, 241, 10, 108, 189, 254, 79, 56, 62, 159, 159, 64, 61, 225, 7, 141, 189, 157, 42, 180, 190, 22, 14, 137, 190, 8, 48, 171, 189, 77, 55, 59, 190, 3, 166, 77, 190, 98, 231, 141, 189, 204, 111, 158, 190, 154, 102, 68, 190, 51, 114, 135, 62, 10, 97, 169, 189, 253, 46, 134, 190, 92, 140, 223, 61, 69, 131, 16, 189, 120, 17, 231, 189, 182, 198, 166, 190, 224, 29, 9, 190, 26, 222, 169, 62, 243, 23, 3, 190, 193, 195, 115, 62, 136, 221, 223, 190, 108, 232, 249, 62, 138, 106, 113, 190, 128, 95, 52, 189, 128, 184, 182, 189, 97, 101, 138, 190, 77, 181, 223, 61, 244, 207, 241, 61, 24, 142, 111, 62, 46, 30, 55, 62, 104, 85, 226, 190, 122, 129, 189, 61, 70, 247, 60, 62, 147, 80, 156, 61, 227, 26, 59, 62, 11, 170, 156, 190, 127, 9, 136, 62, 14, 4, 163, 62, 140, 68, 106, 61, 197, 182, 127, 62, 37, 149, 243, 189, 120, 146, 3, 61, 206, 118, 15, 63, 179, 241, 140, 189, 60, 78, 58, 190, 132, 225, 205, 60, 150, 54, 92, 62, 15, 48, 251, 188, 183, 196, 52, 62, 166, 194, 16, 191, 103, 203, 178, 61, 26, 211, 149, 190, 225, 222, 45, 62, 4, 102, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 52, 3, 190, 179, 230, 42, 62, 69, 4, 215, 188, 49, 9, 151, 190, 179, 0, 160, 62, 161, 168, 8, 62, 254, 115, 92, 61, 21, 169, 223, 61, 63, 193, 124, 61, 194, 245, 56, 189, 115, 144, 12, 60, 247, 191, 175, 62, 166, 34, 100, 61, 99, 98, 26, 62, 165, 125, 98, 59, 134, 243, 99, 61, 88, 51, 173, 189, 180, 193, 23, 60, 50, 95, 138, 62, 152, 111, 0, 61, 15, 187, 163, 188, 217, 106, 197, 189, 48, 7, 120, 190, 29, 124, 37, 62, 151, 133, 174, 62, 194, 2, 24, 62, 28, 131, 207, 61, 243, 190, 196, 189, 88, 228, 203, 189, 5, 11, 226, 187, 251, 36, 155, 62, 200, 131, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 206, 177, 190, 201, 35, 187, 62, 135, 216, 169, 62, 29, 89, 227, 62, 25, 205, 134, 190, 68, 14, 7, 191, 147, 85, 61, 191, 58, 23, 84, 63, 17, 10, 165, 62, 154, 65, 125, 62, 55, 93, 0, 63, 155, 1, 26, 191, 244, 161, 73, 62, 67, 76, 171, 62, 11, 45, 94, 187, 176, 235, 62, 191, 79, 200, 9, 63, 67, 210, 102, 62, 104, 121, 188, 62, 129, 115, 158, 190, 1, 97, 133, 62, 215, 179, 138, 61, 143, 184, 67, 191, 170, 15, 13, 191, 109, 161, 65, 60, 109, 123, 221, 190, 255, 125, 224, 60, 4, 118, 13, 191, 163, 114, 226, 62, 199, 24, 153, 62, 25, 180, 182, 188, 73, 211, 161, 62, 18, 160, 155, 189, 64, 162, 221, 189, 202, 148, 10, 188, 246, 170, 190, 62, 49, 188, 111, 190, 194, 240, 108, 190, 181, 119, 103, 62, 109, 19, 93, 61, 68, 178, 148, 189, 151, 182, 149, 62, 79, 106, 126, 188, 85, 154, 36, 190, 192, 174, 130, 189, 99, 13, 162, 190, 252, 221, 228, 60, 66, 179, 152, 188, 157, 34, 55, 62, 100, 20, 242, 189, 100, 3, 153, 184, 237, 29, 25, 62, 247, 33, 243, 189, 195, 254, 65, 61, 92, 254, 184, 61, 96, 159, 184, 185, 201, 175, 78, 190, 71, 40, 254, 61, 71, 158, 81, 189, 54, 98, 76, 61, 244, 23, 192, 62, 87, 147, 179, 60, 8, 69, 233, 190, 88, 75, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 27, 7, 190, 145, 141, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 200, 16, 64, 95, 199, 211, 189, 171, 151, 252, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 135, 186, 190, 42, 27, 15, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}