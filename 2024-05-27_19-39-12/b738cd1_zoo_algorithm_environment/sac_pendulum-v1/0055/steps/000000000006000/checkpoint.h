// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 10, 133, 190, 13, 156, 191, 62, 97, 118, 4, 63, 222, 7, 88, 190, 8, 202, 233, 190, 90, 39, 29, 191, 36, 219, 135, 62, 152, 24, 83, 190, 103, 39, 8, 191, 102, 166, 22, 63, 40, 215, 195, 63, 216, 61, 188, 62, 73, 165, 29, 190, 15, 112, 206, 62, 109, 93, 144, 60, 109, 18, 0, 190, 221, 178, 211, 190, 221, 196, 10, 191, 194, 174, 119, 190, 86, 190, 221, 61, 125, 54, 95, 63, 189, 21, 203, 190, 90, 106, 133, 63, 247, 6, 182, 188, 215, 190, 25, 62, 144, 72, 33, 191, 13, 142, 222, 61, 148, 60, 15, 190, 145, 206, 153, 189, 196, 150, 190, 190, 227, 55, 233, 190, 165, 142, 21, 191, 31, 21, 252, 189, 81, 183, 211, 190, 119, 94, 66, 63, 162, 25, 18, 63, 18, 75, 155, 62, 228, 31, 75, 63, 12, 7, 177, 62, 53, 8, 163, 190, 67, 29, 141, 191, 112, 85, 123, 189, 225, 11, 162, 190, 21, 251, 31, 62, 188, 222, 239, 190, 35, 194, 241, 190, 72, 239, 46, 63, 211, 245, 158, 61, 125, 18, 147, 61, 80, 39, 13, 63, 76, 228, 1, 191, 14, 19, 5, 191, 133, 195, 24, 188, 155, 238, 76, 63, 252, 34, 130, 190, 46, 96, 69, 191, 98, 2, 68, 191, 115, 170, 43, 63, 224, 75, 245, 190, 249, 130, 13, 191, 155, 162, 67, 191, 115, 59, 214, 62, 41, 218, 13, 189, 129, 142, 143, 190, 18, 220, 16, 191, 74, 113, 31, 62, 4, 213, 63, 62, 152, 222, 128, 191, 72, 41, 81, 190, 95, 37, 6, 63, 89, 84, 135, 191, 3, 141, 81, 190, 239, 174, 189, 190, 100, 175, 97, 191, 235, 126, 160, 190, 4, 171, 207, 190, 32, 207, 202, 190, 93, 14, 65, 63, 136, 111, 60, 191, 180, 120, 51, 63, 121, 96, 239, 188, 190, 190, 79, 63, 220, 253, 134, 63, 188, 17, 9, 63, 115, 62, 23, 63, 143, 255, 200, 62, 41, 79, 217, 190, 137, 214, 163, 62, 173, 21, 97, 191, 188, 110, 162, 61, 158, 150, 157, 62, 226, 176, 246, 190, 59, 235, 92, 190, 236, 13, 44, 63, 244, 60, 51, 62, 94, 255, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 151, 140, 190, 164, 107, 27, 189, 229, 14, 47, 191, 229, 39, 165, 61, 231, 25, 200, 62, 16, 206, 52, 190, 170, 239, 41, 187, 179, 254, 101, 189, 153, 124, 189, 62, 56, 145, 100, 190, 56, 122, 6, 63, 65, 53, 156, 189, 147, 245, 139, 190, 217, 180, 4, 62, 59, 72, 216, 190, 163, 59, 10, 63, 180, 55, 96, 61, 87, 226, 233, 190, 70, 115, 156, 188, 92, 140, 78, 61, 182, 76, 5, 190, 232, 151, 223, 62, 88, 230, 47, 63, 95, 101, 249, 61, 209, 157, 22, 191, 202, 208, 212, 190, 41, 177, 170, 62, 156, 81, 4, 63, 11, 143, 15, 191, 110, 239, 48, 63, 22, 107, 114, 191, 223, 109, 254, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 11, 53, 62, 64, 120, 44, 189, 200, 155, 42, 189, 201, 31, 141, 190, 41, 18, 130, 189, 1, 3, 205, 60, 254, 148, 144, 62, 34, 202, 122, 62, 9, 204, 52, 189, 39, 30, 128, 62, 247, 61, 187, 189, 235, 137, 161, 60, 124, 110, 128, 189, 179, 148, 231, 60, 241, 68, 4, 190, 185, 7, 81, 189, 231, 99, 187, 61, 130, 118, 201, 62, 18, 74, 233, 187, 193, 77, 192, 190, 219, 153, 2, 190, 205, 89, 188, 62, 117, 221, 222, 61, 177, 201, 157, 190, 81, 208, 207, 190, 61, 214, 86, 62, 155, 210, 233, 60, 108, 30, 101, 190, 165, 222, 94, 189, 250, 118, 212, 61, 90, 22, 1, 62, 80, 54, 62, 191, 20, 25, 243, 189, 149, 110, 25, 60, 159, 42, 137, 61, 248, 183, 39, 190, 61, 196, 156, 62, 71, 254, 82, 62, 130, 169, 166, 190, 221, 233, 197, 62, 250, 23, 183, 190, 107, 196, 48, 62, 152, 205, 107, 189, 102, 79, 132, 190, 137, 99, 190, 62, 250, 44, 161, 190, 151, 193, 122, 60, 146, 233, 88, 62, 127, 97, 22, 62, 60, 15, 11, 191, 133, 83, 132, 61, 9, 148, 75, 189, 247, 236, 39, 62, 248, 76, 127, 190, 225, 142, 52, 189, 15, 136, 240, 189, 219, 102, 123, 190, 162, 212, 22, 61, 244, 87, 166, 60, 124, 171, 37, 190, 64, 19, 212, 188, 155, 206, 72, 190, 150, 206, 156, 60, 220, 13, 51, 62, 57, 243, 219, 185, 98, 15, 98, 189, 81, 177, 94, 61, 59, 211, 206, 190, 215, 4, 131, 190, 115, 78, 6, 61, 213, 246, 45, 62, 231, 110, 170, 189, 237, 83, 236, 61, 43, 2, 147, 189, 196, 246, 0, 190, 65, 44, 38, 62, 211, 232, 208, 186, 14, 151, 217, 59, 161, 241, 130, 190, 121, 165, 148, 190, 153, 79, 130, 188, 115, 211, 166, 62, 53, 73, 245, 61, 183, 141, 147, 62, 80, 247, 156, 190, 19, 105, 98, 62, 164, 84, 225, 61, 96, 76, 141, 62, 54, 118, 123, 190, 92, 108, 33, 189, 211, 4, 116, 190, 222, 254, 189, 188, 73, 143, 104, 62, 89, 164, 136, 62, 183, 134, 34, 190, 204, 217, 157, 61, 60, 192, 45, 62, 8, 132, 1, 61, 245, 169, 89, 188, 133, 185, 202, 62, 3, 6, 131, 189, 191, 181, 29, 62, 32, 219, 247, 189, 248, 71, 162, 189, 49, 141, 21, 190, 176, 88, 136, 62, 8, 103, 64, 62, 1, 105, 112, 190, 36, 48, 186, 62, 0, 124, 211, 61, 151, 218, 189, 187, 71, 123, 106, 190, 127, 112, 133, 189, 216, 77, 87, 190, 13, 27, 130, 62, 193, 163, 57, 189, 97, 210, 139, 190, 163, 128, 211, 189, 60, 139, 243, 189, 48, 96, 55, 190, 155, 189, 250, 188, 173, 189, 139, 62, 139, 207, 178, 188, 208, 175, 78, 62, 6, 88, 73, 190, 239, 187, 232, 189, 134, 236, 169, 61, 12, 191, 143, 62, 196, 23, 40, 190, 30, 132, 198, 188, 119, 48, 39, 189, 179, 64, 220, 62, 166, 33, 194, 60, 116, 109, 115, 62, 170, 243, 3, 190, 106, 139, 30, 61, 36, 48, 131, 61, 127, 61, 134, 61, 122, 186, 57, 190, 44, 140, 220, 187, 3, 210, 161, 190, 49, 63, 50, 62, 200, 140, 168, 62, 219, 42, 241, 61, 40, 173, 177, 61, 69, 127, 72, 190, 182, 90, 40, 62, 197, 113, 194, 61, 117, 57, 153, 62, 92, 242, 8, 62, 240, 50, 250, 189, 236, 183, 26, 190, 102, 143, 235, 60, 39, 1, 234, 188, 97, 197, 6, 61, 132, 130, 77, 62, 181, 142, 234, 61, 158, 30, 244, 188, 106, 188, 20, 61, 10, 149, 73, 61, 209, 172, 138, 190, 173, 22, 119, 190, 169, 103, 54, 61, 33, 224, 226, 61, 97, 8, 100, 62, 146, 2, 49, 190, 182, 190, 141, 62, 24, 77, 66, 191, 129, 157, 124, 62, 109, 219, 121, 62, 138, 159, 6, 61, 95, 222, 52, 61, 119, 11, 174, 190, 41, 131, 243, 62, 80, 133, 60, 61, 14, 133, 165, 61, 217, 84, 89, 62, 74, 48, 243, 61, 97, 152, 239, 190, 220, 199, 188, 61, 124, 174, 106, 60, 70, 113, 16, 62, 19, 15, 167, 61, 175, 86, 190, 189, 69, 183, 85, 191, 11, 212, 52, 190, 108, 161, 82, 189, 144, 222, 204, 189, 19, 93, 18, 62, 181, 130, 171, 62, 64, 131, 158, 61, 134, 170, 11, 62, 149, 150, 196, 62, 250, 242, 209, 188, 146, 23, 197, 190, 90, 104, 194, 62, 187, 219, 187, 61, 80, 92, 36, 189, 37, 4, 132, 191, 232, 42, 162, 189, 130, 48, 177, 189, 125, 91, 139, 62, 177, 21, 62, 188, 11, 174, 25, 191, 253, 55, 142, 189, 58, 96, 160, 62, 24, 86, 253, 62, 78, 68, 209, 61, 194, 138, 200, 188, 92, 102, 95, 191, 99, 75, 162, 62, 33, 47, 248, 189, 70, 179, 57, 62, 90, 173, 48, 190, 207, 173, 67, 61, 191, 42, 158, 190, 209, 46, 216, 190, 242, 171, 35, 62, 196, 101, 244, 61, 214, 184, 98, 61, 84, 216, 49, 190, 185, 255, 229, 189, 60, 235, 243, 190, 182, 160, 60, 189, 140, 87, 193, 190, 156, 144, 107, 190, 237, 16, 44, 190, 98, 122, 28, 191, 95, 79, 23, 62, 192, 121, 40, 191, 137, 40, 170, 62, 119, 241, 168, 62, 214, 35, 76, 62, 109, 242, 140, 191, 43, 254, 200, 61, 147, 74, 80, 62, 3, 97, 157, 190, 110, 119, 212, 190, 47, 53, 128, 191, 185, 216, 21, 62, 128, 175, 150, 62, 215, 74, 83, 62, 56, 113, 233, 190, 173, 92, 122, 61, 192, 29, 8, 62, 233, 111, 85, 62, 141, 54, 23, 61, 171, 129, 248, 61, 58, 32, 163, 62, 238, 61, 181, 190, 113, 94, 143, 62, 160, 95, 20, 190, 225, 34, 2, 190, 80, 122, 223, 61, 8, 157, 138, 61, 51, 132, 166, 62, 102, 155, 190, 61, 165, 223, 64, 62, 77, 222, 70, 190, 53, 215, 18, 190, 128, 103, 63, 190, 42, 52, 35, 62, 202, 232, 22, 191, 235, 13, 76, 190, 122, 240, 203, 60, 49, 155, 183, 61, 66, 165, 109, 62, 154, 31, 2, 190, 148, 58, 123, 190, 40, 23, 73, 62, 188, 131, 140, 61, 34, 81, 210, 190, 220, 175, 32, 189, 72, 46, 2, 190, 218, 237, 82, 62, 165, 83, 51, 59, 179, 146, 113, 190, 26, 132, 29, 61, 179, 136, 253, 60, 223, 152, 199, 62, 18, 219, 116, 62, 110, 157, 133, 188, 248, 29, 161, 190, 246, 40, 241, 61, 8, 142, 83, 61, 61, 0, 81, 62, 7, 213, 137, 190, 231, 21, 0, 189, 207, 154, 213, 190, 65, 200, 129, 189, 195, 145, 125, 62, 15, 25, 12, 191, 236, 63, 117, 189, 230, 36, 246, 189, 23, 184, 173, 62, 237, 68, 65, 61, 29, 150, 62, 189, 137, 249, 149, 190, 140, 94, 146, 61, 161, 106, 0, 63, 196, 174, 151, 190, 55, 251, 155, 190, 71, 98, 191, 190, 22, 156, 28, 189, 78, 215, 153, 189, 243, 35, 180, 62, 236, 64, 211, 60, 225, 183, 156, 62, 219, 157, 211, 60, 225, 63, 121, 62, 9, 203, 144, 60, 193, 122, 171, 62, 91, 160, 207, 189, 28, 220, 172, 190, 24, 119, 66, 62, 246, 13, 129, 190, 180, 62, 160, 62, 235, 97, 24, 62, 74, 213, 149, 61, 166, 164, 60, 62, 89, 3, 241, 190, 211, 138, 148, 61, 202, 208, 177, 188, 94, 102, 79, 61, 115, 31, 132, 62, 164, 79, 118, 62, 6, 134, 191, 190, 65, 221, 159, 62, 179, 249, 71, 191, 95, 154, 23, 62, 74, 58, 60, 62, 14, 203, 124, 190, 220, 238, 53, 61, 85, 248, 240, 190, 212, 110, 165, 62, 188, 105, 140, 62, 117, 143, 90, 189, 220, 242, 250, 190, 131, 116, 39, 61, 62, 248, 76, 190, 230, 119, 190, 62, 164, 167, 44, 62, 64, 133, 31, 190, 197, 63, 177, 61, 217, 48, 113, 61, 74, 161, 152, 190, 115, 177, 232, 61, 19, 8, 42, 60, 195, 38, 77, 190, 151, 102, 9, 191, 25, 201, 99, 61, 173, 13, 70, 62, 149, 27, 174, 189, 88, 15, 62, 61, 209, 14, 234, 190, 7, 27, 213, 61, 57, 193, 33, 61, 69, 24, 65, 62, 233, 63, 104, 191, 207, 190, 6, 190, 48, 191, 103, 189, 57, 38, 162, 62, 192, 188, 5, 62, 144, 88, 129, 191, 72, 14, 160, 190, 23, 69, 131, 187, 81, 250, 222, 62, 212, 211, 108, 61, 42, 40, 185, 188, 42, 19, 137, 191, 198, 94, 144, 62, 233, 19, 57, 190, 152, 111, 166, 188, 64, 134, 240, 61, 140, 31, 232, 189, 149, 193, 198, 190, 166, 74, 242, 190, 0, 157, 170, 58, 195, 253, 101, 188, 190, 50, 24, 189, 108, 191, 227, 187, 109, 102, 254, 189, 44, 241, 34, 191, 100, 15, 184, 62, 98, 245, 107, 61, 171, 254, 242, 189, 225, 214, 17, 60, 140, 120, 114, 190, 86, 58, 96, 189, 209, 166, 109, 189, 207, 39, 64, 62, 212, 130, 169, 61, 7, 195, 34, 62, 209, 23, 200, 190, 209, 125, 237, 188, 225, 23, 139, 62, 237, 221, 19, 62, 148, 122, 86, 189, 128, 211, 114, 188, 232, 121, 152, 60, 181, 2, 54, 62, 60, 16, 52, 61, 225, 239, 58, 60, 166, 102, 92, 62, 77, 194, 151, 190, 99, 27, 63, 62, 52, 86, 202, 58, 115, 55, 155, 62, 12, 201, 51, 189, 76, 204, 175, 61, 244, 212, 113, 190, 152, 134, 142, 189, 47, 198, 119, 60, 198, 89, 107, 62, 65, 139, 93, 190, 66, 127, 58, 189, 187, 203, 134, 190, 227, 22, 240, 189, 76, 56, 96, 188, 11, 231, 159, 190, 153, 107, 10, 61, 147, 99, 143, 190, 170, 209, 78, 62, 233, 64, 172, 188, 2, 89, 82, 62, 131, 10, 43, 191, 166, 40, 235, 60, 77, 181, 223, 61, 56, 33, 145, 190, 249, 121, 34, 59, 224, 71, 2, 191, 51, 119, 156, 188, 48, 192, 16, 189, 21, 248, 139, 62, 135, 65, 171, 190, 128, 98, 42, 62, 252, 26, 90, 61, 81, 188, 217, 188, 134, 14, 44, 62, 98, 118, 97, 61, 111, 136, 255, 62, 56, 183, 45, 190, 20, 134, 120, 62, 9, 187, 228, 189, 105, 235, 48, 190, 212, 0, 109, 62, 110, 10, 109, 189, 253, 31, 160, 62, 78, 104, 106, 188, 46, 195, 125, 189, 21, 68, 6, 60, 95, 67, 186, 189, 132, 252, 157, 61, 248, 243, 89, 61, 174, 130, 160, 188, 195, 222, 22, 62, 26, 52, 108, 189, 75, 214, 38, 60, 141, 58, 168, 189, 175, 72, 218, 60, 170, 245, 36, 62, 61, 142, 209, 188, 228, 183, 24, 190, 158, 147, 41, 190, 187, 17, 128, 189, 123, 130, 151, 188, 196, 6, 29, 62, 4, 46, 2, 190, 74, 44, 171, 60, 236, 20, 133, 61, 191, 216, 3, 61, 146, 100, 219, 61, 9, 16, 238, 189, 232, 136, 193, 189, 151, 12, 43, 190, 174, 180, 16, 189, 170, 232, 169, 189, 219, 76, 244, 189, 16, 130, 155, 61, 140, 174, 7, 62, 220, 70, 207, 189, 69, 200, 160, 189, 236, 169, 215, 189, 47, 46, 224, 61, 38, 147, 96, 189, 132, 152, 139, 188, 124, 2, 94, 61, 154, 67, 90, 62, 55, 219, 38, 191, 182, 220, 38, 60, 96, 79, 148, 191, 176, 127, 82, 190, 16, 23, 97, 62, 55, 245, 179, 190, 255, 247, 159, 60, 224, 65, 227, 60, 27, 226, 103, 60, 210, 130, 8, 60, 37, 211, 125, 190, 101, 215, 15, 190, 181, 66, 107, 62, 71, 74, 26, 190, 195, 18, 202, 190, 202, 9, 152, 190, 43, 165, 22, 62, 216, 74, 18, 61, 244, 238, 144, 62, 5, 82, 226, 61, 213, 201, 153, 189, 25, 40, 51, 191, 4, 102, 245, 189, 164, 64, 139, 191, 180, 201, 177, 190, 197, 53, 180, 189, 30, 194, 130, 62, 144, 220, 199, 190, 202, 24, 166, 61, 13, 73, 58, 190, 118, 107, 135, 62, 217, 124, 113, 189, 115, 22, 107, 62, 50, 128, 46, 190, 110, 240, 69, 188, 202, 246, 254, 62, 205, 225, 95, 190, 90, 11, 214, 189, 97, 144, 166, 190, 90, 94, 129, 189, 43, 202, 68, 62, 253, 40, 215, 62, 1, 135, 219, 189, 41, 128, 129, 62, 223, 224, 38, 62, 212, 213, 250, 62, 18, 47, 125, 188, 42, 180, 10, 62, 93, 102, 1, 62, 95, 2, 208, 190, 223, 114, 226, 189, 164, 214, 152, 190, 16, 211, 39, 62, 56, 12, 205, 61, 231, 108, 170, 61, 70, 156, 61, 62, 41, 191, 40, 190, 159, 125, 98, 190, 233, 38, 227, 60, 46, 187, 199, 190, 88, 160, 118, 188, 3, 216, 45, 187, 174, 195, 127, 62, 65, 174, 65, 188, 126, 71, 152, 61, 32, 220, 39, 190, 113, 54, 149, 189, 74, 171, 184, 62, 135, 138, 185, 189, 1, 243, 138, 190, 77, 161, 78, 189, 246, 122, 174, 61, 54, 25, 146, 187, 247, 46, 131, 62, 24, 234, 138, 61, 178, 113, 96, 62, 90, 5, 249, 61, 235, 251, 227, 61, 192, 12, 93, 62, 49, 41, 184, 62, 163, 235, 203, 61, 51, 199, 76, 190, 3, 147, 229, 187, 96, 30, 241, 61, 1, 213, 3, 189, 105, 0, 115, 188, 193, 57, 28, 190, 16, 89, 117, 61, 40, 63, 167, 190, 154, 19, 252, 188, 165, 195, 48, 190, 219, 15, 206, 190, 70, 104, 207, 189, 7, 170, 176, 61, 29, 142, 240, 62, 252, 196, 9, 62, 106, 68, 18, 62, 158, 206, 26, 187, 52, 187, 2, 62, 36, 4, 172, 62, 227, 100, 173, 190, 64, 155, 18, 190, 27, 205, 167, 190, 48, 152, 55, 190, 155, 209, 130, 61, 115, 201, 19, 63, 153, 236, 233, 188, 63, 98, 151, 61, 247, 194, 47, 62, 234, 97, 46, 62, 69, 228, 128, 62, 160, 84, 49, 62, 8, 247, 244, 188, 146, 243, 157, 190, 254, 47, 86, 189, 31, 255, 169, 190, 106, 4, 223, 57, 32, 227, 240, 61, 105, 21, 113, 190, 219, 91, 87, 62, 190, 229, 47, 60, 63, 34, 22, 190, 46, 131, 41, 190, 11, 37, 179, 190, 207, 216, 80, 189, 137, 41, 39, 191, 146, 112, 197, 62, 46, 53, 146, 189, 167, 133, 155, 62, 56, 107, 169, 190, 51, 164, 250, 60, 245, 199, 5, 62, 127, 10, 148, 60, 132, 206, 49, 62, 96, 68, 114, 190, 232, 92, 18, 190, 86, 69, 58, 190, 126, 20, 86, 62, 230, 111, 148, 190, 236, 51, 73, 190, 233, 6, 26, 190, 26, 53, 86, 62, 216, 23, 68, 62, 146, 92, 111, 188, 54, 82, 52, 191, 64, 245, 82, 62, 42, 204, 162, 189, 111, 205, 243, 189, 157, 208, 142, 189, 147, 205, 22, 62, 233, 187, 101, 189, 81, 47, 239, 189, 122, 48, 86, 190, 46, 199, 117, 190, 250, 98, 247, 189, 17, 195, 133, 190, 99, 207, 150, 60, 58, 35, 121, 190, 136, 182, 149, 61, 202, 206, 225, 61, 121, 199, 116, 61, 79, 93, 65, 191, 163, 6, 44, 62, 227, 169, 157, 62, 213, 116, 141, 190, 126, 221, 194, 190, 179, 244, 197, 189, 110, 61, 18, 62, 73, 16, 55, 62, 27, 182, 121, 62, 13, 105, 152, 190, 0, 110, 201, 61, 238, 186, 17, 62, 40, 49, 104, 59, 109, 223, 136, 188, 59, 71, 153, 62, 142, 201, 7, 60, 183, 72, 69, 61, 196, 137, 59, 62, 236, 33, 240, 188, 187, 98, 96, 190, 253, 72, 114, 189, 12, 170, 131, 190, 185, 68, 141, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 49, 9, 88, 190, 5, 247, 122, 62, 138, 241, 236, 189, 91, 20, 7, 191, 133, 153, 162, 61, 163, 110, 92, 61, 149, 127, 174, 191, 163, 162, 104, 189, 184, 244, 241, 61, 4, 220, 58, 61, 216, 230, 0, 62, 251, 165, 103, 191, 199, 108, 57, 186, 91, 210, 138, 62, 40, 244, 130, 62, 78, 251, 136, 61, 125, 157, 70, 190, 13, 44, 138, 191, 136, 245, 149, 62, 230, 76, 226, 61, 55, 112, 116, 188, 75, 133, 33, 62, 41, 94, 121, 62, 124, 252, 116, 190, 157, 168, 199, 189, 55, 49, 6, 63, 129, 172, 13, 62, 74, 35, 57, 191, 191, 149, 86, 189, 181, 98, 51, 62, 190, 48, 11, 62, 24, 1, 66, 190, 186, 28, 231, 187, 52, 58, 54, 62, 158, 251, 71, 190, 137, 52, 20, 63, 26, 30, 175, 61, 245, 234, 41, 62, 189, 63, 122, 190, 214, 97, 35, 190, 30, 250, 91, 190, 154, 48, 112, 62, 147, 205, 76, 190, 250, 12, 195, 190, 247, 114, 198, 61, 16, 206, 148, 62, 23, 117, 150, 62, 82, 61, 114, 189, 43, 191, 61, 190, 52, 28, 186, 190, 63, 1, 52, 62, 37, 209, 24, 190, 226, 131, 107, 61, 82, 167, 66, 62, 208, 44, 193, 189, 220, 90, 182, 190, 106, 118, 119, 190, 145, 46, 42, 62, 149, 205, 100, 188, 1, 95, 152, 62, 62, 141, 56, 190, 68, 36, 155, 186, 57, 97, 247, 189, 83, 114, 211, 60, 176, 56, 169, 189, 224, 241, 3, 190, 48, 212, 27, 61, 241, 34, 36, 189, 71, 17, 243, 61, 60, 204, 142, 61, 199, 43, 178, 56, 18, 134, 39, 60, 40, 179, 161, 189, 220, 151, 35, 190, 158, 115, 82, 62, 93, 184, 147, 62, 216, 176, 179, 190, 57, 130, 28, 190, 252, 72, 244, 61, 133, 197, 112, 188, 183, 166, 18, 62, 150, 204, 36, 62, 62, 0, 2, 190, 133, 14, 128, 61, 3, 223, 111, 62, 129, 206, 58, 62, 189, 125, 10, 62, 254, 178, 223, 189, 254, 94, 228, 59, 76, 118, 232, 189, 171, 189, 145, 188, 241, 178, 23, 60, 144, 130, 93, 190, 110, 246, 250, 61, 209, 223, 22, 61, 66, 101, 150, 61, 6, 168, 14, 62, 53, 255, 65, 62, 146, 55, 177, 188, 176, 154, 187, 62, 9, 181, 228, 61, 48, 56, 68, 61, 172, 41, 33, 191, 88, 125, 63, 61, 205, 61, 75, 190, 53, 62, 72, 62, 33, 220, 66, 189, 62, 15, 233, 190, 60, 116, 56, 62, 19, 106, 74, 61, 232, 78, 122, 62, 33, 5, 230, 61, 122, 126, 77, 190, 212, 108, 64, 191, 68, 104, 5, 62, 102, 31, 132, 190, 186, 151, 133, 189, 123, 201, 12, 62, 226, 199, 32, 61, 189, 117, 85, 190, 115, 251, 22, 189, 119, 228, 21, 190, 134, 134, 193, 188, 193, 128, 164, 62, 206, 144, 65, 190, 154, 52, 97, 190, 162, 126, 99, 190, 248, 61, 31, 62, 147, 174, 211, 189, 151, 9, 230, 189, 161, 44, 69, 189, 228, 11, 13, 190, 233, 223, 64, 62, 123, 165, 179, 61, 127, 53, 193, 61, 84, 135, 165, 60, 233, 153, 237, 189, 53, 215, 114, 189, 93, 214, 16, 190, 56, 153, 130, 189, 38, 174, 131, 189, 210, 221, 53, 58, 177, 74, 49, 190, 239, 170, 28, 190, 62, 17, 178, 61, 7, 16, 52, 62, 9, 184, 218, 61, 77, 83, 153, 189, 47, 216, 164, 61, 232, 78, 179, 61, 166, 208, 62, 62, 52, 109, 138, 62, 40, 231, 12, 61, 82, 173, 204, 61, 248, 107, 206, 61, 109, 9, 147, 188, 79, 244, 173, 189, 187, 28, 219, 189, 58, 99, 249, 60, 127, 8, 214, 61, 87, 121, 9, 191, 117, 250, 224, 60, 229, 155, 52, 61, 175, 173, 8, 63, 161, 168, 146, 62, 77, 79, 19, 190, 150, 68, 76, 188, 7, 245, 150, 62, 253, 35, 154, 189, 164, 53, 16, 62, 37, 219, 144, 190, 128, 63, 78, 61, 137, 5, 122, 190, 69, 21, 79, 190, 117, 3, 245, 61, 244, 42, 176, 61, 125, 0, 56, 62, 202, 26, 4, 62, 84, 113, 24, 190, 132, 165, 29, 61, 61, 28, 133, 189, 32, 23, 170, 189, 86, 156, 34, 190, 211, 246, 164, 190, 19, 84, 39, 62, 213, 94, 159, 190, 18, 201, 161, 189, 189, 62, 139, 62, 238, 202, 48, 60, 190, 149, 179, 189, 165, 70, 57, 190, 39, 247, 197, 61, 185, 86, 223, 190, 91, 201, 43, 190, 159, 179, 54, 62, 41, 199, 235, 190, 188, 137, 11, 62, 160, 69, 182, 188, 52, 145, 94, 62, 170, 126, 39, 62, 137, 145, 216, 188, 182, 147, 171, 190, 189, 129, 28, 190, 213, 38, 11, 63, 11, 241, 203, 190, 155, 176, 91, 190, 254, 10, 145, 190, 210, 144, 135, 61, 8, 51, 29, 60, 105, 222, 232, 62, 158, 55, 198, 189, 98, 172, 155, 62, 176, 89, 57, 62, 138, 177, 177, 62, 238, 23, 44, 62, 42, 15, 246, 62, 163, 180, 87, 61, 148, 42, 237, 190, 235, 9, 24, 62, 182, 157, 186, 190, 193, 73, 90, 62, 240, 25, 144, 61, 74, 229, 52, 189, 70, 227, 82, 62, 203, 86, 207, 61, 226, 129, 191, 61, 11, 211, 77, 61, 82, 62, 44, 190, 45, 85, 171, 190, 36, 68, 148, 60, 126, 131, 35, 189, 215, 235, 70, 190, 255, 223, 152, 62, 64, 147, 203, 187, 143, 174, 245, 61, 203, 44, 38, 189, 165, 39, 125, 189, 118, 35, 159, 61, 50, 44, 95, 60, 90, 89, 41, 191, 24, 115, 166, 60, 195, 197, 171, 61, 166, 195, 64, 62, 148, 148, 8, 62, 158, 59, 57, 190, 239, 181, 72, 62, 116, 27, 179, 62, 114, 189, 233, 61, 233, 147, 62, 62, 41, 42, 12, 62, 95, 25, 245, 190, 140, 167, 202, 188, 55, 155, 42, 62, 141, 208, 20, 62, 49, 83, 76, 59, 199, 227, 73, 60, 247, 188, 132, 60, 63, 229, 65, 62, 189, 15, 202, 189, 170, 0, 232, 60, 90, 206, 55, 62, 101, 28, 6, 62, 44, 164, 184, 190, 71, 105, 41, 189, 19, 197, 43, 62, 152, 18, 100, 61, 24, 210, 18, 189, 229, 120, 79, 190, 15, 6, 173, 189, 21, 133, 91, 188, 26, 74, 46, 190, 158, 161, 249, 189, 81, 195, 165, 189, 54, 37, 115, 190, 216, 15, 44, 190, 47, 14, 109, 62, 202, 131, 231, 188, 162, 219, 114, 190, 241, 253, 190, 61, 117, 80, 33, 189, 176, 24, 147, 189, 168, 101, 133, 190, 168, 103, 162, 189, 34, 15, 150, 62, 228, 159, 10, 190, 32, 14, 92, 62, 36, 229, 166, 190, 177, 45, 197, 62, 106, 69, 148, 190, 61, 82, 241, 188, 194, 149, 25, 189, 253, 41, 136, 190, 197, 245, 213, 61, 130, 147, 4, 62, 220, 205, 61, 62, 196, 246, 107, 62, 102, 218, 199, 190, 103, 82, 210, 61, 102, 67, 11, 62, 27, 183, 85, 59, 30, 159, 243, 61, 187, 240, 180, 190, 109, 218, 146, 62, 116, 116, 148, 62, 214, 196, 7, 62, 116, 229, 113, 62, 99, 117, 230, 189, 111, 194, 121, 61, 32, 170, 253, 62, 120, 186, 225, 189, 72, 43, 96, 190, 119, 166, 175, 189, 241, 46, 23, 62, 131, 112, 5, 189, 127, 178, 35, 62, 122, 1, 22, 191, 93, 95, 43, 62, 238, 238, 154, 190, 105, 74, 85, 62, 9, 48, 168, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 216, 4, 190, 234, 49, 36, 62, 91, 99, 150, 187, 145, 211, 131, 190, 179, 63, 141, 62, 33, 51, 227, 61, 142, 21, 24, 61, 35, 27, 204, 61, 146, 176, 56, 61, 130, 185, 156, 188, 247, 214, 112, 188, 29, 151, 184, 62, 217, 45, 145, 61, 40, 130, 22, 62, 165, 125, 98, 59, 9, 192, 106, 61, 33, 158, 36, 189, 202, 183, 212, 59, 200, 68, 131, 62, 69, 171, 175, 185, 7, 217, 174, 188, 217, 106, 197, 189, 116, 233, 84, 190, 4, 142, 31, 62, 203, 235, 156, 62, 231, 219, 51, 62, 88, 134, 204, 61, 221, 105, 133, 189, 78, 46, 233, 189, 24, 120, 160, 59, 136, 138, 137, 62, 237, 231, 189, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 241, 196, 190, 46, 67, 192, 62, 224, 191, 151, 62, 173, 125, 198, 62, 84, 208, 120, 190, 100, 126, 5, 191, 153, 220, 36, 191, 93, 137, 87, 63, 183, 54, 147, 62, 242, 35, 130, 62, 127, 215, 1, 63, 19, 223, 11, 191, 209, 132, 71, 62, 87, 127, 170, 62, 11, 45, 94, 187, 143, 97, 6, 191, 184, 25, 227, 62, 182, 47, 132, 62, 138, 208, 199, 62, 41, 237, 163, 190, 248, 48, 133, 62, 215, 179, 138, 61, 107, 103, 52, 191, 25, 101, 244, 190, 223, 132, 160, 60, 139, 185, 218, 190, 206, 134, 225, 60, 214, 164, 247, 190, 99, 120, 225, 62, 143, 185, 128, 62, 131, 15, 206, 188, 193, 188, 176, 62, 251, 163, 107, 189, 125, 246, 115, 189, 53, 138, 42, 187, 18, 29, 190, 62, 58, 255, 89, 190, 238, 122, 51, 190, 162, 100, 76, 62, 70, 111, 15, 61, 8, 32, 168, 189, 2, 255, 96, 62, 231, 247, 5, 189, 44, 19, 31, 190, 1, 97, 91, 189, 217, 175, 145, 190, 252, 221, 228, 60, 170, 27, 162, 189, 114, 65, 38, 62, 63, 247, 231, 189, 71, 185, 141, 187, 70, 8, 22, 62, 131, 187, 7, 190, 195, 254, 65, 61, 49, 248, 118, 61, 222, 211, 169, 188, 166, 2, 58, 190, 113, 192, 176, 61, 247, 39, 78, 189, 230, 223, 135, 188, 58, 123, 139, 62, 146, 50, 249, 60, 253, 40, 173, 190, 222, 17, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 13, 236, 189, 152, 83, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {116, 162, 174, 190, 174, 2, 189, 190, 166, 105, 133, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 23, 156, 63, 42, 253, 31, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}