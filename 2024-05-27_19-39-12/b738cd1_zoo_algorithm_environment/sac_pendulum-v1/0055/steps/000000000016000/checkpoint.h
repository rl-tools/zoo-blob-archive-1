// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 148, 131, 190, 115, 12, 56, 63, 105, 106, 214, 62, 84, 139, 30, 190, 121, 8, 21, 191, 213, 233, 16, 191, 237, 92, 74, 63, 49, 33, 9, 60, 87, 255, 230, 190, 16, 234, 15, 63, 254, 180, 224, 63, 146, 215, 216, 62, 164, 39, 152, 190, 59, 104, 134, 62, 205, 125, 78, 189, 200, 104, 132, 190, 212, 213, 144, 191, 34, 134, 134, 190, 255, 174, 40, 190, 131, 199, 192, 62, 64, 39, 57, 63, 175, 160, 230, 190, 64, 114, 147, 63, 130, 205, 15, 190, 169, 136, 255, 61, 5, 25, 13, 191, 80, 153, 182, 188, 67, 1, 166, 60, 56, 117, 76, 190, 169, 90, 226, 190, 56, 255, 245, 190, 84, 208, 42, 191, 181, 113, 98, 190, 30, 92, 203, 190, 67, 37, 204, 63, 134, 15, 174, 62, 246, 213, 33, 63, 205, 13, 80, 63, 243, 108, 176, 62, 231, 34, 69, 190, 71, 220, 150, 191, 98, 96, 171, 189, 24, 210, 222, 190, 246, 110, 153, 60, 11, 91, 234, 190, 165, 167, 227, 190, 183, 173, 131, 63, 249, 76, 117, 62, 153, 98, 168, 61, 45, 193, 107, 63, 130, 47, 222, 190, 49, 83, 241, 190, 85, 80, 143, 62, 1, 206, 62, 63, 194, 43, 111, 188, 87, 237, 136, 191, 122, 196, 57, 191, 175, 176, 48, 63, 95, 222, 49, 191, 176, 98, 216, 190, 233, 50, 100, 191, 190, 183, 173, 62, 112, 10, 23, 61, 232, 218, 167, 190, 117, 105, 34, 191, 126, 156, 131, 62, 115, 73, 30, 62, 202, 12, 169, 191, 60, 92, 139, 190, 9, 227, 245, 62, 120, 3, 156, 191, 0, 207, 118, 190, 69, 253, 231, 190, 139, 253, 123, 191, 41, 98, 201, 190, 240, 135, 49, 191, 171, 31, 194, 190, 104, 160, 53, 63, 190, 46, 135, 191, 88, 7, 215, 62, 116, 230, 153, 189, 144, 123, 54, 63, 57, 102, 186, 63, 95, 226, 210, 62, 88, 59, 29, 63, 90, 20, 252, 62, 169, 98, 229, 190, 12, 50, 110, 62, 115, 233, 67, 191, 119, 202, 141, 61, 245, 133, 75, 63, 113, 50, 204, 190, 214, 203, 169, 190, 65, 192, 25, 63, 102, 112, 137, 62, 142, 101, 182, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 138, 238, 190, 1, 140, 73, 190, 23, 234, 43, 191, 27, 119, 98, 61, 159, 250, 157, 62, 97, 157, 226, 189, 75, 144, 93, 189, 140, 159, 186, 190, 38, 95, 133, 62, 13, 165, 35, 190, 188, 101, 17, 63, 73, 165, 30, 190, 47, 173, 58, 191, 187, 210, 62, 62, 109, 212, 238, 190, 218, 252, 230, 62, 71, 93, 137, 61, 9, 109, 190, 190, 87, 252, 201, 188, 200, 105, 55, 60, 24, 214, 16, 190, 0, 120, 160, 62, 37, 124, 14, 63, 161, 220, 23, 62, 77, 238, 37, 191, 79, 204, 2, 191, 42, 24, 219, 62, 143, 168, 1, 63, 128, 154, 38, 191, 71, 126, 15, 63, 206, 51, 99, 191, 83, 142, 131, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 224, 42, 62, 17, 186, 134, 188, 6, 108, 159, 189, 208, 133, 39, 190, 92, 32, 145, 60, 124, 191, 38, 63, 77, 216, 146, 62, 87, 168, 15, 62, 229, 190, 104, 188, 210, 24, 135, 62, 109, 243, 3, 62, 73, 84, 229, 60, 185, 191, 127, 62, 167, 134, 168, 61, 255, 84, 174, 189, 77, 166, 52, 189, 193, 41, 44, 190, 217, 91, 201, 62, 43, 228, 134, 61, 105, 224, 57, 191, 20, 122, 2, 190, 162, 6, 213, 62, 132, 116, 131, 62, 19, 134, 180, 190, 248, 162, 18, 191, 146, 235, 73, 62, 75, 194, 166, 61, 212, 11, 105, 190, 35, 104, 16, 190, 16, 4, 242, 61, 243, 7, 15, 62, 110, 185, 25, 191, 253, 177, 151, 190, 89, 67, 105, 189, 161, 216, 130, 59, 209, 203, 146, 190, 90, 90, 46, 62, 82, 67, 39, 189, 105, 169, 8, 191, 211, 253, 26, 62, 158, 102, 1, 191, 214, 87, 168, 61, 195, 42, 96, 190, 26, 166, 50, 191, 201, 170, 198, 62, 165, 26, 10, 191, 84, 46, 233, 189, 208, 28, 94, 190, 11, 230, 8, 62, 150, 120, 57, 191, 51, 246, 118, 187, 144, 193, 13, 61, 165, 68, 124, 60, 33, 102, 17, 191, 154, 136, 146, 61, 67, 128, 180, 61, 26, 68, 2, 191, 6, 134, 93, 188, 67, 24, 78, 190, 67, 16, 243, 189, 17, 98, 34, 189, 105, 18, 215, 189, 63, 124, 197, 189, 52, 102, 14, 63, 231, 89, 180, 189, 159, 50, 45, 190, 32, 170, 86, 62, 136, 126, 31, 191, 221, 138, 113, 190, 239, 212, 252, 190, 199, 79, 191, 61, 43, 80, 21, 61, 34, 195, 23, 57, 166, 15, 42, 190, 67, 251, 188, 190, 20, 31, 211, 188, 7, 43, 53, 191, 22, 99, 174, 189, 60, 246, 89, 190, 161, 18, 248, 190, 116, 161, 254, 61, 84, 36, 127, 62, 174, 76, 218, 189, 168, 235, 140, 62, 79, 110, 170, 190, 216, 24, 27, 62, 15, 78, 55, 60, 242, 165, 65, 62, 200, 186, 83, 191, 201, 157, 129, 189, 149, 99, 138, 190, 120, 66, 201, 189, 9, 175, 0, 63, 70, 38, 54, 62, 80, 128, 128, 190, 63, 39, 47, 61, 191, 72, 67, 62, 231, 108, 138, 61, 238, 132, 97, 189, 64, 116, 212, 62, 108, 72, 74, 58, 217, 29, 113, 62, 212, 96, 232, 189, 20, 103, 25, 189, 7, 34, 59, 190, 13, 18, 155, 62, 144, 39, 97, 62, 115, 60, 74, 190, 143, 232, 222, 62, 81, 164, 89, 62, 62, 61, 151, 60, 218, 25, 93, 190, 246, 25, 118, 189, 208, 159, 40, 190, 254, 79, 153, 62, 194, 73, 139, 189, 5, 29, 131, 190, 66, 22, 195, 189, 40, 90, 246, 189, 173, 125, 106, 190, 168, 33, 80, 188, 125, 225, 155, 62, 48, 240, 6, 61, 87, 93, 75, 62, 15, 75, 110, 190, 236, 104, 60, 190, 169, 137, 252, 61, 91, 7, 92, 62, 58, 176, 194, 190, 200, 81, 71, 58, 180, 34, 174, 59, 143, 103, 204, 62, 58, 72, 236, 188, 236, 231, 142, 62, 18, 239, 97, 190, 21, 122, 27, 188, 7, 174, 218, 61, 1, 184, 198, 61, 17, 26, 11, 190, 190, 12, 113, 190, 14, 241, 181, 190, 43, 149, 0, 62, 20, 212, 179, 62, 162, 116, 90, 61, 64, 182, 11, 62, 246, 89, 180, 190, 38, 109, 79, 62, 168, 45, 227, 61, 222, 102, 136, 62, 14, 8, 37, 62, 46, 191, 194, 189, 192, 150, 21, 190, 232, 76, 66, 188, 77, 50, 1, 190, 43, 52, 152, 188, 98, 163, 36, 62, 47, 97, 37, 62, 130, 32, 31, 60, 227, 158, 24, 61, 231, 83, 149, 61, 131, 2, 163, 190, 180, 7, 77, 190, 97, 117, 143, 189, 22, 133, 38, 62, 228, 162, 139, 62, 168, 207, 188, 61, 28, 49, 154, 62, 79, 10, 121, 191, 208, 11, 150, 62, 246, 83, 187, 62, 101, 65, 95, 62, 110, 111, 47, 189, 85, 92, 7, 189, 246, 235, 207, 62, 159, 206, 249, 61, 194, 148, 215, 61, 38, 215, 53, 62, 60, 122, 200, 61, 41, 254, 196, 190, 182, 217, 105, 61, 141, 85, 177, 61, 64, 221, 129, 62, 103, 147, 212, 61, 35, 8, 233, 189, 98, 243, 115, 191, 241, 77, 70, 190, 116, 63, 33, 189, 126, 140, 163, 189, 50, 105, 80, 62, 166, 63, 188, 62, 18, 87, 5, 191, 254, 145, 77, 62, 5, 227, 186, 62, 167, 100, 103, 60, 175, 184, 215, 190, 43, 6, 34, 63, 246, 22, 112, 62, 185, 19, 109, 59, 34, 20, 130, 191, 16, 194, 97, 61, 35, 145, 26, 190, 221, 89, 141, 62, 220, 175, 21, 61, 123, 202, 11, 191, 65, 227, 27, 190, 217, 176, 186, 62, 8, 193, 5, 63, 39, 39, 6, 63, 75, 102, 190, 61, 47, 196, 86, 191, 231, 43, 167, 62, 153, 220, 246, 189, 250, 214, 130, 62, 22, 101, 16, 190, 57, 245, 9, 188, 151, 116, 238, 190, 20, 166, 153, 190, 97, 7, 142, 62, 207, 51, 163, 62, 192, 244, 18, 62, 255, 254, 29, 190, 31, 45, 27, 190, 118, 229, 112, 191, 184, 17, 154, 189, 112, 156, 159, 190, 149, 114, 131, 189, 172, 56, 255, 61, 245, 54, 43, 191, 16, 107, 11, 62, 220, 189, 242, 190, 64, 117, 161, 62, 114, 125, 189, 62, 81, 17, 79, 62, 25, 138, 85, 191, 139, 233, 27, 62, 19, 190, 180, 62, 60, 101, 121, 191, 183, 130, 102, 190, 99, 221, 88, 191, 242, 89, 42, 62, 216, 44, 152, 62, 234, 29, 77, 62, 118, 226, 134, 190, 128, 3, 1, 62, 111, 0, 30, 62, 225, 154, 47, 62, 214, 148, 170, 61, 4, 171, 63, 62, 89, 245, 103, 63, 116, 28, 184, 190, 191, 92, 157, 62, 152, 27, 2, 190, 47, 167, 152, 190, 18, 202, 253, 61, 87, 122, 176, 62, 97, 246, 153, 62, 242, 107, 10, 63, 67, 245, 83, 62, 223, 21, 83, 190, 112, 86, 126, 190, 125, 218, 5, 190, 106, 36, 165, 61, 88, 103, 17, 191, 157, 126, 144, 190, 239, 1, 186, 60, 60, 83, 138, 61, 211, 38, 146, 62, 164, 212, 105, 190, 7, 237, 177, 191, 175, 2, 165, 62, 62, 97, 147, 61, 146, 116, 88, 191, 251, 136, 58, 60, 17, 245, 162, 61, 36, 226, 82, 62, 221, 133, 154, 187, 89, 75, 27, 62, 186, 237, 5, 62, 11, 7, 118, 61, 180, 113, 199, 62, 216, 160, 113, 62, 149, 187, 143, 62, 177, 243, 133, 190, 82, 146, 235, 61, 68, 98, 151, 61, 103, 157, 88, 62, 145, 103, 247, 190, 176, 138, 65, 189, 189, 195, 164, 190, 24, 105, 33, 190, 75, 132, 170, 62, 40, 247, 55, 191, 178, 253, 89, 189, 66, 25, 19, 191, 35, 117, 204, 62, 143, 20, 186, 59, 223, 32, 243, 189, 252, 36, 192, 190, 48, 52, 62, 190, 73, 130, 42, 63, 192, 47, 48, 191, 217, 212, 220, 190, 164, 8, 198, 190, 9, 143, 198, 187, 172, 138, 187, 188, 212, 139, 198, 62, 127, 32, 205, 189, 150, 185, 113, 62, 227, 14, 123, 62, 106, 204, 130, 62, 54, 170, 174, 189, 30, 250, 155, 62, 3, 70, 21, 191, 229, 210, 134, 190, 234, 77, 137, 62, 124, 151, 66, 190, 214, 153, 216, 62, 23, 219, 215, 61, 221, 50, 57, 62, 53, 177, 96, 62, 184, 70, 151, 190, 204, 236, 24, 62, 158, 78, 216, 189, 60, 131, 254, 61, 109, 161, 25, 62, 92, 167, 215, 62, 209, 138, 202, 190, 107, 199, 53, 62, 179, 31, 54, 191, 111, 56, 103, 62, 75, 222, 108, 62, 23, 105, 54, 190, 183, 183, 18, 63, 2, 58, 30, 190, 16, 105, 168, 62, 225, 224, 15, 189, 170, 148, 16, 190, 75, 22, 26, 191, 238, 141, 38, 62, 78, 98, 73, 190, 132, 145, 195, 61, 75, 158, 155, 62, 147, 133, 6, 61, 181, 61, 196, 62, 230, 18, 154, 62, 93, 234, 42, 191, 109, 136, 232, 189, 46, 249, 12, 62, 142, 138, 147, 190, 213, 153, 237, 190, 189, 205, 134, 189, 207, 59, 175, 62, 80, 184, 176, 189, 215, 126, 79, 61, 236, 20, 6, 191, 88, 206, 138, 62, 190, 244, 137, 60, 228, 87, 104, 62, 211, 92, 58, 191, 217, 182, 131, 190, 88, 106, 143, 189, 20, 28, 166, 62, 90, 144, 26, 62, 203, 215, 174, 191, 94, 29, 163, 190, 254, 215, 240, 61, 220, 76, 223, 62, 87, 54, 7, 63, 62, 13, 58, 189, 141, 229, 141, 191, 240, 103, 145, 62, 242, 104, 91, 190, 23, 13, 169, 189, 241, 36, 63, 62, 186, 170, 29, 190, 98, 188, 3, 191, 165, 156, 189, 190, 202, 150, 8, 62, 15, 4, 208, 60, 104, 101, 208, 60, 118, 131, 70, 189, 137, 57, 14, 190, 89, 13, 141, 191, 153, 212, 168, 62, 198, 57, 201, 61, 140, 233, 50, 190, 143, 252, 73, 62, 28, 0, 184, 190, 28, 39, 218, 188, 22, 35, 8, 191, 205, 243, 45, 62, 242, 78, 193, 61, 96, 121, 133, 61, 147, 131, 241, 190, 7, 230, 65, 190, 227, 113, 165, 62, 127, 127, 68, 190, 102, 60, 16, 190, 133, 133, 241, 187, 67, 172, 168, 188, 179, 100, 184, 62, 4, 105, 70, 61, 170, 186, 7, 190, 176, 237, 133, 62, 206, 135, 142, 190, 79, 187, 197, 61, 4, 243, 101, 189, 167, 185, 136, 62, 4, 113, 33, 191, 170, 35, 241, 61, 173, 115, 115, 190, 75, 5, 216, 189, 235, 193, 136, 62, 124, 65, 42, 62, 57, 188, 154, 190, 52, 123, 100, 189, 206, 158, 35, 190, 235, 5, 159, 189, 112, 169, 105, 62, 80, 89, 191, 190, 202, 24, 167, 61, 9, 7, 2, 191, 193, 93, 87, 62, 123, 165, 25, 62, 31, 116, 4, 62, 144, 84, 97, 191, 220, 195, 133, 61, 37, 210, 147, 62, 24, 207, 112, 191, 160, 136, 33, 62, 6, 67, 202, 190, 157, 156, 194, 61, 180, 228, 218, 188, 190, 120, 154, 62, 16, 81, 170, 190, 12, 184, 39, 62, 88, 101, 25, 62, 8, 118, 37, 189, 113, 222, 57, 62, 234, 219, 133, 61, 58, 103, 78, 63, 22, 216, 18, 190, 132, 70, 175, 62, 73, 187, 2, 190, 240, 46, 42, 190, 171, 200, 60, 62, 90, 129, 110, 190, 70, 16, 104, 62, 78, 104, 106, 188, 123, 126, 185, 189, 149, 175, 195, 187, 252, 55, 186, 189, 58, 75, 159, 61, 153, 158, 186, 60, 109, 120, 163, 188, 195, 222, 22, 62, 104, 50, 145, 189, 31, 61, 46, 188, 190, 243, 222, 189, 175, 72, 218, 60, 170, 245, 36, 62, 74, 232, 79, 189, 141, 63, 42, 190, 158, 147, 41, 190, 127, 253, 148, 189, 45, 20, 154, 188, 91, 43, 7, 62, 106, 223, 22, 190, 10, 140, 190, 60, 111, 193, 104, 61, 176, 243, 156, 60, 189, 4, 183, 61, 183, 243, 22, 190, 39, 13, 195, 189, 201, 234, 39, 190, 51, 214, 17, 189, 179, 134, 185, 189, 15, 94, 13, 190, 140, 19, 143, 61, 197, 245, 11, 62, 92, 98, 25, 190, 41, 23, 49, 62, 132, 221, 185, 190, 54, 209, 129, 185, 143, 5, 248, 189, 46, 100, 243, 189, 227, 206, 236, 60, 114, 113, 48, 62, 226, 86, 77, 191, 45, 175, 120, 61, 7, 175, 169, 191, 163, 66, 154, 190, 210, 209, 115, 62, 55, 245, 179, 190, 122, 194, 138, 62, 37, 57, 90, 189, 198, 77, 135, 62, 238, 57, 217, 60, 145, 207, 23, 190, 248, 219, 233, 190, 90, 227, 112, 62, 31, 124, 143, 190, 117, 121, 251, 190, 79, 205, 170, 190, 151, 68, 11, 190, 196, 25, 169, 61, 102, 138, 125, 62, 33, 143, 144, 188, 15, 179, 244, 190, 29, 195, 136, 191, 69, 10, 27, 190, 217, 221, 208, 191, 128, 235, 223, 190, 54, 116, 48, 190, 124, 147, 174, 62, 246, 105, 72, 191, 30, 255, 161, 61, 253, 207, 10, 191, 75, 71, 95, 62, 216, 245, 49, 190, 156, 96, 91, 62, 129, 152, 132, 190, 52, 71, 15, 190, 220, 21, 177, 62, 207, 107, 96, 191, 172, 73, 0, 190, 90, 183, 173, 190, 2, 14, 113, 190, 117, 99, 140, 62, 200, 227, 171, 62, 164, 36, 106, 190, 15, 175, 62, 62, 128, 187, 144, 62, 232, 191, 0, 63, 106, 254, 80, 189, 168, 86, 161, 61, 250, 193, 147, 190, 246, 69, 215, 190, 32, 160, 251, 189, 113, 39, 145, 190, 152, 161, 156, 62, 39, 34, 196, 61, 225, 163, 170, 61, 74, 43, 188, 62, 204, 76, 12, 190, 113, 176, 106, 190, 78, 173, 202, 60, 241, 90, 237, 190, 115, 116, 168, 61, 54, 3, 28, 190, 119, 186, 92, 62, 191, 131, 8, 62, 204, 23, 237, 188, 116, 24, 95, 190, 238, 107, 192, 189, 238, 17, 227, 62, 220, 206, 0, 191, 66, 118, 108, 190, 43, 74, 133, 189, 85, 181, 218, 61, 12, 48, 151, 61, 78, 162, 111, 62, 104, 78, 6, 61, 7, 234, 85, 62, 240, 225, 40, 62, 122, 12, 13, 61, 169, 206, 66, 62, 74, 54, 167, 62, 159, 217, 85, 61, 240, 119, 107, 190, 193, 146, 109, 61, 168, 101, 194, 61, 115, 117, 124, 60, 249, 127, 184, 189, 26, 224, 197, 190, 51, 195, 209, 60, 244, 76, 139, 190, 5, 3, 16, 189, 191, 118, 31, 190, 42, 92, 208, 190, 206, 224, 244, 60, 255, 103, 24, 189, 127, 170, 231, 62, 208, 199, 127, 62, 182, 0, 169, 61, 239, 128, 56, 189, 73, 56, 4, 62, 54, 34, 212, 62, 192, 196, 49, 191, 220, 114, 192, 189, 117, 34, 172, 190, 90, 237, 37, 190, 177, 160, 250, 61, 238, 189, 20, 63, 238, 132, 114, 189, 126, 132, 177, 61, 11, 86, 135, 62, 173, 246, 248, 61, 233, 65, 130, 62, 73, 224, 45, 62, 227, 142, 222, 187, 168, 171, 157, 190, 55, 96, 22, 61, 84, 245, 153, 190, 250, 53, 144, 61, 66, 167, 179, 61, 8, 30, 248, 190, 158, 56, 89, 62, 116, 28, 97, 188, 162, 119, 179, 190, 35, 136, 38, 190, 182, 110, 122, 190, 142, 1, 23, 190, 9, 1, 6, 191, 124, 63, 205, 62, 220, 255, 10, 190, 240, 42, 134, 62, 14, 42, 162, 190, 111, 157, 98, 189, 165, 86, 241, 61, 17, 153, 223, 62, 41, 204, 22, 189, 59, 57, 117, 190, 195, 250, 53, 190, 19, 113, 239, 190, 74, 62, 75, 62, 139, 160, 16, 191, 79, 28, 210, 190, 195, 30, 52, 190, 146, 204, 68, 62, 22, 255, 144, 61, 163, 170, 34, 190, 169, 216, 87, 191, 54, 175, 51, 62, 169, 94, 55, 190, 20, 251, 239, 189, 112, 223, 56, 190, 233, 211, 179, 61, 233, 187, 101, 189, 17, 3, 110, 188, 65, 121, 26, 190, 153, 251, 146, 190, 29, 236, 228, 61, 188, 164, 137, 190, 9, 96, 154, 61, 237, 26, 61, 191, 229, 214, 234, 61, 53, 10, 190, 62, 51, 68, 179, 60, 34, 217, 49, 191, 202, 122, 151, 61, 106, 200, 207, 62, 142, 166, 20, 191, 52, 83, 148, 190, 175, 181, 150, 59, 37, 39, 88, 62, 7, 160, 129, 62, 33, 74, 138, 62, 21, 222, 4, 191, 199, 246, 238, 61, 208, 172, 242, 61, 70, 23, 96, 189, 184, 33, 193, 188, 233, 100, 163, 62, 129, 88, 4, 191, 82, 88, 159, 61, 203, 38, 114, 62, 175, 220, 223, 186, 48, 180, 186, 190, 87, 136, 161, 189, 214, 247, 55, 190, 25, 56, 124, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 224, 252, 0, 191, 210, 78, 132, 62, 222, 73, 145, 60, 172, 186, 23, 191, 15, 99, 134, 190, 204, 142, 60, 62, 36, 72, 72, 191, 183, 151, 209, 190, 35, 82, 184, 62, 155, 89, 191, 61, 252, 186, 53, 62, 218, 148, 183, 191, 172, 236, 135, 188, 132, 136, 229, 62, 160, 199, 91, 62, 49, 101, 86, 189, 223, 182, 134, 190, 182, 113, 154, 190, 62, 70, 169, 62, 132, 48, 128, 62, 88, 83, 198, 190, 84, 114, 144, 62, 39, 122, 195, 62, 237, 203, 242, 189, 152, 70, 1, 190, 9, 99, 138, 63, 72, 250, 12, 190, 38, 190, 2, 192, 246, 119, 53, 60, 233, 101, 202, 62, 60, 109, 245, 62, 193, 86, 34, 191, 205, 98, 138, 189, 160, 255, 61, 62, 60, 7, 90, 190, 220, 216, 29, 63, 107, 190, 228, 188, 41, 174, 67, 62, 253, 236, 187, 189, 158, 158, 57, 190, 175, 44, 13, 190, 97, 59, 145, 62, 232, 29, 149, 190, 44, 183, 29, 191, 241, 33, 159, 62, 250, 130, 129, 62, 32, 210, 189, 62, 128, 39, 46, 190, 245, 106, 30, 190, 78, 95, 156, 190, 148, 52, 44, 62, 105, 5, 107, 190, 114, 169, 150, 190, 91, 215, 171, 62, 183, 96, 36, 190, 134, 228, 249, 190, 225, 82, 142, 190, 201, 86, 155, 62, 81, 89, 140, 190, 96, 49, 150, 62, 111, 48, 215, 189, 167, 63, 172, 60, 239, 25, 16, 191, 192, 173, 233, 60, 230, 113, 115, 188, 75, 255, 16, 190, 204, 93, 141, 61, 74, 47, 160, 59, 115, 207, 44, 62, 54, 159, 197, 189, 144, 216, 60, 61, 145, 153, 123, 61, 207, 7, 110, 190, 2, 225, 81, 190, 42, 1, 11, 62, 142, 194, 194, 62, 218, 93, 223, 190, 253, 175, 51, 190, 56, 164, 166, 61, 17, 197, 233, 60, 75, 39, 147, 62, 70, 94, 61, 62, 190, 47, 25, 190, 156, 130, 53, 60, 154, 155, 1, 62, 46, 194, 218, 61, 47, 81, 186, 61, 159, 44, 50, 190, 113, 42, 221, 189, 29, 251, 189, 189, 246, 182, 204, 189, 49, 130, 104, 61, 154, 109, 213, 189, 233, 36, 34, 59, 21, 165, 141, 190, 52, 233, 181, 61, 78, 11, 29, 61, 14, 63, 114, 62, 79, 127, 4, 189, 214, 24, 214, 62, 202, 128, 8, 60, 43, 59, 2, 61, 64, 254, 110, 190, 39, 138, 250, 58, 95, 7, 55, 190, 133, 215, 110, 62, 11, 241, 10, 190, 25, 196, 64, 191, 230, 113, 242, 62, 190, 254, 37, 59, 101, 217, 139, 62, 135, 200, 164, 61, 69, 65, 52, 190, 96, 226, 26, 191, 138, 60, 18, 62, 93, 212, 178, 190, 61, 145, 138, 190, 233, 234, 138, 62, 97, 211, 21, 189, 101, 116, 170, 190, 89, 98, 10, 60, 81, 145, 150, 62, 21, 51, 44, 190, 181, 27, 166, 62, 238, 101, 216, 189, 38, 122, 107, 190, 87, 134, 21, 191, 173, 227, 9, 62, 116, 253, 0, 190, 70, 67, 63, 190, 200, 205, 170, 60, 124, 83, 136, 190, 97, 9, 108, 62, 189, 253, 98, 190, 220, 49, 238, 61, 57, 216, 138, 188, 25, 139, 71, 190, 34, 135, 83, 190, 247, 241, 122, 190, 15, 219, 87, 190, 6, 202, 21, 191, 93, 33, 157, 60, 79, 127, 129, 190, 75, 12, 119, 190, 164, 152, 209, 62, 160, 0, 66, 62, 183, 247, 157, 60, 164, 116, 152, 189, 79, 56, 82, 59, 71, 88, 169, 61, 20, 148, 43, 62, 71, 205, 105, 62, 34, 39, 144, 190, 16, 124, 38, 62, 91, 36, 222, 188, 157, 131, 199, 188, 175, 113, 28, 62, 249, 42, 20, 190, 146, 212, 124, 190, 238, 227, 27, 62, 109, 174, 40, 191, 90, 247, 122, 188, 83, 119, 97, 187, 166, 232, 229, 62, 184, 91, 148, 62, 182, 234, 144, 190, 247, 215, 251, 188, 31, 162, 131, 62, 80, 50, 109, 189, 63, 140, 14, 61, 102, 3, 212, 189, 172, 217, 187, 189, 85, 175, 68, 190, 245, 156, 81, 190, 0, 13, 136, 61, 190, 175, 25, 62, 147, 127, 139, 62, 15, 250, 211, 61, 241, 150, 131, 190, 92, 255, 39, 189, 251, 199, 42, 62, 221, 116, 237, 61, 52, 178, 103, 190, 196, 137, 244, 190, 58, 46, 26, 62, 97, 71, 115, 190, 73, 219, 201, 187, 116, 107, 69, 62, 97, 223, 246, 60, 203, 137, 64, 189, 68, 183, 41, 191, 89, 156, 233, 61, 69, 13, 204, 190, 179, 254, 212, 190, 146, 28, 165, 60, 72, 207, 22, 191, 151, 158, 0, 62, 207, 206, 9, 191, 228, 112, 139, 62, 190, 33, 195, 62, 196, 83, 104, 188, 7, 108, 21, 191, 206, 247, 174, 190, 157, 226, 50, 63, 46, 110, 108, 191, 157, 38, 62, 190, 248, 61, 185, 190, 12, 83, 33, 62, 48, 153, 75, 190, 176, 129, 223, 62, 41, 5, 230, 190, 150, 189, 86, 62, 214, 35, 183, 62, 145, 7, 206, 62, 253, 201, 243, 61, 57, 235, 253, 62, 245, 88, 2, 191, 74, 241, 223, 190, 53, 115, 107, 62, 58, 226, 180, 190, 165, 167, 100, 62, 30, 253, 172, 61, 55, 180, 55, 61, 84, 143, 37, 62, 215, 217, 68, 61, 153, 117, 6, 62, 29, 86, 197, 60, 31, 30, 182, 190, 193, 84, 135, 190, 241, 108, 8, 189, 87, 20, 31, 190, 91, 78, 136, 190, 172, 144, 129, 62, 142, 128, 160, 188, 149, 20, 127, 62, 113, 100, 123, 190, 181, 38, 141, 191, 248, 223, 125, 62, 31, 1, 193, 60, 20, 219, 115, 191, 76, 156, 161, 61, 172, 110, 215, 60, 41, 35, 82, 62, 22, 143, 19, 62, 156, 141, 168, 62, 148, 255, 91, 62, 24, 233, 197, 62, 210, 220, 230, 61, 229, 120, 69, 62, 52, 127, 251, 61, 17, 224, 190, 190, 4, 33, 175, 189, 95, 191, 51, 62, 213, 85, 252, 61, 21, 129, 44, 190, 1, 158, 191, 188, 112, 159, 248, 189, 87, 61, 194, 61, 46, 111, 73, 61, 139, 200, 171, 189, 128, 170, 11, 62, 120, 30, 70, 61, 113, 119, 239, 190, 29, 172, 9, 190, 118, 241, 137, 61, 28, 161, 228, 189, 104, 159, 4, 190, 237, 118, 76, 191, 166, 248, 11, 191, 244, 192, 243, 189, 114, 41, 212, 190, 76, 228, 173, 190, 172, 236, 242, 61, 125, 66, 154, 190, 113, 75, 78, 190, 219, 180, 117, 62, 232, 118, 60, 190, 145, 46, 147, 190, 105, 162, 23, 61, 26, 8, 232, 189, 230, 124, 132, 190, 155, 29, 27, 190, 129, 13, 188, 190, 217, 223, 56, 62, 159, 150, 58, 62, 112, 198, 12, 62, 181, 236, 13, 191, 50, 136, 199, 62, 189, 193, 17, 190, 81, 198, 231, 188, 46, 107, 43, 190, 72, 159, 7, 190, 90, 122, 131, 62, 234, 94, 69, 62, 203, 180, 154, 62, 230, 194, 129, 62, 201, 213, 160, 190, 55, 192, 193, 61, 44, 45, 147, 62, 193, 10, 54, 62, 68, 211, 55, 61, 80, 139, 184, 189, 242, 247, 92, 62, 100, 253, 199, 62, 81, 89, 206, 188, 169, 97, 156, 62, 197, 95, 142, 189, 122, 166, 231, 59, 224, 157, 25, 63, 22, 231, 38, 61, 112, 187, 175, 189, 19, 111, 191, 61, 103, 247, 184, 62, 0, 231, 49, 188, 47, 199, 137, 62, 152, 225, 192, 190, 14, 158, 17, 61, 206, 191, 37, 190, 254, 226, 197, 60, 210, 68, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 108, 186, 189, 64, 18, 108, 62, 113, 58, 31, 189, 58, 208, 152, 190, 213, 0, 149, 62, 14, 9, 11, 62, 2, 28, 189, 61, 151, 163, 18, 62, 131, 238, 158, 61, 146, 8, 41, 189, 128, 177, 197, 189, 56, 114, 172, 62, 168, 107, 120, 61, 99, 52, 45, 62, 181, 196, 93, 188, 1, 40, 34, 189, 171, 177, 84, 59, 220, 102, 46, 60, 164, 212, 152, 62, 241, 246, 195, 189, 65, 33, 60, 188, 217, 106, 197, 189, 203, 35, 130, 190, 217, 41, 216, 61, 86, 39, 156, 62, 136, 244, 248, 61, 104, 37, 24, 62, 116, 229, 43, 189, 16, 152, 228, 189, 240, 163, 7, 61, 63, 14, 91, 62, 101, 62, 102, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 189, 186, 190, 44, 190, 155, 62, 69, 204, 224, 62, 73, 29, 225, 62, 134, 61, 88, 190, 139, 45, 244, 190, 121, 209, 101, 191, 188, 160, 78, 63, 14, 116, 161, 62, 93, 177, 24, 63, 203, 237, 238, 62, 132, 81, 53, 191, 160, 204, 58, 62, 114, 26, 183, 62, 243, 12, 244, 60, 53, 234, 80, 191, 76, 244, 71, 63, 195, 54, 20, 62, 46, 157, 153, 62, 104, 123, 160, 190, 151, 193, 78, 62, 215, 179, 138, 61, 101, 252, 120, 191, 106, 87, 14, 191, 233, 48, 19, 61, 111, 17, 3, 191, 219, 97, 210, 60, 5, 251, 207, 190, 253, 27, 73, 63, 168, 19, 157, 62, 48, 150, 198, 188, 4, 201, 58, 62, 236, 163, 255, 188, 161, 39, 88, 190, 58, 43, 142, 190, 232, 221, 136, 61, 7, 206, 138, 190, 205, 214, 131, 190, 115, 191, 101, 62, 30, 226, 195, 61, 211, 66, 171, 189, 234, 68, 182, 62, 43, 184, 116, 189, 104, 19, 74, 189, 211, 111, 89, 190, 77, 241, 149, 190, 118, 71, 132, 61, 20, 77, 233, 59, 214, 143, 34, 62, 180, 80, 23, 190, 221, 133, 136, 188, 18, 249, 212, 61, 191, 96, 227, 189, 195, 254, 65, 61, 54, 112, 65, 62, 155, 10, 8, 61, 171, 211, 106, 190, 123, 140, 72, 62, 9, 77, 183, 190, 98, 245, 146, 61, 241, 88, 183, 62, 60, 242, 109, 188, 14, 163, 240, 190, 185, 249, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 47, 226, 189, 19, 139, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 142, 132, 63, 98, 248, 157, 190, 247, 121, 164, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 77, 8, 64, 196, 79, 214, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}