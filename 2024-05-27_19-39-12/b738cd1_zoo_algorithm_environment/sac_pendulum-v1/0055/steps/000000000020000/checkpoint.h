// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 173, 96, 190, 24, 198, 50, 63, 5, 64, 234, 62, 52, 66, 111, 190, 99, 155, 66, 191, 199, 67, 240, 190, 246, 131, 71, 63, 163, 189, 16, 62, 96, 145, 226, 190, 246, 187, 20, 63, 204, 42, 223, 63, 222, 76, 234, 62, 26, 65, 169, 190, 20, 199, 165, 62, 78, 73, 0, 189, 106, 186, 159, 190, 131, 6, 160, 191, 121, 253, 85, 190, 250, 79, 50, 190, 144, 132, 168, 62, 243, 29, 63, 63, 105, 195, 59, 191, 65, 109, 169, 63, 69, 238, 15, 190, 159, 241, 96, 62, 188, 244, 23, 191, 211, 169, 24, 60, 217, 212, 86, 60, 172, 61, 71, 190, 114, 183, 201, 190, 223, 108, 240, 190, 105, 152, 87, 191, 224, 83, 14, 190, 140, 214, 229, 190, 137, 123, 218, 63, 50, 49, 182, 62, 96, 56, 44, 63, 107, 94, 81, 63, 66, 214, 176, 62, 67, 157, 98, 190, 247, 130, 157, 191, 152, 199, 4, 190, 106, 72, 220, 190, 220, 136, 209, 189, 48, 18, 225, 190, 126, 129, 233, 190, 10, 57, 133, 63, 49, 212, 128, 62, 226, 133, 155, 61, 202, 7, 143, 63, 31, 141, 224, 190, 227, 24, 182, 190, 217, 6, 133, 62, 134, 186, 65, 63, 171, 240, 6, 190, 111, 186, 146, 191, 200, 159, 42, 191, 21, 12, 35, 63, 48, 65, 59, 191, 130, 48, 220, 190, 164, 195, 103, 191, 157, 189, 229, 61, 232, 159, 237, 61, 46, 109, 156, 190, 223, 224, 55, 191, 80, 3, 152, 62, 215, 74, 6, 62, 29, 179, 193, 191, 224, 185, 90, 190, 48, 211, 225, 62, 138, 78, 165, 191, 229, 4, 128, 190, 65, 253, 181, 190, 144, 65, 151, 191, 145, 98, 153, 190, 95, 57, 22, 191, 55, 196, 164, 190, 234, 37, 50, 63, 192, 195, 140, 191, 96, 167, 237, 62, 161, 111, 214, 189, 152, 211, 64, 63, 132, 15, 189, 63, 246, 170, 157, 62, 174, 111, 216, 62, 88, 251, 66, 63, 121, 58, 225, 190, 232, 89, 148, 62, 10, 253, 61, 191, 86, 140, 58, 61, 54, 69, 103, 63, 218, 201, 215, 190, 87, 59, 180, 190, 58, 55, 11, 63, 173, 89, 64, 62, 150, 128, 253, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 36, 206, 190, 136, 211, 162, 190, 127, 27, 44, 191, 70, 165, 128, 61, 31, 193, 142, 62, 255, 59, 141, 190, 200, 140, 226, 186, 221, 199, 191, 190, 109, 1, 123, 62, 120, 7, 68, 190, 143, 109, 13, 63, 90, 9, 180, 189, 92, 131, 66, 191, 17, 196, 61, 62, 197, 102, 196, 190, 88, 147, 1, 63, 39, 110, 176, 61, 207, 122, 187, 190, 132, 90, 175, 189, 101, 236, 135, 188, 216, 220, 20, 189, 69, 42, 134, 62, 54, 73, 0, 63, 110, 68, 19, 62, 25, 244, 71, 191, 61, 215, 3, 191, 141, 147, 199, 62, 94, 6, 16, 63, 127, 0, 50, 191, 123, 44, 1, 63, 82, 77, 110, 191, 245, 186, 141, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 125, 39, 62, 101, 208, 46, 190, 181, 105, 206, 189, 250, 173, 1, 190, 142, 41, 253, 61, 178, 84, 243, 62, 21, 180, 154, 62, 152, 165, 158, 62, 197, 123, 130, 188, 183, 52, 176, 61, 225, 57, 108, 61, 164, 170, 36, 61, 162, 195, 142, 62, 241, 46, 197, 187, 227, 121, 44, 61, 230, 29, 153, 60, 98, 163, 171, 190, 194, 0, 205, 62, 251, 64, 63, 189, 239, 113, 74, 191, 210, 15, 34, 188, 144, 106, 212, 62, 39, 228, 47, 62, 174, 57, 218, 190, 64, 10, 75, 191, 132, 9, 55, 62, 228, 222, 65, 62, 31, 62, 40, 190, 0, 94, 50, 190, 218, 185, 5, 62, 226, 156, 6, 62, 188, 197, 235, 190, 253, 177, 151, 190, 92, 191, 212, 188, 131, 61, 143, 60, 16, 75, 189, 190, 75, 4, 114, 62, 129, 6, 183, 190, 158, 184, 8, 191, 240, 166, 169, 62, 49, 76, 22, 191, 22, 148, 3, 62, 120, 195, 118, 190, 54, 168, 39, 191, 54, 151, 197, 62, 155, 61, 139, 191, 236, 52, 47, 189, 213, 87, 251, 190, 45, 84, 63, 62, 150, 120, 57, 191, 168, 189, 47, 60, 35, 146, 4, 188, 48, 86, 135, 61, 108, 213, 22, 191, 166, 183, 132, 188, 137, 138, 131, 188, 186, 230, 34, 191, 6, 134, 93, 188, 76, 213, 140, 189, 70, 85, 59, 190, 232, 84, 6, 60, 38, 18, 31, 190, 45, 199, 196, 189, 134, 235, 9, 63, 13, 74, 233, 189, 204, 24, 28, 190, 119, 55, 69, 62, 89, 14, 51, 191, 164, 79, 246, 189, 38, 74, 80, 191, 129, 212, 159, 61, 221, 172, 174, 62, 92, 252, 138, 189, 59, 148, 6, 190, 61, 73, 194, 190, 111, 197, 202, 188, 141, 115, 53, 191, 170, 184, 179, 190, 78, 85, 252, 189, 58, 120, 30, 191, 120, 193, 60, 62, 46, 128, 105, 62, 245, 116, 221, 189, 190, 88, 80, 62, 208, 51, 168, 190, 250, 226, 25, 62, 121, 33, 178, 189, 37, 101, 107, 61, 148, 186, 116, 191, 47, 64, 164, 189, 23, 158, 208, 60, 2, 49, 5, 190, 18, 222, 10, 63, 117, 164, 21, 62, 234, 171, 168, 190, 218, 199, 146, 61, 47, 226, 92, 62, 111, 165, 175, 61, 141, 216, 164, 189, 167, 229, 241, 62, 135, 46, 153, 60, 83, 100, 154, 62, 228, 60, 13, 190, 54, 105, 111, 61, 65, 7, 113, 190, 13, 66, 155, 62, 78, 11, 130, 62, 6, 105, 74, 189, 56, 226, 247, 62, 6, 179, 153, 62, 28, 83, 13, 61, 96, 232, 40, 190, 239, 52, 154, 189, 119, 165, 72, 190, 196, 205, 158, 62, 37, 42, 217, 189, 215, 184, 112, 190, 163, 234, 151, 189, 88, 159, 202, 189, 37, 188, 115, 190, 130, 136, 2, 61, 247, 177, 128, 62, 231, 215, 167, 61, 2, 13, 75, 62, 151, 78, 129, 190, 54, 217, 160, 190, 88, 149, 11, 62, 50, 73, 103, 61, 119, 54, 233, 190, 1, 92, 14, 188, 41, 159, 228, 187, 135, 159, 196, 62, 198, 89, 231, 187, 228, 121, 145, 62, 185, 103, 138, 190, 159, 216, 199, 189, 177, 10, 32, 62, 172, 162, 187, 61, 159, 172, 197, 189, 237, 133, 221, 190, 64, 78, 180, 190, 106, 57, 27, 62, 208, 17, 167, 62, 132, 54, 202, 61, 216, 112, 4, 62, 19, 63, 156, 190, 65, 188, 78, 62, 15, 162, 253, 61, 24, 169, 143, 62, 165, 27, 151, 62, 235, 180, 143, 189, 174, 56, 245, 189, 192, 255, 63, 189, 127, 207, 198, 189, 15, 237, 24, 189, 43, 83, 25, 62, 173, 224, 54, 62, 0, 55, 114, 61, 170, 42, 156, 188, 126, 110, 160, 61, 108, 31, 172, 190, 67, 44, 76, 190, 41, 209, 15, 190, 167, 6, 44, 62, 203, 209, 157, 62, 63, 17, 166, 61, 139, 14, 143, 62, 56, 184, 100, 191, 196, 160, 150, 62, 232, 12, 204, 62, 47, 54, 74, 62, 61, 238, 216, 189, 179, 123, 157, 188, 4, 196, 196, 62, 237, 130, 32, 62, 9, 125, 15, 62, 41, 114, 5, 62, 209, 168, 191, 61, 133, 89, 215, 190, 163, 30, 76, 61, 250, 135, 37, 62, 48, 54, 138, 62, 174, 89, 153, 61, 225, 101, 10, 190, 42, 74, 122, 191, 243, 168, 84, 190, 243, 216, 135, 189, 207, 223, 169, 189, 155, 10, 174, 62, 188, 8, 188, 62, 57, 236, 78, 191, 19, 241, 85, 62, 166, 219, 64, 62, 221, 207, 174, 60, 159, 214, 209, 190, 187, 244, 28, 63, 179, 22, 126, 62, 109, 98, 146, 61, 104, 105, 152, 191, 32, 117, 251, 188, 172, 246, 62, 190, 30, 232, 143, 62, 39, 90, 91, 61, 156, 158, 97, 191, 28, 13, 99, 190, 95, 141, 202, 62, 120, 32, 7, 63, 13, 122, 7, 63, 96, 216, 178, 61, 158, 44, 141, 191, 149, 86, 172, 62, 192, 112, 215, 189, 18, 251, 142, 62, 234, 207, 189, 190, 95, 118, 22, 189, 65, 167, 254, 190, 254, 190, 99, 190, 188, 154, 223, 188, 167, 191, 165, 62, 23, 216, 49, 62, 129, 200, 45, 190, 120, 176, 37, 190, 47, 37, 132, 191, 72, 254, 74, 189, 106, 42, 181, 190, 76, 117, 64, 189, 128, 34, 118, 62, 168, 93, 47, 191, 139, 110, 149, 61, 143, 235, 210, 190, 246, 34, 160, 62, 142, 13, 247, 62, 142, 101, 92, 62, 118, 206, 72, 191, 204, 49, 49, 62, 169, 164, 186, 62, 68, 57, 146, 191, 41, 31, 43, 190, 37, 158, 95, 191, 42, 174, 156, 61, 213, 130, 201, 62, 211, 224, 51, 62, 44, 208, 86, 190, 117, 111, 19, 62, 104, 25, 242, 60, 143, 230, 26, 62, 100, 186, 231, 61, 1, 230, 93, 62, 112, 96, 115, 63, 229, 204, 180, 190, 136, 241, 95, 62, 141, 177, 248, 189, 234, 32, 157, 190, 192, 205, 11, 62, 117, 113, 43, 63, 159, 57, 150, 62, 91, 237, 28, 63, 33, 48, 78, 62, 64, 230, 72, 190, 103, 252, 133, 190, 161, 22, 8, 190, 77, 164, 162, 61, 215, 75, 249, 190, 85, 174, 35, 190, 180, 63, 180, 60, 171, 176, 145, 61, 80, 241, 152, 62, 200, 183, 172, 189, 142, 231, 184, 191, 19, 21, 188, 62, 254, 121, 156, 61, 26, 72, 117, 191, 75, 145, 23, 61, 106, 20, 18, 62, 117, 73, 85, 62, 88, 249, 54, 188, 241, 28, 36, 62, 124, 184, 52, 62, 27, 37, 136, 61, 15, 13, 193, 62, 200, 40, 106, 62, 252, 63, 188, 62, 80, 190, 106, 190, 44, 6, 247, 61, 126, 165, 112, 61, 192, 111, 90, 62, 161, 40, 2, 191, 106, 20, 85, 189, 54, 164, 191, 190, 7, 82, 20, 190, 146, 171, 167, 62, 197, 51, 79, 191, 130, 120, 149, 61, 123, 124, 116, 191, 4, 136, 169, 62, 221, 124, 156, 62, 63, 230, 138, 190, 122, 152, 176, 190, 250, 234, 116, 190, 178, 149, 40, 63, 153, 33, 84, 191, 211, 105, 51, 191, 152, 237, 156, 190, 116, 40, 187, 189, 126, 164, 118, 61, 4, 88, 164, 62, 237, 120, 214, 189, 165, 165, 55, 62, 69, 169, 62, 62, 249, 133, 61, 62, 223, 136, 90, 190, 43, 91, 8, 62, 174, 228, 59, 191, 54, 201, 163, 190, 246, 148, 3, 63, 48, 179, 126, 190, 177, 233, 238, 62, 146, 187, 38, 188, 189, 199, 228, 61, 180, 88, 10, 62, 76, 119, 247, 190, 144, 104, 33, 62, 145, 5, 245, 189, 24, 153, 98, 62, 39, 216, 35, 62, 123, 197, 220, 62, 75, 187, 6, 191, 7, 20, 155, 62, 120, 143, 71, 191, 133, 68, 111, 62, 66, 249, 104, 62, 110, 55, 217, 60, 32, 44, 241, 62, 198, 230, 20, 190, 225, 197, 179, 62, 170, 119, 2, 190, 113, 40, 4, 190, 95, 171, 71, 191, 91, 201, 36, 62, 75, 56, 114, 190, 246, 186, 183, 61, 255, 119, 169, 62, 218, 154, 236, 58, 71, 19, 167, 62, 93, 31, 166, 62, 93, 233, 170, 190, 34, 103, 162, 189, 60, 114, 77, 62, 10, 38, 148, 190, 225, 129, 20, 191, 170, 145, 146, 189, 195, 166, 151, 62, 195, 178, 180, 189, 228, 172, 149, 188, 4, 15, 20, 191, 227, 203, 137, 62, 191, 209, 204, 60, 191, 222, 49, 62, 93, 59, 95, 191, 227, 61, 188, 190, 215, 51, 231, 189, 217, 192, 112, 62, 163, 88, 11, 62, 45, 69, 215, 191, 6, 26, 238, 190, 10, 208, 205, 61, 135, 148, 176, 62, 101, 241, 54, 63, 18, 155, 241, 189, 136, 134, 171, 191, 234, 17, 90, 62, 120, 145, 147, 190, 156, 212, 10, 61, 162, 174, 41, 62, 84, 218, 77, 190, 252, 241, 25, 191, 115, 10, 225, 190, 203, 119, 4, 190, 31, 74, 216, 60, 168, 74, 98, 60, 219, 168, 244, 189, 176, 207, 40, 190, 254, 10, 157, 191, 94, 14, 166, 62, 101, 176, 224, 61, 145, 123, 75, 190, 93, 84, 43, 62, 161, 30, 183, 190, 152, 102, 154, 61, 243, 235, 56, 191, 13, 74, 48, 62, 217, 212, 177, 62, 61, 132, 136, 61, 145, 254, 244, 190, 9, 91, 22, 190, 242, 162, 220, 62, 106, 63, 84, 190, 149, 138, 4, 190, 143, 53, 237, 60, 42, 201, 190, 60, 41, 93, 216, 62, 203, 90, 10, 61, 233, 236, 15, 190, 7, 102, 122, 62, 193, 140, 97, 190, 176, 149, 202, 61, 139, 176, 39, 189, 130, 251, 132, 62, 255, 122, 83, 191, 21, 11, 243, 61, 147, 160, 36, 188, 23, 159, 204, 189, 156, 241, 123, 62, 200, 150, 51, 62, 228, 204, 201, 190, 29, 184, 142, 189, 85, 105, 98, 190, 101, 147, 206, 189, 52, 167, 150, 62, 65, 218, 216, 190, 238, 151, 146, 189, 31, 233, 243, 190, 81, 29, 45, 62, 251, 203, 24, 62, 38, 187, 0, 62, 87, 86, 110, 191, 224, 138, 138, 61, 5, 44, 82, 62, 171, 21, 140, 191, 163, 37, 80, 62, 231, 92, 243, 190, 46, 191, 62, 189, 200, 79, 28, 61, 239, 160, 125, 62, 71, 171, 158, 190, 5, 149, 43, 62, 133, 184, 251, 60, 156, 207, 148, 189, 70, 139, 78, 62, 109, 149, 170, 61, 237, 241, 76, 63, 123, 239, 42, 190, 64, 40, 118, 62, 60, 120, 25, 190, 238, 136, 213, 190, 187, 11, 58, 62, 99, 65, 178, 188, 10, 186, 77, 62, 78, 104, 106, 188, 123, 126, 185, 189, 149, 175, 195, 187, 252, 55, 186, 189, 58, 75, 159, 61, 153, 158, 186, 60, 109, 120, 163, 188, 195, 222, 22, 62, 104, 50, 145, 189, 31, 61, 46, 188, 190, 243, 222, 189, 175, 72, 218, 60, 170, 245, 36, 62, 74, 232, 79, 189, 141, 63, 42, 190, 158, 147, 41, 190, 127, 253, 148, 189, 45, 20, 154, 188, 91, 43, 7, 62, 106, 223, 22, 190, 10, 140, 190, 60, 111, 193, 104, 61, 176, 243, 156, 60, 189, 4, 183, 61, 183, 243, 22, 190, 39, 13, 195, 189, 201, 234, 39, 190, 51, 214, 17, 189, 179, 134, 185, 189, 15, 94, 13, 190, 140, 19, 143, 61, 197, 245, 11, 62, 184, 171, 25, 190, 41, 23, 49, 62, 132, 221, 185, 190, 39, 153, 89, 188, 195, 152, 15, 190, 46, 100, 243, 189, 227, 206, 236, 60, 220, 87, 23, 62, 226, 86, 77, 191, 124, 31, 114, 61, 68, 120, 170, 191, 89, 31, 162, 190, 210, 209, 115, 62, 55, 245, 179, 190, 16, 143, 136, 62, 243, 114, 144, 189, 217, 120, 113, 62, 238, 57, 217, 60, 145, 207, 23, 190, 248, 219, 233, 190, 163, 196, 101, 62, 31, 124, 143, 190, 117, 121, 251, 190, 79, 205, 170, 190, 151, 68, 11, 190, 196, 25, 169, 61, 232, 49, 105, 62, 83, 216, 3, 189, 122, 175, 249, 190, 29, 195, 136, 191, 69, 10, 27, 190, 108, 234, 208, 191, 188, 75, 222, 190, 172, 169, 57, 190, 244, 23, 157, 62, 200, 185, 117, 191, 143, 179, 53, 62, 1, 61, 76, 191, 106, 116, 123, 62, 48, 110, 15, 62, 115, 221, 138, 62, 212, 21, 124, 190, 94, 147, 152, 189, 4, 196, 159, 62, 252, 254, 137, 191, 151, 102, 10, 190, 5, 227, 141, 190, 1, 133, 177, 190, 116, 61, 167, 62, 245, 251, 177, 62, 130, 115, 108, 190, 144, 19, 18, 62, 152, 59, 109, 62, 222, 241, 14, 63, 30, 132, 37, 189, 85, 119, 163, 60, 117, 116, 242, 190, 138, 153, 199, 190, 78, 44, 10, 62, 16, 244, 176, 190, 248, 82, 164, 62, 145, 17, 42, 62, 141, 148, 94, 188, 196, 173, 204, 62, 8, 189, 222, 189, 35, 42, 118, 190, 221, 3, 209, 188, 96, 130, 230, 190, 147, 144, 226, 61, 167, 7, 249, 189, 246, 10, 102, 62, 215, 47, 137, 62, 172, 244, 1, 189, 2, 14, 107, 190, 151, 14, 129, 189, 9, 171, 14, 63, 232, 157, 217, 190, 68, 97, 38, 190, 79, 158, 156, 189, 198, 246, 21, 62, 178, 100, 178, 61, 0, 53, 108, 62, 9, 205, 26, 61, 132, 221, 61, 62, 254, 154, 217, 61, 100, 41, 200, 60, 212, 212, 82, 62, 154, 85, 169, 62, 98, 199, 38, 61, 197, 6, 109, 190, 170, 196, 229, 61, 26, 223, 201, 61, 193, 120, 32, 189, 239, 118, 194, 189, 29, 196, 227, 190, 243, 194, 148, 58, 173, 94, 128, 190, 216, 50, 129, 189, 192, 201, 210, 189, 113, 75, 196, 190, 17, 182, 161, 60, 146, 175, 66, 189, 53, 72, 239, 62, 179, 234, 140, 62, 243, 70, 178, 61, 19, 213, 91, 189, 146, 214, 230, 61, 200, 29, 252, 62, 109, 135, 47, 191, 12, 95, 138, 189, 153, 207, 189, 190, 41, 249, 43, 190, 186, 135, 52, 62, 247, 167, 20, 63, 170, 251, 125, 189, 123, 226, 200, 61, 175, 177, 126, 62, 63, 111, 214, 61, 248, 210, 138, 62, 216, 254, 62, 62, 153, 103, 17, 189, 95, 63, 148, 190, 99, 144, 111, 60, 253, 136, 140, 190, 111, 65, 77, 61, 231, 231, 192, 61, 56, 159, 211, 190, 91, 198, 91, 62, 173, 42, 66, 188, 162, 119, 179, 190, 35, 136, 38, 190, 64, 193, 80, 190, 44, 119, 179, 189, 106, 43, 75, 191, 83, 200, 207, 62, 117, 94, 182, 61, 16, 30, 108, 62, 14, 42, 162, 190, 7, 243, 86, 190, 157, 104, 18, 62, 38, 132, 242, 62, 129, 166, 37, 190, 59, 57, 117, 190, 61, 128, 31, 190, 42, 0, 5, 191, 69, 138, 79, 62, 165, 7, 19, 191, 102, 132, 216, 190, 121, 114, 39, 190, 100, 169, 40, 62, 182, 97, 107, 189, 65, 42, 111, 190, 253, 182, 88, 191, 143, 128, 32, 62, 6, 251, 237, 189, 199, 230, 113, 189, 112, 223, 56, 190, 210, 198, 134, 61, 233, 187, 101, 189, 115, 142, 195, 61, 252, 196, 11, 190, 71, 112, 103, 190, 5, 116, 187, 61, 211, 219, 137, 190, 238, 138, 28, 62, 79, 36, 96, 191, 229, 232, 151, 61, 125, 10, 13, 63, 127, 4, 86, 189, 223, 120, 39, 191, 139, 204, 22, 189, 60, 158, 10, 63, 89, 84, 13, 191, 127, 73, 195, 190, 102, 189, 13, 62, 216, 12, 147, 62, 72, 30, 190, 62, 41, 141, 108, 62, 59, 250, 17, 191, 235, 188, 170, 61, 247, 30, 132, 61, 212, 175, 50, 190, 164, 76, 130, 189, 244, 1, 145, 62, 40, 201, 249, 190, 159, 93, 248, 60, 210, 16, 164, 62, 130, 133, 164, 188, 33, 36, 233, 190, 93, 51, 24, 190, 22, 149, 133, 190, 227, 225, 63, 62, 202, 172, 7, 190, 30, 132, 41, 190, 201, 162, 46, 190, 102, 215, 102, 189, 37, 209, 16, 189, 187, 196, 204, 61, 243, 203, 16, 59, 4, 99, 49, 60, 247, 157, 232, 189, 82, 140, 22, 190, 69, 22, 207, 60, 214, 90, 213, 189, 49, 166, 223, 189, 68, 141, 186, 189, 142, 91, 115, 189, 189, 165, 2, 190, 140, 78, 212, 188, 6, 39, 202, 58, 86, 213, 229, 61, 155, 90, 143, 189, 198, 255, 43, 190, 169, 124, 179, 61, 49, 1, 131, 61, 189, 131, 119, 189, 193, 176, 14, 62, 3, 63, 88, 61, 153, 78, 209, 189, 133, 128, 255, 189, 124, 253, 11, 62, 78, 221, 148, 189, 24, 12, 11, 190, 56, 196, 236, 187, 18, 212, 20, 191, 64, 55, 122, 62, 87, 89, 167, 60, 41, 103, 21, 191, 194, 95, 150, 190, 226, 12, 50, 62, 188, 0, 98, 191, 53, 109, 22, 191, 103, 223, 157, 62, 50, 79, 152, 61, 190, 167, 23, 62, 151, 211, 189, 191, 172, 236, 135, 188, 120, 102, 204, 62, 134, 30, 52, 62, 226, 165, 217, 61, 68, 83, 149, 190, 3, 251, 211, 190, 88, 54, 164, 62, 128, 40, 133, 62, 227, 158, 185, 190, 210, 175, 81, 62, 215, 101, 184, 62, 167, 33, 213, 189, 99, 255, 15, 190, 191, 149, 117, 63, 48, 134, 82, 190, 92, 152, 23, 192, 110, 72, 110, 187, 244, 230, 185, 62, 112, 232, 4, 63, 35, 223, 137, 191, 15, 130, 119, 189, 78, 118, 23, 62, 141, 212, 73, 190, 70, 147, 30, 63, 80, 62, 180, 59, 78, 132, 104, 61, 18, 236, 165, 189, 79, 183, 37, 190, 158, 84, 22, 190, 202, 189, 191, 62, 10, 217, 188, 190, 248, 95, 40, 191, 102, 82, 190, 62, 205, 246, 76, 62, 216, 180, 166, 62, 80, 47, 38, 190, 195, 211, 228, 189, 252, 2, 140, 190, 215, 166, 69, 62, 209, 219, 124, 190, 85, 237, 144, 190, 197, 38, 182, 62, 1, 81, 81, 190, 40, 247, 5, 191, 254, 140, 195, 190, 1, 196, 169, 62, 193, 39, 179, 190, 44, 59, 150, 62, 83, 206, 216, 61, 30, 215, 23, 60, 254, 212, 20, 191, 11, 171, 20, 61, 210, 1, 80, 188, 19, 52, 31, 190, 39, 178, 134, 61, 110, 31, 25, 189, 115, 233, 60, 62, 128, 105, 3, 190, 33, 140, 222, 60, 18, 153, 27, 62, 112, 9, 154, 190, 214, 206, 78, 190, 89, 71, 193, 61, 240, 251, 213, 62, 87, 22, 209, 190, 248, 201, 96, 190, 154, 182, 196, 61, 251, 41, 48, 61, 0, 70, 173, 62, 189, 90, 38, 62, 165, 65, 19, 190, 195, 224, 7, 189, 20, 229, 92, 61, 108, 104, 86, 61, 36, 28, 2, 61, 172, 145, 101, 190, 169, 0, 22, 190, 58, 81, 228, 189, 17, 156, 155, 189, 229, 62, 14, 60, 91, 137, 214, 189, 45, 125, 131, 189, 50, 212, 152, 190, 212, 51, 212, 59, 179, 149, 163, 61, 245, 207, 97, 62, 154, 1, 143, 188, 78, 83, 215, 62, 48, 66, 116, 61, 95, 18, 224, 58, 47, 35, 185, 190, 103, 51, 71, 61, 121, 135, 72, 190, 130, 51, 129, 62, 7, 105, 22, 190, 91, 127, 91, 191, 251, 22, 15, 63, 110, 1, 75, 189, 103, 221, 138, 62, 253, 61, 202, 61, 178, 219, 2, 190, 235, 21, 31, 191, 10, 194, 15, 62, 136, 2, 185, 190, 226, 244, 114, 190, 161, 131, 93, 62, 41, 107, 157, 189, 125, 188, 190, 190, 241, 53, 83, 188, 164, 138, 140, 62, 185, 212, 43, 190, 25, 30, 169, 62, 226, 60, 12, 187, 55, 107, 121, 190, 158, 112, 42, 191, 221, 250, 14, 62, 155, 36, 106, 190, 36, 82, 79, 190, 118, 223, 176, 60, 56, 3, 146, 190, 47, 40, 137, 62, 82, 198, 90, 190, 150, 98, 132, 60, 3, 185, 128, 60, 13, 135, 50, 190, 97, 236, 82, 190, 150, 67, 86, 190, 95, 23, 57, 190, 145, 167, 10, 191, 165, 67, 203, 61, 56, 126, 128, 190, 169, 164, 50, 190, 104, 166, 228, 62, 108, 48, 179, 61, 168, 156, 33, 61, 118, 62, 57, 189, 8, 131, 245, 188, 234, 28, 46, 60, 5, 89, 79, 62, 12, 162, 139, 62, 55, 70, 179, 190, 254, 91, 159, 61, 100, 37, 236, 59, 134, 184, 97, 188, 106, 136, 23, 62, 160, 235, 12, 190, 155, 36, 138, 190, 98, 214, 12, 62, 246, 51, 43, 191, 238, 183, 189, 189, 58, 111, 223, 61, 120, 100, 233, 62, 129, 138, 124, 62, 229, 236, 238, 190, 49, 4, 83, 189, 202, 45, 41, 62, 195, 43, 157, 189, 49, 20, 89, 60, 119, 201, 102, 190, 194, 241, 85, 190, 14, 194, 75, 190, 213, 236, 218, 190, 242, 233, 140, 188, 229, 230, 195, 61, 58, 122, 158, 62, 231, 16, 208, 61, 191, 9, 155, 190, 88, 129, 39, 60, 90, 53, 31, 62, 230, 26, 193, 60, 154, 72, 146, 190, 241, 59, 7, 191, 6, 42, 98, 189, 232, 42, 89, 190, 29, 192, 250, 189, 170, 105, 107, 62, 152, 83, 208, 61, 188, 0, 68, 189, 146, 103, 102, 191, 56, 187, 37, 62, 90, 34, 192, 190, 223, 159, 231, 190, 240, 29, 156, 189, 212, 6, 26, 191, 147, 171, 112, 62, 159, 130, 245, 190, 148, 172, 149, 62, 137, 196, 0, 63, 246, 159, 131, 188, 255, 53, 190, 190, 8, 231, 143, 190, 230, 77, 87, 63, 142, 238, 117, 191, 52, 83, 200, 189, 4, 212, 170, 190, 214, 230, 107, 62, 167, 151, 80, 188, 52, 229, 224, 62, 239, 42, 157, 190, 200, 154, 70, 62, 165, 107, 203, 62, 203, 237, 213, 62, 148, 196, 35, 62, 123, 78, 6, 63, 182, 26, 52, 191, 113, 51, 214, 190, 131, 3, 160, 62, 73, 216, 200, 190, 140, 225, 197, 62, 30, 113, 145, 61, 171, 250, 26, 63, 103, 215, 179, 61, 87, 107, 239, 61, 237, 5, 243, 61, 86, 161, 239, 60, 237, 39, 180, 190, 67, 170, 142, 190, 8, 226, 13, 189, 179, 149, 150, 189, 120, 249, 47, 190, 50, 135, 130, 62, 239, 193, 215, 188, 239, 42, 131, 62, 130, 130, 127, 189, 10, 209, 151, 191, 162, 195, 145, 62, 102, 138, 177, 60, 226, 206, 134, 191, 213, 174, 190, 61, 151, 144, 178, 61, 181, 204, 73, 62, 130, 85, 12, 62, 148, 101, 193, 62, 149, 163, 132, 62, 249, 73, 201, 62, 45, 219, 207, 61, 221, 47, 67, 62, 193, 250, 85, 62, 230, 121, 178, 190, 16, 226, 141, 189, 79, 72, 25, 62, 18, 160, 3, 62, 131, 28, 65, 190, 45, 71, 140, 188, 112, 159, 248, 189, 35, 164, 61, 187, 195, 216, 197, 188, 124, 63, 217, 189, 133, 61, 27, 62, 7, 209, 202, 188, 180, 94, 28, 191, 70, 193, 199, 189, 71, 201, 77, 61, 31, 24, 56, 190, 36, 57, 83, 190, 76, 133, 129, 191, 172, 101, 46, 191, 176, 57, 115, 189, 20, 239, 228, 190, 238, 254, 132, 190, 248, 131, 143, 61, 37, 113, 202, 190, 66, 218, 138, 190, 253, 117, 92, 62, 232, 118, 60, 190, 214, 58, 139, 190, 178, 235, 7, 60, 68, 92, 15, 190, 163, 252, 134, 190, 115, 111, 30, 190, 4, 236, 152, 190, 228, 236, 49, 62, 169, 246, 64, 62, 47, 102, 245, 61, 63, 140, 53, 191, 33, 209, 193, 62, 229, 175, 230, 189, 125, 230, 209, 188, 161, 127, 66, 190, 252, 221, 33, 189, 23, 125, 133, 62, 162, 212, 84, 62, 168, 253, 164, 62, 204, 213, 182, 62, 44, 66, 180, 190, 91, 103, 188, 61, 189, 252, 143, 62, 6, 104, 154, 62, 235, 35, 125, 61, 120, 200, 135, 189, 118, 177, 106, 62, 221, 36, 224, 62, 14, 60, 224, 188, 198, 237, 163, 62, 25, 235, 169, 189, 57, 47, 61, 189, 223, 2, 15, 63, 115, 251, 29, 61, 228, 164, 196, 189, 14, 5, 80, 61, 167, 240, 197, 62, 111, 61, 228, 59, 196, 50, 150, 62, 76, 17, 162, 190, 147, 2, 148, 60, 217, 104, 111, 190, 72, 77, 44, 61, 10, 197, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 246, 99, 189, 18, 134, 81, 62, 138, 88, 87, 189, 71, 222, 171, 190, 188, 250, 160, 62, 253, 84, 1, 62, 44, 233, 149, 61, 72, 132, 31, 62, 215, 10, 188, 61, 126, 77, 152, 189, 62, 20, 1, 190, 238, 38, 169, 62, 195, 39, 188, 61, 233, 236, 38, 62, 181, 196, 93, 188, 247, 150, 116, 189, 25, 250, 109, 61, 24, 206, 159, 60, 18, 250, 163, 62, 112, 123, 231, 189, 18, 103, 70, 189, 217, 106, 197, 189, 180, 16, 160, 190, 152, 36, 185, 61, 122, 206, 132, 62, 46, 194, 231, 61, 153, 10, 67, 62, 95, 128, 243, 188, 173, 182, 246, 189, 58, 35, 81, 61, 24, 150, 74, 62, 111, 237, 77, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 152, 176, 190, 28, 64, 16, 63, 156, 82, 32, 63, 180, 112, 234, 62, 226, 202, 66, 190, 200, 219, 227, 190, 137, 43, 116, 191, 26, 171, 75, 63, 202, 85, 140, 62, 16, 239, 75, 63, 100, 145, 246, 62, 20, 185, 130, 191, 20, 94, 83, 62, 240, 231, 162, 62, 243, 12, 244, 60, 27, 122, 80, 191, 192, 127, 127, 63, 81, 112, 145, 61, 177, 157, 111, 62, 158, 153, 158, 190, 179, 6, 129, 62, 215, 179, 138, 61, 155, 173, 127, 191, 156, 191, 3, 191, 106, 2, 244, 60, 80, 194, 239, 190, 215, 149, 201, 60, 162, 27, 238, 190, 201, 34, 91, 63, 189, 33, 139, 62, 217, 231, 207, 188, 224, 143, 75, 62, 134, 101, 113, 188, 167, 200, 85, 189, 177, 208, 14, 190, 227, 253, 221, 61, 99, 210, 141, 190, 28, 212, 153, 190, 63, 136, 11, 62, 193, 220, 243, 60, 156, 121, 22, 190, 111, 232, 221, 62, 226, 161, 14, 189, 146, 59, 182, 60, 5, 149, 109, 190, 207, 186, 156, 190, 118, 71, 132, 61, 120, 98, 244, 59, 89, 16, 151, 62, 98, 12, 114, 190, 199, 84, 12, 190, 132, 90, 154, 61, 205, 16, 229, 189, 195, 254, 65, 61, 134, 49, 67, 62, 250, 19, 141, 189, 133, 5, 114, 190, 106, 81, 205, 61, 28, 240, 152, 190, 72, 14, 252, 188, 59, 137, 255, 62, 63, 92, 63, 189, 230, 125, 8, 191, 42, 36, 120, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 64, 222, 189, 210, 233, 35, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 166, 4, 191, 66, 234, 3, 63, 54, 232, 150, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 1, 36, 64, 110, 226, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0055/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}