// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 125, 50, 63, 23, 32, 118, 60, 109, 100, 143, 190, 101, 86, 114, 62, 180, 174, 143, 191, 74, 161, 245, 190, 20, 81, 27, 188, 201, 218, 44, 191, 79, 223, 249, 62, 204, 153, 141, 190, 35, 189, 220, 190, 95, 240, 17, 63, 124, 40, 48, 191, 44, 83, 202, 191, 200, 169, 222, 190, 0, 85, 174, 62, 122, 173, 7, 63, 77, 243, 12, 62, 82, 113, 63, 63, 125, 62, 81, 190, 117, 95, 33, 63, 35, 115, 21, 191, 20, 161, 196, 190, 68, 106, 136, 190, 197, 147, 11, 190, 148, 133, 133, 63, 249, 224, 128, 63, 35, 151, 241, 190, 252, 228, 158, 61, 98, 99, 21, 191, 125, 205, 33, 63, 166, 191, 17, 191, 237, 92, 33, 189, 204, 56, 103, 190, 130, 213, 141, 63, 22, 119, 73, 189, 99, 207, 233, 190, 235, 22, 20, 191, 32, 164, 185, 189, 39, 226, 202, 62, 21, 15, 15, 191, 89, 130, 29, 63, 85, 101, 57, 190, 54, 56, 161, 61, 47, 9, 6, 191, 59, 219, 117, 63, 79, 199, 186, 62, 133, 11, 11, 63, 144, 54, 130, 61, 190, 1, 13, 63, 93, 11, 216, 190, 137, 49, 65, 191, 173, 164, 208, 190, 101, 204, 154, 188, 255, 243, 38, 62, 179, 237, 219, 190, 74, 177, 145, 189, 229, 117, 56, 191, 187, 236, 113, 190, 169, 211, 168, 189, 38, 146, 210, 190, 73, 186, 189, 191, 201, 18, 171, 190, 9, 207, 227, 62, 165, 227, 21, 191, 170, 19, 233, 190, 170, 53, 216, 62, 97, 152, 70, 63, 205, 139, 8, 63, 33, 158, 175, 62, 64, 123, 144, 62, 53, 48, 40, 61, 180, 243, 195, 190, 241, 251, 25, 63, 58, 195, 232, 190, 188, 47, 169, 61, 112, 209, 201, 62, 1, 132, 98, 190, 243, 222, 57, 63, 87, 196, 69, 61, 67, 201, 208, 190, 54, 42, 7, 190, 221, 74, 47, 63, 174, 12, 188, 190, 142, 34, 225, 62, 173, 39, 241, 62, 144, 119, 244, 189, 34, 108, 174, 189, 11, 156, 188, 190, 146, 247, 198, 62, 245, 57, 56, 63, 42, 108, 151, 191, 105, 33, 145, 190, 107, 101, 39, 63, 220, 138, 31, 63, 57, 250, 165, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 114, 87, 191, 192, 151, 62, 62, 89, 177, 124, 190, 61, 89, 219, 187, 152, 251, 188, 190, 210, 205, 115, 191, 248, 95, 114, 190, 153, 82, 212, 190, 75, 55, 189, 61, 103, 25, 4, 63, 109, 150, 43, 63, 159, 85, 46, 63, 68, 17, 25, 63, 205, 5, 156, 62, 85, 9, 147, 188, 53, 172, 59, 190, 106, 89, 28, 63, 126, 69, 65, 63, 129, 223, 255, 62, 136, 52, 83, 63, 220, 0, 0, 61, 32, 133, 30, 62, 64, 172, 4, 63, 133, 82, 65, 191, 182, 134, 73, 190, 108, 156, 122, 62, 208, 13, 79, 190, 200, 134, 108, 62, 12, 54, 214, 62, 81, 86, 9, 189, 111, 200, 164, 189, 54, 165, 31, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 70, 70, 190, 159, 11, 96, 189, 76, 168, 87, 62, 39, 82, 14, 190, 108, 183, 245, 189, 78, 234, 144, 62, 203, 198, 133, 188, 186, 82, 247, 61, 31, 104, 244, 189, 244, 215, 239, 61, 149, 125, 197, 61, 138, 34, 140, 61, 2, 163, 20, 62, 56, 84, 115, 61, 229, 167, 97, 189, 239, 221, 165, 62, 147, 233, 104, 189, 229, 241, 213, 189, 255, 77, 32, 62, 2, 91, 0, 60, 16, 127, 57, 190, 71, 27, 207, 189, 105, 202, 56, 62, 56, 138, 122, 190, 183, 68, 8, 189, 200, 102, 36, 62, 219, 147, 52, 61, 144, 206, 178, 189, 250, 122, 19, 62, 30, 97, 88, 61, 137, 137, 156, 189, 112, 16, 2, 62, 231, 135, 68, 191, 1, 150, 92, 190, 182, 6, 26, 62, 129, 159, 213, 61, 109, 156, 245, 190, 45, 110, 166, 62, 56, 45, 80, 62, 96, 4, 196, 190, 239, 134, 152, 61, 234, 33, 26, 62, 198, 228, 218, 189, 8, 215, 165, 62, 1, 217, 43, 190, 125, 127, 113, 189, 235, 232, 41, 62, 93, 178, 112, 61, 227, 8, 137, 62, 148, 37, 163, 188, 95, 240, 114, 190, 51, 234, 95, 189, 197, 67, 219, 190, 184, 185, 61, 61, 51, 149, 149, 62, 219, 143, 202, 190, 131, 185, 217, 60, 9, 35, 225, 62, 114, 120, 9, 62, 24, 44, 131, 62, 29, 246, 252, 62, 189, 57, 23, 61, 67, 87, 27, 191, 27, 100, 148, 60, 124, 6, 36, 189, 68, 130, 247, 61, 109, 43, 16, 62, 89, 136, 141, 189, 46, 177, 79, 188, 146, 200, 28, 190, 54, 107, 14, 190, 33, 50, 36, 62, 197, 172, 255, 61, 148, 219, 20, 60, 100, 226, 4, 62, 173, 146, 11, 61, 25, 19, 10, 60, 11, 95, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 205, 140, 35, 61, 51, 24, 148, 189, 237, 123, 230, 189, 113, 34, 238, 60, 124, 25, 5, 190, 118, 211, 13, 189, 238, 188, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 199, 14, 95, 61, 110, 194, 202, 60, 78, 53, 42, 189, 38, 108, 220, 189, 51, 90, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 100, 30, 252, 189, 177, 106, 231, 61, 245, 41, 14, 191, 79, 245, 150, 62, 48, 67, 78, 191, 201, 110, 223, 190, 40, 227, 70, 190, 114, 106, 15, 190, 79, 188, 99, 62, 186, 240, 169, 189, 211, 3, 182, 62, 87, 253, 142, 62, 32, 160, 71, 62, 139, 28, 218, 61, 173, 50, 164, 190, 228, 8, 215, 189, 206, 38, 75, 190, 252, 70, 236, 61, 228, 197, 120, 62, 165, 155, 0, 62, 24, 109, 28, 191, 96, 92, 110, 62, 120, 249, 137, 189, 102, 80, 188, 62, 232, 79, 227, 60, 38, 97, 0, 190, 153, 109, 114, 62, 78, 170, 9, 62, 189, 171, 153, 190, 216, 211, 171, 189, 8, 78, 146, 62, 149, 30, 250, 189, 97, 177, 136, 190, 249, 123, 91, 189, 43, 186, 213, 61, 55, 71, 159, 189, 73, 23, 12, 62, 108, 207, 237, 189, 189, 215, 145, 61, 71, 85, 204, 60, 86, 229, 181, 190, 48, 47, 8, 62, 179, 48, 218, 62, 210, 115, 228, 190, 65, 195, 157, 62, 201, 138, 103, 62, 6, 248, 40, 62, 37, 115, 44, 190, 238, 218, 35, 187, 228, 14, 224, 60, 120, 98, 207, 62, 190, 53, 35, 62, 46, 66, 155, 190, 130, 164, 183, 61, 74, 127, 187, 61, 237, 132, 162, 57, 168, 137, 72, 61, 33, 12, 143, 189, 244, 15, 195, 189, 26, 151, 33, 62, 38, 59, 58, 189, 201, 213, 84, 62, 235, 194, 243, 61, 84, 36, 36, 191, 135, 120, 92, 61, 131, 166, 102, 61, 242, 91, 0, 191, 73, 163, 225, 62, 143, 176, 144, 190, 212, 190, 231, 190, 106, 147, 157, 190, 190, 146, 51, 189, 192, 106, 67, 188, 173, 100, 62, 62, 54, 140, 18, 62, 197, 200, 151, 62, 108, 236, 189, 62, 30, 213, 7, 63, 254, 143, 66, 190, 171, 99, 28, 190, 189, 76, 117, 189, 46, 131, 43, 62, 151, 187, 181, 62, 246, 214, 162, 62, 116, 171, 172, 61, 132, 61, 6, 60, 53, 16, 127, 61, 70, 79, 247, 62, 76, 220, 158, 61, 54, 134, 244, 59, 18, 145, 134, 61, 218, 151, 11, 62, 127, 122, 90, 190, 35, 49, 171, 62, 0, 154, 78, 62, 17, 131, 227, 190, 15, 100, 14, 63, 73, 53, 67, 62, 4, 57, 41, 62, 148, 27, 138, 62, 134, 114, 234, 188, 87, 72, 231, 189, 130, 204, 75, 60, 108, 91, 164, 189, 219, 203, 136, 60, 150, 121, 98, 61, 211, 169, 147, 61, 58, 231, 166, 191, 180, 70, 6, 62, 130, 30, 130, 189, 15, 133, 65, 190, 198, 239, 173, 190, 244, 71, 73, 190, 169, 154, 32, 190, 143, 224, 28, 62, 159, 54, 131, 189, 35, 137, 143, 62, 234, 241, 167, 62, 240, 225, 113, 190, 115, 249, 148, 60, 211, 246, 228, 61, 248, 86, 176, 190, 137, 116, 117, 62, 28, 150, 163, 61, 161, 118, 157, 190, 120, 243, 50, 61, 1, 149, 135, 62, 12, 92, 213, 190, 218, 88, 3, 191, 72, 8, 203, 190, 122, 245, 66, 63, 38, 89, 55, 190, 161, 95, 76, 62, 162, 90, 168, 61, 208, 241, 101, 62, 87, 172, 136, 62, 96, 44, 100, 191, 21, 34, 168, 62, 129, 61, 117, 190, 173, 191, 229, 61, 84, 121, 162, 189, 32, 253, 24, 191, 254, 61, 24, 61, 59, 204, 151, 190, 34, 102, 142, 62, 104, 133, 129, 188, 130, 157, 110, 62, 241, 123, 75, 60, 214, 118, 79, 62, 77, 22, 224, 190, 221, 82, 180, 190, 242, 141, 163, 189, 60, 183, 130, 190, 62, 147, 23, 62, 121, 19, 118, 190, 89, 24, 238, 189, 138, 115, 217, 62, 212, 209, 193, 190, 254, 25, 10, 191, 121, 182, 79, 189, 186, 213, 82, 190, 85, 22, 41, 62, 246, 184, 247, 190, 150, 110, 191, 60, 117, 105, 165, 189, 242, 215, 164, 190, 78, 232, 146, 189, 57, 112, 96, 189, 113, 199, 123, 62, 176, 7, 83, 62, 226, 114, 197, 61, 8, 40, 113, 62, 42, 242, 168, 62, 172, 101, 101, 62, 88, 247, 70, 190, 75, 162, 47, 190, 171, 69, 38, 62, 227, 232, 159, 189, 126, 201, 75, 62, 241, 129, 44, 62, 236, 194, 58, 190, 205, 74, 23, 62, 13, 239, 32, 61, 96, 80, 134, 62, 245, 199, 86, 61, 242, 133, 223, 189, 240, 94, 51, 62, 121, 220, 170, 189, 237, 139, 216, 189, 41, 141, 113, 61, 214, 58, 85, 62, 3, 173, 100, 190, 198, 148, 240, 61, 86, 213, 105, 58, 195, 141, 21, 190, 64, 213, 169, 61, 110, 46, 44, 190, 210, 172, 50, 62, 204, 104, 237, 189, 54, 138, 18, 62, 21, 7, 59, 61, 190, 29, 52, 190, 89, 228, 73, 60, 30, 75, 24, 190, 153, 64, 19, 190, 250, 118, 177, 188, 181, 67, 124, 61, 17, 12, 205, 189, 59, 191, 57, 190, 197, 73, 21, 61, 232, 34, 30, 190, 197, 51, 97, 189, 21, 218, 25, 62, 10, 48, 93, 60, 179, 65, 33, 190, 55, 232, 247, 61, 245, 70, 204, 61, 99, 146, 91, 189, 200, 22, 78, 61, 246, 239, 228, 61, 78, 82, 32, 190, 116, 90, 126, 187, 201, 185, 15, 62, 170, 153, 200, 61, 78, 247, 157, 191, 14, 152, 129, 190, 118, 46, 62, 62, 28, 87, 12, 189, 186, 109, 116, 190, 146, 46, 206, 62, 217, 10, 157, 61, 81, 206, 236, 186, 136, 149, 193, 61, 85, 135, 151, 61, 16, 122, 164, 62, 123, 231, 232, 59, 28, 176, 76, 60, 99, 206, 36, 190, 216, 92, 133, 61, 179, 90, 133, 62, 19, 247, 140, 62, 57, 183, 133, 190, 199, 255, 222, 61, 239, 119, 136, 190, 183, 104, 8, 191, 62, 154, 84, 189, 117, 23, 80, 62, 176, 189, 237, 190, 225, 43, 44, 190, 166, 242, 129, 62, 161, 145, 130, 189, 214, 139, 52, 62, 174, 43, 219, 62, 134, 32, 103, 190, 65, 7, 219, 189, 102, 189, 133, 61, 17, 40, 131, 190, 208, 105, 141, 191, 54, 91, 46, 63, 211, 65, 14, 190, 11, 138, 184, 61, 62, 39, 220, 61, 71, 208, 234, 60, 63, 8, 45, 62, 185, 186, 196, 190, 244, 221, 175, 189, 55, 162, 72, 191, 183, 150, 238, 60, 191, 14, 41, 62, 233, 178, 69, 191, 127, 241, 208, 190, 15, 223, 149, 59, 115, 63, 107, 190, 74, 223, 135, 62, 41, 239, 38, 190, 112, 167, 47, 62, 1, 66, 212, 188, 108, 23, 5, 191, 210, 180, 99, 191, 157, 21, 33, 190, 248, 162, 39, 191, 139, 78, 82, 190, 128, 232, 161, 190, 138, 194, 93, 191, 219, 48, 239, 189, 156, 254, 158, 190, 19, 179, 190, 190, 191, 132, 117, 61, 1, 60, 28, 62, 46, 140, 112, 189, 165, 22, 22, 62, 81, 92, 55, 190, 63, 161, 195, 189, 163, 175, 163, 61, 27, 37, 208, 60, 85, 117, 10, 190, 30, 140, 52, 61, 164, 4, 22, 62, 4, 123, 25, 190, 217, 31, 115, 190, 143, 153, 31, 191, 201, 66, 193, 189, 18, 60, 233, 59, 72, 74, 24, 61, 102, 201, 119, 190, 173, 21, 254, 190, 238, 168, 60, 190, 107, 27, 88, 191, 84, 225, 7, 62, 126, 188, 27, 190, 7, 177, 72, 61, 39, 178, 14, 63, 47, 142, 163, 189, 227, 79, 153, 189, 77, 229, 21, 190, 185, 100, 248, 189, 184, 52, 157, 189, 14, 11, 3, 190, 14, 226, 40, 190, 124, 176, 209, 61, 138, 45, 7, 191, 64, 103, 2, 189, 252, 139, 225, 188, 165, 28, 20, 190, 136, 89, 62, 62, 15, 42, 171, 189, 71, 204, 153, 189, 83, 224, 106, 62, 7, 195, 151, 191, 227, 94, 64, 62, 34, 80, 128, 190, 228, 16, 3, 190, 47, 97, 136, 62, 45, 110, 141, 191, 55, 109, 74, 62, 142, 214, 194, 190, 29, 54, 11, 61, 52, 203, 20, 62, 189, 211, 29, 62, 4, 254, 9, 62, 196, 144, 46, 62, 232, 210, 159, 190, 242, 183, 148, 191, 8, 140, 50, 62, 134, 112, 159, 190, 210, 162, 0, 62, 62, 233, 147, 188, 231, 97, 62, 190, 86, 178, 166, 189, 47, 187, 20, 190, 45, 175, 24, 190, 28, 25, 117, 62, 248, 20, 244, 190, 215, 219, 68, 60, 237, 32, 48, 63, 250, 124, 245, 61, 49, 177, 103, 62, 148, 191, 32, 190, 8, 134, 164, 62, 212, 211, 12, 62, 147, 28, 177, 190, 171, 252, 189, 61, 7, 31, 66, 190, 206, 13, 160, 190, 77, 160, 150, 188, 16, 89, 144, 190, 217, 118, 20, 61, 173, 195, 191, 61, 87, 144, 130, 62, 113, 134, 128, 62, 156, 152, 62, 60, 150, 37, 136, 59, 155, 239, 171, 61, 215, 137, 65, 190, 113, 85, 180, 190, 99, 121, 242, 189, 66, 220, 210, 190, 62, 24, 0, 62, 138, 63, 143, 189, 84, 56, 114, 190, 183, 137, 56, 61, 70, 116, 197, 189, 26, 75, 137, 60, 71, 53, 253, 60, 1, 81, 250, 60, 29, 144, 35, 190, 51, 170, 101, 189, 1, 73, 95, 61, 239, 103, 126, 188, 208, 208, 37, 62, 85, 216, 136, 61, 135, 230, 227, 57, 80, 159, 190, 189, 116, 150, 32, 190, 51, 151, 18, 62, 16, 48, 217, 61, 221, 22, 182, 189, 166, 40, 201, 60, 162, 209, 247, 61, 208, 153, 231, 188, 241, 160, 196, 61, 212, 255, 204, 61, 83, 187, 174, 189, 207, 53, 180, 60, 12, 197, 36, 190, 51, 212, 14, 189, 78, 3, 239, 60, 241, 243, 153, 61, 49, 12, 19, 189, 174, 152, 172, 61, 20, 101, 7, 189, 96, 192, 88, 189, 51, 57, 25, 190, 184, 26, 51, 190, 106, 167, 143, 189, 223, 62, 139, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 223, 112, 95, 188, 15, 46, 229, 188, 106, 61, 238, 61, 4, 193, 99, 61, 178, 122, 221, 61, 168, 157, 8, 61, 209, 148, 64, 190, 74, 216, 62, 190, 55, 77, 1, 190, 94, 128, 142, 60, 233, 125, 157, 61, 3, 61, 86, 190, 176, 129, 62, 189, 105, 223, 241, 60, 127, 76, 122, 61, 153, 182, 221, 189, 75, 81, 93, 189, 234, 23, 136, 188, 121, 170, 29, 190, 158, 105, 49, 190, 51, 89, 11, 190, 163, 159, 0, 188, 222, 57, 222, 61, 206, 240, 14, 190, 124, 55, 103, 61, 20, 162, 182, 189, 249, 82, 22, 190, 95, 69, 203, 60, 197, 145, 127, 61, 129, 135, 152, 61, 70, 21, 173, 61, 24, 42, 133, 189, 60, 21, 203, 61, 167, 250, 110, 62, 9, 69, 98, 62, 250, 101, 93, 189, 207, 32, 84, 60, 152, 240, 197, 190, 103, 255, 55, 189, 152, 196, 211, 61, 131, 94, 47, 60, 143, 152, 24, 62, 43, 188, 130, 62, 209, 171, 51, 190, 23, 78, 251, 61, 115, 89, 164, 62, 41, 107, 14, 62, 64, 12, 27, 190, 118, 177, 4, 62, 26, 16, 33, 187, 233, 4, 74, 62, 204, 93, 175, 189, 156, 130, 83, 59, 187, 13, 198, 61, 235, 248, 154, 186, 20, 101, 232, 61, 21, 245, 201, 61, 123, 212, 176, 61, 209, 109, 83, 62, 189, 253, 36, 190, 52, 176, 22, 62, 65, 17, 131, 62, 218, 207, 108, 62, 187, 197, 12, 62, 2, 102, 244, 190, 183, 231, 47, 190, 17, 119, 199, 61, 254, 26, 45, 191, 166, 12, 31, 62, 139, 45, 113, 189, 149, 219, 115, 62, 126, 206, 192, 61, 101, 109, 167, 190, 240, 107, 104, 189, 112, 51, 31, 62, 220, 61, 125, 60, 216, 191, 127, 190, 147, 255, 12, 61, 104, 54, 118, 60, 189, 167, 230, 62, 62, 12, 1, 62, 53, 105, 126, 61, 163, 167, 177, 61, 144, 107, 6, 62, 250, 204, 38, 62, 155, 66, 210, 189, 131, 57, 233, 187, 214, 15, 229, 61, 96, 8, 183, 188, 180, 202, 14, 62, 236, 38, 69, 190, 116, 131, 7, 188, 228, 7, 73, 62, 30, 99, 194, 190, 84, 13, 128, 190, 243, 164, 120, 190, 35, 183, 187, 62, 239, 11, 14, 62, 37, 62, 36, 63, 43, 89, 17, 190, 20, 73, 213, 61, 160, 121, 235, 61, 113, 107, 67, 190, 189, 13, 70, 188, 89, 40, 168, 190, 222, 119, 5, 62, 67, 56, 217, 189, 181, 50, 92, 189, 150, 87, 95, 189, 30, 237, 210, 189, 209, 95, 62, 62, 153, 156, 134, 188, 36, 153, 27, 62, 126, 220, 255, 189, 119, 231, 176, 61, 4, 38, 40, 58, 78, 80, 47, 62, 77, 167, 241, 189, 63, 235, 50, 189, 18, 85, 203, 189, 150, 237, 104, 61, 216, 75, 209, 188, 86, 171, 129, 60, 74, 87, 187, 189, 232, 36, 17, 62, 221, 185, 244, 189, 135, 33, 1, 190, 171, 40, 26, 190, 179, 219, 24, 190, 160, 65, 220, 189, 165, 100, 197, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 108, 47, 80, 61, 152, 68, 176, 188, 205, 226, 66, 61, 227, 81, 153, 189, 87, 158, 191, 61, 184, 224, 88, 61, 1, 89, 36, 61, 209, 18, 36, 189, 79, 48, 119, 189, 77, 67, 29, 190, 149, 222, 26, 190, 0, 61, 32, 190, 213, 206, 162, 189, 101, 188, 208, 189, 45, 146, 232, 188, 121, 54, 100, 189, 195, 49, 39, 190, 154, 254, 154, 61, 135, 216, 236, 189, 13, 73, 17, 62, 71, 90, 227, 61, 200, 90, 39, 190, 162, 66, 77, 61, 99, 162, 22, 190, 101, 90, 244, 187, 195, 172, 41, 189, 98, 36, 213, 190, 149, 31, 90, 190, 76, 194, 198, 62, 214, 119, 71, 190, 208, 159, 140, 62, 2, 41, 131, 62, 61, 108, 187, 62, 231, 77, 177, 62, 102, 93, 39, 190, 63, 79, 99, 62, 176, 75, 220, 189, 129, 252, 114, 187, 255, 167, 129, 189, 157, 13, 167, 189, 19, 176, 101, 62, 38, 240, 92, 62, 225, 189, 160, 62, 117, 195, 158, 60, 158, 148, 69, 62, 120, 255, 57, 190, 165, 99, 191, 62, 99, 167, 166, 190, 144, 40, 52, 61, 254, 179, 31, 191, 170, 74, 222, 190, 244, 137, 224, 60, 89, 29, 185, 189, 18, 195, 93, 190, 53, 241, 63, 62, 223, 97, 158, 190, 10, 245, 34, 190, 227, 39, 207, 61, 222, 163, 76, 190, 192, 145, 5, 191, 113, 119, 150, 61, 52, 171, 48, 190, 132, 149, 42, 190, 8, 72, 201, 190, 93, 113, 156, 62, 234, 218, 13, 62, 251, 203, 156, 62, 81, 219, 172, 61, 231, 8, 219, 190, 93, 188, 7, 62, 100, 84, 161, 191, 133, 16, 255, 189, 161, 61, 3, 190, 29, 59, 74, 62, 114, 135, 123, 62, 117, 28, 105, 191, 23, 74, 49, 190, 153, 253, 73, 191, 234, 33, 203, 188, 112, 240, 236, 190, 18, 225, 131, 61, 134, 220, 43, 63, 79, 172, 11, 190, 176, 45, 128, 62, 52, 0, 216, 190, 108, 58, 246, 62, 119, 213, 235, 62, 252, 5, 182, 189, 176, 134, 138, 191, 14, 114, 201, 62, 181, 110, 61, 189, 111, 103, 14, 190, 85, 107, 71, 188, 237, 237, 171, 189, 132, 78, 41, 62, 234, 126, 40, 190, 230, 200, 59, 189, 66, 234, 100, 61, 157, 4, 239, 61, 7, 99, 220, 189, 219, 55, 31, 62, 13, 66, 211, 59, 238, 214, 252, 189, 143, 239, 40, 59, 81, 164, 101, 61, 13, 232, 54, 189, 134, 39, 24, 190, 148, 245, 3, 190, 192, 146, 209, 189, 184, 221, 2, 61, 6, 38, 129, 61, 192, 110, 38, 188, 9, 56, 192, 189, 254, 3, 216, 59, 163, 206, 250, 61, 120, 85, 4, 60, 184, 135, 35, 190, 153, 78, 198, 61, 211, 222, 177, 61, 46, 109, 16, 190, 251, 200, 45, 189, 203, 232, 7, 62, 163, 4, 1, 191, 120, 56, 90, 190, 210, 38, 191, 62, 204, 163, 232, 189, 46, 64, 61, 62, 175, 198, 166, 62, 55, 4, 92, 62, 239, 34, 160, 61, 241, 244, 69, 189, 21, 205, 31, 62, 173, 231, 164, 61, 59, 8, 129, 189, 105, 104, 112, 61, 178, 42, 138, 190, 144, 159, 99, 62, 233, 160, 119, 62, 243, 113, 164, 62, 174, 49, 143, 189, 104, 179, 22, 62, 132, 145, 153, 190, 107, 221, 91, 62, 122, 108, 239, 189, 6, 246, 129, 189, 152, 24, 5, 62, 202, 255, 100, 190, 239, 80, 132, 62, 147, 217, 144, 190, 70, 113, 54, 61, 215, 43, 160, 62, 235, 106, 43, 189, 58, 110, 117, 190, 46, 200, 35, 189, 190, 26, 6, 62, 226, 226, 186, 188, 109, 60, 223, 62, 211, 80, 126, 190, 218, 17, 24, 62, 126, 58, 28, 63, 119, 154, 236, 62, 1, 73, 170, 61, 5, 177, 172, 189, 187, 111, 154, 60, 193, 84, 43, 62, 251, 214, 131, 190, 150, 39, 156, 190, 67, 247, 162, 188, 119, 1, 25, 62, 96, 197, 79, 62, 135, 4, 44, 62, 195, 116, 215, 190, 91, 193, 108, 61, 2, 192, 17, 191, 18, 218, 25, 60, 74, 109, 79, 61, 111, 210, 173, 61, 18, 144, 2, 191, 252, 78, 180, 190, 109, 111, 179, 189, 13, 231, 137, 61, 120, 157, 172, 190, 120, 126, 58, 61, 92, 24, 191, 190, 1, 183, 170, 190, 10, 151, 152, 62, 8, 250, 210, 190, 95, 207, 138, 190, 155, 38, 34, 61, 206, 24, 134, 190, 118, 137, 206, 61, 167, 142, 93, 62, 109, 171, 127, 61, 144, 248, 50, 61, 244, 47, 141, 191, 63, 160, 139, 62, 246, 112, 202, 189, 227, 64, 155, 189, 99, 46, 46, 62, 207, 174, 124, 191, 16, 220, 137, 62, 186, 251, 2, 62, 50, 191, 139, 59, 59, 52, 169, 61, 151, 19, 181, 61, 230, 144, 149, 62, 124, 144, 131, 62, 116, 167, 100, 190, 120, 207, 76, 191, 201, 89, 41, 61, 170, 202, 140, 190, 150, 107, 46, 62, 8, 166, 177, 189, 128, 72, 162, 189, 251, 38, 178, 61, 222, 251, 13, 191, 164, 226, 130, 190, 28, 159, 69, 62, 172, 115, 92, 61, 175, 137, 41, 190, 171, 79, 133, 61, 196, 68, 67, 190, 93, 162, 9, 62, 5, 55, 37, 62, 247, 191, 193, 61, 245, 63, 255, 188, 244, 150, 120, 189, 210, 200, 52, 189, 110, 237, 232, 188, 204, 20, 245, 61, 150, 53, 85, 190, 155, 87, 171, 187, 21, 242, 70, 189, 195, 179, 164, 61, 37, 27, 151, 190, 181, 148, 6, 60, 175, 184, 79, 190, 86, 88, 199, 190, 80, 61, 189, 187, 48, 127, 154, 61, 140, 29, 93, 189, 129, 49, 249, 189, 178, 211, 32, 62, 71, 157, 215, 58, 183, 122, 133, 60, 3, 127, 35, 190, 99, 24, 110, 189, 23, 165, 195, 189, 177, 193, 21, 190, 140, 246, 164, 188, 27, 132, 66, 62, 64, 97, 90, 61, 144, 76, 22, 189, 60, 60, 68, 190, 77, 5, 138, 62, 110, 165, 3, 190, 197, 173, 160, 61, 88, 158, 103, 60, 74, 133, 206, 189, 226, 249, 134, 62, 86, 19, 50, 190, 96, 153, 140, 61, 104, 79, 245, 189, 123, 68, 141, 190, 156, 154, 63, 62, 208, 253, 115, 61, 49, 10, 220, 61, 245, 106, 106, 62, 240, 133, 29, 62, 210, 121, 135, 61, 201, 125, 66, 62, 121, 206, 86, 190, 177, 108, 131, 62, 125, 251, 202, 62, 43, 4, 17, 189, 230, 213, 240, 61, 156, 205, 70, 190, 81, 81, 118, 188, 175, 254, 14, 62, 16, 59, 91, 190, 51, 243, 89, 190, 224, 40, 179, 62, 73, 13, 82, 191, 162, 155, 200, 190, 145, 173, 167, 62, 122, 189, 251, 187, 94, 255, 210, 190, 75, 114, 22, 63, 21, 232, 212, 61, 174, 136, 201, 189, 92, 205, 171, 61, 2, 120, 166, 61, 207, 68, 185, 62, 202, 249, 186, 189, 133, 232, 43, 191, 69, 152, 162, 61, 172, 112, 175, 61, 111, 9, 49, 62, 134, 19, 150, 62, 43, 97, 102, 191, 85, 57, 62, 61, 36, 222, 95, 191, 14, 228, 43, 191, 160, 127, 167, 189, 91, 179, 133, 62, 220, 133, 56, 191, 215, 144, 28, 187, 128, 71, 212, 62, 185, 158, 235, 61, 250, 40, 136, 188, 153, 186, 244, 62, 62, 22, 73, 190, 223, 32, 80, 191, 160, 224, 238, 58, 25, 153, 87, 190, 41, 152, 162, 61, 32, 219, 72, 191, 29, 189, 12, 63, 126, 219, 155, 191, 97, 244, 13, 191, 209, 91, 147, 190, 180, 91, 144, 190, 75, 166, 30, 62, 97, 201, 127, 189, 96, 101, 144, 62, 224, 36, 1, 190, 173, 47, 237, 62, 8, 66, 136, 62, 56, 144, 251, 190, 202, 91, 213, 190, 89, 181, 24, 61, 15, 13, 39, 62, 159, 68, 62, 62, 175, 113, 218, 61, 98, 125, 107, 191, 42, 128, 72, 62, 103, 73, 25, 188, 252, 158, 220, 189, 93, 2, 22, 62, 101, 30, 103, 61, 6, 27, 149, 62, 134, 140, 77, 62, 250, 33, 253, 190, 56, 231, 18, 62, 93, 111, 242, 62, 175, 167, 43, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 10, 222, 61, 117, 86, 13, 62, 70, 23, 186, 189, 211, 151, 11, 189, 89, 37, 30, 61, 197, 45, 210, 62, 56, 167, 30, 61, 154, 48, 251, 61, 34, 107, 69, 62, 196, 103, 21, 189, 81, 56, 134, 62, 243, 209, 255, 189, 155, 170, 134, 190, 196, 22, 27, 61, 145, 138, 233, 189, 120, 144, 78, 190, 162, 30, 163, 60, 36, 2, 226, 188, 150, 29, 139, 61, 49, 139, 102, 62, 98, 35, 204, 189, 79, 42, 250, 59, 60, 96, 179, 188, 14, 4, 144, 189, 187, 134, 9, 190, 202, 13, 165, 61, 121, 241, 199, 189, 26, 56, 142, 61, 197, 13, 157, 189, 9, 166, 118, 189, 101, 138, 196, 189, 202, 11, 192, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 104, 212, 60, 46, 38, 179, 190, 226, 179, 46, 189, 156, 114, 209, 62, 30, 117, 125, 62, 41, 68, 157, 62, 137, 154, 15, 191, 123, 68, 73, 191, 218, 183, 51, 62, 40, 217, 83, 188, 66, 144, 11, 190, 161, 35, 119, 191, 239, 197, 164, 62, 66, 110, 122, 191, 143, 29, 187, 190, 245, 203, 211, 186, 32, 117, 221, 188, 50, 145, 237, 188, 23, 88, 44, 62, 202, 240, 243, 190, 253, 104, 63, 62, 134, 51, 40, 62, 140, 79, 43, 191, 251, 21, 136, 63, 149, 210, 180, 188, 55, 85, 83, 190, 55, 25, 3, 191, 31, 97, 26, 191, 114, 74, 61, 62, 251, 13, 157, 62, 33, 225, 103, 191, 1, 198, 73, 63, 104, 143, 84, 190, 56, 239, 30, 61, 202, 190, 110, 61, 91, 228, 123, 189, 59, 193, 197, 190, 32, 151, 141, 189, 204, 191, 106, 62, 39, 231, 95, 62, 239, 235, 135, 189, 218, 176, 128, 60, 169, 255, 156, 190, 234, 78, 2, 62, 185, 125, 8, 188, 35, 32, 216, 188, 19, 68, 131, 62, 61, 246, 214, 61, 189, 31, 39, 62, 42, 21, 0, 62, 71, 63, 244, 187, 150, 149, 78, 190, 166, 22, 192, 61, 76, 247, 50, 61, 24, 131, 141, 62, 234, 64, 148, 62, 254, 103, 5, 190, 21, 117, 147, 188, 104, 180, 244, 189, 108, 66, 151, 189, 25, 40, 255, 61, 193, 227, 131, 189, 7, 59, 95, 189, 235, 3, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 224, 91, 62, 199, 50, 202, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 219, 49, 63, 103, 37, 217, 62, 135, 19, 31, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 229, 166, 191, 241, 142, 99, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}