// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 173, 49, 63, 202, 224, 155, 189, 103, 210, 148, 190, 166, 246, 129, 62, 5, 41, 161, 191, 5, 49, 245, 190, 81, 168, 62, 188, 21, 230, 61, 191, 92, 233, 242, 62, 228, 125, 134, 190, 75, 209, 213, 190, 130, 229, 18, 63, 238, 23, 18, 191, 142, 61, 230, 191, 64, 110, 225, 190, 43, 91, 179, 62, 81, 186, 14, 63, 129, 186, 39, 62, 59, 80, 60, 63, 134, 77, 97, 190, 74, 188, 32, 63, 255, 37, 34, 191, 14, 157, 172, 190, 166, 160, 113, 190, 81, 173, 66, 190, 54, 53, 166, 63, 11, 180, 125, 63, 65, 126, 13, 191, 125, 230, 223, 61, 98, 232, 15, 191, 190, 173, 33, 63, 54, 233, 40, 191, 159, 200, 8, 189, 206, 86, 157, 190, 8, 83, 87, 63, 36, 26, 31, 188, 136, 104, 232, 190, 129, 133, 36, 191, 251, 241, 209, 189, 220, 61, 204, 62, 42, 32, 221, 190, 160, 197, 31, 63, 178, 131, 49, 190, 85, 219, 188, 59, 81, 129, 4, 191, 172, 57, 116, 63, 16, 222, 214, 62, 126, 195, 10, 63, 39, 76, 165, 61, 204, 149, 249, 62, 22, 228, 218, 190, 11, 222, 55, 191, 139, 75, 230, 190, 57, 238, 16, 189, 67, 142, 8, 62, 101, 161, 11, 191, 7, 240, 177, 189, 91, 33, 63, 191, 75, 25, 139, 190, 245, 21, 188, 189, 118, 31, 237, 190, 49, 157, 193, 191, 143, 36, 178, 190, 128, 186, 229, 62, 172, 49, 48, 191, 65, 143, 231, 190, 47, 38, 213, 62, 120, 52, 119, 63, 182, 178, 5, 63, 33, 158, 175, 62, 64, 123, 144, 62, 53, 48, 40, 61, 115, 213, 200, 190, 32, 160, 236, 62, 17, 96, 240, 190, 32, 83, 223, 61, 100, 1, 178, 62, 227, 249, 90, 190, 38, 41, 68, 63, 65, 0, 2, 189, 88, 163, 198, 190, 25, 2, 4, 190, 215, 205, 15, 63, 10, 2, 186, 190, 47, 184, 226, 62, 37, 23, 0, 63, 179, 15, 176, 189, 105, 110, 195, 189, 7, 112, 136, 190, 113, 55, 201, 62, 25, 63, 55, 63, 52, 10, 167, 191, 143, 115, 145, 190, 79, 244, 42, 63, 103, 86, 54, 63, 156, 120, 157, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 155, 99, 191, 81, 180, 7, 62, 175, 85, 130, 190, 245, 240, 101, 188, 83, 146, 151, 190, 182, 44, 124, 191, 148, 192, 131, 190, 222, 92, 235, 190, 33, 194, 10, 61, 27, 235, 233, 62, 242, 184, 39, 63, 214, 185, 74, 63, 133, 179, 26, 63, 183, 7, 123, 62, 213, 254, 96, 189, 99, 109, 73, 190, 37, 58, 31, 63, 46, 205, 77, 63, 91, 57, 235, 62, 32, 84, 80, 63, 163, 62, 67, 61, 131, 196, 35, 62, 169, 153, 1, 63, 133, 82, 65, 191, 76, 85, 46, 190, 101, 253, 132, 62, 6, 155, 88, 190, 31, 211, 104, 62, 29, 173, 213, 62, 128, 159, 160, 189, 40, 230, 86, 189, 24, 206, 44, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 187, 151, 190, 17, 116, 162, 189, 123, 114, 72, 62, 185, 212, 20, 190, 122, 247, 21, 190, 123, 51, 199, 62, 199, 95, 137, 188, 221, 47, 4, 62, 222, 41, 15, 190, 178, 218, 21, 62, 114, 2, 137, 61, 232, 24, 209, 61, 166, 36, 61, 62, 212, 135, 52, 61, 185, 89, 133, 189, 53, 220, 170, 62, 76, 102, 205, 188, 129, 181, 185, 189, 31, 100, 7, 62, 74, 19, 220, 60, 96, 161, 129, 190, 253, 80, 213, 189, 237, 206, 40, 62, 56, 138, 122, 190, 165, 206, 216, 188, 120, 137, 65, 62, 198, 64, 88, 61, 76, 70, 159, 189, 191, 151, 59, 62, 42, 130, 47, 61, 214, 187, 24, 190, 122, 184, 215, 61, 142, 186, 58, 191, 151, 17, 125, 190, 44, 69, 17, 62, 123, 30, 206, 61, 175, 69, 239, 190, 84, 74, 242, 62, 173, 200, 59, 62, 213, 133, 206, 190, 142, 227, 164, 61, 76, 17, 225, 61, 173, 219, 218, 189, 9, 19, 165, 62, 74, 180, 75, 190, 120, 150, 132, 189, 86, 206, 16, 62, 82, 156, 57, 61, 105, 62, 128, 62, 128, 243, 222, 188, 50, 193, 108, 190, 54, 22, 137, 189, 92, 34, 210, 190, 165, 233, 55, 61, 248, 213, 149, 62, 219, 143, 202, 190, 23, 73, 101, 188, 196, 193, 213, 62, 3, 129, 32, 62, 198, 239, 110, 62, 181, 70, 246, 62, 222, 35, 9, 61, 44, 243, 34, 191, 213, 54, 29, 61, 124, 6, 36, 189, 68, 130, 247, 61, 109, 43, 16, 62, 89, 136, 141, 189, 46, 177, 79, 188, 146, 200, 28, 190, 54, 107, 14, 190, 33, 50, 36, 62, 197, 172, 255, 61, 148, 219, 20, 60, 100, 226, 4, 62, 173, 146, 11, 61, 25, 19, 10, 60, 11, 95, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 205, 140, 35, 61, 51, 24, 148, 189, 237, 123, 230, 189, 113, 34, 238, 60, 124, 25, 5, 190, 118, 211, 13, 189, 238, 188, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 199, 14, 95, 61, 110, 194, 202, 60, 78, 53, 42, 189, 38, 108, 220, 189, 51, 90, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 89, 129, 88, 189, 222, 34, 23, 62, 84, 105, 11, 191, 149, 192, 156, 62, 172, 223, 133, 191, 43, 217, 7, 191, 232, 55, 49, 190, 0, 184, 70, 190, 39, 234, 93, 62, 247, 211, 94, 189, 145, 27, 183, 62, 248, 99, 126, 62, 208, 169, 123, 62, 232, 94, 239, 61, 43, 113, 158, 190, 76, 135, 185, 189, 32, 196, 98, 190, 85, 97, 2, 62, 179, 62, 117, 62, 164, 211, 5, 62, 255, 184, 59, 191, 99, 47, 109, 62, 59, 33, 142, 189, 102, 80, 188, 62, 167, 199, 156, 61, 11, 202, 16, 190, 152, 58, 92, 62, 55, 102, 239, 61, 192, 204, 151, 190, 188, 220, 154, 189, 190, 250, 167, 62, 85, 192, 34, 190, 64, 5, 117, 190, 195, 245, 89, 189, 135, 232, 205, 61, 213, 234, 166, 189, 26, 159, 248, 61, 108, 207, 237, 189, 1, 122, 133, 61, 252, 116, 154, 60, 170, 72, 206, 190, 205, 82, 13, 62, 28, 60, 220, 62, 112, 36, 241, 190, 158, 125, 158, 62, 103, 110, 80, 62, 45, 147, 41, 62, 107, 102, 39, 190, 136, 220, 251, 59, 237, 155, 177, 60, 105, 144, 209, 62, 15, 157, 33, 62, 233, 192, 172, 190, 189, 251, 199, 61, 24, 8, 154, 61, 237, 132, 162, 57, 219, 183, 28, 61, 70, 75, 117, 189, 115, 96, 158, 189, 150, 211, 30, 62, 227, 33, 29, 189, 214, 132, 75, 62, 175, 66, 2, 62, 216, 170, 103, 191, 243, 110, 195, 61, 100, 186, 103, 61, 252, 80, 3, 191, 121, 188, 218, 62, 193, 193, 154, 190, 60, 137, 23, 191, 146, 129, 152, 190, 105, 116, 25, 189, 225, 104, 147, 188, 133, 251, 78, 62, 25, 161, 242, 61, 243, 90, 137, 62, 195, 13, 176, 62, 219, 149, 4, 63, 201, 161, 50, 190, 168, 10, 11, 190, 244, 185, 104, 189, 137, 71, 0, 62, 145, 179, 163, 62, 244, 220, 145, 62, 237, 139, 74, 61, 120, 69, 220, 59, 89, 102, 132, 61, 70, 79, 247, 62, 250, 145, 188, 61, 26, 155, 129, 60, 134, 49, 103, 61, 108, 131, 18, 62, 147, 184, 80, 190, 193, 207, 164, 62, 15, 189, 80, 62, 135, 185, 240, 190, 223, 13, 254, 62, 4, 127, 51, 62, 206, 241, 93, 62, 141, 144, 159, 62, 140, 192, 150, 189, 87, 72, 231, 189, 127, 6, 86, 189, 211, 185, 35, 190, 100, 241, 133, 189, 228, 60, 173, 59, 43, 235, 20, 62, 52, 82, 160, 191, 140, 82, 10, 62, 17, 22, 175, 188, 227, 173, 121, 190, 13, 214, 21, 191, 138, 132, 104, 190, 191, 4, 25, 190, 79, 240, 58, 62, 191, 255, 143, 189, 70, 58, 133, 62, 120, 92, 154, 62, 120, 205, 209, 190, 115, 249, 148, 60, 18, 70, 130, 61, 186, 184, 189, 190, 204, 194, 94, 62, 216, 157, 31, 61, 44, 108, 151, 190, 129, 12, 165, 61, 164, 12, 140, 62, 49, 24, 237, 190, 55, 4, 26, 191, 89, 33, 212, 190, 2, 99, 79, 63, 128, 164, 206, 189, 108, 141, 87, 62, 162, 90, 168, 61, 124, 245, 100, 62, 177, 38, 137, 62, 226, 178, 138, 191, 130, 193, 155, 62, 223, 103, 6, 190, 167, 204, 152, 61, 158, 5, 175, 189, 75, 235, 7, 191, 40, 241, 112, 60, 255, 47, 33, 61, 42, 94, 130, 62, 195, 134, 3, 189, 117, 216, 130, 62, 253, 248, 27, 188, 116, 217, 85, 62, 15, 167, 226, 190, 62, 29, 229, 190, 242, 141, 163, 189, 106, 238, 144, 190, 12, 217, 252, 61, 61, 227, 112, 190, 22, 106, 17, 190, 110, 51, 211, 62, 117, 117, 157, 190, 211, 29, 17, 191, 32, 129, 22, 189, 22, 221, 46, 190, 250, 26, 38, 62, 195, 83, 253, 190, 50, 79, 59, 60, 242, 171, 207, 189, 81, 26, 228, 190, 41, 27, 126, 189, 199, 160, 88, 189, 31, 213, 116, 62, 43, 64, 95, 62, 6, 58, 144, 61, 150, 194, 81, 62, 255, 96, 155, 62, 210, 180, 87, 62, 38, 48, 60, 190, 251, 161, 30, 190, 180, 233, 37, 62, 144, 213, 245, 189, 143, 54, 38, 62, 90, 134, 9, 62, 161, 180, 95, 190, 233, 255, 18, 62, 64, 34, 35, 61, 96, 80, 134, 62, 43, 212, 121, 61, 156, 116, 214, 189, 90, 52, 41, 62, 156, 89, 167, 189, 48, 106, 200, 189, 242, 24, 67, 61, 61, 40, 84, 62, 69, 16, 128, 190, 198, 148, 240, 61, 86, 213, 105, 58, 195, 141, 21, 190, 64, 213, 169, 61, 110, 46, 44, 190, 210, 172, 50, 62, 204, 104, 237, 189, 54, 138, 18, 62, 21, 7, 59, 61, 190, 29, 52, 190, 89, 228, 73, 60, 30, 75, 24, 190, 153, 64, 19, 190, 250, 118, 177, 188, 181, 67, 124, 61, 17, 12, 205, 189, 59, 191, 57, 190, 197, 73, 21, 61, 232, 34, 30, 190, 197, 51, 97, 189, 21, 218, 25, 62, 10, 48, 93, 60, 179, 65, 33, 190, 55, 232, 247, 61, 245, 70, 204, 61, 99, 146, 91, 189, 200, 22, 78, 61, 246, 239, 228, 61, 78, 82, 32, 190, 116, 90, 126, 187, 201, 185, 15, 62, 170, 153, 200, 61, 121, 9, 165, 191, 211, 173, 151, 190, 55, 90, 50, 62, 162, 41, 44, 189, 46, 104, 148, 190, 215, 38, 12, 63, 106, 148, 136, 61, 145, 227, 100, 189, 2, 210, 177, 61, 138, 56, 205, 60, 132, 199, 155, 62, 101, 173, 171, 186, 184, 31, 146, 189, 49, 176, 50, 190, 124, 144, 242, 60, 192, 181, 131, 62, 203, 141, 144, 62, 224, 140, 178, 190, 180, 221, 175, 61, 48, 141, 189, 190, 69, 21, 93, 191, 182, 191, 254, 188, 81, 12, 70, 62, 176, 189, 237, 190, 101, 116, 91, 190, 37, 87, 132, 62, 158, 71, 155, 187, 155, 226, 28, 62, 249, 130, 224, 62, 205, 174, 110, 190, 15, 91, 41, 190, 178, 250, 138, 61, 17, 40, 131, 190, 132, 13, 130, 191, 206, 173, 43, 63, 206, 160, 249, 189, 118, 74, 39, 62, 62, 39, 220, 61, 71, 208, 234, 60, 120, 225, 104, 62, 144, 74, 214, 190, 143, 157, 221, 188, 87, 90, 56, 191, 109, 239, 160, 61, 65, 1, 89, 62, 248, 35, 74, 191, 135, 89, 191, 190, 15, 223, 149, 59, 81, 43, 46, 190, 231, 140, 158, 62, 43, 105, 215, 189, 163, 68, 93, 62, 209, 127, 28, 61, 180, 13, 7, 191, 125, 189, 113, 191, 157, 21, 33, 190, 177, 135, 28, 191, 227, 214, 31, 190, 128, 232, 161, 190, 216, 190, 78, 191, 239, 24, 239, 189, 20, 230, 160, 190, 245, 23, 191, 190, 191, 132, 117, 61, 1, 60, 28, 62, 46, 140, 112, 189, 165, 22, 22, 62, 81, 92, 55, 190, 63, 161, 195, 189, 163, 175, 163, 61, 27, 37, 208, 60, 85, 117, 10, 190, 30, 140, 52, 61, 164, 4, 22, 62, 4, 123, 25, 190, 217, 31, 115, 190, 143, 153, 31, 191, 201, 66, 193, 189, 18, 60, 233, 59, 72, 74, 24, 61, 102, 201, 119, 190, 173, 21, 254, 190, 238, 168, 60, 190, 107, 27, 88, 191, 84, 225, 7, 62, 126, 188, 27, 190, 7, 177, 72, 61, 39, 178, 14, 63, 47, 142, 163, 189, 227, 79, 153, 189, 77, 229, 21, 190, 185, 100, 248, 189, 184, 52, 157, 189, 14, 11, 3, 190, 14, 226, 40, 190, 124, 176, 209, 61, 41, 242, 17, 191, 3, 251, 117, 189, 94, 121, 200, 187, 119, 56, 128, 189, 54, 160, 25, 62, 15, 42, 171, 189, 71, 204, 153, 189, 25, 55, 104, 62, 200, 130, 170, 191, 27, 65, 75, 62, 90, 195, 155, 190, 151, 221, 58, 189, 88, 13, 137, 62, 107, 146, 134, 191, 124, 242, 76, 62, 142, 214, 194, 190, 93, 139, 72, 61, 106, 158, 39, 62, 159, 159, 5, 62, 249, 155, 33, 62, 144, 247, 13, 62, 207, 74, 169, 190, 98, 171, 181, 191, 8, 140, 50, 62, 6, 244, 147, 190, 16, 224, 16, 62, 101, 110, 153, 188, 131, 221, 39, 190, 222, 155, 89, 189, 140, 113, 183, 189, 251, 211, 85, 190, 28, 25, 117, 62, 22, 213, 24, 191, 150, 211, 44, 61, 112, 163, 48, 63, 196, 32, 194, 61, 82, 192, 103, 62, 148, 191, 32, 190, 171, 44, 148, 62, 12, 60, 197, 61, 19, 177, 243, 190, 203, 169, 175, 61, 233, 119, 220, 188, 189, 3, 99, 190, 76, 20, 13, 61, 155, 69, 136, 190, 175, 118, 27, 60, 23, 178, 85, 189, 66, 82, 136, 62, 68, 11, 152, 62, 88, 38, 220, 61, 40, 44, 45, 61, 219, 141, 229, 61, 82, 26, 55, 190, 79, 216, 3, 191, 99, 121, 242, 189, 166, 97, 217, 190, 109, 173, 6, 62, 222, 109, 162, 189, 98, 1, 119, 190, 118, 71, 186, 61, 25, 12, 250, 189, 237, 155, 186, 61, 203, 81, 192, 60, 1, 81, 250, 60, 29, 144, 35, 190, 51, 170, 101, 189, 1, 73, 95, 61, 239, 103, 126, 188, 208, 208, 37, 62, 85, 216, 136, 61, 135, 230, 227, 57, 80, 159, 190, 189, 116, 150, 32, 190, 51, 151, 18, 62, 16, 48, 217, 61, 221, 22, 182, 189, 166, 40, 201, 60, 162, 209, 247, 61, 208, 153, 231, 188, 241, 160, 196, 61, 212, 255, 204, 61, 83, 187, 174, 189, 207, 53, 180, 60, 12, 197, 36, 190, 51, 212, 14, 189, 78, 3, 239, 60, 241, 243, 153, 61, 49, 12, 19, 189, 174, 152, 172, 61, 20, 101, 7, 189, 96, 192, 88, 189, 51, 57, 25, 190, 184, 26, 51, 190, 106, 167, 143, 189, 223, 62, 139, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 223, 112, 95, 188, 15, 46, 229, 188, 106, 61, 238, 61, 4, 193, 99, 61, 178, 122, 221, 61, 168, 157, 8, 61, 209, 148, 64, 190, 74, 216, 62, 190, 55, 77, 1, 190, 94, 128, 142, 60, 233, 125, 157, 61, 3, 61, 86, 190, 176, 129, 62, 189, 105, 223, 241, 60, 127, 76, 122, 61, 153, 182, 221, 189, 75, 81, 93, 189, 234, 23, 136, 188, 121, 170, 29, 190, 158, 105, 49, 190, 51, 89, 11, 190, 163, 159, 0, 188, 222, 57, 222, 61, 206, 240, 14, 190, 124, 55, 103, 61, 20, 162, 182, 189, 249, 82, 22, 190, 95, 69, 203, 60, 197, 145, 127, 61, 129, 135, 152, 61, 70, 21, 173, 61, 24, 42, 133, 189, 85, 108, 16, 62, 121, 116, 107, 62, 159, 221, 85, 62, 156, 78, 139, 189, 120, 103, 49, 188, 121, 91, 9, 191, 110, 30, 22, 189, 152, 23, 223, 61, 102, 182, 24, 60, 139, 87, 39, 62, 107, 203, 104, 62, 78, 193, 74, 190, 165, 193, 183, 61, 35, 199, 157, 62, 136, 210, 28, 62, 113, 192, 10, 190, 67, 5, 6, 62, 240, 127, 61, 189, 197, 50, 33, 62, 150, 51, 245, 189, 202, 220, 16, 189, 80, 222, 184, 61, 52, 19, 175, 59, 20, 101, 232, 61, 23, 215, 230, 61, 36, 237, 191, 61, 200, 199, 66, 62, 54, 26, 29, 190, 146, 182, 31, 62, 122, 31, 121, 62, 244, 119, 106, 62, 161, 160, 234, 61, 120, 169, 16, 191, 173, 226, 70, 190, 12, 183, 103, 188, 155, 154, 70, 191, 61, 94, 49, 62, 139, 45, 113, 189, 228, 124, 80, 62, 147, 133, 172, 61, 176, 252, 185, 190, 201, 37, 147, 189, 28, 84, 55, 62, 65, 241, 22, 61, 155, 116, 126, 190, 75, 214, 116, 60, 169, 213, 174, 187, 149, 10, 231, 62, 169, 142, 6, 62, 125, 215, 147, 61, 207, 211, 230, 61, 180, 196, 13, 62, 104, 254, 58, 62, 223, 252, 209, 189, 240, 44, 184, 187, 214, 15, 229, 61, 51, 77, 75, 189, 238, 251, 14, 62, 101, 140, 41, 190, 130, 9, 179, 188, 138, 138, 95, 62, 164, 89, 244, 190, 165, 81, 142, 190, 95, 228, 111, 190, 129, 141, 214, 62, 103, 249, 19, 62, 79, 82, 38, 63, 132, 179, 69, 190, 174, 95, 251, 61, 160, 121, 235, 61, 7, 200, 71, 190, 181, 51, 200, 59, 131, 240, 145, 190, 130, 201, 22, 62, 142, 102, 62, 190, 124, 223, 77, 189, 235, 70, 68, 189, 154, 70, 44, 190, 148, 194, 81, 62, 100, 113, 165, 189, 93, 59, 37, 62, 92, 128, 226, 189, 131, 64, 119, 61, 189, 44, 134, 60, 27, 250, 57, 62, 95, 213, 251, 189, 34, 228, 222, 188, 18, 85, 203, 189, 100, 157, 154, 61, 178, 138, 108, 188, 74, 151, 60, 59, 49, 130, 155, 189, 75, 242, 0, 62, 152, 202, 20, 190, 94, 210, 5, 190, 143, 85, 27, 190, 179, 219, 24, 190, 160, 65, 220, 189, 165, 100, 197, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 108, 47, 80, 61, 152, 68, 176, 188, 205, 226, 66, 61, 227, 81, 153, 189, 87, 158, 191, 61, 184, 224, 88, 61, 1, 89, 36, 61, 209, 18, 36, 189, 79, 48, 119, 189, 77, 67, 29, 190, 149, 222, 26, 190, 0, 61, 32, 190, 213, 206, 162, 189, 101, 188, 208, 189, 45, 146, 232, 188, 121, 54, 100, 189, 195, 49, 39, 190, 154, 254, 154, 61, 135, 216, 236, 189, 13, 73, 17, 62, 71, 90, 227, 61, 200, 90, 39, 190, 162, 66, 77, 61, 99, 162, 22, 190, 101, 90, 244, 187, 195, 172, 41, 189, 50, 177, 236, 190, 45, 234, 99, 190, 9, 18, 217, 62, 96, 130, 58, 190, 85, 76, 148, 62, 46, 13, 185, 62, 248, 30, 186, 62, 66, 87, 173, 62, 1, 245, 67, 190, 165, 225, 103, 62, 124, 132, 192, 189, 69, 7, 46, 188, 20, 104, 79, 189, 205, 30, 149, 189, 231, 80, 104, 62, 44, 85, 68, 62, 216, 246, 172, 62, 98, 154, 53, 61, 162, 5, 93, 62, 131, 174, 39, 190, 139, 4, 205, 62, 128, 104, 166, 190, 249, 23, 194, 59, 254, 179, 31, 191, 58, 126, 217, 190, 75, 193, 70, 61, 220, 148, 142, 189, 150, 147, 63, 190, 223, 246, 61, 62, 173, 0, 150, 190, 94, 99, 67, 190, 98, 114, 215, 61, 119, 84, 175, 190, 138, 142, 57, 191, 154, 121, 62, 61, 43, 86, 59, 190, 132, 149, 42, 190, 197, 218, 14, 191, 197, 116, 164, 62, 86, 247, 16, 62, 238, 11, 166, 62, 39, 87, 68, 62, 5, 239, 253, 190, 118, 85, 47, 62, 7, 173, 167, 191, 161, 81, 249, 189, 61, 198, 114, 189, 127, 189, 100, 62, 197, 209, 102, 62, 151, 151, 107, 191, 58, 197, 191, 190, 159, 5, 75, 191, 234, 33, 203, 188, 220, 48, 54, 191, 59, 93, 191, 61, 134, 220, 43, 63, 65, 149, 132, 59, 138, 209, 130, 62, 184, 67, 46, 191, 202, 242, 244, 62, 111, 151, 3, 63, 96, 13, 206, 189, 164, 163, 162, 191, 19, 207, 232, 62, 181, 110, 61, 189, 111, 103, 14, 190, 85, 107, 71, 188, 250, 48, 172, 189, 132, 78, 41, 62, 234, 126, 40, 190, 146, 74, 62, 189, 66, 234, 100, 61, 248, 47, 235, 61, 7, 99, 220, 189, 36, 208, 30, 62, 211, 169, 173, 59, 238, 214, 252, 189, 240, 62, 247, 58, 81, 164, 101, 61, 115, 117, 59, 189, 19, 173, 24, 190, 247, 246, 3, 190, 219, 182, 209, 189, 109, 124, 2, 61, 6, 38, 129, 61, 192, 110, 38, 188, 128, 222, 195, 189, 254, 3, 216, 59, 163, 206, 250, 61, 56, 125, 254, 59, 184, 135, 35, 190, 216, 196, 197, 61, 236, 47, 176, 61, 43, 127, 16, 190, 251, 200, 45, 189, 249, 86, 7, 62, 234, 172, 12, 191, 20, 68, 132, 190, 253, 245, 204, 62, 62, 226, 192, 189, 183, 199, 52, 62, 132, 182, 233, 62, 128, 218, 90, 62, 97, 156, 139, 61, 106, 110, 134, 189, 3, 61, 8, 62, 135, 231, 141, 61, 205, 14, 189, 189, 210, 91, 115, 61, 165, 90, 135, 190, 128, 159, 70, 62, 6, 105, 104, 62, 110, 221, 157, 62, 20, 151, 74, 189, 158, 159, 18, 62, 120, 119, 150, 190, 50, 158, 91, 62, 72, 163, 22, 190, 145, 220, 190, 189, 152, 24, 5, 62, 246, 47, 124, 190, 229, 175, 116, 62, 64, 198, 145, 190, 188, 242, 1, 61, 8, 9, 147, 62, 235, 56, 196, 188, 140, 246, 154, 190, 205, 146, 17, 189, 190, 26, 6, 62, 165, 60, 170, 189, 152, 15, 239, 62, 207, 18, 109, 190, 218, 17, 24, 62, 165, 164, 68, 63, 138, 82, 242, 62, 1, 73, 170, 61, 171, 171, 197, 189, 122, 207, 217, 59, 252, 196, 36, 62, 35, 153, 166, 190, 185, 7, 173, 190, 35, 217, 28, 188, 118, 204, 29, 62, 65, 233, 76, 62, 141, 99, 66, 62, 130, 162, 222, 190, 169, 200, 102, 61, 227, 119, 30, 191, 142, 196, 153, 189, 254, 232, 79, 61, 162, 203, 123, 61, 18, 144, 2, 191, 252, 78, 180, 190, 89, 22, 160, 189, 60, 20, 224, 61, 177, 16, 144, 190, 72, 36, 200, 60, 235, 119, 180, 190, 72, 169, 193, 190, 187, 114, 149, 62, 30, 24, 232, 190, 219, 94, 152, 190, 175, 110, 242, 61, 90, 11, 43, 190, 12, 252, 160, 61, 167, 142, 93, 62, 109, 171, 127, 61, 9, 39, 25, 61, 99, 10, 164, 191, 108, 177, 134, 62, 215, 203, 2, 190, 28, 46, 134, 189, 142, 246, 31, 62, 137, 155, 103, 191, 224, 22, 132, 62, 186, 251, 2, 62, 117, 236, 151, 187, 228, 21, 148, 61, 118, 22, 138, 61, 4, 142, 145, 62, 68, 121, 111, 62, 73, 96, 119, 190, 209, 114, 143, 191, 201, 89, 41, 61, 29, 166, 141, 190, 176, 235, 37, 62, 38, 20, 179, 189, 54, 210, 169, 189, 43, 233, 180, 61, 101, 61, 241, 190, 16, 87, 158, 190, 28, 159, 69, 62, 172, 115, 92, 61, 175, 137, 41, 190, 171, 79, 133, 61, 196, 68, 67, 190, 93, 162, 9, 62, 5, 55, 37, 62, 247, 191, 193, 61, 245, 63, 255, 188, 244, 150, 120, 189, 210, 200, 52, 189, 110, 237, 232, 188, 204, 20, 245, 61, 150, 53, 85, 190, 155, 87, 171, 187, 21, 242, 70, 189, 195, 179, 164, 61, 37, 27, 151, 190, 181, 148, 6, 60, 175, 184, 79, 190, 86, 88, 199, 190, 80, 61, 189, 187, 48, 127, 154, 61, 140, 29, 93, 189, 129, 49, 249, 189, 178, 211, 32, 62, 71, 157, 215, 58, 183, 122, 133, 60, 3, 127, 35, 190, 99, 24, 110, 189, 23, 165, 195, 189, 177, 193, 21, 190, 140, 246, 164, 188, 165, 116, 114, 62, 211, 13, 145, 61, 105, 128, 204, 189, 33, 186, 91, 190, 88, 58, 151, 62, 188, 191, 154, 190, 165, 138, 243, 61, 242, 226, 166, 60, 182, 202, 110, 189, 158, 217, 143, 62, 193, 191, 112, 190, 45, 208, 69, 61, 8, 132, 181, 189, 225, 150, 136, 190, 105, 182, 82, 62, 159, 241, 137, 61, 66, 146, 175, 61, 21, 55, 123, 62, 141, 173, 216, 61, 16, 107, 154, 61, 217, 184, 91, 62, 66, 224, 96, 190, 90, 202, 126, 62, 125, 251, 202, 62, 6, 221, 163, 188, 115, 16, 201, 61, 231, 140, 109, 190, 93, 217, 197, 188, 47, 112, 214, 61, 227, 250, 104, 190, 108, 228, 80, 190, 90, 184, 225, 62, 122, 78, 114, 191, 242, 201, 240, 190, 55, 216, 164, 62, 58, 231, 198, 188, 123, 1, 213, 190, 245, 94, 63, 63, 88, 168, 211, 61, 199, 94, 187, 189, 146, 4, 151, 61, 239, 140, 132, 61, 122, 4, 191, 62, 123, 184, 94, 189, 212, 13, 61, 191, 222, 168, 161, 61, 97, 144, 125, 61, 160, 16, 57, 62, 182, 183, 164, 62, 147, 149, 111, 191, 95, 131, 123, 61, 51, 212, 106, 191, 68, 216, 80, 191, 33, 14, 184, 189, 245, 170, 135, 62, 220, 133, 56, 191, 37, 75, 109, 188, 101, 180, 222, 62, 84, 168, 10, 62, 20, 55, 232, 60, 246, 176, 251, 62, 77, 187, 84, 190, 68, 82, 93, 191, 214, 231, 190, 60, 160, 38, 242, 189, 174, 23, 214, 61, 142, 92, 69, 191, 61, 205, 13, 63, 52, 130, 187, 191, 3, 240, 13, 191, 176, 152, 146, 190, 139, 46, 164, 190, 99, 186, 255, 61, 70, 168, 196, 188, 109, 166, 149, 62, 123, 97, 31, 190, 244, 142, 4, 63, 237, 172, 135, 62, 252, 248, 250, 190, 169, 241, 214, 190, 3, 135, 95, 61, 71, 133, 75, 62, 207, 17, 83, 62, 177, 2, 28, 62, 177, 225, 136, 191, 107, 161, 86, 62, 155, 95, 184, 188, 252, 158, 220, 189, 133, 231, 69, 62, 51, 200, 151, 61, 215, 155, 151, 62, 145, 132, 105, 62, 35, 149, 247, 190, 51, 117, 20, 62, 187, 175, 5, 63, 57, 221, 83, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 63, 245, 61, 130, 153, 5, 62, 70, 23, 186, 189, 107, 109, 255, 188, 94, 133, 32, 61, 67, 32, 199, 62, 178, 160, 180, 61, 189, 76, 236, 61, 74, 176, 45, 62, 196, 103, 21, 189, 211, 54, 109, 62, 254, 146, 169, 189, 155, 170, 134, 190, 183, 82, 136, 61, 215, 244, 86, 188, 120, 144, 78, 190, 162, 30, 163, 60, 36, 2, 226, 188, 101, 116, 61, 61, 71, 174, 126, 62, 62, 32, 251, 189, 79, 42, 250, 59, 113, 119, 171, 188, 159, 31, 99, 189, 79, 104, 10, 190, 137, 149, 131, 61, 227, 11, 2, 190, 233, 242, 131, 61, 197, 13, 157, 189, 182, 80, 195, 189, 63, 119, 188, 189, 43, 6, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 76, 38, 61, 155, 143, 165, 190, 226, 179, 46, 189, 202, 83, 217, 62, 123, 115, 137, 62, 93, 109, 136, 62, 27, 230, 21, 191, 114, 43, 86, 191, 223, 122, 19, 62, 40, 217, 83, 188, 0, 20, 11, 190, 4, 158, 126, 191, 239, 197, 164, 62, 193, 18, 127, 191, 195, 32, 7, 191, 245, 203, 211, 186, 32, 117, 221, 188, 50, 145, 237, 188, 63, 174, 29, 62, 55, 16, 7, 191, 122, 2, 80, 62, 134, 51, 40, 62, 74, 88, 44, 191, 52, 56, 152, 63, 192, 70, 181, 188, 102, 123, 74, 190, 167, 174, 18, 191, 249, 99, 32, 191, 114, 74, 61, 62, 24, 105, 172, 62, 39, 135, 125, 191, 103, 12, 106, 63, 250, 51, 98, 190, 152, 177, 113, 60, 202, 190, 110, 61, 76, 30, 63, 189, 185, 141, 205, 190, 162, 237, 128, 189, 6, 101, 38, 62, 216, 207, 0, 62, 158, 182, 138, 189, 218, 176, 128, 60, 48, 171, 175, 190, 138, 190, 200, 61, 185, 125, 8, 188, 224, 18, 88, 189, 78, 73, 122, 62, 61, 246, 214, 61, 189, 31, 39, 62, 42, 21, 0, 62, 167, 30, 234, 187, 129, 143, 104, 190, 104, 153, 224, 61, 76, 247, 50, 61, 208, 94, 165, 62, 173, 35, 145, 62, 28, 100, 5, 190, 156, 148, 20, 187, 223, 237, 151, 189, 166, 178, 184, 189, 25, 40, 255, 61, 250, 19, 75, 189, 250, 79, 62, 189, 158, 164, 224, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 232, 71, 62, 123, 21, 230, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 20, 96, 191, 95, 68, 248, 63, 205, 71, 171, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 51, 42, 64, 255, 186, 210, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}