// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 31, 80, 62, 241, 133, 165, 190, 91, 207, 141, 190, 224, 104, 151, 62, 115, 79, 68, 191, 209, 70, 0, 191, 147, 238, 137, 60, 10, 242, 81, 191, 131, 217, 247, 62, 200, 243, 139, 190, 183, 99, 181, 190, 255, 143, 19, 63, 10, 242, 65, 191, 200, 238, 138, 191, 185, 250, 254, 190, 188, 161, 84, 62, 140, 199, 225, 62, 171, 181, 221, 61, 120, 166, 22, 63, 78, 1, 118, 190, 119, 47, 34, 63, 21, 53, 17, 191, 138, 83, 106, 190, 171, 221, 161, 190, 129, 86, 175, 189, 60, 91, 105, 63, 202, 81, 124, 63, 34, 160, 168, 190, 12, 153, 206, 61, 147, 235, 29, 191, 197, 219, 55, 63, 86, 211, 169, 190, 98, 107, 194, 189, 173, 101, 210, 189, 66, 182, 55, 63, 79, 101, 69, 61, 104, 33, 3, 191, 211, 97, 163, 190, 27, 248, 1, 189, 42, 213, 243, 62, 95, 14, 132, 190, 77, 57, 45, 63, 82, 152, 105, 189, 153, 21, 82, 62, 104, 205, 11, 191, 21, 11, 94, 63, 178, 111, 160, 62, 144, 245, 8, 63, 67, 137, 17, 62, 129, 158, 221, 62, 20, 235, 230, 190, 36, 193, 85, 191, 253, 72, 70, 190, 76, 80, 54, 189, 204, 105, 174, 62, 38, 82, 173, 190, 95, 83, 151, 189, 118, 62, 59, 191, 141, 57, 86, 190, 28, 201, 88, 189, 162, 179, 202, 190, 22, 36, 145, 191, 100, 147, 184, 190, 54, 142, 225, 62, 164, 166, 16, 191, 223, 191, 219, 190, 62, 40, 12, 63, 95, 1, 78, 63, 120, 116, 1, 63, 33, 158, 175, 62, 64, 123, 144, 62, 53, 48, 40, 61, 194, 205, 246, 190, 98, 160, 223, 62, 173, 145, 242, 190, 58, 185, 220, 61, 146, 18, 16, 63, 157, 147, 76, 190, 17, 208, 41, 63, 153, 64, 57, 190, 50, 164, 211, 190, 25, 121, 86, 190, 2, 210, 241, 62, 20, 125, 199, 190, 67, 66, 233, 62, 195, 143, 27, 63, 104, 8, 240, 189, 203, 137, 46, 62, 90, 106, 145, 190, 117, 70, 208, 62, 153, 101, 61, 63, 218, 136, 124, 191, 145, 101, 139, 190, 124, 215, 132, 62, 15, 193, 150, 62, 230, 152, 187, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 154, 28, 191, 53, 65, 6, 62, 213, 121, 182, 189, 225, 29, 110, 190, 100, 100, 203, 190, 33, 104, 102, 191, 255, 116, 120, 190, 81, 129, 120, 190, 20, 23, 190, 61, 75, 249, 6, 63, 251, 208, 28, 63, 221, 198, 9, 63, 163, 116, 10, 63, 166, 89, 91, 62, 109, 215, 249, 61, 129, 130, 42, 190, 211, 118, 10, 63, 69, 166, 38, 63, 236, 92, 21, 63, 29, 157, 66, 63, 111, 160, 177, 61, 10, 105, 64, 62, 224, 122, 8, 63, 133, 82, 65, 191, 198, 79, 38, 190, 120, 227, 132, 61, 164, 191, 143, 188, 240, 18, 36, 62, 136, 195, 116, 62, 153, 239, 240, 188, 144, 40, 2, 190, 65, 135, 26, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 16, 191, 189, 144, 133, 128, 58, 205, 177, 100, 62, 193, 107, 221, 189, 226, 216, 176, 189, 177, 123, 160, 188, 0, 230, 2, 189, 114, 116, 237, 61, 24, 255, 146, 189, 149, 148, 254, 61, 9, 133, 18, 62, 252, 123, 68, 61, 57, 176, 30, 62, 251, 210, 168, 61, 237, 63, 139, 59, 42, 164, 136, 62, 100, 226, 104, 189, 129, 237, 134, 189, 82, 229, 69, 62, 104, 183, 43, 61, 156, 68, 105, 188, 140, 6, 191, 189, 207, 33, 45, 62, 56, 138, 122, 190, 197, 104, 16, 60, 56, 44, 54, 62, 15, 130, 106, 61, 82, 122, 136, 189, 59, 23, 23, 62, 222, 211, 173, 61, 252, 43, 204, 189, 135, 42, 12, 62, 218, 222, 8, 191, 88, 170, 11, 190, 3, 134, 49, 62, 3, 51, 216, 61, 152, 2, 174, 190, 177, 94, 0, 61, 90, 59, 76, 62, 238, 121, 130, 190, 244, 13, 138, 61, 253, 150, 220, 61, 10, 69, 5, 190, 197, 220, 59, 62, 170, 231, 30, 190, 171, 188, 171, 189, 56, 52, 217, 61, 50, 205, 47, 61, 26, 16, 213, 61, 50, 103, 82, 189, 254, 226, 132, 190, 131, 120, 211, 189, 64, 139, 168, 190, 116, 92, 199, 60, 123, 12, 133, 62, 219, 143, 202, 190, 243, 134, 165, 189, 83, 46, 103, 62, 188, 4, 201, 61, 168, 122, 51, 62, 126, 247, 148, 62, 83, 147, 12, 61, 167, 235, 12, 191, 185, 160, 149, 187, 124, 6, 36, 189, 68, 130, 247, 61, 109, 43, 16, 62, 89, 136, 141, 189, 46, 177, 79, 188, 146, 200, 28, 190, 54, 107, 14, 190, 33, 50, 36, 62, 197, 172, 255, 61, 148, 219, 20, 60, 100, 226, 4, 62, 173, 146, 11, 61, 25, 19, 10, 60, 11, 95, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 205, 140, 35, 61, 51, 24, 148, 189, 237, 123, 230, 189, 113, 34, 238, 60, 124, 25, 5, 190, 118, 211, 13, 189, 238, 188, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 199, 14, 95, 61, 110, 194, 202, 60, 78, 53, 42, 189, 38, 108, 220, 189, 51, 90, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 186, 141, 0, 190, 94, 9, 248, 61, 19, 84, 11, 191, 234, 128, 163, 62, 227, 74, 30, 191, 227, 200, 215, 189, 115, 146, 45, 190, 32, 202, 228, 189, 203, 2, 121, 62, 111, 18, 44, 190, 114, 171, 199, 62, 54, 80, 118, 62, 137, 130, 15, 62, 106, 253, 23, 62, 21, 178, 162, 190, 89, 149, 153, 189, 12, 210, 52, 190, 14, 183, 78, 61, 221, 244, 141, 62, 31, 15, 130, 61, 97, 154, 154, 190, 31, 116, 151, 62, 50, 117, 44, 189, 102, 80, 188, 62, 216, 8, 82, 61, 219, 199, 111, 189, 140, 136, 148, 62, 105, 222, 44, 61, 141, 50, 133, 190, 112, 219, 128, 189, 140, 244, 169, 62, 82, 215, 54, 189, 120, 198, 181, 190, 50, 51, 113, 189, 126, 149, 210, 60, 98, 49, 213, 189, 200, 145, 27, 62, 108, 207, 237, 189, 24, 118, 232, 61, 77, 173, 29, 61, 78, 225, 132, 190, 237, 155, 0, 62, 61, 143, 190, 62, 154, 151, 250, 190, 102, 14, 113, 62, 137, 119, 128, 62, 64, 240, 52, 62, 131, 171, 223, 189, 54, 43, 222, 188, 205, 49, 86, 189, 156, 119, 175, 62, 174, 206, 185, 61, 202, 211, 104, 190, 227, 237, 132, 61, 68, 163, 12, 62, 237, 132, 162, 57, 162, 52, 123, 61, 220, 8, 220, 189, 76, 190, 12, 190, 251, 34, 23, 62, 21, 110, 218, 189, 172, 238, 71, 62, 26, 41, 133, 61, 170, 117, 137, 190, 34, 108, 242, 189, 160, 236, 147, 60, 246, 95, 6, 191, 67, 133, 232, 62, 12, 222, 134, 190, 67, 2, 101, 190, 9, 215, 153, 190, 148, 97, 205, 188, 247, 192, 106, 59, 252, 136, 41, 62, 215, 171, 96, 61, 231, 95, 127, 62, 241, 253, 162, 62, 186, 178, 11, 63, 73, 144, 70, 190, 246, 77, 33, 190, 184, 66, 129, 189, 105, 17, 22, 62, 204, 158, 137, 62, 94, 222, 146, 62, 231, 133, 211, 61, 108, 185, 156, 188, 88, 249, 142, 61, 70, 79, 247, 62, 173, 32, 185, 61, 64, 225, 55, 58, 59, 99, 194, 60, 33, 218, 4, 62, 247, 23, 135, 190, 102, 191, 174, 62, 135, 75, 40, 62, 155, 252, 210, 190, 214, 179, 24, 63, 46, 251, 15, 62, 46, 47, 64, 62, 77, 120, 85, 62, 176, 155, 141, 189, 87, 72, 231, 189, 59, 25, 241, 189, 211, 1, 255, 189, 221, 86, 154, 187, 150, 61, 70, 61, 100, 157, 24, 61, 69, 63, 83, 191, 28, 198, 4, 62, 57, 131, 219, 189, 94, 153, 82, 190, 200, 15, 21, 190, 156, 131, 74, 190, 186, 56, 10, 190, 117, 3, 17, 62, 82, 177, 41, 189, 236, 110, 101, 62, 96, 112, 146, 62, 170, 99, 38, 190, 115, 249, 148, 60, 126, 229, 205, 61, 53, 153, 156, 190, 111, 179, 92, 62, 11, 145, 139, 61, 137, 98, 108, 190, 208, 38, 95, 189, 8, 195, 44, 62, 227, 110, 54, 189, 99, 120, 148, 190, 174, 115, 174, 190, 204, 69, 107, 63, 151, 108, 230, 61, 81, 79, 115, 62, 162, 90, 168, 61, 9, 5, 108, 62, 81, 205, 147, 62, 116, 178, 1, 191, 249, 4, 167, 62, 25, 182, 19, 190, 135, 9, 18, 60, 198, 19, 70, 60, 118, 152, 2, 191, 124, 24, 1, 61, 54, 20, 37, 190, 20, 180, 128, 62, 237, 188, 73, 61, 238, 179, 173, 62, 55, 1, 129, 61, 209, 239, 133, 62, 63, 25, 203, 190, 138, 169, 121, 190, 242, 141, 163, 189, 232, 240, 148, 190, 15, 89, 240, 61, 56, 163, 59, 190, 85, 77, 32, 190, 71, 168, 202, 62, 236, 137, 129, 190, 169, 57, 190, 190, 160, 167, 3, 60, 211, 85, 187, 190, 79, 178, 10, 62, 31, 180, 1, 191, 205, 179, 20, 61, 115, 229, 95, 189, 185, 26, 3, 190, 253, 145, 133, 189, 163, 111, 247, 188, 254, 35, 134, 62, 238, 137, 69, 62, 14, 200, 113, 60, 131, 137, 72, 62, 221, 130, 145, 62, 145, 170, 116, 62, 102, 116, 67, 190, 216, 84, 53, 190, 23, 31, 42, 62, 5, 50, 189, 189, 33, 53, 247, 61, 33, 191, 19, 62, 28, 50, 30, 190, 96, 219, 2, 62, 9, 235, 65, 61, 96, 80, 134, 62, 41, 27, 148, 61, 140, 1, 222, 189, 52, 196, 14, 62, 168, 93, 169, 189, 78, 155, 23, 190, 2, 177, 134, 61, 234, 195, 52, 62, 91, 10, 68, 190, 198, 148, 240, 61, 86, 213, 105, 58, 195, 141, 21, 190, 64, 213, 169, 61, 110, 46, 44, 190, 210, 172, 50, 62, 204, 104, 237, 189, 54, 138, 18, 62, 21, 7, 59, 61, 190, 29, 52, 190, 89, 228, 73, 60, 30, 75, 24, 190, 153, 64, 19, 190, 250, 118, 177, 188, 181, 67, 124, 61, 17, 12, 205, 189, 59, 191, 57, 190, 197, 73, 21, 61, 232, 34, 30, 190, 197, 51, 97, 189, 21, 218, 25, 62, 10, 48, 93, 60, 179, 65, 33, 190, 55, 232, 247, 61, 245, 70, 204, 61, 99, 146, 91, 189, 200, 22, 78, 61, 246, 239, 228, 61, 78, 82, 32, 190, 116, 90, 126, 187, 201, 185, 15, 62, 170, 153, 200, 61, 230, 66, 27, 191, 213, 27, 173, 189, 111, 201, 64, 62, 76, 14, 16, 189, 247, 176, 121, 189, 86, 58, 166, 188, 46, 24, 84, 61, 93, 232, 147, 61, 116, 229, 0, 62, 62, 80, 128, 60, 189, 114, 148, 62, 123, 122, 136, 189, 120, 217, 114, 188, 30, 240, 49, 190, 122, 134, 183, 61, 45, 54, 97, 62, 195, 64, 174, 61, 50, 123, 135, 190, 233, 57, 72, 61, 145, 116, 146, 190, 209, 48, 111, 189, 243, 33, 198, 189, 53, 255, 67, 62, 176, 189, 237, 190, 179, 221, 101, 190, 68, 76, 141, 61, 138, 197, 13, 190, 50, 222, 234, 61, 255, 207, 128, 62, 130, 145, 99, 190, 74, 11, 45, 190, 188, 184, 47, 61, 17, 40, 131, 190, 32, 205, 43, 191, 90, 219, 57, 63, 213, 156, 109, 190, 8, 213, 156, 62, 62, 39, 220, 61, 24, 171, 81, 62, 254, 185, 137, 62, 51, 230, 9, 191, 56, 239, 189, 58, 150, 197, 170, 190, 151, 103, 193, 187, 122, 125, 87, 62, 225, 1, 70, 191, 116, 234, 140, 190, 15, 223, 149, 59, 119, 234, 249, 189, 220, 12, 152, 62, 143, 118, 119, 188, 233, 168, 83, 62, 17, 106, 18, 62, 0, 113, 213, 190, 251, 90, 70, 191, 157, 21, 33, 190, 60, 134, 12, 191, 231, 4, 181, 189, 118, 95, 161, 190, 213, 9, 65, 191, 94, 116, 231, 189, 71, 208, 146, 190, 162, 241, 160, 190, 191, 132, 117, 61, 1, 60, 28, 62, 46, 140, 112, 189, 150, 148, 33, 62, 176, 88, 42, 190, 63, 161, 195, 189, 221, 252, 188, 61, 229, 123, 26, 61, 85, 117, 10, 190, 26, 103, 106, 61, 164, 4, 22, 62, 121, 101, 19, 190, 158, 185, 101, 190, 143, 153, 31, 191, 4, 35, 170, 189, 18, 60, 233, 59, 46, 168, 76, 61, 102, 201, 119, 190, 172, 10, 254, 190, 238, 168, 60, 190, 107, 27, 88, 191, 84, 225, 7, 62, 126, 188, 27, 190, 146, 198, 125, 61, 39, 178, 14, 63, 47, 142, 163, 189, 227, 79, 153, 189, 77, 229, 21, 190, 185, 100, 248, 189, 169, 197, 135, 189, 17, 57, 239, 189, 14, 226, 40, 190, 4, 29, 238, 61, 131, 66, 158, 190, 215, 32, 164, 188, 195, 174, 95, 62, 118, 220, 50, 190, 7, 171, 11, 62, 15, 42, 171, 189, 135, 38, 196, 189, 92, 59, 77, 62, 42, 103, 108, 191, 140, 110, 73, 62, 145, 228, 75, 190, 131, 205, 6, 61, 113, 122, 101, 62, 83, 234, 124, 191, 159, 101, 89, 62, 142, 214, 194, 190, 68, 222, 135, 61, 69, 234, 176, 61, 192, 96, 90, 62, 24, 227, 206, 61, 102, 124, 15, 62, 47, 69, 147, 190, 170, 97, 59, 191, 8, 140, 50, 62, 70, 2, 156, 190, 57, 76, 60, 62, 205, 252, 72, 61, 142, 78, 48, 190, 78, 112, 30, 61, 222, 199, 231, 189, 148, 184, 35, 190, 28, 25, 117, 62, 73, 161, 147, 190, 166, 32, 165, 60, 254, 147, 53, 63, 153, 222, 173, 61, 255, 41, 68, 62, 148, 191, 32, 190, 81, 96, 66, 62, 68, 219, 219, 61, 18, 66, 183, 190, 16, 236, 227, 61, 74, 9, 240, 189, 145, 47, 207, 189, 249, 69, 188, 188, 37, 184, 174, 190, 95, 169, 99, 61, 54, 80, 177, 60, 206, 250, 150, 62, 68, 23, 113, 62, 184, 176, 151, 61, 59, 125, 204, 59, 146, 47, 80, 61, 230, 217, 39, 190, 77, 172, 189, 190, 99, 121, 242, 189, 222, 25, 201, 190, 133, 144, 72, 62, 70, 155, 254, 187, 68, 57, 90, 190, 45, 104, 51, 62, 152, 237, 25, 190, 207, 188, 108, 186, 109, 132, 0, 189, 1, 81, 250, 60, 29, 144, 35, 190, 51, 170, 101, 189, 1, 73, 95, 61, 239, 103, 126, 188, 208, 208, 37, 62, 85, 216, 136, 61, 135, 230, 227, 57, 80, 159, 190, 189, 116, 150, 32, 190, 51, 151, 18, 62, 16, 48, 217, 61, 221, 22, 182, 189, 166, 40, 201, 60, 162, 209, 247, 61, 208, 153, 231, 188, 241, 160, 196, 61, 212, 255, 204, 61, 83, 187, 174, 189, 207, 53, 180, 60, 12, 197, 36, 190, 51, 212, 14, 189, 78, 3, 239, 60, 241, 243, 153, 61, 49, 12, 19, 189, 174, 152, 172, 61, 20, 101, 7, 189, 96, 192, 88, 189, 51, 57, 25, 190, 184, 26, 51, 190, 106, 167, 143, 189, 223, 62, 139, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 223, 112, 95, 188, 15, 46, 229, 188, 106, 61, 238, 61, 4, 193, 99, 61, 178, 122, 221, 61, 168, 157, 8, 61, 209, 148, 64, 190, 74, 216, 62, 190, 55, 77, 1, 190, 94, 128, 142, 60, 233, 125, 157, 61, 3, 61, 86, 190, 176, 129, 62, 189, 105, 223, 241, 60, 127, 76, 122, 61, 153, 182, 221, 189, 75, 81, 93, 189, 234, 23, 136, 188, 121, 170, 29, 190, 158, 105, 49, 190, 51, 89, 11, 190, 163, 159, 0, 188, 222, 57, 222, 61, 206, 240, 14, 190, 124, 55, 103, 61, 20, 162, 182, 189, 249, 82, 22, 190, 95, 69, 203, 60, 197, 145, 127, 61, 129, 135, 152, 61, 70, 21, 173, 61, 24, 42, 133, 189, 172, 226, 139, 189, 159, 125, 79, 62, 75, 178, 76, 62, 55, 183, 31, 189, 32, 185, 24, 61, 137, 192, 149, 189, 202, 182, 14, 189, 59, 89, 9, 62, 132, 155, 49, 59, 206, 200, 11, 62, 29, 210, 41, 62, 186, 16, 156, 190, 246, 36, 192, 61, 227, 52, 169, 62, 161, 200, 10, 62, 62, 154, 36, 190, 203, 152, 237, 61, 155, 183, 36, 188, 0, 105, 234, 61, 71, 186, 224, 189, 168, 86, 170, 60, 233, 132, 167, 61, 1, 63, 250, 188, 20, 101, 232, 61, 174, 243, 233, 61, 32, 181, 61, 61, 97, 134, 54, 62, 15, 19, 48, 190, 251, 99, 41, 61, 224, 140, 133, 62, 116, 228, 85, 62, 188, 109, 41, 62, 57, 200, 122, 190, 99, 165, 6, 190, 247, 90, 164, 62, 134, 4, 1, 191, 24, 71, 212, 61, 181, 126, 5, 190, 84, 39, 117, 62, 59, 73, 37, 61, 242, 182, 145, 190, 135, 28, 135, 189, 229, 9, 89, 62, 91, 146, 132, 189, 252, 3, 31, 190, 80, 119, 31, 61, 57, 32, 98, 187, 137, 167, 193, 62, 168, 110, 187, 61, 95, 123, 201, 61, 82, 144, 19, 62, 33, 127, 44, 62, 36, 100, 38, 62, 56, 196, 210, 189, 113, 34, 247, 189, 214, 15, 229, 61, 243, 8, 149, 189, 13, 12, 229, 61, 64, 139, 59, 190, 108, 151, 26, 189, 213, 119, 51, 62, 253, 100, 139, 190, 136, 125, 101, 190, 177, 30, 16, 190, 255, 12, 73, 62, 134, 81, 216, 61, 139, 255, 201, 62, 0, 28, 8, 190, 27, 0, 245, 61, 160, 121, 235, 61, 160, 17, 13, 61, 41, 188, 128, 60, 53, 168, 255, 189, 150, 208, 10, 62, 197, 108, 142, 190, 228, 151, 84, 189, 82, 67, 40, 189, 0, 50, 241, 189, 94, 219, 61, 62, 162, 246, 4, 60, 113, 213, 18, 62, 26, 188, 132, 189, 15, 115, 12, 189, 207, 246, 36, 61, 89, 101, 35, 62, 228, 162, 31, 190, 248, 224, 96, 188, 18, 85, 203, 189, 249, 218, 152, 61, 16, 66, 105, 189, 61, 114, 61, 189, 205, 29, 165, 189, 159, 22, 11, 61, 152, 170, 185, 189, 92, 128, 30, 190, 96, 219, 237, 189, 243, 186, 24, 190, 165, 41, 180, 189, 174, 239, 195, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 198, 1, 136, 61, 152, 68, 176, 188, 205, 226, 66, 61, 95, 224, 147, 189, 94, 144, 8, 62, 136, 223, 134, 61, 219, 228, 58, 61, 159, 144, 142, 188, 113, 60, 116, 189, 68, 148, 5, 190, 115, 164, 5, 190, 65, 236, 31, 190, 62, 199, 95, 189, 112, 193, 199, 189, 235, 159, 228, 188, 46, 111, 253, 188, 152, 118, 10, 190, 154, 254, 154, 61, 135, 216, 236, 189, 69, 106, 25, 62, 86, 159, 5, 62, 182, 111, 37, 190, 58, 37, 155, 61, 172, 102, 22, 190, 179, 196, 161, 60, 195, 172, 41, 189, 173, 220, 107, 190, 203, 25, 59, 190, 125, 9, 195, 62, 176, 20, 88, 190, 191, 230, 104, 62, 185, 20, 217, 60, 79, 105, 169, 62, 186, 216, 164, 62, 59, 16, 31, 190, 119, 175, 99, 62, 160, 34, 29, 189, 27, 235, 4, 62, 244, 134, 130, 189, 124, 35, 204, 189, 99, 177, 109, 62, 130, 51, 73, 62, 191, 161, 155, 62, 93, 200, 162, 186, 111, 41, 123, 62, 71, 209, 57, 190, 163, 229, 171, 62, 75, 111, 158, 190, 152, 46, 103, 61, 254, 179, 31, 191, 132, 19, 225, 190, 68, 119, 5, 61, 125, 163, 73, 189, 137, 111, 93, 190, 248, 190, 113, 62, 249, 192, 166, 190, 47, 166, 32, 190, 133, 193, 128, 61, 84, 139, 138, 60, 222, 235, 111, 188, 98, 16, 17, 62, 229, 3, 43, 190, 132, 149, 42, 190, 6, 204, 231, 60, 208, 90, 145, 62, 92, 28, 31, 62, 199, 33, 55, 62, 51, 131, 167, 189, 105, 167, 146, 190, 206, 247, 89, 190, 105, 253, 64, 191, 170, 191, 13, 190, 213, 27, 44, 190, 61, 42, 223, 61, 35, 59, 236, 189, 138, 223, 106, 191, 44, 209, 196, 61, 40, 228, 88, 191, 18, 182, 195, 188, 3, 28, 222, 61, 194, 104, 186, 189, 134, 220, 43, 63, 236, 53, 0, 190, 190, 88, 66, 189, 120, 240, 40, 190, 197, 13, 213, 61, 28, 19, 211, 61, 118, 78, 166, 189, 81, 251, 245, 189, 72, 111, 134, 62, 181, 110, 61, 189, 111, 103, 14, 190, 85, 107, 71, 188, 230, 172, 171, 189, 132, 78, 41, 62, 234, 126, 40, 190, 52, 66, 54, 189, 66, 234, 100, 61, 5, 189, 245, 61, 7, 99, 220, 189, 56, 94, 32, 62, 221, 248, 18, 60, 238, 214, 252, 189, 107, 199, 130, 59, 81, 164, 101, 61, 57, 127, 45, 189, 237, 244, 22, 190, 148, 245, 3, 190, 145, 222, 208, 189, 114, 177, 3, 61, 6, 38, 129, 61, 192, 110, 38, 188, 55, 32, 185, 189, 254, 3, 216, 59, 163, 206, 250, 61, 120, 72, 15, 60, 184, 135, 35, 190, 219, 52, 199, 61, 25, 37, 181, 61, 159, 94, 16, 190, 251, 200, 45, 189, 111, 11, 9, 62, 155, 215, 154, 190, 199, 48, 65, 190, 7, 114, 194, 62, 231, 58, 240, 189, 99, 130, 201, 61, 31, 87, 11, 187, 208, 236, 81, 62, 89, 55, 37, 61, 40, 148, 168, 188, 204, 78, 17, 62, 27, 83, 35, 62, 121, 4, 59, 61, 185, 87, 210, 188, 228, 208, 136, 190, 5, 163, 112, 62, 140, 53, 112, 62, 15, 214, 160, 62, 7, 67, 51, 190, 211, 187, 56, 62, 76, 117, 194, 190, 25, 244, 5, 62, 4, 129, 193, 189, 52, 234, 21, 189, 152, 24, 5, 62, 201, 226, 107, 190, 139, 96, 140, 62, 131, 48, 104, 190, 187, 155, 70, 61, 139, 252, 197, 62, 156, 124, 34, 189, 183, 226, 94, 190, 198, 22, 148, 189, 114, 223, 210, 61, 7, 37, 39, 61, 115, 66, 195, 62, 190, 51, 157, 190, 96, 74, 6, 62, 188, 252, 129, 62, 231, 93, 206, 62, 11, 33, 188, 61, 49, 40, 174, 189, 140, 132, 138, 61, 5, 41, 63, 62, 207, 91, 116, 60, 136, 120, 57, 190, 187, 56, 132, 189, 17, 203, 71, 62, 248, 0, 38, 62, 83, 12, 63, 62, 196, 92, 111, 190, 227, 36, 170, 61, 154, 40, 172, 190, 242, 207, 5, 61, 139, 76, 136, 60, 126, 70, 226, 61, 18, 144, 2, 191, 225, 171, 161, 190, 236, 212, 9, 189, 41, 21, 54, 188, 230, 207, 125, 190, 157, 207, 203, 61, 153, 237, 215, 190, 30, 195, 181, 190, 226, 20, 113, 62, 22, 225, 64, 190, 174, 202, 148, 190, 176, 204, 147, 62, 129, 83, 4, 190, 193, 198, 135, 59, 167, 142, 93, 62, 98, 118, 140, 61, 132, 233, 20, 187, 55, 50, 70, 191, 153, 78, 133, 62, 170, 216, 189, 189, 66, 51, 1, 60, 224, 48, 220, 61, 123, 221, 84, 191, 40, 221, 134, 62, 238, 17, 3, 62, 128, 223, 52, 60, 111, 196, 132, 60, 214, 203, 237, 61, 112, 72, 120, 62, 155, 200, 52, 62, 26, 85, 105, 190, 206, 154, 27, 191, 201, 89, 41, 61, 236, 247, 147, 190, 134, 100, 89, 62, 183, 241, 242, 188, 143, 50, 182, 189, 11, 179, 57, 62, 151, 174, 218, 190, 238, 75, 158, 190, 28, 159, 69, 62, 172, 115, 92, 61, 175, 137, 41, 190, 171, 79, 133, 61, 196, 68, 67, 190, 93, 162, 9, 62, 5, 55, 37, 62, 247, 191, 193, 61, 245, 63, 255, 188, 244, 150, 120, 189, 210, 200, 52, 189, 110, 237, 232, 188, 204, 20, 245, 61, 150, 53, 85, 190, 155, 87, 171, 187, 21, 242, 70, 189, 195, 179, 164, 61, 37, 27, 151, 190, 181, 148, 6, 60, 175, 184, 79, 190, 86, 88, 199, 190, 80, 61, 189, 187, 48, 127, 154, 61, 140, 29, 93, 189, 129, 49, 249, 189, 178, 211, 32, 62, 71, 157, 215, 58, 183, 122, 133, 60, 3, 127, 35, 190, 99, 24, 110, 189, 23, 165, 195, 189, 177, 193, 21, 190, 140, 246, 164, 188, 39, 11, 219, 59, 51, 140, 237, 187, 194, 46, 48, 60, 161, 78, 26, 190, 227, 20, 132, 62, 11, 58, 15, 62, 48, 185, 31, 62, 125, 93, 208, 60, 191, 25, 198, 189, 220, 129, 116, 62, 172, 77, 113, 190, 178, 104, 141, 189, 252, 248, 45, 190, 174, 73, 75, 190, 83, 255, 60, 62, 129, 225, 147, 61, 111, 198, 196, 61, 38, 26, 83, 62, 32, 185, 173, 61, 232, 117, 5, 61, 127, 229, 6, 62, 170, 5, 128, 190, 143, 105, 138, 62, 125, 251, 202, 62, 69, 20, 175, 188, 108, 210, 204, 61, 106, 139, 122, 190, 118, 132, 155, 188, 238, 118, 185, 61, 121, 39, 26, 190, 61, 216, 129, 190, 99, 192, 112, 62, 28, 87, 223, 190, 81, 64, 113, 190, 124, 154, 152, 62, 248, 160, 16, 189, 219, 55, 135, 190, 22, 34, 128, 62, 48, 129, 113, 61, 191, 54, 162, 189, 132, 177, 187, 61, 22, 2, 112, 61, 187, 82, 208, 62, 70, 52, 18, 61, 208, 38, 20, 191, 83, 165, 61, 61, 234, 246, 94, 61, 81, 115, 12, 62, 15, 221, 66, 62, 57, 142, 75, 191, 248, 3, 154, 61, 196, 134, 62, 191, 205, 122, 204, 190, 32, 67, 178, 189, 108, 100, 146, 62, 220, 133, 56, 191, 163, 231, 40, 190, 127, 67, 140, 62, 149, 22, 149, 61, 223, 221, 232, 188, 87, 102, 226, 62, 40, 95, 99, 190, 18, 108, 45, 191, 246, 246, 74, 189, 223, 215, 53, 190, 137, 7, 241, 61, 212, 139, 82, 191, 228, 25, 12, 63, 197, 105, 127, 191, 185, 241, 10, 191, 42, 113, 136, 190, 19, 205, 129, 190, 174, 97, 93, 62, 141, 34, 28, 190, 131, 216, 167, 62, 4, 162, 187, 60, 166, 63, 168, 62, 51, 187, 154, 62, 5, 98, 234, 190, 97, 225, 178, 190, 57, 18, 205, 61, 17, 43, 114, 61, 237, 26, 86, 62, 166, 103, 102, 59, 21, 104, 10, 191, 207, 167, 131, 62, 150, 132, 191, 61, 252, 158, 220, 189, 170, 122, 83, 62, 118, 237, 46, 62, 178, 90, 176, 62, 246, 83, 7, 62, 57, 58, 167, 190, 105, 145, 18, 62, 126, 175, 6, 63, 2, 25, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 200, 225, 61, 115, 98, 109, 61, 70, 23, 186, 189, 18, 43, 213, 188, 232, 112, 193, 188, 154, 96, 180, 62, 116, 127, 195, 61, 72, 177, 38, 62, 133, 89, 16, 62, 196, 103, 21, 189, 171, 91, 63, 62, 170, 129, 174, 189, 236, 143, 128, 190, 246, 96, 149, 61, 161, 114, 55, 189, 120, 144, 78, 190, 162, 30, 163, 60, 36, 2, 226, 188, 97, 43, 105, 188, 121, 66, 117, 62, 15, 6, 19, 190, 76, 125, 41, 61, 105, 43, 169, 60, 79, 213, 66, 190, 17, 174, 7, 190, 155, 47, 191, 61, 10, 121, 13, 60, 206, 85, 153, 61, 197, 13, 157, 189, 213, 177, 242, 189, 247, 129, 24, 189, 227, 135, 20, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 19, 72, 60, 60, 241, 135, 190, 226, 179, 46, 189, 250, 177, 216, 62, 142, 177, 67, 62, 35, 215, 153, 62, 184, 101, 214, 190, 123, 242, 26, 191, 111, 12, 81, 62, 40, 217, 83, 188, 159, 216, 201, 189, 124, 46, 87, 191, 89, 151, 166, 62, 17, 48, 87, 191, 44, 217, 178, 190, 245, 203, 211, 186, 32, 117, 221, 188, 50, 145, 237, 188, 90, 80, 45, 62, 95, 4, 192, 190, 175, 2, 71, 62, 64, 107, 40, 62, 135, 26, 40, 191, 78, 161, 22, 63, 203, 31, 184, 188, 15, 121, 104, 190, 177, 122, 174, 190, 243, 192, 3, 191, 114, 74, 61, 62, 220, 64, 172, 62, 205, 34, 69, 191, 235, 102, 47, 63, 254, 245, 63, 190, 56, 185, 44, 61, 202, 190, 110, 61, 167, 184, 173, 60, 35, 254, 201, 190, 119, 114, 7, 190, 84, 135, 74, 62, 146, 106, 5, 62, 159, 155, 205, 189, 218, 176, 128, 60, 186, 178, 64, 190, 136, 47, 164, 61, 175, 75, 235, 186, 2, 151, 170, 189, 197, 215, 8, 62, 61, 246, 214, 61, 189, 31, 39, 62, 42, 21, 0, 62, 89, 51, 143, 188, 12, 132, 132, 190, 240, 62, 164, 61, 25, 190, 50, 61, 164, 117, 104, 62, 43, 8, 158, 62, 68, 101, 5, 190, 13, 151, 26, 189, 229, 190, 192, 188, 223, 160, 219, 189, 25, 40, 255, 61, 184, 42, 106, 189, 102, 215, 16, 186, 90, 196, 123, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 118, 21, 62, 155, 13, 225, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 45, 19, 191, 147, 151, 71, 191, 106, 221, 175, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {53, 113, 209, 191, 96, 122, 44, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}