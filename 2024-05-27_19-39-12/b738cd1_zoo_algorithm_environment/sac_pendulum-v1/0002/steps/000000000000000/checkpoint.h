// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 56, 249, 189, 38, 220, 137, 190, 139, 173, 18, 190, 128, 126, 57, 62, 0, 42, 212, 190, 252, 251, 8, 191, 250, 197, 179, 62, 128, 159, 206, 190, 195, 191, 137, 61, 26, 73, 234, 190, 95, 200, 200, 190, 29, 181, 210, 61, 143, 249, 12, 191, 190, 198, 206, 190, 244, 12, 177, 190, 175, 248, 1, 191, 141, 207, 157, 62, 95, 57, 172, 62, 180, 11, 191, 61, 25, 126, 132, 190, 51, 127, 8, 63, 250, 94, 234, 190, 237, 139, 136, 62, 126, 85, 124, 190, 89, 107, 211, 190, 180, 124, 172, 190, 157, 71, 15, 63, 145, 110, 136, 190, 129, 218, 11, 63, 137, 214, 238, 190, 188, 83, 4, 63, 174, 74, 196, 190, 134, 217, 141, 190, 171, 175, 166, 190, 79, 120, 233, 62, 54, 60, 54, 62, 100, 144, 97, 190, 167, 23, 109, 190, 71, 251, 157, 189, 24, 250, 191, 62, 70, 156, 249, 190, 129, 206, 16, 186, 63, 43, 100, 62, 176, 146, 134, 62, 107, 47, 188, 190, 186, 89, 128, 60, 121, 42, 103, 61, 180, 30, 7, 63, 226, 237, 170, 188, 151, 111, 176, 62, 123, 173, 134, 190, 237, 204, 164, 190, 163, 134, 32, 59, 225, 124, 205, 190, 140, 191, 142, 62, 208, 10, 211, 61, 5, 61, 252, 189, 252, 197, 206, 190, 108, 194, 126, 190, 215, 238, 95, 190, 110, 129, 18, 190, 227, 186, 5, 191, 179, 122, 0, 191, 196, 194, 229, 62, 241, 59, 172, 190, 84, 105, 191, 190, 17, 242, 67, 62, 215, 253, 107, 62, 249, 177, 247, 62, 6, 87, 60, 61, 211, 153, 161, 62, 20, 119, 51, 61, 6, 14, 232, 60, 43, 16, 182, 62, 204, 14, 150, 190, 12, 156, 227, 189, 98, 205, 213, 62, 59, 117, 37, 61, 69, 45, 126, 62, 81, 106, 219, 189, 129, 250, 236, 190, 36, 134, 172, 187, 38, 110, 216, 62, 113, 212, 150, 190, 83, 160, 75, 62, 106, 111, 221, 62, 221, 16, 247, 60, 87, 121, 35, 62, 141, 100, 210, 190, 196, 140, 0, 190, 101, 105, 191, 62, 63, 36, 17, 191, 221, 2, 152, 190, 2, 17, 219, 190, 238, 116, 185, 62, 66, 232, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 203, 19, 191, 109, 119, 232, 61, 251, 153, 8, 191, 154, 101, 6, 188, 140, 211, 15, 191, 57, 89, 146, 190, 69, 24, 54, 61, 55, 252, 148, 190, 120, 227, 169, 62, 28, 64, 235, 62, 189, 140, 142, 62, 66, 94, 6, 63, 157, 20, 188, 62, 127, 60, 124, 62, 235, 77, 63, 189, 1, 253, 124, 62, 172, 244, 7, 63, 252, 244, 202, 62, 162, 213, 195, 62, 153, 236, 190, 62, 149, 136, 156, 188, 251, 177, 247, 61, 39, 82, 19, 63, 5, 31, 4, 191, 112, 239, 155, 190, 129, 83, 4, 62, 51, 179, 55, 189, 87, 103, 244, 61, 60, 159, 65, 62, 146, 200, 195, 188, 151, 56, 134, 190, 93, 239, 247, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 221, 35, 62, 195, 28, 105, 61, 67, 39, 37, 62, 117, 231, 141, 188, 93, 19, 37, 190, 118, 9, 248, 189, 249, 226, 243, 189, 34, 3, 144, 185, 69, 64, 166, 188, 186, 99, 189, 61, 199, 190, 84, 60, 160, 188, 195, 61, 145, 150, 4, 62, 199, 236, 115, 61, 90, 224, 160, 188, 1, 227, 34, 62, 15, 46, 198, 189, 146, 228, 215, 188, 154, 249, 140, 61, 110, 163, 185, 61, 171, 151, 71, 188, 162, 68, 28, 189, 158, 195, 10, 62, 130, 138, 48, 189, 184, 194, 15, 61, 12, 185, 37, 62, 188, 102, 12, 62, 182, 148, 45, 189, 116, 71, 36, 62, 209, 27, 4, 62, 6, 119, 3, 189, 197, 84, 176, 61, 112, 111, 240, 189, 184, 239, 30, 61, 90, 51, 22, 190, 96, 115, 148, 61, 40, 170, 159, 189, 232, 36, 214, 188, 191, 247, 247, 61, 38, 210, 194, 189, 44, 34, 26, 189, 226, 71, 99, 61, 240, 208, 161, 189, 222, 74, 155, 187, 16, 172, 207, 189, 231, 65, 18, 190, 31, 169, 187, 61, 125, 25, 9, 189, 133, 1, 90, 189, 120, 42, 66, 189, 42, 111, 35, 190, 238, 58, 79, 189, 127, 233, 211, 188, 159, 158, 213, 61, 137, 180, 36, 62, 192, 15, 83, 61, 4, 251, 38, 190, 35, 50, 164, 61, 201, 74, 181, 61, 254, 44, 239, 60, 24, 179, 249, 188, 44, 0, 207, 59, 23, 20, 218, 61, 90, 10, 137, 188, 124, 6, 36, 189, 225, 50, 0, 62, 109, 43, 16, 62, 227, 201, 131, 189, 3, 19, 22, 188, 146, 200, 28, 190, 54, 107, 14, 190, 208, 14, 39, 62, 54, 130, 3, 62, 244, 216, 155, 60, 45, 54, 5, 62, 67, 152, 34, 61, 253, 215, 122, 60, 47, 91, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 79, 210, 59, 61, 252, 63, 130, 189, 23, 3, 225, 189, 43, 25, 28, 61, 244, 166, 255, 189, 161, 175, 13, 189, 153, 183, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 144, 241, 100, 61, 28, 29, 217, 60, 210, 87, 31, 189, 38, 108, 220, 189, 190, 60, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 141, 225, 14, 61, 187, 242, 180, 61, 209, 104, 13, 61, 120, 68, 118, 61, 142, 238, 62, 61, 10, 179, 238, 188, 187, 182, 87, 189, 61, 119, 41, 62, 42, 75, 84, 61, 209, 127, 106, 189, 23, 231, 33, 62, 4, 192, 126, 60, 184, 70, 81, 61, 25, 238, 130, 189, 152, 14, 13, 189, 174, 217, 231, 188, 56, 116, 18, 190, 244, 219, 66, 61, 87, 15, 52, 62, 43, 254, 98, 188, 180, 185, 13, 62, 113, 189, 252, 61, 128, 95, 52, 190, 140, 16, 52, 190, 24, 75, 130, 189, 196, 64, 230, 189, 1, 165, 37, 62, 34, 185, 178, 189, 42, 212, 35, 190, 107, 237, 37, 190, 240, 172, 39, 61, 223, 140, 86, 59, 37, 194, 160, 187, 32, 168, 156, 189, 82, 124, 184, 189, 248, 152, 150, 189, 228, 186, 12, 62, 236, 254, 76, 61, 69, 171, 75, 61, 176, 244, 185, 189, 113, 128, 241, 189, 38, 15, 1, 62, 39, 24, 248, 61, 121, 67, 239, 189, 27, 194, 222, 61, 36, 82, 25, 190, 137, 243, 254, 61, 50, 82, 117, 189, 154, 233, 86, 189, 109, 111, 168, 189, 144, 222, 250, 61, 254, 54, 237, 60, 133, 186, 40, 190, 192, 150, 218, 60, 188, 207, 34, 62, 144, 26, 168, 61, 248, 118, 108, 188, 246, 64, 3, 189, 107, 65, 221, 189, 217, 106, 219, 61, 249, 125, 49, 60, 15, 9, 173, 187, 153, 71, 27, 188, 226, 234, 39, 62, 153, 100, 145, 61, 59, 66, 141, 189, 240, 36, 101, 61, 155, 81, 18, 62, 233, 38, 21, 190, 175, 137, 39, 189, 110, 229, 20, 190, 207, 161, 174, 189, 106, 235, 49, 190, 156, 235, 16, 62, 188, 111, 239, 189, 109, 89, 213, 61, 37, 19, 131, 61, 222, 53, 37, 62, 203, 254, 16, 190, 118, 224, 85, 189, 123, 182, 153, 189, 188, 251, 226, 60, 70, 55, 106, 61, 225, 33, 191, 61, 96, 9, 49, 62, 145, 145, 13, 190, 167, 62, 205, 188, 16, 12, 173, 187, 87, 4, 127, 188, 115, 170, 233, 60, 186, 93, 174, 188, 202, 235, 118, 61, 215, 235, 204, 189, 136, 51, 34, 62, 163, 33, 8, 189, 197, 13, 248, 60, 74, 106, 191, 61, 133, 32, 157, 60, 242, 54, 150, 189, 86, 58, 200, 61, 6, 243, 12, 190, 253, 99, 232, 189, 200, 214, 102, 189, 159, 111, 209, 188, 24, 168, 243, 189, 143, 166, 244, 61, 103, 8, 192, 189, 172, 121, 13, 190, 25, 138, 189, 61, 14, 118, 47, 190, 251, 159, 42, 190, 54, 47, 114, 60, 167, 124, 227, 189, 182, 132, 244, 189, 109, 7, 242, 61, 192, 191, 42, 189, 31, 15, 232, 61, 115, 59, 40, 62, 112, 228, 43, 189, 115, 249, 148, 60, 51, 64, 47, 62, 225, 61, 213, 189, 83, 121, 229, 61, 19, 92, 38, 62, 153, 100, 141, 188, 197, 74, 49, 190, 219, 161, 41, 190, 88, 53, 53, 61, 210, 79, 142, 187, 2, 200, 36, 190, 199, 155, 233, 61, 170, 74, 27, 62, 84, 112, 72, 61, 184, 149, 183, 61, 122, 27, 217, 61, 173, 135, 20, 62, 72, 236, 173, 61, 138, 239, 56, 60, 116, 78, 23, 190, 80, 60, 64, 189, 233, 9, 141, 188, 172, 8, 29, 190, 7, 173, 205, 187, 91, 68, 9, 190, 177, 80, 8, 190, 209, 162, 137, 189, 173, 9, 179, 61, 251, 77, 177, 189, 191, 210, 43, 62, 39, 130, 21, 190, 46, 32, 245, 61, 232, 160, 172, 189, 193, 211, 156, 59, 42, 102, 48, 190, 114, 194, 149, 187, 207, 112, 188, 189, 154, 61, 121, 187, 132, 252, 151, 61, 194, 180, 90, 189, 166, 59, 188, 189, 171, 33, 46, 190, 112, 45, 184, 61, 191, 142, 160, 60, 81, 211, 216, 189, 79, 65, 63, 61, 106, 135, 239, 189, 12, 146, 85, 61, 163, 34, 248, 189, 66, 201, 9, 62, 24, 192, 44, 62, 107, 177, 6, 190, 105, 246, 39, 61, 91, 208, 246, 61, 143, 50, 151, 188, 246, 30, 11, 190, 36, 233, 31, 190, 49, 220, 27, 62, 233, 221, 42, 190, 31, 145, 136, 189, 221, 30, 182, 60, 63, 154, 121, 189, 108, 174, 106, 61, 215, 245, 241, 189, 116, 154, 208, 189, 58, 47, 222, 187, 183, 2, 238, 189, 197, 148, 13, 62, 59, 30, 252, 189, 82, 219, 192, 188, 206, 27, 58, 189, 174, 173, 173, 60, 96, 121, 104, 189, 26, 140, 1, 62, 222, 247, 193, 57, 195, 141, 21, 190, 144, 242, 168, 61, 230, 69, 37, 190, 210, 172, 50, 62, 101, 48, 237, 189, 210, 197, 38, 62, 238, 44, 56, 61, 29, 56, 51, 190, 110, 159, 198, 60, 201, 34, 21, 190, 149, 254, 4, 190, 206, 212, 51, 188, 34, 119, 165, 61, 232, 0, 205, 189, 90, 67, 39, 190, 69, 143, 29, 61, 241, 93, 14, 190, 188, 217, 63, 189, 154, 20, 24, 62, 153, 194, 187, 60, 47, 124, 33, 190, 55, 232, 247, 61, 206, 193, 233, 61, 126, 247, 48, 189, 95, 168, 101, 61, 197, 22, 3, 62, 101, 101, 27, 190, 224, 185, 165, 59, 237, 13, 25, 62, 170, 153, 200, 61, 43, 92, 164, 189, 247, 65, 176, 188, 226, 72, 140, 61, 102, 66, 169, 61, 195, 244, 157, 189, 233, 102, 22, 190, 60, 46, 81, 189, 15, 155, 210, 61, 134, 193, 51, 62, 124, 163, 89, 189, 201, 91, 58, 61, 171, 55, 102, 189, 155, 20, 76, 61, 155, 106, 46, 190, 239, 190, 33, 60, 220, 212, 215, 61, 56, 233, 147, 189, 185, 208, 182, 189, 27, 124, 30, 190, 128, 109, 7, 190, 197, 184, 71, 59, 111, 240, 58, 189, 249, 17, 24, 62, 252, 212, 20, 190, 62, 126, 187, 189, 59, 8, 200, 187, 253, 203, 138, 189, 208, 188, 218, 61, 75, 91, 181, 61, 137, 109, 24, 190, 201, 127, 139, 189, 191, 189, 70, 184, 225, 84, 47, 190, 131, 186, 36, 190, 29, 80, 166, 189, 23, 133, 13, 190, 36, 209, 138, 61, 197, 242, 110, 61, 117, 252, 135, 61, 223, 195, 37, 62, 14, 78, 253, 61, 101, 154, 11, 190, 59, 144, 124, 61, 238, 151, 145, 61, 55, 48, 38, 62, 221, 130, 77, 186, 138, 211, 193, 189, 84, 32, 240, 187, 62, 71, 1, 190, 153, 241, 47, 62, 55, 66, 53, 189, 159, 152, 251, 61, 112, 116, 137, 188, 55, 120, 3, 62, 239, 71, 175, 61, 142, 135, 33, 190, 239, 51, 203, 61, 228, 30, 242, 189, 7, 151, 109, 187, 233, 102, 245, 189, 53, 147, 125, 189, 238, 155, 166, 60, 254, 89, 133, 189, 215, 17, 220, 189, 1, 60, 28, 62, 129, 37, 12, 189, 175, 95, 48, 62, 224, 231, 106, 189, 63, 161, 195, 189, 67, 5, 40, 61, 185, 202, 163, 59, 85, 117, 10, 190, 182, 27, 231, 61, 253, 215, 14, 62, 194, 201, 191, 61, 24, 65, 209, 189, 82, 5, 58, 189, 253, 216, 228, 60, 118, 208, 228, 187, 78, 219, 153, 60, 133, 141, 133, 189, 150, 61, 15, 60, 187, 193, 14, 190, 219, 83, 165, 189, 67, 99, 46, 62, 51, 26, 2, 190, 102, 198, 166, 61, 164, 123, 39, 61, 141, 27, 163, 189, 166, 235, 98, 59, 216, 10, 17, 190, 167, 252, 240, 189, 79, 94, 221, 61, 170, 100, 229, 61, 14, 203, 21, 190, 105, 160, 43, 61, 34, 140, 213, 189, 250, 64, 160, 61, 166, 142, 181, 189, 113, 89, 170, 189, 27, 253, 239, 188, 95, 179, 5, 62, 118, 5, 134, 189, 42, 1, 88, 61, 166, 11, 8, 189, 149, 106, 238, 60, 32, 174, 50, 190, 157, 173, 3, 61, 141, 113, 167, 61, 81, 65, 4, 190, 202, 178, 210, 61, 244, 137, 254, 189, 109, 19, 186, 189, 39, 207, 46, 189, 109, 205, 143, 61, 130, 1, 37, 189, 78, 112, 22, 188, 51, 131, 49, 190, 173, 8, 216, 61, 5, 223, 50, 62, 149, 128, 162, 189, 236, 38, 175, 60, 126, 89, 13, 62, 197, 191, 13, 189, 6, 210, 34, 189, 191, 213, 244, 61, 220, 0, 156, 59, 105, 66, 230, 61, 73, 164, 37, 190, 132, 162, 8, 62, 231, 214, 39, 60, 79, 71, 2, 188, 136, 188, 139, 58, 187, 48, 232, 189, 215, 200, 48, 62, 147, 194, 7, 189, 54, 28, 15, 62, 40, 198, 3, 190, 45, 8, 8, 190, 128, 5, 104, 188, 61, 243, 143, 189, 156, 241, 227, 189, 108, 185, 167, 60, 180, 34, 208, 61, 199, 241, 105, 61, 144, 163, 36, 61, 216, 185, 168, 189, 174, 38, 17, 190, 59, 204, 9, 190, 64, 155, 186, 187, 225, 154, 206, 61, 107, 63, 4, 190, 193, 27, 4, 190, 153, 157, 19, 61, 48, 61, 143, 61, 85, 208, 138, 189, 64, 131, 4, 189, 182, 5, 242, 60, 41, 76, 28, 62, 202, 8, 113, 189, 12, 141, 206, 60, 235, 167, 18, 190, 11, 32, 174, 189, 105, 243, 198, 61, 248, 118, 53, 188, 10, 241, 48, 62, 187, 22, 142, 61, 29, 178, 30, 61, 130, 182, 150, 189, 186, 113, 209, 189, 165, 64, 39, 62, 82, 20, 17, 62, 249, 108, 149, 60, 104, 127, 20, 61, 137, 107, 29, 62, 18, 205, 158, 188, 63, 105, 50, 62, 219, 137, 23, 62, 189, 178, 10, 189, 68, 36, 214, 61, 101, 214, 26, 190, 59, 195, 155, 188, 29, 114, 52, 61, 20, 39, 158, 61, 127, 121, 1, 188, 12, 28, 243, 61, 40, 135, 80, 188, 164, 140, 67, 188, 73, 104, 8, 190, 161, 218, 41, 190, 22, 26, 118, 189, 203, 85, 152, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 167, 148, 31, 188, 65, 95, 182, 187, 252, 19, 27, 62, 30, 135, 161, 61, 178, 134, 231, 61, 232, 136, 8, 61, 168, 97, 18, 190, 144, 154, 52, 190, 128, 100, 150, 189, 171, 187, 83, 61, 67, 140, 240, 61, 213, 155, 51, 190, 19, 108, 169, 187, 122, 126, 155, 61, 225, 21, 193, 61, 110, 246, 126, 189, 241, 61, 134, 188, 174, 30, 30, 59, 95, 128, 221, 189, 251, 162, 18, 190, 75, 234, 249, 189, 48, 181, 191, 60, 67, 60, 39, 62, 206, 240, 14, 190, 166, 119, 170, 61, 188, 55, 129, 189, 51, 56, 254, 189, 201, 43, 97, 61, 146, 18, 211, 61, 161, 91, 241, 61, 208, 99, 221, 61, 24, 42, 133, 189, 248, 115, 103, 188, 96, 14, 35, 62, 20, 20, 20, 190, 119, 217, 200, 189, 247, 134, 100, 188, 80, 170, 175, 188, 42, 119, 5, 190, 36, 147, 20, 61, 26, 231, 238, 61, 222, 64, 229, 61, 95, 105, 246, 61, 229, 39, 13, 190, 248, 117, 4, 61, 125, 233, 227, 61, 135, 79, 149, 61, 29, 233, 187, 189, 176, 189, 211, 61, 69, 169, 90, 189, 237, 206, 188, 61, 19, 235, 36, 190, 198, 62, 83, 188, 131, 48, 238, 60, 33, 41, 138, 61, 133, 177, 199, 188, 116, 198, 143, 61, 197, 27, 184, 61, 247, 143, 36, 62, 253, 201, 47, 190, 108, 224, 222, 61, 144, 23, 236, 61, 95, 251, 220, 60, 223, 219, 243, 61, 49, 8, 237, 59, 52, 237, 61, 189, 76, 111, 181, 189, 154, 33, 14, 190, 177, 244, 137, 189, 70, 1, 128, 189, 72, 226, 145, 189, 127, 27, 145, 189, 206, 43, 127, 189, 215, 206, 40, 190, 120, 160, 13, 62, 230, 118, 164, 189, 182, 101, 47, 190, 253, 56, 50, 62, 199, 63, 241, 189, 100, 248, 158, 61, 119, 178, 127, 188, 41, 153, 27, 61, 35, 191, 98, 189, 124, 40, 25, 62, 208, 224, 7, 61, 91, 202, 13, 188, 76, 6, 16, 190, 158, 242, 246, 188, 6, 28, 155, 187, 25, 79, 246, 187, 173, 166, 236, 189, 240, 81, 151, 188, 13, 149, 10, 189, 89, 172, 1, 190, 32, 214, 90, 61, 177, 204, 164, 189, 207, 82, 36, 62, 47, 220, 25, 62, 49, 101, 231, 189, 6, 94, 164, 188, 200, 185, 139, 61, 16, 40, 187, 61, 11, 118, 147, 61, 74, 121, 137, 189, 175, 134, 143, 59, 83, 92, 157, 61, 68, 233, 18, 190, 90, 158, 2, 189, 129, 5, 193, 60, 215, 203, 245, 60, 156, 25, 240, 61, 92, 25, 29, 61, 49, 175, 188, 61, 143, 190, 240, 189, 216, 69, 186, 188, 5, 12, 223, 60, 244, 108, 231, 61, 35, 178, 173, 189, 219, 122, 173, 61, 98, 224, 182, 189, 230, 37, 78, 61, 218, 219, 47, 190, 196, 209, 198, 60, 131, 243, 195, 189, 148, 136, 248, 189, 172, 25, 71, 61, 12, 192, 203, 189, 184, 212, 5, 190, 243, 186, 24, 190, 93, 219, 166, 189, 174, 239, 195, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 198, 1, 136, 61, 152, 68, 176, 188, 205, 226, 66, 61, 248, 246, 138, 189, 69, 217, 18, 62, 197, 67, 137, 61, 196, 216, 67, 61, 57, 28, 107, 188, 160, 216, 104, 189, 230, 16, 5, 190, 59, 250, 254, 189, 172, 78, 30, 190, 38, 47, 67, 189, 251, 41, 195, 189, 113, 3, 203, 188, 21, 71, 194, 188, 233, 124, 7, 190, 154, 254, 154, 61, 135, 216, 236, 189, 182, 210, 26, 62, 4, 219, 11, 62, 88, 60, 37, 190, 131, 177, 163, 61, 12, 115, 21, 190, 1, 222, 224, 60, 195, 172, 41, 189, 23, 91, 202, 189, 11, 98, 190, 186, 184, 32, 140, 188, 234, 7, 86, 189, 226, 141, 190, 185, 233, 23, 201, 189, 186, 40, 216, 61, 156, 242, 16, 62, 18, 223, 177, 188, 40, 27, 118, 189, 129, 143, 187, 189, 22, 32, 23, 62, 187, 117, 199, 189, 15, 216, 155, 61, 205, 1, 13, 62, 215, 125, 28, 57, 78, 121, 8, 61, 167, 140, 33, 189, 245, 197, 0, 61, 58, 188, 46, 190, 142, 100, 164, 61, 104, 192, 129, 189, 230, 26, 186, 61, 96, 206, 145, 189, 174, 37, 15, 190, 143, 162, 255, 189, 231, 130, 217, 61, 151, 51, 153, 189, 252, 89, 155, 188, 115, 47, 49, 190, 28, 6, 48, 62, 96, 234, 18, 190, 84, 139, 138, 60, 222, 235, 111, 188, 253, 144, 45, 189, 106, 148, 8, 190, 132, 149, 42, 190, 197, 179, 175, 188, 116, 8, 23, 62, 92, 28, 31, 62, 61, 96, 29, 62, 71, 2, 21, 189, 102, 50, 5, 190, 192, 149, 26, 190, 215, 7, 240, 189, 75, 246, 51, 190, 102, 199, 23, 190, 178, 38, 189, 188, 108, 156, 7, 62, 55, 208, 52, 190, 104, 190, 182, 60, 184, 199, 32, 62, 18, 182, 195, 188, 3, 28, 222, 61, 45, 243, 46, 190, 226, 15, 190, 61, 236, 53, 0, 190, 7, 164, 143, 60, 120, 240, 40, 190, 113, 184, 211, 61, 76, 10, 7, 62, 109, 16, 175, 57, 151, 170, 55, 189, 91, 54, 18, 62, 172, 68, 54, 189, 160, 202, 5, 190, 143, 146, 59, 188, 172, 76, 168, 189, 35, 68, 52, 62, 234, 126, 40, 190, 75, 14, 39, 189, 252, 81, 132, 61, 47, 126, 4, 62, 60, 108, 183, 189, 166, 51, 39, 62, 86, 140, 125, 60, 117, 5, 248, 189, 244, 94, 23, 60, 28, 177, 141, 61, 143, 6, 24, 189, 230, 139, 9, 190, 97, 85, 253, 189, 94, 158, 201, 189, 224, 116, 27, 61, 152, 195, 143, 61, 145, 140, 251, 186, 231, 59, 168, 189, 254, 3, 216, 59, 134, 66, 9, 62, 25, 124, 124, 60, 95, 190, 26, 190, 33, 233, 218, 61, 67, 61, 194, 61, 188, 60, 14, 190, 117, 125, 32, 189, 172, 214, 10, 62, 109, 167, 204, 189, 127, 97, 252, 189, 192, 152, 111, 189, 74, 96, 208, 61, 38, 176, 184, 189, 186, 249, 5, 61, 53, 218, 26, 189, 56, 222, 134, 189, 54, 139, 51, 62, 106, 253, 69, 56, 242, 145, 176, 61, 65, 64, 44, 62, 36, 129, 33, 62, 111, 121, 32, 190, 166, 117, 191, 61, 93, 101, 243, 60, 131, 246, 17, 62, 151, 121, 200, 60, 0, 146, 243, 61, 211, 161, 246, 189, 60, 127, 196, 61, 72, 72, 130, 59, 104, 208, 188, 58, 13, 168, 45, 62, 137, 125, 223, 189, 245, 87, 27, 62, 204, 109, 35, 190, 178, 132, 23, 61, 114, 72, 50, 62, 16, 67, 42, 62, 233, 196, 27, 61, 190, 94, 122, 189, 140, 242, 238, 61, 40, 158, 0, 62, 235, 189, 86, 189, 144, 115, 182, 189, 174, 118, 83, 59, 22, 84, 12, 62, 86, 148, 52, 62, 171, 125, 227, 60, 7, 54, 28, 61, 52, 76, 132, 188, 98, 190, 209, 61, 181, 235, 48, 62, 96, 79, 166, 61, 15, 207, 234, 61, 235, 26, 210, 61, 98, 135, 48, 189, 12, 114, 174, 61, 230, 245, 103, 61, 244, 53, 0, 61, 58, 229, 128, 187, 140, 40, 57, 59, 159, 114, 222, 61, 20, 219, 5, 62, 121, 199, 185, 59, 218, 155, 47, 190, 31, 145, 235, 189, 227, 223, 36, 61, 139, 71, 52, 190, 34, 212, 93, 189, 196, 249, 52, 190, 182, 207, 42, 190, 67, 215, 11, 62, 36, 127, 161, 61, 151, 248, 17, 190, 167, 103, 33, 190, 254, 249, 188, 60, 39, 73, 12, 190, 163, 83, 47, 62, 26, 6, 166, 61, 197, 202, 231, 189, 14, 9, 193, 189, 226, 21, 245, 61, 240, 68, 121, 189, 49, 126, 41, 60, 58, 160, 162, 189, 151, 212, 138, 61, 56, 201, 44, 62, 26, 137, 204, 61, 115, 44, 17, 190, 49, 170, 26, 190, 29, 59, 94, 188, 84, 159, 150, 61, 245, 134, 135, 61, 110, 70, 142, 189, 22, 52, 29, 190, 99, 137, 30, 61, 212, 212, 158, 188, 59, 197, 229, 61, 189, 43, 247, 61, 85, 163, 168, 61, 177, 65, 2, 62, 223, 67, 200, 188, 36, 243, 43, 189, 111, 34, 11, 62, 172, 115, 92, 61, 108, 104, 45, 190, 57, 244, 92, 189, 159, 146, 252, 189, 93, 162, 9, 62, 113, 140, 25, 62, 56, 113, 159, 61, 221, 122, 0, 189, 120, 116, 35, 189, 59, 77, 23, 188, 61, 219, 0, 59, 233, 79, 41, 62, 30, 212, 175, 59, 37, 220, 229, 60, 99, 180, 81, 189, 102, 116, 151, 61, 188, 150, 50, 190, 62, 241, 240, 61, 8, 25, 246, 189, 137, 179, 235, 189, 220, 119, 27, 187, 14, 209, 165, 61, 44, 199, 59, 189, 127, 36, 228, 189, 178, 211, 32, 62, 237, 25, 22, 61, 183, 122, 133, 60, 61, 133, 28, 190, 137, 187, 132, 189, 41, 46, 185, 60, 104, 1, 23, 190, 79, 48, 105, 189, 209, 176, 52, 62, 87, 226, 175, 61, 212, 164, 33, 190, 11, 78, 37, 188, 159, 57, 8, 62, 115, 206, 41, 59, 224, 195, 119, 61, 90, 238, 47, 190, 83, 223, 206, 189, 145, 6, 103, 61, 173, 100, 172, 61, 132, 197, 43, 190, 17, 84, 136, 189, 27, 53, 17, 190, 87, 1, 132, 58, 189, 165, 51, 189, 45, 183, 136, 60, 252, 1, 251, 61, 57, 222, 212, 61, 70, 253, 100, 59, 195, 173, 17, 61, 16, 17, 203, 189, 103, 165, 51, 62, 234, 165, 180, 189, 245, 23, 65, 189, 178, 175, 15, 187, 91, 175, 162, 189, 68, 158, 130, 189, 160, 194, 75, 61, 230, 133, 143, 189, 246, 23, 17, 190, 45, 130, 208, 61, 229, 101, 216, 61, 53, 250, 155, 188, 116, 46, 48, 189, 62, 93, 197, 61, 168, 69, 77, 61, 43, 138, 251, 61, 251, 166, 1, 190, 92, 27, 52, 61, 187, 200, 206, 61, 81, 120, 150, 189, 186, 51, 253, 61, 7, 197, 164, 61, 173, 9, 28, 190, 219, 220, 161, 61, 197, 177, 7, 61, 76, 88, 100, 189, 40, 78, 55, 189, 166, 207, 18, 190, 72, 50, 33, 190, 99, 110, 185, 189, 55, 130, 98, 189, 27, 224, 133, 61, 221, 241, 39, 62, 120, 97, 39, 190, 32, 109, 255, 189, 47, 50, 82, 61, 65, 205, 50, 62, 224, 179, 33, 190, 196, 6, 176, 61, 213, 240, 79, 189, 4, 115, 231, 189, 253, 127, 224, 189, 108, 43, 65, 61, 146, 254, 32, 189, 9, 15, 42, 190, 65, 51, 236, 61, 17, 173, 21, 190, 242, 173, 32, 190, 61, 214, 186, 189, 30, 42, 156, 61, 150, 95, 119, 189, 57, 221, 60, 60, 30, 5, 233, 187, 182, 42, 139, 188, 169, 6, 27, 62, 64, 97, 140, 189, 84, 103, 32, 190, 64, 213, 35, 190, 154, 138, 249, 61, 112, 88, 186, 61, 39, 4, 9, 62, 234, 202, 192, 189, 172, 153, 30, 188, 155, 68, 119, 189, 63, 68, 185, 61, 89, 106, 243, 61, 195, 207, 184, 60, 81, 174, 32, 62, 7, 145, 235, 61, 89, 3, 49, 189, 205, 55, 9, 190, 50, 253, 16, 189, 174, 201, 206, 61, 76, 138, 48, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 70, 119, 60, 71, 200, 204, 188, 106, 83, 168, 189, 237, 79, 36, 190, 108, 32, 7, 190, 96, 151, 196, 61, 167, 122, 28, 62, 179, 44, 198, 60, 34, 25, 138, 189, 206, 27, 142, 188, 109, 86, 184, 61, 31, 165, 182, 189, 153, 139, 120, 189, 182, 47, 67, 189, 65, 113, 223, 189, 206, 211, 15, 190, 162, 30, 163, 60, 194, 3, 168, 60, 21, 126, 100, 60, 148, 90, 1, 62, 41, 158, 190, 189, 69, 168, 70, 61, 242, 128, 154, 189, 131, 69, 211, 189, 213, 32, 0, 190, 44, 96, 241, 61, 59, 216, 183, 61, 217, 119, 69, 189, 224, 253, 206, 60, 47, 234, 247, 189, 64, 176, 131, 189, 200, 200, 247, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 225, 179, 189, 36, 235, 207, 189, 109, 127, 50, 189, 251, 24, 13, 62, 87, 187, 147, 61, 63, 8, 6, 61, 125, 64, 34, 190, 241, 96, 185, 189, 63, 160, 181, 60, 19, 25, 117, 188, 98, 249, 73, 189, 204, 90, 210, 188, 230, 207, 240, 61, 55, 148, 3, 190, 131, 34, 231, 189, 190, 3, 123, 187, 32, 117, 221, 188, 239, 189, 11, 189, 127, 30, 132, 61, 234, 237, 218, 189, 251, 120, 215, 61, 119, 146, 40, 62, 227, 84, 245, 189, 101, 53, 38, 62, 64, 182, 182, 188, 168, 185, 187, 189, 107, 112, 18, 190, 229, 169, 126, 189, 157, 73, 25, 62, 247, 199, 18, 61, 246, 57, 48, 190, 210, 247, 143, 58, 5, 214, 252, 189, 218, 221, 194, 61, 58, 189, 114, 61, 199, 182, 132, 61, 105, 79, 51, 190, 98, 184, 98, 189, 125, 2, 196, 189, 204, 130, 216, 61, 147, 159, 28, 190, 19, 149, 106, 60, 63, 34, 6, 190, 185, 115, 227, 60, 7, 112, 43, 189, 80, 202, 237, 61, 161, 91, 51, 62, 23, 175, 6, 62, 189, 31, 39, 62, 246, 210, 28, 62, 96, 212, 200, 61, 173, 199, 24, 190, 234, 241, 38, 62, 98, 123, 50, 61, 236, 148, 26, 62, 10, 10, 131, 61, 31, 170, 5, 190, 164, 189, 71, 189, 143, 26, 93, 189, 206, 141, 251, 188, 180, 96, 186, 61, 86, 19, 57, 61, 196, 124, 142, 188, 245, 105, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 14, 29, 61, 168, 108, 155, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 192, 179, 63, 76, 191, 27, 191, 138, 215, 76, 187};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 53, 192, 189, 30, 182, 177, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}