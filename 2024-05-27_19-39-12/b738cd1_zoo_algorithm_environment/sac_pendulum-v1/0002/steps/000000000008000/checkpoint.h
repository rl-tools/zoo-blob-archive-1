// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 99, 39, 63, 191, 4, 174, 189, 59, 13, 145, 190, 226, 82, 36, 62, 54, 186, 111, 191, 19, 85, 0, 191, 158, 57, 44, 61, 234, 59, 62, 191, 1, 55, 246, 62, 108, 225, 162, 190, 54, 21, 208, 190, 243, 244, 16, 63, 37, 38, 90, 191, 222, 14, 173, 191, 68, 71, 224, 190, 232, 241, 102, 62, 100, 84, 208, 62, 0, 221, 7, 62, 171, 189, 59, 63, 95, 243, 75, 190, 201, 50, 32, 63, 9, 212, 35, 191, 223, 65, 157, 190, 158, 17, 144, 190, 232, 153, 243, 188, 59, 241, 96, 63, 95, 41, 121, 63, 99, 39, 231, 190, 246, 52, 8, 62, 56, 247, 22, 191, 207, 144, 52, 63, 58, 15, 5, 191, 217, 223, 92, 189, 52, 214, 165, 189, 1, 40, 111, 63, 5, 115, 212, 60, 132, 32, 250, 190, 119, 142, 240, 190, 205, 177, 131, 189, 164, 136, 231, 62, 110, 242, 225, 190, 81, 105, 38, 63, 214, 226, 68, 190, 192, 25, 69, 62, 189, 189, 6, 191, 223, 250, 116, 63, 202, 201, 185, 62, 201, 96, 9, 63, 61, 118, 126, 61, 64, 7, 36, 63, 135, 16, 206, 190, 185, 129, 71, 191, 51, 101, 134, 190, 90, 93, 222, 188, 189, 146, 78, 62, 25, 244, 196, 190, 129, 216, 181, 189, 142, 210, 58, 191, 195, 79, 95, 190, 110, 75, 137, 189, 19, 163, 243, 190, 46, 63, 167, 191, 183, 235, 175, 190, 12, 24, 245, 62, 243, 9, 16, 191, 214, 95, 228, 190, 218, 5, 28, 63, 11, 22, 66, 63, 160, 208, 255, 62, 33, 158, 175, 62, 64, 123, 144, 62, 53, 48, 40, 61, 97, 60, 190, 190, 44, 2, 237, 62, 149, 89, 238, 190, 78, 91, 163, 61, 68, 245, 7, 63, 175, 220, 73, 190, 82, 14, 59, 63, 174, 6, 0, 61, 54, 154, 214, 190, 147, 42, 231, 189, 70, 210, 241, 62, 176, 198, 200, 190, 176, 147, 215, 62, 86, 77, 12, 63, 57, 100, 35, 190, 54, 18, 122, 61, 76, 85, 183, 190, 67, 149, 200, 62, 34, 41, 66, 63, 195, 20, 144, 191, 242, 187, 120, 190, 217, 135, 199, 62, 115, 112, 233, 62, 172, 100, 181, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 49, 50, 191, 250, 111, 139, 62, 58, 197, 77, 190, 6, 184, 48, 190, 87, 107, 209, 190, 125, 200, 106, 191, 77, 86, 110, 190, 113, 39, 196, 190, 17, 215, 92, 189, 154, 191, 4, 63, 182, 232, 54, 63, 31, 4, 31, 63, 247, 11, 15, 63, 172, 125, 89, 62, 234, 192, 70, 61, 193, 154, 31, 190, 133, 153, 25, 63, 17, 73, 58, 63, 207, 231, 255, 62, 23, 75, 78, 63, 84, 166, 210, 60, 226, 106, 51, 62, 54, 246, 204, 62, 133, 82, 65, 191, 50, 115, 4, 190, 80, 184, 104, 62, 177, 52, 46, 190, 50, 173, 83, 62, 165, 7, 193, 62, 158, 57, 155, 189, 170, 182, 196, 189, 176, 114, 38, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 40, 29, 190, 210, 114, 16, 189, 250, 35, 100, 62, 147, 77, 252, 189, 135, 163, 178, 189, 40, 134, 139, 61, 220, 161, 225, 188, 124, 239, 215, 61, 159, 16, 208, 189, 234, 235, 191, 61, 247, 35, 236, 61, 186, 241, 185, 60, 81, 216, 11, 62, 46, 182, 156, 61, 78, 127, 18, 189, 197, 205, 145, 62, 173, 73, 169, 189, 79, 221, 169, 189, 36, 163, 53, 62, 236, 226, 94, 60, 227, 49, 100, 189, 134, 201, 229, 189, 153, 104, 45, 62, 56, 138, 122, 190, 7, 249, 155, 188, 108, 134, 15, 62, 173, 14, 254, 60, 173, 180, 202, 189, 182, 19, 6, 62, 9, 195, 153, 61, 42, 200, 208, 189, 31, 171, 0, 62, 16, 151, 67, 191, 99, 185, 88, 190, 135, 210, 32, 62, 77, 50, 205, 61, 94, 170, 215, 190, 157, 233, 198, 61, 249, 125, 81, 62, 94, 14, 177, 190, 167, 140, 145, 61, 75, 64, 238, 61, 216, 91, 255, 189, 102, 173, 149, 62, 182, 106, 70, 190, 184, 249, 151, 189, 115, 16, 215, 61, 15, 118, 126, 61, 109, 185, 100, 62, 165, 97, 85, 189, 123, 230, 139, 190, 120, 120, 215, 189, 240, 248, 231, 190, 89, 39, 15, 60, 85, 14, 153, 62, 219, 143, 202, 190, 87, 99, 48, 189, 158, 91, 206, 62, 236, 113, 167, 61, 254, 247, 93, 62, 131, 82, 238, 62, 100, 101, 4, 61, 68, 252, 31, 191, 31, 205, 218, 185, 124, 6, 36, 189, 68, 130, 247, 61, 109, 43, 16, 62, 89, 136, 141, 189, 46, 177, 79, 188, 146, 200, 28, 190, 54, 107, 14, 190, 33, 50, 36, 62, 197, 172, 255, 61, 148, 219, 20, 60, 100, 226, 4, 62, 173, 146, 11, 61, 25, 19, 10, 60, 11, 95, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 205, 140, 35, 61, 51, 24, 148, 189, 237, 123, 230, 189, 113, 34, 238, 60, 124, 25, 5, 190, 118, 211, 13, 189, 238, 188, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 199, 14, 95, 61, 110, 194, 202, 60, 78, 53, 42, 189, 38, 108, 220, 189, 51, 90, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 158, 10, 221, 189, 138, 34, 236, 61, 137, 14, 14, 191, 0, 216, 154, 62, 200, 229, 64, 191, 102, 78, 52, 190, 228, 180, 56, 190, 10, 104, 9, 190, 139, 246, 117, 62, 127, 239, 244, 189, 155, 140, 189, 62, 76, 213, 130, 62, 222, 146, 246, 61, 86, 157, 3, 62, 146, 232, 131, 190, 34, 166, 181, 189, 45, 143, 72, 190, 7, 232, 35, 61, 215, 74, 130, 62, 84, 146, 100, 61, 43, 162, 240, 190, 86, 211, 135, 62, 56, 193, 103, 189, 102, 80, 188, 62, 18, 215, 211, 61, 129, 213, 2, 190, 166, 237, 146, 62, 88, 252, 1, 62, 208, 0, 156, 190, 69, 228, 154, 189, 15, 105, 151, 62, 29, 124, 97, 189, 199, 139, 168, 190, 116, 134, 92, 189, 208, 238, 129, 61, 118, 99, 218, 189, 182, 58, 20, 62, 108, 207, 237, 189, 228, 49, 160, 61, 81, 97, 91, 60, 117, 168, 161, 190, 182, 84, 247, 61, 179, 48, 224, 62, 154, 108, 221, 190, 61, 29, 154, 62, 192, 108, 117, 62, 102, 198, 43, 62, 96, 222, 40, 190, 104, 178, 135, 188, 55, 101, 104, 60, 33, 240, 211, 62, 139, 130, 22, 62, 131, 38, 130, 190, 59, 192, 164, 61, 57, 223, 228, 61, 237, 132, 162, 57, 19, 18, 50, 61, 135, 113, 183, 189, 166, 202, 227, 189, 8, 98, 17, 62, 141, 233, 59, 189, 221, 88, 69, 62, 78, 201, 225, 61, 226, 225, 242, 190, 18, 69, 54, 189, 19, 56, 48, 61, 121, 144, 1, 191, 3, 14, 230, 62, 153, 212, 146, 190, 126, 119, 135, 190, 228, 107, 157, 190, 246, 245, 105, 189, 6, 102, 253, 187, 11, 123, 46, 62, 153, 237, 17, 62, 37, 242, 140, 62, 135, 178, 191, 62, 119, 30, 10, 63, 0, 196, 73, 190, 190, 131, 40, 190, 92, 58, 149, 189, 135, 27, 54, 62, 183, 176, 185, 62, 179, 25, 166, 62, 214, 244, 203, 61, 86, 194, 253, 57, 63, 177, 67, 61, 70, 79, 247, 62, 83, 122, 131, 61, 151, 113, 150, 188, 99, 157, 120, 61, 197, 187, 238, 61, 181, 168, 122, 190, 233, 255, 173, 62, 53, 161, 92, 62, 163, 119, 216, 190, 222, 120, 25, 63, 9, 140, 40, 62, 52, 20, 198, 61, 13, 65, 15, 62, 234, 119, 9, 189, 87, 72, 231, 189, 236, 213, 63, 60, 111, 202, 131, 189, 28, 13, 67, 189, 32, 51, 135, 61, 179, 235, 177, 59, 26, 92, 151, 191, 239, 237, 208, 61, 183, 161, 154, 189, 121, 67, 54, 190, 139, 243, 232, 189, 58, 34, 64, 190, 113, 242, 48, 190, 24, 133, 229, 61, 56, 66, 145, 189, 76, 226, 126, 62, 188, 165, 157, 62, 55, 116, 250, 189, 115, 249, 148, 60, 206, 176, 17, 62, 2, 198, 165, 190, 121, 247, 102, 62, 27, 248, 201, 61, 183, 184, 151, 190, 24, 136, 35, 189, 41, 111, 76, 62, 192, 37, 10, 190, 34, 227, 239, 190, 75, 24, 194, 190, 116, 93, 62, 63, 212, 123, 139, 189, 1, 154, 131, 62, 162, 90, 168, 61, 230, 221, 101, 62, 91, 221, 154, 62, 143, 228, 12, 191, 152, 52, 161, 62, 224, 32, 153, 190, 178, 204, 132, 60, 145, 118, 212, 188, 165, 106, 31, 191, 39, 252, 152, 60, 83, 225, 98, 190, 28, 153, 115, 62, 114, 202, 14, 61, 61, 47, 111, 62, 209, 123, 56, 61, 111, 228, 132, 62, 111, 9, 225, 190, 180, 179, 113, 189, 242, 141, 163, 189, 30, 225, 145, 190, 78, 60, 192, 61, 145, 135, 140, 190, 4, 124, 30, 190, 239, 196, 169, 62, 155, 12, 185, 190, 136, 163, 240, 190, 99, 222, 3, 189, 34, 163, 151, 190, 39, 69, 32, 62, 33, 99, 250, 190, 194, 236, 254, 60, 13, 123, 166, 189, 27, 93, 42, 190, 17, 218, 148, 189, 184, 75, 133, 189, 205, 66, 128, 62, 176, 34, 71, 62, 208, 64, 201, 61, 207, 144, 95, 62, 217, 7, 172, 62, 180, 28, 110, 62, 226, 193, 73, 190, 17, 111, 61, 190, 238, 58, 29, 62, 161, 167, 131, 189, 72, 218, 86, 62, 105, 192, 54, 62, 25, 141, 37, 190, 10, 241, 18, 62, 148, 105, 208, 60, 96, 80, 134, 62, 10, 30, 50, 61, 83, 253, 4, 190, 32, 109, 48, 62, 111, 41, 202, 189, 3, 24, 7, 190, 157, 3, 131, 61, 3, 213, 99, 62, 149, 201, 79, 190, 198, 148, 240, 61, 86, 213, 105, 58, 195, 141, 21, 190, 64, 213, 169, 61, 110, 46, 44, 190, 210, 172, 50, 62, 204, 104, 237, 189, 54, 138, 18, 62, 21, 7, 59, 61, 190, 29, 52, 190, 89, 228, 73, 60, 30, 75, 24, 190, 153, 64, 19, 190, 250, 118, 177, 188, 181, 67, 124, 61, 17, 12, 205, 189, 59, 191, 57, 190, 197, 73, 21, 61, 232, 34, 30, 190, 197, 51, 97, 189, 21, 218, 25, 62, 10, 48, 93, 60, 179, 65, 33, 190, 55, 232, 247, 61, 245, 70, 204, 61, 99, 146, 91, 189, 200, 22, 78, 61, 246, 239, 228, 61, 78, 82, 32, 190, 116, 90, 126, 187, 201, 185, 15, 62, 170, 153, 200, 61, 21, 25, 129, 191, 28, 140, 79, 190, 108, 200, 67, 62, 21, 132, 26, 189, 126, 141, 8, 190, 118, 172, 238, 61, 190, 217, 136, 61, 202, 179, 128, 60, 156, 106, 216, 61, 16, 176, 153, 61, 174, 177, 166, 62, 91, 142, 39, 187, 108, 210, 165, 59, 50, 37, 41, 190, 202, 1, 182, 61, 153, 18, 120, 62, 127, 155, 131, 62, 231, 197, 100, 190, 213, 12, 212, 61, 143, 205, 126, 190, 160, 90, 116, 190, 91, 97, 155, 189, 81, 239, 86, 62, 176, 189, 237, 190, 125, 86, 39, 190, 185, 124, 128, 62, 6, 1, 214, 189, 77, 46, 65, 62, 39, 85, 222, 62, 88, 227, 97, 190, 199, 197, 2, 190, 179, 74, 60, 61, 17, 40, 131, 190, 21, 190, 134, 191, 0, 101, 51, 63, 17, 230, 199, 189, 182, 52, 228, 61, 62, 39, 220, 61, 71, 208, 234, 60, 92, 93, 54, 62, 129, 228, 176, 190, 12, 110, 131, 189, 6, 99, 63, 191, 252, 233, 96, 61, 185, 211, 69, 62, 64, 185, 58, 191, 70, 187, 207, 190, 15, 223, 149, 59, 208, 204, 89, 190, 20, 123, 150, 62, 180, 210, 9, 190, 167, 144, 76, 62, 233, 82, 156, 186, 108, 23, 5, 191, 5, 42, 81, 191, 157, 21, 33, 190, 134, 142, 39, 191, 142, 169, 69, 190, 128, 232, 161, 190, 29, 43, 92, 191, 236, 155, 237, 189, 151, 140, 134, 190, 19, 179, 190, 190, 191, 132, 117, 61, 1, 60, 28, 62, 46, 140, 112, 189, 150, 148, 33, 62, 176, 88, 42, 190, 63, 161, 195, 189, 221, 252, 188, 61, 229, 123, 26, 61, 85, 117, 10, 190, 26, 103, 106, 61, 164, 4, 22, 62, 121, 101, 19, 190, 158, 185, 101, 190, 143, 153, 31, 191, 4, 35, 170, 189, 18, 60, 233, 59, 46, 168, 76, 61, 102, 201, 119, 190, 172, 10, 254, 190, 238, 168, 60, 190, 107, 27, 88, 191, 84, 225, 7, 62, 126, 188, 27, 190, 146, 198, 125, 61, 39, 178, 14, 63, 47, 142, 163, 189, 227, 79, 153, 189, 77, 229, 21, 190, 185, 100, 248, 189, 169, 197, 135, 189, 17, 57, 239, 189, 14, 226, 40, 190, 4, 29, 238, 61, 230, 2, 213, 190, 160, 207, 37, 189, 187, 60, 37, 189, 41, 89, 236, 189, 91, 190, 40, 62, 15, 42, 171, 189, 71, 204, 153, 189, 75, 28, 113, 62, 174, 43, 77, 191, 111, 202, 71, 62, 135, 62, 172, 190, 41, 149, 133, 189, 107, 22, 95, 62, 92, 23, 133, 191, 0, 110, 91, 62, 142, 214, 194, 190, 112, 226, 88, 61, 179, 55, 208, 61, 137, 60, 224, 61, 72, 106, 210, 61, 209, 91, 14, 62, 4, 6, 159, 190, 169, 254, 60, 191, 8, 140, 50, 62, 17, 14, 145, 190, 46, 148, 36, 62, 162, 24, 41, 59, 221, 29, 39, 190, 119, 112, 38, 189, 59, 107, 21, 190, 220, 10, 110, 190, 28, 25, 117, 62, 21, 254, 184, 190, 69, 145, 69, 59, 94, 129, 53, 63, 169, 154, 21, 62, 49, 149, 88, 62, 148, 191, 32, 190, 0, 19, 168, 62, 24, 192, 22, 62, 105, 39, 150, 190, 33, 128, 231, 61, 231, 185, 128, 190, 76, 121, 70, 190, 236, 7, 46, 189, 219, 255, 132, 190, 104, 31, 130, 61, 161, 29, 1, 62, 249, 169, 146, 62, 38, 192, 114, 62, 18, 75, 174, 188, 51, 190, 129, 186, 83, 48, 82, 61, 151, 201, 57, 190, 246, 81, 157, 190, 99, 121, 242, 189, 117, 8, 188, 190, 74, 231, 52, 62, 104, 97, 37, 189, 230, 254, 75, 190, 14, 187, 221, 61, 49, 90, 146, 189, 71, 72, 122, 189, 113, 209, 45, 61, 1, 81, 250, 60, 29, 144, 35, 190, 51, 170, 101, 189, 1, 73, 95, 61, 239, 103, 126, 188, 208, 208, 37, 62, 85, 216, 136, 61, 135, 230, 227, 57, 80, 159, 190, 189, 116, 150, 32, 190, 51, 151, 18, 62, 16, 48, 217, 61, 221, 22, 182, 189, 166, 40, 201, 60, 162, 209, 247, 61, 208, 153, 231, 188, 241, 160, 196, 61, 212, 255, 204, 61, 83, 187, 174, 189, 207, 53, 180, 60, 12, 197, 36, 190, 51, 212, 14, 189, 78, 3, 239, 60, 241, 243, 153, 61, 49, 12, 19, 189, 174, 152, 172, 61, 20, 101, 7, 189, 96, 192, 88, 189, 51, 57, 25, 190, 184, 26, 51, 190, 106, 167, 143, 189, 223, 62, 139, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 223, 112, 95, 188, 15, 46, 229, 188, 106, 61, 238, 61, 4, 193, 99, 61, 178, 122, 221, 61, 168, 157, 8, 61, 209, 148, 64, 190, 74, 216, 62, 190, 55, 77, 1, 190, 94, 128, 142, 60, 233, 125, 157, 61, 3, 61, 86, 190, 176, 129, 62, 189, 105, 223, 241, 60, 127, 76, 122, 61, 153, 182, 221, 189, 75, 81, 93, 189, 234, 23, 136, 188, 121, 170, 29, 190, 158, 105, 49, 190, 51, 89, 11, 190, 163, 159, 0, 188, 222, 57, 222, 61, 206, 240, 14, 190, 124, 55, 103, 61, 20, 162, 182, 189, 249, 82, 22, 190, 95, 69, 203, 60, 197, 145, 127, 61, 129, 135, 152, 61, 70, 21, 173, 61, 24, 42, 133, 189, 28, 94, 46, 59, 143, 242, 99, 62, 24, 19, 94, 62, 156, 72, 56, 189, 160, 196, 42, 60, 227, 69, 24, 190, 31, 196, 43, 189, 199, 160, 190, 61, 215, 16, 34, 60, 81, 98, 12, 62, 83, 214, 130, 62, 250, 179, 85, 190, 142, 242, 3, 62, 167, 190, 168, 62, 9, 16, 9, 62, 218, 47, 37, 190, 127, 32, 240, 61, 127, 188, 158, 59, 72, 162, 83, 62, 213, 133, 166, 189, 199, 225, 131, 60, 119, 133, 192, 61, 9, 99, 161, 188, 20, 101, 232, 61, 108, 213, 179, 61, 246, 140, 115, 61, 101, 28, 85, 62, 158, 221, 55, 190, 207, 211, 229, 61, 21, 204, 133, 62, 95, 222, 129, 62, 253, 38, 34, 62, 151, 121, 179, 190, 208, 235, 27, 190, 147, 82, 244, 61, 126, 103, 32, 191, 84, 167, 39, 62, 10, 252, 5, 190, 56, 133, 114, 62, 66, 193, 217, 61, 64, 36, 87, 190, 71, 244, 85, 189, 84, 119, 11, 62, 165, 233, 173, 61, 84, 95, 96, 190, 208, 123, 43, 61, 96, 163, 130, 60, 252, 75, 236, 62, 185, 173, 251, 61, 192, 74, 196, 61, 98, 11, 142, 61, 16, 62, 31, 62, 154, 187, 52, 62, 245, 39, 219, 189, 122, 33, 98, 61, 214, 15, 229, 61, 236, 241, 148, 188, 72, 35, 23, 62, 238, 230, 90, 190, 240, 42, 32, 187, 98, 102, 90, 62, 217, 179, 176, 190, 159, 34, 148, 190, 68, 152, 34, 190, 213, 77, 136, 62, 222, 240, 0, 62, 178, 177, 42, 63, 121, 9, 86, 189, 29, 59, 195, 61, 160, 121, 235, 61, 112, 42, 62, 189, 21, 21, 180, 188, 75, 166, 150, 190, 211, 54, 7, 62, 26, 101, 250, 189, 12, 75, 41, 188, 162, 34, 219, 187, 22, 232, 157, 189, 197, 82, 54, 62, 60, 127, 52, 189, 40, 94, 22, 62, 248, 89, 126, 189, 76, 26, 180, 61, 60, 253, 89, 61, 214, 219, 45, 62, 122, 135, 9, 190, 59, 142, 41, 190, 18, 85, 203, 189, 178, 46, 66, 61, 0, 1, 38, 189, 118, 195, 204, 187, 185, 206, 198, 189, 85, 21, 217, 61, 0, 201, 72, 189, 189, 194, 211, 189, 24, 252, 26, 190, 179, 219, 24, 190, 0, 163, 189, 189, 165, 100, 197, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 62, 114, 133, 61, 152, 68, 176, 188, 205, 226, 66, 61, 65, 63, 151, 189, 128, 67, 0, 62, 60, 71, 132, 61, 220, 128, 54, 61, 122, 109, 164, 188, 79, 48, 119, 189, 115, 242, 7, 190, 38, 238, 8, 190, 65, 236, 31, 190, 18, 60, 116, 189, 15, 87, 201, 189, 45, 146, 232, 188, 234, 217, 19, 189, 141, 211, 13, 190, 154, 254, 154, 61, 135, 216, 236, 189, 30, 246, 24, 62, 219, 84, 1, 62, 195, 163, 37, 190, 250, 23, 149, 61, 99, 162, 22, 190, 144, 115, 106, 60, 195, 172, 41, 189, 67, 125, 161, 190, 217, 247, 89, 190, 175, 250, 194, 62, 129, 140, 76, 190, 72, 31, 132, 62, 212, 219, 148, 61, 29, 173, 178, 62, 1, 203, 180, 62, 68, 164, 31, 190, 133, 209, 99, 62, 144, 82, 4, 190, 163, 145, 138, 61, 124, 104, 164, 189, 2, 54, 187, 189, 161, 142, 105, 62, 179, 17, 86, 62, 140, 9, 160, 62, 31, 207, 89, 59, 93, 123, 42, 62, 127, 57, 66, 190, 153, 21, 177, 62, 8, 45, 171, 190, 255, 145, 129, 61, 254, 179, 31, 191, 13, 209, 214, 190, 66, 200, 51, 61, 160, 246, 197, 189, 192, 63, 81, 190, 181, 148, 79, 62, 46, 118, 162, 190, 193, 43, 84, 190, 130, 169, 159, 61, 70, 162, 59, 186, 254, 70, 140, 190, 156, 240, 179, 61, 213, 44, 47, 190, 132, 149, 42, 190, 239, 68, 217, 189, 136, 7, 151, 62, 60, 83, 16, 62, 108, 99, 134, 62, 254, 53, 154, 60, 174, 208, 171, 190, 250, 49, 154, 60, 234, 95, 138, 191, 222, 16, 254, 189, 235, 106, 249, 189, 19, 232, 46, 62, 39, 97, 83, 62, 57, 231, 104, 191, 187, 17, 13, 61, 46, 202, 79, 191, 234, 33, 203, 188, 41, 20, 121, 189, 6, 164, 72, 60, 134, 220, 43, 63, 95, 238, 59, 190, 174, 129, 29, 62, 98, 246, 6, 190, 10, 80, 208, 62, 228, 249, 201, 62, 64, 236, 174, 189, 58, 47, 22, 191, 180, 16, 171, 62, 181, 110, 61, 189, 111, 103, 14, 190, 85, 107, 71, 188, 230, 172, 171, 189, 132, 78, 41, 62, 234, 126, 40, 190, 52, 66, 54, 189, 66, 234, 100, 61, 5, 189, 245, 61, 7, 99, 220, 189, 56, 94, 32, 62, 221, 248, 18, 60, 238, 214, 252, 189, 107, 199, 130, 59, 81, 164, 101, 61, 57, 127, 45, 189, 237, 244, 22, 190, 148, 245, 3, 190, 145, 222, 208, 189, 114, 177, 3, 61, 6, 38, 129, 61, 192, 110, 38, 188, 55, 32, 185, 189, 254, 3, 216, 59, 163, 206, 250, 61, 120, 72, 15, 60, 184, 135, 35, 190, 219, 52, 199, 61, 25, 37, 181, 61, 159, 94, 16, 190, 251, 200, 45, 189, 111, 11, 9, 62, 30, 137, 201, 190, 127, 228, 69, 190, 34, 30, 194, 62, 255, 161, 239, 189, 166, 110, 48, 62, 126, 57, 188, 61, 51, 189, 92, 62, 118, 125, 178, 61, 188, 217, 8, 189, 56, 42, 30, 62, 112, 99, 204, 61, 193, 197, 221, 188, 25, 57, 93, 60, 148, 11, 135, 190, 60, 180, 112, 62, 242, 109, 124, 62, 84, 137, 168, 62, 201, 181, 255, 189, 14, 134, 18, 62, 10, 141, 176, 190, 45, 19, 66, 62, 70, 245, 210, 189, 124, 197, 231, 188, 152, 24, 5, 62, 98, 226, 82, 190, 171, 103, 145, 62, 56, 100, 138, 190, 15, 56, 129, 61, 33, 64, 183, 62, 83, 176, 28, 189, 155, 199, 123, 190, 137, 87, 125, 189, 26, 28, 16, 62, 85, 235, 36, 61, 134, 227, 216, 62, 230, 9, 136, 190, 218, 17, 24, 62, 210, 230, 176, 62, 122, 153, 227, 62, 1, 73, 170, 61, 219, 186, 177, 189, 191, 122, 194, 60, 15, 21, 61, 62, 216, 71, 47, 190, 64, 151, 114, 190, 140, 70, 251, 188, 251, 127, 30, 62, 7, 81, 68, 62, 169, 146, 42, 62, 126, 223, 175, 190, 14, 187, 152, 61, 138, 116, 237, 190, 63, 43, 124, 61, 83, 81, 40, 61, 129, 244, 201, 61, 18, 144, 2, 191, 50, 140, 179, 190, 69, 255, 141, 189, 151, 240, 120, 60, 239, 237, 160, 190, 80, 37, 142, 61, 99, 145, 197, 190, 197, 160, 160, 190, 57, 197, 136, 62, 246, 119, 149, 190, 240, 12, 146, 190, 235, 170, 19, 61, 29, 81, 177, 189, 247, 119, 184, 61, 167, 142, 93, 62, 109, 171, 127, 61, 38, 45, 125, 61, 217, 104, 43, 191, 32, 90, 140, 62, 24, 143, 102, 190, 209, 147, 130, 189, 128, 88, 27, 62, 196, 199, 99, 191, 5, 235, 140, 62, 186, 251, 2, 62, 141, 196, 101, 59, 150, 187, 155, 61, 186, 83, 25, 61, 234, 114, 146, 62, 45, 238, 113, 62, 93, 180, 109, 190, 124, 156, 4, 191, 201, 89, 41, 61, 12, 244, 132, 190, 231, 187, 52, 62, 5, 81, 164, 189, 82, 71, 151, 189, 22, 82, 155, 61, 226, 24, 239, 190, 104, 116, 175, 190, 28, 159, 69, 62, 172, 115, 92, 61, 175, 137, 41, 190, 171, 79, 133, 61, 196, 68, 67, 190, 93, 162, 9, 62, 5, 55, 37, 62, 247, 191, 193, 61, 245, 63, 255, 188, 244, 150, 120, 189, 210, 200, 52, 189, 110, 237, 232, 188, 204, 20, 245, 61, 150, 53, 85, 190, 155, 87, 171, 187, 21, 242, 70, 189, 195, 179, 164, 61, 37, 27, 151, 190, 181, 148, 6, 60, 175, 184, 79, 190, 86, 88, 199, 190, 80, 61, 189, 187, 48, 127, 154, 61, 140, 29, 93, 189, 129, 49, 249, 189, 178, 211, 32, 62, 71, 157, 215, 58, 183, 122, 133, 60, 3, 127, 35, 190, 99, 24, 110, 189, 23, 165, 195, 189, 177, 193, 21, 190, 140, 246, 164, 188, 230, 215, 198, 61, 85, 218, 26, 61, 117, 83, 151, 60, 192, 90, 14, 190, 254, 176, 130, 62, 165, 36, 189, 61, 66, 236, 29, 62, 22, 29, 9, 59, 75, 165, 133, 189, 187, 254, 123, 62, 92, 101, 16, 190, 136, 225, 199, 60, 32, 75, 13, 190, 84, 200, 80, 190, 43, 41, 57, 62, 96, 47, 220, 61, 17, 131, 192, 61, 34, 75, 95, 62, 44, 78, 52, 62, 96, 56, 88, 61, 67, 155, 47, 62, 22, 99, 89, 190, 131, 179, 144, 62, 125, 251, 202, 62, 88, 241, 67, 189, 38, 244, 185, 61, 44, 237, 74, 190, 12, 84, 14, 189, 8, 233, 249, 61, 42, 215, 28, 190, 164, 141, 53, 190, 184, 53, 176, 62, 217, 161, 31, 191, 87, 179, 158, 190, 14, 110, 167, 62, 181, 3, 68, 188, 172, 35, 163, 190, 230, 126, 173, 62, 224, 161, 177, 61, 16, 228, 5, 190, 66, 31, 164, 61, 192, 50, 163, 61, 10, 54, 195, 62, 8, 105, 81, 189, 40, 31, 28, 191, 130, 219, 137, 61, 224, 131, 128, 61, 0, 51, 31, 62, 236, 135, 150, 62, 212, 171, 89, 191, 244, 69, 120, 61, 116, 112, 80, 191, 64, 118, 246, 190, 112, 126, 155, 189, 117, 247, 138, 62, 220, 133, 56, 191, 84, 69, 148, 189, 73, 249, 221, 62, 65, 146, 209, 61, 50, 229, 162, 186, 11, 50, 0, 63, 136, 96, 76, 190, 50, 59, 69, 191, 61, 129, 23, 189, 237, 252, 104, 190, 54, 61, 147, 61, 83, 126, 75, 191, 39, 39, 14, 63, 74, 102, 151, 191, 179, 189, 14, 191, 82, 43, 140, 190, 235, 95, 145, 190, 167, 109, 73, 62, 117, 235, 25, 190, 214, 79, 145, 62, 98, 145, 186, 189, 225, 59, 183, 62, 102, 140, 146, 62, 114, 153, 233, 190, 16, 95, 200, 190, 183, 242, 187, 60, 145, 6, 148, 61, 142, 202, 45, 62, 202, 119, 99, 60, 204, 130, 67, 191, 12, 84, 72, 62, 112, 141, 220, 60, 252, 158, 220, 189, 23, 91, 65, 62, 72, 76, 55, 61, 137, 57, 157, 62, 226, 13, 18, 62, 73, 243, 246, 190, 223, 31, 23, 62, 20, 187, 236, 62, 228, 246, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 35, 188, 61, 142, 69, 232, 61, 70, 23, 186, 189, 91, 140, 75, 189, 23, 236, 52, 61, 171, 119, 206, 62, 125, 29, 175, 60, 146, 133, 226, 61, 180, 221, 64, 62, 196, 103, 21, 189, 147, 108, 133, 62, 6, 33, 198, 189, 236, 143, 128, 190, 73, 162, 145, 186, 170, 61, 245, 189, 120, 144, 78, 190, 162, 30, 163, 60, 36, 2, 226, 188, 76, 7, 107, 61, 175, 33, 121, 62, 100, 189, 115, 189, 211, 175, 19, 61, 253, 219, 185, 188, 166, 185, 193, 189, 17, 174, 7, 190, 131, 254, 169, 61, 35, 212, 92, 189, 87, 214, 1, 61, 197, 13, 157, 189, 219, 141, 115, 189, 223, 138, 132, 189, 97, 152, 155, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 137, 226, 60, 193, 107, 174, 190, 226, 179, 46, 189, 230, 235, 217, 62, 65, 191, 117, 62, 1, 78, 167, 62, 197, 71, 246, 190, 22, 184, 42, 191, 73, 46, 82, 62, 40, 217, 83, 188, 65, 54, 18, 190, 21, 104, 113, 191, 89, 151, 166, 62, 158, 236, 94, 191, 206, 249, 137, 190, 245, 203, 211, 186, 32, 117, 221, 188, 50, 145, 237, 188, 85, 200, 51, 62, 253, 109, 228, 190, 97, 103, 51, 62, 34, 89, 40, 62, 188, 131, 44, 191, 251, 133, 89, 63, 203, 31, 184, 188, 102, 177, 108, 190, 21, 198, 225, 190, 102, 139, 12, 191, 114, 74, 61, 62, 92, 157, 141, 62, 151, 22, 90, 191, 152, 159, 54, 63, 239, 32, 53, 190, 144, 92, 65, 61, 202, 190, 110, 61, 60, 41, 114, 188, 178, 169, 201, 190, 89, 81, 200, 189, 14, 111, 112, 62, 53, 203, 124, 62, 37, 143, 145, 189, 218, 176, 128, 60, 60, 32, 128, 190, 153, 57, 253, 61, 175, 75, 235, 186, 71, 25, 168, 188, 134, 181, 82, 62, 61, 246, 214, 61, 189, 31, 39, 62, 42, 21, 0, 62, 195, 186, 148, 188, 121, 15, 136, 190, 43, 73, 140, 61, 140, 1, 51, 61, 154, 125, 93, 62, 112, 63, 146, 62, 68, 101, 5, 190, 69, 214, 37, 189, 127, 225, 151, 189, 13, 206, 1, 189, 25, 40, 255, 61, 171, 42, 183, 189, 0, 88, 72, 189, 11, 82, 228, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 9, 80, 62, 75, 29, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {29, 84, 184, 62, 47, 202, 229, 190, 125, 238, 193, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 229, 235, 63, 227, 203, 160, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}