// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 25, 163, 189, 229, 215, 143, 190, 12, 229, 83, 190, 7, 148, 219, 62, 55, 241, 250, 190, 63, 207, 239, 190, 186, 64, 133, 62, 232, 168, 5, 191, 33, 225, 141, 62, 131, 96, 245, 190, 163, 97, 102, 191, 66, 0, 149, 62, 32, 173, 51, 191, 75, 153, 151, 190, 244, 137, 215, 190, 1, 133, 168, 190, 58, 160, 50, 63, 229, 239, 129, 62, 255, 54, 149, 62, 38, 129, 125, 189, 119, 153, 14, 63, 241, 64, 26, 191, 164, 220, 134, 62, 69, 147, 146, 190, 162, 237, 191, 190, 47, 84, 117, 190, 81, 115, 27, 63, 53, 28, 130, 190, 171, 162, 5, 63, 45, 181, 6, 191, 141, 205, 39, 63, 249, 123, 158, 190, 103, 219, 116, 190, 215, 1, 141, 190, 169, 34, 33, 63, 226, 163, 17, 62, 224, 142, 127, 190, 3, 159, 1, 191, 223, 103, 91, 189, 246, 16, 117, 62, 96, 12, 84, 191, 52, 88, 122, 62, 105, 243, 159, 189, 239, 230, 234, 62, 194, 171, 200, 190, 216, 194, 171, 62, 217, 155, 206, 62, 204, 31, 2, 63, 223, 224, 159, 61, 85, 101, 40, 63, 181, 243, 167, 190, 218, 46, 4, 191, 102, 169, 230, 190, 89, 50, 40, 190, 81, 50, 72, 62, 240, 36, 14, 190, 44, 185, 129, 189, 130, 200, 214, 190, 126, 151, 3, 191, 193, 86, 43, 190, 92, 173, 134, 190, 47, 64, 63, 191, 212, 177, 153, 190, 191, 198, 22, 63, 148, 106, 129, 190, 140, 245, 212, 190, 147, 78, 140, 62, 68, 23, 22, 63, 121, 195, 206, 62, 191, 125, 56, 61, 9, 99, 158, 62, 133, 21, 38, 61, 169, 135, 141, 61, 69, 13, 177, 62, 198, 162, 221, 190, 194, 230, 152, 189, 40, 86, 31, 63, 64, 103, 197, 189, 240, 223, 224, 62, 48, 2, 210, 189, 79, 158, 220, 190, 223, 107, 82, 62, 7, 46, 161, 62, 2, 102, 167, 190, 164, 123, 130, 62, 207, 87, 31, 63, 71, 241, 177, 60, 45, 98, 19, 188, 54, 27, 71, 191, 28, 207, 198, 61, 235, 199, 212, 62, 85, 162, 16, 191, 168, 29, 180, 190, 53, 121, 152, 190, 197, 233, 212, 62, 210, 177, 166, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 9, 31, 191, 6, 248, 174, 189, 42, 105, 224, 190, 222, 181, 167, 61, 243, 34, 219, 190, 61, 32, 205, 190, 93, 193, 8, 190, 206, 79, 133, 190, 150, 96, 202, 62, 79, 28, 252, 62, 140, 233, 204, 62, 140, 254, 29, 63, 38, 205, 254, 62, 6, 2, 254, 62, 124, 126, 45, 62, 99, 48, 52, 62, 35, 194, 19, 63, 250, 82, 221, 62, 70, 89, 3, 63, 129, 49, 1, 63, 82, 163, 33, 62, 179, 162, 9, 61, 234, 27, 37, 63, 53, 84, 5, 191, 82, 88, 214, 190, 118, 207, 81, 62, 198, 91, 52, 190, 180, 60, 230, 189, 57, 205, 176, 62, 228, 88, 106, 62, 125, 203, 77, 190, 217, 211, 19, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 140, 13, 62, 130, 121, 83, 61, 90, 246, 114, 62, 132, 158, 135, 189, 20, 75, 248, 189, 215, 67, 212, 189, 151, 241, 160, 189, 126, 133, 230, 60, 99, 187, 179, 188, 150, 7, 0, 62, 174, 235, 214, 60, 231, 182, 23, 62, 86, 254, 5, 62, 182, 170, 131, 61, 44, 70, 226, 60, 190, 98, 79, 62, 202, 125, 250, 188, 28, 120, 76, 189, 60, 7, 234, 61, 148, 89, 84, 61, 57, 129, 132, 188, 34, 125, 109, 189, 17, 231, 55, 62, 168, 73, 27, 189, 143, 184, 244, 59, 92, 25, 122, 62, 242, 191, 246, 61, 112, 173, 15, 189, 35, 75, 138, 62, 251, 54, 192, 61, 88, 34, 78, 189, 23, 242, 209, 61, 111, 242, 202, 189, 26, 142, 151, 60, 122, 211, 155, 61, 58, 69, 129, 61, 188, 24, 213, 189, 163, 156, 244, 60, 28, 30, 60, 62, 127, 51, 20, 190, 118, 212, 171, 59, 242, 155, 53, 61, 40, 105, 129, 189, 227, 116, 83, 61, 226, 52, 42, 190, 226, 100, 204, 189, 248, 98, 122, 61, 8, 163, 7, 61, 86, 34, 181, 188, 79, 185, 1, 190, 161, 134, 71, 190, 130, 153, 8, 190, 177, 82, 102, 189, 177, 199, 179, 61, 240, 31, 113, 62, 232, 241, 99, 61, 76, 183, 72, 190, 161, 208, 21, 62, 124, 228, 146, 61, 251, 184, 152, 60, 162, 4, 143, 61, 29, 16, 18, 60, 71, 251, 193, 61, 119, 76, 132, 61, 124, 6, 36, 189, 68, 130, 247, 61, 109, 43, 16, 62, 89, 136, 141, 189, 46, 177, 79, 188, 146, 200, 28, 190, 54, 107, 14, 190, 33, 50, 36, 62, 197, 172, 255, 61, 148, 219, 20, 60, 100, 226, 4, 62, 173, 146, 11, 61, 25, 19, 10, 60, 11, 95, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 205, 140, 35, 61, 51, 24, 148, 189, 237, 123, 230, 189, 113, 34, 238, 60, 124, 25, 5, 190, 118, 211, 13, 189, 238, 188, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 199, 14, 95, 61, 110, 194, 202, 60, 78, 53, 42, 189, 38, 108, 220, 189, 51, 90, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 97, 195, 133, 188, 100, 48, 246, 61, 207, 63, 144, 190, 105, 46, 173, 62, 54, 233, 64, 189, 27, 197, 30, 189, 111, 245, 166, 189, 193, 52, 159, 61, 147, 238, 48, 62, 126, 91, 238, 189, 77, 221, 93, 62, 166, 126, 241, 61, 202, 180, 60, 62, 50, 87, 32, 62, 184, 166, 214, 189, 120, 17, 167, 188, 49, 112, 89, 190, 141, 12, 187, 61, 147, 88, 113, 62, 245, 47, 177, 61, 149, 50, 2, 62, 87, 7, 62, 62, 141, 36, 32, 190, 140, 16, 52, 190, 12, 254, 243, 187, 45, 224, 26, 190, 37, 112, 85, 62, 8, 40, 74, 189, 69, 52, 98, 190, 149, 240, 103, 187, 48, 25, 147, 61, 206, 50, 133, 189, 167, 130, 7, 190, 73, 242, 236, 188, 27, 159, 80, 190, 19, 180, 133, 189, 155, 219, 243, 61, 14, 126, 80, 188, 177, 213, 129, 61, 190, 1, 187, 189, 147, 163, 44, 190, 45, 26, 28, 62, 36, 107, 85, 62, 92, 19, 99, 190, 240, 113, 36, 62, 111, 149, 188, 61, 127, 65, 54, 62, 188, 197, 161, 189, 123, 195, 163, 188, 124, 70, 135, 189, 223, 154, 65, 62, 175, 17, 110, 61, 68, 23, 28, 190, 156, 134, 162, 61, 77, 115, 212, 61, 173, 224, 160, 61, 131, 249, 250, 60, 180, 32, 143, 189, 199, 83, 131, 189, 45, 72, 48, 62, 126, 55, 158, 60, 189, 90, 189, 61, 243, 195, 31, 59, 13, 169, 8, 62, 97, 113, 6, 189, 115, 209, 253, 186, 64, 170, 141, 190, 204, 227, 250, 62, 135, 188, 89, 190, 234, 71, 80, 190, 237, 237, 79, 190, 52, 227, 11, 190, 100, 223, 198, 188, 200, 237, 250, 61, 114, 9, 39, 187, 175, 25, 6, 62, 188, 131, 134, 62, 199, 30, 12, 63, 108, 245, 21, 190, 198, 118, 219, 189, 62, 202, 185, 189, 133, 95, 208, 61, 118, 24, 46, 62, 126, 153, 106, 62, 175, 10, 70, 62, 156, 65, 59, 189, 164, 143, 37, 189, 16, 12, 173, 187, 58, 51, 99, 61, 185, 156, 212, 188, 121, 253, 64, 61, 242, 190, 0, 62, 48, 101, 35, 190, 112, 252, 197, 62, 62, 145, 139, 60, 254, 130, 213, 190, 68, 242, 50, 62, 106, 208, 44, 60, 28, 76, 151, 189, 174, 213, 184, 60, 204, 40, 6, 190, 87, 72, 231, 189, 58, 16, 139, 189, 202, 155, 70, 189, 145, 96, 219, 189, 91, 53, 166, 61, 169, 38, 200, 189, 200, 23, 131, 190, 204, 240, 108, 61, 211, 160, 57, 190, 208, 158, 63, 190, 98, 188, 84, 60, 101, 112, 29, 190, 195, 64, 22, 190, 130, 233, 158, 61, 22, 167, 143, 189, 183, 205, 221, 61, 72, 237, 36, 62, 153, 32, 22, 189, 115, 249, 148, 60, 171, 247, 30, 62, 156, 178, 86, 190, 100, 111, 209, 61, 28, 106, 4, 62, 13, 142, 203, 189, 134, 204, 21, 190, 132, 46, 10, 190, 88, 53, 53, 61, 47, 215, 35, 190, 184, 146, 133, 190, 29, 82, 64, 62, 65, 36, 87, 189, 216, 210, 67, 62, 1, 210, 143, 61, 159, 183, 203, 61, 67, 172, 158, 62, 77, 69, 50, 189, 226, 200, 153, 62, 166, 214, 127, 190, 210, 254, 238, 60, 37, 171, 112, 189, 64, 88, 252, 190, 166, 37, 157, 186, 111, 32, 27, 190, 43, 69, 89, 62, 155, 137, 174, 187, 105, 49, 73, 62, 53, 101, 114, 59, 196, 7, 41, 62, 28, 182, 194, 190, 22, 220, 189, 61, 41, 222, 169, 189, 7, 103, 112, 190, 227, 185, 142, 61, 171, 122, 42, 190, 241, 52, 223, 189, 120, 72, 129, 62, 90, 144, 217, 190, 249, 27, 124, 190, 252, 167, 82, 189, 60, 143, 109, 190, 185, 246, 4, 62, 49, 156, 135, 190, 118, 126, 154, 61, 118, 139, 29, 58, 235, 10, 27, 190, 170, 51, 24, 60, 65, 42, 34, 190, 36, 51, 108, 62, 203, 76, 28, 62, 225, 5, 110, 189, 130, 67, 138, 61, 53, 153, 107, 62, 215, 107, 115, 62, 111, 161, 4, 190, 202, 124, 36, 190, 14, 149, 18, 62, 118, 118, 3, 190, 66, 13, 119, 60, 240, 32, 191, 61, 205, 167, 110, 189, 199, 172, 232, 61, 40, 100, 168, 189, 116, 154, 208, 189, 194, 23, 49, 61, 103, 174, 14, 190, 223, 169, 56, 62, 8, 82, 149, 189, 135, 9, 203, 188, 243, 233, 224, 61, 57, 133, 81, 61, 33, 172, 106, 190, 198, 148, 240, 61, 86, 213, 105, 58, 195, 141, 21, 190, 64, 213, 169, 61, 110, 46, 44, 190, 210, 172, 50, 62, 204, 104, 237, 189, 54, 138, 18, 62, 21, 7, 59, 61, 190, 29, 52, 190, 89, 228, 73, 60, 30, 75, 24, 190, 153, 64, 19, 190, 250, 118, 177, 188, 181, 67, 124, 61, 17, 12, 205, 189, 59, 191, 57, 190, 197, 73, 21, 61, 232, 34, 30, 190, 197, 51, 97, 189, 21, 218, 25, 62, 10, 48, 93, 60, 179, 65, 33, 190, 55, 232, 247, 61, 245, 70, 204, 61, 99, 146, 91, 189, 200, 22, 78, 61, 246, 239, 228, 61, 78, 82, 32, 190, 116, 90, 126, 187, 201, 185, 15, 62, 170, 153, 200, 61, 240, 24, 126, 190, 107, 154, 155, 60, 80, 202, 61, 62, 140, 11, 174, 60, 69, 130, 231, 186, 160, 139, 3, 190, 181, 250, 119, 187, 76, 26, 25, 62, 126, 237, 41, 62, 6, 14, 148, 61, 221, 39, 20, 62, 231, 52, 20, 60, 15, 4, 211, 61, 26, 53, 31, 190, 9, 35, 12, 62, 112, 65, 27, 62, 103, 53, 234, 61, 121, 6, 198, 189, 39, 4, 157, 188, 130, 198, 1, 190, 0, 68, 4, 61, 157, 60, 3, 189, 89, 146, 69, 62, 113, 174, 17, 190, 162, 156, 18, 190, 84, 88, 226, 61, 46, 29, 173, 189, 207, 238, 56, 62, 126, 2, 111, 62, 242, 129, 47, 190, 99, 245, 176, 189, 179, 162, 190, 60, 110, 156, 133, 190, 17, 25, 157, 190, 231, 20, 201, 189, 82, 24, 193, 190, 236, 25, 84, 62, 142, 179, 169, 60, 228, 16, 81, 60, 139, 11, 173, 62, 223, 121, 62, 189, 127, 57, 241, 61, 35, 216, 38, 190, 147, 139, 234, 61, 82, 76, 249, 61, 247, 171, 242, 190, 211, 35, 145, 189, 102, 115, 122, 189, 63, 121, 220, 61, 43, 221, 103, 62, 250, 13, 30, 189, 245, 205, 12, 62, 228, 195, 19, 189, 58, 84, 210, 189, 243, 30, 53, 188, 157, 21, 33, 190, 31, 135, 228, 189, 186, 235, 113, 61, 126, 146, 47, 190, 121, 161, 99, 190, 28, 165, 61, 61, 122, 189, 210, 190, 109, 183, 92, 190, 201, 18, 245, 189, 1, 60, 28, 62, 46, 140, 112, 189, 254, 48, 27, 62, 171, 159, 250, 189, 63, 161, 195, 189, 90, 98, 85, 61, 210, 113, 121, 187, 85, 117, 10, 190, 158, 80, 187, 61, 212, 248, 241, 61, 237, 76, 31, 61, 110, 176, 245, 189, 99, 199, 63, 190, 170, 146, 133, 189, 89, 141, 32, 186, 71, 217, 27, 60, 120, 132, 193, 189, 175, 156, 11, 189, 209, 60, 57, 190, 139, 181, 135, 190, 84, 225, 7, 62, 126, 188, 27, 190, 104, 117, 141, 61, 56, 239, 8, 61, 47, 142, 163, 189, 226, 176, 143, 59, 77, 229, 21, 190, 164, 176, 251, 189, 159, 192, 252, 61, 144, 84, 127, 189, 116, 180, 40, 190, 209, 145, 125, 61, 196, 215, 161, 190, 206, 190, 200, 187, 166, 142, 181, 189, 91, 110, 80, 190, 246, 58, 94, 61, 9, 186, 62, 188, 221, 106, 223, 189, 169, 247, 52, 62, 117, 239, 146, 190, 205, 247, 28, 62, 35, 82, 142, 190, 103, 246, 6, 62, 68, 131, 53, 62, 232, 246, 7, 191, 160, 184, 38, 62, 1, 95, 143, 190, 241, 165, 4, 61, 1, 63, 106, 61, 53, 216, 23, 62, 175, 145, 131, 61, 32, 68, 44, 61, 42, 245, 164, 190, 32, 247, 134, 189, 8, 140, 50, 62, 176, 168, 132, 190, 67, 177, 30, 62, 51, 84, 234, 59, 72, 235, 250, 189, 67, 136, 98, 60, 98, 27, 93, 189, 34, 237, 19, 190, 32, 14, 167, 61, 253, 220, 142, 190, 38, 218, 126, 61, 82, 182, 74, 62, 187, 138, 213, 189, 178, 159, 10, 62, 179, 192, 225, 189, 236, 3, 70, 62, 35, 99, 12, 62, 50, 96, 168, 61, 167, 183, 171, 61, 11, 103, 115, 190, 151, 152, 47, 61, 224, 171, 156, 189, 250, 11, 154, 190, 96, 198, 138, 60, 215, 251, 211, 61, 182, 125, 133, 62, 46, 105, 82, 62, 53, 242, 85, 189, 24, 60, 0, 189, 238, 130, 140, 189, 29, 201, 60, 190, 73, 196, 187, 61, 198, 182, 255, 189, 146, 165, 153, 190, 26, 68, 62, 62, 168, 178, 50, 189, 174, 182, 8, 190, 187, 91, 173, 61, 214, 32, 148, 190, 81, 212, 0, 58, 60, 218, 13, 60, 1, 81, 250, 60, 29, 144, 35, 190, 51, 170, 101, 189, 1, 73, 95, 61, 239, 103, 126, 188, 208, 208, 37, 62, 85, 216, 136, 61, 135, 230, 227, 57, 80, 159, 190, 189, 116, 150, 32, 190, 51, 151, 18, 62, 16, 48, 217, 61, 221, 22, 182, 189, 166, 40, 201, 60, 162, 209, 247, 61, 208, 153, 231, 188, 241, 160, 196, 61, 212, 255, 204, 61, 83, 187, 174, 189, 207, 53, 180, 60, 12, 197, 36, 190, 51, 212, 14, 189, 78, 3, 239, 60, 241, 243, 153, 61, 49, 12, 19, 189, 174, 152, 172, 61, 20, 101, 7, 189, 96, 192, 88, 189, 51, 57, 25, 190, 184, 26, 51, 190, 106, 167, 143, 189, 223, 62, 139, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 223, 112, 95, 188, 59, 117, 171, 188, 221, 146, 15, 62, 212, 199, 166, 61, 178, 122, 221, 61, 41, 134, 8, 61, 34, 113, 32, 190, 213, 242, 59, 190, 142, 13, 179, 189, 154, 126, 14, 61, 111, 112, 204, 61, 241, 1, 64, 190, 169, 200, 164, 188, 255, 201, 125, 61, 111, 253, 162, 61, 51, 138, 160, 189, 252, 153, 23, 189, 67, 244, 40, 188, 104, 179, 0, 190, 66, 167, 31, 190, 75, 195, 8, 190, 166, 12, 176, 59, 178, 253, 18, 62, 206, 240, 14, 190, 42, 238, 138, 61, 219, 139, 149, 189, 22, 105, 15, 190, 186, 30, 33, 61, 155, 22, 180, 61, 21, 130, 225, 61, 226, 39, 190, 61, 24, 42, 133, 189, 207, 126, 46, 189, 254, 148, 64, 62, 180, 121, 74, 190, 188, 241, 154, 189, 164, 42, 22, 189, 39, 138, 218, 189, 250, 222, 26, 190, 214, 198, 49, 61, 16, 172, 138, 61, 62, 37, 231, 61, 20, 122, 11, 62, 174, 31, 139, 190, 194, 193, 64, 187, 84, 5, 19, 62, 202, 253, 221, 61, 131, 189, 45, 190, 167, 4, 198, 61, 44, 165, 145, 189, 29, 15, 80, 61, 96, 162, 56, 190, 214, 21, 138, 188, 28, 153, 143, 61, 132, 181, 131, 189, 133, 177, 199, 188, 81, 242, 5, 62, 64, 244, 72, 61, 153, 50, 76, 62, 181, 203, 10, 190, 0, 109, 69, 61, 75, 34, 188, 61, 121, 92, 72, 61, 116, 148, 226, 61, 223, 27, 90, 189, 147, 205, 247, 188, 156, 46, 161, 189, 168, 39, 162, 190, 116, 47, 5, 60, 174, 37, 32, 189, 69, 254, 3, 189, 108, 236, 147, 60, 171, 81, 208, 189, 22, 99, 129, 189, 156, 199, 51, 62, 156, 24, 48, 61, 246, 178, 43, 190, 2, 183, 219, 61, 156, 199, 141, 58, 129, 43, 21, 62, 115, 94, 245, 61, 116, 121, 164, 61, 237, 167, 140, 61, 251, 161, 41, 62, 122, 2, 126, 61, 135, 30, 77, 188, 231, 194, 145, 189, 158, 242, 246, 188, 91, 86, 227, 187, 243, 151, 54, 62, 148, 252, 225, 189, 189, 225, 244, 60, 69, 33, 45, 62, 253, 93, 67, 190, 113, 143, 22, 61, 111, 245, 107, 189, 82, 229, 40, 62, 112, 56, 21, 62, 126, 251, 65, 189, 252, 99, 244, 189, 112, 189, 49, 61, 233, 27, 211, 61, 97, 50, 144, 61, 174, 174, 104, 189, 251, 196, 190, 188, 194, 215, 225, 61, 158, 67, 19, 190, 220, 92, 90, 188, 58, 145, 204, 189, 93, 66, 50, 189, 144, 44, 40, 62, 241, 195, 44, 61, 237, 142, 21, 62, 25, 249, 10, 190, 30, 222, 48, 59, 139, 218, 148, 188, 201, 50, 177, 61, 107, 114, 160, 189, 205, 23, 204, 61, 168, 84, 199, 189, 185, 230, 171, 61, 169, 6, 89, 189, 112, 214, 3, 61, 76, 24, 116, 189, 9, 187, 68, 61, 123, 223, 17, 189, 62, 148, 226, 189, 253, 117, 213, 189, 243, 186, 24, 190, 93, 219, 166, 189, 174, 239, 195, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 198, 1, 136, 61, 152, 68, 176, 188, 205, 226, 66, 61, 248, 246, 138, 189, 69, 217, 18, 62, 197, 67, 137, 61, 196, 216, 67, 61, 57, 28, 107, 188, 160, 216, 104, 189, 230, 16, 5, 190, 59, 250, 254, 189, 172, 78, 30, 190, 38, 47, 67, 189, 251, 41, 195, 189, 113, 3, 203, 188, 21, 71, 194, 188, 233, 124, 7, 190, 154, 254, 154, 61, 135, 216, 236, 189, 182, 210, 26, 62, 4, 219, 11, 62, 88, 60, 37, 190, 131, 177, 163, 61, 12, 115, 21, 190, 1, 222, 224, 60, 195, 172, 41, 189, 24, 252, 135, 190, 185, 84, 13, 190, 247, 84, 107, 62, 114, 234, 253, 189, 77, 22, 215, 61, 37, 77, 127, 189, 45, 165, 89, 62, 14, 207, 134, 62, 68, 135, 102, 189, 137, 155, 218, 61, 42, 14, 77, 190, 55, 56, 108, 62, 3, 108, 218, 189, 55, 60, 57, 188, 7, 186, 42, 62, 35, 248, 115, 61, 128, 231, 95, 62, 39, 148, 146, 188, 58, 47, 137, 61, 39, 185, 71, 190, 64, 106, 6, 62, 252, 87, 155, 190, 132, 160, 245, 61, 167, 90, 149, 189, 72, 102, 185, 190, 22, 164, 176, 60, 109, 155, 145, 189, 227, 7, 41, 190, 212, 179, 204, 61, 220, 126, 120, 190, 255, 170, 232, 188, 146, 255, 105, 60, 84, 139, 138, 60, 222, 235, 111, 188, 27, 97, 75, 61, 41, 87, 40, 190, 132, 149, 42, 190, 238, 98, 56, 60, 104, 215, 59, 62, 92, 28, 31, 62, 47, 43, 47, 62, 144, 189, 178, 189, 184, 161, 18, 190, 252, 79, 10, 190, 93, 227, 109, 190, 105, 99, 75, 190, 158, 27, 32, 190, 113, 154, 55, 60, 33, 6, 115, 61, 115, 127, 57, 190, 58, 15, 27, 61, 91, 152, 58, 189, 18, 182, 195, 188, 3, 28, 222, 61, 147, 156, 12, 190, 200, 121, 167, 61, 236, 53, 0, 190, 185, 101, 59, 61, 120, 240, 40, 190, 113, 184, 211, 61, 184, 110, 81, 62, 183, 160, 214, 189, 151, 170, 55, 189, 9, 34, 62, 62, 172, 68, 54, 189, 160, 202, 5, 190, 143, 146, 59, 188, 172, 76, 168, 189, 35, 68, 52, 62, 234, 126, 40, 190, 75, 14, 39, 189, 252, 81, 132, 61, 47, 126, 4, 62, 60, 108, 183, 189, 166, 51, 39, 62, 86, 140, 125, 60, 117, 5, 248, 189, 244, 94, 23, 60, 28, 177, 141, 61, 143, 6, 24, 189, 230, 139, 9, 190, 97, 85, 253, 189, 94, 158, 201, 189, 224, 116, 27, 61, 152, 195, 143, 61, 145, 140, 251, 186, 231, 59, 168, 189, 254, 3, 216, 59, 134, 66, 9, 62, 25, 124, 124, 60, 95, 190, 26, 190, 33, 233, 218, 61, 67, 61, 194, 61, 188, 60, 14, 190, 117, 125, 32, 189, 172, 214, 10, 62, 135, 180, 157, 190, 62, 19, 46, 190, 160, 142, 5, 62, 112, 144, 16, 189, 162, 174, 136, 60, 66, 101, 66, 61, 158, 75, 85, 60, 132, 130, 187, 59, 47, 101, 2, 62, 53, 248, 217, 61, 172, 74, 159, 61, 212, 255, 113, 62, 233, 208, 198, 61, 255, 108, 129, 190, 239, 33, 54, 62, 78, 229, 149, 61, 210, 73, 148, 62, 185, 77, 78, 189, 166, 16, 50, 62, 20, 35, 126, 190, 96, 48, 172, 61, 163, 25, 177, 189, 33, 240, 32, 61, 65, 101, 50, 62, 253, 189, 112, 190, 193, 2, 152, 62, 221, 30, 118, 190, 243, 233, 10, 61, 200, 44, 172, 62, 231, 159, 253, 188, 99, 51, 126, 189, 191, 169, 150, 188, 228, 69, 192, 61, 244, 62, 145, 61, 51, 247, 237, 61, 121, 135, 128, 190, 244, 180, 162, 61, 225, 8, 29, 62, 122, 107, 98, 62, 5, 124, 185, 61, 113, 66, 202, 187, 71, 172, 40, 61, 16, 142, 105, 61, 60, 8, 106, 62, 132, 217, 180, 188, 211, 113, 13, 189, 100, 234, 32, 62, 120, 189, 168, 187, 228, 34, 48, 62, 247, 145, 138, 188, 233, 149, 139, 60, 38, 169, 255, 189, 4, 152, 134, 188, 55, 137, 1, 61, 83, 123, 37, 62, 250, 86, 94, 60, 69, 210, 131, 190, 164, 66, 26, 60, 161, 247, 216, 188, 166, 31, 84, 190, 8, 123, 159, 61, 63, 77, 199, 190, 168, 245, 124, 190, 78, 94, 58, 62, 34, 126, 190, 189, 238, 5, 116, 190, 166, 251, 49, 190, 81, 103, 13, 190, 129, 126, 130, 189, 32, 225, 90, 62, 181, 163, 74, 61, 168, 24, 255, 186, 104, 147, 48, 190, 108, 77, 128, 62, 149, 215, 25, 190, 251, 92, 208, 61, 241, 212, 90, 61, 251, 20, 199, 190, 151, 188, 129, 62, 24, 1, 216, 61, 119, 144, 197, 59, 146, 161, 155, 188, 70, 252, 135, 61, 201, 94, 82, 62, 220, 62, 184, 61, 93, 111, 97, 190, 65, 98, 59, 190, 201, 89, 41, 61, 173, 66, 80, 190, 133, 176, 96, 62, 137, 217, 96, 188, 41, 108, 120, 59, 40, 137, 47, 62, 96, 11, 159, 190, 222, 31, 97, 190, 120, 12, 21, 62, 172, 115, 92, 61, 175, 137, 41, 190, 132, 9, 140, 60, 160, 96, 45, 190, 93, 162, 9, 62, 10, 10, 36, 62, 220, 92, 184, 61, 245, 63, 255, 188, 44, 235, 77, 189, 215, 184, 27, 189, 129, 35, 214, 188, 148, 95, 16, 62, 127, 167, 6, 190, 163, 8, 179, 187, 230, 230, 70, 189, 73, 76, 159, 61, 38, 115, 129, 190, 82, 22, 223, 61, 182, 178, 36, 190, 140, 201, 154, 190, 80, 61, 189, 187, 48, 127, 154, 61, 44, 67, 71, 189, 137, 171, 249, 189, 178, 211, 32, 62, 63, 95, 186, 60, 183, 122, 133, 60, 3, 127, 35, 190, 45, 52, 90, 189, 176, 49, 156, 189, 177, 193, 21, 190, 48, 122, 208, 188, 230, 248, 45, 62, 57, 117, 75, 61, 74, 35, 216, 188, 173, 31, 6, 188, 168, 56, 211, 61, 6, 105, 138, 61, 144, 69, 248, 61, 81, 108, 29, 190, 14, 45, 100, 189, 252, 221, 11, 62, 228, 102, 54, 188, 28, 12, 246, 189, 101, 152, 62, 190, 55, 224, 59, 190, 71, 143, 169, 61, 64, 205, 47, 60, 140, 0, 30, 61, 133, 109, 239, 61, 212, 222, 113, 61, 26, 129, 29, 189, 241, 32, 145, 187, 238, 169, 8, 190, 164, 119, 106, 62, 142, 160, 186, 189, 89, 167, 95, 189, 75, 222, 109, 61, 132, 216, 220, 189, 21, 64, 98, 189, 132, 183, 228, 61, 83, 62, 214, 189, 33, 236, 38, 190, 5, 220, 52, 62, 50, 160, 155, 61, 116, 36, 160, 189, 165, 136, 41, 62, 88, 192, 4, 188, 48, 196, 198, 60, 90, 108, 26, 62, 219, 198, 153, 189, 228, 229, 61, 61, 28, 227, 191, 61, 95, 84, 6, 61, 88, 210, 219, 61, 141, 221, 54, 62, 122, 128, 94, 190, 100, 214, 161, 185, 241, 206, 58, 61, 116, 250, 6, 188, 24, 123, 1, 62, 52, 150, 102, 190, 245, 232, 219, 189, 139, 141, 58, 190, 245, 158, 230, 189, 75, 90, 107, 187, 127, 124, 111, 62, 14, 233, 29, 190, 140, 129, 89, 190, 188, 48, 94, 62, 54, 8, 239, 61, 209, 7, 237, 189, 33, 65, 147, 62, 167, 137, 92, 190, 69, 91, 89, 190, 61, 251, 84, 189, 106, 246, 135, 189, 143, 70, 238, 60, 243, 167, 6, 191, 207, 207, 19, 63, 1, 110, 105, 190, 173, 85, 187, 190, 149, 157, 3, 190, 167, 155, 146, 187, 210, 105, 42, 62, 171, 194, 136, 189, 27, 214, 213, 61, 164, 154, 133, 189, 68, 43, 205, 62, 79, 85, 162, 62, 177, 17, 108, 190, 213, 34, 115, 190, 122, 233, 226, 60, 246, 11, 39, 62, 113, 114, 65, 62, 171, 133, 167, 61, 81, 206, 93, 60, 209, 84, 19, 61, 36, 59, 253, 187, 89, 106, 243, 61, 202, 181, 197, 61, 10, 245, 228, 188, 161, 4, 65, 62, 42, 211, 73, 188, 89, 214, 181, 190, 10, 69, 89, 62, 216, 62, 30, 62, 198, 128, 2, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 231, 180, 61, 142, 47, 176, 187, 70, 23, 186, 189, 143, 149, 143, 189, 102, 215, 208, 189, 202, 122, 136, 62, 191, 96, 186, 61, 147, 156, 146, 61, 51, 117, 60, 61, 196, 103, 21, 189, 26, 45, 75, 62, 26, 133, 172, 189, 181, 70, 255, 189, 94, 4, 90, 61, 100, 197, 155, 189, 120, 144, 78, 190, 162, 30, 163, 60, 0, 208, 159, 179, 140, 130, 89, 189, 61, 243, 104, 62, 24, 212, 254, 189, 69, 168, 70, 61, 99, 89, 7, 189, 234, 55, 1, 190, 213, 32, 0, 190, 223, 244, 54, 62, 248, 134, 200, 61, 15, 198, 104, 61, 96, 223, 53, 189, 71, 95, 24, 190, 127, 23, 141, 58, 232, 92, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 60, 126, 189, 171, 250, 71, 190, 226, 179, 46, 189, 244, 9, 120, 62, 219, 220, 165, 61, 33, 37, 139, 62, 234, 121, 17, 190, 37, 134, 150, 190, 176, 73, 27, 62, 40, 217, 83, 188, 21, 163, 172, 189, 111, 184, 70, 190, 67, 192, 16, 62, 202, 184, 238, 190, 101, 43, 88, 190, 245, 203, 211, 186, 32, 117, 221, 188, 55, 68, 36, 189, 71, 2, 12, 62, 232, 209, 40, 190, 130, 13, 20, 62, 119, 146, 40, 62, 63, 213, 198, 190, 40, 241, 117, 62, 64, 182, 182, 188, 29, 125, 43, 190, 140, 206, 73, 190, 19, 243, 95, 190, 246, 83, 43, 62, 167, 188, 231, 61, 4, 81, 143, 190, 64, 89, 165, 62, 40, 11, 67, 190, 105, 169, 138, 61, 202, 190, 110, 61, 6, 211, 61, 61, 90, 1, 103, 190, 199, 135, 238, 189, 12, 98, 161, 189, 149, 97, 32, 62, 16, 38, 31, 190, 218, 176, 128, 60, 98, 36, 53, 190, 68, 106, 121, 61, 214, 218, 22, 189, 35, 104, 250, 59, 200, 188, 46, 62, 61, 246, 214, 61, 189, 31, 39, 62, 191, 24, 12, 62, 140, 109, 102, 61, 170, 154, 119, 190, 19, 102, 27, 62, 98, 123, 50, 61, 245, 78, 42, 62, 52, 66, 195, 61, 31, 170, 5, 190, 183, 172, 217, 189, 233, 142, 189, 189, 200, 3, 118, 189, 179, 15, 197, 61, 178, 233, 156, 61, 51, 63, 108, 189, 42, 5, 100, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 155, 153, 61, 176, 167, 7, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {32, 96, 228, 62, 149, 100, 172, 62, 231, 244, 157, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 217, 177, 190, 99, 190, 93, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}