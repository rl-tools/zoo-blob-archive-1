// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 38, 41, 63, 245, 7, 0, 190, 63, 70, 153, 190, 45, 194, 127, 62, 246, 70, 179, 191, 44, 225, 215, 190, 71, 140, 27, 189, 43, 160, 47, 191, 191, 63, 244, 62, 179, 70, 135, 190, 187, 219, 237, 190, 204, 9, 17, 63, 30, 64, 10, 191, 182, 24, 243, 191, 112, 201, 218, 190, 231, 109, 230, 62, 211, 36, 19, 63, 253, 36, 23, 62, 234, 53, 60, 63, 217, 102, 40, 190, 0, 83, 33, 63, 67, 237, 59, 191, 80, 171, 184, 190, 101, 22, 43, 190, 87, 167, 34, 190, 187, 234, 194, 63, 138, 65, 106, 63, 6, 228, 30, 191, 180, 51, 14, 62, 187, 96, 13, 191, 36, 60, 27, 63, 8, 155, 67, 191, 250, 237, 221, 188, 249, 178, 154, 190, 237, 122, 111, 63, 112, 164, 71, 189, 228, 252, 232, 190, 95, 81, 56, 191, 57, 209, 230, 189, 7, 177, 203, 62, 182, 128, 231, 190, 70, 67, 28, 63, 224, 252, 89, 190, 122, 197, 79, 60, 215, 121, 5, 191, 157, 178, 115, 63, 86, 178, 245, 62, 78, 207, 12, 63, 170, 165, 166, 61, 115, 75, 207, 62, 198, 102, 212, 190, 211, 61, 57, 191, 25, 70, 6, 191, 207, 214, 116, 189, 231, 1, 2, 62, 67, 129, 45, 191, 113, 165, 5, 190, 90, 63, 65, 191, 179, 128, 183, 190, 149, 18, 239, 189, 117, 132, 1, 191, 43, 247, 201, 191, 190, 71, 174, 190, 71, 218, 232, 62, 108, 186, 60, 191, 23, 182, 228, 190, 159, 163, 207, 62, 114, 119, 131, 63, 124, 63, 9, 63, 33, 158, 175, 62, 64, 123, 144, 62, 53, 48, 40, 61, 228, 117, 213, 190, 230, 171, 208, 62, 91, 17, 237, 190, 122, 90, 214, 61, 144, 132, 165, 62, 176, 162, 55, 190, 171, 10, 76, 63, 70, 197, 57, 190, 114, 192, 179, 190, 44, 220, 72, 190, 178, 100, 5, 63, 75, 114, 179, 190, 221, 84, 234, 62, 46, 136, 246, 62, 52, 56, 246, 188, 100, 100, 54, 189, 239, 31, 146, 190, 110, 211, 199, 62, 162, 177, 53, 63, 225, 55, 172, 191, 76, 178, 140, 190, 179, 79, 44, 63, 151, 23, 70, 63, 74, 170, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 80, 105, 191, 18, 121, 251, 61, 71, 8, 146, 190, 146, 205, 148, 60, 120, 67, 151, 190, 181, 77, 123, 191, 144, 81, 141, 190, 22, 192, 5, 191, 143, 7, 145, 61, 72, 169, 211, 62, 157, 10, 44, 63, 0, 31, 67, 63, 83, 98, 26, 63, 9, 15, 101, 62, 170, 2, 159, 189, 49, 110, 86, 190, 71, 193, 30, 63, 40, 26, 76, 63, 133, 158, 216, 62, 18, 186, 77, 63, 195, 2, 48, 61, 14, 4, 21, 62, 90, 47, 243, 62, 133, 82, 65, 191, 70, 131, 33, 190, 4, 101, 131, 62, 86, 205, 125, 190, 30, 133, 41, 62, 132, 181, 222, 62, 66, 168, 208, 188, 48, 40, 207, 188, 128, 55, 52, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 57, 200, 190, 174, 199, 160, 189, 145, 9, 57, 62, 85, 121, 25, 190, 37, 57, 98, 190, 7, 1, 163, 62, 152, 171, 241, 187, 92, 59, 234, 61, 141, 27, 5, 190, 111, 172, 57, 62, 179, 150, 103, 61, 89, 135, 37, 62, 128, 99, 102, 62, 205, 3, 63, 61, 27, 235, 41, 189, 100, 255, 172, 62, 82, 222, 71, 188, 61, 177, 130, 189, 32, 151, 222, 61, 95, 235, 117, 61, 186, 91, 176, 190, 28, 203, 237, 189, 62, 53, 41, 62, 56, 138, 122, 190, 205, 246, 12, 60, 156, 172, 86, 62, 169, 78, 204, 60, 215, 127, 132, 189, 87, 224, 86, 62, 128, 227, 27, 61, 41, 6, 62, 190, 241, 106, 201, 61, 188, 46, 60, 191, 121, 170, 137, 190, 199, 162, 7, 62, 202, 104, 199, 61, 6, 103, 223, 190, 44, 101, 3, 63, 7, 242, 58, 62, 130, 47, 215, 190, 112, 244, 185, 61, 57, 86, 97, 61, 129, 110, 226, 189, 115, 248, 145, 62, 47, 142, 124, 190, 180, 125, 121, 189, 177, 187, 188, 61, 163, 149, 82, 61, 116, 232, 89, 62, 228, 93, 133, 189, 192, 163, 112, 190, 2, 148, 255, 189, 95, 188, 201, 190, 162, 229, 43, 61, 10, 232, 150, 62, 219, 143, 202, 190, 226, 94, 133, 189, 188, 100, 191, 62, 191, 31, 33, 62, 204, 69, 60, 62, 67, 157, 242, 62, 122, 226, 1, 61, 223, 205, 31, 191, 110, 150, 160, 61, 124, 6, 36, 189, 68, 130, 247, 61, 109, 43, 16, 62, 89, 136, 141, 189, 46, 177, 79, 188, 146, 200, 28, 190, 54, 107, 14, 190, 33, 50, 36, 62, 197, 172, 255, 61, 148, 219, 20, 60, 100, 226, 4, 62, 173, 146, 11, 61, 25, 19, 10, 60, 11, 95, 137, 189, 6, 192, 186, 189, 119, 165, 166, 61, 205, 140, 35, 61, 51, 24, 148, 189, 237, 123, 230, 189, 113, 34, 238, 60, 124, 25, 5, 190, 118, 211, 13, 189, 238, 188, 9, 190, 171, 3, 199, 189, 99, 72, 32, 190, 199, 14, 95, 61, 110, 194, 202, 60, 78, 53, 42, 189, 38, 108, 220, 189, 51, 90, 2, 190, 233, 36, 64, 188, 117, 235, 51, 190, 245, 220, 15, 189, 192, 23, 34, 62, 129, 70, 8, 191, 96, 105, 159, 62, 84, 12, 153, 191, 39, 151, 16, 191, 249, 200, 56, 190, 124, 81, 142, 190, 246, 232, 70, 62, 245, 150, 137, 189, 7, 104, 188, 62, 220, 116, 112, 62, 205, 227, 149, 62, 155, 62, 224, 61, 129, 181, 162, 190, 76, 109, 225, 189, 135, 206, 99, 190, 221, 117, 26, 62, 242, 103, 129, 62, 151, 214, 26, 62, 165, 81, 80, 191, 200, 182, 107, 62, 12, 190, 182, 189, 102, 80, 188, 62, 89, 207, 102, 61, 200, 66, 10, 190, 243, 213, 91, 62, 216, 81, 235, 61, 203, 221, 156, 190, 133, 199, 150, 189, 148, 144, 167, 62, 36, 250, 130, 190, 168, 35, 138, 190, 24, 70, 84, 189, 180, 228, 39, 62, 195, 197, 15, 189, 2, 170, 191, 61, 108, 207, 237, 189, 49, 145, 188, 61, 222, 45, 184, 188, 158, 179, 211, 190, 213, 34, 243, 61, 37, 252, 230, 62, 240, 129, 4, 191, 151, 58, 175, 62, 255, 84, 106, 62, 22, 0, 25, 62, 134, 113, 40, 190, 184, 173, 109, 187, 109, 65, 62, 61, 7, 161, 220, 62, 10, 192, 34, 62, 21, 121, 187, 190, 170, 100, 182, 61, 122, 188, 101, 61, 237, 132, 162, 57, 45, 17, 99, 60, 101, 37, 137, 189, 0, 169, 186, 189, 231, 73, 9, 62, 220, 109, 109, 189, 84, 7, 119, 62, 199, 249, 4, 62, 231, 242, 152, 191, 172, 234, 192, 61, 189, 13, 127, 61, 197, 138, 1, 191, 208, 172, 218, 62, 186, 206, 173, 190, 197, 192, 37, 191, 113, 239, 150, 190, 3, 222, 155, 189, 147, 47, 3, 189, 166, 253, 89, 62, 222, 28, 3, 62, 127, 137, 148, 62, 176, 57, 186, 62, 249, 50, 4, 63, 199, 165, 41, 190, 71, 150, 16, 190, 206, 73, 55, 189, 33, 43, 12, 62, 144, 71, 165, 62, 65, 99, 152, 62, 14, 169, 149, 60, 120, 197, 31, 186, 168, 218, 118, 61, 70, 79, 247, 62, 90, 252, 206, 61, 0, 189, 22, 61, 164, 76, 41, 61, 67, 48, 34, 62, 225, 165, 73, 190, 135, 92, 164, 62, 70, 139, 79, 62, 240, 226, 3, 191, 57, 133, 254, 62, 216, 138, 43, 62, 32, 162, 101, 62, 56, 40, 174, 62, 208, 59, 150, 189, 87, 72, 231, 189, 231, 36, 193, 189, 27, 83, 16, 190, 52, 19, 185, 188, 160, 86, 63, 184, 135, 228, 1, 62, 10, 205, 161, 191, 1, 109, 8, 62, 5, 236, 60, 189, 243, 33, 129, 190, 161, 88, 41, 191, 115, 45, 108, 190, 204, 9, 23, 190, 150, 62, 44, 62, 210, 38, 142, 189, 90, 121, 132, 62, 29, 80, 149, 62, 226, 216, 221, 190, 115, 249, 148, 60, 186, 44, 95, 61, 179, 25, 192, 190, 20, 35, 103, 62, 94, 129, 196, 60, 211, 232, 159, 190, 86, 245, 208, 61, 42, 1, 133, 62, 49, 24, 237, 190, 220, 18, 35, 191, 5, 53, 228, 190, 87, 109, 134, 63, 28, 227, 238, 61, 111, 152, 85, 62, 162, 90, 168, 61, 229, 178, 175, 62, 112, 254, 117, 62, 121, 200, 141, 191, 188, 178, 147, 62, 247, 45, 114, 61, 188, 248, 160, 61, 163, 224, 151, 189, 229, 94, 142, 190, 246, 148, 254, 57, 202, 161, 131, 62, 144, 120, 133, 62, 167, 16, 11, 189, 157, 211, 165, 62, 180, 221, 148, 188, 184, 182, 82, 62, 65, 90, 215, 190, 255, 162, 5, 191, 242, 141, 163, 189, 176, 101, 154, 190, 83, 121, 7, 62, 223, 87, 62, 190, 30, 238, 20, 190, 15, 118, 232, 62, 7, 227, 147, 189, 187, 190, 37, 191, 62, 177, 112, 62, 177, 120, 61, 190, 165, 123, 36, 62, 252, 194, 250, 190, 141, 100, 51, 60, 60, 254, 11, 190, 18, 202, 9, 191, 224, 32, 129, 189, 139, 40, 186, 189, 166, 159, 101, 62, 37, 78, 99, 62, 17, 197, 148, 61, 64, 174, 96, 62, 76, 37, 165, 62, 112, 217, 82, 62, 139, 144, 58, 190, 189, 24, 43, 190, 192, 127, 39, 62, 189, 144, 217, 189, 85, 103, 33, 62, 0, 60, 21, 62, 245, 26, 128, 190, 163, 6, 3, 62, 143, 220, 236, 60, 96, 80, 134, 62, 185, 90, 128, 61, 197, 97, 193, 189, 21, 183, 16, 62, 250, 176, 156, 189, 206, 64, 202, 189, 36, 52, 60, 61, 229, 185, 75, 62, 110, 115, 157, 190, 198, 148, 240, 61, 86, 213, 105, 58, 195, 141, 21, 190, 64, 213, 169, 61, 110, 46, 44, 190, 210, 172, 50, 62, 204, 104, 237, 189, 54, 138, 18, 62, 21, 7, 59, 61, 190, 29, 52, 190, 89, 228, 73, 60, 30, 75, 24, 190, 153, 64, 19, 190, 250, 118, 177, 188, 181, 67, 124, 61, 17, 12, 205, 189, 59, 191, 57, 190, 197, 73, 21, 61, 232, 34, 30, 190, 197, 51, 97, 189, 21, 218, 25, 62, 10, 48, 93, 60, 179, 65, 33, 190, 55, 232, 247, 61, 245, 70, 204, 61, 99, 146, 91, 189, 200, 22, 78, 61, 246, 239, 228, 61, 78, 82, 32, 190, 116, 90, 126, 187, 201, 185, 15, 62, 170, 153, 200, 61, 11, 30, 168, 191, 58, 141, 151, 190, 197, 159, 39, 62, 241, 38, 32, 189, 16, 121, 191, 190, 17, 64, 5, 63, 133, 11, 164, 61, 86, 38, 197, 189, 218, 20, 229, 61, 70, 89, 147, 61, 42, 191, 151, 62, 245, 220, 7, 61, 110, 165, 153, 189, 222, 45, 37, 190, 91, 217, 168, 61, 81, 138, 139, 62, 32, 135, 150, 62, 76, 52, 179, 190, 161, 142, 153, 61, 45, 54, 185, 190, 18, 52, 154, 191, 166, 50, 5, 188, 225, 191, 79, 62, 176, 189, 237, 190, 249, 123, 26, 190, 2, 226, 136, 62, 226, 11, 153, 60, 163, 206, 54, 62, 155, 123, 237, 62, 212, 152, 106, 190, 201, 2, 50, 190, 13, 62, 203, 61, 17, 40, 131, 190, 193, 181, 129, 191, 110, 226, 43, 63, 116, 92, 247, 189, 141, 58, 39, 62, 62, 39, 220, 61, 71, 208, 234, 60, 32, 10, 102, 62, 144, 74, 214, 190, 64, 172, 251, 188, 125, 228, 55, 191, 107, 100, 154, 61, 64, 69, 87, 62, 39, 243, 73, 191, 176, 186, 195, 190, 15, 223, 149, 59, 5, 175, 51, 190, 49, 153, 157, 62, 5, 114, 217, 189, 178, 44, 91, 62, 172, 63, 24, 61, 92, 85, 6, 191, 125, 189, 113, 191, 157, 21, 33, 190, 21, 87, 31, 191, 152, 236, 39, 190, 128, 232, 161, 190, 74, 177, 80, 191, 132, 73, 239, 189, 147, 93, 160, 190, 245, 23, 191, 190, 191, 132, 117, 61, 1, 60, 28, 62, 46, 140, 112, 189, 165, 22, 22, 62, 81, 92, 55, 190, 63, 161, 195, 189, 163, 175, 163, 61, 27, 37, 208, 60, 85, 117, 10, 190, 30, 140, 52, 61, 164, 4, 22, 62, 4, 123, 25, 190, 217, 31, 115, 190, 143, 153, 31, 191, 201, 66, 193, 189, 18, 60, 233, 59, 72, 74, 24, 61, 102, 201, 119, 190, 173, 21, 254, 190, 238, 168, 60, 190, 107, 27, 88, 191, 84, 225, 7, 62, 126, 188, 27, 190, 7, 177, 72, 61, 39, 178, 14, 63, 47, 142, 163, 189, 227, 79, 153, 189, 77, 229, 21, 190, 185, 100, 248, 189, 184, 52, 157, 189, 14, 11, 3, 190, 14, 226, 40, 190, 124, 176, 209, 61, 142, 172, 16, 191, 88, 79, 208, 189, 126, 70, 253, 61, 109, 146, 27, 61, 7, 237, 249, 61, 15, 42, 171, 189, 71, 204, 153, 189, 64, 2, 106, 62, 156, 110, 170, 191, 36, 73, 61, 62, 150, 207, 213, 190, 165, 18, 15, 189, 220, 168, 117, 62, 218, 136, 112, 191, 17, 80, 60, 62, 142, 214, 194, 190, 75, 219, 239, 60, 164, 136, 24, 62, 227, 177, 134, 61, 169, 19, 22, 62, 219, 218, 212, 61, 150, 91, 190, 190, 61, 175, 179, 191, 8, 140, 50, 62, 131, 41, 148, 190, 19, 255, 0, 62, 126, 69, 65, 189, 131, 245, 44, 190, 224, 155, 157, 189, 53, 150, 247, 60, 152, 29, 137, 190, 28, 25, 117, 62, 33, 227, 27, 191, 47, 33, 67, 61, 235, 140, 46, 63, 145, 19, 207, 61, 107, 144, 125, 62, 148, 191, 32, 190, 56, 61, 128, 62, 24, 83, 25, 62, 190, 20, 233, 190, 233, 97, 238, 61, 127, 225, 106, 189, 120, 92, 44, 190, 142, 112, 123, 61, 139, 190, 154, 190, 46, 225, 229, 60, 91, 132, 248, 189, 13, 112, 148, 62, 160, 170, 172, 62, 21, 104, 208, 61, 185, 228, 171, 61, 115, 195, 5, 62, 174, 27, 54, 190, 150, 131, 10, 191, 99, 121, 242, 189, 209, 55, 202, 190, 152, 30, 25, 62, 229, 48, 150, 189, 217, 83, 96, 190, 61, 86, 105, 61, 192, 191, 246, 189, 148, 27, 158, 61, 203, 81, 192, 60, 1, 81, 250, 60, 29, 144, 35, 190, 51, 170, 101, 189, 1, 73, 95, 61, 239, 103, 126, 188, 208, 208, 37, 62, 85, 216, 136, 61, 135, 230, 227, 57, 80, 159, 190, 189, 116, 150, 32, 190, 51, 151, 18, 62, 16, 48, 217, 61, 221, 22, 182, 189, 166, 40, 201, 60, 162, 209, 247, 61, 208, 153, 231, 188, 241, 160, 196, 61, 212, 255, 204, 61, 83, 187, 174, 189, 207, 53, 180, 60, 12, 197, 36, 190, 51, 212, 14, 189, 78, 3, 239, 60, 241, 243, 153, 61, 49, 12, 19, 189, 174, 152, 172, 61, 20, 101, 7, 189, 96, 192, 88, 189, 51, 57, 25, 190, 184, 26, 51, 190, 106, 167, 143, 189, 223, 62, 139, 189, 83, 175, 28, 190, 145, 142, 133, 61, 193, 143, 204, 60, 209, 233, 146, 60, 12, 124, 44, 190, 225, 224, 208, 189, 220, 124, 18, 190, 162, 65, 28, 190, 120, 250, 219, 60, 150, 82, 48, 190, 179, 102, 39, 190, 114, 10, 218, 189, 11, 136, 225, 188, 3, 176, 190, 61, 180, 230, 110, 61, 159, 53, 2, 190, 163, 216, 186, 61, 163, 167, 51, 58, 80, 105, 24, 190, 3, 116, 26, 190, 159, 52, 154, 189, 213, 240, 1, 190, 131, 18, 194, 189, 51, 22, 195, 61, 202, 54, 200, 61, 111, 83, 209, 61, 98, 22, 151, 189, 83, 122, 207, 59, 78, 102, 16, 187, 205, 153, 186, 61, 209, 199, 220, 61, 69, 218, 237, 189, 223, 112, 95, 188, 15, 46, 229, 188, 106, 61, 238, 61, 4, 193, 99, 61, 178, 122, 221, 61, 168, 157, 8, 61, 209, 148, 64, 190, 74, 216, 62, 190, 55, 77, 1, 190, 94, 128, 142, 60, 233, 125, 157, 61, 3, 61, 86, 190, 176, 129, 62, 189, 105, 223, 241, 60, 127, 76, 122, 61, 153, 182, 221, 189, 75, 81, 93, 189, 234, 23, 136, 188, 121, 170, 29, 190, 158, 105, 49, 190, 51, 89, 11, 190, 163, 159, 0, 188, 222, 57, 222, 61, 206, 240, 14, 190, 124, 55, 103, 61, 20, 162, 182, 189, 249, 82, 22, 190, 95, 69, 203, 60, 197, 145, 127, 61, 129, 135, 152, 61, 70, 21, 173, 61, 24, 42, 133, 189, 94, 32, 21, 62, 51, 119, 108, 62, 9, 59, 92, 62, 72, 179, 142, 189, 65, 139, 95, 189, 70, 5, 20, 191, 204, 252, 29, 189, 0, 82, 140, 61, 23, 75, 211, 187, 96, 190, 48, 62, 242, 106, 108, 62, 215, 170, 55, 190, 76, 51, 211, 61, 10, 202, 154, 62, 244, 177, 36, 62, 57, 146, 20, 190, 176, 165, 16, 62, 188, 158, 36, 189, 27, 121, 31, 62, 24, 88, 227, 189, 76, 57, 143, 189, 160, 106, 160, 61, 160, 165, 14, 187, 20, 101, 232, 61, 21, 73, 246, 61, 160, 125, 231, 61, 151, 141, 47, 62, 175, 80, 11, 190, 101, 55, 34, 62, 177, 143, 118, 62, 24, 11, 99, 62, 232, 19, 147, 61, 216, 28, 40, 191, 143, 223, 73, 190, 214, 80, 147, 61, 73, 35, 59, 191, 107, 145, 66, 62, 150, 8, 131, 189, 189, 122, 109, 62, 117, 108, 91, 61, 20, 12, 202, 190, 41, 63, 162, 189, 39, 41, 86, 62, 137, 74, 222, 60, 163, 155, 95, 190, 208, 113, 91, 61, 158, 160, 126, 188, 161, 182, 237, 62, 200, 59, 255, 61, 49, 16, 201, 61, 215, 210, 30, 62, 160, 149, 23, 62, 15, 123, 69, 62, 231, 103, 180, 189, 251, 134, 28, 188, 214, 15, 229, 61, 85, 20, 128, 189, 145, 42, 253, 61, 253, 190, 22, 190, 195, 172, 13, 189, 157, 63, 98, 62, 68, 119, 224, 190, 102, 36, 131, 190, 2, 166, 175, 190, 82, 163, 236, 62, 39, 138, 25, 62, 211, 61, 34, 63, 22, 103, 82, 190, 134, 15, 171, 61, 160, 121, 235, 61, 140, 65, 46, 190, 99, 56, 6, 189, 2, 73, 149, 190, 104, 25, 43, 62, 178, 122, 73, 190, 25, 158, 71, 188, 168, 13, 119, 189, 254, 117, 92, 190, 77, 119, 101, 62, 208, 70, 192, 189, 154, 177, 64, 62, 61, 103, 233, 189, 213, 140, 71, 61, 139, 29, 191, 60, 222, 115, 27, 62, 150, 90, 252, 189, 148, 148, 186, 61, 18, 85, 203, 189, 159, 237, 187, 61, 241, 17, 132, 60, 31, 169, 27, 60, 20, 121, 84, 189, 117, 99, 41, 62, 86, 140, 35, 190, 76, 36, 9, 190, 57, 220, 50, 190, 179, 219, 24, 190, 160, 65, 220, 189, 165, 100, 197, 187, 212, 188, 180, 189, 207, 146, 152, 189, 78, 77, 44, 190, 108, 47, 80, 61, 152, 68, 176, 188, 205, 226, 66, 61, 227, 81, 153, 189, 87, 158, 191, 61, 184, 224, 88, 61, 1, 89, 36, 61, 209, 18, 36, 189, 79, 48, 119, 189, 77, 67, 29, 190, 149, 222, 26, 190, 0, 61, 32, 190, 213, 206, 162, 189, 101, 188, 208, 189, 45, 146, 232, 188, 121, 54, 100, 189, 195, 49, 39, 190, 154, 254, 154, 61, 135, 216, 236, 189, 13, 73, 17, 62, 71, 90, 227, 61, 200, 90, 39, 190, 162, 66, 77, 61, 99, 162, 22, 190, 101, 90, 244, 187, 195, 172, 41, 189, 216, 171, 213, 190, 4, 145, 92, 190, 43, 149, 206, 62, 176, 125, 80, 190, 223, 2, 173, 62, 5, 165, 190, 62, 226, 86, 175, 62, 44, 99, 189, 62, 228, 180, 100, 190, 16, 98, 112, 62, 3, 58, 198, 189, 138, 144, 87, 189, 244, 73, 129, 189, 37, 205, 181, 189, 182, 96, 119, 62, 240, 40, 48, 62, 48, 119, 171, 62, 105, 55, 239, 60, 201, 241, 103, 62, 92, 41, 49, 190, 228, 105, 227, 62, 154, 68, 155, 190, 159, 75, 196, 188, 254, 179, 31, 191, 45, 151, 212, 190, 95, 13, 12, 61, 131, 106, 29, 189, 152, 137, 56, 190, 238, 221, 48, 62, 154, 244, 159, 190, 42, 70, 60, 190, 248, 55, 193, 61, 230, 229, 242, 190, 94, 27, 95, 191, 230, 96, 3, 61, 207, 102, 64, 190, 132, 149, 42, 190, 34, 221, 22, 191, 95, 227, 172, 62, 53, 6, 15, 62, 214, 127, 170, 62, 96, 39, 144, 62, 58, 194, 16, 191, 107, 107, 92, 62, 62, 50, 172, 191, 4, 244, 237, 189, 85, 11, 41, 60, 137, 182, 117, 62, 130, 227, 103, 62, 189, 212, 104, 191, 188, 108, 35, 191, 29, 21, 66, 191, 234, 33, 203, 188, 161, 222, 123, 191, 3, 21, 223, 61, 134, 220, 43, 63, 251, 131, 226, 61, 8, 128, 136, 62, 115, 73, 117, 191, 188, 19, 1, 63, 188, 115, 1, 63, 179, 166, 211, 189, 69, 196, 199, 191, 80, 122, 1, 63, 181, 110, 61, 189, 111, 103, 14, 190, 85, 107, 71, 188, 250, 48, 172, 189, 132, 78, 41, 62, 234, 126, 40, 190, 146, 74, 62, 189, 66, 234, 100, 61, 248, 47, 235, 61, 7, 99, 220, 189, 36, 208, 30, 62, 211, 169, 173, 59, 238, 214, 252, 189, 240, 62, 247, 58, 81, 164, 101, 61, 115, 117, 59, 189, 19, 173, 24, 190, 247, 246, 3, 190, 219, 182, 209, 189, 109, 124, 2, 61, 6, 38, 129, 61, 192, 110, 38, 188, 128, 222, 195, 189, 254, 3, 216, 59, 163, 206, 250, 61, 56, 125, 254, 59, 184, 135, 35, 190, 216, 196, 197, 61, 236, 47, 176, 61, 43, 127, 16, 190, 251, 200, 45, 189, 249, 86, 7, 62, 106, 202, 25, 191, 218, 128, 148, 190, 180, 202, 207, 62, 252, 141, 174, 189, 171, 182, 56, 62, 20, 137, 253, 62, 75, 204, 95, 62, 4, 107, 105, 61, 110, 61, 68, 189, 65, 217, 204, 61, 36, 192, 114, 61, 228, 81, 244, 189, 8, 174, 181, 60, 167, 120, 130, 190, 199, 8, 38, 62, 34, 53, 110, 62, 28, 31, 142, 62, 118, 228, 137, 189, 147, 62, 8, 62, 40, 110, 164, 190, 95, 12, 91, 62, 123, 1, 37, 190, 69, 15, 185, 189, 152, 24, 5, 62, 159, 111, 141, 190, 141, 62, 79, 62, 181, 83, 151, 190, 59, 118, 49, 59, 98, 135, 140, 62, 30, 110, 101, 188, 49, 33, 160, 190, 248, 128, 112, 58, 190, 26, 6, 62, 58, 191, 169, 189, 175, 66, 242, 62, 116, 36, 98, 190, 218, 17, 24, 62, 200, 94, 77, 63, 140, 189, 246, 62, 1, 73, 170, 61, 84, 160, 177, 189, 2, 64, 234, 188, 20, 107, 36, 62, 127, 246, 180, 190, 166, 142, 195, 190, 199, 108, 29, 59, 188, 212, 29, 62, 121, 72, 86, 62, 150, 213, 64, 62, 21, 171, 232, 190, 164, 203, 101, 61, 97, 229, 40, 191, 253, 75, 68, 190, 209, 98, 146, 61, 207, 190, 132, 61, 18, 144, 2, 191, 252, 78, 180, 190, 92, 134, 186, 189, 21, 8, 13, 62, 131, 204, 153, 190, 103, 146, 246, 60, 116, 70, 174, 190, 122, 198, 186, 190, 197, 214, 160, 62, 101, 194, 213, 190, 240, 31, 159, 190, 177, 226, 153, 62, 111, 8, 229, 188, 101, 194, 193, 61, 167, 142, 93, 62, 109, 171, 127, 61, 211, 157, 138, 61, 151, 199, 163, 191, 138, 249, 139, 62, 132, 192, 12, 190, 221, 38, 20, 189, 214, 40, 24, 62, 220, 63, 60, 191, 94, 79, 137, 62, 186, 251, 2, 62, 236, 15, 76, 60, 67, 104, 139, 61, 88, 25, 123, 61, 205, 61, 147, 62, 96, 220, 114, 62, 245, 162, 110, 190, 191, 242, 165, 191, 201, 89, 41, 61, 7, 243, 130, 190, 144, 243, 57, 62, 0, 180, 99, 189, 90, 102, 115, 189, 65, 125, 241, 61, 66, 139, 157, 190, 250, 62, 172, 190, 28, 159, 69, 62, 172, 115, 92, 61, 175, 137, 41, 190, 171, 79, 133, 61, 196, 68, 67, 190, 93, 162, 9, 62, 5, 55, 37, 62, 247, 191, 193, 61, 245, 63, 255, 188, 244, 150, 120, 189, 210, 200, 52, 189, 110, 237, 232, 188, 204, 20, 245, 61, 150, 53, 85, 190, 155, 87, 171, 187, 21, 242, 70, 189, 195, 179, 164, 61, 37, 27, 151, 190, 181, 148, 6, 60, 175, 184, 79, 190, 86, 88, 199, 190, 80, 61, 189, 187, 48, 127, 154, 61, 140, 29, 93, 189, 129, 49, 249, 189, 178, 211, 32, 62, 71, 157, 215, 58, 183, 122, 133, 60, 3, 127, 35, 190, 99, 24, 110, 189, 23, 165, 195, 189, 177, 193, 21, 190, 140, 246, 164, 188, 210, 220, 116, 62, 94, 142, 147, 61, 232, 175, 98, 190, 47, 54, 133, 190, 59, 225, 133, 62, 23, 232, 177, 190, 229, 62, 24, 62, 226, 193, 182, 188, 220, 23, 22, 189, 22, 136, 150, 62, 199, 215, 143, 190, 239, 102, 142, 61, 7, 245, 218, 189, 240, 38, 137, 190, 140, 131, 97, 62, 44, 224, 169, 61, 92, 56, 179, 61, 50, 253, 96, 62, 47, 237, 87, 61, 239, 100, 120, 61, 88, 65, 62, 62, 72, 183, 110, 190, 101, 42, 136, 62, 125, 251, 202, 62, 51, 139, 35, 188, 25, 77, 217, 61, 136, 228, 130, 190, 12, 163, 172, 188, 129, 190, 3, 62, 200, 187, 131, 190, 60, 78, 91, 190, 191, 219, 0, 63, 41, 75, 134, 191, 65, 51, 253, 190, 59, 158, 165, 62, 239, 173, 146, 188, 96, 1, 213, 190, 132, 124, 73, 63, 136, 169, 240, 61, 54, 5, 9, 190, 166, 74, 197, 61, 235, 149, 132, 61, 184, 26, 191, 62, 98, 172, 71, 189, 86, 234, 72, 191, 165, 207, 197, 61, 231, 142, 135, 61, 140, 199, 77, 62, 141, 80, 164, 62, 201, 70, 117, 191, 90, 220, 129, 61, 180, 53, 115, 191, 104, 190, 133, 191, 99, 1, 156, 189, 48, 227, 143, 62, 220, 133, 56, 191, 14, 142, 138, 59, 2, 102, 218, 62, 232, 221, 26, 62, 4, 11, 35, 61, 59, 98, 1, 63, 234, 162, 75, 190, 144, 6, 93, 191, 15, 34, 144, 61, 230, 130, 202, 189, 124, 173, 238, 61, 150, 59, 64, 191, 210, 112, 15, 63, 51, 36, 213, 191, 73, 173, 13, 191, 42, 193, 148, 190, 227, 87, 139, 190, 45, 41, 196, 61, 7, 8, 129, 189, 6, 205, 155, 62, 212, 58, 69, 190, 64, 126, 16, 63, 133, 98, 133, 62, 118, 184, 6, 191, 73, 218, 222, 190, 111, 214, 48, 61, 72, 98, 96, 62, 93, 15, 101, 62, 250, 10, 35, 62, 216, 181, 152, 191, 123, 176, 77, 62, 203, 8, 36, 189, 252, 158, 220, 189, 243, 85, 23, 62, 192, 99, 139, 61, 95, 72, 146, 62, 220, 111, 78, 62, 230, 17, 0, 191, 179, 112, 24, 62, 10, 24, 6, 63, 113, 243, 132, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 82, 17, 62, 10, 195, 241, 61, 70, 23, 186, 189, 175, 38, 247, 188, 86, 236, 45, 61, 125, 3, 205, 62, 188, 203, 145, 61, 48, 111, 39, 62, 69, 184, 50, 62, 196, 103, 21, 189, 240, 2, 119, 62, 158, 135, 173, 189, 155, 170, 134, 190, 52, 237, 9, 61, 40, 105, 11, 188, 120, 144, 78, 190, 162, 30, 163, 60, 36, 2, 226, 188, 170, 194, 86, 61, 214, 193, 136, 62, 83, 93, 204, 189, 79, 42, 250, 59, 244, 98, 30, 189, 107, 87, 108, 189, 79, 104, 10, 190, 65, 214, 82, 61, 198, 237, 6, 190, 244, 153, 171, 61, 197, 13, 157, 189, 28, 153, 207, 189, 163, 3, 179, 189, 65, 106, 219, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 17, 60, 61, 202, 163, 140, 190, 226, 179, 46, 189, 114, 239, 214, 62, 136, 15, 161, 62, 18, 33, 137, 62, 172, 52, 21, 191, 107, 191, 106, 191, 180, 71, 6, 62, 40, 217, 83, 188, 169, 62, 5, 190, 245, 173, 126, 191, 239, 197, 164, 62, 244, 131, 123, 191, 151, 162, 11, 191, 245, 203, 211, 186, 32, 117, 221, 188, 50, 145, 237, 188, 168, 103, 20, 62, 162, 245, 8, 191, 63, 181, 79, 62, 134, 51, 40, 62, 1, 218, 26, 191, 35, 10, 166, 63, 192, 70, 181, 188, 142, 71, 255, 189, 198, 22, 16, 191, 178, 71, 28, 191, 114, 74, 61, 62, 176, 14, 179, 62, 159, 50, 130, 191, 197, 145, 120, 63, 41, 214, 127, 190, 133, 195, 211, 188, 202, 190, 110, 61, 15, 23, 152, 189, 125, 121, 220, 190, 117, 29, 148, 189, 0, 212, 239, 61, 165, 116, 144, 61, 230, 136, 151, 189, 218, 176, 128, 60, 137, 190, 194, 190, 40, 254, 202, 61, 185, 125, 8, 188, 32, 86, 171, 189, 78, 16, 55, 62, 61, 246, 214, 61, 189, 31, 39, 62, 42, 21, 0, 62, 243, 79, 230, 58, 176, 150, 47, 190, 111, 180, 11, 62, 76, 247, 50, 61, 84, 10, 181, 62, 81, 55, 81, 62, 28, 100, 5, 190, 197, 112, 83, 61, 13, 47, 5, 189, 183, 88, 18, 190, 25, 40, 255, 61, 63, 62, 116, 189, 32, 180, 240, 188, 151, 171, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 204, 88, 62, 13, 170, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 14, 79, 190, 14, 188, 151, 63, 79, 12, 47, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 153, 7, 64, 167, 15, 109, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0002/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}