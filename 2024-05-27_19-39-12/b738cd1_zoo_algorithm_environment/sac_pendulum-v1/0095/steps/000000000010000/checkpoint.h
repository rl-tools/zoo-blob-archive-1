// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 145, 143, 62, 37, 146, 175, 189, 211, 148, 50, 191, 152, 51, 86, 191, 104, 19, 142, 190, 69, 173, 31, 191, 4, 222, 43, 63, 42, 8, 145, 63, 113, 209, 142, 62, 153, 216, 158, 189, 208, 48, 18, 190, 155, 118, 26, 63, 203, 105, 189, 60, 200, 14, 159, 62, 122, 199, 195, 190, 95, 183, 47, 63, 226, 218, 103, 191, 224, 6, 202, 190, 237, 220, 234, 62, 232, 2, 57, 63, 3, 50, 98, 62, 115, 58, 3, 190, 105, 27, 218, 190, 10, 52, 201, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 77, 69, 41, 63, 34, 93, 109, 191, 173, 144, 221, 190, 74, 184, 219, 189, 160, 89, 134, 191, 192, 50, 129, 189, 199, 147, 84, 63, 110, 209, 129, 63, 142, 123, 70, 62, 150, 120, 53, 63, 41, 89, 28, 63, 191, 76, 153, 62, 12, 228, 137, 62, 181, 236, 140, 63, 150, 33, 89, 62, 187, 39, 59, 190, 48, 175, 162, 63, 59, 171, 148, 62, 198, 240, 169, 189, 116, 103, 216, 61, 132, 215, 97, 61, 47, 61, 185, 60, 178, 122, 131, 63, 165, 56, 165, 62, 65, 47, 77, 190, 0, 128, 78, 191, 141, 104, 246, 62, 127, 48, 219, 62, 125, 194, 109, 63, 44, 181, 40, 62, 153, 207, 66, 62, 231, 247, 184, 190, 215, 75, 4, 63, 187, 108, 181, 190, 215, 165, 127, 191, 116, 247, 35, 191, 234, 129, 96, 190, 7, 84, 219, 62, 38, 101, 216, 61, 118, 4, 57, 190, 218, 177, 37, 191, 179, 232, 38, 189, 43, 139, 213, 190, 200, 138, 68, 62, 74, 19, 168, 190, 52, 126, 210, 62, 205, 77, 133, 63, 55, 155, 222, 62, 28, 218, 21, 62, 135, 130, 103, 62, 138, 49, 28, 191, 21, 49, 97, 63, 78, 248, 148, 191, 42, 136, 154, 190, 190, 136, 98, 63, 54, 162, 115, 63, 67, 146, 153, 62, 19, 245, 87, 190, 0, 49, 184, 63, 209, 17, 162, 62, 73, 88, 212, 189, 59, 166, 1, 62, 133, 149, 169, 190, 7, 228, 101, 62, 175, 201, 95, 63, 108, 209, 213, 62, 77, 74, 130, 190, 251, 122, 214, 191, 23, 155, 194, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 214, 75, 191, 193, 46, 222, 190, 111, 132, 125, 190, 255, 125, 130, 188, 190, 86, 16, 62, 107, 72, 141, 190, 233, 161, 186, 190, 20, 48, 27, 63, 166, 7, 180, 190, 106, 72, 51, 61, 249, 126, 144, 62, 160, 123, 86, 62, 250, 21, 29, 191, 59, 188, 19, 62, 229, 150, 16, 190, 163, 41, 39, 63, 220, 24, 15, 61, 131, 11, 22, 63, 227, 2, 224, 61, 129, 193, 199, 190, 54, 98, 146, 189, 194, 243, 189, 190, 114, 109, 181, 62, 68, 153, 224, 62, 85, 121, 147, 189, 182, 100, 1, 62, 202, 35, 193, 62, 178, 113, 233, 190, 6, 254, 43, 190, 119, 73, 47, 190, 162, 65, 154, 62, 223, 78, 109, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 126, 223, 56, 61, 122, 187, 55, 191, 185, 100, 197, 190, 180, 24, 225, 61, 191, 41, 165, 190, 144, 11, 33, 63, 213, 24, 152, 190, 188, 114, 109, 188, 29, 69, 8, 61, 62, 192, 254, 61, 32, 66, 134, 62, 213, 94, 34, 189, 128, 63, 145, 190, 61, 129, 104, 190, 169, 132, 30, 190, 112, 70, 111, 62, 15, 38, 146, 190, 134, 26, 230, 61, 205, 92, 128, 189, 236, 170, 47, 189, 30, 178, 229, 190, 220, 92, 14, 190, 139, 46, 45, 62, 112, 86, 17, 190, 55, 39, 169, 190, 240, 88, 141, 62, 183, 130, 155, 62, 120, 124, 17, 191, 198, 38, 170, 190, 147, 126, 220, 190, 105, 0, 24, 61, 89, 193, 5, 190, 77, 233, 140, 61, 70, 104, 164, 189, 22, 34, 46, 62, 99, 165, 65, 188, 243, 66, 252, 189, 156, 1, 136, 187, 54, 195, 99, 188, 152, 58, 106, 61, 115, 83, 51, 61, 76, 150, 111, 62, 183, 122, 201, 62, 126, 161, 253, 61, 16, 255, 122, 61, 232, 23, 128, 62, 212, 53, 52, 62, 110, 246, 148, 61, 81, 13, 195, 60, 220, 115, 25, 57, 224, 27, 185, 189, 156, 217, 176, 60, 207, 49, 42, 62, 63, 233, 57, 189, 106, 48, 173, 62, 209, 25, 193, 190, 246, 224, 108, 62, 50, 201, 8, 190, 245, 196, 236, 61, 136, 152, 34, 62, 23, 186, 240, 189, 173, 32, 52, 190, 92, 241, 161, 62, 78, 176, 175, 62, 196, 145, 20, 61, 115, 185, 34, 62, 13, 0, 16, 191, 196, 52, 130, 59, 204, 178, 117, 190, 254, 168, 123, 62, 206, 252, 61, 191, 233, 8, 54, 62, 130, 89, 138, 61, 38, 50, 85, 62, 161, 113, 204, 61, 108, 245, 254, 188, 76, 145, 160, 190, 102, 191, 134, 190, 63, 93, 227, 189, 254, 48, 131, 190, 197, 221, 199, 190, 20, 33, 161, 62, 237, 81, 18, 190, 209, 95, 31, 62, 2, 254, 184, 188, 158, 55, 77, 190, 5, 137, 184, 189, 88, 231, 78, 190, 238, 240, 145, 190, 156, 161, 41, 62, 146, 100, 148, 62, 239, 103, 39, 191, 33, 28, 136, 190, 104, 57, 116, 190, 235, 154, 19, 61, 26, 17, 156, 189, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 57, 22, 119, 60, 92, 70, 141, 62, 104, 255, 222, 188, 46, 179, 202, 61, 95, 10, 215, 62, 3, 189, 142, 188, 1, 166, 165, 62, 61, 89, 41, 60, 160, 167, 163, 189, 64, 130, 218, 60, 123, 149, 87, 191, 169, 141, 176, 189, 33, 15, 129, 62, 235, 181, 55, 189, 62, 191, 162, 189, 137, 21, 49, 188, 244, 140, 211, 189, 51, 100, 54, 189, 67, 237, 195, 189, 165, 104, 116, 189, 59, 173, 36, 62, 166, 21, 20, 62, 116, 249, 59, 190, 114, 94, 99, 62, 97, 68, 227, 61, 193, 119, 255, 60, 230, 65, 182, 190, 187, 208, 239, 61, 165, 138, 181, 62, 255, 84, 93, 62, 107, 129, 72, 62, 253, 151, 151, 189, 159, 215, 82, 190, 2, 33, 157, 188, 145, 182, 127, 190, 161, 133, 141, 61, 118, 224, 41, 189, 105, 70, 227, 61, 49, 60, 3, 190, 177, 92, 32, 62, 33, 51, 194, 189, 26, 19, 59, 62, 247, 7, 133, 190, 130, 10, 83, 60, 146, 167, 170, 190, 70, 189, 98, 189, 192, 4, 25, 188, 24, 126, 159, 60, 24, 36, 115, 190, 171, 5, 110, 190, 113, 181, 151, 59, 144, 165, 78, 190, 251, 229, 145, 190, 61, 43, 88, 61, 198, 174, 100, 188, 119, 9, 72, 62, 6, 108, 70, 190, 138, 186, 26, 62, 119, 62, 159, 61, 25, 159, 39, 190, 206, 245, 117, 190, 82, 72, 49, 191, 240, 147, 91, 190, 103, 242, 110, 191, 102, 107, 12, 190, 96, 220, 215, 190, 164, 30, 4, 191, 218, 150, 15, 62, 193, 110, 98, 191, 97, 27, 141, 61, 67, 20, 161, 190, 80, 132, 202, 189, 119, 244, 134, 61, 197, 105, 91, 189, 240, 181, 88, 62, 255, 110, 13, 189, 175, 132, 200, 190, 101, 44, 126, 190, 158, 137, 143, 188, 220, 58, 48, 62, 247, 30, 91, 61, 19, 229, 117, 62, 121, 119, 31, 190, 11, 29, 59, 190, 167, 13, 201, 190, 14, 86, 134, 62, 149, 61, 167, 62, 23, 190, 135, 190, 25, 116, 110, 190, 118, 240, 38, 59, 153, 63, 185, 62, 58, 17, 15, 191, 186, 7, 134, 187, 13, 78, 47, 191, 232, 53, 254, 189, 235, 219, 190, 61, 52, 96, 146, 187, 56, 238, 3, 190, 36, 188, 92, 62, 177, 166, 155, 60, 190, 38, 187, 61, 152, 98, 72, 189, 7, 156, 225, 61, 156, 45, 147, 189, 244, 166, 232, 189, 165, 225, 200, 59, 104, 45, 16, 62, 7, 2, 93, 62, 150, 234, 131, 62, 104, 114, 134, 61, 6, 253, 96, 61, 242, 105, 168, 62, 210, 165, 55, 62, 22, 76, 105, 62, 80, 166, 206, 62, 199, 155, 1, 190, 122, 34, 179, 61, 71, 1, 114, 190, 113, 120, 59, 62, 151, 12, 61, 62, 168, 181, 188, 61, 59, 224, 2, 60, 121, 222, 189, 61, 202, 65, 161, 62, 39, 195, 251, 187, 167, 171, 56, 62, 95, 255, 93, 62, 113, 177, 185, 62, 83, 193, 8, 190, 117, 73, 95, 191, 82, 173, 184, 190, 211, 107, 209, 61, 192, 205, 51, 191, 168, 46, 198, 61, 252, 24, 176, 190, 248, 194, 125, 189, 25, 197, 27, 190, 30, 225, 139, 189, 62, 223, 69, 190, 68, 178, 196, 61, 93, 89, 215, 190, 112, 205, 78, 190, 197, 221, 229, 189, 206, 55, 150, 62, 149, 203, 127, 190, 5, 250, 255, 61, 38, 86, 176, 190, 211, 144, 106, 61, 65, 100, 81, 191, 213, 255, 78, 190, 145, 211, 45, 62, 198, 145, 175, 189, 240, 22, 136, 190, 216, 25, 134, 189, 201, 138, 57, 62, 199, 165, 7, 191, 229, 17, 184, 190, 129, 251, 89, 191, 122, 195, 208, 61, 198, 218, 17, 191, 202, 18, 43, 62, 227, 31, 106, 190, 97, 50, 214, 190, 52, 96, 13, 61, 79, 98, 221, 190, 108, 138, 32, 62, 30, 69, 131, 190, 221, 200, 206, 189, 82, 151, 12, 62, 122, 206, 33, 188, 45, 105, 164, 190, 225, 204, 20, 62, 61, 183, 158, 190, 123, 219, 111, 61, 34, 192, 119, 62, 43, 242, 42, 62, 252, 255, 137, 188, 162, 227, 41, 62, 93, 147, 47, 62, 137, 218, 104, 190, 39, 40, 219, 190, 221, 168, 147, 62, 59, 36, 145, 61, 25, 228, 106, 189, 148, 54, 47, 60, 226, 119, 23, 62, 30, 112, 218, 62, 92, 198, 232, 190, 92, 36, 133, 189, 30, 121, 164, 190, 176, 72, 73, 62, 89, 123, 47, 191, 88, 149, 27, 188, 119, 69, 160, 190, 214, 12, 90, 190, 88, 107, 148, 61, 139, 94, 212, 190, 246, 136, 78, 62, 242, 87, 155, 190, 134, 209, 130, 61, 230, 33, 221, 189, 76, 96, 144, 62, 62, 151, 230, 188, 20, 107, 200, 188, 151, 144, 151, 190, 11, 190, 63, 62, 109, 66, 58, 62, 141, 167, 97, 61, 188, 42, 73, 61, 210, 33, 100, 61, 129, 73, 68, 188, 210, 231, 92, 190, 54, 93, 127, 190, 216, 238, 132, 62, 110, 190, 61, 62, 223, 43, 88, 190, 126, 77, 86, 61, 70, 223, 20, 62, 236, 43, 245, 62, 241, 35, 29, 191, 195, 239, 65, 62, 174, 135, 25, 191, 42, 50, 242, 59, 240, 213, 137, 190, 192, 153, 4, 62, 157, 175, 195, 61, 212, 231, 241, 189, 240, 17, 186, 61, 121, 220, 149, 60, 31, 48, 185, 60, 9, 119, 11, 190, 3, 210, 44, 62, 4, 89, 207, 189, 201, 189, 227, 61, 32, 181, 219, 60, 221, 106, 203, 61, 73, 211, 34, 189, 49, 72, 64, 61, 135, 90, 196, 189, 127, 151, 141, 62, 8, 78, 90, 190, 0, 7, 178, 61, 132, 9, 62, 62, 74, 97, 105, 189, 58, 123, 161, 189, 11, 236, 144, 189, 231, 149, 145, 61, 90, 224, 12, 62, 6, 13, 154, 61, 169, 242, 225, 61, 127, 187, 185, 60, 164, 226, 110, 190, 218, 154, 167, 188, 247, 221, 156, 190, 202, 111, 0, 62, 79, 206, 38, 190, 85, 202, 195, 190, 132, 151, 50, 190, 204, 99, 193, 62, 104, 214, 21, 188, 56, 84, 79, 190, 29, 195, 159, 190, 75, 194, 144, 61, 1, 171, 140, 61, 109, 197, 50, 62, 77, 202, 68, 190, 145, 141, 12, 188, 16, 132, 107, 62, 176, 217, 167, 62, 215, 156, 173, 189, 143, 246, 145, 190, 210, 82, 183, 61, 10, 126, 199, 187, 232, 38, 86, 189, 124, 167, 12, 189, 40, 198, 155, 61, 154, 222, 250, 189, 179, 209, 125, 190, 221, 100, 249, 60, 190, 138, 10, 62, 129, 188, 153, 62, 114, 55, 98, 190, 227, 51, 123, 190, 83, 117, 220, 62, 169, 53, 131, 190, 4, 247, 41, 190, 81, 134, 39, 190, 242, 131, 8, 188, 138, 0, 205, 60, 7, 226, 50, 190, 209, 2, 197, 62, 18, 66, 224, 188, 83, 62, 90, 190, 241, 97, 174, 190, 99, 65, 117, 62, 35, 170, 150, 189, 25, 44, 88, 61, 91, 164, 150, 61, 73, 6, 207, 190, 255, 39, 83, 62, 221, 179, 126, 62, 96, 51, 130, 62, 19, 149, 33, 62, 148, 129, 2, 190, 32, 60, 90, 189, 180, 221, 9, 61, 147, 53, 41, 62, 66, 172, 129, 59, 23, 3, 215, 61, 215, 70, 236, 61, 157, 204, 21, 191, 145, 168, 179, 190, 0, 215, 174, 61, 220, 43, 73, 61, 154, 194, 183, 190, 235, 136, 189, 62, 205, 120, 105, 189, 76, 225, 48, 61, 157, 49, 49, 62, 93, 218, 113, 61, 153, 226, 229, 190, 144, 214, 100, 62, 93, 218, 238, 61, 174, 155, 49, 189, 73, 219, 17, 62, 120, 133, 236, 190, 105, 234, 209, 61, 226, 28, 185, 61, 8, 159, 104, 189, 42, 251, 140, 190, 110, 235, 35, 190, 8, 24, 41, 62, 57, 148, 127, 62, 216, 218, 246, 189, 187, 129, 204, 61, 166, 210, 8, 189, 51, 165, 124, 60, 109, 91, 97, 190, 136, 53, 217, 61, 231, 53, 32, 189, 177, 203, 78, 62, 2, 85, 46, 61, 118, 153, 255, 61, 137, 49, 127, 62, 1, 148, 245, 188, 39, 185, 141, 190, 158, 240, 121, 190, 200, 108, 194, 62, 4, 48, 153, 62, 139, 153, 85, 62, 81, 42, 154, 188, 20, 154, 205, 61, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 138, 123, 123, 61, 157, 214, 14, 190, 61, 15, 198, 189, 39, 22, 46, 190, 29, 71, 35, 190, 215, 179, 51, 190, 172, 30, 84, 189, 240, 173, 82, 61, 6, 130, 34, 61, 206, 157, 33, 190, 76, 156, 63, 59, 234, 165, 232, 61, 248, 193, 101, 59, 138, 105, 138, 189, 6, 158, 178, 187, 196, 22, 240, 189, 12, 178, 236, 189, 35, 25, 57, 190, 70, 122, 38, 62, 225, 89, 14, 190, 49, 78, 176, 61, 172, 247, 61, 189, 70, 134, 117, 187, 145, 196, 167, 189, 224, 232, 147, 61, 35, 84, 33, 62, 92, 202, 133, 189, 121, 72, 113, 61, 33, 146, 163, 61, 37, 109, 16, 190, 191, 71, 180, 190, 204, 125, 128, 188, 101, 118, 21, 190, 130, 18, 76, 191, 60, 86, 30, 62, 18, 28, 61, 191, 166, 99, 242, 190, 46, 186, 251, 61, 242, 76, 168, 60, 80, 126, 8, 191, 244, 97, 137, 62, 223, 163, 166, 190, 31, 175, 176, 60, 84, 7, 149, 191, 5, 186, 241, 61, 64, 69, 211, 62, 43, 37, 178, 189, 115, 120, 132, 189, 136, 85, 6, 190, 254, 68, 185, 190, 108, 183, 56, 62, 68, 147, 95, 190, 216, 22, 46, 62, 206, 220, 173, 62, 105, 112, 156, 191, 183, 190, 71, 190, 205, 179, 71, 190, 62, 196, 154, 190, 55, 75, 59, 63, 48, 199, 233, 189, 207, 44, 134, 190, 167, 164, 7, 62, 168, 218, 214, 189, 3, 49, 190, 61, 32, 236, 177, 62, 13, 245, 25, 188, 83, 100, 206, 62, 124, 0, 16, 191, 201, 141, 161, 61, 83, 226, 193, 61, 35, 160, 72, 189, 38, 67, 155, 190, 58, 223, 53, 189, 229, 188, 74, 62, 154, 143, 54, 62, 152, 156, 56, 62, 110, 230, 167, 189, 238, 16, 187, 188, 116, 8, 220, 61, 213, 128, 25, 61, 191, 77, 214, 62, 165, 123, 138, 61, 111, 201, 30, 190, 42, 74, 100, 190, 234, 111, 33, 189, 104, 179, 75, 62, 209, 157, 4, 62, 215, 83, 128, 189, 183, 92, 71, 190, 75, 47, 82, 62, 13, 94, 190, 60, 82, 236, 54, 62, 39, 221, 249, 61, 224, 103, 78, 190, 1, 248, 90, 190, 197, 170, 14, 62, 184, 159, 238, 62, 247, 119, 222, 190, 176, 54, 32, 61, 231, 161, 23, 191, 147, 219, 154, 189, 255, 171, 113, 62, 211, 248, 21, 189, 112, 241, 112, 188, 138, 220, 59, 62, 192, 56, 69, 62, 21, 125, 16, 61, 230, 236, 32, 62, 99, 105, 89, 191, 140, 48, 37, 62, 112, 4, 219, 190, 226, 255, 212, 189, 215, 216, 220, 62, 57, 102, 16, 62, 105, 142, 194, 61, 243, 6, 27, 191, 126, 158, 94, 62, 215, 228, 133, 62, 56, 129, 154, 62, 66, 206, 79, 190, 152, 99, 167, 190, 130, 24, 151, 62, 196, 172, 120, 191, 200, 189, 33, 62, 61, 1, 90, 190, 232, 91, 90, 61, 39, 13, 118, 62, 86, 91, 122, 189, 239, 76, 164, 190, 141, 227, 169, 60, 2, 81, 180, 190, 212, 82, 2, 63, 177, 90, 188, 190, 124, 73, 77, 190, 75, 44, 140, 189, 212, 215, 149, 62, 205, 98, 208, 189, 103, 18, 139, 190, 84, 210, 239, 190, 12, 118, 237, 61, 189, 231, 248, 62, 245, 90, 71, 61, 131, 177, 145, 62, 37, 76, 20, 62, 206, 114, 46, 190, 100, 252, 20, 190, 202, 152, 218, 189, 198, 7, 85, 62, 126, 161, 18, 190, 244, 195, 144, 61, 49, 92, 23, 190, 231, 13, 142, 62, 231, 194, 164, 62, 94, 149, 16, 191, 145, 10, 121, 62, 174, 198, 70, 190, 50, 73, 119, 62, 219, 218, 192, 190, 26, 240, 194, 190, 70, 91, 86, 62, 25, 2, 150, 62, 97, 37, 158, 190, 60, 184, 147, 62, 72, 163, 36, 191, 12, 252, 189, 61, 106, 245, 99, 62, 101, 109, 40, 190, 86, 158, 24, 190, 242, 202, 173, 62, 51, 84, 91, 62, 164, 147, 169, 60, 238, 71, 153, 62, 39, 250, 80, 190, 161, 99, 122, 61, 187, 39, 14, 190, 194, 60, 215, 189, 16, 228, 252, 62, 28, 102, 26, 189, 200, 244, 209, 61, 141, 131, 154, 189, 197, 217, 114, 61, 243, 56, 64, 62, 218, 46, 92, 62, 168, 99, 165, 189, 166, 234, 93, 190, 133, 233, 95, 62, 204, 72, 196, 190, 88, 10, 190, 188, 2, 41, 3, 190, 187, 129, 2, 61, 109, 151, 167, 190, 115, 49, 145, 61, 148, 170, 214, 190, 144, 119, 78, 62, 31, 247, 130, 190, 240, 116, 45, 191, 124, 146, 147, 190, 90, 21, 153, 190, 251, 129, 20, 62, 114, 24, 0, 191, 105, 9, 219, 190, 214, 188, 48, 190, 123, 141, 206, 190, 17, 109, 254, 189, 223, 85, 144, 62, 97, 239, 209, 62, 235, 12, 167, 62, 145, 179, 212, 189, 142, 42, 211, 190, 223, 105, 136, 190, 177, 175, 230, 190, 21, 21, 86, 62, 47, 192, 230, 61, 218, 112, 2, 189, 177, 82, 147, 189, 234, 179, 99, 62, 180, 53, 217, 62, 163, 140, 23, 191, 220, 174, 172, 62, 157, 184, 67, 190, 88, 8, 144, 62, 173, 210, 78, 191, 242, 248, 193, 62, 33, 99, 86, 190, 49, 189, 180, 189, 77, 0, 187, 61, 62, 45, 169, 60, 87, 173, 10, 62, 143, 72, 50, 190, 52, 189, 150, 61, 245, 167, 152, 61, 209, 15, 156, 62, 43, 182, 226, 189, 18, 224, 140, 189, 255, 127, 223, 190, 171, 48, 231, 61, 10, 157, 164, 61, 100, 186, 132, 61, 239, 41, 21, 62, 130, 184, 2, 62, 70, 175, 143, 190, 235, 210, 158, 189, 130, 38, 91, 190, 254, 82, 153, 62, 145, 221, 38, 189, 3, 51, 173, 189, 165, 211, 54, 190, 221, 116, 100, 62, 46, 0, 138, 62, 65, 121, 183, 190, 84, 74, 137, 62, 38, 245, 1, 191, 149, 123, 216, 61, 255, 188, 203, 190, 124, 235, 0, 62, 51, 211, 158, 61, 195, 27, 80, 61, 198, 216, 212, 189, 73, 140, 128, 61, 198, 125, 20, 62, 210, 11, 120, 60, 122, 79, 84, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 131, 89, 1, 190, 58, 128, 184, 189, 97, 140, 178, 61, 56, 47, 225, 188, 16, 74, 201, 60, 151, 93, 234, 61, 169, 45, 213, 189, 102, 18, 29, 61, 118, 140, 15, 190, 13, 225, 190, 60, 249, 228, 100, 189, 6, 92, 52, 190, 0, 230, 220, 189, 119, 182, 36, 190, 157, 42, 38, 61, 31, 226, 88, 188, 172, 50, 142, 189, 129, 202, 106, 61, 148, 2, 70, 190, 89, 227, 34, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 110, 196, 38, 190, 250, 212, 13, 62, 86, 2, 162, 189, 140, 46, 26, 189, 101, 252, 172, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 236, 246, 51, 189, 81, 246, 135, 59, 179, 80, 1, 190, 227, 67, 171, 189, 108, 71, 210, 189, 220, 92, 38, 190, 183, 134, 75, 61, 136, 141, 11, 190, 16, 136, 224, 61, 73, 167, 143, 60, 60, 184, 176, 189, 63, 206, 182, 61, 235, 90, 0, 62, 150, 172, 50, 58, 44, 155, 109, 189, 84, 175, 168, 60, 85, 168, 57, 61, 245, 71, 91, 190, 97, 101, 95, 190, 228, 145, 54, 190, 150, 230, 241, 61, 214, 233, 43, 188, 223, 131, 135, 190, 18, 203, 27, 189, 27, 41, 129, 62, 254, 33, 232, 190, 233, 88, 79, 62, 151, 255, 249, 190, 92, 199, 180, 189, 170, 236, 233, 61, 179, 203, 51, 188, 77, 224, 130, 189, 183, 170, 165, 61, 180, 118, 176, 62, 29, 240, 140, 61, 183, 243, 172, 60, 40, 177, 142, 190, 192, 0, 136, 61, 214, 154, 24, 190, 23, 148, 3, 190, 233, 100, 221, 62, 8, 166, 165, 189, 51, 110, 142, 62, 49, 168, 150, 189, 137, 217, 173, 189, 9, 173, 230, 61, 99, 105, 156, 61, 93, 103, 74, 190, 141, 160, 196, 189, 206, 220, 29, 62, 130, 69, 115, 190, 66, 188, 1, 62, 218, 212, 45, 190, 3, 228, 83, 189, 37, 155, 164, 62, 64, 111, 84, 189, 114, 138, 238, 190, 163, 208, 93, 62, 110, 48, 91, 189, 25, 138, 88, 62, 88, 184, 9, 191, 228, 29, 48, 190, 79, 4, 34, 189, 53, 73, 205, 60, 221, 236, 100, 190, 146, 241, 85, 62, 138, 103, 101, 190, 145, 17, 53, 188, 48, 122, 53, 190, 62, 17, 233, 61, 156, 19, 155, 190, 246, 146, 159, 61, 86, 237, 78, 60, 199, 223, 226, 61, 164, 159, 143, 189, 244, 68, 94, 190, 227, 77, 201, 60, 64, 39, 7, 62, 97, 210, 56, 190, 206, 70, 117, 62, 163, 43, 148, 62, 245, 205, 6, 191, 183, 140, 206, 190, 172, 220, 240, 190, 171, 205, 215, 61, 241, 14, 144, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 154, 255, 175, 62, 99, 92, 158, 190, 93, 20, 133, 189, 61, 48, 18, 62, 194, 162, 34, 62, 50, 86, 186, 190, 167, 5, 18, 60, 75, 17, 179, 189, 70, 210, 2, 190, 217, 22, 58, 190, 251, 49, 172, 190, 175, 83, 73, 61, 183, 249, 158, 188, 85, 11, 22, 187, 249, 101, 92, 62, 211, 146, 145, 62, 83, 244, 150, 62, 32, 167, 213, 189, 32, 222, 195, 62, 13, 68, 18, 62, 227, 154, 183, 188, 133, 36, 42, 189, 136, 242, 138, 61, 45, 62, 22, 190, 138, 21, 52, 62, 99, 246, 131, 62, 185, 236, 19, 61, 105, 148, 87, 62, 234, 220, 15, 61, 176, 20, 81, 59, 9, 108, 91, 62, 95, 80, 132, 191, 150, 141, 149, 190, 192, 73, 71, 61, 163, 235, 190, 62, 206, 218, 252, 190, 122, 72, 153, 62, 36, 46, 238, 190, 238, 115, 203, 59, 55, 31, 152, 62, 91, 155, 67, 60, 77, 56, 151, 190, 104, 120, 99, 62, 89, 218, 130, 62, 167, 68, 63, 187, 210, 192, 186, 62, 250, 69, 86, 191, 69, 221, 24, 62, 140, 142, 139, 191, 200, 15, 145, 190, 148, 212, 145, 62, 248, 68, 40, 190, 55, 112, 149, 188, 143, 22, 190, 60, 219, 183, 88, 61, 44, 97, 157, 62, 217, 211, 145, 190, 225, 5, 22, 190, 53, 44, 194, 190, 254, 136, 41, 190, 95, 249, 115, 191, 216, 102, 93, 62, 171, 221, 133, 191, 46, 219, 40, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 65, 46, 55, 62, 255, 209, 19, 62, 200, 124, 206, 189, 219, 220, 50, 190, 213, 212, 195, 61, 34, 113, 148, 62, 202, 35, 254, 188, 49, 171, 193, 62, 71, 93, 11, 62, 19, 177, 222, 61, 79, 158, 161, 62, 24, 86, 149, 62, 1, 145, 36, 61, 234, 187, 111, 190, 222, 68, 162, 189, 233, 207, 149, 61, 81, 65, 207, 61, 175, 149, 98, 62, 220, 186, 1, 62, 9, 39, 72, 62, 72, 23, 174, 61, 34, 83, 200, 61, 158, 153, 175, 62, 200, 237, 10, 62, 182, 39, 201, 187, 104, 115, 17, 190, 6, 183, 125, 62, 179, 243, 148, 60, 255, 58, 37, 190, 74, 88, 168, 59, 13, 51, 167, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 249, 239, 17, 63, 119, 157, 113, 190, 127, 127, 135, 62, 190, 128, 139, 60, 86, 47, 246, 62, 145, 212, 148, 62, 170, 102, 52, 63, 37, 211, 132, 190, 13, 203, 77, 63, 32, 152, 177, 62, 138, 129, 252, 62, 175, 230, 192, 188, 19, 8, 227, 190, 189, 90, 214, 62, 15, 168, 9, 63, 73, 6, 171, 60, 104, 95, 15, 62, 80, 173, 128, 63, 245, 58, 101, 190, 86, 26, 84, 191, 207, 142, 18, 63, 122, 148, 55, 191, 178, 123, 84, 63, 105, 34, 211, 62, 153, 71, 1, 61, 217, 234, 220, 189, 101, 183, 188, 190, 87, 244, 109, 62, 188, 197, 185, 189, 197, 15, 110, 190, 77, 153, 157, 191, 81, 214, 233, 61, 70, 117, 243, 61, 112, 32, 47, 190, 199, 37, 208, 62, 67, 134, 230, 189, 108, 107, 12, 60, 21, 150, 214, 190, 126, 21, 123, 62, 40, 47, 77, 190, 153, 18, 128, 190, 5, 122, 145, 190, 198, 248, 12, 190, 132, 250, 86, 190, 88, 158, 50, 62, 47, 101, 151, 62, 203, 60, 79, 189, 133, 96, 171, 61, 175, 174, 255, 61, 230, 93, 23, 62, 93, 99, 119, 61, 88, 244, 12, 62, 116, 236, 195, 62, 12, 197, 9, 62, 250, 6, 172, 62, 189, 224, 70, 190, 208, 61, 10, 189, 67, 182, 31, 190, 185, 133, 105, 189, 218, 137, 186, 190, 203, 145, 20, 190, 224, 132, 208, 189, 219, 210, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 58, 155, 189, 67, 130, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {185, 44, 141, 190, 151, 160, 25, 191, 18, 66, 70, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 219, 236, 61, 82, 71, 222, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}