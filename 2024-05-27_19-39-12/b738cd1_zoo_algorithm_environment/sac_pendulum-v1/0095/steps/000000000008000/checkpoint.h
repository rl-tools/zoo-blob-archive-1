// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 45, 69, 62, 15, 84, 165, 189, 11, 202, 51, 191, 137, 157, 51, 191, 104, 50, 167, 190, 174, 45, 35, 191, 69, 216, 44, 63, 242, 188, 143, 63, 37, 20, 139, 62, 12, 170, 102, 189, 204, 185, 32, 190, 212, 71, 28, 63, 150, 25, 237, 60, 254, 240, 179, 62, 30, 208, 195, 190, 143, 162, 42, 63, 153, 128, 95, 191, 228, 50, 210, 190, 165, 111, 222, 62, 75, 23, 54, 63, 11, 87, 115, 62, 245, 69, 179, 189, 203, 174, 240, 190, 31, 41, 204, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 93, 209, 37, 63, 121, 220, 95, 191, 105, 51, 227, 190, 116, 113, 10, 190, 245, 61, 127, 191, 141, 41, 123, 189, 28, 40, 88, 63, 5, 63, 126, 63, 168, 104, 55, 62, 130, 30, 47, 63, 85, 135, 26, 63, 169, 132, 174, 62, 40, 179, 149, 62, 213, 238, 128, 63, 251, 166, 93, 62, 117, 214, 53, 190, 221, 129, 155, 63, 69, 239, 150, 62, 55, 252, 136, 189, 86, 226, 188, 61, 123, 192, 121, 61, 25, 204, 19, 61, 43, 37, 128, 63, 248, 196, 154, 62, 150, 158, 58, 190, 165, 117, 73, 191, 44, 42, 252, 62, 110, 135, 230, 62, 102, 4, 97, 63, 183, 88, 28, 62, 7, 0, 99, 62, 162, 83, 191, 190, 199, 2, 4, 63, 163, 218, 201, 190, 154, 143, 115, 191, 16, 35, 39, 191, 85, 205, 29, 190, 233, 229, 215, 62, 46, 25, 229, 61, 139, 154, 86, 190, 251, 210, 30, 191, 162, 190, 104, 188, 198, 239, 209, 190, 15, 161, 104, 62, 209, 148, 161, 190, 178, 71, 215, 62, 198, 54, 129, 63, 244, 231, 224, 62, 139, 247, 28, 62, 158, 157, 120, 62, 251, 29, 28, 191, 29, 126, 96, 63, 82, 39, 149, 191, 206, 103, 141, 190, 188, 228, 96, 63, 61, 97, 120, 63, 91, 223, 153, 62, 230, 128, 75, 190, 54, 170, 178, 63, 79, 206, 159, 62, 131, 35, 183, 189, 48, 176, 14, 62, 96, 213, 170, 190, 175, 107, 107, 62, 222, 250, 93, 63, 99, 148, 213, 62, 35, 31, 55, 190, 255, 135, 210, 191, 185, 115, 194, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 35, 51, 191, 119, 92, 214, 190, 229, 161, 110, 190, 48, 218, 102, 189, 114, 138, 239, 61, 47, 178, 134, 190, 26, 133, 177, 190, 69, 159, 26, 63, 166, 7, 180, 190, 93, 64, 139, 61, 16, 168, 149, 62, 151, 7, 106, 62, 131, 142, 17, 191, 56, 145, 43, 62, 72, 250, 15, 190, 165, 215, 46, 63, 92, 97, 170, 61, 177, 13, 22, 63, 24, 16, 203, 61, 61, 227, 186, 190, 193, 205, 59, 189, 81, 72, 175, 190, 84, 33, 183, 62, 246, 121, 221, 62, 0, 253, 124, 189, 85, 214, 40, 62, 163, 197, 200, 62, 105, 98, 215, 190, 134, 208, 54, 190, 25, 104, 62, 190, 65, 116, 158, 62, 175, 191, 238, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 73, 200, 213, 61, 198, 69, 8, 191, 116, 156, 191, 190, 10, 100, 232, 61, 70, 92, 164, 190, 68, 149, 39, 63, 49, 140, 113, 190, 163, 48, 122, 59, 29, 69, 8, 61, 200, 237, 6, 62, 101, 115, 118, 62, 57, 210, 98, 189, 68, 210, 131, 190, 10, 147, 106, 190, 60, 10, 215, 189, 66, 134, 118, 62, 153, 132, 88, 190, 128, 74, 228, 61, 100, 213, 161, 189, 254, 47, 59, 189, 29, 88, 196, 190, 84, 109, 25, 190, 15, 118, 50, 62, 46, 39, 127, 189, 216, 62, 164, 190, 51, 29, 150, 62, 241, 117, 150, 62, 110, 111, 13, 191, 84, 101, 129, 190, 158, 222, 196, 190, 18, 31, 98, 61, 202, 75, 159, 189, 180, 128, 227, 61, 230, 112, 138, 189, 6, 182, 42, 62, 84, 239, 57, 188, 0, 141, 143, 189, 209, 116, 29, 188, 12, 255, 207, 188, 39, 145, 136, 61, 115, 83, 51, 61, 246, 165, 116, 62, 189, 6, 185, 62, 211, 0, 16, 62, 236, 24, 31, 61, 188, 252, 127, 62, 91, 73, 43, 62, 186, 252, 125, 61, 157, 32, 66, 187, 108, 136, 170, 59, 194, 24, 153, 189, 245, 255, 3, 61, 75, 66, 47, 62, 87, 89, 3, 189, 202, 223, 152, 62, 94, 65, 186, 190, 123, 183, 108, 62, 8, 235, 200, 189, 58, 18, 243, 61, 155, 235, 22, 62, 245, 191, 3, 190, 31, 22, 254, 189, 168, 88, 156, 62, 201, 160, 155, 62, 213, 17, 62, 188, 41, 83, 18, 62, 56, 163, 0, 191, 243, 201, 57, 60, 147, 235, 136, 190, 146, 225, 115, 62, 238, 168, 36, 191, 252, 251, 51, 62, 130, 89, 138, 61, 105, 181, 87, 62, 234, 168, 0, 62, 141, 160, 87, 187, 200, 211, 129, 190, 219, 238, 65, 190, 112, 51, 232, 189, 16, 220, 120, 190, 19, 139, 172, 190, 253, 192, 149, 62, 255, 245, 196, 189, 43, 85, 50, 62, 237, 151, 11, 189, 184, 239, 131, 190, 31, 182, 132, 189, 57, 215, 98, 190, 29, 46, 123, 190, 215, 86, 22, 62, 179, 103, 155, 62, 184, 40, 24, 191, 213, 180, 138, 190, 123, 230, 141, 190, 237, 216, 141, 61, 225, 162, 125, 189, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 3, 13, 8, 189, 176, 73, 103, 62, 242, 156, 43, 189, 15, 198, 166, 61, 122, 104, 201, 62, 178, 232, 175, 189, 126, 87, 155, 62, 135, 45, 192, 188, 160, 167, 163, 189, 58, 164, 173, 188, 2, 35, 88, 191, 95, 190, 162, 189, 46, 125, 123, 62, 20, 187, 83, 188, 131, 125, 162, 189, 85, 159, 146, 59, 165, 76, 223, 189, 43, 23, 124, 189, 185, 31, 159, 189, 64, 78, 177, 189, 161, 107, 220, 61, 196, 195, 25, 62, 47, 220, 60, 190, 152, 166, 73, 62, 24, 227, 186, 61, 137, 170, 172, 59, 8, 201, 203, 190, 244, 90, 229, 61, 28, 165, 182, 62, 255, 207, 51, 62, 196, 160, 62, 62, 0, 168, 243, 189, 57, 69, 117, 190, 30, 169, 135, 61, 249, 176, 97, 190, 23, 10, 156, 61, 201, 219, 88, 189, 111, 20, 194, 61, 202, 128, 135, 189, 67, 183, 26, 62, 33, 51, 194, 189, 171, 177, 54, 62, 129, 140, 124, 190, 85, 10, 1, 61, 105, 151, 145, 190, 7, 142, 147, 188, 29, 34, 241, 59, 45, 2, 9, 61, 210, 252, 6, 190, 129, 126, 74, 190, 113, 127, 235, 60, 66, 210, 68, 190, 163, 35, 158, 190, 95, 87, 50, 61, 171, 43, 188, 188, 23, 230, 49, 62, 38, 166, 29, 190, 17, 202, 31, 62, 222, 196, 172, 61, 243, 207, 10, 190, 229, 200, 85, 190, 250, 114, 41, 191, 47, 249, 51, 190, 46, 114, 82, 191, 209, 176, 25, 61, 222, 238, 13, 191, 228, 138, 238, 190, 83, 230, 41, 62, 29, 152, 76, 191, 175, 251, 10, 62, 68, 214, 109, 190, 213, 187, 237, 189, 119, 244, 134, 61, 141, 241, 235, 188, 105, 104, 40, 62, 92, 231, 150, 188, 40, 187, 171, 190, 16, 67, 76, 190, 75, 204, 17, 61, 240, 62, 70, 62, 149, 96, 5, 62, 102, 11, 127, 62, 159, 45, 10, 190, 246, 62, 41, 190, 130, 79, 4, 191, 145, 11, 86, 62, 158, 201, 154, 62, 6, 126, 137, 190, 155, 197, 77, 190, 160, 42, 156, 61, 27, 49, 179, 62, 39, 75, 253, 190, 125, 28, 108, 61, 229, 222, 38, 191, 93, 231, 168, 189, 82, 137, 150, 188, 3, 147, 170, 59, 167, 206, 2, 190, 24, 55, 89, 62, 64, 99, 155, 60, 82, 176, 200, 61, 181, 204, 100, 189, 13, 177, 201, 61, 95, 188, 164, 189, 244, 166, 232, 189, 162, 224, 128, 185, 227, 183, 227, 61, 177, 119, 90, 62, 218, 16, 113, 62, 57, 15, 56, 61, 117, 120, 98, 61, 59, 132, 157, 62, 51, 147, 33, 62, 241, 200, 110, 62, 134, 185, 202, 62, 105, 121, 237, 189, 183, 102, 171, 61, 229, 254, 99, 190, 228, 7, 22, 62, 78, 74, 49, 62, 197, 25, 188, 61, 14, 174, 143, 59, 98, 129, 184, 61, 102, 62, 155, 62, 88, 237, 253, 187, 178, 221, 69, 62, 154, 206, 84, 62, 2, 42, 175, 62, 83, 193, 8, 190, 128, 37, 55, 191, 130, 92, 166, 190, 52, 0, 224, 61, 9, 103, 43, 191, 157, 57, 2, 62, 11, 45, 136, 190, 7, 201, 191, 186, 25, 197, 27, 190, 187, 83, 91, 189, 106, 155, 96, 190, 126, 16, 196, 61, 211, 151, 205, 190, 120, 197, 45, 190, 106, 242, 50, 189, 203, 217, 162, 62, 239, 16, 62, 190, 212, 115, 3, 62, 137, 219, 170, 190, 22, 182, 77, 61, 99, 51, 64, 191, 255, 80, 63, 190, 69, 50, 52, 62, 13, 212, 112, 187, 156, 250, 129, 190, 17, 87, 245, 188, 115, 222, 32, 62, 13, 106, 254, 190, 149, 33, 135, 190, 129, 251, 89, 191, 178, 193, 245, 61, 210, 236, 252, 190, 69, 173, 81, 61, 139, 173, 195, 190, 129, 246, 202, 190, 140, 249, 175, 60, 156, 250, 228, 190, 23, 19, 46, 62, 166, 41, 96, 190, 10, 218, 199, 189, 82, 151, 12, 62, 18, 80, 161, 58, 182, 135, 180, 190, 32, 30, 31, 62, 103, 203, 132, 190, 147, 36, 128, 61, 240, 243, 100, 62, 172, 248, 39, 62, 83, 59, 252, 187, 75, 149, 33, 62, 224, 76, 53, 62, 129, 96, 115, 190, 18, 141, 253, 190, 47, 155, 133, 62, 18, 172, 95, 61, 90, 91, 189, 189, 136, 176, 45, 60, 97, 236, 26, 62, 246, 182, 221, 62, 65, 176, 212, 190, 225, 133, 172, 189, 109, 136, 203, 190, 193, 168, 77, 62, 49, 210, 12, 191, 134, 249, 228, 60, 134, 169, 50, 190, 3, 163, 71, 190, 18, 99, 138, 61, 232, 170, 209, 190, 161, 44, 98, 62, 37, 204, 135, 190, 165, 161, 156, 61, 230, 33, 221, 189, 82, 73, 148, 62, 14, 187, 65, 189, 28, 73, 236, 188, 191, 161, 117, 190, 65, 210, 60, 62, 185, 31, 39, 62, 245, 190, 89, 61, 27, 57, 128, 61, 183, 251, 90, 61, 86, 124, 170, 188, 135, 194, 92, 190, 33, 209, 80, 190, 123, 38, 97, 62, 227, 72, 62, 62, 199, 18, 43, 190, 253, 173, 93, 61, 182, 165, 37, 62, 93, 150, 242, 62, 96, 183, 19, 191, 196, 154, 44, 62, 55, 239, 16, 191, 107, 163, 124, 60, 12, 54, 89, 190, 99, 75, 14, 62, 7, 202, 235, 61, 8, 63, 219, 189, 53, 207, 182, 61, 20, 45, 80, 61, 209, 226, 11, 61, 154, 146, 12, 190, 145, 215, 72, 62, 4, 89, 207, 189, 76, 9, 9, 62, 174, 27, 7, 60, 4, 18, 242, 61, 131, 167, 16, 189, 187, 29, 92, 61, 168, 215, 187, 189, 11, 116, 139, 62, 60, 209, 92, 190, 222, 1, 197, 61, 106, 12, 70, 62, 63, 216, 28, 189, 6, 150, 136, 189, 121, 28, 31, 189, 133, 254, 103, 61, 112, 91, 31, 62, 247, 93, 151, 61, 208, 82, 13, 62, 117, 239, 118, 61, 39, 207, 99, 190, 205, 140, 98, 188, 21, 0, 141, 190, 227, 141, 253, 61, 167, 43, 3, 190, 247, 50, 198, 190, 0, 24, 204, 190, 112, 249, 182, 62, 192, 168, 196, 188, 88, 162, 147, 190, 187, 1, 171, 190, 39, 176, 155, 60, 112, 164, 211, 60, 109, 197, 50, 62, 75, 43, 84, 190, 163, 93, 1, 61, 148, 101, 109, 62, 97, 100, 122, 62, 248, 247, 138, 189, 87, 209, 124, 190, 234, 23, 221, 61, 153, 30, 36, 59, 242, 127, 98, 189, 198, 133, 190, 188, 214, 245, 53, 61, 46, 63, 19, 190, 175, 211, 135, 190, 154, 189, 55, 61, 247, 217, 215, 61, 251, 255, 149, 62, 33, 192, 139, 190, 145, 203, 117, 190, 88, 162, 194, 62, 247, 140, 90, 190, 82, 192, 17, 190, 139, 139, 37, 190, 156, 113, 122, 61, 51, 92, 46, 60, 11, 28, 24, 190, 154, 239, 201, 62, 52, 150, 109, 189, 179, 131, 142, 190, 53, 61, 151, 190, 251, 233, 119, 62, 97, 191, 235, 189, 25, 44, 88, 61, 105, 201, 175, 61, 116, 68, 173, 190, 182, 8, 104, 62, 183, 232, 132, 62, 152, 4, 133, 62, 25, 135, 31, 62, 203, 83, 254, 189, 151, 46, 111, 189, 136, 248, 251, 59, 56, 232, 54, 62, 129, 208, 26, 189, 77, 27, 231, 61, 66, 16, 221, 61, 74, 135, 18, 191, 69, 150, 219, 190, 59, 125, 163, 61, 138, 97, 193, 188, 170, 140, 143, 190, 13, 59, 198, 62, 68, 30, 101, 189, 59, 122, 229, 59, 123, 159, 45, 62, 93, 218, 113, 61, 63, 52, 195, 190, 24, 86, 63, 62, 254, 35, 213, 61, 134, 25, 54, 189, 100, 50, 36, 62, 247, 24, 174, 190, 148, 255, 189, 61, 124, 126, 137, 61, 8, 159, 104, 189, 158, 1, 132, 190, 251, 120, 83, 190, 131, 9, 18, 62, 177, 200, 129, 62, 97, 144, 242, 189, 148, 161, 228, 61, 183, 8, 82, 189, 253, 150, 150, 60, 198, 3, 87, 190, 202, 155, 197, 61, 225, 182, 66, 189, 20, 17, 47, 62, 176, 232, 150, 61, 54, 166, 174, 61, 146, 175, 123, 62, 38, 12, 35, 189, 155, 202, 132, 190, 178, 44, 89, 190, 229, 67, 186, 62, 118, 220, 159, 62, 108, 222, 114, 62, 204, 106, 210, 188, 192, 102, 133, 61, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 138, 123, 123, 61, 157, 214, 14, 190, 61, 15, 198, 189, 39, 22, 46, 190, 29, 71, 35, 190, 215, 179, 51, 190, 172, 30, 84, 189, 240, 173, 82, 61, 6, 130, 34, 61, 206, 157, 33, 190, 76, 156, 63, 59, 234, 165, 232, 61, 248, 193, 101, 59, 138, 105, 138, 189, 6, 158, 178, 187, 196, 22, 240, 189, 12, 178, 236, 189, 35, 25, 57, 190, 70, 122, 38, 62, 225, 89, 14, 190, 49, 78, 176, 61, 172, 247, 61, 189, 70, 134, 117, 187, 145, 196, 167, 189, 224, 232, 147, 61, 35, 84, 33, 62, 92, 202, 133, 189, 121, 72, 113, 61, 33, 146, 163, 61, 37, 109, 16, 190, 246, 221, 171, 190, 38, 118, 11, 188, 93, 124, 88, 190, 228, 196, 54, 191, 82, 150, 197, 61, 53, 220, 23, 191, 166, 99, 242, 190, 156, 179, 249, 61, 242, 76, 168, 60, 91, 243, 227, 190, 121, 209, 160, 62, 232, 24, 191, 190, 31, 175, 176, 60, 240, 199, 140, 191, 208, 101, 31, 62, 43, 172, 209, 62, 22, 18, 49, 188, 59, 194, 87, 189, 62, 50, 9, 190, 228, 139, 67, 190, 40, 24, 80, 62, 215, 131, 246, 189, 133, 179, 80, 62, 196, 110, 162, 62, 59, 112, 153, 191, 13, 237, 96, 190, 224, 46, 186, 189, 62, 196, 154, 190, 57, 253, 63, 63, 36, 11, 21, 190, 203, 13, 7, 190, 90, 138, 66, 62, 40, 74, 210, 189, 231, 53, 194, 61, 169, 215, 174, 62, 48, 42, 230, 186, 131, 85, 199, 62, 156, 198, 7, 191, 0, 159, 141, 61, 189, 38, 204, 61, 35, 160, 72, 189, 116, 207, 144, 190, 15, 232, 185, 60, 179, 79, 64, 62, 52, 126, 27, 62, 11, 220, 25, 62, 25, 248, 161, 189, 120, 67, 201, 188, 70, 173, 181, 61, 2, 147, 69, 61, 240, 46, 204, 62, 28, 221, 159, 61, 54, 40, 9, 190, 138, 59, 101, 190, 192, 144, 86, 187, 160, 90, 53, 62, 90, 69, 11, 62, 79, 76, 162, 189, 103, 54, 47, 190, 14, 226, 67, 62, 136, 229, 196, 60, 180, 86, 45, 62, 58, 167, 244, 61, 244, 94, 255, 189, 186, 200, 60, 190, 110, 194, 19, 62, 194, 72, 239, 62, 159, 147, 244, 190, 16, 200, 107, 61, 170, 101, 21, 191, 211, 154, 96, 189, 195, 25, 111, 62, 211, 248, 21, 189, 12, 116, 138, 188, 113, 50, 6, 62, 44, 151, 53, 62, 95, 114, 142, 60, 227, 221, 0, 62, 233, 77, 50, 191, 120, 107, 25, 62, 176, 94, 218, 190, 98, 197, 218, 189, 71, 134, 209, 62, 39, 68, 41, 61, 188, 27, 196, 61, 243, 6, 27, 191, 28, 169, 56, 62, 98, 48, 136, 62, 79, 212, 152, 62, 35, 221, 73, 190, 53, 163, 173, 190, 182, 150, 150, 62, 40, 109, 83, 191, 108, 171, 54, 62, 216, 141, 98, 190, 93, 117, 28, 60, 244, 200, 92, 62, 224, 6, 179, 189, 120, 134, 162, 190, 53, 58, 167, 60, 167, 88, 178, 190, 236, 142, 247, 62, 68, 25, 175, 190, 146, 119, 77, 190, 75, 44, 140, 189, 57, 37, 144, 62, 104, 72, 2, 190, 198, 164, 139, 190, 130, 91, 216, 190, 241, 247, 6, 62, 186, 220, 243, 62, 106, 76, 75, 61, 192, 191, 150, 62, 106, 26, 6, 62, 28, 246, 42, 190, 156, 152, 22, 190, 226, 201, 4, 190, 150, 74, 66, 62, 162, 94, 36, 190, 113, 88, 149, 61, 127, 19, 34, 190, 166, 85, 146, 62, 161, 170, 155, 62, 132, 209, 11, 191, 127, 171, 106, 62, 0, 30, 86, 190, 144, 120, 112, 62, 16, 232, 203, 190, 229, 59, 175, 190, 122, 116, 95, 62, 198, 254, 144, 62, 95, 59, 137, 190, 133, 36, 157, 62, 112, 217, 31, 191, 219, 161, 180, 61, 93, 59, 100, 62, 101, 109, 40, 190, 25, 169, 15, 190, 192, 99, 151, 62, 155, 21, 78, 62, 234, 36, 160, 60, 202, 218, 133, 62, 18, 41, 85, 190, 98, 59, 93, 61, 220, 195, 40, 190, 63, 193, 154, 189, 4, 244, 239, 62, 176, 93, 150, 188, 57, 157, 219, 61, 249, 126, 227, 189, 65, 180, 208, 60, 75, 175, 71, 62, 53, 151, 90, 62, 165, 166, 148, 189, 132, 72, 94, 190, 24, 174, 93, 62, 3, 84, 200, 190, 73, 104, 109, 59, 187, 151, 7, 190, 23, 64, 158, 188, 6, 68, 89, 190, 39, 67, 77, 61, 204, 47, 223, 190, 4, 147, 97, 62, 183, 198, 85, 190, 52, 123, 23, 191, 132, 71, 144, 190, 213, 128, 130, 190, 251, 129, 20, 62, 249, 100, 222, 190, 235, 148, 212, 190, 197, 151, 71, 190, 61, 180, 174, 190, 213, 255, 27, 190, 177, 167, 119, 62, 234, 38, 211, 62, 66, 232, 157, 62, 235, 165, 160, 189, 56, 200, 233, 190, 58, 112, 120, 190, 190, 10, 219, 190, 244, 9, 30, 62, 69, 188, 15, 62, 208, 165, 68, 60, 128, 188, 171, 189, 59, 47, 138, 62, 204, 162, 196, 62, 170, 70, 11, 191, 44, 234, 148, 62, 46, 94, 37, 190, 145, 145, 142, 62, 138, 218, 54, 191, 17, 0, 186, 62, 214, 14, 85, 190, 215, 66, 193, 189, 154, 138, 162, 61, 118, 44, 252, 60, 248, 212, 3, 62, 253, 58, 61, 190, 225, 179, 197, 61, 245, 167, 152, 61, 55, 176, 156, 62, 158, 0, 208, 189, 57, 57, 134, 189, 178, 91, 211, 190, 49, 65, 246, 61, 68, 36, 21, 61, 46, 204, 176, 61, 104, 65, 9, 62, 34, 219, 1, 62, 100, 243, 143, 190, 192, 26, 169, 189, 92, 206, 93, 190, 46, 65, 105, 62, 236, 95, 32, 188, 150, 32, 90, 189, 101, 10, 79, 190, 117, 248, 114, 62, 36, 199, 137, 62, 7, 240, 177, 190, 155, 100, 98, 62, 205, 164, 2, 191, 46, 104, 194, 61, 107, 17, 191, 190, 124, 235, 0, 62, 51, 211, 158, 61, 95, 4, 87, 61, 198, 216, 212, 189, 151, 32, 132, 61, 198, 125, 20, 62, 75, 38, 123, 60, 198, 60, 83, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 239, 247, 252, 189, 58, 128, 184, 189, 199, 114, 186, 61, 143, 103, 188, 188, 250, 97, 229, 60, 65, 190, 242, 61, 115, 39, 213, 189, 223, 34, 40, 61, 118, 140, 15, 190, 13, 225, 190, 60, 239, 247, 98, 189, 6, 92, 52, 190, 59, 206, 213, 189, 171, 25, 34, 190, 183, 221, 42, 61, 31, 226, 88, 188, 172, 50, 142, 189, 123, 151, 127, 61, 148, 2, 70, 190, 192, 70, 18, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 110, 196, 38, 190, 250, 212, 13, 62, 86, 2, 162, 189, 140, 46, 26, 189, 101, 252, 172, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 236, 246, 51, 189, 81, 246, 135, 59, 179, 80, 1, 190, 227, 67, 171, 189, 108, 71, 210, 189, 220, 92, 38, 190, 183, 134, 75, 61, 136, 141, 11, 190, 16, 136, 224, 61, 73, 167, 143, 60, 60, 184, 176, 189, 63, 206, 182, 61, 235, 90, 0, 62, 150, 172, 50, 58, 44, 155, 109, 189, 84, 175, 168, 60, 85, 168, 57, 61, 245, 71, 91, 190, 97, 101, 95, 190, 228, 145, 54, 190, 150, 230, 241, 61, 214, 233, 43, 188, 181, 44, 113, 190, 89, 46, 72, 189, 102, 210, 131, 62, 204, 65, 219, 190, 179, 201, 100, 62, 82, 52, 236, 190, 28, 32, 170, 189, 222, 200, 247, 61, 179, 203, 51, 188, 34, 117, 74, 189, 91, 201, 68, 61, 217, 229, 176, 62, 8, 131, 212, 60, 62, 248, 141, 60, 90, 178, 82, 190, 103, 17, 161, 61, 231, 0, 230, 189, 161, 101, 210, 189, 27, 178, 220, 62, 123, 45, 76, 190, 151, 141, 140, 62, 177, 58, 130, 60, 50, 227, 222, 189, 173, 54, 241, 61, 109, 2, 180, 61, 246, 171, 62, 190, 120, 117, 177, 189, 205, 225, 24, 62, 206, 86, 39, 190, 175, 252, 21, 62, 26, 182, 35, 190, 30, 143, 188, 189, 164, 16, 153, 62, 233, 37, 105, 189, 138, 149, 221, 190, 249, 88, 63, 62, 50, 211, 153, 189, 50, 42, 82, 62, 126, 64, 228, 190, 102, 217, 39, 190, 79, 4, 34, 189, 142, 253, 197, 60, 55, 33, 112, 190, 95, 82, 100, 62, 143, 163, 88, 190, 143, 165, 187, 60, 102, 28, 12, 190, 212, 116, 13, 62, 65, 26, 127, 190, 36, 89, 129, 61, 72, 241, 246, 60, 4, 83, 141, 61, 155, 250, 163, 189, 147, 64, 118, 190, 70, 51, 44, 61, 122, 59, 7, 62, 17, 36, 54, 190, 100, 191, 104, 62, 30, 158, 147, 62, 99, 72, 254, 190, 232, 39, 171, 190, 111, 115, 251, 190, 7, 59, 233, 61, 159, 251, 129, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 4, 124, 178, 62, 18, 54, 156, 190, 30, 14, 141, 189, 66, 196, 14, 62, 177, 78, 34, 62, 219, 177, 163, 190, 44, 228, 13, 187, 162, 26, 136, 189, 70, 210, 2, 190, 6, 148, 22, 190, 141, 59, 155, 190, 179, 119, 75, 61, 127, 209, 49, 189, 203, 120, 202, 188, 241, 136, 88, 62, 36, 46, 144, 62, 107, 130, 138, 62, 114, 242, 212, 189, 20, 63, 191, 62, 245, 215, 29, 62, 62, 32, 13, 60, 207, 76, 254, 188, 28, 147, 172, 61, 200, 55, 33, 190, 137, 94, 54, 62, 0, 33, 130, 62, 85, 118, 144, 61, 148, 116, 74, 62, 37, 120, 241, 60, 24, 69, 247, 185, 165, 109, 82, 62, 237, 47, 92, 191, 80, 123, 145, 190, 104, 65, 3, 61, 114, 7, 202, 62, 169, 255, 191, 190, 52, 152, 152, 62, 26, 108, 211, 190, 112, 147, 80, 189, 110, 199, 150, 62, 91, 155, 67, 60, 130, 80, 136, 190, 184, 143, 93, 62, 97, 146, 85, 62, 103, 233, 56, 187, 188, 33, 75, 62, 109, 239, 84, 191, 75, 78, 7, 62, 244, 45, 141, 191, 127, 52, 102, 190, 112, 250, 70, 62, 2, 37, 35, 190, 5, 202, 159, 188, 143, 22, 190, 60, 221, 239, 21, 61, 54, 123, 147, 62, 211, 31, 162, 190, 148, 241, 24, 190, 46, 162, 161, 190, 178, 8, 12, 190, 113, 228, 115, 191, 143, 118, 92, 62, 1, 230, 133, 191, 230, 245, 38, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 208, 70, 55, 62, 253, 57, 15, 62, 202, 67, 181, 189, 219, 220, 50, 190, 217, 180, 213, 61, 205, 176, 155, 62, 199, 87, 189, 188, 251, 90, 184, 62, 89, 75, 22, 62, 229, 53, 217, 61, 248, 71, 159, 62, 222, 177, 149, 62, 166, 182, 135, 61, 211, 224, 98, 190, 194, 174, 216, 189, 233, 207, 149, 61, 81, 65, 207, 61, 11, 82, 97, 62, 83, 16, 6, 62, 71, 252, 58, 62, 64, 136, 171, 61, 217, 1, 187, 61, 211, 100, 173, 62, 83, 159, 31, 62, 237, 20, 251, 186, 104, 115, 17, 190, 189, 95, 131, 62, 137, 144, 20, 61, 255, 58, 37, 190, 238, 221, 49, 60, 70, 220, 161, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 185, 176, 8, 63, 34, 75, 106, 190, 248, 114, 132, 62, 190, 128, 139, 60, 175, 241, 236, 62, 108, 217, 150, 62, 97, 208, 43, 63, 123, 69, 128, 190, 180, 21, 63, 63, 24, 104, 178, 62, 91, 26, 242, 62, 180, 38, 95, 188, 72, 61, 198, 190, 101, 187, 211, 62, 196, 80, 8, 63, 73, 6, 171, 60, 104, 95, 15, 62, 222, 139, 108, 63, 106, 247, 73, 190, 137, 53, 79, 191, 32, 77, 17, 63, 74, 229, 47, 191, 66, 159, 64, 63, 57, 199, 218, 62, 147, 93, 1, 61, 217, 234, 220, 189, 182, 74, 186, 190, 214, 138, 118, 62, 188, 197, 185, 189, 135, 134, 91, 190, 84, 161, 140, 191, 81, 214, 233, 61, 226, 14, 15, 62, 165, 42, 38, 190, 71, 26, 191, 62, 67, 134, 230, 189, 89, 144, 208, 187, 138, 109, 183, 190, 167, 193, 121, 62, 199, 173, 79, 190, 247, 229, 78, 190, 76, 40, 165, 190, 42, 164, 23, 190, 217, 219, 105, 190, 245, 4, 75, 62, 153, 196, 178, 62, 107, 2, 86, 188, 133, 96, 171, 61, 175, 174, 255, 61, 235, 187, 15, 62, 208, 103, 70, 61, 12, 142, 177, 61, 102, 137, 194, 62, 43, 154, 167, 61, 79, 212, 169, 62, 28, 158, 61, 190, 215, 76, 10, 189, 67, 182, 31, 190, 170, 124, 254, 189, 42, 128, 141, 190, 203, 145, 20, 190, 223, 178, 190, 189, 163, 114, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 3, 102, 189, 134, 100, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 226, 227, 62, 88, 26, 173, 191, 123, 144, 24, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 228, 80, 64, 174, 151, 190, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}