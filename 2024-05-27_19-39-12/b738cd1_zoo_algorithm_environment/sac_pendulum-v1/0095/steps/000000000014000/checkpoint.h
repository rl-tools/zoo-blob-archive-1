// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 225, 207, 62, 203, 0, 236, 189, 148, 44, 52, 191, 187, 198, 89, 191, 217, 253, 189, 190, 255, 63, 17, 191, 44, 0, 34, 63, 252, 237, 142, 63, 31, 29, 155, 62, 22, 90, 58, 190, 241, 188, 47, 190, 77, 82, 20, 63, 13, 25, 208, 188, 23, 172, 49, 62, 168, 91, 190, 190, 19, 238, 51, 63, 92, 43, 92, 191, 39, 24, 196, 190, 115, 142, 229, 62, 40, 62, 54, 63, 162, 220, 111, 62, 116, 60, 27, 190, 202, 43, 210, 190, 138, 199, 196, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 154, 229, 42, 63, 228, 200, 107, 191, 197, 119, 215, 190, 101, 41, 51, 190, 112, 10, 152, 191, 171, 97, 175, 188, 254, 245, 75, 63, 121, 216, 137, 63, 230, 64, 60, 62, 36, 142, 57, 63, 64, 125, 22, 63, 129, 212, 153, 62, 223, 210, 128, 62, 250, 146, 152, 63, 252, 156, 92, 62, 216, 27, 135, 190, 129, 2, 172, 63, 140, 15, 123, 62, 184, 139, 45, 190, 128, 128, 203, 61, 231, 83, 93, 61, 19, 181, 132, 61, 174, 122, 138, 63, 58, 128, 170, 62, 222, 42, 135, 190, 91, 253, 64, 191, 94, 179, 237, 62, 125, 136, 209, 62, 56, 204, 121, 63, 121, 186, 49, 62, 28, 178, 105, 62, 233, 104, 172, 190, 212, 133, 2, 63, 110, 75, 206, 190, 140, 48, 138, 191, 208, 61, 32, 191, 49, 19, 222, 190, 108, 64, 7, 63, 38, 150, 178, 61, 239, 211, 157, 190, 234, 94, 83, 191, 12, 21, 132, 188, 185, 85, 246, 190, 71, 29, 61, 62, 156, 212, 169, 190, 181, 0, 195, 62, 61, 96, 134, 63, 132, 31, 222, 62, 106, 196, 44, 62, 192, 132, 160, 62, 171, 19, 28, 191, 98, 208, 105, 63, 231, 22, 149, 191, 128, 204, 153, 190, 87, 224, 91, 63, 118, 25, 107, 63, 111, 3, 164, 62, 193, 63, 139, 190, 15, 218, 190, 63, 199, 22, 146, 62, 87, 50, 22, 190, 239, 50, 19, 62, 165, 254, 158, 190, 105, 127, 124, 62, 157, 191, 87, 63, 91, 76, 217, 62, 59, 192, 172, 190, 235, 253, 229, 191, 111, 205, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 165, 77, 191, 165, 4, 213, 190, 196, 179, 144, 190, 83, 221, 153, 189, 15, 34, 52, 62, 178, 237, 155, 190, 179, 233, 200, 190, 111, 92, 30, 63, 166, 7, 180, 190, 142, 218, 108, 60, 229, 73, 133, 62, 178, 77, 91, 62, 155, 146, 34, 191, 86, 179, 6, 62, 56, 57, 133, 190, 244, 133, 41, 63, 120, 90, 158, 187, 8, 229, 14, 63, 216, 121, 250, 61, 67, 88, 222, 190, 85, 149, 149, 188, 152, 189, 210, 190, 197, 231, 172, 62, 131, 105, 210, 62, 15, 240, 208, 189, 30, 228, 217, 61, 11, 1, 193, 62, 162, 186, 252, 190, 158, 18, 142, 190, 182, 245, 43, 190, 38, 78, 119, 62, 133, 194, 11, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 99, 42, 236, 61, 88, 196, 51, 191, 230, 96, 152, 190, 220, 232, 187, 61, 187, 232, 95, 190, 171, 188, 20, 63, 12, 105, 145, 189, 253, 201, 106, 188, 29, 69, 8, 61, 132, 35, 189, 61, 41, 27, 96, 62, 56, 5, 218, 60, 168, 249, 74, 190, 142, 150, 19, 190, 65, 150, 53, 190, 124, 27, 131, 62, 173, 103, 155, 190, 109, 228, 157, 61, 234, 27, 154, 60, 106, 250, 121, 189, 157, 9, 1, 191, 99, 120, 52, 190, 42, 179, 255, 61, 202, 231, 20, 190, 138, 218, 152, 190, 121, 80, 169, 62, 247, 47, 166, 62, 72, 74, 249, 190, 74, 249, 172, 190, 150, 140, 193, 190, 6, 157, 7, 61, 186, 84, 97, 190, 186, 7, 137, 61, 212, 178, 92, 189, 147, 4, 215, 61, 185, 57, 230, 59, 157, 19, 50, 190, 74, 32, 207, 59, 25, 69, 201, 189, 132, 150, 55, 61, 115, 83, 51, 61, 176, 3, 121, 62, 175, 211, 229, 62, 166, 157, 141, 61, 241, 63, 201, 60, 2, 248, 54, 62, 111, 233, 244, 61, 74, 104, 69, 61, 232, 209, 143, 60, 217, 231, 58, 61, 108, 248, 37, 190, 160, 156, 55, 61, 230, 224, 65, 62, 183, 92, 85, 190, 131, 172, 204, 62, 120, 173, 188, 190, 38, 117, 83, 62, 128, 162, 35, 190, 26, 66, 170, 61, 37, 247, 212, 61, 96, 125, 52, 190, 210, 161, 47, 190, 57, 74, 164, 62, 249, 51, 193, 62, 159, 210, 133, 61, 187, 76, 30, 62, 81, 192, 51, 191, 52, 76, 170, 60, 140, 85, 118, 190, 246, 73, 141, 62, 58, 135, 91, 191, 163, 167, 36, 62, 130, 89, 138, 61, 24, 119, 83, 62, 152, 144, 43, 62, 223, 77, 219, 189, 28, 74, 174, 190, 222, 220, 11, 191, 33, 212, 225, 189, 184, 91, 128, 190, 83, 85, 244, 190, 15, 31, 178, 62, 27, 149, 159, 190, 3, 230, 40, 62, 240, 120, 162, 188, 249, 203, 12, 190, 217, 179, 90, 189, 132, 179, 82, 190, 6, 241, 168, 190, 120, 185, 36, 62, 7, 17, 195, 62, 61, 166, 55, 191, 66, 109, 126, 190, 194, 19, 103, 190, 22, 225, 52, 60, 197, 64, 145, 189, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 182, 74, 1, 61, 101, 148, 149, 62, 45, 232, 47, 189, 241, 134, 165, 61, 218, 218, 202, 62, 95, 226, 239, 60, 222, 167, 177, 62, 20, 144, 210, 58, 160, 167, 163, 189, 223, 88, 62, 61, 159, 2, 92, 191, 143, 8, 130, 190, 31, 132, 125, 62, 122, 27, 23, 190, 109, 138, 34, 189, 33, 194, 186, 189, 164, 242, 197, 189, 108, 180, 156, 189, 199, 155, 102, 190, 35, 245, 177, 189, 66, 135, 67, 62, 195, 142, 139, 62, 59, 137, 115, 190, 34, 169, 76, 62, 168, 172, 235, 61, 202, 1, 80, 59, 27, 132, 176, 190, 34, 189, 204, 61, 28, 114, 201, 62, 54, 247, 92, 62, 181, 5, 57, 62, 203, 108, 5, 189, 177, 64, 86, 190, 252, 41, 7, 190, 237, 82, 43, 190, 162, 219, 96, 61, 190, 214, 0, 189, 185, 116, 1, 62, 107, 29, 98, 62, 35, 76, 44, 62, 33, 51, 194, 189, 197, 85, 76, 62, 238, 157, 162, 190, 126, 156, 87, 61, 109, 205, 96, 189, 121, 132, 113, 187, 17, 189, 89, 189, 163, 203, 32, 61, 31, 191, 20, 189, 57, 117, 128, 190, 82, 20, 77, 61, 57, 150, 21, 190, 4, 249, 142, 190, 164, 143, 228, 61, 234, 201, 123, 189, 55, 237, 34, 62, 48, 243, 188, 189, 232, 158, 8, 62, 130, 146, 204, 61, 4, 16, 178, 189, 178, 212, 143, 190, 222, 127, 68, 191, 160, 115, 56, 190, 225, 230, 105, 191, 155, 6, 146, 190, 166, 61, 13, 191, 155, 107, 24, 191, 26, 245, 24, 62, 16, 39, 138, 191, 131, 172, 101, 190, 121, 241, 228, 190, 231, 11, 120, 190, 119, 244, 134, 61, 230, 179, 155, 190, 112, 152, 130, 62, 155, 66, 187, 188, 9, 171, 0, 191, 2, 80, 144, 190, 5, 31, 223, 61, 236, 124, 85, 62, 126, 228, 133, 60, 178, 228, 134, 62, 115, 95, 28, 190, 158, 84, 56, 190, 47, 207, 36, 191, 133, 58, 5, 63, 70, 48, 186, 62, 95, 138, 160, 190, 142, 241, 131, 190, 68, 84, 227, 189, 112, 166, 220, 62, 230, 190, 39, 191, 75, 102, 11, 62, 122, 5, 64, 191, 119, 40, 11, 190, 126, 63, 192, 188, 181, 237, 164, 188, 197, 57, 7, 190, 131, 183, 30, 62, 153, 109, 25, 61, 82, 150, 160, 61, 12, 199, 62, 189, 202, 189, 223, 60, 56, 250, 135, 189, 244, 166, 232, 189, 195, 245, 136, 60, 52, 173, 75, 62, 6, 49, 81, 62, 22, 201, 99, 62, 71, 101, 98, 61, 246, 43, 33, 60, 182, 46, 174, 62, 117, 62, 56, 62, 7, 106, 140, 62, 204, 181, 197, 62, 128, 38, 212, 189, 11, 193, 177, 61, 99, 100, 206, 190, 172, 230, 129, 62, 232, 46, 89, 62, 55, 74, 141, 61, 239, 255, 58, 60, 15, 156, 145, 61, 42, 230, 134, 62, 168, 240, 95, 189, 213, 230, 56, 62, 170, 207, 102, 62, 40, 11, 186, 62, 83, 193, 8, 190, 100, 79, 118, 191, 141, 234, 250, 190, 150, 203, 214, 61, 251, 182, 52, 191, 229, 57, 244, 188, 116, 50, 255, 190, 5, 61, 237, 189, 25, 197, 27, 190, 226, 170, 69, 190, 53, 3, 183, 189, 206, 204, 117, 61, 190, 192, 252, 190, 239, 165, 176, 190, 83, 203, 162, 189, 138, 143, 161, 62, 213, 81, 164, 190, 33, 199, 24, 62, 145, 254, 215, 190, 65, 129, 134, 61, 229, 102, 94, 191, 93, 239, 160, 189, 208, 23, 129, 62, 32, 45, 163, 189, 151, 147, 159, 190, 18, 149, 220, 189, 59, 165, 157, 62, 229, 113, 30, 191, 212, 108, 158, 190, 129, 251, 89, 191, 36, 207, 146, 61, 137, 75, 178, 190, 30, 179, 91, 62, 92, 188, 126, 190, 50, 63, 191, 190, 39, 59, 177, 60, 10, 26, 192, 190, 56, 80, 14, 62, 114, 165, 59, 190, 224, 148, 186, 189, 82, 151, 12, 62, 87, 73, 180, 188, 25, 177, 170, 190, 154, 95, 53, 62, 174, 79, 141, 190, 252, 220, 216, 61, 255, 78, 146, 62, 96, 202, 58, 62, 148, 160, 241, 187, 242, 196, 17, 62, 101, 87, 94, 62, 226, 208, 114, 190, 78, 121, 185, 190, 36, 160, 207, 62, 62, 159, 63, 61, 145, 220, 111, 189, 131, 90, 33, 61, 223, 210, 32, 62, 184, 132, 233, 62, 106, 226, 213, 190, 34, 180, 167, 188, 62, 229, 178, 190, 52, 124, 73, 62, 209, 91, 77, 191, 9, 161, 133, 61, 13, 178, 166, 190, 61, 4, 45, 190, 131, 17, 155, 61, 216, 17, 174, 190, 167, 112, 16, 62, 240, 155, 104, 190, 196, 8, 35, 61, 230, 33, 221, 189, 7, 223, 110, 62, 51, 80, 175, 189, 50, 168, 55, 60, 153, 250, 137, 190, 222, 254, 120, 62, 66, 13, 112, 62, 1, 41, 139, 61, 133, 58, 108, 61, 188, 177, 6, 61, 237, 169, 35, 61, 88, 69, 94, 190, 39, 110, 176, 190, 178, 231, 208, 62, 137, 190, 252, 61, 188, 12, 111, 190, 77, 181, 160, 61, 233, 129, 49, 62, 26, 57, 246, 62, 119, 87, 20, 191, 119, 106, 120, 62, 177, 59, 15, 191, 163, 17, 218, 59, 53, 147, 214, 190, 166, 33, 32, 62, 79, 6, 223, 61, 137, 136, 25, 190, 105, 126, 161, 61, 8, 160, 168, 60, 30, 39, 218, 188, 83, 212, 45, 190, 81, 131, 25, 62, 4, 89, 207, 189, 17, 179, 148, 61, 209, 163, 226, 60, 176, 148, 161, 61, 230, 69, 92, 189, 114, 178, 232, 60, 242, 27, 1, 190, 69, 168, 141, 62, 84, 250, 105, 190, 217, 63, 213, 61, 92, 224, 42, 62, 81, 45, 131, 189, 247, 227, 169, 189, 82, 12, 83, 190, 39, 41, 137, 61, 52, 52, 45, 62, 22, 25, 100, 61, 130, 36, 238, 61, 106, 1, 249, 188, 13, 117, 132, 190, 199, 185, 86, 189, 65, 209, 145, 190, 247, 150, 248, 61, 190, 151, 98, 190, 111, 33, 93, 190, 251, 73, 23, 190, 209, 16, 212, 62, 51, 4, 243, 60, 233, 40, 86, 62, 83, 71, 194, 190, 31, 51, 2, 62, 240, 84, 212, 61, 109, 197, 50, 62, 24, 80, 67, 190, 17, 40, 120, 189, 135, 3, 118, 62, 253, 42, 209, 62, 46, 245, 133, 189, 160, 206, 181, 190, 70, 44, 169, 61, 131, 178, 1, 61, 27, 166, 22, 189, 239, 67, 202, 188, 150, 66, 1, 62, 206, 255, 126, 190, 189, 131, 198, 190, 223, 14, 94, 60, 157, 207, 153, 62, 94, 37, 171, 62, 105, 14, 156, 61, 84, 198, 229, 190, 156, 4, 248, 62, 57, 22, 168, 190, 98, 72, 174, 189, 108, 226, 7, 190, 175, 49, 131, 190, 4, 138, 25, 189, 38, 177, 53, 190, 63, 153, 183, 62, 183, 242, 164, 188, 184, 57, 197, 190, 9, 160, 216, 190, 64, 114, 122, 62, 143, 235, 104, 190, 25, 44, 88, 61, 231, 94, 171, 189, 206, 12, 22, 191, 13, 162, 241, 61, 227, 173, 126, 62, 254, 35, 98, 62, 119, 41, 62, 62, 134, 239, 92, 190, 81, 233, 107, 189, 27, 243, 103, 60, 234, 113, 228, 61, 98, 191, 38, 60, 78, 173, 221, 61, 164, 61, 123, 62, 236, 59, 61, 191, 37, 214, 239, 190, 158, 195, 150, 61, 21, 208, 241, 189, 220, 248, 30, 191, 142, 157, 173, 62, 13, 73, 242, 188, 193, 112, 245, 188, 146, 95, 20, 62, 93, 218, 113, 61, 33, 248, 201, 190, 79, 214, 101, 62, 236, 117, 27, 62, 72, 71, 106, 188, 179, 193, 132, 61, 200, 128, 221, 190, 46, 146, 39, 62, 250, 68, 160, 61, 8, 159, 104, 189, 113, 243, 121, 190, 212, 158, 128, 190, 115, 185, 27, 62, 160, 177, 165, 62, 169, 219, 236, 189, 132, 127, 14, 62, 247, 174, 157, 189, 140, 189, 45, 61, 127, 20, 110, 190, 46, 85, 213, 61, 103, 133, 196, 186, 254, 88, 131, 62, 225, 102, 48, 62, 188, 11, 90, 61, 56, 212, 86, 62, 39, 59, 203, 59, 214, 145, 188, 190, 219, 246, 214, 190, 4, 218, 217, 62, 194, 25, 173, 62, 158, 221, 35, 62, 145, 135, 73, 186, 53, 15, 70, 62, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 105, 99, 129, 61, 209, 151, 14, 190, 214, 22, 198, 189, 213, 9, 46, 190, 22, 105, 34, 190, 45, 122, 51, 190, 172, 30, 84, 189, 7, 12, 84, 61, 6, 130, 34, 61, 194, 141, 30, 190, 167, 208, 121, 59, 213, 74, 236, 61, 126, 206, 116, 59, 243, 206, 135, 189, 81, 37, 138, 187, 71, 70, 238, 189, 220, 203, 232, 189, 5, 249, 56, 190, 70, 122, 38, 62, 225, 89, 14, 190, 49, 78, 176, 61, 172, 247, 61, 189, 146, 42, 0, 187, 91, 207, 167, 189, 211, 65, 151, 61, 44, 19, 35, 62, 9, 49, 133, 189, 121, 72, 113, 61, 187, 247, 167, 61, 37, 109, 16, 190, 179, 39, 154, 190, 106, 203, 108, 188, 88, 189, 78, 190, 148, 122, 35, 191, 157, 160, 210, 61, 176, 61, 68, 191, 166, 99, 242, 190, 168, 237, 244, 61, 242, 76, 168, 60, 76, 242, 16, 191, 165, 253, 168, 62, 194, 206, 246, 190, 31, 175, 176, 60, 44, 154, 172, 191, 76, 69, 42, 187, 197, 109, 219, 62, 42, 73, 46, 190, 40, 10, 172, 188, 96, 59, 170, 190, 191, 9, 204, 190, 176, 240, 86, 62, 14, 21, 50, 190, 58, 154, 131, 62, 73, 42, 163, 62, 97, 154, 158, 191, 251, 220, 129, 190, 160, 94, 134, 190, 62, 196, 154, 190, 93, 206, 29, 63, 211, 27, 13, 190, 158, 17, 157, 190, 139, 154, 62, 62, 55, 37, 232, 189, 17, 141, 167, 61, 201, 138, 147, 62, 178, 35, 171, 60, 253, 210, 208, 62, 75, 30, 12, 191, 0, 173, 31, 188, 214, 145, 207, 61, 35, 160, 72, 189, 171, 36, 146, 190, 87, 242, 14, 189, 193, 228, 73, 62, 144, 50, 19, 62, 66, 180, 52, 62, 88, 46, 248, 189, 229, 157, 142, 188, 187, 78, 227, 61, 60, 42, 142, 61, 202, 205, 210, 62, 166, 154, 203, 61, 47, 29, 58, 190, 121, 53, 173, 190, 51, 48, 202, 187, 55, 116, 104, 62, 17, 199, 217, 61, 135, 175, 25, 189, 236, 161, 93, 190, 214, 147, 31, 62, 151, 101, 146, 188, 249, 116, 69, 62, 151, 136, 6, 62, 241, 234, 155, 190, 108, 212, 111, 190, 44, 249, 0, 62, 62, 127, 200, 62, 79, 132, 252, 190, 27, 37, 215, 59, 217, 139, 7, 191, 237, 69, 199, 190, 102, 120, 128, 62, 211, 248, 21, 189, 133, 217, 25, 61, 100, 145, 185, 62, 56, 148, 67, 62, 69, 69, 15, 190, 112, 117, 21, 62, 134, 198, 109, 191, 175, 227, 40, 62, 79, 155, 31, 191, 153, 184, 4, 189, 112, 8, 217, 62, 102, 213, 4, 62, 243, 89, 245, 61, 175, 254, 20, 191, 53, 154, 195, 62, 178, 20, 136, 62, 40, 143, 98, 62, 164, 243, 89, 190, 251, 4, 141, 190, 62, 197, 107, 62, 120, 253, 133, 191, 183, 223, 13, 62, 59, 139, 103, 190, 82, 65, 43, 62, 137, 207, 139, 62, 113, 45, 49, 189, 70, 245, 116, 190, 208, 140, 193, 60, 113, 147, 167, 190, 29, 94, 248, 62, 117, 19, 128, 190, 229, 34, 88, 190, 75, 44, 140, 189, 50, 78, 139, 62, 25, 85, 101, 190, 18, 184, 129, 190, 153, 120, 216, 190, 196, 71, 21, 62, 44, 48, 7, 63, 115, 37, 107, 61, 172, 62, 168, 62, 190, 168, 242, 61, 147, 182, 16, 190, 180, 198, 23, 190, 204, 60, 226, 189, 69, 135, 176, 62, 56, 140, 131, 190, 51, 94, 108, 61, 238, 48, 177, 189, 46, 21, 145, 62, 181, 247, 163, 62, 203, 127, 0, 191, 109, 185, 145, 62, 27, 12, 56, 190, 137, 94, 137, 62, 106, 135, 226, 190, 252, 188, 207, 190, 232, 101, 65, 62, 121, 242, 122, 62, 21, 3, 193, 190, 88, 41, 138, 62, 255, 90, 31, 191, 40, 142, 66, 189, 251, 134, 100, 62, 101, 109, 40, 190, 190, 16, 3, 190, 70, 103, 245, 62, 114, 244, 118, 62, 26, 111, 218, 189, 241, 77, 163, 62, 80, 107, 90, 190, 189, 177, 165, 61, 60, 112, 58, 190, 160, 53, 50, 189, 49, 60, 4, 63, 163, 183, 144, 189, 87, 254, 186, 61, 58, 251, 137, 190, 27, 248, 61, 62, 202, 73, 73, 62, 188, 82, 34, 62, 195, 44, 163, 189, 201, 96, 56, 190, 107, 19, 47, 62, 36, 166, 201, 190, 232, 3, 7, 189, 196, 62, 3, 190, 125, 233, 104, 61, 226, 67, 191, 190, 52, 18, 18, 61, 129, 56, 211, 190, 224, 224, 72, 62, 17, 52, 215, 190, 59, 205, 37, 191, 201, 18, 151, 190, 147, 47, 222, 190, 251, 129, 20, 62, 174, 30, 26, 191, 85, 11, 190, 190, 96, 46, 25, 190, 226, 74, 233, 190, 77, 7, 231, 189, 166, 51, 182, 62, 8, 223, 223, 62, 119, 14, 169, 62, 192, 120, 203, 189, 221, 200, 201, 190, 103, 116, 139, 190, 202, 241, 234, 190, 194, 209, 178, 62, 62, 208, 20, 62, 93, 215, 227, 189, 59, 231, 121, 189, 129, 76, 97, 60, 117, 45, 38, 63, 92, 207, 28, 191, 241, 71, 210, 62, 96, 49, 157, 190, 94, 59, 148, 62, 70, 232, 87, 191, 104, 115, 224, 62, 109, 203, 48, 190, 80, 103, 85, 188, 90, 88, 154, 61, 196, 111, 115, 61, 28, 208, 240, 61, 15, 170, 115, 189, 243, 173, 144, 61, 245, 167, 152, 61, 208, 113, 147, 62, 131, 232, 55, 190, 116, 21, 98, 189, 234, 136, 198, 190, 148, 115, 9, 62, 127, 196, 13, 62, 255, 184, 107, 61, 124, 36, 36, 62, 196, 30, 189, 61, 107, 214, 130, 190, 0, 7, 196, 189, 50, 209, 69, 190, 179, 165, 221, 62, 217, 107, 8, 190, 107, 154, 179, 189, 16, 118, 15, 190, 44, 106, 122, 62, 120, 210, 145, 62, 117, 149, 151, 190, 188, 141, 167, 62, 249, 221, 240, 190, 31, 128, 225, 61, 253, 146, 223, 190, 124, 235, 0, 62, 51, 211, 158, 61, 195, 27, 80, 61, 198, 216, 212, 189, 73, 140, 128, 61, 198, 125, 20, 62, 210, 11, 120, 60, 122, 79, 84, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 131, 89, 1, 190, 58, 128, 184, 189, 97, 140, 178, 61, 56, 47, 225, 188, 16, 74, 201, 60, 151, 93, 234, 61, 169, 45, 213, 189, 102, 18, 29, 61, 118, 140, 15, 190, 13, 225, 190, 60, 249, 228, 100, 189, 6, 92, 52, 190, 0, 230, 220, 189, 119, 182, 36, 190, 157, 42, 38, 61, 31, 226, 88, 188, 172, 50, 142, 189, 129, 202, 106, 61, 148, 2, 70, 190, 89, 227, 34, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 110, 196, 38, 190, 250, 212, 13, 62, 86, 2, 162, 189, 140, 46, 26, 189, 101, 252, 172, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 236, 246, 51, 189, 81, 246, 135, 59, 179, 80, 1, 190, 227, 67, 171, 189, 108, 71, 210, 189, 220, 92, 38, 190, 183, 134, 75, 61, 136, 141, 11, 190, 16, 136, 224, 61, 73, 167, 143, 60, 60, 184, 176, 189, 63, 206, 182, 61, 235, 90, 0, 62, 150, 172, 50, 58, 44, 155, 109, 189, 84, 175, 168, 60, 85, 168, 57, 61, 245, 71, 91, 190, 97, 101, 95, 190, 228, 145, 54, 190, 150, 230, 241, 61, 214, 233, 43, 188, 68, 221, 134, 190, 214, 91, 28, 189, 10, 42, 113, 62, 88, 171, 210, 190, 111, 94, 80, 62, 5, 60, 252, 190, 99, 27, 36, 190, 39, 127, 232, 61, 179, 203, 51, 188, 54, 6, 110, 189, 210, 205, 24, 62, 118, 102, 190, 62, 37, 166, 232, 60, 241, 50, 120, 61, 255, 110, 102, 190, 75, 102, 188, 61, 90, 37, 247, 189, 208, 189, 236, 188, 159, 165, 236, 62, 21, 158, 185, 61, 172, 122, 136, 62, 190, 241, 222, 190, 128, 25, 155, 188, 42, 156, 22, 62, 60, 189, 129, 61, 114, 81, 54, 190, 106, 30, 164, 189, 141, 188, 15, 62, 224, 88, 59, 190, 62, 233, 19, 62, 90, 43, 13, 190, 106, 122, 226, 189, 63, 165, 194, 62, 127, 128, 146, 188, 29, 29, 207, 190, 53, 211, 119, 62, 84, 115, 189, 58, 195, 103, 76, 62, 5, 32, 221, 190, 212, 127, 39, 190, 79, 4, 34, 189, 148, 37, 133, 60, 40, 67, 105, 190, 57, 234, 104, 62, 136, 63, 28, 190, 138, 20, 125, 186, 32, 236, 70, 190, 248, 221, 253, 61, 87, 93, 157, 190, 194, 227, 193, 61, 45, 101, 33, 61, 95, 64, 21, 62, 228, 69, 68, 189, 216, 199, 18, 190, 70, 145, 148, 188, 88, 200, 25, 62, 84, 50, 14, 190, 41, 234, 143, 62, 16, 64, 160, 62, 79, 11, 242, 190, 103, 63, 207, 190, 154, 253, 214, 190, 18, 97, 0, 62, 189, 32, 158, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 9, 70, 181, 62, 249, 44, 172, 190, 230, 98, 1, 190, 113, 120, 54, 62, 18, 13, 43, 62, 192, 207, 174, 190, 62, 84, 164, 189, 203, 189, 172, 189, 70, 210, 2, 190, 128, 45, 42, 190, 132, 13, 147, 190, 20, 47, 46, 61, 168, 208, 104, 189, 87, 166, 39, 188, 185, 125, 48, 62, 27, 182, 150, 62, 255, 69, 152, 62, 50, 7, 103, 189, 186, 103, 189, 62, 162, 161, 50, 62, 97, 57, 110, 189, 167, 180, 74, 190, 103, 42, 241, 61, 35, 12, 222, 189, 28, 91, 27, 62, 229, 10, 149, 62, 193, 42, 59, 60, 15, 250, 34, 62, 132, 167, 24, 188, 230, 129, 244, 60, 72, 231, 102, 62, 101, 109, 177, 191, 137, 135, 149, 190, 13, 212, 4, 61, 130, 110, 184, 62, 174, 169, 30, 191, 15, 25, 160, 62, 92, 17, 8, 191, 102, 68, 64, 62, 11, 131, 152, 62, 91, 155, 67, 60, 110, 6, 166, 190, 136, 21, 246, 61, 53, 168, 177, 62, 159, 27, 192, 62, 75, 185, 15, 63, 73, 50, 87, 191, 107, 68, 62, 62, 47, 136, 95, 191, 112, 16, 164, 190, 133, 130, 217, 62, 94, 87, 40, 190, 66, 204, 40, 189, 27, 60, 220, 61, 19, 191, 249, 60, 213, 27, 169, 62, 161, 197, 160, 190, 189, 81, 2, 190, 75, 207, 218, 190, 52, 244, 115, 190, 189, 52, 117, 191, 83, 234, 98, 62, 229, 222, 134, 191, 222, 142, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 196, 7, 84, 62, 117, 32, 239, 61, 122, 228, 171, 189, 219, 220, 50, 190, 28, 55, 19, 60, 149, 89, 158, 62, 70, 205, 149, 60, 202, 241, 197, 62, 124, 33, 60, 62, 208, 146, 4, 62, 145, 202, 167, 62, 213, 40, 150, 62, 81, 98, 162, 59, 54, 83, 193, 190, 118, 160, 33, 190, 233, 207, 149, 61, 201, 169, 211, 61, 239, 156, 105, 62, 102, 17, 2, 62, 33, 60, 88, 62, 44, 116, 180, 61, 65, 89, 2, 62, 115, 237, 201, 62, 53, 19, 9, 62, 182, 39, 201, 187, 104, 115, 17, 190, 29, 187, 141, 62, 100, 219, 21, 61, 255, 58, 37, 190, 199, 102, 43, 60, 168, 167, 181, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 206, 92, 241, 62, 232, 135, 100, 190, 178, 7, 182, 62, 190, 128, 139, 60, 210, 152, 245, 62, 89, 1, 64, 62, 131, 62, 115, 63, 244, 117, 126, 190, 152, 171, 126, 63, 84, 39, 165, 62, 169, 12, 236, 62, 159, 181, 222, 188, 58, 143, 32, 191, 47, 153, 236, 62, 191, 159, 19, 63, 73, 6, 171, 60, 39, 119, 14, 62, 238, 23, 137, 63, 147, 58, 33, 190, 99, 134, 58, 191, 220, 108, 241, 62, 102, 19, 38, 191, 32, 254, 135, 63, 154, 141, 184, 62, 153, 71, 1, 61, 217, 234, 220, 189, 132, 155, 165, 190, 37, 171, 17, 62, 188, 197, 185, 189, 183, 106, 87, 190, 253, 159, 181, 191, 81, 214, 233, 61, 194, 196, 137, 61, 57, 52, 29, 190, 46, 100, 247, 62, 67, 134, 230, 189, 83, 195, 73, 189, 29, 241, 2, 191, 142, 12, 130, 62, 222, 53, 97, 190, 237, 205, 149, 190, 208, 244, 167, 190, 161, 235, 25, 190, 4, 94, 108, 190, 167, 169, 54, 62, 233, 1, 142, 62, 129, 46, 246, 189, 133, 96, 171, 61, 127, 71, 0, 62, 31, 55, 0, 62, 141, 220, 133, 61, 6, 246, 23, 62, 59, 100, 187, 62, 63, 37, 251, 61, 82, 64, 199, 62, 12, 101, 92, 190, 208, 61, 10, 189, 67, 182, 31, 190, 155, 154, 183, 189, 142, 75, 1, 191, 203, 145, 20, 190, 178, 51, 172, 189, 239, 29, 60, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 18, 177, 189, 201, 230, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {79, 117, 83, 64, 178, 27, 15, 63, 148, 9, 207, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 127, 150, 192, 174, 233, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}