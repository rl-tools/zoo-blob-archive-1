// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 213, 221, 62, 135, 150, 72, 190, 33, 154, 44, 191, 45, 198, 73, 191, 55, 120, 194, 190, 61, 200, 15, 191, 45, 129, 29, 63, 10, 227, 149, 63, 70, 56, 148, 62, 236, 97, 178, 190, 109, 164, 69, 190, 42, 105, 30, 63, 166, 168, 15, 190, 229, 115, 147, 62, 225, 198, 184, 190, 174, 52, 53, 63, 110, 106, 82, 191, 43, 134, 207, 190, 204, 83, 244, 62, 229, 62, 59, 63, 190, 120, 110, 62, 37, 110, 16, 190, 95, 59, 221, 190, 66, 227, 170, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 27, 157, 49, 63, 118, 222, 128, 191, 24, 104, 188, 190, 47, 249, 48, 190, 57, 45, 175, 191, 81, 15, 129, 61, 178, 59, 58, 63, 70, 22, 149, 63, 17, 202, 174, 61, 166, 254, 58, 63, 168, 87, 27, 63, 183, 185, 151, 62, 171, 182, 64, 62, 165, 230, 157, 63, 152, 161, 101, 62, 218, 112, 202, 190, 89, 78, 176, 63, 245, 174, 135, 62, 76, 75, 172, 190, 21, 174, 200, 61, 128, 94, 129, 61, 109, 213, 250, 189, 83, 111, 142, 63, 18, 22, 186, 62, 237, 45, 147, 190, 151, 36, 68, 191, 215, 217, 231, 62, 51, 216, 183, 62, 45, 189, 133, 63, 61, 125, 53, 62, 102, 44, 208, 62, 86, 98, 199, 190, 143, 64, 244, 62, 193, 225, 179, 190, 15, 216, 165, 191, 39, 118, 35, 191, 142, 135, 21, 191, 133, 69, 18, 63, 222, 189, 231, 61, 103, 117, 146, 190, 15, 60, 143, 191, 175, 81, 190, 61, 197, 171, 253, 190, 69, 187, 136, 62, 151, 41, 174, 190, 63, 168, 175, 62, 37, 188, 137, 63, 64, 249, 229, 62, 172, 121, 57, 62, 252, 140, 195, 62, 176, 45, 35, 191, 122, 206, 103, 63, 251, 112, 157, 191, 112, 15, 129, 190, 223, 196, 86, 63, 226, 140, 119, 63, 24, 178, 161, 62, 83, 143, 187, 190, 229, 9, 196, 63, 94, 113, 154, 62, 133, 94, 176, 189, 25, 27, 129, 62, 94, 17, 176, 190, 100, 112, 62, 62, 102, 15, 72, 63, 194, 149, 216, 62, 158, 25, 209, 190, 246, 193, 252, 191, 237, 146, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 124, 88, 191, 238, 225, 198, 190, 135, 200, 156, 190, 91, 25, 41, 190, 203, 218, 173, 61, 112, 7, 170, 190, 245, 31, 192, 190, 41, 58, 36, 63, 166, 7, 180, 190, 43, 235, 80, 60, 172, 107, 137, 62, 224, 124, 85, 62, 195, 156, 36, 191, 137, 236, 215, 61, 178, 50, 110, 190, 24, 182, 21, 63, 169, 173, 201, 189, 58, 133, 3, 63, 82, 110, 63, 61, 195, 137, 180, 190, 211, 239, 178, 61, 207, 63, 221, 190, 171, 58, 185, 62, 3, 249, 226, 62, 161, 68, 18, 190, 76, 122, 188, 61, 35, 40, 183, 62, 105, 108, 4, 191, 146, 135, 139, 190, 221, 184, 234, 189, 38, 224, 87, 62, 244, 248, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 245, 67, 33, 61, 121, 213, 67, 191, 23, 36, 155, 190, 69, 157, 6, 62, 149, 200, 30, 190, 247, 54, 14, 63, 5, 136, 24, 190, 72, 251, 74, 188, 29, 69, 8, 61, 143, 59, 77, 61, 107, 174, 177, 61, 170, 85, 74, 61, 245, 176, 126, 190, 26, 12, 28, 190, 232, 37, 37, 190, 164, 141, 124, 62, 198, 251, 172, 190, 68, 120, 94, 59, 171, 160, 6, 61, 0, 246, 129, 189, 206, 18, 77, 191, 130, 138, 121, 190, 104, 133, 42, 188, 220, 187, 103, 190, 21, 199, 166, 190, 252, 129, 207, 62, 38, 59, 153, 62, 63, 129, 250, 190, 43, 110, 162, 190, 54, 97, 238, 190, 126, 14, 32, 187, 85, 209, 26, 191, 87, 251, 38, 61, 171, 101, 245, 189, 74, 23, 207, 61, 96, 219, 20, 189, 118, 150, 153, 190, 55, 161, 35, 189, 220, 102, 67, 189, 31, 57, 18, 189, 115, 83, 51, 61, 154, 120, 102, 62, 249, 106, 11, 63, 142, 37, 164, 60, 125, 112, 132, 61, 127, 216, 55, 62, 153, 188, 255, 61, 93, 75, 15, 61, 99, 50, 84, 61, 153, 40, 223, 61, 69, 158, 72, 190, 180, 204, 65, 61, 247, 16, 91, 62, 169, 7, 188, 190, 183, 77, 254, 62, 125, 44, 197, 190, 184, 89, 112, 62, 65, 205, 159, 190, 244, 4, 133, 61, 9, 19, 191, 61, 3, 144, 46, 190, 204, 209, 72, 190, 219, 150, 179, 62, 16, 15, 235, 62, 119, 79, 31, 61, 138, 130, 37, 62, 213, 138, 49, 191, 107, 174, 171, 61, 227, 20, 119, 190, 9, 7, 132, 62, 64, 87, 137, 191, 91, 6, 14, 62, 130, 89, 138, 61, 208, 153, 27, 62, 123, 1, 179, 61, 127, 239, 232, 188, 211, 20, 236, 190, 248, 196, 13, 191, 179, 219, 169, 60, 43, 121, 134, 190, 18, 48, 241, 190, 131, 255, 147, 62, 238, 45, 129, 190, 154, 59, 62, 62, 145, 163, 129, 189, 188, 82, 20, 190, 136, 185, 1, 190, 132, 160, 116, 190, 25, 72, 185, 190, 209, 45, 40, 62, 11, 117, 184, 62, 45, 172, 52, 191, 97, 132, 0, 190, 230, 212, 131, 190, 227, 110, 6, 60, 174, 82, 4, 190, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 106, 31, 11, 61, 185, 223, 151, 62, 124, 45, 136, 189, 65, 0, 146, 61, 112, 16, 198, 62, 62, 25, 144, 61, 108, 190, 174, 62, 216, 196, 180, 59, 160, 167, 163, 189, 133, 174, 151, 61, 72, 180, 59, 191, 119, 13, 156, 190, 162, 103, 147, 62, 227, 10, 49, 190, 129, 207, 183, 188, 84, 206, 13, 190, 252, 28, 211, 189, 124, 118, 227, 189, 141, 142, 132, 190, 135, 34, 209, 189, 177, 103, 84, 62, 10, 18, 210, 62, 233, 246, 52, 190, 88, 112, 65, 62, 132, 174, 183, 61, 116, 236, 99, 188, 1, 137, 147, 190, 179, 189, 177, 61, 140, 154, 209, 62, 216, 31, 88, 62, 18, 32, 26, 62, 220, 7, 66, 61, 237, 99, 159, 190, 189, 122, 129, 190, 197, 223, 38, 190, 224, 88, 17, 188, 5, 129, 76, 60, 81, 78, 26, 62, 82, 142, 152, 62, 116, 251, 101, 62, 33, 51, 194, 189, 62, 98, 95, 62, 125, 247, 183, 190, 162, 106, 113, 61, 182, 62, 107, 188, 183, 218, 192, 60, 158, 14, 163, 61, 6, 196, 121, 61, 133, 151, 200, 60, 88, 90, 186, 190, 28, 207, 110, 61, 215, 163, 189, 190, 20, 113, 120, 190, 251, 222, 194, 62, 152, 163, 104, 189, 233, 163, 35, 62, 152, 119, 198, 189, 225, 93, 48, 62, 20, 150, 223, 61, 179, 58, 195, 189, 165, 36, 28, 190, 84, 108, 90, 191, 179, 228, 115, 190, 157, 36, 52, 191, 155, 6, 146, 190, 94, 79, 242, 190, 211, 46, 36, 191, 53, 87, 48, 62, 109, 171, 131, 191, 127, 103, 130, 190, 70, 141, 240, 190, 94, 100, 148, 190, 119, 244, 134, 61, 65, 28, 217, 190, 86, 37, 150, 62, 243, 42, 155, 60, 155, 139, 253, 190, 130, 151, 189, 190, 46, 64, 0, 62, 181, 203, 105, 62, 70, 140, 45, 188, 226, 201, 146, 62, 7, 220, 49, 190, 38, 32, 23, 190, 255, 232, 129, 191, 111, 208, 7, 63, 46, 167, 200, 62, 132, 160, 114, 190, 23, 141, 133, 190, 3, 2, 140, 62, 133, 62, 254, 62, 96, 139, 42, 191, 118, 5, 29, 62, 122, 5, 64, 191, 36, 199, 243, 189, 177, 136, 146, 190, 47, 15, 22, 188, 59, 251, 30, 190, 58, 135, 39, 62, 18, 117, 39, 188, 193, 170, 72, 61, 89, 230, 145, 189, 82, 227, 177, 61, 133, 15, 202, 189, 244, 166, 232, 189, 174, 242, 140, 60, 164, 122, 151, 62, 123, 42, 52, 62, 191, 126, 139, 62, 19, 147, 136, 61, 171, 147, 119, 188, 167, 219, 174, 62, 207, 231, 72, 62, 147, 230, 171, 62, 140, 137, 188, 62, 46, 212, 211, 189, 54, 126, 231, 61, 42, 188, 24, 191, 173, 107, 179, 62, 110, 154, 113, 62, 8, 172, 199, 61, 147, 94, 161, 188, 208, 69, 135, 61, 84, 36, 135, 62, 137, 179, 160, 189, 245, 157, 70, 62, 3, 10, 130, 62, 136, 85, 211, 62, 83, 193, 8, 190, 94, 134, 106, 191, 250, 121, 39, 191, 193, 93, 225, 61, 43, 166, 1, 191, 60, 74, 134, 60, 35, 41, 23, 191, 163, 25, 178, 189, 25, 197, 27, 190, 86, 90, 126, 190, 65, 248, 188, 188, 249, 151, 16, 60, 253, 37, 3, 191, 34, 211, 31, 191, 14, 189, 33, 190, 180, 19, 157, 62, 230, 39, 202, 190, 246, 156, 33, 62, 18, 239, 16, 191, 57, 25, 164, 61, 191, 17, 132, 191, 108, 5, 161, 190, 149, 232, 155, 62, 101, 130, 79, 61, 49, 218, 187, 190, 138, 249, 16, 62, 75, 91, 190, 62, 221, 19, 54, 191, 154, 140, 194, 190, 129, 251, 89, 191, 167, 111, 19, 61, 154, 153, 230, 190, 114, 20, 214, 61, 135, 30, 161, 190, 222, 32, 193, 190, 199, 191, 246, 60, 129, 180, 163, 190, 98, 253, 23, 62, 100, 169, 54, 190, 165, 99, 42, 189, 82, 151, 12, 62, 187, 144, 183, 188, 219, 5, 177, 190, 53, 139, 65, 62, 144, 88, 128, 190, 73, 83, 209, 61, 141, 201, 153, 62, 190, 246, 65, 62, 30, 119, 26, 189, 14, 35, 212, 61, 4, 204, 100, 62, 66, 240, 114, 190, 198, 246, 239, 190, 35, 125, 0, 63, 131, 101, 215, 60, 47, 67, 171, 189, 49, 176, 187, 60, 192, 114, 88, 62, 135, 106, 242, 62, 8, 135, 212, 190, 48, 174, 236, 187, 35, 252, 219, 190, 53, 189, 33, 62, 174, 15, 118, 191, 148, 76, 156, 60, 45, 45, 153, 190, 32, 56, 55, 190, 249, 215, 230, 61, 14, 79, 117, 190, 45, 113, 246, 61, 193, 14, 123, 190, 14, 86, 116, 61, 230, 33, 221, 189, 111, 87, 75, 62, 229, 244, 72, 190, 61, 173, 243, 60, 185, 67, 135, 190, 175, 104, 116, 62, 18, 49, 129, 62, 7, 161, 125, 61, 206, 190, 42, 61, 49, 63, 184, 188, 183, 154, 79, 61, 4, 38, 80, 190, 170, 214, 25, 191, 205, 27, 12, 63, 168, 41, 209, 59, 240, 166, 119, 190, 77, 77, 133, 61, 185, 223, 138, 62, 65, 83, 236, 62, 108, 216, 20, 191, 242, 131, 132, 62, 164, 71, 20, 191, 98, 94, 178, 188, 209, 31, 80, 191, 12, 243, 44, 62, 146, 127, 81, 61, 134, 180, 5, 190, 94, 139, 61, 189, 93, 150, 191, 187, 43, 8, 162, 189, 109, 192, 217, 188, 250, 94, 191, 61, 4, 89, 207, 189, 116, 235, 20, 61, 101, 154, 163, 61, 25, 178, 6, 61, 13, 142, 215, 61, 234, 91, 73, 61, 42, 79, 13, 190, 137, 244, 115, 62, 125, 253, 141, 190, 168, 131, 224, 61, 204, 252, 14, 62, 13, 14, 222, 189, 132, 221, 147, 189, 204, 205, 140, 190, 127, 199, 207, 61, 183, 61, 76, 62, 163, 21, 147, 61, 10, 142, 150, 61, 118, 217, 97, 189, 89, 7, 128, 190, 102, 185, 133, 189, 68, 175, 143, 190, 10, 86, 202, 61, 174, 12, 82, 190, 104, 52, 22, 190, 197, 199, 82, 190, 197, 4, 222, 62, 172, 20, 164, 59, 82, 71, 127, 62, 129, 9, 201, 190, 52, 155, 246, 61, 175, 176, 178, 61, 109, 197, 50, 62, 60, 98, 58, 190, 20, 181, 212, 189, 228, 98, 146, 62, 222, 171, 180, 62, 237, 31, 250, 188, 105, 78, 219, 190, 37, 68, 136, 61, 148, 121, 4, 61, 199, 79, 140, 189, 3, 19, 81, 60, 112, 41, 200, 61, 23, 150, 120, 190, 50, 8, 35, 191, 92, 197, 63, 188, 101, 141, 163, 62, 203, 198, 164, 62, 139, 77, 10, 62, 84, 248, 20, 191, 92, 135, 244, 62, 235, 79, 204, 190, 160, 80, 83, 189, 63, 155, 17, 190, 71, 194, 164, 190, 4, 138, 25, 189, 38, 177, 53, 190, 249, 226, 170, 62, 227, 235, 192, 60, 253, 137, 15, 191, 9, 160, 216, 190, 45, 120, 122, 62, 130, 46, 156, 190, 25, 44, 88, 61, 41, 53, 179, 189, 107, 144, 35, 191, 191, 107, 68, 61, 128, 153, 142, 62, 147, 55, 59, 62, 72, 67, 62, 62, 70, 72, 142, 190, 55, 251, 139, 189, 184, 111, 242, 60, 39, 21, 129, 61, 28, 60, 51, 61, 78, 173, 221, 61, 175, 126, 206, 62, 222, 133, 90, 191, 99, 46, 40, 191, 89, 238, 121, 61, 57, 63, 143, 190, 164, 247, 30, 191, 230, 62, 166, 62, 249, 25, 253, 188, 155, 230, 182, 189, 22, 90, 254, 61, 93, 218, 113, 61, 167, 190, 5, 191, 85, 165, 55, 62, 140, 34, 209, 61, 110, 65, 217, 188, 118, 54, 57, 188, 91, 67, 195, 190, 129, 33, 13, 62, 67, 56, 0, 62, 8, 159, 104, 189, 7, 105, 45, 190, 98, 26, 129, 189, 115, 192, 167, 61, 234, 79, 177, 62, 11, 233, 27, 190, 251, 51, 13, 62, 160, 90, 227, 189, 150, 163, 164, 60, 29, 26, 134, 190, 150, 172, 91, 61, 75, 75, 186, 188, 151, 244, 122, 62, 150, 249, 162, 62, 244, 3, 218, 61, 223, 204, 76, 62, 107, 160, 22, 189, 113, 143, 252, 190, 196, 247, 81, 190, 78, 215, 199, 62, 140, 168, 171, 62, 15, 68, 167, 61, 106, 53, 67, 189, 113, 42, 194, 62, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 49, 13, 120, 61, 169, 209, 14, 190, 214, 22, 198, 189, 6, 117, 46, 190, 85, 126, 35, 190, 93, 103, 52, 190, 172, 30, 84, 189, 113, 246, 77, 61, 6, 130, 34, 61, 36, 196, 35, 190, 96, 72, 36, 59, 42, 12, 231, 61, 126, 206, 116, 59, 120, 64, 140, 189, 217, 79, 184, 187, 143, 96, 242, 189, 189, 252, 238, 189, 180, 35, 57, 190, 70, 122, 38, 62, 225, 89, 14, 190, 49, 78, 176, 61, 172, 247, 61, 189, 113, 91, 149, 187, 91, 207, 167, 189, 129, 149, 142, 61, 39, 95, 32, 62, 9, 49, 133, 189, 121, 72, 113, 61, 120, 25, 161, 61, 37, 109, 16, 190, 202, 73, 166, 190, 228, 4, 156, 59, 88, 189, 78, 190, 41, 120, 31, 191, 192, 66, 247, 60, 61, 165, 33, 191, 166, 99, 242, 190, 241, 219, 251, 61, 242, 76, 168, 60, 145, 41, 5, 191, 188, 164, 214, 62, 68, 121, 31, 191, 31, 175, 176, 60, 251, 182, 175, 191, 164, 248, 59, 189, 207, 55, 228, 62, 123, 91, 216, 189, 239, 237, 239, 188, 85, 255, 211, 190, 36, 230, 244, 190, 115, 142, 143, 62, 28, 175, 51, 190, 81, 253, 191, 62, 166, 217, 154, 62, 20, 86, 158, 191, 245, 176, 178, 190, 239, 86, 144, 190, 62, 196, 154, 190, 138, 12, 20, 63, 188, 75, 126, 190, 20, 121, 23, 190, 24, 253, 156, 62, 39, 92, 151, 189, 3, 251, 223, 61, 154, 21, 129, 62, 181, 31, 246, 58, 110, 255, 213, 62, 81, 60, 26, 191, 11, 67, 175, 188, 236, 168, 128, 61, 35, 160, 72, 189, 1, 74, 169, 190, 98, 227, 139, 189, 213, 204, 31, 62, 197, 40, 206, 61, 16, 69, 31, 62, 240, 134, 22, 190, 213, 123, 48, 189, 64, 189, 5, 62, 89, 192, 128, 61, 156, 105, 190, 62, 183, 196, 171, 61, 0, 35, 29, 190, 59, 163, 243, 190, 13, 209, 236, 188, 71, 167, 143, 62, 27, 23, 191, 61, 147, 53, 173, 188, 198, 84, 150, 190, 166, 9, 213, 61, 40, 230, 46, 189, 254, 125, 114, 62, 236, 126, 2, 62, 119, 30, 171, 190, 248, 192, 107, 190, 63, 196, 240, 61, 101, 208, 188, 62, 3, 100, 36, 191, 34, 190, 173, 188, 174, 7, 12, 191, 245, 62, 182, 190, 9, 29, 108, 62, 211, 248, 21, 189, 123, 191, 45, 61, 100, 158, 245, 62, 215, 125, 26, 62, 240, 225, 188, 189, 33, 171, 249, 61, 62, 70, 113, 191, 100, 5, 37, 62, 184, 156, 54, 191, 123, 106, 126, 61, 9, 220, 198, 62, 58, 81, 206, 61, 92, 107, 19, 62, 62, 36, 248, 190, 248, 56, 251, 62, 57, 32, 145, 62, 139, 205, 93, 62, 65, 76, 119, 190, 253, 10, 134, 190, 148, 138, 92, 62, 25, 52, 138, 191, 252, 230, 25, 62, 68, 106, 90, 190, 117, 103, 99, 62, 156, 3, 85, 62, 3, 225, 154, 189, 205, 242, 133, 190, 55, 118, 142, 61, 144, 166, 177, 190, 185, 32, 240, 62, 107, 195, 153, 190, 145, 246, 94, 190, 75, 44, 140, 189, 139, 203, 125, 62, 48, 254, 208, 190, 236, 50, 131, 190, 67, 6, 0, 191, 138, 96, 254, 61, 37, 28, 16, 63, 0, 89, 17, 61, 195, 43, 179, 62, 115, 34, 5, 61, 137, 103, 24, 190, 145, 87, 54, 190, 215, 118, 77, 190, 213, 15, 11, 63, 57, 128, 228, 190, 100, 28, 163, 188, 32, 138, 245, 189, 176, 150, 140, 62, 163, 47, 149, 62, 169, 244, 6, 191, 66, 63, 162, 62, 161, 133, 121, 190, 253, 92, 92, 62, 204, 32, 28, 191, 182, 60, 205, 190, 221, 44, 52, 62, 184, 60, 131, 62, 157, 121, 15, 191, 156, 226, 120, 62, 117, 36, 32, 191, 52, 179, 4, 60, 65, 115, 83, 62, 101, 109, 40, 190, 144, 16, 225, 189, 112, 135, 34, 63, 90, 191, 103, 62, 86, 253, 74, 189, 54, 230, 162, 62, 41, 236, 130, 190, 204, 197, 164, 61, 6, 45, 75, 190, 105, 128, 49, 61, 226, 63, 1, 63, 201, 97, 226, 189, 238, 243, 248, 61, 223, 84, 37, 191, 233, 209, 170, 62, 228, 211, 86, 62, 109, 131, 52, 62, 147, 199, 212, 189, 52, 235, 27, 190, 77, 152, 59, 62, 78, 213, 220, 190, 230, 227, 201, 188, 78, 161, 214, 189, 177, 84, 4, 62, 163, 95, 193, 190, 107, 82, 23, 62, 31, 129, 218, 190, 101, 106, 114, 62, 100, 141, 209, 190, 187, 139, 81, 191, 226, 168, 126, 190, 6, 157, 224, 190, 251, 129, 20, 62, 102, 69, 97, 191, 32, 210, 154, 190, 44, 213, 132, 190, 238, 3, 207, 190, 145, 153, 224, 189, 81, 207, 231, 62, 183, 16, 228, 62, 192, 182, 184, 62, 33, 50, 150, 189, 180, 164, 222, 190, 116, 99, 119, 190, 156, 185, 202, 190, 49, 37, 14, 63, 72, 66, 79, 62, 234, 210, 143, 189, 196, 90, 91, 189, 243, 237, 162, 186, 98, 195, 32, 63, 89, 75, 32, 191, 230, 160, 1, 63, 51, 1, 58, 190, 157, 52, 147, 62, 167, 127, 192, 190, 22, 255, 216, 62, 29, 207, 52, 190, 126, 63, 127, 188, 90, 27, 168, 61, 232, 73, 166, 61, 127, 67, 224, 61, 135, 127, 134, 189, 212, 170, 162, 61, 245, 167, 152, 61, 197, 243, 135, 62, 203, 92, 155, 190, 30, 3, 21, 189, 198, 179, 198, 190, 218, 230, 7, 62, 50, 17, 41, 62, 79, 148, 42, 61, 245, 115, 22, 62, 208, 9, 157, 60, 45, 66, 122, 190, 14, 23, 237, 189, 53, 218, 112, 190, 58, 136, 14, 63, 172, 100, 137, 190, 252, 215, 215, 189, 82, 28, 34, 190, 43, 166, 135, 62, 174, 207, 137, 62, 6, 223, 151, 190, 122, 90, 180, 62, 176, 246, 247, 190, 232, 56, 142, 61, 97, 20, 15, 191, 124, 235, 0, 62, 51, 211, 158, 61, 195, 27, 80, 61, 198, 216, 212, 189, 73, 140, 128, 61, 198, 125, 20, 62, 210, 11, 120, 60, 122, 79, 84, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 131, 89, 1, 190, 58, 128, 184, 189, 97, 140, 178, 61, 56, 47, 225, 188, 16, 74, 201, 60, 151, 93, 234, 61, 169, 45, 213, 189, 102, 18, 29, 61, 118, 140, 15, 190, 13, 225, 190, 60, 249, 228, 100, 189, 6, 92, 52, 190, 0, 230, 220, 189, 119, 182, 36, 190, 157, 42, 38, 61, 31, 226, 88, 188, 172, 50, 142, 189, 129, 202, 106, 61, 148, 2, 70, 190, 89, 227, 34, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 218, 66, 39, 190, 28, 173, 0, 62, 86, 2, 162, 189, 140, 46, 26, 189, 20, 245, 171, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 4, 69, 81, 189, 81, 246, 135, 59, 162, 26, 3, 190, 247, 47, 171, 189, 108, 71, 210, 189, 226, 149, 41, 190, 6, 102, 67, 61, 204, 181, 27, 190, 16, 136, 224, 61, 25, 50, 204, 59, 60, 184, 176, 189, 63, 206, 182, 61, 89, 11, 244, 61, 150, 172, 50, 58, 128, 164, 127, 189, 84, 175, 168, 60, 140, 128, 43, 61, 67, 173, 92, 190, 97, 101, 95, 190, 228, 145, 54, 190, 250, 13, 226, 61, 112, 191, 43, 188, 114, 34, 124, 190, 108, 103, 68, 189, 205, 234, 119, 62, 249, 148, 9, 191, 138, 181, 52, 62, 239, 193, 13, 191, 98, 27, 194, 189, 182, 249, 111, 61, 179, 203, 51, 188, 30, 186, 187, 189, 1, 23, 140, 62, 1, 167, 176, 62, 207, 114, 229, 61, 199, 1, 96, 61, 149, 111, 146, 190, 206, 143, 156, 61, 185, 193, 20, 190, 205, 58, 162, 61, 102, 100, 226, 62, 165, 53, 13, 62, 246, 84, 143, 62, 224, 106, 101, 191, 251, 44, 220, 61, 253, 55, 46, 62, 130, 153, 190, 61, 126, 93, 90, 190, 213, 40, 196, 189, 200, 150, 25, 62, 165, 220, 116, 190, 166, 152, 41, 62, 227, 6, 207, 189, 171, 79, 175, 189, 228, 86, 198, 62, 71, 236, 22, 189, 120, 24, 170, 190, 133, 3, 105, 62, 57, 128, 75, 60, 139, 61, 76, 62, 65, 215, 37, 190, 51, 148, 44, 190, 79, 4, 34, 189, 14, 196, 181, 59, 51, 6, 114, 190, 215, 27, 129, 62, 37, 255, 30, 60, 105, 163, 8, 61, 88, 237, 118, 190, 106, 162, 208, 61, 148, 140, 189, 190, 42, 166, 148, 61, 34, 201, 134, 61, 20, 157, 27, 62, 46, 213, 64, 189, 237, 65, 70, 190, 2, 87, 5, 189, 9, 80, 15, 62, 56, 108, 188, 189, 51, 225, 146, 62, 62, 217, 165, 62, 240, 185, 211, 190, 137, 245, 229, 190, 224, 234, 218, 190, 215, 77, 242, 61, 94, 255, 160, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 135, 126, 203, 62, 184, 155, 179, 190, 219, 183, 22, 190, 64, 81, 34, 62, 227, 60, 15, 62, 57, 121, 208, 190, 66, 167, 133, 189, 224, 13, 51, 190, 70, 210, 2, 190, 35, 167, 100, 190, 53, 3, 155, 190, 212, 46, 65, 60, 158, 23, 131, 189, 86, 164, 155, 188, 182, 25, 21, 62, 254, 66, 131, 62, 128, 182, 162, 62, 40, 95, 78, 189, 94, 241, 174, 62, 44, 252, 38, 62, 45, 120, 59, 189, 54, 176, 188, 190, 90, 234, 227, 61, 144, 107, 150, 189, 96, 157, 27, 62, 48, 51, 133, 62, 7, 44, 110, 189, 13, 146, 0, 62, 226, 147, 12, 189, 147, 232, 117, 61, 84, 133, 110, 62, 205, 103, 186, 191, 97, 151, 141, 190, 151, 237, 11, 61, 234, 13, 192, 62, 115, 70, 58, 191, 56, 54, 172, 62, 115, 144, 15, 191, 179, 150, 130, 62, 48, 6, 158, 62, 91, 155, 67, 60, 81, 20, 173, 190, 155, 96, 106, 61, 41, 107, 186, 62, 75, 182, 240, 62, 144, 182, 26, 63, 197, 22, 128, 191, 104, 92, 88, 62, 90, 82, 121, 191, 13, 6, 211, 190, 145, 150, 229, 62, 215, 194, 148, 190, 16, 154, 44, 189, 128, 227, 140, 61, 160, 153, 74, 60, 196, 187, 183, 62, 115, 46, 177, 190, 130, 113, 189, 189, 78, 33, 240, 190, 56, 43, 128, 190, 117, 248, 144, 191, 160, 123, 118, 62, 25, 247, 136, 191, 233, 7, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 5, 30, 69, 62, 16, 87, 209, 61, 58, 108, 232, 189, 219, 220, 50, 190, 209, 220, 68, 189, 118, 167, 164, 62, 114, 164, 105, 61, 177, 168, 202, 62, 176, 253, 69, 62, 245, 104, 14, 62, 26, 224, 161, 62, 218, 151, 138, 62, 71, 13, 137, 188, 167, 66, 249, 190, 12, 40, 106, 190, 233, 207, 149, 61, 134, 13, 203, 61, 81, 228, 92, 62, 120, 231, 178, 61, 128, 99, 94, 62, 215, 105, 93, 61, 28, 105, 24, 62, 87, 236, 186, 62, 220, 6, 233, 61, 182, 39, 201, 187, 86, 182, 22, 190, 218, 1, 139, 62, 125, 47, 253, 60, 255, 58, 37, 190, 193, 49, 24, 189, 149, 246, 195, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 67, 215, 239, 62, 8, 238, 131, 190, 117, 189, 92, 62, 190, 128, 139, 60, 15, 59, 235, 62, 255, 101, 129, 62, 21, 201, 140, 63, 18, 247, 129, 190, 170, 238, 161, 63, 129, 45, 164, 62, 6, 49, 236, 62, 121, 197, 72, 188, 12, 64, 67, 191, 101, 105, 253, 62, 201, 218, 18, 63, 73, 6, 171, 60, 130, 91, 14, 62, 155, 233, 150, 63, 252, 159, 41, 190, 199, 62, 46, 191, 101, 210, 222, 62, 189, 103, 32, 191, 146, 1, 149, 63, 97, 159, 176, 62, 153, 71, 1, 61, 16, 131, 220, 189, 117, 190, 156, 190, 174, 119, 204, 61, 188, 197, 185, 189, 153, 145, 64, 190, 9, 13, 197, 191, 81, 214, 233, 61, 72, 222, 21, 62, 140, 219, 73, 190, 75, 145, 233, 62, 67, 134, 230, 189, 63, 23, 132, 189, 221, 161, 152, 190, 99, 236, 157, 62, 140, 177, 148, 190, 244, 175, 138, 190, 171, 0, 141, 190, 87, 143, 199, 189, 119, 172, 103, 190, 171, 106, 23, 62, 202, 4, 147, 62, 190, 118, 43, 190, 133, 96, 171, 61, 190, 81, 0, 62, 151, 232, 113, 62, 178, 34, 226, 188, 56, 142, 143, 61, 136, 89, 13, 63, 121, 3, 141, 60, 75, 166, 11, 63, 96, 86, 19, 190, 208, 61, 10, 189, 83, 44, 31, 190, 207, 185, 66, 190, 179, 41, 2, 191, 203, 145, 20, 190, 50, 63, 158, 189, 237, 170, 13, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 28, 210, 189, 215, 95, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 227, 190, 63, 41, 63, 0, 191, 207, 64, 201, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 235, 185, 63, 20, 81, 193, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}