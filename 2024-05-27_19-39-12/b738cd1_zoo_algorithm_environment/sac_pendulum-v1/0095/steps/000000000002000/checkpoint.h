// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 147, 192, 62, 242, 165, 242, 189, 29, 222, 16, 191, 158, 1, 47, 191, 207, 224, 95, 61, 182, 205, 238, 190, 74, 28, 0, 63, 26, 35, 225, 62, 237, 248, 171, 62, 101, 105, 142, 190, 200, 139, 36, 191, 193, 34, 195, 62, 17, 57, 158, 188, 242, 250, 50, 63, 136, 107, 20, 190, 216, 242, 24, 63, 94, 69, 103, 190, 105, 167, 129, 190, 5, 93, 188, 59, 184, 76, 9, 63, 132, 156, 164, 62, 104, 19, 168, 189, 244, 0, 94, 190, 129, 240, 169, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 103, 209, 129, 62, 213, 29, 80, 191, 221, 78, 224, 190, 217, 56, 20, 190, 209, 190, 30, 191, 202, 145, 37, 190, 57, 253, 73, 63, 174, 23, 97, 62, 45, 118, 238, 62, 167, 130, 24, 63, 213, 144, 139, 62, 217, 49, 205, 62, 138, 96, 196, 60, 217, 175, 50, 62, 200, 6, 209, 62, 41, 155, 143, 190, 168, 177, 157, 190, 136, 54, 161, 62, 187, 116, 79, 61, 82, 179, 135, 187, 58, 192, 161, 61, 199, 204, 50, 190, 58, 156, 91, 190, 248, 159, 101, 62, 220, 28, 171, 190, 124, 178, 114, 191, 181, 39, 205, 62, 41, 145, 129, 62, 47, 71, 54, 63, 30, 79, 193, 61, 126, 201, 246, 62, 70, 75, 54, 190, 217, 180, 246, 62, 186, 32, 12, 191, 55, 176, 115, 189, 33, 11, 223, 190, 81, 216, 118, 189, 207, 47, 22, 62, 122, 79, 232, 61, 197, 87, 1, 190, 97, 63, 14, 191, 16, 85, 231, 188, 204, 175, 68, 190, 81, 67, 175, 62, 38, 76, 145, 190, 37, 71, 0, 63, 187, 221, 228, 62, 204, 204, 214, 62, 6, 156, 238, 62, 196, 237, 156, 61, 54, 185, 210, 190, 159, 163, 242, 62, 135, 156, 81, 191, 154, 147, 139, 190, 151, 221, 50, 63, 140, 198, 163, 62, 86, 159, 183, 62, 242, 190, 48, 190, 0, 16, 75, 63, 212, 174, 196, 62, 233, 111, 52, 190, 148, 215, 37, 63, 2, 15, 5, 189, 30, 81, 76, 61, 233, 238, 132, 190, 198, 18, 168, 62, 96, 36, 134, 190, 155, 29, 135, 191, 119, 23, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 98, 252, 190, 9, 208, 213, 190, 104, 115, 131, 190, 123, 121, 94, 62, 29, 41, 44, 62, 89, 17, 221, 190, 5, 241, 104, 190, 184, 47, 60, 63, 166, 7, 180, 190, 138, 50, 192, 62, 163, 30, 128, 62, 138, 148, 137, 62, 33, 59, 225, 190, 212, 163, 206, 62, 110, 198, 77, 62, 94, 117, 25, 63, 111, 137, 105, 62, 33, 85, 31, 63, 143, 109, 217, 62, 79, 228, 205, 190, 14, 50, 70, 190, 137, 196, 97, 190, 32, 38, 240, 62, 6, 104, 219, 62, 83, 6, 64, 62, 201, 90, 214, 188, 183, 114, 245, 62, 157, 1, 150, 190, 174, 60, 243, 189, 71, 212, 168, 61, 116, 159, 176, 62, 166, 203, 100, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 23, 6, 188, 196, 222, 250, 189, 143, 99, 13, 61, 7, 199, 93, 189, 39, 160, 54, 189, 59, 104, 49, 190, 72, 143, 201, 189, 200, 28, 34, 62, 103, 228, 243, 189, 185, 22, 105, 189, 100, 245, 252, 189, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 160, 76, 173, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 194, 162, 11, 62, 9, 237, 135, 60, 142, 116, 193, 189, 156, 24, 22, 190, 194, 25, 234, 189, 254, 69, 46, 61, 46, 92, 63, 189, 41, 6, 243, 189, 157, 221, 235, 59, 164, 16, 128, 61, 170, 147, 62, 190, 248, 246, 194, 61, 165, 168, 13, 190, 88, 219, 173, 189, 18, 121, 242, 60, 231, 213, 159, 61, 132, 218, 81, 190, 133, 227, 155, 59, 46, 52, 15, 62, 110, 149, 223, 188, 29, 69, 8, 61, 119, 196, 238, 189, 58, 123, 110, 62, 47, 147, 50, 188, 16, 78, 104, 61, 112, 170, 15, 190, 93, 217, 231, 188, 220, 19, 49, 62, 168, 105, 175, 189, 68, 223, 21, 62, 31, 187, 0, 190, 138, 17, 92, 189, 51, 154, 45, 189, 7, 229, 7, 189, 100, 119, 14, 62, 219, 20, 161, 189, 144, 69, 7, 190, 73, 124, 80, 190, 81, 29, 203, 189, 123, 133, 6, 188, 56, 55, 249, 189, 225, 236, 152, 190, 200, 204, 178, 61, 96, 35, 4, 62, 239, 2, 115, 189, 19, 195, 183, 189, 71, 142, 120, 61, 1, 84, 192, 189, 146, 185, 6, 190, 162, 71, 34, 190, 219, 178, 171, 189, 108, 16, 169, 61, 115, 83, 51, 61, 78, 129, 163, 61, 60, 12, 4, 61, 15, 223, 185, 61, 249, 54, 11, 189, 155, 161, 44, 62, 171, 199, 185, 61, 168, 248, 143, 187, 97, 27, 239, 189, 31, 191, 145, 189, 254, 22, 6, 190, 14, 101, 161, 60, 221, 161, 45, 61, 0, 30, 156, 61, 107, 183, 10, 62, 103, 124, 28, 190, 100, 12, 11, 62, 107, 73, 23, 190, 31, 98, 75, 61, 144, 61, 230, 59, 255, 155, 19, 190, 164, 158, 178, 189, 254, 111, 64, 62, 205, 24, 70, 190, 202, 84, 178, 189, 70, 62, 36, 62, 41, 220, 7, 190, 5, 23, 87, 189, 149, 24, 103, 190, 39, 8, 136, 61, 137, 18, 193, 189, 52, 51, 36, 62, 130, 89, 138, 61, 141, 231, 13, 62, 148, 28, 132, 189, 84, 85, 135, 188, 210, 36, 52, 61, 45, 221, 226, 189, 156, 2, 1, 62, 49, 255, 74, 190, 222, 131, 45, 190, 216, 49, 183, 189, 185, 178, 95, 60, 187, 4, 161, 61, 62, 27, 72, 188, 177, 53, 239, 189, 23, 29, 33, 190, 23, 67, 57, 190, 136, 198, 226, 189, 147, 254, 250, 61, 110, 210, 197, 61, 124, 136, 16, 190, 72, 74, 225, 59, 122, 74, 86, 190, 45, 241, 22, 61, 38, 36, 100, 189, 90, 22, 162, 60, 161, 65, 25, 190, 106, 144, 225, 61, 62, 175, 141, 189, 4, 153, 183, 188, 41, 172, 44, 60, 43, 196, 82, 188, 76, 18, 204, 61, 113, 124, 122, 189, 2, 52, 6, 189, 155, 26, 40, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 63, 151, 135, 60, 7, 190, 205, 189, 0, 153, 197, 59, 123, 124, 30, 190, 231, 164, 225, 60, 38, 193, 21, 190, 183, 218, 46, 189, 70, 9, 48, 189, 85, 9, 205, 188, 239, 241, 103, 61, 248, 238, 16, 190, 67, 113, 201, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 152, 35, 15, 190, 135, 153, 247, 61, 123, 65, 73, 189, 245, 13, 132, 61, 65, 205, 8, 190, 22, 233, 6, 62, 177, 137, 36, 62, 148, 147, 148, 189, 124, 18, 17, 62, 62, 241, 228, 189, 160, 167, 163, 189, 13, 207, 154, 61, 38, 255, 138, 189, 97, 252, 237, 188, 204, 102, 226, 61, 183, 21, 3, 61, 143, 177, 248, 189, 210, 80, 207, 189, 140, 49, 229, 189, 75, 13, 183, 188, 116, 152, 192, 189, 199, 43, 230, 188, 78, 202, 221, 60, 110, 94, 68, 60, 209, 27, 67, 60, 219, 182, 67, 188, 129, 54, 37, 61, 94, 3, 83, 59, 223, 7, 78, 190, 35, 141, 53, 188, 24, 73, 60, 62, 75, 83, 79, 189, 196, 37, 32, 62, 18, 68, 93, 61, 10, 135, 11, 60, 175, 101, 132, 60, 146, 133, 19, 190, 20, 90, 61, 62, 77, 180, 181, 188, 62, 112, 19, 62, 193, 72, 176, 61, 10, 191, 33, 62, 33, 51, 194, 189, 86, 74, 108, 62, 129, 76, 196, 61, 210, 147, 51, 189, 128, 113, 0, 190, 48, 184, 191, 188, 78, 4, 48, 62, 220, 160, 192, 188, 58, 194, 9, 62, 170, 123, 206, 188, 17, 24, 239, 189, 126, 173, 219, 189, 245, 102, 227, 189, 213, 173, 203, 61, 36, 152, 127, 61, 249, 127, 108, 61, 69, 80, 185, 189, 128, 160, 251, 61, 200, 127, 134, 61, 158, 143, 160, 188, 193, 209, 241, 189, 108, 184, 253, 190, 226, 132, 252, 189, 247, 237, 203, 189, 208, 236, 164, 60, 20, 75, 251, 189, 201, 7, 15, 190, 79, 9, 2, 62, 142, 21, 174, 190, 185, 251, 153, 189, 144, 114, 163, 183, 66, 44, 248, 188, 119, 244, 134, 61, 10, 65, 151, 189, 203, 2, 83, 62, 153, 64, 255, 60, 103, 207, 197, 189, 51, 155, 15, 190, 232, 252, 78, 60, 183, 79, 15, 62, 70, 39, 49, 62, 206, 81, 90, 62, 219, 164, 127, 189, 12, 45, 28, 190, 87, 45, 15, 190, 123, 74, 155, 61, 97, 134, 144, 62, 21, 105, 183, 189, 141, 12, 179, 189, 19, 177, 118, 188, 166, 197, 242, 61, 79, 251, 232, 188, 192, 93, 24, 60, 160, 74, 163, 190, 168, 149, 189, 189, 57, 59, 84, 62, 192, 60, 109, 58, 29, 57, 40, 190, 133, 161, 217, 61, 168, 81, 151, 188, 199, 161, 13, 62, 7, 206, 31, 190, 26, 21, 133, 61, 227, 205, 47, 190, 244, 166, 232, 189, 129, 89, 20, 190, 231, 142, 130, 190, 214, 98, 16, 62, 32, 246, 45, 62, 223, 140, 253, 188, 57, 53, 154, 61, 202, 56, 96, 62, 174, 80, 250, 61, 12, 50, 26, 62, 21, 234, 181, 62, 150, 238, 9, 190, 137, 222, 57, 188, 128, 250, 247, 189, 154, 240, 138, 189, 126, 188, 37, 62, 107, 9, 39, 60, 71, 6, 181, 59, 174, 111, 237, 59, 28, 251, 41, 62, 228, 24, 2, 62, 12, 204, 131, 62, 237, 184, 49, 62, 19, 212, 54, 58, 221, 195, 189, 189, 103, 98, 145, 190, 214, 134, 138, 189, 107, 62, 233, 61, 195, 255, 137, 190, 216, 98, 171, 187, 56, 146, 175, 189, 240, 175, 254, 61, 25, 197, 27, 190, 109, 53, 123, 189, 68, 76, 53, 189, 128, 218, 205, 61, 218, 115, 69, 190, 120, 182, 13, 190, 38, 32, 34, 60, 191, 240, 132, 62, 184, 108, 176, 189, 170, 152, 21, 62, 189, 202, 156, 190, 121, 165, 225, 61, 4, 253, 207, 189, 210, 37, 61, 190, 27, 42, 109, 62, 123, 238, 199, 61, 20, 216, 34, 190, 42, 25, 26, 190, 39, 17, 88, 188, 171, 52, 192, 189, 103, 31, 109, 190, 103, 75, 2, 191, 193, 111, 1, 62, 68, 246, 42, 62, 223, 56, 157, 60, 39, 126, 152, 190, 193, 99, 59, 190, 29, 36, 233, 60, 1, 131, 8, 190, 111, 126, 118, 61, 114, 134, 213, 189, 174, 88, 196, 188, 82, 151, 12, 62, 9, 39, 99, 189, 137, 71, 241, 189, 25, 15, 13, 62, 85, 145, 111, 189, 210, 255, 237, 60, 76, 145, 25, 62, 99, 17, 165, 61, 107, 199, 63, 188, 175, 76, 79, 62, 207, 33, 19, 62, 8, 52, 53, 190, 91, 207, 42, 190, 230, 68, 174, 61, 164, 23, 242, 61, 108, 221, 189, 61, 200, 192, 49, 61, 230, 153, 228, 60, 229, 211, 137, 62, 210, 225, 130, 58, 112, 34, 109, 190, 130, 180, 29, 190, 200, 179, 27, 62, 181, 159, 47, 62, 166, 182, 194, 188, 147, 164, 26, 190, 49, 180, 3, 189, 172, 61, 166, 61, 90, 34, 151, 190, 238, 174, 198, 188, 59, 184, 87, 190, 149, 76, 204, 61, 230, 33, 221, 189, 125, 162, 29, 62, 55, 109, 200, 61, 215, 224, 100, 189, 226, 199, 88, 59, 224, 121, 6, 62, 49, 233, 77, 60, 209, 228, 14, 189, 224, 179, 33, 59, 28, 8, 252, 61, 250, 250, 201, 189, 212, 86, 252, 189, 192, 110, 187, 189, 140, 16, 5, 61, 95, 213, 101, 62, 27, 229, 250, 59, 11, 207, 158, 61, 117, 232, 197, 188, 159, 235, 118, 62, 191, 173, 81, 190, 215, 32, 37, 190, 2, 161, 199, 190, 185, 201, 142, 189, 28, 133, 182, 188, 255, 247, 203, 61, 3, 2, 154, 61, 8, 90, 68, 189, 225, 207, 2, 62, 36, 173, 159, 188, 63, 68, 147, 61, 1, 178, 159, 189, 135, 192, 15, 62, 4, 89, 207, 189, 138, 33, 220, 61, 155, 195, 222, 60, 57, 248, 75, 61, 37, 20, 130, 61, 175, 90, 32, 188, 34, 39, 68, 189, 27, 72, 221, 61, 137, 186, 35, 190, 249, 135, 14, 62, 31, 132, 211, 189, 40, 72, 14, 61, 30, 136, 129, 189, 89, 43, 56, 189, 224, 154, 96, 61, 40, 92, 135, 61, 98, 197, 67, 61, 132, 171, 6, 188, 189, 253, 0, 60, 26, 29, 0, 190, 232, 126, 24, 61, 110, 50, 170, 190, 24, 124, 217, 61, 125, 219, 253, 61, 83, 234, 180, 189, 227, 128, 24, 190, 47, 122, 24, 62, 217, 144, 200, 188, 9, 59, 250, 61, 62, 87, 9, 190, 200, 249, 82, 190, 135, 198, 186, 61, 109, 197, 50, 62, 228, 132, 140, 189, 64, 170, 111, 190, 201, 73, 65, 62, 8, 68, 119, 189, 205, 161, 76, 189, 101, 173, 176, 189, 27, 127, 105, 62, 243, 43, 255, 61, 88, 83, 237, 189, 65, 142, 28, 62, 220, 229, 145, 189, 213, 30, 214, 189, 116, 127, 202, 189, 29, 159, 186, 60, 172, 101, 37, 62, 197, 89, 28, 62, 238, 236, 144, 61, 133, 160, 155, 189, 47, 175, 15, 62, 164, 185, 96, 189, 34, 86, 134, 62, 185, 61, 219, 188, 194, 35, 136, 190, 100, 230, 75, 189, 32, 43, 25, 190, 41, 198, 46, 62, 166, 183, 210, 189, 114, 71, 11, 190, 129, 184, 172, 61, 228, 221, 93, 61, 174, 88, 85, 190, 25, 44, 88, 61, 229, 220, 92, 189, 96, 138, 23, 62, 108, 98, 153, 61, 150, 229, 112, 61, 153, 216, 12, 62, 59, 45, 216, 61, 182, 31, 11, 190, 220, 234, 13, 190, 202, 45, 148, 60, 39, 153, 213, 60, 43, 134, 240, 189, 189, 232, 231, 61, 4, 0, 56, 59, 151, 60, 132, 190, 126, 106, 190, 189, 66, 137, 128, 189, 104, 2, 202, 189, 218, 144, 17, 190, 141, 88, 12, 62, 9, 129, 20, 190, 98, 4, 48, 61, 110, 171, 189, 61, 253, 99, 118, 61, 172, 214, 211, 189, 171, 13, 52, 190, 36, 248, 23, 189, 61, 188, 127, 61, 214, 49, 42, 62, 242, 236, 156, 187, 78, 24, 98, 189, 45, 253, 111, 189, 8, 159, 104, 189, 61, 233, 12, 61, 90, 200, 55, 61, 101, 218, 209, 61, 18, 200, 146, 61, 171, 61, 202, 189, 48, 51, 241, 61, 155, 99, 32, 190, 196, 188, 113, 61, 104, 250, 179, 189, 174, 101, 4, 62, 163, 125, 189, 188, 242, 183, 189, 189, 149, 128, 131, 189, 248, 114, 136, 60, 65, 49, 14, 62, 119, 109, 162, 189, 126, 246, 41, 61, 87, 104, 167, 60, 100, 63, 38, 62, 232, 245, 48, 62, 89, 156, 61, 62, 141, 122, 101, 188, 241, 16, 243, 189, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 227, 201, 141, 61, 75, 151, 12, 190, 238, 221, 197, 189, 39, 22, 46, 190, 193, 188, 34, 190, 161, 38, 46, 190, 172, 30, 84, 189, 27, 157, 100, 61, 76, 5, 37, 61, 219, 122, 14, 190, 95, 70, 213, 59, 193, 214, 255, 61, 171, 155, 164, 59, 28, 88, 99, 189, 0, 58, 131, 184, 96, 54, 222, 189, 190, 154, 217, 189, 157, 83, 52, 190, 70, 122, 38, 62, 225, 89, 14, 190, 153, 169, 187, 61, 64, 178, 59, 189, 126, 138, 1, 60, 178, 236, 163, 189, 50, 168, 172, 61, 204, 41, 40, 62, 86, 190, 131, 189, 121, 72, 113, 61, 121, 147, 186, 61, 37, 109, 16, 190, 7, 92, 138, 61, 97, 99, 43, 189, 29, 3, 21, 62, 78, 67, 8, 190, 141, 32, 149, 61, 246, 58, 41, 190, 221, 230, 214, 189, 234, 151, 179, 189, 242, 76, 168, 60, 218, 106, 16, 190, 235, 246, 1, 62, 247, 240, 7, 60, 21, 151, 26, 62, 10, 208, 26, 190, 91, 224, 14, 61, 149, 132, 141, 61, 211, 11, 78, 189, 57, 59, 240, 189, 244, 226, 90, 189, 255, 150, 222, 188, 183, 191, 218, 61, 129, 165, 62, 61, 179, 17, 26, 190, 56, 254, 189, 61, 30, 100, 83, 189, 50, 186, 14, 190, 174, 216, 175, 59, 15, 100, 90, 188, 148, 81, 253, 61, 75, 119, 191, 188, 171, 89, 169, 188, 210, 141, 178, 61, 65, 202, 231, 188, 142, 57, 194, 61, 127, 19, 86, 62, 37, 78, 138, 188, 33, 255, 183, 62, 219, 94, 49, 190, 86, 191, 190, 60, 91, 193, 218, 61, 35, 160, 72, 189, 205, 43, 88, 190, 230, 146, 19, 190, 223, 168, 27, 62, 159, 13, 67, 61, 110, 232, 252, 61, 156, 238, 62, 189, 38, 119, 81, 189, 155, 73, 132, 61, 235, 194, 151, 187, 237, 130, 183, 62, 90, 151, 50, 61, 76, 77, 15, 190, 221, 80, 203, 189, 126, 167, 124, 189, 244, 38, 243, 61, 230, 118, 175, 61, 49, 215, 101, 188, 15, 15, 50, 61, 97, 91, 241, 58, 202, 134, 45, 62, 253, 128, 67, 62, 135, 45, 9, 62, 179, 56, 40, 190, 103, 45, 161, 189, 81, 88, 39, 61, 54, 239, 137, 61, 46, 157, 68, 190, 243, 50, 248, 61, 244, 36, 109, 190, 6, 231, 142, 189, 122, 2, 59, 62, 211, 248, 21, 189, 106, 104, 153, 61, 165, 148, 125, 190, 197, 97, 122, 189, 16, 121, 92, 190, 109, 29, 192, 61, 241, 7, 43, 187, 14, 31, 36, 62, 198, 80, 12, 189, 67, 102, 162, 189, 121, 239, 214, 62, 143, 246, 251, 189, 182, 17, 149, 189, 232, 99, 20, 190, 84, 14, 93, 61, 7, 182, 124, 62, 40, 246, 181, 61, 212, 53, 102, 189, 238, 147, 56, 190, 68, 165, 207, 189, 119, 87, 8, 190, 0, 89, 129, 62, 24, 251, 226, 61, 94, 13, 131, 190, 15, 200, 199, 59, 149, 66, 120, 189, 82, 203, 155, 189, 116, 140, 44, 60, 104, 8, 186, 190, 18, 189, 106, 62, 79, 237, 61, 190, 13, 15, 11, 190, 75, 44, 140, 189, 99, 213, 89, 62, 74, 168, 111, 62, 22, 226, 133, 190, 174, 161, 47, 190, 100, 25, 23, 62, 158, 237, 150, 62, 95, 227, 165, 188, 80, 214, 63, 62, 137, 24, 19, 62, 113, 229, 129, 190, 210, 160, 245, 189, 158, 140, 57, 60, 74, 57, 248, 61, 58, 125, 180, 188, 25, 186, 17, 61, 119, 157, 254, 189, 10, 78, 189, 61, 87, 93, 232, 61, 25, 217, 33, 190, 105, 129, 203, 189, 203, 117, 95, 190, 83, 180, 250, 61, 231, 63, 188, 188, 109, 115, 109, 190, 12, 235, 28, 62, 177, 123, 5, 189, 7, 135, 164, 189, 136, 4, 183, 62, 106, 117, 151, 190, 122, 102, 112, 189, 78, 247, 29, 62, 101, 109, 40, 190, 0, 152, 65, 189, 252, 111, 108, 59, 148, 11, 186, 61, 42, 12, 2, 190, 110, 85, 90, 62, 98, 233, 47, 189, 52, 199, 67, 61, 193, 241, 184, 189, 64, 29, 104, 188, 55, 178, 200, 62, 30, 13, 106, 61, 18, 12, 23, 189, 13, 216, 5, 190, 7, 10, 148, 189, 177, 140, 8, 62, 139, 7, 155, 61, 232, 94, 46, 61, 82, 209, 169, 187, 144, 244, 87, 189, 132, 190, 201, 189, 252, 232, 167, 61, 15, 229, 85, 61, 68, 168, 143, 190, 132, 134, 171, 189, 160, 231, 51, 189, 24, 155, 111, 190, 171, 231, 123, 62, 233, 43, 79, 190, 115, 153, 84, 190, 179, 188, 2, 190, 67, 44, 30, 190, 251, 129, 20, 62, 40, 70, 117, 61, 139, 33, 65, 189, 21, 28, 22, 190, 222, 172, 39, 190, 94, 52, 252, 189, 150, 105, 225, 61, 53, 237, 91, 62, 252, 38, 111, 62, 221, 43, 59, 189, 5, 207, 212, 190, 181, 36, 49, 190, 169, 84, 65, 61, 118, 211, 66, 61, 45, 36, 254, 61, 217, 26, 250, 189, 121, 199, 220, 188, 12, 85, 92, 189, 41, 222, 20, 190, 163, 75, 56, 190, 138, 151, 158, 61, 202, 25, 190, 190, 64, 246, 88, 62, 152, 228, 52, 62, 145, 187, 46, 62, 162, 72, 73, 190, 56, 28, 169, 61, 12, 86, 156, 61, 36, 40, 155, 61, 224, 79, 175, 189, 157, 70, 213, 189, 8, 237, 56, 62, 245, 167, 152, 61, 60, 254, 112, 62, 93, 179, 44, 62, 128, 136, 163, 189, 76, 139, 116, 190, 166, 43, 223, 61, 233, 44, 94, 189, 28, 113, 169, 61, 204, 91, 239, 61, 122, 153, 59, 62, 116, 193, 173, 190, 48, 172, 77, 189, 117, 246, 195, 189, 64, 53, 180, 61, 56, 53, 28, 62, 220, 142, 211, 59, 98, 49, 76, 190, 211, 77, 235, 60, 21, 201, 193, 61, 63, 247, 197, 188, 145, 159, 221, 188, 107, 176, 219, 190, 80, 87, 217, 60, 21, 218, 185, 188, 175, 132, 18, 62, 30, 209, 188, 61, 243, 27, 113, 61, 157, 205, 212, 189, 56, 31, 199, 61, 233, 113, 40, 62, 180, 215, 149, 60, 130, 51, 68, 190, 59, 205, 5, 62, 201, 133, 73, 190, 143, 71, 153, 61, 86, 176, 236, 189, 117, 64, 183, 189, 62, 232, 200, 61, 29, 170, 97, 188, 241, 192, 45, 61, 62, 76, 2, 62, 26, 198, 211, 189, 177, 97, 134, 61, 118, 140, 15, 190, 194, 226, 23, 61, 167, 0, 99, 189, 14, 131, 50, 190, 35, 187, 168, 189, 249, 247, 26, 190, 25, 102, 131, 61, 151, 151, 231, 58, 149, 186, 132, 189, 60, 132, 154, 61, 169, 7, 49, 190, 161, 125, 199, 188, 61, 36, 38, 189, 56, 7, 174, 60, 154, 179, 62, 189, 139, 133, 177, 189, 39, 27, 30, 62, 76, 147, 150, 189, 233, 227, 11, 189, 78, 241, 38, 62, 41, 192, 155, 59, 41, 148, 139, 188, 234, 224, 93, 60, 183, 239, 166, 189, 204, 116, 71, 61, 207, 80, 89, 189, 76, 220, 49, 189, 222, 94, 155, 189, 101, 24, 17, 190, 219, 172, 151, 61, 73, 135, 7, 190, 185, 45, 241, 61, 206, 126, 80, 61, 71, 225, 176, 189, 185, 151, 239, 61, 107, 225, 239, 61, 164, 82, 152, 59, 230, 57, 252, 187, 28, 88, 1, 61, 232, 113, 79, 61, 254, 87, 29, 190, 133, 116, 17, 190, 12, 159, 51, 190, 164, 162, 17, 62, 2, 77, 74, 189, 163, 214, 64, 190, 234, 213, 16, 190, 165, 22, 160, 61, 240, 60, 211, 189, 223, 166, 91, 62, 6, 212, 37, 190, 120, 136, 187, 189, 47, 19, 169, 61, 179, 203, 51, 188, 197, 121, 97, 61, 184, 132, 196, 189, 229, 59, 134, 62, 247, 243, 203, 61, 55, 127, 95, 189, 112, 241, 134, 189, 22, 204, 43, 61, 200, 214, 250, 188, 205, 1, 183, 186, 124, 98, 165, 62, 141, 242, 133, 61, 99, 67, 55, 62, 193, 168, 90, 61, 208, 67, 13, 190, 37, 51, 10, 61, 116, 163, 31, 60, 127, 184, 26, 190, 252, 228, 5, 62, 220, 82, 152, 60, 174, 205, 48, 186, 72, 243, 42, 62, 9, 48, 25, 189, 166, 3, 44, 190, 172, 2, 233, 61, 35, 147, 244, 187, 93, 136, 67, 190, 167, 254, 48, 62, 115, 162, 107, 189, 205, 109, 196, 188, 39, 241, 89, 190, 39, 93, 202, 189, 79, 4, 34, 189, 62, 64, 174, 189, 54, 162, 222, 189, 115, 139, 64, 62, 10, 80, 223, 188, 127, 158, 244, 60, 4, 180, 154, 188, 124, 24, 16, 62, 23, 103, 205, 189, 104, 125, 238, 61, 71, 99, 208, 189, 107, 107, 85, 61, 78, 235, 124, 61, 182, 154, 204, 189, 86, 119, 59, 62, 251, 41, 7, 62, 97, 119, 236, 189, 17, 150, 184, 188, 42, 253, 162, 61, 33, 139, 21, 190, 141, 225, 76, 190, 229, 21, 197, 190, 162, 12, 233, 61, 195, 107, 234, 61, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 13, 157, 207, 188, 39, 25, 28, 190, 127, 40, 31, 190, 252, 165, 158, 61, 216, 147, 67, 62, 234, 230, 134, 190, 6, 35, 227, 188, 73, 120, 9, 62, 70, 210, 2, 190, 167, 25, 10, 190, 180, 120, 123, 190, 111, 46, 208, 188, 195, 191, 205, 189, 196, 157, 219, 189, 243, 128, 40, 62, 250, 44, 119, 62, 249, 194, 42, 62, 167, 47, 46, 190, 97, 143, 140, 62, 71, 132, 4, 62, 140, 144, 4, 62, 14, 10, 225, 61, 110, 224, 207, 61, 232, 154, 182, 189, 222, 252, 217, 61, 146, 198, 39, 61, 87, 115, 202, 61, 73, 241, 188, 61, 139, 141, 136, 61, 223, 33, 169, 60, 165, 87, 226, 61, 221, 207, 150, 190, 97, 223, 9, 190, 175, 140, 118, 61, 9, 108, 213, 61, 161, 178, 244, 189, 105, 23, 184, 62, 161, 86, 203, 189, 72, 91, 76, 61, 255, 235, 115, 62, 91, 155, 67, 60, 93, 55, 77, 190, 186, 25, 25, 189, 106, 131, 133, 189, 106, 186, 160, 188, 93, 227, 142, 61, 75, 220, 52, 61, 0, 242, 188, 61, 181, 245, 57, 190, 76, 46, 50, 190, 17, 84, 244, 60, 85, 138, 225, 189, 145, 99, 180, 188, 122, 221, 80, 187, 215, 138, 130, 189, 125, 82, 143, 62, 147, 70, 55, 190, 203, 4, 128, 189, 67, 196, 10, 190, 157, 114, 96, 190, 158, 108, 22, 62, 84, 35, 149, 62, 186, 12, 101, 190, 122, 146, 78, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 5, 137, 189, 134, 183, 167, 61, 191, 230, 180, 61, 118, 56, 138, 189, 59, 148, 42, 190, 12, 27, 87, 186, 135, 173, 114, 62, 175, 74, 192, 189, 5, 246, 138, 62, 233, 211, 176, 61, 245, 201, 159, 60, 63, 110, 100, 62, 187, 114, 234, 61, 128, 142, 74, 62, 213, 22, 67, 190, 126, 122, 85, 190, 233, 207, 149, 61, 104, 0, 237, 61, 54, 159, 195, 189, 251, 235, 245, 61, 235, 201, 34, 62, 127, 188, 3, 61, 219, 246, 87, 61, 87, 73, 208, 61, 48, 107, 35, 62, 43, 162, 179, 60, 122, 208, 7, 190, 174, 101, 69, 62, 29, 165, 4, 61, 255, 58, 37, 190, 56, 175, 9, 60, 160, 220, 127, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 178, 11, 190, 208, 242, 19, 62, 121, 246, 30, 190, 153, 118, 58, 61, 228, 32, 141, 60, 241, 208, 247, 61, 182, 199, 32, 62, 185, 247, 80, 62, 229, 156, 115, 190, 193, 79, 129, 62, 192, 166, 228, 61, 0, 61, 68, 62, 88, 114, 128, 61, 181, 106, 69, 190, 128, 105, 116, 61, 242, 94, 249, 186, 73, 6, 171, 60, 141, 50, 16, 62, 244, 155, 248, 61, 16, 17, 10, 190, 224, 46, 213, 190, 195, 90, 131, 62, 199, 182, 176, 190, 19, 159, 105, 62, 100, 167, 156, 62, 113, 196, 122, 61, 167, 145, 32, 190, 65, 169, 37, 190, 204, 51, 142, 61, 188, 197, 185, 189, 146, 253, 198, 189, 130, 182, 227, 190, 226, 250, 241, 61, 25, 11, 221, 61, 23, 242, 5, 190, 64, 202, 29, 62, 199, 41, 231, 189, 22, 99, 30, 62, 77, 106, 182, 189, 45, 58, 198, 61, 60, 247, 18, 190, 146, 169, 28, 190, 17, 95, 84, 190, 110, 83, 147, 189, 15, 188, 223, 189, 179, 135, 153, 189, 162, 114, 37, 62, 111, 97, 9, 62, 133, 96, 171, 61, 57, 172, 255, 61, 2, 2, 0, 62, 254, 60, 223, 60, 167, 180, 140, 61, 250, 18, 58, 62, 28, 248, 178, 188, 32, 231, 77, 62, 13, 206, 31, 190, 168, 243, 197, 188, 237, 167, 11, 190, 220, 96, 2, 190, 214, 138, 217, 189, 203, 145, 20, 190, 3, 164, 129, 189, 182, 104, 28, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 36, 137, 188, 158, 61, 190, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 87, 236, 191, 33, 69, 127, 191, 155, 151, 0, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {34, 87, 5, 64, 35, 24, 164, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}