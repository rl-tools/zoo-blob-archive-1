// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 43, 243, 62, 196, 76, 52, 190, 252, 7, 47, 191, 9, 150, 49, 191, 92, 170, 171, 190, 89, 44, 20, 191, 16, 138, 30, 63, 100, 12, 155, 63, 211, 158, 134, 62, 178, 1, 166, 190, 20, 159, 84, 190, 238, 27, 32, 63, 214, 229, 32, 190, 251, 81, 188, 62, 7, 144, 181, 190, 45, 240, 54, 63, 58, 201, 76, 191, 90, 249, 212, 190, 163, 40, 249, 62, 248, 249, 69, 63, 111, 213, 86, 62, 8, 235, 62, 190, 81, 57, 225, 190, 103, 28, 161, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 154, 162, 48, 63, 227, 245, 134, 191, 109, 135, 186, 190, 118, 103, 44, 190, 26, 96, 198, 191, 176, 77, 197, 61, 7, 186, 57, 63, 25, 118, 141, 63, 83, 104, 22, 62, 236, 196, 61, 63, 219, 161, 33, 63, 145, 112, 142, 62, 210, 242, 29, 62, 158, 53, 165, 63, 93, 105, 112, 62, 155, 228, 171, 190, 49, 166, 174, 63, 154, 0, 144, 62, 242, 93, 214, 190, 103, 237, 162, 61, 226, 191, 146, 61, 52, 222, 152, 189, 252, 71, 138, 63, 16, 203, 214, 62, 107, 203, 141, 190, 18, 15, 93, 191, 32, 28, 248, 62, 242, 238, 174, 62, 69, 62, 138, 63, 128, 15, 68, 62, 96, 244, 223, 62, 217, 164, 21, 191, 104, 60, 5, 63, 254, 197, 207, 190, 73, 255, 178, 191, 12, 254, 16, 191, 185, 241, 0, 191, 20, 37, 9, 63, 204, 22, 27, 62, 148, 212, 143, 190, 202, 5, 171, 191, 170, 23, 3, 62, 80, 246, 7, 191, 248, 186, 152, 62, 176, 110, 163, 190, 60, 58, 166, 62, 33, 207, 137, 63, 101, 156, 235, 62, 234, 163, 6, 62, 94, 166, 4, 63, 89, 221, 50, 191, 184, 234, 101, 63, 185, 175, 156, 191, 108, 155, 135, 190, 135, 244, 85, 63, 23, 161, 123, 63, 187, 78, 153, 62, 225, 204, 148, 190, 104, 161, 192, 63, 131, 20, 166, 62, 107, 227, 214, 189, 254, 65, 165, 62, 86, 26, 183, 190, 219, 189, 54, 62, 190, 10, 64, 63, 57, 239, 197, 62, 158, 72, 8, 191, 231, 98, 1, 192, 213, 121, 242, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 119, 85, 191, 255, 180, 196, 190, 234, 209, 153, 190, 78, 70, 5, 190, 221, 58, 167, 61, 251, 72, 171, 190, 14, 183, 190, 190, 213, 152, 28, 63, 166, 7, 180, 190, 66, 51, 154, 59, 118, 17, 139, 62, 217, 127, 69, 62, 100, 119, 35, 191, 47, 150, 10, 62, 28, 161, 135, 190, 137, 181, 8, 63, 150, 89, 240, 189, 2, 224, 5, 63, 226, 105, 251, 60, 41, 250, 163, 190, 234, 204, 147, 61, 208, 85, 251, 190, 40, 14, 190, 62, 73, 67, 236, 62, 81, 138, 28, 190, 73, 126, 26, 61, 179, 152, 176, 62, 71, 126, 6, 191, 168, 39, 167, 190, 183, 13, 198, 189, 248, 134, 79, 62, 100, 167, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 224, 52, 49, 189, 79, 43, 90, 191, 214, 37, 147, 190, 141, 210, 3, 62, 236, 63, 96, 190, 1, 180, 9, 63, 174, 225, 4, 190, 143, 237, 33, 188, 29, 69, 8, 61, 3, 159, 18, 61, 181, 152, 191, 188, 201, 21, 121, 61, 163, 224, 111, 190, 204, 99, 14, 190, 163, 70, 51, 190, 79, 155, 114, 62, 86, 97, 177, 190, 179, 28, 65, 189, 131, 174, 50, 61, 19, 144, 233, 189, 221, 94, 105, 191, 186, 156, 132, 190, 96, 183, 252, 189, 219, 235, 151, 190, 215, 217, 164, 190, 142, 207, 222, 62, 4, 19, 146, 62, 82, 5, 245, 190, 163, 116, 167, 190, 229, 218, 11, 191, 134, 227, 182, 188, 123, 144, 64, 191, 233, 95, 39, 60, 129, 97, 100, 190, 89, 180, 174, 61, 93, 87, 40, 189, 138, 103, 183, 190, 121, 187, 37, 189, 133, 221, 128, 189, 225, 102, 223, 189, 115, 83, 51, 61, 1, 186, 107, 62, 248, 224, 21, 63, 37, 81, 195, 59, 61, 131, 40, 61, 102, 116, 45, 62, 165, 137, 28, 62, 42, 162, 171, 187, 50, 43, 140, 61, 235, 151, 16, 62, 71, 218, 84, 190, 94, 146, 221, 61, 237, 236, 229, 61, 122, 12, 170, 190, 81, 128, 7, 63, 19, 25, 4, 191, 87, 64, 116, 62, 79, 103, 218, 190, 72, 106, 165, 61, 107, 85, 168, 61, 88, 190, 19, 190, 87, 237, 128, 190, 8, 19, 194, 62, 18, 253, 185, 62, 19, 196, 201, 60, 160, 69, 29, 62, 98, 166, 55, 191, 151, 134, 18, 62, 16, 227, 129, 190, 91, 249, 102, 62, 102, 238, 142, 191, 68, 27, 255, 61, 130, 89, 138, 61, 140, 205, 237, 61, 132, 18, 215, 61, 85, 25, 223, 188, 245, 135, 232, 190, 149, 130, 20, 191, 2, 145, 122, 61, 242, 102, 120, 190, 2, 166, 195, 190, 205, 89, 161, 62, 88, 227, 137, 190, 119, 99, 96, 62, 54, 157, 168, 189, 12, 110, 1, 190, 121, 108, 204, 189, 202, 111, 123, 190, 185, 139, 167, 190, 59, 77, 29, 62, 8, 185, 166, 62, 145, 106, 55, 191, 203, 178, 168, 189, 155, 86, 139, 190, 93, 207, 21, 61, 102, 11, 36, 190, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 209, 129, 99, 60, 78, 59, 135, 62, 84, 130, 66, 189, 180, 154, 157, 61, 28, 57, 185, 62, 27, 104, 15, 61, 206, 3, 189, 62, 169, 237, 11, 189, 160, 167, 163, 189, 23, 166, 239, 60, 203, 205, 51, 191, 132, 7, 156, 190, 23, 111, 170, 62, 163, 159, 73, 190, 249, 86, 21, 189, 156, 55, 84, 190, 171, 160, 211, 189, 179, 69, 183, 189, 200, 70, 142, 190, 185, 158, 160, 189, 142, 219, 39, 62, 185, 179, 204, 62, 117, 79, 19, 190, 164, 87, 30, 62, 25, 51, 208, 61, 94, 216, 38, 189, 187, 113, 181, 190, 106, 216, 238, 61, 120, 112, 204, 62, 151, 137, 64, 62, 202, 210, 25, 62, 82, 237, 208, 188, 47, 198, 192, 190, 79, 55, 184, 190, 232, 65, 35, 190, 163, 197, 217, 188, 156, 21, 139, 189, 43, 252, 239, 61, 9, 120, 170, 62, 65, 183, 78, 62, 33, 51, 194, 189, 63, 11, 55, 62, 218, 248, 34, 191, 237, 148, 21, 61, 121, 58, 61, 187, 15, 99, 198, 60, 187, 218, 133, 59, 147, 76, 18, 60, 122, 146, 6, 189, 183, 82, 6, 191, 180, 84, 64, 61, 226, 35, 50, 191, 119, 213, 103, 190, 31, 39, 171, 62, 167, 53, 181, 190, 72, 41, 103, 61, 224, 178, 220, 189, 83, 96, 78, 62, 180, 127, 133, 61, 225, 26, 221, 189, 239, 30, 100, 190, 127, 206, 113, 191, 212, 237, 155, 190, 23, 61, 30, 191, 248, 73, 134, 190, 202, 211, 183, 190, 60, 181, 56, 191, 162, 212, 4, 62, 217, 81, 123, 191, 233, 32, 113, 190, 135, 17, 12, 191, 163, 167, 110, 190, 119, 244, 134, 61, 44, 101, 206, 190, 243, 253, 156, 62, 0, 78, 124, 61, 192, 98, 1, 191, 198, 160, 2, 191, 199, 136, 128, 187, 15, 221, 95, 62, 4, 199, 173, 189, 100, 208, 142, 62, 107, 91, 124, 190, 66, 84, 28, 190, 9, 183, 136, 191, 130, 66, 184, 62, 148, 87, 204, 62, 2, 101, 147, 189, 97, 38, 152, 190, 81, 253, 60, 62, 147, 229, 2, 63, 152, 249, 48, 191, 33, 161, 220, 60, 142, 9, 64, 191, 150, 79, 14, 190, 150, 7, 201, 190, 143, 222, 67, 59, 78, 240, 18, 190, 80, 243, 19, 62, 153, 35, 139, 188, 30, 18, 129, 61, 56, 64, 97, 189, 95, 107, 143, 61, 230, 91, 220, 189, 244, 166, 232, 189, 34, 53, 25, 61, 166, 128, 174, 62, 248, 59, 31, 62, 68, 90, 130, 62, 66, 49, 126, 61, 122, 128, 3, 61, 60, 254, 177, 62, 112, 149, 93, 62, 178, 234, 187, 62, 113, 251, 182, 62, 185, 245, 51, 189, 4, 60, 7, 62, 165, 45, 8, 191, 51, 200, 197, 62, 175, 252, 124, 62, 178, 247, 216, 61, 87, 54, 239, 188, 66, 191, 177, 61, 127, 17, 127, 62, 1, 70, 24, 189, 40, 35, 84, 62, 201, 105, 144, 62, 141, 218, 229, 62, 230, 3, 152, 59, 234, 1, 89, 191, 212, 117, 60, 191, 124, 205, 94, 61, 125, 120, 205, 190, 254, 164, 37, 61, 109, 174, 38, 191, 41, 239, 141, 189, 25, 197, 27, 190, 148, 150, 104, 190, 130, 175, 0, 189, 23, 33, 202, 60, 253, 229, 255, 190, 81, 210, 67, 191, 83, 67, 154, 190, 24, 40, 139, 62, 136, 238, 233, 190, 54, 129, 16, 62, 13, 234, 34, 191, 33, 86, 174, 61, 85, 228, 146, 191, 209, 181, 23, 191, 80, 13, 148, 62, 191, 171, 29, 62, 4, 84, 196, 190, 167, 253, 129, 61, 63, 128, 197, 62, 63, 201, 60, 191, 90, 59, 4, 191, 1, 243, 71, 191, 203, 210, 219, 60, 163, 211, 35, 191, 122, 90, 69, 60, 131, 37, 207, 190, 222, 63, 182, 190, 117, 71, 250, 60, 110, 139, 212, 190, 39, 18, 27, 62, 13, 177, 19, 190, 152, 84, 206, 188, 82, 151, 12, 62, 165, 238, 51, 188, 197, 234, 196, 190, 127, 104, 75, 62, 217, 216, 92, 190, 251, 147, 225, 61, 114, 75, 147, 62, 183, 86, 55, 62, 56, 98, 54, 189, 2, 103, 188, 61, 238, 204, 108, 62, 100, 11, 128, 190, 108, 195, 0, 191, 27, 205, 7, 63, 24, 180, 128, 188, 83, 231, 83, 190, 64, 223, 25, 61, 72, 180, 91, 62, 38, 67, 247, 62, 48, 59, 203, 190, 116, 1, 141, 188, 211, 231, 8, 191, 158, 69, 20, 62, 1, 61, 126, 191, 219, 118, 135, 189, 227, 248, 202, 190, 15, 34, 34, 190, 19, 22, 0, 62, 54, 240, 163, 190, 140, 47, 224, 61, 84, 134, 91, 190, 217, 36, 135, 61, 230, 33, 221, 189, 74, 184, 69, 62, 90, 13, 146, 190, 197, 6, 42, 61, 107, 13, 106, 190, 128, 76, 125, 62, 119, 224, 116, 62, 120, 210, 52, 61, 187, 250, 34, 61, 193, 169, 87, 189, 173, 178, 121, 61, 73, 217, 101, 190, 99, 243, 48, 191, 194, 238, 18, 63, 94, 233, 177, 189, 184, 75, 181, 190, 142, 98, 161, 61, 80, 54, 151, 62, 66, 16, 233, 62, 52, 9, 16, 191, 144, 182, 126, 62, 69, 243, 43, 191, 185, 30, 23, 189, 223, 143, 114, 191, 233, 196, 218, 61, 234, 145, 157, 59, 121, 94, 7, 190, 188, 98, 228, 189, 42, 201, 154, 189, 230, 37, 255, 189, 49, 236, 140, 60, 65, 222, 9, 61, 4, 89, 207, 189, 253, 67, 131, 60, 244, 73, 136, 61, 72, 234, 157, 186, 180, 158, 25, 62, 222, 23, 61, 61, 26, 103, 216, 189, 64, 86, 105, 62, 109, 109, 147, 190, 98, 42, 221, 61, 120, 147, 242, 61, 19, 122, 236, 189, 89, 28, 213, 189, 65, 246, 91, 190, 154, 234, 181, 61, 216, 87, 17, 62, 177, 145, 216, 61, 65, 68, 180, 188, 119, 227, 81, 189, 39, 32, 126, 190, 203, 51, 19, 189, 166, 156, 181, 190, 154, 243, 243, 61, 71, 36, 108, 190, 248, 252, 253, 189, 68, 150, 93, 190, 35, 139, 217, 62, 172, 7, 49, 189, 242, 73, 150, 62, 210, 4, 196, 190, 220, 72, 193, 61, 36, 225, 200, 61, 109, 197, 50, 62, 255, 94, 58, 190, 85, 245, 254, 189, 64, 201, 158, 62, 190, 71, 157, 62, 40, 249, 96, 188, 133, 28, 233, 190, 22, 168, 141, 61, 85, 81, 49, 188, 173, 234, 246, 189, 59, 136, 227, 60, 199, 94, 91, 61, 7, 237, 112, 190, 24, 23, 65, 191, 212, 147, 28, 189, 145, 238, 192, 62, 75, 194, 148, 62, 194, 89, 62, 62, 78, 235, 20, 191, 148, 168, 230, 62, 41, 169, 219, 190, 114, 80, 74, 188, 41, 247, 42, 190, 196, 108, 195, 190, 4, 138, 25, 189, 38, 177, 53, 190, 48, 1, 175, 62, 168, 249, 136, 61, 101, 39, 26, 191, 9, 160, 216, 190, 135, 194, 133, 62, 50, 137, 166, 190, 25, 44, 88, 61, 41, 53, 179, 189, 9, 52, 49, 191, 19, 206, 31, 61, 139, 45, 161, 62, 171, 176, 59, 62, 207, 10, 72, 62, 53, 191, 148, 190, 172, 200, 107, 189, 170, 224, 98, 61, 30, 39, 129, 61, 90, 141, 191, 61, 78, 173, 221, 61, 58, 144, 237, 62, 233, 29, 133, 191, 1, 111, 60, 191, 132, 35, 149, 61, 98, 71, 166, 190, 54, 218, 30, 191, 240, 170, 174, 62, 89, 164, 173, 188, 54, 126, 224, 189, 102, 171, 5, 62, 93, 218, 113, 61, 223, 151, 34, 191, 163, 178, 41, 62, 77, 149, 178, 61, 108, 212, 138, 58, 202, 177, 238, 189, 158, 224, 250, 190, 220, 194, 9, 62, 100, 15, 69, 62, 8, 159, 104, 189, 111, 176, 123, 190, 76, 209, 44, 62, 53, 137, 27, 61, 249, 66, 187, 62, 172, 25, 66, 190, 184, 46, 206, 61, 142, 197, 28, 189, 71, 164, 21, 58, 65, 144, 51, 190, 152, 23, 200, 60, 217, 15, 17, 189, 26, 104, 160, 62, 113, 170, 150, 62, 97, 174, 163, 62, 116, 216, 76, 62, 188, 119, 85, 189, 40, 125, 32, 191, 188, 16, 104, 190, 244, 87, 196, 62, 171, 207, 154, 62, 124, 248, 74, 189, 78, 121, 160, 189, 188, 16, 6, 63, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 49, 13, 120, 61, 169, 209, 14, 190, 214, 22, 198, 189, 39, 244, 57, 190, 85, 126, 35, 190, 14, 202, 63, 190, 172, 30, 84, 189, 95, 144, 10, 61, 244, 100, 222, 60, 36, 196, 35, 190, 96, 72, 36, 59, 42, 12, 231, 61, 126, 206, 116, 59, 186, 60, 144, 189, 217, 79, 184, 187, 150, 71, 0, 190, 189, 252, 238, 189, 185, 30, 58, 190, 9, 31, 27, 62, 225, 89, 14, 190, 203, 24, 154, 61, 162, 15, 63, 189, 113, 91, 149, 187, 12, 181, 172, 189, 132, 162, 61, 61, 39, 95, 32, 62, 9, 49, 133, 189, 121, 72, 113, 61, 120, 25, 161, 61, 31, 25, 28, 190, 19, 233, 227, 190, 92, 221, 123, 188, 88, 189, 78, 190, 10, 42, 21, 191, 60, 38, 135, 189, 139, 147, 71, 191, 166, 99, 242, 190, 21, 158, 34, 62, 242, 76, 168, 60, 116, 121, 40, 191, 209, 117, 6, 63, 53, 29, 53, 191, 31, 175, 176, 60, 58, 182, 200, 191, 18, 220, 40, 190, 135, 215, 23, 63, 206, 202, 112, 190, 135, 31, 113, 61, 159, 144, 230, 190, 142, 75, 42, 191, 172, 88, 164, 62, 136, 128, 107, 190, 83, 165, 3, 63, 199, 186, 168, 62, 89, 133, 161, 191, 190, 240, 241, 190, 251, 214, 211, 190, 62, 196, 154, 190, 104, 108, 230, 62, 36, 79, 193, 190, 251, 66, 81, 190, 214, 238, 196, 62, 121, 135, 197, 189, 122, 128, 144, 61, 53, 211, 117, 62, 244, 233, 134, 60, 129, 133, 209, 62, 219, 90, 34, 191, 118, 68, 51, 189, 68, 52, 14, 61, 35, 160, 72, 189, 127, 146, 182, 190, 7, 220, 82, 189, 54, 198, 38, 62, 34, 21, 137, 61, 230, 124, 60, 62, 197, 215, 219, 189, 232, 117, 245, 188, 140, 35, 29, 62, 37, 137, 132, 61, 153, 72, 198, 62, 73, 197, 197, 61, 246, 222, 59, 190, 189, 191, 229, 190, 16, 124, 43, 188, 170, 67, 140, 62, 158, 162, 193, 61, 224, 216, 226, 188, 152, 5, 157, 190, 106, 96, 158, 61, 40, 53, 239, 187, 1, 18, 99, 62, 64, 41, 10, 62, 94, 152, 197, 190, 105, 144, 99, 190, 29, 24, 9, 62, 142, 86, 174, 62, 237, 246, 35, 191, 239, 24, 129, 188, 192, 58, 7, 191, 25, 87, 200, 190, 114, 155, 96, 62, 211, 248, 21, 189, 0, 122, 126, 61, 196, 113, 8, 63, 128, 236, 242, 61, 59, 143, 234, 189, 175, 158, 178, 61, 123, 207, 99, 191, 24, 161, 13, 62, 163, 126, 51, 191, 20, 167, 177, 61, 228, 40, 185, 62, 149, 66, 60, 62, 169, 10, 44, 62, 209, 8, 228, 190, 85, 54, 6, 63, 112, 64, 144, 62, 148, 17, 82, 62, 207, 184, 131, 190, 192, 51, 122, 190, 70, 96, 74, 62, 119, 102, 130, 191, 28, 220, 31, 62, 36, 64, 76, 190, 138, 170, 143, 62, 120, 99, 41, 62, 131, 81, 173, 189, 231, 209, 132, 190, 220, 227, 162, 61, 123, 68, 202, 190, 136, 64, 235, 62, 88, 204, 138, 190, 243, 219, 108, 190, 75, 44, 140, 189, 128, 33, 109, 62, 25, 213, 3, 191, 96, 77, 142, 190, 22, 101, 248, 190, 22, 204, 215, 61, 191, 249, 14, 63, 246, 204, 213, 187, 245, 168, 183, 62, 1, 39, 46, 189, 7, 94, 43, 190, 193, 184, 136, 190, 104, 110, 85, 190, 186, 136, 8, 63, 30, 96, 20, 191, 103, 166, 166, 189, 24, 176, 6, 190, 78, 233, 136, 62, 163, 51, 138, 62, 198, 52, 7, 191, 89, 47, 162, 62, 228, 83, 152, 190, 71, 218, 48, 62, 101, 15, 23, 191, 59, 191, 192, 190, 77, 21, 75, 62, 11, 134, 120, 62, 107, 97, 24, 191, 236, 57, 137, 62, 45, 67, 24, 191, 176, 208, 45, 187, 32, 5, 85, 62, 101, 109, 40, 190, 143, 87, 169, 189, 169, 244, 46, 63, 153, 144, 88, 62, 161, 31, 134, 189, 239, 206, 161, 62, 69, 160, 91, 190, 136, 86, 146, 61, 206, 84, 51, 190, 66, 22, 96, 61, 143, 142, 255, 62, 85, 132, 70, 189, 106, 19, 29, 62, 196, 209, 50, 191, 30, 52, 185, 62, 190, 94, 106, 62, 150, 81, 51, 62, 15, 197, 203, 189, 197, 117, 6, 190, 108, 226, 48, 62, 162, 67, 201, 190, 34, 44, 46, 185, 52, 25, 176, 189, 229, 42, 61, 62, 163, 95, 193, 190, 97, 99, 237, 61, 228, 218, 211, 190, 129, 101, 112, 62, 168, 249, 0, 191, 227, 242, 79, 191, 87, 55, 96, 190, 169, 23, 255, 190, 251, 129, 20, 62, 177, 26, 121, 191, 237, 253, 160, 190, 238, 18, 154, 190, 32, 55, 194, 190, 23, 192, 239, 189, 194, 141, 226, 62, 198, 98, 202, 62, 112, 60, 187, 62, 250, 111, 186, 189, 240, 29, 227, 190, 158, 80, 129, 190, 156, 149, 202, 190, 118, 200, 2, 63, 150, 169, 56, 62, 166, 46, 45, 190, 46, 176, 90, 189, 167, 11, 193, 189, 42, 15, 13, 63, 28, 191, 29, 191, 78, 27, 0, 63, 150, 124, 140, 190, 215, 139, 137, 62, 90, 47, 165, 190, 147, 149, 226, 62, 69, 206, 25, 190, 231, 102, 204, 59, 245, 76, 245, 61, 156, 40, 184, 61, 208, 100, 1, 62, 242, 21, 238, 188, 54, 184, 209, 61, 245, 167, 152, 61, 255, 49, 143, 62, 217, 140, 169, 190, 60, 74, 202, 188, 11, 46, 174, 190, 68, 169, 11, 62, 71, 255, 22, 62, 244, 35, 242, 60, 131, 148, 22, 62, 41, 3, 199, 60, 128, 92, 117, 190, 30, 208, 210, 189, 176, 59, 94, 190, 43, 163, 17, 63, 212, 226, 152, 190, 169, 53, 220, 189, 103, 118, 12, 190, 214, 25, 154, 62, 7, 136, 142, 62, 40, 74, 141, 190, 20, 91, 173, 62, 29, 98, 240, 190, 188, 84, 118, 61, 91, 51, 13, 191, 124, 235, 0, 62, 51, 211, 158, 61, 195, 27, 80, 61, 198, 216, 212, 189, 73, 140, 128, 61, 198, 125, 20, 62, 210, 11, 120, 60, 122, 79, 84, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 131, 89, 1, 190, 58, 128, 184, 189, 97, 140, 178, 61, 56, 47, 225, 188, 16, 74, 201, 60, 151, 93, 234, 61, 169, 45, 213, 189, 102, 18, 29, 61, 118, 140, 15, 190, 13, 225, 190, 60, 249, 228, 100, 189, 6, 92, 52, 190, 0, 230, 220, 189, 119, 182, 36, 190, 157, 42, 38, 61, 31, 226, 88, 188, 172, 50, 142, 189, 129, 202, 106, 61, 148, 2, 70, 190, 89, 227, 34, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 218, 66, 39, 190, 28, 173, 0, 62, 86, 2, 162, 189, 140, 46, 26, 189, 20, 245, 171, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 4, 69, 81, 189, 81, 246, 135, 59, 162, 26, 3, 190, 247, 47, 171, 189, 108, 71, 210, 189, 226, 149, 41, 190, 6, 102, 67, 61, 204, 181, 27, 190, 16, 136, 224, 61, 25, 50, 204, 59, 60, 184, 176, 189, 63, 206, 182, 61, 89, 11, 244, 61, 150, 172, 50, 58, 128, 164, 127, 189, 84, 175, 168, 60, 140, 128, 43, 61, 67, 173, 92, 190, 97, 101, 95, 190, 228, 145, 54, 190, 250, 13, 226, 61, 112, 191, 43, 188, 89, 154, 91, 190, 124, 91, 13, 189, 28, 16, 109, 62, 75, 132, 30, 191, 175, 0, 90, 62, 21, 66, 8, 191, 244, 78, 198, 189, 29, 233, 74, 61, 179, 203, 51, 188, 127, 135, 148, 189, 162, 251, 154, 62, 163, 88, 172, 62, 246, 26, 221, 61, 146, 102, 92, 61, 107, 19, 127, 190, 11, 119, 120, 61, 22, 114, 14, 190, 122, 221, 163, 61, 124, 65, 224, 62, 97, 211, 67, 62, 79, 229, 151, 62, 194, 139, 113, 191, 253, 16, 236, 61, 212, 61, 70, 62, 93, 83, 192, 61, 98, 206, 85, 190, 96, 5, 161, 189, 95, 8, 19, 62, 6, 241, 81, 190, 14, 12, 80, 62, 203, 206, 172, 189, 155, 227, 167, 189, 111, 254, 184, 62, 100, 240, 104, 189, 169, 174, 143, 190, 204, 85, 24, 62, 106, 147, 136, 188, 240, 171, 47, 62, 120, 180, 7, 189, 82, 5, 65, 190, 79, 4, 34, 189, 84, 232, 69, 186, 244, 139, 146, 190, 232, 175, 137, 62, 120, 117, 219, 61, 56, 121, 73, 61, 139, 143, 145, 190, 17, 31, 160, 61, 179, 217, 231, 190, 12, 156, 65, 61, 139, 195, 158, 61, 68, 134, 5, 62, 73, 34, 158, 189, 214, 77, 85, 190, 232, 37, 176, 189, 206, 75, 219, 61, 146, 74, 71, 189, 133, 8, 135, 62, 48, 246, 169, 62, 201, 152, 183, 190, 96, 104, 249, 190, 241, 21, 233, 190, 186, 65, 4, 62, 164, 253, 187, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 44, 3, 220, 62, 52, 194, 189, 190, 21, 82, 32, 190, 149, 80, 55, 62, 152, 252, 54, 62, 13, 248, 214, 190, 61, 185, 157, 189, 51, 159, 63, 190, 70, 210, 2, 190, 69, 58, 115, 190, 81, 74, 132, 190, 159, 82, 130, 60, 27, 181, 165, 189, 247, 140, 45, 59, 171, 117, 59, 62, 177, 133, 149, 62, 0, 38, 174, 62, 177, 40, 221, 188, 66, 97, 179, 62, 249, 28, 57, 62, 34, 60, 38, 189, 79, 250, 168, 190, 30, 185, 44, 62, 222, 252, 147, 188, 77, 215, 41, 62, 37, 81, 150, 62, 36, 107, 135, 189, 150, 211, 221, 61, 106, 96, 23, 186, 78, 194, 192, 61, 134, 122, 129, 62, 171, 58, 202, 191, 60, 104, 156, 190, 140, 232, 137, 59, 253, 214, 206, 62, 252, 158, 78, 191, 18, 156, 162, 62, 117, 4, 24, 191, 191, 48, 154, 62, 121, 35, 147, 62, 91, 155, 67, 60, 47, 47, 184, 190, 211, 254, 116, 189, 245, 224, 194, 62, 247, 206, 251, 62, 105, 5, 41, 63, 40, 96, 123, 191, 179, 45, 84, 62, 207, 88, 132, 191, 46, 48, 28, 191, 136, 118, 249, 62, 166, 30, 4, 191, 160, 237, 133, 189, 222, 143, 214, 61, 254, 113, 254, 189, 218, 4, 175, 62, 85, 147, 154, 190, 159, 90, 216, 189, 131, 36, 245, 190, 255, 102, 110, 190, 45, 81, 143, 191, 188, 87, 95, 62, 125, 56, 132, 191, 205, 121, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 64, 65, 62, 62, 231, 214, 191, 61, 38, 91, 253, 189, 219, 220, 50, 190, 151, 11, 217, 189, 243, 171, 142, 62, 54, 142, 160, 61, 224, 96, 205, 62, 93, 98, 74, 62, 246, 16, 18, 62, 137, 158, 158, 62, 252, 136, 131, 62, 196, 95, 35, 59, 24, 189, 3, 191, 31, 202, 100, 190, 233, 207, 149, 61, 220, 187, 178, 61, 198, 98, 139, 62, 177, 101, 184, 61, 185, 221, 84, 62, 216, 250, 179, 60, 249, 235, 26, 62, 255, 80, 150, 62, 65, 105, 239, 61, 182, 39, 201, 187, 86, 182, 22, 190, 123, 24, 140, 62, 190, 56, 13, 61, 255, 58, 37, 190, 114, 11, 210, 188, 225, 238, 196, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 22, 230, 236, 62, 28, 56, 142, 190, 153, 217, 92, 62, 190, 128, 139, 60, 195, 37, 219, 62, 220, 33, 152, 62, 153, 73, 145, 63, 121, 245, 131, 190, 205, 80, 179, 63, 197, 68, 163, 62, 110, 64, 238, 62, 8, 90, 186, 187, 68, 77, 79, 191, 33, 191, 6, 63, 71, 22, 60, 63, 73, 6, 171, 60, 39, 24, 14, 62, 34, 231, 193, 63, 237, 171, 61, 190, 80, 9, 30, 191, 53, 41, 222, 62, 7, 216, 18, 191, 207, 145, 136, 63, 251, 191, 168, 62, 153, 71, 1, 61, 16, 131, 220, 189, 208, 143, 135, 190, 157, 31, 171, 61, 188, 197, 185, 189, 110, 77, 122, 190, 28, 154, 202, 191, 81, 214, 233, 61, 19, 155, 1, 62, 58, 116, 106, 190, 115, 79, 218, 62, 67, 134, 230, 189, 85, 92, 54, 189, 101, 130, 151, 190, 55, 137, 156, 62, 77, 66, 156, 190, 216, 206, 146, 190, 201, 227, 175, 190, 70, 210, 32, 190, 148, 25, 94, 190, 174, 171, 171, 62, 144, 1, 175, 62, 196, 6, 203, 189, 133, 96, 171, 61, 218, 54, 0, 62, 72, 169, 182, 62, 186, 152, 136, 61, 212, 60, 99, 61, 218, 255, 23, 63, 175, 63, 241, 185, 119, 28, 12, 63, 51, 171, 247, 189, 208, 61, 10, 189, 83, 44, 31, 190, 150, 12, 132, 190, 110, 60, 3, 191, 203, 145, 20, 190, 175, 117, 118, 187, 33, 135, 254, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 235, 226, 189, 92, 111, 251, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {129, 103, 67, 191, 125, 96, 213, 190, 204, 92, 57, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 58, 171, 63, 60, 135, 109, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}