// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 191, 193, 62, 177, 197, 190, 189, 29, 77, 53, 191, 225, 56, 96, 191, 180, 168, 169, 190, 10, 220, 22, 191, 16, 25, 40, 63, 36, 119, 144, 63, 101, 151, 150, 62, 180, 173, 249, 189, 119, 218, 45, 190, 4, 0, 23, 63, 222, 43, 134, 188, 115, 134, 95, 62, 41, 198, 195, 190, 118, 61, 50, 63, 106, 204, 103, 191, 36, 186, 193, 190, 32, 185, 239, 62, 77, 118, 53, 63, 133, 227, 111, 62, 122, 71, 26, 190, 67, 241, 199, 190, 170, 141, 205, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 182, 29, 41, 63, 211, 96, 110, 191, 228, 121, 220, 190, 14, 236, 224, 189, 37, 148, 139, 191, 85, 168, 131, 189, 135, 191, 78, 63, 228, 61, 135, 63, 198, 48, 70, 62, 179, 83, 60, 63, 120, 121, 24, 63, 155, 229, 154, 62, 48, 209, 138, 62, 97, 76, 149, 63, 13, 1, 86, 62, 110, 205, 46, 190, 68, 11, 168, 63, 64, 171, 133, 62, 62, 26, 0, 190, 65, 226, 205, 61, 8, 12, 76, 61, 200, 50, 160, 61, 46, 127, 131, 63, 58, 225, 170, 62, 48, 10, 128, 190, 41, 213, 75, 191, 216, 59, 244, 62, 168, 136, 213, 62, 18, 42, 118, 63, 25, 6, 52, 62, 125, 11, 102, 62, 139, 8, 166, 190, 4, 168, 6, 63, 211, 171, 216, 190, 104, 74, 132, 191, 45, 177, 31, 191, 210, 117, 176, 190, 32, 252, 233, 62, 94, 49, 218, 61, 195, 12, 131, 190, 220, 6, 53, 191, 105, 249, 54, 189, 237, 180, 210, 190, 213, 78, 33, 62, 69, 135, 168, 190, 25, 52, 205, 62, 216, 166, 135, 63, 233, 166, 220, 62, 178, 163, 33, 62, 229, 247, 132, 62, 207, 169, 26, 191, 14, 188, 101, 63, 46, 59, 148, 191, 125, 89, 159, 190, 50, 178, 97, 63, 30, 203, 110, 63, 169, 189, 160, 62, 125, 119, 62, 190, 207, 15, 186, 63, 129, 200, 156, 62, 114, 215, 30, 190, 82, 20, 243, 61, 219, 141, 159, 190, 214, 155, 128, 62, 115, 166, 87, 63, 55, 41, 221, 62, 241, 72, 157, 190, 75, 237, 221, 191, 173, 253, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 43, 76, 191, 57, 234, 214, 190, 49, 43, 133, 190, 4, 160, 63, 189, 0, 212, 41, 62, 193, 35, 150, 190, 90, 240, 188, 190, 28, 186, 27, 63, 166, 7, 180, 190, 76, 14, 194, 60, 183, 176, 137, 62, 132, 170, 94, 62, 40, 80, 29, 191, 140, 110, 1, 62, 7, 55, 80, 190, 238, 140, 39, 63, 223, 85, 105, 187, 165, 95, 17, 63, 10, 90, 249, 61, 17, 232, 195, 190, 72, 107, 23, 189, 16, 178, 187, 190, 200, 60, 172, 62, 26, 63, 231, 62, 175, 117, 166, 189, 134, 210, 231, 61, 121, 15, 192, 62, 54, 227, 240, 190, 13, 58, 109, 190, 184, 82, 64, 190, 167, 228, 128, 62, 235, 34, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 215, 176, 237, 61, 136, 116, 65, 191, 88, 143, 181, 190, 211, 45, 193, 61, 197, 244, 141, 190, 155, 68, 29, 63, 181, 91, 98, 190, 116, 18, 151, 188, 29, 69, 8, 61, 185, 55, 238, 61, 60, 33, 132, 62, 221, 112, 1, 188, 57, 247, 132, 190, 131, 244, 74, 190, 151, 167, 43, 190, 149, 26, 123, 62, 119, 235, 158, 190, 110, 213, 208, 61, 48, 72, 214, 188, 149, 196, 126, 189, 57, 161, 240, 190, 25, 135, 38, 190, 112, 134, 38, 62, 99, 95, 19, 190, 180, 221, 167, 190, 163, 165, 153, 62, 190, 93, 165, 62, 122, 201, 9, 191, 213, 191, 172, 190, 235, 250, 194, 190, 69, 145, 246, 60, 146, 219, 40, 190, 2, 90, 164, 61, 106, 38, 84, 189, 11, 30, 19, 62, 27, 242, 148, 59, 167, 63, 243, 189, 201, 109, 2, 60, 154, 223, 54, 189, 95, 203, 140, 61, 115, 83, 51, 61, 65, 102, 123, 62, 213, 45, 207, 62, 19, 126, 195, 61, 56, 218, 125, 61, 182, 198, 93, 62, 64, 75, 13, 62, 185, 58, 96, 61, 72, 183, 119, 60, 43, 122, 112, 60, 89, 63, 2, 190, 10, 124, 48, 61, 182, 223, 65, 62, 43, 169, 195, 189, 236, 31, 178, 62, 201, 163, 185, 190, 33, 132, 97, 62, 24, 69, 241, 189, 88, 207, 204, 61, 217, 176, 15, 62, 70, 70, 33, 190, 213, 66, 38, 190, 249, 203, 160, 62, 85, 115, 187, 62, 54, 49, 113, 61, 237, 212, 29, 62, 102, 245, 34, 191, 180, 79, 168, 60, 128, 146, 114, 190, 208, 201, 135, 62, 121, 187, 79, 191, 12, 153, 47, 62, 130, 89, 138, 61, 138, 251, 86, 62, 57, 14, 11, 62, 67, 102, 150, 189, 67, 30, 173, 190, 113, 214, 201, 190, 58, 133, 190, 189, 76, 153, 118, 190, 69, 137, 219, 190, 85, 88, 175, 62, 116, 165, 102, 190, 70, 202, 35, 62, 245, 1, 164, 188, 247, 171, 13, 190, 225, 117, 136, 189, 143, 32, 76, 190, 106, 114, 157, 190, 145, 241, 42, 62, 142, 111, 168, 62, 136, 83, 52, 191, 182, 130, 110, 190, 187, 177, 104, 190, 50, 81, 185, 60, 84, 57, 155, 189, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 162, 202, 234, 60, 101, 148, 147, 62, 28, 164, 36, 189, 29, 149, 188, 61, 167, 131, 206, 62, 168, 34, 50, 60, 203, 135, 169, 62, 4, 69, 129, 59, 160, 167, 163, 189, 65, 43, 31, 61, 130, 209, 84, 191, 14, 1, 50, 190, 230, 69, 105, 62, 215, 175, 203, 189, 252, 136, 122, 189, 174, 24, 57, 189, 120, 202, 193, 189, 76, 230, 86, 189, 43, 182, 40, 190, 170, 145, 143, 189, 148, 223, 58, 62, 92, 108, 55, 62, 87, 105, 55, 190, 138, 39, 86, 62, 252, 140, 244, 61, 137, 190, 80, 60, 204, 156, 181, 190, 111, 13, 195, 61, 187, 53, 191, 62, 132, 202, 92, 62, 248, 148, 72, 62, 48, 48, 54, 189, 28, 42, 86, 190, 92, 119, 181, 189, 106, 41, 117, 190, 145, 194, 53, 61, 228, 157, 51, 189, 241, 101, 245, 61, 63, 71, 111, 189, 86, 222, 33, 62, 33, 51, 194, 189, 184, 75, 64, 62, 173, 246, 142, 190, 149, 28, 129, 60, 110, 76, 138, 190, 112, 109, 119, 189, 44, 201, 188, 188, 82, 121, 155, 60, 105, 205, 105, 190, 53, 231, 123, 190, 154, 251, 140, 59, 134, 72, 73, 190, 239, 93, 149, 190, 49, 10, 248, 61, 192, 30, 41, 188, 66, 129, 67, 62, 29, 44, 59, 190, 125, 156, 9, 62, 26, 65, 168, 61, 157, 17, 30, 190, 145, 85, 128, 190, 245, 16, 61, 191, 206, 137, 95, 190, 39, 35, 131, 191, 66, 164, 135, 190, 167, 58, 16, 191, 93, 93, 13, 191, 90, 147, 20, 62, 108, 137, 122, 191, 58, 192, 98, 189, 96, 136, 198, 190, 92, 64, 36, 190, 119, 244, 134, 61, 103, 171, 22, 190, 65, 204, 119, 62, 147, 60, 4, 189, 239, 81, 232, 190, 54, 20, 134, 190, 234, 164, 37, 61, 200, 217, 69, 62, 113, 225, 1, 61, 150, 145, 130, 62, 222, 184, 26, 190, 216, 0, 61, 190, 143, 82, 253, 190, 177, 70, 204, 62, 138, 209, 180, 62, 81, 48, 157, 190, 0, 3, 127, 190, 85, 224, 94, 189, 224, 5, 200, 62, 73, 67, 28, 191, 211, 84, 138, 61, 122, 5, 64, 191, 74, 245, 8, 190, 216, 237, 141, 61, 204, 25, 141, 188, 129, 243, 254, 189, 111, 122, 67, 62, 64, 232, 20, 61, 106, 42, 210, 61, 62, 164, 70, 189, 3, 236, 161, 61, 97, 122, 99, 189, 244, 166, 232, 189, 245, 163, 68, 60, 98, 26, 29, 62, 37, 200, 89, 62, 70, 22, 132, 62, 26, 125, 144, 61, 196, 106, 5, 61, 224, 248, 171, 62, 205, 79, 55, 62, 251, 228, 120, 62, 220, 18, 205, 62, 136, 11, 213, 189, 167, 31, 183, 61, 195, 199, 147, 190, 8, 53, 76, 62, 171, 127, 83, 62, 163, 236, 167, 61, 159, 77, 209, 60, 101, 98, 164, 61, 235, 219, 151, 62, 73, 123, 2, 189, 156, 173, 58, 62, 81, 129, 94, 62, 80, 115, 187, 62, 83, 193, 8, 190, 167, 116, 117, 191, 114, 150, 216, 190, 53, 248, 206, 61, 60, 72, 43, 191, 162, 163, 54, 61, 88, 64, 222, 190, 192, 149, 207, 189, 25, 197, 27, 190, 19, 242, 230, 189, 19, 9, 24, 190, 113, 117, 155, 61, 228, 92, 241, 190, 107, 141, 127, 190, 82, 17, 160, 189, 35, 122, 154, 62, 199, 114, 145, 190, 9, 164, 8, 62, 106, 235, 191, 190, 212, 128, 104, 61, 196, 161, 89, 191, 254, 10, 215, 189, 138, 203, 80, 62, 213, 146, 201, 189, 191, 153, 149, 190, 184, 106, 107, 189, 188, 111, 109, 62, 24, 136, 21, 191, 75, 38, 160, 190, 129, 251, 89, 191, 165, 252, 171, 61, 68, 10, 240, 190, 44, 212, 87, 62, 43, 102, 109, 190, 219, 156, 214, 190, 92, 79, 197, 60, 128, 218, 213, 190, 54, 240, 19, 62, 240, 60, 124, 190, 19, 226, 219, 189, 82, 151, 12, 62, 203, 55, 171, 188, 213, 129, 168, 190, 188, 178, 21, 62, 181, 205, 169, 190, 9, 67, 140, 61, 225, 10, 139, 62, 142, 221, 46, 62, 122, 133, 87, 188, 11, 64, 31, 62, 55, 24, 56, 62, 109, 74, 116, 190, 39, 77, 197, 190, 236, 79, 173, 62, 53, 26, 136, 61, 110, 211, 6, 189, 155, 60, 82, 60, 150, 151, 13, 62, 38, 236, 221, 62, 47, 49, 237, 190, 3, 235, 7, 189, 14, 5, 170, 190, 108, 215, 67, 62, 135, 250, 74, 191, 157, 87, 123, 61, 73, 124, 177, 190, 88, 39, 94, 190, 9, 207, 142, 61, 136, 61, 198, 190, 144, 176, 58, 62, 122, 191, 153, 190, 255, 136, 66, 61, 230, 33, 221, 189, 180, 114, 135, 62, 133, 72, 34, 189, 81, 37, 153, 188, 175, 36, 165, 190, 107, 128, 74, 62, 180, 105, 82, 62, 16, 254, 125, 61, 131, 61, 59, 61, 14, 238, 76, 61, 236, 136, 85, 185, 101, 254, 100, 190, 244, 24, 142, 190, 71, 218, 157, 62, 251, 139, 52, 62, 158, 3, 88, 190, 132, 253, 77, 61, 144, 26, 27, 62, 152, 24, 248, 62, 60, 164, 31, 191, 191, 79, 92, 62, 66, 68, 16, 191, 96, 96, 19, 58, 176, 5, 163, 190, 242, 53, 13, 62, 187, 142, 205, 61, 227, 202, 29, 190, 241, 102, 223, 61, 116, 222, 18, 61, 87, 222, 99, 187, 51, 221, 44, 190, 89, 1, 43, 62, 4, 89, 207, 189, 172, 173, 176, 61, 6, 131, 96, 60, 163, 38, 135, 61, 112, 56, 121, 189, 160, 223, 206, 60, 150, 74, 244, 189, 196, 137, 140, 62, 244, 44, 106, 190, 84, 96, 199, 61, 85, 240, 33, 62, 155, 41, 11, 189, 56, 186, 175, 189, 143, 47, 0, 190, 181, 60, 133, 61, 106, 128, 35, 62, 59, 111, 90, 61, 183, 229, 1, 62, 194, 11, 149, 188, 4, 136, 136, 190, 11, 27, 54, 189, 178, 102, 153, 190, 91, 134, 224, 61, 252, 54, 74, 190, 207, 236, 161, 190, 83, 240, 107, 189, 3, 172, 197, 62, 98, 150, 159, 60, 7, 31, 51, 189, 72, 208, 159, 190, 65, 113, 210, 61, 189, 232, 191, 61, 109, 197, 50, 62, 0, 152, 57, 190, 94, 182, 19, 189, 146, 37, 96, 62, 255, 69, 201, 62, 207, 39, 202, 189, 92, 223, 166, 190, 82, 124, 161, 61, 210, 47, 144, 59, 220, 146, 27, 189, 63, 207, 89, 189, 244, 183, 235, 61, 108, 96, 62, 190, 231, 84, 142, 190, 2, 19, 130, 60, 190, 3, 55, 62, 144, 192, 162, 62, 114, 79, 0, 190, 49, 104, 159, 190, 49, 112, 237, 62, 80, 115, 153, 190, 101, 140, 79, 190, 123, 170, 23, 190, 142, 17, 47, 190, 32, 149, 42, 189, 38, 177, 53, 190, 106, 188, 191, 62, 253, 146, 238, 188, 122, 93, 144, 190, 244, 117, 206, 190, 179, 52, 115, 62, 143, 18, 41, 190, 25, 44, 88, 61, 64, 174, 6, 189, 101, 167, 245, 190, 229, 34, 50, 62, 61, 44, 104, 62, 83, 114, 128, 62, 13, 69, 57, 62, 168, 53, 26, 190, 174, 108, 63, 189, 255, 105, 184, 60, 105, 131, 26, 62, 13, 117, 86, 58, 78, 173, 221, 61, 134, 142, 24, 62, 71, 248, 31, 191, 137, 229, 180, 190, 150, 136, 172, 61, 23, 91, 17, 189, 49, 211, 3, 191, 58, 170, 177, 62, 8, 142, 10, 189, 180, 98, 50, 60, 209, 168, 41, 62, 93, 218, 113, 61, 131, 175, 205, 190, 45, 52, 100, 62, 135, 155, 15, 62, 222, 253, 233, 188, 231, 28, 202, 61, 236, 141, 234, 190, 193, 106, 7, 62, 36, 246, 147, 61, 8, 159, 104, 189, 95, 71, 128, 190, 62, 55, 25, 190, 17, 88, 52, 62, 205, 251, 140, 62, 241, 2, 240, 189, 50, 22, 219, 61, 112, 223, 36, 189, 182, 120, 242, 60, 126, 108, 97, 190, 76, 227, 227, 61, 187, 139, 81, 188, 167, 231, 116, 62, 52, 86, 119, 61, 98, 97, 25, 62, 189, 179, 105, 62, 92, 195, 155, 187, 11, 94, 169, 190, 164, 245, 172, 190, 78, 152, 208, 62, 111, 62, 157, 62, 21, 75, 45, 62, 70, 80, 161, 57, 16, 93, 19, 62, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 138, 123, 123, 61, 157, 214, 14, 190, 61, 15, 198, 189, 39, 22, 46, 190, 29, 71, 35, 190, 215, 179, 51, 190, 172, 30, 84, 189, 240, 173, 82, 61, 6, 130, 34, 61, 206, 157, 33, 190, 76, 156, 63, 59, 234, 165, 232, 61, 248, 193, 101, 59, 138, 105, 138, 189, 6, 158, 178, 187, 196, 22, 240, 189, 12, 178, 236, 189, 35, 25, 57, 190, 70, 122, 38, 62, 225, 89, 14, 190, 49, 78, 176, 61, 172, 247, 61, 189, 70, 134, 117, 187, 145, 196, 167, 189, 224, 232, 147, 61, 35, 84, 33, 62, 92, 202, 133, 189, 121, 72, 113, 61, 33, 146, 163, 61, 37, 109, 16, 190, 33, 229, 135, 190, 106, 223, 53, 188, 88, 189, 78, 190, 41, 54, 56, 191, 234, 245, 7, 62, 255, 133, 72, 191, 166, 99, 242, 190, 151, 73, 223, 61, 242, 76, 168, 60, 72, 180, 16, 191, 166, 99, 136, 62, 106, 161, 234, 190, 31, 175, 176, 60, 237, 42, 169, 191, 105, 251, 195, 60, 142, 58, 204, 62, 71, 124, 31, 190, 3, 36, 126, 189, 206, 40, 155, 190, 149, 21, 238, 190, 2, 152, 67, 62, 42, 31, 235, 189, 215, 148, 64, 62, 120, 45, 165, 62, 65, 44, 159, 191, 106, 67, 93, 190, 207, 109, 141, 190, 62, 196, 154, 190, 2, 176, 36, 63, 220, 54, 214, 189, 100, 159, 156, 190, 123, 244, 6, 62, 65, 202, 241, 189, 159, 212, 169, 61, 64, 19, 171, 62, 154, 108, 149, 59, 174, 77, 213, 62, 178, 39, 14, 191, 158, 203, 73, 61, 9, 16, 213, 61, 35, 160, 72, 189, 146, 192, 149, 190, 105, 164, 132, 189, 102, 54, 89, 62, 104, 14, 63, 62, 172, 37, 74, 62, 28, 27, 212, 189, 253, 176, 167, 188, 163, 231, 220, 61, 146, 1, 41, 61, 29, 151, 221, 62, 204, 213, 173, 61, 4, 244, 56, 190, 219, 167, 133, 190, 63, 63, 110, 189, 28, 119, 86, 62, 115, 75, 250, 61, 210, 131, 32, 189, 36, 111, 78, 190, 135, 29, 76, 62, 68, 169, 37, 186, 15, 191, 61, 62, 114, 204, 1, 62, 221, 204, 148, 190, 167, 242, 102, 190, 17, 209, 13, 62, 98, 80, 228, 62, 182, 118, 254, 190, 56, 173, 8, 61, 42, 211, 12, 191, 19, 228, 67, 190, 11, 36, 131, 62, 211, 248, 21, 189, 10, 241, 174, 60, 158, 250, 132, 62, 4, 205, 78, 62, 201, 67, 75, 189, 59, 245, 50, 62, 86, 148, 105, 191, 246, 105, 41, 62, 181, 138, 3, 191, 223, 31, 221, 189, 155, 87, 227, 62, 208, 206, 221, 61, 221, 102, 241, 61, 117, 74, 27, 191, 224, 162, 143, 62, 109, 176, 136, 62, 113, 47, 137, 62, 156, 229, 73, 190, 109, 238, 150, 190, 187, 112, 140, 62, 87, 143, 132, 191, 202, 142, 23, 62, 240, 50, 99, 190, 111, 135, 11, 62, 226, 127, 136, 62, 186, 96, 82, 189, 185, 221, 151, 190, 29, 190, 255, 58, 112, 69, 179, 190, 171, 4, 255, 62, 83, 119, 175, 190, 100, 131, 91, 190, 75, 44, 140, 189, 181, 94, 145, 62, 5, 251, 32, 190, 44, 109, 136, 190, 156, 220, 246, 190, 45, 50, 215, 61, 238, 239, 247, 62, 53, 33, 88, 61, 114, 239, 143, 62, 150, 235, 10, 62, 206, 249, 44, 190, 53, 176, 41, 190, 96, 64, 223, 189, 176, 67, 114, 62, 161, 55, 62, 190, 83, 146, 132, 61, 6, 70, 10, 190, 162, 153, 138, 62, 27, 234, 168, 62, 195, 27, 12, 191, 26, 45, 120, 62, 37, 42, 61, 190, 228, 109, 126, 62, 117, 49, 216, 190, 249, 231, 209, 190, 129, 155, 64, 62, 206, 119, 141, 62, 89, 67, 159, 190, 194, 188, 145, 62, 92, 193, 35, 191, 249, 57, 240, 60, 20, 128, 103, 62, 101, 109, 40, 190, 235, 154, 16, 190, 29, 102, 194, 62, 129, 49, 112, 62, 162, 201, 17, 189, 75, 13, 166, 62, 47, 140, 87, 190, 155, 57, 154, 61, 161, 195, 34, 190, 3, 238, 170, 189, 132, 85, 4, 63, 219, 176, 140, 188, 148, 128, 171, 61, 172, 72, 218, 189, 187, 230, 171, 61, 150, 57, 62, 62, 122, 6, 66, 62, 218, 125, 154, 189, 173, 121, 73, 190, 47, 216, 75, 62, 170, 40, 200, 190, 111, 232, 24, 189, 198, 247, 4, 190, 85, 250, 230, 60, 226, 67, 191, 190, 143, 29, 29, 61, 78, 231, 215, 190, 22, 192, 70, 62, 158, 176, 178, 190, 49, 98, 7, 191, 40, 162, 157, 190, 90, 176, 190, 190, 251, 129, 20, 62, 70, 231, 237, 190, 27, 173, 209, 190, 137, 154, 35, 190, 254, 210, 232, 190, 55, 149, 1, 190, 176, 135, 156, 62, 214, 120, 218, 62, 8, 41, 165, 62, 232, 18, 215, 189, 110, 34, 209, 190, 18, 2, 140, 190, 182, 9, 241, 190, 12, 131, 135, 62, 65, 102, 3, 62, 237, 253, 147, 189, 111, 103, 144, 189, 241, 245, 195, 61, 110, 10, 21, 63, 246, 115, 29, 191, 164, 138, 185, 62, 133, 225, 148, 190, 224, 151, 145, 62, 31, 231, 113, 191, 42, 159, 216, 62, 35, 234, 62, 190, 29, 103, 166, 189, 158, 48, 175, 61, 140, 172, 21, 61, 85, 18, 12, 62, 143, 148, 29, 190, 147, 75, 143, 61, 245, 167, 152, 61, 45, 151, 155, 62, 49, 42, 252, 189, 216, 79, 169, 189, 40, 215, 231, 190, 102, 44, 190, 61, 14, 150, 201, 61, 202, 40, 96, 61, 108, 119, 16, 62, 1, 231, 248, 61, 142, 64, 150, 190, 140, 250, 175, 189, 125, 227, 69, 190, 134, 191, 181, 62, 97, 104, 108, 189, 227, 137, 173, 189, 143, 54, 51, 190, 253, 39, 109, 62, 40, 202, 143, 62, 109, 64, 183, 190, 145, 197, 147, 62, 84, 76, 247, 190, 201, 52, 205, 61, 236, 168, 204, 190, 124, 235, 0, 62, 51, 211, 158, 61, 195, 27, 80, 61, 198, 216, 212, 189, 73, 140, 128, 61, 198, 125, 20, 62, 210, 11, 120, 60, 122, 79, 84, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 131, 89, 1, 190, 58, 128, 184, 189, 97, 140, 178, 61, 56, 47, 225, 188, 16, 74, 201, 60, 151, 93, 234, 61, 169, 45, 213, 189, 102, 18, 29, 61, 118, 140, 15, 190, 13, 225, 190, 60, 249, 228, 100, 189, 6, 92, 52, 190, 0, 230, 220, 189, 119, 182, 36, 190, 157, 42, 38, 61, 31, 226, 88, 188, 172, 50, 142, 189, 129, 202, 106, 61, 148, 2, 70, 190, 89, 227, 34, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 110, 196, 38, 190, 250, 212, 13, 62, 86, 2, 162, 189, 140, 46, 26, 189, 101, 252, 172, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 236, 246, 51, 189, 81, 246, 135, 59, 179, 80, 1, 190, 227, 67, 171, 189, 108, 71, 210, 189, 220, 92, 38, 190, 183, 134, 75, 61, 136, 141, 11, 190, 16, 136, 224, 61, 73, 167, 143, 60, 60, 184, 176, 189, 63, 206, 182, 61, 235, 90, 0, 62, 150, 172, 50, 58, 44, 155, 109, 189, 84, 175, 168, 60, 85, 168, 57, 61, 245, 71, 91, 190, 97, 101, 95, 190, 228, 145, 54, 190, 150, 230, 241, 61, 214, 233, 43, 188, 244, 238, 143, 190, 21, 29, 53, 189, 236, 218, 110, 62, 38, 78, 220, 190, 120, 35, 87, 62, 223, 137, 252, 190, 119, 176, 34, 190, 229, 114, 247, 61, 179, 203, 51, 188, 94, 203, 113, 189, 122, 113, 183, 61, 182, 2, 183, 62, 82, 215, 16, 61, 169, 19, 16, 61, 255, 112, 159, 190, 133, 75, 157, 61, 192, 241, 67, 190, 43, 16, 194, 189, 35, 8, 228, 62, 180, 137, 140, 61, 66, 20, 135, 62, 79, 188, 121, 190, 167, 204, 171, 189, 57, 179, 0, 62, 185, 254, 50, 61, 192, 235, 58, 190, 62, 179, 170, 189, 130, 151, 15, 62, 140, 9, 139, 190, 140, 52, 2, 62, 18, 21, 50, 190, 216, 168, 165, 189, 252, 222, 180, 62, 216, 248, 46, 189, 251, 200, 238, 190, 119, 33, 119, 62, 167, 204, 214, 188, 92, 42, 87, 62, 232, 112, 7, 191, 192, 1, 52, 190, 79, 4, 34, 189, 22, 31, 165, 60, 89, 21, 95, 190, 235, 46, 73, 62, 103, 115, 96, 190, 99, 109, 238, 188, 11, 31, 26, 190, 142, 107, 206, 61, 20, 42, 157, 190, 80, 231, 186, 61, 136, 70, 154, 59, 17, 155, 15, 62, 213, 132, 127, 189, 96, 139, 14, 190, 245, 144, 247, 59, 5, 163, 10, 62, 181, 165, 50, 190, 186, 72, 133, 62, 20, 27, 151, 62, 8, 52, 8, 191, 244, 179, 186, 190, 156, 70, 228, 190, 195, 123, 213, 61, 204, 66, 149, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 182, 217, 175, 62, 198, 226, 164, 190, 112, 193, 178, 189, 187, 152, 43, 62, 185, 6, 62, 62, 52, 130, 180, 190, 64, 65, 194, 188, 199, 43, 148, 189, 70, 210, 2, 190, 135, 93, 50, 190, 205, 143, 168, 190, 4, 33, 81, 61, 129, 32, 142, 188, 95, 99, 205, 59, 87, 196, 71, 62, 64, 205, 147, 62, 206, 171, 151, 62, 145, 164, 180, 189, 40, 47, 197, 62, 54, 175, 42, 62, 47, 85, 55, 189, 238, 134, 189, 189, 28, 88, 132, 61, 102, 43, 251, 189, 188, 231, 41, 62, 255, 15, 151, 62, 0, 132, 178, 60, 6, 241, 71, 62, 28, 137, 90, 60, 70, 67, 177, 60, 3, 225, 93, 62, 208, 33, 157, 191, 228, 169, 154, 190, 217, 33, 32, 61, 59, 34, 182, 62, 36, 11, 24, 191, 178, 220, 153, 62, 83, 208, 2, 191, 100, 160, 141, 60, 189, 82, 149, 62, 91, 155, 67, 60, 123, 145, 163, 190, 174, 61, 24, 62, 233, 75, 154, 62, 130, 35, 122, 61, 252, 210, 244, 62, 192, 231, 82, 191, 154, 155, 41, 62, 71, 157, 132, 191, 154, 45, 166, 190, 208, 140, 185, 62, 94, 87, 40, 190, 163, 114, 20, 189, 181, 78, 8, 60, 100, 197, 4, 61, 91, 129, 162, 62, 134, 243, 183, 190, 249, 242, 18, 190, 90, 17, 212, 190, 193, 63, 95, 190, 194, 85, 113, 191, 1, 111, 90, 62, 35, 93, 136, 191, 67, 217, 96, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 152, 213, 72, 62, 56, 179, 0, 62, 255, 110, 172, 189, 219, 220, 50, 190, 122, 177, 104, 61, 21, 10, 148, 62, 51, 176, 99, 187, 57, 43, 196, 62, 250, 4, 31, 62, 149, 204, 231, 61, 57, 128, 165, 62, 45, 176, 146, 62, 249, 226, 96, 60, 144, 235, 141, 190, 177, 181, 185, 189, 233, 207, 149, 61, 81, 65, 207, 61, 68, 162, 80, 62, 157, 241, 2, 62, 129, 229, 83, 62, 12, 170, 183, 61, 92, 95, 236, 61, 232, 65, 192, 62, 174, 156, 4, 62, 182, 39, 201, 187, 104, 115, 17, 190, 171, 42, 134, 62, 192, 162, 36, 60, 255, 58, 37, 190, 54, 162, 235, 59, 254, 232, 171, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 16, 100, 10, 63, 137, 182, 102, 190, 241, 43, 160, 62, 190, 128, 139, 60, 87, 15, 241, 62, 245, 229, 97, 62, 155, 85, 86, 63, 2, 113, 131, 190, 181, 40, 96, 63, 129, 189, 176, 62, 135, 67, 251, 62, 149, 89, 248, 188, 106, 16, 8, 191, 12, 35, 218, 62, 70, 35, 11, 63, 73, 6, 171, 60, 104, 95, 15, 62, 161, 148, 131, 63, 46, 160, 96, 190, 241, 168, 76, 191, 60, 50, 13, 63, 97, 107, 50, 191, 32, 238, 119, 63, 91, 36, 203, 62, 153, 71, 1, 61, 217, 234, 220, 189, 131, 241, 183, 190, 62, 215, 66, 62, 188, 197, 185, 189, 112, 247, 114, 190, 176, 245, 170, 191, 81, 214, 233, 61, 127, 73, 223, 61, 69, 153, 22, 190, 60, 193, 225, 62, 67, 134, 230, 189, 20, 243, 84, 188, 240, 225, 8, 191, 179, 181, 133, 62, 214, 68, 73, 190, 155, 140, 135, 190, 199, 70, 139, 190, 252, 210, 244, 189, 27, 65, 96, 190, 192, 2, 28, 62, 225, 35, 150, 62, 215, 230, 158, 189, 133, 96, 171, 61, 175, 174, 255, 61, 205, 199, 229, 61, 215, 0, 134, 61, 217, 18, 40, 62, 246, 219, 183, 62, 195, 122, 26, 62, 123, 72, 169, 62, 193, 14, 88, 190, 208, 61, 10, 189, 67, 182, 31, 190, 204, 252, 57, 189, 113, 70, 226, 190, 203, 145, 20, 190, 176, 45, 198, 189, 254, 169, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 58, 170, 189, 38, 160, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {92, 40, 99, 189, 210, 173, 20, 192, 223, 210, 97, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {232, 234, 246, 63, 108, 123, 10, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}