// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 232, 22, 62, 92, 64, 52, 61, 196, 207, 10, 191, 138, 221, 13, 191, 0, 7, 154, 60, 218, 127, 194, 190, 165, 72, 136, 62, 112, 240, 186, 62, 184, 46, 215, 62, 187, 27, 86, 190, 109, 96, 217, 190, 140, 164, 207, 62, 79, 80, 141, 62, 179, 8, 182, 62, 190, 159, 196, 189, 84, 83, 254, 62, 220, 127, 69, 61, 108, 149, 82, 190, 23, 101, 201, 61, 183, 73, 194, 62, 167, 77, 163, 62, 222, 147, 91, 190, 175, 30, 1, 190, 1, 128, 194, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 86, 117, 8, 62, 207, 19, 213, 190, 200, 187, 252, 190, 88, 32, 79, 190, 155, 84, 19, 190, 187, 71, 82, 190, 164, 64, 13, 63, 75, 233, 33, 62, 57, 85, 255, 62, 186, 209, 233, 62, 185, 117, 197, 61, 14, 42, 214, 62, 233, 208, 0, 190, 97, 209, 71, 188, 191, 70, 15, 63, 221, 35, 192, 190, 119, 109, 127, 190, 27, 190, 185, 62, 77, 156, 155, 189, 147, 106, 151, 61, 195, 91, 22, 62, 24, 5, 185, 189, 109, 225, 107, 61, 225, 186, 120, 62, 250, 91, 248, 190, 185, 120, 255, 190, 87, 68, 223, 62, 167, 228, 133, 62, 87, 82, 210, 62, 220, 67, 205, 61, 234, 32, 182, 62, 242, 78, 233, 190, 64, 245, 1, 63, 221, 110, 9, 191, 68, 101, 220, 60, 105, 98, 241, 190, 141, 243, 150, 189, 3, 241, 81, 62, 12, 2, 37, 62, 231, 3, 105, 190, 37, 245, 5, 190, 226, 44, 220, 189, 43, 115, 133, 190, 162, 248, 145, 62, 3, 243, 168, 190, 172, 129, 168, 62, 219, 142, 209, 62, 49, 104, 223, 62, 189, 88, 248, 62, 40, 47, 171, 61, 96, 250, 224, 190, 83, 252, 223, 62, 30, 167, 10, 191, 208, 58, 193, 190, 89, 87, 209, 62, 235, 200, 125, 62, 137, 179, 198, 62, 139, 73, 76, 60, 94, 134, 15, 63, 99, 135, 198, 62, 6, 98, 179, 189, 168, 157, 4, 62, 185, 206, 198, 60, 202, 253, 36, 190, 136, 183, 122, 190, 25, 230, 160, 62, 218, 63, 211, 190, 242, 134, 8, 191, 59, 130, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 148, 19, 191, 194, 125, 209, 190, 161, 255, 169, 190, 204, 52, 161, 62, 87, 187, 164, 189, 83, 26, 249, 190, 65, 110, 158, 190, 99, 221, 0, 63, 166, 7, 180, 190, 21, 238, 137, 62, 232, 21, 127, 62, 218, 137, 88, 61, 235, 23, 189, 190, 14, 240, 192, 62, 123, 47, 115, 62, 49, 248, 204, 62, 253, 171, 128, 62, 245, 121, 15, 63, 115, 34, 236, 61, 246, 48, 68, 190, 196, 181, 11, 189, 159, 82, 47, 190, 219, 106, 4, 63, 221, 123, 105, 62, 200, 78, 141, 61, 3, 251, 191, 61, 128, 2, 152, 62, 193, 252, 99, 190, 60, 175, 153, 190, 65, 237, 63, 190, 240, 249, 138, 62, 169, 122, 189, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 187, 187, 187, 196, 160, 252, 189, 143, 99, 13, 61, 22, 120, 196, 188, 135, 112, 3, 189, 110, 47, 39, 190, 72, 143, 201, 189, 204, 4, 44, 62, 103, 228, 243, 189, 204, 97, 60, 189, 109, 34, 235, 189, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 49, 229, 200, 189, 176, 189, 20, 189, 135, 25, 187, 189, 188, 25, 38, 61, 142, 77, 195, 189, 167, 58, 214, 189, 124, 223, 15, 62, 9, 237, 135, 60, 191, 15, 170, 189, 100, 49, 17, 190, 194, 25, 234, 189, 21, 72, 86, 61, 43, 145, 2, 189, 41, 6, 243, 189, 157, 221, 235, 59, 164, 16, 128, 61, 119, 159, 18, 190, 37, 4, 212, 61, 65, 60, 54, 189, 52, 101, 139, 59, 185, 52, 162, 61, 160, 173, 175, 60, 190, 167, 32, 62, 146, 20, 66, 61, 12, 20, 38, 62, 249, 56, 31, 189, 29, 69, 8, 61, 94, 247, 44, 190, 130, 118, 252, 61, 143, 208, 205, 60, 25, 58, 233, 61, 45, 193, 26, 190, 89, 132, 149, 189, 198, 86, 42, 62, 40, 191, 229, 189, 150, 177, 151, 61, 72, 82, 157, 60, 53, 87, 229, 188, 50, 203, 101, 61, 213, 160, 171, 188, 51, 12, 168, 60, 210, 69, 109, 61, 211, 161, 187, 189, 231, 79, 176, 189, 123, 167, 48, 190, 24, 109, 78, 61, 52, 103, 187, 189, 201, 217, 207, 60, 219, 141, 71, 61, 12, 83, 163, 187, 231, 68, 52, 189, 238, 86, 116, 189, 176, 227, 175, 61, 124, 207, 234, 189, 30, 66, 238, 189, 149, 140, 1, 190, 244, 87, 255, 188, 213, 148, 192, 61, 115, 83, 51, 61, 9, 170, 160, 61, 146, 167, 198, 61, 234, 125, 6, 61, 206, 123, 37, 189, 112, 141, 27, 62, 159, 167, 178, 61, 84, 203, 67, 189, 12, 52, 253, 189, 166, 146, 185, 189, 103, 211, 32, 190, 210, 201, 146, 188, 60, 5, 146, 61, 167, 165, 5, 62, 33, 17, 237, 61, 20, 205, 213, 189, 49, 6, 241, 61, 230, 169, 31, 190, 255, 144, 18, 189, 52, 126, 243, 187, 162, 200, 174, 189, 4, 188, 132, 187, 7, 197, 30, 62, 44, 213, 17, 190, 97, 44, 248, 189, 94, 225, 51, 62, 41, 220, 7, 190, 182, 149, 168, 188, 72, 112, 203, 189, 134, 205, 70, 189, 137, 18, 193, 189, 22, 88, 45, 62, 130, 89, 138, 61, 215, 111, 230, 61, 92, 89, 137, 189, 131, 59, 6, 189, 210, 36, 52, 61, 46, 86, 207, 189, 230, 173, 10, 62, 138, 111, 178, 188, 87, 11, 33, 190, 246, 153, 140, 189, 106, 81, 22, 62, 16, 37, 178, 61, 145, 171, 27, 60, 177, 53, 239, 189, 149, 86, 32, 190, 21, 120, 22, 190, 33, 246, 186, 189, 89, 183, 234, 61, 140, 66, 76, 61, 229, 71, 16, 190, 72, 74, 225, 59, 37, 119, 112, 189, 158, 137, 148, 61, 10, 125, 147, 189, 90, 22, 162, 60, 161, 65, 25, 190, 29, 30, 251, 61, 196, 60, 97, 189, 174, 249, 176, 188, 41, 172, 44, 60, 55, 173, 54, 57, 76, 18, 204, 61, 113, 124, 122, 189, 2, 52, 6, 189, 155, 26, 40, 62, 7, 125, 214, 188, 48, 135, 249, 61, 15, 247, 149, 188, 96, 114, 168, 189, 32, 39, 229, 60, 145, 64, 180, 189, 40, 155, 162, 60, 222, 136, 21, 190, 149, 12, 47, 61, 38, 193, 21, 190, 40, 238, 245, 188, 8, 96, 30, 189, 85, 9, 205, 188, 227, 65, 140, 61, 248, 238, 16, 190, 67, 113, 201, 189, 44, 159, 142, 61, 19, 247, 45, 62, 185, 124, 255, 59, 54, 138, 1, 190, 135, 153, 247, 61, 180, 181, 215, 188, 100, 57, 186, 61, 226, 14, 30, 190, 154, 183, 28, 62, 241, 80, 229, 61, 166, 85, 146, 189, 199, 175, 245, 61, 121, 165, 157, 189, 160, 167, 163, 189, 167, 239, 223, 61, 55, 158, 236, 188, 195, 57, 206, 188, 163, 247, 211, 61, 4, 177, 20, 61, 67, 187, 228, 189, 69, 174, 163, 189, 166, 78, 212, 189, 196, 135, 53, 59, 142, 248, 234, 189, 208, 176, 153, 188, 201, 73, 86, 61, 126, 204, 150, 187, 89, 60, 168, 61, 127, 27, 255, 59, 156, 24, 4, 61, 64, 136, 236, 60, 12, 104, 26, 190, 105, 131, 125, 188, 151, 160, 32, 62, 41, 122, 108, 189, 141, 21, 50, 62, 200, 60, 174, 61, 56, 249, 106, 188, 96, 230, 170, 61, 70, 187, 72, 189, 78, 162, 252, 61, 177, 174, 113, 60, 52, 80, 166, 61, 43, 128, 16, 62, 157, 180, 134, 61, 33, 51, 194, 189, 24, 2, 226, 61, 126, 182, 153, 59, 118, 235, 220, 186, 100, 202, 50, 189, 118, 20, 74, 187, 8, 154, 23, 62, 2, 194, 106, 189, 120, 157, 33, 62, 241, 198, 221, 189, 138, 29, 142, 61, 157, 182, 197, 189, 225, 235, 176, 189, 220, 222, 5, 62, 158, 1, 216, 189, 224, 91, 83, 61, 12, 191, 100, 187, 32, 0, 220, 60, 168, 210, 1, 190, 191, 229, 147, 61, 153, 28, 180, 188, 234, 252, 118, 189, 217, 171, 50, 190, 228, 129, 51, 190, 172, 212, 26, 61, 207, 133, 187, 188, 64, 174, 126, 189, 58, 159, 163, 61, 12, 79, 205, 188, 149, 248, 11, 190, 48, 102, 9, 61, 241, 143, 6, 190, 119, 244, 134, 61, 189, 47, 45, 190, 123, 220, 54, 61, 28, 148, 182, 61, 49, 198, 168, 188, 220, 143, 9, 190, 118, 64, 197, 188, 92, 240, 4, 62, 166, 101, 35, 62, 86, 19, 23, 62, 137, 80, 21, 62, 236, 42, 243, 189, 38, 131, 226, 189, 128, 129, 206, 61, 191, 53, 241, 61, 61, 17, 59, 189, 39, 138, 193, 188, 79, 175, 4, 189, 174, 19, 250, 60, 230, 28, 121, 61, 112, 152, 97, 61, 240, 15, 157, 61, 255, 242, 240, 189, 146, 51, 131, 61, 0, 144, 29, 61, 57, 125, 2, 190, 113, 88, 198, 61, 139, 184, 238, 188, 61, 68, 198, 189, 97, 117, 248, 188, 160, 199, 158, 61, 57, 194, 40, 190, 244, 166, 232, 189, 218, 44, 167, 189, 124, 187, 18, 190, 112, 33, 153, 61, 205, 157, 19, 62, 136, 237, 118, 189, 2, 58, 147, 61, 10, 107, 4, 62, 212, 0, 200, 61, 69, 220, 15, 62, 98, 46, 40, 62, 83, 157, 48, 190, 244, 111, 179, 187, 23, 134, 227, 189, 249, 234, 139, 189, 133, 109, 203, 61, 28, 169, 36, 189, 8, 111, 216, 187, 240, 156, 163, 59, 33, 142, 1, 62, 128, 171, 5, 62, 33, 78, 12, 62, 245, 167, 23, 62, 119, 107, 3, 62, 251, 116, 143, 188, 129, 229, 40, 190, 133, 154, 203, 61, 4, 20, 66, 188, 232, 180, 28, 189, 186, 1, 212, 61, 178, 51, 204, 59, 122, 85, 174, 61, 25, 197, 27, 190, 78, 212, 246, 189, 56, 54, 221, 189, 15, 89, 230, 61, 164, 193, 184, 189, 162, 164, 50, 190, 98, 176, 135, 189, 139, 79, 31, 62, 129, 183, 205, 189, 249, 13, 213, 187, 71, 19, 242, 188, 66, 189, 188, 61, 101, 147, 167, 188, 83, 14, 26, 190, 83, 19, 164, 61, 147, 27, 37, 62, 220, 43, 117, 189, 62, 153, 20, 190, 134, 243, 25, 190, 133, 54, 251, 60, 246, 77, 170, 189, 4, 178, 116, 188, 23, 126, 35, 60, 125, 70, 4, 62, 20, 15, 171, 61, 12, 249, 33, 190, 94, 100, 217, 189, 66, 126, 228, 187, 225, 11, 46, 190, 11, 81, 149, 61, 74, 21, 49, 189, 106, 90, 139, 189, 82, 151, 12, 62, 182, 222, 223, 189, 54, 78, 10, 190, 11, 121, 21, 62, 173, 18, 94, 59, 35, 48, 242, 60, 255, 120, 14, 62, 178, 250, 94, 60, 77, 50, 85, 188, 150, 72, 24, 62, 29, 12, 50, 62, 48, 62, 42, 190, 16, 81, 162, 189, 9, 169, 5, 62, 66, 51, 170, 188, 75, 204, 249, 61, 140, 224, 154, 61, 41, 26, 152, 188, 127, 128, 4, 62, 215, 187, 113, 61, 108, 159, 47, 190, 49, 71, 29, 60, 131, 135, 242, 61, 131, 119, 51, 62, 1, 85, 125, 58, 102, 6, 174, 188, 204, 33, 89, 61, 24, 200, 73, 187, 19, 46, 4, 190, 117, 64, 159, 189, 251, 120, 49, 190, 249, 176, 91, 61, 230, 33, 221, 189, 62, 188, 104, 61, 167, 90, 234, 60, 113, 11, 190, 188, 198, 238, 136, 61, 144, 84, 27, 62, 174, 35, 191, 188, 86, 109, 108, 189, 0, 81, 212, 60, 201, 205, 148, 60, 210, 26, 51, 62, 209, 231, 9, 190, 75, 92, 216, 187, 160, 84, 46, 61, 101, 105, 178, 61, 174, 59, 161, 61, 211, 234, 45, 62, 160, 12, 145, 189, 191, 229, 120, 61, 63, 13, 250, 189, 12, 141, 21, 189, 146, 193, 246, 61, 124, 105, 14, 190, 213, 126, 163, 189, 0, 245, 223, 61, 159, 246, 17, 62, 212, 113, 1, 61, 242, 238, 223, 61, 43, 255, 82, 189, 12, 15, 154, 61, 35, 209, 137, 188, 87, 162, 189, 61, 4, 89, 207, 189, 220, 15, 54, 61, 150, 127, 11, 188, 13, 153, 182, 61, 245, 1, 13, 62, 25, 179, 36, 60, 33, 46, 63, 189, 225, 188, 144, 61, 206, 161, 17, 190, 130, 236, 210, 61, 169, 238, 42, 189, 61, 25, 140, 61, 189, 135, 249, 188, 231, 157, 45, 57, 173, 143, 59, 189, 254, 116, 145, 61, 230, 34, 211, 61, 92, 30, 135, 189, 116, 190, 231, 189, 4, 138, 89, 189, 223, 13, 205, 61, 56, 29, 3, 190, 205, 71, 188, 61, 108, 193, 211, 61, 53, 223, 180, 60, 141, 58, 23, 190, 194, 105, 44, 62, 28, 204, 36, 188, 138, 110, 91, 189, 241, 243, 229, 61, 242, 32, 25, 190, 93, 185, 197, 61, 109, 197, 50, 62, 40, 70, 66, 61, 63, 85, 212, 189, 43, 84, 20, 62, 130, 197, 16, 189, 121, 112, 137, 189, 239, 98, 136, 189, 42, 165, 181, 61, 159, 58, 200, 61, 152, 86, 3, 190, 43, 166, 81, 189, 146, 165, 83, 189, 65, 183, 239, 189, 253, 153, 137, 189, 2, 102, 137, 60, 119, 142, 224, 61, 195, 129, 230, 61, 226, 140, 29, 62, 118, 1, 19, 187, 121, 36, 5, 62, 57, 182, 13, 189, 39, 232, 231, 61, 205, 32, 200, 188, 201, 130, 234, 189, 100, 230, 75, 189, 32, 43, 25, 190, 197, 168, 26, 62, 98, 19, 159, 189, 231, 21, 18, 190, 129, 184, 172, 61, 93, 5, 54, 61, 219, 251, 52, 190, 25, 44, 88, 61, 235, 76, 85, 189, 37, 118, 44, 62, 196, 7, 158, 61, 249, 49, 72, 61, 47, 78, 26, 62, 146, 173, 255, 61, 118, 101, 218, 189, 95, 80, 239, 189, 90, 231, 71, 61, 158, 203, 122, 60, 245, 179, 238, 189, 189, 232, 231, 61, 42, 201, 178, 187, 235, 175, 5, 190, 7, 247, 136, 189, 181, 12, 128, 189, 201, 107, 172, 189, 40, 181, 117, 189, 12, 59, 4, 62, 65, 1, 27, 190, 86, 248, 123, 61, 48, 255, 227, 61, 149, 192, 123, 61, 44, 201, 157, 189, 176, 129, 39, 190, 220, 108, 141, 189, 217, 196, 211, 61, 222, 32, 52, 62, 6, 31, 74, 61, 69, 169, 159, 189, 230, 143, 27, 59, 8, 159, 104, 189, 201, 132, 176, 61, 103, 10, 205, 61, 14, 29, 234, 61, 37, 148, 90, 61, 224, 78, 158, 189, 100, 235, 21, 62, 240, 74, 184, 189, 1, 29, 195, 61, 103, 41, 25, 189, 185, 140, 29, 62, 70, 157, 81, 188, 227, 141, 134, 189, 51, 252, 159, 189, 79, 110, 48, 62, 242, 48, 49, 62, 26, 220, 155, 189, 159, 177, 176, 61, 10, 1, 252, 61, 154, 245, 23, 62, 140, 114, 32, 62, 88, 69, 48, 62, 61, 46, 179, 60, 197, 56, 168, 189, 134, 201, 252, 189, 162, 178, 17, 62, 109, 179, 173, 189, 136, 97, 50, 61, 200, 47, 184, 61, 237, 159, 194, 61, 181, 31, 34, 190, 71, 93, 225, 189, 45, 119, 201, 188, 75, 202, 245, 188, 190, 141, 214, 189, 91, 36, 69, 189, 74, 38, 62, 59, 82, 159, 210, 188, 172, 1, 160, 189, 140, 129, 80, 187, 220, 147, 175, 189, 242, 143, 30, 190, 13, 186, 37, 60, 200, 234, 91, 189, 44, 19, 228, 189, 103, 229, 170, 59, 82, 160, 222, 188, 39, 60, 48, 61, 206, 48, 252, 61, 43, 78, 180, 189, 114, 75, 128, 189, 137, 171, 211, 60, 135, 163, 217, 61, 126, 110, 183, 189, 20, 62, 186, 61, 97, 140, 135, 187, 101, 36, 10, 190, 131, 34, 173, 186, 213, 243, 149, 61, 113, 216, 2, 190, 185, 249, 193, 189, 120, 219, 46, 190, 66, 185, 30, 190, 144, 184, 39, 190, 172, 30, 84, 189, 108, 97, 129, 61, 24, 113, 61, 61, 45, 225, 7, 190, 125, 141, 57, 60, 54, 167, 6, 62, 189, 157, 64, 60, 5, 244, 65, 189, 99, 225, 194, 59, 71, 235, 203, 189, 203, 79, 209, 189, 178, 227, 38, 190, 50, 205, 36, 62, 232, 67, 10, 190, 163, 241, 203, 61, 255, 119, 66, 189, 151, 0, 67, 60, 164, 138, 152, 189, 58, 221, 191, 61, 210, 49, 44, 62, 160, 211, 120, 189, 121, 72, 113, 61, 22, 190, 205, 61, 10, 107, 11, 190, 206, 77, 160, 61, 189, 28, 254, 188, 29, 3, 21, 62, 78, 67, 8, 190, 203, 1, 172, 61, 111, 154, 31, 190, 221, 230, 214, 189, 247, 18, 157, 189, 242, 76, 168, 60, 2, 90, 5, 190, 11, 46, 13, 62, 247, 240, 7, 60, 21, 151, 26, 62, 10, 208, 26, 190, 91, 224, 14, 61, 149, 132, 141, 61, 211, 11, 78, 189, 57, 59, 240, 189, 91, 149, 97, 189, 255, 150, 222, 188, 145, 34, 241, 61, 129, 165, 62, 61, 79, 174, 14, 190, 91, 165, 212, 61, 30, 100, 83, 189, 184, 151, 3, 190, 185, 122, 131, 60, 15, 100, 90, 188, 148, 81, 253, 61, 75, 119, 191, 188, 171, 89, 169, 188, 46, 172, 200, 61, 76, 13, 96, 61, 227, 133, 219, 61, 99, 95, 46, 62, 114, 188, 181, 188, 67, 245, 17, 62, 196, 119, 99, 189, 154, 222, 152, 60, 125, 67, 252, 60, 35, 160, 72, 189, 74, 75, 24, 190, 68, 102, 210, 59, 185, 183, 167, 61, 244, 173, 142, 186, 73, 12, 183, 61, 247, 81, 106, 189, 255, 195, 43, 190, 146, 79, 253, 60, 171, 202, 178, 188, 93, 61, 49, 62, 224, 157, 88, 60, 37, 28, 52, 190, 112, 31, 205, 189, 133, 155, 166, 189, 104, 99, 165, 189, 106, 71, 207, 60, 86, 148, 130, 189, 26, 210, 111, 60, 179, 227, 120, 189, 66, 122, 30, 62, 17, 107, 94, 60, 199, 8, 243, 61, 97, 254, 156, 61, 74, 167, 12, 60, 214, 0, 16, 61, 192, 41, 198, 61, 106, 210, 228, 189, 178, 71, 235, 189, 47, 166, 165, 189, 112, 14, 196, 59, 190, 171, 25, 62, 211, 248, 21, 189, 240, 132, 36, 62, 187, 172, 47, 190, 11, 218, 11, 190, 188, 2, 5, 190, 56, 45, 156, 61, 120, 199, 32, 61, 118, 125, 37, 188, 17, 132, 105, 189, 22, 4, 74, 189, 96, 1, 32, 62, 214, 138, 78, 188, 131, 49, 197, 189, 5, 96, 127, 189, 152, 141, 113, 61, 7, 78, 23, 62, 179, 21, 160, 60, 143, 29, 126, 188, 108, 163, 219, 189, 81, 144, 103, 189, 75, 33, 47, 190, 234, 124, 17, 189, 71, 93, 51, 62, 106, 74, 238, 189, 52, 45, 29, 57, 170, 81, 54, 61, 95, 171, 110, 188, 1, 131, 48, 190, 63, 217, 175, 189, 78, 223, 195, 61, 14, 36, 49, 190, 125, 3, 34, 190, 75, 44, 140, 189, 234, 208, 1, 62, 224, 172, 45, 62, 3, 4, 29, 190, 98, 153, 121, 189, 216, 172, 145, 61, 106, 113, 0, 62, 190, 85, 189, 189, 68, 156, 167, 61, 218, 79, 50, 190, 166, 102, 135, 61, 38, 46, 53, 189, 254, 21, 186, 61, 219, 248, 255, 61, 83, 43, 44, 190, 172, 82, 253, 61, 250, 247, 61, 60, 83, 162, 133, 61, 15, 109, 72, 189, 253, 237, 23, 189, 38, 100, 192, 189, 52, 72, 210, 61, 250, 20, 180, 187, 251, 134, 180, 189, 73, 93, 32, 190, 111, 108, 5, 62, 246, 159, 139, 188, 143, 37, 166, 189, 17, 28, 41, 62, 113, 42, 12, 190, 221, 108, 153, 60, 155, 175, 225, 61, 101, 109, 40, 190, 143, 233, 178, 60, 28, 184, 152, 61, 117, 11, 78, 189, 16, 15, 228, 189, 151, 64, 12, 62, 114, 33, 84, 188, 19, 33, 48, 190, 69, 88, 47, 190, 169, 20, 202, 188, 207, 45, 250, 61, 158, 145, 160, 60, 224, 2, 170, 189, 17, 160, 169, 189, 94, 75, 199, 189, 192, 210, 162, 60, 15, 232, 92, 189, 200, 145, 146, 61, 208, 65, 35, 61, 30, 242, 195, 189, 30, 178, 156, 189, 150, 83, 105, 189, 116, 80, 169, 60, 78, 208, 47, 190, 251, 230, 49, 60, 159, 220, 124, 61, 134, 202, 242, 189, 124, 238, 26, 62, 223, 232, 24, 62, 58, 192, 31, 190, 19, 220, 89, 189, 250, 3, 30, 190, 251, 129, 20, 62, 239, 32, 150, 61, 184, 181, 197, 189, 145, 201, 108, 189, 11, 86, 28, 189, 253, 47, 19, 190, 156, 198, 244, 60, 1, 126, 20, 62, 191, 27, 48, 62, 106, 109, 46, 190, 39, 31, 46, 190, 237, 48, 209, 189, 220, 128, 244, 61, 50, 196, 228, 61, 36, 61, 83, 60, 6, 88, 17, 189, 41, 209, 114, 61, 111, 10, 252, 60, 128, 127, 28, 190, 210, 91, 79, 189, 137, 215, 29, 62, 234, 19, 42, 190, 203, 215, 31, 62, 136, 79, 25, 62, 48, 7, 43, 62, 104, 196, 235, 189, 186, 233, 39, 62, 24, 252, 179, 60, 214, 234, 28, 62, 185, 77, 14, 190, 94, 159, 138, 189, 157, 210, 251, 61, 245, 167, 152, 61, 96, 144, 14, 62, 146, 202, 201, 61, 218, 216, 15, 189, 98, 239, 38, 190, 12, 114, 243, 61, 86, 93, 172, 189, 129, 184, 75, 61, 17, 254, 247, 61, 137, 55, 220, 61, 189, 145, 20, 190, 189, 220, 187, 188, 109, 27, 84, 189, 143, 67, 236, 61, 234, 94, 188, 60, 4, 252, 11, 61, 28, 43, 5, 190, 84, 90, 24, 189, 128, 140, 128, 189, 211, 207, 124, 61, 226, 0, 244, 60, 119, 222, 208, 188, 84, 72, 134, 188, 74, 76, 165, 189, 69, 231, 36, 62, 206, 179, 250, 61, 228, 224, 148, 61, 240, 178, 210, 189, 138, 163, 244, 61, 2, 181, 38, 62, 9, 136, 226, 60, 6, 173, 38, 190, 59, 205, 5, 62, 254, 120, 51, 190, 166, 169, 219, 61, 90, 34, 199, 189, 0, 214, 162, 189, 97, 195, 228, 61, 175, 157, 95, 188, 129, 249, 136, 61, 163, 84, 17, 62, 217, 100, 206, 189, 80, 112, 191, 61, 70, 181, 16, 190, 10, 63, 133, 61, 146, 242, 74, 189, 203, 208, 5, 190, 28, 95, 90, 189, 125, 122, 8, 190, 216, 241, 166, 61, 254, 175, 158, 60, 50, 244, 91, 189, 181, 233, 186, 61, 141, 55, 35, 190, 72, 218, 167, 188, 94, 247, 59, 188, 56, 7, 174, 60, 154, 179, 62, 189, 139, 133, 177, 189, 39, 27, 30, 62, 76, 147, 150, 189, 233, 227, 11, 189, 78, 241, 38, 62, 41, 192, 155, 59, 41, 148, 139, 188, 234, 224, 93, 60, 183, 239, 166, 189, 204, 116, 71, 61, 207, 80, 89, 189, 76, 220, 49, 189, 222, 94, 155, 189, 101, 24, 17, 190, 219, 172, 151, 61, 73, 135, 7, 190, 185, 45, 241, 61, 206, 126, 80, 61, 71, 225, 176, 189, 185, 151, 239, 61, 107, 225, 239, 61, 164, 82, 152, 59, 230, 57, 252, 187, 28, 88, 1, 61, 232, 113, 79, 61, 254, 87, 29, 190, 133, 116, 17, 190, 12, 159, 51, 190, 164, 162, 17, 62, 2, 77, 74, 189, 4, 88, 3, 190, 24, 151, 17, 190, 58, 53, 169, 61, 192, 48, 21, 190, 166, 91, 17, 61, 24, 149, 146, 186, 200, 162, 107, 189, 89, 119, 185, 61, 179, 203, 51, 188, 54, 236, 239, 61, 237, 68, 60, 187, 107, 247, 29, 62, 78, 141, 226, 61, 249, 246, 3, 190, 237, 228, 164, 189, 118, 204, 38, 190, 84, 37, 240, 189, 19, 2, 119, 189, 75, 49, 197, 61, 65, 211, 98, 61, 209, 56, 49, 62, 253, 178, 153, 61, 29, 253, 14, 190, 71, 48, 148, 58, 221, 136, 184, 189, 134, 40, 250, 189, 211, 83, 25, 62, 74, 167, 136, 188, 22, 137, 152, 59, 153, 18, 208, 61, 16, 237, 216, 189, 190, 91, 146, 189, 214, 112, 6, 62, 201, 47, 122, 61, 58, 117, 10, 190, 190, 143, 244, 61, 40, 96, 242, 189, 18, 68, 208, 60, 196, 54, 36, 190, 70, 124, 245, 189, 79, 4, 34, 189, 7, 43, 243, 189, 167, 46, 233, 189, 167, 109, 40, 62, 183, 24, 166, 187, 127, 126, 101, 60, 17, 218, 65, 189, 4, 12, 140, 61, 48, 124, 206, 189, 13, 176, 86, 61, 149, 40, 8, 190, 230, 122, 241, 60, 252, 145, 206, 61, 159, 229, 120, 189, 75, 230, 253, 61, 10, 32, 23, 62, 164, 50, 206, 189, 118, 166, 132, 189, 194, 63, 18, 188, 231, 67, 242, 189, 21, 130, 4, 190, 43, 96, 36, 190, 122, 98, 93, 61, 255, 103, 251, 61, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 221, 1, 184, 60, 9, 180, 161, 189, 245, 80, 14, 190, 161, 255, 160, 61, 34, 10, 80, 60, 26, 207, 10, 190, 249, 38, 105, 60, 78, 184, 45, 62, 70, 210, 2, 190, 194, 18, 89, 189, 71, 108, 224, 189, 103, 243, 157, 189, 236, 95, 211, 189, 63, 249, 250, 189, 81, 117, 52, 62, 8, 116, 36, 62, 73, 187, 34, 62, 17, 121, 44, 190, 22, 141, 182, 61, 237, 219, 220, 61, 187, 36, 51, 62, 70, 203, 22, 62, 101, 88, 249, 61, 10, 63, 213, 189, 159, 63, 153, 61, 152, 147, 81, 61, 67, 29, 220, 61, 5, 39, 150, 61, 240, 67, 202, 61, 104, 104, 9, 189, 108, 111, 196, 61, 206, 161, 24, 190, 85, 162, 167, 189, 91, 143, 166, 188, 68, 184, 41, 62, 132, 159, 177, 188, 230, 198, 195, 61, 165, 162, 215, 61, 169, 224, 175, 61, 109, 97, 17, 62, 91, 155, 67, 60, 113, 84, 37, 190, 170, 0, 80, 189, 150, 192, 89, 188, 212, 158, 146, 61, 165, 88, 214, 61, 13, 74, 233, 61, 120, 241, 220, 59, 70, 200, 42, 190, 25, 154, 191, 189, 226, 246, 12, 190, 95, 80, 235, 187, 91, 46, 8, 190, 34, 25, 81, 60, 49, 32, 226, 189, 85, 123, 186, 61, 163, 217, 37, 190, 228, 138, 215, 189, 8, 94, 1, 189, 28, 248, 20, 190, 16, 130, 6, 62, 51, 114, 214, 61, 30, 195, 2, 190, 197, 47, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 10, 66, 189, 53, 239, 171, 61, 63, 157, 176, 60, 210, 224, 6, 188, 171, 155, 32, 190, 201, 67, 136, 61, 166, 158, 239, 61, 244, 203, 224, 189, 50, 174, 15, 62, 171, 2, 203, 188, 105, 218, 255, 189, 59, 2, 27, 62, 144, 103, 54, 59, 177, 93, 135, 61, 3, 182, 7, 190, 236, 251, 153, 189, 73, 215, 218, 61, 33, 0, 1, 62, 76, 37, 172, 189, 241, 250, 192, 188, 177, 140, 219, 60, 86, 169, 31, 189, 159, 157, 237, 189, 102, 23, 108, 61, 189, 92, 125, 61, 1, 107, 114, 61, 122, 208, 7, 190, 242, 182, 69, 61, 160, 66, 154, 189, 255, 58, 37, 190, 3, 155, 231, 189, 144, 37, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 199, 34, 190, 158, 87, 225, 61, 203, 216, 32, 190, 237, 196, 37, 188, 21, 81, 39, 60, 66, 41, 39, 62, 99, 255, 101, 61, 48, 138, 222, 61, 196, 151, 50, 190, 248, 114, 83, 61, 103, 23, 86, 60, 98, 182, 126, 61, 223, 89, 78, 61, 87, 84, 60, 189, 131, 127, 206, 61, 114, 12, 94, 61, 192, 33, 154, 60, 44, 51, 21, 62, 12, 99, 245, 61, 69, 2, 126, 189, 90, 27, 3, 60, 111, 191, 16, 62, 127, 204, 247, 189, 56, 58, 138, 61, 197, 63, 46, 62, 64, 115, 147, 61, 167, 145, 32, 190, 228, 98, 56, 189, 205, 111, 141, 60, 188, 197, 185, 189, 84, 42, 221, 188, 249, 6, 17, 190, 253, 34, 236, 61, 5, 38, 34, 61, 138, 50, 69, 189, 247, 53, 4, 62, 120, 167, 252, 189, 104, 115, 49, 62, 177, 78, 107, 189, 73, 118, 198, 60, 140, 217, 248, 189, 70, 201, 147, 189, 12, 214, 0, 190, 152, 194, 150, 59, 60, 187, 208, 189, 196, 71, 79, 59, 92, 181, 255, 61, 242, 112, 18, 62, 76, 208, 196, 61, 9, 217, 2, 62, 223, 241, 7, 62, 88, 7, 184, 186, 126, 91, 185, 61, 115, 184, 32, 62, 83, 95, 108, 61, 71, 212, 210, 61, 24, 164, 227, 189, 27, 251, 249, 60, 237, 167, 11, 190, 220, 60, 202, 189, 162, 145, 190, 189, 203, 145, 20, 190, 161, 33, 215, 188, 185, 230, 11, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 26, 43, 188, 18, 138, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 184, 135, 63, 245, 255, 42, 63, 73, 124, 125, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 239, 131, 60, 153, 51, 69, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}