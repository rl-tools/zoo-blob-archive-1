// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 220, 205, 62, 52, 249, 40, 190, 74, 28, 46, 191, 144, 68, 95, 191, 223, 239, 208, 190, 252, 12, 14, 191, 242, 57, 31, 63, 122, 40, 146, 63, 237, 220, 154, 62, 128, 197, 125, 190, 247, 230, 38, 190, 250, 29, 23, 63, 111, 253, 104, 189, 226, 30, 73, 62, 130, 248, 183, 190, 51, 3, 53, 63, 194, 160, 87, 191, 244, 50, 202, 190, 124, 169, 238, 62, 66, 236, 55, 63, 208, 87, 113, 62, 96, 91, 23, 190, 119, 128, 219, 190, 240, 39, 184, 190, 86, 213, 133, 61, 87, 192, 65, 62, 4, 96, 70, 60, 167, 71, 45, 63, 177, 214, 113, 191, 74, 20, 208, 190, 83, 156, 78, 190, 62, 208, 159, 191, 202, 156, 99, 59, 186, 253, 65, 63, 10, 2, 144, 63, 201, 182, 28, 62, 35, 96, 56, 63, 172, 170, 24, 63, 199, 157, 153, 62, 86, 135, 83, 62, 139, 22, 155, 63, 0, 112, 98, 62, 252, 80, 183, 190, 213, 169, 171, 63, 3, 217, 140, 62, 250, 218, 132, 190, 40, 160, 220, 61, 79, 150, 77, 61, 74, 38, 209, 188, 69, 247, 139, 63, 182, 243, 180, 62, 3, 30, 139, 190, 113, 143, 61, 191, 95, 228, 232, 62, 212, 183, 197, 62, 89, 229, 128, 63, 61, 228, 46, 62, 174, 170, 137, 62, 47, 71, 180, 190, 97, 45, 254, 62, 96, 230, 186, 190, 210, 150, 154, 191, 25, 103, 31, 191, 28, 218, 4, 191, 9, 238, 10, 63, 19, 179, 242, 61, 3, 209, 165, 190, 253, 196, 105, 191, 169, 64, 0, 60, 253, 70, 243, 190, 104, 176, 82, 62, 98, 82, 176, 190, 23, 163, 185, 62, 241, 144, 136, 63, 243, 67, 225, 62, 222, 82, 62, 62, 70, 12, 167, 62, 27, 127, 29, 191, 253, 50, 107, 63, 153, 218, 152, 191, 104, 101, 144, 190, 91, 162, 89, 63, 182, 198, 113, 63, 175, 46, 163, 62, 71, 9, 180, 190, 123, 239, 191, 63, 218, 28, 157, 62, 129, 171, 181, 189, 173, 252, 67, 62, 104, 105, 168, 190, 233, 23, 72, 62, 224, 46, 66, 63, 236, 13, 242, 62, 115, 35, 204, 190, 215, 209, 241, 191, 121, 9, 217, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 62, 88, 191, 113, 201, 214, 190, 37, 244, 151, 190, 237, 144, 245, 189, 252, 197, 34, 62, 179, 118, 163, 190, 79, 40, 197, 190, 211, 174, 35, 63, 166, 7, 180, 190, 129, 1, 245, 59, 67, 67, 119, 62, 177, 120, 78, 62, 135, 59, 38, 191, 166, 116, 233, 61, 33, 148, 108, 190, 151, 231, 29, 63, 73, 211, 129, 189, 213, 1, 10, 63, 132, 250, 200, 61, 28, 47, 215, 190, 76, 159, 189, 61, 248, 164, 203, 190, 235, 63, 167, 62, 159, 166, 225, 62, 113, 105, 254, 189, 206, 139, 217, 61, 42, 165, 188, 62, 104, 148, 1, 191, 139, 91, 131, 190, 12, 32, 249, 189, 182, 168, 73, 62, 254, 215, 210, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 71, 122, 188, 247, 241, 9, 190, 143, 99, 13, 61, 7, 199, 93, 189, 103, 234, 132, 189, 163, 45, 49, 190, 72, 143, 201, 189, 11, 86, 26, 62, 103, 228, 243, 189, 194, 163, 114, 189, 54, 199, 0, 190, 71, 215, 89, 61, 133, 192, 158, 61, 43, 65, 31, 189, 144, 163, 1, 190, 190, 60, 195, 189, 135, 25, 187, 189, 234, 207, 151, 187, 131, 150, 222, 189, 167, 58, 214, 189, 111, 191, 1, 62, 9, 237, 135, 60, 168, 85, 205, 189, 176, 205, 32, 190, 194, 25, 234, 189, 145, 66, 8, 61, 9, 60, 65, 189, 41, 6, 243, 189, 157, 221, 235, 59, 190, 6, 70, 61, 170, 147, 62, 190, 217, 64, 184, 61, 164, 155, 194, 61, 181, 22, 57, 191, 117, 30, 158, 190, 96, 239, 178, 61, 0, 132, 20, 190, 214, 112, 20, 63, 94, 236, 23, 190, 22, 55, 174, 187, 29, 69, 8, 61, 165, 53, 169, 61, 77, 166, 40, 62, 9, 123, 22, 61, 137, 194, 124, 190, 7, 124, 27, 190, 165, 137, 17, 190, 125, 86, 127, 62, 230, 100, 174, 190, 1, 52, 254, 60, 227, 48, 200, 60, 48, 214, 122, 189, 101, 96, 28, 191, 43, 41, 86, 190, 14, 130, 133, 61, 48, 58, 51, 190, 27, 60, 165, 190, 220, 58, 193, 62, 99, 167, 164, 62, 91, 236, 253, 190, 108, 141, 154, 190, 198, 82, 205, 190, 31, 0, 211, 59, 25, 31, 206, 190, 76, 70, 186, 61, 9, 73, 128, 189, 62, 245, 229, 61, 206, 200, 152, 59, 165, 111, 103, 190, 86, 122, 101, 187, 59, 6, 108, 189, 199, 126, 214, 60, 115, 83, 51, 61, 7, 246, 118, 62, 161, 40, 253, 62, 105, 131, 96, 61, 36, 64, 134, 61, 179, 80, 62, 62, 237, 134, 224, 61, 108, 10, 74, 61, 50, 155, 31, 61, 180, 69, 174, 61, 87, 199, 46, 190, 198, 46, 53, 61, 13, 176, 104, 62, 242, 95, 151, 190, 253, 204, 229, 62, 140, 22, 171, 190, 134, 125, 102, 62, 241, 145, 72, 190, 230, 250, 152, 61, 218, 93, 220, 61, 205, 214, 61, 190, 51, 94, 23, 190, 171, 77, 174, 62, 220, 21, 229, 62, 70, 245, 103, 61, 178, 163, 26, 62, 39, 132, 44, 191, 69, 41, 4, 61, 18, 36, 102, 190, 99, 45, 143, 62, 62, 136, 120, 191, 119, 18, 33, 62, 130, 89, 138, 61, 224, 75, 71, 62, 36, 200, 253, 61, 199, 23, 157, 188, 12, 92, 205, 190, 230, 159, 2, 191, 53, 119, 38, 60, 67, 134, 125, 190, 205, 109, 250, 190, 232, 115, 162, 62, 253, 105, 116, 190, 246, 164, 54, 62, 2, 123, 68, 189, 46, 211, 15, 190, 30, 77, 200, 189, 244, 164, 95, 190, 71, 230, 177, 190, 57, 109, 49, 62, 206, 176, 205, 62, 62, 61, 50, 191, 117, 171, 11, 190, 145, 162, 110, 190, 208, 59, 3, 60, 161, 129, 255, 189, 33, 47, 161, 60, 161, 65, 25, 190, 106, 144, 225, 61, 199, 40, 148, 189, 4, 153, 183, 188, 98, 114, 217, 59, 43, 196, 82, 188, 190, 125, 184, 61, 113, 124, 122, 189, 74, 207, 34, 189, 148, 135, 32, 62, 55, 245, 30, 189, 9, 241, 220, 61, 176, 102, 254, 188, 145, 239, 195, 189, 189, 39, 59, 60, 221, 140, 207, 189, 212, 70, 159, 187, 123, 124, 30, 190, 231, 164, 225, 60, 96, 251, 23, 190, 183, 218, 46, 189, 89, 6, 79, 189, 214, 145, 237, 188, 239, 241, 103, 61, 22, 76, 17, 190, 46, 132, 217, 189, 207, 240, 103, 61, 131, 68, 33, 62, 1, 11, 111, 58, 116, 89, 16, 190, 204, 136, 223, 61, 136, 232, 5, 61, 8, 30, 147, 62, 242, 95, 112, 189, 105, 171, 109, 61, 154, 204, 201, 62, 179, 97, 98, 61, 128, 218, 171, 62, 30, 133, 187, 59, 160, 167, 163, 189, 108, 4, 131, 61, 239, 244, 82, 191, 13, 68, 132, 190, 243, 104, 128, 62, 114, 51, 35, 190, 65, 168, 51, 189, 63, 186, 232, 189, 249, 181, 230, 189, 220, 87, 217, 189, 54, 190, 110, 190, 227, 57, 230, 189, 110, 106, 72, 62, 188, 209, 157, 62, 225, 227, 106, 190, 17, 137, 72, 62, 148, 162, 190, 61, 83, 79, 7, 187, 48, 146, 156, 190, 194, 97, 174, 61, 225, 45, 199, 62, 215, 143, 91, 62, 122, 238, 30, 62, 56, 101, 1, 185, 159, 224, 92, 190, 102, 15, 7, 190, 117, 106, 65, 190, 54, 52, 66, 60, 167, 160, 229, 60, 116, 86, 11, 62, 32, 51, 96, 62, 252, 99, 68, 62, 33, 51, 194, 189, 22, 54, 78, 62, 89, 180, 162, 190, 167, 148, 30, 61, 179, 223, 160, 189, 6, 149, 56, 188, 15, 10, 230, 60, 98, 212, 27, 61, 206, 255, 41, 60, 18, 195, 163, 190, 218, 217, 22, 61, 243, 128, 75, 190, 175, 21, 78, 190, 12, 59, 100, 62, 165, 205, 231, 188, 79, 114, 63, 62, 163, 207, 227, 189, 76, 136, 35, 62, 188, 144, 189, 61, 96, 20, 231, 189, 201, 57, 77, 190, 132, 27, 69, 191, 139, 207, 98, 190, 114, 110, 67, 191, 155, 6, 146, 190, 233, 24, 7, 191, 137, 34, 28, 191, 132, 240, 25, 62, 12, 193, 136, 191, 225, 15, 140, 190, 159, 71, 236, 190, 112, 97, 163, 190, 119, 244, 134, 61, 175, 180, 199, 190, 25, 179, 130, 62, 73, 216, 135, 59, 175, 236, 1, 191, 39, 226, 155, 190, 130, 11, 23, 62, 72, 60, 85, 62, 188, 230, 135, 59, 168, 171, 135, 62, 174, 208, 22, 190, 119, 10, 48, 190, 37, 44, 88, 191, 210, 194, 15, 63, 171, 109, 182, 62, 244, 248, 160, 190, 27, 25, 132, 190, 8, 116, 34, 189, 217, 189, 239, 62, 166, 231, 40, 191, 253, 35, 50, 62, 122, 5, 64, 191, 150, 85, 6, 190, 154, 187, 69, 190, 62, 100, 12, 188, 87, 126, 7, 190, 102, 225, 36, 62, 115, 233, 17, 61, 249, 5, 82, 61, 60, 211, 131, 189, 2, 151, 141, 61, 250, 59, 169, 189, 244, 166, 232, 189, 151, 211, 33, 60, 24, 151, 125, 62, 182, 9, 63, 62, 25, 141, 136, 62, 146, 57, 100, 61, 197, 108, 104, 188, 13, 171, 174, 62, 2, 137, 70, 62, 205, 62, 161, 62, 226, 243, 190, 62, 240, 146, 210, 189, 46, 185, 221, 61, 126, 177, 0, 191, 255, 234, 155, 62, 4, 73, 108, 62, 129, 205, 177, 61, 222, 129, 174, 187, 152, 91, 115, 61, 84, 153, 137, 62, 238, 12, 159, 189, 158, 193, 67, 62, 254, 13, 122, 62, 140, 61, 210, 62, 83, 193, 8, 190, 184, 128, 118, 191, 92, 193, 15, 191, 127, 101, 191, 61, 2, 15, 26, 191, 73, 89, 152, 188, 203, 51, 12, 191, 5, 91, 255, 189, 25, 197, 27, 190, 64, 131, 105, 190, 142, 239, 139, 189, 44, 38, 42, 61, 208, 111, 1, 191, 8, 97, 238, 190, 16, 126, 187, 189, 117, 9, 154, 62, 234, 27, 186, 190, 126, 214, 18, 62, 172, 106, 246, 190, 130, 0, 133, 61, 61, 85, 120, 191, 23, 58, 241, 189, 236, 32, 134, 62, 59, 178, 160, 189, 162, 24, 173, 190, 80, 190, 43, 189, 221, 36, 182, 62, 88, 75, 40, 191, 244, 27, 162, 190, 129, 251, 89, 191, 180, 170, 73, 61, 70, 10, 210, 190, 138, 231, 74, 62, 246, 238, 112, 190, 43, 224, 199, 190, 226, 239, 246, 60, 197, 75, 156, 190, 87, 85, 27, 62, 155, 69, 83, 190, 131, 170, 124, 189, 82, 151, 12, 62, 74, 50, 140, 188, 250, 200, 157, 190, 13, 214, 53, 62, 180, 59, 145, 190, 71, 50, 185, 61, 154, 73, 147, 62, 179, 172, 62, 62, 132, 125, 215, 188, 35, 63, 7, 62, 31, 49, 89, 62, 134, 71, 98, 190, 240, 71, 182, 190, 200, 223, 219, 62, 247, 35, 140, 61, 135, 176, 97, 189, 206, 231, 221, 60, 43, 14, 73, 62, 189, 193, 240, 62, 229, 156, 219, 190, 136, 52, 155, 188, 201, 67, 181, 190, 178, 53, 52, 62, 54, 99, 89, 191, 112, 103, 129, 61, 91, 231, 161, 190, 72, 81, 60, 190, 113, 72, 188, 61, 191, 66, 130, 190, 78, 33, 17, 62, 248, 205, 131, 190, 17, 34, 102, 61, 230, 33, 221, 189, 56, 16, 103, 62, 114, 126, 224, 189, 245, 186, 135, 60, 254, 220, 146, 190, 14, 40, 111, 62, 83, 152, 121, 62, 173, 70, 138, 61, 219, 70, 59, 61, 250, 36, 72, 60, 24, 152, 39, 61, 66, 194, 73, 190, 165, 183, 218, 190, 248, 39, 235, 62, 6, 108, 196, 61, 189, 104, 111, 190, 88, 202, 140, 61, 156, 27, 107, 62, 34, 11, 246, 62, 172, 1, 23, 191, 74, 151, 128, 62, 76, 43, 13, 191, 145, 197, 7, 188, 150, 44, 22, 191, 247, 147, 41, 62, 204, 50, 185, 61, 12, 160, 40, 190, 161, 76, 141, 61, 94, 172, 80, 188, 38, 106, 102, 189, 110, 244, 252, 189, 47, 163, 239, 61, 4, 89, 207, 189, 89, 121, 63, 61, 160, 128, 196, 61, 250, 228, 1, 61, 97, 138, 203, 60, 122, 55, 232, 186, 225, 97, 33, 190, 60, 80, 129, 62, 183, 158, 120, 190, 50, 103, 18, 62, 159, 1, 250, 61, 132, 112, 87, 189, 98, 44, 135, 189, 32, 146, 149, 190, 184, 7, 250, 61, 30, 152, 61, 62, 52, 202, 134, 61, 245, 7, 172, 61, 76, 129, 79, 189, 33, 253, 135, 190, 211, 203, 170, 189, 121, 123, 145, 190, 18, 84, 244, 61, 17, 23, 71, 190, 138, 42, 6, 190, 231, 194, 75, 190, 245, 25, 221, 62, 165, 77, 143, 60, 66, 249, 137, 62, 105, 99, 184, 190, 249, 126, 0, 62, 245, 24, 240, 61, 109, 197, 50, 62, 101, 138, 32, 190, 67, 153, 187, 189, 151, 71, 141, 62, 160, 124, 198, 62, 234, 29, 3, 189, 104, 209, 199, 190, 70, 221, 147, 61, 36, 215, 22, 61, 126, 0, 102, 189, 251, 104, 56, 60, 219, 57, 229, 61, 117, 92, 122, 190, 232, 85, 248, 190, 165, 64, 25, 188, 204, 177, 170, 62, 87, 54, 165, 62, 108, 0, 25, 62, 152, 237, 5, 191, 136, 240, 248, 62, 106, 81, 185, 190, 201, 161, 206, 188, 149, 12, 19, 190, 247, 60, 167, 190, 4, 138, 25, 189, 38, 177, 53, 190, 174, 255, 174, 62, 158, 95, 145, 188, 44, 140, 255, 190, 9, 160, 216, 190, 49, 30, 117, 62, 9, 226, 146, 190, 25, 44, 88, 61, 41, 53, 179, 189, 46, 183, 29, 191, 114, 97, 167, 61, 247, 226, 130, 62, 40, 162, 73, 62, 7, 132, 56, 62, 121, 150, 129, 190, 57, 198, 143, 189, 51, 210, 246, 59, 239, 43, 170, 61, 63, 89, 168, 59, 78, 173, 221, 61, 58, 133, 154, 62, 245, 105, 71, 191, 39, 102, 18, 191, 152, 77, 122, 61, 146, 109, 98, 190, 122, 72, 31, 191, 102, 127, 167, 62, 70, 218, 17, 189, 29, 182, 138, 189, 42, 24, 3, 62, 93, 218, 113, 61, 8, 56, 224, 190, 113, 38, 93, 62, 228, 49, 251, 61, 174, 67, 39, 189, 164, 88, 15, 61, 76, 223, 205, 190, 83, 17, 19, 62, 153, 231, 218, 61, 8, 159, 104, 189, 246, 111, 88, 190, 225, 198, 112, 190, 133, 87, 233, 61, 190, 39, 164, 62, 197, 240, 17, 190, 121, 36, 2, 62, 118, 137, 217, 189, 213, 148, 157, 60, 89, 7, 137, 190, 94, 98, 148, 61, 146, 248, 6, 189, 13, 72, 132, 62, 246, 47, 89, 62, 238, 142, 92, 61, 154, 72, 93, 62, 149, 187, 192, 188, 246, 159, 213, 190, 182, 68, 181, 190, 172, 100, 205, 62, 9, 180, 166, 62, 90, 150, 13, 62, 12, 156, 10, 189, 171, 68, 142, 62, 134, 201, 252, 189, 162, 178, 17, 62, 8, 77, 210, 189, 90, 122, 25, 61, 64, 237, 101, 61, 237, 159, 194, 61, 45, 59, 52, 190, 64, 43, 16, 190, 45, 119, 201, 188, 171, 233, 246, 188, 35, 66, 220, 189, 9, 238, 144, 189, 116, 78, 162, 187, 215, 212, 83, 189, 6, 255, 180, 189, 238, 119, 23, 189, 101, 50, 222, 189, 36, 18, 46, 190, 99, 87, 227, 188, 40, 10, 99, 189, 110, 114, 234, 189, 63, 147, 50, 188, 5, 142, 70, 189, 233, 155, 237, 59, 82, 82, 198, 61, 37, 89, 219, 189, 114, 75, 128, 189, 79, 46, 238, 59, 92, 162, 162, 61, 158, 53, 206, 189, 67, 165, 155, 61, 97, 140, 135, 187, 26, 116, 8, 190, 119, 126, 129, 59, 49, 13, 120, 61, 169, 209, 14, 190, 214, 22, 198, 189, 6, 117, 46, 190, 85, 126, 35, 190, 93, 103, 52, 190, 172, 30, 84, 189, 113, 246, 77, 61, 6, 130, 34, 61, 36, 196, 35, 190, 96, 72, 36, 59, 42, 12, 231, 61, 126, 206, 116, 59, 120, 64, 140, 189, 217, 79, 184, 187, 143, 96, 242, 189, 189, 252, 238, 189, 180, 35, 57, 190, 70, 122, 38, 62, 225, 89, 14, 190, 49, 78, 176, 61, 172, 247, 61, 189, 113, 91, 149, 187, 91, 207, 167, 189, 129, 149, 142, 61, 39, 95, 32, 62, 9, 49, 133, 189, 121, 72, 113, 61, 120, 25, 161, 61, 37, 109, 16, 190, 122, 158, 139, 190, 141, 184, 244, 60, 88, 189, 78, 190, 55, 182, 57, 191, 172, 164, 216, 61, 88, 84, 53, 191, 166, 99, 242, 190, 91, 32, 252, 61, 242, 76, 168, 60, 63, 201, 12, 191, 100, 227, 147, 62, 212, 8, 9, 191, 31, 175, 176, 60, 131, 124, 175, 191, 51, 67, 65, 188, 232, 197, 209, 62, 112, 202, 30, 190, 170, 137, 206, 189, 123, 67, 195, 190, 91, 33, 6, 191, 243, 24, 126, 62, 27, 226, 18, 190, 233, 7, 118, 62, 25, 166, 174, 62, 72, 87, 158, 191, 84, 186, 135, 190, 74, 237, 162, 190, 62, 196, 154, 190, 182, 41, 27, 63, 120, 217, 23, 190, 168, 5, 156, 190, 234, 7, 69, 62, 38, 145, 177, 189, 38, 212, 223, 61, 12, 55, 149, 62, 176, 34, 136, 60, 99, 105, 206, 62, 16, 13, 16, 191, 73, 185, 71, 60, 227, 0, 189, 61, 35, 160, 72, 189, 175, 148, 149, 190, 240, 18, 77, 189, 217, 210, 65, 62, 157, 238, 33, 62, 107, 17, 55, 62, 235, 71, 10, 190, 128, 204, 159, 188, 160, 22, 0, 62, 57, 227, 168, 61, 17, 80, 207, 62, 155, 246, 190, 61, 172, 144, 35, 190, 77, 201, 197, 190, 251, 38, 155, 188, 91, 128, 132, 62, 86, 26, 235, 61, 90, 98, 1, 189, 175, 193, 114, 190, 237, 12, 32, 62, 84, 148, 254, 188, 79, 190, 98, 62, 75, 234, 22, 62, 88, 113, 152, 190, 250, 216, 103, 190, 84, 220, 4, 62, 206, 30, 201, 62, 199, 125, 10, 191, 11, 142, 135, 188, 22, 43, 11, 191, 61, 29, 168, 190, 100, 180, 118, 62, 211, 248, 21, 189, 194, 143, 12, 61, 98, 78, 210, 62, 203, 82, 54, 62, 211, 68, 189, 189, 122, 42, 20, 62, 204, 173, 121, 191, 122, 39, 41, 62, 92, 35, 31, 191, 147, 3, 229, 60, 104, 211, 211, 62, 96, 193, 181, 61, 34, 164, 10, 62, 193, 233, 25, 191, 29, 71, 221, 62, 26, 23, 143, 62, 140, 175, 106, 62, 157, 154, 102, 190, 54, 85, 140, 190, 25, 54, 110, 62, 255, 84, 140, 191, 141, 67, 24, 62, 75, 6, 89, 190, 81, 135, 87, 62, 133, 148, 117, 62, 80, 38, 156, 189, 129, 190, 130, 190, 44, 202, 86, 61, 92, 31, 166, 190, 165, 34, 246, 62, 146, 155, 148, 190, 114, 5, 95, 190, 75, 44, 140, 189, 120, 19, 134, 62, 75, 249, 144, 190, 88, 66, 130, 190, 108, 222, 245, 190, 10, 112, 14, 62, 221, 8, 13, 63, 179, 136, 71, 61, 132, 77, 176, 62, 111, 30, 183, 61, 27, 149, 18, 190, 240, 220, 5, 190, 175, 188, 37, 190, 176, 208, 221, 62, 83, 44, 159, 190, 248, 166, 82, 60, 255, 111, 202, 189, 7, 99, 141, 62, 174, 115, 157, 62, 90, 224, 5, 191, 51, 189, 156, 62, 41, 241, 90, 190, 195, 239, 125, 62, 123, 243, 6, 191, 180, 30, 203, 190, 112, 74, 69, 62, 14, 28, 128, 62, 128, 80, 228, 190, 91, 152, 127, 62, 192, 195, 32, 191, 72, 170, 157, 188, 230, 152, 94, 62, 101, 109, 40, 190, 30, 113, 253, 189, 212, 77, 13, 63, 113, 180, 113, 62, 132, 139, 145, 189, 209, 212, 161, 62, 1, 5, 133, 190, 42, 184, 170, 61, 15, 40, 81, 190, 241, 191, 65, 60, 25, 144, 2, 63, 160, 25, 235, 189, 209, 205, 229, 61, 49, 97, 239, 190, 107, 121, 134, 62, 161, 143, 87, 62, 185, 199, 36, 62, 207, 69, 181, 189, 36, 16, 47, 190, 190, 208, 54, 62, 38, 70, 224, 190, 141, 97, 191, 188, 175, 153, 240, 189, 11, 145, 236, 61, 3, 43, 191, 190, 146, 46, 9, 62, 101, 55, 215, 190, 94, 241, 77, 62, 117, 54, 213, 190, 212, 181, 61, 191, 124, 80, 141, 190, 179, 128, 225, 190, 251, 129, 20, 62, 66, 252, 57, 191, 92, 101, 182, 190, 177, 108, 64, 190, 246, 171, 225, 190, 143, 210, 230, 189, 0, 54, 211, 62, 150, 48, 222, 62, 6, 199, 173, 62, 227, 255, 201, 189, 34, 50, 211, 190, 39, 41, 137, 190, 222, 190, 187, 190, 226, 255, 229, 62, 151, 91, 31, 62, 128, 131, 156, 189, 165, 218, 113, 189, 29, 227, 71, 59, 248, 35, 39, 63, 128, 47, 31, 191, 87, 146, 238, 62, 95, 42, 105, 190, 88, 142, 145, 62, 64, 188, 39, 191, 179, 169, 220, 62, 120, 214, 57, 190, 166, 43, 226, 188, 97, 49, 171, 61, 34, 167, 160, 61, 180, 208, 249, 61, 146, 221, 177, 189, 7, 2, 155, 61, 245, 167, 152, 61, 161, 0, 145, 62, 120, 81, 73, 190, 235, 2, 90, 189, 0, 18, 207, 190, 108, 185, 246, 61, 138, 45, 21, 62, 212, 74, 79, 61, 193, 206, 21, 62, 234, 51, 144, 61, 8, 79, 132, 190, 93, 155, 170, 189, 1, 187, 87, 190, 41, 132, 241, 62, 130, 195, 31, 190, 124, 237, 207, 189, 36, 177, 27, 190, 252, 61, 129, 62, 150, 72, 147, 62, 136, 18, 157, 190, 201, 251, 170, 62, 82, 105, 245, 190, 42, 2, 185, 61, 248, 48, 248, 190, 124, 235, 0, 62, 51, 211, 158, 61, 195, 27, 80, 61, 198, 216, 212, 189, 73, 140, 128, 61, 198, 125, 20, 62, 210, 11, 120, 60, 122, 79, 84, 190, 59, 205, 5, 62, 37, 227, 86, 190, 152, 127, 150, 61, 131, 89, 1, 190, 58, 128, 184, 189, 97, 140, 178, 61, 56, 47, 225, 188, 16, 74, 201, 60, 151, 93, 234, 61, 169, 45, 213, 189, 102, 18, 29, 61, 118, 140, 15, 190, 13, 225, 190, 60, 249, 228, 100, 189, 6, 92, 52, 190, 0, 230, 220, 189, 119, 182, 36, 190, 157, 42, 38, 61, 31, 226, 88, 188, 172, 50, 142, 189, 129, 202, 106, 61, 148, 2, 70, 190, 89, 227, 34, 189, 145, 108, 54, 189, 185, 64, 134, 60, 154, 179, 62, 189, 110, 196, 38, 190, 250, 212, 13, 62, 86, 2, 162, 189, 140, 46, 26, 189, 101, 252, 172, 61, 191, 226, 210, 59, 41, 148, 139, 188, 46, 122, 61, 60, 236, 246, 51, 189, 81, 246, 135, 59, 179, 80, 1, 190, 227, 67, 171, 189, 108, 71, 210, 189, 220, 92, 38, 190, 183, 134, 75, 61, 136, 141, 11, 190, 16, 136, 224, 61, 73, 167, 143, 60, 60, 184, 176, 189, 63, 206, 182, 61, 235, 90, 0, 62, 150, 172, 50, 58, 44, 155, 109, 189, 84, 175, 168, 60, 85, 168, 57, 61, 245, 71, 91, 190, 97, 101, 95, 190, 228, 145, 54, 190, 150, 230, 241, 61, 214, 233, 43, 188, 92, 137, 129, 190, 224, 125, 8, 189, 30, 114, 114, 62, 208, 18, 231, 190, 172, 189, 50, 62, 73, 151, 8, 191, 37, 137, 2, 190, 12, 155, 172, 61, 179, 203, 51, 188, 40, 48, 173, 189, 80, 235, 71, 62, 136, 111, 183, 62, 28, 168, 150, 61, 200, 169, 88, 61, 187, 161, 141, 190, 229, 135, 172, 61, 89, 133, 17, 190, 179, 250, 17, 61, 241, 32, 230, 62, 218, 197, 166, 61, 109, 82, 140, 62, 68, 121, 48, 191, 224, 110, 20, 61, 13, 154, 37, 62, 64, 24, 143, 61, 28, 59, 73, 190, 113, 74, 197, 189, 200, 92, 20, 62, 117, 164, 109, 190, 178, 146, 31, 62, 133, 96, 251, 189, 173, 126, 166, 189, 60, 13, 196, 62, 220, 225, 244, 188, 141, 209, 204, 190, 106, 91, 134, 62, 43, 66, 140, 59, 238, 213, 79, 62, 242, 245, 179, 190, 100, 90, 47, 190, 79, 4, 34, 189, 71, 207, 35, 60, 172, 148, 72, 190, 62, 140, 97, 62, 90, 250, 173, 189, 98, 17, 161, 188, 153, 95, 71, 190, 25, 158, 237, 61, 123, 153, 158, 190, 17, 4, 220, 61, 255, 129, 224, 60, 5, 253, 53, 62, 193, 61, 50, 189, 71, 116, 29, 190, 5, 154, 215, 59, 205, 87, 16, 62, 42, 4, 227, 189, 60, 44, 141, 62, 48, 14, 164, 62, 245, 190, 236, 190, 176, 189, 207, 190, 22, 211, 218, 190, 201, 186, 5, 62, 108, 191, 157, 190, 161, 128, 42, 62, 67, 182, 197, 61, 239, 233, 153, 61, 24, 151, 21, 190, 192, 71, 38, 190, 132, 59, 192, 189, 59, 118, 17, 188, 36, 142, 145, 188, 213, 104, 1, 62, 254, 1, 15, 190, 162, 2, 44, 61, 188, 209, 229, 61, 76, 255, 43, 62, 103, 79, 242, 189, 152, 4, 20, 190, 67, 11, 42, 190, 100, 116, 115, 59, 13, 82, 19, 190, 18, 234, 5, 189, 138, 12, 133, 189, 248, 104, 203, 189, 224, 188, 43, 190, 126, 19, 9, 62, 108, 20, 47, 190, 214, 217, 168, 61, 55, 90, 218, 61, 10, 169, 224, 61, 168, 91, 197, 189, 239, 120, 104, 58, 213, 135, 99, 61, 37, 6, 235, 189, 83, 118, 206, 189, 185, 66, 175, 62, 247, 252, 182, 190, 5, 19, 243, 189, 63, 191, 52, 62, 121, 63, 219, 61, 151, 201, 194, 190, 152, 139, 56, 189, 45, 33, 10, 190, 70, 210, 2, 190, 116, 96, 70, 190, 31, 240, 147, 190, 235, 64, 10, 61, 21, 245, 188, 188, 27, 224, 218, 187, 47, 129, 29, 62, 150, 94, 145, 62, 253, 229, 159, 62, 201, 71, 9, 189, 76, 34, 186, 62, 203, 136, 49, 62, 17, 217, 174, 189, 76, 194, 139, 190, 196, 87, 243, 61, 226, 187, 241, 189, 233, 189, 43, 62, 120, 137, 121, 62, 182, 249, 113, 188, 226, 169, 41, 62, 239, 82, 221, 188, 0, 201, 90, 60, 215, 165, 125, 62, 242, 191, 184, 191, 228, 33, 143, 190, 217, 192, 43, 61, 172, 118, 194, 62, 239, 18, 35, 191, 238, 204, 167, 62, 171, 135, 11, 191, 166, 133, 86, 62, 133, 68, 157, 62, 91, 155, 67, 60, 125, 14, 168, 190, 69, 6, 192, 61, 82, 250, 180, 62, 83, 77, 221, 62, 227, 57, 23, 63, 138, 165, 101, 191, 88, 38, 76, 62, 7, 50, 84, 191, 91, 228, 177, 190, 149, 103, 225, 62, 94, 87, 40, 190, 207, 181, 26, 189, 118, 222, 190, 61, 106, 177, 173, 60, 230, 133, 178, 62, 147, 168, 183, 190, 5, 219, 218, 189, 34, 233, 229, 190, 123, 38, 114, 190, 189, 107, 130, 191, 186, 176, 112, 62, 115, 90, 137, 191, 117, 130, 137, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 225, 159, 189, 2, 143, 78, 62, 51, 34, 239, 61, 60, 128, 154, 189, 219, 220, 50, 190, 230, 128, 0, 188, 4, 152, 154, 62, 113, 18, 232, 60, 176, 14, 198, 62, 62, 160, 60, 62, 169, 245, 9, 62, 174, 192, 166, 62, 197, 244, 138, 62, 142, 100, 240, 187, 223, 161, 222, 190, 138, 190, 76, 190, 233, 207, 149, 61, 134, 13, 203, 61, 2, 86, 75, 62, 52, 4, 251, 61, 128, 25, 91, 62, 134, 71, 148, 61, 51, 176, 12, 62, 57, 159, 195, 62, 107, 196, 1, 62, 182, 39, 201, 187, 104, 115, 17, 190, 172, 179, 138, 62, 191, 215, 247, 60, 255, 58, 37, 190, 66, 176, 68, 187, 5, 231, 187, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 237, 13, 190, 94, 233, 241, 62, 131, 171, 113, 190, 255, 220, 154, 62, 190, 128, 139, 60, 180, 25, 237, 62, 174, 213, 88, 62, 186, 56, 128, 63, 150, 184, 130, 190, 142, 214, 138, 63, 163, 195, 162, 62, 156, 84, 236, 62, 49, 103, 160, 188, 252, 8, 49, 191, 29, 83, 240, 62, 187, 23, 18, 63, 73, 6, 171, 60, 130, 91, 14, 62, 162, 1, 142, 63, 95, 80, 35, 190, 107, 97, 54, 191, 139, 137, 232, 62, 130, 96, 36, 191, 132, 105, 143, 63, 225, 170, 182, 62, 153, 71, 1, 61, 217, 234, 220, 189, 50, 142, 160, 190, 4, 175, 4, 62, 188, 197, 185, 189, 233, 250, 66, 190, 222, 7, 189, 191, 81, 214, 233, 61, 232, 129, 202, 61, 250, 57, 75, 190, 239, 5, 222, 62, 67, 134, 230, 189, 56, 99, 122, 189, 105, 233, 174, 190, 3, 197, 131, 62, 214, 231, 128, 190, 98, 228, 161, 190, 89, 37, 140, 190, 149, 210, 203, 189, 127, 165, 107, 190, 14, 112, 22, 62, 42, 11, 152, 62, 97, 239, 7, 190, 133, 96, 171, 61, 190, 81, 0, 62, 67, 135, 26, 62, 75, 194, 150, 60, 208, 57, 19, 62, 160, 62, 231, 62, 117, 229, 238, 61, 33, 38, 246, 62, 197, 27, 30, 190, 208, 61, 10, 189, 67, 182, 31, 190, 160, 7, 184, 189, 175, 129, 0, 191, 203, 145, 20, 190, 42, 32, 172, 189, 2, 169, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 121, 189, 189, 47, 201, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {155, 123, 116, 63, 207, 20, 22, 63, 236, 70, 186, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {55, 180, 84, 192, 174, 90, 110, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0095/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}