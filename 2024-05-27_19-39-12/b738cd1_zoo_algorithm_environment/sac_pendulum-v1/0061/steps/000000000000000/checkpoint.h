// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 195, 203, 190, 71, 118, 205, 62, 193, 158, 150, 189, 240, 120, 178, 61, 29, 101, 246, 62, 181, 159, 242, 190, 30, 78, 5, 63, 37, 215, 163, 62, 68, 27, 175, 190, 76, 200, 210, 190, 182, 49, 91, 190, 85, 216, 201, 62, 30, 216, 214, 188, 37, 172, 160, 62, 27, 87, 210, 190, 18, 248, 188, 61, 173, 145, 156, 60, 119, 47, 93, 62, 197, 132, 72, 62, 116, 163, 110, 62, 143, 66, 75, 61, 173, 172, 247, 188, 110, 37, 142, 189, 253, 22, 144, 190, 163, 228, 2, 63, 221, 20, 34, 62, 169, 190, 48, 190, 165, 249, 234, 62, 178, 173, 131, 189, 163, 138, 50, 62, 170, 49, 247, 62, 19, 73, 180, 62, 215, 3, 118, 62, 205, 224, 246, 59, 237, 53, 200, 190, 230, 2, 208, 62, 104, 205, 2, 191, 92, 128, 214, 60, 223, 36, 13, 62, 152, 186, 6, 191, 247, 91, 133, 190, 98, 194, 80, 190, 67, 232, 54, 62, 151, 165, 24, 190, 52, 192, 150, 62, 70, 209, 129, 190, 200, 208, 16, 191, 26, 144, 165, 62, 196, 163, 21, 62, 110, 54, 145, 58, 64, 82, 20, 62, 119, 80, 171, 61, 171, 215, 6, 191, 84, 77, 187, 62, 31, 67, 57, 62, 62, 147, 203, 62, 246, 200, 174, 62, 126, 103, 233, 190, 78, 39, 169, 190, 33, 99, 149, 62, 199, 49, 161, 62, 28, 3, 15, 63, 157, 213, 89, 62, 245, 110, 10, 191, 159, 137, 44, 62, 135, 146, 12, 63, 121, 133, 241, 190, 98, 65, 70, 189, 81, 108, 17, 63, 23, 241, 190, 62, 186, 58, 48, 62, 66, 110, 104, 189, 65, 239, 192, 190, 139, 186, 105, 62, 45, 113, 150, 62, 33, 150, 16, 191, 102, 153, 181, 62, 107, 39, 3, 191, 192, 190, 135, 189, 88, 77, 147, 62, 255, 55, 5, 191, 115, 228, 239, 62, 242, 57, 158, 190, 139, 84, 250, 189, 101, 39, 162, 190, 9, 71, 142, 62, 145, 139, 173, 190, 70, 236, 182, 190, 189, 69, 94, 190, 64, 120, 244, 190, 215, 145, 12, 191, 77, 167, 185, 190, 251, 36, 92, 62, 45, 50, 17, 191, 187, 35, 207, 190, 155, 99, 221, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 168, 19, 191, 72, 120, 10, 191, 230, 204, 226, 190, 234, 199, 187, 60, 179, 142, 3, 62, 184, 25, 227, 62, 171, 21, 50, 189, 216, 155, 172, 62, 152, 190, 134, 190, 43, 106, 163, 190, 5, 20, 89, 190, 36, 80, 250, 189, 17, 57, 241, 62, 176, 20, 143, 62, 119, 153, 198, 190, 84, 73, 243, 190, 14, 7, 194, 190, 26, 136, 154, 62, 41, 188, 189, 190, 120, 74, 60, 190, 56, 79, 79, 190, 64, 225, 195, 62, 178, 221, 9, 63, 126, 116, 155, 62, 47, 202, 103, 61, 246, 74, 93, 190, 235, 232, 16, 61, 160, 67, 215, 190, 214, 236, 8, 190, 16, 201, 239, 62, 188, 49, 39, 62, 189, 171, 68, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 186, 135, 61, 52, 163, 50, 62, 201, 148, 209, 188, 18, 198, 129, 189, 65, 192, 185, 189, 208, 61, 24, 62, 13, 233, 38, 190, 217, 52, 47, 62, 219, 144, 255, 189, 147, 191, 8, 189, 224, 56, 215, 188, 61, 53, 251, 60, 10, 161, 191, 189, 226, 106, 219, 187, 9, 204, 227, 189, 76, 81, 40, 62, 228, 149, 98, 189, 78, 7, 212, 61, 180, 110, 44, 190, 175, 235, 62, 61, 72, 147, 153, 189, 88, 108, 195, 61, 248, 148, 254, 60, 138, 75, 227, 61, 144, 157, 38, 189, 136, 128, 212, 61, 170, 179, 47, 190, 4, 241, 0, 62, 33, 16, 49, 189, 109, 74, 111, 60, 244, 92, 210, 61, 110, 199, 65, 189, 46, 63, 3, 190, 142, 4, 19, 61, 166, 185, 187, 61, 245, 44, 18, 62, 220, 141, 165, 188, 79, 16, 221, 61, 52, 206, 176, 61, 24, 126, 175, 188, 103, 158, 4, 190, 5, 130, 20, 62, 171, 129, 155, 61, 3, 162, 32, 190, 65, 54, 8, 189, 54, 179, 90, 61, 235, 64, 137, 61, 190, 112, 50, 189, 34, 188, 160, 60, 5, 48, 196, 189, 241, 231, 118, 61, 186, 151, 37, 190, 65, 31, 250, 189, 90, 5, 191, 61, 195, 214, 13, 189, 141, 226, 95, 189, 55, 62, 4, 190, 203, 166, 84, 189, 145, 108, 52, 59, 140, 119, 55, 189, 150, 255, 203, 189, 90, 83, 61, 189, 20, 140, 199, 189, 231, 182, 136, 61, 164, 135, 102, 61, 130, 130, 47, 62, 105, 165, 195, 189, 93, 92, 189, 189, 144, 129, 5, 190, 243, 253, 156, 61, 67, 61, 85, 60, 40, 9, 215, 189, 196, 63, 236, 189, 126, 208, 201, 61, 7, 110, 30, 62, 21, 12, 130, 189, 167, 252, 14, 62, 30, 66, 252, 188, 236, 216, 117, 61, 39, 173, 185, 61, 173, 117, 93, 189, 189, 143, 157, 189, 28, 27, 185, 189, 68, 197, 14, 62, 141, 131, 60, 189, 144, 125, 81, 61, 235, 252, 220, 61, 37, 23, 48, 62, 48, 1, 229, 189, 99, 25, 29, 62, 200, 141, 142, 60, 253, 165, 163, 61, 114, 206, 37, 190, 106, 235, 193, 189, 117, 85, 134, 189, 215, 117, 22, 189, 242, 202, 56, 189, 78, 227, 239, 61, 106, 193, 133, 61, 189, 221, 230, 189, 221, 196, 162, 61, 238, 99, 60, 61, 57, 157, 24, 62, 82, 4, 103, 189, 5, 108, 70, 189, 15, 57, 94, 61, 213, 104, 218, 60, 94, 8, 20, 62, 252, 239, 93, 61, 6, 158, 171, 189, 88, 77, 48, 62, 112, 145, 48, 190, 157, 115, 74, 61, 246, 174, 11, 190, 0, 49, 33, 62, 96, 255, 7, 60, 77, 86, 20, 190, 116, 73, 207, 189, 171, 169, 39, 190, 249, 73, 33, 190, 70, 33, 34, 62, 139, 181, 18, 190, 20, 68, 209, 61, 17, 104, 16, 62, 151, 54, 134, 189, 16, 245, 220, 189, 18, 208, 163, 61, 34, 159, 1, 62, 247, 238, 45, 189, 61, 17, 3, 62, 112, 127, 28, 190, 124, 184, 62, 189, 98, 232, 40, 190, 66, 159, 174, 189, 213, 84, 188, 189, 151, 176, 43, 190, 54, 68, 14, 190, 22, 191, 40, 190, 2, 108, 179, 61, 23, 71, 238, 189, 176, 134, 138, 61, 125, 14, 22, 62, 231, 139, 31, 61, 166, 18, 242, 189, 65, 76, 16, 61, 193, 165, 222, 189, 153, 201, 18, 187, 196, 156, 43, 190, 118, 250, 145, 61, 53, 79, 14, 62, 22, 195, 38, 62, 243, 117, 5, 190, 205, 227, 233, 61, 182, 130, 102, 188, 102, 227, 133, 61, 108, 224, 171, 189, 200, 235, 40, 62, 28, 166, 77, 189, 63, 66, 202, 61, 203, 128, 179, 189, 39, 54, 195, 187, 124, 183, 143, 189, 123, 211, 21, 61, 70, 161, 85, 189, 167, 166, 251, 189, 214, 99, 162, 189, 18, 20, 241, 189, 218, 0, 132, 61, 240, 47, 110, 59, 174, 157, 164, 189, 102, 178, 123, 185, 70, 164, 20, 190, 30, 14, 26, 190, 106, 82, 191, 61, 44, 174, 31, 189, 254, 129, 158, 189, 20, 190, 159, 189, 5, 67, 45, 61, 83, 20, 100, 189, 173, 109, 129, 188, 107, 194, 175, 188, 105, 46, 247, 60, 167, 133, 5, 62, 117, 25, 44, 190, 171, 96, 20, 190, 83, 103, 112, 189, 231, 137, 224, 188, 177, 248, 9, 60, 182, 26, 230, 61, 156, 227, 5, 61, 147, 110, 30, 189, 218, 126, 195, 61, 242, 23, 84, 188, 137, 37, 9, 190, 129, 233, 153, 61, 245, 140, 35, 190, 71, 96, 36, 62, 225, 120, 64, 189, 48, 239, 148, 61, 209, 246, 0, 59, 161, 136, 36, 190, 157, 27, 133, 189, 45, 27, 255, 61, 139, 129, 25, 62, 10, 21, 176, 61, 9, 30, 90, 61, 92, 122, 26, 62, 81, 205, 3, 62, 197, 64, 236, 189, 37, 215, 135, 61, 47, 72, 216, 60, 232, 37, 183, 60, 94, 249, 151, 189, 142, 28, 30, 62, 39, 228, 135, 60, 23, 53, 30, 190, 113, 142, 51, 190, 244, 192, 21, 62, 225, 213, 143, 60, 231, 228, 243, 189, 238, 67, 126, 189, 184, 133, 133, 60, 73, 187, 132, 189, 192, 43, 249, 60, 4, 143, 252, 188, 44, 145, 26, 62, 243, 167, 52, 190, 63, 8, 4, 62, 249, 128, 2, 62, 159, 48, 19, 62, 184, 237, 45, 60, 110, 99, 0, 190, 130, 168, 146, 189, 75, 75, 123, 189, 222, 89, 42, 190, 186, 61, 176, 189, 42, 29, 104, 61, 24, 111, 61, 189, 218, 221, 40, 62, 82, 152, 239, 61, 233, 119, 11, 62, 108, 26, 27, 190, 209, 39, 13, 190, 172, 138, 25, 61, 135, 137, 16, 188, 251, 48, 5, 190, 129, 148, 118, 189, 211, 104, 173, 61, 231, 198, 35, 61, 115, 17, 171, 189, 91, 153, 168, 61, 18, 172, 36, 62, 230, 210, 12, 190, 208, 83, 51, 190, 142, 203, 131, 60, 23, 21, 149, 189, 89, 175, 26, 189, 72, 23, 176, 189, 179, 72, 0, 190, 57, 163, 0, 190, 250, 27, 166, 61, 48, 195, 243, 189, 119, 8, 44, 189, 173, 57, 23, 62, 109, 74, 4, 62, 146, 206, 2, 62, 60, 254, 44, 62, 248, 40, 21, 189, 239, 204, 48, 189, 139, 71, 254, 60, 70, 224, 31, 190, 120, 221, 93, 60, 85, 40, 195, 189, 10, 100, 230, 60, 142, 2, 187, 188, 241, 40, 145, 189, 62, 40, 15, 190, 7, 33, 132, 61, 231, 154, 210, 188, 215, 179, 46, 189, 106, 52, 30, 62, 232, 42, 7, 62, 190, 28, 245, 188, 22, 74, 3, 190, 44, 97, 51, 61, 148, 219, 97, 189, 233, 198, 188, 189, 200, 9, 132, 61, 70, 102, 165, 61, 149, 86, 136, 61, 231, 32, 6, 190, 218, 59, 233, 61, 1, 233, 193, 189, 126, 69, 62, 60, 199, 209, 183, 60, 21, 210, 226, 189, 62, 232, 57, 61, 250, 208, 15, 190, 2, 161, 22, 190, 200, 187, 231, 61, 143, 12, 5, 189, 244, 12, 77, 189, 229, 68, 161, 61, 91, 103, 228, 61, 55, 21, 10, 190, 163, 19, 182, 189, 219, 143, 212, 189, 145, 49, 10, 61, 32, 12, 92, 189, 185, 172, 122, 61, 127, 4, 204, 61, 79, 149, 25, 190, 39, 244, 120, 61, 104, 229, 222, 61, 48, 36, 161, 189, 146, 152, 253, 189, 172, 48, 6, 190, 254, 94, 39, 62, 133, 137, 11, 189, 217, 179, 31, 190, 17, 109, 138, 189, 223, 208, 3, 189, 204, 44, 119, 61, 39, 10, 243, 189, 246, 111, 247, 189, 161, 168, 23, 190, 117, 171, 47, 190, 177, 64, 97, 189, 61, 230, 172, 189, 71, 97, 197, 189, 121, 111, 50, 62, 70, 174, 35, 190, 182, 81, 21, 62, 206, 60, 50, 189, 6, 149, 20, 62, 81, 252, 245, 189, 64, 133, 201, 61, 243, 60, 11, 190, 117, 87, 45, 61, 141, 25, 167, 189, 172, 170, 249, 61, 204, 177, 111, 61, 22, 229, 92, 189, 138, 75, 244, 61, 149, 118, 46, 62, 230, 83, 79, 61, 93, 133, 148, 61, 81, 101, 20, 62, 29, 15, 95, 59, 234, 177, 145, 189, 144, 1, 134, 61, 69, 4, 52, 62, 163, 212, 100, 61, 158, 103, 171, 189, 82, 247, 23, 62, 158, 140, 177, 189, 229, 26, 148, 189, 172, 56, 176, 61, 28, 14, 10, 62, 149, 225, 88, 188, 172, 156, 195, 189, 71, 215, 41, 190, 120, 116, 30, 62, 7, 233, 128, 187, 218, 220, 153, 187, 118, 220, 153, 189, 190, 86, 4, 190, 17, 158, 18, 62, 229, 55, 36, 62, 59, 60, 37, 190, 219, 139, 178, 61, 254, 202, 251, 61, 129, 18, 46, 190, 8, 206, 223, 58, 142, 136, 117, 61, 167, 68, 12, 190, 198, 25, 217, 61, 207, 100, 185, 61, 92, 152, 208, 61, 13, 143, 119, 189, 125, 2, 44, 189, 130, 77, 225, 189, 75, 135, 2, 62, 72, 41, 34, 190, 215, 175, 246, 60, 167, 1, 53, 62, 172, 172, 14, 189, 146, 210, 85, 61, 187, 249, 22, 190, 234, 96, 167, 61, 84, 197, 53, 61, 149, 46, 18, 190, 218, 159, 171, 189, 136, 68, 232, 61, 23, 142, 222, 61, 157, 155, 73, 189, 107, 86, 129, 61, 199, 134, 64, 61, 69, 236, 25, 62, 68, 152, 17, 190, 129, 158, 248, 59, 7, 92, 233, 189, 98, 11, 254, 61, 215, 107, 158, 189, 2, 109, 153, 189, 195, 87, 188, 189, 190, 85, 188, 61, 143, 114, 32, 190, 111, 243, 48, 190, 182, 157, 5, 62, 74, 146, 35, 189, 103, 242, 8, 190, 206, 148, 47, 62, 254, 41, 137, 60, 43, 45, 147, 188, 76, 223, 146, 188, 75, 152, 18, 62, 56, 118, 19, 62, 185, 121, 252, 189, 79, 26, 3, 190, 76, 211, 153, 189, 90, 137, 40, 62, 91, 96, 59, 59, 195, 117, 243, 188, 209, 7, 163, 61, 152, 179, 145, 61, 1, 245, 63, 188, 60, 204, 132, 60, 107, 72, 12, 190, 144, 169, 10, 190, 176, 107, 93, 189, 28, 28, 170, 61, 59, 238, 44, 190, 240, 56, 245, 58, 122, 73, 180, 188, 253, 57, 136, 189, 110, 193, 84, 188, 245, 22, 217, 189, 141, 245, 98, 185, 89, 120, 209, 189, 172, 16, 72, 189, 56, 200, 240, 60, 141, 130, 170, 61, 2, 68, 137, 189, 101, 73, 99, 189, 33, 31, 96, 61, 65, 166, 33, 61, 105, 196, 208, 60, 119, 214, 128, 60, 200, 220, 4, 190, 165, 23, 15, 61, 157, 223, 215, 189, 102, 205, 165, 61, 129, 186, 38, 190, 28, 112, 217, 188, 244, 250, 165, 61, 141, 111, 239, 189, 53, 71, 225, 61, 198, 36, 197, 60, 162, 74, 0, 59, 103, 19, 168, 60, 4, 6, 237, 61, 107, 138, 219, 189, 63, 94, 27, 61, 113, 7, 121, 61, 58, 111, 132, 61, 162, 67, 203, 59, 103, 143, 44, 189, 43, 168, 217, 61, 198, 2, 114, 61, 132, 78, 195, 189, 89, 130, 10, 190, 25, 54, 111, 188, 89, 228, 173, 188, 216, 220, 226, 188, 28, 70, 39, 190, 71, 151, 13, 190, 159, 13, 26, 189, 193, 143, 0, 61, 154, 84, 174, 60, 58, 125, 23, 188, 111, 30, 39, 62, 193, 122, 142, 61, 152, 57, 129, 61, 97, 13, 46, 190, 157, 121, 191, 188, 102, 249, 32, 189, 86, 86, 170, 189, 76, 157, 143, 61, 105, 11, 45, 190, 58, 253, 206, 189, 108, 86, 34, 62, 132, 162, 168, 61, 47, 0, 207, 61, 40, 174, 130, 189, 20, 19, 217, 189, 148, 59, 254, 61, 238, 221, 89, 61, 165, 140, 45, 190, 73, 207, 201, 61, 59, 109, 237, 61, 207, 238, 159, 60, 244, 166, 217, 60, 100, 62, 162, 59, 251, 117, 6, 62, 8, 206, 24, 61, 160, 7, 25, 62, 26, 117, 68, 61, 47, 18, 135, 60, 221, 229, 141, 189, 180, 147, 232, 61, 75, 185, 47, 62, 25, 149, 32, 189, 196, 231, 225, 61, 112, 73, 7, 190, 46, 136, 35, 190, 73, 23, 232, 61, 144, 82, 148, 61, 26, 135, 141, 189, 145, 82, 250, 188, 38, 230, 17, 62, 138, 231, 18, 61, 28, 14, 162, 188, 50, 50, 13, 190, 196, 58, 162, 61, 68, 116, 13, 190, 225, 187, 175, 61, 77, 91, 194, 60, 101, 223, 113, 189, 85, 88, 55, 189, 64, 177, 64, 61, 185, 79, 253, 61, 0, 237, 169, 189, 230, 169, 181, 189, 234, 244, 212, 61, 141, 119, 197, 60, 145, 14, 44, 189, 167, 145, 76, 61, 235, 223, 135, 61, 158, 23, 60, 189, 221, 94, 91, 60, 209, 90, 50, 62, 117, 180, 143, 189, 209, 204, 8, 62, 172, 216, 200, 188, 37, 31, 50, 190, 199, 8, 222, 59, 34, 201, 31, 61, 114, 221, 31, 62, 31, 95, 34, 62, 197, 34, 137, 189, 71, 1, 79, 189, 229, 61, 38, 190, 107, 46, 45, 190, 12, 105, 4, 62, 8, 127, 249, 188, 153, 51, 143, 61, 1, 56, 179, 188, 188, 29, 128, 59, 169, 175, 72, 189, 42, 95, 52, 189, 186, 245, 1, 190, 40, 27, 97, 189, 121, 132, 39, 62, 97, 13, 217, 189, 58, 64, 63, 189, 167, 130, 9, 62, 41, 70, 236, 189, 3, 19, 218, 189, 188, 66, 82, 61, 167, 181, 176, 61, 188, 128, 207, 189, 28, 43, 44, 190, 209, 199, 12, 62, 181, 205, 47, 62, 74, 118, 4, 62, 178, 225, 235, 189, 168, 20, 139, 189, 233, 70, 207, 189, 187, 118, 168, 189, 202, 82, 228, 189, 10, 131, 178, 61, 33, 173, 35, 190, 212, 117, 9, 190, 224, 229, 251, 189, 39, 53, 123, 60, 166, 109, 65, 189, 160, 182, 29, 61, 180, 82, 13, 62, 191, 173, 237, 189, 119, 135, 9, 61, 255, 224, 69, 61, 218, 66, 37, 190, 74, 166, 133, 60, 132, 223, 32, 190, 247, 62, 179, 189, 31, 133, 21, 62, 183, 135, 144, 61, 50, 171, 161, 189, 229, 220, 19, 62, 141, 185, 195, 61, 7, 95, 255, 60, 187, 165, 25, 189, 64, 218, 145, 189, 59, 223, 42, 190, 29, 254, 26, 190, 36, 188, 185, 189, 110, 120, 149, 189, 217, 124, 223, 188, 180, 244, 49, 61, 19, 198, 232, 61, 97, 40, 154, 60, 130, 104, 30, 190, 142, 49, 130, 61, 59, 127, 131, 58, 167, 65, 223, 189, 208, 254, 76, 189, 118, 82, 69, 189, 235, 142, 237, 188, 48, 17, 43, 62, 55, 135, 48, 62, 6, 155, 34, 59, 108, 208, 151, 188, 45, 77, 88, 60, 140, 65, 21, 190, 57, 15, 156, 60, 124, 191, 17, 190, 185, 245, 2, 189, 220, 50, 25, 61, 115, 25, 8, 187, 2, 164, 201, 61, 8, 120, 18, 62, 191, 131, 32, 190, 209, 159, 14, 62, 164, 74, 228, 60, 53, 108, 178, 189, 61, 243, 44, 190, 128, 129, 13, 61, 199, 193, 209, 61, 133, 130, 147, 189, 4, 101, 45, 189, 162, 233, 10, 190, 83, 177, 165, 61, 224, 41, 15, 187, 212, 17, 96, 61, 17, 241, 49, 190, 61, 243, 7, 62, 54, 221, 175, 61, 211, 106, 1, 61, 177, 72, 71, 187, 249, 215, 33, 62, 246, 27, 219, 61, 50, 173, 49, 189, 131, 28, 230, 188, 56, 39, 227, 189, 213, 240, 19, 62, 181, 229, 37, 189, 199, 112, 6, 190, 47, 78, 107, 189, 31, 150, 4, 61, 3, 17, 165, 189, 232, 174, 37, 190, 152, 115, 35, 62, 110, 134, 153, 188, 227, 73, 29, 61, 167, 253, 38, 62, 254, 121, 182, 61, 213, 75, 26, 190, 135, 114, 211, 60, 146, 35, 58, 59, 242, 39, 207, 59, 156, 58, 43, 190, 147, 49, 158, 189, 80, 83, 205, 60, 35, 40, 47, 62, 114, 46, 247, 61, 205, 66, 45, 62, 80, 163, 239, 61, 245, 68, 10, 62, 215, 235, 3, 189, 165, 236, 150, 188, 58, 13, 145, 61, 81, 210, 41, 189, 207, 178, 244, 60, 85, 107, 94, 188, 82, 84, 245, 189, 52, 67, 49, 190, 136, 246, 10, 189, 178, 11, 161, 61, 116, 3, 60, 61, 195, 152, 138, 60, 60, 101, 190, 61, 68, 73, 11, 62, 60, 178, 36, 61, 172, 144, 28, 62, 89, 59, 186, 61, 141, 79, 188, 189, 225, 163, 213, 58, 187, 14, 47, 62, 26, 94, 192, 189, 158, 107, 105, 189, 159, 173, 52, 188, 45, 169, 165, 189, 7, 121, 184, 189, 146, 14, 167, 60, 201, 71, 22, 62, 56, 250, 52, 190, 20, 79, 33, 62, 225, 83, 45, 62, 74, 155, 26, 62, 227, 128, 243, 61, 31, 191, 27, 61, 83, 205, 29, 190, 157, 136, 232, 61, 48, 196, 45, 62, 162, 128, 149, 189, 219, 190, 139, 189, 96, 201, 203, 61, 11, 90, 156, 61, 240, 253, 125, 61, 210, 154, 158, 189, 58, 239, 42, 190, 89, 45, 238, 189, 247, 211, 43, 190, 73, 26, 139, 61, 20, 67, 147, 189, 226, 64, 136, 189, 88, 5, 245, 61, 48, 232, 237, 61, 238, 116, 147, 61, 163, 68, 211, 189, 229, 93, 56, 61, 98, 64, 199, 189, 18, 43, 151, 60, 41, 143, 155, 61, 222, 53, 159, 189, 254, 211, 96, 61, 211, 245, 224, 61, 82, 175, 224, 189, 77, 183, 214, 189, 147, 146, 10, 61, 58, 82, 178, 61, 50, 21, 48, 61, 233, 19, 23, 190, 115, 27, 47, 62, 81, 155, 104, 60, 214, 199, 21, 189, 193, 218, 234, 189, 91, 33, 254, 189, 10, 97, 164, 61, 110, 29, 52, 190, 225, 24, 47, 62, 103, 5, 26, 190, 118, 84, 96, 189, 158, 99, 42, 62, 19, 69, 131, 59, 113, 38, 30, 62, 173, 123, 104, 189, 121, 86, 94, 189, 243, 234, 19, 190, 252, 52, 131, 61, 107, 252, 43, 190, 174, 46, 80, 189, 137, 44, 51, 189, 117, 209, 37, 190, 248, 207, 134, 61, 160, 170, 153, 61, 29, 110, 94, 189, 130, 125, 18, 189, 35, 240, 70, 189, 198, 171, 109, 61, 54, 112, 3, 62, 179, 207, 151, 189, 56, 154, 155, 61, 200, 104, 157, 189, 16, 89, 200, 61, 123, 147, 15, 62, 7, 176, 191, 61, 181, 208, 8, 62, 246, 122, 18, 62, 185, 201, 253, 60, 29, 91, 212, 189, 253, 97, 49, 189, 254, 66, 239, 61, 151, 172, 254, 189, 71, 217, 15, 190, 142, 255, 227, 60, 138, 51, 150, 60, 192, 156, 15, 190, 213, 204, 157, 60, 209, 124, 218, 189, 93, 48, 34, 190, 52, 228, 239, 189, 23, 129, 192, 189, 189, 105, 241, 189, 54, 47, 22, 62, 201, 212, 126, 60, 69, 194, 9, 62, 189, 203, 151, 61, 94, 10, 26, 62, 49, 23, 247, 189, 38, 1, 6, 190, 219, 192, 233, 60, 215, 1, 34, 62, 56, 164, 23, 189, 136, 192, 227, 60, 63, 85, 8, 190, 103, 73, 186, 187, 69, 171, 181, 189, 208, 90, 117, 61, 182, 167, 38, 190, 65, 249, 240, 61, 40, 192, 11, 62, 87, 236, 236, 189, 26, 122, 5, 190, 229, 164, 27, 190, 8, 153, 52, 62, 203, 80, 201, 188, 25, 111, 155, 189, 78, 80, 56, 61, 91, 6, 29, 61, 4, 123, 16, 62, 171, 166, 181, 61, 93, 136, 21, 62, 67, 168, 153, 189, 238, 26, 5, 62, 220, 88, 119, 61, 238, 128, 244, 189, 23, 200, 233, 189, 193, 250, 33, 190, 240, 17, 13, 62, 1, 140, 211, 188, 34, 249, 250, 189, 90, 222, 49, 190, 92, 114, 167, 189, 72, 195, 211, 61, 244, 159, 0, 62, 209, 77, 128, 61, 135, 254, 76, 61, 14, 130, 50, 61, 84, 3, 196, 189, 20, 56, 161, 61, 84, 214, 93, 61, 82, 11, 17, 190, 233, 254, 23, 190, 1, 75, 62, 189, 168, 223, 51, 62, 214, 107, 227, 61, 23, 220, 135, 189, 191, 175, 44, 62, 102, 253, 243, 189, 181, 149, 15, 190, 221, 66, 240, 61, 203, 127, 90, 189, 69, 64, 76, 61, 132, 82, 52, 62, 130, 233, 77, 61, 29, 225, 161, 189, 157, 236, 45, 190, 119, 50, 52, 189, 71, 173, 240, 189, 206, 29, 52, 190, 235, 159, 22, 62, 61, 193, 46, 62, 148, 127, 30, 61, 244, 195, 52, 190, 15, 85, 207, 61, 81, 140, 47, 190, 6, 23, 50, 62, 217, 252, 49, 190, 146, 207, 172, 61, 29, 126, 157, 61, 215, 84, 248, 189, 41, 62, 120, 189, 93, 12, 166, 188, 172, 150, 30, 62, 184, 197, 138, 61, 110, 16, 59, 61, 149, 210, 45, 60, 123, 164, 244, 61, 23, 73, 36, 190, 50, 144, 244, 61, 199, 14, 212, 189, 109, 124, 145, 189, 138, 30, 74, 60, 116, 255, 30, 62, 237, 161, 139, 61, 91, 193, 10, 61, 102, 190, 4, 62, 255, 184, 13, 62, 231, 85, 160, 61, 104, 225, 255, 189, 236, 255, 15, 190, 249, 166, 205, 60, 116, 94, 9, 62, 82, 232, 29, 61, 221, 139, 238, 187, 247, 186, 189, 188, 136, 134, 155, 59, 204, 252, 7, 190, 112, 138, 7, 60, 166, 4, 192, 61, 234, 42, 147, 60, 200, 94, 154, 184, 151, 199, 52, 190, 113, 23, 7, 190, 209, 104, 11, 190, 148, 0, 111, 61, 44, 237, 134, 189, 248, 252, 74, 61, 101, 202, 102, 189, 125, 55, 49, 62, 58, 190, 33, 188, 199, 190, 209, 189, 147, 71, 44, 62, 100, 168, 164, 189, 214, 46, 34, 60, 69, 24, 29, 190, 232, 91, 94, 61, 116, 205, 249, 189, 184, 56, 231, 189, 43, 77, 14, 188, 188, 125, 44, 61, 214, 253, 18, 189, 43, 246, 129, 60, 249, 3, 96, 61, 101, 206, 45, 189, 238, 104, 105, 189, 139, 67, 134, 189, 79, 190, 45, 190, 111, 116, 197, 61, 69, 92, 176, 61, 154, 84, 13, 190, 134, 53, 176, 187, 12, 170, 5, 62, 158, 69, 51, 61, 236, 119, 18, 190, 41, 219, 39, 62, 42, 57, 24, 62, 252, 39, 221, 189, 93, 151, 13, 190, 46, 56, 49, 189, 110, 78, 163, 61, 222, 194, 15, 190, 100, 238, 77, 61, 211, 20, 93, 186, 191, 189, 3, 189, 81, 173, 89, 60, 69, 108, 24, 190, 183, 150, 88, 60, 173, 163, 24, 62, 91, 128, 117, 59, 74, 2, 225, 60, 25, 122, 213, 189, 239, 157, 79, 189, 209, 197, 30, 62, 139, 99, 187, 189, 65, 26, 18, 62, 176, 161, 34, 190, 117, 200, 42, 61, 178, 160, 98, 59, 201, 29, 12, 62, 23, 181, 251, 189, 191, 229, 40, 62, 87, 196, 171, 189, 35, 69, 148, 59, 48, 61, 15, 61, 161, 34, 18, 62, 38, 4, 199, 60, 175, 114, 57, 189, 181, 188, 197, 189, 69, 228, 146, 61, 206, 115, 19, 190, 110, 139, 154, 189, 185, 168, 166, 189, 130, 1, 26, 190, 8, 169, 34, 190, 48, 229, 154, 189, 94, 98, 5, 190, 96, 91, 54, 189, 186, 132, 16, 190, 24, 240, 141, 187, 241, 238, 251, 60, 115, 173, 158, 188, 50, 197, 151, 61, 170, 197, 113, 189, 31, 41, 104, 60, 168, 216, 15, 190, 23, 44, 138, 61, 198, 48, 144, 61, 138, 144, 25, 189, 182, 133, 174, 189, 148, 221, 221, 188, 34, 17, 40, 190, 25, 92, 150, 189, 60, 200, 4, 189, 5, 159, 127, 188, 14, 81, 237, 61, 72, 203, 52, 190, 113, 150, 119, 188, 225, 163, 3, 190, 115, 255, 102, 189, 209, 55, 244, 60, 191, 116, 123, 61, 147, 21, 253, 61, 243, 148, 50, 62, 214, 183, 248, 61, 222, 240, 85, 61, 200, 32, 128, 188, 103, 183, 47, 62, 202, 193, 232, 61, 163, 80, 243, 189, 58, 174, 193, 61, 120, 24, 3, 190, 223, 141, 47, 61, 157, 10, 34, 62, 45, 187, 47, 62, 4, 71, 3, 59, 53, 223, 161, 61, 222, 106, 222, 61, 175, 24, 241, 189, 179, 190, 170, 189, 80, 135, 191, 189, 164, 77, 227, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 247, 205, 189, 30, 151, 96, 60, 142, 42, 3, 62, 18, 50, 154, 189, 30, 8, 36, 62, 22, 233, 32, 62, 104, 146, 169, 189, 35, 219, 248, 188, 19, 225, 31, 190, 114, 212, 130, 189, 1, 40, 9, 61, 101, 99, 134, 188, 197, 31, 136, 188, 136, 187, 206, 189, 177, 6, 37, 62, 99, 118, 8, 190, 208, 84, 243, 189, 90, 10, 218, 189, 219, 59, 228, 61, 71, 168, 34, 190, 89, 246, 171, 60, 197, 183, 30, 58, 9, 139, 2, 61, 185, 28, 42, 62, 146, 13, 46, 190, 21, 70, 162, 60, 219, 223, 21, 62, 162, 79, 230, 189, 88, 2, 1, 190, 48, 76, 3, 61, 215, 69, 216, 60, 1, 170, 162, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 125, 60, 60, 119, 101, 18, 189, 117, 34, 137, 188, 47, 24, 160, 61, 3, 138, 144, 60, 164, 213, 183, 189, 230, 18, 10, 189, 224, 185, 37, 190, 99, 128, 39, 62, 114, 44, 110, 188, 55, 14, 142, 188, 79, 19, 242, 189, 243, 95, 103, 60, 121, 87, 233, 61, 99, 19, 171, 61, 73, 188, 165, 188, 28, 71, 183, 61, 35, 171, 121, 61, 111, 67, 15, 190, 123, 246, 181, 61, 3, 103, 253, 189, 216, 211, 49, 61, 21, 166, 116, 189, 173, 35, 250, 189, 87, 130, 70, 189, 159, 138, 77, 61, 118, 153, 43, 62, 247, 26, 144, 61, 50, 134, 240, 188, 107, 67, 189, 61, 49, 219, 26, 61, 90, 43, 167, 61, 62, 58, 144, 188, 158, 69, 179, 60, 164, 100, 215, 61, 230, 29, 9, 190, 127, 178, 17, 190, 181, 126, 191, 61, 105, 226, 8, 189, 105, 198, 250, 61, 33, 127, 27, 189, 75, 247, 243, 61, 102, 59, 99, 189, 122, 78, 152, 189, 28, 176, 202, 189, 132, 212, 207, 61, 37, 8, 208, 60, 28, 91, 136, 61, 19, 116, 104, 60, 170, 179, 35, 62, 41, 85, 29, 190, 97, 56, 34, 61, 133, 179, 219, 189, 99, 189, 9, 62, 113, 184, 234, 61, 119, 223, 173, 61, 17, 113, 60, 189, 37, 249, 198, 187, 46, 136, 249, 61, 140, 61, 94, 60, 67, 158, 130, 189, 30, 130, 76, 61, 53, 247, 46, 62, 198, 220, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 70, 216, 60, 160, 29, 195, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {212, 75, 12, 64, 250, 139, 228, 190, 89, 161, 229, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 13, 23, 62, 70, 202, 168, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0061/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}