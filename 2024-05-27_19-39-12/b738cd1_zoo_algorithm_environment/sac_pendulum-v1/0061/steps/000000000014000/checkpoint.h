// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 136, 10, 191, 188, 236, 154, 62, 127, 131, 199, 190, 147, 169, 85, 62, 164, 200, 39, 63, 28, 173, 11, 191, 80, 83, 5, 63, 43, 6, 32, 63, 121, 67, 6, 191, 45, 183, 75, 191, 41, 80, 67, 63, 7, 109, 141, 62, 117, 226, 244, 62, 231, 84, 47, 189, 36, 151, 184, 190, 185, 132, 154, 190, 145, 211, 110, 63, 65, 9, 39, 61, 116, 145, 173, 62, 106, 195, 90, 63, 202, 215, 3, 62, 101, 236, 101, 189, 6, 22, 95, 191, 128, 40, 191, 189, 124, 167, 190, 62, 186, 138, 139, 62, 48, 247, 227, 190, 135, 118, 107, 63, 141, 196, 19, 191, 101, 59, 135, 61, 64, 217, 33, 63, 167, 65, 130, 63, 221, 125, 130, 62, 147, 4, 155, 190, 132, 211, 169, 190, 173, 43, 218, 62, 166, 215, 180, 190, 169, 187, 104, 62, 66, 50, 190, 61, 254, 17, 65, 191, 180, 68, 128, 191, 98, 188, 23, 189, 52, 125, 46, 63, 251, 117, 188, 62, 127, 154, 71, 62, 4, 217, 15, 191, 83, 197, 108, 191, 103, 91, 166, 62, 74, 131, 213, 62, 211, 126, 178, 62, 232, 136, 71, 62, 51, 57, 74, 62, 205, 105, 70, 191, 174, 138, 200, 62, 200, 146, 185, 62, 111, 245, 142, 63, 190, 39, 239, 62, 48, 210, 184, 190, 197, 181, 13, 190, 175, 19, 53, 63, 54, 88, 138, 62, 96, 73, 145, 63, 144, 116, 227, 62, 28, 214, 113, 190, 137, 19, 171, 63, 83, 169, 210, 62, 78, 71, 253, 189, 247, 53, 61, 63, 196, 143, 175, 62, 230, 228, 161, 62, 32, 167, 202, 62, 188, 191, 142, 189, 209, 22, 144, 190, 249, 196, 163, 63, 39, 48, 149, 62, 114, 204, 64, 191, 157, 243, 104, 61, 252, 163, 75, 191, 192, 42, 233, 61, 26, 32, 169, 191, 56, 95, 224, 190, 211, 17, 52, 63, 191, 47, 159, 191, 2, 104, 162, 190, 199, 136, 79, 190, 178, 121, 74, 62, 205, 106, 46, 191, 107, 15, 240, 190, 30, 227, 155, 191, 217, 197, 141, 190, 94, 207, 81, 191, 160, 207, 75, 190, 217, 140, 69, 62, 43, 41, 45, 190, 234, 45, 6, 189, 41, 221, 39, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 6, 34, 191, 48, 232, 131, 191, 145, 235, 103, 190, 112, 214, 186, 62, 3, 32, 222, 190, 78, 215, 253, 62, 141, 17, 102, 188, 123, 57, 167, 62, 174, 130, 169, 190, 0, 184, 90, 61, 246, 98, 126, 61, 61, 159, 144, 190, 245, 51, 36, 63, 254, 202, 144, 62, 142, 126, 32, 191, 238, 52, 151, 190, 120, 154, 28, 191, 227, 184, 24, 62, 144, 250, 160, 190, 240, 204, 143, 190, 51, 58, 117, 189, 41, 61, 135, 62, 52, 8, 10, 63, 150, 97, 247, 62, 42, 24, 110, 189, 135, 125, 3, 190, 63, 169, 140, 61, 197, 190, 128, 190, 219, 183, 174, 189, 239, 154, 40, 63, 149, 241, 15, 190, 142, 8, 117, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 45, 161, 61, 151, 113, 252, 62, 217, 161, 161, 62, 14, 181, 36, 62, 26, 190, 211, 61, 169, 75, 251, 62, 52, 106, 245, 190, 179, 228, 66, 61, 223, 64, 107, 62, 82, 15, 185, 62, 6, 85, 82, 190, 150, 194, 200, 58, 71, 1, 126, 189, 176, 55, 235, 190, 239, 68, 137, 191, 184, 149, 63, 189, 207, 106, 144, 191, 144, 251, 58, 62, 17, 60, 3, 191, 58, 99, 7, 62, 163, 226, 205, 190, 65, 194, 219, 61, 204, 153, 186, 61, 81, 250, 252, 62, 78, 235, 107, 62, 246, 244, 168, 60, 20, 139, 171, 190, 194, 178, 149, 62, 152, 198, 82, 189, 197, 19, 128, 190, 75, 133, 18, 62, 134, 238, 25, 61, 165, 97, 49, 190, 93, 115, 72, 62, 53, 139, 178, 62, 20, 9, 46, 190, 179, 232, 126, 189, 133, 201, 158, 62, 178, 58, 132, 62, 50, 239, 0, 190, 207, 48, 19, 61, 112, 203, 50, 190, 171, 123, 110, 62, 242, 228, 19, 190, 252, 163, 6, 62, 101, 132, 176, 62, 144, 153, 14, 191, 70, 231, 73, 190, 231, 172, 13, 191, 40, 7, 100, 190, 130, 172, 41, 191, 71, 172, 144, 190, 88, 244, 128, 190, 113, 50, 168, 190, 172, 208, 71, 190, 99, 239, 201, 61, 215, 31, 141, 191, 26, 25, 14, 189, 50, 118, 36, 190, 70, 102, 129, 191, 215, 225, 213, 189, 181, 64, 137, 190, 197, 121, 244, 189, 149, 195, 47, 190, 97, 69, 61, 61, 177, 74, 2, 63, 211, 149, 33, 62, 7, 175, 134, 189, 88, 83, 212, 189, 224, 210, 166, 62, 38, 234, 180, 62, 228, 5, 188, 190, 229, 226, 157, 61, 114, 22, 39, 189, 152, 45, 183, 62, 2, 213, 122, 189, 119, 26, 140, 62, 105, 191, 202, 190, 2, 255, 183, 62, 141, 216, 9, 62, 177, 184, 18, 62, 55, 76, 207, 60, 119, 161, 204, 189, 117, 78, 140, 61, 32, 223, 173, 61, 169, 2, 28, 62, 96, 225, 92, 62, 17, 53, 169, 62, 153, 230, 31, 190, 23, 218, 56, 61, 205, 239, 128, 190, 243, 65, 54, 191, 43, 135, 154, 190, 165, 28, 116, 191, 254, 211, 145, 189, 236, 39, 221, 189, 173, 253, 84, 189, 243, 117, 199, 61, 147, 50, 72, 61, 188, 78, 254, 189, 54, 125, 124, 61, 151, 230, 48, 61, 227, 139, 18, 62, 217, 182, 135, 189, 105, 180, 134, 189, 226, 252, 76, 61, 180, 203, 91, 60, 216, 168, 7, 62, 239, 252, 77, 61, 99, 217, 184, 189, 164, 232, 41, 62, 240, 168, 50, 190, 111, 130, 50, 61, 92, 160, 24, 190, 190, 59, 14, 62, 231, 239, 54, 188, 232, 38, 40, 190, 63, 21, 255, 189, 193, 219, 59, 190, 90, 135, 40, 190, 173, 226, 19, 62, 216, 85, 42, 190, 212, 92, 162, 61, 91, 38, 245, 61, 157, 62, 168, 189, 247, 52, 254, 189, 222, 145, 159, 61, 252, 220, 218, 61, 97, 141, 15, 61, 194, 124, 202, 59, 1, 36, 69, 190, 11, 50, 170, 60, 154, 81, 214, 189, 80, 109, 170, 61, 215, 195, 232, 61, 185, 123, 199, 61, 105, 62, 7, 190, 128, 247, 1, 62, 225, 73, 172, 62, 48, 211, 58, 189, 87, 101, 105, 62, 200, 128, 144, 62, 241, 214, 168, 188, 52, 117, 71, 190, 46, 230, 55, 60, 128, 179, 79, 189, 235, 146, 159, 189, 60, 41, 3, 190, 43, 57, 247, 61, 217, 175, 176, 61, 170, 66, 75, 62, 173, 2, 60, 62, 254, 176, 68, 61, 89, 172, 227, 61, 212, 184, 68, 62, 220, 79, 212, 189, 243, 160, 131, 62, 255, 224, 134, 61, 3, 96, 164, 60, 53, 24, 33, 188, 61, 170, 45, 188, 101, 191, 161, 189, 238, 45, 186, 60, 78, 220, 182, 189, 209, 161, 16, 190, 46, 177, 229, 189, 152, 217, 1, 190, 156, 156, 167, 60, 200, 218, 170, 188, 35, 220, 182, 189, 35, 156, 7, 188, 115, 107, 30, 190, 159, 20, 81, 190, 49, 33, 64, 61, 4, 81, 54, 189, 195, 108, 159, 189, 20, 190, 159, 189, 95, 239, 2, 188, 251, 67, 116, 189, 230, 187, 70, 189, 36, 167, 217, 188, 66, 92, 18, 188, 30, 201, 177, 61, 76, 217, 74, 190, 190, 151, 47, 190, 191, 109, 152, 189, 158, 96, 55, 189, 88, 20, 245, 188, 84, 191, 201, 61, 113, 192, 25, 188, 229, 123, 190, 189, 204, 207, 55, 61, 244, 12, 16, 62, 62, 198, 197, 190, 86, 112, 141, 188, 91, 195, 67, 191, 2, 192, 135, 61, 130, 88, 68, 189, 209, 25, 249, 62, 231, 60, 18, 62, 119, 3, 173, 190, 19, 19, 0, 190, 124, 197, 142, 62, 129, 120, 42, 62, 217, 203, 212, 61, 196, 110, 83, 62, 100, 140, 243, 62, 139, 177, 93, 62, 217, 219, 20, 62, 189, 158, 184, 61, 178, 112, 228, 60, 100, 106, 164, 189, 158, 34, 230, 60, 196, 204, 206, 60, 59, 39, 151, 189, 22, 212, 5, 62, 238, 177, 135, 191, 202, 131, 168, 62, 7, 88, 59, 61, 21, 128, 73, 191, 6, 80, 225, 61, 215, 88, 18, 61, 220, 207, 166, 190, 139, 146, 81, 189, 148, 33, 78, 191, 35, 25, 183, 189, 218, 237, 193, 190, 171, 240, 240, 62, 38, 73, 149, 61, 159, 151, 185, 62, 103, 206, 11, 61, 49, 183, 64, 190, 47, 13, 195, 190, 85, 95, 211, 189, 34, 248, 77, 190, 48, 164, 168, 190, 126, 40, 104, 62, 79, 206, 20, 190, 19, 11, 182, 61, 249, 255, 188, 189, 213, 62, 215, 61, 236, 196, 146, 190, 62, 91, 174, 189, 164, 224, 107, 190, 162, 26, 135, 61, 81, 245, 71, 61, 116, 180, 123, 61, 97, 210, 22, 62, 165, 41, 151, 62, 231, 220, 160, 190, 52, 21, 22, 61, 197, 213, 217, 61, 121, 246, 17, 191, 21, 90, 123, 190, 89, 230, 3, 190, 187, 148, 77, 190, 72, 253, 27, 190, 238, 247, 93, 190, 104, 88, 143, 190, 25, 250, 238, 189, 170, 246, 224, 187, 251, 99, 190, 190, 25, 193, 87, 190, 51, 166, 133, 62, 47, 30, 216, 60, 114, 162, 79, 62, 9, 168, 192, 61, 251, 42, 229, 59, 72, 252, 0, 189, 172, 180, 255, 61, 67, 116, 137, 190, 89, 27, 1, 62, 146, 94, 217, 189, 255, 221, 20, 62, 43, 163, 166, 189, 82, 150, 210, 188, 56, 156, 87, 190, 57, 50, 19, 60, 195, 126, 89, 189, 241, 180, 55, 190, 125, 113, 29, 62, 35, 241, 24, 61, 20, 104, 17, 61, 214, 237, 8, 189, 84, 181, 74, 189, 221, 111, 111, 61, 255, 136, 33, 189, 119, 251, 249, 61, 144, 161, 200, 61, 212, 12, 142, 60, 217, 57, 62, 190, 19, 157, 141, 61, 41, 25, 16, 190, 85, 153, 97, 189, 21, 145, 7, 189, 112, 59, 227, 189, 184, 173, 182, 187, 148, 158, 22, 190, 141, 171, 62, 190, 73, 190, 234, 61, 77, 171, 179, 189, 54, 181, 147, 189, 1, 67, 92, 61, 34, 127, 2, 62, 103, 18, 33, 190, 210, 188, 187, 189, 32, 44, 19, 190, 101, 156, 179, 60, 128, 43, 189, 189, 59, 46, 185, 60, 255, 191, 132, 61, 25, 58, 74, 190, 155, 39, 62, 187, 46, 224, 3, 62, 47, 20, 198, 189, 202, 252, 42, 190, 94, 218, 189, 189, 179, 59, 33, 62, 127, 190, 151, 189, 82, 66, 58, 190, 10, 50, 249, 187, 164, 212, 131, 189, 234, 136, 88, 62, 26, 141, 32, 190, 184, 18, 181, 189, 38, 114, 166, 59, 187, 227, 146, 61, 153, 69, 42, 61, 106, 76, 130, 61, 184, 107, 179, 62, 158, 210, 211, 62, 132, 100, 255, 56, 141, 223, 108, 62, 149, 7, 200, 190, 47, 171, 136, 62, 8, 130, 155, 189, 183, 228, 83, 62, 111, 175, 3, 62, 109, 214, 127, 189, 50, 20, 5, 60, 14, 213, 83, 62, 39, 223, 86, 61, 38, 208, 15, 61, 127, 216, 228, 62, 40, 139, 203, 188, 166, 99, 2, 60, 25, 150, 113, 189, 144, 195, 153, 190, 242, 6, 21, 189, 150, 23, 242, 190, 118, 171, 145, 190, 234, 7, 139, 62, 62, 46, 50, 62, 73, 48, 230, 190, 104, 183, 173, 189, 198, 161, 32, 191, 148, 80, 78, 190, 182, 54, 195, 61, 220, 64, 8, 63, 171, 142, 83, 62, 105, 152, 206, 190, 9, 1, 198, 189, 5, 179, 205, 62, 156, 49, 65, 189, 98, 227, 242, 186, 208, 138, 29, 62, 227, 201, 199, 62, 45, 3, 173, 62, 49, 169, 1, 63, 136, 149, 18, 190, 245, 8, 76, 62, 50, 148, 17, 190, 193, 238, 201, 60, 72, 164, 95, 190, 85, 207, 154, 189, 147, 139, 42, 62, 187, 34, 243, 190, 80, 206, 165, 62, 204, 192, 7, 62, 220, 149, 98, 191, 171, 249, 32, 62, 13, 34, 160, 188, 229, 92, 131, 190, 54, 131, 174, 190, 63, 128, 21, 62, 28, 117, 240, 189, 78, 168, 71, 190, 47, 220, 30, 191, 3, 19, 163, 190, 12, 149, 65, 62, 203, 222, 198, 62, 160, 106, 132, 61, 183, 110, 181, 190, 69, 93, 136, 62, 207, 249, 187, 62, 12, 188, 81, 190, 253, 71, 137, 62, 205, 202, 131, 62, 57, 254, 199, 62, 229, 65, 172, 62, 170, 184, 82, 62, 33, 43, 114, 190, 142, 32, 242, 62, 120, 249, 99, 191, 75, 46, 12, 62, 180, 71, 26, 191, 133, 2, 49, 190, 34, 57, 12, 62, 102, 2, 145, 191, 111, 186, 106, 62, 169, 155, 25, 190, 82, 100, 82, 191, 25, 43, 132, 62, 177, 197, 25, 62, 86, 53, 169, 189, 85, 73, 210, 190, 220, 119, 121, 62, 3, 204, 47, 62, 189, 148, 54, 190, 238, 199, 211, 190, 28, 38, 66, 189, 153, 54, 254, 60, 248, 59, 50, 190, 65, 213, 176, 61, 93, 19, 158, 61, 93, 201, 39, 191, 32, 136, 185, 61, 99, 29, 21, 188, 193, 227, 45, 190, 135, 47, 121, 61, 176, 107, 93, 189, 77, 50, 31, 63, 59, 238, 44, 190, 31, 83, 175, 60, 119, 74, 180, 188, 209, 93, 55, 190, 179, 1, 141, 186, 231, 3, 105, 191, 221, 202, 157, 190, 125, 203, 111, 190, 9, 196, 38, 191, 243, 25, 158, 61, 69, 6, 42, 62, 54, 247, 147, 61, 71, 186, 161, 188, 219, 154, 88, 62, 241, 176, 69, 63, 171, 170, 161, 190, 127, 34, 183, 190, 224, 35, 119, 188, 52, 49, 132, 62, 98, 169, 176, 187, 143, 109, 58, 62, 130, 31, 125, 60, 17, 57, 222, 190, 43, 203, 128, 61, 159, 198, 71, 62, 225, 244, 15, 63, 107, 214, 34, 190, 9, 194, 77, 189, 249, 25, 231, 61, 70, 12, 118, 59, 182, 2, 81, 191, 88, 142, 0, 190, 50, 31, 91, 191, 162, 29, 40, 62, 62, 206, 45, 191, 250, 18, 146, 61, 152, 196, 193, 190, 153, 100, 243, 189, 67, 81, 237, 189, 160, 238, 212, 61, 16, 179, 197, 189, 254, 72, 136, 190, 242, 150, 107, 190, 188, 185, 0, 190, 250, 244, 147, 190, 63, 82, 244, 189, 207, 159, 198, 61, 181, 181, 254, 61, 131, 6, 237, 61, 19, 103, 238, 60, 237, 153, 205, 189, 195, 129, 57, 190, 134, 123, 177, 190, 63, 175, 81, 190, 154, 163, 215, 61, 32, 145, 60, 61, 68, 171, 239, 189, 51, 103, 132, 191, 126, 118, 125, 189, 138, 186, 69, 190, 148, 52, 20, 62, 186, 10, 163, 62, 247, 58, 58, 189, 216, 232, 146, 189, 138, 107, 52, 62, 206, 227, 199, 190, 10, 173, 29, 190, 24, 94, 23, 191, 120, 130, 132, 61, 147, 254, 217, 190, 145, 131, 167, 190, 64, 11, 67, 190, 35, 254, 196, 190, 197, 50, 14, 62, 109, 13, 241, 61, 142, 98, 62, 190, 15, 196, 105, 61, 73, 123, 26, 62, 62, 27, 228, 189, 179, 115, 110, 190, 69, 92, 160, 190, 154, 237, 174, 62, 196, 250, 166, 61, 218, 177, 83, 61, 68, 205, 143, 62, 153, 223, 24, 62, 150, 192, 221, 190, 24, 121, 200, 189, 139, 210, 221, 62, 246, 86, 186, 62, 127, 209, 115, 190, 59, 53, 175, 189, 7, 200, 96, 188, 43, 190, 217, 190, 57, 30, 11, 191, 85, 66, 3, 62, 76, 172, 59, 191, 131, 130, 120, 62, 133, 187, 9, 190, 112, 138, 104, 62, 88, 137, 176, 190, 235, 194, 71, 190, 183, 76, 227, 61, 116, 161, 17, 62, 125, 141, 29, 188, 127, 153, 49, 190, 50, 137, 7, 61, 84, 216, 243, 62, 132, 92, 71, 190, 224, 139, 130, 61, 144, 187, 121, 188, 0, 161, 98, 62, 44, 89, 123, 62, 138, 138, 224, 188, 250, 243, 21, 62, 96, 140, 55, 62, 84, 88, 187, 190, 124, 15, 179, 62, 173, 8, 232, 190, 13, 149, 59, 190, 125, 191, 34, 189, 136, 53, 123, 62, 234, 128, 120, 188, 218, 162, 221, 189, 138, 103, 13, 62, 169, 175, 30, 190, 140, 223, 19, 191, 48, 75, 174, 190, 120, 106, 255, 190, 226, 81, 97, 190, 186, 217, 53, 190, 228, 183, 68, 62, 139, 8, 151, 190, 148, 97, 41, 61, 86, 104, 26, 62, 195, 223, 6, 190, 36, 217, 16, 62, 28, 21, 58, 62, 83, 175, 6, 192, 250, 251, 241, 190, 207, 120, 127, 62, 85, 221, 13, 62, 171, 183, 144, 61, 24, 192, 18, 62, 88, 128, 58, 61, 206, 142, 130, 190, 164, 53, 68, 190, 106, 171, 143, 189, 95, 188, 203, 189, 211, 43, 134, 62, 158, 253, 42, 62, 24, 57, 73, 188, 198, 119, 136, 190, 166, 163, 87, 189, 169, 68, 57, 62, 149, 236, 100, 190, 79, 224, 140, 62, 130, 115, 171, 61, 81, 148, 116, 61, 51, 122, 185, 189, 163, 74, 47, 190, 247, 244, 5, 190, 158, 75, 0, 190, 153, 222, 181, 190, 217, 231, 178, 62, 209, 109, 107, 61, 133, 85, 131, 189, 220, 132, 189, 62, 136, 171, 192, 189, 85, 66, 145, 62, 98, 160, 88, 60, 203, 146, 47, 191, 75, 233, 64, 61, 129, 201, 224, 189, 224, 113, 7, 191, 30, 57, 112, 190, 195, 208, 139, 189, 38, 1, 102, 60, 78, 211, 145, 61, 220, 10, 145, 188, 1, 146, 78, 190, 31, 19, 179, 60, 255, 192, 197, 188, 111, 58, 255, 189, 249, 252, 172, 189, 72, 157, 120, 189, 64, 248, 61, 189, 187, 158, 16, 62, 106, 148, 9, 62, 50, 26, 81, 188, 150, 200, 15, 189, 104, 114, 180, 188, 10, 56, 29, 190, 183, 139, 84, 187, 152, 143, 36, 190, 143, 175, 105, 189, 129, 247, 165, 60, 18, 152, 236, 188, 248, 181, 145, 61, 105, 14, 187, 61, 161, 23, 66, 190, 102, 131, 212, 61, 7, 90, 59, 189, 241, 138, 211, 189, 191, 206, 71, 190, 218, 99, 112, 60, 152, 162, 136, 61, 205, 37, 198, 189, 1, 184, 172, 61, 176, 209, 162, 190, 158, 184, 138, 189, 133, 40, 54, 189, 241, 215, 35, 188, 109, 37, 35, 188, 152, 63, 234, 62, 124, 114, 221, 61, 86, 67, 23, 190, 156, 59, 146, 60, 153, 32, 186, 62, 114, 143, 35, 61, 18, 152, 206, 61, 250, 12, 212, 188, 221, 81, 194, 188, 198, 186, 20, 62, 126, 178, 129, 189, 44, 171, 178, 189, 248, 192, 0, 190, 240, 137, 135, 188, 124, 191, 47, 61, 113, 201, 95, 190, 50, 93, 66, 62, 9, 137, 42, 62, 215, 103, 131, 190, 69, 117, 119, 62, 0, 227, 141, 188, 124, 188, 69, 191, 162, 57, 183, 61, 56, 204, 252, 189, 138, 98, 175, 190, 61, 69, 43, 190, 203, 195, 44, 190, 34, 209, 192, 188, 198, 65, 1, 62, 141, 122, 29, 190, 94, 172, 144, 62, 100, 214, 45, 191, 177, 144, 7, 191, 244, 98, 255, 61, 47, 248, 180, 59, 187, 187, 205, 61, 136, 200, 118, 191, 77, 84, 53, 62, 240, 141, 190, 190, 253, 30, 77, 189, 242, 248, 194, 189, 255, 87, 159, 62, 225, 44, 136, 62, 129, 101, 129, 189, 234, 124, 217, 61, 198, 137, 53, 61, 16, 51, 184, 61, 55, 113, 67, 190, 206, 115, 131, 190, 242, 240, 26, 190, 156, 140, 8, 190, 206, 206, 53, 189, 182, 57, 186, 62, 230, 94, 255, 62, 148, 10, 215, 189, 125, 197, 41, 62, 127, 172, 135, 62, 226, 244, 91, 190, 43, 222, 46, 62, 8, 175, 153, 189, 93, 234, 165, 190, 160, 51, 15, 191, 14, 212, 122, 187, 118, 181, 11, 62, 243, 43, 34, 63, 63, 27, 224, 61, 30, 147, 185, 190, 169, 76, 79, 190, 79, 156, 203, 62, 204, 130, 64, 61, 25, 170, 132, 61, 100, 134, 229, 62, 112, 180, 87, 61, 222, 130, 12, 63, 65, 4, 6, 190, 1, 143, 6, 191, 237, 82, 102, 62, 155, 213, 54, 191, 63, 189, 178, 62, 6, 224, 19, 191, 191, 149, 10, 191, 9, 188, 228, 61, 41, 158, 251, 190, 145, 183, 144, 62, 95, 222, 224, 189, 109, 142, 60, 191, 65, 114, 186, 61, 42, 245, 18, 62, 33, 190, 136, 189, 242, 149, 195, 190, 37, 11, 191, 190, 53, 9, 152, 189, 232, 145, 191, 190, 91, 56, 145, 60, 76, 102, 38, 190, 246, 112, 79, 62, 134, 190, 33, 60, 185, 107, 153, 190, 201, 188, 182, 189, 188, 45, 53, 191, 106, 84, 187, 189, 120, 38, 9, 191, 76, 28, 127, 189, 71, 149, 211, 61, 28, 106, 67, 190, 41, 147, 124, 62, 37, 254, 27, 190, 217, 77, 215, 190, 59, 170, 17, 62, 250, 118, 46, 191, 190, 223, 103, 188, 82, 89, 247, 190, 107, 6, 91, 190, 56, 36, 208, 190, 56, 165, 140, 190, 44, 171, 255, 189, 241, 148, 254, 190, 157, 235, 14, 191, 134, 99, 35, 191, 41, 50, 106, 61, 77, 226, 141, 62, 92, 52, 188, 190, 86, 25, 217, 60, 44, 64, 160, 60, 172, 63, 51, 62, 62, 73, 3, 62, 99, 169, 92, 189, 103, 219, 228, 62, 168, 108, 41, 189, 245, 68, 219, 190, 157, 223, 34, 62, 220, 219, 170, 190, 225, 59, 213, 189, 158, 100, 128, 190, 17, 106, 134, 62, 164, 58, 247, 189, 194, 56, 18, 191, 75, 62, 19, 190, 83, 180, 76, 191, 32, 194, 3, 191, 66, 124, 130, 190, 182, 245, 238, 190, 128, 34, 163, 190, 24, 13, 113, 189, 59, 30, 104, 190, 222, 161, 100, 61, 177, 68, 42, 190, 148, 22, 16, 190, 6, 226, 7, 191, 192, 107, 104, 191, 155, 168, 28, 62, 56, 17, 144, 190, 99, 20, 125, 188, 100, 82, 33, 190, 194, 72, 206, 190, 6, 11, 232, 61, 139, 87, 188, 62, 56, 234, 146, 62, 212, 186, 52, 62, 56, 204, 217, 61, 20, 171, 51, 191, 50, 85, 151, 61, 151, 158, 129, 62, 176, 178, 0, 63, 223, 74, 218, 190, 79, 8, 189, 61, 179, 253, 86, 61, 211, 195, 175, 190, 5, 154, 88, 191, 94, 173, 143, 190, 170, 198, 50, 191, 117, 59, 195, 61, 231, 172, 1, 191, 196, 100, 39, 62, 113, 47, 191, 190, 195, 210, 136, 61, 70, 46, 195, 61, 104, 119, 187, 62, 126, 205, 230, 61, 248, 55, 177, 188, 233, 162, 205, 61, 133, 184, 216, 62, 140, 193, 97, 190, 162, 118, 87, 190, 66, 226, 196, 61, 120, 188, 140, 61, 142, 22, 0, 63, 57, 216, 188, 62, 93, 181, 177, 61, 217, 72, 146, 189, 192, 38, 19, 190, 202, 135, 217, 61, 201, 33, 159, 62, 148, 171, 26, 191, 253, 241, 73, 189, 58, 129, 158, 188, 170, 24, 120, 62, 155, 215, 27, 190, 133, 81, 83, 190, 159, 173, 24, 190, 97, 185, 254, 62, 113, 21, 133, 60, 16, 15, 24, 62, 38, 14, 175, 188, 211, 225, 243, 61, 153, 248, 27, 190, 50, 61, 155, 62, 233, 12, 8, 189, 244, 159, 32, 61, 146, 29, 134, 62, 198, 74, 158, 61, 1, 70, 196, 61, 218, 254, 43, 191, 216, 178, 7, 191, 159, 8, 101, 190, 226, 148, 112, 191, 122, 138, 165, 62, 10, 199, 28, 62, 35, 153, 136, 190, 230, 203, 8, 62, 168, 238, 247, 62, 50, 58, 206, 61, 195, 30, 203, 62, 220, 80, 44, 190, 57, 55, 241, 190, 117, 70, 196, 61, 250, 129, 119, 62, 79, 169, 193, 62, 159, 107, 141, 190, 29, 197, 87, 62, 73, 32, 163, 60, 5, 0, 31, 190, 236, 128, 189, 190, 164, 53, 129, 62, 173, 189, 60, 191, 92, 208, 163, 62, 26, 18, 15, 191, 123, 5, 159, 188, 162, 142, 183, 190, 176, 86, 21, 188, 141, 146, 235, 61, 106, 202, 137, 62, 31, 93, 131, 189, 152, 197, 242, 189, 65, 38, 81, 60, 254, 7, 193, 62, 147, 190, 169, 190, 186, 50, 153, 189, 102, 87, 197, 62, 26, 107, 8, 62, 221, 152, 228, 189, 228, 113, 131, 189, 33, 222, 224, 59, 14, 4, 10, 188, 193, 152, 5, 62, 58, 43, 45, 190, 218, 77, 2, 61, 36, 250, 141, 61, 72, 8, 235, 189, 249, 234, 164, 191, 10, 22, 32, 190, 191, 188, 196, 190, 58, 143, 191, 189, 68, 217, 17, 62, 101, 202, 102, 189, 167, 53, 180, 62, 58, 190, 33, 188, 26, 205, 236, 190, 43, 138, 39, 62, 151, 190, 91, 191, 42, 99, 199, 189, 194, 169, 230, 190, 222, 57, 159, 189, 136, 65, 230, 190, 238, 80, 215, 190, 135, 193, 132, 59, 113, 146, 100, 61, 64, 149, 6, 62, 109, 248, 106, 188, 49, 131, 31, 62, 42, 168, 170, 187, 190, 116, 180, 190, 61, 233, 210, 190, 247, 176, 98, 61, 101, 65, 154, 62, 251, 50, 113, 62, 229, 120, 38, 61, 65, 148, 131, 60, 249, 104, 180, 190, 94, 14, 102, 62, 163, 129, 26, 62, 242, 107, 19, 63, 168, 152, 43, 190, 136, 183, 117, 190, 81, 33, 87, 60, 216, 32, 10, 62, 172, 74, 171, 190, 78, 11, 223, 190, 100, 137, 72, 191, 83, 240, 115, 62, 156, 154, 51, 191, 195, 95, 214, 61, 249, 131, 51, 191, 229, 36, 46, 190, 213, 163, 31, 62, 99, 23, 31, 189, 8, 70, 139, 189, 44, 2, 239, 190, 73, 69, 10, 190, 197, 3, 19, 63, 154, 169, 166, 190, 114, 28, 170, 62, 53, 253, 244, 59, 88, 68, 219, 61, 114, 236, 21, 62, 150, 192, 148, 190, 33, 123, 201, 190, 138, 236, 153, 62, 217, 2, 79, 191, 223, 46, 150, 62, 177, 240, 38, 62, 70, 241, 221, 61, 222, 227, 154, 190, 89, 251, 49, 190, 122, 93, 182, 189, 31, 191, 20, 62, 101, 33, 249, 61, 139, 174, 134, 62, 26, 186, 231, 61, 189, 54, 6, 191, 234, 253, 139, 62, 146, 128, 226, 189, 188, 24, 85, 61, 113, 23, 142, 61, 67, 121, 37, 190, 148, 138, 128, 62, 227, 111, 44, 62, 119, 15, 8, 59, 206, 199, 215, 62, 10, 37, 86, 62, 66, 244, 139, 190, 94, 153, 132, 191, 61, 247, 177, 62, 182, 100, 163, 62, 157, 21, 173, 61, 2, 29, 27, 60, 50, 242, 15, 62, 102, 255, 216, 189, 253, 180, 194, 189, 133, 147, 136, 190, 55, 67, 232, 189, 201, 207, 202, 62, 112, 186, 40, 62, 189, 207, 164, 190, 225, 147, 15, 190, 69, 194, 154, 190, 124, 126, 26, 62, 174, 217, 127, 190, 254, 191, 158, 62, 193, 119, 37, 61, 204, 81, 252, 62, 240, 43, 153, 190, 44, 124, 130, 61, 46, 53, 179, 61, 158, 216, 71, 62, 118, 125, 24, 191, 170, 184, 82, 62, 203, 33, 8, 190, 31, 143, 95, 59, 200, 54, 183, 62, 108, 244, 204, 61, 136, 153, 26, 62, 142, 178, 131, 190, 132, 39, 173, 191, 133, 138, 53, 62, 39, 92, 216, 190, 157, 89, 17, 191, 116, 27, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 247, 151, 61, 45, 170, 245, 61, 15, 197, 82, 62, 20, 38, 173, 189, 169, 164, 241, 62, 184, 41, 203, 61, 205, 10, 223, 61, 153, 222, 123, 61, 122, 216, 7, 190, 236, 158, 236, 189, 119, 194, 135, 62, 58, 90, 75, 62, 140, 148, 168, 62, 110, 9, 13, 190, 234, 252, 160, 62, 17, 222, 46, 190, 28, 169, 204, 189, 195, 140, 243, 189, 172, 215, 167, 62, 154, 194, 80, 190, 36, 69, 126, 62, 218, 209, 77, 190, 55, 127, 78, 61, 143, 79, 9, 62, 189, 68, 63, 61, 17, 160, 166, 61, 72, 167, 51, 61, 152, 179, 198, 189, 35, 230, 8, 190, 154, 14, 40, 62, 224, 38, 45, 62, 120, 43, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 219, 199, 62, 203, 51, 43, 191, 210, 146, 247, 190, 33, 91, 162, 61, 77, 98, 146, 60, 137, 62, 150, 189, 96, 69, 204, 190, 119, 133, 74, 191, 138, 213, 11, 62, 176, 101, 218, 189, 123, 20, 26, 189, 161, 53, 15, 191, 87, 120, 89, 191, 205, 114, 67, 62, 138, 138, 72, 62, 206, 2, 171, 190, 210, 176, 162, 62, 151, 102, 110, 63, 239, 60, 227, 190, 162, 80, 94, 61, 46, 102, 113, 190, 6, 123, 38, 191, 182, 181, 67, 191, 27, 235, 131, 191, 152, 90, 32, 191, 241, 48, 173, 62, 219, 44, 93, 62, 211, 208, 195, 62, 201, 161, 39, 191, 59, 106, 79, 63, 33, 214, 67, 63, 154, 80, 94, 191, 249, 101, 43, 190, 213, 4, 244, 190, 33, 93, 49, 189, 39, 222, 2, 190, 199, 33, 149, 190, 160, 62, 104, 61, 181, 12, 202, 61, 87, 55, 205, 189, 7, 149, 214, 61, 237, 158, 148, 61, 111, 8, 183, 190, 152, 59, 137, 62, 24, 78, 172, 189, 217, 26, 235, 189, 31, 133, 219, 190, 14, 115, 57, 189, 79, 95, 82, 189, 178, 107, 151, 62, 197, 45, 92, 190, 227, 0, 141, 60, 7, 218, 117, 190, 90, 50, 60, 62, 199, 166, 149, 62, 43, 175, 73, 62, 70, 229, 169, 61, 100, 200, 19, 190, 162, 101, 19, 63, 242, 231, 133, 60, 178, 48, 24, 190, 139, 229, 82, 61, 26, 228, 65, 60, 110, 214, 248, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 134, 106, 61, 62, 19, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 156, 216, 189, 48, 11, 51, 63, 115, 127, 135, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {154, 16, 104, 190, 47, 129, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0061/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}