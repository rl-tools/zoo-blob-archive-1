// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 239, 29, 191, 30, 202, 163, 62, 85, 82, 214, 190, 40, 31, 146, 62, 179, 92, 22, 63, 63, 201, 6, 191, 219, 196, 211, 62, 244, 65, 105, 63, 93, 91, 11, 191, 190, 126, 109, 191, 185, 12, 94, 63, 78, 16, 160, 62, 12, 219, 251, 62, 156, 210, 17, 189, 147, 56, 198, 190, 120, 66, 153, 190, 188, 115, 137, 63, 31, 94, 145, 61, 202, 17, 179, 62, 74, 190, 98, 63, 82, 111, 206, 61, 200, 37, 28, 190, 203, 115, 163, 191, 146, 205, 142, 189, 83, 103, 184, 62, 104, 175, 220, 62, 249, 116, 234, 190, 39, 193, 103, 63, 109, 120, 14, 191, 56, 145, 105, 60, 12, 121, 34, 63, 70, 38, 129, 63, 122, 11, 129, 62, 169, 55, 9, 191, 161, 127, 25, 191, 185, 104, 181, 62, 241, 71, 212, 190, 59, 131, 101, 62, 42, 194, 12, 62, 253, 250, 91, 191, 35, 11, 131, 191, 62, 203, 65, 189, 26, 143, 31, 63, 40, 14, 210, 62, 172, 109, 154, 62, 110, 127, 16, 191, 37, 132, 91, 191, 74, 241, 194, 62, 26, 224, 208, 62, 121, 236, 159, 62, 207, 133, 138, 62, 153, 183, 31, 62, 219, 48, 109, 191, 120, 21, 236, 62, 248, 210, 217, 62, 28, 227, 135, 63, 234, 106, 238, 62, 84, 26, 82, 191, 12, 24, 218, 190, 70, 92, 11, 63, 142, 209, 147, 62, 208, 21, 154, 63, 108, 83, 218, 62, 57, 206, 130, 190, 44, 227, 187, 63, 143, 47, 179, 62, 11, 245, 111, 190, 186, 210, 48, 63, 218, 201, 155, 62, 62, 124, 82, 62, 12, 179, 181, 62, 195, 48, 207, 60, 7, 15, 7, 191, 235, 111, 164, 63, 29, 227, 158, 62, 104, 41, 36, 191, 21, 243, 72, 62, 247, 138, 74, 191, 141, 232, 1, 62, 27, 232, 190, 191, 68, 255, 241, 190, 92, 56, 53, 63, 56, 220, 163, 191, 228, 57, 169, 190, 242, 199, 28, 190, 64, 44, 142, 62, 16, 168, 42, 191, 143, 40, 16, 191, 124, 38, 182, 191, 162, 26, 140, 190, 129, 141, 145, 191, 148, 202, 250, 189, 46, 222, 28, 62, 20, 90, 195, 60, 101, 51, 97, 190, 214, 214, 28, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 122, 10, 191, 66, 211, 137, 191, 81, 225, 177, 190, 147, 86, 190, 62, 18, 182, 229, 190, 100, 218, 252, 62, 1, 42, 40, 187, 18, 127, 146, 62, 173, 233, 182, 190, 94, 134, 214, 60, 128, 120, 137, 61, 0, 145, 177, 190, 132, 248, 22, 63, 88, 133, 151, 62, 192, 174, 48, 191, 162, 23, 231, 190, 253, 40, 31, 191, 204, 215, 19, 62, 237, 164, 143, 190, 192, 157, 135, 190, 80, 88, 131, 189, 27, 15, 155, 62, 73, 12, 7, 63, 21, 29, 190, 62, 127, 198, 238, 189, 209, 223, 136, 189, 38, 152, 200, 60, 34, 41, 135, 190, 189, 166, 52, 189, 120, 153, 6, 63, 216, 248, 36, 190, 60, 199, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 143, 140, 61, 160, 199, 250, 62, 64, 250, 183, 62, 90, 16, 109, 62, 250, 60, 153, 61, 194, 153, 30, 63, 129, 120, 193, 190, 60, 188, 4, 190, 102, 156, 132, 62, 160, 114, 169, 62, 231, 159, 1, 190, 66, 134, 13, 61, 127, 92, 192, 59, 198, 27, 39, 191, 49, 92, 147, 191, 15, 177, 162, 188, 118, 177, 170, 191, 122, 252, 5, 62, 111, 3, 204, 190, 177, 117, 51, 62, 197, 148, 151, 190, 187, 219, 142, 62, 92, 132, 12, 62, 192, 59, 8, 63, 160, 159, 183, 62, 30, 156, 158, 59, 142, 71, 254, 190, 94, 178, 26, 62, 43, 66, 154, 189, 50, 62, 157, 190, 118, 82, 187, 61, 50, 152, 247, 61, 114, 36, 85, 190, 178, 138, 41, 62, 133, 93, 195, 62, 120, 139, 210, 190, 149, 35, 77, 189, 82, 42, 200, 62, 220, 190, 171, 62, 80, 71, 43, 190, 41, 62, 120, 61, 130, 204, 120, 190, 64, 167, 127, 62, 242, 228, 19, 190, 74, 20, 60, 62, 239, 64, 159, 62, 236, 106, 31, 191, 70, 231, 73, 190, 231, 172, 13, 191, 197, 85, 249, 190, 12, 181, 49, 191, 71, 172, 144, 190, 55, 98, 103, 190, 9, 157, 11, 190, 234, 191, 221, 189, 70, 69, 12, 62, 77, 29, 149, 191, 57, 63, 159, 189, 66, 181, 145, 190, 82, 181, 154, 191, 167, 205, 234, 189, 9, 90, 166, 190, 71, 21, 128, 190, 149, 195, 47, 190, 48, 186, 121, 61, 132, 42, 6, 63, 202, 138, 236, 61, 122, 10, 14, 60, 187, 122, 159, 189, 46, 214, 121, 62, 30, 237, 148, 62, 120, 220, 45, 190, 201, 179, 82, 61, 174, 204, 22, 185, 81, 156, 176, 62, 106, 206, 253, 60, 101, 223, 151, 62, 219, 238, 255, 189, 136, 220, 225, 62, 247, 159, 131, 62, 66, 106, 83, 62, 60, 180, 93, 62, 171, 170, 135, 189, 42, 42, 64, 62, 214, 193, 220, 61, 118, 53, 241, 61, 240, 38, 145, 62, 184, 131, 163, 62, 39, 157, 31, 190, 60, 45, 71, 61, 26, 72, 94, 190, 45, 235, 38, 191, 237, 156, 143, 190, 43, 228, 146, 191, 33, 207, 15, 61, 168, 18, 184, 59, 173, 253, 84, 189, 243, 117, 199, 61, 147, 50, 72, 61, 188, 78, 254, 189, 54, 125, 124, 61, 151, 230, 48, 61, 227, 139, 18, 62, 217, 182, 135, 189, 105, 180, 134, 189, 226, 252, 76, 61, 180, 203, 91, 60, 216, 168, 7, 62, 239, 252, 77, 61, 99, 217, 184, 189, 164, 232, 41, 62, 240, 168, 50, 190, 111, 130, 50, 61, 92, 160, 24, 190, 190, 59, 14, 62, 231, 239, 54, 188, 232, 38, 40, 190, 63, 21, 255, 189, 193, 219, 59, 190, 90, 135, 40, 190, 173, 226, 19, 62, 216, 85, 42, 190, 212, 92, 162, 61, 91, 38, 245, 61, 157, 62, 168, 189, 247, 52, 254, 189, 222, 145, 159, 61, 252, 220, 218, 61, 104, 246, 94, 190, 35, 30, 71, 190, 188, 228, 127, 190, 27, 24, 131, 189, 245, 198, 85, 190, 173, 73, 102, 61, 43, 36, 57, 62, 49, 80, 105, 61, 91, 92, 61, 190, 58, 88, 205, 60, 33, 230, 213, 62, 51, 71, 59, 190, 130, 39, 41, 62, 210, 126, 148, 62, 150, 203, 222, 60, 143, 0, 173, 190, 233, 177, 67, 61, 14, 35, 25, 190, 127, 36, 147, 189, 94, 118, 87, 190, 240, 10, 254, 61, 231, 47, 166, 61, 137, 151, 56, 62, 164, 221, 0, 62, 251, 162, 250, 58, 129, 80, 237, 60, 65, 67, 8, 62, 180, 230, 90, 190, 188, 249, 45, 62, 1, 247, 27, 61, 179, 48, 25, 190, 187, 107, 19, 189, 61, 170, 45, 188, 101, 191, 161, 189, 238, 45, 186, 60, 78, 220, 182, 189, 209, 161, 16, 190, 46, 177, 229, 189, 152, 217, 1, 190, 156, 156, 167, 60, 200, 218, 170, 188, 35, 220, 182, 189, 35, 156, 7, 188, 115, 107, 30, 190, 159, 20, 81, 190, 49, 33, 64, 61, 4, 81, 54, 189, 195, 108, 159, 189, 20, 190, 159, 189, 95, 239, 2, 188, 251, 67, 116, 189, 230, 187, 70, 189, 36, 167, 217, 188, 66, 92, 18, 188, 30, 201, 177, 61, 76, 217, 74, 190, 190, 151, 47, 190, 191, 109, 152, 189, 158, 96, 55, 189, 88, 20, 245, 188, 84, 191, 201, 61, 113, 192, 25, 188, 229, 123, 190, 189, 204, 207, 55, 61, 65, 221, 14, 62, 164, 2, 198, 190, 7, 90, 60, 189, 190, 91, 108, 191, 86, 237, 7, 61, 0, 174, 142, 189, 32, 91, 238, 62, 3, 16, 77, 62, 139, 202, 190, 190, 16, 17, 160, 189, 121, 113, 142, 62, 155, 0, 123, 62, 230, 27, 3, 62, 148, 146, 97, 62, 18, 135, 14, 63, 84, 245, 176, 62, 159, 156, 128, 62, 121, 180, 160, 62, 18, 136, 24, 189, 11, 170, 204, 188, 182, 214, 190, 187, 104, 243, 231, 189, 185, 161, 224, 188, 2, 107, 7, 62, 187, 70, 145, 191, 49, 122, 154, 62, 92, 16, 16, 189, 74, 247, 82, 191, 109, 115, 216, 61, 98, 87, 205, 189, 77, 14, 189, 190, 63, 15, 234, 187, 114, 246, 61, 191, 18, 218, 242, 189, 124, 153, 63, 191, 136, 176, 250, 62, 126, 247, 117, 189, 17, 230, 175, 62, 236, 176, 156, 60, 252, 18, 34, 190, 41, 127, 99, 191, 82, 178, 178, 186, 135, 131, 73, 190, 15, 112, 255, 190, 219, 110, 108, 62, 218, 131, 20, 63, 32, 184, 101, 62, 207, 253, 5, 191, 185, 210, 109, 62, 80, 202, 90, 190, 84, 15, 61, 189, 234, 122, 78, 190, 52, 83, 186, 61, 26, 149, 83, 61, 225, 247, 164, 61, 61, 201, 247, 61, 64, 201, 160, 62, 207, 40, 104, 190, 115, 136, 90, 189, 73, 206, 243, 61, 130, 205, 24, 191, 177, 55, 61, 190, 34, 189, 155, 190, 205, 73, 22, 190, 113, 213, 141, 190, 90, 175, 231, 190, 214, 109, 72, 191, 165, 118, 163, 190, 113, 137, 162, 190, 138, 62, 211, 191, 148, 125, 242, 190, 251, 224, 8, 63, 29, 22, 119, 190, 3, 32, 230, 62, 199, 106, 220, 60, 13, 169, 66, 189, 191, 245, 146, 189, 129, 255, 197, 61, 91, 161, 179, 190, 143, 252, 20, 61, 127, 82, 129, 190, 245, 11, 170, 62, 61, 253, 182, 190, 178, 118, 172, 189, 161, 213, 253, 190, 144, 214, 188, 190, 244, 240, 20, 190, 107, 205, 42, 190, 93, 8, 236, 189, 71, 174, 45, 61, 106, 107, 60, 62, 138, 129, 141, 62, 168, 44, 156, 189, 91, 224, 153, 62, 61, 241, 65, 190, 33, 152, 242, 61, 144, 161, 200, 61, 212, 12, 142, 60, 217, 57, 62, 190, 19, 157, 141, 61, 41, 25, 16, 190, 85, 153, 97, 189, 21, 145, 7, 189, 112, 59, 227, 189, 184, 173, 182, 187, 148, 158, 22, 190, 141, 171, 62, 190, 73, 190, 234, 61, 77, 171, 179, 189, 54, 181, 147, 189, 1, 67, 92, 61, 34, 127, 2, 62, 103, 18, 33, 190, 210, 188, 187, 189, 32, 44, 19, 190, 101, 156, 179, 60, 128, 43, 189, 189, 59, 46, 185, 60, 255, 191, 132, 61, 25, 58, 74, 190, 155, 39, 62, 187, 46, 224, 3, 62, 47, 20, 198, 189, 202, 252, 42, 190, 94, 218, 189, 189, 179, 59, 33, 62, 127, 190, 151, 189, 82, 66, 58, 190, 68, 191, 170, 188, 147, 76, 224, 189, 241, 103, 119, 62, 233, 99, 31, 190, 50, 14, 186, 188, 36, 172, 34, 61, 4, 59, 240, 61, 204, 50, 191, 60, 29, 90, 247, 61, 27, 250, 174, 62, 101, 99, 230, 62, 96, 176, 152, 189, 47, 203, 120, 62, 45, 152, 199, 190, 34, 82, 88, 62, 166, 246, 40, 190, 129, 207, 8, 62, 101, 92, 236, 61, 167, 119, 196, 189, 179, 134, 133, 188, 223, 245, 65, 62, 157, 151, 131, 61, 143, 106, 149, 61, 127, 118, 235, 62, 168, 219, 66, 187, 238, 251, 15, 189, 253, 101, 23, 190, 29, 101, 178, 190, 73, 72, 33, 189, 232, 222, 9, 191, 106, 103, 154, 190, 26, 181, 135, 62, 62, 8, 91, 62, 186, 238, 215, 190, 87, 232, 246, 189, 37, 143, 91, 191, 109, 36, 98, 190, 122, 106, 208, 60, 226, 15, 241, 62, 255, 141, 88, 62, 221, 229, 222, 190, 226, 255, 81, 189, 179, 70, 190, 62, 255, 32, 104, 61, 123, 208, 38, 189, 100, 192, 184, 61, 167, 50, 237, 62, 166, 184, 5, 63, 59, 9, 23, 63, 77, 214, 153, 61, 247, 46, 203, 61, 15, 29, 146, 189, 4, 47, 81, 189, 219, 253, 248, 190, 161, 196, 161, 189, 162, 136, 19, 62, 7, 87, 36, 191, 128, 23, 168, 62, 208, 19, 134, 61, 166, 150, 105, 191, 242, 98, 55, 62, 210, 124, 31, 190, 129, 194, 167, 190, 182, 92, 143, 190, 32, 241, 21, 62, 31, 95, 3, 190, 61, 1, 91, 190, 252, 42, 80, 191, 76, 89, 172, 190, 183, 106, 70, 62, 169, 146, 198, 62, 40, 96, 86, 61, 114, 73, 194, 190, 234, 231, 151, 62, 49, 114, 190, 62, 65, 45, 15, 191, 56, 203, 131, 62, 128, 22, 72, 62, 242, 146, 14, 63, 185, 179, 97, 62, 251, 95, 20, 63, 23, 129, 195, 189, 41, 62, 189, 62, 132, 12, 130, 191, 28, 92, 225, 61, 237, 36, 65, 191, 164, 85, 11, 190, 145, 246, 17, 62, 69, 98, 111, 191, 45, 58, 96, 62, 162, 141, 91, 190, 96, 69, 86, 191, 125, 233, 138, 62, 208, 137, 207, 185, 139, 240, 2, 190, 181, 248, 0, 191, 139, 94, 62, 62, 174, 51, 23, 62, 53, 158, 91, 190, 137, 205, 171, 189, 251, 124, 150, 189, 89, 195, 251, 58, 88, 32, 235, 190, 95, 244, 155, 62, 124, 16, 53, 61, 187, 187, 57, 191, 140, 4, 92, 190, 214, 239, 122, 190, 184, 111, 208, 189, 60, 108, 165, 62, 176, 107, 93, 189, 45, 222, 16, 63, 59, 238, 44, 190, 229, 38, 13, 190, 119, 74, 180, 188, 205, 7, 210, 190, 122, 41, 142, 186, 156, 240, 96, 191, 179, 53, 60, 189, 107, 176, 168, 190, 191, 160, 34, 191, 84, 243, 169, 61, 153, 61, 156, 62, 226, 164, 130, 62, 233, 190, 218, 188, 144, 197, 194, 62, 209, 29, 101, 63, 163, 147, 36, 191, 196, 21, 83, 191, 149, 251, 76, 190, 132, 212, 226, 62, 114, 207, 255, 60, 45, 247, 159, 62, 3, 252, 149, 61, 140, 74, 193, 190, 43, 84, 174, 189, 127, 18, 238, 62, 75, 255, 8, 63, 215, 192, 194, 189, 15, 4, 97, 61, 83, 101, 26, 62, 132, 83, 38, 190, 215, 234, 83, 191, 163, 217, 136, 189, 217, 96, 115, 191, 94, 129, 35, 62, 227, 12, 31, 191, 113, 235, 88, 62, 135, 14, 165, 190, 254, 110, 120, 189, 153, 149, 145, 189, 131, 138, 5, 62, 12, 155, 156, 190, 141, 90, 184, 190, 180, 154, 1, 191, 218, 51, 154, 190, 240, 174, 149, 190, 245, 174, 166, 190, 53, 70, 229, 61, 134, 187, 154, 62, 47, 36, 28, 62, 202, 173, 216, 60, 158, 100, 224, 189, 89, 103, 177, 190, 160, 86, 184, 190, 86, 188, 95, 190, 116, 94, 70, 187, 48, 102, 72, 61, 85, 53, 247, 189, 4, 58, 175, 191, 126, 118, 125, 189, 234, 122, 6, 191, 108, 121, 33, 62, 62, 87, 195, 62, 247, 58, 58, 189, 47, 112, 41, 190, 138, 107, 52, 62, 213, 186, 12, 191, 10, 173, 29, 190, 174, 64, 145, 191, 120, 130, 132, 61, 249, 93, 61, 191, 150, 239, 79, 191, 254, 15, 151, 190, 228, 235, 19, 191, 118, 43, 41, 62, 233, 78, 24, 62, 44, 180, 101, 190, 75, 78, 150, 61, 6, 153, 77, 62, 93, 132, 212, 189, 41, 224, 121, 190, 108, 135, 153, 190, 76, 229, 196, 62, 59, 145, 139, 61, 242, 121, 9, 190, 212, 141, 147, 62, 50, 251, 11, 61, 220, 93, 16, 191, 255, 165, 34, 189, 31, 114, 235, 62, 9, 228, 168, 62, 155, 150, 163, 190, 139, 138, 0, 190, 81, 104, 207, 189, 200, 191, 65, 191, 55, 246, 247, 190, 4, 228, 93, 61, 87, 51, 48, 191, 193, 101, 186, 62, 227, 79, 113, 190, 111, 70, 84, 62, 151, 22, 2, 191, 69, 3, 171, 190, 97, 23, 33, 188, 216, 48, 184, 61, 54, 1, 2, 190, 60, 94, 11, 190, 77, 9, 14, 60, 71, 158, 224, 62, 239, 88, 26, 190, 245, 11, 19, 61, 218, 72, 79, 190, 127, 174, 157, 62, 236, 250, 96, 62, 243, 137, 212, 189, 211, 155, 37, 62, 211, 7, 151, 62, 159, 192, 255, 190, 91, 19, 222, 62, 105, 204, 192, 190, 179, 30, 68, 190, 240, 169, 131, 189, 150, 179, 171, 189, 185, 58, 66, 60, 98, 204, 179, 189, 157, 64, 108, 62, 13, 99, 250, 189, 255, 242, 52, 191, 184, 113, 172, 190, 152, 69, 20, 191, 61, 189, 120, 190, 167, 190, 42, 190, 102, 21, 53, 62, 239, 186, 135, 190, 236, 79, 235, 61, 22, 65, 82, 62, 68, 172, 205, 189, 217, 154, 102, 62, 204, 205, 24, 62, 159, 254, 8, 192, 219, 238, 250, 190, 182, 15, 104, 62, 201, 47, 56, 62, 41, 97, 79, 62, 86, 220, 224, 61, 201, 83, 139, 61, 122, 117, 123, 190, 59, 234, 95, 190, 112, 74, 242, 189, 151, 150, 166, 189, 139, 200, 84, 62, 247, 74, 9, 62, 21, 88, 109, 61, 186, 213, 143, 190, 128, 61, 196, 187, 8, 102, 47, 62, 191, 206, 3, 191, 203, 16, 127, 62, 134, 79, 13, 62, 131, 69, 88, 62, 29, 131, 14, 191, 27, 67, 96, 189, 75, 176, 72, 61, 51, 127, 24, 190, 88, 220, 162, 190, 8, 114, 166, 62, 202, 57, 57, 189, 204, 154, 70, 189, 182, 71, 185, 62, 254, 31, 5, 190, 5, 152, 152, 62, 125, 205, 227, 60, 228, 238, 39, 191, 245, 83, 152, 61, 121, 76, 36, 190, 16, 155, 44, 191, 130, 16, 45, 190, 195, 208, 139, 189, 38, 1, 102, 60, 78, 211, 145, 61, 220, 10, 145, 188, 1, 146, 78, 190, 31, 19, 179, 60, 255, 192, 197, 188, 111, 58, 255, 189, 249, 252, 172, 189, 72, 157, 120, 189, 64, 248, 61, 189, 187, 158, 16, 62, 106, 148, 9, 62, 50, 26, 81, 188, 150, 200, 15, 189, 104, 114, 180, 188, 10, 56, 29, 190, 183, 139, 84, 187, 152, 143, 36, 190, 143, 175, 105, 189, 129, 247, 165, 60, 18, 152, 236, 188, 248, 181, 145, 61, 105, 14, 187, 61, 161, 23, 66, 190, 102, 131, 212, 61, 7, 90, 59, 189, 241, 138, 211, 189, 191, 206, 71, 190, 218, 99, 112, 60, 152, 162, 136, 61, 205, 37, 198, 189, 131, 247, 139, 61, 143, 212, 193, 190, 125, 33, 3, 190, 162, 30, 84, 190, 1, 229, 152, 188, 78, 121, 3, 190, 27, 26, 193, 62, 188, 26, 132, 62, 151, 218, 70, 190, 3, 31, 162, 61, 139, 107, 169, 62, 147, 71, 41, 61, 77, 180, 72, 61, 150, 191, 134, 60, 161, 59, 75, 61, 13, 39, 102, 62, 60, 184, 250, 188, 196, 102, 158, 61, 119, 65, 132, 190, 12, 175, 129, 60, 194, 9, 72, 189, 150, 180, 229, 190, 161, 33, 62, 62, 18, 97, 17, 62, 253, 89, 254, 190, 187, 167, 72, 62, 130, 164, 129, 60, 110, 75, 58, 191, 187, 222, 149, 61, 200, 65, 95, 190, 35, 93, 229, 190, 13, 123, 240, 189, 226, 117, 178, 189, 130, 163, 60, 61, 3, 23, 62, 62, 218, 214, 5, 191, 12, 57, 205, 62, 225, 122, 75, 191, 139, 198, 66, 191, 137, 121, 30, 62, 114, 35, 128, 61, 90, 134, 173, 62, 131, 176, 220, 191, 230, 208, 169, 62, 145, 159, 227, 190, 188, 106, 1, 190, 35, 84, 201, 190, 202, 162, 8, 63, 157, 25, 238, 61, 140, 147, 252, 61, 0, 137, 226, 190, 87, 116, 208, 61, 239, 187, 248, 190, 126, 195, 226, 190, 248, 187, 28, 191, 190, 223, 18, 189, 10, 69, 96, 190, 111, 78, 3, 190, 234, 6, 205, 62, 16, 174, 29, 63, 74, 251, 28, 190, 11, 72, 41, 62, 126, 95, 99, 62, 96, 174, 28, 190, 89, 27, 55, 62, 149, 225, 100, 189, 106, 172, 141, 190, 35, 14, 87, 191, 88, 21, 77, 60, 176, 143, 106, 62, 111, 26, 99, 63, 39, 64, 97, 188, 146, 15, 167, 190, 178, 221, 242, 190, 227, 30, 221, 62, 155, 25, 128, 190, 154, 197, 255, 61, 209, 35, 202, 62, 238, 22, 56, 62, 61, 174, 210, 62, 61, 134, 182, 188, 148, 12, 51, 191, 45, 16, 139, 62, 193, 129, 144, 191, 216, 244, 217, 62, 9, 78, 232, 190, 117, 73, 71, 191, 166, 50, 47, 62, 10, 192, 200, 190, 163, 120, 150, 62, 60, 54, 45, 190, 2, 156, 115, 191, 5, 224, 230, 61, 164, 192, 185, 61, 15, 206, 63, 190, 231, 118, 93, 190, 37, 11, 191, 190, 53, 9, 152, 189, 232, 145, 191, 190, 91, 56, 145, 60, 76, 102, 38, 190, 246, 112, 79, 62, 134, 190, 33, 60, 185, 107, 153, 190, 201, 188, 182, 189, 188, 45, 53, 191, 106, 84, 187, 189, 120, 38, 9, 191, 76, 28, 127, 189, 71, 149, 211, 61, 28, 106, 67, 190, 41, 147, 124, 62, 37, 254, 27, 190, 217, 77, 215, 190, 59, 170, 17, 62, 250, 118, 46, 191, 190, 223, 103, 188, 82, 89, 247, 190, 107, 6, 91, 190, 56, 36, 208, 190, 56, 165, 140, 190, 44, 171, 255, 189, 241, 148, 254, 190, 157, 235, 14, 191, 134, 99, 35, 191, 41, 50, 106, 61, 77, 226, 141, 62, 92, 52, 188, 190, 56, 107, 24, 187, 55, 129, 17, 61, 170, 151, 66, 62, 247, 38, 175, 188, 212, 173, 12, 189, 21, 77, 227, 62, 222, 203, 9, 189, 148, 29, 0, 191, 17, 110, 50, 62, 29, 227, 3, 191, 22, 226, 89, 190, 158, 100, 128, 190, 183, 146, 92, 62, 207, 53, 94, 190, 9, 60, 18, 191, 75, 62, 19, 190, 83, 180, 76, 191, 32, 194, 3, 191, 19, 195, 134, 190, 41, 58, 241, 190, 205, 42, 192, 190, 248, 23, 59, 190, 41, 184, 199, 190, 248, 47, 55, 61, 157, 202, 104, 190, 76, 229, 23, 190, 173, 61, 18, 191, 86, 28, 133, 191, 95, 102, 24, 62, 32, 233, 171, 190, 17, 10, 209, 60, 90, 186, 34, 190, 182, 19, 209, 190, 51, 138, 248, 61, 26, 88, 195, 62, 115, 173, 139, 62, 222, 101, 33, 62, 223, 143, 190, 61, 69, 131, 50, 191, 2, 219, 185, 60, 245, 109, 138, 62, 105, 216, 245, 62, 230, 137, 208, 190, 161, 183, 203, 61, 14, 103, 98, 61, 205, 53, 209, 190, 91, 203, 77, 191, 232, 1, 152, 190, 34, 87, 97, 191, 23, 209, 150, 61, 58, 155, 207, 190, 102, 120, 81, 62, 106, 2, 160, 190, 22, 227, 198, 61, 206, 169, 168, 61, 76, 91, 183, 62, 115, 169, 26, 61, 132, 69, 13, 188, 162, 96, 44, 61, 43, 108, 177, 62, 45, 20, 105, 190, 213, 198, 80, 190, 126, 145, 197, 187, 235, 242, 60, 62, 176, 2, 23, 63, 245, 176, 230, 62, 211, 30, 5, 62, 35, 20, 188, 189, 161, 173, 166, 190, 239, 30, 88, 62, 64, 177, 222, 62, 167, 223, 165, 191, 176, 247, 5, 190, 171, 130, 194, 59, 190, 207, 167, 62, 95, 193, 154, 189, 240, 143, 26, 190, 115, 108, 145, 190, 56, 148, 231, 62, 72, 53, 200, 61, 79, 236, 28, 62, 70, 6, 110, 190, 62, 108, 26, 62, 0, 40, 54, 190, 85, 221, 181, 62, 186, 25, 248, 187, 45, 229, 70, 61, 203, 136, 178, 62, 209, 38, 83, 61, 25, 80, 204, 61, 98, 128, 127, 191, 180, 0, 32, 191, 16, 254, 201, 190, 108, 128, 138, 191, 201, 4, 170, 62, 147, 219, 128, 61, 9, 51, 130, 190, 176, 216, 52, 62, 115, 180, 233, 62, 154, 212, 91, 188, 247, 147, 191, 62, 200, 211, 114, 190, 205, 29, 24, 191, 133, 227, 55, 62, 118, 36, 122, 62, 31, 76, 174, 62, 20, 114, 182, 190, 129, 108, 221, 61, 32, 165, 114, 188, 78, 95, 158, 190, 184, 198, 188, 190, 172, 28, 16, 62, 34, 207, 132, 191, 81, 229, 193, 62, 117, 194, 45, 191, 68, 62, 188, 189, 18, 85, 254, 190, 85, 153, 82, 190, 230, 53, 109, 59, 120, 122, 103, 62, 134, 56, 207, 190, 188, 59, 183, 189, 7, 57, 97, 188, 150, 125, 157, 62, 188, 24, 156, 190, 18, 195, 131, 189, 152, 73, 158, 62, 101, 181, 21, 62, 186, 75, 226, 189, 218, 52, 120, 189, 88, 164, 186, 189, 178, 165, 52, 190, 153, 239, 24, 189, 244, 246, 129, 190, 218, 77, 2, 61, 164, 101, 6, 61, 155, 129, 128, 190, 238, 24, 210, 191, 10, 22, 32, 190, 71, 203, 31, 191, 254, 89, 61, 189, 144, 138, 10, 62, 101, 202, 102, 189, 178, 247, 203, 62, 58, 190, 33, 188, 124, 141, 205, 190, 43, 138, 39, 62, 154, 102, 167, 191, 42, 99, 199, 189, 213, 236, 245, 190, 248, 50, 234, 190, 99, 101, 15, 191, 238, 80, 215, 190, 122, 71, 52, 189, 163, 135, 188, 187, 140, 155, 144, 187, 82, 208, 163, 189, 246, 219, 253, 61, 121, 120, 232, 61, 208, 49, 195, 190, 90, 134, 87, 191, 235, 165, 235, 61, 238, 46, 194, 62, 203, 60, 167, 62, 196, 0, 247, 60, 36, 25, 1, 62, 109, 87, 154, 190, 66, 212, 51, 62, 101, 218, 121, 62, 131, 177, 10, 63, 166, 44, 21, 190, 49, 215, 50, 190, 163, 51, 147, 61, 220, 209, 63, 62, 182, 11, 222, 190, 79, 249, 212, 190, 117, 163, 142, 191, 27, 89, 32, 62, 142, 237, 29, 191, 245, 64, 56, 62, 40, 221, 39, 191, 159, 7, 194, 189, 94, 0, 13, 62, 244, 239, 168, 188, 46, 40, 15, 191, 198, 90, 202, 190, 11, 41, 123, 190, 221, 90, 235, 62, 124, 108, 166, 190, 204, 249, 216, 62, 8, 159, 207, 60, 40, 170, 82, 62, 39, 228, 149, 61, 199, 150, 171, 190, 88, 254, 153, 190, 70, 248, 164, 62, 175, 165, 118, 191, 111, 36, 191, 62, 133, 112, 100, 62, 110, 212, 19, 190, 252, 143, 142, 190, 13, 187, 108, 190, 146, 168, 172, 189, 242, 243, 13, 62, 19, 57, 0, 62, 104, 245, 6, 62, 167, 233, 193, 61, 132, 91, 11, 191, 120, 30, 145, 62, 235, 229, 49, 190, 226, 136, 249, 60, 100, 226, 170, 60, 51, 11, 53, 190, 53, 99, 137, 62, 176, 111, 36, 62, 57, 160, 217, 60, 26, 152, 224, 62, 2, 59, 218, 61, 183, 236, 244, 190, 193, 63, 163, 191, 62, 248, 134, 62, 41, 15, 137, 62, 111, 211, 227, 61, 8, 154, 97, 189, 24, 209, 44, 62, 235, 50, 60, 189, 21, 178, 0, 190, 60, 122, 187, 190, 130, 91, 168, 189, 209, 100, 139, 62, 190, 125, 72, 61, 241, 8, 209, 187, 12, 125, 9, 190, 198, 176, 98, 190, 47, 66, 155, 61, 120, 138, 170, 190, 69, 175, 90, 62, 78, 56, 5, 62, 103, 35, 42, 63, 203, 237, 251, 190, 115, 38, 22, 62, 25, 119, 158, 62, 172, 131, 139, 62, 219, 50, 13, 191, 212, 180, 99, 62, 56, 188, 72, 190, 138, 98, 63, 189, 186, 185, 134, 62, 98, 207, 4, 61, 45, 30, 77, 62, 228, 92, 141, 190, 177, 150, 186, 191, 63, 185, 94, 62, 99, 189, 203, 190, 82, 86, 123, 191, 19, 215, 22, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 244, 146, 61, 15, 7, 28, 62, 198, 39, 112, 62, 20, 38, 173, 189, 250, 47, 207, 62, 184, 41, 203, 61, 72, 169, 11, 62, 112, 227, 51, 61, 92, 13, 229, 188, 236, 158, 236, 189, 172, 48, 149, 62, 168, 121, 74, 62, 224, 80, 179, 62, 254, 13, 217, 189, 208, 116, 154, 62, 32, 180, 66, 190, 185, 48, 53, 190, 71, 92, 156, 189, 26, 45, 178, 62, 154, 194, 80, 190, 219, 209, 132, 62, 245, 17, 10, 190, 134, 25, 178, 61, 143, 79, 9, 62, 77, 228, 11, 61, 179, 242, 89, 61, 120, 213, 178, 61, 2, 174, 31, 190, 205, 60, 35, 190, 196, 207, 40, 62, 74, 189, 12, 62, 171, 13, 66, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 210, 192, 62, 31, 125, 100, 191, 184, 64, 235, 190, 33, 91, 162, 61, 206, 80, 185, 60, 137, 62, 150, 189, 202, 201, 196, 190, 78, 18, 93, 191, 176, 137, 68, 63, 176, 101, 218, 189, 245, 97, 21, 189, 129, 227, 251, 190, 212, 176, 87, 191, 46, 40, 127, 62, 11, 151, 246, 61, 204, 64, 8, 191, 30, 180, 245, 62, 46, 112, 124, 63, 204, 200, 186, 190, 162, 80, 94, 61, 153, 40, 81, 190, 194, 2, 94, 191, 44, 211, 112, 191, 27, 235, 131, 191, 103, 122, 68, 191, 187, 169, 44, 62, 71, 54, 21, 63, 187, 52, 215, 62, 120, 42, 109, 191, 160, 207, 53, 63, 67, 142, 67, 63, 253, 101, 128, 191, 92, 9, 145, 190, 7, 223, 168, 190, 170, 115, 144, 188, 39, 222, 2, 190, 125, 102, 180, 190, 160, 62, 104, 61, 200, 90, 129, 62, 206, 233, 7, 190, 100, 26, 74, 60, 237, 158, 148, 61, 113, 59, 210, 190, 119, 110, 238, 62, 227, 237, 102, 61, 228, 21, 196, 190, 49, 174, 82, 191, 33, 239, 64, 62, 146, 236, 234, 61, 97, 220, 231, 62, 41, 227, 120, 190, 227, 0, 141, 60, 104, 47, 128, 190, 208, 145, 185, 62, 114, 57, 164, 62, 43, 175, 73, 62, 149, 53, 82, 62, 12, 57, 139, 189, 240, 50, 239, 62, 168, 132, 199, 61, 161, 83, 168, 190, 167, 128, 44, 61, 36, 16, 110, 189, 13, 77, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 74, 174, 60, 95, 0, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {169, 14, 144, 190, 97, 58, 249, 61, 143, 237, 101, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 237, 176, 63, 97, 228, 166, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0061/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}