// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 52, 41, 191, 149, 193, 123, 63, 123, 169, 95, 190, 73, 181, 133, 62, 116, 84, 1, 63, 152, 167, 19, 191, 253, 110, 50, 63, 229, 30, 198, 62, 71, 110, 209, 190, 22, 125, 44, 191, 57, 220, 116, 188, 115, 112, 138, 62, 165, 193, 123, 62, 127, 75, 209, 61, 249, 132, 228, 190, 207, 174, 141, 61, 251, 244, 252, 62, 222, 159, 245, 61, 139, 102, 156, 62, 238, 119, 186, 62, 142, 94, 181, 61, 44, 125, 135, 189, 61, 78, 1, 191, 185, 166, 22, 190, 36, 211, 206, 62, 10, 44, 77, 62, 167, 222, 211, 190, 226, 153, 10, 63, 102, 150, 123, 190, 228, 241, 206, 188, 222, 83, 51, 63, 196, 134, 169, 62, 46, 105, 149, 62, 123, 138, 147, 62, 22, 53, 203, 190, 76, 157, 219, 62, 49, 3, 129, 190, 214, 12, 38, 62, 135, 57, 10, 62, 119, 168, 14, 191, 222, 235, 197, 190, 19, 175, 174, 189, 167, 8, 213, 62, 110, 13, 91, 61, 76, 116, 126, 62, 152, 148, 167, 189, 4, 166, 49, 191, 31, 71, 181, 62, 93, 113, 144, 62, 250, 171, 30, 62, 69, 67, 65, 62, 97, 110, 239, 189, 50, 39, 89, 191, 140, 63, 174, 62, 197, 132, 165, 62, 64, 127, 188, 62, 2, 104, 175, 62, 208, 108, 9, 191, 3, 49, 34, 191, 147, 180, 155, 62, 246, 111, 187, 62, 31, 249, 224, 62, 78, 84, 179, 62, 172, 58, 141, 190, 247, 219, 137, 61, 158, 175, 16, 63, 92, 175, 37, 190, 78, 134, 209, 189, 221, 72, 9, 63, 155, 100, 219, 62, 73, 80, 185, 62, 247, 26, 140, 189, 107, 155, 194, 190, 84, 128, 247, 62, 163, 207, 48, 62, 103, 250, 40, 191, 152, 26, 86, 63, 100, 157, 22, 191, 73, 191, 161, 62, 130, 97, 205, 61, 154, 76, 4, 191, 248, 12, 145, 62, 13, 137, 61, 191, 17, 240, 179, 190, 11, 163, 239, 190, 65, 31, 110, 63, 212, 113, 232, 190, 45, 149, 254, 190, 142, 225, 64, 191, 0, 235, 148, 190, 6, 157, 3, 191, 138, 124, 136, 190, 152, 100, 18, 62, 50, 246, 30, 191, 250, 143, 249, 190, 224, 255, 219, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 108, 195, 190, 240, 222, 38, 191, 239, 27, 42, 190, 60, 68, 19, 61, 182, 44, 239, 189, 44, 236, 249, 62, 13, 170, 8, 61, 192, 174, 16, 63, 161, 83, 101, 190, 138, 102, 170, 190, 29, 195, 121, 61, 43, 168, 60, 190, 130, 179, 35, 63, 221, 107, 2, 63, 125, 153, 254, 190, 183, 241, 2, 191, 128, 208, 208, 190, 223, 37, 158, 62, 183, 61, 6, 191, 100, 51, 5, 190, 216, 157, 29, 190, 215, 80, 213, 62, 238, 82, 7, 63, 70, 214, 6, 63, 109, 183, 131, 62, 128, 225, 142, 189, 88, 137, 35, 62, 253, 68, 176, 189, 214, 215, 39, 188, 56, 3, 74, 63, 17, 96, 165, 61, 54, 2, 187, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 0, 72, 190, 106, 14, 112, 62, 165, 16, 245, 61, 98, 192, 28, 189, 206, 189, 153, 188, 161, 51, 25, 62, 8, 94, 70, 190, 201, 207, 140, 62, 246, 150, 174, 61, 85, 195, 115, 61, 12, 37, 22, 190, 100, 14, 188, 60, 70, 72, 204, 189, 180, 45, 187, 186, 119, 60, 121, 190, 181, 116, 31, 62, 63, 203, 133, 190, 84, 62, 126, 62, 12, 158, 150, 190, 206, 106, 8, 62, 100, 59, 75, 190, 166, 26, 233, 61, 239, 230, 130, 61, 52, 95, 149, 62, 220, 92, 210, 189, 100, 206, 42, 189, 96, 27, 194, 189, 66, 143, 199, 62, 200, 186, 74, 190, 231, 213, 48, 61, 140, 124, 20, 62, 129, 243, 42, 60, 189, 169, 127, 190, 150, 109, 10, 61, 112, 120, 154, 62, 89, 216, 157, 61, 249, 38, 26, 189, 118, 58, 55, 62, 121, 8, 105, 62, 166, 64, 190, 60, 146, 129, 13, 188, 192, 119, 17, 61, 88, 227, 69, 62, 13, 173, 148, 190, 77, 3, 132, 188, 173, 223, 228, 189, 166, 40, 246, 189, 205, 2, 70, 190, 180, 142, 220, 189, 108, 183, 142, 190, 232, 252, 22, 188, 182, 224, 130, 190, 245, 116, 155, 189, 148, 156, 78, 61, 90, 26, 134, 189, 23, 17, 218, 61, 220, 202, 42, 190, 50, 177, 56, 190, 114, 211, 72, 61, 95, 110, 17, 190, 118, 29, 111, 190, 77, 21, 30, 190, 230, 153, 56, 190, 24, 32, 2, 189, 235, 109, 249, 189, 152, 108, 71, 62, 244, 197, 253, 61, 234, 34, 222, 189, 150, 45, 28, 190, 111, 237, 208, 61, 155, 150, 86, 62, 161, 39, 55, 190, 139, 238, 142, 186, 153, 99, 85, 61, 77, 102, 140, 62, 115, 72, 142, 188, 157, 242, 9, 62, 117, 121, 130, 190, 229, 96, 135, 61, 100, 116, 254, 61, 138, 129, 26, 189, 143, 233, 59, 189, 243, 101, 115, 189, 42, 30, 20, 62, 8, 197, 19, 61, 47, 181, 136, 61, 152, 89, 5, 62, 41, 205, 166, 62, 51, 25, 5, 190, 254, 56, 249, 189, 131, 4, 14, 61, 64, 127, 32, 58, 137, 18, 227, 190, 87, 108, 241, 190, 209, 252, 178, 189, 32, 61, 16, 189, 242, 202, 56, 189, 213, 156, 235, 61, 42, 166, 125, 61, 189, 221, 230, 189, 253, 130, 154, 61, 238, 99, 60, 61, 57, 157, 24, 62, 100, 158, 121, 189, 253, 93, 83, 189, 9, 253, 90, 61, 213, 104, 218, 60, 94, 8, 20, 62, 252, 239, 93, 61, 3, 59, 176, 189, 88, 77, 48, 62, 112, 145, 48, 190, 157, 115, 74, 61, 246, 174, 11, 190, 0, 49, 33, 62, 96, 255, 7, 60, 77, 86, 20, 190, 116, 73, 207, 189, 171, 169, 39, 190, 71, 232, 35, 190, 70, 33, 34, 62, 3, 205, 19, 190, 67, 60, 198, 61, 154, 13, 11, 62, 24, 108, 135, 189, 141, 139, 233, 189, 18, 208, 163, 61, 34, 159, 1, 62, 66, 200, 74, 61, 243, 171, 175, 61, 126, 45, 44, 190, 41, 164, 73, 189, 122, 14, 227, 189, 120, 5, 14, 189, 219, 91, 195, 188, 174, 240, 245, 189, 91, 3, 235, 189, 135, 6, 12, 190, 106, 111, 221, 61, 110, 208, 158, 189, 244, 137, 207, 61, 157, 205, 45, 62, 204, 181, 160, 59, 184, 180, 150, 189, 82, 4, 87, 189, 73, 199, 146, 189, 124, 155, 24, 189, 152, 189, 44, 190, 78, 101, 139, 61, 171, 100, 20, 62, 14, 210, 53, 62, 82, 173, 0, 62, 105, 12, 201, 61, 198, 159, 146, 60, 87, 206, 9, 62, 31, 70, 198, 188, 22, 92, 81, 62, 69, 53, 177, 189, 178, 63, 215, 61, 135, 151, 176, 189, 61, 170, 45, 188, 101, 191, 161, 189, 238, 45, 186, 60, 78, 220, 182, 189, 209, 161, 16, 190, 46, 177, 229, 189, 152, 217, 1, 190, 156, 156, 167, 60, 200, 218, 170, 188, 35, 220, 182, 189, 35, 156, 7, 188, 115, 107, 30, 190, 159, 20, 81, 190, 49, 33, 64, 61, 4, 81, 54, 189, 195, 108, 159, 189, 20, 190, 159, 189, 95, 239, 2, 188, 251, 67, 116, 189, 230, 187, 70, 189, 36, 167, 217, 188, 66, 92, 18, 188, 30, 201, 177, 61, 76, 217, 74, 190, 190, 151, 47, 190, 191, 109, 152, 189, 158, 96, 55, 189, 88, 20, 245, 188, 84, 191, 201, 61, 113, 192, 25, 188, 229, 123, 190, 189, 204, 207, 55, 61, 158, 196, 137, 62, 31, 182, 158, 190, 98, 35, 45, 189, 99, 101, 58, 190, 235, 166, 3, 62, 225, 35, 67, 61, 155, 146, 135, 62, 203, 32, 84, 189, 223, 209, 158, 190, 254, 102, 51, 189, 172, 143, 94, 62, 224, 53, 79, 62, 109, 51, 17, 62, 102, 106, 134, 60, 154, 16, 8, 62, 39, 79, 50, 62, 102, 170, 49, 190, 132, 53, 98, 61, 7, 219, 187, 60, 193, 233, 20, 189, 157, 217, 148, 188, 152, 24, 33, 62, 168, 225, 204, 60, 248, 89, 7, 62, 239, 60, 44, 190, 191, 31, 132, 62, 67, 243, 162, 59, 0, 199, 191, 190, 50, 15, 147, 61, 89, 215, 192, 189, 78, 212, 178, 189, 182, 194, 117, 187, 4, 143, 252, 188, 44, 145, 26, 62, 243, 167, 52, 190, 63, 8, 4, 62, 249, 128, 2, 62, 159, 48, 19, 62, 184, 237, 45, 60, 110, 99, 0, 190, 130, 168, 146, 189, 75, 75, 123, 189, 222, 89, 42, 190, 186, 61, 176, 189, 42, 29, 104, 61, 24, 111, 61, 189, 218, 221, 40, 62, 82, 152, 239, 61, 233, 119, 11, 62, 108, 26, 27, 190, 209, 39, 13, 190, 172, 138, 25, 61, 135, 137, 16, 188, 251, 48, 5, 190, 129, 148, 118, 189, 211, 104, 173, 61, 231, 198, 35, 61, 115, 17, 171, 189, 91, 153, 168, 61, 18, 172, 36, 62, 230, 210, 12, 190, 208, 83, 51, 190, 142, 203, 131, 60, 23, 21, 149, 189, 170, 20, 120, 189, 183, 165, 211, 189, 71, 68, 17, 190, 57, 163, 0, 190, 45, 0, 133, 61, 62, 61, 246, 189, 222, 91, 31, 189, 24, 243, 7, 62, 124, 241, 237, 61, 146, 206, 2, 62, 60, 254, 44, 62, 248, 40, 21, 189, 239, 204, 48, 189, 203, 203, 127, 60, 70, 224, 31, 190, 120, 221, 93, 60, 85, 40, 195, 189, 10, 100, 230, 60, 142, 2, 187, 188, 241, 40, 145, 189, 62, 40, 15, 190, 7, 33, 132, 61, 231, 154, 210, 188, 197, 239, 97, 189, 106, 52, 30, 62, 62, 238, 233, 61, 67, 47, 61, 189, 76, 81, 5, 190, 41, 214, 213, 60, 41, 107, 143, 189, 233, 198, 188, 189, 200, 9, 132, 61, 170, 46, 160, 61, 149, 86, 136, 61, 231, 32, 6, 190, 253, 37, 198, 61, 1, 233, 193, 189, 185, 163, 169, 187, 145, 102, 62, 60, 17, 76, 231, 189, 62, 232, 57, 61, 253, 34, 32, 190, 212, 218, 38, 190, 24, 62, 197, 61, 103, 217, 76, 189, 167, 234, 101, 189, 229, 158, 126, 61, 101, 79, 193, 61, 47, 165, 27, 190, 37, 147, 216, 189, 97, 68, 246, 189, 224, 128, 135, 60, 188, 180, 140, 189, 114, 23, 53, 61, 47, 101, 169, 61, 75, 20, 36, 190, 212, 130, 50, 61, 186, 90, 214, 61, 150, 170, 161, 189, 146, 152, 253, 189, 96, 230, 9, 190, 85, 117, 34, 62, 163, 117, 83, 189, 156, 62, 49, 190, 255, 17, 96, 61, 229, 200, 59, 190, 40, 227, 212, 61, 36, 111, 232, 189, 121, 39, 77, 190, 181, 0, 126, 189, 96, 249, 184, 188, 201, 196, 232, 189, 231, 204, 132, 189, 71, 20, 153, 189, 84, 81, 114, 62, 159, 233, 219, 189, 61, 196, 55, 62, 122, 195, 253, 189, 79, 46, 225, 61, 68, 137, 133, 189, 24, 94, 60, 60, 147, 148, 201, 189, 175, 83, 136, 60, 60, 197, 178, 189, 82, 100, 24, 62, 117, 52, 161, 61, 197, 36, 205, 188, 78, 17, 201, 62, 81, 138, 45, 62, 191, 3, 240, 60, 187, 72, 62, 60, 160, 102, 158, 61, 20, 186, 140, 187, 131, 108, 134, 190, 30, 233, 137, 61, 196, 81, 58, 62, 64, 98, 167, 62, 137, 198, 169, 190, 67, 81, 249, 188, 141, 247, 219, 189, 202, 168, 209, 189, 224, 151, 66, 62, 142, 23, 177, 62, 249, 45, 237, 188, 146, 21, 158, 190, 74, 34, 19, 190, 130, 14, 139, 62, 62, 65, 86, 61, 233, 216, 124, 61, 117, 193, 105, 189, 212, 154, 1, 190, 128, 28, 63, 62, 110, 35, 9, 62, 255, 51, 62, 190, 153, 223, 220, 61, 179, 78, 96, 61, 194, 158, 178, 189, 98, 193, 238, 59, 21, 232, 141, 61, 163, 26, 53, 62, 159, 170, 1, 62, 24, 234, 136, 62, 151, 99, 180, 61, 206, 177, 221, 190, 141, 89, 32, 62, 33, 135, 45, 190, 51, 236, 214, 61, 219, 211, 72, 190, 38, 250, 131, 62, 126, 206, 133, 60, 154, 241, 49, 190, 232, 142, 33, 61, 208, 251, 56, 190, 238, 227, 86, 62, 80, 236, 4, 62, 253, 234, 214, 189, 38, 205, 123, 190, 181, 141, 219, 61, 60, 38, 26, 62, 66, 12, 205, 189, 144, 74, 55, 62, 29, 74, 192, 61, 170, 143, 117, 61, 56, 33, 59, 190, 178, 91, 232, 189, 132, 251, 157, 190, 0, 102, 144, 61, 110, 92, 145, 190, 179, 0, 141, 189, 175, 203, 6, 190, 64, 227, 59, 61, 6, 178, 171, 61, 206, 2, 240, 189, 42, 222, 96, 62, 159, 215, 106, 189, 3, 231, 155, 190, 53, 5, 145, 62, 212, 117, 11, 61, 83, 173, 29, 189, 183, 127, 3, 190, 98, 79, 3, 62, 156, 64, 7, 62, 198, 210, 8, 190, 79, 26, 3, 190, 71, 124, 177, 189, 90, 137, 40, 62, 91, 96, 59, 59, 176, 167, 39, 189, 189, 153, 138, 61, 152, 179, 145, 61, 1, 245, 63, 188, 60, 204, 132, 60, 107, 72, 12, 190, 162, 145, 22, 190, 176, 107, 93, 189, 28, 28, 170, 61, 59, 238, 44, 190, 240, 56, 245, 58, 122, 73, 180, 188, 253, 57, 136, 189, 110, 193, 84, 188, 245, 22, 217, 189, 141, 245, 98, 185, 66, 250, 229, 189, 172, 16, 72, 189, 43, 250, 141, 60, 226, 36, 147, 61, 143, 254, 159, 189, 175, 111, 138, 189, 98, 55, 47, 61, 65, 166, 33, 61, 105, 196, 208, 60, 130, 216, 82, 190, 208, 247, 39, 59, 174, 91, 102, 62, 49, 1, 124, 189, 184, 114, 79, 62, 152, 34, 47, 190, 253, 84, 20, 190, 98, 211, 113, 62, 89, 217, 243, 61, 49, 40, 107, 62, 163, 122, 249, 189, 192, 181, 167, 188, 246, 163, 47, 61, 175, 65, 50, 62, 5, 83, 116, 190, 224, 86, 67, 58, 124, 85, 3, 190, 147, 104, 94, 62, 176, 26, 10, 190, 204, 253, 145, 61, 129, 115, 126, 189, 109, 58, 192, 61, 142, 52, 65, 189, 167, 71, 17, 187, 104, 178, 71, 189, 30, 217, 198, 189, 7, 230, 200, 61, 226, 17, 31, 62, 166, 225, 103, 190, 194, 177, 147, 61, 49, 228, 247, 61, 172, 175, 224, 61, 216, 71, 4, 62, 18, 68, 197, 61, 126, 85, 53, 60, 33, 139, 76, 60, 23, 74, 70, 190, 208, 197, 197, 188, 108, 244, 129, 61, 126, 195, 182, 189, 193, 250, 6, 60, 133, 242, 69, 190, 15, 108, 14, 189, 39, 164, 9, 62, 29, 192, 114, 61, 51, 124, 145, 61, 166, 105, 70, 189, 221, 130, 18, 190, 176, 164, 49, 62, 188, 172, 38, 189, 42, 136, 8, 190, 37, 68, 4, 59, 221, 222, 46, 62, 191, 165, 185, 188, 205, 117, 172, 188, 147, 32, 185, 61, 38, 76, 2, 62, 28, 112, 247, 61, 16, 162, 241, 61, 98, 110, 216, 60, 247, 81, 217, 61, 122, 108, 83, 189, 91, 135, 45, 61, 187, 232, 198, 61, 171, 148, 159, 190, 9, 195, 99, 62, 137, 45, 158, 60, 169, 195, 10, 190, 49, 134, 59, 62, 25, 97, 80, 61, 55, 162, 222, 189, 238, 102, 177, 61, 245, 167, 180, 62, 202, 34, 44, 62, 197, 135, 185, 189, 89, 138, 65, 189, 242, 54, 30, 61, 104, 187, 208, 189, 228, 216, 252, 61, 179, 227, 233, 61, 45, 109, 208, 187, 111, 103, 156, 62, 1, 5, 162, 61, 85, 172, 142, 62, 64, 230, 14, 190, 22, 215, 178, 189, 23, 192, 242, 61, 67, 37, 225, 61, 120, 209, 235, 189, 242, 215, 133, 189, 104, 172, 9, 62, 140, 27, 158, 62, 233, 25, 250, 189, 91, 55, 141, 62, 52, 236, 102, 188, 154, 187, 75, 62, 141, 58, 133, 190, 243, 118, 120, 190, 89, 90, 67, 188, 145, 97, 6, 61, 0, 78, 6, 61, 119, 236, 248, 61, 177, 223, 167, 189, 244, 68, 175, 61, 31, 216, 60, 190, 18, 56, 43, 190, 138, 113, 10, 62, 225, 204, 178, 189, 61, 127, 131, 61, 23, 223, 146, 60, 56, 162, 254, 59, 8, 148, 223, 189, 130, 126, 51, 187, 163, 74, 32, 190, 59, 143, 56, 189, 141, 209, 34, 62, 111, 197, 237, 189, 227, 89, 134, 189, 85, 160, 227, 61, 196, 201, 144, 190, 245, 53, 231, 189, 57, 204, 9, 189, 167, 195, 28, 189, 142, 255, 211, 190, 218, 221, 142, 190, 183, 122, 155, 62, 235, 201, 47, 62, 18, 68, 243, 61, 107, 96, 6, 62, 106, 109, 54, 190, 5, 138, 237, 189, 89, 157, 174, 189, 62, 207, 7, 189, 36, 15, 70, 62, 227, 243, 162, 60, 213, 46, 223, 189, 108, 241, 74, 190, 115, 238, 9, 61, 20, 73, 30, 61, 55, 170, 211, 61, 218, 204, 75, 62, 165, 155, 140, 189, 13, 116, 148, 59, 201, 49, 215, 61, 179, 39, 117, 190, 25, 1, 30, 61, 114, 151, 43, 190, 167, 208, 239, 189, 224, 200, 76, 62, 48, 198, 185, 61, 4, 64, 83, 189, 145, 234, 220, 62, 5, 152, 220, 61, 180, 18, 103, 62, 159, 77, 130, 61, 212, 88, 128, 190, 104, 240, 57, 61, 17, 94, 70, 190, 169, 26, 196, 189, 149, 34, 169, 189, 22, 90, 136, 189, 38, 1, 102, 60, 117, 88, 172, 61, 40, 167, 230, 187, 39, 157, 78, 190, 243, 177, 22, 61, 28, 44, 89, 188, 88, 33, 198, 189, 108, 70, 171, 189, 197, 252, 131, 189, 154, 121, 57, 189, 226, 144, 10, 62, 82, 130, 31, 62, 135, 240, 176, 60, 209, 202, 18, 189, 68, 211, 151, 188, 158, 75, 29, 190, 9, 36, 13, 188, 100, 101, 35, 190, 59, 207, 121, 189, 132, 117, 196, 60, 81, 97, 216, 188, 76, 214, 152, 61, 250, 241, 210, 61, 62, 150, 56, 190, 251, 167, 251, 61, 66, 40, 134, 188, 80, 138, 205, 189, 221, 229, 64, 190, 18, 151, 95, 61, 29, 184, 167, 61, 218, 62, 197, 189, 212, 196, 40, 62, 204, 146, 117, 190, 91, 207, 91, 186, 26, 129, 63, 60, 17, 26, 105, 61, 230, 182, 242, 188, 225, 255, 168, 62, 44, 112, 77, 61, 242, 103, 149, 189, 232, 192, 2, 61, 163, 152, 110, 62, 143, 5, 6, 62, 164, 91, 145, 61, 88, 222, 131, 189, 110, 11, 64, 190, 31, 212, 67, 62, 229, 149, 38, 190, 176, 184, 204, 189, 112, 32, 243, 189, 4, 140, 228, 60, 111, 94, 111, 189, 53, 249, 4, 190, 9, 21, 80, 62, 12, 17, 104, 62, 121, 154, 140, 61, 47, 190, 111, 62, 119, 30, 215, 61, 217, 80, 155, 190, 202, 58, 227, 61, 142, 36, 203, 189, 18, 102, 77, 61, 182, 146, 20, 190, 243, 215, 14, 61, 51, 68, 137, 61, 143, 124, 5, 62, 141, 194, 193, 61, 57, 162, 45, 62, 24, 16, 147, 61, 97, 151, 208, 61, 54, 121, 196, 189, 116, 68, 53, 189, 131, 183, 142, 61, 84, 53, 218, 188, 50, 28, 252, 60, 73, 193, 158, 189, 15, 21, 113, 190, 184, 59, 17, 190, 38, 134, 36, 189, 123, 106, 28, 62, 168, 56, 148, 60, 98, 200, 82, 61, 51, 142, 132, 61, 23, 131, 33, 62, 40, 200, 150, 60, 152, 54, 3, 62, 45, 251, 159, 188, 121, 229, 219, 189, 53, 142, 35, 61, 6, 219, 39, 62, 186, 147, 70, 60, 252, 88, 125, 188, 130, 111, 145, 188, 201, 30, 1, 190, 30, 99, 246, 189, 58, 213, 123, 62, 220, 163, 11, 61, 23, 231, 152, 190, 25, 69, 49, 62, 159, 34, 167, 61, 7, 144, 86, 62, 123, 27, 93, 62, 250, 153, 53, 189, 97, 142, 162, 190, 106, 232, 127, 61, 183, 209, 140, 62, 208, 67, 224, 189, 86, 13, 31, 61, 49, 209, 249, 61, 124, 101, 215, 61, 189, 26, 249, 60, 206, 181, 253, 187, 227, 55, 194, 190, 104, 67, 163, 189, 135, 26, 130, 190, 107, 109, 2, 62, 73, 81, 135, 189, 132, 200, 147, 189, 101, 155, 21, 62, 93, 85, 114, 62, 166, 183, 51, 62, 8, 193, 67, 190, 211, 240, 80, 190, 27, 247, 165, 60, 166, 99, 218, 188, 111, 211, 3, 62, 95, 199, 200, 189, 254, 211, 96, 61, 15, 142, 206, 61, 201, 46, 8, 190, 55, 152, 246, 189, 177, 172, 58, 60, 155, 156, 104, 61, 134, 190, 33, 60, 6, 112, 51, 190, 181, 109, 14, 62, 180, 123, 178, 186, 30, 248, 134, 189, 21, 232, 2, 190, 104, 172, 28, 190, 121, 61, 155, 61, 28, 106, 67, 190, 225, 24, 47, 62, 37, 254, 27, 190, 12, 170, 151, 189, 59, 170, 17, 62, 19, 69, 131, 59, 113, 77, 252, 61, 200, 145, 166, 189, 89, 238, 156, 189, 37, 210, 56, 190, 83, 202, 51, 61, 196, 185, 49, 190, 210, 244, 145, 189, 134, 211, 107, 189, 140, 165, 46, 190, 215, 249, 47, 61, 160, 170, 153, 61, 118, 51, 144, 189, 59, 197, 229, 187, 217, 205, 15, 190, 22, 183, 2, 189, 59, 160, 11, 62, 25, 150, 230, 189, 60, 38, 215, 61, 32, 150, 101, 189, 236, 61, 31, 189, 107, 28, 69, 61, 2, 208, 229, 61, 118, 156, 12, 62, 220, 181, 61, 62, 18, 237, 48, 61, 58, 59, 222, 189, 113, 24, 78, 189, 170, 201, 26, 62, 97, 198, 43, 190, 44, 21, 197, 189, 254, 241, 60, 60, 124, 212, 0, 61, 3, 26, 17, 190, 169, 195, 25, 61, 235, 218, 169, 189, 148, 155, 179, 189, 160, 136, 243, 189, 212, 5, 135, 189, 3, 101, 37, 190, 58, 37, 91, 60, 119, 84, 37, 61, 8, 94, 0, 189, 213, 122, 170, 61, 208, 16, 45, 62, 147, 217, 204, 190, 55, 56, 28, 60, 245, 143, 121, 62, 192, 164, 41, 62, 30, 9, 196, 61, 8, 174, 63, 189, 48, 16, 150, 190, 164, 116, 45, 62, 3, 236, 47, 62, 85, 236, 232, 61, 231, 122, 159, 190, 68, 215, 139, 61, 35, 9, 163, 61, 15, 200, 106, 189, 246, 194, 100, 190, 57, 85, 65, 190, 40, 243, 77, 61, 210, 0, 125, 61, 0, 70, 56, 190, 226, 167, 242, 61, 12, 176, 214, 189, 223, 171, 4, 62, 130, 174, 175, 61, 30, 225, 70, 62, 108, 204, 26, 190, 158, 210, 50, 61, 81, 63, 71, 62, 59, 25, 112, 62, 249, 57, 98, 190, 54, 242, 162, 188, 57, 88, 39, 62, 70, 61, 69, 60, 235, 228, 1, 190, 168, 185, 58, 190, 235, 213, 87, 190, 180, 46, 167, 61, 83, 78, 193, 61, 85, 46, 223, 60, 252, 183, 199, 60, 113, 215, 220, 189, 65, 74, 35, 190, 33, 221, 157, 61, 160, 125, 96, 61, 105, 105, 41, 190, 79, 28, 72, 190, 119, 193, 120, 190, 40, 7, 58, 62, 213, 59, 176, 61, 125, 37, 235, 188, 137, 3, 241, 61, 243, 78, 202, 189, 158, 48, 45, 190, 24, 79, 14, 62, 47, 4, 161, 189, 132, 38, 159, 60, 254, 238, 202, 61, 255, 219, 48, 61, 9, 59, 7, 190, 248, 224, 120, 190, 110, 87, 143, 189, 238, 222, 45, 190, 5, 43, 123, 190, 36, 251, 201, 61, 95, 97, 11, 62, 236, 130, 130, 190, 173, 230, 209, 189, 77, 124, 92, 62, 236, 35, 32, 190, 28, 131, 74, 62, 29, 190, 114, 190, 78, 164, 114, 189, 51, 153, 55, 62, 135, 33, 19, 61, 208, 208, 221, 188, 30, 117, 252, 189, 139, 4, 174, 61, 203, 152, 14, 61, 173, 179, 159, 61, 220, 84, 61, 189, 176, 115, 90, 61, 244, 212, 88, 190, 4, 206, 31, 62, 65, 220, 41, 190, 237, 30, 180, 188, 43, 165, 164, 189, 24, 127, 24, 62, 230, 56, 130, 61, 227, 12, 12, 60, 54, 102, 204, 61, 20, 143, 152, 59, 167, 34, 214, 61, 180, 45, 59, 62, 73, 85, 151, 190, 90, 194, 237, 61, 179, 73, 38, 62, 27, 129, 133, 61, 206, 131, 202, 188, 190, 183, 1, 189, 197, 19, 161, 58, 226, 2, 8, 190, 178, 157, 218, 58, 160, 160, 193, 61, 182, 213, 202, 60, 214, 131, 234, 187, 144, 33, 49, 190, 113, 23, 7, 190, 209, 104, 11, 190, 148, 0, 111, 61, 93, 122, 98, 189, 13, 239, 22, 61, 101, 202, 102, 189, 125, 55, 49, 62, 58, 190, 33, 188, 199, 190, 209, 189, 147, 71, 44, 62, 100, 168, 164, 189, 214, 46, 34, 60, 99, 205, 27, 190, 183, 19, 106, 61, 54, 32, 242, 189, 28, 177, 230, 189, 157, 234, 156, 188, 242, 196, 12, 61, 32, 78, 65, 189, 151, 178, 193, 59, 193, 110, 58, 61, 236, 93, 22, 189, 202, 99, 98, 189, 185, 53, 8, 191, 177, 153, 129, 190, 100, 131, 197, 60, 76, 113, 21, 62, 191, 136, 30, 190, 38, 7, 225, 189, 25, 87, 209, 189, 32, 250, 134, 62, 115, 53, 67, 190, 38, 8, 50, 62, 199, 229, 32, 190, 29, 224, 141, 190, 210, 196, 159, 189, 226, 153, 54, 62, 154, 4, 136, 189, 170, 94, 170, 190, 150, 66, 243, 189, 149, 118, 36, 62, 241, 154, 157, 190, 39, 41, 19, 62, 23, 210, 242, 190, 128, 139, 171, 60, 56, 99, 45, 62, 240, 185, 58, 190, 87, 221, 65, 188, 178, 234, 174, 190, 160, 218, 101, 189, 200, 93, 216, 62, 135, 39, 196, 190, 223, 144, 192, 62, 48, 207, 20, 60, 109, 100, 18, 62, 228, 86, 204, 187, 91, 134, 247, 61, 2, 242, 14, 190, 191, 229, 40, 62, 149, 163, 205, 189, 9, 166, 197, 187, 30, 81, 178, 60, 197, 41, 1, 62, 146, 164, 242, 59, 213, 236, 78, 189, 2, 109, 215, 189, 69, 228, 146, 61, 206, 115, 19, 190, 176, 206, 185, 189, 185, 168, 166, 189, 130, 1, 26, 190, 8, 169, 34, 190, 214, 135, 167, 189, 94, 98, 5, 190, 96, 91, 54, 189, 226, 235, 24, 190, 24, 240, 141, 187, 241, 238, 251, 60, 114, 91, 19, 189, 50, 197, 151, 61, 13, 224, 152, 189, 144, 121, 15, 187, 7, 86, 28, 190, 177, 164, 83, 61, 107, 15, 94, 61, 138, 144, 25, 189, 182, 133, 174, 189, 131, 243, 33, 189, 119, 211, 43, 190, 147, 121, 79, 190, 145, 225, 129, 189, 165, 163, 67, 189, 195, 77, 160, 61, 18, 71, 40, 190, 133, 237, 62, 190, 254, 41, 72, 190, 153, 28, 93, 189, 255, 80, 108, 61, 231, 252, 83, 61, 165, 88, 117, 61, 61, 227, 30, 190, 147, 88, 21, 62, 148, 93, 12, 61, 150, 61, 86, 61, 110, 185, 5, 62, 122, 8, 22, 62, 66, 217, 29, 190, 127, 154, 4, 62, 239, 200, 31, 190, 73, 26, 60, 60, 222, 5, 229, 61, 160, 141, 28, 62, 59, 115, 112, 189, 46, 114, 1, 59, 9, 14, 169, 61, 173, 181, 45, 190, 105, 18, 66, 190, 58, 59, 28, 190, 192, 48, 145, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 169, 97, 61, 55, 189, 187, 61, 208, 8, 19, 62, 6, 55, 161, 189, 126, 194, 152, 62, 184, 41, 203, 61, 147, 104, 111, 61, 35, 219, 248, 188, 234, 14, 43, 190, 185, 151, 166, 189, 17, 22, 53, 62, 244, 233, 12, 62, 216, 65, 45, 62, 24, 48, 229, 189, 46, 112, 154, 62, 42, 199, 46, 190, 202, 61, 183, 188, 44, 98, 9, 190, 131, 221, 138, 62, 71, 141, 54, 190, 82, 27, 83, 62, 214, 76, 8, 190, 70, 60, 95, 187, 167, 137, 6, 62, 137, 103, 5, 190, 154, 163, 139, 61, 52, 165, 19, 61, 54, 198, 224, 189, 237, 150, 254, 189, 23, 94, 235, 61, 233, 250, 27, 60, 125, 86, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 15, 198, 61, 193, 167, 149, 190, 229, 187, 143, 190, 132, 19, 160, 61, 142, 129, 138, 189, 137, 62, 150, 189, 79, 100, 1, 190, 224, 185, 37, 190, 203, 25, 24, 62, 128, 65, 177, 188, 242, 61, 160, 189, 233, 111, 146, 190, 222, 57, 144, 190, 146, 70, 237, 61, 30, 219, 62, 62, 188, 23, 176, 188, 149, 95, 115, 62, 4, 171, 45, 62, 250, 115, 165, 190, 8, 91, 111, 61, 171, 136, 77, 190, 249, 99, 179, 60, 250, 252, 99, 190, 110, 171, 246, 189, 160, 180, 4, 189, 4, 179, 201, 61, 186, 130, 195, 61, 153, 45, 234, 61, 228, 83, 14, 189, 231, 18, 40, 63, 220, 243, 5, 61, 113, 4, 6, 61, 138, 116, 7, 190, 23, 88, 17, 190, 134, 59, 157, 60, 72, 25, 9, 190, 176, 147, 26, 190, 160, 62, 104, 61, 46, 161, 24, 189, 105, 198, 250, 61, 74, 71, 57, 189, 87, 114, 215, 61, 168, 132, 176, 189, 171, 240, 223, 188, 223, 0, 46, 189, 166, 75, 187, 61, 105, 56, 99, 190, 24, 193, 246, 60, 244, 43, 164, 189, 22, 24, 32, 62, 177, 40, 139, 190, 72, 109, 141, 60, 143, 168, 74, 190, 253, 233, 12, 62, 4, 225, 62, 62, 225, 12, 131, 61, 182, 10, 135, 189, 6, 173, 148, 189, 247, 184, 202, 61, 188, 45, 246, 188, 177, 37, 74, 189, 64, 223, 145, 61, 74, 254, 31, 62, 168, 44, 57, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 215, 80, 188, 90, 82, 47, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 236, 233, 63, 253, 90, 34, 190, 13, 9, 233, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 123, 245, 190, 22, 203, 125, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0061/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}