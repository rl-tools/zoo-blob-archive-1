// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 165, 221, 190, 49, 255, 168, 62, 204, 223, 223, 190, 249, 250, 163, 61, 173, 49, 35, 63, 129, 182, 20, 191, 84, 98, 21, 63, 79, 255, 5, 63, 85, 21, 1, 191, 180, 174, 50, 191, 174, 23, 55, 63, 20, 67, 75, 62, 244, 0, 204, 62, 230, 207, 109, 61, 210, 180, 200, 190, 246, 101, 186, 189, 208, 233, 50, 63, 118, 13, 73, 61, 182, 249, 188, 62, 81, 3, 42, 63, 223, 130, 25, 62, 129, 176, 241, 188, 105, 254, 10, 191, 58, 234, 200, 189, 214, 254, 159, 62, 17, 196, 96, 62, 135, 218, 232, 190, 26, 2, 102, 63, 25, 119, 4, 191, 84, 104, 237, 61, 192, 190, 45, 63, 103, 117, 87, 63, 62, 234, 148, 62, 134, 149, 72, 189, 25, 59, 130, 190, 239, 240, 227, 62, 199, 125, 128, 190, 215, 210, 168, 61, 20, 174, 183, 61, 253, 39, 8, 191, 154, 37, 58, 191, 232, 97, 176, 189, 88, 72, 25, 63, 41, 94, 162, 62, 239, 235, 72, 62, 229, 217, 48, 191, 255, 36, 105, 191, 187, 137, 156, 62, 59, 123, 0, 63, 230, 223, 199, 62, 40, 115, 35, 62, 201, 234, 44, 62, 15, 93, 39, 191, 182, 73, 242, 62, 48, 88, 154, 62, 128, 71, 124, 63, 157, 67, 173, 62, 83, 248, 125, 190, 218, 157, 109, 189, 110, 109, 13, 63, 73, 159, 181, 62, 232, 159, 109, 63, 9, 103, 190, 62, 156, 124, 32, 190, 172, 138, 161, 63, 135, 0, 4, 63, 245, 250, 88, 189, 107, 164, 33, 63, 182, 164, 10, 63, 88, 238, 229, 62, 12, 45, 174, 62, 207, 149, 133, 189, 226, 250, 143, 190, 75, 119, 105, 63, 116, 235, 136, 62, 104, 199, 251, 190, 165, 33, 196, 61, 229, 155, 85, 191, 93, 238, 178, 61, 12, 11, 138, 191, 52, 136, 171, 190, 121, 146, 35, 63, 233, 119, 136, 191, 224, 47, 164, 190, 205, 153, 75, 190, 23, 49, 200, 62, 95, 113, 52, 191, 4, 63, 251, 190, 255, 84, 128, 191, 2, 96, 84, 190, 202, 7, 30, 191, 122, 2, 177, 190, 244, 222, 65, 62, 25, 195, 195, 190, 254, 62, 232, 61, 140, 14, 20, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 117, 59, 191, 149, 156, 72, 191, 224, 153, 40, 189, 168, 202, 93, 61, 131, 173, 148, 190, 173, 125, 4, 63, 45, 195, 164, 188, 95, 168, 238, 62, 83, 216, 116, 190, 231, 126, 248, 60, 70, 209, 157, 61, 182, 43, 198, 188, 252, 208, 39, 63, 76, 119, 245, 62, 232, 57, 36, 191, 215, 108, 37, 190, 233, 212, 241, 190, 179, 53, 203, 61, 188, 33, 203, 190, 128, 222, 190, 190, 114, 231, 51, 189, 220, 224, 171, 62, 193, 104, 5, 63, 234, 152, 6, 63, 213, 242, 186, 60, 28, 119, 133, 190, 210, 219, 125, 62, 166, 211, 78, 190, 79, 25, 124, 190, 14, 151, 52, 63, 51, 80, 147, 189, 179, 46, 12, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 220, 200, 189, 222, 193, 180, 62, 143, 40, 93, 62, 242, 86, 4, 62, 138, 150, 231, 188, 226, 84, 254, 62, 203, 249, 238, 190, 128, 36, 92, 61, 78, 13, 201, 61, 68, 49, 191, 62, 90, 38, 95, 190, 202, 247, 39, 189, 237, 70, 97, 188, 165, 247, 103, 190, 212, 89, 59, 191, 6, 7, 134, 188, 154, 92, 53, 191, 190, 15, 68, 62, 207, 78, 221, 190, 226, 137, 251, 61, 88, 96, 171, 190, 220, 200, 70, 62, 145, 108, 254, 61, 160, 115, 236, 62, 244, 235, 5, 62, 194, 36, 157, 189, 144, 210, 187, 190, 153, 229, 15, 62, 45, 107, 43, 190, 219, 221, 99, 190, 176, 36, 37, 62, 102, 201, 183, 60, 83, 32, 104, 190, 92, 61, 44, 62, 114, 41, 177, 62, 161, 171, 91, 61, 135, 82, 10, 189, 225, 59, 94, 62, 49, 224, 146, 62, 59, 250, 145, 189, 54, 219, 208, 60, 184, 217, 13, 190, 206, 59, 136, 62, 5, 144, 93, 190, 59, 183, 179, 60, 150, 78, 160, 190, 208, 72, 103, 190, 70, 231, 73, 190, 174, 246, 246, 190, 201, 97, 16, 190, 208, 251, 188, 190, 71, 172, 144, 190, 195, 252, 227, 189, 11, 135, 65, 189, 71, 205, 169, 189, 22, 145, 212, 61, 99, 244, 195, 190, 178, 189, 203, 189, 20, 25, 68, 60, 39, 4, 18, 191, 135, 127, 34, 190, 131, 230, 164, 190, 166, 156, 80, 190, 183, 236, 39, 190, 109, 227, 99, 189, 91, 18, 210, 62, 106, 201, 29, 62, 41, 13, 228, 189, 228, 36, 218, 189, 79, 0, 102, 62, 228, 54, 201, 62, 140, 160, 180, 190, 141, 248, 143, 61, 174, 211, 40, 189, 17, 174, 199, 62, 115, 101, 95, 189, 178, 148, 80, 62, 123, 165, 212, 190, 220, 244, 150, 62, 168, 5, 125, 187, 140, 188, 0, 62, 44, 74, 130, 189, 100, 227, 17, 189, 58, 217, 140, 61, 194, 67, 222, 61, 40, 107, 198, 61, 254, 76, 38, 62, 94, 246, 176, 62, 51, 186, 185, 189, 52, 243, 26, 189, 133, 12, 15, 189, 189, 200, 220, 190, 122, 140, 193, 190, 60, 41, 82, 191, 20, 128, 24, 190, 177, 221, 156, 189, 173, 253, 84, 189, 243, 117, 199, 61, 147, 50, 72, 61, 189, 221, 230, 189, 54, 125, 124, 61, 223, 14, 81, 61, 226, 72, 28, 62, 217, 182, 135, 189, 105, 180, 134, 189, 193, 32, 87, 61, 129, 181, 244, 60, 94, 8, 20, 62, 89, 226, 104, 61, 99, 217, 184, 189, 88, 77, 48, 62, 112, 145, 48, 190, 157, 115, 74, 61, 246, 174, 11, 190, 0, 49, 33, 62, 96, 255, 7, 60, 179, 42, 20, 190, 116, 73, 207, 189, 171, 169, 39, 190, 29, 92, 37, 190, 254, 63, 34, 62, 216, 85, 42, 190, 212, 92, 162, 61, 91, 38, 245, 61, 157, 62, 168, 189, 247, 52, 254, 189, 18, 208, 163, 61, 34, 159, 1, 62, 168, 0, 38, 61, 9, 221, 127, 61, 53, 179, 58, 190, 89, 196, 91, 188, 212, 184, 4, 190, 61, 18, 110, 61, 77, 140, 156, 61, 111, 155, 217, 60, 8, 108, 36, 190, 48, 204, 140, 61, 53, 143, 130, 62, 168, 36, 212, 189, 181, 180, 56, 62, 1, 145, 129, 62, 232, 178, 141, 189, 230, 188, 40, 190, 137, 69, 4, 190, 202, 251, 176, 189, 97, 179, 159, 189, 54, 142, 72, 190, 253, 167, 199, 61, 10, 93, 171, 61, 161, 29, 47, 62, 56, 94, 64, 62, 172, 200, 254, 60, 197, 59, 121, 61, 197, 161, 21, 62, 166, 7, 27, 190, 102, 239, 94, 62, 131, 23, 227, 59, 45, 202, 78, 62, 255, 34, 177, 189, 61, 170, 45, 188, 101, 191, 161, 189, 238, 45, 186, 60, 78, 220, 182, 189, 209, 161, 16, 190, 46, 177, 229, 189, 152, 217, 1, 190, 156, 156, 167, 60, 200, 218, 170, 188, 35, 220, 182, 189, 35, 156, 7, 188, 115, 107, 30, 190, 159, 20, 81, 190, 49, 33, 64, 61, 4, 81, 54, 189, 195, 108, 159, 189, 20, 190, 159, 189, 95, 239, 2, 188, 251, 67, 116, 189, 230, 187, 70, 189, 36, 167, 217, 188, 66, 92, 18, 188, 30, 201, 177, 61, 76, 217, 74, 190, 190, 151, 47, 190, 191, 109, 152, 189, 158, 96, 55, 189, 88, 20, 245, 188, 84, 191, 201, 61, 113, 192, 25, 188, 229, 123, 190, 189, 204, 207, 55, 61, 224, 39, 76, 62, 243, 101, 191, 190, 129, 38, 4, 189, 205, 33, 161, 190, 235, 76, 229, 61, 134, 253, 45, 189, 171, 194, 224, 62, 93, 110, 185, 61, 57, 71, 169, 190, 28, 148, 18, 190, 162, 226, 143, 62, 17, 216, 56, 62, 249, 225, 182, 61, 55, 146, 176, 61, 11, 67, 181, 62, 86, 82, 81, 62, 18, 47, 50, 187, 152, 218, 211, 59, 58, 20, 172, 61, 122, 15, 192, 189, 49, 93, 86, 61, 167, 109, 250, 60, 96, 26, 147, 189, 111, 249, 7, 62, 104, 22, 204, 190, 214, 221, 156, 62, 125, 255, 187, 61, 232, 239, 42, 191, 186, 213, 196, 61, 7, 21, 159, 60, 216, 156, 153, 189, 88, 183, 67, 189, 4, 143, 252, 188, 44, 145, 26, 62, 243, 167, 52, 190, 63, 8, 4, 62, 249, 128, 2, 62, 159, 48, 19, 62, 184, 237, 45, 60, 110, 99, 0, 190, 130, 168, 146, 189, 75, 75, 123, 189, 222, 89, 42, 190, 186, 61, 176, 189, 42, 29, 104, 61, 24, 111, 61, 189, 218, 221, 40, 62, 82, 152, 239, 61, 233, 119, 11, 62, 108, 26, 27, 190, 209, 39, 13, 190, 172, 138, 25, 61, 135, 137, 16, 188, 251, 48, 5, 190, 129, 148, 118, 189, 211, 104, 173, 61, 231, 198, 35, 61, 115, 17, 171, 189, 91, 153, 168, 61, 18, 172, 36, 62, 230, 210, 12, 190, 208, 83, 51, 190, 142, 203, 131, 60, 23, 21, 149, 189, 170, 20, 120, 189, 183, 165, 211, 189, 103, 229, 17, 190, 134, 206, 21, 190, 45, 0, 133, 61, 213, 206, 30, 190, 46, 221, 175, 189, 68, 78, 8, 62, 124, 241, 237, 61, 76, 18, 189, 61, 191, 59, 20, 62, 165, 112, 242, 188, 246, 162, 80, 189, 141, 117, 213, 60, 59, 236, 97, 190, 34, 206, 222, 60, 207, 37, 34, 190, 8, 201, 25, 61, 211, 177, 129, 189, 172, 42, 147, 189, 52, 108, 38, 190, 80, 205, 119, 61, 131, 10, 215, 188, 96, 213, 219, 189, 138, 110, 0, 62, 62, 238, 233, 61, 83, 75, 63, 189, 89, 126, 22, 190, 41, 214, 213, 60, 142, 115, 119, 189, 204, 241, 225, 189, 95, 253, 130, 61, 176, 1, 203, 61, 212, 12, 142, 60, 79, 46, 62, 190, 8, 248, 142, 61, 41, 25, 16, 190, 190, 184, 90, 189, 21, 145, 7, 189, 134, 35, 221, 189, 180, 138, 181, 187, 148, 158, 22, 190, 141, 171, 62, 190, 73, 190, 234, 61, 94, 137, 173, 189, 122, 41, 138, 189, 1, 67, 92, 61, 45, 134, 3, 62, 103, 18, 33, 190, 210, 188, 187, 189, 32, 44, 19, 190, 101, 156, 179, 60, 128, 43, 189, 189, 59, 46, 185, 60, 160, 192, 132, 61, 240, 119, 73, 190, 155, 39, 62, 187, 158, 254, 10, 62, 132, 182, 189, 189, 202, 252, 42, 190, 243, 146, 181, 189, 232, 95, 40, 62, 234, 69, 149, 189, 82, 66, 58, 190, 195, 15, 70, 188, 85, 4, 67, 189, 137, 96, 74, 62, 75, 37, 32, 190, 171, 158, 19, 190, 148, 236, 131, 189, 193, 196, 170, 61, 85, 167, 203, 189, 116, 187, 139, 60, 180, 34, 129, 62, 110, 57, 208, 62, 84, 47, 186, 189, 168, 119, 19, 62, 65, 200, 223, 190, 60, 202, 35, 62, 150, 147, 20, 190, 253, 66, 191, 60, 6, 37, 64, 189, 206, 235, 73, 188, 240, 6, 168, 189, 154, 66, 96, 62, 59, 134, 58, 61, 8, 249, 66, 188, 150, 107, 224, 62, 251, 28, 179, 60, 217, 132, 167, 188, 184, 3, 121, 60, 251, 21, 180, 189, 127, 199, 163, 189, 36, 229, 5, 191, 251, 150, 131, 187, 209, 97, 71, 62, 1, 218, 127, 62, 159, 177, 220, 190, 237, 57, 111, 189, 251, 123, 160, 190, 239, 246, 19, 190, 239, 117, 238, 61, 153, 188, 16, 63, 171, 216, 15, 62, 235, 58, 185, 190, 115, 165, 225, 189, 151, 127, 223, 62, 76, 130, 130, 61, 236, 130, 14, 61, 234, 118, 229, 60, 5, 53, 18, 62, 202, 52, 157, 62, 65, 28, 166, 62, 95, 187, 85, 190, 187, 215, 131, 62, 233, 123, 47, 189, 128, 193, 155, 61, 88, 244, 23, 190, 9, 203, 2, 189, 117, 124, 61, 62, 75, 97, 28, 190, 21, 169, 169, 62, 30, 236, 38, 62, 101, 37, 65, 191, 9, 246, 51, 62, 16, 193, 11, 189, 133, 62, 221, 61, 204, 19, 112, 190, 124, 246, 77, 62, 134, 28, 168, 189, 110, 131, 64, 190, 94, 200, 109, 190, 134, 114, 131, 190, 108, 160, 29, 62, 145, 66, 134, 62, 59, 173, 201, 60, 81, 150, 166, 190, 49, 198, 97, 62, 111, 44, 140, 62, 121, 92, 179, 187, 120, 64, 108, 62, 177, 70, 82, 62, 72, 38, 152, 62, 34, 179, 8, 63, 44, 93, 64, 188, 59, 93, 183, 190, 205, 160, 67, 62, 128, 41, 216, 190, 87, 158, 139, 60, 179, 44, 60, 191, 29, 83, 138, 190, 84, 171, 200, 61, 58, 173, 40, 191, 19, 222, 98, 62, 60, 181, 180, 189, 140, 117, 63, 191, 47, 215, 134, 62, 110, 85, 25, 62, 111, 209, 147, 62, 73, 133, 175, 189, 18, 199, 93, 62, 125, 149, 25, 62, 238, 150, 37, 190, 17, 31, 1, 191, 231, 186, 110, 189, 14, 133, 212, 60, 173, 209, 150, 60, 117, 142, 243, 61, 10, 39, 182, 61, 31, 95, 241, 190, 72, 73, 2, 62, 120, 245, 27, 62, 6, 192, 18, 190, 86, 188, 147, 61, 176, 107, 93, 189, 247, 13, 231, 62, 59, 238, 44, 190, 121, 185, 206, 61, 119, 74, 180, 188, 114, 239, 2, 190, 83, 98, 216, 56, 166, 22, 79, 191, 238, 4, 161, 190, 70, 31, 52, 190, 117, 167, 7, 191, 145, 99, 203, 61, 176, 177, 47, 62, 133, 184, 195, 61, 55, 129, 156, 187, 122, 155, 100, 62, 220, 76, 169, 62, 224, 141, 103, 190, 242, 66, 126, 190, 72, 31, 245, 188, 116, 33, 74, 62, 189, 255, 146, 188, 141, 217, 148, 61, 113, 141, 143, 60, 132, 98, 182, 190, 93, 165, 216, 61, 234, 33, 173, 186, 216, 90, 25, 63, 203, 44, 8, 190, 54, 232, 176, 189, 150, 165, 175, 61, 103, 6, 86, 61, 65, 222, 16, 191, 148, 24, 3, 190, 37, 48, 3, 191, 72, 222, 53, 62, 77, 217, 163, 190, 62, 114, 55, 61, 244, 122, 70, 190, 121, 161, 186, 61, 31, 80, 22, 189, 108, 117, 200, 61, 151, 157, 23, 60, 130, 138, 106, 190, 176, 227, 227, 189, 110, 184, 34, 189, 160, 109, 176, 190, 124, 58, 159, 189, 164, 144, 201, 61, 208, 63, 195, 61, 62, 1, 200, 61, 230, 250, 98, 61, 237, 116, 64, 189, 6, 186, 163, 189, 3, 200, 141, 190, 199, 79, 192, 189, 236, 235, 216, 61, 227, 34, 37, 188, 4, 92, 168, 189, 86, 10, 9, 191, 181, 58, 107, 189, 44, 193, 223, 61, 199, 108, 11, 62, 239, 60, 66, 62, 247, 58, 58, 189, 41, 162, 16, 61, 138, 107, 52, 62, 120, 135, 93, 189, 123, 160, 28, 190, 133, 141, 179, 189, 205, 67, 168, 61, 163, 208, 111, 190, 205, 146, 244, 189, 179, 163, 43, 189, 94, 246, 196, 189, 150, 154, 247, 61, 119, 219, 148, 61, 59, 84, 78, 190, 32, 247, 152, 61, 201, 191, 144, 61, 105, 44, 46, 62, 55, 131, 153, 61, 225, 72, 201, 190, 146, 202, 133, 62, 131, 206, 96, 61, 17, 98, 134, 189, 255, 77, 104, 62, 15, 95, 207, 61, 3, 241, 191, 190, 148, 225, 94, 189, 25, 49, 195, 62, 204, 249, 201, 62, 25, 109, 78, 190, 95, 118, 111, 189, 137, 11, 244, 188, 231, 38, 130, 190, 247, 231, 54, 190, 249, 127, 172, 61, 113, 125, 161, 190, 132, 94, 152, 62, 14, 157, 124, 60, 90, 34, 154, 62, 138, 18, 114, 190, 83, 34, 49, 189, 92, 88, 34, 62, 45, 27, 0, 62, 80, 251, 216, 187, 154, 196, 40, 190, 245, 115, 111, 61, 29, 117, 215, 62, 15, 92, 80, 190, 211, 14, 219, 61, 125, 57, 89, 189, 10, 213, 119, 62, 61, 147, 21, 62, 114, 160, 149, 189, 190, 213, 147, 61, 36, 175, 26, 62, 15, 215, 49, 190, 139, 52, 163, 62, 218, 102, 247, 190, 99, 246, 156, 189, 47, 192, 229, 189, 40, 116, 189, 62, 234, 105, 61, 187, 250, 186, 200, 189, 229, 158, 28, 62, 195, 81, 38, 189, 58, 54, 125, 190, 129, 18, 84, 190, 86, 242, 148, 190, 183, 2, 31, 190, 116, 181, 68, 190, 149, 18, 62, 62, 45, 137, 137, 190, 255, 215, 21, 61, 190, 73, 54, 62, 122, 6, 107, 189, 75, 119, 132, 61, 88, 85, 209, 60, 120, 167, 173, 191, 42, 146, 72, 191, 110, 132, 243, 60, 6, 186, 49, 62, 61, 160, 26, 62, 43, 49, 17, 62, 29, 162, 188, 61, 154, 106, 115, 190, 30, 26, 49, 190, 220, 97, 48, 190, 160, 80, 138, 189, 46, 232, 243, 61, 227, 157, 20, 62, 137, 31, 23, 59, 99, 24, 124, 190, 80, 226, 121, 188, 102, 154, 70, 62, 61, 85, 112, 61, 14, 132, 73, 62, 238, 39, 81, 60, 103, 23, 6, 62, 118, 217, 107, 61, 205, 152, 34, 190, 50, 112, 44, 189, 34, 144, 9, 190, 242, 205, 67, 190, 240, 45, 164, 62, 165, 73, 185, 188, 183, 59, 227, 189, 249, 210, 187, 62, 96, 113, 181, 189, 148, 125, 145, 62, 71, 38, 240, 61, 26, 91, 249, 190, 201, 190, 91, 61, 71, 82, 188, 189, 98, 15, 193, 189, 12, 163, 200, 189, 195, 208, 139, 189, 38, 1, 102, 60, 78, 211, 145, 61, 142, 48, 94, 188, 1, 146, 78, 190, 211, 86, 214, 60, 255, 192, 197, 188, 206, 1, 250, 189, 249, 252, 172, 189, 72, 157, 120, 189, 64, 248, 61, 189, 136, 240, 16, 62, 82, 121, 15, 62, 121, 64, 237, 187, 150, 200, 15, 189, 56, 0, 154, 188, 10, 56, 29, 190, 183, 139, 84, 187, 152, 143, 36, 190, 143, 175, 105, 189, 129, 247, 165, 60, 197, 162, 216, 188, 144, 178, 152, 61, 174, 216, 188, 61, 162, 102, 65, 190, 40, 247, 217, 61, 201, 243, 55, 189, 241, 138, 211, 189, 191, 206, 71, 190, 248, 61, 174, 60, 41, 230, 142, 61, 174, 109, 197, 189, 192, 158, 2, 62, 133, 255, 155, 190, 35, 31, 138, 189, 27, 152, 133, 189, 48, 217, 202, 187, 143, 239, 213, 189, 202, 188, 239, 62, 117, 203, 0, 62, 145, 220, 26, 190, 244, 101, 156, 59, 147, 232, 191, 62, 16, 159, 161, 61, 26, 66, 87, 61, 244, 113, 228, 188, 218, 157, 174, 189, 33, 92, 210, 61, 119, 69, 221, 189, 251, 205, 32, 190, 4, 105, 185, 189, 150, 41, 124, 188, 65, 126, 41, 61, 119, 217, 121, 190, 151, 245, 19, 62, 200, 79, 41, 62, 106, 217, 252, 189, 85, 32, 123, 62, 103, 191, 219, 61, 189, 92, 21, 191, 121, 229, 183, 61, 25, 11, 83, 189, 108, 254, 115, 61, 53, 30, 34, 190, 96, 9, 229, 189, 111, 25, 138, 60, 166, 250, 198, 61, 105, 254, 90, 187, 209, 22, 74, 62, 255, 20, 181, 189, 50, 173, 227, 61, 56, 253, 185, 189, 20, 217, 230, 188, 156, 254, 93, 61, 109, 97, 107, 189, 10, 116, 192, 60, 39, 229, 56, 190, 16, 199, 136, 190, 66, 188, 43, 60, 218, 231, 112, 189, 255, 63, 151, 62, 231, 199, 198, 188, 254, 189, 243, 61, 242, 203, 66, 188, 167, 113, 53, 62, 99, 95, 189, 59, 136, 143, 191, 61, 108, 119, 161, 189, 177, 195, 4, 190, 139, 231, 176, 188, 162, 80, 51, 62, 192, 192, 130, 62, 243, 159, 183, 189, 81, 5, 133, 187, 126, 95, 119, 190, 240, 138, 64, 190, 26, 115, 137, 62, 208, 218, 211, 187, 91, 182, 156, 190, 67, 175, 86, 190, 231, 220, 108, 61, 82, 197, 183, 61, 10, 97, 223, 62, 13, 70, 102, 61, 56, 42, 176, 190, 96, 5, 236, 185, 105, 197, 211, 62, 43, 251, 51, 62, 35, 193, 160, 59, 8, 120, 122, 62, 114, 255, 129, 62, 56, 119, 33, 63, 206, 118, 117, 189, 245, 134, 182, 190, 225, 253, 101, 62, 203, 23, 165, 190, 229, 1, 185, 62, 88, 31, 226, 190, 27, 32, 159, 190, 133, 123, 14, 62, 33, 236, 67, 190, 206, 235, 150, 62, 118, 25, 196, 189, 85, 159, 18, 191, 30, 92, 224, 61, 114, 14, 203, 61, 153, 127, 91, 62, 129, 44, 13, 190, 199, 232, 186, 190, 53, 9, 152, 189, 232, 145, 191, 190, 95, 175, 206, 189, 76, 102, 38, 190, 14, 134, 211, 59, 134, 190, 33, 60, 65, 197, 250, 189, 201, 188, 182, 189, 35, 95, 31, 191, 106, 84, 187, 189, 18, 244, 116, 190, 231, 116, 84, 189, 118, 57, 95, 62, 28, 106, 67, 190, 236, 33, 215, 62, 37, 254, 27, 190, 85, 18, 74, 189, 59, 170, 17, 62, 19, 16, 94, 190, 156, 239, 59, 61, 247, 141, 224, 190, 146, 181, 68, 190, 205, 35, 67, 191, 203, 57, 12, 190, 34, 209, 154, 190, 243, 188, 71, 190, 54, 78, 215, 190, 75, 135, 219, 190, 243, 232, 45, 62, 167, 243, 178, 62, 126, 236, 189, 189, 248, 200, 178, 188, 184, 147, 186, 189, 110, 142, 250, 61, 195, 199, 43, 62, 77, 246, 168, 189, 111, 77, 95, 62, 162, 11, 35, 188, 48, 132, 37, 190, 30, 205, 207, 61, 125, 54, 23, 190, 120, 201, 165, 61, 73, 250, 128, 61, 100, 79, 183, 61, 76, 6, 184, 189, 93, 165, 151, 189, 177, 17, 43, 60, 31, 204, 83, 190, 18, 74, 106, 190, 192, 201, 52, 189, 31, 92, 137, 189, 127, 189, 40, 190, 113, 74, 17, 61, 193, 214, 213, 189, 83, 86, 253, 187, 186, 111, 14, 189, 230, 94, 24, 190, 8, 238, 142, 190, 12, 53, 195, 189, 121, 139, 9, 62, 220, 59, 29, 190, 78, 201, 156, 61, 74, 18, 235, 61, 42, 12, 223, 190, 241, 43, 176, 61, 157, 216, 183, 62, 238, 167, 155, 62, 172, 6, 30, 62, 138, 87, 61, 62, 74, 205, 34, 191, 202, 186, 83, 61, 231, 94, 104, 62, 71, 54, 251, 62, 100, 71, 212, 190, 147, 253, 97, 61, 62, 228, 223, 61, 95, 109, 86, 190, 176, 214, 48, 191, 158, 194, 158, 190, 96, 148, 190, 190, 147, 170, 106, 61, 227, 139, 159, 190, 135, 143, 27, 62, 53, 84, 130, 190, 79, 77, 100, 62, 134, 18, 35, 62, 31, 57, 186, 62, 171, 164, 129, 61, 211, 0, 162, 188, 190, 119, 166, 61, 228, 58, 151, 62, 71, 119, 107, 190, 8, 237, 66, 190, 243, 49, 19, 62, 229, 88, 104, 61, 33, 101, 6, 190, 169, 6, 55, 190, 189, 192, 59, 189, 49, 224, 13, 61, 78, 218, 158, 61, 243, 72, 251, 61, 89, 129, 81, 62, 48, 124, 202, 190, 56, 152, 132, 189, 44, 62, 76, 189, 115, 65, 10, 62, 0, 156, 134, 190, 65, 154, 58, 190, 176, 207, 168, 190, 115, 194, 42, 62, 241, 220, 1, 189, 90, 104, 124, 187, 41, 8, 215, 188, 49, 244, 40, 188, 97, 88, 141, 190, 224, 67, 85, 62, 12, 232, 124, 189, 170, 192, 72, 60, 119, 175, 104, 62, 193, 233, 168, 61, 188, 226, 19, 190, 171, 191, 197, 190, 13, 142, 179, 190, 208, 10, 184, 190, 41, 130, 43, 191, 221, 167, 73, 61, 23, 29, 101, 61, 170, 148, 176, 190, 214, 2, 79, 61, 74, 101, 239, 62, 170, 218, 7, 190, 161, 222, 177, 62, 100, 100, 64, 190, 255, 232, 224, 190, 133, 245, 144, 61, 156, 3, 79, 62, 23, 74, 163, 62, 143, 179, 158, 190, 161, 138, 236, 61, 100, 38, 86, 189, 68, 46, 150, 189, 62, 218, 164, 190, 49, 110, 160, 61, 101, 138, 10, 191, 129, 86, 68, 62, 27, 88, 193, 190, 101, 20, 32, 188, 76, 181, 153, 190, 7, 105, 9, 62, 5, 220, 150, 61, 75, 64, 102, 62, 132, 66, 7, 62, 89, 70, 187, 189, 2, 99, 76, 61, 245, 140, 166, 62, 36, 210, 165, 190, 158, 177, 104, 189, 83, 61, 12, 62, 99, 122, 181, 61, 24, 221, 141, 189, 229, 59, 171, 189, 117, 119, 193, 187, 89, 162, 44, 189, 166, 204, 2, 61, 111, 185, 163, 60, 218, 77, 2, 61, 248, 245, 52, 61, 60, 66, 31, 190, 46, 196, 88, 191, 10, 22, 32, 190, 196, 2, 254, 188, 233, 96, 254, 60, 53, 162, 32, 62, 101, 202, 102, 189, 219, 233, 202, 62, 58, 190, 33, 188, 88, 169, 8, 190, 43, 138, 39, 62, 246, 68, 149, 190, 72, 35, 129, 189, 1, 214, 210, 190, 215, 74, 163, 58, 232, 159, 206, 190, 14, 131, 90, 190, 237, 138, 24, 188, 242, 191, 49, 60, 160, 82, 15, 190, 215, 110, 146, 186, 151, 246, 21, 62, 104, 200, 56, 62, 172, 20, 190, 188, 37, 134, 9, 191, 48, 127, 72, 189, 208, 86, 117, 62, 219, 244, 38, 62, 7, 58, 112, 189, 194, 87, 12, 189, 177, 73, 198, 190, 9, 89, 44, 62, 115, 169, 176, 188, 3, 34, 9, 63, 118, 93, 84, 190, 4, 88, 130, 190, 68, 132, 145, 189, 36, 77, 204, 61, 122, 19, 112, 190, 121, 156, 211, 190, 37, 29, 187, 190, 88, 116, 78, 62, 46, 153, 225, 190, 230, 211, 45, 62, 83, 106, 30, 191, 215, 233, 118, 61, 179, 77, 80, 62, 70, 131, 200, 189, 225, 191, 145, 61, 150, 150, 206, 190, 33, 8, 40, 190, 135, 0, 15, 63, 31, 41, 198, 190, 113, 98, 143, 62, 141, 181, 143, 189, 248, 201, 29, 62, 146, 29, 49, 62, 56, 253, 169, 189, 0, 226, 207, 190, 53, 142, 179, 62, 254, 226, 225, 190, 49, 99, 136, 62, 186, 134, 113, 60, 122, 213, 243, 61, 154, 190, 91, 190, 124, 64, 164, 187, 114, 216, 51, 190, 214, 154, 119, 188, 93, 151, 27, 61, 57, 49, 36, 60, 56, 229, 37, 189, 219, 206, 12, 191, 142, 127, 12, 189, 218, 132, 90, 190, 84, 188, 170, 189, 202, 244, 168, 189, 105, 78, 95, 190, 229, 122, 101, 62, 187, 5, 40, 62, 254, 141, 157, 61, 242, 126, 186, 62, 44, 144, 241, 61, 20, 36, 12, 190, 248, 33, 157, 190, 137, 112, 114, 62, 173, 147, 23, 62, 215, 117, 222, 188, 146, 86, 211, 189, 150, 93, 18, 62, 130, 32, 18, 190, 68, 18, 167, 189, 210, 61, 72, 190, 236, 148, 152, 189, 208, 154, 120, 62, 248, 193, 182, 61, 17, 193, 179, 190, 60, 21, 15, 190, 68, 155, 142, 190, 18, 74, 14, 62, 109, 80, 48, 189, 106, 121, 219, 61, 106, 36, 146, 190, 87, 71, 132, 62, 77, 26, 146, 189, 89, 205, 40, 62, 3, 23, 147, 59, 147, 201, 101, 62, 203, 244, 178, 190, 15, 117, 67, 62, 49, 16, 20, 190, 150, 44, 66, 188, 180, 69, 159, 62, 141, 34, 81, 62, 135, 98, 3, 62, 210, 199, 148, 189, 63, 31, 42, 191, 210, 62, 38, 62, 233, 167, 193, 190, 248, 189, 153, 190, 48, 183, 198, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 121, 209, 61, 217, 47, 146, 61, 157, 252, 47, 62, 49, 32, 161, 189, 209, 208, 222, 62, 184, 41, 203, 61, 189, 115, 134, 61, 35, 219, 248, 188, 29, 164, 51, 190, 69, 220, 228, 189, 84, 218, 64, 62, 199, 243, 52, 62, 137, 184, 134, 62, 72, 157, 109, 189, 86, 59, 162, 62, 0, 231, 19, 190, 234, 199, 177, 189, 125, 243, 133, 189, 26, 238, 146, 62, 8, 143, 74, 190, 109, 1, 89, 62, 63, 230, 109, 190, 135, 28, 94, 60, 83, 228, 52, 62, 10, 32, 162, 189, 131, 82, 243, 61, 63, 86, 108, 61, 1, 95, 7, 190, 164, 80, 159, 189, 121, 2, 224, 61, 255, 194, 23, 62, 192, 144, 32, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 119, 151, 62, 125, 49, 188, 190, 252, 234, 222, 190, 57, 202, 162, 61, 161, 172, 4, 61, 137, 62, 150, 189, 25, 60, 108, 190, 224, 185, 37, 190, 21, 88, 117, 61, 131, 109, 218, 189, 196, 48, 156, 189, 57, 17, 1, 191, 61, 63, 53, 191, 188, 173, 74, 62, 75, 15, 43, 62, 38, 16, 177, 189, 133, 253, 149, 62, 105, 130, 27, 63, 226, 250, 180, 190, 74, 198, 94, 61, 48, 125, 115, 190, 62, 65, 175, 189, 144, 22, 246, 190, 150, 166, 51, 191, 23, 75, 9, 189, 104, 194, 173, 62, 113, 151, 45, 62, 239, 95, 158, 62, 253, 194, 189, 190, 8, 112, 69, 63, 75, 61, 23, 63, 30, 45, 73, 190, 148, 18, 20, 190, 68, 200, 130, 190, 222, 239, 77, 189, 51, 253, 2, 190, 6, 227, 124, 190, 160, 62, 104, 61, 235, 151, 169, 61, 105, 198, 250, 61, 142, 242, 184, 188, 85, 157, 148, 61, 68, 104, 132, 190, 159, 65, 196, 61, 54, 99, 202, 189, 154, 166, 79, 189, 152, 66, 147, 190, 91, 226, 188, 61, 231, 78, 5, 60, 213, 145, 66, 62, 119, 181, 141, 190, 38, 13, 141, 60, 240, 28, 136, 190, 96, 142, 58, 62, 231, 168, 160, 62, 219, 224, 252, 61, 35, 172, 107, 61, 46, 217, 203, 189, 190, 18, 164, 62, 54, 137, 143, 61, 133, 226, 6, 189, 232, 171, 195, 60, 203, 207, 22, 62, 214, 41, 3, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 4, 80, 61, 122, 239, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {34, 144, 151, 63, 166, 21, 243, 188, 221, 216, 81, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 67, 168, 191, 43, 244, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0061/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}