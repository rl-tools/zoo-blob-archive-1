// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 124, 214, 190, 177, 151, 142, 62, 14, 107, 205, 190, 71, 57, 12, 62, 225, 152, 40, 63, 74, 27, 15, 191, 228, 227, 20, 63, 163, 28, 13, 63, 163, 239, 255, 190, 96, 15, 56, 191, 26, 47, 65, 63, 237, 109, 106, 62, 95, 16, 232, 62, 141, 81, 250, 187, 151, 75, 186, 190, 252, 56, 148, 190, 3, 9, 102, 63, 235, 132, 211, 60, 218, 95, 171, 62, 45, 219, 77, 63, 67, 40, 32, 62, 254, 7, 77, 59, 101, 167, 76, 191, 12, 175, 193, 189, 193, 217, 177, 62, 248, 180, 130, 62, 15, 118, 222, 190, 179, 197, 101, 63, 150, 38, 27, 191, 221, 21, 154, 61, 51, 15, 33, 63, 54, 112, 117, 63, 253, 236, 157, 62, 136, 162, 203, 189, 151, 232, 91, 190, 46, 252, 217, 62, 79, 87, 172, 190, 42, 219, 44, 62, 247, 198, 160, 61, 162, 206, 27, 191, 127, 66, 105, 191, 48, 201, 139, 189, 127, 72, 45, 63, 140, 250, 163, 62, 173, 56, 60, 62, 65, 64, 40, 191, 222, 234, 102, 191, 183, 3, 145, 62, 133, 238, 253, 62, 243, 243, 181, 62, 222, 134, 52, 62, 159, 134, 74, 62, 168, 43, 62, 191, 17, 56, 6, 63, 240, 93, 182, 62, 134, 103, 144, 63, 88, 3, 187, 62, 247, 29, 143, 190, 175, 4, 72, 189, 230, 75, 37, 63, 170, 225, 147, 62, 143, 32, 141, 63, 241, 14, 192, 62, 128, 221, 20, 190, 15, 206, 172, 63, 31, 221, 254, 62, 215, 109, 114, 189, 91, 206, 50, 63, 229, 91, 217, 62, 201, 133, 171, 62, 178, 177, 180, 62, 107, 151, 139, 189, 54, 17, 110, 190, 71, 168, 156, 63, 20, 29, 131, 62, 235, 12, 59, 191, 181, 97, 79, 61, 166, 25, 77, 191, 185, 169, 177, 61, 137, 60, 164, 191, 207, 88, 206, 190, 22, 108, 49, 63, 69, 207, 152, 191, 46, 91, 164, 190, 154, 12, 78, 190, 15, 169, 121, 62, 39, 36, 47, 191, 92, 62, 215, 190, 166, 119, 153, 191, 174, 84, 147, 190, 194, 38, 63, 191, 111, 88, 62, 190, 24, 67, 31, 62, 120, 229, 91, 190, 202, 79, 212, 61, 79, 174, 21, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 247, 53, 191, 75, 25, 115, 191, 250, 97, 241, 189, 21, 43, 58, 62, 51, 254, 198, 190, 96, 142, 247, 62, 172, 141, 177, 188, 66, 50, 198, 62, 6, 96, 155, 190, 167, 215, 115, 61, 254, 77, 129, 61, 233, 71, 24, 190, 174, 159, 35, 63, 135, 199, 168, 62, 16, 244, 31, 191, 116, 197, 63, 190, 169, 11, 19, 191, 233, 110, 240, 61, 139, 241, 161, 190, 24, 73, 195, 190, 88, 19, 88, 189, 18, 122, 139, 62, 144, 34, 13, 63, 63, 75, 249, 62, 140, 95, 221, 189, 169, 254, 0, 190, 44, 241, 32, 62, 94, 120, 90, 190, 10, 25, 39, 190, 149, 27, 47, 63, 217, 74, 31, 190, 185, 43, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 114, 71, 61, 230, 201, 234, 62, 110, 16, 141, 62, 178, 174, 66, 62, 241, 38, 59, 61, 201, 8, 6, 63, 125, 43, 237, 190, 215, 60, 173, 59, 184, 141, 53, 62, 45, 129, 175, 62, 57, 65, 67, 190, 133, 115, 189, 57, 19, 144, 39, 189, 185, 181, 165, 190, 111, 121, 128, 191, 12, 100, 175, 188, 241, 239, 128, 191, 116, 195, 62, 62, 37, 141, 206, 190, 87, 105, 28, 62, 226, 144, 172, 190, 180, 154, 72, 62, 76, 42, 4, 62, 139, 58, 243, 62, 188, 43, 119, 62, 250, 200, 1, 60, 147, 81, 192, 190, 176, 121, 69, 62, 46, 250, 145, 189, 251, 165, 131, 190, 63, 167, 43, 62, 161, 161, 39, 61, 105, 18, 25, 190, 64, 50, 84, 62, 27, 239, 171, 62, 114, 83, 111, 189, 40, 29, 140, 189, 163, 184, 145, 62, 83, 172, 134, 62, 76, 52, 184, 189, 172, 202, 197, 60, 185, 94, 23, 190, 223, 35, 122, 62, 242, 228, 19, 190, 187, 19, 209, 61, 59, 109, 185, 61, 175, 14, 155, 190, 70, 231, 73, 190, 61, 167, 6, 191, 154, 169, 220, 189, 237, 4, 11, 191, 71, 172, 144, 190, 155, 72, 31, 190, 253, 41, 5, 190, 95, 158, 225, 189, 176, 211, 179, 61, 158, 192, 70, 191, 144, 102, 245, 188, 175, 200, 9, 190, 211, 128, 93, 191, 246, 16, 220, 189, 65, 134, 147, 190, 147, 60, 62, 190, 149, 195, 47, 190, 28, 18, 255, 60, 176, 62, 241, 62, 28, 242, 22, 62, 162, 252, 237, 189, 217, 160, 252, 189, 47, 21, 142, 62, 28, 182, 195, 62, 80, 158, 187, 190, 61, 21, 142, 61, 67, 181, 124, 188, 104, 132, 197, 62, 211, 52, 14, 188, 37, 239, 128, 62, 245, 87, 247, 190, 61, 129, 13, 63, 199, 150, 126, 60, 3, 206, 183, 62, 16, 194, 64, 61, 63, 238, 79, 189, 238, 233, 2, 62, 216, 24, 239, 61, 210, 167, 12, 62, 29, 237, 83, 62, 152, 229, 166, 62, 35, 50, 17, 190, 19, 192, 194, 60, 13, 182, 123, 190, 225, 10, 45, 191, 92, 114, 168, 190, 8, 248, 120, 191, 247, 107, 98, 190, 24, 102, 178, 188, 173, 253, 84, 189, 243, 117, 199, 61, 147, 50, 72, 61, 32, 124, 237, 189, 54, 125, 124, 61, 124, 184, 68, 61, 248, 209, 24, 62, 217, 182, 135, 189, 105, 180, 134, 189, 65, 242, 83, 61, 128, 247, 193, 60, 7, 204, 15, 62, 133, 169, 95, 61, 99, 217, 184, 189, 108, 1, 46, 62, 82, 167, 48, 190, 60, 134, 66, 61, 16, 123, 15, 190, 16, 134, 27, 62, 136, 86, 108, 59, 82, 195, 26, 190, 218, 146, 225, 189, 209, 205, 47, 190, 130, 205, 38, 190, 155, 107, 29, 62, 216, 85, 42, 190, 212, 92, 162, 61, 91, 38, 245, 61, 157, 62, 168, 189, 247, 52, 254, 189, 18, 208, 163, 61, 23, 92, 248, 61, 21, 3, 237, 59, 70, 45, 111, 60, 100, 74, 67, 190, 236, 48, 133, 60, 147, 238, 250, 189, 5, 55, 225, 61, 207, 149, 163, 61, 251, 23, 194, 61, 238, 249, 29, 190, 219, 7, 215, 61, 198, 131, 141, 62, 158, 176, 138, 189, 95, 151, 91, 62, 201, 101, 153, 62, 240, 233, 217, 189, 112, 57, 46, 190, 153, 51, 30, 190, 104, 215, 166, 189, 42, 127, 206, 189, 194, 230, 42, 190, 154, 56, 192, 61, 84, 81, 169, 61, 251, 247, 50, 62, 216, 182, 56, 62, 35, 35, 237, 60, 117, 151, 169, 61, 64, 32, 51, 62, 53, 56, 235, 189, 134, 234, 112, 62, 188, 60, 89, 61, 193, 42, 199, 61, 99, 162, 129, 189, 61, 170, 45, 188, 101, 191, 161, 189, 238, 45, 186, 60, 78, 220, 182, 189, 209, 161, 16, 190, 46, 177, 229, 189, 152, 217, 1, 190, 156, 156, 167, 60, 200, 218, 170, 188, 35, 220, 182, 189, 35, 156, 7, 188, 115, 107, 30, 190, 159, 20, 81, 190, 49, 33, 64, 61, 4, 81, 54, 189, 195, 108, 159, 189, 20, 190, 159, 189, 95, 239, 2, 188, 251, 67, 116, 189, 230, 187, 70, 189, 36, 167, 217, 188, 66, 92, 18, 188, 30, 201, 177, 61, 76, 217, 74, 190, 190, 151, 47, 190, 191, 109, 152, 189, 158, 96, 55, 189, 88, 20, 245, 188, 84, 191, 201, 61, 113, 192, 25, 188, 229, 123, 190, 189, 204, 207, 55, 61, 116, 142, 26, 62, 137, 194, 198, 190, 64, 1, 168, 188, 206, 24, 0, 191, 84, 106, 200, 61, 2, 222, 164, 189, 171, 202, 232, 62, 207, 5, 8, 62, 247, 181, 165, 190, 208, 182, 19, 190, 171, 26, 133, 62, 210, 178, 60, 62, 210, 145, 195, 61, 31, 7, 36, 62, 63, 138, 237, 62, 98, 55, 94, 62, 66, 67, 4, 62, 97, 73, 205, 60, 120, 123, 13, 189, 230, 217, 144, 189, 63, 51, 42, 187, 169, 251, 20, 189, 243, 234, 183, 189, 94, 211, 236, 61, 37, 195, 76, 191, 114, 218, 160, 62, 239, 244, 122, 61, 185, 136, 63, 191, 238, 112, 194, 61, 92, 29, 33, 61, 99, 153, 22, 190, 252, 250, 173, 188, 23, 186, 225, 190, 20, 218, 126, 61, 180, 228, 108, 190, 72, 35, 190, 62, 218, 176, 13, 62, 26, 47, 149, 62, 137, 88, 191, 188, 25, 66, 146, 189, 95, 17, 22, 190, 218, 247, 134, 189, 167, 96, 120, 190, 105, 206, 151, 190, 241, 158, 60, 62, 187, 4, 232, 188, 155, 223, 145, 189, 184, 213, 149, 60, 85, 171, 56, 190, 191, 233, 170, 190, 116, 60, 66, 190, 186, 113, 122, 190, 19, 226, 2, 189, 248, 197, 97, 189, 106, 221, 129, 188, 74, 95, 248, 61, 238, 4, 50, 62, 128, 177, 85, 190, 149, 161, 7, 62, 141, 155, 25, 62, 87, 123, 221, 190, 48, 251, 236, 189, 160, 169, 79, 61, 160, 12, 108, 190, 170, 20, 120, 189, 183, 165, 211, 189, 103, 229, 17, 190, 134, 206, 21, 190, 45, 0, 133, 61, 213, 206, 30, 190, 46, 221, 175, 189, 109, 199, 6, 62, 124, 241, 237, 61, 244, 115, 184, 61, 153, 39, 19, 62, 170, 94, 4, 189, 171, 96, 85, 189, 28, 115, 202, 60, 17, 246, 97, 190, 14, 223, 203, 60, 207, 37, 34, 190, 140, 128, 6, 61, 75, 181, 129, 189, 225, 203, 153, 189, 5, 16, 39, 190, 89, 70, 115, 61, 50, 177, 235, 188, 142, 20, 220, 189, 138, 110, 0, 62, 62, 238, 233, 61, 118, 5, 64, 189, 214, 168, 22, 190, 41, 214, 213, 60, 71, 166, 124, 189, 176, 210, 226, 189, 0, 185, 122, 61, 144, 161, 200, 61, 212, 12, 142, 60, 217, 57, 62, 190, 19, 157, 141, 61, 41, 25, 16, 190, 85, 153, 97, 189, 21, 145, 7, 189, 112, 59, 227, 189, 184, 173, 182, 187, 148, 158, 22, 190, 141, 171, 62, 190, 73, 190, 234, 61, 77, 171, 179, 189, 54, 181, 147, 189, 1, 67, 92, 61, 34, 127, 2, 62, 103, 18, 33, 190, 210, 188, 187, 189, 32, 44, 19, 190, 101, 156, 179, 60, 128, 43, 189, 189, 59, 46, 185, 60, 255, 191, 132, 61, 25, 58, 74, 190, 155, 39, 62, 187, 46, 224, 3, 62, 47, 20, 198, 189, 202, 252, 42, 190, 94, 218, 189, 189, 179, 59, 33, 62, 127, 190, 151, 189, 82, 66, 58, 190, 197, 178, 137, 60, 1, 182, 250, 188, 78, 222, 93, 62, 191, 101, 38, 190, 53, 172, 219, 189, 76, 72, 188, 56, 107, 220, 144, 61, 39, 164, 54, 189, 235, 245, 101, 61, 6, 230, 151, 62, 149, 158, 203, 62, 138, 79, 222, 186, 205, 120, 83, 62, 29, 235, 203, 190, 253, 245, 141, 62, 227, 43, 180, 189, 158, 51, 0, 62, 26, 176, 174, 61, 171, 105, 65, 189, 175, 187, 166, 187, 170, 165, 88, 62, 248, 184, 106, 61, 103, 149, 140, 60, 63, 167, 217, 62, 228, 69, 231, 188, 250, 69, 216, 60, 181, 244, 17, 190, 66, 181, 181, 190, 68, 188, 253, 188, 83, 29, 20, 191, 0, 44, 56, 190, 54, 226, 131, 62, 56, 105, 64, 62, 147, 239, 230, 190, 162, 162, 135, 189, 30, 230, 202, 190, 14, 71, 46, 190, 46, 240, 2, 62, 97, 207, 18, 63, 44, 74, 40, 62, 37, 18, 192, 190, 238, 198, 213, 189, 220, 114, 221, 62, 243, 122, 103, 61, 50, 180, 54, 61, 102, 106, 20, 61, 80, 157, 226, 62, 144, 5, 149, 62, 85, 151, 22, 63, 121, 132, 44, 190, 198, 136, 129, 62, 134, 88, 221, 188, 89, 56, 171, 61, 135, 10, 18, 190, 208, 119, 174, 188, 159, 57, 54, 62, 94, 81, 145, 190, 61, 68, 164, 62, 252, 178, 254, 61, 230, 104, 90, 191, 183, 202, 31, 62, 126, 143, 97, 189, 221, 125, 149, 189, 233, 72, 87, 190, 147, 244, 36, 62, 138, 209, 230, 189, 204, 12, 74, 190, 51, 96, 199, 190, 185, 128, 146, 190, 126, 211, 23, 62, 248, 252, 168, 62, 203, 18, 79, 61, 243, 167, 173, 190, 146, 40, 88, 62, 163, 221, 159, 62, 177, 36, 64, 190, 81, 132, 104, 62, 236, 86, 127, 62, 175, 244, 172, 62, 207, 146, 208, 62, 12, 24, 144, 61, 51, 7, 226, 190, 187, 11, 185, 62, 226, 108, 83, 191, 85, 98, 134, 61, 246, 207, 58, 191, 246, 78, 120, 190, 124, 122, 201, 61, 172, 14, 138, 191, 169, 156, 97, 62, 103, 181, 209, 189, 72, 186, 72, 191, 122, 149, 125, 62, 191, 71, 39, 62, 37, 109, 244, 61, 127, 102, 164, 190, 2, 187, 105, 62, 194, 240, 24, 62, 2, 75, 65, 190, 184, 93, 30, 191, 217, 83, 155, 189, 86, 172, 90, 61, 195, 185, 97, 189, 87, 223, 145, 61, 135, 86, 129, 61, 21, 32, 46, 191, 146, 31, 90, 62, 193, 147, 132, 61, 94, 217, 26, 190, 255, 207, 173, 61, 176, 107, 93, 189, 86, 170, 24, 63, 59, 238, 44, 190, 94, 211, 82, 61, 119, 74, 180, 188, 88, 127, 35, 190, 160, 29, 20, 59, 73, 165, 141, 191, 210, 11, 224, 190, 70, 156, 112, 190, 49, 223, 27, 191, 251, 29, 160, 61, 174, 32, 16, 62, 8, 84, 202, 59, 36, 251, 204, 188, 108, 107, 79, 62, 251, 203, 33, 63, 92, 42, 138, 190, 192, 175, 89, 190, 26, 187, 196, 188, 186, 187, 86, 62, 40, 207, 134, 189, 238, 155, 187, 61, 109, 120, 194, 59, 234, 190, 213, 190, 223, 179, 215, 61, 118, 26, 112, 61, 233, 3, 21, 63, 155, 5, 26, 190, 130, 39, 86, 189, 37, 237, 170, 61, 245, 59, 121, 61, 2, 101, 55, 191, 176, 252, 198, 189, 148, 161, 65, 191, 252, 45, 67, 62, 96, 74, 252, 190, 5, 115, 142, 61, 209, 58, 147, 190, 49, 221, 252, 186, 50, 120, 169, 189, 128, 16, 177, 61, 56, 120, 159, 189, 91, 123, 41, 190, 13, 243, 18, 190, 88, 247, 163, 189, 179, 185, 119, 190, 179, 217, 152, 189, 199, 203, 170, 61, 254, 119, 220, 61, 44, 150, 181, 61, 184, 65, 47, 61, 198, 244, 166, 189, 238, 106, 102, 189, 72, 199, 158, 190, 56, 32, 91, 190, 154, 163, 215, 61, 161, 108, 160, 60, 215, 121, 210, 189, 32, 89, 113, 191, 126, 118, 125, 189, 113, 197, 2, 189, 158, 118, 10, 62, 57, 73, 128, 62, 247, 58, 58, 189, 118, 121, 62, 61, 138, 107, 52, 62, 137, 51, 113, 190, 10, 173, 29, 190, 26, 157, 179, 190, 120, 130, 132, 61, 174, 149, 144, 190, 120, 114, 238, 189, 32, 140, 18, 190, 73, 192, 197, 190, 79, 247, 215, 61, 159, 219, 187, 61, 214, 190, 52, 190, 178, 20, 47, 61, 175, 182, 229, 61, 158, 52, 220, 61, 209, 188, 99, 189, 33, 223, 180, 190, 24, 183, 152, 62, 161, 101, 105, 61, 17, 241, 144, 61, 223, 39, 125, 62, 193, 243, 33, 62, 65, 254, 213, 190, 224, 171, 187, 189, 183, 118, 202, 62, 24, 18, 176, 62, 59, 25, 112, 190, 149, 101, 223, 189, 19, 83, 24, 188, 202, 88, 148, 190, 73, 67, 27, 191, 198, 158, 231, 61, 44, 108, 83, 191, 220, 135, 99, 62, 164, 68, 190, 189, 179, 172, 89, 62, 178, 31, 161, 190, 153, 187, 193, 189, 136, 120, 14, 62, 169, 138, 0, 62, 179, 184, 139, 61, 230, 175, 59, 190, 219, 27, 29, 61, 193, 22, 228, 62, 5, 245, 81, 190, 86, 104, 168, 61, 171, 16, 48, 61, 223, 27, 54, 62, 3, 32, 45, 62, 173, 10, 211, 189, 254, 26, 16, 61, 0, 114, 61, 62, 2, 96, 188, 190, 129, 15, 158, 62, 123, 35, 3, 191, 85, 187, 31, 190, 3, 178, 15, 190, 221, 13, 136, 62, 115, 71, 109, 188, 45, 199, 56, 189, 157, 97, 16, 62, 128, 139, 75, 189, 23, 193, 10, 191, 80, 112, 85, 190, 30, 83, 3, 191, 49, 35, 35, 190, 233, 106, 31, 190, 164, 40, 125, 62, 73, 82, 140, 190, 217, 117, 91, 61, 125, 157, 51, 62, 229, 36, 71, 190, 107, 101, 221, 61, 81, 223, 166, 61, 229, 250, 240, 191, 165, 145, 35, 191, 214, 5, 5, 62, 51, 176, 32, 62, 127, 34, 54, 62, 113, 51, 70, 62, 157, 7, 134, 61, 34, 193, 120, 190, 136, 99, 51, 190, 99, 122, 1, 190, 42, 250, 160, 189, 205, 61, 77, 62, 143, 190, 3, 62, 67, 201, 98, 188, 91, 236, 122, 190, 206, 63, 46, 189, 115, 63, 33, 62, 192, 100, 75, 60, 119, 101, 120, 62, 190, 151, 18, 60, 37, 119, 23, 62, 147, 248, 137, 59, 187, 208, 11, 190, 14, 178, 175, 189, 50, 16, 68, 190, 64, 13, 94, 190, 217, 252, 155, 62, 252, 77, 106, 188, 176, 4, 207, 189, 84, 82, 180, 62, 53, 175, 41, 190, 129, 17, 148, 62, 68, 13, 6, 61, 197, 125, 38, 191, 46, 205, 75, 61, 92, 181, 1, 190, 145, 62, 156, 190, 16, 166, 195, 189, 195, 208, 139, 189, 38, 1, 102, 60, 78, 211, 145, 61, 220, 10, 145, 188, 1, 146, 78, 190, 31, 19, 179, 60, 255, 192, 197, 188, 111, 58, 255, 189, 249, 252, 172, 189, 72, 157, 120, 189, 64, 248, 61, 189, 187, 158, 16, 62, 106, 148, 9, 62, 50, 26, 81, 188, 150, 200, 15, 189, 104, 114, 180, 188, 10, 56, 29, 190, 183, 139, 84, 187, 152, 143, 36, 190, 143, 175, 105, 189, 129, 247, 165, 60, 18, 152, 236, 188, 248, 181, 145, 61, 105, 14, 187, 61, 161, 23, 66, 190, 102, 131, 212, 61, 7, 90, 59, 189, 241, 138, 211, 189, 191, 206, 71, 190, 218, 99, 112, 60, 152, 162, 136, 61, 205, 37, 198, 189, 249, 25, 217, 61, 6, 67, 153, 190, 26, 68, 80, 189, 192, 113, 74, 189, 187, 72, 3, 60, 56, 61, 52, 189, 10, 84, 232, 62, 161, 196, 159, 61, 24, 173, 3, 190, 95, 191, 182, 59, 147, 19, 183, 62, 146, 51, 214, 61, 127, 254, 143, 61, 43, 171, 216, 189, 187, 33, 78, 61, 155, 143, 123, 61, 109, 168, 96, 187, 48, 2, 237, 189, 212, 207, 1, 190, 21, 173, 3, 61, 181, 134, 38, 61, 31, 132, 112, 190, 245, 243, 44, 62, 184, 165, 31, 62, 229, 149, 111, 190, 230, 63, 126, 62, 91, 225, 22, 188, 101, 125, 61, 191, 77, 81, 190, 61, 37, 87, 22, 190, 104, 25, 42, 190, 96, 35, 224, 189, 220, 148, 21, 190, 248, 241, 6, 60, 117, 23, 9, 62, 206, 28, 180, 60, 40, 168, 141, 62, 250, 65, 25, 191, 248, 173, 121, 190, 171, 156, 118, 61, 233, 58, 37, 60, 123, 50, 13, 62, 58, 187, 0, 191, 183, 253, 251, 61, 121, 26, 172, 190, 73, 165, 31, 190, 63, 65, 192, 189, 168, 190, 95, 62, 225, 44, 136, 62, 167, 41, 143, 59, 12, 188, 213, 61, 81, 110, 137, 61, 239, 35, 218, 61, 57, 168, 128, 189, 243, 78, 244, 189, 155, 244, 207, 189, 142, 42, 9, 190, 231, 9, 33, 189, 56, 72, 162, 62, 36, 244, 232, 62, 84, 111, 203, 189, 204, 211, 221, 61, 47, 28, 47, 62, 24, 107, 42, 190, 231, 186, 73, 62, 198, 238, 58, 189, 196, 247, 155, 190, 152, 30, 160, 190, 58, 239, 16, 61, 126, 86, 0, 62, 210, 253, 13, 63, 233, 225, 168, 61, 208, 67, 175, 190, 150, 162, 228, 189, 153, 63, 208, 62, 228, 104, 138, 61, 6, 46, 105, 61, 77, 209, 179, 62, 154, 211, 27, 62, 81, 111, 26, 63, 151, 109, 205, 189, 44, 234, 4, 191, 229, 155, 8, 62, 165, 34, 22, 191, 107, 224, 166, 62, 112, 249, 8, 191, 226, 152, 204, 190, 124, 239, 11, 62, 126, 36, 249, 190, 167, 35, 146, 62, 161, 186, 226, 189, 143, 132, 41, 191, 11, 63, 205, 61, 236, 97, 2, 62, 19, 152, 23, 62, 30, 155, 138, 190, 79, 200, 191, 190, 53, 9, 152, 189, 232, 145, 191, 190, 185, 74, 113, 61, 76, 102, 38, 190, 247, 7, 108, 62, 134, 190, 33, 60, 114, 192, 109, 190, 201, 188, 182, 189, 188, 45, 53, 191, 106, 84, 187, 189, 226, 10, 242, 190, 104, 65, 99, 188, 98, 249, 41, 62, 28, 106, 67, 190, 25, 186, 156, 62, 37, 254, 27, 190, 71, 102, 179, 190, 59, 170, 17, 62, 138, 135, 25, 191, 231, 254, 158, 188, 115, 59, 230, 190, 16, 92, 54, 190, 66, 83, 215, 190, 48, 245, 123, 190, 130, 183, 214, 189, 100, 179, 219, 190, 187, 148, 13, 191, 175, 67, 25, 191, 209, 244, 241, 61, 237, 255, 169, 62, 236, 222, 154, 190, 73, 165, 27, 61, 114, 246, 174, 59, 60, 167, 45, 62, 20, 199, 93, 62, 115, 177, 140, 189, 74, 12, 228, 62, 160, 235, 156, 60, 70, 15, 201, 190, 168, 103, 24, 62, 23, 42, 148, 190, 224, 105, 214, 188, 1, 202, 40, 190, 97, 82, 136, 62, 211, 93, 111, 190, 70, 152, 21, 191, 249, 205, 65, 190, 148, 229, 73, 191, 7, 255, 4, 191, 26, 106, 88, 190, 78, 122, 169, 190, 16, 220, 100, 190, 201, 5, 56, 61, 61, 204, 0, 190, 57, 64, 120, 61, 175, 85, 252, 188, 162, 127, 19, 190, 217, 92, 5, 191, 72, 107, 63, 191, 140, 170, 28, 62, 169, 255, 155, 190, 115, 144, 166, 188, 30, 112, 26, 189, 194, 153, 216, 190, 7, 180, 182, 61, 159, 53, 178, 62, 18, 148, 128, 62, 178, 180, 31, 62, 103, 41, 213, 61, 28, 161, 53, 191, 183, 171, 118, 61, 209, 88, 104, 62, 32, 7, 247, 62, 118, 143, 220, 190, 17, 152, 236, 61, 164, 153, 28, 61, 53, 58, 101, 190, 50, 57, 87, 191, 47, 235, 126, 190, 80, 5, 24, 191, 146, 119, 205, 61, 108, 118, 210, 190, 242, 153, 72, 62, 218, 111, 173, 190, 27, 92, 4, 62, 4, 81, 237, 61, 84, 176, 173, 62, 37, 211, 148, 60, 76, 75, 158, 188, 30, 171, 196, 61, 121, 220, 192, 62, 121, 48, 98, 190, 79, 187, 71, 190, 147, 112, 42, 62, 39, 185, 154, 61, 135, 217, 165, 62, 193, 9, 157, 62, 30, 185, 223, 60, 78, 32, 56, 189, 174, 100, 54, 189, 162, 37, 167, 61, 107, 164, 137, 62, 26, 152, 6, 191, 36, 32, 31, 189, 38, 71, 174, 188, 96, 128, 93, 62, 25, 68, 58, 190, 21, 139, 90, 190, 221, 188, 127, 189, 105, 104, 180, 62, 20, 152, 216, 61, 11, 115, 165, 61, 135, 118, 54, 61, 137, 180, 181, 61, 178, 7, 58, 190, 124, 177, 142, 62, 212, 187, 249, 188, 250, 50, 87, 61, 128, 47, 123, 62, 150, 169, 185, 61, 106, 49, 105, 186, 95, 215, 236, 190, 217, 74, 233, 190, 204, 143, 121, 190, 127, 13, 69, 191, 207, 127, 134, 62, 150, 24, 2, 62, 216, 151, 148, 190, 254, 241, 209, 61, 6, 244, 243, 62, 125, 146, 76, 188, 139, 252, 189, 62, 7, 225, 25, 190, 192, 251, 234, 190, 85, 132, 149, 61, 110, 242, 96, 62, 110, 217, 179, 62, 104, 168, 145, 190, 11, 47, 13, 62, 80, 207, 67, 188, 135, 209, 229, 189, 90, 85, 227, 190, 105, 71, 35, 62, 24, 99, 76, 191, 186, 65, 130, 62, 180, 176, 17, 191, 48, 253, 173, 189, 47, 41, 184, 190, 48, 217, 91, 61, 27, 97, 219, 61, 125, 55, 133, 62, 226, 104, 115, 61, 193, 176, 222, 189, 81, 146, 128, 60, 77, 35, 180, 62, 173, 56, 165, 190, 143, 155, 158, 189, 21, 130, 140, 62, 126, 49, 24, 61, 15, 68, 202, 189, 31, 197, 151, 189, 189, 48, 156, 60, 137, 206, 160, 61, 169, 225, 10, 62, 13, 169, 128, 189, 218, 77, 2, 61, 186, 155, 61, 61, 221, 175, 207, 189, 222, 213, 163, 191, 10, 22, 32, 190, 44, 67, 137, 190, 97, 113, 165, 188, 89, 58, 26, 62, 101, 202, 102, 189, 79, 100, 179, 62, 58, 190, 33, 188, 200, 203, 212, 190, 43, 138, 39, 62, 227, 125, 52, 191, 42, 99, 199, 189, 176, 233, 215, 190, 243, 234, 131, 60, 38, 66, 224, 190, 214, 164, 190, 190, 18, 79, 80, 60, 250, 39, 242, 60, 33, 73, 137, 61, 198, 90, 151, 186, 180, 151, 26, 62, 227, 22, 210, 61, 210, 234, 128, 190, 191, 197, 203, 190, 168, 228, 206, 59, 207, 137, 142, 62, 5, 149, 240, 60, 85, 117, 167, 58, 47, 102, 198, 188, 186, 167, 184, 190, 51, 216, 88, 62, 120, 48, 168, 61, 56, 134, 18, 63, 6, 62, 47, 190, 245, 12, 112, 190, 47, 45, 115, 189, 252, 76, 204, 61, 75, 232, 170, 190, 255, 3, 221, 190, 139, 128, 29, 191, 71, 98, 128, 62, 196, 23, 32, 191, 175, 167, 4, 62, 148, 34, 43, 191, 159, 34, 149, 189, 205, 175, 43, 62, 23, 112, 107, 189, 0, 202, 9, 189, 142, 215, 210, 190, 253, 9, 223, 189, 255, 211, 24, 63, 163, 75, 140, 190, 155, 231, 156, 62, 249, 125, 234, 189, 149, 81, 206, 61, 143, 33, 72, 62, 9, 29, 87, 190, 207, 78, 229, 190, 225, 77, 161, 62, 84, 227, 47, 191, 209, 56, 168, 62, 65, 168, 235, 61, 73, 160, 228, 61, 194, 175, 156, 190, 243, 230, 212, 189, 217, 82, 215, 189, 180, 52, 254, 60, 224, 125, 233, 61, 191, 226, 22, 62, 200, 158, 153, 189, 141, 48, 11, 191, 82, 103, 51, 188, 107, 115, 102, 190, 228, 106, 152, 59, 132, 12, 31, 189, 59, 56, 54, 190, 132, 40, 129, 62, 83, 40, 39, 62, 205, 78, 154, 61, 172, 134, 218, 62, 1, 29, 85, 62, 27, 100, 49, 190, 95, 161, 68, 191, 186, 141, 167, 62, 38, 29, 140, 62, 201, 215, 87, 61, 83, 91, 186, 189, 243, 226, 38, 62, 57, 66, 220, 189, 125, 207, 164, 189, 218, 115, 127, 190, 92, 163, 213, 189, 161, 197, 183, 62, 25, 51, 225, 61, 101, 122, 213, 190, 9, 38, 6, 190, 15, 17, 133, 190, 94, 13, 221, 61, 222, 93, 151, 189, 30, 41, 133, 62, 191, 254, 72, 190, 140, 27, 186, 62, 150, 238, 4, 190, 247, 165, 166, 61, 125, 18, 15, 62, 228, 24, 16, 62, 155, 56, 240, 190, 47, 12, 42, 62, 114, 123, 22, 190, 123, 8, 105, 188, 210, 173, 165, 62, 245, 7, 246, 61, 117, 164, 31, 62, 62, 118, 105, 190, 83, 37, 151, 191, 61, 108, 67, 62, 251, 148, 222, 190, 152, 148, 155, 190, 2, 29, 40, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 167, 160, 61, 244, 105, 187, 61, 223, 236, 66, 62, 51, 233, 165, 189, 89, 213, 240, 62, 184, 41, 203, 61, 213, 61, 170, 61, 57, 253, 78, 61, 242, 150, 53, 190, 236, 158, 236, 189, 77, 58, 99, 62, 95, 117, 73, 62, 87, 174, 142, 62, 11, 142, 239, 189, 100, 60, 159, 62, 45, 121, 39, 190, 43, 220, 193, 189, 63, 48, 242, 189, 134, 199, 154, 62, 154, 194, 80, 190, 209, 138, 95, 62, 28, 127, 95, 190, 235, 137, 70, 61, 104, 23, 62, 62, 124, 143, 15, 61, 77, 49, 155, 61, 98, 218, 65, 61, 34, 96, 212, 189, 141, 182, 235, 189, 211, 82, 16, 62, 19, 170, 75, 62, 127, 225, 59, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 195, 181, 62, 103, 254, 1, 191, 109, 97, 4, 191, 222, 205, 162, 61, 62, 2, 18, 61, 137, 62, 150, 189, 132, 11, 171, 190, 69, 238, 8, 191, 155, 207, 115, 61, 176, 101, 218, 189, 219, 140, 172, 189, 145, 92, 3, 191, 38, 1, 73, 191, 168, 237, 109, 62, 96, 132, 47, 62, 227, 104, 68, 190, 66, 29, 144, 62, 176, 66, 80, 63, 109, 92, 194, 190, 162, 80, 94, 61, 236, 14, 112, 190, 222, 57, 20, 191, 16, 44, 31, 191, 203, 238, 126, 191, 167, 186, 18, 191, 5, 94, 160, 62, 234, 122, 25, 62, 82, 247, 177, 62, 230, 213, 21, 191, 164, 165, 74, 63, 128, 58, 61, 63, 48, 119, 40, 191, 236, 80, 19, 190, 137, 119, 228, 190, 207, 20, 93, 189, 40, 251, 2, 190, 190, 194, 137, 190, 160, 62, 104, 61, 143, 28, 112, 61, 59, 21, 141, 189, 196, 227, 182, 188, 237, 158, 148, 61, 36, 184, 150, 190, 164, 53, 45, 62, 153, 214, 248, 189, 34, 117, 46, 189, 181, 18, 156, 190, 56, 144, 140, 61, 85, 99, 213, 187, 51, 80, 144, 62, 243, 226, 130, 190, 227, 0, 141, 60, 161, 141, 128, 190, 71, 10, 15, 62, 193, 226, 172, 62, 68, 46, 48, 62, 108, 162, 70, 61, 217, 84, 196, 189, 1, 217, 226, 62, 164, 169, 143, 61, 36, 47, 60, 189, 195, 137, 133, 61, 87, 7, 128, 61, 54, 171, 242, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 23, 66, 61, 104, 103, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {193, 148, 78, 62, 198, 219, 128, 191, 89, 236, 32, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 149, 253, 63, 119, 127, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0061/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}