// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 200, 217, 60, 160, 237, 115, 189, 47, 9, 99, 62, 240, 76, 158, 60, 237, 210, 155, 62, 154, 161, 97, 190, 73, 214, 162, 62, 233, 7, 85, 62, 247, 34, 124, 61, 210, 31, 157, 62, 71, 225, 131, 190, 218, 153, 18, 190, 8, 253, 8, 62, 4, 219, 76, 62, 11, 118, 52, 190, 66, 154, 2, 63, 100, 195, 225, 190, 105, 231, 153, 189, 252, 96, 204, 190, 228, 219, 40, 190, 1, 128, 92, 190, 215, 74, 239, 190, 66, 137, 192, 62, 44, 169, 12, 63, 2, 175, 175, 62, 10, 136, 228, 62, 185, 162, 142, 190, 233, 228, 114, 60, 25, 76, 128, 190, 20, 88, 161, 190, 5, 255, 245, 61, 202, 242, 184, 62, 76, 226, 136, 190, 84, 39, 186, 62, 19, 145, 17, 61, 155, 130, 163, 62, 216, 29, 244, 62, 17, 84, 85, 190, 123, 102, 166, 190, 62, 153, 17, 63, 28, 153, 142, 62, 61, 39, 84, 190, 250, 192, 184, 62, 112, 232, 139, 62, 127, 13, 204, 62, 72, 95, 35, 190, 97, 131, 104, 190, 51, 29, 214, 60, 217, 138, 171, 60, 39, 118, 118, 190, 216, 178, 142, 190, 93, 112, 236, 62, 129, 20, 3, 191, 223, 201, 136, 62, 251, 74, 233, 190, 218, 34, 14, 190, 147, 146, 203, 190, 203, 208, 17, 191, 58, 251, 248, 62, 15, 151, 9, 62, 66, 41, 11, 191, 159, 82, 136, 190, 192, 107, 250, 190, 74, 110, 33, 190, 252, 70, 235, 62, 2, 15, 10, 191, 47, 228, 244, 190, 216, 248, 55, 62, 87, 110, 217, 59, 68, 129, 1, 191, 6, 99, 121, 190, 16, 23, 83, 62, 247, 211, 83, 190, 222, 163, 86, 61, 179, 178, 158, 190, 183, 133, 157, 189, 240, 255, 12, 63, 232, 54, 138, 190, 50, 99, 137, 62, 31, 210, 181, 190, 102, 159, 42, 62, 221, 183, 223, 62, 95, 59, 168, 189, 5, 218, 214, 62, 80, 123, 142, 190, 215, 60, 16, 63, 113, 202, 33, 190, 145, 218, 13, 191, 91, 20, 191, 190, 145, 166, 155, 189, 228, 15, 10, 63, 140, 187, 153, 190, 199, 201, 210, 190, 80, 212, 168, 62, 254, 103, 10, 191, 164, 148, 181, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 157, 19, 191, 42, 133, 15, 62, 228, 203, 56, 190, 8, 105, 215, 188, 18, 247, 98, 62, 217, 34, 239, 189, 2, 159, 100, 62, 141, 24, 130, 190, 167, 176, 18, 63, 80, 89, 3, 62, 139, 141, 155, 62, 175, 199, 223, 190, 237, 74, 187, 62, 209, 79, 13, 191, 4, 33, 249, 62, 111, 14, 23, 190, 56, 7, 255, 62, 48, 220, 189, 62, 51, 36, 197, 190, 122, 3, 131, 190, 212, 90, 162, 190, 125, 69, 62, 189, 63, 251, 6, 63, 235, 149, 247, 190, 59, 227, 9, 63, 128, 42, 15, 63, 153, 82, 111, 190, 101, 87, 151, 62, 61, 155, 29, 190, 219, 93, 166, 62, 195, 133, 130, 190, 125, 220, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 60, 12, 189, 112, 68, 38, 62, 110, 201, 242, 189, 162, 80, 43, 190, 120, 88, 50, 59, 60, 53, 4, 62, 45, 126, 46, 190, 211, 132, 45, 62, 140, 34, 219, 61, 103, 241, 43, 62, 203, 129, 83, 61, 141, 238, 210, 189, 102, 231, 194, 188, 133, 133, 64, 187, 58, 247, 254, 61, 129, 22, 110, 61, 80, 200, 145, 61, 31, 159, 95, 189, 157, 23, 223, 189, 50, 221, 238, 189, 133, 162, 23, 190, 196, 176, 8, 190, 140, 84, 12, 62, 252, 41, 23, 190, 176, 252, 45, 62, 188, 141, 103, 60, 68, 124, 101, 189, 15, 110, 3, 190, 5, 181, 16, 190, 133, 15, 167, 61, 32, 8, 184, 189, 28, 5, 237, 61, 178, 121, 0, 190, 89, 194, 173, 189, 251, 134, 166, 189, 180, 140, 4, 190, 77, 166, 9, 190, 23, 78, 72, 189, 25, 117, 216, 61, 45, 91, 235, 61, 94, 225, 227, 186, 231, 199, 254, 61, 79, 160, 54, 189, 216, 73, 44, 62, 26, 4, 134, 61, 165, 149, 197, 189, 240, 239, 184, 189, 248, 142, 223, 61, 148, 124, 92, 61, 137, 110, 218, 188, 178, 60, 39, 62, 115, 204, 228, 189, 78, 22, 156, 61, 197, 171, 68, 60, 48, 88, 5, 190, 211, 213, 202, 189, 104, 10, 64, 189, 171, 197, 154, 61, 186, 97, 49, 190, 222, 131, 5, 62, 148, 135, 145, 61, 217, 76, 8, 188, 142, 157, 41, 190, 73, 177, 9, 189, 22, 162, 45, 62, 235, 105, 13, 190, 43, 120, 44, 61, 241, 1, 0, 190, 54, 65, 44, 62, 164, 32, 10, 190, 71, 55, 234, 189, 125, 192, 42, 62, 179, 153, 84, 189, 237, 62, 16, 190, 158, 106, 0, 190, 91, 222, 50, 62, 136, 248, 249, 189, 211, 31, 163, 189, 238, 191, 8, 190, 214, 76, 3, 190, 216, 171, 7, 190, 219, 251, 214, 189, 29, 12, 46, 189, 39, 18, 110, 60, 227, 3, 180, 189, 12, 40, 32, 190, 157, 74, 4, 60, 213, 167, 107, 189, 94, 172, 30, 60, 216, 121, 10, 62, 145, 167, 52, 62, 190, 48, 29, 190, 45, 254, 205, 189, 91, 78, 26, 190, 146, 56, 11, 190, 5, 36, 248, 188, 154, 31, 40, 62, 222, 39, 117, 189, 243, 23, 166, 189, 35, 36, 216, 189, 106, 203, 183, 59, 75, 237, 3, 190, 221, 244, 42, 190, 179, 38, 254, 189, 82, 104, 186, 189, 226, 176, 131, 61, 29, 204, 174, 189, 20, 243, 236, 189, 194, 133, 235, 59, 204, 30, 233, 189, 47, 34, 13, 189, 84, 83, 57, 60, 64, 17, 208, 189, 245, 154, 24, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 250, 200, 35, 190, 143, 143, 27, 190, 226, 73, 5, 62, 23, 200, 226, 189, 252, 37, 70, 60, 124, 203, 237, 188, 177, 37, 16, 61, 165, 106, 159, 188, 186, 243, 228, 188, 87, 188, 21, 62, 75, 64, 147, 189, 42, 22, 185, 60, 140, 246, 97, 60, 35, 111, 9, 190, 83, 107, 66, 189, 41, 219, 13, 190, 102, 179, 22, 190, 75, 91, 175, 187, 188, 177, 14, 190, 244, 239, 236, 189, 94, 213, 219, 61, 85, 180, 225, 189, 165, 93, 87, 60, 61, 42, 55, 189, 153, 83, 161, 61, 111, 245, 253, 189, 27, 125, 151, 61, 69, 229, 214, 61, 226, 229, 209, 60, 210, 142, 201, 59, 204, 187, 18, 62, 135, 38, 95, 189, 54, 15, 102, 61, 165, 253, 12, 60, 99, 42, 226, 60, 73, 192, 22, 62, 127, 130, 254, 61, 116, 195, 23, 190, 184, 29, 253, 189, 116, 182, 167, 189, 36, 153, 43, 61, 201, 92, 40, 190, 111, 20, 136, 61, 134, 152, 5, 190, 27, 19, 153, 60, 7, 219, 200, 61, 206, 193, 130, 61, 157, 75, 236, 60, 44, 102, 144, 61, 54, 182, 191, 189, 182, 143, 178, 60, 31, 140, 124, 61, 176, 181, 176, 59, 28, 94, 1, 62, 47, 189, 245, 189, 223, 183, 78, 58, 101, 57, 48, 62, 37, 31, 24, 189, 148, 248, 50, 190, 91, 124, 20, 190, 37, 120, 135, 189, 224, 219, 38, 190, 21, 119, 55, 189, 153, 223, 188, 189, 166, 74, 163, 188, 44, 126, 29, 62, 51, 15, 236, 61, 0, 76, 230, 61, 136, 215, 30, 190, 133, 186, 135, 60, 68, 172, 9, 190, 56, 223, 158, 189, 153, 119, 236, 61, 68, 128, 156, 189, 112, 22, 35, 190, 60, 105, 154, 188, 9, 99, 58, 188, 69, 48, 150, 61, 179, 7, 43, 61, 29, 179, 169, 188, 162, 126, 180, 61, 218, 15, 27, 190, 28, 109, 43, 190, 173, 183, 98, 189, 114, 3, 173, 189, 85, 218, 229, 60, 251, 213, 134, 189, 191, 193, 175, 61, 187, 49, 17, 190, 228, 106, 11, 190, 26, 5, 153, 189, 236, 196, 105, 61, 219, 91, 232, 60, 5, 207, 0, 62, 55, 198, 207, 189, 30, 199, 162, 61, 137, 95, 242, 61, 255, 231, 57, 189, 249, 222, 19, 62, 143, 221, 255, 189, 147, 104, 141, 188, 52, 34, 24, 62, 112, 156, 41, 190, 39, 55, 28, 61, 157, 117, 250, 58, 188, 81, 108, 189, 87, 3, 105, 189, 41, 22, 220, 189, 120, 33, 30, 62, 182, 171, 178, 188, 38, 63, 138, 61, 18, 16, 209, 188, 18, 138, 119, 189, 94, 219, 26, 61, 95, 205, 172, 61, 76, 224, 208, 59, 126, 163, 253, 59, 230, 246, 102, 188, 139, 0, 63, 189, 202, 27, 193, 61, 105, 77, 2, 62, 146, 46, 162, 60, 65, 158, 54, 61, 241, 16, 28, 62, 56, 173, 7, 61, 96, 125, 3, 190, 164, 107, 128, 189, 49, 127, 95, 61, 150, 97, 73, 189, 213, 72, 138, 189, 214, 178, 140, 61, 13, 64, 103, 189, 213, 224, 96, 61, 207, 113, 26, 189, 175, 48, 36, 190, 78, 208, 170, 189, 216, 208, 73, 61, 161, 172, 169, 61, 178, 245, 41, 59, 131, 229, 204, 61, 253, 179, 251, 187, 135, 37, 92, 189, 101, 193, 252, 59, 18, 200, 232, 189, 230, 97, 169, 189, 146, 229, 2, 62, 113, 55, 254, 189, 224, 98, 162, 61, 18, 211, 177, 61, 130, 98, 19, 190, 162, 175, 222, 188, 245, 57, 163, 189, 80, 7, 183, 61, 177, 132, 12, 62, 88, 2, 227, 61, 120, 109, 179, 61, 147, 19, 142, 189, 87, 5, 128, 61, 181, 133, 27, 190, 2, 49, 96, 61, 167, 8, 225, 188, 229, 93, 90, 61, 30, 23, 233, 61, 144, 54, 17, 62, 118, 138, 189, 61, 251, 144, 35, 190, 99, 152, 199, 189, 102, 74, 211, 60, 72, 123, 15, 61, 118, 177, 158, 61, 241, 231, 7, 62, 97, 226, 140, 61, 228, 168, 90, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 23, 38, 35, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 19, 124, 91, 189, 175, 77, 214, 189, 18, 102, 237, 189, 248, 11, 19, 190, 36, 197, 10, 190, 139, 46, 94, 189, 24, 77, 17, 62, 59, 68, 251, 61, 93, 159, 217, 61, 197, 100, 5, 62, 195, 140, 30, 190, 14, 211, 14, 190, 115, 240, 5, 190, 177, 186, 29, 61, 135, 0, 26, 190, 228, 62, 196, 189, 236, 174, 128, 189, 69, 101, 156, 60, 16, 152, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 194, 200, 33, 62, 178, 37, 37, 190, 233, 55, 241, 61, 164, 193, 193, 60, 12, 251, 252, 61, 112, 46, 0, 61, 209, 205, 254, 189, 209, 146, 20, 190, 90, 15, 188, 189, 225, 111, 124, 189, 136, 222, 191, 61, 227, 247, 18, 190, 111, 205, 186, 61, 154, 36, 158, 187, 67, 205, 24, 190, 131, 118, 34, 62, 247, 134, 152, 60, 183, 146, 17, 61, 236, 138, 50, 62, 251, 9, 44, 190, 170, 142, 15, 62, 176, 141, 13, 62, 201, 30, 5, 62, 89, 17, 59, 189, 252, 209, 207, 188, 231, 54, 101, 60, 226, 68, 159, 60, 234, 15, 161, 61, 173, 133, 48, 190, 8, 103, 197, 61, 28, 181, 40, 60, 193, 185, 51, 62, 43, 171, 182, 61, 52, 173, 64, 60, 23, 14, 113, 60, 218, 56, 20, 62, 95, 31, 157, 188, 51, 253, 168, 61, 79, 16, 50, 190, 45, 41, 210, 189, 223, 223, 119, 189, 21, 80, 157, 61, 231, 66, 47, 62, 61, 109, 141, 61, 153, 150, 187, 189, 155, 126, 163, 189, 23, 39, 36, 60, 6, 48, 203, 61, 126, 64, 225, 61, 143, 89, 38, 62, 130, 108, 51, 62, 148, 155, 28, 62, 36, 192, 169, 61, 62, 250, 132, 61, 220, 217, 8, 190, 48, 162, 186, 188, 101, 99, 189, 187, 17, 211, 180, 61, 11, 12, 164, 61, 99, 9, 148, 189, 45, 78, 117, 189, 214, 226, 68, 60, 105, 6, 185, 61, 2, 150, 196, 189, 97, 191, 235, 189, 214, 180, 233, 188, 9, 43, 126, 189, 243, 138, 124, 61, 184, 154, 92, 188, 76, 140, 210, 188, 184, 78, 152, 61, 69, 94, 218, 61, 42, 33, 233, 189, 248, 214, 225, 189, 226, 189, 21, 189, 114, 166, 55, 61, 31, 173, 19, 62, 118, 69, 14, 190, 92, 10, 222, 61, 48, 158, 241, 188, 149, 205, 246, 188, 167, 219, 123, 189, 167, 28, 174, 187, 83, 226, 20, 62, 59, 1, 233, 189, 74, 181, 22, 190, 190, 149, 1, 190, 210, 141, 181, 61, 217, 54, 103, 61, 202, 227, 26, 62, 18, 248, 46, 62, 144, 212, 7, 190, 224, 55, 231, 61, 81, 4, 150, 188, 185, 245, 40, 62, 93, 234, 245, 189, 53, 2, 4, 190, 69, 181, 191, 189, 243, 171, 84, 61, 89, 218, 163, 61, 219, 68, 210, 61, 67, 192, 230, 189, 235, 99, 20, 189, 200, 237, 136, 189, 35, 27, 245, 189, 89, 192, 220, 189, 237, 103, 2, 59, 243, 235, 19, 190, 25, 232, 21, 55, 62, 236, 25, 62, 93, 86, 19, 190, 248, 15, 54, 61, 227, 150, 226, 187, 56, 123, 203, 61, 193, 84, 59, 61, 151, 170, 57, 61, 100, 108, 139, 189, 250, 1, 175, 189, 8, 101, 152, 189, 125, 63, 235, 189, 6, 124, 47, 190, 59, 118, 33, 62, 122, 195, 24, 190, 122, 144, 161, 61, 9, 242, 115, 61, 122, 234, 132, 61, 115, 83, 139, 61, 151, 128, 230, 187, 150, 189, 216, 61, 217, 133, 20, 189, 247, 108, 197, 61, 141, 202, 28, 190, 13, 231, 178, 61, 230, 56, 11, 190, 193, 90, 82, 189, 199, 76, 241, 189, 22, 219, 109, 60, 202, 73, 56, 61, 78, 241, 134, 189, 200, 1, 170, 189, 151, 53, 67, 189, 250, 193, 30, 62, 203, 46, 128, 60, 121, 80, 115, 189, 138, 138, 76, 61, 200, 115, 67, 189, 133, 201, 9, 190, 198, 17, 44, 62, 9, 208, 195, 59, 172, 28, 204, 60, 126, 31, 32, 62, 216, 30, 26, 62, 61, 12, 167, 189, 13, 90, 34, 190, 70, 72, 29, 61, 178, 92, 12, 62, 255, 109, 173, 60, 225, 0, 15, 62, 141, 97, 232, 189, 96, 58, 178, 60, 245, 113, 17, 62, 132, 43, 52, 60, 179, 49, 178, 189, 24, 115, 122, 189, 203, 223, 239, 61, 180, 154, 65, 189, 146, 223, 191, 60, 0, 224, 24, 62, 199, 87, 146, 188, 152, 153, 154, 189, 122, 241, 47, 62, 104, 53, 85, 189, 233, 166, 37, 190, 211, 42, 15, 189, 81, 26, 27, 62, 141, 102, 6, 62, 41, 239, 222, 61, 51, 214, 244, 189, 220, 118, 156, 188, 18, 5, 154, 60, 228, 119, 172, 189, 38, 169, 193, 189, 181, 83, 128, 189, 151, 250, 234, 61, 214, 208, 171, 61, 103, 207, 45, 61, 226, 169, 149, 61, 172, 187, 193, 188, 77, 247, 154, 189, 37, 64, 125, 187, 65, 89, 218, 61, 155, 131, 161, 61, 243, 184, 211, 61, 176, 149, 23, 62, 15, 19, 145, 60, 77, 99, 85, 189, 13, 65, 39, 62, 112, 154, 43, 62, 1, 109, 8, 62, 39, 147, 234, 61, 161, 159, 76, 189, 36, 208, 129, 61, 239, 206, 117, 61, 120, 123, 142, 189, 74, 17, 176, 189, 192, 35, 137, 61, 49, 92, 168, 61, 12, 138, 3, 189, 42, 8, 10, 62, 149, 128, 38, 189, 196, 55, 14, 190, 207, 248, 151, 189, 112, 127, 48, 62, 39, 102, 18, 190, 89, 102, 227, 189, 134, 68, 228, 189, 22, 115, 38, 190, 82, 212, 51, 189, 56, 74, 186, 188, 82, 239, 1, 188, 65, 84, 49, 57, 2, 71, 97, 60, 147, 150, 5, 190, 205, 81, 19, 62, 172, 229, 169, 189, 230, 184, 21, 62, 130, 181, 20, 190, 185, 125, 34, 62, 185, 93, 2, 62, 35, 82, 164, 59, 96, 66, 11, 62, 251, 7, 69, 189, 204, 80, 213, 61, 17, 107, 16, 62, 9, 250, 1, 62, 95, 201, 181, 188, 30, 86, 31, 61, 9, 21, 164, 61, 62, 209, 12, 190, 84, 39, 141, 189, 65, 198, 17, 190, 182, 69, 230, 189, 43, 249, 82, 59, 19, 102, 60, 60, 195, 49, 6, 190, 179, 239, 191, 61, 24, 58, 91, 61, 148, 171, 220, 61, 22, 78, 33, 61, 253, 154, 215, 60, 20, 24, 71, 61, 147, 8, 0, 190, 103, 5, 198, 61, 232, 198, 12, 62, 184, 202, 231, 61, 210, 3, 190, 61, 143, 77, 29, 62, 201, 81, 49, 190, 136, 3, 188, 61, 42, 48, 21, 61, 228, 45, 34, 62, 224, 248, 41, 189, 40, 75, 243, 61, 200, 205, 170, 61, 113, 81, 5, 190, 234, 238, 164, 188, 88, 204, 4, 189, 218, 219, 166, 189, 207, 49, 176, 188, 49, 46, 31, 190, 26, 141, 240, 61, 51, 57, 24, 190, 169, 216, 215, 61, 34, 3, 75, 61, 115, 13, 46, 61, 121, 120, 223, 59, 38, 155, 140, 61, 74, 67, 222, 189, 237, 32, 227, 188, 40, 31, 244, 186, 64, 38, 39, 62, 151, 212, 11, 190, 87, 39, 9, 190, 122, 45, 38, 189, 38, 184, 7, 62, 56, 203, 42, 190, 241, 188, 145, 61, 196, 120, 134, 189, 146, 15, 132, 60, 141, 70, 243, 61, 232, 193, 131, 189, 138, 225, 218, 189, 54, 205, 23, 62, 112, 123, 44, 61, 233, 43, 149, 189, 125, 32, 49, 62, 10, 239, 143, 189, 107, 128, 191, 60, 70, 250, 191, 61, 148, 217, 30, 61, 66, 199, 23, 190, 180, 213, 99, 188, 177, 44, 149, 188, 23, 100, 0, 62, 221, 202, 233, 61, 129, 68, 218, 189, 147, 168, 247, 189, 174, 33, 34, 62, 237, 215, 239, 189, 23, 49, 93, 189, 232, 255, 28, 189, 181, 247, 26, 189, 230, 112, 44, 62, 249, 225, 192, 61, 106, 164, 42, 61, 86, 86, 31, 62, 75, 71, 150, 188, 80, 175, 148, 188, 85, 48, 142, 61, 119, 236, 27, 62, 20, 134, 15, 190, 168, 174, 112, 61, 199, 121, 225, 61, 84, 6, 251, 189, 204, 79, 226, 61, 226, 233, 171, 60, 106, 190, 17, 190, 150, 50, 22, 61, 225, 15, 109, 61, 232, 219, 213, 61, 211, 133, 142, 59, 22, 191, 172, 189, 166, 177, 200, 61, 80, 149, 27, 62, 35, 181, 234, 189, 169, 103, 172, 60, 67, 138, 34, 62, 169, 152, 4, 190, 248, 129, 35, 62, 91, 155, 33, 190, 233, 170, 224, 189, 227, 57, 21, 61, 147, 190, 32, 189, 217, 65, 28, 62, 9, 233, 87, 188, 170, 21, 36, 190, 43, 95, 243, 189, 153, 148, 144, 188, 37, 12, 157, 59, 101, 235, 113, 189, 209, 153, 238, 61, 137, 205, 223, 61, 114, 70, 181, 61, 142, 187, 225, 189, 51, 107, 10, 62, 117, 85, 98, 189, 138, 40, 155, 61, 133, 31, 44, 62, 137, 201, 49, 190, 102, 46, 37, 190, 144, 38, 177, 189, 249, 92, 141, 60, 121, 30, 229, 61, 135, 175, 160, 61, 228, 86, 164, 189, 40, 53, 23, 62, 63, 126, 36, 190, 112, 30, 218, 189, 209, 171, 30, 61, 94, 195, 50, 190, 134, 44, 173, 61, 108, 65, 0, 190, 249, 148, 79, 188, 128, 17, 209, 189, 2, 110, 135, 61, 80, 250, 37, 190, 31, 59, 161, 189, 36, 130, 27, 190, 194, 217, 143, 189, 55, 182, 189, 186, 118, 95, 141, 61, 143, 32, 50, 62, 220, 163, 171, 61, 189, 163, 116, 60, 90, 228, 9, 62, 48, 91, 13, 62, 73, 238, 151, 61, 203, 188, 31, 190, 54, 24, 43, 62, 23, 69, 173, 189, 84, 155, 56, 61, 65, 126, 49, 190, 142, 170, 141, 61, 242, 74, 218, 61, 114, 3, 215, 188, 208, 216, 215, 61, 185, 76, 95, 61, 239, 166, 26, 190, 221, 229, 33, 190, 108, 212, 128, 61, 16, 209, 250, 61, 60, 225, 76, 189, 134, 36, 148, 61, 159, 31, 6, 190, 2, 89, 33, 190, 180, 177, 201, 189, 96, 38, 0, 62, 200, 133, 60, 61, 2, 163, 125, 188, 164, 52, 247, 60, 102, 45, 49, 190, 144, 229, 77, 189, 58, 230, 17, 62, 149, 153, 39, 61, 39, 58, 63, 61, 2, 9, 250, 61, 125, 29, 32, 62, 200, 19, 180, 60, 222, 115, 42, 188, 143, 71, 31, 62, 120, 130, 194, 61, 221, 118, 42, 189, 168, 229, 7, 190, 236, 4, 159, 61, 183, 252, 4, 61, 50, 16, 25, 62, 21, 25, 225, 189, 64, 183, 36, 61, 206, 40, 246, 189, 231, 16, 177, 61, 102, 132, 149, 187, 117, 239, 4, 61, 78, 221, 128, 189, 206, 98, 91, 189, 240, 93, 90, 189, 108, 170, 234, 189, 31, 222, 53, 60, 98, 189, 231, 189, 201, 87, 153, 188, 51, 235, 112, 61, 2, 86, 163, 60, 199, 130, 128, 189, 172, 121, 163, 60, 154, 181, 5, 190, 254, 78, 159, 189, 91, 234, 138, 61, 81, 95, 35, 62, 145, 45, 195, 61, 17, 14, 80, 61, 254, 103, 0, 190, 66, 192, 46, 188, 104, 190, 54, 188, 125, 217, 160, 189, 82, 241, 24, 62, 73, 0, 3, 61, 149, 24, 7, 62, 32, 149, 19, 190, 150, 197, 184, 189, 166, 163, 87, 61, 163, 244, 240, 189, 63, 202, 59, 60, 190, 167, 69, 189, 92, 135, 149, 60, 181, 208, 216, 189, 6, 128, 5, 62, 158, 197, 51, 190, 164, 184, 19, 62, 69, 40, 220, 189, 191, 183, 148, 189, 78, 224, 253, 59, 100, 67, 220, 61, 62, 95, 243, 189, 67, 182, 163, 188, 116, 255, 200, 186, 99, 202, 19, 61, 148, 173, 165, 61, 103, 221, 250, 189, 118, 154, 6, 60, 83, 214, 36, 190, 143, 22, 198, 189, 16, 225, 86, 188, 214, 17, 39, 190, 10, 231, 254, 60, 153, 59, 124, 61, 76, 26, 4, 62, 64, 155, 4, 190, 241, 84, 210, 187, 45, 140, 65, 189, 43, 96, 199, 189, 204, 131, 118, 61, 143, 27, 130, 58, 246, 192, 135, 61, 119, 74, 181, 60, 188, 221, 153, 59, 218, 185, 157, 61, 25, 57, 215, 60, 190, 236, 237, 188, 43, 98, 250, 61, 169, 42, 142, 189, 38, 19, 242, 60, 13, 169, 190, 189, 147, 232, 40, 62, 58, 90, 199, 61, 246, 181, 210, 61, 115, 199, 185, 188, 82, 152, 167, 188, 32, 97, 39, 62, 44, 13, 210, 61, 17, 79, 5, 190, 205, 131, 7, 62, 188, 246, 74, 60, 213, 214, 31, 189, 181, 184, 4, 190, 58, 61, 2, 190, 157, 48, 47, 189, 76, 222, 158, 189, 17, 115, 20, 62, 69, 254, 51, 190, 207, 111, 66, 61, 30, 203, 18, 190, 92, 79, 8, 62, 230, 232, 148, 188, 59, 140, 29, 189, 199, 162, 41, 190, 206, 170, 113, 188, 199, 114, 134, 189, 49, 57, 172, 61, 39, 21, 23, 190, 93, 188, 186, 61, 177, 150, 30, 62, 116, 164, 140, 61, 177, 192, 39, 190, 63, 125, 9, 62, 200, 183, 222, 189, 192, 30, 2, 62, 249, 225, 18, 190, 240, 225, 167, 61, 121, 64, 126, 189, 112, 198, 146, 61, 189, 112, 34, 189, 226, 21, 182, 189, 179, 218, 51, 190, 142, 42, 22, 190, 188, 161, 144, 189, 106, 19, 34, 62, 183, 49, 236, 60, 153, 175, 12, 190, 67, 67, 7, 189, 175, 207, 113, 61, 39, 229, 21, 62, 185, 153, 11, 190, 27, 229, 214, 61, 185, 113, 166, 60, 207, 134, 75, 189, 57, 124, 2, 189, 232, 227, 11, 190, 168, 207, 97, 189, 239, 111, 202, 61, 233, 36, 26, 189, 201, 155, 61, 60, 157, 39, 75, 61, 131, 66, 163, 189, 89, 172, 44, 62, 211, 174, 136, 60, 126, 179, 100, 61, 36, 108, 188, 61, 193, 83, 21, 190, 254, 22, 179, 189, 132, 236, 89, 60, 201, 233, 213, 61, 183, 52, 195, 61, 96, 246, 126, 60, 36, 19, 173, 189, 14, 252, 248, 189, 137, 28, 241, 189, 225, 52, 22, 62, 12, 67, 27, 189, 97, 158, 175, 60, 21, 223, 13, 61, 222, 160, 41, 190, 21, 102, 220, 61, 111, 161, 137, 189, 30, 175, 6, 62, 79, 62, 41, 62, 143, 177, 127, 189, 128, 53, 42, 62, 135, 168, 254, 189, 62, 225, 39, 188, 54, 251, 9, 189, 137, 229, 10, 190, 94, 116, 35, 188, 60, 254, 184, 189, 180, 44, 143, 59, 228, 62, 212, 189, 70, 16, 30, 62, 3, 182, 130, 189, 254, 9, 142, 187, 24, 120, 173, 188, 28, 246, 7, 62, 211, 128, 170, 189, 2, 140, 250, 61, 213, 199, 17, 190, 120, 59, 15, 62, 160, 125, 220, 61, 108, 79, 159, 188, 77, 38, 39, 190, 168, 161, 8, 62, 43, 99, 56, 189, 42, 53, 138, 189, 52, 19, 2, 188, 248, 14, 19, 190, 11, 135, 209, 60, 153, 58, 64, 189, 211, 154, 38, 60, 247, 69, 15, 62, 3, 178, 150, 61, 102, 8, 44, 189, 25, 91, 24, 62, 98, 178, 90, 189, 156, 93, 92, 189, 61, 128, 45, 62, 2, 145, 42, 62, 142, 174, 175, 61, 79, 198, 76, 189, 250, 4, 26, 62, 169, 168, 224, 60, 38, 209, 236, 189, 84, 74, 12, 61, 197, 48, 132, 61, 7, 106, 0, 62, 103, 102, 16, 62, 216, 17, 48, 190, 131, 12, 201, 61, 10, 107, 240, 189, 168, 235, 49, 190, 234, 244, 0, 62, 187, 23, 22, 190, 235, 36, 155, 61, 238, 176, 83, 61, 147, 108, 95, 189, 57, 175, 142, 189, 254, 16, 185, 60, 149, 178, 224, 188, 197, 166, 19, 61, 153, 3, 12, 190, 125, 179, 12, 61, 91, 54, 144, 188, 32, 7, 89, 61, 37, 178, 157, 189, 183, 187, 7, 190, 213, 91, 125, 189, 143, 82, 28, 190, 185, 245, 27, 59, 193, 27, 57, 61, 141, 108, 240, 61, 16, 124, 6, 190, 190, 40, 151, 189, 103, 154, 255, 61, 179, 37, 103, 188, 151, 99, 244, 61, 77, 124, 244, 189, 171, 155, 12, 61, 130, 210, 59, 189, 198, 252, 119, 61, 18, 188, 6, 61, 22, 96, 214, 189, 135, 49, 154, 58, 187, 145, 223, 188, 239, 210, 253, 189, 20, 114, 244, 61, 28, 150, 10, 188, 30, 188, 18, 189, 237, 8, 200, 189, 92, 20, 62, 189, 36, 169, 22, 188, 111, 176, 66, 189, 89, 21, 44, 62, 174, 174, 242, 189, 154, 209, 137, 188, 16, 246, 181, 61, 94, 169, 12, 190, 112, 49, 81, 60, 173, 159, 82, 188, 106, 11, 38, 189, 181, 87, 235, 188, 49, 246, 238, 61, 130, 248, 227, 189, 106, 154, 28, 62, 99, 126, 8, 60, 244, 206, 42, 60, 229, 163, 19, 190, 213, 85, 192, 60, 248, 117, 21, 61, 124, 245, 11, 190, 37, 199, 248, 189, 221, 53, 40, 62, 145, 203, 62, 189, 100, 245, 239, 189, 139, 59, 126, 61, 149, 79, 26, 190, 138, 66, 14, 62, 7, 187, 108, 61, 126, 143, 34, 62, 162, 40, 23, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 22, 36, 188, 197, 140, 11, 190, 112, 92, 60, 188, 231, 40, 185, 60, 195, 178, 154, 61, 95, 219, 212, 60, 238, 2, 2, 62, 66, 12, 235, 61, 82, 231, 21, 62, 18, 255, 43, 190, 127, 198, 8, 190, 3, 88, 31, 62, 210, 91, 222, 188, 189, 109, 8, 189, 43, 67, 15, 190, 251, 96, 173, 61, 202, 143, 44, 58, 20, 237, 135, 60, 175, 60, 34, 190, 58, 57, 221, 189, 28, 184, 45, 62, 18, 187, 125, 189, 94, 172, 137, 189, 213, 83, 203, 189, 32, 75, 15, 62, 186, 171, 162, 60, 12, 90, 181, 188, 200, 70, 69, 189, 103, 224, 209, 60, 195, 132, 82, 60, 152, 195, 191, 187, 131, 125, 11, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 209, 37, 190, 14, 228, 126, 61, 229, 76, 154, 61, 183, 123, 31, 190, 189, 114, 198, 61, 29, 67, 218, 61, 15, 44, 156, 61, 187, 198, 13, 59, 82, 69, 105, 189, 88, 152, 213, 189, 48, 72, 37, 61, 79, 120, 166, 61, 94, 30, 77, 60, 244, 24, 77, 61, 232, 107, 232, 61, 134, 255, 48, 189, 150, 232, 148, 189, 29, 50, 19, 190, 174, 227, 217, 189, 77, 69, 30, 62, 141, 173, 29, 62, 113, 207, 241, 188, 196, 40, 146, 189, 188, 26, 20, 62, 161, 96, 47, 62, 107, 192, 21, 190, 255, 85, 136, 60, 43, 98, 80, 61, 26, 149, 37, 62, 236, 240, 60, 189, 120, 241, 134, 61, 152, 170, 180, 61, 47, 214, 81, 189, 20, 35, 234, 189, 135, 136, 219, 61, 240, 6, 202, 189, 69, 113, 7, 190, 93, 105, 235, 61, 117, 167, 203, 61, 65, 95, 75, 61, 237, 0, 215, 61, 86, 22, 24, 190, 135, 136, 9, 190, 23, 223, 188, 61, 188, 114, 98, 59, 208, 106, 186, 61, 188, 72, 128, 60, 71, 52, 24, 62, 0, 176, 137, 189, 194, 61, 148, 60, 35, 60, 166, 61, 44, 12, 24, 190, 238, 189, 39, 62, 71, 178, 45, 61, 203, 15, 37, 189, 227, 7, 236, 61, 101, 10, 250, 189, 148, 214, 96, 61, 39, 38, 27, 62, 128, 198, 46, 190, 23, 201, 3, 62, 104, 49, 5, 189, 72, 51, 136, 61, 211, 241, 26, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 215, 198, 189, 8, 63, 32, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 50, 194, 191, 68, 69, 157, 62, 158, 171, 17, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 6, 2, 190, 160, 146, 215, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}