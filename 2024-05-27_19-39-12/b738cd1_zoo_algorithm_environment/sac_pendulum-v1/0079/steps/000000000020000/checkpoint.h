// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 70, 89, 63, 125, 110, 255, 62, 49, 204, 154, 62, 92, 170, 155, 61, 242, 160, 203, 62, 119, 169, 222, 190, 249, 175, 1, 63, 147, 14, 136, 63, 57, 148, 123, 62, 204, 210, 158, 62, 132, 63, 154, 191, 75, 187, 41, 190, 150, 41, 129, 62, 254, 94, 68, 190, 82, 221, 100, 61, 16, 70, 7, 63, 214, 135, 139, 191, 98, 133, 57, 189, 185, 83, 239, 190, 201, 19, 77, 191, 2, 56, 93, 190, 49, 242, 96, 191, 51, 201, 170, 63, 75, 79, 193, 62, 249, 48, 236, 188, 7, 225, 53, 63, 9, 99, 144, 190, 156, 36, 37, 190, 15, 27, 207, 191, 191, 105, 167, 190, 233, 54, 70, 62, 65, 48, 104, 190, 166, 248, 81, 190, 62, 130, 31, 63, 76, 16, 79, 63, 154, 44, 180, 62, 47, 211, 37, 63, 77, 120, 153, 191, 88, 106, 87, 190, 73, 87, 19, 63, 251, 240, 137, 188, 129, 183, 204, 190, 100, 107, 13, 63, 31, 89, 140, 63, 205, 117, 5, 63, 191, 181, 231, 189, 91, 232, 52, 191, 200, 41, 191, 61, 242, 245, 76, 62, 149, 144, 43, 191, 128, 224, 23, 190, 90, 39, 181, 62, 117, 98, 178, 190, 88, 4, 10, 62, 17, 66, 141, 61, 57, 213, 140, 189, 152, 79, 195, 190, 253, 114, 145, 191, 69, 151, 92, 63, 236, 199, 252, 61, 245, 181, 187, 190, 40, 47, 198, 191, 61, 230, 253, 190, 208, 244, 223, 190, 191, 32, 253, 190, 3, 160, 31, 191, 124, 65, 12, 191, 188, 99, 31, 63, 196, 242, 14, 62, 235, 118, 54, 191, 207, 40, 174, 62, 91, 95, 146, 62, 166, 199, 23, 191, 28, 218, 236, 59, 219, 37, 159, 189, 72, 67, 43, 62, 91, 97, 109, 63, 98, 69, 131, 190, 217, 106, 204, 190, 17, 159, 235, 190, 230, 27, 131, 62, 22, 167, 68, 61, 79, 236, 182, 62, 213, 173, 252, 62, 235, 118, 140, 190, 101, 52, 245, 189, 60, 68, 217, 190, 150, 83, 124, 191, 143, 72, 157, 190, 226, 53, 27, 189, 157, 70, 53, 63, 239, 14, 150, 191, 51, 206, 206, 190, 110, 18, 247, 62, 172, 128, 150, 191, 3, 33, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 70, 78, 191, 37, 100, 55, 189, 146, 68, 189, 189, 49, 50, 246, 189, 156, 247, 98, 62, 180, 20, 147, 188, 103, 37, 15, 63, 32, 69, 147, 62, 249, 37, 85, 61, 111, 54, 113, 190, 99, 95, 188, 62, 155, 214, 7, 191, 92, 186, 9, 62, 48, 155, 226, 190, 51, 161, 170, 62, 21, 62, 221, 61, 218, 70, 126, 62, 195, 225, 113, 189, 182, 195, 117, 191, 60, 212, 114, 190, 97, 220, 205, 190, 52, 134, 209, 189, 131, 115, 13, 63, 203, 133, 24, 191, 170, 119, 28, 63, 80, 186, 170, 62, 26, 95, 124, 190, 143, 213, 43, 61, 182, 144, 173, 190, 65, 16, 22, 63, 11, 205, 242, 190, 179, 183, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 45, 38, 190, 67, 12, 144, 62, 44, 58, 40, 62, 125, 35, 25, 191, 20, 14, 194, 61, 154, 227, 95, 189, 106, 29, 46, 190, 178, 232, 131, 190, 104, 187, 98, 62, 245, 132, 26, 61, 189, 91, 38, 62, 127, 105, 221, 189, 62, 215, 154, 189, 150, 210, 97, 190, 121, 41, 128, 62, 220, 145, 230, 190, 97, 40, 37, 62, 56, 5, 74, 189, 179, 159, 106, 190, 137, 73, 3, 62, 181, 203, 163, 190, 137, 149, 204, 188, 206, 172, 91, 62, 129, 1, 92, 191, 135, 168, 170, 62, 241, 169, 14, 62, 215, 122, 7, 191, 124, 224, 132, 190, 151, 4, 238, 188, 64, 33, 33, 62, 192, 92, 60, 191, 211, 101, 39, 191, 133, 116, 147, 190, 250, 27, 53, 190, 186, 164, 90, 190, 47, 62, 145, 190, 26, 35, 156, 190, 230, 37, 57, 190, 83, 76, 176, 62, 129, 67, 148, 62, 70, 175, 7, 62, 25, 116, 251, 61, 39, 198, 205, 190, 131, 158, 170, 188, 16, 10, 38, 189, 47, 122, 237, 189, 187, 53, 104, 191, 119, 7, 239, 62, 103, 161, 172, 188, 61, 67, 185, 189, 82, 134, 5, 62, 240, 185, 237, 189, 55, 17, 138, 190, 230, 96, 94, 190, 199, 163, 65, 62, 45, 204, 251, 189, 165, 218, 28, 62, 59, 228, 42, 62, 122, 95, 181, 190, 92, 44, 62, 61, 28, 46, 217, 189, 47, 47, 149, 62, 245, 108, 173, 190, 12, 79, 140, 189, 219, 173, 33, 63, 77, 179, 208, 189, 200, 220, 47, 63, 88, 40, 137, 191, 175, 59, 80, 62, 21, 204, 248, 190, 71, 254, 203, 191, 165, 41, 139, 62, 161, 251, 138, 62, 172, 227, 17, 190, 232, 248, 32, 190, 132, 216, 37, 63, 188, 9, 161, 191, 128, 70, 22, 190, 0, 254, 114, 62, 110, 190, 172, 190, 249, 159, 73, 191, 118, 71, 38, 189, 29, 12, 46, 189, 198, 6, 236, 190, 195, 5, 190, 189, 183, 109, 34, 191, 168, 226, 122, 188, 201, 28, 169, 190, 235, 137, 167, 190, 98, 111, 3, 63, 64, 99, 54, 62, 171, 106, 235, 188, 0, 196, 35, 191, 224, 161, 104, 191, 181, 242, 25, 191, 112, 130, 36, 191, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 103, 231, 16, 191, 25, 58, 19, 191, 242, 107, 190, 190, 169, 100, 167, 189, 85, 212, 170, 60, 234, 249, 213, 61, 172, 157, 119, 191, 237, 13, 57, 190, 150, 216, 116, 190, 187, 119, 172, 191, 131, 145, 251, 61, 126, 124, 25, 191, 84, 239, 95, 62, 51, 81, 65, 190, 179, 198, 16, 61, 14, 0, 210, 190, 14, 30, 145, 61, 35, 83, 240, 61, 71, 179, 74, 190, 85, 249, 16, 61, 58, 203, 6, 190, 73, 203, 190, 190, 163, 13, 198, 190, 169, 57, 182, 61, 38, 238, 84, 190, 4, 30, 63, 189, 162, 55, 198, 190, 153, 106, 74, 190, 66, 13, 155, 190, 185, 228, 66, 190, 51, 171, 14, 61, 16, 4, 11, 191, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 201, 93, 150, 191, 153, 4, 90, 62, 213, 54, 188, 190, 107, 153, 116, 62, 236, 193, 86, 191, 89, 35, 115, 190, 30, 249, 189, 61, 50, 4, 191, 60, 134, 159, 43, 61, 64, 136, 180, 189, 230, 82, 59, 191, 142, 22, 18, 189, 147, 183, 5, 61, 42, 235, 182, 190, 254, 6, 144, 190, 37, 160, 142, 189, 92, 199, 236, 190, 240, 134, 105, 189, 120, 184, 233, 190, 61, 143, 14, 63, 213, 18, 180, 191, 141, 128, 92, 189, 19, 12, 141, 62, 22, 171, 103, 62, 178, 139, 53, 62, 34, 182, 91, 62, 63, 92, 243, 189, 244, 185, 131, 62, 201, 219, 158, 59, 154, 84, 13, 62, 90, 147, 214, 190, 117, 245, 68, 189, 138, 29, 57, 62, 109, 66, 24, 61, 67, 129, 165, 62, 49, 70, 5, 191, 11, 29, 218, 61, 183, 9, 139, 190, 180, 164, 222, 190, 44, 58, 2, 191, 13, 130, 54, 62, 88, 63, 40, 191, 150, 49, 94, 61, 243, 119, 40, 62, 200, 137, 42, 190, 228, 223, 64, 189, 136, 67, 83, 62, 223, 141, 15, 62, 0, 118, 164, 61, 197, 5, 231, 61, 53, 72, 206, 189, 146, 76, 142, 61, 249, 146, 248, 190, 14, 214, 247, 61, 12, 91, 160, 187, 191, 13, 159, 60, 79, 48, 159, 61, 116, 37, 169, 61, 43, 243, 136, 62, 152, 48, 185, 60, 91, 44, 0, 189, 115, 7, 132, 190, 155, 224, 13, 191, 183, 73, 54, 191, 223, 9, 151, 61, 213, 219, 214, 61, 15, 225, 233, 62, 114, 58, 229, 190, 144, 230, 149, 188, 47, 138, 238, 190, 28, 69, 67, 62, 112, 77, 194, 191, 64, 41, 45, 190, 49, 224, 77, 63, 43, 179, 186, 61, 83, 59, 176, 62, 157, 188, 29, 190, 32, 127, 144, 190, 61, 243, 45, 62, 1, 199, 246, 188, 99, 250, 75, 62, 168, 43, 125, 189, 173, 64, 86, 190, 91, 235, 7, 189, 185, 119, 242, 61, 3, 119, 88, 62, 65, 133, 23, 190, 163, 245, 66, 191, 149, 159, 99, 62, 104, 30, 5, 62, 41, 114, 153, 62, 4, 58, 123, 190, 109, 255, 86, 188, 34, 131, 151, 62, 156, 117, 250, 190, 150, 107, 206, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 199, 44, 171, 190, 245, 139, 232, 190, 105, 164, 25, 190, 96, 169, 214, 62, 237, 205, 57, 62, 5, 240, 181, 62, 202, 136, 47, 190, 31, 53, 196, 189, 129, 137, 57, 190, 149, 102, 29, 190, 104, 66, 212, 60, 8, 224, 182, 190, 222, 12, 164, 62, 141, 194, 12, 61, 97, 240, 37, 61, 190, 58, 218, 62, 10, 208, 253, 61, 224, 64, 157, 62, 233, 229, 137, 189, 199, 100, 167, 189, 202, 21, 233, 60, 253, 194, 154, 59, 212, 79, 73, 61, 80, 39, 48, 190, 11, 250, 225, 189, 220, 236, 43, 190, 104, 5, 100, 60, 141, 208, 82, 62, 96, 74, 193, 190, 75, 18, 130, 61, 60, 79, 9, 61, 50, 2, 254, 61, 236, 250, 240, 190, 115, 36, 14, 62, 229, 37, 7, 191, 211, 101, 27, 61, 59, 179, 140, 188, 93, 202, 56, 62, 133, 16, 250, 190, 103, 245, 13, 191, 206, 136, 101, 188, 180, 118, 102, 191, 30, 190, 43, 62, 30, 199, 248, 190, 201, 132, 143, 60, 85, 15, 133, 62, 61, 247, 14, 190, 90, 159, 94, 62, 110, 234, 32, 62, 107, 17, 134, 62, 140, 188, 4, 63, 20, 219, 120, 62, 126, 44, 39, 190, 21, 133, 139, 61, 243, 81, 125, 191, 236, 185, 71, 190, 129, 120, 46, 190, 6, 195, 12, 62, 93, 207, 150, 62, 108, 155, 183, 190, 16, 234, 115, 60, 169, 203, 8, 191, 40, 38, 205, 62, 96, 53, 48, 62, 225, 76, 251, 189, 249, 198, 7, 189, 99, 217, 162, 189, 116, 126, 95, 61, 251, 167, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 254, 239, 132, 61, 94, 3, 8, 190, 237, 255, 217, 189, 163, 243, 64, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 21, 22, 98, 61, 52, 208, 118, 189, 142, 49, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 252, 163, 247, 61, 162, 136, 222, 189, 175, 186, 33, 190, 39, 50, 46, 190, 34, 114, 142, 61, 233, 83, 34, 61, 140, 168, 229, 61, 128, 14, 252, 61, 85, 237, 52, 190, 174, 118, 234, 61, 125, 219, 137, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 193, 189, 55, 62, 3, 95, 141, 190, 237, 52, 212, 190, 242, 70, 119, 191, 235, 166, 233, 190, 6, 210, 242, 61, 175, 11, 158, 190, 130, 226, 121, 62, 165, 184, 54, 190, 126, 53, 19, 191, 95, 205, 55, 61, 230, 191, 30, 191, 129, 61, 98, 190, 145, 95, 22, 191, 34, 69, 51, 190, 22, 42, 61, 191, 22, 98, 194, 189, 137, 39, 81, 191, 132, 165, 18, 63, 138, 66, 156, 191, 167, 24, 99, 190, 201, 33, 127, 62, 217, 213, 49, 190, 168, 177, 166, 60, 129, 233, 133, 62, 92, 249, 38, 191, 78, 95, 103, 190, 74, 246, 227, 61, 95, 173, 34, 62, 146, 237, 37, 191, 234, 190, 53, 190, 147, 28, 23, 60, 201, 72, 191, 61, 186, 36, 126, 62, 136, 216, 25, 191, 104, 134, 45, 62, 75, 143, 102, 191, 236, 219, 205, 188, 30, 94, 138, 191, 120, 89, 8, 61, 216, 175, 136, 61, 41, 143, 96, 62, 140, 138, 160, 62, 12, 130, 253, 190, 70, 8, 173, 59, 104, 233, 212, 59, 248, 177, 24, 190, 93, 32, 16, 62, 51, 133, 16, 190, 196, 85, 124, 190, 65, 143, 82, 189, 241, 17, 236, 190, 209, 147, 167, 189, 42, 169, 170, 190, 114, 39, 250, 189, 207, 134, 133, 188, 4, 88, 17, 62, 156, 244, 131, 190, 254, 172, 145, 190, 138, 179, 178, 189, 55, 56, 167, 190, 5, 254, 9, 191, 104, 143, 37, 191, 34, 39, 25, 63, 137, 34, 133, 190, 15, 251, 139, 62, 252, 136, 209, 190, 20, 224, 96, 62, 187, 140, 22, 62, 109, 188, 234, 191, 32, 104, 20, 190, 251, 235, 208, 189, 85, 246, 236, 191, 72, 175, 224, 61, 182, 78, 136, 62, 156, 151, 185, 189, 181, 142, 229, 189, 26, 251, 156, 62, 52, 31, 10, 62, 122, 162, 230, 61, 89, 155, 237, 61, 247, 3, 73, 190, 196, 138, 24, 191, 31, 158, 240, 61, 143, 210, 182, 190, 57, 41, 152, 190, 115, 66, 4, 61, 248, 223, 231, 190, 11, 127, 105, 188, 37, 155, 212, 61, 125, 230, 120, 62, 61, 137, 97, 190, 215, 230, 223, 190, 25, 198, 16, 191, 253, 249, 27, 191, 116, 141, 153, 61, 106, 157, 205, 61, 149, 43, 39, 63, 124, 50, 150, 62, 170, 195, 122, 62, 136, 95, 246, 189, 102, 135, 136, 62, 57, 221, 198, 191, 123, 165, 16, 61, 230, 254, 40, 63, 33, 39, 205, 61, 18, 58, 42, 62, 24, 147, 117, 189, 114, 201, 30, 190, 144, 72, 195, 190, 252, 143, 93, 62, 53, 32, 144, 61, 182, 36, 123, 191, 168, 25, 193, 190, 123, 38, 6, 189, 144, 179, 52, 190, 167, 35, 77, 61, 229, 115, 242, 61, 134, 167, 27, 61, 159, 65, 201, 61, 225, 5, 174, 188, 232, 70, 183, 62, 113, 39, 9, 191, 212, 21, 106, 60, 237, 58, 170, 62, 160, 217, 132, 190, 73, 161, 158, 190, 228, 53, 179, 62, 22, 145, 215, 185, 189, 202, 3, 63, 169, 69, 169, 190, 189, 236, 137, 62, 71, 161, 205, 189, 122, 141, 13, 191, 67, 187, 141, 190, 34, 121, 209, 61, 252, 25, 24, 191, 82, 219, 20, 62, 242, 123, 7, 62, 151, 53, 207, 189, 49, 235, 159, 60, 2, 222, 148, 62, 103, 12, 239, 189, 78, 224, 248, 60, 236, 103, 30, 62, 112, 210, 31, 190, 146, 102, 178, 62, 69, 109, 108, 190, 8, 124, 211, 188, 53, 103, 181, 61, 105, 209, 119, 190, 103, 203, 46, 189, 196, 254, 35, 62, 100, 152, 95, 190, 205, 223, 41, 62, 7, 87, 53, 62, 82, 205, 0, 191, 193, 229, 215, 190, 176, 183, 19, 191, 40, 160, 39, 191, 35, 129, 152, 62, 255, 50, 94, 190, 38, 87, 135, 189, 133, 91, 148, 62, 65, 67, 66, 62, 192, 71, 153, 190, 185, 128, 64, 62, 128, 52, 45, 62, 78, 145, 10, 191, 118, 185, 74, 62, 232, 150, 149, 189, 235, 253, 111, 188, 50, 139, 52, 62, 198, 84, 133, 61, 204, 121, 113, 62, 164, 180, 73, 62, 10, 29, 245, 186, 216, 55, 158, 189, 91, 13, 153, 62, 190, 162, 250, 190, 10, 151, 160, 188, 232, 137, 35, 60, 114, 162, 13, 190, 100, 241, 65, 62, 162, 126, 165, 62, 169, 254, 3, 189, 113, 239, 76, 62, 62, 29, 226, 61, 238, 204, 55, 190, 17, 91, 197, 61, 105, 135, 137, 61, 124, 79, 146, 191, 228, 59, 184, 60, 50, 245, 75, 190, 129, 149, 7, 62, 30, 116, 10, 62, 147, 173, 113, 62, 208, 118, 39, 190, 29, 74, 75, 62, 83, 21, 69, 60, 144, 99, 64, 188, 191, 80, 31, 189, 183, 211, 17, 191, 201, 176, 109, 62, 144, 58, 147, 62, 240, 230, 63, 190, 231, 19, 189, 62, 176, 115, 109, 62, 42, 125, 194, 187, 3, 184, 14, 191, 142, 6, 191, 190, 30, 22, 23, 191, 86, 30, 168, 190, 242, 2, 23, 60, 140, 195, 166, 62, 159, 187, 93, 61, 38, 27, 66, 190, 47, 192, 162, 187, 235, 13, 83, 60, 8, 99, 228, 190, 127, 55, 219, 61, 228, 36, 145, 62, 43, 24, 85, 62, 126, 236, 42, 63, 175, 133, 10, 190, 238, 3, 81, 188, 42, 222, 255, 188, 248, 61, 207, 188, 231, 67, 159, 62, 184, 135, 207, 190, 70, 209, 204, 61, 59, 20, 196, 190, 233, 81, 136, 190, 249, 231, 242, 188, 91, 99, 108, 62, 149, 239, 133, 189, 242, 207, 192, 62, 28, 209, 89, 190, 30, 176, 83, 62, 189, 63, 221, 60, 215, 249, 129, 189, 211, 25, 59, 61, 193, 236, 217, 191, 150, 102, 173, 189, 106, 222, 160, 190, 182, 170, 0, 190, 185, 41, 31, 189, 250, 218, 252, 187, 235, 145, 229, 190, 91, 16, 139, 62, 115, 185, 117, 62, 227, 194, 14, 190, 134, 67, 78, 62, 30, 34, 197, 62, 88, 206, 162, 62, 207, 243, 6, 63, 16, 120, 75, 62, 85, 52, 5, 63, 85, 227, 144, 190, 210, 202, 151, 62, 36, 197, 177, 190, 254, 206, 67, 62, 225, 246, 208, 191, 143, 132, 2, 62, 178, 43, 168, 62, 242, 115, 218, 60, 59, 237, 197, 62, 166, 191, 64, 190, 31, 137, 170, 190, 165, 140, 135, 190, 83, 79, 204, 62, 164, 38, 138, 62, 150, 180, 6, 191, 193, 140, 67, 190, 88, 249, 49, 189, 101, 78, 166, 190, 143, 194, 154, 189, 169, 203, 131, 62, 177, 211, 153, 190, 100, 198, 234, 61, 127, 127, 4, 62, 23, 164, 153, 62, 139, 122, 176, 190, 15, 3, 32, 62, 61, 35, 116, 62, 218, 97, 28, 191, 119, 144, 19, 191, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 70, 37, 102, 191, 194, 188, 217, 189, 188, 44, 204, 190, 157, 213, 225, 62, 77, 157, 230, 61, 172, 215, 5, 63, 7, 227, 199, 59, 227, 17, 149, 62, 104, 47, 133, 189, 210, 185, 62, 190, 184, 42, 46, 62, 89, 170, 6, 191, 4, 232, 173, 62, 9, 93, 19, 62, 67, 180, 59, 187, 7, 165, 6, 62, 250, 205, 140, 62, 168, 62, 230, 189, 69, 76, 174, 190, 119, 188, 204, 61, 49, 144, 186, 190, 4, 21, 159, 190, 145, 53, 41, 62, 217, 213, 61, 189, 100, 245, 165, 61, 71, 216, 0, 61, 195, 198, 229, 59, 96, 121, 137, 61, 110, 242, 8, 191, 126, 32, 146, 61, 68, 35, 186, 61, 8, 70, 131, 60, 92, 116, 9, 63, 114, 152, 177, 189, 88, 111, 193, 62, 130, 160, 34, 191, 252, 1, 30, 62, 130, 4, 219, 190, 137, 128, 204, 61, 161, 29, 112, 190, 33, 228, 24, 60, 50, 106, 127, 62, 66, 196, 131, 61, 206, 176, 107, 62, 3, 6, 43, 190, 197, 153, 223, 190, 152, 62, 86, 62, 108, 171, 3, 190, 28, 136, 97, 61, 116, 39, 240, 61, 0, 20, 240, 189, 80, 77, 62, 62, 162, 206, 98, 62, 37, 156, 149, 62, 28, 8, 150, 62, 135, 96, 9, 62, 122, 162, 82, 62, 132, 86, 49, 62, 74, 136, 180, 61, 46, 44, 19, 62, 164, 61, 24, 190, 39, 188, 166, 62, 71, 21, 25, 191, 65, 131, 31, 191, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 77, 114, 37, 191, 25, 139, 91, 62, 128, 163, 130, 190, 17, 213, 198, 189, 117, 71, 94, 62, 73, 199, 91, 62, 24, 42, 132, 190, 24, 16, 110, 62, 171, 225, 142, 62, 119, 64, 8, 191, 129, 110, 190, 61, 28, 79, 154, 190, 75, 227, 80, 61, 96, 64, 77, 62, 212, 57, 240, 61, 208, 160, 19, 62, 67, 49, 41, 62, 117, 128, 134, 61, 200, 170, 53, 62, 147, 210, 134, 62, 84, 140, 151, 190, 234, 166, 21, 62, 31, 252, 155, 61, 157, 169, 130, 189, 32, 14, 60, 62, 155, 207, 188, 62, 164, 148, 1, 60, 203, 175, 223, 61, 202, 34, 122, 61, 123, 237, 168, 189, 116, 198, 63, 190, 189, 32, 169, 188, 188, 59, 116, 191, 47, 183, 130, 62, 1, 182, 95, 191, 168, 34, 252, 189, 242, 98, 124, 60, 239, 229, 49, 62, 123, 72, 156, 60, 68, 72, 221, 60, 12, 246, 61, 61, 208, 33, 66, 191, 253, 149, 192, 189, 149, 239, 216, 190, 184, 41, 14, 61, 135, 8, 152, 62, 29, 161, 152, 190, 203, 119, 29, 62, 73, 162, 56, 186, 205, 179, 129, 189, 207, 164, 206, 62, 190, 112, 167, 62, 225, 212, 201, 190, 203, 51, 74, 189, 159, 166, 35, 190, 205, 136, 244, 189, 156, 24, 255, 61, 188, 207, 153, 188, 113, 178, 56, 62, 243, 101, 212, 60, 125, 84, 11, 61, 16, 30, 138, 190, 234, 161, 198, 62, 52, 254, 185, 61, 215, 100, 140, 59, 6, 148, 79, 191, 15, 224, 124, 188, 220, 229, 66, 190, 157, 110, 145, 60, 106, 101, 129, 61, 27, 110, 44, 190, 62, 125, 89, 190, 28, 205, 145, 190, 116, 137, 36, 191, 104, 103, 243, 189, 18, 20, 180, 188, 221, 232, 148, 62, 105, 52, 1, 190, 220, 252, 89, 62, 116, 44, 155, 190, 197, 143, 127, 62, 33, 23, 207, 61, 48, 247, 137, 190, 42, 130, 121, 190, 89, 64, 172, 190, 99, 194, 147, 190, 58, 1, 229, 61, 68, 104, 246, 190, 56, 109, 35, 189, 121, 171, 174, 190, 121, 124, 45, 191, 101, 17, 147, 62, 157, 240, 243, 190, 6, 247, 130, 189, 52, 192, 133, 190, 164, 65, 12, 191, 217, 187, 128, 191, 115, 176, 19, 62, 183, 252, 14, 191, 239, 185, 10, 63, 8, 69, 166, 189, 7, 1, 178, 62, 26, 78, 192, 61, 93, 62, 96, 62, 155, 47, 60, 189, 242, 42, 131, 190, 114, 235, 134, 189, 79, 37, 17, 191, 165, 250, 129, 62, 19, 249, 150, 62, 156, 236, 4, 189, 177, 209, 133, 61, 212, 69, 78, 61, 55, 162, 39, 62, 111, 88, 62, 191, 207, 66, 34, 63, 128, 240, 85, 191, 199, 80, 150, 190, 4, 161, 183, 188, 27, 25, 123, 62, 61, 164, 205, 61, 212, 39, 103, 189, 146, 69, 164, 61, 52, 52, 99, 189, 54, 102, 218, 190, 67, 129, 7, 62, 163, 233, 218, 62, 102, 161, 162, 62, 220, 18, 142, 191, 240, 193, 233, 190, 89, 3, 51, 189, 164, 30, 154, 62, 132, 242, 87, 190, 84, 42, 208, 61, 36, 118, 117, 61, 3, 168, 113, 62, 58, 35, 28, 191, 200, 201, 214, 62, 198, 96, 69, 191, 106, 232, 156, 190, 231, 175, 149, 62, 191, 227, 217, 62, 142, 180, 15, 190, 76, 245, 223, 61, 128, 89, 35, 62, 221, 233, 71, 189, 77, 144, 55, 190, 148, 58, 255, 62, 162, 168, 12, 190, 139, 133, 172, 190, 57, 177, 178, 61, 110, 247, 12, 62, 25, 94, 212, 61, 0, 228, 220, 190, 206, 129, 116, 189, 113, 120, 174, 189, 59, 234, 203, 190, 121, 122, 165, 61, 193, 86, 140, 62, 46, 31, 235, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 0, 14, 62, 58, 94, 139, 61, 202, 232, 3, 189, 50, 157, 156, 60, 129, 220, 178, 60, 109, 79, 180, 189, 82, 210, 17, 62, 111, 211, 61, 62, 111, 100, 34, 62, 28, 94, 48, 190, 210, 26, 11, 61, 253, 118, 109, 188, 51, 245, 204, 189, 15, 86, 55, 189, 55, 148, 45, 190, 208, 242, 170, 59, 86, 195, 110, 61, 255, 222, 44, 62, 251, 125, 94, 189, 21, 74, 64, 61, 36, 126, 145, 62, 228, 163, 180, 189, 107, 174, 74, 62, 52, 58, 2, 190, 128, 201, 157, 62, 13, 97, 24, 62, 161, 231, 122, 189, 130, 59, 97, 62, 204, 55, 178, 188, 14, 33, 209, 61, 169, 171, 144, 61, 10, 235, 236, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 226, 193, 190, 88, 6, 47, 63, 166, 14, 191, 63, 79, 83, 39, 190, 81, 60, 89, 61, 119, 158, 141, 62, 205, 59, 247, 62, 232, 0, 19, 190, 215, 20, 11, 191, 186, 109, 213, 189, 69, 22, 76, 61, 11, 221, 49, 63, 203, 200, 24, 60, 4, 241, 75, 61, 34, 199, 30, 63, 6, 17, 111, 191, 200, 216, 195, 190, 205, 42, 139, 191, 143, 157, 176, 190, 174, 179, 21, 62, 7, 183, 219, 62, 171, 30, 177, 190, 127, 12, 150, 191, 97, 25, 11, 62, 177, 252, 251, 62, 247, 134, 156, 190, 80, 24, 0, 61, 211, 101, 38, 62, 39, 9, 5, 63, 242, 249, 27, 190, 22, 173, 198, 62, 167, 167, 78, 63, 159, 37, 8, 190, 183, 147, 22, 191, 235, 230, 222, 62, 158, 89, 197, 189, 46, 254, 75, 191, 202, 33, 113, 189, 164, 217, 197, 62, 147, 37, 148, 190, 153, 146, 203, 62, 214, 19, 24, 190, 7, 174, 235, 190, 2, 68, 103, 62, 121, 81, 212, 60, 28, 42, 186, 61, 25, 240, 73, 62, 33, 117, 207, 62, 145, 191, 17, 191, 21, 216, 174, 189, 0, 208, 205, 60, 145, 131, 183, 190, 133, 63, 52, 62, 101, 164, 16, 62, 224, 175, 152, 61, 83, 154, 227, 61, 136, 205, 166, 190, 177, 137, 179, 61, 102, 55, 6, 62, 200, 21, 172, 190, 119, 6, 120, 62, 53, 118, 51, 190, 174, 146, 6, 63, 146, 162, 6, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 224, 157, 189, 123, 51, 89, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {193, 84, 156, 191, 252, 94, 149, 191, 215, 154, 217, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 201, 164, 192, 134, 232, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}