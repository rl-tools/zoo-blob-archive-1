// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 232, 124, 62, 64, 182, 68, 62, 78, 185, 164, 62, 109, 88, 222, 189, 184, 162, 57, 63, 73, 70, 65, 190, 51, 3, 212, 62, 39, 43, 10, 63, 166, 130, 79, 62, 129, 143, 172, 62, 63, 77, 245, 190, 168, 255, 43, 190, 94, 123, 52, 62, 25, 16, 32, 62, 30, 67, 233, 189, 197, 7, 223, 62, 68, 52, 53, 191, 221, 185, 54, 190, 152, 244, 8, 191, 60, 160, 195, 190, 153, 227, 16, 190, 50, 212, 143, 190, 67, 82, 51, 63, 161, 117, 0, 63, 82, 177, 40, 62, 219, 199, 84, 63, 35, 185, 138, 190, 247, 14, 163, 190, 64, 182, 183, 190, 175, 222, 133, 190, 244, 61, 120, 62, 103, 11, 1, 63, 192, 12, 30, 190, 91, 185, 255, 62, 7, 113, 144, 62, 211, 4, 211, 62, 128, 58, 24, 63, 225, 238, 7, 191, 227, 112, 148, 190, 120, 97, 52, 63, 1, 36, 166, 62, 251, 135, 179, 190, 20, 28, 24, 63, 101, 44, 29, 63, 82, 180, 204, 62, 178, 12, 144, 190, 59, 215, 45, 191, 212, 90, 184, 61, 228, 95, 108, 62, 176, 168, 200, 190, 63, 148, 106, 190, 20, 241, 225, 62, 212, 21, 176, 190, 13, 127, 159, 62, 202, 8, 141, 190, 203, 202, 200, 190, 172, 161, 198, 190, 103, 185, 32, 191, 147, 113, 34, 63, 169, 142, 99, 187, 240, 88, 145, 190, 91, 5, 205, 190, 239, 218, 239, 190, 118, 181, 120, 190, 205, 165, 166, 62, 170, 83, 5, 191, 106, 98, 194, 190, 167, 16, 193, 62, 94, 242, 110, 61, 153, 214, 59, 191, 105, 222, 243, 190, 225, 110, 65, 62, 92, 248, 66, 190, 108, 147, 176, 189, 41, 33, 20, 190, 132, 74, 138, 61, 167, 25, 122, 63, 132, 200, 140, 190, 160, 148, 110, 61, 90, 204, 14, 191, 139, 35, 7, 62, 124, 128, 93, 62, 58, 145, 221, 190, 127, 248, 196, 62, 191, 23, 172, 190, 101, 29, 41, 63, 170, 250, 116, 190, 229, 179, 41, 191, 39, 66, 28, 191, 20, 148, 76, 189, 29, 71, 51, 63, 181, 168, 10, 191, 223, 230, 226, 190, 152, 69, 101, 62, 186, 66, 72, 191, 75, 149, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 12, 255, 190, 178, 242, 51, 62, 147, 161, 211, 187, 23, 215, 96, 61, 205, 126, 147, 62, 110, 190, 60, 62, 38, 51, 75, 62, 241, 52, 8, 190, 89, 199, 11, 63, 159, 248, 49, 62, 33, 73, 229, 62, 175, 76, 233, 190, 147, 123, 181, 62, 88, 49, 211, 190, 33, 170, 247, 62, 227, 125, 10, 61, 233, 37, 11, 63, 73, 85, 237, 62, 195, 135, 250, 190, 114, 211, 146, 190, 211, 182, 250, 190, 182, 108, 145, 189, 209, 2, 10, 63, 189, 252, 187, 190, 179, 102, 36, 63, 55, 47, 11, 63, 25, 97, 49, 189, 234, 158, 10, 63, 215, 61, 197, 189, 44, 204, 132, 62, 111, 122, 110, 190, 142, 176, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 224, 163, 188, 164, 98, 153, 62, 40, 73, 174, 61, 158, 216, 221, 190, 100, 95, 147, 61, 75, 15, 69, 189, 2, 187, 94, 190, 253, 40, 66, 62, 17, 245, 113, 62, 79, 130, 37, 62, 9, 48, 48, 62, 78, 42, 211, 188, 134, 155, 199, 189, 75, 165, 23, 190, 134, 105, 106, 62, 139, 223, 61, 190, 181, 120, 92, 61, 101, 101, 223, 188, 69, 209, 16, 190, 1, 206, 115, 189, 122, 110, 36, 190, 223, 137, 97, 189, 130, 52, 80, 62, 27, 148, 142, 190, 95, 153, 71, 62, 4, 197, 60, 62, 21, 51, 31, 60, 190, 144, 197, 189, 74, 195, 42, 188, 176, 46, 147, 188, 241, 69, 153, 190, 249, 168, 6, 190, 27, 151, 96, 190, 63, 30, 45, 190, 104, 141, 92, 190, 4, 140, 37, 190, 94, 27, 77, 190, 234, 43, 29, 190, 210, 147, 45, 62, 64, 239, 218, 61, 244, 121, 165, 189, 135, 70, 39, 62, 246, 135, 9, 190, 240, 158, 163, 61, 242, 44, 42, 61, 111, 104, 249, 189, 115, 70, 23, 190, 168, 55, 185, 62, 61, 9, 111, 61, 89, 0, 245, 189, 58, 249, 28, 62, 67, 208, 94, 190, 197, 186, 139, 61, 7, 212, 57, 189, 0, 125, 55, 189, 249, 81, 230, 188, 217, 219, 147, 188, 132, 243, 71, 59, 59, 9, 167, 190, 134, 11, 157, 61, 3, 224, 231, 188, 76, 158, 1, 62, 248, 182, 117, 190, 114, 243, 58, 189, 184, 87, 143, 62, 14, 51, 129, 190, 135, 82, 61, 62, 241, 1, 0, 190, 226, 36, 36, 62, 85, 197, 223, 189, 144, 5, 0, 190, 48, 215, 72, 62, 45, 171, 157, 189, 237, 62, 16, 190, 18, 184, 192, 189, 228, 79, 148, 62, 171, 67, 255, 189, 211, 31, 163, 189, 187, 187, 152, 189, 149, 174, 66, 190, 223, 190, 2, 190, 20, 92, 124, 189, 29, 12, 46, 189, 250, 163, 129, 188, 227, 3, 180, 189, 159, 9, 32, 190, 85, 179, 186, 188, 29, 82, 227, 189, 130, 219, 44, 190, 252, 215, 81, 61, 224, 40, 15, 62, 199, 83, 7, 190, 59, 255, 2, 190, 137, 143, 145, 190, 146, 56, 11, 190, 5, 36, 248, 188, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 224, 232, 59, 190, 141, 183, 41, 60, 95, 157, 176, 189, 84, 186, 241, 56, 235, 98, 135, 59, 80, 108, 46, 61, 144, 90, 160, 190, 125, 209, 10, 61, 63, 162, 157, 189, 143, 91, 135, 190, 65, 231, 45, 62, 59, 146, 98, 190, 40, 190, 254, 61, 41, 219, 53, 187, 190, 58, 15, 62, 27, 170, 246, 189, 197, 60, 59, 61, 117, 75, 31, 62, 128, 223, 214, 189, 217, 231, 128, 61, 82, 173, 172, 59, 121, 175, 220, 189, 228, 19, 175, 61, 180, 175, 46, 61, 217, 113, 178, 188, 119, 26, 48, 62, 6, 204, 178, 61, 182, 198, 248, 189, 31, 207, 25, 190, 23, 43, 254, 189, 37, 102, 197, 61, 157, 226, 19, 190, 39, 31, 60, 61, 160, 161, 27, 190, 165, 19, 5, 189, 239, 99, 178, 61, 211, 117, 30, 61, 220, 7, 201, 60, 39, 210, 123, 61, 101, 100, 241, 189, 43, 79, 68, 188, 138, 122, 90, 61, 77, 170, 249, 188, 196, 108, 201, 61, 88, 7, 7, 190, 216, 212, 6, 188, 247, 131, 8, 62, 227, 251, 57, 189, 165, 49, 69, 190, 114, 96, 53, 190, 15, 70, 154, 189, 91, 76, 46, 190, 182, 21, 98, 189, 27, 243, 217, 189, 97, 17, 131, 189, 14, 159, 20, 62, 244, 92, 181, 61, 74, 34, 151, 61, 173, 92, 46, 190, 209, 112, 134, 188, 245, 94, 37, 190, 101, 59, 182, 189, 69, 14, 214, 61, 237, 237, 171, 189, 87, 208, 157, 190, 161, 199, 36, 190, 142, 47, 156, 190, 103, 30, 23, 62, 193, 205, 176, 189, 57, 167, 29, 189, 200, 101, 36, 62, 10, 211, 33, 190, 55, 217, 146, 190, 187, 74, 2, 190, 195, 245, 130, 190, 168, 153, 5, 190, 4, 204, 244, 189, 7, 227, 13, 61, 253, 56, 88, 190, 147, 146, 5, 62, 118, 82, 235, 189, 168, 160, 147, 61, 47, 71, 149, 60, 27, 68, 23, 62, 123, 251, 15, 190, 183, 20, 15, 189, 239, 60, 6, 62, 0, 12, 40, 62, 215, 55, 18, 62, 20, 88, 119, 190, 48, 136, 27, 189, 1, 52, 48, 62, 167, 174, 136, 190, 163, 229, 44, 62, 17, 78, 233, 188, 84, 56, 112, 61, 233, 235, 229, 189, 229, 72, 4, 60, 177, 104, 115, 62, 131, 234, 93, 190, 218, 128, 213, 61, 97, 194, 66, 190, 14, 250, 91, 189, 148, 116, 49, 61, 135, 145, 65, 62, 75, 172, 2, 59, 39, 225, 189, 61, 19, 213, 7, 189, 0, 158, 1, 190, 190, 201, 143, 189, 246, 88, 38, 62, 159, 214, 37, 190, 0, 208, 37, 60, 46, 188, 217, 61, 252, 8, 15, 60, 78, 43, 155, 60, 101, 233, 167, 189, 212, 159, 204, 61, 93, 155, 89, 61, 186, 59, 8, 190, 38, 58, 230, 61, 45, 205, 189, 61, 184, 107, 222, 60, 116, 182, 136, 189, 191, 78, 62, 189, 90, 216, 13, 190, 126, 231, 194, 189, 36, 44, 106, 189, 26, 77, 93, 188, 203, 227, 21, 62, 101, 198, 42, 62, 196, 136, 57, 190, 18, 179, 37, 188, 33, 21, 165, 190, 25, 42, 104, 189, 155, 237, 218, 61, 179, 137, 202, 189, 161, 166, 217, 61, 34, 13, 209, 61, 1, 124, 4, 190, 80, 40, 226, 189, 255, 204, 75, 190, 89, 38, 182, 61, 222, 111, 117, 190, 158, 81, 210, 61, 17, 200, 246, 188, 30, 69, 178, 189, 114, 156, 45, 62, 3, 79, 34, 190, 227, 8, 56, 61, 144, 137, 197, 59, 167, 64, 206, 189, 20, 78, 7, 62, 228, 96, 83, 62, 64, 52, 68, 189, 250, 213, 132, 190, 90, 135, 193, 189, 32, 55, 46, 188, 142, 169, 60, 189, 35, 13, 183, 188, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 49, 55, 246, 61, 254, 29, 104, 190, 170, 89, 110, 189, 83, 196, 5, 62, 94, 88, 10, 62, 231, 171, 73, 62, 139, 46, 10, 190, 195, 17, 26, 189, 83, 222, 233, 189, 43, 203, 59, 189, 185, 193, 165, 61, 79, 44, 107, 190, 24, 80, 74, 62, 95, 245, 236, 61, 33, 145, 83, 187, 137, 240, 10, 63, 178, 202, 135, 61, 26, 141, 124, 62, 189, 33, 41, 62, 78, 41, 172, 190, 250, 38, 6, 62, 217, 49, 223, 61, 48, 186, 43, 62, 100, 252, 45, 62, 1, 66, 155, 188, 184, 44, 105, 189, 170, 70, 200, 61, 184, 104, 127, 62, 223, 167, 119, 190, 104, 97, 84, 62, 218, 254, 237, 60, 152, 85, 89, 62, 127, 193, 9, 61, 197, 217, 64, 189, 205, 212, 162, 189, 64, 52, 158, 62, 94, 120, 12, 189, 168, 117, 99, 62, 181, 169, 63, 190, 158, 193, 13, 190, 189, 239, 218, 189, 108, 155, 212, 61, 0, 97, 6, 62, 157, 177, 135, 59, 158, 107, 124, 188, 190, 231, 6, 61, 130, 113, 35, 189, 45, 167, 59, 62, 141, 35, 14, 62, 224, 208, 25, 62, 102, 1, 100, 62, 158, 145, 183, 187, 156, 97, 0, 62, 215, 3, 79, 61, 9, 134, 134, 190, 64, 135, 226, 188, 42, 96, 244, 188, 249, 152, 134, 60, 252, 1, 200, 60, 192, 24, 227, 189, 126, 142, 247, 189, 197, 94, 90, 188, 226, 156, 74, 62, 42, 180, 13, 61, 225, 76, 251, 189, 14, 105, 194, 188, 60, 47, 150, 189, 116, 126, 95, 61, 60, 228, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 2, 179, 166, 61, 103, 47, 243, 189, 237, 255, 217, 189, 161, 213, 48, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 232, 232, 133, 61, 52, 208, 118, 189, 216, 55, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 56, 70, 7, 62, 162, 136, 222, 189, 189, 250, 31, 190, 183, 137, 31, 190, 34, 114, 142, 61, 7, 67, 80, 61, 72, 49, 4, 62, 128, 14, 252, 61, 254, 223, 52, 190, 10, 197, 237, 61, 186, 9, 119, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 69, 181, 191, 189, 243, 171, 84, 61, 89, 218, 163, 61, 219, 68, 210, 61, 67, 192, 230, 189, 235, 99, 20, 189, 200, 237, 136, 189, 35, 27, 245, 189, 89, 192, 220, 189, 237, 103, 2, 59, 243, 235, 19, 190, 25, 232, 21, 55, 62, 236, 25, 62, 93, 86, 19, 190, 248, 15, 54, 61, 227, 150, 226, 187, 56, 123, 203, 61, 193, 84, 59, 61, 151, 170, 57, 61, 100, 108, 139, 189, 250, 1, 175, 189, 8, 101, 152, 189, 125, 63, 235, 189, 6, 124, 47, 190, 59, 118, 33, 62, 122, 195, 24, 190, 122, 144, 161, 61, 9, 242, 115, 61, 122, 234, 132, 61, 115, 83, 139, 61, 151, 128, 230, 187, 8, 82, 32, 61, 43, 26, 42, 190, 204, 217, 145, 189, 17, 109, 76, 190, 201, 78, 111, 188, 146, 175, 157, 190, 13, 182, 133, 61, 48, 45, 16, 190, 193, 2, 169, 189, 25, 200, 166, 189, 108, 79, 59, 190, 26, 48, 51, 190, 50, 166, 130, 190, 0, 114, 12, 62, 26, 83, 55, 189, 45, 173, 172, 61, 127, 235, 180, 188, 93, 145, 166, 189, 49, 199, 101, 190, 75, 224, 39, 62, 5, 61, 190, 189, 141, 79, 200, 189, 215, 210, 60, 62, 35, 231, 103, 62, 124, 221, 203, 188, 193, 160, 98, 190, 160, 28, 27, 189, 241, 47, 217, 61, 203, 12, 170, 188, 235, 38, 137, 62, 162, 252, 34, 190, 244, 79, 238, 59, 4, 157, 61, 62, 169, 203, 135, 61, 58, 187, 148, 61, 130, 230, 69, 190, 210, 153, 184, 61, 243, 36, 45, 190, 237, 14, 157, 61, 84, 197, 231, 61, 249, 62, 67, 60, 137, 38, 210, 60, 178, 213, 52, 62, 116, 12, 10, 60, 51, 27, 134, 190, 60, 97, 41, 189, 12, 158, 7, 62, 6, 29, 174, 189, 229, 13, 23, 62, 159, 105, 62, 190, 21, 226, 46, 189, 164, 27, 116, 61, 97, 176, 172, 189, 59, 126, 210, 189, 189, 245, 188, 189, 93, 47, 205, 59, 140, 70, 237, 61, 81, 230, 225, 61, 4, 150, 194, 60, 198, 225, 165, 189, 80, 148, 147, 189, 138, 210, 205, 189, 172, 66, 110, 61, 13, 48, 146, 188, 97, 214, 238, 61, 235, 70, 17, 62, 76, 236, 98, 62, 211, 41, 44, 190, 116, 105, 2, 62, 21, 125, 51, 62, 42, 221, 110, 189, 191, 73, 50, 62, 210, 127, 10, 60, 147, 147, 30, 189, 134, 251, 227, 61, 237, 220, 235, 59, 95, 120, 38, 190, 143, 170, 117, 189, 222, 254, 81, 62, 186, 16, 2, 190, 44, 245, 65, 61, 66, 193, 248, 60, 107, 200, 79, 190, 139, 91, 130, 188, 30, 150, 219, 61, 244, 57, 137, 190, 7, 235, 62, 189, 37, 109, 30, 190, 154, 59, 104, 190, 41, 255, 230, 61, 173, 199, 89, 61, 138, 224, 163, 61, 140, 187, 66, 189, 236, 55, 181, 189, 16, 251, 86, 190, 169, 55, 184, 61, 172, 229, 169, 189, 63, 191, 41, 62, 50, 177, 57, 61, 174, 95, 52, 60, 0, 168, 230, 61, 98, 52, 65, 190, 249, 57, 3, 62, 103, 106, 90, 190, 254, 187, 226, 61, 22, 209, 187, 61, 52, 186, 10, 62, 130, 194, 169, 188, 70, 216, 73, 189, 192, 186, 79, 189, 49, 81, 251, 189, 20, 143, 93, 190, 113, 177, 63, 190, 31, 188, 165, 190, 90, 208, 65, 189, 213, 54, 18, 62, 111, 96, 53, 190, 4, 78, 162, 61, 58, 160, 250, 61, 217, 230, 57, 61, 239, 222, 6, 61, 216, 108, 113, 61, 128, 205, 112, 190, 111, 87, 219, 190, 15, 101, 218, 61, 63, 175, 18, 62, 96, 94, 122, 60, 1, 118, 21, 189, 204, 250, 90, 62, 159, 191, 165, 189, 242, 100, 199, 62, 214, 8, 171, 189, 142, 50, 63, 62, 6, 81, 1, 60, 99, 109, 139, 190, 132, 253, 23, 62, 197, 208, 99, 60, 198, 193, 35, 190, 198, 206, 145, 61, 242, 104, 43, 61, 214, 31, 193, 189, 27, 211, 106, 190, 246, 116, 128, 62, 172, 169, 140, 190, 204, 42, 93, 60, 218, 50, 244, 61, 177, 199, 207, 58, 168, 88, 125, 61, 229, 125, 173, 60, 23, 75, 235, 189, 166, 44, 137, 60, 156, 12, 90, 189, 52, 4, 129, 60, 176, 238, 157, 61, 31, 102, 104, 189, 198, 40, 82, 61, 174, 247, 56, 62, 198, 135, 195, 190, 75, 200, 73, 188, 237, 190, 137, 189, 172, 68, 109, 189, 201, 201, 208, 61, 39, 128, 143, 190, 154, 134, 21, 59, 228, 187, 54, 62, 57, 18, 60, 62, 135, 187, 84, 189, 93, 234, 47, 62, 135, 19, 104, 189, 179, 214, 42, 61, 242, 102, 213, 61, 11, 175, 130, 189, 167, 175, 81, 189, 88, 62, 135, 61, 16, 74, 15, 189, 148, 132, 190, 62, 152, 216, 34, 62, 140, 148, 128, 189, 94, 6, 232, 189, 142, 75, 181, 61, 91, 38, 227, 189, 20, 174, 77, 189, 78, 91, 181, 188, 57, 66, 57, 61, 41, 235, 71, 62, 209, 241, 146, 61, 133, 125, 131, 60, 179, 106, 41, 62, 55, 98, 144, 188, 207, 135, 136, 61, 10, 196, 216, 61, 254, 2, 83, 62, 219, 214, 148, 190, 37, 77, 59, 189, 255, 10, 17, 189, 7, 244, 51, 61, 164, 155, 160, 61, 10, 131, 51, 62, 152, 146, 204, 189, 23, 242, 238, 61, 208, 201, 151, 188, 89, 74, 13, 62, 124, 17, 112, 189, 186, 240, 130, 190, 181, 191, 52, 62, 164, 30, 145, 62, 93, 193, 10, 190, 23, 114, 156, 62, 57, 164, 73, 62, 244, 248, 93, 189, 251, 117, 78, 62, 139, 178, 151, 190, 15, 250, 150, 189, 190, 93, 159, 187, 153, 207, 53, 189, 71, 118, 175, 62, 162, 198, 173, 187, 183, 69, 133, 190, 198, 48, 46, 190, 114, 138, 81, 61, 189, 21, 235, 189, 16, 191, 127, 61, 212, 217, 109, 62, 107, 83, 124, 62, 114, 70, 181, 61, 207, 174, 27, 190, 197, 192, 10, 62, 252, 65, 160, 187, 70, 60, 131, 61, 111, 250, 103, 62, 209, 24, 43, 190, 102, 46, 37, 190, 29, 177, 211, 189, 57, 153, 8, 61, 120, 9, 181, 61, 135, 175, 160, 61, 52, 177, 4, 189, 212, 63, 2, 62, 140, 183, 44, 190, 234, 249, 193, 189, 166, 35, 140, 61, 103, 247, 85, 190, 62, 134, 227, 61, 80, 26, 47, 190, 23, 170, 92, 60, 200, 176, 189, 189, 182, 120, 167, 187, 201, 23, 69, 190, 136, 255, 145, 189, 48, 118, 54, 190, 0, 9, 152, 189, 6, 5, 17, 189, 18, 152, 236, 60, 121, 222, 56, 62, 159, 155, 25, 62, 216, 96, 146, 61, 4, 162, 52, 62, 139, 49, 79, 62, 123, 53, 92, 62, 14, 146, 192, 190, 171, 167, 60, 62, 163, 18, 193, 190, 142, 194, 116, 61, 52, 245, 88, 190, 160, 232, 9, 62, 145, 89, 136, 61, 117, 202, 249, 60, 173, 245, 6, 62, 219, 37, 17, 189, 181, 29, 171, 190, 105, 87, 129, 188, 175, 240, 28, 190, 248, 170, 207, 61, 234, 46, 151, 190, 21, 132, 88, 188, 150, 193, 178, 61, 152, 139, 106, 190, 116, 89, 203, 189, 3, 40, 143, 62, 155, 111, 12, 190, 66, 165, 197, 60, 173, 70, 254, 61, 207, 189, 183, 190, 114, 35, 179, 190, 42, 181, 77, 62, 70, 213, 171, 61, 69, 179, 10, 190, 21, 71, 188, 189, 193, 80, 17, 62, 76, 24, 134, 60, 72, 190, 155, 188, 26, 30, 24, 62, 31, 171, 181, 61, 20, 55, 73, 189, 23, 133, 14, 190, 11, 109, 140, 61, 253, 95, 213, 60, 115, 233, 17, 62, 141, 238, 237, 189, 17, 30, 224, 60, 66, 78, 3, 190, 115, 105, 167, 61, 90, 23, 120, 188, 181, 150, 73, 60, 171, 150, 144, 189, 175, 222, 153, 189, 156, 207, 117, 189, 218, 77, 252, 189, 134, 23, 134, 59, 148, 241, 245, 189, 207, 142, 34, 189, 7, 0, 37, 61, 194, 166, 85, 60, 54, 61, 141, 189, 220, 107, 165, 59, 213, 149, 19, 190, 254, 78, 159, 189, 221, 141, 37, 61, 205, 60, 27, 62, 94, 147, 179, 61, 201, 145, 144, 189, 19, 251, 117, 190, 211, 226, 130, 190, 203, 204, 234, 61, 112, 164, 46, 189, 156, 107, 164, 62, 181, 90, 148, 60, 39, 51, 228, 61, 33, 115, 54, 190, 119, 180, 223, 189, 162, 135, 86, 61, 65, 145, 135, 190, 55, 241, 17, 62, 62, 72, 172, 189, 215, 39, 157, 187, 165, 25, 55, 62, 11, 28, 61, 62, 235, 245, 14, 190, 84, 95, 176, 61, 155, 20, 83, 190, 172, 87, 8, 190, 151, 174, 150, 189, 24, 246, 209, 61, 129, 213, 56, 188, 173, 86, 32, 60, 244, 183, 180, 189, 158, 12, 184, 58, 66, 224, 174, 61, 92, 24, 125, 190, 136, 240, 239, 61, 182, 19, 56, 190, 156, 63, 154, 189, 123, 31, 216, 60, 176, 51, 136, 189, 239, 123, 137, 62, 220, 240, 133, 190, 130, 88, 225, 61, 33, 224, 155, 190, 162, 194, 115, 188, 98, 39, 188, 188, 248, 175, 126, 188, 78, 98, 136, 62, 229, 114, 28, 61, 179, 73, 37, 62, 55, 98, 61, 190, 101, 136, 167, 190, 159, 114, 27, 62, 201, 189, 68, 190, 180, 68, 95, 189, 33, 46, 253, 61, 28, 73, 115, 60, 85, 220, 6, 62, 221, 63, 199, 61, 133, 79, 101, 62, 121, 151, 36, 62, 163, 19, 150, 59, 126, 56, 49, 187, 166, 78, 35, 62, 129, 158, 86, 62, 18, 48, 1, 62, 95, 21, 7, 190, 204, 54, 60, 61, 68, 255, 109, 190, 166, 200, 82, 190, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 150, 209, 79, 61, 1, 14, 208, 60, 174, 63, 178, 190, 32, 121, 13, 61, 231, 3, 189, 61, 90, 213, 125, 62, 42, 206, 176, 189, 172, 46, 8, 62, 253, 21, 51, 61, 74, 181, 83, 188, 65, 148, 40, 188, 10, 252, 135, 190, 44, 45, 205, 60, 64, 233, 23, 62, 109, 63, 153, 188, 212, 127, 130, 62, 203, 108, 236, 61, 208, 234, 41, 60, 180, 125, 46, 62, 54, 144, 21, 189, 152, 51, 129, 61, 244, 131, 204, 61, 62, 221, 105, 189, 170, 152, 231, 60, 37, 43, 142, 61, 94, 247, 221, 61, 106, 202, 146, 61, 80, 218, 81, 61, 48, 127, 154, 189, 4, 54, 102, 188, 101, 55, 237, 189, 184, 1, 42, 62, 42, 44, 172, 189, 56, 151, 10, 189, 101, 49, 216, 189, 164, 252, 222, 188, 193, 98, 188, 61, 214, 206, 47, 61, 210, 154, 35, 62, 134, 158, 13, 62, 205, 73, 223, 189, 243, 214, 54, 62, 58, 112, 37, 190, 182, 58, 133, 189, 222, 122, 110, 60, 212, 96, 33, 187, 139, 19, 146, 189, 193, 49, 187, 61, 229, 124, 214, 60, 13, 51, 12, 190, 198, 231, 48, 62, 152, 145, 216, 189, 134, 65, 35, 60, 42, 215, 61, 189, 40, 218, 197, 61, 145, 24, 121, 188, 52, 63, 6, 62, 255, 141, 77, 190, 103, 80, 141, 61, 91, 206, 161, 61, 159, 220, 173, 189, 45, 96, 239, 189, 88, 167, 119, 62, 232, 79, 137, 61, 200, 135, 174, 189, 83, 99, 172, 188, 129, 58, 145, 188, 15, 194, 158, 189, 80, 108, 167, 189, 90, 167, 59, 189, 241, 19, 124, 60, 33, 160, 186, 61, 198, 210, 55, 189, 119, 153, 133, 61, 126, 148, 113, 189, 66, 137, 212, 188, 28, 16, 210, 61, 11, 244, 247, 61, 207, 57, 32, 62, 171, 59, 85, 190, 250, 85, 125, 61, 232, 66, 97, 61, 90, 128, 50, 190, 199, 41, 45, 61, 241, 9, 203, 59, 152, 72, 165, 61, 171, 127, 11, 62, 169, 196, 124, 190, 205, 177, 134, 60, 70, 113, 204, 189, 221, 122, 14, 190, 61, 229, 38, 62, 164, 221, 43, 190, 194, 185, 80, 189, 253, 112, 6, 189, 201, 206, 21, 190, 85, 82, 1, 190, 176, 57, 251, 188, 2, 147, 83, 190, 175, 81, 50, 62, 83, 78, 52, 190, 83, 149, 202, 61, 212, 151, 15, 62, 53, 78, 40, 60, 158, 96, 30, 190, 186, 154, 188, 189, 189, 20, 18, 190, 36, 9, 93, 190, 242, 191, 32, 61, 154, 27, 188, 61, 33, 25, 50, 61, 196, 172, 155, 61, 76, 143, 29, 188, 96, 54, 186, 61, 0, 130, 42, 61, 248, 156, 134, 61, 160, 90, 130, 189, 108, 11, 30, 60, 206, 125, 88, 189, 153, 135, 7, 62, 10, 94, 12, 62, 220, 249, 39, 190, 178, 67, 138, 189, 23, 182, 97, 189, 202, 168, 30, 190, 226, 18, 122, 62, 72, 218, 144, 61, 163, 93, 175, 61, 206, 243, 122, 190, 137, 67, 212, 190, 219, 104, 68, 190, 230, 183, 158, 61, 200, 30, 221, 61, 7, 23, 139, 61, 171, 237, 69, 62, 18, 186, 150, 61, 88, 4, 193, 190, 146, 51, 169, 61, 72, 56, 73, 190, 226, 166, 78, 190, 180, 216, 164, 61, 40, 170, 112, 62, 84, 139, 34, 190, 254, 6, 169, 62, 90, 234, 24, 62, 152, 198, 244, 60, 192, 242, 87, 190, 101, 129, 116, 61, 103, 141, 92, 189, 88, 115, 173, 190, 176, 162, 74, 60, 47, 243, 140, 62, 196, 5, 17, 62, 7, 160, 148, 190, 45, 211, 80, 187, 54, 81, 232, 189, 50, 68, 153, 190, 225, 225, 141, 62, 65, 29, 78, 62, 110, 122, 55, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 159, 128, 61, 241, 88, 185, 189, 143, 236, 129, 189, 50, 157, 156, 60, 141, 18, 27, 62, 192, 165, 145, 188, 110, 39, 20, 62, 196, 215, 48, 62, 162, 108, 0, 62, 28, 94, 48, 190, 92, 254, 234, 187, 46, 164, 177, 61, 248, 89, 179, 189, 189, 109, 8, 189, 37, 136, 8, 190, 74, 128, 29, 61, 227, 9, 184, 61, 12, 84, 166, 60, 106, 44, 207, 189, 76, 223, 52, 189, 241, 96, 88, 62, 31, 133, 140, 189, 220, 27, 237, 60, 88, 140, 253, 189, 233, 24, 84, 62, 165, 247, 129, 61, 161, 231, 122, 189, 119, 145, 154, 61, 131, 222, 198, 187, 208, 63, 43, 60, 187, 72, 109, 188, 216, 244, 60, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 73, 158, 190, 78, 95, 89, 62, 16, 216, 132, 62, 79, 83, 39, 190, 32, 80, 239, 59, 47, 161, 185, 61, 31, 170, 132, 62, 162, 220, 176, 189, 247, 119, 53, 190, 186, 109, 213, 189, 7, 65, 51, 62, 77, 19, 25, 62, 151, 25, 23, 60, 244, 24, 77, 61, 35, 156, 94, 62, 184, 94, 173, 189, 19, 16, 91, 190, 249, 219, 48, 190, 200, 148, 152, 190, 227, 203, 0, 62, 197, 47, 170, 62, 186, 216, 65, 189, 103, 1, 129, 190, 201, 62, 11, 62, 251, 17, 150, 62, 252, 153, 110, 190, 80, 24, 0, 61, 41, 53, 181, 61, 50, 12, 28, 62, 140, 181, 145, 188, 37, 142, 245, 61, 184, 8, 251, 62, 234, 12, 28, 190, 190, 125, 15, 190, 39, 236, 147, 62, 158, 89, 197, 189, 154, 136, 219, 190, 50, 187, 165, 61, 240, 62, 28, 62, 192, 72, 40, 189, 202, 189, 203, 61, 214, 19, 24, 190, 63, 233, 79, 190, 127, 15, 173, 61, 220, 170, 211, 60, 208, 106, 186, 61, 182, 10, 246, 60, 242, 224, 39, 62, 221, 125, 179, 189, 24, 42, 191, 60, 84, 32, 10, 62, 50, 94, 64, 190, 125, 167, 251, 61, 247, 96, 31, 62, 147, 88, 186, 60, 154, 170, 227, 61, 219, 163, 99, 190, 69, 123, 152, 59, 102, 55, 6, 62, 61, 190, 63, 190, 133, 96, 37, 62, 183, 211, 127, 189, 86, 64, 149, 61, 158, 226, 221, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 222, 214, 189, 142, 205, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 42, 12, 63, 21, 209, 35, 191, 102, 234, 26, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 41, 151, 63, 121, 221, 98, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}