// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 51, 82, 63, 105, 206, 181, 62, 2, 10, 140, 62, 126, 243, 58, 189, 174, 95, 204, 62, 233, 44, 202, 190, 8, 179, 253, 62, 88, 148, 118, 63, 48, 216, 88, 62, 99, 121, 173, 62, 140, 116, 130, 191, 61, 184, 128, 189, 23, 99, 152, 62, 102, 68, 93, 190, 104, 230, 164, 59, 8, 242, 12, 63, 137, 3, 118, 191, 113, 32, 104, 60, 202, 88, 242, 190, 195, 113, 60, 191, 156, 75, 38, 190, 182, 24, 93, 191, 46, 169, 136, 63, 27, 112, 180, 62, 249, 6, 201, 61, 232, 146, 10, 63, 21, 3, 203, 190, 81, 47, 144, 189, 113, 200, 176, 191, 176, 114, 83, 190, 48, 172, 145, 62, 146, 164, 76, 190, 221, 171, 86, 190, 58, 248, 38, 63, 106, 214, 44, 63, 201, 17, 183, 62, 145, 146, 51, 63, 33, 91, 123, 191, 69, 10, 75, 190, 191, 61, 27, 63, 56, 159, 222, 61, 54, 43, 213, 190, 42, 127, 30, 63, 249, 138, 121, 63, 228, 247, 230, 62, 178, 180, 10, 190, 218, 158, 24, 191, 198, 123, 70, 62, 176, 246, 205, 62, 235, 169, 17, 191, 39, 70, 10, 190, 61, 28, 241, 62, 30, 92, 151, 190, 240, 216, 160, 62, 241, 59, 34, 190, 103, 206, 21, 190, 108, 65, 165, 190, 163, 185, 53, 191, 93, 183, 116, 63, 207, 184, 180, 189, 254, 99, 194, 190, 79, 211, 178, 191, 142, 148, 224, 190, 144, 86, 255, 190, 73, 169, 255, 190, 3, 64, 39, 191, 185, 6, 0, 191, 119, 149, 3, 63, 61, 75, 240, 61, 181, 177, 20, 191, 125, 73, 48, 62, 226, 198, 164, 62, 91, 238, 1, 191, 165, 234, 221, 61, 57, 112, 125, 189, 142, 97, 69, 62, 154, 247, 66, 63, 42, 11, 212, 190, 186, 97, 178, 60, 97, 157, 20, 191, 103, 92, 173, 62, 101, 117, 173, 61, 229, 33, 199, 61, 122, 90, 16, 63, 252, 153, 245, 190, 5, 253, 27, 190, 136, 226, 226, 190, 207, 125, 72, 191, 120, 222, 49, 190, 194, 176, 69, 188, 8, 97, 61, 63, 235, 188, 114, 191, 161, 18, 204, 190, 148, 17, 5, 63, 130, 74, 127, 191, 69, 140, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 119, 76, 191, 234, 85, 36, 186, 171, 199, 181, 189, 3, 208, 185, 189, 155, 140, 178, 62, 71, 164, 134, 60, 179, 236, 239, 62, 160, 217, 142, 62, 130, 186, 143, 62, 114, 190, 51, 190, 53, 127, 0, 63, 148, 130, 235, 190, 62, 109, 79, 62, 230, 191, 212, 190, 58, 140, 202, 62, 17, 47, 135, 61, 243, 226, 209, 62, 122, 80, 109, 62, 42, 110, 106, 191, 215, 186, 167, 190, 235, 219, 224, 190, 250, 150, 15, 189, 56, 54, 20, 63, 242, 160, 8, 191, 122, 138, 40, 63, 2, 21, 202, 62, 90, 181, 47, 189, 223, 94, 72, 62, 0, 171, 109, 190, 45, 163, 14, 63, 77, 115, 212, 190, 18, 84, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 143, 1, 190, 56, 251, 82, 62, 167, 194, 63, 62, 240, 75, 21, 191, 186, 204, 217, 61, 187, 36, 162, 189, 235, 109, 228, 189, 91, 48, 137, 60, 9, 255, 73, 62, 117, 122, 123, 62, 59, 118, 44, 62, 158, 141, 205, 188, 109, 21, 187, 189, 71, 230, 157, 190, 24, 99, 138, 62, 233, 219, 228, 190, 159, 228, 17, 62, 89, 115, 13, 189, 209, 103, 123, 190, 211, 155, 164, 188, 102, 237, 139, 190, 149, 149, 193, 189, 146, 228, 162, 62, 199, 181, 219, 190, 179, 105, 156, 62, 35, 145, 9, 62, 178, 212, 86, 190, 20, 3, 8, 190, 191, 203, 176, 189, 73, 218, 13, 62, 46, 171, 32, 191, 193, 209, 0, 191, 133, 116, 147, 190, 245, 117, 255, 190, 215, 236, 188, 190, 181, 36, 160, 189, 228, 140, 190, 190, 135, 145, 224, 189, 111, 115, 130, 62, 134, 104, 21, 62, 140, 217, 76, 190, 127, 240, 84, 62, 212, 36, 202, 190, 185, 184, 156, 188, 22, 108, 233, 61, 30, 34, 0, 190, 116, 239, 36, 191, 124, 83, 203, 62, 204, 129, 56, 60, 119, 48, 79, 190, 173, 31, 7, 62, 160, 177, 58, 190, 16, 230, 220, 60, 236, 167, 147, 190, 125, 13, 39, 61, 117, 128, 225, 189, 188, 39, 235, 60, 21, 177, 26, 190, 31, 52, 226, 190, 115, 166, 77, 189, 205, 74, 182, 190, 23, 56, 47, 62, 68, 50, 96, 190, 2, 54, 200, 60, 3, 80, 219, 62, 31, 208, 122, 189, 9, 91, 220, 62, 181, 59, 101, 190, 196, 127, 47, 62, 243, 23, 152, 190, 238, 160, 248, 190, 60, 133, 24, 62, 199, 118, 45, 62, 172, 227, 17, 190, 50, 208, 30, 190, 176, 166, 238, 62, 114, 16, 56, 191, 103, 237, 169, 59, 118, 56, 141, 61, 13, 15, 37, 190, 115, 201, 190, 190, 187, 115, 190, 61, 29, 12, 46, 189, 200, 92, 193, 190, 195, 5, 190, 189, 219, 135, 85, 190, 150, 88, 18, 190, 252, 60, 194, 190, 154, 163, 181, 190, 130, 68, 189, 62, 253, 222, 84, 62, 159, 202, 169, 189, 254, 142, 29, 190, 47, 130, 42, 191, 36, 42, 185, 190, 49, 228, 27, 190, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 54, 17, 9, 191, 127, 18, 201, 190, 136, 215, 139, 190, 177, 221, 195, 188, 128, 243, 210, 61, 138, 181, 54, 62, 148, 179, 64, 191, 108, 41, 57, 190, 154, 36, 24, 190, 148, 26, 159, 191, 109, 251, 90, 62, 16, 115, 11, 191, 220, 52, 154, 62, 42, 60, 75, 189, 93, 135, 251, 61, 135, 74, 201, 190, 15, 85, 26, 62, 227, 193, 61, 62, 71, 179, 74, 190, 85, 249, 16, 61, 75, 49, 1, 190, 180, 249, 207, 190, 213, 228, 143, 190, 169, 57, 182, 61, 116, 27, 6, 190, 93, 151, 110, 61, 119, 109, 161, 190, 169, 114, 64, 190, 66, 13, 155, 190, 185, 228, 66, 190, 174, 174, 238, 61, 164, 185, 240, 190, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 184, 188, 97, 191, 75, 173, 72, 62, 124, 119, 197, 190, 133, 165, 151, 62, 234, 129, 76, 191, 144, 105, 199, 61, 166, 165, 189, 189, 59, 170, 125, 188, 0, 227, 55, 61, 132, 182, 3, 191, 135, 238, 72, 191, 115, 241, 227, 189, 89, 230, 148, 61, 119, 124, 225, 190, 223, 157, 97, 190, 30, 149, 18, 188, 97, 28, 224, 190, 50, 7, 136, 61, 30, 186, 120, 190, 28, 30, 13, 63, 62, 99, 152, 191, 102, 242, 26, 190, 131, 239, 119, 62, 245, 151, 51, 62, 137, 12, 235, 61, 32, 105, 95, 62, 203, 183, 231, 189, 187, 1, 129, 62, 19, 169, 184, 189, 145, 0, 119, 61, 31, 51, 156, 190, 149, 111, 231, 188, 208, 3, 245, 60, 225, 112, 18, 60, 53, 26, 173, 62, 187, 230, 238, 190, 115, 221, 5, 62, 167, 125, 148, 190, 26, 153, 151, 190, 214, 42, 205, 190, 9, 127, 77, 62, 20, 237, 66, 190, 32, 102, 176, 61, 5, 97, 212, 61, 18, 183, 29, 190, 142, 220, 201, 189, 239, 156, 69, 62, 31, 210, 81, 61, 40, 144, 172, 61, 75, 204, 203, 61, 185, 132, 221, 188, 54, 233, 58, 60, 83, 110, 148, 190, 68, 185, 206, 61, 204, 228, 103, 59, 20, 175, 23, 61, 40, 60, 190, 61, 94, 115, 197, 61, 147, 150, 130, 62, 147, 53, 13, 189, 1, 252, 44, 189, 164, 187, 135, 190, 134, 102, 215, 190, 130, 31, 0, 191, 250, 86, 65, 61, 141, 101, 200, 61, 205, 232, 0, 63, 37, 121, 200, 190, 250, 124, 25, 61, 127, 51, 224, 190, 242, 203, 158, 61, 154, 188, 86, 191, 77, 255, 238, 189, 210, 153, 215, 62, 189, 163, 247, 61, 176, 140, 188, 62, 161, 149, 11, 190, 59, 87, 173, 190, 202, 93, 110, 62, 99, 129, 117, 189, 134, 125, 82, 62, 34, 208, 147, 188, 21, 87, 49, 190, 105, 92, 10, 190, 250, 58, 166, 189, 56, 55, 0, 62, 198, 182, 132, 188, 255, 160, 25, 191, 31, 40, 74, 62, 97, 4, 55, 62, 29, 246, 186, 62, 108, 36, 107, 190, 64, 132, 158, 189, 197, 125, 163, 61, 191, 57, 207, 190, 204, 125, 154, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 137, 60, 59, 190, 167, 33, 216, 190, 115, 48, 248, 189, 45, 132, 67, 62, 198, 252, 199, 61, 224, 146, 126, 62, 146, 146, 131, 190, 196, 225, 1, 60, 223, 75, 88, 190, 216, 79, 109, 190, 200, 150, 41, 188, 0, 74, 183, 190, 236, 252, 67, 62, 98, 129, 195, 60, 59, 81, 178, 60, 211, 158, 219, 62, 211, 4, 130, 60, 225, 21, 137, 62, 101, 42, 34, 62, 132, 110, 37, 190, 143, 184, 180, 60, 129, 229, 199, 189, 179, 14, 9, 62, 229, 111, 59, 61, 143, 220, 86, 189, 183, 99, 37, 190, 217, 237, 4, 61, 182, 84, 116, 62, 243, 75, 216, 190, 2, 216, 29, 62, 16, 25, 166, 188, 121, 236, 143, 61, 23, 101, 225, 188, 170, 32, 13, 62, 100, 254, 245, 190, 70, 70, 201, 61, 249, 221, 182, 189, 191, 104, 1, 62, 21, 32, 236, 190, 251, 224, 219, 189, 103, 60, 42, 189, 122, 174, 165, 190, 126, 177, 205, 61, 10, 52, 152, 190, 37, 237, 48, 189, 211, 242, 117, 62, 149, 121, 45, 190, 25, 132, 161, 62, 25, 25, 189, 61, 152, 93, 76, 62, 4, 251, 209, 62, 62, 246, 146, 62, 107, 251, 150, 59, 107, 116, 193, 61, 161, 18, 28, 191, 177, 83, 250, 189, 210, 28, 13, 190, 103, 97, 206, 61, 86, 221, 144, 62, 69, 168, 71, 190, 155, 157, 186, 187, 24, 187, 177, 190, 243, 147, 173, 62, 197, 76, 220, 61, 225, 76, 251, 189, 249, 198, 7, 189, 99, 217, 162, 189, 116, 126, 95, 61, 251, 167, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 254, 239, 132, 61, 94, 3, 8, 190, 237, 255, 217, 189, 163, 243, 64, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 21, 22, 98, 61, 52, 208, 118, 189, 142, 49, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 252, 163, 247, 61, 162, 136, 222, 189, 175, 186, 33, 190, 39, 50, 46, 190, 34, 114, 142, 61, 233, 83, 34, 61, 140, 168, 229, 61, 128, 14, 252, 61, 85, 237, 52, 190, 174, 118, 234, 61, 125, 219, 137, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 22, 96, 9, 62, 235, 252, 27, 190, 237, 52, 212, 190, 183, 125, 117, 191, 235, 166, 233, 190, 209, 237, 65, 61, 119, 248, 169, 190, 40, 107, 77, 62, 53, 88, 82, 190, 122, 86, 33, 191, 95, 205, 55, 61, 233, 13, 189, 190, 238, 219, 125, 190, 45, 124, 191, 190, 144, 2, 209, 189, 235, 197, 1, 191, 22, 98, 194, 189, 137, 22, 11, 191, 176, 191, 6, 63, 97, 181, 132, 191, 117, 63, 158, 190, 179, 75, 86, 62, 26, 71, 253, 60, 16, 211, 189, 188, 211, 35, 100, 62, 220, 141, 207, 190, 241, 118, 98, 189, 222, 22, 221, 60, 4, 106, 186, 61, 2, 157, 216, 190, 95, 209, 146, 189, 231, 85, 235, 188, 56, 154, 211, 61, 146, 187, 138, 62, 19, 152, 32, 191, 31, 217, 192, 61, 212, 153, 203, 190, 91, 22, 152, 61, 28, 248, 198, 190, 19, 108, 55, 61, 140, 165, 1, 62, 89, 101, 89, 62, 247, 58, 34, 62, 206, 255, 9, 191, 28, 244, 125, 189, 162, 251, 34, 62, 10, 49, 11, 190, 142, 2, 9, 62, 126, 5, 27, 190, 144, 7, 215, 189, 162, 133, 106, 189, 189, 107, 58, 190, 210, 247, 106, 189, 88, 90, 20, 190, 114, 39, 250, 189, 157, 127, 207, 61, 170, 109, 17, 62, 138, 22, 97, 190, 118, 157, 96, 190, 120, 154, 108, 189, 237, 224, 21, 190, 7, 75, 169, 190, 56, 223, 191, 190, 139, 138, 225, 62, 87, 244, 21, 190, 182, 80, 137, 62, 102, 177, 169, 190, 9, 186, 127, 62, 250, 244, 13, 62, 230, 79, 183, 191, 182, 105, 193, 189, 240, 221, 228, 187, 123, 130, 162, 191, 173, 96, 44, 62, 244, 160, 49, 62, 51, 112, 125, 189, 182, 254, 180, 189, 215, 114, 139, 62, 32, 110, 21, 61, 5, 149, 9, 62, 83, 250, 202, 61, 247, 3, 73, 190, 214, 52, 61, 190, 31, 158, 240, 61, 165, 210, 20, 191, 152, 23, 159, 190, 104, 187, 196, 188, 84, 14, 210, 190, 176, 248, 120, 61, 220, 2, 167, 61, 20, 45, 36, 62, 91, 124, 108, 190, 143, 46, 234, 190, 93, 195, 222, 190, 89, 16, 210, 190, 172, 229, 169, 189, 182, 214, 194, 61, 52, 28, 0, 63, 75, 238, 45, 62, 116, 142, 8, 62, 221, 249, 4, 190, 111, 202, 109, 62, 41, 183, 138, 191, 250, 19, 19, 61, 255, 113, 168, 62, 86, 152, 195, 61, 76, 98, 138, 189, 82, 2, 247, 189, 3, 20, 85, 190, 102, 214, 197, 190, 232, 38, 225, 60, 113, 214, 62, 189, 123, 150, 131, 191, 207, 105, 149, 190, 224, 98, 95, 189, 49, 92, 137, 190, 232, 199, 82, 61, 133, 83, 25, 62, 74, 2, 30, 189, 56, 185, 221, 61, 237, 201, 94, 188, 48, 202, 32, 61, 220, 235, 97, 191, 222, 206, 28, 61, 92, 235, 152, 62, 145, 221, 98, 190, 181, 93, 143, 190, 174, 71, 6, 61, 40, 161, 17, 189, 53, 219, 3, 63, 105, 200, 210, 190, 234, 108, 120, 62, 124, 59, 73, 190, 239, 233, 0, 191, 247, 251, 242, 189, 243, 161, 226, 61, 24, 118, 193, 190, 123, 218, 25, 62, 60, 252, 137, 61, 219, 45, 35, 190, 244, 62, 51, 189, 94, 29, 128, 62, 157, 52, 234, 190, 128, 82, 200, 188, 138, 63, 167, 61, 62, 167, 170, 189, 135, 162, 113, 62, 187, 224, 179, 188, 52, 80, 127, 189, 182, 190, 0, 62, 35, 66, 192, 189, 119, 229, 205, 188, 232, 56, 54, 62, 2, 236, 144, 190, 189, 178, 216, 59, 81, 247, 24, 62, 229, 212, 240, 190, 201, 188, 169, 190, 190, 70, 228, 190, 113, 170, 255, 190, 93, 167, 69, 62, 23, 222, 145, 190, 137, 16, 199, 189, 166, 240, 116, 62, 157, 139, 63, 62, 173, 167, 137, 190, 163, 63, 12, 62, 31, 207, 134, 61, 165, 238, 110, 190, 163, 201, 31, 62, 187, 139, 50, 190, 74, 112, 207, 187, 110, 241, 0, 62, 74, 61, 98, 188, 218, 194, 128, 62, 226, 208, 64, 62, 83, 3, 39, 189, 138, 76, 33, 190, 101, 107, 108, 62, 84, 195, 157, 190, 0, 130, 137, 189, 31, 160, 31, 189, 1, 23, 71, 189, 186, 18, 26, 62, 240, 132, 86, 62, 83, 91, 156, 189, 200, 121, 35, 62, 77, 238, 237, 60, 103, 188, 200, 189, 98, 50, 251, 61, 164, 177, 217, 61, 114, 110, 91, 191, 62, 4, 220, 61, 150, 2, 32, 190, 2, 80, 65, 61, 41, 23, 185, 61, 3, 229, 86, 62, 58, 169, 120, 190, 134, 60, 62, 62, 234, 16, 0, 61, 67, 44, 47, 189, 171, 97, 124, 189, 65, 195, 246, 190, 211, 183, 89, 62, 82, 136, 227, 62, 138, 23, 43, 190, 103, 71, 189, 62, 64, 116, 87, 62, 116, 160, 170, 188, 93, 175, 73, 190, 216, 75, 171, 190, 238, 240, 246, 190, 172, 39, 51, 190, 59, 201, 142, 61, 18, 3, 169, 62, 87, 222, 70, 61, 14, 39, 50, 190, 146, 253, 21, 189, 140, 255, 61, 61, 229, 74, 143, 190, 61, 175, 165, 61, 53, 246, 151, 62, 27, 98, 57, 62, 16, 237, 30, 63, 154, 3, 77, 190, 106, 124, 124, 189, 88, 163, 185, 61, 15, 53, 43, 61, 129, 218, 186, 62, 208, 164, 214, 190, 127, 172, 98, 187, 6, 97, 135, 190, 175, 126, 172, 189, 207, 83, 219, 188, 20, 59, 96, 62, 112, 115, 42, 61, 221, 42, 133, 62, 2, 223, 67, 190, 87, 94, 39, 62, 177, 73, 201, 61, 102, 159, 226, 188, 211, 25, 59, 61, 37, 129, 117, 191, 182, 48, 48, 190, 159, 51, 59, 190, 7, 205, 94, 190, 0, 249, 67, 190, 6, 122, 10, 190, 149, 87, 177, 190, 166, 144, 137, 62, 150, 50, 111, 62, 151, 233, 231, 189, 12, 26, 83, 61, 254, 17, 106, 62, 86, 155, 11, 62, 104, 19, 19, 62, 121, 189, 27, 62, 167, 197, 206, 62, 156, 170, 55, 190, 43, 77, 48, 62, 23, 8, 142, 190, 80, 2, 92, 62, 94, 123, 149, 191, 106, 107, 163, 61, 235, 128, 199, 62, 36, 18, 25, 188, 50, 48, 60, 62, 202, 184, 152, 189, 161, 183, 216, 190, 220, 155, 131, 190, 221, 1, 52, 62, 231, 193, 142, 62, 28, 72, 85, 191, 241, 7, 50, 190, 133, 143, 238, 189, 238, 253, 131, 190, 12, 243, 154, 189, 166, 97, 132, 62, 202, 232, 57, 190, 38, 140, 241, 61, 14, 153, 142, 61, 139, 202, 9, 189, 15, 119, 57, 191, 94, 186, 38, 62, 229, 26, 142, 62, 131, 177, 167, 190, 176, 36, 158, 190, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 76, 115, 39, 191, 206, 116, 138, 189, 155, 169, 195, 190, 158, 135, 162, 62, 4, 83, 124, 61, 141, 223, 245, 62, 228, 43, 251, 189, 40, 188, 96, 62, 132, 209, 40, 189, 27, 52, 160, 190, 6, 183, 31, 62, 25, 51, 2, 191, 5, 180, 152, 62, 95, 190, 146, 62, 100, 139, 92, 188, 202, 187, 0, 62, 167, 134, 118, 62, 108, 211, 16, 190, 228, 14, 143, 189, 96, 213, 159, 61, 34, 27, 183, 190, 23, 219, 138, 190, 77, 182, 37, 62, 3, 230, 95, 187, 138, 14, 74, 61, 77, 197, 108, 61, 150, 120, 12, 189, 128, 248, 129, 61, 36, 216, 0, 191, 124, 211, 31, 61, 52, 159, 123, 61, 29, 172, 107, 189, 216, 67, 198, 62, 139, 78, 244, 189, 9, 54, 198, 62, 124, 232, 5, 191, 178, 214, 75, 62, 5, 114, 212, 190, 229, 205, 172, 61, 3, 38, 14, 190, 85, 43, 24, 60, 98, 42, 184, 62, 93, 230, 189, 61, 254, 148, 128, 62, 4, 37, 5, 190, 4, 60, 250, 190, 24, 227, 108, 62, 73, 150, 42, 190, 108, 100, 149, 61, 195, 254, 15, 62, 217, 167, 35, 190, 255, 62, 233, 61, 142, 42, 151, 61, 174, 124, 121, 62, 79, 228, 149, 62, 49, 150, 40, 62, 175, 54, 18, 62, 30, 89, 52, 62, 163, 242, 248, 61, 140, 68, 34, 62, 207, 51, 63, 190, 247, 61, 108, 62, 37, 159, 240, 190, 94, 40, 228, 190, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 39, 50, 255, 190, 82, 222, 227, 61, 250, 168, 163, 190, 34, 185, 150, 189, 208, 41, 54, 62, 35, 244, 119, 62, 79, 158, 116, 190, 39, 190, 51, 62, 196, 81, 52, 62, 116, 227, 127, 190, 254, 193, 113, 61, 59, 71, 204, 190, 176, 127, 180, 61, 201, 109, 62, 62, 161, 214, 36, 61, 148, 13, 47, 62, 79, 195, 48, 62, 163, 36, 212, 60, 17, 71, 0, 62, 192, 170, 37, 62, 241, 9, 242, 189, 66, 142, 198, 61, 126, 165, 226, 60, 221, 225, 161, 60, 179, 255, 213, 61, 37, 74, 131, 62, 192, 82, 4, 189, 98, 200, 145, 61, 218, 60, 218, 188, 252, 138, 102, 189, 201, 101, 219, 189, 28, 67, 127, 61, 233, 8, 66, 191, 32, 232, 69, 62, 196, 83, 243, 190, 166, 209, 97, 189, 230, 182, 251, 61, 13, 177, 11, 62, 206, 48, 144, 188, 40, 43, 233, 61, 44, 49, 93, 60, 120, 117, 145, 190, 163, 250, 4, 190, 16, 80, 162, 190, 246, 222, 215, 61, 231, 249, 115, 62, 34, 78, 12, 190, 186, 204, 72, 62, 190, 152, 200, 60, 27, 133, 124, 189, 170, 32, 129, 62, 235, 129, 170, 62, 163, 75, 133, 190, 42, 222, 249, 189, 63, 127, 238, 60, 107, 88, 89, 189, 50, 115, 0, 62, 38, 32, 69, 189, 111, 226, 96, 62, 96, 169, 161, 61, 164, 246, 148, 189, 254, 208, 89, 190, 115, 6, 197, 62, 96, 169, 226, 61, 60, 143, 78, 190, 182, 233, 24, 191, 126, 45, 118, 189, 103, 232, 69, 190, 81, 24, 58, 60, 68, 181, 53, 60, 109, 224, 190, 61, 115, 42, 187, 189, 7, 72, 66, 190, 105, 184, 174, 189, 97, 162, 163, 189, 76, 180, 239, 189, 159, 129, 134, 62, 32, 217, 203, 189, 56, 6, 25, 62, 93, 126, 216, 190, 65, 105, 113, 62, 131, 55, 129, 61, 48, 247, 137, 190, 202, 138, 90, 190, 136, 225, 170, 190, 12, 97, 130, 190, 56, 182, 247, 61, 24, 34, 105, 190, 229, 11, 187, 61, 33, 247, 146, 190, 226, 247, 221, 190, 41, 198, 16, 62, 227, 98, 238, 190, 99, 108, 209, 61, 17, 14, 15, 190, 86, 73, 183, 190, 91, 110, 65, 191, 103, 94, 22, 62, 203, 42, 234, 190, 142, 126, 232, 62, 99, 192, 246, 189, 231, 57, 167, 62, 168, 109, 63, 61, 64, 182, 70, 62, 82, 122, 178, 189, 152, 5, 119, 190, 0, 80, 209, 189, 220, 54, 2, 191, 180, 130, 91, 62, 137, 59, 158, 62, 228, 152, 147, 187, 40, 68, 138, 61, 139, 174, 207, 60, 143, 97, 246, 61, 44, 218, 37, 191, 49, 230, 5, 63, 182, 44, 254, 190, 160, 49, 132, 190, 68, 252, 247, 60, 174, 54, 6, 62, 129, 221, 56, 62, 212, 94, 124, 189, 250, 231, 206, 187, 228, 164, 149, 189, 68, 109, 227, 190, 235, 251, 57, 62, 248, 48, 162, 62, 94, 232, 18, 62, 221, 216, 104, 191, 188, 188, 33, 191, 173, 9, 158, 61, 252, 34, 83, 62, 78, 249, 228, 189, 7, 44, 27, 62, 251, 110, 72, 61, 158, 13, 90, 62, 81, 214, 241, 190, 97, 48, 201, 61, 120, 255, 240, 190, 134, 133, 137, 190, 42, 6, 147, 62, 88, 30, 124, 62, 97, 134, 115, 189, 221, 43, 57, 62, 236, 227, 56, 62, 75, 188, 229, 60, 137, 214, 131, 190, 117, 103, 160, 62, 141, 73, 157, 190, 185, 142, 47, 191, 183, 71, 251, 61, 252, 110, 84, 62, 229, 13, 76, 62, 57, 13, 198, 190, 167, 88, 67, 189, 42, 153, 94, 189, 179, 130, 49, 191, 81, 165, 86, 62, 250, 134, 74, 62, 214, 117, 99, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 178, 239, 61, 194, 242, 37, 189, 23, 25, 169, 189, 50, 157, 156, 60, 203, 36, 230, 61, 109, 79, 180, 189, 218, 153, 19, 62, 174, 166, 50, 62, 139, 167, 57, 62, 28, 94, 48, 190, 144, 9, 241, 188, 60, 137, 75, 189, 51, 245, 204, 189, 15, 86, 55, 189, 78, 56, 66, 190, 85, 229, 47, 60, 8, 82, 131, 61, 172, 225, 7, 62, 250, 152, 218, 189, 9, 221, 81, 187, 128, 37, 140, 62, 48, 59, 82, 189, 226, 109, 241, 61, 52, 58, 2, 190, 74, 198, 147, 62, 47, 134, 25, 62, 161, 231, 122, 189, 24, 156, 46, 62, 145, 173, 187, 60, 164, 12, 141, 61, 125, 5, 164, 61, 86, 145, 111, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 185, 212, 190, 205, 198, 25, 63, 145, 238, 93, 63, 79, 83, 39, 190, 85, 68, 135, 61, 119, 158, 141, 62, 38, 150, 5, 63, 214, 236, 92, 190, 246, 45, 252, 190, 186, 109, 213, 189, 27, 125, 186, 61, 11, 132, 192, 62, 203, 200, 24, 60, 4, 241, 75, 61, 230, 166, 235, 62, 254, 3, 194, 190, 195, 190, 180, 190, 142, 150, 37, 191, 215, 116, 209, 190, 78, 73, 238, 61, 24, 141, 238, 62, 73, 154, 179, 190, 234, 206, 55, 191, 97, 25, 11, 62, 14, 100, 254, 62, 125, 150, 202, 190, 80, 24, 0, 61, 131, 251, 250, 61, 137, 90, 143, 62, 53, 218, 219, 189, 168, 215, 183, 62, 236, 21, 73, 63, 152, 18, 26, 190, 193, 198, 169, 190, 107, 146, 173, 62, 158, 89, 197, 189, 203, 212, 97, 191, 202, 33, 113, 189, 214, 18, 143, 62, 11, 6, 14, 190, 71, 160, 117, 62, 214, 19, 24, 190, 229, 121, 138, 190, 71, 98, 112, 62, 121, 81, 212, 60, 28, 42, 186, 61, 16, 121, 158, 62, 195, 55, 96, 62, 19, 87, 151, 190, 157, 126, 13, 189, 27, 166, 198, 61, 204, 185, 100, 190, 191, 92, 16, 61, 194, 137, 99, 62, 73, 65, 168, 60, 83, 154, 227, 61, 183, 149, 129, 190, 163, 221, 170, 60, 102, 55, 6, 62, 173, 144, 91, 190, 134, 151, 101, 62, 213, 195, 134, 190, 208, 125, 131, 62, 145, 55, 143, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 126, 18, 190, 171, 233, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 68, 137, 63, 141, 170, 113, 63, 191, 149, 205, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 165, 45, 192, 234, 52, 18, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}