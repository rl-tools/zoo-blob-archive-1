// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 29, 81, 63, 247, 184, 129, 62, 68, 211, 135, 62, 174, 225, 36, 189, 75, 22, 242, 62, 217, 181, 204, 190, 28, 176, 254, 62, 191, 93, 117, 63, 52, 76, 78, 62, 179, 122, 172, 62, 200, 46, 132, 191, 204, 65, 103, 189, 82, 206, 167, 62, 220, 152, 130, 190, 22, 54, 62, 58, 234, 106, 13, 63, 101, 213, 129, 191, 218, 230, 33, 189, 159, 174, 251, 190, 194, 7, 35, 191, 154, 28, 17, 190, 203, 28, 75, 191, 29, 191, 140, 63, 131, 238, 178, 62, 36, 103, 239, 61, 147, 227, 17, 63, 72, 245, 201, 190, 179, 32, 246, 189, 166, 194, 158, 191, 204, 249, 86, 190, 172, 47, 161, 62, 87, 166, 130, 190, 232, 175, 125, 190, 116, 30, 37, 63, 114, 247, 35, 63, 252, 28, 199, 62, 149, 143, 56, 63, 133, 204, 98, 191, 120, 26, 67, 190, 8, 15, 32, 63, 252, 254, 104, 61, 124, 54, 194, 190, 67, 149, 34, 63, 180, 17, 124, 63, 110, 131, 214, 62, 213, 166, 171, 189, 27, 132, 44, 191, 195, 166, 80, 62, 176, 197, 237, 62, 226, 172, 254, 190, 92, 204, 51, 190, 157, 131, 13, 63, 194, 21, 107, 190, 185, 248, 132, 62, 191, 213, 19, 189, 216, 73, 85, 190, 30, 22, 162, 190, 253, 62, 51, 191, 171, 78, 115, 63, 46, 152, 220, 189, 224, 109, 186, 190, 101, 46, 160, 191, 82, 223, 221, 190, 187, 94, 192, 190, 148, 154, 246, 190, 193, 134, 59, 191, 21, 9, 11, 191, 217, 252, 220, 62, 168, 182, 84, 61, 137, 39, 238, 190, 130, 74, 151, 188, 127, 68, 180, 62, 190, 231, 245, 190, 114, 146, 7, 61, 74, 77, 140, 189, 42, 77, 67, 62, 92, 197, 78, 63, 171, 194, 198, 190, 36, 85, 129, 189, 103, 210, 15, 191, 247, 36, 170, 62, 99, 37, 153, 62, 221, 104, 69, 62, 138, 53, 8, 63, 151, 27, 63, 190, 197, 99, 194, 60, 185, 43, 4, 191, 245, 220, 82, 191, 33, 183, 66, 190, 132, 131, 139, 59, 74, 85, 61, 63, 7, 110, 98, 191, 71, 13, 214, 190, 208, 16, 4, 63, 123, 61, 118, 191, 207, 2, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 142, 69, 191, 128, 192, 250, 60, 107, 32, 166, 189, 227, 136, 172, 189, 239, 31, 175, 62, 56, 138, 94, 61, 138, 25, 156, 62, 154, 182, 107, 62, 142, 49, 186, 62, 14, 63, 241, 189, 113, 189, 1, 63, 38, 163, 222, 190, 220, 191, 84, 62, 35, 30, 199, 190, 125, 169, 209, 62, 241, 237, 226, 60, 10, 108, 250, 62, 14, 223, 129, 62, 82, 140, 73, 191, 163, 87, 168, 190, 40, 116, 250, 190, 54, 53, 191, 188, 38, 249, 20, 63, 111, 44, 30, 191, 231, 201, 36, 63, 65, 18, 207, 62, 184, 44, 25, 61, 192, 200, 106, 62, 55, 216, 139, 190, 239, 97, 225, 62, 83, 209, 201, 190, 2, 12, 148, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 148, 235, 189, 253, 72, 94, 62, 240, 171, 61, 62, 125, 205, 21, 191, 186, 67, 235, 61, 169, 7, 164, 189, 171, 237, 0, 190, 28, 234, 110, 188, 110, 52, 77, 62, 157, 79, 141, 62, 91, 140, 55, 62, 204, 20, 204, 188, 100, 236, 161, 189, 152, 40, 153, 190, 196, 151, 137, 62, 108, 154, 209, 190, 229, 160, 29, 62, 43, 163, 11, 189, 151, 72, 62, 190, 66, 122, 139, 189, 25, 113, 56, 190, 71, 112, 106, 189, 28, 99, 128, 62, 4, 26, 200, 190, 53, 107, 136, 62, 51, 172, 10, 62, 149, 158, 75, 190, 21, 153, 247, 189, 144, 182, 68, 189, 172, 95, 198, 61, 71, 161, 20, 191, 22, 246, 221, 190, 133, 116, 147, 190, 75, 111, 141, 190, 119, 46, 155, 190, 21, 188, 100, 190, 232, 69, 4, 191, 137, 182, 113, 190, 234, 75, 15, 62, 215, 150, 235, 61, 193, 152, 22, 190, 124, 223, 4, 62, 248, 173, 245, 190, 185, 184, 156, 188, 77, 202, 176, 59, 30, 34, 0, 190, 21, 140, 198, 190, 167, 83, 151, 62, 208, 64, 137, 189, 159, 81, 81, 190, 173, 31, 7, 62, 140, 77, 13, 190, 15, 182, 190, 189, 217, 93, 158, 190, 154, 88, 110, 188, 185, 6, 37, 189, 48, 183, 74, 189, 132, 131, 51, 189, 17, 209, 255, 190, 140, 134, 230, 59, 100, 35, 99, 190, 188, 132, 178, 61, 112, 29, 109, 190, 171, 193, 105, 189, 40, 18, 195, 62, 93, 244, 162, 189, 160, 136, 225, 62, 29, 142, 45, 190, 111, 242, 42, 62, 91, 152, 165, 190, 137, 172, 232, 190, 199, 243, 25, 62, 205, 106, 1, 62, 172, 227, 17, 190, 33, 98, 24, 190, 100, 145, 239, 62, 140, 197, 31, 191, 230, 33, 154, 61, 207, 7, 147, 61, 165, 67, 136, 190, 42, 206, 163, 190, 202, 134, 168, 61, 29, 12, 46, 189, 53, 126, 208, 190, 195, 5, 190, 189, 242, 40, 64, 190, 208, 23, 18, 190, 66, 237, 216, 190, 252, 164, 184, 190, 239, 163, 166, 62, 144, 244, 24, 62, 219, 1, 183, 189, 251, 138, 9, 190, 211, 176, 58, 191, 66, 196, 158, 190, 79, 227, 24, 190, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 146, 60, 209, 190, 216, 125, 173, 190, 193, 223, 95, 190, 139, 148, 112, 189, 107, 76, 234, 61, 174, 63, 50, 62, 216, 152, 26, 191, 17, 80, 49, 190, 80, 170, 250, 189, 171, 30, 145, 191, 37, 102, 101, 62, 248, 234, 238, 190, 255, 22, 155, 62, 175, 113, 3, 189, 232, 98, 34, 62, 7, 153, 192, 190, 132, 145, 33, 62, 9, 41, 76, 62, 71, 179, 74, 190, 85, 249, 16, 61, 221, 58, 254, 189, 47, 233, 211, 190, 207, 160, 4, 190, 169, 57, 182, 61, 158, 182, 216, 189, 6, 208, 178, 61, 29, 186, 145, 190, 21, 203, 35, 190, 40, 234, 158, 190, 185, 228, 66, 190, 99, 250, 180, 61, 139, 240, 2, 191, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 236, 42, 49, 191, 200, 216, 55, 62, 84, 6, 255, 190, 86, 12, 107, 62, 22, 33, 73, 191, 138, 48, 154, 61, 57, 61, 211, 60, 224, 5, 248, 188, 159, 237, 34, 61, 208, 56, 5, 191, 122, 170, 77, 191, 125, 3, 20, 190, 99, 48, 130, 60, 122, 48, 235, 190, 149, 167, 138, 190, 3, 87, 22, 61, 18, 74, 241, 190, 211, 75, 174, 61, 195, 17, 14, 190, 124, 98, 10, 63, 170, 112, 142, 191, 98, 224, 57, 190, 115, 188, 115, 62, 59, 217, 63, 62, 58, 138, 12, 62, 155, 99, 87, 62, 143, 185, 174, 189, 198, 156, 113, 62, 103, 23, 16, 190, 50, 238, 235, 61, 253, 31, 44, 190, 13, 15, 217, 188, 242, 115, 183, 189, 75, 54, 189, 188, 189, 22, 162, 62, 192, 62, 223, 190, 62, 151, 26, 62, 200, 85, 140, 190, 208, 47, 24, 190, 146, 111, 194, 190, 66, 21, 61, 62, 115, 209, 22, 189, 93, 163, 209, 61, 4, 209, 103, 61, 123, 134, 248, 189, 175, 76, 19, 190, 243, 103, 58, 62, 172, 133, 159, 60, 153, 206, 217, 61, 216, 16, 202, 61, 91, 211, 71, 189, 148, 109, 79, 189, 36, 69, 121, 190, 72, 72, 198, 61, 116, 148, 28, 188, 38, 87, 149, 184, 45, 82, 223, 61, 168, 227, 165, 61, 112, 81, 98, 62, 133, 28, 99, 189, 14, 154, 101, 189, 184, 39, 66, 190, 236, 32, 193, 190, 187, 217, 214, 190, 205, 224, 133, 61, 198, 237, 221, 61, 244, 0, 255, 62, 143, 69, 227, 190, 56, 227, 32, 61, 118, 243, 233, 190, 47, 27, 103, 61, 90, 172, 71, 191, 122, 132, 240, 189, 149, 250, 195, 62, 192, 56, 0, 62, 35, 151, 179, 62, 43, 194, 7, 190, 86, 217, 163, 190, 32, 32, 107, 62, 15, 229, 161, 189, 104, 96, 84, 62, 15, 111, 117, 188, 18, 95, 137, 189, 243, 168, 27, 190, 133, 166, 132, 189, 12, 72, 4, 62, 255, 145, 151, 189, 154, 23, 14, 191, 31, 240, 40, 62, 221, 183, 57, 62, 83, 202, 183, 62, 79, 100, 122, 190, 11, 216, 133, 189, 125, 252, 93, 61, 233, 118, 187, 190, 168, 100, 133, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 251, 62, 79, 189, 195, 171, 184, 190, 95, 69, 233, 189, 218, 5, 46, 62, 202, 122, 194, 61, 3, 26, 117, 62, 221, 64, 87, 190, 121, 37, 103, 188, 249, 16, 57, 190, 76, 185, 36, 190, 254, 77, 58, 60, 51, 192, 175, 190, 19, 218, 75, 62, 136, 106, 132, 61, 239, 83, 58, 60, 67, 147, 234, 62, 50, 28, 170, 60, 229, 184, 135, 62, 135, 225, 32, 62, 7, 31, 183, 190, 72, 51, 224, 61, 239, 93, 243, 188, 246, 166, 175, 61, 55, 231, 232, 61, 57, 12, 163, 189, 208, 34, 12, 190, 224, 10, 59, 61, 245, 154, 118, 62, 182, 77, 187, 190, 107, 241, 14, 62, 60, 29, 250, 60, 180, 119, 14, 62, 6, 103, 144, 61, 94, 165, 206, 61, 95, 31, 225, 190, 224, 33, 120, 62, 106, 22, 179, 189, 222, 162, 51, 62, 22, 172, 219, 190, 121, 18, 95, 189, 75, 120, 132, 189, 204, 24, 254, 189, 98, 105, 183, 61, 237, 161, 113, 190, 32, 32, 217, 188, 15, 207, 107, 62, 144, 20, 53, 190, 84, 254, 151, 62, 92, 21, 193, 61, 163, 112, 48, 62, 20, 198, 174, 62, 168, 51, 81, 62, 68, 159, 110, 61, 20, 121, 176, 61, 110, 128, 12, 191, 99, 225, 241, 189, 17, 196, 33, 190, 108, 224, 151, 61, 185, 255, 136, 62, 211, 220, 69, 190, 203, 117, 29, 189, 5, 126, 201, 190, 121, 94, 190, 62, 181, 127, 28, 62, 225, 76, 251, 189, 22, 163, 188, 188, 143, 248, 148, 189, 116, 126, 95, 61, 8, 195, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 20, 55, 169, 61, 62, 251, 240, 189, 237, 255, 217, 189, 52, 136, 47, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 20, 214, 135, 61, 52, 208, 118, 189, 215, 50, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 148, 22, 8, 62, 162, 136, 222, 189, 214, 244, 31, 190, 96, 118, 30, 190, 34, 114, 142, 61, 135, 129, 83, 61, 116, 140, 5, 62, 128, 14, 252, 61, 100, 214, 52, 190, 218, 243, 237, 61, 248, 84, 117, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 182, 249, 212, 61, 227, 11, 250, 189, 237, 52, 212, 190, 12, 251, 119, 191, 235, 166, 233, 190, 127, 197, 11, 62, 133, 28, 73, 190, 138, 122, 66, 62, 42, 153, 70, 190, 191, 73, 41, 191, 225, 56, 65, 61, 187, 12, 189, 190, 40, 133, 145, 190, 155, 110, 156, 190, 87, 173, 30, 190, 179, 56, 6, 191, 109, 177, 196, 189, 196, 225, 235, 190, 249, 245, 18, 63, 0, 232, 123, 191, 147, 16, 180, 190, 188, 178, 155, 62, 217, 38, 232, 60, 152, 50, 123, 61, 251, 93, 92, 62, 157, 0, 218, 190, 20, 70, 44, 189, 31, 180, 16, 189, 229, 139, 88, 62, 114, 112, 163, 190, 15, 175, 143, 189, 14, 12, 49, 60, 106, 58, 186, 61, 250, 42, 146, 62, 236, 183, 26, 191, 75, 136, 231, 61, 220, 224, 238, 190, 178, 81, 242, 61, 233, 37, 110, 190, 152, 173, 252, 60, 185, 174, 64, 62, 78, 163, 94, 62, 182, 123, 44, 62, 191, 20, 215, 190, 14, 238, 107, 189, 147, 76, 35, 62, 103, 71, 11, 190, 192, 45, 39, 62, 189, 129, 125, 190, 7, 85, 132, 189, 112, 111, 37, 190, 150, 251, 157, 189, 146, 7, 53, 189, 245, 216, 53, 190, 253, 185, 250, 189, 245, 197, 187, 61, 166, 181, 253, 61, 165, 210, 91, 190, 96, 73, 58, 190, 144, 62, 125, 189, 118, 91, 253, 189, 97, 81, 44, 190, 18, 29, 32, 190, 41, 229, 173, 62, 224, 201, 129, 190, 175, 191, 130, 62, 168, 112, 156, 190, 185, 130, 131, 62, 127, 211, 24, 62, 185, 237, 120, 191, 101, 32, 111, 189, 203, 176, 198, 188, 196, 221, 100, 191, 249, 250, 52, 62, 41, 154, 14, 62, 143, 22, 81, 189, 34, 145, 17, 190, 205, 202, 136, 62, 25, 187, 20, 60, 101, 145, 20, 62, 53, 199, 201, 61, 247, 3, 73, 190, 72, 242, 4, 190, 31, 158, 240, 61, 7, 71, 40, 191, 203, 241, 138, 190, 1, 160, 7, 189, 42, 32, 188, 190, 23, 210, 55, 61, 21, 77, 103, 61, 46, 226, 24, 62, 58, 120, 105, 190, 248, 209, 187, 190, 46, 149, 220, 190, 20, 121, 198, 190, 172, 229, 169, 189, 122, 10, 240, 61, 76, 91, 8, 63, 26, 10, 238, 189, 4, 177, 108, 61, 98, 3, 183, 190, 224, 203, 77, 62, 147, 105, 139, 191, 44, 153, 41, 61, 88, 221, 130, 62, 125, 217, 133, 61, 102, 20, 154, 189, 134, 198, 46, 190, 86, 80, 21, 190, 229, 240, 96, 190, 198, 114, 250, 61, 136, 153, 174, 189, 31, 181, 40, 191, 6, 87, 15, 190, 162, 115, 93, 189, 24, 13, 126, 190, 8, 29, 78, 61, 60, 254, 199, 61, 160, 246, 27, 189, 180, 44, 128, 61, 127, 150, 141, 187, 42, 92, 141, 62, 115, 66, 62, 191, 70, 64, 107, 61, 251, 76, 138, 62, 113, 50, 64, 190, 233, 15, 137, 190, 214, 219, 142, 61, 38, 56, 3, 189, 57, 93, 251, 62, 74, 62, 224, 190, 138, 182, 106, 62, 87, 19, 99, 190, 184, 124, 224, 190, 120, 214, 161, 188, 235, 75, 212, 61, 70, 230, 188, 190, 244, 30, 14, 62, 53, 213, 45, 61, 152, 211, 45, 190, 235, 114, 146, 189, 229, 128, 105, 62, 122, 169, 246, 190, 35, 145, 33, 189, 25, 96, 112, 61, 46, 65, 144, 189, 225, 111, 112, 62, 15, 133, 71, 61, 126, 211, 17, 189, 96, 223, 25, 62, 199, 197, 171, 189, 44, 11, 69, 188, 84, 123, 43, 62, 200, 148, 168, 190, 254, 155, 244, 187, 44, 13, 41, 62, 85, 137, 177, 190, 233, 228, 156, 190, 94, 204, 204, 190, 5, 178, 188, 190, 25, 216, 54, 62, 243, 210, 152, 190, 137, 80, 35, 189, 69, 125, 117, 62, 54, 187, 85, 62, 125, 5, 46, 190, 152, 3, 36, 62, 23, 119, 127, 61, 241, 57, 8, 190, 191, 182, 44, 62, 140, 251, 52, 190, 210, 124, 22, 60, 185, 186, 206, 61, 103, 129, 7, 189, 58, 31, 133, 62, 244, 61, 71, 62, 230, 95, 76, 189, 227, 124, 59, 190, 128, 47, 110, 62, 234, 23, 122, 190, 168, 229, 70, 189, 61, 28, 132, 188, 16, 123, 71, 188, 193, 246, 70, 62, 176, 133, 78, 62, 7, 197, 174, 189, 224, 88, 16, 62, 218, 47, 0, 61, 44, 249, 200, 188, 150, 143, 23, 62, 60, 55, 29, 62, 182, 20, 53, 191, 131, 7, 164, 61, 51, 186, 58, 190, 80, 94, 128, 60, 141, 22, 143, 61, 85, 251, 71, 62, 28, 186, 97, 190, 151, 234, 31, 62, 216, 124, 207, 60, 174, 10, 90, 189, 156, 206, 166, 189, 233, 67, 246, 190, 127, 222, 67, 62, 197, 128, 208, 62, 110, 147, 61, 190, 102, 80, 201, 62, 154, 34, 61, 62, 214, 80, 229, 188, 76, 226, 57, 190, 137, 113, 126, 190, 195, 151, 201, 190, 3, 227, 56, 190, 221, 228, 48, 61, 191, 83, 183, 62, 113, 71, 14, 61, 179, 47, 60, 190, 1, 219, 225, 188, 18, 33, 23, 61, 201, 253, 141, 190, 182, 255, 199, 61, 102, 96, 143, 62, 110, 163, 45, 62, 141, 151, 254, 62, 124, 24, 127, 190, 3, 0, 77, 189, 141, 235, 12, 62, 234, 205, 154, 61, 216, 166, 204, 62, 245, 200, 219, 190, 110, 141, 43, 189, 176, 153, 125, 190, 189, 220, 182, 189, 140, 137, 29, 59, 249, 94, 81, 62, 233, 67, 158, 61, 143, 160, 134, 62, 33, 139, 42, 190, 68, 94, 240, 61, 74, 161, 8, 62, 79, 13, 230, 187, 204, 229, 74, 61, 241, 248, 80, 191, 23, 2, 81, 190, 202, 91, 55, 190, 75, 129, 119, 190, 122, 43, 136, 190, 75, 38, 0, 190, 86, 150, 166, 190, 222, 44, 110, 62, 78, 186, 103, 62, 160, 64, 234, 189, 162, 126, 22, 60, 32, 135, 128, 62, 57, 185, 29, 62, 13, 109, 18, 62, 24, 179, 48, 62, 164, 133, 211, 62, 229, 138, 239, 190, 191, 113, 24, 62, 60, 221, 245, 190, 162, 9, 33, 62, 158, 100, 146, 191, 71, 175, 194, 61, 185, 140, 136, 62, 86, 115, 154, 188, 201, 0, 52, 59, 254, 104, 176, 189, 249, 11, 194, 190, 189, 157, 71, 190, 210, 247, 87, 62, 201, 138, 132, 62, 219, 176, 62, 191, 217, 5, 178, 189, 158, 6, 248, 189, 166, 107, 141, 190, 109, 22, 165, 189, 132, 248, 99, 62, 7, 207, 60, 190, 154, 203, 161, 61, 204, 56, 181, 61, 107, 19, 155, 61, 173, 170, 36, 191, 83, 60, 49, 62, 230, 229, 109, 62, 134, 57, 146, 190, 78, 47, 149, 190, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 145, 128, 246, 190, 42, 237, 8, 190, 72, 193, 205, 190, 77, 216, 154, 62, 196, 223, 55, 61, 118, 151, 241, 62, 166, 97, 235, 59, 142, 118, 115, 62, 119, 15, 114, 189, 211, 48, 112, 190, 171, 118, 18, 62, 30, 145, 253, 190, 33, 171, 145, 62, 130, 106, 120, 62, 105, 2, 221, 188, 244, 163, 39, 62, 213, 26, 101, 62, 153, 102, 20, 190, 204, 5, 207, 189, 84, 65, 205, 61, 62, 22, 84, 190, 41, 121, 125, 190, 124, 231, 60, 62, 126, 177, 96, 61, 94, 148, 167, 61, 204, 48, 13, 61, 113, 118, 131, 188, 170, 36, 132, 61, 21, 63, 2, 191, 159, 144, 6, 62, 168, 74, 112, 61, 40, 111, 48, 189, 91, 52, 132, 62, 65, 70, 190, 189, 215, 8, 197, 62, 230, 2, 11, 191, 189, 92, 71, 62, 72, 90, 214, 190, 2, 95, 23, 61, 198, 45, 31, 190, 9, 222, 137, 59, 2, 18, 166, 62, 228, 142, 176, 61, 123, 4, 121, 62, 155, 38, 3, 190, 193, 181, 234, 190, 195, 97, 113, 62, 76, 193, 62, 190, 111, 187, 151, 61, 89, 209, 24, 62, 228, 62, 142, 60, 206, 50, 20, 62, 47, 125, 213, 61, 182, 172, 137, 62, 200, 230, 111, 62, 230, 128, 5, 62, 196, 80, 182, 61, 142, 219, 46, 62, 9, 118, 246, 61, 211, 163, 41, 62, 234, 117, 9, 190, 171, 125, 37, 62, 15, 185, 228, 190, 178, 218, 215, 190, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 53, 148, 189, 190, 175, 249, 168, 61, 248, 132, 171, 190, 196, 52, 202, 188, 70, 35, 51, 62, 178, 52, 134, 62, 44, 91, 59, 190, 104, 74, 69, 62, 227, 227, 36, 62, 220, 72, 52, 190, 1, 76, 123, 61, 200, 77, 207, 190, 64, 138, 201, 61, 252, 35, 34, 62, 229, 82, 162, 60, 44, 196, 47, 62, 76, 117, 47, 62, 186, 146, 115, 60, 147, 189, 192, 61, 1, 155, 27, 62, 214, 162, 161, 189, 3, 74, 194, 61, 171, 168, 253, 60, 40, 206, 94, 61, 38, 145, 234, 61, 200, 38, 116, 62, 55, 49, 63, 189, 121, 184, 77, 61, 26, 231, 50, 189, 66, 90, 223, 188, 224, 43, 174, 189, 136, 27, 209, 61, 29, 235, 23, 191, 69, 241, 13, 62, 242, 176, 228, 190, 147, 10, 13, 61, 156, 11, 242, 61, 133, 113, 34, 62, 125, 152, 232, 60, 187, 251, 76, 62, 235, 43, 76, 188, 72, 11, 223, 189, 142, 37, 12, 190, 224, 95, 149, 190, 122, 44, 250, 61, 173, 153, 101, 62, 124, 97, 17, 190, 132, 193, 48, 62, 95, 155, 179, 60, 55, 135, 190, 189, 15, 32, 69, 62, 117, 199, 130, 62, 147, 255, 66, 190, 4, 94, 16, 190, 173, 154, 184, 61, 147, 120, 36, 188, 13, 187, 8, 62, 82, 31, 157, 189, 225, 13, 68, 62, 105, 13, 146, 61, 183, 28, 239, 189, 217, 75, 64, 190, 243, 207, 227, 62, 219, 38, 61, 62, 175, 96, 69, 190, 153, 250, 33, 191, 166, 128, 38, 189, 179, 100, 35, 190, 117, 103, 6, 61, 60, 93, 19, 61, 53, 102, 193, 61, 31, 83, 125, 189, 227, 65, 62, 190, 1, 244, 222, 188, 157, 250, 116, 189, 4, 66, 198, 189, 115, 94, 144, 62, 209, 11, 254, 189, 165, 19, 48, 62, 248, 81, 200, 190, 40, 53, 131, 62, 252, 123, 179, 61, 48, 247, 137, 190, 43, 33, 204, 189, 252, 150, 162, 190, 39, 145, 106, 190, 161, 250, 21, 62, 160, 114, 61, 190, 196, 190, 213, 61, 179, 160, 143, 190, 45, 180, 206, 190, 212, 88, 44, 62, 157, 205, 229, 190, 203, 155, 236, 61, 152, 34, 9, 190, 222, 250, 176, 190, 83, 236, 22, 191, 183, 142, 30, 62, 35, 169, 233, 190, 82, 175, 217, 62, 253, 58, 249, 189, 119, 150, 165, 62, 250, 192, 217, 61, 237, 68, 50, 62, 193, 121, 133, 189, 230, 230, 160, 190, 84, 134, 206, 189, 85, 25, 253, 190, 78, 201, 84, 62, 237, 248, 164, 62, 128, 208, 236, 186, 69, 82, 172, 61, 125, 74, 166, 60, 95, 161, 0, 62, 170, 72, 29, 191, 43, 156, 13, 63, 3, 10, 223, 190, 83, 127, 120, 190, 33, 249, 100, 61, 96, 242, 9, 62, 146, 166, 95, 62, 213, 134, 38, 189, 11, 94, 104, 187, 109, 33, 153, 189, 50, 184, 219, 190, 7, 62, 116, 62, 40, 231, 157, 62, 59, 8, 242, 61, 81, 174, 36, 191, 142, 233, 7, 191, 186, 84, 187, 188, 115, 234, 14, 62, 100, 39, 253, 189, 179, 255, 250, 61, 201, 218, 171, 189, 32, 72, 255, 61, 137, 255, 18, 191, 224, 64, 8, 190, 195, 78, 26, 191, 43, 120, 110, 190, 52, 2, 69, 62, 32, 5, 164, 62, 119, 31, 194, 189, 141, 83, 112, 62, 100, 240, 165, 61, 185, 160, 128, 61, 137, 214, 131, 190, 190, 167, 29, 188, 253, 15, 254, 190, 205, 170, 83, 191, 182, 158, 150, 188, 29, 222, 130, 62, 226, 138, 71, 60, 94, 236, 4, 191, 179, 37, 199, 187, 50, 131, 35, 189, 223, 26, 45, 191, 210, 220, 226, 61, 212, 26, 190, 61, 197, 248, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 144, 216, 61, 155, 200, 234, 189, 126, 150, 160, 189, 50, 157, 156, 60, 208, 150, 7, 62, 109, 79, 180, 189, 52, 123, 23, 62, 217, 102, 61, 62, 182, 88, 45, 62, 28, 94, 48, 190, 233, 15, 36, 189, 114, 220, 109, 189, 239, 96, 177, 189, 15, 86, 55, 189, 26, 62, 230, 189, 151, 241, 37, 57, 107, 34, 149, 61, 153, 52, 95, 61, 45, 212, 249, 189, 48, 52, 188, 59, 213, 21, 130, 62, 165, 197, 183, 188, 2, 179, 146, 61, 52, 58, 2, 190, 241, 139, 143, 62, 94, 76, 2, 62, 161, 231, 122, 189, 160, 42, 43, 62, 80, 250, 183, 60, 239, 157, 179, 61, 188, 176, 184, 61, 55, 254, 14, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 13, 193, 190, 113, 131, 248, 62, 255, 135, 95, 63, 79, 83, 39, 190, 126, 139, 142, 61, 119, 158, 141, 62, 83, 249, 18, 63, 136, 201, 53, 190, 88, 33, 253, 190, 186, 109, 213, 189, 42, 22, 201, 61, 204, 102, 167, 62, 224, 153, 24, 60, 4, 241, 75, 61, 232, 12, 10, 63, 108, 169, 80, 190, 227, 64, 163, 190, 178, 150, 234, 190, 239, 13, 202, 190, 168, 199, 234, 61, 228, 151, 225, 62, 229, 46, 188, 190, 160, 46, 30, 191, 97, 25, 11, 62, 37, 175, 249, 62, 94, 127, 196, 190, 80, 24, 0, 61, 53, 124, 254, 61, 178, 241, 137, 62, 200, 175, 39, 190, 42, 67, 191, 62, 107, 92, 33, 63, 75, 179, 84, 190, 63, 214, 20, 190, 60, 81, 173, 62, 158, 89, 197, 189, 39, 37, 93, 191, 202, 33, 113, 189, 35, 16, 128, 62, 149, 186, 16, 190, 196, 149, 165, 62, 214, 19, 24, 190, 212, 238, 129, 190, 161, 48, 137, 62, 125, 86, 212, 60, 28, 42, 186, 61, 178, 191, 117, 62, 58, 213, 138, 62, 219, 106, 161, 190, 179, 98, 43, 62, 170, 41, 178, 61, 124, 244, 91, 190, 188, 161, 161, 61, 175, 1, 153, 62, 99, 138, 0, 62, 83, 154, 227, 61, 1, 36, 96, 190, 126, 240, 240, 60, 102, 55, 6, 62, 69, 148, 71, 190, 223, 148, 89, 62, 130, 254, 119, 190, 149, 0, 121, 62, 185, 139, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 192, 243, 189, 128, 201, 232, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {123, 215, 19, 61, 95, 71, 94, 64, 73, 187, 121, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 133, 1, 192, 76, 29, 217, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}