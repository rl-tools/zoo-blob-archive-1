// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 63, 248, 62, 87, 220, 155, 62, 2, 160, 139, 62, 229, 169, 41, 189, 246, 49, 241, 62, 203, 33, 206, 190, 56, 88, 249, 62, 122, 196, 126, 63, 66, 222, 224, 61, 20, 110, 178, 62, 26, 240, 99, 191, 208, 14, 204, 189, 150, 171, 163, 62, 88, 55, 142, 190, 108, 228, 220, 189, 2, 247, 19, 63, 21, 132, 96, 191, 93, 238, 196, 189, 71, 248, 3, 191, 106, 250, 22, 191, 46, 227, 180, 189, 215, 13, 26, 191, 80, 199, 138, 63, 107, 248, 219, 62, 67, 78, 133, 62, 246, 28, 223, 62, 146, 180, 226, 190, 112, 89, 126, 190, 115, 241, 151, 191, 146, 167, 99, 190, 193, 121, 174, 62, 175, 3, 182, 190, 230, 232, 107, 190, 128, 201, 28, 63, 106, 52, 58, 63, 22, 16, 203, 62, 90, 165, 60, 63, 76, 63, 36, 191, 84, 174, 119, 190, 135, 240, 17, 63, 51, 13, 9, 61, 117, 148, 230, 190, 120, 147, 39, 63, 79, 232, 120, 63, 23, 193, 205, 62, 199, 44, 115, 189, 43, 145, 44, 191, 3, 32, 111, 62, 176, 60, 230, 62, 246, 147, 26, 191, 133, 208, 64, 190, 212, 145, 52, 63, 112, 188, 217, 60, 174, 197, 62, 62, 35, 174, 165, 190, 181, 27, 155, 190, 217, 217, 167, 190, 66, 239, 74, 191, 213, 159, 126, 63, 144, 175, 214, 189, 115, 224, 16, 191, 73, 4, 146, 191, 234, 195, 204, 190, 204, 30, 223, 190, 250, 225, 3, 191, 62, 209, 75, 191, 230, 53, 240, 190, 71, 71, 210, 62, 161, 47, 252, 59, 253, 179, 233, 190, 36, 236, 26, 189, 166, 242, 187, 62, 81, 185, 175, 190, 21, 66, 42, 187, 99, 194, 129, 189, 81, 244, 119, 62, 246, 227, 69, 63, 85, 1, 209, 190, 80, 220, 2, 190, 242, 189, 54, 191, 238, 64, 160, 62, 99, 86, 158, 62, 211, 149, 193, 62, 120, 1, 208, 62, 18, 101, 131, 190, 3, 98, 14, 61, 136, 114, 12, 191, 58, 105, 69, 191, 60, 23, 164, 190, 59, 221, 164, 61, 105, 209, 49, 63, 186, 232, 77, 191, 115, 8, 236, 190, 40, 29, 240, 62, 13, 70, 101, 191, 59, 148, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 201, 49, 191, 60, 146, 148, 59, 56, 114, 234, 189, 216, 192, 202, 189, 68, 103, 181, 62, 123, 240, 10, 61, 249, 135, 131, 62, 125, 112, 229, 61, 217, 135, 219, 62, 187, 124, 3, 62, 107, 243, 2, 63, 8, 228, 205, 190, 201, 80, 82, 62, 125, 106, 174, 190, 65, 50, 203, 62, 92, 115, 177, 188, 207, 197, 9, 63, 165, 126, 98, 62, 75, 54, 34, 191, 202, 191, 83, 190, 178, 230, 227, 190, 239, 81, 87, 189, 56, 70, 34, 63, 62, 161, 26, 191, 104, 147, 61, 63, 92, 152, 210, 62, 207, 8, 58, 61, 9, 158, 179, 62, 44, 84, 151, 190, 215, 106, 224, 62, 175, 174, 187, 190, 244, 2, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 156, 8, 190, 10, 97, 73, 62, 231, 241, 86, 62, 200, 23, 6, 191, 150, 12, 38, 62, 128, 233, 29, 189, 81, 132, 10, 190, 170, 221, 145, 187, 163, 12, 87, 62, 45, 105, 148, 62, 6, 148, 97, 62, 73, 249, 144, 60, 14, 160, 143, 188, 72, 231, 125, 190, 172, 255, 146, 62, 125, 173, 141, 190, 97, 154, 77, 62, 97, 168, 48, 188, 219, 79, 84, 190, 171, 97, 62, 190, 245, 116, 68, 190, 155, 24, 86, 189, 153, 159, 62, 62, 23, 215, 168, 190, 80, 231, 120, 62, 170, 110, 17, 62, 12, 132, 23, 190, 60, 83, 206, 189, 20, 0, 126, 189, 233, 241, 177, 61, 131, 167, 240, 190, 207, 77, 153, 190, 133, 116, 147, 190, 75, 111, 141, 190, 119, 46, 155, 190, 21, 188, 100, 190, 158, 46, 4, 191, 137, 182, 113, 190, 207, 35, 16, 62, 161, 226, 238, 61, 193, 152, 22, 190, 124, 223, 4, 62, 121, 137, 245, 190, 185, 184, 156, 188, 77, 202, 176, 59, 30, 34, 0, 190, 141, 122, 198, 190, 124, 177, 151, 62, 208, 64, 137, 189, 159, 81, 81, 190, 173, 31, 7, 62, 23, 134, 12, 190, 15, 182, 190, 189, 217, 93, 158, 190, 234, 198, 90, 188, 235, 43, 36, 189, 251, 229, 69, 189, 132, 131, 51, 189, 102, 84, 255, 190, 10, 79, 245, 59, 100, 35, 99, 190, 254, 192, 180, 61, 112, 29, 109, 190, 171, 193, 105, 189, 215, 25, 202, 62, 196, 130, 144, 189, 88, 249, 171, 62, 209, 114, 214, 188, 107, 133, 2, 62, 10, 110, 85, 190, 137, 172, 232, 190, 217, 237, 178, 61, 164, 87, 26, 61, 172, 227, 17, 190, 140, 46, 50, 190, 118, 149, 219, 62, 187, 199, 17, 191, 206, 162, 56, 61, 63, 74, 13, 60, 140, 90, 51, 190, 4, 49, 131, 190, 251, 177, 100, 61, 29, 12, 46, 189, 191, 37, 3, 191, 195, 5, 190, 189, 109, 35, 209, 189, 108, 38, 135, 190, 251, 119, 197, 190, 58, 251, 254, 190, 68, 10, 81, 62, 58, 142, 121, 62, 234, 133, 2, 190, 30, 205, 57, 189, 88, 217, 68, 191, 143, 118, 5, 190, 250, 54, 35, 189, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 206, 54, 111, 190, 99, 245, 140, 190, 137, 115, 50, 190, 72, 248, 28, 189, 193, 102, 209, 61, 227, 97, 25, 62, 239, 178, 211, 190, 141, 124, 176, 189, 243, 69, 2, 190, 177, 87, 70, 191, 213, 6, 89, 62, 12, 176, 189, 190, 227, 49, 145, 62, 10, 171, 87, 189, 157, 52, 43, 62, 75, 66, 166, 190, 84, 123, 19, 62, 56, 181, 68, 62, 71, 179, 74, 190, 196, 52, 84, 61, 234, 108, 191, 189, 241, 211, 159, 190, 247, 194, 230, 188, 190, 180, 182, 61, 27, 94, 169, 189, 209, 228, 182, 61, 36, 60, 139, 190, 25, 237, 25, 190, 107, 55, 172, 190, 143, 49, 74, 190, 56, 42, 177, 61, 149, 156, 230, 190, 80, 15, 246, 61, 116, 164, 15, 190, 144, 241, 181, 188, 172, 113, 194, 60, 215, 132, 22, 189, 92, 31, 10, 61, 18, 208, 52, 189, 140, 250, 68, 190, 105, 216, 91, 189, 249, 21, 119, 61, 204, 164, 209, 189, 96, 30, 21, 62, 130, 158, 95, 190, 224, 156, 230, 188, 18, 99, 13, 62, 173, 173, 198, 60, 52, 144, 128, 190, 144, 241, 205, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 149, 226, 156, 190, 159, 80, 89, 61, 174, 253, 238, 189, 153, 194, 151, 60, 179, 36, 140, 189, 59, 90, 66, 188, 172, 188, 37, 190, 77, 219, 176, 190, 151, 14, 170, 61, 106, 96, 215, 189, 24, 150, 255, 190, 214, 64, 65, 62, 55, 19, 4, 191, 55, 195, 55, 62, 24, 101, 42, 191, 231, 16, 109, 61, 64, 43, 220, 61, 111, 88, 240, 188, 86, 125, 126, 61, 25, 75, 221, 190, 31, 103, 62, 191, 236, 147, 73, 190, 89, 61, 125, 189, 227, 63, 114, 190, 33, 81, 135, 190, 160, 37, 211, 61, 36, 89, 221, 190, 52, 195, 242, 61, 193, 197, 249, 60, 91, 18, 16, 63, 187, 10, 97, 191, 207, 194, 181, 190, 112, 243, 142, 62, 161, 132, 47, 62, 150, 198, 79, 62, 115, 77, 122, 62, 176, 247, 27, 189, 181, 131, 101, 62, 151, 72, 139, 190, 198, 184, 34, 62, 186, 143, 244, 189, 13, 15, 217, 188, 231, 141, 166, 190, 252, 224, 150, 189, 80, 138, 165, 62, 32, 32, 193, 190, 247, 226, 65, 62, 83, 38, 117, 190, 164, 243, 66, 188, 50, 206, 158, 190, 122, 242, 58, 62, 89, 216, 218, 61, 212, 125, 16, 62, 138, 177, 182, 59, 31, 169, 125, 189, 32, 234, 14, 190, 207, 246, 50, 62, 191, 70, 177, 189, 150, 25, 25, 62, 150, 50, 200, 61, 13, 121, 176, 189, 136, 210, 36, 190, 4, 179, 33, 190, 27, 229, 210, 61, 184, 122, 157, 188, 213, 36, 11, 190, 247, 20, 14, 62, 47, 227, 151, 61, 172, 86, 134, 61, 239, 49, 192, 189, 40, 121, 187, 189, 182, 201, 107, 189, 150, 34, 134, 190, 11, 66, 123, 190, 113, 107, 41, 190, 56, 91, 229, 61, 187, 48, 242, 62, 131, 231, 223, 190, 124, 49, 54, 61, 116, 48, 233, 190, 63, 53, 96, 61, 112, 0, 22, 191, 254, 177, 227, 189, 208, 8, 184, 62, 99, 94, 6, 62, 184, 169, 150, 62, 158, 163, 239, 189, 174, 33, 140, 190, 87, 233, 78, 62, 33, 39, 68, 187, 108, 29, 90, 62, 66, 132, 3, 189, 23, 58, 131, 189, 180, 48, 29, 190, 37, 228, 246, 189, 253, 245, 243, 61, 211, 17, 158, 189, 217, 73, 246, 190, 140, 69, 36, 62, 173, 163, 69, 62, 248, 198, 205, 62, 120, 74, 142, 190, 140, 39, 155, 189, 140, 123, 194, 61, 75, 101, 150, 190, 28, 27, 64, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 218, 246, 42, 62, 36, 21, 167, 190, 11, 38, 227, 189, 218, 110, 62, 62, 217, 117, 209, 61, 245, 174, 130, 62, 251, 194, 60, 190, 80, 7, 179, 188, 144, 190, 39, 190, 88, 6, 246, 189, 153, 217, 2, 61, 204, 102, 145, 190, 140, 50, 96, 62, 156, 50, 179, 61, 162, 252, 122, 60, 200, 202, 244, 62, 168, 212, 8, 61, 121, 20, 145, 62, 188, 169, 16, 62, 239, 92, 189, 190, 28, 202, 251, 61, 163, 184, 133, 60, 95, 250, 121, 61, 150, 163, 6, 62, 252, 143, 175, 189, 82, 83, 252, 189, 50, 34, 42, 61, 252, 14, 124, 62, 178, 182, 173, 190, 238, 211, 221, 61, 137, 82, 151, 61, 30, 150, 71, 62, 7, 132, 161, 62, 73, 14, 93, 61, 187, 75, 193, 190, 155, 89, 178, 62, 124, 101, 194, 189, 214, 55, 117, 62, 207, 223, 180, 190, 84, 78, 25, 60, 207, 6, 201, 189, 17, 232, 17, 60, 166, 33, 158, 61, 178, 76, 157, 188, 201, 136, 26, 189, 220, 64, 32, 62, 15, 52, 224, 189, 133, 151, 133, 62, 140, 192, 181, 61, 233, 107, 75, 62, 147, 248, 153, 62, 108, 67, 57, 62, 245, 160, 17, 62, 13, 99, 197, 61, 161, 233, 234, 190, 113, 48, 147, 189, 141, 85, 1, 190, 147, 85, 244, 60, 45, 86, 138, 62, 132, 194, 196, 189, 6, 235, 107, 189, 100, 251, 168, 190, 231, 143, 167, 62, 32, 143, 250, 61, 225, 76, 251, 189, 14, 105, 194, 188, 60, 47, 150, 189, 116, 126, 95, 61, 60, 228, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 2, 179, 166, 61, 103, 47, 243, 189, 237, 255, 217, 189, 161, 213, 48, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 232, 232, 133, 61, 52, 208, 118, 189, 216, 55, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 56, 70, 7, 62, 162, 136, 222, 189, 189, 250, 31, 190, 183, 137, 31, 190, 34, 114, 142, 61, 7, 67, 80, 61, 72, 49, 4, 62, 128, 14, 252, 61, 254, 223, 52, 190, 10, 197, 237, 61, 186, 9, 119, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 113, 136, 73, 189, 43, 116, 32, 62, 190, 41, 225, 189, 237, 52, 212, 190, 57, 81, 81, 191, 235, 166, 233, 190, 169, 8, 214, 61, 221, 221, 205, 189, 130, 163, 128, 62, 41, 222, 104, 190, 197, 189, 28, 191, 248, 121, 59, 190, 51, 126, 179, 190, 2, 3, 54, 189, 22, 49, 123, 190, 176, 192, 239, 189, 18, 171, 223, 190, 9, 122, 67, 190, 127, 118, 94, 190, 93, 24, 33, 63, 51, 32, 103, 191, 253, 142, 246, 190, 124, 25, 193, 62, 169, 243, 146, 61, 124, 44, 252, 61, 238, 239, 144, 62, 93, 136, 167, 190, 0, 33, 27, 189, 178, 222, 217, 189, 39, 127, 129, 62, 148, 104, 96, 190, 3, 153, 141, 189, 50, 96, 142, 61, 167, 208, 187, 61, 47, 118, 165, 62, 181, 136, 25, 191, 28, 48, 232, 61, 8, 58, 243, 190, 116, 11, 16, 62, 185, 196, 251, 188, 153, 203, 193, 60, 244, 140, 113, 62, 59, 47, 90, 62, 185, 192, 108, 62, 153, 246, 188, 190, 235, 26, 165, 188, 119, 78, 76, 62, 76, 215, 111, 189, 81, 249, 40, 62, 201, 134, 145, 190, 200, 219, 214, 188, 74, 198, 81, 190, 46, 61, 224, 188, 31, 49, 211, 188, 253, 93, 44, 190, 126, 239, 172, 189, 220, 31, 197, 61, 170, 194, 235, 61, 51, 182, 233, 189, 97, 2, 10, 190, 125, 52, 84, 189, 5, 243, 200, 189, 244, 209, 142, 189, 119, 50, 58, 189, 201, 104, 9, 61, 73, 68, 108, 190, 20, 224, 157, 62, 187, 116, 167, 190, 140, 222, 129, 62, 174, 75, 248, 61, 239, 57, 198, 190, 23, 106, 177, 61, 48, 94, 127, 56, 153, 184, 169, 190, 15, 82, 66, 62, 121, 23, 81, 61, 98, 179, 60, 189, 67, 109, 240, 189, 152, 163, 131, 62, 14, 57, 154, 190, 37, 83, 24, 62, 19, 128, 78, 61, 247, 3, 73, 190, 122, 13, 198, 188, 31, 158, 240, 61, 225, 107, 30, 191, 176, 235, 179, 189, 97, 49, 190, 189, 213, 228, 142, 190, 30, 103, 157, 61, 130, 138, 61, 190, 207, 199, 183, 61, 138, 117, 147, 190, 218, 238, 46, 190, 111, 150, 198, 190, 208, 123, 168, 190, 172, 229, 169, 189, 192, 146, 218, 61, 20, 89, 157, 62, 199, 254, 65, 189, 38, 252, 203, 61, 219, 191, 128, 190, 166, 36, 102, 62, 16, 147, 121, 191, 100, 103, 246, 60, 26, 164, 118, 62, 77, 244, 149, 61, 182, 153, 111, 189, 233, 52, 195, 189, 215, 246, 223, 189, 139, 172, 130, 190, 161, 167, 188, 62, 84, 32, 75, 189, 114, 79, 239, 190, 49, 98, 230, 189, 114, 222, 79, 189, 186, 137, 137, 190, 192, 113, 25, 61, 164, 236, 165, 61, 53, 89, 113, 60, 67, 48, 126, 61, 16, 209, 84, 188, 231, 44, 238, 62, 79, 91, 31, 191, 50, 142, 55, 61, 240, 244, 154, 62, 243, 113, 246, 189, 182, 195, 78, 190, 125, 33, 243, 61, 22, 117, 171, 189, 96, 165, 255, 62, 78, 65, 235, 190, 233, 109, 100, 62, 192, 7, 115, 190, 95, 230, 246, 190, 48, 158, 185, 61, 45, 164, 133, 61, 180, 160, 158, 190, 180, 95, 254, 61, 176, 197, 188, 61, 203, 145, 33, 190, 49, 63, 96, 189, 43, 98, 119, 62, 254, 32, 208, 190, 230, 55, 66, 189, 129, 133, 90, 61, 202, 119, 72, 59, 96, 71, 229, 61, 127, 252, 4, 62, 44, 140, 35, 189, 205, 41, 163, 61, 134, 154, 153, 187, 178, 13, 133, 189, 249, 120, 0, 62, 88, 42, 138, 190, 34, 239, 135, 60, 245, 88, 26, 62, 222, 176, 177, 190, 175, 100, 96, 190, 224, 82, 139, 190, 215, 197, 63, 189, 38, 230, 29, 62, 63, 7, 168, 190, 141, 13, 230, 60, 171, 99, 101, 62, 190, 59, 115, 62, 246, 21, 114, 189, 113, 136, 64, 62, 151, 157, 13, 61, 254, 57, 176, 188, 166, 209, 33, 62, 191, 37, 0, 190, 132, 145, 211, 58, 42, 254, 88, 61, 193, 27, 248, 188, 23, 65, 148, 62, 204, 25, 59, 62, 3, 186, 249, 188, 34, 145, 34, 190, 6, 183, 144, 62, 117, 119, 18, 190, 205, 75, 19, 189, 45, 45, 250, 60, 150, 176, 229, 59, 151, 79, 114, 62, 233, 153, 38, 62, 111, 240, 150, 189, 29, 20, 29, 62, 30, 123, 177, 60, 158, 188, 34, 61, 140, 122, 18, 62, 219, 69, 59, 62, 45, 38, 191, 190, 37, 108, 42, 61, 108, 0, 90, 190, 112, 107, 67, 61, 196, 61, 93, 61, 183, 245, 89, 62, 187, 148, 165, 190, 253, 100, 43, 62, 3, 145, 72, 59, 107, 137, 178, 189, 172, 69, 203, 189, 57, 45, 204, 190, 166, 157, 73, 62, 7, 202, 217, 62, 205, 209, 38, 190, 10, 205, 176, 62, 135, 239, 42, 62, 114, 224, 53, 188, 232, 59, 62, 60, 204, 155, 156, 190, 132, 142, 147, 190, 167, 51, 23, 190, 249, 65, 101, 189, 255, 95, 196, 62, 156, 16, 31, 189, 181, 37, 96, 190, 26, 27, 134, 189, 228, 125, 139, 61, 163, 133, 132, 190, 104, 184, 142, 189, 88, 132, 174, 62, 174, 159, 131, 62, 19, 65, 251, 60, 225, 48, 174, 190, 22, 230, 33, 189, 106, 72, 31, 62, 222, 141, 202, 61, 248, 85, 209, 62, 23, 160, 136, 190, 135, 216, 86, 190, 179, 164, 115, 190, 163, 231, 26, 189, 172, 140, 182, 60, 213, 243, 99, 61, 251, 20, 176, 61, 61, 44, 94, 62, 143, 254, 59, 190, 89, 113, 108, 61, 108, 157, 33, 62, 137, 93, 160, 188, 196, 108, 64, 61, 81, 85, 83, 191, 227, 172, 4, 190, 136, 51, 143, 190, 214, 7, 40, 190, 129, 9, 231, 190, 13, 184, 115, 189, 73, 124, 157, 190, 137, 211, 45, 62, 30, 161, 48, 62, 185, 41, 69, 190, 32, 172, 35, 62, 145, 78, 79, 62, 217, 201, 190, 61, 13, 109, 18, 62, 15, 136, 27, 62, 36, 48, 97, 62, 103, 101, 182, 190, 48, 41, 96, 62, 7, 68, 171, 190, 215, 222, 57, 62, 175, 94, 128, 191, 2, 237, 164, 61, 77, 122, 127, 62, 50, 106, 45, 57, 155, 254, 101, 188, 58, 154, 6, 61, 38, 51, 177, 190, 31, 82, 176, 190, 43, 241, 230, 62, 250, 137, 162, 62, 222, 102, 38, 191, 109, 160, 211, 189, 19, 164, 27, 190, 250, 52, 165, 190, 154, 46, 206, 189, 216, 107, 88, 62, 91, 121, 6, 190, 124, 188, 179, 61, 147, 237, 152, 61, 226, 195, 131, 62, 253, 24, 9, 191, 14, 119, 22, 62, 21, 169, 145, 62, 91, 226, 73, 190, 1, 217, 72, 190, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 239, 48, 54, 190, 3, 235, 25, 190, 102, 79, 224, 190, 52, 208, 134, 62, 35, 99, 234, 60, 18, 151, 232, 62, 64, 19, 118, 189, 61, 71, 129, 62, 8, 35, 142, 189, 158, 204, 167, 190, 181, 130, 254, 61, 195, 222, 245, 190, 179, 218, 141, 62, 84, 202, 122, 62, 88, 51, 11, 189, 43, 100, 231, 61, 188, 90, 78, 62, 141, 14, 18, 190, 95, 116, 230, 189, 91, 93, 71, 62, 146, 146, 156, 190, 9, 126, 154, 190, 81, 149, 64, 62, 140, 192, 24, 61, 96, 139, 127, 61, 212, 227, 183, 60, 39, 16, 132, 189, 220, 253, 107, 61, 240, 68, 17, 191, 202, 183, 147, 61, 253, 121, 153, 61, 100, 179, 196, 188, 159, 78, 143, 189, 140, 178, 253, 189, 106, 199, 199, 62, 67, 102, 231, 190, 39, 200, 98, 62, 114, 25, 194, 190, 198, 29, 153, 61, 240, 19, 27, 190, 177, 232, 31, 188, 132, 12, 204, 62, 87, 28, 226, 61, 69, 219, 53, 62, 249, 138, 172, 189, 83, 93, 212, 190, 207, 44, 85, 62, 104, 114, 94, 190, 67, 201, 224, 61, 217, 231, 3, 62, 241, 23, 146, 61, 101, 119, 120, 61, 193, 201, 249, 61, 0, 123, 140, 62, 138, 15, 62, 62, 49, 225, 159, 61, 151, 131, 152, 61, 57, 151, 27, 62, 101, 56, 171, 61, 148, 15, 1, 62, 41, 108, 10, 190, 118, 211, 52, 62, 181, 96, 180, 190, 235, 219, 156, 190, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 31, 203, 146, 189, 82, 119, 110, 61, 177, 112, 191, 190, 239, 150, 41, 61, 159, 9, 33, 62, 222, 181, 146, 62, 32, 68, 160, 189, 181, 190, 65, 62, 16, 57, 9, 62, 118, 204, 133, 189, 57, 164, 79, 61, 49, 253, 205, 190, 44, 90, 187, 61, 178, 4, 228, 61, 113, 15, 8, 59, 247, 238, 24, 62, 5, 36, 34, 62, 171, 77, 155, 60, 171, 23, 244, 61, 237, 250, 74, 62, 211, 109, 198, 60, 206, 229, 219, 61, 59, 221, 133, 61, 90, 170, 220, 60, 70, 71, 25, 62, 40, 100, 77, 62, 66, 209, 176, 189, 31, 243, 244, 60, 70, 143, 88, 189, 254, 55, 105, 60, 211, 179, 180, 189, 123, 109, 8, 62, 70, 124, 137, 190, 239, 67, 214, 61, 226, 176, 197, 190, 237, 108, 178, 61, 168, 135, 254, 61, 4, 24, 73, 62, 220, 252, 148, 59, 201, 18, 116, 62, 50, 246, 61, 188, 229, 133, 145, 189, 23, 75, 8, 190, 231, 243, 98, 190, 74, 5, 1, 62, 42, 3, 66, 62, 136, 152, 176, 189, 189, 227, 85, 61, 90, 82, 184, 60, 198, 31, 148, 189, 0, 90, 19, 62, 31, 150, 139, 62, 150, 11, 12, 190, 19, 31, 43, 190, 245, 188, 17, 62, 57, 70, 81, 188, 109, 190, 18, 62, 229, 94, 157, 189, 114, 206, 224, 61, 75, 39, 208, 61, 150, 242, 35, 190, 248, 213, 128, 190, 134, 34, 219, 62, 145, 213, 52, 62, 149, 250, 76, 190, 168, 8, 11, 191, 75, 202, 186, 59, 14, 40, 222, 189, 60, 118, 47, 61, 24, 154, 52, 61, 164, 170, 29, 62, 236, 244, 109, 189, 218, 153, 42, 190, 220, 212, 16, 62, 234, 85, 36, 189, 95, 84, 161, 189, 70, 168, 145, 62, 240, 246, 12, 190, 223, 230, 63, 62, 93, 191, 199, 190, 105, 249, 137, 62, 246, 158, 178, 61, 31, 144, 136, 190, 55, 3, 243, 189, 35, 89, 226, 189, 33, 205, 197, 189, 118, 252, 15, 62, 113, 150, 49, 190, 104, 10, 234, 61, 194, 9, 131, 190, 150, 30, 241, 190, 159, 10, 38, 62, 107, 210, 214, 190, 127, 27, 1, 62, 101, 156, 236, 189, 136, 252, 148, 190, 217, 237, 147, 190, 235, 43, 42, 62, 164, 222, 234, 190, 52, 51, 193, 62, 157, 124, 16, 190, 13, 14, 152, 62, 199, 213, 130, 188, 231, 23, 97, 62, 159, 21, 132, 189, 49, 160, 251, 190, 251, 244, 245, 189, 228, 11, 234, 190, 142, 36, 66, 62, 234, 45, 184, 62, 130, 188, 68, 60, 64, 135, 40, 61, 174, 107, 154, 187, 141, 135, 253, 61, 26, 190, 199, 190, 87, 86, 33, 63, 243, 93, 7, 191, 166, 26, 150, 190, 188, 225, 168, 61, 102, 184, 21, 62, 109, 114, 80, 62, 247, 153, 31, 189, 20, 167, 195, 188, 24, 116, 127, 189, 138, 2, 234, 190, 49, 181, 34, 62, 105, 77, 160, 62, 194, 252, 241, 61, 17, 211, 189, 190, 110, 122, 1, 191, 7, 195, 81, 190, 164, 18, 29, 59, 30, 156, 95, 190, 212, 248, 21, 61, 114, 239, 228, 188, 117, 95, 190, 61, 203, 93, 251, 190, 214, 137, 102, 190, 238, 242, 44, 191, 51, 247, 90, 190, 80, 151, 169, 59, 32, 5, 164, 62, 178, 91, 229, 189, 9, 78, 139, 62, 82, 74, 134, 189, 169, 250, 213, 61, 137, 214, 131, 190, 214, 149, 153, 61, 27, 4, 202, 190, 59, 38, 81, 191, 22, 234, 55, 189, 176, 121, 135, 62, 117, 111, 168, 59, 94, 13, 184, 190, 11, 188, 16, 60, 7, 200, 45, 189, 223, 26, 45, 191, 35, 211, 225, 61, 147, 122, 13, 62, 4, 38, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 238, 248, 61, 94, 183, 232, 189, 248, 83, 22, 190, 50, 157, 156, 60, 71, 118, 11, 62, 236, 55, 157, 189, 34, 165, 102, 62, 118, 242, 82, 62, 67, 22, 38, 62, 28, 94, 48, 190, 87, 201, 20, 189, 118, 187, 248, 188, 248, 89, 179, 189, 15, 86, 55, 189, 113, 243, 33, 189, 87, 52, 81, 187, 244, 226, 174, 61, 156, 173, 140, 61, 181, 34, 19, 190, 60, 121, 130, 60, 181, 226, 103, 62, 70, 179, 248, 58, 125, 223, 216, 61, 52, 58, 2, 190, 21, 248, 136, 62, 1, 237, 244, 61, 161, 231, 122, 189, 62, 16, 44, 62, 79, 22, 80, 61, 228, 246, 196, 61, 167, 251, 166, 61, 238, 190, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 255, 177, 190, 77, 138, 248, 62, 184, 60, 76, 63, 79, 83, 39, 190, 220, 213, 127, 61, 136, 49, 140, 62, 234, 214, 32, 63, 94, 71, 37, 190, 97, 115, 220, 190, 186, 109, 213, 189, 205, 85, 8, 62, 219, 39, 115, 62, 151, 25, 23, 60, 4, 241, 75, 61, 254, 9, 43, 63, 35, 9, 234, 189, 200, 181, 154, 190, 238, 70, 202, 190, 255, 166, 185, 190, 174, 66, 221, 61, 244, 44, 225, 62, 89, 62, 179, 190, 138, 9, 8, 191, 97, 25, 11, 62, 168, 194, 251, 62, 71, 140, 164, 190, 80, 24, 0, 61, 14, 155, 241, 61, 7, 50, 132, 62, 141, 155, 57, 190, 167, 152, 217, 62, 202, 53, 19, 63, 124, 242, 97, 190, 42, 213, 20, 190, 250, 83, 187, 62, 158, 89, 197, 189, 110, 208, 66, 191, 239, 104, 97, 189, 40, 133, 59, 62, 178, 100, 181, 189, 199, 119, 139, 62, 214, 19, 24, 190, 24, 153, 121, 190, 31, 180, 135, 62, 220, 170, 211, 60, 28, 42, 186, 61, 112, 22, 139, 61, 18, 250, 152, 62, 62, 203, 83, 190, 184, 54, 201, 61, 101, 155, 218, 61, 130, 15, 84, 190, 135, 7, 6, 62, 54, 31, 197, 62, 240, 218, 135, 61, 83, 154, 227, 61, 73, 180, 156, 190, 2, 140, 191, 60, 102, 55, 6, 62, 214, 103, 70, 190, 237, 76, 89, 62, 3, 21, 81, 190, 96, 77, 25, 62, 223, 157, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 228, 2, 190, 227, 121, 232, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {88, 191, 96, 191, 227, 212, 62, 63, 119, 56, 150, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 203, 24, 64, 182, 44, 31, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}