// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 187, 85, 63, 108, 247, 248, 62, 17, 143, 155, 62, 134, 70, 158, 61, 54, 163, 170, 62, 62, 149, 224, 190, 95, 54, 247, 62, 255, 100, 138, 63, 12, 87, 68, 62, 84, 76, 160, 62, 135, 89, 144, 191, 245, 82, 22, 190, 52, 36, 148, 62, 91, 117, 64, 190, 47, 85, 44, 61, 62, 117, 9, 63, 224, 64, 138, 191, 127, 91, 154, 187, 98, 21, 241, 190, 217, 52, 65, 191, 170, 58, 102, 190, 171, 211, 84, 191, 84, 183, 169, 63, 181, 143, 175, 62, 209, 161, 64, 61, 141, 37, 24, 63, 58, 91, 185, 190, 142, 168, 5, 190, 11, 91, 203, 191, 40, 141, 136, 190, 189, 241, 88, 62, 202, 60, 56, 190, 73, 211, 134, 190, 34, 107, 32, 63, 124, 37, 67, 63, 229, 197, 179, 62, 5, 213, 40, 63, 182, 202, 145, 191, 13, 185, 60, 190, 143, 24, 29, 63, 218, 114, 53, 61, 77, 56, 200, 190, 98, 71, 22, 63, 80, 52, 136, 63, 209, 32, 5, 63, 59, 170, 183, 189, 219, 94, 45, 191, 194, 212, 9, 62, 45, 62, 60, 62, 9, 172, 35, 191, 28, 189, 8, 190, 28, 70, 203, 62, 116, 28, 111, 190, 93, 67, 42, 62, 161, 177, 26, 190, 201, 8, 39, 190, 180, 244, 167, 190, 31, 105, 137, 191, 86, 47, 108, 63, 36, 224, 170, 187, 50, 253, 88, 190, 245, 27, 204, 191, 9, 1, 241, 190, 33, 220, 198, 190, 31, 74, 247, 190, 234, 91, 41, 191, 198, 147, 2, 191, 52, 124, 14, 63, 43, 145, 48, 62, 56, 125, 50, 191, 140, 185, 139, 62, 239, 223, 174, 62, 137, 185, 23, 191, 104, 164, 59, 61, 246, 191, 106, 189, 234, 21, 64, 62, 181, 182, 90, 63, 12, 40, 172, 190, 0, 232, 191, 190, 119, 202, 247, 190, 229, 45, 172, 62, 216, 255, 21, 61, 119, 143, 176, 62, 107, 155, 250, 62, 178, 88, 153, 190, 229, 241, 232, 189, 93, 118, 251, 190, 106, 237, 93, 191, 0, 208, 153, 190, 144, 49, 181, 188, 167, 199, 52, 63, 0, 245, 146, 191, 40, 185, 201, 190, 200, 229, 0, 63, 200, 26, 148, 191, 101, 74, 183, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 132, 79, 191, 221, 152, 211, 59, 218, 57, 153, 189, 211, 252, 236, 189, 237, 122, 150, 62, 20, 222, 89, 188, 9, 149, 12, 63, 203, 96, 142, 62, 215, 181, 51, 62, 18, 202, 103, 190, 234, 211, 213, 62, 197, 146, 6, 191, 249, 31, 253, 61, 239, 10, 201, 190, 231, 93, 183, 62, 48, 104, 21, 62, 151, 180, 145, 62, 8, 149, 184, 188, 81, 254, 130, 191, 245, 45, 164, 190, 115, 215, 193, 190, 181, 41, 143, 189, 197, 34, 14, 63, 216, 21, 12, 191, 78, 253, 32, 63, 38, 98, 197, 62, 200, 242, 98, 190, 16, 132, 93, 188, 241, 78, 137, 190, 207, 227, 17, 63, 92, 100, 232, 190, 113, 234, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 140, 153, 188, 238, 111, 93, 62, 126, 48, 77, 62, 46, 215, 2, 191, 237, 44, 14, 62, 62, 50, 9, 188, 255, 94, 66, 190, 210, 46, 49, 190, 154, 160, 61, 62, 112, 55, 3, 62, 140, 2, 50, 62, 44, 119, 153, 188, 144, 10, 77, 189, 229, 159, 147, 190, 95, 42, 155, 62, 81, 84, 191, 190, 96, 193, 61, 62, 27, 23, 39, 60, 147, 163, 141, 190, 168, 42, 232, 60, 249, 196, 227, 190, 118, 56, 211, 189, 102, 239, 126, 62, 60, 93, 87, 191, 98, 82, 150, 62, 214, 169, 245, 61, 25, 192, 2, 191, 235, 134, 30, 190, 177, 19, 195, 189, 178, 255, 132, 61, 47, 17, 52, 191, 227, 27, 31, 191, 133, 116, 147, 190, 249, 122, 174, 190, 172, 96, 220, 190, 165, 92, 184, 190, 34, 151, 220, 190, 163, 78, 181, 190, 193, 12, 146, 62, 87, 11, 132, 62, 42, 117, 37, 189, 75, 208, 80, 61, 55, 238, 215, 190, 185, 184, 156, 188, 153, 97, 17, 190, 30, 34, 0, 190, 106, 112, 71, 191, 18, 157, 191, 62, 30, 59, 198, 189, 100, 62, 145, 190, 173, 31, 7, 62, 105, 149, 210, 189, 15, 170, 45, 190, 10, 80, 98, 190, 185, 181, 239, 61, 65, 195, 11, 56, 73, 201, 182, 61, 117, 144, 49, 188, 20, 113, 235, 190, 158, 142, 62, 189, 170, 130, 99, 190, 79, 83, 104, 62, 203, 206, 108, 190, 79, 65, 45, 60, 177, 189, 248, 62, 20, 66, 21, 189, 24, 4, 27, 63, 219, 82, 255, 190, 228, 180, 107, 62, 204, 162, 18, 190, 99, 98, 193, 191, 237, 62, 122, 62, 67, 98, 156, 62, 172, 227, 17, 190, 121, 84, 170, 189, 179, 32, 3, 63, 50, 63, 118, 191, 138, 9, 111, 188, 207, 14, 61, 62, 96, 43, 147, 190, 93, 233, 2, 191, 51, 127, 54, 186, 29, 12, 46, 189, 138, 94, 181, 190, 195, 5, 190, 189, 199, 198, 45, 191, 147, 63, 97, 189, 13, 172, 162, 190, 167, 63, 155, 190, 43, 50, 7, 63, 146, 46, 91, 62, 254, 158, 164, 189, 88, 40, 51, 191, 72, 32, 95, 191, 200, 30, 196, 190, 224, 188, 176, 190, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 241, 113, 8, 191, 128, 53, 19, 191, 71, 97, 179, 190, 49, 112, 69, 189, 183, 132, 51, 61, 178, 168, 10, 62, 210, 10, 106, 191, 237, 13, 57, 190, 229, 49, 116, 190, 13, 105, 172, 191, 183, 237, 20, 62, 53, 94, 20, 191, 107, 101, 123, 62, 99, 176, 57, 190, 180, 244, 117, 61, 153, 226, 176, 190, 40, 230, 187, 61, 29, 224, 18, 62, 71, 179, 74, 190, 85, 249, 16, 61, 58, 203, 6, 190, 73, 203, 190, 190, 54, 182, 192, 190, 169, 57, 182, 61, 139, 70, 79, 190, 40, 234, 255, 188, 162, 55, 198, 190, 235, 177, 34, 190, 66, 13, 155, 190, 185, 228, 66, 190, 148, 111, 121, 61, 190, 187, 4, 191, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 124, 28, 151, 191, 195, 89, 63, 62, 209, 210, 192, 190, 122, 12, 148, 62, 247, 24, 63, 191, 201, 204, 173, 61, 11, 126, 145, 61, 136, 5, 20, 189, 93, 47, 205, 60, 99, 223, 85, 190, 180, 10, 68, 191, 66, 40, 167, 189, 189, 25, 160, 61, 247, 72, 204, 190, 237, 4, 137, 190, 12, 127, 189, 188, 52, 26, 238, 190, 125, 57, 6, 61, 95, 123, 0, 191, 176, 119, 3, 63, 142, 2, 173, 191, 74, 166, 190, 189, 200, 133, 111, 62, 171, 195, 44, 62, 227, 79, 1, 62, 26, 104, 78, 62, 193, 9, 240, 189, 179, 148, 133, 62, 81, 27, 231, 188, 175, 194, 181, 61, 90, 147, 214, 190, 117, 245, 68, 189, 211, 44, 107, 62, 31, 67, 67, 61, 137, 67, 171, 62, 156, 12, 244, 190, 26, 56, 251, 61, 167, 165, 140, 190, 176, 49, 215, 190, 82, 114, 1, 191, 42, 204, 81, 62, 194, 104, 245, 190, 18, 86, 122, 61, 107, 19, 70, 62, 106, 40, 44, 190, 138, 35, 136, 189, 14, 30, 97, 62, 2, 131, 239, 61, 205, 212, 170, 61, 66, 30, 0, 62, 68, 159, 159, 188, 226, 61, 112, 61, 217, 188, 221, 190, 187, 46, 11, 62, 95, 128, 28, 60, 118, 129, 238, 188, 38, 180, 203, 61, 177, 0, 192, 61, 163, 106, 132, 62, 205, 147, 163, 60, 5, 117, 27, 188, 212, 184, 134, 190, 231, 21, 7, 191, 166, 115, 42, 191, 192, 250, 244, 61, 67, 34, 243, 61, 93, 138, 238, 62, 95, 162, 228, 190, 180, 32, 177, 188, 85, 223, 247, 190, 241, 193, 68, 62, 165, 133, 158, 191, 243, 196, 11, 190, 39, 237, 61, 63, 157, 6, 182, 61, 51, 238, 196, 62, 145, 170, 59, 190, 75, 103, 151, 190, 65, 226, 54, 62, 4, 104, 56, 189, 110, 237, 55, 62, 206, 40, 125, 189, 74, 169, 51, 190, 177, 125, 189, 189, 20, 33, 113, 61, 5, 203, 77, 62, 21, 42, 29, 189, 81, 120, 43, 191, 74, 53, 127, 62, 86, 200, 26, 62, 64, 19, 185, 62, 111, 159, 90, 190, 32, 81, 20, 188, 75, 36, 139, 62, 60, 99, 245, 190, 86, 53, 200, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 73, 199, 195, 190, 19, 107, 40, 191, 14, 12, 76, 190, 29, 243, 198, 62, 162, 20, 40, 62, 1, 165, 191, 62, 212, 62, 98, 190, 211, 163, 194, 189, 246, 73, 151, 190, 114, 68, 114, 190, 20, 244, 169, 188, 244, 169, 200, 190, 67, 59, 144, 62, 210, 74, 206, 189, 133, 44, 29, 61, 126, 103, 243, 62, 27, 115, 187, 61, 112, 225, 168, 62, 101, 42, 34, 62, 171, 132, 132, 189, 20, 114, 90, 189, 4, 195, 158, 189, 185, 122, 129, 61, 87, 184, 12, 190, 125, 64, 9, 190, 67, 150, 106, 190, 113, 107, 72, 61, 125, 242, 122, 62, 171, 68, 228, 190, 137, 187, 135, 61, 243, 34, 73, 189, 222, 33, 98, 61, 37, 234, 133, 190, 67, 225, 237, 61, 25, 112, 1, 191, 103, 129, 36, 61, 75, 255, 176, 188, 86, 96, 62, 62, 73, 13, 239, 190, 234, 140, 228, 190, 194, 64, 40, 189, 219, 55, 48, 191, 228, 16, 19, 62, 255, 41, 194, 190, 117, 183, 234, 58, 74, 99, 94, 62, 118, 235, 6, 190, 130, 220, 156, 62, 135, 194, 12, 62, 242, 128, 137, 62, 19, 114, 240, 62, 124, 159, 194, 62, 252, 99, 252, 189, 67, 213, 160, 61, 247, 123, 80, 191, 236, 185, 71, 190, 86, 186, 22, 190, 153, 205, 221, 61, 84, 191, 142, 62, 194, 106, 124, 190, 183, 36, 76, 60, 9, 19, 202, 190, 233, 84, 163, 62, 151, 99, 186, 61, 225, 76, 251, 189, 249, 198, 7, 189, 99, 217, 162, 189, 116, 126, 95, 61, 251, 167, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 254, 239, 132, 61, 94, 3, 8, 190, 237, 255, 217, 189, 163, 243, 64, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 21, 22, 98, 61, 52, 208, 118, 189, 142, 49, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 252, 163, 247, 61, 162, 136, 222, 189, 175, 186, 33, 190, 39, 50, 46, 190, 34, 114, 142, 61, 233, 83, 34, 61, 140, 168, 229, 61, 128, 14, 252, 61, 85, 237, 52, 190, 174, 118, 234, 61, 125, 219, 137, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 212, 53, 38, 62, 106, 104, 138, 190, 237, 52, 212, 190, 84, 126, 129, 191, 235, 166, 233, 190, 155, 76, 201, 61, 194, 155, 167, 190, 58, 114, 102, 62, 170, 172, 60, 190, 216, 206, 24, 191, 95, 205, 55, 61, 230, 191, 30, 191, 9, 122, 120, 190, 33, 221, 33, 191, 152, 52, 11, 189, 246, 119, 69, 191, 22, 98, 194, 189, 129, 210, 88, 191, 16, 218, 12, 63, 178, 43, 147, 191, 52, 242, 124, 190, 14, 49, 104, 62, 236, 158, 170, 188, 40, 57, 116, 186, 251, 0, 121, 62, 48, 105, 244, 190, 24, 193, 205, 189, 176, 204, 186, 61, 192, 133, 7, 62, 178, 179, 37, 191, 40, 47, 53, 190, 112, 244, 50, 62, 96, 48, 0, 62, 83, 123, 44, 62, 92, 221, 38, 191, 17, 243, 98, 61, 247, 7, 74, 191, 234, 176, 7, 61, 123, 2, 114, 191, 177, 240, 116, 61, 250, 152, 239, 61, 101, 232, 99, 62, 116, 93, 186, 62, 119, 1, 25, 191, 116, 26, 55, 60, 142, 84, 222, 188, 248, 177, 24, 190, 125, 100, 4, 62, 160, 231, 74, 189, 99, 99, 23, 190, 59, 217, 34, 189, 75, 12, 208, 190, 249, 112, 196, 188, 93, 191, 145, 190, 114, 39, 250, 189, 31, 51, 51, 61, 184, 90, 31, 62, 156, 244, 131, 190, 171, 62, 202, 189, 195, 75, 200, 188, 19, 205, 142, 190, 227, 89, 8, 191, 84, 252, 38, 191, 10, 187, 36, 63, 126, 104, 139, 190, 139, 122, 147, 62, 104, 205, 191, 190, 167, 135, 112, 62, 111, 234, 7, 62, 165, 214, 230, 191, 213, 201, 0, 190, 253, 120, 138, 189, 209, 139, 209, 191, 229, 106, 239, 61, 198, 39, 151, 62, 194, 146, 188, 189, 63, 160, 250, 189, 146, 29, 160, 62, 5, 198, 222, 61, 24, 8, 231, 61, 42, 7, 245, 61, 247, 3, 73, 190, 52, 138, 28, 191, 31, 158, 240, 61, 206, 37, 3, 191, 217, 5, 144, 190, 207, 242, 42, 188, 12, 217, 228, 190, 65, 104, 15, 60, 240, 143, 218, 61, 62, 208, 120, 62, 121, 158, 101, 190, 189, 241, 223, 190, 254, 165, 4, 191, 216, 33, 8, 191, 67, 31, 15, 62, 242, 231, 228, 61, 69, 200, 11, 63, 137, 138, 107, 62, 254, 193, 81, 62, 22, 195, 201, 189, 246, 159, 129, 62, 209, 233, 183, 191, 135, 240, 74, 61, 190, 232, 6, 63, 1, 103, 231, 61, 254, 226, 149, 61, 69, 86, 181, 189, 27, 19, 38, 190, 137, 95, 228, 190, 54, 7, 113, 62, 146, 115, 108, 61, 236, 155, 80, 191, 252, 141, 187, 190, 210, 250, 148, 189, 94, 27, 142, 190, 217, 128, 79, 61, 55, 232, 20, 62, 232, 1, 54, 62, 181, 195, 241, 61, 164, 127, 107, 56, 196, 230, 187, 62, 184, 79, 237, 190, 231, 50, 245, 60, 119, 113, 157, 62, 234, 6, 157, 190, 6, 137, 195, 190, 208, 138, 172, 62, 178, 202, 118, 188, 57, 227, 7, 63, 186, 98, 178, 190, 250, 164, 138, 62, 155, 246, 250, 189, 46, 69, 7, 191, 116, 232, 133, 190, 146, 189, 211, 61, 10, 204, 1, 191, 118, 175, 25, 62, 165, 25, 23, 62, 68, 118, 2, 190, 243, 199, 89, 188, 17, 20, 152, 62, 150, 43, 99, 190, 228, 219, 106, 60, 137, 255, 22, 62, 229, 79, 41, 189, 44, 12, 174, 62, 118, 165, 19, 190, 225, 220, 200, 188, 248, 51, 225, 61, 130, 79, 167, 190, 52, 252, 20, 188, 131, 173, 39, 62, 88, 90, 142, 190, 38, 244, 222, 61, 226, 83, 66, 62, 104, 210, 234, 190, 176, 99, 210, 190, 210, 246, 14, 191, 69, 48, 61, 191, 200, 98, 139, 62, 29, 223, 100, 190, 198, 7, 145, 189, 81, 193, 143, 62, 65, 215, 94, 62, 75, 211, 120, 190, 218, 129, 60, 62, 228, 123, 26, 62, 69, 93, 193, 190, 255, 46, 63, 62, 250, 134, 22, 190, 133, 250, 152, 188, 61, 88, 246, 61, 40, 224, 77, 61, 4, 201, 141, 62, 159, 49, 69, 62, 152, 181, 150, 58, 196, 8, 228, 189, 25, 21, 189, 62, 151, 18, 211, 190, 65, 246, 203, 188, 31, 81, 5, 61, 85, 68, 13, 190, 65, 245, 119, 62, 45, 105, 157, 62, 191, 54, 4, 189, 183, 173, 67, 62, 119, 177, 201, 61, 151, 141, 216, 189, 172, 182, 23, 61, 249, 254, 132, 60, 7, 112, 147, 191, 250, 29, 157, 61, 210, 205, 37, 190, 115, 72, 173, 61, 182, 46, 4, 62, 41, 51, 115, 62, 91, 250, 2, 190, 39, 11, 68, 62, 156, 123, 27, 61, 124, 172, 83, 189, 246, 114, 189, 188, 59, 153, 16, 191, 130, 98, 103, 62, 40, 0, 167, 62, 226, 97, 51, 190, 152, 36, 193, 62, 14, 70, 106, 62, 36, 37, 98, 188, 163, 238, 14, 191, 45, 134, 201, 190, 64, 180, 18, 191, 184, 145, 91, 190, 169, 115, 160, 60, 153, 105, 172, 62, 208, 94, 225, 61, 2, 183, 35, 190, 112, 6, 215, 188, 164, 157, 2, 60, 148, 80, 174, 190, 213, 156, 253, 61, 11, 96, 128, 62, 41, 9, 35, 62, 1, 249, 71, 63, 159, 88, 75, 190, 23, 98, 213, 61, 145, 142, 26, 60, 249, 209, 156, 60, 82, 150, 162, 62, 81, 102, 240, 190, 147, 21, 208, 61, 26, 3, 154, 190, 50, 115, 22, 190, 6, 74, 131, 189, 208, 201, 158, 62, 33, 95, 179, 188, 154, 196, 29, 62, 179, 236, 38, 190, 4, 191, 86, 62, 225, 124, 95, 61, 103, 1, 1, 189, 211, 25, 59, 61, 162, 119, 215, 191, 111, 166, 191, 189, 46, 216, 184, 190, 134, 40, 213, 189, 202, 206, 154, 189, 135, 200, 185, 187, 200, 85, 178, 190, 126, 32, 141, 62, 139, 80, 137, 62, 247, 15, 16, 190, 22, 87, 87, 62, 236, 39, 60, 62, 70, 122, 27, 61, 242, 224, 37, 63, 54, 126, 40, 62, 240, 68, 203, 62, 242, 105, 137, 190, 108, 107, 74, 62, 170, 26, 179, 190, 13, 30, 83, 62, 201, 69, 195, 191, 6, 157, 189, 61, 166, 134, 194, 62, 201, 244, 48, 188, 57, 19, 198, 62, 168, 19, 80, 190, 208, 209, 195, 190, 215, 101, 188, 190, 166, 159, 208, 62, 149, 175, 134, 62, 75, 30, 10, 191, 248, 32, 134, 190, 148, 11, 225, 189, 218, 212, 208, 190, 223, 0, 191, 189, 198, 205, 138, 62, 24, 142, 43, 190, 91, 68, 244, 61, 163, 47, 175, 61, 211, 149, 172, 62, 166, 132, 134, 190, 227, 169, 21, 62, 174, 204, 135, 62, 182, 217, 21, 191, 158, 106, 26, 191, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 235, 158, 109, 191, 241, 62, 0, 190, 95, 250, 183, 190, 62, 150, 199, 62, 154, 106, 210, 61, 87, 219, 5, 63, 165, 66, 112, 187, 96, 194, 129, 62, 89, 197, 130, 189, 9, 28, 99, 190, 66, 102, 47, 62, 224, 109, 12, 191, 50, 211, 163, 62, 186, 191, 10, 62, 99, 169, 255, 59, 17, 126, 17, 62, 86, 137, 132, 62, 117, 136, 246, 189, 20, 136, 134, 190, 27, 210, 247, 60, 79, 214, 180, 190, 140, 248, 152, 190, 93, 237, 34, 62, 59, 241, 141, 189, 10, 56, 186, 61, 246, 96, 88, 61, 114, 219, 153, 188, 93, 143, 75, 61, 102, 210, 8, 191, 119, 215, 105, 61, 63, 30, 219, 60, 10, 107, 114, 189, 220, 165, 32, 63, 191, 185, 0, 190, 105, 21, 196, 62, 121, 167, 22, 191, 210, 146, 42, 62, 78, 190, 226, 190, 146, 170, 93, 61, 43, 205, 91, 190, 60, 237, 127, 188, 162, 174, 221, 62, 135, 153, 83, 61, 11, 112, 148, 62, 139, 155, 40, 190, 124, 195, 244, 190, 188, 11, 94, 62, 31, 50, 11, 190, 75, 211, 88, 61, 124, 162, 254, 61, 118, 18, 130, 190, 88, 101, 179, 61, 18, 231, 190, 61, 215, 33, 108, 62, 15, 68, 153, 62, 192, 46, 239, 61, 8, 221, 32, 62, 195, 125, 25, 62, 132, 21, 199, 61, 255, 174, 43, 62, 98, 94, 88, 190, 56, 240, 149, 62, 74, 102, 16, 191, 197, 248, 19, 191, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 138, 215, 58, 191, 23, 39, 55, 62, 200, 107, 134, 190, 70, 130, 242, 189, 19, 151, 82, 62, 81, 140, 115, 62, 37, 146, 111, 190, 59, 167, 103, 62, 53, 174, 128, 62, 227, 116, 240, 190, 255, 79, 157, 61, 106, 179, 191, 190, 38, 15, 48, 61, 183, 180, 16, 62, 60, 50, 208, 61, 116, 73, 54, 62, 247, 245, 28, 62, 123, 7, 132, 61, 99, 18, 254, 61, 6, 43, 171, 62, 129, 152, 132, 190, 39, 9, 1, 62, 31, 194, 189, 61, 45, 173, 122, 189, 165, 192, 89, 62, 23, 178, 177, 62, 20, 74, 97, 59, 156, 193, 200, 61, 103, 111, 8, 61, 223, 29, 5, 189, 233, 17, 131, 190, 176, 98, 190, 189, 171, 58, 116, 191, 248, 220, 114, 62, 201, 5, 56, 191, 96, 175, 121, 190, 234, 129, 148, 61, 214, 61, 152, 61, 149, 77, 66, 61, 147, 94, 117, 61, 73, 151, 11, 61, 54, 125, 24, 191, 181, 175, 227, 189, 16, 54, 216, 190, 160, 171, 1, 61, 198, 161, 129, 62, 147, 47, 113, 190, 108, 32, 57, 62, 34, 185, 188, 188, 8, 0, 119, 189, 232, 109, 196, 62, 81, 255, 223, 62, 243, 45, 168, 190, 92, 98, 97, 189, 46, 121, 176, 189, 36, 72, 183, 189, 24, 214, 38, 62, 226, 159, 18, 189, 90, 71, 71, 62, 147, 173, 53, 61, 3, 29, 196, 60, 11, 45, 12, 190, 152, 60, 164, 62, 60, 176, 69, 61, 172, 74, 79, 188, 255, 248, 54, 191, 214, 174, 59, 188, 37, 79, 94, 190, 18, 51, 48, 60, 18, 3, 188, 60, 174, 169, 11, 190, 27, 166, 224, 189, 187, 220, 100, 190, 238, 196, 190, 190, 246, 187, 226, 189, 22, 223, 13, 189, 75, 195, 135, 62, 79, 37, 227, 189, 70, 37, 70, 62, 108, 144, 208, 190, 245, 102, 111, 62, 211, 242, 148, 61, 48, 247, 137, 190, 97, 173, 163, 190, 89, 64, 172, 190, 99, 194, 147, 190, 141, 37, 39, 62, 226, 251, 3, 191, 235, 255, 176, 61, 228, 148, 162, 190, 37, 192, 45, 191, 76, 174, 111, 62, 157, 240, 243, 190, 107, 67, 87, 61, 97, 223, 95, 190, 1, 151, 242, 190, 27, 29, 130, 191, 163, 124, 176, 61, 213, 169, 8, 191, 246, 20, 249, 62, 121, 232, 215, 189, 89, 131, 172, 62, 37, 232, 199, 61, 166, 248, 56, 62, 83, 229, 232, 189, 69, 186, 146, 190, 47, 97, 165, 189, 170, 237, 16, 191, 24, 142, 107, 62, 19, 161, 145, 62, 239, 231, 6, 189, 173, 196, 138, 61, 24, 233, 0, 61, 96, 0, 16, 62, 249, 12, 52, 191, 195, 20, 255, 62, 69, 202, 74, 191, 167, 237, 119, 190, 93, 23, 59, 189, 203, 155, 127, 62, 70, 228, 195, 61, 97, 108, 156, 189, 88, 184, 65, 61, 20, 80, 144, 189, 109, 194, 205, 190, 241, 31, 1, 62, 61, 246, 185, 62, 249, 190, 112, 62, 136, 94, 139, 191, 86, 210, 69, 191, 55, 118, 29, 61, 189, 45, 101, 62, 74, 84, 42, 190, 218, 164, 13, 62, 62, 102, 119, 61, 105, 69, 151, 62, 106, 50, 10, 191, 225, 179, 81, 62, 65, 38, 49, 191, 215, 182, 141, 190, 227, 52, 115, 62, 180, 79, 68, 62, 183, 168, 159, 189, 62, 10, 47, 62, 165, 241, 246, 61, 150, 201, 105, 59, 137, 214, 131, 190, 146, 212, 247, 62, 69, 114, 165, 190, 97, 8, 5, 191, 203, 128, 14, 62, 181, 200, 87, 62, 5, 96, 31, 62, 163, 146, 188, 190, 93, 17, 163, 187, 247, 92, 244, 188, 240, 245, 47, 191, 147, 43, 16, 62, 179, 6, 143, 61, 212, 99, 77, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 159, 39, 62, 172, 213, 188, 187, 164, 17, 103, 188, 50, 157, 156, 60, 117, 52, 66, 61, 109, 79, 180, 189, 197, 62, 21, 62, 85, 59, 65, 62, 28, 133, 30, 62, 28, 94, 48, 190, 100, 175, 19, 60, 47, 137, 137, 188, 51, 245, 204, 189, 15, 86, 55, 189, 39, 167, 64, 190, 253, 57, 133, 188, 133, 0, 123, 61, 9, 29, 67, 62, 114, 133, 123, 189, 74, 76, 76, 61, 123, 124, 154, 62, 133, 248, 54, 189, 82, 250, 34, 62, 52, 58, 2, 190, 248, 138, 162, 62, 34, 190, 18, 62, 161, 231, 122, 189, 53, 94, 95, 62, 253, 239, 2, 188, 68, 156, 178, 61, 198, 254, 132, 61, 193, 198, 47, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 216, 219, 190, 122, 172, 50, 63, 187, 123, 164, 63, 79, 83, 39, 190, 60, 216, 80, 61, 119, 158, 141, 62, 99, 161, 230, 62, 18, 42, 106, 190, 80, 178, 21, 191, 186, 109, 213, 189, 230, 36, 152, 61, 145, 225, 251, 62, 203, 200, 24, 60, 4, 241, 75, 61, 116, 56, 36, 63, 99, 130, 81, 191, 208, 249, 219, 190, 39, 195, 129, 191, 165, 10, 204, 190, 122, 11, 41, 62, 119, 24, 242, 62, 231, 188, 196, 190, 232, 146, 150, 191, 97, 25, 11, 62, 120, 127, 1, 63, 246, 183, 195, 190, 80, 24, 0, 61, 241, 41, 60, 62, 235, 90, 222, 62, 115, 240, 10, 190, 15, 253, 191, 62, 247, 45, 84, 63, 63, 131, 138, 190, 247, 128, 236, 190, 213, 124, 170, 62, 158, 89, 197, 189, 213, 222, 77, 191, 202, 33, 113, 189, 47, 242, 169, 62, 234, 153, 170, 190, 93, 4, 77, 62, 214, 19, 24, 190, 0, 184, 7, 191, 81, 74, 201, 62, 121, 81, 212, 60, 28, 42, 186, 61, 47, 249, 27, 62, 78, 39, 9, 62, 210, 230, 219, 190, 135, 217, 206, 189, 40, 188, 129, 61, 151, 54, 161, 190, 243, 184, 38, 62, 53, 65, 163, 61, 78, 183, 97, 189, 83, 154, 227, 61, 65, 28, 151, 190, 192, 92, 119, 61, 102, 55, 6, 62, 215, 87, 156, 190, 53, 123, 183, 62, 71, 219, 74, 190, 64, 233, 215, 62, 165, 213, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 95, 180, 189, 176, 149, 66, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {2, 82, 245, 191, 245, 46, 143, 190, 167, 80, 12, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {88, 85, 57, 63, 151, 245, 125, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}