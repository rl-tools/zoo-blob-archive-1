// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 180, 112, 62, 244, 116, 0, 63, 118, 78, 153, 62, 214, 248, 32, 189, 66, 72, 247, 62, 69, 230, 189, 190, 199, 40, 250, 62, 215, 26, 80, 63, 160, 177, 37, 62, 132, 140, 184, 62, 125, 176, 97, 191, 8, 98, 132, 189, 27, 92, 150, 62, 101, 46, 122, 189, 209, 202, 12, 190, 148, 104, 13, 63, 214, 220, 114, 191, 167, 219, 159, 189, 91, 199, 24, 191, 146, 242, 226, 190, 200, 34, 183, 189, 242, 53, 205, 190, 32, 227, 76, 63, 45, 75, 238, 62, 7, 113, 120, 62, 180, 175, 14, 63, 218, 205, 242, 190, 172, 238, 214, 190, 104, 216, 93, 191, 28, 27, 44, 190, 103, 79, 156, 62, 176, 140, 129, 61, 197, 111, 188, 190, 146, 242, 22, 63, 9, 15, 30, 63, 118, 229, 215, 62, 243, 59, 53, 63, 82, 224, 49, 191, 94, 147, 139, 190, 123, 40, 5, 63, 253, 240, 142, 62, 52, 114, 1, 191, 164, 148, 55, 63, 114, 95, 49, 63, 186, 23, 202, 62, 145, 16, 27, 190, 236, 122, 26, 191, 166, 105, 47, 62, 151, 0, 227, 62, 224, 45, 246, 190, 143, 142, 14, 190, 28, 181, 23, 63, 92, 193, 86, 190, 30, 98, 148, 62, 102, 158, 183, 190, 100, 135, 151, 190, 36, 115, 172, 190, 118, 74, 57, 191, 48, 166, 19, 63, 238, 160, 202, 189, 9, 220, 250, 190, 126, 246, 190, 190, 237, 111, 4, 191, 228, 58, 10, 191, 155, 242, 248, 60, 99, 9, 77, 191, 148, 236, 192, 190, 93, 2, 181, 62, 52, 224, 30, 60, 97, 43, 33, 191, 38, 197, 117, 190, 110, 188, 157, 62, 177, 151, 50, 190, 221, 189, 228, 189, 11, 167, 202, 189, 36, 149, 134, 62, 75, 49, 74, 63, 248, 171, 225, 190, 43, 183, 92, 61, 33, 239, 37, 191, 57, 5, 103, 62, 119, 94, 147, 62, 242, 144, 24, 190, 132, 230, 19, 63, 211, 29, 1, 191, 46, 30, 130, 62, 80, 125, 11, 191, 222, 173, 49, 191, 164, 138, 10, 191, 121, 251, 155, 60, 130, 127, 41, 63, 247, 208, 76, 191, 236, 228, 237, 190, 119, 188, 215, 62, 58, 127, 99, 191, 171, 76, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 1, 8, 191, 67, 40, 180, 61, 100, 3, 8, 190, 90, 208, 133, 189, 246, 193, 176, 62, 156, 178, 88, 61, 78, 236, 146, 62, 166, 89, 5, 58, 51, 108, 236, 62, 4, 216, 130, 62, 130, 151, 246, 62, 4, 54, 190, 190, 116, 222, 111, 62, 162, 246, 163, 190, 104, 205, 200, 62, 27, 140, 45, 188, 34, 59, 25, 63, 61, 224, 236, 62, 188, 173, 20, 191, 142, 110, 117, 190, 111, 197, 14, 191, 137, 204, 62, 187, 181, 170, 35, 63, 239, 84, 221, 190, 242, 243, 61, 63, 234, 121, 222, 62, 155, 26, 78, 189, 194, 73, 212, 62, 57, 43, 213, 189, 187, 53, 179, 62, 59, 249, 169, 190, 213, 215, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 188, 141, 189, 178, 119, 131, 62, 1, 17, 46, 62, 193, 7, 26, 191, 8, 217, 16, 62, 190, 57, 200, 189, 46, 204, 51, 190, 129, 30, 110, 61, 167, 232, 126, 62, 250, 68, 104, 62, 63, 86, 93, 62, 38, 102, 249, 60, 247, 11, 205, 188, 125, 225, 72, 190, 163, 42, 144, 62, 174, 31, 40, 190, 197, 219, 46, 62, 59, 182, 223, 187, 55, 144, 44, 190, 251, 40, 20, 190, 161, 15, 60, 190, 1, 2, 244, 188, 67, 36, 44, 62, 176, 76, 145, 190, 108, 246, 90, 62, 130, 70, 64, 62, 11, 115, 135, 188, 238, 132, 216, 189, 116, 88, 228, 188, 0, 151, 92, 61, 162, 231, 208, 190, 197, 232, 128, 190, 202, 162, 145, 190, 193, 123, 152, 190, 43, 1, 148, 190, 248, 254, 98, 190, 142, 222, 185, 190, 119, 164, 100, 190, 185, 190, 13, 62, 223, 109, 57, 62, 108, 37, 75, 190, 135, 54, 185, 61, 95, 252, 181, 190, 131, 149, 7, 188, 25, 180, 184, 59, 30, 34, 0, 190, 82, 76, 124, 190, 16, 111, 138, 62, 44, 152, 105, 189, 214, 195, 78, 190, 173, 31, 7, 62, 252, 39, 168, 189, 145, 226, 7, 61, 86, 141, 148, 190, 117, 36, 169, 60, 3, 96, 29, 189, 233, 89, 8, 189, 153, 35, 143, 189, 133, 63, 10, 191, 78, 231, 8, 61, 150, 162, 152, 190, 150, 163, 192, 61, 112, 29, 109, 190, 171, 193, 105, 189, 78, 87, 177, 62, 9, 111, 211, 189, 32, 196, 179, 62, 12, 70, 25, 190, 210, 190, 148, 62, 57, 229, 134, 190, 163, 112, 176, 190, 59, 4, 72, 62, 129, 126, 100, 61, 237, 62, 16, 190, 140, 69, 53, 189, 56, 137, 201, 62, 71, 47, 143, 190, 31, 254, 30, 189, 201, 254, 163, 60, 165, 220, 150, 190, 131, 194, 251, 189, 213, 194, 148, 188, 29, 12, 46, 189, 255, 134, 85, 190, 195, 5, 190, 189, 65, 176, 196, 189, 223, 175, 25, 189, 201, 226, 138, 190, 207, 245, 104, 190, 187, 44, 92, 62, 60, 99, 194, 61, 210, 75, 252, 189, 27, 240, 241, 188, 35, 39, 1, 191, 168, 109, 29, 190, 250, 54, 35, 189, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 142, 7, 52, 190, 132, 4, 244, 189, 236, 125, 208, 189, 90, 23, 153, 60, 105, 48, 237, 61, 205, 142, 20, 62, 100, 247, 181, 190, 75, 1, 18, 188, 185, 34, 152, 189, 251, 102, 230, 190, 240, 178, 114, 62, 59, 245, 130, 190, 203, 87, 150, 62, 190, 166, 10, 61, 231, 102, 58, 62, 43, 205, 145, 190, 5, 234, 30, 62, 204, 6, 68, 62, 193, 52, 55, 190, 58, 76, 137, 61, 147, 229, 134, 189, 31, 9, 57, 190, 244, 69, 39, 61, 158, 230, 180, 61, 25, 222, 218, 188, 23, 238, 26, 62, 157, 91, 26, 190, 47, 82, 3, 190, 169, 162, 140, 190, 60, 141, 52, 190, 70, 124, 35, 62, 171, 144, 153, 190, 39, 31, 60, 61, 160, 161, 27, 190, 165, 19, 5, 189, 239, 99, 178, 61, 211, 117, 30, 61, 220, 7, 201, 60, 39, 210, 123, 61, 101, 100, 241, 189, 43, 79, 68, 188, 138, 122, 90, 61, 77, 170, 249, 188, 196, 108, 201, 61, 88, 7, 7, 190, 216, 212, 6, 188, 247, 131, 8, 62, 227, 251, 57, 189, 165, 49, 69, 190, 114, 96, 53, 190, 15, 70, 154, 189, 91, 76, 46, 190, 182, 21, 98, 189, 27, 243, 217, 189, 97, 17, 131, 189, 14, 159, 20, 62, 244, 92, 181, 61, 74, 34, 151, 61, 173, 92, 46, 190, 209, 112, 134, 188, 245, 94, 37, 190, 101, 59, 182, 189, 69, 14, 214, 61, 237, 237, 171, 189, 82, 148, 176, 190, 99, 139, 56, 190, 82, 210, 219, 190, 66, 219, 190, 61, 41, 143, 155, 190, 112, 181, 51, 189, 251, 60, 45, 62, 112, 193, 127, 189, 32, 129, 144, 190, 242, 38, 139, 190, 237, 50, 15, 191, 207, 90, 38, 190, 48, 50, 23, 190, 87, 209, 13, 61, 208, 61, 80, 190, 247, 123, 213, 61, 152, 51, 138, 190, 51, 64, 173, 61, 150, 27, 87, 188, 74, 154, 165, 62, 5, 100, 135, 190, 247, 154, 252, 190, 238, 9, 116, 62, 84, 222, 70, 62, 10, 161, 64, 62, 106, 99, 9, 190, 226, 250, 171, 189, 245, 196, 88, 62, 155, 4, 25, 191, 48, 207, 61, 62, 248, 79, 201, 189, 181, 197, 49, 61, 83, 41, 47, 190, 174, 66, 53, 189, 53, 120, 160, 62, 191, 197, 218, 190, 179, 192, 42, 62, 45, 28, 144, 190, 173, 92, 213, 188, 212, 234, 237, 189, 66, 133, 72, 62, 130, 145, 89, 61, 90, 159, 5, 62, 98, 71, 27, 61, 160, 175, 141, 189, 11, 212, 239, 189, 237, 7, 76, 62, 132, 247, 220, 189, 62, 47, 240, 61, 148, 177, 226, 61, 2, 200, 15, 189, 49, 111, 164, 189, 52, 107, 247, 189, 48, 107, 233, 61, 73, 60, 100, 59, 168, 223, 178, 189, 84, 63, 244, 61, 227, 98, 185, 61, 105, 198, 157, 60, 90, 132, 159, 189, 234, 17, 155, 189, 196, 176, 151, 189, 68, 28, 84, 190, 119, 213, 59, 190, 137, 187, 108, 190, 45, 99, 247, 61, 27, 216, 186, 62, 251, 125, 197, 190, 137, 163, 133, 61, 94, 69, 216, 190, 183, 87, 254, 60, 131, 219, 154, 190, 191, 60, 155, 189, 106, 24, 134, 62, 182, 143, 36, 62, 200, 60, 226, 61, 76, 49, 137, 189, 152, 58, 116, 190, 51, 240, 43, 62, 134, 97, 9, 190, 6, 248, 102, 62, 43, 97, 22, 189, 133, 131, 234, 189, 32, 200, 124, 189, 114, 39, 45, 190, 139, 73, 210, 61, 147, 73, 99, 189, 142, 45, 144, 190, 246, 19, 46, 62, 92, 151, 97, 62, 184, 207, 41, 62, 47, 5, 168, 190, 143, 98, 200, 189, 0, 129, 193, 61, 103, 3, 66, 190, 41, 104, 195, 189, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 26, 30, 64, 62, 35, 200, 127, 190, 11, 144, 245, 189, 159, 122, 27, 62, 187, 112, 9, 62, 3, 95, 108, 62, 18, 85, 45, 190, 195, 46, 207, 60, 26, 205, 0, 190, 197, 197, 253, 189, 99, 129, 108, 61, 127, 121, 124, 190, 208, 75, 111, 62, 108, 226, 27, 62, 48, 84, 153, 60, 126, 249, 237, 62, 94, 38, 88, 61, 2, 110, 137, 62, 103, 79, 34, 62, 79, 130, 111, 190, 32, 106, 237, 61, 202, 247, 81, 61, 196, 65, 75, 62, 10, 23, 28, 62, 28, 239, 144, 188, 123, 19, 131, 189, 97, 218, 140, 59, 163, 118, 130, 62, 194, 252, 151, 190, 248, 195, 31, 62, 254, 136, 164, 61, 11, 113, 77, 62, 181, 195, 229, 61, 98, 202, 151, 189, 127, 232, 166, 190, 175, 80, 190, 62, 61, 91, 170, 189, 157, 118, 141, 62, 239, 48, 137, 190, 161, 71, 19, 190, 44, 154, 41, 190, 113, 114, 249, 60, 120, 23, 125, 61, 146, 31, 34, 188, 25, 40, 12, 189, 96, 154, 177, 60, 209, 174, 164, 189, 215, 52, 121, 62, 160, 45, 239, 61, 206, 219, 95, 62, 92, 154, 57, 62, 58, 188, 15, 61, 54, 55, 145, 61, 252, 188, 26, 60, 119, 66, 199, 190, 249, 242, 186, 189, 189, 143, 159, 189, 115, 68, 38, 189, 35, 206, 104, 62, 232, 116, 156, 189, 91, 187, 37, 190, 145, 117, 253, 189, 193, 98, 93, 62, 221, 244, 206, 60, 225, 76, 251, 189, 14, 105, 194, 188, 60, 47, 150, 189, 116, 126, 95, 61, 60, 228, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 2, 179, 166, 61, 103, 47, 243, 189, 237, 255, 217, 189, 161, 213, 48, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 232, 232, 133, 61, 52, 208, 118, 189, 216, 55, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 56, 70, 7, 62, 162, 136, 222, 189, 189, 250, 31, 190, 183, 137, 31, 190, 34, 114, 142, 61, 7, 67, 80, 61, 72, 49, 4, 62, 128, 14, 252, 61, 254, 223, 52, 190, 10, 197, 237, 61, 186, 9, 119, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 19, 77, 7, 189, 210, 3, 110, 190, 209, 2, 214, 189, 142, 134, 237, 190, 105, 16, 167, 190, 166, 172, 238, 190, 32, 75, 12, 62, 33, 199, 172, 189, 17, 41, 232, 189, 136, 75, 0, 190, 80, 170, 16, 191, 106, 222, 133, 190, 46, 205, 182, 190, 0, 114, 12, 62, 61, 108, 198, 189, 181, 215, 56, 189, 199, 140, 70, 190, 164, 114, 48, 190, 41, 121, 131, 190, 189, 217, 202, 62, 139, 198, 83, 190, 228, 214, 42, 191, 22, 49, 166, 62, 74, 68, 54, 62, 210, 109, 184, 61, 155, 187, 227, 189, 42, 70, 132, 190, 236, 220, 81, 61, 57, 67, 231, 190, 196, 31, 149, 62, 162, 252, 34, 190, 166, 74, 17, 189, 138, 210, 244, 61, 131, 66, 1, 62, 168, 49, 148, 62, 53, 122, 20, 191, 205, 42, 38, 62, 167, 206, 223, 190, 40, 217, 218, 61, 52, 131, 217, 60, 97, 48, 181, 61, 169, 12, 250, 61, 47, 169, 129, 62, 202, 151, 18, 62, 124, 128, 158, 190, 114, 220, 56, 188, 94, 143, 85, 62, 9, 148, 187, 189, 136, 51, 87, 62, 153, 155, 112, 190, 240, 92, 135, 189, 126, 59, 233, 188, 56, 6, 199, 189, 48, 164, 61, 189, 171, 103, 159, 189, 31, 78, 187, 189, 245, 245, 30, 62, 222, 211, 66, 62, 34, 168, 190, 189, 186, 125, 5, 190, 163, 14, 51, 189, 149, 29, 148, 189, 161, 53, 127, 189, 75, 232, 123, 189, 184, 98, 38, 61, 255, 86, 127, 188, 233, 165, 146, 62, 71, 229, 185, 190, 102, 140, 109, 62, 162, 226, 171, 61, 92, 182, 108, 190, 186, 102, 175, 61, 63, 12, 211, 60, 125, 226, 209, 189, 183, 204, 58, 62, 10, 154, 48, 60, 199, 155, 130, 189, 122, 97, 197, 57, 21, 176, 106, 62, 114, 104, 112, 190, 200, 76, 2, 62, 52, 49, 223, 60, 247, 3, 73, 190, 77, 230, 59, 189, 31, 158, 240, 61, 243, 246, 215, 190, 193, 161, 227, 189, 229, 60, 16, 190, 211, 179, 148, 190, 95, 67, 225, 61, 145, 163, 248, 189, 241, 27, 95, 61, 88, 111, 143, 190, 189, 186, 22, 190, 81, 21, 164, 190, 141, 27, 113, 190, 172, 229, 169, 189, 208, 88, 186, 61, 61, 101, 59, 189, 252, 164, 56, 60, 206, 209, 216, 61, 246, 234, 53, 190, 247, 200, 96, 62, 220, 148, 245, 190, 130, 10, 73, 61, 38, 159, 53, 62, 138, 109, 185, 61, 127, 25, 67, 189, 168, 62, 15, 188, 6, 97, 20, 190, 116, 77, 83, 190, 160, 246, 186, 188, 235, 68, 157, 189, 40, 186, 37, 191, 149, 220, 35, 190, 27, 219, 147, 61, 227, 239, 148, 190, 65, 144, 9, 61, 222, 8, 52, 62, 108, 73, 148, 59, 203, 129, 213, 61, 195, 251, 188, 186, 60, 196, 219, 188, 174, 71, 67, 191, 252, 117, 228, 60, 55, 213, 154, 62, 36, 193, 0, 189, 180, 5, 213, 189, 65, 126, 32, 62, 115, 143, 154, 189, 14, 4, 242, 62, 150, 56, 214, 190, 43, 68, 126, 62, 189, 101, 94, 190, 170, 55, 2, 191, 169, 54, 211, 61, 218, 65, 177, 61, 154, 72, 118, 190, 125, 185, 24, 62, 23, 164, 163, 61, 56, 69, 225, 189, 226, 24, 8, 61, 231, 36, 130, 62, 119, 96, 166, 190, 1, 222, 129, 188, 238, 17, 156, 61, 209, 48, 193, 61, 172, 182, 158, 188, 57, 141, 59, 62, 144, 178, 2, 189, 30, 25, 169, 188, 157, 153, 234, 188, 254, 74, 183, 189, 102, 48, 14, 62, 206, 141, 39, 190, 244, 87, 194, 60, 44, 152, 25, 62, 143, 36, 228, 190, 61, 70, 159, 189, 9, 184, 208, 189, 52, 6, 138, 188, 48, 220, 214, 61, 119, 189, 176, 190, 55, 127, 18, 60, 254, 127, 84, 62, 136, 192, 90, 62, 227, 209, 99, 189, 175, 177, 69, 62, 159, 162, 16, 189, 81, 138, 195, 187, 50, 121, 251, 61, 230, 241, 191, 189, 222, 169, 238, 188, 170, 199, 18, 61, 25, 132, 242, 188, 207, 212, 149, 62, 102, 166, 39, 62, 27, 244, 68, 189, 36, 241, 8, 190, 76, 210, 75, 62, 200, 86, 6, 190, 136, 220, 144, 189, 246, 86, 230, 60, 120, 206, 253, 60, 167, 160, 95, 62, 190, 23, 195, 61, 234, 154, 186, 189, 8, 253, 35, 62, 253, 80, 158, 188, 220, 147, 37, 61, 81, 134, 211, 61, 99, 152, 35, 62, 162, 130, 161, 190, 255, 58, 201, 189, 185, 242, 84, 190, 249, 213, 171, 61, 148, 151, 39, 61, 220, 107, 108, 62, 193, 29, 108, 190, 65, 132, 20, 62, 206, 2, 132, 189, 164, 148, 103, 189, 90, 227, 253, 189, 102, 71, 166, 190, 79, 255, 57, 62, 169, 236, 157, 62, 172, 15, 23, 190, 121, 88, 149, 62, 188, 102, 35, 62, 137, 105, 225, 186, 164, 183, 25, 61, 213, 210, 43, 190, 106, 109, 128, 190, 74, 7, 58, 190, 20, 86, 46, 189, 156, 92, 174, 62, 197, 116, 228, 188, 107, 35, 148, 190, 39, 33, 5, 190, 94, 184, 173, 61, 148, 72, 152, 190, 235, 133, 66, 189, 50, 203, 132, 62, 114, 48, 75, 62, 118, 211, 178, 61, 214, 143, 124, 190, 244, 79, 28, 190, 224, 111, 75, 62, 183, 25, 183, 61, 130, 16, 210, 62, 169, 65, 68, 190, 96, 232, 184, 189, 163, 244, 55, 190, 243, 21, 138, 61, 70, 155, 132, 61, 154, 184, 197, 60, 29, 228, 188, 61, 44, 4, 141, 62, 48, 168, 159, 190, 158, 24, 128, 60, 137, 119, 11, 62, 192, 88, 69, 190, 4, 255, 38, 62, 145, 71, 65, 191, 169, 246, 138, 61, 58, 71, 216, 189, 110, 109, 150, 190, 66, 244, 165, 190, 51, 63, 178, 189, 206, 90, 142, 190, 212, 16, 212, 61, 198, 64, 218, 61, 158, 195, 51, 189, 16, 238, 37, 62, 170, 121, 155, 62, 89, 156, 81, 62, 13, 109, 18, 62, 210, 11, 24, 62, 166, 129, 133, 60, 106, 203, 180, 190, 107, 212, 88, 62, 39, 131, 165, 190, 190, 255, 70, 62, 51, 172, 22, 191, 129, 33, 198, 61, 178, 48, 85, 62, 96, 196, 58, 60, 7, 215, 230, 187, 116, 62, 177, 61, 158, 86, 193, 190, 196, 100, 86, 190, 126, 134, 192, 59, 248, 103, 139, 62, 233, 153, 53, 191, 239, 44, 156, 189, 19, 9, 28, 188, 116, 0, 147, 190, 228, 18, 168, 189, 101, 165, 152, 62, 161, 167, 130, 190, 50, 79, 244, 61, 52, 44, 169, 61, 2, 200, 158, 190, 108, 5, 64, 191, 60, 202, 31, 62, 78, 223, 142, 62, 250, 110, 243, 189, 121, 241, 201, 189, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 195, 171, 127, 189, 60, 131, 53, 190, 229, 120, 224, 190, 148, 146, 136, 62, 221, 64, 129, 61, 90, 155, 242, 62, 123, 204, 167, 189, 97, 232, 44, 62, 233, 47, 191, 189, 95, 75, 143, 190, 229, 138, 18, 62, 185, 77, 199, 190, 134, 0, 153, 62, 212, 1, 157, 62, 169, 172, 179, 188, 238, 222, 233, 61, 106, 89, 112, 62, 243, 146, 2, 190, 18, 160, 176, 189, 37, 143, 118, 189, 108, 27, 141, 190, 5, 180, 147, 190, 76, 83, 252, 61, 134, 195, 16, 188, 121, 30, 66, 61, 141, 169, 126, 187, 173, 140, 113, 189, 122, 27, 155, 61, 14, 5, 18, 191, 194, 120, 37, 61, 3, 6, 190, 61, 199, 53, 68, 60, 194, 119, 156, 189, 71, 49, 20, 190, 94, 173, 181, 62, 45, 125, 205, 190, 58, 231, 90, 62, 171, 45, 176, 190, 76, 97, 130, 61, 152, 129, 23, 190, 215, 253, 247, 187, 21, 223, 191, 62, 148, 97, 215, 61, 206, 172, 21, 62, 97, 234, 138, 189, 129, 194, 222, 190, 148, 130, 71, 62, 41, 95, 49, 190, 156, 14, 228, 61, 11, 117, 25, 62, 73, 237, 197, 187, 128, 91, 182, 60, 152, 214, 129, 61, 64, 233, 105, 62, 119, 96, 10, 62, 48, 31, 21, 61, 95, 55, 101, 61, 22, 223, 27, 62, 185, 181, 37, 62, 45, 210, 225, 61, 13, 142, 67, 190, 75, 101, 29, 62, 142, 223, 154, 190, 214, 99, 132, 190, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 249, 252, 137, 61, 122, 188, 127, 60, 31, 30, 204, 190, 73, 80, 22, 61, 9, 26, 15, 62, 141, 190, 143, 62, 105, 255, 152, 189, 138, 253, 15, 62, 180, 181, 133, 61, 131, 171, 62, 189, 143, 18, 138, 60, 19, 124, 159, 190, 156, 100, 124, 61, 37, 144, 209, 61, 165, 151, 78, 59, 142, 25, 47, 62, 34, 128, 16, 62, 191, 228, 252, 60, 184, 31, 26, 62, 136, 180, 160, 61, 146, 36, 47, 61, 200, 60, 164, 61, 180, 247, 158, 59, 102, 248, 17, 60, 110, 84, 218, 61, 145, 170, 5, 62, 193, 235, 132, 189, 175, 42, 44, 61, 6, 207, 175, 189, 251, 242, 184, 188, 2, 49, 246, 189, 204, 15, 241, 61, 145, 57, 86, 190, 69, 241, 39, 188, 93, 216, 163, 190, 157, 214, 163, 61, 16, 226, 2, 62, 77, 28, 64, 62, 37, 229, 54, 61, 130, 92, 34, 62, 198, 41, 128, 189, 247, 199, 181, 188, 43, 204, 14, 190, 167, 43, 53, 190, 173, 156, 218, 61, 198, 73, 15, 62, 76, 170, 157, 189, 74, 80, 101, 61, 75, 197, 233, 60, 119, 182, 155, 189, 85, 146, 65, 187, 241, 57, 63, 61, 166, 146, 40, 190, 206, 151, 93, 190, 221, 5, 6, 62, 25, 153, 223, 188, 74, 81, 24, 62, 93, 65, 6, 190, 30, 133, 236, 61, 225, 13, 244, 61, 6, 182, 125, 190, 220, 3, 86, 190, 51, 189, 171, 62, 9, 126, 144, 61, 107, 49, 36, 190, 249, 201, 62, 190, 240, 177, 120, 59, 73, 71, 218, 189, 181, 0, 232, 60, 179, 2, 107, 60, 253, 115, 48, 62, 241, 196, 56, 189, 83, 110, 175, 189, 229, 4, 89, 62, 105, 59, 246, 188, 60, 191, 160, 189, 27, 86, 131, 62, 195, 54, 186, 188, 171, 73, 47, 62, 12, 184, 129, 190, 22, 99, 127, 62, 120, 121, 149, 61, 5, 121, 60, 190, 144, 63, 35, 189, 180, 138, 223, 188, 150, 130, 25, 61, 233, 199, 19, 62, 157, 47, 66, 190, 239, 155, 244, 61, 253, 3, 35, 190, 154, 23, 170, 190, 41, 208, 12, 62, 169, 80, 145, 190, 111, 150, 238, 61, 230, 170, 140, 189, 20, 74, 94, 190, 161, 147, 45, 190, 215, 198, 204, 61, 215, 5, 228, 190, 0, 246, 202, 62, 120, 32, 226, 189, 116, 6, 161, 62, 5, 40, 140, 59, 179, 68, 245, 61, 155, 17, 179, 189, 196, 183, 184, 190, 137, 33, 195, 189, 58, 246, 196, 190, 236, 4, 86, 62, 118, 60, 213, 62, 155, 51, 194, 60, 125, 62, 12, 61, 197, 239, 216, 60, 63, 193, 1, 62, 142, 254, 155, 190, 84, 198, 184, 62, 138, 94, 183, 190, 71, 74, 121, 190, 70, 229, 125, 60, 181, 217, 11, 62, 182, 141, 69, 62, 80, 175, 150, 189, 71, 47, 26, 189, 96, 137, 44, 189, 229, 149, 223, 190, 133, 25, 26, 62, 243, 32, 178, 62, 164, 72, 51, 62, 117, 192, 147, 190, 17, 142, 4, 191, 73, 84, 141, 190, 172, 2, 217, 61, 10, 32, 211, 58, 216, 151, 253, 61, 233, 228, 180, 61, 236, 37, 205, 61, 73, 69, 251, 190, 242, 232, 26, 190, 212, 125, 202, 190, 63, 134, 102, 190, 7, 158, 185, 61, 210, 227, 164, 62, 108, 136, 252, 189, 37, 196, 145, 62, 244, 226, 85, 61, 171, 245, 170, 61, 105, 214, 131, 190, 254, 75, 72, 62, 173, 166, 35, 190, 122, 0, 68, 191, 24, 233, 234, 60, 107, 250, 127, 62, 45, 62, 233, 61, 126, 235, 168, 190, 212, 46, 237, 187, 201, 125, 128, 189, 50, 157, 64, 191, 231, 224, 62, 62, 79, 18, 67, 62, 42, 42, 8, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 97, 186, 61, 155, 212, 192, 189, 160, 126, 25, 189, 50, 157, 156, 60, 160, 117, 48, 62, 192, 165, 145, 188, 80, 59, 88, 62, 46, 35, 66, 62, 80, 31, 46, 62, 28, 94, 48, 190, 67, 89, 42, 60, 142, 97, 19, 61, 248, 89, 179, 189, 15, 86, 55, 189, 160, 150, 84, 189, 137, 53, 157, 61, 103, 24, 132, 61, 91, 242, 252, 61, 88, 70, 36, 190, 37, 144, 49, 188, 228, 236, 110, 62, 171, 150, 185, 189, 250, 249, 0, 62, 52, 58, 2, 190, 28, 152, 135, 62, 173, 140, 239, 61, 161, 231, 122, 189, 4, 127, 2, 62, 188, 198, 115, 61, 148, 97, 189, 61, 130, 12, 155, 61, 62, 95, 87, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 240, 179, 190, 82, 43, 219, 62, 116, 27, 13, 63, 79, 83, 39, 190, 167, 219, 157, 61, 47, 161, 185, 61, 200, 72, 235, 62, 85, 243, 20, 190, 202, 108, 169, 190, 186, 109, 213, 189, 148, 62, 18, 62, 158, 183, 39, 62, 151, 25, 23, 60, 4, 241, 75, 61, 194, 49, 1, 63, 230, 72, 33, 190, 159, 218, 138, 190, 232, 42, 147, 190, 160, 125, 188, 190, 149, 154, 171, 61, 17, 183, 200, 62, 38, 233, 197, 190, 219, 29, 214, 190, 97, 25, 11, 62, 52, 168, 254, 62, 71, 255, 152, 190, 80, 24, 0, 61, 221, 38, 117, 61, 224, 72, 103, 62, 8, 69, 168, 189, 141, 203, 186, 62, 151, 12, 21, 63, 150, 4, 47, 190, 229, 190, 46, 190, 198, 160, 234, 62, 158, 89, 197, 189, 141, 228, 31, 191, 50, 187, 165, 61, 37, 124, 76, 62, 214, 152, 137, 189, 226, 224, 33, 62, 214, 19, 24, 190, 15, 35, 91, 190, 43, 206, 62, 62, 220, 170, 211, 60, 28, 42, 186, 61, 217, 150, 135, 59, 46, 20, 150, 62, 151, 190, 0, 190, 56, 162, 81, 60, 111, 56, 3, 62, 173, 197, 79, 190, 67, 147, 46, 62, 215, 95, 180, 62, 125, 46, 252, 60, 83, 154, 227, 61, 108, 194, 156, 190, 70, 87, 73, 188, 102, 55, 6, 62, 60, 250, 75, 190, 28, 67, 92, 62, 220, 138, 77, 190, 38, 87, 228, 61, 196, 225, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 49, 13, 190, 176, 27, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 90, 147, 191, 67, 16, 65, 63, 150, 134, 5, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 63, 6, 192, 248, 197, 8, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}