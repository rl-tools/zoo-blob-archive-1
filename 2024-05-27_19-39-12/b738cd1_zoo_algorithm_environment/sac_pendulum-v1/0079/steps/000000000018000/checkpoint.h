// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 37, 86, 63, 242, 120, 1, 63, 252, 236, 155, 62, 18, 133, 151, 61, 152, 225, 178, 62, 53, 99, 221, 190, 19, 107, 1, 63, 19, 101, 141, 63, 88, 170, 65, 62, 172, 72, 159, 62, 149, 34, 151, 191, 24, 88, 50, 190, 228, 56, 133, 62, 218, 91, 36, 190, 211, 200, 113, 60, 226, 165, 7, 63, 155, 134, 143, 191, 12, 101, 34, 59, 121, 247, 231, 190, 171, 135, 79, 191, 27, 58, 94, 190, 63, 213, 89, 191, 167, 41, 173, 63, 181, 139, 176, 62, 22, 48, 163, 59, 91, 177, 61, 63, 67, 236, 179, 190, 79, 84, 35, 190, 95, 118, 210, 191, 171, 190, 122, 190, 143, 95, 104, 62, 117, 163, 104, 190, 136, 109, 97, 190, 197, 18, 30, 63, 82, 75, 76, 63, 65, 147, 182, 62, 85, 141, 38, 63, 117, 231, 152, 191, 61, 61, 81, 190, 4, 216, 21, 63, 253, 138, 72, 188, 60, 32, 196, 190, 45, 124, 17, 63, 92, 18, 143, 63, 53, 158, 2, 63, 170, 77, 151, 189, 29, 175, 53, 191, 72, 26, 199, 61, 73, 231, 64, 62, 65, 77, 46, 191, 10, 85, 13, 190, 64, 39, 202, 62, 131, 55, 184, 190, 155, 99, 34, 62, 154, 187, 48, 190, 185, 103, 3, 190, 151, 199, 179, 190, 176, 69, 142, 191, 70, 110, 111, 63, 135, 149, 111, 59, 17, 156, 160, 190, 191, 166, 201, 191, 183, 181, 241, 190, 108, 65, 169, 190, 78, 113, 241, 190, 133, 100, 41, 191, 11, 152, 8, 191, 247, 174, 14, 63, 242, 150, 69, 62, 157, 98, 47, 191, 248, 214, 162, 62, 143, 78, 163, 62, 193, 202, 22, 191, 45, 60, 188, 187, 17, 238, 101, 189, 185, 102, 65, 62, 87, 116, 115, 63, 48, 73, 160, 190, 235, 91, 213, 190, 19, 32, 234, 190, 249, 18, 150, 62, 191, 10, 132, 61, 88, 248, 186, 62, 216, 124, 252, 62, 51, 209, 86, 190, 181, 194, 251, 189, 167, 103, 252, 190, 70, 162, 99, 191, 54, 37, 168, 190, 88, 106, 206, 59, 85, 86, 53, 63, 98, 254, 154, 191, 11, 146, 192, 190, 84, 118, 249, 62, 250, 58, 156, 191, 145, 60, 177, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 192, 80, 191, 160, 92, 245, 188, 120, 255, 122, 189, 206, 216, 248, 189, 145, 182, 131, 62, 38, 235, 82, 188, 100, 199, 15, 63, 79, 149, 138, 62, 186, 157, 254, 61, 181, 112, 148, 190, 240, 155, 214, 62, 205, 97, 9, 191, 144, 212, 235, 61, 230, 3, 214, 190, 250, 38, 177, 62, 253, 207, 33, 62, 179, 244, 99, 62, 147, 66, 198, 59, 83, 173, 128, 191, 89, 167, 138, 190, 44, 19, 199, 190, 90, 82, 52, 189, 72, 227, 7, 63, 79, 91, 20, 191, 33, 130, 27, 63, 177, 243, 192, 62, 250, 102, 116, 190, 205, 56, 144, 60, 228, 27, 141, 190, 201, 69, 10, 63, 247, 64, 235, 190, 94, 236, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 172, 145, 189, 102, 169, 129, 62, 74, 51, 52, 62, 229, 85, 21, 191, 80, 63, 227, 61, 139, 126, 41, 189, 26, 132, 94, 190, 205, 45, 118, 190, 252, 51, 79, 62, 22, 206, 206, 61, 37, 184, 42, 62, 198, 120, 128, 189, 129, 123, 137, 189, 20, 121, 116, 190, 42, 10, 137, 62, 17, 92, 219, 190, 220, 17, 44, 62, 112, 193, 222, 188, 56, 116, 134, 190, 91, 99, 0, 61, 20, 158, 218, 190, 53, 227, 140, 189, 188, 220, 78, 62, 241, 50, 89, 191, 238, 197, 146, 62, 211, 69, 5, 62, 104, 220, 6, 191, 17, 193, 87, 190, 181, 127, 139, 189, 67, 32, 91, 61, 246, 157, 59, 191, 233, 194, 42, 191, 133, 116, 147, 190, 200, 188, 160, 190, 142, 21, 156, 190, 109, 225, 163, 190, 202, 247, 186, 190, 159, 218, 108, 190, 227, 185, 144, 62, 160, 250, 134, 62, 31, 36, 71, 59, 233, 249, 118, 61, 0, 222, 255, 190, 185, 184, 156, 188, 78, 127, 150, 189, 30, 34, 0, 190, 42, 186, 78, 191, 91, 71, 213, 62, 201, 134, 163, 189, 242, 71, 15, 190, 173, 31, 7, 62, 139, 140, 29, 190, 183, 153, 159, 190, 207, 159, 149, 190, 139, 162, 2, 62, 165, 239, 86, 61, 15, 233, 177, 61, 39, 101, 30, 61, 96, 36, 205, 190, 167, 101, 111, 61, 126, 8, 100, 190, 18, 3, 109, 62, 203, 206, 108, 190, 216, 216, 87, 60, 93, 253, 31, 63, 178, 25, 254, 188, 97, 249, 49, 63, 7, 47, 131, 191, 204, 59, 125, 62, 192, 52, 191, 190, 219, 200, 194, 191, 49, 130, 139, 62, 220, 239, 174, 62, 172, 227, 17, 190, 124, 46, 190, 189, 138, 95, 30, 63, 53, 95, 144, 191, 20, 218, 136, 189, 46, 1, 126, 62, 175, 56, 155, 190, 132, 34, 40, 191, 0, 18, 186, 186, 29, 12, 46, 189, 145, 154, 212, 190, 195, 5, 190, 189, 168, 230, 28, 191, 235, 8, 223, 187, 168, 244, 174, 190, 54, 210, 147, 190, 31, 242, 19, 63, 72, 159, 74, 62, 79, 211, 21, 189, 193, 122, 32, 191, 212, 140, 102, 191, 26, 28, 15, 191, 28, 125, 37, 191, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 180, 15, 11, 191, 215, 109, 19, 191, 150, 72, 182, 190, 68, 181, 141, 189, 22, 215, 5, 61, 222, 67, 244, 61, 50, 168, 114, 191, 237, 13, 57, 190, 219, 190, 115, 190, 187, 119, 172, 191, 154, 133, 11, 62, 172, 205, 21, 191, 123, 64, 110, 62, 114, 208, 57, 190, 250, 152, 77, 61, 234, 134, 202, 190, 25, 247, 166, 61, 110, 12, 6, 62, 71, 179, 74, 190, 85, 249, 16, 61, 58, 203, 6, 190, 73, 203, 190, 190, 205, 128, 192, 190, 169, 57, 182, 61, 105, 190, 79, 190, 251, 221, 11, 189, 162, 55, 198, 190, 153, 29, 55, 190, 66, 13, 155, 190, 185, 228, 66, 190, 161, 112, 61, 61, 47, 82, 9, 191, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 94, 178, 151, 191, 21, 29, 93, 62, 162, 58, 208, 190, 121, 81, 131, 62, 14, 45, 70, 191, 157, 166, 79, 189, 51, 198, 175, 61, 64, 55, 128, 188, 202, 209, 79, 61, 119, 191, 81, 190, 214, 194, 60, 191, 97, 38, 134, 189, 88, 25, 10, 61, 105, 245, 179, 190, 175, 36, 138, 190, 115, 68, 15, 189, 197, 101, 6, 191, 148, 167, 22, 60, 2, 60, 226, 190, 158, 183, 2, 63, 213, 137, 180, 191, 131, 244, 94, 189, 103, 21, 125, 62, 153, 133, 71, 62, 13, 179, 23, 62, 240, 122, 101, 62, 88, 37, 225, 189, 175, 72, 136, 62, 151, 176, 12, 60, 141, 31, 221, 61, 90, 147, 214, 190, 117, 245, 68, 189, 208, 166, 99, 62, 45, 212, 112, 61, 156, 37, 166, 62, 44, 48, 10, 191, 107, 115, 207, 61, 178, 181, 149, 190, 243, 243, 236, 190, 128, 38, 4, 191, 189, 53, 78, 62, 195, 137, 29, 191, 163, 155, 95, 61, 221, 133, 59, 62, 186, 102, 58, 190, 185, 202, 37, 189, 158, 214, 77, 62, 120, 192, 227, 61, 64, 180, 140, 61, 24, 186, 214, 61, 244, 64, 52, 189, 85, 75, 139, 61, 200, 159, 235, 190, 185, 116, 17, 62, 30, 87, 63, 186, 49, 36, 146, 59, 130, 40, 176, 61, 241, 134, 190, 61, 144, 81, 130, 62, 136, 56, 103, 60, 139, 74, 1, 188, 216, 223, 139, 190, 252, 17, 17, 191, 53, 86, 58, 191, 52, 244, 242, 61, 69, 0, 223, 61, 1, 163, 237, 62, 206, 103, 237, 190, 183, 128, 151, 188, 159, 120, 244, 190, 83, 16, 41, 62, 131, 93, 178, 191, 217, 6, 34, 190, 225, 167, 76, 63, 139, 99, 190, 61, 31, 247, 189, 62, 77, 254, 38, 190, 42, 80, 140, 190, 88, 1, 51, 62, 199, 141, 62, 189, 16, 174, 69, 62, 193, 129, 121, 189, 174, 181, 82, 190, 3, 204, 6, 190, 189, 222, 150, 61, 90, 172, 71, 62, 124, 82, 219, 189, 146, 205, 54, 191, 82, 65, 92, 62, 87, 2, 15, 62, 203, 15, 170, 62, 242, 106, 105, 190, 99, 172, 187, 188, 210, 99, 127, 62, 180, 115, 246, 190, 213, 135, 208, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 150, 142, 207, 190, 73, 84, 4, 191, 55, 196, 35, 190, 70, 134, 218, 62, 193, 137, 54, 62, 196, 183, 186, 62, 210, 129, 249, 189, 252, 232, 153, 189, 134, 230, 111, 190, 78, 32, 252, 189, 11, 156, 17, 61, 116, 88, 199, 190, 213, 161, 163, 62, 54, 20, 65, 60, 124, 179, 27, 61, 180, 110, 227, 62, 63, 212, 1, 62, 0, 255, 155, 62, 85, 32, 99, 61, 11, 107, 137, 189, 248, 209, 104, 61, 5, 60, 53, 61, 16, 126, 141, 61, 252, 122, 25, 190, 31, 27, 142, 189, 100, 190, 43, 190, 11, 73, 30, 61, 70, 82, 88, 62, 43, 244, 165, 190, 224, 202, 217, 61, 14, 100, 145, 61, 226, 220, 46, 62, 193, 16, 206, 190, 71, 209, 166, 61, 134, 135, 0, 191, 42, 215, 134, 61, 122, 51, 61, 188, 192, 221, 80, 62, 156, 111, 239, 190, 203, 211, 5, 191, 227, 137, 135, 189, 52, 196, 59, 191, 178, 11, 21, 62, 6, 94, 223, 190, 87, 144, 30, 60, 27, 237, 64, 62, 248, 38, 253, 189, 24, 6, 127, 62, 104, 184, 21, 62, 143, 52, 142, 62, 250, 57, 0, 63, 220, 133, 194, 62, 243, 245, 195, 189, 69, 18, 67, 61, 202, 247, 96, 191, 236, 185, 71, 190, 158, 36, 32, 190, 41, 39, 195, 61, 166, 174, 143, 62, 110, 201, 171, 190, 247, 161, 235, 187, 45, 3, 205, 190, 240, 42, 176, 62, 86, 162, 244, 61, 225, 76, 251, 189, 249, 198, 7, 189, 99, 217, 162, 189, 116, 126, 95, 61, 251, 167, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 254, 239, 132, 61, 94, 3, 8, 190, 237, 255, 217, 189, 163, 243, 64, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 21, 22, 98, 61, 52, 208, 118, 189, 142, 49, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 252, 163, 247, 61, 162, 136, 222, 189, 175, 186, 33, 190, 39, 50, 46, 190, 34, 114, 142, 61, 233, 83, 34, 61, 140, 168, 229, 61, 128, 14, 252, 61, 85, 237, 52, 190, 174, 118, 234, 61, 125, 219, 137, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 195, 164, 65, 62, 147, 221, 147, 190, 237, 52, 212, 190, 30, 204, 119, 191, 235, 166, 233, 190, 85, 189, 5, 62, 219, 163, 166, 190, 102, 124, 128, 62, 170, 172, 60, 190, 115, 128, 17, 191, 95, 205, 55, 61, 230, 191, 30, 191, 33, 33, 81, 190, 91, 0, 27, 191, 234, 68, 161, 189, 72, 238, 57, 191, 22, 98, 194, 189, 114, 33, 73, 191, 5, 137, 17, 63, 100, 27, 150, 191, 12, 108, 87, 190, 119, 0, 116, 62, 245, 58, 140, 189, 154, 124, 175, 60, 70, 166, 136, 62, 225, 24, 7, 191, 158, 145, 234, 189, 216, 123, 254, 61, 3, 3, 32, 62, 203, 249, 37, 191, 234, 190, 53, 190, 165, 63, 7, 189, 115, 26, 9, 62, 248, 13, 40, 62, 43, 114, 27, 191, 242, 148, 83, 61, 160, 132, 113, 191, 214, 120, 144, 60, 198, 244, 134, 191, 246, 226, 134, 61, 164, 164, 137, 61, 228, 97, 108, 62, 230, 164, 136, 62, 223, 88, 20, 191, 204, 105, 43, 61, 135, 189, 152, 189, 248, 177, 24, 190, 125, 175, 15, 62, 74, 85, 88, 190, 139, 182, 28, 190, 234, 137, 146, 189, 220, 252, 208, 190, 148, 40, 224, 188, 130, 221, 173, 190, 114, 39, 250, 189, 94, 149, 176, 60, 241, 58, 37, 62, 156, 244, 131, 190, 123, 93, 164, 190, 209, 227, 248, 188, 50, 138, 167, 190, 168, 148, 250, 190, 243, 199, 22, 191, 78, 238, 36, 63, 232, 230, 150, 190, 57, 117, 140, 62, 210, 79, 216, 190, 87, 223, 93, 62, 33, 6, 2, 62, 118, 40, 242, 191, 21, 215, 32, 190, 2, 182, 209, 189, 59, 89, 227, 191, 183, 147, 211, 61, 186, 245, 146, 62, 195, 50, 215, 189, 188, 188, 2, 190, 121, 214, 153, 62, 44, 47, 223, 61, 248, 8, 204, 61, 157, 44, 222, 61, 247, 3, 73, 190, 150, 196, 14, 191, 31, 158, 240, 61, 119, 225, 182, 190, 50, 71, 153, 190, 74, 212, 44, 60, 214, 4, 245, 190, 146, 27, 90, 188, 48, 61, 192, 61, 47, 181, 114, 62, 61, 137, 97, 190, 12, 44, 232, 190, 115, 91, 21, 191, 155, 29, 33, 191, 111, 211, 145, 61, 79, 124, 9, 62, 23, 234, 30, 63, 164, 251, 141, 62, 6, 51, 133, 62, 173, 153, 4, 190, 236, 59, 132, 62, 109, 58, 190, 191, 220, 136, 140, 61, 237, 123, 24, 63, 223, 46, 23, 62, 4, 213, 228, 61, 80, 28, 35, 188, 86, 155, 203, 189, 253, 221, 213, 190, 249, 51, 90, 62, 224, 195, 226, 61, 98, 249, 113, 191, 119, 253, 202, 190, 9, 221, 253, 189, 112, 30, 127, 190, 224, 177, 109, 61, 210, 148, 254, 61, 247, 17, 210, 61, 145, 246, 197, 61, 202, 122, 191, 60, 27, 125, 190, 62, 22, 86, 2, 191, 133, 175, 205, 60, 113, 84, 144, 62, 110, 65, 69, 190, 53, 150, 141, 190, 20, 207, 199, 62, 93, 91, 46, 60, 241, 15, 5, 63, 226, 159, 175, 190, 243, 102, 141, 62, 164, 231, 197, 189, 149, 198, 13, 191, 196, 140, 136, 190, 220, 187, 229, 61, 32, 104, 255, 190, 149, 201, 24, 62, 34, 105, 45, 62, 184, 62, 226, 189, 187, 227, 206, 60, 211, 75, 155, 62, 189, 229, 227, 189, 75, 176, 206, 60, 115, 9, 45, 62, 148, 1, 162, 189, 174, 122, 171, 62, 29, 199, 69, 190, 209, 59, 31, 188, 105, 163, 0, 62, 168, 19, 114, 190, 230, 98, 178, 188, 40, 157, 42, 62, 114, 61, 63, 190, 193, 225, 74, 62, 194, 212, 73, 62, 203, 241, 239, 190, 121, 35, 221, 190, 51, 155, 23, 191, 54, 188, 57, 191, 110, 209, 125, 62, 204, 161, 96, 190, 174, 139, 139, 189, 82, 128, 144, 62, 166, 190, 78, 62, 244, 173, 122, 190, 206, 58, 62, 62, 168, 139, 9, 62, 160, 244, 202, 190, 187, 64, 55, 62, 73, 207, 2, 190, 133, 77, 223, 188, 9, 114, 193, 61, 145, 100, 100, 61, 60, 120, 129, 62, 44, 142, 60, 62, 208, 247, 83, 187, 248, 119, 179, 189, 249, 82, 180, 62, 71, 96, 213, 190, 248, 164, 39, 189, 157, 213, 238, 60, 229, 132, 32, 190, 105, 160, 112, 62, 90, 32, 153, 62, 154, 21, 6, 189, 54, 127, 55, 62, 42, 31, 183, 61, 27, 226, 214, 189, 62, 226, 57, 61, 251, 3, 161, 60, 243, 87, 153, 191, 240, 239, 83, 188, 77, 176, 73, 190, 29, 18, 8, 62, 111, 198, 2, 62, 174, 165, 122, 62, 194, 162, 8, 190, 101, 238, 62, 62, 53, 186, 58, 188, 32, 61, 149, 59, 59, 85, 47, 189, 158, 114, 25, 191, 77, 183, 108, 62, 137, 53, 137, 62, 54, 227, 65, 190, 45, 149, 193, 62, 130, 11, 108, 62, 156, 226, 43, 188, 249, 40, 16, 191, 161, 170, 231, 190, 55, 225, 16, 191, 82, 136, 168, 190, 51, 25, 91, 187, 123, 62, 162, 62, 254, 167, 149, 61, 159, 103, 74, 190, 73, 102, 127, 188, 177, 162, 15, 186, 137, 229, 232, 190, 28, 166, 238, 61, 105, 178, 139, 62, 179, 253, 73, 62, 65, 220, 63, 63, 240, 158, 54, 190, 193, 110, 108, 61, 15, 203, 21, 60, 25, 45, 70, 60, 14, 165, 168, 62, 81, 141, 229, 190, 28, 103, 170, 61, 239, 212, 182, 190, 210, 141, 131, 190, 131, 138, 157, 188, 36, 131, 142, 62, 15, 82, 183, 188, 207, 167, 108, 62, 213, 120, 56, 190, 16, 96, 88, 62, 169, 22, 115, 61, 57, 125, 15, 189, 211, 25, 59, 61, 230, 151, 213, 191, 227, 159, 220, 189, 172, 118, 183, 190, 101, 70, 1, 190, 198, 50, 115, 189, 50, 135, 0, 189, 247, 49, 219, 190, 195, 32, 135, 62, 144, 10, 131, 62, 191, 122, 13, 190, 38, 67, 64, 62, 129, 165, 142, 62, 33, 233, 53, 62, 247, 120, 254, 62, 128, 230, 26, 62, 92, 90, 214, 62, 114, 56, 126, 190, 174, 202, 60, 62, 133, 207, 188, 190, 176, 174, 49, 62, 193, 163, 199, 191, 172, 200, 165, 61, 84, 205, 191, 62, 66, 233, 244, 188, 40, 198, 172, 62, 242, 156, 132, 190, 234, 101, 196, 190, 27, 24, 193, 190, 238, 43, 222, 62, 161, 217, 100, 62, 128, 160, 27, 191, 180, 198, 141, 190, 82, 61, 13, 190, 198, 89, 221, 190, 204, 35, 248, 189, 127, 164, 129, 62, 151, 30, 124, 190, 123, 42, 191, 61, 55, 234, 153, 61, 61, 164, 175, 62, 186, 182, 157, 190, 70, 94, 237, 61, 188, 234, 101, 62, 85, 48, 31, 191, 215, 151, 27, 191, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 182, 31, 120, 191, 48, 108, 54, 190, 137, 172, 207, 190, 135, 18, 225, 62, 227, 17, 208, 61, 153, 142, 7, 63, 203, 56, 243, 60, 218, 139, 122, 62, 40, 215, 213, 189, 174, 102, 24, 190, 233, 44, 36, 62, 12, 114, 21, 191, 3, 174, 170, 62, 151, 78, 214, 61, 128, 46, 112, 188, 3, 164, 15, 62, 15, 108, 137, 62, 95, 159, 243, 189, 62, 171, 141, 190, 26, 200, 86, 187, 159, 30, 167, 190, 228, 133, 174, 190, 200, 2, 5, 62, 84, 249, 169, 189, 137, 107, 153, 61, 126, 127, 151, 60, 90, 196, 3, 188, 250, 45, 25, 61, 86, 253, 18, 191, 234, 33, 136, 61, 154, 178, 158, 61, 109, 89, 198, 59, 10, 102, 27, 63, 65, 89, 1, 190, 64, 181, 197, 62, 238, 50, 34, 191, 20, 197, 33, 62, 104, 222, 225, 190, 107, 223, 7, 61, 51, 121, 102, 190, 23, 245, 189, 188, 57, 154, 173, 62, 248, 241, 95, 61, 165, 145, 141, 62, 66, 81, 45, 190, 21, 0, 235, 190, 101, 153, 90, 62, 213, 154, 12, 190, 163, 223, 76, 61, 54, 231, 242, 61, 30, 185, 92, 190, 177, 225, 247, 61, 204, 225, 3, 62, 190, 21, 108, 62, 118, 31, 150, 62, 164, 73, 15, 62, 158, 125, 33, 62, 95, 162, 28, 62, 49, 174, 187, 61, 75, 86, 35, 62, 98, 102, 88, 190, 85, 110, 150, 62, 141, 67, 26, 191, 215, 229, 35, 191, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 4, 99, 55, 191, 172, 133, 30, 62, 108, 39, 132, 190, 153, 105, 237, 189, 237, 171, 84, 62, 229, 195, 100, 62, 209, 171, 118, 190, 146, 45, 106, 62, 25, 87, 114, 62, 167, 153, 255, 190, 62, 56, 139, 61, 27, 209, 181, 190, 45, 71, 9, 61, 199, 201, 229, 61, 112, 241, 221, 61, 75, 224, 30, 62, 125, 71, 19, 62, 77, 155, 128, 61, 175, 152, 25, 62, 112, 39, 163, 62, 153, 59, 139, 190, 128, 248, 221, 61, 86, 175, 182, 61, 15, 65, 165, 189, 2, 29, 81, 62, 174, 233, 173, 62, 200, 190, 97, 59, 141, 217, 179, 61, 46, 235, 207, 60, 173, 54, 14, 189, 254, 50, 130, 190, 226, 61, 197, 189, 188, 59, 116, 191, 68, 252, 104, 62, 84, 21, 86, 191, 173, 172, 154, 190, 202, 43, 231, 188, 132, 99, 151, 61, 200, 25, 104, 61, 186, 190, 37, 61, 25, 170, 183, 60, 13, 10, 40, 191, 160, 171, 12, 190, 64, 239, 216, 190, 218, 198, 1, 190, 201, 61, 109, 62, 165, 15, 126, 190, 206, 97, 67, 62, 119, 1, 149, 189, 252, 107, 128, 189, 182, 251, 214, 62, 73, 168, 229, 62, 212, 195, 163, 190, 31, 68, 88, 189, 137, 183, 182, 189, 164, 111, 187, 189, 16, 58, 46, 62, 75, 113, 95, 189, 32, 229, 76, 62, 11, 169, 46, 61, 95, 82, 247, 60, 109, 121, 240, 189, 209, 140, 127, 62, 104, 142, 73, 188, 210, 190, 5, 61, 177, 166, 75, 191, 8, 99, 11, 188, 228, 210, 103, 190, 194, 66, 101, 60, 214, 204, 43, 61, 73, 94, 93, 190, 250, 102, 41, 190, 201, 53, 136, 190, 88, 222, 10, 191, 162, 237, 235, 189, 44, 95, 23, 188, 221, 151, 141, 62, 44, 104, 1, 190, 101, 39, 83, 62, 37, 99, 182, 190, 227, 124, 116, 62, 136, 57, 184, 61, 48, 247, 137, 190, 154, 63, 157, 190, 89, 64, 172, 190, 99, 194, 147, 190, 239, 56, 14, 62, 48, 70, 1, 191, 93, 170, 37, 58, 93, 132, 169, 190, 209, 16, 55, 191, 17, 111, 136, 62, 157, 240, 243, 190, 193, 142, 185, 189, 210, 207, 138, 190, 121, 228, 15, 191, 160, 32, 134, 191, 234, 110, 66, 61, 241, 163, 13, 191, 92, 220, 14, 63, 74, 177, 175, 189, 106, 193, 186, 62, 54, 182, 249, 61, 190, 134, 72, 62, 46, 7, 234, 189, 243, 208, 91, 190, 118, 146, 149, 189, 136, 109, 22, 191, 79, 37, 132, 62, 152, 175, 131, 62, 171, 248, 242, 188, 163, 220, 163, 61, 77, 196, 91, 61, 33, 99, 40, 62, 121, 133, 65, 191, 185, 13, 8, 63, 106, 231, 72, 191, 225, 118, 163, 190, 87, 126, 79, 189, 126, 36, 113, 62, 113, 206, 183, 61, 103, 229, 162, 189, 59, 162, 138, 61, 117, 132, 134, 189, 194, 5, 244, 190, 239, 148, 6, 62, 246, 110, 214, 62, 228, 251, 159, 62, 160, 188, 140, 191, 167, 253, 16, 191, 208, 240, 196, 189, 118, 129, 132, 62, 211, 67, 59, 190, 139, 207, 3, 62, 64, 237, 165, 61, 64, 82, 139, 62, 139, 187, 13, 191, 173, 42, 194, 62, 86, 249, 79, 191, 28, 102, 146, 190, 255, 149, 118, 62, 253, 180, 154, 62, 142, 154, 207, 189, 31, 15, 46, 62, 228, 63, 235, 61, 56, 197, 242, 187, 137, 214, 131, 190, 226, 50, 195, 62, 232, 114, 34, 190, 136, 47, 188, 190, 51, 38, 251, 61, 63, 162, 58, 62, 61, 115, 13, 62, 249, 243, 212, 190, 168, 134, 156, 59, 227, 47, 5, 189, 56, 38, 252, 190, 107, 190, 16, 62, 248, 241, 66, 62, 190, 37, 132, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 68, 20, 62, 129, 238, 128, 59, 145, 125, 146, 60, 50, 157, 156, 60, 166, 122, 22, 61, 109, 79, 180, 189, 138, 227, 26, 62, 209, 13, 52, 62, 174, 171, 33, 62, 28, 94, 48, 190, 193, 241, 31, 61, 105, 201, 136, 188, 51, 245, 204, 189, 15, 86, 55, 189, 72, 216, 44, 190, 243, 0, 187, 188, 219, 63, 66, 61, 109, 102, 95, 62, 12, 21, 87, 189, 154, 102, 54, 61, 212, 97, 146, 62, 134, 206, 103, 189, 248, 62, 16, 62, 52, 58, 2, 190, 211, 56, 155, 62, 39, 24, 18, 62, 161, 231, 122, 189, 254, 229, 89, 62, 57, 20, 62, 189, 95, 138, 194, 61, 217, 107, 147, 61, 4, 216, 17, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 133, 209, 190, 8, 36, 31, 63, 194, 216, 187, 63, 79, 83, 39, 190, 255, 13, 81, 61, 119, 158, 141, 62, 195, 34, 228, 62, 74, 77, 108, 190, 155, 73, 21, 191, 186, 109, 213, 189, 30, 76, 162, 61, 232, 79, 246, 62, 203, 200, 24, 60, 4, 241, 75, 61, 211, 34, 32, 63, 181, 29, 106, 191, 184, 51, 229, 190, 201, 248, 136, 191, 167, 181, 198, 190, 79, 65, 16, 62, 238, 13, 250, 62, 15, 169, 188, 190, 27, 138, 152, 191, 97, 25, 11, 62, 8, 8, 4, 63, 178, 201, 188, 190, 80, 24, 0, 61, 141, 84, 39, 62, 4, 127, 233, 62, 131, 182, 75, 190, 38, 58, 230, 62, 249, 206, 81, 63, 41, 138, 129, 190, 141, 19, 37, 191, 5, 11, 204, 62, 158, 89, 197, 189, 220, 59, 77, 191, 202, 33, 113, 189, 83, 189, 184, 62, 224, 78, 167, 190, 50, 241, 175, 62, 214, 19, 24, 190, 243, 235, 227, 190, 153, 10, 190, 62, 121, 81, 212, 60, 28, 42, 186, 61, 141, 241, 18, 62, 172, 0, 179, 62, 30, 1, 2, 191, 70, 9, 72, 189, 95, 5, 36, 61, 177, 226, 153, 190, 203, 136, 45, 62, 207, 210, 35, 62, 134, 139, 251, 188, 83, 154, 227, 61, 82, 186, 154, 190, 98, 195, 117, 61, 102, 55, 6, 62, 127, 112, 149, 190, 21, 34, 180, 62, 102, 26, 0, 190, 69, 111, 7, 63, 179, 222, 13, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 19, 176, 189, 63, 154, 75, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 115, 53, 191, 79, 195, 228, 63, 102, 72, 40, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {7, 182, 101, 64, 84, 118, 23, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}