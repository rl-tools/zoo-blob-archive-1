// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 184, 82, 63, 25, 230, 229, 62, 14, 53, 141, 62, 219, 65, 141, 61, 189, 163, 202, 62, 27, 80, 213, 190, 226, 5, 255, 62, 175, 89, 128, 63, 198, 105, 80, 62, 46, 145, 162, 62, 180, 169, 135, 191, 192, 102, 198, 189, 90, 210, 159, 62, 75, 187, 77, 190, 42, 143, 51, 60, 221, 187, 8, 63, 22, 77, 129, 191, 206, 100, 38, 59, 116, 243, 245, 190, 194, 10, 54, 191, 228, 87, 79, 190, 186, 218, 96, 191, 31, 191, 153, 63, 47, 139, 177, 62, 39, 26, 30, 62, 255, 205, 14, 63, 220, 15, 198, 190, 192, 250, 108, 189, 149, 115, 184, 191, 67, 231, 110, 190, 26, 228, 141, 62, 12, 96, 117, 190, 159, 166, 128, 190, 154, 21, 38, 63, 34, 160, 47, 63, 206, 127, 177, 62, 142, 143, 47, 63, 183, 148, 132, 191, 59, 216, 112, 190, 101, 107, 22, 63, 244, 112, 178, 61, 189, 214, 214, 190, 91, 140, 30, 63, 88, 91, 127, 63, 35, 165, 241, 62, 156, 162, 196, 189, 127, 221, 43, 191, 146, 152, 12, 62, 33, 176, 197, 62, 85, 217, 33, 191, 198, 92, 244, 189, 18, 84, 242, 62, 91, 90, 143, 190, 57, 167, 153, 62, 32, 98, 103, 189, 133, 129, 12, 190, 166, 78, 165, 190, 208, 50, 76, 191, 151, 54, 118, 63, 15, 202, 154, 189, 137, 181, 82, 190, 22, 29, 191, 191, 74, 155, 225, 190, 106, 214, 227, 190, 183, 209, 210, 190, 164, 208, 31, 191, 131, 111, 252, 190, 8, 174, 8, 63, 175, 198, 28, 62, 65, 171, 41, 191, 147, 81, 122, 62, 244, 27, 152, 62, 177, 170, 4, 191, 86, 86, 184, 61, 149, 247, 120, 189, 174, 121, 105, 62, 125, 96, 89, 63, 23, 108, 199, 190, 54, 107, 154, 189, 131, 111, 30, 191, 196, 195, 150, 62, 215, 78, 1, 187, 86, 170, 47, 62, 182, 154, 16, 63, 153, 143, 208, 190, 161, 231, 57, 189, 25, 248, 219, 190, 91, 166, 94, 191, 179, 71, 87, 190, 210, 85, 115, 188, 195, 177, 57, 63, 179, 136, 135, 191, 164, 33, 191, 190, 139, 208, 2, 63, 224, 116, 137, 191, 144, 85, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 94, 78, 191, 79, 56, 136, 186, 42, 82, 157, 189, 179, 218, 211, 189, 187, 252, 173, 62, 67, 141, 38, 187, 213, 68, 3, 63, 120, 166, 152, 62, 243, 125, 150, 62, 105, 237, 118, 190, 78, 10, 233, 62, 64, 221, 248, 190, 18, 66, 39, 62, 31, 226, 219, 190, 46, 119, 202, 62, 242, 200, 192, 61, 141, 247, 191, 62, 8, 132, 55, 62, 169, 237, 121, 191, 107, 9, 172, 190, 141, 224, 182, 190, 148, 138, 57, 189, 63, 13, 23, 63, 13, 245, 253, 190, 146, 9, 41, 63, 84, 83, 213, 62, 22, 13, 7, 190, 114, 197, 251, 61, 124, 57, 130, 190, 102, 124, 10, 63, 20, 236, 224, 190, 250, 25, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 230, 21, 189, 158, 58, 65, 62, 32, 164, 78, 62, 127, 248, 8, 191, 55, 64, 7, 62, 242, 226, 29, 189, 206, 243, 38, 190, 147, 7, 18, 188, 176, 6, 68, 62, 119, 48, 30, 62, 247, 76, 60, 62, 168, 221, 3, 60, 164, 132, 137, 189, 149, 90, 155, 190, 239, 118, 151, 62, 189, 170, 213, 190, 244, 5, 44, 62, 206, 91, 26, 60, 220, 112, 139, 190, 126, 123, 31, 60, 71, 114, 190, 190, 16, 197, 220, 189, 249, 0, 165, 62, 12, 28, 222, 190, 187, 48, 156, 62, 28, 171, 8, 62, 188, 223, 76, 190, 181, 104, 187, 189, 233, 107, 200, 189, 193, 126, 7, 62, 194, 2, 37, 191, 109, 177, 9, 191, 133, 116, 147, 190, 49, 199, 216, 190, 147, 106, 215, 190, 16, 80, 45, 190, 68, 107, 202, 190, 122, 3, 78, 190, 75, 231, 142, 62, 85, 11, 53, 62, 216, 212, 252, 189, 226, 120, 37, 62, 255, 82, 198, 190, 185, 184, 156, 188, 22, 39, 242, 60, 30, 34, 0, 190, 175, 221, 62, 191, 44, 119, 200, 62, 134, 131, 23, 189, 212, 116, 116, 190, 173, 31, 7, 62, 241, 236, 58, 190, 189, 177, 38, 188, 0, 186, 109, 190, 25, 49, 140, 61, 28, 129, 193, 189, 160, 117, 111, 61, 169, 15, 173, 189, 145, 147, 233, 190, 1, 0, 154, 189, 218, 242, 148, 190, 195, 31, 76, 62, 168, 18, 102, 190, 166, 205, 172, 60, 23, 204, 215, 62, 55, 234, 10, 189, 42, 72, 254, 62, 199, 219, 142, 190, 236, 139, 75, 62, 44, 241, 144, 190, 166, 164, 111, 191, 162, 128, 52, 62, 124, 132, 148, 62, 172, 227, 17, 190, 215, 181, 2, 190, 81, 249, 229, 62, 112, 185, 95, 191, 237, 203, 112, 188, 167, 65, 222, 61, 209, 199, 8, 190, 241, 241, 227, 190, 81, 15, 176, 60, 29, 12, 46, 189, 23, 169, 175, 190, 195, 5, 190, 189, 43, 134, 246, 190, 125, 37, 205, 189, 53, 21, 213, 190, 197, 233, 154, 190, 111, 54, 3, 63, 100, 103, 109, 62, 6, 17, 236, 189, 65, 170, 249, 190, 114, 125, 59, 191, 6, 120, 189, 190, 7, 255, 31, 190, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 22, 217, 33, 191, 245, 175, 252, 190, 26, 229, 170, 190, 198, 124, 157, 60, 227, 248, 166, 61, 3, 84, 57, 62, 124, 23, 66, 191, 237, 13, 57, 190, 246, 42, 83, 190, 239, 84, 169, 191, 167, 156, 64, 62, 250, 213, 26, 191, 237, 63, 148, 62, 17, 214, 224, 189, 90, 20, 172, 61, 187, 2, 167, 190, 239, 1, 8, 62, 182, 242, 47, 62, 71, 179, 74, 190, 85, 249, 16, 61, 66, 199, 23, 190, 45, 203, 193, 190, 116, 236, 205, 190, 169, 57, 182, 61, 226, 128, 50, 190, 98, 71, 0, 59, 96, 42, 168, 190, 210, 150, 64, 190, 66, 13, 155, 190, 185, 228, 66, 190, 162, 14, 5, 62, 45, 241, 221, 190, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 29, 139, 128, 191, 101, 134, 65, 62, 139, 234, 164, 190, 160, 166, 176, 62, 245, 144, 52, 191, 67, 218, 10, 62, 227, 245, 128, 188, 180, 139, 220, 184, 122, 111, 108, 61, 55, 123, 200, 190, 179, 77, 71, 191, 234, 164, 166, 189, 72, 24, 10, 62, 37, 33, 222, 190, 131, 71, 60, 190, 100, 36, 185, 58, 76, 122, 223, 190, 144, 28, 156, 61, 119, 78, 238, 190, 68, 231, 13, 63, 221, 188, 151, 191, 88, 94, 247, 189, 74, 39, 138, 62, 60, 233, 27, 62, 79, 110, 17, 62, 225, 101, 121, 62, 41, 177, 221, 189, 130, 205, 138, 62, 150, 233, 99, 189, 164, 95, 157, 61, 52, 242, 213, 190, 3, 9, 68, 189, 90, 125, 1, 62, 88, 155, 226, 58, 39, 4, 179, 62, 48, 162, 234, 190, 223, 233, 10, 62, 34, 162, 142, 190, 6, 127, 187, 190, 167, 34, 226, 190, 29, 231, 79, 62, 134, 187, 155, 190, 113, 199, 177, 61, 64, 62, 17, 62, 224, 117, 32, 190, 233, 35, 189, 189, 189, 30, 81, 62, 54, 17, 74, 61, 188, 36, 184, 61, 128, 50, 246, 61, 109, 93, 114, 189, 236, 25, 71, 61, 207, 236, 178, 190, 166, 87, 227, 61, 241, 146, 21, 60, 42, 48, 187, 60, 149, 127, 197, 61, 61, 201, 208, 61, 211, 169, 129, 62, 47, 108, 131, 188, 183, 41, 12, 189, 86, 220, 128, 190, 119, 105, 229, 190, 154, 143, 12, 191, 98, 4, 99, 61, 129, 208, 134, 61, 29, 220, 255, 62, 253, 93, 206, 190, 14, 37, 13, 61, 252, 129, 223, 190, 215, 194, 192, 61, 151, 88, 137, 191, 135, 146, 5, 190, 39, 223, 235, 62, 223, 252, 242, 61, 175, 183, 189, 62, 153, 222, 16, 190, 91, 190, 174, 190, 39, 120, 98, 62, 94, 46, 168, 189, 155, 169, 83, 62, 245, 88, 145, 188, 49, 20, 82, 190, 188, 30, 230, 189, 47, 32, 190, 189, 243, 33, 255, 61, 235, 133, 1, 189, 4, 91, 29, 191, 34, 126, 79, 62, 94, 37, 46, 62, 190, 235, 168, 62, 82, 220, 115, 190, 29, 133, 156, 189, 79, 166, 6, 62, 50, 174, 226, 190, 182, 232, 180, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 15, 252, 142, 190, 96, 179, 249, 190, 80, 64, 42, 190, 93, 33, 101, 62, 46, 119, 185, 61, 206, 67, 134, 62, 103, 25, 142, 190, 237, 173, 212, 188, 74, 206, 135, 190, 88, 208, 153, 190, 217, 150, 21, 189, 180, 17, 193, 190, 219, 216, 59, 62, 248, 91, 57, 189, 115, 168, 14, 60, 228, 141, 217, 62, 140, 187, 186, 59, 75, 194, 135, 62, 101, 42, 34, 62, 161, 151, 6, 190, 140, 32, 134, 58, 91, 249, 133, 189, 103, 116, 188, 61, 12, 255, 75, 188, 191, 11, 198, 189, 227, 241, 93, 190, 59, 203, 219, 60, 31, 127, 109, 62, 22, 254, 206, 190, 216, 94, 238, 61, 127, 230, 49, 189, 201, 159, 88, 61, 202, 126, 206, 189, 82, 25, 0, 62, 45, 239, 245, 190, 233, 215, 9, 61, 31, 84, 63, 189, 11, 68, 36, 62, 200, 166, 2, 191, 79, 140, 166, 190, 188, 179, 78, 189, 178, 28, 6, 191, 75, 56, 240, 61, 3, 136, 157, 190, 103, 65, 171, 188, 101, 180, 103, 62, 118, 228, 250, 189, 141, 130, 162, 62, 76, 140, 236, 61, 77, 77, 128, 62, 218, 248, 226, 62, 67, 181, 175, 62, 38, 32, 150, 189, 119, 252, 138, 61, 220, 230, 61, 191, 47, 165, 57, 190, 62, 19, 37, 190, 112, 31, 192, 61, 137, 59, 145, 62, 144, 13, 79, 190, 246, 241, 93, 188, 61, 121, 203, 190, 51, 109, 155, 62, 131, 186, 119, 61, 225, 76, 251, 189, 249, 198, 7, 189, 99, 217, 162, 189, 116, 126, 95, 61, 251, 167, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 254, 239, 132, 61, 94, 3, 8, 190, 237, 255, 217, 189, 163, 243, 64, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 21, 22, 98, 61, 52, 208, 118, 189, 142, 49, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 252, 163, 247, 61, 162, 136, 222, 189, 175, 186, 33, 190, 39, 50, 46, 190, 34, 114, 142, 61, 233, 83, 34, 61, 140, 168, 229, 61, 128, 14, 252, 61, 85, 237, 52, 190, 174, 118, 234, 61, 125, 219, 137, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 181, 243, 39, 62, 246, 91, 120, 190, 237, 52, 212, 190, 116, 97, 134, 191, 235, 166, 233, 190, 38, 189, 169, 61, 185, 74, 186, 190, 51, 172, 99, 62, 53, 88, 82, 190, 187, 92, 26, 191, 95, 205, 55, 61, 2, 221, 6, 191, 92, 92, 90, 190, 255, 95, 249, 190, 144, 2, 209, 189, 100, 143, 26, 191, 22, 98, 194, 189, 113, 242, 70, 191, 72, 228, 9, 63, 215, 197, 128, 191, 245, 253, 128, 190, 63, 53, 71, 62, 83, 189, 110, 61, 40, 142, 173, 188, 186, 151, 117, 62, 220, 141, 207, 190, 75, 117, 75, 189, 33, 63, 179, 61, 72, 135, 199, 61, 82, 203, 10, 191, 49, 34, 201, 189, 94, 132, 200, 61, 200, 243, 221, 61, 89, 0, 90, 62, 155, 192, 35, 191, 116, 177, 149, 61, 227, 56, 252, 190, 236, 170, 107, 61, 116, 206, 51, 191, 16, 231, 53, 61, 167, 5, 254, 61, 122, 203, 86, 62, 125, 116, 84, 62, 106, 171, 24, 191, 209, 214, 23, 189, 158, 68, 145, 61, 85, 206, 11, 190, 73, 42, 9, 62, 145, 10, 170, 189, 70, 108, 223, 189, 176, 26, 102, 189, 106, 205, 103, 190, 78, 121, 24, 189, 91, 69, 87, 190, 114, 39, 250, 189, 94, 108, 156, 61, 218, 71, 14, 62, 207, 243, 107, 190, 222, 28, 249, 189, 51, 35, 34, 189, 227, 39, 63, 190, 183, 155, 227, 190, 182, 31, 7, 191, 124, 140, 7, 63, 134, 101, 185, 190, 147, 12, 146, 62, 58, 40, 171, 190, 35, 188, 126, 62, 246, 46, 17, 62, 219, 85, 206, 191, 125, 215, 206, 189, 114, 64, 36, 189, 248, 249, 179, 191, 169, 193, 28, 62, 80, 116, 104, 62, 186, 171, 139, 189, 203, 142, 214, 189, 67, 238, 147, 62, 101, 21, 17, 61, 191, 91, 6, 62, 149, 136, 236, 61, 247, 3, 73, 190, 185, 3, 128, 190, 31, 158, 240, 61, 227, 1, 17, 191, 55, 137, 160, 190, 245, 161, 228, 188, 238, 201, 229, 190, 147, 230, 35, 61, 5, 207, 172, 61, 141, 126, 68, 62, 11, 167, 108, 190, 38, 185, 241, 190, 109, 149, 223, 190, 63, 240, 214, 190, 172, 229, 169, 189, 94, 246, 195, 61, 15, 75, 12, 63, 42, 141, 211, 61, 240, 90, 8, 62, 19, 67, 53, 190, 32, 170, 86, 62, 18, 108, 159, 191, 136, 92, 22, 61, 104, 231, 164, 62, 112, 223, 183, 61, 8, 160, 208, 188, 21, 107, 60, 190, 185, 129, 78, 190, 200, 20, 216, 190, 155, 19, 208, 60, 124, 187, 104, 189, 190, 199, 132, 191, 102, 44, 166, 190, 217, 150, 77, 189, 152, 197, 157, 190, 27, 120, 36, 61, 29, 187, 29, 62, 161, 191, 64, 189, 15, 63, 218, 61, 118, 37, 41, 188, 250, 117, 129, 61, 162, 18, 92, 191, 47, 102, 214, 60, 163, 111, 145, 62, 233, 247, 161, 190, 2, 126, 192, 190, 68, 14, 27, 62, 244, 103, 108, 189, 68, 59, 7, 63, 170, 74, 190, 190, 213, 154, 135, 62, 32, 237, 34, 190, 120, 134, 10, 191, 185, 80, 50, 190, 211, 185, 210, 61, 24, 118, 193, 190, 233, 156, 41, 62, 186, 245, 232, 61, 233, 77, 12, 190, 244, 78, 20, 189, 150, 102, 140, 62, 231, 100, 185, 190, 34, 28, 244, 58, 183, 178, 1, 62, 21, 59, 185, 189, 239, 79, 129, 62, 91, 241, 175, 189, 40, 158, 107, 189, 187, 73, 231, 61, 124, 86, 140, 189, 123, 236, 251, 188, 231, 108, 49, 62, 183, 144, 77, 190, 94, 170, 116, 61, 56, 98, 32, 62, 99, 119, 237, 190, 173, 133, 177, 190, 14, 99, 242, 190, 53, 109, 31, 191, 210, 74, 123, 62, 254, 195, 129, 190, 101, 35, 171, 189, 43, 207, 121, 62, 169, 53, 69, 62, 183, 155, 145, 190, 194, 45, 31, 62, 135, 235, 221, 61, 247, 164, 149, 190, 99, 112, 37, 62, 57, 73, 38, 190, 242, 135, 164, 188, 13, 191, 15, 62, 48, 191, 116, 60, 207, 145, 128, 62, 37, 57, 55, 62, 159, 19, 42, 189, 159, 99, 29, 190, 193, 198, 158, 62, 119, 64, 171, 190, 129, 28, 83, 189, 32, 104, 107, 187, 156, 101, 202, 189, 73, 248, 53, 62, 62, 239, 129, 62, 84, 84, 152, 189, 213, 147, 45, 62, 251, 166, 80, 61, 107, 184, 3, 190, 88, 100, 206, 61, 91, 94, 163, 61, 78, 209, 119, 191, 204, 183, 5, 62, 16, 92, 46, 190, 236, 255, 219, 61, 29, 77, 217, 61, 158, 93, 114, 62, 157, 41, 212, 189, 12, 178, 35, 62, 232, 120, 185, 60, 168, 77, 162, 61, 239, 121, 40, 189, 188, 4, 3, 191, 4, 169, 113, 62, 4, 95, 212, 62, 112, 119, 48, 190, 150, 36, 194, 62, 130, 127, 108, 62, 89, 125, 238, 188, 66, 179, 164, 190, 15, 78, 193, 190, 51, 245, 195, 190, 167, 247, 233, 189, 212, 231, 247, 60, 187, 197, 158, 62, 64, 180, 160, 61, 233, 224, 66, 190, 11, 31, 72, 189, 65, 160, 218, 60, 27, 7, 124, 190, 64, 149, 233, 61, 241, 246, 168, 62, 36, 104, 119, 62, 198, 212, 37, 63, 219, 209, 55, 190, 148, 57, 174, 189, 144, 161, 105, 61, 207, 85, 18, 60, 190, 215, 169, 62, 0, 209, 205, 190, 74, 48, 237, 187, 101, 93, 136, 190, 55, 13, 205, 187, 144, 111, 86, 189, 219, 226, 72, 62, 242, 21, 185, 59, 9, 249, 133, 62, 85, 186, 108, 190, 231, 241, 50, 62, 253, 218, 141, 61, 193, 204, 85, 189, 211, 25, 59, 61, 195, 87, 145, 191, 31, 40, 187, 189, 197, 240, 117, 190, 27, 165, 91, 190, 252, 219, 47, 190, 162, 127, 242, 189, 204, 203, 176, 190, 234, 107, 139, 62, 25, 249, 99, 62, 153, 141, 246, 189, 84, 19, 216, 61, 70, 187, 102, 62, 179, 28, 6, 62, 217, 234, 151, 62, 66, 248, 22, 62, 43, 241, 204, 62, 198, 172, 91, 190, 117, 44, 68, 62, 211, 16, 143, 190, 64, 15, 87, 62, 75, 20, 174, 191, 53, 197, 151, 61, 139, 43, 200, 62, 66, 220, 78, 188, 213, 178, 136, 62, 109, 109, 225, 189, 103, 177, 213, 190, 41, 103, 153, 190, 215, 66, 114, 62, 189, 210, 145, 62, 232, 234, 47, 191, 16, 39, 81, 190, 93, 149, 232, 189, 47, 66, 150, 190, 47, 153, 171, 189, 251, 254, 128, 62, 52, 169, 77, 190, 140, 151, 239, 61, 156, 247, 133, 61, 228, 82, 139, 61, 97, 201, 22, 191, 194, 1, 28, 62, 154, 207, 142, 62, 105, 45, 219, 190, 25, 54, 212, 190, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 204, 30, 71, 191, 0, 124, 27, 189, 14, 46, 185, 190, 252, 224, 186, 62, 65, 215, 147, 61, 112, 239, 253, 62, 127, 10, 184, 188, 160, 117, 124, 62, 3, 9, 39, 189, 137, 119, 73, 190, 70, 182, 40, 62, 145, 221, 3, 191, 162, 156, 159, 62, 240, 182, 125, 62, 122, 40, 59, 59, 40, 122, 253, 61, 117, 221, 126, 62, 253, 211, 25, 190, 155, 150, 144, 189, 4, 176, 185, 61, 200, 252, 94, 190, 69, 123, 96, 190, 129, 198, 53, 62, 237, 50, 93, 189, 95, 46, 172, 61, 23, 133, 94, 61, 229, 98, 73, 189, 233, 109, 90, 61, 189, 221, 235, 190, 29, 142, 87, 61, 137, 71, 186, 61, 94, 202, 160, 186, 211, 194, 253, 62, 191, 112, 11, 190, 89, 108, 199, 62, 192, 2, 7, 191, 225, 95, 77, 62, 198, 73, 211, 190, 195, 216, 152, 61, 126, 10, 39, 190, 247, 62, 6, 60, 173, 213, 206, 62, 189, 251, 192, 61, 214, 200, 136, 62, 8, 37, 5, 190, 37, 118, 246, 190, 242, 109, 105, 62, 205, 88, 38, 190, 238, 56, 161, 61, 147, 75, 23, 62, 214, 175, 94, 190, 164, 121, 241, 61, 83, 138, 121, 61, 191, 5, 115, 62, 35, 87, 153, 62, 122, 16, 55, 62, 60, 36, 29, 62, 115, 142, 54, 62, 103, 249, 249, 61, 145, 172, 41, 62, 212, 235, 76, 190, 177, 103, 135, 62, 186, 117, 250, 190, 174, 203, 243, 190, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 157, 156, 28, 191, 233, 205, 15, 62, 235, 80, 148, 190, 224, 192, 232, 189, 180, 65, 48, 62, 11, 135, 102, 62, 24, 88, 148, 190, 149, 32, 76, 62, 115, 44, 75, 62, 38, 59, 194, 190, 40, 239, 55, 61, 87, 60, 198, 190, 148, 171, 58, 61, 150, 59, 42, 62, 156, 142, 139, 61, 133, 119, 40, 62, 208, 164, 17, 62, 224, 169, 190, 60, 193, 103, 202, 61, 123, 78, 124, 62, 234, 130, 75, 190, 30, 38, 169, 61, 127, 133, 143, 61, 104, 39, 243, 188, 177, 16, 3, 62, 25, 94, 145, 62, 139, 75, 10, 189, 173, 132, 160, 61, 169, 166, 248, 188, 91, 200, 172, 189, 152, 183, 55, 190, 86, 220, 167, 188, 254, 227, 89, 191, 136, 8, 93, 62, 163, 88, 26, 191, 173, 179, 242, 189, 39, 164, 205, 61, 84, 95, 0, 62, 0, 16, 195, 188, 52, 211, 143, 61, 179, 86, 159, 60, 172, 164, 217, 190, 103, 56, 3, 190, 103, 182, 177, 190, 141, 113, 183, 61, 4, 122, 134, 62, 25, 202, 45, 190, 34, 118, 74, 62, 131, 130, 209, 58, 95, 134, 72, 189, 234, 43, 166, 62, 171, 65, 188, 62, 230, 69, 154, 190, 150, 105, 195, 189, 61, 124, 121, 189, 17, 3, 14, 189, 114, 223, 208, 61, 93, 159, 66, 189, 185, 21, 101, 62, 30, 114, 165, 61, 121, 179, 235, 188, 62, 69, 115, 190, 23, 43, 197, 62, 12, 34, 211, 61, 16, 234, 213, 189, 205, 132, 75, 191, 196, 104, 63, 188, 50, 45, 72, 190, 113, 183, 230, 60, 193, 173, 147, 60, 15, 93, 40, 60, 157, 58, 139, 189, 181, 38, 51, 190, 207, 236, 15, 190, 109, 241, 130, 189, 90, 151, 116, 189, 228, 139, 142, 62, 134, 165, 144, 189, 239, 214, 58, 62, 194, 189, 13, 191, 221, 183, 126, 62, 168, 69, 161, 61, 48, 247, 137, 190, 230, 7, 161, 190, 130, 31, 171, 190, 112, 64, 132, 190, 218, 9, 14, 62, 80, 228, 136, 190, 80, 117, 196, 61, 13, 70, 135, 190, 99, 217, 16, 191, 115, 125, 33, 62, 54, 151, 239, 190, 107, 17, 49, 61, 222, 236, 238, 189, 236, 163, 173, 190, 35, 247, 95, 191, 70, 153, 77, 62, 3, 26, 248, 190, 111, 51, 220, 62, 241, 171, 10, 190, 155, 69, 156, 62, 85, 182, 85, 61, 215, 63, 77, 62, 153, 152, 185, 189, 183, 190, 168, 190, 249, 221, 226, 189, 106, 87, 10, 191, 105, 162, 74, 62, 252, 2, 154, 62, 217, 235, 195, 188, 77, 67, 92, 61, 57, 19, 0, 60, 58, 255, 213, 61, 186, 207, 33, 191, 165, 198, 11, 63, 167, 109, 32, 191, 148, 168, 96, 190, 48, 14, 141, 60, 53, 18, 10, 62, 135, 102, 53, 62, 123, 132, 146, 189, 210, 170, 137, 188, 47, 241, 177, 189, 49, 32, 193, 190, 163, 32, 45, 62, 164, 240, 146, 62, 92, 211, 239, 61, 52, 20, 132, 191, 85, 26, 44, 191, 79, 227, 107, 61, 236, 185, 94, 62, 126, 194, 234, 189, 34, 143, 27, 62, 162, 118, 150, 61, 106, 46, 98, 62, 110, 215, 0, 191, 243, 243, 146, 61, 192, 91, 244, 190, 248, 73, 153, 190, 193, 30, 150, 62, 151, 115, 29, 62, 63, 41, 135, 189, 4, 142, 38, 62, 99, 34, 52, 62, 235, 194, 12, 60, 137, 214, 131, 190, 151, 170, 193, 62, 174, 73, 177, 190, 214, 143, 29, 191, 170, 163, 1, 62, 146, 58, 46, 62, 61, 103, 87, 62, 82, 142, 210, 190, 52, 97, 129, 189, 21, 160, 143, 189, 194, 104, 48, 191, 65, 5, 73, 62, 118, 79, 45, 62, 174, 71, 103, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 221, 19, 62, 70, 199, 191, 188, 248, 21, 31, 189, 50, 157, 156, 60, 246, 103, 171, 61, 109, 79, 180, 189, 89, 219, 67, 62, 104, 158, 61, 62, 43, 235, 59, 62, 28, 94, 48, 190, 187, 108, 70, 189, 72, 106, 230, 188, 51, 245, 204, 189, 15, 86, 55, 189, 175, 204, 78, 190, 213, 180, 115, 188, 244, 41, 129, 61, 128, 135, 17, 62, 80, 225, 172, 189, 46, 243, 60, 60, 35, 206, 145, 62, 52, 82, 164, 189, 155, 85, 6, 62, 52, 58, 2, 190, 133, 218, 153, 62, 162, 26, 34, 62, 161, 231, 122, 189, 45, 213, 54, 62, 236, 23, 55, 188, 180, 31, 183, 61, 98, 138, 129, 61, 29, 189, 113, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 154, 213, 190, 128, 219, 35, 63, 175, 152, 140, 63, 79, 83, 39, 190, 184, 6, 59, 61, 119, 158, 141, 62, 218, 7, 3, 63, 35, 213, 116, 190, 94, 184, 7, 191, 186, 109, 213, 189, 191, 141, 170, 61, 66, 197, 241, 62, 203, 200, 24, 60, 4, 241, 75, 61, 202, 30, 19, 63, 247, 106, 19, 191, 68, 226, 201, 190, 144, 206, 81, 191, 238, 195, 210, 190, 116, 36, 23, 62, 249, 239, 245, 62, 42, 248, 178, 190, 236, 172, 103, 191, 97, 25, 11, 62, 6, 189, 252, 62, 84, 185, 209, 190, 80, 24, 0, 61, 70, 79, 26, 62, 46, 22, 198, 62, 249, 204, 5, 190, 175, 145, 178, 62, 28, 9, 81, 63, 224, 72, 86, 190, 25, 255, 191, 190, 147, 119, 158, 62, 158, 89, 197, 189, 105, 72, 99, 191, 202, 33, 113, 189, 246, 185, 118, 62, 233, 116, 73, 190, 133, 0, 137, 62, 214, 19, 24, 190, 194, 170, 160, 190, 195, 42, 153, 62, 121, 81, 212, 60, 28, 42, 186, 61, 86, 133, 104, 62, 243, 185, 11, 62, 1, 25, 156, 190, 218, 10, 86, 189, 70, 203, 136, 61, 188, 255, 118, 190, 106, 4, 132, 61, 59, 238, 68, 62, 186, 195, 33, 188, 83, 154, 227, 61, 125, 139, 131, 190, 106, 30, 120, 60, 102, 55, 6, 62, 92, 76, 108, 190, 219, 82, 143, 62, 220, 149, 154, 190, 175, 7, 145, 62, 221, 248, 193, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 143, 225, 189, 15, 159, 29, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 140, 154, 190, 73, 82, 82, 186, 185, 200, 37, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {247, 23, 154, 191, 92, 148, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}