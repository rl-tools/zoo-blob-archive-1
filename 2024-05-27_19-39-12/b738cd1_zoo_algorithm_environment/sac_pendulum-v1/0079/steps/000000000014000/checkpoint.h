// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 40, 84, 63, 11, 205, 245, 62, 244, 89, 151, 62, 130, 157, 142, 61, 205, 118, 191, 62, 2, 91, 225, 190, 126, 207, 248, 62, 91, 144, 137, 63, 34, 193, 65, 62, 110, 175, 162, 62, 9, 63, 141, 191, 252, 82, 31, 190, 201, 216, 150, 62, 225, 163, 23, 190, 37, 109, 72, 60, 91, 72, 8, 63, 175, 164, 137, 191, 50, 22, 179, 188, 235, 179, 240, 190, 123, 146, 59, 191, 95, 200, 99, 190, 78, 34, 77, 191, 51, 226, 162, 63, 58, 89, 178, 62, 135, 17, 181, 61, 185, 221, 25, 63, 51, 14, 175, 190, 58, 68, 42, 189, 186, 234, 192, 191, 170, 88, 106, 190, 127, 22, 103, 62, 18, 17, 57, 190, 108, 139, 135, 190, 61, 178, 33, 63, 77, 78, 62, 63, 196, 57, 182, 62, 247, 241, 43, 63, 106, 245, 143, 191, 38, 111, 88, 190, 166, 34, 26, 63, 4, 30, 129, 61, 255, 26, 216, 190, 32, 103, 25, 63, 119, 32, 136, 63, 132, 70, 2, 63, 10, 32, 242, 189, 229, 15, 46, 191, 90, 134, 29, 62, 126, 17, 135, 62, 124, 137, 35, 191, 248, 194, 3, 190, 141, 228, 203, 62, 237, 12, 121, 190, 166, 111, 84, 62, 176, 213, 29, 190, 188, 42, 33, 190, 199, 199, 168, 190, 134, 234, 128, 191, 253, 59, 103, 63, 0, 30, 155, 188, 109, 113, 21, 190, 94, 198, 198, 191, 75, 71, 235, 190, 113, 92, 214, 190, 219, 248, 238, 190, 185, 241, 24, 191, 129, 35, 0, 191, 255, 96, 17, 63, 174, 79, 46, 62, 109, 127, 33, 191, 233, 203, 93, 62, 88, 154, 164, 62, 80, 39, 21, 191, 29, 175, 179, 61, 162, 165, 126, 189, 248, 152, 78, 62, 123, 164, 87, 63, 64, 127, 179, 190, 150, 111, 112, 190, 18, 23, 22, 191, 128, 21, 176, 62, 129, 74, 151, 60, 103, 115, 161, 62, 107, 21, 253, 62, 19, 55, 166, 190, 170, 34, 143, 189, 6, 121, 219, 190, 132, 245, 93, 191, 61, 84, 81, 190, 71, 153, 141, 188, 60, 18, 52, 63, 254, 137, 145, 191, 58, 142, 199, 190, 17, 152, 255, 62, 11, 19, 148, 191, 129, 191, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 28, 79, 191, 58, 207, 182, 59, 69, 172, 156, 189, 130, 121, 217, 189, 29, 138, 169, 62, 186, 139, 227, 187, 94, 103, 8, 63, 184, 25, 138, 62, 41, 233, 140, 62, 61, 207, 128, 190, 84, 22, 216, 62, 156, 200, 2, 191, 126, 233, 21, 62, 248, 254, 204, 190, 14, 119, 191, 62, 142, 97, 239, 61, 83, 104, 179, 62, 6, 183, 68, 61, 73, 100, 129, 191, 44, 108, 181, 190, 163, 94, 182, 190, 34, 63, 232, 189, 70, 20, 19, 63, 189, 111, 12, 191, 169, 215, 35, 63, 254, 139, 202, 62, 157, 84, 39, 190, 150, 20, 203, 59, 157, 29, 161, 190, 229, 234, 15, 63, 89, 165, 232, 190, 160, 216, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 127, 72, 189, 21, 88, 63, 62, 215, 212, 109, 62, 7, 35, 1, 191, 185, 113, 24, 62, 186, 50, 15, 188, 12, 186, 57, 190, 130, 168, 33, 189, 106, 15, 55, 62, 249, 157, 46, 62, 223, 95, 61, 62, 114, 196, 134, 60, 117, 222, 64, 189, 185, 106, 157, 190, 252, 14, 165, 62, 111, 8, 228, 190, 43, 13, 64, 62, 191, 182, 113, 60, 149, 172, 149, 190, 39, 187, 62, 61, 237, 170, 219, 190, 21, 202, 233, 189, 48, 236, 165, 62, 126, 7, 33, 191, 102, 4, 161, 62, 193, 11, 4, 62, 84, 15, 229, 190, 42, 199, 245, 189, 127, 82, 214, 189, 242, 47, 215, 61, 116, 90, 43, 191, 26, 10, 20, 191, 133, 116, 147, 190, 88, 125, 177, 190, 19, 209, 217, 190, 2, 56, 129, 190, 41, 47, 233, 190, 235, 114, 142, 190, 7, 103, 125, 62, 177, 122, 86, 62, 253, 128, 58, 189, 154, 164, 126, 61, 150, 254, 215, 190, 185, 184, 156, 188, 156, 114, 16, 189, 30, 34, 0, 190, 187, 124, 61, 191, 129, 125, 171, 62, 161, 109, 242, 189, 54, 100, 136, 190, 173, 31, 7, 62, 248, 79, 218, 189, 103, 36, 212, 189, 90, 133, 101, 190, 228, 105, 149, 61, 211, 132, 139, 189, 16, 221, 73, 61, 20, 76, 89, 188, 17, 118, 1, 191, 163, 24, 171, 189, 29, 76, 114, 190, 63, 41, 59, 62, 203, 206, 108, 190, 244, 140, 198, 59, 141, 131, 7, 63, 219, 29, 75, 187, 211, 241, 247, 62, 198, 253, 194, 190, 13, 139, 11, 62, 237, 133, 166, 190, 2, 93, 162, 191, 93, 148, 62, 62, 26, 220, 144, 62, 172, 227, 17, 190, 45, 146, 6, 190, 103, 38, 235, 62, 190, 129, 127, 191, 246, 77, 211, 187, 183, 106, 196, 61, 248, 27, 234, 189, 69, 158, 7, 191, 228, 82, 245, 60, 29, 12, 46, 189, 206, 179, 206, 190, 195, 5, 190, 189, 157, 132, 21, 191, 244, 241, 231, 189, 120, 137, 142, 190, 6, 179, 175, 190, 18, 250, 247, 62, 161, 233, 177, 62, 116, 222, 158, 189, 128, 52, 33, 191, 233, 124, 78, 191, 175, 224, 204, 190, 187, 155, 58, 190, 175, 73, 39, 62, 222, 39, 117, 189, 144, 202, 192, 189, 239, 244, 243, 189, 6, 41, 10, 186, 248, 152, 9, 190, 89, 43, 38, 190, 212, 25, 230, 189, 131, 236, 240, 189, 124, 49, 135, 61, 138, 187, 179, 189, 22, 67, 225, 189, 112, 66, 10, 188, 204, 30, 233, 189, 130, 31, 18, 189, 64, 245, 4, 60, 21, 22, 232, 189, 128, 205, 23, 62, 86, 111, 27, 62, 179, 62, 153, 189, 27, 127, 176, 188, 110, 0, 139, 189, 62, 72, 27, 190, 117, 45, 36, 190, 132, 110, 5, 62, 15, 157, 228, 189, 204, 160, 100, 60, 100, 6, 241, 188, 177, 37, 16, 61, 136, 11, 26, 188, 85, 99, 244, 188, 234, 23, 23, 62, 190, 46, 24, 191, 161, 138, 251, 190, 193, 202, 166, 190, 95, 186, 105, 188, 104, 101, 150, 61, 163, 71, 39, 62, 71, 101, 88, 191, 237, 13, 57, 190, 167, 211, 77, 190, 133, 235, 169, 191, 189, 17, 57, 62, 185, 146, 21, 191, 69, 202, 141, 62, 158, 143, 249, 189, 86, 199, 169, 61, 48, 212, 185, 190, 15, 0, 249, 61, 36, 114, 39, 62, 71, 179, 74, 190, 85, 249, 16, 61, 58, 203, 6, 190, 73, 203, 190, 190, 20, 14, 191, 190, 169, 57, 182, 61, 122, 255, 48, 190, 218, 244, 215, 59, 249, 178, 190, 190, 204, 192, 64, 190, 66, 13, 155, 190, 185, 228, 66, 190, 202, 54, 215, 61, 118, 224, 239, 190, 182, 114, 218, 61, 116, 164, 15, 190, 210, 41, 4, 189, 101, 124, 129, 60, 165, 189, 50, 189, 229, 214, 198, 60, 18, 208, 52, 189, 40, 176, 79, 190, 105, 216, 91, 189, 249, 21, 119, 61, 106, 248, 209, 189, 205, 12, 9, 62, 106, 114, 96, 190, 224, 156, 230, 188, 106, 60, 1, 62, 121, 180, 32, 60, 7, 220, 130, 190, 67, 165, 224, 189, 15, 70, 154, 189, 228, 12, 244, 190, 182, 21, 98, 189, 27, 243, 217, 189, 34, 211, 162, 190, 28, 161, 31, 61, 150, 109, 250, 189, 111, 132, 155, 60, 152, 55, 170, 189, 67, 225, 199, 188, 172, 188, 37, 190, 233, 129, 183, 190, 151, 14, 170, 61, 106, 96, 215, 189, 199, 215, 139, 191, 112, 157, 71, 62, 98, 134, 217, 190, 171, 140, 164, 62, 147, 184, 64, 191, 16, 156, 218, 61, 249, 14, 54, 61, 158, 221, 73, 189, 233, 28, 34, 61, 78, 140, 172, 190, 106, 96, 67, 191, 122, 239, 218, 189, 233, 220, 249, 61, 42, 195, 213, 190, 37, 209, 137, 190, 204, 45, 103, 187, 119, 235, 240, 190, 225, 8, 125, 61, 49, 99, 253, 190, 194, 78, 1, 63, 106, 142, 166, 191, 44, 243, 202, 189, 32, 34, 98, 62, 213, 221, 47, 62, 18, 26, 235, 61, 118, 114, 90, 62, 84, 122, 205, 189, 97, 151, 130, 62, 152, 20, 11, 189, 209, 187, 157, 61, 90, 147, 214, 190, 117, 245, 68, 189, 243, 56, 36, 62, 7, 86, 118, 60, 184, 160, 180, 62, 151, 83, 239, 190, 103, 152, 9, 62, 233, 133, 139, 190, 49, 49, 209, 190, 42, 125, 252, 190, 157, 240, 74, 62, 22, 226, 228, 190, 238, 203, 153, 61, 107, 217, 43, 62, 148, 171, 38, 190, 124, 21, 176, 189, 162, 78, 95, 62, 99, 174, 172, 61, 142, 177, 181, 61, 186, 73, 0, 62, 226, 18, 69, 189, 169, 122, 76, 61, 6, 33, 212, 190, 40, 38, 242, 61, 143, 18, 113, 59, 180, 238, 7, 189, 201, 156, 189, 61, 112, 219, 209, 61, 170, 251, 127, 62, 183, 170, 135, 187, 24, 143, 218, 188, 10, 193, 136, 190, 83, 36, 247, 190, 69, 97, 27, 191, 255, 201, 25, 62, 64, 160, 168, 61, 67, 0, 247, 62, 62, 237, 237, 190, 190, 118, 142, 187, 54, 77, 242, 190, 27, 27, 203, 61, 16, 200, 140, 191, 63, 114, 23, 190, 136, 29, 222, 62, 61, 237, 168, 61, 121, 132, 205, 62, 212, 178, 61, 190, 42, 193, 174, 190, 99, 98, 73, 62, 179, 194, 89, 189, 122, 12, 46, 62, 108, 195, 39, 189, 125, 187, 108, 190, 182, 64, 158, 189, 245, 70, 29, 190, 215, 203, 16, 62, 242, 159, 90, 187, 128, 163, 36, 191, 105, 155, 93, 62, 122, 7, 27, 62, 71, 5, 172, 62, 69, 51, 87, 190, 234, 172, 101, 189, 237, 91, 60, 62, 167, 112, 5, 191, 15, 13, 235, 190, 215, 110, 1, 62, 97, 226, 140, 61, 120, 167, 72, 61, 94, 60, 201, 189, 163, 140, 30, 187, 245, 26, 11, 187, 88, 243, 13, 61, 52, 92, 17, 62, 196, 49, 29, 189, 244, 3, 5, 190, 212, 185, 212, 186, 80, 196, 124, 189, 175, 77, 214, 189, 18, 102, 237, 189, 151, 101, 34, 190, 189, 212, 10, 190, 139, 46, 94, 189, 122, 196, 8, 62, 59, 68, 251, 61, 114, 125, 205, 61, 197, 100, 5, 62, 195, 140, 30, 190, 146, 40, 21, 190, 53, 113, 10, 190, 177, 186, 29, 61, 135, 0, 26, 190, 61, 129, 198, 189, 25, 156, 152, 189, 69, 101, 156, 60, 124, 238, 35, 190, 92, 93, 31, 62, 126, 30, 160, 61, 72, 223, 205, 190, 103, 19, 26, 191, 204, 153, 86, 190, 228, 242, 152, 62, 224, 158, 218, 61, 25, 173, 156, 62, 212, 213, 133, 190, 104, 237, 43, 189, 62, 181, 150, 190, 44, 204, 142, 190, 71, 160, 80, 189, 236, 70, 204, 190, 238, 34, 88, 62, 77, 231, 200, 189, 3, 33, 69, 60, 232, 73, 235, 62, 113, 235, 247, 60, 4, 37, 147, 62, 101, 42, 34, 62, 76, 143, 93, 189, 123, 29, 120, 188, 169, 167, 64, 189, 13, 73, 191, 61, 232, 209, 113, 189, 176, 200, 196, 189, 13, 35, 125, 190, 154, 62, 103, 61, 251, 26, 128, 62, 39, 87, 206, 190, 208, 49, 222, 61, 97, 86, 172, 189, 107, 194, 175, 60, 132, 13, 73, 190, 149, 74, 5, 62, 183, 79, 0, 191, 35, 180, 222, 60, 56, 233, 0, 189, 212, 141, 52, 62, 171, 49, 244, 190, 113, 10, 203, 190, 67, 230, 10, 189, 237, 182, 35, 191, 19, 100, 9, 62, 160, 193, 176, 190, 181, 1, 46, 188, 59, 227, 104, 62, 182, 42, 0, 190, 20, 75, 169, 62, 183, 179, 2, 62, 99, 101, 136, 62, 85, 74, 252, 62, 126, 47, 200, 62, 4, 44, 193, 189, 48, 174, 175, 61, 82, 15, 72, 191, 3, 139, 52, 190, 179, 5, 15, 190, 219, 249, 221, 61, 214, 188, 153, 62, 189, 107, 86, 190, 194, 200, 134, 60, 115, 101, 192, 190, 221, 21, 150, 62, 111, 124, 101, 61, 225, 76, 251, 189, 249, 198, 7, 189, 99, 217, 162, 189, 116, 126, 95, 61, 251, 167, 158, 188, 144, 30, 24, 189, 201, 204, 128, 61, 254, 239, 132, 61, 94, 3, 8, 190, 237, 255, 217, 189, 163, 243, 64, 189, 175, 136, 11, 61, 76, 21, 255, 61, 225, 172, 13, 190, 21, 22, 98, 61, 52, 208, 118, 189, 142, 49, 148, 188, 51, 44, 238, 189, 163, 121, 185, 187, 252, 163, 247, 61, 162, 136, 222, 189, 175, 186, 33, 190, 39, 50, 46, 190, 34, 114, 142, 61, 233, 83, 34, 61, 140, 168, 229, 61, 128, 14, 252, 61, 85, 237, 52, 190, 174, 118, 234, 61, 125, 219, 137, 189, 233, 35, 28, 62, 30, 115, 4, 190, 53, 2, 4, 190, 39, 192, 228, 189, 97, 102, 79, 61, 165, 175, 163, 61, 106, 219, 187, 61, 46, 217, 234, 189, 39, 213, 20, 189, 200, 237, 136, 189, 51, 99, 24, 190, 59, 169, 222, 189, 140, 11, 167, 188, 243, 235, 19, 190, 253, 54, 103, 188, 86, 46, 3, 62, 255, 156, 20, 190, 248, 15, 54, 61, 39, 207, 151, 188, 56, 123, 203, 61, 61, 129, 51, 61, 151, 170, 57, 61, 192, 244, 155, 189, 244, 19, 226, 189, 10, 35, 164, 189, 125, 63, 235, 189, 239, 248, 57, 190, 230, 104, 3, 62, 122, 195, 24, 190, 122, 144, 161, 61, 58, 169, 42, 61, 122, 234, 132, 61, 237, 154, 91, 61, 230, 250, 115, 188, 159, 31, 53, 189, 196, 173, 38, 62, 12, 96, 133, 190, 237, 52, 212, 190, 120, 219, 132, 191, 235, 166, 233, 190, 29, 137, 210, 61, 238, 117, 159, 190, 253, 142, 103, 62, 150, 26, 82, 190, 19, 163, 25, 191, 95, 205, 55, 61, 230, 191, 30, 191, 61, 100, 119, 190, 32, 180, 13, 191, 108, 28, 169, 188, 138, 88, 58, 191, 22, 98, 194, 189, 246, 42, 87, 191, 235, 59, 15, 63, 21, 6, 143, 191, 253, 192, 126, 190, 26, 2, 112, 62, 231, 195, 131, 61, 161, 207, 120, 59, 139, 61, 122, 62, 176, 97, 211, 190, 66, 199, 147, 189, 161, 96, 184, 61, 122, 237, 13, 62, 142, 72, 29, 191, 145, 123, 38, 190, 108, 167, 131, 62, 209, 83, 224, 61, 169, 205, 62, 62, 44, 184, 38, 191, 11, 238, 142, 61, 178, 224, 23, 191, 90, 2, 32, 61, 64, 109, 90, 191, 193, 150, 57, 61, 196, 146, 241, 61, 129, 65, 86, 62, 96, 187, 191, 62, 63, 4, 24, 191, 105, 116, 147, 188, 185, 255, 189, 60, 125, 20, 26, 190, 134, 202, 5, 62, 178, 191, 8, 61, 92, 151, 13, 190, 254, 179, 88, 189, 44, 255, 171, 190, 155, 46, 5, 189, 118, 210, 130, 190, 114, 39, 250, 189, 10, 10, 79, 61, 251, 139, 15, 62, 109, 162, 130, 190, 165, 54, 203, 60, 81, 101, 8, 189, 80, 56, 124, 190, 30, 171, 1, 191, 100, 142, 29, 191, 152, 142, 19, 63, 84, 124, 158, 190, 211, 239, 153, 62, 219, 243, 185, 190, 59, 145, 122, 62, 69, 176, 10, 62, 134, 19, 223, 191, 10, 14, 0, 190, 163, 101, 65, 189, 90, 182, 202, 191, 254, 152, 13, 62, 231, 168, 133, 62, 96, 81, 175, 189, 14, 18, 254, 189, 215, 221, 156, 62, 112, 117, 151, 61, 163, 246, 245, 61, 127, 232, 241, 61, 247, 3, 73, 190, 134, 232, 243, 190, 31, 158, 240, 61, 86, 0, 16, 191, 180, 107, 151, 190, 80, 171, 30, 189, 132, 246, 225, 190, 132, 85, 44, 61, 9, 190, 191, 61, 132, 164, 87, 62, 188, 72, 113, 190, 196, 55, 233, 190, 75, 159, 241, 190, 172, 66, 243, 190, 84, 196, 146, 189, 228, 82, 218, 61, 176, 20, 22, 63, 121, 107, 224, 60, 116, 44, 69, 62, 174, 159, 68, 190, 117, 19, 83, 62, 184, 143, 168, 191, 159, 154, 78, 61, 81, 244, 156, 62, 184, 167, 211, 61, 40, 76, 155, 60, 137, 9, 69, 190, 200, 115, 54, 190, 130, 120, 211, 190, 206, 59, 14, 62, 6, 72, 13, 189, 155, 52, 88, 191, 71, 201, 189, 190, 236, 202, 87, 189, 251, 166, 195, 190, 173, 166, 249, 60, 228, 217, 57, 62, 198, 52, 39, 62, 195, 198, 238, 61, 63, 201, 185, 59, 105, 35, 125, 62, 27, 58, 24, 191, 170, 105, 135, 60, 92, 12, 145, 62, 118, 75, 202, 190, 213, 221, 248, 190, 206, 138, 139, 62, 3, 253, 68, 189, 8, 92, 15, 63, 197, 53, 180, 190, 57, 254, 140, 62, 49, 132, 7, 190, 130, 185, 7, 191, 45, 151, 50, 190, 102, 87, 192, 61, 79, 232, 249, 190, 224, 79, 38, 62, 63, 241, 35, 62, 197, 38, 2, 190, 125, 139, 4, 189, 186, 133, 156, 62, 198, 255, 173, 190, 216, 149, 104, 60, 253, 236, 15, 62, 89, 180, 111, 189, 226, 248, 171, 62, 71, 253, 240, 189, 196, 87, 19, 189, 212, 78, 20, 62, 230, 83, 112, 190, 1, 178, 130, 187, 9, 79, 47, 62, 174, 68, 167, 190, 244, 198, 173, 61, 92, 225, 55, 62, 168, 37, 232, 190, 239, 203, 189, 190, 234, 15, 2, 191, 236, 11, 66, 191, 16, 208, 139, 62, 136, 29, 136, 190, 19, 84, 203, 189, 26, 176, 130, 62, 81, 5, 75, 62, 214, 45, 139, 190, 109, 82, 5, 62, 154, 102, 17, 62, 178, 34, 188, 190, 51, 216, 45, 62, 70, 155, 73, 190, 89, 188, 14, 189, 157, 187, 252, 61, 12, 78, 141, 60, 222, 231, 142, 62, 180, 61, 52, 62, 170, 135, 166, 188, 157, 238, 2, 190, 155, 239, 178, 62, 73, 173, 204, 190, 51, 219, 51, 189, 101, 179, 82, 187, 74, 217, 244, 189, 241, 100, 97, 62, 155, 94, 145, 62, 67, 44, 13, 189, 195, 41, 46, 62, 205, 219, 155, 61, 64, 49, 212, 189, 250, 241, 169, 60, 38, 165, 4, 187, 246, 161, 140, 191, 12, 42, 240, 61, 235, 52, 46, 190, 95, 227, 2, 62, 234, 72, 246, 61, 142, 61, 122, 62, 78, 177, 255, 188, 127, 20, 50, 62, 232, 31, 25, 61, 40, 95, 225, 61, 230, 122, 192, 188, 124, 65, 11, 191, 2, 227, 117, 62, 207, 53, 187, 62, 112, 71, 51, 190, 192, 45, 200, 62, 156, 239, 117, 62, 255, 163, 199, 188, 59, 159, 226, 190, 127, 179, 208, 190, 182, 189, 198, 190, 70, 114, 236, 189, 18, 104, 214, 60, 143, 216, 169, 62, 17, 81, 16, 62, 12, 9, 56, 190, 145, 80, 5, 189, 64, 246, 149, 60, 125, 205, 132, 190, 166, 91, 51, 62, 59, 20, 157, 62, 212, 65, 113, 62, 38, 125, 51, 63, 61, 38, 54, 190, 15, 225, 122, 188, 76, 180, 156, 60, 38, 169, 152, 60, 216, 26, 165, 62, 204, 168, 238, 190, 167, 26, 69, 61, 221, 10, 137, 190, 212, 28, 190, 189, 165, 206, 177, 188, 164, 132, 124, 62, 233, 176, 40, 188, 93, 201, 124, 62, 20, 51, 73, 190, 11, 69, 70, 62, 209, 44, 135, 61, 8, 176, 20, 189, 211, 25, 59, 61, 15, 20, 191, 191, 75, 252, 195, 189, 62, 123, 161, 190, 144, 104, 30, 190, 30, 44, 167, 189, 221, 39, 98, 189, 13, 22, 160, 190, 45, 26, 144, 62, 13, 92, 124, 62, 208, 49, 14, 190, 31, 147, 62, 62, 229, 70, 145, 62, 48, 67, 23, 62, 6, 129, 10, 63, 184, 156, 35, 62, 163, 117, 200, 62, 108, 191, 134, 190, 68, 100, 86, 62, 151, 176, 154, 190, 214, 82, 92, 62, 69, 82, 185, 191, 183, 157, 177, 61, 189, 6, 196, 62, 8, 75, 201, 187, 195, 161, 179, 62, 221, 208, 10, 190, 29, 127, 202, 190, 69, 35, 180, 190, 210, 148, 187, 62, 207, 130, 146, 62, 166, 164, 6, 191, 220, 8, 126, 190, 249, 226, 212, 189, 159, 42, 188, 190, 174, 235, 175, 189, 91, 154, 142, 62, 160, 116, 19, 190, 250, 69, 4, 62, 56, 48, 162, 61, 226, 166, 138, 62, 175, 38, 162, 190, 62, 203, 27, 62, 119, 166, 146, 62, 77, 95, 5, 191, 157, 44, 8, 191, 193, 80, 17, 62, 36, 228, 132, 60, 72, 190, 155, 188, 206, 41, 20, 62, 121, 191, 177, 61, 142, 176, 94, 189, 6, 6, 17, 190, 11, 109, 140, 61, 88, 96, 194, 60, 140, 252, 13, 62, 17, 213, 241, 189, 17, 30, 224, 60, 38, 31, 10, 190, 196, 192, 162, 61, 90, 23, 120, 188, 57, 245, 59, 60, 75, 67, 156, 189, 50, 10, 154, 189, 234, 49, 129, 189, 218, 77, 252, 189, 149, 102, 74, 57, 109, 135, 253, 189, 207, 142, 34, 189, 7, 0, 37, 61, 83, 157, 26, 60, 248, 218, 144, 189, 223, 43, 156, 59, 213, 149, 19, 190, 254, 78, 159, 189, 135, 113, 28, 61, 158, 170, 20, 62, 136, 58, 168, 61, 179, 185, 99, 191, 29, 164, 86, 189, 1, 134, 190, 190, 4, 54, 213, 62, 139, 0, 183, 61, 217, 23, 5, 63, 103, 119, 160, 61, 7, 24, 110, 62, 64, 228, 16, 189, 99, 180, 184, 189, 68, 158, 57, 62, 72, 124, 12, 191, 254, 87, 167, 62, 180, 95, 68, 62, 27, 2, 104, 186, 86, 183, 26, 62, 54, 181, 135, 62, 153, 226, 10, 190, 79, 231, 32, 190, 52, 34, 80, 61, 241, 243, 55, 190, 85, 123, 83, 190, 25, 156, 36, 62, 35, 156, 84, 189, 233, 150, 2, 62, 40, 144, 93, 61, 117, 142, 153, 188, 185, 181, 71, 61, 226, 42, 234, 190, 190, 17, 217, 61, 163, 27, 165, 61, 112, 30, 72, 60, 44, 72, 22, 63, 250, 240, 23, 190, 69, 70, 202, 62, 245, 138, 22, 191, 223, 193, 43, 62, 75, 248, 228, 190, 154, 20, 12, 61, 98, 196, 39, 190, 26, 211, 175, 188, 194, 180, 197, 62, 18, 195, 87, 61, 134, 3, 151, 62, 252, 169, 47, 190, 176, 230, 254, 190, 249, 170, 97, 62, 43, 163, 34, 190, 54, 146, 56, 61, 134, 26, 252, 61, 248, 52, 127, 190, 227, 47, 246, 61, 116, 103, 35, 61, 178, 94, 106, 62, 166, 229, 161, 62, 10, 68, 4, 62, 191, 174, 26, 62, 64, 166, 30, 62, 42, 233, 193, 61, 166, 170, 46, 62, 80, 129, 86, 190, 222, 178, 139, 62, 78, 99, 12, 191, 87, 6, 15, 191, 83, 216, 4, 190, 133, 142, 20, 190, 17, 153, 168, 189, 70, 146, 186, 189, 43, 189, 249, 61, 194, 218, 63, 190, 49, 151, 30, 61, 107, 92, 49, 190, 226, 22, 213, 61, 113, 134, 218, 188, 61, 54, 131, 189, 43, 165, 65, 190, 185, 105, 9, 189, 108, 215, 147, 189, 100, 32, 76, 61, 214, 48, 49, 190, 71, 141, 140, 61, 127, 84, 0, 62, 9, 215, 122, 61, 138, 129, 42, 190, 39, 71, 1, 62, 189, 83, 246, 189, 211, 109, 159, 61, 145, 122, 22, 190, 159, 182, 118, 61, 49, 33, 183, 189, 89, 94, 81, 61, 87, 150, 145, 189, 160, 174, 206, 189, 52, 199, 76, 190, 70, 160, 30, 190, 167, 170, 154, 189, 142, 43, 62, 191, 67, 21, 71, 62, 80, 203, 155, 190, 198, 152, 0, 190, 197, 167, 57, 62, 4, 222, 100, 62, 25, 152, 109, 190, 47, 192, 45, 62, 173, 125, 128, 62, 119, 102, 211, 190, 156, 146, 137, 61, 148, 226, 215, 190, 130, 39, 14, 61, 86, 59, 38, 62, 132, 89, 142, 61, 43, 72, 60, 62, 41, 126, 19, 62, 125, 18, 50, 61, 154, 51, 24, 62, 238, 160, 158, 62, 213, 234, 85, 190, 228, 56, 5, 62, 57, 52, 116, 61, 125, 1, 68, 189, 244, 95, 78, 62, 184, 140, 168, 62, 208, 181, 28, 59, 26, 215, 158, 61, 117, 142, 4, 61, 195, 92, 159, 188, 73, 216, 121, 190, 100, 191, 156, 189, 124, 125, 110, 191, 244, 52, 122, 62, 26, 215, 37, 191, 193, 186, 52, 190, 247, 217, 179, 61, 7, 90, 216, 61, 135, 204, 22, 61, 150, 194, 194, 61, 129, 76, 50, 61, 53, 217, 4, 191, 16, 77, 209, 189, 196, 52, 207, 190, 146, 88, 151, 61, 90, 2, 138, 62, 48, 148, 76, 190, 138, 223, 60, 62, 49, 72, 192, 187, 105, 129, 99, 189, 206, 60, 205, 62, 29, 234, 222, 62, 110, 197, 154, 190, 51, 70, 104, 189, 97, 73, 126, 189, 162, 196, 159, 189, 72, 127, 34, 62, 72, 251, 198, 188, 96, 66, 79, 62, 39, 109, 98, 61, 210, 242, 166, 60, 59, 109, 33, 190, 57, 16, 187, 62, 186, 119, 182, 61, 221, 26, 237, 189, 159, 199, 60, 191, 46, 240, 158, 60, 223, 2, 98, 190, 40, 218, 154, 60, 51, 43, 80, 60, 205, 5, 198, 189, 176, 31, 158, 60, 229, 68, 68, 190, 50, 39, 137, 190, 238, 90, 160, 189, 5, 69, 66, 189, 218, 211, 138, 62, 82, 75, 189, 189, 211, 244, 77, 62, 30, 186, 17, 191, 238, 18, 119, 62, 150, 28, 133, 61, 48, 247, 137, 190, 98, 254, 161, 189, 89, 64, 172, 190, 0, 91, 145, 190, 49, 177, 104, 62, 121, 152, 168, 190, 223, 84, 46, 62, 237, 187, 138, 190, 148, 136, 57, 191, 3, 163, 47, 62, 53, 30, 243, 190, 232, 82, 71, 62, 83, 197, 36, 190, 28, 163, 206, 190, 21, 20, 125, 191, 156, 197, 37, 62, 164, 204, 6, 191, 165, 163, 235, 62, 200, 48, 2, 190, 157, 30, 162, 62, 217, 218, 195, 61, 49, 110, 42, 62, 134, 146, 191, 189, 202, 235, 143, 190, 40, 74, 201, 189, 41, 131, 18, 191, 192, 145, 88, 62, 34, 69, 148, 62, 12, 40, 56, 189, 43, 64, 120, 61, 177, 182, 124, 60, 203, 213, 239, 61, 40, 242, 51, 191, 239, 153, 1, 63, 83, 98, 51, 191, 190, 252, 85, 190, 79, 93, 4, 189, 48, 60, 62, 62, 229, 70, 16, 62, 20, 0, 162, 189, 5, 35, 75, 60, 0, 245, 183, 189, 86, 149, 186, 190, 65, 130, 13, 62, 210, 240, 159, 62, 169, 231, 41, 62, 3, 106, 136, 191, 32, 17, 52, 191, 39, 182, 41, 189, 96, 191, 127, 62, 255, 169, 5, 190, 133, 35, 40, 62, 219, 2, 168, 61, 71, 232, 88, 62, 232, 16, 26, 191, 245, 117, 7, 62, 62, 250, 10, 191, 9, 220, 153, 190, 110, 52, 152, 62, 207, 2, 30, 62, 46, 162, 169, 189, 39, 190, 59, 62, 195, 144, 44, 62, 69, 90, 170, 60, 137, 214, 131, 190, 120, 208, 154, 62, 136, 139, 186, 190, 87, 94, 20, 191, 120, 155, 191, 61, 41, 224, 73, 62, 233, 118, 245, 61, 27, 153, 11, 191, 146, 241, 158, 188, 143, 232, 68, 189, 175, 54, 50, 191, 254, 199, 16, 62, 245, 89, 163, 61, 214, 234, 120, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 229, 48, 62, 188, 23, 49, 189, 38, 191, 201, 189, 50, 157, 156, 60, 192, 99, 158, 61, 109, 79, 180, 189, 162, 87, 12, 62, 168, 205, 70, 62, 86, 47, 37, 62, 28, 94, 48, 190, 40, 123, 27, 189, 196, 168, 172, 188, 51, 245, 204, 189, 15, 86, 55, 189, 90, 11, 59, 190, 175, 86, 175, 188, 18, 146, 141, 61, 127, 70, 60, 62, 106, 149, 111, 189, 114, 204, 195, 60, 91, 150, 152, 62, 210, 231, 108, 189, 39, 2, 36, 62, 52, 58, 2, 190, 73, 204, 159, 62, 140, 236, 15, 62, 161, 231, 122, 189, 10, 175, 71, 62, 196, 117, 194, 59, 135, 138, 206, 61, 64, 34, 96, 61, 72, 132, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 239, 228, 190, 77, 13, 31, 63, 138, 136, 149, 63, 79, 83, 39, 190, 162, 63, 47, 61, 119, 158, 141, 62, 85, 244, 253, 62, 239, 170, 114, 190, 92, 98, 10, 191, 186, 109, 213, 189, 248, 219, 162, 61, 122, 246, 241, 62, 203, 200, 24, 60, 4, 241, 75, 61, 96, 246, 36, 63, 15, 210, 50, 191, 16, 236, 215, 190, 10, 18, 112, 191, 113, 233, 218, 190, 198, 232, 36, 62, 16, 5, 245, 62, 34, 62, 184, 190, 153, 83, 137, 191, 97, 25, 11, 62, 178, 162, 0, 63, 194, 62, 213, 190, 80, 24, 0, 61, 82, 111, 52, 62, 17, 239, 217, 62, 13, 175, 27, 190, 58, 220, 175, 62, 5, 86, 87, 63, 122, 138, 136, 190, 16, 133, 203, 190, 63, 65, 182, 62, 158, 89, 197, 189, 191, 73, 91, 191, 202, 33, 113, 189, 66, 61, 116, 62, 1, 238, 145, 190, 117, 80, 90, 62, 214, 19, 24, 190, 182, 169, 217, 190, 32, 244, 196, 62, 121, 81, 212, 60, 28, 42, 186, 61, 225, 108, 36, 62, 113, 86, 210, 61, 252, 27, 162, 190, 6, 185, 143, 189, 221, 172, 172, 61, 120, 141, 151, 190, 126, 184, 18, 62, 102, 244, 24, 62, 133, 183, 42, 189, 83, 154, 227, 61, 124, 184, 139, 190, 89, 250, 148, 61, 102, 55, 6, 62, 168, 23, 149, 190, 82, 57, 177, 62, 19, 67, 40, 190, 60, 140, 172, 62, 61, 191, 126, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 158, 177, 189, 118, 87, 47, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 137, 146, 63, 37, 118, 105, 191, 1, 226, 131, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {19, 89, 108, 64, 70, 22, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0079/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}