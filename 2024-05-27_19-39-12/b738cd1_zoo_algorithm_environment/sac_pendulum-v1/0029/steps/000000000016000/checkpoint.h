// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 228, 90, 63, 60, 130, 51, 63, 246, 109, 253, 62, 108, 122, 59, 61, 133, 232, 32, 191, 62, 120, 8, 190, 169, 44, 161, 191, 189, 188, 133, 190, 56, 167, 163, 188, 94, 169, 98, 191, 244, 73, 163, 62, 82, 2, 242, 61, 227, 227, 230, 62, 191, 153, 38, 191, 0, 236, 39, 191, 77, 54, 42, 63, 60, 116, 94, 63, 151, 141, 170, 62, 21, 102, 78, 63, 15, 70, 1, 189, 255, 95, 78, 189, 36, 52, 235, 190, 181, 30, 58, 62, 128, 248, 12, 63, 162, 229, 14, 189, 42, 52, 122, 62, 168, 91, 139, 62, 243, 81, 197, 62, 249, 211, 183, 63, 217, 100, 157, 62, 150, 156, 156, 62, 122, 76, 157, 62, 74, 67, 107, 62, 250, 155, 35, 191, 169, 176, 127, 63, 48, 183, 57, 189, 167, 31, 183, 190, 168, 153, 238, 62, 223, 14, 12, 191, 103, 194, 16, 191, 5, 219, 245, 63, 113, 251, 201, 62, 194, 179, 202, 62, 178, 254, 136, 190, 214, 53, 176, 62, 126, 212, 51, 191, 180, 112, 57, 63, 255, 53, 99, 62, 148, 99, 165, 62, 8, 10, 186, 63, 141, 189, 149, 189, 58, 233, 81, 62, 242, 155, 151, 191, 89, 171, 214, 62, 128, 157, 13, 63, 198, 184, 136, 63, 15, 26, 196, 62, 188, 141, 159, 190, 27, 162, 14, 192, 145, 56, 22, 191, 226, 174, 23, 63, 239, 104, 98, 62, 200, 172, 31, 188, 6, 144, 134, 61, 69, 3, 14, 191, 24, 153, 243, 62, 76, 85, 204, 62, 92, 229, 141, 63, 138, 108, 239, 190, 164, 45, 225, 190, 168, 151, 90, 191, 45, 228, 21, 191, 226, 128, 2, 191, 87, 240, 20, 191, 217, 170, 189, 61, 50, 103, 51, 191, 33, 149, 9, 62, 108, 211, 21, 190, 78, 75, 190, 190, 23, 40, 177, 62, 40, 207, 11, 63, 195, 124, 96, 63, 110, 57, 111, 191, 234, 38, 169, 190, 122, 191, 175, 62, 165, 26, 30, 63, 190, 104, 169, 190, 81, 50, 139, 189, 27, 203, 236, 63, 111, 146, 217, 62, 22, 83, 181, 62, 114, 145, 92, 191, 227, 228, 15, 61, 169, 81, 166, 62, 62, 196, 156, 191, 191, 58, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 253, 234, 190, 8, 250, 186, 62, 193, 77, 167, 59, 206, 16, 115, 63, 237, 131, 196, 190, 51, 173, 156, 189, 86, 155, 173, 187, 221, 6, 213, 190, 76, 101, 39, 62, 48, 122, 17, 63, 107, 2, 17, 190, 80, 93, 85, 62, 188, 96, 215, 190, 56, 183, 161, 190, 169, 57, 105, 61, 147, 170, 33, 191, 151, 169, 196, 60, 231, 67, 218, 189, 150, 73, 67, 191, 37, 192, 236, 60, 32, 19, 137, 62, 234, 10, 21, 190, 38, 85, 235, 61, 71, 31, 207, 189, 110, 73, 198, 187, 248, 117, 21, 191, 171, 157, 101, 187, 190, 129, 11, 191, 69, 219, 222, 188, 180, 120, 160, 61, 158, 156, 49, 62, 19, 156, 255, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 38, 76, 191, 67, 236, 158, 62, 219, 143, 221, 62, 148, 100, 121, 62, 24, 19, 158, 61, 223, 146, 226, 190, 15, 134, 233, 190, 24, 226, 115, 62, 213, 229, 244, 61, 6, 205, 87, 189, 108, 14, 197, 190, 213, 217, 228, 189, 27, 241, 45, 189, 67, 110, 225, 60, 231, 231, 159, 190, 89, 177, 179, 62, 242, 139, 66, 191, 251, 157, 65, 189, 19, 111, 1, 191, 189, 8, 72, 62, 138, 29, 22, 191, 10, 61, 185, 189, 2, 22, 219, 188, 209, 157, 222, 61, 194, 85, 23, 63, 28, 223, 65, 62, 71, 12, 146, 62, 112, 128, 115, 62, 162, 72, 151, 189, 92, 166, 153, 61, 117, 185, 252, 61, 18, 89, 192, 62, 146, 136, 68, 61, 232, 0, 20, 190, 219, 158, 238, 61, 92, 240, 60, 190, 240, 139, 213, 61, 239, 69, 214, 189, 1, 236, 228, 188, 130, 109, 219, 189, 194, 1, 245, 61, 210, 172, 84, 187, 129, 26, 172, 61, 133, 217, 7, 62, 144, 67, 5, 190, 213, 106, 6, 62, 1, 126, 194, 59, 55, 165, 46, 190, 219, 250, 159, 187, 25, 252, 9, 61, 186, 255, 172, 188, 43, 220, 199, 60, 235, 9, 174, 189, 255, 55, 7, 62, 76, 6, 143, 60, 148, 119, 118, 188, 54, 103, 73, 189, 16, 60, 168, 189, 35, 244, 34, 189, 156, 230, 235, 61, 233, 26, 3, 190, 2, 46, 22, 190, 234, 164, 63, 190, 253, 127, 27, 60, 35, 188, 208, 61, 204, 230, 148, 59, 100, 31, 25, 62, 25, 36, 253, 189, 72, 74, 176, 61, 46, 136, 76, 61, 40, 98, 28, 190, 171, 79, 192, 60, 92, 232, 2, 61, 115, 104, 235, 58, 130, 13, 17, 61, 170, 199, 36, 190, 31, 28, 17, 189, 250, 120, 29, 190, 170, 129, 224, 188, 230, 145, 189, 189, 145, 194, 150, 189, 159, 222, 226, 189, 109, 252, 11, 62, 232, 207, 24, 190, 193, 154, 190, 187, 109, 183, 68, 190, 92, 57, 240, 189, 238, 141, 184, 189, 62, 28, 83, 61, 53, 89, 93, 61, 172, 96, 158, 61, 180, 216, 0, 62, 109, 58, 36, 62, 187, 36, 43, 189, 192, 158, 52, 61, 96, 218, 62, 190, 89, 27, 4, 63, 217, 58, 104, 191, 64, 112, 138, 190, 240, 21, 70, 189, 233, 197, 50, 190, 111, 115, 151, 61, 136, 29, 238, 62, 237, 103, 75, 60, 106, 240, 134, 189, 255, 129, 75, 61, 128, 15, 58, 62, 228, 14, 203, 189, 98, 182, 168, 62, 234, 208, 71, 59, 107, 44, 166, 189, 86, 30, 121, 190, 20, 180, 177, 62, 3, 198, 187, 190, 35, 177, 217, 62, 103, 152, 28, 61, 187, 192, 152, 62, 149, 223, 107, 61, 196, 63, 215, 61, 74, 162, 131, 190, 63, 231, 0, 191, 39, 57, 168, 61, 17, 124, 73, 188, 249, 18, 76, 190, 247, 184, 3, 191, 161, 51, 119, 61, 179, 55, 90, 191, 71, 72, 137, 191, 8, 107, 135, 62, 137, 42, 12, 62, 39, 50, 0, 190, 235, 62, 216, 61, 177, 171, 131, 61, 47, 216, 16, 62, 153, 13, 193, 188, 136, 194, 129, 61, 221, 230, 253, 61, 101, 127, 26, 62, 173, 137, 190, 61, 65, 170, 70, 62, 216, 250, 150, 191, 102, 104, 47, 62, 63, 52, 18, 62, 247, 204, 132, 190, 186, 213, 51, 62, 151, 9, 205, 187, 126, 60, 33, 62, 121, 143, 148, 190, 196, 176, 109, 62, 177, 196, 24, 62, 79, 148, 179, 188, 208, 250, 204, 190, 153, 11, 74, 190, 63, 200, 27, 190, 162, 228, 140, 62, 12, 84, 4, 60, 45, 128, 45, 190, 137, 162, 7, 62, 70, 199, 147, 60, 175, 253, 128, 190, 198, 218, 253, 190, 32, 218, 87, 61, 46, 104, 142, 190, 229, 53, 31, 190, 77, 249, 95, 62, 236, 131, 147, 190, 189, 65, 64, 62, 152, 48, 179, 61, 37, 80, 128, 190, 190, 74, 180, 190, 71, 146, 42, 188, 223, 161, 176, 61, 9, 223, 25, 62, 125, 83, 74, 189, 245, 19, 204, 62, 156, 59, 222, 190, 245, 73, 220, 61, 238, 162, 1, 63, 252, 200, 223, 191, 177, 220, 72, 62, 9, 111, 180, 62, 139, 66, 226, 61, 215, 36, 108, 60, 56, 32, 93, 62, 219, 239, 170, 62, 164, 26, 55, 62, 42, 82, 38, 190, 216, 235, 175, 62, 165, 69, 64, 59, 3, 67, 23, 191, 36, 112, 79, 62, 69, 149, 166, 62, 247, 166, 64, 62, 208, 188, 57, 62, 203, 251, 195, 62, 177, 41, 227, 60, 96, 11, 58, 190, 156, 57, 14, 63, 119, 20, 213, 61, 151, 240, 175, 61, 68, 47, 194, 188, 239, 231, 6, 61, 203, 60, 4, 62, 138, 3, 206, 189, 135, 218, 224, 61, 219, 81, 218, 191, 139, 56, 122, 189, 146, 198, 233, 191, 161, 194, 203, 62, 152, 158, 168, 191, 155, 25, 189, 62, 153, 28, 29, 62, 36, 170, 33, 189, 179, 111, 116, 190, 68, 236, 140, 62, 42, 114, 141, 61, 24, 101, 204, 62, 198, 106, 65, 190, 215, 88, 24, 190, 70, 154, 40, 190, 231, 202, 10, 62, 27, 92, 119, 191, 226, 103, 21, 190, 165, 82, 2, 60, 228, 53, 159, 61, 169, 83, 135, 189, 237, 49, 210, 189, 180, 134, 252, 189, 249, 122, 141, 189, 156, 224, 239, 188, 76, 143, 12, 62, 13, 25, 67, 190, 75, 225, 175, 189, 176, 188, 8, 190, 59, 232, 128, 61, 87, 43, 55, 61, 70, 234, 119, 188, 186, 90, 140, 60, 55, 226, 246, 60, 50, 14, 225, 189, 244, 198, 21, 190, 97, 98, 57, 190, 251, 235, 66, 189, 217, 212, 165, 188, 72, 116, 25, 188, 115, 255, 173, 61, 97, 4, 147, 189, 238, 7, 134, 184, 220, 17, 243, 189, 107, 89, 12, 190, 49, 74, 156, 61, 192, 251, 131, 189, 31, 105, 197, 61, 247, 221, 67, 190, 239, 239, 41, 189, 18, 218, 148, 189, 48, 235, 33, 190, 2, 30, 132, 188, 68, 197, 214, 187, 98, 106, 69, 190, 46, 215, 129, 189, 0, 252, 97, 61, 244, 46, 249, 188, 68, 193, 213, 59, 115, 224, 188, 61, 245, 189, 162, 61, 88, 203, 215, 189, 208, 197, 23, 190, 86, 183, 11, 189, 219, 124, 248, 188, 113, 72, 11, 190, 80, 183, 26, 60, 63, 188, 165, 189, 16, 51, 188, 189, 108, 1, 27, 190, 122, 134, 58, 61, 116, 16, 187, 189, 157, 139, 170, 60, 187, 42, 18, 61, 17, 228, 14, 190, 11, 45, 207, 61, 193, 227, 153, 61, 122, 166, 4, 62, 170, 111, 209, 59, 196, 52, 112, 189, 161, 211, 113, 61, 111, 254, 163, 60, 132, 56, 145, 189, 225, 207, 183, 61, 148, 231, 135, 60, 48, 125, 21, 191, 84, 231, 64, 191, 163, 239, 30, 61, 97, 74, 133, 62, 111, 77, 109, 62, 146, 239, 12, 62, 203, 8, 111, 189, 229, 92, 97, 190, 207, 139, 6, 62, 183, 243, 92, 190, 45, 212, 152, 189, 92, 210, 104, 187, 126, 225, 84, 62, 143, 189, 1, 191, 243, 96, 196, 189, 99, 1, 203, 189, 193, 48, 219, 191, 155, 235, 8, 62, 222, 5, 210, 61, 97, 131, 100, 62, 217, 193, 205, 61, 159, 156, 109, 188, 224, 64, 122, 62, 155, 248, 44, 61, 147, 81, 194, 61, 144, 16, 101, 62, 195, 97, 36, 62, 154, 40, 171, 191, 224, 2, 36, 62, 214, 79, 145, 62, 33, 246, 57, 191, 145, 229, 231, 188, 22, 137, 97, 191, 80, 80, 135, 191, 225, 234, 171, 62, 108, 0, 190, 61, 23, 22, 23, 63, 172, 151, 171, 61, 30, 153, 178, 190, 10, 81, 12, 191, 248, 231, 77, 191, 251, 24, 217, 190, 25, 249, 250, 189, 92, 235, 28, 190, 110, 220, 241, 190, 191, 193, 195, 61, 36, 108, 37, 62, 30, 38, 132, 191, 251, 128, 33, 189, 128, 77, 222, 189, 124, 176, 148, 62, 110, 41, 194, 190, 140, 248, 140, 61, 252, 76, 71, 61, 224, 235, 123, 191, 185, 36, 146, 189, 175, 215, 76, 190, 174, 153, 63, 62, 25, 228, 36, 62, 6, 134, 96, 190, 189, 8, 156, 190, 182, 239, 86, 62, 235, 108, 175, 190, 196, 240, 143, 189, 42, 75, 90, 189, 148, 121, 174, 190, 57, 156, 149, 62, 7, 84, 152, 190, 199, 151, 187, 62, 102, 9, 228, 188, 200, 253, 210, 61, 170, 123, 255, 190, 50, 238, 202, 188, 152, 254, 202, 190, 39, 113, 11, 61, 192, 124, 169, 62, 74, 122, 148, 61, 148, 66, 242, 62, 96, 148, 170, 190, 32, 76, 197, 62, 95, 254, 81, 189, 214, 67, 214, 189, 81, 244, 218, 61, 215, 110, 142, 62, 56, 139, 138, 61, 11, 1, 55, 189, 37, 92, 65, 190, 127, 243, 31, 190, 174, 239, 254, 61, 164, 172, 121, 63, 229, 93, 33, 60, 227, 78, 195, 60, 62, 151, 79, 190, 184, 166, 127, 62, 235, 21, 138, 189, 65, 187, 42, 190, 71, 123, 1, 62, 3, 69, 133, 189, 247, 26, 146, 189, 44, 9, 6, 190, 146, 213, 1, 190, 35, 212, 8, 190, 145, 236, 4, 190, 236, 130, 13, 62, 174, 129, 80, 61, 181, 221, 13, 190, 21, 3, 156, 61, 54, 95, 180, 61, 247, 34, 194, 61, 229, 82, 32, 60, 118, 105, 249, 189, 140, 178, 196, 189, 62, 101, 42, 190, 251, 234, 156, 61, 70, 115, 217, 61, 135, 134, 33, 189, 138, 113, 142, 189, 123, 179, 248, 189, 37, 214, 174, 61, 37, 144, 17, 190, 172, 107, 27, 62, 135, 205, 120, 61, 23, 75, 32, 190, 7, 111, 12, 190, 20, 212, 248, 61, 134, 33, 228, 189, 171, 123, 38, 191, 16, 117, 168, 60, 242, 119, 89, 62, 124, 154, 39, 60, 37, 182, 138, 190, 33, 43, 171, 189, 92, 4, 94, 190, 212, 127, 13, 62, 126, 248, 246, 189, 195, 173, 220, 188, 163, 65, 59, 190, 158, 255, 105, 62, 85, 247, 125, 61, 168, 153, 226, 191, 59, 229, 150, 189, 218, 76, 247, 191, 218, 43, 20, 62, 168, 119, 110, 190, 86, 60, 159, 62, 36, 205, 3, 62, 109, 171, 245, 189, 29, 49, 3, 63, 36, 149, 144, 62, 176, 185, 137, 62, 16, 254, 197, 62, 135, 212, 124, 61, 253, 78, 27, 62, 32, 224, 216, 190, 50, 229, 75, 62, 130, 174, 151, 191, 81, 245, 73, 190, 130, 124, 227, 188, 6, 162, 161, 189, 124, 131, 156, 190, 137, 142, 225, 188, 34, 25, 83, 62, 165, 96, 24, 190, 197, 220, 82, 60, 233, 135, 25, 62, 204, 126, 7, 190, 111, 35, 5, 62, 159, 222, 105, 189, 50, 243, 33, 190, 154, 217, 102, 62, 218, 53, 147, 62, 206, 31, 48, 62, 112, 71, 171, 189, 41, 81, 181, 62, 213, 239, 32, 62, 48, 101, 213, 189, 118, 81, 222, 59, 220, 14, 134, 191, 15, 208, 137, 190, 107, 111, 206, 60, 16, 85, 14, 63, 104, 225, 181, 190, 55, 118, 18, 61, 149, 183, 230, 62, 175, 30, 46, 62, 89, 206, 238, 190, 178, 199, 255, 187, 58, 162, 40, 62, 241, 203, 126, 190, 195, 128, 16, 192, 147, 18, 182, 190, 173, 56, 128, 62, 25, 238, 192, 61, 131, 167, 119, 60, 115, 245, 199, 62, 165, 186, 60, 189, 92, 43, 126, 62, 42, 251, 8, 189, 162, 213, 131, 62, 41, 20, 145, 190, 74, 202, 34, 190, 107, 89, 221, 190, 245, 6, 125, 189, 175, 5, 105, 190, 166, 74, 169, 189, 112, 105, 80, 62, 90, 76, 187, 189, 163, 191, 171, 62, 205, 252, 86, 191, 99, 226, 119, 62, 15, 239, 94, 62, 94, 226, 146, 189, 255, 141, 2, 189, 250, 174, 232, 189, 44, 255, 99, 62, 95, 44, 219, 189, 184, 61, 139, 61, 151, 64, 46, 63, 19, 151, 71, 189, 92, 191, 50, 190, 15, 141, 69, 62, 131, 235, 150, 62, 127, 140, 16, 63, 4, 220, 227, 60, 104, 167, 212, 189, 203, 42, 132, 190, 81, 164, 194, 190, 157, 66, 240, 61, 230, 134, 206, 62, 64, 39, 175, 188, 176, 26, 83, 60, 85, 221, 159, 189, 100, 41, 151, 62, 65, 140, 91, 62, 249, 8, 45, 61, 14, 173, 177, 190, 207, 178, 124, 62, 79, 184, 68, 191, 229, 176, 149, 62, 190, 125, 171, 190, 39, 201, 180, 62, 171, 43, 21, 190, 10, 148, 140, 62, 63, 91, 58, 62, 178, 251, 54, 61, 173, 98, 16, 62, 253, 223, 67, 190, 62, 89, 139, 188, 78, 244, 158, 60, 201, 62, 88, 191, 238, 160, 47, 62, 20, 159, 140, 190, 92, 199, 113, 190, 4, 245, 59, 190, 142, 9, 192, 62, 70, 254, 137, 62, 20, 64, 187, 62, 68, 156, 81, 189, 0, 213, 81, 190, 111, 105, 22, 63, 5, 60, 91, 62, 201, 94, 74, 190, 164, 238, 32, 62, 54, 171, 62, 61, 123, 114, 147, 62, 225, 1, 154, 189, 117, 25, 133, 62, 209, 95, 235, 191, 88, 219, 172, 61, 210, 174, 174, 191, 59, 25, 128, 62, 114, 51, 71, 191, 169, 141, 131, 59, 243, 98, 42, 62, 100, 101, 73, 61, 2, 101, 88, 62, 13, 217, 52, 62, 69, 210, 30, 189, 48, 157, 112, 62, 40, 254, 64, 189, 52, 92, 99, 188, 71, 120, 167, 190, 194, 65, 120, 62, 101, 245, 118, 191, 108, 59, 134, 190, 139, 38, 93, 189, 95, 55, 227, 190, 114, 35, 202, 61, 153, 210, 45, 61, 82, 48, 169, 189, 52, 135, 108, 62, 19, 238, 212, 190, 126, 5, 137, 189, 56, 187, 151, 61, 132, 143, 132, 61, 220, 47, 4, 190, 184, 139, 147, 190, 170, 218, 169, 190, 159, 185, 164, 187, 141, 103, 104, 61, 77, 69, 90, 190, 6, 27, 222, 62, 23, 197, 139, 189, 68, 105, 197, 62, 224, 80, 179, 190, 17, 189, 83, 190, 174, 210, 123, 62, 85, 220, 41, 189, 49, 223, 25, 62, 31, 41, 141, 190, 48, 28, 86, 62, 114, 232, 21, 190, 175, 62, 7, 62, 127, 2, 218, 62, 178, 189, 31, 190, 199, 246, 203, 61, 90, 94, 118, 62, 163, 125, 112, 61, 52, 113, 200, 190, 205, 19, 15, 62, 250, 22, 136, 62, 180, 150, 26, 61, 74, 84, 124, 190, 222, 142, 71, 190, 52, 184, 223, 190, 146, 185, 155, 62, 216, 59, 184, 60, 24, 190, 18, 61, 161, 121, 52, 61, 169, 23, 101, 62, 187, 191, 3, 191, 98, 70, 130, 62, 196, 55, 253, 189, 173, 107, 172, 62, 48, 212, 195, 188, 34, 229, 133, 60, 202, 178, 24, 190, 23, 191, 244, 191, 147, 78, 76, 62, 86, 201, 23, 190, 208, 209, 165, 190, 88, 240, 144, 191, 107, 49, 98, 62, 208, 243, 239, 62, 3, 46, 76, 62, 252, 51, 39, 62, 157, 54, 121, 191, 128, 43, 232, 61, 109, 88, 181, 59, 89, 157, 146, 191, 65, 191, 143, 62, 10, 43, 199, 189, 234, 255, 25, 189, 145, 36, 85, 62, 31, 250, 38, 62, 57, 125, 48, 62, 193, 126, 189, 190, 246, 224, 10, 191, 14, 177, 156, 190, 212, 220, 111, 190, 229, 21, 173, 62, 170, 12, 129, 61, 248, 116, 103, 62, 100, 141, 80, 62, 115, 224, 71, 61, 197, 169, 243, 190, 212, 104, 27, 62, 247, 148, 143, 188, 242, 145, 64, 62, 136, 211, 145, 62, 140, 5, 19, 190, 159, 242, 61, 187, 74, 84, 179, 59, 212, 28, 49, 62, 111, 102, 49, 189, 161, 150, 200, 61, 204, 66, 76, 190, 93, 22, 239, 61, 49, 141, 197, 61, 206, 46, 74, 62, 83, 179, 177, 190, 16, 130, 81, 189, 231, 222, 109, 190, 181, 133, 95, 62, 248, 49, 189, 62, 150, 159, 75, 61, 239, 147, 6, 63, 37, 178, 133, 190, 235, 21, 248, 62, 206, 142, 144, 186, 253, 183, 76, 61, 56, 41, 99, 190, 126, 27, 174, 190, 140, 171, 3, 190, 135, 141, 129, 190, 3, 222, 24, 189, 146, 249, 189, 189, 74, 10, 193, 61, 144, 101, 13, 191, 113, 171, 179, 62, 18, 59, 199, 190, 51, 225, 234, 191, 149, 109, 181, 60, 121, 7, 101, 190, 118, 148, 210, 190, 21, 175, 149, 191, 67, 30, 100, 62, 19, 65, 2, 61, 253, 58, 28, 62, 53, 50, 29, 63, 212, 235, 50, 191, 218, 214, 127, 188, 38, 233, 177, 62, 18, 183, 237, 189, 112, 24, 39, 190, 164, 184, 182, 62, 178, 154, 128, 191, 52, 188, 93, 191, 125, 46, 166, 62, 155, 194, 192, 189, 144, 187, 252, 62, 223, 237, 249, 189, 1, 190, 251, 60, 192, 249, 160, 190, 94, 214, 146, 61, 3, 75, 81, 191, 164, 179, 50, 190, 185, 7, 148, 190, 168, 167, 228, 62, 83, 139, 18, 191, 77, 231, 2, 190, 82, 69, 251, 62, 63, 254, 239, 191, 20, 83, 7, 188, 230, 203, 144, 62, 14, 243, 195, 61, 205, 254, 166, 61, 200, 65, 13, 62, 37, 230, 238, 61, 11, 86, 160, 189, 90, 241, 33, 190, 128, 160, 242, 62, 119, 168, 164, 61, 29, 25, 132, 191, 188, 246, 235, 62, 122, 246, 208, 62, 189, 220, 117, 190, 144, 218, 4, 62, 114, 29, 111, 61, 216, 147, 129, 62, 144, 21, 206, 59, 103, 188, 21, 190, 188, 86, 46, 191, 107, 78, 254, 190, 100, 187, 24, 191, 192, 85, 17, 190, 205, 221, 173, 190, 54, 37, 200, 62, 131, 203, 138, 62, 103, 176, 56, 61, 155, 110, 100, 190, 202, 160, 41, 190, 15, 98, 228, 61, 95, 232, 163, 61, 114, 164, 24, 186, 143, 11, 96, 62, 80, 117, 141, 190, 113, 117, 1, 191, 9, 7, 36, 188, 206, 222, 134, 62, 159, 9, 61, 190, 25, 2, 78, 62, 88, 218, 189, 190, 8, 189, 166, 62, 0, 16, 79, 62, 135, 209, 3, 62, 164, 203, 141, 188, 201, 233, 245, 189, 45, 143, 115, 190, 98, 20, 248, 188, 83, 42, 126, 62, 103, 119, 27, 62, 235, 60, 43, 63, 187, 171, 61, 190, 46, 17, 154, 62, 191, 223, 73, 62, 38, 33, 8, 62, 195, 199, 181, 188, 7, 220, 7, 190, 246, 126, 119, 190, 191, 77, 222, 190, 48, 164, 188, 189, 241, 236, 66, 61, 81, 146, 77, 62, 52, 115, 10, 190, 35, 49, 40, 62, 138, 61, 208, 190, 241, 143, 11, 192, 41, 24, 157, 62, 69, 13, 133, 189, 159, 174, 65, 189, 31, 120, 129, 191, 106, 121, 80, 62, 112, 214, 61, 62, 98, 14, 41, 62, 211, 64, 221, 62, 253, 33, 210, 59, 80, 132, 189, 190, 83, 218, 1, 62, 18, 236, 152, 189, 168, 116, 232, 190, 117, 63, 34, 190, 65, 21, 112, 62, 169, 43, 139, 62, 102, 34, 9, 189, 15, 192, 210, 188, 214, 109, 171, 61, 159, 186, 29, 59, 138, 34, 122, 62, 86, 98, 160, 189, 246, 106, 59, 190, 35, 31, 100, 62, 4, 205, 124, 188, 166, 168, 73, 62, 86, 42, 255, 189, 135, 200, 198, 62, 156, 231, 201, 190, 41, 187, 45, 190, 147, 102, 234, 190, 164, 7, 6, 61, 49, 11, 190, 190, 53, 164, 129, 190, 107, 82, 208, 190, 168, 4, 198, 188, 84, 135, 25, 62, 26, 74, 79, 190, 122, 135, 27, 62, 151, 210, 150, 190, 194, 251, 236, 61, 233, 144, 49, 62, 203, 119, 41, 191, 144, 15, 214, 60, 136, 96, 114, 190, 200, 237, 232, 61, 248, 13, 103, 191, 191, 166, 49, 191, 84, 164, 136, 188, 168, 195, 114, 190, 222, 243, 160, 62, 27, 51, 36, 190, 11, 40, 163, 190, 192, 17, 207, 190, 189, 57, 37, 190, 86, 242, 62, 190, 105, 184, 215, 189, 199, 124, 63, 190, 195, 198, 78, 62, 227, 98, 166, 189, 175, 99, 16, 189, 196, 192, 13, 63, 0, 167, 172, 189, 37, 7, 31, 62, 41, 201, 148, 61, 157, 25, 133, 60, 155, 87, 63, 62, 180, 73, 29, 190, 31, 38, 168, 189, 38, 171, 222, 188, 30, 218, 169, 190, 14, 203, 163, 61, 29, 132, 251, 61, 10, 153, 183, 189, 224, 60, 117, 61, 78, 121, 137, 62, 230, 181, 107, 188, 61, 120, 15, 62, 211, 159, 152, 62, 8, 171, 79, 60, 187, 62, 197, 190, 243, 160, 150, 62, 90, 106, 104, 189, 170, 194, 180, 61, 246, 3, 38, 189, 49, 75, 134, 61, 136, 109, 217, 60, 94, 233, 171, 61, 141, 184, 36, 62, 85, 194, 243, 61, 207, 165, 86, 62, 71, 83, 2, 190, 45, 47, 223, 62, 47, 217, 112, 190, 67, 93, 199, 60, 220, 29, 163, 190, 164, 130, 186, 62, 3, 96, 170, 189, 146, 141, 47, 62, 106, 81, 62, 190, 38, 235, 176, 190, 40, 183, 82, 190, 136, 187, 252, 60, 95, 194, 34, 191, 111, 40, 37, 62, 167, 166, 147, 190, 126, 127, 58, 190, 28, 160, 63, 190, 203, 236, 150, 186, 67, 39, 221, 189, 103, 169, 205, 190, 215, 186, 209, 190, 255, 92, 178, 62, 254, 64, 130, 191, 130, 33, 132, 190, 83, 14, 162, 61, 75, 173, 187, 61, 201, 115, 206, 191, 182, 252, 135, 60, 194, 122, 216, 190, 63, 106, 11, 190, 2, 145, 158, 61, 53, 236, 12, 62, 94, 57, 69, 190, 250, 10, 2, 191, 33, 135, 158, 62, 158, 134, 158, 189, 209, 60, 88, 62, 206, 121, 86, 59, 119, 90, 214, 61, 60, 226, 181, 61, 167, 206, 86, 62, 43, 106, 54, 61, 101, 232, 159, 190, 126, 83, 0, 62, 214, 25, 32, 63, 250, 255, 157, 189, 180, 144, 169, 190, 63, 45, 20, 62, 25, 232, 213, 61, 56, 4, 21, 62, 69, 21, 177, 189, 131, 65, 92, 189, 87, 118, 89, 61, 104, 156, 20, 61, 118, 135, 42, 190, 235, 253, 122, 61, 182, 45, 24, 190, 207, 124, 17, 190, 137, 219, 6, 61, 54, 7, 93, 189, 59, 28, 196, 189, 254, 165, 31, 190, 212, 8, 23, 62, 3, 81, 72, 190, 34, 93, 136, 61, 191, 134, 239, 187, 89, 54, 233, 189, 28, 13, 18, 62, 4, 218, 53, 190, 73, 29, 35, 190, 69, 71, 7, 190, 113, 17, 248, 61, 132, 142, 26, 189, 92, 93, 27, 189, 98, 235, 184, 61, 26, 150, 158, 61, 45, 188, 227, 189, 8, 72, 134, 189, 164, 68, 58, 190, 195, 247, 177, 61, 143, 114, 100, 61, 250, 97, 211, 62, 252, 87, 123, 187, 254, 75, 156, 62, 206, 87, 60, 62, 23, 231, 204, 190, 164, 56, 14, 62, 71, 172, 18, 61, 199, 43, 216, 189, 198, 116, 22, 62, 81, 2, 162, 62, 55, 166, 44, 62, 246, 78, 114, 62, 240, 94, 40, 62, 62, 16, 40, 190, 80, 194, 114, 62, 160, 22, 129, 190, 158, 153, 201, 62, 242, 175, 206, 189, 99, 89, 118, 62, 121, 250, 124, 190, 8, 254, 89, 61, 130, 1, 111, 62, 24, 4, 28, 62, 111, 0, 59, 189, 128, 250, 1, 190, 29, 221, 78, 190, 252, 254, 46, 62, 3, 219, 56, 191, 211, 166, 26, 59, 138, 121, 149, 60, 119, 47, 47, 189, 117, 226, 238, 189, 72, 101, 239, 190, 192, 254, 34, 62, 86, 10, 232, 190, 168, 225, 235, 190, 100, 187, 177, 62, 62, 124, 51, 191, 96, 219, 71, 190, 34, 198, 223, 61, 9, 224, 255, 188, 158, 223, 226, 191, 93, 9, 99, 62, 247, 122, 239, 190, 49, 199, 169, 189, 130, 174, 165, 190, 94, 119, 227, 61, 89, 122, 67, 189, 103, 200, 196, 190, 142, 33, 179, 62, 24, 47, 144, 189, 137, 148, 160, 61, 186, 252, 38, 60, 102, 76, 43, 62, 128, 207, 223, 60, 182, 48, 128, 61, 4, 64, 1, 59, 219, 115, 172, 190, 230, 223, 187, 61, 93, 34, 53, 63, 237, 152, 123, 189, 6, 74, 75, 190, 65, 102, 63, 62, 35, 77, 96, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 185, 93, 62, 192, 128, 168, 189, 61, 25, 87, 61, 213, 213, 132, 190, 228, 89, 160, 189, 251, 142, 80, 62, 252, 125, 42, 62, 66, 128, 40, 60, 86, 210, 39, 190, 89, 181, 5, 62, 232, 62, 132, 189, 253, 142, 55, 190, 141, 108, 176, 189, 83, 79, 53, 62, 62, 165, 169, 61, 25, 234, 36, 190, 42, 200, 4, 189, 158, 252, 110, 62, 221, 19, 224, 58, 102, 255, 3, 62, 132, 183, 179, 189, 158, 162, 239, 61, 32, 175, 64, 62, 47, 238, 202, 189, 133, 76, 203, 61, 190, 164, 181, 189, 134, 139, 8, 60, 49, 212, 190, 61, 204, 112, 190, 189, 112, 168, 32, 189, 185, 194, 66, 188, 22, 66, 62, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 199, 225, 190, 246, 132, 4, 190, 129, 28, 175, 61, 150, 246, 92, 63, 223, 8, 96, 190, 142, 244, 173, 62, 138, 237, 234, 190, 36, 228, 200, 189, 243, 121, 146, 61, 248, 106, 69, 62, 251, 254, 45, 63, 59, 102, 138, 62, 71, 16, 128, 189, 160, 39, 210, 190, 56, 64, 28, 63, 219, 118, 212, 62, 172, 195, 31, 191, 204, 177, 35, 191, 152, 69, 150, 62, 57, 19, 139, 63, 165, 228, 156, 62, 54, 4, 110, 63, 241, 227, 2, 63, 167, 81, 176, 62, 218, 249, 119, 62, 195, 29, 29, 191, 89, 81, 169, 62, 165, 98, 134, 190, 117, 211, 89, 191, 21, 216, 192, 189, 22, 195, 169, 190, 78, 162, 112, 191, 23, 55, 173, 189, 97, 65, 140, 61, 37, 140, 103, 61, 138, 25, 114, 62, 101, 105, 93, 190, 25, 106, 11, 190, 99, 193, 150, 190, 123, 218, 238, 61, 110, 204, 203, 60, 188, 16, 180, 190, 159, 171, 76, 61, 32, 55, 2, 63, 118, 133, 226, 61, 4, 199, 124, 60, 3, 147, 71, 61, 250, 76, 60, 62, 84, 220, 82, 62, 186, 120, 38, 190, 108, 2, 187, 62, 82, 6, 246, 60, 252, 243, 36, 62, 44, 26, 53, 62, 217, 18, 180, 190, 0, 246, 24, 62, 36, 143, 9, 191, 24, 165, 11, 62, 235, 207, 224, 60, 131, 215, 152, 190, 182, 108, 76, 61, 99, 157, 78, 189, 228, 186, 207, 187, 250, 61, 9, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 4, 40, 190, 45, 122, 117, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {92, 73, 84, 63, 213, 11, 236, 190, 70, 109, 246, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 214, 238, 63, 218, 116, 136, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}