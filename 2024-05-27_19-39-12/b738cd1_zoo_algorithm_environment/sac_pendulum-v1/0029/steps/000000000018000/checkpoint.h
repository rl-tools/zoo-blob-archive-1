// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 209, 86, 63, 96, 182, 44, 63, 94, 13, 14, 63, 238, 85, 17, 61, 84, 187, 43, 191, 222, 110, 223, 189, 101, 220, 162, 191, 75, 27, 180, 190, 230, 101, 46, 60, 221, 149, 103, 191, 131, 35, 167, 62, 43, 213, 9, 62, 79, 98, 233, 62, 3, 107, 40, 191, 232, 234, 45, 191, 128, 146, 42, 63, 3, 18, 99, 63, 127, 196, 191, 62, 100, 142, 84, 63, 52, 100, 205, 189, 20, 108, 35, 189, 164, 116, 20, 191, 145, 41, 77, 62, 126, 30, 8, 63, 165, 104, 51, 189, 4, 13, 130, 62, 235, 167, 205, 62, 101, 153, 192, 62, 26, 244, 190, 63, 216, 28, 145, 62, 146, 194, 143, 62, 191, 33, 160, 62, 3, 86, 156, 62, 197, 91, 20, 191, 17, 124, 142, 63, 130, 156, 230, 189, 31, 47, 172, 190, 13, 66, 19, 63, 233, 252, 25, 191, 198, 230, 46, 191, 39, 12, 247, 63, 69, 13, 201, 62, 147, 137, 150, 62, 163, 247, 159, 190, 255, 81, 211, 62, 111, 165, 49, 191, 196, 68, 83, 63, 79, 93, 72, 62, 234, 19, 173, 62, 58, 16, 194, 63, 144, 164, 18, 189, 147, 163, 21, 62, 18, 244, 157, 191, 149, 46, 219, 62, 15, 234, 243, 62, 98, 170, 141, 63, 120, 63, 183, 62, 156, 112, 207, 190, 233, 109, 16, 192, 237, 194, 17, 191, 172, 48, 28, 63, 209, 164, 95, 62, 15, 236, 1, 189, 118, 103, 46, 61, 102, 217, 3, 191, 198, 159, 226, 62, 65, 136, 213, 62, 131, 208, 145, 63, 112, 46, 227, 190, 254, 130, 16, 191, 232, 83, 107, 191, 183, 95, 253, 190, 243, 118, 9, 191, 105, 61, 30, 191, 241, 165, 160, 61, 215, 42, 45, 191, 246, 42, 35, 62, 85, 4, 52, 190, 186, 88, 192, 190, 176, 89, 176, 62, 101, 237, 10, 63, 146, 111, 96, 63, 9, 179, 127, 191, 109, 120, 158, 190, 68, 56, 196, 62, 30, 145, 25, 63, 160, 20, 130, 190, 175, 57, 93, 187, 12, 136, 236, 63, 26, 121, 220, 62, 108, 182, 171, 62, 97, 95, 92, 191, 28, 11, 166, 60, 159, 42, 169, 62, 148, 6, 163, 191, 86, 175, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 156, 245, 190, 69, 100, 174, 62, 182, 232, 37, 188, 185, 170, 111, 63, 215, 65, 195, 190, 115, 235, 160, 189, 151, 31, 13, 61, 60, 56, 222, 190, 7, 53, 32, 62, 150, 233, 18, 63, 61, 199, 44, 190, 127, 233, 141, 62, 184, 4, 177, 190, 176, 175, 162, 190, 38, 203, 40, 189, 94, 194, 26, 191, 232, 7, 60, 61, 164, 231, 37, 190, 83, 22, 78, 191, 147, 236, 104, 188, 111, 80, 143, 62, 116, 111, 59, 190, 198, 183, 9, 62, 135, 80, 81, 190, 229, 3, 34, 187, 163, 33, 28, 191, 66, 170, 52, 61, 137, 139, 12, 191, 212, 0, 19, 188, 198, 151, 9, 62, 184, 86, 32, 62, 168, 196, 252, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 36, 87, 191, 93, 169, 159, 62, 114, 68, 242, 62, 2, 188, 128, 62, 215, 15, 116, 61, 127, 52, 0, 191, 218, 231, 227, 190, 91, 229, 88, 62, 26, 239, 195, 61, 110, 10, 139, 189, 17, 223, 220, 190, 125, 33, 208, 189, 116, 82, 95, 189, 136, 209, 205, 60, 6, 52, 167, 190, 199, 55, 173, 62, 27, 215, 69, 191, 227, 192, 129, 189, 19, 152, 9, 191, 59, 78, 68, 62, 248, 200, 26, 191, 162, 144, 214, 189, 137, 130, 54, 189, 213, 227, 186, 61, 145, 144, 20, 63, 166, 24, 36, 62, 239, 185, 134, 62, 238, 88, 125, 62, 123, 12, 191, 189, 97, 133, 126, 61, 137, 135, 245, 61, 68, 177, 190, 62, 146, 136, 68, 61, 232, 0, 20, 190, 219, 158, 238, 61, 92, 240, 60, 190, 240, 139, 213, 61, 239, 69, 214, 189, 1, 236, 228, 188, 130, 109, 219, 189, 194, 1, 245, 61, 210, 172, 84, 187, 129, 26, 172, 61, 133, 217, 7, 62, 144, 67, 5, 190, 213, 106, 6, 62, 1, 126, 194, 59, 55, 165, 46, 190, 219, 250, 159, 187, 25, 252, 9, 61, 186, 255, 172, 188, 43, 220, 199, 60, 235, 9, 174, 189, 255, 55, 7, 62, 76, 6, 143, 60, 148, 119, 118, 188, 54, 103, 73, 189, 16, 60, 168, 189, 35, 244, 34, 189, 156, 230, 235, 61, 233, 26, 3, 190, 2, 46, 22, 190, 234, 164, 63, 190, 253, 127, 27, 60, 143, 60, 202, 61, 9, 184, 145, 59, 100, 31, 25, 62, 234, 55, 255, 189, 72, 74, 176, 61, 248, 201, 61, 61, 142, 159, 30, 190, 171, 79, 192, 60, 14, 14, 250, 60, 170, 22, 98, 187, 201, 108, 11, 61, 170, 199, 36, 190, 31, 28, 17, 189, 255, 231, 29, 190, 234, 148, 237, 188, 230, 145, 189, 189, 107, 202, 155, 189, 159, 222, 226, 189, 190, 173, 10, 62, 232, 207, 24, 190, 23, 193, 11, 188, 63, 233, 68, 190, 136, 56, 243, 189, 238, 141, 184, 189, 62, 28, 83, 61, 53, 89, 93, 61, 241, 156, 156, 61, 180, 216, 0, 62, 91, 125, 35, 62, 65, 68, 57, 189, 164, 29, 50, 61, 109, 252, 62, 190, 32, 113, 225, 62, 232, 7, 114, 191, 183, 100, 137, 190, 254, 76, 66, 60, 77, 212, 36, 190, 153, 212, 179, 60, 208, 12, 168, 62, 209, 238, 226, 59, 227, 19, 181, 189, 69, 135, 31, 61, 73, 44, 240, 61, 164, 12, 29, 60, 23, 26, 222, 62, 218, 228, 79, 61, 247, 136, 3, 190, 65, 227, 86, 190, 242, 226, 184, 62, 28, 122, 219, 190, 5, 188, 195, 62, 120, 199, 119, 61, 178, 151, 118, 62, 120, 197, 169, 60, 232, 112, 231, 61, 235, 220, 18, 190, 130, 82, 11, 191, 182, 164, 30, 62, 19, 99, 26, 186, 140, 98, 78, 190, 142, 55, 4, 191, 194, 152, 136, 61, 141, 116, 94, 191, 167, 117, 150, 191, 229, 123, 149, 62, 29, 72, 249, 61, 183, 120, 1, 190, 90, 179, 207, 61, 103, 118, 14, 190, 48, 239, 26, 62, 224, 60, 232, 188, 53, 173, 15, 61, 233, 166, 12, 62, 35, 88, 27, 62, 253, 193, 234, 61, 244, 246, 94, 62, 4, 25, 147, 191, 237, 1, 8, 62, 156, 110, 33, 62, 58, 203, 163, 190, 242, 233, 26, 62, 117, 7, 197, 58, 168, 203, 39, 62, 76, 74, 122, 190, 104, 90, 105, 62, 172, 243, 8, 62, 174, 213, 148, 189, 182, 63, 223, 190, 236, 205, 83, 190, 232, 128, 245, 189, 42, 160, 127, 62, 179, 208, 236, 188, 92, 49, 105, 190, 182, 101, 44, 62, 253, 126, 158, 60, 180, 226, 139, 190, 91, 95, 2, 191, 3, 207, 67, 61, 64, 137, 153, 190, 144, 239, 0, 190, 150, 145, 111, 62, 42, 190, 152, 190, 81, 27, 46, 62, 22, 40, 246, 61, 169, 155, 128, 190, 149, 114, 188, 190, 10, 246, 146, 188, 84, 205, 137, 61, 241, 253, 0, 62, 8, 50, 121, 61, 179, 115, 198, 62, 224, 105, 233, 190, 243, 153, 204, 61, 240, 209, 10, 63, 89, 80, 221, 191, 3, 63, 78, 62, 80, 79, 171, 62, 253, 114, 37, 62, 182, 11, 158, 60, 235, 80, 87, 62, 83, 137, 189, 62, 165, 108, 121, 62, 47, 122, 240, 189, 189, 116, 172, 62, 124, 77, 13, 60, 133, 90, 48, 191, 142, 172, 71, 62, 104, 219, 162, 62, 124, 99, 120, 62, 75, 188, 65, 62, 178, 6, 199, 62, 68, 167, 14, 61, 145, 81, 61, 190, 4, 146, 20, 63, 15, 133, 243, 61, 96, 123, 187, 61, 37, 136, 133, 61, 8, 6, 94, 61, 0, 77, 69, 62, 215, 246, 137, 189, 245, 14, 16, 62, 59, 212, 225, 191, 111, 71, 59, 188, 87, 187, 233, 191, 175, 19, 210, 62, 63, 167, 155, 191, 7, 90, 196, 62, 95, 239, 45, 62, 204, 54, 196, 188, 20, 221, 61, 190, 26, 143, 140, 62, 208, 126, 181, 61, 146, 71, 210, 62, 230, 11, 109, 190, 97, 184, 10, 190, 223, 234, 41, 190, 97, 248, 7, 62, 209, 174, 75, 191, 110, 121, 0, 190, 88, 221, 140, 60, 228, 53, 159, 61, 169, 83, 135, 189, 237, 49, 210, 189, 180, 134, 252, 189, 249, 122, 141, 189, 156, 224, 239, 188, 76, 143, 12, 62, 13, 25, 67, 190, 75, 225, 175, 189, 176, 188, 8, 190, 59, 232, 128, 61, 87, 43, 55, 61, 70, 234, 119, 188, 186, 90, 140, 60, 55, 226, 246, 60, 50, 14, 225, 189, 244, 198, 21, 190, 97, 98, 57, 190, 251, 235, 66, 189, 217, 212, 165, 188, 72, 116, 25, 188, 115, 255, 173, 61, 97, 4, 147, 189, 238, 7, 134, 184, 220, 17, 243, 189, 107, 89, 12, 190, 49, 74, 156, 61, 192, 251, 131, 189, 31, 105, 197, 61, 247, 221, 67, 190, 239, 239, 41, 189, 18, 218, 148, 189, 48, 235, 33, 190, 2, 30, 132, 188, 68, 197, 214, 187, 98, 106, 69, 190, 46, 215, 129, 189, 0, 252, 97, 61, 244, 46, 249, 188, 68, 193, 213, 59, 115, 224, 188, 61, 245, 189, 162, 61, 88, 203, 215, 189, 208, 197, 23, 190, 86, 183, 11, 189, 219, 124, 248, 188, 113, 72, 11, 190, 80, 183, 26, 60, 63, 188, 165, 189, 16, 51, 188, 189, 108, 1, 27, 190, 122, 134, 58, 61, 116, 16, 187, 189, 157, 139, 170, 60, 187, 42, 18, 61, 17, 228, 14, 190, 11, 45, 207, 61, 193, 227, 153, 61, 122, 166, 4, 62, 170, 111, 209, 59, 196, 52, 112, 189, 161, 211, 113, 61, 111, 254, 163, 60, 132, 56, 145, 189, 232, 211, 139, 61, 11, 136, 56, 60, 140, 219, 35, 191, 68, 94, 55, 191, 50, 29, 144, 61, 141, 33, 121, 62, 120, 30, 87, 62, 2, 15, 9, 62, 186, 108, 133, 189, 95, 90, 118, 190, 235, 243, 236, 61, 113, 173, 84, 190, 94, 102, 149, 189, 118, 4, 146, 187, 58, 131, 68, 62, 143, 189, 1, 191, 229, 154, 182, 189, 154, 64, 65, 189, 243, 116, 219, 191, 43, 32, 33, 62, 109, 138, 167, 61, 172, 158, 146, 62, 111, 131, 246, 61, 61, 70, 17, 188, 37, 8, 143, 62, 222, 19, 239, 61, 221, 182, 11, 62, 195, 28, 82, 62, 211, 142, 56, 62, 248, 150, 197, 191, 110, 107, 22, 62, 230, 31, 141, 62, 111, 220, 80, 191, 169, 218, 28, 61, 181, 87, 123, 191, 137, 208, 144, 191, 43, 154, 190, 62, 72, 223, 64, 62, 147, 212, 51, 63, 172, 151, 171, 61, 69, 98, 54, 191, 32, 111, 240, 190, 175, 230, 117, 191, 10, 192, 249, 190, 23, 41, 49, 190, 128, 200, 51, 190, 161, 234, 25, 191, 191, 193, 195, 61, 127, 40, 85, 62, 214, 103, 168, 191, 251, 128, 33, 189, 191, 103, 24, 190, 245, 176, 199, 62, 29, 188, 199, 190, 178, 52, 251, 61, 97, 204, 9, 60, 23, 202, 138, 191, 0, 209, 11, 59, 175, 215, 76, 190, 32, 39, 146, 62, 131, 137, 93, 62, 172, 99, 201, 190, 43, 231, 134, 190, 206, 135, 144, 62, 146, 4, 176, 190, 120, 147, 0, 189, 40, 152, 50, 189, 248, 162, 177, 190, 115, 255, 130, 62, 58, 220, 135, 190, 96, 109, 225, 62, 203, 231, 82, 188, 218, 80, 192, 61, 81, 40, 239, 190, 199, 104, 1, 189, 168, 186, 2, 191, 27, 178, 128, 189, 165, 203, 206, 62, 86, 159, 144, 61, 185, 83, 9, 63, 182, 39, 198, 190, 52, 2, 194, 62, 76, 165, 63, 189, 124, 110, 4, 190, 3, 1, 36, 62, 177, 203, 143, 62, 143, 24, 155, 60, 235, 103, 177, 189, 157, 185, 55, 190, 19, 19, 82, 190, 11, 227, 10, 62, 155, 83, 133, 63, 211, 16, 4, 189, 202, 41, 46, 187, 163, 213, 34, 190, 176, 99, 149, 62, 235, 21, 138, 189, 65, 187, 42, 190, 71, 123, 1, 62, 3, 69, 133, 189, 247, 26, 146, 189, 44, 9, 6, 190, 146, 213, 1, 190, 35, 212, 8, 190, 145, 236, 4, 190, 236, 130, 13, 62, 174, 129, 80, 61, 181, 221, 13, 190, 21, 3, 156, 61, 54, 95, 180, 61, 247, 34, 194, 61, 229, 82, 32, 60, 118, 105, 249, 189, 140, 178, 196, 189, 62, 101, 42, 190, 251, 234, 156, 61, 70, 115, 217, 61, 135, 134, 33, 189, 138, 113, 142, 189, 123, 179, 248, 189, 37, 214, 174, 61, 37, 144, 17, 190, 172, 107, 27, 62, 135, 205, 120, 61, 23, 75, 32, 190, 7, 111, 12, 190, 20, 212, 248, 61, 134, 33, 228, 189, 232, 76, 46, 191, 246, 225, 28, 61, 5, 12, 132, 62, 77, 232, 148, 60, 26, 21, 107, 190, 210, 99, 180, 189, 164, 190, 42, 190, 90, 161, 26, 62, 232, 50, 216, 189, 99, 244, 11, 61, 97, 138, 70, 190, 225, 13, 130, 62, 221, 205, 183, 61, 106, 5, 237, 191, 77, 159, 133, 189, 2, 213, 247, 191, 180, 122, 79, 62, 125, 158, 112, 190, 31, 66, 159, 62, 21, 156, 17, 62, 165, 177, 139, 189, 177, 0, 6, 63, 214, 233, 166, 62, 26, 93, 146, 62, 145, 230, 205, 62, 126, 14, 5, 58, 223, 6, 44, 62, 118, 193, 200, 190, 191, 250, 119, 62, 160, 27, 140, 191, 195, 113, 68, 190, 54, 84, 178, 184, 194, 69, 253, 189, 94, 197, 181, 190, 14, 30, 130, 189, 50, 53, 107, 62, 138, 10, 25, 190, 50, 179, 174, 188, 118, 63, 7, 188, 12, 106, 12, 190, 178, 243, 248, 61, 87, 120, 128, 189, 71, 64, 66, 190, 88, 211, 149, 62, 186, 105, 174, 62, 105, 52, 89, 62, 148, 87, 207, 189, 230, 157, 188, 62, 239, 48, 50, 62, 211, 127, 249, 189, 139, 208, 161, 188, 48, 131, 147, 191, 220, 10, 164, 190, 245, 26, 67, 60, 40, 186, 16, 63, 30, 247, 167, 190, 56, 35, 206, 60, 125, 240, 239, 62, 103, 248, 46, 62, 58, 150, 18, 191, 165, 166, 66, 187, 142, 150, 50, 62, 143, 80, 133, 190, 101, 168, 22, 192, 106, 152, 195, 190, 19, 193, 128, 62, 99, 12, 168, 61, 227, 221, 95, 60, 227, 44, 208, 62, 26, 153, 105, 189, 201, 151, 117, 62, 52, 173, 218, 188, 95, 240, 106, 62, 55, 108, 151, 190, 28, 88, 60, 190, 244, 42, 237, 190, 7, 116, 192, 189, 89, 163, 86, 190, 165, 124, 222, 189, 95, 240, 78, 62, 112, 13, 194, 189, 184, 176, 170, 62, 115, 114, 93, 191, 207, 96, 120, 62, 123, 95, 84, 62, 5, 232, 105, 189, 58, 229, 187, 188, 60, 35, 249, 189, 35, 3, 103, 62, 14, 245, 118, 189, 121, 91, 161, 61, 113, 47, 47, 63, 9, 120, 30, 189, 223, 211, 159, 190, 64, 204, 59, 62, 167, 144, 150, 62, 220, 193, 23, 63, 10, 198, 2, 61, 143, 87, 26, 190, 151, 72, 152, 190, 44, 213, 199, 190, 46, 30, 13, 62, 185, 17, 217, 62, 228, 138, 88, 189, 208, 241, 180, 60, 201, 182, 113, 189, 224, 48, 162, 62, 174, 12, 108, 62, 235, 226, 152, 61, 175, 39, 212, 190, 107, 166, 132, 62, 167, 255, 82, 191, 107, 40, 157, 62, 39, 184, 182, 190, 17, 82, 188, 62, 223, 191, 19, 190, 170, 5, 151, 62, 196, 180, 10, 62, 11, 57, 69, 61, 252, 116, 44, 62, 62, 26, 99, 190, 199, 165, 120, 189, 170, 132, 220, 188, 21, 178, 88, 191, 204, 191, 48, 62, 60, 60, 104, 190, 240, 95, 105, 190, 199, 85, 52, 190, 238, 155, 211, 62, 84, 158, 144, 62, 220, 236, 207, 62, 215, 160, 36, 189, 130, 238, 85, 190, 65, 125, 28, 63, 156, 228, 110, 62, 214, 184, 151, 190, 54, 119, 73, 62, 185, 246, 146, 61, 190, 80, 166, 62, 52, 147, 37, 189, 178, 38, 148, 62, 185, 32, 240, 191, 241, 134, 236, 61, 100, 158, 174, 191, 30, 185, 137, 62, 243, 180, 68, 191, 71, 192, 103, 59, 7, 40, 73, 62, 81, 152, 141, 61, 59, 113, 58, 62, 109, 191, 54, 62, 240, 234, 92, 188, 49, 230, 87, 62, 236, 144, 203, 189, 94, 194, 108, 189, 232, 163, 166, 190, 32, 244, 119, 62, 163, 20, 76, 191, 247, 108, 120, 190, 232, 37, 30, 189, 200, 203, 250, 190, 152, 243, 0, 62, 144, 192, 89, 189, 25, 35, 17, 190, 255, 202, 146, 62, 109, 93, 207, 190, 51, 63, 51, 188, 39, 0, 109, 61, 245, 249, 194, 59, 144, 27, 218, 189, 240, 207, 178, 190, 240, 206, 11, 191, 164, 250, 46, 190, 113, 16, 231, 60, 203, 218, 133, 190, 243, 110, 209, 62, 46, 49, 210, 188, 223, 168, 186, 62, 55, 224, 191, 190, 128, 26, 124, 190, 137, 182, 150, 62, 238, 36, 59, 189, 65, 51, 76, 62, 40, 155, 172, 190, 109, 136, 56, 62, 127, 85, 68, 190, 12, 158, 244, 61, 192, 72, 252, 62, 31, 154, 209, 189, 6, 49, 236, 187, 118, 143, 129, 62, 209, 81, 198, 61, 0, 125, 203, 190, 107, 148, 213, 61, 123, 118, 147, 62, 176, 221, 140, 61, 74, 84, 124, 190, 49, 26, 48, 190, 10, 69, 12, 191, 137, 84, 156, 62, 201, 117, 17, 61, 41, 107, 165, 61, 96, 250, 68, 61, 177, 66, 144, 62, 88, 88, 30, 191, 76, 200, 160, 62, 249, 251, 6, 190, 52, 17, 180, 62, 152, 164, 169, 61, 44, 148, 8, 59, 167, 60, 253, 189, 247, 56, 244, 191, 24, 176, 135, 62, 33, 151, 32, 190, 141, 63, 137, 190, 101, 247, 140, 191, 75, 154, 97, 62, 149, 98, 218, 62, 42, 171, 85, 62, 252, 51, 39, 62, 157, 90, 112, 191, 171, 180, 37, 62, 226, 139, 85, 188, 79, 242, 140, 191, 109, 125, 97, 62, 219, 182, 186, 189, 216, 216, 120, 189, 143, 85, 118, 62, 34, 205, 242, 61, 37, 30, 3, 62, 253, 135, 6, 191, 245, 67, 3, 191, 232, 17, 167, 190, 146, 69, 151, 190, 164, 248, 147, 62, 251, 64, 108, 61, 72, 255, 68, 62, 1, 51, 119, 62, 210, 70, 40, 61, 57, 191, 200, 190, 158, 214, 174, 61, 94, 41, 134, 61, 82, 66, 29, 62, 133, 197, 155, 62, 115, 121, 127, 190, 207, 92, 247, 186, 49, 9, 102, 189, 29, 85, 38, 62, 190, 251, 34, 187, 201, 77, 13, 62, 132, 99, 39, 190, 76, 164, 174, 61, 135, 240, 14, 61, 155, 37, 70, 62, 141, 124, 147, 190, 155, 24, 122, 189, 155, 48, 106, 190, 109, 227, 123, 62, 89, 16, 192, 62, 251, 106, 86, 61, 131, 97, 93, 63, 108, 198, 137, 190, 64, 79, 249, 62, 238, 231, 173, 60, 162, 16, 108, 61, 132, 45, 123, 190, 114, 149, 169, 190, 77, 130, 103, 190, 166, 111, 138, 190, 252, 202, 29, 189, 88, 166, 144, 189, 177, 182, 157, 61, 22, 77, 24, 191, 115, 135, 196, 62, 23, 164, 193, 190, 131, 108, 237, 191, 16, 143, 167, 60, 171, 23, 60, 190, 178, 189, 193, 190, 234, 227, 150, 191, 162, 241, 126, 62, 183, 186, 203, 60, 48, 221, 56, 62, 22, 171, 42, 63, 107, 238, 40, 191, 179, 37, 144, 189, 195, 155, 191, 62, 232, 71, 169, 189, 113, 103, 69, 190, 226, 249, 178, 62, 151, 146, 143, 191, 88, 185, 97, 191, 226, 17, 166, 62, 83, 52, 225, 189, 228, 65, 245, 62, 85, 132, 21, 190, 158, 122, 57, 185, 39, 152, 169, 190, 212, 194, 51, 61, 80, 209, 94, 191, 241, 186, 104, 190, 149, 122, 151, 190, 157, 58, 214, 62, 83, 139, 18, 191, 196, 208, 8, 190, 21, 156, 0, 63, 230, 122, 245, 191, 12, 208, 131, 188, 223, 140, 136, 62, 213, 77, 244, 61, 53, 57, 166, 61, 223, 163, 217, 61, 62, 180, 241, 61, 43, 79, 102, 189, 32, 68, 29, 190, 19, 34, 236, 62, 30, 211, 167, 61, 115, 182, 160, 191, 65, 2, 229, 62, 200, 50, 204, 62, 71, 25, 121, 190, 231, 168, 15, 62, 220, 166, 6, 61, 58, 4, 142, 62, 32, 103, 29, 189, 123, 50, 225, 189, 253, 241, 76, 191, 28, 127, 23, 191, 67, 43, 30, 191, 254, 45, 80, 190, 200, 213, 168, 190, 24, 60, 190, 62, 119, 12, 114, 62, 207, 81, 145, 61, 142, 93, 51, 190, 231, 216, 108, 190, 124, 29, 100, 61, 18, 94, 60, 62, 104, 213, 7, 59, 163, 42, 120, 62, 11, 81, 182, 190, 149, 58, 244, 190, 179, 123, 122, 189, 35, 49, 130, 62, 238, 19, 5, 190, 228, 170, 122, 62, 64, 225, 205, 190, 208, 250, 150, 62, 192, 0, 27, 62, 76, 140, 29, 62, 253, 191, 61, 61, 236, 66, 2, 190, 144, 79, 121, 190, 114, 69, 31, 189, 69, 226, 102, 62, 20, 136, 34, 62, 243, 19, 84, 63, 145, 181, 76, 190, 199, 167, 145, 62, 64, 182, 93, 62, 229, 186, 20, 62, 84, 144, 29, 189, 251, 120, 3, 190, 83, 134, 128, 190, 234, 84, 149, 190, 219, 8, 3, 190, 235, 58, 78, 61, 61, 124, 18, 62, 246, 146, 244, 189, 72, 15, 103, 62, 58, 169, 206, 190, 231, 117, 13, 192, 225, 234, 148, 62, 189, 125, 165, 59, 49, 29, 93, 188, 96, 154, 111, 191, 237, 212, 105, 62, 92, 64, 60, 62, 83, 170, 84, 62, 66, 254, 215, 62, 15, 109, 43, 61, 72, 213, 226, 190, 220, 173, 242, 61, 36, 200, 173, 189, 43, 93, 222, 190, 251, 164, 224, 189, 24, 220, 147, 62, 26, 122, 149, 62, 7, 141, 17, 189, 252, 231, 49, 189, 253, 173, 122, 61, 5, 156, 193, 60, 139, 201, 123, 62, 69, 177, 203, 189, 191, 155, 51, 190, 38, 117, 92, 62, 147, 36, 227, 60, 107, 26, 64, 62, 121, 159, 178, 189, 32, 130, 204, 62, 71, 41, 232, 190, 50, 199, 226, 189, 95, 232, 226, 190, 122, 189, 150, 61, 27, 177, 251, 190, 112, 60, 88, 190, 176, 153, 214, 190, 144, 52, 135, 188, 177, 108, 75, 62, 214, 42, 44, 190, 76, 156, 43, 62, 216, 237, 208, 190, 227, 199, 216, 61, 38, 162, 34, 62, 17, 173, 25, 191, 86, 22, 153, 61, 225, 143, 145, 190, 98, 94, 242, 61, 51, 141, 107, 191, 248, 103, 48, 191, 28, 249, 148, 188, 158, 71, 128, 190, 208, 168, 158, 62, 105, 119, 32, 190, 176, 24, 199, 190, 37, 216, 210, 190, 134, 63, 95, 190, 49, 221, 130, 190, 238, 64, 46, 190, 199, 124, 63, 190, 9, 53, 33, 62, 227, 98, 166, 189, 133, 199, 244, 188, 161, 159, 4, 63, 226, 252, 154, 189, 136, 172, 36, 62, 49, 55, 136, 61, 50, 241, 116, 187, 202, 186, 68, 62, 246, 8, 63, 190, 63, 46, 179, 188, 96, 96, 216, 57, 96, 86, 186, 190, 85, 54, 178, 61, 217, 199, 5, 62, 29, 58, 149, 190, 162, 0, 78, 61, 8, 2, 139, 62, 122, 106, 27, 61, 115, 98, 17, 62, 160, 28, 162, 62, 142, 88, 117, 60, 61, 71, 202, 190, 9, 2, 165, 62, 212, 57, 14, 189, 156, 120, 35, 60, 249, 219, 10, 187, 244, 6, 189, 61, 209, 250, 156, 61, 86, 99, 12, 62, 197, 240, 79, 62, 75, 144, 168, 61, 187, 187, 125, 62, 140, 35, 76, 190, 18, 1, 239, 62, 117, 160, 60, 190, 71, 190, 141, 60, 31, 223, 162, 190, 224, 165, 198, 62, 94, 216, 178, 189, 166, 26, 62, 62, 222, 43, 42, 190, 165, 157, 212, 190, 180, 235, 118, 190, 185, 27, 128, 188, 8, 79, 40, 191, 135, 191, 45, 62, 1, 219, 117, 190, 192, 87, 41, 190, 223, 52, 61, 190, 246, 216, 75, 189, 165, 170, 208, 189, 0, 230, 156, 190, 81, 134, 206, 190, 230, 195, 180, 62, 187, 180, 141, 191, 155, 155, 132, 190, 252, 129, 168, 61, 227, 211, 193, 61, 216, 55, 218, 191, 138, 206, 146, 188, 242, 9, 230, 190, 49, 48, 11, 190, 2, 145, 158, 61, 183, 237, 19, 62, 94, 57, 69, 190, 4, 206, 11, 191, 196, 35, 153, 62, 158, 134, 158, 189, 164, 91, 100, 62, 16, 51, 192, 188, 162, 224, 218, 61, 89, 251, 141, 61, 219, 133, 88, 62, 242, 126, 56, 61, 39, 170, 161, 190, 248, 218, 5, 62, 170, 173, 35, 63, 151, 164, 189, 189, 17, 203, 196, 190, 39, 130, 16, 62, 57, 249, 222, 61, 56, 4, 21, 62, 69, 21, 177, 189, 131, 65, 92, 189, 87, 118, 89, 61, 104, 156, 20, 61, 118, 135, 42, 190, 235, 253, 122, 61, 182, 45, 24, 190, 207, 124, 17, 190, 137, 219, 6, 61, 54, 7, 93, 189, 59, 28, 196, 189, 254, 165, 31, 190, 212, 8, 23, 62, 3, 81, 72, 190, 34, 93, 136, 61, 191, 134, 239, 187, 89, 54, 233, 189, 28, 13, 18, 62, 4, 218, 53, 190, 73, 29, 35, 190, 69, 71, 7, 190, 113, 17, 248, 61, 132, 142, 26, 189, 92, 93, 27, 189, 98, 235, 184, 61, 26, 150, 158, 61, 45, 188, 227, 189, 8, 72, 134, 189, 164, 68, 58, 190, 195, 247, 177, 61, 143, 114, 100, 61, 112, 147, 224, 62, 207, 212, 173, 59, 158, 245, 170, 62, 245, 92, 47, 62, 8, 72, 212, 190, 252, 32, 28, 62, 224, 219, 94, 61, 7, 94, 1, 190, 14, 235, 30, 62, 33, 108, 168, 62, 4, 106, 62, 62, 247, 47, 120, 62, 117, 103, 71, 62, 137, 73, 94, 190, 163, 112, 129, 62, 16, 60, 140, 190, 86, 144, 206, 62, 89, 30, 208, 189, 185, 101, 130, 62, 115, 231, 85, 190, 219, 183, 144, 61, 149, 176, 87, 62, 253, 50, 29, 62, 17, 139, 216, 188, 175, 83, 253, 189, 236, 219, 130, 190, 73, 44, 18, 62, 128, 90, 58, 191, 80, 208, 4, 59, 60, 83, 31, 61, 62, 134, 255, 188, 90, 173, 220, 189, 64, 87, 5, 191, 9, 17, 47, 62, 218, 9, 174, 190, 234, 47, 220, 190, 182, 97, 180, 62, 172, 152, 76, 191, 241, 111, 83, 190, 226, 36, 248, 61, 187, 53, 168, 188, 96, 248, 239, 191, 161, 252, 60, 62, 227, 148, 255, 190, 175, 255, 161, 189, 57, 212, 167, 190, 125, 252, 247, 61, 89, 122, 67, 189, 93, 86, 216, 190, 111, 3, 178, 62, 24, 47, 144, 189, 134, 45, 194, 61, 178, 195, 210, 188, 234, 203, 53, 62, 102, 24, 1, 60, 184, 59, 136, 61, 3, 174, 178, 60, 171, 227, 176, 190, 29, 254, 217, 61, 148, 239, 55, 63, 157, 236, 153, 189, 56, 253, 119, 190, 71, 109, 63, 62, 182, 215, 103, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 155, 97, 62, 192, 128, 168, 189, 144, 157, 74, 61, 77, 165, 136, 190, 15, 182, 171, 189, 245, 143, 70, 62, 36, 205, 56, 62, 66, 128, 40, 60, 86, 210, 39, 190, 166, 185, 242, 61, 167, 11, 155, 60, 23, 166, 18, 190, 141, 108, 176, 189, 32, 2, 90, 62, 138, 22, 143, 61, 119, 68, 43, 190, 218, 98, 169, 188, 66, 156, 128, 62, 241, 231, 198, 60, 177, 136, 27, 62, 53, 21, 1, 190, 63, 86, 253, 61, 176, 71, 51, 62, 119, 208, 243, 189, 180, 246, 181, 61, 223, 129, 145, 189, 204, 55, 190, 59, 177, 186, 229, 61, 67, 244, 199, 189, 112, 168, 32, 189, 14, 228, 231, 57, 153, 70, 83, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 174, 234, 190, 246, 132, 4, 190, 197, 219, 174, 61, 8, 196, 83, 63, 103, 33, 91, 190, 253, 63, 174, 62, 187, 45, 232, 190, 36, 228, 200, 189, 243, 121, 146, 61, 234, 76, 82, 62, 243, 182, 122, 63, 166, 141, 179, 62, 71, 16, 128, 189, 71, 119, 224, 190, 176, 55, 45, 63, 166, 140, 216, 62, 191, 5, 45, 191, 160, 162, 39, 191, 106, 179, 233, 62, 245, 49, 143, 63, 219, 126, 162, 62, 253, 141, 133, 63, 47, 5, 5, 63, 113, 86, 183, 62, 159, 79, 141, 62, 87, 155, 23, 191, 78, 231, 184, 62, 185, 227, 143, 190, 82, 246, 95, 191, 21, 216, 192, 189, 17, 61, 175, 190, 84, 32, 118, 191, 196, 103, 202, 189, 97, 65, 140, 61, 31, 150, 103, 61, 26, 166, 47, 62, 93, 179, 126, 190, 125, 121, 25, 190, 179, 197, 120, 190, 123, 218, 238, 61, 110, 204, 203, 60, 145, 84, 162, 190, 53, 190, 105, 189, 237, 228, 7, 63, 118, 133, 226, 61, 118, 186, 148, 188, 100, 152, 96, 189, 107, 217, 71, 62, 160, 55, 41, 62, 101, 223, 3, 190, 104, 183, 170, 62, 65, 51, 175, 61, 247, 146, 247, 61, 91, 138, 35, 62, 25, 163, 164, 190, 85, 150, 250, 61, 119, 132, 3, 191, 61, 197, 26, 62, 154, 51, 23, 61, 180, 196, 186, 190, 132, 53, 122, 61, 99, 157, 78, 189, 168, 104, 177, 189, 226, 32, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 45, 48, 190, 127, 252, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {85, 85, 72, 62, 0, 240, 23, 62, 22, 166, 203, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 67, 108, 191, 116, 21, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}