// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 11, 85, 63, 28, 169, 15, 63, 21, 252, 2, 63, 84, 18, 224, 61, 104, 102, 98, 190, 161, 67, 128, 189, 46, 119, 128, 191, 158, 223, 66, 61, 82, 153, 168, 59, 22, 78, 83, 191, 180, 239, 232, 62, 34, 178, 1, 62, 120, 236, 133, 62, 168, 47, 7, 191, 5, 240, 42, 191, 169, 219, 39, 63, 167, 38, 40, 63, 223, 205, 194, 62, 177, 247, 72, 63, 238, 253, 88, 61, 160, 70, 57, 189, 49, 247, 162, 190, 117, 224, 3, 190, 139, 3, 30, 63, 246, 120, 138, 188, 212, 52, 147, 189, 106, 245, 229, 62, 109, 106, 171, 62, 188, 34, 134, 63, 234, 15, 144, 62, 180, 152, 156, 62, 206, 188, 37, 62, 111, 216, 119, 62, 5, 107, 227, 190, 182, 185, 132, 63, 204, 159, 129, 189, 237, 145, 188, 190, 181, 49, 191, 62, 28, 126, 30, 191, 186, 26, 197, 190, 22, 105, 170, 63, 152, 76, 20, 63, 237, 20, 233, 62, 140, 255, 154, 190, 38, 71, 197, 62, 179, 62, 15, 191, 70, 91, 234, 62, 107, 25, 144, 62, 220, 115, 204, 62, 219, 161, 145, 63, 180, 201, 41, 189, 53, 146, 190, 61, 187, 95, 118, 191, 234, 68, 181, 62, 158, 245, 7, 63, 68, 100, 128, 63, 202, 228, 197, 62, 244, 119, 211, 190, 78, 140, 158, 191, 218, 244, 106, 191, 138, 98, 29, 63, 228, 80, 215, 62, 91, 247, 144, 187, 23, 186, 110, 61, 51, 103, 42, 191, 173, 148, 1, 63, 99, 230, 213, 62, 132, 16, 86, 63, 90, 250, 240, 190, 9, 47, 135, 190, 108, 163, 226, 190, 60, 130, 72, 191, 52, 35, 177, 190, 60, 141, 11, 191, 101, 31, 19, 62, 215, 250, 92, 191, 6, 144, 253, 61, 97, 82, 121, 190, 60, 61, 185, 190, 77, 39, 197, 61, 121, 135, 27, 63, 124, 66, 100, 63, 26, 236, 75, 191, 113, 143, 146, 190, 55, 13, 101, 62, 3, 60, 249, 62, 197, 18, 206, 190, 2, 127, 168, 189, 100, 65, 190, 63, 137, 85, 244, 62, 70, 1, 148, 62, 251, 185, 92, 191, 227, 120, 108, 61, 63, 16, 104, 62, 37, 229, 155, 191, 157, 58, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 108, 218, 190, 234, 63, 31, 63, 149, 145, 135, 189, 4, 48, 98, 63, 75, 30, 243, 190, 247, 235, 80, 189, 202, 3, 171, 188, 51, 236, 137, 190, 237, 55, 98, 62, 236, 21, 22, 63, 202, 66, 220, 189, 14, 46, 100, 62, 142, 23, 232, 190, 160, 218, 129, 190, 248, 224, 48, 62, 20, 44, 3, 191, 6, 125, 115, 61, 186, 79, 59, 190, 115, 153, 42, 191, 4, 92, 1, 189, 138, 131, 182, 62, 77, 127, 58, 189, 33, 194, 89, 62, 145, 158, 192, 189, 68, 61, 0, 61, 62, 184, 171, 190, 196, 8, 152, 61, 227, 205, 221, 190, 255, 167, 77, 188, 90, 19, 179, 61, 108, 14, 203, 61, 221, 15, 215, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 143, 8, 191, 156, 12, 142, 62, 158, 1, 217, 62, 225, 153, 128, 62, 140, 67, 233, 60, 240, 181, 138, 190, 141, 144, 185, 190, 28, 235, 92, 62, 74, 56, 137, 61, 161, 50, 124, 189, 72, 225, 159, 190, 10, 96, 155, 189, 51, 35, 59, 189, 51, 52, 85, 190, 227, 105, 168, 190, 34, 33, 19, 62, 220, 145, 62, 191, 164, 24, 140, 189, 22, 127, 161, 190, 165, 114, 16, 62, 158, 179, 243, 190, 242, 175, 155, 189, 16, 185, 64, 60, 67, 83, 175, 61, 161, 132, 24, 63, 247, 100, 63, 62, 96, 87, 107, 62, 250, 23, 192, 61, 41, 76, 79, 189, 37, 173, 36, 190, 77, 181, 166, 61, 176, 15, 142, 62, 146, 136, 68, 61, 232, 0, 20, 190, 219, 158, 238, 61, 92, 240, 60, 190, 240, 139, 213, 61, 239, 69, 214, 189, 1, 236, 228, 188, 130, 109, 219, 189, 194, 1, 245, 61, 210, 172, 84, 187, 129, 26, 172, 61, 133, 217, 7, 62, 144, 67, 5, 190, 213, 106, 6, 62, 1, 126, 194, 59, 55, 165, 46, 190, 219, 250, 159, 187, 25, 252, 9, 61, 186, 255, 172, 188, 43, 220, 199, 60, 235, 9, 174, 189, 255, 55, 7, 62, 76, 6, 143, 60, 148, 119, 118, 188, 54, 103, 73, 189, 16, 60, 168, 189, 35, 244, 34, 189, 156, 230, 235, 61, 233, 26, 3, 190, 2, 46, 22, 190, 234, 164, 63, 190, 253, 127, 27, 60, 35, 188, 208, 61, 204, 230, 148, 59, 100, 31, 25, 62, 25, 36, 253, 189, 72, 74, 176, 61, 46, 136, 76, 61, 40, 98, 28, 190, 171, 79, 192, 60, 92, 232, 2, 61, 115, 104, 235, 58, 130, 13, 17, 61, 170, 199, 36, 190, 31, 28, 17, 189, 250, 120, 29, 190, 170, 129, 224, 188, 230, 145, 189, 189, 145, 194, 150, 189, 159, 222, 226, 189, 109, 252, 11, 62, 232, 207, 24, 190, 193, 154, 190, 187, 109, 183, 68, 190, 92, 57, 240, 189, 238, 141, 184, 189, 62, 28, 83, 61, 53, 89, 93, 61, 172, 96, 158, 61, 180, 216, 0, 62, 109, 58, 36, 62, 187, 36, 43, 189, 192, 158, 52, 61, 96, 218, 62, 190, 45, 47, 2, 63, 26, 6, 25, 191, 194, 222, 180, 188, 28, 10, 63, 189, 242, 116, 131, 189, 67, 9, 43, 61, 91, 158, 206, 62, 186, 180, 101, 61, 141, 217, 7, 189, 40, 121, 132, 186, 148, 77, 63, 62, 89, 49, 83, 190, 54, 138, 59, 190, 68, 71, 236, 188, 33, 35, 110, 189, 28, 114, 141, 190, 91, 95, 89, 62, 136, 63, 72, 190, 29, 158, 195, 62, 103, 152, 28, 61, 75, 31, 86, 62, 161, 82, 238, 61, 135, 199, 72, 187, 20, 77, 165, 190, 204, 22, 180, 190, 17, 16, 166, 61, 81, 76, 10, 61, 149, 134, 239, 190, 44, 136, 238, 190, 108, 174, 162, 60, 170, 16, 8, 191, 4, 131, 65, 191, 54, 23, 111, 62, 243, 75, 19, 62, 133, 20, 35, 190, 226, 36, 194, 61, 231, 251, 58, 190, 134, 250, 8, 62, 238, 6, 11, 189, 5, 176, 82, 59, 8, 125, 218, 61, 237, 43, 17, 62, 101, 37, 189, 61, 178, 83, 142, 61, 0, 132, 88, 191, 66, 165, 0, 62, 230, 109, 2, 62, 164, 141, 96, 190, 234, 198, 123, 62, 24, 189, 245, 60, 150, 66, 223, 61, 105, 197, 213, 190, 78, 242, 127, 62, 193, 35, 32, 62, 192, 101, 236, 60, 156, 120, 223, 190, 223, 73, 50, 190, 205, 225, 251, 190, 40, 168, 69, 62, 6, 228, 42, 188, 193, 57, 230, 189, 16, 62, 34, 62, 19, 243, 71, 188, 228, 217, 66, 190, 1, 65, 222, 190, 119, 168, 76, 61, 84, 166, 132, 190, 136, 198, 89, 190, 25, 84, 125, 62, 198, 23, 126, 190, 55, 110, 129, 62, 213, 33, 208, 61, 20, 125, 127, 190, 254, 103, 92, 190, 140, 184, 136, 60, 250, 235, 48, 61, 255, 36, 17, 62, 226, 33, 75, 61, 199, 224, 207, 62, 78, 114, 8, 190, 187, 178, 92, 62, 221, 69, 216, 62, 56, 189, 116, 191, 1, 246, 50, 62, 175, 99, 218, 62, 180, 9, 131, 61, 150, 47, 12, 61, 237, 35, 74, 62, 171, 169, 145, 62, 252, 130, 214, 61, 14, 186, 12, 190, 180, 48, 149, 62, 35, 226, 32, 60, 167, 140, 10, 190, 235, 74, 1, 62, 104, 147, 161, 62, 221, 186, 202, 61, 192, 250, 21, 62, 28, 141, 226, 62, 53, 45, 234, 61, 87, 183, 84, 190, 74, 162, 241, 62, 236, 140, 183, 60, 202, 183, 76, 190, 93, 95, 80, 61, 214, 131, 245, 189, 238, 214, 240, 61, 201, 104, 73, 189, 169, 230, 9, 62, 94, 127, 90, 191, 7, 163, 168, 189, 255, 194, 162, 191, 50, 163, 132, 62, 175, 21, 90, 191, 157, 244, 120, 62, 238, 190, 66, 62, 214, 213, 24, 190, 209, 187, 213, 60, 113, 61, 100, 62, 248, 44, 213, 61, 84, 79, 172, 62, 87, 217, 194, 189, 206, 103, 58, 190, 24, 139, 190, 189, 217, 185, 203, 61, 150, 188, 71, 191, 156, 214, 10, 190, 237, 156, 81, 186, 228, 53, 159, 61, 169, 83, 135, 189, 237, 49, 210, 189, 180, 134, 252, 189, 249, 122, 141, 189, 156, 224, 239, 188, 76, 143, 12, 62, 13, 25, 67, 190, 75, 225, 175, 189, 176, 188, 8, 190, 59, 232, 128, 61, 87, 43, 55, 61, 70, 234, 119, 188, 186, 90, 140, 60, 55, 226, 246, 60, 50, 14, 225, 189, 244, 198, 21, 190, 97, 98, 57, 190, 251, 235, 66, 189, 217, 212, 165, 188, 72, 116, 25, 188, 115, 255, 173, 61, 97, 4, 147, 189, 238, 7, 134, 184, 220, 17, 243, 189, 107, 89, 12, 190, 49, 74, 156, 61, 192, 251, 131, 189, 31, 105, 197, 61, 247, 221, 67, 190, 239, 239, 41, 189, 18, 218, 148, 189, 48, 235, 33, 190, 2, 30, 132, 188, 68, 197, 214, 187, 98, 106, 69, 190, 46, 215, 129, 189, 0, 252, 97, 61, 244, 46, 249, 188, 68, 193, 213, 59, 115, 224, 188, 61, 245, 189, 162, 61, 88, 203, 215, 189, 208, 197, 23, 190, 86, 183, 11, 189, 219, 124, 248, 188, 113, 72, 11, 190, 80, 183, 26, 60, 63, 188, 165, 189, 16, 51, 188, 189, 108, 1, 27, 190, 122, 134, 58, 61, 116, 16, 187, 189, 157, 139, 170, 60, 187, 42, 18, 61, 17, 228, 14, 190, 11, 45, 207, 61, 193, 227, 153, 61, 122, 166, 4, 62, 170, 111, 209, 59, 196, 52, 112, 189, 161, 211, 113, 61, 111, 254, 163, 60, 132, 56, 145, 189, 48, 139, 108, 60, 124, 91, 7, 61, 229, 103, 218, 189, 108, 8, 18, 191, 20, 110, 212, 60, 112, 84, 63, 62, 193, 222, 132, 62, 167, 33, 103, 189, 121, 199, 200, 189, 217, 241, 20, 190, 209, 209, 101, 61, 233, 160, 98, 190, 228, 182, 149, 189, 219, 252, 12, 190, 183, 255, 72, 62, 4, 2, 169, 190, 214, 254, 92, 189, 116, 135, 62, 190, 56, 192, 111, 191, 116, 87, 237, 61, 154, 53, 13, 62, 72, 215, 252, 61, 80, 86, 117, 61, 146, 153, 155, 188, 177, 239, 119, 62, 130, 97, 65, 61, 12, 31, 95, 189, 103, 74, 34, 62, 242, 231, 216, 61, 143, 191, 2, 191, 175, 24, 157, 61, 68, 27, 144, 62, 138, 89, 232, 190, 1, 241, 106, 61, 24, 35, 119, 190, 37, 210, 29, 191, 127, 37, 161, 62, 240, 234, 140, 190, 96, 38, 195, 62, 172, 151, 171, 61, 175, 14, 33, 189, 31, 48, 225, 190, 194, 110, 12, 191, 30, 237, 218, 190, 135, 185, 242, 189, 92, 235, 28, 190, 207, 149, 118, 190, 191, 193, 195, 61, 227, 227, 220, 60, 235, 138, 22, 190, 251, 128, 33, 189, 186, 1, 211, 187, 79, 205, 13, 62, 188, 205, 213, 190, 198, 44, 48, 189, 65, 69, 213, 61, 50, 232, 207, 189, 243, 144, 187, 60, 175, 215, 76, 190, 86, 139, 160, 61, 53, 180, 117, 61, 122, 232, 199, 189, 52, 101, 79, 190, 86, 214, 153, 62, 187, 60, 85, 190, 141, 220, 150, 189, 205, 14, 172, 188, 221, 173, 76, 190, 32, 28, 145, 62, 136, 145, 5, 190, 166, 83, 141, 62, 11, 10, 16, 61, 49, 62, 180, 188, 10, 196, 146, 190, 131, 60, 37, 188, 123, 174, 224, 190, 148, 206, 232, 187, 24, 232, 89, 62, 107, 164, 113, 189, 220, 147, 115, 62, 82, 162, 128, 190, 224, 57, 186, 61, 236, 214, 182, 61, 21, 162, 127, 188, 191, 83, 146, 61, 206, 221, 145, 61, 169, 74, 121, 61, 89, 53, 135, 188, 242, 115, 247, 189, 67, 222, 240, 189, 142, 242, 25, 62, 33, 222, 99, 63, 171, 184, 32, 188, 141, 22, 31, 61, 182, 134, 140, 190, 241, 117, 117, 62, 235, 21, 138, 189, 65, 187, 42, 190, 71, 123, 1, 62, 3, 69, 133, 189, 247, 26, 146, 189, 44, 9, 6, 190, 146, 213, 1, 190, 35, 212, 8, 190, 145, 236, 4, 190, 236, 130, 13, 62, 174, 129, 80, 61, 181, 221, 13, 190, 21, 3, 156, 61, 54, 95, 180, 61, 247, 34, 194, 61, 229, 82, 32, 60, 118, 105, 249, 189, 140, 178, 196, 189, 62, 101, 42, 190, 251, 234, 156, 61, 70, 115, 217, 61, 135, 134, 33, 189, 138, 113, 142, 189, 123, 179, 248, 189, 37, 214, 174, 61, 37, 144, 17, 190, 172, 107, 27, 62, 135, 205, 120, 61, 23, 75, 32, 190, 7, 111, 12, 190, 20, 212, 248, 61, 134, 33, 228, 189, 33, 205, 152, 190, 251, 136, 186, 60, 125, 104, 144, 62, 176, 101, 89, 61, 243, 104, 138, 190, 13, 199, 51, 62, 22, 17, 75, 190, 219, 226, 105, 61, 20, 203, 244, 189, 71, 102, 55, 190, 240, 64, 41, 189, 144, 24, 118, 62, 185, 187, 147, 61, 185, 141, 131, 191, 80, 242, 13, 189, 162, 126, 172, 191, 202, 65, 132, 61, 247, 129, 153, 190, 225, 117, 72, 62, 241, 16, 22, 62, 153, 137, 22, 190, 126, 83, 243, 62, 120, 75, 146, 62, 95, 83, 146, 62, 32, 83, 173, 62, 91, 91, 21, 62, 135, 190, 200, 61, 13, 140, 163, 190, 118, 92, 85, 62, 121, 156, 156, 191, 251, 172, 8, 190, 49, 31, 74, 188, 229, 10, 225, 189, 231, 187, 83, 189, 79, 171, 156, 61, 51, 137, 42, 62, 218, 32, 69, 190, 236, 241, 216, 188, 205, 124, 128, 62, 44, 227, 10, 190, 9, 3, 10, 62, 235, 42, 168, 189, 241, 249, 65, 190, 34, 224, 21, 62, 195, 165, 39, 189, 183, 26, 1, 62, 6, 45, 210, 189, 49, 28, 157, 62, 84, 153, 71, 189, 12, 26, 215, 189, 142, 92, 160, 189, 198, 84, 90, 191, 221, 229, 180, 190, 140, 198, 35, 187, 102, 48, 171, 62, 220, 208, 12, 191, 4, 11, 42, 187, 234, 252, 222, 62, 158, 230, 51, 62, 152, 59, 34, 190, 32, 7, 19, 190, 104, 167, 243, 61, 154, 132, 2, 190, 182, 48, 122, 191, 155, 160, 145, 190, 48, 96, 106, 62, 16, 189, 4, 61, 156, 55, 158, 60, 239, 160, 196, 62, 54, 101, 23, 186, 100, 93, 134, 62, 165, 189, 90, 59, 28, 16, 114, 62, 44, 101, 43, 190, 53, 173, 17, 190, 9, 159, 224, 190, 52, 143, 196, 189, 149, 187, 155, 189, 142, 170, 180, 189, 118, 105, 123, 62, 140, 75, 53, 189, 139, 117, 103, 62, 125, 223, 202, 190, 242, 188, 99, 62, 247, 186, 128, 62, 109, 181, 4, 190, 202, 173, 90, 189, 99, 48, 19, 190, 236, 104, 64, 62, 253, 121, 61, 190, 150, 241, 239, 61, 226, 18, 39, 63, 62, 161, 157, 189, 8, 237, 17, 187, 186, 234, 19, 62, 89, 224, 134, 62, 242, 255, 3, 63, 100, 144, 171, 60, 98, 178, 248, 188, 225, 213, 14, 190, 101, 54, 215, 190, 214, 155, 3, 62, 29, 18, 169, 62, 215, 14, 92, 189, 165, 219, 170, 60, 105, 169, 12, 190, 34, 19, 147, 62, 35, 199, 97, 62, 86, 70, 28, 61, 7, 223, 200, 189, 42, 90, 106, 62, 0, 166, 200, 190, 60, 52, 78, 62, 180, 134, 172, 190, 211, 157, 192, 62, 101, 16, 227, 188, 178, 32, 82, 62, 59, 233, 51, 62, 87, 144, 208, 188, 192, 140, 26, 62, 125, 248, 87, 190, 11, 250, 45, 62, 208, 124, 188, 186, 65, 216, 39, 191, 44, 129, 2, 62, 205, 69, 228, 189, 235, 34, 105, 190, 64, 249, 77, 189, 11, 151, 173, 62, 88, 44, 121, 62, 6, 7, 122, 62, 220, 2, 21, 189, 62, 71, 107, 190, 34, 29, 22, 63, 26, 222, 34, 62, 9, 246, 132, 190, 251, 21, 50, 62, 187, 156, 211, 188, 133, 127, 157, 62, 33, 113, 104, 188, 206, 243, 135, 62, 246, 154, 37, 191, 91, 108, 100, 61, 244, 244, 144, 191, 82, 66, 79, 62, 217, 48, 66, 191, 29, 19, 3, 63, 91, 56, 62, 62, 16, 25, 52, 188, 10, 99, 17, 62, 140, 215, 22, 62, 85, 9, 149, 188, 244, 196, 248, 61, 189, 179, 111, 60, 33, 95, 191, 189, 47, 64, 70, 190, 59, 37, 85, 62, 210, 247, 228, 190, 6, 146, 109, 190, 83, 248, 203, 188, 252, 235, 160, 190, 87, 243, 179, 61, 254, 164, 60, 62, 140, 231, 32, 61, 55, 221, 104, 62, 197, 27, 163, 190, 234, 227, 154, 189, 33, 239, 9, 62, 198, 236, 179, 61, 119, 152, 38, 188, 169, 190, 100, 190, 184, 249, 21, 190, 182, 138, 159, 185, 108, 244, 154, 61, 126, 117, 78, 190, 129, 223, 143, 62, 171, 127, 164, 60, 78, 4, 169, 62, 30, 0, 42, 190, 96, 103, 122, 189, 252, 103, 125, 62, 18, 138, 147, 189, 234, 119, 22, 62, 176, 199, 57, 190, 159, 161, 118, 62, 222, 59, 248, 56, 13, 163, 70, 62, 177, 92, 188, 62, 121, 109, 46, 190, 221, 246, 56, 62, 236, 87, 114, 62, 190, 37, 12, 187, 92, 159, 231, 190, 86, 103, 229, 61, 127, 153, 154, 62, 24, 225, 84, 60, 74, 84, 124, 190, 108, 37, 135, 190, 105, 184, 59, 62, 240, 2, 139, 62, 238, 194, 69, 187, 118, 24, 16, 188, 52, 241, 251, 187, 235, 110, 178, 62, 103, 60, 245, 190, 238, 91, 57, 62, 191, 185, 17, 190, 57, 64, 105, 62, 70, 231, 81, 190, 62, 53, 207, 60, 36, 196, 151, 190, 169, 95, 201, 191, 121, 227, 17, 61, 30, 1, 54, 190, 246, 82, 138, 190, 177, 177, 134, 191, 23, 228, 102, 62, 109, 197, 7, 63, 74, 226, 43, 62, 252, 51, 39, 62, 202, 154, 82, 191, 90, 75, 84, 61, 84, 179, 183, 61, 221, 138, 99, 191, 240, 140, 54, 62, 136, 169, 21, 190, 141, 169, 148, 188, 209, 28, 30, 62, 227, 14, 33, 62, 10, 7, 4, 61, 30, 152, 154, 190, 121, 131, 203, 190, 240, 119, 151, 190, 112, 218, 198, 189, 188, 190, 130, 62, 187, 28, 144, 60, 141, 7, 90, 62, 53, 136, 248, 61, 31, 86, 101, 189, 29, 56, 221, 190, 197, 15, 87, 62, 46, 219, 54, 189, 151, 166, 73, 61, 70, 42, 44, 62, 0, 47, 148, 189, 200, 72, 85, 61, 234, 87, 18, 61, 0, 77, 235, 61, 16, 103, 102, 190, 14, 101, 43, 61, 40, 98, 171, 189, 178, 234, 205, 189, 122, 90, 254, 61, 247, 229, 161, 61, 202, 168, 25, 191, 39, 179, 221, 189, 231, 61, 67, 190, 7, 41, 18, 62, 112, 128, 111, 62, 234, 175, 187, 61, 121, 173, 243, 61, 171, 114, 67, 190, 62, 82, 247, 62, 174, 210, 95, 60, 25, 214, 118, 61, 70, 194, 216, 189, 143, 153, 169, 190, 15, 55, 128, 62, 254, 184, 26, 191, 96, 105, 60, 61, 43, 196, 4, 190, 129, 169, 121, 61, 33, 179, 56, 190, 235, 53, 148, 62, 62, 217, 20, 190, 146, 74, 137, 191, 249, 45, 8, 61, 235, 29, 139, 190, 144, 67, 169, 190, 240, 26, 145, 191, 192, 59, 73, 62, 45, 112, 241, 187, 103, 106, 69, 62, 89, 189, 218, 62, 44, 125, 25, 191, 64, 216, 59, 62, 250, 132, 131, 62, 225, 34, 135, 190, 207, 55, 75, 190, 127, 1, 190, 62, 101, 100, 22, 191, 189, 19, 51, 191, 81, 68, 170, 62, 156, 170, 5, 190, 87, 190, 4, 63, 107, 222, 140, 190, 248, 251, 215, 188, 112, 227, 95, 190, 155, 192, 66, 60, 94, 146, 74, 191, 107, 140, 39, 190, 40, 183, 191, 190, 175, 189, 217, 62, 59, 107, 215, 190, 255, 126, 159, 189, 63, 209, 178, 62, 132, 67, 137, 191, 219, 38, 140, 187, 48, 67, 164, 62, 116, 238, 238, 188, 2, 87, 109, 61, 90, 175, 28, 62, 14, 172, 140, 61, 158, 112, 95, 189, 57, 243, 136, 190, 4, 66, 212, 62, 124, 126, 50, 61, 170, 229, 226, 190, 109, 230, 192, 62, 118, 52, 204, 62, 201, 225, 24, 190, 193, 87, 170, 60, 141, 211, 9, 61, 86, 215, 25, 62, 170, 109, 78, 187, 48, 215, 161, 190, 207, 102, 18, 191, 212, 24, 141, 190, 135, 87, 150, 190, 192, 193, 6, 62, 250, 252, 79, 190, 58, 240, 170, 62, 178, 178, 131, 62, 150, 161, 134, 59, 192, 78, 6, 190, 52, 44, 7, 62, 17, 214, 62, 62, 62, 3, 91, 190, 43, 123, 64, 189, 176, 60, 182, 61, 216, 173, 45, 190, 196, 173, 162, 190, 90, 232, 19, 60, 231, 224, 77, 62, 162, 17, 242, 190, 177, 40, 1, 62, 111, 240, 60, 190, 228, 144, 241, 61, 220, 190, 94, 62, 53, 220, 177, 60, 79, 136, 200, 190, 47, 193, 82, 190, 35, 15, 66, 190, 13, 5, 209, 188, 47, 63, 35, 62, 133, 202, 38, 62, 27, 5, 146, 62, 48, 36, 6, 190, 234, 228, 159, 62, 178, 108, 58, 62, 236, 184, 45, 62, 79, 5, 252, 60, 192, 70, 205, 189, 144, 140, 66, 60, 17, 50, 34, 191, 230, 131, 144, 188, 49, 199, 206, 61, 59, 230, 130, 62, 46, 147, 35, 190, 97, 54, 21, 62, 120, 10, 123, 190, 168, 122, 130, 191, 167, 105, 160, 62, 1, 232, 155, 189, 21, 30, 52, 190, 187, 102, 140, 191, 144, 25, 45, 62, 217, 73, 186, 61, 154, 247, 46, 62, 15, 238, 184, 62, 90, 3, 134, 190, 111, 11, 237, 189, 192, 196, 44, 62, 96, 5, 162, 189, 125, 104, 168, 190, 204, 71, 192, 59, 101, 24, 185, 61, 79, 130, 95, 62, 161, 202, 178, 60, 144, 50, 68, 61, 34, 241, 42, 62, 200, 89, 127, 189, 11, 99, 81, 62, 237, 145, 16, 190, 251, 86, 4, 190, 93, 171, 208, 61, 100, 138, 152, 189, 134, 20, 134, 61, 116, 86, 64, 189, 124, 19, 68, 62, 92, 25, 101, 190, 20, 147, 145, 189, 14, 247, 158, 190, 153, 63, 209, 61, 99, 229, 16, 60, 217, 199, 90, 190, 35, 17, 196, 190, 85, 161, 208, 61, 184, 206, 75, 62, 166, 45, 41, 190, 4, 65, 163, 61, 57, 104, 31, 190, 82, 208, 149, 61, 237, 16, 156, 61, 157, 126, 195, 190, 211, 252, 189, 61, 133, 9, 45, 190, 155, 43, 1, 62, 121, 220, 187, 190, 152, 150, 247, 190, 64, 196, 23, 187, 27, 192, 121, 190, 148, 117, 138, 62, 199, 228, 229, 60, 150, 71, 180, 190, 77, 209, 175, 190, 156, 65, 10, 190, 52, 146, 102, 190, 185, 64, 225, 189, 199, 124, 63, 190, 36, 135, 89, 62, 227, 98, 166, 189, 32, 80, 170, 189, 222, 106, 180, 62, 53, 155, 144, 61, 82, 166, 103, 62, 207, 62, 60, 61, 112, 193, 59, 190, 210, 87, 237, 61, 6, 54, 232, 189, 121, 38, 142, 61, 180, 13, 106, 61, 81, 9, 37, 190, 178, 5, 90, 186, 190, 129, 83, 61, 107, 198, 155, 190, 145, 117, 60, 60, 88, 186, 145, 62, 138, 24, 138, 189, 69, 213, 12, 62, 157, 163, 73, 60, 87, 133, 163, 188, 52, 206, 178, 190, 108, 198, 138, 62, 42, 111, 195, 189, 159, 142, 66, 61, 180, 155, 128, 189, 164, 95, 90, 187, 172, 166, 185, 59, 73, 237, 69, 60, 107, 96, 76, 62, 232, 77, 169, 61, 138, 196, 39, 62, 190, 203, 16, 190, 101, 37, 223, 62, 40, 211, 73, 190, 206, 209, 37, 61, 188, 192, 50, 190, 66, 147, 166, 62, 231, 106, 204, 189, 44, 110, 69, 62, 184, 82, 246, 189, 141, 155, 51, 190, 103, 222, 43, 190, 186, 252, 99, 189, 211, 96, 218, 190, 79, 10, 53, 62, 185, 95, 85, 190, 234, 88, 116, 190, 211, 70, 202, 189, 228, 135, 101, 188, 56, 49, 39, 190, 50, 114, 3, 191, 253, 110, 210, 190, 186, 255, 147, 62, 20, 53, 216, 190, 185, 73, 41, 190, 8, 147, 99, 190, 233, 174, 24, 190, 75, 230, 83, 191, 194, 41, 140, 190, 174, 22, 137, 190, 22, 132, 56, 190, 68, 107, 164, 61, 58, 127, 161, 61, 36, 239, 33, 190, 174, 122, 19, 191, 145, 94, 40, 190, 126, 187, 253, 59, 91, 133, 19, 62, 125, 162, 14, 62, 232, 26, 234, 189, 36, 161, 208, 61, 227, 163, 27, 62, 115, 185, 140, 190, 144, 49, 197, 190, 104, 54, 95, 190, 159, 193, 6, 63, 23, 37, 167, 189, 67, 65, 135, 60, 218, 124, 5, 62, 181, 124, 0, 61, 56, 4, 21, 62, 166, 24, 170, 189, 121, 64, 92, 189, 207, 15, 90, 61, 179, 116, 42, 61, 198, 176, 39, 190, 212, 200, 138, 61, 182, 45, 24, 190, 192, 124, 17, 190, 148, 131, 35, 61, 54, 7, 93, 189, 139, 27, 196, 189, 78, 115, 31, 190, 14, 9, 23, 62, 3, 81, 72, 190, 65, 93, 136, 61, 106, 102, 209, 186, 89, 54, 233, 189, 28, 13, 18, 62, 4, 218, 53, 190, 82, 250, 27, 190, 69, 71, 7, 190, 75, 123, 6, 62, 134, 136, 25, 189, 71, 93, 27, 189, 174, 235, 184, 61, 98, 150, 158, 61, 249, 16, 220, 189, 43, 70, 113, 189, 95, 68, 58, 190, 228, 201, 182, 61, 245, 17, 129, 61, 133, 205, 207, 62, 251, 156, 227, 59, 2, 55, 111, 62, 240, 249, 31, 62, 155, 94, 195, 190, 0, 189, 28, 62, 201, 94, 131, 187, 147, 85, 7, 190, 146, 145, 9, 62, 228, 12, 103, 62, 17, 25, 58, 62, 207, 19, 12, 62, 153, 169, 79, 62, 25, 102, 19, 190, 169, 20, 117, 62, 171, 153, 99, 190, 177, 83, 172, 62, 190, 127, 135, 189, 163, 197, 76, 62, 68, 90, 23, 190, 117, 162, 130, 60, 239, 16, 128, 62, 68, 43, 7, 62, 95, 23, 173, 60, 14, 172, 219, 189, 173, 226, 222, 188, 56, 105, 3, 62, 23, 204, 1, 191, 96, 194, 209, 183, 65, 155, 213, 186, 147, 193, 167, 188, 84, 32, 245, 59, 170, 112, 120, 189, 230, 88, 138, 61, 185, 107, 36, 191, 239, 21, 1, 191, 71, 140, 145, 62, 216, 201, 20, 190, 59, 5, 33, 190, 217, 172, 98, 190, 23, 149, 174, 190, 179, 155, 107, 191, 239, 8, 58, 62, 233, 142, 108, 190, 135, 138, 12, 190, 247, 93, 64, 190, 251, 205, 138, 189, 99, 13, 23, 188, 190, 143, 182, 190, 218, 242, 230, 189, 195, 15, 166, 61, 82, 175, 22, 59, 150, 168, 255, 61, 73, 217, 246, 189, 87, 13, 63, 61, 38, 31, 36, 59, 20, 117, 150, 190, 134, 74, 205, 190, 174, 129, 172, 190, 10, 185, 20, 63, 108, 40, 132, 189, 199, 242, 22, 62, 66, 204, 214, 61, 124, 108, 239, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 29, 64, 62, 192, 128, 168, 189, 61, 25, 87, 61, 240, 203, 139, 190, 105, 52, 135, 189, 235, 186, 92, 62, 208, 152, 229, 61, 66, 128, 40, 60, 86, 210, 39, 190, 197, 118, 36, 62, 91, 58, 75, 187, 154, 150, 36, 190, 141, 108, 176, 189, 207, 210, 65, 62, 45, 223, 199, 61, 140, 208, 38, 190, 196, 171, 43, 189, 162, 50, 82, 62, 228, 134, 6, 61, 236, 44, 32, 62, 253, 94, 222, 189, 119, 1, 199, 61, 53, 151, 91, 62, 66, 205, 30, 190, 99, 46, 220, 61, 242, 86, 14, 189, 192, 212, 119, 60, 49, 22, 159, 61, 23, 86, 229, 189, 231, 130, 0, 189, 149, 153, 117, 188, 177, 67, 117, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 19, 186, 190, 246, 132, 4, 190, 129, 28, 175, 61, 64, 201, 42, 63, 72, 152, 129, 190, 129, 48, 161, 62, 245, 66, 175, 190, 36, 228, 200, 189, 243, 121, 146, 61, 0, 22, 2, 62, 126, 133, 149, 62, 130, 181, 252, 61, 71, 16, 128, 189, 139, 112, 204, 190, 193, 159, 213, 62, 183, 91, 199, 62, 134, 141, 218, 190, 212, 83, 4, 191, 108, 81, 76, 62, 80, 4, 139, 63, 173, 0, 131, 62, 237, 247, 241, 62, 160, 241, 221, 62, 76, 224, 136, 62, 171, 194, 111, 62, 156, 127, 111, 190, 233, 165, 147, 62, 247, 249, 28, 190, 194, 49, 31, 191, 170, 1, 194, 189, 38, 199, 142, 190, 48, 137, 49, 191, 237, 164, 16, 189, 97, 65, 140, 61, 37, 140, 103, 61, 197, 18, 204, 62, 117, 153, 61, 190, 67, 88, 255, 189, 87, 74, 132, 190, 123, 218, 238, 61, 110, 204, 203, 60, 207, 41, 89, 190, 245, 130, 189, 188, 68, 0, 194, 62, 118, 133, 226, 61, 115, 243, 24, 189, 141, 39, 180, 61, 200, 9, 95, 62, 143, 198, 101, 61, 249, 95, 39, 190, 16, 240, 123, 62, 99, 238, 123, 60, 127, 131, 40, 62, 162, 250, 220, 189, 132, 211, 165, 190, 239, 13, 79, 62, 109, 8, 142, 190, 226, 17, 94, 60, 249, 77, 83, 189, 135, 103, 188, 190, 191, 147, 135, 62, 111, 173, 79, 189, 100, 242, 198, 60, 45, 63, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 72, 32, 190, 86, 21, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {23, 165, 32, 191, 124, 154, 88, 63, 44, 22, 204, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 205, 210, 63, 170, 207, 155, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}