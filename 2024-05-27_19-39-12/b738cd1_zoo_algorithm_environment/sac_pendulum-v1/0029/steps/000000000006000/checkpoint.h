// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 46, 73, 63, 156, 207, 3, 63, 46, 247, 1, 63, 175, 86, 16, 62, 33, 251, 33, 190, 196, 142, 137, 189, 28, 35, 110, 191, 155, 238, 162, 189, 225, 30, 131, 61, 17, 204, 100, 191, 35, 48, 161, 62, 42, 210, 217, 61, 133, 194, 87, 62, 94, 81, 225, 190, 249, 186, 43, 191, 164, 129, 42, 63, 109, 51, 15, 63, 132, 227, 187, 62, 121, 51, 73, 63, 190, 165, 4, 190, 78, 96, 101, 61, 80, 25, 174, 190, 130, 6, 29, 190, 116, 115, 31, 63, 148, 119, 107, 189, 2, 12, 47, 190, 112, 49, 226, 62, 235, 202, 137, 62, 181, 197, 58, 63, 155, 157, 189, 62, 4, 24, 163, 62, 153, 213, 163, 61, 136, 183, 106, 62, 72, 178, 241, 190, 223, 211, 123, 63, 187, 30, 138, 189, 106, 198, 225, 190, 41, 0, 207, 62, 11, 46, 39, 191, 26, 35, 206, 190, 71, 219, 124, 63, 209, 35, 45, 63, 123, 5, 23, 63, 171, 165, 132, 190, 9, 234, 207, 62, 20, 10, 10, 191, 7, 142, 168, 62, 223, 217, 151, 62, 203, 74, 197, 62, 123, 54, 124, 63, 35, 15, 108, 189, 182, 255, 94, 60, 249, 222, 78, 191, 42, 219, 163, 62, 51, 27, 5, 63, 49, 66, 105, 63, 85, 157, 198, 62, 146, 95, 242, 190, 127, 224, 73, 191, 136, 157, 128, 191, 27, 193, 27, 63, 245, 55, 145, 62, 164, 252, 0, 61, 130, 215, 171, 187, 173, 6, 78, 191, 241, 140, 1, 63, 194, 116, 211, 62, 244, 56, 89, 63, 126, 126, 245, 190, 14, 67, 149, 190, 32, 202, 34, 190, 255, 54, 90, 191, 136, 103, 195, 190, 133, 193, 13, 191, 9, 179, 233, 61, 50, 178, 92, 191, 72, 203, 150, 62, 96, 45, 144, 190, 117, 57, 204, 190, 178, 179, 137, 61, 37, 12, 30, 63, 191, 218, 97, 63, 225, 226, 26, 191, 129, 135, 134, 190, 244, 160, 78, 62, 36, 17, 254, 62, 17, 171, 229, 190, 155, 105, 128, 59, 118, 73, 153, 63, 19, 37, 2, 63, 66, 147, 105, 62, 82, 64, 70, 191, 105, 19, 165, 61, 250, 67, 49, 62, 194, 227, 103, 191, 54, 211, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 100, 233, 190, 160, 126, 37, 63, 80, 230, 205, 189, 73, 151, 88, 63, 170, 112, 242, 190, 97, 239, 60, 189, 238, 67, 52, 61, 64, 119, 116, 190, 243, 7, 147, 62, 51, 166, 25, 63, 153, 132, 169, 189, 104, 237, 118, 62, 18, 43, 231, 190, 36, 167, 133, 190, 72, 30, 109, 62, 121, 107, 0, 191, 34, 155, 237, 60, 98, 49, 166, 190, 215, 79, 31, 191, 184, 205, 159, 60, 229, 100, 234, 62, 90, 117, 30, 189, 213, 176, 105, 62, 108, 2, 70, 189, 74, 35, 207, 187, 231, 89, 172, 190, 68, 60, 179, 61, 18, 64, 218, 190, 85, 109, 164, 188, 188, 248, 31, 62, 232, 158, 30, 61, 249, 196, 200, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 154, 215, 190, 38, 14, 145, 62, 189, 90, 200, 62, 138, 13, 123, 62, 106, 89, 142, 60, 172, 120, 120, 190, 117, 63, 22, 191, 247, 163, 64, 62, 100, 19, 133, 61, 119, 205, 35, 190, 90, 198, 163, 190, 242, 199, 189, 189, 56, 46, 37, 189, 93, 22, 65, 190, 221, 152, 183, 190, 112, 154, 68, 62, 197, 108, 37, 191, 88, 220, 216, 60, 170, 30, 30, 190, 225, 165, 14, 62, 130, 110, 251, 190, 26, 72, 181, 188, 55, 219, 11, 61, 45, 179, 167, 61, 55, 67, 45, 63, 211, 208, 36, 62, 171, 150, 74, 62, 109, 152, 204, 60, 76, 183, 17, 189, 207, 110, 34, 190, 43, 91, 180, 61, 253, 16, 137, 62, 146, 136, 68, 61, 232, 0, 20, 190, 219, 158, 238, 61, 92, 240, 60, 190, 240, 139, 213, 61, 239, 69, 214, 189, 1, 236, 228, 188, 130, 109, 219, 189, 194, 1, 245, 61, 210, 172, 84, 187, 129, 26, 172, 61, 133, 217, 7, 62, 144, 67, 5, 190, 213, 106, 6, 62, 1, 126, 194, 59, 55, 165, 46, 190, 219, 250, 159, 187, 25, 252, 9, 61, 186, 255, 172, 188, 43, 220, 199, 60, 235, 9, 174, 189, 255, 55, 7, 62, 76, 6, 143, 60, 148, 119, 118, 188, 54, 103, 73, 189, 16, 60, 168, 189, 35, 244, 34, 189, 156, 230, 235, 61, 233, 26, 3, 190, 2, 46, 22, 190, 234, 164, 63, 190, 253, 127, 27, 60, 240, 207, 208, 61, 193, 201, 149, 59, 100, 31, 25, 62, 54, 36, 253, 189, 72, 74, 176, 61, 11, 165, 76, 61, 85, 90, 28, 190, 183, 108, 192, 60, 59, 13, 3, 61, 133, 194, 238, 58, 144, 53, 17, 61, 176, 199, 36, 190, 31, 28, 17, 189, 244, 120, 29, 190, 95, 50, 224, 188, 245, 145, 189, 189, 216, 193, 150, 189, 117, 203, 226, 189, 26, 253, 11, 62, 232, 207, 24, 190, 12, 200, 189, 187, 4, 162, 68, 190, 238, 58, 240, 189, 238, 141, 184, 189, 121, 28, 83, 61, 53, 89, 93, 61, 0, 107, 158, 61, 192, 222, 0, 62, 132, 58, 36, 62, 165, 18, 43, 189, 235, 211, 52, 61, 79, 212, 62, 190, 169, 28, 243, 62, 84, 112, 21, 191, 241, 179, 204, 189, 244, 112, 52, 189, 242, 116, 131, 189, 150, 199, 206, 59, 229, 92, 166, 62, 220, 116, 113, 61, 155, 136, 39, 189, 121, 151, 242, 188, 66, 66, 33, 62, 202, 235, 44, 190, 54, 138, 59, 190, 188, 150, 89, 189, 11, 116, 148, 189, 78, 177, 151, 190, 150, 218, 41, 62, 223, 88, 35, 190, 64, 166, 171, 62, 103, 152, 28, 61, 195, 203, 42, 62, 154, 235, 249, 61, 64, 240, 22, 190, 20, 77, 165, 190, 142, 63, 159, 190, 17, 16, 166, 61, 186, 40, 215, 60, 245, 87, 92, 59, 231, 46, 45, 190, 209, 73, 36, 188, 105, 146, 201, 190, 223, 136, 139, 190, 66, 120, 91, 62, 243, 229, 18, 62, 195, 10, 3, 190, 246, 45, 218, 61, 158, 54, 99, 189, 103, 9, 243, 61, 175, 80, 41, 189, 78, 140, 93, 188, 125, 233, 163, 61, 77, 204, 6, 62, 221, 96, 146, 61, 218, 16, 46, 61, 5, 136, 37, 191, 59, 65, 12, 62, 17, 125, 212, 61, 233, 63, 81, 190, 197, 195, 134, 62, 187, 22, 237, 59, 69, 236, 235, 61, 209, 112, 73, 190, 167, 8, 128, 62, 109, 22, 24, 62, 69, 202, 142, 61, 231, 113, 181, 190, 114, 192, 56, 190, 84, 113, 50, 191, 253, 149, 52, 62, 47, 117, 31, 61, 203, 203, 69, 189, 228, 166, 43, 62, 192, 223, 56, 189, 109, 208, 19, 190, 211, 170, 178, 190, 48, 209, 227, 60, 202, 25, 34, 190, 87, 46, 54, 190, 12, 103, 133, 62, 11, 122, 62, 190, 8, 150, 150, 62, 130, 218, 216, 61, 225, 249, 117, 190, 4, 141, 11, 190, 228, 48, 166, 61, 127, 182, 225, 61, 174, 217, 30, 62, 10, 200, 85, 61, 243, 171, 217, 62, 198, 171, 25, 190, 111, 134, 83, 62, 14, 23, 170, 62, 213, 234, 7, 191, 17, 110, 51, 62, 72, 103, 229, 62, 67, 176, 133, 59, 205, 42, 247, 60, 32, 86, 84, 62, 87, 211, 31, 62, 206, 5, 33, 62, 61, 233, 5, 190, 157, 168, 114, 62, 250, 66, 74, 59, 193, 33, 34, 189, 87, 18, 51, 61, 114, 172, 139, 62, 29, 168, 2, 61, 117, 169, 38, 62, 143, 233, 207, 62, 21, 107, 225, 61, 110, 5, 91, 190, 175, 188, 209, 62, 179, 197, 27, 187, 203, 104, 199, 190, 43, 179, 23, 61, 248, 23, 75, 190, 248, 117, 136, 61, 99, 193, 188, 189, 135, 43, 8, 62, 244, 147, 32, 191, 243, 24, 139, 189, 114, 255, 128, 191, 120, 247, 98, 62, 38, 228, 225, 190, 183, 75, 209, 61, 112, 22, 71, 62, 91, 216, 51, 190, 32, 242, 122, 62, 138, 89, 91, 62, 148, 70, 206, 61, 149, 250, 201, 62, 206, 86, 195, 189, 203, 63, 127, 190, 130, 60, 28, 189, 149, 157, 195, 61, 88, 79, 41, 191, 221, 188, 13, 189, 166, 73, 14, 61, 228, 53, 159, 61, 169, 83, 135, 189, 237, 49, 210, 189, 180, 134, 252, 189, 249, 122, 141, 189, 156, 224, 239, 188, 76, 143, 12, 62, 13, 25, 67, 190, 75, 225, 175, 189, 176, 188, 8, 190, 59, 232, 128, 61, 87, 43, 55, 61, 70, 234, 119, 188, 186, 90, 140, 60, 55, 226, 246, 60, 50, 14, 225, 189, 244, 198, 21, 190, 97, 98, 57, 190, 251, 235, 66, 189, 217, 212, 165, 188, 72, 116, 25, 188, 115, 255, 173, 61, 97, 4, 147, 189, 238, 7, 134, 184, 220, 17, 243, 189, 107, 89, 12, 190, 49, 74, 156, 61, 192, 251, 131, 189, 31, 105, 197, 61, 247, 221, 67, 190, 239, 239, 41, 189, 18, 218, 148, 189, 48, 235, 33, 190, 2, 30, 132, 188, 68, 197, 214, 187, 98, 106, 69, 190, 46, 215, 129, 189, 0, 252, 97, 61, 244, 46, 249, 188, 68, 193, 213, 59, 115, 224, 188, 61, 245, 189, 162, 61, 88, 203, 215, 189, 208, 197, 23, 190, 86, 183, 11, 189, 219, 124, 248, 188, 113, 72, 11, 190, 80, 183, 26, 60, 63, 188, 165, 189, 16, 51, 188, 189, 108, 1, 27, 190, 122, 134, 58, 61, 116, 16, 187, 189, 157, 139, 170, 60, 187, 42, 18, 61, 17, 228, 14, 190, 11, 45, 207, 61, 193, 227, 153, 61, 122, 166, 4, 62, 170, 111, 209, 59, 196, 52, 112, 189, 161, 211, 113, 61, 111, 254, 163, 60, 132, 56, 145, 189, 68, 126, 145, 61, 93, 100, 54, 188, 54, 98, 36, 61, 165, 83, 253, 190, 176, 245, 244, 60, 55, 201, 81, 62, 78, 245, 146, 62, 206, 94, 172, 189, 172, 230, 188, 189, 95, 227, 188, 189, 229, 117, 185, 61, 122, 64, 41, 190, 182, 83, 124, 189, 88, 5, 192, 189, 160, 168, 92, 62, 4, 2, 169, 190, 78, 211, 2, 190, 116, 73, 167, 190, 85, 101, 167, 190, 63, 127, 222, 61, 75, 55, 12, 62, 189, 145, 62, 61, 17, 231, 9, 61, 165, 162, 157, 188, 242, 195, 130, 59, 191, 158, 237, 61, 121, 48, 174, 189, 176, 63, 232, 61, 226, 6, 167, 61, 227, 190, 27, 190, 26, 248, 190, 188, 51, 92, 107, 62, 168, 119, 169, 190, 62, 40, 94, 61, 223, 157, 47, 190, 194, 109, 14, 191, 200, 71, 156, 62, 239, 50, 138, 190, 87, 172, 196, 62, 172, 151, 171, 61, 94, 241, 90, 60, 95, 121, 151, 190, 210, 249, 0, 191, 78, 148, 213, 190, 22, 226, 6, 190, 92, 235, 28, 190, 94, 166, 120, 190, 191, 193, 195, 61, 133, 89, 2, 189, 218, 157, 200, 189, 251, 128, 33, 189, 97, 1, 231, 187, 90, 20, 226, 61, 134, 225, 244, 190, 97, 90, 149, 189, 163, 101, 201, 61, 248, 100, 38, 188, 84, 103, 18, 61, 175, 215, 76, 190, 255, 25, 76, 61, 203, 251, 10, 61, 188, 136, 62, 61, 182, 8, 6, 190, 73, 231, 155, 62, 12, 161, 250, 189, 44, 56, 223, 189, 196, 10, 204, 189, 215, 122, 75, 190, 142, 68, 144, 62, 176, 76, 255, 188, 137, 129, 49, 62, 39, 52, 131, 61, 169, 22, 210, 187, 133, 97, 59, 190, 152, 190, 118, 61, 6, 26, 196, 190, 31, 204, 208, 187, 47, 138, 103, 62, 10, 162, 107, 189, 91, 9, 108, 62, 116, 80, 59, 190, 85, 179, 165, 61, 101, 184, 2, 62, 90, 123, 14, 187, 149, 100, 217, 60, 250, 198, 141, 61, 200, 89, 102, 61, 212, 137, 163, 187, 49, 85, 191, 189, 14, 44, 232, 189, 93, 22, 48, 62, 233, 178, 69, 63, 96, 234, 130, 188, 165, 198, 107, 61, 245, 56, 134, 190, 41, 253, 82, 62, 235, 21, 138, 189, 65, 187, 42, 190, 71, 123, 1, 62, 3, 69, 133, 189, 247, 26, 146, 189, 44, 9, 6, 190, 146, 213, 1, 190, 35, 212, 8, 190, 145, 236, 4, 190, 236, 130, 13, 62, 174, 129, 80, 61, 181, 221, 13, 190, 21, 3, 156, 61, 54, 95, 180, 61, 247, 34, 194, 61, 229, 82, 32, 60, 118, 105, 249, 189, 140, 178, 196, 189, 62, 101, 42, 190, 251, 234, 156, 61, 70, 115, 217, 61, 135, 134, 33, 189, 138, 113, 142, 189, 123, 179, 248, 189, 37, 214, 174, 61, 37, 144, 17, 190, 172, 107, 27, 62, 135, 205, 120, 61, 23, 75, 32, 190, 7, 111, 12, 190, 20, 212, 248, 61, 134, 33, 228, 189, 167, 41, 16, 190, 91, 118, 92, 61, 151, 221, 125, 62, 4, 126, 127, 61, 83, 31, 144, 190, 42, 95, 96, 62, 32, 203, 112, 190, 83, 21, 26, 190, 82, 231, 251, 189, 169, 180, 128, 190, 95, 71, 143, 189, 213, 50, 102, 62, 127, 145, 141, 61, 56, 130, 80, 191, 178, 103, 37, 60, 16, 92, 120, 191, 54, 78, 132, 61, 108, 32, 128, 190, 230, 177, 99, 62, 82, 167, 24, 62, 162, 152, 27, 190, 56, 233, 251, 62, 126, 113, 143, 62, 160, 224, 143, 62, 125, 135, 185, 62, 7, 35, 6, 62, 23, 255, 7, 188, 208, 146, 147, 190, 67, 151, 78, 62, 64, 179, 71, 191, 75, 255, 73, 189, 250, 170, 39, 60, 226, 168, 173, 189, 112, 12, 252, 188, 151, 87, 49, 61, 103, 199, 27, 62, 125, 251, 85, 190, 126, 10, 58, 187, 132, 6, 153, 62, 55, 244, 7, 190, 31, 236, 26, 62, 11, 4, 148, 189, 115, 159, 45, 190, 201, 178, 36, 62, 27, 172, 97, 190, 11, 46, 6, 62, 219, 82, 177, 189, 47, 228, 143, 62, 109, 124, 83, 189, 22, 6, 210, 189, 119, 116, 150, 189, 27, 239, 63, 191, 234, 12, 162, 190, 7, 239, 152, 187, 191, 141, 244, 61, 198, 254, 18, 191, 18, 70, 230, 186, 110, 60, 212, 62, 129, 130, 61, 62, 67, 6, 15, 190, 2, 133, 158, 190, 124, 76, 253, 61, 98, 176, 168, 189, 226, 129, 37, 191, 218, 3, 131, 190, 190, 165, 38, 62, 5, 32, 173, 188, 235, 231, 164, 188, 101, 89, 195, 62, 5, 102, 130, 60, 235, 212, 106, 62, 214, 246, 14, 61, 55, 109, 108, 62, 123, 47, 211, 189, 167, 7, 249, 189, 226, 125, 191, 190, 144, 237, 206, 189, 158, 74, 65, 189, 121, 85, 233, 189, 217, 170, 138, 62, 39, 98, 49, 189, 149, 180, 35, 62, 114, 174, 148, 190, 119, 121, 76, 62, 58, 199, 113, 62, 194, 187, 48, 190, 95, 253, 134, 189, 63, 28, 28, 190, 6, 189, 155, 61, 107, 185, 74, 190, 171, 132, 21, 62, 174, 69, 21, 63, 42, 77, 181, 189, 244, 190, 33, 61, 176, 36, 132, 61, 140, 253, 68, 62, 63, 47, 234, 62, 55, 214, 242, 60, 235, 227, 90, 188, 20, 244, 10, 190, 244, 62, 191, 190, 231, 207, 176, 61, 252, 109, 150, 62, 156, 225, 93, 189, 194, 167, 103, 60, 251, 198, 63, 190, 78, 184, 129, 62, 205, 229, 81, 62, 233, 204, 139, 61, 11, 122, 131, 189, 18, 12, 85, 62, 68, 34, 182, 190, 38, 72, 70, 62, 138, 73, 182, 190, 42, 129, 162, 62, 166, 73, 1, 60, 243, 233, 60, 62, 184, 126, 54, 62, 57, 225, 5, 188, 110, 59, 58, 62, 155, 21, 92, 190, 105, 55, 51, 62, 232, 27, 103, 60, 210, 101, 4, 191, 65, 211, 32, 62, 57, 33, 175, 189, 115, 219, 109, 190, 109, 158, 175, 60, 251, 133, 145, 62, 3, 56, 138, 62, 193, 165, 59, 62, 179, 42, 221, 188, 50, 164, 116, 190, 68, 162, 13, 63, 180, 160, 19, 62, 237, 245, 171, 190, 15, 60, 47, 62, 119, 161, 113, 189, 246, 195, 140, 62, 218, 188, 7, 189, 140, 147, 134, 62, 247, 11, 5, 191, 254, 88, 140, 61, 62, 127, 123, 191, 95, 240, 91, 62, 236, 88, 30, 191, 133, 8, 239, 62, 136, 37, 60, 62, 117, 217, 61, 188, 91, 151, 96, 62, 64, 103, 30, 62, 186, 237, 200, 188, 66, 3, 50, 62, 57, 178, 222, 58, 76, 107, 6, 190, 134, 135, 14, 190, 164, 33, 91, 62, 113, 251, 168, 190, 13, 84, 32, 190, 255, 235, 48, 60, 229, 93, 155, 190, 229, 182, 91, 61, 121, 208, 35, 62, 242, 187, 33, 58, 83, 37, 133, 62, 236, 195, 159, 190, 209, 106, 183, 189, 34, 242, 20, 62, 225, 123, 150, 61, 179, 75, 87, 60, 85, 79, 94, 190, 221, 110, 219, 189, 255, 41, 86, 60, 153, 107, 84, 61, 34, 235, 115, 190, 194, 127, 131, 62, 225, 132, 136, 61, 104, 210, 139, 62, 243, 175, 44, 190, 157, 115, 94, 189, 41, 144, 123, 62, 82, 45, 1, 190, 222, 131, 39, 62, 153, 72, 34, 190, 36, 186, 72, 62, 106, 168, 97, 188, 112, 61, 78, 62, 132, 46, 134, 62, 199, 124, 28, 190, 30, 27, 227, 61, 220, 17, 50, 62, 236, 67, 73, 189, 115, 48, 242, 190, 248, 99, 39, 62, 43, 75, 127, 62, 83, 111, 146, 60, 74, 84, 124, 190, 194, 234, 138, 190, 104, 73, 27, 62, 146, 20, 139, 62, 96, 160, 153, 59, 245, 211, 105, 59, 151, 1, 152, 188, 29, 123, 205, 62, 89, 182, 7, 191, 241, 250, 54, 62, 218, 138, 18, 190, 223, 77, 95, 62, 136, 166, 239, 189, 50, 145, 12, 61, 140, 0, 152, 190, 138, 227, 189, 191, 52, 160, 131, 61, 217, 173, 54, 190, 178, 22, 78, 190, 75, 220, 139, 191, 164, 42, 120, 62, 148, 62, 236, 62, 27, 179, 45, 62, 42, 245, 43, 62, 145, 183, 42, 191, 157, 75, 112, 61, 79, 144, 1, 62, 160, 175, 4, 191, 145, 166, 31, 62, 15, 161, 232, 189, 34, 89, 105, 61, 249, 0, 73, 62, 249, 138, 47, 62, 19, 144, 165, 60, 77, 80, 97, 190, 1, 249, 150, 190, 139, 105, 133, 190, 250, 13, 180, 188, 121, 80, 114, 62, 46, 86, 68, 61, 0, 33, 98, 62, 34, 192, 13, 62, 58, 121, 161, 189, 247, 29, 157, 190, 132, 249, 92, 62, 222, 151, 137, 188, 127, 187, 1, 61, 137, 182, 62, 62, 121, 158, 64, 189, 10, 177, 220, 61, 168, 227, 58, 61, 238, 213, 5, 62, 52, 106, 221, 189, 213, 0, 116, 61, 44, 157, 172, 188, 116, 238, 239, 189, 62, 3, 14, 62, 161, 10, 177, 188, 104, 150, 248, 190, 235, 246, 151, 189, 199, 74, 96, 190, 98, 217, 245, 61, 82, 194, 90, 62, 58, 50, 228, 61, 169, 41, 90, 62, 123, 233, 90, 190, 145, 173, 202, 62, 151, 164, 201, 60, 98, 45, 118, 61, 186, 28, 229, 189, 33, 109, 180, 190, 174, 13, 155, 62, 170, 210, 45, 191, 194, 52, 128, 61, 206, 58, 25, 190, 164, 212, 145, 61, 20, 177, 21, 190, 74, 206, 145, 62, 15, 137, 224, 189, 183, 51, 107, 191, 41, 217, 0, 189, 62, 38, 146, 190, 5, 184, 169, 190, 10, 181, 136, 191, 225, 13, 83, 62, 198, 42, 36, 189, 235, 133, 82, 62, 2, 96, 188, 62, 152, 45, 7, 191, 168, 56, 84, 62, 192, 174, 111, 62, 118, 22, 60, 190, 14, 87, 18, 190, 150, 210, 175, 62, 166, 106, 9, 191, 250, 223, 35, 191, 95, 237, 161, 62, 80, 162, 169, 189, 79, 251, 11, 63, 71, 87, 79, 190, 230, 208, 17, 61, 12, 199, 218, 189, 46, 197, 143, 61, 168, 52, 61, 191, 168, 11, 57, 190, 203, 200, 183, 190, 116, 84, 239, 62, 239, 220, 241, 190, 219, 41, 172, 189, 110, 217, 158, 62, 178, 40, 254, 190, 185, 213, 21, 189, 7, 251, 177, 62, 237, 70, 6, 189, 33, 77, 23, 61, 153, 125, 6, 62, 106, 222, 170, 188, 66, 152, 71, 189, 31, 223, 73, 190, 199, 93, 183, 62, 96, 134, 106, 60, 147, 151, 46, 190, 219, 222, 165, 62, 76, 230, 169, 62, 148, 182, 228, 189, 130, 15, 50, 61, 12, 177, 226, 61, 242, 134, 69, 62, 237, 196, 186, 187, 56, 123, 127, 190, 116, 111, 225, 190, 0, 127, 66, 190, 146, 220, 86, 190, 116, 122, 147, 62, 171, 35, 29, 190, 151, 108, 191, 62, 185, 230, 132, 62, 159, 224, 62, 61, 97, 186, 144, 189, 142, 218, 103, 62, 85, 86, 95, 62, 210, 113, 91, 190, 106, 48, 32, 189, 20, 194, 181, 61, 48, 146, 225, 189, 162, 134, 130, 190, 21, 39, 188, 60, 234, 105, 79, 62, 136, 234, 206, 190, 165, 54, 14, 62, 134, 198, 222, 189, 235, 143, 140, 61, 250, 21, 106, 62, 202, 54, 38, 189, 33, 218, 198, 190, 44, 25, 80, 190, 190, 44, 76, 190, 65, 112, 91, 188, 32, 236, 4, 62, 224, 218, 40, 62, 4, 84, 115, 62, 94, 228, 252, 189, 248, 224, 165, 62, 228, 55, 39, 62, 42, 107, 57, 62, 142, 8, 93, 61, 79, 31, 201, 189, 135, 251, 227, 61, 17, 115, 47, 191, 253, 86, 42, 189, 27, 84, 239, 61, 147, 200, 95, 62, 176, 38, 32, 190, 251, 252, 14, 62, 183, 190, 104, 190, 21, 72, 115, 191, 222, 88, 169, 62, 245, 197, 185, 189, 24, 32, 101, 190, 40, 152, 137, 191, 215, 224, 27, 62, 238, 77, 220, 60, 168, 148, 31, 62, 175, 133, 153, 62, 82, 232, 203, 190, 199, 50, 166, 189, 81, 54, 67, 62, 32, 136, 210, 189, 50, 221, 89, 190, 160, 225, 54, 187, 92, 225, 158, 60, 6, 17, 46, 62, 4, 15, 172, 189, 30, 146, 166, 61, 248, 25, 38, 62, 21, 231, 203, 189, 183, 36, 71, 62, 198, 16, 38, 190, 77, 168, 166, 189, 245, 162, 137, 61, 148, 39, 176, 189, 23, 201, 228, 60, 59, 82, 86, 60, 86, 210, 3, 62, 190, 124, 136, 190, 11, 98, 20, 61, 149, 173, 42, 190, 59, 62, 60, 188, 164, 234, 146, 59, 162, 177, 24, 190, 181, 27, 117, 190, 74, 164, 193, 60, 203, 28, 55, 62, 18, 41, 40, 190, 176, 246, 26, 61, 166, 47, 49, 190, 214, 179, 188, 61, 69, 46, 115, 61, 8, 234, 91, 190, 93, 8, 73, 189, 79, 89, 12, 190, 88, 187, 197, 61, 228, 21, 155, 190, 168, 61, 237, 190, 102, 45, 39, 188, 140, 64, 129, 190, 164, 55, 144, 62, 125, 214, 65, 61, 80, 188, 197, 190, 13, 129, 138, 190, 145, 243, 188, 189, 154, 174, 89, 190, 233, 27, 236, 189, 199, 124, 63, 190, 229, 178, 93, 62, 227, 98, 166, 189, 237, 8, 31, 190, 230, 236, 158, 61, 221, 81, 142, 61, 135, 5, 95, 62, 101, 119, 195, 60, 143, 119, 212, 190, 118, 33, 173, 61, 94, 53, 247, 189, 184, 39, 23, 189, 95, 240, 163, 61, 47, 123, 128, 190, 111, 192, 239, 188, 134, 254, 193, 60, 105, 220, 143, 190, 232, 134, 220, 59, 187, 104, 135, 62, 73, 69, 159, 189, 86, 207, 48, 62, 144, 141, 106, 60, 87, 249, 92, 188, 66, 90, 153, 190, 23, 251, 134, 62, 239, 241, 158, 189, 234, 189, 23, 188, 152, 40, 149, 189, 127, 213, 168, 188, 174, 14, 178, 187, 128, 120, 216, 188, 80, 37, 60, 62, 18, 171, 153, 61, 171, 85, 47, 62, 249, 171, 75, 190, 131, 112, 194, 62, 3, 162, 48, 190, 137, 254, 171, 61, 154, 117, 8, 190, 41, 251, 159, 62, 59, 162, 224, 189, 225, 211, 39, 62, 97, 214, 228, 189, 117, 4, 6, 190, 10, 2, 31, 190, 122, 220, 184, 189, 238, 70, 120, 190, 97, 96, 17, 62, 102, 193, 8, 190, 121, 64, 10, 190, 40, 195, 48, 187, 228, 135, 101, 188, 223, 231, 38, 190, 56, 174, 31, 191, 217, 98, 132, 190, 80, 209, 98, 62, 132, 123, 211, 190, 22, 137, 147, 190, 164, 137, 99, 190, 69, 17, 203, 61, 199, 145, 212, 190, 43, 127, 153, 190, 225, 233, 146, 190, 105, 103, 117, 190, 68, 107, 164, 61, 145, 113, 204, 60, 36, 239, 33, 190, 158, 162, 135, 190, 21, 202, 47, 61, 126, 187, 253, 59, 15, 89, 204, 61, 215, 215, 226, 61, 226, 234, 43, 62, 133, 162, 119, 61, 46, 218, 213, 61, 243, 19, 26, 190, 215, 85, 254, 190, 186, 90, 9, 190, 153, 113, 222, 62, 174, 211, 5, 190, 67, 65, 135, 60, 63, 232, 0, 62, 186, 246, 48, 187, 56, 4, 21, 62, 250, 25, 164, 189, 160, 255, 68, 189, 66, 153, 134, 61, 179, 116, 42, 61, 198, 176, 39, 190, 212, 200, 138, 61, 182, 45, 24, 190, 118, 243, 15, 190, 70, 158, 57, 61, 54, 7, 93, 189, 67, 180, 180, 189, 124, 69, 31, 190, 63, 84, 28, 62, 3, 81, 72, 190, 95, 86, 139, 61, 196, 182, 110, 53, 89, 54, 233, 189, 28, 13, 18, 62, 4, 218, 53, 190, 227, 231, 27, 190, 69, 71, 7, 190, 134, 4, 8, 62, 134, 136, 25, 189, 212, 65, 25, 189, 77, 211, 191, 61, 186, 18, 165, 61, 249, 16, 220, 189, 43, 70, 113, 189, 230, 4, 52, 190, 228, 201, 182, 61, 245, 17, 129, 61, 82, 104, 203, 62, 134, 250, 170, 60, 3, 185, 129, 62, 56, 215, 33, 62, 131, 127, 177, 190, 46, 120, 5, 62, 161, 196, 108, 189, 187, 218, 0, 190, 59, 60, 12, 62, 117, 73, 34, 62, 6, 139, 44, 62, 20, 137, 128, 61, 185, 74, 103, 62, 27, 241, 243, 189, 41, 86, 116, 62, 108, 143, 57, 190, 251, 255, 140, 62, 25, 12, 185, 188, 77, 27, 62, 62, 136, 139, 204, 189, 235, 227, 21, 189, 221, 248, 147, 62, 69, 194, 0, 62, 119, 209, 66, 61, 198, 160, 251, 188, 35, 236, 19, 60, 142, 133, 12, 62, 143, 2, 192, 190, 130, 248, 245, 59, 53, 42, 27, 59, 133, 133, 83, 61, 202, 193, 217, 61, 76, 209, 170, 189, 252, 14, 69, 61, 31, 111, 63, 191, 1, 98, 153, 190, 30, 102, 129, 62, 146, 95, 116, 190, 168, 101, 200, 190, 241, 160, 98, 190, 222, 88, 184, 189, 27, 132, 31, 191, 152, 59, 204, 60, 148, 20, 184, 190, 68, 150, 14, 190, 247, 93, 64, 190, 76, 97, 3, 190, 99, 13, 23, 188, 69, 244, 130, 190, 50, 249, 5, 62, 195, 15, 166, 61, 244, 111, 99, 186, 127, 154, 84, 189, 71, 189, 53, 62, 46, 81, 102, 186, 84, 106, 178, 187, 36, 20, 249, 189, 30, 193, 195, 190, 55, 218, 118, 190, 11, 10, 0, 63, 26, 188, 199, 189, 199, 242, 22, 62, 7, 18, 162, 61, 234, 240, 207, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 135, 66, 62, 192, 128, 168, 189, 238, 52, 87, 61, 137, 234, 138, 190, 102, 138, 140, 189, 116, 226, 80, 62, 134, 169, 239, 61, 66, 128, 40, 60, 86, 210, 39, 190, 42, 72, 247, 61, 10, 47, 137, 186, 93, 188, 58, 190, 141, 108, 176, 189, 48, 207, 94, 62, 123, 131, 216, 61, 206, 216, 98, 190, 13, 192, 46, 189, 157, 128, 104, 62, 238, 28, 115, 57, 200, 197, 62, 62, 84, 97, 137, 189, 242, 56, 173, 61, 36, 52, 78, 62, 68, 241, 233, 189, 16, 125, 248, 61, 253, 169, 120, 189, 230, 182, 103, 188, 133, 128, 187, 61, 148, 134, 173, 189, 245, 60, 201, 188, 173, 170, 146, 188, 198, 205, 211, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 221, 181, 190, 246, 132, 4, 190, 80, 29, 175, 61, 102, 208, 248, 62, 167, 15, 113, 190, 162, 189, 151, 62, 225, 52, 170, 190, 36, 228, 200, 189, 243, 121, 146, 61, 96, 173, 181, 61, 113, 136, 133, 62, 84, 189, 200, 61, 71, 16, 128, 189, 127, 179, 191, 190, 67, 76, 186, 62, 119, 172, 164, 62, 190, 242, 174, 190, 181, 201, 255, 190, 134, 32, 60, 62, 253, 147, 134, 63, 195, 88, 137, 62, 162, 135, 0, 63, 120, 106, 189, 62, 190, 82, 143, 62, 255, 153, 140, 62, 90, 165, 157, 189, 49, 34, 135, 62, 239, 70, 162, 189, 184, 47, 236, 190, 253, 56, 196, 189, 197, 92, 120, 190, 74, 205, 20, 191, 102, 118, 107, 59, 97, 65, 140, 61, 57, 138, 103, 61, 64, 194, 217, 62, 183, 0, 85, 190, 100, 82, 209, 189, 226, 15, 100, 190, 123, 218, 238, 61, 110, 204, 203, 60, 186, 210, 26, 190, 16, 156, 172, 189, 84, 66, 145, 62, 118, 133, 226, 61, 180, 96, 9, 189, 119, 101, 182, 61, 151, 75, 91, 62, 127, 82, 87, 61, 170, 241, 70, 190, 227, 212, 102, 62, 254, 83, 53, 61, 227, 29, 16, 62, 121, 109, 2, 190, 213, 113, 143, 190, 164, 104, 60, 62, 221, 30, 120, 190, 20, 229, 216, 60, 234, 98, 255, 189, 69, 234, 162, 190, 26, 87, 183, 62, 190, 244, 70, 189, 197, 96, 2, 61, 94, 230, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 186, 50, 190, 131, 12, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {244, 233, 61, 63, 3, 74, 242, 63, 226, 132, 94, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 162, 14, 192, 19, 48, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}