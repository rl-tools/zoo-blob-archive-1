// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 123, 84, 63, 39, 23, 45, 63, 226, 253, 17, 63, 151, 73, 111, 60, 243, 144, 40, 191, 155, 227, 237, 189, 10, 235, 177, 191, 156, 255, 187, 190, 88, 179, 99, 60, 55, 8, 106, 191, 40, 33, 144, 62, 87, 15, 43, 62, 162, 161, 234, 62, 6, 63, 40, 191, 11, 176, 50, 191, 191, 38, 43, 63, 49, 60, 113, 63, 89, 146, 178, 62, 231, 157, 81, 63, 221, 21, 138, 189, 31, 71, 110, 189, 33, 233, 67, 191, 181, 66, 131, 62, 90, 123, 245, 62, 147, 126, 123, 189, 15, 117, 131, 62, 80, 109, 223, 62, 62, 96, 189, 62, 197, 37, 188, 63, 201, 106, 155, 62, 125, 235, 149, 62, 145, 196, 196, 62, 147, 111, 146, 62, 255, 213, 27, 191, 2, 28, 139, 63, 180, 5, 189, 189, 97, 134, 177, 190, 202, 117, 11, 63, 11, 104, 23, 191, 162, 109, 75, 191, 119, 191, 247, 63, 185, 185, 203, 62, 59, 78, 137, 62, 62, 87, 169, 190, 180, 217, 199, 62, 10, 174, 27, 191, 185, 218, 105, 63, 58, 202, 81, 62, 137, 211, 189, 62, 80, 174, 187, 63, 200, 41, 40, 61, 162, 244, 217, 61, 21, 3, 157, 191, 245, 195, 219, 62, 81, 177, 225, 62, 220, 60, 138, 63, 96, 114, 192, 62, 162, 19, 204, 190, 28, 52, 15, 192, 69, 34, 28, 191, 220, 237, 23, 63, 236, 54, 122, 62, 31, 98, 37, 189, 209, 132, 18, 61, 139, 53, 239, 190, 76, 192, 213, 62, 44, 219, 200, 62, 139, 123, 141, 63, 61, 41, 202, 190, 107, 10, 39, 191, 25, 97, 119, 191, 84, 206, 201, 190, 193, 95, 40, 191, 169, 149, 20, 191, 19, 237, 236, 187, 239, 49, 71, 191, 205, 203, 88, 62, 21, 6, 92, 190, 191, 167, 197, 190, 108, 146, 171, 62, 205, 41, 13, 63, 55, 96, 98, 63, 200, 19, 133, 191, 82, 201, 145, 190, 244, 99, 233, 62, 153, 194, 8, 63, 176, 80, 38, 190, 163, 90, 130, 60, 223, 151, 232, 63, 110, 16, 230, 62, 91, 165, 161, 62, 209, 192, 98, 191, 204, 92, 47, 61, 168, 114, 171, 62, 112, 37, 159, 191, 65, 149, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 116, 250, 190, 174, 251, 161, 62, 150, 157, 160, 60, 201, 153, 110, 63, 4, 84, 194, 190, 69, 227, 153, 189, 95, 87, 60, 60, 253, 227, 251, 190, 78, 204, 17, 62, 241, 92, 21, 63, 126, 146, 31, 190, 176, 254, 125, 62, 198, 148, 175, 190, 154, 8, 158, 190, 157, 199, 140, 189, 161, 240, 15, 191, 162, 127, 160, 61, 165, 216, 80, 190, 153, 9, 79, 191, 159, 152, 27, 189, 136, 203, 129, 62, 209, 33, 125, 190, 25, 150, 211, 61, 21, 230, 150, 190, 64, 239, 63, 189, 56, 230, 11, 191, 7, 122, 185, 61, 42, 200, 8, 191, 47, 80, 240, 60, 28, 196, 50, 62, 102, 205, 5, 62, 82, 205, 254, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 196, 89, 191, 1, 228, 167, 62, 37, 54, 246, 62, 24, 78, 133, 62, 136, 121, 125, 61, 83, 72, 6, 191, 224, 111, 196, 190, 114, 19, 58, 62, 190, 8, 187, 61, 110, 1, 221, 189, 224, 8, 235, 190, 98, 50, 162, 189, 82, 199, 37, 189, 30, 107, 85, 188, 53, 126, 158, 190, 238, 86, 151, 62, 195, 54, 70, 191, 211, 148, 106, 189, 150, 87, 13, 191, 172, 211, 69, 62, 172, 227, 14, 191, 47, 228, 186, 189, 91, 21, 8, 189, 25, 22, 184, 61, 81, 81, 18, 63, 47, 252, 52, 62, 52, 98, 127, 62, 90, 155, 110, 62, 211, 231, 177, 189, 132, 163, 117, 60, 160, 238, 15, 62, 114, 167, 196, 62, 146, 136, 68, 61, 232, 0, 20, 190, 219, 158, 238, 61, 92, 240, 60, 190, 240, 139, 213, 61, 239, 69, 214, 189, 1, 236, 228, 188, 130, 109, 219, 189, 194, 1, 245, 61, 210, 172, 84, 187, 129, 26, 172, 61, 133, 217, 7, 62, 144, 67, 5, 190, 213, 106, 6, 62, 1, 126, 194, 59, 55, 165, 46, 190, 219, 250, 159, 187, 25, 252, 9, 61, 186, 255, 172, 188, 43, 220, 199, 60, 235, 9, 174, 189, 255, 55, 7, 62, 76, 6, 143, 60, 148, 119, 118, 188, 54, 103, 73, 189, 16, 60, 168, 189, 35, 244, 34, 189, 156, 230, 235, 61, 233, 26, 3, 190, 2, 46, 22, 190, 234, 164, 63, 190, 253, 127, 27, 60, 156, 235, 52, 62, 18, 18, 85, 61, 162, 113, 68, 62, 184, 65, 128, 189, 224, 28, 39, 61, 254, 254, 243, 61, 146, 246, 228, 189, 131, 1, 115, 61, 138, 171, 199, 61, 207, 70, 158, 61, 217, 8, 182, 61, 29, 232, 77, 190, 52, 181, 190, 189, 8, 53, 6, 190, 160, 70, 36, 61, 92, 240, 204, 189, 247, 53, 76, 189, 88, 116, 147, 189, 132, 42, 30, 62, 69, 164, 21, 190, 65, 237, 31, 61, 152, 211, 24, 190, 192, 216, 238, 189, 17, 93, 193, 189, 168, 133, 185, 61, 187, 117, 93, 61, 75, 222, 16, 62, 54, 249, 38, 62, 62, 7, 53, 62, 117, 201, 121, 187, 55, 193, 206, 61, 198, 158, 28, 190, 12, 40, 207, 62, 102, 58, 111, 191, 24, 107, 129, 190, 187, 250, 50, 61, 99, 167, 44, 190, 46, 31, 82, 188, 38, 1, 84, 62, 241, 119, 65, 189, 228, 137, 235, 189, 238, 66, 69, 60, 116, 240, 176, 61, 119, 190, 13, 61, 255, 1, 237, 62, 122, 129, 122, 61, 70, 241, 30, 190, 152, 26, 113, 190, 103, 76, 176, 62, 113, 208, 246, 190, 135, 128, 184, 62, 124, 15, 61, 61, 139, 18, 69, 62, 244, 169, 245, 188, 198, 207, 209, 61, 202, 126, 108, 189, 33, 211, 12, 191, 128, 11, 169, 62, 80, 72, 143, 188, 126, 148, 88, 190, 115, 232, 8, 191, 123, 35, 46, 61, 244, 232, 92, 191, 153, 222, 159, 191, 206, 70, 142, 62, 9, 150, 244, 61, 229, 18, 105, 190, 77, 48, 82, 61, 222, 54, 23, 190, 17, 156, 17, 62, 15, 224, 209, 188, 48, 77, 121, 60, 130, 222, 212, 61, 224, 179, 20, 62, 75, 75, 172, 61, 195, 232, 56, 62, 1, 3, 148, 191, 221, 23, 124, 61, 7, 48, 12, 62, 134, 2, 194, 190, 57, 178, 40, 62, 16, 86, 255, 58, 240, 162, 4, 62, 45, 128, 98, 190, 50, 252, 108, 62, 136, 233, 246, 61, 236, 68, 128, 189, 25, 7, 223, 190, 60, 192, 106, 190, 234, 127, 5, 190, 63, 17, 91, 62, 151, 37, 18, 189, 83, 232, 94, 190, 172, 69, 13, 62, 240, 53, 154, 60, 38, 250, 140, 190, 89, 191, 1, 191, 58, 213, 47, 61, 247, 229, 149, 190, 28, 14, 235, 189, 101, 94, 115, 62, 86, 221, 151, 190, 166, 164, 38, 62, 212, 159, 182, 61, 235, 8, 125, 190, 140, 39, 187, 190, 221, 153, 62, 187, 142, 20, 172, 61, 169, 157, 6, 62, 61, 153, 57, 62, 29, 131, 199, 62, 239, 185, 254, 190, 84, 185, 207, 61, 60, 120, 12, 63, 108, 168, 222, 191, 7, 49, 76, 62, 183, 152, 168, 62, 186, 183, 43, 62, 12, 102, 239, 60, 83, 199, 82, 62, 26, 249, 189, 62, 144, 129, 131, 62, 114, 141, 225, 189, 21, 150, 165, 62, 214, 225, 7, 60, 25, 2, 40, 191, 121, 66, 65, 62, 3, 170, 160, 62, 141, 184, 144, 62, 131, 91, 86, 62, 91, 211, 231, 62, 207, 57, 134, 61, 146, 16, 61, 190, 8, 137, 28, 63, 67, 184, 23, 62, 172, 73, 98, 62, 191, 235, 9, 62, 13, 213, 158, 61, 164, 208, 104, 62, 212, 239, 159, 189, 136, 234, 4, 62, 193, 211, 233, 191, 128, 245, 31, 60, 171, 212, 232, 191, 44, 88, 213, 62, 125, 34, 142, 191, 155, 38, 211, 62, 194, 226, 60, 62, 155, 27, 5, 59, 245, 173, 122, 186, 31, 34, 138, 62, 198, 19, 195, 61, 182, 237, 223, 62, 51, 20, 127, 190, 120, 35, 69, 61, 133, 90, 23, 190, 115, 191, 8, 62, 115, 112, 58, 191, 60, 193, 201, 189, 133, 183, 26, 61, 228, 53, 159, 61, 169, 83, 135, 189, 237, 49, 210, 189, 180, 134, 252, 189, 249, 122, 141, 189, 156, 224, 239, 188, 76, 143, 12, 62, 13, 25, 67, 190, 75, 225, 175, 189, 176, 188, 8, 190, 59, 232, 128, 61, 87, 43, 55, 61, 70, 234, 119, 188, 186, 90, 140, 60, 55, 226, 246, 60, 50, 14, 225, 189, 244, 198, 21, 190, 97, 98, 57, 190, 251, 235, 66, 189, 217, 212, 165, 188, 72, 116, 25, 188, 115, 255, 173, 61, 97, 4, 147, 189, 238, 7, 134, 184, 220, 17, 243, 189, 107, 89, 12, 190, 49, 74, 156, 61, 192, 251, 131, 189, 31, 105, 197, 61, 247, 221, 67, 190, 239, 239, 41, 189, 18, 218, 148, 189, 48, 235, 33, 190, 2, 30, 132, 188, 68, 197, 214, 187, 98, 106, 69, 190, 46, 215, 129, 189, 0, 252, 97, 61, 244, 46, 249, 188, 68, 193, 213, 59, 115, 224, 188, 61, 245, 189, 162, 61, 88, 203, 215, 189, 208, 197, 23, 190, 86, 183, 11, 189, 219, 124, 248, 188, 113, 72, 11, 190, 80, 183, 26, 60, 63, 188, 165, 189, 16, 51, 188, 189, 108, 1, 27, 190, 122, 134, 58, 61, 116, 16, 187, 189, 157, 139, 170, 60, 187, 42, 18, 61, 17, 228, 14, 190, 11, 45, 207, 61, 193, 227, 153, 61, 122, 166, 4, 62, 170, 111, 209, 59, 196, 52, 112, 189, 161, 211, 113, 61, 111, 254, 163, 60, 132, 56, 145, 189, 7, 251, 151, 61, 150, 120, 222, 59, 124, 68, 51, 191, 88, 93, 55, 191, 92, 8, 174, 61, 128, 50, 127, 62, 152, 9, 83, 62, 145, 115, 166, 60, 125, 30, 139, 189, 115, 105, 112, 190, 170, 117, 5, 62, 7, 171, 49, 190, 159, 146, 113, 189, 67, 48, 139, 187, 197, 151, 70, 62, 143, 189, 1, 191, 67, 68, 155, 189, 240, 73, 214, 188, 56, 2, 223, 191, 96, 51, 41, 62, 97, 225, 161, 61, 31, 93, 154, 62, 143, 22, 20, 62, 221, 43, 56, 188, 97, 171, 128, 62, 63, 199, 10, 62, 52, 233, 10, 62, 187, 35, 55, 62, 253, 246, 64, 62, 139, 197, 189, 191, 13, 159, 16, 62, 139, 143, 139, 62, 200, 34, 85, 191, 141, 49, 211, 60, 216, 196, 115, 191, 9, 215, 142, 191, 2, 189, 194, 62, 239, 102, 60, 62, 110, 52, 50, 63, 172, 151, 171, 61, 185, 185, 55, 191, 146, 31, 241, 190, 245, 50, 119, 191, 202, 175, 231, 190, 178, 132, 23, 190, 142, 52, 106, 190, 118, 6, 24, 191, 191, 193, 195, 61, 199, 65, 94, 62, 228, 153, 185, 191, 251, 128, 33, 189, 85, 62, 68, 190, 178, 42, 197, 62, 108, 6, 204, 190, 68, 136, 18, 62, 207, 175, 144, 59, 15, 131, 157, 191, 57, 158, 91, 61, 175, 215, 76, 190, 213, 77, 134, 62, 98, 178, 110, 62, 177, 137, 224, 190, 95, 156, 144, 190, 47, 245, 138, 62, 220, 147, 189, 190, 120, 166, 83, 189, 48, 44, 222, 55, 66, 80, 174, 190, 21, 219, 150, 62, 30, 190, 151, 190, 27, 220, 205, 62, 142, 195, 171, 59, 114, 67, 132, 61, 92, 137, 0, 191, 80, 63, 67, 189, 112, 166, 2, 191, 183, 236, 34, 189, 29, 139, 206, 62, 157, 47, 24, 61, 40, 37, 3, 63, 144, 171, 210, 190, 56, 56, 183, 62, 175, 5, 71, 189, 38, 45, 180, 189, 64, 180, 251, 61, 166, 249, 134, 62, 20, 250, 122, 60, 130, 116, 235, 188, 65, 213, 37, 190, 172, 184, 12, 190, 81, 108, 9, 62, 249, 18, 134, 63, 81, 236, 36, 189, 253, 119, 177, 188, 190, 102, 70, 190, 74, 99, 140, 62, 235, 21, 138, 189, 65, 187, 42, 190, 71, 123, 1, 62, 3, 69, 133, 189, 247, 26, 146, 189, 44, 9, 6, 190, 146, 213, 1, 190, 35, 212, 8, 190, 145, 236, 4, 190, 236, 130, 13, 62, 174, 129, 80, 61, 181, 221, 13, 190, 21, 3, 156, 61, 54, 95, 180, 61, 247, 34, 194, 61, 229, 82, 32, 60, 118, 105, 249, 189, 140, 178, 196, 189, 62, 101, 42, 190, 251, 234, 156, 61, 70, 115, 217, 61, 135, 134, 33, 189, 138, 113, 142, 189, 123, 179, 248, 189, 37, 214, 174, 61, 37, 144, 17, 190, 172, 107, 27, 62, 135, 205, 120, 61, 23, 75, 32, 190, 7, 111, 12, 190, 20, 212, 248, 61, 134, 33, 228, 189, 3, 139, 50, 191, 159, 129, 220, 60, 183, 179, 146, 62, 243, 36, 121, 60, 169, 202, 112, 190, 3, 56, 10, 190, 251, 36, 52, 190, 189, 206, 1, 62, 102, 61, 171, 189, 128, 31, 155, 186, 34, 123, 89, 190, 193, 20, 118, 62, 226, 57, 163, 61, 216, 209, 249, 191, 68, 5, 45, 189, 125, 78, 247, 191, 245, 114, 56, 62, 111, 150, 107, 190, 31, 66, 159, 62, 18, 29, 16, 62, 58, 189, 177, 189, 253, 250, 10, 63, 67, 32, 158, 62, 177, 145, 143, 62, 110, 56, 204, 62, 107, 201, 146, 188, 104, 13, 50, 62, 14, 219, 207, 190, 67, 147, 102, 62, 145, 115, 146, 191, 209, 85, 73, 190, 239, 57, 27, 188, 166, 188, 32, 190, 175, 21, 230, 190, 140, 208, 79, 189, 115, 245, 133, 62, 79, 70, 59, 190, 56, 43, 98, 189, 73, 35, 32, 190, 121, 23, 22, 190, 6, 85, 246, 61, 236, 6, 166, 189, 29, 87, 89, 190, 168, 58, 159, 62, 23, 47, 173, 62, 99, 160, 121, 62, 175, 208, 231, 189, 10, 212, 194, 62, 125, 86, 26, 62, 25, 35, 10, 190, 161, 250, 91, 189, 81, 88, 169, 191, 30, 124, 195, 190, 255, 99, 255, 186, 50, 9, 10, 63, 20, 213, 170, 190, 183, 26, 200, 60, 140, 60, 7, 63, 114, 191, 51, 62, 168, 241, 27, 191, 4, 122, 10, 189, 214, 175, 46, 62, 212, 169, 138, 190, 156, 191, 30, 192, 153, 24, 195, 190, 41, 92, 124, 62, 186, 80, 220, 61, 7, 233, 15, 60, 134, 43, 216, 62, 176, 178, 106, 189, 98, 192, 111, 62, 231, 110, 52, 189, 193, 5, 103, 62, 83, 190, 150, 190, 38, 75, 45, 190, 20, 173, 223, 190, 245, 51, 154, 189, 146, 86, 228, 189, 180, 133, 233, 189, 178, 225, 66, 62, 180, 102, 192, 189, 7, 79, 162, 62, 133, 152, 98, 191, 199, 228, 129, 62, 15, 73, 79, 62, 116, 47, 139, 189, 157, 217, 53, 188, 3, 79, 218, 189, 29, 39, 99, 62, 86, 116, 37, 189, 223, 84, 162, 61, 182, 98, 46, 63, 17, 212, 15, 189, 25, 96, 146, 190, 7, 159, 47, 62, 65, 146, 149, 62, 234, 124, 22, 63, 144, 55, 5, 61, 246, 50, 62, 190, 181, 59, 152, 190, 7, 245, 206, 190, 223, 165, 11, 62, 192, 204, 218, 62, 177, 126, 33, 187, 134, 135, 115, 60, 79, 134, 113, 189, 174, 24, 154, 62, 83, 66, 92, 62, 12, 6, 125, 61, 126, 171, 241, 190, 66, 37, 130, 62, 192, 11, 110, 191, 248, 42, 162, 62, 31, 31, 177, 190, 166, 73, 174, 62, 187, 149, 26, 190, 197, 14, 153, 62, 72, 158, 9, 62, 115, 116, 55, 61, 217, 114, 37, 62, 57, 29, 58, 190, 168, 84, 204, 189, 13, 196, 9, 189, 255, 114, 87, 191, 90, 164, 54, 62, 240, 0, 107, 190, 92, 106, 99, 190, 48, 3, 55, 190, 10, 54, 196, 62, 255, 109, 147, 62, 30, 58, 245, 62, 47, 166, 59, 189, 167, 234, 82, 190, 156, 158, 25, 63, 252, 86, 118, 62, 151, 44, 151, 190, 20, 120, 27, 62, 105, 8, 142, 61, 168, 238, 142, 62, 183, 87, 74, 189, 26, 161, 143, 62, 11, 249, 246, 191, 122, 136, 159, 61, 116, 79, 173, 191, 31, 222, 141, 62, 61, 176, 77, 191, 222, 178, 4, 61, 164, 7, 107, 62, 153, 215, 154, 61, 46, 141, 3, 62, 4, 115, 50, 62, 166, 110, 24, 59, 220, 237, 112, 62, 152, 121, 238, 189, 142, 251, 0, 190, 244, 132, 159, 190, 185, 112, 122, 62, 34, 33, 80, 191, 236, 188, 125, 190, 174, 144, 239, 188, 197, 165, 255, 190, 49, 5, 251, 61, 129, 200, 152, 189, 247, 52, 34, 190, 87, 239, 143, 62, 197, 43, 208, 190, 154, 102, 45, 188, 141, 13, 52, 61, 136, 31, 19, 189, 16, 155, 201, 189, 37, 142, 176, 190, 19, 78, 0, 191, 213, 8, 43, 190, 200, 111, 17, 61, 252, 20, 143, 190, 143, 32, 211, 62, 183, 127, 90, 188, 251, 118, 169, 62, 55, 224, 191, 190, 180, 109, 138, 190, 100, 40, 151, 62, 146, 83, 186, 189, 154, 154, 88, 62, 223, 253, 183, 190, 132, 223, 35, 62, 227, 77, 199, 190, 84, 179, 175, 61, 84, 27, 252, 62, 75, 249, 179, 189, 136, 188, 1, 189, 186, 208, 124, 62, 125, 202, 196, 61, 94, 146, 212, 190, 71, 91, 1, 62, 64, 244, 194, 62, 63, 237, 246, 61, 15, 85, 123, 190, 119, 115, 60, 190, 18, 224, 27, 191, 137, 221, 161, 62, 50, 158, 82, 61, 229, 97, 203, 61, 89, 68, 53, 61, 13, 23, 170, 62, 80, 3, 48, 191, 91, 27, 181, 62, 153, 254, 4, 190, 216, 16, 183, 62, 18, 240, 229, 61, 146, 213, 120, 59, 40, 14, 246, 189, 22, 110, 241, 191, 133, 137, 140, 62, 66, 83, 30, 190, 39, 116, 138, 190, 39, 54, 162, 191, 55, 161, 128, 62, 57, 89, 196, 62, 200, 123, 103, 62, 252, 51, 39, 62, 39, 14, 115, 191, 220, 128, 62, 62, 40, 241, 138, 188, 105, 5, 124, 191, 141, 218, 113, 62, 201, 38, 111, 189, 177, 48, 237, 189, 208, 115, 136, 62, 35, 111, 208, 61, 153, 26, 4, 62, 203, 170, 27, 191, 146, 203, 25, 191, 154, 216, 162, 190, 83, 63, 145, 190, 51, 130, 159, 62, 17, 78, 117, 61, 106, 21, 61, 62, 187, 85, 144, 62, 49, 188, 164, 61, 184, 177, 185, 190, 139, 233, 179, 61, 224, 52, 31, 62, 10, 17, 55, 62, 231, 171, 168, 62, 106, 220, 140, 190, 220, 198, 105, 188, 38, 30, 135, 189, 212, 178, 35, 62, 72, 182, 50, 61, 230, 2, 30, 62, 163, 208, 46, 190, 144, 243, 186, 61, 101, 96, 187, 60, 192, 126, 102, 62, 134, 69, 92, 190, 229, 26, 40, 189, 27, 21, 104, 190, 103, 68, 112, 62, 227, 244, 229, 62, 4, 226, 147, 61, 190, 253, 128, 63, 244, 141, 135, 190, 73, 170, 251, 62, 32, 25, 35, 60, 255, 96, 130, 61, 243, 251, 117, 190, 242, 205, 164, 190, 196, 225, 34, 190, 88, 101, 132, 190, 129, 8, 105, 188, 181, 214, 140, 189, 219, 94, 128, 61, 199, 163, 32, 191, 96, 50, 197, 62, 148, 49, 196, 190, 73, 184, 245, 191, 132, 146, 206, 60, 27, 2, 49, 190, 153, 57, 183, 190, 189, 141, 147, 191, 93, 122, 128, 62, 29, 167, 149, 61, 244, 94, 71, 62, 179, 136, 41, 63, 134, 223, 43, 191, 51, 39, 95, 189, 222, 91, 186, 62, 210, 175, 180, 189, 225, 9, 63, 190, 158, 87, 176, 62, 171, 204, 146, 191, 247, 136, 101, 191, 91, 83, 155, 62, 210, 154, 210, 189, 17, 11, 244, 62, 252, 237, 120, 190, 3, 217, 10, 188, 44, 187, 165, 190, 15, 211, 112, 61, 1, 64, 96, 191, 68, 246, 131, 190, 149, 122, 151, 190, 67, 34, 213, 62, 83, 139, 18, 191, 60, 128, 14, 190, 202, 75, 1, 63, 83, 20, 249, 191, 154, 26, 185, 188, 236, 92, 134, 62, 238, 25, 243, 61, 145, 209, 161, 61, 12, 16, 161, 61, 185, 108, 184, 61, 96, 132, 204, 189, 211, 238, 38, 190, 128, 63, 225, 62, 111, 118, 146, 61, 99, 151, 154, 191, 236, 99, 226, 62, 48, 117, 201, 62, 101, 10, 130, 190, 101, 234, 63, 62, 39, 154, 233, 187, 74, 137, 148, 62, 128, 168, 122, 189, 71, 90, 80, 190, 41, 192, 100, 191, 21, 190, 20, 191, 141, 154, 29, 191, 190, 117, 128, 190, 63, 248, 176, 190, 110, 230, 178, 62, 183, 98, 96, 62, 30, 33, 138, 61, 81, 232, 147, 189, 159, 228, 50, 190, 240, 197, 204, 60, 202, 195, 163, 62, 178, 22, 8, 189, 12, 211, 141, 62, 34, 128, 213, 190, 49, 147, 213, 190, 248, 177, 178, 189, 85, 165, 129, 62, 249, 64, 95, 189, 202, 166, 133, 62, 30, 247, 214, 190, 3, 30, 157, 62, 221, 80, 255, 61, 212, 187, 7, 62, 239, 193, 16, 62, 74, 241, 202, 189, 129, 134, 118, 190, 216, 122, 43, 189, 75, 199, 130, 62, 144, 37, 36, 62, 71, 164, 101, 63, 83, 172, 72, 190, 251, 230, 145, 62, 193, 131, 60, 62, 169, 133, 33, 62, 174, 229, 18, 189, 223, 209, 234, 189, 44, 171, 107, 190, 61, 203, 140, 190, 137, 29, 3, 190, 209, 25, 111, 61, 212, 40, 6, 62, 81, 245, 246, 189, 204, 77, 116, 62, 214, 114, 210, 190, 3, 48, 12, 192, 190, 14, 148, 62, 140, 93, 205, 60, 126, 228, 132, 59, 229, 247, 101, 191, 20, 92, 84, 62, 17, 14, 8, 61, 178, 243, 97, 62, 74, 149, 209, 62, 133, 182, 51, 61, 11, 57, 223, 190, 98, 189, 223, 61, 229, 194, 176, 189, 196, 229, 182, 190, 229, 243, 121, 189, 91, 189, 155, 62, 40, 236, 162, 62, 85, 107, 133, 189, 183, 55, 227, 60, 109, 131, 12, 62, 241, 232, 86, 61, 182, 87, 148, 62, 30, 109, 123, 189, 220, 124, 231, 189, 134, 105, 99, 62, 71, 121, 30, 61, 140, 193, 102, 62, 21, 112, 22, 189, 64, 203, 218, 62, 107, 18, 193, 190, 206, 229, 127, 189, 203, 4, 176, 190, 15, 118, 20, 62, 47, 230, 221, 190, 224, 155, 47, 190, 185, 104, 210, 190, 53, 233, 130, 60, 16, 202, 108, 62, 66, 81, 25, 190, 229, 30, 77, 62, 226, 227, 230, 190, 103, 45, 223, 61, 80, 137, 74, 62, 165, 250, 8, 191, 245, 21, 23, 62, 253, 98, 156, 190, 219, 57, 2, 62, 239, 2, 83, 191, 2, 79, 28, 191, 38, 49, 163, 188, 234, 168, 133, 190, 230, 153, 154, 62, 40, 196, 26, 190, 180, 197, 211, 190, 245, 58, 211, 190, 199, 23, 109, 190, 235, 246, 102, 190, 99, 74, 43, 190, 199, 124, 63, 190, 11, 174, 29, 62, 227, 98, 166, 189, 86, 211, 121, 188, 233, 20, 11, 63, 226, 252, 154, 189, 105, 155, 60, 62, 250, 162, 117, 61, 61, 12, 220, 187, 39, 32, 84, 62, 173, 224, 70, 190, 66, 112, 129, 61, 42, 239, 131, 187, 26, 141, 182, 190, 250, 114, 156, 61, 103, 109, 17, 62, 74, 62, 154, 190, 183, 130, 91, 61, 57, 181, 141, 62, 210, 197, 202, 59, 141, 41, 11, 62, 249, 2, 200, 62, 165, 184, 80, 59, 138, 30, 207, 190, 240, 179, 158, 62, 80, 40, 218, 188, 39, 134, 40, 189, 11, 126, 85, 189, 175, 214, 184, 61, 145, 52, 229, 60, 229, 68, 5, 62, 158, 204, 65, 62, 214, 30, 178, 60, 148, 234, 90, 62, 221, 150, 146, 190, 178, 2, 245, 62, 59, 195, 60, 190, 69, 73, 48, 189, 196, 84, 163, 190, 83, 90, 202, 62, 219, 126, 230, 189, 251, 31, 67, 62, 53, 239, 46, 190, 128, 115, 207, 190, 216, 166, 133, 190, 5, 91, 174, 189, 40, 250, 42, 191, 40, 38, 50, 62, 110, 123, 132, 190, 170, 162, 52, 190, 250, 213, 65, 190, 18, 183, 122, 189, 43, 160, 244, 189, 102, 14, 192, 190, 228, 93, 231, 190, 55, 202, 178, 62, 140, 141, 145, 191, 214, 89, 83, 190, 105, 33, 77, 61, 78, 169, 226, 61, 23, 37, 228, 191, 153, 126, 50, 189, 3, 153, 242, 190, 202, 90, 27, 190, 34, 7, 159, 61, 165, 66, 35, 62, 94, 57, 69, 190, 154, 185, 12, 191, 150, 120, 146, 62, 158, 134, 158, 189, 252, 189, 72, 62, 212, 90, 207, 60, 135, 168, 242, 61, 51, 197, 101, 61, 247, 186, 54, 62, 226, 223, 10, 60, 95, 152, 184, 190, 86, 160, 1, 62, 117, 33, 36, 63, 158, 138, 204, 189, 78, 119, 0, 191, 219, 145, 12, 62, 15, 172, 194, 61, 56, 4, 21, 62, 69, 21, 177, 189, 131, 65, 92, 189, 87, 118, 89, 61, 104, 156, 20, 61, 118, 135, 42, 190, 235, 253, 122, 61, 182, 45, 24, 190, 207, 124, 17, 190, 137, 219, 6, 61, 54, 7, 93, 189, 59, 28, 196, 189, 254, 165, 31, 190, 212, 8, 23, 62, 3, 81, 72, 190, 34, 93, 136, 61, 191, 134, 239, 187, 89, 54, 233, 189, 28, 13, 18, 62, 4, 218, 53, 190, 73, 29, 35, 190, 69, 71, 7, 190, 113, 17, 248, 61, 132, 142, 26, 189, 92, 93, 27, 189, 98, 235, 184, 61, 26, 150, 158, 61, 45, 188, 227, 189, 8, 72, 134, 189, 164, 68, 58, 190, 195, 247, 177, 61, 143, 114, 100, 61, 119, 65, 222, 62, 76, 117, 150, 60, 190, 252, 182, 62, 137, 191, 53, 62, 194, 140, 222, 190, 37, 195, 24, 62, 58, 106, 111, 61, 24, 65, 233, 189, 153, 251, 20, 62, 220, 33, 166, 62, 185, 211, 43, 62, 42, 200, 90, 62, 75, 61, 51, 62, 170, 107, 133, 190, 222, 107, 126, 62, 138, 92, 148, 190, 164, 82, 208, 62, 61, 178, 169, 189, 8, 59, 133, 62, 56, 110, 22, 190, 193, 249, 148, 61, 47, 131, 90, 62, 73, 236, 20, 62, 19, 204, 196, 188, 200, 45, 175, 189, 172, 205, 147, 190, 239, 142, 7, 62, 99, 148, 58, 191, 142, 171, 118, 58, 226, 177, 207, 60, 50, 143, 161, 188, 16, 95, 206, 189, 175, 114, 13, 191, 200, 179, 41, 62, 40, 93, 180, 190, 176, 237, 225, 190, 4, 14, 179, 62, 21, 255, 90, 191, 198, 74, 37, 190, 66, 122, 196, 61, 20, 198, 70, 187, 226, 165, 253, 191, 13, 134, 19, 62, 30, 68, 2, 191, 234, 170, 179, 189, 63, 253, 175, 190, 33, 233, 11, 62, 89, 122, 67, 189, 114, 92, 214, 190, 90, 212, 175, 62, 24, 47, 144, 189, 146, 123, 165, 61, 153, 33, 186, 60, 149, 15, 69, 62, 67, 126, 44, 59, 82, 157, 41, 61, 160, 218, 75, 60, 230, 207, 194, 190, 31, 105, 220, 61, 173, 124, 55, 63, 0, 27, 157, 189, 33, 177, 190, 190, 91, 19, 67, 62, 157, 76, 99, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 118, 122, 62, 192, 128, 168, 189, 26, 107, 231, 61, 21, 204, 143, 190, 187, 227, 179, 189, 124, 189, 67, 62, 131, 121, 81, 62, 66, 128, 40, 60, 86, 210, 39, 190, 192, 44, 243, 61, 187, 23, 135, 60, 159, 68, 50, 190, 141, 108, 176, 189, 224, 171, 71, 62, 230, 15, 94, 61, 100, 114, 47, 190, 165, 14, 157, 188, 89, 167, 129, 62, 176, 27, 211, 60, 50, 107, 63, 62, 100, 241, 224, 189, 204, 129, 253, 61, 37, 9, 49, 62, 159, 206, 235, 189, 153, 0, 181, 61, 83, 153, 38, 189, 45, 49, 31, 60, 221, 188, 231, 61, 68, 202, 237, 189, 112, 168, 32, 189, 68, 144, 157, 59, 93, 147, 77, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 222, 228, 190, 246, 132, 4, 190, 199, 227, 207, 61, 71, 88, 82, 63, 249, 24, 65, 190, 66, 221, 161, 62, 235, 179, 235, 190, 36, 228, 200, 189, 243, 121, 146, 61, 84, 183, 63, 62, 44, 4, 118, 63, 118, 158, 152, 62, 71, 16, 128, 189, 66, 235, 220, 190, 79, 26, 59, 63, 125, 110, 196, 62, 159, 204, 38, 191, 101, 78, 38, 191, 168, 17, 208, 62, 74, 240, 151, 63, 84, 10, 169, 62, 131, 213, 136, 63, 47, 53, 1, 63, 146, 60, 193, 62, 151, 243, 135, 62, 131, 100, 12, 191, 120, 227, 165, 62, 2, 53, 135, 190, 17, 100, 98, 191, 21, 216, 192, 189, 162, 46, 164, 190, 248, 254, 120, 191, 163, 145, 7, 190, 97, 65, 140, 61, 34, 8, 17, 62, 223, 187, 58, 62, 205, 69, 86, 190, 157, 226, 44, 190, 227, 137, 61, 190, 123, 218, 238, 61, 110, 204, 203, 60, 122, 34, 148, 190, 153, 35, 44, 190, 178, 29, 20, 63, 118, 133, 226, 61, 244, 58, 17, 189, 51, 116, 199, 189, 164, 43, 67, 62, 214, 115, 244, 61, 124, 31, 213, 189, 222, 94, 115, 62, 226, 205, 26, 62, 41, 192, 13, 62, 174, 80, 24, 62, 8, 41, 164, 190, 130, 175, 3, 62, 189, 206, 4, 191, 30, 242, 231, 61, 231, 97, 163, 60, 159, 6, 212, 190, 153, 113, 193, 61, 99, 157, 78, 189, 79, 214, 218, 189, 153, 176, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 21, 50, 190, 220, 37, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {167, 37, 200, 191, 113, 30, 91, 63, 103, 98, 160, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 144, 173, 64, 128, 149, 4, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}