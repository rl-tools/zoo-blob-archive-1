// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 224, 3, 63, 144, 213, 70, 62, 164, 107, 153, 62, 114, 164, 162, 61, 76, 171, 209, 189, 55, 131, 30, 190, 180, 190, 7, 191, 131, 139, 191, 59, 201, 19, 195, 61, 234, 208, 8, 191, 195, 149, 245, 61, 77, 42, 231, 62, 23, 17, 159, 190, 141, 225, 58, 59, 164, 62, 18, 191, 140, 1, 244, 61, 135, 46, 72, 62, 115, 57, 244, 62, 200, 2, 182, 62, 77, 23, 153, 62, 213, 3, 11, 62, 77, 62, 9, 191, 32, 26, 97, 190, 204, 88, 216, 62, 43, 225, 179, 189, 191, 218, 246, 190, 31, 42, 205, 62, 51, 101, 99, 62, 254, 163, 136, 62, 94, 6, 8, 63, 101, 54, 222, 188, 180, 156, 84, 62, 60, 20, 238, 61, 102, 216, 188, 190, 249, 188, 4, 63, 101, 237, 66, 61, 145, 2, 241, 190, 0, 71, 18, 63, 121, 179, 70, 190, 55, 116, 149, 190, 86, 83, 164, 62, 51, 99, 18, 63, 229, 8, 254, 62, 94, 73, 132, 190, 251, 94, 187, 62, 102, 98, 215, 190, 102, 170, 84, 188, 248, 223, 167, 61, 201, 197, 188, 62, 206, 43, 15, 63, 119, 61, 131, 62, 2, 253, 169, 190, 245, 135, 13, 191, 97, 134, 229, 60, 65, 35, 202, 189, 156, 0, 232, 62, 102, 27, 0, 63, 49, 169, 62, 59, 33, 56, 204, 62, 211, 218, 232, 190, 53, 72, 154, 62, 211, 186, 226, 188, 66, 176, 53, 62, 119, 98, 228, 62, 36, 83, 244, 190, 229, 27, 155, 62, 239, 213, 57, 62, 230, 146, 18, 63, 99, 122, 183, 190, 148, 182, 240, 189, 248, 253, 137, 62, 48, 139, 14, 190, 170, 145, 150, 190, 119, 151, 248, 190, 170, 125, 52, 189, 215, 181, 8, 191, 75, 153, 9, 62, 204, 143, 49, 190, 243, 33, 207, 190, 84, 239, 252, 190, 132, 82, 17, 63, 190, 82, 6, 63, 182, 40, 62, 62, 78, 65, 114, 189, 75, 82, 131, 62, 241, 32, 145, 62, 224, 47, 141, 190, 61, 225, 10, 190, 81, 209, 138, 189, 135, 15, 244, 62, 58, 27, 155, 190, 221, 102, 242, 190, 112, 97, 168, 189, 212, 225, 114, 190, 234, 167, 214, 190, 169, 241, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 187, 19, 191, 15, 200, 14, 63, 18, 51, 15, 190, 175, 154, 253, 62, 210, 24, 216, 190, 160, 128, 232, 60, 54, 248, 7, 190, 95, 94, 189, 188, 105, 222, 220, 62, 242, 163, 13, 63, 93, 19, 210, 189, 85, 120, 87, 61, 12, 107, 188, 190, 200, 213, 216, 190, 78, 228, 225, 61, 62, 19, 213, 190, 156, 189, 234, 61, 104, 157, 158, 189, 194, 193, 93, 190, 58, 251, 159, 190, 23, 197, 197, 62, 52, 201, 5, 191, 125, 254, 14, 63, 153, 13, 16, 61, 56, 172, 34, 190, 226, 45, 225, 190, 223, 244, 3, 62, 126, 230, 9, 191, 158, 153, 34, 62, 29, 61, 173, 62, 95, 206, 135, 62, 118, 20, 181, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 175, 23, 60, 47, 228, 30, 61, 184, 224, 178, 60, 153, 231, 104, 59, 205, 168, 172, 188, 196, 154, 215, 60, 29, 207, 62, 61, 230, 52, 50, 62, 5, 91, 214, 188, 159, 103, 39, 61, 193, 54, 64, 189, 186, 44, 147, 61, 7, 252, 106, 61, 38, 130, 133, 61, 1, 156, 160, 188, 155, 5, 157, 185, 18, 155, 171, 189, 140, 177, 177, 189, 37, 209, 33, 62, 9, 195, 184, 60, 149, 24, 97, 61, 72, 99, 24, 62, 31, 3, 241, 61, 45, 105, 203, 61, 218, 97, 50, 62, 133, 111, 224, 60, 174, 224, 8, 62, 31, 54, 218, 61, 156, 223, 89, 60, 31, 206, 87, 61, 158, 164, 19, 190, 46, 135, 187, 188, 236, 234, 129, 61, 137, 183, 17, 190, 10, 86, 254, 61, 219, 215, 34, 190, 240, 139, 213, 61, 90, 82, 173, 189, 51, 95, 218, 188, 0, 4, 138, 189, 108, 185, 29, 62, 235, 38, 201, 60, 33, 8, 192, 61, 140, 125, 4, 62, 144, 67, 5, 190, 130, 153, 38, 62, 118, 211, 4, 61, 195, 186, 33, 190, 113, 120, 250, 186, 182, 146, 102, 61, 20, 99, 165, 187, 43, 220, 199, 60, 210, 189, 167, 189, 92, 0, 35, 62, 76, 6, 143, 60, 148, 119, 118, 188, 95, 134, 34, 189, 16, 60, 168, 189, 12, 155, 174, 58, 156, 230, 235, 61, 233, 26, 3, 190, 202, 169, 232, 189, 45, 190, 48, 190, 253, 127, 27, 60, 163, 254, 4, 62, 42, 162, 109, 60, 152, 143, 46, 62, 43, 197, 231, 189, 37, 114, 174, 61, 105, 91, 117, 61, 117, 13, 29, 190, 65, 158, 37, 61, 200, 205, 63, 61, 33, 164, 92, 60, 57, 246, 129, 61, 47, 146, 8, 190, 216, 239, 193, 188, 15, 185, 15, 190, 214, 58, 229, 188, 221, 186, 143, 189, 31, 2, 147, 189, 41, 98, 216, 189, 50, 19, 14, 62, 232, 207, 24, 190, 195, 1, 50, 188, 28, 50, 45, 190, 176, 18, 220, 189, 45, 243, 179, 189, 62, 197, 210, 60, 146, 104, 234, 60, 234, 190, 180, 61, 74, 179, 16, 62, 233, 5, 37, 62, 16, 243, 12, 189, 134, 183, 115, 61, 5, 6, 42, 190, 242, 46, 48, 62, 20, 60, 182, 185, 20, 129, 44, 62, 163, 56, 145, 61, 242, 116, 131, 189, 174, 181, 234, 189, 225, 129, 113, 59, 173, 247, 130, 61, 18, 47, 69, 188, 196, 194, 44, 189, 116, 90, 34, 188, 172, 103, 174, 188, 109, 240, 158, 188, 67, 47, 223, 189, 137, 159, 43, 190, 72, 150, 217, 189, 86, 162, 36, 62, 240, 163, 95, 189, 215, 108, 43, 62, 103, 152, 28, 61, 96, 30, 22, 62, 134, 221, 91, 187, 118, 142, 46, 190, 237, 120, 43, 190, 63, 209, 216, 189, 161, 189, 231, 61, 17, 44, 218, 60, 64, 177, 55, 60, 92, 209, 17, 188, 243, 204, 240, 188, 9, 189, 247, 189, 240, 126, 19, 190, 70, 200, 2, 62, 68, 160, 243, 61, 186, 166, 138, 188, 229, 27, 24, 62, 69, 42, 12, 62, 138, 140, 244, 188, 160, 138, 7, 189, 132, 117, 197, 188, 195, 129, 110, 61, 239, 166, 187, 60, 206, 78, 213, 188, 143, 162, 141, 61, 35, 88, 25, 190, 68, 238, 191, 61, 209, 225, 243, 59, 70, 125, 140, 189, 242, 218, 184, 59, 107, 174, 123, 61, 127, 157, 76, 188, 138, 255, 230, 61, 171, 114, 104, 189, 247, 110, 184, 61, 148, 152, 135, 186, 210, 39, 129, 189, 107, 234, 4, 61, 118, 29, 19, 190, 144, 219, 32, 62, 99, 12, 42, 190, 98, 44, 140, 189, 61, 228, 253, 61, 108, 240, 167, 61, 52, 1, 72, 61, 189, 33, 50, 190, 74, 60, 35, 190, 33, 108, 238, 60, 128, 252, 37, 190, 111, 167, 9, 62, 72, 109, 248, 61, 63, 54, 12, 62, 133, 125, 255, 60, 152, 5, 22, 190, 110, 248, 51, 190, 249, 231, 139, 61, 99, 166, 33, 62, 182, 161, 224, 61, 32, 113, 183, 60, 158, 56, 51, 62, 49, 219, 5, 60, 89, 136, 8, 62, 102, 107, 205, 61, 82, 237, 41, 61, 142, 66, 74, 61, 42, 49, 13, 62, 5, 141, 20, 190, 181, 18, 151, 189, 89, 226, 253, 61, 218, 17, 173, 60, 54, 32, 222, 61, 210, 192, 19, 189, 51, 125, 148, 61, 233, 4, 239, 189, 134, 39, 229, 187, 37, 79, 31, 190, 72, 12, 1, 62, 182, 234, 79, 61, 242, 58, 118, 60, 2, 6, 26, 62, 209, 21, 192, 61, 156, 91, 14, 190, 101, 93, 210, 61, 116, 40, 8, 189, 33, 141, 161, 189, 182, 104, 67, 61, 91, 135, 47, 189, 15, 69, 92, 189, 25, 158, 19, 190, 241, 102, 42, 61, 1, 224, 250, 189, 137, 38, 154, 189, 185, 59, 237, 188, 96, 179, 1, 62, 82, 44, 50, 61, 50, 246, 99, 189, 251, 94, 232, 61, 11, 174, 213, 189, 210, 151, 84, 61, 137, 167, 226, 61, 206, 91, 166, 59, 242, 170, 246, 61, 163, 28, 33, 190, 253, 135, 239, 189, 213, 176, 9, 61, 40, 230, 136, 59, 41, 191, 15, 190, 6, 76, 134, 189, 9, 19, 180, 189, 4, 140, 8, 62, 76, 28, 149, 188, 143, 47, 198, 189, 208, 131, 152, 189, 16, 216, 39, 189, 213, 61, 77, 60, 159, 112, 52, 62, 196, 223, 15, 190, 102, 237, 13, 189, 116, 222, 130, 189, 6, 56, 232, 61, 72, 224, 121, 61, 37, 18, 151, 59, 79, 87, 107, 61, 197, 125, 233, 61, 210, 17, 211, 189, 131, 8, 192, 189, 55, 31, 17, 190, 13, 134, 30, 188, 184, 150, 148, 60, 211, 29, 178, 61, 4, 23, 6, 62, 18, 7, 38, 189, 205, 208, 39, 61, 205, 2, 4, 190, 25, 209, 6, 190, 45, 56, 6, 62, 40, 109, 20, 189, 80, 19, 14, 62, 38, 42, 17, 190, 135, 66, 109, 187, 244, 69, 16, 189, 78, 72, 224, 189, 157, 166, 124, 60, 24, 108, 157, 60, 217, 7, 51, 190, 46, 215, 129, 189, 41, 251, 138, 61, 200, 27, 18, 188, 194, 171, 211, 60, 222, 115, 221, 61, 201, 168, 196, 61, 8, 151, 159, 189, 152, 77, 246, 189, 105, 67, 4, 189, 245, 71, 255, 187, 235, 37, 248, 189, 40, 137, 240, 60, 78, 37, 141, 189, 35, 253, 158, 189, 195, 198, 11, 190, 122, 134, 58, 61, 132, 229, 161, 189, 220, 148, 46, 61, 203, 85, 101, 61, 135, 235, 9, 190, 98, 44, 223, 61, 41, 42, 154, 61, 14, 173, 20, 62, 170, 111, 209, 59, 196, 52, 112, 189, 175, 146, 155, 61, 183, 80, 16, 61, 83, 130, 24, 189, 220, 178, 226, 60, 31, 59, 49, 190, 237, 162, 5, 62, 192, 111, 113, 189, 141, 115, 188, 188, 172, 147, 29, 62, 86, 97, 162, 61, 168, 54, 26, 61, 11, 61, 165, 189, 147, 4, 35, 190, 158, 132, 134, 61, 179, 208, 9, 62, 190, 60, 123, 189, 234, 63, 137, 61, 55, 138, 155, 189, 145, 215, 239, 189, 238, 211, 45, 189, 168, 40, 21, 190, 198, 136, 28, 190, 253, 185, 125, 61, 21, 189, 216, 189, 56, 185, 86, 61, 83, 43, 101, 60, 100, 204, 220, 188, 47, 179, 196, 189, 67, 72, 201, 61, 126, 176, 248, 60, 59, 4, 47, 61, 51, 109, 150, 61, 225, 58, 1, 190, 165, 66, 197, 189, 36, 207, 195, 61, 207, 151, 166, 61, 17, 54, 29, 189, 147, 93, 30, 62, 29, 51, 107, 189, 219, 161, 230, 61, 227, 78, 250, 61, 25, 218, 160, 60, 131, 238, 19, 62, 176, 98, 40, 62, 72, 239, 132, 186, 189, 82, 154, 189, 90, 241, 1, 189, 88, 109, 3, 189, 11, 251, 229, 189, 47, 219, 159, 189, 138, 15, 46, 62, 168, 138, 37, 62, 215, 173, 15, 188, 234, 77, 49, 61, 185, 72, 174, 189, 18, 208, 21, 190, 129, 107, 151, 61, 146, 241, 216, 189, 181, 218, 12, 62, 218, 121, 1, 189, 196, 4, 237, 61, 26, 237, 22, 190, 149, 114, 45, 190, 26, 221, 215, 58, 90, 202, 209, 61, 22, 112, 26, 190, 191, 136, 52, 62, 121, 72, 248, 189, 123, 228, 144, 188, 96, 16, 147, 61, 64, 16, 20, 190, 220, 6, 23, 62, 97, 64, 89, 61, 115, 223, 8, 62, 27, 209, 227, 60, 186, 94, 28, 186, 80, 229, 0, 190, 105, 179, 176, 61, 22, 33, 49, 190, 122, 214, 2, 61, 213, 253, 44, 62, 226, 17, 128, 189, 183, 245, 211, 61, 26, 46, 205, 188, 113, 67, 2, 62, 158, 210, 179, 61, 61, 120, 18, 188, 126, 54, 19, 60, 40, 62, 62, 61, 164, 136, 229, 188, 74, 16, 94, 60, 219, 213, 221, 61, 199, 32, 98, 61, 90, 229, 15, 62, 98, 128, 32, 61, 94, 194, 181, 189, 122, 239, 217, 60, 66, 102, 247, 189, 114, 201, 38, 62, 2, 169, 133, 189, 207, 88, 41, 190, 76, 144, 6, 62, 81, 211, 48, 189, 247, 26, 146, 189, 87, 3, 246, 189, 146, 213, 1, 190, 79, 229, 234, 189, 38, 48, 223, 189, 67, 77, 33, 62, 53, 96, 87, 61, 186, 44, 13, 190, 21, 3, 156, 61, 144, 20, 210, 61, 154, 7, 219, 61, 70, 211, 52, 60, 118, 105, 249, 189, 230, 252, 182, 189, 171, 110, 32, 190, 251, 234, 156, 61, 51, 104, 229, 61, 119, 141, 7, 189, 138, 113, 142, 189, 123, 179, 248, 189, 255, 29, 179, 61, 37, 144, 17, 190, 30, 192, 50, 62, 135, 205, 120, 61, 23, 75, 32, 190, 152, 86, 240, 189, 0, 62, 3, 62, 153, 251, 227, 189, 236, 163, 34, 190, 176, 167, 207, 189, 227, 31, 44, 187, 59, 102, 85, 61, 215, 238, 237, 189, 23, 190, 139, 61, 236, 24, 254, 189, 217, 253, 66, 187, 47, 24, 31, 190, 135, 0, 234, 61, 185, 160, 29, 190, 22, 45, 20, 62, 245, 193, 135, 189, 1, 170, 93, 189, 47, 101, 20, 62, 227, 227, 177, 187, 22, 67, 202, 188, 236, 17, 212, 61, 71, 244, 47, 62, 22, 139, 2, 62, 138, 253, 173, 61, 119, 243, 17, 190, 160, 18, 47, 62, 170, 137, 31, 62, 164, 43, 185, 61, 225, 174, 23, 61, 67, 92, 18, 62, 123, 90, 45, 190, 200, 1, 8, 62, 145, 215, 43, 189, 175, 68, 4, 190, 52, 173, 231, 189, 117, 242, 217, 188, 24, 109, 198, 61, 82, 61, 152, 189, 192, 48, 199, 61, 63, 26, 42, 190, 254, 93, 212, 61, 210, 171, 10, 62, 125, 97, 30, 190, 119, 247, 35, 62, 191, 107, 74, 189, 51, 94, 186, 189, 24, 6, 16, 61, 91, 177, 48, 190, 50, 213, 254, 61, 130, 22, 229, 60, 202, 148, 7, 62, 111, 54, 39, 61, 242, 117, 3, 190, 24, 222, 117, 61, 194, 169, 49, 62, 79, 175, 221, 189, 225, 104, 245, 61, 85, 219, 255, 61, 26, 94, 93, 189, 168, 203, 87, 189, 221, 4, 46, 190, 27, 35, 45, 62, 207, 2, 23, 190, 45, 67, 22, 190, 95, 4, 243, 61, 210, 101, 132, 189, 123, 28, 110, 189, 181, 86, 154, 61, 89, 157, 34, 62, 39, 226, 9, 61, 156, 80, 179, 61, 42, 53, 135, 61, 212, 61, 12, 62, 207, 98, 39, 62, 145, 81, 18, 190, 55, 136, 23, 62, 228, 31, 14, 190, 190, 103, 45, 61, 86, 97, 50, 190, 100, 104, 184, 59, 88, 208, 43, 190, 231, 228, 91, 189, 52, 219, 139, 188, 239, 239, 26, 62, 9, 148, 227, 189, 231, 185, 37, 190, 146, 156, 37, 62, 58, 153, 161, 61, 134, 241, 90, 188, 26, 227, 183, 189, 177, 170, 228, 189, 7, 50, 200, 61, 166, 89, 78, 189, 225, 193, 74, 61, 62, 52, 107, 61, 115, 224, 193, 189, 119, 187, 138, 189, 184, 100, 144, 189, 197, 107, 15, 62, 46, 77, 121, 61, 249, 115, 249, 61, 127, 93, 149, 61, 207, 211, 39, 59, 223, 87, 191, 189, 167, 75, 11, 190, 248, 75, 36, 62, 108, 56, 133, 61, 65, 232, 187, 61, 78, 13, 6, 190, 211, 89, 51, 189, 108, 238, 48, 62, 49, 202, 201, 189, 76, 93, 65, 61, 158, 199, 88, 61, 62, 214, 11, 189, 146, 19, 233, 60, 99, 0, 46, 190, 215, 30, 210, 61, 226, 72, 169, 61, 164, 17, 6, 62, 194, 22, 1, 189, 158, 135, 130, 189, 127, 172, 140, 61, 87, 242, 191, 61, 109, 136, 13, 62, 218, 168, 21, 62, 103, 93, 232, 189, 244, 116, 30, 62, 63, 66, 223, 60, 143, 59, 35, 190, 151, 190, 155, 61, 16, 144, 162, 61, 99, 14, 248, 61, 94, 201, 156, 189, 95, 234, 194, 189, 94, 2, 219, 189, 75, 81, 32, 62, 252, 91, 37, 62, 20, 221, 48, 190, 62, 34, 25, 62, 70, 155, 91, 188, 169, 202, 128, 189, 197, 233, 38, 190, 42, 19, 0, 62, 198, 64, 255, 189, 129, 82, 113, 61, 118, 178, 188, 189, 47, 120, 83, 60, 42, 80, 28, 190, 202, 160, 31, 62, 185, 206, 34, 62, 141, 121, 140, 60, 64, 118, 106, 61, 64, 184, 44, 61, 101, 69, 34, 190, 36, 10, 83, 189, 168, 15, 206, 189, 30, 151, 125, 187, 28, 245, 158, 60, 27, 68, 22, 62, 4, 98, 113, 189, 143, 47, 32, 190, 59, 135, 245, 189, 219, 113, 17, 61, 35, 152, 177, 58, 193, 99, 20, 62, 41, 77, 198, 189, 93, 194, 24, 61, 206, 63, 26, 189, 1, 10, 135, 189, 252, 158, 43, 190, 82, 62, 145, 189, 150, 188, 241, 189, 26, 79, 12, 189, 81, 108, 16, 190, 0, 34, 22, 62, 91, 38, 255, 189, 29, 139, 30, 190, 83, 211, 9, 189, 183, 155, 25, 62, 194, 20, 102, 187, 133, 199, 27, 61, 168, 17, 160, 188, 215, 246, 67, 61, 109, 111, 233, 61, 202, 190, 19, 62, 229, 49, 137, 189, 113, 209, 47, 62, 43, 34, 119, 60, 210, 152, 131, 60, 91, 183, 0, 190, 131, 192, 24, 190, 167, 89, 173, 189, 143, 106, 190, 61, 14, 93, 63, 189, 186, 228, 213, 189, 177, 123, 136, 61, 72, 239, 4, 187, 98, 45, 26, 190, 157, 184, 18, 190, 11, 239, 193, 189, 85, 173, 47, 62, 71, 143, 51, 62, 90, 189, 189, 189, 88, 159, 107, 189, 5, 34, 21, 62, 131, 140, 165, 61, 39, 153, 249, 189, 82, 13, 25, 62, 10, 143, 115, 61, 151, 125, 220, 189, 92, 171, 169, 60, 240, 15, 26, 190, 235, 119, 190, 188, 103, 47, 195, 189, 20, 173, 30, 62, 250, 204, 184, 61, 82, 28, 45, 190, 162, 84, 255, 189, 49, 140, 4, 62, 116, 24, 208, 61, 138, 194, 167, 61, 171, 23, 2, 188, 172, 111, 37, 190, 178, 198, 236, 188, 38, 14, 129, 59, 151, 50, 162, 61, 58, 249, 96, 60, 112, 37, 181, 189, 97, 81, 220, 61, 136, 132, 195, 188, 14, 146, 27, 62, 165, 124, 245, 60, 128, 202, 39, 190, 151, 79, 16, 190, 216, 42, 8, 190, 50, 150, 236, 189, 230, 15, 32, 62, 236, 134, 17, 190, 181, 7, 113, 61, 180, 115, 252, 61, 43, 69, 133, 189, 121, 79, 22, 190, 233, 76, 25, 61, 98, 167, 125, 61, 106, 73, 79, 189, 36, 148, 195, 61, 205, 3, 220, 189, 44, 120, 18, 61, 241, 201, 22, 189, 156, 146, 20, 188, 163, 128, 221, 188, 251, 105, 1, 190, 127, 2, 135, 61, 165, 81, 149, 189, 24, 190, 195, 60, 191, 58, 53, 189, 251, 78, 227, 189, 29, 89, 142, 189, 33, 190, 203, 61, 218, 159, 141, 61, 28, 148, 239, 61, 207, 77, 180, 58, 178, 58, 14, 62, 6, 177, 187, 189, 254, 249, 8, 62, 32, 67, 29, 189, 101, 95, 95, 189, 249, 195, 23, 190, 218, 175, 32, 190, 1, 68, 15, 62, 165, 195, 85, 189, 68, 77, 8, 61, 230, 58, 28, 189, 78, 25, 126, 189, 96, 16, 248, 187, 85, 103, 56, 61, 223, 99, 92, 61, 77, 114, 141, 189, 178, 126, 145, 189, 154, 79, 119, 189, 239, 124, 175, 189, 185, 31, 2, 190, 4, 208, 165, 61, 216, 226, 161, 189, 128, 107, 3, 62, 55, 119, 185, 188, 99, 66, 173, 189, 17, 174, 6, 62, 40, 33, 200, 61, 221, 189, 237, 61, 101, 93, 213, 189, 74, 37, 38, 62, 241, 129, 187, 59, 219, 97, 255, 59, 44, 76, 49, 62, 159, 189, 200, 189, 228, 178, 47, 62, 112, 178, 51, 190, 128, 71, 37, 189, 21, 106, 144, 189, 30, 211, 2, 189, 92, 215, 235, 189, 205, 103, 184, 189, 234, 192, 251, 189, 94, 239, 14, 62, 189, 125, 51, 190, 75, 42, 32, 62, 55, 47, 11, 62, 241, 233, 12, 62, 110, 91, 236, 189, 254, 67, 166, 189, 90, 102, 211, 189, 38, 110, 203, 60, 224, 16, 48, 62, 39, 86, 36, 190, 107, 162, 48, 188, 30, 148, 51, 190, 207, 22, 11, 62, 86, 184, 82, 188, 239, 173, 14, 190, 140, 16, 3, 62, 201, 4, 32, 62, 149, 217, 250, 187, 98, 140, 248, 60, 194, 72, 218, 61, 253, 82, 197, 189, 66, 85, 153, 189, 12, 111, 26, 189, 244, 175, 237, 189, 188, 67, 24, 189, 168, 168, 93, 189, 42, 137, 42, 62, 164, 170, 129, 189, 18, 166, 166, 61, 227, 246, 133, 61, 102, 114, 42, 190, 23, 197, 222, 61, 161, 173, 93, 189, 51, 243, 177, 61, 152, 245, 50, 190, 53, 164, 61, 61, 175, 250, 170, 188, 153, 122, 126, 189, 154, 150, 28, 190, 106, 166, 240, 189, 173, 218, 52, 61, 103, 137, 111, 188, 111, 243, 187, 186, 158, 224, 112, 189, 119, 129, 25, 62, 144, 136, 166, 61, 160, 153, 49, 190, 186, 200, 167, 61, 6, 13, 39, 190, 89, 198, 174, 61, 60, 143, 141, 189, 102, 37, 127, 61, 146, 101, 126, 61, 202, 124, 45, 62, 101, 34, 95, 189, 62, 214, 250, 61, 37, 22, 237, 61, 175, 44, 103, 61, 218, 70, 64, 188, 216, 95, 43, 61, 1, 106, 180, 188, 226, 58, 216, 60, 42, 211, 172, 189, 173, 102, 37, 62, 112, 254, 34, 62, 165, 168, 216, 189, 208, 127, 239, 57, 46, 254, 205, 189, 165, 106, 26, 190, 29, 195, 47, 62, 245, 93, 33, 62, 1, 181, 127, 61, 110, 7, 227, 189, 27, 237, 210, 61, 241, 186, 185, 188, 169, 121, 163, 61, 6, 149, 44, 190, 40, 51, 132, 61, 182, 60, 27, 190, 51, 213, 13, 62, 53, 128, 242, 61, 189, 88, 236, 189, 82, 101, 167, 59, 26, 188, 95, 189, 174, 200, 8, 62, 247, 191, 146, 188, 89, 235, 25, 62, 86, 237, 27, 62, 60, 72, 3, 190, 137, 67, 38, 62, 54, 137, 52, 190, 78, 248, 177, 188, 17, 172, 186, 61, 10, 18, 98, 188, 186, 113, 195, 60, 222, 205, 80, 61, 137, 115, 246, 61, 110, 139, 41, 190, 13, 38, 139, 61, 119, 34, 69, 189, 19, 230, 7, 61, 203, 198, 154, 61, 91, 78, 12, 190, 167, 68, 38, 190, 243, 199, 214, 61, 252, 174, 21, 62, 255, 121, 151, 189, 233, 173, 163, 187, 25, 67, 36, 190, 235, 167, 25, 62, 21, 228, 146, 61, 140, 162, 25, 190, 254, 187, 165, 189, 197, 203, 144, 189, 49, 87, 152, 60, 255, 129, 198, 59, 244, 33, 229, 187, 107, 250, 19, 190, 55, 38, 8, 62, 207, 158, 48, 62, 83, 176, 206, 61, 207, 135, 24, 190, 47, 91, 122, 60, 47, 159, 15, 62, 135, 8, 12, 62, 184, 23, 147, 189, 193, 46, 186, 189, 209, 109, 17, 62, 205, 120, 203, 61, 38, 122, 3, 189, 141, 95, 19, 61, 238, 129, 11, 62, 80, 189, 12, 62, 154, 22, 24, 190, 141, 229, 26, 190, 78, 216, 142, 61, 49, 237, 245, 189, 240, 211, 253, 189, 25, 154, 178, 61, 31, 223, 2, 190, 230, 158, 45, 190, 188, 55, 56, 188, 27, 149, 52, 190, 39, 225, 157, 189, 2, 70, 3, 62, 26, 58, 195, 189, 168, 118, 41, 62, 25, 0, 114, 60, 52, 206, 92, 61, 220, 184, 7, 190, 147, 47, 248, 61, 135, 244, 149, 189, 161, 89, 216, 61, 26, 82, 112, 189, 7, 213, 38, 189, 1, 59, 160, 189, 43, 44, 150, 189, 63, 239, 183, 61, 20, 24, 23, 62, 68, 95, 197, 61, 126, 41, 235, 61, 12, 112, 49, 62, 62, 13, 165, 61, 14, 128, 40, 61, 35, 252, 23, 190, 236, 147, 6, 62, 75, 81, 40, 190, 190, 142, 100, 61, 103, 183, 18, 190, 156, 40, 140, 188, 254, 144, 236, 189, 195, 63, 250, 188, 82, 160, 119, 189, 19, 185, 13, 61, 195, 159, 138, 189, 247, 93, 226, 61, 95, 107, 248, 61, 79, 37, 1, 60, 87, 207, 209, 189, 77, 59, 21, 188, 242, 176, 136, 59, 254, 105, 218, 61, 64, 96, 187, 189, 82, 197, 215, 189, 51, 46, 12, 190, 175, 107, 6, 62, 92, 233, 172, 61, 177, 226, 32, 190, 79, 202, 127, 61, 74, 37, 252, 189, 129, 156, 212, 61, 29, 95, 150, 60, 195, 210, 19, 190, 207, 182, 28, 190, 165, 177, 121, 189, 239, 149, 18, 61, 240, 65, 177, 61, 54, 186, 28, 62, 248, 6, 152, 189, 209, 57, 147, 61, 91, 216, 252, 61, 209, 60, 167, 188, 8, 206, 39, 190, 223, 184, 98, 188, 177, 224, 127, 61, 162, 53, 241, 189, 236, 210, 73, 61, 244, 60, 238, 61, 171, 167, 31, 189, 153, 187, 49, 62, 140, 104, 205, 188, 227, 195, 75, 60, 94, 104, 155, 61, 50, 59, 190, 61, 180, 124, 26, 190, 182, 181, 152, 61, 244, 34, 2, 190, 226, 67, 1, 190, 43, 6, 10, 61, 95, 133, 44, 189, 67, 21, 177, 189, 123, 149, 10, 190, 121, 25, 49, 62, 215, 180, 42, 190, 1, 225, 187, 61, 219, 255, 33, 188, 106, 139, 65, 188, 90, 62, 31, 62, 93, 61, 17, 190, 108, 220, 50, 190, 36, 121, 220, 189, 127, 73, 39, 62, 21, 149, 237, 58, 218, 75, 113, 61, 127, 145, 30, 62, 234, 87, 183, 61, 249, 16, 220, 189, 32, 161, 6, 189, 166, 142, 46, 190, 234, 60, 50, 62, 39, 114, 9, 62, 183, 228, 48, 62, 42, 61, 95, 188, 115, 53, 205, 61, 250, 114, 163, 61, 214, 5, 239, 188, 170, 252, 22, 188, 84, 25, 235, 188, 218, 148, 185, 189, 238, 210, 0, 62, 45, 191, 24, 62, 228, 254, 143, 186, 40, 127, 162, 189, 152, 151, 137, 61, 252, 144, 191, 189, 114, 55, 30, 62, 62, 111, 222, 188, 233, 150, 169, 61, 11, 16, 33, 62, 223, 173, 137, 60, 121, 121, 176, 188, 130, 181, 185, 188, 97, 163, 252, 61, 125, 24, 73, 61, 161, 136, 50, 189, 200, 239, 31, 188, 47, 139, 140, 188, 250, 215, 30, 62, 161, 92, 66, 60, 113, 183, 199, 188, 38, 166, 185, 60, 38, 199, 219, 61, 178, 162, 16, 62, 43, 137, 112, 189, 108, 146, 12, 62, 164, 211, 142, 189, 202, 68, 172, 189, 220, 105, 4, 62, 217, 8, 179, 60, 143, 179, 232, 188, 100, 140, 248, 189, 67, 192, 150, 189, 202, 234, 123, 189, 179, 102, 216, 61, 131, 241, 225, 59, 238, 211, 157, 189, 104, 215, 30, 190, 26, 26, 201, 60, 56, 127, 18, 188, 64, 109, 155, 188, 196, 11, 213, 60, 191, 13, 206, 61, 84, 119, 107, 189, 212, 201, 163, 61, 89, 57, 150, 189, 38, 228, 169, 60, 149, 59, 72, 189, 21, 251, 71, 61, 38, 235, 178, 188, 5, 155, 178, 189, 250, 12, 201, 61, 194, 22, 210, 189, 222, 149, 52, 62, 170, 215, 0, 62, 47, 106, 203, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 201, 211, 188, 209, 234, 149, 189, 194, 222, 125, 61, 57, 43, 95, 188, 38, 67, 168, 189, 72, 184, 155, 61, 254, 195, 128, 189, 213, 101, 133, 61, 211, 110, 19, 190, 44, 141, 88, 59, 90, 187, 132, 60, 152, 13, 2, 188, 82, 156, 156, 189, 66, 94, 92, 61, 97, 236, 21, 62, 98, 35, 43, 190, 164, 10, 183, 60, 218, 253, 231, 60, 140, 216, 24, 189, 252, 56, 211, 60, 53, 248, 63, 189, 160, 168, 57, 189, 2, 148, 4, 62, 208, 66, 23, 190, 245, 90, 98, 188, 56, 7, 113, 189, 95, 6, 98, 60, 223, 140, 69, 61, 190, 112, 155, 61, 220, 125, 220, 60, 197, 196, 230, 189, 69, 169, 33, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 105, 182, 59, 243, 126, 6, 190, 141, 160, 193, 61, 45, 215, 15, 62, 14, 112, 38, 190, 173, 15, 26, 62, 133, 244, 212, 59, 166, 95, 174, 188, 107, 13, 56, 61, 90, 170, 222, 60, 136, 125, 24, 61, 18, 217, 163, 189, 148, 76, 124, 189, 18, 158, 66, 189, 46, 236, 222, 61, 96, 204, 13, 62, 238, 154, 191, 189, 227, 85, 40, 190, 72, 19, 235, 61, 21, 125, 44, 62, 44, 68, 44, 62, 136, 48, 98, 61, 218, 232, 33, 61, 163, 165, 3, 61, 109, 123, 61, 189, 40, 30, 6, 189, 92, 200, 36, 62, 200, 51, 187, 189, 214, 152, 192, 189, 235, 26, 48, 190, 14, 23, 5, 190, 149, 197, 41, 190, 110, 34, 61, 59, 8, 121, 138, 61, 222, 40, 127, 61, 15, 6, 241, 61, 146, 237, 35, 190, 209, 240, 189, 188, 99, 231, 149, 189, 67, 117, 49, 62, 43, 195, 123, 61, 8, 159, 9, 189, 162, 103, 148, 189, 94, 151, 206, 61, 135, 237, 228, 61, 34, 94, 156, 189, 190, 103, 36, 62, 114, 104, 159, 61, 107, 67, 40, 61, 215, 187, 115, 189, 67, 26, 198, 61, 135, 191, 202, 61, 108, 26, 33, 61, 195, 180, 193, 189, 172, 182, 166, 189, 172, 70, 224, 61, 35, 5, 139, 189, 244, 210, 46, 61, 203, 56, 27, 188, 75, 108, 5, 190, 86, 86, 214, 60, 249, 188, 160, 189, 219, 63, 58, 59, 64, 232, 13, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 107, 22, 190, 252, 242, 255, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 196, 250, 190, 166, 133, 117, 187, 145, 34, 215, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 122, 178, 190, 184, 180, 47, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}