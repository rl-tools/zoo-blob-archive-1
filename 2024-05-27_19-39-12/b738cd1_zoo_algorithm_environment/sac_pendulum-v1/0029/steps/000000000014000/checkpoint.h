// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 92, 89, 63, 14, 136, 51, 63, 255, 192, 1, 63, 133, 144, 27, 61, 89, 44, 11, 191, 155, 95, 25, 190, 162, 103, 157, 191, 236, 140, 248, 189, 95, 180, 189, 188, 236, 64, 93, 191, 61, 122, 183, 62, 158, 163, 11, 62, 48, 4, 231, 62, 114, 251, 33, 191, 59, 110, 45, 191, 13, 11, 41, 63, 71, 12, 86, 63, 149, 213, 186, 62, 249, 214, 76, 63, 75, 85, 15, 61, 239, 230, 86, 189, 195, 216, 252, 190, 167, 216, 145, 61, 81, 42, 16, 63, 22, 115, 100, 189, 201, 226, 114, 62, 255, 86, 192, 62, 159, 225, 201, 62, 24, 88, 178, 63, 60, 38, 160, 62, 41, 97, 152, 62, 74, 108, 153, 62, 18, 147, 119, 62, 31, 58, 23, 191, 169, 132, 118, 63, 217, 54, 40, 189, 156, 93, 133, 190, 114, 77, 193, 62, 56, 134, 14, 191, 174, 122, 4, 191, 112, 0, 239, 63, 64, 116, 208, 62, 48, 5, 205, 62, 73, 221, 162, 190, 163, 24, 178, 62, 96, 101, 33, 191, 73, 222, 58, 63, 222, 228, 90, 62, 99, 244, 167, 62, 235, 74, 180, 63, 70, 59, 19, 189, 29, 12, 43, 62, 167, 5, 145, 191, 114, 207, 199, 62, 235, 168, 24, 63, 75, 216, 133, 63, 9, 44, 196, 62, 132, 244, 168, 190, 23, 166, 10, 192, 254, 171, 31, 191, 16, 40, 24, 63, 127, 0, 133, 62, 194, 185, 104, 188, 243, 74, 87, 61, 67, 23, 17, 191, 254, 226, 237, 62, 203, 73, 212, 62, 36, 58, 138, 63, 194, 152, 220, 190, 128, 34, 191, 190, 68, 92, 73, 191, 226, 84, 36, 191, 113, 129, 15, 191, 20, 12, 16, 191, 103, 248, 173, 61, 175, 170, 81, 191, 106, 51, 231, 61, 134, 174, 190, 189, 153, 8, 215, 190, 7, 118, 155, 62, 3, 104, 14, 63, 121, 170, 98, 63, 247, 84, 116, 191, 96, 4, 166, 190, 194, 28, 179, 62, 13, 197, 16, 63, 242, 95, 196, 190, 202, 112, 32, 189, 82, 206, 233, 63, 16, 230, 220, 62, 119, 120, 180, 62, 200, 234, 103, 191, 59, 59, 22, 61, 20, 36, 145, 62, 122, 217, 166, 191, 230, 62, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 136, 237, 190, 149, 83, 201, 62, 187, 186, 98, 188, 98, 154, 116, 63, 11, 35, 197, 190, 189, 57, 170, 189, 125, 72, 194, 188, 60, 195, 233, 190, 163, 67, 10, 62, 196, 140, 17, 63, 192, 189, 27, 190, 69, 150, 108, 62, 73, 223, 210, 190, 242, 176, 169, 190, 29, 0, 125, 61, 196, 60, 32, 191, 120, 194, 243, 60, 194, 99, 19, 190, 116, 9, 61, 191, 240, 132, 160, 61, 75, 222, 130, 62, 161, 108, 16, 190, 228, 249, 11, 62, 172, 206, 154, 189, 20, 48, 162, 188, 117, 19, 4, 191, 123, 86, 61, 189, 121, 59, 8, 191, 123, 189, 193, 188, 33, 126, 174, 61, 65, 246, 44, 62, 93, 155, 245, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 98, 67, 191, 154, 111, 162, 62, 101, 67, 207, 62, 205, 175, 77, 62, 23, 45, 217, 61, 179, 105, 211, 190, 43, 160, 217, 190, 146, 66, 122, 62, 133, 58, 225, 61, 192, 201, 241, 189, 132, 15, 185, 190, 222, 27, 16, 190, 69, 146, 2, 189, 169, 103, 142, 189, 53, 49, 172, 190, 150, 77, 155, 62, 130, 206, 69, 191, 143, 148, 118, 189, 197, 195, 255, 190, 79, 28, 85, 62, 104, 5, 16, 191, 147, 177, 202, 189, 246, 180, 47, 188, 23, 226, 11, 62, 140, 22, 21, 63, 186, 17, 99, 62, 59, 240, 143, 62, 130, 65, 115, 62, 4, 59, 102, 189, 3, 48, 71, 188, 14, 131, 218, 61, 62, 29, 196, 62, 146, 136, 68, 61, 232, 0, 20, 190, 219, 158, 238, 61, 92, 240, 60, 190, 240, 139, 213, 61, 239, 69, 214, 189, 1, 236, 228, 188, 130, 109, 219, 189, 194, 1, 245, 61, 210, 172, 84, 187, 129, 26, 172, 61, 133, 217, 7, 62, 144, 67, 5, 190, 213, 106, 6, 62, 1, 126, 194, 59, 55, 165, 46, 190, 219, 250, 159, 187, 25, 252, 9, 61, 186, 255, 172, 188, 43, 220, 199, 60, 235, 9, 174, 189, 255, 55, 7, 62, 76, 6, 143, 60, 148, 119, 118, 188, 54, 103, 73, 189, 16, 60, 168, 189, 35, 244, 34, 189, 156, 230, 235, 61, 233, 26, 3, 190, 2, 46, 22, 190, 234, 164, 63, 190, 253, 127, 27, 60, 35, 188, 208, 61, 204, 230, 148, 59, 100, 31, 25, 62, 25, 36, 253, 189, 72, 74, 176, 61, 46, 136, 76, 61, 40, 98, 28, 190, 171, 79, 192, 60, 92, 232, 2, 61, 115, 104, 235, 58, 130, 13, 17, 61, 170, 199, 36, 190, 31, 28, 17, 189, 250, 120, 29, 190, 170, 129, 224, 188, 230, 145, 189, 189, 145, 194, 150, 189, 159, 222, 226, 189, 109, 252, 11, 62, 232, 207, 24, 190, 193, 154, 190, 187, 109, 183, 68, 190, 92, 57, 240, 189, 238, 141, 184, 189, 62, 28, 83, 61, 53, 89, 93, 61, 172, 96, 158, 61, 180, 216, 0, 62, 109, 58, 36, 62, 187, 36, 43, 189, 192, 158, 52, 61, 96, 218, 62, 190, 107, 235, 15, 63, 246, 139, 64, 191, 136, 202, 150, 190, 223, 240, 154, 189, 122, 183, 70, 190, 121, 154, 204, 61, 207, 20, 244, 62, 29, 217, 170, 188, 136, 120, 48, 189, 116, 184, 87, 61, 233, 134, 100, 62, 195, 50, 38, 190, 146, 103, 154, 61, 231, 85, 174, 187, 238, 170, 71, 189, 242, 103, 180, 190, 22, 2, 166, 62, 130, 103, 164, 190, 218, 176, 237, 62, 103, 152, 28, 61, 20, 127, 158, 62, 206, 150, 92, 61, 130, 100, 98, 61, 20, 77, 165, 190, 1, 56, 237, 190, 17, 16, 166, 61, 232, 245, 109, 187, 165, 172, 128, 190, 42, 167, 33, 191, 187, 3, 121, 61, 127, 71, 56, 191, 41, 68, 47, 191, 47, 245, 138, 62, 59, 190, 245, 61, 149, 194, 11, 190, 202, 45, 183, 61, 55, 151, 192, 189, 196, 56, 20, 62, 83, 193, 228, 188, 174, 109, 107, 61, 220, 220, 7, 62, 174, 188, 21, 62, 182, 227, 216, 61, 110, 157, 189, 61, 102, 100, 148, 191, 39, 62, 18, 62, 193, 158, 15, 62, 93, 227, 72, 190, 48, 206, 52, 62, 5, 200, 117, 60, 44, 81, 238, 61, 209, 251, 180, 190, 253, 144, 105, 62, 46, 197, 24, 62, 159, 44, 255, 188, 163, 127, 211, 190, 106, 237, 89, 190, 243, 93, 106, 190, 144, 120, 128, 62, 85, 160, 248, 188, 237, 39, 49, 190, 11, 57, 223, 61, 93, 131, 177, 57, 170, 209, 138, 190, 163, 39, 4, 191, 245, 46, 93, 61, 22, 32, 128, 190, 65, 52, 44, 190, 148, 141, 110, 62, 116, 18, 153, 190, 12, 208, 73, 62, 221, 36, 201, 61, 80, 224, 143, 190, 253, 181, 178, 190, 63, 163, 32, 189, 209, 187, 160, 61, 225, 21, 25, 62, 91, 11, 215, 189, 18, 110, 208, 62, 220, 154, 193, 190, 159, 1, 247, 61, 130, 231, 248, 62, 224, 181, 215, 191, 28, 35, 51, 62, 109, 57, 185, 62, 121, 175, 0, 62, 193, 74, 216, 60, 49, 2, 63, 62, 38, 29, 187, 62, 15, 172, 255, 61, 153, 230, 25, 190, 185, 163, 180, 62, 199, 190, 125, 60, 248, 30, 231, 190, 20, 131, 83, 62, 27, 90, 168, 62, 72, 33, 104, 62, 8, 217, 65, 62, 135, 174, 207, 62, 77, 90, 191, 61, 37, 38, 67, 190, 205, 210, 18, 63, 134, 33, 203, 61, 86, 118, 90, 61, 79, 211, 2, 62, 121, 70, 17, 61, 172, 107, 62, 62, 77, 27, 177, 189, 177, 26, 237, 61, 216, 19, 190, 191, 47, 88, 92, 189, 198, 36, 232, 191, 174, 169, 199, 62, 223, 152, 139, 191, 188, 203, 219, 62, 247, 189, 69, 62, 18, 29, 54, 189, 35, 84, 79, 190, 246, 242, 135, 62, 142, 241, 202, 61, 45, 4, 210, 62, 241, 41, 16, 190, 18, 29, 194, 189, 26, 24, 45, 190, 250, 70, 255, 61, 153, 113, 112, 191, 202, 212, 16, 190, 6, 80, 94, 60, 228, 53, 159, 61, 169, 83, 135, 189, 237, 49, 210, 189, 180, 134, 252, 189, 249, 122, 141, 189, 156, 224, 239, 188, 76, 143, 12, 62, 13, 25, 67, 190, 75, 225, 175, 189, 176, 188, 8, 190, 59, 232, 128, 61, 87, 43, 55, 61, 70, 234, 119, 188, 186, 90, 140, 60, 55, 226, 246, 60, 50, 14, 225, 189, 244, 198, 21, 190, 97, 98, 57, 190, 251, 235, 66, 189, 217, 212, 165, 188, 72, 116, 25, 188, 115, 255, 173, 61, 97, 4, 147, 189, 238, 7, 134, 184, 220, 17, 243, 189, 107, 89, 12, 190, 49, 74, 156, 61, 192, 251, 131, 189, 31, 105, 197, 61, 247, 221, 67, 190, 239, 239, 41, 189, 18, 218, 148, 189, 48, 235, 33, 190, 2, 30, 132, 188, 68, 197, 214, 187, 98, 106, 69, 190, 46, 215, 129, 189, 0, 252, 97, 61, 244, 46, 249, 188, 68, 193, 213, 59, 115, 224, 188, 61, 245, 189, 162, 61, 88, 203, 215, 189, 208, 197, 23, 190, 86, 183, 11, 189, 219, 124, 248, 188, 113, 72, 11, 190, 80, 183, 26, 60, 63, 188, 165, 189, 16, 51, 188, 189, 108, 1, 27, 190, 122, 134, 58, 61, 116, 16, 187, 189, 157, 139, 170, 60, 187, 42, 18, 61, 17, 228, 14, 190, 11, 45, 207, 61, 193, 227, 153, 61, 122, 166, 4, 62, 170, 111, 209, 59, 196, 52, 112, 189, 161, 211, 113, 61, 111, 254, 163, 60, 132, 56, 145, 189, 217, 59, 135, 61, 196, 81, 152, 60, 24, 114, 234, 190, 221, 235, 58, 191, 2, 170, 99, 61, 243, 34, 120, 62, 60, 241, 112, 62, 1, 242, 15, 62, 177, 21, 170, 189, 102, 46, 100, 190, 188, 28, 206, 61, 38, 56, 76, 190, 69, 71, 99, 189, 109, 113, 128, 187, 208, 193, 97, 62, 105, 138, 1, 191, 125, 16, 174, 189, 186, 175, 215, 189, 158, 79, 217, 191, 121, 76, 228, 61, 106, 92, 221, 61, 214, 95, 128, 62, 249, 209, 232, 61, 116, 128, 255, 188, 51, 106, 141, 62, 5, 71, 28, 60, 38, 44, 216, 61, 215, 227, 98, 62, 228, 42, 50, 62, 36, 11, 138, 191, 85, 36, 38, 62, 122, 226, 145, 62, 220, 218, 23, 191, 1, 116, 246, 188, 2, 51, 55, 191, 86, 156, 120, 191, 135, 108, 163, 62, 203, 127, 186, 59, 3, 185, 7, 63, 172, 151, 171, 61, 120, 109, 45, 61, 61, 30, 26, 191, 115, 185, 25, 191, 30, 198, 193, 190, 74, 68, 187, 189, 92, 235, 28, 190, 228, 5, 40, 190, 191, 193, 195, 61, 219, 104, 241, 61, 238, 201, 82, 191, 251, 128, 33, 189, 158, 45, 213, 189, 199, 70, 121, 62, 205, 184, 186, 190, 16, 200, 33, 61, 74, 247, 123, 61, 175, 92, 90, 191, 196, 52, 146, 189, 175, 215, 76, 190, 242, 85, 29, 62, 32, 16, 8, 62, 61, 231, 174, 190, 175, 182, 133, 190, 205, 65, 80, 62, 21, 25, 172, 190, 4, 70, 99, 189, 10, 145, 90, 189, 29, 105, 182, 190, 154, 157, 150, 62, 68, 110, 141, 190, 161, 160, 185, 62, 223, 202, 14, 189, 211, 237, 134, 61, 111, 235, 250, 190, 108, 48, 16, 189, 182, 100, 201, 190, 251, 17, 52, 61, 92, 95, 99, 62, 129, 93, 138, 61, 87, 34, 177, 62, 220, 251, 173, 190, 50, 131, 171, 62, 99, 164, 165, 187, 28, 74, 149, 189, 178, 90, 209, 61, 125, 93, 122, 62, 145, 57, 137, 61, 233, 51, 218, 188, 8, 121, 51, 190, 170, 189, 6, 190, 89, 224, 211, 61, 77, 5, 128, 63, 164, 187, 45, 60, 192, 187, 70, 60, 56, 28, 62, 190, 64, 210, 134, 62, 235, 21, 138, 189, 65, 187, 42, 190, 71, 123, 1, 62, 3, 69, 133, 189, 247, 26, 146, 189, 44, 9, 6, 190, 146, 213, 1, 190, 35, 212, 8, 190, 145, 236, 4, 190, 236, 130, 13, 62, 174, 129, 80, 61, 181, 221, 13, 190, 21, 3, 156, 61, 54, 95, 180, 61, 247, 34, 194, 61, 229, 82, 32, 60, 118, 105, 249, 189, 140, 178, 196, 189, 62, 101, 42, 190, 251, 234, 156, 61, 70, 115, 217, 61, 135, 134, 33, 189, 138, 113, 142, 189, 123, 179, 248, 189, 37, 214, 174, 61, 37, 144, 17, 190, 172, 107, 27, 62, 135, 205, 120, 61, 23, 75, 32, 190, 7, 111, 12, 190, 20, 212, 248, 61, 134, 33, 228, 189, 131, 8, 31, 191, 103, 73, 100, 61, 164, 14, 98, 62, 159, 195, 3, 60, 79, 2, 123, 190, 97, 27, 82, 59, 219, 14, 16, 190, 61, 231, 244, 61, 206, 56, 14, 190, 73, 52, 231, 59, 167, 10, 49, 190, 226, 195, 105, 62, 5, 236, 112, 61, 231, 55, 216, 191, 4, 179, 203, 189, 112, 156, 244, 191, 75, 238, 29, 62, 60, 2, 137, 190, 210, 118, 159, 62, 50, 54, 8, 62, 107, 192, 103, 189, 230, 244, 239, 62, 181, 65, 157, 62, 30, 77, 144, 62, 202, 133, 176, 62, 234, 52, 233, 61, 36, 213, 10, 62, 221, 0, 188, 190, 242, 104, 100, 62, 116, 59, 165, 191, 255, 97, 53, 190, 169, 103, 55, 60, 208, 103, 142, 189, 24, 167, 83, 190, 10, 64, 114, 60, 141, 255, 85, 62, 242, 126, 17, 190, 91, 162, 188, 60, 9, 58, 84, 62, 164, 183, 20, 190, 73, 55, 16, 62, 105, 136, 6, 189, 106, 66, 26, 190, 45, 122, 101, 62, 101, 0, 76, 62, 56, 128, 66, 62, 137, 253, 181, 189, 141, 26, 163, 62, 46, 191, 23, 62, 125, 36, 226, 189, 220, 53, 186, 60, 173, 8, 142, 191, 78, 43, 128, 190, 113, 84, 70, 60, 150, 24, 7, 63, 168, 116, 237, 190, 145, 150, 255, 60, 231, 64, 215, 62, 139, 214, 54, 62, 235, 54, 226, 190, 240, 204, 134, 189, 189, 121, 64, 62, 233, 61, 109, 190, 57, 111, 255, 191, 45, 6, 190, 190, 25, 233, 127, 62, 4, 31, 128, 61, 106, 36, 0, 188, 221, 104, 204, 62, 101, 38, 106, 189, 220, 134, 128, 62, 198, 72, 83, 188, 90, 245, 105, 62, 244, 18, 146, 190, 68, 156, 59, 190, 169, 219, 226, 190, 227, 128, 131, 189, 242, 244, 73, 190, 242, 136, 150, 189, 143, 91, 114, 62, 247, 131, 188, 189, 149, 18, 159, 62, 181, 24, 65, 191, 124, 41, 104, 62, 18, 137, 98, 62, 38, 234, 121, 189, 132, 222, 252, 188, 99, 62, 9, 190, 240, 222, 131, 62, 71, 129, 32, 190, 127, 4, 174, 61, 40, 124, 51, 63, 78, 163, 61, 189, 216, 167, 228, 189, 156, 193, 78, 62, 195, 128, 152, 62, 72, 11, 13, 63, 231, 242, 182, 60, 147, 167, 160, 188, 136, 2, 124, 190, 70, 61, 229, 190, 111, 65, 221, 61, 59, 96, 203, 62, 231, 90, 7, 189, 216, 216, 76, 60, 209, 7, 182, 189, 236, 243, 146, 62, 212, 200, 75, 62, 40, 76, 30, 61, 7, 249, 187, 190, 10, 65, 119, 62, 251, 97, 32, 191, 187, 176, 141, 62, 15, 120, 155, 190, 205, 200, 118, 62, 234, 190, 10, 190, 88, 231, 136, 62, 4, 177, 50, 62, 90, 232, 5, 61, 170, 247, 11, 62, 103, 62, 74, 190, 46, 236, 139, 60, 150, 50, 201, 188, 247, 220, 89, 191, 44, 181, 41, 62, 32, 190, 183, 190, 59, 24, 116, 190, 219, 114, 67, 190, 158, 205, 199, 62, 207, 33, 128, 62, 170, 237, 176, 62, 213, 33, 19, 189, 167, 110, 112, 190, 170, 210, 23, 63, 70, 214, 77, 62, 121, 0, 79, 190, 229, 133, 87, 62, 185, 70, 31, 61, 234, 146, 161, 62, 136, 78, 148, 189, 126, 186, 131, 62, 216, 191, 202, 191, 65, 131, 142, 61, 49, 8, 174, 191, 101, 155, 115, 62, 173, 115, 70, 191, 138, 195, 242, 61, 127, 238, 40, 62, 250, 77, 18, 61, 37, 31, 19, 62, 171, 224, 35, 62, 90, 158, 1, 189, 216, 183, 52, 62, 242, 206, 139, 59, 94, 176, 73, 189, 159, 203, 174, 190, 127, 48, 101, 62, 234, 113, 113, 191, 29, 128, 146, 190, 244, 108, 152, 189, 116, 148, 221, 190, 181, 239, 239, 61, 222, 222, 253, 61, 100, 14, 72, 189, 210, 71, 73, 62, 47, 91, 207, 190, 227, 165, 157, 189, 101, 16, 162, 61, 198, 176, 106, 61, 53, 231, 1, 190, 36, 41, 146, 190, 94, 22, 128, 190, 86, 162, 55, 60, 179, 88, 104, 61, 52, 67, 76, 190, 231, 41, 212, 62, 44, 2, 248, 189, 99, 215, 187, 62, 96, 127, 161, 190, 13, 74, 34, 190, 255, 139, 110, 62, 82, 176, 82, 189, 181, 129, 198, 61, 182, 147, 129, 190, 110, 174, 121, 62, 41, 233, 23, 190, 251, 247, 6, 62, 185, 180, 222, 62, 37, 76, 85, 190, 190, 2, 251, 61, 6, 20, 137, 62, 43, 8, 153, 61, 6, 85, 205, 190, 86, 70, 188, 61, 189, 203, 141, 62, 162, 148, 165, 60, 74, 84, 124, 190, 208, 19, 96, 190, 20, 187, 14, 190, 230, 191, 148, 62, 80, 207, 8, 60, 43, 227, 77, 60, 106, 73, 244, 60, 128, 220, 116, 62, 254, 24, 191, 190, 171, 87, 94, 62, 178, 19, 3, 190, 249, 254, 153, 62, 162, 216, 205, 189, 38, 82, 172, 60, 54, 14, 67, 190, 39, 191, 254, 191, 104, 162, 36, 62, 61, 128, 31, 190, 218, 237, 125, 190, 145, 91, 142, 191, 177, 14, 89, 62, 143, 67, 6, 63, 163, 231, 59, 62, 252, 51, 39, 62, 235, 94, 114, 191, 88, 158, 174, 61, 63, 143, 138, 60, 217, 28, 171, 191, 63, 187, 164, 62, 127, 55, 11, 190, 22, 224, 62, 189, 34, 97, 71, 62, 178, 45, 29, 62, 154, 132, 92, 62, 250, 254, 166, 190, 19, 106, 34, 191, 87, 21, 136, 190, 178, 65, 32, 190, 144, 13, 193, 62, 98, 74, 128, 61, 10, 64, 102, 62, 120, 171, 105, 62, 241, 231, 138, 61, 127, 15, 46, 191, 166, 8, 84, 62, 13, 168, 51, 190, 177, 237, 110, 62, 103, 129, 105, 62, 193, 159, 185, 189, 106, 145, 83, 189, 119, 14, 230, 60, 78, 123, 16, 62, 160, 149, 200, 189, 245, 159, 107, 61, 182, 90, 37, 190, 17, 114, 137, 61, 226, 123, 218, 61, 74, 41, 124, 62, 26, 145, 223, 190, 122, 217, 174, 189, 217, 139, 91, 190, 40, 46, 94, 62, 54, 224, 176, 62, 32, 245, 159, 61, 64, 120, 15, 63, 77, 174, 116, 190, 23, 72, 251, 62, 4, 97, 165, 60, 135, 124, 136, 61, 101, 17, 69, 190, 128, 22, 166, 190, 68, 156, 129, 61, 93, 184, 137, 190, 117, 160, 50, 187, 26, 53, 173, 189, 75, 207, 219, 61, 53, 247, 3, 191, 226, 39, 179, 62, 149, 43, 170, 190, 64, 170, 229, 191, 255, 94, 233, 60, 152, 52, 93, 190, 13, 222, 196, 190, 103, 174, 152, 191, 142, 161, 113, 62, 53, 250, 216, 60, 135, 91, 54, 62, 79, 16, 30, 63, 248, 56, 43, 191, 212, 138, 135, 61, 137, 153, 180, 62, 51, 176, 249, 189, 1, 29, 60, 190, 178, 151, 185, 62, 149, 215, 94, 191, 80, 202, 89, 191, 116, 151, 184, 62, 97, 207, 226, 189, 83, 221, 252, 62, 26, 13, 230, 189, 43, 14, 218, 186, 154, 103, 163, 190, 25, 110, 45, 61, 49, 201, 72, 191, 169, 121, 13, 190, 18, 190, 147, 190, 41, 101, 233, 62, 171, 145, 17, 191, 203, 94, 250, 189, 164, 129, 242, 62, 214, 153, 228, 191, 115, 108, 219, 187, 77, 215, 145, 62, 61, 58, 237, 61, 162, 167, 202, 61, 137, 0, 21, 62, 121, 165, 19, 62, 126, 32, 163, 189, 29, 36, 21, 190, 108, 74, 246, 62, 12, 141, 205, 61, 110, 231, 92, 191, 37, 34, 237, 62, 78, 34, 212, 62, 221, 217, 64, 190, 249, 73, 155, 61, 95, 169, 127, 61, 211, 143, 105, 62, 21, 50, 4, 188, 49, 133, 32, 190, 87, 136, 40, 191, 208, 249, 217, 190, 139, 195, 4, 191, 38, 24, 144, 189, 144, 123, 155, 190, 85, 212, 192, 62, 167, 203, 136, 62, 61, 186, 11, 61, 21, 155, 28, 190, 243, 81, 26, 189, 235, 182, 15, 62, 244, 41, 213, 188, 244, 120, 29, 61, 209, 70, 38, 62, 100, 37, 131, 190, 30, 173, 194, 190, 15, 103, 156, 186, 69, 109, 108, 62, 139, 236, 93, 190, 115, 237, 34, 62, 233, 150, 159, 190, 108, 104, 139, 62, 33, 63, 85, 62, 166, 22, 23, 62, 205, 27, 248, 189, 133, 2, 42, 190, 174, 214, 127, 190, 188, 129, 233, 188, 158, 109, 93, 62, 242, 180, 16, 62, 98, 122, 64, 63, 64, 246, 66, 190, 154, 119, 154, 62, 196, 229, 65, 62, 64, 196, 230, 61, 119, 60, 173, 188, 38, 69, 27, 190, 56, 65, 10, 190, 138, 147, 188, 190, 92, 21, 169, 189, 5, 15, 59, 61, 213, 98, 79, 62, 88, 66, 3, 190, 196, 128, 17, 62, 241, 140, 201, 190, 196, 148, 0, 192, 134, 210, 157, 62, 69, 142, 132, 189, 107, 104, 34, 189, 138, 154, 128, 191, 238, 91, 62, 62, 61, 65, 55, 62, 174, 244, 38, 62, 56, 62, 223, 62, 63, 241, 102, 60, 99, 167, 142, 190, 78, 143, 3, 62, 1, 46, 152, 189, 93, 206, 219, 190, 110, 122, 223, 189, 203, 178, 57, 62, 81, 2, 129, 62, 200, 14, 25, 188, 114, 97, 112, 60, 214, 109, 171, 61, 117, 132, 137, 59, 128, 178, 130, 62, 72, 157, 151, 189, 112, 84, 35, 190, 29, 22, 31, 62, 85, 23, 230, 189, 137, 117, 54, 62, 75, 3, 216, 189, 144, 204, 181, 62, 23, 234, 168, 190, 67, 248, 30, 190, 68, 8, 221, 190, 139, 83, 121, 61, 248, 60, 88, 190, 115, 250, 123, 190, 91, 59, 244, 190, 98, 70, 212, 60, 39, 57, 42, 62, 77, 29, 108, 190, 153, 180, 33, 62, 0, 121, 147, 190, 56, 234, 218, 60, 62, 37, 44, 62, 97, 98, 28, 191, 30, 177, 69, 61, 131, 217, 131, 190, 223, 57, 245, 61, 235, 43, 63, 191, 71, 37, 46, 191, 26, 177, 244, 59, 48, 3, 133, 190, 128, 13, 157, 62, 223, 22, 27, 190, 85, 128, 190, 190, 172, 179, 215, 190, 183, 22, 68, 190, 1, 95, 43, 190, 85, 100, 172, 189, 199, 124, 63, 190, 250, 24, 95, 62, 227, 98, 166, 189, 24, 127, 130, 189, 98, 29, 12, 63, 10, 203, 58, 189, 139, 9, 38, 62, 203, 151, 133, 61, 93, 32, 183, 61, 214, 212, 52, 62, 22, 167, 22, 190, 191, 163, 70, 189, 108, 203, 33, 189, 15, 153, 144, 190, 138, 35, 171, 61, 246, 66, 239, 61, 197, 157, 65, 190, 53, 40, 143, 61, 217, 204, 140, 62, 202, 191, 155, 187, 106, 218, 248, 61, 165, 171, 82, 62, 122, 159, 153, 188, 87, 165, 209, 190, 52, 114, 151, 62, 71, 172, 144, 189, 26, 180, 255, 61, 78, 82, 139, 188, 68, 97, 83, 61, 39, 189, 50, 61, 226, 27, 243, 60, 21, 64, 43, 62, 33, 154, 146, 61, 122, 122, 81, 62, 34, 62, 194, 189, 0, 17, 221, 62, 156, 26, 67, 190, 123, 86, 110, 60, 167, 125, 148, 190, 244, 224, 179, 62, 126, 109, 144, 189, 129, 177, 43, 62, 11, 162, 43, 190, 42, 64, 158, 190, 229, 175, 64, 190, 192, 103, 167, 60, 41, 126, 39, 191, 207, 180, 39, 62, 198, 50, 163, 190, 86, 80, 79, 190, 35, 72, 87, 190, 191, 76, 160, 61, 174, 36, 229, 189, 172, 39, 233, 190, 113, 21, 208, 190, 73, 134, 180, 62, 254, 249, 93, 191, 0, 114, 93, 190, 15, 132, 202, 61, 91, 115, 217, 61, 201, 34, 183, 191, 250, 12, 145, 61, 212, 228, 203, 190, 236, 201, 32, 190, 218, 116, 154, 61, 0, 80, 215, 61, 117, 45, 33, 190, 119, 87, 1, 191, 74, 125, 149, 62, 9, 84, 70, 189, 197, 107, 83, 62, 101, 190, 23, 61, 217, 17, 183, 61, 196, 54, 182, 61, 148, 241, 88, 62, 30, 1, 130, 60, 43, 49, 159, 190, 250, 151, 23, 62, 125, 183, 32, 63, 76, 160, 164, 189, 236, 174, 52, 190, 172, 0, 16, 62, 110, 233, 204, 61, 56, 4, 21, 62, 232, 24, 170, 189, 131, 65, 92, 189, 129, 13, 90, 61, 179, 116, 42, 61, 198, 176, 39, 190, 212, 200, 138, 61, 182, 45, 24, 190, 207, 124, 17, 190, 150, 130, 35, 61, 54, 7, 93, 189, 59, 28, 196, 189, 78, 115, 31, 190, 212, 8, 23, 62, 3, 81, 72, 190, 34, 93, 136, 61, 230, 111, 209, 186, 89, 54, 233, 189, 28, 13, 18, 62, 4, 218, 53, 190, 82, 250, 27, 190, 69, 71, 7, 190, 60, 123, 6, 62, 134, 136, 25, 189, 92, 93, 27, 189, 98, 235, 184, 61, 26, 150, 158, 61, 249, 16, 220, 189, 43, 70, 113, 189, 164, 68, 58, 190, 228, 201, 182, 61, 245, 17, 129, 61, 112, 127, 210, 62, 182, 173, 118, 188, 239, 251, 134, 62, 245, 64, 37, 62, 214, 208, 223, 190, 170, 29, 17, 62, 30, 148, 255, 60, 52, 91, 244, 189, 99, 18, 20, 62, 94, 27, 159, 62, 116, 161, 48, 62, 153, 178, 85, 62, 113, 97, 50, 62, 235, 72, 51, 190, 247, 136, 104, 62, 207, 5, 93, 190, 252, 197, 201, 62, 253, 148, 203, 189, 239, 7, 63, 62, 234, 11, 131, 190, 221, 127, 79, 61, 11, 138, 92, 62, 56, 138, 23, 62, 162, 162, 227, 188, 141, 51, 38, 190, 126, 230, 35, 190, 174, 201, 14, 62, 225, 148, 58, 191, 89, 146, 156, 59, 77, 4, 223, 188, 72, 240, 105, 189, 236, 30, 3, 190, 28, 4, 190, 190, 246, 233, 8, 62, 9, 67, 21, 191, 66, 109, 249, 190, 140, 118, 173, 62, 45, 9, 13, 191, 58, 201, 47, 190, 144, 198, 17, 62, 192, 31, 137, 187, 95, 73, 205, 191, 251, 125, 149, 62, 136, 86, 222, 190, 46, 244, 0, 190, 139, 227, 165, 190, 115, 111, 179, 61, 239, 115, 88, 188, 215, 178, 174, 190, 127, 223, 173, 62, 62, 104, 239, 188, 78, 234, 82, 61, 27, 209, 32, 61, 41, 229, 39, 62, 2, 46, 162, 60, 47, 129, 56, 61, 127, 155, 235, 188, 98, 54, 182, 190, 72, 99, 3, 62, 63, 253, 51, 63, 77, 88, 153, 189, 240, 251, 130, 189, 233, 205, 55, 62, 127, 38, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 100, 71, 62, 192, 128, 168, 189, 61, 25, 87, 61, 191, 252, 135, 190, 242, 60, 179, 189, 1, 59, 85, 62, 54, 248, 47, 62, 66, 128, 40, 60, 86, 210, 39, 190, 116, 71, 10, 62, 54, 70, 160, 189, 222, 136, 49, 190, 141, 108, 176, 189, 156, 8, 100, 62, 57, 38, 202, 61, 46, 86, 37, 190, 47, 130, 14, 189, 24, 97, 97, 62, 242, 208, 107, 60, 179, 183, 249, 61, 33, 254, 173, 189, 131, 184, 4, 62, 238, 113, 67, 62, 35, 161, 250, 189, 63, 180, 202, 61, 94, 137, 184, 189, 163, 52, 158, 59, 6, 43, 159, 61, 30, 137, 183, 189, 38, 132, 0, 189, 234, 61, 158, 188, 103, 242, 245, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 74, 230, 190, 246, 132, 4, 190, 129, 28, 175, 61, 83, 240, 99, 63, 112, 18, 99, 190, 200, 97, 180, 62, 13, 108, 226, 190, 36, 228, 200, 189, 243, 121, 146, 61, 33, 36, 73, 62, 174, 143, 0, 63, 219, 108, 136, 62, 71, 16, 128, 189, 2, 138, 214, 190, 197, 237, 17, 63, 100, 183, 224, 62, 206, 201, 37, 191, 227, 41, 33, 191, 169, 62, 146, 62, 239, 177, 139, 63, 190, 155, 159, 62, 42, 69, 91, 63, 119, 66, 3, 63, 203, 243, 155, 62, 141, 97, 134, 62, 121, 1, 10, 191, 5, 225, 200, 62, 91, 74, 148, 190, 33, 68, 84, 191, 147, 1, 194, 189, 227, 253, 174, 190, 245, 195, 106, 191, 85, 88, 128, 189, 97, 65, 140, 61, 37, 140, 103, 61, 52, 56, 110, 62, 206, 69, 109, 190, 240, 170, 11, 190, 126, 240, 151, 190, 123, 218, 238, 61, 110, 204, 203, 60, 52, 47, 157, 190, 56, 231, 29, 61, 98, 74, 244, 62, 118, 133, 226, 61, 234, 121, 102, 188, 28, 68, 231, 61, 55, 232, 81, 62, 235, 158, 48, 62, 253, 208, 38, 190, 192, 180, 156, 62, 220, 101, 131, 59, 133, 21, 56, 62, 195, 231, 38, 61, 65, 145, 170, 190, 169, 84, 45, 62, 223, 144, 240, 190, 245, 252, 0, 62, 190, 179, 189, 60, 132, 174, 137, 190, 199, 111, 207, 61, 209, 173, 79, 189, 2, 180, 131, 185, 56, 48, 184, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 177, 34, 190, 188, 185, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 153, 73, 63, 61, 60, 144, 190, 45, 201, 61, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 191, 2, 64, 247, 50, 84, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0029/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}