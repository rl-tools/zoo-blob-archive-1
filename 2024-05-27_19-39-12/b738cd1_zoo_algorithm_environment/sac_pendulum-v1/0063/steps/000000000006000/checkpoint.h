// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 55, 190, 60, 54, 0, 50, 191, 112, 69, 182, 190, 222, 248, 243, 190, 102, 135, 84, 190, 65, 108, 31, 63, 143, 139, 16, 63, 250, 70, 243, 190, 122, 228, 147, 190, 237, 239, 241, 190, 90, 212, 152, 63, 97, 224, 2, 63, 112, 219, 180, 61, 138, 193, 14, 190, 38, 17, 187, 190, 96, 10, 138, 62, 81, 80, 156, 62, 76, 148, 179, 60, 93, 248, 48, 63, 159, 176, 81, 63, 112, 63, 225, 62, 58, 133, 100, 62, 208, 241, 106, 63, 222, 91, 29, 63, 39, 226, 108, 191, 138, 196, 58, 191, 73, 196, 8, 191, 84, 198, 21, 63, 221, 150, 110, 190, 162, 109, 28, 190, 60, 24, 45, 63, 79, 91, 128, 191, 84, 102, 145, 190, 254, 181, 199, 59, 131, 175, 208, 61, 217, 96, 29, 189, 162, 69, 116, 62, 194, 212, 39, 191, 90, 40, 21, 63, 191, 3, 236, 62, 17, 12, 73, 63, 252, 129, 107, 62, 117, 96, 159, 190, 80, 74, 184, 61, 101, 132, 106, 63, 216, 4, 141, 190, 106, 26, 75, 191, 21, 14, 43, 190, 96, 66, 146, 190, 229, 230, 108, 191, 159, 129, 5, 63, 110, 49, 31, 62, 254, 103, 133, 190, 63, 180, 51, 63, 215, 131, 190, 62, 121, 34, 82, 63, 144, 216, 98, 62, 4, 208, 184, 190, 171, 206, 185, 189, 62, 38, 129, 190, 255, 71, 15, 191, 133, 72, 137, 191, 56, 7, 138, 190, 231, 169, 110, 190, 94, 19, 212, 62, 210, 118, 241, 62, 58, 37, 156, 62, 235, 84, 64, 63, 255, 197, 48, 190, 80, 84, 128, 62, 161, 128, 166, 62, 191, 55, 212, 190, 177, 167, 200, 62, 219, 170, 36, 191, 194, 118, 117, 189, 167, 232, 51, 63, 232, 103, 34, 190, 15, 220, 237, 60, 11, 54, 154, 62, 8, 121, 75, 191, 187, 166, 122, 190, 206, 164, 128, 62, 91, 32, 205, 190, 73, 157, 58, 63, 198, 105, 112, 191, 228, 233, 93, 63, 0, 68, 151, 62, 109, 96, 77, 62, 166, 111, 148, 190, 74, 103, 146, 190, 59, 95, 221, 62, 170, 121, 65, 191, 156, 191, 3, 190, 13, 46, 116, 190, 180, 159, 34, 191, 124, 156, 231, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 252, 182, 190, 229, 139, 25, 191, 23, 68, 86, 190, 220, 11, 16, 190, 76, 113, 13, 63, 73, 17, 30, 63, 76, 1, 157, 190, 189, 146, 225, 62, 39, 209, 22, 63, 168, 72, 166, 190, 248, 168, 10, 62, 170, 217, 244, 62, 204, 20, 129, 189, 172, 244, 184, 189, 240, 219, 61, 190, 231, 106, 216, 62, 170, 130, 66, 190, 101, 151, 157, 61, 29, 200, 20, 62, 198, 107, 163, 190, 202, 143, 52, 63, 236, 116, 173, 187, 85, 3, 24, 63, 174, 213, 187, 62, 205, 18, 157, 61, 226, 197, 53, 190, 22, 226, 4, 62, 68, 104, 49, 189, 19, 176, 58, 62, 224, 64, 112, 190, 7, 162, 74, 62, 230, 183, 184, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 234, 98, 190, 84, 127, 186, 190, 226, 30, 85, 190, 139, 225, 30, 191, 13, 149, 138, 62, 68, 1, 30, 62, 215, 160, 216, 62, 5, 107, 42, 61, 90, 215, 9, 62, 195, 233, 10, 191, 193, 106, 220, 190, 69, 117, 231, 61, 167, 134, 21, 190, 68, 97, 130, 62, 177, 158, 125, 190, 142, 148, 13, 62, 202, 254, 6, 63, 51, 88, 143, 190, 113, 51, 82, 61, 201, 91, 6, 189, 135, 163, 29, 189, 117, 249, 222, 190, 201, 139, 6, 62, 156, 64, 18, 190, 99, 117, 201, 61, 17, 48, 166, 61, 9, 17, 7, 190, 126, 228, 52, 62, 103, 204, 141, 190, 135, 181, 188, 189, 164, 91, 164, 189, 90, 90, 90, 62, 171, 60, 54, 61, 201, 156, 166, 61, 78, 165, 40, 62, 134, 135, 142, 62, 14, 88, 96, 190, 40, 58, 150, 189, 33, 135, 163, 190, 96, 92, 252, 60, 71, 30, 69, 190, 175, 196, 237, 61, 2, 167, 64, 62, 13, 15, 162, 61, 237, 212, 151, 62, 68, 4, 255, 190, 211, 237, 137, 61, 207, 168, 48, 62, 179, 213, 188, 190, 223, 222, 67, 62, 93, 83, 10, 190, 205, 158, 244, 189, 111, 193, 25, 61, 142, 172, 32, 62, 13, 58, 208, 189, 153, 28, 219, 60, 75, 147, 147, 62, 239, 79, 130, 61, 63, 50, 139, 190, 199, 197, 190, 190, 97, 238, 80, 62, 226, 95, 18, 186, 0, 194, 135, 62, 198, 219, 79, 188, 109, 140, 45, 60, 75, 140, 255, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 29, 199, 22, 190, 159, 189, 31, 62, 122, 171, 238, 189, 140, 167, 41, 190, 11, 180, 200, 188, 150, 9, 97, 188, 222, 182, 18, 189, 4, 212, 22, 62, 146, 114, 45, 61, 219, 198, 73, 186, 193, 70, 4, 62, 170, 189, 16, 190, 239, 198, 247, 189, 177, 154, 147, 61, 189, 119, 206, 60, 122, 96, 181, 61, 198, 157, 214, 189, 63, 23, 203, 189, 69, 49, 252, 188, 251, 13, 198, 189, 142, 56, 117, 61, 113, 7, 118, 60, 108, 17, 93, 61, 185, 51, 237, 189, 15, 27, 16, 61, 85, 214, 161, 189, 236, 199, 134, 61, 165, 128, 149, 61, 28, 84, 193, 189, 129, 43, 69, 189, 2, 19, 73, 191, 67, 56, 90, 62, 10, 151, 165, 185, 19, 47, 245, 189, 229, 167, 144, 191, 118, 197, 139, 62, 103, 94, 118, 190, 33, 147, 119, 190, 71, 161, 185, 61, 75, 161, 27, 62, 175, 186, 104, 189, 60, 5, 20, 190, 181, 63, 95, 62, 52, 60, 69, 63, 150, 204, 13, 190, 238, 23, 130, 189, 150, 180, 242, 61, 196, 211, 3, 62, 109, 202, 157, 190, 49, 186, 112, 190, 180, 14, 78, 190, 61, 214, 37, 189, 180, 229, 106, 187, 19, 249, 112, 189, 101, 165, 168, 62, 65, 87, 31, 190, 198, 145, 52, 61, 149, 126, 30, 190, 11, 73, 112, 62, 234, 37, 170, 190, 210, 172, 140, 191, 130, 219, 150, 190, 49, 134, 35, 191, 132, 182, 63, 61, 84, 81, 132, 186, 231, 89, 177, 61, 207, 191, 45, 191, 125, 142, 155, 62, 63, 158, 174, 190, 179, 24, 26, 190, 36, 178, 87, 62, 22, 4, 21, 191, 165, 61, 108, 189, 55, 195, 64, 191, 71, 192, 42, 62, 31, 162, 100, 61, 197, 27, 52, 191, 135, 130, 244, 189, 176, 50, 39, 188, 79, 46, 91, 62, 212, 205, 24, 191, 246, 182, 140, 62, 43, 20, 206, 189, 196, 26, 192, 189, 33, 101, 157, 61, 98, 13, 166, 189, 228, 240, 0, 189, 135, 167, 101, 190, 158, 153, 179, 190, 206, 191, 88, 190, 225, 245, 80, 189, 36, 11, 35, 62, 70, 134, 31, 189, 231, 85, 38, 190, 118, 109, 140, 59, 19, 172, 218, 185, 121, 112, 246, 61, 56, 69, 112, 188, 42, 165, 34, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 0, 180, 212, 189, 185, 13, 66, 189, 21, 246, 82, 189, 244, 2, 88, 61, 131, 96, 17, 189, 176, 140, 124, 61, 76, 168, 109, 187, 42, 234, 63, 189, 253, 32, 62, 61, 63, 14, 39, 190, 243, 62, 10, 62, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 108, 136, 33, 190, 59, 118, 51, 190, 176, 203, 110, 59, 61, 208, 210, 189, 90, 129, 199, 189, 179, 187, 50, 60, 216, 241, 185, 61, 227, 104, 55, 189, 35, 67, 26, 62, 56, 40, 228, 189, 243, 8, 30, 62, 59, 146, 193, 59, 136, 111, 129, 190, 220, 179, 195, 190, 125, 67, 226, 189, 53, 160, 125, 60, 109, 65, 243, 60, 69, 46, 137, 190, 75, 194, 86, 62, 97, 172, 96, 60, 217, 212, 184, 189, 48, 186, 204, 189, 68, 124, 162, 61, 195, 161, 163, 190, 47, 87, 84, 60, 79, 37, 137, 189, 123, 78, 222, 190, 145, 236, 135, 190, 191, 234, 82, 189, 16, 222, 4, 61, 157, 249, 16, 189, 63, 215, 71, 190, 216, 217, 54, 190, 84, 165, 38, 190, 207, 49, 32, 191, 227, 222, 140, 62, 68, 125, 121, 189, 165, 57, 92, 190, 151, 43, 192, 189, 254, 111, 217, 190, 54, 6, 163, 190, 164, 179, 82, 190, 53, 99, 128, 191, 156, 217, 153, 62, 135, 91, 22, 189, 84, 174, 146, 190, 18, 78, 164, 191, 177, 180, 166, 62, 60, 175, 60, 191, 9, 254, 165, 190, 146, 61, 22, 188, 97, 143, 66, 190, 52, 239, 247, 189, 212, 60, 54, 191, 47, 115, 5, 62, 181, 138, 61, 63, 203, 164, 87, 190, 155, 189, 113, 190, 207, 180, 64, 190, 239, 130, 73, 62, 159, 138, 151, 190, 91, 145, 107, 62, 23, 16, 124, 190, 45, 249, 154, 188, 91, 50, 76, 189, 19, 153, 40, 189, 200, 235, 154, 186, 143, 106, 94, 189, 47, 96, 125, 189, 104, 170, 56, 190, 117, 157, 151, 62, 48, 83, 139, 190, 210, 212, 47, 62, 110, 163, 198, 189, 34, 223, 58, 189, 37, 66, 17, 62, 33, 182, 171, 62, 9, 68, 164, 189, 83, 175, 157, 61, 70, 82, 69, 190, 119, 234, 187, 189, 231, 37, 152, 61, 226, 192, 235, 61, 0, 230, 141, 62, 172, 253, 100, 190, 129, 21, 214, 61, 114, 38, 152, 62, 83, 167, 217, 189, 235, 9, 79, 62, 201, 131, 192, 188, 236, 132, 113, 190, 209, 222, 162, 61, 65, 224, 199, 189, 14, 175, 164, 61, 37, 216, 40, 61, 102, 54, 129, 60, 20, 201, 44, 61, 236, 91, 12, 190, 84, 81, 144, 190, 70, 129, 17, 62, 105, 102, 58, 190, 195, 31, 46, 61, 67, 90, 198, 61, 207, 76, 57, 190, 14, 167, 115, 62, 80, 116, 93, 61, 189, 169, 58, 62, 136, 254, 159, 60, 176, 87, 101, 61, 188, 28, 168, 190, 28, 102, 239, 189, 177, 36, 125, 61, 202, 112, 122, 189, 37, 115, 58, 62, 133, 215, 137, 62, 186, 82, 29, 62, 203, 211, 5, 191, 244, 87, 17, 62, 80, 21, 55, 62, 182, 151, 141, 190, 144, 79, 100, 62, 237, 67, 154, 190, 112, 9, 226, 188, 79, 87, 79, 188, 147, 66, 1, 189, 205, 183, 177, 189, 124, 171, 19, 189, 137, 93, 199, 62, 85, 98, 45, 61, 208, 163, 224, 188, 16, 159, 220, 190, 19, 50, 73, 62, 72, 220, 157, 61, 138, 34, 118, 62, 158, 159, 127, 62, 188, 232, 1, 190, 177, 184, 111, 190, 130, 183, 109, 189, 206, 59, 75, 61, 120, 253, 7, 61, 4, 146, 18, 189, 64, 104, 47, 62, 36, 160, 186, 61, 187, 229, 206, 60, 207, 231, 172, 188, 240, 187, 169, 188, 233, 11, 239, 189, 31, 116, 147, 190, 122, 125, 44, 60, 150, 157, 221, 189, 29, 138, 85, 190, 178, 47, 49, 61, 192, 0, 70, 190, 153, 113, 37, 62, 8, 79, 51, 190, 165, 206, 167, 186, 71, 15, 52, 189, 167, 75, 169, 189, 106, 106, 150, 61, 94, 233, 63, 190, 195, 131, 154, 61, 24, 241, 3, 190, 51, 181, 195, 61, 145, 146, 53, 190, 59, 193, 53, 190, 155, 143, 133, 190, 99, 47, 210, 61, 244, 208, 172, 190, 234, 55, 161, 62, 31, 235, 140, 188, 138, 90, 150, 187, 143, 213, 11, 62, 211, 65, 186, 61, 130, 167, 207, 190, 183, 80, 36, 62, 54, 72, 66, 189, 3, 27, 9, 62, 251, 39, 213, 60, 49, 146, 161, 62, 254, 45, 146, 62, 167, 198, 1, 190, 8, 27, 184, 61, 212, 111, 198, 60, 79, 88, 191, 190, 104, 29, 72, 62, 65, 97, 169, 61, 92, 147, 235, 60, 116, 151, 51, 62, 109, 205, 8, 62, 9, 0, 176, 61, 178, 138, 170, 189, 166, 182, 153, 62, 186, 186, 203, 188, 200, 140, 218, 61, 188, 221, 75, 190, 100, 81, 135, 60, 182, 193, 47, 190, 36, 27, 220, 61, 207, 177, 151, 189, 234, 56, 69, 62, 112, 93, 148, 62, 83, 57, 233, 188, 140, 131, 9, 61, 77, 154, 3, 190, 168, 60, 128, 190, 33, 22, 128, 62, 5, 95, 74, 62, 241, 40, 48, 190, 10, 65, 135, 62, 8, 98, 6, 189, 215, 212, 3, 190, 134, 175, 186, 62, 0, 63, 27, 62, 17, 150, 130, 58, 178, 83, 129, 190, 86, 252, 84, 62, 202, 189, 134, 62, 153, 237, 161, 60, 25, 55, 14, 189, 24, 44, 208, 61, 105, 217, 11, 62, 91, 183, 4, 61, 65, 86, 102, 62, 15, 56, 48, 62, 203, 69, 16, 190, 95, 160, 1, 62, 29, 245, 93, 62, 109, 1, 28, 61, 42, 102, 122, 62, 112, 15, 240, 189, 62, 203, 75, 59, 196, 158, 16, 190, 47, 2, 133, 62, 0, 25, 122, 188, 224, 219, 135, 62, 166, 41, 230, 189, 65, 43, 191, 61, 152, 110, 233, 189, 146, 23, 57, 62, 84, 88, 34, 190, 199, 222, 231, 61, 103, 154, 69, 62, 217, 196, 127, 188, 123, 184, 109, 62, 206, 123, 82, 190, 137, 6, 79, 62, 162, 150, 14, 62, 190, 206, 146, 190, 190, 128, 81, 62, 18, 183, 162, 188, 101, 92, 31, 60, 245, 140, 31, 189, 7, 229, 100, 188, 92, 209, 129, 190, 225, 158, 31, 61, 34, 128, 41, 61, 30, 128, 160, 62, 92, 134, 233, 60, 2, 70, 222, 189, 166, 143, 141, 62, 151, 69, 203, 189, 48, 192, 161, 62, 78, 184, 18, 62, 189, 17, 47, 190, 32, 54, 191, 189, 151, 81, 191, 61, 148, 50, 92, 62, 198, 185, 245, 61, 173, 179, 45, 62, 43, 210, 118, 190, 190, 89, 249, 190, 144, 247, 132, 61, 223, 65, 143, 62, 239, 209, 10, 62, 253, 188, 128, 62, 38, 16, 221, 190, 129, 128, 107, 62, 6, 128, 185, 190, 255, 231, 128, 61, 90, 143, 249, 189, 131, 228, 29, 191, 122, 169, 67, 189, 9, 69, 163, 61, 63, 166, 172, 60, 132, 47, 219, 61, 40, 86, 113, 62, 11, 155, 195, 61, 159, 39, 19, 190, 242, 104, 87, 188, 34, 123, 130, 62, 61, 26, 219, 188, 58, 58, 159, 62, 156, 31, 206, 189, 144, 253, 130, 60, 219, 43, 24, 62, 254, 31, 141, 62, 15, 221, 144, 190, 219, 238, 38, 61, 107, 89, 121, 61, 7, 3, 187, 61, 5, 17, 226, 189, 179, 234, 170, 62, 42, 232, 158, 188, 106, 25, 137, 61, 21, 65, 31, 62, 182, 218, 217, 188, 159, 168, 121, 61, 104, 105, 42, 61, 189, 175, 251, 61, 179, 175, 13, 62, 154, 40, 185, 190, 30, 24, 36, 62, 213, 247, 41, 62, 109, 40, 128, 62, 31, 194, 71, 62, 221, 228, 72, 190, 255, 24, 179, 190, 4, 146, 213, 61, 28, 183, 40, 62, 170, 128, 202, 189, 1, 100, 252, 61, 36, 77, 12, 62, 98, 42, 131, 62, 76, 120, 61, 190, 191, 192, 188, 62, 1, 191, 124, 190, 12, 241, 189, 190, 68, 145, 28, 190, 18, 105, 28, 190, 1, 40, 13, 189, 191, 159, 227, 190, 229, 35, 36, 190, 17, 228, 163, 61, 197, 172, 158, 62, 89, 63, 159, 62, 247, 142, 5, 189, 240, 1, 52, 190, 12, 155, 126, 190, 53, 118, 182, 61, 160, 173, 36, 190, 124, 29, 192, 62, 105, 98, 163, 190, 19, 73, 94, 190, 92, 41, 78, 190, 103, 53, 135, 62, 231, 254, 153, 62, 83, 160, 32, 61, 243, 38, 197, 189, 107, 122, 181, 189, 31, 141, 148, 62, 238, 76, 202, 61, 12, 20, 148, 189, 81, 17, 62, 62, 13, 239, 225, 189, 7, 238, 181, 61, 8, 250, 245, 190, 247, 190, 30, 61, 3, 8, 179, 61, 251, 12, 87, 189, 138, 250, 199, 61, 109, 32, 26, 190, 133, 191, 37, 62, 124, 40, 179, 189, 93, 8, 179, 62, 166, 22, 128, 189, 104, 60, 204, 61, 153, 122, 47, 61, 249, 28, 16, 190, 107, 58, 218, 190, 226, 171, 6, 190, 82, 24, 62, 62, 164, 221, 3, 189, 132, 151, 83, 61, 112, 218, 206, 189, 52, 56, 117, 189, 62, 243, 56, 189, 73, 115, 103, 190, 194, 185, 76, 62, 58, 72, 19, 62, 134, 116, 5, 190, 239, 188, 205, 190, 149, 209, 56, 62, 193, 73, 131, 62, 33, 252, 35, 62, 163, 157, 136, 62, 138, 232, 44, 62, 53, 31, 23, 190, 63, 46, 70, 190, 146, 230, 97, 61, 242, 15, 136, 62, 169, 140, 41, 190, 199, 48, 108, 190, 207, 32, 221, 62, 245, 129, 79, 62, 87, 17, 110, 61, 161, 114, 139, 190, 73, 173, 88, 62, 14, 115, 216, 190, 90, 54, 149, 58, 25, 89, 221, 189, 17, 110, 92, 62, 58, 127, 130, 62, 192, 131, 241, 189, 152, 217, 238, 62, 181, 113, 17, 191, 143, 155, 154, 61, 156, 213, 64, 61, 226, 58, 166, 190, 183, 224, 91, 62, 29, 155, 161, 188, 93, 107, 94, 190, 165, 17, 149, 189, 162, 198, 85, 62, 42, 23, 152, 189, 203, 192, 73, 189, 222, 252, 71, 62, 4, 55, 175, 61, 200, 200, 217, 187, 139, 15, 147, 190, 90, 168, 153, 62, 224, 145, 76, 62, 176, 48, 160, 62, 4, 19, 188, 61, 198, 220, 42, 190, 79, 105, 7, 63, 97, 13, 148, 62, 184, 91, 155, 62, 147, 223, 67, 61, 228, 85, 177, 62, 220, 43, 32, 191, 70, 210, 164, 60, 197, 76, 156, 190, 219, 62, 101, 188, 255, 226, 90, 61, 106, 190, 189, 61, 74, 220, 181, 62, 207, 160, 37, 191, 171, 34, 217, 61, 84, 203, 72, 62, 39, 76, 5, 191, 185, 229, 6, 63, 218, 77, 124, 190, 7, 101, 158, 190, 86, 216, 27, 190, 244, 133, 211, 61, 39, 162, 122, 189, 135, 158, 23, 62, 14, 213, 243, 61, 150, 38, 103, 62, 128, 185, 170, 61, 161, 26, 179, 190, 145, 12, 146, 62, 67, 231, 44, 62, 116, 203, 113, 62, 26, 191, 9, 190, 72, 115, 108, 190, 16, 9, 48, 62, 7, 11, 33, 62, 126, 183, 140, 189, 30, 4, 50, 190, 53, 217, 154, 62, 248, 159, 7, 62, 57, 107, 214, 61, 122, 109, 110, 61, 189, 143, 36, 62, 80, 121, 190, 188, 112, 181, 43, 62, 199, 40, 222, 61, 194, 230, 32, 190, 72, 89, 42, 62, 0, 157, 143, 60, 190, 116, 114, 61, 62, 143, 169, 62, 138, 151, 151, 62, 134, 37, 243, 189, 196, 46, 105, 190, 117, 55, 52, 62, 12, 221, 121, 59, 69, 200, 197, 61, 148, 75, 158, 61, 9, 0, 17, 61, 160, 202, 41, 189, 122, 122, 99, 61, 33, 77, 69, 190, 220, 121, 227, 190, 172, 216, 70, 62, 67, 77, 78, 188, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 53, 142, 172, 60, 105, 31, 90, 190, 167, 33, 13, 62, 222, 129, 80, 190, 240, 39, 47, 62, 156, 113, 20, 62, 163, 243, 148, 62, 55, 145, 248, 60, 245, 203, 48, 189, 147, 41, 152, 190, 223, 89, 238, 189, 229, 78, 240, 59, 106, 189, 107, 60, 123, 57, 33, 61, 191, 183, 75, 189, 42, 120, 198, 189, 26, 93, 93, 62, 61, 157, 92, 61, 38, 179, 105, 62, 221, 131, 239, 61, 223, 254, 173, 61, 37, 56, 162, 190, 92, 253, 22, 62, 198, 217, 84, 61, 77, 83, 178, 62, 215, 135, 246, 62, 221, 132, 139, 189, 138, 52, 30, 62, 165, 206, 64, 190, 68, 65, 180, 61, 22, 52, 188, 62, 164, 143, 240, 61, 220, 184, 131, 189, 223, 52, 137, 187, 32, 194, 254, 59, 45, 45, 106, 62, 240, 30, 120, 61, 112, 163, 29, 62, 20, 41, 130, 62, 48, 150, 66, 61, 170, 83, 247, 189, 20, 229, 32, 191, 206, 156, 168, 190, 24, 82, 67, 62, 197, 113, 125, 62, 234, 174, 245, 59, 97, 7, 194, 60, 225, 144, 185, 190, 16, 49, 145, 61, 89, 52, 1, 62, 55, 21, 47, 62, 215, 71, 217, 61, 159, 245, 177, 190, 178, 167, 163, 189, 221, 12, 239, 61, 22, 40, 138, 62, 214, 111, 212, 189, 46, 213, 124, 190, 179, 0, 136, 190, 18, 47, 52, 62, 128, 203, 131, 61, 176, 225, 132, 188, 36, 76, 230, 59, 22, 73, 20, 190, 22, 78, 99, 190, 87, 134, 69, 62, 239, 15, 45, 62, 150, 113, 3, 61, 85, 15, 185, 61, 78, 223, 114, 62, 168, 190, 6, 189, 148, 210, 48, 62, 218, 143, 139, 188, 107, 185, 157, 61, 252, 223, 111, 61, 15, 58, 145, 62, 7, 54, 24, 188, 42, 120, 125, 61, 209, 202, 55, 62, 80, 162, 127, 62, 176, 59, 127, 187, 34, 127, 183, 61, 239, 217, 131, 188, 224, 191, 158, 61, 27, 189, 101, 189, 175, 93, 10, 188, 86, 118, 221, 189, 130, 223, 207, 61, 125, 128, 69, 62, 208, 214, 190, 61, 199, 214, 14, 62, 214, 232, 121, 188, 29, 7, 106, 62, 212, 188, 206, 188, 9, 231, 51, 62, 134, 147, 58, 189, 45, 14, 188, 61, 93, 211, 218, 189, 209, 225, 60, 189, 176, 17, 42, 190, 126, 158, 15, 62, 102, 82, 175, 190, 198, 137, 30, 60, 136, 128, 102, 60, 193, 115, 176, 61, 33, 22, 157, 189, 224, 76, 33, 190, 215, 112, 138, 190, 175, 228, 240, 61, 208, 154, 57, 190, 121, 143, 17, 62, 169, 206, 154, 189, 158, 241, 185, 62, 129, 101, 127, 189, 141, 148, 32, 61, 126, 208, 141, 190, 248, 214, 11, 62, 183, 214, 234, 60, 41, 199, 11, 190, 141, 97, 115, 190, 199, 242, 36, 60, 98, 85, 109, 190, 140, 208, 236, 189, 236, 211, 176, 60, 96, 105, 15, 189, 40, 40, 154, 60, 57, 128, 168, 189, 57, 184, 4, 189, 159, 224, 61, 190, 235, 33, 33, 62, 24, 32, 113, 189, 226, 228, 220, 61, 71, 176, 239, 189, 118, 171, 6, 62, 36, 151, 44, 61, 60, 186, 52, 62, 72, 243, 204, 189, 218, 160, 35, 190, 213, 72, 234, 58, 17, 148, 173, 61, 19, 55, 35, 62, 44, 224, 45, 189, 4, 138, 74, 189, 241, 118, 190, 190, 164, 93, 0, 62, 104, 12, 80, 62, 27, 107, 39, 62, 31, 249, 185, 188, 240, 87, 135, 190, 14, 50, 66, 60, 195, 23, 162, 62, 0, 249, 58, 61, 95, 198, 78, 62, 215, 90, 50, 190, 236, 227, 21, 61, 175, 179, 196, 61, 2, 220, 117, 188, 13, 113, 173, 190, 47, 3, 1, 190, 110, 249, 67, 190, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 214, 7, 42, 190, 135, 226, 233, 190, 121, 104, 65, 190, 36, 95, 3, 191, 18, 42, 209, 61, 215, 12, 79, 186, 156, 25, 221, 61, 12, 25, 99, 59, 163, 181, 182, 189, 148, 42, 168, 190, 224, 40, 84, 190, 208, 40, 141, 62, 181, 142, 75, 190, 16, 154, 193, 61, 30, 222, 156, 190, 36, 63, 161, 61, 116, 122, 30, 61, 17, 199, 181, 189, 9, 90, 45, 62, 32, 23, 218, 189, 149, 144, 19, 190, 216, 152, 43, 191, 63, 197, 156, 62, 52, 223, 223, 61, 168, 202, 113, 61, 171, 124, 223, 62, 27, 152, 228, 189, 168, 191, 126, 189, 196, 25, 134, 188, 80, 247, 121, 190, 140, 143, 24, 190, 170, 228, 177, 61, 35, 162, 204, 61, 98, 4, 129, 189, 211, 124, 161, 189, 77, 252, 8, 190, 218, 69, 133, 62, 200, 61, 247, 61, 248, 75, 140, 190, 233, 19, 47, 190, 103, 49, 115, 62, 213, 170, 199, 62, 209, 154, 83, 190, 30, 80, 77, 62, 178, 197, 162, 190, 134, 75, 252, 61, 58, 100, 146, 190, 70, 23, 183, 185, 93, 190, 130, 190, 235, 213, 43, 191, 133, 23, 164, 61, 32, 226, 87, 62, 250, 67, 164, 189, 233, 92, 219, 60, 133, 166, 132, 62, 188, 162, 52, 189, 85, 21, 189, 190, 218, 138, 3, 191, 70, 195, 31, 189, 66, 20, 225, 190, 229, 153, 151, 62, 45, 19, 174, 61, 55, 45, 49, 191, 74, 202, 31, 60, 118, 175, 37, 190, 216, 116, 223, 61, 105, 205, 147, 61, 231, 186, 13, 189, 35, 79, 75, 61, 125, 217, 44, 190, 73, 70, 149, 189, 229, 173, 188, 189, 248, 20, 10, 189, 97, 96, 15, 62, 138, 78, 215, 188, 178, 84, 197, 61, 151, 252, 160, 61, 112, 6, 53, 190, 207, 154, 24, 61, 133, 119, 197, 189, 171, 174, 23, 61, 154, 40, 10, 61, 245, 181, 39, 190, 1, 87, 14, 62, 85, 167, 156, 189, 132, 37, 194, 189, 227, 55, 231, 61, 199, 37, 15, 190, 55, 59, 211, 188, 80, 16, 165, 61, 105, 15, 234, 189, 107, 246, 13, 190, 18, 248, 61, 189, 162, 187, 171, 189, 38, 17, 8, 190, 15, 142, 97, 61, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 30, 230, 61, 210, 50, 106, 61, 162, 116, 129, 189, 240, 39, 156, 61, 143, 174, 255, 61, 55, 192, 123, 189, 23, 158, 59, 62, 58, 221, 89, 62, 47, 91, 159, 62, 220, 168, 58, 62, 180, 207, 128, 190, 232, 236, 157, 62, 185, 111, 136, 190, 85, 98, 30, 189, 236, 108, 69, 188, 138, 79, 147, 190, 119, 29, 174, 187, 38, 112, 211, 61, 161, 229, 211, 61, 105, 128, 114, 62, 7, 207, 190, 61, 105, 230, 173, 189, 184, 66, 11, 62, 139, 149, 239, 61, 69, 221, 122, 187, 15, 77, 190, 189, 118, 14, 27, 62, 91, 146, 27, 190, 200, 102, 143, 62, 200, 164, 21, 190, 193, 167, 139, 61, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 174, 41, 191, 82, 89, 110, 62, 81, 188, 56, 189, 83, 101, 255, 190, 157, 37, 95, 191, 148, 36, 40, 61, 243, 158, 23, 63, 32, 44, 124, 191, 33, 166, 240, 61, 56, 175, 154, 62, 89, 225, 110, 62, 129, 105, 91, 62, 14, 115, 38, 190, 69, 160, 133, 62, 70, 167, 187, 62, 106, 9, 151, 190, 16, 178, 36, 191, 7, 245, 48, 190, 104, 177, 81, 62, 152, 0, 11, 63, 166, 171, 99, 190, 155, 214, 28, 62, 216, 35, 59, 190, 117, 227, 125, 190, 17, 68, 51, 62, 26, 21, 252, 189, 92, 69, 154, 190, 218, 31, 21, 62, 123, 76, 89, 190, 71, 169, 8, 63, 204, 246, 30, 62, 84, 97, 17, 189, 254, 1, 200, 61, 43, 138, 45, 62, 128, 245, 159, 189, 74, 180, 232, 61, 224, 179, 44, 190, 50, 129, 46, 61, 18, 49, 19, 62, 224, 18, 231, 61, 97, 150, 11, 190, 155, 178, 27, 62, 249, 103, 10, 60, 39, 68, 116, 190, 158, 28, 97, 62, 70, 100, 8, 190, 136, 33, 14, 189, 222, 48, 114, 62, 118, 231, 249, 60, 194, 248, 46, 190, 27, 27, 51, 61, 152, 4, 187, 188, 60, 155, 11, 190, 162, 190, 147, 189, 87, 166, 49, 190, 118, 191, 163, 61, 246, 218, 209, 189, 48, 58, 39, 189, 31, 55, 102, 189, 108, 163, 228, 61, 73, 221, 126, 190, 233, 134, 162, 61, 203, 153, 15, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 237, 71, 62, 9, 245, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 5, 248, 63, 215, 117, 244, 190, 47, 102, 125, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 196, 201, 190, 227, 185, 175, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}