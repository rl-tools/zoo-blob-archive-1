// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 118, 131, 62, 216, 131, 171, 191, 158, 116, 166, 190, 32, 153, 223, 190, 253, 27, 161, 61, 255, 244, 22, 63, 173, 71, 33, 63, 8, 30, 216, 190, 94, 205, 130, 190, 154, 215, 98, 190, 179, 239, 234, 63, 155, 116, 186, 62, 158, 203, 12, 190, 88, 133, 99, 190, 18, 73, 203, 190, 69, 66, 2, 62, 59, 198, 19, 63, 191, 161, 227, 58, 92, 179, 59, 63, 138, 207, 92, 63, 72, 180, 198, 62, 4, 84, 149, 62, 69, 249, 196, 63, 152, 144, 217, 62, 254, 63, 143, 191, 10, 113, 80, 191, 82, 170, 217, 190, 192, 237, 47, 63, 177, 24, 137, 190, 109, 133, 83, 190, 124, 233, 12, 63, 167, 237, 170, 191, 233, 182, 168, 190, 29, 43, 104, 190, 73, 90, 61, 62, 76, 139, 165, 59, 253, 116, 126, 62, 130, 146, 224, 190, 130, 155, 9, 63, 151, 184, 228, 62, 215, 214, 129, 63, 181, 184, 133, 62, 92, 42, 173, 190, 30, 10, 184, 61, 2, 108, 94, 63, 1, 55, 158, 190, 106, 105, 134, 191, 17, 208, 114, 190, 207, 164, 222, 190, 134, 131, 94, 191, 182, 197, 235, 62, 92, 198, 177, 62, 19, 200, 144, 190, 176, 178, 44, 63, 155, 10, 144, 62, 7, 89, 145, 63, 20, 84, 99, 62, 64, 29, 128, 190, 46, 181, 69, 191, 220, 25, 153, 190, 225, 94, 11, 191, 32, 110, 191, 191, 164, 126, 156, 190, 210, 121, 116, 190, 241, 136, 69, 63, 69, 84, 201, 62, 80, 86, 101, 62, 149, 77, 120, 63, 146, 138, 103, 190, 249, 186, 173, 61, 161, 4, 57, 63, 209, 236, 190, 190, 209, 188, 62, 62, 193, 47, 92, 191, 178, 117, 0, 190, 175, 124, 32, 63, 198, 129, 29, 60, 5, 241, 133, 61, 196, 78, 108, 62, 70, 192, 153, 191, 49, 226, 132, 190, 36, 160, 175, 62, 52, 217, 228, 190, 153, 129, 49, 63, 229, 196, 141, 191, 122, 231, 117, 63, 195, 186, 148, 62, 194, 143, 129, 62, 241, 249, 204, 190, 34, 38, 189, 190, 139, 35, 171, 62, 174, 203, 100, 191, 208, 43, 59, 190, 124, 97, 149, 190, 151, 20, 251, 190, 214, 60, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 154, 130, 190, 134, 157, 14, 191, 19, 147, 212, 190, 222, 144, 150, 190, 146, 98, 173, 62, 64, 244, 8, 63, 229, 7, 250, 190, 52, 240, 156, 62, 201, 158, 98, 63, 159, 52, 0, 191, 219, 125, 59, 62, 113, 135, 195, 62, 188, 10, 108, 190, 41, 20, 210, 189, 27, 3, 216, 187, 36, 159, 232, 62, 243, 50, 220, 190, 129, 29, 4, 61, 222, 132, 19, 62, 211, 188, 125, 190, 191, 21, 50, 63, 248, 134, 59, 189, 206, 86, 19, 63, 249, 187, 204, 62, 239, 99, 68, 188, 174, 237, 154, 190, 3, 207, 16, 62, 179, 67, 32, 189, 179, 216, 130, 62, 191, 15, 79, 190, 205, 42, 136, 62, 154, 108, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 82, 225, 189, 205, 237, 80, 190, 10, 101, 172, 190, 231, 13, 105, 191, 105, 136, 164, 62, 226, 0, 17, 62, 129, 130, 182, 62, 116, 27, 95, 61, 180, 72, 149, 62, 0, 9, 87, 191, 60, 162, 18, 191, 236, 222, 10, 62, 197, 195, 14, 189, 51, 148, 110, 62, 147, 74, 16, 190, 218, 175, 237, 187, 213, 200, 1, 63, 140, 182, 43, 190, 123, 72, 253, 61, 183, 160, 94, 62, 117, 95, 35, 190, 25, 47, 178, 190, 133, 147, 74, 62, 151, 244, 36, 189, 57, 127, 15, 189, 98, 31, 11, 189, 98, 251, 178, 190, 202, 160, 136, 62, 125, 1, 165, 189, 224, 220, 59, 60, 5, 1, 113, 190, 55, 219, 207, 61, 11, 212, 11, 190, 148, 76, 191, 60, 72, 231, 78, 60, 13, 148, 235, 62, 6, 33, 201, 190, 69, 242, 15, 189, 89, 66, 252, 190, 145, 50, 203, 60, 190, 37, 7, 191, 119, 60, 86, 61, 46, 61, 133, 62, 112, 141, 41, 62, 144, 35, 133, 62, 228, 208, 23, 191, 103, 95, 177, 61, 158, 63, 210, 62, 214, 24, 199, 190, 157, 88, 60, 62, 66, 143, 44, 190, 57, 141, 48, 191, 44, 63, 149, 62, 27, 53, 65, 62, 10, 157, 40, 190, 106, 68, 5, 190, 107, 27, 197, 62, 67, 100, 209, 188, 149, 27, 18, 190, 98, 146, 187, 190, 125, 167, 194, 62, 252, 66, 175, 190, 224, 203, 186, 62, 192, 72, 33, 61, 120, 122, 45, 60, 150, 58, 250, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 194, 35, 23, 190, 215, 146, 31, 62, 144, 27, 240, 189, 246, 78, 42, 190, 11, 180, 200, 188, 198, 246, 120, 188, 99, 197, 21, 189, 190, 179, 17, 62, 146, 114, 45, 61, 122, 15, 210, 187, 174, 241, 1, 62, 251, 55, 21, 190, 97, 221, 1, 190, 177, 154, 147, 61, 189, 119, 206, 60, 21, 185, 174, 61, 149, 177, 216, 189, 63, 23, 203, 189, 69, 49, 252, 188, 221, 223, 200, 189, 192, 10, 117, 61, 80, 125, 100, 60, 7, 0, 68, 61, 185, 51, 237, 189, 15, 27, 16, 61, 146, 48, 165, 189, 7, 74, 129, 61, 216, 212, 150, 62, 9, 60, 136, 61, 203, 91, 3, 62, 106, 45, 184, 191, 16, 203, 110, 62, 225, 177, 83, 190, 185, 85, 218, 190, 20, 86, 181, 191, 196, 225, 156, 62, 52, 241, 152, 190, 33, 141, 218, 188, 222, 132, 66, 61, 244, 110, 156, 189, 52, 122, 125, 190, 189, 18, 74, 190, 236, 58, 191, 62, 110, 58, 27, 63, 11, 127, 177, 190, 47, 176, 69, 191, 29, 213, 27, 62, 108, 136, 133, 62, 123, 91, 153, 190, 156, 154, 211, 190, 197, 189, 143, 190, 165, 129, 77, 62, 233, 84, 39, 62, 155, 204, 231, 61, 73, 230, 195, 61, 156, 76, 122, 190, 134, 233, 28, 62, 41, 206, 146, 60, 158, 48, 164, 62, 8, 127, 184, 190, 183, 16, 50, 191, 130, 193, 207, 190, 64, 15, 114, 191, 89, 113, 244, 58, 144, 71, 163, 61, 137, 6, 229, 188, 129, 30, 59, 191, 125, 221, 137, 62, 118, 177, 115, 191, 24, 98, 1, 190, 238, 166, 141, 62, 51, 234, 7, 191, 27, 216, 136, 62, 118, 18, 11, 191, 111, 179, 75, 62, 15, 93, 236, 61, 28, 98, 212, 190, 216, 85, 167, 62, 207, 190, 2, 190, 133, 112, 113, 62, 78, 187, 99, 191, 114, 111, 114, 62, 245, 157, 17, 190, 86, 100, 30, 61, 223, 229, 30, 62, 43, 201, 191, 189, 108, 5, 102, 62, 202, 71, 106, 190, 231, 53, 217, 190, 64, 91, 82, 190, 59, 157, 178, 61, 36, 11, 35, 62, 82, 201, 144, 189, 231, 85, 38, 190, 228, 102, 200, 187, 19, 172, 218, 185, 99, 204, 243, 61, 13, 237, 227, 188, 84, 216, 56, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 6, 146, 217, 189, 60, 13, 162, 189, 4, 175, 105, 189, 72, 250, 171, 60, 135, 149, 22, 189, 107, 35, 245, 60, 158, 232, 16, 189, 88, 96, 95, 189, 253, 32, 62, 61, 192, 119, 39, 190, 155, 209, 229, 61, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 12, 198, 33, 190, 59, 118, 51, 190, 239, 46, 230, 188, 204, 53, 233, 189, 90, 129, 199, 189, 179, 187, 50, 60, 125, 122, 158, 61, 48, 53, 87, 189, 115, 52, 211, 61, 13, 166, 228, 189, 74, 210, 131, 62, 248, 165, 32, 190, 103, 53, 156, 190, 145, 146, 255, 189, 73, 228, 134, 188, 178, 17, 145, 59, 209, 66, 243, 60, 23, 46, 137, 190, 231, 178, 62, 62, 170, 242, 113, 190, 23, 166, 174, 189, 76, 217, 113, 61, 213, 236, 217, 61, 49, 43, 11, 191, 90, 58, 87, 60, 14, 51, 129, 190, 168, 19, 53, 191, 172, 247, 115, 190, 184, 41, 39, 62, 214, 141, 151, 189, 62, 219, 79, 190, 183, 98, 72, 190, 216, 217, 54, 190, 83, 203, 145, 190, 59, 230, 57, 191, 235, 116, 173, 62, 134, 80, 80, 189, 181, 238, 109, 190, 204, 173, 15, 56, 88, 255, 193, 190, 85, 251, 145, 190, 176, 248, 166, 190, 216, 161, 194, 191, 207, 21, 131, 62, 223, 75, 212, 189, 84, 174, 146, 190, 45, 254, 211, 191, 114, 76, 167, 62, 106, 248, 191, 191, 190, 225, 167, 190, 118, 59, 196, 188, 247, 173, 218, 190, 151, 233, 141, 189, 68, 35, 22, 191, 11, 175, 42, 62, 25, 39, 51, 63, 110, 53, 121, 190, 120, 156, 253, 189, 21, 128, 64, 190, 225, 74, 105, 62, 97, 86, 177, 190, 60, 174, 5, 62, 167, 142, 150, 190, 150, 81, 130, 189, 109, 15, 187, 189, 193, 55, 126, 189, 248, 77, 0, 190, 157, 83, 191, 189, 239, 92, 135, 189, 99, 135, 136, 190, 5, 208, 167, 62, 16, 138, 13, 191, 69, 35, 219, 61, 85, 228, 213, 189, 234, 68, 156, 188, 36, 105, 35, 62, 64, 75, 186, 62, 247, 189, 249, 189, 125, 56, 229, 60, 228, 164, 169, 190, 99, 153, 246, 60, 15, 132, 218, 61, 35, 92, 13, 62, 178, 79, 142, 62, 195, 87, 147, 190, 11, 87, 2, 62, 110, 4, 221, 62, 254, 230, 232, 189, 101, 7, 87, 62, 164, 169, 174, 189, 194, 23, 221, 190, 51, 22, 103, 62, 47, 197, 231, 189, 176, 77, 196, 61, 133, 163, 46, 61, 63, 143, 163, 188, 115, 17, 205, 61, 39, 108, 156, 189, 186, 5, 129, 190, 222, 170, 199, 61, 42, 143, 37, 190, 82, 126, 139, 61, 190, 129, 9, 62, 153, 51, 132, 190, 91, 177, 77, 62, 177, 195, 242, 61, 71, 214, 154, 62, 186, 145, 95, 61, 153, 195, 135, 61, 66, 171, 45, 191, 13, 211, 112, 190, 215, 139, 214, 189, 103, 142, 109, 62, 239, 72, 152, 62, 33, 175, 145, 62, 51, 204, 29, 62, 117, 186, 99, 191, 50, 217, 28, 62, 213, 17, 114, 62, 17, 115, 42, 190, 11, 53, 88, 62, 55, 253, 8, 191, 134, 247, 212, 189, 28, 170, 39, 61, 225, 161, 188, 189, 14, 169, 134, 188, 124, 79, 132, 60, 146, 21, 224, 62, 108, 58, 172, 61, 196, 249, 198, 61, 73, 99, 207, 190, 166, 74, 116, 62, 229, 237, 165, 61, 231, 229, 188, 62, 47, 233, 168, 62, 186, 249, 165, 190, 35, 184, 209, 189, 74, 23, 124, 191, 194, 114, 37, 190, 102, 127, 161, 62, 65, 135, 135, 61, 160, 177, 207, 62, 59, 249, 24, 62, 213, 103, 73, 62, 89, 210, 82, 191, 127, 29, 61, 191, 1, 213, 223, 189, 212, 186, 116, 189, 67, 102, 45, 62, 123, 44, 8, 190, 91, 87, 26, 191, 110, 252, 115, 62, 42, 126, 234, 188, 229, 70, 133, 62, 35, 83, 46, 61, 120, 190, 46, 190, 165, 152, 31, 190, 130, 107, 233, 60, 106, 48, 172, 62, 216, 48, 26, 191, 102, 47, 54, 63, 188, 96, 93, 191, 174, 50, 134, 62, 66, 152, 25, 191, 136, 102, 225, 190, 54, 245, 114, 191, 143, 179, 32, 61, 135, 142, 226, 190, 106, 234, 132, 62, 36, 104, 171, 59, 2, 190, 179, 60, 211, 40, 15, 62, 88, 169, 196, 61, 219, 25, 223, 190, 130, 55, 0, 62, 147, 145, 19, 190, 151, 100, 138, 62, 8, 45, 27, 61, 218, 201, 152, 62, 147, 134, 152, 62, 236, 73, 52, 190, 31, 52, 249, 61, 123, 18, 191, 61, 136, 97, 190, 190, 211, 95, 91, 62, 177, 117, 23, 61, 178, 120, 32, 61, 221, 124, 128, 62, 153, 224, 0, 62, 126, 213, 200, 61, 255, 141, 178, 189, 47, 51, 134, 62, 120, 119, 49, 60, 83, 49, 13, 62, 23, 3, 35, 190, 47, 62, 184, 188, 97, 5, 22, 190, 84, 192, 216, 61, 124, 194, 96, 189, 62, 74, 190, 62, 22, 171, 157, 62, 89, 107, 23, 62, 19, 103, 43, 189, 128, 102, 251, 189, 29, 255, 208, 190, 15, 174, 61, 62, 29, 156, 250, 61, 76, 144, 202, 189, 226, 62, 4, 63, 42, 47, 179, 187, 166, 137, 128, 190, 68, 168, 150, 62, 163, 134, 144, 61, 40, 17, 52, 189, 80, 216, 200, 190, 116, 32, 58, 62, 99, 54, 61, 62, 232, 25, 198, 189, 85, 141, 124, 189, 77, 14, 76, 189, 75, 45, 232, 61, 37, 50, 196, 188, 207, 232, 86, 62, 235, 107, 67, 62, 160, 21, 139, 190, 145, 206, 244, 61, 202, 254, 255, 61, 151, 116, 54, 61, 228, 49, 178, 62, 34, 119, 216, 189, 222, 10, 30, 189, 213, 4, 255, 190, 111, 234, 85, 62, 153, 43, 120, 189, 1, 59, 178, 62, 242, 143, 2, 190, 14, 57, 27, 62, 187, 138, 22, 190, 226, 64, 56, 62, 109, 116, 224, 190, 199, 226, 37, 62, 117, 191, 124, 62, 127, 104, 79, 61, 92, 0, 95, 62, 4, 134, 66, 190, 62, 195, 102, 62, 23, 127, 170, 62, 74, 125, 151, 190, 52, 240, 84, 62, 211, 79, 149, 59, 106, 240, 219, 190, 145, 180, 57, 62, 248, 69, 90, 188, 29, 192, 119, 190, 253, 225, 91, 60, 25, 140, 69, 61, 159, 88, 184, 62, 240, 116, 246, 61, 220, 238, 170, 189, 124, 65, 156, 62, 30, 31, 150, 190, 177, 66, 187, 62, 151, 230, 60, 62, 69, 150, 157, 190, 11, 92, 41, 190, 133, 120, 29, 62, 26, 213, 109, 188, 99, 96, 18, 62, 80, 46, 58, 62, 192, 28, 174, 190, 13, 203, 30, 191, 187, 135, 13, 189, 162, 236, 14, 63, 222, 167, 234, 61, 106, 15, 88, 62, 19, 36, 42, 191, 242, 27, 154, 61, 178, 120, 190, 190, 33, 63, 23, 189, 236, 238, 116, 61, 176, 50, 72, 191, 224, 5, 87, 190, 5, 68, 75, 61, 248, 122, 141, 189, 36, 219, 205, 189, 108, 211, 149, 62, 131, 253, 7, 62, 27, 55, 113, 190, 57, 73, 188, 61, 144, 134, 95, 62, 235, 62, 29, 190, 85, 23, 244, 61, 246, 252, 202, 189, 236, 107, 57, 186, 218, 163, 136, 188, 102, 64, 98, 189, 185, 175, 137, 190, 92, 204, 32, 189, 252, 230, 5, 190, 98, 73, 142, 61, 205, 176, 199, 189, 18, 50, 213, 62, 226, 41, 61, 189, 218, 101, 0, 189, 172, 71, 173, 61, 221, 132, 28, 190, 95, 102, 80, 189, 17, 212, 243, 61, 134, 45, 51, 62, 197, 183, 1, 62, 128, 88, 83, 191, 249, 108, 64, 62, 28, 138, 85, 62, 100, 22, 136, 62, 37, 22, 190, 189, 153, 177, 54, 191, 41, 74, 208, 190, 135, 57, 58, 62, 104, 212, 45, 62, 2, 123, 188, 189, 234, 119, 78, 62, 231, 43, 23, 190, 171, 151, 152, 62, 55, 5, 200, 190, 97, 43, 152, 62, 24, 119, 119, 190, 96, 105, 194, 190, 24, 215, 155, 191, 23, 81, 150, 190, 109, 185, 64, 190, 88, 36, 19, 191, 166, 114, 71, 190, 21, 226, 46, 62, 152, 166, 172, 62, 22, 87, 205, 62, 116, 155, 52, 62, 38, 126, 158, 190, 85, 118, 199, 190, 87, 93, 65, 62, 131, 162, 17, 61, 136, 202, 219, 62, 174, 135, 188, 190, 172, 222, 190, 190, 243, 204, 218, 189, 84, 147, 200, 62, 134, 170, 200, 62, 160, 146, 48, 190, 179, 36, 154, 190, 34, 14, 20, 190, 240, 232, 203, 62, 249, 145, 29, 62, 120, 90, 221, 189, 121, 44, 4, 62, 235, 154, 178, 190, 73, 173, 73, 62, 20, 97, 224, 190, 197, 255, 87, 190, 206, 253, 18, 61, 57, 34, 232, 61, 108, 141, 57, 62, 90, 180, 200, 190, 192, 197, 0, 62, 210, 211, 120, 60, 121, 193, 167, 62, 26, 192, 101, 189, 5, 45, 150, 62, 111, 17, 88, 62, 156, 3, 24, 189, 116, 86, 45, 191, 53, 254, 219, 189, 194, 81, 85, 62, 206, 152, 19, 62, 184, 227, 109, 62, 138, 226, 53, 190, 100, 128, 229, 59, 129, 48, 5, 191, 209, 14, 5, 190, 172, 244, 180, 62, 142, 104, 86, 62, 137, 27, 152, 189, 14, 33, 160, 190, 27, 130, 3, 62, 137, 148, 80, 62, 146, 191, 129, 62, 233, 0, 130, 62, 72, 191, 81, 62, 208, 114, 197, 189, 111, 63, 18, 190, 163, 40, 93, 61, 228, 1, 153, 62, 250, 151, 50, 189, 69, 137, 176, 190, 130, 37, 199, 62, 80, 38, 91, 62, 78, 73, 88, 62, 132, 57, 158, 190, 4, 170, 102, 62, 27, 226, 249, 190, 187, 223, 18, 189, 144, 117, 7, 191, 177, 179, 138, 62, 185, 133, 177, 62, 174, 219, 204, 189, 82, 11, 212, 62, 0, 233, 24, 191, 21, 195, 196, 61, 68, 95, 68, 62, 169, 63, 186, 190, 215, 64, 70, 62, 199, 126, 31, 189, 168, 33, 88, 191, 167, 244, 205, 61, 89, 121, 116, 62, 8, 45, 206, 189, 210, 251, 186, 189, 23, 191, 113, 62, 226, 186, 164, 61, 86, 188, 4, 62, 246, 114, 147, 190, 177, 88, 208, 62, 102, 74, 19, 62, 32, 1, 189, 62, 101, 59, 57, 61, 7, 7, 150, 190, 171, 246, 254, 62, 241, 230, 168, 62, 11, 16, 219, 62, 236, 116, 155, 61, 26, 15, 181, 62, 114, 161, 49, 191, 231, 4, 161, 188, 213, 203, 255, 190, 5, 107, 243, 61, 26, 80, 203, 61, 214, 166, 188, 61, 53, 7, 170, 62, 225, 68, 59, 191, 6, 173, 23, 62, 188, 13, 134, 62, 35, 62, 7, 191, 46, 92, 8, 63, 11, 175, 167, 190, 217, 21, 196, 190, 173, 150, 128, 189, 178, 113, 7, 62, 112, 193, 15, 189, 107, 25, 75, 62, 80, 152, 116, 61, 142, 54, 92, 62, 215, 51, 28, 62, 109, 114, 165, 190, 14, 73, 179, 62, 63, 84, 137, 62, 106, 186, 119, 62, 59, 194, 48, 190, 74, 235, 230, 191, 196, 74, 40, 62, 229, 97, 245, 61, 151, 76, 106, 190, 89, 246, 0, 190, 1, 12, 174, 62, 245, 118, 24, 62, 70, 164, 178, 61, 112, 104, 232, 62, 77, 196, 48, 62, 254, 155, 51, 190, 161, 112, 51, 62, 253, 55, 40, 62, 212, 38, 59, 190, 58, 72, 9, 62, 75, 184, 198, 190, 188, 222, 157, 61, 232, 242, 177, 62, 159, 10, 143, 62, 153, 43, 133, 190, 229, 252, 50, 191, 140, 176, 2, 62, 211, 84, 12, 62, 35, 222, 103, 62, 234, 41, 146, 189, 77, 211, 152, 60, 176, 133, 154, 190, 5, 30, 102, 61, 254, 232, 152, 190, 69, 15, 255, 190, 158, 56, 175, 61, 242, 143, 186, 58, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 66, 243, 48, 61, 239, 62, 110, 190, 101, 20, 247, 61, 70, 194, 164, 190, 253, 229, 25, 62, 106, 165, 16, 62, 214, 197, 197, 62, 170, 140, 114, 61, 9, 225, 149, 61, 68, 30, 7, 191, 166, 11, 73, 190, 86, 242, 246, 58, 209, 86, 125, 61, 129, 94, 241, 61, 241, 17, 89, 189, 206, 3, 21, 190, 110, 150, 49, 62, 103, 124, 163, 61, 61, 152, 148, 62, 211, 182, 67, 62, 33, 142, 252, 60, 97, 115, 161, 190, 229, 28, 16, 62, 215, 127, 212, 60, 100, 223, 176, 62, 182, 114, 229, 62, 253, 205, 48, 190, 82, 247, 36, 62, 60, 81, 127, 190, 219, 75, 0, 62, 84, 5, 147, 62, 126, 74, 28, 62, 243, 173, 23, 191, 147, 218, 168, 187, 237, 218, 65, 190, 60, 62, 33, 62, 34, 109, 82, 61, 233, 69, 74, 62, 178, 155, 92, 62, 233, 181, 209, 60, 27, 173, 49, 62, 15, 165, 83, 191, 210, 8, 22, 191, 141, 162, 128, 62, 104, 98, 136, 62, 105, 217, 1, 188, 160, 221, 31, 188, 246, 77, 62, 191, 128, 237, 184, 61, 191, 74, 232, 61, 42, 65, 56, 62, 18, 243, 22, 190, 36, 44, 61, 191, 117, 235, 229, 189, 53, 87, 114, 62, 168, 203, 183, 62, 114, 199, 149, 190, 105, 24, 176, 190, 213, 11, 44, 191, 188, 92, 31, 62, 13, 13, 208, 61, 79, 138, 106, 190, 96, 42, 49, 190, 37, 200, 208, 189, 131, 228, 166, 190, 198, 25, 8, 62, 18, 135, 50, 62, 238, 197, 188, 61, 184, 255, 171, 61, 210, 35, 115, 62, 69, 168, 166, 189, 87, 101, 10, 62, 164, 252, 20, 190, 120, 136, 100, 62, 169, 81, 141, 61, 83, 138, 133, 62, 50, 5, 240, 188, 240, 34, 115, 60, 185, 137, 70, 62, 211, 20, 157, 62, 190, 240, 140, 188, 210, 244, 169, 61, 87, 89, 118, 189, 15, 180, 111, 61, 84, 199, 0, 60, 34, 152, 152, 188, 145, 51, 214, 189, 213, 37, 184, 61, 229, 50, 22, 62, 132, 230, 230, 61, 0, 224, 50, 62, 154, 92, 61, 186, 124, 9, 84, 62, 220, 186, 210, 188, 77, 34, 50, 62, 245, 20, 128, 189, 235, 21, 149, 189, 87, 98, 128, 187, 37, 61, 67, 189, 34, 246, 136, 190, 183, 54, 7, 62, 75, 211, 246, 190, 64, 136, 31, 186, 207, 154, 165, 188, 145, 193, 224, 62, 33, 22, 157, 189, 72, 203, 252, 190, 224, 30, 139, 190, 145, 70, 89, 62, 248, 153, 144, 190, 238, 233, 96, 62, 220, 140, 83, 190, 168, 111, 246, 62, 95, 186, 110, 60, 68, 93, 150, 189, 99, 108, 219, 190, 206, 8, 217, 187, 12, 254, 144, 61, 65, 3, 167, 190, 197, 38, 170, 190, 245, 224, 42, 61, 54, 253, 101, 190, 93, 207, 84, 191, 87, 47, 178, 61, 94, 54, 123, 187, 201, 22, 140, 60, 128, 0, 71, 190, 54, 38, 4, 62, 104, 30, 172, 191, 19, 5, 39, 62, 15, 172, 3, 190, 116, 126, 19, 188, 251, 90, 227, 189, 150, 211, 69, 62, 185, 10, 138, 61, 191, 73, 65, 62, 131, 170, 170, 62, 203, 193, 81, 190, 111, 45, 228, 189, 211, 74, 19, 62, 100, 251, 99, 62, 104, 170, 29, 189, 159, 46, 165, 189, 222, 227, 50, 191, 77, 199, 37, 62, 228, 139, 107, 62, 155, 79, 57, 62, 138, 134, 178, 190, 81, 20, 46, 191, 156, 167, 204, 188, 155, 164, 221, 62, 190, 233, 10, 62, 110, 135, 12, 62, 218, 15, 50, 190, 15, 88, 40, 190, 91, 142, 213, 61, 248, 104, 64, 189, 223, 18, 11, 191, 45, 185, 54, 190, 60, 69, 3, 190, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 241, 227, 148, 191, 114, 146, 245, 190, 75, 35, 114, 190, 129, 219, 44, 191, 140, 128, 180, 61, 239, 63, 22, 61, 2, 112, 3, 62, 198, 15, 90, 61, 252, 170, 83, 59, 66, 111, 210, 190, 58, 238, 152, 190, 145, 6, 157, 62, 213, 17, 24, 62, 190, 128, 249, 61, 21, 159, 184, 190, 183, 82, 209, 189, 76, 10, 95, 190, 127, 113, 199, 61, 166, 186, 100, 62, 235, 166, 7, 190, 24, 96, 175, 190, 225, 250, 79, 191, 66, 199, 160, 62, 34, 59, 243, 61, 28, 30, 29, 189, 12, 213, 229, 62, 179, 232, 155, 190, 37, 150, 135, 61, 32, 165, 64, 62, 21, 156, 132, 190, 50, 98, 110, 190, 72, 199, 165, 61, 250, 126, 19, 62, 183, 24, 87, 190, 59, 151, 206, 57, 16, 39, 10, 190, 78, 65, 151, 62, 14, 61, 7, 60, 180, 38, 160, 190, 144, 138, 179, 190, 219, 94, 144, 62, 135, 241, 53, 63, 0, 23, 60, 190, 12, 141, 11, 62, 188, 139, 246, 190, 190, 75, 116, 190, 212, 6, 141, 190, 15, 80, 7, 61, 132, 245, 4, 190, 161, 78, 77, 191, 134, 136, 176, 190, 41, 104, 144, 62, 111, 88, 52, 189, 122, 240, 163, 61, 185, 16, 128, 62, 70, 170, 34, 189, 150, 3, 227, 190, 231, 39, 1, 191, 135, 140, 2, 60, 141, 145, 31, 191, 177, 58, 107, 62, 36, 7, 21, 62, 80, 176, 40, 191, 222, 74, 16, 61, 208, 89, 111, 190, 196, 35, 198, 61, 240, 197, 24, 190, 95, 59, 187, 189, 146, 0, 87, 190, 245, 196, 187, 190, 116, 25, 223, 190, 187, 30, 95, 190, 147, 249, 7, 190, 37, 64, 76, 61, 22, 191, 224, 61, 21, 209, 45, 62, 200, 157, 188, 61, 1, 159, 74, 191, 10, 113, 61, 61, 54, 106, 244, 61, 46, 68, 203, 61, 84, 248, 61, 61, 22, 113, 11, 191, 137, 47, 30, 61, 46, 247, 50, 62, 192, 250, 27, 190, 17, 30, 3, 190, 159, 226, 138, 190, 190, 170, 138, 188, 253, 167, 116, 190, 45, 213, 230, 61, 23, 96, 241, 189, 56, 226, 157, 60, 174, 233, 217, 190, 6, 236, 87, 189, 44, 210, 18, 62, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 241, 162, 61, 54, 115, 20, 62, 40, 189, 134, 189, 148, 187, 105, 61, 172, 147, 114, 62, 90, 241, 144, 189, 19, 137, 48, 62, 193, 32, 88, 62, 83, 202, 180, 62, 145, 21, 115, 62, 191, 142, 101, 190, 32, 84, 167, 62, 138, 117, 214, 190, 32, 153, 65, 61, 156, 176, 202, 188, 190, 121, 175, 190, 131, 223, 161, 61, 31, 59, 237, 61, 162, 171, 11, 62, 53, 213, 119, 62, 251, 182, 173, 61, 105, 230, 173, 189, 151, 61, 2, 62, 228, 66, 18, 62, 235, 214, 69, 57, 58, 56, 148, 189, 131, 178, 72, 62, 91, 146, 27, 190, 252, 97, 150, 62, 194, 100, 105, 190, 238, 149, 13, 62, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 211, 104, 191, 100, 36, 77, 63, 229, 185, 56, 189, 245, 71, 51, 191, 115, 122, 131, 191, 56, 157, 37, 61, 223, 44, 96, 63, 43, 70, 159, 191, 30, 52, 21, 62, 253, 4, 4, 63, 255, 118, 203, 63, 6, 227, 51, 62, 214, 49, 22, 190, 159, 107, 154, 62, 148, 191, 221, 62, 131, 246, 43, 191, 225, 112, 120, 191, 168, 68, 76, 190, 47, 3, 141, 62, 62, 4, 31, 63, 212, 7, 166, 190, 155, 214, 28, 62, 68, 20, 30, 190, 53, 87, 179, 190, 44, 95, 15, 62, 19, 210, 158, 190, 61, 87, 227, 190, 218, 31, 21, 62, 137, 123, 184, 190, 234, 217, 20, 63, 219, 17, 219, 62, 84, 97, 17, 189, 213, 170, 66, 62, 76, 117, 196, 62, 186, 239, 159, 189, 134, 31, 66, 61, 84, 87, 150, 189, 1, 174, 45, 61, 242, 169, 216, 189, 192, 19, 136, 62, 93, 138, 45, 190, 183, 4, 4, 62, 95, 45, 169, 62, 229, 65, 112, 190, 99, 97, 74, 62, 254, 111, 230, 189, 34, 98, 13, 190, 26, 167, 151, 62, 61, 209, 135, 189, 93, 21, 1, 190, 28, 198, 212, 61, 166, 1, 24, 61, 73, 28, 111, 190, 162, 190, 147, 189, 62, 236, 132, 190, 163, 161, 98, 62, 246, 72, 192, 189, 186, 41, 200, 189, 100, 153, 176, 189, 108, 163, 228, 61, 232, 52, 184, 190, 175, 117, 55, 189, 65, 144, 40, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 224, 106, 62, 206, 95, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 125, 224, 62, 204, 229, 178, 63, 171, 12, 3, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {184, 231, 70, 192, 78, 50, 136, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}