// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 22, 226, 189, 227, 10, 133, 190, 106, 221, 136, 190, 7, 242, 26, 191, 203, 96, 103, 191, 185, 207, 77, 62, 64, 223, 1, 63, 19, 112, 9, 190, 78, 69, 162, 190, 114, 44, 251, 190, 136, 199, 9, 62, 180, 158, 215, 62, 136, 134, 219, 61, 55, 180, 134, 62, 60, 123, 147, 190, 53, 114, 200, 62, 179, 234, 212, 62, 197, 179, 19, 60, 253, 137, 142, 62, 87, 50, 34, 63, 239, 161, 238, 62, 246, 117, 97, 62, 161, 101, 223, 190, 135, 227, 167, 62, 11, 117, 76, 191, 136, 13, 242, 190, 216, 103, 253, 190, 59, 68, 210, 61, 136, 227, 160, 190, 135, 76, 232, 189, 190, 125, 38, 63, 47, 32, 31, 191, 87, 53, 151, 190, 129, 219, 39, 62, 172, 70, 78, 62, 126, 221, 4, 61, 234, 23, 211, 61, 223, 151, 134, 191, 115, 105, 62, 62, 141, 155, 12, 62, 132, 106, 74, 63, 123, 231, 58, 62, 69, 205, 185, 190, 90, 160, 44, 191, 218, 126, 242, 62, 100, 79, 66, 190, 81, 186, 56, 191, 43, 140, 167, 189, 175, 3, 229, 61, 70, 52, 26, 191, 244, 91, 242, 62, 105, 253, 170, 61, 123, 209, 99, 191, 231, 197, 120, 62, 204, 107, 56, 62, 217, 245, 38, 63, 75, 17, 118, 62, 69, 75, 44, 190, 188, 254, 80, 62, 155, 48, 115, 190, 64, 135, 4, 191, 37, 169, 64, 191, 249, 95, 207, 190, 187, 116, 90, 190, 218, 102, 44, 191, 97, 39, 84, 61, 143, 180, 128, 62, 28, 1, 86, 63, 204, 233, 175, 59, 242, 45, 4, 63, 72, 157, 233, 62, 57, 226, 206, 190, 238, 126, 117, 62, 38, 133, 33, 191, 22, 112, 15, 189, 200, 51, 0, 63, 113, 70, 185, 189, 205, 163, 31, 189, 119, 212, 184, 62, 143, 211, 222, 190, 171, 59, 188, 190, 157, 54, 233, 62, 138, 149, 205, 190, 213, 58, 31, 63, 154, 93, 50, 191, 210, 255, 65, 63, 129, 204, 150, 62, 31, 237, 101, 62, 161, 107, 38, 62, 128, 47, 112, 190, 199, 160, 69, 62, 248, 150, 48, 191, 75, 41, 85, 61, 115, 44, 178, 189, 117, 236, 25, 191, 96, 142, 201, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 205, 10, 191, 50, 118, 197, 190, 247, 231, 48, 189, 138, 132, 140, 190, 194, 221, 19, 63, 230, 254, 0, 63, 168, 148, 120, 190, 27, 239, 205, 62, 90, 44, 18, 63, 32, 73, 46, 189, 240, 208, 174, 62, 224, 17, 226, 62, 61, 104, 156, 62, 229, 179, 92, 189, 21, 72, 52, 189, 85, 181, 226, 62, 140, 112, 200, 190, 135, 187, 158, 62, 152, 246, 132, 62, 229, 216, 210, 190, 163, 38, 46, 63, 102, 190, 70, 61, 248, 130, 53, 63, 61, 207, 139, 59, 119, 149, 131, 62, 216, 151, 88, 190, 118, 183, 171, 62, 122, 71, 166, 190, 234, 233, 185, 61, 101, 156, 146, 190, 136, 54, 199, 62, 237, 8, 115, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 111, 4, 190, 161, 162, 123, 190, 218, 27, 115, 189, 233, 30, 37, 60, 174, 228, 146, 62, 60, 211, 37, 62, 176, 123, 29, 62, 111, 13, 7, 62, 237, 8, 130, 61, 129, 230, 241, 189, 187, 76, 128, 190, 2, 155, 33, 62, 140, 152, 141, 190, 128, 29, 96, 61, 100, 168, 178, 189, 37, 247, 197, 61, 226, 233, 185, 189, 195, 36, 170, 190, 12, 109, 23, 189, 37, 41, 86, 189, 205, 121, 133, 189, 216, 130, 137, 189, 7, 31, 70, 62, 155, 203, 145, 189, 91, 82, 116, 61, 3, 233, 109, 189, 153, 94, 137, 188, 180, 82, 212, 189, 113, 15, 222, 61, 155, 110, 240, 188, 3, 105, 20, 190, 109, 108, 101, 61, 254, 106, 229, 61, 106, 55, 106, 61, 44, 141, 12, 62, 240, 153, 26, 62, 85, 31, 241, 189, 1, 37, 22, 190, 234, 157, 51, 190, 142, 183, 18, 189, 1, 30, 81, 189, 56, 116, 148, 61, 155, 136, 46, 62, 31, 30, 31, 60, 32, 146, 138, 62, 34, 100, 150, 190, 255, 184, 151, 188, 232, 176, 28, 62, 90, 4, 115, 190, 182, 197, 9, 62, 73, 159, 72, 189, 231, 143, 154, 61, 135, 57, 215, 61, 12, 254, 22, 62, 172, 171, 8, 189, 123, 134, 177, 61, 102, 64, 57, 62, 173, 119, 35, 189, 72, 107, 70, 190, 251, 227, 158, 190, 92, 129, 102, 60, 37, 95, 178, 188, 82, 199, 35, 62, 76, 244, 48, 60, 109, 140, 45, 60, 75, 140, 255, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 29, 199, 22, 190, 159, 189, 31, 62, 122, 171, 238, 189, 140, 167, 41, 190, 11, 180, 200, 188, 150, 9, 97, 188, 222, 182, 18, 189, 4, 212, 22, 62, 146, 114, 45, 61, 219, 198, 73, 186, 193, 70, 4, 62, 170, 189, 16, 190, 239, 198, 247, 189, 177, 154, 147, 61, 189, 119, 206, 60, 122, 96, 181, 61, 198, 157, 214, 189, 63, 23, 203, 189, 69, 49, 252, 188, 251, 13, 198, 189, 142, 56, 117, 61, 113, 7, 118, 60, 108, 17, 93, 61, 185, 51, 237, 189, 15, 27, 16, 61, 85, 214, 161, 189, 236, 199, 134, 61, 68, 152, 210, 61, 225, 117, 218, 188, 109, 204, 74, 188, 36, 157, 195, 61, 70, 32, 27, 62, 151, 239, 21, 62, 132, 161, 205, 61, 14, 111, 13, 190, 160, 74, 15, 62, 62, 167, 216, 60, 146, 145, 206, 189, 153, 2, 197, 61, 46, 154, 45, 190, 135, 163, 28, 190, 254, 106, 143, 61, 113, 250, 35, 61, 15, 53, 197, 188, 21, 112, 1, 190, 252, 34, 169, 61, 47, 220, 218, 61, 7, 214, 156, 188, 39, 210, 171, 188, 69, 181, 73, 190, 46, 46, 34, 190, 50, 18, 69, 189, 70, 75, 153, 60, 50, 224, 9, 188, 114, 54, 237, 61, 160, 204, 137, 59, 66, 54, 198, 60, 233, 194, 79, 190, 248, 61, 181, 60, 202, 178, 129, 190, 59, 26, 17, 191, 222, 170, 77, 190, 179, 88, 178, 61, 104, 63, 82, 61, 240, 46, 14, 62, 127, 223, 207, 61, 69, 159, 35, 190, 202, 191, 93, 62, 12, 92, 129, 61, 68, 71, 11, 188, 234, 195, 158, 62, 231, 122, 187, 190, 71, 211, 47, 61, 103, 240, 175, 190, 53, 40, 136, 61, 245, 82, 142, 190, 115, 12, 224, 190, 24, 232, 107, 60, 132, 231, 146, 188, 212, 108, 6, 62, 128, 182, 48, 190, 71, 15, 202, 62, 157, 189, 138, 188, 66, 71, 0, 190, 125, 216, 68, 61, 102, 247, 8, 187, 166, 177, 255, 189, 198, 37, 118, 61, 34, 77, 157, 190, 15, 198, 138, 190, 2, 174, 246, 189, 36, 11, 35, 62, 221, 39, 191, 188, 231, 85, 38, 190, 31, 110, 120, 60, 19, 172, 218, 185, 50, 178, 247, 61, 159, 209, 157, 187, 238, 255, 20, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 12, 177, 209, 189, 31, 211, 3, 189, 95, 177, 76, 189, 4, 91, 139, 61, 200, 224, 3, 189, 10, 133, 155, 61, 71, 140, 92, 60, 57, 101, 47, 189, 253, 32, 62, 61, 63, 14, 39, 190, 14, 145, 20, 62, 10, 171, 15, 190, 17, 173, 92, 189, 178, 14, 56, 190, 108, 136, 33, 190, 59, 118, 51, 190, 191, 152, 147, 60, 96, 145, 199, 189, 90, 129, 199, 189, 181, 246, 150, 60, 228, 118, 188, 61, 136, 239, 141, 188, 57, 83, 32, 62, 183, 204, 208, 188, 239, 184, 114, 61, 12, 195, 94, 189, 184, 72, 159, 190, 127, 88, 52, 190, 5, 21, 238, 60, 135, 230, 77, 61, 198, 252, 185, 61, 165, 126, 81, 190, 121, 31, 185, 61, 12, 158, 35, 62, 123, 29, 10, 61, 86, 21, 66, 189, 49, 26, 78, 62, 240, 70, 249, 189, 149, 217, 30, 62, 107, 59, 54, 189, 175, 55, 193, 189, 126, 81, 38, 190, 81, 196, 188, 61, 225, 165, 59, 190, 92, 185, 89, 190, 48, 182, 136, 61, 35, 140, 199, 188, 19, 132, 3, 60, 147, 42, 182, 190, 126, 65, 32, 61, 5, 137, 168, 61, 128, 78, 65, 189, 28, 115, 149, 61, 178, 148, 144, 190, 195, 248, 112, 190, 5, 201, 218, 189, 64, 197, 168, 189, 27, 127, 136, 62, 129, 246, 241, 61, 221, 212, 118, 188, 230, 254, 167, 190, 239, 158, 64, 62, 153, 105, 149, 190, 3, 160, 10, 190, 92, 195, 53, 61, 44, 35, 225, 190, 1, 200, 22, 62, 186, 163, 210, 190, 179, 154, 161, 189, 150, 165, 112, 190, 58, 72, 106, 190, 232, 130, 130, 61, 81, 240, 42, 190, 147, 182, 58, 61, 4, 233, 99, 189, 248, 56, 178, 62, 201, 171, 49, 190, 232, 4, 17, 189, 8, 10, 229, 189, 108, 102, 69, 61, 75, 87, 141, 190, 164, 183, 63, 62, 141, 255, 52, 188, 93, 1, 142, 190, 54, 240, 169, 61, 64, 154, 196, 189, 41, 117, 32, 62, 71, 137, 65, 189, 89, 130, 176, 189, 88, 132, 243, 61, 164, 191, 123, 62, 112, 235, 93, 61, 197, 181, 185, 61, 223, 65, 18, 190, 18, 233, 225, 189, 165, 8, 110, 61, 106, 134, 105, 60, 242, 230, 155, 62, 235, 64, 221, 189, 110, 19, 189, 61, 79, 79, 82, 62, 183, 131, 212, 59, 124, 198, 98, 62, 59, 78, 101, 61, 146, 240, 180, 189, 40, 101, 135, 61, 146, 238, 158, 189, 29, 38, 33, 61, 120, 83, 206, 61, 112, 176, 159, 187, 186, 208, 143, 187, 89, 153, 255, 189, 107, 57, 87, 190, 14, 152, 132, 188, 32, 111, 154, 188, 155, 152, 93, 59, 185, 85, 175, 61, 202, 110, 219, 189, 43, 117, 122, 62, 200, 32, 158, 61, 219, 112, 248, 61, 130, 48, 69, 60, 61, 74, 153, 189, 152, 16, 32, 190, 52, 218, 24, 190, 46, 108, 176, 61, 21, 180, 192, 189, 60, 162, 76, 62, 5, 90, 225, 61, 125, 58, 22, 62, 67, 231, 152, 190, 152, 230, 196, 61, 83, 80, 162, 61, 8, 172, 39, 190, 19, 148, 70, 62, 85, 202, 81, 190, 53, 152, 51, 61, 158, 189, 228, 188, 165, 77, 0, 188, 33, 134, 45, 190, 19, 93, 43, 189, 178, 151, 173, 62, 206, 254, 6, 189, 101, 135, 136, 188, 135, 19, 179, 190, 40, 14, 95, 61, 155, 192, 191, 61, 91, 174, 37, 62, 6, 196, 33, 62, 188, 232, 1, 190, 41, 225, 125, 190, 118, 53, 110, 189, 217, 98, 163, 61, 132, 19, 201, 60, 142, 163, 51, 59, 11, 74, 73, 62, 252, 101, 0, 62, 60, 156, 206, 60, 241, 42, 173, 188, 177, 72, 158, 188, 17, 208, 170, 189, 66, 189, 140, 190, 13, 247, 39, 61, 233, 239, 178, 189, 218, 137, 85, 190, 219, 246, 93, 61, 157, 202, 35, 190, 216, 112, 67, 62, 8, 79, 51, 190, 165, 206, 167, 186, 182, 165, 41, 188, 35, 222, 84, 189, 136, 5, 128, 61, 230, 253, 54, 190, 103, 135, 110, 61, 66, 220, 3, 190, 69, 79, 236, 61, 65, 242, 21, 190, 59, 193, 53, 190, 20, 208, 106, 190, 99, 47, 210, 61, 157, 12, 96, 190, 213, 236, 139, 62, 116, 235, 38, 60, 187, 219, 159, 189, 18, 194, 162, 61, 80, 80, 205, 188, 229, 76, 148, 190, 193, 8, 22, 62, 121, 95, 226, 188, 61, 119, 244, 61, 242, 84, 6, 61, 189, 166, 57, 62, 252, 73, 146, 62, 242, 126, 174, 188, 138, 99, 64, 61, 137, 12, 18, 189, 47, 195, 144, 190, 146, 133, 63, 62, 215, 42, 6, 62, 214, 1, 142, 61, 223, 128, 49, 62, 105, 4, 7, 62, 218, 210, 3, 189, 62, 222, 182, 189, 29, 43, 155, 62, 239, 36, 116, 189, 102, 175, 3, 62, 192, 112, 24, 190, 44, 5, 50, 190, 36, 249, 171, 189, 110, 55, 193, 61, 151, 9, 132, 189, 168, 21, 49, 60, 254, 10, 106, 62, 239, 104, 33, 190, 237, 46, 187, 186, 235, 153, 22, 188, 241, 207, 72, 190, 87, 1, 59, 62, 209, 111, 15, 62, 136, 232, 25, 190, 251, 29, 191, 61, 160, 49, 141, 189, 71, 172, 171, 189, 128, 125, 152, 62, 229, 19, 27, 61, 54, 226, 38, 189, 26, 6, 42, 190, 51, 14, 45, 62, 42, 202, 74, 62, 11, 120, 17, 189, 19, 50, 7, 190, 21, 62, 12, 62, 134, 235, 115, 61, 63, 248, 91, 60, 151, 213, 205, 61, 61, 143, 15, 62, 139, 98, 236, 187, 153, 216, 196, 61, 111, 250, 92, 62, 249, 221, 84, 61, 163, 89, 200, 61, 243, 79, 191, 189, 28, 239, 90, 60, 51, 26, 93, 59, 3, 4, 88, 62, 196, 245, 105, 188, 171, 162, 63, 62, 161, 70, 201, 189, 9, 16, 212, 61, 148, 64, 254, 60, 0, 73, 43, 62, 167, 252, 117, 189, 234, 251, 230, 61, 182, 55, 73, 62, 237, 174, 44, 189, 86, 158, 101, 62, 184, 78, 193, 57, 251, 55, 28, 62, 108, 180, 190, 61, 196, 119, 74, 190, 190, 205, 66, 62, 210, 244, 250, 61, 43, 183, 210, 61, 76, 81, 153, 186, 173, 57, 6, 189, 44, 32, 62, 190, 250, 162, 99, 61, 74, 15, 178, 60, 213, 53, 137, 62, 135, 77, 187, 61, 70, 147, 95, 189, 209, 193, 16, 62, 228, 159, 40, 61, 103, 151, 146, 62, 25, 238, 49, 62, 187, 186, 152, 189, 93, 229, 152, 61, 186, 176, 223, 61, 86, 243, 0, 62, 159, 92, 157, 60, 9, 252, 48, 61, 162, 2, 114, 190, 200, 24, 117, 190, 58, 3, 48, 60, 151, 232, 53, 62, 151, 5, 200, 61, 236, 30, 180, 61, 66, 238, 136, 190, 113, 186, 143, 61, 47, 150, 191, 189, 76, 22, 234, 188, 113, 28, 12, 190, 34, 186, 103, 190, 184, 88, 233, 189, 103, 144, 26, 62, 93, 159, 132, 189, 196, 200, 183, 186, 9, 197, 222, 61, 8, 208, 177, 61, 236, 186, 84, 190, 30, 138, 26, 62, 7, 87, 65, 62, 110, 178, 253, 61, 62, 129, 57, 189, 44, 195, 28, 189, 207, 126, 254, 188, 106, 108, 154, 188, 166, 132, 102, 60, 1, 23, 75, 190, 81, 203, 204, 189, 98, 234, 14, 62, 81, 226, 96, 61, 241, 213, 48, 190, 9, 126, 36, 62, 172, 14, 5, 189, 201, 241, 58, 188, 86, 45, 229, 61, 142, 96, 246, 189, 189, 78, 5, 62, 2, 132, 169, 61, 186, 117, 34, 59, 31, 124, 63, 62, 210, 69, 201, 189, 64, 83, 56, 62, 116, 31, 72, 62, 111, 33, 56, 62, 115, 13, 37, 61, 167, 159, 28, 190, 73, 91, 94, 190, 21, 55, 26, 61, 106, 53, 107, 61, 30, 47, 215, 188, 213, 150, 216, 188, 114, 66, 248, 60, 58, 26, 87, 62, 208, 100, 74, 61, 164, 62, 49, 62, 77, 109, 30, 190, 185, 1, 64, 190, 139, 93, 196, 188, 22, 151, 6, 62, 122, 10, 0, 62, 135, 158, 32, 190, 236, 135, 252, 189, 192, 35, 4, 190, 133, 104, 142, 61, 20, 49, 171, 188, 42, 167, 166, 189, 174, 237, 30, 62, 35, 10, 3, 190, 151, 204, 243, 189, 229, 44, 46, 190, 176, 197, 31, 62, 138, 119, 8, 190, 98, 158, 156, 189, 221, 81, 217, 187, 149, 109, 194, 61, 186, 231, 96, 61, 42, 162, 203, 189, 215, 216, 193, 61, 234, 37, 62, 61, 42, 36, 13, 62, 208, 91, 184, 61, 174, 228, 10, 190, 11, 160, 227, 60, 75, 49, 113, 60, 112, 246, 89, 189, 183, 190, 235, 189, 235, 150, 254, 61, 43, 143, 119, 188, 104, 110, 138, 189, 68, 124, 85, 189, 205, 106, 52, 189, 7, 59, 84, 61, 69, 39, 252, 61, 59, 174, 146, 62, 90, 164, 135, 189, 255, 201, 212, 61, 241, 17, 200, 61, 75, 69, 133, 190, 225, 117, 98, 190, 250, 21, 55, 190, 165, 250, 75, 62, 103, 224, 198, 61, 227, 6, 126, 61, 173, 182, 147, 61, 1, 207, 163, 189, 187, 238, 116, 61, 22, 26, 213, 189, 171, 1, 114, 62, 8, 208, 195, 189, 232, 223, 123, 190, 66, 43, 165, 189, 126, 34, 76, 62, 236, 248, 230, 61, 166, 174, 164, 61, 118, 6, 0, 62, 58, 141, 243, 60, 83, 101, 152, 189, 89, 181, 138, 187, 216, 0, 232, 189, 80, 105, 39, 62, 238, 218, 3, 190, 188, 11, 102, 190, 72, 183, 203, 62, 25, 245, 180, 61, 135, 174, 219, 189, 10, 53, 82, 190, 74, 138, 174, 61, 173, 57, 177, 190, 97, 162, 168, 189, 144, 185, 233, 60, 244, 102, 232, 61, 147, 53, 95, 62, 123, 71, 88, 190, 186, 101, 229, 62, 241, 31, 254, 190, 254, 146, 182, 188, 76, 251, 129, 61, 143, 16, 77, 190, 214, 89, 33, 62, 82, 186, 130, 188, 217, 240, 182, 189, 194, 246, 16, 60, 248, 19, 58, 62, 152, 30, 215, 189, 60, 77, 215, 189, 89, 177, 78, 62, 131, 107, 57, 189, 133, 163, 81, 61, 64, 252, 120, 190, 7, 205, 185, 61, 78, 218, 169, 61, 157, 7, 160, 62, 114, 0, 74, 62, 241, 17, 110, 190, 24, 152, 246, 62, 122, 57, 2, 62, 82, 155, 20, 62, 121, 71, 178, 61, 27, 9, 78, 62, 118, 66, 12, 191, 218, 22, 121, 189, 115, 144, 24, 190, 140, 200, 31, 190, 116, 2, 90, 189, 211, 107, 23, 189, 190, 133, 170, 62, 23, 82, 10, 191, 217, 231, 108, 60, 128, 1, 40, 62, 9, 210, 195, 190, 157, 234, 242, 62, 125, 58, 127, 190, 197, 112, 37, 190, 173, 52, 136, 189, 176, 116, 141, 61, 113, 53, 39, 190, 121, 229, 105, 61, 195, 69, 219, 61, 120, 93, 164, 61, 129, 116, 170, 61, 138, 147, 151, 190, 96, 120, 162, 61, 9, 13, 155, 188, 59, 230, 69, 62, 227, 108, 147, 189, 146, 154, 116, 60, 159, 202, 175, 61, 120, 100, 177, 61, 85, 236, 222, 189, 138, 117, 147, 189, 47, 139, 58, 62, 18, 144, 49, 61, 204, 185, 216, 60, 57, 101, 132, 61, 7, 191, 147, 59, 228, 121, 95, 190, 109, 222, 152, 61, 32, 255, 173, 61, 235, 109, 119, 190, 236, 173, 20, 62, 226, 9, 152, 61, 99, 43, 168, 61, 183, 73, 144, 62, 59, 11, 63, 62, 166, 34, 165, 60, 251, 93, 82, 190, 206, 121, 9, 62, 27, 125, 0, 190, 39, 72, 13, 62, 229, 85, 248, 60, 46, 79, 94, 61, 244, 114, 44, 190, 88, 233, 148, 61, 31, 158, 63, 190, 202, 203, 238, 189, 138, 230, 29, 62, 10, 35, 45, 189, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 50, 16, 1, 61, 15, 151, 136, 61, 224, 153, 15, 62, 41, 208, 239, 61, 122, 186, 49, 62, 54, 15, 22, 60, 247, 189, 109, 61, 119, 90, 226, 189, 62, 75, 168, 189, 35, 186, 68, 190, 32, 119, 21, 190, 139, 205, 83, 189, 239, 62, 69, 190, 86, 227, 143, 189, 92, 22, 181, 60, 171, 64, 235, 189, 76, 30, 73, 60, 42, 190, 223, 189, 130, 14, 176, 61, 186, 145, 145, 61, 172, 197, 167, 61, 197, 34, 79, 190, 123, 174, 1, 62, 1, 147, 137, 61, 128, 91, 46, 189, 31, 137, 20, 189, 143, 9, 43, 189, 238, 252, 136, 189, 241, 130, 57, 61, 148, 90, 231, 61, 145, 147, 156, 59, 100, 94, 110, 187, 12, 76, 172, 189, 170, 96, 131, 189, 187, 39, 16, 62, 6, 21, 46, 62, 2, 160, 32, 62, 167, 230, 30, 62, 122, 26, 58, 62, 55, 89, 57, 188, 61, 191, 133, 190, 10, 226, 108, 190, 187, 166, 187, 189, 29, 231, 58, 62, 187, 227, 130, 62, 188, 15, 157, 188, 10, 44, 7, 188, 59, 239, 43, 190, 138, 133, 212, 61, 206, 83, 214, 61, 13, 118, 244, 61, 88, 211, 58, 190, 218, 123, 151, 190, 179, 41, 247, 189, 179, 1, 56, 61, 197, 186, 99, 62, 55, 111, 128, 61, 49, 9, 252, 189, 241, 124, 6, 190, 226, 211, 63, 62, 112, 210, 128, 61, 148, 190, 185, 189, 200, 216, 56, 62, 174, 77, 166, 189, 119, 168, 225, 189, 242, 232, 27, 62, 151, 143, 75, 62, 155, 146, 249, 188, 185, 167, 51, 61, 94, 65, 30, 62, 82, 42, 172, 61, 91, 58, 47, 62, 20, 102, 243, 58, 123, 201, 112, 61, 98, 26, 148, 61, 231, 90, 55, 62, 41, 230, 79, 188, 131, 151, 8, 62, 191, 144, 16, 62, 254, 167, 60, 62, 25, 178, 153, 61, 109, 161, 167, 61, 79, 109, 72, 61, 213, 247, 11, 62, 93, 120, 131, 189, 53, 147, 98, 188, 204, 104, 56, 190, 226, 253, 215, 61, 26, 90, 84, 62, 39, 31, 146, 61, 251, 146, 35, 62, 182, 140, 30, 61, 14, 71, 112, 61, 218, 213, 92, 61, 39, 226, 45, 62, 237, 188, 26, 189, 126, 118, 22, 62, 2, 97, 26, 190, 133, 87, 170, 188, 236, 60, 27, 190, 32, 172, 69, 62, 101, 244, 1, 190, 250, 114, 237, 58, 229, 202, 58, 61, 227, 177, 133, 61, 54, 222, 140, 189, 68, 65, 253, 189, 78, 51, 28, 190, 133, 136, 132, 61, 0, 117, 198, 189, 181, 65, 19, 62, 11, 71, 21, 189, 39, 106, 111, 62, 93, 190, 175, 189, 193, 54, 169, 61, 56, 105, 43, 190, 59, 115, 8, 62, 171, 24, 65, 187, 71, 199, 228, 187, 56, 135, 234, 189, 206, 121, 146, 61, 83, 13, 0, 190, 121, 28, 15, 189, 41, 210, 191, 188, 26, 43, 127, 187, 91, 158, 128, 61, 96, 21, 128, 188, 106, 153, 150, 189, 161, 28, 251, 60, 86, 64, 136, 61, 219, 231, 198, 188, 198, 189, 136, 61, 238, 105, 155, 56, 61, 89, 194, 61, 166, 40, 203, 188, 35, 209, 203, 61, 143, 33, 22, 190, 184, 5, 227, 189, 168, 65, 202, 188, 220, 137, 81, 61, 176, 53, 246, 61, 215, 186, 78, 189, 7, 122, 176, 189, 111, 99, 94, 190, 168, 177, 15, 62, 194, 150, 20, 62, 251, 12, 226, 61, 228, 101, 160, 189, 148, 106, 178, 189, 42, 99, 133, 189, 196, 242, 117, 62, 109, 233, 49, 61, 132, 167, 105, 62, 252, 110, 242, 189, 251, 5, 94, 61, 121, 66, 204, 61, 3, 205, 146, 60, 237, 57, 84, 190, 141, 193, 152, 189, 187, 11, 39, 190, 226, 233, 186, 61, 97, 102, 29, 190, 43, 250, 123, 187, 60, 30, 163, 61, 217, 33, 169, 61, 180, 105, 116, 189, 39, 191, 13, 62, 221, 82, 244, 61, 166, 100, 83, 61, 99, 80, 12, 62, 37, 52, 121, 189, 172, 106, 151, 189, 107, 219, 7, 62, 252, 23, 221, 188, 63, 0, 172, 59, 245, 137, 43, 190, 109, 99, 12, 190, 254, 3, 203, 189, 180, 147, 230, 189, 214, 72, 180, 188, 75, 124, 123, 189, 74, 37, 223, 61, 100, 170, 27, 190, 93, 63, 52, 190, 254, 3, 239, 61, 222, 94, 184, 188, 152, 131, 39, 61, 216, 206, 67, 61, 109, 215, 49, 190, 200, 72, 16, 60, 1, 166, 4, 190, 189, 219, 56, 60, 214, 70, 128, 61, 226, 58, 128, 190, 104, 86, 2, 190, 35, 96, 184, 189, 245, 244, 148, 61, 193, 47, 28, 189, 134, 190, 210, 61, 104, 37, 225, 61, 132, 60, 54, 190, 173, 221, 113, 60, 152, 1, 18, 190, 169, 66, 138, 62, 213, 41, 182, 189, 5, 102, 221, 61, 202, 113, 229, 57, 29, 38, 214, 60, 231, 217, 223, 61, 171, 7, 92, 61, 162, 31, 89, 62, 82, 252, 31, 190, 232, 186, 95, 190, 198, 34, 25, 190, 235, 130, 169, 62, 57, 92, 228, 61, 189, 154, 136, 188, 90, 2, 74, 62, 101, 110, 32, 189, 202, 65, 246, 188, 43, 103, 38, 62, 10, 18, 25, 190, 89, 175, 74, 190, 222, 118, 162, 60, 107, 80, 85, 61, 15, 59, 230, 189, 177, 6, 179, 188, 47, 5, 58, 190, 110, 253, 36, 59, 103, 26, 100, 61, 161, 228, 207, 189, 18, 227, 246, 61, 202, 236, 31, 62, 28, 70, 171, 61, 211, 238, 56, 190, 104, 58, 161, 61, 247, 103, 12, 62, 253, 160, 137, 61, 36, 161, 125, 189, 124, 170, 100, 61, 14, 6, 169, 189, 147, 9, 73, 190, 151, 212, 221, 61, 2, 108, 5, 62, 40, 170, 238, 189, 15, 81, 139, 61, 48, 228, 178, 61, 148, 50, 86, 190, 126, 94, 149, 61, 156, 224, 148, 188, 88, 102, 3, 190, 73, 60, 24, 189, 229, 123, 224, 60, 152, 151, 196, 61, 63, 153, 56, 190, 31, 197, 27, 188, 118, 175, 37, 190, 157, 82, 238, 61, 105, 205, 147, 61, 136, 8, 235, 188, 35, 79, 75, 61, 241, 148, 43, 190, 11, 129, 148, 189, 208, 246, 172, 189, 51, 206, 9, 189, 97, 96, 15, 62, 138, 78, 215, 188, 190, 166, 199, 61, 60, 87, 176, 61, 112, 6, 53, 190, 9, 8, 72, 61, 150, 180, 190, 189, 8, 180, 55, 61, 232, 79, 46, 61, 49, 157, 39, 190, 1, 87, 14, 62, 242, 244, 150, 189, 159, 86, 181, 189, 227, 55, 231, 61, 199, 37, 15, 190, 195, 88, 209, 188, 80, 16, 165, 61, 105, 15, 234, 189, 9, 14, 6, 190, 199, 78, 43, 189, 162, 187, 171, 189, 118, 107, 7, 190, 0, 194, 116, 61, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 254, 10, 62, 162, 94, 36, 61, 162, 116, 129, 189, 32, 148, 113, 188, 180, 2, 20, 62, 40, 209, 107, 189, 50, 102, 9, 62, 25, 35, 19, 62, 130, 221, 77, 62, 251, 247, 155, 61, 169, 141, 97, 190, 196, 33, 68, 62, 176, 134, 38, 190, 151, 123, 165, 189, 251, 178, 17, 190, 102, 136, 15, 190, 62, 245, 0, 190, 196, 252, 214, 61, 157, 218, 193, 61, 33, 120, 37, 62, 164, 230, 159, 60, 105, 230, 173, 189, 67, 154, 70, 61, 139, 127, 31, 62, 66, 224, 197, 189, 83, 128, 36, 189, 14, 13, 33, 62, 32, 17, 20, 190, 15, 14, 129, 62, 0, 156, 110, 190, 22, 47, 147, 61, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 240, 161, 190, 156, 120, 223, 61, 81, 188, 56, 189, 242, 157, 21, 189, 171, 224, 8, 191, 239, 233, 48, 61, 234, 186, 102, 62, 221, 56, 230, 190, 211, 139, 114, 61, 200, 74, 85, 62, 46, 153, 120, 62, 152, 202, 51, 62, 159, 160, 193, 189, 12, 101, 68, 62, 145, 133, 123, 62, 137, 42, 68, 190, 46, 180, 56, 190, 101, 249, 50, 190, 151, 234, 11, 62, 233, 193, 177, 62, 119, 167, 40, 190, 155, 214, 28, 62, 190, 189, 253, 188, 58, 178, 116, 190, 125, 158, 43, 62, 47, 1, 97, 189, 43, 109, 147, 190, 205, 73, 22, 62, 193, 67, 10, 190, 17, 110, 99, 187, 111, 11, 31, 62, 84, 97, 17, 189, 111, 177, 55, 61, 85, 180, 211, 61, 128, 245, 159, 189, 33, 159, 75, 61, 104, 104, 40, 190, 21, 24, 40, 61, 250, 173, 78, 61, 168, 111, 155, 61, 33, 129, 224, 189, 159, 146, 9, 62, 69, 184, 149, 59, 196, 58, 91, 190, 101, 152, 30, 62, 102, 44, 46, 190, 102, 181, 209, 188, 8, 234, 34, 62, 220, 25, 234, 61, 242, 213, 28, 190, 37, 84, 113, 61, 80, 54, 42, 60, 12, 210, 46, 190, 162, 190, 147, 189, 176, 90, 24, 190, 16, 135, 130, 61, 247, 41, 227, 189, 249, 242, 179, 61, 61, 245, 64, 189, 168, 54, 227, 61, 173, 196, 235, 189, 101, 93, 74, 61, 118, 148, 15, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 95, 221, 61, 59, 243, 67, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 72, 96, 60, 91, 24, 138, 63, 67, 158, 50, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 147, 175, 191, 55, 251, 59, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}