// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 233, 139, 61, 95, 242, 229, 190, 221, 195, 178, 190, 128, 205, 19, 191, 24, 253, 22, 191, 24, 224, 33, 63, 143, 127, 19, 63, 13, 1, 148, 190, 36, 21, 177, 190, 181, 145, 13, 191, 110, 179, 184, 62, 106, 202, 17, 63, 52, 1, 182, 61, 14, 255, 7, 62, 217, 184, 171, 190, 180, 95, 182, 62, 70, 51, 142, 62, 215, 143, 32, 61, 197, 109, 200, 62, 182, 28, 62, 63, 201, 47, 231, 62, 23, 74, 71, 62, 123, 95, 98, 190, 39, 94, 55, 63, 140, 5, 109, 191, 161, 56, 240, 190, 190, 79, 5, 191, 97, 213, 210, 62, 211, 49, 250, 190, 247, 27, 207, 189, 30, 11, 85, 63, 39, 78, 93, 191, 220, 220, 100, 190, 178, 172, 10, 62, 108, 152, 69, 62, 28, 154, 79, 60, 43, 60, 220, 61, 59, 57, 83, 191, 85, 10, 28, 63, 140, 73, 181, 62, 157, 46, 127, 63, 183, 193, 134, 61, 23, 133, 184, 190, 32, 60, 28, 191, 188, 46, 106, 63, 46, 61, 43, 190, 114, 31, 49, 191, 32, 58, 117, 188, 5, 240, 114, 190, 207, 236, 97, 191, 140, 9, 3, 63, 111, 134, 107, 61, 134, 76, 25, 191, 148, 250, 50, 63, 175, 114, 158, 62, 5, 74, 68, 63, 67, 115, 42, 62, 23, 102, 137, 190, 65, 117, 35, 62, 145, 215, 140, 190, 78, 165, 27, 191, 204, 230, 63, 191, 16, 147, 176, 190, 89, 224, 57, 190, 79, 120, 166, 190, 98, 31, 253, 62, 167, 191, 155, 62, 147, 227, 88, 63, 215, 124, 191, 189, 156, 137, 216, 62, 131, 237, 243, 62, 82, 166, 254, 190, 2, 86, 151, 62, 208, 117, 49, 191, 49, 64, 80, 61, 57, 136, 39, 63, 217, 233, 105, 190, 126, 55, 173, 61, 68, 4, 215, 62, 152, 14, 229, 190, 218, 164, 167, 190, 229, 153, 23, 62, 242, 114, 17, 191, 21, 20, 52, 63, 125, 225, 80, 191, 43, 232, 94, 63, 95, 7, 56, 62, 67, 183, 35, 62, 51, 194, 110, 189, 254, 19, 163, 190, 125, 35, 153, 62, 206, 139, 81, 191, 238, 83, 166, 61, 67, 87, 195, 189, 204, 214, 38, 191, 218, 119, 216, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 44, 251, 190, 239, 68, 207, 190, 226, 88, 130, 189, 95, 56, 63, 190, 119, 51, 20, 63, 229, 170, 24, 63, 81, 213, 153, 190, 230, 188, 206, 62, 25, 195, 18, 63, 58, 96, 12, 190, 144, 238, 28, 62, 147, 43, 244, 62, 24, 56, 54, 62, 77, 49, 8, 190, 74, 164, 177, 189, 28, 248, 249, 62, 48, 91, 157, 190, 186, 192, 100, 62, 112, 252, 26, 62, 241, 225, 172, 190, 25, 120, 62, 63, 131, 132, 119, 58, 11, 108, 32, 63, 122, 97, 133, 62, 63, 6, 96, 62, 228, 148, 20, 190, 173, 118, 137, 62, 88, 25, 245, 189, 59, 181, 228, 61, 130, 219, 52, 190, 192, 159, 150, 62, 54, 55, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 124, 36, 190, 229, 102, 65, 191, 234, 144, 24, 190, 182, 167, 61, 190, 250, 241, 143, 62, 242, 235, 80, 62, 114, 174, 198, 62, 151, 90, 12, 62, 59, 118, 185, 61, 188, 93, 162, 190, 87, 70, 147, 190, 223, 140, 35, 62, 187, 140, 184, 190, 124, 174, 137, 62, 250, 162, 192, 190, 206, 28, 216, 61, 33, 140, 90, 187, 77, 90, 232, 190, 98, 140, 243, 61, 73, 81, 255, 189, 66, 195, 67, 189, 158, 101, 184, 190, 13, 254, 61, 62, 194, 144, 52, 190, 215, 152, 240, 61, 153, 237, 207, 61, 171, 173, 88, 187, 177, 99, 22, 62, 224, 69, 210, 189, 33, 23, 227, 189, 18, 202, 151, 189, 208, 113, 199, 61, 101, 130, 248, 61, 64, 98, 150, 61, 164, 81, 73, 62, 197, 240, 133, 62, 3, 221, 82, 190, 124, 11, 23, 59, 138, 87, 67, 190, 178, 171, 135, 61, 51, 6, 19, 190, 73, 14, 51, 62, 57, 149, 126, 62, 162, 47, 224, 61, 211, 164, 156, 62, 232, 208, 193, 190, 13, 175, 146, 61, 108, 85, 236, 61, 5, 252, 204, 190, 187, 221, 89, 62, 136, 150, 158, 60, 103, 191, 152, 59, 217, 78, 152, 60, 138, 230, 32, 62, 104, 42, 160, 59, 31, 173, 117, 61, 222, 60, 112, 62, 164, 189, 46, 62, 89, 19, 116, 190, 214, 101, 185, 190, 91, 242, 1, 62, 223, 99, 89, 60, 225, 182, 99, 62, 18, 14, 231, 188, 109, 140, 45, 60, 75, 140, 255, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 29, 199, 22, 190, 159, 189, 31, 62, 122, 171, 238, 189, 140, 167, 41, 190, 11, 180, 200, 188, 150, 9, 97, 188, 222, 182, 18, 189, 4, 212, 22, 62, 146, 114, 45, 61, 219, 198, 73, 186, 193, 70, 4, 62, 170, 189, 16, 190, 239, 198, 247, 189, 177, 154, 147, 61, 189, 119, 206, 60, 122, 96, 181, 61, 198, 157, 214, 189, 63, 23, 203, 189, 69, 49, 252, 188, 251, 13, 198, 189, 142, 56, 117, 61, 113, 7, 118, 60, 108, 17, 93, 61, 185, 51, 237, 189, 15, 27, 16, 61, 85, 214, 161, 189, 236, 199, 134, 61, 167, 191, 136, 61, 198, 166, 8, 191, 126, 69, 171, 189, 238, 86, 229, 189, 146, 238, 64, 62, 133, 68, 109, 61, 173, 190, 240, 61, 221, 29, 26, 191, 17, 108, 120, 62, 17, 56, 47, 190, 25, 77, 91, 190, 77, 225, 231, 61, 127, 111, 149, 190, 3, 191, 250, 189, 160, 195, 192, 190, 157, 239, 34, 62, 238, 12, 165, 61, 50, 24, 10, 191, 198, 34, 187, 61, 39, 62, 128, 61, 10, 135, 162, 61, 36, 98, 157, 190, 126, 240, 82, 190, 218, 96, 135, 190, 243, 101, 211, 189, 13, 221, 55, 60, 253, 22, 76, 189, 42, 85, 249, 61, 128, 111, 150, 188, 65, 29, 3, 188, 37, 129, 104, 190, 208, 170, 4, 62, 226, 213, 164, 190, 161, 206, 157, 191, 20, 36, 146, 190, 166, 29, 70, 190, 36, 203, 117, 61, 100, 198, 180, 61, 31, 114, 186, 61, 89, 4, 189, 190, 140, 27, 146, 62, 76, 203, 28, 190, 251, 111, 243, 189, 46, 243, 140, 62, 151, 108, 35, 191, 181, 140, 7, 189, 46, 58, 81, 191, 132, 253, 243, 61, 25, 88, 81, 190, 3, 37, 83, 191, 71, 25, 25, 189, 25, 29, 98, 189, 103, 235, 65, 62, 128, 249, 248, 190, 213, 213, 184, 62, 171, 82, 201, 189, 39, 153, 106, 190, 200, 64, 143, 61, 148, 111, 41, 189, 37, 90, 191, 59, 64, 135, 209, 189, 40, 198, 183, 190, 184, 147, 163, 190, 236, 248, 170, 189, 36, 11, 35, 62, 70, 134, 31, 189, 231, 85, 38, 190, 118, 109, 140, 59, 19, 172, 218, 185, 121, 112, 246, 61, 56, 69, 112, 188, 42, 165, 34, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 0, 180, 212, 189, 185, 13, 66, 189, 21, 246, 82, 189, 244, 2, 88, 61, 131, 96, 17, 189, 176, 140, 124, 61, 76, 168, 109, 187, 42, 234, 63, 189, 253, 32, 62, 61, 63, 14, 39, 190, 243, 62, 10, 62, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 108, 136, 33, 190, 59, 118, 51, 190, 176, 203, 110, 59, 61, 208, 210, 189, 90, 129, 199, 189, 179, 187, 50, 60, 216, 241, 185, 61, 225, 40, 153, 188, 11, 214, 53, 62, 40, 91, 38, 189, 203, 206, 62, 62, 22, 132, 217, 189, 143, 242, 138, 190, 4, 85, 52, 190, 241, 109, 246, 60, 219, 94, 238, 60, 41, 174, 22, 61, 195, 89, 132, 190, 19, 195, 41, 62, 215, 20, 163, 61, 26, 228, 241, 59, 157, 95, 113, 188, 55, 232, 17, 62, 235, 192, 188, 190, 243, 174, 252, 61, 59, 86, 97, 61, 183, 182, 10, 190, 87, 214, 95, 190, 136, 45, 34, 61, 254, 211, 160, 189, 151, 101, 124, 190, 82, 147, 63, 190, 125, 171, 52, 189, 27, 19, 211, 189, 53, 44, 5, 191, 96, 96, 65, 62, 241, 236, 167, 61, 82, 17, 70, 190, 216, 233, 47, 189, 151, 86, 202, 190, 161, 220, 68, 191, 156, 189, 96, 190, 69, 82, 215, 190, 234, 138, 141, 62, 165, 245, 3, 60, 237, 67, 120, 190, 243, 164, 74, 191, 131, 147, 143, 62, 153, 164, 7, 191, 41, 184, 137, 190, 86, 16, 39, 59, 28, 111, 36, 191, 14, 198, 26, 190, 10, 242, 119, 191, 33, 158, 34, 61, 151, 43, 163, 189, 14, 131, 43, 191, 252, 151, 27, 190, 120, 82, 122, 190, 155, 45, 11, 62, 61, 46, 152, 190, 2, 96, 142, 62, 250, 230, 148, 190, 206, 154, 233, 189, 169, 240, 198, 189, 24, 9, 132, 188, 48, 30, 124, 190, 162, 32, 157, 61, 79, 79, 200, 189, 151, 222, 148, 190, 201, 169, 56, 62, 230, 131, 60, 190, 126, 18, 42, 62, 67, 68, 181, 189, 63, 136, 142, 189, 23, 212, 31, 62, 247, 180, 170, 62, 254, 104, 37, 189, 149, 76, 180, 61, 31, 151, 222, 189, 8, 59, 2, 190, 178, 181, 87, 61, 164, 229, 240, 61, 94, 6, 149, 62, 50, 84, 143, 190, 250, 245, 230, 61, 26, 7, 128, 62, 204, 3, 202, 189, 142, 105, 94, 62, 197, 83, 146, 60, 216, 216, 218, 189, 177, 121, 186, 61, 238, 192, 180, 189, 42, 189, 4, 62, 234, 9, 193, 61, 137, 63, 32, 188, 118, 154, 100, 61, 138, 96, 31, 190, 1, 161, 142, 190, 205, 38, 192, 61, 216, 51, 164, 189, 69, 52, 42, 60, 62, 68, 213, 61, 6, 232, 58, 190, 129, 222, 123, 62, 53, 251, 71, 61, 159, 18, 67, 62, 198, 67, 188, 188, 250, 158, 164, 61, 183, 32, 51, 190, 122, 221, 153, 189, 173, 13, 102, 61, 116, 86, 101, 189, 158, 41, 92, 62, 94, 84, 117, 62, 18, 252, 29, 62, 143, 87, 200, 190, 98, 235, 32, 62, 96, 228, 188, 61, 1, 230, 165, 190, 139, 81, 121, 62, 217, 191, 27, 190, 154, 18, 38, 186, 169, 165, 100, 189, 152, 93, 83, 188, 31, 218, 205, 189, 142, 13, 134, 189, 225, 117, 181, 62, 33, 221, 38, 62, 202, 198, 136, 189, 214, 114, 215, 190, 176, 45, 67, 62, 254, 223, 78, 61, 220, 192, 69, 62, 108, 6, 29, 62, 188, 232, 1, 190, 177, 184, 111, 190, 209, 63, 110, 189, 22, 146, 156, 61, 252, 191, 178, 60, 247, 116, 8, 189, 90, 112, 51, 62, 61, 178, 209, 61, 60, 156, 206, 60, 241, 42, 173, 188, 65, 71, 173, 188, 44, 190, 224, 189, 25, 8, 150, 190, 17, 23, 137, 60, 215, 40, 195, 189, 29, 138, 85, 190, 178, 47, 49, 61, 221, 114, 67, 190, 98, 131, 45, 62, 8, 79, 51, 190, 165, 206, 167, 186, 77, 45, 99, 186, 45, 45, 158, 189, 177, 1, 128, 61, 43, 3, 64, 190, 240, 146, 64, 61, 24, 241, 3, 190, 207, 11, 188, 61, 221, 244, 23, 190, 59, 193, 53, 190, 166, 2, 134, 190, 99, 47, 210, 61, 200, 253, 150, 190, 126, 173, 155, 62, 255, 255, 174, 188, 149, 191, 13, 189, 122, 233, 242, 61, 10, 112, 154, 61, 17, 143, 192, 190, 153, 76, 40, 62, 19, 20, 216, 59, 223, 48, 216, 61, 5, 49, 244, 60, 113, 14, 154, 62, 114, 166, 150, 62, 141, 135, 73, 190, 232, 4, 189, 61, 11, 50, 89, 60, 91, 171, 189, 190, 235, 68, 81, 62, 219, 157, 228, 61, 28, 188, 120, 61, 19, 184, 76, 62, 130, 77, 12, 62, 204, 97, 152, 61, 233, 64, 177, 189, 200, 181, 159, 62, 112, 17, 55, 188, 8, 111, 213, 61, 177, 56, 78, 190, 186, 114, 35, 189, 63, 113, 7, 190, 47, 44, 236, 61, 77, 131, 33, 189, 251, 7, 20, 62, 38, 83, 162, 62, 30, 231, 172, 57, 114, 235, 97, 61, 85, 147, 143, 189, 184, 70, 94, 190, 237, 137, 110, 62, 217, 228, 76, 62, 57, 145, 86, 190, 169, 219, 132, 62, 250, 20, 232, 187, 19, 107, 200, 189, 124, 9, 195, 62, 234, 52, 107, 62, 102, 172, 127, 60, 180, 53, 53, 190, 235, 74, 109, 62, 67, 21, 141, 62, 215, 74, 106, 59, 9, 127, 182, 189, 65, 161, 4, 62, 68, 65, 23, 62, 186, 2, 237, 60, 132, 67, 127, 62, 105, 41, 114, 62, 65, 57, 22, 190, 147, 89, 39, 62, 115, 143, 111, 62, 203, 213, 129, 61, 161, 174, 102, 62, 133, 37, 57, 189, 55, 25, 247, 60, 109, 214, 31, 189, 36, 20, 124, 62, 79, 127, 138, 187, 100, 19, 107, 62, 207, 61, 25, 190, 46, 154, 181, 61, 144, 248, 170, 189, 20, 182, 55, 62, 236, 187, 204, 189, 232, 3, 17, 62, 92, 85, 104, 62, 255, 64, 8, 189, 85, 51, 119, 62, 160, 32, 138, 190, 193, 228, 77, 62, 51, 246, 221, 61, 29, 121, 145, 190, 56, 217, 90, 62, 93, 42, 188, 60, 181, 5, 35, 61, 21, 87, 17, 189, 74, 139, 155, 188, 42, 93, 119, 190, 132, 161, 154, 60, 127, 198, 21, 61, 229, 222, 175, 62, 33, 71, 92, 61, 157, 180, 226, 189, 94, 190, 80, 62, 23, 113, 146, 60, 35, 229, 160, 62, 1, 255, 50, 62, 44, 224, 21, 190, 199, 115, 233, 189, 158, 207, 176, 61, 42, 76, 166, 189, 41, 160, 126, 61, 84, 46, 229, 61, 79, 111, 147, 189, 73, 174, 225, 190, 116, 65, 15, 60, 106, 232, 108, 62, 57, 147, 246, 61, 172, 18, 26, 62, 206, 115, 192, 190, 47, 191, 145, 62, 176, 166, 211, 190, 231, 162, 168, 188, 197, 171, 59, 190, 225, 204, 233, 190, 78, 237, 25, 188, 4, 174, 252, 61, 88, 94, 86, 189, 211, 218, 221, 188, 33, 94, 49, 62, 164, 104, 186, 61, 233, 134, 161, 189, 183, 162, 215, 61, 33, 132, 94, 62, 163, 116, 244, 59, 119, 166, 206, 61, 158, 70, 185, 189, 127, 107, 106, 61, 136, 240, 216, 60, 156, 244, 107, 62, 246, 86, 161, 190, 8, 77, 203, 61, 89, 46, 231, 61, 27, 166, 13, 62, 170, 45, 84, 189, 40, 40, 132, 62, 180, 169, 96, 189, 74, 56, 186, 60, 169, 143, 136, 62, 237, 215, 76, 61, 232, 254, 20, 62, 8, 150, 43, 189, 212, 111, 72, 62, 35, 144, 218, 61, 117, 238, 141, 190, 193, 90, 187, 61, 45, 27, 215, 61, 221, 116, 136, 62, 191, 68, 242, 61, 24, 177, 34, 190, 124, 22, 188, 190, 100, 10, 18, 62, 122, 72, 58, 62, 198, 189, 250, 189, 10, 0, 188, 61, 26, 85, 56, 62, 35, 130, 59, 62, 113, 220, 129, 188, 109, 80, 184, 62, 219, 211, 132, 190, 131, 231, 198, 190, 79, 214, 187, 189, 66, 94, 164, 189, 92, 201, 190, 61, 232, 241, 183, 190, 74, 189, 234, 189, 42, 239, 135, 60, 105, 49, 102, 62, 191, 8, 72, 62, 91, 240, 175, 189, 20, 59, 148, 60, 233, 199, 42, 190, 191, 107, 10, 61, 73, 176, 87, 190, 93, 34, 173, 62, 0, 174, 171, 190, 105, 167, 102, 190, 209, 146, 149, 190, 57, 23, 60, 62, 238, 66, 119, 62, 51, 136, 200, 189, 175, 101, 111, 61, 11, 198, 218, 189, 253, 229, 128, 62, 53, 243, 229, 61, 167, 1, 76, 190, 103, 95, 9, 62, 126, 184, 110, 188, 199, 121, 97, 61, 184, 86, 211, 190, 80, 69, 211, 61, 225, 91, 6, 189, 125, 137, 80, 190, 130, 40, 161, 60, 250, 161, 20, 190, 53, 225, 12, 62, 62, 187, 64, 61, 115, 184, 162, 62, 71, 219, 63, 189, 123, 3, 194, 61, 1, 151, 55, 61, 37, 66, 108, 190, 205, 218, 242, 190, 28, 51, 76, 190, 212, 193, 71, 62, 126, 225, 117, 189, 151, 140, 157, 61, 70, 34, 242, 188, 33, 200, 128, 190, 82, 85, 17, 189, 213, 174, 91, 190, 1, 84, 110, 62, 107, 125, 71, 61, 110, 203, 114, 190, 206, 113, 140, 190, 246, 206, 117, 62, 86, 32, 116, 62, 30, 100, 196, 189, 248, 225, 30, 62, 8, 169, 194, 61, 177, 196, 2, 190, 6, 126, 195, 189, 181, 231, 30, 61, 73, 88, 211, 60, 223, 9, 226, 190, 173, 155, 45, 190, 208, 211, 214, 62, 185, 134, 65, 62, 162, 75, 158, 60, 174, 168, 154, 190, 36, 172, 130, 62, 62, 164, 170, 190, 208, 229, 221, 60, 105, 9, 147, 189, 175, 219, 119, 62, 170, 128, 160, 62, 213, 208, 210, 189, 173, 94, 246, 62, 28, 236, 7, 191, 216, 168, 155, 61, 155, 177, 139, 60, 5, 217, 172, 190, 95, 55, 113, 62, 103, 223, 196, 61, 130, 254, 0, 190, 111, 32, 183, 189, 79, 246, 78, 62, 112, 2, 29, 189, 96, 160, 185, 189, 37, 164, 100, 62, 216, 81, 65, 62, 81, 222, 75, 60, 154, 143, 142, 190, 200, 117, 91, 62, 26, 116, 41, 62, 215, 17, 179, 62, 42, 156, 14, 62, 190, 123, 154, 190, 74, 57, 2, 63, 206, 24, 32, 62, 246, 160, 130, 62, 33, 179, 54, 188, 141, 241, 173, 62, 159, 126, 15, 191, 241, 115, 233, 60, 249, 194, 101, 190, 9, 11, 253, 189, 240, 185, 125, 188, 201, 114, 166, 61, 106, 131, 184, 62, 216, 3, 48, 191, 169, 119, 200, 61, 36, 195, 34, 62, 138, 207, 8, 191, 47, 31, 9, 63, 152, 50, 59, 190, 218, 177, 87, 190, 200, 169, 16, 190, 70, 95, 183, 61, 30, 115, 159, 189, 132, 210, 18, 61, 22, 129, 200, 61, 56, 131, 149, 62, 139, 214, 19, 60, 6, 51, 181, 190, 14, 9, 77, 62, 169, 181, 57, 60, 8, 13, 97, 62, 163, 38, 201, 189, 168, 133, 211, 60, 117, 58, 82, 62, 18, 206, 0, 62, 199, 208, 91, 189, 166, 226, 28, 190, 17, 146, 95, 62, 212, 14, 147, 61, 23, 110, 184, 61, 65, 173, 38, 59, 150, 37, 106, 60, 153, 151, 54, 190, 142, 49, 205, 61, 47, 77, 2, 62, 145, 173, 40, 190, 78, 141, 64, 62, 193, 84, 198, 61, 79, 96, 214, 61, 65, 214, 174, 62, 95, 172, 91, 62, 206, 153, 28, 188, 93, 20, 62, 190, 124, 104, 71, 62, 211, 43, 208, 189, 157, 104, 41, 62, 64, 239, 90, 61, 200, 36, 229, 187, 124, 192, 3, 190, 21, 94, 166, 61, 35, 128, 53, 190, 215, 71, 67, 190, 23, 43, 44, 62, 203, 63, 71, 187, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 196, 16, 76, 61, 145, 190, 145, 190, 64, 74, 40, 62, 220, 191, 171, 188, 51, 23, 83, 62, 149, 206, 170, 61, 241, 46, 25, 62, 28, 39, 76, 189, 132, 189, 66, 189, 225, 157, 142, 190, 251, 76, 245, 189, 96, 51, 100, 188, 142, 232, 8, 190, 74, 126, 212, 187, 100, 25, 222, 189, 112, 44, 224, 189, 212, 15, 105, 61, 186, 62, 173, 189, 96, 77, 30, 62, 116, 138, 191, 61, 219, 205, 217, 61, 136, 64, 179, 190, 94, 251, 35, 62, 145, 198, 172, 61, 137, 194, 176, 61, 225, 218, 97, 62, 135, 80, 163, 187, 88, 142, 166, 61, 116, 166, 208, 189, 201, 200, 15, 62, 244, 54, 12, 62, 255, 168, 43, 186, 230, 174, 36, 189, 242, 212, 253, 60, 125, 128, 16, 62, 140, 218, 114, 62, 217, 128, 220, 61, 222, 128, 6, 62, 236, 23, 93, 62, 142, 64, 7, 61, 46, 149, 83, 190, 62, 78, 227, 190, 225, 184, 88, 190, 167, 241, 45, 62, 53, 130, 139, 62, 77, 229, 63, 61, 244, 201, 41, 61, 179, 105, 47, 190, 38, 40, 238, 61, 248, 187, 15, 62, 168, 36, 247, 61, 34, 125, 112, 189, 154, 249, 79, 190, 22, 44, 145, 189, 227, 159, 0, 61, 162, 232, 143, 62, 148, 239, 102, 58, 172, 12, 114, 190, 108, 160, 41, 190, 2, 52, 77, 62, 255, 162, 168, 61, 160, 115, 128, 187, 145, 145, 3, 62, 9, 250, 157, 189, 29, 184, 63, 190, 28, 145, 59, 62, 185, 152, 40, 62, 96, 66, 82, 58, 182, 233, 142, 61, 88, 245, 118, 62, 98, 59, 89, 60, 245, 21, 59, 62, 247, 194, 197, 60, 206, 109, 98, 61, 247, 80, 139, 61, 237, 199, 143, 62, 21, 122, 186, 58, 38, 244, 158, 60, 51, 79, 59, 62, 164, 223, 101, 62, 89, 95, 153, 187, 242, 16, 209, 61, 198, 145, 10, 61, 232, 86, 234, 61, 80, 203, 69, 189, 163, 34, 176, 187, 253, 225, 197, 189, 231, 125, 197, 61, 0, 1, 93, 62, 189, 83, 248, 61, 56, 64, 4, 62, 224, 15, 123, 188, 228, 11, 60, 62, 155, 63, 186, 57, 144, 178, 66, 62, 103, 185, 162, 188, 0, 249, 13, 62, 32, 45, 192, 189, 76, 37, 30, 189, 139, 144, 241, 189, 28, 253, 21, 62, 42, 180, 154, 190, 74, 235, 207, 188, 68, 159, 120, 61, 131, 228, 51, 61, 52, 247, 248, 189, 92, 251, 30, 190, 104, 38, 105, 190, 12, 164, 255, 61, 10, 227, 2, 190, 170, 251, 41, 62, 138, 37, 151, 188, 208, 224, 190, 62, 16, 65, 61, 189, 65, 178, 248, 60, 151, 5, 79, 190, 192, 52, 7, 62, 188, 222, 124, 61, 6, 116, 4, 190, 18, 216, 55, 190, 197, 143, 172, 61, 249, 88, 113, 190, 230, 82, 76, 189, 106, 234, 23, 61, 23, 67, 215, 188, 66, 104, 96, 61, 138, 212, 17, 59, 220, 39, 56, 189, 175, 0, 11, 60, 143, 67, 67, 62, 93, 179, 225, 188, 11, 163, 217, 61, 2, 176, 186, 189, 97, 207, 43, 61, 170, 200, 37, 188, 247, 125, 31, 62, 170, 241, 63, 190, 91, 168, 80, 190, 232, 5, 139, 189, 202, 29, 55, 59, 197, 109, 58, 62, 102, 138, 0, 189, 113, 167, 4, 189, 26, 139, 73, 190, 207, 241, 48, 62, 152, 61, 91, 62, 3, 201, 179, 61, 5, 217, 135, 189, 174, 64, 150, 189, 130, 132, 180, 60, 249, 161, 45, 62, 152, 137, 88, 61, 81, 226, 128, 62, 162, 144, 74, 190, 66, 0, 50, 61, 82, 118, 240, 61, 8, 132, 240, 188, 151, 171, 82, 190, 156, 250, 119, 189, 48, 115, 245, 189, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 51, 57, 5, 61, 28, 222, 225, 190, 95, 26, 241, 189, 218, 10, 76, 190, 237, 70, 172, 61, 12, 118, 158, 188, 142, 110, 246, 61, 195, 134, 103, 61, 7, 95, 18, 190, 225, 242, 70, 190, 200, 12, 56, 190, 168, 66, 135, 62, 78, 176, 128, 190, 26, 193, 4, 62, 71, 100, 21, 190, 186, 117, 170, 188, 136, 50, 69, 61, 127, 186, 147, 189, 22, 165, 92, 62, 167, 198, 84, 190, 243, 160, 79, 190, 166, 34, 196, 190, 240, 78, 174, 62, 8, 150, 218, 61, 150, 36, 1, 190, 242, 25, 139, 62, 177, 187, 153, 189, 166, 189, 21, 189, 154, 65, 146, 61, 160, 13, 244, 189, 178, 151, 149, 190, 252, 66, 88, 189, 250, 178, 67, 188, 125, 46, 106, 61, 45, 19, 64, 190, 223, 189, 65, 190, 57, 58, 48, 62, 87, 168, 24, 62, 86, 182, 11, 189, 5, 177, 180, 60, 76, 66, 34, 62, 163, 150, 118, 61, 126, 234, 204, 190, 246, 67, 42, 62, 223, 228, 214, 189, 89, 79, 139, 62, 120, 243, 195, 189, 249, 252, 167, 189, 249, 184, 28, 190, 122, 211, 220, 190, 102, 5, 128, 62, 68, 174, 70, 62, 61, 47, 35, 190, 186, 97, 39, 62, 97, 66, 109, 62, 240, 217, 200, 189, 13, 148, 63, 190, 35, 175, 144, 190, 45, 131, 42, 190, 178, 143, 115, 190, 187, 178, 94, 62, 138, 102, 52, 187, 138, 144, 3, 191, 4, 4, 173, 189, 118, 175, 37, 190, 157, 82, 238, 61, 105, 205, 147, 61, 136, 8, 235, 188, 35, 79, 75, 61, 241, 148, 43, 190, 11, 129, 148, 189, 208, 246, 172, 189, 51, 206, 9, 189, 97, 96, 15, 62, 138, 78, 215, 188, 190, 166, 199, 61, 60, 87, 176, 61, 112, 6, 53, 190, 9, 8, 72, 61, 150, 180, 190, 189, 8, 180, 55, 61, 232, 79, 46, 61, 49, 157, 39, 190, 1, 87, 14, 62, 242, 244, 150, 189, 159, 86, 181, 189, 227, 55, 231, 61, 199, 37, 15, 190, 195, 88, 209, 188, 80, 16, 165, 61, 105, 15, 234, 189, 9, 14, 6, 190, 199, 78, 43, 189, 162, 187, 171, 189, 118, 107, 7, 190, 0, 194, 116, 61, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 161, 18, 62, 65, 11, 132, 61, 162, 116, 129, 189, 63, 106, 163, 61, 196, 123, 39, 62, 55, 192, 123, 189, 221, 132, 38, 62, 73, 92, 78, 62, 23, 132, 146, 62, 189, 188, 19, 62, 58, 76, 124, 190, 211, 13, 145, 62, 169, 224, 78, 190, 119, 159, 131, 189, 228, 57, 0, 190, 23, 17, 66, 190, 184, 33, 108, 189, 187, 217, 155, 61, 247, 120, 246, 61, 130, 243, 103, 62, 32, 190, 44, 61, 105, 230, 173, 189, 226, 64, 173, 61, 130, 228, 18, 62, 137, 99, 145, 188, 127, 33, 133, 189, 115, 98, 241, 61, 91, 146, 27, 190, 38, 120, 121, 62, 101, 70, 59, 190, 22, 47, 147, 61, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 8, 14, 191, 180, 53, 80, 62, 81, 188, 56, 189, 109, 181, 172, 190, 46, 40, 88, 191, 148, 36, 40, 61, 165, 130, 203, 62, 81, 62, 86, 191, 7, 63, 0, 62, 227, 12, 133, 62, 53, 185, 113, 62, 85, 92, 105, 62, 163, 16, 57, 190, 34, 182, 129, 62, 6, 137, 145, 62, 99, 32, 147, 190, 72, 153, 239, 190, 51, 26, 118, 190, 139, 228, 81, 62, 245, 87, 254, 62, 5, 191, 109, 190, 155, 214, 28, 62, 53, 214, 1, 190, 80, 51, 116, 190, 230, 220, 58, 62, 164, 205, 223, 189, 175, 17, 151, 190, 218, 31, 21, 62, 213, 29, 70, 190, 51, 14, 201, 62, 111, 11, 31, 62, 84, 97, 17, 189, 247, 189, 184, 61, 195, 221, 219, 61, 128, 245, 159, 189, 99, 145, 104, 61, 52, 166, 33, 190, 50, 129, 46, 61, 213, 138, 126, 61, 113, 15, 237, 61, 160, 210, 238, 189, 176, 111, 197, 61, 175, 170, 137, 59, 160, 9, 116, 190, 89, 164, 97, 62, 209, 215, 21, 190, 210, 245, 131, 189, 112, 22, 72, 62, 195, 206, 92, 61, 188, 252, 1, 190, 230, 17, 84, 61, 14, 176, 137, 187, 199, 47, 252, 189, 162, 190, 147, 189, 146, 40, 12, 190, 191, 105, 145, 61, 54, 214, 201, 189, 82, 139, 78, 189, 175, 43, 16, 189, 108, 163, 228, 61, 213, 145, 225, 189, 214, 249, 21, 62, 118, 148, 15, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 128, 60, 62, 211, 100, 126, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 194, 110, 62, 52, 56, 41, 63, 69, 112, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 201, 242, 191, 172, 84, 41, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}