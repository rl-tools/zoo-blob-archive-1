// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 37, 72, 62, 216, 177, 187, 191, 32, 225, 157, 190, 251, 224, 227, 190, 18, 103, 210, 60, 164, 120, 33, 63, 96, 72, 37, 63, 203, 176, 200, 190, 12, 44, 144, 190, 19, 232, 194, 190, 66, 171, 247, 63, 23, 128, 174, 62, 182, 186, 136, 190, 219, 101, 168, 190, 224, 8, 230, 190, 48, 142, 2, 61, 85, 193, 24, 63, 168, 173, 120, 59, 231, 149, 45, 63, 234, 126, 105, 63, 178, 243, 218, 62, 221, 177, 152, 62, 252, 252, 198, 63, 215, 23, 195, 62, 35, 15, 143, 191, 124, 219, 89, 191, 60, 57, 232, 190, 254, 166, 51, 63, 157, 211, 162, 190, 67, 193, 71, 190, 14, 8, 10, 63, 176, 220, 180, 191, 154, 23, 142, 190, 130, 189, 193, 190, 238, 98, 100, 62, 10, 14, 73, 189, 178, 98, 91, 62, 158, 91, 151, 190, 73, 176, 12, 63, 243, 166, 234, 62, 176, 138, 136, 63, 168, 184, 127, 62, 9, 2, 204, 190, 53, 133, 232, 61, 92, 238, 87, 63, 150, 46, 157, 190, 142, 58, 140, 191, 125, 108, 97, 190, 54, 155, 169, 190, 146, 168, 101, 191, 139, 151, 222, 62, 68, 74, 214, 62, 225, 10, 106, 190, 157, 134, 47, 63, 70, 183, 148, 62, 108, 112, 147, 63, 91, 193, 100, 62, 35, 139, 60, 190, 82, 203, 134, 191, 205, 76, 181, 190, 32, 220, 22, 191, 40, 246, 198, 191, 75, 110, 145, 190, 20, 222, 177, 190, 228, 173, 67, 63, 63, 255, 208, 62, 126, 96, 68, 62, 225, 99, 125, 63, 120, 43, 89, 190, 211, 234, 120, 189, 207, 216, 73, 63, 125, 26, 210, 190, 16, 30, 79, 62, 163, 177, 92, 191, 115, 4, 182, 189, 237, 104, 37, 63, 244, 82, 40, 61, 180, 78, 28, 188, 65, 157, 101, 62, 244, 103, 163, 191, 167, 158, 95, 190, 116, 177, 155, 62, 201, 90, 232, 190, 211, 167, 54, 63, 78, 161, 156, 191, 11, 241, 125, 63, 101, 38, 154, 62, 155, 149, 136, 62, 242, 15, 4, 191, 205, 125, 172, 190, 125, 207, 173, 62, 76, 191, 88, 191, 104, 116, 91, 190, 133, 24, 136, 190, 166, 40, 20, 191, 13, 167, 184, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 229, 155, 190, 21, 108, 3, 191, 98, 12, 205, 190, 238, 0, 134, 190, 105, 4, 171, 62, 248, 132, 242, 62, 201, 17, 10, 191, 6, 1, 157, 62, 230, 254, 107, 63, 254, 57, 3, 191, 193, 228, 51, 62, 12, 68, 187, 62, 39, 254, 148, 190, 11, 254, 240, 189, 54, 0, 43, 189, 255, 117, 229, 62, 118, 63, 211, 190, 199, 179, 250, 59, 131, 96, 224, 61, 34, 34, 61, 190, 174, 158, 36, 63, 53, 152, 176, 188, 158, 119, 10, 63, 16, 30, 145, 62, 76, 14, 243, 188, 12, 176, 136, 190, 24, 25, 18, 62, 255, 196, 141, 189, 80, 50, 180, 62, 6, 64, 88, 190, 37, 61, 142, 62, 131, 230, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 28, 2, 190, 141, 198, 83, 190, 32, 89, 106, 190, 112, 29, 180, 191, 53, 110, 171, 62, 75, 8, 11, 62, 230, 209, 176, 62, 162, 140, 235, 188, 11, 81, 140, 62, 170, 15, 61, 191, 68, 1, 7, 191, 31, 8, 148, 61, 156, 121, 84, 189, 101, 64, 137, 62, 196, 119, 27, 190, 240, 205, 193, 59, 230, 85, 251, 62, 57, 81, 65, 190, 43, 80, 143, 61, 80, 254, 115, 62, 241, 208, 35, 190, 159, 151, 175, 190, 13, 227, 78, 62, 32, 68, 8, 189, 67, 22, 227, 189, 106, 228, 57, 62, 132, 162, 188, 190, 208, 175, 124, 62, 65, 205, 140, 190, 206, 119, 151, 61, 74, 248, 16, 190, 218, 182, 140, 61, 117, 233, 47, 190, 174, 116, 128, 61, 197, 64, 46, 61, 164, 80, 251, 62, 231, 46, 218, 190, 148, 12, 158, 189, 176, 175, 16, 191, 165, 104, 74, 189, 71, 81, 63, 191, 178, 142, 193, 61, 193, 143, 102, 62, 197, 163, 28, 62, 73, 87, 130, 62, 8, 188, 47, 191, 96, 34, 200, 61, 181, 167, 187, 62, 254, 2, 193, 190, 218, 46, 43, 62, 186, 109, 130, 190, 206, 47, 131, 191, 122, 202, 126, 62, 27, 231, 92, 62, 72, 63, 82, 190, 7, 152, 64, 190, 179, 169, 173, 62, 120, 206, 100, 189, 145, 248, 51, 190, 104, 245, 188, 190, 61, 47, 214, 62, 83, 253, 197, 190, 226, 20, 168, 62, 193, 1, 159, 59, 120, 122, 45, 60, 150, 58, 250, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 194, 35, 23, 190, 215, 146, 31, 62, 144, 27, 240, 189, 246, 78, 42, 190, 11, 180, 200, 188, 198, 246, 120, 188, 99, 197, 21, 189, 190, 179, 17, 62, 146, 114, 45, 61, 122, 15, 210, 187, 174, 241, 1, 62, 251, 55, 21, 190, 97, 221, 1, 190, 177, 154, 147, 61, 189, 119, 206, 60, 21, 185, 174, 61, 149, 177, 216, 189, 63, 23, 203, 189, 69, 49, 252, 188, 221, 223, 200, 189, 192, 10, 117, 61, 80, 125, 100, 60, 7, 0, 68, 61, 185, 51, 237, 189, 15, 27, 16, 61, 146, 48, 165, 189, 7, 74, 129, 61, 41, 193, 192, 62, 154, 95, 127, 61, 171, 38, 31, 62, 44, 208, 178, 191, 128, 81, 103, 62, 222, 205, 108, 190, 57, 81, 188, 190, 106, 33, 203, 191, 254, 132, 160, 62, 39, 81, 133, 190, 124, 187, 115, 61, 13, 88, 36, 60, 124, 18, 84, 190, 115, 180, 153, 190, 13, 14, 159, 190, 82, 7, 218, 62, 237, 238, 28, 63, 142, 132, 8, 191, 241, 140, 104, 191, 212, 41, 52, 62, 119, 166, 160, 62, 33, 157, 162, 190, 86, 211, 229, 190, 42, 220, 162, 190, 179, 57, 170, 62, 148, 117, 165, 189, 136, 124, 73, 62, 215, 176, 73, 189, 98, 129, 62, 190, 231, 131, 28, 62, 164, 235, 209, 61, 97, 171, 246, 62, 92, 91, 174, 190, 243, 224, 80, 191, 131, 44, 219, 190, 214, 123, 151, 191, 29, 29, 182, 59, 15, 207, 188, 61, 242, 198, 190, 188, 43, 228, 97, 191, 153, 244, 141, 62, 140, 105, 131, 191, 31, 106, 214, 189, 188, 39, 143, 62, 144, 100, 171, 190, 130, 156, 178, 62, 242, 101, 237, 190, 100, 124, 109, 62, 8, 134, 172, 62, 233, 12, 89, 190, 42, 51, 167, 62, 197, 8, 250, 189, 101, 202, 137, 62, 254, 170, 114, 191, 32, 192, 126, 62, 25, 238, 2, 190, 146, 245, 219, 61, 246, 12, 196, 187, 151, 36, 138, 189, 2, 251, 221, 62, 82, 158, 178, 190, 4, 81, 213, 190, 163, 123, 33, 190, 12, 191, 90, 62, 36, 11, 35, 62, 82, 201, 144, 189, 231, 85, 38, 190, 228, 102, 200, 187, 19, 172, 218, 185, 99, 204, 243, 61, 13, 237, 227, 188, 84, 216, 56, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 6, 146, 217, 189, 60, 13, 162, 189, 4, 175, 105, 189, 72, 250, 171, 60, 135, 149, 22, 189, 107, 35, 245, 60, 158, 232, 16, 189, 88, 96, 95, 189, 253, 32, 62, 61, 192, 119, 39, 190, 155, 209, 229, 61, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 12, 198, 33, 190, 59, 118, 51, 190, 239, 46, 230, 188, 204, 53, 233, 189, 90, 129, 199, 189, 179, 187, 50, 60, 125, 122, 158, 61, 48, 53, 87, 189, 16, 145, 73, 188, 13, 166, 228, 189, 126, 238, 104, 62, 48, 217, 3, 190, 99, 136, 173, 190, 121, 64, 47, 190, 157, 98, 96, 189, 107, 161, 138, 61, 209, 66, 243, 60, 23, 46, 137, 190, 12, 77, 43, 62, 4, 46, 172, 190, 7, 60, 7, 190, 65, 124, 10, 59, 90, 53, 0, 61, 171, 127, 59, 191, 207, 150, 128, 189, 246, 74, 148, 190, 170, 206, 55, 191, 90, 2, 162, 190, 149, 235, 4, 62, 103, 17, 210, 189, 190, 51, 96, 190, 183, 98, 72, 190, 24, 87, 64, 190, 200, 57, 148, 190, 165, 192, 79, 191, 42, 222, 162, 62, 134, 80, 80, 189, 136, 29, 114, 190, 83, 35, 47, 190, 166, 69, 236, 190, 112, 232, 196, 190, 161, 78, 198, 190, 227, 183, 189, 191, 95, 225, 124, 62, 121, 105, 110, 189, 84, 174, 146, 190, 219, 179, 221, 191, 181, 108, 158, 62, 79, 52, 204, 191, 27, 186, 206, 190, 32, 163, 131, 187, 145, 217, 238, 190, 70, 33, 135, 189, 123, 244, 46, 191, 36, 186, 255, 61, 193, 3, 35, 63, 75, 175, 140, 190, 173, 255, 140, 189, 94, 37, 109, 190, 118, 239, 61, 62, 218, 125, 198, 190, 130, 210, 26, 62, 254, 8, 143, 190, 195, 19, 16, 190, 187, 136, 168, 189, 148, 227, 17, 190, 196, 78, 26, 190, 59, 142, 121, 189, 10, 213, 170, 189, 142, 177, 164, 190, 204, 70, 94, 62, 123, 137, 34, 191, 125, 99, 184, 61, 186, 41, 251, 189, 77, 68, 176, 60, 83, 171, 30, 62, 54, 61, 195, 62, 129, 163, 28, 190, 56, 55, 185, 60, 114, 110, 182, 190, 106, 81, 253, 60, 208, 67, 236, 61, 148, 29, 34, 62, 47, 75, 132, 62, 215, 234, 151, 190, 42, 81, 232, 61, 192, 135, 200, 62, 104, 46, 239, 189, 186, 125, 76, 62, 239, 53, 177, 189, 191, 106, 22, 191, 198, 243, 64, 62, 82, 240, 23, 190, 99, 187, 20, 62, 113, 224, 146, 61, 177, 49, 69, 189, 163, 135, 12, 62, 60, 194, 149, 189, 174, 3, 132, 190, 203, 198, 237, 61, 220, 63, 115, 190, 158, 115, 140, 61, 130, 55, 216, 61, 38, 99, 160, 190, 6, 32, 42, 62, 213, 51, 159, 61, 238, 143, 11, 63, 183, 238, 171, 61, 191, 110, 212, 61, 191, 199, 56, 191, 17, 26, 74, 190, 24, 116, 155, 189, 176, 91, 70, 62, 172, 41, 138, 62, 98, 253, 188, 62, 142, 38, 228, 61, 234, 119, 93, 191, 114, 207, 231, 61, 33, 185, 74, 62, 157, 175, 58, 190, 35, 202, 70, 62, 100, 47, 250, 190, 206, 211, 245, 189, 138, 187, 248, 59, 60, 103, 40, 190, 233, 114, 108, 61, 17, 198, 169, 61, 147, 62, 187, 62, 150, 148, 247, 61, 35, 162, 131, 61, 121, 201, 217, 190, 238, 81, 160, 62, 181, 173, 42, 61, 120, 6, 173, 62, 51, 0, 120, 62, 72, 140, 168, 190, 12, 114, 199, 189, 26, 57, 186, 191, 121, 52, 124, 190, 147, 153, 219, 62, 250, 80, 75, 61, 123, 55, 160, 62, 55, 232, 214, 59, 93, 92, 189, 62, 140, 120, 148, 191, 100, 154, 116, 191, 113, 17, 48, 189, 112, 55, 87, 189, 53, 189, 30, 189, 239, 231, 4, 190, 252, 58, 63, 191, 162, 35, 122, 62, 76, 127, 151, 187, 54, 198, 23, 62, 178, 144, 204, 190, 70, 185, 143, 190, 113, 56, 217, 190, 173, 233, 73, 61, 194, 175, 201, 62, 39, 21, 28, 191, 114, 19, 74, 63, 124, 160, 105, 191, 170, 48, 142, 62, 175, 31, 24, 191, 171, 13, 36, 191, 202, 253, 181, 191, 201, 153, 46, 61, 33, 197, 0, 191, 179, 48, 113, 62, 145, 18, 161, 188, 193, 226, 135, 61, 233, 176, 21, 62, 131, 124, 233, 61, 161, 97, 236, 190, 248, 109, 1, 62, 161, 15, 22, 190, 61, 187, 132, 62, 9, 101, 255, 60, 152, 36, 170, 62, 244, 168, 143, 62, 7, 0, 52, 190, 42, 190, 217, 61, 149, 201, 129, 61, 181, 193, 193, 190, 75, 148, 81, 62, 76, 146, 49, 61, 215, 195, 153, 188, 158, 219, 100, 62, 48, 43, 191, 61, 168, 120, 28, 62, 216, 25, 66, 189, 8, 136, 94, 62, 208, 212, 41, 61, 26, 57, 1, 62, 196, 145, 40, 190, 235, 92, 171, 187, 233, 72, 69, 190, 198, 63, 191, 61, 105, 243, 208, 189, 1, 35, 172, 62, 49, 41, 165, 62, 220, 1, 11, 62, 215, 139, 163, 189, 26, 236, 252, 189, 65, 182, 199, 190, 11, 229, 61, 62, 199, 58, 254, 61, 80, 117, 190, 189, 90, 29, 3, 63, 113, 190, 97, 188, 31, 98, 136, 190, 142, 44, 155, 62, 209, 181, 122, 61, 183, 118, 9, 189, 205, 35, 219, 190, 6, 85, 54, 62, 65, 36, 68, 62, 47, 169, 210, 189, 206, 179, 124, 189, 180, 119, 179, 189, 156, 230, 236, 61, 176, 225, 212, 189, 164, 36, 64, 62, 118, 216, 28, 62, 79, 178, 67, 190, 56, 44, 188, 61, 16, 68, 3, 62, 246, 74, 147, 61, 105, 107, 178, 62, 196, 67, 231, 189, 231, 83, 245, 188, 220, 30, 32, 191, 123, 176, 101, 62, 136, 106, 218, 58, 92, 166, 121, 62, 42, 102, 41, 190, 241, 138, 28, 62, 104, 50, 52, 190, 117, 175, 16, 62, 16, 59, 49, 191, 194, 64, 114, 62, 246, 146, 140, 62, 129, 28, 127, 189, 88, 87, 76, 62, 253, 171, 93, 190, 171, 4, 102, 62, 25, 1, 144, 62, 221, 83, 144, 190, 129, 187, 82, 62, 28, 100, 204, 188, 185, 16, 82, 191, 4, 164, 238, 61, 136, 49, 24, 189, 13, 108, 75, 190, 99, 210, 173, 60, 164, 16, 248, 59, 106, 123, 218, 62, 250, 247, 247, 61, 202, 89, 169, 189, 32, 24, 118, 62, 31, 38, 173, 190, 222, 65, 204, 62, 130, 9, 23, 62, 188, 243, 160, 190, 40, 9, 58, 190, 137, 228, 130, 61, 85, 147, 10, 62, 111, 95, 42, 62, 16, 180, 23, 62, 84, 97, 204, 190, 102, 187, 41, 191, 125, 61, 137, 60, 49, 69, 237, 62, 99, 205, 112, 61, 112, 206, 138, 62, 226, 122, 42, 191, 29, 12, 203, 188, 146, 151, 178, 190, 192, 152, 108, 189, 153, 200, 195, 61, 19, 222, 71, 191, 115, 118, 136, 190, 59, 31, 154, 61, 19, 144, 155, 189, 157, 71, 1, 191, 212, 25, 148, 62, 252, 92, 22, 62, 99, 154, 152, 190, 33, 141, 52, 61, 114, 201, 58, 62, 205, 13, 23, 190, 193, 12, 147, 62, 198, 154, 8, 190, 103, 81, 168, 189, 230, 187, 85, 190, 231, 207, 122, 190, 185, 158, 159, 190, 206, 131, 7, 61, 120, 10, 151, 190, 224, 131, 244, 61, 161, 8, 151, 189, 243, 62, 0, 63, 31, 174, 157, 189, 59, 96, 235, 187, 196, 162, 249, 61, 175, 147, 207, 189, 22, 146, 236, 189, 12, 34, 35, 62, 59, 53, 52, 62, 67, 31, 3, 62, 117, 245, 77, 191, 242, 62, 14, 62, 136, 174, 127, 62, 218, 45, 128, 62, 190, 173, 146, 189, 188, 57, 63, 191, 157, 207, 223, 190, 176, 50, 46, 62, 225, 128, 63, 62, 187, 85, 144, 189, 253, 113, 133, 62, 165, 186, 18, 190, 174, 98, 172, 62, 45, 169, 2, 191, 64, 39, 218, 62, 180, 145, 37, 190, 66, 182, 189, 190, 172, 84, 173, 191, 38, 119, 196, 190, 117, 147, 73, 190, 106, 19, 28, 191, 153, 160, 96, 190, 119, 153, 44, 62, 200, 248, 181, 62, 231, 172, 202, 62, 65, 190, 19, 62, 154, 12, 169, 190, 74, 233, 214, 190, 155, 226, 47, 62, 253, 44, 176, 61, 136, 110, 223, 62, 31, 253, 190, 190, 123, 230, 185, 190, 182, 184, 19, 190, 60, 117, 213, 62, 153, 91, 196, 62, 132, 156, 7, 190, 149, 110, 158, 190, 220, 61, 14, 190, 187, 124, 187, 62, 2, 229, 12, 62, 33, 103, 233, 189, 239, 152, 218, 61, 218, 1, 195, 190, 153, 25, 93, 62, 162, 8, 10, 191, 28, 240, 20, 190, 174, 81, 160, 60, 38, 205, 9, 62, 116, 80, 104, 62, 34, 188, 14, 191, 140, 156, 245, 61, 29, 61, 23, 61, 181, 60, 142, 62, 122, 108, 142, 189, 246, 16, 180, 62, 227, 21, 102, 62, 138, 143, 156, 189, 237, 153, 48, 191, 46, 116, 187, 189, 196, 168, 49, 62, 53, 22, 160, 62, 231, 182, 131, 62, 139, 56, 165, 189, 90, 34, 77, 61, 233, 112, 221, 190, 133, 70, 166, 189, 30, 123, 183, 62, 87, 61, 86, 62, 54, 242, 5, 189, 110, 161, 107, 190, 32, 108, 139, 61, 104, 63, 24, 62, 205, 55, 177, 62, 13, 54, 72, 62, 179, 135, 118, 62, 190, 225, 14, 189, 105, 54, 69, 190, 2, 131, 139, 61, 75, 142, 162, 62, 25, 147, 117, 62, 117, 46, 245, 190, 27, 84, 220, 62, 224, 77, 121, 62, 49, 144, 62, 62, 92, 111, 183, 190, 8, 7, 117, 62, 111, 16, 3, 191, 208, 15, 25, 189, 226, 111, 88, 191, 8, 69, 160, 62, 219, 164, 182, 62, 207, 156, 39, 190, 120, 15, 204, 62, 248, 118, 22, 191, 69, 132, 213, 61, 151, 206, 233, 61, 39, 158, 169, 190, 196, 112, 71, 62, 126, 180, 2, 189, 169, 22, 157, 191, 157, 82, 76, 60, 1, 170, 124, 62, 30, 84, 55, 189, 109, 112, 128, 189, 247, 232, 57, 62, 204, 154, 7, 62, 192, 241, 230, 61, 82, 177, 144, 190, 23, 26, 202, 62, 14, 9, 47, 61, 184, 106, 196, 62, 9, 186, 15, 60, 134, 39, 221, 190, 73, 124, 8, 63, 22, 233, 152, 62, 152, 83, 220, 62, 207, 81, 174, 61, 172, 73, 188, 62, 38, 157, 59, 191, 247, 131, 17, 189, 31, 39, 2, 191, 187, 99, 221, 61, 156, 134, 184, 61, 61, 173, 249, 61, 146, 175, 167, 62, 54, 66, 67, 191, 235, 18, 34, 62, 203, 75, 63, 62, 106, 18, 250, 190, 163, 193, 11, 63, 197, 115, 175, 190, 54, 109, 11, 191, 219, 5, 10, 190, 118, 158, 213, 61, 213, 168, 144, 60, 20, 86, 116, 62, 250, 150, 161, 187, 194, 148, 131, 62, 192, 130, 255, 61, 41, 69, 156, 190, 51, 9, 199, 62, 51, 136, 57, 62, 248, 17, 107, 62, 76, 207, 72, 190, 45, 195, 252, 191, 223, 74, 195, 61, 6, 1, 12, 62, 103, 149, 104, 190, 101, 111, 241, 189, 159, 155, 188, 62, 78, 60, 57, 62, 173, 99, 224, 61, 16, 206, 232, 62, 170, 172, 50, 62, 113, 242, 64, 190, 48, 189, 71, 62, 38, 136, 55, 62, 241, 15, 16, 190, 6, 52, 237, 61, 19, 218, 180, 190, 246, 186, 223, 60, 68, 121, 180, 62, 238, 74, 155, 62, 241, 159, 49, 190, 147, 57, 46, 191, 38, 229, 12, 62, 104, 210, 12, 62, 198, 91, 119, 62, 1, 87, 153, 189, 52, 58, 57, 60, 140, 222, 163, 190, 111, 164, 90, 61, 244, 206, 177, 190, 173, 153, 207, 190, 213, 92, 178, 61, 152, 70, 73, 187, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 205, 173, 139, 61, 51, 161, 136, 190, 241, 123, 236, 61, 234, 79, 219, 190, 16, 226, 191, 61, 167, 126, 179, 61, 67, 92, 196, 62, 164, 56, 7, 188, 205, 92, 160, 60, 34, 247, 8, 191, 178, 163, 53, 190, 206, 196, 207, 189, 127, 221, 243, 61, 48, 11, 131, 61, 183, 16, 82, 189, 219, 5, 5, 190, 127, 5, 32, 62, 225, 157, 192, 61, 65, 79, 89, 62, 150, 160, 41, 62, 119, 27, 31, 61, 95, 35, 170, 190, 208, 168, 57, 61, 60, 138, 96, 189, 87, 20, 214, 62, 73, 158, 204, 62, 17, 60, 19, 190, 194, 200, 60, 62, 203, 16, 187, 190, 180, 253, 4, 62, 90, 9, 157, 62, 204, 7, 121, 62, 26, 86, 248, 190, 64, 210, 85, 188, 140, 77, 88, 189, 247, 150, 242, 61, 27, 34, 239, 61, 105, 199, 117, 62, 71, 69, 60, 62, 141, 61, 56, 60, 205, 94, 95, 62, 11, 235, 59, 191, 31, 156, 24, 191, 2, 149, 141, 62, 242, 19, 124, 62, 109, 90, 48, 60, 190, 55, 5, 189, 75, 166, 39, 191, 202, 73, 163, 61, 143, 216, 172, 61, 221, 125, 65, 62, 104, 74, 0, 189, 177, 44, 43, 191, 251, 71, 194, 189, 151, 81, 149, 62, 77, 108, 221, 62, 49, 241, 207, 190, 237, 72, 205, 190, 244, 36, 62, 191, 29, 14, 1, 62, 181, 197, 144, 61, 64, 68, 195, 189, 65, 142, 251, 189, 81, 79, 216, 189, 85, 158, 197, 190, 189, 82, 2, 62, 168, 70, 18, 62, 103, 207, 240, 61, 60, 115, 198, 61, 206, 9, 116, 62, 13, 148, 243, 189, 1, 225, 245, 61, 206, 250, 12, 190, 215, 147, 79, 62, 39, 248, 66, 61, 102, 66, 149, 62, 73, 228, 81, 189, 76, 102, 237, 187, 82, 176, 58, 62, 241, 91, 138, 62, 197, 137, 129, 188, 236, 211, 140, 61, 212, 134, 147, 189, 199, 165, 116, 60, 13, 195, 190, 188, 149, 7, 88, 189, 232, 113, 130, 189, 10, 132, 254, 61, 22, 21, 170, 61, 30, 178, 8, 62, 200, 173, 23, 62, 38, 170, 39, 188, 136, 61, 103, 62, 244, 183, 141, 189, 198, 64, 22, 62, 64, 51, 247, 189, 26, 64, 136, 189, 213, 14, 176, 188, 37, 61, 67, 189, 95, 93, 115, 190, 34, 240, 26, 62, 1, 211, 226, 190, 165, 52, 154, 188, 142, 35, 251, 188, 28, 135, 219, 62, 33, 22, 157, 189, 191, 226, 29, 191, 125, 65, 132, 190, 235, 118, 51, 62, 163, 252, 141, 190, 224, 247, 65, 62, 107, 3, 163, 190, 129, 231, 223, 62, 141, 135, 221, 188, 87, 85, 131, 189, 255, 80, 3, 191, 114, 178, 201, 189, 12, 169, 145, 61, 94, 70, 145, 190, 161, 125, 157, 190, 138, 116, 125, 189, 72, 228, 141, 190, 224, 9, 122, 191, 126, 224, 41, 61, 167, 63, 19, 60, 201, 22, 140, 60, 192, 125, 163, 190, 44, 46, 168, 61, 222, 113, 190, 191, 33, 247, 232, 61, 42, 218, 242, 189, 136, 133, 150, 188, 175, 244, 27, 190, 254, 153, 83, 62, 187, 155, 197, 61, 87, 205, 82, 62, 161, 83, 138, 62, 200, 146, 76, 190, 192, 110, 244, 189, 31, 181, 239, 61, 248, 54, 124, 62, 206, 127, 190, 187, 181, 227, 183, 189, 78, 228, 49, 191, 226, 2, 0, 62, 195, 116, 126, 62, 169, 252, 74, 62, 227, 236, 180, 190, 65, 253, 50, 191, 152, 83, 58, 188, 84, 147, 207, 62, 215, 100, 224, 61, 242, 169, 24, 62, 44, 10, 50, 190, 247, 85, 53, 190, 26, 140, 235, 61, 102, 54, 188, 189, 212, 219, 248, 190, 247, 95, 52, 190, 51, 195, 244, 189, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 61, 67, 172, 191, 255, 72, 10, 191, 124, 239, 91, 190, 159, 64, 43, 191, 134, 66, 0, 62, 4, 170, 125, 61, 254, 26, 78, 62, 125, 246, 184, 61, 162, 112, 36, 61, 218, 152, 208, 190, 20, 255, 157, 190, 232, 218, 185, 62, 88, 140, 178, 62, 161, 188, 44, 62, 60, 172, 38, 190, 75, 79, 177, 188, 206, 114, 31, 190, 236, 162, 48, 62, 232, 45, 125, 62, 45, 172, 203, 186, 24, 183, 134, 190, 43, 124, 251, 190, 152, 253, 160, 62, 189, 252, 20, 62, 101, 85, 38, 189, 134, 23, 221, 62, 10, 156, 159, 190, 152, 113, 18, 62, 55, 163, 37, 62, 43, 228, 25, 190, 55, 228, 103, 190, 185, 198, 68, 62, 255, 195, 133, 62, 234, 237, 201, 190, 179, 41, 44, 189, 235, 217, 141, 62, 218, 27, 185, 62, 138, 227, 160, 188, 184, 223, 248, 190, 194, 90, 144, 190, 91, 133, 201, 62, 143, 89, 34, 63, 214, 203, 32, 190, 240, 115, 124, 62, 121, 206, 6, 191, 243, 160, 210, 190, 183, 41, 41, 190, 217, 177, 219, 61, 254, 87, 6, 190, 86, 76, 87, 191, 226, 84, 188, 190, 8, 255, 197, 62, 128, 226, 47, 61, 233, 80, 251, 60, 142, 24, 132, 62, 174, 230, 242, 187, 41, 233, 177, 190, 160, 200, 105, 191, 165, 35, 173, 61, 249, 174, 71, 191, 83, 172, 2, 63, 129, 72, 33, 62, 206, 209, 44, 191, 247, 231, 66, 61, 210, 148, 164, 190, 247, 122, 197, 61, 140, 34, 11, 190, 79, 116, 52, 190, 109, 92, 172, 190, 76, 64, 42, 189, 72, 236, 227, 190, 72, 40, 118, 190, 223, 86, 143, 190, 145, 172, 32, 62, 192, 110, 24, 62, 175, 233, 76, 62, 72, 174, 17, 62, 43, 233, 100, 191, 94, 36, 163, 61, 205, 22, 253, 61, 207, 2, 6, 62, 106, 130, 214, 61, 222, 164, 40, 191, 7, 25, 121, 190, 212, 82, 56, 62, 80, 82, 54, 190, 81, 4, 205, 61, 122, 21, 55, 190, 237, 100, 172, 60, 193, 66, 250, 60, 109, 27, 25, 62, 211, 176, 115, 189, 244, 98, 25, 189, 53, 230, 12, 191, 84, 205, 14, 60, 136, 109, 47, 62, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 56, 164, 61, 20, 105, 207, 61, 40, 189, 134, 189, 147, 114, 241, 61, 233, 245, 141, 62, 90, 241, 144, 189, 73, 1, 7, 62, 232, 31, 98, 62, 70, 215, 195, 62, 239, 53, 132, 62, 138, 28, 110, 190, 220, 245, 177, 62, 243, 255, 212, 190, 71, 56, 159, 61, 224, 92, 149, 189, 72, 205, 169, 190, 38, 78, 86, 61, 138, 92, 221, 61, 90, 175, 41, 62, 117, 7, 137, 62, 203, 77, 165, 61, 105, 230, 173, 189, 89, 119, 195, 61, 6, 77, 19, 62, 66, 201, 114, 59, 103, 33, 18, 190, 70, 145, 63, 62, 91, 146, 27, 190, 147, 51, 151, 62, 136, 175, 125, 190, 226, 149, 105, 62, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 89, 119, 191, 28, 41, 136, 63, 229, 185, 56, 189, 252, 247, 74, 191, 11, 91, 150, 191, 56, 157, 37, 61, 144, 52, 102, 63, 112, 107, 179, 191, 111, 63, 27, 62, 51, 98, 217, 62, 189, 54, 241, 63, 46, 45, 18, 62, 109, 51, 212, 189, 51, 140, 156, 62, 84, 55, 226, 62, 13, 188, 95, 191, 194, 120, 116, 191, 120, 137, 48, 190, 22, 249, 164, 62, 65, 78, 34, 63, 206, 128, 142, 190, 155, 214, 28, 62, 84, 71, 246, 189, 123, 166, 159, 190, 10, 116, 199, 61, 17, 249, 148, 190, 194, 248, 186, 190, 218, 31, 21, 62, 30, 9, 136, 190, 31, 59, 52, 63, 75, 3, 26, 63, 84, 97, 17, 189, 236, 137, 82, 62, 100, 109, 189, 62, 186, 239, 159, 189, 251, 78, 139, 61, 30, 218, 60, 189, 1, 174, 45, 61, 2, 177, 131, 190, 93, 209, 99, 62, 16, 82, 115, 190, 48, 239, 197, 61, 191, 207, 177, 62, 195, 177, 150, 190, 241, 77, 146, 62, 84, 16, 28, 190, 218, 56, 64, 190, 188, 199, 209, 62, 138, 16, 7, 190, 35, 192, 23, 190, 105, 119, 177, 61, 210, 154, 9, 61, 194, 92, 129, 190, 162, 190, 147, 189, 52, 112, 144, 190, 146, 100, 112, 62, 92, 108, 6, 190, 175, 213, 15, 189, 146, 39, 21, 190, 108, 163, 228, 61, 57, 25, 221, 190, 182, 164, 185, 60, 111, 225, 176, 60, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 42, 125, 62, 56, 117, 224, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {56, 218, 24, 190, 161, 137, 153, 63, 215, 37, 133, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {184, 79, 70, 190, 176, 43, 188, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}