// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 28, 134, 62, 224, 182, 155, 191, 197, 72, 171, 190, 208, 191, 224, 190, 80, 223, 53, 61, 80, 249, 22, 63, 35, 119, 37, 63, 125, 188, 231, 190, 50, 2, 113, 190, 54, 144, 149, 190, 33, 99, 223, 63, 24, 140, 198, 62, 150, 51, 124, 189, 26, 24, 31, 190, 191, 194, 216, 190, 228, 4, 55, 62, 124, 144, 1, 63, 96, 52, 25, 187, 138, 50, 63, 63, 62, 151, 93, 63, 76, 158, 184, 62, 209, 147, 150, 62, 35, 7, 191, 63, 93, 10, 216, 62, 235, 186, 141, 191, 37, 242, 73, 191, 171, 38, 216, 190, 181, 213, 40, 63, 205, 35, 147, 190, 0, 202, 72, 190, 187, 92, 15, 63, 236, 108, 166, 191, 133, 107, 174, 190, 6, 152, 17, 190, 67, 60, 14, 62, 35, 101, 131, 60, 187, 202, 112, 62, 172, 63, 250, 190, 95, 230, 14, 63, 215, 169, 223, 62, 240, 124, 128, 63, 35, 74, 112, 62, 48, 129, 148, 190, 238, 107, 40, 61, 61, 32, 100, 63, 209, 204, 155, 190, 127, 236, 129, 191, 108, 47, 74, 190, 187, 193, 223, 190, 205, 144, 84, 191, 47, 200, 241, 62, 179, 178, 140, 62, 160, 143, 157, 190, 240, 35, 49, 63, 168, 130, 145, 62, 181, 65, 139, 63, 29, 94, 105, 62, 128, 37, 156, 190, 243, 17, 28, 191, 239, 247, 151, 190, 228, 138, 5, 191, 168, 247, 183, 191, 17, 196, 148, 190, 55, 119, 107, 190, 95, 4, 61, 63, 15, 127, 206, 62, 167, 122, 96, 62, 13, 110, 109, 63, 12, 34, 108, 190, 42, 110, 221, 61, 129, 114, 27, 63, 60, 62, 183, 190, 32, 26, 109, 62, 58, 178, 78, 191, 1, 161, 244, 189, 95, 55, 45, 63, 44, 153, 134, 61, 51, 237, 21, 61, 175, 95, 120, 62, 42, 142, 146, 191, 119, 150, 145, 190, 76, 67, 145, 62, 33, 115, 239, 190, 252, 103, 51, 63, 217, 33, 138, 191, 222, 239, 109, 63, 206, 218, 143, 62, 16, 81, 127, 62, 85, 93, 176, 190, 1, 61, 188, 190, 190, 123, 184, 62, 160, 156, 92, 191, 27, 61, 78, 190, 167, 151, 144, 190, 70, 144, 244, 190, 176, 110, 199, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 46, 132, 190, 31, 35, 26, 191, 151, 135, 192, 190, 11, 229, 112, 190, 195, 134, 211, 62, 25, 182, 18, 63, 153, 199, 231, 190, 224, 15, 168, 62, 177, 165, 88, 63, 137, 33, 251, 190, 193, 202, 70, 62, 85, 153, 227, 62, 200, 89, 106, 190, 252, 50, 208, 189, 205, 207, 187, 60, 73, 26, 242, 62, 188, 238, 206, 190, 185, 112, 230, 57, 122, 65, 15, 62, 111, 232, 139, 190, 34, 122, 56, 63, 139, 156, 12, 189, 197, 211, 20, 63, 70, 118, 218, 62, 74, 61, 137, 60, 211, 53, 120, 190, 133, 51, 20, 62, 121, 120, 134, 189, 219, 5, 108, 62, 40, 47, 77, 190, 215, 97, 140, 62, 53, 120, 147, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 211, 41, 190, 183, 44, 98, 190, 118, 33, 166, 190, 162, 160, 101, 191, 54, 228, 163, 62, 239, 159, 39, 62, 1, 42, 180, 62, 105, 63, 73, 61, 80, 77, 135, 62, 165, 244, 74, 191, 21, 235, 19, 191, 245, 173, 12, 62, 3, 105, 41, 189, 62, 124, 105, 62, 16, 203, 24, 190, 133, 198, 224, 188, 213, 199, 1, 63, 3, 196, 48, 190, 237, 81, 214, 61, 106, 145, 56, 62, 132, 127, 56, 190, 19, 47, 190, 190, 73, 77, 93, 62, 201, 206, 250, 188, 57, 223, 3, 189, 163, 248, 98, 188, 72, 249, 188, 190, 220, 126, 135, 62, 106, 205, 25, 190, 26, 223, 181, 59, 37, 132, 105, 190, 48, 38, 218, 61, 175, 240, 125, 190, 71, 215, 223, 60, 165, 119, 125, 188, 99, 131, 209, 62, 183, 70, 204, 190, 230, 39, 200, 188, 83, 2, 227, 190, 120, 70, 43, 61, 151, 130, 245, 190, 144, 107, 170, 60, 175, 183, 113, 62, 169, 26, 38, 62, 120, 196, 142, 62, 188, 66, 16, 191, 224, 59, 182, 61, 53, 180, 176, 62, 177, 145, 196, 190, 80, 0, 69, 62, 131, 17, 24, 190, 112, 64, 26, 191, 92, 120, 95, 62, 86, 0, 49, 62, 231, 110, 19, 190, 27, 139, 218, 189, 206, 203, 176, 62, 227, 238, 182, 60, 152, 207, 63, 190, 88, 26, 186, 190, 86, 95, 172, 62, 143, 16, 186, 190, 213, 248, 177, 62, 20, 180, 11, 61, 109, 140, 45, 60, 39, 145, 252, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 90, 17, 23, 190, 159, 189, 31, 62, 246, 129, 239, 189, 246, 78, 42, 190, 11, 180, 200, 188, 48, 103, 112, 188, 197, 15, 21, 189, 44, 182, 19, 62, 146, 114, 45, 61, 164, 167, 118, 187, 227, 155, 2, 62, 130, 104, 19, 190, 143, 160, 254, 189, 177, 154, 147, 61, 189, 119, 206, 60, 156, 188, 176, 61, 194, 210, 215, 189, 63, 23, 203, 189, 69, 49, 252, 188, 126, 5, 200, 189, 142, 56, 117, 61, 207, 52, 107, 60, 56, 48, 79, 61, 185, 51, 237, 189, 15, 27, 16, 61, 3, 14, 164, 189, 73, 83, 131, 61, 57, 20, 128, 62, 240, 168, 220, 60, 209, 115, 9, 62, 77, 238, 184, 191, 3, 246, 112, 62, 176, 167, 10, 190, 115, 49, 3, 191, 199, 93, 179, 191, 77, 152, 145, 62, 167, 26, 125, 190, 114, 7, 130, 189, 74, 105, 70, 61, 44, 250, 116, 189, 233, 194, 114, 190, 27, 127, 70, 190, 229, 62, 167, 62, 242, 99, 27, 63, 132, 149, 168, 190, 48, 123, 56, 191, 182, 200, 245, 61, 206, 89, 91, 62, 217, 60, 154, 190, 66, 56, 185, 190, 99, 254, 126, 190, 37, 193, 19, 62, 38, 156, 83, 62, 212, 200, 142, 61, 36, 124, 226, 61, 162, 203, 87, 190, 112, 41, 27, 62, 127, 80, 186, 188, 26, 110, 113, 62, 212, 85, 186, 190, 74, 195, 48, 191, 17, 169, 196, 190, 253, 8, 121, 191, 13, 225, 85, 60, 57, 40, 173, 61, 140, 80, 213, 59, 165, 235, 57, 191, 88, 214, 139, 62, 255, 69, 101, 191, 251, 186, 1, 190, 129, 84, 142, 62, 23, 175, 3, 191, 94, 81, 149, 62, 212, 187, 0, 191, 84, 135, 69, 62, 132, 6, 190, 61, 253, 239, 203, 190, 13, 250, 145, 62, 83, 238, 240, 189, 33, 104, 107, 62, 74, 171, 100, 191, 113, 120, 127, 62, 79, 104, 5, 190, 170, 57, 190, 60, 131, 135, 48, 62, 60, 144, 197, 189, 47, 144, 98, 62, 252, 146, 127, 190, 242, 134, 210, 190, 74, 235, 84, 190, 137, 69, 120, 61, 36, 11, 35, 62, 82, 201, 144, 189, 231, 85, 38, 190, 228, 102, 200, 187, 19, 172, 218, 185, 99, 204, 243, 61, 13, 237, 227, 188, 84, 216, 56, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 6, 146, 217, 189, 60, 13, 162, 189, 4, 175, 105, 189, 72, 250, 171, 60, 135, 149, 22, 189, 107, 35, 245, 60, 158, 232, 16, 189, 88, 96, 95, 189, 253, 32, 62, 61, 192, 119, 39, 190, 155, 209, 229, 61, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 12, 198, 33, 190, 59, 118, 51, 190, 239, 46, 230, 188, 204, 53, 233, 189, 90, 129, 199, 189, 179, 187, 50, 60, 125, 122, 158, 61, 48, 53, 87, 189, 49, 82, 37, 61, 13, 166, 228, 189, 51, 133, 106, 62, 121, 203, 31, 190, 70, 31, 170, 190, 241, 104, 28, 190, 223, 210, 62, 189, 239, 45, 64, 188, 209, 66, 243, 60, 23, 46, 137, 190, 230, 27, 35, 62, 61, 1, 96, 190, 213, 62, 224, 189, 33, 177, 84, 60, 95, 223, 203, 61, 178, 88, 10, 191, 95, 88, 18, 189, 152, 176, 143, 190, 168, 19, 53, 191, 200, 136, 125, 190, 173, 138, 3, 62, 253, 9, 193, 189, 32, 38, 91, 190, 183, 98, 72, 190, 216, 217, 54, 190, 83, 203, 145, 190, 35, 190, 64, 191, 128, 159, 157, 62, 134, 80, 80, 189, 181, 238, 109, 190, 82, 77, 202, 188, 156, 15, 203, 190, 61, 73, 151, 190, 255, 133, 147, 190, 212, 104, 203, 191, 133, 255, 142, 62, 183, 254, 151, 189, 84, 174, 146, 190, 231, 221, 220, 191, 236, 16, 170, 62, 12, 124, 180, 191, 18, 162, 174, 190, 49, 158, 120, 188, 62, 251, 243, 190, 151, 61, 156, 189, 189, 242, 20, 191, 209, 59, 23, 62, 248, 37, 34, 63, 199, 254, 151, 190, 18, 63, 30, 190, 252, 209, 56, 190, 154, 136, 86, 62, 199, 2, 178, 190, 203, 130, 40, 62, 161, 22, 135, 190, 125, 105, 214, 189, 109, 15, 187, 189, 214, 230, 159, 189, 200, 126, 77, 190, 44, 17, 225, 189, 191, 130, 36, 189, 13, 66, 146, 190, 28, 30, 131, 62, 127, 254, 254, 190, 192, 239, 251, 61, 140, 255, 169, 189, 138, 143, 11, 189, 44, 5, 10, 62, 167, 204, 185, 62, 116, 15, 155, 189, 129, 78, 88, 61, 9, 171, 172, 190, 108, 206, 105, 61, 174, 218, 251, 61, 144, 56, 0, 62, 195, 172, 145, 62, 64, 99, 130, 190, 93, 60, 3, 62, 107, 228, 220, 62, 57, 97, 216, 189, 98, 19, 96, 62, 127, 165, 104, 189, 228, 222, 211, 190, 206, 36, 97, 62, 50, 80, 224, 189, 8, 223, 147, 61, 117, 98, 200, 59, 169, 51, 136, 60, 77, 196, 232, 61, 203, 36, 110, 189, 16, 27, 129, 190, 54, 210, 200, 61, 4, 171, 60, 190, 116, 37, 170, 61, 222, 238, 5, 62, 66, 235, 130, 190, 70, 222, 93, 62, 115, 34, 229, 61, 250, 200, 122, 62, 57, 237, 129, 61, 179, 83, 167, 61, 79, 102, 23, 191, 147, 227, 61, 190, 101, 60, 134, 189, 228, 145, 81, 62, 84, 119, 153, 62, 164, 120, 153, 62, 242, 35, 44, 62, 255, 148, 82, 191, 53, 99, 35, 62, 53, 72, 128, 62, 96, 19, 38, 190, 4, 135, 101, 62, 186, 203, 244, 190, 97, 212, 143, 189, 133, 248, 91, 61, 84, 23, 176, 189, 180, 196, 67, 188, 72, 43, 163, 60, 56, 113, 227, 62, 143, 2, 192, 61, 124, 76, 210, 61, 4, 149, 206, 190, 246, 38, 83, 62, 56, 8, 181, 61, 215, 39, 191, 62, 20, 217, 170, 62, 95, 255, 152, 190, 71, 215, 218, 189, 24, 122, 98, 191, 242, 151, 33, 190, 65, 42, 173, 62, 151, 191, 153, 61, 79, 12, 200, 62, 15, 238, 19, 62, 95, 23, 84, 62, 70, 141, 63, 191, 38, 238, 46, 191, 235, 101, 186, 189, 36, 171, 129, 189, 106, 72, 33, 62, 224, 253, 3, 190, 198, 91, 2, 191, 20, 57, 118, 62, 58, 223, 244, 188, 182, 45, 130, 62, 186, 24, 186, 61, 29, 28, 170, 189, 170, 202, 20, 190, 212, 52, 54, 61, 221, 239, 180, 62, 149, 253, 6, 191, 81, 195, 42, 63, 72, 230, 75, 191, 93, 175, 132, 62, 85, 212, 19, 191, 44, 163, 181, 190, 196, 237, 90, 191, 8, 137, 112, 61, 192, 66, 224, 190, 137, 142, 140, 62, 79, 54, 130, 188, 225, 148, 40, 60, 194, 208, 13, 62, 140, 179, 206, 61, 48, 150, 201, 190, 37, 101, 21, 62, 96, 148, 228, 189, 0, 141, 106, 62, 42, 156, 21, 61, 199, 182, 159, 62, 106, 45, 154, 62, 203, 151, 22, 190, 218, 220, 246, 61, 97, 94, 214, 61, 47, 105, 187, 190, 231, 199, 96, 62, 143, 1, 122, 61, 131, 103, 128, 61, 14, 25, 134, 62, 161, 135, 4, 62, 127, 179, 181, 61, 75, 216, 201, 189, 120, 222, 134, 62, 193, 253, 161, 60, 81, 242, 15, 62, 243, 108, 38, 190, 5, 125, 170, 188, 222, 95, 34, 190, 123, 244, 216, 61, 105, 127, 64, 189, 3, 255, 194, 62, 205, 59, 153, 62, 130, 234, 43, 62, 99, 110, 237, 188, 240, 92, 231, 189, 115, 176, 194, 190, 158, 132, 53, 62, 35, 38, 9, 62, 140, 246, 205, 189, 138, 250, 12, 63, 251, 113, 186, 59, 206, 187, 115, 190, 9, 149, 152, 62, 184, 254, 152, 61, 236, 123, 30, 189, 93, 86, 191, 190, 78, 73, 60, 62, 124, 41, 69, 62, 212, 45, 171, 189, 2, 252, 91, 189, 54, 141, 1, 189, 211, 169, 231, 61, 94, 90, 159, 187, 40, 159, 102, 62, 47, 190, 99, 62, 208, 178, 123, 190, 22, 131, 2, 62, 218, 125, 11, 62, 168, 150, 72, 61, 245, 15, 186, 62, 52, 13, 172, 189, 229, 186, 57, 189, 198, 226, 246, 190, 60, 180, 96, 62, 141, 168, 129, 189, 63, 179, 163, 62, 49, 206, 238, 189, 154, 155, 23, 62, 207, 47, 226, 189, 67, 0, 67, 62, 159, 141, 160, 190, 42, 23, 28, 62, 16, 104, 120, 62, 80, 4, 66, 61, 4, 58, 106, 62, 169, 115, 53, 190, 32, 98, 104, 62, 94, 209, 170, 62, 34, 79, 147, 190, 52, 12, 95, 62, 60, 183, 59, 60, 146, 14, 114, 190, 171, 200, 55, 62, 193, 141, 134, 188, 60, 202, 125, 190, 5, 242, 181, 59, 5, 150, 88, 61, 122, 218, 185, 62, 238, 156, 243, 61, 24, 69, 169, 189, 83, 162, 150, 62, 188, 117, 132, 190, 202, 94, 185, 62, 194, 84, 58, 62, 153, 222, 147, 190, 11, 92, 41, 190, 52, 3, 19, 62, 192, 22, 47, 187, 78, 239, 19, 62, 184, 112, 63, 62, 124, 241, 155, 190, 162, 81, 23, 191, 114, 172, 5, 187, 255, 39, 6, 63, 98, 209, 3, 62, 134, 18, 108, 62, 58, 217, 41, 191, 112, 193, 207, 61, 140, 180, 193, 190, 127, 217, 211, 57, 30, 180, 109, 61, 34, 18, 64, 191, 58, 226, 57, 190, 228, 10, 150, 61, 120, 166, 3, 189, 145, 67, 146, 189, 123, 44, 143, 62, 120, 205, 250, 61, 41, 250, 79, 190, 181, 128, 194, 61, 252, 167, 117, 62, 200, 213, 26, 190, 75, 179, 33, 62, 236, 48, 204, 189, 23, 145, 140, 60, 171, 73, 134, 61, 196, 233, 3, 61, 200, 8, 141, 190, 187, 35, 43, 189, 95, 76, 177, 189, 27, 187, 153, 61, 93, 20, 194, 189, 195, 191, 210, 62, 20, 251, 15, 189, 1, 91, 7, 188, 28, 35, 174, 61, 77, 179, 24, 190, 92, 148, 244, 188, 248, 181, 206, 61, 208, 17, 60, 62, 132, 169, 249, 61, 50, 71, 68, 191, 119, 133, 54, 62, 153, 177, 68, 62, 180, 88, 141, 62, 219, 4, 247, 187, 39, 84, 39, 191, 6, 83, 205, 190, 203, 162, 47, 62, 245, 173, 47, 62, 5, 31, 119, 189, 190, 220, 66, 62, 119, 149, 249, 189, 63, 23, 145, 62, 56, 127, 185, 190, 153, 189, 150, 62, 20, 175, 110, 190, 79, 6, 200, 190, 120, 172, 101, 191, 207, 12, 138, 190, 42, 234, 48, 190, 45, 92, 4, 191, 69, 204, 72, 190, 153, 137, 22, 62, 42, 239, 163, 62, 189, 254, 197, 62, 51, 56, 13, 62, 196, 40, 151, 190, 66, 234, 188, 190, 229, 112, 44, 62, 149, 234, 34, 60, 173, 242, 214, 62, 145, 48, 189, 190, 240, 61, 175, 190, 113, 138, 248, 189, 171, 85, 189, 62, 91, 50, 193, 62, 63, 5, 14, 190, 131, 219, 134, 190, 62, 190, 226, 189, 119, 212, 194, 62, 62, 42, 15, 62, 220, 38, 191, 189, 30, 225, 238, 61, 166, 78, 160, 190, 162, 198, 62, 62, 128, 121, 204, 190, 19, 215, 82, 190, 154, 186, 44, 61, 61, 183, 224, 61, 165, 139, 57, 62, 140, 130, 160, 190, 202, 242, 21, 62, 154, 230, 152, 60, 114, 22, 170, 62, 221, 109, 121, 189, 167, 137, 105, 62, 215, 52, 43, 62, 158, 5, 140, 189, 25, 36, 34, 191, 9, 222, 219, 189, 181, 110, 72, 62, 185, 26, 44, 61, 131, 108, 63, 62, 34, 231, 130, 190, 249, 47, 80, 188, 121, 162, 8, 191, 26, 128, 63, 190, 130, 213, 159, 62, 35, 254, 56, 62, 135, 237, 189, 189, 10, 76, 164, 190, 19, 40, 19, 62, 191, 19, 96, 62, 28, 93, 115, 62, 198, 16, 128, 62, 207, 141, 76, 62, 136, 230, 8, 190, 212, 248, 13, 190, 15, 41, 86, 61, 162, 74, 150, 62, 3, 72, 204, 189, 220, 120, 200, 190, 221, 157, 202, 62, 246, 223, 95, 62, 46, 221, 27, 62, 166, 0, 140, 190, 212, 138, 122, 62, 241, 203, 236, 190, 48, 55, 176, 188, 145, 78, 200, 190, 159, 72, 139, 62, 115, 87, 178, 62, 119, 12, 173, 189, 92, 85, 221, 62, 75, 200, 20, 191, 145, 17, 202, 61, 214, 204, 65, 62, 120, 135, 179, 190, 16, 179, 84, 62, 228, 212, 191, 188, 102, 243, 51, 191, 26, 51, 189, 61, 245, 239, 98, 62, 127, 239, 149, 189, 152, 225, 110, 189, 148, 130, 108, 62, 189, 123, 195, 61, 38, 145, 0, 62, 101, 127, 144, 190, 127, 71, 191, 62, 145, 50, 74, 62, 101, 138, 192, 62, 198, 65, 115, 61, 198, 208, 147, 190, 91, 249, 0, 63, 84, 52, 156, 62, 74, 189, 194, 62, 39, 200, 73, 61, 211, 102, 174, 62, 42, 47, 43, 191, 177, 21, 25, 188, 103, 240, 238, 190, 172, 45, 156, 61, 240, 84, 196, 61, 182, 107, 175, 61, 136, 134, 175, 62, 174, 39, 56, 191, 97, 43, 22, 62, 157, 87, 142, 62, 219, 194, 5, 191, 39, 24, 10, 63, 157, 110, 161, 190, 16, 205, 174, 190, 244, 84, 71, 189, 99, 166, 243, 61, 75, 44, 146, 189, 156, 2, 31, 62, 65, 189, 172, 61, 142, 117, 99, 62, 8, 213, 28, 62, 178, 164, 166, 190, 98, 112, 170, 62, 39, 242, 112, 62, 76, 253, 120, 62, 208, 172, 32, 190, 195, 141, 172, 191, 89, 136, 45, 62, 173, 103, 8, 62, 234, 17, 47, 190, 48, 125, 15, 190, 77, 97, 162, 62, 210, 124, 6, 62, 60, 133, 166, 61, 175, 105, 200, 62, 147, 174, 60, 62, 4, 105, 27, 190, 223, 86, 39, 62, 210, 139, 20, 62, 54, 21, 65, 190, 255, 57, 8, 62, 67, 178, 166, 190, 224, 191, 140, 61, 77, 215, 170, 62, 48, 195, 138, 62, 241, 29, 134, 190, 130, 49, 32, 191, 45, 7, 23, 62, 115, 25, 223, 61, 31, 247, 74, 62, 240, 231, 254, 188, 222, 87, 180, 59, 215, 35, 132, 190, 145, 121, 78, 61, 244, 172, 137, 190, 107, 128, 4, 191, 235, 230, 202, 61, 137, 83, 169, 58, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 130, 215, 67, 61, 30, 73, 106, 190, 229, 3, 5, 62, 176, 70, 145, 190, 210, 26, 27, 62, 15, 97, 20, 62, 52, 76, 187, 62, 179, 38, 76, 61, 131, 212, 74, 61, 40, 75, 255, 190, 104, 156, 70, 190, 254, 149, 209, 59, 49, 106, 37, 61, 111, 22, 221, 61, 227, 234, 124, 189, 77, 165, 29, 190, 44, 250, 44, 62, 246, 176, 131, 61, 5, 107, 143, 62, 212, 18, 37, 62, 186, 184, 196, 60, 242, 172, 156, 190, 32, 154, 26, 62, 209, 151, 13, 61, 38, 90, 171, 62, 103, 233, 230, 62, 48, 140, 49, 190, 109, 45, 28, 62, 24, 237, 94, 190, 81, 215, 229, 61, 186, 3, 146, 62, 1, 12, 11, 62, 104, 250, 5, 191, 0, 255, 22, 184, 58, 242, 60, 190, 133, 222, 67, 62, 97, 205, 14, 61, 171, 197, 81, 62, 143, 222, 103, 62, 127, 164, 83, 61, 62, 135, 22, 62, 243, 152, 81, 191, 107, 240, 11, 191, 118, 129, 138, 62, 177, 93, 138, 62, 123, 214, 142, 60, 234, 133, 177, 59, 152, 4, 44, 191, 19, 31, 198, 61, 134, 253, 251, 61, 207, 30, 77, 62, 225, 253, 228, 189, 75, 181, 43, 191, 145, 80, 201, 189, 133, 156, 97, 62, 116, 82, 173, 62, 131, 12, 76, 190, 8, 147, 156, 190, 35, 218, 28, 191, 145, 220, 42, 62, 60, 169, 238, 61, 75, 170, 119, 190, 185, 107, 239, 189, 105, 119, 176, 189, 64, 162, 164, 190, 19, 76, 22, 62, 209, 155, 36, 62, 86, 233, 143, 61, 142, 90, 178, 61, 2, 39, 124, 62, 24, 103, 36, 189, 145, 67, 33, 62, 95, 121, 225, 189, 245, 208, 65, 62, 245, 159, 149, 61, 109, 120, 141, 62, 150, 127, 148, 188, 167, 227, 47, 61, 152, 24, 74, 62, 152, 210, 164, 62, 157, 72, 245, 187, 55, 39, 194, 61, 240, 12, 16, 189, 158, 22, 178, 61, 76, 49, 180, 60, 69, 68, 141, 188, 176, 215, 221, 189, 132, 57, 173, 61, 90, 106, 30, 62, 148, 232, 255, 61, 194, 50, 58, 62, 142, 207, 29, 59, 14, 53, 80, 62, 150, 182, 234, 188, 123, 221, 56, 62, 55, 0, 65, 189, 115, 141, 210, 188, 17, 163, 230, 188, 37, 61, 67, 189, 180, 153, 133, 190, 186, 148, 22, 62, 11, 80, 224, 190, 245, 48, 173, 187, 218, 250, 140, 188, 29, 254, 222, 62, 33, 22, 157, 189, 210, 232, 211, 190, 248, 97, 132, 190, 85, 114, 75, 62, 120, 72, 140, 190, 119, 102, 84, 62, 177, 169, 33, 190, 122, 110, 238, 62, 105, 198, 154, 59, 54, 119, 131, 189, 159, 98, 209, 190, 206, 79, 31, 61, 116, 45, 99, 61, 140, 80, 165, 190, 153, 0, 168, 190, 74, 208, 185, 61, 158, 115, 58, 190, 186, 132, 62, 191, 123, 115, 164, 61, 27, 23, 110, 188, 201, 22, 140, 60, 82, 21, 247, 189, 61, 45, 244, 61, 23, 135, 121, 191, 64, 192, 41, 62, 84, 249, 240, 189, 150, 136, 35, 61, 216, 58, 240, 189, 58, 120, 47, 62, 199, 190, 42, 61, 164, 185, 54, 62, 92, 125, 146, 62, 101, 100, 73, 190, 186, 170, 187, 189, 213, 230, 10, 62, 230, 62, 84, 62, 150, 9, 83, 189, 185, 145, 161, 189, 162, 93, 33, 191, 207, 133, 32, 62, 233, 147, 95, 62, 58, 2, 43, 62, 178, 255, 167, 190, 63, 101, 25, 191, 146, 139, 17, 188, 184, 210, 209, 62, 113, 205, 235, 61, 214, 52, 49, 62, 18, 176, 65, 190, 197, 213, 0, 190, 16, 154, 207, 61, 49, 4, 200, 188, 80, 106, 12, 191, 75, 72, 42, 190, 239, 121, 243, 189, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 233, 140, 52, 191, 89, 244, 229, 190, 226, 136, 104, 190, 241, 73, 34, 191, 183, 226, 164, 61, 244, 111, 141, 59, 107, 153, 112, 61, 192, 59, 163, 59, 159, 243, 227, 188, 148, 53, 207, 190, 254, 183, 142, 190, 229, 190, 145, 62, 239, 0, 83, 187, 216, 42, 147, 61, 115, 115, 3, 191, 87, 134, 23, 189, 121, 24, 118, 190, 153, 139, 233, 60, 177, 208, 50, 62, 89, 186, 229, 189, 116, 126, 134, 190, 43, 181, 76, 191, 64, 42, 149, 62, 121, 155, 202, 61, 44, 20, 168, 58, 161, 207, 221, 62, 47, 85, 135, 190, 202, 69, 205, 60, 34, 230, 36, 62, 142, 252, 139, 190, 130, 218, 100, 190, 75, 72, 29, 62, 39, 58, 10, 62, 118, 137, 103, 190, 177, 78, 52, 189, 94, 109, 19, 190, 189, 109, 141, 62, 186, 57, 241, 187, 180, 38, 160, 190, 107, 207, 167, 190, 43, 115, 143, 62, 28, 171, 31, 63, 221, 34, 71, 190, 6, 16, 19, 62, 188, 139, 246, 190, 28, 83, 113, 190, 49, 226, 152, 190, 28, 213, 34, 61, 26, 158, 27, 190, 207, 203, 77, 191, 35, 198, 164, 190, 190, 48, 140, 62, 134, 186, 21, 189, 4, 174, 176, 61, 131, 220, 98, 62, 76, 14, 130, 189, 217, 199, 228, 190, 184, 156, 2, 191, 222, 135, 29, 59, 107, 170, 32, 191, 85, 45, 128, 62, 225, 134, 248, 61, 74, 178, 42, 191, 133, 240, 239, 61, 201, 177, 113, 190, 63, 251, 229, 61, 4, 39, 20, 190, 176, 224, 58, 189, 179, 104, 69, 190, 20, 109, 184, 190, 24, 115, 179, 190, 170, 11, 52, 190, 187, 184, 2, 190, 84, 237, 192, 61, 139, 200, 194, 61, 41, 45, 26, 62, 204, 17, 196, 61, 7, 140, 23, 191, 178, 106, 85, 61, 242, 31, 160, 61, 124, 135, 193, 61, 202, 161, 75, 61, 183, 119, 207, 190, 91, 97, 166, 61, 223, 175, 4, 62, 237, 103, 1, 190, 144, 151, 9, 189, 4, 172, 119, 190, 52, 216, 33, 189, 170, 36, 12, 190, 237, 52, 190, 61, 77, 29, 242, 189, 71, 218, 9, 61, 24, 248, 190, 190, 38, 15, 175, 189, 55, 226, 2, 62, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 137, 193, 61, 238, 1, 18, 62, 121, 184, 132, 189, 198, 210, 62, 61, 155, 58, 108, 62, 90, 241, 144, 189, 47, 129, 21, 62, 189, 181, 81, 62, 4, 102, 180, 62, 198, 121, 124, 62, 138, 217, 91, 190, 62, 145, 168, 62, 83, 242, 198, 190, 53, 0, 30, 61, 57, 160, 51, 188, 99, 93, 173, 190, 109, 235, 132, 61, 47, 48, 224, 61, 168, 251, 23, 62, 105, 31, 115, 62, 107, 33, 156, 61, 105, 230, 173, 189, 191, 187, 4, 62, 251, 15, 48, 62, 134, 247, 8, 60, 105, 124, 56, 189, 204, 118, 66, 62, 91, 146, 27, 190, 66, 86, 143, 62, 140, 202, 101, 190, 234, 92, 237, 61, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 101, 118, 191, 41, 210, 40, 63, 140, 186, 56, 189, 8, 70, 36, 191, 15, 245, 129, 191, 56, 157, 37, 61, 150, 1, 87, 63, 80, 39, 161, 191, 227, 11, 34, 62, 185, 241, 255, 62, 8, 203, 196, 63, 192, 104, 76, 62, 51, 98, 35, 190, 192, 233, 153, 62, 9, 141, 219, 62, 183, 196, 30, 191, 56, 49, 98, 191, 38, 193, 76, 190, 5, 137, 133, 62, 202, 94, 26, 63, 23, 66, 136, 190, 155, 214, 28, 62, 249, 122, 32, 190, 31, 139, 178, 190, 86, 162, 38, 62, 17, 35, 146, 190, 199, 29, 198, 190, 218, 31, 21, 62, 240, 126, 139, 190, 236, 176, 17, 63, 158, 157, 161, 62, 84, 97, 17, 189, 47, 214, 65, 62, 224, 0, 182, 62, 203, 245, 159, 189, 241, 144, 92, 61, 194, 135, 11, 190, 1, 174, 45, 61, 14, 98, 123, 189, 35, 175, 49, 62, 219, 118, 17, 190, 58, 10, 2, 62, 27, 191, 139, 62, 0, 193, 94, 190, 160, 220, 78, 62, 26, 132, 228, 189, 83, 103, 179, 189, 90, 223, 99, 62, 97, 58, 99, 60, 53, 209, 242, 189, 68, 86, 213, 61, 69, 95, 105, 61, 140, 69, 64, 190, 162, 190, 147, 189, 224, 192, 101, 190, 226, 215, 45, 62, 32, 79, 173, 189, 181, 14, 194, 189, 207, 164, 84, 189, 108, 163, 228, 61, 182, 163, 90, 190, 8, 21, 75, 189, 90, 79, 55, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 2, 106, 62, 29, 130, 167, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 45, 14, 192, 225, 129, 13, 192, 236, 30, 141, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 6, 240, 192, 48, 107, 184, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}