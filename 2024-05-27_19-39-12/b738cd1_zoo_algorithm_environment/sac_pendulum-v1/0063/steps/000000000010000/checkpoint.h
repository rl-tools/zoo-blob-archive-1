// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 56, 120, 62, 44, 80, 146, 191, 60, 172, 160, 190, 182, 54, 200, 190, 124, 134, 126, 59, 243, 153, 28, 63, 124, 248, 32, 63, 249, 235, 226, 190, 71, 185, 112, 190, 123, 77, 180, 190, 171, 103, 208, 63, 160, 43, 210, 62, 7, 157, 93, 61, 218, 157, 50, 190, 249, 199, 198, 190, 207, 58, 62, 62, 144, 123, 254, 62, 139, 211, 207, 59, 56, 116, 66, 63, 234, 45, 83, 63, 215, 245, 189, 62, 102, 124, 145, 62, 232, 30, 179, 63, 82, 170, 233, 62, 241, 62, 138, 191, 26, 207, 80, 191, 198, 214, 226, 190, 151, 199, 33, 63, 23, 127, 120, 190, 113, 29, 65, 190, 5, 37, 17, 63, 180, 91, 160, 191, 185, 210, 170, 190, 24, 99, 240, 189, 144, 102, 5, 62, 73, 146, 14, 188, 195, 107, 115, 62, 238, 133, 24, 191, 92, 187, 8, 63, 126, 52, 228, 62, 134, 237, 114, 63, 64, 227, 121, 62, 234, 32, 160, 190, 239, 209, 194, 61, 17, 246, 97, 63, 87, 142, 158, 190, 188, 114, 121, 191, 167, 36, 72, 190, 153, 254, 216, 190, 23, 129, 84, 191, 19, 179, 247, 62, 110, 220, 79, 62, 45, 79, 188, 190, 79, 148, 44, 63, 117, 158, 157, 62, 162, 78, 132, 63, 35, 32, 107, 62, 132, 73, 177, 190, 100, 86, 224, 190, 161, 6, 105, 190, 62, 88, 8, 191, 166, 48, 179, 191, 215, 103, 150, 190, 96, 203, 89, 190, 226, 146, 50, 63, 198, 56, 219, 62, 0, 173, 117, 62, 29, 10, 87, 63, 86, 233, 129, 190, 162, 101, 233, 61, 129, 22, 33, 63, 174, 160, 168, 190, 82, 107, 131, 62, 134, 218, 63, 191, 127, 162, 8, 190, 10, 108, 59, 63, 122, 97, 11, 58, 28, 79, 176, 60, 143, 101, 135, 62, 255, 54, 138, 191, 57, 132, 141, 190, 18, 142, 142, 62, 109, 57, 239, 190, 230, 234, 55, 63, 252, 10, 132, 191, 217, 50, 109, 63, 154, 46, 135, 62, 83, 97, 134, 62, 27, 191, 138, 190, 45, 8, 179, 190, 141, 2, 184, 62, 135, 125, 85, 191, 243, 88, 72, 190, 197, 227, 144, 190, 169, 211, 249, 190, 255, 206, 181, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 174, 148, 190, 117, 51, 22, 191, 111, 11, 173, 190, 237, 65, 82, 190, 46, 103, 247, 62, 136, 22, 24, 63, 21, 207, 209, 190, 136, 239, 190, 62, 208, 246, 72, 63, 238, 41, 242, 190, 105, 143, 65, 62, 18, 173, 241, 62, 132, 134, 48, 190, 18, 178, 183, 189, 132, 153, 193, 189, 84, 113, 232, 62, 77, 73, 199, 190, 26, 142, 243, 60, 157, 164, 34, 62, 169, 78, 152, 190, 72, 116, 49, 63, 66, 192, 205, 188, 51, 134, 27, 63, 149, 173, 246, 62, 67, 85, 168, 60, 130, 18, 63, 190, 44, 44, 25, 62, 215, 42, 74, 189, 26, 167, 75, 62, 32, 11, 64, 190, 250, 76, 108, 62, 49, 203, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 45, 108, 190, 98, 226, 91, 190, 13, 211, 149, 190, 167, 149, 62, 191, 178, 51, 150, 62, 58, 165, 55, 62, 66, 35, 196, 62, 233, 105, 185, 61, 168, 19, 89, 62, 85, 80, 56, 191, 64, 140, 16, 191, 121, 8, 21, 62, 232, 155, 87, 189, 146, 233, 139, 62, 28, 146, 28, 190, 139, 165, 39, 189, 8, 128, 4, 63, 17, 112, 55, 190, 216, 182, 7, 62, 120, 210, 193, 61, 232, 47, 70, 190, 132, 239, 187, 190, 87, 104, 91, 62, 71, 56, 71, 189, 17, 155, 39, 188, 155, 69, 222, 60, 178, 175, 180, 190, 8, 207, 133, 62, 73, 171, 223, 189, 136, 241, 44, 189, 72, 50, 92, 190, 19, 40, 245, 61, 103, 148, 53, 190, 141, 203, 77, 61, 160, 32, 96, 60, 12, 206, 204, 62, 51, 42, 172, 190, 35, 162, 43, 189, 89, 82, 215, 190, 47, 225, 56, 61, 76, 139, 212, 190, 45, 48, 230, 60, 25, 186, 99, 62, 17, 250, 18, 62, 2, 231, 137, 62, 119, 145, 12, 191, 126, 24, 167, 61, 18, 154, 165, 62, 45, 41, 195, 190, 58, 28, 56, 62, 74, 119, 14, 190, 98, 130, 204, 190, 118, 84, 69, 62, 110, 4, 59, 62, 8, 64, 24, 190, 236, 120, 206, 189, 182, 29, 173, 62, 47, 128, 29, 188, 52, 94, 74, 190, 206, 113, 194, 190, 214, 243, 161, 62, 171, 169, 154, 190, 243, 208, 168, 62, 226, 140, 227, 60, 109, 140, 45, 60, 39, 145, 252, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 90, 17, 23, 190, 159, 189, 31, 62, 246, 129, 239, 189, 246, 78, 42, 190, 11, 180, 200, 188, 48, 103, 112, 188, 197, 15, 21, 189, 44, 182, 19, 62, 146, 114, 45, 61, 164, 167, 118, 187, 227, 155, 2, 62, 130, 104, 19, 190, 143, 160, 254, 189, 177, 154, 147, 61, 189, 119, 206, 60, 156, 188, 176, 61, 194, 210, 215, 189, 63, 23, 203, 189, 69, 49, 252, 188, 126, 5, 200, 189, 142, 56, 117, 61, 207, 52, 107, 60, 56, 48, 79, 61, 185, 51, 237, 189, 15, 27, 16, 61, 3, 14, 164, 189, 73, 83, 131, 61, 168, 2, 99, 62, 205, 222, 44, 189, 173, 254, 10, 62, 186, 170, 172, 191, 211, 136, 114, 62, 180, 239, 174, 189, 134, 62, 3, 191, 53, 173, 173, 191, 184, 114, 140, 62, 64, 93, 70, 190, 235, 53, 171, 189, 82, 11, 98, 61, 72, 38, 21, 189, 134, 212, 78, 190, 10, 59, 61, 190, 113, 109, 155, 62, 75, 170, 32, 63, 221, 1, 153, 190, 58, 12, 12, 191, 30, 229, 208, 61, 212, 19, 69, 62, 144, 235, 171, 190, 36, 148, 166, 190, 27, 6, 102, 190, 213, 201, 228, 61, 97, 45, 190, 62, 199, 32, 81, 61, 253, 140, 15, 62, 108, 63, 80, 190, 158, 99, 27, 62, 244, 137, 30, 189, 224, 201, 77, 62, 230, 22, 168, 190, 81, 77, 76, 191, 249, 15, 170, 190, 148, 208, 97, 191, 75, 72, 59, 61, 223, 8, 119, 61, 210, 54, 180, 61, 175, 38, 48, 191, 100, 35, 155, 62, 247, 191, 69, 191, 75, 207, 240, 189, 235, 99, 133, 62, 229, 119, 28, 191, 164, 21, 152, 62, 164, 232, 3, 191, 130, 189, 79, 62, 190, 237, 24, 61, 25, 196, 232, 190, 91, 218, 117, 62, 123, 53, 59, 189, 60, 20, 119, 62, 92, 140, 102, 191, 181, 196, 138, 62, 22, 179, 203, 189, 88, 184, 147, 60, 169, 152, 86, 62, 1, 95, 156, 189, 189, 36, 251, 61, 48, 65, 137, 190, 33, 183, 183, 190, 60, 166, 79, 190, 72, 12, 128, 188, 36, 11, 35, 62, 82, 201, 144, 189, 231, 85, 38, 190, 228, 102, 200, 187, 19, 172, 218, 185, 99, 204, 243, 61, 13, 237, 227, 188, 84, 216, 56, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 6, 146, 217, 189, 60, 13, 162, 189, 4, 175, 105, 189, 72, 250, 171, 60, 135, 149, 22, 189, 107, 35, 245, 60, 158, 232, 16, 189, 88, 96, 95, 189, 253, 32, 62, 61, 192, 119, 39, 190, 155, 209, 229, 61, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 12, 198, 33, 190, 59, 118, 51, 190, 239, 46, 230, 188, 204, 53, 233, 189, 90, 129, 199, 189, 179, 187, 50, 60, 125, 122, 158, 61, 48, 53, 87, 189, 97, 167, 156, 61, 13, 166, 228, 189, 52, 149, 85, 62, 174, 113, 194, 189, 181, 67, 161, 190, 178, 54, 141, 190, 138, 194, 139, 189, 142, 241, 159, 60, 209, 66, 243, 60, 23, 46, 137, 190, 205, 216, 61, 62, 75, 127, 19, 190, 247, 206, 16, 190, 74, 209, 207, 59, 6, 133, 254, 61, 159, 185, 223, 190, 112, 105, 28, 189, 75, 208, 141, 190, 147, 127, 16, 191, 74, 96, 103, 190, 24, 48, 220, 61, 43, 83, 145, 189, 55, 179, 53, 190, 183, 98, 72, 190, 216, 217, 54, 190, 59, 105, 136, 190, 24, 150, 59, 191, 171, 134, 165, 62, 198, 55, 75, 189, 195, 18, 109, 190, 136, 125, 16, 187, 19, 98, 202, 190, 59, 249, 62, 190, 161, 87, 106, 190, 215, 152, 191, 191, 137, 124, 145, 62, 141, 244, 190, 189, 84, 174, 146, 190, 79, 191, 208, 191, 133, 85, 170, 62, 176, 171, 157, 191, 239, 4, 176, 190, 207, 96, 236, 188, 31, 183, 242, 190, 33, 197, 160, 189, 118, 10, 8, 191, 148, 94, 20, 62, 95, 56, 36, 63, 122, 165, 149, 190, 34, 41, 94, 190, 228, 157, 51, 190, 28, 49, 84, 62, 27, 123, 161, 190, 186, 117, 41, 62, 77, 202, 134, 190, 150, 115, 218, 189, 109, 15, 187, 189, 138, 3, 147, 189, 67, 49, 80, 190, 2, 47, 199, 189, 133, 21, 191, 188, 120, 3, 145, 190, 174, 112, 132, 62, 225, 10, 4, 191, 109, 13, 13, 62, 55, 243, 209, 189, 24, 40, 14, 189, 166, 208, 227, 61, 187, 47, 184, 62, 121, 248, 49, 189, 140, 94, 153, 61, 239, 92, 168, 190, 246, 8, 105, 60, 127, 199, 216, 61, 142, 173, 247, 61, 23, 109, 141, 62, 29, 17, 101, 190, 214, 201, 238, 61, 74, 208, 204, 62, 44, 41, 222, 189, 234, 48, 90, 62, 110, 20, 2, 189, 234, 207, 184, 190, 67, 152, 57, 62, 31, 70, 205, 189, 51, 160, 60, 61, 77, 255, 15, 189, 188, 216, 56, 60, 70, 88, 217, 61, 56, 74, 172, 189, 18, 89, 135, 190, 173, 161, 209, 61, 62, 51, 130, 190, 181, 22, 142, 61, 19, 94, 253, 61, 176, 28, 126, 190, 67, 162, 112, 62, 163, 135, 183, 61, 222, 44, 87, 62, 25, 5, 119, 61, 134, 93, 100, 61, 103, 224, 17, 191, 192, 181, 68, 190, 198, 113, 36, 189, 87, 118, 30, 62, 123, 79, 135, 62, 110, 187, 141, 62, 185, 144, 32, 62, 9, 77, 79, 191, 87, 36, 23, 62, 130, 217, 116, 62, 171, 232, 47, 190, 233, 122, 77, 62, 103, 9, 243, 190, 8, 98, 79, 189, 16, 60, 42, 61, 183, 103, 138, 189, 41, 250, 9, 189, 40, 136, 239, 59, 228, 156, 213, 62, 220, 40, 25, 61, 203, 101, 148, 61, 6, 51, 222, 190, 247, 242, 42, 62, 72, 89, 188, 61, 238, 161, 171, 62, 99, 192, 165, 62, 90, 197, 151, 190, 120, 1, 12, 190, 126, 87, 71, 191, 165, 5, 15, 190, 88, 208, 146, 62, 202, 15, 185, 61, 247, 192, 187, 62, 24, 132, 26, 62, 131, 10, 38, 62, 70, 9, 32, 191, 173, 207, 34, 191, 0, 202, 134, 189, 235, 195, 174, 189, 186, 147, 28, 62, 122, 101, 16, 190, 74, 89, 224, 190, 219, 115, 97, 62, 216, 133, 59, 189, 198, 114, 131, 62, 106, 21, 129, 61, 28, 183, 227, 188, 28, 35, 3, 190, 60, 192, 103, 61, 209, 164, 169, 62, 20, 127, 3, 191, 206, 201, 30, 63, 44, 248, 64, 191, 188, 25, 119, 62, 68, 173, 6, 191, 163, 141, 178, 190, 197, 82, 70, 191, 72, 92, 153, 61, 207, 175, 230, 190, 97, 245, 146, 62, 140, 228, 2, 189, 179, 53, 37, 60, 140, 224, 5, 62, 68, 179, 221, 61, 255, 160, 186, 190, 255, 84, 40, 62, 181, 247, 207, 189, 122, 134, 70, 62, 240, 205, 227, 60, 245, 197, 163, 62, 116, 80, 148, 62, 96, 28, 245, 189, 186, 28, 218, 61, 202, 96, 187, 61, 19, 7, 190, 190, 9, 107, 88, 62, 248, 202, 167, 61, 5, 211, 133, 61, 243, 253, 122, 62, 141, 102, 11, 62, 88, 233, 159, 61, 104, 51, 239, 189, 49, 129, 132, 62, 244, 105, 79, 60, 54, 91, 2, 62, 175, 44, 53, 190, 122, 246, 133, 188, 170, 179, 67, 190, 120, 1, 205, 61, 65, 37, 76, 189, 190, 111, 182, 62, 49, 39, 151, 62, 107, 93, 251, 61, 121, 102, 105, 188, 181, 145, 231, 189, 121, 71, 173, 190, 181, 89, 58, 62, 130, 223, 31, 62, 251, 119, 231, 189, 235, 105, 248, 62, 254, 62, 163, 187, 146, 197, 78, 190, 104, 3, 158, 62, 121, 157, 178, 61, 252, 165, 248, 188, 19, 104, 188, 190, 12, 143, 63, 62, 44, 249, 82, 62, 253, 52, 120, 189, 5, 189, 122, 189, 203, 170, 178, 188, 161, 174, 244, 61, 240, 58, 129, 60, 143, 241, 115, 62, 87, 227, 85, 62, 243, 5, 69, 190, 36, 231, 239, 61, 100, 170, 28, 62, 17, 123, 117, 61, 212, 19, 179, 62, 2, 86, 185, 189, 164, 39, 52, 189, 186, 138, 239, 190, 133, 29, 110, 62, 1, 215, 162, 189, 185, 39, 163, 62, 135, 54, 13, 190, 107, 206, 8, 62, 154, 215, 184, 189, 244, 236, 76, 62, 208, 84, 152, 190, 206, 121, 237, 61, 204, 211, 93, 62, 47, 168, 237, 60, 39, 162, 98, 62, 60, 96, 38, 190, 234, 243, 93, 62, 186, 96, 147, 62, 84, 74, 149, 190, 201, 102, 85, 62, 81, 76, 171, 60, 230, 212, 13, 190, 88, 244, 255, 61, 171, 21, 189, 187, 127, 24, 140, 190, 252, 206, 20, 189, 70, 149, 32, 61, 95, 78, 174, 62, 29, 18, 178, 61, 22, 62, 201, 189, 91, 82, 148, 62, 56, 125, 158, 190, 106, 134, 172, 62, 96, 51, 44, 62, 202, 144, 145, 190, 89, 205, 15, 190, 90, 184, 248, 61, 196, 102, 24, 189, 201, 174, 9, 62, 167, 213, 61, 62, 114, 188, 139, 190, 104, 41, 16, 191, 219, 24, 17, 60, 129, 38, 240, 62, 184, 139, 253, 61, 30, 75, 114, 62, 47, 9, 21, 191, 54, 158, 10, 62, 194, 98, 188, 190, 114, 162, 34, 60, 20, 138, 198, 60, 216, 203, 57, 191, 24, 9, 29, 190, 248, 152, 163, 61, 62, 17, 200, 188, 174, 214, 52, 188, 206, 47, 134, 62, 208, 6, 217, 61, 78, 73, 77, 190, 173, 195, 141, 61, 78, 141, 113, 62, 105, 181, 12, 190, 0, 253, 39, 62, 228, 101, 225, 189, 26, 166, 97, 60, 126, 173, 251, 61, 2, 227, 28, 62, 89, 180, 139, 190, 65, 240, 233, 188, 0, 9, 124, 189, 17, 139, 140, 61, 158, 143, 221, 189, 53, 190, 199, 62, 7, 4, 14, 189, 85, 105, 53, 59, 44, 164, 196, 61, 190, 76, 187, 189, 255, 91, 26, 188, 245, 147, 187, 61, 85, 91, 46, 62, 140, 187, 248, 61, 80, 190, 41, 191, 45, 241, 62, 62, 217, 234, 60, 62, 32, 234, 135, 62, 21, 111, 162, 61, 119, 144, 8, 191, 226, 20, 205, 190, 68, 20, 14, 62, 45, 44, 34, 62, 83, 57, 145, 187, 201, 81, 102, 62, 10, 61, 245, 188, 173, 224, 142, 62, 72, 152, 165, 190, 86, 206, 138, 62, 135, 214, 78, 190, 157, 157, 195, 190, 163, 81, 43, 191, 214, 115, 142, 190, 45, 14, 46, 190, 137, 129, 243, 190, 185, 147, 70, 190, 161, 233, 8, 62, 44, 155, 161, 62, 165, 165, 193, 62, 64, 226, 35, 62, 33, 208, 152, 190, 126, 85, 177, 190, 62, 29, 37, 62, 44, 132, 108, 187, 33, 205, 210, 62, 157, 208, 184, 190, 235, 214, 159, 190, 195, 43, 26, 190, 199, 178, 187, 62, 168, 31, 187, 62, 120, 81, 68, 189, 201, 87, 97, 190, 226, 243, 226, 189, 113, 248, 188, 62, 154, 203, 10, 62, 155, 241, 158, 189, 214, 97, 247, 61, 117, 57, 142, 190, 169, 24, 64, 62, 49, 48, 182, 190, 159, 25, 65, 190, 200, 206, 83, 61, 120, 134, 198, 61, 23, 38, 32, 62, 116, 247, 156, 190, 243, 55, 44, 62, 119, 56, 20, 60, 100, 251, 169, 62, 69, 30, 59, 189, 152, 37, 91, 62, 54, 235, 33, 62, 153, 175, 214, 189, 6, 95, 21, 191, 180, 77, 185, 189, 8, 190, 74, 62, 108, 51, 134, 61, 204, 233, 36, 62, 103, 147, 72, 190, 252, 105, 22, 189, 222, 106, 5, 191, 131, 62, 6, 190, 11, 165, 150, 62, 18, 19, 32, 62, 58, 117, 240, 189, 1, 21, 187, 190, 166, 94, 35, 62, 120, 25, 107, 62, 129, 246, 126, 62, 106, 236, 151, 62, 168, 10, 82, 62, 106, 240, 142, 189, 14, 86, 30, 190, 43, 33, 57, 61, 193, 211, 158, 62, 129, 137, 38, 190, 25, 179, 228, 190, 41, 223, 209, 62, 104, 10, 63, 62, 9, 29, 22, 62, 135, 178, 131, 190, 84, 127, 127, 62, 220, 170, 233, 190, 90, 119, 53, 187, 136, 254, 176, 190, 240, 53, 107, 62, 176, 244, 151, 62, 54, 44, 176, 189, 253, 100, 219, 62, 197, 101, 15, 191, 173, 41, 185, 61, 36, 151, 235, 61, 194, 43, 177, 190, 229, 231, 69, 62, 21, 245, 33, 59, 143, 112, 18, 191, 40, 68, 19, 60, 113, 114, 106, 62, 253, 68, 71, 189, 41, 146, 6, 189, 81, 221, 53, 62, 203, 179, 113, 61, 123, 70, 134, 61, 42, 120, 154, 190, 133, 90, 182, 62, 196, 33, 85, 62, 140, 174, 169, 62, 60, 114, 105, 61, 6, 74, 159, 190, 132, 190, 3, 63, 56, 52, 140, 62, 211, 46, 188, 62, 138, 156, 39, 61, 66, 190, 168, 62, 212, 209, 40, 191, 76, 16, 25, 58, 132, 103, 217, 190, 14, 153, 204, 60, 77, 194, 94, 61, 22, 51, 159, 61, 7, 49, 170, 62, 57, 32, 52, 191, 31, 175, 8, 62, 95, 55, 128, 62, 19, 193, 6, 191, 72, 129, 5, 63, 80, 23, 153, 190, 210, 196, 138, 190, 80, 129, 164, 189, 168, 56, 254, 61, 236, 189, 178, 189, 59, 44, 12, 62, 178, 115, 90, 61, 82, 216, 64, 62, 94, 162, 223, 61, 212, 218, 178, 190, 25, 90, 166, 62, 199, 241, 85, 62, 37, 203, 83, 62, 195, 164, 32, 190, 158, 220, 128, 191, 179, 242, 42, 62, 157, 6, 18, 62, 63, 39, 29, 190, 30, 183, 27, 190, 137, 175, 157, 62, 215, 198, 6, 62, 242, 132, 162, 61, 186, 45, 192, 62, 22, 170, 56, 62, 232, 87, 214, 189, 27, 145, 41, 62, 5, 51, 15, 62, 210, 244, 68, 190, 155, 211, 11, 62, 100, 95, 110, 190, 37, 155, 134, 61, 28, 203, 173, 62, 112, 117, 134, 62, 52, 24, 62, 190, 4, 159, 4, 191, 75, 72, 17, 62, 52, 23, 169, 61, 178, 173, 48, 62, 231, 219, 205, 60, 103, 177, 0, 61, 165, 156, 71, 190, 237, 189, 119, 61, 178, 98, 124, 190, 165, 225, 14, 191, 108, 29, 12, 62, 47, 58, 178, 59, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 55, 30, 7, 61, 201, 172, 106, 190, 72, 110, 21, 62, 47, 217, 134, 190, 94, 134, 27, 62, 109, 121, 41, 62, 28, 93, 187, 62, 57, 17, 94, 61, 14, 236, 13, 61, 101, 37, 233, 190, 30, 99, 32, 190, 229, 252, 230, 60, 252, 9, 32, 61, 244, 37, 212, 61, 4, 181, 110, 189, 228, 39, 16, 190, 227, 179, 53, 62, 220, 141, 161, 61, 0, 110, 141, 62, 54, 113, 15, 62, 51, 177, 25, 61, 158, 231, 161, 190, 2, 111, 33, 62, 219, 187, 24, 61, 189, 106, 187, 62, 60, 32, 3, 63, 233, 120, 17, 190, 34, 65, 46, 62, 212, 16, 65, 190, 233, 169, 174, 61, 45, 172, 165, 62, 105, 70, 11, 62, 73, 8, 194, 190, 193, 133, 20, 59, 221, 25, 7, 190, 228, 185, 77, 62, 106, 44, 140, 61, 159, 111, 84, 62, 13, 134, 96, 62, 83, 54, 82, 61, 99, 212, 14, 62, 207, 253, 66, 191, 26, 249, 246, 190, 75, 186, 141, 62, 20, 53, 134, 62, 9, 99, 108, 60, 229, 163, 214, 59, 210, 147, 24, 191, 66, 229, 207, 61, 64, 91, 241, 61, 243, 240, 70, 62, 101, 162, 147, 188, 71, 206, 22, 191, 213, 62, 203, 189, 124, 56, 114, 62, 221, 30, 186, 62, 57, 242, 25, 190, 207, 201, 144, 190, 196, 236, 3, 191, 128, 110, 40, 62, 112, 36, 234, 61, 234, 122, 81, 190, 17, 5, 145, 189, 247, 233, 189, 189, 23, 55, 167, 190, 41, 255, 37, 62, 114, 118, 23, 62, 118, 143, 140, 61, 63, 45, 173, 61, 126, 108, 129, 62, 161, 240, 89, 188, 68, 192, 52, 62, 168, 166, 191, 189, 178, 38, 30, 62, 166, 12, 125, 61, 86, 150, 145, 62, 62, 116, 189, 188, 146, 166, 142, 61, 42, 49, 66, 62, 190, 135, 159, 62, 51, 235, 17, 188, 150, 254, 182, 61, 67, 21, 81, 188, 217, 12, 198, 61, 90, 235, 10, 60, 33, 18, 160, 187, 12, 12, 234, 189, 49, 132, 149, 61, 57, 22, 23, 62, 154, 171, 224, 61, 48, 74, 43, 62, 160, 182, 21, 188, 250, 146, 84, 62, 191, 15, 64, 189, 239, 223, 47, 62, 134, 42, 49, 189, 166, 208, 163, 189, 132, 252, 238, 188, 37, 61, 67, 189, 34, 69, 103, 190, 87, 128, 27, 62, 196, 131, 214, 190, 77, 159, 130, 60, 3, 75, 226, 59, 200, 134, 214, 62, 33, 22, 157, 189, 124, 225, 227, 190, 59, 91, 131, 190, 67, 191, 65, 62, 151, 198, 114, 190, 232, 205, 81, 62, 37, 93, 26, 190, 138, 62, 234, 62, 217, 9, 167, 186, 176, 253, 1, 189, 9, 248, 189, 190, 1, 16, 91, 61, 113, 113, 133, 61, 145, 187, 173, 190, 3, 60, 169, 190, 149, 10, 250, 60, 94, 212, 29, 190, 130, 171, 52, 191, 44, 171, 156, 61, 176, 216, 154, 59, 201, 22, 140, 60, 77, 143, 21, 190, 25, 151, 202, 61, 127, 15, 55, 191, 92, 56, 37, 62, 171, 51, 230, 189, 100, 78, 88, 61, 64, 147, 228, 189, 71, 36, 32, 62, 51, 209, 1, 61, 248, 207, 44, 62, 34, 94, 142, 62, 17, 215, 74, 190, 192, 168, 131, 189, 137, 120, 1, 62, 45, 216, 81, 62, 47, 1, 132, 189, 15, 98, 149, 189, 251, 112, 17, 191, 232, 12, 29, 62, 130, 47, 99, 62, 217, 169, 26, 62, 33, 92, 89, 190, 251, 43, 5, 191, 47, 33, 119, 188, 170, 172, 203, 62, 87, 12, 232, 61, 110, 71, 76, 62, 46, 70, 61, 190, 157, 183, 172, 189, 223, 78, 225, 61, 231, 79, 167, 188, 104, 218, 5, 191, 39, 104, 24, 190, 225, 29, 249, 189, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 236, 147, 226, 190, 220, 130, 232, 190, 247, 102, 94, 190, 77, 79, 14, 191, 187, 230, 147, 61, 76, 200, 246, 57, 48, 142, 131, 61, 234, 255, 48, 60, 88, 86, 36, 189, 3, 32, 205, 190, 189, 112, 120, 190, 107, 137, 147, 62, 165, 199, 6, 189, 148, 142, 134, 61, 19, 235, 239, 190, 235, 91, 156, 60, 20, 117, 112, 190, 123, 198, 80, 61, 169, 20, 42, 62, 65, 110, 181, 189, 71, 243, 79, 190, 207, 4, 81, 191, 147, 240, 143, 62, 190, 65, 168, 61, 237, 196, 107, 61, 201, 232, 231, 62, 214, 68, 91, 190, 161, 59, 124, 61, 154, 34, 50, 62, 246, 58, 160, 190, 44, 217, 69, 190, 133, 204, 51, 62, 149, 247, 17, 62, 46, 81, 5, 190, 107, 140, 167, 188, 228, 203, 117, 190, 37, 245, 144, 62, 102, 134, 183, 60, 88, 43, 160, 190, 152, 211, 173, 190, 126, 199, 143, 62, 19, 238, 32, 63, 220, 179, 46, 190, 255, 31, 39, 62, 157, 71, 229, 190, 239, 234, 60, 190, 177, 232, 110, 190, 73, 226, 76, 61, 200, 172, 60, 190, 94, 169, 63, 191, 54, 226, 141, 190, 189, 29, 138, 62, 218, 187, 225, 188, 118, 15, 6, 62, 135, 93, 107, 62, 95, 125, 92, 189, 14, 1, 220, 190, 184, 75, 3, 191, 50, 13, 119, 60, 82, 80, 21, 191, 248, 237, 130, 62, 17, 208, 8, 62, 23, 153, 36, 191, 114, 19, 7, 62, 4, 103, 76, 190, 160, 145, 206, 61, 188, 62, 164, 61, 242, 194, 71, 189, 173, 60, 9, 190, 252, 5, 144, 190, 233, 21, 103, 190, 63, 57, 19, 190, 16, 60, 32, 190, 249, 91, 15, 62, 67, 174, 180, 61, 54, 96, 198, 61, 135, 171, 154, 61, 108, 155, 198, 190, 40, 143, 231, 60, 148, 145, 85, 188, 44, 19, 62, 61, 41, 159, 223, 60, 208, 166, 146, 190, 86, 144, 194, 61, 85, 236, 3, 61, 170, 109, 250, 189, 123, 25, 174, 61, 201, 164, 48, 190, 134, 120, 33, 189, 84, 157, 112, 189, 55, 165, 42, 61, 209, 253, 18, 190, 199, 198, 0, 189, 115, 165, 202, 189, 47, 27, 240, 189, 116, 200, 146, 61, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 237, 233, 61, 248, 95, 239, 61, 121, 184, 132, 189, 165, 248, 95, 61, 146, 137, 71, 62, 90, 241, 144, 189, 34, 22, 49, 62, 149, 243, 64, 62, 235, 140, 174, 62, 221, 205, 85, 62, 67, 103, 67, 190, 137, 159, 167, 62, 234, 147, 179, 190, 48, 196, 51, 60, 243, 226, 73, 188, 145, 25, 166, 190, 221, 171, 119, 61, 38, 114, 0, 62, 203, 204, 2, 62, 53, 206, 92, 62, 44, 106, 184, 61, 105, 230, 173, 189, 252, 207, 38, 62, 220, 59, 58, 62, 88, 221, 183, 59, 74, 96, 71, 189, 247, 143, 65, 62, 91, 146, 27, 190, 163, 250, 150, 62, 77, 56, 68, 190, 2, 148, 147, 61, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 13, 104, 191, 141, 156, 11, 63, 140, 186, 56, 189, 38, 65, 28, 191, 10, 128, 116, 191, 56, 157, 37, 61, 188, 110, 77, 63, 238, 127, 150, 191, 133, 142, 25, 62, 136, 254, 239, 62, 146, 64, 181, 63, 139, 172, 83, 62, 112, 216, 32, 190, 60, 71, 149, 62, 243, 165, 210, 62, 39, 178, 7, 191, 157, 15, 87, 191, 1, 228, 86, 190, 84, 63, 106, 62, 147, 94, 18, 63, 248, 59, 125, 190, 155, 214, 28, 62, 101, 137, 57, 190, 65, 50, 166, 190, 103, 202, 45, 62, 131, 30, 140, 190, 216, 53, 187, 190, 218, 31, 21, 62, 37, 85, 129, 190, 246, 2, 18, 63, 114, 228, 25, 62, 84, 97, 17, 189, 177, 17, 105, 62, 52, 80, 194, 62, 203, 245, 159, 189, 111, 210, 170, 61, 168, 60, 51, 190, 1, 174, 45, 61, 236, 163, 54, 189, 160, 160, 234, 61, 134, 120, 31, 190, 209, 59, 22, 62, 68, 139, 150, 62, 171, 105, 110, 190, 106, 135, 80, 62, 218, 46, 14, 190, 84, 44, 30, 59, 98, 31, 91, 62, 44, 203, 15, 61, 206, 57, 2, 190, 49, 225, 166, 61, 199, 156, 81, 61, 76, 70, 41, 190, 162, 190, 147, 189, 234, 9, 116, 190, 115, 0, 50, 62, 160, 105, 196, 189, 6, 53, 165, 189, 10, 217, 181, 188, 108, 163, 228, 61, 68, 47, 92, 190, 82, 131, 6, 189, 21, 77, 54, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 233, 88, 62, 74, 60, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 76, 183, 62, 104, 133, 224, 62, 130, 119, 189, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {32, 204, 234, 191, 53, 229, 126, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}