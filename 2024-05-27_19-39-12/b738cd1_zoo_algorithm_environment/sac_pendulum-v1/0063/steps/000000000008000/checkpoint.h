// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 221, 56, 62, 141, 222, 112, 191, 84, 147, 168, 190, 227, 4, 205, 190, 4, 230, 74, 189, 61, 158, 31, 63, 197, 141, 25, 63, 132, 193, 219, 190, 208, 48, 132, 190, 71, 126, 191, 190, 10, 157, 188, 63, 251, 104, 219, 62, 141, 33, 234, 61, 77, 73, 14, 190, 178, 145, 197, 190, 237, 85, 123, 62, 107, 197, 217, 62, 248, 129, 49, 60, 247, 49, 58, 63, 174, 57, 93, 63, 246, 88, 200, 62, 77, 99, 137, 62, 100, 89, 158, 63, 186, 60, 253, 62, 92, 66, 125, 191, 86, 214, 73, 191, 145, 65, 247, 190, 111, 97, 34, 63, 187, 162, 241, 189, 65, 27, 49, 190, 13, 8, 25, 63, 188, 235, 150, 191, 148, 187, 165, 190, 198, 72, 144, 189, 76, 73, 159, 61, 10, 163, 70, 188, 117, 23, 108, 62, 8, 171, 54, 191, 75, 249, 10, 63, 170, 191, 231, 62, 174, 34, 109, 63, 139, 201, 111, 62, 33, 135, 173, 190, 200, 107, 84, 61, 194, 4, 99, 63, 41, 172, 153, 190, 157, 195, 116, 191, 171, 107, 47, 190, 57, 106, 196, 190, 87, 112, 87, 191, 236, 69, 0, 63, 15, 148, 63, 62, 45, 204, 195, 190, 48, 102, 45, 63, 197, 99, 171, 62, 250, 139, 118, 63, 79, 135, 126, 62, 15, 93, 177, 190, 47, 252, 251, 189, 82, 149, 71, 190, 184, 93, 11, 191, 220, 120, 170, 191, 130, 238, 137, 190, 232, 42, 58, 190, 50, 248, 30, 63, 131, 118, 232, 62, 68, 138, 120, 62, 100, 249, 67, 63, 91, 100, 123, 190, 137, 249, 241, 61, 227, 10, 9, 63, 30, 189, 166, 190, 157, 78, 157, 62, 165, 98, 68, 191, 248, 75, 173, 189, 100, 224, 65, 63, 171, 203, 244, 189, 85, 237, 174, 60, 3, 54, 144, 62, 152, 208, 117, 191, 249, 70, 147, 190, 41, 180, 135, 62, 233, 171, 229, 190, 14, 254, 57, 63, 93, 207, 102, 191, 51, 105, 91, 63, 119, 102, 153, 62, 99, 211, 150, 62, 139, 21, 129, 190, 228, 15, 164, 190, 185, 203, 194, 62, 99, 198, 91, 191, 166, 132, 36, 190, 249, 161, 138, 190, 207, 255, 5, 191, 118, 4, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 141, 144, 190, 25, 143, 23, 191, 129, 83, 150, 190, 39, 100, 53, 190, 53, 29, 253, 62, 150, 56, 31, 63, 181, 227, 180, 190, 7, 38, 232, 62, 86, 245, 49, 63, 242, 42, 220, 190, 224, 141, 45, 62, 105, 7, 251, 62, 247, 104, 153, 189, 87, 138, 155, 189, 159, 100, 51, 190, 38, 105, 233, 62, 156, 213, 176, 190, 78, 211, 208, 61, 155, 218, 31, 62, 137, 89, 149, 190, 80, 87, 52, 63, 128, 220, 111, 189, 46, 213, 27, 63, 157, 185, 230, 62, 48, 158, 133, 61, 16, 190, 30, 190, 165, 184, 2, 62, 171, 176, 16, 189, 22, 155, 44, 62, 133, 138, 50, 190, 125, 116, 88, 62, 131, 59, 182, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 243, 142, 190, 131, 60, 114, 190, 154, 128, 130, 190, 77, 2, 36, 191, 252, 8, 141, 62, 96, 78, 67, 62, 55, 46, 214, 62, 149, 146, 214, 61, 69, 83, 56, 62, 74, 71, 39, 191, 98, 144, 2, 191, 135, 5, 32, 62, 56, 196, 135, 189, 2, 36, 158, 62, 227, 60, 51, 190, 38, 171, 179, 60, 46, 82, 255, 62, 37, 63, 62, 190, 66, 29, 11, 62, 90, 228, 37, 61, 17, 1, 7, 190, 52, 13, 201, 190, 191, 97, 68, 62, 41, 83, 171, 189, 250, 156, 53, 61, 144, 27, 164, 61, 154, 25, 139, 190, 97, 230, 130, 62, 208, 22, 196, 189, 230, 90, 190, 189, 228, 206, 38, 190, 29, 172, 29, 62, 195, 59, 23, 189, 103, 116, 133, 61, 123, 68, 120, 61, 7, 148, 184, 62, 200, 71, 139, 190, 228, 216, 176, 189, 35, 59, 190, 190, 10, 247, 5, 61, 117, 103, 149, 190, 46, 233, 238, 60, 168, 149, 75, 62, 164, 239, 185, 61, 70, 132, 134, 62, 176, 118, 6, 191, 78, 108, 163, 61, 71, 181, 160, 62, 251, 221, 191, 190, 46, 68, 47, 62, 176, 64, 14, 190, 178, 98, 130, 190, 172, 21, 62, 62, 82, 7, 59, 62, 117, 253, 45, 190, 99, 232, 166, 189, 188, 238, 164, 62, 237, 183, 42, 189, 153, 187, 101, 190, 198, 241, 199, 190, 186, 137, 136, 62, 237, 252, 43, 190, 122, 87, 153, 62, 110, 198, 245, 57, 109, 140, 45, 60, 75, 140, 255, 61, 82, 144, 177, 188, 37, 156, 10, 190, 119, 157, 161, 61, 29, 199, 22, 190, 159, 189, 31, 62, 122, 171, 238, 189, 140, 167, 41, 190, 11, 180, 200, 188, 150, 9, 97, 188, 222, 182, 18, 189, 4, 212, 22, 62, 146, 114, 45, 61, 219, 198, 73, 186, 193, 70, 4, 62, 170, 189, 16, 190, 239, 198, 247, 189, 177, 154, 147, 61, 189, 119, 206, 60, 122, 96, 181, 61, 198, 157, 214, 189, 63, 23, 203, 189, 69, 49, 252, 188, 251, 13, 198, 189, 142, 56, 117, 61, 113, 7, 118, 60, 108, 17, 93, 61, 185, 51, 237, 189, 15, 27, 16, 61, 85, 214, 161, 189, 236, 199, 134, 61, 198, 50, 31, 62, 183, 136, 159, 60, 29, 242, 191, 61, 194, 43, 147, 191, 131, 22, 113, 62, 28, 252, 90, 189, 189, 167, 1, 191, 168, 132, 163, 191, 94, 154, 141, 62, 58, 95, 43, 190, 226, 147, 37, 190, 21, 32, 145, 61, 53, 70, 207, 60, 252, 54, 6, 190, 183, 126, 3, 190, 181, 116, 137, 62, 82, 249, 52, 63, 5, 7, 117, 190, 202, 108, 195, 190, 81, 32, 234, 61, 165, 177, 39, 62, 247, 217, 141, 190, 73, 184, 140, 190, 159, 125, 65, 190, 247, 88, 143, 60, 81, 15, 142, 62, 241, 9, 77, 187, 39, 223, 90, 62, 197, 142, 27, 190, 157, 116, 15, 62, 108, 93, 225, 189, 34, 221, 70, 62, 143, 96, 163, 190, 55, 97, 132, 191, 57, 244, 152, 190, 112, 243, 60, 191, 95, 192, 106, 61, 49, 144, 211, 60, 171, 117, 206, 61, 154, 216, 39, 191, 173, 70, 160, 62, 200, 42, 33, 191, 24, 33, 14, 190, 60, 236, 108, 62, 167, 127, 66, 191, 138, 130, 70, 62, 39, 55, 53, 191, 72, 49, 57, 62, 128, 8, 22, 190, 42, 51, 54, 191, 119, 247, 13, 62, 169, 121, 237, 59, 13, 22, 102, 62, 112, 102, 63, 191, 191, 145, 145, 62, 53, 228, 173, 189, 179, 83, 14, 189, 137, 140, 105, 62, 73, 153, 165, 189, 10, 192, 170, 189, 97, 249, 111, 190, 41, 128, 170, 190, 16, 138, 109, 190, 115, 26, 204, 189, 36, 11, 35, 62, 70, 134, 31, 189, 231, 85, 38, 190, 118, 109, 140, 59, 19, 172, 218, 185, 121, 112, 246, 61, 56, 69, 112, 188, 42, 165, 34, 190, 30, 59, 207, 61, 166, 148, 72, 60, 194, 41, 165, 60, 0, 180, 212, 189, 185, 13, 66, 189, 21, 246, 82, 189, 244, 2, 88, 61, 131, 96, 17, 189, 176, 140, 124, 61, 76, 168, 109, 187, 42, 234, 63, 189, 253, 32, 62, 61, 63, 14, 39, 190, 243, 62, 10, 62, 10, 171, 15, 190, 17, 173, 92, 189, 247, 42, 60, 190, 108, 136, 33, 190, 59, 118, 51, 190, 176, 203, 110, 59, 61, 208, 210, 189, 90, 129, 199, 189, 179, 187, 50, 60, 216, 241, 185, 61, 48, 53, 87, 189, 140, 183, 2, 62, 13, 166, 228, 189, 2, 149, 39, 62, 58, 82, 178, 189, 60, 17, 166, 190, 178, 139, 188, 190, 53, 98, 196, 189, 236, 25, 9, 60, 209, 66, 243, 60, 23, 46, 137, 190, 48, 20, 51, 62, 193, 232, 193, 188, 52, 136, 5, 190, 52, 4, 1, 59, 118, 72, 246, 61, 172, 16, 135, 190, 132, 189, 191, 60, 163, 204, 84, 190, 10, 63, 3, 191, 235, 152, 112, 190, 167, 150, 129, 61, 13, 220, 168, 189, 80, 95, 62, 190, 235, 139, 71, 190, 216, 217, 54, 190, 31, 15, 62, 190, 223, 16, 42, 191, 125, 128, 149, 62, 198, 55, 75, 189, 233, 184, 88, 190, 106, 225, 25, 188, 233, 166, 196, 190, 219, 66, 41, 190, 176, 162, 62, 190, 8, 236, 164, 191, 149, 175, 146, 62, 218, 133, 25, 190, 84, 174, 146, 190, 210, 18, 181, 191, 113, 58, 171, 62, 191, 166, 131, 191, 165, 138, 182, 190, 179, 208, 134, 189, 109, 99, 220, 190, 245, 163, 182, 189, 198, 49, 26, 191, 200, 7, 7, 62, 216, 183, 22, 63, 101, 60, 164, 190, 178, 63, 130, 190, 93, 232, 12, 190, 35, 176, 73, 62, 2, 141, 137, 190, 150, 249, 42, 62, 218, 152, 133, 190, 155, 79, 232, 189, 150, 232, 186, 189, 32, 81, 131, 189, 64, 57, 42, 190, 131, 131, 156, 189, 149, 253, 13, 188, 103, 125, 148, 190, 67, 99, 78, 62, 156, 116, 226, 190, 46, 97, 22, 62, 209, 139, 251, 189, 111, 41, 35, 189, 170, 217, 247, 61, 49, 129, 183, 62, 52, 55, 225, 188, 143, 204, 186, 61, 120, 79, 136, 190, 3, 157, 125, 189, 217, 227, 225, 61, 57, 125, 251, 61, 197, 255, 143, 62, 49, 97, 82, 190, 247, 228, 217, 61, 141, 85, 206, 62, 27, 140, 234, 189, 117, 227, 90, 62, 202, 67, 136, 188, 54, 252, 130, 190, 200, 126, 55, 62, 160, 147, 200, 189, 146, 197, 63, 61, 52, 192, 21, 189, 228, 149, 21, 61, 123, 50, 152, 61, 253, 212, 181, 189, 230, 89, 137, 190, 207, 12, 209, 61, 250, 174, 147, 190, 20, 82, 160, 61, 224, 99, 0, 62, 58, 104, 90, 190, 30, 228, 129, 62, 62, 254, 160, 61, 95, 7, 37, 62, 33, 37, 114, 61, 86, 141, 89, 61, 36, 173, 254, 190, 134, 0, 48, 190, 213, 187, 11, 60, 70, 173, 189, 61, 185, 147, 127, 62, 4, 250, 143, 62, 176, 136, 58, 62, 82, 90, 69, 191, 155, 230, 35, 62, 4, 21, 132, 62, 157, 226, 41, 190, 74, 195, 100, 62, 160, 101, 232, 190, 126, 188, 96, 189, 199, 51, 105, 61, 37, 147, 59, 189, 180, 76, 82, 189, 101, 175, 83, 187, 207, 191, 220, 62, 153, 13, 170, 59, 26, 203, 95, 61, 213, 29, 213, 190, 59, 17, 13, 62, 158, 104, 180, 61, 139, 110, 165, 62, 170, 61, 180, 62, 100, 222, 107, 190, 0, 234, 24, 190, 232, 187, 17, 191, 83, 153, 234, 189, 248, 8, 110, 62, 135, 193, 177, 61, 158, 155, 178, 62, 182, 84, 32, 62, 153, 20, 11, 62, 139, 138, 200, 190, 188, 69, 241, 190, 109, 207, 110, 189, 227, 68, 196, 189, 163, 141, 14, 62, 151, 87, 8, 190, 193, 86, 161, 190, 152, 250, 74, 62, 118, 228, 53, 189, 126, 201, 128, 62, 18, 204, 20, 59, 136, 104, 66, 61, 32, 146, 212, 189, 174, 184, 29, 59, 161, 212, 135, 62, 27, 196, 208, 190, 154, 156, 20, 63, 225, 45, 41, 191, 138, 102, 117, 62, 132, 66, 240, 190, 31, 63, 164, 190, 191, 135, 20, 191, 179, 169, 249, 61, 12, 179, 206, 190, 202, 138, 150, 62, 150, 199, 231, 188, 182, 0, 153, 59, 164, 53, 14, 62, 209, 179, 231, 61, 223, 126, 180, 190, 38, 180, 53, 62, 236, 159, 157, 189, 180, 115, 41, 62, 58, 102, 64, 61, 68, 25, 166, 62, 80, 115, 149, 62, 157, 238, 214, 189, 86, 196, 193, 61, 62, 47, 200, 61, 214, 254, 193, 190, 39, 61, 86, 62, 29, 182, 191, 61, 151, 221, 140, 61, 237, 127, 123, 62, 189, 199, 11, 62, 131, 79, 163, 61, 131, 250, 239, 189, 229, 145, 151, 62, 69, 102, 237, 187, 244, 104, 13, 62, 89, 184, 59, 190, 180, 192, 144, 188, 23, 62, 80, 190, 157, 176, 252, 61, 181, 87, 87, 189, 201, 247, 137, 62, 57, 65, 153, 62, 184, 96, 20, 61, 192, 114, 24, 60, 169, 97, 14, 190, 201, 110, 143, 190, 129, 3, 87, 62, 35, 224, 59, 62, 221, 194, 10, 190, 125, 112, 190, 62, 21, 92, 247, 188, 240, 22, 19, 190, 84, 145, 174, 62, 96, 160, 253, 61, 99, 239, 25, 188, 220, 103, 173, 190, 157, 9, 82, 62, 153, 216, 117, 62, 212, 131, 121, 188, 59, 252, 171, 189, 247, 211, 84, 60, 141, 242, 6, 62, 125, 57, 61, 60, 144, 66, 103, 62, 1, 1, 60, 62, 76, 72, 222, 189, 65, 100, 209, 61, 156, 134, 65, 62, 116, 89, 141, 61, 232, 132, 150, 62, 29, 59, 221, 189, 71, 156, 152, 187, 183, 236, 180, 190, 117, 156, 116, 62, 82, 117, 112, 189, 221, 11, 155, 62, 108, 142, 241, 189, 176, 232, 8, 62, 250, 211, 138, 189, 98, 167, 86, 62, 73, 153, 130, 190, 242, 77, 196, 61, 162, 197, 112, 62, 117, 76, 136, 60, 171, 130, 104, 62, 250, 234, 21, 190, 26, 57, 85, 62, 26, 230, 141, 62, 183, 125, 152, 190, 166, 220, 87, 62, 116, 121, 7, 61, 53, 226, 192, 188, 129, 100, 213, 61, 75, 203, 94, 187, 235, 203, 137, 190, 120, 231, 11, 189, 5, 139, 148, 61, 218, 157, 170, 62, 166, 163, 200, 61, 191, 7, 206, 189, 42, 228, 135, 62, 82, 58, 145, 190, 157, 90, 183, 62, 116, 120, 30, 62, 7, 121, 116, 190, 51, 229, 168, 189, 18, 120, 171, 61, 101, 110, 12, 61, 240, 221, 239, 61, 155, 143, 31, 62, 105, 155, 139, 190, 37, 238, 12, 191, 249, 167, 49, 61, 207, 47, 189, 62, 138, 158, 241, 61, 205, 151, 111, 62, 175, 24, 253, 190, 16, 245, 18, 62, 110, 201, 153, 190, 126, 5, 55, 61, 87, 225, 210, 61, 117, 248, 45, 191, 125, 218, 19, 190, 48, 134, 155, 61, 226, 100, 18, 60, 228, 120, 153, 61, 98, 157, 102, 62, 108, 1, 164, 61, 188, 95, 65, 190, 67, 241, 35, 188, 35, 25, 114, 62, 34, 201, 192, 189, 92, 31, 92, 62, 223, 166, 251, 189, 76, 16, 143, 59, 133, 54, 82, 62, 174, 151, 84, 62, 96, 230, 146, 190, 71, 29, 60, 189, 152, 40, 58, 188, 184, 32, 243, 60, 127, 92, 5, 190, 121, 142, 175, 62, 121, 230, 17, 189, 46, 205, 34, 60, 74, 137, 122, 61, 200, 175, 61, 189, 77, 50, 161, 60, 194, 63, 157, 61, 213, 201, 8, 62, 189, 187, 244, 61, 107, 82, 9, 191, 2, 59, 54, 62, 186, 214, 53, 62, 50, 52, 125, 62, 217, 74, 215, 61, 59, 39, 195, 190, 86, 79, 201, 190, 119, 60, 142, 61, 165, 195, 224, 61, 114, 168, 127, 57, 116, 146, 99, 62, 217, 47, 122, 61, 32, 11, 139, 62, 110, 171, 133, 190, 203, 88, 128, 62, 216, 101, 85, 190, 197, 242, 182, 190, 162, 53, 207, 190, 244, 242, 145, 190, 107, 201, 26, 190, 90, 230, 204, 190, 97, 57, 79, 190, 181, 173, 254, 61, 237, 100, 162, 62, 151, 112, 195, 62, 144, 231, 135, 61, 185, 185, 144, 190, 25, 136, 156, 190, 227, 151, 23, 62, 79, 91, 99, 189, 77, 94, 219, 62, 189, 159, 177, 190, 0, 68, 165, 190, 128, 123, 82, 190, 9, 102, 173, 62, 98, 63, 192, 62, 72, 196, 221, 188, 48, 120, 99, 190, 81, 228, 188, 189, 138, 205, 175, 62, 161, 52, 219, 61, 255, 188, 133, 189, 86, 0, 15, 62, 0, 236, 92, 190, 59, 127, 35, 62, 81, 223, 159, 190, 1, 238, 30, 190, 94, 44, 139, 61, 71, 147, 25, 61, 43, 116, 4, 62, 188, 82, 90, 190, 225, 239, 43, 62, 100, 230, 118, 61, 44, 68, 171, 62, 4, 195, 23, 189, 111, 164, 73, 62, 116, 8, 43, 62, 66, 190, 2, 190, 67, 63, 9, 191, 131, 129, 196, 189, 101, 168, 81, 62, 187, 208, 195, 61, 76, 13, 30, 62, 50, 110, 182, 189, 8, 4, 90, 189, 61, 198, 193, 190, 239, 123, 204, 189, 118, 154, 152, 62, 193, 207, 40, 62, 149, 231, 7, 190, 130, 105, 168, 190, 113, 6, 51, 62, 190, 142, 118, 62, 97, 205, 116, 62, 8, 76, 161, 62, 203, 245, 72, 62, 215, 1, 13, 189, 13, 129, 202, 189, 245, 22, 65, 61, 68, 73, 157, 62, 158, 51, 46, 190, 197, 140, 181, 190, 104, 118, 212, 62, 78, 17, 53, 62, 81, 88, 251, 61, 225, 58, 133, 190, 194, 70, 115, 62, 138, 87, 218, 190, 130, 231, 21, 60, 94, 183, 109, 190, 143, 152, 67, 62, 50, 33, 146, 62, 38, 127, 201, 189, 251, 16, 224, 62, 207, 69, 11, 191, 216, 122, 168, 61, 188, 254, 12, 62, 195, 122, 176, 190, 141, 18, 75, 62, 162, 193, 69, 60, 122, 182, 181, 190, 85, 192, 186, 60, 18, 5, 104, 62, 127, 155, 154, 189, 47, 65, 128, 189, 19, 222, 73, 62, 213, 120, 58, 61, 145, 153, 93, 61, 215, 77, 154, 190, 105, 52, 167, 62, 41, 46, 40, 62, 164, 239, 170, 62, 19, 98, 131, 61, 253, 8, 99, 190, 254, 190, 3, 63, 149, 66, 155, 62, 255, 103, 173, 62, 154, 12, 124, 61, 242, 212, 165, 62, 226, 161, 35, 191, 25, 100, 146, 59, 234, 200, 186, 190, 29, 18, 205, 60, 206, 115, 137, 61, 38, 164, 126, 61, 216, 59, 169, 62, 127, 251, 48, 191, 45, 126, 234, 61, 216, 189, 130, 62, 190, 49, 10, 191, 142, 172, 3, 63, 199, 59, 149, 190, 129, 115, 82, 190, 188, 233, 171, 189, 15, 22, 235, 61, 91, 183, 181, 189, 241, 124, 17, 62, 151, 22, 172, 61, 105, 50, 50, 62, 120, 190, 246, 61, 152, 2, 184, 190, 16, 231, 148, 62, 93, 175, 104, 62, 240, 15, 102, 62, 244, 83, 54, 190, 240, 64, 45, 191, 249, 175, 48, 62, 19, 110, 6, 62, 19, 177, 251, 189, 18, 90, 61, 190, 194, 7, 148, 62, 204, 147, 211, 61, 43, 78, 159, 61, 90, 101, 133, 62, 73, 253, 31, 62, 190, 153, 153, 189, 13, 60, 42, 62, 75, 48, 10, 62, 5, 100, 80, 190, 69, 135, 23, 62, 194, 164, 41, 190, 7, 149, 153, 61, 167, 103, 172, 62, 29, 36, 131, 62, 9, 73, 98, 190, 175, 145, 224, 190, 230, 67, 21, 62, 22, 184, 64, 61, 199, 208, 3, 62, 240, 114, 91, 61, 33, 160, 11, 61, 16, 24, 20, 190, 244, 146, 119, 61, 70, 150, 82, 190, 168, 114, 27, 191, 167, 135, 31, 62, 228, 223, 244, 60, 193, 234, 52, 190, 219, 115, 181, 61, 149, 145, 140, 189, 29, 97, 125, 61, 119, 233, 237, 189, 8, 117, 231, 189, 5, 111, 50, 190, 79, 89, 40, 190, 212, 32, 214, 189, 88, 243, 188, 189, 102, 198, 93, 61, 109, 89, 49, 189, 24, 225, 203, 189, 1, 118, 4, 190, 4, 200, 190, 189, 33, 231, 246, 189, 80, 7, 143, 187, 226, 54, 51, 190, 104, 242, 210, 61, 152, 210, 22, 62, 61, 251, 237, 189, 192, 223, 199, 60, 68, 194, 89, 189, 31, 40, 193, 189, 158, 26, 45, 190, 177, 184, 124, 188, 252, 124, 187, 189, 153, 18, 12, 61, 187, 240, 248, 189, 195, 217, 221, 189, 131, 68, 49, 62, 233, 175, 241, 61, 120, 144, 183, 60, 84, 214, 98, 190, 44, 208, 18, 62, 99, 173, 117, 190, 183, 87, 31, 62, 255, 128, 30, 62, 45, 74, 165, 62, 45, 91, 46, 61, 48, 37, 229, 59, 146, 7, 211, 190, 125, 211, 20, 190, 252, 20, 195, 60, 208, 130, 9, 61, 135, 253, 150, 61, 68, 37, 109, 189, 109, 179, 23, 190, 216, 201, 66, 62, 146, 42, 144, 61, 210, 203, 130, 62, 199, 35, 28, 62, 121, 136, 16, 61, 171, 126, 166, 190, 31, 98, 44, 62, 121, 210, 64, 61, 214, 155, 183, 62, 239, 134, 5, 63, 4, 81, 252, 189, 229, 92, 41, 62, 76, 26, 39, 190, 125, 74, 163, 61, 2, 143, 168, 62, 138, 247, 3, 62, 100, 255, 114, 190, 24, 57, 81, 186, 163, 164, 217, 189, 248, 163, 91, 62, 149, 137, 105, 61, 20, 249, 51, 62, 176, 41, 88, 62, 221, 114, 49, 61, 223, 67, 79, 61, 72, 33, 62, 191, 98, 232, 207, 190, 125, 214, 124, 62, 9, 247, 137, 62, 31, 226, 175, 187, 44, 160, 54, 60, 66, 221, 5, 191, 12, 240, 198, 61, 97, 165, 3, 62, 97, 78, 51, 62, 134, 36, 81, 61, 151, 9, 3, 191, 166, 183, 200, 189, 98, 4, 57, 62, 97, 169, 161, 62, 120, 80, 218, 189, 199, 36, 130, 190, 84, 196, 199, 190, 207, 0, 54, 62, 100, 251, 214, 61, 181, 11, 47, 190, 226, 12, 225, 188, 198, 54, 175, 189, 217, 61, 144, 190, 203, 201, 46, 62, 244, 144, 30, 62, 188, 190, 111, 61, 229, 199, 191, 61, 122, 10, 134, 62, 45, 158, 66, 60, 130, 32, 68, 62, 223, 119, 111, 189, 180, 236, 254, 61, 116, 3, 161, 61, 238, 19, 150, 62, 166, 240, 121, 188, 108, 38, 184, 61, 122, 240, 59, 62, 215, 83, 166, 62, 184, 246, 83, 188, 78, 245, 192, 61, 70, 68, 32, 59, 126, 197, 199, 61, 120, 93, 130, 60, 247, 15, 75, 185, 164, 168, 232, 189, 198, 240, 148, 61, 116, 229, 59, 62, 211, 90, 196, 61, 130, 74, 51, 62, 118, 64, 18, 188, 216, 169, 80, 62, 19, 83, 89, 189, 204, 247, 69, 62, 123, 127, 25, 189, 33, 88, 245, 189, 238, 136, 9, 189, 37, 61, 67, 189, 81, 244, 78, 190, 168, 21, 183, 61, 250, 229, 229, 190, 7, 40, 79, 58, 181, 126, 252, 59, 147, 180, 148, 62, 33, 22, 157, 189, 59, 232, 203, 190, 87, 71, 151, 190, 103, 60, 52, 62, 177, 180, 110, 190, 167, 105, 72, 62, 116, 169, 62, 190, 1, 83, 230, 62, 127, 157, 103, 188, 126, 118, 219, 188, 16, 206, 152, 190, 195, 143, 237, 60, 36, 177, 122, 61, 149, 87, 189, 190, 135, 192, 158, 190, 66, 98, 33, 189, 89, 213, 40, 190, 101, 17, 252, 190, 14, 100, 140, 61, 88, 6, 202, 59, 78, 5, 150, 60, 157, 23, 55, 190, 236, 9, 146, 61, 86, 210, 221, 190, 31, 30, 36, 62, 169, 124, 225, 189, 170, 223, 147, 61, 204, 10, 249, 189, 203, 212, 3, 62, 8, 27, 105, 59, 180, 149, 31, 62, 175, 115, 26, 62, 248, 162, 73, 190, 22, 49, 56, 189, 207, 236, 211, 61, 220, 238, 68, 62, 75, 146, 168, 189, 18, 196, 133, 189, 35, 14, 12, 191, 134, 74, 28, 62, 224, 28, 90, 62, 210, 65, 11, 62, 50, 8, 42, 190, 150, 100, 249, 190, 218, 97, 111, 188, 246, 168, 188, 62, 52, 39, 181, 61, 82, 157, 73, 62, 110, 46, 68, 190, 215, 120, 58, 189, 24, 227, 214, 61, 45, 217, 52, 188, 44, 206, 245, 190, 241, 16, 24, 190, 31, 9, 3, 190, 226, 233, 186, 61, 190, 49, 49, 190, 43, 250, 123, 187, 196, 185, 131, 61, 217, 33, 169, 61, 207, 59, 133, 189, 161, 15, 1, 62, 116, 218, 183, 61, 166, 100, 83, 61, 99, 80, 12, 62, 161, 198, 121, 189, 240, 18, 159, 189, 178, 212, 215, 61, 36, 121, 229, 188, 11, 235, 220, 188, 212, 245, 48, 190, 39, 106, 33, 190, 83, 202, 3, 190, 226, 74, 241, 189, 214, 72, 180, 188, 75, 124, 123, 189, 222, 241, 186, 61, 100, 170, 27, 190, 93, 63, 52, 190, 194, 224, 220, 61, 34, 134, 236, 188, 152, 131, 39, 61, 33, 229, 156, 60, 229, 225, 49, 190, 200, 72, 16, 60, 136, 45, 16, 190, 12, 20, 196, 59, 40, 101, 144, 190, 207, 89, 243, 190, 119, 231, 95, 190, 100, 101, 20, 191, 235, 127, 148, 61, 185, 103, 233, 187, 21, 31, 130, 61, 11, 222, 254, 59, 140, 58, 129, 189, 71, 255, 208, 190, 99, 77, 85, 190, 65, 202, 144, 62, 62, 219, 220, 59, 51, 188, 112, 61, 201, 95, 210, 190, 175, 226, 152, 61, 46, 7, 91, 190, 52, 97, 140, 61, 246, 92, 31, 62, 165, 208, 139, 189, 175, 122, 28, 190, 14, 143, 102, 191, 117, 129, 136, 62, 187, 174, 134, 61, 188, 118, 222, 61, 117, 38, 246, 62, 160, 206, 32, 190, 6, 145, 205, 61, 206, 203, 205, 61, 59, 163, 170, 190, 76, 138, 27, 190, 241, 222, 66, 62, 134, 241, 0, 62, 49, 53, 23, 189, 205, 149, 156, 188, 155, 210, 149, 190, 195, 67, 139, 62, 80, 201, 87, 61, 224, 238, 159, 190, 168, 2, 180, 190, 82, 55, 123, 62, 210, 133, 28, 63, 99, 47, 52, 190, 187, 130, 30, 62, 211, 65, 177, 190, 106, 18, 7, 190, 107, 203, 52, 190, 216, 187, 8, 60, 40, 254, 31, 190, 216, 74, 37, 191, 102, 34, 92, 190, 122, 37, 106, 62, 201, 231, 140, 189, 20, 64, 86, 61, 182, 181, 115, 62, 54, 39, 71, 189, 226, 189, 222, 190, 79, 16, 15, 191, 196, 46, 5, 188, 26, 63, 235, 190, 169, 191, 104, 62, 115, 115, 4, 62, 50, 160, 40, 191, 110, 247, 107, 61, 118, 175, 37, 190, 216, 116, 223, 61, 105, 205, 147, 61, 231, 186, 13, 189, 35, 79, 75, 61, 125, 217, 44, 190, 73, 70, 149, 189, 229, 173, 188, 189, 248, 20, 10, 189, 97, 96, 15, 62, 138, 78, 215, 188, 178, 84, 197, 61, 151, 252, 160, 61, 112, 6, 53, 190, 207, 154, 24, 61, 133, 119, 197, 189, 171, 174, 23, 61, 154, 40, 10, 61, 245, 181, 39, 190, 1, 87, 14, 62, 85, 167, 156, 189, 132, 37, 194, 189, 227, 55, 231, 61, 199, 37, 15, 190, 55, 59, 211, 188, 80, 16, 165, 61, 105, 15, 234, 189, 107, 246, 13, 190, 18, 248, 61, 189, 162, 187, 171, 189, 38, 17, 8, 190, 15, 142, 97, 61, 133, 111, 232, 189, 135, 112, 148, 189, 126, 124, 45, 62, 141, 72, 150, 189, 77, 133, 231, 189, 102, 158, 56, 60, 118, 201, 244, 189, 138, 82, 18, 61, 232, 250, 136, 61, 71, 143, 42, 190, 162, 97, 205, 60, 89, 211, 138, 189, 87, 37, 4, 190, 221, 201, 3, 62, 243, 98, 139, 60, 122, 242, 94, 189, 213, 49, 46, 190, 214, 77, 234, 61, 232, 80, 26, 190, 231, 191, 93, 61, 142, 32, 23, 190, 184, 26, 138, 61, 12, 183, 7, 190, 173, 183, 237, 189, 183, 231, 140, 61, 242, 47, 4, 190, 72, 117, 31, 62, 14, 167, 31, 190, 6, 3, 22, 62, 180, 70, 50, 60, 106, 176, 187, 61, 127, 33, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 134, 13, 62, 189, 21, 134, 61, 162, 116, 129, 189, 204, 18, 95, 61, 16, 21, 21, 62, 55, 192, 123, 189, 254, 143, 42, 62, 79, 138, 15, 62, 238, 81, 172, 62, 126, 157, 86, 62, 21, 31, 53, 190, 243, 14, 168, 62, 119, 168, 145, 190, 235, 20, 33, 58, 135, 202, 195, 188, 38, 66, 159, 190, 239, 96, 66, 61, 77, 56, 5, 62, 13, 92, 240, 61, 181, 157, 78, 62, 118, 27, 188, 61, 105, 230, 173, 189, 11, 83, 30, 62, 92, 53, 39, 62, 112, 133, 76, 60, 75, 32, 166, 189, 32, 58, 44, 62, 91, 146, 27, 190, 160, 20, 153, 62, 81, 255, 73, 190, 193, 167, 139, 61, 49, 70, 203, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 63, 73, 191, 81, 140, 190, 62, 81, 188, 56, 189, 33, 184, 16, 191, 99, 64, 108, 191, 148, 36, 40, 61, 94, 89, 45, 63, 84, 131, 133, 191, 92, 152, 23, 62, 8, 112, 233, 62, 97, 152, 151, 63, 133, 168, 101, 62, 100, 87, 30, 190, 211, 240, 147, 62, 234, 13, 190, 62, 208, 242, 190, 190, 217, 105, 71, 191, 30, 55, 78, 190, 210, 193, 83, 62, 223, 190, 12, 63, 230, 225, 105, 190, 155, 214, 28, 62, 38, 96, 58, 190, 28, 223, 148, 190, 212, 254, 60, 62, 253, 96, 129, 190, 42, 73, 173, 190, 218, 31, 21, 62, 23, 234, 108, 190, 116, 250, 13, 63, 204, 246, 30, 62, 84, 97, 17, 189, 53, 93, 120, 62, 255, 102, 163, 62, 128, 245, 159, 189, 185, 65, 204, 61, 234, 142, 60, 190, 50, 129, 46, 61, 58, 0, 217, 61, 3, 175, 230, 61, 163, 205, 30, 190, 179, 141, 50, 62, 143, 222, 207, 62, 79, 249, 115, 190, 108, 66, 93, 62, 115, 18, 15, 190, 186, 152, 49, 61, 11, 236, 117, 62, 111, 125, 99, 61, 199, 185, 36, 190, 7, 206, 121, 61, 120, 132, 180, 60, 168, 133, 35, 190, 162, 190, 147, 189, 109, 171, 98, 190, 3, 142, 24, 62, 194, 103, 189, 189, 29, 225, 187, 189, 219, 253, 16, 189, 108, 163, 228, 61, 200, 59, 152, 190, 83, 235, 11, 59, 203, 153, 15, 62, 239, 128, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 255, 91, 62, 254, 87, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 48, 102, 192, 196, 81, 162, 190, 38, 105, 145, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {234, 26, 73, 64, 250, 140, 117, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0063/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}