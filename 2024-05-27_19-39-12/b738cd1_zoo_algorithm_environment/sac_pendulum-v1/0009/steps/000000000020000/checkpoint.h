// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 156, 57, 63, 121, 248, 143, 62, 83, 149, 135, 62, 127, 140, 103, 190, 16, 72, 175, 63, 95, 158, 154, 62, 143, 148, 230, 189, 161, 197, 75, 63, 111, 247, 205, 190, 10, 215, 86, 190, 178, 6, 76, 191, 233, 32, 248, 190, 241, 247, 97, 191, 52, 14, 36, 63, 139, 70, 204, 60, 119, 223, 90, 189, 113, 84, 96, 62, 47, 50, 72, 191, 245, 179, 83, 190, 177, 229, 80, 63, 80, 31, 111, 189, 171, 253, 26, 191, 153, 122, 203, 190, 118, 113, 251, 62, 228, 255, 148, 61, 206, 173, 8, 190, 106, 130, 231, 190, 2, 172, 249, 62, 231, 115, 160, 63, 227, 242, 31, 62, 104, 86, 13, 63, 59, 212, 96, 191, 129, 113, 19, 61, 116, 205, 59, 189, 219, 157, 119, 63, 200, 245, 57, 62, 18, 113, 29, 191, 226, 181, 253, 62, 202, 155, 67, 62, 29, 108, 8, 63, 249, 3, 173, 62, 8, 140, 192, 62, 118, 248, 50, 63, 156, 35, 19, 191, 142, 162, 20, 61, 61, 38, 178, 62, 207, 241, 182, 190, 227, 92, 225, 190, 227, 192, 128, 62, 2, 213, 220, 62, 23, 250, 217, 62, 27, 188, 111, 62, 227, 173, 183, 61, 218, 216, 29, 63, 125, 50, 150, 190, 46, 104, 255, 190, 210, 88, 207, 62, 122, 12, 37, 191, 106, 32, 160, 63, 172, 84, 139, 62, 120, 44, 196, 190, 144, 188, 8, 63, 196, 58, 73, 63, 22, 217, 63, 191, 191, 38, 109, 191, 124, 158, 42, 189, 212, 194, 45, 63, 204, 200, 144, 191, 34, 119, 193, 190, 128, 221, 127, 188, 81, 110, 58, 63, 188, 136, 133, 190, 129, 0, 125, 189, 173, 45, 38, 190, 8, 207, 28, 191, 243, 124, 44, 63, 68, 224, 69, 63, 110, 51, 150, 62, 47, 33, 92, 63, 0, 59, 120, 191, 140, 153, 157, 190, 234, 183, 52, 63, 51, 32, 5, 63, 224, 66, 121, 62, 71, 223, 238, 62, 100, 103, 38, 190, 220, 84, 38, 188, 89, 203, 11, 190, 74, 204, 168, 191, 212, 119, 53, 190, 192, 10, 62, 63, 212, 38, 166, 191, 141, 204, 157, 190, 125, 240, 144, 191, 37, 75, 31, 191, 40, 24, 6, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 73, 54, 191, 115, 133, 125, 190, 41, 231, 158, 62, 251, 244, 168, 190, 79, 67, 82, 63, 47, 237, 148, 62, 151, 157, 92, 62, 254, 60, 25, 191, 201, 5, 7, 190, 105, 13, 109, 190, 250, 80, 144, 189, 48, 107, 143, 190, 167, 147, 53, 63, 17, 134, 19, 190, 112, 223, 203, 62, 110, 116, 109, 191, 24, 77, 6, 62, 35, 16, 193, 189, 145, 146, 81, 62, 242, 105, 131, 61, 52, 173, 201, 60, 61, 26, 148, 189, 157, 137, 191, 62, 119, 1, 45, 190, 213, 65, 7, 191, 168, 71, 159, 190, 227, 143, 224, 190, 235, 84, 46, 190, 162, 146, 146, 62, 142, 7, 195, 190, 208, 6, 156, 62, 82, 51, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 21, 78, 191, 129, 239, 100, 62, 252, 137, 80, 189, 117, 161, 0, 190, 150, 140, 151, 62, 70, 114, 229, 61, 168, 230, 4, 62, 159, 48, 27, 190, 94, 182, 45, 190, 75, 201, 186, 190, 110, 175, 167, 58, 152, 132, 81, 61, 80, 101, 105, 62, 148, 18, 41, 191, 156, 223, 4, 62, 236, 143, 19, 190, 70, 219, 235, 190, 112, 34, 236, 190, 160, 134, 5, 62, 116, 190, 11, 62, 171, 138, 174, 61, 239, 118, 158, 61, 53, 74, 237, 61, 87, 187, 98, 190, 28, 85, 97, 61, 50, 5, 44, 191, 65, 131, 125, 191, 29, 139, 192, 190, 19, 136, 56, 61, 207, 217, 129, 189, 0, 16, 135, 59, 154, 63, 242, 189, 146, 124, 248, 61, 233, 96, 85, 190, 2, 108, 2, 190, 235, 245, 46, 190, 247, 183, 223, 189, 188, 144, 131, 189, 23, 170, 4, 189, 101, 2, 30, 190, 21, 177, 210, 189, 111, 157, 181, 61, 94, 77, 205, 61, 9, 56, 114, 187, 226, 82, 187, 60, 208, 246, 102, 188, 133, 240, 35, 189, 175, 163, 87, 189, 136, 60, 138, 61, 223, 92, 11, 189, 176, 119, 67, 189, 16, 155, 19, 189, 180, 186, 69, 190, 111, 77, 154, 189, 126, 252, 18, 189, 219, 74, 1, 190, 109, 116, 202, 61, 57, 88, 70, 190, 190, 90, 1, 188, 123, 190, 206, 188, 171, 133, 214, 187, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 91, 98, 63, 190, 9, 147, 37, 190, 56, 132, 21, 62, 5, 155, 130, 189, 87, 199, 58, 191, 217, 188, 180, 62, 80, 224, 160, 190, 43, 15, 38, 62, 176, 111, 34, 62, 181, 59, 32, 191, 36, 111, 161, 62, 201, 119, 139, 190, 222, 16, 177, 191, 132, 176, 167, 190, 151, 175, 35, 61, 180, 196, 17, 188, 143, 212, 148, 189, 79, 30, 136, 190, 66, 61, 184, 189, 139, 203, 36, 191, 70, 23, 120, 190, 195, 95, 149, 190, 207, 199, 150, 61, 124, 208, 176, 61, 17, 111, 165, 61, 253, 200, 129, 190, 60, 145, 243, 189, 232, 247, 21, 62, 203, 202, 130, 62, 229, 46, 16, 191, 108, 162, 213, 62, 43, 105, 30, 191, 77, 199, 252, 190, 246, 252, 195, 61, 2, 92, 77, 190, 222, 20, 201, 191, 97, 40, 121, 62, 111, 20, 78, 191, 211, 94, 85, 190, 144, 85, 210, 62, 123, 81, 202, 190, 137, 156, 227, 59, 129, 36, 67, 190, 222, 196, 215, 188, 70, 131, 140, 62, 105, 6, 105, 190, 19, 34, 10, 62, 79, 58, 25, 190, 44, 85, 43, 61, 232, 184, 87, 190, 116, 218, 209, 62, 16, 219, 113, 62, 175, 175, 64, 61, 204, 208, 100, 62, 198, 139, 210, 190, 217, 224, 99, 191, 209, 49, 233, 60, 128, 99, 11, 190, 217, 205, 75, 62, 131, 53, 2, 191, 181, 158, 96, 61, 144, 209, 37, 62, 8, 181, 132, 190, 53, 119, 209, 62, 90, 88, 129, 191, 36, 195, 226, 189, 127, 128, 159, 189, 39, 145, 36, 191, 104, 170, 230, 190, 14, 61, 196, 190, 148, 130, 157, 191, 9, 129, 154, 189, 214, 59, 70, 191, 103, 98, 189, 190, 66, 155, 28, 61, 254, 25, 58, 189, 250, 39, 85, 189, 136, 100, 131, 62, 87, 130, 227, 61, 193, 36, 35, 61, 38, 124, 14, 62, 77, 2, 198, 59, 58, 35, 136, 62, 204, 210, 247, 189, 239, 255, 250, 60, 219, 253, 17, 190, 90, 222, 132, 61, 176, 45, 14, 190, 205, 86, 189, 190, 109, 192, 64, 190, 56, 110, 242, 187, 28, 179, 149, 188, 212, 46, 64, 62, 97, 189, 95, 191, 35, 135, 25, 189, 166, 156, 86, 62, 200, 11, 206, 188, 86, 255, 54, 190, 47, 54, 240, 61, 184, 196, 109, 190, 188, 13, 202, 62, 56, 185, 129, 188, 147, 244, 187, 62, 189, 162, 3, 190, 167, 65, 136, 190, 94, 55, 47, 63, 154, 124, 66, 191, 165, 220, 142, 62, 131, 118, 83, 61, 238, 181, 14, 190, 87, 7, 37, 61, 228, 15, 142, 191, 193, 69, 29, 62, 59, 55, 192, 190, 171, 166, 86, 190, 86, 115, 131, 61, 134, 197, 167, 190, 39, 61, 35, 63, 54, 1, 33, 191, 46, 111, 42, 62, 68, 223, 171, 190, 87, 58, 196, 62, 230, 97, 33, 191, 106, 177, 155, 62, 72, 138, 102, 61, 219, 212, 200, 62, 103, 203, 210, 191, 139, 244, 45, 63, 134, 1, 10, 62, 121, 25, 231, 189, 84, 161, 2, 190, 143, 150, 164, 58, 234, 97, 122, 61, 244, 17, 175, 61, 190, 206, 202, 188, 56, 130, 187, 61, 186, 191, 184, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 159, 119, 65, 60, 22, 253, 158, 61, 56, 24, 185, 61, 92, 62, 17, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 183, 57, 32, 61, 7, 116, 14, 189, 249, 46, 247, 189, 58, 233, 159, 188, 45, 204, 13, 190, 151, 83, 81, 187, 125, 228, 46, 190, 96, 170, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 194, 20, 127, 61, 120, 226, 115, 189, 124, 225, 17, 189, 226, 201, 244, 189, 160, 236, 13, 61, 97, 215, 49, 61, 103, 215, 190, 191, 132, 222, 146, 62, 62, 207, 173, 190, 31, 254, 146, 61, 181, 17, 97, 62, 134, 59, 124, 190, 82, 95, 2, 62, 103, 144, 39, 190, 170, 85, 239, 61, 37, 59, 151, 61, 12, 89, 55, 190, 67, 219, 244, 189, 80, 202, 131, 190, 21, 162, 56, 190, 42, 38, 220, 189, 192, 151, 89, 62, 202, 97, 35, 62, 202, 130, 131, 62, 139, 35, 165, 62, 61, 14, 134, 62, 209, 44, 37, 190, 91, 161, 142, 190, 240, 23, 61, 190, 104, 34, 146, 62, 73, 223, 143, 190, 249, 22, 157, 190, 247, 224, 52, 190, 161, 186, 75, 62, 194, 29, 37, 62, 90, 15, 30, 190, 225, 226, 251, 61, 190, 232, 18, 190, 174, 77, 2, 61, 73, 10, 194, 188, 10, 203, 195, 61, 5, 5, 0, 190, 202, 127, 1, 62, 15, 15, 234, 189, 51, 27, 3, 61, 112, 1, 20, 190, 187, 51, 36, 189, 192, 110, 218, 61, 111, 173, 246, 189, 173, 72, 148, 61, 102, 150, 202, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 121, 30, 245, 189, 101, 236, 236, 188, 7, 147, 130, 61, 15, 219, 75, 186, 139, 248, 189, 189, 69, 71, 25, 62, 229, 159, 11, 59, 134, 194, 191, 61, 4, 42, 240, 58, 21, 214, 21, 190, 0, 212, 146, 188, 45, 137, 248, 190, 10, 41, 16, 190, 199, 11, 25, 62, 15, 78, 11, 61, 184, 156, 138, 62, 231, 68, 147, 189, 177, 238, 145, 61, 128, 54, 129, 189, 32, 45, 23, 190, 74, 211, 2, 191, 95, 164, 17, 62, 155, 213, 30, 190, 65, 72, 97, 62, 110, 134, 168, 59, 105, 43, 63, 62, 221, 68, 72, 190, 113, 83, 2, 62, 10, 155, 212, 189, 35, 79, 199, 60, 91, 128, 90, 190, 94, 6, 91, 61, 65, 117, 249, 189, 54, 17, 201, 61, 12, 112, 251, 189, 135, 175, 117, 190, 104, 183, 149, 190, 242, 48, 167, 190, 30, 254, 113, 61, 226, 239, 23, 62, 203, 139, 250, 188, 82, 23, 55, 62, 31, 13, 62, 190, 80, 249, 110, 190, 158, 59, 40, 190, 169, 63, 78, 190, 2, 145, 161, 189, 225, 240, 50, 191, 81, 194, 250, 189, 195, 163, 96, 191, 94, 132, 24, 191, 217, 232, 189, 189, 180, 154, 244, 190, 3, 153, 223, 61, 107, 97, 83, 190, 236, 246, 131, 62, 28, 66, 196, 190, 168, 238, 207, 59, 178, 130, 105, 62, 214, 89, 149, 190, 137, 76, 61, 187, 218, 230, 6, 62, 79, 209, 105, 61, 172, 229, 31, 191, 84, 20, 175, 190, 61, 96, 32, 62, 46, 162, 42, 191, 101, 58, 120, 61, 51, 147, 169, 190, 243, 40, 57, 63, 157, 228, 12, 191, 165, 245, 153, 62, 83, 244, 144, 61, 219, 112, 57, 62, 8, 215, 228, 189, 79, 167, 115, 190, 110, 206, 66, 59, 49, 17, 39, 191, 139, 101, 249, 190, 25, 72, 53, 188, 77, 147, 216, 190, 211, 198, 132, 62, 57, 22, 52, 62, 122, 107, 196, 190, 91, 247, 183, 189, 154, 248, 229, 61, 138, 236, 185, 189, 201, 195, 140, 61, 231, 56, 74, 188, 188, 6, 252, 60, 14, 241, 28, 61, 156, 83, 24, 188, 77, 65, 226, 61, 12, 145, 146, 61, 183, 56, 111, 60, 8, 30, 101, 62, 247, 76, 131, 190, 114, 49, 203, 190, 105, 67, 0, 191, 61, 23, 155, 60, 242, 70, 131, 190, 38, 191, 234, 190, 28, 212, 29, 61, 232, 250, 226, 61, 127, 211, 255, 190, 96, 236, 58, 190, 126, 41, 200, 62, 161, 140, 154, 190, 111, 249, 76, 59, 183, 84, 86, 188, 204, 77, 251, 189, 221, 139, 151, 190, 41, 69, 202, 189, 153, 236, 43, 62, 93, 99, 90, 62, 59, 245, 129, 60, 146, 205, 101, 191, 152, 108, 23, 62, 255, 255, 217, 61, 90, 239, 31, 191, 78, 67, 73, 191, 39, 234, 38, 62, 22, 85, 166, 190, 165, 60, 253, 190, 29, 142, 63, 62, 88, 6, 207, 62, 215, 145, 152, 190, 226, 147, 27, 190, 159, 23, 197, 61, 217, 93, 63, 62, 136, 175, 62, 62, 59, 213, 127, 62, 239, 82, 141, 191, 36, 225, 146, 62, 92, 210, 161, 190, 35, 149, 98, 59, 174, 86, 216, 190, 195, 166, 64, 62, 40, 49, 39, 191, 22, 201, 127, 191, 132, 99, 175, 190, 217, 231, 123, 62, 78, 22, 255, 188, 1, 202, 166, 62, 252, 162, 128, 62, 240, 249, 104, 189, 236, 71, 82, 191, 83, 25, 63, 189, 112, 60, 112, 190, 4, 190, 193, 188, 7, 124, 158, 190, 29, 113, 148, 62, 197, 91, 203, 189, 45, 175, 128, 189, 232, 132, 169, 185, 248, 183, 16, 62, 95, 215, 172, 189, 116, 136, 159, 189, 236, 73, 100, 189, 148, 242, 110, 190, 47, 51, 190, 189, 206, 24, 159, 62, 23, 48, 31, 62, 40, 110, 130, 190, 135, 190, 144, 61, 224, 215, 65, 189, 44, 213, 27, 62, 134, 45, 93, 62, 132, 118, 101, 62, 46, 57, 117, 62, 19, 118, 145, 189, 245, 92, 83, 191, 153, 142, 170, 62, 71, 242, 135, 190, 232, 58, 5, 192, 46, 162, 42, 62, 170, 73, 145, 191, 27, 97, 23, 190, 210, 61, 63, 62, 204, 38, 11, 191, 165, 241, 251, 190, 74, 13, 138, 62, 22, 183, 53, 61, 155, 65, 109, 62, 103, 48, 175, 190, 190, 176, 238, 61, 25, 232, 39, 190, 221, 191, 130, 189, 137, 231, 98, 190, 140, 79, 243, 62, 38, 218, 160, 62, 138, 145, 195, 189, 37, 248, 190, 62, 232, 185, 26, 190, 185, 122, 131, 190, 102, 251, 18, 190, 54, 85, 46, 191, 45, 163, 83, 62, 39, 225, 220, 190, 54, 26, 156, 62, 91, 60, 166, 61, 71, 158, 149, 61, 247, 187, 150, 61, 124, 121, 4, 191, 79, 205, 149, 190, 117, 58, 18, 191, 26, 210, 138, 62, 85, 122, 6, 62, 199, 7, 18, 191, 214, 245, 35, 190, 201, 117, 232, 188, 68, 40, 30, 191, 170, 144, 174, 190, 30, 101, 232, 62, 168, 232, 224, 188, 0, 10, 165, 61, 191, 192, 173, 61, 148, 87, 249, 61, 33, 114, 92, 190, 79, 1, 138, 62, 247, 112, 200, 60, 94, 83, 56, 62, 206, 85, 128, 190, 4, 78, 158, 61, 41, 120, 127, 190, 16, 210, 90, 61, 104, 18, 112, 190, 102, 47, 187, 188, 17, 165, 171, 189, 179, 250, 206, 190, 12, 141, 95, 62, 217, 160, 151, 62, 170, 249, 149, 62, 126, 42, 202, 188, 4, 199, 79, 63, 27, 238, 225, 189, 4, 7, 62, 62, 66, 195, 154, 61, 122, 92, 41, 189, 206, 53, 14, 189, 10, 13, 182, 61, 194, 30, 141, 62, 22, 72, 10, 191, 145, 218, 87, 62, 141, 118, 13, 63, 145, 240, 205, 190, 251, 128, 185, 62, 181, 62, 107, 190, 59, 35, 171, 189, 43, 33, 154, 60, 185, 143, 85, 62, 228, 186, 137, 62, 109, 135, 110, 190, 222, 119, 253, 190, 65, 133, 20, 62, 47, 31, 59, 190, 101, 63, 203, 190, 56, 19, 5, 62, 217, 135, 222, 61, 117, 235, 161, 188, 158, 151, 60, 62, 172, 200, 128, 62, 218, 185, 142, 61, 111, 152, 60, 62, 221, 232, 181, 190, 122, 156, 103, 190, 113, 64, 109, 190, 253, 196, 199, 62, 229, 184, 229, 191, 173, 168, 147, 62, 95, 22, 147, 189, 181, 154, 101, 62, 6, 1, 183, 189, 181, 240, 202, 62, 135, 128, 216, 190, 35, 79, 173, 62, 173, 64, 184, 62, 146, 167, 142, 190, 74, 91, 175, 191, 9, 1, 163, 62, 8, 203, 29, 63, 79, 180, 169, 190, 211, 87, 223, 190, 44, 106, 69, 189, 83, 237, 205, 62, 20, 232, 56, 62, 185, 152, 216, 191, 79, 12, 207, 191, 8, 154, 65, 62, 48, 1, 251, 189, 6, 132, 26, 62, 209, 91, 5, 191, 16, 71, 103, 62, 29, 147, 21, 191, 158, 171, 146, 62, 92, 26, 77, 62, 9, 193, 51, 63, 204, 204, 154, 190, 95, 219, 117, 62, 75, 252, 61, 191, 244, 174, 192, 190, 140, 173, 109, 62, 89, 202, 178, 188, 187, 219, 23, 63, 175, 225, 143, 60, 191, 174, 14, 62, 155, 42, 22, 191, 75, 46, 110, 62, 52, 225, 217, 190, 23, 26, 173, 189, 188, 72, 47, 191, 191, 107, 44, 63, 91, 136, 230, 61, 47, 104, 50, 191, 129, 192, 185, 188, 227, 93, 29, 62, 124, 19, 73, 62, 196, 198, 172, 61, 183, 82, 134, 189, 253, 14, 171, 190, 237, 105, 155, 62, 101, 140, 62, 189, 237, 227, 12, 62, 35, 216, 114, 61, 119, 222, 77, 189, 120, 74, 157, 189, 149, 176, 153, 190, 116, 12, 170, 190, 182, 46, 40, 63, 80, 28, 125, 61, 252, 192, 48, 63, 152, 40, 123, 191, 16, 250, 83, 190, 180, 124, 30, 61, 80, 21, 164, 190, 241, 13, 134, 191, 150, 149, 148, 184, 228, 255, 191, 189, 187, 162, 189, 62, 44, 142, 101, 189, 168, 171, 8, 191, 133, 237, 199, 62, 89, 209, 133, 60, 99, 92, 12, 191, 194, 242, 149, 190, 210, 194, 118, 62, 10, 173, 175, 189, 223, 21, 249, 60, 179, 84, 115, 190, 113, 109, 82, 58, 207, 121, 129, 190, 119, 80, 57, 61, 211, 183, 138, 62, 52, 6, 33, 62, 143, 176, 82, 190, 65, 189, 67, 62, 65, 155, 175, 190, 193, 228, 154, 189, 64, 114, 11, 189, 169, 141, 139, 62, 43, 199, 185, 188, 119, 43, 117, 62, 118, 39, 6, 191, 59, 214, 242, 190, 22, 114, 131, 190, 97, 20, 238, 61, 219, 23, 74, 190, 3, 140, 148, 190, 216, 182, 110, 189, 4, 44, 159, 190, 22, 60, 229, 62, 61, 26, 237, 61, 192, 167, 16, 191, 156, 44, 144, 62, 161, 141, 171, 190, 94, 96, 104, 191, 170, 59, 147, 190, 244, 189, 204, 62, 16, 20, 0, 61, 148, 78, 148, 189, 238, 199, 155, 61, 83, 213, 131, 62, 61, 4, 0, 191, 225, 85, 61, 190, 183, 64, 141, 189, 226, 25, 139, 62, 16, 90, 181, 60, 230, 204, 212, 62, 126, 57, 10, 191, 134, 165, 155, 62, 165, 42, 95, 189, 144, 125, 38, 62, 169, 209, 165, 190, 197, 166, 162, 62, 193, 100, 61, 191, 90, 32, 204, 190, 56, 209, 160, 188, 238, 23, 18, 62, 243, 225, 157, 190, 187, 180, 161, 61, 17, 197, 221, 61, 15, 193, 236, 61, 214, 150, 19, 191, 71, 174, 168, 60, 125, 187, 11, 188, 31, 77, 75, 190, 240, 69, 214, 61, 190, 127, 130, 59, 229, 137, 31, 62, 108, 134, 53, 190, 137, 154, 10, 190, 64, 89, 136, 61, 246, 108, 14, 62, 9, 190, 87, 189, 89, 25, 43, 190, 70, 102, 169, 190, 132, 66, 224, 190, 63, 199, 23, 190, 27, 89, 20, 61, 212, 70, 17, 61, 144, 15, 168, 186, 72, 6, 229, 190, 36, 211, 148, 62, 27, 25, 173, 61, 221, 111, 251, 190, 112, 78, 37, 189, 174, 37, 229, 190, 235, 241, 114, 190, 235, 209, 36, 62, 211, 211, 56, 62, 130, 104, 243, 189, 14, 219, 80, 188, 122, 126, 189, 61, 160, 181, 167, 189, 17, 214, 138, 190, 154, 74, 241, 189, 184, 17, 129, 190, 109, 253, 85, 62, 90, 205, 64, 62, 106, 25, 176, 190, 91, 9, 82, 61, 147, 7, 22, 62, 35, 113, 131, 190, 110, 139, 139, 62, 24, 212, 89, 60, 67, 73, 50, 62, 176, 156, 240, 190, 110, 60, 254, 188, 179, 231, 33, 191, 241, 117, 92, 62, 66, 238, 24, 189, 191, 78, 50, 62, 79, 117, 68, 59, 212, 149, 238, 190, 66, 111, 9, 61, 118, 56, 129, 61, 153, 151, 137, 190, 253, 162, 99, 62, 126, 63, 25, 191, 36, 165, 37, 62, 0, 53, 4, 60, 21, 4, 104, 62, 214, 124, 180, 62, 199, 80, 224, 189, 126, 93, 67, 62, 207, 91, 159, 61, 237, 104, 40, 191, 230, 63, 155, 57, 159, 159, 40, 63, 198, 107, 44, 191, 96, 184, 124, 62, 133, 170, 7, 61, 118, 158, 244, 60, 5, 122, 97, 189, 242, 11, 74, 62, 129, 226, 183, 62, 157, 145, 220, 189, 71, 129, 32, 191, 128, 8, 182, 189, 163, 123, 176, 190, 48, 39, 180, 189, 65, 163, 142, 190, 19, 85, 90, 61, 150, 251, 76, 62, 81, 11, 7, 62, 18, 189, 95, 190, 216, 77, 132, 62, 180, 161, 61, 190, 13, 209, 26, 190, 95, 125, 161, 190, 174, 21, 39, 62, 146, 225, 59, 190, 55, 95, 114, 61, 178, 223, 61, 190, 212, 196, 174, 189, 224, 144, 87, 191, 126, 48, 58, 190, 64, 164, 150, 190, 59, 122, 137, 61, 28, 74, 154, 61, 236, 49, 18, 191, 174, 165, 3, 62, 6, 182, 104, 190, 101, 27, 63, 191, 36, 34, 135, 190, 84, 217, 69, 190, 59, 128, 103, 62, 145, 163, 102, 190, 194, 127, 131, 190, 9, 44, 31, 190, 130, 95, 89, 190, 4, 158, 17, 188, 5, 82, 80, 191, 183, 50, 236, 59, 215, 141, 255, 188, 199, 253, 121, 62, 3, 73, 22, 190, 106, 228, 74, 63, 7, 136, 236, 190, 59, 101, 215, 62, 104, 156, 242, 189, 167, 247, 57, 62, 130, 19, 108, 191, 23, 18, 32, 190, 174, 165, 154, 188, 161, 17, 99, 189, 19, 31, 11, 62, 231, 171, 227, 188, 100, 232, 177, 60, 23, 27, 183, 189, 203, 27, 56, 190, 32, 136, 144, 60, 58, 91, 179, 189, 195, 184, 218, 61, 109, 193, 31, 60, 211, 205, 186, 61, 97, 230, 229, 189, 130, 213, 238, 189, 180, 196, 1, 62, 236, 233, 37, 61, 66, 55, 234, 189, 23, 176, 167, 61, 95, 206, 3, 190, 127, 209, 251, 61, 208, 79, 145, 189, 46, 212, 205, 189, 81, 244, 24, 60, 185, 37, 215, 189, 20, 225, 69, 189, 63, 102, 147, 188, 188, 17, 91, 189, 28, 117, 56, 61, 187, 190, 247, 189, 177, 77, 229, 60, 24, 99, 53, 189, 165, 145, 109, 190, 194, 5, 52, 190, 186, 195, 48, 191, 147, 136, 107, 187, 109, 42, 7, 62, 235, 223, 57, 190, 89, 242, 207, 61, 53, 71, 7, 189, 193, 215, 135, 61, 24, 15, 138, 190, 29, 133, 69, 62, 217, 46, 100, 189, 26, 49, 26, 60, 34, 142, 136, 189, 125, 55, 186, 62, 47, 17, 160, 190, 49, 245, 56, 61, 39, 123, 41, 62, 247, 171, 170, 62, 20, 17, 77, 189, 164, 182, 157, 189, 107, 114, 62, 190, 231, 159, 179, 189, 211, 63, 2, 190, 74, 2, 42, 190, 57, 218, 73, 61, 139, 17, 185, 190, 162, 160, 123, 62, 215, 25, 21, 62, 185, 116, 50, 62, 58, 38, 136, 61, 208, 4, 200, 62, 129, 244, 243, 189, 80, 206, 134, 191, 204, 66, 49, 62, 37, 21, 18, 190, 186, 190, 33, 189, 157, 83, 86, 61, 235, 74, 171, 62, 234, 212, 127, 188, 15, 76, 79, 189, 114, 44, 128, 62, 160, 220, 15, 190, 234, 223, 73, 191, 88, 186, 46, 62, 129, 180, 145, 62, 81, 175, 213, 61, 99, 25, 181, 190, 245, 123, 154, 189, 122, 225, 68, 62, 49, 120, 201, 61, 235, 126, 146, 191, 146, 150, 110, 188, 141, 185, 136, 190, 217, 45, 245, 60, 111, 76, 168, 189, 122, 218, 31, 189, 126, 179, 141, 62, 41, 93, 161, 191, 240, 236, 144, 62, 196, 127, 237, 61, 86, 200, 106, 62, 90, 255, 198, 190, 137, 216, 44, 191, 94, 61, 18, 190, 241, 43, 14, 190, 49, 152, 112, 61, 213, 68, 254, 188, 131, 154, 128, 59, 5, 87, 20, 189, 44, 14, 129, 61, 144, 251, 85, 189, 36, 39, 251, 189, 221, 114, 143, 189, 37, 190, 117, 190, 51, 1, 29, 61, 186, 127, 48, 190, 247, 136, 255, 189, 218, 22, 3, 190, 235, 30, 71, 190, 251, 249, 166, 61, 36, 223, 206, 61, 201, 168, 185, 61, 129, 11, 45, 62, 202, 111, 118, 189, 23, 63, 161, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 88, 32, 1, 190, 197, 83, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 200, 250, 66, 61, 134, 22, 69, 62, 151, 163, 161, 62, 117, 98, 62, 61, 54, 187, 49, 189, 216, 55, 55, 61, 44, 6, 86, 61, 25, 189, 27, 190, 113, 105, 64, 62, 89, 150, 49, 190, 125, 118, 107, 62, 118, 3, 89, 60, 180, 31, 11, 62, 166, 96, 123, 190, 197, 44, 181, 61, 91, 82, 246, 189, 119, 176, 149, 62, 47, 196, 56, 189, 248, 23, 136, 186, 46, 133, 124, 61, 180, 247, 147, 62, 104, 35, 172, 188, 11, 79, 124, 190, 225, 32, 103, 62, 210, 2, 35, 188, 73, 148, 9, 62, 28, 37, 244, 60, 222, 216, 55, 61, 163, 126, 128, 61, 60, 164, 48, 190, 16, 164, 172, 190, 114, 129, 88, 61, 152, 43, 247, 190, 148, 240, 116, 63, 154, 153, 201, 62, 60, 161, 35, 62, 119, 160, 0, 61, 118, 187, 2, 191, 120, 104, 46, 62, 85, 2, 143, 61, 116, 195, 160, 190, 231, 107, 153, 188, 198, 84, 140, 62, 144, 232, 157, 189, 95, 32, 188, 62, 66, 50, 223, 190, 171, 37, 228, 188, 139, 235, 55, 62, 63, 8, 1, 190, 40, 134, 209, 61, 252, 180, 101, 62, 188, 5, 36, 190, 133, 236, 158, 62, 227, 110, 214, 60, 59, 235, 96, 62, 252, 221, 2, 61, 158, 75, 2, 60, 181, 217, 159, 62, 69, 9, 130, 61, 15, 176, 40, 62, 238, 165, 188, 60, 11, 25, 183, 189, 117, 213, 191, 190, 152, 22, 130, 62, 44, 20, 9, 191, 18, 69, 201, 61, 252, 164, 147, 189, 170, 159, 100, 189, 73, 214, 37, 189, 142, 24, 45, 61, 241, 172, 171, 188, 164, 247, 221, 61, 52, 86, 145, 61, 216, 122, 128, 61, 220, 241, 167, 188, 85, 89, 13, 62, 197, 252, 242, 189, 26, 149, 215, 188, 42, 173, 92, 189, 194, 202, 144, 188, 36, 4, 154, 188, 174, 34, 201, 61, 192, 109, 230, 189, 252, 138, 190, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 206, 133, 61, 90, 200, 32, 189, 95, 185, 15, 190, 61, 190, 135, 187, 226, 76, 0, 190, 61, 244, 42, 190, 74, 130, 200, 189, 78, 200, 93, 61, 223, 111, 164, 189, 210, 186, 25, 188, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 109, 207, 62, 95, 122, 10, 61, 57, 20, 195, 60, 95, 83, 149, 62, 147, 248, 187, 189, 222, 97, 163, 62, 210, 188, 42, 190, 161, 57, 51, 61, 77, 35, 119, 189, 247, 106, 78, 62, 4, 152, 26, 190, 51, 26, 107, 189, 240, 136, 39, 189, 90, 191, 178, 62, 61, 156, 162, 62, 249, 159, 16, 62, 57, 172, 29, 190, 204, 19, 188, 61, 206, 35, 15, 61, 227, 40, 219, 58, 157, 104, 3, 190, 194, 8, 132, 62, 57, 87, 100, 61, 39, 76, 80, 190, 140, 235, 158, 190, 194, 43, 54, 189, 155, 109, 43, 60, 31, 254, 129, 60, 139, 44, 199, 188, 176, 127, 71, 190, 186, 102, 208, 190, 135, 19, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 176, 61, 190, 226, 47, 156, 61, 17, 224, 0, 63, 194, 70, 40, 63, 59, 173, 62, 188, 2, 16, 84, 63, 148, 77, 242, 61, 54, 142, 76, 62, 179, 131, 162, 59, 152, 204, 146, 189, 38, 225, 36, 191, 54, 125, 131, 190, 84, 46, 125, 62, 50, 233, 34, 190, 186, 137, 53, 63, 196, 132, 122, 190, 32, 76, 70, 62, 241, 8, 215, 191, 139, 56, 5, 191, 96, 238, 187, 62, 143, 47, 50, 63, 52, 119, 60, 188, 114, 253, 231, 188, 241, 89, 87, 62, 241, 81, 162, 191, 1, 105, 235, 189, 174, 43, 17, 190, 207, 134, 212, 191, 202, 128, 161, 61, 92, 117, 82, 60, 183, 48, 172, 62, 234, 251, 13, 189, 245, 133, 199, 190, 77, 90, 0, 62, 105, 146, 0, 191, 15, 252, 167, 60, 20, 204, 47, 191, 1, 110, 80, 60, 107, 57, 16, 190, 227, 144, 42, 190, 68, 176, 195, 189, 254, 210, 88, 190, 22, 237, 140, 61, 88, 59, 33, 62, 73, 135, 64, 63, 228, 178, 222, 190, 221, 97, 146, 62, 67, 185, 184, 190, 222, 175, 215, 189, 231, 206, 199, 62, 156, 109, 12, 62, 220, 12, 162, 190, 50, 249, 25, 61, 64, 231, 188, 190, 162, 64, 194, 190, 135, 224, 223, 61, 110, 35, 228, 62, 234, 109, 176, 189, 187, 158, 168, 189, 38, 51, 98, 63, 35, 21, 207, 61, 185, 237, 146, 188, 187, 15, 136, 190, 54, 74, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 45, 131, 190, 12, 89, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 20, 32, 64, 194, 236, 92, 191, 134, 42, 244, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {224, 60, 243, 188, 14, 141, 22, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}