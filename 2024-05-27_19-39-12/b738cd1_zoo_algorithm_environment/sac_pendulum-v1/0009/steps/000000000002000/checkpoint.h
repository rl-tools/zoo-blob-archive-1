// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 241, 199, 189, 218, 241, 66, 62, 98, 248, 7, 62, 200, 154, 104, 190, 217, 12, 162, 189, 118, 158, 178, 62, 95, 10, 34, 190, 82, 125, 82, 63, 50, 166, 177, 190, 195, 247, 24, 190, 234, 212, 228, 61, 97, 143, 120, 190, 83, 203, 41, 191, 29, 88, 255, 62, 112, 92, 190, 61, 151, 193, 61, 188, 22, 243, 40, 63, 211, 104, 214, 190, 125, 195, 155, 190, 102, 101, 78, 63, 137, 127, 41, 60, 156, 206, 48, 191, 165, 198, 76, 191, 102, 201, 126, 62, 105, 67, 54, 190, 120, 187, 37, 62, 103, 181, 141, 190, 57, 212, 55, 62, 44, 105, 192, 62, 168, 82, 47, 62, 197, 4, 242, 62, 41, 170, 185, 190, 239, 5, 4, 60, 249, 119, 62, 62, 230, 181, 72, 190, 96, 24, 193, 62, 88, 171, 74, 190, 35, 199, 21, 63, 42, 238, 54, 62, 150, 55, 1, 63, 83, 113, 136, 62, 194, 109, 94, 62, 167, 63, 187, 62, 37, 172, 27, 191, 90, 61, 7, 62, 80, 53, 246, 190, 86, 252, 245, 190, 45, 100, 211, 190, 71, 111, 14, 63, 88, 55, 65, 62, 29, 40, 211, 62, 124, 111, 200, 62, 137, 9, 206, 190, 205, 205, 220, 62, 20, 185, 183, 190, 73, 235, 12, 191, 148, 56, 132, 62, 139, 153, 201, 189, 56, 184, 157, 61, 156, 93, 112, 62, 95, 174, 65, 190, 60, 124, 194, 190, 60, 147, 238, 62, 27, 6, 125, 190, 182, 87, 150, 190, 66, 242, 39, 190, 201, 178, 236, 62, 169, 58, 203, 190, 115, 58, 243, 190, 215, 94, 221, 190, 106, 178, 74, 63, 30, 198, 199, 189, 206, 70, 203, 61, 99, 86, 204, 61, 131, 111, 241, 190, 193, 49, 7, 63, 110, 111, 229, 62, 139, 59, 153, 62, 145, 236, 209, 62, 98, 129, 32, 191, 35, 215, 98, 190, 249, 101, 58, 63, 131, 78, 178, 62, 218, 182, 247, 61, 24, 147, 16, 63, 64, 59, 149, 190, 7, 148, 252, 188, 85, 231, 225, 190, 216, 199, 53, 191, 228, 39, 122, 190, 176, 115, 154, 62, 194, 220, 114, 191, 162, 48, 205, 190, 167, 32, 234, 190, 94, 209, 185, 188, 31, 113, 135, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 40, 28, 191, 87, 214, 135, 190, 233, 140, 217, 62, 178, 86, 93, 190, 7, 54, 183, 62, 198, 181, 170, 60, 74, 165, 59, 187, 238, 45, 138, 190, 181, 250, 152, 62, 119, 242, 162, 190, 198, 152, 57, 61, 22, 99, 105, 187, 233, 68, 216, 62, 181, 19, 20, 189, 106, 243, 8, 63, 81, 135, 14, 191, 182, 64, 222, 62, 248, 52, 26, 190, 153, 136, 106, 62, 206, 196, 185, 189, 177, 29, 147, 190, 32, 228, 169, 62, 247, 201, 44, 63, 70, 116, 136, 189, 30, 139, 16, 191, 149, 28, 135, 190, 244, 46, 49, 190, 249, 119, 205, 61, 120, 137, 195, 62, 168, 186, 220, 61, 84, 217, 15, 63, 20, 78, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 74, 119, 190, 220, 223, 3, 62, 32, 172, 67, 60, 10, 195, 160, 60, 73, 224, 224, 61, 207, 195, 68, 62, 32, 24, 14, 62, 178, 125, 38, 62, 74, 251, 211, 188, 42, 19, 147, 61, 79, 132, 146, 61, 79, 25, 14, 62, 104, 52, 176, 188, 68, 16, 213, 189, 108, 1, 136, 61, 33, 43, 249, 61, 52, 55, 13, 190, 123, 153, 29, 189, 43, 231, 157, 61, 84, 86, 58, 188, 203, 52, 24, 62, 228, 32, 115, 60, 79, 251, 166, 61, 232, 193, 195, 189, 165, 237, 215, 61, 124, 222, 86, 190, 4, 1, 96, 190, 245, 215, 250, 189, 41, 233, 5, 62, 139, 189, 250, 189, 105, 159, 248, 189, 198, 68, 85, 189, 146, 124, 248, 61, 233, 96, 85, 190, 221, 16, 254, 189, 235, 245, 46, 190, 58, 163, 220, 189, 188, 144, 131, 189, 222, 55, 2, 189, 101, 2, 30, 190, 21, 177, 210, 189, 197, 250, 197, 61, 102, 18, 224, 61, 128, 141, 104, 186, 119, 180, 241, 60, 187, 68, 223, 186, 199, 220, 2, 189, 175, 163, 87, 189, 20, 114, 153, 61, 188, 189, 243, 188, 222, 72, 60, 189, 131, 124, 253, 188, 180, 186, 69, 190, 111, 77, 154, 189, 75, 128, 242, 188, 219, 74, 1, 190, 109, 116, 202, 61, 60, 221, 61, 190, 190, 90, 1, 188, 127, 167, 0, 188, 141, 224, 59, 60, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 247, 66, 243, 60, 126, 67, 176, 189, 157, 164, 212, 60, 104, 121, 150, 188, 60, 74, 141, 189, 153, 247, 146, 62, 12, 154, 165, 190, 223, 38, 169, 62, 73, 53, 8, 62, 43, 65, 152, 189, 27, 201, 88, 62, 61, 254, 195, 189, 222, 222, 93, 190, 123, 218, 76, 190, 61, 41, 230, 60, 13, 217, 207, 61, 166, 104, 137, 61, 21, 222, 208, 189, 176, 2, 43, 61, 134, 200, 253, 188, 216, 246, 69, 190, 51, 78, 66, 189, 141, 250, 41, 60, 123, 13, 174, 188, 178, 248, 0, 190, 18, 31, 142, 61, 29, 114, 58, 190, 43, 9, 173, 61, 254, 241, 10, 62, 230, 155, 181, 188, 5, 149, 183, 62, 245, 33, 20, 62, 241, 64, 212, 188, 16, 141, 217, 189, 224, 240, 16, 189, 36, 232, 174, 61, 10, 189, 7, 58, 137, 193, 113, 190, 155, 49, 26, 190, 178, 47, 152, 62, 191, 123, 22, 190, 64, 94, 189, 189, 225, 47, 129, 188, 207, 40, 11, 190, 239, 202, 103, 61, 33, 141, 138, 190, 130, 93, 114, 62, 19, 193, 156, 189, 51, 210, 146, 61, 82, 235, 80, 190, 174, 188, 163, 62, 45, 35, 241, 60, 11, 231, 151, 189, 196, 165, 127, 189, 220, 192, 237, 189, 68, 118, 141, 190, 132, 239, 36, 189, 33, 183, 113, 190, 44, 98, 32, 190, 185, 128, 63, 190, 172, 85, 125, 62, 40, 130, 82, 62, 195, 238, 73, 60, 158, 162, 133, 60, 65, 139, 41, 190, 225, 44, 222, 61, 204, 249, 30, 62, 113, 94, 117, 61, 44, 34, 134, 189, 6, 45, 186, 189, 8, 37, 9, 189, 12, 100, 71, 188, 75, 105, 12, 62, 66, 47, 32, 189, 231, 198, 135, 61, 80, 207, 226, 61, 224, 209, 130, 61, 163, 174, 13, 62, 219, 16, 16, 62, 20, 222, 157, 61, 24, 8, 211, 61, 217, 130, 251, 189, 105, 146, 173, 61, 41, 92, 214, 61, 214, 46, 53, 190, 41, 131, 240, 61, 255, 234, 26, 62, 122, 13, 133, 60, 69, 0, 42, 190, 200, 109, 208, 189, 165, 149, 222, 61, 147, 123, 210, 189, 107, 11, 62, 62, 115, 97, 232, 189, 121, 10, 214, 60, 84, 52, 182, 61, 236, 36, 59, 189, 154, 79, 218, 189, 177, 45, 68, 190, 246, 44, 234, 189, 149, 106, 109, 62, 235, 121, 227, 61, 50, 255, 33, 62, 146, 64, 239, 61, 167, 194, 184, 189, 20, 251, 149, 189, 80, 249, 231, 189, 90, 35, 49, 62, 180, 177, 68, 189, 126, 111, 112, 190, 19, 10, 1, 62, 101, 220, 230, 189, 6, 224, 26, 61, 4, 211, 200, 189, 32, 21, 152, 61, 35, 189, 38, 62, 225, 152, 220, 188, 23, 98, 87, 190, 11, 138, 195, 189, 203, 24, 120, 61, 190, 189, 170, 61, 184, 43, 190, 55, 109, 155, 154, 189, 131, 63, 71, 190, 243, 61, 135, 190, 89, 178, 63, 190, 20, 212, 123, 189, 119, 139, 202, 189, 134, 1, 10, 62, 121, 25, 231, 189, 108, 174, 218, 189, 41, 44, 159, 60, 13, 198, 141, 61, 165, 55, 242, 61, 156, 223, 134, 188, 56, 130, 187, 61, 170, 72, 224, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 170, 91, 83, 60, 22, 253, 158, 61, 56, 24, 185, 61, 244, 67, 8, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 255, 233, 26, 61, 7, 116, 14, 189, 164, 15, 237, 189, 193, 72, 134, 187, 8, 27, 0, 190, 81, 26, 152, 60, 125, 228, 46, 190, 0, 148, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 244, 184, 137, 61, 42, 222, 82, 189, 99, 25, 240, 188, 198, 159, 32, 62, 60, 223, 238, 58, 196, 104, 255, 189, 2, 190, 98, 190, 5, 166, 152, 61, 57, 33, 144, 190, 83, 18, 69, 188, 86, 117, 165, 62, 85, 48, 244, 189, 50, 176, 151, 187, 135, 116, 70, 62, 204, 122, 3, 62, 170, 239, 158, 189, 73, 212, 91, 190, 33, 30, 84, 62, 150, 182, 104, 190, 106, 86, 148, 189, 14, 249, 70, 61, 54, 180, 141, 62, 84, 13, 189, 61, 75, 23, 145, 62, 197, 15, 12, 62, 52, 194, 248, 61, 79, 207, 22, 190, 91, 248, 71, 190, 189, 11, 94, 190, 70, 55, 231, 61, 85, 11, 64, 190, 237, 33, 23, 61, 38, 240, 29, 190, 180, 242, 93, 62, 147, 74, 143, 189, 90, 15, 30, 190, 225, 226, 251, 61, 0, 9, 242, 189, 9, 31, 100, 61, 233, 30, 173, 188, 121, 98, 10, 62, 109, 114, 247, 189, 202, 127, 1, 62, 65, 221, 180, 189, 51, 27, 3, 61, 99, 235, 19, 190, 187, 51, 36, 189, 179, 80, 219, 61, 111, 173, 246, 189, 58, 105, 156, 61, 114, 136, 242, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 89, 194, 226, 189, 6, 153, 166, 59, 68, 4, 149, 61, 50, 122, 244, 60, 139, 248, 189, 189, 48, 27, 37, 62, 229, 159, 11, 59, 180, 65, 198, 61, 120, 235, 130, 60, 118, 35, 245, 189, 62, 20, 105, 188, 87, 63, 147, 60, 177, 208, 247, 188, 43, 191, 58, 62, 2, 75, 228, 61, 121, 51, 14, 62, 229, 21, 175, 187, 199, 243, 217, 61, 33, 214, 254, 61, 82, 126, 27, 189, 30, 173, 100, 190, 11, 184, 185, 61, 42, 191, 138, 189, 189, 17, 200, 61, 39, 240, 54, 189, 249, 199, 45, 62, 253, 35, 53, 189, 156, 119, 2, 62, 7, 188, 47, 189, 103, 211, 181, 188, 190, 167, 218, 189, 78, 134, 240, 61, 167, 243, 203, 61, 254, 151, 88, 61, 208, 229, 219, 189, 127, 185, 99, 190, 50, 83, 80, 190, 215, 124, 203, 189, 25, 209, 33, 189, 64, 237, 208, 61, 66, 195, 140, 189, 15, 214, 255, 61, 188, 101, 154, 188, 255, 211, 185, 189, 158, 59, 40, 190, 209, 51, 160, 61, 136, 52, 77, 189, 175, 124, 248, 189, 253, 91, 100, 61, 4, 237, 164, 189, 82, 32, 2, 190, 97, 76, 81, 188, 36, 204, 19, 190, 23, 176, 198, 189, 69, 227, 58, 190, 13, 93, 226, 189, 31, 18, 103, 190, 24, 29, 209, 61, 106, 144, 41, 62, 239, 199, 27, 190, 203, 174, 84, 61, 123, 88, 142, 60, 79, 209, 105, 61, 149, 143, 169, 189, 105, 86, 29, 190, 98, 30, 126, 61, 166, 39, 110, 190, 27, 10, 10, 62, 136, 231, 225, 61, 2, 18, 145, 62, 72, 8, 42, 190, 191, 92, 235, 61, 44, 132, 223, 188, 51, 89, 127, 61, 183, 33, 180, 61, 179, 190, 92, 61, 254, 37, 228, 61, 137, 102, 2, 190, 255, 106, 69, 189, 185, 203, 211, 189, 155, 219, 6, 60, 114, 233, 156, 61, 135, 182, 188, 188, 151, 187, 3, 190, 240, 85, 60, 62, 94, 118, 205, 60, 28, 143, 12, 57, 127, 169, 27, 61, 163, 109, 112, 62, 191, 96, 156, 61, 143, 213, 234, 60, 130, 231, 166, 61, 134, 98, 194, 61, 119, 129, 221, 189, 93, 147, 67, 61, 164, 247, 2, 62, 49, 116, 229, 189, 84, 20, 118, 190, 158, 21, 81, 190, 53, 254, 30, 62, 128, 240, 7, 61, 13, 48, 32, 189, 152, 233, 176, 62, 7, 156, 64, 62, 233, 105, 221, 59, 232, 84, 34, 60, 153, 17, 156, 61, 67, 206, 196, 61, 14, 118, 128, 61, 4, 64, 150, 189, 37, 227, 106, 188, 161, 206, 194, 188, 134, 174, 33, 190, 142, 205, 154, 61, 11, 5, 156, 61, 196, 172, 77, 189, 173, 17, 87, 61, 158, 24, 215, 59, 70, 209, 130, 61, 200, 110, 192, 189, 19, 85, 171, 189, 249, 88, 131, 60, 235, 16, 232, 189, 5, 21, 42, 190, 187, 60, 71, 189, 9, 188, 65, 61, 155, 13, 189, 189, 157, 70, 169, 189, 22, 206, 20, 190, 202, 47, 157, 61, 111, 117, 158, 61, 169, 210, 238, 60, 136, 21, 66, 189, 180, 252, 33, 62, 195, 105, 13, 62, 193, 178, 131, 189, 165, 148, 50, 190, 44, 239, 192, 60, 102, 113, 23, 189, 117, 237, 203, 190, 229, 50, 244, 189, 21, 40, 146, 62, 182, 11, 158, 189, 175, 17, 199, 61, 52, 44, 118, 62, 45, 145, 217, 60, 209, 149, 173, 190, 192, 180, 134, 189, 202, 225, 217, 189, 208, 218, 34, 62, 216, 99, 159, 60, 203, 92, 19, 60, 42, 12, 4, 190, 160, 162, 109, 61, 140, 199, 149, 61, 10, 209, 241, 61, 37, 16, 192, 59, 46, 194, 30, 190, 143, 244, 230, 61, 23, 139, 154, 61, 246, 110, 16, 190, 243, 146, 51, 62, 220, 139, 72, 62, 156, 168, 61, 190, 112, 165, 217, 61, 47, 141, 96, 61, 219, 199, 238, 61, 100, 106, 170, 62, 82, 150, 44, 189, 217, 241, 226, 61, 232, 245, 133, 190, 0, 132, 128, 190, 84, 144, 48, 62, 204, 112, 165, 190, 86, 73, 164, 190, 208, 190, 141, 61, 122, 97, 30, 191, 7, 193, 33, 190, 54, 128, 31, 61, 32, 156, 26, 190, 178, 33, 32, 190, 4, 233, 77, 62, 75, 122, 198, 59, 175, 198, 208, 61, 215, 140, 162, 190, 254, 187, 44, 62, 8, 189, 219, 189, 48, 40, 109, 189, 222, 147, 95, 190, 69, 212, 177, 62, 70, 166, 80, 62, 16, 229, 31, 190, 213, 222, 66, 62, 214, 18, 13, 61, 172, 99, 108, 190, 28, 12, 81, 190, 115, 18, 208, 190, 119, 133, 1, 190, 198, 84, 58, 190, 213, 150, 113, 62, 225, 158, 236, 61, 249, 144, 91, 62, 139, 37, 141, 60, 53, 101, 89, 190, 197, 99, 156, 189, 179, 12, 6, 190, 160, 98, 16, 62, 197, 224, 252, 189, 47, 91, 136, 57, 67, 244, 238, 188, 105, 94, 116, 189, 238, 27, 142, 190, 88, 248, 223, 189, 12, 140, 133, 62, 145, 144, 202, 61, 225, 28, 218, 60, 167, 65, 39, 62, 23, 168, 219, 188, 13, 31, 139, 189, 161, 115, 115, 62, 61, 210, 119, 185, 210, 227, 128, 61, 159, 121, 43, 189, 26, 185, 15, 62, 234, 245, 23, 190, 171, 69, 202, 189, 202, 224, 147, 60, 167, 120, 225, 60, 33, 215, 69, 61, 241, 168, 137, 190, 28, 218, 137, 62, 101, 53, 58, 62, 8, 198, 243, 61, 12, 147, 15, 190, 76, 220, 192, 61, 94, 1, 19, 189, 164, 23, 251, 60, 159, 218, 169, 189, 246, 235, 250, 189, 53, 203, 134, 60, 245, 107, 70, 189, 250, 40, 192, 61, 130, 153, 250, 189, 115, 157, 237, 61, 103, 92, 129, 61, 6, 117, 113, 189, 135, 64, 59, 61, 251, 6, 172, 189, 103, 20, 247, 189, 39, 185, 10, 190, 144, 13, 218, 61, 253, 144, 208, 61, 245, 240, 94, 61, 61, 132, 9, 190, 194, 79, 6, 62, 160, 161, 42, 61, 224, 157, 105, 190, 53, 240, 104, 61, 52, 190, 63, 188, 152, 236, 178, 189, 125, 247, 147, 189, 126, 181, 142, 189, 37, 96, 68, 190, 146, 229, 240, 189, 215, 133, 44, 190, 24, 14, 52, 190, 24, 239, 240, 189, 7, 55, 116, 61, 149, 240, 101, 190, 105, 223, 146, 62, 146, 6, 159, 188, 155, 199, 113, 62, 187, 232, 148, 189, 24, 11, 217, 62, 148, 50, 154, 190, 29, 72, 150, 62, 187, 142, 39, 189, 146, 138, 204, 189, 163, 2, 96, 189, 46, 176, 166, 62, 36, 229, 155, 62, 219, 32, 152, 188, 43, 24, 139, 190, 219, 218, 65, 189, 125, 19, 50, 190, 188, 14, 21, 190, 68, 61, 114, 190, 49, 219, 124, 190, 194, 38, 94, 59, 134, 204, 88, 189, 59, 69, 27, 62, 148, 118, 155, 190, 228, 205, 191, 189, 158, 141, 134, 189, 123, 203, 102, 62, 218, 10, 137, 62, 240, 138, 1, 190, 158, 238, 63, 190, 86, 37, 23, 62, 206, 72, 173, 61, 228, 148, 183, 189, 90, 121, 145, 62, 182, 162, 52, 190, 160, 126, 164, 62, 164, 41, 191, 187, 217, 200, 68, 62, 8, 198, 171, 190, 246, 174, 48, 62, 39, 184, 0, 190, 201, 98, 254, 61, 207, 200, 129, 190, 123, 143, 128, 62, 205, 102, 158, 61, 125, 166, 156, 190, 4, 158, 9, 190, 229, 94, 13, 62, 121, 65, 128, 61, 239, 216, 10, 190, 101, 90, 113, 61, 25, 175, 136, 190, 126, 139, 204, 56, 69, 92, 110, 189, 194, 225, 49, 62, 212, 122, 15, 62, 44, 130, 180, 61, 219, 85, 152, 62, 180, 200, 163, 189, 155, 56, 155, 61, 225, 14, 6, 62, 220, 211, 204, 59, 224, 228, 42, 62, 111, 135, 111, 190, 118, 216, 87, 190, 168, 177, 169, 189, 136, 59, 12, 190, 43, 54, 168, 189, 75, 99, 75, 189, 216, 162, 21, 190, 252, 39, 175, 62, 77, 23, 127, 61, 53, 216, 141, 189, 189, 41, 140, 62, 1, 46, 198, 188, 210, 113, 51, 190, 245, 143, 201, 189, 2, 62, 51, 62, 56, 142, 35, 62, 142, 247, 182, 61, 5, 250, 95, 190, 151, 98, 16, 189, 126, 240, 118, 60, 184, 53, 198, 188, 96, 101, 121, 62, 83, 201, 45, 62, 224, 223, 36, 190, 135, 132, 100, 61, 237, 91, 106, 188, 191, 230, 174, 189, 118, 205, 3, 61, 138, 222, 48, 62, 122, 133, 105, 62, 124, 73, 141, 62, 121, 251, 1, 60, 96, 143, 74, 189, 74, 233, 125, 190, 216, 210, 50, 60, 229, 16, 245, 189, 9, 73, 74, 62, 250, 224, 201, 189, 219, 192, 200, 190, 214, 3, 245, 62, 104, 11, 227, 61, 92, 49, 142, 59, 118, 70, 46, 61, 107, 12, 128, 190, 10, 78, 63, 190, 235, 22, 20, 61, 194, 86, 127, 62, 24, 225, 4, 62, 2, 106, 170, 61, 1, 31, 83, 61, 12, 83, 133, 61, 100, 55, 46, 190, 51, 109, 42, 190, 69, 28, 238, 188, 28, 70, 17, 62, 134, 207, 25, 189, 63, 93, 54, 62, 158, 76, 187, 189, 170, 132, 213, 61, 83, 217, 120, 60, 193, 222, 201, 188, 64, 145, 100, 62, 134, 77, 64, 62, 190, 223, 238, 188, 82, 69, 181, 189, 31, 44, 198, 61, 195, 148, 175, 61, 30, 41, 233, 189, 15, 240, 49, 62, 254, 2, 12, 62, 59, 150, 254, 61, 150, 100, 102, 190, 45, 230, 210, 61, 242, 200, 172, 60, 85, 216, 54, 60, 246, 200, 2, 62, 147, 40, 199, 61, 207, 2, 161, 61, 212, 72, 213, 189, 96, 248, 191, 61, 104, 98, 213, 61, 103, 86, 208, 61, 113, 202, 225, 189, 164, 78, 62, 61, 118, 149, 138, 189, 207, 207, 151, 61, 248, 228, 200, 189, 31, 144, 0, 60, 251, 31, 90, 61, 93, 243, 231, 60, 19, 199, 24, 190, 130, 98, 27, 62, 249, 181, 17, 189, 51, 32, 245, 60, 129, 187, 121, 61, 32, 210, 230, 61, 78, 22, 136, 60, 133, 183, 46, 62, 207, 148, 115, 61, 148, 204, 129, 188, 31, 185, 60, 62, 139, 131, 81, 61, 157, 220, 211, 189, 138, 212, 227, 189, 159, 3, 158, 189, 57, 87, 75, 190, 237, 26, 64, 61, 221, 63, 81, 61, 34, 99, 66, 190, 33, 233, 49, 190, 36, 18, 177, 61, 17, 172, 208, 189, 202, 183, 23, 62, 10, 197, 236, 189, 33, 223, 80, 62, 251, 154, 132, 189, 94, 2, 179, 61, 158, 236, 208, 189, 120, 20, 20, 62, 30, 252, 4, 190, 220, 226, 122, 188, 229, 31, 26, 60, 186, 141, 173, 190, 90, 140, 129, 190, 224, 222, 231, 189, 162, 170, 183, 60, 221, 166, 76, 62, 247, 191, 172, 61, 252, 42, 174, 60, 188, 41, 64, 189, 111, 69, 82, 62, 0, 226, 13, 62, 155, 233, 42, 189, 7, 153, 9, 62, 117, 49, 142, 58, 202, 32, 145, 61, 217, 208, 24, 187, 170, 102, 31, 62, 38, 240, 195, 188, 11, 68, 246, 60, 182, 116, 66, 62, 85, 130, 23, 190, 82, 250, 204, 61, 255, 254, 164, 60, 120, 158, 14, 62, 144, 87, 93, 61, 17, 199, 182, 61, 148, 142, 212, 189, 167, 125, 155, 60, 76, 110, 8, 190, 30, 133, 9, 190, 96, 51, 87, 59, 12, 16, 19, 62, 34, 148, 19, 190, 253, 217, 55, 61, 30, 40, 253, 189, 31, 86, 23, 189, 247, 170, 203, 189, 133, 157, 145, 189, 179, 60, 72, 188, 122, 8, 233, 60, 55, 95, 114, 61, 37, 189, 130, 188, 76, 161, 99, 61, 1, 59, 7, 190, 25, 96, 12, 190, 3, 6, 13, 61, 91, 241, 223, 189, 29, 51, 17, 62, 47, 240, 12, 190, 208, 127, 14, 190, 109, 178, 86, 190, 233, 88, 70, 190, 146, 81, 118, 189, 164, 139, 191, 189, 139, 29, 0, 62, 87, 191, 121, 188, 8, 78, 193, 189, 80, 197, 77, 189, 161, 49, 78, 190, 133, 144, 172, 59, 127, 135, 140, 189, 60, 152, 66, 189, 238, 210, 75, 190, 42, 114, 127, 62, 77, 230, 176, 61, 38, 87, 136, 62, 126, 201, 156, 189, 164, 225, 149, 62, 45, 208, 155, 61, 187, 76, 232, 61, 80, 7, 250, 189, 23, 18, 32, 190, 174, 165, 154, 188, 152, 209, 23, 189, 78, 124, 20, 62, 13, 7, 214, 188, 137, 57, 47, 61, 97, 43, 175, 189, 203, 27, 56, 190, 153, 27, 12, 61, 58, 91, 179, 189, 62, 135, 226, 61, 109, 193, 31, 60, 229, 8, 190, 61, 97, 230, 229, 189, 130, 213, 238, 189, 68, 40, 12, 62, 9, 58, 39, 61, 66, 55, 234, 189, 23, 176, 167, 61, 33, 169, 3, 190, 127, 209, 251, 61, 120, 127, 133, 189, 43, 73, 161, 189, 113, 80, 129, 60, 65, 101, 180, 189, 20, 225, 69, 189, 53, 127, 30, 188, 34, 4, 91, 189, 230, 223, 76, 61, 207, 176, 235, 189, 126, 157, 55, 61, 24, 99, 53, 189, 172, 49, 222, 59, 79, 96, 8, 188, 73, 1, 63, 190, 250, 33, 246, 189, 107, 189, 114, 189, 180, 82, 21, 62, 71, 54, 184, 60, 139, 139, 15, 190, 22, 127, 100, 189, 134, 66, 159, 188, 249, 191, 175, 60, 3, 226, 156, 61, 115, 163, 130, 60, 139, 233, 224, 61, 169, 114, 113, 62, 66, 105, 181, 189, 114, 79, 135, 61, 148, 13, 27, 62, 25, 93, 23, 62, 41, 43, 162, 61, 51, 202, 140, 189, 52, 117, 57, 190, 202, 10, 95, 190, 55, 159, 67, 189, 60, 67, 158, 61, 228, 132, 128, 62, 249, 215, 17, 190, 207, 240, 208, 62, 182, 210, 163, 61, 112, 130, 106, 189, 192, 67, 116, 188, 44, 130, 173, 189, 204, 121, 218, 60, 242, 69, 7, 190, 74, 94, 167, 61, 179, 209, 53, 60, 207, 14, 146, 61, 63, 162, 123, 60, 227, 43, 130, 62, 185, 11, 82, 190, 27, 111, 184, 187, 49, 41, 208, 61, 84, 222, 63, 61, 171, 232, 145, 61, 233, 56, 65, 62, 63, 43, 138, 62, 77, 196, 225, 61, 72, 204, 193, 61, 179, 75, 124, 189, 120, 80, 8, 62, 227, 44, 240, 60, 237, 71, 211, 60, 99, 199, 204, 61, 84, 34, 157, 189, 113, 248, 231, 61, 83, 223, 163, 189, 236, 81, 141, 61, 41, 233, 204, 61, 66, 163, 43, 61, 126, 173, 68, 62, 210, 184, 20, 62, 155, 142, 25, 61, 76, 100, 67, 190, 90, 207, 31, 59, 94, 61, 18, 190, 225, 56, 11, 190, 49, 152, 112, 61, 213, 68, 254, 188, 0, 243, 245, 59, 5, 87, 20, 189, 72, 89, 129, 61, 201, 159, 60, 189, 36, 39, 251, 189, 200, 80, 143, 189, 37, 190, 117, 190, 4, 225, 31, 61, 128, 130, 43, 190, 169, 132, 250, 189, 234, 19, 3, 190, 235, 30, 71, 190, 222, 184, 174, 61, 125, 60, 220, 61, 145, 249, 197, 61, 130, 189, 49, 62, 229, 228, 74, 189, 127, 178, 160, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 198, 236, 0, 190, 123, 7, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 49, 87, 68, 61, 155, 230, 179, 61, 103, 107, 32, 62, 229, 81, 35, 189, 180, 153, 132, 61, 189, 30, 43, 62, 23, 10, 133, 61, 190, 198, 112, 190, 70, 190, 153, 62, 108, 26, 9, 190, 49, 195, 229, 61, 127, 232, 228, 60, 81, 129, 224, 188, 175, 13, 153, 189, 18, 32, 156, 61, 232, 170, 132, 188, 114, 75, 144, 62, 162, 3, 186, 186, 254, 128, 204, 61, 17, 15, 42, 62, 150, 232, 191, 61, 2, 237, 192, 188, 16, 186, 12, 62, 47, 155, 121, 62, 103, 6, 154, 189, 50, 158, 135, 189, 202, 120, 143, 60, 52, 152, 7, 190, 116, 201, 4, 189, 250, 204, 112, 190, 144, 191, 52, 61, 39, 122, 224, 61, 245, 190, 142, 60, 58, 158, 13, 62, 150, 44, 29, 62, 140, 106, 1, 62, 66, 113, 204, 60, 219, 96, 18, 190, 242, 161, 207, 61, 103, 117, 14, 61, 99, 157, 75, 189, 61, 80, 153, 189, 88, 106, 157, 61, 185, 59, 82, 190, 216, 162, 213, 61, 125, 204, 11, 61, 209, 24, 15, 190, 13, 84, 23, 62, 150, 237, 210, 189, 164, 174, 36, 62, 19, 62, 61, 62, 182, 229, 195, 189, 213, 89, 187, 60, 189, 191, 199, 189, 178, 8, 45, 62, 15, 50, 112, 60, 156, 180, 151, 189, 78, 182, 43, 62, 229, 0, 172, 189, 226, 189, 26, 189, 246, 10, 4, 190, 206, 229, 87, 190, 75, 95, 22, 62, 88, 200, 55, 62, 149, 201, 210, 188, 18, 69, 201, 61, 252, 164, 147, 189, 58, 2, 35, 189, 186, 203, 38, 189, 142, 24, 45, 61, 132, 99, 21, 188, 164, 247, 221, 61, 16, 100, 144, 61, 225, 187, 156, 61, 220, 241, 167, 188, 84, 198, 23, 62, 197, 252, 242, 189, 135, 249, 215, 188, 211, 152, 85, 189, 58, 69, 213, 187, 163, 19, 147, 188, 105, 3, 209, 61, 199, 179, 230, 189, 162, 164, 193, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 174, 146, 61, 143, 222, 144, 188, 95, 185, 15, 190, 187, 19, 83, 59, 74, 102, 0, 190, 161, 130, 29, 190, 1, 194, 183, 189, 189, 89, 152, 61, 98, 51, 157, 189, 226, 49, 75, 60, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 67, 32, 62, 166, 166, 53, 61, 128, 236, 39, 62, 217, 156, 87, 62, 55, 199, 188, 189, 226, 169, 122, 60, 137, 187, 36, 190, 159, 67, 202, 188, 222, 250, 84, 189, 30, 183, 132, 61, 73, 17, 210, 189, 107, 25, 61, 61, 225, 179, 57, 189, 127, 254, 45, 62, 129, 69, 83, 62, 88, 98, 48, 61, 158, 80, 105, 190, 214, 99, 83, 61, 182, 1, 175, 186, 133, 140, 182, 61, 95, 95, 149, 189, 189, 212, 50, 62, 238, 148, 75, 189, 104, 93, 17, 190, 28, 223, 194, 189, 164, 85, 35, 189, 249, 121, 192, 188, 157, 213, 72, 61, 152, 201, 180, 188, 250, 135, 190, 189, 163, 9, 94, 190, 216, 249, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 162, 30, 61, 36, 34, 159, 61, 198, 100, 96, 62, 8, 79, 128, 62, 183, 144, 70, 189, 35, 175, 89, 62, 174, 134, 241, 61, 184, 143, 90, 62, 189, 31, 115, 60, 222, 73, 229, 59, 117, 247, 246, 189, 48, 139, 106, 190, 71, 178, 76, 188, 54, 42, 73, 190, 48, 88, 192, 62, 169, 232, 48, 190, 177, 9, 252, 60, 18, 10, 47, 191, 104, 106, 132, 190, 124, 171, 176, 62, 94, 200, 173, 62, 48, 103, 106, 189, 95, 223, 20, 61, 218, 40, 221, 61, 188, 112, 128, 190, 146, 179, 235, 189, 153, 8, 3, 190, 112, 25, 46, 190, 168, 56, 162, 61, 238, 113, 9, 62, 156, 0, 117, 61, 27, 133, 37, 189, 63, 125, 27, 190, 91, 169, 1, 62, 155, 252, 254, 189, 178, 95, 18, 60, 38, 66, 15, 190, 236, 223, 108, 189, 218, 38, 17, 190, 27, 57, 78, 190, 208, 75, 199, 189, 114, 17, 55, 190, 111, 20, 230, 61, 101, 60, 145, 61, 88, 185, 19, 62, 73, 27, 110, 190, 253, 164, 101, 60, 57, 184, 168, 189, 67, 75, 73, 61, 128, 37, 204, 188, 1, 54, 234, 61, 209, 0, 4, 190, 106, 188, 42, 62, 118, 251, 24, 190, 132, 87, 140, 189, 48, 85, 206, 60, 229, 76, 73, 62, 84, 100, 176, 189, 145, 96, 225, 60, 106, 248, 193, 188, 123, 224, 206, 61, 116, 46, 156, 188, 9, 152, 200, 61, 211, 190, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 112, 73, 190, 231, 111, 221, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {139, 222, 162, 63, 115, 174, 81, 64, 85, 102, 231, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 246, 159, 192, 203, 49, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}