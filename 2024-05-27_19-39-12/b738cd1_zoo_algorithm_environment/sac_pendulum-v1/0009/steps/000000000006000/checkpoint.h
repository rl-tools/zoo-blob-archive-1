// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 163, 235, 62, 238, 186, 25, 62, 15, 235, 84, 62, 94, 168, 199, 190, 19, 219, 69, 63, 211, 174, 246, 62, 82, 49, 74, 189, 96, 255, 30, 63, 23, 224, 239, 190, 127, 99, 241, 190, 58, 35, 12, 191, 107, 63, 251, 190, 89, 212, 95, 191, 90, 58, 21, 63, 148, 86, 244, 60, 123, 95, 13, 190, 60, 59, 3, 62, 92, 170, 88, 191, 86, 199, 161, 190, 227, 118, 36, 63, 64, 252, 0, 190, 71, 45, 175, 190, 252, 237, 190, 190, 61, 54, 226, 62, 14, 76, 11, 190, 202, 146, 192, 190, 201, 254, 240, 190, 158, 231, 249, 62, 43, 180, 19, 63, 218, 36, 47, 62, 74, 250, 32, 63, 36, 36, 1, 191, 164, 34, 246, 61, 54, 60, 101, 190, 231, 223, 0, 63, 214, 99, 147, 62, 35, 204, 22, 191, 154, 142, 154, 62, 139, 146, 0, 62, 4, 170, 12, 63, 131, 171, 54, 62, 26, 84, 143, 62, 141, 9, 63, 63, 248, 214, 245, 190, 55, 64, 1, 61, 236, 134, 114, 190, 178, 146, 249, 190, 82, 216, 202, 190, 72, 188, 46, 63, 106, 135, 160, 62, 133, 18, 163, 62, 40, 39, 30, 62, 127, 186, 192, 190, 194, 73, 16, 63, 55, 57, 48, 190, 119, 241, 183, 190, 9, 125, 195, 62, 10, 42, 173, 190, 29, 37, 91, 63, 108, 114, 181, 62, 103, 21, 190, 190, 114, 26, 218, 62, 232, 1, 25, 63, 160, 149, 204, 190, 216, 100, 230, 190, 122, 118, 149, 189, 67, 250, 29, 63, 64, 146, 55, 191, 114, 126, 226, 190, 14, 242, 157, 190, 210, 134, 94, 63, 133, 177, 120, 190, 147, 133, 151, 61, 114, 103, 17, 189, 92, 9, 41, 191, 147, 115, 38, 63, 217, 96, 20, 63, 181, 105, 154, 62, 244, 31, 85, 63, 169, 124, 30, 191, 108, 138, 193, 189, 98, 164, 64, 63, 228, 14, 145, 62, 113, 41, 25, 62, 178, 168, 24, 63, 232, 13, 10, 190, 172, 45, 230, 60, 16, 47, 38, 190, 94, 179, 125, 191, 116, 194, 14, 190, 165, 15, 66, 63, 26, 64, 116, 191, 95, 178, 158, 190, 38, 84, 68, 191, 55, 231, 203, 190, 168, 5, 21, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 183, 65, 191, 133, 40, 65, 190, 65, 44, 147, 62, 140, 132, 3, 190, 228, 90, 48, 63, 188, 76, 197, 188, 197, 123, 198, 61, 65, 108, 37, 191, 8, 85, 41, 62, 11, 73, 132, 190, 233, 180, 19, 61, 194, 0, 181, 189, 218, 212, 46, 63, 198, 96, 164, 189, 230, 151, 204, 62, 17, 211, 101, 191, 77, 61, 7, 63, 215, 15, 104, 61, 184, 210, 5, 61, 214, 92, 72, 61, 76, 33, 176, 190, 72, 213, 119, 62, 38, 122, 69, 63, 0, 21, 121, 190, 250, 170, 226, 190, 230, 42, 109, 190, 126, 32, 250, 190, 254, 207, 142, 189, 215, 240, 1, 63, 80, 141, 42, 190, 143, 69, 219, 62, 17, 226, 193, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 170, 75, 191, 32, 59, 6, 62, 193, 8, 122, 188, 196, 61, 106, 189, 25, 135, 204, 61, 164, 177, 28, 62, 184, 217, 199, 61, 248, 25, 222, 61, 89, 122, 194, 189, 57, 182, 78, 188, 147, 205, 158, 189, 32, 17, 245, 61, 135, 54, 156, 188, 147, 58, 15, 190, 158, 29, 50, 189, 169, 159, 134, 61, 79, 105, 62, 190, 210, 229, 196, 189, 147, 150, 165, 61, 27, 252, 57, 189, 234, 90, 35, 62, 239, 197, 4, 189, 232, 141, 161, 61, 101, 194, 47, 190, 103, 155, 255, 61, 183, 95, 140, 190, 251, 249, 226, 190, 152, 189, 157, 189, 244, 20, 158, 61, 93, 251, 87, 190, 125, 245, 19, 190, 150, 131, 37, 190, 146, 124, 248, 61, 233, 96, 85, 190, 2, 108, 2, 190, 235, 245, 46, 190, 247, 183, 223, 189, 188, 144, 131, 189, 23, 170, 4, 189, 101, 2, 30, 190, 21, 177, 210, 189, 111, 157, 181, 61, 94, 77, 205, 61, 9, 56, 114, 187, 226, 82, 187, 60, 208, 246, 102, 188, 133, 240, 35, 189, 175, 163, 87, 189, 136, 60, 138, 61, 223, 92, 11, 189, 176, 119, 67, 189, 16, 155, 19, 189, 180, 186, 69, 190, 111, 77, 154, 189, 126, 252, 18, 189, 219, 74, 1, 190, 109, 116, 202, 61, 57, 88, 70, 190, 190, 90, 1, 188, 123, 190, 206, 188, 171, 133, 214, 187, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 88, 127, 15, 189, 116, 234, 28, 190, 212, 78, 25, 61, 132, 53, 148, 189, 1, 157, 2, 191, 252, 74, 136, 62, 111, 99, 197, 190, 1, 219, 26, 62, 162, 95, 222, 61, 9, 247, 207, 190, 2, 213, 191, 62, 201, 72, 15, 190, 44, 187, 94, 191, 100, 67, 139, 190, 45, 215, 197, 61, 204, 122, 159, 61, 254, 106, 126, 61, 239, 160, 42, 190, 133, 178, 170, 189, 34, 7, 87, 190, 78, 14, 150, 190, 187, 252, 118, 190, 143, 96, 169, 61, 84, 137, 214, 188, 196, 196, 96, 187, 149, 239, 10, 190, 21, 219, 61, 190, 141, 158, 88, 62, 78, 190, 146, 62, 220, 138, 107, 190, 130, 115, 220, 62, 200, 113, 188, 190, 175, 95, 180, 190, 173, 116, 125, 189, 121, 64, 145, 189, 63, 7, 63, 191, 78, 109, 210, 61, 75, 90, 70, 191, 214, 10, 48, 190, 39, 209, 195, 62, 65, 32, 23, 191, 224, 181, 173, 190, 19, 234, 86, 188, 53, 141, 11, 190, 127, 36, 15, 62, 189, 217, 178, 190, 54, 216, 74, 62, 79, 58, 25, 190, 107, 192, 148, 187, 33, 26, 138, 190, 215, 5, 192, 62, 108, 206, 176, 61, 159, 235, 32, 189, 83, 147, 204, 189, 104, 211, 69, 191, 131, 126, 210, 190, 151, 158, 229, 188, 60, 11, 194, 190, 171, 177, 111, 61, 214, 10, 223, 190, 159, 192, 65, 62, 84, 130, 64, 190, 198, 169, 6, 191, 215, 202, 62, 62, 70, 20, 18, 191, 151, 248, 162, 61, 107, 29, 219, 61, 240, 83, 146, 188, 129, 37, 171, 189, 159, 117, 25, 190, 152, 120, 30, 190, 244, 139, 185, 187, 73, 157, 141, 61, 109, 208, 7, 190, 75, 22, 6, 189, 236, 222, 154, 61, 92, 106, 200, 61, 41, 173, 14, 62, 194, 178, 9, 62, 204, 77, 6, 61, 84, 19, 224, 61, 241, 105, 19, 190, 15, 102, 12, 62, 24, 19, 73, 60, 101, 220, 59, 190, 103, 152, 251, 61, 76, 85, 52, 62, 10, 249, 246, 189, 135, 172, 147, 190, 104, 61, 32, 190, 183, 204, 162, 188, 135, 37, 56, 189, 115, 138, 107, 62, 136, 187, 240, 189, 198, 216, 41, 61, 178, 70, 75, 62, 255, 206, 220, 189, 163, 97, 22, 190, 152, 104, 187, 186, 153, 131, 100, 190, 1, 212, 249, 62, 157, 250, 142, 188, 42, 66, 219, 62, 15, 81, 144, 61, 208, 68, 100, 190, 199, 161, 243, 60, 191, 58, 190, 190, 34, 129, 215, 61, 35, 191, 16, 62, 75, 49, 98, 190, 75, 116, 114, 187, 171, 153, 76, 190, 223, 204, 46, 61, 8, 254, 128, 190, 48, 43, 220, 186, 119, 184, 67, 62, 201, 96, 190, 189, 107, 100, 231, 59, 223, 143, 1, 191, 189, 44, 125, 62, 146, 86, 130, 188, 233, 224, 110, 61, 207, 161, 239, 189, 63, 226, 138, 189, 121, 99, 208, 190, 130, 85, 41, 190, 73, 66, 250, 190, 55, 149, 71, 62, 134, 1, 10, 62, 121, 25, 231, 189, 157, 246, 235, 189, 115, 160, 91, 60, 12, 6, 136, 61, 226, 143, 218, 61, 188, 224, 167, 188, 56, 130, 187, 61, 135, 13, 211, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 81, 9, 69, 60, 22, 253, 158, 61, 56, 24, 185, 61, 7, 37, 10, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 255, 233, 26, 61, 7, 116, 14, 189, 225, 188, 240, 189, 251, 66, 35, 188, 114, 130, 5, 190, 10, 41, 58, 60, 125, 228, 46, 190, 0, 148, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 33, 19, 136, 61, 18, 226, 90, 189, 99, 25, 240, 188, 132, 43, 151, 60, 106, 238, 138, 60, 123, 91, 101, 61, 152, 130, 149, 191, 130, 84, 132, 62, 69, 15, 11, 191, 227, 5, 42, 62, 224, 59, 129, 62, 52, 151, 224, 190, 157, 140, 113, 61, 98, 119, 68, 61, 43, 138, 253, 61, 32, 177, 59, 61, 111, 205, 80, 190, 224, 35, 112, 60, 80, 202, 131, 190, 95, 175, 206, 189, 170, 204, 150, 189, 11, 139, 102, 62, 11, 32, 47, 62, 229, 66, 136, 62, 59, 96, 148, 61, 68, 177, 43, 190, 238, 186, 7, 61, 242, 112, 79, 189, 136, 101, 55, 190, 51, 96, 131, 62, 243, 119, 220, 189, 66, 145, 213, 189, 64, 11, 233, 190, 96, 219, 158, 189, 127, 69, 101, 187, 90, 15, 30, 190, 225, 226, 251, 61, 252, 57, 9, 190, 1, 64, 48, 61, 73, 10, 194, 188, 63, 249, 233, 61, 174, 145, 254, 189, 202, 127, 1, 62, 101, 224, 210, 189, 51, 27, 3, 61, 99, 235, 19, 190, 187, 51, 36, 189, 192, 110, 218, 61, 111, 173, 246, 189, 58, 105, 156, 61, 249, 213, 217, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 111, 202, 239, 189, 179, 144, 97, 188, 190, 53, 137, 61, 107, 8, 78, 60, 139, 248, 189, 189, 141, 40, 32, 62, 229, 159, 11, 59, 210, 215, 195, 61, 5, 52, 244, 59, 32, 36, 9, 190, 147, 141, 133, 188, 188, 4, 38, 191, 15, 125, 139, 189, 134, 183, 71, 62, 18, 184, 93, 61, 26, 90, 229, 61, 201, 97, 85, 188, 176, 10, 111, 61, 15, 177, 140, 61, 64, 6, 179, 189, 22, 244, 142, 190, 203, 230, 247, 60, 235, 100, 238, 189, 124, 252, 225, 61, 213, 229, 19, 59, 122, 228, 35, 62, 248, 17, 1, 190, 153, 49, 52, 62, 194, 227, 226, 189, 10, 105, 141, 188, 74, 185, 88, 190, 72, 148, 205, 61, 211, 239, 163, 60, 10, 119, 4, 62, 140, 24, 51, 190, 18, 159, 112, 190, 3, 158, 103, 190, 182, 100, 92, 190, 47, 135, 13, 62, 72, 178, 80, 62, 252, 152, 43, 190, 237, 146, 30, 62, 164, 208, 208, 189, 255, 211, 185, 189, 158, 59, 40, 190, 65, 38, 14, 61, 49, 34, 251, 189, 107, 242, 15, 191, 215, 151, 42, 61, 133, 212, 140, 190, 194, 113, 25, 190, 9, 126, 171, 189, 138, 241, 20, 190, 228, 33, 210, 189, 107, 97, 83, 190, 128, 250, 67, 190, 153, 17, 112, 190, 76, 255, 36, 190, 228, 65, 244, 61, 96, 88, 105, 190, 80, 0, 101, 60, 101, 207, 159, 188, 79, 209, 105, 61, 81, 120, 172, 189, 160, 148, 174, 190, 159, 201, 123, 61, 185, 159, 187, 190, 133, 137, 71, 62, 56, 8, 223, 61, 59, 117, 27, 63, 142, 106, 139, 190, 141, 101, 68, 62, 240, 100, 64, 190, 75, 70, 111, 61, 181, 72, 136, 190, 157, 79, 47, 61, 215, 40, 23, 62, 163, 78, 213, 190, 114, 63, 183, 190, 212, 255, 42, 190, 26, 119, 57, 190, 87, 150, 17, 61, 37, 92, 217, 61, 141, 77, 139, 190, 103, 228, 169, 61, 40, 72, 219, 61, 166, 72, 197, 60, 160, 3, 154, 186, 245, 161, 47, 62, 118, 67, 56, 62, 14, 241, 28, 61, 202, 149, 183, 61, 201, 88, 16, 62, 100, 22, 231, 188, 233, 88, 144, 61, 31, 64, 51, 62, 59, 171, 96, 190, 123, 59, 38, 190, 16, 17, 4, 191, 176, 207, 119, 61, 0, 168, 62, 189, 163, 28, 1, 190, 188, 135, 132, 62, 233, 12, 136, 62, 150, 214, 154, 189, 173, 198, 14, 60, 65, 121, 58, 59, 132, 232, 176, 61, 53, 99, 177, 188, 150, 7, 180, 189, 164, 65, 231, 187, 15, 179, 145, 190, 230, 205, 244, 189, 231, 242, 177, 60, 250, 11, 156, 61, 242, 94, 149, 59, 207, 230, 196, 190, 162, 202, 53, 62, 129, 128, 93, 61, 41, 38, 240, 190, 10, 126, 13, 191, 134, 14, 87, 62, 182, 208, 13, 190, 135, 80, 176, 190, 68, 204, 135, 61, 229, 136, 133, 62, 86, 81, 119, 190, 53, 68, 55, 190, 37, 62, 208, 189, 241, 25, 106, 62, 35, 52, 173, 61, 32, 63, 56, 62, 99, 250, 8, 191, 114, 199, 213, 62, 4, 89, 88, 190, 231, 22, 188, 60, 7, 124, 110, 190, 228, 62, 115, 62, 207, 237, 221, 190, 84, 110, 92, 191, 2, 176, 24, 190, 167, 204, 153, 62, 120, 252, 200, 189, 5, 20, 50, 62, 83, 147, 135, 62, 219, 169, 222, 188, 56, 81, 201, 190, 29, 239, 75, 189, 109, 32, 112, 189, 134, 141, 247, 189, 125, 58, 2, 189, 119, 193, 249, 61, 11, 153, 112, 189, 19, 236, 215, 189, 146, 196, 90, 189, 90, 244, 54, 62, 181, 118, 7, 188, 97, 111, 143, 189, 211, 37, 33, 61, 82, 56, 110, 61, 192, 196, 39, 190, 130, 64, 138, 62, 159, 42, 28, 62, 171, 240, 150, 190, 158, 23, 30, 62, 227, 249, 41, 189, 146, 68, 78, 62, 111, 86, 117, 62, 230, 23, 76, 188, 205, 81, 11, 62, 88, 252, 43, 190, 172, 35, 77, 191, 118, 125, 66, 62, 198, 44, 45, 188, 236, 236, 191, 191, 121, 136, 131, 62, 63, 232, 126, 191, 100, 183, 82, 62, 160, 125, 84, 61, 141, 94, 18, 191, 169, 43, 178, 190, 244, 14, 149, 62, 235, 195, 129, 187, 220, 237, 109, 62, 173, 124, 220, 190, 39, 66, 38, 62, 25, 232, 39, 190, 133, 233, 141, 189, 164, 109, 172, 190, 136, 173, 179, 62, 81, 145, 157, 62, 27, 131, 46, 190, 58, 7, 156, 61, 56, 217, 138, 190, 206, 197, 91, 62, 241, 44, 6, 190, 37, 39, 14, 191, 198, 174, 21, 62, 127, 79, 138, 190, 46, 160, 165, 62, 233, 167, 78, 190, 213, 9, 13, 188, 28, 81, 72, 188, 225, 11, 227, 190, 135, 5, 111, 189, 100, 39, 146, 190, 93, 222, 128, 190, 5, 57, 2, 190, 210, 87, 62, 190, 232, 53, 160, 189, 157, 105, 128, 61, 190, 208, 254, 190, 225, 249, 100, 190, 163, 67, 172, 62, 76, 224, 207, 61, 30, 23, 70, 61, 129, 142, 232, 61, 90, 73, 218, 61, 219, 5, 152, 189, 177, 98, 133, 62, 225, 30, 172, 60, 159, 13, 22, 62, 11, 45, 67, 189, 64, 255, 48, 62, 206, 107, 52, 190, 118, 134, 179, 61, 151, 199, 180, 190, 33, 146, 51, 190, 40, 69, 10, 189, 247, 28, 166, 190, 150, 117, 121, 62, 231, 77, 159, 62, 214, 20, 122, 61, 9, 232, 163, 188, 214, 222, 38, 62, 82, 149, 79, 189, 87, 161, 129, 60, 108, 18, 170, 189, 246, 235, 250, 189, 65, 13, 204, 60, 245, 107, 70, 189, 24, 134, 237, 61, 185, 38, 37, 190, 115, 157, 237, 61, 253, 79, 88, 61, 37, 127, 133, 189, 169, 168, 250, 60, 200, 59, 174, 189, 39, 146, 17, 190, 219, 215, 21, 190, 144, 13, 218, 61, 7, 229, 187, 61, 103, 213, 237, 60, 58, 68, 36, 190, 93, 70, 0, 62, 137, 19, 179, 60, 39, 110, 108, 190, 53, 240, 104, 61, 43, 250, 29, 187, 152, 236, 178, 189, 240, 137, 176, 189, 126, 181, 142, 189, 88, 133, 78, 190, 87, 139, 0, 190, 215, 133, 44, 190, 24, 14, 52, 190, 156, 116, 244, 189, 246, 77, 78, 61, 10, 144, 146, 191, 116, 202, 143, 62, 103, 57, 45, 189, 121, 127, 108, 62, 69, 243, 186, 189, 231, 142, 148, 62, 134, 98, 135, 190, 242, 2, 175, 62, 217, 201, 37, 62, 211, 92, 82, 190, 3, 60, 58, 191, 96, 58, 187, 62, 131, 16, 13, 63, 137, 89, 155, 190, 156, 84, 209, 190, 239, 247, 1, 190, 129, 211, 143, 62, 145, 124, 200, 61, 247, 199, 123, 191, 105, 147, 102, 191, 100, 16, 14, 62, 98, 80, 36, 189, 160, 225, 226, 61, 22, 106, 13, 191, 102, 136, 228, 61, 32, 215, 89, 190, 86, 217, 118, 62, 75, 243, 113, 62, 14, 51, 19, 62, 4, 134, 82, 190, 73, 61, 198, 62, 118, 20, 43, 190, 144, 215, 63, 190, 186, 181, 122, 62, 58, 83, 32, 190, 124, 45, 186, 62, 125, 221, 146, 186, 152, 11, 19, 62, 204, 35, 15, 191, 99, 209, 76, 62, 226, 23, 22, 61, 234, 159, 210, 60, 8, 52, 122, 190, 56, 253, 196, 62, 109, 116, 142, 62, 126, 100, 11, 191, 134, 202, 98, 190, 100, 84, 109, 62, 116, 163, 184, 62, 178, 191, 145, 189, 190, 69, 46, 189, 183, 247, 193, 190, 74, 136, 22, 61, 31, 155, 154, 189, 15, 198, 25, 62, 146, 200, 170, 59, 48, 164, 135, 62, 172, 113, 117, 62, 1, 70, 12, 189, 55, 71, 183, 188, 10, 44, 153, 62, 204, 60, 17, 189, 119, 224, 147, 62, 149, 204, 66, 191, 19, 191, 221, 189, 215, 2, 2, 190, 54, 123, 97, 190, 126, 87, 173, 190, 165, 131, 235, 189, 2, 177, 53, 190, 229, 221, 192, 62, 190, 203, 115, 188, 157, 137, 241, 190, 154, 160, 210, 62, 142, 214, 88, 61, 17, 252, 248, 190, 125, 49, 111, 190, 191, 215, 113, 62, 175, 169, 79, 62, 183, 8, 173, 61, 63, 193, 89, 190, 67, 120, 35, 189, 167, 212, 245, 61, 179, 86, 77, 61, 153, 50, 167, 61, 1, 214, 17, 62, 94, 201, 57, 190, 64, 214, 51, 62, 41, 228, 142, 190, 26, 145, 224, 189, 69, 113, 233, 188, 101, 216, 119, 62, 116, 51, 80, 61, 2, 3, 102, 62, 141, 231, 144, 190, 23, 111, 221, 189, 104, 167, 151, 190, 94, 29, 217, 60, 205, 174, 49, 190, 180, 60, 18, 190, 34, 143, 202, 189, 24, 46, 183, 190, 131, 200, 161, 62, 164, 49, 223, 61, 149, 21, 8, 191, 138, 122, 130, 62, 238, 165, 152, 190, 214, 219, 72, 191, 45, 126, 154, 190, 202, 172, 179, 62, 218, 110, 161, 61, 48, 53, 135, 189, 159, 77, 151, 60, 195, 229, 129, 61, 44, 15, 30, 190, 218, 156, 156, 190, 177, 223, 97, 190, 243, 189, 99, 62, 98, 205, 129, 60, 135, 107, 206, 62, 210, 28, 11, 191, 179, 225, 119, 62, 125, 183, 205, 189, 205, 141, 182, 61, 148, 60, 165, 189, 47, 172, 134, 62, 197, 244, 47, 191, 235, 94, 36, 191, 205, 182, 130, 61, 187, 1, 222, 61, 28, 132, 61, 190, 55, 8, 208, 61, 8, 220, 9, 62, 85, 131, 134, 61, 105, 171, 129, 190, 85, 203, 138, 61, 107, 79, 131, 189, 95, 60, 120, 189, 0, 170, 186, 61, 141, 201, 148, 61, 168, 137, 220, 61, 175, 58, 2, 190, 252, 87, 62, 189, 128, 133, 240, 61, 7, 7, 139, 61, 49, 217, 198, 189, 133, 216, 139, 189, 137, 157, 151, 189, 174, 67, 87, 60, 190, 11, 99, 188, 70, 28, 114, 189, 66, 132, 193, 188, 47, 2, 73, 186, 197, 227, 106, 190, 47, 82, 142, 62, 110, 194, 200, 61, 250, 184, 88, 189, 146, 122, 211, 61, 91, 193, 59, 61, 243, 228, 237, 190, 77, 7, 246, 61, 252, 17, 192, 61, 98, 52, 189, 189, 32, 59, 40, 62, 188, 253, 18, 61, 150, 134, 8, 190, 115, 35, 46, 190, 104, 137, 37, 190, 210, 238, 110, 190, 121, 183, 191, 61, 75, 62, 155, 188, 247, 102, 69, 190, 161, 243, 212, 189, 53, 242, 183, 61, 37, 23, 3, 190, 95, 244, 92, 62, 148, 133, 99, 190, 169, 69, 21, 62, 220, 177, 25, 190, 189, 50, 71, 61, 184, 6, 137, 190, 21, 136, 83, 62, 44, 20, 73, 190, 30, 208, 132, 61, 249, 154, 199, 187, 56, 225, 233, 190, 41, 162, 117, 61, 76, 25, 5, 59, 65, 168, 13, 190, 255, 179, 84, 62, 186, 215, 213, 189, 104, 240, 177, 189, 218, 14, 222, 189, 164, 11, 114, 62, 151, 247, 156, 62, 193, 128, 231, 61, 53, 158, 89, 62, 24, 91, 244, 61, 35, 115, 236, 189, 206, 131, 4, 188, 203, 120, 145, 62, 143, 5, 5, 191, 181, 6, 139, 188, 129, 25, 167, 62, 91, 242, 166, 189, 107, 8, 232, 189, 164, 91, 34, 62, 28, 102, 102, 62, 28, 56, 229, 189, 177, 233, 19, 190, 131, 68, 245, 188, 186, 96, 211, 189, 70, 44, 215, 189, 57, 55, 110, 190, 181, 214, 143, 61, 93, 95, 92, 62, 242, 191, 9, 189, 80, 6, 9, 191, 201, 24, 184, 61, 143, 202, 189, 190, 223, 111, 234, 189, 223, 44, 49, 190, 152, 225, 8, 62, 122, 8, 233, 60, 55, 95, 114, 61, 76, 246, 74, 189, 224, 141, 29, 188, 125, 22, 23, 191, 39, 218, 9, 190, 64, 202, 22, 190, 223, 159, 23, 190, 50, 95, 188, 61, 40, 76, 134, 190, 105, 8, 42, 189, 6, 182, 104, 190, 104, 67, 3, 191, 163, 211, 138, 61, 228, 136, 118, 190, 209, 90, 123, 61, 143, 128, 173, 60, 96, 241, 109, 190, 22, 48, 10, 190, 130, 95, 89, 190, 33, 61, 2, 59, 188, 234, 129, 190, 192, 235, 206, 188, 121, 166, 155, 190, 35, 36, 162, 62, 39, 233, 42, 61, 203, 52, 35, 63, 103, 187, 7, 190, 236, 62, 212, 62, 60, 38, 223, 189, 55, 179, 2, 62, 171, 1, 10, 191, 23, 18, 32, 190, 174, 165, 154, 188, 161, 17, 99, 189, 19, 31, 11, 62, 231, 171, 227, 188, 100, 232, 177, 60, 23, 27, 183, 189, 203, 27, 56, 190, 32, 136, 144, 60, 58, 91, 179, 189, 195, 184, 218, 61, 109, 193, 31, 60, 211, 205, 186, 61, 97, 230, 229, 189, 130, 213, 238, 189, 180, 196, 1, 62, 236, 233, 37, 61, 66, 55, 234, 189, 23, 176, 167, 61, 95, 206, 3, 190, 127, 209, 251, 61, 208, 79, 145, 189, 46, 212, 205, 189, 81, 244, 24, 60, 185, 37, 215, 189, 20, 225, 69, 189, 63, 102, 147, 188, 188, 17, 91, 189, 28, 117, 56, 61, 187, 190, 247, 189, 177, 77, 229, 60, 24, 99, 53, 189, 161, 219, 44, 189, 4, 31, 161, 60, 11, 192, 215, 190, 193, 211, 95, 190, 170, 236, 186, 189, 93, 172, 32, 187, 198, 157, 169, 60, 42, 150, 107, 58, 9, 8, 2, 189, 80, 136, 247, 189, 106, 181, 193, 61, 20, 10, 190, 61, 172, 166, 115, 59, 195, 141, 53, 61, 115, 248, 191, 62, 203, 180, 29, 190, 19, 190, 166, 61, 215, 184, 68, 62, 142, 232, 125, 62, 173, 2, 188, 61, 79, 87, 219, 188, 181, 59, 1, 190, 160, 133, 120, 189, 238, 172, 154, 190, 19, 249, 227, 61, 67, 124, 45, 62, 244, 92, 126, 190, 129, 29, 170, 62, 187, 241, 64, 62, 99, 160, 122, 61, 195, 166, 155, 61, 171, 0, 141, 189, 91, 254, 3, 190, 188, 95, 135, 190, 28, 101, 202, 61, 68, 118, 249, 187, 89, 86, 67, 189, 29, 182, 48, 61, 185, 62, 106, 62, 141, 43, 141, 190, 89, 177, 22, 187, 124, 111, 111, 61, 195, 230, 71, 189, 184, 79, 125, 188, 246, 175, 209, 61, 115, 109, 137, 62, 161, 230, 86, 61, 88, 53, 79, 189, 80, 27, 220, 189, 157, 177, 2, 62, 45, 40, 50, 189, 255, 24, 43, 190, 87, 52, 41, 60, 238, 100, 58, 190, 143, 0, 167, 61, 245, 175, 144, 189, 185, 4, 205, 188, 58, 134, 151, 61, 202, 121, 201, 189, 155, 207, 2, 62, 29, 136, 168, 61, 239, 215, 159, 60, 248, 168, 166, 190, 196, 78, 36, 190, 94, 61, 18, 190, 225, 56, 11, 190, 49, 152, 112, 61, 213, 68, 254, 188, 0, 243, 245, 59, 5, 87, 20, 189, 72, 89, 129, 61, 201, 159, 60, 189, 36, 39, 251, 189, 200, 80, 143, 189, 37, 190, 117, 190, 4, 225, 31, 61, 128, 130, 43, 190, 169, 132, 250, 189, 234, 19, 3, 190, 235, 30, 71, 190, 222, 184, 174, 61, 125, 60, 220, 61, 145, 249, 197, 61, 130, 189, 49, 62, 229, 228, 74, 189, 127, 178, 160, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 198, 236, 0, 190, 123, 7, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 49, 87, 68, 61, 76, 141, 30, 62, 225, 248, 36, 62, 194, 118, 14, 189, 161, 59, 15, 187, 226, 189, 204, 61, 114, 211, 195, 60, 46, 69, 108, 190, 160, 64, 92, 62, 134, 201, 61, 190, 178, 55, 32, 62, 250, 85, 249, 61, 134, 173, 24, 189, 48, 96, 32, 190, 68, 226, 175, 61, 7, 142, 133, 189, 152, 32, 169, 62, 25, 45, 42, 188, 224, 208, 216, 60, 72, 241, 191, 61, 193, 139, 16, 62, 163, 180, 53, 189, 122, 34, 179, 60, 177, 76, 137, 62, 184, 176, 171, 189, 156, 126, 253, 61, 9, 230, 34, 61, 3, 204, 94, 189, 125, 147, 177, 61, 192, 215, 49, 190, 201, 54, 10, 190, 5, 221, 228, 61, 94, 52, 127, 190, 22, 135, 35, 63, 234, 212, 57, 62, 113, 74, 184, 61, 45, 22, 166, 188, 129, 254, 209, 190, 53, 72, 207, 61, 146, 227, 132, 60, 139, 149, 72, 190, 191, 218, 159, 189, 14, 74, 88, 62, 128, 91, 3, 189, 188, 187, 10, 62, 212, 21, 137, 190, 246, 29, 238, 189, 240, 244, 68, 62, 38, 219, 25, 190, 139, 115, 222, 61, 85, 91, 102, 62, 140, 25, 25, 190, 164, 70, 159, 61, 56, 150, 198, 189, 134, 139, 131, 61, 8, 95, 10, 61, 255, 235, 46, 189, 51, 232, 124, 62, 132, 159, 133, 188, 147, 108, 160, 61, 224, 22, 32, 189, 3, 37, 233, 189, 164, 239, 49, 189, 18, 22, 128, 62, 10, 36, 16, 191, 18, 69, 201, 61, 252, 164, 147, 189, 170, 159, 100, 189, 73, 214, 37, 189, 142, 24, 45, 61, 241, 172, 171, 188, 164, 247, 221, 61, 52, 86, 145, 61, 216, 122, 128, 61, 220, 241, 167, 188, 85, 89, 13, 62, 197, 252, 242, 189, 26, 149, 215, 188, 42, 173, 92, 189, 194, 202, 144, 188, 36, 4, 154, 188, 174, 34, 201, 61, 192, 109, 230, 189, 252, 138, 190, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 206, 133, 61, 90, 200, 32, 189, 95, 185, 15, 190, 61, 190, 135, 187, 226, 76, 0, 190, 61, 244, 42, 190, 74, 130, 200, 189, 78, 200, 93, 61, 223, 111, 164, 189, 210, 186, 25, 188, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 132, 88, 62, 95, 122, 10, 61, 129, 168, 192, 61, 157, 20, 84, 62, 62, 197, 41, 187, 77, 130, 68, 62, 28, 37, 39, 190, 2, 85, 19, 187, 130, 36, 105, 189, 125, 180, 66, 62, 81, 94, 139, 190, 164, 237, 11, 61, 121, 50, 15, 189, 206, 32, 150, 62, 65, 176, 166, 62, 199, 241, 16, 62, 124, 191, 98, 190, 70, 229, 5, 62, 92, 65, 33, 60, 144, 60, 169, 188, 60, 122, 47, 190, 57, 20, 145, 62, 96, 0, 59, 61, 144, 137, 219, 189, 55, 253, 126, 190, 194, 43, 54, 189, 31, 183, 27, 61, 10, 246, 159, 188, 152, 201, 180, 188, 3, 16, 27, 190, 62, 190, 197, 190, 135, 19, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 53, 180, 59, 226, 47, 156, 61, 145, 0, 218, 62, 30, 144, 36, 63, 175, 135, 62, 189, 141, 207, 247, 62, 210, 115, 241, 61, 89, 109, 117, 62, 57, 47, 207, 59, 242, 29, 44, 189, 8, 104, 5, 191, 118, 22, 129, 190, 215, 206, 160, 62, 4, 27, 49, 190, 161, 97, 60, 63, 94, 51, 95, 190, 87, 209, 170, 60, 60, 74, 144, 191, 4, 202, 164, 190, 47, 100, 209, 62, 13, 12, 35, 63, 118, 148, 22, 186, 118, 97, 80, 188, 37, 153, 53, 62, 83, 115, 50, 191, 1, 105, 235, 189, 201, 237, 27, 190, 227, 41, 50, 190, 168, 56, 162, 61, 71, 25, 137, 61, 79, 37, 139, 62, 234, 251, 13, 189, 241, 18, 92, 190, 77, 90, 0, 62, 168, 159, 138, 190, 81, 81, 63, 188, 79, 116, 45, 190, 250, 216, 51, 61, 61, 45, 17, 190, 208, 59, 48, 190, 59, 92, 197, 189, 163, 191, 124, 190, 139, 162, 214, 61, 80, 42, 163, 61, 140, 217, 196, 62, 178, 156, 179, 190, 133, 117, 15, 62, 100, 52, 29, 190, 63, 247, 63, 61, 31, 183, 73, 61, 220, 251, 180, 61, 250, 249, 34, 190, 141, 103, 159, 62, 61, 225, 64, 190, 53, 3, 51, 190, 194, 202, 235, 61, 161, 239, 171, 62, 234, 109, 176, 189, 137, 131, 45, 61, 237, 221, 219, 188, 123, 224, 206, 61, 67, 25, 152, 60, 107, 82, 13, 62, 54, 74, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 148, 109, 190, 27, 194, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {47, 106, 167, 62, 83, 138, 122, 191, 141, 12, 4, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {119, 138, 255, 63, 110, 194, 50, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}