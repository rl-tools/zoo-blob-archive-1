// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 156, 60, 63, 28, 244, 202, 62, 88, 247, 81, 62, 225, 128, 139, 190, 254, 248, 173, 63, 16, 232, 157, 62, 6, 52, 219, 189, 94, 108, 62, 63, 41, 184, 210, 190, 207, 213, 1, 190, 152, 37, 90, 191, 56, 206, 224, 190, 142, 59, 125, 191, 55, 225, 36, 63, 241, 99, 5, 61, 3, 195, 130, 189, 89, 111, 56, 62, 21, 19, 75, 191, 250, 202, 88, 190, 214, 209, 80, 63, 129, 105, 132, 189, 30, 42, 17, 191, 202, 82, 210, 190, 251, 98, 255, 62, 66, 156, 204, 60, 206, 57, 57, 190, 36, 230, 237, 190, 92, 12, 251, 62, 1, 7, 154, 63, 66, 93, 66, 62, 9, 133, 16, 63, 115, 94, 89, 191, 59, 38, 12, 189, 0, 101, 43, 189, 160, 199, 112, 63, 188, 67, 53, 62, 34, 222, 30, 191, 37, 240, 250, 62, 86, 132, 70, 62, 215, 67, 10, 63, 177, 184, 157, 62, 174, 73, 202, 62, 177, 149, 48, 63, 22, 38, 20, 191, 41, 194, 102, 60, 193, 20, 135, 62, 18, 198, 192, 190, 223, 233, 214, 190, 25, 158, 149, 62, 177, 163, 244, 62, 114, 241, 200, 62, 44, 168, 139, 62, 128, 38, 162, 61, 184, 229, 26, 63, 209, 17, 146, 190, 98, 71, 203, 190, 158, 13, 203, 62, 22, 55, 39, 191, 22, 137, 156, 63, 215, 224, 156, 62, 8, 119, 225, 190, 218, 94, 192, 62, 105, 164, 83, 63, 184, 90, 69, 191, 103, 244, 46, 191, 116, 94, 251, 189, 105, 177, 47, 63, 202, 240, 147, 191, 146, 47, 193, 190, 147, 96, 8, 190, 203, 248, 52, 63, 0, 15, 139, 190, 204, 173, 54, 188, 13, 2, 41, 190, 88, 40, 30, 191, 105, 150, 40, 63, 16, 102, 82, 63, 114, 191, 126, 62, 147, 119, 91, 63, 229, 215, 124, 191, 183, 94, 151, 190, 193, 79, 52, 63, 157, 215, 14, 63, 249, 249, 83, 62, 197, 170, 254, 62, 8, 247, 91, 190, 234, 185, 112, 59, 167, 90, 56, 190, 75, 116, 162, 191, 109, 88, 113, 190, 8, 218, 62, 63, 213, 98, 163, 191, 194, 29, 167, 190, 249, 100, 140, 191, 41, 190, 21, 191, 39, 231, 227, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 139, 51, 191, 30, 99, 76, 190, 85, 137, 162, 62, 249, 164, 147, 190, 62, 174, 65, 63, 32, 205, 142, 62, 174, 99, 87, 62, 228, 203, 12, 191, 241, 244, 19, 190, 28, 147, 114, 190, 203, 215, 118, 189, 169, 102, 147, 190, 124, 116, 52, 63, 91, 43, 8, 190, 75, 222, 202, 62, 241, 138, 119, 191, 71, 251, 46, 62, 193, 103, 83, 189, 26, 131, 30, 62, 26, 58, 249, 61, 210, 52, 158, 61, 60, 81, 39, 190, 6, 115, 195, 62, 14, 216, 115, 190, 59, 23, 0, 191, 110, 61, 172, 190, 228, 100, 219, 190, 201, 37, 53, 190, 246, 3, 168, 62, 123, 103, 167, 190, 188, 83, 155, 62, 143, 101, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 21, 78, 191, 165, 70, 121, 62, 139, 21, 227, 188, 136, 68, 174, 189, 247, 199, 161, 62, 70, 238, 9, 62, 81, 87, 22, 62, 11, 110, 3, 190, 108, 107, 16, 190, 147, 10, 186, 190, 108, 0, 15, 61, 195, 50, 215, 61, 91, 137, 115, 62, 74, 241, 33, 191, 213, 128, 45, 62, 246, 25, 200, 189, 42, 73, 218, 190, 118, 183, 217, 190, 176, 206, 35, 62, 187, 44, 19, 62, 50, 209, 228, 61, 212, 82, 244, 61, 255, 252, 20, 62, 131, 41, 74, 190, 197, 145, 174, 61, 184, 168, 45, 191, 200, 132, 113, 191, 6, 66, 190, 190, 74, 17, 153, 61, 33, 65, 36, 189, 140, 127, 14, 61, 114, 223, 144, 189, 146, 124, 248, 61, 233, 96, 85, 190, 2, 108, 2, 190, 235, 245, 46, 190, 247, 183, 223, 189, 188, 144, 131, 189, 23, 170, 4, 189, 101, 2, 30, 190, 21, 177, 210, 189, 111, 157, 181, 61, 94, 77, 205, 61, 9, 56, 114, 187, 226, 82, 187, 60, 208, 246, 102, 188, 133, 240, 35, 189, 175, 163, 87, 189, 136, 60, 138, 61, 223, 92, 11, 189, 176, 119, 67, 189, 16, 155, 19, 189, 180, 186, 69, 190, 111, 77, 154, 189, 126, 252, 18, 189, 219, 74, 1, 190, 109, 116, 202, 61, 57, 88, 70, 190, 190, 90, 1, 188, 123, 190, 206, 188, 171, 133, 214, 187, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 97, 254, 100, 190, 124, 157, 37, 190, 91, 186, 8, 62, 6, 139, 130, 189, 115, 7, 61, 191, 205, 244, 175, 62, 168, 216, 176, 190, 211, 29, 92, 62, 184, 117, 30, 62, 48, 198, 36, 191, 69, 173, 169, 62, 233, 222, 138, 190, 204, 231, 177, 191, 213, 42, 168, 190, 196, 35, 54, 61, 190, 65, 46, 58, 24, 191, 148, 189, 187, 168, 108, 190, 60, 25, 73, 189, 16, 86, 22, 191, 136, 231, 86, 190, 225, 175, 185, 190, 167, 76, 161, 61, 211, 187, 140, 61, 79, 101, 154, 61, 187, 111, 131, 190, 13, 40, 209, 189, 27, 59, 19, 62, 245, 84, 131, 62, 185, 115, 12, 191, 225, 160, 217, 62, 100, 203, 35, 191, 24, 55, 11, 191, 33, 114, 160, 61, 34, 85, 76, 190, 235, 182, 174, 191, 123, 40, 147, 62, 215, 173, 70, 191, 95, 150, 98, 190, 214, 230, 180, 62, 245, 198, 181, 190, 59, 83, 31, 189, 90, 2, 148, 190, 207, 25, 70, 189, 177, 42, 138, 62, 180, 172, 139, 190, 100, 8, 243, 60, 79, 58, 25, 190, 56, 21, 215, 57, 175, 173, 141, 190, 74, 184, 180, 62, 43, 32, 121, 62, 139, 173, 81, 186, 250, 179, 85, 62, 248, 41, 248, 190, 119, 7, 99, 191, 222, 233, 0, 62, 140, 30, 39, 190, 32, 148, 106, 61, 148, 143, 2, 191, 22, 75, 5, 189, 146, 64, 198, 61, 165, 211, 181, 190, 221, 160, 254, 62, 208, 65, 129, 191, 55, 192, 180, 189, 169, 137, 166, 61, 209, 247, 20, 191, 76, 36, 244, 190, 147, 15, 97, 190, 37, 134, 134, 191, 17, 0, 191, 189, 205, 6, 56, 191, 197, 82, 112, 190, 15, 5, 113, 61, 86, 226, 21, 189, 36, 57, 59, 189, 206, 190, 143, 62, 138, 165, 35, 62, 193, 36, 35, 61, 35, 61, 46, 62, 132, 233, 2, 189, 36, 220, 94, 62, 107, 93, 210, 189, 72, 53, 57, 186, 159, 119, 93, 190, 62, 123, 3, 62, 176, 45, 14, 190, 205, 86, 189, 190, 253, 158, 189, 189, 200, 165, 100, 61, 251, 157, 86, 61, 1, 154, 121, 62, 62, 26, 91, 191, 113, 63, 124, 60, 59, 20, 62, 62, 91, 237, 53, 60, 68, 13, 95, 190, 52, 199, 225, 61, 5, 0, 72, 190, 116, 88, 216, 62, 121, 168, 130, 187, 237, 247, 179, 62, 88, 252, 10, 189, 101, 148, 113, 190, 98, 240, 27, 63, 18, 244, 47, 191, 232, 131, 81, 62, 162, 207, 183, 61, 10, 27, 168, 189, 72, 242, 254, 61, 204, 222, 142, 191, 4, 11, 73, 62, 165, 94, 149, 190, 228, 139, 178, 189, 27, 23, 126, 61, 254, 17, 128, 190, 120, 73, 53, 63, 38, 194, 19, 191, 70, 181, 39, 62, 185, 161, 150, 190, 108, 128, 197, 62, 65, 168, 9, 191, 221, 18, 166, 62, 176, 163, 117, 61, 195, 52, 238, 62, 198, 106, 196, 191, 69, 184, 62, 63, 134, 1, 10, 62, 121, 25, 231, 189, 84, 161, 2, 190, 143, 150, 164, 58, 234, 97, 122, 61, 244, 17, 175, 61, 190, 206, 202, 188, 56, 130, 187, 61, 186, 191, 184, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 159, 119, 65, 60, 22, 253, 158, 61, 56, 24, 185, 61, 92, 62, 17, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 183, 57, 32, 61, 7, 116, 14, 189, 249, 46, 247, 189, 58, 233, 159, 188, 45, 204, 13, 190, 151, 83, 81, 187, 125, 228, 46, 190, 96, 170, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 194, 20, 127, 61, 120, 226, 115, 189, 124, 225, 17, 189, 230, 208, 244, 189, 220, 113, 57, 60, 222, 167, 140, 187, 61, 178, 175, 191, 220, 153, 162, 62, 39, 34, 183, 190, 13, 0, 161, 60, 90, 57, 57, 62, 151, 41, 52, 190, 144, 53, 140, 61, 151, 253, 137, 190, 29, 134, 167, 61, 58, 132, 150, 61, 18, 64, 49, 190, 194, 161, 103, 190, 80, 202, 131, 190, 198, 105, 54, 190, 158, 224, 3, 190, 65, 19, 54, 62, 136, 114, 38, 62, 147, 79, 120, 62, 79, 216, 144, 62, 235, 102, 38, 62, 114, 183, 106, 190, 33, 228, 39, 190, 141, 185, 47, 190, 182, 245, 78, 62, 1, 180, 117, 190, 238, 225, 204, 190, 104, 232, 141, 190, 140, 147, 171, 61, 27, 51, 148, 62, 90, 15, 30, 190, 225, 226, 251, 61, 190, 232, 18, 190, 174, 77, 2, 61, 73, 10, 194, 188, 10, 203, 195, 61, 5, 5, 0, 190, 202, 127, 1, 62, 15, 15, 234, 189, 51, 27, 3, 61, 112, 1, 20, 190, 187, 51, 36, 189, 192, 110, 218, 61, 111, 173, 246, 189, 173, 72, 148, 61, 102, 150, 202, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 121, 30, 245, 189, 101, 236, 236, 188, 7, 147, 130, 61, 15, 219, 75, 186, 139, 248, 189, 189, 69, 71, 25, 62, 229, 159, 11, 59, 134, 194, 191, 61, 4, 42, 240, 58, 21, 214, 21, 190, 0, 212, 146, 188, 95, 248, 244, 190, 74, 236, 31, 190, 182, 214, 47, 62, 90, 246, 108, 61, 227, 204, 136, 62, 67, 15, 103, 189, 188, 175, 193, 61, 193, 136, 147, 189, 217, 142, 20, 190, 159, 211, 246, 190, 202, 100, 12, 62, 19, 220, 48, 190, 25, 127, 103, 62, 176, 197, 101, 59, 193, 142, 64, 62, 11, 112, 49, 190, 31, 178, 3, 62, 207, 42, 26, 190, 197, 91, 144, 188, 246, 14, 94, 190, 23, 160, 190, 60, 94, 170, 57, 189, 161, 174, 221, 61, 2, 38, 225, 189, 127, 200, 90, 190, 249, 40, 139, 190, 189, 94, 167, 190, 173, 131, 145, 61, 169, 67, 29, 62, 225, 163, 63, 188, 127, 182, 60, 62, 251, 99, 52, 190, 211, 55, 80, 190, 158, 59, 40, 190, 235, 87, 73, 190, 50, 127, 163, 189, 46, 89, 54, 191, 5, 163, 3, 190, 17, 65, 93, 191, 169, 89, 255, 190, 163, 95, 247, 189, 21, 102, 230, 190, 238, 155, 255, 61, 107, 97, 83, 190, 51, 3, 147, 62, 200, 131, 191, 190, 50, 205, 200, 60, 147, 200, 68, 62, 253, 23, 144, 190, 59, 196, 133, 188, 183, 227, 25, 62, 79, 209, 105, 61, 50, 151, 35, 191, 224, 120, 103, 190, 43, 223, 50, 62, 163, 47, 40, 191, 27, 145, 33, 61, 21, 227, 158, 190, 196, 225, 58, 63, 21, 89, 7, 191, 247, 180, 161, 62, 238, 170, 209, 61, 59, 20, 77, 62, 255, 225, 167, 189, 39, 124, 129, 190, 138, 143, 22, 60, 45, 78, 28, 191, 163, 195, 241, 190, 55, 83, 71, 189, 48, 82, 209, 190, 121, 167, 142, 62, 144, 17, 54, 62, 122, 107, 196, 190, 8, 75, 188, 189, 7, 19, 244, 61, 188, 247, 175, 189, 198, 121, 87, 61, 241, 52, 186, 188, 225, 234, 25, 61, 14, 241, 28, 61, 164, 102, 216, 188, 192, 27, 219, 61, 17, 141, 141, 61, 170, 230, 75, 187, 254, 56, 92, 62, 162, 133, 106, 190, 1, 13, 193, 190, 35, 79, 252, 190, 61, 23, 155, 60, 133, 62, 141, 190, 147, 24, 240, 190, 110, 118, 209, 58, 145, 216, 218, 61, 85, 206, 210, 190, 245, 213, 37, 190, 168, 225, 151, 62, 200, 148, 64, 190, 111, 249, 76, 59, 187, 82, 172, 188, 229, 128, 241, 189, 111, 1, 147, 190, 206, 90, 200, 189, 205, 192, 25, 62, 34, 80, 39, 62, 146, 200, 165, 60, 124, 191, 103, 191, 65, 8, 60, 62, 255, 255, 217, 61, 154, 64, 26, 191, 153, 185, 50, 191, 102, 32, 80, 62, 47, 225, 165, 190, 108, 231, 209, 190, 238, 88, 120, 62, 182, 103, 201, 62, 215, 145, 152, 190, 3, 198, 19, 190, 238, 12, 65, 189, 179, 54, 78, 62, 131, 29, 45, 62, 82, 87, 127, 62, 179, 205, 116, 191, 122, 176, 161, 62, 6, 95, 86, 190, 116, 207, 46, 61, 159, 248, 237, 190, 87, 208, 82, 62, 72, 174, 27, 191, 64, 145, 120, 191, 180, 216, 146, 190, 90, 47, 117, 62, 231, 16, 150, 189, 25, 121, 160, 62, 184, 195, 105, 62, 252, 50, 28, 189, 159, 16, 102, 191, 188, 181, 169, 189, 84, 123, 86, 190, 79, 135, 46, 189, 55, 81, 117, 190, 142, 76, 154, 62, 157, 114, 205, 189, 78, 54, 142, 189, 158, 9, 8, 189, 174, 20, 20, 62, 165, 48, 18, 190, 16, 240, 38, 190, 250, 67, 184, 187, 178, 11, 146, 190, 176, 248, 235, 189, 98, 74, 147, 62, 191, 132, 25, 62, 254, 182, 143, 190, 211, 31, 185, 61, 112, 240, 164, 189, 125, 165, 38, 62, 228, 110, 91, 62, 35, 28, 35, 62, 253, 91, 91, 62, 227, 22, 4, 190, 125, 141, 89, 191, 131, 12, 164, 62, 182, 16, 157, 190, 124, 163, 8, 192, 178, 226, 73, 62, 29, 39, 166, 191, 36, 101, 62, 190, 111, 61, 44, 62, 254, 97, 60, 191, 29, 7, 12, 191, 124, 27, 129, 62, 254, 173, 195, 60, 142, 47, 113, 62, 98, 29, 154, 190, 167, 156, 212, 61, 25, 232, 39, 190, 145, 110, 163, 188, 123, 157, 72, 190, 155, 211, 243, 62, 93, 164, 166, 62, 184, 78, 186, 189, 74, 182, 129, 62, 188, 40, 67, 190, 224, 220, 140, 190, 102, 251, 18, 190, 121, 20, 40, 191, 56, 171, 37, 62, 78, 90, 199, 190, 18, 111, 153, 62, 205, 187, 66, 189, 189, 155, 18, 61, 152, 200, 6, 62, 125, 227, 241, 190, 210, 170, 142, 190, 229, 12, 0, 191, 34, 151, 89, 62, 174, 203, 97, 60, 179, 1, 3, 191, 179, 197, 167, 188, 164, 149, 145, 59, 224, 194, 45, 191, 250, 224, 144, 190, 190, 130, 237, 62, 130, 95, 196, 188, 218, 156, 210, 61, 141, 202, 195, 61, 27, 22, 19, 62, 21, 77, 92, 190, 16, 141, 145, 62, 93, 202, 90, 59, 158, 81, 50, 62, 66, 170, 124, 190, 163, 191, 170, 61, 217, 242, 119, 190, 242, 138, 157, 61, 106, 13, 121, 190, 213, 131, 199, 189, 9, 135, 39, 189, 140, 181, 195, 190, 51, 149, 125, 62, 76, 169, 163, 62, 196, 158, 154, 62, 54, 187, 73, 187, 212, 163, 35, 63, 228, 82, 12, 190, 60, 37, 15, 62, 132, 115, 92, 61, 62, 60, 102, 189, 237, 169, 20, 189, 189, 115, 150, 61, 16, 10, 121, 62, 98, 225, 209, 190, 243, 14, 79, 62, 249, 138, 234, 62, 208, 71, 212, 190, 218, 42, 152, 62, 179, 54, 133, 190, 211, 200, 237, 189, 137, 244, 195, 188, 114, 201, 69, 62, 210, 63, 97, 62, 68, 181, 11, 190, 201, 29, 192, 190, 248, 136, 5, 62, 85, 182, 194, 189, 6, 52, 238, 190, 151, 228, 206, 61, 55, 26, 197, 61, 71, 82, 238, 188, 254, 4, 253, 61, 151, 36, 96, 62, 145, 243, 191, 60, 254, 30, 10, 62, 94, 136, 219, 190, 61, 149, 131, 190, 166, 231, 150, 190, 71, 144, 223, 62, 72, 155, 224, 191, 217, 53, 147, 62, 238, 52, 133, 189, 10, 204, 76, 62, 100, 160, 189, 189, 165, 141, 201, 62, 217, 145, 34, 191, 219, 173, 172, 62, 29, 196, 187, 62, 42, 30, 133, 190, 176, 167, 167, 191, 132, 56, 157, 62, 244, 5, 37, 63, 55, 51, 162, 190, 195, 187, 219, 190, 187, 212, 172, 188, 248, 93, 217, 62, 37, 217, 121, 189, 16, 202, 216, 191, 122, 163, 205, 191, 128, 13, 1, 61, 189, 92, 235, 189, 98, 58, 22, 62, 111, 235, 2, 191, 83, 74, 119, 62, 147, 32, 18, 191, 144, 184, 155, 62, 181, 156, 89, 62, 3, 200, 226, 62, 124, 82, 150, 190, 100, 66, 11, 62, 168, 252, 61, 191, 142, 50, 149, 190, 94, 86, 129, 62, 70, 241, 17, 189, 209, 73, 21, 63, 184, 21, 234, 60, 240, 248, 52, 62, 74, 24, 48, 191, 58, 164, 119, 62, 124, 62, 160, 190, 122, 71, 183, 189, 251, 254, 12, 191, 129, 111, 32, 63, 213, 159, 145, 61, 119, 248, 35, 191, 92, 54, 244, 188, 196, 149, 17, 62, 36, 206, 18, 62, 14, 79, 90, 188, 83, 138, 50, 189, 107, 34, 201, 190, 131, 209, 114, 62, 40, 28, 27, 189, 140, 110, 39, 62, 68, 232, 118, 61, 206, 140, 114, 60, 103, 177, 129, 189, 136, 52, 115, 190, 140, 20, 129, 190, 224, 38, 28, 63, 237, 25, 132, 61, 236, 32, 29, 63, 80, 242, 128, 191, 16, 250, 83, 190, 186, 61, 112, 61, 49, 39, 149, 190, 215, 132, 130, 191, 172, 248, 11, 61, 194, 127, 19, 190, 96, 194, 148, 62, 105, 100, 90, 60, 75, 214, 11, 191, 124, 68, 202, 62, 89, 209, 133, 60, 24, 216, 26, 191, 63, 184, 149, 190, 172, 183, 119, 62, 114, 145, 18, 188, 251, 18, 232, 60, 154, 30, 105, 190, 8, 220, 66, 189, 143, 79, 129, 190, 26, 69, 139, 60, 174, 178, 2, 62, 80, 218, 38, 62, 113, 93, 25, 190, 237, 120, 117, 62, 206, 145, 179, 190, 137, 12, 90, 189, 251, 111, 17, 189, 245, 172, 140, 62, 209, 230, 79, 189, 205, 86, 121, 62, 237, 158, 5, 191, 150, 147, 2, 191, 22, 114, 131, 190, 26, 26, 227, 61, 55, 241, 55, 190, 163, 7, 151, 190, 163, 161, 96, 189, 254, 174, 172, 190, 138, 223, 184, 62, 208, 230, 2, 62, 250, 36, 22, 191, 172, 85, 145, 62, 161, 141, 171, 190, 51, 12, 120, 191, 32, 55, 150, 190, 54, 160, 201, 62, 96, 135, 75, 61, 60, 185, 166, 189, 39, 200, 163, 61, 99, 136, 77, 62, 80, 178, 244, 190, 143, 108, 104, 190, 224, 252, 50, 190, 236, 141, 140, 62, 132, 56, 75, 60, 58, 106, 216, 62, 195, 54, 13, 191, 101, 128, 166, 62, 252, 161, 118, 189, 135, 223, 32, 62, 142, 46, 170, 190, 193, 242, 163, 62, 2, 75, 59, 191, 120, 96, 175, 190, 165, 24, 18, 189, 5, 136, 7, 62, 198, 115, 147, 190, 185, 175, 163, 61, 64, 240, 194, 61, 13, 177, 190, 61, 79, 189, 5, 191, 84, 230, 210, 187, 133, 214, 121, 58, 115, 209, 3, 190, 97, 239, 173, 61, 75, 116, 71, 61, 11, 126, 87, 62, 1, 20, 247, 189, 131, 101, 5, 190, 123, 11, 0, 62, 247, 187, 13, 62, 248, 53, 12, 190, 20, 156, 24, 190, 213, 174, 174, 190, 9, 91, 182, 190, 18, 163, 209, 189, 123, 223, 146, 57, 42, 74, 193, 60, 120, 223, 135, 61, 106, 44, 197, 190, 107, 48, 182, 62, 206, 229, 5, 62, 176, 161, 237, 190, 172, 142, 84, 60, 203, 210, 180, 190, 131, 96, 144, 190, 46, 188, 214, 61, 188, 237, 38, 62, 103, 176, 225, 189, 107, 7, 32, 189, 128, 213, 143, 61, 90, 38, 221, 189, 236, 39, 128, 190, 50, 82, 28, 190, 238, 130, 121, 190, 156, 239, 98, 62, 22, 227, 16, 62, 43, 235, 175, 190, 149, 234, 60, 61, 171, 206, 32, 62, 254, 22, 131, 190, 18, 179, 140, 62, 176, 7, 37, 189, 95, 181, 28, 62, 74, 230, 245, 190, 210, 206, 118, 189, 146, 206, 5, 191, 192, 245, 102, 62, 65, 106, 143, 189, 143, 104, 31, 62, 9, 90, 246, 60, 214, 128, 234, 190, 52, 166, 72, 61, 120, 151, 141, 61, 255, 164, 87, 190, 216, 26, 112, 62, 95, 202, 15, 191, 83, 101, 94, 62, 227, 71, 139, 189, 246, 43, 101, 62, 110, 226, 184, 62, 181, 87, 237, 189, 120, 70, 70, 62, 124, 247, 133, 61, 156, 67, 6, 191, 1, 241, 197, 58, 222, 209, 38, 63, 6, 118, 26, 191, 164, 111, 23, 62, 209, 156, 255, 60, 58, 116, 183, 61, 152, 145, 223, 188, 188, 103, 78, 62, 55, 129, 200, 62, 210, 192, 77, 189, 103, 7, 8, 191, 161, 109, 1, 190, 96, 173, 163, 190, 105, 121, 143, 189, 251, 87, 135, 190, 23, 123, 53, 61, 74, 78, 81, 62, 86, 218, 120, 62, 41, 126, 84, 190, 242, 243, 188, 62, 165, 66, 59, 190, 83, 249, 220, 189, 226, 18, 149, 190, 153, 89, 51, 62, 121, 198, 65, 190, 55, 95, 114, 61, 143, 170, 116, 190, 149, 166, 130, 189, 28, 94, 64, 191, 72, 200, 67, 190, 64, 164, 150, 190, 237, 219, 95, 61, 120, 7, 85, 61, 195, 191, 19, 191, 225, 9, 18, 62, 6, 182, 104, 190, 237, 95, 60, 191, 251, 197, 134, 190, 77, 171, 58, 190, 22, 227, 48, 62, 184, 30, 110, 190, 223, 119, 166, 190, 179, 231, 197, 189, 130, 95, 89, 190, 100, 37, 198, 60, 90, 6, 17, 191, 231, 227, 181, 60, 246, 43, 69, 189, 221, 92, 92, 62, 24, 208, 59, 190, 113, 59, 74, 63, 105, 62, 214, 190, 112, 89, 218, 62, 84, 192, 149, 189, 125, 191, 74, 62, 197, 116, 64, 191, 23, 18, 32, 190, 174, 165, 154, 188, 161, 17, 99, 189, 19, 31, 11, 62, 231, 171, 227, 188, 100, 232, 177, 60, 23, 27, 183, 189, 203, 27, 56, 190, 32, 136, 144, 60, 58, 91, 179, 189, 195, 184, 218, 61, 109, 193, 31, 60, 211, 205, 186, 61, 97, 230, 229, 189, 130, 213, 238, 189, 180, 196, 1, 62, 236, 233, 37, 61, 66, 55, 234, 189, 23, 176, 167, 61, 95, 206, 3, 190, 127, 209, 251, 61, 208, 79, 145, 189, 46, 212, 205, 189, 81, 244, 24, 60, 185, 37, 215, 189, 20, 225, 69, 189, 63, 102, 147, 188, 188, 17, 91, 189, 28, 117, 56, 61, 187, 190, 247, 189, 177, 77, 229, 60, 24, 99, 53, 189, 50, 127, 59, 190, 48, 120, 41, 190, 148, 83, 33, 191, 201, 74, 58, 189, 99, 246, 206, 60, 55, 90, 10, 190, 151, 47, 110, 62, 245, 153, 79, 187, 254, 22, 174, 60, 60, 241, 96, 190, 159, 127, 81, 62, 101, 6, 75, 189, 37, 196, 6, 61, 196, 46, 95, 189, 219, 215, 196, 62, 197, 140, 154, 190, 10, 232, 120, 61, 174, 226, 30, 62, 251, 190, 173, 62, 40, 29, 105, 189, 78, 70, 137, 189, 11, 245, 29, 190, 188, 2, 138, 189, 25, 145, 8, 190, 229, 29, 76, 190, 31, 177, 178, 61, 126, 11, 177, 190, 94, 149, 139, 62, 168, 182, 42, 62, 179, 236, 71, 62, 149, 145, 176, 61, 19, 145, 100, 62, 62, 41, 58, 190, 229, 205, 140, 191, 252, 190, 24, 62, 124, 210, 51, 190, 240, 109, 105, 189, 206, 88, 3, 61, 41, 56, 158, 62, 121, 152, 116, 188, 46, 106, 114, 189, 232, 214, 66, 62, 70, 169, 251, 189, 181, 237, 73, 191, 113, 222, 38, 62, 95, 235, 127, 62, 145, 60, 191, 61, 241, 13, 200, 190, 5, 17, 230, 189, 37, 179, 73, 62, 152, 67, 1, 62, 228, 219, 157, 191, 71, 143, 74, 188, 158, 223, 24, 190, 214, 181, 209, 60, 106, 194, 190, 189, 157, 213, 58, 189, 211, 85, 6, 62, 173, 100, 161, 191, 245, 199, 39, 62, 209, 236, 197, 61, 82, 247, 176, 62, 110, 82, 193, 190, 126, 196, 39, 191, 94, 61, 18, 190, 241, 43, 14, 190, 49, 152, 112, 61, 213, 68, 254, 188, 131, 154, 128, 59, 5, 87, 20, 189, 44, 14, 129, 61, 144, 251, 85, 189, 36, 39, 251, 189, 221, 114, 143, 189, 37, 190, 117, 190, 51, 1, 29, 61, 186, 127, 48, 190, 247, 136, 255, 189, 218, 22, 3, 190, 235, 30, 71, 190, 251, 249, 166, 61, 36, 223, 206, 61, 201, 168, 185, 61, 129, 11, 45, 62, 202, 111, 118, 189, 23, 63, 161, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 88, 32, 1, 190, 197, 83, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 200, 250, 66, 61, 10, 145, 76, 62, 124, 164, 158, 62, 149, 91, 49, 61, 159, 61, 236, 188, 147, 247, 17, 61, 209, 111, 87, 61, 120, 184, 40, 190, 85, 253, 80, 62, 22, 170, 46, 190, 129, 43, 107, 62, 31, 209, 6, 61, 49, 212, 4, 62, 246, 176, 117, 190, 248, 49, 221, 61, 187, 143, 218, 189, 161, 107, 155, 62, 103, 166, 206, 188, 171, 248, 213, 60, 66, 136, 170, 61, 220, 108, 145, 62, 187, 116, 58, 187, 71, 18, 137, 190, 171, 13, 117, 62, 27, 135, 139, 188, 100, 186, 15, 62, 33, 173, 70, 61, 107, 254, 118, 61, 44, 108, 161, 61, 187, 111, 38, 190, 87, 254, 161, 190, 118, 194, 139, 61, 77, 211, 10, 191, 5, 88, 106, 63, 12, 230, 182, 62, 105, 46, 24, 62, 188, 116, 8, 61, 167, 177, 5, 191, 10, 254, 38, 62, 245, 181, 27, 61, 106, 233, 150, 190, 107, 11, 155, 188, 36, 196, 128, 62, 97, 18, 125, 189, 181, 45, 170, 62, 34, 177, 232, 190, 178, 47, 239, 188, 120, 115, 60, 62, 245, 7, 228, 189, 114, 20, 208, 61, 13, 118, 129, 62, 67, 105, 7, 190, 182, 169, 139, 62, 81, 155, 9, 61, 16, 158, 9, 62, 201, 6, 22, 61, 252, 236, 3, 188, 227, 55, 160, 62, 179, 35, 98, 61, 133, 6, 56, 62, 217, 142, 150, 60, 71, 159, 183, 189, 101, 242, 188, 190, 100, 4, 134, 62, 198, 3, 15, 191, 18, 69, 201, 61, 252, 164, 147, 189, 170, 159, 100, 189, 73, 214, 37, 189, 142, 24, 45, 61, 241, 172, 171, 188, 164, 247, 221, 61, 52, 86, 145, 61, 216, 122, 128, 61, 220, 241, 167, 188, 85, 89, 13, 62, 197, 252, 242, 189, 26, 149, 215, 188, 42, 173, 92, 189, 194, 202, 144, 188, 36, 4, 154, 188, 174, 34, 201, 61, 192, 109, 230, 189, 252, 138, 190, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 206, 133, 61, 90, 200, 32, 189, 95, 185, 15, 190, 61, 190, 135, 187, 226, 76, 0, 190, 61, 244, 42, 190, 74, 130, 200, 189, 78, 200, 93, 61, 223, 111, 164, 189, 210, 186, 25, 188, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 12, 218, 62, 95, 122, 10, 61, 158, 38, 178, 60, 245, 57, 133, 62, 112, 189, 7, 189, 194, 195, 183, 62, 210, 188, 42, 190, 44, 144, 46, 187, 77, 35, 119, 189, 171, 96, 89, 62, 226, 164, 1, 190, 150, 231, 136, 189, 205, 150, 212, 188, 163, 223, 175, 62, 13, 131, 154, 62, 123, 75, 42, 62, 61, 190, 66, 190, 37, 163, 201, 61, 135, 20, 68, 61, 70, 5, 142, 187, 5, 47, 15, 190, 187, 98, 155, 62, 240, 213, 131, 61, 205, 18, 68, 190, 10, 196, 144, 190, 194, 43, 54, 189, 65, 154, 9, 61, 213, 155, 55, 186, 139, 44, 199, 188, 35, 103, 60, 190, 91, 51, 210, 190, 135, 19, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 146, 65, 190, 226, 47, 156, 61, 91, 97, 11, 63, 167, 10, 42, 63, 186, 170, 55, 61, 182, 161, 77, 63, 148, 77, 242, 61, 71, 198, 63, 62, 179, 131, 162, 59, 145, 19, 148, 189, 96, 200, 35, 191, 20, 16, 120, 190, 91, 153, 85, 62, 7, 172, 33, 190, 108, 6, 57, 63, 0, 54, 123, 190, 245, 0, 63, 62, 204, 253, 214, 191, 200, 110, 0, 191, 176, 80, 202, 62, 112, 183, 61, 63, 233, 126, 121, 186, 254, 171, 62, 188, 38, 132, 86, 62, 133, 139, 153, 191, 1, 105, 235, 189, 155, 56, 27, 190, 62, 54, 207, 191, 202, 128, 161, 61, 77, 165, 178, 60, 45, 10, 187, 62, 234, 251, 13, 189, 151, 122, 205, 190, 77, 90, 0, 62, 2, 206, 239, 190, 24, 172, 237, 58, 49, 149, 35, 191, 186, 242, 0, 189, 107, 57, 16, 190, 105, 76, 82, 190, 68, 176, 195, 189, 107, 36, 91, 190, 227, 231, 149, 61, 55, 133, 12, 62, 68, 89, 65, 63, 95, 42, 213, 190, 153, 159, 157, 62, 12, 6, 168, 190, 68, 101, 117, 188, 99, 51, 211, 62, 208, 3, 25, 62, 85, 185, 163, 190, 49, 237, 184, 61, 201, 223, 192, 190, 165, 113, 190, 190, 65, 73, 10, 62, 53, 234, 231, 62, 234, 109, 176, 189, 79, 34, 34, 189, 187, 212, 104, 63, 35, 21, 207, 61, 4, 48, 15, 189, 135, 218, 92, 190, 54, 74, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 169, 131, 190, 184, 9, 213, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 108, 193, 191, 143, 142, 31, 192, 215, 112, 58, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 115, 64, 192, 140, 159, 216, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}