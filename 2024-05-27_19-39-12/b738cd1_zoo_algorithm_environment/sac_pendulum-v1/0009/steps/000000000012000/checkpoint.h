// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 197, 55, 63, 87, 181, 75, 62, 39, 86, 163, 62, 195, 28, 72, 190, 45, 91, 140, 63, 164, 81, 250, 62, 252, 31, 7, 190, 8, 1, 47, 63, 103, 131, 216, 190, 150, 42, 65, 190, 228, 4, 37, 191, 163, 129, 247, 190, 241, 211, 98, 191, 160, 23, 50, 63, 146, 30, 172, 60, 44, 74, 58, 190, 115, 17, 92, 62, 196, 7, 89, 191, 171, 183, 145, 190, 109, 121, 62, 63, 81, 13, 208, 189, 14, 80, 17, 191, 88, 10, 246, 190, 50, 54, 7, 63, 186, 198, 207, 189, 183, 96, 62, 190, 95, 49, 249, 190, 33, 38, 252, 62, 8, 168, 129, 63, 219, 128, 63, 62, 20, 214, 23, 63, 252, 68, 64, 191, 42, 47, 5, 62, 195, 203, 44, 59, 39, 132, 82, 63, 161, 107, 48, 62, 161, 80, 31, 191, 156, 251, 211, 62, 73, 125, 55, 62, 110, 66, 13, 63, 63, 236, 45, 62, 154, 223, 164, 62, 226, 120, 52, 63, 235, 255, 15, 191, 55, 251, 23, 61, 80, 49, 59, 62, 12, 153, 194, 190, 3, 171, 218, 190, 161, 191, 192, 62, 206, 200, 7, 63, 9, 233, 176, 62, 94, 97, 143, 62, 28, 192, 30, 190, 101, 247, 13, 63, 109, 190, 95, 190, 17, 202, 4, 191, 105, 200, 217, 62, 89, 53, 10, 191, 112, 9, 139, 63, 112, 20, 135, 62, 124, 230, 212, 190, 96, 178, 117, 62, 219, 2, 59, 63, 213, 193, 156, 190, 157, 190, 77, 191, 249, 18, 101, 189, 225, 4, 70, 63, 27, 151, 98, 191, 68, 215, 208, 190, 252, 218, 114, 190, 181, 172, 55, 63, 64, 254, 148, 190, 142, 113, 150, 60, 172, 189, 208, 189, 154, 57, 34, 191, 138, 83, 52, 63, 215, 39, 23, 63, 234, 206, 106, 62, 119, 37, 84, 63, 130, 45, 94, 191, 176, 18, 146, 190, 213, 107, 66, 63, 182, 22, 210, 62, 168, 114, 53, 62, 167, 250, 20, 63, 97, 73, 74, 190, 143, 237, 219, 60, 205, 40, 58, 61, 167, 78, 145, 191, 190, 77, 106, 190, 122, 13, 67, 63, 35, 31, 145, 191, 32, 41, 153, 190, 186, 140, 133, 191, 88, 238, 2, 191, 2, 253, 16, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 188, 45, 191, 180, 71, 129, 190, 83, 222, 164, 62, 39, 106, 154, 190, 86, 26, 63, 63, 52, 198, 138, 62, 221, 3, 37, 62, 100, 183, 15, 191, 237, 174, 132, 60, 139, 52, 106, 190, 34, 42, 167, 187, 87, 51, 131, 190, 168, 105, 47, 63, 110, 3, 9, 190, 126, 84, 216, 62, 190, 88, 113, 191, 123, 148, 163, 62, 105, 235, 88, 189, 141, 151, 10, 62, 95, 169, 223, 61, 73, 70, 119, 189, 195, 39, 196, 61, 29, 112, 5, 63, 70, 63, 216, 189, 45, 67, 249, 190, 10, 29, 142, 190, 245, 27, 220, 190, 120, 166, 231, 189, 249, 228, 205, 62, 147, 29, 43, 190, 29, 215, 178, 62, 111, 108, 113, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 78, 74, 191, 112, 147, 205, 61, 91, 116, 239, 188, 61, 128, 162, 189, 119, 39, 112, 62, 49, 44, 19, 62, 245, 31, 218, 61, 212, 62, 8, 190, 176, 31, 228, 189, 37, 170, 166, 190, 215, 28, 111, 190, 107, 76, 153, 58, 138, 200, 252, 61, 85, 41, 217, 190, 195, 91, 197, 60, 234, 8, 172, 188, 230, 161, 219, 190, 238, 45, 180, 190, 235, 46, 34, 61, 90, 96, 14, 61, 103, 38, 237, 61, 171, 190, 179, 61, 108, 44, 219, 61, 94, 205, 88, 190, 15, 67, 243, 61, 21, 238, 25, 191, 180, 249, 90, 191, 222, 32, 59, 190, 252, 251, 218, 60, 205, 16, 58, 190, 82, 116, 74, 189, 76, 148, 223, 188, 146, 124, 248, 61, 233, 96, 85, 190, 2, 108, 2, 190, 235, 245, 46, 190, 247, 183, 223, 189, 188, 144, 131, 189, 23, 170, 4, 189, 101, 2, 30, 190, 21, 177, 210, 189, 111, 157, 181, 61, 94, 77, 205, 61, 9, 56, 114, 187, 226, 82, 187, 60, 208, 246, 102, 188, 133, 240, 35, 189, 175, 163, 87, 189, 136, 60, 138, 61, 223, 92, 11, 189, 176, 119, 67, 189, 16, 155, 19, 189, 180, 186, 69, 190, 111, 77, 154, 189, 126, 252, 18, 189, 219, 74, 1, 190, 109, 116, 202, 61, 57, 88, 70, 190, 190, 90, 1, 188, 123, 190, 206, 188, 171, 133, 214, 187, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 107, 112, 77, 190, 176, 126, 36, 190, 188, 156, 221, 61, 178, 173, 76, 189, 90, 65, 55, 191, 131, 45, 159, 62, 77, 169, 180, 190, 16, 192, 164, 61, 219, 14, 5, 62, 53, 60, 20, 191, 216, 224, 181, 62, 134, 84, 35, 190, 110, 217, 160, 191, 206, 215, 168, 190, 101, 10, 113, 61, 62, 186, 167, 61, 37, 165, 227, 188, 201, 198, 86, 190, 226, 71, 207, 60, 209, 33, 205, 190, 156, 154, 125, 190, 184, 138, 191, 190, 199, 185, 157, 61, 167, 136, 102, 61, 113, 22, 133, 61, 131, 6, 105, 190, 16, 206, 245, 189, 141, 12, 23, 62, 254, 224, 129, 62, 146, 56, 206, 190, 8, 188, 216, 62, 109, 14, 21, 191, 252, 66, 57, 191, 158, 141, 133, 60, 15, 32, 164, 190, 76, 172, 109, 191, 82, 93, 70, 62, 148, 190, 140, 191, 88, 210, 121, 190, 158, 81, 175, 62, 205, 55, 44, 191, 2, 179, 85, 189, 127, 18, 5, 190, 42, 132, 229, 188, 111, 18, 98, 62, 14, 185, 153, 190, 206, 132, 84, 62, 79, 58, 25, 190, 16, 233, 40, 60, 200, 105, 141, 190, 72, 233, 196, 62, 72, 93, 16, 62, 237, 143, 141, 188, 87, 55, 24, 62, 44, 72, 226, 190, 189, 19, 46, 191, 151, 158, 229, 188, 19, 89, 142, 190, 44, 120, 6, 62, 18, 10, 17, 191, 241, 9, 34, 62, 91, 213, 254, 61, 20, 33, 129, 190, 192, 173, 159, 62, 81, 2, 134, 191, 69, 81, 61, 61, 70, 49, 168, 61, 187, 106, 251, 189, 66, 25, 210, 190, 170, 33, 91, 190, 59, 3, 79, 191, 249, 117, 165, 189, 69, 167, 165, 190, 49, 0, 75, 190, 14, 145, 186, 188, 241, 85, 21, 60, 243, 227, 67, 188, 110, 8, 48, 62, 166, 239, 211, 61, 193, 36, 35, 61, 185, 10, 212, 61, 55, 99, 75, 190, 191, 183, 215, 61, 55, 111, 60, 189, 31, 247, 80, 190, 224, 236, 152, 189, 19, 160, 200, 61, 242, 137, 14, 190, 56, 30, 189, 190, 207, 40, 252, 189, 243, 243, 43, 60, 87, 135, 171, 187, 104, 119, 63, 62, 142, 162, 2, 191, 106, 103, 237, 188, 139, 192, 238, 61, 247, 126, 227, 188, 228, 52, 210, 189, 22, 112, 1, 62, 19, 187, 165, 189, 38, 92, 242, 62, 184, 217, 108, 185, 176, 31, 194, 62, 39, 48, 86, 61, 61, 84, 74, 190, 23, 45, 217, 62, 98, 137, 34, 191, 179, 43, 73, 62, 144, 211, 8, 62, 29, 228, 149, 189, 123, 12, 140, 61, 66, 195, 77, 191, 79, 190, 99, 62, 249, 60, 112, 190, 51, 184, 102, 189, 63, 227, 72, 62, 7, 186, 28, 190, 196, 88, 156, 62, 252, 167, 6, 191, 154, 193, 145, 62, 131, 245, 22, 190, 200, 45, 143, 62, 185, 109, 171, 190, 160, 172, 100, 62, 110, 251, 141, 189, 55, 244, 174, 62, 137, 154, 148, 191, 122, 87, 192, 62, 134, 1, 10, 62, 121, 25, 231, 189, 84, 161, 2, 190, 143, 150, 164, 58, 234, 97, 122, 61, 244, 17, 175, 61, 190, 206, 202, 188, 56, 130, 187, 61, 186, 191, 184, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 159, 119, 65, 60, 22, 253, 158, 61, 56, 24, 185, 61, 92, 62, 17, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 183, 57, 32, 61, 7, 116, 14, 189, 249, 46, 247, 189, 58, 233, 159, 188, 45, 204, 13, 190, 151, 83, 81, 187, 125, 228, 46, 190, 96, 170, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 194, 20, 127, 61, 120, 226, 115, 189, 124, 225, 17, 189, 172, 97, 122, 190, 226, 143, 26, 189, 95, 2, 112, 189, 212, 210, 131, 191, 187, 185, 116, 62, 116, 13, 23, 191, 203, 232, 207, 58, 135, 192, 0, 62, 66, 112, 195, 190, 225, 137, 39, 61, 6, 173, 118, 190, 127, 188, 159, 61, 198, 41, 137, 59, 189, 79, 124, 190, 112, 27, 62, 190, 80, 202, 131, 190, 239, 192, 81, 190, 176, 100, 63, 190, 193, 248, 1, 62, 129, 114, 219, 61, 106, 228, 66, 62, 21, 1, 50, 62, 159, 220, 61, 188, 46, 183, 204, 189, 158, 51, 75, 189, 191, 12, 96, 190, 157, 77, 131, 62, 83, 221, 134, 190, 68, 241, 148, 190, 175, 26, 201, 190, 244, 122, 63, 188, 131, 181, 250, 61, 90, 15, 30, 190, 225, 226, 251, 61, 190, 232, 18, 190, 174, 77, 2, 61, 73, 10, 194, 188, 10, 203, 195, 61, 5, 5, 0, 190, 202, 127, 1, 62, 15, 15, 234, 189, 51, 27, 3, 61, 112, 1, 20, 190, 187, 51, 36, 189, 192, 110, 218, 61, 111, 173, 246, 189, 173, 72, 148, 61, 102, 150, 202, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 121, 30, 245, 189, 101, 236, 236, 188, 7, 147, 130, 61, 15, 219, 75, 186, 139, 248, 189, 189, 69, 71, 25, 62, 229, 159, 11, 59, 134, 194, 191, 61, 4, 42, 240, 58, 21, 214, 21, 190, 0, 212, 146, 188, 247, 76, 255, 190, 222, 163, 146, 189, 237, 7, 86, 62, 44, 83, 215, 187, 67, 138, 70, 62, 99, 233, 190, 188, 124, 176, 140, 61, 83, 234, 141, 60, 222, 151, 20, 190, 239, 191, 238, 190, 104, 94, 247, 61, 118, 14, 62, 190, 78, 35, 64, 62, 208, 205, 131, 61, 161, 150, 78, 62, 61, 6, 22, 190, 160, 198, 17, 62, 248, 60, 210, 189, 182, 204, 197, 186, 168, 84, 30, 190, 81, 3, 8, 62, 117, 206, 183, 189, 207, 128, 243, 61, 103, 204, 12, 190, 180, 105, 87, 190, 129, 75, 119, 190, 101, 143, 134, 190, 226, 160, 5, 62, 78, 217, 67, 62, 133, 199, 171, 190, 208, 239, 55, 62, 223, 58, 33, 190, 68, 57, 10, 190, 158, 59, 40, 190, 24, 230, 20, 189, 34, 93, 172, 189, 56, 235, 62, 191, 250, 94, 162, 60, 43, 165, 43, 191, 45, 202, 135, 190, 16, 142, 121, 189, 176, 79, 221, 190, 83, 235, 242, 61, 107, 97, 83, 190, 119, 71, 125, 62, 215, 239, 163, 190, 11, 109, 233, 60, 227, 191, 96, 62, 218, 80, 135, 190, 238, 252, 22, 61, 118, 143, 129, 61, 79, 209, 105, 61, 85, 131, 249, 190, 202, 82, 76, 190, 253, 29, 62, 62, 27, 49, 228, 190, 31, 183, 44, 62, 152, 114, 141, 190, 55, 158, 59, 63, 43, 106, 247, 190, 209, 252, 173, 62, 20, 90, 201, 188, 112, 241, 83, 62, 207, 43, 230, 189, 85, 170, 93, 188, 17, 187, 228, 61, 202, 113, 0, 191, 89, 223, 210, 190, 31, 186, 239, 188, 77, 220, 183, 190, 187, 169, 162, 62, 104, 11, 34, 62, 159, 195, 198, 190, 212, 210, 44, 58, 224, 78, 192, 61, 19, 60, 20, 189, 251, 144, 134, 61, 228, 26, 243, 61, 251, 182, 207, 61, 14, 241, 28, 61, 39, 174, 132, 61, 127, 174, 27, 62, 10, 228, 240, 60, 91, 203, 145, 61, 152, 183, 97, 62, 71, 163, 188, 190, 72, 43, 130, 190, 184, 91, 9, 191, 61, 23, 155, 60, 122, 67, 206, 189, 25, 58, 169, 190, 36, 57, 86, 62, 50, 241, 67, 62, 212, 162, 222, 190, 4, 31, 182, 189, 196, 122, 108, 62, 252, 227, 96, 190, 207, 52, 173, 61, 236, 84, 162, 189, 230, 120, 93, 189, 212, 214, 147, 190, 113, 42, 236, 189, 186, 30, 170, 61, 190, 122, 35, 62, 60, 216, 137, 60, 10, 187, 87, 191, 215, 85, 138, 62, 190, 54, 220, 61, 142, 160, 14, 191, 237, 0, 53, 191, 18, 125, 123, 62, 222, 134, 163, 190, 65, 111, 211, 190, 246, 190, 80, 62, 119, 196, 192, 62, 41, 96, 180, 189, 175, 237, 17, 190, 65, 255, 54, 190, 242, 58, 120, 62, 243, 176, 251, 61, 77, 213, 78, 62, 153, 12, 99, 191, 221, 193, 202, 62, 156, 247, 156, 190, 189, 136, 133, 61, 252, 231, 174, 190, 116, 86, 132, 62, 41, 55, 49, 191, 186, 171, 130, 191, 121, 122, 139, 190, 223, 130, 136, 62, 120, 67, 212, 189, 5, 56, 131, 62, 153, 204, 129, 62, 31, 113, 53, 189, 5, 195, 69, 191, 181, 169, 156, 189, 40, 51, 60, 190, 176, 206, 140, 189, 230, 78, 66, 190, 116, 10, 103, 62, 16, 92, 137, 189, 148, 179, 152, 189, 72, 140, 176, 188, 11, 27, 14, 62, 67, 225, 3, 190, 119, 145, 96, 190, 104, 183, 18, 59, 174, 93, 51, 189, 118, 52, 2, 190, 59, 91, 145, 62, 152, 195, 9, 62, 179, 13, 142, 190, 168, 105, 227, 61, 75, 34, 24, 189, 213, 255, 85, 62, 73, 11, 114, 62, 124, 127, 174, 187, 20, 22, 76, 62, 147, 157, 184, 189, 128, 220, 138, 191, 31, 140, 88, 62, 57, 250, 73, 190, 126, 192, 220, 191, 166, 254, 38, 62, 232, 32, 182, 191, 112, 5, 239, 189, 198, 18, 26, 62, 146, 100, 69, 191, 99, 2, 165, 190, 87, 102, 133, 62, 33, 216, 136, 60, 171, 132, 88, 62, 70, 62, 201, 190, 66, 24, 230, 61, 25, 232, 39, 190, 210, 1, 98, 189, 155, 28, 135, 190, 123, 175, 231, 62, 156, 212, 98, 62, 20, 99, 34, 190, 76, 81, 137, 62, 96, 84, 125, 190, 169, 201, 13, 188, 102, 251, 18, 190, 191, 210, 20, 191, 189, 200, 96, 61, 204, 171, 242, 190, 175, 244, 156, 62, 60, 203, 200, 60, 59, 251, 83, 60, 12, 52, 75, 61, 151, 135, 229, 190, 206, 208, 1, 190, 22, 16, 192, 190, 22, 195, 140, 190, 35, 61, 162, 189, 77, 185, 191, 190, 246, 198, 114, 59, 75, 12, 83, 61, 233, 184, 87, 191, 203, 227, 147, 190, 145, 64, 218, 62, 155, 95, 77, 60, 110, 103, 129, 61, 141, 23, 14, 62, 249, 253, 3, 62, 219, 5, 152, 189, 6, 55, 146, 62, 222, 118, 2, 61, 156, 129, 23, 62, 245, 152, 164, 189, 251, 211, 55, 62, 57, 17, 215, 190, 82, 227, 135, 61, 66, 237, 63, 190, 247, 15, 140, 190, 62, 231, 237, 188, 235, 213, 187, 190, 89, 243, 142, 62, 8, 12, 168, 62, 4, 10, 85, 190, 42, 213, 200, 188, 31, 145, 103, 62, 229, 122, 48, 189, 118, 92, 193, 61, 238, 221, 61, 61, 99, 102, 162, 189, 66, 240, 42, 61, 70, 104, 126, 61, 197, 215, 118, 62, 177, 161, 113, 190, 55, 225, 54, 62, 158, 7, 148, 62, 69, 21, 119, 190, 72, 31, 49, 62, 161, 184, 13, 190, 51, 117, 189, 189, 152, 244, 7, 190, 82, 145, 70, 62, 191, 185, 118, 62, 198, 147, 87, 59, 238, 170, 136, 190, 21, 255, 83, 62, 106, 66, 230, 188, 135, 134, 2, 191, 59, 177, 163, 61, 47, 96, 207, 61, 10, 24, 29, 189, 25, 144, 42, 61, 248, 72, 158, 61, 106, 232, 143, 189, 232, 27, 206, 59, 103, 57, 193, 190, 118, 165, 119, 190, 74, 1, 203, 190, 108, 170, 174, 62, 145, 229, 177, 191, 177, 163, 145, 62, 113, 104, 198, 189, 221, 225, 122, 62, 62, 12, 173, 189, 88, 243, 184, 62, 216, 82, 11, 191, 138, 181, 170, 62, 79, 28, 147, 62, 98, 216, 101, 190, 59, 250, 127, 191, 121, 21, 153, 62, 239, 247, 34, 63, 45, 244, 155, 190, 236, 203, 244, 190, 81, 105, 150, 189, 29, 217, 206, 62, 244, 208, 55, 190, 88, 223, 156, 191, 129, 106, 155, 191, 170, 228, 133, 60, 242, 8, 184, 189, 79, 238, 9, 62, 11, 182, 9, 191, 196, 175, 77, 62, 22, 225, 228, 190, 177, 118, 149, 62, 159, 81, 111, 62, 82, 61, 3, 62, 33, 47, 134, 190, 231, 214, 110, 62, 5, 69, 51, 191, 106, 100, 146, 190, 76, 30, 120, 62, 166, 186, 230, 189, 112, 7, 10, 63, 50, 3, 167, 59, 85, 97, 73, 62, 14, 148, 64, 191, 2, 242, 92, 62, 101, 213, 162, 189, 4, 15, 145, 189, 116, 114, 209, 190, 124, 149, 22, 63, 231, 63, 66, 62, 5, 76, 17, 191, 132, 229, 254, 189, 122, 97, 73, 62, 42, 197, 93, 62, 141, 185, 220, 189, 111, 244, 81, 189, 251, 22, 188, 190, 219, 40, 0, 62, 8, 171, 100, 189, 246, 125, 24, 62, 232, 206, 149, 60, 144, 179, 59, 62, 64, 4, 213, 188, 18, 120, 106, 189, 90, 5, 203, 189, 209, 249, 223, 62, 58, 122, 87, 60, 131, 11, 7, 63, 116, 106, 121, 191, 171, 59, 6, 190, 213, 173, 45, 189, 30, 240, 136, 190, 236, 81, 90, 191, 197, 63, 198, 189, 75, 4, 50, 190, 234, 238, 225, 62, 40, 56, 97, 189, 8, 54, 4, 191, 196, 166, 218, 62, 63, 1, 134, 60, 93, 92, 246, 190, 45, 10, 148, 190, 203, 152, 128, 62, 223, 36, 157, 61, 239, 17, 128, 61, 14, 232, 45, 190, 186, 52, 126, 61, 107, 206, 223, 189, 249, 41, 142, 61, 197, 46, 170, 61, 156, 112, 28, 62, 70, 32, 182, 190, 144, 187, 31, 62, 7, 147, 178, 190, 92, 247, 143, 189, 237, 197, 97, 189, 3, 9, 136, 62, 113, 199, 96, 61, 170, 235, 112, 62, 166, 1, 235, 190, 30, 10, 235, 190, 210, 48, 63, 190, 234, 78, 117, 61, 39, 232, 47, 190, 91, 41, 148, 190, 44, 139, 210, 189, 170, 243, 186, 190, 154, 8, 8, 63, 233, 220, 203, 61, 252, 143, 20, 191, 163, 9, 163, 62, 117, 253, 141, 190, 20, 217, 93, 191, 22, 65, 152, 190, 151, 173, 200, 62, 81, 143, 210, 61, 36, 198, 80, 189, 5, 46, 29, 62, 186, 18, 170, 62, 212, 93, 164, 190, 11, 105, 10, 190, 25, 79, 92, 190, 237, 88, 129, 62, 123, 9, 146, 59, 192, 240, 208, 62, 211, 60, 15, 191, 164, 170, 154, 62, 130, 236, 196, 189, 63, 14, 8, 62, 54, 165, 67, 190, 205, 119, 155, 62, 79, 8, 78, 191, 82, 83, 24, 191, 206, 155, 50, 189, 0, 1, 190, 61, 77, 228, 113, 190, 207, 204, 118, 61, 92, 30, 187, 61, 248, 202, 74, 60, 176, 213, 2, 191, 200, 254, 69, 188, 43, 52, 127, 189, 154, 39, 197, 189, 242, 67, 17, 188, 111, 188, 26, 61, 150, 147, 28, 62, 236, 97, 210, 189, 7, 185, 200, 189, 111, 122, 170, 61, 85, 109, 57, 189, 205, 161, 134, 190, 98, 39, 9, 190, 148, 101, 130, 190, 165, 55, 104, 189, 174, 176, 122, 189, 247, 142, 179, 189, 173, 50, 180, 188, 88, 53, 66, 61, 118, 58, 136, 190, 180, 182, 184, 62, 215, 140, 6, 62, 186, 103, 71, 190, 250, 234, 153, 61, 50, 154, 186, 188, 110, 85, 2, 191, 157, 173, 42, 61, 101, 8, 51, 62, 26, 61, 122, 189, 245, 118, 75, 189, 157, 148, 203, 61, 196, 72, 48, 190, 147, 42, 236, 189, 65, 249, 19, 190, 65, 41, 169, 190, 98, 66, 126, 62, 188, 112, 182, 189, 104, 3, 186, 190, 110, 150, 250, 60, 201, 117, 53, 62, 114, 220, 19, 190, 168, 231, 103, 62, 220, 169, 152, 189, 229, 187, 109, 62, 207, 210, 229, 190, 16, 29, 218, 60, 220, 185, 173, 190, 118, 225, 134, 62, 76, 75, 228, 189, 218, 159, 49, 62, 10, 37, 144, 185, 192, 30, 200, 190, 66, 122, 120, 61, 139, 207, 164, 61, 210, 206, 26, 190, 129, 226, 142, 62, 4, 99, 155, 190, 65, 125, 203, 61, 139, 34, 100, 190, 220, 81, 115, 62, 192, 98, 172, 62, 242, 68, 159, 189, 240, 169, 75, 62, 175, 145, 179, 61, 101, 103, 99, 190, 179, 90, 239, 187, 168, 143, 1, 63, 168, 11, 16, 191, 212, 208, 122, 189, 46, 141, 63, 61, 59, 56, 140, 60, 186, 222, 216, 189, 254, 83, 70, 62, 233, 74, 174, 62, 179, 44, 17, 190, 229, 14, 246, 190, 224, 118, 41, 190, 34, 3, 204, 190, 4, 235, 59, 190, 128, 183, 140, 190, 70, 16, 140, 61, 152, 51, 89, 62, 200, 116, 16, 62, 65, 178, 184, 190, 229, 235, 144, 62, 238, 206, 135, 190, 243, 231, 25, 190, 54, 74, 147, 190, 139, 208, 133, 61, 121, 110, 205, 189, 55, 95, 114, 61, 115, 7, 11, 190, 137, 76, 129, 189, 77, 227, 52, 191, 180, 58, 243, 189, 206, 145, 18, 189, 243, 59, 19, 61, 226, 60, 192, 61, 62, 162, 5, 191, 60, 168, 114, 61, 6, 182, 104, 190, 185, 159, 72, 191, 100, 99, 18, 59, 150, 231, 93, 190, 103, 99, 216, 61, 12, 153, 25, 188, 159, 55, 28, 190, 247, 35, 248, 189, 130, 95, 89, 190, 198, 64, 156, 189, 59, 108, 196, 190, 197, 140, 99, 188, 193, 210, 102, 60, 221, 69, 150, 62, 194, 49, 217, 189, 6, 234, 56, 63, 91, 199, 67, 190, 96, 42, 211, 62, 195, 239, 64, 190, 30, 235, 27, 62, 89, 102, 46, 191, 23, 18, 32, 190, 174, 165, 154, 188, 161, 17, 99, 189, 19, 31, 11, 62, 231, 171, 227, 188, 100, 232, 177, 60, 23, 27, 183, 189, 203, 27, 56, 190, 32, 136, 144, 60, 58, 91, 179, 189, 195, 184, 218, 61, 109, 193, 31, 60, 211, 205, 186, 61, 97, 230, 229, 189, 130, 213, 238, 189, 180, 196, 1, 62, 236, 233, 37, 61, 66, 55, 234, 189, 23, 176, 167, 61, 95, 206, 3, 190, 127, 209, 251, 61, 208, 79, 145, 189, 46, 212, 205, 189, 81, 244, 24, 60, 185, 37, 215, 189, 20, 225, 69, 189, 63, 102, 147, 188, 188, 17, 91, 189, 28, 117, 56, 61, 187, 190, 247, 189, 177, 77, 229, 60, 24, 99, 53, 189, 145, 148, 195, 189, 26, 57, 9, 189, 49, 8, 0, 191, 83, 86, 167, 189, 255, 66, 202, 188, 180, 9, 224, 187, 196, 189, 128, 62, 11, 117, 252, 59, 133, 143, 19, 61, 5, 226, 72, 190, 11, 201, 53, 62, 248, 44, 141, 60, 241, 232, 52, 60, 50, 15, 167, 60, 23, 138, 199, 62, 124, 188, 38, 190, 161, 73, 176, 61, 114, 10, 70, 62, 90, 8, 137, 62, 220, 139, 143, 61, 116, 173, 31, 188, 204, 225, 140, 190, 252, 245, 102, 189, 195, 218, 51, 190, 234, 197, 35, 61, 195, 194, 10, 62, 176, 57, 155, 190, 47, 3, 170, 62, 201, 162, 70, 62, 240, 28, 83, 189, 161, 14, 177, 61, 46, 180, 111, 189, 62, 211, 8, 61, 72, 48, 74, 191, 97, 33, 38, 62, 250, 209, 5, 190, 100, 209, 45, 189, 173, 52, 70, 61, 91, 170, 165, 62, 196, 234, 106, 190, 228, 71, 113, 188, 246, 84, 74, 62, 208, 88, 161, 189, 138, 162, 244, 190, 251, 172, 182, 61, 219, 51, 161, 62, 237, 212, 239, 61, 196, 58, 184, 190, 164, 113, 217, 189, 200, 29, 110, 62, 81, 206, 41, 61, 169, 146, 97, 191, 18, 71, 139, 189, 79, 116, 117, 190, 123, 236, 137, 61, 54, 175, 129, 189, 161, 221, 221, 187, 87, 9, 0, 62, 216, 183, 137, 191, 149, 0, 64, 62, 1, 183, 6, 62, 8, 101, 158, 62, 42, 30, 171, 190, 168, 52, 20, 191, 94, 61, 18, 190, 225, 56, 11, 190, 49, 152, 112, 61, 213, 68, 254, 188, 0, 243, 245, 59, 5, 87, 20, 189, 72, 89, 129, 61, 201, 159, 60, 189, 36, 39, 251, 189, 200, 80, 143, 189, 37, 190, 117, 190, 4, 225, 31, 61, 128, 130, 43, 190, 169, 132, 250, 189, 234, 19, 3, 190, 235, 30, 71, 190, 222, 184, 174, 61, 125, 60, 220, 61, 145, 249, 197, 61, 130, 189, 49, 62, 229, 228, 74, 189, 127, 178, 160, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 198, 236, 0, 190, 123, 7, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 49, 87, 68, 61, 113, 203, 54, 62, 254, 65, 137, 62, 140, 129, 254, 60, 206, 52, 41, 188, 39, 48, 200, 61, 32, 115, 0, 61, 203, 143, 29, 190, 118, 133, 56, 62, 252, 238, 63, 190, 169, 40, 132, 62, 143, 32, 21, 61, 147, 92, 191, 61, 158, 92, 49, 190, 107, 63, 206, 61, 187, 173, 222, 189, 110, 92, 181, 62, 191, 111, 17, 60, 41, 254, 255, 59, 173, 124, 77, 61, 141, 221, 143, 62, 224, 76, 11, 189, 237, 189, 249, 189, 205, 188, 105, 62, 155, 253, 48, 188, 131, 17, 20, 62, 53, 103, 167, 61, 175, 111, 3, 188, 24, 92, 172, 61, 115, 119, 57, 190, 172, 221, 141, 190, 194, 30, 130, 61, 205, 82, 225, 190, 64, 87, 104, 63, 251, 14, 186, 62, 132, 113, 246, 61, 36, 80, 203, 60, 15, 197, 1, 191, 42, 112, 255, 61, 247, 200, 212, 60, 39, 254, 167, 190, 229, 223, 80, 189, 11, 179, 146, 62, 18, 154, 134, 189, 215, 203, 174, 62, 92, 175, 211, 190, 105, 245, 141, 189, 145, 81, 47, 62, 115, 15, 77, 189, 173, 226, 230, 61, 197, 213, 88, 62, 246, 171, 59, 190, 35, 100, 148, 62, 225, 133, 98, 189, 212, 248, 220, 60, 174, 35, 215, 60, 31, 22, 156, 188, 14, 192, 151, 62, 98, 233, 123, 61, 20, 121, 31, 62, 198, 79, 145, 187, 249, 236, 236, 189, 53, 63, 131, 190, 177, 176, 128, 62, 71, 151, 33, 191, 18, 69, 201, 61, 252, 164, 147, 189, 170, 159, 100, 189, 73, 214, 37, 189, 142, 24, 45, 61, 241, 172, 171, 188, 164, 247, 221, 61, 52, 86, 145, 61, 216, 122, 128, 61, 220, 241, 167, 188, 85, 89, 13, 62, 197, 252, 242, 189, 26, 149, 215, 188, 42, 173, 92, 189, 194, 202, 144, 188, 36, 4, 154, 188, 174, 34, 201, 61, 192, 109, 230, 189, 252, 138, 190, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 206, 133, 61, 90, 200, 32, 189, 95, 185, 15, 190, 61, 190, 135, 187, 226, 76, 0, 190, 61, 244, 42, 190, 74, 130, 200, 189, 78, 200, 93, 61, 223, 111, 164, 189, 210, 186, 25, 188, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 10, 171, 62, 95, 122, 10, 61, 2, 217, 236, 60, 173, 244, 156, 62, 110, 105, 154, 189, 136, 115, 152, 62, 210, 188, 42, 190, 80, 167, 44, 189, 77, 35, 119, 189, 90, 35, 96, 62, 40, 226, 217, 189, 6, 50, 31, 188, 53, 106, 97, 188, 188, 145, 174, 62, 103, 145, 165, 62, 30, 179, 31, 62, 127, 116, 64, 190, 29, 24, 212, 61, 45, 2, 137, 61, 96, 175, 177, 187, 58, 26, 28, 190, 172, 149, 152, 62, 116, 176, 143, 61, 180, 166, 72, 190, 184, 182, 139, 190, 194, 43, 54, 189, 161, 110, 47, 61, 129, 233, 103, 60, 152, 201, 180, 188, 224, 250, 47, 190, 100, 81, 217, 190, 135, 19, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 94, 231, 189, 226, 47, 156, 61, 93, 17, 10, 63, 180, 208, 37, 63, 92, 215, 219, 186, 190, 39, 22, 63, 148, 77, 242, 61, 59, 86, 234, 61, 179, 131, 162, 59, 56, 155, 183, 189, 217, 91, 29, 191, 255, 10, 131, 190, 168, 204, 193, 62, 68, 128, 60, 190, 24, 198, 68, 63, 197, 176, 109, 190, 222, 205, 42, 62, 170, 231, 173, 191, 227, 53, 231, 190, 39, 49, 226, 62, 195, 138, 74, 63, 219, 139, 119, 188, 120, 61, 220, 188, 21, 205, 107, 62, 243, 125, 93, 191, 1, 105, 235, 189, 116, 137, 34, 190, 118, 51, 156, 191, 168, 56, 162, 61, 142, 152, 119, 61, 123, 13, 237, 62, 234, 251, 13, 189, 190, 4, 178, 190, 77, 90, 0, 62, 217, 184, 226, 190, 93, 171, 66, 189, 165, 188, 231, 190, 106, 250, 156, 188, 107, 57, 16, 190, 126, 185, 86, 190, 68, 176, 195, 189, 250, 66, 108, 190, 133, 3, 160, 61, 204, 8, 183, 61, 128, 80, 56, 63, 152, 85, 199, 190, 113, 66, 39, 62, 121, 161, 165, 190, 101, 115, 129, 61, 108, 243, 224, 62, 160, 224, 230, 61, 45, 231, 159, 190, 73, 82, 40, 62, 237, 132, 140, 190, 54, 64, 167, 190, 161, 21, 249, 61, 106, 36, 9, 63, 234, 109, 176, 189, 175, 4, 22, 188, 109, 105, 103, 63, 123, 224, 206, 61, 54, 197, 31, 187, 45, 26, 225, 189, 54, 74, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 252, 128, 190, 248, 67, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {162, 24, 48, 191, 91, 35, 111, 63, 42, 42, 198, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 187, 255, 190, 35, 196, 161, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}