// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 76, 90, 190, 96, 142, 132, 61, 130, 143, 204, 61, 238, 131, 183, 190, 133, 199, 11, 189, 111, 166, 170, 62, 69, 254, 52, 190, 7, 17, 198, 62, 252, 207, 180, 190, 227, 107, 54, 190, 45, 185, 35, 61, 19, 7, 112, 190, 85, 23, 250, 190, 57, 142, 197, 62, 24, 37, 71, 62, 24, 103, 217, 62, 186, 110, 230, 62, 77, 82, 103, 190, 11, 102, 136, 190, 102, 25, 248, 62, 120, 90, 57, 61, 64, 72, 16, 191, 253, 149, 234, 190, 49, 59, 16, 62, 228, 214, 239, 188, 214, 145, 36, 190, 67, 174, 128, 190, 204, 152, 151, 61, 163, 157, 242, 62, 210, 93, 53, 62, 129, 112, 192, 62, 47, 162, 161, 190, 46, 184, 30, 61, 215, 30, 134, 62, 78, 39, 89, 190, 220, 48, 205, 62, 98, 172, 32, 190, 83, 9, 67, 62, 185, 243, 163, 62, 58, 64, 147, 62, 203, 25, 219, 61, 241, 46, 67, 62, 162, 223, 12, 63, 23, 42, 241, 190, 250, 211, 249, 61, 141, 110, 6, 191, 190, 72, 199, 190, 78, 20, 183, 190, 29, 255, 1, 63, 19, 229, 62, 62, 203, 208, 240, 62, 248, 103, 140, 62, 35, 182, 17, 191, 197, 217, 201, 62, 232, 233, 213, 190, 50, 120, 111, 190, 49, 207, 42, 62, 236, 54, 126, 58, 109, 37, 8, 62, 183, 230, 110, 62, 60, 164, 145, 190, 220, 202, 201, 190, 174, 89, 227, 62, 161, 225, 113, 190, 24, 226, 34, 190, 172, 93, 145, 190, 161, 10, 228, 62, 188, 180, 70, 190, 55, 29, 1, 191, 217, 32, 217, 190, 246, 16, 243, 62, 238, 14, 62, 189, 57, 194, 200, 189, 244, 104, 100, 62, 223, 150, 204, 190, 125, 219, 83, 62, 133, 0, 220, 62, 171, 121, 167, 62, 81, 6, 128, 62, 181, 176, 12, 191, 233, 95, 72, 190, 16, 79, 15, 63, 152, 139, 125, 61, 217, 128, 161, 188, 187, 215, 240, 62, 83, 177, 148, 190, 215, 63, 188, 189, 45, 55, 220, 190, 20, 163, 208, 190, 64, 110, 103, 190, 229, 93, 145, 62, 76, 239, 10, 191, 193, 25, 211, 190, 155, 140, 237, 190, 155, 26, 15, 190, 139, 151, 238, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 199, 19, 191, 51, 195, 75, 190, 202, 51, 173, 62, 123, 17, 97, 190, 186, 18, 122, 62, 159, 57, 192, 190, 243, 74, 53, 189, 154, 3, 201, 190, 242, 62, 19, 62, 173, 72, 77, 190, 233, 12, 12, 189, 154, 165, 143, 60, 73, 67, 134, 62, 133, 142, 16, 190, 168, 228, 215, 62, 6, 12, 6, 191, 111, 161, 216, 62, 132, 124, 211, 188, 2, 28, 160, 62, 246, 78, 213, 189, 70, 37, 131, 190, 173, 193, 87, 62, 251, 50, 18, 63, 9, 18, 64, 60, 87, 46, 224, 190, 151, 30, 22, 190, 48, 241, 47, 61, 255, 221, 55, 190, 211, 204, 88, 61, 36, 252, 230, 61, 108, 86, 242, 62, 123, 181, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 9, 235, 189, 165, 235, 5, 62, 231, 128, 238, 59, 77, 69, 155, 58, 136, 248, 226, 61, 191, 169, 1, 62, 143, 148, 8, 62, 238, 20, 52, 62, 93, 231, 14, 188, 69, 161, 6, 62, 127, 36, 128, 188, 108, 53, 17, 62, 1, 168, 156, 60, 222, 2, 178, 60, 94, 37, 214, 187, 151, 39, 241, 61, 208, 71, 21, 190, 185, 236, 236, 188, 134, 193, 87, 61, 112, 89, 246, 59, 4, 112, 11, 62, 10, 47, 75, 61, 193, 172, 32, 61, 53, 142, 173, 189, 235, 35, 52, 62, 249, 167, 222, 189, 123, 27, 150, 189, 58, 159, 168, 189, 189, 63, 145, 59, 63, 100, 205, 189, 215, 228, 41, 190, 154, 9, 250, 187, 30, 85, 14, 62, 122, 64, 41, 190, 150, 148, 156, 189, 235, 245, 46, 190, 74, 45, 170, 189, 119, 24, 231, 188, 208, 148, 17, 188, 162, 174, 15, 190, 166, 53, 136, 189, 150, 15, 1, 62, 82, 175, 24, 62, 100, 167, 48, 61, 58, 132, 152, 61, 3, 34, 94, 61, 235, 25, 49, 60, 175, 163, 87, 189, 250, 13, 240, 61, 40, 183, 153, 60, 57, 132, 220, 186, 107, 61, 5, 60, 240, 162, 20, 190, 7, 177, 132, 189, 1, 179, 190, 59, 234, 160, 251, 189, 136, 69, 214, 61, 250, 183, 20, 190, 201, 205, 232, 57, 104, 68, 29, 61, 169, 244, 153, 61, 238, 116, 31, 190, 6, 152, 51, 190, 68, 225, 234, 189, 134, 83, 49, 61, 28, 108, 158, 59, 102, 248, 121, 189, 113, 131, 26, 189, 226, 53, 183, 189, 64, 32, 13, 62, 201, 7, 45, 190, 40, 123, 6, 62, 18, 189, 127, 60, 22, 24, 147, 59, 0, 87, 14, 62, 63, 24, 54, 189, 161, 194, 0, 190, 82, 150, 40, 190, 22, 59, 2, 190, 249, 114, 193, 61, 58, 91, 192, 61, 111, 65, 16, 189, 120, 164, 146, 189, 255, 123, 139, 61, 172, 198, 248, 189, 86, 105, 50, 190, 191, 91, 29, 190, 235, 238, 239, 188, 127, 203, 223, 189, 82, 114, 2, 62, 75, 28, 181, 189, 14, 239, 64, 61, 226, 7, 92, 61, 227, 108, 4, 190, 66, 253, 12, 62, 150, 2, 128, 61, 72, 104, 51, 62, 174, 152, 241, 189, 114, 1, 102, 61, 18, 226, 16, 62, 150, 70, 175, 188, 32, 121, 28, 189, 65, 1, 161, 58, 234, 129, 14, 62, 58, 147, 249, 189, 9, 89, 102, 188, 180, 31, 248, 189, 147, 228, 255, 189, 59, 29, 228, 61, 44, 202, 20, 189, 40, 227, 125, 61, 174, 241, 28, 190, 26, 131, 91, 61, 246, 80, 11, 190, 63, 210, 49, 62, 44, 203, 80, 60, 175, 71, 141, 189, 61, 166, 243, 189, 116, 221, 50, 190, 70, 214, 49, 190, 47, 22, 169, 61, 185, 28, 164, 189, 151, 45, 223, 189, 140, 180, 233, 189, 140, 72, 235, 61, 218, 74, 221, 61, 36, 248, 33, 190, 64, 169, 68, 189, 192, 43, 154, 189, 173, 72, 33, 62, 9, 206, 229, 61, 216, 207, 74, 61, 107, 234, 147, 189, 125, 222, 2, 190, 133, 249, 3, 190, 121, 231, 224, 61, 28, 142, 12, 62, 218, 51, 250, 59, 141, 52, 14, 188, 15, 73, 16, 62, 46, 33, 139, 61, 3, 171, 24, 62, 164, 112, 246, 61, 130, 135, 194, 61, 211, 53, 245, 61, 135, 105, 199, 189, 94, 213, 232, 61, 228, 45, 31, 62, 219, 12, 12, 190, 33, 107, 23, 62, 36, 167, 240, 61, 26, 53, 172, 188, 221, 52, 219, 189, 73, 39, 68, 189, 125, 76, 46, 62, 195, 92, 49, 190, 119, 162, 194, 61, 133, 186, 156, 189, 63, 235, 223, 60, 188, 88, 9, 62, 82, 130, 109, 189, 101, 23, 47, 190, 151, 125, 221, 189, 170, 80, 93, 189, 114, 144, 38, 62, 131, 21, 34, 62, 183, 106, 39, 62, 167, 83, 42, 60, 51, 88, 141, 61, 233, 245, 111, 189, 162, 138, 186, 60, 24, 144, 46, 62, 92, 123, 166, 189, 130, 18, 226, 189, 130, 107, 52, 62, 34, 200, 235, 189, 34, 11, 54, 61, 205, 226, 172, 189, 194, 145, 98, 60, 217, 136, 9, 62, 40, 59, 147, 189, 78, 50, 42, 190, 69, 110, 201, 188, 143, 65, 41, 61, 22, 200, 255, 61, 121, 21, 20, 61, 9, 254, 4, 190, 68, 252, 197, 60, 154, 88, 31, 189, 23, 34, 246, 189, 135, 105, 84, 189, 191, 83, 155, 189, 134, 1, 10, 62, 121, 25, 231, 189, 67, 173, 138, 189, 141, 14, 0, 61, 49, 116, 146, 61, 136, 189, 27, 62, 65, 139, 53, 188, 56, 130, 187, 61, 177, 246, 8, 62, 181, 26, 212, 61, 192, 165, 204, 61, 136, 242, 142, 61, 244, 51, 99, 60, 238, 187, 157, 61, 193, 249, 189, 61, 116, 144, 2, 190, 89, 228, 154, 189, 225, 169, 211, 189, 117, 249, 151, 188, 255, 233, 26, 61, 7, 116, 14, 189, 76, 237, 205, 189, 93, 26, 23, 61, 176, 228, 237, 189, 244, 113, 36, 61, 46, 98, 46, 190, 247, 153, 32, 190, 94, 39, 4, 62, 114, 136, 182, 58, 40, 135, 145, 61, 8, 16, 179, 188, 99, 25, 240, 188, 236, 83, 150, 189, 245, 200, 253, 189, 20, 76, 175, 61, 106, 90, 203, 188, 195, 202, 95, 188, 177, 206, 232, 189, 44, 150, 112, 61, 109, 113, 145, 61, 140, 60, 61, 188, 242, 125, 174, 188, 247, 97, 31, 62, 133, 149, 166, 60, 57, 54, 238, 189, 183, 34, 202, 189, 46, 169, 27, 61, 154, 219, 27, 190, 99, 175, 24, 190, 243, 126, 65, 189, 4, 193, 234, 61, 75, 30, 198, 59, 155, 93, 22, 62, 78, 96, 37, 62, 23, 176, 213, 61, 10, 193, 95, 60, 18, 90, 153, 61, 85, 158, 37, 190, 92, 107, 37, 62, 18, 159, 216, 61, 21, 111, 61, 61, 90, 17, 41, 190, 60, 227, 238, 61, 66, 93, 64, 188, 90, 15, 30, 190, 225, 226, 251, 61, 151, 61, 228, 189, 189, 2, 116, 61, 233, 30, 173, 188, 212, 215, 15, 62, 109, 114, 247, 189, 202, 127, 1, 62, 165, 138, 167, 189, 51, 27, 3, 61, 36, 71, 19, 190, 187, 51, 36, 189, 179, 80, 219, 61, 111, 173, 246, 189, 159, 164, 158, 61, 174, 179, 2, 62, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 31, 67, 212, 189, 221, 227, 152, 60, 149, 105, 149, 61, 67, 200, 20, 61, 139, 248, 189, 189, 252, 60, 42, 62, 229, 159, 11, 59, 34, 83, 201, 61, 67, 110, 207, 60, 123, 78, 217, 189, 115, 88, 75, 188, 22, 32, 2, 62, 212, 78, 108, 189, 156, 57, 37, 62, 164, 30, 201, 61, 164, 167, 225, 61, 210, 78, 136, 189, 197, 129, 216, 60, 219, 135, 5, 62, 102, 81, 220, 188, 211, 4, 47, 190, 126, 91, 179, 60, 119, 123, 149, 189, 122, 124, 199, 61, 244, 141, 15, 62, 49, 131, 189, 61, 10, 229, 31, 189, 70, 99, 212, 61, 225, 224, 70, 189, 94, 182, 80, 189, 69, 18, 199, 189, 230, 28, 169, 61, 188, 146, 10, 62, 125, 199, 152, 59, 38, 225, 1, 190, 127, 118, 25, 190, 215, 67, 174, 189, 6, 203, 37, 60, 241, 90, 105, 60, 150, 145, 200, 60, 129, 78, 44, 189, 14, 155, 175, 61, 22, 138, 2, 61, 255, 211, 185, 189, 206, 199, 5, 190, 211, 119, 45, 62, 192, 204, 156, 188, 59, 193, 25, 61, 199, 101, 34, 62, 48, 120, 214, 59, 2, 62, 69, 61, 149, 131, 96, 61, 46, 13, 242, 189, 108, 102, 18, 190, 20, 130, 3, 190, 114, 60, 47, 188, 121, 2, 31, 190, 222, 18, 188, 61, 37, 179, 50, 62, 127, 255, 130, 189, 90, 95, 235, 61, 118, 116, 7, 62, 178, 67, 183, 61, 24, 192, 71, 189, 196, 226, 190, 189, 105, 11, 169, 61, 204, 116, 147, 189, 160, 199, 219, 61, 195, 46, 32, 62, 221, 189, 140, 61, 113, 67, 103, 189, 67, 232, 15, 58, 62, 220, 11, 61, 140, 102, 138, 61, 141, 219, 52, 62, 28, 153, 158, 61, 228, 72, 229, 61, 210, 21, 196, 60, 255, 106, 69, 189, 178, 172, 140, 189, 138, 38, 205, 189, 70, 127, 54, 61, 181, 224, 23, 60, 45, 196, 241, 189, 186, 109, 155, 61, 118, 117, 182, 189, 29, 44, 108, 189, 70, 115, 46, 60, 197, 167, 102, 61, 131, 194, 170, 188, 122, 78, 13, 61, 110, 201, 8, 188, 64, 175, 45, 61, 15, 107, 181, 189, 236, 74, 67, 187, 52, 126, 247, 61, 232, 166, 209, 189, 83, 62, 2, 190, 66, 27, 232, 189, 241, 166, 29, 62, 206, 171, 203, 189, 21, 165, 40, 62, 131, 0, 86, 60, 125, 88, 242, 188, 164, 50, 223, 189, 132, 228, 158, 61, 235, 97, 94, 61, 67, 206, 196, 61, 14, 118, 128, 61, 104, 166, 151, 189, 109, 196, 107, 188, 161, 206, 194, 188, 134, 174, 33, 190, 142, 205, 154, 61, 127, 15, 163, 61, 197, 202, 20, 189, 173, 17, 87, 61, 125, 149, 143, 60, 30, 62, 147, 61, 232, 90, 189, 189, 19, 85, 171, 189, 17, 5, 18, 61, 33, 211, 233, 189, 139, 63, 34, 190, 222, 251, 243, 188, 124, 103, 134, 61, 155, 13, 189, 189, 222, 227, 164, 189, 193, 249, 3, 190, 193, 224, 193, 61, 111, 117, 158, 61, 169, 210, 238, 60, 136, 21, 66, 189, 87, 67, 52, 62, 195, 105, 13, 62, 117, 185, 85, 189, 102, 188, 32, 190, 86, 253, 46, 61, 18, 253, 23, 189, 155, 228, 46, 190, 203, 111, 10, 189, 240, 144, 239, 61, 229, 202, 205, 189, 82, 12, 162, 61, 81, 248, 15, 62, 116, 7, 35, 190, 233, 99, 243, 189, 7, 182, 45, 190, 194, 91, 163, 189, 30, 70, 136, 61, 114, 145, 69, 61, 155, 2, 181, 188, 205, 38, 11, 190, 63, 220, 69, 61, 46, 167, 237, 61, 2, 129, 224, 61, 72, 97, 13, 61, 212, 28, 120, 189, 170, 49, 36, 62, 143, 173, 21, 62, 116, 84, 41, 190, 43, 110, 105, 61, 141, 183, 84, 61, 183, 162, 179, 189, 223, 81, 5, 62, 177, 37, 67, 61, 77, 35, 103, 189, 229, 3, 38, 62, 111, 31, 101, 188, 36, 46, 153, 61, 213, 74, 31, 190, 74, 76, 17, 188, 38, 192, 25, 62, 133, 13, 18, 190, 90, 246, 174, 189, 170, 205, 98, 189, 240, 145, 170, 189, 99, 233, 148, 189, 33, 121, 45, 190, 74, 12, 132, 189, 127, 242, 134, 188, 154, 125, 248, 188, 24, 8, 64, 60, 187, 32, 119, 61, 119, 227, 41, 61, 185, 68, 222, 189, 190, 248, 150, 189, 135, 125, 213, 189, 243, 127, 36, 190, 36, 43, 13, 62, 142, 230, 51, 62, 133, 160, 29, 190, 199, 148, 33, 62, 59, 146, 42, 61, 122, 32, 11, 190, 169, 100, 205, 61, 150, 175, 50, 190, 100, 222, 123, 189, 20, 89, 73, 189, 37, 47, 141, 61, 232, 2, 34, 61, 255, 57, 197, 61, 166, 189, 158, 188, 179, 233, 189, 189, 8, 243, 132, 189, 59, 216, 55, 60, 188, 144, 22, 62, 54, 74, 196, 189, 98, 221, 147, 189, 186, 196, 129, 189, 109, 23, 67, 189, 116, 86, 140, 189, 238, 13, 40, 190, 71, 33, 7, 62, 192, 224, 116, 61, 134, 224, 245, 58, 20, 162, 125, 61, 11, 1, 11, 190, 147, 121, 186, 187, 71, 83, 44, 62, 7, 184, 23, 189, 0, 224, 130, 61, 142, 243, 130, 189, 214, 156, 19, 62, 85, 123, 250, 189, 204, 46, 245, 188, 8, 35, 165, 61, 177, 118, 5, 61, 25, 145, 137, 188, 244, 144, 207, 189, 123, 205, 156, 60, 77, 64, 1, 189, 242, 249, 184, 188, 193, 190, 16, 190, 143, 124, 40, 62, 17, 207, 199, 189, 79, 77, 38, 61, 83, 39, 199, 60, 101, 156, 239, 189, 249, 147, 177, 61, 52, 186, 57, 189, 245, 113, 47, 62, 203, 243, 196, 189, 87, 255, 23, 62, 187, 253, 151, 61, 110, 34, 111, 188, 142, 232, 107, 61, 204, 134, 6, 189, 183, 33, 209, 189, 170, 58, 205, 189, 144, 13, 218, 61, 29, 100, 2, 62, 90, 183, 122, 61, 168, 81, 171, 189, 199, 228, 20, 62, 47, 194, 50, 61, 221, 111, 3, 190, 101, 217, 197, 61, 12, 32, 16, 62, 124, 96, 177, 189, 251, 0, 147, 189, 9, 150, 141, 189, 51, 104, 31, 190, 161, 184, 135, 189, 20, 193, 222, 189, 39, 23, 47, 190, 188, 113, 189, 189, 249, 197, 19, 62, 237, 94, 37, 61, 206, 24, 189, 61, 36, 99, 176, 61, 36, 91, 168, 61, 17, 123, 134, 189, 161, 204, 47, 62, 107, 230, 118, 61, 97, 185, 43, 62, 125, 103, 146, 187, 19, 37, 14, 190, 106, 21, 130, 61, 6, 95, 35, 62, 88, 70, 156, 61, 45, 202, 12, 62, 156, 152, 251, 188, 187, 250, 140, 59, 176, 200, 44, 190, 189, 240, 134, 189, 30, 210, 132, 189, 188, 76, 187, 59, 57, 72, 202, 189, 142, 146, 212, 189, 134, 92, 88, 189, 111, 177, 140, 188, 233, 5, 27, 190, 177, 183, 238, 61, 138, 241, 211, 59, 171, 196, 42, 62, 120, 203, 12, 190, 190, 148, 85, 189, 48, 132, 159, 61, 202, 204, 4, 62, 217, 202, 236, 57, 141, 36, 42, 62, 211, 186, 25, 190, 213, 104, 5, 62, 162, 166, 215, 61, 162, 47, 15, 190, 252, 211, 100, 189, 212, 241, 192, 61, 16, 248, 32, 190, 107, 249, 217, 61, 18, 210, 40, 190, 69, 69, 141, 189, 145, 25, 42, 189, 39, 100, 83, 189, 62, 42, 4, 190, 224, 225, 43, 62, 98, 246, 238, 61, 89, 101, 215, 189, 31, 5, 228, 61, 203, 178, 208, 189, 32, 140, 163, 189, 189, 220, 142, 189, 47, 237, 182, 188, 29, 73, 51, 62, 129, 193, 164, 59, 109, 118, 175, 59, 192, 149, 35, 190, 89, 171, 75, 189, 96, 147, 183, 61, 102, 227, 253, 60, 23, 119, 209, 61, 22, 84, 28, 190, 94, 221, 195, 189, 109, 190, 242, 189, 109, 18, 44, 190, 209, 160, 67, 189, 121, 0, 25, 190, 114, 60, 106, 61, 101, 136, 52, 62, 118, 252, 252, 188, 230, 20, 157, 188, 250, 99, 42, 62, 85, 187, 220, 60, 26, 102, 38, 189, 13, 83, 139, 189, 92, 95, 162, 60, 188, 220, 167, 61, 139, 127, 255, 61, 157, 8, 44, 190, 161, 157, 0, 190, 33, 76, 176, 61, 113, 145, 83, 61, 204, 122, 23, 62, 110, 231, 123, 61, 18, 60, 35, 190, 236, 186, 48, 61, 248, 186, 10, 61, 9, 174, 223, 60, 228, 116, 45, 187, 125, 17, 131, 61, 182, 160, 221, 61, 59, 12, 244, 61, 18, 75, 187, 189, 139, 251, 149, 59, 223, 222, 22, 190, 233, 224, 18, 61, 125, 211, 0, 190, 82, 137, 44, 62, 225, 230, 220, 189, 34, 156, 48, 190, 223, 38, 145, 61, 179, 148, 150, 61, 52, 127, 162, 61, 170, 166, 134, 189, 70, 48, 41, 190, 251, 47, 201, 189, 36, 77, 40, 61, 139, 239, 196, 61, 242, 38, 141, 61, 97, 116, 5, 62, 63, 209, 13, 62, 22, 244, 9, 190, 141, 42, 176, 189, 52, 173, 18, 189, 146, 242, 216, 189, 70, 58, 216, 61, 208, 24, 70, 187, 139, 230, 222, 61, 77, 141, 44, 189, 98, 46, 15, 62, 135, 23, 199, 188, 23, 12, 225, 189, 121, 39, 211, 61, 241, 150, 165, 61, 124, 103, 16, 190, 22, 212, 7, 61, 155, 72, 16, 62, 19, 184, 31, 61, 135, 107, 240, 189, 222, 22, 40, 62, 152, 203, 178, 61, 167, 162, 54, 61, 229, 200, 5, 190, 94, 33, 204, 61, 158, 46, 140, 61, 207, 63, 86, 189, 77, 111, 40, 62, 83, 187, 205, 61, 189, 9, 4, 62, 224, 178, 5, 190, 97, 2, 199, 61, 236, 48, 236, 61, 233, 11, 8, 62, 159, 160, 204, 189, 211, 53, 194, 61, 64, 254, 193, 188, 255, 35, 200, 61, 116, 237, 21, 190, 161, 127, 45, 189, 162, 80, 20, 62, 166, 101, 187, 61, 239, 190, 153, 189, 86, 231, 225, 61, 93, 142, 21, 190, 194, 146, 51, 61, 114, 107, 5, 61, 156, 77, 32, 62, 205, 60, 170, 61, 187, 15, 48, 62, 250, 67, 245, 61, 91, 65, 42, 59, 92, 199, 51, 62, 190, 211, 5, 189, 3, 116, 120, 189, 29, 148, 52, 190, 82, 95, 92, 188, 166, 191, 16, 190, 21, 142, 219, 61, 207, 190, 162, 61, 239, 105, 23, 190, 241, 213, 39, 189, 125, 148, 62, 61, 81, 82, 111, 189, 102, 17, 46, 62, 201, 145, 148, 189, 157, 166, 39, 62, 73, 146, 29, 189, 238, 239, 185, 61, 230, 238, 12, 189, 227, 39, 1, 62, 179, 246, 119, 189, 43, 205, 131, 61, 213, 255, 233, 61, 1, 138, 52, 190, 16, 162, 148, 189, 236, 122, 140, 187, 81, 61, 146, 61, 39, 94, 36, 62, 228, 4, 46, 62, 200, 59, 39, 187, 146, 165, 220, 189, 110, 15, 29, 62, 155, 149, 175, 61, 45, 60, 18, 190, 193, 158, 215, 61, 77, 117, 30, 189, 247, 4, 75, 188, 197, 197, 147, 188, 91, 134, 49, 62, 14, 35, 198, 61, 195, 50, 222, 60, 199, 1, 15, 62, 51, 67, 99, 189, 209, 206, 29, 62, 22, 201, 147, 188, 128, 86, 22, 62, 18, 27, 116, 61, 241, 218, 124, 60, 125, 155, 255, 189, 19, 167, 169, 188, 43, 224, 44, 190, 180, 201, 32, 190, 124, 55, 211, 189, 224, 96, 231, 61, 137, 86, 242, 189, 192, 149, 160, 188, 157, 172, 76, 61, 101, 111, 20, 62, 214, 204, 108, 189, 91, 110, 185, 189, 7, 188, 94, 189, 122, 8, 233, 60, 49, 44, 194, 61, 235, 24, 170, 60, 16, 153, 169, 60, 14, 81, 103, 61, 42, 70, 11, 190, 87, 124, 34, 62, 197, 14, 30, 61, 177, 241, 11, 62, 226, 94, 249, 189, 245, 203, 212, 189, 98, 50, 0, 190, 7, 87, 223, 189, 228, 110, 230, 188, 123, 23, 131, 189, 64, 83, 89, 61, 183, 35, 169, 61, 110, 172, 31, 57, 224, 177, 172, 61, 217, 38, 44, 190, 123, 89, 106, 61, 246, 199, 133, 189, 195, 189, 198, 189, 72, 90, 23, 189, 124, 213, 27, 62, 176, 225, 225, 61, 144, 247, 217, 60, 7, 28, 102, 189, 127, 182, 14, 62, 33, 222, 137, 61, 68, 28, 61, 61, 136, 134, 160, 189, 23, 18, 32, 190, 195, 49, 223, 58, 19, 40, 149, 188, 49, 70, 38, 62, 166, 170, 195, 187, 202, 57, 77, 61, 96, 104, 137, 189, 182, 112, 36, 190, 95, 175, 93, 61, 244, 182, 112, 189, 62, 135, 226, 61, 111, 229, 248, 60, 133, 240, 231, 61, 116, 18, 225, 189, 245, 142, 206, 189, 57, 193, 33, 62, 80, 84, 128, 61, 234, 249, 194, 189, 217, 128, 208, 61, 150, 181, 218, 189, 196, 121, 18, 62, 35, 19, 59, 189, 221, 176, 93, 189, 249, 47, 15, 61, 242, 145, 141, 189, 0, 248, 201, 188, 55, 61, 218, 186, 34, 4, 91, 189, 230, 223, 76, 61, 61, 101, 192, 189, 146, 239, 138, 61, 170, 250, 220, 188, 3, 24, 193, 61, 221, 30, 203, 59, 57, 57, 237, 189, 250, 33, 246, 189, 227, 77, 69, 189, 75, 136, 53, 61, 115, 57, 119, 189, 126, 118, 172, 189, 190, 95, 75, 189, 119, 237, 230, 189, 122, 156, 145, 189, 8, 182, 58, 61, 161, 31, 196, 188, 86, 62, 248, 188, 231, 39, 41, 62, 0, 137, 173, 189, 140, 77, 47, 188, 237, 245, 4, 62, 156, 46, 39, 62, 23, 167, 59, 61, 207, 200, 74, 189, 209, 79, 44, 190, 128, 190, 193, 189, 118, 243, 35, 189, 245, 191, 156, 61, 81, 114, 22, 62, 132, 28, 154, 61, 84, 57, 123, 61, 236, 8, 249, 189, 171, 223, 52, 190, 139, 187, 188, 61, 238, 215, 153, 189, 143, 72, 176, 61, 40, 98, 128, 189, 102, 85, 161, 59, 39, 52, 147, 60, 177, 224, 150, 61, 11, 117, 37, 61, 195, 95, 191, 61, 191, 59, 16, 61, 188, 54, 160, 188, 195, 141, 213, 61, 3, 164, 213, 188, 54, 77, 191, 61, 215, 85, 23, 62, 84, 11, 43, 62, 45, 147, 25, 62, 141, 223, 31, 62, 121, 34, 118, 189, 44, 48, 20, 62, 163, 184, 6, 62, 45, 9, 140, 61, 241, 137, 37, 62, 100, 108, 96, 189, 221, 185, 11, 62, 196, 149, 41, 190, 226, 173, 229, 61, 240, 128, 162, 61, 41, 213, 38, 188, 144, 21, 165, 188, 196, 246, 60, 60, 175, 38, 195, 61, 72, 231, 165, 189, 232, 156, 37, 61, 96, 250, 235, 189, 219, 165, 27, 190, 34, 36, 235, 61, 7, 65, 182, 58, 255, 155, 17, 61, 173, 213, 249, 188, 125, 111, 169, 61, 69, 232, 58, 189, 208, 190, 151, 189, 208, 184, 183, 189, 221, 78, 46, 190, 223, 134, 170, 60, 46, 180, 34, 190, 24, 125, 170, 189, 2, 212, 228, 189, 56, 244, 41, 190, 15, 226, 136, 61, 84, 190, 199, 61, 33, 229, 4, 62, 245, 56, 22, 62, 203, 223, 136, 189, 245, 179, 202, 188, 168, 72, 192, 189, 208, 19, 157, 189, 194, 251, 222, 187, 79, 157, 48, 190, 241, 37, 151, 187, 123, 182, 198, 189, 146, 225, 32, 190, 139, 127, 9, 62, 77, 211, 30, 61, 254, 191, 214, 61, 35, 250, 108, 61, 227, 61, 224, 61, 221, 215, 135, 59, 211, 53, 207, 60, 128, 98, 24, 62, 32, 94, 138, 61, 178, 116, 190, 189, 246, 153, 154, 61, 152, 196, 35, 190, 122, 46, 4, 62, 9, 155, 212, 61, 89, 28, 236, 188, 79, 199, 56, 189, 116, 182, 51, 62, 201, 155, 99, 189, 35, 254, 23, 62, 192, 255, 87, 187, 116, 75, 233, 61, 37, 83, 84, 61, 91, 136, 144, 61, 60, 123, 110, 189, 55, 222, 167, 61, 33, 113, 48, 62, 235, 98, 30, 58, 159, 36, 201, 189, 172, 108, 83, 61, 161, 62, 180, 189, 241, 0, 168, 61, 15, 230, 3, 190, 51, 190, 104, 189, 79, 17, 117, 189, 127, 186, 149, 189, 160, 219, 107, 61, 183, 14, 232, 61, 139, 225, 26, 62, 163, 238, 217, 60, 139, 163, 2, 190, 104, 17, 235, 61, 125, 196, 221, 61, 28, 156, 23, 190, 251, 121, 155, 189, 145, 169, 75, 61, 237, 27, 242, 189, 139, 49, 187, 61, 203, 116, 183, 60, 119, 155, 24, 190, 29, 107, 45, 62, 154, 242, 1, 190, 200, 241, 20, 62, 251, 93, 46, 62, 199, 226, 229, 189, 168, 76, 235, 187, 221, 106, 0, 190, 50, 201, 34, 62, 80, 16, 134, 60, 134, 11, 110, 188, 242, 177, 234, 61, 50, 18, 253, 189, 157, 118, 135, 189, 190, 66, 233, 189, 71, 0, 1, 190, 57, 106, 0, 62, 40, 79, 29, 62, 121, 239, 144, 189, 18, 69, 201, 61, 252, 164, 147, 189, 133, 111, 190, 188, 14, 177, 229, 188, 35, 141, 48, 61, 119, 182, 238, 59, 164, 247, 221, 61, 121, 130, 158, 61, 216, 27, 191, 61, 220, 241, 167, 188, 21, 191, 28, 62, 230, 166, 236, 189, 231, 111, 210, 188, 224, 201, 83, 189, 95, 17, 6, 60, 75, 84, 67, 187, 41, 104, 228, 61, 244, 154, 223, 189, 176, 172, 172, 189, 58, 250, 156, 188, 109, 98, 218, 60, 208, 72, 191, 61, 121, 133, 226, 59, 153, 93, 9, 190, 14, 82, 133, 60, 110, 34, 0, 190, 120, 114, 22, 190, 155, 87, 174, 189, 90, 84, 171, 61, 12, 240, 113, 189, 56, 202, 43, 61, 223, 141, 173, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 181, 223, 61, 255, 98, 191, 61, 44, 63, 169, 60, 119, 15, 232, 61, 40, 185, 20, 190, 96, 160, 207, 60, 247, 35, 14, 190, 168, 228, 196, 189, 195, 147, 68, 189, 89, 94, 144, 58, 191, 249, 176, 59, 117, 103, 45, 187, 111, 208, 208, 188, 130, 233, 146, 60, 217, 229, 71, 61, 47, 47, 100, 189, 12, 27, 226, 189, 199, 6, 222, 189, 174, 106, 5, 190, 168, 208, 12, 60, 81, 173, 8, 190, 128, 106, 210, 61, 66, 249, 152, 189, 146, 25, 43, 190, 71, 231, 150, 187, 127, 175, 160, 188, 0, 241, 231, 189, 64, 179, 131, 60, 1, 65, 207, 60, 29, 252, 222, 189, 24, 36, 31, 190, 192, 149, 133, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 54, 243, 58, 246, 177, 151, 61, 181, 21, 1, 61, 144, 201, 63, 61, 189, 234, 93, 189, 135, 8, 44, 62, 178, 203, 245, 61, 246, 211, 226, 61, 65, 103, 117, 60, 130, 113, 20, 60, 173, 241, 215, 189, 208, 252, 19, 190, 12, 51, 168, 188, 181, 190, 129, 188, 118, 157, 20, 61, 174, 211, 146, 189, 60, 121, 255, 188, 152, 202, 48, 190, 44, 0, 163, 189, 254, 44, 50, 62, 6, 26, 50, 62, 9, 203, 150, 60, 43, 225, 87, 60, 112, 166, 3, 62, 65, 120, 8, 190, 37, 219, 3, 190, 7, 129, 131, 189, 67, 225, 23, 190, 253, 40, 177, 61, 79, 233, 119, 61, 228, 161, 152, 61, 200, 92, 98, 189, 147, 99, 239, 189, 36, 194, 15, 62, 31, 213, 198, 189, 148, 4, 161, 189, 125, 82, 47, 190, 30, 65, 253, 187, 221, 169, 17, 190, 131, 27, 118, 189, 18, 102, 199, 189, 227, 37, 4, 190, 14, 228, 191, 61, 62, 186, 9, 61, 142, 213, 30, 62, 168, 189, 18, 190, 113, 193, 131, 189, 30, 57, 188, 189, 221, 89, 96, 60, 60, 125, 162, 188, 132, 17, 4, 61, 193, 198, 173, 189, 214, 26, 6, 62, 194, 246, 24, 190, 231, 72, 222, 188, 113, 132, 21, 61, 227, 4, 195, 61, 198, 56, 212, 189, 115, 246, 78, 187, 184, 229, 49, 189, 58, 156, 1, 62, 76, 81, 214, 188, 152, 76, 243, 61, 82, 129, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 209, 42, 190, 252, 161, 42, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 160, 91, 62, 36, 151, 192, 63, 118, 195, 91, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 155, 64, 190, 152, 186, 18, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}