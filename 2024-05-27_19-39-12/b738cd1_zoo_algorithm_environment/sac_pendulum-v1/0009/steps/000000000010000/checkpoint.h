// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 100, 54, 63, 28, 43, 220, 61, 66, 185, 156, 62, 11, 16, 85, 190, 104, 156, 129, 63, 108, 215, 220, 62, 77, 240, 192, 189, 215, 54, 36, 63, 203, 122, 218, 190, 11, 170, 132, 190, 77, 193, 3, 191, 90, 88, 6, 191, 147, 55, 88, 191, 111, 149, 60, 63, 107, 32, 38, 61, 55, 34, 35, 190, 222, 215, 42, 62, 46, 79, 93, 191, 136, 237, 132, 190, 91, 123, 66, 63, 41, 252, 213, 189, 81, 111, 32, 191, 178, 191, 3, 191, 246, 77, 239, 62, 206, 89, 204, 189, 103, 36, 45, 190, 211, 63, 255, 190, 127, 69, 242, 62, 251, 142, 107, 63, 25, 0, 67, 62, 77, 132, 22, 63, 33, 35, 44, 191, 174, 15, 175, 61, 227, 71, 89, 189, 112, 186, 58, 63, 54, 174, 68, 62, 202, 70, 30, 191, 40, 54, 164, 62, 50, 86, 13, 62, 168, 29, 15, 63, 236, 114, 69, 62, 196, 14, 166, 62, 50, 246, 54, 63, 240, 50, 5, 191, 201, 5, 20, 188, 222, 61, 67, 62, 218, 167, 183, 190, 88, 147, 223, 190, 74, 70, 202, 62, 128, 181, 248, 62, 233, 250, 175, 62, 109, 172, 142, 62, 62, 249, 81, 190, 83, 219, 16, 63, 70, 13, 124, 190, 38, 55, 244, 190, 141, 172, 203, 62, 34, 31, 219, 190, 249, 112, 130, 63, 151, 202, 149, 62, 167, 100, 225, 190, 141, 201, 97, 62, 20, 118, 48, 63, 43, 190, 125, 190, 254, 123, 51, 191, 49, 167, 145, 189, 225, 139, 64, 63, 210, 68, 81, 191, 143, 193, 219, 190, 22, 55, 213, 190, 246, 252, 65, 63, 151, 108, 161, 190, 205, 238, 129, 61, 53, 254, 101, 189, 255, 146, 39, 191, 225, 20, 48, 63, 206, 141, 10, 63, 155, 30, 152, 62, 199, 30, 85, 63, 72, 250, 79, 191, 204, 201, 138, 190, 44, 14, 73, 63, 171, 14, 166, 62, 36, 163, 68, 62, 179, 118, 24, 63, 193, 173, 39, 190, 57, 58, 145, 61, 208, 29, 56, 189, 175, 165, 135, 191, 226, 176, 91, 190, 199, 123, 67, 63, 217, 93, 138, 191, 170, 143, 167, 190, 174, 149, 100, 191, 186, 173, 11, 191, 23, 41, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 172, 43, 191, 125, 146, 130, 190, 214, 182, 190, 62, 46, 4, 144, 190, 87, 233, 60, 63, 206, 17, 133, 62, 149, 17, 54, 62, 25, 140, 16, 191, 45, 209, 19, 61, 97, 5, 110, 190, 55, 134, 28, 188, 65, 109, 75, 190, 72, 35, 53, 63, 44, 175, 242, 189, 75, 132, 210, 62, 90, 8, 103, 191, 109, 73, 193, 62, 215, 61, 41, 189, 42, 196, 71, 61, 136, 126, 129, 61, 26, 114, 16, 190, 184, 154, 221, 61, 72, 238, 19, 63, 75, 236, 238, 189, 75, 67, 237, 190, 126, 112, 142, 190, 244, 115, 207, 190, 254, 119, 181, 189, 7, 125, 214, 62, 123, 192, 48, 190, 165, 48, 189, 62, 42, 195, 27, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 78, 74, 191, 186, 202, 187, 61, 143, 158, 4, 189, 51, 236, 77, 189, 122, 185, 49, 62, 189, 94, 30, 62, 171, 13, 153, 61, 20, 146, 111, 189, 78, 60, 180, 189, 251, 72, 147, 190, 94, 237, 160, 190, 20, 213, 189, 60, 84, 115, 60, 61, 58, 164, 164, 190, 159, 139, 170, 60, 80, 102, 143, 60, 84, 191, 183, 190, 251, 52, 131, 190, 128, 199, 27, 61, 14, 117, 117, 189, 150, 181, 27, 62, 118, 232, 142, 61, 234, 143, 251, 61, 157, 178, 96, 190, 26, 101, 19, 62, 40, 159, 214, 190, 170, 206, 65, 191, 238, 92, 165, 189, 52, 184, 181, 60, 56, 206, 52, 190, 146, 99, 74, 189, 198, 119, 24, 189, 146, 124, 248, 61, 233, 96, 85, 190, 2, 108, 2, 190, 235, 245, 46, 190, 247, 183, 223, 189, 188, 144, 131, 189, 23, 170, 4, 189, 101, 2, 30, 190, 21, 177, 210, 189, 111, 157, 181, 61, 94, 77, 205, 61, 9, 56, 114, 187, 226, 82, 187, 60, 208, 246, 102, 188, 133, 240, 35, 189, 175, 163, 87, 189, 136, 60, 138, 61, 223, 92, 11, 189, 176, 119, 67, 189, 16, 155, 19, 189, 180, 186, 69, 190, 111, 77, 154, 189, 126, 252, 18, 189, 219, 74, 1, 190, 109, 116, 202, 61, 57, 88, 70, 190, 190, 90, 1, 188, 123, 190, 206, 188, 171, 133, 214, 187, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 116, 129, 48, 190, 176, 126, 36, 190, 17, 232, 192, 61, 198, 63, 132, 189, 157, 41, 57, 191, 48, 82, 150, 62, 159, 128, 205, 190, 182, 95, 239, 61, 225, 28, 235, 61, 122, 20, 11, 191, 14, 179, 180, 62, 88, 111, 34, 190, 249, 23, 158, 191, 66, 222, 163, 190, 107, 192, 149, 61, 141, 235, 228, 61, 145, 49, 41, 59, 214, 29, 79, 190, 43, 165, 252, 188, 49, 150, 172, 190, 222, 16, 156, 190, 185, 135, 189, 190, 170, 210, 167, 61, 231, 241, 55, 61, 216, 167, 104, 61, 2, 242, 89, 190, 123, 86, 216, 189, 85, 134, 48, 62, 98, 108, 135, 62, 127, 227, 188, 190, 158, 244, 220, 62, 53, 109, 7, 191, 91, 58, 36, 191, 138, 223, 86, 60, 230, 173, 157, 190, 18, 164, 60, 191, 221, 33, 64, 62, 39, 198, 130, 191, 106, 141, 133, 190, 12, 17, 183, 62, 190, 122, 12, 191, 127, 144, 193, 189, 132, 5, 29, 190, 36, 168, 72, 189, 127, 240, 84, 62, 19, 121, 153, 190, 118, 39, 48, 62, 79, 58, 25, 190, 180, 252, 237, 186, 100, 146, 143, 190, 62, 6, 195, 62, 65, 118, 26, 62, 97, 40, 140, 188, 231, 72, 68, 61, 14, 174, 240, 190, 98, 222, 50, 191, 151, 158, 229, 188, 80, 197, 129, 190, 49, 124, 205, 61, 47, 199, 9, 191, 18, 36, 4, 62, 99, 134, 146, 60, 78, 116, 163, 190, 140, 42, 161, 62, 133, 84, 45, 191, 156, 75, 63, 61, 214, 123, 239, 60, 207, 153, 217, 189, 16, 30, 96, 190, 8, 96, 141, 190, 197, 107, 252, 190, 174, 172, 201, 189, 43, 238, 20, 190, 195, 62, 95, 190, 85, 222, 196, 187, 29, 109, 141, 60, 226, 124, 2, 61, 74, 46, 38, 62, 254, 45, 226, 61, 193, 36, 35, 61, 254, 184, 197, 61, 215, 61, 47, 190, 65, 76, 155, 61, 206, 215, 31, 189, 200, 1, 118, 190, 136, 39, 199, 188, 236, 3, 218, 61, 91, 148, 14, 190, 164, 52, 180, 190, 151, 44, 21, 190, 31, 141, 209, 60, 206, 72, 135, 188, 224, 205, 66, 62, 107, 122, 183, 190, 162, 13, 130, 188, 238, 24, 242, 61, 244, 87, 242, 58, 198, 177, 227, 189, 185, 151, 18, 62, 162, 252, 12, 190, 237, 52, 0, 63, 13, 231, 158, 186, 63, 56, 206, 62, 237, 67, 165, 61, 20, 170, 96, 190, 34, 103, 165, 62, 149, 196, 252, 190, 236, 84, 41, 62, 200, 13, 31, 62, 99, 145, 210, 189, 68, 154, 123, 61, 42, 113, 42, 191, 83, 70, 63, 62, 156, 111, 112, 190, 167, 112, 35, 189, 108, 76, 96, 62, 78, 45, 14, 190, 222, 20, 38, 62, 186, 186, 244, 190, 221, 62, 167, 62, 19, 247, 41, 190, 202, 50, 107, 62, 209, 12, 117, 190, 82, 9, 27, 62, 173, 39, 20, 190, 37, 65, 63, 62, 167, 102, 91, 191, 43, 220, 161, 62, 134, 1, 10, 62, 121, 25, 231, 189, 157, 246, 235, 189, 115, 160, 91, 60, 12, 6, 136, 61, 226, 143, 218, 61, 188, 224, 167, 188, 56, 130, 187, 61, 135, 13, 211, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 81, 9, 69, 60, 22, 253, 158, 61, 56, 24, 185, 61, 7, 37, 10, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 255, 233, 26, 61, 7, 116, 14, 189, 225, 188, 240, 189, 251, 66, 35, 188, 114, 130, 5, 190, 10, 41, 58, 60, 125, 228, 46, 190, 0, 148, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 33, 19, 136, 61, 18, 226, 90, 189, 99, 25, 240, 188, 127, 73, 85, 190, 11, 106, 86, 189, 192, 40, 44, 189, 70, 23, 142, 191, 18, 20, 104, 62, 176, 250, 23, 191, 223, 186, 255, 60, 89, 182, 250, 61, 249, 83, 202, 190, 110, 167, 81, 61, 33, 39, 39, 190, 244, 18, 134, 61, 20, 85, 2, 188, 211, 12, 135, 190, 12, 79, 172, 189, 80, 202, 131, 190, 169, 189, 82, 190, 3, 140, 69, 190, 205, 118, 241, 61, 174, 60, 208, 61, 81, 42, 56, 62, 1, 105, 239, 61, 20, 250, 254, 189, 210, 189, 210, 189, 158, 51, 75, 189, 82, 141, 81, 190, 157, 77, 131, 62, 87, 12, 90, 190, 190, 8, 101, 190, 65, 24, 0, 191, 30, 95, 112, 189, 145, 157, 185, 61, 90, 15, 30, 190, 225, 226, 251, 61, 21, 57, 16, 190, 247, 230, 13, 61, 73, 10, 194, 188, 31, 198, 206, 61, 99, 118, 255, 189, 202, 127, 1, 62, 180, 205, 227, 189, 51, 27, 3, 61, 234, 250, 19, 190, 187, 51, 36, 189, 192, 110, 218, 61, 111, 173, 246, 189, 195, 210, 150, 61, 139, 206, 206, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 214, 228, 243, 189, 157, 107, 202, 188, 154, 13, 133, 61, 146, 230, 55, 59, 139, 248, 189, 189, 85, 202, 27, 62, 229, 159, 11, 59, 210, 134, 193, 61, 246, 214, 108, 59, 149, 81, 18, 190, 0, 212, 146, 188, 186, 77, 22, 191, 67, 215, 243, 189, 185, 20, 63, 62, 234, 221, 132, 61, 114, 248, 242, 61, 51, 165, 156, 187, 117, 75, 134, 60, 71, 247, 198, 187, 224, 70, 203, 189, 64, 194, 240, 190, 151, 12, 2, 62, 254, 208, 102, 190, 213, 47, 0, 62, 170, 46, 33, 61, 240, 193, 97, 62, 138, 190, 232, 189, 42, 187, 1, 62, 118, 244, 231, 189, 196, 71, 164, 188, 3, 40, 137, 190, 93, 201, 228, 61, 112, 120, 11, 61, 215, 129, 28, 62, 53, 111, 72, 190, 221, 97, 64, 190, 87, 168, 132, 190, 188, 156, 38, 190, 132, 155, 2, 62, 210, 218, 78, 62, 125, 254, 66, 190, 11, 112, 99, 62, 207, 237, 166, 189, 66, 76, 152, 189, 158, 59, 40, 190, 174, 85, 255, 188, 123, 214, 157, 189, 193, 165, 30, 191, 82, 97, 21, 61, 231, 195, 225, 190, 243, 135, 33, 190, 235, 69, 72, 189, 58, 68, 218, 190, 116, 183, 243, 61, 107, 97, 83, 190, 93, 137, 149, 62, 27, 217, 165, 190, 153, 216, 176, 60, 240, 105, 254, 61, 160, 181, 142, 190, 143, 120, 205, 61, 115, 110, 13, 62, 79, 209, 105, 61, 233, 204, 151, 190, 174, 253, 25, 190, 44, 48, 54, 62, 69, 69, 0, 191, 147, 114, 31, 62, 19, 21, 145, 190, 219, 219, 52, 63, 58, 151, 255, 190, 21, 115, 172, 62, 186, 250, 119, 188, 117, 152, 76, 62, 73, 228, 251, 189, 32, 248, 166, 188, 209, 254, 254, 61, 158, 77, 9, 191, 219, 131, 203, 190, 242, 67, 19, 189, 183, 194, 184, 190, 251, 43, 157, 62, 94, 35, 12, 62, 229, 116, 190, 190, 56, 97, 86, 60, 165, 23, 243, 61, 77, 241, 247, 187, 202, 254, 139, 61, 169, 142, 16, 62, 250, 111, 5, 62, 14, 241, 28, 61, 200, 53, 161, 61, 156, 14, 50, 62, 118, 209, 14, 61, 113, 196, 142, 61, 101, 197, 90, 62, 134, 34, 116, 190, 196, 229, 123, 190, 203, 60, 21, 191, 61, 23, 155, 60, 202, 247, 187, 189, 170, 253, 144, 190, 106, 169, 99, 62, 247, 118, 94, 62, 247, 111, 117, 190, 150, 184, 138, 189, 47, 32, 112, 62, 80, 137, 37, 190, 151, 83, 229, 60, 174, 1, 152, 189, 123, 24, 147, 189, 40, 63, 147, 190, 59, 216, 245, 189, 179, 118, 102, 61, 212, 109, 23, 62, 74, 149, 78, 59, 194, 61, 61, 191, 19, 62, 130, 62, 190, 54, 220, 61, 235, 65, 4, 191, 57, 16, 42, 191, 110, 217, 126, 62, 76, 117, 146, 190, 234, 206, 185, 190, 153, 8, 65, 62, 189, 143, 192, 62, 200, 3, 16, 190, 3, 172, 19, 190, 120, 240, 75, 190, 187, 180, 117, 62, 185, 40, 246, 61, 167, 57, 72, 62, 70, 212, 86, 191, 18, 52, 195, 62, 35, 82, 131, 190, 248, 64, 141, 61, 193, 137, 177, 190, 2, 111, 130, 62, 89, 189, 37, 191, 9, 50, 116, 191, 245, 255, 60, 190, 223, 136, 135, 62, 13, 204, 183, 189, 127, 20, 124, 62, 42, 191, 135, 62, 232, 167, 200, 188, 223, 221, 57, 191, 130, 78, 110, 189, 235, 245, 20, 190, 99, 11, 148, 189, 47, 237, 204, 189, 163, 237, 72, 62, 47, 161, 79, 189, 175, 142, 171, 189, 103, 174, 63, 189, 5, 138, 29, 62, 170, 109, 86, 189, 106, 86, 28, 190, 166, 203, 80, 60, 149, 204, 126, 61, 90, 50, 247, 189, 238, 200, 144, 62, 66, 163, 249, 61, 138, 50, 139, 190, 23, 77, 7, 62, 187, 89, 21, 189, 44, 116, 93, 62, 251, 54, 114, 62, 71, 132, 8, 188, 203, 83, 66, 62, 196, 68, 209, 189, 138, 192, 131, 191, 110, 69, 77, 62, 99, 193, 20, 190, 3, 243, 200, 191, 2, 179, 36, 62, 211, 212, 178, 191, 243, 114, 54, 189, 83, 22, 250, 61, 137, 240, 52, 191, 88, 187, 136, 190, 146, 195, 132, 62, 110, 58, 50, 60, 250, 170, 65, 62, 212, 10, 215, 190, 205, 219, 221, 61, 25, 232, 39, 190, 221, 72, 153, 189, 243, 237, 152, 190, 163, 107, 213, 62, 183, 46, 123, 62, 67, 29, 63, 190, 15, 67, 79, 62, 38, 60, 105, 190, 179, 65, 255, 60, 102, 251, 18, 190, 218, 247, 10, 191, 1, 230, 134, 61, 134, 51, 230, 190, 38, 240, 155, 62, 17, 239, 144, 60, 195, 155, 136, 60, 49, 183, 108, 60, 218, 39, 249, 190, 204, 22, 187, 189, 17, 54, 193, 190, 106, 188, 217, 190, 206, 192, 102, 189, 51, 172, 172, 190, 10, 95, 4, 62, 20, 103, 129, 60, 68, 50, 73, 191, 241, 76, 122, 190, 250, 15, 202, 62, 253, 244, 122, 61, 144, 144, 158, 61, 61, 64, 13, 62, 238, 171, 222, 61, 219, 5, 152, 189, 208, 79, 149, 62, 107, 88, 29, 61, 178, 162, 17, 62, 145, 17, 112, 189, 130, 75, 58, 62, 28, 186, 191, 190, 26, 33, 28, 61, 203, 161, 128, 190, 200, 193, 133, 190, 138, 167, 188, 188, 5, 236, 201, 190, 97, 222, 141, 62, 235, 129, 162, 62, 31, 209, 119, 190, 115, 128, 93, 189, 117, 25, 48, 62, 30, 251, 240, 189, 145, 254, 74, 61, 210, 158, 0, 61, 148, 237, 232, 189, 183, 52, 137, 61, 199, 137, 65, 61, 142, 73, 85, 62, 162, 84, 198, 189, 8, 206, 28, 62, 118, 160, 10, 62, 14, 225, 149, 189, 175, 46, 166, 61, 214, 113, 168, 189, 246, 168, 54, 190, 183, 219, 71, 190, 83, 249, 27, 62, 24, 65, 26, 62, 156, 235, 155, 59, 162, 89, 58, 190, 42, 252, 67, 62, 7, 212, 181, 185, 34, 54, 165, 190, 145, 78, 151, 61, 245, 63, 187, 61, 240, 90, 142, 189, 122, 212, 199, 189, 23, 236, 166, 188, 36, 160, 108, 190, 65, 244, 232, 189, 53, 0, 135, 190, 21, 220, 79, 190, 104, 33, 145, 190, 143, 50, 41, 62, 223, 191, 163, 191, 181, 74, 143, 62, 15, 121, 162, 189, 135, 236, 126, 62, 171, 82, 172, 189, 132, 190, 179, 62, 201, 1, 233, 190, 126, 160, 167, 62, 24, 134, 127, 62, 114, 65, 72, 190, 35, 25, 101, 191, 183, 179, 155, 62, 244, 220, 35, 63, 246, 113, 152, 190, 73, 134, 221, 190, 124, 72, 146, 189, 187, 0, 190, 62, 145, 156, 18, 190, 107, 153, 144, 191, 159, 132, 140, 191, 44, 172, 2, 188, 254, 172, 162, 189, 237, 137, 6, 62, 96, 26, 13, 191, 89, 163, 74, 62, 119, 14, 194, 190, 174, 105, 152, 62, 165, 78, 119, 62, 232, 158, 165, 61, 110, 110, 128, 190, 250, 123, 140, 62, 83, 144, 247, 190, 39, 217, 102, 190, 249, 207, 117, 62, 200, 242, 226, 189, 9, 165, 1, 63, 86, 54, 87, 60, 135, 57, 85, 62, 220, 238, 51, 191, 203, 114, 105, 62, 222, 142, 224, 187, 227, 75, 36, 187, 228, 128, 159, 190, 160, 249, 9, 63, 83, 219, 131, 62, 90, 142, 12, 191, 52, 14, 53, 190, 111, 180, 100, 62, 110, 133, 154, 62, 64, 8, 198, 189, 228, 134, 106, 189, 23, 98, 165, 190, 226, 246, 23, 62, 144, 97, 107, 189, 22, 24, 15, 62, 161, 230, 133, 60, 249, 78, 127, 62, 27, 54, 13, 60, 34, 31, 182, 188, 190, 232, 78, 189, 156, 216, 217, 62, 253, 115, 208, 187, 170, 54, 236, 62, 185, 193, 132, 191, 212, 28, 225, 189, 168, 214, 59, 189, 234, 4, 155, 190, 46, 119, 25, 191, 190, 55, 12, 190, 207, 209, 142, 190, 24, 16, 220, 62, 138, 130, 166, 189, 15, 87, 4, 191, 72, 99, 211, 62, 206, 221, 139, 60, 66, 88, 240, 190, 252, 4, 147, 190, 60, 130, 121, 62, 52, 189, 25, 62, 123, 95, 155, 61, 55, 3, 69, 190, 141, 200, 10, 61, 226, 46, 125, 61, 192, 141, 72, 61, 103, 87, 37, 60, 128, 212, 21, 62, 225, 245, 80, 190, 50, 206, 32, 62, 61, 81, 179, 190, 28, 178, 160, 189, 197, 58, 58, 189, 239, 249, 132, 62, 241, 116, 67, 60, 224, 255, 99, 62, 127, 120, 213, 190, 132, 218, 246, 190, 183, 181, 22, 190, 118, 106, 136, 61, 107, 84, 39, 190, 10, 213, 136, 190, 171, 187, 197, 189, 156, 177, 197, 190, 123, 63, 4, 63, 237, 37, 222, 61, 148, 165, 17, 191, 135, 157, 152, 62, 64, 235, 136, 190, 84, 210, 93, 191, 203, 255, 152, 190, 166, 154, 197, 62, 63, 107, 34, 62, 49, 88, 45, 189, 106, 253, 8, 62, 52, 66, 151, 62, 250, 220, 245, 189, 53, 222, 24, 190, 245, 57, 127, 190, 114, 112, 130, 62, 5, 134, 235, 60, 80, 65, 220, 62, 8, 25, 16, 191, 178, 38, 159, 62, 171, 54, 187, 189, 152, 58, 254, 61, 205, 93, 51, 190, 90, 210, 153, 62, 92, 133, 67, 191, 82, 242, 40, 191, 158, 82, 225, 60, 125, 161, 150, 61, 112, 122, 91, 190, 135, 146, 137, 61, 231, 106, 201, 61, 165, 236, 224, 59, 125, 182, 1, 191, 200, 132, 80, 60, 84, 232, 131, 189, 141, 26, 80, 189, 117, 197, 44, 61, 25, 158, 54, 61, 195, 149, 12, 62, 79, 3, 180, 189, 143, 121, 157, 189, 26, 145, 204, 61, 192, 176, 101, 187, 133, 196, 85, 190, 31, 174, 206, 189, 103, 77, 26, 190, 226, 221, 224, 188, 230, 239, 228, 188, 124, 168, 232, 189, 231, 218, 101, 188, 251, 216, 232, 60, 157, 238, 61, 190, 222, 65, 181, 62, 245, 87, 9, 62, 81, 247, 249, 189, 91, 226, 250, 61, 139, 2, 170, 59, 25, 215, 14, 191, 114, 11, 217, 59, 109, 52, 37, 62, 82, 231, 165, 189, 224, 32, 174, 188, 113, 145, 177, 61, 253, 36, 36, 190, 162, 181, 226, 189, 60, 130, 31, 190, 68, 158, 193, 190, 153, 111, 111, 62, 113, 105, 46, 190, 223, 139, 190, 190, 228, 188, 107, 188, 97, 36, 39, 62, 192, 22, 29, 190, 239, 78, 86, 62, 84, 116, 216, 189, 173, 87, 98, 62, 65, 196, 242, 190, 96, 9, 196, 60, 113, 160, 190, 190, 72, 228, 126, 62, 142, 148, 247, 189, 74, 64, 24, 62, 106, 43, 36, 189, 24, 249, 204, 190, 202, 177, 107, 61, 199, 12, 138, 61, 221, 20, 45, 190, 135, 180, 134, 62, 110, 156, 142, 190, 47, 246, 108, 59, 241, 2, 55, 190, 200, 70, 116, 62, 39, 218, 160, 62, 175, 57, 100, 188, 178, 246, 68, 62, 133, 145, 212, 61, 70, 208, 96, 190, 204, 160, 180, 188, 147, 191, 252, 62, 51, 199, 208, 190, 100, 243, 60, 189, 100, 145, 37, 62, 108, 98, 171, 188, 18, 135, 115, 189, 201, 163, 43, 62, 117, 35, 173, 62, 109, 150, 40, 190, 135, 242, 211, 190, 111, 50, 127, 189, 32, 239, 163, 190, 193, 226, 33, 190, 228, 137, 132, 190, 141, 200, 140, 61, 141, 45, 71, 62, 245, 177, 181, 61, 163, 169, 194, 190, 1, 110, 119, 62, 151, 14, 136, 190, 222, 102, 249, 189, 90, 218, 114, 190, 21, 251, 140, 61, 150, 225, 192, 61, 55, 95, 114, 61, 248, 201, 232, 189, 58, 248, 249, 188, 175, 74, 39, 191, 233, 174, 217, 189, 137, 165, 89, 61, 243, 59, 19, 61, 14, 80, 217, 61, 44, 154, 225, 190, 219, 136, 116, 61, 6, 182, 104, 190, 29, 56, 50, 191, 112, 128, 54, 61, 175, 105, 82, 190, 63, 122, 161, 61, 81, 78, 86, 60, 230, 250, 119, 189, 78, 222, 99, 189, 130, 95, 89, 190, 159, 218, 228, 188, 173, 244, 171, 190, 153, 37, 32, 187, 90, 101, 1, 189, 242, 200, 159, 62, 246, 180, 84, 189, 88, 241, 54, 63, 224, 85, 49, 190, 158, 10, 219, 62, 19, 209, 48, 190, 155, 146, 37, 62, 137, 69, 40, 191, 23, 18, 32, 190, 174, 165, 154, 188, 161, 17, 99, 189, 19, 31, 11, 62, 231, 171, 227, 188, 100, 232, 177, 60, 23, 27, 183, 189, 203, 27, 56, 190, 32, 136, 144, 60, 58, 91, 179, 189, 195, 184, 218, 61, 109, 193, 31, 60, 211, 205, 186, 61, 97, 230, 229, 189, 130, 213, 238, 189, 180, 196, 1, 62, 236, 233, 37, 61, 66, 55, 234, 189, 23, 176, 167, 61, 95, 206, 3, 190, 127, 209, 251, 61, 208, 79, 145, 189, 46, 212, 205, 189, 81, 244, 24, 60, 185, 37, 215, 189, 20, 225, 69, 189, 63, 102, 147, 188, 188, 17, 91, 189, 28, 117, 56, 61, 187, 190, 247, 189, 177, 77, 229, 60, 24, 99, 53, 189, 238, 195, 221, 189, 212, 232, 255, 187, 69, 123, 0, 191, 115, 82, 150, 61, 170, 163, 143, 188, 26, 249, 56, 61, 52, 94, 143, 62, 41, 141, 78, 188, 180, 108, 205, 61, 235, 7, 33, 190, 196, 163, 27, 62, 176, 177, 128, 61, 205, 9, 224, 60, 195, 14, 19, 61, 81, 23, 193, 62, 70, 35, 187, 189, 181, 159, 187, 61, 102, 252, 82, 62, 240, 160, 135, 62, 77, 156, 171, 61, 200, 104, 48, 188, 7, 34, 20, 190, 234, 129, 156, 189, 77, 185, 121, 190, 94, 21, 238, 61, 32, 147, 28, 62, 53, 212, 153, 190, 231, 20, 169, 62, 27, 33, 62, 62, 32, 28, 91, 61, 228, 219, 142, 61, 22, 151, 9, 188, 37, 144, 106, 61, 167, 139, 11, 191, 245, 67, 20, 62, 230, 209, 236, 189, 242, 202, 131, 188, 73, 27, 1, 61, 193, 1, 163, 62, 129, 52, 75, 190, 216, 2, 3, 189, 73, 158, 72, 62, 217, 129, 153, 189, 250, 31, 131, 190, 53, 165, 37, 62, 145, 38, 175, 62, 76, 50, 159, 61, 198, 185, 158, 190, 230, 112, 147, 189, 251, 19, 125, 62, 42, 65, 50, 61, 92, 215, 26, 191, 154, 9, 131, 188, 68, 66, 136, 190, 243, 134, 249, 60, 167, 47, 139, 189, 234, 60, 215, 188, 54, 202, 33, 62, 185, 152, 116, 191, 113, 95, 70, 62, 46, 142, 223, 61, 95, 38, 67, 62, 162, 15, 199, 190, 193, 100, 5, 191, 94, 61, 18, 190, 225, 56, 11, 190, 49, 152, 112, 61, 213, 68, 254, 188, 0, 243, 245, 59, 5, 87, 20, 189, 72, 89, 129, 61, 201, 159, 60, 189, 36, 39, 251, 189, 200, 80, 143, 189, 37, 190, 117, 190, 4, 225, 31, 61, 128, 130, 43, 190, 169, 132, 250, 189, 234, 19, 3, 190, 235, 30, 71, 190, 222, 184, 174, 61, 125, 60, 220, 61, 145, 249, 197, 61, 130, 189, 49, 62, 229, 228, 74, 189, 127, 178, 160, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 198, 236, 0, 190, 123, 7, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 49, 87, 68, 61, 121, 129, 62, 62, 120, 231, 131, 62, 138, 53, 25, 58, 27, 74, 63, 188, 50, 72, 192, 61, 35, 153, 61, 60, 17, 41, 98, 190, 127, 187, 83, 62, 204, 132, 76, 190, 204, 23, 102, 62, 213, 61, 99, 61, 45, 158, 132, 61, 179, 116, 32, 190, 46, 212, 180, 61, 159, 154, 191, 189, 46, 164, 177, 62, 160, 88, 3, 186, 206, 235, 15, 187, 111, 212, 87, 61, 76, 176, 143, 62, 87, 33, 251, 188, 171, 229, 5, 189, 140, 147, 128, 62, 19, 91, 50, 189, 250, 84, 1, 62, 247, 222, 142, 61, 172, 40, 209, 60, 37, 165, 157, 61, 30, 162, 60, 190, 114, 132, 47, 190, 199, 79, 204, 61, 192, 236, 191, 190, 48, 172, 97, 63, 133, 119, 173, 62, 2, 19, 239, 61, 106, 191, 207, 60, 156, 229, 6, 191, 84, 58, 250, 61, 69, 171, 7, 189, 112, 112, 108, 190, 17, 217, 81, 189, 242, 218, 137, 62, 127, 230, 122, 189, 47, 102, 152, 62, 8, 72, 210, 190, 120, 194, 162, 189, 99, 25, 57, 62, 141, 48, 156, 188, 205, 99, 241, 61, 58, 218, 88, 62, 170, 235, 20, 190, 220, 187, 134, 62, 218, 219, 230, 188, 168, 173, 127, 61, 247, 207, 69, 61, 169, 1, 166, 188, 129, 121, 153, 62, 42, 176, 48, 61, 54, 222, 58, 62, 126, 193, 150, 187, 199, 36, 234, 189, 222, 112, 70, 190, 212, 163, 141, 62, 198, 120, 17, 191, 18, 69, 201, 61, 252, 164, 147, 189, 170, 159, 100, 189, 73, 214, 37, 189, 142, 24, 45, 61, 241, 172, 171, 188, 164, 247, 221, 61, 52, 86, 145, 61, 216, 122, 128, 61, 220, 241, 167, 188, 85, 89, 13, 62, 197, 252, 242, 189, 26, 149, 215, 188, 42, 173, 92, 189, 194, 202, 144, 188, 36, 4, 154, 188, 174, 34, 201, 61, 192, 109, 230, 189, 252, 138, 190, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 206, 133, 61, 90, 200, 32, 189, 95, 185, 15, 190, 61, 190, 135, 187, 226, 76, 0, 190, 61, 244, 42, 190, 74, 130, 200, 189, 78, 200, 93, 61, 223, 111, 164, 189, 210, 186, 25, 188, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 108, 148, 62, 95, 122, 10, 61, 22, 204, 13, 61, 132, 42, 136, 62, 23, 75, 144, 189, 202, 180, 142, 62, 28, 37, 39, 190, 35, 233, 82, 189, 128, 221, 114, 189, 67, 88, 89, 62, 26, 158, 209, 189, 71, 136, 132, 60, 95, 46, 133, 188, 72, 29, 171, 62, 119, 104, 152, 62, 250, 134, 25, 62, 195, 189, 73, 190, 4, 24, 222, 61, 169, 244, 145, 61, 167, 89, 93, 188, 170, 94, 36, 190, 82, 8, 149, 62, 84, 33, 92, 61, 65, 75, 26, 190, 163, 208, 125, 190, 194, 43, 54, 189, 4, 79, 55, 61, 8, 6, 223, 58, 152, 201, 180, 188, 203, 27, 43, 190, 154, 211, 215, 190, 135, 19, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 11, 176, 189, 226, 47, 156, 61, 22, 137, 11, 63, 106, 118, 33, 63, 195, 30, 152, 60, 103, 181, 9, 63, 210, 115, 241, 61, 152, 158, 254, 61, 56, 16, 176, 59, 207, 135, 145, 189, 75, 191, 23, 191, 191, 38, 140, 190, 160, 171, 168, 62, 197, 191, 52, 190, 16, 232, 55, 63, 207, 80, 109, 190, 255, 108, 158, 61, 226, 184, 160, 191, 125, 72, 213, 190, 120, 129, 225, 62, 158, 215, 76, 63, 104, 195, 27, 188, 117, 143, 170, 188, 165, 10, 55, 62, 80, 210, 72, 191, 1, 105, 235, 189, 58, 52, 34, 190, 246, 238, 103, 191, 168, 56, 162, 61, 205, 191, 158, 61, 242, 33, 241, 62, 234, 251, 13, 189, 203, 253, 144, 190, 77, 90, 0, 62, 179, 150, 213, 190, 5, 57, 82, 189, 160, 4, 172, 190, 247, 186, 249, 187, 61, 45, 17, 190, 139, 165, 73, 190, 192, 233, 195, 189, 161, 134, 131, 190, 148, 4, 155, 61, 81, 208, 133, 61, 254, 52, 38, 63, 53, 33, 196, 190, 158, 108, 12, 62, 129, 137, 146, 190, 114, 33, 206, 60, 94, 247, 170, 62, 126, 96, 192, 61, 184, 180, 139, 190, 91, 8, 75, 62, 89, 39, 109, 190, 30, 200, 169, 190, 60, 205, 27, 62, 175, 124, 243, 62, 234, 109, 176, 189, 37, 247, 2, 188, 242, 248, 69, 63, 123, 224, 206, 61, 37, 222, 57, 59, 49, 17, 110, 189, 54, 74, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 45, 131, 190, 35, 183, 161, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {162, 208, 228, 190, 80, 243, 0, 63, 86, 230, 200, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {133, 151, 21, 191, 2, 182, 91, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}