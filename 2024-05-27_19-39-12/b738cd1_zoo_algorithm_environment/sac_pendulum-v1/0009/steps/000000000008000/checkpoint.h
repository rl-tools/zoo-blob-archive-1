// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 18, 33, 63, 140, 49, 58, 62, 175, 83, 104, 62, 184, 55, 82, 190, 210, 206, 102, 63, 8, 208, 230, 62, 86, 103, 92, 189, 94, 99, 49, 63, 107, 160, 235, 190, 97, 149, 165, 190, 113, 31, 236, 190, 178, 18, 11, 191, 83, 51, 85, 191, 253, 169, 48, 63, 79, 227, 30, 61, 236, 27, 134, 190, 247, 253, 137, 62, 59, 172, 90, 191, 124, 133, 132, 190, 101, 145, 52, 63, 100, 214, 225, 189, 184, 65, 10, 191, 148, 219, 251, 190, 32, 82, 226, 62, 31, 64, 33, 190, 151, 211, 47, 190, 170, 96, 253, 190, 41, 196, 253, 62, 142, 155, 69, 63, 193, 202, 80, 62, 32, 4, 24, 63, 42, 81, 35, 191, 236, 141, 248, 61, 200, 136, 164, 189, 4, 241, 23, 63, 211, 178, 144, 62, 176, 151, 20, 191, 32, 60, 200, 62, 207, 156, 27, 62, 164, 10, 15, 63, 21, 165, 67, 62, 86, 193, 170, 62, 12, 21, 59, 63, 171, 30, 250, 190, 110, 68, 146, 60, 176, 2, 86, 189, 72, 121, 224, 190, 228, 215, 213, 190, 168, 107, 11, 63, 127, 75, 201, 62, 19, 127, 184, 62, 61, 203, 151, 62, 170, 54, 134, 190, 73, 40, 10, 63, 78, 102, 128, 190, 80, 201, 233, 190, 54, 189, 199, 62, 23, 133, 186, 190, 160, 184, 115, 63, 152, 68, 141, 62, 209, 7, 231, 190, 164, 148, 206, 62, 189, 28, 28, 63, 60, 32, 201, 190, 22, 44, 0, 191, 186, 24, 189, 189, 164, 99, 44, 63, 120, 194, 81, 191, 81, 173, 220, 190, 223, 51, 213, 190, 216, 61, 93, 63, 103, 12, 151, 190, 149, 225, 173, 61, 82, 114, 137, 189, 196, 163, 39, 191, 179, 4, 42, 63, 46, 168, 28, 63, 85, 69, 155, 62, 139, 133, 73, 63, 111, 178, 73, 191, 134, 147, 61, 190, 207, 40, 72, 63, 171, 215, 167, 62, 74, 77, 35, 62, 56, 134, 29, 63, 97, 176, 42, 190, 56, 136, 142, 61, 101, 114, 148, 189, 23, 35, 135, 191, 255, 96, 37, 190, 82, 50, 61, 63, 21, 11, 135, 191, 215, 59, 159, 190, 123, 31, 77, 191, 52, 38, 237, 190, 148, 193, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 32, 58, 191, 104, 210, 112, 190, 140, 42, 184, 62, 59, 176, 144, 190, 248, 169, 55, 63, 63, 244, 49, 62, 207, 73, 21, 62, 121, 30, 17, 191, 137, 84, 194, 61, 163, 30, 101, 190, 19, 37, 138, 60, 198, 189, 15, 190, 85, 166, 47, 63, 101, 251, 207, 189, 190, 111, 209, 62, 135, 147, 99, 191, 194, 151, 227, 62, 107, 153, 137, 188, 45, 169, 170, 61, 251, 210, 96, 61, 7, 54, 142, 190, 164, 228, 16, 62, 138, 159, 37, 63, 3, 20, 38, 190, 138, 155, 219, 190, 85, 202, 137, 190, 10, 60, 218, 190, 251, 229, 201, 189, 98, 4, 227, 62, 27, 174, 97, 190, 137, 238, 203, 62, 106, 12, 227, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 78, 74, 191, 115, 112, 197, 61, 172, 241, 161, 188, 22, 175, 118, 189, 76, 82, 248, 61, 163, 156, 36, 62, 3, 5, 185, 61, 250, 234, 108, 60, 128, 142, 179, 189, 112, 52, 3, 190, 184, 220, 75, 190, 33, 162, 163, 61, 210, 215, 114, 188, 51, 227, 109, 190, 72, 192, 83, 189, 21, 27, 155, 60, 95, 226, 150, 190, 5, 237, 49, 190, 206, 163, 69, 61, 25, 87, 173, 189, 48, 203, 9, 62, 130, 205, 77, 58, 240, 69, 194, 61, 110, 35, 71, 190, 244, 69, 20, 62, 113, 33, 178, 190, 6, 178, 36, 191, 126, 162, 195, 189, 10, 83, 64, 61, 101, 38, 139, 190, 217, 31, 243, 189, 22, 75, 242, 189, 146, 124, 248, 61, 233, 96, 85, 190, 2, 108, 2, 190, 235, 245, 46, 190, 247, 183, 223, 189, 188, 144, 131, 189, 23, 170, 4, 189, 101, 2, 30, 190, 21, 177, 210, 189, 111, 157, 181, 61, 94, 77, 205, 61, 9, 56, 114, 187, 226, 82, 187, 60, 208, 246, 102, 188, 133, 240, 35, 189, 175, 163, 87, 189, 136, 60, 138, 61, 223, 92, 11, 189, 176, 119, 67, 189, 16, 155, 19, 189, 180, 186, 69, 190, 111, 77, 154, 189, 126, 252, 18, 189, 219, 74, 1, 190, 109, 116, 202, 61, 57, 88, 70, 190, 190, 90, 1, 188, 123, 190, 206, 188, 171, 133, 214, 187, 167, 111, 31, 190, 191, 250, 83, 190, 68, 225, 234, 189, 168, 30, 89, 189, 180, 87, 36, 190, 176, 29, 153, 61, 134, 151, 193, 189, 175, 169, 33, 191, 34, 54, 142, 62, 174, 206, 188, 190, 138, 31, 64, 62, 94, 250, 201, 61, 64, 239, 2, 191, 123, 150, 184, 62, 206, 13, 30, 190, 197, 125, 137, 191, 214, 44, 169, 190, 174, 103, 142, 61, 50, 207, 174, 61, 175, 74, 128, 60, 143, 222, 72, 190, 107, 227, 16, 60, 79, 56, 145, 190, 247, 4, 150, 190, 239, 72, 175, 190, 71, 146, 131, 61, 253, 77, 49, 61, 203, 30, 208, 60, 229, 246, 88, 190, 158, 139, 42, 190, 10, 181, 44, 62, 129, 122, 136, 62, 34, 65, 180, 190, 78, 71, 211, 62, 117, 196, 253, 190, 212, 196, 6, 191, 171, 230, 58, 188, 150, 11, 127, 190, 27, 63, 45, 191, 218, 78, 74, 62, 83, 147, 110, 191, 21, 123, 114, 190, 165, 69, 192, 62, 242, 98, 12, 191, 106, 29, 70, 190, 202, 16, 230, 189, 90, 216, 172, 189, 151, 21, 88, 62, 21, 74, 159, 190, 135, 136, 81, 62, 79, 58, 25, 190, 113, 6, 172, 186, 36, 155, 139, 190, 46, 51, 200, 62, 194, 249, 30, 62, 168, 195, 95, 187, 253, 22, 86, 189, 187, 221, 58, 191, 222, 53, 42, 191, 151, 158, 229, 188, 106, 1, 145, 190, 210, 234, 94, 61, 34, 151, 229, 190, 49, 222, 20, 62, 119, 159, 97, 190, 248, 134, 220, 190, 239, 206, 152, 62, 212, 238, 17, 191, 173, 225, 56, 61, 37, 136, 17, 61, 100, 226, 201, 189, 79, 165, 229, 189, 163, 239, 104, 190, 66, 30, 86, 190, 94, 39, 66, 189, 92, 3, 82, 189, 188, 28, 74, 190, 103, 83, 170, 188, 86, 204, 244, 60, 6, 81, 164, 61, 59, 248, 14, 62, 66, 88, 191, 61, 193, 36, 35, 61, 249, 176, 178, 61, 121, 179, 22, 190, 154, 125, 239, 61, 218, 102, 224, 188, 118, 249, 78, 190, 64, 183, 59, 61, 189, 224, 172, 61, 248, 175, 14, 190, 137, 140, 165, 190, 41, 70, 55, 190, 6, 92, 86, 189, 125, 125, 107, 189, 241, 174, 49, 62, 78, 229, 144, 190, 7, 137, 22, 189, 168, 106, 2, 62, 203, 193, 10, 189, 233, 188, 15, 190, 174, 206, 33, 61, 184, 152, 195, 189, 78, 246, 240, 62, 105, 148, 14, 188, 253, 186, 174, 62, 159, 1, 183, 61, 156, 31, 65, 190, 180, 251, 93, 62, 241, 162, 176, 190, 152, 188, 236, 61, 70, 181, 17, 62, 77, 222, 238, 189, 153, 233, 81, 62, 189, 154, 173, 190, 89, 175, 34, 62, 213, 156, 88, 190, 113, 37, 163, 60, 148, 106, 58, 62, 33, 224, 193, 189, 89, 225, 158, 61, 217, 143, 186, 190, 219, 144, 74, 62, 102, 52, 23, 188, 178, 25, 65, 62, 76, 228, 8, 190, 56, 238, 9, 62, 161, 109, 19, 190, 31, 160, 59, 189, 112, 121, 14, 191, 202, 42, 151, 62, 134, 1, 10, 62, 121, 25, 231, 189, 157, 246, 235, 189, 115, 160, 91, 60, 12, 6, 136, 61, 226, 143, 218, 61, 188, 224, 167, 188, 56, 130, 187, 61, 135, 13, 211, 61, 181, 26, 212, 61, 72, 49, 205, 61, 136, 242, 142, 61, 81, 9, 69, 60, 22, 253, 158, 61, 56, 24, 185, 61, 7, 37, 10, 190, 96, 4, 153, 189, 225, 169, 211, 189, 117, 249, 151, 188, 255, 233, 26, 61, 7, 116, 14, 189, 225, 188, 240, 189, 251, 66, 35, 188, 114, 130, 5, 190, 10, 41, 58, 60, 125, 228, 46, 190, 0, 148, 38, 190, 251, 227, 254, 61, 156, 80, 214, 187, 33, 19, 136, 61, 18, 226, 90, 189, 99, 25, 240, 188, 157, 107, 250, 188, 86, 72, 41, 189, 20, 60, 232, 189, 147, 224, 143, 191, 188, 13, 100, 62, 178, 215, 46, 191, 207, 12, 157, 59, 237, 129, 35, 62, 107, 8, 225, 190, 97, 154, 45, 61, 100, 227, 2, 190, 187, 241, 141, 61, 146, 254, 4, 188, 56, 226, 143, 190, 246, 111, 231, 188, 80, 202, 131, 190, 31, 82, 74, 190, 66, 148, 52, 190, 127, 150, 17, 62, 128, 85, 235, 61, 37, 146, 80, 62, 111, 92, 151, 61, 9, 177, 64, 190, 165, 89, 50, 190, 158, 51, 75, 189, 155, 233, 82, 190, 157, 77, 131, 62, 92, 230, 11, 190, 92, 3, 95, 190, 157, 150, 17, 191, 22, 151, 175, 189, 40, 161, 174, 61, 90, 15, 30, 190, 225, 226, 251, 61, 250, 55, 16, 190, 79, 236, 13, 61, 73, 10, 194, 188, 103, 202, 206, 61, 66, 118, 255, 189, 202, 127, 1, 62, 20, 203, 227, 189, 51, 27, 3, 61, 234, 250, 19, 190, 187, 51, 36, 189, 192, 110, 218, 61, 111, 173, 246, 189, 166, 211, 150, 61, 64, 208, 206, 61, 47, 52, 16, 190, 125, 45, 19, 190, 142, 69, 39, 190, 133, 69, 210, 189, 196, 100, 187, 61, 56, 228, 243, 189, 105, 93, 202, 188, 71, 14, 133, 61, 104, 75, 56, 59, 139, 248, 189, 189, 8, 203, 27, 62, 229, 159, 11, 59, 48, 135, 193, 61, 132, 253, 108, 59, 38, 80, 18, 190, 36, 210, 146, 188, 207, 174, 17, 191, 216, 13, 217, 189, 13, 242, 71, 62, 142, 10, 94, 61, 125, 157, 168, 61, 90, 236, 92, 58, 105, 149, 39, 61, 31, 146, 8, 61, 26, 193, 195, 189, 137, 110, 194, 190, 11, 99, 208, 61, 95, 138, 48, 190, 236, 47, 169, 61, 53, 158, 36, 61, 66, 68, 70, 62, 133, 154, 222, 189, 102, 15, 23, 62, 23, 193, 183, 189, 70, 3, 149, 188, 62, 119, 145, 190, 65, 44, 214, 61, 186, 83, 116, 188, 252, 252, 4, 62, 207, 239, 55, 190, 104, 9, 66, 190, 42, 146, 121, 190, 26, 21, 46, 190, 245, 186, 13, 62, 112, 221, 83, 62, 127, 152, 117, 190, 63, 33, 50, 62, 117, 197, 13, 190, 255, 211, 185, 189, 158, 59, 40, 190, 23, 65, 250, 59, 181, 225, 37, 189, 9, 25, 43, 191, 31, 96, 146, 61, 89, 213, 214, 190, 145, 238, 30, 189, 192, 199, 200, 188, 89, 235, 17, 191, 85, 143, 103, 59, 107, 97, 83, 190, 15, 134, 48, 60, 52, 185, 180, 190, 195, 182, 63, 189, 218, 152, 49, 62, 49, 106, 164, 190, 103, 236, 53, 62, 11, 9, 180, 61, 79, 209, 105, 61, 104, 252, 254, 189, 180, 190, 62, 190, 41, 113, 24, 62, 136, 92, 248, 190, 44, 214, 96, 62, 201, 138, 195, 190, 30, 148, 51, 63, 207, 130, 9, 191, 169, 157, 126, 62, 21, 148, 224, 188, 150, 154, 39, 62, 103, 57, 1, 190, 234, 61, 32, 188, 7, 195, 248, 61, 114, 190, 248, 190, 1, 87, 191, 190, 137, 182, 4, 190, 73, 173, 124, 190, 119, 90, 8, 62, 78, 177, 23, 62, 204, 12, 166, 190, 53, 210, 200, 60, 184, 48, 7, 62, 227, 57, 241, 187, 98, 204, 106, 60, 128, 124, 35, 62, 27, 130, 38, 62, 14, 241, 28, 61, 230, 33, 165, 61, 94, 74, 40, 62, 151, 65, 195, 59, 0, 141, 29, 61, 6, 250, 65, 62, 56, 247, 76, 190, 228, 126, 66, 190, 207, 56, 16, 191, 61, 23, 155, 60, 103, 13, 161, 189, 111, 53, 69, 190, 151, 199, 118, 62, 196, 245, 125, 62, 115, 148, 4, 190, 233, 105, 152, 188, 146, 157, 9, 62, 170, 55, 161, 60, 66, 136, 156, 61, 163, 9, 182, 189, 218, 16, 196, 189, 142, 244, 145, 190, 138, 76, 13, 190, 158, 186, 53, 61, 14, 58, 14, 62, 235, 139, 144, 188, 82, 142, 31, 191, 69, 112, 125, 62, 33, 111, 5, 62, 9, 34, 239, 190, 63, 25, 36, 191, 111, 220, 107, 62, 114, 215, 148, 190, 215, 205, 176, 190, 152, 106, 35, 62, 253, 52, 198, 62, 233, 2, 18, 190, 225, 220, 236, 189, 192, 192, 14, 190, 1, 209, 96, 62, 215, 156, 215, 61, 162, 64, 30, 62, 27, 2, 62, 191, 14, 166, 168, 62, 65, 17, 136, 190, 69, 20, 54, 61, 195, 53, 152, 190, 189, 236, 110, 62, 206, 223, 26, 191, 171, 166, 92, 191, 244, 13, 3, 190, 242, 255, 149, 62, 94, 72, 199, 189, 181, 254, 103, 62, 1, 75, 141, 62, 172, 106, 119, 59, 250, 168, 4, 191, 94, 144, 94, 189, 147, 12, 154, 189, 74, 249, 177, 189, 244, 75, 180, 188, 28, 160, 50, 62, 150, 236, 149, 188, 88, 167, 205, 189, 110, 121, 27, 189, 113, 15, 62, 62, 164, 65, 143, 60, 49, 129, 206, 189, 41, 251, 99, 61, 117, 247, 200, 61, 33, 163, 56, 190, 54, 31, 136, 62, 8, 137, 27, 62, 85, 122, 136, 190, 115, 3, 40, 62, 136, 134, 92, 187, 67, 78, 94, 62, 198, 222, 116, 62, 222, 194, 125, 189, 109, 153, 28, 62, 174, 101, 63, 190, 254, 134, 100, 191, 115, 172, 38, 62, 4, 129, 29, 190, 223, 163, 180, 191, 56, 248, 58, 62, 109, 246, 158, 191, 27, 83, 109, 60, 73, 104, 178, 61, 251, 82, 17, 191, 199, 12, 176, 190, 148, 180, 165, 62, 223, 211, 5, 189, 161, 159, 77, 62, 36, 145, 221, 190, 114, 46, 51, 62, 25, 232, 39, 190, 251, 167, 170, 189, 200, 4, 157, 190, 147, 147, 206, 62, 68, 78, 127, 62, 203, 45, 63, 190, 149, 28, 45, 62, 71, 130, 99, 190, 22, 34, 29, 61, 205, 226, 12, 190, 47, 37, 15, 191, 203, 106, 230, 61, 127, 10, 190, 190, 232, 110, 173, 62, 42, 14, 103, 189, 242, 172, 53, 61, 80, 136, 20, 61, 77, 114, 240, 190, 172, 119, 152, 189, 10, 149, 194, 190, 163, 180, 219, 190, 104, 207, 0, 190, 85, 90, 177, 190, 210, 91, 198, 60, 186, 112, 56, 61, 129, 107, 62, 191, 30, 217, 113, 190, 22, 73, 191, 62, 251, 117, 163, 61, 48, 66, 39, 61, 213, 138, 10, 62, 169, 182, 203, 61, 219, 5, 152, 189, 40, 189, 141, 62, 243, 230, 34, 61, 233, 188, 13, 62, 183, 171, 143, 189, 66, 179, 55, 62, 146, 151, 152, 190, 167, 35, 73, 61, 65, 43, 195, 190, 56, 252, 156, 190, 102, 203, 214, 188, 2, 150, 200, 190, 125, 133, 133, 62, 76, 39, 157, 62, 150, 241, 188, 189, 119, 248, 74, 189, 95, 213, 207, 61, 82, 149, 79, 189, 87, 161, 129, 60, 108, 18, 170, 189, 246, 235, 250, 189, 65, 13, 204, 60, 245, 107, 70, 189, 24, 134, 237, 61, 185, 38, 37, 190, 115, 157, 237, 61, 253, 79, 88, 61, 37, 127, 133, 189, 169, 168, 250, 60, 200, 59, 174, 189, 39, 146, 17, 190, 219, 215, 21, 190, 144, 13, 218, 61, 7, 229, 187, 61, 103, 213, 237, 60, 58, 68, 36, 190, 93, 70, 0, 62, 137, 19, 179, 60, 39, 110, 108, 190, 53, 240, 104, 61, 43, 250, 29, 187, 152, 236, 178, 189, 240, 137, 176, 189, 126, 181, 142, 189, 88, 133, 78, 190, 87, 139, 0, 190, 215, 133, 44, 190, 24, 14, 52, 190, 156, 116, 244, 189, 7, 182, 196, 187, 218, 46, 156, 191, 6, 12, 152, 62, 203, 177, 142, 189, 200, 14, 130, 62, 255, 165, 155, 189, 121, 47, 176, 62, 149, 5, 140, 190, 5, 201, 170, 62, 234, 235, 84, 62, 150, 113, 45, 190, 114, 200, 83, 191, 187, 55, 173, 62, 188, 111, 34, 63, 57, 255, 146, 190, 124, 123, 208, 190, 178, 198, 166, 189, 138, 29, 182, 62, 201, 101, 203, 188, 130, 219, 134, 191, 104, 149, 118, 191, 248, 211, 30, 188, 228, 182, 122, 189, 199, 194, 34, 62, 109, 146, 10, 191, 189, 149, 56, 62, 160, 98, 142, 190, 212, 17, 151, 62, 13, 61, 129, 62, 88, 231, 182, 187, 147, 218, 111, 190, 255, 113, 141, 62, 211, 160, 178, 190, 31, 107, 69, 190, 188, 171, 135, 62, 4, 116, 6, 190, 135, 165, 234, 62, 168, 159, 150, 60, 62, 109, 85, 62, 9, 202, 22, 191, 189, 133, 96, 62, 52, 141, 121, 60, 250, 187, 97, 188, 45, 15, 130, 190, 186, 141, 237, 62, 191, 112, 135, 62, 183, 177, 15, 191, 5, 183, 63, 190, 219, 79, 96, 62, 223, 157, 156, 62, 190, 66, 21, 190, 109, 227, 227, 188, 124, 4, 187, 190, 192, 8, 153, 61, 69, 184, 145, 189, 110, 146, 43, 62, 91, 76, 92, 60, 60, 18, 121, 62, 231, 232, 27, 62, 63, 45, 51, 189, 186, 69, 110, 189, 10, 146, 188, 62, 168, 239, 225, 188, 59, 72, 172, 62, 107, 19, 114, 191, 61, 61, 226, 189, 130, 18, 180, 189, 210, 210, 153, 190, 18, 24, 246, 190, 126, 22, 19, 190, 182, 11, 79, 190, 99, 232, 216, 62, 108, 97, 128, 189, 91, 225, 7, 191, 135, 107, 220, 62, 42, 245, 39, 61, 51, 60, 237, 190, 93, 231, 141, 190, 156, 224, 123, 62, 114, 234, 29, 62, 136, 211, 159, 61, 237, 88, 51, 190, 28, 156, 69, 61, 237, 223, 190, 61, 139, 1, 116, 61, 226, 32, 132, 61, 71, 143, 19, 62, 184, 251, 33, 190, 93, 154, 15, 62, 76, 194, 178, 190, 234, 234, 173, 189, 181, 1, 99, 189, 46, 46, 130, 62, 16, 173, 69, 61, 172, 78, 107, 62, 145, 83, 203, 190, 26, 59, 196, 190, 198, 254, 66, 190, 19, 74, 101, 61, 173, 179, 49, 190, 178, 131, 87, 190, 93, 76, 200, 189, 116, 165, 185, 190, 127, 240, 238, 62, 102, 34, 223, 61, 21, 226, 13, 191, 118, 149, 160, 62, 90, 57, 136, 190, 69, 23, 81, 191, 149, 25, 153, 190, 190, 220, 197, 62, 16, 8, 10, 62, 29, 76, 26, 189, 220, 98, 6, 62, 29, 92, 142, 62, 18, 120, 15, 190, 84, 140, 62, 190, 171, 213, 81, 190, 168, 6, 126, 62, 118, 26, 36, 61, 182, 219, 212, 62, 201, 227, 14, 191, 15, 13, 130, 62, 34, 217, 184, 189, 193, 131, 0, 62, 255, 18, 3, 190, 109, 126, 152, 62, 64, 34, 55, 191, 167, 29, 40, 191, 143, 158, 154, 61, 48, 245, 193, 61, 241, 228, 83, 190, 77, 136, 189, 61, 188, 210, 254, 61, 34, 23, 111, 61, 126, 25, 191, 190, 55, 70, 30, 61, 78, 126, 223, 57, 116, 162, 65, 189, 217, 69, 200, 61, 166, 191, 146, 61, 42, 45, 44, 62, 42, 7, 208, 189, 95, 131, 96, 189, 242, 77, 25, 62, 43, 195, 139, 61, 245, 166, 252, 189, 2, 86, 139, 189, 107, 5, 147, 189, 193, 122, 23, 189, 248, 226, 216, 188, 73, 193, 171, 189, 5, 182, 71, 186, 7, 205, 122, 61, 94, 144, 67, 190, 57, 225, 182, 62, 231, 15, 20, 62, 73, 67, 9, 190, 237, 219, 215, 61, 250, 142, 67, 188, 113, 14, 3, 191, 91, 45, 72, 61, 224, 174, 5, 62, 55, 162, 200, 189, 154, 253, 73, 60, 138, 48, 129, 61, 224, 187, 31, 190, 219, 165, 143, 189, 135, 223, 43, 190, 34, 215, 185, 190, 60, 99, 95, 62, 56, 86, 252, 189, 97, 211, 154, 190, 95, 137, 183, 188, 206, 161, 19, 62, 240, 214, 18, 190, 98, 99, 94, 62, 55, 16, 190, 189, 222, 116, 130, 62, 13, 243, 176, 190, 229, 176, 143, 61, 52, 134, 183, 190, 230, 0, 104, 62, 46, 133, 28, 190, 156, 227, 245, 61, 6, 143, 57, 189, 8, 232, 204, 190, 40, 141, 21, 61, 253, 52, 77, 61, 136, 134, 48, 190, 118, 222, 119, 62, 170, 164, 141, 190, 61, 62, 94, 189, 190, 179, 50, 190, 178, 212, 97, 62, 194, 184, 159, 62, 20, 19, 219, 59, 86, 37, 66, 62, 44, 232, 156, 61, 245, 118, 39, 190, 42, 13, 194, 188, 71, 253, 221, 62, 133, 27, 205, 190, 215, 111, 139, 189, 41, 242, 82, 62, 156, 242, 36, 188, 106, 249, 90, 189, 123, 183, 39, 62, 66, 34, 159, 62, 123, 230, 0, 190, 240, 113, 102, 190, 223, 97, 199, 189, 186, 140, 74, 190, 92, 190, 4, 190, 143, 219, 122, 190, 138, 44, 70, 61, 29, 28, 75, 62, 1, 253, 145, 61, 177, 25, 24, 191, 69, 97, 105, 62, 4, 148, 142, 190, 132, 11, 255, 189, 182, 103, 86, 190, 149, 26, 246, 61, 34, 217, 186, 60, 55, 95, 114, 61, 84, 102, 200, 189, 201, 227, 132, 188, 57, 48, 19, 191, 152, 167, 0, 190, 105, 215, 80, 189, 222, 38, 109, 189, 126, 138, 204, 61, 111, 249, 187, 190, 29, 156, 64, 61, 6, 182, 104, 190, 226, 191, 25, 191, 79, 54, 140, 61, 170, 156, 77, 190, 236, 123, 36, 61, 165, 204, 211, 60, 8, 205, 11, 189, 18, 164, 128, 188, 130, 95, 89, 190, 194, 13, 9, 188, 244, 50, 134, 190, 115, 244, 7, 59, 176, 202, 83, 190, 236, 115, 159, 62, 132, 216, 72, 188, 163, 72, 50, 63, 41, 21, 29, 190, 177, 173, 224, 62, 210, 101, 221, 189, 80, 84, 40, 62, 164, 101, 17, 191, 23, 18, 32, 190, 174, 165, 154, 188, 161, 17, 99, 189, 19, 31, 11, 62, 231, 171, 227, 188, 100, 232, 177, 60, 23, 27, 183, 189, 203, 27, 56, 190, 32, 136, 144, 60, 58, 91, 179, 189, 195, 184, 218, 61, 109, 193, 31, 60, 211, 205, 186, 61, 97, 230, 229, 189, 130, 213, 238, 189, 180, 196, 1, 62, 236, 233, 37, 61, 66, 55, 234, 189, 23, 176, 167, 61, 95, 206, 3, 190, 127, 209, 251, 61, 208, 79, 145, 189, 46, 212, 205, 189, 81, 244, 24, 60, 185, 37, 215, 189, 20, 225, 69, 189, 63, 102, 147, 188, 188, 17, 91, 189, 28, 117, 56, 61, 187, 190, 247, 189, 177, 77, 229, 60, 24, 99, 53, 189, 232, 134, 191, 189, 144, 199, 10, 188, 190, 242, 1, 191, 41, 248, 211, 189, 186, 71, 208, 189, 66, 173, 33, 189, 54, 128, 205, 61, 33, 65, 99, 60, 109, 78, 22, 189, 28, 48, 47, 190, 152, 146, 242, 61, 249, 52, 120, 61, 125, 174, 189, 188, 19, 66, 18, 61, 23, 221, 180, 62, 64, 40, 179, 189, 91, 45, 136, 61, 149, 193, 77, 62, 13, 175, 121, 62, 211, 89, 93, 61, 182, 61, 202, 188, 221, 233, 64, 190, 139, 100, 181, 189, 232, 6, 149, 190, 50, 71, 215, 61, 187, 237, 19, 62, 214, 118, 151, 190, 122, 223, 158, 62, 95, 61, 42, 62, 120, 148, 241, 60, 159, 231, 75, 61, 150, 139, 209, 189, 177, 35, 161, 189, 107, 209, 182, 190, 42, 81, 195, 61, 244, 164, 109, 189, 33, 246, 97, 188, 4, 208, 214, 60, 3, 242, 124, 62, 34, 233, 101, 190, 98, 108, 3, 189, 151, 196, 227, 61, 71, 198, 115, 189, 185, 210, 206, 189, 3, 55, 43, 62, 35, 175, 163, 62, 10, 74, 68, 61, 129, 28, 36, 190, 14, 250, 178, 189, 20, 80, 98, 62, 231, 189, 148, 187, 7, 126, 191, 190, 95, 144, 1, 61, 131, 25, 138, 190, 30, 150, 54, 61, 199, 129, 139, 189, 171, 39, 12, 189, 82, 68, 242, 61, 217, 69, 245, 190, 247, 148, 21, 62, 120, 115, 159, 61, 42, 183, 197, 60, 146, 229, 191, 190, 120, 104, 147, 190, 94, 61, 18, 190, 225, 56, 11, 190, 49, 152, 112, 61, 213, 68, 254, 188, 0, 243, 245, 59, 5, 87, 20, 189, 72, 89, 129, 61, 201, 159, 60, 189, 36, 39, 251, 189, 200, 80, 143, 189, 37, 190, 117, 190, 4, 225, 31, 61, 128, 130, 43, 190, 169, 132, 250, 189, 234, 19, 3, 190, 235, 30, 71, 190, 222, 184, 174, 61, 125, 60, 220, 61, 145, 249, 197, 61, 130, 189, 49, 62, 229, 228, 74, 189, 127, 178, 160, 189, 109, 55, 3, 190, 180, 89, 231, 189, 165, 74, 221, 188, 44, 167, 29, 190, 246, 177, 187, 188, 198, 236, 0, 190, 123, 7, 74, 190, 72, 91, 178, 61, 30, 190, 18, 60, 49, 87, 68, 61, 89, 159, 46, 62, 80, 93, 70, 62, 232, 236, 174, 187, 197, 80, 144, 188, 64, 101, 189, 61, 246, 113, 194, 60, 171, 48, 88, 190, 233, 177, 57, 62, 10, 165, 67, 190, 59, 44, 86, 62, 200, 87, 171, 61, 94, 8, 32, 58, 204, 16, 45, 190, 236, 244, 173, 61, 79, 111, 154, 189, 250, 184, 171, 62, 199, 6, 69, 187, 113, 24, 110, 186, 57, 80, 133, 61, 8, 199, 70, 62, 113, 121, 87, 189, 221, 8, 241, 188, 148, 69, 130, 62, 228, 226, 37, 189, 157, 77, 5, 62, 36, 44, 133, 61, 45, 202, 122, 189, 191, 83, 192, 61, 199, 241, 44, 190, 3, 200, 70, 190, 54, 211, 195, 61, 38, 20, 167, 190, 187, 97, 78, 63, 101, 64, 151, 62, 77, 129, 11, 62, 236, 82, 76, 60, 174, 140, 220, 190, 239, 178, 12, 62, 199, 158, 43, 61, 65, 95, 152, 190, 165, 198, 60, 189, 251, 242, 136, 62, 143, 137, 129, 189, 200, 9, 130, 62, 179, 140, 172, 190, 176, 128, 214, 189, 225, 252, 43, 62, 98, 72, 32, 189, 196, 61, 243, 61, 178, 70, 60, 62, 174, 212, 39, 190, 118, 238, 99, 62, 120, 24, 65, 189, 207, 28, 217, 60, 157, 71, 11, 61, 60, 128, 186, 60, 94, 176, 152, 62, 189, 67, 200, 60, 185, 141, 175, 61, 43, 222, 62, 188, 99, 99, 243, 189, 249, 84, 118, 190, 0, 145, 125, 62, 243, 201, 13, 191, 18, 69, 201, 61, 252, 164, 147, 189, 170, 159, 100, 189, 73, 214, 37, 189, 142, 24, 45, 61, 241, 172, 171, 188, 164, 247, 221, 61, 52, 86, 145, 61, 216, 122, 128, 61, 220, 241, 167, 188, 85, 89, 13, 62, 197, 252, 242, 189, 26, 149, 215, 188, 42, 173, 92, 189, 194, 202, 144, 188, 36, 4, 154, 188, 174, 34, 201, 61, 192, 109, 230, 189, 252, 138, 190, 189, 58, 250, 156, 188, 238, 49, 218, 60, 14, 206, 133, 61, 90, 200, 32, 189, 95, 185, 15, 190, 61, 190, 135, 187, 226, 76, 0, 190, 61, 244, 42, 190, 74, 130, 200, 189, 78, 200, 93, 61, 223, 111, 164, 189, 210, 186, 25, 188, 109, 13, 183, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 252, 107, 62, 95, 122, 10, 61, 32, 72, 47, 61, 70, 37, 131, 62, 166, 0, 145, 189, 40, 194, 132, 62, 28, 37, 39, 190, 218, 22, 138, 189, 251, 219, 114, 189, 69, 254, 46, 62, 189, 60, 51, 190, 3, 127, 204, 60, 246, 44, 187, 188, 116, 250, 158, 62, 215, 237, 162, 62, 116, 39, 1, 62, 124, 191, 98, 190, 194, 98, 1, 62, 13, 98, 31, 61, 179, 251, 110, 188, 230, 5, 29, 190, 17, 15, 146, 62, 83, 115, 6, 61, 83, 122, 22, 190, 59, 250, 106, 190, 194, 43, 54, 189, 71, 37, 161, 59, 1, 215, 125, 188, 152, 201, 180, 188, 210, 169, 36, 190, 67, 3, 210, 190, 135, 19, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 40, 190, 188, 226, 47, 156, 61, 76, 106, 245, 62, 117, 146, 51, 63, 225, 41, 244, 186, 30, 82, 221, 62, 210, 115, 241, 61, 193, 37, 85, 62, 96, 17, 176, 59, 137, 4, 2, 189, 62, 112, 31, 191, 158, 4, 130, 190, 116, 246, 198, 62, 148, 67, 47, 190, 183, 140, 56, 63, 107, 169, 102, 190, 87, 209, 170, 60, 154, 104, 153, 191, 27, 82, 193, 190, 179, 115, 234, 62, 110, 155, 64, 63, 193, 212, 235, 58, 175, 191, 16, 188, 169, 218, 40, 62, 8, 31, 55, 191, 1, 105, 235, 189, 192, 100, 19, 190, 43, 235, 193, 190, 168, 56, 162, 61, 135, 157, 131, 61, 151, 65, 208, 62, 234, 251, 13, 189, 152, 44, 140, 190, 77, 90, 0, 62, 67, 95, 176, 190, 44, 79, 47, 189, 210, 16, 77, 190, 164, 247, 214, 59, 61, 45, 17, 190, 6, 44, 67, 190, 5, 234, 195, 189, 101, 20, 127, 190, 246, 138, 229, 60, 77, 149, 86, 60, 186, 237, 243, 62, 245, 93, 190, 190, 175, 158, 6, 62, 234, 209, 137, 190, 63, 247, 63, 61, 75, 239, 21, 62, 114, 234, 200, 61, 153, 67, 97, 190, 138, 223, 111, 62, 201, 193, 101, 190, 49, 208, 144, 190, 179, 180, 0, 62, 233, 64, 165, 62, 234, 109, 176, 189, 66, 222, 245, 188, 45, 56, 88, 62, 123, 224, 206, 61, 46, 218, 133, 187, 255, 233, 236, 59, 54, 74, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 251, 113, 190, 12, 198, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {182, 178, 33, 63, 235, 117, 144, 63, 172, 56, 245, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 234, 147, 190, 240, 102, 101, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0009/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}