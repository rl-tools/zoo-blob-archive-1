// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 95, 247, 60, 130, 44, 13, 191, 108, 209, 197, 62, 122, 50, 222, 62, 217, 89, 184, 190, 238, 194, 126, 62, 208, 41, 141, 62, 251, 216, 32, 61, 222, 175, 249, 190, 166, 216, 213, 190, 4, 45, 169, 190, 22, 94, 225, 190, 1, 179, 10, 191, 103, 54, 31, 61, 117, 136, 137, 190, 239, 20, 146, 62, 196, 96, 42, 190, 2, 25, 131, 62, 228, 235, 231, 190, 158, 62, 28, 190, 213, 198, 8, 62, 115, 45, 180, 62, 40, 14, 39, 62, 232, 96, 5, 191, 165, 91, 183, 190, 62, 88, 3, 63, 151, 47, 93, 190, 201, 56, 12, 191, 67, 52, 9, 63, 109, 199, 54, 189, 122, 86, 254, 62, 47, 243, 230, 62, 108, 213, 15, 191, 122, 109, 119, 190, 3, 10, 251, 60, 51, 165, 55, 61, 51, 58, 145, 62, 75, 76, 0, 191, 92, 241, 242, 62, 246, 179, 236, 190, 168, 215, 148, 189, 142, 80, 68, 62, 20, 80, 214, 61, 223, 202, 33, 62, 19, 97, 152, 190, 40, 116, 14, 191, 175, 137, 0, 191, 55, 90, 132, 190, 251, 173, 12, 63, 82, 182, 0, 191, 80, 18, 34, 190, 45, 102, 114, 190, 49, 247, 18, 191, 235, 244, 44, 61, 208, 151, 55, 62, 131, 65, 225, 190, 29, 134, 211, 62, 212, 41, 177, 190, 226, 47, 6, 191, 182, 210, 247, 190, 131, 50, 221, 58, 28, 10, 1, 191, 143, 15, 150, 62, 26, 233, 171, 60, 107, 131, 3, 63, 252, 116, 237, 62, 62, 98, 128, 61, 180, 220, 255, 62, 119, 105, 162, 190, 78, 27, 4, 191, 97, 69, 32, 190, 70, 63, 9, 190, 160, 100, 30, 190, 220, 235, 249, 190, 116, 13, 63, 62, 197, 187, 219, 62, 63, 154, 207, 190, 185, 56, 124, 62, 227, 77, 124, 190, 65, 172, 171, 190, 219, 111, 217, 190, 41, 1, 18, 63, 13, 10, 190, 62, 107, 200, 17, 63, 151, 221, 148, 61, 144, 122, 54, 186, 37, 228, 27, 190, 97, 132, 207, 62, 6, 38, 212, 62, 50, 90, 205, 60, 229, 116, 237, 190, 65, 65, 16, 191, 239, 215, 57, 62, 106, 149, 200, 62, 191, 189, 148, 62, 64, 223, 7, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 202, 19, 191, 80, 29, 218, 190, 206, 102, 128, 62, 198, 68, 80, 190, 70, 69, 90, 62, 163, 241, 72, 62, 223, 94, 8, 190, 168, 233, 65, 62, 188, 19, 5, 191, 223, 130, 16, 61, 231, 76, 16, 63, 231, 216, 250, 61, 240, 229, 241, 190, 147, 88, 5, 63, 18, 220, 3, 63, 179, 63, 12, 62, 210, 1, 4, 63, 40, 19, 172, 62, 64, 143, 231, 190, 250, 7, 156, 62, 103, 40, 95, 190, 137, 130, 255, 188, 33, 41, 19, 63, 15, 225, 226, 189, 17, 97, 47, 62, 202, 98, 207, 190, 229, 213, 7, 62, 171, 34, 214, 190, 161, 133, 166, 190, 55, 112, 36, 62, 155, 218, 32, 190, 170, 11, 232, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 108, 166, 189, 43, 234, 138, 60, 157, 189, 28, 61, 159, 193, 18, 61, 48, 50, 163, 61, 231, 148, 122, 60, 19, 109, 147, 60, 241, 164, 52, 62, 107, 134, 2, 61, 219, 9, 91, 189, 169, 113, 42, 189, 206, 28, 74, 189, 139, 227, 232, 61, 14, 108, 199, 189, 177, 27, 6, 61, 176, 215, 28, 62, 248, 152, 67, 61, 112, 220, 194, 60, 112, 18, 174, 189, 162, 240, 49, 190, 249, 98, 36, 62, 19, 238, 0, 62, 176, 91, 249, 61, 209, 18, 191, 58, 30, 133, 216, 61, 94, 120, 161, 189, 43, 214, 197, 59, 163, 175, 30, 59, 243, 19, 24, 61, 120, 251, 155, 187, 166, 82, 208, 189, 213, 228, 49, 62, 71, 213, 165, 60, 30, 163, 226, 61, 125, 237, 11, 190, 103, 130, 26, 61, 6, 39, 149, 61, 83, 49, 197, 60, 178, 241, 209, 61, 19, 142, 76, 61, 31, 100, 15, 60, 80, 186, 118, 60, 145, 38, 62, 189, 33, 122, 87, 61, 115, 55, 156, 189, 111, 217, 95, 188, 128, 151, 48, 190, 33, 61, 106, 60, 40, 2, 5, 190, 66, 152, 232, 61, 104, 146, 19, 189, 158, 226, 223, 61, 33, 81, 191, 189, 136, 37, 164, 61, 179, 89, 26, 61, 146, 177, 2, 62, 204, 29, 158, 61, 29, 127, 68, 61, 99, 214, 52, 190, 51, 209, 163, 188, 27, 103, 11, 62, 241, 100, 44, 190, 227, 136, 14, 189, 22, 92, 166, 189, 61, 176, 252, 61, 11, 47, 221, 61, 41, 79, 51, 60, 14, 82, 186, 61, 34, 177, 145, 189, 250, 78, 185, 61, 68, 157, 223, 61, 110, 103, 34, 62, 152, 2, 230, 61, 244, 117, 9, 189, 178, 42, 248, 189, 99, 164, 253, 189, 159, 29, 32, 190, 26, 217, 249, 188, 189, 19, 98, 61, 243, 215, 139, 189, 69, 29, 17, 59, 66, 95, 188, 61, 219, 176, 23, 62, 115, 233, 4, 188, 157, 67, 3, 62, 13, 35, 215, 189, 230, 38, 236, 61, 205, 5, 41, 62, 222, 94, 25, 190, 168, 152, 127, 60, 110, 213, 16, 190, 88, 207, 255, 61, 145, 55, 173, 189, 151, 12, 0, 62, 224, 1, 37, 62, 61, 57, 119, 61, 0, 239, 215, 61, 83, 43, 113, 61, 184, 64, 83, 188, 188, 254, 173, 60, 51, 192, 234, 189, 208, 115, 164, 60, 192, 58, 218, 61, 85, 157, 37, 62, 180, 26, 3, 62, 175, 180, 205, 61, 67, 168, 171, 189, 73, 202, 31, 190, 25, 180, 22, 60, 27, 119, 187, 61, 22, 0, 6, 62, 134, 246, 197, 189, 222, 10, 100, 188, 238, 149, 250, 61, 120, 189, 51, 62, 224, 177, 37, 61, 250, 84, 254, 59, 133, 106, 72, 188, 90, 40, 52, 190, 20, 191, 51, 190, 182, 51, 19, 190, 104, 50, 20, 62, 209, 173, 161, 189, 113, 123, 119, 61, 103, 133, 166, 61, 186, 236, 160, 61, 152, 118, 232, 61, 220, 122, 95, 189, 123, 19, 134, 189, 100, 100, 48, 189, 64, 154, 122, 189, 247, 188, 32, 190, 9, 221, 211, 59, 245, 171, 0, 62, 190, 58, 0, 62, 230, 133, 126, 189, 65, 37, 160, 60, 113, 122, 223, 61, 234, 28, 210, 61, 16, 21, 172, 60, 132, 49, 25, 190, 202, 138, 194, 61, 57, 187, 3, 190, 12, 29, 14, 190, 47, 250, 3, 190, 83, 117, 137, 61, 224, 115, 6, 190, 75, 192, 199, 61, 182, 161, 36, 190, 226, 138, 193, 61, 255, 189, 28, 62, 177, 104, 44, 62, 32, 23, 160, 189, 76, 181, 132, 60, 6, 16, 6, 61, 221, 246, 10, 189, 249, 66, 150, 61, 99, 25, 135, 189, 102, 153, 61, 61, 221, 140, 35, 62, 183, 68, 29, 62, 173, 84, 7, 189, 161, 184, 8, 62, 87, 40, 97, 60, 189, 168, 205, 61, 23, 95, 232, 189, 90, 87, 206, 61, 219, 194, 48, 190, 16, 242, 128, 61, 37, 83, 67, 60, 173, 145, 198, 189, 83, 37, 27, 189, 19, 185, 19, 62, 46, 214, 162, 189, 98, 190, 216, 61, 95, 61, 47, 188, 163, 208, 34, 190, 84, 48, 15, 190, 13, 229, 205, 189, 32, 100, 86, 189, 215, 76, 131, 189, 168, 225, 225, 61, 3, 15, 209, 60, 147, 132, 84, 61, 150, 196, 31, 62, 243, 41, 171, 188, 53, 205, 178, 189, 183, 108, 197, 189, 176, 21, 37, 62, 106, 220, 170, 189, 250, 102, 111, 60, 81, 173, 11, 190, 10, 163, 85, 189, 221, 212, 26, 190, 163, 192, 161, 61, 178, 54, 40, 190, 1, 56, 221, 187, 253, 188, 208, 60, 97, 37, 208, 61, 4, 29, 18, 62, 18, 167, 148, 60, 53, 153, 10, 190, 61, 93, 135, 189, 18, 169, 243, 187, 218, 86, 47, 190, 89, 128, 135, 61, 227, 101, 148, 61, 90, 214, 32, 190, 123, 10, 22, 62, 199, 175, 10, 62, 152, 6, 202, 61, 188, 52, 248, 61, 137, 187, 188, 61, 76, 199, 154, 189, 156, 113, 247, 61, 181, 48, 28, 190, 241, 151, 82, 61, 204, 110, 27, 61, 43, 75, 224, 188, 31, 121, 33, 62, 220, 24, 19, 61, 112, 158, 130, 61, 195, 160, 52, 189, 174, 59, 241, 189, 243, 137, 132, 189, 92, 94, 31, 190, 188, 245, 17, 190, 44, 74, 208, 60, 174, 105, 228, 189, 85, 51, 120, 61, 239, 245, 28, 190, 65, 179, 9, 62, 214, 73, 48, 62, 193, 182, 51, 189, 245, 233, 199, 61, 177, 225, 233, 61, 69, 177, 167, 189, 234, 9, 21, 190, 111, 20, 79, 61, 55, 90, 237, 61, 254, 227, 239, 61, 37, 134, 178, 61, 171, 164, 118, 189, 248, 138, 50, 190, 2, 194, 40, 62, 110, 181, 204, 61, 34, 72, 10, 190, 236, 108, 47, 190, 154, 191, 133, 61, 231, 219, 46, 190, 131, 199, 46, 62, 28, 147, 130, 189, 201, 150, 92, 61, 29, 240, 35, 61, 231, 61, 5, 190, 209, 53, 48, 62, 233, 213, 43, 190, 251, 239, 104, 189, 125, 66, 26, 190, 203, 107, 168, 189, 8, 137, 234, 189, 183, 170, 170, 60, 169, 135, 3, 62, 97, 136, 121, 60, 196, 131, 44, 59, 8, 66, 69, 61, 99, 55, 244, 61, 73, 16, 250, 189, 2, 40, 9, 190, 40, 20, 171, 189, 71, 53, 143, 187, 31, 248, 176, 61, 84, 197, 187, 189, 145, 123, 39, 190, 114, 163, 245, 188, 121, 170, 22, 190, 102, 138, 15, 190, 33, 145, 10, 62, 39, 239, 201, 189, 78, 117, 157, 189, 18, 84, 76, 61, 113, 6, 15, 62, 28, 217, 225, 189, 88, 122, 215, 189, 102, 224, 20, 62, 95, 247, 237, 61, 170, 18, 24, 190, 80, 14, 207, 61, 29, 248, 0, 190, 177, 86, 111, 189, 120, 150, 204, 61, 124, 198, 136, 189, 110, 171, 162, 61, 157, 220, 125, 189, 143, 146, 195, 189, 28, 6, 34, 62, 71, 65, 239, 189, 128, 158, 50, 190, 82, 227, 217, 188, 16, 130, 10, 190, 110, 96, 108, 59, 141, 8, 38, 62, 15, 107, 141, 189, 165, 7, 37, 62, 228, 92, 157, 61, 219, 127, 0, 190, 155, 123, 1, 190, 215, 16, 103, 187, 38, 111, 14, 62, 43, 68, 183, 61, 45, 45, 9, 189, 132, 247, 123, 188, 67, 115, 201, 188, 226, 232, 172, 58, 253, 238, 208, 189, 24, 228, 228, 61, 68, 103, 209, 188, 246, 188, 85, 189, 149, 187, 15, 62, 36, 247, 39, 190, 86, 228, 142, 61, 159, 110, 179, 189, 192, 187, 4, 61, 233, 45, 45, 62, 211, 164, 37, 190, 104, 83, 202, 61, 191, 149, 222, 61, 140, 75, 33, 190, 255, 158, 106, 61, 136, 77, 67, 188, 40, 235, 244, 61, 240, 49, 131, 188, 41, 252, 225, 189, 41, 55, 44, 190, 34, 163, 147, 61, 216, 134, 20, 189, 240, 210, 164, 61, 255, 37, 118, 189, 139, 197, 180, 61, 233, 229, 229, 57, 52, 183, 96, 189, 6, 149, 252, 186, 167, 107, 14, 62, 84, 26, 10, 190, 177, 79, 129, 189, 69, 175, 44, 62, 250, 222, 24, 190, 115, 248, 170, 61, 99, 203, 52, 190, 37, 190, 177, 188, 215, 86, 25, 190, 99, 244, 52, 62, 211, 216, 135, 61, 35, 31, 164, 61, 15, 55, 43, 190, 120, 90, 0, 190, 105, 226, 24, 62, 62, 253, 11, 62, 73, 185, 180, 189, 215, 0, 32, 61, 236, 99, 66, 188, 229, 199, 163, 187, 15, 135, 16, 62, 240, 102, 29, 62, 179, 66, 34, 61, 220, 19, 109, 61, 57, 123, 44, 62, 143, 86, 73, 61, 2, 16, 224, 189, 19, 74, 86, 61, 200, 98, 163, 184, 52, 200, 214, 61, 54, 28, 30, 62, 195, 63, 183, 187, 140, 14, 98, 61, 108, 8, 27, 190, 247, 51, 54, 189, 252, 72, 12, 62, 206, 17, 48, 62, 234, 133, 206, 189, 22, 253, 192, 61, 76, 64, 25, 190, 165, 61, 21, 190, 39, 191, 172, 189, 6, 249, 19, 62, 200, 77, 6, 62, 87, 17, 133, 189, 82, 111, 205, 61, 108, 71, 43, 62, 123, 177, 232, 61, 52, 84, 134, 61, 95, 223, 101, 187, 252, 118, 187, 61, 86, 30, 2, 62, 19, 215, 45, 190, 126, 83, 158, 189, 77, 101, 213, 186, 201, 224, 14, 190, 47, 57, 75, 61, 101, 96, 27, 190, 56, 144, 229, 188, 189, 156, 65, 189, 21, 43, 21, 188, 24, 154, 141, 61, 33, 93, 138, 189, 166, 58, 0, 62, 9, 172, 139, 189, 77, 99, 144, 187, 4, 20, 41, 190, 250, 114, 94, 189, 64, 158, 216, 61, 30, 228, 162, 60, 113, 122, 174, 61, 88, 185, 224, 188, 164, 163, 149, 188, 244, 158, 247, 189, 29, 158, 26, 61, 248, 44, 39, 62, 32, 203, 114, 189, 250, 231, 134, 61, 111, 5, 13, 62, 217, 220, 246, 189, 238, 15, 232, 188, 94, 87, 4, 62, 103, 96, 211, 189, 133, 72, 13, 190, 167, 213, 125, 61, 144, 147, 131, 188, 5, 248, 43, 62, 169, 183, 250, 61, 186, 59, 33, 190, 86, 58, 53, 60, 223, 215, 126, 189, 203, 127, 245, 61, 69, 53, 28, 62, 248, 174, 230, 189, 151, 123, 40, 62, 243, 87, 48, 190, 34, 173, 29, 190, 249, 230, 101, 61, 116, 94, 145, 61, 70, 16, 179, 61, 87, 32, 0, 62, 253, 112, 81, 60, 252, 57, 229, 189, 95, 196, 205, 61, 9, 174, 133, 61, 193, 26, 220, 188, 101, 88, 31, 189, 200, 9, 239, 189, 97, 8, 39, 190, 133, 100, 142, 189, 109, 137, 107, 189, 195, 231, 18, 62, 239, 248, 131, 189, 175, 47, 211, 189, 89, 181, 28, 60, 202, 183, 230, 189, 128, 18, 242, 189, 198, 4, 36, 61, 122, 78, 28, 190, 217, 62, 183, 189, 183, 16, 25, 190, 165, 213, 156, 61, 63, 82, 10, 62, 86, 112, 230, 61, 167, 147, 80, 189, 4, 84, 216, 61, 228, 239, 235, 61, 123, 62, 45, 62, 84, 246, 35, 190, 185, 188, 250, 61, 53, 254, 155, 59, 6, 23, 219, 61, 28, 213, 27, 62, 31, 244, 176, 61, 52, 217, 8, 62, 151, 5, 160, 188, 146, 14, 20, 62, 96, 89, 201, 61, 28, 152, 18, 190, 148, 51, 7, 190, 88, 108, 48, 190, 181, 138, 65, 189, 119, 236, 150, 189, 188, 141, 131, 189, 206, 16, 27, 62, 233, 30, 0, 190, 142, 22, 161, 61, 47, 143, 37, 61, 226, 169, 34, 62, 113, 25, 5, 62, 245, 189, 13, 189, 242, 114, 45, 188, 105, 156, 183, 189, 227, 125, 7, 61, 174, 138, 49, 62, 127, 65, 168, 60, 94, 201, 6, 62, 182, 215, 164, 61, 116, 127, 190, 61, 182, 153, 172, 189, 210, 189, 241, 189, 32, 43, 151, 189, 113, 51, 70, 61, 110, 119, 203, 61, 42, 111, 155, 189, 15, 45, 48, 61, 205, 18, 243, 189, 140, 207, 53, 189, 175, 141, 173, 188, 48, 222, 36, 189, 201, 146, 20, 190, 122, 246, 183, 189, 46, 248, 209, 188, 166, 136, 28, 190, 96, 112, 143, 61, 85, 114, 34, 62, 138, 195, 212, 61, 135, 0, 20, 190, 117, 1, 194, 61, 69, 52, 133, 61, 154, 186, 40, 189, 160, 10, 170, 189, 126, 2, 182, 60, 12, 146, 133, 61, 55, 249, 11, 62, 243, 3, 237, 59, 25, 210, 97, 189, 23, 26, 117, 61, 26, 224, 14, 190, 205, 133, 191, 61, 187, 36, 35, 190, 205, 113, 0, 62, 98, 21, 138, 189, 154, 216, 75, 189, 191, 69, 146, 61, 241, 107, 158, 61, 185, 150, 160, 61, 218, 95, 44, 190, 118, 100, 125, 189, 26, 31, 128, 61, 74, 84, 7, 189, 102, 33, 15, 62, 144, 184, 39, 62, 189, 246, 82, 61, 85, 110, 18, 62, 21, 171, 146, 189, 31, 89, 19, 190, 252, 129, 7, 190, 22, 12, 213, 61, 84, 147, 115, 61, 19, 176, 31, 189, 32, 226, 220, 189, 134, 59, 165, 188, 230, 225, 120, 61, 199, 245, 45, 62, 154, 182, 154, 189, 204, 46, 81, 189, 72, 16, 192, 61, 78, 221, 23, 61, 165, 185, 49, 190, 1, 8, 26, 62, 254, 44, 7, 190, 108, 138, 212, 189, 106, 17, 21, 190, 206, 111, 157, 189, 108, 63, 2, 190, 19, 252, 45, 62, 98, 113, 206, 188, 96, 162, 56, 60, 179, 236, 211, 189, 157, 55, 33, 189, 150, 233, 160, 188, 202, 129, 174, 61, 182, 29, 21, 190, 73, 187, 33, 62, 47, 142, 17, 61, 159, 133, 208, 61, 143, 122, 60, 61, 180, 249, 33, 62, 229, 189, 23, 62, 101, 125, 247, 61, 145, 126, 3, 190, 47, 110, 14, 190, 73, 120, 225, 188, 171, 108, 9, 190, 112, 251, 226, 61, 160, 221, 8, 190, 7, 52, 183, 61, 86, 225, 31, 62, 126, 251, 94, 61, 73, 111, 31, 189, 19, 58, 5, 190, 154, 16, 131, 61, 163, 157, 163, 61, 24, 227, 155, 189, 50, 82, 13, 190, 102, 114, 24, 62, 214, 117, 216, 60, 157, 10, 14, 61, 187, 245, 50, 190, 172, 150, 25, 61, 172, 11, 46, 190, 70, 125, 176, 61, 223, 77, 16, 190, 88, 19, 188, 188, 85, 32, 11, 190, 155, 36, 43, 190, 105, 5, 62, 187, 88, 64, 112, 61, 142, 97, 224, 61, 249, 24, 178, 61, 154, 249, 199, 188, 129, 152, 29, 190, 13, 152, 17, 189, 178, 236, 191, 61, 86, 59, 48, 189, 235, 185, 225, 189, 149, 251, 41, 190, 255, 95, 83, 189, 52, 35, 128, 189, 103, 252, 200, 189, 11, 20, 150, 189, 20, 182, 31, 62, 105, 105, 224, 61, 250, 224, 115, 188, 0, 223, 15, 62, 192, 192, 112, 188, 23, 52, 41, 62, 40, 55, 48, 188, 214, 254, 202, 189, 238, 129, 87, 61, 190, 78, 72, 61, 239, 218, 194, 189, 162, 122, 12, 61, 69, 211, 6, 62, 117, 242, 1, 60, 217, 176, 73, 60, 78, 78, 142, 61, 138, 80, 24, 61, 173, 26, 193, 189, 245, 216, 187, 189, 248, 119, 175, 189, 40, 62, 3, 61, 201, 220, 128, 61, 224, 222, 23, 61, 45, 253, 23, 190, 221, 163, 132, 61, 118, 57, 152, 189, 180, 138, 7, 190, 51, 194, 207, 189, 94, 217, 20, 190, 107, 253, 154, 188, 215, 161, 13, 190, 94, 38, 255, 187, 70, 235, 92, 189, 68, 47, 164, 60, 63, 197, 182, 189, 72, 216, 15, 190, 78, 227, 187, 61, 183, 113, 130, 61, 110, 187, 130, 189, 254, 199, 51, 62, 22, 5, 6, 60, 22, 214, 85, 189, 225, 243, 186, 61, 147, 16, 43, 62, 135, 2, 8, 62, 6, 221, 192, 59, 196, 252, 150, 189, 233, 131, 246, 61, 216, 247, 180, 188, 180, 151, 75, 189, 254, 179, 80, 61, 64, 28, 114, 61, 230, 128, 37, 189, 3, 237, 143, 61, 53, 178, 180, 189, 127, 111, 179, 189, 10, 233, 147, 59, 160, 251, 24, 190, 135, 118, 108, 60, 59, 92, 249, 60, 194, 40, 158, 59, 68, 109, 33, 62, 124, 52, 138, 188, 95, 69, 102, 59, 195, 140, 48, 60, 182, 62, 181, 61, 137, 23, 151, 187, 2, 138, 139, 189, 156, 8, 212, 60, 197, 163, 20, 62, 189, 24, 242, 61, 99, 171, 35, 62, 26, 250, 184, 60, 77, 23, 18, 62, 232, 140, 174, 59, 232, 196, 162, 61, 25, 40, 67, 61, 234, 248, 145, 188, 42, 229, 182, 188, 207, 203, 233, 189, 210, 32, 149, 189, 67, 9, 51, 62, 42, 170, 29, 62, 245, 89, 219, 61, 234, 133, 52, 62, 249, 162, 39, 62, 86, 136, 167, 61, 223, 222, 216, 189, 116, 142, 245, 60, 142, 144, 173, 188, 182, 102, 129, 189, 34, 41, 13, 62, 47, 47, 64, 61, 90, 60, 36, 62, 215, 86, 255, 61, 74, 139, 112, 189, 126, 169, 211, 61, 196, 173, 207, 59, 69, 135, 206, 61, 18, 216, 79, 189, 42, 217, 142, 189, 92, 9, 189, 61, 14, 204, 99, 189, 103, 161, 167, 61, 81, 127, 29, 188, 62, 137, 41, 60, 13, 12, 16, 189, 28, 197, 157, 61, 158, 202, 9, 61, 78, 231, 130, 61, 212, 91, 46, 62, 126, 159, 211, 61, 13, 255, 20, 189, 155, 170, 160, 189, 246, 99, 236, 189, 98, 34, 139, 186, 10, 27, 39, 190, 82, 188, 23, 62, 69, 221, 162, 60, 239, 6, 249, 60, 161, 133, 230, 60, 208, 4, 220, 189, 228, 26, 91, 59, 105, 192, 200, 188, 203, 253, 167, 60, 112, 184, 107, 189, 110, 167, 198, 61, 77, 132, 230, 60, 179, 196, 241, 189, 49, 117, 114, 61, 87, 15, 239, 188, 148, 166, 174, 189, 18, 197, 221, 60, 26, 201, 3, 189, 64, 237, 44, 190, 140, 188, 132, 61, 51, 38, 33, 60, 71, 20, 29, 190, 181, 238, 48, 189, 73, 141, 32, 190, 98, 74, 243, 189, 24, 137, 111, 189, 199, 225, 97, 186, 2, 227, 94, 60, 203, 134, 240, 61, 162, 92, 40, 59, 189, 213, 50, 61, 25, 138, 44, 190, 150, 87, 109, 61, 60, 82, 36, 190, 212, 12, 232, 189, 150, 156, 185, 189, 89, 21, 250, 189, 42, 243, 106, 61, 195, 134, 157, 189, 236, 227, 31, 190, 242, 89, 8, 62, 239, 230, 62, 189, 14, 205, 26, 62, 24, 88, 2, 62, 210, 15, 24, 187, 53, 25, 217, 189, 49, 37, 148, 189, 57, 81, 224, 61, 113, 90, 170, 189, 31, 215, 123, 189, 9, 186, 137, 61, 71, 91, 77, 189, 29, 95, 237, 189, 167, 194, 162, 61, 182, 113, 202, 188, 138, 51, 171, 61, 23, 27, 78, 189, 220, 21, 10, 188, 150, 11, 255, 61, 36, 41, 131, 59, 85, 85, 50, 61, 7, 212, 215, 189, 187, 78, 202, 61, 94, 104, 40, 189, 209, 146, 50, 62, 147, 230, 122, 188, 168, 142, 11, 60, 246, 147, 236, 188, 78, 125, 105, 61, 240, 25, 113, 189, 73, 57, 125, 189, 63, 152, 66, 61, 223, 255, 26, 62, 67, 160, 25, 190, 142, 153, 134, 61, 195, 207, 201, 61, 9, 71, 6, 62, 90, 155, 19, 190, 148, 81, 11, 190, 8, 71, 9, 62, 218, 21, 72, 189, 56, 165, 91, 189, 233, 125, 105, 189, 35, 23, 74, 61, 143, 180, 24, 62, 231, 215, 208, 60, 32, 139, 19, 189, 98, 131, 2, 190, 235, 195, 98, 61, 173, 93, 149, 189, 208, 170, 6, 188, 20, 32, 195, 61, 140, 102, 14, 190, 29, 77, 222, 61, 118, 218, 51, 188, 76, 138, 109, 61, 184, 188, 95, 189, 153, 135, 253, 61, 138, 180, 115, 189, 171, 26, 15, 190, 242, 242, 0, 190, 94, 199, 164, 189, 140, 250, 158, 61, 247, 127, 91, 61, 145, 54, 43, 62, 28, 102, 192, 61, 7, 204, 35, 189, 118, 152, 191, 58, 2, 163, 48, 62, 221, 215, 135, 60, 68, 39, 206, 61, 101, 224, 91, 61, 224, 237, 97, 189, 37, 226, 2, 189, 172, 224, 34, 187, 87, 101, 82, 189, 144, 27, 135, 61, 77, 204, 191, 60, 252, 53, 172, 187, 22, 78, 117, 61, 86, 166, 89, 188, 9, 246, 52, 190, 152, 230, 147, 61, 236, 236, 173, 59, 182, 181, 146, 189, 205, 73, 6, 190, 175, 191, 8, 189, 224, 191, 230, 188, 18, 232, 192, 187, 148, 255, 82, 61, 111, 172, 140, 189, 100, 96, 188, 189, 54, 2, 45, 62, 255, 78, 10, 190, 240, 219, 195, 61, 169, 237, 148, 61, 86, 79, 64, 189, 249, 218, 0, 61, 164, 10, 42, 62, 50, 166, 50, 189, 158, 57, 5, 190, 81, 245, 190, 61, 6, 128, 34, 62, 120, 53, 161, 189, 227, 23, 240, 60, 168, 86, 172, 61, 68, 48, 184, 61, 225, 94, 226, 61, 38, 140, 26, 62, 195, 132, 20, 190, 174, 225, 208, 61, 223, 195, 44, 62, 225, 171, 226, 61, 78, 164, 19, 62, 197, 123, 65, 59, 134, 88, 250, 61, 224, 210, 5, 62, 233, 222, 42, 190, 185, 253, 5, 190, 136, 21, 216, 189, 85, 88, 246, 61, 117, 178, 189, 60, 241, 114, 149, 189, 227, 26, 140, 60, 134, 90, 187, 59, 130, 229, 145, 189, 183, 85, 50, 190, 186, 235, 50, 61, 113, 177, 45, 190, 151, 181, 14, 190, 247, 252, 24, 188, 32, 133, 34, 61, 106, 82, 126, 61, 22, 18, 13, 190, 21, 162, 135, 60, 184, 20, 191, 60, 151, 80, 126, 189, 90, 226, 42, 62, 129, 47, 16, 187, 150, 154, 21, 62, 147, 170, 5, 61, 65, 191, 220, 61, 117, 95, 24, 189, 170, 90, 20, 190, 81, 48, 225, 188, 4, 104, 182, 61, 19, 146, 162, 188, 192, 17, 10, 190, 55, 155, 111, 61, 145, 13, 127, 189, 246, 5, 10, 189, 239, 65, 58, 61, 128, 33, 240, 189, 120, 130, 127, 61, 156, 237, 14, 62, 145, 63, 134, 61, 238, 106, 44, 61, 157, 89, 133, 60, 83, 46, 132, 189, 162, 9, 64, 189, 121, 68, 180, 61, 140, 45, 216, 61, 222, 219, 107, 189, 202, 113, 240, 189, 39, 55, 22, 189, 66, 92, 6, 190, 111, 201, 31, 190, 135, 56, 130, 61, 177, 117, 4, 190, 116, 19, 150, 189, 56, 48, 51, 62, 152, 197, 52, 190, 182, 202, 128, 187, 162, 98, 101, 61, 22, 32, 145, 61, 41, 107, 19, 190, 134, 66, 0, 62, 180, 172, 170, 61, 77, 30, 5, 190, 242, 84, 157, 61, 253, 110, 29, 190, 234, 5, 27, 62, 68, 34, 238, 189, 107, 31, 42, 190, 137, 195, 0, 62, 120, 1, 6, 190, 235, 100, 2, 60, 54, 192, 240, 61, 88, 8, 155, 61, 49, 167, 32, 190, 187, 124, 67, 188, 133, 88, 142, 189, 156, 63, 216, 188, 85, 70, 62, 61, 120, 36, 211, 61, 50, 103, 124, 188, 18, 226, 242, 189, 196, 230, 211, 61, 186, 150, 26, 190, 254, 19, 50, 62, 15, 156, 114, 188, 180, 72, 231, 60, 213, 160, 43, 61, 183, 158, 40, 189, 43, 195, 43, 60, 182, 103, 2, 62, 166, 47, 125, 189, 133, 67, 27, 190, 113, 11, 100, 61, 67, 167, 1, 190, 51, 194, 213, 60, 66, 8, 24, 62, 85, 154, 129, 59, 115, 153, 213, 59, 16, 231, 54, 189, 7, 65, 194, 61, 207, 99, 148, 188, 61, 225, 4, 189, 176, 111, 128, 189, 193, 209, 153, 189, 46, 204, 14, 190, 135, 103, 50, 189, 103, 79, 43, 62, 138, 17, 167, 189, 196, 116, 205, 60, 143, 221, 174, 61, 158, 104, 3, 189, 222, 178, 21, 189, 132, 86, 7, 190, 232, 143, 127, 61, 88, 160, 213, 58, 164, 43, 45, 62, 12, 126, 60, 61, 48, 195, 14, 190, 21, 48, 50, 190, 99, 240, 149, 188, 126, 77, 236, 188, 83, 234, 174, 189, 201, 204, 191, 188, 77, 239, 170, 58, 126, 15, 248, 186, 84, 41, 64, 60, 33, 215, 35, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 228, 161, 61, 145, 227, 18, 62, 151, 142, 44, 190, 95, 59, 165, 61, 96, 15, 243, 61, 85, 163, 42, 190, 192, 30, 186, 189, 128, 253, 19, 190, 98, 232, 177, 61, 187, 158, 18, 61, 160, 206, 50, 190, 129, 239, 51, 62, 126, 87, 196, 61, 22, 234, 231, 61, 95, 62, 177, 189, 22, 110, 3, 190, 46, 213, 25, 190, 83, 4, 25, 190, 113, 250, 33, 190, 145, 67, 224, 61, 97, 195, 87, 61, 132, 35, 188, 59, 163, 8, 156, 61, 194, 175, 32, 61, 236, 254, 220, 189, 152, 39, 201, 61, 175, 228, 120, 61, 169, 100, 230, 61, 185, 186, 206, 188, 32, 108, 8, 62, 202, 158, 219, 188, 246, 174, 123, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 66, 52, 190, 141, 139, 156, 189, 72, 10, 243, 61, 168, 148, 255, 61, 224, 211, 30, 62, 204, 8, 210, 61, 220, 185, 170, 61, 233, 251, 124, 189, 222, 140, 240, 188, 234, 168, 31, 61, 172, 132, 223, 187, 59, 204, 190, 189, 61, 103, 200, 61, 156, 50, 230, 189, 12, 128, 187, 189, 116, 35, 131, 189, 4, 113, 187, 60, 66, 215, 213, 189, 81, 107, 20, 62, 8, 68, 12, 61, 216, 123, 21, 189, 92, 249, 46, 61, 226, 109, 206, 189, 139, 69, 33, 62, 98, 149, 181, 189, 11, 122, 95, 61, 147, 233, 6, 190, 133, 98, 196, 188, 42, 11, 16, 62, 144, 154, 54, 188, 241, 117, 133, 61, 69, 92, 107, 189, 61, 36, 5, 62, 220, 110, 76, 189, 186, 64, 13, 62, 214, 208, 20, 62, 145, 189, 50, 190, 79, 228, 210, 61, 126, 98, 73, 61, 111, 0, 168, 61, 201, 125, 20, 190, 134, 120, 33, 190, 175, 39, 11, 59, 234, 114, 179, 188, 168, 248, 234, 189, 149, 240, 179, 188, 81, 56, 122, 189, 177, 106, 184, 186, 40, 64, 39, 61, 155, 162, 224, 60, 0, 208, 39, 190, 236, 93, 15, 190, 232, 64, 34, 62, 228, 170, 239, 61, 140, 183, 200, 60, 217, 81, 187, 189, 66, 50, 51, 59, 13, 178, 199, 187, 220, 162, 214, 61, 32, 80, 147, 60, 233, 17, 99, 189, 171, 167, 238, 189, 125, 69, 29, 62, 176, 98, 134, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 98, 225, 61, 191, 244, 35, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 77, 136, 191, 191, 32, 145, 191, 176, 203, 138, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 27, 180, 189, 227, 111, 180, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}