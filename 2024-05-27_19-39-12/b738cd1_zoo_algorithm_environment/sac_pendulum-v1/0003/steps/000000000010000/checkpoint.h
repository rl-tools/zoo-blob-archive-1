// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 228, 233, 190, 63, 165, 132, 62, 169, 159, 55, 63, 244, 114, 92, 61, 82, 22, 12, 191, 88, 23, 197, 62, 93, 84, 44, 63, 236, 186, 92, 191, 60, 182, 229, 190, 15, 90, 220, 190, 192, 66, 200, 191, 55, 168, 135, 190, 225, 26, 23, 191, 131, 96, 135, 189, 195, 232, 140, 190, 190, 188, 27, 63, 75, 36, 9, 190, 58, 216, 187, 61, 203, 216, 75, 191, 254, 154, 211, 190, 8, 254, 172, 61, 113, 94, 23, 63, 244, 251, 64, 191, 218, 150, 16, 191, 12, 9, 194, 62, 237, 138, 248, 60, 145, 10, 136, 190, 155, 126, 78, 190, 244, 191, 76, 63, 165, 228, 177, 190, 196, 79, 3, 63, 223, 46, 204, 61, 201, 34, 251, 190, 252, 70, 144, 190, 21, 108, 51, 63, 52, 230, 93, 61, 77, 153, 197, 62, 196, 163, 198, 190, 166, 222, 5, 63, 70, 255, 9, 191, 3, 50, 101, 62, 80, 182, 162, 60, 73, 241, 165, 62, 6, 40, 130, 191, 15, 126, 112, 190, 134, 167, 86, 191, 240, 177, 33, 190, 194, 174, 123, 61, 44, 181, 235, 62, 0, 50, 59, 191, 217, 180, 204, 62, 170, 248, 217, 188, 43, 154, 136, 191, 24, 144, 26, 62, 52, 140, 59, 190, 40, 130, 5, 191, 8, 195, 227, 62, 111, 11, 12, 62, 14, 212, 188, 191, 144, 80, 181, 190, 188, 97, 136, 190, 222, 232, 31, 190, 55, 246, 12, 63, 140, 212, 8, 63, 37, 98, 130, 63, 145, 23, 185, 62, 215, 51, 235, 62, 117, 122, 164, 62, 147, 2, 187, 190, 89, 201, 106, 191, 78, 46, 26, 62, 30, 101, 173, 187, 120, 152, 18, 62, 126, 32, 136, 190, 41, 251, 194, 62, 170, 43, 209, 189, 240, 72, 2, 191, 43, 182, 156, 62, 149, 160, 12, 191, 80, 77, 25, 191, 126, 152, 37, 190, 82, 173, 109, 63, 240, 80, 84, 63, 213, 175, 192, 62, 59, 191, 43, 63, 224, 163, 182, 190, 143, 156, 102, 190, 244, 20, 42, 63, 162, 117, 16, 63, 252, 242, 31, 57, 175, 3, 30, 191, 150, 187, 30, 191, 255, 135, 195, 62, 253, 211, 49, 63, 179, 212, 106, 63, 42, 32, 4, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 226, 46, 190, 234, 136, 165, 190, 67, 248, 168, 61, 182, 253, 125, 190, 194, 199, 112, 61, 54, 163, 166, 62, 58, 127, 186, 61, 217, 241, 173, 189, 103, 215, 104, 191, 154, 202, 15, 61, 34, 172, 141, 62, 237, 144, 156, 62, 239, 90, 52, 191, 76, 47, 47, 63, 29, 245, 133, 62, 139, 173, 171, 62, 56, 74, 23, 63, 102, 254, 135, 62, 43, 3, 244, 190, 200, 30, 41, 62, 58, 170, 193, 189, 202, 243, 179, 189, 114, 58, 211, 62, 177, 215, 211, 189, 207, 231, 188, 62, 218, 54, 1, 62, 72, 53, 112, 62, 221, 83, 119, 191, 124, 209, 14, 191, 187, 222, 213, 62, 125, 71, 228, 189, 28, 51, 5, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 52, 247, 189, 90, 112, 7, 189, 104, 16, 251, 189, 82, 159, 28, 190, 198, 209, 105, 189, 75, 10, 42, 62, 172, 203, 159, 190, 174, 4, 66, 189, 205, 38, 167, 59, 33, 169, 51, 190, 56, 206, 140, 189, 86, 176, 218, 190, 78, 205, 75, 62, 151, 247, 175, 190, 27, 175, 24, 191, 251, 113, 149, 190, 2, 236, 178, 61, 21, 137, 246, 61, 62, 133, 146, 189, 129, 40, 181, 190, 91, 154, 33, 62, 186, 205, 86, 62, 110, 64, 144, 61, 77, 68, 49, 191, 146, 211, 112, 61, 153, 247, 82, 190, 140, 36, 20, 190, 127, 255, 138, 62, 247, 116, 183, 189, 129, 74, 13, 62, 225, 152, 46, 190, 148, 166, 185, 62, 46, 150, 240, 190, 66, 224, 160, 62, 172, 143, 153, 190, 150, 88, 105, 61, 240, 134, 48, 62, 214, 59, 83, 62, 78, 146, 216, 188, 145, 205, 4, 190, 251, 97, 37, 190, 99, 202, 81, 62, 46, 224, 111, 189, 214, 82, 136, 188, 116, 118, 94, 62, 232, 0, 25, 58, 55, 209, 31, 190, 120, 200, 135, 60, 29, 203, 164, 60, 108, 245, 177, 62, 156, 180, 52, 188, 57, 42, 28, 61, 154, 88, 210, 190, 141, 61, 52, 62, 43, 33, 21, 62, 179, 54, 104, 62, 21, 78, 31, 190, 159, 20, 191, 62, 135, 38, 60, 190, 154, 226, 212, 61, 122, 109, 42, 191, 213, 173, 165, 61, 151, 249, 71, 190, 144, 186, 202, 188, 206, 32, 75, 61, 7, 122, 99, 61, 65, 207, 81, 189, 237, 105, 30, 61, 30, 56, 133, 190, 232, 171, 109, 189, 112, 195, 253, 61, 201, 180, 201, 61, 54, 207, 98, 62, 0, 184, 69, 190, 103, 134, 146, 190, 217, 192, 238, 190, 101, 218, 195, 190, 6, 74, 221, 189, 26, 195, 158, 186, 211, 137, 139, 61, 3, 46, 70, 62, 33, 94, 197, 62, 179, 80, 3, 189, 173, 38, 232, 189, 2, 149, 106, 62, 223, 68, 6, 191, 162, 157, 226, 189, 183, 126, 205, 61, 227, 157, 25, 61, 71, 4, 32, 60, 91, 254, 129, 190, 133, 90, 44, 191, 125, 195, 46, 60, 96, 92, 57, 59, 195, 239, 247, 62, 226, 11, 12, 191, 140, 52, 195, 60, 97, 169, 44, 189, 9, 221, 241, 61, 18, 163, 57, 190, 147, 167, 27, 190, 15, 115, 6, 188, 213, 182, 178, 190, 209, 186, 154, 62, 50, 141, 31, 62, 120, 107, 24, 62, 72, 155, 159, 61, 23, 236, 37, 190, 216, 251, 129, 62, 215, 127, 4, 190, 196, 254, 69, 62, 65, 76, 13, 191, 43, 62, 135, 190, 19, 36, 149, 62, 212, 59, 104, 62, 172, 208, 223, 61, 145, 23, 188, 60, 214, 162, 78, 190, 253, 163, 204, 189, 230, 161, 191, 190, 33, 159, 153, 61, 212, 104, 36, 190, 187, 200, 158, 190, 250, 232, 54, 189, 111, 164, 23, 63, 62, 71, 81, 62, 94, 191, 137, 61, 90, 126, 74, 189, 63, 120, 143, 189, 25, 24, 79, 189, 253, 172, 12, 61, 130, 45, 103, 190, 174, 211, 212, 60, 201, 248, 82, 62, 217, 172, 1, 62, 171, 214, 105, 187, 132, 198, 18, 188, 142, 39, 162, 60, 40, 248, 16, 62, 205, 224, 88, 61, 136, 5, 50, 190, 85, 175, 21, 62, 70, 123, 72, 189, 194, 193, 9, 190, 131, 191, 28, 62, 201, 120, 19, 62, 99, 193, 221, 189, 100, 245, 160, 60, 49, 131, 190, 189, 189, 248, 89, 61, 123, 190, 77, 62, 57, 209, 58, 62, 20, 177, 255, 59, 5, 202, 58, 60, 33, 180, 35, 61, 63, 87, 138, 190, 187, 120, 238, 190, 35, 208, 163, 189, 155, 40, 172, 61, 226, 246, 63, 188, 121, 87, 13, 62, 143, 15, 21, 189, 161, 184, 8, 62, 87, 40, 97, 60, 59, 174, 199, 61, 188, 165, 233, 189, 81, 200, 193, 61, 219, 194, 48, 190, 16, 242, 128, 61, 68, 207, 15, 60, 173, 145, 198, 189, 57, 43, 57, 189, 238, 177, 15, 62, 93, 196, 189, 189, 98, 190, 216, 61, 14, 26, 145, 188, 237, 159, 39, 190, 248, 226, 16, 190, 47, 105, 213, 189, 32, 100, 86, 189, 128, 199, 148, 189, 173, 138, 214, 61, 3, 15, 209, 60, 128, 50, 67, 61, 223, 180, 22, 62, 128, 157, 217, 188, 22, 140, 184, 189, 214, 190, 201, 189, 176, 21, 37, 62, 106, 220, 170, 189, 48, 106, 44, 60, 139, 187, 14, 190, 123, 110, 102, 189, 40, 107, 61, 190, 254, 236, 134, 62, 28, 133, 90, 190, 222, 163, 72, 189, 20, 248, 243, 59, 207, 160, 132, 62, 156, 42, 160, 62, 198, 76, 23, 62, 166, 149, 151, 190, 45, 13, 143, 188, 198, 23, 209, 190, 173, 108, 189, 190, 226, 43, 113, 189, 120, 198, 56, 62, 63, 107, 42, 60, 223, 95, 240, 62, 211, 87, 194, 62, 60, 23, 177, 187, 194, 25, 28, 62, 31, 6, 92, 62, 173, 221, 0, 191, 144, 68, 234, 61, 112, 125, 84, 190, 179, 246, 101, 62, 42, 211, 26, 61, 100, 39, 91, 189, 130, 171, 40, 191, 233, 232, 164, 62, 15, 235, 195, 61, 9, 69, 105, 62, 130, 212, 56, 191, 124, 32, 137, 190, 5, 145, 168, 190, 222, 202, 156, 190, 186, 42, 79, 62, 12, 115, 158, 189, 176, 213, 150, 62, 131, 21, 43, 191, 28, 128, 111, 189, 149, 43, 18, 61, 184, 215, 87, 62, 63, 68, 226, 61, 203, 67, 78, 62, 210, 28, 34, 190, 193, 0, 85, 189, 109, 56, 175, 187, 236, 8, 172, 190, 136, 235, 201, 62, 37, 234, 192, 62, 9, 5, 145, 190, 211, 66, 47, 191, 102, 161, 70, 61, 236, 237, 211, 61, 161, 116, 146, 188, 197, 171, 69, 190, 158, 164, 35, 188, 12, 218, 93, 190, 68, 163, 13, 62, 140, 212, 110, 189, 4, 132, 48, 191, 119, 183, 197, 62, 103, 110, 59, 190, 60, 14, 23, 62, 40, 97, 134, 189, 38, 65, 58, 61, 20, 176, 182, 189, 228, 82, 235, 188, 41, 146, 251, 60, 88, 36, 19, 62, 89, 246, 151, 62, 182, 132, 62, 61, 60, 62, 226, 189, 147, 33, 222, 61, 90, 234, 121, 62, 42, 46, 105, 60, 106, 150, 31, 61, 161, 181, 202, 61, 141, 111, 35, 62, 32, 177, 19, 62, 125, 183, 29, 190, 117, 120, 8, 190, 213, 119, 27, 62, 54, 14, 248, 189, 114, 46, 8, 190, 155, 109, 150, 62, 53, 46, 179, 61, 139, 197, 174, 61, 106, 156, 223, 188, 70, 216, 211, 61, 131, 235, 192, 187, 130, 227, 73, 189, 46, 213, 18, 191, 250, 178, 114, 62, 228, 167, 134, 190, 123, 219, 61, 62, 81, 56, 8, 190, 153, 133, 169, 189, 29, 169, 85, 62, 126, 24, 31, 190, 51, 139, 254, 61, 94, 172, 46, 59, 147, 40, 157, 189, 99, 168, 113, 62, 217, 249, 231, 189, 235, 234, 72, 190, 122, 207, 46, 61, 45, 163, 215, 188, 82, 233, 55, 189, 143, 74, 129, 62, 237, 164, 2, 61, 102, 109, 48, 62, 80, 139, 176, 62, 202, 107, 228, 189, 64, 245, 5, 190, 180, 124, 145, 189, 143, 26, 68, 62, 251, 53, 197, 61, 233, 56, 153, 61, 207, 209, 144, 187, 242, 8, 138, 61, 9, 200, 201, 59, 40, 211, 208, 189, 93, 134, 239, 189, 88, 125, 139, 190, 232, 35, 224, 61, 138, 30, 26, 62, 241, 146, 168, 190, 202, 125, 1, 62, 233, 216, 155, 190, 134, 137, 44, 61, 53, 124, 184, 190, 175, 69, 160, 190, 201, 90, 131, 62, 39, 128, 16, 189, 180, 184, 31, 190, 37, 234, 99, 190, 234, 112, 160, 188, 116, 53, 68, 62, 196, 99, 187, 61, 228, 221, 44, 190, 219, 138, 182, 189, 233, 115, 39, 187, 252, 224, 101, 61, 207, 43, 165, 60, 81, 114, 202, 190, 210, 76, 84, 189, 206, 35, 71, 191, 226, 92, 188, 60, 172, 201, 31, 61, 128, 170, 98, 62, 74, 23, 50, 190, 53, 233, 49, 190, 161, 29, 9, 60, 86, 206, 26, 191, 90, 71, 3, 62, 72, 254, 179, 190, 199, 60, 156, 62, 155, 200, 9, 191, 187, 81, 73, 62, 90, 139, 6, 190, 182, 144, 132, 62, 175, 206, 69, 190, 204, 120, 207, 189, 93, 130, 7, 62, 46, 173, 173, 62, 98, 206, 28, 191, 5, 168, 214, 188, 154, 253, 3, 190, 84, 126, 143, 61, 56, 218, 23, 62, 160, 87, 149, 188, 129, 212, 46, 62, 69, 198, 168, 189, 228, 129, 99, 62, 79, 238, 71, 190, 49, 201, 219, 60, 184, 31, 71, 62, 146, 21, 25, 61, 134, 195, 67, 61, 105, 249, 94, 189, 224, 80, 130, 60, 201, 59, 22, 62, 73, 146, 101, 190, 115, 182, 151, 190, 125, 121, 216, 62, 3, 63, 176, 61, 8, 114, 229, 189, 224, 236, 160, 190, 196, 39, 218, 188, 24, 87, 7, 191, 226, 220, 156, 189, 171, 213, 189, 190, 147, 140, 91, 190, 37, 188, 181, 189, 8, 102, 55, 62, 198, 80, 43, 62, 214, 242, 115, 190, 216, 4, 195, 61, 88, 11, 181, 189, 162, 46, 11, 61, 177, 168, 54, 189, 73, 203, 105, 190, 69, 198, 154, 190, 10, 22, 133, 190, 192, 55, 19, 190, 252, 30, 4, 62, 30, 244, 4, 190, 210, 198, 58, 61, 99, 176, 193, 62, 200, 69, 78, 191, 239, 174, 120, 62, 11, 38, 22, 191, 241, 202, 129, 190, 75, 170, 170, 189, 70, 85, 15, 62, 121, 220, 10, 191, 144, 193, 239, 61, 2, 219, 75, 62, 238, 226, 180, 189, 142, 109, 85, 191, 44, 25, 11, 191, 80, 178, 21, 61, 143, 223, 134, 190, 201, 214, 159, 190, 46, 73, 32, 189, 0, 33, 232, 186, 218, 82, 43, 62, 163, 59, 36, 62, 194, 202, 156, 190, 218, 34, 103, 189, 113, 20, 0, 62, 252, 251, 145, 190, 14, 245, 191, 189, 253, 127, 194, 61, 33, 11, 155, 188, 197, 223, 190, 61, 44, 183, 18, 62, 154, 219, 87, 61, 122, 107, 34, 188, 150, 170, 219, 190, 180, 104, 181, 62, 94, 157, 48, 61, 237, 112, 99, 188, 55, 221, 24, 190, 140, 116, 215, 190, 230, 107, 248, 188, 80, 112, 131, 187, 234, 119, 217, 190, 2, 106, 120, 189, 55, 119, 16, 62, 232, 107, 138, 189, 169, 172, 170, 190, 58, 231, 84, 62, 83, 158, 50, 190, 72, 182, 71, 190, 28, 215, 86, 190, 94, 150, 48, 191, 37, 0, 16, 190, 182, 170, 66, 62, 54, 248, 0, 62, 205, 97, 157, 190, 38, 136, 125, 189, 182, 51, 232, 189, 38, 59, 192, 189, 162, 106, 149, 61, 98, 216, 120, 189, 171, 70, 202, 61, 204, 180, 200, 190, 229, 86, 98, 60, 106, 63, 74, 61, 195, 44, 85, 62, 248, 168, 53, 190, 152, 117, 237, 61, 159, 106, 253, 190, 171, 15, 172, 62, 128, 28, 154, 190, 168, 7, 47, 62, 45, 39, 18, 61, 91, 22, 180, 62, 138, 138, 226, 190, 14, 219, 199, 189, 0, 17, 150, 62, 225, 50, 153, 60, 197, 83, 199, 190, 190, 203, 168, 190, 92, 57, 70, 190, 82, 97, 180, 61, 122, 243, 166, 189, 234, 186, 177, 189, 21, 101, 130, 191, 203, 45, 138, 61, 114, 31, 30, 61, 21, 129, 135, 189, 164, 191, 162, 62, 28, 18, 101, 191, 176, 59, 93, 61, 223, 159, 72, 190, 67, 150, 232, 61, 240, 100, 181, 61, 46, 95, 56, 61, 35, 54, 87, 61, 183, 221, 123, 190, 14, 251, 23, 62, 126, 115, 143, 62, 102, 65, 184, 61, 197, 27, 70, 62, 29, 211, 185, 62, 57, 160, 37, 62, 135, 168, 5, 190, 142, 233, 100, 189, 195, 120, 116, 62, 236, 137, 145, 61, 194, 207, 15, 62, 70, 111, 147, 62, 72, 4, 182, 61, 78, 208, 18, 190, 98, 172, 143, 189, 221, 197, 96, 61, 172, 30, 153, 189, 90, 71, 154, 191, 85, 121, 246, 190, 125, 39, 44, 190, 52, 1, 216, 189, 98, 45, 110, 62, 233, 36, 167, 62, 92, 241, 173, 62, 27, 91, 163, 190, 169, 38, 25, 190, 201, 99, 146, 62, 30, 202, 128, 189, 244, 5, 190, 189, 185, 165, 251, 61, 180, 179, 56, 62, 246, 161, 45, 62, 22, 107, 51, 62, 204, 169, 182, 190, 72, 7, 75, 62, 169, 117, 25, 191, 117, 117, 25, 62, 224, 82, 83, 191, 42, 253, 60, 62, 138, 6, 157, 61, 214, 201, 21, 62, 2, 92, 212, 190, 236, 17, 31, 63, 183, 191, 22, 62, 187, 203, 30, 61, 6, 159, 36, 191, 16, 57, 135, 62, 0, 158, 206, 61, 103, 146, 82, 62, 146, 247, 75, 62, 15, 187, 65, 61, 255, 127, 25, 61, 1, 4, 189, 62, 121, 246, 62, 190, 219, 156, 220, 189, 152, 160, 70, 62, 75, 203, 58, 190, 0, 6, 169, 190, 213, 202, 107, 191, 20, 4, 93, 190, 1, 137, 227, 189, 97, 171, 96, 62, 83, 134, 174, 189, 84, 214, 182, 62, 73, 183, 80, 62, 107, 124, 181, 61, 130, 104, 69, 61, 36, 117, 53, 62, 76, 225, 219, 62, 114, 93, 109, 189, 126, 10, 36, 190, 81, 142, 207, 190, 140, 240, 142, 60, 171, 37, 63, 62, 140, 232, 90, 189, 250, 137, 221, 62, 234, 142, 47, 61, 170, 19, 58, 191, 113, 149, 39, 191, 36, 40, 66, 62, 175, 79, 186, 189, 203, 133, 66, 62, 86, 163, 232, 188, 144, 173, 78, 62, 114, 254, 102, 189, 106, 72, 37, 62, 128, 242, 141, 62, 5, 116, 22, 62, 121, 5, 115, 189, 188, 95, 11, 190, 58, 194, 196, 189, 143, 35, 174, 189, 108, 107, 131, 62, 107, 133, 77, 190, 83, 95, 66, 62, 0, 185, 103, 62, 90, 96, 129, 61, 167, 5, 121, 62, 237, 246, 247, 189, 88, 103, 134, 61, 240, 154, 23, 60, 136, 216, 8, 61, 174, 198, 132, 189, 189, 186, 85, 62, 0, 192, 138, 60, 69, 123, 40, 62, 215, 27, 96, 190, 10, 250, 188, 60, 21, 231, 182, 190, 6, 91, 224, 189, 161, 67, 204, 61, 3, 7, 16, 61, 3, 5, 123, 190, 130, 76, 41, 190, 63, 6, 7, 188, 109, 254, 40, 62, 235, 87, 1, 60, 30, 91, 128, 61, 36, 60, 132, 60, 20, 221, 138, 190, 193, 254, 33, 61, 202, 37, 118, 61, 173, 84, 193, 189, 225, 132, 128, 189, 149, 95, 237, 189, 208, 71, 116, 189, 92, 123, 137, 189, 165, 252, 161, 188, 71, 54, 60, 190, 18, 193, 207, 62, 9, 53, 8, 62, 62, 115, 172, 59, 180, 4, 35, 61, 164, 190, 216, 60, 7, 235, 68, 62, 151, 50, 154, 61, 58, 180, 88, 190, 91, 44, 252, 61, 49, 225, 73, 61, 113, 47, 77, 190, 201, 156, 36, 190, 175, 123, 179, 190, 93, 8, 214, 61, 131, 7, 103, 59, 169, 62, 139, 189, 148, 104, 8, 191, 153, 209, 108, 190, 246, 228, 136, 190, 74, 254, 141, 61, 54, 63, 127, 62, 89, 121, 37, 62, 31, 50, 142, 190, 50, 124, 192, 190, 111, 206, 86, 190, 43, 199, 168, 62, 152, 24, 212, 189, 118, 7, 169, 189, 177, 138, 105, 190, 101, 187, 81, 189, 68, 103, 190, 189, 61, 120, 250, 59, 14, 125, 172, 190, 27, 12, 7, 191, 239, 174, 136, 190, 194, 43, 107, 188, 31, 68, 220, 190, 89, 166, 83, 62, 159, 107, 87, 62, 130, 50, 177, 62, 107, 225, 200, 190, 233, 108, 104, 190, 37, 106, 67, 62, 153, 115, 229, 62, 170, 137, 67, 191, 240, 242, 209, 62, 191, 110, 14, 191, 238, 73, 217, 62, 50, 230, 174, 188, 62, 51, 83, 190, 52, 222, 73, 187, 206, 183, 69, 191, 39, 153, 10, 61, 186, 120, 146, 189, 128, 144, 133, 61, 128, 47, 7, 61, 248, 165, 140, 189, 159, 224, 36, 190, 104, 185, 232, 190, 111, 23, 147, 62, 101, 48, 42, 190, 82, 216, 167, 62, 218, 230, 31, 191, 92, 61, 75, 62, 159, 15, 214, 60, 103, 27, 115, 61, 157, 61, 250, 189, 58, 108, 204, 190, 252, 49, 210, 61, 5, 219, 38, 61, 146, 14, 232, 190, 90, 160, 237, 62, 148, 186, 39, 62, 0, 11, 110, 60, 149, 106, 103, 61, 108, 235, 212, 189, 92, 101, 44, 61, 222, 44, 95, 190, 39, 175, 15, 62, 232, 8, 67, 190, 210, 141, 35, 190, 164, 156, 169, 62, 126, 160, 33, 61, 102, 209, 133, 62, 191, 194, 62, 62, 55, 60, 143, 62, 204, 46, 176, 189, 108, 125, 123, 190, 178, 134, 140, 189, 175, 57, 70, 62, 191, 177, 105, 189, 125, 70, 60, 190, 116, 155, 103, 62, 37, 215, 51, 189, 178, 149, 107, 61, 189, 136, 142, 190, 214, 189, 122, 189, 234, 23, 20, 62, 47, 235, 82, 62, 58, 100, 74, 190, 181, 30, 103, 190, 96, 35, 229, 61, 168, 100, 48, 61, 73, 111, 195, 189, 151, 95, 52, 190, 52, 214, 250, 61, 240, 11, 22, 189, 148, 253, 148, 62, 56, 255, 191, 190, 76, 77, 32, 62, 12, 37, 69, 61, 68, 94, 108, 62, 108, 206, 37, 60, 250, 25, 55, 190, 25, 184, 19, 191, 196, 15, 160, 191, 212, 116, 144, 62, 76, 162, 11, 62, 4, 124, 158, 62, 163, 75, 156, 189, 20, 103, 6, 191, 137, 193, 78, 62, 81, 20, 24, 190, 178, 145, 149, 62, 200, 166, 178, 60, 127, 101, 242, 61, 203, 140, 134, 191, 230, 6, 43, 62, 49, 208, 149, 190, 161, 134, 185, 60, 183, 74, 116, 189, 222, 206, 11, 191, 0, 241, 247, 61, 162, 209, 250, 189, 71, 152, 11, 190, 224, 155, 227, 62, 168, 185, 107, 61, 49, 25, 231, 190, 17, 67, 91, 62, 191, 229, 16, 190, 19, 253, 84, 190, 35, 22, 87, 191, 209, 68, 169, 61, 125, 24, 84, 61, 204, 99, 46, 191, 26, 48, 46, 190, 65, 218, 133, 189, 165, 223, 156, 190, 240, 239, 9, 62, 81, 240, 14, 62, 30, 197, 11, 190, 235, 14, 118, 190, 190, 37, 194, 190, 79, 20, 127, 62, 69, 33, 142, 189, 28, 36, 84, 189, 122, 86, 124, 61, 41, 178, 192, 61, 78, 109, 217, 61, 6, 84, 249, 61, 79, 113, 88, 190, 118, 110, 88, 190, 52, 14, 108, 190, 32, 94, 50, 61, 154, 40, 90, 191, 207, 139, 98, 188, 253, 149, 89, 62, 142, 6, 32, 62, 160, 134, 75, 191, 119, 123, 156, 190, 147, 116, 145, 189, 1, 194, 45, 62, 248, 95, 17, 191, 175, 231, 156, 62, 20, 136, 5, 190, 216, 37, 1, 190, 209, 65, 196, 61, 216, 211, 128, 190, 205, 120, 163, 62, 157, 251, 159, 191, 18, 214, 69, 59, 211, 104, 169, 61, 102, 70, 84, 189, 52, 113, 42, 62, 235, 81, 179, 189, 158, 8, 64, 190, 169, 239, 55, 190, 195, 200, 95, 62, 249, 112, 69, 61, 11, 223, 165, 189, 53, 116, 2, 189, 89, 190, 15, 189, 175, 103, 230, 62, 170, 253, 68, 190, 158, 223, 70, 190, 43, 150, 173, 189, 234, 132, 209, 61, 238, 194, 255, 189, 251, 118, 47, 190, 87, 63, 236, 189, 9, 135, 162, 62, 57, 152, 123, 189, 112, 69, 44, 191, 210, 101, 156, 190, 61, 177, 23, 61, 15, 87, 63, 188, 54, 33, 146, 61, 163, 43, 34, 188, 201, 212, 62, 190, 96, 182, 115, 62, 24, 125, 3, 190, 195, 60, 77, 62, 28, 145, 149, 61, 47, 119, 103, 62, 195, 241, 75, 190, 135, 127, 168, 190, 83, 76, 163, 190, 201, 183, 94, 62, 132, 217, 20, 62, 68, 169, 188, 189, 5, 7, 178, 62, 178, 106, 220, 188, 16, 248, 182, 189, 236, 215, 49, 190, 77, 77, 84, 189, 68, 162, 128, 61, 86, 109, 85, 62, 122, 91, 3, 61, 97, 70, 47, 190, 136, 101, 153, 61, 135, 234, 128, 62, 136, 221, 32, 189, 241, 194, 178, 189, 53, 24, 150, 61, 33, 3, 131, 189, 142, 136, 180, 62, 172, 26, 60, 191, 46, 98, 49, 188, 144, 228, 53, 189, 234, 234, 101, 62, 17, 109, 81, 191, 123, 208, 163, 190, 220, 192, 6, 190, 246, 26, 139, 189, 220, 158, 128, 61, 242, 201, 52, 189, 222, 201, 143, 190, 7, 238, 81, 190, 166, 102, 221, 188, 40, 177, 122, 188, 214, 98, 153, 61, 36, 66, 57, 188, 203, 242, 41, 190, 120, 231, 69, 59, 60, 109, 251, 61, 112, 84, 32, 60, 112, 133, 198, 190, 207, 242, 98, 189, 147, 54, 149, 188, 42, 95, 205, 189, 246, 86, 27, 191, 122, 62, 128, 190, 172, 151, 52, 62, 147, 17, 128, 62, 234, 214, 57, 191, 177, 228, 1, 191, 111, 8, 203, 61, 241, 41, 228, 188, 55, 176, 177, 190, 164, 142, 128, 62, 101, 52, 211, 190, 121, 48, 161, 190, 49, 79, 176, 61, 71, 2, 59, 190, 185, 253, 5, 190, 136, 21, 216, 189, 188, 226, 213, 61, 222, 47, 153, 60, 178, 221, 212, 189, 227, 26, 140, 60, 134, 90, 187, 59, 171, 115, 153, 189, 183, 85, 50, 190, 20, 216, 129, 60, 84, 52, 48, 190, 191, 168, 58, 190, 26, 8, 41, 188, 252, 80, 132, 59, 141, 157, 17, 61, 249, 5, 26, 190, 68, 124, 67, 186, 36, 171, 167, 60, 240, 92, 214, 189, 16, 91, 13, 62, 6, 222, 50, 188, 213, 28, 1, 62, 248, 225, 43, 188, 184, 176, 180, 61, 46, 120, 112, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 29, 15, 74, 189, 238, 209, 15, 190, 114, 103, 218, 60, 247, 217, 68, 62, 219, 172, 21, 190, 29, 110, 3, 190, 136, 186, 90, 190, 118, 118, 176, 62, 25, 249, 109, 190, 2, 204, 233, 189, 144, 99, 27, 190, 230, 177, 34, 190, 63, 152, 49, 190, 135, 119, 157, 190, 168, 54, 167, 62, 155, 183, 189, 189, 36, 89, 205, 189, 104, 108, 188, 190, 213, 15, 71, 62, 151, 195, 63, 59, 235, 188, 83, 189, 52, 73, 167, 190, 110, 68, 26, 190, 114, 60, 181, 187, 44, 202, 30, 62, 140, 45, 179, 190, 181, 211, 255, 187, 231, 185, 162, 62, 224, 54, 101, 190, 189, 78, 8, 189, 219, 151, 75, 191, 175, 226, 122, 62, 168, 134, 77, 190, 245, 73, 28, 62, 236, 15, 62, 190, 157, 135, 190, 61, 54, 209, 12, 189, 66, 57, 66, 190, 59, 170, 2, 188, 149, 61, 23, 189, 189, 243, 125, 191, 120, 135, 87, 62, 179, 128, 29, 63, 190, 159, 119, 188, 60, 179, 248, 188, 163, 95, 157, 190, 200, 115, 14, 189, 49, 185, 192, 190, 180, 182, 216, 61, 40, 179, 19, 191, 206, 1, 22, 62, 230, 6, 134, 62, 191, 101, 41, 190, 25, 86, 5, 62, 204, 25, 105, 189, 215, 133, 8, 60, 215, 20, 207, 60, 113, 196, 144, 190, 246, 182, 226, 60, 114, 94, 203, 62, 128, 138, 138, 190, 83, 52, 210, 189, 83, 54, 199, 62, 96, 105, 135, 189, 174, 219, 205, 58, 119, 209, 58, 62, 85, 154, 129, 59, 115, 153, 213, 59, 181, 161, 138, 189, 127, 185, 147, 61, 59, 136, 20, 189, 61, 225, 4, 189, 6, 161, 143, 189, 185, 235, 198, 189, 208, 38, 16, 190, 244, 244, 82, 189, 182, 52, 20, 62, 48, 161, 175, 189, 196, 116, 205, 60, 130, 46, 156, 61, 14, 84, 79, 189, 199, 133, 101, 189, 250, 119, 17, 190, 147, 69, 83, 61, 88, 160, 213, 58, 241, 84, 17, 62, 12, 126, 60, 61, 48, 195, 14, 190, 246, 123, 67, 190, 177, 137, 2, 189, 108, 192, 28, 189, 83, 234, 174, 189, 203, 71, 47, 189, 77, 239, 170, 58, 195, 124, 152, 187, 97, 236, 63, 60, 50, 98, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 233, 104, 189, 38, 8, 113, 62, 83, 181, 91, 190, 10, 145, 202, 58, 154, 169, 140, 62, 224, 145, 52, 190, 145, 87, 181, 189, 214, 10, 141, 61, 182, 128, 171, 62, 157, 230, 109, 62, 131, 26, 182, 189, 109, 11, 55, 62, 3, 241, 1, 62, 141, 0, 88, 62, 245, 8, 76, 187, 161, 187, 169, 189, 212, 249, 209, 60, 28, 213, 32, 190, 170, 49, 232, 60, 4, 14, 104, 62, 106, 83, 200, 61, 10, 186, 166, 61, 183, 162, 110, 189, 193, 25, 219, 61, 174, 116, 117, 61, 194, 246, 98, 62, 74, 98, 251, 188, 71, 248, 212, 61, 62, 237, 140, 189, 220, 157, 221, 61, 106, 93, 44, 190, 251, 48, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 122, 216, 190, 64, 64, 171, 190, 187, 74, 55, 63, 82, 112, 4, 63, 10, 202, 67, 61, 160, 211, 208, 61, 101, 176, 28, 63, 65, 132, 6, 191, 151, 57, 175, 187, 135, 164, 151, 61, 114, 137, 201, 190, 156, 237, 177, 189, 52, 251, 21, 191, 199, 248, 14, 190, 32, 7, 115, 190, 238, 44, 72, 190, 120, 249, 10, 191, 129, 60, 73, 190, 93, 131, 204, 61, 101, 169, 201, 60, 126, 81, 186, 190, 162, 1, 172, 62, 43, 198, 19, 190, 232, 229, 131, 63, 247, 232, 0, 191, 84, 59, 147, 62, 248, 9, 183, 190, 213, 254, 12, 190, 229, 201, 8, 62, 208, 59, 223, 189, 119, 6, 168, 190, 10, 60, 49, 189, 189, 55, 0, 63, 48, 137, 11, 62, 192, 196, 162, 62, 75, 185, 140, 62, 89, 239, 124, 190, 143, 193, 210, 61, 68, 203, 54, 61, 187, 12, 146, 189, 29, 193, 182, 190, 80, 79, 136, 190, 75, 17, 185, 189, 161, 52, 103, 190, 214, 154, 37, 188, 154, 153, 221, 189, 129, 250, 193, 60, 85, 44, 241, 189, 121, 230, 48, 62, 142, 121, 74, 61, 68, 197, 108, 190, 235, 233, 95, 190, 52, 248, 20, 63, 5, 39, 135, 62, 182, 22, 139, 61, 78, 49, 120, 61, 104, 82, 136, 61, 9, 88, 161, 188, 93, 27, 23, 62, 7, 108, 208, 189, 97, 136, 92, 189, 169, 30, 196, 190, 20, 198, 227, 62, 212, 74, 192, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 152, 28, 62, 14, 136, 180, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 197, 20, 191, 169, 125, 166, 62, 78, 57, 188, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 138, 132, 63, 8, 177, 226, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}