// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 115, 9, 191, 8, 37, 73, 62, 199, 85, 51, 63, 10, 236, 85, 62, 186, 216, 226, 190, 110, 239, 191, 62, 44, 110, 15, 63, 231, 191, 121, 191, 204, 250, 248, 190, 213, 12, 138, 190, 62, 110, 216, 191, 160, 132, 178, 190, 124, 130, 22, 191, 230, 137, 184, 189, 102, 222, 125, 190, 176, 92, 31, 63, 5, 188, 181, 189, 59, 133, 93, 61, 228, 149, 59, 191, 130, 192, 23, 191, 24, 47, 206, 61, 47, 118, 11, 63, 3, 32, 90, 191, 116, 169, 13, 191, 145, 9, 235, 62, 212, 223, 137, 188, 180, 36, 136, 190, 53, 175, 138, 190, 85, 89, 97, 63, 157, 200, 175, 190, 219, 21, 195, 62, 135, 223, 88, 62, 109, 143, 222, 190, 30, 187, 198, 190, 22, 44, 116, 63, 11, 108, 11, 62, 10, 123, 177, 62, 49, 103, 200, 190, 204, 123, 11, 63, 155, 128, 49, 191, 134, 151, 172, 62, 39, 156, 60, 60, 219, 2, 145, 62, 187, 228, 141, 191, 211, 2, 153, 190, 135, 233, 130, 191, 252, 120, 101, 190, 230, 122, 98, 61, 210, 228, 224, 62, 137, 76, 93, 191, 57, 29, 170, 62, 108, 216, 12, 62, 45, 131, 159, 191, 100, 58, 248, 61, 212, 69, 139, 190, 77, 189, 17, 191, 80, 57, 228, 62, 119, 230, 123, 62, 107, 21, 209, 191, 127, 70, 176, 190, 211, 165, 0, 191, 105, 229, 54, 190, 176, 228, 0, 63, 142, 179, 253, 62, 229, 102, 171, 63, 88, 4, 133, 62, 138, 249, 217, 62, 246, 215, 203, 62, 162, 50, 179, 190, 159, 12, 139, 191, 81, 88, 215, 61, 144, 43, 125, 60, 162, 123, 37, 62, 12, 43, 186, 190, 174, 60, 94, 62, 49, 172, 113, 60, 44, 84, 34, 191, 178, 164, 168, 62, 138, 124, 4, 191, 191, 170, 89, 191, 107, 64, 51, 190, 126, 255, 91, 63, 79, 89, 104, 63, 56, 140, 202, 62, 85, 145, 61, 63, 136, 227, 5, 191, 33, 63, 106, 190, 172, 111, 32, 63, 183, 254, 239, 62, 111, 149, 68, 189, 42, 86, 33, 191, 130, 168, 30, 191, 62, 59, 172, 62, 34, 247, 66, 63, 186, 54, 142, 63, 232, 193, 237, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 175, 25, 190, 194, 229, 136, 190, 2, 201, 237, 189, 100, 37, 60, 190, 247, 244, 190, 61, 88, 117, 148, 62, 175, 197, 157, 62, 36, 185, 48, 190, 10, 127, 137, 191, 12, 232, 80, 189, 161, 36, 14, 62, 198, 215, 145, 62, 183, 212, 50, 191, 175, 11, 48, 63, 132, 45, 12, 62, 22, 230, 201, 62, 147, 63, 19, 63, 92, 92, 198, 62, 74, 218, 225, 190, 181, 27, 113, 62, 58, 150, 211, 189, 164, 239, 11, 190, 143, 96, 173, 62, 10, 211, 181, 61, 203, 36, 195, 62, 221, 125, 108, 62, 225, 207, 132, 62, 155, 110, 140, 191, 117, 174, 10, 191, 14, 194, 254, 62, 139, 149, 50, 189, 108, 169, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 93, 188, 189, 255, 125, 142, 188, 97, 126, 8, 190, 57, 165, 32, 189, 198, 209, 105, 189, 92, 138, 233, 61, 4, 43, 132, 190, 68, 218, 217, 189, 205, 38, 167, 59, 59, 173, 50, 190, 59, 29, 185, 189, 227, 112, 246, 190, 1, 74, 105, 62, 199, 142, 199, 190, 179, 2, 84, 191, 56, 70, 145, 190, 241, 139, 131, 61, 17, 62, 158, 61, 134, 127, 106, 189, 132, 236, 140, 191, 117, 111, 60, 62, 172, 6, 86, 62, 117, 77, 27, 61, 210, 51, 39, 191, 52, 163, 39, 61, 7, 33, 86, 190, 112, 103, 120, 190, 226, 80, 209, 62, 73, 212, 218, 190, 82, 162, 186, 61, 98, 170, 22, 190, 212, 158, 195, 62, 199, 142, 19, 191, 214, 140, 136, 62, 230, 105, 139, 190, 126, 173, 60, 62, 56, 205, 6, 62, 178, 149, 97, 62, 249, 227, 28, 190, 152, 186, 3, 190, 112, 201, 212, 190, 162, 210, 117, 62, 12, 151, 167, 189, 47, 236, 28, 190, 127, 102, 95, 62, 123, 172, 241, 188, 102, 207, 20, 190, 198, 12, 70, 189, 135, 163, 158, 61, 15, 232, 236, 62, 57, 39, 247, 189, 33, 39, 99, 188, 111, 35, 2, 191, 144, 171, 63, 62, 150, 148, 240, 61, 201, 22, 211, 61, 45, 104, 207, 189, 1, 217, 229, 62, 240, 78, 42, 190, 178, 173, 181, 58, 247, 47, 137, 191, 76, 200, 139, 61, 80, 12, 99, 190, 1, 227, 57, 58, 143, 228, 66, 188, 214, 14, 35, 61, 25, 249, 130, 189, 80, 55, 149, 190, 74, 158, 192, 190, 20, 156, 6, 61, 176, 141, 211, 60, 127, 137, 232, 60, 54, 207, 98, 62, 99, 208, 131, 189, 143, 38, 85, 190, 12, 222, 12, 191, 67, 76, 228, 190, 241, 141, 28, 190, 118, 172, 36, 62, 80, 206, 194, 188, 136, 106, 104, 62, 61, 184, 218, 62, 96, 217, 137, 189, 115, 208, 183, 60, 138, 13, 66, 62, 189, 7, 94, 191, 77, 160, 169, 57, 246, 9, 107, 62, 91, 246, 106, 61, 134, 61, 19, 61, 236, 185, 29, 191, 179, 25, 156, 191, 49, 65, 148, 62, 64, 73, 61, 62, 152, 190, 216, 62, 200, 184, 48, 191, 30, 57, 141, 190, 141, 143, 16, 190, 222, 71, 52, 62, 233, 238, 149, 190, 25, 0, 35, 190, 194, 199, 72, 61, 242, 73, 251, 190, 101, 2, 180, 62, 181, 98, 21, 63, 159, 8, 18, 62, 176, 234, 1, 62, 139, 131, 142, 190, 59, 161, 253, 188, 118, 52, 70, 190, 196, 109, 109, 62, 60, 141, 38, 191, 48, 186, 66, 190, 53, 206, 151, 62, 173, 93, 102, 61, 222, 120, 18, 62, 178, 55, 63, 190, 42, 98, 132, 190, 156, 248, 66, 189, 122, 129, 211, 190, 162, 80, 148, 61, 209, 84, 149, 190, 88, 234, 162, 190, 143, 216, 94, 190, 18, 120, 51, 63, 152, 126, 110, 62, 53, 152, 61, 189, 185, 17, 115, 190, 55, 117, 19, 190, 122, 240, 31, 188, 254, 37, 9, 189, 40, 145, 146, 190, 148, 200, 147, 61, 165, 170, 32, 62, 70, 230, 2, 62, 58, 39, 39, 189, 88, 129, 77, 62, 123, 111, 190, 61, 217, 156, 23, 62, 65, 191, 140, 189, 241, 163, 53, 190, 250, 74, 20, 62, 121, 4, 225, 189, 201, 8, 206, 189, 103, 192, 207, 61, 5, 101, 213, 61, 6, 126, 253, 189, 124, 141, 211, 188, 90, 3, 0, 190, 175, 68, 224, 189, 183, 66, 86, 62, 190, 29, 148, 62, 151, 143, 132, 189, 57, 156, 12, 59, 82, 147, 57, 61, 167, 203, 9, 191, 210, 207, 201, 190, 81, 29, 228, 189, 206, 15, 59, 61, 72, 183, 19, 190, 121, 87, 13, 62, 143, 15, 21, 189, 161, 184, 8, 62, 87, 40, 97, 60, 59, 174, 199, 61, 188, 165, 233, 189, 81, 200, 193, 61, 219, 194, 48, 190, 16, 242, 128, 61, 68, 207, 15, 60, 173, 145, 198, 189, 57, 43, 57, 189, 238, 177, 15, 62, 93, 196, 189, 189, 98, 190, 216, 61, 14, 26, 145, 188, 237, 159, 39, 190, 248, 226, 16, 190, 47, 105, 213, 189, 32, 100, 86, 189, 128, 199, 148, 189, 173, 138, 214, 61, 3, 15, 209, 60, 128, 50, 67, 61, 223, 180, 22, 62, 128, 157, 217, 188, 22, 140, 184, 189, 214, 190, 201, 189, 176, 21, 37, 62, 106, 220, 170, 189, 48, 106, 44, 60, 139, 187, 14, 190, 69, 40, 172, 189, 39, 244, 34, 190, 211, 17, 138, 62, 88, 190, 174, 190, 180, 182, 128, 187, 105, 22, 147, 61, 124, 240, 102, 62, 113, 91, 172, 62, 221, 139, 228, 62, 143, 58, 128, 190, 75, 219, 88, 61, 29, 44, 18, 191, 238, 84, 196, 190, 23, 135, 130, 189, 127, 76, 48, 62, 88, 214, 229, 188, 152, 69, 249, 62, 86, 183, 164, 62, 42, 237, 119, 60, 219, 115, 11, 62, 57, 133, 91, 62, 92, 10, 25, 191, 35, 58, 69, 62, 165, 149, 232, 189, 133, 63, 66, 62, 175, 165, 9, 188, 142, 82, 195, 189, 63, 235, 143, 191, 141, 54, 178, 62, 34, 30, 24, 62, 16, 28, 81, 62, 17, 128, 89, 191, 251, 63, 138, 190, 232, 30, 145, 190, 98, 146, 158, 190, 234, 96, 77, 190, 200, 66, 64, 189, 173, 57, 144, 62, 169, 152, 33, 191, 157, 10, 76, 189, 125, 135, 34, 190, 12, 118, 173, 62, 37, 208, 244, 61, 206, 154, 97, 61, 251, 177, 143, 189, 106, 58, 5, 189, 186, 0, 236, 189, 12, 189, 9, 191, 58, 119, 207, 62, 46, 65, 212, 62, 254, 146, 124, 190, 40, 114, 139, 191, 109, 245, 139, 61, 244, 143, 144, 61, 172, 64, 103, 188, 252, 3, 222, 190, 32, 120, 131, 60, 6, 56, 0, 190, 226, 194, 201, 189, 204, 63, 107, 190, 231, 142, 85, 191, 112, 58, 196, 62, 0, 11, 3, 190, 5, 34, 34, 62, 223, 68, 120, 188, 38, 218, 215, 61, 252, 251, 192, 189, 179, 102, 168, 187, 145, 1, 38, 61, 216, 190, 225, 61, 124, 81, 155, 62, 247, 77, 52, 61, 140, 168, 163, 188, 211, 129, 255, 61, 197, 213, 109, 62, 96, 5, 230, 61, 202, 252, 176, 61, 123, 57, 46, 62, 207, 124, 51, 62, 43, 97, 50, 62, 132, 118, 21, 190, 18, 85, 190, 189, 169, 80, 25, 62, 180, 214, 200, 189, 59, 224, 163, 189, 160, 129, 169, 62, 107, 255, 141, 61, 245, 129, 203, 61, 101, 81, 12, 188, 24, 234, 55, 62, 124, 38, 202, 60, 57, 71, 42, 61, 207, 217, 218, 190, 238, 196, 129, 62, 158, 158, 129, 190, 111, 237, 139, 62, 96, 159, 213, 189, 134, 66, 67, 189, 129, 250, 44, 62, 207, 159, 62, 190, 202, 138, 32, 62, 213, 212, 70, 189, 82, 40, 157, 189, 56, 54, 91, 62, 23, 100, 131, 61, 140, 205, 24, 190, 221, 250, 27, 61, 85, 45, 173, 61, 38, 219, 235, 188, 122, 151, 168, 62, 28, 164, 46, 60, 206, 102, 88, 62, 215, 170, 163, 62, 31, 53, 16, 190, 67, 105, 12, 190, 110, 29, 150, 189, 159, 90, 98, 62, 8, 145, 233, 61, 150, 189, 142, 61, 254, 119, 138, 61, 26, 25, 46, 61, 150, 36, 22, 61, 44, 234, 187, 189, 81, 173, 132, 189, 151, 122, 30, 190, 18, 230, 248, 61, 103, 63, 13, 62, 179, 216, 136, 190, 124, 115, 108, 61, 76, 150, 37, 191, 51, 146, 225, 61, 14, 125, 193, 190, 54, 158, 107, 190, 116, 212, 134, 62, 88, 226, 48, 190, 210, 153, 239, 189, 63, 168, 226, 190, 208, 142, 243, 61, 243, 112, 104, 62, 195, 14, 151, 61, 16, 71, 120, 190, 238, 80, 98, 188, 53, 0, 9, 61, 157, 97, 148, 189, 174, 60, 145, 61, 213, 142, 169, 190, 141, 3, 48, 190, 67, 97, 124, 191, 221, 13, 62, 189, 42, 103, 4, 59, 134, 250, 128, 62, 195, 82, 233, 190, 158, 33, 206, 189, 48, 64, 38, 62, 229, 13, 74, 191, 189, 117, 17, 60, 135, 22, 239, 190, 118, 241, 166, 62, 174, 30, 38, 191, 109, 50, 35, 62, 105, 147, 12, 190, 43, 248, 171, 62, 58, 43, 9, 190, 243, 143, 189, 60, 228, 2, 241, 61, 197, 6, 157, 62, 46, 220, 68, 191, 59, 229, 164, 60, 124, 16, 138, 190, 187, 198, 145, 60, 42, 134, 204, 61, 163, 187, 90, 190, 144, 232, 141, 62, 5, 3, 92, 190, 7, 93, 147, 62, 227, 247, 141, 190, 223, 10, 29, 188, 47, 54, 132, 62, 79, 241, 33, 189, 242, 18, 221, 61, 136, 134, 147, 189, 71, 114, 68, 189, 105, 217, 181, 61, 124, 34, 188, 190, 25, 218, 152, 190, 69, 104, 0, 63, 207, 101, 249, 61, 231, 24, 75, 190, 202, 41, 76, 190, 20, 60, 130, 189, 243, 242, 43, 191, 179, 16, 134, 189, 53, 161, 62, 191, 155, 233, 14, 191, 240, 111, 156, 189, 168, 165, 100, 62, 48, 218, 184, 61, 137, 211, 53, 191, 7, 66, 21, 62, 66, 177, 188, 189, 122, 157, 249, 59, 246, 36, 92, 190, 39, 106, 155, 190, 191, 254, 37, 191, 198, 224, 106, 190, 70, 151, 156, 190, 73, 44, 44, 62, 57, 186, 83, 190, 253, 121, 44, 190, 96, 246, 9, 63, 3, 86, 161, 191, 188, 201, 146, 62, 168, 238, 102, 191, 241, 202, 129, 190, 19, 15, 64, 190, 50, 39, 36, 190, 219, 126, 22, 191, 111, 204, 105, 62, 201, 132, 58, 62, 238, 226, 180, 189, 180, 195, 47, 191, 209, 41, 168, 191, 159, 171, 155, 62, 143, 223, 134, 190, 255, 113, 68, 191, 82, 180, 127, 190, 148, 136, 199, 61, 203, 15, 147, 62, 21, 37, 182, 61, 251, 249, 192, 190, 73, 255, 180, 189, 75, 101, 65, 62, 250, 153, 16, 191, 26, 100, 52, 190, 87, 63, 172, 61, 40, 233, 213, 189, 77, 163, 242, 61, 163, 156, 124, 59, 63, 131, 66, 62, 63, 192, 227, 189, 52, 55, 31, 191, 61, 45, 45, 63, 124, 57, 183, 190, 138, 69, 207, 61, 137, 118, 223, 190, 203, 247, 9, 191, 196, 16, 132, 189, 28, 154, 94, 190, 30, 157, 11, 191, 69, 57, 244, 61, 232, 100, 3, 62, 232, 107, 138, 189, 179, 122, 85, 190, 137, 207, 18, 62, 172, 95, 207, 61, 66, 69, 166, 190, 43, 171, 251, 190, 92, 158, 130, 191, 27, 255, 145, 189, 209, 254, 105, 62, 164, 102, 255, 61, 123, 57, 56, 191, 19, 41, 105, 189, 104, 151, 104, 189, 21, 137, 61, 190, 95, 214, 136, 61, 212, 161, 14, 189, 245, 58, 236, 61, 204, 180, 200, 190, 214, 71, 255, 188, 36, 179, 221, 61, 195, 62, 55, 62, 15, 87, 248, 190, 234, 120, 141, 62, 26, 239, 129, 191, 64, 168, 199, 62, 193, 253, 35, 191, 42, 238, 254, 61, 207, 245, 51, 61, 81, 65, 89, 62, 163, 80, 17, 191, 77, 241, 48, 60, 5, 237, 153, 62, 225, 50, 153, 60, 53, 42, 195, 190, 39, 1, 222, 190, 219, 203, 163, 61, 166, 5, 140, 189, 210, 95, 110, 189, 165, 64, 192, 189, 22, 44, 67, 191, 212, 38, 71, 62, 124, 18, 56, 190, 77, 39, 214, 61, 85, 155, 163, 62, 161, 240, 89, 191, 176, 59, 93, 61, 54, 244, 144, 190, 23, 247, 68, 62, 8, 166, 142, 61, 220, 64, 135, 61, 101, 167, 220, 61, 135, 227, 31, 189, 91, 223, 242, 61, 235, 2, 219, 62, 246, 173, 105, 62, 44, 11, 46, 62, 233, 141, 245, 62, 101, 135, 57, 62, 214, 103, 176, 188, 13, 231, 89, 61, 111, 6, 204, 61, 132, 198, 84, 62, 141, 160, 77, 62, 236, 161, 170, 62, 134, 38, 237, 61, 14, 228, 71, 189, 13, 123, 49, 62, 111, 189, 149, 61, 218, 203, 239, 188, 81, 255, 169, 191, 40, 83, 78, 191, 234, 64, 58, 190, 160, 253, 75, 190, 88, 7, 24, 62, 59, 255, 170, 62, 201, 189, 108, 62, 56, 63, 183, 190, 214, 244, 190, 190, 219, 229, 137, 62, 229, 75, 196, 189, 67, 203, 33, 190, 14, 246, 183, 62, 51, 101, 1, 62, 15, 64, 196, 61, 36, 122, 109, 61, 220, 239, 167, 190, 235, 72, 151, 62, 23, 67, 147, 191, 253, 47, 51, 61, 186, 130, 143, 191, 56, 178, 73, 62, 94, 51, 58, 61, 201, 190, 49, 189, 186, 84, 190, 190, 170, 232, 60, 63, 242, 165, 197, 60, 63, 109, 196, 189, 8, 35, 109, 191, 1, 42, 141, 62, 22, 118, 148, 62, 213, 5, 120, 62, 249, 243, 78, 62, 216, 53, 223, 60, 129, 55, 157, 61, 176, 232, 224, 62, 67, 228, 23, 190, 50, 49, 139, 190, 224, 170, 109, 62, 130, 81, 34, 190, 190, 34, 247, 190, 189, 220, 96, 191, 169, 11, 131, 190, 153, 153, 197, 189, 115, 21, 74, 62, 30, 188, 253, 189, 50, 35, 182, 62, 11, 161, 80, 62, 165, 182, 30, 61, 197, 113, 39, 61, 125, 149, 38, 62, 143, 79, 222, 62, 22, 107, 129, 189, 72, 57, 73, 190, 2, 47, 245, 190, 108, 137, 3, 190, 154, 116, 53, 62, 82, 128, 115, 189, 161, 170, 253, 62, 164, 186, 254, 61, 76, 205, 77, 191, 241, 233, 89, 191, 1, 54, 89, 62, 207, 135, 20, 190, 147, 183, 68, 62, 79, 221, 75, 188, 8, 218, 24, 62, 45, 102, 246, 189, 144, 139, 76, 62, 79, 223, 114, 62, 40, 98, 25, 62, 174, 36, 173, 189, 245, 243, 194, 61, 108, 206, 44, 189, 252, 38, 147, 189, 187, 249, 177, 62, 220, 173, 90, 190, 176, 48, 131, 62, 58, 121, 63, 62, 250, 144, 215, 61, 244, 204, 75, 62, 199, 13, 69, 190, 157, 235, 98, 61, 30, 213, 11, 188, 17, 236, 34, 61, 64, 2, 171, 189, 165, 105, 103, 62, 97, 170, 0, 62, 10, 43, 223, 61, 125, 141, 101, 190, 120, 168, 170, 60, 83, 103, 194, 190, 102, 6, 20, 188, 51, 137, 221, 61, 52, 158, 73, 60, 116, 142, 112, 190, 101, 164, 84, 190, 248, 129, 196, 188, 192, 202, 63, 62, 186, 166, 158, 60, 7, 144, 12, 62, 175, 208, 194, 189, 44, 48, 189, 190, 80, 185, 161, 61, 192, 238, 32, 62, 182, 26, 204, 187, 24, 8, 146, 189, 81, 14, 247, 189, 45, 213, 118, 189, 79, 86, 157, 189, 39, 167, 100, 188, 166, 152, 93, 190, 213, 108, 165, 62, 104, 12, 203, 61, 227, 188, 171, 189, 152, 157, 92, 61, 31, 74, 213, 188, 59, 79, 176, 61, 9, 13, 72, 61, 154, 217, 136, 190, 243, 236, 38, 61, 112, 205, 197, 60, 83, 250, 62, 190, 156, 212, 153, 190, 245, 191, 135, 190, 83, 12, 56, 61, 167, 197, 208, 189, 187, 41, 24, 190, 4, 212, 5, 191, 212, 236, 9, 62, 24, 157, 91, 190, 157, 219, 188, 61, 9, 144, 131, 62, 129, 153, 44, 62, 8, 232, 13, 191, 108, 166, 167, 190, 2, 195, 11, 191, 55, 91, 196, 62, 246, 246, 104, 189, 182, 155, 252, 188, 104, 90, 56, 62, 6, 92, 86, 188, 63, 115, 5, 190, 123, 100, 243, 60, 17, 203, 201, 190, 138, 95, 91, 191, 61, 69, 132, 190, 139, 80, 5, 190, 4, 209, 239, 190, 128, 51, 130, 62, 171, 50, 121, 62, 106, 206, 205, 62, 112, 231, 237, 190, 231, 93, 60, 191, 191, 218, 41, 62, 13, 93, 212, 62, 214, 57, 153, 191, 135, 121, 205, 62, 23, 137, 56, 191, 196, 145, 207, 62, 102, 223, 1, 189, 105, 76, 90, 190, 207, 174, 57, 190, 238, 198, 248, 190, 227, 119, 153, 62, 167, 34, 180, 189, 166, 41, 78, 62, 204, 246, 46, 62, 190, 219, 234, 189, 251, 228, 174, 189, 113, 101, 193, 190, 231, 130, 160, 62, 52, 18, 76, 190, 67, 111, 237, 62, 80, 254, 225, 190, 170, 156, 193, 62, 33, 30, 0, 61, 197, 252, 13, 62, 226, 220, 3, 190, 68, 241, 37, 190, 70, 215, 187, 61, 248, 82, 138, 61, 242, 159, 197, 190, 160, 230, 42, 63, 225, 164, 46, 62, 201, 181, 2, 61, 152, 79, 171, 62, 98, 145, 107, 190, 121, 149, 48, 189, 218, 193, 128, 190, 154, 227, 38, 62, 172, 25, 50, 190, 230, 231, 98, 190, 41, 62, 148, 62, 37, 68, 104, 61, 91, 4, 27, 63, 234, 124, 214, 61, 51, 16, 145, 62, 131, 98, 30, 59, 209, 25, 129, 190, 77, 201, 237, 190, 206, 231, 128, 62, 206, 90, 53, 189, 208, 118, 199, 190, 113, 53, 69, 62, 116, 95, 134, 189, 248, 252, 206, 59, 162, 199, 137, 190, 181, 81, 0, 189, 188, 187, 84, 62, 234, 16, 42, 62, 75, 171, 198, 190, 70, 111, 134, 190, 169, 149, 149, 61, 223, 168, 80, 61, 49, 194, 245, 190, 232, 151, 25, 190, 254, 85, 30, 62, 150, 34, 4, 62, 19, 181, 147, 62, 144, 15, 10, 191, 189, 196, 22, 62, 186, 177, 153, 61, 2, 104, 69, 62, 63, 143, 165, 189, 124, 80, 80, 190, 64, 36, 123, 191, 143, 201, 130, 191, 239, 2, 254, 62, 158, 179, 216, 61, 175, 121, 176, 62, 168, 61, 121, 190, 96, 141, 76, 191, 61, 160, 184, 62, 126, 31, 133, 188, 31, 252, 139, 62, 204, 237, 8, 61, 70, 70, 58, 62, 235, 85, 156, 191, 176, 194, 131, 62, 40, 78, 173, 190, 230, 40, 135, 61, 152, 83, 198, 189, 18, 159, 10, 191, 236, 47, 222, 60, 253, 11, 107, 190, 206, 145, 231, 59, 83, 77, 8, 63, 38, 37, 115, 188, 40, 89, 0, 191, 153, 86, 180, 62, 108, 9, 205, 190, 31, 14, 195, 190, 64, 80, 81, 191, 147, 126, 181, 60, 151, 90, 87, 61, 13, 247, 35, 191, 179, 61, 71, 190, 184, 74, 137, 189, 31, 111, 157, 190, 121, 203, 70, 62, 149, 214, 16, 62, 208, 189, 0, 191, 61, 66, 109, 190, 149, 128, 29, 191, 194, 79, 166, 62, 217, 154, 9, 189, 24, 135, 244, 61, 8, 21, 75, 60, 150, 146, 58, 62, 188, 98, 154, 189, 165, 116, 71, 62, 45, 221, 96, 190, 181, 117, 21, 191, 52, 14, 108, 190, 68, 242, 107, 190, 22, 87, 107, 191, 154, 75, 15, 62, 27, 14, 121, 62, 44, 202, 137, 62, 228, 249, 60, 191, 168, 145, 183, 189, 225, 134, 117, 189, 111, 253, 136, 188, 99, 72, 146, 191, 252, 209, 158, 62, 164, 184, 39, 190, 64, 55, 17, 62, 141, 137, 202, 61, 11, 255, 74, 190, 211, 34, 202, 62, 99, 152, 1, 192, 224, 73, 230, 189, 238, 226, 232, 61, 23, 160, 233, 189, 153, 157, 141, 62, 85, 38, 73, 190, 173, 247, 173, 190, 102, 91, 55, 190, 193, 176, 143, 62, 152, 133, 140, 61, 111, 19, 250, 189, 99, 77, 39, 62, 255, 230, 182, 189, 183, 125, 232, 62, 184, 236, 44, 190, 159, 55, 53, 190, 33, 37, 196, 62, 40, 56, 199, 61, 46, 167, 24, 190, 64, 159, 51, 190, 159, 254, 10, 190, 236, 9, 157, 62, 223, 72, 86, 189, 126, 209, 3, 192, 38, 255, 164, 190, 17, 133, 121, 62, 234, 58, 40, 188, 130, 104, 90, 61, 98, 168, 82, 188, 82, 81, 125, 190, 76, 224, 29, 62, 205, 125, 174, 189, 33, 199, 160, 62, 252, 156, 194, 61, 19, 157, 120, 62, 193, 156, 145, 190, 232, 170, 153, 190, 217, 100, 26, 191, 77, 224, 134, 62, 201, 119, 40, 62, 44, 220, 87, 190, 249, 199, 150, 62, 182, 49, 217, 187, 171, 120, 14, 190, 53, 115, 30, 190, 121, 107, 58, 189, 113, 168, 138, 61, 125, 210, 5, 62, 198, 96, 228, 189, 154, 205, 105, 190, 94, 155, 159, 61, 65, 182, 133, 62, 121, 20, 169, 189, 233, 204, 171, 189, 229, 211, 55, 61, 178, 1, 171, 60, 67, 163, 214, 62, 114, 122, 133, 191, 194, 183, 2, 189, 186, 170, 206, 189, 235, 68, 109, 62, 47, 226, 132, 191, 123, 208, 163, 190, 78, 39, 250, 189, 66, 253, 136, 190, 209, 30, 141, 61, 21, 23, 149, 61, 186, 136, 2, 191, 12, 28, 70, 190, 244, 166, 142, 190, 134, 138, 222, 60, 198, 65, 220, 61, 1, 83, 153, 61, 203, 242, 41, 190, 247, 2, 86, 61, 41, 91, 91, 189, 175, 52, 131, 61, 176, 167, 167, 190, 95, 250, 197, 190, 147, 54, 149, 188, 104, 125, 197, 190, 98, 85, 31, 191, 252, 64, 105, 190, 37, 206, 87, 62, 250, 65, 168, 62, 84, 55, 42, 191, 222, 158, 1, 191, 255, 83, 115, 60, 158, 145, 204, 189, 200, 230, 51, 191, 65, 195, 152, 62, 215, 148, 3, 191, 127, 1, 243, 190, 49, 79, 176, 61, 71, 2, 59, 190, 185, 253, 5, 190, 136, 21, 216, 189, 188, 226, 213, 61, 222, 47, 153, 60, 178, 221, 212, 189, 227, 26, 140, 60, 134, 90, 187, 59, 171, 115, 153, 189, 183, 85, 50, 190, 20, 216, 129, 60, 84, 52, 48, 190, 191, 168, 58, 190, 26, 8, 41, 188, 252, 80, 132, 59, 141, 157, 17, 61, 249, 5, 26, 190, 68, 124, 67, 186, 36, 171, 167, 60, 240, 92, 214, 189, 16, 91, 13, 62, 6, 222, 50, 188, 213, 28, 1, 62, 248, 225, 43, 188, 184, 176, 180, 61, 46, 120, 112, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 29, 15, 74, 189, 238, 209, 15, 190, 80, 141, 8, 58, 144, 68, 7, 62, 59, 174, 7, 190, 85, 182, 38, 191, 15, 12, 104, 190, 98, 29, 199, 62, 9, 27, 2, 191, 70, 248, 56, 190, 144, 99, 27, 190, 161, 40, 154, 189, 4, 161, 112, 190, 246, 95, 174, 190, 218, 63, 155, 62, 100, 156, 169, 189, 29, 188, 101, 189, 182, 181, 23, 191, 8, 69, 134, 62, 252, 76, 36, 61, 44, 219, 61, 190, 49, 29, 250, 190, 11, 225, 76, 190, 179, 136, 61, 61, 52, 141, 202, 61, 132, 218, 19, 191, 219, 50, 144, 61, 239, 15, 175, 62, 76, 191, 83, 191, 131, 77, 11, 188, 54, 6, 103, 191, 107, 124, 152, 62, 254, 81, 178, 190, 88, 237, 88, 62, 55, 255, 61, 190, 123, 78, 7, 60, 54, 255, 51, 189, 18, 196, 20, 190, 237, 167, 142, 189, 246, 163, 110, 189, 57, 97, 159, 191, 141, 195, 74, 62, 183, 204, 77, 63, 132, 37, 81, 190, 88, 72, 212, 189, 25, 118, 170, 191, 111, 249, 128, 189, 16, 172, 27, 191, 7, 241, 228, 61, 139, 73, 81, 191, 249, 150, 39, 62, 117, 13, 136, 62, 129, 207, 132, 190, 162, 224, 25, 62, 60, 84, 171, 189, 63, 89, 4, 62, 1, 251, 72, 189, 55, 137, 178, 189, 248, 158, 168, 61, 188, 202, 194, 62, 72, 162, 124, 190, 33, 82, 86, 62, 204, 168, 6, 63, 82, 74, 218, 189, 197, 115, 200, 189, 174, 102, 200, 62, 85, 154, 129, 59, 115, 153, 213, 59, 181, 161, 138, 189, 127, 185, 147, 61, 59, 136, 20, 189, 61, 225, 4, 189, 6, 161, 143, 189, 185, 235, 198, 189, 208, 38, 16, 190, 244, 244, 82, 189, 182, 52, 20, 62, 48, 161, 175, 189, 196, 116, 205, 60, 130, 46, 156, 61, 14, 84, 79, 189, 199, 133, 101, 189, 250, 119, 17, 190, 147, 69, 83, 61, 88, 160, 213, 58, 241, 84, 17, 62, 12, 126, 60, 61, 48, 195, 14, 190, 246, 123, 67, 190, 177, 137, 2, 189, 108, 192, 28, 189, 83, 234, 174, 189, 203, 71, 47, 189, 77, 239, 170, 58, 195, 124, 152, 187, 97, 236, 63, 60, 50, 98, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 219, 1, 190, 250, 124, 128, 62, 106, 198, 15, 190, 227, 159, 231, 59, 127, 166, 134, 62, 224, 145, 52, 190, 179, 27, 130, 189, 193, 51, 140, 61, 27, 43, 196, 62, 2, 136, 132, 62, 116, 137, 102, 189, 52, 219, 28, 62, 249, 146, 77, 61, 71, 144, 52, 62, 170, 96, 131, 188, 77, 145, 238, 61, 73, 160, 1, 61, 25, 185, 129, 190, 217, 179, 41, 61, 138, 225, 64, 62, 67, 2, 221, 61, 50, 28, 100, 62, 107, 119, 93, 189, 229, 100, 69, 62, 150, 1, 177, 61, 166, 6, 102, 62, 144, 207, 200, 188, 150, 45, 38, 62, 62, 237, 140, 189, 19, 20, 31, 62, 10, 177, 101, 190, 251, 48, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 254, 16, 191, 244, 138, 221, 190, 32, 47, 147, 63, 133, 92, 28, 63, 124, 156, 130, 61, 160, 211, 208, 61, 103, 83, 58, 63, 118, 236, 20, 191, 159, 143, 34, 61, 20, 111, 27, 61, 56, 79, 196, 190, 67, 99, 152, 188, 78, 239, 125, 191, 7, 80, 116, 190, 242, 81, 139, 190, 3, 67, 55, 190, 49, 133, 237, 190, 51, 84, 129, 190, 105, 107, 153, 61, 246, 96, 151, 187, 125, 58, 20, 191, 157, 168, 228, 62, 238, 36, 11, 190, 149, 35, 160, 63, 67, 228, 65, 191, 234, 97, 167, 62, 223, 52, 167, 190, 173, 91, 129, 190, 229, 201, 8, 62, 152, 237, 23, 190, 115, 236, 33, 191, 10, 60, 49, 189, 245, 43, 7, 63, 191, 135, 21, 61, 186, 15, 25, 63, 184, 23, 11, 62, 225, 12, 119, 190, 143, 193, 210, 61, 241, 55, 184, 60, 135, 214, 89, 189, 214, 45, 179, 190, 46, 242, 125, 190, 7, 239, 188, 188, 7, 44, 153, 190, 186, 108, 212, 58, 52, 247, 81, 190, 174, 5, 56, 61, 40, 179, 102, 190, 211, 87, 111, 62, 107, 139, 60, 61, 10, 243, 67, 190, 235, 249, 75, 190, 46, 155, 24, 63, 160, 29, 131, 62, 116, 216, 223, 61, 183, 17, 184, 60, 254, 12, 45, 190, 25, 6, 143, 190, 239, 34, 71, 62, 30, 221, 159, 190, 97, 136, 92, 189, 168, 64, 6, 191, 104, 138, 105, 62, 212, 74, 192, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 210, 48, 62, 77, 98, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {219, 148, 43, 61, 0, 239, 153, 191, 44, 238, 164, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 103, 128, 191, 222, 111, 138, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}