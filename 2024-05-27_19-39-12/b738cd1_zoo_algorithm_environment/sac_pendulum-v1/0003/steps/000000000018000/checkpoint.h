// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 226, 230, 190, 238, 70, 88, 62, 112, 135, 49, 63, 71, 255, 5, 62, 126, 114, 229, 190, 192, 226, 191, 62, 231, 90, 16, 63, 75, 73, 127, 191, 239, 125, 235, 190, 216, 32, 189, 190, 44, 21, 214, 191, 11, 157, 177, 190, 5, 133, 38, 191, 173, 225, 129, 189, 59, 218, 128, 190, 95, 182, 33, 63, 63, 31, 20, 190, 85, 201, 158, 61, 238, 42, 57, 191, 97, 127, 14, 191, 87, 203, 160, 61, 206, 224, 9, 63, 50, 104, 89, 191, 89, 241, 12, 191, 186, 253, 237, 62, 119, 65, 145, 188, 116, 209, 131, 190, 83, 152, 112, 190, 162, 195, 82, 63, 98, 144, 166, 190, 3, 243, 230, 62, 197, 246, 47, 62, 211, 188, 220, 190, 91, 38, 196, 190, 165, 254, 88, 63, 37, 246, 18, 62, 165, 73, 189, 62, 232, 59, 179, 190, 60, 3, 10, 63, 191, 23, 41, 191, 63, 167, 131, 62, 204, 148, 174, 60, 31, 176, 125, 62, 199, 226, 141, 191, 112, 161, 154, 190, 121, 19, 119, 191, 32, 170, 79, 190, 139, 94, 240, 59, 240, 126, 234, 62, 203, 27, 98, 191, 72, 221, 180, 62, 193, 142, 14, 62, 145, 235, 147, 191, 179, 213, 215, 61, 162, 249, 59, 190, 84, 103, 0, 191, 31, 155, 228, 62, 149, 104, 101, 62, 242, 243, 204, 191, 11, 87, 178, 190, 217, 196, 210, 190, 201, 100, 14, 190, 164, 243, 255, 62, 48, 253, 2, 63, 152, 144, 164, 63, 132, 102, 141, 62, 9, 55, 230, 62, 25, 140, 173, 62, 189, 21, 180, 190, 86, 87, 136, 191, 133, 135, 236, 61, 169, 188, 32, 188, 111, 175, 58, 62, 215, 236, 198, 190, 206, 227, 149, 62, 84, 6, 54, 59, 135, 56, 16, 191, 57, 148, 115, 62, 134, 213, 16, 191, 161, 103, 70, 191, 186, 185, 64, 190, 76, 47, 98, 63, 209, 170, 98, 63, 36, 23, 209, 62, 117, 26, 56, 63, 121, 187, 4, 191, 215, 150, 115, 190, 219, 136, 34, 63, 207, 188, 204, 62, 172, 36, 90, 188, 168, 46, 27, 191, 49, 190, 41, 191, 161, 51, 175, 62, 42, 6, 63, 63, 180, 187, 137, 63, 162, 175, 246, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 191, 88, 190, 167, 90, 159, 190, 219, 9, 198, 189, 163, 248, 44, 190, 88, 218, 208, 61, 59, 85, 163, 62, 190, 26, 161, 62, 183, 136, 45, 190, 166, 125, 136, 191, 116, 10, 173, 188, 31, 158, 83, 62, 40, 62, 150, 62, 236, 33, 51, 191, 15, 231, 49, 63, 255, 188, 58, 62, 56, 222, 228, 62, 58, 88, 18, 63, 245, 243, 206, 62, 126, 31, 253, 190, 153, 225, 116, 62, 44, 174, 65, 190, 211, 137, 3, 190, 167, 19, 187, 62, 136, 240, 218, 61, 146, 11, 188, 62, 187, 221, 110, 62, 26, 67, 138, 62, 203, 48, 137, 191, 212, 153, 7, 191, 119, 70, 6, 63, 95, 118, 251, 188, 237, 60, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 210, 191, 189, 121, 75, 175, 188, 118, 25, 251, 189, 57, 165, 32, 189, 198, 209, 105, 189, 67, 28, 219, 61, 183, 64, 130, 190, 89, 165, 199, 189, 205, 38, 167, 59, 245, 123, 44, 190, 189, 136, 177, 189, 110, 205, 243, 190, 67, 211, 101, 62, 112, 50, 197, 190, 87, 196, 76, 191, 173, 174, 116, 190, 250, 35, 110, 61, 58, 232, 144, 61, 246, 142, 103, 189, 152, 122, 139, 191, 147, 185, 58, 62, 122, 215, 76, 62, 158, 133, 59, 61, 66, 200, 33, 191, 244, 247, 18, 61, 222, 169, 88, 190, 131, 105, 112, 190, 148, 65, 200, 62, 35, 209, 205, 190, 4, 39, 166, 61, 42, 160, 22, 190, 247, 160, 192, 62, 204, 81, 13, 191, 174, 240, 144, 62, 168, 44, 135, 190, 21, 104, 30, 62, 193, 250, 19, 62, 113, 97, 106, 62, 229, 199, 221, 189, 16, 160, 226, 189, 21, 183, 188, 190, 200, 78, 101, 62, 151, 253, 109, 189, 234, 98, 23, 190, 111, 238, 86, 62, 21, 87, 38, 60, 240, 198, 16, 190, 116, 161, 181, 60, 186, 148, 68, 61, 239, 116, 213, 62, 211, 129, 233, 189, 95, 177, 50, 188, 243, 59, 248, 190, 155, 118, 67, 62, 223, 234, 16, 62, 69, 29, 90, 62, 11, 103, 9, 190, 205, 59, 205, 62, 108, 237, 18, 190, 254, 186, 44, 188, 87, 226, 127, 191, 108, 192, 170, 61, 45, 182, 83, 190, 29, 17, 103, 188, 63, 196, 208, 59, 8, 55, 55, 61, 113, 43, 177, 188, 156, 187, 112, 190, 220, 165, 220, 190, 220, 211, 216, 60, 230, 235, 57, 61, 160, 129, 179, 61, 54, 207, 98, 62, 176, 163, 203, 189, 163, 162, 45, 190, 47, 12, 6, 191, 9, 88, 216, 190, 246, 188, 26, 190, 63, 87, 45, 62, 114, 154, 152, 188, 176, 34, 99, 62, 163, 31, 214, 62, 213, 226, 88, 189, 116, 45, 190, 60, 175, 27, 81, 62, 111, 49, 74, 191, 145, 186, 211, 60, 99, 189, 53, 62, 102, 25, 91, 61, 63, 175, 205, 60, 19, 147, 20, 191, 55, 173, 148, 191, 27, 169, 91, 62, 191, 119, 60, 62, 90, 45, 226, 62, 252, 247, 43, 191, 196, 122, 125, 190, 153, 128, 74, 190, 194, 17, 2, 62, 39, 8, 150, 190, 42, 70, 25, 190, 156, 209, 0, 61, 83, 103, 243, 190, 152, 66, 154, 62, 45, 250, 1, 63, 98, 199, 28, 62, 171, 134, 190, 61, 200, 96, 137, 190, 130, 196, 45, 61, 174, 114, 65, 190, 238, 238, 64, 62, 171, 20, 37, 191, 202, 127, 52, 190, 117, 86, 162, 62, 238, 224, 187, 61, 179, 134, 198, 61, 107, 251, 39, 190, 156, 221, 129, 190, 95, 172, 160, 189, 0, 238, 220, 190, 89, 80, 212, 61, 55, 252, 104, 190, 125, 200, 176, 190, 210, 26, 96, 190, 95, 129, 32, 63, 240, 195, 93, 62, 230, 234, 147, 188, 203, 44, 75, 190, 252, 225, 12, 190, 155, 146, 232, 188, 74, 169, 212, 188, 184, 16, 149, 190, 27, 230, 162, 61, 25, 218, 22, 62, 49, 92, 209, 61, 173, 53, 28, 189, 65, 179, 62, 62, 155, 212, 5, 62, 104, 109, 21, 62, 36, 241, 97, 188, 134, 60, 55, 190, 178, 192, 15, 62, 251, 127, 234, 189, 235, 92, 14, 190, 154, 91, 243, 61, 226, 158, 243, 61, 82, 254, 251, 189, 70, 47, 28, 189, 44, 32, 4, 190, 76, 115, 216, 189, 175, 40, 81, 62, 167, 20, 107, 62, 63, 166, 46, 189, 186, 253, 3, 61, 138, 157, 211, 60, 111, 180, 15, 191, 239, 147, 235, 190, 8, 80, 250, 189, 52, 254, 34, 61, 241, 240, 2, 190, 121, 87, 13, 62, 143, 15, 21, 189, 161, 184, 8, 62, 87, 40, 97, 60, 59, 174, 199, 61, 188, 165, 233, 189, 81, 200, 193, 61, 219, 194, 48, 190, 16, 242, 128, 61, 68, 207, 15, 60, 173, 145, 198, 189, 57, 43, 57, 189, 238, 177, 15, 62, 93, 196, 189, 189, 98, 190, 216, 61, 14, 26, 145, 188, 237, 159, 39, 190, 248, 226, 16, 190, 47, 105, 213, 189, 32, 100, 86, 189, 128, 199, 148, 189, 173, 138, 214, 61, 3, 15, 209, 60, 128, 50, 67, 61, 223, 180, 22, 62, 128, 157, 217, 188, 22, 140, 184, 189, 214, 190, 201, 189, 176, 21, 37, 62, 106, 220, 170, 189, 48, 106, 44, 60, 139, 187, 14, 190, 32, 218, 217, 189, 177, 90, 60, 190, 41, 139, 137, 62, 75, 109, 163, 190, 66, 80, 53, 58, 221, 36, 109, 61, 69, 138, 70, 62, 204, 16, 169, 62, 212, 51, 200, 62, 2, 170, 106, 190, 95, 10, 17, 61, 133, 81, 16, 191, 3, 186, 199, 190, 83, 75, 170, 189, 224, 189, 50, 62, 190, 106, 125, 189, 42, 169, 0, 63, 59, 8, 180, 62, 73, 23, 216, 187, 167, 36, 15, 62, 194, 41, 64, 62, 72, 121, 24, 191, 5, 76, 49, 62, 49, 90, 57, 190, 14, 96, 90, 62, 150, 55, 167, 60, 241, 205, 197, 189, 231, 220, 141, 191, 41, 126, 149, 62, 63, 220, 6, 62, 54, 145, 55, 62, 254, 59, 85, 191, 148, 54, 133, 190, 188, 208, 131, 190, 112, 210, 144, 190, 154, 202, 3, 190, 160, 223, 40, 190, 106, 187, 154, 62, 174, 151, 33, 191, 170, 125, 244, 188, 197, 27, 35, 190, 170, 118, 130, 62, 251, 63, 251, 61, 49, 166, 131, 61, 89, 72, 171, 189, 202, 180, 126, 189, 216, 237, 144, 189, 189, 25, 253, 190, 93, 63, 201, 62, 244, 218, 203, 62, 178, 126, 127, 190, 202, 173, 131, 191, 180, 172, 146, 61, 233, 86, 181, 61, 41, 155, 9, 188, 22, 38, 202, 190, 97, 82, 61, 187, 144, 251, 32, 190, 225, 47, 173, 189, 131, 205, 98, 190, 161, 126, 67, 191, 13, 57, 203, 62, 30, 159, 3, 190, 143, 160, 23, 62, 111, 20, 211, 188, 153, 95, 192, 61, 175, 202, 153, 189, 104, 231, 61, 188, 222, 94, 144, 61, 34, 105, 200, 61, 230, 102, 155, 62, 158, 157, 131, 61, 59, 73, 162, 59, 227, 41, 63, 62, 50, 169, 126, 62, 146, 132, 223, 61, 128, 55, 156, 61, 86, 70, 43, 62, 218, 108, 48, 62, 29, 183, 29, 62, 205, 150, 21, 190, 72, 151, 196, 189, 121, 122, 30, 62, 239, 135, 226, 189, 136, 185, 181, 189, 185, 20, 152, 62, 102, 7, 165, 61, 237, 18, 145, 61, 160, 75, 233, 187, 2, 206, 61, 62, 71, 184, 170, 60, 106, 197, 41, 189, 212, 206, 246, 190, 40, 154, 116, 62, 169, 104, 127, 190, 59, 125, 115, 62, 159, 59, 235, 189, 235, 160, 87, 189, 112, 184, 63, 62, 166, 231, 62, 190, 211, 244, 59, 62, 24, 191, 113, 189, 255, 81, 152, 189, 160, 159, 108, 62, 230, 143, 139, 61, 235, 57, 190, 189, 133, 150, 79, 61, 48, 77, 138, 61, 183, 61, 243, 188, 12, 142, 163, 62, 171, 226, 54, 60, 43, 4, 68, 62, 224, 125, 169, 62, 143, 82, 2, 190, 246, 126, 2, 190, 73, 184, 165, 189, 152, 230, 91, 62, 90, 237, 150, 61, 127, 208, 159, 61, 200, 78, 15, 61, 157, 157, 98, 61, 154, 145, 94, 61, 81, 65, 197, 189, 127, 131, 41, 190, 133, 64, 85, 190, 47, 126, 217, 61, 181, 88, 21, 62, 228, 95, 155, 190, 162, 35, 15, 62, 97, 112, 168, 190, 179, 159, 254, 61, 53, 124, 184, 190, 101, 19, 165, 190, 156, 18, 141, 62, 98, 105, 76, 190, 147, 99, 216, 189, 249, 203, 224, 190, 26, 249, 77, 61, 155, 39, 103, 62, 187, 49, 189, 61, 117, 193, 66, 190, 29, 133, 242, 188, 108, 136, 92, 61, 218, 83, 1, 189, 91, 3, 66, 61, 181, 212, 191, 190, 229, 93, 3, 190, 178, 87, 116, 191, 122, 216, 203, 60, 3, 139, 215, 60, 5, 39, 129, 62, 218, 132, 217, 190, 147, 3, 4, 190, 133, 147, 164, 61, 197, 14, 68, 191, 46, 186, 153, 61, 237, 87, 215, 190, 246, 172, 170, 62, 1, 125, 22, 191, 130, 147, 48, 62, 204, 195, 40, 190, 180, 160, 164, 62, 165, 237, 251, 189, 206, 109, 162, 186, 171, 233, 11, 62, 65, 62, 158, 62, 39, 1, 72, 191, 217, 92, 15, 61, 130, 172, 80, 190, 30, 185, 131, 61, 180, 175, 7, 62, 32, 16, 16, 190, 149, 23, 106, 62, 58, 153, 54, 190, 160, 210, 145, 62, 58, 217, 150, 190, 221, 172, 154, 188, 96, 25, 111, 62, 234, 157, 3, 189, 136, 240, 196, 61, 84, 176, 163, 189, 33, 115, 47, 189, 161, 8, 248, 61, 248, 243, 180, 190, 143, 68, 160, 190, 27, 132, 247, 62, 168, 121, 236, 61, 22, 208, 114, 190, 225, 45, 83, 190, 149, 24, 71, 189, 128, 50, 41, 191, 121, 160, 179, 189, 195, 11, 29, 191, 128, 93, 13, 191, 147, 81, 186, 189, 197, 170, 89, 62, 213, 172, 234, 61, 28, 186, 54, 191, 165, 148, 27, 62, 89, 12, 207, 189, 1, 101, 128, 60, 252, 162, 67, 190, 86, 137, 147, 190, 80, 234, 14, 191, 135, 64, 104, 190, 198, 19, 131, 190, 129, 218, 27, 62, 16, 139, 55, 190, 155, 248, 60, 190, 75, 41, 1, 63, 36, 176, 151, 191, 205, 181, 138, 62, 55, 255, 69, 191, 241, 202, 129, 190, 197, 102, 43, 190, 33, 187, 116, 189, 118, 41, 32, 191, 40, 209, 66, 62, 183, 68, 61, 62, 238, 226, 180, 189, 108, 230, 45, 191, 40, 223, 147, 191, 102, 78, 158, 62, 143, 223, 134, 190, 215, 83, 30, 191, 186, 205, 170, 190, 190, 80, 190, 61, 154, 31, 139, 62, 70, 33, 187, 61, 5, 100, 155, 190, 136, 83, 140, 189, 159, 29, 61, 62, 167, 242, 254, 190, 201, 109, 57, 190, 70, 8, 186, 61, 211, 210, 4, 190, 248, 135, 219, 61, 180, 108, 186, 60, 121, 67, 65, 62, 62, 28, 173, 189, 8, 13, 32, 191, 251, 128, 34, 63, 176, 176, 159, 190, 10, 253, 200, 61, 14, 162, 160, 190, 89, 114, 7, 191, 197, 175, 83, 189, 156, 68, 32, 190, 162, 49, 21, 191, 224, 151, 153, 61, 135, 47, 11, 62, 232, 107, 138, 189, 166, 193, 35, 190, 154, 239, 60, 62, 162, 17, 192, 61, 66, 69, 166, 190, 52, 58, 191, 190, 30, 252, 129, 191, 152, 236, 166, 189, 133, 56, 97, 62, 157, 220, 16, 62, 103, 246, 56, 191, 88, 189, 156, 188, 172, 89, 118, 189, 111, 90, 2, 190, 44, 215, 159, 61, 16, 66, 196, 188, 106, 180, 230, 61, 204, 180, 200, 190, 182, 57, 132, 187, 234, 213, 200, 61, 185, 115, 81, 62, 155, 3, 246, 190, 56, 154, 130, 62, 10, 165, 95, 191, 80, 0, 194, 62, 93, 35, 233, 190, 146, 220, 149, 61, 68, 42, 111, 61, 137, 166, 132, 62, 45, 74, 20, 191, 234, 223, 60, 59, 1, 7, 160, 62, 225, 50, 153, 60, 20, 143, 187, 190, 148, 235, 202, 190, 223, 87, 254, 61, 133, 74, 89, 61, 10, 219, 38, 189, 59, 255, 195, 189, 44, 176, 69, 191, 28, 177, 93, 62, 123, 108, 194, 189, 30, 17, 186, 61, 205, 64, 161, 62, 121, 10, 86, 191, 176, 59, 93, 61, 28, 158, 164, 190, 53, 182, 81, 62, 100, 29, 40, 62, 175, 81, 81, 61, 177, 89, 53, 62, 119, 59, 92, 189, 103, 147, 24, 62, 66, 41, 202, 62, 7, 154, 56, 62, 131, 22, 32, 62, 17, 253, 238, 62, 155, 158, 63, 62, 176, 147, 254, 60, 40, 118, 109, 61, 47, 185, 30, 62, 207, 10, 58, 62, 160, 216, 38, 62, 37, 219, 199, 62, 85, 248, 89, 62, 240, 222, 76, 189, 160, 143, 47, 62, 111, 51, 102, 61, 214, 167, 156, 60, 86, 108, 156, 191, 60, 104, 46, 191, 232, 221, 48, 190, 199, 92, 64, 190, 204, 160, 32, 62, 223, 115, 177, 62, 174, 0, 151, 62, 139, 33, 178, 190, 135, 150, 180, 190, 244, 52, 114, 62, 132, 62, 173, 189, 52, 120, 63, 190, 189, 13, 168, 62, 155, 46, 32, 62, 20, 187, 241, 61, 209, 147, 19, 62, 144, 174, 177, 190, 118, 237, 134, 62, 130, 218, 133, 191, 13, 61, 148, 61, 43, 186, 120, 191, 227, 228, 72, 62, 72, 223, 106, 61, 92, 251, 155, 61, 207, 166, 202, 190, 139, 138, 47, 63, 54, 90, 148, 61, 113, 208, 125, 189, 248, 95, 95, 191, 254, 200, 144, 62, 177, 120, 172, 62, 254, 234, 97, 62, 86, 209, 75, 62, 250, 141, 78, 60, 163, 22, 16, 61, 123, 177, 212, 62, 29, 93, 1, 190, 95, 98, 127, 190, 202, 87, 91, 62, 210, 214, 62, 190, 162, 147, 237, 190, 238, 215, 97, 191, 47, 20, 132, 190, 91, 119, 126, 189, 79, 175, 64, 62, 216, 220, 167, 189, 129, 61, 166, 62, 225, 247, 92, 62, 47, 8, 253, 60, 166, 209, 180, 59, 229, 210, 18, 62, 174, 107, 208, 62, 70, 137, 143, 189, 247, 84, 245, 189, 226, 2, 244, 190, 38, 127, 149, 189, 129, 144, 45, 62, 16, 207, 150, 189, 15, 222, 251, 62, 71, 147, 62, 62, 13, 90, 78, 191, 22, 30, 60, 191, 203, 146, 68, 62, 140, 21, 195, 189, 78, 157, 55, 62, 131, 116, 91, 188, 113, 203, 37, 62, 202, 119, 226, 189, 7, 252, 97, 62, 175, 246, 100, 62, 54, 23, 34, 62, 186, 3, 155, 189, 141, 108, 144, 61, 154, 174, 98, 59, 57, 70, 142, 189, 65, 8, 158, 62, 8, 69, 83, 190, 54, 105, 114, 62, 34, 223, 65, 62, 5, 101, 181, 61, 185, 193, 95, 62, 101, 43, 34, 190, 158, 129, 142, 61, 114, 27, 54, 188, 60, 2, 14, 61, 128, 122, 11, 190, 191, 12, 102, 62, 11, 15, 181, 61, 178, 201, 4, 62, 124, 245, 70, 190, 158, 97, 140, 60, 215, 107, 253, 190, 94, 98, 137, 189, 247, 27, 179, 61, 11, 184, 212, 60, 46, 55, 142, 190, 126, 105, 65, 190, 254, 160, 113, 187, 41, 140, 72, 62, 93, 237, 47, 60, 157, 96, 41, 62, 91, 232, 165, 189, 50, 175, 178, 190, 204, 44, 186, 61, 100, 152, 99, 62, 25, 92, 72, 61, 202, 220, 31, 189, 68, 52, 172, 189, 5, 141, 132, 189, 137, 121, 50, 189, 157, 243, 75, 188, 225, 3, 105, 190, 140, 208, 178, 62, 0, 194, 231, 61, 228, 86, 36, 189, 68, 189, 79, 61, 205, 134, 190, 59, 174, 44, 220, 61, 234, 182, 166, 61, 194, 227, 144, 190, 85, 90, 142, 61, 113, 252, 111, 61, 156, 78, 56, 190, 69, 73, 148, 190, 170, 235, 146, 190, 184, 203, 130, 61, 39, 208, 111, 189, 86, 249, 0, 190, 156, 198, 5, 191, 234, 211, 173, 60, 205, 83, 109, 190, 161, 19, 161, 61, 142, 95, 94, 62, 17, 176, 74, 62, 120, 21, 251, 190, 101, 3, 182, 190, 56, 40, 253, 190, 183, 132, 167, 62, 140, 3, 200, 189, 80, 57, 222, 189, 70, 2, 39, 61, 50, 216, 77, 189, 216, 91, 222, 189, 11, 8, 42, 61, 91, 201, 187, 190, 46, 163, 68, 191, 52, 151, 134, 190, 135, 126, 182, 189, 84, 1, 254, 190, 243, 121, 91, 62, 218, 124, 84, 62, 54, 18, 210, 62, 137, 17, 227, 190, 217, 11, 51, 191, 23, 242, 45, 62, 20, 12, 185, 62, 225, 238, 141, 191, 4, 144, 198, 62, 121, 34, 57, 191, 230, 73, 197, 62, 78, 36, 53, 189, 158, 124, 75, 190, 85, 67, 80, 190, 12, 28, 26, 191, 99, 130, 91, 62, 30, 106, 209, 189, 79, 59, 58, 62, 17, 109, 13, 62, 248, 165, 140, 189, 27, 246, 153, 189, 133, 12, 194, 190, 126, 187, 132, 62, 236, 209, 64, 190, 187, 31, 201, 62, 164, 149, 3, 191, 64, 49, 165, 62, 227, 205, 45, 61, 31, 10, 47, 62, 156, 229, 221, 189, 201, 23, 118, 190, 146, 161, 183, 61, 184, 109, 65, 189, 61, 160, 193, 190, 199, 219, 25, 63, 41, 16, 44, 62, 151, 10, 36, 61, 77, 128, 76, 62, 87, 187, 174, 190, 92, 101, 44, 61, 93, 243, 164, 190, 160, 77, 50, 62, 184, 250, 132, 190, 227, 206, 48, 190, 15, 186, 170, 62, 40, 55, 157, 61, 35, 188, 20, 63, 196, 134, 176, 61, 186, 144, 148, 62, 141, 148, 37, 189, 22, 12, 99, 190, 243, 204, 191, 190, 87, 123, 73, 62, 162, 74, 252, 188, 10, 34, 204, 190, 188, 180, 105, 62, 171, 147, 181, 189, 216, 242, 48, 60, 1, 1, 138, 190, 11, 57, 70, 189, 53, 114, 44, 62, 124, 75, 80, 62, 233, 19, 198, 190, 63, 158, 101, 190, 1, 250, 146, 61, 35, 2, 116, 61, 68, 227, 183, 190, 96, 29, 43, 190, 33, 54, 0, 62, 105, 71, 224, 61, 191, 220, 165, 62, 20, 68, 240, 190, 220, 193, 22, 62, 201, 86, 147, 61, 229, 148, 84, 62, 217, 65, 128, 189, 157, 222, 72, 190, 154, 130, 116, 191, 142, 11, 148, 191, 158, 28, 0, 63, 59, 15, 199, 60, 242, 163, 158, 62, 138, 14, 107, 190, 6, 184, 80, 191, 145, 116, 197, 62, 196, 83, 175, 59, 71, 235, 157, 62, 125, 53, 25, 61, 211, 240, 72, 62, 166, 211, 165, 191, 236, 128, 129, 62, 52, 211, 174, 190, 152, 105, 199, 60, 121, 151, 173, 189, 147, 84, 39, 191, 12, 218, 63, 61, 116, 216, 105, 190, 70, 183, 208, 60, 8, 164, 10, 63, 55, 50, 8, 188, 36, 143, 0, 191, 13, 67, 150, 62, 68, 247, 194, 190, 31, 14, 195, 190, 28, 136, 76, 191, 54, 241, 221, 60, 219, 11, 138, 60, 159, 59, 1, 191, 26, 48, 46, 190, 68, 212, 89, 189, 147, 102, 154, 190, 127, 140, 50, 62, 93, 210, 31, 62, 47, 134, 222, 190, 139, 184, 104, 190, 249, 207, 14, 191, 100, 200, 150, 62, 65, 138, 92, 189, 133, 150, 112, 61, 141, 53, 39, 61, 33, 167, 37, 62, 68, 129, 194, 188, 5, 254, 81, 62, 102, 101, 106, 190, 75, 25, 18, 191, 52, 14, 108, 190, 73, 63, 27, 190, 102, 145, 79, 191, 89, 130, 224, 61, 73, 53, 101, 62, 114, 9, 143, 62, 128, 24, 65, 191, 182, 233, 59, 189, 252, 157, 4, 189, 85, 148, 41, 62, 34, 107, 134, 191, 52, 202, 151, 62, 121, 201, 135, 190, 64, 35, 31, 62, 204, 162, 169, 61, 4, 245, 94, 190, 67, 7, 166, 62, 216, 101, 247, 191, 30, 64, 205, 189, 250, 161, 177, 61, 170, 139, 162, 189, 229, 227, 48, 62, 150, 140, 73, 190, 187, 81, 203, 190, 112, 141, 121, 190, 120, 237, 67, 62, 54, 147, 136, 61, 217, 91, 36, 190, 82, 233, 223, 61, 18, 227, 136, 189, 139, 111, 235, 62, 19, 30, 23, 190, 36, 109, 46, 190, 126, 74, 166, 62, 142, 119, 187, 61, 213, 5, 92, 190, 41, 204, 105, 190, 110, 102, 238, 189, 214, 183, 160, 62, 124, 162, 20, 189, 164, 71, 237, 191, 55, 70, 220, 190, 250, 30, 39, 62, 195, 117, 75, 189, 217, 23, 140, 61, 141, 42, 84, 189, 247, 29, 90, 190, 202, 208, 93, 62, 113, 38, 155, 189, 204, 231, 143, 62, 135, 210, 85, 61, 157, 181, 136, 62, 210, 89, 107, 190, 216, 181, 150, 190, 225, 165, 13, 191, 97, 182, 95, 62, 146, 81, 45, 62, 126, 146, 115, 190, 231, 10, 170, 62, 177, 181, 32, 189, 125, 87, 243, 189, 182, 57, 34, 190, 104, 134, 36, 189, 151, 149, 153, 61, 191, 75, 58, 62, 100, 241, 177, 189, 224, 110, 66, 190, 237, 238, 155, 61, 15, 2, 138, 62, 44, 198, 195, 189, 251, 218, 171, 189, 39, 41, 76, 61, 87, 42, 152, 59, 132, 43, 204, 62, 224, 156, 119, 191, 188, 79, 142, 188, 171, 74, 93, 189, 146, 173, 97, 62, 172, 171, 119, 191, 123, 208, 163, 190, 200, 242, 188, 189, 156, 146, 73, 190, 27, 68, 158, 61, 178, 161, 133, 61, 50, 220, 222, 190, 7, 118, 47, 190, 2, 103, 77, 190, 26, 171, 11, 60, 21, 75, 196, 61, 180, 127, 223, 188, 203, 242, 41, 190, 78, 154, 170, 60, 42, 83, 156, 60, 87, 177, 139, 61, 254, 20, 184, 190, 102, 8, 191, 190, 147, 54, 149, 188, 146, 235, 138, 190, 204, 101, 30, 191, 87, 78, 161, 190, 251, 142, 69, 62, 210, 32, 173, 62, 107, 176, 57, 191, 92, 171, 1, 191, 77, 116, 179, 61, 24, 104, 203, 189, 14, 159, 38, 191, 102, 77, 133, 62, 187, 10, 6, 191, 189, 75, 14, 191, 49, 79, 176, 61, 71, 2, 59, 190, 185, 253, 5, 190, 136, 21, 216, 189, 188, 226, 213, 61, 222, 47, 153, 60, 178, 221, 212, 189, 227, 26, 140, 60, 134, 90, 187, 59, 171, 115, 153, 189, 183, 85, 50, 190, 20, 216, 129, 60, 84, 52, 48, 190, 191, 168, 58, 190, 26, 8, 41, 188, 252, 80, 132, 59, 141, 157, 17, 61, 249, 5, 26, 190, 68, 124, 67, 186, 36, 171, 167, 60, 240, 92, 214, 189, 16, 91, 13, 62, 6, 222, 50, 188, 213, 28, 1, 62, 248, 225, 43, 188, 184, 176, 180, 61, 46, 120, 112, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 29, 15, 74, 189, 238, 209, 15, 190, 201, 70, 196, 60, 210, 79, 40, 62, 154, 127, 23, 190, 244, 91, 248, 190, 38, 224, 96, 190, 214, 134, 190, 62, 45, 130, 222, 190, 75, 152, 66, 190, 144, 99, 27, 190, 0, 138, 245, 189, 157, 23, 113, 190, 147, 133, 147, 190, 239, 204, 158, 62, 207, 71, 81, 189, 70, 140, 160, 189, 89, 1, 3, 191, 7, 244, 122, 62, 117, 107, 197, 60, 210, 70, 21, 190, 219, 146, 3, 191, 160, 65, 48, 190, 88, 19, 42, 61, 232, 26, 197, 61, 156, 201, 15, 191, 236, 153, 88, 61, 136, 50, 169, 62, 161, 129, 35, 191, 255, 23, 149, 188, 81, 12, 111, 191, 11, 109, 144, 62, 199, 244, 154, 190, 224, 250, 77, 62, 137, 60, 32, 190, 32, 25, 128, 61, 248, 71, 141, 188, 220, 19, 242, 189, 184, 79, 28, 188, 186, 56, 110, 189, 141, 202, 155, 191, 246, 7, 132, 62, 183, 204, 77, 63, 121, 27, 26, 190, 139, 75, 121, 189, 150, 155, 118, 191, 144, 183, 56, 189, 220, 66, 9, 191, 186, 37, 243, 61, 199, 80, 70, 191, 68, 189, 21, 62, 21, 6, 129, 62, 107, 167, 104, 190, 127, 29, 31, 62, 56, 53, 102, 189, 55, 112, 6, 62, 135, 181, 156, 188, 55, 137, 178, 189, 90, 200, 115, 61, 22, 50, 183, 62, 208, 33, 98, 190, 237, 184, 71, 62, 236, 85, 9, 63, 72, 123, 205, 189, 102, 200, 155, 189, 227, 153, 188, 62, 85, 154, 129, 59, 115, 153, 213, 59, 181, 161, 138, 189, 127, 185, 147, 61, 59, 136, 20, 189, 61, 225, 4, 189, 6, 161, 143, 189, 185, 235, 198, 189, 208, 38, 16, 190, 244, 244, 82, 189, 182, 52, 20, 62, 48, 161, 175, 189, 196, 116, 205, 60, 130, 46, 156, 61, 14, 84, 79, 189, 199, 133, 101, 189, 250, 119, 17, 190, 147, 69, 83, 61, 88, 160, 213, 58, 241, 84, 17, 62, 12, 126, 60, 61, 48, 195, 14, 190, 246, 123, 67, 190, 177, 137, 2, 189, 108, 192, 28, 189, 83, 234, 174, 189, 203, 71, 47, 189, 77, 239, 170, 58, 195, 124, 152, 187, 97, 236, 63, 60, 50, 98, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 116, 2, 190, 48, 94, 135, 62, 2, 206, 15, 190, 141, 75, 201, 187, 131, 187, 129, 62, 224, 145, 52, 190, 131, 45, 156, 189, 175, 110, 164, 61, 226, 156, 188, 62, 36, 118, 123, 62, 154, 35, 86, 189, 82, 171, 37, 62, 252, 69, 104, 61, 66, 165, 80, 62, 129, 150, 95, 186, 13, 67, 241, 61, 186, 115, 50, 61, 122, 209, 99, 190, 11, 31, 212, 60, 42, 240, 82, 62, 0, 184, 202, 61, 34, 99, 27, 62, 177, 217, 122, 189, 164, 41, 73, 62, 198, 122, 160, 61, 145, 0, 65, 62, 228, 77, 60, 188, 246, 149, 6, 62, 62, 237, 140, 189, 229, 95, 18, 62, 197, 170, 96, 190, 251, 48, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 60, 10, 191, 186, 26, 208, 190, 91, 28, 138, 63, 237, 18, 14, 63, 225, 232, 163, 61, 160, 211, 208, 61, 71, 186, 60, 63, 180, 13, 14, 191, 88, 111, 146, 60, 177, 135, 44, 61, 255, 150, 202, 190, 42, 191, 55, 189, 251, 68, 98, 191, 108, 222, 100, 190, 89, 56, 139, 190, 10, 28, 57, 190, 20, 149, 227, 190, 125, 172, 75, 190, 151, 195, 171, 61, 86, 136, 6, 60, 240, 115, 237, 190, 118, 172, 212, 62, 109, 137, 253, 189, 82, 235, 169, 63, 121, 152, 43, 191, 6, 97, 174, 62, 27, 228, 163, 190, 112, 124, 53, 190, 229, 201, 8, 62, 3, 167, 20, 190, 229, 101, 20, 191, 10, 60, 49, 189, 167, 252, 8, 63, 222, 136, 136, 61, 130, 144, 2, 63, 122, 70, 30, 62, 23, 97, 126, 190, 143, 193, 210, 61, 6, 87, 12, 61, 56, 38, 19, 189, 35, 129, 178, 190, 98, 240, 128, 190, 25, 76, 254, 188, 22, 109, 143, 190, 163, 0, 65, 187, 18, 17, 78, 190, 204, 181, 63, 61, 5, 189, 72, 190, 167, 204, 120, 62, 168, 14, 141, 61, 115, 22, 75, 190, 52, 28, 81, 190, 85, 164, 18, 63, 16, 119, 143, 62, 191, 236, 227, 61, 172, 177, 39, 61, 100, 96, 55, 190, 132, 146, 89, 190, 38, 229, 63, 62, 233, 22, 150, 190, 97, 136, 92, 189, 47, 64, 239, 190, 176, 55, 148, 62, 212, 74, 192, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 232, 28, 62, 237, 219, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {199, 150, 161, 190, 70, 173, 153, 62, 204, 200, 211, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 83, 192, 63, 158, 155, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}