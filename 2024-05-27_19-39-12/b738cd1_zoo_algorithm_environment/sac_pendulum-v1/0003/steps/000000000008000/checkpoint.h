// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 169, 21, 191, 115, 124, 6, 62, 223, 152, 50, 63, 192, 170, 90, 188, 156, 182, 5, 191, 205, 56, 201, 62, 65, 190, 55, 63, 153, 36, 80, 191, 107, 68, 219, 190, 106, 184, 22, 191, 220, 2, 186, 191, 212, 103, 130, 190, 45, 25, 13, 191, 36, 113, 40, 61, 173, 163, 153, 190, 135, 74, 22, 63, 58, 18, 180, 189, 38, 64, 14, 62, 47, 88, 90, 191, 246, 210, 81, 190, 19, 65, 192, 61, 254, 201, 28, 63, 39, 224, 47, 191, 45, 58, 17, 191, 33, 136, 128, 62, 196, 2, 22, 61, 26, 115, 144, 190, 148, 164, 140, 190, 9, 20, 75, 63, 23, 72, 185, 190, 73, 211, 20, 63, 162, 251, 39, 61, 242, 230, 254, 190, 100, 95, 151, 190, 63, 197, 46, 63, 141, 23, 42, 59, 4, 20, 207, 62, 226, 205, 182, 190, 238, 254, 3, 63, 205, 114, 245, 190, 60, 242, 158, 62, 63, 37, 219, 59, 136, 131, 149, 62, 218, 122, 133, 191, 28, 203, 55, 190, 47, 10, 83, 191, 15, 165, 2, 190, 53, 113, 230, 61, 238, 166, 237, 62, 163, 180, 54, 191, 214, 236, 198, 62, 153, 29, 13, 190, 27, 218, 125, 191, 83, 183, 9, 62, 152, 210, 64, 190, 20, 24, 235, 190, 245, 235, 234, 62, 89, 228, 57, 190, 174, 18, 172, 191, 1, 8, 215, 190, 244, 128, 129, 190, 151, 19, 106, 190, 19, 112, 15, 63, 246, 148, 13, 63, 80, 250, 111, 63, 217, 40, 195, 62, 207, 65, 230, 62, 235, 93, 172, 62, 154, 62, 194, 190, 65, 144, 93, 191, 120, 227, 126, 62, 158, 178, 93, 189, 129, 69, 199, 61, 68, 215, 33, 190, 243, 39, 225, 62, 52, 32, 180, 189, 151, 38, 231, 190, 33, 140, 170, 62, 57, 68, 254, 190, 110, 201, 221, 190, 75, 187, 34, 190, 128, 130, 87, 63, 3, 199, 61, 63, 135, 209, 229, 62, 244, 171, 26, 63, 156, 185, 161, 190, 28, 214, 110, 190, 47, 236, 59, 63, 85, 181, 21, 63, 103, 133, 204, 60, 169, 174, 30, 191, 116, 220, 21, 191, 185, 101, 209, 62, 101, 31, 25, 63, 107, 157, 103, 63, 138, 52, 8, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 201, 52, 190, 243, 38, 145, 190, 22, 156, 47, 62, 2, 180, 207, 189, 84, 88, 73, 61, 93, 184, 177, 62, 43, 94, 11, 62, 79, 168, 115, 189, 254, 191, 87, 191, 63, 114, 154, 59, 65, 109, 74, 62, 128, 198, 130, 62, 164, 189, 56, 191, 105, 168, 42, 63, 164, 198, 234, 62, 91, 175, 155, 62, 239, 9, 47, 63, 231, 72, 137, 62, 224, 162, 232, 190, 244, 76, 51, 62, 3, 79, 218, 189, 92, 239, 168, 189, 66, 176, 219, 62, 192, 34, 153, 189, 117, 238, 183, 62, 106, 45, 62, 62, 182, 118, 114, 62, 22, 122, 90, 191, 24, 22, 15, 191, 191, 92, 160, 62, 206, 71, 7, 190, 20, 171, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 67, 245, 189, 190, 45, 45, 189, 16, 66, 13, 190, 230, 29, 13, 189, 198, 209, 105, 189, 117, 36, 27, 62, 169, 64, 180, 190, 144, 239, 165, 61, 205, 38, 167, 59, 225, 3, 36, 190, 131, 220, 130, 189, 114, 14, 169, 190, 219, 41, 67, 62, 217, 214, 167, 190, 230, 10, 16, 191, 250, 116, 167, 190, 158, 81, 141, 61, 125, 59, 193, 61, 40, 118, 159, 189, 172, 143, 139, 190, 67, 180, 28, 62, 232, 176, 98, 62, 15, 164, 165, 61, 250, 78, 44, 191, 93, 70, 58, 61, 89, 89, 97, 190, 82, 126, 221, 189, 28, 190, 142, 62, 91, 85, 141, 62, 127, 149, 8, 62, 20, 168, 56, 190, 126, 119, 188, 62, 152, 158, 232, 190, 173, 161, 102, 62, 143, 187, 132, 190, 182, 214, 42, 59, 247, 107, 239, 61, 197, 10, 99, 62, 195, 178, 189, 60, 86, 120, 225, 189, 32, 81, 33, 190, 25, 93, 31, 62, 31, 213, 120, 189, 249, 47, 175, 188, 214, 173, 189, 61, 174, 75, 168, 188, 158, 30, 244, 189, 148, 228, 1, 188, 15, 153, 21, 187, 135, 209, 146, 62, 97, 46, 137, 189, 69, 40, 143, 61, 93, 98, 225, 190, 120, 90, 85, 62, 82, 247, 19, 62, 84, 138, 27, 62, 230, 255, 58, 190, 203, 253, 146, 62, 20, 56, 87, 190, 170, 93, 21, 62, 224, 191, 225, 190, 68, 187, 244, 61, 93, 62, 131, 190, 120, 205, 83, 60, 10, 70, 141, 61, 158, 111, 90, 61, 92, 65, 37, 190, 226, 160, 169, 61, 249, 34, 39, 190, 162, 166, 232, 189, 111, 77, 46, 62, 47, 119, 0, 61, 54, 207, 98, 62, 179, 22, 59, 190, 129, 30, 152, 190, 150, 125, 222, 190, 118, 186, 193, 190, 20, 231, 130, 189, 9, 31, 151, 189, 187, 245, 227, 61, 220, 57, 49, 62, 22, 19, 189, 62, 66, 108, 180, 188, 222, 88, 190, 189, 192, 168, 118, 62, 111, 4, 7, 191, 41, 148, 251, 189, 158, 64, 88, 62, 99, 41, 0, 61, 8, 23, 92, 59, 184, 151, 235, 189, 169, 211, 17, 191, 242, 166, 20, 61, 117, 184, 198, 189, 192, 33, 0, 63, 68, 24, 11, 191, 152, 186, 172, 187, 3, 53, 12, 190, 148, 18, 1, 62, 188, 32, 194, 189, 118, 104, 34, 190, 199, 169, 83, 189, 111, 113, 146, 190, 207, 10, 157, 62, 128, 245, 171, 61, 100, 191, 233, 61, 108, 155, 146, 61, 236, 16, 39, 190, 14, 65, 164, 189, 161, 158, 8, 190, 186, 157, 87, 62, 83, 232, 243, 190, 254, 236, 188, 190, 15, 198, 125, 62, 85, 205, 217, 61, 92, 74, 5, 62, 202, 63, 37, 190, 150, 115, 12, 190, 201, 60, 226, 189, 179, 26, 200, 190, 64, 139, 181, 60, 239, 232, 192, 190, 58, 226, 142, 190, 67, 99, 33, 62, 80, 45, 22, 63, 40, 192, 59, 62, 104, 14, 204, 188, 62, 215, 238, 61, 115, 36, 20, 189, 194, 53, 28, 189, 62, 48, 89, 61, 113, 52, 56, 190, 24, 21, 99, 57, 178, 78, 97, 62, 100, 145, 208, 61, 145, 6, 178, 60, 188, 86, 36, 189, 241, 171, 52, 61, 126, 204, 18, 62, 57, 225, 226, 61, 85, 198, 33, 190, 90, 60, 27, 62, 20, 222, 161, 188, 236, 62, 18, 190, 69, 154, 17, 62, 223, 84, 235, 61, 93, 201, 203, 189, 219, 224, 138, 61, 13, 52, 148, 189, 55, 5, 248, 61, 47, 64, 77, 62, 59, 132, 16, 62, 185, 66, 199, 60, 16, 46, 160, 60, 166, 34, 42, 186, 187, 13, 92, 190, 143, 38, 244, 190, 238, 101, 60, 189, 154, 104, 158, 61, 71, 233, 16, 61, 121, 87, 13, 62, 143, 15, 21, 189, 161, 184, 8, 62, 87, 40, 97, 60, 59, 174, 199, 61, 188, 165, 233, 189, 81, 200, 193, 61, 219, 194, 48, 190, 16, 242, 128, 61, 68, 207, 15, 60, 173, 145, 198, 189, 57, 43, 57, 189, 238, 177, 15, 62, 93, 196, 189, 189, 98, 190, 216, 61, 14, 26, 145, 188, 237, 159, 39, 190, 248, 226, 16, 190, 47, 105, 213, 189, 32, 100, 86, 189, 128, 199, 148, 189, 173, 138, 214, 61, 3, 15, 209, 60, 128, 50, 67, 61, 223, 180, 22, 62, 128, 157, 217, 188, 22, 140, 184, 189, 214, 190, 201, 189, 176, 21, 37, 62, 106, 220, 170, 189, 48, 106, 44, 60, 139, 187, 14, 190, 224, 18, 116, 189, 67, 86, 77, 190, 164, 110, 133, 62, 30, 55, 39, 190, 57, 63, 71, 189, 226, 214, 55, 60, 89, 155, 124, 62, 101, 209, 159, 62, 29, 73, 229, 61, 19, 126, 158, 190, 56, 9, 58, 188, 246, 12, 185, 190, 13, 94, 192, 190, 230, 149, 37, 189, 39, 176, 56, 62, 177, 188, 79, 60, 224, 13, 228, 62, 121, 81, 189, 62, 36, 57, 180, 188, 29, 172, 37, 62, 192, 224, 86, 62, 188, 222, 215, 190, 105, 53, 249, 61, 61, 246, 80, 190, 185, 200, 104, 62, 47, 82, 177, 60, 178, 52, 154, 188, 254, 176, 254, 190, 33, 66, 169, 62, 36, 44, 6, 62, 104, 5, 91, 62, 51, 144, 43, 191, 136, 133, 116, 190, 137, 231, 166, 190, 98, 112, 151, 190, 33, 163, 16, 62, 146, 246, 57, 190, 135, 204, 162, 62, 203, 248, 73, 191, 105, 125, 74, 189, 31, 33, 22, 189, 250, 30, 7, 62, 0, 19, 190, 61, 103, 198, 65, 62, 183, 233, 5, 190, 194, 0, 171, 189, 87, 106, 51, 60, 176, 43, 6, 191, 45, 4, 201, 62, 60, 103, 180, 62, 224, 55, 135, 190, 213, 113, 4, 191, 16, 61, 128, 61, 255, 103, 25, 62, 130, 185, 212, 188, 84, 206, 163, 190, 137, 69, 165, 188, 18, 218, 118, 190, 244, 205, 37, 61, 145, 103, 245, 60, 126, 145, 18, 191, 6, 186, 207, 62, 135, 212, 60, 190, 125, 160, 72, 62, 8, 141, 208, 188, 182, 8, 133, 61, 28, 139, 170, 189, 176, 26, 196, 187, 142, 11, 196, 186, 164, 238, 34, 62, 189, 242, 151, 62, 219, 15, 119, 61, 30, 92, 2, 190, 0, 192, 5, 62, 106, 94, 111, 62, 70, 94, 134, 61, 75, 145, 85, 61, 48, 19, 228, 61, 227, 127, 50, 62, 58, 3, 19, 62, 64, 122, 31, 190, 153, 139, 37, 190, 184, 85, 46, 62, 253, 200, 165, 189, 25, 3, 220, 189, 145, 6, 178, 62, 122, 142, 162, 61, 50, 215, 126, 61, 52, 233, 244, 187, 113, 213, 249, 61, 73, 6, 127, 189, 89, 247, 40, 189, 84, 179, 22, 191, 47, 8, 132, 62, 114, 123, 132, 190, 49, 224, 98, 62, 218, 206, 220, 189, 48, 113, 119, 189, 129, 167, 104, 62, 104, 2, 217, 189, 97, 234, 213, 61, 222, 88, 150, 58, 54, 72, 177, 189, 209, 12, 133, 62, 124, 19, 22, 190, 185, 3, 57, 190, 198, 163, 60, 61, 1, 44, 63, 188, 95, 229, 178, 188, 64, 254, 122, 62, 29, 118, 121, 61, 24, 212, 49, 62, 198, 71, 172, 62, 22, 210, 222, 189, 88, 77, 228, 189, 48, 169, 224, 188, 205, 108, 88, 62, 192, 185, 244, 61, 173, 162, 150, 61, 70, 83, 49, 189, 238, 138, 164, 61, 193, 154, 167, 60, 38, 185, 5, 190, 215, 177, 195, 189, 212, 163, 144, 190, 244, 107, 214, 61, 31, 196, 33, 62, 14, 179, 161, 190, 180, 190, 221, 61, 25, 69, 210, 190, 145, 248, 6, 61, 216, 145, 184, 190, 184, 15, 205, 190, 172, 50, 140, 62, 28, 78, 162, 189, 125, 109, 23, 190, 81, 121, 160, 190, 42, 185, 133, 189, 182, 17, 54, 62, 85, 120, 9, 62, 239, 245, 111, 190, 102, 141, 101, 189, 12, 192, 89, 60, 172, 209, 161, 189, 55, 107, 27, 60, 134, 242, 232, 190, 153, 224, 1, 190, 153, 43, 2, 191, 142, 162, 217, 188, 62, 113, 147, 61, 63, 254, 96, 62, 89, 104, 3, 190, 39, 214, 95, 190, 107, 196, 243, 189, 134, 207, 29, 191, 194, 177, 32, 62, 117, 216, 130, 190, 196, 42, 165, 62, 145, 116, 36, 191, 240, 251, 94, 62, 125, 56, 77, 190, 69, 206, 119, 62, 41, 54, 86, 190, 55, 211, 201, 189, 219, 97, 250, 61, 156, 229, 156, 62, 240, 71, 241, 190, 64, 141, 23, 189, 151, 62, 243, 189, 62, 98, 166, 61, 60, 220, 6, 62, 129, 46, 11, 189, 80, 223, 189, 61, 82, 47, 154, 189, 229, 156, 96, 62, 24, 45, 5, 190, 144, 15, 132, 59, 164, 145, 86, 62, 200, 18, 220, 60, 229, 104, 157, 61, 95, 83, 204, 189, 164, 20, 211, 189, 76, 191, 5, 62, 201, 228, 101, 190, 211, 162, 191, 190, 212, 180, 230, 62, 184, 3, 174, 61, 185, 231, 150, 190, 47, 123, 167, 190, 143, 62, 74, 189, 231, 150, 231, 190, 122, 207, 152, 190, 64, 134, 152, 190, 135, 210, 245, 189, 145, 90, 151, 189, 93, 131, 63, 62, 183, 178, 31, 62, 128, 244, 70, 189, 196, 70, 19, 62, 184, 100, 176, 189, 150, 21, 200, 188, 87, 233, 6, 189, 78, 80, 112, 190, 174, 149, 130, 190, 206, 154, 153, 190, 100, 211, 215, 189, 11, 241, 27, 62, 200, 113, 159, 189, 25, 233, 24, 62, 165, 44, 189, 62, 83, 153, 35, 191, 96, 173, 129, 62, 146, 231, 4, 191, 157, 80, 127, 190, 251, 225, 166, 189, 221, 170, 64, 62, 242, 127, 222, 190, 94, 18, 49, 62, 234, 179, 93, 62, 238, 226, 180, 189, 69, 75, 85, 191, 208, 143, 236, 190, 211, 73, 4, 61, 143, 223, 134, 190, 248, 162, 240, 189, 11, 193, 164, 61, 140, 195, 26, 189, 54, 199, 243, 61, 22, 53, 24, 62, 130, 45, 64, 190, 161, 51, 121, 188, 61, 133, 199, 61, 146, 98, 129, 190, 185, 217, 140, 189, 148, 129, 175, 61, 238, 192, 42, 58, 197, 223, 190, 61, 120, 72, 34, 62, 11, 244, 128, 188, 132, 226, 67, 188, 186, 139, 145, 190, 239, 31, 63, 62, 109, 146, 176, 61, 73, 113, 103, 189, 202, 113, 95, 189, 108, 90, 74, 190, 150, 84, 252, 188, 78, 19, 56, 59, 39, 212, 72, 190, 213, 61, 182, 60, 238, 153, 237, 61, 30, 133, 21, 189, 3, 24, 217, 190, 98, 200, 149, 62, 113, 20, 60, 190, 140, 119, 118, 189, 149, 209, 247, 189, 228, 37, 16, 191, 103, 97, 7, 190, 143, 70, 27, 62, 246, 33, 230, 61, 15, 44, 6, 189, 119, 170, 138, 189, 165, 185, 223, 189, 192, 102, 89, 189, 238, 224, 187, 61, 133, 46, 70, 189, 159, 121, 173, 61, 204, 180, 200, 190, 192, 254, 237, 187, 43, 21, 29, 61, 30, 227, 37, 62, 136, 132, 218, 188, 104, 152, 137, 61, 43, 26, 213, 190, 241, 120, 162, 62, 121, 53, 106, 190, 111, 37, 68, 62, 13, 193, 71, 61, 139, 30, 176, 62, 112, 224, 135, 190, 103, 239, 122, 188, 221, 15, 142, 62, 184, 158, 130, 60, 189, 149, 176, 190, 39, 176, 93, 190, 166, 231, 93, 190, 178, 130, 219, 61, 21, 57, 109, 189, 97, 12, 187, 189, 77, 118, 134, 191, 56, 38, 180, 189, 126, 139, 198, 189, 208, 138, 124, 189, 151, 75, 154, 62, 251, 53, 97, 191, 176, 59, 93, 61, 96, 36, 192, 190, 203, 43, 155, 60, 40, 228, 19, 62, 15, 143, 33, 61, 110, 147, 43, 61, 19, 194, 197, 190, 165, 79, 253, 61, 113, 53, 138, 62, 60, 177, 27, 61, 217, 55, 73, 62, 135, 103, 73, 62, 248, 200, 48, 62, 192, 57, 126, 189, 227, 199, 16, 190, 10, 174, 95, 62, 64, 75, 163, 61, 65, 199, 11, 62, 232, 51, 217, 61, 118, 60, 191, 61, 78, 208, 18, 190, 60, 46, 44, 189, 201, 152, 95, 61, 134, 96, 158, 188, 162, 253, 140, 191, 130, 197, 72, 190, 58, 163, 21, 190, 61, 76, 17, 190, 185, 81, 125, 62, 65, 144, 167, 62, 39, 40, 145, 62, 226, 186, 145, 190, 94, 57, 94, 189, 125, 199, 167, 62, 35, 89, 12, 189, 229, 83, 168, 189, 224, 116, 75, 189, 63, 107, 39, 62, 47, 249, 41, 62, 73, 234, 187, 61, 237, 48, 197, 190, 1, 62, 227, 188, 131, 71, 217, 190, 73, 191, 35, 62, 149, 59, 78, 191, 199, 17, 65, 62, 39, 14, 210, 61, 144, 187, 6, 62, 226, 36, 215, 190, 79, 20, 242, 62, 252, 15, 17, 62, 51, 14, 61, 189, 98, 7, 247, 190, 166, 77, 140, 62, 41, 135, 164, 189, 218, 8, 88, 62, 250, 52, 86, 62, 160, 37, 87, 61, 128, 204, 194, 61, 227, 108, 143, 62, 166, 77, 181, 190, 184, 30, 64, 189, 203, 190, 48, 62, 145, 56, 49, 190, 241, 188, 136, 190, 165, 222, 120, 191, 34, 116, 85, 190, 246, 183, 80, 189, 167, 53, 97, 62, 247, 62, 169, 189, 61, 121, 190, 62, 101, 243, 62, 62, 112, 183, 239, 61, 251, 201, 79, 61, 225, 69, 58, 62, 158, 72, 204, 62, 230, 56, 78, 189, 165, 115, 4, 190, 167, 21, 195, 190, 127, 150, 74, 61, 190, 168, 80, 62, 174, 171, 19, 189, 220, 55, 159, 62, 153, 153, 148, 60, 123, 120, 14, 191, 151, 173, 24, 191, 123, 139, 69, 62, 105, 120, 132, 189, 79, 157, 86, 62, 173, 102, 247, 187, 149, 183, 99, 62, 86, 240, 106, 187, 230, 15, 24, 62, 39, 24, 139, 62, 237, 18, 11, 62, 64, 230, 13, 189, 30, 92, 45, 190, 228, 186, 173, 189, 191, 152, 159, 189, 114, 12, 132, 62, 237, 246, 53, 190, 18, 58, 54, 62, 9, 139, 131, 62, 15, 6, 134, 61, 31, 86, 111, 62, 242, 9, 231, 189, 15, 223, 170, 61, 107, 106, 79, 61, 240, 174, 77, 61, 9, 0, 94, 189, 32, 2, 87, 62, 88, 36, 168, 188, 205, 200, 50, 62, 240, 250, 83, 190, 20, 82, 182, 59, 236, 128, 170, 190, 187, 74, 240, 189, 159, 48, 181, 61, 151, 213, 45, 61, 186, 125, 117, 190, 97, 246, 30, 190, 152, 215, 173, 186, 55, 66, 50, 62, 244, 81, 144, 61, 235, 249, 182, 61, 120, 194, 210, 60, 125, 131, 83, 190, 175, 89, 98, 61, 63, 129, 2, 61, 128, 163, 86, 189, 13, 60, 100, 189, 81, 6, 147, 189, 147, 255, 116, 189, 213, 119, 14, 188, 48, 52, 87, 60, 231, 227, 243, 189, 64, 96, 203, 62, 28, 222, 19, 62, 133, 207, 11, 60, 187, 250, 203, 61, 184, 171, 13, 61, 94, 168, 71, 62, 249, 225, 168, 61, 156, 244, 33, 190, 138, 196, 2, 62, 34, 227, 129, 61, 136, 135, 36, 190, 146, 235, 37, 190, 50, 88, 181, 190, 131, 124, 219, 61, 135, 104, 251, 59, 59, 178, 148, 189, 178, 136, 15, 191, 56, 144, 103, 190, 148, 104, 147, 190, 154, 48, 30, 189, 87, 12, 137, 62, 42, 56, 157, 61, 35, 22, 49, 190, 205, 65, 192, 190, 132, 127, 213, 189, 214, 148, 172, 62, 19, 184, 199, 189, 190, 93, 216, 189, 66, 71, 33, 190, 115, 37, 140, 189, 14, 200, 246, 189, 130, 201, 212, 186, 238, 236, 192, 190, 224, 35, 236, 189, 78, 140, 130, 190, 197, 231, 209, 188, 73, 201, 163, 190, 228, 188, 36, 62, 135, 166, 90, 62, 174, 220, 146, 62, 182, 136, 198, 190, 151, 142, 56, 190, 26, 223, 83, 62, 149, 161, 2, 63, 59, 102, 6, 191, 153, 247, 211, 62, 131, 127, 146, 190, 89, 41, 252, 62, 101, 232, 1, 189, 64, 42, 76, 190, 83, 157, 208, 60, 215, 53, 123, 191, 244, 159, 32, 188, 57, 231, 103, 189, 93, 1, 72, 60, 210, 52, 59, 189, 248, 165, 140, 189, 120, 62, 192, 189, 153, 71, 194, 190, 204, 48, 131, 62, 53, 217, 21, 190, 159, 163, 146, 62, 153, 92, 63, 191, 174, 52, 30, 62, 24, 88, 222, 60, 31, 120, 86, 61, 106, 118, 246, 189, 233, 69, 20, 191, 220, 11, 203, 61, 23, 74, 181, 60, 59, 144, 194, 190, 221, 135, 192, 62, 206, 89, 33, 62, 103, 112, 136, 59, 71, 52, 36, 61, 129, 219, 163, 188, 92, 101, 44, 61, 147, 151, 19, 190, 208, 88, 0, 62, 198, 195, 72, 190, 210, 194, 20, 190, 101, 212, 171, 62, 151, 69, 134, 61, 132, 217, 7, 62, 74, 212, 25, 62, 176, 14, 150, 62, 111, 229, 141, 189, 23, 224, 98, 190, 244, 87, 141, 189, 93, 194, 11, 62, 219, 151, 134, 189, 14, 4, 9, 190, 47, 16, 108, 62, 163, 244, 163, 187, 74, 53, 149, 61, 212, 132, 136, 190, 82, 114, 98, 189, 46, 25, 13, 62, 0, 15, 92, 62, 229, 18, 22, 190, 203, 116, 94, 190, 173, 131, 16, 62, 237, 46, 51, 61, 247, 95, 3, 189, 1, 31, 47, 190, 110, 117, 0, 62, 239, 121, 19, 190, 195, 100, 139, 62, 157, 26, 134, 190, 45, 100, 47, 62, 2, 176, 99, 61, 118, 79, 128, 62, 36, 13, 79, 60, 25, 92, 46, 190, 215, 83, 242, 190, 51, 163, 178, 191, 253, 19, 129, 62, 89, 93, 134, 61, 68, 37, 150, 62, 3, 76, 133, 188, 87, 44, 231, 190, 23, 195, 138, 62, 28, 49, 219, 189, 98, 255, 177, 62, 218, 102, 113, 189, 12, 108, 25, 62, 96, 103, 138, 191, 197, 197, 44, 62, 207, 50, 140, 190, 16, 44, 86, 61, 184, 90, 67, 189, 20, 30, 24, 191, 238, 114, 5, 62, 204, 88, 102, 190, 176, 38, 109, 189, 191, 112, 233, 62, 101, 236, 112, 61, 239, 39, 228, 190, 235, 230, 48, 62, 107, 205, 48, 190, 19, 253, 84, 190, 239, 22, 59, 191, 10, 72, 174, 61, 196, 86, 227, 189, 8, 210, 53, 191, 26, 48, 46, 190, 65, 14, 148, 189, 155, 224, 142, 190, 91, 204, 239, 61, 99, 103, 198, 61, 129, 238, 112, 59, 131, 242, 125, 190, 6, 125, 182, 190, 183, 39, 94, 62, 67, 158, 176, 189, 176, 181, 228, 189, 122, 86, 124, 61, 181, 224, 130, 61, 31, 4, 22, 62, 28, 21, 7, 62, 189, 110, 117, 190, 171, 235, 0, 188, 52, 14, 108, 190, 66, 26, 196, 61, 231, 85, 58, 191, 215, 200, 203, 188, 73, 220, 67, 62, 87, 35, 152, 61, 105, 232, 95, 191, 229, 239, 132, 190, 92, 92, 90, 189, 250, 246, 204, 61, 193, 156, 220, 190, 207, 52, 159, 62, 122, 243, 19, 61, 183, 163, 137, 189, 69, 17, 216, 61, 46, 27, 110, 190, 192, 34, 129, 62, 203, 13, 100, 191, 48, 118, 238, 60, 247, 6, 164, 61, 45, 5, 163, 185, 67, 186, 92, 61, 189, 225, 147, 189, 3, 251, 19, 190, 70, 75, 89, 190, 59, 10, 72, 62, 193, 90, 112, 61, 85, 76, 104, 189, 193, 72, 133, 189, 0, 251, 135, 60, 250, 37, 244, 62, 8, 120, 8, 190, 18, 203, 52, 190, 173, 4, 131, 190, 252, 7, 246, 61, 47, 102, 13, 190, 255, 91, 75, 190, 153, 106, 167, 189, 135, 67, 175, 62, 192, 220, 253, 188, 162, 133, 119, 190, 110, 247, 143, 190, 13, 167, 134, 190, 111, 104, 201, 188, 73, 200, 209, 61, 136, 251, 237, 188, 20, 48, 69, 190, 165, 184, 110, 62, 202, 225, 23, 190, 159, 228, 172, 61, 70, 158, 156, 61, 52, 194, 52, 62, 237, 126, 79, 190, 210, 255, 165, 190, 201, 97, 92, 190, 206, 194, 108, 62, 232, 0, 10, 62, 7, 226, 151, 189, 186, 108, 173, 62, 158, 144, 31, 189, 254, 15, 8, 190, 69, 40, 86, 190, 98, 109, 153, 189, 129, 180, 107, 61, 20, 189, 78, 62, 104, 142, 51, 61, 91, 142, 55, 190, 33, 75, 124, 61, 123, 71, 120, 62, 217, 162, 224, 189, 94, 122, 205, 189, 144, 26, 136, 61, 26, 28, 205, 189, 198, 239, 161, 62, 146, 166, 5, 191, 141, 65, 7, 189, 152, 81, 93, 189, 154, 192, 92, 62, 112, 249, 91, 191, 123, 208, 163, 190, 211, 50, 241, 189, 98, 140, 142, 189, 47, 232, 181, 60, 121, 68, 1, 59, 147, 24, 159, 190, 252, 138, 75, 190, 189, 215, 1, 61, 233, 231, 40, 189, 158, 195, 172, 61, 183, 2, 132, 189, 203, 242, 41, 190, 110, 11, 132, 189, 245, 97, 29, 62, 80, 33, 245, 189, 96, 221, 175, 190, 0, 71, 128, 60, 147, 54, 149, 188, 14, 121, 153, 189, 246, 86, 27, 191, 211, 174, 238, 189, 145, 11, 59, 62, 196, 254, 242, 61, 90, 126, 52, 191, 112, 201, 0, 191, 198, 128, 129, 61, 7, 181, 55, 61, 171, 3, 72, 190, 100, 79, 161, 62, 84, 116, 153, 190, 224, 65, 156, 189, 49, 79, 176, 61, 71, 2, 59, 190, 185, 253, 5, 190, 136, 21, 216, 189, 188, 226, 213, 61, 222, 47, 153, 60, 178, 221, 212, 189, 227, 26, 140, 60, 134, 90, 187, 59, 171, 115, 153, 189, 183, 85, 50, 190, 20, 216, 129, 60, 84, 52, 48, 190, 191, 168, 58, 190, 26, 8, 41, 188, 252, 80, 132, 59, 141, 157, 17, 61, 249, 5, 26, 190, 68, 124, 67, 186, 36, 171, 167, 60, 240, 92, 214, 189, 16, 91, 13, 62, 6, 222, 50, 188, 213, 28, 1, 62, 248, 225, 43, 188, 184, 176, 180, 61, 46, 120, 112, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 29, 15, 74, 189, 238, 209, 15, 190, 215, 240, 53, 59, 189, 238, 39, 62, 238, 3, 212, 189, 68, 45, 144, 60, 220, 136, 82, 190, 127, 87, 175, 62, 21, 244, 83, 190, 160, 244, 25, 189, 116, 31, 31, 190, 197, 173, 219, 60, 18, 184, 1, 190, 38, 27, 35, 190, 15, 170, 142, 62, 107, 62, 177, 60, 28, 36, 174, 188, 14, 93, 185, 190, 18, 50, 51, 62, 156, 247, 71, 61, 69, 75, 170, 189, 41, 246, 24, 189, 40, 165, 51, 190, 208, 159, 189, 188, 81, 96, 91, 62, 204, 210, 124, 190, 131, 163, 6, 189, 194, 69, 160, 62, 191, 179, 206, 189, 49, 74, 130, 189, 4, 27, 26, 191, 165, 6, 135, 62, 198, 157, 97, 190, 32, 37, 247, 61, 71, 180, 132, 190, 195, 1, 22, 61, 66, 5, 125, 187, 127, 211, 7, 190, 100, 196, 17, 189, 1, 157, 65, 188, 255, 31, 114, 191, 2, 220, 92, 62, 247, 53, 237, 62, 69, 42, 248, 189, 219, 122, 21, 189, 95, 196, 102, 190, 216, 87, 210, 189, 31, 110, 142, 190, 25, 95, 32, 62, 152, 3, 7, 191, 207, 255, 64, 62, 180, 239, 179, 62, 251, 63, 81, 190, 196, 133, 41, 62, 249, 59, 249, 189, 93, 107, 65, 189, 211, 180, 194, 60, 247, 14, 168, 190, 248, 202, 131, 188, 141, 184, 189, 62, 55, 205, 87, 190, 107, 174, 163, 190, 245, 15, 164, 62, 129, 153, 210, 189, 2, 35, 38, 188, 108, 224, 121, 188, 85, 154, 129, 59, 115, 153, 213, 59, 181, 161, 138, 189, 127, 185, 147, 61, 59, 136, 20, 189, 61, 225, 4, 189, 6, 161, 143, 189, 185, 235, 198, 189, 208, 38, 16, 190, 244, 244, 82, 189, 182, 52, 20, 62, 48, 161, 175, 189, 196, 116, 205, 60, 130, 46, 156, 61, 14, 84, 79, 189, 199, 133, 101, 189, 250, 119, 17, 190, 147, 69, 83, 61, 88, 160, 213, 58, 241, 84, 17, 62, 12, 126, 60, 61, 48, 195, 14, 190, 246, 123, 67, 190, 177, 137, 2, 189, 108, 192, 28, 189, 83, 234, 174, 189, 203, 71, 47, 189, 77, 239, 170, 58, 195, 124, 152, 187, 97, 236, 63, 60, 50, 98, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 57, 128, 189, 180, 77, 116, 62, 105, 188, 117, 190, 67, 204, 146, 59, 88, 8, 136, 62, 224, 145, 52, 190, 10, 86, 129, 189, 32, 246, 133, 61, 43, 10, 166, 62, 126, 6, 93, 62, 235, 253, 149, 189, 209, 174, 25, 62, 151, 245, 59, 62, 176, 82, 87, 62, 156, 203, 68, 187, 226, 36, 213, 189, 104, 192, 28, 59, 101, 2, 242, 189, 74, 191, 71, 60, 144, 251, 129, 62, 123, 170, 147, 61, 103, 1, 62, 61, 202, 53, 15, 189, 203, 147, 15, 62, 98, 83, 35, 61, 96, 200, 110, 62, 203, 0, 133, 189, 226, 178, 182, 61, 62, 237, 140, 189, 210, 189, 50, 62, 28, 251, 225, 189, 251, 48, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 237, 213, 190, 39, 181, 101, 190, 169, 81, 54, 63, 244, 83, 7, 63, 38, 68, 12, 61, 160, 211, 208, 61, 95, 156, 11, 63, 206, 48, 7, 191, 6, 171, 7, 189, 109, 206, 169, 61, 229, 146, 217, 190, 167, 224, 255, 189, 60, 237, 20, 191, 127, 75, 117, 189, 154, 253, 59, 190, 214, 201, 73, 190, 93, 193, 4, 191, 56, 210, 60, 190, 136, 44, 214, 61, 0, 153, 148, 60, 39, 87, 193, 190, 188, 176, 160, 62, 71, 177, 13, 190, 192, 102, 140, 63, 224, 91, 238, 190, 134, 63, 143, 62, 130, 214, 173, 190, 99, 177, 7, 190, 229, 201, 8, 62, 2, 132, 211, 189, 100, 55, 149, 190, 10, 60, 49, 189, 9, 222, 7, 63, 13, 117, 38, 62, 158, 240, 174, 62, 13, 16, 157, 62, 39, 155, 132, 190, 143, 193, 210, 61, 192, 69, 254, 59, 241, 7, 102, 189, 171, 141, 206, 190, 222, 21, 142, 190, 71, 47, 191, 189, 7, 156, 73, 190, 83, 139, 123, 189, 42, 200, 247, 189, 216, 85, 112, 57, 134, 149, 183, 189, 135, 83, 57, 62, 253, 186, 207, 60, 31, 104, 131, 190, 160, 247, 106, 190, 53, 117, 9, 63, 195, 210, 118, 62, 190, 95, 212, 61, 193, 33, 19, 62, 107, 89, 213, 61, 75, 132, 11, 59, 144, 151, 86, 62, 26, 97, 216, 189, 97, 136, 92, 189, 4, 244, 165, 190, 113, 92, 250, 62, 212, 74, 192, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 237, 11, 62, 49, 64, 135, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {241, 254, 59, 63, 236, 103, 20, 191, 169, 28, 98, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 142, 25, 63, 133, 175, 185, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}