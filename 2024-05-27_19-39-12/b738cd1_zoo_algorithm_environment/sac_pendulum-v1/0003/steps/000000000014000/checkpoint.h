// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 34, 133, 190, 43, 185, 178, 62, 24, 83, 63, 63, 78, 54, 216, 61, 191, 33, 7, 191, 21, 233, 196, 62, 209, 150, 19, 63, 226, 38, 122, 191, 87, 162, 233, 190, 254, 253, 146, 190, 11, 81, 214, 191, 212, 181, 160, 190, 155, 175, 22, 191, 123, 127, 134, 189, 39, 120, 128, 190, 51, 99, 40, 63, 120, 178, 46, 190, 4, 113, 64, 61, 145, 198, 66, 191, 245, 238, 0, 191, 215, 213, 170, 61, 200, 19, 3, 63, 53, 77, 92, 191, 72, 210, 16, 191, 126, 175, 231, 62, 169, 221, 8, 61, 142, 67, 138, 190, 18, 123, 11, 190, 14, 93, 71, 63, 200, 46, 170, 190, 232, 173, 2, 63, 168, 62, 236, 61, 59, 12, 238, 190, 252, 121, 184, 190, 172, 229, 73, 63, 90, 93, 17, 62, 60, 62, 177, 62, 212, 203, 198, 190, 45, 100, 9, 63, 153, 1, 29, 191, 110, 221, 117, 62, 25, 114, 246, 60, 32, 173, 91, 62, 85, 110, 150, 191, 248, 171, 104, 190, 246, 121, 103, 191, 8, 219, 69, 190, 97, 137, 23, 60, 102, 142, 222, 62, 6, 96, 93, 191, 54, 239, 187, 62, 113, 226, 109, 61, 206, 23, 138, 191, 234, 41, 17, 62, 224, 173, 56, 190, 138, 253, 4, 191, 189, 82, 222, 62, 86, 224, 50, 62, 190, 144, 211, 191, 57, 132, 164, 190, 170, 26, 112, 190, 22, 245, 20, 190, 134, 60, 10, 63, 199, 155, 3, 63, 218, 216, 158, 63, 52, 19, 144, 62, 89, 234, 1, 63, 84, 32, 143, 62, 172, 82, 173, 190, 148, 167, 130, 191, 159, 180, 253, 61, 185, 87, 209, 59, 203, 241, 30, 62, 255, 73, 207, 190, 154, 181, 156, 62, 251, 83, 183, 189, 100, 44, 220, 190, 168, 239, 158, 62, 124, 123, 9, 191, 175, 159, 49, 191, 115, 5, 65, 190, 3, 31, 114, 63, 114, 203, 102, 63, 74, 177, 197, 62, 64, 214, 45, 63, 53, 193, 239, 190, 136, 169, 106, 190, 25, 150, 44, 63, 199, 108, 230, 62, 24, 67, 114, 61, 171, 13, 36, 191, 135, 59, 31, 191, 213, 80, 172, 62, 201, 28, 57, 63, 96, 246, 129, 63, 39, 86, 253, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 181, 243, 189, 165, 204, 138, 190, 92, 40, 22, 189, 235, 32, 48, 190, 159, 81, 44, 61, 12, 217, 181, 62, 181, 180, 68, 62, 243, 100, 39, 190, 204, 56, 128, 191, 101, 104, 77, 61, 18, 148, 129, 62, 48, 111, 137, 62, 127, 171, 51, 191, 46, 135, 43, 63, 190, 206, 13, 62, 222, 226, 194, 62, 226, 177, 19, 63, 102, 144, 180, 62, 235, 31, 243, 190, 159, 66, 56, 62, 95, 45, 121, 188, 195, 21, 247, 189, 118, 243, 201, 62, 6, 204, 63, 61, 1, 177, 194, 62, 44, 172, 252, 61, 250, 89, 119, 62, 139, 8, 129, 191, 162, 85, 17, 191, 100, 170, 3, 63, 7, 147, 168, 189, 72, 156, 8, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 87, 190, 189, 82, 39, 202, 187, 40, 137, 217, 188, 60, 240, 138, 189, 198, 209, 105, 189, 146, 86, 73, 62, 96, 83, 101, 190, 111, 102, 23, 188, 205, 38, 167, 59, 165, 51, 138, 190, 241, 34, 163, 187, 241, 128, 5, 191, 148, 169, 111, 62, 117, 190, 182, 190, 180, 224, 39, 191, 43, 196, 85, 190, 43, 132, 0, 62, 154, 132, 15, 62, 30, 122, 19, 189, 226, 106, 102, 191, 113, 125, 65, 62, 21, 189, 96, 62, 187, 88, 5, 62, 69, 248, 25, 191, 151, 218, 188, 61, 199, 16, 58, 190, 17, 53, 95, 190, 29, 27, 155, 62, 55, 98, 136, 190, 57, 233, 34, 62, 135, 153, 253, 189, 187, 104, 195, 62, 186, 59, 6, 191, 97, 205, 159, 62, 45, 101, 143, 190, 166, 123, 204, 61, 123, 255, 18, 62, 16, 247, 129, 62, 112, 203, 53, 190, 198, 2, 244, 189, 20, 185, 148, 190, 118, 105, 95, 62, 201, 187, 38, 189, 63, 219, 202, 189, 255, 161, 108, 62, 254, 116, 99, 188, 97, 29, 47, 190, 189, 128, 150, 187, 239, 50, 64, 61, 218, 235, 194, 62, 103, 244, 85, 189, 190, 2, 91, 189, 126, 155, 228, 190, 179, 219, 72, 62, 235, 223, 36, 62, 238, 212, 122, 62, 8, 231, 10, 190, 48, 150, 203, 62, 29, 171, 50, 190, 104, 126, 46, 61, 166, 134, 98, 191, 59, 142, 217, 61, 71, 39, 101, 190, 62, 177, 80, 188, 21, 210, 96, 60, 9, 53, 51, 61, 12, 181, 133, 189, 12, 171, 129, 189, 161, 219, 136, 190, 220, 32, 169, 60, 86, 120, 186, 61, 187, 69, 23, 189, 54, 207, 98, 62, 29, 123, 64, 190, 162, 106, 139, 190, 138, 156, 249, 190, 132, 220, 210, 190, 22, 147, 185, 189, 47, 10, 20, 62, 3, 143, 108, 61, 40, 26, 93, 62, 174, 96, 207, 62, 90, 143, 131, 189, 133, 104, 175, 188, 142, 176, 81, 62, 80, 235, 16, 191, 25, 113, 34, 187, 216, 23, 92, 62, 143, 116, 80, 61, 34, 57, 89, 60, 168, 209, 202, 190, 93, 81, 130, 191, 213, 230, 141, 190, 80, 164, 86, 62, 88, 187, 230, 62, 232, 157, 23, 191, 111, 237, 22, 190, 203, 84, 0, 190, 37, 83, 2, 62, 114, 107, 138, 190, 10, 145, 198, 189, 85, 168, 68, 60, 174, 45, 220, 190, 165, 134, 157, 62, 166, 77, 199, 62, 140, 84, 51, 62, 166, 85, 182, 61, 103, 4, 135, 190, 105, 121, 31, 62, 245, 55, 11, 190, 231, 125, 74, 62, 184, 58, 21, 191, 240, 36, 50, 190, 93, 195, 173, 62, 159, 250, 68, 61, 59, 228, 234, 61, 70, 24, 202, 189, 50, 171, 135, 190, 79, 108, 173, 189, 64, 71, 187, 190, 214, 89, 250, 61, 28, 83, 72, 190, 144, 32, 162, 190, 214, 212, 82, 190, 30, 52, 25, 63, 99, 56, 81, 62, 143, 73, 218, 189, 246, 16, 35, 190, 245, 247, 139, 189, 37, 253, 235, 186, 100, 54, 119, 59, 228, 89, 116, 190, 240, 59, 67, 61, 204, 164, 9, 62, 182, 253, 72, 62, 115, 90, 112, 188, 98, 203, 213, 61, 166, 98, 184, 61, 110, 254, 14, 62, 202, 51, 115, 187, 158, 143, 23, 190, 162, 110, 26, 62, 225, 215, 165, 189, 251, 157, 226, 189, 218, 122, 20, 62, 161, 42, 60, 62, 65, 0, 146, 189, 12, 244, 94, 57, 70, 85, 135, 189, 106, 57, 139, 189, 251, 136, 64, 62, 98, 41, 67, 62, 142, 71, 251, 186, 81, 187, 171, 61, 244, 41, 57, 61, 185, 9, 250, 190, 28, 72, 232, 190, 157, 156, 22, 190, 151, 0, 10, 62, 46, 20, 176, 189, 121, 87, 13, 62, 143, 15, 21, 189, 161, 184, 8, 62, 87, 40, 97, 60, 59, 174, 199, 61, 188, 165, 233, 189, 81, 200, 193, 61, 219, 194, 48, 190, 16, 242, 128, 61, 68, 207, 15, 60, 173, 145, 198, 189, 57, 43, 57, 189, 238, 177, 15, 62, 93, 196, 189, 189, 98, 190, 216, 61, 14, 26, 145, 188, 237, 159, 39, 190, 248, 226, 16, 190, 47, 105, 213, 189, 32, 100, 86, 189, 128, 199, 148, 189, 173, 138, 214, 61, 3, 15, 209, 60, 128, 50, 67, 61, 223, 180, 22, 62, 128, 157, 217, 188, 22, 140, 184, 189, 214, 190, 201, 189, 176, 21, 37, 62, 106, 220, 170, 189, 48, 106, 44, 60, 139, 187, 14, 190, 165, 67, 216, 189, 14, 222, 71, 190, 166, 233, 132, 62, 208, 168, 157, 190, 249, 118, 203, 187, 127, 106, 179, 60, 169, 238, 92, 62, 254, 23, 161, 62, 166, 250, 158, 62, 189, 208, 129, 190, 77, 40, 207, 186, 17, 234, 14, 191, 183, 174, 201, 190, 133, 22, 156, 189, 84, 41, 58, 62, 184, 161, 65, 189, 18, 202, 0, 63, 28, 105, 200, 62, 177, 8, 233, 188, 106, 28, 26, 62, 146, 177, 56, 62, 193, 50, 29, 191, 105, 38, 9, 62, 137, 251, 88, 190, 5, 107, 104, 62, 160, 74, 226, 60, 181, 88, 180, 189, 35, 128, 131, 191, 51, 160, 146, 62, 115, 17, 197, 61, 225, 19, 68, 62, 82, 236, 80, 191, 20, 90, 146, 190, 250, 237, 127, 190, 223, 117, 152, 190, 110, 187, 20, 62, 133, 238, 54, 190, 99, 75, 159, 62, 117, 94, 22, 191, 213, 16, 65, 189, 11, 80, 202, 189, 22, 185, 110, 62, 81, 237, 5, 62, 137, 85, 130, 61, 237, 104, 191, 189, 148, 93, 217, 189, 151, 116, 136, 189, 11, 236, 221, 190, 240, 133, 201, 62, 155, 173, 211, 62, 154, 109, 92, 190, 153, 178, 129, 191, 77, 192, 138, 61, 72, 166, 117, 61, 232, 160, 156, 187, 170, 217, 169, 190, 46, 249, 14, 188, 70, 161, 15, 190, 166, 149, 72, 60, 39, 165, 109, 190, 23, 62, 77, 191, 106, 198, 199, 62, 1, 191, 166, 189, 17, 124, 196, 61, 139, 94, 19, 189, 91, 166, 148, 61, 213, 51, 172, 189, 56, 8, 133, 59, 1, 14, 7, 61, 167, 248, 209, 61, 240, 106, 173, 62, 87, 97, 132, 61, 242, 207, 87, 189, 245, 179, 31, 62, 147, 88, 129, 62, 234, 55, 27, 61, 117, 174, 69, 61, 199, 112, 1, 62, 108, 174, 28, 62, 42, 223, 23, 62, 222, 65, 40, 190, 189, 5, 225, 189, 157, 230, 37, 62, 137, 37, 0, 190, 237, 133, 185, 189, 117, 229, 144, 62, 157, 88, 159, 61, 250, 72, 18, 61, 99, 222, 173, 188, 255, 132, 53, 62, 162, 192, 157, 60, 197, 93, 168, 189, 14, 231, 4, 191, 162, 219, 105, 62, 188, 191, 99, 190, 158, 198, 63, 62, 76, 208, 239, 189, 153, 164, 137, 189, 213, 171, 64, 62, 76, 180, 44, 190, 254, 221, 21, 62, 73, 242, 111, 189, 0, 52, 41, 189, 220, 216, 111, 62, 13, 248, 185, 187, 84, 238, 1, 190, 181, 41, 61, 61, 106, 15, 20, 60, 55, 92, 58, 189, 79, 85, 146, 62, 101, 111, 183, 59, 176, 211, 55, 62, 63, 244, 165, 62, 227, 88, 235, 189, 145, 159, 255, 189, 204, 196, 172, 189, 82, 224, 93, 62, 194, 103, 152, 61, 53, 24, 139, 61, 149, 163, 169, 188, 67, 206, 106, 61, 118, 160, 93, 61, 41, 128, 200, 189, 175, 216, 58, 190, 71, 21, 114, 190, 23, 108, 193, 61, 72, 168, 49, 62, 253, 217, 170, 190, 30, 251, 226, 61, 219, 77, 168, 190, 201, 193, 171, 61, 53, 124, 184, 190, 150, 42, 202, 190, 78, 227, 146, 62, 191, 55, 120, 190, 33, 126, 23, 190, 120, 6, 192, 190, 52, 15, 200, 59, 82, 255, 98, 62, 213, 175, 133, 61, 131, 75, 68, 190, 45, 127, 227, 189, 39, 63, 18, 187, 232, 55, 5, 190, 215, 152, 229, 60, 76, 35, 218, 190, 0, 235, 2, 190, 87, 191, 135, 191, 148, 10, 126, 59, 100, 250, 50, 61, 78, 86, 126, 62, 219, 182, 3, 191, 64, 221, 28, 190, 194, 46, 144, 61, 60, 243, 68, 191, 19, 208, 205, 61, 180, 76, 241, 190, 135, 138, 171, 62, 42, 195, 19, 191, 131, 229, 66, 62, 109, 116, 34, 190, 248, 121, 137, 62, 139, 57, 26, 190, 27, 225, 141, 188, 134, 237, 215, 61, 166, 238, 166, 62, 191, 79, 61, 191, 151, 21, 140, 60, 255, 203, 59, 190, 18, 80, 165, 61, 19, 211, 28, 62, 129, 58, 18, 189, 204, 66, 48, 62, 237, 219, 18, 190, 200, 134, 118, 62, 151, 249, 140, 190, 241, 3, 38, 189, 149, 121, 37, 62, 109, 113, 213, 59, 72, 187, 91, 61, 6, 30, 152, 189, 29, 147, 143, 60, 8, 163, 20, 62, 39, 53, 147, 190, 149, 241, 173, 190, 161, 13, 238, 62, 111, 239, 199, 61, 18, 251, 42, 190, 55, 87, 121, 190, 68, 0, 220, 188, 170, 162, 20, 191, 87, 191, 140, 189, 50, 67, 220, 190, 110, 158, 205, 190, 245, 219, 215, 189, 149, 201, 51, 62, 104, 142, 41, 62, 215, 236, 24, 191, 208, 116, 169, 61, 41, 66, 197, 189, 250, 123, 155, 61, 40, 182, 162, 189, 131, 161, 118, 190, 251, 80, 189, 190, 189, 130, 105, 190, 146, 239, 80, 190, 14, 173, 220, 61, 240, 122, 38, 190, 162, 255, 78, 190, 208, 134, 163, 62, 76, 131, 130, 191, 187, 47, 103, 62, 126, 24, 38, 191, 241, 202, 129, 190, 60, 162, 219, 189, 57, 12, 144, 61, 43, 70, 58, 191, 168, 68, 44, 61, 61, 159, 56, 62, 238, 226, 180, 189, 254, 1, 68, 191, 143, 167, 56, 191, 2, 48, 199, 61, 143, 223, 134, 190, 213, 101, 7, 191, 127, 168, 143, 190, 152, 144, 173, 61, 131, 176, 138, 62, 164, 98, 231, 61, 65, 50, 94, 190, 45, 134, 213, 189, 95, 22, 60, 62, 219, 188, 218, 190, 215, 186, 31, 190, 171, 11, 223, 61, 188, 233, 205, 189, 41, 243, 195, 61, 110, 129, 98, 61, 160, 143, 46, 62, 41, 28, 67, 189, 5, 27, 27, 191, 216, 243, 243, 62, 210, 99, 115, 190, 210, 76, 170, 61, 254, 10, 137, 190, 26, 160, 235, 190, 157, 66, 216, 188, 168, 71, 129, 189, 232, 25, 22, 191, 118, 129, 198, 189, 173, 202, 21, 62, 232, 107, 138, 189, 154, 104, 28, 190, 63, 216, 116, 62, 79, 222, 25, 190, 61, 114, 164, 190, 15, 168, 156, 190, 175, 73, 86, 191, 126, 124, 223, 189, 207, 188, 99, 62, 98, 211, 36, 62, 178, 166, 42, 191, 127, 45, 62, 189, 44, 212, 158, 189, 246, 162, 199, 189, 218, 23, 178, 61, 182, 93, 11, 189, 148, 193, 203, 61, 204, 180, 200, 190, 218, 247, 72, 60, 96, 241, 142, 61, 222, 20, 115, 62, 102, 36, 252, 190, 225, 97, 162, 61, 84, 163, 44, 191, 21, 176, 184, 62, 217, 231, 185, 190, 224, 248, 251, 59, 85, 86, 82, 61, 104, 137, 173, 62, 43, 63, 48, 191, 199, 235, 30, 190, 72, 221, 163, 62, 225, 50, 153, 60, 190, 29, 188, 190, 202, 17, 219, 190, 68, 194, 214, 189, 103, 164, 67, 61, 96, 115, 90, 189, 201, 87, 198, 189, 5, 0, 102, 191, 253, 178, 12, 62, 2, 116, 65, 60, 149, 213, 51, 60, 183, 251, 159, 62, 134, 56, 105, 191, 176, 59, 93, 61, 245, 46, 156, 190, 106, 232, 45, 62, 28, 27, 17, 62, 171, 67, 22, 61, 160, 83, 249, 61, 9, 204, 78, 190, 240, 112, 21, 62, 217, 27, 168, 62, 102, 247, 249, 61, 114, 69, 49, 62, 90, 217, 168, 62, 246, 241, 60, 62, 105, 210, 144, 189, 38, 94, 78, 186, 104, 222, 42, 62, 157, 36, 246, 61, 238, 202, 31, 62, 13, 90, 186, 62, 72, 52, 21, 62, 97, 18, 40, 190, 10, 234, 154, 61, 73, 207, 98, 61, 37, 133, 19, 189, 77, 31, 161, 191, 191, 45, 72, 191, 190, 194, 39, 190, 208, 86, 255, 189, 52, 33, 63, 62, 73, 252, 187, 62, 54, 93, 147, 62, 137, 229, 169, 190, 194, 80, 155, 190, 101, 204, 124, 62, 27, 204, 117, 189, 140, 152, 11, 190, 31, 168, 134, 61, 99, 243, 38, 62, 62, 12, 8, 62, 223, 213, 58, 62, 203, 16, 188, 190, 140, 7, 55, 62, 105, 235, 88, 191, 207, 104, 167, 61, 95, 93, 117, 191, 131, 93, 112, 62, 49, 250, 169, 61, 73, 164, 16, 62, 223, 0, 213, 190, 98, 202, 8, 63, 36, 115, 232, 61, 222, 249, 79, 61, 27, 122, 71, 191, 116, 71, 156, 62, 174, 85, 228, 61, 233, 20, 131, 62, 15, 63, 83, 62, 159, 12, 202, 60, 71, 9, 225, 60, 117, 123, 195, 62, 213, 115, 212, 189, 253, 44, 68, 190, 55, 92, 65, 62, 98, 16, 53, 190, 244, 68, 204, 190, 207, 65, 79, 191, 111, 153, 86, 190, 183, 78, 119, 189, 219, 106, 75, 62, 219, 55, 123, 189, 59, 180, 156, 62, 166, 175, 92, 62, 125, 161, 71, 61, 145, 137, 48, 188, 59, 44, 31, 62, 224, 179, 199, 62, 81, 36, 121, 189, 26, 17, 1, 190, 187, 126, 211, 190, 77, 168, 34, 187, 255, 131, 48, 62, 199, 151, 147, 189, 14, 13, 240, 62, 221, 194, 15, 62, 158, 83, 82, 191, 43, 243, 38, 191, 140, 130, 55, 62, 62, 86, 170, 189, 32, 187, 51, 62, 204, 215, 208, 188, 80, 68, 46, 62, 197, 207, 187, 189, 90, 116, 66, 62, 140, 79, 85, 62, 128, 35, 60, 62, 194, 207, 145, 189, 119, 5, 15, 188, 8, 212, 220, 188, 218, 219, 169, 189, 75, 206, 130, 62, 109, 222, 92, 190, 86, 218, 83, 62, 214, 155, 71, 62, 75, 111, 146, 61, 90, 101, 92, 62, 28, 138, 3, 190, 139, 202, 133, 61, 73, 177, 175, 187, 131, 199, 5, 61, 254, 243, 16, 190, 100, 70, 83, 62, 188, 174, 170, 60, 12, 106, 12, 62, 251, 213, 70, 190, 33, 180, 134, 60, 202, 49, 2, 191, 150, 189, 176, 189, 125, 126, 130, 61, 57, 219, 71, 61, 208, 232, 152, 190, 146, 38, 5, 190, 4, 53, 70, 60, 47, 34, 48, 62, 19, 239, 132, 60, 112, 242, 219, 61, 218, 185, 97, 189, 59, 191, 132, 190, 148, 10, 147, 61, 210, 63, 29, 62, 222, 229, 147, 60, 7, 107, 17, 189, 124, 149, 52, 189, 59, 244, 93, 189, 70, 61, 148, 188, 212, 171, 25, 189, 138, 224, 65, 190, 43, 52, 192, 62, 120, 87, 222, 61, 42, 78, 120, 60, 205, 163, 250, 60, 162, 222, 129, 61, 141, 189, 68, 62, 209, 209, 174, 61, 28, 174, 124, 190, 21, 143, 229, 61, 66, 52, 208, 61, 212, 197, 64, 190, 218, 7, 74, 190, 76, 164, 161, 190, 33, 206, 175, 61, 159, 110, 202, 60, 183, 73, 93, 189, 177, 243, 26, 191, 208, 243, 157, 189, 180, 30, 115, 190, 63, 86, 156, 61, 183, 46, 91, 62, 255, 110, 127, 62, 195, 106, 206, 190, 207, 5, 195, 190, 155, 68, 200, 190, 127, 137, 151, 62, 189, 227, 219, 189, 246, 67, 251, 189, 210, 107, 127, 190, 19, 203, 37, 189, 42, 35, 133, 189, 102, 86, 151, 61, 100, 7, 144, 190, 147, 96, 19, 191, 0, 189, 135, 190, 233, 112, 68, 189, 167, 239, 27, 191, 44, 35, 84, 62, 141, 171, 86, 62, 180, 35, 223, 62, 225, 72, 177, 190, 145, 220, 180, 190, 119, 187, 56, 62, 30, 82, 99, 62, 142, 205, 116, 191, 96, 95, 217, 62, 0, 80, 45, 191, 199, 58, 191, 62, 138, 251, 20, 189, 71, 227, 79, 190, 52, 104, 67, 189, 100, 90, 51, 191, 110, 81, 196, 61, 227, 70, 11, 190, 19, 199, 12, 62, 75, 209, 10, 62, 248, 165, 140, 189, 27, 160, 18, 190, 153, 3, 253, 190, 27, 232, 134, 62, 44, 79, 53, 190, 190, 47, 177, 62, 191, 143, 10, 191, 66, 175, 134, 62, 243, 123, 130, 60, 80, 58, 219, 61, 66, 76, 224, 189, 93, 87, 165, 190, 136, 81, 187, 61, 108, 190, 7, 188, 160, 136, 235, 190, 136, 132, 14, 63, 139, 157, 26, 62, 53, 233, 146, 60, 42, 120, 161, 61, 128, 75, 142, 190, 92, 101, 44, 61, 25, 163, 184, 190, 241, 139, 39, 62, 217, 183, 113, 190, 139, 147, 46, 190, 96, 9, 178, 62, 57, 169, 174, 61, 247, 239, 247, 62, 44, 145, 138, 61, 207, 101, 159, 62, 255, 50, 145, 189, 207, 23, 91, 190, 138, 65, 143, 190, 209, 72, 67, 62, 254, 123, 119, 188, 161, 132, 183, 190, 136, 17, 121, 62, 247, 93, 237, 189, 231, 191, 193, 60, 140, 159, 155, 190, 118, 246, 70, 189, 194, 185, 43, 62, 193, 163, 98, 62, 184, 95, 194, 190, 192, 198, 99, 190, 139, 93, 150, 61, 183, 227, 155, 61, 249, 148, 168, 190, 132, 46, 46, 190, 173, 205, 5, 62, 238, 65, 15, 61, 226, 41, 140, 62, 96, 162, 236, 190, 148, 217, 37, 62, 223, 251, 145, 61, 193, 24, 74, 62, 134, 95, 16, 189, 12, 165, 63, 190, 72, 175, 65, 191, 149, 139, 149, 191, 46, 27, 212, 62, 3, 239, 62, 62, 54, 34, 156, 62, 150, 120, 5, 190, 150, 88, 52, 191, 232, 241, 169, 62, 199, 144, 216, 188, 91, 114, 147, 62, 106, 249, 14, 61, 137, 244, 25, 62, 142, 212, 139, 191, 208, 62, 61, 62, 23, 183, 158, 190, 191, 83, 136, 61, 17, 114, 153, 189, 3, 37, 15, 191, 54, 46, 165, 61, 58, 38, 5, 190, 176, 4, 77, 188, 121, 97, 235, 62, 49, 58, 245, 60, 80, 82, 242, 190, 62, 161, 118, 62, 236, 221, 177, 190, 19, 253, 84, 190, 17, 174, 69, 191, 40, 87, 129, 61, 242, 112, 17, 61, 174, 156, 21, 191, 26, 48, 46, 190, 65, 105, 82, 189, 180, 138, 160, 190, 55, 175, 219, 61, 48, 101, 99, 62, 70, 106, 180, 190, 249, 209, 119, 190, 169, 75, 3, 191, 132, 86, 120, 62, 175, 191, 125, 189, 53, 9, 95, 189, 122, 86, 124, 61, 145, 92, 186, 61, 147, 49, 39, 61, 108, 34, 28, 62, 74, 92, 67, 190, 141, 32, 227, 190, 52, 14, 108, 190, 127, 248, 146, 189, 106, 218, 107, 191, 227, 225, 170, 61, 213, 4, 100, 62, 126, 134, 100, 62, 253, 199, 57, 191, 72, 34, 252, 188, 160, 227, 168, 189, 137, 220, 144, 62, 140, 17, 82, 191, 181, 7, 173, 62, 102, 229, 170, 190, 127, 91, 17, 59, 138, 156, 176, 61, 6, 243, 108, 190, 134, 137, 162, 62, 10, 219, 221, 191, 5, 252, 28, 189, 147, 150, 163, 61, 161, 229, 158, 189, 165, 22, 47, 62, 119, 106, 106, 190, 231, 137, 184, 190, 239, 78, 119, 190, 15, 244, 36, 62, 25, 193, 131, 61, 226, 203, 29, 190, 57, 25, 136, 61, 78, 236, 118, 189, 139, 153, 232, 62, 196, 58, 43, 190, 112, 30, 58, 190, 50, 30, 112, 62, 115, 233, 191, 61, 20, 233, 63, 190, 52, 18, 101, 190, 199, 160, 241, 189, 74, 180, 159, 62, 2, 49, 102, 189, 37, 252, 171, 191, 203, 129, 194, 190, 75, 253, 50, 62, 160, 46, 67, 189, 101, 100, 117, 61, 207, 238, 19, 189, 99, 130, 91, 190, 150, 121, 118, 62, 231, 9, 204, 189, 184, 167, 143, 62, 30, 43, 228, 60, 104, 101, 142, 62, 67, 74, 81, 190, 232, 96, 165, 190, 104, 62, 245, 190, 208, 73, 71, 62, 81, 220, 37, 62, 11, 92, 120, 190, 37, 206, 178, 62, 26, 53, 151, 189, 24, 104, 245, 189, 38, 69, 45, 190, 246, 130, 28, 189, 8, 78, 177, 61, 200, 141, 86, 62, 162, 242, 165, 189, 97, 192, 59, 190, 135, 76, 39, 61, 95, 58, 136, 62, 134, 181, 201, 189, 70, 177, 173, 189, 50, 7, 146, 61, 105, 187, 179, 188, 168, 225, 166, 62, 111, 35, 103, 191, 18, 216, 98, 188, 220, 156, 237, 188, 141, 91, 60, 62, 68, 227, 108, 191, 123, 208, 163, 190, 36, 75, 172, 189, 39, 90, 17, 190, 210, 140, 225, 59, 162, 39, 49, 62, 6, 137, 201, 190, 138, 238, 58, 190, 144, 106, 60, 190, 49, 92, 13, 189, 47, 169, 206, 61, 130, 4, 160, 189, 203, 242, 41, 190, 106, 1, 227, 188, 167, 170, 188, 61, 130, 190, 249, 59, 253, 218, 141, 190, 4, 73, 241, 189, 147, 54, 149, 188, 187, 180, 62, 190, 114, 99, 30, 191, 27, 100, 120, 190, 195, 141, 84, 62, 126, 174, 139, 62, 245, 77, 31, 191, 210, 173, 1, 191, 88, 59, 61, 61, 232, 218, 78, 189, 36, 49, 243, 190, 16, 241, 172, 62, 78, 25, 17, 191, 206, 32, 22, 191, 49, 79, 176, 61, 71, 2, 59, 190, 185, 253, 5, 190, 136, 21, 216, 189, 188, 226, 213, 61, 222, 47, 153, 60, 178, 221, 212, 189, 227, 26, 140, 60, 134, 90, 187, 59, 171, 115, 153, 189, 183, 85, 50, 190, 20, 216, 129, 60, 84, 52, 48, 190, 191, 168, 58, 190, 26, 8, 41, 188, 252, 80, 132, 59, 141, 157, 17, 61, 249, 5, 26, 190, 68, 124, 67, 186, 36, 171, 167, 60, 240, 92, 214, 189, 16, 91, 13, 62, 6, 222, 50, 188, 213, 28, 1, 62, 248, 225, 43, 188, 184, 176, 180, 61, 46, 120, 112, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 29, 15, 74, 189, 238, 209, 15, 190, 95, 55, 45, 61, 208, 14, 57, 62, 200, 2, 111, 190, 64, 231, 154, 190, 104, 237, 90, 190, 0, 17, 166, 62, 1, 69, 162, 190, 21, 191, 129, 190, 144, 99, 27, 190, 206, 40, 209, 189, 183, 27, 129, 190, 76, 70, 139, 190, 17, 26, 163, 62, 196, 197, 139, 189, 21, 114, 74, 190, 186, 231, 228, 190, 244, 31, 76, 62, 242, 201, 201, 188, 50, 203, 172, 189, 57, 31, 39, 191, 12, 29, 15, 190, 172, 198, 74, 60, 79, 240, 145, 61, 237, 173, 21, 191, 215, 224, 36, 60, 172, 14, 176, 62, 172, 52, 212, 190, 249, 130, 5, 189, 154, 203, 136, 191, 229, 249, 110, 62, 14, 163, 104, 190, 102, 215, 54, 62, 179, 212, 61, 190, 167, 97, 123, 61, 167, 87, 45, 189, 128, 219, 6, 190, 243, 246, 10, 188, 182, 126, 195, 189, 200, 14, 150, 191, 35, 105, 110, 62, 78, 79, 55, 63, 232, 155, 16, 189, 121, 134, 147, 189, 185, 218, 204, 190, 129, 208, 120, 189, 89, 225, 1, 191, 155, 203, 215, 61, 67, 170, 47, 191, 77, 26, 227, 61, 94, 73, 118, 62, 193, 100, 96, 190, 1, 244, 20, 62, 204, 22, 152, 189, 211, 135, 14, 187, 213, 8, 33, 189, 36, 189, 226, 189, 154, 17, 90, 60, 140, 233, 184, 62, 118, 246, 112, 190, 213, 219, 225, 61, 163, 149, 233, 62, 234, 201, 24, 190, 86, 209, 135, 189, 225, 172, 146, 62, 85, 154, 129, 59, 115, 153, 213, 59, 181, 161, 138, 189, 127, 185, 147, 61, 59, 136, 20, 189, 61, 225, 4, 189, 6, 161, 143, 189, 185, 235, 198, 189, 208, 38, 16, 190, 244, 244, 82, 189, 182, 52, 20, 62, 48, 161, 175, 189, 196, 116, 205, 60, 130, 46, 156, 61, 14, 84, 79, 189, 199, 133, 101, 189, 250, 119, 17, 190, 147, 69, 83, 61, 88, 160, 213, 58, 241, 84, 17, 62, 12, 126, 60, 61, 48, 195, 14, 190, 246, 123, 67, 190, 177, 137, 2, 189, 108, 192, 28, 189, 83, 234, 174, 189, 203, 71, 47, 189, 77, 239, 170, 58, 195, 124, 152, 187, 97, 236, 63, 60, 50, 98, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 209, 35, 189, 92, 180, 136, 62, 123, 1, 6, 190, 129, 177, 220, 186, 147, 249, 129, 62, 224, 145, 52, 190, 214, 1, 186, 189, 233, 28, 153, 61, 234, 168, 177, 62, 28, 181, 106, 62, 176, 14, 137, 189, 154, 86, 48, 62, 161, 189, 60, 61, 150, 5, 102, 62, 222, 103, 209, 188, 224, 128, 186, 60, 234, 120, 87, 61, 167, 105, 69, 190, 21, 152, 9, 60, 37, 203, 99, 62, 42, 103, 13, 62, 214, 143, 158, 61, 12, 170, 91, 189, 239, 75, 43, 62, 106, 201, 187, 61, 106, 112, 61, 62, 173, 99, 117, 188, 132, 107, 49, 62, 62, 237, 140, 189, 92, 52, 194, 61, 132, 53, 121, 190, 251, 48, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 173, 254, 190, 171, 254, 217, 190, 154, 164, 96, 63, 22, 191, 12, 63, 145, 47, 175, 61, 160, 211, 208, 61, 229, 103, 64, 63, 92, 86, 19, 191, 57, 197, 83, 59, 137, 85, 73, 61, 35, 178, 251, 190, 93, 231, 177, 189, 252, 6, 32, 191, 64, 209, 82, 190, 40, 245, 151, 190, 214, 25, 45, 190, 171, 170, 8, 191, 241, 74, 12, 190, 15, 200, 188, 61, 206, 45, 95, 60, 92, 236, 184, 190, 238, 131, 199, 62, 100, 134, 61, 190, 131, 75, 138, 63, 156, 99, 18, 191, 38, 215, 174, 62, 27, 252, 190, 190, 251, 148, 48, 190, 229, 201, 8, 62, 132, 226, 18, 190, 157, 71, 11, 191, 10, 60, 49, 189, 84, 166, 2, 63, 87, 147, 12, 62, 15, 147, 116, 62, 181, 73, 88, 62, 247, 104, 85, 190, 143, 193, 210, 61, 14, 222, 172, 61, 95, 177, 3, 189, 196, 163, 168, 190, 81, 57, 111, 190, 175, 215, 9, 190, 6, 83, 106, 190, 174, 237, 178, 60, 46, 184, 59, 190, 220, 220, 100, 61, 158, 252, 68, 190, 25, 10, 88, 62, 231, 75, 90, 61, 164, 84, 50, 190, 125, 215, 47, 190, 143, 139, 19, 63, 164, 28, 141, 62, 172, 35, 153, 61, 7, 144, 242, 61, 180, 173, 234, 189, 60, 250, 105, 189, 26, 174, 44, 62, 167, 41, 129, 190, 97, 136, 92, 189, 87, 247, 225, 190, 14, 37, 185, 62, 212, 74, 192, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 155, 22, 62, 18, 185, 234, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 161, 19, 61, 30, 177, 129, 63, 94, 65, 23, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 182, 152, 191, 28, 123, 198, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}