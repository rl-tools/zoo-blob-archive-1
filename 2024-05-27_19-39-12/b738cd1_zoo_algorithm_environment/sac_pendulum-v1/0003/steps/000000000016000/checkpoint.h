// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 134, 172, 190, 59, 235, 133, 62, 92, 72, 50, 63, 253, 112, 222, 61, 110, 182, 255, 190, 200, 33, 195, 62, 226, 98, 20, 63, 55, 69, 127, 191, 92, 184, 232, 190, 216, 149, 181, 190, 63, 40, 215, 191, 67, 33, 174, 190, 29, 9, 31, 191, 147, 49, 138, 189, 199, 152, 127, 190, 109, 84, 35, 63, 71, 38, 7, 190, 34, 133, 177, 61, 225, 143, 65, 191, 185, 234, 7, 191, 33, 21, 151, 61, 113, 113, 8, 63, 123, 156, 90, 191, 214, 5, 14, 191, 2, 172, 234, 62, 217, 167, 146, 58, 141, 198, 135, 190, 94, 218, 37, 190, 123, 78, 81, 63, 164, 57, 171, 190, 161, 19, 249, 62, 225, 117, 11, 62, 171, 175, 220, 190, 25, 12, 176, 190, 170, 15, 81, 63, 112, 26, 10, 62, 125, 132, 205, 62, 127, 20, 188, 190, 221, 143, 9, 63, 60, 83, 26, 191, 2, 246, 102, 62, 234, 17, 152, 60, 129, 62, 121, 62, 142, 215, 144, 191, 161, 136, 142, 190, 79, 2, 105, 191, 244, 116, 94, 190, 161, 87, 112, 58, 31, 149, 250, 62, 221, 24, 88, 191, 7, 216, 189, 62, 68, 79, 208, 61, 249, 117, 141, 191, 100, 208, 254, 61, 252, 146, 68, 190, 49, 173, 7, 191, 154, 159, 219, 62, 28, 206, 79, 62, 59, 242, 210, 191, 31, 213, 165, 190, 178, 60, 158, 190, 103, 52, 27, 190, 225, 194, 3, 63, 178, 247, 1, 63, 71, 45, 164, 63, 128, 18, 137, 62, 38, 247, 242, 62, 173, 3, 161, 62, 187, 62, 174, 190, 94, 226, 132, 191, 163, 202, 253, 61, 41, 155, 152, 187, 193, 185, 70, 62, 53, 206, 213, 190, 221, 242, 145, 62, 86, 11, 53, 189, 144, 174, 8, 191, 5, 66, 147, 62, 23, 233, 15, 191, 196, 162, 60, 191, 207, 136, 66, 190, 146, 120, 106, 63, 42, 203, 99, 63, 186, 92, 201, 62, 207, 197, 51, 63, 245, 88, 253, 190, 203, 172, 109, 190, 90, 86, 37, 63, 156, 12, 223, 62, 241, 232, 51, 61, 158, 224, 23, 191, 4, 184, 35, 191, 77, 63, 180, 62, 159, 187, 56, 63, 44, 26, 134, 63, 3, 64, 251, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 248, 100, 190, 247, 71, 149, 190, 234, 0, 121, 189, 117, 246, 34, 190, 141, 205, 163, 61, 144, 199, 168, 62, 120, 115, 128, 62, 50, 168, 35, 190, 32, 245, 133, 191, 80, 2, 247, 60, 108, 188, 116, 62, 198, 174, 155, 62, 43, 94, 46, 191, 211, 41, 52, 63, 58, 48, 61, 62, 172, 66, 223, 62, 227, 110, 27, 63, 166, 100, 201, 62, 101, 0, 249, 190, 84, 74, 96, 62, 80, 77, 0, 190, 127, 58, 8, 190, 22, 138, 193, 62, 234, 38, 184, 61, 15, 151, 203, 62, 63, 53, 58, 62, 15, 57, 143, 62, 219, 123, 134, 191, 154, 72, 11, 191, 76, 101, 2, 63, 30, 130, 188, 188, 177, 167, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 66, 194, 189, 13, 229, 171, 188, 80, 238, 198, 189, 57, 165, 32, 189, 198, 209, 105, 189, 123, 64, 4, 62, 234, 28, 124, 190, 232, 198, 167, 189, 205, 38, 167, 59, 251, 19, 109, 190, 223, 191, 149, 189, 0, 151, 247, 190, 59, 255, 99, 62, 89, 180, 192, 190, 28, 45, 66, 191, 210, 114, 104, 190, 247, 58, 154, 61, 246, 119, 185, 61, 245, 201, 95, 189, 244, 155, 132, 191, 2, 103, 58, 62, 134, 247, 83, 62, 41, 192, 129, 61, 75, 37, 31, 191, 69, 37, 80, 61, 195, 207, 77, 190, 218, 86, 112, 190, 228, 19, 189, 62, 32, 91, 185, 190, 247, 234, 205, 61, 136, 155, 19, 190, 180, 205, 194, 62, 183, 151, 5, 191, 79, 35, 155, 62, 116, 31, 138, 190, 216, 200, 28, 62, 142, 75, 14, 62, 134, 44, 106, 62, 212, 14, 225, 189, 188, 28, 219, 189, 83, 183, 176, 190, 102, 7, 105, 62, 79, 232, 74, 189, 141, 78, 226, 189, 198, 211, 97, 62, 188, 66, 181, 59, 34, 32, 31, 190, 107, 239, 5, 61, 46, 86, 190, 60, 101, 99, 196, 62, 59, 91, 149, 189, 146, 218, 229, 188, 191, 138, 230, 190, 55, 132, 68, 62, 182, 141, 24, 62, 206, 70, 128, 62, 245, 84, 31, 190, 21, 234, 202, 62, 72, 173, 20, 190, 87, 85, 165, 59, 233, 46, 115, 191, 51, 62, 174, 61, 69, 170, 76, 190, 158, 180, 212, 188, 73, 245, 104, 60, 199, 252, 77, 61, 122, 184, 110, 189, 66, 255, 31, 190, 252, 25, 184, 190, 19, 64, 192, 59, 81, 125, 157, 61, 58, 35, 186, 59, 54, 207, 98, 62, 131, 117, 10, 190, 25, 24, 149, 190, 210, 188, 249, 190, 61, 219, 209, 190, 201, 20, 226, 189, 47, 31, 28, 62, 253, 168, 12, 61, 97, 218, 88, 62, 66, 108, 207, 62, 91, 189, 103, 189, 133, 187, 198, 184, 147, 206, 83, 62, 207, 177, 47, 191, 186, 71, 60, 189, 28, 89, 76, 62, 67, 78, 65, 61, 106, 139, 145, 60, 95, 232, 1, 191, 92, 55, 142, 191, 169, 134, 7, 190, 126, 217, 40, 62, 176, 154, 230, 62, 99, 96, 33, 191, 169, 254, 86, 190, 138, 20, 37, 190, 153, 24, 4, 62, 212, 203, 152, 190, 209, 68, 210, 189, 163, 103, 216, 60, 49, 217, 249, 190, 13, 245, 156, 62, 189, 105, 254, 62, 72, 115, 50, 62, 35, 189, 193, 61, 106, 168, 154, 190, 150, 162, 213, 61, 130, 59, 33, 190, 197, 248, 66, 62, 35, 86, 29, 191, 14, 170, 31, 190, 37, 145, 169, 62, 44, 172, 142, 61, 120, 237, 208, 61, 18, 114, 11, 190, 120, 209, 135, 190, 235, 127, 158, 189, 84, 240, 190, 190, 18, 250, 4, 62, 132, 92, 88, 190, 129, 42, 173, 190, 102, 5, 124, 190, 245, 137, 29, 63, 180, 217, 91, 62, 140, 137, 78, 189, 54, 4, 61, 190, 222, 242, 233, 189, 146, 190, 248, 188, 15, 217, 113, 187, 178, 244, 138, 190, 133, 96, 140, 61, 77, 114, 51, 62, 36, 150, 17, 62, 213, 252, 230, 188, 16, 216, 41, 62, 232, 11, 203, 61, 125, 103, 23, 62, 34, 21, 48, 189, 242, 23, 53, 190, 219, 213, 16, 62, 98, 149, 182, 189, 190, 15, 5, 190, 123, 142, 37, 62, 95, 150, 42, 62, 242, 27, 220, 189, 126, 40, 113, 188, 20, 114, 225, 189, 169, 34, 166, 189, 216, 234, 82, 62, 222, 120, 86, 62, 204, 132, 85, 187, 250, 128, 97, 61, 152, 168, 18, 61, 100, 234, 13, 191, 96, 233, 234, 190, 89, 1, 226, 189, 131, 20, 157, 61, 65, 164, 202, 189, 121, 87, 13, 62, 143, 15, 21, 189, 161, 184, 8, 62, 87, 40, 97, 60, 59, 174, 199, 61, 188, 165, 233, 189, 81, 200, 193, 61, 219, 194, 48, 190, 16, 242, 128, 61, 68, 207, 15, 60, 173, 145, 198, 189, 57, 43, 57, 189, 238, 177, 15, 62, 93, 196, 189, 189, 98, 190, 216, 61, 14, 26, 145, 188, 237, 159, 39, 190, 248, 226, 16, 190, 47, 105, 213, 189, 32, 100, 86, 189, 128, 199, 148, 189, 173, 138, 214, 61, 3, 15, 209, 60, 128, 50, 67, 61, 223, 180, 22, 62, 128, 157, 217, 188, 22, 140, 184, 189, 214, 190, 201, 189, 176, 21, 37, 62, 106, 220, 170, 189, 48, 106, 44, 60, 139, 187, 14, 190, 59, 98, 220, 189, 194, 75, 66, 190, 145, 92, 139, 62, 209, 130, 163, 190, 22, 6, 213, 59, 152, 83, 67, 61, 211, 184, 70, 62, 178, 195, 167, 62, 227, 162, 199, 62, 94, 151, 114, 190, 76, 22, 168, 60, 252, 113, 24, 191, 9, 224, 199, 190, 110, 90, 171, 189, 146, 247, 59, 62, 109, 19, 133, 189, 231, 168, 5, 63, 35, 114, 195, 62, 196, 28, 159, 188, 63, 207, 25, 62, 163, 184, 56, 62, 81, 224, 28, 191, 227, 193, 33, 62, 121, 125, 84, 190, 55, 150, 113, 62, 90, 55, 248, 60, 198, 220, 202, 189, 223, 128, 140, 191, 176, 158, 150, 62, 216, 152, 247, 61, 143, 56, 62, 62, 221, 80, 83, 191, 93, 149, 119, 190, 21, 5, 122, 190, 120, 177, 150, 190, 50, 199, 6, 189, 40, 56, 114, 190, 151, 149, 156, 62, 57, 116, 21, 191, 206, 55, 42, 189, 20, 90, 30, 190, 147, 5, 110, 62, 147, 198, 242, 61, 240, 47, 191, 61, 146, 53, 165, 189, 110, 44, 175, 189, 86, 237, 155, 189, 75, 7, 242, 190, 252, 241, 194, 62, 159, 126, 201, 62, 212, 1, 100, 190, 125, 125, 132, 191, 73, 190, 188, 61, 118, 47, 181, 61, 123, 196, 109, 188, 168, 88, 194, 190, 9, 175, 95, 188, 192, 118, 15, 190, 207, 252, 179, 189, 29, 154, 87, 190, 103, 124, 68, 191, 217, 202, 201, 62, 19, 208, 185, 189, 36, 8, 11, 62, 25, 134, 13, 189, 145, 158, 146, 61, 244, 239, 160, 189, 96, 93, 224, 187, 231, 113, 71, 61, 112, 133, 254, 61, 69, 180, 168, 62, 245, 102, 100, 61, 160, 197, 22, 189, 91, 229, 14, 62, 116, 132, 124, 62, 109, 86, 76, 61, 210, 133, 82, 61, 224, 98, 20, 62, 161, 52, 40, 62, 177, 141, 40, 62, 100, 189, 12, 190, 233, 251, 200, 189, 136, 157, 31, 62, 54, 224, 250, 189, 26, 127, 192, 189, 112, 222, 151, 62, 168, 235, 161, 61, 11, 187, 170, 61, 40, 38, 143, 184, 89, 100, 55, 62, 139, 161, 215, 60, 178, 41, 169, 189, 8, 140, 3, 191, 216, 173, 123, 62, 103, 75, 118, 190, 100, 238, 92, 62, 255, 47, 243, 189, 105, 210, 145, 189, 185, 192, 68, 62, 166, 67, 58, 190, 135, 74, 47, 62, 228, 206, 255, 188, 59, 238, 108, 189, 172, 126, 106, 62, 173, 126, 24, 61, 219, 81, 2, 190, 31, 115, 81, 61, 71, 66, 190, 60, 132, 116, 61, 189, 240, 92, 156, 62, 192, 238, 75, 60, 119, 108, 71, 62, 54, 25, 179, 62, 177, 118, 244, 189, 208, 183, 5, 190, 231, 94, 172, 189, 169, 15, 88, 62, 87, 128, 181, 61, 228, 143, 162, 61, 33, 135, 6, 61, 16, 65, 151, 61, 254, 133, 85, 61, 64, 186, 189, 189, 211, 213, 56, 190, 177, 165, 108, 190, 68, 219, 244, 61, 175, 194, 28, 62, 121, 252, 155, 190, 7, 88, 232, 61, 51, 6, 170, 190, 68, 115, 200, 61, 53, 124, 184, 190, 108, 214, 201, 190, 213, 255, 141, 62, 192, 210, 138, 190, 158, 240, 9, 190, 126, 111, 216, 190, 119, 153, 217, 60, 33, 137, 92, 62, 225, 0, 178, 61, 96, 138, 87, 190, 66, 155, 148, 189, 184, 86, 155, 60, 150, 26, 146, 189, 110, 49, 195, 60, 84, 125, 209, 190, 230, 215, 59, 190, 188, 176, 130, 191, 195, 145, 187, 187, 99, 96, 22, 61, 68, 86, 121, 62, 126, 26, 238, 190, 80, 153, 27, 190, 35, 6, 146, 61, 179, 255, 72, 191, 197, 216, 138, 61, 42, 250, 231, 190, 12, 182, 169, 62, 242, 194, 38, 191, 86, 211, 52, 62, 133, 188, 39, 190, 194, 67, 145, 62, 139, 132, 16, 190, 137, 163, 21, 188, 115, 12, 183, 61, 206, 206, 170, 62, 32, 192, 68, 191, 226, 107, 86, 60, 233, 104, 105, 190, 234, 210, 25, 61, 226, 253, 6, 62, 34, 199, 18, 190, 181, 166, 58, 62, 143, 12, 71, 190, 86, 151, 135, 62, 144, 169, 156, 190, 226, 166, 136, 188, 198, 139, 88, 62, 238, 164, 4, 188, 97, 102, 144, 61, 220, 112, 152, 189, 46, 95, 229, 186, 40, 213, 254, 61, 13, 226, 172, 190, 228, 86, 160, 190, 4, 163, 249, 62, 200, 152, 203, 61, 78, 214, 94, 190, 120, 241, 117, 190, 151, 119, 7, 189, 173, 211, 28, 191, 253, 2, 132, 189, 242, 24, 234, 190, 218, 209, 237, 190, 161, 230, 188, 189, 207, 67, 82, 62, 212, 170, 14, 62, 48, 119, 38, 191, 44, 161, 13, 62, 57, 180, 194, 189, 215, 253, 43, 58, 43, 87, 25, 190, 207, 162, 133, 190, 40, 219, 252, 190, 189, 130, 105, 190, 128, 84, 102, 190, 93, 45, 19, 62, 174, 162, 40, 190, 255, 149, 83, 190, 122, 215, 232, 62, 224, 26, 136, 191, 228, 97, 133, 62, 113, 22, 39, 191, 241, 202, 129, 190, 138, 153, 8, 190, 255, 59, 116, 59, 0, 163, 47, 191, 246, 32, 246, 61, 105, 0, 66, 62, 238, 226, 180, 189, 187, 47, 50, 191, 126, 64, 107, 191, 237, 172, 106, 62, 143, 223, 134, 190, 175, 6, 12, 191, 236, 167, 168, 190, 173, 2, 184, 61, 243, 193, 140, 62, 137, 144, 167, 61, 174, 89, 102, 190, 41, 150, 153, 189, 144, 170, 56, 62, 171, 31, 1, 191, 225, 66, 68, 190, 143, 19, 188, 61, 130, 81, 33, 190, 198, 60, 196, 61, 25, 113, 168, 60, 166, 22, 64, 62, 149, 175, 145, 189, 82, 108, 40, 191, 169, 98, 20, 63, 218, 81, 138, 190, 238, 163, 199, 61, 78, 127, 135, 190, 195, 196, 239, 190, 40, 178, 62, 189, 78, 200, 238, 189, 150, 65, 33, 191, 43, 77, 178, 188, 134, 59, 15, 62, 232, 107, 138, 189, 241, 249, 19, 190, 76, 137, 96, 62, 16, 18, 208, 188, 20, 27, 166, 190, 140, 254, 152, 190, 99, 110, 109, 191, 43, 76, 187, 189, 221, 227, 100, 62, 110, 229, 19, 62, 183, 252, 44, 191, 89, 2, 188, 188, 8, 223, 137, 189, 74, 71, 12, 190, 9, 151, 146, 61, 7, 39, 2, 189, 206, 6, 198, 61, 204, 180, 200, 190, 205, 204, 21, 187, 123, 61, 185, 61, 223, 171, 92, 62, 240, 234, 1, 191, 189, 128, 77, 62, 56, 106, 61, 191, 123, 160, 192, 62, 119, 16, 183, 190, 70, 42, 135, 61, 118, 118, 86, 61, 253, 179, 147, 62, 152, 232, 37, 191, 164, 22, 158, 189, 121, 145, 161, 62, 225, 50, 153, 60, 66, 204, 184, 190, 112, 73, 209, 190, 248, 172, 212, 60, 36, 113, 183, 61, 245, 220, 67, 189, 182, 210, 192, 189, 236, 73, 83, 191, 172, 10, 108, 62, 111, 124, 58, 60, 214, 132, 87, 61, 144, 194, 173, 62, 55, 96, 95, 191, 176, 59, 93, 61, 168, 182, 169, 190, 22, 116, 52, 62, 109, 35, 22, 62, 38, 212, 44, 61, 138, 47, 36, 62, 170, 153, 221, 189, 192, 194, 51, 62, 77, 3, 186, 62, 87, 246, 38, 62, 175, 67, 46, 62, 62, 239, 212, 62, 131, 40, 64, 62, 109, 187, 1, 189, 21, 77, 187, 60, 106, 158, 70, 62, 79, 146, 26, 62, 253, 66, 36, 62, 93, 144, 219, 62, 32, 235, 25, 62, 185, 206, 0, 190, 88, 106, 253, 61, 109, 195, 119, 61, 15, 114, 145, 188, 157, 0, 152, 191, 168, 26, 47, 191, 240, 171, 46, 190, 174, 134, 44, 190, 155, 12, 33, 62, 92, 122, 175, 62, 198, 27, 146, 62, 88, 118, 173, 190, 0, 98, 168, 190, 50, 236, 124, 62, 45, 89, 151, 189, 237, 131, 25, 190, 40, 191, 131, 62, 13, 228, 29, 62, 23, 198, 233, 61, 51, 234, 31, 62, 91, 152, 196, 190, 59, 93, 87, 62, 245, 89, 101, 191, 49, 9, 134, 61, 86, 175, 102, 191, 195, 211, 79, 62, 72, 23, 138, 61, 197, 127, 214, 61, 23, 199, 220, 190, 231, 15, 34, 63, 64, 95, 170, 61, 24, 89, 116, 188, 115, 164, 83, 191, 219, 75, 145, 62, 95, 225, 136, 62, 195, 25, 84, 62, 252, 175, 75, 62, 97, 237, 230, 60, 198, 253, 226, 60, 124, 131, 208, 62, 157, 183, 204, 189, 187, 85, 86, 190, 21, 133, 97, 62, 142, 169, 59, 190, 211, 168, 1, 191, 34, 38, 88, 191, 229, 241, 108, 190, 132, 37, 189, 189, 177, 48, 76, 62, 35, 177, 140, 189, 6, 121, 163, 62, 247, 140, 110, 62, 22, 75, 73, 61, 56, 238, 147, 60, 5, 89, 32, 62, 228, 149, 206, 62, 124, 120, 129, 189, 60, 137, 40, 190, 212, 253, 226, 190, 232, 43, 221, 188, 114, 82, 53, 62, 94, 207, 132, 189, 193, 76, 253, 62, 140, 56, 252, 61, 213, 233, 81, 191, 93, 94, 51, 191, 33, 167, 69, 62, 46, 188, 220, 189, 25, 17, 54, 62, 8, 115, 231, 188, 96, 222, 48, 62, 239, 207, 217, 189, 123, 191, 94, 62, 249, 7, 119, 62, 169, 168, 40, 62, 212, 224, 148, 189, 228, 210, 80, 61, 157, 17, 114, 188, 221, 134, 139, 189, 150, 124, 144, 62, 105, 44, 93, 190, 82, 18, 108, 62, 185, 119, 74, 62, 84, 12, 175, 61, 155, 61, 117, 62, 233, 215, 19, 190, 2, 33, 128, 61, 119, 209, 231, 187, 197, 180, 253, 60, 91, 170, 236, 189, 169, 33, 104, 62, 239, 73, 152, 61, 72, 103, 27, 62, 242, 79, 71, 190, 29, 255, 158, 60, 135, 131, 247, 190, 94, 38, 165, 189, 139, 10, 203, 61, 22, 31, 253, 60, 60, 184, 135, 190, 59, 15, 55, 190, 138, 248, 190, 188, 0, 15, 60, 62, 165, 162, 146, 58, 15, 36, 233, 61, 220, 131, 35, 189, 6, 117, 172, 190, 2, 140, 145, 61, 32, 187, 54, 62, 117, 138, 160, 187, 54, 150, 33, 189, 29, 136, 9, 190, 45, 39, 178, 189, 140, 49, 159, 189, 164, 251, 220, 188, 169, 195, 122, 190, 189, 145, 193, 62, 186, 29, 224, 61, 157, 144, 231, 188, 166, 113, 0, 61, 226, 159, 110, 60, 250, 146, 31, 62, 215, 21, 175, 61, 101, 109, 149, 190, 56, 154, 204, 61, 90, 162, 131, 61, 136, 134, 78, 190, 89, 98, 139, 190, 151, 98, 161, 190, 4, 229, 186, 61, 250, 80, 24, 189, 158, 53, 184, 189, 174, 163, 2, 191, 194, 202, 219, 188, 190, 238, 109, 190, 100, 112, 153, 61, 56, 192, 79, 62, 82, 234, 82, 62, 78, 203, 248, 190, 144, 218, 184, 190, 164, 250, 231, 190, 164, 188, 163, 62, 72, 138, 217, 189, 199, 122, 202, 189, 218, 26, 197, 189, 159, 18, 83, 189, 252, 88, 197, 189, 46, 170, 42, 61, 14, 76, 185, 190, 211, 125, 50, 191, 0, 189, 135, 190, 10, 89, 142, 189, 36, 109, 4, 191, 198, 16, 86, 62, 90, 3, 80, 62, 202, 123, 209, 62, 31, 77, 217, 190, 93, 49, 242, 190, 209, 11, 40, 62, 108, 16, 153, 62, 110, 233, 130, 191, 54, 46, 202, 62, 187, 58, 61, 191, 112, 47, 189, 62, 20, 155, 20, 189, 73, 48, 81, 190, 201, 246, 11, 190, 190, 182, 44, 191, 35, 106, 52, 62, 28, 71, 6, 190, 126, 8, 15, 62, 105, 51, 46, 62, 248, 165, 140, 189, 44, 58, 205, 189, 126, 104, 199, 190, 254, 62, 137, 62, 168, 247, 58, 190, 87, 174, 184, 62, 219, 69, 10, 191, 49, 235, 141, 62, 102, 118, 155, 60, 45, 30, 222, 61, 182, 173, 229, 189, 100, 42, 154, 190, 195, 26, 189, 61, 10, 171, 115, 188, 246, 167, 203, 190, 178, 171, 17, 63, 114, 154, 29, 62, 176, 111, 174, 60, 43, 4, 14, 62, 76, 140, 142, 190, 92, 101, 44, 61, 189, 124, 178, 190, 87, 206, 37, 62, 180, 18, 111, 190, 199, 92, 37, 190, 68, 60, 179, 62, 182, 230, 169, 61, 125, 79, 12, 63, 155, 104, 142, 61, 127, 22, 150, 62, 32, 224, 112, 189, 133, 58, 81, 190, 16, 188, 171, 190, 120, 9, 95, 62, 161, 144, 127, 188, 188, 75, 183, 190, 141, 74, 124, 62, 99, 134, 207, 189, 193, 157, 200, 59, 210, 88, 149, 190, 135, 65, 120, 189, 89, 74, 32, 62, 158, 226, 96, 62, 15, 167, 205, 190, 192, 206, 90, 190, 81, 201, 149, 61, 140, 255, 145, 61, 220, 171, 170, 190, 252, 89, 53, 190, 134, 76, 5, 62, 79, 105, 169, 61, 90, 70, 165, 62, 132, 165, 230, 190, 165, 80, 26, 62, 71, 5, 154, 61, 23, 107, 83, 62, 123, 58, 138, 189, 255, 245, 79, 190, 219, 3, 103, 191, 184, 231, 150, 191, 156, 64, 248, 62, 102, 28, 166, 61, 164, 201, 155, 62, 224, 21, 85, 190, 97, 197, 80, 191, 30, 160, 192, 62, 108, 119, 33, 60, 178, 189, 146, 62, 215, 229, 223, 60, 173, 211, 50, 62, 251, 67, 159, 191, 172, 78, 101, 62, 191, 183, 172, 190, 35, 220, 30, 61, 69, 179, 186, 189, 183, 142, 39, 191, 32, 249, 88, 61, 146, 137, 101, 190, 245, 55, 196, 60, 46, 57, 2, 63, 9, 206, 18, 187, 251, 30, 255, 190, 164, 65, 146, 62, 253, 124, 197, 190, 79, 114, 170, 190, 121, 226, 75, 191, 37, 61, 32, 61, 250, 132, 6, 187, 8, 182, 248, 190, 26, 48, 46, 190, 178, 222, 42, 189, 195, 192, 164, 190, 132, 226, 255, 61, 100, 121, 67, 62, 2, 196, 221, 190, 58, 103, 103, 190, 151, 145, 11, 191, 84, 21, 136, 62, 48, 47, 123, 189, 94, 168, 10, 188, 12, 245, 113, 61, 144, 156, 244, 61, 236, 190, 27, 60, 91, 233, 57, 62, 45, 124, 115, 190, 221, 245, 5, 191, 52, 14, 108, 190, 208, 53, 215, 189, 6, 31, 81, 191, 53, 49, 191, 61, 129, 130, 96, 62, 62, 19, 131, 62, 69, 100, 68, 191, 33, 169, 130, 189, 5, 163, 121, 189, 5, 41, 95, 62, 134, 186, 107, 191, 189, 171, 159, 62, 202, 40, 182, 190, 247, 138, 236, 60, 151, 110, 173, 61, 249, 82, 111, 190, 37, 232, 178, 62, 159, 108, 235, 191, 237, 59, 104, 189, 10, 225, 200, 61, 105, 209, 186, 189, 26, 138, 74, 62, 150, 140, 73, 190, 180, 50, 212, 190, 115, 238, 106, 190, 233, 124, 58, 62, 114, 50, 113, 61, 3, 25, 26, 190, 136, 11, 2, 62, 208, 152, 132, 189, 105, 58, 238, 62, 1, 75, 34, 190, 8, 168, 59, 190, 128, 126, 171, 62, 39, 214, 183, 61, 219, 165, 59, 190, 162, 19, 89, 190, 193, 97, 225, 189, 158, 72, 164, 62, 251, 63, 88, 189, 139, 145, 208, 191, 135, 2, 197, 190, 83, 173, 91, 62, 70, 8, 4, 189, 114, 81, 99, 61, 9, 25, 223, 188, 2, 238, 77, 190, 125, 220, 120, 62, 2, 190, 167, 189, 135, 216, 148, 62, 239, 142, 28, 61, 3, 141, 136, 62, 75, 30, 76, 190, 44, 17, 152, 190, 22, 121, 6, 191, 64, 90, 93, 62, 231, 166, 44, 62, 94, 47, 108, 190, 70, 187, 181, 62, 71, 36, 92, 189, 137, 64, 253, 189, 16, 77, 27, 190, 142, 156, 69, 189, 5, 34, 155, 61, 109, 160, 85, 62, 92, 182, 178, 189, 100, 241, 49, 190, 112, 180, 108, 61, 90, 41, 137, 62, 179, 15, 176, 189, 135, 227, 184, 189, 37, 139, 142, 61, 74, 7, 159, 59, 66, 62, 193, 62, 25, 157, 112, 191, 61, 26, 188, 188, 70, 73, 224, 188, 193, 237, 79, 62, 160, 209, 101, 191, 123, 208, 163, 190, 130, 173, 153, 189, 212, 13, 24, 190, 89, 81, 39, 61, 76, 41, 16, 62, 239, 201, 181, 190, 136, 10, 43, 190, 219, 99, 79, 190, 54, 70, 153, 188, 224, 31, 200, 61, 57, 29, 159, 189, 203, 242, 41, 190, 3, 131, 152, 186, 212, 79, 137, 61, 140, 197, 160, 61, 149, 94, 163, 190, 20, 222, 119, 190, 147, 54, 149, 188, 220, 39, 88, 190, 232, 94, 30, 191, 85, 195, 134, 190, 110, 59, 76, 62, 149, 163, 175, 62, 40, 176, 42, 191, 75, 173, 1, 191, 241, 122, 192, 61, 66, 187, 198, 189, 185, 186, 17, 191, 72, 156, 153, 62, 206, 85, 5, 191, 17, 103, 19, 191, 49, 79, 176, 61, 71, 2, 59, 190, 185, 253, 5, 190, 136, 21, 216, 189, 188, 226, 213, 61, 222, 47, 153, 60, 178, 221, 212, 189, 227, 26, 140, 60, 134, 90, 187, 59, 171, 115, 153, 189, 183, 85, 50, 190, 20, 216, 129, 60, 84, 52, 48, 190, 191, 168, 58, 190, 26, 8, 41, 188, 252, 80, 132, 59, 141, 157, 17, 61, 249, 5, 26, 190, 68, 124, 67, 186, 36, 171, 167, 60, 240, 92, 214, 189, 16, 91, 13, 62, 6, 222, 50, 188, 213, 28, 1, 62, 248, 225, 43, 188, 184, 176, 180, 61, 46, 120, 112, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 29, 15, 74, 189, 238, 209, 15, 190, 150, 111, 245, 60, 105, 65, 42, 62, 227, 107, 59, 190, 65, 177, 227, 190, 225, 189, 94, 190, 200, 161, 183, 62, 139, 227, 186, 190, 198, 143, 95, 190, 144, 99, 27, 190, 253, 228, 231, 189, 216, 101, 107, 190, 107, 229, 148, 190, 184, 180, 156, 62, 131, 235, 136, 189, 254, 102, 9, 190, 100, 200, 249, 190, 81, 219, 104, 62, 206, 79, 152, 57, 169, 202, 228, 189, 160, 20, 25, 191, 54, 166, 31, 190, 200, 200, 0, 61, 86, 218, 198, 61, 186, 37, 23, 191, 163, 98, 10, 61, 55, 178, 170, 62, 88, 194, 16, 191, 105, 241, 32, 189, 169, 241, 128, 191, 154, 12, 137, 62, 70, 70, 133, 190, 2, 105, 66, 62, 137, 50, 30, 190, 132, 220, 156, 61, 9, 68, 67, 189, 231, 91, 249, 189, 244, 141, 65, 60, 181, 227, 145, 189, 80, 224, 153, 191, 190, 204, 110, 62, 148, 110, 77, 63, 244, 90, 45, 189, 129, 14, 132, 189, 82, 102, 4, 191, 226, 189, 29, 189, 112, 38, 4, 191, 101, 104, 191, 61, 127, 183, 63, 191, 136, 227, 4, 62, 145, 97, 116, 62, 100, 248, 87, 190, 247, 208, 3, 62, 29, 14, 77, 189, 201, 165, 4, 62, 142, 44, 221, 188, 55, 137, 178, 189, 55, 220, 46, 61, 37, 81, 188, 62, 13, 9, 101, 190, 143, 173, 50, 62, 86, 82, 241, 62, 43, 103, 231, 189, 60, 13, 104, 189, 176, 109, 191, 62, 85, 154, 129, 59, 115, 153, 213, 59, 181, 161, 138, 189, 127, 185, 147, 61, 59, 136, 20, 189, 61, 225, 4, 189, 6, 161, 143, 189, 185, 235, 198, 189, 208, 38, 16, 190, 244, 244, 82, 189, 182, 52, 20, 62, 48, 161, 175, 189, 196, 116, 205, 60, 130, 46, 156, 61, 14, 84, 79, 189, 199, 133, 101, 189, 250, 119, 17, 190, 147, 69, 83, 61, 88, 160, 213, 58, 241, 84, 17, 62, 12, 126, 60, 61, 48, 195, 14, 190, 246, 123, 67, 190, 177, 137, 2, 189, 108, 192, 28, 189, 83, 234, 174, 189, 203, 71, 47, 189, 77, 239, 170, 58, 195, 124, 152, 187, 97, 236, 63, 60, 50, 98, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 187, 214, 189, 236, 178, 132, 62, 252, 219, 26, 190, 240, 208, 15, 187, 156, 130, 140, 62, 224, 145, 52, 190, 1, 179, 163, 189, 185, 168, 155, 61, 63, 137, 189, 62, 5, 45, 130, 62, 25, 21, 128, 189, 172, 109, 44, 62, 118, 143, 132, 61, 178, 76, 93, 62, 173, 205, 47, 188, 150, 176, 155, 61, 158, 49, 27, 61, 9, 28, 75, 190, 78, 9, 18, 61, 21, 58, 95, 62, 123, 126, 211, 61, 111, 56, 199, 61, 248, 183, 126, 189, 165, 66, 59, 62, 18, 213, 163, 61, 36, 228, 77, 62, 245, 71, 141, 188, 184, 91, 35, 62, 62, 237, 140, 189, 1, 12, 2, 62, 34, 182, 106, 190, 251, 48, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 103, 4, 191, 253, 52, 205, 190, 218, 120, 117, 63, 108, 81, 18, 63, 10, 221, 217, 61, 160, 211, 208, 61, 182, 205, 72, 63, 30, 133, 14, 191, 208, 48, 195, 60, 243, 69, 120, 61, 242, 247, 231, 190, 153, 158, 112, 189, 175, 194, 68, 191, 225, 31, 104, 190, 38, 112, 144, 190, 85, 177, 53, 190, 16, 163, 242, 190, 199, 36, 56, 190, 84, 10, 209, 61, 241, 59, 243, 60, 88, 232, 192, 190, 118, 46, 198, 62, 2, 189, 39, 190, 101, 243, 162, 63, 51, 253, 30, 191, 44, 249, 186, 62, 169, 223, 178, 190, 236, 140, 45, 190, 229, 201, 8, 62, 200, 179, 22, 190, 115, 71, 13, 191, 10, 60, 49, 189, 158, 243, 6, 63, 70, 143, 185, 61, 180, 145, 211, 62, 148, 38, 74, 62, 14, 201, 108, 190, 143, 193, 210, 61, 55, 72, 138, 61, 176, 143, 90, 189, 205, 93, 174, 190, 53, 10, 128, 190, 225, 14, 194, 189, 241, 22, 134, 190, 225, 209, 93, 60, 245, 243, 61, 190, 236, 241, 221, 60, 115, 131, 65, 190, 76, 123, 79, 62, 152, 241, 156, 61, 74, 154, 71, 190, 153, 24, 78, 190, 208, 187, 28, 63, 120, 108, 104, 62, 195, 116, 164, 61, 7, 232, 110, 61, 210, 47, 221, 189, 22, 113, 19, 190, 46, 248, 54, 62, 101, 211, 126, 190, 97, 136, 92, 189, 131, 84, 238, 190, 73, 201, 180, 62, 212, 74, 192, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 57, 35, 62, 244, 17, 21, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 85, 202, 191, 125, 43, 58, 63, 148, 213, 195, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {67, 222, 174, 64, 141, 52, 94, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}