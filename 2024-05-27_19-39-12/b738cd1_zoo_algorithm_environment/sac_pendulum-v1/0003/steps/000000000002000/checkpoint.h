// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 118, 90, 190, 49, 22, 29, 191, 234, 49, 211, 62, 34, 79, 164, 62, 7, 166, 17, 191, 192, 66, 163, 62, 52, 203, 173, 62, 22, 121, 35, 190, 115, 47, 0, 191, 82, 202, 210, 190, 16, 191, 218, 190, 147, 150, 197, 190, 63, 142, 12, 191, 133, 15, 210, 62, 15, 108, 120, 190, 195, 31, 171, 62, 245, 195, 55, 190, 254, 146, 64, 62, 184, 240, 15, 191, 1, 99, 131, 189, 117, 75, 101, 61, 21, 65, 231, 62, 151, 241, 135, 61, 111, 35, 18, 191, 1, 206, 149, 190, 248, 57, 186, 62, 150, 156, 130, 190, 131, 208, 252, 190, 211, 193, 130, 63, 184, 135, 65, 190, 76, 208, 12, 63, 188, 223, 7, 63, 173, 67, 18, 191, 131, 184, 81, 190, 163, 1, 108, 62, 26, 45, 19, 61, 167, 111, 187, 62, 45, 98, 250, 190, 201, 57, 236, 62, 143, 229, 245, 190, 47, 190, 234, 61, 173, 137, 34, 62, 2, 209, 62, 62, 18, 100, 171, 188, 139, 217, 137, 190, 1, 163, 24, 191, 213, 247, 241, 190, 131, 224, 47, 190, 175, 166, 15, 63, 40, 71, 107, 191, 44, 94, 237, 61, 231, 181, 1, 190, 198, 209, 75, 191, 146, 6, 129, 61, 217, 120, 157, 61, 146, 198, 173, 190, 245, 235, 215, 62, 154, 147, 176, 190, 188, 159, 30, 191, 121, 224, 194, 190, 14, 201, 137, 190, 210, 42, 68, 191, 248, 121, 124, 62, 163, 174, 81, 189, 136, 167, 64, 63, 34, 120, 229, 62, 28, 85, 48, 62, 75, 225, 19, 63, 200, 219, 161, 190, 24, 217, 41, 191, 164, 220, 53, 190, 90, 204, 190, 189, 96, 86, 168, 189, 129, 190, 48, 191, 235, 112, 76, 62, 213, 212, 215, 62, 160, 153, 70, 191, 117, 93, 135, 62, 162, 121, 217, 190, 155, 33, 47, 190, 40, 130, 87, 190, 198, 178, 45, 63, 247, 162, 35, 63, 210, 101, 242, 62, 81, 58, 78, 62, 220, 250, 220, 61, 201, 230, 64, 190, 254, 74, 15, 63, 49, 41, 237, 62, 92, 79, 61, 61, 48, 142, 232, 190, 127, 73, 143, 191, 93, 170, 47, 62, 28, 211, 249, 62, 132, 226, 38, 63, 232, 84, 247, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 99, 230, 190, 215, 128, 152, 190, 15, 68, 158, 62, 234, 122, 151, 190, 195, 247, 103, 62, 160, 97, 113, 62, 112, 100, 209, 189, 95, 169, 8, 62, 220, 222, 37, 191, 62, 126, 70, 188, 137, 244, 6, 63, 12, 46, 242, 61, 162, 232, 2, 191, 242, 188, 37, 63, 112, 194, 226, 62, 69, 225, 17, 62, 229, 165, 60, 63, 195, 66, 95, 62, 110, 97, 239, 190, 175, 162, 217, 62, 21, 14, 234, 188, 194, 60, 110, 61, 226, 194, 30, 63, 160, 67, 105, 189, 96, 176, 40, 62, 33, 164, 11, 190, 77, 180, 96, 62, 126, 133, 5, 191, 17, 138, 203, 190, 86, 123, 65, 62, 110, 205, 4, 190, 16, 135, 242, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 221, 203, 189, 51, 86, 152, 189, 216, 176, 172, 60, 160, 93, 201, 60, 220, 166, 204, 60, 210, 253, 218, 59, 18, 249, 238, 188, 220, 209, 43, 62, 144, 174, 159, 61, 180, 195, 173, 189, 153, 165, 145, 189, 31, 172, 221, 189, 104, 10, 206, 61, 254, 114, 40, 190, 90, 150, 51, 188, 67, 95, 181, 61, 234, 7, 245, 189, 56, 93, 189, 189, 95, 12, 195, 189, 89, 168, 97, 190, 102, 246, 253, 61, 102, 14, 59, 62, 207, 237, 152, 61, 101, 110, 208, 189, 56, 180, 166, 60, 50, 97, 40, 190, 236, 190, 10, 189, 71, 121, 205, 61, 182, 98, 149, 62, 25, 66, 140, 61, 108, 229, 119, 190, 164, 182, 138, 62, 46, 1, 235, 188, 187, 211, 25, 62, 215, 110, 69, 190, 247, 33, 23, 188, 245, 3, 250, 61, 133, 75, 217, 60, 236, 86, 238, 61, 188, 66, 24, 187, 106, 133, 201, 187, 153, 2, 58, 62, 73, 92, 62, 189, 30, 49, 220, 61, 24, 3, 133, 189, 4, 148, 190, 60, 70, 158, 38, 190, 79, 188, 45, 189, 19, 90, 148, 190, 3, 252, 3, 61, 229, 1, 78, 189, 143, 112, 64, 61, 196, 192, 78, 190, 103, 214, 14, 62, 84, 106, 6, 62, 243, 20, 194, 61, 207, 161, 115, 188, 194, 21, 6, 62, 144, 84, 109, 190, 53, 146, 73, 189, 173, 195, 115, 62, 117, 15, 175, 188, 99, 107, 88, 190, 11, 40, 1, 190, 78, 80, 224, 61, 196, 255, 117, 58, 76, 139, 117, 60, 167, 114, 16, 62, 149, 97, 46, 189, 73, 193, 142, 61, 142, 43, 72, 62, 153, 166, 34, 62, 60, 30, 18, 62, 101, 156, 23, 190, 198, 38, 21, 190, 198, 60, 150, 189, 126, 116, 121, 190, 82, 116, 97, 60, 8, 241, 72, 61, 64, 34, 58, 61, 173, 89, 148, 61, 143, 183, 68, 62, 229, 119, 185, 61, 112, 68, 143, 61, 81, 122, 64, 62, 71, 230, 8, 190, 179, 149, 97, 61, 75, 170, 151, 62, 242, 243, 59, 189, 85, 20, 13, 190, 82, 57, 119, 189, 200, 216, 174, 61, 186, 103, 34, 190, 247, 130, 223, 189, 245, 167, 172, 62, 1, 201, 199, 60, 166, 174, 137, 61, 168, 95, 78, 189, 223, 113, 189, 188, 98, 44, 54, 188, 52, 235, 246, 189, 158, 5, 194, 188, 234, 70, 234, 61, 227, 190, 28, 62, 127, 98, 1, 62, 192, 239, 211, 61, 210, 1, 20, 190, 142, 24, 249, 189, 149, 150, 72, 189, 114, 178, 173, 61, 129, 170, 144, 61, 66, 223, 22, 190, 134, 192, 120, 190, 174, 2, 107, 61, 172, 155, 10, 62, 187, 29, 214, 188, 233, 224, 106, 189, 163, 10, 223, 60, 162, 160, 113, 190, 209, 170, 29, 190, 235, 30, 74, 190, 143, 251, 137, 188, 91, 255, 21, 190, 88, 188, 208, 61, 103, 133, 166, 61, 88, 229, 198, 61, 4, 140, 148, 61, 252, 10, 164, 185, 91, 23, 81, 189, 95, 95, 12, 189, 49, 250, 32, 189, 205, 43, 62, 190, 120, 213, 43, 187, 255, 59, 34, 62, 150, 179, 222, 61, 164, 34, 90, 189, 23, 14, 68, 189, 115, 152, 37, 61, 163, 228, 12, 62, 222, 35, 39, 60, 70, 63, 25, 190, 163, 14, 228, 61, 89, 219, 154, 189, 76, 64, 0, 190, 45, 131, 204, 61, 27, 56, 37, 62, 98, 21, 249, 189, 82, 145, 253, 61, 208, 170, 191, 189, 185, 23, 120, 61, 175, 253, 57, 62, 149, 215, 36, 62, 219, 213, 201, 59, 102, 172, 76, 61, 125, 20, 50, 61, 82, 80, 204, 189, 171, 40, 72, 190, 1, 87, 137, 60, 57, 103, 14, 62, 6, 54, 179, 61, 183, 68, 29, 62, 173, 84, 7, 189, 161, 184, 8, 62, 87, 40, 97, 60, 189, 168, 205, 61, 23, 95, 232, 189, 90, 87, 206, 61, 219, 194, 48, 190, 16, 242, 128, 61, 37, 83, 67, 60, 173, 145, 198, 189, 83, 37, 27, 189, 19, 185, 19, 62, 46, 214, 162, 189, 98, 190, 216, 61, 95, 61, 47, 188, 163, 208, 34, 190, 84, 48, 15, 190, 13, 229, 205, 189, 32, 100, 86, 189, 215, 76, 131, 189, 168, 225, 225, 61, 3, 15, 209, 60, 147, 132, 84, 61, 150, 196, 31, 62, 243, 41, 171, 188, 53, 205, 178, 189, 183, 108, 197, 189, 176, 21, 37, 62, 106, 220, 170, 189, 250, 102, 111, 60, 81, 173, 11, 190, 147, 198, 60, 189, 82, 9, 111, 190, 69, 71, 249, 61, 192, 238, 26, 190, 63, 104, 29, 188, 75, 97, 17, 60, 156, 64, 196, 61, 43, 38, 49, 62, 121, 161, 141, 188, 63, 122, 131, 190, 255, 53, 188, 188, 100, 211, 28, 188, 50, 99, 114, 190, 128, 214, 151, 61, 212, 254, 236, 61, 173, 172, 209, 189, 240, 24, 164, 62, 44, 206, 109, 62, 88, 70, 139, 61, 221, 96, 55, 62, 150, 241, 42, 62, 238, 50, 0, 190, 242, 216, 238, 61, 126, 122, 243, 189, 45, 179, 15, 62, 194, 130, 117, 189, 78, 119, 193, 60, 191, 21, 196, 61, 74, 25, 74, 190, 197, 239, 83, 61, 85, 57, 220, 61, 156, 53, 47, 190, 115, 0, 183, 189, 168, 69, 143, 190, 101, 125, 163, 190, 207, 251, 237, 187, 44, 254, 243, 188, 115, 202, 128, 61, 108, 78, 52, 190, 237, 50, 50, 189, 81, 111, 9, 62, 251, 180, 38, 62, 236, 209, 163, 61, 155, 175, 63, 62, 236, 88, 210, 189, 192, 41, 182, 189, 15, 157, 196, 188, 80, 106, 169, 59, 248, 121, 66, 186, 109, 201, 139, 189, 237, 218, 165, 189, 152, 133, 173, 190, 52, 217, 5, 62, 252, 49, 95, 62, 66, 159, 156, 189, 152, 97, 175, 190, 132, 17, 142, 187, 3, 179, 135, 190, 117, 79, 145, 61, 221, 50, 230, 60, 77, 245, 6, 61, 145, 38, 106, 62, 242, 156, 132, 190, 43, 114, 134, 62, 212, 254, 245, 189, 103, 168, 173, 187, 65, 12, 147, 189, 107, 140, 145, 189, 188, 131, 30, 187, 160, 102, 29, 61, 100, 138, 64, 62, 59, 221, 198, 61, 133, 222, 241, 188, 165, 186, 59, 62, 114, 249, 125, 62, 46, 114, 186, 188, 68, 59, 238, 188, 84, 18, 164, 60, 33, 56, 11, 62, 224, 152, 223, 61, 101, 24, 36, 190, 7, 93, 20, 190, 106, 198, 85, 61, 141, 49, 224, 189, 4, 126, 32, 190, 88, 142, 132, 62, 88, 124, 176, 61, 41, 222, 198, 188, 86, 25, 154, 188, 216, 118, 34, 62, 90, 165, 148, 189, 50, 9, 124, 189, 94, 99, 176, 61, 238, 253, 179, 62, 44, 173, 143, 190, 250, 59, 15, 62, 95, 16, 255, 189, 158, 228, 78, 189, 10, 25, 225, 61, 207, 217, 239, 189, 3, 68, 170, 61, 142, 40, 223, 188, 119, 147, 209, 189, 174, 179, 32, 62, 51, 99, 69, 190, 39, 38, 81, 190, 103, 197, 150, 60, 5, 60, 6, 190, 253, 65, 176, 59, 2, 219, 71, 62, 182, 175, 173, 58, 194, 251, 42, 62, 118, 127, 158, 62, 94, 147, 3, 189, 241, 236, 247, 189, 66, 253, 142, 60, 152, 62, 70, 62, 184, 203, 141, 61, 135, 181, 13, 61, 43, 80, 213, 188, 173, 185, 116, 61, 122, 217, 67, 61, 233, 170, 207, 189, 204, 245, 37, 61, 2, 250, 139, 190, 12, 133, 244, 61, 135, 45, 99, 62, 250, 217, 124, 190, 250, 177, 148, 61, 85, 215, 76, 190, 57, 148, 102, 61, 214, 124, 49, 62, 78, 180, 49, 190, 206, 119, 11, 62, 172, 94, 193, 61, 101, 252, 4, 190, 32, 113, 194, 61, 32, 155, 166, 60, 195, 250, 13, 62, 192, 84, 58, 189, 92, 244, 224, 189, 11, 32, 57, 190, 201, 130, 173, 61, 91, 1, 160, 189, 205, 224, 195, 189, 90, 72, 43, 190, 214, 183, 200, 61, 28, 24, 145, 187, 101, 26, 73, 189, 160, 223, 162, 61, 126, 83, 26, 62, 217, 4, 128, 190, 185, 251, 182, 189, 230, 208, 71, 61, 38, 212, 33, 190, 10, 210, 52, 62, 192, 60, 142, 189, 139, 41, 193, 61, 149, 109, 144, 190, 136, 29, 133, 62, 81, 31, 30, 61, 216, 9, 18, 62, 95, 209, 67, 190, 95, 248, 9, 190, 103, 90, 75, 62, 16, 35, 18, 62, 113, 146, 147, 189, 147, 242, 110, 60, 223, 230, 178, 188, 9, 188, 21, 62, 18, 110, 24, 62, 97, 137, 70, 62, 88, 96, 153, 61, 127, 7, 184, 61, 88, 125, 65, 62, 250, 33, 127, 60, 100, 8, 127, 190, 33, 31, 211, 187, 4, 37, 250, 59, 143, 255, 151, 61, 118, 241, 109, 61, 19, 185, 109, 61, 160, 1, 20, 62, 100, 74, 43, 190, 104, 159, 5, 190, 241, 147, 115, 62, 212, 236, 13, 62, 245, 134, 204, 189, 87, 197, 89, 62, 89, 30, 168, 188, 213, 111, 153, 190, 186, 227, 191, 189, 243, 33, 14, 62, 250, 169, 89, 62, 35, 50, 196, 189, 239, 43, 225, 61, 141, 100, 72, 62, 84, 2, 193, 61, 250, 93, 193, 61, 146, 108, 99, 189, 29, 12, 156, 187, 92, 36, 40, 62, 126, 189, 82, 190, 89, 238, 75, 189, 30, 37, 57, 60, 130, 162, 216, 189, 156, 72, 85, 61, 177, 122, 19, 190, 96, 127, 179, 189, 38, 217, 56, 189, 43, 119, 126, 187, 44, 252, 120, 61, 84, 15, 8, 190, 157, 24, 22, 62, 178, 176, 33, 189, 141, 2, 49, 61, 90, 163, 111, 190, 136, 85, 36, 61, 196, 234, 215, 61, 39, 179, 145, 189, 1, 247, 132, 190, 95, 105, 145, 189, 89, 188, 3, 190, 10, 207, 93, 190, 181, 158, 30, 60, 25, 43, 101, 62, 122, 64, 177, 189, 74, 38, 75, 61, 134, 184, 61, 62, 135, 145, 227, 189, 24, 29, 27, 188, 75, 47, 210, 61, 134, 33, 213, 189, 190, 73, 22, 60, 155, 155, 143, 61, 63, 158, 196, 60, 14, 126, 72, 62, 64, 23, 34, 62, 236, 167, 12, 190, 40, 195, 126, 188, 208, 43, 51, 190, 93, 166, 160, 61, 197, 200, 29, 62, 147, 210, 13, 190, 27, 89, 189, 61, 114, 188, 242, 189, 11, 85, 141, 189, 18, 59, 55, 61, 203, 214, 59, 60, 252, 141, 67, 62, 31, 89, 195, 61, 106, 248, 24, 60, 231, 253, 89, 60, 30, 16, 111, 62, 29, 186, 100, 189, 239, 228, 40, 189, 87, 132, 136, 189, 209, 112, 74, 189, 15, 125, 75, 190, 192, 65, 24, 189, 59, 170, 137, 61, 174, 185, 34, 62, 91, 200, 99, 189, 237, 237, 38, 190, 49, 84, 113, 189, 181, 99, 3, 62, 224, 33, 165, 189, 72, 85, 213, 61, 214, 138, 0, 190, 144, 223, 243, 188, 243, 30, 137, 189, 6, 61, 224, 61, 182, 90, 6, 62, 230, 33, 230, 61, 13, 173, 79, 189, 239, 23, 6, 62, 120, 204, 112, 61, 36, 181, 71, 62, 187, 130, 82, 61, 235, 195, 48, 62, 223, 13, 5, 189, 230, 228, 104, 62, 245, 204, 46, 62, 232, 73, 137, 61, 243, 120, 105, 61, 64, 93, 103, 61, 59, 77, 95, 61, 213, 29, 134, 61, 18, 65, 131, 189, 146, 165, 126, 188, 16, 181, 238, 189, 154, 55, 195, 188, 249, 115, 188, 190, 40, 226, 40, 61, 53, 207, 176, 61, 137, 96, 184, 189, 176, 59, 93, 61, 156, 145, 52, 190, 220, 95, 84, 62, 9, 100, 239, 60, 159, 195, 99, 61, 200, 105, 216, 188, 68, 202, 41, 188, 10, 58, 134, 189, 134, 154, 204, 62, 200, 91, 172, 61, 34, 218, 95, 62, 26, 112, 135, 61, 4, 76, 45, 62, 53, 113, 182, 189, 81, 90, 149, 189, 62, 201, 120, 190, 191, 77, 223, 61, 215, 90, 148, 62, 86, 107, 65, 190, 93, 72, 15, 61, 202, 176, 14, 190, 104, 28, 97, 61, 117, 115, 138, 60, 142, 52, 125, 189, 171, 19, 188, 190, 225, 187, 135, 190, 113, 164, 14, 190, 85, 77, 37, 190, 201, 100, 97, 62, 162, 144, 156, 61, 194, 196, 142, 62, 25, 202, 120, 190, 152, 188, 234, 60, 131, 206, 161, 62, 216, 79, 179, 189, 245, 128, 251, 61, 81, 29, 67, 190, 70, 189, 101, 62, 21, 42, 141, 61, 74, 97, 78, 61, 201, 216, 47, 191, 234, 247, 226, 188, 111, 27, 185, 190, 188, 139, 162, 61, 239, 127, 4, 191, 126, 47, 151, 62, 113, 254, 9, 61, 241, 77, 196, 61, 57, 73, 47, 190, 221, 189, 97, 188, 111, 201, 216, 61, 83, 110, 17, 190, 253, 140, 164, 189, 20, 66, 36, 61, 136, 120, 167, 190, 27, 177, 49, 62, 110, 28, 105, 62, 22, 221, 202, 61, 146, 11, 233, 61, 218, 192, 165, 189, 241, 139, 125, 190, 147, 147, 200, 189, 183, 77, 20, 62, 184, 158, 5, 61, 19, 176, 31, 189, 38, 250, 128, 190, 48, 176, 86, 189, 16, 150, 117, 61, 155, 185, 99, 62, 134, 235, 48, 189, 158, 140, 49, 189, 97, 35, 214, 61, 48, 184, 111, 61, 199, 182, 13, 190, 194, 222, 84, 62, 129, 216, 24, 190, 231, 111, 68, 189, 229, 38, 190, 189, 91, 196, 205, 189, 215, 73, 181, 189, 111, 116, 89, 62, 217, 160, 37, 60, 114, 5, 170, 59, 196, 229, 84, 189, 157, 55, 33, 189, 229, 107, 132, 189, 202, 149, 11, 62, 245, 156, 188, 189, 140, 2, 76, 62, 168, 139, 107, 60, 59, 90, 248, 61, 57, 171, 118, 60, 211, 141, 21, 62, 188, 176, 92, 62, 245, 249, 1, 62, 6, 177, 248, 189, 58, 122, 79, 190, 45, 3, 192, 189, 31, 41, 208, 189, 116, 140, 0, 62, 248, 16, 7, 190, 217, 247, 6, 62, 250, 45, 79, 62, 238, 34, 146, 61, 70, 111, 63, 62, 9, 22, 229, 188, 74, 78, 186, 61, 189, 117, 219, 61, 199, 173, 236, 60, 68, 105, 236, 189, 164, 167, 45, 62, 176, 235, 184, 60, 209, 169, 24, 62, 124, 32, 53, 190, 63, 135, 76, 61, 160, 19, 80, 190, 154, 35, 57, 190, 15, 129, 80, 187, 36, 197, 219, 61, 177, 141, 45, 190, 217, 217, 39, 190, 39, 162, 135, 60, 83, 160, 141, 61, 121, 161, 113, 61, 70, 91, 192, 61, 55, 224, 70, 60, 71, 92, 39, 190, 87, 187, 26, 189, 210, 170, 17, 60, 143, 216, 120, 189, 81, 199, 132, 189, 50, 211, 37, 190, 12, 123, 48, 189, 9, 0, 230, 188, 54, 135, 203, 188, 172, 83, 141, 189, 188, 131, 198, 62, 42, 122, 79, 62, 76, 71, 171, 187, 58, 62, 35, 62, 18, 230, 13, 61, 103, 193, 25, 62, 38, 136, 131, 61, 232, 247, 230, 189, 164, 132, 4, 62, 233, 183, 224, 61, 207, 245, 196, 189, 139, 72, 15, 189, 153, 239, 0, 190, 1, 83, 63, 62, 251, 73, 165, 61, 151, 139, 66, 188, 102, 53, 47, 189, 23, 98, 230, 189, 222, 63, 65, 190, 232, 202, 54, 189, 211, 81, 112, 62, 245, 21, 5, 61, 252, 98, 123, 61, 220, 142, 129, 190, 248, 148, 255, 57, 131, 245, 142, 62, 250, 223, 23, 190, 211, 251, 242, 60, 36, 40, 41, 190, 62, 157, 49, 61, 1, 81, 18, 190, 50, 213, 105, 61, 198, 106, 248, 190, 33, 81, 205, 189, 237, 192, 13, 190, 227, 198, 147, 189, 146, 33, 226, 189, 115, 218, 24, 62, 19, 222, 3, 62, 253, 194, 135, 62, 234, 198, 22, 190, 62, 99, 134, 189, 170, 37, 70, 62, 39, 144, 115, 62, 112, 80, 187, 61, 18, 102, 234, 61, 210, 184, 132, 190, 234, 161, 66, 62, 225, 60, 87, 189, 174, 37, 31, 190, 35, 195, 150, 188, 179, 110, 82, 61, 4, 206, 248, 189, 237, 176, 86, 61, 200, 244, 196, 187, 249, 165, 114, 190, 226, 91, 140, 189, 0, 34, 217, 190, 6, 199, 165, 190, 67, 250, 254, 60, 41, 163, 147, 189, 142, 115, 54, 62, 154, 206, 47, 190, 76, 55, 50, 62, 138, 55, 255, 60, 53, 82, 108, 62, 52, 23, 126, 189, 187, 19, 247, 61, 137, 239, 146, 61, 176, 44, 161, 61, 240, 27, 64, 190, 146, 193, 143, 62, 11, 89, 0, 62, 132, 237, 244, 187, 92, 229, 2, 62, 157, 61, 215, 61, 105, 189, 44, 61, 107, 204, 76, 189, 185, 120, 52, 62, 158, 63, 164, 189, 104, 16, 254, 189, 0, 21, 77, 62, 80, 86, 232, 61, 183, 211, 180, 61, 91, 128, 86, 62, 37, 52, 6, 62, 174, 144, 152, 61, 101, 83, 13, 190, 217, 3, 38, 61, 22, 11, 242, 61, 115, 65, 151, 189, 250, 165, 38, 62, 78, 221, 126, 61, 131, 192, 34, 62, 241, 13, 233, 61, 223, 248, 237, 189, 233, 79, 248, 189, 53, 149, 228, 189, 186, 179, 183, 61, 8, 170, 221, 189, 238, 8, 84, 190, 145, 246, 16, 62, 143, 140, 101, 59, 220, 209, 71, 61, 241, 30, 21, 190, 185, 142, 96, 61, 253, 127, 173, 189, 65, 92, 189, 61, 136, 223, 84, 62, 24, 144, 29, 62, 252, 12, 252, 188, 52, 34, 228, 61, 254, 77, 94, 188, 95, 242, 64, 190, 95, 169, 108, 190, 141, 82, 36, 61, 116, 115, 159, 189, 230, 84, 12, 62, 52, 101, 18, 62, 220, 80, 243, 189, 33, 107, 148, 60, 56, 210, 152, 190, 93, 157, 43, 190, 83, 205, 136, 61, 173, 51, 175, 188, 219, 15, 142, 60, 72, 107, 188, 61, 101, 185, 47, 62, 79, 145, 50, 190, 116, 40, 19, 62, 112, 88, 5, 189, 58, 99, 247, 60, 184, 56, 211, 61, 137, 51, 220, 188, 73, 248, 180, 190, 118, 216, 136, 62, 167, 77, 165, 61, 242, 115, 166, 190, 76, 167, 131, 61, 206, 98, 29, 190, 252, 177, 247, 189, 29, 253, 138, 190, 201, 163, 227, 61, 221, 200, 176, 60, 225, 105, 143, 60, 50, 195, 35, 190, 107, 97, 198, 188, 173, 77, 77, 190, 226, 178, 38, 62, 119, 93, 24, 190, 55, 187, 228, 61, 182, 252, 41, 190, 18, 182, 65, 190, 162, 147, 130, 62, 141, 9, 245, 189, 104, 88, 226, 60, 140, 246, 42, 61, 103, 25, 4, 62, 52, 30, 245, 61, 58, 248, 36, 62, 233, 221, 2, 191, 24, 110, 19, 190, 85, 162, 43, 190, 130, 80, 193, 61, 105, 214, 141, 190, 137, 44, 42, 62, 39, 60, 3, 62, 193, 150, 116, 61, 90, 70, 133, 190, 99, 64, 87, 189, 96, 143, 234, 187, 238, 226, 184, 61, 229, 62, 211, 60, 192, 93, 85, 61, 168, 242, 8, 190, 56, 171, 55, 59, 250, 18, 180, 61, 75, 181, 84, 190, 38, 15, 69, 61, 228, 103, 245, 189, 162, 126, 180, 61, 163, 114, 232, 60, 53, 87, 184, 60, 115, 34, 197, 189, 73, 230, 138, 189, 158, 189, 153, 190, 172, 181, 11, 190, 32, 150, 54, 61, 147, 85, 230, 61, 223, 19, 233, 189, 165, 53, 188, 60, 100, 8, 224, 61, 58, 195, 178, 62, 0, 28, 176, 188, 187, 197, 6, 190, 175, 180, 14, 62, 105, 89, 187, 61, 225, 8, 202, 189, 106, 238, 37, 190, 222, 111, 40, 61, 198, 71, 145, 62, 4, 197, 126, 189, 15, 54, 31, 189, 127, 209, 250, 189, 131, 231, 125, 190, 57, 130, 163, 189, 62, 16, 46, 62, 122, 138, 218, 61, 53, 32, 50, 190, 165, 106, 10, 62, 32, 203, 79, 190, 157, 7, 116, 60, 78, 25, 85, 61, 113, 155, 160, 61, 172, 207, 41, 189, 58, 214, 179, 190, 117, 203, 61, 190, 137, 166, 46, 62, 137, 52, 14, 188, 11, 79, 21, 62, 177, 5, 71, 62, 55, 204, 16, 62, 122, 153, 215, 189, 127, 30, 44, 189, 59, 74, 153, 189, 54, 105, 204, 189, 227, 166, 204, 61, 153, 226, 9, 189, 254, 107, 40, 190, 194, 107, 23, 61, 203, 181, 3, 62, 218, 254, 153, 188, 152, 12, 131, 189, 92, 92, 67, 61, 172, 235, 105, 189, 170, 235, 203, 61, 253, 175, 194, 188, 180, 108, 250, 189, 163, 118, 218, 189, 249, 83, 47, 61, 232, 132, 86, 190, 192, 247, 101, 190, 109, 207, 147, 189, 152, 125, 53, 189, 36, 180, 158, 61, 52, 111, 77, 189, 154, 148, 26, 189, 106, 16, 7, 190, 108, 13, 15, 62, 76, 15, 203, 60, 204, 97, 178, 61, 244, 204, 0, 62, 41, 242, 253, 189, 178, 210, 141, 61, 88, 201, 52, 62, 12, 173, 254, 188, 56, 99, 220, 190, 120, 108, 105, 60, 83, 181, 60, 61, 110, 155, 174, 189, 121, 69, 61, 190, 119, 99, 199, 61, 181, 243, 57, 62, 117, 18, 23, 62, 203, 68, 245, 188, 111, 191, 54, 190, 181, 71, 228, 61, 6, 156, 234, 61, 199, 74, 89, 62, 191, 249, 134, 62, 170, 125, 117, 190, 96, 66, 85, 61, 224, 210, 5, 62, 233, 222, 42, 190, 185, 253, 5, 190, 136, 21, 216, 189, 21, 123, 230, 61, 92, 212, 160, 60, 239, 112, 157, 189, 227, 26, 140, 60, 134, 90, 187, 59, 180, 150, 167, 189, 183, 85, 50, 190, 13, 110, 26, 61, 113, 177, 45, 190, 171, 0, 32, 190, 26, 8, 41, 188, 32, 133, 34, 61, 106, 82, 126, 61, 76, 246, 15, 190, 21, 162, 135, 60, 184, 20, 191, 60, 151, 80, 126, 189, 231, 51, 29, 62, 104, 151, 60, 188, 118, 196, 18, 62, 23, 237, 248, 60, 65, 191, 220, 61, 117, 95, 24, 189, 192, 100, 20, 190, 81, 48, 225, 188, 213, 124, 176, 61, 54, 96, 166, 188, 192, 17, 10, 190, 244, 88, 135, 61, 10, 250, 20, 61, 188, 214, 83, 189, 218, 198, 190, 186, 169, 31, 171, 189, 37, 129, 219, 61, 254, 67, 22, 62, 152, 93, 26, 61, 65, 168, 30, 189, 239, 100, 7, 62, 110, 38, 29, 189, 247, 108, 141, 188, 37, 243, 19, 62, 237, 175, 26, 62, 130, 168, 40, 187, 143, 134, 27, 190, 107, 201, 225, 60, 35, 175, 238, 189, 206, 126, 249, 189, 87, 185, 52, 61, 125, 15, 30, 190, 113, 170, 211, 188, 30, 6, 148, 62, 208, 175, 85, 190, 216, 7, 160, 188, 201, 217, 90, 62, 28, 68, 17, 61, 100, 37, 56, 190, 241, 161, 250, 59, 122, 136, 147, 62, 76, 76, 91, 190, 50, 195, 211, 60, 85, 18, 32, 190, 234, 5, 27, 62, 141, 78, 11, 190, 49, 21, 61, 190, 105, 34, 214, 61, 249, 233, 21, 190, 241, 133, 76, 188, 185, 36, 202, 61, 116, 186, 94, 61, 40, 225, 53, 190, 9, 111, 1, 189, 246, 55, 184, 189, 5, 129, 213, 188, 100, 7, 213, 60, 225, 197, 166, 61, 32, 160, 21, 189, 139, 39, 6, 190, 107, 17, 170, 61, 30, 57, 27, 190, 24, 67, 28, 62, 46, 162, 217, 188, 67, 242, 54, 60, 181, 41, 170, 60, 68, 237, 124, 189, 80, 127, 27, 188, 182, 103, 2, 62, 43, 39, 169, 189, 133, 67, 27, 190, 3, 119, 66, 61, 168, 170, 1, 190, 7, 133, 206, 59, 66, 8, 24, 62, 85, 154, 129, 59, 115, 153, 213, 59, 42, 2, 81, 189, 0, 97, 180, 61, 45, 82, 193, 188, 61, 225, 4, 189, 135, 204, 138, 189, 3, 46, 166, 189, 68, 133, 13, 190, 91, 54, 60, 189, 55, 166, 37, 62, 139, 15, 175, 189, 196, 116, 205, 60, 31, 145, 166, 61, 57, 80, 28, 189, 151, 248, 48, 189, 55, 98, 17, 190, 118, 68, 99, 61, 88, 160, 213, 58, 82, 63, 38, 62, 12, 126, 60, 61, 48, 195, 14, 190, 45, 12, 55, 190, 86, 187, 195, 188, 108, 192, 28, 189, 83, 234, 174, 189, 231, 101, 247, 188, 77, 239, 170, 58, 100, 1, 130, 187, 97, 236, 63, 60, 33, 113, 45, 190, 78, 27, 191, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 98, 56, 188, 32, 121, 60, 62, 131, 220, 33, 190, 84, 4, 20, 61, 129, 187, 70, 62, 85, 163, 42, 190, 195, 62, 73, 189, 7, 248, 201, 189, 215, 131, 127, 62, 68, 11, 12, 62, 36, 8, 42, 190, 25, 218, 89, 62, 99, 206, 11, 62, 180, 217, 30, 62, 93, 172, 234, 59, 170, 32, 175, 189, 241, 172, 68, 189, 185, 45, 18, 190, 134, 173, 149, 189, 191, 78, 94, 62, 42, 136, 206, 61, 169, 41, 24, 60, 48, 4, 126, 61, 218, 215, 181, 61, 196, 23, 122, 59, 25, 232, 18, 62, 25, 201, 169, 61, 216, 145, 35, 62, 154, 176, 34, 189, 173, 210, 102, 62, 139, 152, 67, 189, 168, 44, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 38, 115, 190, 232, 40, 30, 190, 36, 15, 71, 62, 22, 148, 11, 62, 249, 90, 206, 61, 204, 8, 210, 61, 119, 49, 55, 62, 11, 104, 111, 190, 49, 11, 222, 189, 83, 59, 197, 61, 59, 38, 0, 190, 71, 184, 6, 190, 233, 209, 38, 190, 197, 84, 173, 189, 137, 115, 89, 189, 2, 210, 59, 190, 31, 113, 230, 190, 146, 85, 8, 190, 73, 79, 8, 62, 33, 88, 131, 61, 163, 236, 128, 190, 126, 235, 116, 62, 251, 87, 9, 190, 225, 172, 191, 62, 114, 168, 148, 190, 23, 183, 45, 62, 215, 131, 124, 190, 180, 21, 224, 189, 244, 157, 15, 62, 87, 188, 191, 189, 135, 138, 105, 61, 107, 236, 56, 189, 51, 235, 44, 62, 81, 28, 178, 189, 47, 190, 33, 62, 157, 56, 244, 61, 247, 52, 126, 190, 79, 228, 210, 61, 20, 75, 142, 189, 60, 14, 0, 62, 85, 208, 185, 190, 123, 216, 123, 190, 73, 39, 15, 189, 191, 48, 194, 189, 113, 132, 23, 190, 120, 222, 147, 189, 149, 222, 145, 189, 124, 57, 60, 190, 234, 10, 223, 61, 12, 109, 160, 59, 67, 118, 85, 190, 155, 254, 125, 190, 109, 167, 138, 62, 45, 89, 8, 62, 198, 205, 170, 188, 228, 167, 122, 189, 25, 28, 46, 188, 79, 243, 13, 189, 100, 133, 14, 60, 155, 105, 217, 188, 3, 223, 99, 189, 37, 249, 106, 190, 158, 106, 13, 62, 81, 185, 193, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 65, 193, 61, 190, 235, 72, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {192, 122, 182, 191, 29, 118, 158, 190, 218, 168, 142, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 14, 170, 63, 58, 45, 11, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0003/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}