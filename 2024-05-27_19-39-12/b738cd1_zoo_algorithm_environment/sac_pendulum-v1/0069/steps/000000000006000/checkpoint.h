// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 22, 18, 191, 243, 124, 199, 190, 83, 114, 25, 191, 200, 236, 182, 190, 59, 177, 54, 62, 92, 86, 240, 62, 49, 171, 104, 62, 192, 5, 104, 63, 60, 118, 134, 190, 200, 28, 255, 190, 194, 191, 164, 62, 29, 167, 11, 191, 80, 121, 17, 189, 31, 62, 141, 62, 10, 115, 41, 188, 160, 114, 45, 191, 93, 4, 139, 191, 72, 113, 74, 188, 116, 136, 227, 62, 204, 161, 35, 63, 15, 149, 186, 62, 58, 1, 137, 190, 200, 192, 134, 62, 198, 120, 5, 191, 29, 121, 217, 189, 229, 236, 58, 62, 166, 136, 58, 63, 93, 207, 106, 63, 210, 159, 4, 62, 139, 252, 35, 190, 213, 72, 47, 63, 76, 108, 44, 63, 99, 8, 130, 62, 243, 41, 15, 191, 235, 242, 158, 63, 66, 252, 159, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 74, 6, 203, 190, 238, 91, 51, 191, 5, 220, 188, 62, 15, 22, 5, 63, 158, 183, 69, 190, 197, 54, 186, 190, 214, 95, 152, 190, 46, 17, 134, 191, 163, 134, 70, 190, 58, 69, 189, 62, 227, 50, 18, 191, 102, 80, 89, 190, 38, 166, 181, 190, 161, 143, 19, 191, 154, 197, 77, 63, 92, 108, 139, 61, 97, 123, 96, 191, 130, 49, 187, 62, 53, 85, 64, 62, 144, 33, 12, 63, 196, 153, 230, 62, 62, 207, 18, 63, 53, 38, 132, 191, 68, 211, 63, 190, 9, 201, 146, 190, 160, 18, 128, 63, 163, 19, 35, 63, 20, 227, 238, 190, 106, 48, 205, 190, 186, 175, 244, 189, 84, 78, 184, 62, 221, 21, 74, 191, 66, 173, 175, 190, 237, 113, 64, 63, 9, 120, 5, 190, 158, 147, 10, 191, 88, 155, 159, 62, 134, 172, 71, 191, 50, 36, 175, 62, 101, 188, 209, 190, 161, 37, 107, 191, 92, 216, 62, 190, 116, 173, 146, 61, 21, 212, 4, 63, 255, 112, 102, 190, 114, 196, 75, 190, 244, 70, 190, 62, 136, 9, 100, 62, 64, 106, 24, 63, 231, 81, 159, 191, 163, 32, 248, 190, 30, 144, 156, 190, 138, 13, 130, 191, 8, 105, 36, 191, 95, 142, 33, 63, 106, 84, 78, 63, 194, 61, 163, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 255, 38, 191, 55, 227, 139, 190, 173, 175, 233, 61, 61, 168, 192, 190, 110, 238, 27, 63, 224, 18, 232, 188, 126, 114, 191, 190, 245, 49, 21, 191, 29, 222, 242, 189, 146, 13, 142, 188, 245, 233, 223, 190, 90, 202, 26, 189, 178, 53, 252, 190, 49, 231, 190, 61, 65, 90, 17, 191, 121, 239, 2, 190, 206, 132, 198, 190, 36, 63, 125, 190, 35, 87, 83, 62, 222, 69, 19, 63, 33, 112, 158, 62, 86, 222, 135, 189, 242, 174, 73, 63, 169, 197, 51, 61, 65, 168, 13, 63, 59, 241, 22, 62, 17, 56, 135, 189, 122, 221, 95, 62, 139, 87, 4, 63, 55, 158, 82, 190, 79, 81, 230, 189, 226, 66, 205, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 233, 127, 189, 221, 194, 9, 190, 18, 228, 73, 187, 214, 146, 93, 61, 203, 36, 155, 62, 245, 39, 162, 190, 211, 22, 58, 190, 20, 174, 157, 61, 73, 47, 200, 189, 240, 195, 16, 62, 28, 232, 192, 190, 161, 52, 46, 60, 29, 182, 225, 61, 181, 244, 37, 62, 250, 6, 135, 190, 32, 169, 125, 190, 230, 123, 111, 190, 61, 72, 58, 62, 200, 8, 157, 59, 175, 130, 27, 62, 233, 111, 64, 189, 198, 49, 9, 61, 10, 112, 3, 62, 246, 111, 9, 62, 10, 40, 190, 62, 244, 24, 69, 61, 219, 13, 163, 190, 11, 28, 49, 62, 53, 203, 12, 62, 227, 150, 52, 190, 181, 36, 118, 190, 151, 152, 18, 61, 196, 48, 15, 191, 12, 29, 228, 61, 241, 91, 151, 190, 205, 149, 15, 62, 21, 86, 48, 61, 54, 58, 49, 59, 70, 137, 191, 190, 205, 89, 228, 190, 54, 250, 149, 190, 101, 4, 197, 62, 22, 62, 30, 191, 172, 130, 142, 189, 242, 196, 31, 62, 118, 252, 214, 61, 160, 251, 145, 189, 74, 61, 136, 190, 151, 182, 168, 190, 88, 98, 73, 62, 75, 244, 1, 190, 131, 48, 217, 61, 54, 58, 216, 61, 24, 138, 223, 189, 205, 157, 10, 62, 228, 184, 156, 189, 187, 56, 249, 61, 28, 127, 147, 62, 202, 199, 222, 189, 54, 82, 14, 189, 76, 107, 35, 62, 26, 185, 162, 188, 172, 126, 33, 191, 131, 125, 70, 190, 79, 156, 0, 188, 215, 94, 194, 190, 230, 45, 166, 62, 82, 63, 124, 60, 231, 169, 158, 61, 161, 36, 227, 190, 18, 250, 11, 62, 42, 116, 199, 62, 134, 174, 131, 62, 194, 70, 192, 62, 252, 217, 158, 62, 48, 118, 106, 190, 148, 58, 49, 190, 138, 141, 231, 189, 22, 197, 164, 62, 226, 109, 3, 191, 170, 28, 184, 61, 224, 69, 60, 60, 52, 224, 126, 62, 204, 33, 69, 62, 55, 120, 78, 190, 244, 244, 103, 190, 100, 233, 95, 190, 145, 239, 134, 62, 22, 223, 239, 60, 167, 178, 107, 189, 167, 180, 101, 189, 236, 173, 177, 61, 187, 191, 71, 188, 208, 70, 144, 62, 22, 121, 182, 61, 174, 190, 189, 62, 158, 128, 223, 188, 226, 50, 225, 189, 111, 104, 119, 189, 17, 236, 174, 60, 62, 119, 3, 190, 119, 76, 185, 61, 210, 17, 36, 62, 135, 122, 42, 190, 88, 67, 10, 190, 145, 91, 152, 189, 188, 73, 2, 62, 16, 149, 121, 190, 4, 165, 148, 61, 156, 34, 32, 62, 209, 160, 11, 61, 126, 0, 144, 60, 23, 133, 116, 189, 227, 30, 14, 62, 144, 202, 121, 62, 231, 120, 222, 61, 33, 179, 154, 60, 191, 140, 34, 190, 80, 27, 145, 189, 138, 99, 190, 190, 187, 80, 201, 190, 232, 116, 111, 62, 204, 150, 10, 60, 127, 65, 53, 190, 4, 181, 236, 61, 37, 93, 7, 189, 196, 188, 8, 62, 98, 148, 152, 61, 155, 233, 207, 190, 35, 85, 32, 62, 45, 197, 46, 61, 114, 184, 225, 62, 54, 204, 222, 188, 227, 236, 108, 190, 29, 206, 81, 190, 24, 151, 199, 61, 214, 205, 149, 190, 65, 217, 131, 62, 154, 34, 98, 191, 216, 203, 151, 61, 54, 218, 245, 61, 168, 57, 147, 61, 103, 239, 211, 61, 64, 102, 26, 191, 192, 13, 66, 62, 247, 7, 37, 62, 180, 247, 145, 189, 63, 42, 250, 61, 13, 72, 4, 62, 115, 147, 151, 61, 15, 74, 93, 62, 94, 243, 98, 189, 61, 23, 176, 61, 25, 162, 32, 62, 143, 231, 154, 190, 26, 56, 64, 61, 198, 32, 164, 61, 96, 220, 148, 62, 77, 11, 238, 190, 44, 223, 93, 190, 88, 33, 203, 60, 21, 94, 245, 189, 8, 52, 189, 60, 248, 55, 228, 60, 193, 73, 118, 187, 137, 67, 65, 60, 23, 249, 77, 61, 156, 205, 162, 61, 210, 119, 192, 61, 229, 157, 5, 191, 42, 99, 200, 61, 202, 15, 208, 61, 34, 41, 4, 62, 31, 240, 207, 189, 46, 207, 44, 62, 236, 113, 86, 190, 224, 189, 23, 190, 23, 245, 203, 61, 123, 252, 6, 189, 197, 38, 95, 190, 205, 41, 61, 190, 64, 5, 24, 190, 233, 169, 22, 190, 101, 99, 131, 189, 132, 87, 48, 62, 93, 125, 75, 190, 3, 251, 215, 61, 22, 240, 62, 62, 15, 164, 66, 187, 96, 188, 55, 190, 28, 179, 71, 61, 15, 57, 200, 59, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 114, 101, 94, 190, 11, 68, 102, 61, 105, 145, 167, 190, 237, 126, 1, 190, 127, 53, 145, 189, 187, 22, 6, 190, 162, 122, 4, 190, 91, 82, 108, 189, 208, 248, 99, 190, 198, 97, 40, 190, 149, 98, 235, 190, 176, 22, 102, 62, 134, 195, 202, 189, 145, 190, 28, 61, 222, 253, 71, 190, 30, 65, 144, 189, 49, 160, 161, 189, 52, 118, 166, 61, 14, 233, 112, 189, 250, 194, 159, 61, 102, 231, 16, 62, 169, 13, 222, 61, 64, 251, 76, 62, 32, 174, 95, 62, 64, 48, 165, 62, 144, 242, 148, 61, 61, 86, 8, 61, 134, 136, 61, 61, 157, 47, 93, 60, 7, 52, 212, 60, 170, 28, 157, 61, 46, 78, 26, 190, 14, 110, 162, 188, 249, 255, 10, 62, 41, 13, 147, 189, 197, 245, 129, 61, 191, 160, 34, 190, 180, 128, 160, 189, 211, 245, 32, 190, 43, 159, 51, 190, 187, 173, 239, 61, 151, 1, 11, 190, 128, 232, 26, 61, 163, 7, 107, 61, 147, 26, 46, 61, 110, 75, 33, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 188, 185, 16, 61, 31, 154, 253, 189, 22, 247, 229, 188, 228, 50, 171, 189, 89, 118, 15, 189, 172, 60, 235, 61, 162, 231, 32, 62, 232, 86, 203, 189, 24, 59, 212, 60, 91, 251, 91, 61, 140, 87, 116, 60, 159, 84, 4, 189, 110, 137, 52, 190, 125, 69, 21, 189, 246, 40, 209, 189, 103, 243, 152, 61, 22, 65, 221, 189, 197, 240, 201, 62, 250, 24, 238, 61, 25, 34, 128, 62, 158, 184, 78, 190, 90, 224, 248, 190, 24, 181, 98, 62, 24, 50, 193, 189, 26, 139, 229, 190, 130, 110, 194, 189, 246, 10, 72, 190, 9, 1, 207, 188, 119, 72, 172, 190, 195, 233, 42, 190, 117, 168, 194, 190, 126, 1, 242, 189, 184, 26, 30, 190, 221, 70, 61, 190, 166, 112, 227, 189, 182, 110, 127, 190, 240, 18, 139, 190, 143, 101, 160, 62, 250, 51, 145, 61, 54, 97, 141, 60, 138, 240, 89, 188, 125, 233, 86, 189, 118, 94, 144, 62, 159, 9, 136, 62, 75, 232, 227, 189, 158, 185, 26, 188, 44, 38, 193, 190, 185, 18, 102, 62, 151, 56, 8, 190, 27, 240, 128, 62, 34, 54, 5, 190, 189, 244, 18, 60, 151, 217, 23, 62, 79, 254, 134, 61, 14, 7, 29, 62, 85, 229, 18, 61, 196, 241, 156, 62, 30, 193, 83, 62, 251, 97, 176, 187, 11, 41, 167, 189, 114, 237, 92, 189, 209, 46, 137, 189, 82, 172, 44, 62, 227, 73, 245, 189, 64, 162, 3, 61, 57, 36, 237, 61, 113, 148, 18, 189, 177, 216, 208, 60, 129, 39, 71, 189, 92, 156, 49, 190, 39, 210, 84, 190, 103, 229, 191, 61, 169, 163, 248, 61, 61, 201, 67, 62, 166, 29, 42, 187, 237, 21, 91, 188, 93, 194, 128, 190, 120, 165, 71, 62, 139, 4, 179, 62, 184, 249, 24, 190, 81, 151, 165, 189, 150, 251, 217, 188, 123, 218, 61, 60, 227, 175, 73, 188, 246, 57, 8, 190, 52, 55, 103, 190, 169, 130, 87, 189, 19, 119, 222, 190, 246, 229, 90, 61, 67, 148, 252, 189, 51, 234, 100, 190, 200, 200, 138, 61, 15, 153, 100, 190, 74, 94, 152, 190, 46, 82, 186, 190, 111, 141, 55, 190, 61, 97, 124, 190, 212, 17, 229, 189, 134, 111, 191, 60, 97, 91, 166, 62, 0, 251, 139, 190, 208, 200, 148, 62, 90, 132, 148, 60, 47, 210, 82, 62, 120, 65, 196, 61, 64, 2, 12, 189, 226, 110, 136, 61, 63, 238, 14, 62, 199, 18, 75, 60, 134, 107, 53, 190, 90, 59, 44, 62, 156, 56, 242, 190, 1, 65, 196, 188, 76, 248, 85, 62, 221, 15, 148, 189, 235, 80, 174, 189, 127, 142, 20, 190, 221, 131, 140, 62, 234, 147, 132, 189, 233, 165, 65, 62, 152, 103, 246, 61, 81, 215, 202, 62, 178, 184, 236, 61, 129, 86, 117, 61, 72, 149, 249, 61, 163, 79, 132, 190, 214, 12, 94, 190, 231, 173, 218, 60, 163, 113, 63, 62, 63, 162, 211, 62, 10, 33, 42, 62, 151, 174, 155, 61, 144, 244, 69, 62, 187, 93, 120, 190, 207, 19, 152, 190, 224, 53, 9, 190, 147, 91, 57, 62, 241, 184, 184, 61, 210, 73, 98, 62, 19, 164, 128, 61, 197, 192, 106, 190, 92, 127, 130, 190, 151, 79, 131, 62, 225, 168, 227, 189, 237, 111, 51, 191, 50, 47, 213, 62, 199, 163, 118, 190, 127, 228, 132, 61, 190, 12, 184, 61, 36, 41, 126, 62, 196, 244, 78, 62, 65, 8, 49, 62, 247, 207, 191, 62, 149, 239, 232, 62, 162, 101, 48, 190, 29, 65, 32, 190, 220, 164, 186, 61, 161, 29, 86, 190, 89, 138, 48, 62, 207, 126, 78, 190, 227, 60, 223, 190, 169, 59, 217, 61, 228, 135, 105, 61, 58, 94, 98, 190, 162, 60, 239, 189, 110, 117, 255, 61, 101, 113, 117, 190, 35, 26, 99, 188, 64, 200, 13, 191, 249, 84, 24, 62, 227, 3, 2, 190, 82, 249, 247, 61, 183, 74, 230, 190, 99, 237, 170, 62, 40, 189, 129, 62, 124, 61, 129, 189, 211, 75, 155, 191, 46, 128, 196, 62, 228, 222, 14, 190, 59, 237, 196, 61, 89, 50, 204, 62, 41, 94, 106, 61, 42, 30, 128, 62, 97, 52, 85, 58, 63, 83, 86, 62, 251, 229, 189, 62, 123, 65, 3, 191, 110, 198, 106, 61, 192, 39, 197, 61, 183, 44, 57, 190, 163, 180, 163, 189, 220, 134, 161, 190, 171, 139, 159, 190, 184, 235, 33, 61, 185, 97, 111, 189, 199, 12, 175, 189, 202, 28, 13, 191, 0, 200, 24, 62, 77, 212, 26, 190, 207, 130, 23, 189, 8, 152, 98, 191, 90, 81, 83, 62, 110, 144, 206, 189, 179, 9, 175, 189, 31, 252, 244, 190, 166, 6, 47, 62, 139, 60, 4, 189, 207, 47, 13, 62, 53, 196, 86, 191, 130, 139, 205, 62, 123, 125, 164, 190, 124, 112, 178, 61, 50, 162, 160, 61, 239, 164, 220, 60, 36, 45, 228, 62, 193, 78, 20, 190, 146, 92, 72, 62, 56, 47, 9, 60, 24, 212, 29, 191, 140, 36, 87, 60, 210, 220, 215, 62, 167, 191, 42, 190, 193, 197, 251, 186, 27, 193, 61, 190, 149, 147, 56, 62, 22, 10, 246, 62, 157, 221, 151, 190, 95, 114, 27, 190, 215, 31, 62, 191, 75, 188, 151, 62, 238, 190, 211, 190, 187, 27, 219, 189, 148, 4, 114, 190, 117, 124, 131, 62, 193, 177, 20, 60, 22, 225, 114, 189, 1, 235, 0, 191, 178, 226, 152, 62, 108, 148, 42, 62, 20, 48, 229, 60, 243, 174, 43, 61, 42, 51, 241, 189, 89, 194, 234, 189, 18, 70, 43, 190, 173, 253, 116, 190, 95, 229, 51, 62, 114, 158, 18, 61, 185, 26, 164, 60, 160, 83, 153, 190, 42, 226, 239, 189, 234, 87, 1, 62, 3, 60, 253, 61, 2, 19, 210, 60, 104, 192, 252, 59, 211, 236, 139, 62, 87, 229, 43, 190, 237, 202, 249, 61, 241, 168, 229, 61, 77, 111, 133, 189, 37, 46, 145, 189, 219, 185, 90, 62, 37, 252, 133, 62, 220, 4, 147, 189, 36, 254, 58, 62, 142, 180, 40, 190, 2, 160, 61, 189, 229, 85, 144, 190, 130, 167, 239, 189, 55, 153, 201, 186, 182, 219, 82, 190, 50, 134, 211, 59, 115, 207, 78, 189, 31, 150, 168, 189, 78, 204, 104, 189, 152, 113, 213, 189, 174, 69, 246, 189, 177, 73, 217, 189, 59, 8, 9, 62, 179, 18, 140, 61, 102, 190, 206, 61, 112, 88, 11, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 240, 44, 201, 189, 93, 228, 13, 62, 221, 182, 246, 60, 25, 115, 32, 190, 88, 168, 7, 190, 43, 113, 221, 189, 42, 227, 35, 61, 183, 6, 104, 59, 104, 159, 22, 189, 55, 192, 132, 188, 128, 54, 246, 189, 81, 192, 24, 189, 63, 222, 222, 61, 135, 183, 140, 61, 125, 69, 215, 61, 216, 26, 201, 61, 115, 166, 59, 188, 87, 182, 32, 190, 101, 234, 101, 190, 235, 97, 71, 62, 243, 195, 149, 190, 30, 161, 109, 188, 14, 113, 96, 190, 96, 191, 56, 61, 248, 178, 58, 189, 185, 240, 171, 190, 114, 197, 14, 190, 145, 158, 252, 189, 152, 254, 161, 190, 65, 238, 156, 60, 233, 62, 249, 189, 136, 13, 92, 61, 118, 101, 78, 189, 218, 198, 27, 62, 214, 238, 27, 62, 161, 219, 29, 62, 228, 132, 141, 190, 57, 106, 184, 61, 126, 172, 18, 62, 78, 92, 82, 62, 172, 148, 23, 189, 4, 53, 241, 60, 85, 139, 184, 62, 94, 86, 162, 61, 142, 166, 143, 61, 2, 204, 34, 190, 174, 102, 53, 60, 136, 89, 216, 61, 33, 176, 32, 190, 206, 152, 94, 189, 184, 107, 65, 61, 104, 111, 40, 190, 8, 37, 87, 186, 161, 136, 184, 189, 246, 140, 220, 61, 234, 106, 145, 188, 28, 82, 119, 62, 190, 230, 156, 62, 243, 142, 224, 61, 137, 26, 10, 191, 73, 214, 183, 62, 250, 143, 115, 190, 119, 100, 129, 61, 240, 138, 125, 191, 186, 147, 155, 60, 183, 85, 32, 190, 24, 66, 202, 61, 123, 216, 198, 190, 254, 64, 231, 60, 91, 28, 170, 189, 137, 96, 24, 189, 124, 161, 201, 189, 4, 99, 23, 62, 62, 94, 34, 190, 195, 160, 241, 189, 232, 254, 127, 60, 87, 235, 74, 190, 168, 85, 147, 188, 80, 162, 120, 62, 202, 36, 72, 60, 159, 131, 12, 62, 205, 42, 28, 62, 17, 231, 248, 61, 79, 24, 118, 61, 74, 141, 49, 190, 97, 172, 4, 190, 114, 122, 82, 62, 176, 228, 22, 188, 138, 2, 128, 190, 79, 45, 0, 62, 78, 251, 192, 61, 211, 145, 253, 188, 22, 81, 186, 190, 188, 171, 188, 189, 93, 190, 149, 60, 7, 237, 214, 189, 213, 132, 78, 190, 189, 10, 155, 61, 208, 129, 163, 190, 114, 104, 163, 189, 20, 248, 152, 187, 44, 163, 33, 62, 158, 240, 112, 62, 193, 246, 64, 189, 40, 113, 51, 62, 185, 129, 19, 61, 140, 11, 126, 62, 185, 93, 234, 61, 63, 250, 57, 189, 111, 141, 10, 190, 196, 228, 234, 188, 58, 161, 228, 59, 234, 125, 234, 189, 160, 116, 16, 62, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 21, 144, 191, 190, 223, 134, 233, 62, 6, 45, 124, 190, 31, 99, 153, 189, 221, 11, 115, 61, 135, 94, 51, 61, 209, 120, 168, 190, 15, 162, 28, 191, 57, 137, 154, 190, 78, 97, 22, 60, 188, 105, 224, 190, 96, 255, 178, 61, 43, 152, 45, 61, 34, 151, 151, 62, 233, 144, 149, 188, 147, 237, 138, 189, 148, 217, 136, 62, 27, 71, 16, 61, 192, 192, 207, 189, 153, 177, 13, 62, 17, 192, 173, 61, 44, 87, 112, 62, 233, 225, 134, 62, 101, 53, 25, 62, 184, 93, 70, 62, 141, 28, 13, 62, 41, 45, 86, 190, 229, 176, 168, 190, 206, 171, 169, 188, 131, 150, 229, 62, 90, 82, 234, 188, 66, 141, 121, 189, 62, 84, 146, 188, 198, 190, 64, 189, 65, 79, 37, 187, 219, 206, 233, 189, 1, 147, 79, 61, 213, 190, 244, 60, 62, 121, 169, 61, 218, 38, 182, 189, 13, 77, 1, 190, 216, 102, 15, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 108, 229, 90, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 248, 224, 36, 190, 242, 6, 248, 189, 59, 62, 72, 189, 43, 24, 240, 188, 192, 199, 90, 61, 36, 54, 248, 189, 6, 131, 12, 190, 61, 143, 142, 188, 196, 71, 60, 189, 37, 202, 132, 189, 157, 84, 128, 61, 29, 145, 4, 189, 4, 23, 114, 190, 151, 119, 88, 62, 246, 135, 110, 60, 184, 118, 50, 62, 224, 133, 145, 61, 181, 102, 152, 61, 57, 200, 188, 190, 128, 38, 160, 190, 43, 90, 197, 190, 7, 231, 103, 190, 14, 79, 70, 191, 126, 129, 164, 189, 76, 131, 57, 189, 81, 202, 228, 62, 16, 207, 68, 190, 231, 130, 206, 188, 187, 70, 85, 190, 47, 4, 116, 62, 110, 200, 156, 190, 32, 69, 240, 189, 116, 121, 110, 62, 244, 41, 52, 189, 182, 102, 112, 62, 62, 157, 95, 62, 184, 86, 10, 62, 228, 9, 87, 62, 232, 19, 62, 190, 69, 151, 29, 61, 91, 39, 224, 189, 174, 44, 132, 62, 102, 194, 134, 189, 238, 17, 143, 59, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 249, 111, 253, 190, 73, 198, 91, 62, 46, 45, 133, 190, 197, 203, 23, 63, 76, 209, 83, 62, 11, 221, 211, 190, 133, 103, 216, 190, 5, 58, 68, 190, 23, 251, 177, 190, 66, 151, 63, 62, 44, 97, 32, 191, 73, 94, 4, 62, 90, 251, 27, 189, 133, 167, 157, 62, 31, 135, 211, 190, 6, 24, 216, 190, 138, 215, 208, 190, 208, 56, 27, 62, 159, 26, 144, 190, 213, 205, 88, 62, 139, 160, 16, 62, 23, 140, 21, 61, 251, 36, 76, 61, 212, 72, 92, 189, 34, 0, 255, 61, 84, 205, 20, 62, 126, 49, 197, 190, 44, 244, 177, 189, 146, 222, 7, 62, 153, 160, 182, 188, 6, 233, 160, 190, 253, 232, 111, 190, 208, 202, 203, 189, 241, 210, 90, 187, 240, 5, 191, 61, 205, 70, 254, 59, 252, 112, 218, 189, 240, 110, 15, 62, 147, 13, 3, 190, 207, 56, 6, 61, 239, 17, 41, 190, 47, 236, 159, 61, 89, 10, 6, 190, 57, 241, 19, 62, 71, 62, 83, 189, 237, 187, 254, 61, 112, 164, 153, 189, 178, 31, 207, 189, 160, 26, 234, 61, 70, 205, 199, 188, 206, 217, 27, 190, 239, 223, 12, 189, 189, 10, 234, 189, 119, 93, 49, 190, 98, 77, 71, 61, 115, 78, 46, 62, 238, 107, 80, 189, 121, 47, 22, 190, 46, 65, 4, 189, 81, 23, 208, 60, 165, 63, 36, 189, 201, 65, 247, 189, 6, 99, 168, 189, 158, 91, 208, 60, 182, 184, 38, 191, 27, 129, 58, 62, 60, 251, 206, 190, 105, 67, 19, 190, 65, 234, 208, 60, 87, 247, 66, 189, 213, 188, 3, 61, 131, 45, 153, 190, 101, 104, 15, 190, 37, 60, 90, 190, 197, 230, 94, 189, 102, 109, 130, 62, 209, 71, 34, 61, 158, 35, 235, 61, 171, 42, 194, 189, 66, 149, 236, 190, 197, 23, 151, 189, 221, 229, 138, 61, 240, 53, 228, 190, 93, 211, 18, 62, 235, 210, 228, 190, 17, 222, 177, 189, 118, 255, 38, 62, 97, 240, 213, 188, 128, 229, 136, 189, 179, 219, 83, 190, 33, 203, 76, 189, 209, 218, 41, 190, 108, 218, 88, 62, 227, 217, 192, 189, 19, 77, 232, 190, 105, 1, 135, 190, 4, 151, 162, 189, 39, 158, 192, 62, 193, 47, 92, 190, 208, 218, 32, 190, 151, 96, 170, 61, 100, 145, 3, 189, 249, 177, 3, 189, 154, 164, 134, 190, 19, 69, 7, 62, 15, 173, 124, 60, 209, 23, 174, 190, 173, 91, 26, 61, 149, 152, 48, 62, 169, 179, 65, 61, 115, 76, 211, 61, 248, 102, 195, 61, 208, 26, 185, 189, 102, 15, 89, 62, 252, 21, 192, 190, 147, 34, 201, 188, 74, 131, 74, 189, 151, 122, 22, 62, 6, 188, 9, 62, 180, 189, 129, 61, 122, 223, 134, 62, 141, 214, 29, 189, 164, 174, 78, 190, 122, 183, 182, 59, 141, 246, 64, 190, 127, 122, 179, 62, 179, 195, 85, 189, 4, 180, 83, 190, 141, 178, 196, 61, 218, 82, 28, 191, 175, 148, 237, 189, 209, 41, 73, 62, 93, 11, 23, 62, 99, 79, 248, 61, 212, 37, 54, 59, 75, 70, 239, 188, 64, 140, 193, 189, 5, 255, 50, 191, 29, 117, 216, 189, 95, 115, 57, 190, 244, 149, 44, 62, 76, 77, 152, 190, 107, 78, 235, 188, 253, 237, 39, 61, 125, 46, 14, 61, 116, 119, 12, 191, 111, 219, 49, 190, 209, 253, 103, 190, 13, 193, 50, 190, 115, 45, 126, 190, 187, 124, 100, 62, 247, 218, 210, 61, 212, 84, 213, 61, 118, 96, 208, 190, 5, 39, 1, 62, 165, 159, 247, 61, 77, 12, 142, 189, 0, 172, 130, 189, 132, 96, 10, 61, 224, 81, 67, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 238, 171, 62, 14, 189, 130, 188, 32, 43, 38, 62, 84, 61, 11, 62, 133, 252, 36, 62, 21, 222, 137, 190, 170, 229, 45, 61, 76, 152, 69, 62, 214, 69, 7, 187, 150, 149, 23, 62, 249, 133, 52, 62, 147, 15, 52, 62, 112, 223, 109, 62, 120, 65, 136, 62, 86, 207, 80, 62, 83, 215, 206, 61, 2, 211, 57, 190, 93, 100, 28, 189, 33, 51, 85, 62, 85, 109, 192, 61, 47, 118, 159, 62, 166, 18, 149, 188, 19, 111, 23, 190, 92, 4, 253, 189, 219, 174, 20, 62, 140, 153, 12, 190, 145, 24, 247, 189, 113, 123, 133, 62, 164, 236, 54, 190, 68, 250, 180, 189, 57, 57, 189, 186, 155, 62, 193, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 163, 28, 62, 110, 51, 26, 63, 239, 109, 238, 190, 7, 112, 44, 190, 172, 10, 23, 63, 203, 154, 6, 60, 229, 66, 174, 61, 93, 224, 144, 62, 205, 94, 159, 61, 190, 96, 58, 63, 254, 98, 1, 190, 50, 218, 80, 62, 130, 176, 130, 190, 250, 44, 68, 191, 184, 114, 122, 191, 96, 203, 121, 191, 86, 98, 54, 62, 94, 28, 25, 190, 254, 204, 164, 62, 169, 189, 210, 62, 203, 193, 64, 61, 137, 219, 214, 61, 117, 198, 193, 62, 178, 202, 35, 190, 200, 83, 195, 62, 173, 31, 35, 62, 57, 39, 181, 189, 189, 140, 45, 63, 127, 235, 207, 189, 20, 192, 244, 62, 74, 199, 145, 62, 203, 251, 49, 60, 29, 219, 212, 190, 52, 143, 19, 190, 244, 228, 207, 60, 149, 154, 245, 61, 233, 75, 93, 60, 245, 67, 205, 189, 164, 44, 143, 61, 9, 26, 169, 189, 110, 60, 89, 60, 103, 75, 150, 62, 93, 96, 243, 189, 201, 70, 219, 190, 74, 107, 7, 189, 89, 168, 137, 61, 210, 51, 54, 61, 28, 142, 34, 188, 88, 189, 248, 61, 153, 37, 10, 190, 223, 71, 64, 190, 167, 36, 236, 61, 86, 216, 194, 190, 214, 30, 247, 187, 149, 185, 114, 62, 60, 228, 200, 189, 23, 36, 203, 187, 80, 151, 149, 188, 7, 47, 165, 188, 165, 245, 240, 189, 106, 216, 50, 190, 101, 253, 140, 62, 27, 184, 237, 61, 77, 34, 161, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 151, 178, 189, 34, 169, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 126, 251, 190, 4, 70, 243, 191, 88, 172, 104, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 202, 64, 62, 214, 14, 185, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}