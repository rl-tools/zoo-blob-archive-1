// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 78, 22, 191, 60, 33, 147, 62, 7, 201, 34, 191, 76, 8, 187, 190, 31, 209, 219, 190, 29, 188, 236, 62, 120, 122, 249, 61, 252, 254, 97, 63, 204, 218, 124, 190, 208, 44, 115, 190, 93, 40, 165, 62, 173, 232, 3, 191, 222, 36, 116, 188, 175, 158, 2, 63, 255, 11, 160, 60, 49, 191, 42, 191, 133, 67, 100, 191, 94, 221, 62, 189, 231, 60, 189, 62, 204, 124, 178, 62, 121, 47, 193, 62, 176, 56, 231, 190, 78, 171, 240, 62, 133, 10, 2, 191, 20, 7, 84, 189, 239, 18, 252, 188, 17, 20, 60, 63, 54, 214, 102, 63, 51, 182, 7, 61, 19, 129, 7, 190, 56, 159, 25, 63, 127, 206, 61, 63, 105, 207, 73, 62, 81, 20, 2, 191, 75, 159, 143, 62, 54, 253, 222, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 16, 212, 152, 190, 187, 208, 99, 191, 40, 192, 178, 62, 128, 37, 83, 62, 123, 140, 62, 190, 74, 208, 193, 190, 170, 63, 87, 190, 138, 117, 110, 191, 2, 23, 165, 57, 195, 202, 94, 61, 53, 186, 154, 190, 34, 216, 132, 190, 84, 119, 242, 190, 137, 203, 113, 191, 237, 111, 65, 63, 111, 6, 77, 62, 251, 138, 63, 191, 107, 99, 180, 62, 190, 222, 254, 61, 126, 175, 60, 62, 214, 93, 233, 62, 146, 236, 233, 62, 43, 114, 121, 191, 175, 77, 103, 190, 50, 165, 202, 190, 166, 152, 11, 62, 70, 235, 41, 63, 98, 234, 183, 190, 39, 155, 111, 190, 64, 172, 75, 190, 49, 152, 198, 62, 1, 177, 136, 190, 137, 41, 204, 190, 174, 25, 64, 63, 135, 159, 200, 61, 201, 137, 14, 191, 249, 16, 23, 62, 122, 176, 86, 191, 209, 223, 214, 62, 236, 28, 219, 190, 100, 146, 68, 191, 165, 71, 97, 189, 162, 81, 23, 62, 23, 207, 7, 63, 78, 162, 98, 190, 31, 16, 41, 190, 214, 94, 12, 63, 118, 103, 109, 62, 247, 126, 23, 63, 248, 222, 69, 191, 147, 25, 13, 191, 68, 210, 222, 190, 118, 224, 127, 190, 239, 79, 55, 191, 26, 154, 24, 63, 173, 150, 27, 63, 204, 8, 173, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 121, 20, 191, 88, 247, 65, 190, 48, 95, 73, 62, 246, 127, 12, 191, 214, 151, 54, 63, 227, 77, 103, 60, 68, 109, 213, 190, 92, 143, 214, 190, 89, 33, 70, 190, 167, 23, 31, 61, 227, 200, 217, 190, 16, 210, 58, 61, 178, 53, 252, 190, 109, 86, 232, 61, 63, 82, 9, 191, 0, 85, 100, 189, 138, 5, 236, 190, 35, 154, 25, 190, 20, 196, 68, 62, 115, 44, 35, 63, 32, 56, 215, 62, 113, 39, 106, 61, 217, 37, 81, 63, 22, 82, 73, 189, 131, 114, 183, 62, 206, 198, 69, 62, 242, 10, 137, 61, 51, 167, 25, 62, 19, 234, 7, 63, 138, 247, 142, 190, 99, 161, 221, 189, 63, 49, 199, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 145, 253, 189, 5, 20, 55, 190, 105, 245, 91, 61, 58, 224, 157, 188, 160, 117, 138, 62, 204, 133, 189, 190, 66, 7, 7, 190, 53, 61, 235, 186, 181, 72, 206, 189, 217, 172, 166, 61, 130, 188, 143, 190, 25, 249, 79, 188, 29, 182, 225, 61, 38, 246, 45, 62, 208, 29, 31, 190, 177, 67, 92, 190, 193, 224, 216, 189, 88, 42, 36, 62, 91, 14, 77, 60, 116, 35, 14, 62, 83, 153, 139, 189, 134, 202, 231, 60, 130, 38, 226, 61, 31, 128, 134, 61, 238, 206, 82, 62, 246, 97, 83, 61, 249, 90, 165, 190, 175, 25, 42, 62, 241, 157, 243, 61, 139, 53, 24, 190, 198, 80, 47, 190, 31, 127, 29, 61, 100, 97, 234, 190, 5, 164, 26, 62, 222, 194, 125, 190, 78, 51, 220, 189, 11, 188, 54, 61, 210, 86, 203, 60, 42, 2, 100, 190, 250, 29, 250, 190, 127, 133, 134, 190, 147, 5, 173, 62, 152, 219, 207, 190, 55, 174, 110, 60, 242, 196, 31, 62, 167, 116, 5, 62, 122, 91, 9, 190, 35, 87, 151, 189, 12, 96, 183, 189, 246, 244, 93, 62, 101, 167, 15, 190, 212, 50, 242, 61, 220, 134, 16, 62, 189, 243, 94, 189, 7, 245, 3, 62, 192, 131, 24, 189, 238, 3, 140, 61, 174, 36, 135, 62, 102, 115, 194, 188, 148, 147, 176, 189, 79, 21, 61, 62, 80, 248, 27, 61, 192, 224, 169, 190, 22, 159, 30, 190, 72, 164, 117, 189, 22, 196, 191, 190, 249, 115, 90, 62, 210, 72, 2, 189, 218, 224, 37, 62, 73, 175, 199, 190, 213, 18, 22, 62, 220, 49, 179, 62, 125, 26, 128, 62, 86, 248, 132, 62, 183, 223, 166, 62, 196, 69, 12, 189, 148, 58, 49, 190, 224, 245, 139, 190, 137, 205, 118, 62, 129, 72, 17, 191, 191, 70, 197, 60, 153, 75, 114, 189, 71, 77, 10, 61, 15, 170, 51, 62, 234, 37, 121, 190, 203, 86, 59, 190, 204, 127, 239, 189, 151, 126, 90, 62, 29, 83, 119, 187, 111, 204, 139, 190, 51, 236, 89, 189, 127, 103, 178, 187, 79, 202, 143, 61, 214, 46, 132, 62, 87, 5, 39, 61, 198, 150, 161, 62, 69, 188, 41, 62, 253, 49, 243, 189, 120, 226, 33, 61, 99, 222, 143, 189, 77, 173, 45, 190, 171, 178, 177, 61, 97, 190, 211, 187, 160, 32, 177, 189, 113, 112, 46, 190, 219, 223, 226, 189, 136, 42, 27, 190, 255, 73, 73, 190, 4, 165, 148, 61, 238, 145, 96, 61, 60, 135, 164, 61, 29, 81, 146, 188, 102, 220, 176, 60, 124, 231, 138, 61, 39, 185, 253, 61, 38, 73, 119, 61, 99, 39, 42, 190, 247, 190, 29, 190, 197, 58, 67, 190, 111, 153, 38, 190, 16, 139, 5, 190, 79, 244, 222, 61, 85, 1, 135, 189, 207, 125, 189, 189, 132, 3, 159, 61, 214, 37, 56, 61, 27, 173, 62, 189, 136, 219, 179, 187, 5, 30, 13, 191, 138, 199, 18, 62, 146, 170, 92, 189, 111, 102, 206, 188, 124, 116, 58, 189, 0, 171, 163, 189, 53, 249, 192, 189, 226, 63, 234, 190, 140, 58, 152, 190, 159, 250, 125, 62, 74, 115, 35, 191, 134, 118, 143, 61, 54, 218, 245, 61, 47, 155, 223, 61, 62, 139, 216, 61, 77, 216, 139, 190, 19, 170, 241, 61, 111, 84, 20, 62, 111, 224, 183, 189, 100, 109, 20, 62, 30, 0, 14, 62, 223, 176, 197, 61, 86, 128, 83, 62, 182, 82, 23, 189, 79, 236, 45, 60, 208, 240, 9, 62, 220, 180, 132, 189, 190, 118, 199, 189, 86, 172, 163, 61, 169, 255, 137, 62, 0, 111, 158, 190, 107, 128, 244, 189, 194, 0, 173, 188, 21, 94, 245, 189, 12, 252, 95, 61, 179, 45, 109, 56, 212, 26, 43, 61, 204, 117, 70, 61, 148, 244, 77, 61, 186, 69, 73, 61, 210, 119, 192, 61, 81, 115, 165, 190, 237, 170, 220, 61, 186, 114, 225, 61, 34, 41, 4, 62, 158, 245, 207, 189, 5, 158, 23, 62, 39, 188, 74, 190, 254, 48, 50, 190, 23, 245, 203, 61, 123, 252, 6, 189, 193, 8, 81, 190, 246, 202, 26, 190, 65, 133, 20, 190, 196, 122, 28, 190, 49, 38, 145, 189, 240, 241, 81, 62, 93, 125, 75, 190, 184, 248, 196, 61, 29, 169, 86, 62, 201, 249, 235, 60, 18, 29, 74, 190, 197, 223, 158, 60, 88, 9, 125, 61, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 160, 158, 52, 190, 222, 4, 240, 60, 24, 58, 62, 190, 195, 170, 181, 189, 194, 128, 154, 189, 150, 215, 42, 190, 77, 28, 167, 189, 106, 68, 209, 188, 129, 27, 111, 190, 144, 198, 195, 189, 157, 63, 174, 190, 201, 165, 65, 62, 134, 195, 202, 189, 248, 204, 138, 61, 26, 156, 2, 190, 40, 179, 114, 189, 77, 149, 3, 189, 87, 51, 162, 61, 37, 198, 73, 189, 119, 36, 198, 61, 153, 140, 241, 61, 237, 116, 204, 61, 155, 85, 52, 62, 181, 182, 101, 62, 131, 160, 151, 62, 106, 69, 191, 61, 123, 124, 88, 61, 86, 151, 29, 62, 146, 60, 107, 60, 165, 30, 1, 61, 55, 244, 1, 62, 174, 108, 189, 189, 14, 110, 162, 188, 249, 255, 10, 62, 41, 13, 147, 189, 197, 245, 129, 61, 191, 160, 34, 190, 180, 128, 160, 189, 211, 245, 32, 190, 43, 159, 51, 190, 187, 173, 239, 61, 151, 1, 11, 190, 128, 232, 26, 61, 163, 7, 107, 61, 147, 26, 46, 61, 110, 75, 33, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 188, 185, 16, 61, 31, 154, 253, 189, 22, 247, 229, 188, 228, 50, 171, 189, 89, 118, 15, 189, 172, 60, 235, 61, 162, 231, 32, 62, 232, 86, 203, 189, 24, 59, 212, 60, 91, 251, 91, 61, 140, 87, 116, 60, 159, 84, 4, 189, 110, 137, 52, 190, 125, 69, 21, 189, 246, 40, 209, 189, 180, 233, 16, 61, 143, 213, 214, 60, 175, 150, 185, 62, 163, 224, 52, 61, 66, 102, 130, 62, 215, 90, 102, 190, 20, 72, 199, 190, 0, 250, 18, 62, 77, 227, 151, 61, 86, 33, 217, 190, 168, 138, 7, 186, 163, 236, 249, 189, 9, 1, 207, 188, 90, 87, 163, 190, 229, 147, 164, 190, 75, 37, 175, 190, 139, 140, 133, 190, 200, 24, 232, 189, 90, 42, 131, 190, 28, 193, 86, 61, 38, 72, 197, 190, 195, 87, 175, 189, 116, 145, 118, 62, 208, 184, 128, 60, 26, 47, 19, 188, 8, 244, 64, 58, 139, 158, 105, 189, 203, 70, 128, 62, 49, 197, 149, 62, 252, 156, 99, 190, 101, 107, 80, 189, 168, 218, 173, 189, 227, 146, 63, 62, 57, 112, 227, 189, 140, 39, 80, 62, 205, 21, 45, 190, 250, 197, 181, 60, 113, 208, 32, 62, 57, 28, 237, 61, 201, 207, 243, 61, 66, 58, 165, 61, 166, 34, 46, 62, 246, 102, 129, 62, 11, 158, 224, 61, 11, 41, 167, 189, 84, 78, 224, 189, 100, 51, 143, 189, 30, 153, 64, 62, 149, 191, 225, 189, 176, 140, 143, 60, 165, 86, 136, 61, 61, 119, 45, 189, 8, 210, 178, 59, 54, 196, 119, 60, 91, 250, 15, 190, 50, 64, 87, 190, 216, 243, 125, 61, 215, 14, 98, 61, 112, 252, 53, 62, 38, 152, 134, 189, 158, 146, 161, 60, 97, 102, 89, 190, 9, 83, 53, 62, 249, 163, 159, 62, 12, 134, 17, 190, 36, 209, 36, 60, 108, 124, 7, 62, 179, 102, 83, 61, 222, 231, 127, 60, 41, 97, 20, 189, 92, 170, 22, 190, 68, 95, 211, 188, 56, 126, 144, 190, 253, 37, 232, 189, 233, 211, 65, 190, 112, 167, 44, 189, 200, 200, 138, 61, 233, 192, 13, 189, 142, 130, 114, 190, 233, 162, 84, 190, 166, 245, 45, 190, 131, 230, 225, 189, 101, 126, 198, 189, 200, 241, 231, 60, 195, 142, 104, 62, 218, 92, 197, 188, 102, 155, 167, 62, 127, 41, 51, 188, 167, 227, 5, 62, 20, 39, 62, 61, 81, 63, 166, 61, 231, 212, 34, 62, 208, 208, 92, 62, 234, 155, 14, 187, 209, 110, 11, 190, 66, 254, 164, 61, 229, 182, 137, 190, 53, 50, 25, 60, 15, 70, 185, 189, 212, 8, 96, 190, 44, 87, 28, 190, 248, 83, 11, 189, 168, 195, 151, 62, 160, 0, 10, 190, 229, 78, 102, 62, 160, 66, 8, 61, 145, 27, 212, 62, 45, 195, 22, 62, 129, 86, 117, 61, 232, 248, 224, 61, 118, 77, 31, 190, 89, 56, 36, 190, 107, 124, 70, 189, 17, 139, 75, 62, 121, 2, 195, 62, 196, 117, 21, 62, 104, 115, 28, 188, 209, 191, 94, 62, 173, 83, 143, 190, 180, 238, 142, 190, 77, 34, 243, 189, 142, 184, 20, 62, 147, 166, 67, 62, 170, 99, 90, 189, 86, 226, 29, 61, 126, 160, 28, 190, 67, 173, 242, 190, 186, 220, 101, 62, 230, 241, 1, 190, 106, 50, 90, 191, 255, 81, 210, 62, 151, 95, 119, 190, 226, 99, 194, 61, 143, 177, 64, 189, 116, 241, 136, 62, 183, 245, 97, 62, 100, 46, 34, 62, 122, 210, 240, 62, 102, 87, 240, 62, 119, 31, 16, 190, 29, 65, 32, 190, 81, 162, 153, 187, 23, 255, 165, 189, 87, 82, 48, 189, 91, 222, 210, 189, 42, 151, 14, 191, 218, 210, 106, 62, 253, 42, 176, 61, 90, 84, 172, 189, 147, 186, 37, 190, 23, 104, 4, 62, 168, 247, 44, 190, 245, 181, 38, 61, 164, 62, 232, 190, 178, 89, 174, 187, 164, 87, 29, 190, 16, 125, 27, 62, 64, 61, 174, 190, 146, 79, 153, 62, 74, 223, 125, 62, 171, 109, 153, 189, 131, 176, 154, 191, 30, 194, 208, 62, 214, 29, 28, 190, 203, 195, 31, 62, 203, 90, 143, 62, 220, 116, 155, 189, 99, 24, 121, 62, 62, 64, 205, 189, 135, 63, 38, 62, 248, 88, 131, 62, 231, 48, 2, 190, 110, 198, 106, 61, 26, 196, 218, 189, 184, 148, 13, 190, 191, 36, 96, 190, 164, 18, 102, 190, 79, 91, 33, 191, 110, 203, 92, 188, 250, 198, 78, 188, 64, 170, 79, 60, 47, 43, 137, 190, 250, 148, 59, 62, 117, 165, 188, 189, 255, 141, 36, 189, 130, 154, 118, 191, 109, 77, 200, 61, 231, 43, 181, 189, 87, 85, 41, 61, 120, 67, 189, 190, 48, 52, 18, 62, 254, 238, 174, 189, 231, 9, 15, 62, 27, 211, 124, 191, 183, 189, 230, 62, 117, 16, 161, 190, 99, 19, 50, 62, 106, 199, 218, 189, 134, 134, 156, 189, 55, 121, 233, 62, 133, 105, 8, 190, 187, 235, 77, 62, 156, 182, 192, 189, 218, 73, 58, 190, 140, 36, 87, 60, 26, 25, 28, 187, 71, 106, 20, 190, 214, 144, 71, 190, 16, 132, 15, 190, 22, 45, 168, 190, 88, 186, 177, 62, 216, 170, 120, 190, 208, 16, 133, 189, 66, 169, 220, 190, 124, 188, 157, 62, 219, 162, 179, 190, 88, 216, 146, 189, 106, 18, 179, 190, 0, 83, 195, 61, 230, 207, 91, 61, 133, 193, 65, 61, 28, 142, 208, 190, 108, 120, 148, 62, 92, 252, 40, 62, 238, 188, 197, 60, 76, 78, 224, 60, 73, 182, 209, 61, 26, 247, 242, 189, 19, 24, 55, 190, 83, 8, 201, 190, 144, 187, 49, 62, 171, 124, 2, 61, 170, 145, 88, 60, 216, 47, 18, 188, 22, 216, 23, 190, 226, 91, 126, 61, 3, 60, 253, 61, 138, 225, 114, 61, 16, 124, 156, 59, 254, 237, 51, 61, 163, 126, 44, 190, 190, 182, 6, 62, 255, 225, 65, 62, 221, 85, 64, 189, 226, 9, 186, 61, 147, 202, 65, 62, 180, 118, 238, 189, 25, 181, 174, 189, 210, 3, 197, 61, 87, 62, 171, 189, 189, 209, 214, 190, 44, 12, 98, 189, 58, 202, 12, 190, 204, 227, 100, 189, 31, 28, 12, 190, 41, 177, 13, 61, 115, 207, 78, 189, 31, 150, 168, 189, 78, 204, 104, 189, 152, 113, 213, 189, 174, 69, 246, 189, 177, 73, 217, 189, 59, 8, 9, 62, 179, 18, 140, 61, 102, 190, 206, 61, 112, 88, 11, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 240, 44, 201, 189, 93, 228, 13, 62, 221, 182, 246, 60, 25, 115, 32, 190, 88, 168, 7, 190, 43, 113, 221, 189, 42, 227, 35, 61, 183, 6, 104, 59, 104, 159, 22, 189, 55, 192, 132, 188, 128, 54, 246, 189, 81, 192, 24, 189, 63, 222, 222, 61, 135, 183, 140, 61, 125, 69, 215, 61, 216, 26, 201, 61, 115, 166, 59, 188, 87, 182, 32, 190, 25, 28, 40, 190, 77, 37, 38, 62, 88, 109, 177, 189, 168, 44, 225, 61, 77, 80, 115, 190, 114, 249, 244, 188, 127, 226, 66, 188, 180, 42, 94, 190, 46, 255, 27, 190, 200, 245, 133, 189, 38, 205, 130, 190, 176, 204, 112, 189, 233, 62, 249, 189, 44, 88, 182, 61, 56, 255, 229, 60, 162, 163, 218, 61, 119, 165, 47, 62, 223, 229, 37, 62, 241, 110, 111, 190, 150, 13, 162, 61, 152, 159, 18, 62, 109, 62, 40, 62, 244, 47, 55, 189, 32, 120, 6, 187, 224, 161, 149, 62, 17, 29, 5, 62, 14, 78, 3, 61, 7, 183, 165, 188, 76, 239, 74, 188, 32, 70, 171, 61, 75, 180, 207, 189, 63, 148, 114, 189, 114, 156, 171, 61, 234, 242, 246, 188, 116, 102, 44, 61, 115, 92, 120, 189, 229, 252, 247, 61, 90, 96, 136, 188, 40, 252, 213, 61, 177, 192, 167, 62, 38, 50, 0, 62, 79, 17, 1, 191, 113, 145, 59, 62, 25, 203, 41, 190, 119, 100, 129, 61, 53, 153, 98, 191, 1, 175, 240, 60, 47, 14, 48, 190, 163, 74, 209, 61, 230, 144, 181, 190, 140, 179, 191, 189, 64, 88, 112, 189, 212, 67, 122, 189, 204, 142, 153, 59, 247, 54, 19, 62, 242, 173, 233, 189, 140, 159, 120, 189, 155, 53, 21, 190, 174, 242, 74, 190, 200, 116, 11, 61, 199, 95, 111, 62, 2, 157, 194, 60, 250, 155, 42, 62, 228, 11, 64, 62, 239, 224, 232, 61, 45, 56, 19, 60, 19, 27, 199, 189, 208, 26, 248, 189, 5, 77, 76, 62, 28, 28, 87, 189, 84, 89, 71, 190, 48, 152, 2, 62, 170, 11, 188, 61, 163, 145, 173, 189, 219, 69, 133, 190, 3, 93, 179, 189, 93, 190, 149, 60, 31, 191, 205, 189, 57, 208, 217, 189, 65, 136, 174, 61, 77, 149, 131, 190, 78, 148, 221, 189, 159, 210, 63, 187, 228, 33, 12, 62, 168, 224, 97, 62, 140, 242, 54, 189, 86, 210, 69, 62, 63, 39, 245, 60, 1, 112, 42, 62, 57, 93, 217, 61, 184, 44, 79, 189, 22, 96, 220, 189, 98, 99, 9, 189, 187, 236, 43, 61, 71, 209, 152, 189, 109, 205, 232, 61, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 202, 211, 143, 190, 4, 13, 225, 62, 175, 168, 190, 189, 20, 44, 163, 61, 90, 149, 56, 60, 198, 35, 38, 61, 218, 38, 162, 190, 97, 29, 238, 190, 120, 201, 161, 190, 139, 125, 16, 61, 158, 69, 215, 190, 154, 149, 15, 189, 43, 152, 45, 61, 147, 198, 193, 62, 114, 125, 158, 61, 223, 216, 163, 189, 110, 176, 149, 62, 58, 224, 150, 61, 6, 202, 17, 189, 56, 39, 243, 61, 221, 218, 44, 61, 158, 215, 46, 62, 38, 232, 119, 62, 0, 63, 190, 61, 100, 26, 8, 62, 64, 151, 94, 62, 125, 37, 79, 190, 97, 249, 69, 190, 133, 196, 115, 189, 230, 203, 201, 62, 120, 20, 206, 60, 74, 98, 137, 189, 62, 84, 146, 188, 198, 190, 64, 189, 65, 79, 37, 187, 219, 206, 233, 189, 1, 147, 79, 61, 213, 190, 244, 60, 62, 121, 169, 61, 218, 38, 182, 189, 13, 77, 1, 190, 216, 102, 15, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 108, 229, 90, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 248, 224, 36, 190, 242, 6, 248, 189, 59, 62, 72, 189, 43, 24, 240, 188, 192, 199, 90, 61, 36, 54, 248, 189, 6, 131, 12, 190, 61, 143, 142, 188, 196, 71, 60, 189, 37, 202, 132, 189, 157, 84, 128, 61, 29, 145, 4, 189, 150, 60, 62, 190, 47, 143, 128, 62, 201, 231, 183, 61, 13, 237, 114, 62, 190, 80, 244, 61, 47, 149, 16, 61, 141, 134, 114, 190, 133, 70, 132, 190, 176, 202, 172, 190, 6, 103, 24, 190, 191, 111, 15, 191, 106, 128, 8, 58, 76, 131, 57, 189, 214, 239, 249, 62, 97, 150, 255, 189, 37, 101, 187, 188, 94, 221, 51, 190, 187, 242, 139, 62, 68, 10, 156, 190, 133, 104, 34, 189, 85, 47, 70, 62, 187, 143, 7, 61, 250, 203, 88, 62, 124, 194, 106, 62, 120, 88, 7, 62, 218, 243, 100, 62, 12, 195, 44, 190, 188, 188, 215, 61, 23, 190, 48, 189, 49, 132, 131, 62, 73, 162, 97, 188, 243, 244, 254, 61, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 116, 66, 58, 191, 105, 88, 37, 62, 219, 31, 89, 190, 255, 229, 83, 61, 96, 17, 63, 62, 33, 50, 148, 190, 71, 243, 177, 190, 93, 237, 78, 191, 48, 20, 195, 190, 148, 62, 84, 62, 170, 49, 205, 190, 31, 6, 103, 61, 90, 251, 27, 189, 230, 244, 167, 62, 232, 2, 1, 190, 247, 90, 29, 190, 119, 93, 119, 190, 23, 100, 225, 61, 50, 56, 158, 190, 24, 135, 74, 62, 101, 48, 60, 62, 21, 11, 4, 60, 159, 182, 115, 61, 66, 185, 200, 60, 101, 208, 214, 61, 203, 200, 234, 61, 58, 193, 87, 190, 162, 196, 216, 189, 34, 99, 203, 61, 32, 216, 67, 61, 171, 130, 101, 189, 147, 114, 45, 190, 11, 177, 203, 189, 241, 210, 90, 187, 79, 213, 197, 61, 42, 121, 31, 60, 208, 113, 214, 189, 240, 110, 15, 62, 147, 13, 3, 190, 185, 205, 11, 61, 239, 17, 41, 190, 233, 25, 162, 61, 89, 10, 6, 190, 3, 54, 21, 62, 71, 62, 83, 189, 237, 187, 254, 61, 112, 164, 153, 189, 178, 31, 207, 189, 160, 26, 234, 61, 70, 205, 199, 188, 206, 217, 27, 190, 11, 60, 10, 189, 189, 10, 234, 189, 119, 93, 49, 190, 248, 85, 76, 61, 115, 78, 46, 62, 76, 28, 67, 189, 121, 47, 22, 190, 46, 65, 4, 189, 221, 168, 228, 60, 56, 53, 32, 189, 201, 65, 247, 189, 60, 48, 168, 189, 79, 97, 220, 60, 24, 188, 175, 190, 85, 87, 47, 62, 242, 222, 40, 190, 92, 121, 88, 190, 159, 147, 180, 188, 71, 95, 115, 61, 87, 100, 120, 60, 53, 218, 137, 190, 199, 184, 3, 190, 37, 60, 90, 190, 232, 9, 133, 189, 254, 35, 65, 62, 209, 71, 34, 61, 50, 11, 50, 62, 171, 42, 194, 189, 220, 8, 68, 190, 197, 23, 151, 189, 115, 124, 177, 61, 53, 4, 182, 190, 54, 90, 245, 61, 178, 122, 156, 190, 223, 50, 3, 190, 207, 104, 60, 62, 97, 240, 213, 188, 156, 93, 155, 189, 94, 19, 5, 190, 237, 116, 15, 61, 24, 17, 198, 189, 169, 226, 49, 62, 227, 217, 192, 189, 36, 117, 39, 190, 232, 205, 125, 190, 214, 106, 68, 189, 25, 101, 176, 62, 80, 152, 33, 190, 92, 81, 209, 189, 140, 188, 223, 61, 44, 197, 248, 187, 138, 10, 128, 188, 23, 131, 95, 190, 235, 244, 247, 61, 75, 162, 197, 61, 73, 219, 159, 190, 167, 100, 221, 188, 149, 152, 48, 62, 155, 1, 246, 61, 8, 117, 224, 61, 0, 235, 252, 61, 50, 139, 155, 189, 148, 27, 110, 62, 61, 94, 148, 190, 1, 69, 36, 58, 204, 242, 15, 189, 3, 88, 211, 61, 249, 170, 50, 62, 21, 85, 216, 60, 138, 71, 94, 62, 206, 152, 66, 61, 55, 203, 26, 190, 169, 166, 125, 61, 160, 175, 36, 190, 39, 236, 159, 62, 243, 243, 185, 188, 98, 67, 45, 190, 189, 225, 103, 61, 61, 113, 2, 191, 203, 96, 205, 189, 15, 88, 33, 62, 61, 123, 1, 62, 98, 139, 241, 61, 212, 37, 54, 59, 126, 99, 119, 189, 64, 140, 193, 189, 196, 236, 8, 191, 106, 10, 198, 189, 154, 83, 86, 190, 244, 149, 44, 62, 126, 255, 29, 190, 28, 80, 223, 187, 203, 133, 88, 61, 50, 228, 253, 60, 218, 49, 211, 190, 15, 79, 220, 61, 73, 244, 109, 190, 113, 237, 246, 189, 239, 192, 90, 190, 192, 96, 59, 62, 83, 59, 214, 61, 124, 28, 227, 61, 58, 255, 133, 190, 249, 252, 214, 61, 81, 153, 209, 61, 14, 248, 199, 189, 136, 8, 128, 189, 150, 168, 121, 59, 196, 139, 219, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 102, 155, 62, 106, 67, 230, 188, 37, 26, 52, 62, 177, 194, 92, 61, 51, 125, 33, 62, 147, 27, 98, 190, 170, 229, 45, 61, 76, 196, 61, 62, 214, 69, 7, 187, 7, 144, 15, 62, 59, 87, 32, 62, 134, 150, 43, 62, 170, 53, 30, 62, 24, 95, 153, 62, 183, 187, 118, 62, 46, 127, 19, 62, 150, 45, 5, 190, 93, 100, 28, 189, 45, 45, 77, 62, 217, 237, 186, 61, 115, 63, 147, 62, 166, 18, 149, 188, 178, 173, 39, 190, 92, 4, 253, 189, 180, 84, 41, 62, 140, 153, 12, 190, 145, 24, 247, 189, 186, 236, 131, 62, 7, 177, 52, 190, 17, 15, 213, 189, 181, 225, 106, 61, 146, 78, 165, 185};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 149, 34, 62, 95, 145, 216, 62, 110, 112, 206, 190, 69, 110, 32, 189, 114, 236, 198, 62, 101, 180, 136, 61, 229, 66, 174, 61, 10, 65, 124, 62, 205, 94, 159, 61, 110, 24, 38, 63, 2, 56, 220, 189, 219, 17, 52, 62, 232, 131, 128, 190, 12, 6, 71, 191, 187, 112, 90, 191, 59, 172, 81, 191, 109, 255, 62, 62, 94, 28, 25, 190, 66, 238, 130, 62, 41, 65, 196, 62, 205, 182, 120, 61, 137, 219, 214, 61, 200, 159, 165, 62, 178, 202, 35, 190, 11, 143, 172, 62, 173, 31, 35, 62, 57, 39, 181, 189, 213, 80, 10, 63, 174, 8, 208, 189, 222, 96, 128, 62, 103, 250, 113, 62, 8, 202, 152, 187, 214, 210, 178, 190, 93, 217, 173, 188, 28, 194, 185, 57, 242, 15, 16, 62, 76, 68, 42, 189, 167, 250, 23, 189, 164, 44, 143, 61, 19, 189, 211, 189, 110, 60, 89, 60, 165, 173, 159, 62, 119, 113, 202, 189, 124, 110, 129, 190, 128, 249, 27, 189, 215, 180, 202, 61, 107, 81, 233, 60, 229, 139, 238, 188, 146, 80, 5, 62, 153, 37, 10, 190, 121, 171, 5, 190, 174, 110, 0, 62, 220, 177, 167, 190, 214, 30, 247, 187, 130, 173, 109, 62, 60, 228, 200, 189, 169, 136, 57, 189, 80, 151, 149, 188, 7, 47, 165, 188, 79, 60, 163, 189, 22, 216, 50, 190, 244, 231, 86, 62, 115, 179, 232, 61, 229, 35, 114, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 231, 149, 189, 120, 102, 19, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 126, 135, 191, 50, 37, 36, 63, 47, 124, 141, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {95, 237, 180, 190, 218, 163, 232, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}