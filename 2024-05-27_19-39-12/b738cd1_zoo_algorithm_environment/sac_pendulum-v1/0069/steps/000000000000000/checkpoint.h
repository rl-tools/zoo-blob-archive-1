// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 215, 172, 190, 40, 249, 231, 62, 191, 57, 233, 190, 108, 99, 76, 190, 45, 157, 116, 190, 125, 51, 194, 60, 38, 20, 169, 189, 97, 13, 204, 62, 46, 140, 38, 190, 193, 18, 189, 189, 7, 66, 143, 62, 215, 227, 248, 190, 28, 219, 55, 61, 189, 121, 200, 62, 200, 153, 83, 62, 9, 205, 251, 190, 169, 151, 160, 190, 39, 107, 218, 190, 131, 159, 227, 62, 151, 179, 147, 189, 36, 47, 162, 62, 203, 84, 246, 190, 203, 132, 131, 62, 108, 203, 44, 190, 8, 220, 81, 190, 248, 103, 243, 60, 255, 210, 12, 63, 180, 165, 4, 63, 144, 158, 22, 190, 218, 77, 174, 61, 180, 169, 164, 62, 25, 234, 203, 61, 36, 225, 138, 62, 246, 145, 243, 190, 170, 212, 168, 190, 51, 236, 253, 62, 167, 204, 102, 61, 132, 215, 54, 62, 0, 255, 138, 189, 51, 168, 151, 190, 203, 199, 207, 190, 188, 222, 55, 62, 41, 156, 198, 62, 40, 240, 42, 62, 243, 1, 154, 190, 253, 217, 88, 190, 102, 147, 212, 190, 165, 72, 70, 190, 157, 83, 185, 61, 174, 217, 25, 62, 93, 210, 47, 190, 14, 146, 199, 190, 153, 43, 5, 191, 143, 138, 230, 62, 177, 28, 10, 63, 200, 239, 246, 190, 7, 9, 84, 60, 162, 112, 222, 59, 224, 99, 101, 190, 158, 242, 244, 62, 44, 236, 162, 62, 55, 34, 230, 190, 250, 42, 182, 190, 201, 96, 255, 190, 158, 236, 40, 61, 29, 218, 164, 62, 91, 84, 177, 190, 87, 135, 80, 190, 47, 233, 135, 189, 197, 184, 253, 62, 8, 80, 16, 190, 14, 77, 166, 190, 5, 225, 239, 62, 116, 58, 208, 62, 72, 182, 249, 190, 72, 75, 150, 62, 25, 155, 233, 190, 245, 97, 161, 188, 202, 30, 15, 191, 42, 11, 196, 190, 151, 53, 92, 190, 49, 180, 232, 62, 41, 218, 221, 62, 194, 80, 13, 190, 48, 113, 47, 190, 142, 144, 141, 62, 152, 226, 2, 63, 126, 28, 232, 62, 222, 5, 11, 191, 248, 204, 218, 190, 145, 216, 164, 190, 105, 119, 171, 190, 61, 165, 19, 191, 241, 140, 93, 62, 137, 175, 52, 62, 178, 171, 173, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 163, 19, 191, 142, 236, 115, 190, 186, 5, 112, 61, 71, 136, 196, 190, 80, 6, 14, 63, 139, 41, 163, 190, 150, 161, 158, 190, 102, 175, 224, 190, 61, 177, 23, 190, 235, 146, 126, 190, 154, 22, 117, 190, 178, 97, 251, 61, 207, 146, 242, 190, 39, 132, 42, 62, 13, 47, 3, 191, 63, 19, 78, 190, 86, 154, 0, 191, 248, 12, 57, 190, 2, 151, 246, 189, 185, 234, 217, 62, 115, 50, 4, 63, 239, 240, 163, 62, 127, 149, 8, 63, 218, 15, 168, 61, 89, 90, 204, 62, 178, 147, 3, 62, 3, 243, 153, 62, 61, 80, 209, 189, 59, 179, 189, 62, 163, 251, 186, 190, 122, 131, 26, 190, 115, 115, 225, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 30, 197, 189, 41, 172, 20, 190, 208, 176, 80, 61, 118, 220, 7, 60, 34, 164, 140, 61, 119, 121, 50, 190, 201, 13, 2, 190, 214, 116, 46, 62, 220, 20, 122, 189, 209, 180, 15, 190, 225, 63, 224, 189, 126, 79, 139, 189, 5, 19, 9, 62, 130, 194, 27, 62, 176, 96, 59, 189, 143, 237, 239, 61, 18, 156, 36, 61, 195, 186, 26, 62, 53, 140, 120, 60, 61, 142, 87, 61, 44, 27, 220, 189, 121, 242, 206, 187, 46, 183, 161, 189, 36, 68, 233, 61, 186, 221, 46, 62, 108, 224, 92, 189, 71, 86, 35, 190, 129, 230, 5, 62, 128, 47, 254, 60, 235, 157, 166, 59, 89, 72, 206, 189, 97, 200, 90, 189, 187, 147, 179, 189, 75, 75, 197, 189, 192, 11, 48, 62, 188, 155, 10, 190, 75, 117, 0, 62, 124, 212, 31, 62, 103, 196, 126, 189, 139, 174, 160, 61, 197, 99, 229, 189, 81, 89, 51, 62, 151, 147, 138, 188, 206, 147, 83, 189, 227, 196, 43, 62, 253, 140, 213, 60, 182, 246, 154, 61, 172, 72, 117, 188, 54, 58, 232, 61, 62, 128, 6, 62, 144, 243, 64, 188, 139, 43, 105, 61, 147, 164, 54, 61, 101, 195, 204, 189, 172, 220, 38, 61, 104, 159, 28, 190, 163, 252, 206, 60, 113, 87, 52, 61, 107, 180, 75, 59, 94, 164, 173, 189, 104, 206, 48, 62, 145, 166, 240, 188, 123, 10, 43, 190, 70, 1, 196, 189, 249, 222, 78, 189, 158, 158, 10, 61, 156, 209, 150, 189, 189, 71, 183, 61, 104, 174, 165, 61, 227, 119, 196, 189, 155, 49, 250, 189, 157, 191, 16, 190, 106, 197, 223, 61, 20, 181, 0, 61, 88, 121, 179, 189, 221, 125, 45, 61, 151, 62, 49, 190, 21, 253, 187, 189, 26, 128, 46, 62, 127, 5, 60, 189, 8, 82, 75, 189, 196, 46, 219, 61, 190, 53, 23, 190, 44, 80, 252, 61, 143, 163, 18, 190, 169, 195, 34, 190, 154, 72, 118, 188, 219, 24, 24, 62, 185, 209, 108, 189, 110, 253, 44, 190, 136, 97, 180, 61, 115, 60, 195, 188, 30, 31, 184, 60, 123, 35, 31, 62, 194, 97, 198, 189, 80, 254, 171, 61, 69, 188, 41, 62, 39, 5, 243, 189, 120, 226, 33, 61, 99, 222, 143, 189, 197, 93, 25, 190, 223, 107, 176, 61, 47, 225, 12, 60, 160, 32, 177, 189, 127, 111, 21, 190, 228, 141, 201, 189, 40, 91, 16, 190, 52, 140, 43, 190, 4, 165, 148, 61, 47, 80, 203, 61, 60, 135, 164, 61, 252, 224, 71, 188, 102, 220, 176, 60, 242, 205, 221, 61, 9, 162, 30, 62, 204, 177, 182, 61, 255, 112, 4, 190, 11, 178, 0, 190, 121, 240, 37, 190, 60, 190, 30, 190, 39, 70, 4, 190, 68, 175, 21, 62, 30, 47, 100, 189, 58, 200, 187, 189, 53, 212, 198, 61, 194, 200, 73, 61, 27, 173, 62, 189, 162, 13, 143, 60, 57, 143, 49, 190, 44, 124, 43, 61, 172, 122, 160, 61, 210, 196, 227, 187, 146, 170, 27, 190, 71, 8, 42, 62, 18, 75, 34, 62, 116, 89, 124, 61, 203, 117, 204, 189, 101, 237, 90, 61, 239, 219, 120, 189, 142, 60, 152, 189, 109, 212, 249, 61, 251, 132, 139, 188, 111, 118, 10, 62, 23, 230, 44, 189, 151, 40, 6, 62, 155, 19, 209, 60, 1, 174, 181, 61, 47, 28, 225, 60, 107, 135, 211, 61, 120, 126, 209, 188, 93, 106, 236, 61, 117, 174, 22, 190, 226, 148, 44, 189, 62, 41, 150, 60, 182, 249, 5, 62, 164, 107, 27, 190, 149, 108, 43, 189, 252, 134, 47, 62, 18, 28, 38, 190, 35, 97, 249, 189, 159, 104, 86, 189, 20, 134, 11, 190, 15, 143, 76, 189, 42, 26, 202, 188, 209, 170, 159, 61, 143, 227, 65, 61, 162, 154, 171, 61, 58, 9, 149, 61, 208, 170, 4, 62, 196, 145, 103, 189, 76, 57, 35, 62, 247, 210, 7, 62, 10, 100, 13, 62, 243, 89, 134, 189, 216, 210, 48, 62, 87, 81, 202, 189, 167, 217, 45, 189, 253, 243, 237, 61, 138, 63, 198, 61, 140, 191, 246, 189, 37, 69, 25, 190, 227, 132, 210, 189, 127, 64, 48, 190, 84, 174, 131, 189, 130, 40, 43, 62, 162, 200, 205, 189, 116, 43, 27, 62, 187, 60, 45, 62, 172, 93, 166, 61, 131, 99, 9, 190, 75, 236, 26, 188, 176, 110, 52, 62, 7, 38, 240, 189, 188, 138, 169, 189, 5, 169, 246, 189, 115, 240, 9, 190, 199, 140, 22, 62, 220, 32, 130, 59, 219, 217, 158, 189, 8, 152, 135, 189, 181, 189, 254, 189, 106, 77, 146, 60, 213, 244, 249, 187, 250, 70, 10, 62, 109, 205, 198, 61, 10, 2, 44, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 55, 246, 133, 188, 72, 250, 4, 190, 218, 224, 181, 189, 179, 125, 225, 61, 113, 80, 85, 59, 139, 55, 195, 189, 54, 25, 217, 189, 240, 132, 148, 189, 140, 145, 6, 190, 59, 96, 24, 189, 29, 10, 33, 190, 54, 183, 31, 60, 39, 79, 19, 62, 7, 174, 28, 190, 176, 243, 23, 62, 211, 27, 36, 190, 141, 43, 36, 190, 9, 19, 221, 189, 29, 239, 49, 190, 104, 209, 195, 189, 59, 127, 181, 189, 143, 243, 107, 61, 20, 3, 19, 62, 245, 148, 165, 189, 51, 174, 24, 190, 188, 128, 236, 60, 213, 194, 17, 62, 243, 83, 219, 189, 108, 210, 132, 60, 170, 67, 179, 189, 194, 112, 156, 187, 3, 144, 138, 60, 214, 93, 187, 60, 129, 31, 195, 61, 130, 90, 45, 61, 230, 57, 6, 189, 226, 8, 143, 61, 17, 164, 190, 60, 239, 200, 195, 61, 85, 177, 46, 62, 67, 109, 146, 189, 155, 163, 143, 61, 217, 99, 8, 61, 10, 60, 244, 188, 129, 183, 194, 189, 19, 15, 224, 61, 157, 81, 168, 189, 14, 110, 162, 188, 68, 134, 29, 62, 142, 135, 149, 189, 197, 245, 129, 61, 11, 123, 23, 190, 212, 109, 158, 189, 176, 252, 13, 190, 43, 159, 51, 190, 141, 174, 9, 62, 80, 154, 4, 190, 234, 174, 92, 61, 190, 94, 149, 61, 147, 26, 46, 61, 54, 75, 11, 190, 154, 211, 40, 190, 239, 51, 43, 190, 207, 96, 153, 61, 23, 125, 95, 61, 93, 146, 169, 189, 73, 248, 61, 188, 70, 102, 136, 189, 18, 185, 150, 188, 99, 199, 5, 62, 162, 231, 32, 62, 232, 86, 203, 189, 143, 183, 108, 61, 100, 26, 211, 61, 140, 87, 116, 60, 130, 134, 155, 188, 110, 137, 52, 190, 142, 251, 17, 189, 98, 237, 177, 189, 24, 61, 47, 190, 54, 0, 78, 189, 33, 235, 140, 61, 110, 68, 161, 188, 221, 109, 131, 61, 237, 19, 230, 189, 86, 152, 44, 190, 183, 102, 23, 190, 174, 66, 41, 62, 19, 4, 11, 190, 16, 240, 28, 62, 60, 38, 33, 190, 9, 1, 207, 188, 19, 120, 162, 189, 119, 34, 115, 189, 37, 114, 164, 61, 107, 61, 154, 60, 206, 5, 96, 60, 108, 79, 77, 187, 237, 158, 218, 60, 161, 46, 4, 190, 25, 53, 232, 189, 159, 174, 5, 61, 167, 245, 48, 62, 119, 3, 62, 60, 178, 76, 228, 61, 162, 17, 145, 61, 156, 47, 204, 61, 103, 127, 47, 62, 11, 2, 114, 61, 60, 234, 218, 189, 58, 152, 5, 190, 158, 91, 147, 61, 14, 167, 21, 62, 21, 41, 0, 62, 39, 51, 9, 190, 119, 239, 185, 189, 25, 171, 74, 61, 37, 169, 59, 61, 246, 234, 134, 188, 4, 227, 246, 60, 169, 52, 246, 189, 243, 66, 117, 61, 36, 143, 37, 62, 232, 84, 153, 189, 244, 156, 215, 188, 126, 163, 131, 189, 81, 200, 36, 62, 170, 232, 192, 189, 231, 115, 199, 61, 125, 238, 9, 190, 193, 77, 165, 189, 199, 155, 71, 60, 124, 232, 95, 61, 222, 107, 4, 190, 227, 14, 26, 190, 145, 155, 52, 61, 127, 166, 12, 61, 161, 142, 2, 62, 131, 176, 42, 189, 43, 215, 123, 59, 251, 144, 234, 189, 254, 185, 244, 61, 39, 227, 51, 62, 235, 251, 40, 190, 169, 214, 156, 61, 26, 147, 43, 62, 55, 117, 132, 60, 134, 82, 2, 190, 91, 157, 193, 59, 180, 172, 42, 189, 161, 228, 132, 61, 168, 53, 244, 189, 196, 19, 52, 190, 94, 241, 170, 61, 56, 13, 77, 189, 227, 164, 152, 61, 207, 110, 38, 61, 50, 106, 21, 190, 29, 129, 229, 189, 117, 96, 111, 189, 206, 92, 104, 189, 45, 58, 178, 61, 154, 225, 170, 188, 235, 37, 14, 62, 2, 70, 27, 188, 107, 105, 46, 62, 49, 151, 176, 189, 59, 151, 139, 60, 186, 167, 51, 60, 198, 203, 188, 61, 114, 64, 187, 61, 119, 252, 21, 62, 204, 117, 100, 189, 1, 244, 39, 190, 179, 11, 217, 60, 126, 7, 13, 189, 160, 38, 175, 61, 130, 188, 40, 190, 223, 75, 206, 189, 203, 116, 42, 190, 219, 159, 54, 189, 136, 197, 51, 62, 144, 93, 25, 190, 30, 78, 203, 61, 182, 80, 101, 60, 151, 69, 251, 61, 129, 79, 25, 62, 129, 86, 117, 61, 14, 212, 248, 61, 18, 2, 213, 189, 81, 158, 188, 189, 107, 124, 70, 189, 132, 141, 20, 62, 157, 192, 216, 61, 182, 144, 121, 61, 68, 246, 18, 62, 105, 73, 34, 62, 171, 4, 54, 189, 195, 120, 41, 190, 145, 17, 25, 190, 198, 33, 179, 60, 174, 185, 47, 62, 191, 114, 192, 189, 92, 170, 63, 188, 95, 36, 28, 189, 61, 58, 95, 189, 18, 30, 192, 61, 140, 34, 10, 190, 133, 140, 239, 61, 242, 206, 228, 61, 51, 107, 115, 59, 174, 232, 28, 190, 254, 166, 156, 189, 232, 89, 92, 189, 197, 147, 255, 189, 126, 220, 1, 190, 167, 82, 24, 62, 7, 215, 229, 61, 227, 90, 130, 188, 71, 98, 30, 190, 49, 28, 224, 61, 151, 135, 124, 188, 178, 106, 215, 61, 238, 190, 118, 61, 81, 63, 229, 189, 26, 81, 144, 189, 188, 247, 124, 61, 55, 123, 25, 189, 247, 98, 198, 189, 148, 219, 57, 61, 19, 117, 35, 60, 144, 180, 190, 61, 151, 224, 24, 190, 147, 63, 164, 188, 139, 207, 41, 189, 35, 251, 151, 61, 127, 123, 200, 189, 154, 23, 46, 62, 19, 113, 231, 188, 139, 69, 126, 189, 148, 202, 29, 188, 53, 252, 126, 61, 38, 107, 223, 61, 11, 120, 11, 189, 11, 42, 254, 61, 242, 38, 31, 190, 53, 50, 0, 190, 57, 66, 200, 189, 96, 40, 236, 189, 255, 155, 16, 62, 27, 7, 168, 61, 190, 222, 140, 61, 174, 119, 129, 189, 245, 114, 87, 189, 178, 92, 38, 190, 101, 28, 185, 188, 227, 195, 130, 189, 109, 223, 195, 189, 45, 48, 45, 62, 114, 47, 138, 188, 4, 207, 51, 61, 14, 40, 126, 189, 191, 116, 224, 61, 245, 111, 166, 187, 106, 175, 36, 190, 145, 118, 157, 189, 70, 224, 26, 60, 31, 27, 4, 62, 155, 9, 157, 189, 76, 35, 7, 189, 243, 229, 10, 190, 103, 135, 109, 61, 111, 145, 206, 189, 43, 221, 160, 61, 58, 162, 0, 189, 54, 64, 20, 61, 239, 124, 27, 190, 72, 77, 184, 189, 62, 7, 165, 60, 178, 36, 1, 190, 162, 135, 180, 189, 192, 52, 12, 190, 212, 254, 132, 61, 140, 36, 87, 60, 114, 163, 163, 61, 210, 44, 226, 61, 102, 42, 35, 189, 128, 82, 240, 61, 183, 15, 193, 61, 47, 12, 192, 61, 20, 149, 192, 189, 86, 79, 83, 189, 220, 155, 24, 190, 243, 128, 19, 62, 44, 25, 18, 190, 52, 122, 0, 190, 236, 189, 240, 189, 251, 225, 25, 187, 206, 51, 9, 62, 95, 217, 7, 62, 181, 218, 33, 190, 218, 204, 145, 61, 99, 148, 186, 61, 119, 248, 197, 60, 48, 5, 142, 189, 106, 66, 46, 62, 40, 31, 229, 189, 197, 27, 205, 189, 44, 16, 20, 61, 255, 255, 13, 62, 25, 250, 10, 61, 98, 18, 177, 188, 39, 238, 41, 62, 33, 62, 209, 189, 76, 52, 75, 61, 3, 60, 253, 61, 205, 70, 252, 187, 71, 207, 184, 59, 163, 110, 28, 61, 230, 96, 45, 190, 240, 109, 153, 61, 5, 236, 248, 61, 240, 112, 47, 189, 64, 216, 68, 189, 170, 14, 38, 62, 98, 215, 252, 188, 184, 122, 154, 189, 53, 132, 206, 61, 138, 121, 24, 190, 54, 131, 5, 190, 166, 221, 237, 188, 156, 248, 225, 189, 230, 63, 94, 189, 95, 132, 11, 190, 223, 22, 116, 61, 115, 207, 78, 189, 144, 71, 145, 189, 218, 243, 120, 189, 152, 113, 213, 189, 204, 212, 6, 190, 177, 73, 217, 189, 178, 122, 16, 62, 179, 18, 140, 61, 239, 231, 231, 61, 150, 26, 0, 189, 85, 52, 182, 61, 35, 130, 186, 61, 210, 237, 101, 61, 154, 29, 49, 190, 240, 44, 201, 189, 93, 228, 13, 62, 221, 182, 246, 60, 60, 190, 246, 189, 95, 129, 220, 189, 7, 171, 205, 189, 42, 227, 35, 61, 27, 184, 128, 60, 48, 105, 159, 188, 55, 192, 132, 188, 128, 54, 246, 189, 64, 85, 116, 58, 63, 222, 222, 61, 83, 115, 57, 61, 248, 133, 218, 61, 216, 26, 201, 61, 115, 166, 59, 188, 35, 197, 37, 190, 45, 132, 28, 190, 36, 49, 79, 59, 84, 196, 209, 61, 160, 30, 32, 60, 228, 63, 24, 190, 81, 155, 245, 60, 136, 160, 167, 61, 67, 164, 25, 189, 160, 21, 67, 189, 0, 171, 34, 189, 157, 84, 27, 61, 155, 65, 191, 189, 138, 104, 4, 190, 77, 186, 128, 61, 167, 171, 252, 187, 253, 245, 32, 62, 208, 30, 234, 61, 21, 149, 224, 61, 85, 119, 238, 188, 75, 252, 147, 61, 74, 191, 203, 187, 94, 169, 23, 62, 178, 250, 9, 190, 139, 15, 32, 190, 22, 226, 40, 62, 64, 41, 16, 61, 160, 135, 25, 61, 68, 234, 107, 189, 69, 193, 179, 59, 235, 31, 163, 189, 232, 226, 11, 190, 95, 208, 16, 60, 172, 238, 2, 188, 12, 52, 26, 61, 97, 13, 251, 189, 150, 198, 236, 189, 188, 131, 157, 60, 31, 166, 113, 60, 137, 127, 63, 61, 12, 157, 49, 62, 253, 172, 12, 62, 73, 114, 9, 190, 57, 60, 213, 61, 249, 229, 40, 190, 111, 174, 141, 61, 143, 49, 251, 189, 114, 19, 14, 62, 57, 143, 8, 190, 156, 42, 42, 62, 46, 61, 236, 189, 155, 59, 48, 190, 172, 18, 214, 189, 6, 74, 3, 60, 249, 16, 206, 188, 59, 150, 157, 61, 56, 27, 98, 189, 34, 11, 83, 189, 106, 133, 238, 189, 155, 81, 38, 190, 72, 198, 151, 188, 151, 102, 193, 61, 186, 122, 78, 61, 0, 23, 2, 62, 27, 26, 137, 61, 15, 60, 3, 61, 180, 44, 240, 60, 150, 0, 210, 189, 160, 180, 49, 190, 18, 71, 243, 61, 27, 81, 68, 189, 59, 39, 22, 190, 40, 254, 17, 62, 144, 254, 36, 62, 152, 86, 27, 190, 222, 122, 218, 189, 113, 104, 196, 189, 245, 94, 159, 60, 213, 5, 135, 189, 147, 53, 11, 189, 111, 254, 3, 62, 16, 239, 23, 190, 235, 201, 186, 189, 53, 226, 240, 61, 190, 253, 214, 61, 150, 181, 210, 61, 198, 244, 12, 189, 170, 224, 2, 61, 182, 85, 173, 188, 115, 76, 96, 61, 114, 74, 112, 61, 8, 178, 167, 189, 150, 52, 46, 190, 24, 90, 126, 189, 212, 101, 111, 60, 131, 131, 16, 190, 156, 146, 150, 61, 128, 173, 248, 189, 224, 66, 152, 189, 137, 15, 165, 189, 25, 201, 234, 189, 184, 4, 181, 61, 116, 150, 196, 189, 1, 181, 41, 189, 113, 159, 21, 62, 65, 240, 25, 188, 67, 153, 0, 62, 43, 92, 78, 188, 212, 218, 185, 61, 15, 133, 128, 187, 136, 217, 33, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 84, 202, 5, 190, 249, 51, 252, 59, 143, 93, 49, 189, 122, 190, 41, 190, 102, 174, 188, 188, 7, 126, 18, 61, 47, 170, 105, 61, 253, 164, 63, 189, 8, 96, 136, 189, 93, 18, 48, 190, 186, 43, 133, 61, 146, 228, 28, 61, 82, 36, 63, 189, 225, 141, 0, 190, 75, 6, 16, 61, 255, 62, 0, 190, 104, 80, 18, 62, 28, 90, 6, 62, 25, 249, 148, 60, 206, 85, 44, 62, 176, 174, 255, 61, 59, 130, 145, 189, 23, 239, 49, 190, 108, 211, 192, 189, 85, 192, 145, 61, 238, 117, 49, 61, 243, 119, 26, 190, 86, 193, 209, 60, 1, 167, 136, 61, 82, 48, 228, 188, 164, 24, 99, 189, 22, 92, 4, 62, 93, 244, 29, 190, 50, 225, 174, 61, 205, 147, 172, 61, 13, 152, 146, 189, 164, 207, 230, 61, 110, 3, 52, 62, 168, 203, 143, 189, 92, 136, 198, 61, 58, 215, 189, 61, 88, 168, 49, 190, 79, 45, 30, 190, 17, 215, 245, 188, 176, 204, 21, 62, 175, 234, 128, 61, 143, 4, 4, 62, 62, 84, 146, 188, 198, 190, 64, 189, 133, 228, 84, 60, 97, 16, 219, 189, 218, 225, 121, 61, 213, 190, 244, 60, 62, 121, 169, 61, 91, 164, 177, 189, 13, 77, 1, 190, 202, 142, 28, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 2, 80, 148, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 47, 114, 20, 190, 242, 6, 248, 189, 223, 152, 29, 189, 112, 230, 114, 188, 134, 126, 171, 61, 36, 54, 248, 189, 6, 131, 12, 190, 196, 243, 118, 187, 196, 71, 60, 189, 64, 114, 81, 189, 25, 35, 150, 61, 62, 249, 221, 188, 125, 34, 30, 190, 140, 228, 49, 189, 210, 213, 20, 62, 235, 101, 20, 62, 195, 15, 43, 61, 20, 101, 222, 61, 184, 34, 77, 61, 30, 224, 170, 189, 187, 3, 213, 189, 77, 184, 20, 190, 118, 176, 165, 188, 227, 76, 45, 190, 48, 115, 102, 189, 223, 104, 32, 62, 148, 144, 193, 189, 65, 62, 146, 60, 201, 22, 4, 190, 118, 181, 139, 58, 125, 74, 239, 189, 121, 228, 237, 189, 212, 74, 64, 61, 237, 99, 212, 189, 254, 220, 227, 60, 205, 87, 194, 61, 219, 21, 151, 59, 56, 4, 133, 61, 75, 81, 43, 190, 157, 156, 34, 189, 125, 64, 174, 189, 20, 255, 240, 61, 132, 195, 248, 188, 240, 60, 34, 62, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 7, 187, 49, 61, 250, 104, 212, 189, 28, 99, 9, 190, 187, 12, 134, 60, 148, 109, 49, 189, 71, 53, 141, 189, 39, 234, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 88, 45, 13, 189, 172, 155, 43, 190, 91, 211, 16, 62, 72, 243, 195, 61, 151, 104, 233, 61, 216, 99, 153, 189, 49, 100, 27, 190, 36, 81, 168, 61, 11, 150, 6, 189, 212, 79, 229, 59, 12, 34, 240, 189, 48, 228, 55, 61, 174, 63, 150, 61, 245, 115, 47, 190, 240, 245, 3, 189, 233, 89, 49, 62, 220, 52, 155, 61, 110, 139, 19, 190, 251, 255, 51, 190, 132, 13, 126, 189, 218, 105, 48, 190, 164, 43, 214, 189, 81, 155, 174, 189, 185, 42, 13, 61, 157, 205, 0, 62, 134, 8, 38, 62, 30, 250, 144, 189, 155, 18, 89, 189, 171, 66, 219, 189, 229, 47, 12, 190, 239, 226, 186, 60, 101, 26, 47, 62, 63, 22, 90, 189, 116, 38, 214, 188, 45, 99, 222, 61, 77, 119, 49, 188, 145, 252, 3, 61, 219, 100, 137, 189, 236, 49, 67, 189, 61, 17, 15, 190, 55, 22, 0, 62, 195, 79, 145, 61, 65, 158, 245, 188, 85, 17, 216, 189, 90, 245, 201, 189, 148, 153, 159, 61, 135, 80, 27, 190, 136, 250, 145, 189, 219, 114, 16, 190, 233, 87, 165, 61, 173, 49, 36, 189, 82, 106, 15, 62, 151, 110, 144, 189, 11, 177, 203, 189, 241, 210, 90, 187, 79, 213, 197, 61, 42, 121, 31, 60, 208, 113, 214, 189, 240, 110, 15, 62, 147, 13, 3, 190, 185, 205, 11, 61, 239, 17, 41, 190, 233, 25, 162, 61, 89, 10, 6, 190, 3, 54, 21, 62, 71, 62, 83, 189, 237, 187, 254, 61, 112, 164, 153, 189, 178, 31, 207, 189, 160, 26, 234, 61, 70, 205, 199, 188, 206, 217, 27, 190, 11, 60, 10, 189, 189, 10, 234, 189, 119, 93, 49, 190, 248, 85, 76, 61, 115, 78, 46, 62, 76, 28, 67, 189, 121, 47, 22, 190, 46, 65, 4, 189, 221, 168, 228, 60, 56, 53, 32, 189, 201, 65, 247, 189, 60, 48, 168, 189, 79, 97, 220, 60, 88, 175, 82, 61, 59, 19, 115, 61, 218, 185, 237, 60, 205, 186, 52, 190, 155, 97, 155, 188, 32, 127, 244, 61, 120, 237, 101, 61, 248, 16, 51, 62, 212, 9, 113, 189, 85, 216, 32, 190, 181, 86, 160, 60, 23, 113, 27, 62, 116, 180, 26, 61, 127, 223, 43, 62, 231, 26, 17, 189, 23, 86, 177, 188, 211, 255, 188, 188, 154, 232, 184, 61, 113, 121, 24, 60, 90, 211, 15, 62, 5, 55, 93, 189, 8, 138, 8, 190, 57, 250, 20, 62, 232, 150, 138, 59, 239, 156, 160, 60, 107, 136, 254, 59, 54, 113, 186, 61, 129, 16, 8, 190, 72, 211, 34, 62, 199, 11, 53, 189, 200, 168, 133, 189, 216, 2, 34, 190, 185, 217, 74, 61, 111, 63, 176, 61, 239, 116, 249, 186, 23, 89, 43, 190, 229, 164, 43, 62, 61, 82, 197, 61, 166, 111, 80, 61, 131, 199, 198, 60, 222, 232, 51, 62, 16, 37, 180, 187, 228, 155, 246, 189, 196, 204, 137, 189, 48, 134, 32, 62, 155, 235, 142, 60, 57, 160, 255, 61, 125, 123, 48, 62, 210, 4, 46, 189, 43, 116, 6, 62, 215, 11, 161, 189, 11, 227, 77, 189, 61, 216, 46, 190, 177, 138, 85, 61, 145, 156, 234, 61, 20, 74, 208, 189, 253, 181, 194, 61, 229, 171, 33, 190, 131, 42, 224, 189, 151, 171, 184, 189, 36, 238, 50, 190, 196, 211, 46, 62, 150, 198, 112, 60, 63, 60, 17, 190, 100, 16, 157, 188, 140, 183, 26, 190, 148, 161, 38, 190, 250, 14, 33, 62, 141, 75, 84, 189, 163, 223, 80, 61, 186, 59, 83, 61, 40, 75, 41, 190, 93, 201, 92, 189, 160, 243, 18, 190, 37, 190, 49, 60, 181, 104, 208, 189, 249, 231, 49, 62, 36, 118, 9, 188, 114, 158, 106, 61, 194, 233, 170, 188, 137, 177, 150, 61, 41, 42, 106, 189, 205, 110, 239, 61, 241, 90, 9, 190, 195, 243, 42, 190, 198, 83, 90, 189, 213, 52, 70, 61, 5, 29, 249, 61, 155, 79, 233, 61, 55, 221, 44, 190, 161, 241, 3, 61, 88, 194, 227, 61, 42, 217, 248, 189, 185, 104, 117, 189, 11, 160, 117, 189, 129, 70, 233, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 162, 107, 61, 70, 229, 88, 189, 70, 23, 20, 62, 169, 68, 176, 61, 93, 54, 52, 61, 147, 93, 52, 190, 227, 67, 182, 61, 3, 206, 11, 61, 130, 58, 144, 60, 149, 164, 252, 59, 152, 218, 26, 61, 140, 186, 151, 188, 135, 83, 51, 62, 83, 140, 0, 62, 224, 122, 67, 188, 166, 34, 21, 189, 186, 149, 134, 189, 183, 15, 84, 189, 243, 50, 24, 62, 44, 109, 118, 61, 122, 96, 1, 62, 234, 14, 70, 60, 129, 94, 45, 190, 151, 42, 223, 189, 97, 10, 4, 189, 140, 153, 12, 190, 105, 111, 175, 189, 178, 121, 230, 61, 7, 177, 52, 190, 99, 122, 97, 189, 188, 247, 222, 188, 119, 4, 211, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 208, 84, 60, 250, 228, 40, 62, 238, 35, 8, 190, 64, 73, 211, 188, 49, 135, 210, 188, 245, 59, 236, 61, 33, 53, 8, 62, 38, 164, 139, 61, 86, 186, 214, 61, 93, 227, 129, 61, 141, 208, 253, 188, 14, 208, 72, 61, 171, 44, 19, 190, 191, 13, 227, 189, 182, 236, 203, 189, 253, 218, 23, 190, 208, 127, 10, 62, 120, 108, 23, 190, 50, 147, 25, 62, 66, 29, 33, 62, 122, 152, 32, 62, 164, 241, 3, 62, 0, 229, 188, 61, 166, 144, 36, 190, 239, 211, 2, 62, 173, 31, 35, 62, 96, 115, 196, 189, 210, 166, 183, 60, 174, 8, 208, 189, 199, 156, 143, 61, 188, 44, 44, 62, 215, 97, 8, 189, 107, 145, 227, 189, 116, 157, 159, 189, 247, 78, 225, 60, 197, 131, 32, 62, 187, 35, 13, 190, 242, 152, 93, 189, 75, 241, 132, 61, 130, 76, 137, 189, 100, 116, 209, 60, 127, 20, 33, 62, 109, 214, 81, 189, 239, 7, 242, 189, 136, 201, 205, 60, 115, 184, 107, 61, 70, 54, 198, 189, 199, 151, 130, 61, 167, 78, 196, 61, 147, 45, 14, 190, 66, 235, 2, 190, 78, 184, 231, 61, 218, 97, 19, 190, 1, 230, 117, 60, 29, 138, 39, 62, 61, 196, 200, 189, 195, 10, 38, 189, 80, 151, 149, 188, 148, 23, 181, 188, 137, 223, 74, 61, 22, 216, 50, 190, 195, 130, 46, 62, 147, 240, 254, 61, 115, 148, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 61, 219, 189, 168, 185, 125, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {162, 74, 209, 63, 147, 31, 190, 190, 87, 157, 11, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 122, 76, 188, 48, 241, 21, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}