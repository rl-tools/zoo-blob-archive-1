// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 165, 2, 191, 29, 22, 64, 191, 125, 38, 243, 190, 119, 116, 124, 190, 9, 86, 67, 62, 13, 211, 227, 62, 233, 93, 44, 62, 177, 160, 114, 63, 251, 177, 117, 190, 133, 77, 248, 190, 171, 239, 125, 62, 254, 163, 1, 191, 189, 207, 9, 190, 126, 9, 107, 62, 247, 151, 113, 60, 106, 7, 45, 191, 123, 175, 140, 191, 88, 39, 83, 188, 3, 12, 234, 62, 228, 25, 72, 63, 223, 161, 174, 62, 154, 107, 178, 190, 205, 199, 33, 62, 193, 240, 13, 191, 38, 63, 183, 189, 170, 76, 39, 62, 51, 57, 60, 63, 246, 187, 66, 63, 74, 245, 242, 61, 1, 20, 176, 189, 15, 133, 68, 63, 159, 176, 20, 63, 168, 198, 113, 62, 199, 233, 135, 190, 76, 95, 198, 63, 144, 214, 151, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 75, 61, 197, 190, 224, 249, 46, 191, 192, 132, 175, 62, 106, 237, 26, 63, 123, 223, 147, 190, 112, 76, 174, 190, 78, 87, 199, 190, 67, 114, 176, 191, 154, 170, 136, 190, 82, 195, 54, 63, 52, 164, 214, 190, 67, 133, 113, 190, 125, 0, 230, 190, 121, 165, 66, 191, 51, 36, 60, 63, 197, 107, 18, 62, 242, 167, 91, 191, 228, 107, 168, 62, 248, 58, 135, 61, 198, 15, 245, 62, 113, 80, 204, 62, 187, 120, 245, 62, 223, 136, 157, 191, 237, 227, 93, 190, 209, 149, 15, 190, 124, 217, 168, 63, 190, 123, 9, 63, 10, 103, 1, 191, 66, 167, 194, 190, 239, 196, 138, 189, 84, 73, 58, 62, 83, 18, 135, 191, 18, 215, 143, 190, 127, 31, 54, 63, 150, 133, 203, 61, 191, 63, 20, 191, 13, 82, 95, 62, 54, 132, 125, 191, 94, 1, 146, 62, 37, 168, 216, 190, 122, 52, 140, 191, 6, 100, 70, 190, 77, 203, 16, 62, 128, 16, 21, 63, 22, 35, 89, 190, 104, 65, 137, 190, 138, 56, 29, 62, 40, 111, 138, 62, 7, 197, 38, 63, 225, 38, 140, 191, 80, 134, 214, 190, 211, 54, 205, 190, 74, 85, 170, 191, 1, 26, 2, 191, 109, 188, 24, 63, 195, 149, 128, 63, 19, 225, 149, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 102, 86, 191, 58, 16, 171, 190, 227, 240, 119, 61, 64, 113, 233, 190, 161, 101, 5, 63, 170, 149, 1, 190, 168, 123, 205, 190, 241, 176, 210, 190, 90, 205, 153, 189, 245, 192, 88, 189, 27, 159, 4, 191, 210, 3, 147, 190, 178, 53, 252, 190, 150, 52, 101, 61, 111, 71, 94, 191, 164, 133, 20, 190, 136, 219, 22, 191, 143, 132, 132, 190, 63, 21, 51, 62, 45, 139, 17, 63, 119, 205, 212, 62, 156, 212, 113, 190, 174, 74, 89, 63, 151, 157, 27, 62, 32, 72, 200, 62, 23, 68, 112, 62, 119, 188, 32, 190, 196, 138, 29, 62, 10, 179, 250, 62, 43, 143, 211, 190, 37, 11, 150, 189, 15, 161, 210, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 200, 174, 189, 222, 86, 17, 190, 101, 234, 118, 61, 178, 40, 155, 61, 76, 162, 178, 62, 2, 145, 65, 190, 49, 218, 0, 190, 215, 37, 210, 61, 191, 29, 208, 189, 148, 130, 113, 62, 63, 245, 252, 190, 187, 31, 202, 61, 29, 182, 225, 61, 49, 3, 69, 62, 201, 202, 144, 189, 49, 6, 176, 190, 197, 121, 18, 190, 135, 69, 55, 62, 83, 49, 83, 60, 29, 41, 42, 62, 139, 133, 164, 61, 96, 53, 69, 61, 169, 97, 78, 62, 236, 115, 52, 62, 93, 148, 201, 62, 147, 130, 15, 61, 48, 81, 159, 190, 22, 52, 94, 62, 131, 228, 72, 62, 244, 68, 118, 190, 187, 81, 29, 190, 76, 5, 107, 61, 118, 78, 14, 191, 32, 102, 141, 61, 18, 63, 152, 190, 78, 195, 210, 62, 106, 228, 28, 60, 44, 10, 187, 187, 40, 97, 233, 190, 174, 86, 1, 191, 47, 172, 150, 190, 165, 48, 187, 62, 72, 97, 76, 191, 208, 79, 243, 189, 242, 196, 31, 62, 168, 117, 223, 61, 68, 151, 71, 190, 30, 211, 12, 191, 118, 80, 150, 190, 57, 238, 83, 62, 54, 50, 119, 189, 47, 174, 211, 61, 191, 240, 105, 62, 161, 54, 89, 190, 196, 187, 194, 61, 120, 151, 162, 189, 138, 63, 207, 61, 104, 90, 185, 62, 152, 7, 184, 190, 89, 110, 140, 60, 218, 127, 231, 61, 230, 128, 177, 189, 153, 152, 128, 191, 194, 224, 72, 190, 36, 65, 249, 59, 99, 5, 190, 190, 206, 254, 112, 62, 44, 158, 239, 186, 93, 239, 60, 189, 175, 69, 230, 190, 255, 136, 36, 62, 171, 93, 183, 62, 228, 129, 131, 62, 253, 164, 177, 62, 238, 174, 219, 62, 122, 135, 220, 190, 148, 58, 49, 190, 63, 20, 206, 189, 192, 120, 149, 62, 115, 99, 197, 190, 48, 82, 140, 61, 88, 34, 253, 60, 221, 13, 151, 62, 199, 213, 37, 62, 241, 73, 99, 190, 16, 89, 133, 190, 235, 173, 173, 190, 250, 0, 140, 62, 194, 92, 129, 188, 189, 99, 184, 60, 39, 16, 116, 61, 124, 67, 185, 60, 247, 243, 167, 189, 48, 123, 153, 62, 90, 196, 188, 61, 163, 72, 176, 62, 27, 179, 238, 189, 120, 183, 235, 189, 24, 131, 205, 190, 220, 176, 153, 62, 193, 133, 86, 189, 91, 100, 39, 61, 183, 245, 79, 62, 191, 129, 154, 61, 155, 58, 21, 190, 230, 143, 47, 62, 176, 131, 15, 63, 131, 80, 218, 190, 4, 165, 148, 61, 50, 115, 31, 62, 209, 160, 11, 61, 229, 26, 51, 190, 234, 207, 24, 189, 33, 1, 4, 62, 131, 131, 114, 62, 242, 153, 7, 62, 148, 3, 88, 190, 168, 104, 48, 190, 147, 5, 214, 188, 47, 66, 16, 191, 72, 8, 141, 190, 160, 149, 123, 62, 116, 165, 188, 189, 29, 169, 196, 190, 90, 205, 23, 62, 116, 188, 159, 62, 190, 145, 231, 189, 175, 225, 82, 61, 155, 8, 217, 190, 204, 199, 229, 61, 180, 250, 90, 187, 38, 87, 203, 62, 227, 70, 126, 189, 6, 123, 61, 190, 242, 15, 146, 190, 172, 161, 106, 61, 160, 163, 151, 190, 13, 158, 140, 62, 5, 248, 138, 191, 183, 4, 132, 61, 54, 218, 245, 61, 151, 23, 169, 61, 65, 192, 82, 62, 47, 214, 154, 191, 99, 128, 139, 62, 229, 56, 45, 62, 75, 197, 97, 188, 35, 128, 195, 61, 21, 191, 130, 62, 250, 212, 11, 188, 134, 122, 99, 62, 28, 56, 146, 189, 108, 237, 138, 61, 209, 46, 88, 62, 64, 142, 67, 191, 28, 29, 0, 61, 136, 90, 67, 61, 241, 90, 157, 62, 113, 77, 5, 191, 235, 205, 143, 190, 29, 152, 5, 188, 21, 94, 245, 189, 248, 28, 181, 61, 107, 236, 63, 61, 101, 208, 9, 187, 105, 80, 20, 190, 23, 249, 77, 61, 181, 194, 209, 61, 210, 119, 192, 61, 120, 32, 203, 190, 42, 99, 200, 61, 31, 123, 155, 190, 34, 41, 4, 62, 31, 240, 207, 189, 170, 237, 87, 62, 237, 41, 210, 190, 145, 113, 122, 190, 23, 245, 203, 61, 123, 252, 6, 189, 228, 128, 142, 190, 68, 156, 160, 190, 159, 27, 24, 190, 35, 145, 81, 190, 245, 98, 177, 189, 2, 34, 93, 62, 93, 125, 75, 190, 102, 25, 191, 189, 213, 5, 116, 62, 155, 113, 31, 190, 234, 43, 130, 190, 5, 165, 87, 60, 62, 182, 50, 190, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 91, 107, 149, 190, 130, 242, 40, 61, 106, 3, 208, 190, 59, 239, 129, 190, 22, 209, 139, 189, 205, 250, 16, 189, 28, 165, 220, 189, 60, 132, 41, 190, 4, 105, 89, 190, 51, 117, 49, 190, 191, 62, 27, 191, 2, 132, 174, 62, 134, 195, 202, 189, 229, 111, 173, 61, 104, 33, 155, 189, 215, 29, 207, 189, 108, 63, 6, 60, 255, 48, 186, 61, 214, 219, 176, 188, 199, 221, 159, 61, 140, 120, 104, 62, 90, 64, 3, 62, 203, 192, 94, 62, 87, 145, 81, 62, 83, 226, 124, 62, 131, 189, 145, 61, 184, 156, 146, 60, 35, 80, 40, 189, 241, 18, 142, 61, 236, 230, 134, 189, 118, 248, 131, 61, 137, 106, 24, 190, 14, 110, 162, 188, 249, 255, 10, 62, 230, 85, 148, 189, 132, 153, 127, 61, 131, 72, 36, 190, 66, 212, 161, 189, 211, 245, 32, 190, 134, 165, 51, 190, 187, 173, 239, 61, 151, 1, 11, 190, 128, 232, 26, 61, 44, 83, 100, 61, 147, 26, 46, 61, 106, 103, 33, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 188, 185, 16, 61, 31, 154, 253, 189, 195, 206, 235, 188, 228, 50, 171, 189, 76, 104, 16, 189, 216, 152, 229, 61, 162, 231, 32, 62, 54, 169, 203, 189, 24, 59, 212, 60, 51, 57, 91, 61, 185, 92, 100, 60, 191, 55, 11, 189, 110, 137, 52, 190, 98, 91, 22, 189, 246, 40, 209, 189, 179, 195, 133, 61, 120, 226, 170, 60, 108, 211, 215, 62, 201, 159, 223, 61, 15, 31, 102, 62, 134, 238, 111, 190, 217, 131, 237, 190, 57, 84, 110, 62, 66, 184, 160, 189, 210, 206, 166, 190, 103, 97, 0, 190, 0, 32, 74, 190, 9, 1, 207, 188, 0, 73, 141, 190, 233, 25, 130, 189, 102, 190, 213, 190, 235, 90, 245, 60, 85, 50, 163, 190, 7, 30, 169, 189, 87, 225, 149, 190, 5, 74, 23, 190, 177, 198, 90, 60, 212, 251, 154, 62, 110, 163, 247, 61, 101, 151, 57, 61, 124, 236, 25, 60, 220, 19, 174, 189, 197, 147, 140, 62, 217, 135, 123, 62, 108, 242, 183, 189, 90, 129, 198, 60, 143, 120, 15, 191, 18, 138, 127, 62, 205, 156, 234, 189, 78, 30, 30, 62, 135, 30, 249, 189, 122, 116, 166, 59, 139, 63, 23, 62, 33, 227, 129, 61, 127, 114, 17, 62, 215, 78, 20, 61, 220, 143, 147, 62, 128, 61, 130, 62, 24, 10, 119, 189, 11, 41, 167, 189, 190, 250, 171, 189, 126, 197, 14, 190, 33, 73, 89, 62, 130, 14, 84, 190, 71, 106, 161, 60, 182, 84, 178, 61, 191, 107, 133, 188, 201, 83, 213, 60, 229, 13, 92, 189, 61, 85, 23, 190, 176, 212, 62, 190, 90, 224, 185, 61, 66, 209, 7, 62, 177, 172, 115, 62, 41, 58, 61, 189, 53, 30, 95, 188, 223, 129, 48, 190, 243, 50, 87, 62, 19, 228, 172, 62, 69, 1, 138, 190, 170, 233, 5, 189, 39, 58, 32, 190, 186, 43, 22, 190, 164, 171, 171, 60, 232, 211, 155, 61, 97, 54, 200, 190, 51, 169, 93, 190, 122, 60, 39, 191, 133, 187, 178, 61, 130, 128, 160, 189, 136, 182, 58, 190, 200, 200, 138, 61, 168, 137, 23, 61, 166, 249, 96, 190, 38, 102, 229, 190, 140, 199, 57, 190, 67, 77, 106, 190, 158, 64, 71, 190, 145, 214, 34, 61, 122, 241, 132, 62, 49, 249, 209, 189, 76, 133, 202, 62, 23, 173, 99, 189, 100, 131, 173, 61, 245, 178, 117, 189, 20, 193, 231, 188, 207, 195, 114, 189, 130, 53, 190, 62, 90, 68, 26, 190, 88, 13, 72, 190, 112, 53, 219, 61, 169, 230, 33, 191, 83, 150, 70, 188, 236, 178, 156, 62, 55, 68, 98, 62, 144, 37, 214, 60, 138, 148, 17, 190, 96, 68, 128, 62, 50, 106, 65, 62, 40, 204, 60, 62, 145, 207, 23, 62, 156, 249, 244, 62, 59, 73, 177, 59, 129, 86, 117, 61, 221, 8, 19, 62, 243, 238, 185, 190, 207, 59, 128, 190, 179, 188, 58, 190, 231, 157, 60, 62, 37, 2, 208, 62, 200, 182, 55, 62, 103, 58, 156, 59, 92, 92, 50, 62, 103, 16, 155, 189, 163, 210, 187, 190, 117, 18, 154, 189, 218, 39, 62, 62, 252, 18, 217, 61, 200, 68, 163, 62, 217, 52, 2, 62, 140, 143, 72, 190, 37, 111, 139, 190, 41, 197, 121, 62, 135, 42, 201, 188, 38, 228, 52, 191, 138, 83, 157, 62, 133, 197, 78, 190, 98, 62, 174, 61, 247, 221, 41, 62, 176, 106, 52, 62, 143, 135, 78, 62, 101, 134, 167, 62, 74, 225, 156, 62, 158, 13, 207, 62, 180, 52, 127, 190, 29, 65, 32, 190, 211, 146, 133, 189, 192, 54, 0, 191, 2, 101, 171, 62, 132, 170, 3, 191, 118, 61, 209, 190, 249, 120, 11, 62, 253, 144, 0, 62, 198, 243, 34, 190, 141, 131, 121, 190, 182, 154, 61, 62, 207, 10, 72, 190, 251, 203, 11, 188, 65, 140, 218, 190, 219, 108, 143, 62, 144, 169, 39, 190, 18, 219, 210, 61, 251, 65, 186, 190, 14, 106, 193, 62, 141, 218, 149, 62, 56, 26, 178, 189, 17, 50, 100, 191, 197, 88, 177, 62, 162, 7, 7, 190, 27, 241, 70, 62, 154, 33, 207, 62, 113, 48, 37, 61, 0, 24, 101, 62, 2, 182, 241, 62, 149, 32, 23, 62, 164, 184, 189, 62, 48, 32, 218, 190, 110, 198, 106, 61, 101, 144, 156, 189, 203, 201, 237, 190, 132, 13, 242, 189, 93, 16, 47, 191, 122, 55, 133, 190, 212, 167, 5, 190, 184, 243, 3, 62, 8, 44, 63, 190, 35, 117, 98, 191, 115, 7, 87, 62, 166, 107, 129, 190, 118, 185, 189, 188, 37, 203, 117, 191, 12, 30, 47, 62, 107, 46, 149, 189, 201, 169, 88, 189, 195, 71, 3, 191, 240, 128, 167, 61, 99, 104, 122, 61, 230, 17, 17, 62, 247, 67, 102, 191, 60, 243, 155, 62, 54, 218, 169, 190, 87, 168, 235, 61, 83, 34, 66, 61, 231, 11, 94, 62, 17, 82, 212, 62, 255, 94, 12, 190, 4, 174, 2, 62, 83, 158, 156, 61, 171, 192, 36, 191, 140, 36, 87, 60, 237, 156, 94, 62, 91, 30, 188, 190, 154, 187, 102, 187, 111, 243, 223, 190, 29, 29, 83, 61, 177, 83, 160, 62, 97, 59, 79, 190, 35, 190, 84, 190, 67, 198, 89, 191, 103, 59, 151, 62, 210, 215, 232, 190, 157, 65, 234, 189, 247, 182, 173, 190, 68, 71, 128, 62, 205, 36, 104, 188, 209, 202, 232, 189, 71, 56, 234, 190, 254, 106, 134, 62, 243, 194, 117, 62, 31, 195, 2, 190, 130, 120, 90, 59, 245, 184, 123, 190, 17, 142, 158, 61, 92, 181, 194, 189, 177, 107, 86, 190, 99, 231, 0, 62, 253, 231, 94, 190, 65, 253, 106, 60, 203, 162, 14, 191, 234, 111, 136, 190, 76, 146, 78, 62, 3, 60, 253, 61, 221, 36, 139, 60, 253, 78, 4, 61, 42, 9, 77, 62, 205, 194, 114, 62, 216, 75, 229, 61, 132, 112, 11, 62, 26, 178, 67, 189, 50, 33, 162, 62, 23, 137, 69, 62, 177, 184, 206, 62, 99, 35, 182, 62, 161, 163, 26, 189, 177, 88, 20, 190, 248, 255, 42, 190, 123, 98, 171, 190, 81, 248, 193, 189, 107, 156, 172, 61, 159, 51, 71, 191, 165, 103, 86, 60, 162, 48, 157, 189, 31, 150, 168, 189, 160, 95, 125, 189, 144, 62, 7, 190, 32, 75, 24, 190, 44, 194, 7, 190, 59, 8, 9, 62, 6, 18, 39, 61, 102, 190, 206, 61, 42, 163, 50, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 218, 79, 0, 190, 164, 67, 234, 61, 97, 59, 125, 59, 25, 115, 32, 190, 42, 7, 7, 190, 43, 113, 221, 189, 112, 120, 140, 60, 183, 6, 104, 59, 199, 128, 126, 189, 216, 42, 34, 189, 97, 211, 17, 190, 98, 212, 21, 189, 105, 56, 171, 61, 61, 228, 33, 61, 125, 69, 215, 61, 22, 83, 155, 61, 175, 192, 6, 189, 87, 182, 32, 190, 54, 47, 165, 190, 216, 236, 42, 62, 221, 26, 114, 190, 41, 6, 221, 189, 36, 111, 33, 190, 188, 134, 58, 62, 242, 175, 52, 189, 240, 232, 217, 190, 109, 26, 30, 190, 216, 159, 13, 190, 69, 104, 241, 190, 231, 89, 28, 62, 233, 62, 249, 189, 11, 120, 182, 61, 247, 62, 199, 60, 99, 36, 66, 62, 238, 34, 67, 62, 29, 146, 26, 62, 181, 86, 131, 190, 153, 112, 186, 61, 236, 197, 83, 62, 110, 149, 82, 62, 2, 14, 82, 61, 218, 255, 239, 60, 69, 73, 160, 62, 113, 142, 134, 61, 224, 56, 247, 61, 155, 183, 6, 190, 183, 35, 151, 61, 214, 251, 193, 58, 207, 237, 18, 190, 204, 160, 200, 188, 172, 158, 104, 61, 53, 113, 15, 190, 225, 164, 75, 189, 102, 171, 71, 190, 153, 84, 147, 61, 12, 168, 46, 190, 84, 74, 200, 62, 58, 160, 78, 62, 157, 6, 24, 62, 71, 193, 12, 191, 17, 87, 7, 63, 84, 188, 37, 190, 119, 100, 129, 61, 161, 2, 117, 191, 143, 173, 10, 189, 164, 197, 131, 190, 15, 123, 165, 61, 217, 18, 148, 190, 223, 243, 17, 190, 76, 133, 247, 188, 176, 122, 127, 190, 56, 18, 76, 188, 146, 45, 136, 61, 187, 234, 91, 190, 49, 138, 91, 190, 7, 165, 78, 190, 103, 145, 137, 190, 218, 172, 188, 189, 169, 39, 145, 62, 249, 84, 157, 187, 183, 66, 199, 61, 52, 81, 50, 62, 18, 153, 6, 61, 112, 26, 21, 61, 8, 143, 63, 190, 167, 55, 54, 190, 134, 172, 88, 62, 216, 134, 14, 61, 120, 222, 107, 190, 35, 226, 153, 61, 97, 20, 144, 61, 60, 192, 85, 61, 119, 189, 235, 190, 226, 215, 224, 189, 93, 190, 149, 60, 202, 38, 194, 189, 115, 90, 31, 190, 150, 49, 80, 189, 52, 166, 177, 190, 231, 220, 210, 189, 117, 198, 134, 187, 3, 7, 33, 62, 33, 20, 150, 62, 83, 217, 152, 189, 6, 220, 62, 62, 7, 98, 219, 185, 253, 80, 93, 62, 124, 254, 245, 61, 131, 125, 249, 189, 28, 29, 27, 190, 5, 115, 132, 59, 28, 13, 125, 189, 104, 246, 16, 190, 124, 7, 5, 62, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 75, 209, 232, 190, 72, 86, 186, 62, 178, 156, 62, 190, 51, 204, 110, 189, 26, 54, 197, 61, 151, 140, 5, 62, 180, 203, 238, 190, 115, 53, 22, 191, 222, 62, 186, 190, 101, 203, 101, 60, 165, 154, 38, 191, 173, 127, 2, 62, 43, 152, 45, 61, 238, 184, 149, 62, 43, 172, 42, 62, 229, 72, 19, 189, 127, 188, 187, 62, 80, 28, 238, 187, 135, 170, 181, 189, 119, 115, 177, 61, 214, 228, 75, 62, 214, 203, 25, 62, 81, 152, 174, 62, 201, 58, 51, 62, 174, 144, 46, 62, 78, 29, 240, 61, 36, 146, 75, 190, 13, 178, 149, 190, 133, 249, 152, 188, 156, 53, 178, 62, 98, 61, 25, 189, 135, 52, 203, 189, 62, 84, 146, 188, 198, 190, 64, 189, 65, 79, 37, 187, 219, 206, 233, 189, 1, 147, 79, 61, 213, 190, 244, 60, 62, 121, 169, 61, 218, 38, 182, 189, 13, 77, 1, 190, 216, 102, 15, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 108, 229, 90, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 248, 224, 36, 190, 242, 6, 248, 189, 59, 62, 72, 189, 43, 24, 240, 188, 192, 199, 90, 61, 36, 54, 248, 189, 6, 131, 12, 190, 61, 143, 142, 188, 196, 71, 60, 189, 37, 202, 132, 189, 157, 84, 128, 61, 29, 145, 4, 189, 204, 92, 171, 190, 228, 241, 5, 62, 218, 30, 63, 60, 126, 143, 162, 61, 7, 125, 87, 61, 81, 229, 41, 62, 225, 162, 247, 190, 55, 131, 193, 190, 92, 55, 210, 190, 251, 211, 59, 190, 10, 183, 117, 191, 17, 222, 107, 190, 76, 131, 57, 189, 92, 228, 7, 63, 151, 175, 27, 189, 23, 236, 207, 189, 111, 82, 142, 189, 162, 231, 130, 62, 151, 219, 74, 190, 247, 228, 28, 190, 137, 164, 183, 62, 106, 75, 49, 190, 249, 114, 125, 62, 43, 205, 76, 62, 227, 202, 191, 61, 58, 213, 148, 62, 22, 127, 125, 190, 182, 223, 47, 60, 94, 226, 184, 189, 50, 113, 34, 62, 255, 167, 203, 189, 33, 198, 16, 189, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 85, 172, 142, 190, 11, 106, 101, 62, 63, 94, 249, 190, 3, 2, 234, 62, 90, 143, 10, 62, 246, 75, 225, 190, 187, 25, 214, 190, 210, 59, 176, 190, 62, 152, 159, 190, 156, 128, 128, 61, 39, 214, 92, 191, 214, 116, 128, 62, 90, 251, 27, 189, 48, 210, 153, 62, 115, 68, 27, 191, 35, 109, 76, 191, 59, 10, 208, 190, 151, 118, 43, 62, 255, 14, 142, 190, 129, 76, 81, 62, 239, 128, 120, 62, 217, 233, 128, 61, 177, 22, 61, 60, 49, 227, 189, 189, 140, 238, 140, 188, 165, 119, 13, 62, 139, 97, 30, 191, 213, 13, 133, 190, 252, 187, 2, 62, 140, 208, 201, 189, 244, 24, 237, 190, 232, 38, 149, 190, 47, 120, 77, 190, 209, 205, 12, 62, 229, 202, 158, 62, 176, 56, 17, 62, 231, 228, 0, 61, 141, 70, 152, 190, 73, 132, 6, 191, 177, 121, 37, 62, 135, 26, 72, 189, 60, 29, 238, 189, 174, 237, 99, 191, 87, 105, 159, 62, 71, 62, 83, 189, 70, 167, 32, 62, 114, 222, 117, 190, 222, 136, 79, 190, 166, 99, 195, 190, 235, 28, 192, 61, 115, 46, 10, 190, 210, 34, 76, 61, 171, 240, 10, 191, 238, 214, 95, 189, 82, 159, 215, 61, 246, 55, 68, 61, 98, 130, 15, 61, 34, 38, 120, 190, 208, 48, 200, 190, 49, 30, 71, 62, 225, 34, 9, 61, 171, 81, 8, 191, 220, 136, 147, 190, 167, 97, 9, 62, 79, 244, 37, 191, 176, 141, 96, 62, 244, 135, 239, 190, 62, 174, 89, 189, 68, 44, 189, 61, 66, 111, 183, 189, 231, 101, 46, 60, 44, 193, 172, 190, 4, 174, 208, 189, 9, 114, 130, 190, 126, 135, 160, 190, 247, 6, 172, 62, 209, 71, 34, 61, 186, 45, 15, 62, 171, 42, 194, 189, 71, 47, 137, 191, 197, 23, 151, 189, 174, 169, 213, 61, 62, 149, 227, 190, 108, 127, 51, 62, 39, 154, 14, 191, 205, 61, 35, 189, 9, 151, 99, 62, 40, 90, 50, 190, 221, 4, 69, 189, 160, 37, 84, 190, 83, 250, 196, 190, 28, 21, 193, 189, 131, 68, 137, 62, 227, 217, 192, 189, 161, 131, 119, 191, 205, 250, 148, 190, 174, 227, 193, 189, 226, 175, 181, 62, 228, 38, 25, 190, 174, 6, 40, 190, 101, 52, 2, 62, 206, 224, 66, 189, 56, 53, 137, 189, 206, 96, 119, 190, 209, 11, 252, 61, 145, 195, 146, 61, 98, 92, 33, 191, 127, 243, 29, 62, 149, 152, 48, 62, 132, 56, 132, 60, 187, 23, 103, 62, 18, 234, 191, 189, 33, 164, 58, 188, 181, 192, 52, 62, 96, 246, 221, 190, 176, 26, 28, 189, 70, 179, 132, 189, 68, 222, 49, 62, 202, 173, 14, 62, 87, 56, 136, 61, 83, 215, 140, 62, 24, 138, 247, 189, 19, 231, 189, 190, 126, 38, 126, 61, 34, 161, 34, 190, 194, 211, 195, 62, 87, 129, 163, 189, 248, 113, 135, 190, 153, 197, 36, 186, 57, 70, 61, 191, 5, 122, 4, 190, 67, 66, 248, 61, 36, 95, 134, 62, 87, 180, 156, 62, 41, 115, 180, 61, 18, 52, 254, 189, 85, 153, 202, 189, 27, 219, 50, 191, 162, 147, 4, 190, 233, 168, 36, 190, 244, 149, 44, 62, 114, 59, 123, 188, 198, 70, 70, 189, 135, 242, 42, 61, 48, 21, 24, 189, 36, 158, 150, 190, 128, 60, 190, 61, 42, 117, 135, 61, 111, 163, 45, 190, 67, 79, 181, 190, 231, 105, 173, 62, 177, 101, 186, 61, 120, 127, 119, 61, 22, 227, 207, 189, 181, 55, 20, 62, 221, 205, 203, 61, 177, 225, 35, 62, 99, 105, 113, 189, 141, 23, 137, 60, 100, 27, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 230, 204, 62, 37, 107, 230, 187, 63, 192, 127, 61, 143, 193, 49, 62, 126, 23, 48, 62, 32, 35, 143, 190, 170, 229, 45, 61, 138, 215, 97, 62, 124, 64, 142, 187, 62, 151, 14, 62, 4, 192, 47, 62, 205, 216, 83, 62, 108, 31, 157, 62, 14, 38, 155, 62, 101, 75, 144, 62, 38, 233, 242, 61, 2, 208, 157, 189, 64, 89, 132, 189, 161, 140, 138, 62, 188, 249, 10, 61, 93, 168, 176, 62, 166, 18, 149, 188, 74, 25, 212, 189, 92, 4, 253, 189, 233, 25, 61, 62, 140, 153, 12, 190, 145, 24, 247, 189, 206, 49, 87, 62, 119, 229, 181, 189, 184, 94, 44, 189, 228, 242, 175, 59, 173, 122, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 13, 50, 62, 20, 134, 93, 63, 89, 203, 224, 190, 83, 248, 128, 190, 103, 173, 98, 63, 245, 97, 20, 189, 229, 66, 174, 61, 109, 233, 155, 62, 100, 235, 158, 61, 199, 13, 53, 63, 146, 195, 191, 189, 80, 110, 48, 62, 53, 35, 135, 190, 162, 98, 62, 191, 202, 73, 142, 191, 149, 228, 85, 191, 214, 253, 80, 62, 65, 146, 243, 189, 32, 26, 146, 62, 171, 185, 211, 62, 22, 173, 154, 186, 137, 219, 214, 61, 194, 15, 187, 62, 178, 202, 35, 190, 149, 214, 14, 63, 173, 31, 35, 62, 57, 39, 181, 189, 116, 31, 88, 63, 139, 6, 51, 191, 43, 44, 72, 63, 95, 62, 201, 62, 154, 157, 7, 190, 82, 94, 220, 190, 67, 32, 224, 60, 149, 148, 187, 188, 121, 235, 36, 62, 196, 152, 198, 61, 140, 18, 147, 190, 164, 44, 143, 61, 12, 89, 209, 189, 134, 177, 94, 60, 48, 223, 127, 62, 17, 148, 176, 189, 226, 229, 20, 191, 214, 162, 243, 188, 62, 92, 228, 61, 91, 42, 135, 62, 57, 69, 215, 58, 96, 5, 10, 62, 21, 212, 11, 190, 68, 214, 144, 190, 3, 174, 217, 61, 208, 150, 192, 190, 214, 30, 247, 187, 131, 156, 151, 62, 60, 228, 200, 189, 182, 167, 207, 60, 80, 151, 149, 188, 7, 47, 165, 188, 207, 215, 91, 62, 109, 250, 74, 62, 157, 199, 228, 62, 92, 157, 86, 62, 149, 236, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 234, 133, 189, 240, 174, 109, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {125, 146, 222, 62, 49, 215, 193, 190, 113, 18, 119, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 168, 246, 63, 248, 200, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}