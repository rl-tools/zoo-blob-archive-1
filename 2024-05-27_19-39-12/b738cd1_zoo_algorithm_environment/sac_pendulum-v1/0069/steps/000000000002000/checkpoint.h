// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 66, 19, 191, 48, 156, 191, 62, 63, 60, 220, 190, 107, 148, 168, 190, 46, 14, 14, 191, 42, 23, 57, 62, 167, 148, 30, 189, 123, 211, 76, 63, 117, 89, 61, 190, 255, 241, 72, 189, 181, 123, 219, 62, 1, 176, 234, 190, 95, 68, 32, 189, 44, 90, 247, 62, 126, 98, 194, 61, 118, 1, 44, 191, 160, 197, 69, 191, 72, 85, 136, 190, 162, 155, 191, 62, 45, 123, 238, 189, 64, 207, 171, 62, 190, 97, 13, 191, 15, 89, 254, 62, 93, 14, 156, 190, 166, 74, 35, 59, 163, 151, 76, 188, 11, 103, 41, 63, 184, 100, 23, 63, 243, 111, 157, 189, 193, 84, 111, 189, 131, 78, 128, 62, 205, 220, 165, 61, 45, 14, 139, 62, 39, 42, 252, 190, 222, 134, 193, 61, 190, 21, 222, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 185, 196, 165, 190, 246, 153, 113, 191, 117, 150, 103, 62, 146, 54, 146, 62, 61, 141, 34, 62, 70, 96, 142, 190, 15, 67, 187, 190, 82, 147, 72, 191, 80, 195, 20, 190, 11, 127, 228, 61, 92, 102, 81, 61, 147, 78, 56, 190, 147, 127, 242, 190, 210, 82, 134, 191, 40, 55, 254, 62, 33, 28, 224, 62, 52, 137, 59, 191, 232, 131, 43, 62, 99, 175, 8, 62, 96, 255, 213, 188, 37, 3, 212, 62, 197, 205, 175, 62, 251, 203, 62, 191, 19, 7, 137, 190, 8, 74, 98, 190, 88, 184, 101, 189, 30, 255, 176, 62, 230, 13, 167, 190, 161, 81, 78, 190, 207, 36, 25, 190, 128, 3, 220, 62, 150, 226, 3, 189, 150, 14, 165, 190, 213, 142, 58, 63, 26, 216, 227, 62, 156, 36, 7, 191, 130, 38, 232, 61, 36, 163, 99, 191, 10, 139, 74, 62, 97, 229, 207, 190, 196, 22, 33, 191, 155, 125, 43, 190, 65, 152, 151, 62, 58, 25, 7, 63, 222, 178, 74, 190, 32, 14, 50, 190, 20, 39, 35, 63, 159, 93, 197, 62, 7, 123, 219, 62, 64, 121, 243, 190, 247, 30, 249, 190, 151, 235, 238, 190, 155, 77, 73, 190, 249, 126, 21, 191, 239, 5, 177, 62, 225, 87, 255, 62, 140, 173, 163, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 153, 22, 191, 242, 65, 63, 190, 73, 249, 134, 62, 253, 173, 18, 191, 239, 116, 39, 63, 48, 228, 127, 59, 11, 17, 232, 190, 183, 151, 184, 190, 255, 76, 181, 190, 244, 142, 82, 190, 218, 233, 187, 190, 55, 79, 65, 62, 178, 53, 252, 190, 249, 14, 73, 62, 177, 33, 29, 191, 221, 119, 116, 60, 31, 115, 12, 191, 218, 147, 74, 189, 114, 17, 178, 61, 20, 182, 23, 63, 76, 17, 17, 63, 231, 205, 32, 62, 97, 252, 43, 63, 205, 110, 171, 189, 178, 164, 173, 62, 233, 197, 138, 62, 119, 9, 26, 62, 127, 6, 159, 61, 251, 81, 237, 62, 148, 28, 188, 190, 98, 78, 3, 190, 126, 40, 9, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 238, 229, 189, 189, 243, 1, 190, 142, 217, 181, 61, 192, 243, 160, 188, 160, 16, 30, 62, 45, 112, 127, 190, 157, 71, 18, 190, 217, 2, 32, 61, 103, 192, 181, 189, 126, 33, 243, 188, 8, 245, 17, 190, 63, 239, 124, 189, 29, 182, 225, 61, 56, 191, 65, 62, 62, 132, 142, 189, 4, 100, 13, 60, 191, 248, 65, 188, 205, 29, 44, 62, 81, 31, 194, 61, 233, 59, 181, 61, 109, 78, 179, 189, 196, 222, 159, 58, 41, 75, 203, 60, 167, 229, 218, 61, 160, 82, 90, 62, 252, 152, 164, 61, 243, 62, 68, 190, 174, 59, 50, 62, 71, 231, 71, 61, 244, 253, 56, 189, 219, 33, 57, 190, 197, 155, 219, 187, 116, 19, 8, 190, 240, 148, 12, 62, 242, 110, 219, 189, 216, 181, 196, 189, 155, 215, 251, 60, 195, 170, 130, 62, 37, 89, 67, 190, 154, 132, 54, 190, 36, 87, 128, 190, 133, 210, 156, 62, 165, 105, 9, 190, 83, 231, 157, 189, 242, 196, 31, 62, 179, 165, 246, 61, 215, 97, 180, 189, 8, 164, 45, 62, 55, 142, 176, 189, 255, 13, 44, 62, 199, 134, 122, 189, 17, 64, 91, 61, 83, 104, 55, 62, 191, 168, 14, 190, 233, 153, 24, 62, 240, 34, 229, 189, 109, 171, 117, 61, 70, 22, 128, 62, 202, 145, 62, 62, 30, 98, 220, 187, 185, 128, 217, 61, 36, 183, 3, 189, 142, 122, 45, 190, 227, 120, 28, 190, 103, 70, 14, 190, 204, 147, 34, 190, 16, 90, 73, 62, 45, 55, 152, 189, 14, 21, 73, 62, 225, 219, 175, 190, 157, 17, 121, 189, 38, 13, 143, 62, 137, 149, 49, 62, 205, 222, 214, 61, 24, 254, 22, 189, 11, 17, 107, 61, 148, 58, 49, 190, 30, 210, 243, 189, 54, 233, 210, 61, 126, 174, 234, 190, 241, 201, 253, 189, 32, 235, 132, 61, 198, 146, 67, 61, 236, 194, 49, 62, 97, 162, 51, 190, 223, 244, 231, 189, 127, 45, 150, 61, 17, 45, 58, 62, 156, 159, 5, 189, 193, 166, 33, 190, 232, 253, 186, 60, 173, 162, 179, 188, 251, 165, 181, 61, 12, 194, 96, 62, 123, 170, 48, 189, 28, 98, 54, 62, 69, 188, 41, 62, 253, 49, 243, 189, 120, 226, 33, 61, 99, 222, 143, 189, 77, 173, 45, 190, 171, 178, 177, 61, 97, 190, 211, 187, 160, 32, 177, 189, 113, 112, 46, 190, 219, 223, 226, 189, 136, 42, 27, 190, 255, 73, 73, 190, 4, 165, 148, 61, 238, 145, 96, 61, 60, 135, 164, 61, 29, 81, 146, 188, 102, 220, 176, 60, 124, 231, 138, 61, 39, 185, 253, 61, 38, 73, 119, 61, 99, 39, 42, 190, 247, 190, 29, 190, 197, 58, 67, 190, 111, 153, 38, 190, 16, 139, 5, 190, 79, 244, 222, 61, 85, 1, 135, 189, 207, 125, 189, 189, 132, 3, 159, 61, 214, 37, 56, 61, 27, 173, 62, 189, 136, 219, 179, 187, 117, 23, 106, 190, 253, 139, 32, 62, 248, 212, 186, 189, 23, 164, 250, 188, 87, 224, 40, 190, 159, 91, 1, 62, 207, 99, 211, 188, 209, 133, 43, 190, 166, 208, 118, 190, 118, 57, 24, 62, 172, 2, 145, 190, 63, 213, 16, 189, 54, 218, 245, 61, 79, 251, 181, 61, 140, 150, 200, 61, 115, 102, 84, 189, 37, 242, 154, 61, 175, 251, 249, 61, 183, 99, 233, 60, 41, 167, 159, 61, 123, 182, 209, 61, 173, 101, 181, 60, 38, 19, 224, 61, 26, 221, 26, 190, 138, 141, 107, 189, 156, 155, 13, 62, 61, 74, 245, 61, 150, 220, 28, 190, 50, 60, 13, 189, 14, 96, 35, 62, 29, 180, 109, 190, 143, 204, 4, 190, 90, 81, 18, 189, 23, 84, 237, 189, 213, 156, 143, 61, 244, 42, 235, 60, 35, 12, 113, 61, 226, 48, 38, 61, 14, 86, 139, 61, 255, 47, 108, 60, 95, 152, 230, 61, 10, 209, 13, 190, 125, 105, 17, 62, 93, 9, 248, 61, 34, 41, 4, 62, 23, 207, 193, 189, 112, 94, 104, 62, 119, 17, 80, 190, 227, 32, 133, 189, 136, 117, 229, 61, 65, 219, 160, 188, 232, 157, 44, 190, 46, 154, 215, 189, 4, 71, 4, 190, 187, 170, 68, 190, 43, 107, 67, 187, 184, 168, 134, 62, 57, 215, 64, 190, 194, 193, 168, 61, 87, 83, 135, 62, 53, 170, 96, 61, 254, 129, 251, 189, 24, 7, 160, 60, 68, 124, 252, 61, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 189, 160, 2, 190, 67, 215, 48, 61, 45, 47, 18, 190, 3, 39, 215, 189, 95, 248, 4, 190, 162, 32, 88, 189, 119, 250, 65, 189, 122, 39, 180, 60, 189, 198, 70, 190, 39, 106, 136, 189, 239, 17, 137, 189, 160, 221, 4, 62, 134, 195, 202, 189, 56, 224, 195, 61, 140, 85, 149, 189, 224, 152, 106, 61, 20, 26, 248, 186, 254, 20, 130, 61, 182, 253, 152, 60, 144, 68, 58, 61, 230, 202, 132, 61, 44, 174, 61, 61, 8, 158, 249, 61, 16, 111, 41, 62, 27, 150, 137, 62, 202, 145, 166, 61, 128, 200, 30, 62, 237, 211, 54, 62, 110, 76, 133, 189, 170, 215, 62, 189, 241, 96, 4, 62, 173, 225, 226, 189, 14, 110, 162, 188, 249, 255, 10, 62, 41, 13, 147, 189, 197, 245, 129, 61, 191, 160, 34, 190, 180, 128, 160, 189, 211, 245, 32, 190, 43, 159, 51, 190, 187, 173, 239, 61, 151, 1, 11, 190, 128, 232, 26, 61, 163, 7, 107, 61, 147, 26, 46, 61, 110, 75, 33, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 188, 185, 16, 61, 31, 154, 253, 189, 22, 247, 229, 188, 228, 50, 171, 189, 89, 118, 15, 189, 172, 60, 235, 61, 162, 231, 32, 62, 232, 86, 203, 189, 24, 59, 212, 60, 91, 251, 91, 61, 140, 87, 116, 60, 159, 84, 4, 189, 110, 137, 52, 190, 125, 69, 21, 189, 246, 40, 209, 189, 117, 125, 237, 189, 8, 63, 128, 189, 228, 177, 34, 62, 74, 209, 8, 189, 254, 116, 141, 61, 189, 121, 6, 190, 178, 103, 86, 190, 39, 79, 3, 189, 62, 189, 2, 62, 238, 191, 68, 190, 173, 80, 232, 61, 169, 137, 50, 190, 9, 1, 207, 188, 68, 40, 215, 189, 103, 152, 17, 190, 94, 204, 248, 60, 222, 251, 200, 59, 84, 175, 10, 188, 152, 219, 87, 189, 66, 92, 162, 186, 182, 95, 55, 190, 190, 46, 13, 190, 120, 35, 201, 61, 49, 190, 242, 61, 137, 185, 241, 59, 136, 250, 114, 61, 21, 0, 86, 61, 244, 124, 243, 61, 106, 154, 40, 62, 16, 217, 154, 188, 60, 74, 237, 189, 245, 240, 23, 190, 160, 132, 231, 61, 135, 57, 94, 188, 92, 205, 89, 62, 145, 206, 12, 190, 83, 71, 83, 188, 234, 65, 84, 59, 179, 172, 145, 61, 202, 122, 126, 61, 18, 39, 29, 61, 47, 159, 166, 188, 47, 169, 138, 61, 171, 15, 15, 62, 11, 41, 167, 189, 208, 81, 186, 189, 6, 253, 112, 189, 127, 245, 155, 61, 133, 97, 156, 189, 35, 115, 131, 61, 29, 155, 128, 61, 156, 53, 67, 189, 89, 17, 73, 188, 244, 70, 69, 61, 59, 238, 23, 190, 206, 166, 30, 190, 49, 222, 137, 61, 157, 105, 219, 61, 110, 15, 89, 61, 21, 86, 58, 189, 93, 88, 217, 60, 149, 162, 244, 189, 1, 90, 246, 61, 175, 130, 128, 62, 15, 213, 11, 190, 131, 226, 16, 62, 169, 208, 48, 62, 159, 222, 80, 61, 17, 214, 154, 189, 127, 98, 57, 188, 46, 46, 160, 189, 148, 194, 102, 188, 154, 128, 56, 190, 43, 11, 207, 189, 42, 164, 11, 61, 101, 39, 116, 189, 200, 200, 138, 61, 68, 52, 149, 61, 220, 194, 40, 190, 234, 136, 3, 190, 157, 114, 0, 190, 66, 67, 244, 188, 93, 104, 177, 61, 120, 65, 76, 60, 217, 57, 83, 62, 85, 196, 133, 188, 88, 81, 129, 62, 157, 82, 42, 189, 100, 42, 226, 61, 222, 130, 24, 62, 27, 215, 243, 61, 228, 215, 71, 62, 128, 101, 25, 62, 217, 28, 41, 189, 6, 124, 42, 190, 255, 180, 122, 61, 142, 81, 35, 190, 181, 155, 145, 189, 6, 61, 197, 61, 26, 204, 106, 190, 254, 203, 224, 189, 253, 184, 197, 190, 189, 192, 112, 62, 240, 244, 112, 61, 111, 9, 37, 62, 147, 255, 133, 61, 186, 46, 48, 62, 177, 128, 28, 62, 129, 86, 117, 61, 195, 16, 149, 61, 46, 211, 30, 190, 229, 144, 3, 191, 107, 124, 70, 189, 142, 80, 15, 62, 28, 82, 162, 62, 252, 153, 229, 61, 224, 58, 128, 61, 158, 64, 61, 62, 42, 142, 14, 190, 123, 81, 219, 189, 138, 58, 163, 189, 144, 255, 163, 61, 125, 94, 123, 189, 248, 43, 89, 188, 214, 140, 13, 61, 216, 34, 36, 61, 125, 219, 41, 190, 72, 242, 57, 62, 251, 6, 95, 190, 51, 182, 149, 190, 78, 175, 185, 62, 180, 186, 60, 190, 116, 183, 26, 61, 14, 222, 245, 189, 61, 190, 236, 189, 226, 83, 5, 62, 78, 80, 165, 189, 132, 166, 137, 62, 216, 151, 146, 61, 178, 109, 254, 188, 29, 65, 32, 190, 110, 82, 126, 189, 239, 53, 209, 189, 41, 96, 150, 189, 43, 9, 206, 189, 187, 41, 185, 190, 126, 221, 50, 189, 204, 100, 133, 61, 219, 248, 195, 189, 181, 244, 238, 188, 127, 255, 246, 61, 95, 202, 143, 189, 41, 232, 148, 61, 235, 181, 215, 190, 22, 120, 146, 189, 180, 86, 250, 189, 196, 18, 67, 62, 36, 236, 70, 190, 67, 44, 86, 62, 117, 203, 133, 61, 26, 181, 12, 190, 251, 245, 11, 191, 24, 234, 190, 62, 115, 136, 141, 189, 107, 101, 11, 62, 11, 198, 33, 62, 115, 66, 57, 190, 217, 204, 55, 62, 216, 111, 220, 189, 234, 157, 238, 188, 33, 173, 13, 62, 204, 42, 16, 61, 110, 198, 106, 61, 169, 221, 83, 190, 104, 6, 249, 189, 35, 99, 152, 190, 30, 85, 50, 190, 94, 122, 163, 190, 104, 33, 20, 190, 108, 184, 0, 62, 40, 186, 171, 188, 222, 40, 3, 61, 178, 182, 2, 62, 57, 227, 252, 59, 114, 251, 252, 187, 80, 151, 52, 191, 254, 247, 146, 188, 8, 105, 84, 189, 58, 117, 44, 62, 89, 196, 92, 190, 115, 215, 110, 61, 212, 141, 175, 189, 238, 234, 97, 61, 92, 42, 1, 191, 239, 172, 225, 62, 110, 178, 120, 190, 183, 192, 81, 62, 47, 239, 125, 190, 46, 130, 25, 190, 138, 249, 193, 62, 121, 17, 250, 189, 197, 76, 212, 60, 123, 206, 65, 190, 108, 68, 216, 58, 140, 36, 87, 60, 11, 4, 79, 189, 38, 56, 7, 190, 22, 220, 161, 190, 0, 212, 210, 189, 121, 78, 213, 189, 142, 154, 119, 62, 129, 74, 216, 189, 92, 243, 18, 190, 191, 75, 23, 190, 26, 193, 134, 62, 140, 77, 137, 190, 8, 198, 88, 189, 31, 182, 136, 190, 41, 189, 17, 189, 127, 33, 217, 61, 187, 191, 70, 62, 143, 196, 152, 190, 112, 64, 42, 62, 6, 19, 56, 62, 13, 166, 190, 60, 173, 18, 124, 189, 232, 150, 33, 62, 238, 45, 236, 189, 57, 243, 234, 189, 44, 16, 20, 61, 56, 65, 254, 61, 25, 250, 10, 61, 5, 215, 7, 189, 67, 240, 20, 62, 214, 50, 237, 189, 250, 182, 32, 61, 3, 60, 253, 61, 7, 144, 137, 188, 71, 207, 184, 59, 163, 110, 28, 61, 230, 96, 45, 190, 202, 136, 133, 61, 223, 79, 211, 61, 162, 83, 98, 189, 206, 236, 121, 189, 195, 24, 27, 62, 140, 153, 3, 189, 27, 117, 158, 189, 98, 134, 176, 61, 73, 169, 39, 190, 54, 131, 5, 190, 123, 102, 19, 189, 209, 53, 251, 189, 230, 63, 94, 189, 95, 132, 11, 190, 169, 24, 58, 61, 115, 207, 78, 189, 31, 150, 168, 189, 78, 204, 104, 189, 152, 113, 213, 189, 174, 69, 246, 189, 177, 73, 217, 189, 59, 8, 9, 62, 179, 18, 140, 61, 102, 190, 206, 61, 112, 88, 11, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 240, 44, 201, 189, 93, 228, 13, 62, 221, 182, 246, 60, 25, 115, 32, 190, 88, 168, 7, 190, 43, 113, 221, 189, 42, 227, 35, 61, 183, 6, 104, 59, 104, 159, 22, 189, 55, 192, 132, 188, 128, 54, 246, 189, 81, 192, 24, 189, 63, 222, 222, 61, 135, 183, 140, 61, 125, 69, 215, 61, 216, 26, 201, 61, 115, 166, 59, 188, 87, 182, 32, 190, 94, 220, 238, 189, 182, 93, 60, 62, 4, 235, 105, 61, 84, 147, 149, 61, 140, 222, 69, 190, 102, 18, 113, 61, 129, 178, 186, 60, 60, 92, 7, 190, 252, 240, 231, 189, 56, 99, 95, 187, 233, 12, 105, 188, 101, 201, 193, 189, 233, 62, 249, 189, 202, 111, 245, 61, 128, 175, 99, 59, 228, 16, 76, 62, 248, 58, 192, 61, 160, 76, 31, 62, 240, 108, 12, 190, 52, 68, 129, 61, 45, 41, 164, 61, 236, 210, 4, 62, 222, 210, 107, 189, 63, 48, 195, 189, 250, 209, 131, 62, 230, 27, 22, 62, 28, 198, 230, 61, 150, 28, 133, 61, 202, 235, 229, 188, 207, 189, 43, 189, 154, 6, 230, 189, 20, 144, 2, 189, 104, 108, 85, 61, 74, 14, 0, 61, 92, 5, 44, 189, 68, 120, 149, 189, 65, 156, 76, 60, 245, 175, 166, 188, 112, 127, 196, 60, 90, 214, 136, 62, 219, 113, 219, 61, 95, 248, 82, 190, 211, 186, 163, 61, 113, 179, 71, 190, 119, 100, 129, 61, 68, 12, 131, 190, 115, 238, 210, 61, 50, 168, 105, 190, 58, 129, 41, 62, 233, 237, 10, 190, 8, 195, 69, 190, 85, 66, 14, 190, 224, 240, 128, 189, 12, 183, 117, 189, 167, 110, 181, 61, 47, 3, 181, 189, 149, 233, 20, 189, 255, 172, 18, 190, 198, 74, 85, 190, 97, 166, 184, 59, 35, 51, 181, 61, 119, 25, 176, 60, 210, 93, 16, 62, 232, 182, 61, 61, 53, 222, 187, 61, 79, 140, 184, 61, 127, 232, 89, 189, 157, 142, 237, 189, 118, 40, 254, 61, 95, 50, 236, 188, 226, 62, 59, 190, 94, 222, 240, 61, 156, 191, 235, 61, 121, 184, 199, 189, 90, 72, 26, 190, 48, 160, 218, 189, 93, 190, 149, 60, 140, 65, 71, 189, 144, 175, 6, 189, 1, 213, 19, 62, 145, 60, 88, 190, 43, 255, 152, 189, 171, 69, 209, 61, 207, 11, 223, 61, 252, 175, 42, 62, 99, 222, 83, 189, 230, 74, 251, 61, 244, 121, 153, 60, 41, 245, 27, 62, 169, 249, 34, 62, 247, 60, 160, 188, 39, 161, 150, 189, 59, 195, 162, 189, 109, 123, 220, 60, 64, 230, 236, 189, 66, 37, 149, 61, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 203, 57, 45, 190, 66, 240, 190, 62, 13, 192, 152, 60, 178, 201, 227, 60, 133, 46, 66, 61, 156, 57, 27, 62, 73, 63, 114, 190, 102, 151, 166, 190, 229, 15, 145, 190, 61, 64, 177, 61, 131, 156, 224, 189, 120, 35, 17, 190, 43, 152, 45, 61, 38, 181, 171, 62, 57, 195, 241, 188, 38, 255, 87, 59, 97, 81, 231, 61, 201, 137, 130, 188, 193, 78, 54, 188, 102, 255, 73, 61, 92, 210, 20, 189, 164, 229, 141, 61, 64, 68, 75, 62, 177, 146, 82, 189, 244, 206, 189, 61, 243, 102, 24, 62, 148, 58, 247, 189, 12, 28, 231, 189, 19, 186, 9, 190, 201, 204, 39, 62, 250, 250, 46, 61, 183, 202, 11, 187, 62, 84, 146, 188, 198, 190, 64, 189, 133, 228, 84, 60, 97, 16, 219, 189, 218, 225, 121, 61, 213, 190, 244, 60, 62, 121, 169, 61, 91, 164, 177, 189, 13, 77, 1, 190, 202, 142, 28, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 2, 80, 148, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 47, 114, 20, 190, 242, 6, 248, 189, 223, 152, 29, 189, 112, 230, 114, 188, 134, 126, 171, 61, 36, 54, 248, 189, 6, 131, 12, 190, 196, 243, 118, 187, 196, 71, 60, 189, 64, 114, 81, 189, 25, 35, 150, 61, 62, 249, 221, 188, 162, 125, 7, 190, 57, 111, 132, 62, 180, 39, 218, 61, 202, 171, 91, 62, 247, 230, 88, 61, 236, 252, 32, 62, 50, 214, 63, 190, 10, 77, 86, 190, 185, 166, 154, 190, 87, 58, 223, 189, 230, 135, 144, 190, 137, 69, 151, 189, 76, 131, 57, 189, 79, 79, 4, 63, 193, 155, 165, 189, 170, 230, 198, 61, 178, 10, 28, 190, 69, 13, 130, 62, 71, 38, 110, 190, 81, 115, 208, 189, 174, 71, 21, 62, 139, 88, 8, 189, 212, 122, 34, 62, 189, 23, 39, 62, 66, 24, 202, 61, 21, 120, 92, 62, 198, 32, 123, 189, 254, 172, 228, 61, 103, 80, 20, 190, 22, 170, 44, 62, 232, 28, 168, 187, 70, 216, 194, 61, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 27, 155, 120, 190, 103, 226, 59, 62, 147, 126, 77, 190, 176, 81, 150, 61, 58, 251, 198, 61, 64, 184, 168, 189, 13, 110, 97, 190, 238, 183, 253, 190, 192, 68, 144, 190, 187, 99, 4, 62, 55, 183, 17, 188, 241, 123, 148, 188, 90, 251, 27, 189, 254, 209, 162, 62, 125, 180, 188, 189, 248, 30, 163, 61, 118, 192, 116, 190, 118, 79, 237, 61, 210, 151, 66, 190, 58, 244, 44, 62, 101, 134, 18, 62, 224, 10, 228, 188, 126, 133, 104, 189, 31, 89, 187, 189, 133, 139, 160, 61, 60, 8, 244, 61, 35, 217, 234, 188, 53, 240, 180, 189, 205, 96, 12, 61, 101, 32, 147, 189, 115, 18, 32, 61, 7, 55, 242, 189, 11, 177, 203, 189, 241, 210, 90, 187, 79, 213, 197, 61, 42, 121, 31, 60, 208, 113, 214, 189, 240, 110, 15, 62, 147, 13, 3, 190, 185, 205, 11, 61, 239, 17, 41, 190, 233, 25, 162, 61, 89, 10, 6, 190, 3, 54, 21, 62, 71, 62, 83, 189, 237, 187, 254, 61, 112, 164, 153, 189, 178, 31, 207, 189, 160, 26, 234, 61, 70, 205, 199, 188, 206, 217, 27, 190, 11, 60, 10, 189, 189, 10, 234, 189, 119, 93, 49, 190, 248, 85, 76, 61, 115, 78, 46, 62, 76, 28, 67, 189, 121, 47, 22, 190, 46, 65, 4, 189, 221, 168, 228, 60, 56, 53, 32, 189, 201, 65, 247, 189, 60, 48, 168, 189, 79, 97, 220, 60, 225, 154, 110, 189, 186, 143, 77, 62, 177, 246, 102, 190, 242, 129, 89, 190, 32, 131, 208, 189, 141, 241, 39, 62, 58, 77, 67, 61, 185, 244, 139, 189, 45, 225, 132, 189, 162, 246, 100, 190, 232, 219, 35, 61, 10, 206, 32, 62, 209, 71, 34, 61, 90, 222, 87, 62, 71, 47, 194, 189, 217, 60, 171, 61, 59, 179, 150, 189, 186, 43, 237, 61, 133, 53, 54, 190, 145, 211, 239, 61, 3, 20, 155, 189, 238, 88, 8, 190, 13, 67, 191, 61, 123, 56, 1, 189, 47, 98, 157, 189, 79, 129, 63, 189, 63, 17, 16, 62, 84, 94, 34, 190, 214, 1, 5, 62, 226, 123, 177, 189, 78, 250, 250, 189, 214, 124, 91, 190, 108, 249, 255, 60, 12, 136, 164, 62, 77, 70, 166, 189, 221, 8, 2, 190, 89, 46, 0, 62, 139, 131, 10, 62, 40, 142, 225, 58, 135, 16, 0, 190, 11, 89, 17, 62, 92, 200, 75, 186, 65, 9, 9, 190, 24, 130, 48, 189, 149, 152, 48, 62, 211, 89, 6, 62, 42, 78, 4, 62, 158, 83, 127, 62, 45, 71, 142, 189, 222, 63, 74, 62, 105, 101, 146, 190, 221, 52, 47, 189, 163, 237, 180, 189, 122, 132, 140, 61, 190, 71, 61, 62, 78, 124, 38, 189, 50, 144, 33, 62, 95, 250, 76, 188, 28, 152, 218, 188, 217, 165, 146, 61, 249, 100, 64, 190, 100, 223, 90, 62, 170, 77, 123, 60, 203, 187, 57, 190, 212, 194, 200, 59, 180, 73, 56, 190, 237, 141, 190, 189, 41, 11, 46, 62, 156, 135, 9, 62, 83, 125, 132, 61, 9, 206, 108, 60, 184, 204, 235, 189, 147, 38, 176, 189, 233, 54, 117, 190, 222, 159, 243, 188, 59, 103, 221, 189, 244, 149, 44, 62, 12, 164, 80, 187, 158, 148, 91, 61, 112, 69, 169, 188, 97, 141, 135, 61, 35, 96, 177, 189, 58, 248, 5, 61, 8, 39, 18, 190, 94, 87, 37, 190, 136, 58, 148, 188, 148, 113, 237, 61, 104, 72, 248, 61, 29, 224, 15, 62, 4, 40, 94, 190, 67, 100, 72, 61, 43, 26, 12, 62, 2, 71, 115, 189, 162, 178, 141, 189, 142, 166, 49, 189, 78, 150, 47, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 112, 79, 62, 195, 69, 190, 188, 61, 173, 140, 62, 177, 194, 92, 61, 24, 172, 129, 61, 255, 196, 84, 190, 170, 229, 45, 61, 72, 8, 1, 62, 208, 69, 7, 187, 220, 54, 189, 59, 112, 40, 251, 61, 235, 119, 197, 61, 96, 209, 95, 62, 132, 167, 123, 62, 77, 191, 60, 62, 46, 53, 239, 61, 245, 64, 168, 189, 93, 100, 28, 189, 177, 180, 79, 62, 65, 159, 167, 60, 245, 29, 84, 62, 166, 18, 149, 188, 37, 21, 55, 190, 151, 42, 223, 189, 130, 59, 219, 61, 140, 153, 12, 190, 145, 24, 247, 189, 120, 2, 39, 62, 7, 177, 52, 190, 74, 229, 34, 190, 177, 219, 87, 61, 52, 99, 31, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 122, 131, 59, 186, 160, 173, 62, 134, 46, 129, 190, 69, 110, 32, 189, 198, 249, 33, 62, 211, 197, 241, 61, 229, 66, 174, 61, 164, 195, 63, 62, 205, 94, 159, 61, 169, 160, 145, 61, 71, 83, 67, 189, 194, 30, 162, 61, 6, 77, 86, 190, 238, 1, 236, 190, 145, 41, 7, 191, 108, 136, 15, 191, 215, 88, 8, 62, 94, 28, 25, 190, 141, 41, 92, 62, 225, 189, 65, 62, 56, 142, 72, 61, 137, 219, 214, 61, 53, 5, 34, 62, 166, 144, 36, 190, 154, 187, 141, 62, 173, 31, 35, 62, 57, 39, 181, 189, 151, 31, 124, 62, 174, 8, 208, 189, 106, 62, 43, 62, 36, 127, 109, 62, 77, 108, 177, 60, 157, 142, 142, 190, 114, 121, 57, 189, 184, 232, 169, 188, 242, 15, 16, 62, 50, 48, 161, 189, 119, 146, 46, 189, 164, 44, 143, 61, 71, 81, 172, 189, 110, 60, 89, 60, 128, 25, 69, 62, 85, 115, 135, 189, 66, 10, 114, 190, 212, 190, 244, 187, 11, 126, 128, 60, 14, 3, 52, 189, 67, 145, 168, 189, 120, 110, 184, 61, 153, 37, 10, 190, 235, 199, 43, 190, 49, 203, 241, 61, 149, 18, 136, 190, 214, 30, 247, 187, 67, 90, 24, 62, 61, 196, 200, 189, 10, 228, 108, 189, 80, 151, 149, 188, 7, 47, 165, 188, 240, 18, 2, 189, 22, 216, 50, 190, 55, 122, 61, 62, 117, 43, 214, 61, 242, 202, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 191, 197, 189, 7, 7, 97, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {199, 205, 52, 191, 186, 220, 204, 191, 196, 197, 248, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 91, 82, 64, 215, 201, 79, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}