// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 26, 33, 191, 21, 91, 57, 191, 90, 232, 231, 190, 136, 65, 226, 190, 122, 120, 103, 62, 203, 52, 214, 62, 101, 172, 24, 62, 124, 218, 122, 63, 190, 245, 109, 190, 90, 129, 35, 191, 204, 48, 138, 62, 78, 20, 246, 190, 118, 43, 107, 190, 235, 153, 141, 62, 61, 47, 78, 188, 68, 15, 49, 191, 12, 130, 141, 191, 61, 0, 206, 189, 98, 130, 242, 62, 195, 70, 82, 63, 122, 82, 170, 62, 163, 216, 190, 190, 6, 117, 127, 62, 254, 242, 6, 191, 23, 11, 80, 188, 73, 173, 8, 62, 62, 246, 61, 63, 201, 9, 33, 63, 101, 181, 154, 60, 132, 66, 133, 189, 203, 220, 72, 63, 35, 220, 22, 63, 66, 103, 123, 62, 210, 13, 238, 190, 55, 193, 210, 63, 114, 6, 138, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 213, 48, 224, 190, 8, 142, 54, 191, 14, 83, 159, 62, 96, 181, 26, 63, 7, 34, 131, 190, 191, 6, 160, 190, 10, 19, 194, 190, 41, 127, 189, 191, 226, 30, 146, 190, 84, 245, 56, 63, 123, 228, 6, 191, 152, 178, 96, 190, 212, 150, 10, 191, 109, 191, 54, 191, 84, 168, 49, 63, 204, 206, 52, 62, 7, 249, 72, 191, 66, 168, 172, 62, 16, 102, 177, 189, 140, 31, 216, 62, 241, 83, 194, 62, 25, 116, 232, 62, 130, 250, 167, 191, 36, 133, 92, 190, 72, 250, 134, 190, 149, 181, 172, 63, 209, 234, 251, 62, 212, 70, 11, 191, 54, 82, 194, 190, 161, 56, 150, 189, 245, 97, 66, 62, 2, 254, 147, 191, 50, 50, 90, 190, 47, 54, 55, 63, 37, 178, 76, 61, 231, 109, 14, 191, 183, 249, 117, 62, 222, 33, 137, 191, 172, 51, 115, 62, 43, 214, 229, 190, 79, 214, 150, 191, 52, 201, 78, 190, 107, 234, 25, 62, 34, 236, 24, 63, 207, 24, 121, 190, 69, 47, 195, 190, 75, 72, 230, 61, 195, 90, 108, 62, 177, 223, 42, 63, 76, 119, 145, 191, 147, 115, 202, 190, 75, 159, 175, 190, 101, 202, 181, 191, 44, 194, 250, 190, 6, 82, 27, 63, 120, 156, 134, 63, 41, 254, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 56, 103, 191, 58, 27, 147, 190, 16, 42, 241, 60, 103, 137, 9, 191, 107, 25, 237, 62, 252, 135, 89, 190, 164, 61, 211, 190, 53, 166, 225, 190, 199, 128, 16, 190, 213, 223, 86, 190, 24, 66, 11, 191, 218, 125, 144, 190, 178, 53, 252, 190, 229, 244, 155, 61, 12, 37, 123, 191, 172, 8, 48, 190, 83, 193, 21, 191, 80, 118, 169, 190, 132, 8, 21, 62, 219, 68, 252, 62, 218, 207, 206, 62, 72, 254, 157, 190, 198, 100, 89, 63, 161, 9, 36, 62, 110, 25, 178, 62, 137, 46, 130, 62, 149, 77, 75, 190, 114, 161, 12, 189, 2, 241, 233, 62, 87, 223, 220, 190, 101, 110, 250, 189, 29, 247, 199, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 119, 24, 189, 254, 241, 31, 190, 155, 191, 41, 62, 45, 53, 49, 62, 245, 149, 192, 62, 118, 111, 157, 190, 103, 111, 5, 190, 41, 102, 85, 62, 143, 208, 183, 189, 166, 199, 82, 62, 121, 83, 21, 191, 78, 232, 64, 62, 29, 182, 225, 61, 56, 219, 49, 62, 22, 126, 61, 61, 90, 125, 238, 190, 119, 96, 33, 190, 129, 242, 35, 62, 126, 71, 152, 59, 115, 79, 57, 62, 69, 215, 78, 61, 171, 191, 66, 61, 68, 32, 53, 62, 67, 163, 246, 61, 34, 124, 205, 62, 179, 117, 91, 59, 41, 8, 219, 190, 96, 142, 150, 62, 152, 222, 85, 62, 213, 54, 153, 190, 50, 131, 48, 190, 138, 124, 167, 61, 118, 78, 14, 191, 17, 223, 84, 61, 198, 160, 158, 190, 118, 41, 235, 62, 243, 149, 164, 60, 139, 148, 133, 61, 161, 43, 241, 190, 253, 232, 7, 191, 111, 192, 159, 190, 156, 120, 187, 62, 205, 172, 86, 191, 215, 42, 0, 190, 242, 196, 31, 62, 182, 54, 218, 61, 238, 170, 41, 190, 182, 244, 232, 190, 94, 249, 178, 190, 87, 45, 73, 62, 23, 137, 28, 189, 172, 45, 212, 61, 123, 41, 128, 62, 229, 17, 139, 190, 222, 77, 237, 61, 237, 253, 102, 189, 36, 73, 205, 61, 10, 40, 189, 62, 117, 50, 145, 190, 164, 227, 27, 186, 139, 223, 221, 61, 23, 182, 240, 189, 75, 253, 114, 191, 42, 216, 70, 190, 122, 166, 30, 61, 42, 66, 181, 190, 107, 48, 28, 62, 77, 67, 182, 188, 104, 43, 191, 189, 39, 79, 190, 190, 95, 84, 62, 62, 121, 134, 167, 62, 121, 206, 139, 62, 17, 15, 175, 62, 60, 145, 243, 62, 89, 208, 246, 190, 148, 58, 49, 190, 52, 197, 215, 189, 242, 193, 118, 62, 148, 221, 136, 190, 79, 22, 171, 61, 172, 200, 27, 61, 62, 246, 141, 62, 83, 108, 28, 62, 67, 201, 86, 190, 102, 92, 113, 190, 113, 36, 186, 190, 44, 87, 153, 62, 233, 203, 13, 189, 138, 202, 128, 60, 54, 88, 67, 62, 93, 61, 2, 189, 17, 241, 178, 189, 74, 235, 167, 62, 110, 247, 4, 62, 204, 79, 172, 62, 29, 254, 214, 189, 81, 191, 196, 189, 11, 188, 1, 191, 188, 56, 189, 62, 19, 49, 149, 189, 13, 206, 9, 60, 247, 246, 86, 62, 30, 172, 108, 62, 28, 146, 15, 190, 140, 157, 27, 62, 240, 99, 37, 63, 155, 129, 246, 190, 4, 165, 148, 61, 87, 54, 47, 62, 209, 160, 11, 61, 231, 241, 54, 190, 36, 160, 65, 189, 58, 164, 20, 62, 117, 82, 109, 62, 95, 120, 2, 62, 109, 96, 155, 190, 224, 113, 29, 190, 212, 174, 251, 188, 251, 172, 47, 191, 45, 202, 182, 190, 233, 159, 123, 62, 247, 153, 184, 189, 159, 133, 238, 190, 98, 53, 31, 62, 53, 36, 152, 62, 3, 161, 218, 189, 79, 173, 153, 187, 21, 179, 204, 190, 3, 171, 230, 61, 252, 83, 140, 189, 68, 218, 181, 62, 248, 197, 156, 189, 178, 158, 5, 190, 199, 64, 150, 190, 200, 36, 159, 60, 161, 98, 153, 190, 229, 14, 130, 62, 189, 144, 145, 191, 35, 191, 210, 61, 54, 218, 245, 61, 239, 160, 178, 61, 88, 41, 48, 62, 87, 106, 178, 191, 27, 170, 47, 62, 181, 63, 43, 62, 67, 82, 124, 59, 20, 94, 193, 61, 154, 23, 132, 62, 238, 215, 58, 189, 6, 226, 95, 62, 193, 129, 156, 189, 19, 239, 249, 60, 219, 100, 88, 62, 247, 126, 99, 191, 222, 210, 16, 189, 202, 71, 53, 61, 223, 45, 129, 62, 166, 172, 14, 191, 52, 229, 150, 190, 58, 146, 236, 189, 21, 94, 245, 189, 249, 137, 239, 61, 66, 165, 55, 61, 150, 51, 20, 61, 71, 181, 57, 190, 23, 139, 77, 61, 205, 50, 212, 61, 210, 119, 192, 61, 130, 49, 166, 190, 111, 200, 199, 61, 242, 78, 8, 191, 34, 41, 4, 62, 31, 240, 207, 189, 107, 66, 254, 60, 153, 151, 8, 191, 231, 55, 0, 191, 23, 245, 203, 61, 123, 252, 6, 189, 60, 139, 197, 190, 49, 8, 207, 190, 159, 27, 24, 190, 30, 219, 57, 190, 98, 31, 92, 190, 123, 120, 121, 62, 93, 125, 75, 190, 52, 96, 29, 190, 85, 165, 135, 62, 21, 239, 38, 190, 110, 10, 207, 190, 94, 191, 74, 189, 218, 239, 255, 189, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 7, 4, 160, 190, 137, 194, 194, 60, 186, 9, 176, 190, 74, 132, 167, 190, 77, 202, 159, 188, 205, 73, 187, 187, 35, 53, 179, 189, 219, 242, 43, 190, 167, 195, 102, 190, 251, 67, 24, 190, 160, 54, 39, 191, 186, 239, 221, 62, 134, 195, 202, 189, 244, 57, 102, 61, 106, 18, 98, 189, 159, 107, 165, 189, 44, 69, 188, 60, 95, 92, 102, 61, 50, 12, 252, 188, 1, 230, 178, 61, 54, 188, 139, 62, 21, 111, 5, 62, 27, 144, 121, 62, 121, 179, 127, 62, 157, 201, 143, 62, 213, 177, 91, 61, 6, 225, 23, 61, 233, 195, 83, 188, 18, 52, 138, 61, 10, 28, 45, 189, 164, 181, 195, 61, 99, 109, 238, 189, 14, 110, 162, 188, 193, 228, 8, 62, 230, 85, 148, 189, 132, 153, 127, 61, 144, 102, 38, 190, 66, 212, 161, 189, 211, 245, 32, 190, 134, 165, 51, 190, 186, 154, 233, 61, 151, 1, 11, 190, 128, 232, 26, 61, 140, 5, 89, 61, 147, 26, 46, 61, 71, 103, 35, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 117, 111, 5, 61, 24, 251, 254, 189, 21, 84, 4, 189, 228, 50, 171, 189, 218, 124, 28, 189, 86, 94, 223, 61, 162, 231, 32, 62, 54, 169, 203, 189, 38, 128, 210, 60, 51, 57, 91, 61, 185, 92, 100, 60, 80, 100, 24, 189, 110, 137, 52, 190, 98, 91, 22, 189, 88, 149, 212, 189, 170, 179, 154, 61, 10, 87, 93, 62, 208, 160, 239, 62, 207, 58, 25, 62, 27, 95, 125, 62, 36, 141, 209, 190, 24, 130, 4, 191, 122, 126, 144, 62, 246, 72, 23, 61, 181, 43, 163, 190, 172, 118, 25, 190, 31, 215, 40, 190, 9, 1, 207, 188, 121, 127, 125, 190, 222, 65, 239, 60, 79, 59, 251, 190, 22, 168, 153, 61, 189, 186, 169, 190, 208, 112, 153, 189, 73, 198, 168, 190, 63, 211, 62, 190, 130, 170, 224, 188, 213, 225, 158, 62, 86, 91, 201, 61, 148, 196, 134, 61, 135, 254, 198, 187, 16, 178, 47, 190, 75, 192, 153, 62, 186, 46, 117, 62, 192, 129, 204, 189, 109, 12, 235, 60, 213, 21, 44, 191, 88, 240, 88, 62, 118, 176, 238, 189, 241, 65, 212, 61, 83, 5, 37, 190, 44, 5, 45, 189, 87, 245, 54, 62, 81, 225, 220, 59, 20, 213, 195, 61, 158, 216, 62, 61, 70, 248, 126, 62, 49, 134, 82, 62, 22, 19, 253, 189, 11, 41, 167, 189, 136, 152, 139, 189, 79, 228, 95, 190, 86, 21, 106, 62, 105, 101, 144, 190, 122, 86, 228, 60, 14, 251, 167, 61, 147, 238, 32, 189, 147, 14, 144, 60, 75, 194, 137, 189, 33, 31, 32, 190, 192, 5, 83, 190, 56, 216, 247, 60, 123, 55, 21, 62, 198, 122, 135, 62, 3, 215, 191, 189, 30, 126, 245, 187, 100, 203, 93, 190, 129, 30, 70, 62, 194, 43, 152, 62, 98, 99, 140, 190, 228, 92, 104, 60, 51, 197, 112, 190, 94, 93, 29, 190, 178, 153, 76, 189, 132, 119, 162, 61, 94, 124, 190, 190, 129, 139, 86, 190, 98, 156, 4, 191, 58, 173, 253, 59, 178, 188, 191, 189, 170, 105, 9, 190, 200, 200, 138, 61, 41, 158, 162, 61, 88, 74, 81, 190, 75, 230, 234, 190, 218, 193, 200, 190, 9, 24, 48, 190, 254, 155, 81, 190, 192, 11, 34, 60, 233, 47, 50, 62, 152, 92, 0, 189, 227, 165, 164, 62, 24, 154, 57, 190, 190, 118, 34, 189, 109, 138, 214, 189, 130, 105, 142, 188, 55, 152, 11, 190, 237, 28, 195, 62, 46, 168, 211, 190, 246, 225, 99, 190, 33, 152, 115, 61, 180, 86, 52, 191, 198, 157, 37, 188, 10, 182, 162, 62, 249, 30, 119, 62, 39, 82, 206, 59, 191, 117, 66, 190, 154, 167, 80, 62, 52, 112, 71, 62, 170, 212, 64, 62, 153, 238, 18, 62, 115, 248, 243, 62, 249, 78, 178, 189, 129, 86, 117, 61, 28, 212, 26, 62, 60, 226, 254, 190, 203, 97, 167, 190, 11, 100, 80, 190, 57, 185, 68, 62, 137, 17, 203, 62, 117, 105, 40, 62, 13, 78, 107, 188, 42, 120, 37, 62, 89, 241, 160, 189, 33, 89, 215, 190, 195, 128, 165, 189, 39, 120, 71, 62, 137, 11, 50, 61, 79, 64, 168, 62, 216, 207, 2, 62, 198, 11, 122, 190, 145, 60, 176, 190, 26, 243, 95, 62, 95, 122, 187, 59, 18, 164, 64, 191, 224, 215, 103, 62, 224, 140, 93, 190, 60, 108, 113, 61, 74, 6, 103, 62, 213, 93, 251, 61, 236, 148, 51, 62, 8, 152, 207, 62, 94, 159, 157, 62, 207, 252, 194, 62, 148, 252, 139, 190, 29, 65, 32, 190, 176, 31, 14, 189, 177, 48, 243, 190, 124, 32, 206, 62, 235, 209, 222, 190, 171, 83, 182, 190, 142, 141, 20, 62, 132, 82, 13, 62, 172, 165, 219, 189, 73, 166, 134, 190, 231, 140, 76, 62, 80, 193, 14, 190, 221, 89, 231, 188, 159, 125, 212, 190, 24, 53, 178, 62, 90, 184, 78, 190, 12, 106, 19, 62, 20, 72, 160, 190, 100, 94, 204, 62, 248, 20, 154, 62, 218, 60, 254, 189, 191, 60, 98, 191, 244, 62, 188, 62, 82, 77, 32, 190, 88, 234, 87, 62, 177, 248, 252, 62, 254, 156, 45, 61, 191, 184, 69, 62, 16, 180, 12, 63, 171, 235, 28, 62, 188, 89, 185, 62, 49, 253, 28, 191, 110, 198, 106, 61, 149, 199, 209, 188, 63, 176, 16, 191, 118, 63, 106, 189, 27, 41, 63, 191, 60, 94, 101, 190, 92, 227, 83, 190, 129, 234, 2, 62, 195, 77, 92, 190, 81, 203, 117, 191, 13, 188, 105, 62, 255, 0, 164, 190, 230, 192, 84, 188, 57, 240, 126, 191, 230, 103, 131, 62, 136, 219, 46, 189, 5, 148, 135, 188, 204, 196, 20, 191, 25, 241, 125, 61, 218, 220, 160, 61, 144, 214, 204, 61, 143, 227, 112, 191, 215, 129, 153, 62, 114, 219, 191, 190, 212, 14, 217, 61, 196, 134, 239, 61, 2, 56, 127, 62, 156, 126, 190, 62, 229, 54, 29, 190, 176, 78, 32, 62, 43, 37, 4, 61, 37, 191, 112, 191, 140, 36, 87, 60, 203, 245, 77, 62, 78, 22, 247, 190, 175, 193, 20, 61, 210, 229, 2, 191, 145, 18, 167, 60, 146, 171, 83, 62, 202, 133, 134, 190, 47, 15, 105, 190, 74, 69, 82, 191, 217, 90, 146, 62, 139, 80, 246, 190, 204, 99, 220, 189, 182, 27, 223, 190, 175, 65, 155, 62, 196, 153, 114, 186, 208, 126, 15, 190, 203, 177, 238, 190, 246, 24, 127, 62, 135, 194, 135, 62, 214, 148, 247, 189, 148, 222, 156, 188, 29, 78, 109, 190, 246, 131, 4, 189, 159, 146, 120, 189, 148, 52, 38, 190, 0, 164, 33, 61, 230, 40, 148, 190, 218, 109, 184, 188, 187, 217, 66, 191, 11, 97, 7, 191, 94, 72, 116, 62, 3, 60, 253, 61, 116, 181, 243, 187, 247, 169, 183, 189, 192, 44, 108, 62, 139, 21, 5, 63, 71, 88, 170, 61, 43, 219, 204, 61, 66, 24, 168, 189, 163, 38, 160, 62, 5, 124, 37, 62, 145, 130, 240, 62, 132, 9, 200, 62, 119, 163, 210, 61, 69, 230, 65, 190, 66, 145, 16, 190, 197, 202, 166, 190, 180, 212, 221, 189, 193, 208, 96, 62, 91, 161, 73, 191, 218, 94, 142, 189, 162, 48, 157, 189, 31, 150, 168, 189, 160, 95, 125, 189, 144, 62, 7, 190, 32, 75, 24, 190, 44, 194, 7, 190, 59, 8, 9, 62, 6, 18, 39, 61, 102, 190, 206, 61, 42, 163, 50, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 218, 79, 0, 190, 164, 67, 234, 61, 97, 59, 125, 59, 25, 115, 32, 190, 42, 7, 7, 190, 43, 113, 221, 189, 112, 120, 140, 60, 183, 6, 104, 59, 199, 128, 126, 189, 216, 42, 34, 189, 97, 211, 17, 190, 98, 212, 21, 189, 105, 56, 171, 61, 61, 228, 33, 61, 125, 69, 215, 61, 22, 83, 155, 61, 175, 192, 6, 189, 87, 182, 32, 190, 91, 179, 182, 190, 117, 108, 23, 62, 93, 114, 70, 190, 55, 46, 96, 190, 6, 51, 5, 190, 130, 131, 93, 62, 153, 66, 57, 189, 92, 83, 235, 190, 50, 166, 35, 190, 71, 36, 3, 190, 201, 120, 10, 191, 206, 167, 100, 62, 233, 62, 249, 189, 188, 15, 158, 61, 213, 135, 116, 61, 73, 41, 92, 62, 223, 226, 80, 62, 149, 125, 0, 62, 104, 42, 126, 190, 4, 177, 195, 61, 209, 230, 133, 62, 211, 85, 74, 62, 216, 212, 164, 61, 218, 180, 177, 61, 102, 141, 165, 62, 195, 82, 154, 61, 100, 175, 19, 62, 248, 100, 4, 190, 183, 84, 154, 61, 210, 142, 205, 60, 236, 143, 214, 189, 203, 17, 252, 187, 193, 246, 102, 61, 105, 43, 125, 190, 17, 75, 6, 189, 80, 207, 105, 190, 101, 62, 144, 61, 65, 251, 11, 190, 121, 248, 149, 62, 3, 13, 35, 62, 166, 173, 66, 61, 94, 251, 247, 190, 207, 2, 213, 62, 19, 204, 93, 190, 119, 100, 129, 61, 118, 137, 114, 191, 143, 173, 10, 189, 92, 78, 133, 190, 15, 123, 165, 61, 92, 156, 176, 190, 201, 108, 99, 190, 16, 231, 165, 189, 249, 231, 178, 190, 15, 207, 169, 189, 30, 224, 7, 62, 19, 186, 92, 190, 93, 98, 69, 190, 60, 149, 110, 190, 157, 43, 138, 190, 54, 166, 62, 189, 184, 155, 125, 62, 249, 84, 157, 187, 68, 62, 197, 61, 244, 250, 229, 61, 174, 76, 91, 189, 14, 85, 137, 187, 121, 2, 250, 189, 22, 162, 80, 190, 73, 15, 95, 62, 35, 166, 91, 61, 78, 96, 149, 190, 192, 232, 133, 61, 115, 8, 185, 61, 242, 203, 82, 188, 236, 73, 15, 191, 29, 31, 252, 189, 93, 190, 149, 60, 215, 142, 169, 189, 169, 196, 65, 190, 43, 86, 171, 189, 8, 236, 231, 190, 234, 218, 254, 189, 237, 217, 35, 61, 108, 188, 28, 62, 176, 199, 179, 62, 82, 202, 239, 189, 142, 84, 96, 62, 30, 31, 2, 60, 34, 241, 50, 62, 100, 218, 88, 62, 159, 53, 20, 190, 49, 48, 13, 190, 140, 233, 181, 60, 18, 136, 7, 190, 206, 233, 30, 190, 40, 43, 7, 62, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 39, 239, 10, 191, 41, 130, 185, 62, 182, 154, 13, 190, 230, 7, 191, 189, 204, 199, 1, 62, 68, 172, 238, 61, 70, 254, 250, 190, 190, 207, 19, 191, 201, 76, 190, 190, 0, 79, 46, 61, 123, 37, 52, 191, 70, 71, 23, 62, 43, 152, 45, 61, 224, 210, 151, 62, 129, 146, 114, 62, 33, 162, 211, 189, 110, 130, 219, 62, 245, 11, 189, 187, 1, 250, 124, 189, 23, 148, 190, 61, 3, 101, 95, 62, 97, 13, 230, 61, 241, 127, 183, 62, 178, 40, 45, 62, 218, 165, 71, 62, 149, 175, 2, 62, 238, 216, 138, 190, 126, 23, 138, 190, 73, 13, 35, 188, 180, 228, 184, 62, 222, 94, 209, 189, 188, 124, 211, 189, 62, 84, 146, 188, 198, 190, 64, 189, 65, 79, 37, 187, 219, 206, 233, 189, 1, 147, 79, 61, 213, 190, 244, 60, 62, 121, 169, 61, 218, 38, 182, 189, 13, 77, 1, 190, 216, 102, 15, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 108, 229, 90, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 248, 224, 36, 190, 242, 6, 248, 189, 59, 62, 72, 189, 43, 24, 240, 188, 192, 199, 90, 61, 36, 54, 248, 189, 6, 131, 12, 190, 61, 143, 142, 188, 196, 71, 60, 189, 37, 202, 132, 189, 157, 84, 128, 61, 29, 145, 4, 189, 195, 125, 189, 190, 141, 74, 0, 62, 184, 63, 44, 188, 95, 58, 7, 189, 130, 25, 72, 61, 103, 53, 74, 62, 213, 6, 249, 190, 205, 201, 225, 190, 132, 101, 215, 190, 177, 253, 44, 190, 234, 16, 127, 191, 216, 168, 97, 190, 76, 131, 57, 189, 216, 177, 7, 63, 156, 52, 40, 188, 23, 179, 199, 189, 184, 226, 68, 189, 119, 62, 126, 62, 24, 62, 53, 190, 78, 246, 25, 190, 239, 45, 200, 62, 176, 66, 93, 190, 204, 72, 128, 62, 186, 106, 108, 62, 64, 185, 203, 61, 89, 180, 154, 62, 196, 223, 121, 190, 133, 226, 216, 188, 255, 53, 205, 189, 44, 10, 55, 62, 164, 61, 178, 189, 139, 25, 9, 189, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 85, 172, 142, 190, 191, 187, 82, 62, 192, 8, 231, 190, 100, 237, 190, 62, 38, 188, 230, 61, 70, 234, 190, 190, 199, 200, 0, 191, 226, 135, 232, 190, 241, 233, 164, 190, 226, 18, 145, 189, 115, 82, 147, 191, 139, 197, 88, 62, 90, 251, 27, 189, 26, 166, 155, 62, 115, 68, 27, 191, 26, 193, 63, 191, 96, 34, 163, 190, 67, 70, 37, 62, 212, 250, 133, 190, 179, 32, 62, 62, 36, 239, 174, 62, 214, 123, 39, 60, 144, 170, 125, 61, 43, 86, 58, 61, 19, 78, 5, 189, 181, 186, 31, 62, 135, 64, 41, 191, 173, 190, 143, 190, 249, 244, 250, 61, 61, 63, 156, 61, 244, 173, 242, 190, 89, 243, 179, 190, 75, 248, 159, 190, 87, 188, 23, 62, 25, 77, 165, 62, 253, 60, 253, 61, 198, 110, 150, 61, 34, 173, 202, 190, 153, 170, 26, 191, 58, 132, 20, 62, 149, 51, 120, 189, 214, 95, 220, 59, 34, 192, 121, 191, 189, 239, 147, 62, 71, 62, 83, 189, 38, 228, 40, 62, 25, 85, 205, 190, 5, 198, 137, 190, 229, 155, 219, 190, 154, 9, 207, 61, 170, 43, 55, 190, 238, 231, 34, 61, 162, 225, 239, 190, 27, 96, 105, 189, 62, 225, 16, 62, 22, 9, 60, 189, 149, 17, 171, 61, 154, 109, 169, 190, 23, 16, 181, 190, 149, 108, 107, 62, 48, 136, 27, 61, 130, 235, 32, 191, 42, 160, 195, 190, 88, 3, 64, 62, 79, 244, 37, 191, 17, 104, 105, 62, 9, 197, 244, 190, 234, 249, 218, 189, 216, 200, 21, 62, 81, 130, 125, 188, 147, 65, 12, 189, 5, 121, 219, 190, 123, 223, 200, 189, 249, 145, 144, 190, 236, 34, 10, 191, 236, 51, 184, 62, 209, 71, 34, 61, 53, 134, 31, 62, 171, 42, 194, 189, 190, 219, 149, 191, 197, 23, 151, 189, 179, 9, 235, 61, 175, 162, 223, 190, 164, 145, 59, 62, 27, 27, 2, 190, 70, 45, 11, 189, 150, 251, 162, 62, 219, 204, 165, 189, 18, 240, 93, 190, 81, 181, 84, 190, 61, 113, 246, 190, 176, 143, 151, 189, 18, 246, 149, 62, 227, 217, 192, 189, 44, 163, 132, 191, 198, 169, 160, 190, 132, 100, 34, 190, 105, 46, 181, 62, 128, 152, 67, 190, 129, 122, 132, 190, 245, 229, 18, 62, 187, 40, 140, 189, 113, 153, 152, 189, 95, 21, 155, 190, 119, 189, 245, 61, 254, 74, 48, 62, 136, 223, 80, 191, 46, 217, 95, 62, 149, 152, 48, 62, 120, 198, 39, 186, 40, 169, 155, 62, 117, 67, 62, 190, 20, 46, 174, 61, 202, 22, 35, 62, 122, 229, 234, 190, 82, 135, 197, 188, 82, 167, 114, 188, 6, 244, 72, 62, 212, 236, 14, 62, 108, 14, 188, 61, 221, 142, 134, 62, 216, 163, 35, 190, 47, 42, 247, 190, 127, 81, 111, 60, 221, 215, 19, 190, 71, 51, 220, 62, 111, 227, 227, 189, 108, 5, 133, 190, 139, 7, 232, 186, 101, 75, 127, 191, 67, 18, 64, 190, 167, 142, 138, 61, 123, 234, 96, 62, 111, 158, 197, 62, 155, 239, 1, 62, 57, 7, 59, 190, 149, 172, 169, 190, 171, 39, 77, 191, 89, 23, 5, 190, 218, 77, 224, 189, 244, 149, 44, 62, 23, 199, 50, 188, 250, 122, 94, 189, 21, 8, 229, 61, 139, 50, 77, 189, 71, 61, 186, 190, 66, 230, 67, 61, 154, 198, 142, 61, 69, 113, 225, 189, 40, 165, 110, 190, 230, 59, 173, 62, 10, 159, 24, 62, 121, 217, 184, 59, 144, 154, 179, 189, 44, 168, 96, 62, 161, 15, 84, 61, 53, 161, 73, 62, 95, 52, 103, 188, 181, 62, 108, 61, 75, 45, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 106, 201, 62, 95, 119, 12, 60, 192, 179, 11, 61, 126, 72, 2, 62, 230, 158, 38, 62, 77, 2, 101, 190, 170, 229, 45, 61, 86, 90, 131, 62, 52, 149, 231, 187, 24, 201, 13, 62, 160, 200, 10, 62, 180, 4, 240, 61, 118, 141, 150, 62, 92, 224, 157, 62, 197, 115, 152, 62, 236, 216, 241, 61, 41, 189, 157, 189, 64, 89, 132, 189, 95, 252, 152, 62, 212, 122, 12, 61, 239, 169, 189, 62, 166, 18, 149, 188, 76, 21, 161, 189, 92, 4, 253, 189, 88, 191, 72, 62, 140, 153, 12, 190, 145, 24, 247, 189, 14, 215, 105, 62, 54, 169, 194, 188, 204, 172, 37, 58, 70, 78, 203, 60, 158, 74, 26, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 246, 61, 62, 146, 210, 86, 63, 114, 181, 195, 190, 205, 43, 146, 190, 141, 163, 80, 63, 158, 252, 135, 189, 229, 66, 174, 61, 181, 122, 161, 62, 255, 209, 158, 61, 201, 241, 75, 63, 182, 31, 90, 189, 132, 223, 5, 62, 24, 79, 131, 190, 139, 38, 54, 191, 203, 99, 161, 191, 98, 91, 113, 191, 230, 59, 130, 62, 65, 146, 243, 189, 103, 115, 135, 62, 159, 212, 144, 62, 78, 154, 121, 58, 137, 219, 214, 61, 204, 82, 176, 62, 178, 202, 35, 190, 1, 55, 17, 63, 173, 31, 35, 62, 57, 39, 181, 189, 254, 54, 131, 63, 189, 157, 78, 191, 185, 229, 102, 63, 230, 105, 9, 63, 111, 6, 30, 190, 255, 107, 250, 190, 27, 62, 223, 189, 152, 62, 255, 58, 182, 227, 26, 62, 27, 136, 7, 189, 81, 220, 211, 190, 164, 44, 143, 61, 107, 251, 78, 190, 246, 150, 94, 60, 14, 74, 62, 62, 110, 246, 172, 189, 214, 167, 252, 190, 74, 233, 155, 189, 124, 32, 135, 61, 5, 123, 156, 62, 112, 11, 131, 60, 54, 36, 121, 62, 21, 212, 11, 190, 232, 116, 197, 190, 75, 28, 160, 61, 76, 97, 233, 190, 214, 30, 247, 187, 172, 36, 201, 62, 60, 228, 200, 189, 115, 154, 105, 189, 80, 151, 149, 188, 7, 47, 165, 188, 120, 8, 156, 62, 233, 124, 80, 61, 67, 237, 228, 62, 245, 232, 118, 62, 252, 74, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 141, 74, 189, 200, 192, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 213, 174, 190, 221, 215, 54, 190, 106, 217, 103, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 157, 132, 63, 95, 249, 203, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}