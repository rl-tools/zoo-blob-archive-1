// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 128, 43, 191, 5, 172, 54, 191, 113, 119, 222, 190, 22, 71, 82, 191, 240, 193, 75, 62, 48, 196, 199, 62, 225, 229, 39, 62, 91, 138, 128, 63, 137, 47, 93, 190, 203, 87, 34, 191, 88, 203, 139, 62, 188, 50, 248, 190, 64, 19, 218, 190, 154, 215, 160, 62, 159, 222, 240, 188, 167, 118, 66, 191, 12, 156, 134, 191, 191, 237, 157, 189, 19, 240, 239, 62, 237, 69, 96, 63, 221, 210, 177, 62, 7, 214, 174, 190, 240, 135, 155, 62, 208, 152, 11, 191, 40, 123, 131, 190, 159, 114, 122, 62, 120, 169, 55, 63, 44, 91, 17, 63, 183, 83, 76, 188, 76, 47, 7, 187, 190, 174, 76, 63, 14, 59, 31, 63, 182, 212, 128, 62, 251, 242, 33, 191, 75, 32, 206, 63, 148, 125, 144, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 186, 131, 164, 190, 100, 103, 90, 191, 108, 75, 143, 62, 5, 188, 56, 63, 27, 158, 145, 190, 188, 221, 150, 190, 108, 32, 68, 190, 194, 230, 186, 191, 96, 125, 143, 190, 202, 71, 56, 63, 193, 177, 32, 191, 240, 32, 131, 190, 89, 66, 209, 190, 130, 200, 61, 191, 72, 220, 46, 63, 161, 229, 71, 62, 168, 148, 88, 191, 33, 22, 167, 62, 53, 55, 56, 190, 102, 213, 197, 62, 227, 139, 178, 62, 44, 184, 212, 62, 215, 44, 174, 191, 100, 67, 119, 190, 161, 213, 32, 191, 141, 26, 175, 63, 186, 166, 219, 62, 111, 118, 32, 191, 130, 26, 177, 190, 202, 113, 209, 189, 254, 7, 26, 62, 85, 185, 154, 191, 196, 41, 93, 190, 161, 233, 45, 63, 144, 224, 46, 189, 251, 124, 2, 191, 153, 103, 130, 62, 34, 255, 136, 191, 61, 216, 56, 62, 220, 166, 227, 190, 38, 66, 145, 191, 156, 42, 63, 190, 64, 225, 206, 61, 148, 107, 18, 63, 76, 244, 164, 190, 145, 3, 216, 190, 201, 136, 67, 62, 235, 206, 81, 62, 155, 217, 52, 63, 13, 206, 155, 191, 208, 173, 189, 190, 97, 236, 247, 190, 152, 242, 172, 191, 60, 101, 228, 190, 215, 38, 27, 63, 168, 127, 132, 63, 196, 63, 163, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 163, 115, 191, 54, 244, 138, 190, 174, 46, 165, 61, 60, 194, 14, 191, 3, 57, 190, 62, 81, 191, 106, 190, 146, 89, 215, 190, 146, 12, 211, 190, 150, 16, 180, 190, 29, 214, 129, 190, 248, 212, 10, 191, 251, 89, 183, 190, 178, 53, 252, 190, 253, 113, 51, 62, 230, 160, 128, 191, 180, 218, 44, 190, 190, 154, 17, 191, 175, 94, 145, 190, 209, 240, 233, 61, 212, 172, 189, 62, 165, 170, 178, 62, 83, 255, 157, 190, 36, 10, 78, 63, 166, 78, 26, 62, 186, 54, 152, 62, 66, 147, 125, 62, 252, 171, 119, 190, 224, 169, 27, 189, 207, 73, 217, 62, 71, 24, 236, 190, 100, 51, 46, 190, 200, 119, 181, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 9, 78, 61, 208, 10, 60, 190, 120, 226, 127, 62, 224, 204, 105, 62, 69, 218, 200, 62, 19, 130, 103, 190, 193, 33, 131, 189, 181, 238, 138, 62, 29, 212, 201, 189, 47, 110, 60, 62, 181, 148, 1, 191, 251, 219, 73, 62, 29, 182, 225, 61, 15, 33, 49, 62, 114, 56, 8, 62, 58, 188, 204, 190, 157, 86, 158, 190, 91, 175, 9, 62, 199, 208, 155, 187, 130, 178, 63, 62, 65, 148, 164, 59, 25, 223, 9, 60, 215, 9, 17, 62, 48, 25, 68, 61, 14, 67, 190, 62, 233, 9, 114, 189, 86, 212, 164, 190, 135, 171, 180, 62, 79, 117, 90, 62, 93, 22, 191, 190, 127, 2, 208, 189, 147, 1, 188, 61, 118, 78, 14, 191, 157, 181, 43, 61, 58, 174, 176, 190, 53, 250, 247, 62, 162, 200, 27, 188, 107, 12, 57, 188, 169, 168, 7, 191, 232, 62, 2, 191, 200, 101, 165, 190, 208, 254, 161, 62, 150, 232, 101, 191, 13, 92, 240, 189, 242, 196, 31, 62, 93, 154, 249, 61, 107, 38, 33, 190, 74, 31, 19, 191, 166, 18, 218, 190, 153, 2, 54, 62, 24, 93, 169, 188, 154, 139, 145, 61, 221, 159, 113, 62, 158, 142, 217, 190, 55, 46, 155, 61, 7, 213, 29, 189, 221, 238, 1, 61, 108, 141, 183, 62, 179, 103, 169, 190, 92, 27, 15, 60, 227, 185, 179, 61, 246, 208, 218, 189, 108, 16, 122, 191, 58, 159, 122, 190, 218, 136, 153, 61, 11, 214, 188, 190, 76, 131, 82, 60, 99, 47, 190, 187, 132, 145, 253, 189, 19, 52, 210, 190, 110, 181, 191, 61, 140, 9, 167, 62, 30, 243, 136, 62, 181, 107, 171, 62, 62, 27, 221, 62, 187, 143, 9, 191, 148, 58, 49, 190, 173, 95, 20, 190, 179, 11, 117, 62, 182, 173, 148, 190, 251, 99, 134, 62, 235, 170, 24, 61, 10, 245, 146, 62, 150, 52, 11, 62, 66, 32, 48, 190, 172, 247, 55, 190, 231, 144, 174, 190, 108, 109, 192, 62, 157, 102, 247, 188, 159, 18, 127, 61, 105, 252, 33, 62, 63, 210, 204, 189, 178, 152, 217, 189, 137, 41, 226, 62, 14, 141, 254, 61, 148, 45, 161, 62, 252, 200, 219, 189, 37, 104, 223, 189, 135, 68, 175, 190, 203, 131, 176, 62, 140, 109, 175, 189, 39, 120, 130, 60, 171, 203, 92, 62, 97, 124, 79, 62, 59, 23, 14, 190, 21, 9, 198, 61, 240, 204, 39, 63, 32, 112, 8, 191, 4, 165, 148, 61, 123, 30, 46, 62, 209, 160, 11, 61, 6, 57, 34, 190, 78, 18, 226, 190, 131, 41, 25, 62, 39, 81, 85, 62, 73, 221, 0, 62, 191, 17, 202, 190, 171, 187, 207, 189, 112, 171, 93, 189, 173, 126, 79, 191, 116, 255, 90, 191, 102, 122, 104, 62, 118, 110, 158, 189, 178, 132, 187, 190, 72, 76, 34, 62, 54, 145, 64, 190, 150, 33, 19, 190, 251, 45, 49, 189, 195, 22, 22, 191, 254, 218, 243, 61, 39, 161, 104, 61, 89, 165, 150, 62, 115, 93, 182, 189, 37, 26, 55, 190, 67, 214, 164, 190, 33, 5, 94, 188, 173, 88, 156, 190, 146, 37, 155, 62, 130, 74, 147, 191, 31, 82, 64, 62, 54, 218, 245, 61, 213, 193, 212, 61, 128, 220, 127, 62, 215, 2, 247, 191, 80, 205, 133, 62, 232, 5, 30, 62, 209, 87, 126, 188, 243, 118, 171, 61, 7, 48, 146, 62, 35, 169, 0, 190, 230, 73, 73, 62, 25, 254, 24, 189, 122, 215, 136, 61, 254, 221, 46, 62, 228, 127, 148, 191, 114, 177, 68, 61, 203, 24, 243, 60, 234, 229, 180, 62, 167, 2, 56, 191, 69, 152, 140, 190, 130, 235, 192, 188, 21, 94, 245, 189, 13, 82, 98, 61, 182, 8, 148, 61, 37, 158, 182, 188, 10, 162, 27, 190, 134, 170, 252, 60, 177, 205, 204, 61, 210, 119, 192, 61, 177, 106, 241, 190, 18, 114, 107, 61, 186, 94, 61, 191, 34, 41, 4, 62, 31, 240, 207, 189, 11, 233, 106, 61, 216, 190, 242, 190, 102, 206, 20, 191, 23, 245, 203, 61, 123, 252, 6, 189, 173, 248, 235, 190, 243, 93, 206, 190, 26, 123, 178, 190, 211, 168, 66, 190, 251, 37, 39, 190, 33, 79, 79, 62, 93, 125, 75, 190, 248, 219, 165, 189, 32, 106, 99, 62, 211, 5, 87, 190, 48, 63, 186, 190, 138, 23, 173, 60, 89, 101, 203, 190, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 29, 110, 169, 190, 79, 51, 248, 60, 118, 20, 80, 190, 184, 110, 141, 190, 147, 52, 146, 60, 136, 252, 109, 61, 112, 82, 143, 60, 113, 149, 231, 189, 48, 35, 96, 190, 97, 114, 51, 190, 224, 71, 22, 191, 144, 157, 246, 62, 134, 195, 202, 189, 73, 153, 158, 61, 116, 251, 240, 189, 145, 57, 137, 188, 131, 4, 21, 190, 154, 74, 74, 61, 120, 32, 10, 189, 151, 24, 196, 61, 84, 10, 116, 62, 187, 207, 220, 61, 150, 9, 106, 62, 35, 24, 84, 62, 1, 153, 130, 62, 159, 16, 55, 60, 255, 199, 218, 61, 221, 231, 158, 61, 205, 132, 150, 61, 39, 101, 237, 189, 237, 120, 26, 62, 95, 66, 233, 189, 14, 110, 162, 188, 196, 97, 6, 62, 230, 85, 148, 189, 132, 153, 127, 61, 21, 241, 39, 190, 214, 138, 162, 189, 119, 248, 32, 190, 134, 165, 51, 190, 76, 101, 227, 61, 151, 1, 11, 190, 128, 232, 26, 61, 23, 133, 80, 61, 147, 26, 46, 61, 44, 123, 37, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 126, 125, 241, 60, 153, 140, 0, 190, 11, 229, 15, 189, 228, 50, 171, 189, 12, 209, 38, 189, 1, 141, 218, 61, 162, 231, 32, 62, 54, 169, 203, 189, 73, 26, 205, 60, 51, 57, 91, 61, 185, 92, 100, 60, 253, 97, 35, 189, 110, 137, 52, 190, 98, 91, 22, 189, 49, 202, 214, 189, 130, 43, 150, 61, 139, 176, 45, 63, 220, 196, 239, 62, 130, 74, 36, 62, 224, 154, 139, 62, 113, 35, 170, 190, 244, 139, 110, 191, 5, 133, 157, 62, 199, 232, 57, 62, 26, 113, 136, 190, 224, 17, 153, 190, 131, 11, 13, 190, 9, 1, 207, 188, 79, 12, 141, 190, 109, 0, 153, 61, 249, 173, 237, 190, 92, 52, 191, 61, 104, 32, 191, 190, 106, 5, 32, 190, 233, 211, 154, 190, 176, 76, 47, 190, 6, 13, 206, 59, 215, 29, 174, 62, 0, 244, 238, 61, 28, 62, 122, 61, 20, 24, 211, 190, 105, 115, 3, 190, 59, 97, 147, 62, 149, 244, 155, 62, 0, 43, 144, 189, 45, 144, 232, 60, 22, 234, 61, 191, 149, 38, 115, 62, 176, 80, 33, 190, 134, 28, 212, 60, 115, 133, 13, 190, 196, 87, 206, 189, 127, 59, 16, 62, 88, 137, 218, 189, 50, 36, 220, 61, 31, 54, 137, 60, 247, 98, 43, 62, 119, 193, 208, 61, 125, 6, 101, 190, 11, 41, 167, 189, 4, 126, 174, 189, 111, 209, 107, 190, 16, 241, 99, 62, 108, 143, 167, 190, 198, 114, 23, 187, 155, 175, 6, 61, 214, 70, 254, 189, 39, 234, 67, 189, 67, 106, 226, 189, 246, 138, 95, 190, 188, 116, 128, 190, 53, 52, 108, 189, 167, 250, 190, 61, 63, 87, 132, 62, 183, 19, 19, 190, 89, 241, 132, 189, 160, 12, 115, 190, 246, 29, 90, 62, 135, 98, 59, 62, 196, 250, 154, 190, 83, 172, 130, 188, 96, 228, 163, 189, 63, 61, 226, 189, 55, 70, 118, 61, 240, 123, 203, 61, 199, 108, 212, 61, 40, 95, 150, 190, 101, 64, 55, 191, 80, 198, 49, 60, 139, 187, 213, 61, 181, 128, 17, 190, 200, 200, 138, 61, 128, 17, 182, 60, 109, 65, 79, 190, 208, 207, 242, 190, 119, 242, 105, 191, 164, 194, 131, 190, 70, 53, 170, 190, 155, 119, 0, 62, 113, 216, 78, 61, 39, 249, 1, 189, 216, 120, 150, 62, 219, 187, 6, 191, 44, 183, 152, 189, 47, 162, 125, 190, 172, 13, 50, 188, 197, 154, 64, 189, 175, 46, 253, 62, 21, 86, 141, 191, 119, 43, 125, 190, 28, 104, 21, 62, 34, 210, 15, 191, 141, 55, 70, 189, 119, 13, 120, 62, 207, 94, 164, 62, 147, 77, 33, 60, 12, 231, 137, 190, 57, 149, 161, 61, 110, 21, 123, 62, 238, 208, 41, 62, 220, 2, 6, 62, 1, 21, 204, 62, 71, 65, 249, 189, 129, 86, 117, 61, 11, 146, 222, 61, 25, 20, 15, 191, 29, 136, 158, 190, 37, 35, 169, 188, 135, 222, 45, 62, 199, 220, 206, 62, 129, 103, 19, 62, 183, 231, 8, 61, 65, 185, 72, 62, 30, 111, 99, 188, 176, 140, 162, 190, 104, 252, 123, 189, 112, 60, 130, 62, 235, 221, 172, 60, 180, 85, 152, 62, 108, 21, 217, 61, 62, 160, 128, 189, 252, 66, 135, 190, 34, 202, 72, 62, 105, 107, 77, 189, 183, 69, 118, 191, 63, 94, 228, 61, 88, 105, 131, 190, 163, 71, 190, 60, 59, 101, 68, 61, 93, 186, 48, 188, 6, 3, 0, 62, 138, 195, 227, 62, 22, 7, 157, 62, 164, 210, 169, 62, 110, 158, 113, 190, 29, 65, 32, 190, 37, 78, 155, 189, 175, 223, 245, 190, 139, 228, 118, 62, 222, 224, 156, 190, 233, 33, 173, 190, 37, 38, 82, 62, 112, 88, 21, 62, 216, 68, 141, 189, 70, 223, 95, 190, 144, 237, 60, 62, 194, 247, 185, 189, 187, 41, 52, 189, 41, 130, 164, 190, 5, 198, 60, 62, 39, 49, 141, 190, 191, 111, 40, 62, 221, 153, 153, 190, 222, 136, 140, 62, 82, 147, 157, 62, 228, 31, 199, 189, 70, 154, 107, 191, 15, 189, 194, 62, 237, 222, 24, 190, 97, 174, 119, 62, 96, 101, 17, 63, 42, 39, 64, 62, 15, 51, 52, 62, 94, 113, 101, 63, 47, 33, 204, 61, 171, 212, 208, 62, 29, 48, 28, 191, 110, 198, 106, 61, 156, 52, 154, 61, 223, 27, 41, 191, 122, 51, 221, 188, 89, 64, 99, 191, 4, 241, 191, 190, 152, 11, 180, 190, 102, 107, 3, 62, 192, 200, 141, 190, 183, 225, 93, 191, 77, 19, 133, 62, 97, 56, 190, 190, 209, 252, 149, 188, 14, 153, 133, 191, 199, 62, 147, 62, 194, 35, 202, 188, 163, 107, 100, 61, 107, 220, 47, 191, 81, 109, 183, 61, 204, 170, 241, 61, 161, 69, 199, 61, 11, 103, 154, 191, 177, 107, 174, 62, 101, 137, 183, 190, 7, 146, 46, 62, 71, 222, 216, 61, 22, 167, 160, 62, 128, 237, 188, 62, 123, 211, 61, 190, 34, 110, 230, 61, 67, 5, 5, 61, 88, 194, 106, 191, 140, 36, 87, 60, 183, 65, 95, 62, 174, 96, 15, 191, 63, 54, 66, 60, 20, 161, 41, 191, 119, 232, 31, 190, 49, 95, 133, 61, 191, 178, 171, 190, 74, 137, 155, 190, 228, 8, 65, 191, 55, 197, 174, 62, 89, 28, 13, 191, 206, 195, 200, 189, 171, 87, 0, 191, 66, 101, 139, 62, 217, 12, 55, 61, 206, 166, 91, 189, 22, 72, 16, 191, 136, 182, 128, 62, 116, 103, 144, 62, 102, 217, 130, 190, 10, 134, 243, 60, 232, 13, 3, 191, 240, 224, 124, 190, 62, 113, 247, 189, 223, 107, 153, 189, 123, 98, 8, 61, 147, 178, 255, 190, 67, 161, 116, 187, 108, 180, 140, 191, 231, 57, 35, 191, 101, 119, 141, 62, 3, 60, 253, 61, 33, 61, 2, 61, 65, 179, 229, 190, 81, 198, 174, 62, 206, 137, 244, 62, 89, 61, 222, 61, 189, 33, 3, 62, 17, 156, 207, 189, 156, 220, 165, 62, 147, 251, 244, 61, 149, 129, 253, 62, 104, 195, 244, 62, 105, 34, 20, 61, 110, 88, 58, 190, 218, 184, 43, 189, 163, 68, 35, 191, 159, 79, 229, 189, 85, 145, 180, 62, 192, 149, 56, 191, 220, 31, 80, 190, 162, 48, 157, 189, 31, 150, 168, 189, 160, 95, 125, 189, 144, 62, 7, 190, 32, 75, 24, 190, 44, 194, 7, 190, 59, 8, 9, 62, 6, 18, 39, 61, 102, 190, 206, 61, 42, 163, 50, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 218, 79, 0, 190, 164, 67, 234, 61, 97, 59, 125, 59, 25, 115, 32, 190, 42, 7, 7, 190, 43, 113, 221, 189, 112, 120, 140, 60, 183, 6, 104, 59, 199, 128, 126, 189, 216, 42, 34, 189, 97, 211, 17, 190, 98, 212, 21, 189, 105, 56, 171, 61, 61, 228, 33, 61, 125, 69, 215, 61, 22, 83, 155, 61, 175, 192, 6, 189, 87, 182, 32, 190, 236, 210, 231, 190, 76, 150, 11, 62, 140, 37, 2, 190, 191, 24, 181, 190, 117, 32, 35, 190, 31, 164, 89, 62, 222, 123, 223, 60, 190, 211, 12, 191, 1, 191, 38, 190, 200, 235, 33, 190, 53, 15, 247, 190, 72, 23, 107, 62, 233, 62, 249, 189, 64, 56, 189, 61, 65, 199, 127, 59, 100, 232, 100, 62, 146, 141, 131, 61, 174, 81, 221, 61, 88, 162, 118, 190, 209, 142, 198, 61, 125, 168, 112, 62, 212, 143, 30, 62, 185, 56, 7, 61, 239, 120, 58, 61, 121, 147, 137, 62, 44, 185, 83, 61, 147, 172, 29, 62, 62, 147, 6, 190, 163, 162, 150, 61, 178, 95, 65, 189, 168, 239, 190, 189, 168, 37, 151, 188, 196, 178, 113, 61, 175, 146, 171, 190, 72, 124, 49, 189, 131, 114, 133, 190, 233, 126, 22, 61, 20, 192, 7, 190, 163, 238, 93, 62, 75, 104, 0, 62, 7, 117, 45, 189, 215, 142, 9, 191, 241, 199, 160, 62, 163, 208, 131, 190, 119, 100, 129, 61, 40, 153, 114, 191, 143, 173, 10, 189, 126, 241, 131, 190, 15, 123, 165, 61, 152, 192, 211, 190, 165, 91, 146, 190, 42, 12, 20, 190, 125, 156, 182, 190, 51, 218, 9, 190, 30, 7, 1, 62, 165, 100, 91, 190, 96, 77, 132, 190, 247, 178, 117, 190, 247, 40, 136, 190, 207, 191, 223, 188, 24, 148, 71, 62, 249, 84, 157, 187, 77, 59, 185, 61, 159, 42, 69, 61, 47, 140, 21, 190, 183, 177, 174, 189, 226, 138, 132, 190, 186, 254, 145, 190, 234, 150, 7, 62, 37, 132, 174, 189, 78, 188, 183, 190, 29, 39, 219, 60, 149, 18, 116, 61, 46, 231, 74, 189, 45, 183, 14, 191, 244, 237, 12, 190, 93, 190, 149, 60, 60, 107, 6, 190, 38, 43, 13, 189, 94, 56, 41, 190, 227, 23, 157, 190, 231, 116, 65, 190, 78, 157, 203, 61, 229, 0, 26, 62, 187, 93, 212, 62, 218, 42, 254, 189, 54, 97, 39, 62, 96, 113, 130, 61, 24, 48, 230, 61, 17, 51, 156, 62, 21, 1, 109, 190, 162, 237, 126, 190, 215, 60, 48, 60, 30, 115, 96, 189, 180, 60, 84, 190, 84, 110, 245, 61, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 70, 203, 38, 191, 77, 99, 188, 62, 84, 213, 199, 60, 6, 13, 88, 190, 151, 104, 151, 61, 186, 183, 32, 62, 229, 99, 13, 191, 162, 201, 46, 191, 25, 19, 194, 190, 205, 102, 30, 61, 17, 120, 63, 191, 107, 102, 108, 61, 43, 152, 45, 61, 237, 219, 172, 62, 154, 59, 7, 62, 63, 14, 129, 189, 76, 8, 207, 62, 184, 24, 177, 187, 209, 76, 152, 189, 69, 111, 103, 61, 160, 100, 84, 62, 91, 90, 121, 188, 119, 240, 173, 62, 64, 167, 43, 62, 106, 140, 71, 62, 100, 162, 195, 61, 48, 132, 114, 190, 8, 187, 19, 190, 86, 132, 30, 189, 17, 110, 204, 62, 92, 37, 178, 189, 73, 254, 16, 190, 62, 84, 146, 188, 198, 190, 64, 189, 65, 79, 37, 187, 219, 206, 233, 189, 1, 147, 79, 61, 213, 190, 244, 60, 62, 121, 169, 61, 218, 38, 182, 189, 13, 77, 1, 190, 216, 102, 15, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 108, 229, 90, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 248, 224, 36, 190, 242, 6, 248, 189, 59, 62, 72, 189, 43, 24, 240, 188, 192, 199, 90, 61, 36, 54, 248, 189, 6, 131, 12, 190, 61, 143, 142, 188, 196, 71, 60, 189, 37, 202, 132, 189, 157, 84, 128, 61, 29, 145, 4, 189, 71, 196, 229, 190, 134, 147, 230, 61, 231, 195, 159, 61, 45, 175, 58, 190, 32, 14, 81, 60, 175, 40, 125, 62, 154, 152, 6, 191, 4, 248, 18, 191, 207, 238, 225, 190, 19, 56, 72, 190, 242, 98, 132, 191, 190, 191, 105, 190, 76, 131, 57, 189, 68, 228, 13, 63, 255, 134, 95, 190, 134, 94, 15, 189, 25, 205, 253, 189, 28, 41, 100, 62, 89, 226, 70, 190, 142, 54, 68, 190, 77, 16, 195, 62, 77, 232, 198, 190, 75, 202, 106, 62, 214, 209, 118, 62, 58, 76, 143, 61, 1, 250, 134, 62, 242, 171, 51, 190, 1, 41, 99, 188, 30, 29, 20, 190, 25, 200, 69, 62, 190, 254, 17, 189, 227, 254, 155, 189, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 106, 167, 190, 190, 30, 111, 81, 62, 183, 110, 167, 190, 219, 6, 2, 63, 209, 104, 24, 62, 7, 42, 184, 190, 120, 108, 16, 191, 82, 239, 171, 190, 109, 6, 166, 190, 211, 16, 42, 190, 21, 202, 161, 191, 44, 5, 103, 62, 90, 251, 27, 189, 201, 48, 170, 62, 219, 156, 27, 191, 98, 1, 47, 191, 155, 147, 243, 190, 111, 110, 35, 62, 252, 7, 91, 190, 193, 180, 58, 62, 7, 184, 207, 62, 97, 131, 192, 189, 215, 171, 241, 61, 133, 134, 47, 62, 101, 76, 243, 189, 234, 41, 69, 62, 76, 166, 10, 191, 179, 78, 47, 190, 42, 242, 5, 62, 218, 127, 115, 62, 103, 161, 7, 191, 55, 106, 208, 190, 161, 196, 19, 190, 166, 79, 28, 62, 212, 152, 208, 62, 21, 166, 102, 62, 110, 155, 66, 62, 2, 67, 227, 190, 45, 22, 36, 191, 187, 42, 92, 62, 215, 113, 203, 189, 137, 22, 70, 61, 201, 194, 143, 191, 75, 205, 169, 62, 71, 62, 83, 189, 39, 124, 222, 61, 137, 178, 240, 190, 80, 186, 14, 190, 249, 56, 18, 191, 162, 126, 252, 60, 178, 218, 155, 190, 112, 46, 132, 61, 2, 50, 219, 190, 37, 154, 196, 188, 43, 69, 147, 62, 201, 215, 144, 189, 30, 240, 55, 62, 21, 217, 222, 190, 149, 30, 77, 190, 60, 198, 163, 62, 49, 46, 143, 61, 15, 112, 43, 191, 8, 186, 119, 190, 123, 149, 135, 62, 79, 244, 37, 191, 22, 43, 125, 62, 206, 100, 20, 191, 75, 105, 128, 61, 146, 254, 15, 62, 231, 142, 253, 60, 255, 142, 161, 60, 214, 180, 165, 190, 230, 196, 165, 189, 142, 87, 109, 190, 198, 88, 209, 190, 74, 253, 202, 62, 209, 71, 34, 61, 179, 65, 22, 62, 171, 42, 194, 189, 45, 203, 133, 191, 197, 23, 151, 189, 4, 53, 252, 61, 162, 106, 224, 190, 36, 207, 62, 62, 139, 177, 173, 190, 3, 205, 20, 187, 51, 224, 149, 62, 138, 178, 40, 188, 185, 208, 195, 190, 223, 41, 120, 190, 5, 237, 7, 191, 203, 217, 216, 189, 208, 201, 149, 62, 227, 217, 192, 189, 81, 99, 95, 191, 223, 180, 154, 190, 185, 207, 157, 190, 143, 59, 200, 62, 244, 66, 6, 190, 94, 64, 80, 190, 7, 235, 194, 61, 67, 40, 28, 189, 124, 150, 92, 188, 156, 185, 113, 190, 7, 59, 32, 62, 244, 185, 156, 62, 4, 15, 48, 191, 176, 83, 70, 62, 149, 152, 48, 62, 55, 207, 130, 60, 51, 9, 209, 62, 71, 22, 111, 190, 208, 44, 36, 62, 15, 66, 69, 62, 205, 157, 253, 190, 87, 105, 6, 189, 3, 137, 190, 59, 128, 57, 77, 62, 83, 14, 136, 61, 249, 193, 176, 61, 149, 92, 166, 62, 154, 158, 114, 190, 219, 4, 6, 191, 252, 107, 181, 61, 163, 48, 28, 190, 49, 18, 239, 62, 34, 21, 55, 190, 213, 171, 122, 190, 222, 36, 223, 188, 50, 89, 151, 191, 206, 173, 64, 190, 143, 135, 126, 61, 206, 39, 43, 62, 3, 50, 136, 62, 186, 112, 8, 62, 30, 230, 65, 190, 188, 43, 155, 190, 220, 203, 65, 191, 94, 175, 4, 190, 164, 207, 64, 190, 244, 149, 44, 62, 186, 44, 82, 189, 110, 70, 58, 188, 180, 99, 99, 60, 88, 201, 142, 189, 194, 15, 171, 190, 177, 10, 211, 189, 173, 116, 182, 189, 209, 61, 95, 190, 132, 211, 197, 190, 195, 32, 130, 62, 203, 6, 87, 61, 161, 53, 169, 188, 75, 73, 110, 190, 119, 197, 248, 61, 131, 182, 128, 61, 15, 186, 36, 62, 196, 202, 181, 189, 132, 85, 201, 186, 196, 94, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 208, 188, 62, 240, 224, 249, 188, 208, 61, 241, 60, 121, 213, 147, 61, 15, 30, 63, 62, 112, 250, 160, 190, 170, 229, 45, 61, 203, 106, 122, 62, 241, 64, 20, 188, 126, 113, 0, 62, 163, 127, 255, 60, 217, 91, 19, 62, 54, 218, 155, 62, 79, 2, 165, 62, 120, 223, 162, 62, 173, 6, 34, 62, 53, 246, 21, 190, 64, 89, 132, 189, 97, 148, 141, 62, 23, 71, 150, 188, 71, 248, 182, 62, 166, 18, 149, 188, 26, 61, 194, 189, 92, 4, 253, 189, 121, 181, 44, 62, 140, 153, 12, 190, 145, 24, 247, 189, 60, 121, 122, 62, 150, 67, 195, 61, 48, 220, 179, 188, 251, 146, 247, 60, 25, 254, 59, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 22, 20, 62, 170, 65, 81, 63, 210, 78, 166, 190, 201, 117, 159, 190, 238, 198, 58, 63, 166, 210, 34, 190, 229, 66, 174, 61, 2, 107, 20, 62, 3, 195, 158, 61, 39, 146, 77, 63, 4, 160, 69, 60, 242, 129, 189, 62, 240, 92, 69, 190, 193, 148, 11, 191, 178, 255, 178, 191, 6, 43, 139, 191, 244, 236, 251, 62, 65, 146, 243, 189, 138, 136, 4, 62, 116, 53, 110, 62, 12, 17, 34, 189, 137, 219, 214, 61, 180, 153, 122, 62, 178, 202, 35, 190, 213, 122, 249, 62, 173, 31, 35, 62, 57, 39, 181, 189, 25, 252, 150, 63, 5, 231, 116, 191, 28, 140, 89, 63, 201, 150, 242, 62, 117, 199, 13, 189, 6, 161, 4, 191, 25, 19, 23, 189, 18, 164, 37, 190, 220, 66, 215, 61, 73, 122, 204, 190, 210, 207, 91, 190, 164, 44, 143, 61, 80, 126, 151, 190, 63, 28, 94, 60, 139, 255, 22, 62, 125, 218, 215, 189, 187, 252, 27, 191, 201, 27, 218, 189, 6, 94, 0, 60, 142, 16, 2, 63, 31, 147, 94, 62, 241, 28, 5, 63, 21, 212, 11, 190, 139, 7, 232, 190, 255, 110, 77, 61, 150, 72, 16, 191, 214, 30, 247, 187, 96, 36, 179, 62, 60, 228, 200, 189, 92, 182, 201, 189, 80, 151, 149, 188, 7, 47, 165, 188, 18, 113, 212, 62, 60, 5, 44, 62, 235, 114, 14, 63, 200, 25, 132, 62, 29, 155, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 192, 104, 189, 78, 99, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 119, 240, 63, 138, 90, 158, 63, 206, 108, 161, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 22, 164, 192, 154, 201, 67, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}