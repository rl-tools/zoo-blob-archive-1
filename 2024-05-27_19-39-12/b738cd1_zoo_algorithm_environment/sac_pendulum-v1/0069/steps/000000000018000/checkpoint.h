// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 85, 38, 191, 101, 22, 61, 191, 22, 159, 226, 190, 129, 204, 29, 191, 49, 156, 139, 62, 135, 51, 209, 62, 248, 78, 17, 62, 105, 209, 124, 63, 217, 106, 123, 190, 142, 70, 40, 191, 120, 33, 133, 62, 65, 189, 243, 190, 103, 136, 196, 190, 96, 142, 152, 62, 155, 120, 176, 188, 133, 156, 73, 191, 162, 105, 138, 191, 34, 218, 216, 189, 89, 6, 1, 63, 70, 139, 92, 63, 176, 129, 171, 62, 66, 214, 180, 190, 233, 94, 143, 62, 164, 52, 7, 191, 160, 98, 53, 190, 138, 244, 69, 62, 134, 44, 58, 63, 95, 74, 29, 63, 130, 164, 8, 189, 182, 19, 221, 188, 170, 242, 77, 63, 18, 177, 32, 63, 24, 122, 120, 62, 9, 167, 9, 191, 65, 115, 213, 63, 203, 80, 143, 62, 223, 91, 149, 61, 92, 22, 36, 62, 253, 142, 50, 189, 249, 108, 175, 190, 192, 70, 75, 191, 100, 57, 149, 62, 197, 31, 52, 63, 234, 62, 135, 190, 142, 140, 157, 190, 83, 132, 156, 190, 38, 122, 191, 191, 126, 68, 141, 190, 3, 28, 60, 63, 22, 31, 27, 191, 44, 228, 109, 190, 175, 147, 242, 190, 68, 4, 45, 191, 69, 185, 46, 63, 76, 60, 68, 62, 1, 10, 82, 191, 237, 160, 159, 62, 98, 208, 223, 189, 200, 36, 200, 62, 48, 239, 182, 62, 75, 67, 222, 62, 97, 235, 174, 191, 2, 68, 94, 190, 107, 245, 7, 191, 153, 159, 184, 63, 25, 136, 199, 62, 182, 53, 25, 191, 100, 17, 198, 190, 147, 252, 151, 189, 191, 95, 60, 62, 166, 77, 152, 191, 56, 187, 91, 190, 31, 251, 51, 63, 236, 245, 251, 188, 103, 187, 3, 191, 201, 7, 134, 62, 205, 59, 136, 191, 1, 164, 66, 62, 140, 147, 0, 191, 235, 38, 154, 191, 5, 206, 58, 190, 24, 174, 35, 62, 106, 225, 28, 63, 154, 96, 138, 190, 151, 69, 203, 190, 146, 224, 59, 62, 68, 37, 93, 62, 40, 114, 50, 63, 184, 101, 155, 191, 221, 130, 196, 190, 213, 182, 253, 190, 19, 242, 179, 191, 215, 214, 232, 190, 102, 17, 28, 63, 61, 200, 136, 63, 119, 206, 142, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 84, 112, 191, 139, 41, 167, 190, 120, 18, 42, 61, 98, 106, 14, 191, 178, 54, 192, 62, 183, 53, 82, 190, 146, 128, 203, 190, 71, 73, 221, 190, 93, 70, 140, 190, 246, 84, 80, 190, 254, 66, 9, 191, 141, 7, 158, 190, 178, 53, 252, 190, 110, 172, 20, 62, 115, 189, 125, 191, 225, 36, 240, 189, 248, 61, 19, 191, 160, 247, 173, 190, 29, 219, 248, 61, 63, 52, 232, 62, 175, 111, 189, 62, 183, 36, 165, 190, 48, 155, 82, 63, 60, 149, 34, 62, 21, 142, 167, 62, 108, 57, 130, 62, 176, 194, 58, 190, 40, 238, 129, 187, 170, 20, 229, 62, 228, 246, 226, 190, 114, 14, 2, 190, 75, 97, 191, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 18, 20, 61, 58, 53, 61, 190, 210, 38, 97, 62, 155, 84, 102, 62, 64, 24, 187, 62, 99, 5, 161, 190, 239, 107, 106, 189, 144, 138, 135, 62, 229, 200, 190, 189, 145, 130, 60, 62, 40, 205, 1, 191, 246, 78, 59, 62, 29, 182, 225, 61, 196, 193, 39, 62, 229, 204, 2, 62, 110, 61, 231, 190, 180, 186, 139, 190, 110, 219, 11, 62, 109, 234, 217, 59, 218, 154, 65, 62, 184, 37, 128, 60, 196, 12, 195, 59, 238, 191, 4, 62, 174, 249, 109, 61, 174, 167, 195, 62, 32, 189, 233, 188, 252, 89, 203, 190, 55, 206, 171, 62, 71, 197, 82, 62, 115, 92, 191, 190, 178, 57, 6, 190, 158, 134, 206, 61, 118, 78, 14, 191, 169, 209, 58, 61, 77, 237, 144, 190, 53, 250, 247, 62, 247, 223, 27, 188, 193, 60, 42, 61, 45, 54, 11, 191, 232, 62, 2, 191, 30, 45, 166, 190, 41, 234, 176, 62, 182, 252, 101, 191, 165, 58, 237, 189, 242, 196, 31, 62, 231, 78, 211, 61, 107, 38, 33, 190, 199, 64, 252, 190, 80, 131, 165, 190, 39, 177, 53, 62, 87, 102, 37, 189, 128, 151, 139, 61, 163, 35, 127, 62, 9, 67, 183, 190, 74, 198, 201, 61, 3, 134, 245, 188, 81, 209, 186, 61, 219, 11, 181, 62, 228, 147, 159, 190, 83, 223, 53, 61, 223, 186, 159, 61, 76, 237, 97, 189, 240, 75, 118, 191, 191, 224, 104, 190, 223, 140, 106, 61, 133, 45, 193, 190, 150, 0, 187, 61, 212, 155, 12, 188, 173, 157, 2, 190, 143, 202, 204, 190, 56, 62, 177, 61, 174, 74, 167, 62, 129, 36, 132, 62, 39, 91, 178, 62, 126, 255, 223, 62, 36, 72, 16, 191, 148, 58, 49, 190, 193, 67, 10, 190, 181, 235, 108, 62, 91, 209, 145, 190, 167, 32, 95, 62, 123, 17, 248, 60, 138, 127, 131, 62, 82, 11, 245, 61, 168, 63, 62, 190, 138, 90, 107, 190, 6, 167, 185, 190, 28, 86, 177, 62, 62, 96, 166, 188, 88, 61, 176, 60, 106, 190, 47, 62, 63, 242, 93, 189, 137, 195, 1, 190, 46, 201, 210, 62, 73, 35, 239, 61, 69, 169, 161, 62, 252, 11, 219, 189, 46, 154, 214, 189, 123, 27, 203, 190, 180, 19, 180, 62, 5, 131, 114, 189, 199, 117, 78, 60, 216, 213, 98, 62, 211, 183, 83, 62, 229, 30, 13, 190, 80, 238, 17, 62, 192, 38, 47, 63, 44, 190, 1, 191, 4, 165, 148, 61, 164, 128, 51, 62, 209, 160, 11, 61, 143, 23, 20, 190, 149, 180, 186, 190, 84, 190, 24, 62, 167, 155, 102, 62, 218, 67, 8, 62, 185, 47, 175, 190, 31, 43, 239, 189, 105, 83, 16, 189, 99, 83, 63, 191, 185, 250, 41, 191, 233, 167, 121, 62, 16, 61, 54, 189, 98, 232, 183, 190, 131, 186, 37, 62, 220, 61, 179, 59, 177, 148, 167, 189, 208, 131, 85, 188, 33, 102, 2, 191, 204, 37, 242, 61, 126, 193, 59, 189, 179, 76, 149, 62, 242, 40, 201, 189, 178, 250, 17, 190, 118, 73, 185, 190, 62, 118, 169, 188, 2, 168, 155, 190, 240, 70, 138, 62, 188, 23, 153, 191, 217, 47, 56, 62, 54, 218, 245, 61, 170, 163, 189, 61, 139, 154, 85, 62, 244, 47, 207, 191, 141, 201, 145, 62, 132, 135, 33, 62, 53, 147, 204, 59, 100, 7, 154, 61, 140, 99, 147, 62, 7, 33, 183, 189, 94, 28, 91, 62, 143, 53, 44, 188, 170, 81, 37, 61, 41, 125, 78, 62, 243, 3, 142, 191, 235, 77, 147, 188, 66, 232, 235, 60, 173, 49, 192, 62, 110, 83, 38, 191, 78, 96, 154, 190, 71, 215, 132, 189, 21, 94, 245, 189, 153, 221, 208, 61, 138, 56, 148, 61, 178, 112, 145, 60, 93, 100, 243, 189, 200, 72, 253, 60, 237, 192, 239, 61, 210, 119, 192, 61, 201, 143, 183, 190, 204, 66, 108, 61, 152, 160, 46, 191, 34, 41, 4, 62, 31, 240, 207, 189, 137, 41, 85, 61, 145, 58, 249, 190, 248, 54, 6, 191, 23, 245, 203, 61, 123, 252, 6, 189, 47, 192, 235, 190, 245, 252, 183, 190, 142, 232, 145, 190, 26, 37, 39, 190, 129, 109, 54, 190, 252, 175, 123, 62, 93, 125, 75, 190, 115, 146, 174, 189, 212, 54, 134, 62, 236, 247, 45, 190, 106, 106, 185, 190, 212, 95, 1, 188, 125, 79, 129, 190, 7, 38, 240, 189, 137, 77, 171, 189, 196, 196, 111, 190, 115, 240, 9, 190, 39, 138, 230, 61, 171, 2, 116, 59, 173, 138, 191, 189, 173, 2, 138, 189, 240, 37, 13, 190, 229, 244, 236, 59, 53, 137, 197, 188, 83, 76, 250, 61, 109, 205, 198, 61, 182, 96, 47, 190, 165, 166, 108, 189, 131, 42, 44, 62, 83, 21, 52, 190, 192, 78, 160, 188, 63, 197, 14, 190, 176, 85, 227, 189, 94, 208, 200, 61, 144, 160, 137, 188, 59, 57, 32, 190, 173, 221, 235, 189, 44, 75, 230, 189, 74, 116, 18, 190, 187, 199, 171, 189, 179, 187, 85, 190, 16, 188, 114, 188, 14, 190, 11, 62, 7, 174, 28, 190, 172, 207, 243, 61, 175, 252, 181, 190, 7, 242, 239, 60, 210, 243, 140, 190, 48, 26, 173, 190, 103, 194, 183, 188, 126, 133, 10, 187, 251, 235, 168, 60, 227, 17, 33, 190, 193, 86, 90, 190, 201, 92, 44, 190, 172, 139, 21, 191, 79, 214, 240, 62, 134, 195, 202, 189, 146, 48, 117, 61, 188, 51, 188, 189, 54, 70, 132, 189, 68, 84, 188, 189, 230, 181, 70, 61, 19, 250, 134, 188, 220, 127, 213, 61, 189, 166, 129, 62, 44, 146, 235, 61, 40, 102, 87, 62, 171, 165, 97, 62, 74, 31, 134, 62, 132, 224, 45, 61, 174, 198, 82, 61, 23, 74, 136, 60, 60, 224, 147, 61, 66, 168, 205, 189, 248, 169, 217, 61, 238, 82, 204, 189, 14, 110, 162, 188, 127, 100, 7, 62, 230, 85, 148, 189, 132, 153, 127, 61, 36, 39, 39, 190, 122, 121, 162, 189, 119, 248, 32, 190, 134, 165, 51, 190, 215, 112, 229, 61, 151, 1, 11, 190, 128, 232, 26, 61, 7, 50, 85, 61, 147, 26, 46, 61, 150, 216, 36, 190, 154, 211, 40, 190, 192, 194, 40, 190, 207, 96, 153, 61, 187, 177, 248, 60, 148, 103, 0, 190, 205, 21, 11, 189, 228, 50, 171, 189, 7, 209, 33, 189, 184, 198, 220, 61, 162, 231, 32, 62, 54, 169, 203, 189, 73, 26, 205, 60, 51, 57, 91, 61, 185, 92, 100, 60, 172, 142, 30, 189, 110, 137, 52, 190, 98, 91, 22, 189, 184, 167, 213, 189, 100, 232, 181, 61, 251, 134, 251, 62, 1, 65, 248, 62, 254, 41, 37, 62, 99, 169, 133, 62, 124, 110, 195, 190, 63, 175, 66, 191, 143, 187, 157, 62, 168, 151, 168, 61, 179, 104, 136, 190, 195, 11, 132, 190, 15, 86, 15, 190, 9, 1, 207, 188, 29, 96, 116, 190, 219, 24, 185, 61, 214, 102, 240, 190, 171, 80, 12, 62, 68, 101, 196, 190, 207, 0, 217, 189, 98, 158, 167, 190, 166, 67, 21, 190, 116, 63, 140, 187, 226, 226, 166, 62, 89, 159, 10, 62, 180, 153, 164, 61, 97, 123, 217, 189, 252, 31, 22, 190, 141, 55, 157, 62, 15, 200, 135, 62, 169, 133, 107, 189, 81, 186, 53, 61, 243, 90, 49, 191, 192, 84, 93, 62, 71, 121, 35, 190, 101, 137, 128, 61, 136, 46, 34, 190, 197, 168, 210, 189, 209, 197, 253, 61, 77, 39, 159, 189, 203, 22, 190, 61, 79, 143, 184, 60, 88, 160, 93, 62, 212, 9, 24, 62, 54, 154, 88, 190, 11, 41, 167, 189, 171, 166, 166, 189, 13, 149, 63, 190, 26, 216, 91, 62, 251, 201, 121, 190, 80, 139, 229, 59, 148, 130, 102, 61, 117, 130, 192, 189, 29, 186, 6, 187, 139, 78, 216, 189, 31, 204, 72, 190, 229, 149, 92, 190, 77, 172, 162, 187, 63, 134, 8, 62, 229, 91, 123, 62, 147, 36, 237, 189, 141, 79, 87, 189, 26, 220, 80, 190, 141, 25, 72, 62, 185, 136, 117, 62, 196, 124, 155, 190, 82, 149, 12, 188, 41, 228, 203, 189, 171, 145, 67, 190, 68, 108, 184, 188, 67, 194, 156, 60, 151, 198, 4, 62, 96, 224, 171, 190, 122, 218, 43, 191, 52, 122, 81, 61, 235, 13, 33, 62, 162, 91, 79, 190, 200, 200, 138, 61, 254, 61, 242, 60, 109, 65, 79, 190, 244, 71, 6, 191, 217, 168, 90, 191, 251, 210, 72, 190, 178, 110, 161, 190, 2, 177, 242, 61, 250, 18, 173, 61, 136, 236, 174, 189, 224, 13, 99, 62, 167, 206, 251, 190, 71, 72, 203, 188, 115, 89, 99, 190, 250, 51, 175, 189, 130, 204, 133, 189, 61, 213, 222, 62, 245, 120, 133, 191, 97, 218, 150, 190, 22, 157, 48, 62, 113, 67, 30, 191, 242, 236, 44, 189, 21, 127, 160, 62, 211, 0, 154, 62, 60, 242, 200, 60, 226, 244, 65, 190, 216, 29, 187, 61, 133, 209, 107, 62, 221, 238, 41, 62, 116, 181, 21, 62, 172, 223, 211, 62, 112, 80, 237, 189, 129, 86, 117, 61, 96, 210, 11, 62, 47, 178, 16, 191, 161, 37, 135, 190, 138, 155, 116, 189, 221, 121, 56, 62, 77, 212, 198, 62, 219, 96, 17, 62, 124, 29, 196, 60, 9, 13, 53, 62, 107, 79, 79, 188, 34, 133, 175, 190, 31, 191, 93, 189, 203, 55, 102, 62, 156, 243, 230, 61, 185, 15, 176, 62, 86, 128, 224, 61, 15, 233, 213, 189, 167, 166, 142, 190, 38, 182, 80, 62, 148, 195, 24, 187, 96, 56, 107, 191, 220, 48, 59, 62, 32, 136, 101, 190, 182, 240, 74, 61, 0, 28, 69, 62, 128, 241, 237, 188, 193, 59, 29, 62, 74, 154, 219, 62, 214, 100, 161, 62, 201, 154, 167, 62, 66, 254, 146, 190, 29, 65, 32, 190, 111, 231, 72, 187, 226, 128, 249, 190, 117, 112, 180, 62, 152, 251, 173, 190, 182, 228, 158, 190, 95, 132, 56, 62, 124, 221, 7, 62, 8, 60, 140, 189, 139, 167, 145, 190, 1, 34, 108, 62, 91, 44, 176, 189, 5, 193, 234, 188, 102, 1, 180, 190, 175, 99, 154, 62, 96, 29, 96, 190, 37, 107, 32, 62, 82, 146, 146, 190, 91, 148, 182, 62, 246, 197, 153, 62, 142, 244, 248, 189, 3, 162, 68, 191, 135, 143, 180, 62, 116, 75, 33, 190, 50, 24, 96, 62, 130, 148, 30, 63, 33, 82, 242, 61, 84, 99, 51, 62, 228, 82, 81, 63, 148, 95, 217, 61, 231, 37, 192, 62, 225, 176, 43, 191, 110, 198, 106, 61, 243, 85, 173, 61, 255, 10, 38, 191, 53, 44, 47, 186, 52, 107, 90, 191, 167, 223, 98, 190, 3, 177, 131, 190, 110, 203, 0, 62, 196, 75, 129, 190, 11, 239, 117, 191, 133, 153, 131, 62, 60, 162, 177, 190, 141, 149, 1, 189, 204, 91, 128, 191, 58, 175, 166, 62, 170, 54, 68, 189, 39, 58, 12, 61, 181, 77, 37, 191, 153, 167, 157, 61, 253, 4, 158, 61, 187, 109, 137, 61, 219, 33, 101, 191, 222, 66, 166, 62, 57, 78, 192, 190, 234, 195, 25, 62, 36, 183, 37, 62, 185, 26, 144, 62, 71, 248, 185, 62, 215, 56, 62, 190, 188, 133, 237, 61, 25, 156, 34, 60, 151, 182, 110, 191, 140, 36, 87, 60, 95, 19, 136, 62, 155, 153, 12, 191, 243, 198, 27, 61, 244, 1, 33, 191, 116, 120, 45, 188, 203, 15, 49, 62, 232, 211, 149, 190, 219, 139, 144, 190, 84, 97, 83, 191, 4, 242, 168, 62, 105, 188, 6, 191, 142, 99, 222, 189, 193, 120, 232, 190, 45, 67, 159, 62, 99, 243, 230, 60, 13, 73, 71, 189, 124, 59, 7, 191, 87, 188, 116, 62, 158, 32, 135, 62, 218, 37, 70, 190, 240, 241, 174, 60, 36, 111, 168, 190, 237, 117, 23, 190, 67, 67, 200, 189, 83, 182, 20, 190, 113, 209, 22, 61, 215, 144, 211, 190, 35, 27, 248, 186, 20, 201, 117, 191, 217, 152, 27, 191, 156, 198, 143, 62, 3, 60, 253, 61, 208, 217, 113, 60, 204, 56, 146, 190, 184, 36, 135, 62, 206, 137, 13, 63, 118, 35, 210, 61, 200, 197, 241, 61, 23, 75, 182, 189, 125, 188, 158, 62, 38, 76, 29, 62, 82, 182, 243, 62, 125, 199, 219, 62, 246, 255, 212, 61, 93, 26, 64, 190, 50, 12, 2, 190, 108, 140, 237, 190, 192, 207, 220, 189, 128, 186, 166, 62, 27, 149, 69, 191, 38, 130, 17, 190, 162, 48, 157, 189, 31, 150, 168, 189, 160, 95, 125, 189, 144, 62, 7, 190, 32, 75, 24, 190, 44, 194, 7, 190, 59, 8, 9, 62, 6, 18, 39, 61, 102, 190, 206, 61, 42, 163, 50, 189, 244, 181, 178, 61, 167, 247, 147, 61, 210, 237, 101, 61, 64, 132, 107, 190, 218, 79, 0, 190, 164, 67, 234, 61, 97, 59, 125, 59, 25, 115, 32, 190, 42, 7, 7, 190, 43, 113, 221, 189, 112, 120, 140, 60, 183, 6, 104, 59, 199, 128, 126, 189, 216, 42, 34, 189, 97, 211, 17, 190, 98, 212, 21, 189, 105, 56, 171, 61, 61, 228, 33, 61, 125, 69, 215, 61, 22, 83, 155, 61, 175, 192, 6, 189, 87, 182, 32, 190, 219, 95, 215, 190, 82, 138, 10, 62, 239, 81, 35, 190, 103, 21, 154, 190, 32, 242, 43, 190, 89, 253, 73, 62, 133, 41, 7, 61, 98, 197, 255, 190, 31, 139, 33, 190, 237, 244, 24, 190, 174, 53, 246, 190, 40, 183, 101, 62, 233, 62, 249, 189, 40, 13, 159, 61, 192, 246, 71, 61, 70, 222, 98, 62, 59, 237, 250, 61, 19, 155, 223, 61, 212, 123, 107, 190, 78, 205, 210, 61, 143, 247, 130, 62, 65, 2, 36, 62, 192, 74, 39, 61, 73, 155, 144, 61, 43, 43, 150, 62, 187, 182, 155, 61, 193, 251, 21, 62, 8, 203, 12, 190, 178, 107, 148, 61, 156, 84, 142, 188, 171, 143, 200, 189, 208, 97, 47, 187, 157, 228, 102, 61, 19, 234, 140, 190, 30, 16, 160, 189, 68, 48, 115, 190, 110, 246, 238, 60, 246, 204, 11, 190, 170, 46, 95, 62, 49, 126, 24, 62, 189, 122, 16, 188, 54, 249, 6, 191, 221, 37, 165, 62, 163, 140, 133, 190, 119, 100, 129, 61, 178, 155, 114, 191, 143, 173, 10, 189, 181, 35, 133, 190, 15, 123, 165, 61, 66, 30, 179, 190, 188, 125, 133, 190, 84, 236, 12, 190, 75, 130, 182, 190, 30, 239, 5, 190, 236, 248, 238, 61, 19, 186, 92, 190, 48, 128, 91, 190, 0, 170, 117, 190, 180, 4, 138, 190, 98, 194, 134, 189, 248, 114, 77, 62, 249, 84, 157, 187, 200, 189, 188, 61, 125, 45, 37, 61, 54, 163, 251, 189, 51, 102, 218, 189, 184, 90, 37, 190, 193, 125, 154, 190, 154, 250, 228, 61, 6, 248, 178, 188, 255, 20, 170, 190, 87, 248, 163, 187, 97, 68, 72, 61, 203, 25, 16, 189, 249, 236, 9, 191, 11, 212, 40, 190, 93, 190, 149, 60, 181, 6, 230, 189, 48, 97, 152, 189, 131, 249, 198, 189, 97, 248, 179, 190, 35, 183, 60, 190, 158, 119, 135, 61, 52, 90, 10, 62, 172, 72, 213, 62, 247, 202, 44, 190, 107, 105, 38, 62, 203, 77, 138, 61, 250, 165, 10, 62, 146, 150, 140, 62, 205, 180, 38, 190, 42, 239, 58, 190, 53, 252, 19, 188, 244, 244, 157, 189, 254, 198, 41, 190, 73, 72, 12, 62, 128, 173, 248, 189, 56, 140, 155, 189, 163, 130, 50, 190, 25, 201, 234, 189, 36, 71, 126, 61, 116, 150, 196, 189, 35, 29, 85, 189, 18, 57, 17, 62, 134, 200, 181, 188, 38, 32, 245, 61, 109, 115, 201, 188, 226, 83, 156, 61, 15, 133, 128, 187, 209, 234, 39, 190, 147, 57, 22, 62, 173, 91, 220, 188, 224, 46, 205, 61, 67, 135, 11, 190, 139, 78, 32, 59, 191, 152, 120, 189, 222, 203, 40, 190, 157, 85, 42, 189, 53, 232, 180, 188, 90, 53, 114, 61, 132, 142, 136, 189, 57, 170, 143, 189, 183, 120, 49, 190, 172, 118, 5, 61, 153, 49, 146, 60, 145, 186, 94, 189, 225, 141, 0, 190, 247, 55, 89, 60, 92, 198, 26, 191, 164, 147, 196, 62, 246, 68, 247, 189, 105, 231, 249, 189, 87, 100, 166, 61, 173, 241, 197, 61, 49, 150, 17, 191, 241, 108, 23, 191, 57, 35, 180, 190, 148, 154, 208, 60, 219, 46, 69, 191, 167, 203, 218, 61, 43, 152, 45, 61, 126, 237, 167, 62, 100, 47, 79, 62, 152, 183, 245, 189, 227, 85, 234, 62, 5, 143, 40, 60, 26, 168, 206, 188, 248, 82, 150, 61, 126, 89, 100, 62, 33, 249, 85, 61, 111, 128, 180, 62, 44, 49, 74, 62, 60, 147, 59, 62, 191, 108, 20, 62, 63, 205, 153, 190, 152, 210, 119, 190, 139, 30, 167, 188, 63, 95, 221, 62, 82, 186, 254, 189, 106, 241, 21, 190, 62, 84, 146, 188, 198, 190, 64, 189, 65, 79, 37, 187, 219, 206, 233, 189, 1, 147, 79, 61, 213, 190, 244, 60, 62, 121, 169, 61, 218, 38, 182, 189, 13, 77, 1, 190, 216, 102, 15, 62, 243, 200, 244, 188, 123, 157, 39, 190, 120, 34, 170, 189, 206, 174, 14, 189, 108, 229, 90, 60, 243, 79, 1, 190, 206, 0, 7, 189, 245, 74, 130, 61, 144, 63, 221, 61, 106, 140, 42, 190, 248, 224, 36, 190, 242, 6, 248, 189, 59, 62, 72, 189, 43, 24, 240, 188, 192, 199, 90, 61, 36, 54, 248, 189, 6, 131, 12, 190, 61, 143, 142, 188, 196, 71, 60, 189, 37, 202, 132, 189, 157, 84, 128, 61, 29, 145, 4, 189, 137, 49, 227, 190, 198, 23, 235, 61, 197, 123, 113, 188, 160, 108, 13, 190, 140, 38, 209, 187, 228, 162, 58, 62, 127, 133, 15, 191, 230, 196, 253, 190, 206, 79, 223, 190, 177, 170, 83, 190, 189, 51, 136, 191, 151, 172, 124, 190, 76, 131, 57, 189, 154, 107, 6, 63, 175, 217, 166, 189, 246, 73, 190, 189, 208, 91, 121, 189, 191, 168, 99, 62, 151, 65, 50, 190, 139, 62, 72, 190, 212, 19, 197, 62, 200, 195, 160, 190, 3, 161, 97, 62, 15, 230, 126, 62, 138, 154, 144, 61, 116, 92, 148, 62, 184, 251, 120, 190, 16, 245, 90, 189, 243, 6, 21, 190, 191, 146, 95, 62, 150, 164, 181, 189, 143, 107, 172, 189, 181, 131, 9, 189, 139, 75, 67, 60, 16, 131, 2, 190, 80, 155, 155, 61, 73, 53, 43, 189, 38, 48, 57, 187, 213, 198, 237, 189, 145, 238, 129, 189, 42, 72, 207, 60, 15, 217, 108, 189, 23, 139, 137, 61, 38, 65, 16, 190, 255, 107, 175, 61, 42, 179, 126, 189, 77, 186, 143, 58, 117, 171, 56, 61, 101, 58, 174, 61, 95, 164, 38, 61, 42, 230, 181, 59, 10, 159, 37, 189, 92, 37, 115, 189, 159, 161, 10, 61, 245, 92, 207, 188, 237, 235, 222, 189, 232, 116, 5, 190, 254, 184, 48, 190, 144, 245, 62, 188, 171, 234, 169, 188, 180, 133, 96, 187, 225, 197, 74, 61, 44, 121, 248, 61, 147, 174, 40, 62, 13, 255, 64, 189, 136, 75, 42, 61, 73, 14, 214, 189, 28, 99, 9, 190, 160, 213, 65, 60, 49, 78, 135, 189, 71, 53, 141, 189, 45, 77, 240, 61, 19, 75, 196, 59, 169, 86, 168, 189, 197, 153, 19, 190, 97, 169, 40, 189, 172, 155, 43, 190, 177, 215, 245, 61, 72, 243, 195, 61, 210, 216, 199, 61, 216, 99, 153, 189, 127, 219, 31, 190, 155, 122, 158, 61, 128, 15, 42, 189, 26, 25, 236, 188, 140, 124, 0, 190, 16, 146, 70, 60, 238, 150, 136, 61, 147, 198, 54, 190, 8, 168, 65, 189, 48, 39, 13, 62, 220, 52, 155, 61, 22, 139, 19, 190, 194, 36, 59, 190, 127, 78, 174, 189, 216, 24, 49, 190, 85, 172, 142, 190, 57, 42, 89, 62, 134, 178, 162, 190, 182, 131, 230, 62, 250, 123, 1, 62, 221, 162, 186, 190, 219, 244, 12, 191, 58, 112, 200, 190, 123, 41, 162, 190, 49, 200, 23, 190, 176, 245, 162, 191, 102, 241, 110, 62, 90, 251, 27, 189, 76, 8, 165, 62, 13, 155, 27, 191, 211, 94, 61, 191, 178, 109, 180, 190, 237, 97, 39, 62, 67, 96, 110, 190, 187, 87, 61, 62, 93, 75, 200, 62, 171, 210, 67, 189, 201, 117, 217, 61, 236, 242, 16, 62, 220, 114, 44, 189, 23, 66, 57, 62, 183, 196, 44, 191, 251, 31, 76, 190, 37, 1, 6, 62, 110, 136, 129, 62, 172, 194, 13, 191, 216, 20, 199, 190, 168, 17, 128, 190, 131, 188, 51, 62, 179, 66, 194, 62, 48, 33, 51, 62, 181, 253, 53, 62, 204, 230, 221, 190, 97, 26, 28, 191, 14, 24, 51, 62, 148, 31, 149, 189, 33, 95, 16, 60, 24, 161, 140, 191, 249, 129, 183, 62, 71, 62, 83, 189, 51, 9, 26, 62, 208, 233, 242, 190, 96, 16, 89, 190, 40, 10, 19, 191, 10, 78, 158, 61, 120, 149, 122, 190, 208, 172, 178, 61, 223, 83, 0, 191, 168, 34, 135, 59, 227, 85, 130, 62, 127, 227, 32, 190, 174, 152, 6, 62, 216, 172, 204, 190, 113, 194, 129, 190, 89, 100, 146, 62, 21, 189, 208, 61, 46, 225, 53, 191, 211, 91, 170, 190, 147, 171, 131, 62, 79, 244, 37, 191, 6, 10, 118, 62, 26, 195, 16, 191, 48, 165, 242, 183, 21, 190, 18, 62, 173, 158, 160, 60, 97, 144, 211, 60, 231, 133, 186, 190, 230, 158, 166, 189, 187, 116, 97, 190, 89, 40, 203, 190, 161, 46, 203, 62, 209, 71, 34, 61, 7, 55, 18, 62, 171, 42, 194, 189, 53, 53, 153, 191, 197, 23, 151, 189, 125, 48, 235, 61, 13, 155, 226, 190, 182, 155, 71, 62, 75, 188, 129, 190, 78, 77, 134, 187, 7, 159, 148, 62, 7, 237, 124, 189, 133, 204, 203, 190, 249, 143, 112, 190, 160, 100, 24, 191, 137, 73, 36, 190, 41, 105, 152, 62, 227, 217, 192, 189, 114, 205, 130, 191, 29, 78, 143, 190, 227, 172, 99, 190, 241, 149, 191, 62, 4, 57, 57, 190, 165, 28, 87, 190, 82, 49, 217, 61, 114, 136, 97, 189, 97, 28, 68, 189, 1, 12, 122, 190, 98, 132, 19, 62, 142, 33, 160, 62, 108, 21, 50, 191, 213, 206, 73, 62, 149, 152, 48, 62, 98, 206, 66, 59, 226, 11, 192, 62, 250, 99, 121, 190, 167, 227, 83, 62, 223, 113, 49, 62, 235, 16, 229, 190, 63, 175, 168, 188, 124, 1, 93, 61, 244, 36, 72, 62, 152, 252, 240, 61, 122, 209, 34, 62, 178, 238, 169, 62, 220, 23, 43, 190, 98, 140, 10, 191, 44, 98, 51, 61, 181, 167, 27, 190, 64, 160, 6, 63, 55, 103, 17, 190, 81, 135, 107, 190, 165, 121, 109, 186, 159, 30, 135, 191, 183, 152, 70, 190, 179, 184, 147, 61, 175, 171, 70, 62, 97, 191, 176, 62, 186, 112, 8, 62, 234, 116, 54, 190, 189, 47, 153, 190, 58, 255, 63, 191, 94, 175, 4, 190, 87, 151, 49, 190, 244, 149, 44, 62, 100, 102, 2, 61, 204, 88, 174, 59, 67, 175, 173, 61, 131, 240, 171, 188, 88, 198, 134, 190, 252, 141, 176, 188, 20, 157, 219, 186, 246, 27, 19, 190, 177, 24, 182, 190, 199, 215, 159, 62, 63, 127, 253, 61, 163, 216, 156, 186, 222, 240, 29, 190, 242, 20, 67, 62, 243, 145, 130, 61, 186, 217, 99, 62, 69, 195, 229, 188, 204, 229, 67, 61, 101, 142, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 241, 191, 62, 24, 167, 43, 188, 189, 115, 226, 60, 89, 184, 225, 61, 62, 19, 44, 62, 148, 157, 119, 190, 170, 229, 45, 61, 150, 251, 128, 62, 8, 161, 4, 188, 60, 141, 17, 62, 64, 178, 176, 61, 163, 231, 26, 62, 203, 119, 159, 62, 169, 61, 167, 62, 105, 34, 152, 62, 44, 224, 16, 62, 240, 234, 241, 189, 64, 89, 132, 189, 232, 151, 148, 62, 164, 102, 237, 188, 232, 35, 188, 62, 166, 18, 149, 188, 201, 109, 198, 189, 92, 4, 253, 189, 215, 100, 37, 62, 140, 153, 12, 190, 145, 24, 247, 189, 86, 91, 122, 62, 93, 236, 139, 61, 37, 24, 25, 187, 18, 148, 100, 61, 160, 232, 206, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 126, 33, 62, 143, 230, 81, 63, 238, 68, 176, 190, 67, 214, 154, 190, 216, 86, 104, 63, 113, 230, 16, 190, 229, 66, 174, 61, 152, 150, 77, 62, 246, 197, 158, 61, 20, 228, 78, 63, 107, 130, 93, 60, 104, 87, 168, 62, 57, 136, 93, 190, 251, 226, 30, 191, 49, 3, 171, 191, 76, 93, 134, 191, 20, 41, 201, 62, 65, 146, 243, 189, 117, 169, 49, 62, 118, 102, 119, 62, 208, 96, 184, 188, 137, 219, 214, 61, 190, 32, 202, 62, 178, 202, 35, 190, 72, 234, 21, 63, 173, 31, 35, 62, 57, 39, 181, 189, 133, 58, 151, 63, 188, 239, 114, 191, 143, 56, 93, 63, 118, 60, 13, 63, 112, 251, 218, 189, 197, 63, 3, 191, 133, 243, 23, 190, 175, 214, 210, 189, 205, 36, 8, 62, 42, 142, 69, 190, 37, 72, 151, 190, 164, 44, 143, 61, 13, 68, 133, 190, 200, 29, 94, 60, 251, 168, 18, 62, 66, 26, 212, 189, 103, 246, 19, 191, 126, 153, 189, 189, 12, 179, 181, 60, 88, 43, 211, 62, 55, 134, 20, 62, 110, 185, 218, 62, 21, 212, 11, 190, 93, 85, 223, 190, 12, 58, 73, 61, 232, 18, 3, 191, 214, 30, 247, 187, 245, 214, 224, 62, 60, 228, 200, 189, 169, 250, 199, 189, 80, 151, 149, 188, 7, 47, 165, 188, 176, 248, 203, 62, 93, 154, 12, 62, 201, 242, 15, 63, 229, 195, 144, 62, 255, 31, 141, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 46, 115, 189, 54, 238, 177, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 99, 179, 190, 175, 129, 96, 63, 102, 217, 11, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {27, 105, 19, 191, 132, 80, 185, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0069/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}