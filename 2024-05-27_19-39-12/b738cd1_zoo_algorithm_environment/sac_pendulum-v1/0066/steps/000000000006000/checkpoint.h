// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 163, 210, 62, 87, 113, 37, 63, 186, 42, 168, 62, 240, 78, 197, 62, 204, 16, 125, 191, 224, 90, 160, 62, 136, 186, 28, 62, 234, 239, 243, 62, 232, 245, 165, 62, 192, 229, 218, 189, 101, 248, 159, 189, 11, 161, 180, 190, 64, 24, 18, 189, 127, 54, 71, 63, 243, 155, 19, 62, 233, 159, 57, 191, 204, 198, 217, 190, 115, 159, 30, 190, 201, 187, 6, 190, 182, 208, 148, 63, 34, 213, 71, 63, 96, 6, 22, 63, 170, 137, 98, 63, 4, 201, 37, 191, 51, 202, 145, 190, 215, 79, 183, 63, 75, 187, 46, 63, 136, 91, 244, 62, 93, 43, 157, 189, 134, 51, 93, 61, 110, 167, 79, 63, 192, 61, 2, 189, 57, 143, 126, 189, 88, 78, 43, 63, 187, 194, 82, 191, 112, 229, 216, 190, 193, 191, 189, 190, 153, 180, 140, 191, 18, 20, 62, 191, 26, 133, 18, 190, 138, 54, 96, 191, 206, 174, 147, 189, 5, 138, 179, 188, 156, 54, 110, 63, 13, 124, 84, 191, 180, 78, 58, 63, 213, 113, 110, 62, 40, 238, 140, 189, 73, 172, 181, 190, 103, 0, 56, 63, 183, 96, 125, 191, 201, 13, 55, 63, 122, 132, 229, 62, 149, 220, 107, 62, 73, 169, 42, 191, 46, 57, 254, 190, 131, 185, 234, 190, 229, 64, 1, 191, 161, 77, 85, 191, 3, 126, 168, 62, 132, 121, 13, 191, 192, 100, 64, 191, 11, 133, 199, 188, 239, 207, 35, 190, 94, 56, 28, 190, 94, 8, 56, 61, 238, 5, 58, 62, 77, 21, 145, 190, 172, 184, 65, 190, 70, 164, 234, 61, 108, 199, 213, 62, 6, 66, 134, 62, 145, 253, 176, 61, 228, 151, 134, 191, 196, 106, 61, 63, 50, 151, 196, 190, 117, 182, 26, 61, 116, 10, 221, 62, 194, 32, 11, 190, 90, 201, 65, 62, 113, 158, 1, 191, 176, 15, 174, 190, 226, 58, 61, 191, 9, 66, 37, 189, 4, 134, 97, 62, 43, 37, 154, 62, 13, 146, 15, 189, 135, 13, 244, 190, 54, 38, 65, 63, 5, 52, 51, 62, 236, 164, 162, 190, 228, 15, 29, 191, 28, 122, 216, 62, 24, 21, 3, 62, 76, 91, 252, 188, 4, 18, 152, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 35, 0, 191, 36, 132, 81, 62, 164, 148, 146, 189, 196, 20, 197, 61, 158, 200, 43, 63, 174, 204, 28, 63, 131, 150, 153, 62, 12, 251, 10, 63, 188, 27, 157, 62, 84, 70, 150, 189, 9, 196, 177, 62, 18, 171, 78, 189, 113, 222, 53, 190, 198, 47, 18, 63, 155, 69, 115, 190, 18, 161, 229, 62, 154, 50, 36, 191, 96, 157, 108, 190, 233, 211, 38, 62, 122, 48, 144, 190, 7, 9, 163, 62, 162, 118, 17, 191, 217, 19, 212, 62, 92, 176, 237, 189, 115, 178, 198, 189, 255, 197, 71, 63, 189, 165, 176, 190, 9, 195, 1, 63, 69, 190, 5, 191, 190, 26, 243, 62, 68, 54, 135, 190, 66, 254, 132, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 211, 135, 190, 86, 176, 187, 190, 38, 19, 17, 62, 5, 185, 5, 189, 114, 236, 64, 61, 22, 102, 123, 62, 142, 227, 237, 187, 206, 132, 227, 190, 19, 139, 130, 189, 49, 89, 185, 190, 8, 23, 164, 62, 102, 105, 73, 191, 14, 251, 35, 190, 203, 195, 225, 60, 145, 114, 174, 62, 229, 137, 152, 62, 131, 201, 21, 62, 50, 32, 158, 188, 89, 210, 128, 62, 221, 62, 153, 62, 233, 233, 36, 62, 138, 129, 11, 190, 16, 154, 154, 61, 224, 60, 139, 60, 158, 35, 133, 190, 132, 117, 61, 189, 87, 24, 12, 191, 115, 146, 182, 61, 100, 43, 29, 61, 180, 133, 125, 61, 244, 216, 1, 62, 170, 169, 70, 62, 253, 1, 165, 190, 180, 102, 144, 62, 44, 14, 31, 60, 4, 92, 17, 190, 55, 80, 35, 61, 239, 173, 185, 188, 150, 65, 193, 61, 48, 182, 119, 62, 223, 105, 127, 62, 197, 56, 151, 61, 7, 52, 98, 190, 86, 185, 225, 62, 50, 42, 194, 61, 245, 78, 102, 188, 247, 148, 176, 188, 94, 53, 167, 189, 90, 99, 85, 190, 11, 195, 43, 190, 237, 161, 146, 189, 142, 216, 14, 191, 70, 173, 176, 189, 13, 56, 250, 189, 56, 19, 136, 60, 203, 19, 244, 189, 24, 191, 181, 61, 177, 167, 3, 62, 119, 194, 141, 62, 21, 92, 147, 61, 165, 223, 251, 60, 201, 12, 55, 61, 186, 43, 182, 190, 113, 98, 40, 189, 55, 109, 32, 62, 177, 180, 229, 62, 109, 217, 204, 189, 34, 225, 192, 188, 124, 24, 123, 191, 114, 66, 188, 189, 103, 73, 188, 190, 206, 49, 57, 189, 215, 42, 245, 61, 138, 92, 73, 190, 146, 144, 56, 191, 201, 118, 15, 62, 162, 195, 26, 62, 235, 236, 150, 62, 101, 62, 178, 61, 88, 94, 134, 190, 135, 73, 61, 62, 67, 53, 38, 188, 228, 100, 104, 62, 227, 72, 217, 60, 137, 155, 173, 62, 230, 78, 85, 61, 130, 123, 226, 189, 232, 47, 103, 189, 106, 213, 7, 62, 5, 219, 164, 189, 83, 17, 116, 61, 5, 20, 131, 188, 192, 121, 134, 189, 23, 59, 162, 191, 13, 167, 53, 190, 83, 240, 14, 62, 51, 174, 108, 189, 219, 229, 152, 62, 225, 85, 121, 190, 181, 82, 173, 190, 127, 79, 122, 61, 129, 8, 122, 187, 148, 149, 241, 61, 229, 182, 26, 191, 20, 47, 52, 62, 208, 229, 139, 61, 89, 135, 19, 191, 239, 204, 201, 188, 253, 3, 138, 191, 253, 83, 195, 60, 21, 240, 96, 191, 64, 60, 49, 191, 106, 71, 162, 191, 218, 38, 209, 189, 208, 191, 253, 61, 165, 162, 167, 190, 201, 215, 160, 61, 232, 179, 14, 189, 188, 215, 130, 190, 223, 50, 57, 190, 108, 31, 186, 62, 171, 9, 120, 62, 115, 72, 250, 189, 17, 191, 135, 62, 161, 114, 164, 61, 118, 201, 199, 61, 93, 45, 16, 188, 102, 14, 161, 191, 187, 188, 7, 60, 157, 161, 166, 189, 139, 28, 56, 188, 58, 173, 225, 189, 242, 143, 252, 189, 177, 4, 152, 189, 195, 154, 202, 189, 247, 161, 199, 188, 148, 49, 61, 190, 26, 88, 200, 61, 219, 143, 144, 188, 0, 123, 15, 190, 35, 158, 42, 190, 125, 185, 116, 189, 74, 8, 42, 190, 217, 26, 43, 190, 106, 193, 219, 59, 101, 221, 141, 189, 79, 2, 12, 62, 40, 173, 28, 62, 107, 83, 158, 61, 152, 4, 255, 61, 204, 78, 252, 61, 219, 133, 92, 189, 81, 248, 255, 61, 31, 12, 24, 190, 226, 85, 126, 61, 110, 25, 199, 189, 219, 35, 254, 61, 91, 26, 47, 188, 71, 96, 103, 59, 2, 45, 223, 189, 62, 209, 78, 190, 110, 225, 56, 62, 222, 90, 15, 62, 126, 159, 83, 189, 110, 11, 237, 61, 212, 6, 86, 190, 175, 60, 215, 61, 171, 108, 240, 61, 181, 205, 62, 62, 190, 238, 127, 190, 248, 58, 205, 62, 179, 129, 135, 190, 211, 166, 70, 190, 210, 107, 201, 190, 89, 56, 148, 61, 96, 26, 180, 62, 109, 33, 131, 190, 1, 127, 8, 190, 55, 48, 241, 190, 228, 111, 74, 60, 202, 63, 73, 191, 19, 69, 14, 190, 242, 182, 139, 61, 187, 137, 79, 62, 18, 126, 41, 61, 113, 252, 213, 61, 230, 253, 36, 62, 149, 27, 236, 190, 138, 143, 248, 188, 196, 143, 148, 189, 81, 93, 16, 190, 74, 150, 20, 190, 200, 113, 161, 190, 4, 32, 181, 62, 166, 120, 143, 189, 252, 181, 109, 190, 197, 52, 144, 62, 159, 19, 196, 60, 172, 78, 149, 62, 100, 189, 41, 63, 76, 200, 140, 62, 184, 138, 167, 62, 213, 160, 23, 60, 196, 79, 169, 62, 221, 27, 114, 191, 131, 97, 250, 189, 180, 36, 183, 190, 78, 158, 30, 62, 245, 240, 44, 191, 114, 105, 139, 190, 155, 244, 53, 189, 100, 23, 165, 190, 8, 66, 173, 62, 84, 1, 15, 190, 207, 222, 94, 62, 91, 213, 181, 189, 38, 140, 136, 61, 49, 197, 122, 62, 42, 19, 127, 61, 81, 27, 88, 189, 65, 185, 19, 190, 233, 2, 102, 62, 128, 112, 214, 190, 55, 22, 36, 191, 134, 39, 55, 190, 22, 205, 186, 190, 111, 152, 144, 189, 3, 91, 146, 190, 38, 185, 23, 62, 202, 226, 184, 61, 151, 134, 10, 62, 73, 234, 194, 62, 109, 202, 58, 61, 136, 58, 58, 190, 88, 74, 138, 58, 198, 246, 219, 188, 91, 116, 177, 61, 114, 66, 25, 189, 46, 90, 152, 61, 198, 166, 252, 61, 184, 9, 141, 190, 232, 31, 34, 190, 44, 60, 176, 190, 121, 90, 100, 190, 229, 235, 30, 188, 140, 101, 31, 61, 152, 214, 37, 61, 221, 104, 34, 189, 133, 236, 81, 190, 239, 219, 131, 189, 194, 175, 156, 189, 151, 144, 107, 189, 104, 98, 26, 62, 184, 151, 200, 61, 215, 184, 69, 190, 234, 232, 175, 190, 213, 159, 150, 188, 15, 61, 231, 189, 93, 128, 87, 62, 139, 171, 28, 190, 18, 156, 102, 189, 191, 152, 109, 190, 162, 149, 151, 61, 197, 33, 65, 187, 138, 143, 147, 62, 211, 192, 160, 190, 27, 240, 89, 61, 98, 99, 193, 190, 232, 157, 69, 61, 189, 185, 6, 190, 193, 30, 229, 60, 171, 159, 65, 62, 143, 246, 222, 188, 17, 107, 46, 62, 221, 96, 158, 188, 122, 24, 156, 62, 94, 170, 202, 188, 239, 71, 46, 62, 154, 39, 227, 189, 224, 79, 67, 62, 229, 189, 27, 62, 180, 234, 123, 61, 62, 230, 12, 62, 1, 141, 99, 190, 63, 8, 53, 190, 116, 175, 183, 61, 250, 238, 128, 62, 230, 118, 136, 60, 110, 135, 243, 189, 104, 29, 192, 62, 135, 217, 253, 60, 69, 0, 16, 191, 0, 167, 62, 61, 195, 211, 21, 190, 39, 227, 155, 62, 248, 22, 65, 62, 131, 65, 14, 62, 77, 45, 145, 190, 234, 228, 16, 190, 129, 207, 206, 62, 14, 106, 223, 189, 179, 255, 166, 61, 82, 146, 5, 61, 205, 171, 134, 190, 110, 234, 82, 190, 230, 62, 245, 185, 224, 224, 139, 190, 137, 216, 149, 61, 158, 36, 242, 189, 28, 164, 177, 61, 186, 79, 139, 190, 67, 148, 102, 189, 123, 146, 139, 62, 202, 113, 113, 61, 75, 108, 79, 61, 73, 138, 10, 62, 218, 223, 21, 62, 9, 131, 4, 61, 182, 182, 150, 188, 241, 55, 174, 190, 118, 72, 201, 188, 172, 82, 232, 188, 208, 230, 249, 189, 128, 125, 151, 189, 173, 234, 5, 62, 178, 167, 43, 188, 126, 206, 158, 189, 236, 185, 96, 60, 200, 109, 51, 61, 251, 166, 224, 61, 41, 75, 38, 190, 34, 190, 98, 60, 99, 65, 102, 60, 112, 146, 130, 189, 30, 3, 131, 61, 241, 198, 18, 190, 255, 215, 212, 61, 212, 213, 33, 60, 183, 66, 69, 190, 84, 62, 0, 190, 7, 94, 79, 190, 111, 157, 156, 189, 22, 223, 5, 190, 43, 125, 58, 62, 151, 225, 41, 189, 106, 142, 18, 190, 43, 124, 128, 188, 204, 151, 193, 187, 84, 141, 188, 61, 5, 173, 37, 190, 9, 127, 49, 60, 93, 62, 42, 189, 254, 30, 207, 190, 14, 72, 82, 62, 221, 236, 129, 61, 19, 199, 171, 190, 88, 65, 20, 60, 252, 248, 112, 62, 91, 222, 42, 62, 111, 101, 78, 62, 132, 90, 22, 61, 53, 0, 207, 61, 87, 118, 157, 190, 68, 86, 226, 61, 209, 220, 41, 190, 56, 190, 126, 190, 14, 122, 46, 189, 124, 201, 142, 60, 200, 248, 57, 191, 95, 85, 16, 190, 160, 124, 170, 190, 99, 147, 100, 62, 215, 180, 46, 190, 39, 38, 245, 61, 188, 159, 129, 190, 202, 240, 177, 189, 3, 233, 83, 62, 114, 88, 76, 61, 232, 225, 181, 189, 102, 175, 186, 189, 57, 130, 253, 60, 97, 107, 51, 62, 216, 113, 94, 62, 116, 124, 21, 191, 229, 111, 233, 190, 119, 212, 175, 190, 176, 28, 15, 190, 217, 51, 159, 61, 188, 153, 103, 62, 183, 40, 225, 61, 154, 192, 85, 60, 208, 234, 53, 62, 94, 20, 110, 62, 211, 125, 1, 190, 238, 148, 174, 189, 45, 197, 32, 189, 142, 45, 83, 190, 255, 115, 209, 190, 21, 132, 194, 186, 153, 145, 204, 61, 181, 113, 193, 190, 176, 165, 133, 190, 32, 237, 54, 190, 127, 39, 197, 190, 254, 164, 239, 190, 122, 217, 184, 61, 120, 230, 208, 61, 112, 85, 17, 61, 233, 99, 48, 189, 7, 67, 197, 189, 175, 181, 131, 61, 31, 227, 17, 191, 202, 248, 56, 61, 207, 203, 35, 62, 142, 169, 133, 190, 25, 209, 128, 190, 217, 68, 30, 63, 123, 204, 141, 190, 163, 68, 162, 62, 13, 105, 115, 190, 121, 119, 252, 61, 91, 27, 38, 190, 98, 242, 214, 189, 104, 169, 69, 62, 245, 93, 94, 62, 149, 220, 147, 190, 155, 8, 211, 61, 89, 26, 131, 190, 132, 227, 226, 189, 120, 163, 148, 190, 233, 139, 227, 61, 12, 144, 107, 62, 187, 58, 191, 190, 143, 0, 243, 62, 200, 5, 6, 190, 178, 21, 88, 190, 105, 23, 74, 190, 48, 71, 153, 189, 132, 20, 13, 60, 146, 50, 126, 62, 197, 113, 130, 188, 91, 72, 83, 61, 58, 228, 93, 61, 54, 17, 45, 190, 174, 175, 128, 189, 84, 179, 170, 61, 235, 89, 60, 59, 162, 77, 32, 190, 32, 125, 60, 190, 84, 138, 244, 190, 236, 88, 197, 189, 87, 226, 201, 61, 245, 73, 57, 61, 239, 237, 70, 62, 8, 138, 67, 191, 41, 53, 168, 190, 70, 107, 42, 191, 20, 79, 87, 190, 170, 18, 235, 62, 86, 79, 243, 190, 138, 164, 30, 61, 243, 239, 204, 188, 164, 224, 162, 62, 170, 90, 29, 62, 13, 56, 202, 62, 177, 121, 137, 61, 13, 211, 154, 62, 240, 215, 4, 63, 243, 129, 211, 59, 49, 59, 130, 190, 211, 141, 8, 62, 194, 157, 8, 62, 18, 134, 129, 190, 218, 126, 232, 60, 37, 138, 167, 190, 24, 205, 137, 187, 154, 169, 1, 189, 198, 250, 186, 61, 49, 220, 134, 61, 119, 236, 145, 62, 16, 241, 229, 190, 220, 254, 109, 189, 198, 111, 196, 190, 225, 215, 152, 62, 167, 255, 37, 62, 49, 220, 105, 188, 134, 253, 21, 190, 86, 243, 195, 62, 76, 216, 94, 62, 72, 162, 54, 189, 133, 118, 200, 190, 73, 213, 144, 61, 13, 111, 246, 61, 154, 121, 132, 190, 99, 52, 209, 62, 27, 180, 187, 189, 47, 84, 201, 62, 8, 140, 144, 189, 239, 41, 102, 61, 78, 199, 236, 62, 9, 111, 132, 190, 75, 6, 64, 61, 104, 94, 195, 61, 161, 243, 131, 190, 25, 248, 158, 190, 131, 13, 177, 61, 126, 188, 5, 190, 130, 116, 53, 190, 35, 2, 132, 61, 35, 14, 136, 61, 251, 61, 55, 190, 57, 184, 83, 62, 25, 49, 20, 58, 41, 159, 188, 61, 220, 223, 123, 189, 89, 165, 214, 189, 24, 53, 7, 191, 8, 23, 77, 190, 12, 33, 254, 61, 53, 113, 38, 62, 152, 19, 5, 61, 27, 117, 239, 61, 239, 47, 21, 62, 57, 92, 213, 62, 121, 11, 233, 61, 56, 20, 205, 61, 193, 146, 18, 60, 116, 71, 211, 61, 175, 21, 75, 190, 217, 41, 125, 189, 224, 38, 179, 188, 43, 75, 95, 190, 199, 70, 10, 190, 145, 113, 208, 61, 117, 136, 65, 190, 164, 192, 144, 188, 73, 145, 145, 189, 205, 248, 6, 191, 251, 24, 148, 62, 128, 5, 31, 62, 124, 148, 140, 61, 57, 59, 192, 190, 32, 242, 2, 190, 235, 12, 35, 189, 243, 91, 139, 190, 90, 1, 207, 62, 201, 246, 240, 189, 93, 158, 182, 188, 43, 163, 131, 60, 120, 223, 140, 61, 197, 77, 105, 62, 130, 75, 187, 62, 126, 133, 53, 62, 62, 96, 80, 62, 170, 192, 176, 62, 53, 69, 187, 62, 44, 104, 136, 189, 145, 139, 80, 189, 91, 196, 183, 189, 36, 233, 28, 62, 147, 82, 124, 190, 220, 79, 249, 189, 38, 184, 35, 190, 253, 151, 8, 191, 57, 191, 178, 58, 44, 166, 96, 61, 77, 175, 21, 61, 67, 204, 174, 189, 89, 13, 210, 61, 193, 104, 178, 189, 27, 65, 129, 62, 21, 232, 69, 62, 62, 32, 45, 190, 210, 44, 185, 61, 195, 246, 28, 190, 81, 176, 44, 61, 152, 173, 170, 189, 184, 98, 94, 186, 182, 78, 55, 62, 127, 36, 11, 190, 58, 193, 14, 62, 74, 226, 87, 190, 234, 46, 158, 61, 208, 140, 64, 62, 190, 60, 185, 61, 17, 130, 134, 190, 136, 241, 153, 62, 86, 94, 244, 190, 97, 184, 56, 189, 53, 188, 212, 190, 89, 118, 153, 61, 137, 248, 141, 62, 252, 42, 3, 191, 8, 109, 8, 61, 46, 120, 181, 190, 200, 111, 231, 61, 36, 121, 96, 191, 2, 32, 172, 188, 38, 114, 207, 60, 212, 42, 37, 62, 118, 45, 158, 189, 154, 148, 52, 62, 194, 246, 14, 62, 146, 24, 33, 191, 87, 63, 105, 61, 231, 83, 179, 61, 75, 19, 107, 61, 117, 251, 39, 190, 157, 10, 98, 62, 44, 197, 37, 62, 194, 214, 252, 60, 75, 196, 54, 190, 90, 78, 148, 190, 14, 193, 238, 189, 101, 208, 174, 61, 144, 169, 174, 62, 236, 35, 28, 62, 163, 71, 231, 188, 208, 221, 150, 190, 190, 38, 235, 62, 232, 157, 4, 62, 194, 229, 167, 189, 143, 84, 4, 190, 172, 173, 104, 190, 239, 6, 40, 190, 126, 101, 187, 187, 163, 97, 164, 61, 173, 140, 162, 190, 130, 119, 110, 62, 27, 51, 14, 62, 1, 76, 43, 186, 109, 59, 216, 61, 197, 228, 155, 62, 183, 125, 107, 61, 240, 252, 2, 63, 151, 86, 104, 62, 18, 73, 94, 189, 251, 70, 103, 190, 189, 32, 107, 190, 24, 3, 55, 190, 199, 156, 65, 190, 107, 98, 38, 190, 32, 207, 186, 189, 10, 16, 252, 61, 182, 59, 152, 190, 110, 185, 186, 61, 213, 75, 187, 190, 71, 214, 128, 190, 112, 61, 220, 190, 230, 151, 63, 190, 76, 190, 64, 62, 218, 83, 203, 189, 192, 48, 143, 62, 19, 199, 73, 62, 205, 215, 86, 62, 207, 181, 160, 189, 226, 42, 232, 61, 223, 159, 64, 190, 208, 107, 115, 61, 7, 45, 172, 62, 122, 71, 118, 62, 99, 117, 4, 190, 87, 239, 53, 62, 3, 161, 77, 189, 174, 35, 118, 190, 42, 111, 109, 189, 127, 37, 193, 189, 215, 136, 78, 62, 226, 239, 249, 189, 233, 170, 6, 61, 12, 231, 175, 62, 71, 86, 84, 62, 71, 75, 102, 189, 21, 37, 131, 190, 179, 39, 201, 61, 192, 48, 208, 61, 244, 10, 146, 189, 194, 251, 60, 190, 70, 75, 193, 60, 195, 169, 240, 188, 115, 244, 155, 61, 214, 59, 111, 60, 113, 111, 145, 189, 130, 217, 24, 190, 222, 0, 241, 61, 122, 166, 4, 185, 180, 246, 153, 189, 232, 164, 215, 189, 43, 52, 37, 61, 124, 221, 245, 189, 237, 246, 36, 190, 114, 55, 69, 190, 140, 66, 222, 60, 90, 237, 70, 190, 166, 42, 135, 189, 209, 42, 247, 61, 142, 111, 46, 190, 200, 63, 195, 189, 160, 94, 16, 190, 210, 126, 39, 59, 86, 101, 10, 62, 205, 23, 0, 190, 62, 216, 70, 188, 17, 162, 33, 190, 170, 102, 161, 190, 107, 55, 29, 62, 47, 130, 175, 189, 67, 244, 255, 189, 126, 208, 4, 61, 158, 109, 5, 61, 115, 41, 239, 60, 152, 89, 14, 189, 180, 51, 31, 62, 232, 182, 148, 190, 93, 125, 154, 62, 141, 38, 115, 61, 240, 20, 125, 188, 139, 152, 84, 62, 67, 132, 141, 189, 115, 198, 131, 62, 31, 165, 97, 190, 247, 235, 78, 190, 255, 60, 24, 190, 41, 188, 100, 189, 128, 168, 51, 61, 23, 80, 153, 189, 176, 14, 150, 189, 255, 26, 66, 190, 6, 197, 147, 61, 200, 68, 64, 61, 85, 128, 200, 189, 47, 143, 10, 62, 54, 42, 39, 62, 213, 177, 164, 61, 49, 229, 184, 188, 120, 169, 189, 61, 41, 198, 153, 61, 218, 75, 223, 61, 222, 210, 32, 60, 185, 206, 115, 190, 37, 85, 15, 62, 193, 203, 5, 190, 62, 220, 39, 62, 91, 72, 191, 61, 208, 140, 11, 188, 0, 114, 95, 190, 8, 212, 217, 61, 213, 78, 136, 190, 249, 145, 113, 190, 10, 114, 228, 190, 62, 174, 34, 186, 145, 199, 135, 62, 119, 249, 200, 190, 113, 39, 53, 62, 198, 173, 209, 190, 165, 227, 100, 189, 235, 185, 248, 190, 193, 237, 120, 60, 60, 60, 75, 189, 95, 162, 56, 62, 133, 98, 52, 61, 254, 225, 195, 61, 176, 82, 214, 60, 93, 184, 178, 190, 135, 34, 236, 186, 107, 106, 115, 62, 84, 161, 221, 60, 12, 58, 134, 190, 64, 231, 136, 61, 195, 93, 195, 189, 202, 175, 163, 188, 31, 3, 42, 61, 3, 131, 249, 60, 9, 153, 143, 61, 162, 80, 185, 189, 68, 77, 172, 60, 156, 153, 113, 189, 137, 5, 248, 61, 223, 231, 220, 187, 31, 206, 17, 188, 80, 194, 251, 189, 139, 112, 88, 189, 120, 109, 156, 59, 224, 30, 249, 189, 90, 28, 55, 190, 97, 11, 85, 189, 53, 75, 13, 62, 171, 60, 166, 60, 50, 9, 8, 62, 45, 148, 153, 61, 69, 3, 161, 189, 67, 27, 183, 189, 50, 69, 30, 61, 243, 141, 24, 190, 243, 215, 28, 62, 235, 44, 208, 59, 106, 123, 78, 187, 132, 92, 134, 61, 66, 3, 44, 190, 31, 49, 40, 190, 246, 58, 206, 189, 226, 29, 85, 62, 151, 133, 129, 61, 95, 60, 180, 61, 25, 99, 58, 191, 150, 146, 28, 62, 73, 77, 73, 61, 48, 114, 223, 189, 227, 79, 23, 61, 126, 213, 110, 188, 228, 206, 98, 190, 91, 76, 155, 61, 28, 140, 98, 62, 250, 59, 236, 60, 251, 140, 50, 189, 47, 114, 119, 190, 214, 146, 232, 188, 182, 172, 101, 190, 241, 10, 147, 61, 117, 21, 203, 190, 41, 57, 17, 62, 87, 185, 91, 190, 163, 84, 223, 61, 13, 107, 226, 189, 245, 84, 156, 61, 220, 159, 23, 190, 185, 42, 184, 61, 245, 76, 113, 62, 101, 131, 138, 58, 186, 226, 44, 191, 202, 99, 242, 190, 35, 93, 195, 59, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 90, 134, 5, 190, 166, 164, 205, 189, 114, 149, 8, 62, 48, 161, 25, 190, 101, 44, 118, 62, 88, 39, 198, 189, 198, 56, 3, 62, 80, 213, 98, 188, 23, 65, 114, 62, 166, 40, 61, 190, 164, 174, 152, 62, 43, 149, 105, 190, 218, 174, 53, 190, 64, 250, 26, 191, 16, 210, 125, 189, 223, 122, 207, 62, 29, 63, 219, 190, 204, 182, 180, 188, 59, 110, 126, 190, 3, 81, 46, 189, 22, 147, 93, 191, 69, 182, 225, 189, 101, 30, 78, 189, 103, 84, 30, 62, 251, 94, 40, 189, 203, 86, 15, 187, 198, 127, 46, 62, 83, 16, 10, 191, 115, 220, 195, 61, 170, 161, 139, 62, 250, 182, 129, 61, 59, 124, 146, 190, 184, 158, 64, 62, 209, 124, 145, 191, 42, 34, 1, 62, 194, 170, 51, 62, 166, 156, 75, 189, 222, 234, 162, 62, 64, 208, 134, 191, 141, 150, 220, 190, 232, 6, 114, 191, 109, 22, 154, 189, 92, 21, 33, 63, 4, 227, 152, 190, 100, 17, 30, 62, 91, 72, 36, 61, 69, 118, 221, 62, 131, 177, 227, 62, 213, 214, 189, 62, 58, 3, 155, 62, 54, 182, 183, 62, 133, 160, 194, 62, 123, 111, 26, 62, 191, 142, 185, 189, 37, 207, 175, 61, 119, 19, 230, 61, 23, 153, 34, 191, 136, 14, 72, 189, 21, 7, 26, 190, 173, 157, 227, 61, 201, 255, 22, 190, 194, 180, 251, 61, 248, 105, 26, 62, 117, 109, 22, 62, 56, 62, 1, 189, 214, 143, 187, 62, 4, 33, 82, 190, 116, 59, 66, 190, 47, 129, 102, 188, 223, 120, 67, 190, 126, 83, 170, 62, 234, 177, 140, 62, 158, 161, 128, 189, 69, 169, 156, 187, 188, 78, 41, 62, 37, 95, 230, 62, 193, 87, 147, 189, 180, 140, 197, 61, 189, 215, 237, 60, 17, 12, 144, 190, 233, 113, 119, 59, 232, 131, 26, 189, 54, 223, 126, 189, 102, 147, 133, 61, 180, 138, 36, 61, 188, 184, 254, 61, 174, 31, 19, 59, 114, 243, 115, 190, 197, 94, 26, 62, 84, 231, 63, 190, 172, 101, 38, 62, 26, 10, 147, 61, 168, 68, 138, 189, 146, 127, 162, 60, 233, 248, 64, 190, 35, 101, 72, 190, 200, 42, 152, 190, 98, 145, 189, 62, 218, 252, 184, 190, 230, 110, 242, 189, 25, 74, 144, 190, 149, 68, 33, 62, 192, 162, 83, 62, 123, 157, 227, 62, 106, 58, 197, 61, 86, 122, 150, 61, 83, 102, 183, 189, 21, 178, 211, 62, 31, 96, 91, 62, 164, 116, 58, 62, 232, 108, 143, 190, 194, 33, 33, 62, 0, 160, 175, 190, 101, 100, 154, 187, 212, 115, 157, 189, 63, 155, 26, 191, 81, 110, 31, 62, 51, 157, 129, 61, 224, 238, 22, 62, 117, 107, 84, 190, 178, 52, 201, 62, 214, 35, 136, 60, 14, 184, 76, 62, 56, 6, 18, 189, 195, 138, 137, 189, 214, 71, 131, 190, 216, 97, 171, 190, 29, 196, 13, 61, 23, 48, 226, 61, 199, 243, 168, 62, 7, 149, 48, 190, 103, 29, 178, 189, 139, 221, 64, 191, 233, 123, 162, 61, 7, 49, 141, 190, 96, 144, 204, 60, 56, 108, 47, 61, 75, 163, 99, 189, 36, 253, 68, 191, 128, 175, 169, 62, 188, 27, 185, 188, 108, 78, 97, 187, 228, 167, 154, 61, 219, 11, 196, 190, 249, 120, 132, 62, 57, 188, 147, 60, 111, 168, 130, 62, 183, 151, 124, 62, 60, 9, 27, 62, 189, 200, 45, 190, 228, 29, 9, 62, 86, 151, 34, 190, 129, 72, 30, 189, 223, 107, 119, 190, 241, 117, 108, 62, 194, 224, 185, 61, 138, 107, 39, 190, 178, 131, 83, 191, 190, 22, 106, 190, 86, 214, 105, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 242, 92, 189, 48, 223, 39, 62, 84, 64, 165, 188, 27, 190, 27, 62, 214, 206, 177, 188, 244, 224, 97, 189, 37, 164, 136, 62, 14, 189, 138, 189, 126, 147, 34, 190, 209, 5, 8, 190, 106, 105, 195, 61, 29, 229, 34, 189, 115, 16, 24, 62, 130, 38, 83, 189, 179, 102, 200, 187, 12, 42, 214, 61, 187, 137, 216, 189, 54, 34, 82, 62, 248, 19, 37, 59, 26, 82, 24, 61, 160, 1, 255, 60, 62, 91, 144, 61, 52, 212, 24, 62, 170, 172, 92, 62, 231, 14, 217, 189, 16, 215, 207, 189, 99, 144, 176, 58, 142, 18, 153, 61, 22, 129, 163, 61, 47, 189, 143, 190, 171, 197, 28, 190, 50, 56, 84, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 172, 215, 190, 145, 6, 82, 62, 202, 156, 214, 62, 2, 252, 90, 63, 101, 215, 107, 61, 112, 132, 136, 190, 28, 34, 14, 63, 185, 132, 87, 190, 18, 181, 47, 190, 131, 109, 13, 191, 104, 102, 4, 190, 44, 157, 138, 190, 99, 224, 187, 190, 33, 70, 196, 190, 26, 13, 27, 191, 121, 36, 215, 62, 225, 149, 243, 190, 59, 105, 116, 62, 68, 195, 161, 190, 165, 63, 173, 62, 31, 139, 147, 190, 89, 122, 15, 62, 86, 55, 153, 60, 206, 180, 155, 190, 200, 151, 170, 188, 114, 110, 101, 62, 56, 206, 4, 190, 145, 81, 178, 190, 223, 7, 27, 191, 177, 154, 195, 190, 127, 240, 5, 63, 62, 228, 167, 62, 107, 67, 156, 189, 243, 215, 43, 60, 54, 31, 209, 188, 224, 177, 13, 189, 96, 34, 249, 189, 189, 222, 156, 190, 65, 105, 6, 190, 101, 162, 89, 62, 254, 106, 128, 188, 128, 139, 11, 62, 60, 239, 197, 189, 63, 244, 248, 189, 12, 108, 168, 190, 116, 11, 222, 62, 168, 60, 9, 190, 56, 27, 219, 61, 19, 165, 180, 62, 11, 68, 71, 190, 144, 24, 194, 189, 48, 120, 206, 61, 11, 113, 3, 190, 32, 115, 31, 62, 108, 137, 92, 190, 202, 75, 58, 189, 225, 10, 158, 189, 166, 58, 2, 190, 66, 97, 20, 190, 48, 147, 3, 190, 92, 108, 144, 189, 61, 101, 180, 189, 250, 167, 76, 188, 147, 9, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 131, 88, 61, 3, 116, 199, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 138, 193, 62, 70, 89, 231, 62, 81, 27, 161, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {98, 62, 169, 191, 33, 17, 102, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}