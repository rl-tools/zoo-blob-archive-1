// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 124, 79, 63, 194, 35, 1, 63, 123, 245, 129, 62, 183, 127, 63, 63, 51, 53, 96, 191, 238, 148, 129, 62, 0, 6, 75, 62, 221, 107, 248, 62, 140, 36, 147, 62, 65, 66, 70, 190, 150, 0, 193, 190, 196, 127, 221, 190, 105, 10, 91, 62, 65, 155, 128, 63, 95, 29, 54, 62, 217, 141, 63, 191, 225, 181, 14, 191, 0, 24, 74, 190, 93, 86, 18, 189, 10, 64, 164, 63, 12, 219, 49, 63, 45, 114, 23, 63, 228, 73, 114, 63, 202, 60, 32, 191, 144, 76, 235, 61, 203, 85, 213, 63, 148, 85, 32, 63, 204, 107, 34, 63, 101, 61, 27, 62, 133, 237, 47, 188, 234, 166, 80, 63, 77, 126, 152, 188, 248, 86, 164, 60, 93, 183, 70, 63, 111, 85, 148, 191, 198, 68, 167, 190, 165, 126, 166, 190, 1, 128, 207, 191, 161, 145, 20, 191, 120, 85, 215, 190, 95, 191, 112, 191, 195, 139, 52, 190, 110, 114, 170, 190, 116, 44, 115, 63, 68, 21, 63, 191, 227, 170, 71, 63, 58, 76, 44, 62, 239, 139, 60, 189, 45, 81, 94, 190, 208, 4, 162, 62, 67, 110, 107, 191, 248, 231, 88, 63, 55, 123, 241, 62, 108, 239, 98, 62, 207, 43, 192, 190, 39, 251, 9, 191, 209, 209, 227, 190, 199, 49, 21, 191, 21, 19, 111, 191, 165, 114, 150, 62, 39, 124, 31, 191, 231, 98, 75, 191, 169, 196, 170, 189, 239, 207, 35, 190, 94, 56, 28, 190, 94, 8, 56, 61, 255, 217, 147, 61, 192, 161, 71, 191, 216, 2, 88, 190, 18, 133, 124, 62, 162, 25, 239, 62, 42, 145, 86, 62, 191, 252, 221, 61, 152, 161, 118, 191, 175, 126, 57, 63, 106, 85, 36, 190, 9, 215, 14, 62, 122, 212, 175, 62, 169, 66, 65, 190, 158, 133, 116, 62, 195, 170, 252, 190, 79, 28, 39, 191, 48, 245, 24, 191, 26, 57, 249, 189, 4, 134, 97, 62, 43, 37, 154, 62, 13, 146, 15, 189, 35, 243, 186, 190, 143, 114, 115, 63, 104, 127, 15, 62, 142, 190, 204, 189, 153, 201, 60, 191, 2, 2, 190, 62, 91, 157, 114, 190, 207, 142, 52, 60, 47, 169, 134, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 237, 28, 191, 180, 188, 38, 62, 103, 244, 209, 188, 70, 192, 62, 61, 89, 223, 23, 63, 113, 214, 75, 63, 126, 113, 128, 190, 169, 99, 236, 62, 11, 172, 175, 188, 151, 174, 145, 61, 179, 185, 239, 62, 7, 116, 147, 189, 119, 213, 59, 61, 25, 144, 203, 62, 205, 121, 132, 190, 164, 159, 236, 62, 1, 79, 90, 191, 138, 102, 203, 190, 70, 112, 25, 62, 146, 183, 65, 190, 50, 191, 204, 62, 162, 118, 17, 191, 17, 190, 128, 62, 173, 246, 185, 189, 136, 2, 27, 190, 45, 97, 63, 63, 235, 186, 181, 190, 173, 159, 8, 63, 69, 190, 5, 191, 171, 80, 169, 62, 252, 44, 156, 190, 226, 175, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 128, 29, 191, 70, 18, 142, 190, 60, 59, 87, 188, 100, 26, 142, 189, 246, 211, 73, 62, 33, 27, 161, 62, 216, 108, 206, 189, 92, 164, 202, 190, 220, 197, 0, 190, 22, 182, 31, 191, 107, 246, 20, 62, 243, 10, 83, 191, 21, 173, 61, 190, 20, 41, 152, 61, 16, 157, 171, 62, 218, 213, 165, 62, 245, 76, 219, 61, 11, 91, 2, 190, 4, 33, 78, 62, 230, 128, 193, 62, 3, 208, 100, 62, 138, 129, 11, 190, 161, 232, 73, 61, 110, 134, 137, 190, 141, 65, 103, 190, 108, 94, 4, 61, 15, 33, 17, 191, 192, 192, 33, 62, 100, 43, 29, 61, 49, 184, 39, 62, 35, 126, 68, 62, 171, 220, 56, 62, 103, 217, 245, 190, 231, 21, 163, 62, 240, 46, 225, 187, 33, 206, 30, 190, 194, 166, 27, 189, 91, 20, 139, 187, 221, 26, 210, 61, 48, 14, 37, 62, 148, 186, 121, 62, 194, 11, 187, 61, 174, 18, 115, 190, 114, 164, 204, 62, 249, 39, 63, 61, 12, 31, 30, 60, 134, 35, 216, 187, 146, 129, 11, 190, 27, 73, 68, 190, 137, 201, 156, 190, 108, 55, 186, 189, 42, 44, 11, 191, 140, 46, 202, 189, 13, 56, 250, 189, 72, 10, 116, 60, 180, 10, 5, 190, 9, 168, 9, 62, 14, 189, 221, 61, 91, 221, 142, 62, 253, 77, 189, 61, 165, 223, 251, 60, 90, 222, 183, 187, 171, 250, 157, 190, 221, 214, 117, 189, 115, 239, 14, 190, 118, 254, 216, 62, 67, 166, 16, 62, 74, 243, 16, 189, 41, 180, 127, 191, 225, 95, 55, 190, 131, 220, 82, 190, 186, 176, 143, 189, 155, 19, 112, 62, 59, 253, 81, 191, 206, 123, 110, 191, 2, 251, 210, 60, 92, 163, 243, 61, 141, 179, 62, 62, 230, 13, 191, 61, 220, 55, 15, 191, 186, 60, 79, 62, 125, 55, 164, 188, 6, 184, 98, 62, 84, 99, 67, 61, 122, 146, 123, 62, 230, 78, 85, 61, 121, 188, 74, 190, 213, 110, 70, 62, 227, 150, 50, 62, 28, 92, 240, 189, 125, 254, 88, 61, 56, 80, 237, 189, 192, 121, 134, 189, 237, 86, 183, 191, 184, 29, 144, 189, 125, 143, 245, 61, 249, 132, 194, 189, 150, 182, 142, 62, 121, 63, 54, 190, 21, 139, 8, 191, 244, 199, 180, 61, 244, 18, 79, 59, 147, 246, 39, 62, 77, 72, 210, 189, 41, 40, 96, 62, 101, 185, 184, 62, 43, 63, 215, 190, 59, 140, 9, 189, 25, 194, 173, 191, 234, 254, 52, 189, 4, 30, 139, 191, 236, 7, 18, 191, 74, 74, 162, 191, 84, 199, 18, 190, 235, 25, 17, 62, 203, 66, 181, 190, 156, 233, 124, 61, 232, 179, 14, 189, 69, 210, 80, 190, 95, 245, 168, 189, 53, 33, 185, 62, 116, 32, 85, 62, 115, 72, 250, 189, 95, 54, 110, 62, 161, 114, 164, 61, 252, 210, 192, 61, 50, 62, 240, 187, 40, 236, 220, 191, 187, 188, 7, 60, 89, 147, 178, 189, 62, 106, 70, 188, 58, 173, 225, 189, 218, 145, 252, 189, 101, 3, 161, 189, 17, 8, 206, 189, 247, 161, 199, 188, 204, 182, 61, 190, 26, 88, 200, 61, 79, 141, 153, 188, 0, 123, 15, 190, 229, 78, 43, 190, 137, 251, 130, 189, 74, 8, 42, 190, 217, 26, 43, 190, 106, 193, 219, 59, 101, 221, 141, 189, 79, 2, 12, 62, 247, 168, 21, 62, 74, 234, 148, 61, 152, 4, 255, 61, 254, 120, 249, 61, 219, 133, 92, 189, 172, 155, 233, 61, 205, 255, 30, 190, 226, 85, 126, 61, 212, 129, 207, 189, 219, 35, 254, 61, 91, 26, 47, 188, 189, 48, 21, 187, 2, 45, 223, 189, 142, 179, 230, 189, 230, 104, 162, 62, 48, 248, 229, 61, 10, 94, 145, 191, 252, 146, 131, 61, 68, 67, 170, 191, 114, 90, 212, 60, 3, 205, 23, 62, 92, 125, 200, 61, 76, 48, 129, 190, 5, 243, 229, 62, 187, 241, 128, 189, 124, 248, 15, 192, 80, 171, 244, 190, 153, 31, 251, 189, 92, 87, 206, 62, 55, 167, 177, 190, 148, 52, 67, 189, 216, 49, 16, 191, 151, 4, 50, 62, 90, 70, 152, 191, 19, 69, 14, 190, 0, 192, 0, 62, 143, 133, 31, 62, 169, 225, 252, 61, 62, 80, 218, 61, 137, 85, 210, 61, 6, 79, 150, 191, 138, 143, 248, 188, 206, 141, 114, 190, 89, 48, 166, 188, 117, 176, 60, 190, 224, 251, 247, 190, 153, 160, 216, 62, 244, 200, 36, 189, 150, 124, 108, 189, 126, 62, 143, 62, 106, 101, 48, 61, 66, 209, 175, 62, 96, 179, 33, 63, 174, 34, 160, 62, 36, 255, 241, 62, 47, 44, 39, 62, 212, 255, 14, 63, 79, 94, 198, 191, 160, 213, 158, 189, 36, 116, 171, 190, 49, 199, 131, 62, 50, 115, 16, 191, 234, 110, 215, 190, 127, 160, 227, 190, 13, 57, 181, 190, 140, 37, 107, 62, 84, 1, 15, 190, 29, 70, 184, 62, 126, 208, 10, 189, 133, 110, 215, 61, 230, 62, 103, 62, 15, 67, 65, 62, 11, 194, 166, 188, 65, 185, 19, 190, 98, 20, 90, 62, 37, 78, 206, 190, 154, 220, 37, 191, 103, 211, 22, 191, 152, 199, 177, 190, 93, 108, 241, 189, 121, 224, 76, 191, 183, 104, 64, 62, 66, 183, 66, 62, 47, 137, 12, 62, 130, 252, 224, 62, 77, 25, 124, 61, 177, 62, 53, 191, 71, 177, 94, 190, 30, 32, 32, 190, 51, 89, 5, 62, 220, 153, 219, 188, 13, 82, 24, 62, 32, 153, 211, 61, 91, 65, 220, 190, 226, 14, 4, 191, 221, 188, 34, 191, 235, 17, 152, 190, 93, 220, 32, 189, 140, 101, 31, 61, 51, 85, 46, 190, 243, 202, 224, 189, 12, 203, 36, 191, 16, 107, 90, 189, 125, 41, 124, 190, 83, 31, 56, 189, 104, 98, 26, 62, 135, 137, 37, 62, 103, 149, 225, 190, 64, 213, 220, 190, 1, 67, 73, 189, 132, 129, 97, 190, 222, 19, 162, 61, 129, 15, 5, 190, 26, 143, 172, 189, 87, 51, 15, 190, 131, 223, 138, 60, 212, 62, 10, 62, 239, 147, 114, 62, 23, 249, 38, 191, 84, 212, 96, 190, 15, 96, 49, 191, 109, 221, 212, 58, 99, 156, 54, 190, 97, 44, 58, 62, 122, 182, 188, 60, 212, 231, 64, 61, 132, 71, 179, 61, 31, 146, 61, 61, 73, 87, 169, 62, 22, 77, 215, 188, 239, 71, 46, 62, 143, 238, 175, 190, 76, 190, 197, 60, 205, 148, 160, 61, 55, 137, 9, 61, 205, 24, 77, 62, 238, 97, 73, 190, 63, 8, 53, 190, 119, 25, 250, 61, 150, 204, 77, 62, 36, 174, 223, 61, 66, 218, 170, 60, 178, 232, 170, 62, 176, 202, 201, 188, 236, 100, 134, 191, 122, 164, 227, 61, 204, 18, 147, 190, 118, 52, 135, 62, 58, 107, 226, 62, 174, 198, 244, 61, 157, 145, 140, 190, 2, 21, 63, 190, 81, 220, 198, 62, 124, 186, 199, 190, 223, 55, 140, 189, 3, 87, 229, 61, 28, 141, 131, 190, 147, 162, 53, 190, 216, 27, 61, 62, 74, 247, 36, 191, 204, 220, 108, 61, 19, 244, 65, 190, 28, 164, 177, 61, 173, 150, 219, 190, 72, 98, 10, 190, 164, 139, 92, 62, 105, 252, 165, 61, 29, 119, 1, 60, 200, 208, 167, 188, 218, 223, 21, 62, 100, 245, 31, 61, 67, 24, 114, 189, 3, 84, 131, 190, 118, 72, 201, 188, 172, 82, 232, 188, 208, 230, 249, 189, 155, 105, 160, 189, 112, 39, 246, 61, 209, 189, 110, 188, 40, 20, 159, 189, 23, 247, 25, 188, 28, 60, 37, 61, 114, 240, 219, 61, 71, 4, 42, 190, 34, 190, 98, 60, 254, 230, 87, 60, 112, 146, 130, 189, 114, 129, 49, 61, 219, 116, 25, 190, 19, 236, 180, 61, 212, 213, 33, 60, 231, 210, 72, 190, 84, 62, 0, 190, 7, 94, 79, 190, 111, 157, 156, 189, 116, 110, 8, 190, 110, 105, 58, 62, 151, 225, 41, 189, 76, 57, 19, 190, 99, 36, 187, 188, 204, 151, 193, 187, 84, 141, 188, 61, 248, 67, 46, 190, 9, 127, 49, 60, 172, 88, 129, 189, 248, 15, 161, 190, 159, 12, 5, 62, 216, 139, 49, 60, 169, 126, 242, 190, 171, 182, 133, 59, 82, 232, 25, 62, 89, 68, 37, 62, 169, 252, 19, 62, 124, 30, 34, 61, 234, 185, 173, 190, 88, 218, 14, 191, 247, 231, 128, 191, 70, 169, 253, 190, 146, 66, 107, 190, 191, 226, 49, 62, 225, 121, 7, 190, 197, 189, 214, 190, 12, 214, 201, 189, 171, 20, 64, 191, 4, 104, 144, 62, 47, 91, 51, 190, 39, 38, 245, 61, 204, 110, 170, 191, 88, 13, 42, 190, 251, 245, 60, 62, 63, 76, 137, 61, 190, 95, 87, 62, 62, 163, 224, 189, 57, 130, 253, 60, 84, 30, 91, 62, 31, 183, 74, 62, 233, 243, 203, 189, 88, 136, 66, 190, 127, 91, 184, 190, 137, 237, 234, 189, 116, 139, 58, 190, 1, 30, 151, 62, 121, 126, 113, 186, 237, 37, 128, 61, 148, 65, 27, 188, 38, 206, 154, 62, 174, 31, 60, 191, 152, 171, 133, 190, 0, 89, 3, 191, 156, 90, 252, 190, 103, 130, 41, 191, 29, 18, 166, 61, 12, 108, 222, 61, 254, 194, 234, 190, 61, 42, 199, 188, 75, 120, 141, 190, 5, 254, 161, 191, 146, 21, 44, 191, 122, 217, 184, 61, 108, 138, 188, 189, 30, 249, 128, 61, 254, 39, 250, 189, 87, 112, 141, 189, 254, 12, 173, 59, 178, 82, 93, 191, 202, 248, 56, 61, 158, 250, 114, 62, 166, 201, 75, 191, 83, 246, 51, 190, 254, 95, 66, 63, 42, 66, 175, 189, 191, 44, 133, 62, 180, 209, 75, 191, 71, 19, 121, 61, 0, 70, 74, 191, 157, 182, 72, 190, 178, 249, 162, 62, 30, 74, 1, 62, 111, 40, 125, 190, 58, 229, 89, 62, 207, 5, 139, 190, 147, 115, 3, 191, 73, 12, 183, 190, 0, 156, 210, 61, 172, 182, 167, 62, 61, 162, 241, 190, 152, 122, 60, 63, 237, 26, 97, 189, 185, 216, 218, 189, 203, 221, 15, 191, 48, 71, 153, 189, 201, 216, 84, 190, 191, 27, 40, 62, 238, 47, 197, 61, 183, 90, 39, 61, 130, 9, 72, 189, 161, 22, 32, 191, 174, 175, 128, 189, 238, 6, 9, 190, 206, 106, 15, 62, 224, 128, 150, 190, 187, 180, 143, 190, 60, 247, 54, 191, 3, 186, 113, 190, 62, 200, 132, 61, 113, 37, 234, 60, 150, 201, 37, 62, 56, 62, 130, 191, 179, 93, 168, 190, 136, 86, 118, 191, 169, 214, 0, 190, 180, 231, 196, 62, 241, 88, 8, 191, 18, 51, 26, 59, 91, 2, 185, 189, 248, 195, 149, 62, 64, 74, 210, 61, 228, 44, 188, 62, 65, 175, 236, 190, 107, 255, 136, 62, 171, 51, 145, 62, 247, 95, 88, 189, 49, 59, 130, 190, 161, 19, 183, 61, 12, 172, 28, 190, 202, 90, 71, 191, 32, 26, 198, 190, 161, 148, 171, 190, 184, 59, 74, 189, 154, 169, 1, 189, 216, 220, 79, 189, 135, 247, 193, 190, 46, 160, 133, 62, 33, 20, 135, 191, 197, 18, 116, 190, 254, 80, 185, 190, 241, 75, 156, 62, 55, 101, 72, 62, 61, 230, 135, 60, 180, 78, 180, 189, 131, 252, 173, 62, 37, 144, 132, 62, 189, 47, 162, 61, 52, 120, 196, 190, 189, 59, 152, 61, 249, 137, 240, 61, 114, 223, 121, 190, 14, 249, 197, 62, 247, 124, 48, 190, 32, 86, 197, 62, 161, 206, 23, 191, 172, 92, 156, 61, 0, 206, 22, 63, 198, 65, 83, 190, 75, 6, 64, 61, 105, 231, 196, 61, 186, 128, 95, 190, 52, 222, 120, 190, 134, 20, 68, 62, 142, 15, 31, 190, 89, 219, 15, 190, 35, 2, 132, 61, 202, 213, 255, 61, 129, 224, 173, 189, 240, 98, 65, 62, 187, 145, 78, 189, 74, 0, 48, 62, 29, 189, 8, 190, 215, 201, 0, 190, 6, 46, 224, 191, 92, 204, 131, 190, 199, 13, 229, 61, 59, 95, 55, 62, 171, 73, 145, 189, 77, 89, 143, 61, 207, 238, 57, 62, 18, 165, 246, 62, 60, 143, 211, 61, 37, 117, 191, 61, 164, 157, 1, 59, 238, 218, 13, 62, 131, 60, 94, 190, 253, 161, 112, 191, 33, 225, 166, 189, 115, 67, 182, 61, 180, 238, 57, 190, 145, 113, 208, 61, 103, 44, 54, 190, 56, 8, 101, 190, 225, 15, 6, 62, 60, 112, 0, 191, 253, 168, 130, 62, 212, 209, 231, 61, 124, 148, 140, 61, 41, 57, 35, 191, 242, 208, 181, 60, 20, 77, 128, 189, 124, 137, 223, 190, 3, 8, 222, 62, 226, 184, 231, 189, 10, 187, 11, 189, 2, 220, 81, 59, 224, 135, 188, 61, 209, 241, 110, 62, 16, 74, 176, 62, 59, 184, 41, 62, 165, 110, 97, 62, 100, 143, 190, 62, 163, 215, 178, 62, 192, 20, 6, 190, 55, 145, 153, 188, 142, 92, 123, 189, 147, 233, 34, 62, 195, 1, 115, 190, 5, 0, 139, 190, 186, 14, 26, 190, 81, 74, 2, 191, 223, 34, 203, 60, 44, 166, 96, 61, 254, 179, 130, 61, 208, 208, 130, 189, 10, 237, 219, 61, 95, 215, 216, 189, 136, 85, 120, 62, 18, 129, 93, 62, 62, 32, 45, 190, 13, 221, 154, 61, 146, 71, 0, 190, 197, 43, 26, 61, 190, 38, 55, 61, 98, 104, 60, 62, 78, 159, 17, 62, 33, 252, 66, 191, 71, 191, 151, 61, 33, 130, 137, 191, 161, 246, 64, 188, 103, 178, 122, 62, 86, 254, 228, 187, 225, 208, 152, 190, 50, 4, 179, 62, 28, 22, 213, 190, 39, 70, 51, 191, 108, 37, 234, 190, 57, 116, 75, 61, 162, 152, 169, 62, 26, 194, 6, 191, 64, 153, 51, 62, 242, 45, 169, 190, 90, 11, 125, 62, 15, 234, 159, 191, 2, 32, 172, 188, 32, 122, 149, 188, 4, 177, 205, 61, 80, 181, 2, 61, 140, 6, 46, 62, 51, 127, 48, 62, 64, 13, 153, 191, 87, 63, 105, 61, 98, 254, 203, 189, 162, 181, 63, 62, 95, 151, 44, 190, 121, 247, 245, 61, 224, 157, 41, 62, 92, 180, 173, 61, 135, 186, 37, 190, 87, 157, 117, 190, 22, 193, 120, 189, 119, 125, 27, 62, 50, 32, 160, 62, 7, 136, 92, 62, 101, 128, 157, 188, 131, 27, 154, 190, 33, 75, 217, 62, 43, 203, 12, 62, 152, 95, 149, 189, 24, 119, 242, 189, 209, 81, 93, 190, 166, 1, 23, 190, 155, 168, 205, 189, 170, 78, 184, 61, 35, 160, 193, 190, 214, 74, 109, 62, 27, 51, 14, 62, 123, 250, 74, 60, 58, 129, 52, 62, 96, 134, 169, 62, 26, 169, 204, 61, 115, 161, 1, 63, 96, 240, 134, 62, 18, 73, 94, 189, 4, 138, 17, 190, 27, 172, 105, 190, 34, 171, 68, 190, 13, 122, 41, 191, 19, 47, 137, 189, 157, 141, 17, 190, 45, 69, 244, 61, 94, 166, 11, 191, 220, 89, 6, 62, 100, 95, 240, 190, 228, 83, 129, 190, 237, 82, 232, 190, 86, 66, 171, 190, 58, 171, 248, 61, 7, 128, 104, 189, 110, 172, 150, 62, 226, 170, 135, 62, 164, 2, 45, 62, 205, 251, 32, 190, 141, 125, 135, 61, 18, 40, 237, 191, 217, 73, 20, 61, 246, 87, 241, 62, 247, 192, 155, 62, 99, 117, 4, 190, 105, 137, 79, 62, 64, 49, 27, 191, 157, 192, 154, 189, 183, 2, 130, 189, 193, 180, 246, 189, 190, 80, 136, 62, 226, 239, 249, 189, 245, 34, 152, 61, 13, 180, 221, 62, 128, 134, 73, 62, 71, 75, 102, 189, 21, 37, 131, 190, 179, 39, 201, 61, 192, 48, 208, 61, 244, 10, 146, 189, 194, 251, 60, 190, 70, 75, 193, 60, 195, 169, 240, 188, 115, 244, 155, 61, 214, 59, 111, 60, 113, 111, 145, 189, 130, 217, 24, 190, 222, 0, 241, 61, 122, 166, 4, 185, 180, 246, 153, 189, 232, 164, 215, 189, 43, 52, 37, 61, 124, 221, 245, 189, 237, 246, 36, 190, 114, 55, 69, 190, 140, 66, 222, 60, 90, 237, 70, 190, 166, 42, 135, 189, 209, 42, 247, 61, 142, 111, 46, 190, 200, 63, 195, 189, 160, 94, 16, 190, 210, 126, 39, 59, 86, 101, 10, 62, 205, 23, 0, 190, 62, 216, 70, 188, 17, 162, 33, 190, 30, 130, 36, 191, 196, 61, 48, 62, 98, 56, 73, 190, 179, 210, 92, 190, 3, 249, 69, 187, 161, 174, 93, 187, 255, 86, 196, 189, 119, 148, 153, 61, 90, 88, 220, 188, 68, 105, 193, 190, 66, 251, 165, 62, 10, 204, 164, 62, 185, 57, 83, 190, 254, 38, 104, 62, 195, 143, 192, 60, 115, 102, 129, 62, 15, 104, 176, 190, 229, 28, 240, 190, 201, 215, 234, 189, 73, 108, 144, 59, 247, 166, 11, 61, 23, 80, 153, 189, 47, 151, 241, 61, 66, 229, 155, 190, 240, 3, 98, 59, 166, 22, 239, 188, 64, 168, 95, 190, 176, 168, 201, 61, 54, 42, 39, 62, 30, 247, 155, 61, 119, 25, 194, 60, 65, 15, 9, 62, 85, 178, 78, 62, 220, 63, 21, 62, 127, 253, 128, 187, 136, 120, 105, 191, 137, 255, 72, 62, 239, 28, 11, 191, 187, 116, 8, 62, 108, 165, 98, 62, 28, 95, 197, 188, 64, 146, 130, 190, 11, 145, 196, 61, 191, 160, 126, 190, 149, 169, 181, 191, 195, 206, 34, 191, 77, 33, 215, 61, 139, 220, 145, 62, 19, 235, 167, 190, 169, 194, 161, 62, 151, 130, 121, 190, 167, 71, 92, 189, 52, 15, 73, 191, 193, 237, 120, 60, 199, 48, 57, 190, 193, 19, 24, 62, 194, 108, 63, 61, 199, 25, 3, 62, 148, 178, 173, 61, 70, 248, 58, 191, 135, 34, 236, 186, 64, 160, 96, 62, 24, 106, 32, 61, 152, 94, 109, 190, 64, 231, 136, 61, 141, 237, 195, 189, 116, 201, 163, 188, 15, 230, 21, 61, 115, 41, 134, 60, 71, 218, 71, 61, 36, 19, 200, 189, 14, 133, 163, 60, 235, 132, 137, 189, 137, 5, 248, 61, 223, 231, 220, 187, 31, 206, 17, 188, 249, 31, 6, 190, 135, 109, 142, 189, 198, 102, 124, 59, 224, 30, 249, 189, 226, 41, 55, 190, 97, 11, 85, 189, 64, 71, 245, 61, 222, 50, 109, 60, 238, 170, 228, 61, 45, 148, 153, 61, 194, 241, 168, 189, 67, 27, 183, 189, 243, 108, 29, 61, 34, 224, 45, 190, 243, 215, 28, 62, 33, 239, 119, 188, 106, 123, 78, 187, 194, 164, 55, 61, 154, 110, 45, 190, 128, 109, 47, 190, 246, 58, 206, 189, 94, 213, 1, 62, 240, 123, 180, 190, 170, 73, 236, 61, 172, 104, 26, 191, 47, 244, 105, 62, 28, 4, 46, 61, 133, 122, 6, 190, 71, 96, 119, 189, 223, 231, 19, 191, 162, 74, 217, 190, 66, 163, 45, 61, 133, 200, 121, 62, 126, 115, 151, 61, 135, 100, 34, 189, 169, 197, 226, 190, 34, 209, 168, 188, 245, 123, 103, 190, 89, 76, 250, 61, 123, 16, 106, 190, 135, 1, 110, 62, 87, 185, 91, 190, 15, 247, 213, 61, 34, 50, 18, 190, 98, 5, 128, 188, 227, 222, 211, 61, 196, 104, 157, 61, 19, 85, 155, 62, 101, 131, 138, 58, 138, 242, 145, 190, 65, 61, 139, 190, 186, 137, 46, 60, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 139, 15, 47, 189, 110, 115, 81, 188, 234, 138, 2, 62, 75, 79, 255, 189, 208, 86, 151, 62, 212, 15, 184, 190, 155, 116, 189, 61, 118, 219, 67, 62, 74, 19, 81, 62, 130, 225, 128, 190, 206, 165, 156, 62, 5, 128, 16, 190, 61, 249, 185, 190, 53, 211, 49, 191, 193, 188, 113, 62, 218, 251, 227, 62, 67, 148, 177, 189, 222, 49, 166, 61, 215, 195, 27, 62, 203, 178, 155, 61, 227, 107, 133, 191, 69, 182, 225, 189, 36, 64, 121, 189, 95, 192, 243, 61, 46, 110, 239, 60, 159, 98, 83, 61, 162, 100, 1, 63, 40, 191, 93, 191, 115, 220, 195, 61, 102, 144, 107, 62, 123, 52, 42, 62, 46, 146, 71, 189, 85, 63, 196, 190, 145, 27, 121, 191, 199, 109, 202, 190, 51, 53, 41, 62, 84, 221, 142, 190, 204, 98, 154, 62, 190, 223, 194, 191, 151, 117, 224, 190, 77, 46, 181, 191, 206, 25, 182, 187, 147, 133, 71, 63, 38, 187, 123, 190, 193, 88, 27, 62, 164, 245, 38, 61, 130, 15, 201, 62, 62, 252, 8, 63, 7, 185, 173, 62, 134, 239, 35, 191, 179, 203, 172, 62, 180, 243, 106, 61, 139, 109, 228, 61, 191, 142, 185, 189, 235, 180, 213, 61, 228, 199, 33, 191, 198, 251, 115, 191, 27, 55, 211, 190, 130, 246, 37, 190, 202, 248, 197, 61, 201, 255, 22, 190, 161, 63, 154, 189, 132, 250, 164, 190, 212, 4, 8, 62, 78, 129, 195, 61, 106, 6, 216, 62, 115, 30, 125, 190, 190, 49, 95, 190, 163, 225, 205, 188, 103, 13, 129, 190, 76, 101, 129, 62, 11, 55, 143, 62, 22, 39, 4, 190, 84, 106, 77, 60, 249, 42, 98, 62, 213, 199, 25, 63, 249, 23, 203, 60, 17, 69, 69, 62, 106, 97, 170, 190, 187, 118, 116, 190, 62, 186, 48, 190, 194, 23, 137, 61, 206, 95, 171, 61, 141, 40, 37, 62, 87, 97, 95, 62, 188, 184, 254, 61, 191, 14, 166, 61, 125, 160, 144, 190, 39, 235, 235, 61, 70, 34, 48, 190, 255, 66, 145, 189, 26, 135, 224, 61, 168, 68, 138, 189, 3, 107, 40, 189, 102, 154, 66, 190, 183, 245, 113, 190, 189, 59, 110, 191, 12, 229, 205, 62, 166, 232, 5, 191, 62, 191, 221, 189, 114, 207, 167, 190, 72, 235, 71, 62, 71, 182, 186, 61, 87, 181, 222, 62, 69, 79, 158, 189, 173, 207, 255, 189, 119, 26, 22, 190, 184, 159, 212, 62, 244, 17, 79, 62, 125, 193, 128, 62, 4, 105, 140, 190, 225, 180, 177, 61, 73, 246, 173, 190, 211, 46, 155, 190, 10, 43, 133, 189, 68, 59, 7, 191, 209, 219, 61, 62, 51, 157, 129, 61, 243, 124, 69, 62, 115, 209, 211, 190, 141, 218, 213, 62, 200, 146, 128, 61, 66, 91, 59, 62, 87, 37, 149, 60, 195, 138, 137, 189, 24, 144, 139, 190, 201, 5, 126, 190, 81, 143, 244, 60, 23, 48, 226, 61, 11, 106, 124, 62, 245, 8, 59, 191, 61, 147, 82, 189, 35, 45, 43, 191, 170, 140, 37, 62, 232, 197, 2, 191, 108, 132, 135, 187, 198, 31, 93, 189, 205, 141, 65, 191, 160, 16, 126, 191, 153, 71, 161, 62, 209, 116, 61, 60, 99, 41, 91, 61, 142, 57, 159, 61, 143, 114, 30, 191, 222, 91, 136, 62, 57, 188, 147, 60, 204, 92, 161, 62, 165, 71, 153, 62, 86, 252, 126, 62, 189, 200, 45, 190, 181, 44, 17, 62, 70, 67, 43, 190, 127, 72, 81, 190, 18, 143, 227, 60, 176, 46, 95, 62, 20, 72, 44, 62, 138, 107, 39, 190, 16, 191, 226, 190, 128, 87, 85, 190, 189, 11, 138, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 186, 164, 61, 170, 9, 193, 61, 207, 19, 60, 190, 131, 139, 189, 61, 243, 197, 211, 188, 224, 196, 160, 189, 108, 232, 128, 62, 148, 155, 128, 188, 14, 22, 10, 190, 48, 195, 180, 189, 175, 14, 177, 61, 23, 171, 249, 188, 25, 163, 59, 62, 118, 164, 130, 189, 9, 159, 240, 188, 168, 69, 225, 61, 38, 200, 46, 190, 164, 125, 62, 62, 24, 154, 160, 188, 254, 5, 0, 61, 140, 179, 157, 61, 62, 91, 144, 61, 171, 104, 20, 62, 237, 18, 137, 62, 139, 118, 4, 190, 73, 34, 154, 189, 99, 144, 176, 58, 153, 160, 46, 62, 114, 192, 178, 61, 244, 217, 87, 190, 183, 131, 4, 190, 138, 129, 167, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 157, 152, 190, 102, 201, 60, 61, 80, 44, 200, 62, 8, 28, 81, 63, 231, 59, 108, 61, 83, 169, 0, 191, 11, 106, 42, 63, 8, 21, 13, 191, 173, 81, 24, 190, 64, 27, 254, 190, 147, 44, 4, 190, 64, 118, 153, 190, 253, 161, 20, 191, 21, 62, 4, 191, 91, 30, 17, 191, 55, 152, 205, 62, 228, 208, 68, 191, 90, 105, 16, 62, 10, 76, 10, 191, 116, 114, 62, 62, 127, 106, 160, 190, 89, 122, 15, 62, 100, 96, 132, 61, 11, 124, 217, 190, 14, 136, 141, 188, 15, 84, 91, 62, 56, 206, 4, 190, 79, 55, 195, 190, 46, 23, 22, 191, 22, 147, 167, 190, 174, 40, 243, 62, 4, 36, 171, 62, 200, 203, 158, 189, 160, 227, 158, 61, 114, 220, 182, 189, 186, 133, 40, 189, 224, 228, 248, 189, 128, 113, 200, 190, 24, 104, 35, 190, 196, 250, 131, 62, 49, 115, 173, 188, 222, 87, 235, 61, 15, 77, 197, 189, 49, 122, 206, 189, 51, 63, 92, 190, 36, 20, 231, 62, 209, 203, 25, 190, 128, 194, 182, 61, 178, 215, 9, 63, 163, 173, 95, 190, 98, 32, 64, 189, 32, 227, 41, 62, 35, 183, 128, 188, 32, 115, 31, 62, 57, 175, 159, 190, 164, 174, 60, 187, 83, 177, 91, 189, 253, 179, 231, 189, 66, 97, 20, 190, 47, 205, 197, 189, 54, 56, 173, 59, 162, 106, 134, 190, 112, 97, 192, 60, 146, 132, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 220, 183, 186, 138, 246, 94, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 25, 81, 63, 245, 227, 251, 62, 79, 165, 176, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 109, 2, 192, 247, 166, 61, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}