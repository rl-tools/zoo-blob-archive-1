// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 37, 77, 63, 252, 231, 4, 63, 203, 183, 134, 62, 106, 71, 63, 63, 123, 206, 102, 191, 51, 118, 130, 62, 242, 212, 77, 62, 159, 132, 250, 62, 117, 134, 150, 62, 100, 109, 47, 190, 190, 86, 230, 190, 99, 230, 190, 190, 22, 251, 98, 62, 210, 26, 128, 63, 124, 117, 29, 62, 182, 237, 65, 191, 212, 195, 16, 191, 163, 238, 69, 190, 200, 27, 63, 61, 167, 11, 162, 63, 47, 249, 61, 63, 24, 94, 31, 63, 22, 17, 110, 63, 114, 231, 34, 191, 191, 211, 48, 62, 187, 174, 192, 63, 121, 144, 52, 63, 222, 136, 33, 63, 184, 101, 56, 62, 203, 58, 133, 188, 198, 71, 83, 63, 236, 185, 8, 189, 6, 33, 151, 60, 7, 2, 78, 63, 116, 76, 143, 191, 144, 30, 163, 190, 120, 88, 175, 190, 154, 131, 200, 191, 35, 161, 27, 191, 101, 254, 209, 190, 119, 27, 117, 191, 64, 169, 246, 189, 141, 17, 165, 190, 34, 106, 130, 63, 20, 61, 64, 191, 45, 125, 72, 63, 72, 201, 77, 62, 243, 96, 56, 189, 213, 63, 132, 190, 167, 119, 226, 62, 186, 223, 107, 191, 73, 176, 87, 63, 9, 158, 253, 62, 111, 251, 85, 62, 110, 80, 239, 190, 137, 188, 26, 191, 238, 212, 213, 190, 127, 196, 14, 191, 233, 30, 116, 191, 58, 92, 153, 62, 177, 161, 40, 191, 69, 204, 69, 191, 126, 67, 143, 189, 239, 207, 35, 190, 94, 56, 28, 190, 94, 8, 56, 61, 176, 165, 180, 61, 159, 68, 59, 191, 108, 10, 116, 190, 149, 132, 120, 62, 146, 5, 247, 62, 9, 127, 87, 62, 26, 167, 163, 61, 241, 98, 117, 191, 21, 251, 61, 63, 182, 70, 63, 190, 138, 124, 224, 61, 113, 83, 198, 62, 157, 139, 52, 190, 184, 79, 89, 62, 149, 13, 1, 191, 247, 153, 36, 191, 104, 234, 25, 191, 58, 108, 250, 189, 4, 134, 97, 62, 43, 37, 154, 62, 13, 146, 15, 189, 180, 139, 196, 190, 245, 105, 102, 63, 144, 231, 42, 62, 228, 93, 3, 190, 13, 218, 66, 191, 244, 107, 190, 62, 71, 235, 113, 190, 160, 146, 42, 59, 8, 24, 136, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 55, 27, 191, 108, 112, 25, 62, 242, 175, 145, 188, 70, 159, 115, 61, 143, 28, 26, 63, 223, 104, 69, 63, 219, 147, 43, 190, 241, 117, 235, 62, 48, 99, 216, 189, 203, 231, 185, 61, 41, 76, 237, 62, 216, 33, 141, 189, 8, 35, 235, 60, 46, 205, 205, 62, 4, 205, 75, 190, 26, 163, 234, 62, 207, 151, 72, 191, 16, 66, 202, 190, 205, 64, 9, 62, 104, 230, 74, 190, 241, 117, 163, 62, 162, 118, 17, 191, 255, 103, 130, 62, 39, 57, 166, 189, 166, 180, 20, 190, 17, 1, 54, 63, 36, 41, 177, 190, 129, 30, 4, 63, 69, 190, 5, 191, 244, 143, 175, 62, 230, 14, 156, 190, 216, 156, 197, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 46, 254, 190, 84, 186, 143, 190, 77, 104, 37, 60, 44, 167, 147, 189, 218, 214, 64, 62, 227, 240, 158, 62, 130, 177, 168, 189, 123, 184, 208, 190, 0, 28, 211, 189, 31, 6, 52, 191, 123, 104, 176, 61, 95, 214, 90, 191, 223, 81, 69, 190, 114, 47, 112, 61, 243, 94, 171, 62, 69, 251, 136, 62, 241, 129, 209, 61, 92, 45, 134, 189, 44, 202, 78, 62, 72, 184, 197, 62, 73, 123, 93, 62, 138, 129, 11, 190, 27, 89, 3, 61, 46, 90, 108, 190, 29, 144, 83, 190, 190, 192, 59, 61, 28, 21, 19, 191, 186, 39, 30, 62, 100, 43, 29, 61, 84, 108, 40, 62, 206, 83, 84, 62, 75, 155, 53, 62, 45, 189, 232, 190, 203, 71, 164, 62, 181, 29, 207, 59, 243, 208, 44, 190, 75, 174, 172, 188, 120, 152, 220, 188, 103, 120, 230, 61, 32, 53, 43, 62, 167, 97, 131, 62, 38, 206, 215, 61, 95, 177, 108, 190, 252, 94, 207, 62, 107, 228, 44, 61, 17, 217, 94, 59, 170, 153, 72, 189, 35, 109, 1, 190, 114, 36, 105, 190, 143, 170, 147, 190, 254, 214, 192, 189, 44, 202, 7, 191, 48, 82, 188, 189, 13, 56, 250, 189, 3, 163, 132, 60, 9, 123, 233, 189, 197, 19, 1, 62, 89, 95, 239, 61, 242, 244, 123, 62, 67, 96, 148, 61, 165, 223, 251, 60, 96, 132, 147, 187, 13, 40, 159, 190, 190, 160, 165, 189, 84, 175, 77, 189, 254, 148, 230, 62, 121, 15, 251, 61, 24, 156, 46, 189, 117, 16, 129, 191, 138, 52, 55, 190, 77, 193, 101, 190, 52, 84, 159, 189, 105, 108, 89, 62, 202, 68, 68, 191, 167, 73, 102, 191, 26, 97, 75, 61, 27, 30, 242, 61, 61, 95, 72, 62, 87, 148, 163, 61, 194, 194, 6, 191, 230, 115, 68, 62, 14, 81, 136, 61, 232, 29, 90, 62, 37, 16, 101, 61, 113, 43, 129, 62, 230, 78, 85, 61, 253, 90, 67, 190, 104, 4, 35, 62, 33, 38, 59, 62, 171, 139, 222, 189, 100, 30, 59, 61, 238, 168, 232, 189, 192, 121, 134, 189, 118, 29, 181, 191, 53, 84, 134, 189, 59, 18, 229, 61, 89, 50, 197, 189, 127, 156, 147, 62, 186, 118, 61, 190, 21, 139, 8, 191, 157, 189, 199, 61, 151, 161, 132, 186, 84, 33, 41, 62, 153, 23, 148, 190, 120, 214, 97, 62, 17, 213, 179, 62, 232, 11, 222, 190, 168, 223, 43, 61, 53, 168, 171, 191, 13, 90, 88, 189, 58, 143, 147, 191, 32, 240, 19, 191, 74, 74, 162, 191, 129, 156, 22, 190, 104, 161, 30, 62, 57, 126, 186, 190, 244, 48, 93, 61, 232, 179, 14, 189, 194, 22, 79, 190, 9, 240, 199, 189, 10, 97, 185, 62, 81, 23, 100, 62, 115, 72, 250, 189, 116, 228, 107, 62, 161, 114, 164, 61, 140, 166, 203, 61, 137, 179, 76, 188, 99, 219, 220, 191, 187, 188, 7, 60, 157, 161, 166, 189, 139, 28, 56, 188, 58, 173, 225, 189, 242, 143, 252, 189, 177, 4, 152, 189, 195, 154, 202, 189, 247, 161, 199, 188, 148, 49, 61, 190, 26, 88, 200, 61, 219, 143, 144, 188, 0, 123, 15, 190, 35, 158, 42, 190, 125, 185, 116, 189, 74, 8, 42, 190, 217, 26, 43, 190, 106, 193, 219, 59, 101, 221, 141, 189, 79, 2, 12, 62, 40, 173, 28, 62, 107, 83, 158, 61, 152, 4, 255, 61, 204, 78, 252, 61, 219, 133, 92, 189, 81, 248, 255, 61, 31, 12, 24, 190, 226, 85, 126, 61, 110, 25, 199, 189, 219, 35, 254, 61, 91, 26, 47, 188, 71, 96, 103, 59, 2, 45, 223, 189, 116, 228, 248, 189, 218, 109, 157, 62, 105, 216, 225, 61, 112, 145, 129, 191, 43, 24, 138, 61, 81, 84, 158, 191, 202, 158, 234, 60, 212, 200, 26, 62, 30, 187, 203, 61, 52, 248, 130, 190, 25, 104, 230, 62, 102, 161, 126, 189, 165, 67, 251, 191, 217, 213, 233, 190, 109, 58, 238, 189, 101, 86, 207, 62, 64, 158, 156, 190, 255, 83, 72, 189, 15, 93, 255, 190, 37, 13, 18, 62, 40, 248, 148, 191, 19, 69, 14, 190, 7, 106, 13, 62, 195, 4, 33, 62, 142, 105, 218, 61, 185, 219, 204, 61, 33, 172, 151, 61, 61, 71, 130, 191, 138, 143, 248, 188, 33, 129, 96, 190, 168, 224, 74, 189, 10, 121, 60, 190, 177, 35, 237, 190, 58, 81, 213, 62, 81, 243, 63, 189, 180, 247, 157, 189, 25, 139, 140, 62, 145, 129, 169, 185, 43, 130, 177, 62, 150, 11, 29, 63, 153, 17, 166, 62, 111, 127, 240, 62, 103, 209, 28, 62, 210, 181, 14, 63, 120, 146, 196, 191, 148, 140, 201, 189, 220, 167, 208, 190, 29, 210, 127, 62, 227, 116, 27, 191, 9, 13, 215, 190, 106, 117, 210, 190, 71, 236, 192, 190, 196, 10, 67, 62, 84, 1, 15, 190, 90, 196, 177, 62, 168, 105, 62, 189, 83, 99, 185, 61, 242, 253, 98, 62, 189, 117, 44, 62, 160, 224, 145, 189, 65, 185, 19, 190, 140, 121, 80, 62, 40, 57, 216, 190, 131, 60, 41, 191, 128, 156, 3, 191, 29, 78, 185, 190, 134, 157, 61, 190, 108, 107, 14, 191, 180, 141, 17, 62, 243, 49, 57, 62, 108, 152, 139, 61, 14, 81, 233, 62, 69, 138, 165, 187, 97, 6, 52, 191, 195, 172, 97, 190, 33, 211, 229, 189, 51, 89, 5, 62, 51, 140, 7, 189, 157, 221, 69, 62, 86, 5, 174, 61, 12, 118, 192, 190, 77, 252, 214, 190, 73, 247, 249, 190, 72, 178, 200, 190, 197, 200, 12, 58, 140, 101, 31, 61, 217, 166, 29, 190, 218, 113, 46, 190, 241, 185, 10, 191, 63, 21, 235, 189, 243, 103, 121, 190, 104, 168, 8, 189, 104, 98, 26, 62, 49, 159, 229, 61, 45, 90, 239, 190, 75, 216, 220, 190, 182, 38, 71, 189, 4, 12, 80, 190, 23, 210, 182, 61, 233, 96, 11, 190, 166, 226, 138, 189, 49, 35, 9, 190, 107, 217, 139, 60, 23, 15, 14, 62, 24, 78, 119, 62, 109, 214, 29, 191, 53, 78, 51, 190, 190, 102, 41, 191, 254, 1, 10, 58, 251, 19, 70, 190, 253, 154, 55, 62, 141, 87, 107, 61, 223, 2, 31, 61, 242, 144, 220, 61, 247, 157, 44, 61, 199, 163, 169, 62, 221, 18, 221, 188, 239, 71, 46, 62, 147, 202, 175, 190, 202, 205, 33, 61, 22, 61, 188, 61, 212, 76, 56, 61, 171, 246, 64, 62, 99, 207, 69, 190, 63, 8, 53, 190, 200, 239, 1, 62, 82, 168, 92, 62, 215, 200, 209, 61, 74, 16, 137, 59, 192, 70, 170, 62, 241, 134, 95, 188, 68, 203, 119, 191, 89, 239, 223, 61, 50, 226, 135, 190, 190, 101, 135, 62, 113, 130, 231, 62, 10, 158, 226, 61, 148, 204, 142, 190, 135, 144, 60, 190, 169, 34, 195, 62, 99, 230, 205, 190, 8, 186, 109, 189, 0, 39, 48, 62, 26, 153, 131, 190, 206, 41, 217, 189, 26, 90, 55, 62, 56, 39, 28, 191, 179, 151, 163, 61, 54, 244, 29, 190, 28, 164, 177, 61, 116, 37, 217, 190, 221, 178, 242, 189, 39, 157, 106, 62, 246, 115, 162, 61, 190, 75, 53, 61, 128, 40, 99, 60, 218, 223, 21, 62, 195, 36, 52, 61, 90, 25, 37, 189, 196, 94, 130, 190, 118, 72, 201, 188, 172, 82, 232, 188, 208, 230, 249, 189, 155, 105, 160, 189, 112, 39, 246, 61, 209, 189, 110, 188, 40, 20, 159, 189, 23, 247, 25, 188, 28, 60, 37, 61, 114, 240, 219, 61, 71, 4, 42, 190, 34, 190, 98, 60, 254, 230, 87, 60, 112, 146, 130, 189, 114, 129, 49, 61, 219, 116, 25, 190, 19, 236, 180, 61, 212, 213, 33, 60, 231, 210, 72, 190, 84, 62, 0, 190, 7, 94, 79, 190, 111, 157, 156, 189, 116, 110, 8, 190, 110, 105, 58, 62, 151, 225, 41, 189, 76, 57, 19, 190, 99, 36, 187, 188, 204, 151, 193, 187, 84, 141, 188, 61, 248, 67, 46, 190, 9, 127, 49, 60, 172, 88, 129, 189, 115, 28, 135, 190, 102, 53, 22, 62, 102, 165, 27, 61, 37, 181, 147, 190, 27, 135, 178, 60, 212, 250, 54, 62, 199, 50, 54, 62, 159, 235, 238, 61, 121, 2, 105, 61, 87, 121, 141, 190, 147, 8, 1, 191, 173, 185, 128, 191, 77, 253, 212, 190, 208, 198, 136, 190, 142, 115, 37, 62, 192, 129, 201, 189, 233, 102, 200, 190, 84, 199, 15, 189, 53, 108, 19, 191, 173, 87, 137, 62, 75, 48, 66, 190, 39, 38, 245, 61, 31, 144, 168, 191, 167, 130, 5, 190, 123, 79, 74, 62, 93, 208, 159, 61, 199, 240, 50, 62, 73, 103, 202, 189, 57, 130, 253, 60, 24, 58, 98, 62, 156, 160, 75, 62, 0, 124, 29, 190, 255, 133, 81, 190, 20, 82, 211, 190, 195, 199, 251, 189, 224, 23, 109, 188, 35, 216, 146, 62, 96, 206, 125, 61, 188, 48, 105, 61, 168, 68, 133, 60, 238, 69, 151, 62, 115, 231, 66, 191, 38, 255, 143, 190, 18, 156, 239, 190, 156, 90, 252, 190, 235, 43, 25, 191, 5, 9, 239, 61, 102, 202, 181, 61, 250, 120, 191, 190, 11, 198, 11, 189, 233, 168, 37, 190, 65, 31, 161, 191, 251, 118, 255, 190, 122, 217, 184, 61, 151, 117, 115, 189, 255, 96, 92, 61, 15, 236, 207, 189, 96, 83, 153, 189, 170, 105, 66, 61, 141, 98, 70, 191, 202, 248, 56, 61, 154, 91, 113, 62, 180, 7, 67, 191, 235, 30, 26, 190, 104, 239, 61, 63, 200, 129, 214, 189, 18, 233, 137, 62, 118, 229, 67, 191, 222, 110, 146, 61, 105, 179, 58, 191, 239, 191, 71, 190, 183, 1, 172, 62, 215, 119, 230, 61, 51, 235, 128, 190, 74, 75, 85, 62, 81, 211, 144, 190, 226, 61, 54, 191, 12, 247, 179, 190, 192, 98, 49, 62, 47, 179, 166, 62, 44, 88, 226, 190, 1, 48, 59, 63, 97, 100, 174, 188, 50, 184, 170, 189, 33, 53, 230, 190, 48, 71, 153, 189, 39, 131, 83, 190, 108, 11, 57, 62, 171, 28, 164, 61, 212, 102, 25, 61, 99, 14, 68, 189, 133, 99, 1, 191, 174, 175, 128, 189, 94, 189, 189, 189, 247, 100, 8, 62, 79, 115, 157, 190, 52, 183, 141, 190, 18, 79, 77, 191, 11, 2, 37, 190, 147, 3, 130, 61, 72, 204, 178, 61, 200, 222, 50, 62, 12, 161, 128, 191, 154, 98, 168, 190, 242, 73, 61, 191, 44, 100, 47, 190, 91, 89, 185, 62, 230, 21, 10, 191, 195, 70, 149, 59, 222, 144, 168, 189, 110, 87, 152, 62, 252, 72, 216, 61, 66, 29, 187, 62, 121, 222, 192, 190, 241, 96, 138, 62, 200, 92, 138, 62, 195, 45, 41, 189, 49, 59, 130, 190, 163, 247, 177, 61, 38, 227, 24, 189, 88, 91, 65, 191, 211, 166, 25, 190, 59, 120, 173, 190, 199, 185, 19, 189, 154, 169, 1, 189, 207, 5, 11, 61, 39, 157, 166, 190, 231, 122, 134, 62, 167, 163, 117, 191, 166, 137, 104, 190, 232, 229, 184, 190, 125, 250, 157, 62, 246, 122, 50, 62, 200, 35, 156, 187, 60, 12, 168, 189, 173, 126, 175, 62, 152, 64, 132, 62, 132, 146, 181, 61, 151, 238, 199, 190, 174, 221, 178, 61, 5, 216, 239, 61, 253, 32, 131, 190, 205, 114, 197, 62, 109, 82, 53, 190, 60, 222, 200, 62, 175, 86, 23, 191, 68, 151, 152, 61, 225, 247, 15, 63, 14, 113, 113, 190, 75, 6, 64, 61, 107, 48, 204, 61, 61, 52, 97, 190, 70, 139, 133, 190, 228, 86, 36, 62, 38, 111, 20, 190, 250, 17, 42, 190, 35, 2, 132, 61, 50, 13, 220, 61, 172, 174, 206, 189, 139, 238, 69, 62, 78, 111, 81, 189, 195, 95, 66, 62, 25, 51, 199, 189, 105, 198, 14, 190, 225, 148, 211, 191, 203, 127, 134, 190, 46, 137, 221, 61, 233, 59, 24, 62, 140, 154, 132, 189, 250, 98, 120, 61, 214, 125, 60, 62, 224, 29, 242, 62, 56, 117, 188, 61, 242, 242, 187, 61, 212, 222, 54, 188, 157, 155, 6, 62, 72, 92, 105, 190, 74, 157, 69, 191, 142, 244, 188, 189, 15, 203, 200, 61, 103, 40, 57, 190, 145, 113, 208, 61, 143, 128, 61, 190, 52, 6, 63, 190, 87, 121, 38, 62, 165, 95, 242, 190, 6, 184, 122, 62, 52, 122, 227, 61, 124, 148, 140, 61, 236, 95, 34, 191, 147, 30, 77, 61, 160, 27, 153, 189, 46, 4, 211, 190, 128, 135, 226, 62, 20, 114, 249, 189, 178, 117, 242, 188, 204, 34, 188, 58, 226, 168, 160, 61, 212, 116, 115, 62, 194, 164, 172, 62, 220, 190, 55, 62, 200, 221, 109, 62, 51, 216, 193, 62, 113, 119, 189, 62, 102, 176, 241, 189, 223, 7, 201, 188, 37, 216, 138, 189, 199, 22, 43, 62, 245, 57, 106, 190, 80, 217, 133, 190, 215, 169, 27, 190, 104, 91, 11, 191, 66, 126, 134, 187, 44, 166, 96, 61, 182, 109, 139, 61, 120, 70, 163, 189, 96, 237, 208, 61, 196, 50, 217, 189, 254, 210, 128, 62, 156, 99, 75, 62, 62, 32, 45, 190, 166, 219, 133, 61, 35, 13, 21, 190, 127, 122, 48, 61, 104, 164, 239, 60, 205, 114, 48, 62, 108, 196, 22, 62, 49, 250, 29, 191, 41, 155, 170, 61, 138, 236, 124, 191, 199, 53, 202, 187, 158, 132, 133, 62, 179, 101, 240, 187, 187, 127, 153, 190, 167, 154, 179, 62, 13, 219, 214, 190, 12, 217, 33, 191, 80, 232, 225, 190, 217, 151, 183, 61, 97, 9, 171, 62, 219, 113, 218, 190, 244, 197, 49, 62, 131, 234, 70, 190, 192, 241, 129, 62, 131, 143, 150, 191, 2, 32, 172, 188, 13, 179, 26, 188, 5, 51, 224, 61, 197, 101, 186, 60, 101, 114, 45, 62, 115, 166, 98, 62, 102, 72, 135, 191, 87, 63, 105, 61, 178, 195, 141, 189, 50, 6, 55, 62, 208, 240, 27, 190, 117, 225, 12, 62, 234, 35, 37, 62, 221, 38, 175, 61, 140, 97, 32, 190, 16, 149, 111, 190, 87, 206, 148, 189, 52, 109, 27, 62, 189, 129, 168, 62, 173, 150, 93, 62, 24, 94, 101, 188, 62, 19, 156, 190, 209, 174, 215, 62, 142, 169, 7, 62, 67, 75, 166, 189, 170, 153, 234, 189, 170, 17, 94, 190, 102, 38, 18, 190, 251, 185, 192, 189, 242, 1, 193, 61, 12, 238, 179, 190, 1, 98, 112, 62, 27, 51, 14, 62, 187, 82, 155, 59, 202, 32, 52, 62, 85, 242, 167, 62, 28, 128, 199, 61, 132, 67, 4, 63, 247, 49, 129, 62, 18, 73, 94, 189, 198, 107, 21, 190, 151, 46, 96, 190, 165, 169, 59, 190, 88, 73, 14, 191, 216, 3, 74, 189, 49, 239, 199, 189, 18, 112, 234, 61, 73, 185, 6, 191, 1, 163, 1, 62, 41, 106, 240, 190, 101, 241, 138, 190, 58, 129, 220, 190, 80, 241, 175, 190, 132, 44, 31, 62, 96, 114, 142, 189, 176, 71, 148, 62, 122, 107, 133, 62, 145, 163, 40, 62, 230, 147, 23, 190, 122, 146, 127, 61, 25, 177, 190, 191, 244, 180, 19, 61, 59, 44, 228, 62, 204, 151, 153, 62, 99, 117, 4, 190, 207, 128, 73, 62, 159, 53, 252, 190, 191, 45, 135, 189, 7, 208, 17, 189, 233, 202, 2, 190, 30, 82, 134, 62, 226, 239, 249, 189, 87, 157, 154, 60, 204, 157, 221, 62, 169, 178, 67, 62, 71, 75, 102, 189, 21, 37, 131, 190, 179, 39, 201, 61, 192, 48, 208, 61, 244, 10, 146, 189, 194, 251, 60, 190, 70, 75, 193, 60, 195, 169, 240, 188, 115, 244, 155, 61, 214, 59, 111, 60, 113, 111, 145, 189, 130, 217, 24, 190, 222, 0, 241, 61, 122, 166, 4, 185, 180, 246, 153, 189, 232, 164, 215, 189, 43, 52, 37, 61, 124, 221, 245, 189, 237, 246, 36, 190, 114, 55, 69, 190, 140, 66, 222, 60, 90, 237, 70, 190, 166, 42, 135, 189, 209, 42, 247, 61, 142, 111, 46, 190, 200, 63, 195, 189, 160, 94, 16, 190, 210, 126, 39, 59, 86, 101, 10, 62, 205, 23, 0, 190, 62, 216, 70, 188, 17, 162, 33, 190, 237, 66, 46, 191, 114, 104, 41, 62, 171, 18, 140, 190, 252, 14, 134, 190, 249, 251, 244, 188, 4, 238, 28, 189, 121, 79, 231, 189, 37, 81, 50, 61, 23, 226, 43, 188, 226, 59, 183, 190, 228, 249, 167, 62, 122, 31, 168, 62, 106, 89, 97, 190, 134, 39, 76, 62, 110, 131, 9, 189, 116, 210, 132, 62, 156, 216, 165, 190, 208, 160, 245, 190, 233, 150, 68, 190, 15, 26, 195, 189, 124, 82, 129, 189, 23, 80, 153, 189, 154, 114, 218, 61, 119, 184, 209, 190, 243, 77, 32, 189, 177, 110, 91, 189, 175, 4, 99, 190, 241, 181, 97, 61, 54, 42, 39, 62, 8, 254, 45, 61, 124, 115, 129, 189, 152, 122, 230, 61, 240, 207, 63, 62, 121, 240, 11, 62, 197, 203, 99, 186, 175, 161, 79, 191, 194, 30, 77, 62, 58, 171, 238, 190, 194, 72, 9, 62, 133, 21, 117, 62, 179, 161, 254, 188, 22, 114, 131, 190, 3, 56, 198, 61, 181, 176, 129, 190, 59, 81, 177, 191, 81, 198, 29, 191, 18, 147, 39, 62, 112, 206, 146, 62, 100, 68, 136, 190, 3, 225, 160, 62, 47, 210, 74, 190, 222, 216, 8, 189, 245, 85, 53, 191, 193, 237, 120, 60, 151, 1, 50, 190, 91, 91, 30, 62, 10, 134, 69, 61, 78, 163, 1, 62, 136, 228, 255, 61, 174, 14, 30, 191, 135, 34, 236, 186, 160, 214, 117, 62, 22, 167, 53, 61, 90, 232, 84, 190, 64, 231, 136, 61, 141, 237, 195, 189, 116, 201, 163, 188, 15, 230, 21, 61, 115, 41, 134, 60, 71, 218, 71, 61, 36, 19, 200, 189, 14, 133, 163, 60, 235, 132, 137, 189, 137, 5, 248, 61, 223, 231, 220, 187, 31, 206, 17, 188, 249, 31, 6, 190, 135, 109, 142, 189, 198, 102, 124, 59, 224, 30, 249, 189, 226, 41, 55, 190, 97, 11, 85, 189, 64, 71, 245, 61, 222, 50, 109, 60, 238, 170, 228, 61, 45, 148, 153, 61, 194, 241, 168, 189, 67, 27, 183, 189, 243, 108, 29, 61, 34, 224, 45, 190, 243, 215, 28, 62, 33, 239, 119, 188, 106, 123, 78, 187, 194, 164, 55, 61, 154, 110, 45, 190, 128, 109, 47, 190, 246, 58, 206, 189, 28, 240, 10, 62, 238, 229, 186, 190, 176, 72, 230, 61, 99, 223, 8, 191, 30, 228, 96, 62, 75, 151, 247, 187, 163, 15, 6, 190, 119, 78, 227, 189, 138, 55, 26, 191, 252, 70, 225, 190, 143, 199, 57, 61, 127, 86, 119, 62, 76, 23, 133, 61, 25, 244, 34, 189, 139, 175, 245, 190, 56, 7, 169, 188, 245, 123, 103, 190, 26, 252, 241, 61, 153, 183, 131, 190, 35, 146, 99, 62, 87, 185, 91, 190, 176, 79, 206, 61, 84, 208, 2, 190, 129, 68, 60, 188, 38, 6, 134, 61, 98, 255, 164, 61, 37, 125, 150, 62, 101, 131, 138, 58, 172, 160, 75, 190, 245, 208, 140, 190, 14, 61, 24, 60, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 161, 230, 103, 189, 44, 73, 234, 188, 35, 209, 230, 61, 195, 111, 233, 189, 176, 97, 153, 62, 134, 158, 134, 190, 178, 190, 160, 61, 220, 219, 77, 62, 169, 134, 66, 62, 1, 232, 130, 190, 145, 221, 155, 62, 128, 143, 17, 190, 158, 31, 153, 190, 31, 40, 45, 191, 33, 111, 131, 62, 197, 1, 228, 62, 78, 160, 193, 189, 57, 163, 165, 61, 210, 249, 40, 62, 7, 220, 60, 61, 166, 191, 125, 191, 69, 182, 225, 189, 84, 32, 82, 189, 126, 71, 228, 61, 105, 4, 64, 187, 21, 170, 28, 61, 98, 11, 255, 62, 9, 55, 59, 191, 115, 220, 195, 61, 92, 0, 132, 62, 67, 185, 2, 62, 249, 244, 42, 189, 21, 3, 190, 190, 188, 168, 124, 191, 89, 227, 159, 190, 34, 142, 36, 62, 1, 52, 111, 190, 166, 22, 159, 62, 76, 166, 193, 191, 0, 181, 229, 190, 50, 14, 155, 191, 9, 254, 55, 189, 222, 141, 68, 63, 126, 249, 130, 190, 158, 183, 27, 62, 123, 220, 71, 61, 37, 243, 199, 62, 49, 33, 7, 63, 25, 31, 170, 62, 74, 60, 7, 191, 36, 176, 172, 62, 102, 137, 151, 61, 78, 88, 254, 61, 191, 142, 185, 189, 39, 43, 207, 61, 17, 221, 254, 190, 229, 132, 114, 191, 72, 97, 105, 190, 183, 183, 47, 190, 131, 38, 222, 61, 201, 255, 22, 190, 43, 157, 208, 188, 235, 106, 146, 190, 118, 214, 3, 62, 212, 243, 139, 61, 254, 139, 220, 62, 196, 25, 122, 190, 30, 84, 151, 190, 156, 171, 247, 188, 34, 12, 140, 190, 40, 28, 137, 62, 140, 66, 135, 62, 194, 36, 254, 189, 120, 239, 43, 60, 83, 250, 102, 62, 48, 163, 26, 63, 122, 65, 54, 188, 27, 56, 52, 62, 121, 36, 185, 190, 102, 65, 115, 190, 237, 49, 116, 190, 176, 164, 98, 61, 179, 105, 151, 188, 4, 36, 22, 62, 17, 124, 20, 62, 188, 184, 254, 61, 51, 99, 174, 61, 116, 58, 145, 190, 244, 202, 3, 62, 181, 251, 43, 190, 163, 118, 21, 190, 141, 80, 152, 61, 168, 68, 138, 189, 174, 196, 157, 188, 92, 251, 63, 190, 118, 30, 143, 190, 182, 174, 94, 191, 109, 26, 196, 62, 109, 95, 5, 191, 124, 145, 216, 189, 165, 71, 172, 190, 56, 216, 64, 62, 22, 113, 9, 62, 117, 230, 218, 62, 53, 255, 65, 188, 158, 59, 11, 190, 136, 254, 42, 190, 225, 232, 204, 62, 231, 121, 80, 62, 74, 71, 114, 62, 227, 161, 139, 190, 32, 234, 139, 61, 212, 171, 173, 190, 182, 35, 155, 190, 219, 216, 130, 189, 33, 141, 10, 191, 209, 211, 50, 62, 51, 157, 129, 61, 48, 170, 52, 62, 188, 147, 210, 190, 107, 63, 210, 62, 218, 7, 64, 61, 26, 0, 64, 62, 16, 98, 233, 59, 195, 138, 137, 189, 12, 173, 72, 190, 25, 27, 133, 190, 145, 149, 10, 61, 23, 48, 226, 61, 158, 83, 138, 62, 220, 188, 65, 191, 103, 28, 73, 189, 181, 51, 29, 191, 239, 72, 32, 62, 34, 88, 18, 191, 100, 69, 2, 60, 208, 148, 84, 190, 79, 38, 64, 191, 5, 102, 125, 191, 138, 228, 163, 62, 161, 174, 68, 60, 26, 32, 67, 61, 40, 88, 176, 61, 119, 115, 31, 191, 27, 81, 140, 62, 57, 188, 147, 60, 201, 47, 161, 62, 29, 79, 149, 62, 115, 248, 117, 62, 189, 200, 45, 190, 142, 160, 17, 62, 112, 49, 43, 190, 68, 17, 57, 190, 209, 234, 58, 188, 224, 196, 106, 62, 4, 82, 37, 62, 138, 107, 39, 190, 104, 30, 194, 190, 65, 171, 68, 190, 52, 102, 148, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 41, 144, 61, 159, 113, 214, 61, 105, 167, 50, 190, 46, 32, 245, 61, 214, 206, 177, 188, 15, 226, 160, 189, 168, 11, 124, 62, 189, 205, 84, 189, 140, 45, 250, 189, 107, 27, 188, 189, 175, 14, 177, 61, 41, 70, 186, 188, 105, 145, 51, 62, 38, 86, 134, 189, 45, 104, 218, 187, 42, 188, 160, 61, 111, 126, 45, 190, 63, 0, 65, 62, 23, 74, 140, 188, 141, 101, 9, 61, 81, 158, 156, 61, 62, 91, 144, 61, 160, 111, 6, 62, 10, 134, 137, 62, 139, 118, 4, 190, 82, 223, 179, 189, 99, 144, 176, 58, 134, 26, 47, 62, 92, 80, 208, 61, 227, 8, 92, 190, 82, 60, 22, 190, 59, 170, 159, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 167, 190, 190, 34, 94, 138, 61, 43, 62, 200, 62, 99, 88, 88, 63, 101, 215, 107, 61, 130, 159, 241, 190, 88, 181, 41, 63, 46, 78, 246, 190, 222, 224, 27, 190, 51, 22, 2, 191, 147, 44, 4, 190, 40, 35, 151, 190, 195, 215, 16, 191, 22, 58, 1, 191, 118, 134, 18, 191, 185, 168, 207, 62, 40, 221, 58, 191, 212, 210, 19, 62, 118, 42, 2, 191, 91, 17, 90, 62, 32, 40, 158, 190, 89, 122, 15, 62, 8, 50, 63, 61, 120, 67, 211, 190, 14, 136, 141, 188, 36, 12, 94, 62, 56, 206, 4, 190, 65, 201, 189, 190, 61, 41, 22, 191, 248, 195, 174, 190, 111, 203, 236, 62, 226, 232, 172, 62, 188, 156, 148, 189, 217, 108, 168, 59, 86, 173, 228, 189, 6, 230, 21, 189, 96, 34, 249, 189, 215, 52, 178, 190, 58, 186, 45, 190, 70, 78, 148, 62, 33, 88, 194, 188, 7, 173, 13, 62, 15, 77, 197, 189, 134, 179, 211, 189, 37, 37, 132, 190, 166, 37, 245, 62, 27, 102, 27, 190, 50, 89, 188, 61, 53, 97, 23, 63, 12, 245, 133, 190, 162, 67, 128, 188, 79, 244, 21, 62, 59, 205, 148, 59, 32, 115, 31, 62, 60, 26, 185, 190, 135, 240, 14, 61, 83, 177, 91, 189, 166, 204, 217, 189, 66, 97, 20, 190, 23, 158, 169, 189, 186, 146, 83, 186, 115, 218, 137, 190, 223, 173, 55, 189, 166, 146, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 141, 4, 188, 137, 191, 114, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 201, 131, 63, 252, 171, 130, 191, 88, 104, 0, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 203, 86, 62, 145, 79, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}