// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 224, 125, 62, 182, 19, 21, 62, 55, 162, 178, 62, 43, 142, 37, 62, 210, 93, 95, 191, 253, 201, 234, 61, 91, 164, 81, 62, 137, 253, 48, 62, 99, 185, 153, 62, 88, 147, 27, 190, 143, 231, 211, 62, 165, 223, 243, 189, 254, 19, 63, 61, 96, 127, 222, 62, 220, 27, 184, 61, 95, 240, 26, 191, 155, 129, 56, 61, 76, 252, 86, 190, 92, 57, 76, 190, 92, 181, 207, 190, 225, 168, 182, 62, 8, 149, 76, 63, 169, 112, 41, 63, 39, 251, 3, 191, 36, 111, 168, 190, 194, 179, 198, 189, 191, 98, 23, 63, 112, 212, 133, 62, 103, 50, 155, 189, 99, 44, 140, 188, 217, 239, 23, 63, 170, 31, 83, 190, 73, 238, 139, 61, 193, 99, 231, 62, 73, 154, 192, 190, 205, 37, 214, 190, 182, 128, 95, 190, 226, 180, 166, 190, 253, 77, 24, 191, 83, 12, 20, 190, 253, 170, 75, 191, 182, 173, 199, 190, 111, 24, 206, 190, 50, 194, 145, 63, 210, 22, 247, 190, 97, 116, 6, 63, 9, 22, 1, 62, 204, 91, 207, 60, 96, 151, 45, 191, 159, 145, 145, 63, 191, 245, 10, 191, 18, 110, 10, 63, 173, 143, 49, 61, 198, 172, 139, 62, 157, 80, 18, 191, 200, 113, 6, 62, 122, 27, 139, 190, 75, 172, 74, 190, 107, 108, 75, 191, 39, 183, 119, 62, 212, 251, 186, 190, 245, 194, 67, 191, 247, 85, 139, 190, 19, 175, 84, 190, 189, 91, 22, 190, 36, 99, 193, 61, 101, 117, 240, 61, 7, 61, 52, 62, 165, 224, 189, 188, 247, 243, 240, 188, 174, 243, 119, 62, 32, 71, 146, 62, 154, 102, 101, 190, 5, 16, 159, 191, 4, 83, 216, 62, 50, 181, 192, 190, 246, 145, 171, 190, 89, 24, 206, 62, 46, 124, 17, 189, 33, 116, 75, 62, 85, 13, 197, 190, 138, 251, 113, 190, 88, 116, 94, 191, 143, 254, 193, 190, 0, 212, 76, 62, 155, 39, 198, 62, 218, 78, 198, 189, 223, 248, 158, 190, 154, 7, 6, 63, 156, 48, 110, 62, 36, 110, 103, 189, 62, 63, 21, 191, 8, 103, 198, 62, 206, 162, 54, 61, 130, 96, 68, 63, 153, 141, 12, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 78, 13, 191, 210, 188, 159, 62, 216, 47, 214, 189, 228, 194, 25, 62, 132, 126, 11, 63, 48, 88, 22, 63, 95, 206, 132, 62, 65, 134, 159, 62, 120, 144, 255, 61, 225, 127, 204, 189, 54, 120, 171, 62, 245, 166, 239, 61, 17, 153, 167, 190, 124, 61, 12, 63, 174, 32, 165, 61, 11, 37, 71, 62, 198, 35, 146, 190, 204, 135, 11, 190, 78, 239, 129, 62, 158, 33, 235, 190, 172, 124, 29, 62, 146, 69, 8, 191, 98, 46, 0, 63, 27, 56, 56, 189, 75, 238, 36, 62, 92, 154, 68, 63, 152, 79, 207, 190, 120, 255, 235, 62, 159, 238, 220, 190, 249, 17, 153, 62, 163, 122, 239, 190, 213, 52, 210, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 84, 145, 190, 111, 130, 54, 190, 14, 74, 208, 61, 185, 221, 36, 189, 237, 220, 48, 62, 152, 117, 56, 62, 177, 36, 22, 62, 76, 242, 58, 190, 89, 250, 252, 61, 93, 223, 128, 189, 122, 232, 190, 62, 234, 235, 169, 190, 5, 50, 56, 190, 69, 78, 27, 190, 123, 245, 177, 62, 33, 145, 88, 62, 56, 111, 249, 61, 193, 22, 186, 188, 32, 203, 51, 62, 46, 77, 87, 62, 18, 100, 24, 189, 102, 70, 69, 190, 214, 120, 119, 61, 121, 100, 156, 60, 98, 119, 11, 190, 174, 176, 101, 188, 124, 181, 167, 190, 170, 221, 184, 189, 129, 200, 68, 60, 187, 128, 21, 62, 163, 95, 14, 62, 226, 190, 36, 62, 119, 238, 24, 190, 21, 226, 109, 62, 204, 255, 86, 61, 146, 9, 216, 189, 158, 51, 50, 189, 240, 211, 230, 188, 36, 203, 51, 189, 115, 7, 47, 62, 239, 224, 113, 61, 41, 155, 58, 189, 198, 163, 71, 190, 191, 0, 180, 62, 234, 80, 6, 62, 139, 147, 90, 61, 185, 121, 64, 61, 85, 244, 221, 188, 124, 199, 221, 189, 154, 141, 74, 189, 4, 212, 51, 189, 101, 228, 186, 190, 22, 186, 184, 188, 223, 205, 204, 189, 137, 252, 41, 60, 126, 215, 222, 189, 66, 197, 85, 61, 122, 62, 136, 61, 2, 150, 83, 62, 121, 199, 8, 62, 97, 73, 27, 61, 227, 116, 192, 59, 129, 49, 160, 190, 125, 17, 66, 61, 55, 109, 32, 62, 12, 217, 35, 62, 209, 229, 113, 189, 19, 116, 128, 189, 85, 5, 96, 190, 226, 213, 45, 190, 237, 129, 129, 190, 53, 153, 129, 60, 6, 5, 207, 61, 118, 105, 45, 190, 12, 169, 78, 190, 230, 156, 169, 61, 143, 216, 157, 61, 65, 211, 46, 62, 49, 155, 190, 61, 16, 34, 207, 61, 105, 242, 45, 62, 71, 204, 153, 188, 93, 67, 21, 62, 132, 190, 10, 190, 81, 104, 79, 62, 230, 78, 85, 61, 158, 203, 18, 190, 52, 212, 145, 60, 106, 228, 223, 60, 76, 227, 157, 190, 194, 144, 53, 61, 140, 106, 13, 190, 241, 43, 63, 189, 127, 14, 135, 190, 185, 214, 46, 61, 130, 41, 245, 61, 114, 45, 17, 61, 159, 118, 160, 62, 152, 216, 81, 190, 61, 133, 32, 186, 248, 75, 187, 188, 240, 130, 74, 61, 143, 26, 170, 60, 249, 18, 132, 190, 202, 72, 138, 61, 122, 61, 0, 62, 123, 248, 183, 190, 47, 97, 34, 62, 11, 57, 100, 190, 24, 67, 81, 62, 252, 131, 7, 191, 139, 89, 146, 190, 21, 239, 57, 191, 1, 198, 6, 189, 61, 94, 110, 62, 47, 74, 29, 190, 68, 89, 56, 62, 119, 32, 224, 60, 29, 187, 8, 190, 0, 36, 38, 190, 4, 129, 171, 62, 183, 130, 73, 62, 176, 58, 25, 190, 151, 252, 208, 62, 161, 114, 164, 61, 44, 34, 126, 60, 243, 251, 21, 61, 76, 88, 0, 191, 187, 188, 7, 60, 100, 71, 111, 189, 69, 151, 8, 188, 58, 173, 225, 189, 7, 193, 230, 189, 153, 241, 120, 189, 102, 73, 139, 189, 247, 161, 199, 188, 161, 127, 34, 190, 76, 98, 213, 61, 162, 195, 167, 187, 125, 129, 9, 190, 201, 123, 39, 190, 183, 141, 52, 189, 74, 8, 42, 190, 236, 233, 34, 190, 106, 193, 219, 59, 146, 85, 141, 189, 171, 108, 18, 62, 155, 129, 51, 62, 142, 242, 186, 61, 152, 4, 255, 61, 101, 106, 8, 62, 44, 219, 86, 189, 41, 167, 24, 62, 142, 111, 1, 190, 226, 85, 126, 61, 60, 56, 168, 189, 219, 35, 254, 61, 78, 118, 173, 184, 214, 234, 196, 60, 2, 45, 223, 189, 182, 184, 48, 190, 223, 18, 94, 62, 28, 216, 222, 61, 86, 166, 54, 60, 144, 166, 233, 61, 23, 182, 161, 189, 151, 221, 209, 61, 54, 117, 131, 61, 209, 1, 55, 62, 189, 251, 202, 188, 93, 72, 214, 62, 116, 145, 112, 189, 85, 114, 50, 190, 236, 160, 78, 190, 25, 152, 49, 62, 234, 88, 159, 62, 121, 178, 219, 189, 212, 145, 221, 189, 243, 224, 153, 190, 11, 6, 96, 61, 87, 226, 242, 190, 123, 156, 68, 190, 194, 252, 191, 61, 198, 28, 55, 62, 47, 61, 77, 61, 60, 32, 225, 61, 84, 15, 49, 61, 170, 3, 120, 190, 223, 239, 20, 189, 96, 215, 131, 189, 175, 86, 226, 189, 128, 201, 110, 189, 78, 43, 226, 189, 0, 143, 144, 62, 156, 44, 136, 60, 228, 29, 173, 189, 26, 96, 223, 61, 246, 203, 142, 187, 237, 19, 47, 62, 237, 205, 125, 62, 37, 50, 20, 62, 132, 85, 187, 61, 91, 95, 24, 190, 21, 125, 52, 62, 80, 148, 131, 190, 102, 61, 89, 188, 113, 59, 186, 190, 64, 100, 168, 61, 124, 209, 0, 191, 82, 61, 33, 190, 92, 117, 40, 60, 128, 180, 22, 190, 65, 177, 221, 62, 53, 159, 140, 189, 181, 16, 16, 62, 124, 122, 38, 189, 128, 196, 34, 60, 218, 246, 41, 62, 208, 237, 56, 190, 3, 225, 31, 61, 65, 185, 19, 190, 142, 144, 186, 61, 170, 196, 189, 190, 14, 27, 140, 190, 246, 220, 170, 60, 126, 104, 52, 190, 209, 73, 57, 189, 212, 52, 24, 190, 168, 0, 4, 61, 41, 195, 194, 186, 26, 116, 3, 62, 90, 128, 51, 62, 60, 69, 52, 60, 59, 62, 134, 60, 71, 161, 25, 185, 89, 207, 76, 60, 109, 248, 177, 61, 73, 63, 236, 187, 12, 161, 195, 61, 120, 144, 66, 189, 19, 18, 219, 188, 161, 143, 177, 189, 9, 250, 44, 190, 85, 29, 68, 189, 41, 226, 194, 188, 150, 6, 32, 61, 188, 146, 164, 61, 79, 254, 75, 59, 181, 163, 51, 188, 213, 170, 155, 189, 35, 10, 209, 189, 88, 206, 82, 189, 104, 98, 26, 62, 16, 94, 245, 59, 140, 3, 101, 188, 239, 15, 43, 190, 17, 233, 240, 189, 53, 0, 178, 189, 130, 171, 34, 62, 231, 183, 196, 189, 94, 115, 140, 189, 48, 229, 97, 190, 206, 42, 246, 60, 74, 54, 151, 57, 83, 176, 113, 62, 159, 87, 13, 190, 141, 246, 42, 62, 214, 143, 92, 190, 157, 131, 194, 60, 159, 54, 131, 189, 136, 52, 166, 61, 120, 27, 9, 62, 127, 84, 26, 61, 124, 72, 161, 61, 138, 228, 179, 60, 99, 39, 166, 62, 41, 93, 15, 61, 235, 35, 3, 62, 46, 78, 180, 60, 37, 36, 30, 62, 183, 138, 17, 62, 139, 137, 25, 61, 200, 171, 196, 61, 53, 6, 44, 190, 71, 36, 60, 190, 209, 43, 103, 61, 227, 139, 128, 62, 227, 125, 78, 61, 14, 176, 71, 190, 50, 58, 142, 62, 251, 146, 141, 188, 179, 111, 73, 189, 74, 166, 159, 189, 66, 213, 18, 190, 162, 169, 18, 62, 38, 99, 113, 189, 118, 126, 35, 189, 143, 105, 17, 190, 155, 147, 145, 60, 184, 166, 160, 62, 243, 99, 179, 188, 119, 50, 32, 62, 118, 87, 211, 188, 154, 78, 43, 189, 125, 184, 112, 189, 75, 100, 124, 61, 101, 65, 143, 189, 142, 97, 168, 188, 64, 227, 71, 189, 211, 211, 234, 60, 209, 135, 193, 188, 14, 32, 18, 190, 190, 232, 28, 62, 17, 182, 43, 189, 178, 29, 248, 189, 78, 79, 75, 62, 218, 223, 21, 62, 129, 107, 52, 190, 36, 204, 22, 189, 30, 87, 100, 189, 118, 72, 201, 188, 172, 82, 232, 188, 208, 230, 249, 189, 128, 125, 151, 189, 173, 234, 5, 62, 178, 167, 43, 188, 126, 206, 158, 189, 236, 185, 96, 60, 200, 109, 51, 61, 251, 166, 224, 61, 41, 75, 38, 190, 34, 190, 98, 60, 99, 65, 102, 60, 112, 146, 130, 189, 30, 3, 131, 61, 241, 198, 18, 190, 255, 215, 212, 61, 212, 213, 33, 60, 183, 66, 69, 190, 84, 62, 0, 190, 7, 94, 79, 190, 111, 157, 156, 189, 22, 223, 5, 190, 43, 125, 58, 62, 151, 225, 41, 189, 106, 142, 18, 190, 43, 124, 128, 188, 204, 151, 193, 187, 84, 141, 188, 61, 5, 173, 37, 190, 9, 127, 49, 60, 93, 62, 42, 189, 52, 213, 211, 190, 132, 115, 70, 62, 94, 160, 150, 61, 159, 188, 156, 189, 154, 85, 104, 189, 50, 190, 212, 61, 254, 10, 244, 61, 154, 179, 30, 59, 198, 91, 179, 188, 147, 139, 12, 62, 184, 195, 219, 189, 224, 165, 12, 62, 215, 121, 138, 61, 181, 62, 108, 190, 105, 197, 193, 61, 105, 69, 30, 61, 142, 3, 222, 189, 152, 228, 237, 189, 102, 53, 165, 190, 54, 4, 110, 62, 185, 109, 248, 189, 232, 1, 149, 61, 244, 100, 221, 189, 214, 141, 165, 189, 179, 219, 57, 62, 198, 64, 235, 187, 240, 60, 178, 189, 63, 229, 139, 189, 57, 130, 253, 60, 232, 103, 191, 61, 180, 237, 86, 62, 160, 81, 232, 189, 255, 25, 107, 190, 178, 51, 223, 189, 160, 122, 26, 190, 1, 6, 222, 61, 252, 116, 193, 61, 242, 11, 37, 61, 192, 93, 160, 187, 8, 17, 183, 61, 62, 189, 60, 62, 60, 77, 79, 61, 23, 175, 17, 190, 104, 243, 162, 60, 28, 183, 254, 189, 191, 23, 127, 190, 249, 249, 113, 61, 90, 172, 200, 188, 13, 57, 83, 190, 250, 115, 5, 190, 51, 18, 34, 189, 113, 52, 197, 60, 153, 132, 153, 189, 222, 47, 173, 61, 186, 4, 12, 61, 150, 225, 118, 60, 1, 79, 206, 61, 217, 213, 25, 190, 155, 247, 230, 61, 117, 212, 173, 190, 202, 248, 56, 61, 137, 232, 83, 61, 177, 204, 78, 189, 252, 245, 47, 190, 189, 108, 181, 62, 248, 127, 126, 190, 172, 47, 66, 62, 10, 201, 44, 190, 132, 116, 102, 60, 130, 39, 219, 189, 196, 186, 23, 190, 212, 40, 185, 189, 176, 205, 23, 62, 253, 130, 181, 189, 115, 145, 236, 61, 247, 91, 25, 61, 132, 227, 226, 189, 28, 148, 20, 188, 6, 29, 73, 58, 95, 122, 74, 60, 246, 151, 137, 189, 193, 185, 114, 62, 31, 80, 241, 188, 28, 58, 49, 190, 67, 255, 172, 61, 124, 234, 246, 189, 169, 48, 64, 61, 251, 121, 14, 62, 102, 251, 85, 188, 192, 164, 2, 61, 17, 216, 129, 188, 207, 55, 207, 61, 174, 175, 128, 189, 219, 123, 97, 188, 45, 107, 123, 188, 47, 23, 20, 189, 80, 51, 136, 190, 60, 86, 187, 189, 238, 123, 196, 189, 202, 50, 79, 61, 152, 45, 122, 62, 159, 156, 254, 61, 138, 50, 195, 189, 60, 59, 25, 190, 134, 138, 82, 60, 146, 137, 61, 190, 199, 125, 154, 62, 37, 75, 157, 190, 26, 56, 15, 189, 107, 136, 96, 190, 166, 251, 133, 62, 230, 74, 250, 188, 118, 104, 162, 62, 22, 152, 46, 188, 249, 44, 75, 62, 252, 231, 26, 62, 175, 81, 75, 190, 62, 91, 122, 190, 156, 137, 218, 61, 85, 216, 42, 62, 157, 202, 184, 189, 179, 212, 157, 61, 123, 154, 83, 190, 110, 153, 83, 190, 126, 96, 142, 189, 229, 27, 73, 62, 60, 43, 31, 188, 85, 216, 62, 62, 186, 116, 19, 190, 252, 87, 10, 190, 3, 149, 217, 188, 74, 140, 147, 61, 95, 134, 193, 189, 75, 150, 0, 190, 80, 66, 50, 60, 140, 6, 102, 62, 25, 99, 218, 61, 224, 118, 36, 190, 164, 157, 222, 189, 45, 223, 194, 61, 244, 219, 39, 62, 250, 49, 16, 190, 166, 198, 63, 62, 255, 201, 40, 62, 145, 201, 43, 62, 144, 165, 247, 61, 196, 97, 244, 188, 195, 189, 178, 188, 158, 151, 220, 189, 253, 133, 63, 61, 80, 84, 106, 189, 155, 85, 114, 189, 171, 11, 115, 61, 80, 168, 165, 189, 244, 175, 46, 190, 110, 161, 68, 189, 89, 201, 189, 61, 155, 182, 23, 190, 2, 96, 58, 189, 235, 47, 47, 61, 92, 223, 210, 57, 60, 162, 54, 61, 48, 121, 36, 189, 161, 88, 122, 186, 96, 5, 35, 190, 50, 81, 160, 189, 225, 73, 160, 61, 73, 112, 181, 60, 39, 23, 225, 61, 48, 100, 37, 62, 107, 68, 231, 189, 208, 252, 71, 61, 175, 163, 176, 188, 216, 36, 97, 61, 234, 0, 179, 61, 148, 196, 11, 60, 10, 229, 199, 189, 72, 3, 210, 189, 44, 79, 131, 61, 89, 218, 140, 189, 16, 121, 23, 190, 145, 113, 208, 61, 245, 84, 31, 190, 34, 8, 11, 188, 186, 61, 62, 190, 250, 43, 215, 189, 22, 220, 1, 62, 185, 31, 253, 61, 124, 148, 140, 61, 172, 23, 48, 188, 149, 183, 153, 189, 64, 247, 200, 188, 160, 25, 22, 61, 174, 207, 173, 62, 5, 128, 89, 189, 78, 21, 183, 188, 182, 18, 111, 189, 239, 121, 70, 61, 93, 161, 221, 61, 177, 88, 110, 62, 118, 146, 148, 60, 223, 14, 235, 61, 136, 106, 159, 62, 121, 51, 143, 62, 35, 254, 140, 189, 163, 108, 251, 187, 61, 113, 139, 189, 163, 218, 60, 62, 182, 7, 75, 190, 205, 46, 49, 61, 219, 223, 31, 190, 174, 149, 222, 190, 228, 33, 47, 61, 208, 44, 192, 61, 13, 75, 154, 60, 188, 252, 121, 189, 254, 6, 98, 61, 34, 13, 9, 190, 206, 97, 22, 62, 43, 84, 108, 62, 8, 21, 42, 190, 242, 61, 167, 61, 30, 186, 9, 190, 71, 230, 157, 61, 211, 164, 5, 190, 34, 186, 190, 61, 92, 101, 2, 62, 148, 199, 203, 189, 183, 108, 135, 61, 147, 101, 30, 190, 85, 51, 184, 61, 201, 35, 146, 60, 218, 137, 154, 61, 38, 122, 64, 60, 110, 174, 174, 62, 218, 92, 29, 190, 97, 184, 56, 189, 255, 19, 186, 188, 235, 144, 169, 61, 179, 174, 6, 62, 240, 40, 85, 190, 85, 214, 144, 186, 129, 29, 242, 189, 214, 237, 75, 62, 75, 165, 211, 190, 235, 5, 143, 189, 160, 140, 76, 187, 83, 185, 243, 61, 219, 0, 213, 188, 175, 251, 58, 62, 222, 70, 8, 61, 244, 86, 108, 190, 71, 222, 104, 61, 122, 10, 221, 60, 189, 81, 213, 61, 71, 3, 153, 188, 91, 42, 148, 62, 255, 132, 203, 61, 182, 88, 126, 61, 65, 84, 108, 190, 109, 27, 57, 190, 33, 164, 197, 189, 197, 195, 50, 186, 232, 150, 44, 62, 106, 62, 125, 61, 47, 152, 29, 190, 8, 57, 92, 190, 83, 159, 163, 62, 109, 7, 145, 61, 91, 9, 248, 188, 208, 114, 215, 189, 160, 50, 46, 190, 75, 150, 12, 190, 64, 192, 175, 59, 39, 86, 143, 61, 170, 168, 61, 190, 45, 97, 142, 62, 115, 237, 73, 62, 110, 237, 243, 188, 11, 79, 226, 61, 74, 96, 133, 62, 100, 85, 165, 61, 98, 57, 149, 62, 177, 162, 144, 62, 94, 181, 69, 189, 237, 84, 175, 189, 12, 45, 53, 190, 206, 90, 28, 190, 200, 228, 32, 190, 10, 118, 218, 188, 85, 54, 9, 190, 67, 52, 221, 61, 57, 35, 82, 189, 251, 150, 169, 61, 98, 11, 64, 189, 89, 53, 1, 190, 33, 121, 66, 188, 14, 66, 98, 189, 136, 80, 42, 61, 128, 167, 155, 189, 211, 158, 59, 62, 149, 150, 28, 61, 185, 116, 50, 62, 216, 153, 63, 190, 222, 71, 90, 61, 165, 153, 71, 190, 4, 83, 212, 59, 228, 161, 4, 61, 50, 82, 167, 61, 190, 81, 255, 189, 165, 118, 66, 62, 161, 224, 118, 189, 44, 124, 99, 190, 251, 13, 169, 61, 156, 230, 123, 189, 1, 107, 46, 61, 255, 159, 18, 190, 132, 194, 98, 62, 25, 69, 99, 62, 219, 250, 2, 62, 244, 12, 76, 189, 157, 112, 105, 190, 10, 68, 228, 61, 130, 149, 215, 61, 14, 226, 106, 189, 140, 174, 38, 190, 7, 121, 1, 61, 9, 4, 36, 188, 58, 229, 181, 61, 88, 126, 136, 60, 16, 62, 29, 189, 130, 217, 24, 190, 222, 0, 241, 61, 102, 247, 120, 58, 140, 164, 30, 189, 74, 175, 171, 189, 43, 52, 37, 61, 113, 116, 225, 189, 144, 150, 36, 190, 204, 92, 37, 190, 233, 73, 10, 61, 90, 237, 70, 190, 61, 208, 86, 189, 208, 75, 11, 62, 189, 102, 18, 190, 235, 163, 156, 189, 160, 94, 16, 190, 224, 139, 181, 60, 86, 101, 10, 62, 140, 18, 221, 189, 181, 65, 143, 60, 128, 202, 18, 190, 167, 112, 151, 189, 187, 37, 27, 62, 218, 171, 134, 189, 8, 123, 203, 189, 95, 243, 171, 60, 118, 89, 133, 61, 255, 189, 210, 188, 209, 156, 252, 188, 72, 29, 161, 61, 5, 85, 229, 188, 90, 230, 120, 62, 46, 10, 141, 60, 119, 121, 84, 188, 101, 4, 85, 62, 249, 120, 3, 59, 25, 123, 138, 62, 228, 14, 243, 189, 33, 91, 101, 60, 83, 47, 209, 189, 39, 111, 139, 189, 66, 9, 79, 61, 51, 248, 201, 189, 124, 243, 70, 189, 157, 150, 74, 190, 123, 121, 149, 61, 60, 210, 141, 60, 199, 212, 94, 189, 151, 141, 8, 62, 137, 146, 38, 62, 178, 165, 195, 61, 213, 255, 115, 189, 93, 74, 237, 61, 164, 3, 175, 58, 163, 128, 66, 62, 216, 9, 31, 189, 48, 52, 94, 190, 100, 65, 29, 61, 39, 128, 68, 190, 9, 196, 26, 62, 117, 193, 242, 189, 166, 80, 69, 189, 4, 151, 41, 188, 44, 13, 249, 61, 92, 201, 226, 61, 249, 145, 113, 190, 10, 40, 90, 190, 125, 228, 22, 189, 45, 240, 219, 61, 24, 114, 7, 61, 252, 85, 226, 61, 176, 26, 172, 190, 41, 0, 234, 60, 137, 225, 89, 190, 4, 49, 245, 188, 38, 14, 118, 189, 237, 227, 16, 62, 122, 140, 181, 61, 47, 47, 158, 61, 229, 118, 245, 189, 153, 120, 254, 189, 135, 34, 236, 186, 56, 118, 21, 62, 64, 199, 145, 61, 8, 48, 208, 189, 64, 231, 136, 61, 151, 48, 183, 189, 202, 175, 163, 188, 212, 253, 47, 61, 85, 88, 15, 61, 29, 209, 182, 61, 163, 99, 175, 189, 68, 77, 172, 60, 229, 38, 102, 189, 137, 5, 248, 61, 73, 152, 220, 187, 40, 182, 6, 188, 213, 85, 242, 189, 202, 222, 18, 189, 44, 94, 187, 59, 224, 30, 249, 189, 107, 17, 55, 190, 97, 11, 85, 189, 157, 24, 27, 62, 240, 171, 185, 60, 144, 132, 23, 62, 45, 148, 153, 61, 129, 36, 152, 189, 67, 27, 183, 189, 12, 5, 64, 61, 186, 84, 7, 190, 243, 215, 28, 62, 25, 188, 195, 60, 106, 123, 78, 187, 241, 144, 146, 61, 6, 254, 43, 190, 162, 31, 37, 190, 246, 58, 206, 189, 206, 70, 36, 62, 55, 12, 141, 61, 84, 10, 245, 61, 100, 89, 35, 190, 87, 46, 24, 62, 242, 89, 206, 61, 91, 134, 166, 189, 139, 57, 24, 61, 96, 46, 236, 61, 216, 174, 41, 61, 54, 139, 144, 60, 132, 135, 21, 62, 237, 34, 113, 188, 220, 111, 222, 60, 196, 163, 26, 190, 107, 33, 78, 61, 128, 226, 100, 190, 216, 130, 152, 61, 227, 164, 212, 190, 34, 42, 169, 61, 87, 185, 91, 190, 184, 249, 17, 62, 224, 202, 230, 189, 95, 222, 126, 62, 91, 39, 55, 190, 159, 138, 81, 61, 222, 197, 64, 62, 92, 154, 49, 59, 17, 96, 251, 188, 121, 11, 141, 190, 32, 92, 251, 60, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 172, 72, 58, 190, 205, 157, 123, 189, 16, 100, 112, 61, 190, 49, 76, 189, 149, 10, 58, 62, 209, 197, 240, 188, 239, 69, 211, 61, 236, 52, 94, 190, 165, 238, 74, 62, 240, 249, 128, 61, 174, 23, 127, 62, 49, 206, 37, 61, 218, 174, 53, 190, 120, 28, 141, 190, 192, 113, 146, 61, 235, 253, 65, 62, 71, 53, 179, 60, 102, 55, 166, 189, 184, 56, 39, 58, 65, 39, 130, 188, 87, 94, 235, 190, 53, 85, 42, 190, 87, 148, 154, 189, 165, 103, 215, 61, 45, 233, 18, 189, 158, 93, 145, 188, 29, 206, 156, 60, 248, 98, 86, 190, 65, 32, 195, 61, 231, 50, 99, 62, 127, 247, 133, 61, 45, 39, 65, 189, 32, 199, 192, 189, 20, 11, 208, 190, 40, 97, 126, 60, 26, 237, 179, 61, 68, 143, 47, 61, 156, 180, 84, 62, 69, 230, 236, 189, 212, 170, 158, 190, 102, 71, 0, 188, 222, 90, 183, 189, 39, 12, 121, 62, 18, 193, 39, 190, 232, 175, 214, 61, 73, 240, 35, 190, 137, 44, 181, 62, 24, 86, 157, 60, 196, 252, 141, 62, 162, 105, 54, 61, 244, 193, 94, 62, 12, 53, 173, 189, 92, 61, 142, 189, 191, 142, 185, 189, 69, 69, 233, 186, 22, 196, 2, 62, 122, 149, 137, 190, 178, 243, 221, 188, 123, 137, 140, 189, 73, 38, 199, 189, 158, 4, 56, 190, 134, 94, 2, 62, 152, 19, 0, 190, 50, 115, 247, 60, 101, 34, 83, 61, 14, 48, 93, 62, 125, 129, 30, 58, 157, 170, 114, 189, 74, 97, 26, 189, 239, 73, 226, 189, 108, 91, 35, 62, 236, 8, 239, 61, 136, 249, 33, 190, 148, 220, 25, 189, 231, 170, 234, 61, 188, 121, 33, 62, 187, 222, 250, 189, 32, 150, 189, 61, 104, 21, 151, 61, 47, 72, 88, 190, 174, 107, 78, 61, 25, 19, 254, 61, 141, 169, 220, 60, 185, 186, 27, 189, 226, 72, 62, 61, 229, 201, 17, 62, 201, 36, 199, 61, 222, 238, 176, 189, 116, 190, 159, 189, 203, 63, 63, 190, 200, 180, 89, 189, 223, 5, 139, 61, 168, 68, 138, 189, 26, 210, 31, 190, 31, 223, 203, 189, 167, 251, 18, 190, 119, 94, 130, 189, 129, 31, 122, 62, 110, 163, 99, 190, 53, 182, 8, 190, 67, 220, 174, 189, 209, 207, 45, 62, 154, 32, 234, 61, 167, 38, 180, 62, 178, 196, 215, 59, 171, 151, 162, 189, 100, 132, 193, 189, 133, 187, 141, 62, 199, 21, 47, 62, 83, 243, 80, 62, 212, 213, 96, 190, 234, 152, 65, 62, 25, 82, 144, 190, 185, 204, 144, 61, 206, 250, 193, 189, 178, 40, 7, 191, 227, 242, 46, 62, 92, 147, 203, 61, 54, 43, 3, 62, 73, 175, 225, 189, 42, 171, 154, 62, 231, 16, 192, 60, 203, 146, 19, 61, 69, 196, 28, 188, 57, 114, 45, 189, 214, 94, 55, 189, 9, 222, 163, 190, 54, 249, 171, 61, 23, 48, 226, 61, 81, 157, 11, 62, 69, 53, 29, 190, 59, 167, 19, 190, 205, 166, 19, 190, 248, 98, 30, 60, 24, 27, 30, 190, 26, 143, 145, 61, 31, 243, 107, 190, 232, 228, 134, 60, 86, 218, 90, 190, 191, 194, 137, 62, 239, 184, 165, 189, 160, 181, 180, 189, 85, 110, 134, 61, 42, 135, 209, 60, 122, 167, 96, 62, 128, 113, 234, 60, 90, 124, 59, 62, 239, 204, 9, 62, 114, 110, 109, 61, 189, 200, 45, 190, 56, 27, 198, 61, 241, 135, 79, 190, 154, 26, 216, 59, 11, 205, 201, 190, 100, 85, 98, 62, 183, 126, 6, 60, 90, 120, 24, 190, 239, 192, 168, 189, 200, 192, 129, 60, 137, 241, 235, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 108, 104, 189, 115, 119, 226, 61, 35, 63, 42, 189, 242, 76, 36, 62, 131, 239, 86, 186, 50, 105, 255, 188, 130, 202, 34, 62, 8, 215, 42, 190, 131, 9, 14, 190, 24, 98, 42, 190, 106, 105, 195, 61, 91, 9, 216, 189, 236, 35, 11, 61, 238, 118, 153, 189, 163, 8, 232, 57, 193, 223, 40, 189, 226, 32, 78, 61, 70, 160, 9, 62, 12, 11, 159, 188, 128, 95, 163, 61, 53, 246, 203, 61, 111, 204, 184, 61, 25, 69, 1, 62, 121, 246, 30, 62, 21, 139, 186, 189, 75, 51, 152, 189, 99, 144, 176, 58, 220, 113, 48, 61, 111, 110, 155, 60, 0, 135, 30, 190, 239, 132, 230, 189, 30, 28, 6, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 96, 123, 190, 81, 98, 197, 61, 38, 108, 135, 62, 161, 65, 1, 63, 195, 172, 161, 61, 139, 222, 79, 190, 237, 167, 78, 62, 68, 19, 148, 188, 154, 20, 18, 190, 199, 52, 150, 190, 104, 102, 4, 190, 217, 162, 125, 190, 240, 160, 206, 189, 226, 136, 71, 190, 39, 31, 199, 190, 128, 29, 207, 61, 54, 130, 14, 187, 182, 166, 245, 61, 45, 235, 66, 190, 190, 79, 117, 62, 115, 55, 39, 190, 82, 197, 42, 62, 99, 201, 169, 60, 97, 225, 113, 190, 6, 80, 167, 188, 65, 93, 174, 61, 56, 206, 4, 190, 122, 113, 78, 190, 191, 25, 129, 190, 177, 98, 223, 189, 156, 40, 172, 62, 240, 39, 107, 62, 229, 131, 13, 190, 184, 144, 89, 189, 101, 230, 79, 61, 17, 117, 36, 189, 68, 217, 14, 190, 23, 37, 143, 190, 171, 0, 195, 189, 78, 169, 131, 59, 102, 94, 38, 60, 17, 48, 250, 61, 60, 239, 197, 189, 17, 103, 55, 188, 246, 89, 65, 190, 11, 155, 25, 62, 117, 132, 42, 190, 7, 109, 131, 61, 118, 52, 200, 61, 85, 238, 67, 190, 234, 205, 231, 189, 200, 113, 2, 61, 179, 137, 33, 190, 1, 78, 236, 61, 185, 90, 65, 190, 114, 108, 77, 189, 177, 15, 159, 189, 240, 180, 69, 190, 66, 97, 20, 190, 129, 202, 11, 190, 91, 124, 170, 189, 92, 17, 47, 189, 129, 176, 143, 189, 160, 50, 204, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 173, 126, 187, 101, 3, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 29, 203, 190, 20, 226, 175, 63, 94, 210, 0, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 149, 222, 191, 182, 11, 103, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}