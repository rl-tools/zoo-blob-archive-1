// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 137, 76, 63, 106, 4, 3, 63, 41, 206, 139, 62, 96, 101, 46, 63, 163, 207, 118, 191, 213, 233, 119, 62, 66, 112, 83, 62, 187, 60, 246, 62, 102, 117, 144, 62, 248, 35, 26, 190, 170, 241, 204, 190, 150, 253, 172, 190, 199, 133, 87, 62, 153, 211, 116, 63, 41, 98, 24, 62, 57, 181, 70, 191, 76, 236, 4, 191, 183, 38, 68, 190, 85, 143, 8, 62, 48, 120, 158, 63, 253, 136, 76, 63, 99, 232, 30, 63, 72, 132, 101, 63, 117, 61, 37, 191, 218, 29, 53, 62, 241, 25, 187, 63, 244, 84, 59, 63, 255, 238, 30, 63, 222, 112, 65, 62, 7, 15, 182, 189, 3, 109, 82, 63, 90, 224, 154, 188, 1, 97, 129, 188, 39, 237, 81, 63, 172, 70, 130, 191, 196, 50, 176, 190, 239, 79, 222, 190, 189, 217, 184, 191, 167, 12, 39, 191, 124, 204, 193, 190, 98, 167, 127, 191, 189, 146, 164, 189, 77, 39, 131, 190, 63, 211, 128, 63, 207, 116, 70, 191, 13, 246, 72, 63, 56, 14, 93, 62, 210, 133, 71, 189, 4, 40, 136, 190, 243, 109, 19, 63, 178, 185, 110, 191, 46, 30, 85, 63, 225, 132, 5, 63, 138, 157, 84, 62, 147, 11, 16, 191, 164, 220, 24, 191, 111, 238, 213, 190, 189, 237, 254, 190, 57, 93, 109, 191, 121, 181, 162, 62, 91, 211, 37, 191, 35, 38, 77, 191, 157, 160, 163, 189, 239, 207, 35, 190, 94, 56, 28, 190, 94, 8, 56, 61, 222, 169, 248, 61, 46, 163, 33, 191, 250, 147, 101, 190, 120, 190, 119, 62, 67, 144, 237, 62, 119, 20, 70, 62, 135, 48, 154, 61, 231, 63, 113, 191, 57, 106, 69, 63, 50, 153, 70, 190, 220, 202, 138, 61, 97, 9, 199, 62, 87, 7, 54, 190, 109, 147, 47, 62, 169, 138, 1, 191, 143, 109, 26, 191, 106, 250, 23, 191, 47, 246, 14, 190, 4, 134, 97, 62, 43, 37, 154, 62, 13, 146, 15, 189, 3, 152, 198, 190, 91, 80, 94, 63, 63, 111, 85, 62, 170, 29, 20, 190, 156, 49, 56, 191, 72, 231, 189, 62, 7, 54, 128, 190, 32, 94, 173, 61, 230, 204, 138, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 139, 22, 191, 177, 84, 10, 62, 75, 185, 173, 188, 44, 36, 141, 61, 151, 86, 28, 63, 22, 123, 60, 63, 118, 181, 44, 189, 180, 244, 238, 62, 76, 229, 105, 189, 47, 222, 175, 61, 178, 100, 234, 62, 74, 235, 10, 189, 5, 191, 48, 189, 233, 95, 211, 62, 222, 229, 81, 190, 85, 199, 213, 62, 231, 183, 60, 191, 17, 252, 199, 190, 234, 10, 170, 61, 142, 68, 90, 190, 222, 32, 131, 62, 162, 118, 17, 191, 46, 4, 143, 62, 147, 42, 150, 189, 176, 222, 248, 189, 218, 203, 64, 63, 182, 128, 175, 190, 161, 23, 6, 63, 69, 190, 5, 191, 249, 149, 193, 62, 1, 140, 184, 190, 36, 94, 214, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 49, 172, 190, 178, 30, 170, 190, 80, 247, 151, 60, 152, 248, 141, 189, 28, 161, 56, 62, 106, 124, 153, 62, 196, 33, 170, 189, 26, 221, 209, 190, 228, 20, 220, 189, 231, 25, 63, 191, 244, 56, 0, 61, 200, 74, 94, 191, 251, 10, 74, 190, 3, 52, 223, 60, 121, 89, 176, 62, 207, 54, 94, 62, 40, 155, 228, 61, 70, 220, 50, 189, 228, 193, 84, 62, 175, 178, 182, 62, 136, 12, 70, 62, 138, 129, 11, 190, 198, 94, 141, 60, 202, 13, 76, 190, 165, 160, 99, 190, 157, 87, 112, 60, 95, 17, 18, 191, 193, 143, 16, 62, 100, 43, 29, 61, 54, 161, 51, 62, 208, 116, 59, 62, 163, 128, 61, 62, 244, 236, 226, 190, 16, 26, 159, 62, 123, 207, 26, 60, 186, 59, 17, 190, 128, 250, 72, 187, 175, 109, 61, 188, 99, 112, 217, 61, 162, 176, 68, 62, 49, 100, 129, 62, 25, 105, 235, 61, 91, 13, 109, 190, 103, 214, 214, 62, 251, 33, 140, 61, 48, 16, 65, 60, 124, 30, 254, 188, 230, 29, 248, 189, 222, 15, 85, 190, 109, 24, 145, 190, 138, 106, 133, 189, 247, 187, 10, 191, 183, 160, 139, 189, 13, 56, 250, 189, 87, 40, 4, 61, 1, 39, 232, 189, 108, 79, 226, 61, 51, 78, 253, 61, 158, 165, 136, 62, 210, 58, 169, 61, 165, 223, 251, 60, 186, 163, 165, 59, 76, 166, 168, 190, 133, 33, 97, 189, 255, 192, 235, 59, 233, 176, 249, 62, 234, 212, 146, 61, 25, 77, 6, 189, 144, 154, 132, 191, 147, 178, 22, 190, 46, 20, 136, 190, 81, 29, 140, 189, 109, 71, 30, 62, 104, 183, 57, 191, 139, 99, 93, 191, 210, 72, 169, 61, 241, 182, 7, 62, 21, 112, 117, 62, 109, 22, 167, 61, 244, 28, 236, 190, 163, 90, 68, 62, 112, 103, 12, 62, 183, 31, 99, 62, 76, 177, 171, 61, 178, 196, 148, 62, 230, 78, 85, 61, 37, 133, 35, 190, 253, 123, 131, 61, 78, 6, 76, 62, 112, 46, 174, 189, 78, 196, 83, 61, 151, 161, 160, 189, 192, 121, 134, 189, 75, 181, 183, 191, 9, 101, 88, 189, 149, 165, 242, 61, 169, 58, 236, 189, 220, 53, 159, 62, 76, 0, 63, 190, 15, 218, 7, 191, 215, 187, 3, 62, 38, 155, 16, 61, 181, 171, 46, 62, 193, 238, 170, 190, 127, 81, 103, 62, 30, 5, 184, 62, 34, 63, 214, 190, 194, 249, 28, 62, 85, 71, 168, 191, 88, 27, 159, 59, 198, 81, 141, 191, 254, 59, 13, 191, 74, 74, 162, 191, 63, 110, 28, 190, 220, 213, 32, 62, 25, 88, 181, 190, 13, 99, 180, 61, 232, 179, 14, 189, 127, 237, 216, 189, 45, 144, 224, 189, 100, 224, 190, 62, 165, 37, 132, 62, 115, 72, 250, 189, 45, 188, 131, 62, 161, 114, 164, 61, 175, 19, 3, 62, 76, 255, 57, 188, 75, 67, 222, 191, 187, 188, 7, 60, 157, 161, 166, 189, 139, 28, 56, 188, 58, 173, 225, 189, 242, 143, 252, 189, 177, 4, 152, 189, 195, 154, 202, 189, 247, 161, 199, 188, 148, 49, 61, 190, 26, 88, 200, 61, 219, 143, 144, 188, 0, 123, 15, 190, 35, 158, 42, 190, 125, 185, 116, 189, 74, 8, 42, 190, 217, 26, 43, 190, 106, 193, 219, 59, 101, 221, 141, 189, 79, 2, 12, 62, 40, 173, 28, 62, 107, 83, 158, 61, 152, 4, 255, 61, 204, 78, 252, 61, 219, 133, 92, 189, 81, 248, 255, 61, 31, 12, 24, 190, 226, 85, 126, 61, 110, 25, 199, 189, 219, 35, 254, 61, 91, 26, 47, 188, 71, 96, 103, 59, 2, 45, 223, 189, 79, 59, 254, 189, 76, 210, 140, 62, 210, 247, 223, 61, 160, 47, 52, 191, 247, 11, 146, 61, 217, 155, 136, 191, 66, 136, 54, 61, 27, 148, 35, 62, 49, 70, 245, 61, 200, 200, 132, 190, 112, 135, 224, 62, 246, 212, 148, 189, 243, 78, 119, 191, 192, 112, 252, 190, 223, 237, 27, 189, 149, 44, 204, 62, 183, 30, 137, 190, 86, 248, 90, 189, 254, 240, 0, 191, 180, 147, 206, 61, 124, 4, 149, 191, 19, 69, 14, 190, 12, 13, 9, 62, 177, 122, 41, 62, 78, 31, 153, 61, 101, 255, 162, 61, 48, 24, 7, 62, 187, 88, 81, 191, 138, 143, 248, 188, 223, 67, 64, 190, 23, 16, 171, 189, 89, 156, 32, 190, 227, 177, 236, 190, 60, 223, 204, 62, 252, 23, 93, 189, 125, 78, 16, 190, 35, 169, 139, 62, 69, 167, 15, 189, 44, 248, 169, 62, 163, 129, 25, 63, 33, 182, 158, 62, 101, 10, 235, 62, 73, 138, 11, 62, 217, 173, 11, 63, 170, 177, 200, 191, 202, 145, 250, 189, 204, 192, 248, 190, 139, 173, 113, 62, 58, 26, 61, 191, 77, 166, 218, 190, 61, 105, 138, 190, 86, 102, 195, 190, 100, 161, 84, 62, 84, 1, 15, 190, 152, 224, 167, 62, 214, 216, 125, 189, 86, 88, 159, 61, 122, 147, 102, 62, 107, 54, 106, 60, 184, 65, 229, 189, 65, 185, 19, 190, 163, 16, 80, 62, 32, 86, 222, 190, 220, 55, 46, 191, 39, 79, 98, 190, 29, 78, 185, 190, 39, 172, 97, 190, 130, 160, 235, 190, 200, 72, 218, 61, 247, 248, 32, 62, 61, 116, 212, 60, 85, 217, 227, 62, 55, 238, 61, 189, 68, 229, 29, 191, 73, 185, 18, 190, 144, 2, 233, 189, 51, 89, 5, 62, 93, 142, 154, 60, 239, 8, 50, 62, 86, 179, 213, 61, 107, 5, 177, 190, 0, 65, 14, 190, 226, 10, 207, 190, 72, 42, 185, 190, 215, 204, 148, 61, 140, 101, 31, 61, 138, 155, 30, 190, 251, 142, 76, 190, 91, 210, 2, 191, 13, 137, 26, 190, 168, 91, 81, 190, 105, 168, 231, 186, 104, 98, 26, 62, 41, 175, 144, 61, 45, 90, 239, 190, 75, 164, 229, 190, 86, 73, 101, 60, 201, 181, 78, 190, 168, 212, 240, 61, 70, 73, 15, 190, 124, 148, 234, 188, 194, 99, 238, 189, 211, 134, 228, 60, 4, 55, 8, 62, 70, 34, 132, 62, 255, 19, 251, 190, 214, 104, 212, 189, 108, 64, 32, 191, 255, 211, 194, 59, 77, 120, 78, 190, 155, 199, 37, 62, 134, 45, 2, 62, 18, 87, 185, 60, 217, 4, 72, 62, 130, 13, 70, 61, 41, 154, 154, 62, 98, 72, 17, 188, 239, 71, 46, 62, 10, 224, 168, 190, 133, 240, 176, 61, 63, 13, 164, 61, 240, 128, 55, 61, 140, 42, 47, 62, 201, 187, 48, 190, 63, 8, 53, 190, 27, 107, 23, 62, 1, 232, 78, 62, 85, 208, 182, 61, 182, 199, 0, 60, 129, 253, 170, 62, 50, 43, 13, 187, 50, 96, 81, 191, 94, 232, 203, 61, 154, 141, 96, 190, 4, 173, 144, 62, 194, 236, 231, 62, 73, 121, 3, 62, 8, 8, 148, 190, 184, 178, 62, 190, 82, 6, 193, 62, 56, 178, 58, 190, 181, 217, 35, 189, 135, 202, 130, 62, 249, 39, 134, 190, 191, 41, 120, 188, 255, 111, 49, 62, 95, 110, 253, 190, 50, 40, 173, 61, 224, 40, 34, 190, 28, 164, 177, 61, 160, 235, 214, 190, 124, 208, 203, 189, 229, 80, 116, 62, 137, 127, 137, 61, 175, 150, 15, 62, 251, 134, 134, 61, 218, 223, 21, 62, 226, 168, 92, 61, 167, 7, 241, 188, 239, 184, 92, 190, 118, 72, 201, 188, 172, 82, 232, 188, 208, 230, 249, 189, 155, 105, 160, 189, 112, 39, 246, 61, 209, 189, 110, 188, 40, 20, 159, 189, 23, 247, 25, 188, 28, 60, 37, 61, 114, 240, 219, 61, 71, 4, 42, 190, 34, 190, 98, 60, 254, 230, 87, 60, 112, 146, 130, 189, 114, 129, 49, 61, 219, 116, 25, 190, 19, 236, 180, 61, 212, 213, 33, 60, 231, 210, 72, 190, 84, 62, 0, 190, 7, 94, 79, 190, 111, 157, 156, 189, 116, 110, 8, 190, 110, 105, 58, 62, 151, 225, 41, 189, 76, 57, 19, 190, 99, 36, 187, 188, 204, 151, 193, 187, 84, 141, 188, 61, 248, 67, 46, 190, 9, 127, 49, 60, 172, 88, 129, 189, 70, 122, 122, 190, 24, 21, 23, 62, 248, 104, 53, 61, 57, 124, 112, 190, 209, 225, 206, 60, 181, 66, 59, 62, 54, 128, 49, 62, 7, 103, 36, 62, 179, 219, 93, 61, 98, 227, 25, 190, 202, 141, 230, 190, 198, 220, 63, 191, 33, 81, 212, 190, 29, 69, 169, 190, 100, 156, 34, 62, 97, 157, 77, 189, 181, 140, 192, 190, 79, 147, 250, 186, 99, 107, 253, 190, 171, 107, 115, 62, 110, 48, 102, 190, 39, 38, 245, 61, 247, 98, 144, 191, 24, 33, 232, 189, 239, 73, 64, 62, 78, 232, 125, 61, 168, 183, 70, 62, 75, 24, 226, 189, 57, 130, 253, 60, 150, 224, 85, 62, 7, 233, 67, 62, 240, 74, 49, 190, 82, 38, 102, 190, 204, 157, 225, 190, 203, 232, 21, 190, 4, 37, 26, 61, 215, 152, 144, 62, 235, 29, 180, 61, 91, 254, 217, 60, 186, 134, 11, 62, 102, 165, 136, 62, 144, 115, 42, 191, 45, 95, 106, 190, 244, 223, 249, 190, 52, 11, 254, 190, 129, 9, 22, 191, 112, 245, 21, 62, 153, 96, 9, 62, 117, 209, 170, 190, 2, 1, 254, 188, 75, 250, 234, 189, 58, 224, 148, 191, 168, 52, 205, 190, 122, 217, 184, 61, 21, 104, 75, 189, 7, 28, 16, 61, 149, 162, 13, 190, 223, 208, 208, 189, 107, 85, 187, 61, 7, 108, 59, 191, 202, 248, 56, 61, 94, 16, 93, 62, 1, 204, 53, 191, 226, 239, 2, 190, 112, 13, 63, 63, 66, 74, 6, 190, 23, 91, 139, 62, 148, 3, 37, 191, 108, 197, 141, 61, 129, 54, 15, 191, 14, 48, 44, 190, 76, 81, 173, 62, 170, 29, 15, 62, 247, 170, 132, 190, 84, 22, 78, 62, 241, 175, 141, 190, 179, 55, 77, 190, 71, 9, 164, 190, 247, 21, 39, 62, 242, 131, 164, 62, 245, 9, 213, 190, 5, 44, 59, 63, 70, 5, 216, 188, 199, 207, 201, 189, 83, 29, 193, 190, 48, 71, 153, 189, 16, 14, 60, 190, 224, 122, 69, 62, 66, 67, 75, 61, 98, 193, 176, 60, 140, 49, 147, 188, 135, 121, 175, 190, 174, 175, 128, 189, 137, 57, 71, 189, 178, 69, 202, 61, 96, 130, 156, 190, 24, 39, 96, 190, 39, 255, 69, 191, 52, 96, 33, 188, 230, 197, 135, 61, 89, 109, 13, 62, 46, 169, 61, 62, 75, 108, 119, 191, 140, 80, 168, 190, 199, 42, 42, 191, 181, 208, 69, 190, 125, 212, 191, 62, 181, 184, 7, 191, 244, 167, 253, 59, 205, 22, 158, 189, 11, 55, 155, 62, 214, 115, 216, 61, 23, 129, 188, 62, 20, 106, 104, 190, 224, 217, 141, 62, 52, 18, 173, 62, 37, 176, 14, 189, 49, 59, 130, 190, 170, 14, 179, 61, 234, 51, 7, 62, 220, 175, 48, 191, 186, 36, 185, 187, 95, 173, 174, 190, 31, 14, 208, 188, 154, 169, 1, 189, 248, 238, 24, 62, 158, 111, 98, 190, 152, 29, 136, 62, 33, 53, 85, 191, 131, 26, 82, 190, 81, 153, 177, 190, 227, 42, 159, 62, 49, 179, 40, 62, 98, 129, 86, 188, 71, 33, 128, 189, 49, 138, 179, 62, 192, 56, 142, 62, 135, 142, 229, 61, 119, 135, 195, 190, 16, 175, 200, 61, 14, 199, 245, 61, 136, 41, 131, 190, 70, 121, 198, 62, 178, 200, 35, 190, 202, 214, 201, 62, 9, 62, 19, 191, 79, 127, 144, 61, 204, 176, 8, 63, 229, 79, 127, 190, 75, 6, 64, 61, 163, 47, 224, 61, 64, 159, 86, 190, 114, 153, 129, 190, 209, 190, 26, 62, 97, 124, 14, 190, 153, 237, 53, 190, 35, 2, 132, 61, 32, 225, 194, 61, 246, 43, 210, 189, 224, 143, 74, 62, 181, 70, 115, 188, 171, 114, 53, 62, 202, 148, 138, 189, 117, 142, 0, 190, 160, 137, 175, 191, 215, 220, 127, 190, 166, 189, 199, 61, 242, 214, 2, 62, 167, 212, 15, 189, 49, 14, 12, 61, 178, 82, 52, 62, 22, 8, 244, 62, 44, 72, 223, 61, 118, 227, 208, 61, 209, 7, 205, 59, 7, 29, 246, 61, 4, 7, 80, 190, 229, 168, 1, 191, 81, 96, 137, 189, 44, 68, 135, 61, 45, 8, 42, 190, 145, 113, 208, 61, 31, 205, 53, 190, 204, 148, 164, 189, 174, 155, 35, 62, 92, 141, 240, 190, 169, 198, 140, 62, 117, 30, 254, 61, 124, 148, 140, 61, 248, 160, 26, 191, 163, 20, 160, 60, 236, 209, 130, 189, 93, 2, 214, 190, 58, 14, 222, 62, 243, 77, 1, 190, 95, 163, 178, 188, 186, 162, 62, 60, 160, 176, 154, 61, 226, 189, 107, 62, 221, 181, 175, 62, 60, 77, 51, 62, 199, 82, 125, 62, 221, 42, 194, 62, 246, 68, 197, 62, 0, 213, 211, 189, 238, 43, 30, 189, 50, 250, 152, 189, 89, 123, 47, 62, 52, 138, 109, 190, 127, 106, 140, 190, 7, 27, 28, 190, 74, 244, 14, 191, 2, 126, 97, 187, 44, 166, 96, 61, 41, 224, 148, 61, 215, 87, 182, 189, 196, 107, 202, 61, 175, 205, 199, 189, 245, 208, 129, 62, 109, 115, 73, 62, 62, 32, 45, 190, 107, 31, 144, 61, 92, 20, 30, 190, 222, 59, 66, 61, 44, 111, 220, 60, 248, 93, 25, 62, 245, 152, 10, 62, 233, 215, 205, 190, 189, 178, 154, 61, 8, 13, 83, 191, 198, 25, 221, 58, 107, 22, 136, 62, 167, 172, 50, 59, 220, 131, 155, 190, 155, 44, 177, 62, 51, 10, 215, 190, 123, 135, 146, 189, 157, 211, 222, 190, 56, 120, 205, 61, 219, 153, 169, 62, 92, 108, 217, 190, 43, 42, 49, 62, 116, 37, 101, 190, 202, 17, 99, 62, 5, 11, 146, 191, 2, 32, 172, 188, 70, 47, 239, 58, 148, 212, 219, 61, 171, 45, 60, 188, 21, 107, 19, 62, 190, 0, 104, 62, 53, 210, 94, 191, 87, 63, 105, 61, 139, 243, 84, 189, 132, 103, 17, 62, 220, 10, 20, 190, 97, 74, 21, 62, 78, 227, 32, 62, 207, 153, 169, 61, 116, 201, 41, 190, 207, 255, 120, 190, 240, 179, 159, 189, 162, 249, 16, 62, 73, 80, 164, 62, 207, 23, 80, 62, 185, 59, 205, 188, 121, 207, 162, 190, 241, 33, 211, 62, 194, 169, 2, 62, 227, 34, 137, 189, 191, 170, 6, 190, 14, 204, 104, 190, 34, 53, 33, 190, 24, 189, 182, 189, 122, 82, 195, 61, 54, 121, 164, 190, 27, 124, 131, 62, 27, 51, 14, 62, 187, 156, 130, 186, 49, 250, 43, 62, 133, 240, 166, 62, 167, 153, 203, 61, 1, 199, 1, 63, 156, 198, 123, 62, 18, 73, 94, 189, 147, 245, 43, 190, 52, 103, 88, 190, 80, 89, 67, 190, 27, 114, 187, 190, 157, 73, 169, 188, 91, 241, 68, 189, 43, 224, 230, 61, 10, 212, 203, 190, 2, 9, 235, 61, 209, 167, 254, 190, 178, 160, 140, 190, 79, 2, 222, 190, 223, 31, 157, 190, 213, 176, 114, 62, 71, 139, 139, 189, 247, 16, 145, 62, 12, 118, 116, 62, 151, 225, 52, 62, 50, 8, 172, 189, 249, 158, 151, 61, 187, 248, 100, 191, 102, 108, 33, 61, 229, 152, 184, 62, 78, 176, 139, 62, 99, 117, 4, 190, 220, 106, 66, 62, 145, 13, 133, 190, 166, 210, 157, 189, 4, 90, 209, 188, 215, 126, 247, 189, 10, 37, 124, 62, 226, 239, 249, 189, 82, 221, 104, 61, 226, 210, 196, 62, 100, 35, 71, 62, 71, 75, 102, 189, 21, 37, 131, 190, 179, 39, 201, 61, 192, 48, 208, 61, 244, 10, 146, 189, 194, 251, 60, 190, 70, 75, 193, 60, 195, 169, 240, 188, 115, 244, 155, 61, 214, 59, 111, 60, 113, 111, 145, 189, 130, 217, 24, 190, 222, 0, 241, 61, 122, 166, 4, 185, 180, 246, 153, 189, 232, 164, 215, 189, 43, 52, 37, 61, 124, 221, 245, 189, 237, 246, 36, 190, 114, 55, 69, 190, 140, 66, 222, 60, 90, 237, 70, 190, 166, 42, 135, 189, 209, 42, 247, 61, 142, 111, 46, 190, 200, 63, 195, 189, 160, 94, 16, 190, 210, 126, 39, 59, 86, 101, 10, 62, 205, 23, 0, 190, 62, 216, 70, 188, 17, 162, 33, 190, 151, 149, 7, 191, 17, 168, 61, 62, 123, 182, 88, 190, 188, 182, 87, 190, 39, 25, 188, 59, 8, 51, 9, 189, 118, 162, 165, 189, 250, 238, 124, 60, 239, 157, 52, 61, 87, 35, 157, 190, 176, 84, 185, 62, 31, 198, 160, 62, 180, 6, 40, 190, 125, 217, 70, 62, 55, 247, 228, 188, 53, 76, 152, 62, 213, 27, 141, 190, 150, 93, 204, 190, 137, 185, 82, 190, 191, 229, 249, 189, 7, 133, 32, 189, 23, 80, 153, 189, 212, 234, 190, 61, 123, 146, 170, 190, 154, 8, 33, 187, 173, 22, 167, 188, 177, 132, 48, 190, 184, 70, 187, 61, 54, 42, 39, 62, 27, 152, 2, 61, 231, 66, 144, 189, 82, 201, 24, 62, 84, 86, 66, 62, 100, 85, 3, 62, 8, 41, 77, 188, 172, 244, 34, 191, 182, 55, 66, 62, 50, 4, 166, 190, 242, 154, 12, 62, 203, 29, 125, 62, 173, 98, 234, 188, 25, 27, 134, 190, 219, 79, 194, 61, 245, 28, 129, 190, 27, 144, 55, 191, 152, 20, 22, 191, 7, 18, 79, 62, 9, 146, 145, 62, 112, 107, 125, 190, 174, 174, 161, 62, 50, 223, 17, 190, 251, 181, 36, 189, 98, 230, 38, 191, 193, 237, 120, 60, 144, 45, 37, 190, 53, 110, 25, 62, 229, 48, 9, 61, 119, 19, 219, 61, 208, 2, 23, 62, 87, 126, 233, 190, 135, 34, 236, 186, 17, 136, 127, 62, 135, 62, 4, 61, 196, 215, 53, 190, 64, 231, 136, 61, 141, 237, 195, 189, 116, 201, 163, 188, 15, 230, 21, 61, 115, 41, 134, 60, 71, 218, 71, 61, 36, 19, 200, 189, 14, 133, 163, 60, 235, 132, 137, 189, 137, 5, 248, 61, 223, 231, 220, 187, 31, 206, 17, 188, 249, 31, 6, 190, 135, 109, 142, 189, 198, 102, 124, 59, 224, 30, 249, 189, 226, 41, 55, 190, 97, 11, 85, 189, 64, 71, 245, 61, 222, 50, 109, 60, 238, 170, 228, 61, 45, 148, 153, 61, 194, 241, 168, 189, 67, 27, 183, 189, 243, 108, 29, 61, 34, 224, 45, 190, 243, 215, 28, 62, 33, 239, 119, 188, 106, 123, 78, 187, 194, 164, 55, 61, 154, 110, 45, 190, 128, 109, 47, 190, 246, 58, 206, 189, 207, 104, 3, 62, 73, 68, 65, 190, 100, 154, 217, 61, 165, 17, 12, 191, 140, 149, 91, 62, 231, 21, 58, 61, 67, 45, 8, 190, 27, 224, 150, 189, 142, 226, 41, 191, 177, 30, 253, 190, 127, 34, 249, 60, 200, 167, 114, 62, 29, 18, 115, 61, 7, 212, 46, 189, 162, 76, 11, 191, 35, 162, 203, 188, 245, 123, 103, 190, 98, 75, 230, 61, 173, 183, 118, 190, 225, 50, 96, 62, 87, 185, 91, 190, 56, 222, 191, 61, 183, 174, 254, 189, 177, 42, 215, 60, 56, 107, 102, 61, 116, 74, 166, 61, 243, 18, 148, 62, 101, 131, 138, 58, 212, 52, 149, 190, 118, 164, 108, 190, 59, 234, 147, 59, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 233, 15, 85, 189, 27, 197, 97, 189, 166, 246, 197, 61, 29, 119, 176, 189, 195, 69, 147, 62, 191, 170, 59, 190, 236, 237, 164, 61, 232, 248, 65, 62, 63, 186, 71, 62, 24, 201, 134, 190, 234, 236, 150, 62, 89, 98, 18, 190, 164, 16, 99, 190, 145, 131, 49, 191, 223, 112, 102, 62, 39, 154, 223, 62, 228, 172, 22, 190, 100, 142, 170, 61, 91, 46, 18, 62, 110, 30, 49, 188, 40, 212, 129, 191, 69, 182, 225, 189, 19, 70, 75, 189, 196, 79, 221, 61, 181, 100, 83, 189, 181, 176, 180, 59, 171, 87, 228, 62, 71, 121, 26, 191, 115, 220, 195, 61, 151, 68, 141, 62, 48, 159, 146, 61, 20, 186, 137, 189, 224, 95, 84, 190, 234, 97, 135, 191, 205, 210, 2, 190, 132, 250, 35, 62, 216, 55, 43, 190, 116, 131, 163, 62, 14, 31, 191, 191, 150, 214, 232, 190, 244, 154, 148, 191, 126, 195, 241, 189, 106, 50, 54, 63, 170, 157, 140, 190, 235, 115, 25, 62, 141, 21, 60, 61, 242, 164, 202, 62, 54, 6, 239, 62, 54, 138, 171, 62, 241, 100, 160, 190, 29, 11, 176, 62, 210, 32, 20, 62, 107, 77, 8, 62, 191, 142, 185, 189, 103, 220, 183, 61, 207, 135, 154, 190, 86, 229, 107, 191, 215, 23, 226, 189, 79, 243, 48, 190, 155, 101, 241, 61, 201, 255, 22, 190, 204, 44, 174, 61, 211, 75, 97, 190, 221, 174, 4, 62, 31, 151, 164, 61, 110, 154, 226, 62, 235, 134, 82, 190, 87, 132, 137, 190, 124, 45, 222, 57, 130, 126, 135, 190, 121, 210, 163, 62, 89, 20, 134, 62, 244, 78, 140, 189, 215, 152, 164, 60, 101, 43, 118, 62, 143, 83, 29, 63, 133, 81, 155, 58, 196, 162, 26, 62, 223, 36, 103, 190, 181, 74, 102, 190, 59, 70, 17, 190, 95, 52, 117, 61, 255, 47, 169, 189, 96, 215, 248, 61, 214, 193, 157, 61, 188, 184, 254, 61, 73, 158, 191, 61, 160, 154, 119, 190, 35, 149, 32, 62, 191, 164, 19, 190, 112, 87, 48, 189, 159, 102, 177, 61, 168, 68, 138, 189, 232, 156, 17, 61, 199, 31, 59, 190, 82, 44, 125, 190, 107, 181, 54, 191, 219, 111, 181, 62, 17, 86, 251, 190, 30, 166, 213, 189, 27, 189, 175, 190, 192, 39, 68, 62, 199, 112, 25, 62, 173, 89, 214, 62, 191, 3, 76, 60, 85, 173, 27, 190, 237, 231, 69, 190, 240, 214, 189, 62, 129, 247, 85, 62, 162, 207, 100, 62, 16, 55, 140, 190, 243, 28, 65, 61, 203, 119, 174, 190, 184, 212, 140, 190, 186, 68, 106, 189, 193, 78, 15, 191, 231, 173, 66, 62, 51, 157, 129, 61, 100, 169, 32, 62, 71, 86, 186, 190, 44, 230, 203, 62, 149, 214, 252, 60, 53, 88, 67, 62, 88, 185, 217, 59, 195, 138, 137, 189, 231, 48, 59, 190, 244, 3, 142, 190, 103, 70, 19, 61, 23, 48, 226, 61, 248, 57, 135, 62, 150, 56, 12, 191, 115, 105, 101, 189, 104, 164, 32, 191, 10, 135, 26, 62, 170, 33, 7, 191, 38, 108, 168, 59, 202, 45, 57, 190, 0, 64, 76, 191, 254, 110, 132, 191, 248, 55, 157, 62, 26, 179, 238, 59, 236, 40, 45, 61, 156, 70, 168, 61, 170, 49, 44, 191, 149, 197, 137, 62, 57, 188, 147, 60, 71, 189, 157, 62, 211, 104, 155, 62, 94, 88, 114, 62, 189, 200, 45, 190, 63, 48, 11, 62, 112, 49, 43, 190, 155, 32, 25, 190, 251, 96, 218, 188, 119, 171, 106, 62, 123, 255, 31, 62, 138, 107, 39, 190, 65, 153, 242, 190, 171, 117, 35, 190, 185, 70, 136, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 254, 40, 61, 121, 234, 0, 62, 40, 76, 250, 189, 30, 71, 64, 62, 214, 206, 177, 188, 205, 34, 188, 189, 84, 246, 122, 62, 49, 33, 167, 189, 93, 228, 225, 189, 147, 230, 213, 189, 175, 14, 177, 61, 141, 127, 18, 189, 24, 217, 57, 62, 83, 96, 158, 189, 233, 167, 16, 60, 226, 168, 158, 61, 134, 95, 43, 190, 176, 86, 80, 62, 28, 204, 245, 188, 75, 163, 21, 61, 105, 64, 153, 61, 62, 91, 144, 61, 129, 1, 29, 62, 87, 85, 133, 62, 139, 118, 4, 190, 1, 91, 190, 189, 99, 144, 176, 58, 165, 157, 28, 62, 96, 174, 206, 61, 73, 145, 81, 190, 206, 106, 37, 190, 25, 232, 150, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 218, 227, 190, 252, 167, 164, 61, 56, 160, 212, 62, 39, 106, 96, 63, 101, 215, 107, 61, 149, 146, 212, 190, 139, 229, 39, 63, 72, 239, 215, 190, 196, 81, 14, 190, 245, 132, 5, 191, 147, 44, 4, 190, 99, 243, 134, 190, 102, 192, 6, 191, 35, 202, 242, 190, 72, 112, 22, 191, 174, 178, 210, 62, 114, 38, 42, 191, 243, 18, 23, 62, 23, 224, 226, 190, 227, 185, 120, 62, 226, 111, 152, 190, 89, 122, 15, 62, 33, 144, 217, 60, 57, 40, 191, 190, 14, 136, 141, 188, 165, 89, 109, 62, 56, 206, 4, 190, 40, 81, 181, 190, 152, 199, 24, 191, 44, 198, 184, 190, 67, 106, 226, 62, 116, 179, 175, 62, 99, 180, 158, 189, 13, 123, 97, 189, 198, 158, 217, 189, 45, 3, 218, 188, 96, 34, 249, 189, 219, 92, 169, 190, 102, 113, 45, 190, 127, 244, 101, 62, 31, 235, 136, 188, 81, 250, 30, 62, 15, 77, 197, 189, 184, 36, 211, 189, 9, 239, 134, 190, 128, 3, 238, 62, 229, 245, 7, 190, 173, 63, 172, 61, 179, 157, 246, 62, 63, 202, 152, 190, 239, 99, 40, 189, 52, 244, 15, 62, 27, 232, 149, 188, 32, 115, 31, 62, 235, 212, 166, 190, 40, 151, 179, 60, 83, 177, 91, 189, 32, 195, 185, 189, 66, 97, 20, 190, 62, 53, 201, 189, 22, 148, 16, 187, 62, 116, 123, 190, 247, 144, 93, 189, 182, 211, 9, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 243, 9, 187, 74, 157, 132, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 32, 197, 62, 144, 212, 63, 187, 190, 250, 146, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 50, 120, 63, 41, 191, 145, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}