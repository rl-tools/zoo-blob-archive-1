// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 17, 185, 62, 180, 117, 20, 62, 122, 183, 135, 62, 254, 82, 73, 62, 11, 191, 205, 190, 51, 244, 151, 188, 227, 30, 19, 62, 221, 36, 102, 62, 108, 228, 177, 62, 20, 44, 89, 190, 205, 191, 193, 61, 55, 213, 62, 188, 229, 64, 149, 60, 16, 76, 95, 62, 190, 9, 204, 188, 15, 187, 15, 191, 17, 102, 54, 189, 37, 20, 62, 190, 186, 123, 103, 190, 65, 9, 200, 190, 50, 203, 184, 62, 82, 210, 13, 63, 170, 73, 17, 63, 106, 213, 255, 190, 31, 29, 189, 190, 131, 206, 87, 190, 156, 88, 17, 63, 7, 63, 84, 62, 84, 167, 237, 189, 62, 7, 211, 188, 177, 156, 195, 62, 253, 84, 193, 189, 190, 252, 237, 188, 41, 184, 218, 62, 14, 101, 85, 190, 91, 204, 132, 190, 173, 248, 153, 190, 191, 69, 43, 190, 177, 109, 17, 191, 94, 31, 192, 189, 249, 197, 253, 190, 175, 98, 203, 190, 235, 19, 211, 190, 216, 127, 246, 62, 126, 182, 2, 191, 219, 39, 179, 62, 247, 134, 216, 61, 140, 142, 19, 190, 175, 150, 238, 190, 180, 23, 196, 62, 40, 214, 248, 190, 170, 106, 2, 63, 160, 17, 96, 61, 252, 108, 140, 62, 159, 32, 162, 190, 31, 1, 3, 188, 235, 234, 225, 190, 107, 181, 42, 190, 151, 117, 13, 191, 85, 62, 245, 61, 69, 182, 237, 189, 114, 35, 1, 191, 8, 208, 220, 190, 25, 137, 189, 190, 222, 129, 76, 190, 246, 163, 242, 61, 130, 104, 34, 61, 191, 175, 18, 62, 243, 226, 222, 60, 34, 217, 2, 190, 116, 98, 247, 61, 9, 189, 85, 62, 158, 116, 12, 190, 22, 184, 6, 191, 248, 242, 195, 62, 80, 208, 48, 190, 7, 206, 151, 190, 214, 106, 4, 63, 131, 115, 107, 190, 221, 105, 154, 62, 190, 186, 168, 190, 171, 208, 240, 189, 57, 23, 17, 191, 100, 110, 215, 190, 99, 35, 84, 62, 152, 187, 215, 62, 70, 25, 197, 189, 162, 58, 145, 190, 69, 243, 227, 62, 222, 19, 141, 62, 6, 158, 242, 189, 95, 201, 176, 190, 215, 82, 152, 62, 26, 244, 136, 61, 77, 125, 200, 62, 4, 215, 251, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 165, 19, 191, 162, 12, 103, 62, 16, 71, 115, 60, 182, 138, 78, 62, 161, 12, 10, 63, 17, 101, 11, 63, 168, 107, 100, 62, 69, 231, 219, 62, 122, 121, 199, 61, 57, 222, 5, 190, 76, 19, 116, 61, 185, 108, 51, 62, 248, 12, 135, 190, 72, 190, 254, 62, 94, 152, 228, 61, 166, 36, 4, 62, 144, 131, 233, 190, 87, 230, 119, 57, 70, 124, 152, 61, 42, 78, 6, 191, 35, 104, 43, 189, 4, 150, 193, 190, 146, 16, 9, 63, 229, 120, 170, 60, 167, 94, 1, 62, 70, 157, 19, 63, 19, 98, 109, 190, 143, 44, 182, 62, 215, 182, 202, 190, 180, 182, 113, 62, 153, 163, 238, 190, 92, 200, 177, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 207, 162, 189, 54, 115, 207, 188, 200, 19, 136, 61, 61, 202, 26, 190, 235, 129, 89, 61, 111, 32, 253, 61, 167, 232, 44, 62, 110, 3, 201, 187, 196, 71, 11, 62, 240, 134, 101, 189, 83, 100, 94, 61, 64, 238, 87, 60, 126, 136, 48, 190, 69, 123, 172, 189, 211, 72, 26, 62, 184, 24, 10, 62, 158, 27, 35, 189, 95, 98, 50, 58, 210, 33, 252, 61, 203, 22, 14, 62, 177, 225, 166, 61, 94, 107, 20, 190, 9, 105, 26, 189, 11, 2, 162, 188, 160, 95, 40, 189, 208, 176, 31, 189, 31, 112, 245, 189, 255, 80, 110, 187, 190, 13, 66, 61, 68, 120, 88, 61, 18, 125, 221, 61, 225, 161, 24, 61, 24, 151, 22, 190, 123, 141, 42, 61, 40, 58, 17, 62, 205, 131, 254, 188, 92, 43, 218, 60, 215, 132, 178, 59, 206, 0, 213, 187, 168, 38, 81, 187, 55, 183, 209, 61, 110, 246, 105, 189, 220, 221, 234, 189, 86, 250, 4, 62, 238, 43, 189, 61, 196, 22, 1, 188, 191, 171, 36, 62, 31, 19, 34, 190, 109, 119, 38, 188, 86, 122, 1, 59, 14, 40, 237, 188, 171, 214, 141, 189, 62, 189, 217, 189, 119, 96, 225, 188, 86, 30, 104, 61, 36, 243, 226, 188, 74, 90, 61, 60, 188, 1, 16, 62, 192, 28, 187, 61, 73, 154, 128, 61, 199, 254, 215, 60, 31, 120, 16, 62, 40, 31, 198, 189, 56, 75, 200, 61, 212, 78, 42, 62, 114, 243, 174, 61, 30, 61, 26, 189, 24, 225, 187, 188, 31, 153, 177, 189, 165, 240, 244, 189, 138, 178, 35, 190, 122, 201, 2, 190, 115, 101, 33, 62, 205, 82, 40, 190, 151, 183, 39, 189, 140, 75, 50, 190, 44, 114, 62, 188, 0, 180, 27, 62, 85, 182, 173, 61, 98, 195, 74, 61, 185, 119, 166, 61, 112, 178, 201, 187, 193, 80, 14, 62, 80, 198, 187, 189, 222, 52, 34, 62, 199, 180, 86, 61, 142, 199, 106, 189, 122, 43, 141, 61, 252, 225, 159, 189, 128, 211, 68, 189, 167, 239, 235, 189, 141, 150, 37, 190, 241, 43, 63, 189, 140, 182, 216, 61, 194, 172, 187, 61, 83, 203, 169, 61, 72, 4, 60, 189, 236, 183, 247, 188, 137, 230, 47, 190, 143, 18, 62, 61, 166, 163, 160, 188, 134, 226, 123, 189, 99, 146, 236, 189, 52, 5, 154, 189, 179, 234, 171, 188, 245, 221, 10, 62, 152, 122, 250, 189, 14, 104, 206, 187, 30, 4, 31, 190, 236, 92, 94, 188, 188, 246, 125, 189, 206, 135, 36, 190, 231, 82, 71, 188, 239, 169, 237, 189, 165, 151, 31, 62, 84, 248, 150, 189, 127, 75, 186, 189, 160, 23, 148, 189, 236, 149, 38, 190, 162, 178, 31, 190, 176, 200, 227, 61, 104, 149, 167, 61, 87, 175, 38, 189, 104, 125, 48, 62, 161, 114, 164, 61, 161, 106, 13, 61, 224, 220, 182, 61, 114, 125, 38, 190, 187, 188, 7, 60, 100, 71, 111, 189, 69, 151, 8, 188, 58, 173, 225, 189, 7, 193, 230, 189, 153, 241, 120, 189, 102, 73, 139, 189, 247, 161, 199, 188, 161, 127, 34, 190, 76, 98, 213, 61, 162, 195, 167, 187, 125, 129, 9, 190, 201, 123, 39, 190, 183, 141, 52, 189, 74, 8, 42, 190, 236, 233, 34, 190, 106, 193, 219, 59, 146, 85, 141, 189, 171, 108, 18, 62, 155, 129, 51, 62, 142, 242, 186, 61, 152, 4, 255, 61, 101, 106, 8, 62, 44, 219, 86, 189, 41, 167, 24, 62, 142, 111, 1, 190, 226, 85, 126, 61, 60, 56, 168, 189, 219, 35, 254, 61, 78, 118, 173, 184, 214, 234, 196, 60, 2, 45, 223, 189, 248, 225, 90, 61, 247, 63, 224, 61, 229, 47, 145, 61, 44, 1, 23, 60, 126, 221, 63, 61, 70, 83, 181, 189, 48, 183, 86, 61, 115, 123, 153, 188, 71, 145, 1, 62, 211, 88, 174, 188, 111, 216, 203, 61, 179, 222, 23, 190, 248, 84, 210, 189, 150, 119, 77, 189, 175, 204, 12, 62, 102, 84, 5, 62, 31, 160, 19, 190, 215, 212, 180, 189, 0, 115, 12, 190, 11, 175, 23, 189, 144, 73, 21, 190, 212, 181, 16, 190, 69, 98, 243, 60, 82, 44, 241, 61, 129, 122, 194, 59, 77, 173, 67, 61, 1, 185, 129, 187, 83, 6, 139, 189, 213, 249, 147, 59, 49, 36, 237, 189, 79, 171, 28, 190, 223, 191, 252, 188, 212, 12, 11, 189, 9, 55, 153, 61, 234, 203, 4, 62, 170, 34, 100, 189, 180, 245, 220, 61, 181, 7, 115, 189, 184, 77, 31, 62, 226, 102, 11, 62, 37, 122, 47, 62, 178, 246, 153, 61, 204, 160, 185, 189, 101, 119, 197, 61, 72, 99, 48, 190, 239, 144, 49, 190, 65, 29, 139, 189, 21, 235, 191, 188, 231, 91, 229, 61, 190, 2, 151, 189, 22, 242, 145, 189, 117, 196, 4, 62, 61, 188, 49, 62, 16, 246, 128, 60, 145, 196, 252, 61, 166, 100, 87, 61, 113, 251, 136, 189, 87, 18, 25, 62, 213, 129, 225, 60, 62, 97, 18, 190, 237, 92, 25, 190, 251, 148, 15, 62, 31, 17, 40, 190, 48, 189, 148, 189, 246, 220, 170, 60, 126, 104, 52, 190, 209, 73, 57, 189, 212, 52, 24, 190, 168, 0, 4, 61, 41, 195, 194, 186, 26, 116, 3, 62, 90, 128, 51, 62, 60, 69, 52, 60, 59, 62, 134, 60, 71, 161, 25, 185, 89, 207, 76, 60, 109, 248, 177, 61, 73, 63, 236, 187, 12, 161, 195, 61, 120, 144, 66, 189, 19, 18, 219, 188, 161, 143, 177, 189, 9, 250, 44, 190, 85, 29, 68, 189, 41, 226, 194, 188, 150, 6, 32, 61, 188, 146, 164, 61, 79, 254, 75, 59, 181, 163, 51, 188, 213, 170, 155, 189, 35, 10, 209, 189, 88, 206, 82, 189, 104, 98, 26, 62, 16, 94, 245, 59, 140, 3, 101, 188, 239, 15, 43, 190, 78, 136, 217, 188, 204, 42, 231, 189, 168, 94, 172, 61, 243, 12, 244, 187, 92, 51, 146, 188, 40, 120, 12, 190, 248, 195, 101, 188, 50, 238, 250, 61, 61, 234, 52, 62, 233, 170, 248, 189, 29, 131, 13, 60, 47, 83, 20, 190, 213, 70, 202, 61, 56, 128, 114, 61, 79, 80, 23, 62, 39, 186, 41, 62, 84, 178, 203, 61, 241, 224, 54, 61, 84, 132, 36, 62, 148, 97, 18, 62, 95, 56, 47, 62, 106, 4, 207, 61, 181, 122, 147, 61, 208, 95, 168, 61, 241, 149, 172, 61, 18, 109, 53, 187, 95, 253, 16, 62, 115, 193, 30, 189, 89, 90, 48, 190, 226, 9, 60, 61, 178, 160, 245, 61, 153, 44, 22, 62, 126, 136, 247, 189, 234, 35, 1, 62, 128, 249, 27, 61, 59, 198, 152, 61, 135, 223, 71, 61, 171, 99, 225, 189, 160, 9, 254, 61, 150, 39, 9, 190, 255, 53, 103, 189, 234, 208, 12, 190, 66, 163, 67, 189, 128, 1, 41, 62, 255, 204, 147, 189, 108, 12, 222, 61, 20, 3, 22, 61, 167, 36, 109, 59, 106, 194, 176, 59, 127, 161, 27, 62, 0, 113, 39, 189, 77, 117, 211, 189, 144, 124, 206, 189, 78, 200, 37, 61, 65, 46, 94, 60, 105, 3, 0, 190, 135, 8, 152, 61, 219, 5, 181, 188, 58, 230, 37, 190, 251, 5, 24, 62, 218, 223, 21, 62, 125, 100, 251, 189, 47, 252, 162, 189, 112, 128, 83, 189, 118, 72, 201, 188, 83, 90, 21, 188, 161, 0, 246, 189, 154, 61, 35, 189, 153, 7, 39, 62, 233, 101, 160, 60, 54, 158, 163, 189, 55, 104, 107, 61, 52, 127, 0, 61, 251, 166, 224, 61, 41, 75, 38, 190, 111, 96, 40, 61, 100, 85, 85, 61, 219, 55, 6, 189, 138, 46, 210, 61, 31, 78, 248, 189, 58, 133, 30, 62, 212, 213, 33, 60, 84, 119, 32, 190, 84, 62, 0, 190, 25, 170, 43, 190, 111, 157, 156, 189, 201, 241, 206, 189, 12, 203, 47, 62, 194, 123, 40, 189, 18, 155, 11, 190, 92, 125, 151, 60, 75, 211, 231, 60, 84, 141, 188, 61, 231, 223, 17, 190, 9, 127, 49, 60, 138, 176, 138, 186, 253, 171, 46, 190, 140, 131, 120, 61, 108, 108, 147, 61, 173, 137, 183, 188, 42, 177, 149, 188, 89, 170, 254, 61, 23, 183, 140, 61, 205, 102, 163, 61, 207, 121, 135, 189, 147, 139, 12, 62, 82, 176, 30, 190, 184, 214, 99, 61, 90, 78, 182, 61, 188, 155, 10, 190, 134, 132, 0, 62, 206, 138, 147, 61, 166, 43, 223, 189, 103, 15, 84, 189, 60, 93, 58, 189, 187, 113, 7, 61, 206, 131, 173, 188, 110, 97, 31, 61, 0, 127, 188, 189, 252, 145, 215, 189, 195, 187, 193, 61, 21, 236, 66, 189, 105, 209, 165, 189, 236, 58, 13, 61, 71, 113, 1, 61, 5, 40, 206, 61, 228, 123, 159, 61, 67, 106, 47, 189, 221, 142, 39, 188, 9, 161, 105, 189, 62, 23, 36, 190, 251, 152, 8, 62, 144, 193, 216, 61, 86, 183, 186, 61, 56, 184, 203, 187, 183, 28, 38, 62, 39, 30, 39, 62, 0, 8, 82, 61, 9, 71, 23, 190, 51, 214, 153, 61, 252, 91, 146, 189, 24, 108, 170, 189, 220, 84, 163, 61, 192, 244, 134, 61, 76, 221, 35, 190, 32, 173, 37, 189, 48, 58, 140, 61, 97, 219, 15, 189, 244, 151, 25, 62, 85, 189, 222, 61, 87, 130, 80, 61, 201, 149, 242, 188, 79, 2, 219, 61, 104, 44, 34, 190, 146, 191, 11, 62, 255, 191, 28, 190, 153, 108, 105, 61, 50, 76, 218, 60, 232, 16, 174, 189, 10, 188, 255, 189, 120, 168, 21, 62, 45, 95, 13, 190, 199, 78, 193, 60, 29, 21, 184, 189, 160, 111, 88, 61, 80, 15, 248, 188, 178, 24, 41, 190, 139, 57, 69, 186, 190, 86, 170, 61, 121, 254, 105, 189, 97, 41, 225, 61, 47, 206, 3, 62, 111, 88, 116, 189, 217, 41, 125, 61, 82, 140, 111, 61, 128, 213, 87, 61, 9, 92, 210, 188, 42, 50, 220, 61, 190, 214, 19, 61, 71, 13, 153, 189, 41, 13, 24, 62, 118, 102, 205, 189, 3, 239, 238, 61, 246, 211, 69, 60, 245, 75, 141, 187, 191, 239, 199, 59, 20, 28, 153, 60, 1, 1, 46, 62, 194, 165, 128, 189, 177, 142, 38, 189, 249, 213, 60, 188, 110, 214, 19, 61, 26, 228, 157, 189, 19, 23, 10, 61, 166, 134, 255, 189, 172, 171, 116, 189, 120, 15, 17, 62, 192, 161, 120, 61, 213, 234, 26, 190, 196, 134, 173, 61, 126, 225, 120, 189, 250, 82, 39, 190, 113, 62, 199, 61, 27, 2, 165, 189, 213, 111, 26, 189, 252, 199, 3, 190, 18, 98, 212, 61, 52, 210, 178, 189, 233, 201, 198, 61, 57, 244, 148, 61, 41, 114, 39, 62, 231, 81, 9, 62, 153, 250, 113, 189, 88, 60, 2, 190, 240, 215, 98, 60, 91, 211, 125, 61, 196, 114, 88, 189, 231, 142, 164, 188, 138, 88, 245, 60, 137, 221, 203, 189, 65, 144, 124, 188, 222, 126, 144, 61, 150, 0, 17, 188, 102, 194, 204, 61, 186, 116, 19, 190, 191, 165, 9, 190, 124, 101, 88, 188, 192, 138, 69, 61, 117, 157, 4, 190, 6, 105, 23, 190, 140, 151, 142, 60, 84, 249, 33, 62, 5, 119, 254, 61, 231, 143, 38, 190, 230, 224, 252, 189, 19, 224, 204, 61, 157, 201, 47, 62, 19, 83, 8, 190, 211, 175, 8, 62, 252, 19, 32, 62, 231, 137, 245, 61, 231, 5, 252, 61, 175, 72, 73, 189, 195, 189, 178, 188, 200, 4, 158, 189, 253, 133, 63, 61, 16, 65, 157, 189, 15, 159, 48, 189, 94, 137, 114, 61, 37, 160, 115, 189, 9, 100, 42, 190, 219, 194, 252, 188, 107, 121, 182, 61, 7, 5, 45, 190, 2, 96, 58, 189, 174, 253, 56, 188, 92, 223, 210, 57, 73, 236, 44, 61, 5, 82, 1, 189, 152, 96, 64, 61, 146, 45, 222, 189, 223, 65, 30, 189, 205, 239, 214, 61, 83, 179, 31, 60, 87, 99, 3, 62, 202, 59, 37, 62, 161, 122, 236, 189, 50, 149, 169, 188, 134, 175, 209, 188, 117, 149, 155, 61, 128, 35, 254, 61, 191, 58, 59, 188, 137, 144, 171, 189, 72, 3, 210, 189, 191, 180, 191, 61, 89, 218, 140, 189, 179, 32, 25, 190, 23, 245, 229, 61, 59, 45, 231, 189, 194, 143, 199, 59, 61, 222, 49, 190, 156, 60, 152, 189, 219, 25, 246, 61, 108, 205, 16, 62, 124, 148, 140, 61, 72, 160, 0, 61, 168, 198, 137, 189, 42, 12, 137, 186, 97, 74, 11, 62, 74, 40, 228, 61, 2, 48, 17, 189, 231, 236, 206, 187, 99, 38, 139, 189, 130, 247, 24, 61, 207, 174, 219, 61, 234, 61, 139, 61, 81, 20, 34, 60, 199, 30, 192, 61, 252, 216, 23, 62, 231, 175, 183, 61, 60, 124, 236, 189, 199, 175, 147, 189, 168, 227, 128, 188, 47, 232, 196, 60, 89, 102, 5, 190, 105, 181, 92, 61, 115, 133, 52, 190, 123, 55, 9, 190, 63, 112, 113, 188, 80, 37, 45, 62, 177, 142, 196, 187, 174, 176, 90, 189, 252, 144, 218, 188, 126, 233, 230, 189, 22, 25, 102, 61, 212, 22, 43, 62, 64, 75, 49, 190, 143, 228, 32, 62, 138, 98, 106, 61, 185, 169, 163, 61, 23, 224, 27, 61, 201, 154, 169, 60, 149, 226, 143, 61, 154, 44, 141, 189, 252, 53, 44, 61, 63, 92, 0, 190, 233, 9, 17, 61, 51, 238, 210, 61, 225, 191, 76, 60, 33, 206, 205, 60, 214, 74, 193, 61, 219, 125, 7, 190, 156, 238, 119, 60, 91, 109, 3, 62, 164, 239, 196, 61, 53, 203, 147, 61, 100, 212, 41, 190, 115, 1, 97, 188, 75, 58, 99, 61, 23, 145, 103, 61, 0, 47, 46, 190, 154, 134, 108, 189, 123, 82, 208, 188, 97, 174, 55, 61, 47, 12, 168, 189, 193, 2, 250, 61, 146, 91, 91, 61, 13, 107, 128, 189, 139, 101, 150, 61, 87, 182, 148, 188, 233, 41, 88, 60, 16, 72, 136, 61, 198, 109, 37, 62, 71, 249, 189, 189, 232, 53, 18, 62, 164, 70, 29, 190, 70, 180, 184, 189, 220, 211, 203, 189, 179, 207, 112, 189, 176, 75, 138, 61, 244, 151, 187, 60, 102, 168, 21, 190, 153, 2, 18, 62, 217, 180, 188, 61, 245, 111, 130, 61, 163, 153, 245, 189, 197, 92, 163, 61, 225, 25, 12, 189, 236, 25, 164, 59, 138, 0, 192, 60, 128, 228, 117, 61, 190, 89, 158, 189, 95, 65, 27, 62, 121, 31, 36, 62, 214, 49, 39, 61, 120, 92, 27, 62, 11, 27, 5, 62, 109, 233, 138, 61, 175, 6, 5, 62, 103, 246, 52, 62, 146, 177, 70, 189, 109, 41, 140, 57, 245, 70, 211, 189, 103, 140, 240, 188, 152, 4, 70, 61, 106, 185, 100, 61, 165, 82, 42, 190, 157, 224, 190, 60, 79, 62, 1, 190, 145, 114, 25, 61, 57, 117, 43, 189, 104, 215, 6, 61, 192, 20, 164, 188, 61, 255, 83, 189, 30, 89, 15, 190, 162, 240, 230, 61, 33, 208, 48, 62, 27, 145, 165, 61, 253, 85, 209, 60, 182, 153, 176, 189, 109, 131, 130, 189, 161, 10, 26, 190, 115, 44, 21, 189, 42, 207, 202, 189, 69, 169, 42, 62, 19, 105, 1, 190, 98, 255, 253, 61, 243, 126, 222, 189, 80, 123, 48, 190, 15, 166, 91, 61, 109, 163, 144, 61, 63, 148, 209, 61, 94, 174, 240, 189, 229, 52, 18, 62, 117, 97, 10, 62, 146, 200, 224, 60, 192, 160, 24, 190, 180, 184, 45, 190, 87, 57, 209, 61, 209, 254, 25, 62, 3, 147, 99, 188, 190, 5, 214, 189, 161, 45, 141, 61, 232, 206, 21, 188, 121, 90, 245, 61, 88, 126, 136, 60, 94, 47, 170, 60, 108, 185, 28, 190, 153, 10, 0, 62, 189, 116, 7, 61, 74, 86, 219, 60, 6, 255, 150, 189, 111, 62, 68, 61, 155, 128, 28, 190, 19, 175, 248, 189, 179, 142, 255, 189, 157, 155, 18, 61, 221, 81, 52, 190, 122, 136, 14, 188, 48, 240, 33, 62, 221, 3, 221, 189, 30, 247, 39, 189, 109, 232, 6, 190, 7, 53, 75, 61, 86, 101, 10, 62, 246, 181, 158, 189, 138, 218, 194, 60, 94, 48, 205, 189, 127, 243, 25, 62, 27, 223, 4, 189, 5, 54, 233, 188, 170, 199, 217, 189, 233, 253, 4, 188, 103, 121, 61, 61, 89, 225, 61, 57, 192, 220, 13, 190, 62, 174, 213, 61, 249, 119, 58, 189, 222, 126, 43, 189, 45, 38, 249, 189, 173, 71, 92, 189, 108, 108, 43, 62, 199, 209, 55, 60, 88, 47, 248, 61, 97, 142, 165, 189, 1, 207, 125, 61, 175, 139, 251, 189, 90, 2, 160, 61, 51, 53, 204, 60, 176, 236, 60, 186, 241, 29, 188, 189, 151, 3, 52, 190, 160, 147, 117, 61, 202, 223, 38, 61, 177, 201, 210, 189, 223, 226, 198, 61, 80, 181, 41, 62, 49, 247, 17, 62, 94, 232, 138, 61, 248, 211, 195, 61, 2, 105, 17, 62, 255, 211, 19, 62, 216, 164, 248, 189, 185, 248, 25, 190, 30, 36, 80, 61, 159, 118, 0, 190, 57, 114, 229, 61, 46, 211, 133, 189, 174, 80, 211, 189, 131, 166, 76, 60, 87, 215, 156, 189, 56, 253, 39, 62, 67, 18, 18, 190, 107, 233, 18, 189, 204, 56, 43, 188, 171, 179, 150, 61, 39, 133, 58, 60, 124, 225, 129, 61, 239, 121, 186, 189, 48, 79, 22, 190, 23, 38, 100, 61, 28, 50, 88, 189, 250, 223, 53, 189, 54, 157, 141, 61, 243, 192, 3, 61, 124, 213, 27, 61, 129, 151, 24, 190, 214, 153, 142, 61, 125, 164, 139, 186, 219, 80, 0, 62, 3, 35, 112, 189, 39, 238, 225, 59, 64, 231, 136, 61, 236, 102, 183, 189, 202, 175, 163, 188, 55, 29, 78, 61, 5, 19, 46, 61, 0, 89, 197, 61, 100, 241, 175, 189, 45, 95, 235, 60, 99, 236, 103, 189, 137, 5, 248, 61, 73, 152, 220, 187, 75, 11, 2, 188, 9, 62, 229, 189, 24, 144, 240, 188, 190, 65, 86, 60, 13, 119, 249, 189, 215, 143, 47, 190, 97, 11, 85, 189, 228, 46, 34, 62, 240, 171, 185, 60, 220, 53, 29, 62, 45, 148, 153, 61, 192, 214, 136, 189, 88, 50, 181, 189, 119, 236, 65, 61, 153, 74, 2, 190, 7, 114, 36, 62, 219, 73, 247, 60, 106, 123, 78, 187, 165, 110, 163, 61, 6, 254, 43, 190, 176, 158, 29, 190, 85, 36, 226, 189, 233, 125, 42, 189, 38, 208, 220, 61, 118, 162, 26, 62, 50, 122, 3, 190, 197, 161, 16, 62, 45, 176, 201, 61, 32, 141, 50, 190, 19, 22, 219, 60, 159, 132, 243, 61, 134, 129, 33, 62, 117, 124, 7, 190, 157, 115, 214, 61, 159, 112, 168, 189, 44, 211, 172, 61, 194, 70, 37, 190, 70, 87, 244, 61, 13, 107, 36, 190, 72, 214, 129, 61, 152, 55, 198, 189, 246, 223, 175, 60, 205, 110, 22, 190, 179, 159, 25, 62, 33, 50, 208, 189, 207, 78, 31, 62, 255, 11, 23, 190, 254, 51, 236, 188, 225, 204, 243, 61, 45, 150, 69, 186, 110, 205, 117, 61, 48, 115, 191, 189, 56, 5, 73, 61, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 26, 14, 218, 187, 10, 180, 244, 189, 57, 214, 122, 60, 43, 173, 151, 189, 114, 153, 250, 61, 124, 151, 133, 189, 1, 245, 46, 61, 230, 192, 46, 190, 150, 89, 9, 62, 192, 172, 163, 61, 183, 154, 97, 61, 255, 206, 231, 61, 74, 243, 252, 189, 168, 61, 11, 190, 68, 238, 54, 187, 21, 127, 223, 61, 218, 21, 209, 189, 121, 78, 150, 189, 159, 93, 79, 61, 101, 62, 0, 190, 140, 32, 48, 190, 133, 149, 12, 190, 135, 217, 3, 190, 182, 159, 33, 61, 29, 187, 162, 189, 99, 92, 178, 189, 235, 226, 120, 188, 77, 254, 62, 189, 54, 111, 5, 62, 3, 1, 37, 62, 3, 69, 172, 59, 63, 166, 242, 188, 16, 124, 192, 60, 53, 125, 48, 188, 236, 233, 214, 188, 67, 16, 51, 189, 72, 89, 127, 189, 114, 231, 42, 62, 227, 9, 238, 188, 157, 229, 227, 189, 133, 64, 83, 61, 86, 6, 181, 189, 178, 220, 51, 61, 13, 235, 32, 62, 127, 109, 245, 61, 5, 197, 164, 189, 212, 159, 28, 62, 148, 115, 221, 58, 52, 62, 229, 61, 172, 74, 14, 61, 170, 55, 20, 62, 99, 116, 195, 189, 232, 218, 132, 61, 22, 130, 158, 189, 84, 251, 165, 189, 124, 183, 214, 61, 144, 174, 228, 188, 39, 32, 214, 187, 81, 69, 3, 62, 177, 172, 130, 59, 125, 180, 26, 190, 41, 249, 8, 61, 82, 55, 228, 189, 107, 89, 190, 189, 225, 255, 83, 61, 150, 216, 25, 62, 215, 113, 37, 60, 100, 240, 41, 60, 253, 248, 202, 60, 115, 178, 117, 189, 88, 143, 48, 62, 96, 250, 45, 62, 190, 215, 9, 190, 22, 84, 22, 189, 227, 186, 229, 61, 169, 49, 18, 62, 155, 91, 148, 189, 169, 15, 8, 62, 54, 182, 15, 62, 71, 70, 30, 190, 19, 78, 12, 62, 66, 248, 19, 62, 219, 58, 168, 61, 55, 22, 35, 189, 128, 151, 178, 61, 115, 3, 18, 62, 196, 89, 22, 62, 140, 186, 172, 189, 175, 86, 225, 189, 241, 209, 42, 190, 80, 149, 206, 187, 41, 135, 220, 61, 168, 68, 138, 189, 242, 132, 26, 190, 193, 130, 205, 189, 247, 125, 170, 189, 225, 16, 247, 61, 234, 203, 146, 189, 64, 236, 10, 190, 135, 5, 178, 189, 222, 197, 114, 189, 252, 232, 25, 62, 231, 240, 61, 58, 11, 215, 32, 62, 230, 0, 209, 189, 230, 211, 222, 189, 185, 197, 137, 189, 99, 224, 237, 60, 235, 138, 7, 62, 245, 231, 235, 61, 143, 66, 174, 189, 115, 50, 82, 61, 158, 178, 50, 190, 190, 125, 200, 61, 44, 177, 200, 189, 132, 198, 11, 190, 16, 53, 123, 61, 146, 119, 39, 62, 94, 97, 2, 62, 8, 145, 235, 189, 110, 50, 48, 61, 245, 205, 4, 189, 30, 187, 219, 189, 189, 77, 223, 189, 37, 217, 171, 189, 24, 44, 55, 61, 32, 252, 72, 189, 180, 8, 20, 62, 23, 48, 226, 61, 21, 26, 133, 61, 126, 151, 49, 190, 154, 15, 10, 190, 137, 213, 168, 189, 54, 7, 255, 60, 153, 43, 11, 189, 133, 182, 132, 189, 100, 95, 46, 190, 248, 27, 178, 60, 231, 160, 34, 190, 224, 107, 188, 61, 162, 35, 30, 190, 107, 215, 238, 189, 243, 39, 24, 61, 172, 51, 26, 189, 107, 152, 3, 62, 128, 113, 234, 60, 50, 184, 35, 62, 120, 15, 12, 62, 83, 214, 159, 60, 189, 200, 45, 190, 7, 240, 9, 62, 157, 43, 50, 190, 62, 238, 174, 189, 149, 134, 24, 190, 176, 113, 192, 61, 139, 23, 183, 188, 187, 57, 40, 190, 17, 234, 27, 62, 200, 192, 129, 60, 252, 248, 161, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 144, 9, 190, 170, 100, 24, 62, 30, 240, 76, 61, 157, 218, 142, 61, 131, 239, 86, 186, 160, 72, 195, 189, 123, 88, 231, 61, 8, 215, 42, 190, 36, 226, 187, 189, 84, 92, 27, 190, 194, 32, 255, 61, 106, 83, 217, 189, 235, 197, 113, 61, 169, 44, 107, 187, 1, 8, 163, 189, 159, 243, 148, 189, 133, 172, 186, 61, 28, 1, 214, 61, 138, 103, 44, 189, 84, 139, 226, 61, 109, 170, 46, 61, 208, 187, 15, 62, 215, 205, 169, 61, 105, 18, 47, 62, 108, 205, 171, 189, 94, 137, 160, 189, 99, 144, 176, 58, 30, 81, 131, 188, 122, 94, 204, 188, 233, 220, 226, 189, 203, 11, 15, 190, 146, 228, 154, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 142, 155, 189, 50, 171, 183, 61, 193, 1, 179, 61, 1, 45, 88, 60, 195, 172, 161, 61, 17, 210, 192, 189, 88, 225, 234, 61, 68, 19, 148, 188, 160, 183, 192, 189, 104, 131, 201, 189, 172, 64, 34, 190, 43, 11, 209, 189, 88, 31, 173, 189, 155, 247, 34, 190, 13, 106, 39, 190, 18, 88, 4, 61, 234, 103, 109, 188, 238, 15, 129, 61, 1, 2, 187, 189, 135, 30, 179, 61, 248, 40, 0, 190, 31, 100, 16, 62, 246, 95, 16, 61, 24, 193, 21, 190, 226, 209, 218, 188, 29, 239, 151, 61, 56, 206, 4, 190, 63, 203, 188, 189, 1, 146, 152, 189, 141, 232, 17, 190, 191, 97, 39, 62, 142, 204, 17, 62, 166, 98, 40, 190, 216, 210, 113, 59, 133, 127, 20, 62, 34, 185, 173, 189, 68, 217, 14, 190, 23, 189, 51, 190, 120, 88, 132, 188, 78, 169, 131, 59, 190, 150, 228, 58, 22, 103, 10, 189, 159, 176, 198, 189, 36, 148, 252, 60, 129, 223, 224, 189, 207, 27, 242, 61, 162, 227, 194, 189, 130, 67, 223, 61, 19, 25, 224, 61, 43, 247, 235, 189, 253, 65, 73, 189, 194, 61, 175, 61, 209, 78, 5, 190, 123, 196, 23, 62, 194, 15, 40, 190, 2, 221, 113, 60, 10, 187, 177, 189, 116, 200, 21, 190, 66, 97, 20, 190, 176, 182, 197, 189, 251, 6, 182, 189, 27, 28, 83, 189, 65, 244, 14, 189, 246, 167, 13, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 137, 0, 61, 11, 189, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 187, 224, 61, 197, 253, 235, 62, 31, 211, 176, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 81, 82, 189, 60, 25, 73, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}