// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 48, 24, 63, 156, 213, 19, 63, 247, 148, 155, 62, 133, 71, 4, 63, 229, 53, 130, 191, 16, 227, 110, 62, 41, 182, 24, 62, 87, 45, 251, 62, 139, 162, 155, 62, 114, 49, 246, 189, 165, 183, 123, 190, 15, 180, 167, 190, 18, 130, 83, 61, 29, 110, 95, 63, 187, 3, 28, 62, 14, 198, 62, 191, 191, 191, 251, 190, 248, 1, 254, 189, 100, 47, 178, 61, 90, 33, 183, 63, 153, 214, 72, 63, 91, 30, 31, 63, 43, 107, 100, 63, 27, 4, 37, 191, 125, 210, 108, 60, 2, 222, 206, 63, 210, 115, 57, 63, 209, 117, 3, 63, 187, 201, 77, 62, 63, 193, 67, 189, 8, 123, 73, 63, 250, 24, 87, 189, 95, 16, 252, 188, 224, 92, 56, 63, 37, 196, 86, 191, 153, 46, 203, 190, 201, 168, 236, 190, 128, 177, 175, 191, 237, 204, 54, 191, 10, 25, 100, 190, 85, 229, 101, 191, 179, 221, 120, 189, 194, 105, 196, 189, 35, 188, 121, 63, 225, 121, 80, 191, 241, 236, 63, 63, 65, 204, 24, 62, 100, 203, 102, 189, 165, 51, 169, 190, 94, 48, 30, 63, 45, 183, 119, 191, 61, 35, 73, 63, 254, 129, 251, 62, 33, 220, 86, 62, 110, 139, 33, 191, 35, 141, 21, 191, 119, 125, 227, 190, 222, 140, 251, 190, 4, 141, 80, 191, 240, 114, 172, 62, 14, 224, 39, 191, 145, 15, 54, 191, 30, 71, 56, 189, 239, 207, 35, 190, 94, 56, 28, 190, 94, 8, 56, 61, 6, 56, 48, 62, 143, 4, 196, 190, 111, 206, 77, 190, 77, 74, 14, 62, 72, 61, 226, 62, 156, 214, 106, 62, 137, 146, 59, 62, 217, 246, 132, 191, 43, 211, 57, 63, 210, 129, 158, 190, 86, 40, 107, 61, 218, 60, 214, 62, 138, 173, 29, 190, 144, 142, 88, 62, 229, 233, 0, 191, 245, 79, 241, 190, 42, 171, 30, 191, 114, 173, 39, 189, 4, 134, 97, 62, 43, 37, 154, 62, 13, 146, 15, 189, 95, 250, 232, 190, 6, 8, 83, 63, 163, 168, 52, 62, 120, 84, 136, 190, 74, 166, 27, 191, 134, 114, 206, 62, 26, 125, 104, 60, 5, 105, 198, 189, 193, 61, 145, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 19, 12, 191, 84, 18, 2, 62, 149, 230, 21, 189, 51, 171, 132, 61, 254, 246, 27, 63, 150, 25, 31, 63, 76, 216, 179, 61, 120, 137, 249, 62, 155, 86, 118, 61, 171, 119, 112, 188, 209, 93, 223, 62, 181, 60, 102, 187, 63, 192, 191, 189, 213, 17, 252, 62, 246, 250, 47, 190, 201, 213, 235, 62, 49, 222, 44, 191, 114, 136, 156, 190, 35, 148, 163, 61, 251, 52, 140, 190, 113, 229, 143, 62, 162, 118, 17, 191, 120, 240, 157, 62, 46, 162, 185, 189, 145, 239, 28, 190, 80, 68, 72, 63, 186, 57, 176, 190, 54, 67, 4, 63, 69, 190, 5, 191, 94, 64, 231, 62, 128, 159, 173, 190, 22, 136, 178, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 59, 161, 190, 148, 49, 207, 190, 109, 221, 224, 61, 168, 51, 100, 189, 60, 151, 204, 61, 100, 20, 110, 62, 19, 191, 78, 189, 161, 20, 220, 190, 21, 226, 182, 189, 225, 72, 13, 191, 174, 228, 143, 62, 213, 204, 82, 191, 2, 91, 58, 190, 154, 213, 77, 188, 90, 85, 174, 62, 51, 99, 161, 62, 125, 202, 6, 62, 108, 115, 43, 189, 217, 220, 99, 62, 37, 170, 128, 62, 198, 236, 11, 62, 138, 129, 11, 190, 198, 234, 29, 61, 234, 220, 3, 189, 135, 231, 147, 190, 172, 64, 74, 189, 20, 204, 15, 191, 199, 219, 128, 61, 100, 43, 29, 61, 38, 113, 222, 61, 125, 92, 212, 61, 242, 178, 53, 62, 7, 237, 178, 190, 32, 2, 149, 62, 74, 8, 141, 60, 190, 50, 18, 190, 200, 212, 236, 60, 135, 163, 8, 188, 112, 184, 222, 61, 10, 129, 96, 62, 65, 152, 132, 62, 35, 157, 212, 61, 252, 231, 102, 190, 139, 151, 215, 62, 250, 218, 171, 61, 81, 4, 224, 187, 28, 202, 252, 188, 95, 160, 205, 189, 79, 55, 85, 190, 171, 186, 86, 190, 179, 148, 134, 189, 89, 83, 8, 191, 204, 23, 132, 189, 13, 56, 250, 189, 230, 124, 156, 60, 152, 110, 220, 189, 193, 187, 203, 61, 152, 53, 13, 62, 233, 254, 139, 62, 34, 40, 170, 61, 165, 223, 251, 60, 134, 130, 22, 61, 179, 59, 172, 190, 61, 88, 65, 189, 68, 7, 234, 61, 106, 219, 249, 62, 73, 96, 93, 188, 213, 1, 240, 188, 2, 37, 122, 191, 102, 238, 208, 189, 132, 42, 168, 190, 255, 14, 107, 189, 151, 113, 230, 61, 252, 94, 8, 190, 179, 109, 52, 191, 223, 169, 237, 61, 200, 114, 18, 62, 80, 193, 147, 62, 195, 188, 171, 61, 204, 211, 101, 190, 212, 248, 59, 62, 205, 253, 98, 62, 8, 139, 102, 62, 105, 246, 109, 61, 107, 163, 168, 62, 230, 78, 85, 61, 124, 162, 252, 189, 46, 248, 198, 59, 212, 112, 57, 62, 245, 137, 24, 189, 254, 216, 85, 61, 20, 113, 191, 188, 192, 121, 134, 189, 6, 166, 170, 191, 39, 12, 1, 190, 38, 210, 5, 62, 119, 162, 169, 189, 222, 40, 169, 62, 48, 78, 102, 190, 143, 14, 233, 190, 228, 44, 205, 61, 40, 171, 1, 61, 106, 32, 22, 62, 3, 60, 17, 191, 183, 66, 81, 62, 220, 158, 15, 62, 201, 246, 254, 190, 159, 37, 44, 62, 117, 144, 167, 191, 124, 7, 13, 61, 116, 28, 113, 191, 35, 3, 27, 191, 71, 74, 162, 191, 118, 228, 11, 190, 213, 160, 208, 61, 165, 174, 164, 190, 101, 17, 196, 61, 232, 179, 14, 189, 80, 213, 70, 190, 183, 99, 35, 190, 61, 141, 193, 62, 198, 122, 134, 62, 115, 72, 250, 189, 120, 108, 142, 62, 161, 114, 164, 61, 55, 24, 2, 62, 76, 51, 183, 185, 101, 158, 172, 191, 187, 188, 7, 60, 157, 161, 166, 189, 139, 28, 56, 188, 58, 173, 225, 189, 242, 143, 252, 189, 177, 4, 152, 189, 195, 154, 202, 189, 247, 161, 199, 188, 148, 49, 61, 190, 26, 88, 200, 61, 219, 143, 144, 188, 0, 123, 15, 190, 35, 158, 42, 190, 125, 185, 116, 189, 74, 8, 42, 190, 217, 26, 43, 190, 106, 193, 219, 59, 101, 221, 141, 189, 79, 2, 12, 62, 40, 173, 28, 62, 107, 83, 158, 61, 152, 4, 255, 61, 204, 78, 252, 61, 219, 133, 92, 189, 81, 248, 255, 61, 31, 12, 24, 190, 226, 85, 126, 61, 110, 25, 199, 189, 219, 35, 254, 61, 91, 26, 47, 188, 71, 96, 103, 59, 2, 45, 223, 189, 41, 144, 68, 190, 131, 207, 105, 62, 246, 99, 254, 61, 147, 84, 125, 189, 143, 107, 214, 61, 165, 38, 195, 190, 206, 23, 194, 61, 22, 190, 29, 62, 169, 167, 52, 62, 81, 36, 138, 190, 47, 127, 208, 62, 63, 219, 119, 190, 131, 124, 180, 190, 165, 169, 188, 190, 71, 121, 4, 62, 226, 168, 186, 62, 146, 136, 99, 190, 58, 100, 3, 190, 34, 32, 254, 190, 81, 61, 254, 60, 242, 114, 104, 191, 19, 69, 14, 190, 165, 46, 129, 61, 215, 192, 60, 62, 171, 127, 134, 61, 88, 113, 201, 61, 222, 107, 52, 62, 207, 84, 5, 191, 138, 143, 248, 188, 85, 174, 185, 189, 30, 206, 4, 190, 215, 127, 0, 190, 115, 123, 177, 190, 250, 100, 189, 62, 208, 212, 114, 189, 95, 238, 204, 190, 83, 74, 142, 62, 248, 14, 15, 189, 101, 1, 160, 62, 26, 152, 19, 63, 85, 60, 150, 62, 81, 138, 182, 62, 234, 50, 76, 61, 13, 31, 201, 62, 151, 200, 164, 191, 244, 231, 59, 190, 105, 18, 231, 190, 89, 11, 45, 62, 116, 24, 55, 191, 90, 61, 169, 190, 4, 163, 33, 190, 190, 249, 173, 190, 37, 163, 140, 62, 84, 1, 15, 190, 205, 247, 67, 62, 213, 52, 152, 189, 4, 214, 146, 61, 145, 223, 111, 62, 23, 78, 58, 61, 132, 80, 232, 189, 65, 185, 19, 190, 112, 61, 94, 62, 35, 205, 213, 190, 229, 126, 58, 191, 185, 145, 75, 190, 143, 56, 198, 190, 140, 6, 18, 190, 57, 63, 189, 190, 216, 109, 39, 62, 214, 77, 0, 62, 141, 209, 205, 61, 127, 184, 244, 62, 159, 190, 196, 60, 109, 166, 212, 190, 126, 253, 85, 189, 108, 186, 236, 188, 114, 131, 143, 189, 100, 115, 16, 61, 191, 60, 44, 62, 21, 192, 53, 62, 187, 146, 133, 190, 148, 56, 225, 189, 94, 182, 193, 190, 70, 193, 189, 190, 16, 219, 18, 61, 140, 101, 31, 61, 113, 25, 84, 189, 148, 55, 247, 189, 14, 174, 179, 190, 167, 150, 201, 189, 97, 221, 218, 189, 144, 205, 159, 188, 104, 98, 26, 62, 74, 13, 226, 61, 207, 219, 178, 190, 50, 94, 188, 190, 24, 157, 60, 188, 97, 30, 23, 190, 215, 4, 56, 62, 163, 167, 37, 190, 134, 71, 239, 188, 216, 90, 73, 190, 207, 21, 140, 61, 161, 144, 108, 61, 218, 194, 148, 62, 197, 137, 190, 190, 207, 244, 155, 187, 85, 104, 243, 190, 47, 155, 93, 186, 88, 46, 18, 190, 148, 12, 173, 61, 39, 127, 38, 62, 239, 207, 39, 188, 162, 70, 66, 62, 8, 94, 249, 59, 146, 155, 145, 62, 1, 132, 36, 189, 239, 71, 46, 62, 110, 61, 85, 190, 210, 71, 32, 62, 238, 112, 2, 62, 210, 53, 129, 61, 152, 206, 11, 62, 212, 38, 90, 190, 63, 8, 53, 190, 63, 250, 254, 61, 172, 203, 105, 62, 113, 139, 226, 60, 161, 2, 193, 189, 184, 253, 174, 62, 158, 83, 87, 60, 70, 57, 1, 191, 178, 122, 144, 61, 243, 31, 28, 190, 7, 105, 156, 62, 0, 52, 165, 62, 255, 239, 23, 62, 1, 119, 169, 190, 250, 86, 78, 190, 126, 181, 180, 62, 177, 14, 25, 190, 77, 79, 34, 61, 139, 62, 131, 62, 196, 112, 156, 190, 211, 236, 59, 59, 207, 118, 62, 61, 78, 76, 144, 190, 127, 134, 66, 61, 134, 0, 32, 190, 28, 164, 177, 61, 56, 207, 197, 190, 198, 39, 158, 189, 99, 164, 128, 62, 45, 81, 98, 61, 196, 239, 39, 62, 238, 227, 224, 61, 218, 223, 21, 62, 233, 159, 111, 61, 172, 27, 43, 189, 106, 241, 104, 190, 118, 72, 201, 188, 172, 82, 232, 188, 208, 230, 249, 189, 1, 155, 156, 189, 78, 154, 1, 62, 40, 247, 78, 188, 126, 206, 158, 189, 173, 114, 143, 59, 61, 126, 44, 61, 251, 166, 224, 61, 117, 85, 39, 190, 34, 190, 98, 60, 254, 230, 87, 60, 112, 146, 130, 189, 208, 161, 99, 61, 170, 55, 21, 190, 164, 128, 197, 61, 212, 213, 33, 60, 87, 206, 71, 190, 84, 62, 0, 190, 7, 94, 79, 190, 111, 157, 156, 189, 90, 108, 7, 190, 43, 125, 58, 62, 151, 225, 41, 189, 78, 173, 18, 190, 95, 206, 154, 188, 204, 151, 193, 187, 84, 141, 188, 61, 147, 52, 41, 190, 9, 127, 49, 60, 115, 131, 79, 189, 69, 143, 202, 190, 73, 210, 45, 62, 15, 10, 9, 61, 164, 234, 159, 190, 137, 88, 31, 187, 105, 146, 77, 62, 134, 252, 25, 62, 6, 136, 90, 62, 253, 84, 207, 60, 194, 11, 58, 61, 201, 220, 192, 190, 6, 247, 90, 189, 237, 181, 46, 190, 34, 187, 145, 190, 249, 250, 54, 61, 64, 198, 77, 189, 66, 25, 17, 191, 143, 239, 15, 190, 36, 137, 179, 190, 175, 249, 74, 62, 238, 95, 89, 190, 39, 38, 245, 61, 147, 84, 196, 190, 21, 36, 245, 189, 31, 145, 57, 62, 43, 55, 20, 61, 98, 215, 176, 188, 69, 135, 226, 189, 57, 130, 253, 60, 165, 185, 47, 62, 74, 148, 66, 62, 57, 242, 222, 190, 112, 164, 217, 190, 228, 148, 207, 190, 120, 249, 62, 190, 81, 85, 219, 61, 20, 79, 100, 62, 34, 146, 235, 60, 44, 255, 137, 188, 248, 119, 110, 62, 146, 160, 89, 62, 108, 153, 204, 190, 8, 13, 58, 190, 35, 58, 1, 191, 137, 227, 195, 190, 52, 202, 205, 190, 117, 187, 226, 61, 129, 210, 1, 62, 152, 41, 148, 190, 10, 32, 86, 190, 162, 17, 47, 190, 67, 204, 61, 191, 139, 150, 40, 191, 122, 217, 184, 61, 32, 203, 158, 61, 86, 101, 15, 188, 36, 124, 12, 190, 73, 165, 24, 190, 15, 192, 9, 62, 47, 80, 65, 191, 202, 248, 56, 61, 59, 22, 26, 62, 155, 70, 210, 190, 152, 162, 56, 190, 4, 162, 34, 63, 62, 7, 92, 190, 36, 251, 147, 62, 7, 104, 128, 190, 7, 251, 236, 61, 2, 243, 84, 190, 120, 109, 2, 190, 179, 120, 155, 62, 57, 225, 70, 62, 84, 114, 120, 190, 9, 91, 59, 62, 203, 201, 210, 189, 201, 37, 37, 190, 141, 112, 95, 190, 26, 54, 73, 62, 85, 86, 159, 62, 0, 133, 181, 190, 72, 187, 25, 63, 126, 235, 37, 189, 27, 13, 106, 190, 63, 203, 136, 190, 48, 71, 153, 189, 194, 113, 158, 188, 39, 99, 92, 62, 3, 73, 20, 187, 42, 246, 28, 61, 210, 147, 40, 61, 178, 93, 55, 190, 174, 175, 128, 189, 228, 80, 96, 61, 150, 162, 8, 188, 81, 125, 37, 190, 32, 125, 60, 190, 81, 182, 14, 191, 183, 254, 173, 189, 113, 80, 190, 61, 188, 83, 171, 61, 0, 73, 74, 62, 177, 108, 121, 191, 112, 62, 168, 190, 16, 27, 67, 191, 89, 41, 101, 190, 163, 61, 244, 62, 230, 102, 241, 190, 36, 82, 17, 61, 138, 193, 249, 188, 24, 68, 157, 62, 186, 26, 45, 62, 116, 67, 195, 62, 56, 165, 34, 61, 165, 33, 154, 62, 165, 136, 223, 62, 238, 117, 92, 59, 49, 59, 130, 190, 137, 126, 4, 62, 147, 184, 15, 62, 156, 240, 213, 190, 110, 145, 23, 61, 33, 154, 171, 190, 234, 82, 157, 187, 154, 169, 1, 189, 55, 54, 20, 62, 94, 121, 233, 187, 134, 86, 142, 62, 209, 98, 248, 190, 23, 63, 146, 190, 15, 69, 184, 190, 141, 167, 152, 62, 243, 103, 56, 62, 137, 166, 33, 187, 0, 18, 166, 189, 139, 97, 184, 62, 246, 236, 139, 62, 147, 173, 125, 60, 173, 41, 234, 190, 130, 103, 72, 61, 81, 44, 226, 61, 197, 84, 135, 190, 204, 240, 203, 62, 15, 204, 56, 190, 34, 33, 201, 62, 43, 21, 126, 190, 123, 184, 130, 61, 5, 122, 242, 62, 192, 156, 129, 190, 75, 6, 64, 61, 102, 38, 174, 61, 119, 164, 95, 190, 210, 24, 172, 190, 15, 11, 10, 62, 0, 135, 9, 190, 119, 115, 50, 190, 35, 2, 132, 61, 140, 187, 201, 61, 149, 3, 77, 190, 111, 101, 75, 62, 72, 242, 56, 187, 143, 35, 11, 62, 224, 177, 55, 61, 172, 145, 242, 189, 177, 197, 26, 191, 104, 118, 86, 190, 182, 58, 64, 62, 85, 124, 13, 62, 135, 91, 95, 61, 80, 146, 185, 61, 171, 7, 46, 62, 15, 30, 222, 62, 149, 35, 229, 61, 101, 26, 231, 61, 78, 240, 158, 188, 137, 15, 237, 61, 190, 234, 103, 190, 200, 115, 205, 189, 96, 146, 15, 189, 225, 133, 68, 60, 29, 64, 5, 190, 145, 113, 208, 61, 140, 226, 59, 190, 136, 190, 128, 187, 197, 220, 12, 187, 170, 128, 241, 190, 9, 145, 136, 62, 27, 98, 35, 62, 124, 148, 140, 61, 45, 75, 9, 191, 196, 247, 141, 60, 229, 191, 101, 189, 98, 84, 161, 190, 137, 183, 213, 62, 37, 48, 236, 189, 118, 166, 168, 188, 242, 97, 238, 59, 178, 67, 137, 61, 186, 4, 118, 62, 118, 172, 183, 62, 73, 100, 61, 62, 71, 77, 110, 62, 72, 54, 185, 62, 246, 136, 179, 62, 150, 140, 171, 189, 97, 101, 106, 189, 238, 227, 168, 189, 46, 48, 38, 62, 7, 166, 108, 190, 39, 159, 85, 190, 90, 161, 34, 190, 187, 20, 7, 191, 0, 121, 150, 183, 44, 166, 96, 61, 71, 214, 38, 61, 248, 143, 166, 189, 112, 43, 227, 61, 148, 6, 176, 189, 91, 34, 134, 62, 41, 134, 64, 62, 62, 32, 45, 190, 117, 0, 163, 61, 226, 237, 15, 190, 155, 196, 60, 61, 69, 4, 114, 189, 6, 238, 201, 61, 116, 30, 42, 62, 21, 243, 207, 188, 103, 150, 14, 62, 246, 207, 165, 190, 116, 176, 137, 61, 133, 186, 154, 62, 235, 9, 161, 61, 44, 35, 128, 190, 136, 52, 178, 62, 103, 1, 228, 190, 105, 71, 138, 188, 184, 113, 161, 190, 114, 248, 115, 62, 86, 35, 172, 62, 100, 171, 183, 190, 164, 202, 179, 61, 97, 82, 117, 190, 9, 226, 15, 62, 233, 43, 121, 191, 2, 32, 172, 188, 248, 49, 50, 61, 154, 48, 19, 62, 227, 93, 220, 188, 146, 167, 52, 62, 222, 192, 148, 62, 94, 95, 35, 191, 87, 63, 105, 61, 187, 84, 144, 61, 173, 143, 168, 61, 197, 239, 21, 189, 101, 12, 78, 62, 97, 252, 36, 62, 114, 90, 98, 61, 161, 177, 47, 190, 174, 235, 138, 190, 110, 31, 187, 189, 184, 39, 213, 61, 4, 223, 172, 62, 120, 144, 44, 62, 105, 230, 20, 189, 82, 153, 155, 190, 181, 31, 222, 62, 98, 140, 10, 62, 100, 153, 146, 189, 66, 32, 2, 190, 73, 40, 83, 190, 14, 216, 37, 190, 114, 96, 22, 189, 246, 120, 184, 61, 223, 86, 153, 190, 132, 100, 133, 62, 27, 51, 14, 62, 146, 29, 184, 59, 3, 210, 8, 62, 5, 22, 160, 62, 252, 112, 146, 61, 144, 37, 2, 63, 131, 153, 120, 62, 18, 73, 94, 189, 243, 149, 84, 190, 116, 156, 92, 190, 148, 227, 50, 190, 199, 156, 65, 190, 120, 168, 85, 189, 47, 181, 40, 189, 254, 109, 238, 61, 38, 78, 171, 190, 255, 96, 187, 61, 79, 106, 19, 191, 32, 173, 137, 190, 83, 78, 23, 191, 141, 99, 147, 190, 190, 163, 96, 62, 197, 195, 177, 189, 38, 79, 144, 62, 38, 204, 87, 62, 196, 176, 64, 62, 196, 89, 235, 189, 188, 181, 187, 61, 97, 97, 160, 190, 140, 191, 86, 61, 47, 238, 163, 62, 56, 61, 126, 62, 99, 117, 4, 190, 0, 124, 56, 62, 138, 2, 18, 189, 120, 236, 22, 190, 126, 174, 78, 189, 209, 23, 225, 189, 154, 249, 89, 62, 226, 239, 249, 189, 214, 162, 132, 60, 25, 203, 191, 62, 208, 194, 71, 62, 71, 75, 102, 189, 21, 37, 131, 190, 179, 39, 201, 61, 192, 48, 208, 61, 244, 10, 146, 189, 194, 251, 60, 190, 70, 75, 193, 60, 195, 169, 240, 188, 115, 244, 155, 61, 214, 59, 111, 60, 113, 111, 145, 189, 130, 217, 24, 190, 222, 0, 241, 61, 122, 166, 4, 185, 180, 246, 153, 189, 232, 164, 215, 189, 43, 52, 37, 61, 124, 221, 245, 189, 237, 246, 36, 190, 114, 55, 69, 190, 140, 66, 222, 60, 90, 237, 70, 190, 166, 42, 135, 189, 209, 42, 247, 61, 142, 111, 46, 190, 200, 63, 195, 189, 160, 94, 16, 190, 210, 126, 39, 59, 86, 101, 10, 62, 205, 23, 0, 190, 62, 216, 70, 188, 17, 162, 33, 190, 140, 62, 186, 190, 34, 128, 42, 62, 115, 253, 221, 189, 2, 15, 53, 190, 93, 19, 1, 61, 114, 8, 40, 189, 27, 127, 143, 60, 34, 14, 239, 186, 116, 9, 17, 62, 94, 194, 142, 190, 34, 67, 177, 62, 84, 75, 101, 61, 190, 9, 245, 189, 220, 4, 45, 62, 140, 9, 159, 188, 52, 7, 152, 62, 117, 57, 30, 190, 107, 117, 149, 190, 213, 234, 103, 190, 224, 96, 157, 189, 43, 165, 188, 188, 23, 80, 153, 189, 254, 84, 155, 189, 25, 40, 93, 190, 106, 188, 137, 61, 165, 140, 240, 60, 239, 248, 73, 189, 189, 133, 171, 61, 54, 42, 39, 62, 42, 106, 135, 61, 53, 114, 232, 188, 205, 191, 201, 61, 151, 225, 192, 61, 125, 206, 243, 61, 95, 130, 1, 188, 92, 215, 42, 190, 51, 113, 40, 62, 29, 75, 26, 190, 90, 42, 37, 62, 234, 235, 79, 62, 245, 68, 200, 187, 118, 60, 93, 190, 36, 96, 230, 61, 238, 93, 124, 190, 158, 159, 1, 191, 124, 142, 226, 190, 171, 141, 33, 62, 240, 103, 147, 62, 41, 236, 131, 190, 252, 213, 106, 62, 150, 178, 96, 190, 14, 111, 149, 189, 223, 76, 11, 191, 193, 237, 120, 60, 235, 4, 187, 189, 199, 61, 34, 62, 166, 15, 44, 61, 61, 173, 202, 61, 156, 199, 12, 62, 254, 38, 182, 190, 135, 34, 236, 186, 240, 55, 131, 62, 200, 99, 69, 60, 112, 115, 44, 190, 64, 231, 136, 61, 141, 237, 195, 189, 116, 201, 163, 188, 15, 230, 21, 61, 115, 41, 134, 60, 71, 218, 71, 61, 36, 19, 200, 189, 14, 133, 163, 60, 235, 132, 137, 189, 137, 5, 248, 61, 223, 231, 220, 187, 31, 206, 17, 188, 249, 31, 6, 190, 135, 109, 142, 189, 198, 102, 124, 59, 224, 30, 249, 189, 226, 41, 55, 190, 97, 11, 85, 189, 64, 71, 245, 61, 222, 50, 109, 60, 238, 170, 228, 61, 45, 148, 153, 61, 194, 241, 168, 189, 67, 27, 183, 189, 243, 108, 29, 61, 34, 224, 45, 190, 243, 215, 28, 62, 33, 239, 119, 188, 106, 123, 78, 187, 194, 164, 55, 61, 154, 110, 45, 190, 128, 109, 47, 190, 246, 58, 206, 189, 22, 244, 9, 62, 225, 165, 94, 61, 25, 126, 184, 61, 35, 6, 33, 191, 6, 235, 64, 62, 151, 228, 227, 60, 252, 180, 3, 190, 125, 29, 184, 60, 16, 75, 213, 189, 248, 147, 176, 190, 127, 91, 29, 61, 168, 208, 99, 62, 89, 96, 44, 61, 35, 134, 85, 189, 90, 143, 179, 190, 196, 135, 12, 189, 245, 123, 103, 190, 80, 43, 182, 61, 61, 105, 162, 190, 176, 219, 60, 62, 87, 185, 91, 190, 181, 169, 193, 61, 75, 216, 240, 189, 53, 18, 201, 60, 114, 157, 3, 60, 113, 29, 160, 61, 201, 106, 136, 62, 101, 131, 138, 58, 31, 214, 0, 191, 224, 238, 201, 190, 110, 224, 255, 186, 154, 190, 84, 60, 29, 171, 193, 61, 240, 127, 0, 62, 159, 219, 6, 62, 54, 145, 39, 190, 228, 161, 106, 187, 12, 84, 140, 189, 44, 255, 177, 189, 202, 25, 20, 62, 75, 198, 226, 61, 6, 232, 142, 189, 193, 144, 249, 188, 210, 124, 147, 189, 31, 153, 25, 190, 34, 241, 45, 62, 123, 118, 161, 188, 15, 208, 136, 60, 219, 114, 1, 189, 222, 233, 0, 190, 153, 102, 23, 62, 23, 191, 48, 190, 135, 21, 73, 189, 213, 69, 186, 61, 176, 102, 223, 189, 14, 221, 52, 190, 192, 115, 192, 189, 10, 140, 51, 189, 13, 186, 153, 61, 26, 221, 177, 61, 42, 11, 52, 190, 59, 113, 147, 189, 43, 60, 7, 190, 53, 242, 242, 189, 247, 130, 57, 189, 162, 156, 250, 61, 156, 168, 227, 187, 253, 217, 141, 62, 126, 24, 146, 189, 102, 232, 6, 62, 6, 79, 0, 62, 1, 167, 121, 62, 255, 25, 70, 190, 97, 165, 165, 62, 92, 223, 24, 190, 84, 235, 151, 190, 156, 135, 0, 191, 125, 15, 17, 62, 145, 156, 228, 62, 250, 243, 106, 190, 127, 176, 77, 60, 170, 0, 2, 188, 122, 52, 239, 188, 32, 213, 100, 191, 69, 182, 225, 189, 72, 1, 214, 188, 217, 56, 13, 62, 156, 255, 134, 188, 225, 64, 145, 60, 23, 155, 185, 62, 26, 185, 246, 190, 115, 220, 195, 61, 137, 79, 155, 62, 64, 152, 147, 61, 101, 124, 254, 189, 230, 108, 64, 62, 246, 25, 147, 191, 64, 240, 244, 61, 53, 6, 44, 62, 42, 70, 89, 189, 59, 115, 166, 62, 86, 249, 173, 191, 56, 129, 227, 190, 231, 217, 143, 191, 164, 87, 26, 190, 237, 134, 33, 63, 246, 144, 149, 190, 33, 156, 30, 62, 91, 202, 68, 61, 132, 65, 211, 62, 148, 219, 215, 62, 63, 218, 179, 62, 216, 194, 134, 62, 226, 176, 183, 62, 54, 143, 181, 62, 20, 66, 35, 62, 191, 142, 185, 189, 147, 209, 173, 61, 140, 17, 214, 61, 207, 178, 50, 191, 193, 180, 245, 188, 105, 90, 39, 190, 55, 216, 248, 61, 201, 255, 22, 190, 127, 92, 23, 62, 108, 66, 31, 62, 209, 173, 10, 62, 198, 117, 119, 187, 111, 156, 202, 62, 120, 111, 71, 190, 182, 229, 77, 190, 255, 140, 19, 60, 210, 118, 75, 190, 29, 138, 179, 62, 189, 232, 143, 62, 165, 230, 37, 189, 248, 88, 51, 60, 146, 107, 77, 62, 142, 136, 0, 63, 80, 52, 140, 189, 54, 227, 238, 61, 171, 17, 17, 187, 238, 92, 144, 190, 168, 196, 23, 189, 113, 97, 215, 188, 106, 58, 171, 189, 6, 194, 165, 61, 241, 217, 147, 60, 188, 184, 254, 61, 198, 129, 218, 60, 72, 22, 106, 190, 10, 221, 41, 62, 164, 252, 37, 190, 140, 218, 239, 61, 58, 245, 163, 61, 168, 68, 138, 189, 160, 162, 65, 61, 195, 144, 56, 190, 26, 250, 83, 190, 39, 196, 228, 190, 148, 74, 163, 62, 169, 25, 210, 190, 41, 23, 245, 189, 141, 13, 163, 190, 116, 37, 53, 62, 18, 86, 45, 62, 128, 204, 217, 62, 32, 104, 102, 61, 118, 199, 61, 188, 8, 28, 22, 190, 202, 243, 198, 62, 68, 214, 93, 62, 7, 29, 70, 62, 163, 142, 148, 190, 177, 224, 232, 61, 205, 194, 179, 190, 214, 92, 6, 190, 249, 98, 145, 189, 215, 98, 25, 191, 12, 127, 68, 62, 51, 157, 129, 61, 224, 36, 31, 62, 84, 126, 132, 190, 156, 196, 180, 62, 78, 235, 247, 59, 106, 145, 63, 62, 101, 148, 112, 188, 195, 138, 137, 189, 162, 199, 122, 190, 190, 140, 177, 190, 141, 162, 227, 60, 23, 48, 226, 61, 90, 83, 95, 62, 235, 197, 113, 190, 242, 7, 159, 189, 136, 34, 46, 191, 111, 118, 225, 61, 123, 222, 175, 190, 108, 86, 150, 60, 222, 189, 25, 189, 143, 241, 167, 190, 246, 126, 117, 191, 249, 252, 147, 62, 188, 135, 144, 188, 241, 244, 44, 187, 13, 143, 173, 61, 74, 95, 11, 191, 143, 164, 137, 62, 57, 188, 147, 60, 122, 8, 142, 62, 187, 85, 135, 62, 92, 30, 59, 62, 189, 200, 45, 190, 184, 48, 242, 61, 112, 49, 43, 190, 54, 206, 199, 189, 144, 240, 27, 190, 143, 124, 112, 62, 197, 166, 224, 61, 138, 107, 39, 190, 74, 224, 50, 191, 242, 66, 88, 190, 157, 113, 113, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 101, 78, 189, 88, 201, 31, 62, 242, 116, 231, 188, 183, 169, 65, 62, 214, 206, 177, 188, 53, 94, 104, 189, 223, 248, 110, 62, 106, 15, 59, 189, 38, 160, 6, 190, 168, 181, 2, 190, 4, 29, 188, 61, 13, 107, 95, 189, 188, 237, 7, 62, 59, 224, 231, 188, 81, 117, 205, 59, 166, 24, 215, 61, 185, 0, 228, 189, 201, 16, 77, 62, 111, 18, 1, 61, 205, 188, 64, 61, 108, 237, 9, 61, 62, 91, 144, 61, 100, 229, 10, 62, 212, 29, 129, 62, 139, 118, 4, 190, 112, 197, 171, 189, 99, 144, 176, 58, 192, 117, 19, 62, 196, 140, 179, 61, 211, 100, 116, 190, 192, 64, 34, 190, 87, 63, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 204, 202, 190, 23, 206, 14, 62, 243, 135, 208, 62, 240, 140, 98, 63, 101, 215, 107, 61, 18, 56, 154, 190, 176, 125, 26, 63, 57, 12, 164, 190, 242, 39, 35, 190, 114, 56, 11, 191, 150, 78, 4, 190, 185, 202, 123, 190, 158, 148, 214, 190, 194, 179, 196, 190, 11, 143, 27, 191, 101, 110, 213, 62, 176, 179, 229, 190, 20, 62, 74, 62, 173, 164, 171, 190, 18, 150, 149, 62, 32, 120, 153, 190, 89, 122, 15, 62, 184, 122, 184, 60, 98, 196, 161, 190, 14, 136, 141, 188, 217, 160, 91, 62, 56, 206, 4, 190, 224, 77, 177, 190, 124, 46, 30, 191, 130, 206, 190, 190, 101, 82, 243, 62, 216, 19, 168, 62, 133, 181, 218, 188, 115, 109, 155, 187, 19, 83, 130, 189, 189, 140, 75, 189, 96, 34, 249, 189, 14, 218, 142, 190, 27, 16, 2, 190, 228, 69, 139, 62, 198, 124, 72, 186, 43, 214, 7, 62, 131, 155, 197, 189, 202, 149, 223, 189, 15, 84, 169, 190, 86, 0, 223, 62, 11, 64, 253, 189, 16, 153, 139, 61, 27, 83, 187, 62, 186, 14, 94, 190, 242, 253, 175, 189, 0, 43, 223, 61, 52, 112, 186, 189, 32, 115, 31, 62, 205, 237, 90, 190, 79, 242, 186, 188, 83, 177, 91, 189, 232, 93, 241, 189, 66, 97, 20, 190, 48, 58, 252, 189, 139, 241, 77, 189, 107, 157, 2, 190, 129, 246, 20, 189, 124, 204, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 56, 53, 61, 51, 109, 16, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {1, 199, 43, 62, 28, 187, 6, 191, 170, 82, 168, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 36, 214, 63, 89, 80, 11, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0066/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}