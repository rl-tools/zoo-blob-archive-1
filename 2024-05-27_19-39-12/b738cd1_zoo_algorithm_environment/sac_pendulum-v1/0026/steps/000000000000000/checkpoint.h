// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 172, 115, 61, 23, 78, 233, 189, 21, 176, 9, 190, 80, 132, 243, 62, 71, 219, 135, 190, 48, 200, 73, 190, 237, 168, 155, 190, 142, 249, 43, 190, 185, 162, 12, 191, 221, 32, 0, 63, 141, 178, 133, 189, 220, 58, 106, 190, 110, 184, 172, 190, 232, 187, 46, 190, 33, 42, 180, 62, 115, 186, 74, 61, 42, 226, 237, 62, 95, 154, 223, 190, 153, 90, 161, 190, 223, 80, 160, 188, 241, 59, 56, 62, 214, 124, 255, 62, 223, 5, 186, 61, 95, 164, 187, 61, 102, 39, 129, 190, 105, 60, 221, 62, 92, 53, 214, 62, 36, 229, 181, 189, 114, 137, 152, 62, 207, 72, 215, 62, 169, 124, 8, 61, 141, 210, 95, 60, 191, 119, 60, 190, 220, 184, 8, 63, 105, 204, 3, 191, 6, 218, 228, 62, 20, 96, 167, 62, 189, 254, 102, 62, 136, 191, 235, 62, 109, 79, 183, 189, 78, 170, 108, 62, 121, 233, 162, 187, 46, 167, 155, 190, 35, 243, 101, 61, 231, 231, 31, 62, 232, 100, 16, 62, 232, 7, 2, 63, 18, 170, 6, 62, 153, 75, 64, 190, 111, 178, 185, 190, 17, 124, 109, 189, 47, 53, 17, 63, 193, 151, 180, 60, 91, 138, 23, 190, 47, 164, 76, 62, 25, 185, 104, 190, 200, 92, 61, 61, 73, 174, 46, 190, 142, 251, 143, 61, 11, 183, 174, 62, 18, 35, 8, 190, 106, 65, 169, 189, 71, 204, 208, 61, 19, 29, 19, 63, 65, 131, 223, 62, 15, 171, 203, 61, 49, 70, 17, 63, 33, 231, 112, 190, 231, 145, 135, 190, 238, 225, 211, 62, 76, 255, 7, 63, 249, 229, 201, 62, 234, 135, 130, 62, 46, 13, 135, 190, 92, 27, 168, 190, 148, 43, 30, 62, 184, 153, 150, 62, 231, 35, 186, 62, 129, 120, 154, 189, 102, 11, 67, 62, 21, 5, 232, 62, 251, 22, 66, 189, 167, 64, 174, 62, 44, 14, 175, 190, 42, 12, 5, 191, 251, 75, 219, 62, 132, 249, 138, 62, 41, 109, 144, 62, 119, 212, 111, 190, 84, 183, 203, 60, 173, 168, 203, 189, 210, 184, 247, 190, 243, 175, 185, 190, 92, 250, 197, 190, 199, 4, 81, 190, 126, 247, 211, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 189, 19, 191, 101, 80, 8, 190, 14, 0, 60, 190, 96, 50, 151, 189, 47, 12, 224, 190, 49, 185, 134, 190, 80, 219, 204, 62, 35, 116, 158, 190, 131, 159, 244, 190, 171, 146, 247, 190, 188, 17, 73, 62, 235, 51, 215, 61, 106, 202, 33, 190, 79, 102, 189, 189, 164, 55, 215, 190, 41, 221, 175, 189, 2, 193, 36, 62, 128, 248, 211, 61, 241, 192, 177, 188, 116, 53, 221, 189, 170, 25, 48, 190, 201, 145, 135, 189, 143, 121, 15, 63, 118, 171, 213, 188, 33, 1, 221, 190, 79, 90, 8, 60, 158, 169, 206, 190, 123, 49, 165, 189, 211, 11, 12, 63, 155, 65, 92, 190, 236, 155, 76, 189, 95, 105, 133, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 19, 213, 60, 206, 118, 34, 62, 23, 231, 24, 61, 102, 164, 31, 190, 191, 26, 22, 189, 4, 103, 240, 188, 250, 250, 53, 188, 209, 2, 34, 187, 155, 1, 47, 62, 254, 44, 0, 62, 171, 86, 239, 61, 1, 189, 28, 62, 202, 90, 214, 61, 17, 63, 47, 190, 104, 252, 52, 190, 123, 155, 142, 60, 117, 187, 39, 190, 126, 81, 238, 61, 55, 97, 179, 189, 61, 151, 222, 61, 165, 138, 224, 189, 207, 247, 38, 60, 228, 194, 34, 62, 242, 182, 12, 189, 27, 79, 26, 189, 94, 103, 45, 61, 229, 126, 49, 62, 177, 37, 228, 188, 202, 219, 242, 60, 83, 185, 205, 61, 45, 124, 132, 61, 84, 211, 138, 61, 83, 7, 133, 59, 138, 208, 141, 187, 218, 178, 192, 61, 99, 50, 96, 189, 17, 195, 178, 59, 196, 64, 242, 61, 103, 233, 237, 60, 223, 157, 24, 190, 58, 208, 115, 60, 216, 87, 21, 62, 77, 13, 131, 187, 61, 180, 46, 189, 107, 151, 23, 62, 119, 214, 3, 62, 130, 202, 240, 61, 58, 66, 86, 61, 131, 121, 0, 190, 81, 171, 149, 189, 11, 7, 182, 188, 100, 117, 208, 189, 116, 70, 247, 61, 206, 167, 249, 189, 208, 196, 8, 61, 19, 179, 225, 61, 30, 174, 90, 189, 128, 221, 108, 60, 134, 121, 183, 61, 137, 238, 185, 189, 219, 64, 162, 61, 50, 224, 104, 61, 140, 134, 209, 189, 168, 43, 26, 190, 14, 150, 224, 187, 107, 88, 135, 61, 199, 160, 22, 190, 78, 7, 3, 62, 98, 213, 168, 189, 227, 105, 20, 61, 180, 98, 38, 62, 206, 118, 93, 61, 95, 236, 194, 61, 23, 84, 47, 62, 198, 147, 225, 61, 159, 44, 115, 59, 121, 25, 13, 62, 244, 242, 211, 61, 151, 152, 232, 189, 72, 166, 206, 60, 62, 61, 114, 61, 221, 243, 9, 62, 148, 31, 147, 61, 4, 20, 45, 188, 43, 163, 128, 189, 251, 250, 44, 61, 178, 86, 25, 190, 181, 124, 43, 190, 12, 131, 179, 59, 161, 21, 25, 62, 68, 146, 235, 189, 243, 18, 97, 59, 19, 110, 188, 61, 242, 9, 172, 189, 134, 41, 216, 189, 131, 31, 43, 190, 150, 57, 34, 189, 239, 96, 180, 61, 75, 120, 47, 189, 192, 249, 41, 190, 173, 29, 135, 61, 249, 0, 187, 61, 121, 162, 246, 189, 26, 19, 154, 61, 112, 62, 231, 61, 176, 149, 37, 190, 83, 131, 15, 60, 254, 75, 15, 62, 111, 170, 217, 61, 94, 228, 6, 62, 62, 164, 50, 61, 8, 106, 202, 61, 156, 17, 2, 62, 244, 201, 152, 61, 117, 98, 44, 62, 238, 93, 255, 189, 71, 160, 44, 190, 21, 219, 76, 61, 233, 51, 47, 190, 84, 109, 44, 190, 223, 193, 9, 62, 252, 232, 71, 61, 207, 149, 42, 61, 154, 90, 160, 189, 249, 110, 210, 188, 154, 196, 52, 189, 37, 179, 115, 60, 123, 94, 241, 60, 108, 218, 52, 189, 246, 249, 152, 60, 68, 55, 212, 189, 182, 141, 57, 61, 83, 116, 52, 62, 80, 103, 198, 61, 242, 110, 192, 61, 150, 114, 225, 189, 76, 73, 36, 186, 82, 213, 150, 61, 45, 120, 242, 60, 23, 225, 22, 60, 122, 104, 167, 189, 167, 136, 136, 61, 239, 168, 116, 61, 221, 26, 44, 62, 107, 7, 243, 189, 132, 134, 7, 189, 76, 47, 43, 61, 28, 88, 190, 189, 49, 206, 140, 189, 159, 64, 232, 189, 46, 48, 137, 60, 5, 143, 1, 61, 233, 2, 5, 190, 117, 111, 133, 61, 164, 238, 180, 61, 186, 121, 197, 189, 196, 173, 199, 61, 46, 170, 66, 189, 135, 176, 174, 189, 115, 105, 124, 61, 46, 158, 139, 189, 141, 211, 176, 61, 58, 137, 25, 62, 40, 73, 3, 190, 202, 146, 211, 61, 62, 190, 110, 188, 117, 45, 216, 61, 104, 17, 119, 189, 33, 31, 25, 190, 24, 223, 15, 190, 108, 110, 10, 60, 143, 22, 252, 189, 169, 61, 6, 190, 227, 244, 26, 61, 117, 50, 15, 62, 69, 94, 238, 189, 143, 122, 1, 61, 111, 93, 213, 189, 118, 242, 36, 62, 166, 4, 8, 62, 191, 44, 17, 62, 128, 9, 46, 62, 109, 35, 3, 62, 154, 173, 66, 189, 114, 114, 15, 190, 76, 84, 198, 189, 117, 224, 37, 62, 76, 129, 40, 190, 106, 248, 35, 62, 241, 130, 58, 60, 221, 248, 94, 61, 200, 244, 165, 189, 125, 74, 9, 62, 147, 196, 48, 62, 36, 114, 64, 61, 177, 242, 48, 62, 93, 156, 51, 62, 247, 110, 33, 61, 94, 89, 29, 190, 173, 216, 252, 61, 156, 107, 37, 188, 82, 253, 108, 60, 3, 18, 12, 190, 135, 224, 46, 62, 163, 217, 0, 62, 230, 254, 2, 190, 122, 240, 174, 189, 137, 58, 8, 62, 1, 179, 121, 61, 48, 120, 99, 188, 58, 236, 64, 59, 49, 44, 177, 188, 138, 102, 39, 189, 231, 222, 131, 61, 148, 192, 197, 188, 163, 152, 39, 62, 56, 26, 1, 62, 129, 14, 253, 61, 216, 238, 85, 189, 85, 84, 68, 61, 46, 17, 31, 190, 87, 121, 19, 190, 54, 18, 157, 189, 101, 184, 54, 61, 193, 25, 32, 189, 232, 129, 11, 189, 222, 130, 11, 189, 124, 30, 74, 189, 179, 229, 177, 61, 233, 27, 204, 61, 32, 68, 218, 189, 253, 196, 222, 189, 214, 77, 106, 61, 129, 13, 208, 61, 8, 203, 172, 61, 154, 251, 140, 189, 37, 171, 30, 190, 51, 102, 11, 61, 162, 98, 103, 189, 129, 73, 21, 190, 132, 184, 12, 190, 72, 110, 209, 61, 120, 47, 163, 61, 61, 150, 147, 189, 58, 130, 196, 61, 114, 40, 205, 61, 193, 152, 135, 60, 46, 1, 83, 189, 35, 110, 48, 61, 226, 111, 11, 190, 204, 122, 40, 189, 171, 207, 247, 189, 178, 50, 12, 189, 215, 141, 32, 189, 205, 12, 2, 190, 59, 241, 245, 189, 221, 14, 238, 189, 77, 113, 209, 61, 157, 160, 52, 62, 133, 205, 220, 61, 17, 146, 136, 61, 106, 197, 3, 60, 101, 253, 236, 61, 73, 241, 243, 188, 161, 245, 25, 62, 128, 50, 213, 61, 26, 62, 252, 189, 201, 8, 126, 60, 92, 95, 196, 60, 225, 24, 42, 190, 242, 248, 37, 190, 92, 85, 15, 60, 147, 167, 53, 189, 54, 75, 179, 189, 125, 13, 219, 61, 48, 39, 29, 190, 192, 120, 34, 62, 143, 254, 37, 62, 42, 37, 45, 187, 166, 102, 19, 62, 33, 245, 121, 189, 208, 23, 113, 60, 170, 236, 45, 190, 99, 169, 65, 189, 44, 19, 17, 62, 160, 210, 98, 189, 124, 166, 38, 190, 48, 7, 33, 190, 107, 158, 159, 61, 36, 54, 90, 59, 124, 87, 204, 61, 234, 190, 16, 61, 250, 53, 29, 189, 205, 235, 31, 62, 87, 31, 150, 60, 44, 51, 83, 61, 203, 108, 81, 61, 106, 209, 36, 190, 144, 150, 10, 190, 17, 221, 211, 61, 26, 171, 221, 189, 100, 79, 202, 189, 59, 34, 164, 60, 158, 153, 35, 62, 81, 218, 100, 189, 214, 240, 240, 187, 30, 218, 38, 62, 8, 64, 139, 189, 98, 220, 158, 189, 248, 206, 22, 190, 206, 193, 166, 187, 78, 186, 235, 60, 49, 214, 8, 189, 200, 139, 16, 189, 236, 176, 26, 62, 122, 94, 187, 61, 48, 92, 70, 61, 11, 113, 58, 61, 150, 84, 141, 189, 176, 159, 50, 62, 99, 175, 120, 188, 173, 191, 35, 62, 161, 151, 185, 189, 227, 91, 22, 61, 197, 101, 84, 60, 209, 18, 189, 61, 64, 60, 217, 189, 246, 99, 10, 190, 30, 166, 41, 62, 229, 75, 255, 189, 136, 18, 101, 61, 95, 243, 27, 190, 235, 72, 194, 61, 187, 47, 243, 189, 217, 246, 181, 61, 175, 191, 229, 189, 69, 233, 105, 61, 232, 46, 197, 189, 23, 85, 174, 60, 207, 187, 4, 190, 244, 175, 224, 60, 91, 76, 106, 189, 159, 11, 159, 189, 123, 85, 217, 61, 148, 72, 239, 189, 63, 9, 97, 189, 175, 251, 198, 61, 21, 152, 203, 189, 15, 14, 184, 61, 135, 155, 152, 61, 132, 169, 192, 61, 207, 143, 223, 185, 78, 212, 1, 190, 254, 155, 9, 189, 169, 165, 194, 188, 203, 121, 46, 62, 82, 205, 198, 189, 89, 152, 47, 62, 116, 71, 224, 189, 223, 236, 46, 61, 53, 6, 87, 61, 222, 79, 42, 190, 76, 207, 27, 190, 53, 208, 137, 189, 104, 41, 62, 61, 125, 51, 231, 187, 31, 36, 20, 190, 41, 18, 135, 189, 241, 198, 154, 189, 204, 86, 7, 62, 89, 44, 55, 189, 124, 68, 56, 61, 253, 162, 26, 190, 139, 56, 194, 61, 207, 95, 129, 61, 38, 140, 179, 187, 253, 179, 43, 190, 253, 83, 91, 187, 244, 164, 5, 189, 46, 139, 145, 188, 146, 136, 25, 62, 129, 154, 46, 190, 163, 253, 247, 61, 211, 154, 191, 61, 59, 46, 40, 189, 18, 214, 58, 61, 144, 53, 11, 62, 208, 127, 38, 190, 207, 65, 28, 190, 174, 15, 128, 60, 39, 68, 56, 61, 70, 2, 32, 190, 237, 131, 56, 189, 174, 143, 34, 190, 31, 248, 10, 62, 198, 120, 16, 62, 81, 8, 98, 189, 148, 43, 209, 189, 69, 181, 128, 189, 188, 22, 45, 62, 244, 45, 246, 61, 78, 37, 161, 61, 3, 88, 35, 62, 68, 44, 159, 188, 147, 171, 242, 61, 58, 156, 169, 189, 214, 71, 211, 60, 192, 196, 108, 60, 211, 130, 30, 188, 249, 72, 255, 60, 3, 198, 14, 62, 99, 97, 214, 58, 152, 234, 179, 189, 186, 98, 87, 189, 56, 8, 200, 61, 97, 248, 192, 60, 49, 78, 250, 61, 144, 216, 59, 187, 63, 220, 185, 189, 176, 250, 41, 189, 86, 26, 184, 61, 63, 97, 234, 61, 113, 246, 241, 61, 101, 241, 247, 61, 184, 190, 95, 61, 3, 164, 187, 189, 139, 247, 31, 190, 136, 134, 131, 189, 144, 89, 235, 60, 70, 92, 208, 189, 41, 249, 9, 190, 95, 60, 109, 189, 63, 135, 226, 189, 153, 65, 250, 188, 196, 238, 153, 189, 207, 151, 19, 188, 82, 62, 169, 189, 54, 117, 21, 190, 83, 237, 227, 189, 152, 175, 33, 62, 198, 218, 229, 187, 25, 254, 36, 190, 45, 2, 48, 190, 166, 105, 44, 61, 18, 213, 137, 187, 225, 66, 122, 60, 242, 128, 47, 61, 107, 203, 71, 189, 228, 123, 42, 189, 249, 152, 15, 62, 184, 209, 188, 61, 60, 144, 146, 189, 191, 51, 29, 60, 161, 9, 37, 61, 240, 231, 14, 62, 107, 80, 98, 61, 178, 41, 32, 190, 117, 179, 199, 189, 224, 43, 10, 190, 21, 131, 2, 190, 111, 154, 152, 61, 209, 121, 113, 61, 80, 89, 45, 190, 132, 129, 21, 190, 29, 86, 36, 62, 206, 97, 6, 60, 4, 194, 12, 189, 124, 203, 13, 62, 96, 16, 26, 190, 165, 238, 81, 189, 186, 100, 28, 190, 30, 58, 208, 189, 54, 184, 205, 189, 127, 58, 239, 188, 225, 0, 159, 189, 158, 212, 198, 61, 86, 138, 127, 61, 245, 134, 179, 189, 128, 232, 37, 189, 223, 73, 52, 190, 58, 171, 1, 190, 82, 64, 0, 62, 146, 241, 109, 189, 141, 51, 43, 62, 221, 37, 204, 189, 189, 81, 16, 62, 2, 91, 169, 189, 170, 36, 159, 187, 19, 122, 55, 61, 236, 157, 15, 62, 245, 120, 100, 61, 181, 112, 14, 190, 151, 26, 40, 62, 251, 89, 223, 188, 118, 254, 250, 188, 183, 166, 50, 190, 163, 139, 29, 62, 215, 157, 168, 189, 238, 222, 71, 61, 7, 245, 244, 189, 60, 120, 90, 61, 164, 59, 47, 190, 122, 219, 47, 61, 255, 62, 70, 188, 177, 168, 145, 189, 113, 16, 252, 59, 15, 152, 234, 189, 51, 254, 219, 189, 227, 140, 13, 190, 28, 16, 161, 189, 28, 89, 42, 62, 224, 70, 26, 61, 178, 246, 23, 61, 125, 36, 246, 189, 43, 232, 3, 190, 8, 71, 37, 62, 173, 105, 208, 189, 189, 41, 18, 62, 224, 195, 1, 62, 148, 99, 39, 61, 66, 32, 229, 189, 171, 191, 10, 190, 210, 210, 105, 189, 99, 221, 209, 61, 182, 161, 216, 61, 69, 4, 6, 62, 46, 125, 47, 62, 199, 137, 171, 189, 37, 118, 233, 61, 32, 29, 202, 59, 144, 231, 152, 61, 0, 78, 104, 61, 8, 56, 241, 60, 155, 179, 166, 189, 129, 63, 21, 190, 25, 208, 25, 62, 187, 226, 48, 62, 61, 38, 16, 190, 92, 188, 48, 61, 175, 105, 105, 61, 41, 115, 162, 188, 168, 64, 231, 61, 9, 53, 185, 189, 174, 119, 124, 60, 65, 135, 179, 189, 30, 43, 77, 189, 225, 206, 81, 189, 125, 13, 51, 59, 84, 254, 48, 189, 134, 87, 91, 189, 177, 184, 2, 62, 119, 71, 49, 190, 47, 62, 61, 61, 169, 184, 228, 61, 174, 160, 105, 187, 227, 82, 40, 190, 158, 153, 62, 189, 100, 213, 194, 188, 164, 206, 16, 62, 84, 105, 22, 62, 178, 5, 23, 190, 121, 226, 177, 60, 13, 184, 178, 61, 193, 108, 0, 62, 112, 2, 26, 189, 10, 94, 18, 190, 1, 219, 99, 61, 91, 176, 33, 62, 93, 26, 44, 61, 253, 152, 14, 62, 215, 124, 103, 189, 164, 152, 16, 62, 33, 74, 8, 190, 203, 92, 175, 182, 9, 185, 179, 189, 195, 172, 249, 61, 60, 49, 2, 190, 28, 206, 154, 60, 198, 229, 230, 61, 204, 190, 51, 190, 237, 139, 0, 190, 74, 106, 36, 62, 146, 37, 230, 189, 146, 246, 221, 188, 35, 220, 48, 188, 29, 231, 89, 189, 233, 227, 181, 60, 136, 192, 49, 62, 230, 0, 128, 189, 230, 11, 114, 189, 181, 183, 80, 189, 114, 10, 243, 189, 20, 72, 5, 190, 245, 242, 1, 190, 188, 30, 251, 61, 83, 112, 16, 189, 162, 166, 237, 189, 155, 38, 188, 189, 115, 181, 204, 189, 49, 98, 9, 62, 123, 45, 154, 189, 99, 210, 208, 61, 91, 160, 3, 61, 81, 242, 5, 190, 141, 87, 166, 189, 68, 157, 189, 188, 46, 222, 226, 189, 246, 251, 51, 60, 167, 84, 133, 61, 155, 151, 130, 189, 20, 194, 184, 189, 43, 249, 40, 62, 94, 141, 206, 61, 17, 14, 20, 62, 14, 51, 135, 61, 37, 48, 142, 61, 58, 241, 21, 62, 229, 59, 142, 189, 101, 131, 45, 190, 250, 25, 128, 188, 208, 107, 2, 190, 73, 217, 27, 62, 250, 101, 253, 57, 167, 96, 11, 188, 97, 212, 15, 190, 116, 20, 63, 188, 40, 36, 20, 190, 121, 118, 139, 189, 72, 64, 97, 189, 160, 131, 159, 189, 236, 238, 23, 62, 236, 113, 168, 61, 134, 127, 46, 189, 129, 140, 138, 189, 68, 125, 169, 60, 48, 60, 42, 190, 39, 234, 72, 61, 224, 226, 161, 189, 222, 87, 2, 62, 125, 42, 140, 188, 188, 13, 246, 60, 208, 167, 125, 189, 89, 89, 51, 61, 34, 32, 49, 62, 145, 159, 190, 189, 255, 64, 236, 61, 76, 2, 114, 189, 3, 228, 210, 61, 149, 119, 33, 61, 255, 68, 127, 188, 109, 232, 251, 61, 60, 75, 136, 61, 181, 227, 16, 190, 41, 9, 171, 189, 12, 78, 181, 187, 193, 13, 9, 188, 41, 1, 250, 61, 108, 11, 49, 59, 84, 123, 24, 62, 194, 56, 222, 189, 181, 205, 50, 189, 87, 55, 102, 189, 39, 84, 98, 61, 216, 187, 197, 189, 201, 150, 203, 61, 19, 147, 6, 190, 235, 93, 10, 190, 4, 180, 29, 190, 152, 35, 1, 189, 178, 223, 171, 61, 123, 61, 41, 62, 146, 185, 236, 189, 33, 42, 147, 61, 183, 58, 214, 188, 158, 109, 92, 189, 218, 123, 178, 189, 155, 252, 21, 61, 80, 32, 205, 189, 175, 23, 224, 189, 190, 188, 35, 62, 205, 232, 152, 61, 235, 120, 197, 61, 89, 8, 253, 189, 168, 197, 212, 189, 176, 59, 157, 61, 223, 63, 4, 190, 132, 221, 33, 190, 193, 244, 222, 189, 98, 33, 117, 189, 110, 28, 187, 60, 99, 64, 154, 189, 29, 41, 26, 190, 8, 166, 5, 62, 239, 121, 15, 62, 129, 70, 5, 190, 156, 208, 212, 188, 149, 122, 162, 60, 189, 252, 90, 189, 111, 149, 44, 62, 6, 222, 27, 189, 254, 175, 72, 60, 84, 56, 206, 61, 63, 32, 218, 189, 159, 214, 157, 188, 204, 131, 47, 62, 76, 46, 86, 188, 205, 164, 29, 190, 211, 15, 239, 189, 248, 95, 86, 187, 206, 215, 52, 190, 215, 204, 226, 189, 25, 160, 15, 190, 245, 238, 33, 62, 178, 86, 42, 62, 244, 227, 239, 189, 162, 13, 176, 189, 252, 125, 45, 190, 70, 60, 182, 188, 98, 23, 51, 190, 115, 11, 176, 58, 235, 227, 91, 189, 19, 73, 185, 186, 255, 152, 144, 189, 224, 236, 248, 189, 208, 10, 123, 60, 250, 49, 12, 62, 137, 202, 226, 61, 55, 230, 135, 61, 123, 212, 31, 62, 164, 123, 128, 189, 62, 161, 214, 189, 158, 174, 10, 61, 57, 197, 46, 190, 111, 131, 18, 190, 98, 15, 8, 62, 106, 212, 251, 61, 189, 220, 27, 62, 170, 244, 6, 190, 155, 226, 227, 188, 8, 26, 15, 190, 32, 52, 174, 189, 169, 95, 36, 62, 248, 182, 177, 189, 195, 66, 129, 188, 162, 43, 254, 188, 76, 38, 214, 60, 192, 79, 225, 189, 88, 143, 99, 61, 39, 77, 191, 59, 14, 129, 43, 190, 251, 73, 164, 61, 96, 62, 21, 62, 32, 98, 6, 62, 84, 42, 51, 190, 179, 115, 28, 190, 182, 13, 145, 186, 15, 221, 13, 62, 81, 63, 173, 189, 247, 201, 252, 189, 173, 51, 3, 62, 58, 143, 135, 189, 139, 152, 33, 62, 68, 153, 144, 189, 180, 95, 5, 190, 241, 62, 1, 62, 123, 242, 68, 59, 194, 215, 76, 189, 109, 62, 4, 190, 111, 66, 64, 189, 225, 3, 236, 189, 225, 4, 211, 189, 225, 20, 5, 189, 155, 61, 46, 62, 69, 157, 136, 189, 28, 100, 93, 188, 222, 162, 0, 190, 224, 163, 212, 61, 133, 166, 202, 189, 13, 165, 98, 61, 237, 158, 14, 62, 230, 214, 239, 188, 219, 74, 170, 61, 167, 237, 172, 189, 5, 217, 159, 60, 96, 205, 23, 190, 10, 138, 87, 189, 11, 213, 50, 62, 168, 46, 68, 188, 67, 71, 154, 189, 35, 127, 141, 188, 253, 230, 3, 189, 114, 4, 115, 61, 251, 56, 21, 62, 211, 5, 14, 62, 1, 217, 93, 61, 70, 9, 202, 189, 230, 255, 21, 62, 249, 4, 40, 62, 25, 156, 111, 58, 96, 110, 35, 62, 75, 44, 37, 62, 36, 100, 70, 189, 202, 13, 49, 190, 105, 108, 20, 190, 189, 9, 214, 189, 31, 96, 114, 189, 253, 238, 89, 60, 165, 87, 234, 61, 72, 189, 39, 62, 67, 186, 222, 57, 225, 249, 140, 61, 116, 53, 204, 61, 206, 85, 172, 59, 211, 172, 120, 59, 152, 125, 9, 62, 180, 111, 176, 189, 253, 124, 6, 190, 31, 129, 8, 190, 72, 53, 31, 60, 40, 212, 189, 188, 187, 40, 32, 62, 87, 145, 18, 61, 184, 106, 84, 60, 191, 129, 229, 61, 154, 209, 160, 61, 1, 64, 72, 189, 176, 164, 181, 188, 155, 250, 168, 188, 109, 100, 28, 62, 222, 103, 168, 61, 61, 237, 56, 188, 163, 190, 32, 62, 98, 163, 45, 188, 98, 227, 142, 61, 209, 66, 242, 189, 118, 232, 193, 189, 109, 229, 237, 60, 21, 215, 48, 62, 109, 15, 49, 62, 0, 57, 212, 189, 207, 5, 41, 188, 185, 213, 20, 190, 245, 68, 14, 190, 197, 33, 16, 62, 54, 139, 194, 60, 161, 207, 235, 188, 151, 164, 12, 190, 212, 154, 12, 189, 142, 181, 115, 61, 93, 223, 31, 62, 4, 33, 147, 189, 231, 1, 17, 189, 181, 77, 208, 60, 211, 51, 170, 189, 11, 44, 237, 61, 121, 0, 81, 61, 17, 83, 4, 190, 66, 133, 208, 60, 175, 221, 14, 60, 78, 92, 46, 190, 102, 19, 9, 190, 74, 160, 52, 190, 160, 75, 178, 189, 177, 115, 44, 62, 41, 21, 42, 59, 77, 106, 6, 62, 62, 169, 143, 187, 166, 112, 21, 190, 169, 116, 48, 190, 26, 201, 1, 62, 21, 61, 184, 60, 254, 52, 44, 61, 242, 148, 16, 190, 3, 38, 134, 60, 175, 56, 35, 62, 245, 173, 190, 61, 192, 166, 247, 187, 83, 174, 198, 189, 186, 214, 213, 61, 193, 180, 37, 190, 140, 151, 13, 62, 120, 175, 96, 61, 125, 2, 250, 189, 100, 27, 57, 189, 3, 105, 228, 189, 191, 173, 167, 61, 75, 75, 5, 61, 145, 153, 170, 187, 108, 175, 50, 190, 166, 152, 80, 189, 232, 56, 209, 60, 208, 44, 11, 61, 14, 99, 172, 61, 141, 189, 8, 62, 117, 201, 198, 188, 52, 24, 38, 62, 93, 250, 5, 62, 101, 8, 225, 189, 154, 27, 7, 190, 108, 216, 73, 189, 149, 151, 24, 62, 60, 111, 132, 189, 60, 202, 210, 187, 237, 234, 145, 61, 203, 132, 183, 187, 227, 54, 170, 189, 165, 246, 144, 60, 59, 79, 151, 61, 179, 206, 69, 61, 110, 228, 206, 189, 237, 151, 219, 189, 11, 32, 42, 189, 5, 37, 31, 190, 195, 10, 240, 186, 153, 151, 170, 188, 70, 174, 203, 60, 232, 230, 174, 188, 127, 199, 176, 60, 250, 216, 113, 189, 228, 229, 109, 61, 17, 89, 54, 186, 126, 124, 194, 188, 14, 42, 22, 62, 217, 225, 29, 61, 203, 143, 253, 61, 252, 181, 25, 190, 222, 53, 178, 61, 202, 162, 34, 190, 187, 15, 50, 62, 110, 205, 134, 61, 11, 124, 212, 187, 198, 247, 185, 189, 237, 232, 11, 62, 43, 8, 191, 60, 16, 155, 38, 190, 142, 57, 7, 190, 188, 48, 27, 62, 219, 196, 29, 62, 16, 197, 78, 61, 33, 148, 195, 189, 0, 51, 221, 61, 161, 73, 13, 62, 152, 129, 20, 60, 13, 172, 40, 189, 16, 206, 25, 62, 249, 172, 45, 61, 181, 53, 0, 190, 131, 206, 0, 61, 170, 11, 9, 189, 233, 80, 44, 62, 10, 169, 40, 62, 167, 173, 177, 189, 254, 215, 144, 189, 168, 165, 161, 188, 252, 20, 0, 188, 153, 75, 8, 62, 7, 216, 192, 61, 129, 114, 156, 61, 238, 79, 14, 62, 227, 211, 19, 190, 93, 166, 224, 189, 126, 121, 47, 190, 118, 122, 9, 189, 209, 15, 36, 62, 156, 165, 199, 61, 75, 64, 55, 61, 68, 130, 161, 189, 185, 206, 44, 61, 99, 150, 27, 190, 137, 217, 59, 61, 97, 44, 85, 61, 217, 22, 139, 60, 20, 66, 47, 61, 1, 193, 137, 59, 197, 231, 98, 189, 199, 188, 23, 190, 211, 151, 73, 189, 126, 181, 253, 61, 200, 59, 39, 187, 225, 185, 220, 189, 21, 155, 19, 190, 161, 70, 243, 189, 211, 100, 125, 61, 141, 22, 105, 189, 126, 53, 125, 189, 3, 206, 221, 61, 172, 15, 33, 62, 50, 105, 229, 187, 70, 21, 136, 61, 241, 167, 211, 189, 137, 96, 50, 61, 124, 187, 151, 61, 153, 47, 145, 61, 73, 137, 75, 185, 119, 191, 164, 189, 148, 184, 185, 188, 246, 35, 202, 61, 85, 134, 2, 59, 140, 96, 233, 189, 103, 178, 170, 188, 184, 124, 39, 62, 218, 120, 212, 61, 225, 18, 131, 189, 16, 144, 28, 190, 178, 174, 83, 189, 87, 188, 184, 61, 113, 180, 144, 59, 50, 189, 210, 188, 249, 71, 19, 61, 100, 244, 228, 61, 171, 7, 19, 62, 83, 125, 15, 190, 220, 108, 178, 189, 110, 185, 39, 62, 173, 62, 219, 61, 18, 14, 20, 60, 38, 32, 26, 190, 155, 176, 1, 187, 152, 136, 208, 188, 128, 246, 16, 189, 134, 216, 20, 190, 219, 64, 15, 61, 32, 146, 27, 190, 32, 181, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 23, 11, 62, 147, 168, 3, 62, 55, 142, 5, 189, 205, 61, 245, 188, 26, 6, 2, 190, 102, 149, 32, 62, 205, 94, 31, 189, 159, 23, 11, 190, 100, 69, 205, 61, 69, 223, 31, 190, 79, 226, 210, 61, 123, 166, 195, 189, 177, 217, 36, 62, 232, 66, 154, 189, 28, 64, 161, 61, 95, 181, 25, 62, 115, 135, 50, 190, 176, 5, 45, 190, 239, 134, 0, 62, 0, 35, 156, 61, 236, 179, 5, 190, 113, 225, 169, 61, 78, 124, 230, 60, 229, 100, 7, 62, 153, 19, 134, 189, 75, 120, 152, 56, 119, 114, 206, 61, 136, 135, 164, 189, 79, 44, 1, 190, 4, 1, 236, 188, 175, 122, 3, 62, 223, 96, 139, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 194, 170, 189, 146, 123, 22, 62, 70, 83, 30, 189, 193, 70, 50, 190, 27, 35, 109, 189, 87, 221, 113, 189, 11, 205, 65, 188, 222, 64, 220, 189, 159, 181, 29, 190, 24, 222, 9, 190, 112, 206, 184, 189, 135, 199, 250, 61, 78, 137, 29, 187, 128, 48, 196, 189, 147, 9, 56, 61, 16, 50, 13, 189, 65, 204, 225, 61, 49, 122, 62, 61, 143, 138, 1, 190, 46, 222, 201, 61, 137, 250, 232, 189, 59, 253, 137, 61, 88, 2, 143, 188, 215, 227, 62, 61, 224, 124, 28, 62, 81, 95, 241, 189, 213, 51, 2, 62, 136, 21, 23, 62, 41, 34, 137, 189, 179, 63, 254, 188, 11, 226, 9, 190, 227, 246, 33, 60, 153, 149, 78, 189, 138, 210, 24, 62, 10, 234, 49, 190, 157, 186, 253, 189, 28, 163, 37, 190, 245, 20, 20, 190, 102, 247, 29, 190, 46, 162, 223, 189, 169, 45, 26, 61, 223, 243, 3, 62, 10, 45, 242, 189, 117, 79, 212, 189, 103, 145, 189, 188, 48, 122, 128, 188, 15, 17, 38, 62, 45, 20, 252, 61, 68, 216, 95, 61, 226, 243, 18, 189, 229, 167, 51, 62, 254, 68, 146, 61, 144, 102, 89, 61, 225, 46, 30, 61, 59, 173, 99, 189, 162, 102, 6, 190, 203, 186, 233, 189, 155, 193, 174, 189, 220, 113, 7, 190, 194, 20, 158, 61, 197, 62, 229, 61, 126, 134, 89, 61, 92, 76, 32, 190, 134, 164, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 161, 10, 188, 245, 86, 197, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 19, 132, 191, 216, 159, 198, 63, 78, 2, 22, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {149, 224, 78, 189, 250, 105, 61, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}