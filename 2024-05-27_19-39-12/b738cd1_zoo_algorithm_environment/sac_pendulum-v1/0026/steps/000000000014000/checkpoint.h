// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 64, 16, 191, 220, 28, 164, 191, 107, 98, 100, 190, 64, 147, 72, 63, 214, 37, 44, 191, 185, 12, 82, 190, 54, 13, 117, 190, 110, 24, 76, 191, 15, 86, 2, 191, 21, 247, 60, 63, 14, 42, 139, 190, 180, 216, 43, 190, 59, 210, 31, 191, 67, 164, 36, 63, 231, 129, 200, 62, 235, 126, 125, 62, 20, 187, 240, 61, 32, 207, 203, 190, 94, 180, 75, 190, 223, 220, 102, 62, 31, 70, 113, 61, 146, 188, 92, 62, 66, 255, 163, 190, 80, 214, 205, 62, 130, 135, 226, 190, 125, 204, 211, 63, 86, 54, 152, 62, 251, 10, 34, 63, 32, 79, 30, 63, 220, 231, 186, 62, 164, 8, 100, 62, 25, 225, 182, 62, 18, 15, 155, 190, 243, 225, 62, 62, 184, 32, 253, 190, 117, 98, 67, 63, 240, 244, 5, 63, 174, 160, 238, 62, 205, 161, 228, 62, 23, 15, 220, 189, 68, 156, 110, 190, 36, 220, 171, 190, 208, 42, 243, 190, 242, 135, 147, 191, 159, 9, 173, 190, 7, 205, 235, 62, 20, 210, 95, 63, 206, 236, 49, 62, 210, 9, 241, 189, 63, 36, 13, 191, 36, 147, 175, 61, 130, 174, 76, 63, 210, 89, 103, 190, 96, 146, 18, 190, 44, 93, 206, 189, 231, 37, 23, 190, 148, 104, 218, 62, 71, 234, 3, 191, 197, 229, 33, 63, 2, 236, 4, 63, 39, 205, 180, 190, 213, 68, 139, 191, 35, 108, 190, 190, 213, 144, 38, 63, 217, 246, 172, 62, 154, 233, 57, 190, 211, 176, 80, 63, 91, 132, 100, 191, 29, 43, 20, 190, 150, 70, 61, 63, 166, 131, 138, 63, 15, 106, 101, 62, 244, 135, 102, 63, 37, 177, 6, 191, 197, 0, 155, 190, 227, 201, 246, 62, 69, 135, 91, 63, 189, 137, 132, 62, 174, 110, 19, 63, 115, 29, 176, 62, 69, 48, 196, 62, 225, 7, 41, 190, 218, 126, 21, 191, 125, 38, 197, 190, 237, 77, 4, 191, 81, 226, 139, 63, 81, 25, 5, 62, 121, 136, 249, 62, 113, 28, 239, 190, 103, 57, 48, 190, 4, 197, 163, 62, 250, 165, 166, 191, 82, 15, 140, 190, 218, 153, 187, 190, 226, 147, 170, 190, 236, 227, 22, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 180, 155, 190, 164, 213, 110, 190, 2, 186, 164, 190, 146, 5, 146, 190, 2, 115, 8, 191, 147, 131, 69, 190, 31, 199, 13, 63, 210, 87, 128, 61, 241, 146, 171, 190, 171, 113, 68, 191, 46, 235, 80, 62, 205, 70, 217, 62, 214, 123, 167, 190, 72, 136, 182, 190, 40, 121, 64, 190, 204, 48, 176, 189, 217, 170, 148, 62, 143, 123, 203, 189, 78, 114, 21, 62, 99, 54, 137, 190, 127, 216, 67, 189, 182, 54, 134, 189, 89, 224, 28, 63, 242, 197, 243, 189, 242, 171, 83, 191, 103, 2, 55, 190, 6, 113, 79, 191, 195, 40, 251, 190, 108, 251, 32, 63, 180, 32, 157, 190, 38, 129, 227, 61, 26, 196, 5, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 148, 138, 62, 178, 81, 65, 62, 20, 71, 120, 190, 109, 55, 49, 190, 30, 255, 92, 190, 171, 185, 147, 190, 74, 252, 170, 60, 111, 144, 184, 189, 5, 52, 82, 62, 193, 50, 44, 62, 36, 208, 146, 60, 182, 192, 113, 189, 38, 195, 188, 61, 53, 211, 68, 190, 48, 102, 251, 189, 38, 214, 15, 62, 45, 166, 197, 190, 48, 99, 43, 62, 149, 56, 18, 191, 218, 83, 254, 187, 129, 220, 18, 190, 35, 67, 7, 61, 112, 235, 12, 62, 216, 249, 47, 60, 233, 227, 50, 191, 187, 202, 176, 61, 113, 238, 60, 62, 190, 56, 14, 190, 222, 123, 4, 62, 16, 228, 177, 190, 186, 104, 46, 190, 227, 83, 138, 188, 187, 249, 78, 62, 121, 60, 139, 190, 41, 219, 109, 62, 237, 44, 121, 190, 85, 248, 30, 190, 94, 236, 92, 62, 174, 196, 24, 190, 58, 226, 179, 61, 107, 56, 96, 190, 44, 166, 243, 62, 191, 4, 98, 62, 47, 190, 101, 190, 110, 64, 113, 62, 0, 87, 8, 63, 126, 177, 188, 62, 155, 103, 2, 62, 3, 155, 83, 62, 86, 91, 137, 190, 104, 227, 82, 189, 65, 184, 128, 190, 199, 195, 212, 62, 107, 171, 222, 61, 5, 82, 101, 190, 25, 253, 17, 62, 131, 31, 144, 62, 206, 27, 158, 61, 1, 51, 2, 63, 146, 23, 86, 62, 80, 107, 93, 189, 216, 78, 13, 62, 87, 20, 197, 188, 53, 14, 128, 190, 135, 172, 114, 62, 154, 229, 149, 187, 193, 143, 140, 190, 68, 11, 199, 61, 129, 128, 247, 190, 34, 5, 71, 61, 200, 182, 131, 62, 76, 4, 47, 62, 249, 147, 188, 189, 179, 162, 182, 62, 146, 239, 118, 62, 188, 174, 38, 189, 73, 131, 130, 62, 115, 243, 186, 62, 148, 19, 129, 190, 80, 196, 132, 62, 190, 150, 184, 189, 8, 126, 116, 62, 45, 179, 65, 190, 190, 59, 127, 190, 254, 198, 119, 190, 183, 199, 33, 62, 199, 203, 79, 189, 120, 81, 132, 188, 110, 167, 75, 191, 169, 172, 134, 62, 145, 28, 2, 190, 92, 204, 161, 61, 166, 163, 57, 62, 29, 25, 62, 191, 180, 241, 203, 190, 94, 58, 73, 190, 149, 86, 64, 191, 56, 173, 192, 62, 12, 86, 76, 61, 100, 235, 23, 189, 250, 32, 129, 62, 128, 32, 185, 61, 234, 140, 5, 190, 140, 35, 179, 61, 230, 160, 149, 62, 78, 141, 100, 61, 173, 32, 181, 189, 102, 42, 132, 62, 182, 151, 233, 61, 245, 111, 37, 61, 74, 43, 88, 61, 123, 21, 26, 62, 93, 104, 154, 61, 189, 223, 24, 62, 247, 190, 188, 62, 139, 78, 12, 61, 184, 120, 88, 62, 192, 105, 225, 190, 41, 253, 64, 189, 64, 223, 145, 189, 213, 177, 251, 61, 25, 220, 216, 61, 140, 242, 83, 62, 55, 55, 163, 190, 100, 65, 47, 189, 73, 105, 249, 62, 11, 20, 156, 62, 128, 40, 179, 189, 143, 238, 123, 62, 188, 29, 203, 189, 155, 232, 57, 190, 255, 57, 64, 188, 3, 85, 28, 190, 52, 96, 131, 61, 92, 216, 72, 62, 157, 221, 86, 61, 109, 252, 43, 190, 198, 86, 134, 62, 142, 16, 59, 62, 230, 97, 3, 189, 19, 7, 121, 61, 56, 91, 143, 62, 154, 2, 49, 60, 125, 63, 199, 62, 251, 20, 98, 190, 32, 47, 185, 60, 130, 237, 74, 190, 194, 76, 156, 190, 228, 243, 158, 189, 45, 76, 140, 189, 130, 70, 20, 62, 12, 11, 42, 62, 194, 100, 29, 191, 173, 67, 54, 62, 211, 108, 227, 61, 195, 172, 3, 188, 255, 81, 46, 62, 62, 188, 12, 191, 159, 158, 27, 190, 12, 197, 27, 62, 156, 129, 26, 62, 150, 117, 130, 61, 117, 206, 215, 61, 14, 143, 221, 189, 4, 216, 183, 190, 61, 48, 111, 189, 98, 203, 163, 61, 54, 182, 45, 189, 205, 59, 143, 191, 196, 222, 168, 190, 191, 250, 190, 61, 138, 207, 170, 190, 178, 225, 66, 190, 195, 85, 177, 62, 252, 198, 54, 61, 128, 191, 129, 188, 84, 225, 82, 189, 169, 152, 59, 188, 152, 94, 125, 191, 247, 16, 220, 190, 140, 134, 247, 61, 194, 94, 160, 62, 235, 96, 114, 62, 145, 245, 226, 187, 72, 222, 196, 190, 185, 177, 251, 189, 128, 59, 19, 62, 70, 233, 173, 189, 211, 227, 153, 61, 220, 236, 192, 190, 238, 28, 17, 60, 137, 56, 83, 190, 217, 68, 143, 62, 48, 162, 226, 62, 162, 131, 48, 62, 169, 164, 216, 62, 27, 105, 106, 61, 246, 253, 77, 62, 115, 155, 152, 61, 11, 55, 6, 62, 64, 96, 3, 190, 109, 119, 17, 189, 61, 167, 140, 61, 16, 196, 126, 62, 42, 85, 13, 62, 142, 143, 227, 61, 171, 36, 65, 61, 215, 49, 200, 61, 34, 118, 136, 62, 81, 44, 92, 62, 145, 136, 28, 189, 170, 165, 174, 189, 105, 73, 245, 61, 223, 122, 119, 62, 39, 191, 148, 62, 247, 239, 64, 62, 125, 239, 41, 62, 3, 92, 20, 62, 38, 242, 100, 189, 202, 247, 56, 62, 202, 112, 69, 189, 138, 85, 43, 59, 64, 71, 146, 188, 3, 187, 150, 62, 146, 52, 35, 62, 187, 214, 198, 190, 200, 196, 78, 56, 83, 73, 202, 189, 245, 119, 147, 189, 245, 61, 58, 62, 20, 51, 105, 61, 156, 159, 138, 189, 190, 145, 114, 62, 156, 237, 228, 62, 14, 119, 104, 62, 194, 100, 166, 190, 128, 26, 68, 190, 194, 30, 15, 61, 10, 0, 33, 190, 208, 160, 125, 189, 209, 52, 44, 191, 183, 154, 155, 60, 3, 128, 207, 190, 21, 87, 116, 188, 98, 87, 151, 189, 198, 119, 62, 62, 182, 23, 8, 190, 98, 252, 234, 58, 217, 13, 33, 191, 137, 102, 141, 190, 51, 80, 166, 189, 175, 229, 38, 190, 126, 250, 117, 62, 119, 109, 63, 191, 133, 86, 63, 191, 66, 194, 58, 190, 84, 5, 187, 61, 13, 152, 251, 60, 30, 231, 69, 60, 0, 197, 111, 61, 242, 191, 15, 191, 182, 78, 161, 61, 38, 120, 55, 62, 218, 35, 133, 62, 248, 38, 130, 190, 242, 97, 3, 63, 215, 188, 204, 189, 106, 70, 192, 189, 220, 215, 139, 62, 73, 79, 144, 61, 75, 138, 165, 190, 217, 5, 135, 62, 153, 88, 22, 190, 75, 70, 122, 188, 29, 131, 201, 189, 84, 232, 246, 190, 5, 244, 218, 60, 90, 187, 147, 62, 241, 22, 254, 188, 165, 120, 171, 62, 239, 55, 60, 191, 233, 238, 58, 62, 83, 193, 217, 189, 31, 192, 23, 61, 199, 68, 122, 62, 48, 5, 24, 191, 221, 172, 21, 191, 23, 50, 146, 190, 121, 243, 235, 62, 52, 20, 233, 60, 180, 5, 252, 61, 42, 242, 64, 190, 252, 2, 50, 191, 163, 137, 73, 62, 255, 154, 187, 61, 181, 143, 248, 62, 145, 71, 44, 191, 10, 66, 116, 190, 7, 7, 131, 189, 191, 77, 128, 60, 97, 174, 163, 190, 161, 118, 58, 60, 61, 154, 127, 62, 108, 234, 154, 188, 84, 60, 80, 62, 73, 184, 180, 190, 235, 18, 98, 190, 84, 237, 113, 191, 28, 141, 80, 62, 136, 84, 83, 191, 94, 217, 6, 190, 68, 218, 3, 190, 168, 34, 70, 190, 229, 231, 48, 190, 97, 226, 160, 61, 41, 36, 108, 62, 85, 40, 233, 61, 211, 25, 252, 189, 169, 30, 142, 60, 183, 111, 223, 62, 31, 16, 182, 62, 240, 181, 4, 190, 115, 34, 103, 190, 79, 8, 18, 190, 18, 199, 134, 191, 92, 81, 146, 60, 179, 49, 36, 61, 154, 247, 2, 190, 56, 2, 46, 191, 19, 5, 188, 61, 207, 46, 66, 62, 131, 242, 251, 190, 94, 161, 205, 61, 245, 253, 22, 62, 205, 251, 205, 60, 56, 11, 73, 61, 148, 155, 254, 60, 12, 25, 219, 189, 211, 48, 57, 191, 140, 160, 132, 191, 93, 16, 18, 189, 141, 227, 43, 61, 40, 80, 158, 189, 170, 89, 34, 62, 7, 200, 84, 191, 19, 214, 69, 190, 85, 248, 142, 61, 189, 79, 53, 59, 30, 13, 132, 62, 141, 146, 92, 191, 19, 27, 123, 190, 28, 194, 17, 62, 56, 53, 228, 190, 199, 207, 165, 61, 47, 195, 59, 62, 98, 212, 161, 62, 153, 75, 159, 189, 147, 16, 111, 62, 132, 249, 146, 189, 98, 141, 2, 190, 73, 54, 247, 61, 237, 236, 255, 190, 18, 220, 224, 189, 26, 158, 48, 62, 229, 87, 26, 189, 191, 144, 238, 61, 147, 231, 179, 190, 195, 253, 215, 190, 45, 30, 234, 189, 120, 184, 93, 62, 213, 251, 93, 62, 59, 77, 42, 62, 162, 55, 238, 190, 248, 234, 35, 62, 86, 249, 29, 62, 56, 17, 196, 190, 80, 197, 142, 62, 228, 8, 0, 190, 165, 192, 139, 190, 181, 205, 1, 62, 245, 137, 141, 188, 72, 71, 35, 62, 4, 200, 143, 62, 101, 255, 249, 61, 125, 54, 36, 191, 122, 238, 238, 61, 36, 83, 128, 189, 46, 176, 139, 189, 101, 224, 253, 189, 139, 139, 205, 189, 49, 209, 216, 61, 230, 195, 143, 190, 47, 230, 43, 190, 168, 206, 255, 190, 131, 161, 255, 61, 250, 42, 179, 62, 159, 198, 83, 190, 201, 61, 161, 190, 225, 246, 33, 191, 198, 135, 136, 190, 104, 8, 71, 62, 222, 109, 130, 62, 121, 50, 243, 62, 141, 204, 110, 61, 191, 19, 38, 191, 133, 153, 204, 61, 187, 140, 73, 62, 236, 229, 224, 190, 234, 235, 136, 188, 61, 54, 88, 190, 102, 235, 41, 189, 155, 183, 186, 190, 218, 181, 166, 190, 165, 187, 221, 189, 172, 52, 201, 189, 117, 11, 135, 61, 2, 57, 131, 61, 28, 210, 66, 187, 106, 36, 136, 191, 71, 199, 254, 189, 194, 154, 168, 62, 142, 27, 225, 189, 19, 22, 163, 62, 149, 62, 16, 61, 196, 97, 207, 62, 85, 22, 11, 191, 71, 70, 135, 190, 176, 14, 141, 189, 33, 10, 118, 190, 201, 113, 19, 191, 225, 145, 130, 188, 88, 11, 30, 191, 5, 100, 21, 190, 19, 226, 73, 190, 156, 182, 66, 189, 39, 84, 66, 62, 103, 72, 50, 62, 124, 60, 131, 190, 72, 69, 109, 191, 77, 70, 9, 191, 198, 218, 229, 187, 39, 61, 37, 191, 92, 6, 218, 190, 81, 72, 10, 191, 32, 36, 149, 62, 225, 66, 122, 60, 92, 246, 139, 191, 131, 59, 33, 62, 226, 5, 66, 189, 125, 193, 7, 62, 195, 31, 151, 61, 105, 117, 171, 189, 221, 205, 64, 188, 123, 158, 211, 60, 235, 83, 194, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 200, 111, 33, 190, 147, 130, 21, 190, 199, 92, 141, 61, 123, 174, 140, 60, 251, 195, 49, 190, 180, 182, 29, 190, 163, 15, 0, 62, 98, 98, 162, 187, 148, 127, 13, 189, 196, 15, 219, 61, 177, 134, 28, 190, 202, 147, 100, 189, 9, 147, 44, 190, 200, 240, 224, 189, 126, 158, 223, 189, 227, 34, 87, 189, 27, 253, 196, 189, 79, 66, 146, 61, 184, 97, 70, 60, 185, 178, 179, 189, 101, 76, 96, 189, 48, 122, 97, 190, 54, 25, 70, 190, 237, 153, 231, 62, 144, 187, 221, 188, 184, 4, 7, 63, 60, 223, 28, 190, 226, 125, 92, 62, 157, 196, 127, 190, 1, 156, 20, 62, 136, 96, 247, 61, 94, 96, 8, 190, 236, 178, 255, 61, 247, 13, 135, 61, 206, 185, 151, 187, 59, 64, 131, 188, 26, 41, 3, 190, 129, 247, 131, 191, 158, 63, 238, 62, 121, 48, 110, 62, 233, 31, 96, 62, 231, 1, 0, 190, 186, 95, 172, 188, 8, 183, 7, 58, 153, 158, 101, 62, 99, 53, 62, 191, 141, 144, 139, 62, 148, 56, 60, 191, 21, 127, 172, 190, 188, 133, 97, 189, 174, 255, 21, 191, 66, 110, 104, 62, 39, 72, 196, 62, 238, 36, 111, 62, 33, 170, 178, 188, 141, 142, 68, 190, 238, 219, 138, 191, 104, 34, 215, 61, 31, 12, 199, 61, 17, 52, 168, 61, 35, 193, 6, 62, 6, 72, 226, 60, 245, 75, 74, 61, 201, 120, 199, 189, 165, 4, 43, 62, 183, 182, 225, 61, 12, 219, 118, 61, 75, 169, 57, 60, 62, 248, 38, 62, 152, 184, 169, 190, 154, 83, 177, 61, 34, 190, 246, 189, 120, 200, 25, 62, 18, 29, 46, 62, 1, 138, 103, 62, 213, 219, 155, 190, 173, 15, 214, 190, 202, 90, 162, 189, 107, 56, 230, 61, 193, 154, 145, 190, 141, 229, 2, 62, 131, 233, 22, 190, 84, 241, 24, 61, 88, 187, 114, 61, 112, 96, 77, 191, 193, 58, 38, 61, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 127, 245, 218, 190, 19, 92, 126, 62, 160, 211, 99, 62, 199, 216, 141, 189, 146, 7, 184, 61, 147, 60, 241, 61, 178, 167, 191, 189, 190, 132, 197, 61, 183, 50, 172, 61, 188, 228, 26, 62, 183, 25, 47, 190, 136, 207, 177, 62, 127, 3, 215, 189, 209, 239, 244, 189, 42, 91, 153, 62, 108, 46, 21, 190, 108, 253, 18, 61, 6, 233, 110, 189, 116, 230, 212, 62, 170, 7, 230, 61, 208, 27, 153, 62, 182, 201, 152, 190, 18, 22, 151, 61, 124, 140, 10, 62, 230, 115, 30, 189, 242, 153, 38, 61, 239, 11, 37, 62, 177, 109, 155, 190, 42, 22, 75, 190, 181, 210, 194, 62, 238, 9, 177, 62, 148, 13, 146, 61, 96, 241, 32, 191, 241, 44, 142, 62, 88, 46, 237, 59, 144, 152, 206, 62, 153, 11, 137, 62, 95, 114, 73, 62, 44, 211, 6, 62, 222, 49, 230, 189, 6, 13, 9, 63, 212, 180, 217, 190, 41, 126, 187, 190, 128, 241, 174, 61, 41, 30, 135, 190, 238, 133, 142, 190, 165, 245, 24, 191, 34, 136, 253, 190, 120, 117, 110, 60, 226, 99, 197, 61, 67, 85, 48, 62, 176, 76, 179, 61, 247, 203, 41, 191, 10, 82, 37, 190, 126, 211, 107, 62, 221, 230, 135, 190, 17, 228, 139, 62, 104, 238, 113, 190, 222, 209, 160, 190, 157, 161, 186, 190, 60, 142, 43, 62, 38, 73, 163, 62, 64, 17, 168, 62, 224, 124, 194, 61, 228, 73, 111, 62, 26, 76, 141, 62, 173, 129, 165, 61, 12, 4, 15, 62, 214, 107, 174, 190, 138, 101, 152, 60, 219, 244, 7, 191, 144, 123, 110, 62, 149, 119, 33, 61, 57, 43, 155, 190, 240, 237, 91, 61, 237, 245, 93, 62, 202, 235, 128, 191, 19, 132, 22, 190, 93, 78, 95, 61, 3, 14, 129, 191, 192, 72, 166, 62, 172, 122, 36, 62, 34, 11, 154, 189, 179, 177, 100, 191, 133, 34, 25, 62, 97, 79, 237, 190, 241, 241, 214, 62, 140, 230, 150, 191, 41, 216, 47, 62, 58, 160, 84, 191, 153, 41, 27, 191, 173, 181, 27, 190, 133, 134, 143, 191, 198, 194, 97, 62, 220, 2, 7, 63, 8, 74, 213, 59, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 175, 32, 132, 191, 83, 179, 156, 61, 114, 172, 181, 190, 29, 18, 136, 188, 153, 173, 107, 62, 167, 183, 123, 190, 91, 199, 134, 62, 102, 246, 209, 190, 76, 194, 215, 62, 248, 233, 179, 190, 161, 92, 234, 190, 134, 98, 108, 62, 156, 44, 213, 190, 143, 141, 116, 191, 78, 116, 62, 192, 146, 46, 167, 190, 182, 46, 252, 60, 74, 114, 14, 62, 30, 225, 180, 62, 101, 150, 103, 61, 241, 54, 43, 192, 84, 0, 129, 62, 23, 32, 50, 62, 117, 195, 129, 190, 63, 15, 138, 62, 188, 68, 128, 190, 71, 236, 3, 191, 238, 205, 210, 190, 220, 193, 237, 61, 192, 79, 2, 190, 220, 210, 77, 62, 83, 73, 173, 62, 174, 110, 20, 190, 240, 54, 146, 191, 175, 222, 53, 62, 53, 197, 31, 191, 125, 129, 212, 190, 58, 126, 81, 62, 235, 132, 83, 190, 35, 182, 186, 190, 168, 143, 19, 190, 124, 12, 141, 62, 234, 45, 135, 189, 230, 65, 55, 189, 126, 94, 96, 62, 141, 87, 8, 190, 111, 186, 95, 191, 106, 180, 22, 62, 254, 33, 184, 189, 58, 185, 199, 60, 66, 44, 152, 190, 151, 4, 158, 190, 28, 149, 92, 191, 80, 179, 163, 190, 72, 13, 131, 62, 89, 9, 24, 62, 31, 161, 91, 190, 45, 232, 125, 62, 238, 4, 198, 188, 124, 202, 159, 190, 100, 1, 233, 60, 46, 169, 137, 189, 209, 5, 3, 190, 33, 156, 184, 190, 171, 223, 8, 190, 75, 52, 252, 191, 161, 191, 181, 62, 79, 101, 177, 191, 17, 134, 203, 61, 102, 114, 19, 62, 252, 205, 213, 61, 187, 131, 211, 190, 140, 214, 95, 62, 21, 198, 66, 61, 40, 243, 134, 190, 175, 45, 219, 60, 186, 61, 18, 61, 142, 44, 165, 190, 1, 180, 254, 191, 118, 62, 160, 62, 71, 65, 134, 190, 95, 110, 10, 190, 75, 54, 3, 61, 131, 113, 116, 189, 124, 43, 2, 192, 244, 64, 52, 189, 82, 62, 238, 188, 94, 122, 157, 62, 128, 193, 208, 61, 13, 145, 179, 62, 112, 52, 252, 61, 109, 86, 243, 190, 60, 100, 191, 62, 55, 105, 139, 188, 206, 199, 9, 191, 133, 212, 54, 62, 63, 54, 234, 62, 38, 236, 160, 190, 246, 37, 233, 190, 179, 251, 18, 190, 140, 157, 7, 191, 48, 75, 22, 189, 93, 252, 104, 61, 17, 241, 139, 62, 112, 115, 20, 190, 235, 170, 151, 62, 160, 176, 163, 62, 236, 119, 87, 189, 218, 102, 42, 62, 154, 4, 107, 62, 124, 196, 133, 61, 33, 45, 55, 62, 15, 134, 193, 190, 143, 24, 45, 61, 114, 253, 164, 190, 91, 184, 122, 190, 209, 74, 232, 61, 13, 3, 24, 62, 189, 174, 207, 61, 111, 68, 148, 62, 150, 223, 58, 191, 247, 18, 209, 61, 199, 147, 168, 61, 238, 4, 88, 61, 182, 188, 119, 62, 63, 110, 208, 190, 11, 224, 224, 190, 70, 106, 28, 62, 191, 66, 123, 190, 172, 252, 160, 62, 39, 25, 176, 188, 80, 219, 187, 61, 115, 19, 100, 62, 26, 188, 28, 61, 190, 132, 74, 62, 162, 214, 200, 190, 45, 199, 160, 62, 63, 10, 188, 190, 98, 59, 22, 190, 247, 57, 177, 62, 6, 94, 104, 189, 156, 245, 86, 190, 58, 127, 183, 190, 107, 61, 227, 190, 140, 175, 12, 62, 159, 166, 168, 62, 155, 97, 145, 62, 110, 28, 76, 62, 119, 71, 192, 190, 129, 111, 155, 189, 79, 21, 167, 62, 219, 110, 172, 190, 151, 75, 163, 61, 255, 158, 134, 189, 212, 151, 24, 190, 56, 114, 109, 190, 242, 0, 169, 190, 73, 84, 73, 62, 245, 65, 49, 62, 58, 65, 129, 62, 239, 154, 22, 191, 109, 75, 178, 62, 0, 32, 14, 62, 0, 6, 60, 188, 156, 131, 175, 61, 56, 182, 8, 62, 245, 242, 220, 61, 152, 93, 114, 190, 25, 117, 198, 62, 115, 80, 88, 190, 74, 132, 2, 62, 235, 201, 134, 62, 121, 68, 170, 189, 193, 246, 95, 190, 230, 146, 136, 61, 134, 169, 31, 191, 12, 87, 212, 61, 71, 98, 58, 62, 110, 76, 112, 62, 123, 39, 79, 62, 82, 244, 159, 190, 106, 182, 235, 60, 71, 161, 237, 61, 211, 189, 188, 190, 15, 51, 209, 61, 101, 117, 5, 190, 163, 48, 34, 190, 172, 38, 249, 60, 202, 209, 197, 61, 56, 37, 3, 63, 89, 62, 227, 61, 153, 221, 81, 62, 238, 178, 71, 63, 143, 147, 201, 190, 178, 10, 189, 190, 255, 13, 47, 190, 164, 98, 106, 190, 135, 36, 157, 188, 4, 242, 139, 61, 145, 162, 209, 62, 164, 155, 35, 191, 159, 84, 205, 62, 155, 113, 104, 62, 144, 211, 165, 189, 161, 197, 163, 62, 252, 18, 213, 62, 138, 123, 134, 190, 91, 57, 144, 62, 154, 3, 228, 60, 20, 62, 202, 61, 19, 52, 149, 190, 249, 105, 114, 190, 188, 238, 231, 188, 118, 109, 81, 62, 91, 114, 4, 190, 183, 42, 206, 62, 213, 63, 49, 191, 58, 21, 91, 62, 50, 229, 207, 62, 29, 65, 168, 62, 209, 235, 25, 62, 122, 148, 48, 191, 166, 62, 35, 191, 218, 107, 181, 61, 107, 214, 59, 62, 46, 221, 177, 60, 78, 177, 6, 190, 144, 68, 27, 190, 50, 85, 73, 190, 142, 105, 197, 188, 12, 142, 137, 190, 131, 175, 107, 190, 110, 146, 146, 188, 154, 50, 141, 62, 86, 245, 252, 188, 145, 64, 194, 190, 169, 215, 49, 62, 223, 27, 114, 189, 244, 20, 86, 189, 150, 104, 132, 62, 216, 0, 199, 190, 176, 177, 178, 61, 64, 119, 168, 190, 169, 14, 138, 190, 112, 71, 32, 189, 28, 83, 114, 62, 252, 143, 219, 61, 31, 98, 87, 62, 255, 124, 58, 61, 46, 182, 79, 62, 114, 68, 25, 190, 173, 199, 33, 60, 97, 14, 217, 61, 84, 0, 82, 61, 76, 122, 15, 60, 137, 47, 29, 191, 191, 225, 145, 60, 238, 45, 189, 189, 115, 157, 202, 189, 133, 142, 127, 62, 74, 113, 1, 189, 38, 170, 209, 61, 70, 159, 52, 189, 100, 245, 59, 62, 98, 44, 225, 190, 158, 181, 199, 62, 40, 5, 200, 61, 195, 71, 215, 60, 180, 98, 137, 62, 100, 114, 120, 62, 97, 236, 193, 190, 106, 30, 20, 62, 75, 79, 252, 189, 143, 62, 142, 62, 186, 24, 129, 190, 132, 88, 30, 190, 144, 106, 203, 190, 197, 48, 105, 61, 139, 49, 13, 62, 152, 240, 37, 62, 81, 58, 52, 191, 177, 182, 171, 62, 60, 246, 226, 62, 159, 47, 145, 61, 33, 140, 64, 61, 201, 62, 8, 191, 230, 225, 174, 190, 198, 117, 28, 190, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 124, 1, 62, 44, 58, 58, 188, 115, 165, 164, 61, 12, 214, 2, 190, 90, 119, 224, 187, 215, 134, 81, 62, 153, 216, 163, 62, 95, 108, 197, 188, 213, 151, 237, 61, 122, 162, 136, 188, 140, 47, 144, 62, 127, 127, 68, 187, 170, 37, 175, 62, 74, 145, 75, 61, 115, 44, 5, 61, 107, 102, 126, 62, 76, 252, 145, 190, 177, 142, 77, 190, 218, 101, 165, 61, 155, 191, 28, 62, 254, 148, 15, 190, 220, 85, 115, 61, 45, 77, 170, 62, 151, 109, 96, 61, 22, 91, 143, 61, 118, 84, 137, 61, 9, 238, 128, 62, 82, 183, 148, 60, 154, 114, 23, 189, 65, 133, 103, 190, 81, 65, 22, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 219, 135, 189, 163, 217, 248, 62, 58, 59, 189, 190, 90, 183, 176, 190, 212, 10, 86, 190, 57, 169, 221, 189, 211, 182, 32, 189, 194, 94, 51, 191, 32, 234, 204, 190, 32, 190, 114, 191, 111, 132, 148, 191, 174, 230, 134, 62, 223, 198, 239, 61, 19, 34, 127, 191, 48, 237, 71, 61, 57, 254, 29, 63, 183, 57, 50, 190, 36, 27, 66, 61, 198, 233, 203, 190, 223, 145, 28, 63, 110, 239, 57, 191, 132, 86, 180, 61, 48, 104, 139, 63, 196, 210, 25, 63, 61, 169, 34, 63, 211, 177, 185, 190, 174, 23, 225, 62, 182, 168, 155, 62, 229, 223, 13, 191, 190, 233, 150, 61, 170, 143, 191, 190, 40, 37, 91, 61, 210, 127, 99, 190, 157, 245, 74, 62, 52, 247, 19, 190, 234, 124, 93, 189, 130, 240, 53, 190, 166, 75, 197, 190, 166, 124, 208, 190, 209, 201, 3, 190, 215, 238, 77, 62, 46, 84, 202, 61, 0, 50, 26, 62, 35, 233, 15, 190, 182, 173, 190, 190, 226, 140, 198, 187, 78, 248, 226, 61, 192, 233, 171, 62, 38, 163, 90, 62, 149, 243, 150, 188, 94, 237, 87, 62, 119, 10, 220, 62, 110, 80, 142, 189, 156, 198, 42, 61, 90, 151, 46, 62, 25, 148, 190, 62, 52, 115, 9, 190, 28, 47, 135, 60, 172, 16, 174, 190, 192, 5, 78, 61, 217, 160, 17, 63, 250, 129, 210, 62, 21, 197, 163, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 74, 80, 189, 120, 183, 229, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 165, 110, 62, 121, 172, 159, 63, 128, 248, 35, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 200, 94, 191, 218, 56, 148, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}