// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 211, 6, 191, 206, 234, 172, 191, 30, 113, 130, 190, 86, 21, 58, 63, 8, 185, 58, 191, 202, 62, 162, 190, 160, 46, 195, 190, 187, 59, 73, 191, 192, 150, 4, 191, 6, 218, 42, 63, 239, 127, 193, 190, 161, 63, 114, 190, 156, 214, 11, 191, 178, 141, 17, 63, 173, 131, 241, 62, 91, 98, 1, 188, 206, 188, 169, 188, 188, 181, 138, 190, 106, 83, 175, 190, 0, 253, 121, 62, 81, 171, 91, 60, 6, 187, 136, 62, 174, 22, 138, 190, 51, 36, 193, 62, 35, 145, 5, 191, 20, 239, 221, 63, 53, 224, 163, 62, 193, 72, 55, 63, 115, 47, 6, 63, 23, 221, 204, 62, 53, 242, 19, 62, 155, 104, 1, 63, 2, 17, 182, 190, 86, 248, 40, 62, 159, 79, 13, 191, 165, 121, 73, 63, 137, 96, 14, 63, 236, 243, 31, 63, 136, 160, 214, 62, 125, 17, 241, 188, 111, 105, 113, 190, 107, 89, 163, 190, 83, 73, 178, 190, 177, 20, 158, 191, 68, 29, 180, 190, 253, 33, 236, 62, 91, 165, 121, 63, 96, 100, 42, 62, 181, 236, 44, 190, 124, 190, 71, 191, 8, 208, 151, 61, 195, 183, 58, 63, 137, 107, 146, 190, 186, 129, 34, 190, 246, 146, 84, 189, 10, 77, 98, 190, 127, 156, 216, 62, 165, 179, 86, 191, 90, 192, 16, 63, 114, 248, 7, 63, 50, 36, 152, 190, 224, 5, 147, 191, 253, 129, 172, 190, 81, 24, 32, 63, 63, 200, 1, 62, 212, 64, 205, 189, 74, 119, 65, 63, 183, 71, 123, 191, 41, 107, 70, 190, 211, 179, 60, 63, 77, 132, 151, 63, 210, 212, 90, 62, 183, 144, 108, 63, 30, 253, 55, 191, 206, 37, 134, 190, 40, 179, 244, 62, 6, 229, 104, 63, 20, 0, 148, 62, 12, 58, 60, 63, 236, 119, 140, 62, 29, 19, 214, 62, 138, 155, 120, 190, 169, 87, 15, 191, 175, 54, 193, 190, 45, 17, 23, 191, 157, 129, 151, 63, 30, 28, 239, 61, 116, 247, 242, 62, 135, 231, 2, 191, 8, 119, 83, 190, 3, 100, 155, 62, 142, 99, 183, 191, 130, 212, 128, 190, 199, 7, 193, 190, 178, 201, 209, 190, 21, 170, 247, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 2, 128, 190, 182, 228, 153, 190, 130, 236, 173, 190, 10, 132, 194, 190, 214, 0, 229, 190, 89, 51, 203, 190, 85, 238, 213, 62, 17, 26, 181, 61, 109, 194, 163, 190, 171, 162, 61, 191, 37, 57, 27, 62, 240, 180, 199, 62, 4, 3, 157, 190, 236, 73, 171, 190, 130, 95, 13, 190, 211, 212, 172, 189, 222, 190, 148, 62, 146, 111, 62, 190, 56, 170, 58, 62, 56, 242, 45, 190, 97, 207, 211, 189, 174, 116, 13, 190, 8, 201, 12, 63, 136, 5, 5, 190, 227, 129, 77, 191, 79, 230, 77, 190, 37, 213, 63, 191, 199, 219, 13, 191, 81, 114, 15, 63, 151, 81, 169, 190, 193, 237, 7, 62, 207, 47, 1, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 185, 132, 62, 178, 173, 18, 62, 230, 223, 233, 190, 190, 224, 71, 190, 27, 219, 93, 190, 210, 199, 200, 190, 126, 142, 137, 61, 139, 52, 80, 190, 213, 171, 153, 62, 199, 207, 50, 62, 114, 179, 133, 60, 42, 244, 236, 189, 91, 243, 193, 61, 42, 39, 148, 190, 143, 233, 18, 190, 5, 207, 77, 62, 229, 250, 24, 191, 158, 14, 24, 62, 10, 177, 30, 191, 207, 104, 18, 61, 204, 187, 85, 190, 116, 95, 48, 61, 250, 82, 221, 61, 2, 31, 112, 61, 191, 48, 100, 191, 221, 190, 27, 62, 11, 68, 105, 62, 4, 121, 32, 190, 254, 120, 145, 62, 98, 186, 210, 190, 162, 108, 148, 190, 146, 217, 144, 188, 219, 146, 163, 62, 225, 202, 141, 190, 50, 78, 130, 62, 2, 255, 143, 190, 169, 228, 80, 190, 129, 11, 35, 62, 53, 51, 135, 189, 65, 55, 185, 61, 26, 140, 140, 190, 37, 174, 238, 62, 118, 58, 66, 62, 104, 194, 95, 190, 211, 225, 117, 62, 94, 134, 5, 63, 107, 65, 246, 62, 221, 187, 119, 188, 214, 22, 1, 63, 215, 203, 153, 190, 235, 239, 154, 189, 231, 142, 133, 190, 218, 76, 8, 63, 236, 79, 104, 61, 104, 171, 55, 190, 118, 144, 143, 188, 91, 115, 158, 62, 250, 195, 188, 60, 24, 193, 247, 62, 95, 35, 79, 62, 5, 17, 128, 188, 41, 177, 56, 62, 77, 80, 172, 61, 81, 102, 138, 188, 43, 29, 68, 62, 64, 70, 149, 188, 205, 50, 195, 190, 127, 138, 178, 61, 89, 162, 36, 191, 148, 123, 147, 59, 60, 86, 130, 62, 89, 99, 40, 62, 15, 120, 28, 190, 244, 100, 224, 62, 26, 141, 77, 62, 123, 236, 77, 188, 103, 90, 131, 62, 45, 116, 147, 62, 55, 148, 242, 190, 67, 59, 132, 62, 100, 170, 144, 189, 6, 108, 115, 62, 42, 19, 222, 189, 145, 185, 196, 190, 49, 0, 212, 190, 134, 46, 27, 62, 13, 178, 94, 189, 150, 173, 97, 188, 193, 56, 85, 191, 248, 115, 130, 62, 192, 220, 136, 61, 231, 239, 137, 189, 25, 193, 43, 62, 39, 96, 71, 191, 53, 143, 222, 190, 100, 51, 21, 190, 83, 118, 83, 191, 67, 18, 199, 62, 163, 229, 137, 188, 46, 116, 206, 188, 213, 121, 126, 62, 82, 217, 19, 62, 94, 17, 219, 189, 163, 221, 139, 61, 100, 242, 148, 62, 111, 247, 162, 61, 118, 227, 137, 189, 132, 207, 133, 62, 199, 180, 217, 61, 135, 233, 100, 61, 113, 58, 114, 188, 100, 133, 57, 62, 211, 184, 83, 61, 43, 115, 48, 62, 127, 166, 191, 62, 226, 229, 48, 60, 142, 148, 40, 62, 232, 35, 212, 190, 184, 190, 11, 189, 11, 41, 48, 189, 63, 31, 94, 61, 112, 170, 2, 62, 140, 128, 121, 62, 214, 75, 161, 190, 33, 130, 16, 61, 205, 55, 242, 62, 84, 249, 138, 62, 83, 8, 168, 189, 143, 145, 27, 62, 133, 13, 1, 190, 239, 71, 83, 190, 230, 237, 18, 189, 28, 74, 119, 190, 69, 83, 129, 61, 182, 202, 90, 62, 38, 149, 222, 60, 246, 91, 251, 189, 8, 239, 162, 62, 169, 35, 36, 62, 170, 184, 143, 188, 201, 69, 121, 61, 181, 168, 135, 62, 10, 63, 140, 189, 21, 187, 205, 62, 110, 155, 139, 190, 18, 172, 56, 60, 253, 187, 5, 190, 169, 246, 183, 190, 147, 205, 31, 190, 13, 8, 170, 189, 130, 30, 6, 62, 146, 194, 52, 62, 68, 233, 58, 191, 49, 45, 62, 62, 21, 82, 128, 62, 193, 190, 250, 188, 139, 174, 124, 62, 53, 100, 27, 191, 15, 105, 89, 190, 192, 182, 61, 62, 111, 108, 216, 61, 222, 88, 8, 61, 80, 145, 241, 61, 30, 95, 238, 189, 4, 216, 183, 190, 56, 182, 24, 189, 64, 25, 110, 61, 142, 40, 12, 190, 195, 63, 163, 191, 99, 89, 207, 190, 142, 14, 198, 61, 83, 166, 196, 190, 229, 142, 72, 190, 149, 10, 186, 62, 150, 22, 171, 60, 91, 137, 162, 59, 2, 155, 156, 190, 156, 86, 203, 188, 180, 76, 135, 191, 179, 51, 224, 190, 79, 44, 204, 61, 106, 253, 159, 62, 36, 233, 83, 62, 243, 156, 51, 60, 71, 209, 236, 190, 238, 25, 198, 189, 101, 233, 242, 61, 183, 4, 80, 189, 197, 164, 180, 61, 221, 217, 215, 190, 79, 28, 171, 189, 158, 253, 156, 190, 134, 134, 102, 62, 104, 248, 221, 62, 105, 16, 66, 62, 157, 139, 202, 62, 156, 108, 230, 59, 252, 68, 89, 62, 148, 33, 136, 61, 159, 231, 230, 61, 150, 17, 1, 190, 156, 37, 33, 61, 252, 193, 128, 61, 39, 9, 124, 62, 165, 147, 37, 62, 15, 89, 0, 62, 200, 106, 131, 61, 54, 246, 13, 62, 158, 120, 94, 62, 172, 52, 80, 62, 191, 243, 29, 189, 163, 135, 255, 189, 223, 27, 27, 62, 207, 235, 100, 62, 78, 67, 150, 62, 70, 39, 100, 62, 197, 246, 49, 62, 41, 255, 95, 62, 240, 61, 10, 60, 72, 238, 95, 62, 23, 22, 209, 59, 1, 162, 123, 187, 233, 118, 213, 188, 46, 49, 130, 62, 227, 20, 85, 60, 22, 113, 193, 190, 173, 159, 200, 189, 164, 202, 165, 189, 125, 57, 133, 61, 16, 187, 248, 61, 214, 100, 16, 62, 11, 97, 224, 190, 84, 199, 178, 62, 128, 16, 149, 189, 228, 230, 50, 62, 120, 206, 245, 190, 187, 252, 43, 191, 209, 69, 79, 189, 115, 84, 176, 190, 234, 254, 74, 190, 59, 10, 46, 191, 146, 191, 59, 61, 66, 67, 223, 190, 7, 154, 62, 62, 232, 126, 118, 190, 127, 32, 9, 62, 97, 33, 232, 189, 149, 228, 56, 190, 143, 129, 29, 191, 182, 121, 4, 191, 0, 93, 11, 191, 222, 150, 154, 190, 134, 186, 156, 62, 43, 242, 56, 191, 50, 197, 81, 191, 2, 205, 36, 62, 100, 158, 125, 60, 193, 85, 218, 60, 212, 75, 39, 189, 11, 187, 108, 61, 170, 206, 49, 191, 86, 150, 193, 61, 210, 150, 49, 62, 32, 253, 131, 62, 159, 160, 179, 190, 11, 66, 37, 63, 32, 147, 249, 189, 66, 224, 124, 189, 11, 127, 144, 62, 43, 206, 126, 61, 211, 120, 10, 191, 248, 41, 132, 62, 3, 158, 3, 190, 214, 165, 85, 188, 225, 168, 253, 187, 138, 66, 29, 191, 180, 186, 247, 189, 139, 48, 146, 62, 117, 13, 18, 189, 19, 163, 170, 62, 76, 201, 59, 191, 139, 191, 43, 62, 83, 239, 226, 61, 152, 25, 135, 189, 100, 60, 87, 62, 163, 47, 29, 191, 79, 192, 29, 191, 24, 138, 128, 190, 249, 218, 216, 62, 11, 225, 62, 189, 108, 64, 33, 62, 254, 79, 178, 190, 122, 122, 132, 191, 33, 168, 137, 62, 254, 76, 172, 189, 8, 224, 22, 63, 70, 26, 248, 190, 208, 126, 13, 191, 209, 200, 201, 188, 54, 124, 173, 61, 24, 200, 252, 190, 13, 1, 133, 61, 37, 91, 116, 62, 7, 31, 55, 189, 39, 5, 144, 61, 225, 71, 1, 191, 160, 133, 76, 190, 179, 32, 167, 191, 191, 205, 67, 62, 31, 113, 109, 191, 128, 235, 20, 190, 220, 130, 94, 190, 219, 247, 185, 190, 188, 221, 186, 190, 145, 162, 198, 190, 212, 245, 151, 62, 204, 115, 186, 58, 205, 229, 85, 190, 159, 240, 240, 60, 200, 62, 153, 62, 138, 230, 243, 62, 230, 14, 41, 190, 37, 254, 103, 190, 209, 237, 72, 190, 168, 215, 134, 191, 97, 90, 23, 60, 97, 104, 60, 189, 169, 86, 169, 190, 6, 15, 56, 191, 80, 239, 88, 190, 40, 5, 40, 62, 14, 205, 49, 191, 237, 34, 176, 190, 98, 71, 1, 62, 19, 182, 161, 61, 158, 110, 83, 61, 46, 145, 239, 190, 80, 116, 64, 190, 193, 254, 96, 191, 130, 146, 135, 191, 248, 241, 130, 188, 58, 87, 2, 189, 140, 173, 22, 190, 172, 225, 38, 62, 114, 53, 104, 191, 164, 34, 169, 190, 6, 65, 89, 61, 77, 87, 160, 60, 16, 194, 42, 62, 132, 27, 102, 191, 221, 15, 59, 190, 159, 5, 128, 61, 114, 125, 11, 191, 190, 207, 143, 61, 218, 42, 136, 62, 178, 246, 154, 62, 28, 192, 220, 189, 22, 106, 129, 62, 28, 171, 197, 189, 0, 245, 35, 190, 36, 115, 36, 62, 105, 102, 17, 191, 84, 226, 242, 189, 65, 81, 244, 61, 111, 176, 154, 189, 7, 182, 52, 62, 72, 144, 151, 190, 179, 222, 244, 190, 110, 169, 23, 190, 184, 40, 69, 62, 114, 203, 36, 62, 216, 101, 33, 62, 78, 181, 209, 190, 1, 237, 13, 62, 81, 40, 6, 62, 95, 231, 222, 190, 51, 137, 167, 62, 26, 216, 48, 190, 176, 47, 172, 190, 37, 237, 76, 62, 59, 96, 84, 189, 230, 230, 43, 62, 101, 103, 144, 62, 99, 209, 153, 61, 10, 175, 11, 191, 200, 203, 195, 61, 153, 110, 131, 61, 180, 16, 182, 189, 65, 84, 32, 190, 151, 251, 54, 190, 234, 132, 242, 61, 227, 147, 147, 190, 255, 111, 253, 189, 240, 244, 4, 191, 202, 61, 236, 61, 221, 128, 168, 62, 133, 78, 105, 190, 135, 105, 200, 190, 193, 44, 204, 190, 160, 103, 149, 190, 108, 2, 69, 62, 241, 7, 105, 62, 53, 138, 233, 62, 126, 129, 114, 61, 67, 212, 226, 190, 215, 184, 141, 61, 84, 173, 58, 62, 25, 120, 238, 190, 97, 97, 32, 189, 53, 75, 103, 190, 114, 241, 128, 189, 162, 149, 217, 190, 201, 125, 131, 190, 166, 175, 233, 189, 122, 111, 177, 189, 49, 8, 173, 61, 237, 96, 199, 189, 28, 210, 66, 187, 164, 97, 152, 191, 71, 199, 254, 189, 5, 60, 123, 62, 140, 116, 83, 190, 207, 101, 245, 62, 36, 230, 188, 190, 99, 161, 22, 63, 36, 117, 91, 191, 229, 6, 170, 189, 16, 44, 199, 190, 180, 38, 32, 191, 215, 103, 33, 191, 255, 246, 13, 190, 252, 169, 12, 191, 103, 102, 13, 191, 96, 181, 73, 190, 214, 10, 151, 190, 197, 111, 39, 62, 111, 255, 15, 61, 223, 234, 146, 190, 40, 6, 128, 191, 115, 205, 7, 191, 198, 218, 229, 187, 140, 29, 40, 191, 240, 6, 12, 191, 111, 140, 19, 191, 2, 14, 251, 62, 225, 66, 122, 60, 207, 211, 171, 191, 79, 197, 99, 62, 226, 5, 66, 189, 125, 193, 7, 62, 195, 31, 151, 61, 105, 117, 171, 189, 221, 205, 64, 188, 123, 158, 211, 60, 235, 83, 194, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 200, 111, 33, 190, 147, 130, 21, 190, 199, 92, 141, 61, 123, 174, 140, 60, 251, 195, 49, 190, 180, 182, 29, 190, 163, 15, 0, 62, 98, 98, 162, 187, 148, 127, 13, 189, 196, 15, 219, 61, 177, 134, 28, 190, 202, 147, 100, 189, 9, 147, 44, 190, 200, 240, 224, 189, 126, 158, 223, 189, 227, 34, 87, 189, 27, 253, 196, 189, 79, 66, 146, 61, 184, 97, 70, 60, 185, 178, 179, 189, 101, 76, 96, 189, 48, 122, 97, 190, 162, 207, 18, 190, 188, 126, 231, 62, 143, 255, 128, 188, 49, 137, 7, 63, 102, 29, 32, 190, 85, 22, 62, 62, 77, 41, 74, 190, 245, 94, 59, 62, 91, 152, 10, 63, 98, 45, 71, 190, 182, 84, 188, 61, 114, 183, 175, 61, 66, 70, 114, 59, 45, 15, 134, 188, 59, 186, 197, 189, 114, 203, 137, 191, 65, 159, 11, 63, 170, 199, 96, 62, 141, 248, 105, 62, 103, 98, 170, 189, 65, 122, 158, 59, 82, 249, 97, 188, 161, 20, 104, 62, 210, 198, 72, 191, 144, 229, 141, 62, 127, 162, 68, 191, 85, 162, 199, 190, 80, 222, 150, 189, 182, 25, 15, 191, 154, 135, 131, 62, 34, 179, 225, 62, 56, 130, 162, 62, 175, 96, 130, 190, 141, 142, 68, 190, 153, 221, 138, 191, 104, 34, 215, 61, 142, 16, 238, 61, 178, 66, 164, 61, 114, 130, 210, 61, 13, 186, 238, 60, 108, 69, 15, 189, 131, 88, 200, 189, 241, 34, 131, 62, 85, 218, 239, 61, 201, 218, 135, 61, 135, 169, 69, 60, 197, 214, 236, 189, 17, 93, 209, 190, 200, 60, 204, 61, 219, 228, 228, 189, 28, 103, 35, 62, 103, 81, 54, 62, 254, 155, 57, 189, 169, 204, 155, 190, 91, 7, 219, 190, 180, 15, 41, 190, 107, 56, 230, 61, 32, 146, 164, 190, 238, 178, 22, 62, 131, 233, 22, 190, 210, 17, 5, 189, 88, 187, 114, 61, 178, 99, 129, 191, 55, 130, 9, 61, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 30, 193, 255, 190, 104, 136, 125, 62, 130, 128, 115, 62, 142, 218, 146, 189, 118, 63, 173, 61, 220, 80, 56, 62, 139, 182, 230, 189, 45, 25, 149, 61, 252, 16, 210, 60, 54, 203, 40, 62, 2, 37, 30, 190, 14, 74, 176, 62, 109, 255, 235, 189, 63, 114, 155, 189, 176, 86, 135, 62, 248, 208, 5, 190, 202, 236, 102, 188, 179, 42, 74, 189, 238, 29, 213, 62, 132, 160, 158, 61, 206, 173, 136, 62, 230, 13, 145, 190, 209, 40, 148, 61, 39, 24, 27, 62, 199, 94, 23, 190, 192, 121, 76, 61, 203, 101, 67, 62, 52, 220, 116, 190, 141, 75, 93, 190, 95, 182, 178, 62, 191, 243, 153, 62, 237, 231, 241, 60, 112, 10, 73, 191, 202, 211, 130, 62, 200, 29, 54, 62, 101, 139, 194, 62, 119, 12, 145, 62, 120, 100, 72, 62, 26, 144, 154, 61, 218, 193, 230, 189, 61, 115, 30, 63, 201, 107, 220, 190, 184, 157, 225, 190, 252, 95, 122, 61, 24, 245, 118, 190, 130, 149, 147, 190, 234, 8, 61, 191, 178, 149, 2, 191, 255, 0, 59, 189, 55, 19, 133, 61, 33, 248, 17, 62, 122, 105, 221, 61, 87, 143, 83, 191, 20, 66, 72, 190, 64, 2, 69, 62, 214, 13, 144, 190, 18, 169, 144, 62, 198, 153, 117, 190, 60, 233, 183, 190, 175, 150, 104, 190, 92, 220, 156, 61, 106, 203, 159, 62, 168, 187, 159, 62, 162, 77, 200, 58, 181, 211, 130, 62, 184, 49, 135, 62, 84, 208, 156, 61, 181, 252, 150, 61, 31, 18, 57, 191, 48, 235, 179, 61, 138, 213, 39, 191, 183, 78, 187, 62, 149, 119, 33, 61, 111, 218, 113, 191, 52, 41, 115, 61, 28, 105, 171, 62, 218, 248, 175, 191, 64, 26, 237, 189, 185, 245, 115, 61, 12, 207, 157, 191, 87, 177, 160, 62, 201, 146, 210, 61, 0, 11, 138, 187, 171, 248, 149, 191, 172, 140, 34, 62, 85, 135, 21, 191, 249, 153, 225, 62, 252, 191, 207, 191, 196, 166, 224, 61, 2, 171, 165, 191, 87, 43, 165, 191, 255, 43, 211, 189, 226, 66, 178, 191, 7, 14, 76, 62, 47, 242, 16, 63, 36, 172, 59, 188, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 192, 113, 163, 191, 194, 131, 223, 61, 7, 157, 170, 190, 97, 214, 153, 59, 75, 64, 118, 62, 81, 125, 64, 190, 156, 2, 124, 62, 241, 98, 188, 190, 34, 51, 253, 62, 55, 53, 170, 190, 67, 146, 232, 190, 7, 191, 124, 62, 5, 72, 196, 190, 56, 161, 146, 191, 218, 212, 70, 192, 219, 13, 160, 190, 150, 146, 73, 61, 21, 111, 23, 62, 79, 15, 184, 62, 183, 107, 159, 61, 241, 199, 41, 192, 18, 43, 129, 62, 105, 131, 74, 62, 38, 109, 119, 190, 68, 1, 208, 62, 87, 177, 107, 190, 153, 46, 8, 191, 204, 171, 210, 190, 244, 102, 163, 61, 221, 228, 123, 189, 44, 18, 152, 62, 249, 51, 158, 62, 174, 110, 20, 190, 2, 141, 168, 191, 69, 159, 85, 62, 72, 97, 32, 191, 155, 24, 181, 190, 215, 96, 109, 187, 207, 155, 218, 189, 185, 89, 203, 190, 247, 171, 145, 189, 186, 20, 133, 62, 53, 79, 117, 61, 28, 235, 135, 189, 127, 195, 148, 62, 213, 51, 179, 190, 111, 186, 95, 191, 154, 63, 135, 62, 99, 217, 32, 190, 60, 12, 11, 62, 219, 202, 168, 190, 191, 230, 144, 190, 135, 19, 92, 191, 33, 219, 82, 190, 93, 174, 169, 62, 26, 170, 135, 62, 62, 193, 141, 190, 40, 110, 184, 62, 193, 73, 20, 190, 120, 9, 151, 190, 78, 145, 19, 62, 219, 181, 105, 189, 119, 244, 93, 190, 206, 157, 4, 191, 28, 255, 139, 60, 251, 193, 3, 192, 133, 136, 185, 62, 146, 201, 158, 191, 103, 204, 3, 62, 38, 41, 166, 61, 54, 228, 198, 61, 243, 171, 205, 190, 70, 0, 86, 62, 226, 102, 231, 60, 234, 65, 253, 189, 175, 113, 25, 61, 234, 51, 152, 61, 37, 251, 217, 190, 52, 85, 250, 191, 254, 254, 207, 62, 76, 225, 130, 190, 224, 87, 188, 62, 61, 100, 41, 61, 230, 86, 49, 189, 63, 126, 248, 191, 96, 128, 155, 62, 228, 224, 206, 188, 48, 237, 218, 62, 128, 193, 208, 61, 132, 236, 215, 62, 107, 44, 158, 61, 119, 224, 235, 190, 43, 94, 194, 62, 249, 65, 150, 188, 139, 94, 42, 191, 166, 25, 28, 62, 232, 235, 222, 62, 91, 0, 167, 190, 48, 200, 234, 190, 107, 87, 31, 190, 81, 194, 49, 191, 120, 183, 160, 188, 187, 242, 89, 61, 7, 246, 130, 62, 48, 128, 79, 190, 17, 121, 186, 62, 242, 168, 155, 62, 239, 133, 19, 189, 18, 87, 30, 62, 108, 196, 115, 62, 194, 165, 126, 60, 158, 15, 47, 62, 164, 227, 207, 190, 147, 16, 30, 61, 195, 191, 133, 190, 255, 177, 199, 190, 74, 159, 111, 61, 176, 130, 14, 62, 160, 60, 194, 61, 39, 47, 146, 62, 49, 130, 74, 191, 87, 95, 170, 61, 186, 136, 132, 62, 229, 32, 34, 61, 241, 220, 117, 62, 35, 130, 226, 190, 164, 81, 242, 190, 182, 44, 72, 62, 189, 31, 232, 189, 99, 10, 168, 62, 178, 47, 127, 61, 183, 195, 213, 61, 110, 193, 91, 62, 26, 40, 171, 188, 124, 153, 80, 62, 212, 160, 194, 190, 104, 195, 175, 62, 173, 27, 190, 190, 40, 62, 22, 190, 94, 38, 173, 62, 201, 133, 78, 189, 17, 77, 105, 190, 83, 206, 94, 190, 191, 193, 229, 190, 47, 29, 45, 62, 153, 101, 166, 62, 94, 131, 140, 62, 130, 46, 96, 62, 70, 221, 129, 190, 2, 230, 173, 189, 122, 186, 170, 62, 145, 37, 175, 190, 113, 104, 61, 62, 182, 192, 140, 189, 132, 115, 50, 190, 168, 220, 152, 190, 9, 225, 176, 190, 185, 160, 121, 62, 172, 213, 117, 62, 163, 140, 141, 62, 171, 91, 21, 191, 181, 222, 172, 62, 231, 78, 49, 62, 102, 83, 143, 188, 23, 84, 171, 61, 72, 106, 11, 62, 1, 94, 180, 61, 197, 9, 105, 190, 9, 191, 205, 62, 27, 164, 92, 190, 86, 48, 229, 61, 100, 194, 129, 62, 201, 141, 159, 189, 11, 89, 70, 190, 244, 73, 229, 61, 113, 237, 40, 191, 244, 110, 247, 61, 241, 184, 34, 62, 14, 23, 102, 62, 7, 117, 100, 62, 111, 145, 136, 190, 112, 143, 28, 60, 162, 244, 203, 61, 227, 225, 205, 190, 29, 86, 38, 62, 152, 123, 26, 190, 166, 153, 63, 190, 158, 8, 86, 61, 185, 57, 38, 61, 134, 3, 7, 63, 58, 232, 10, 62, 214, 153, 69, 62, 180, 163, 73, 63, 88, 48, 189, 190, 91, 104, 191, 190, 229, 220, 24, 190, 51, 67, 97, 190, 241, 149, 45, 60, 237, 144, 148, 61, 30, 87, 192, 62, 248, 56, 53, 191, 152, 79, 211, 62, 77, 43, 105, 62, 207, 29, 185, 189, 67, 249, 157, 62, 25, 187, 219, 62, 27, 2, 160, 190, 34, 15, 151, 62, 106, 252, 234, 186, 226, 240, 252, 61, 213, 217, 152, 190, 252, 243, 129, 190, 87, 224, 160, 189, 254, 99, 99, 62, 143, 181, 0, 190, 156, 80, 215, 62, 225, 183, 40, 191, 105, 9, 84, 62, 103, 172, 214, 62, 7, 116, 151, 62, 166, 174, 20, 62, 49, 224, 45, 191, 6, 48, 43, 191, 114, 192, 182, 61, 107, 214, 59, 62, 12, 146, 181, 189, 219, 169, 92, 190, 204, 52, 84, 190, 173, 128, 5, 188, 130, 158, 75, 189, 67, 17, 85, 190, 11, 72, 226, 190, 27, 110, 140, 61, 79, 167, 167, 62, 40, 154, 14, 61, 249, 145, 11, 191, 56, 163, 81, 62, 253, 91, 221, 189, 187, 59, 99, 189, 75, 118, 174, 62, 108, 191, 49, 191, 79, 128, 139, 61, 99, 195, 137, 190, 93, 240, 5, 190, 159, 48, 11, 190, 79, 169, 120, 62, 50, 61, 59, 61, 62, 77, 140, 62, 57, 228, 163, 189, 145, 195, 144, 62, 140, 38, 123, 190, 200, 166, 81, 190, 150, 1, 117, 62, 57, 244, 218, 189, 12, 109, 147, 190, 2, 148, 110, 191, 11, 14, 31, 61, 235, 236, 220, 189, 133, 241, 47, 190, 70, 132, 118, 62, 154, 231, 221, 188, 141, 234, 183, 61, 130, 170, 123, 189, 85, 156, 42, 62, 205, 70, 22, 191, 75, 166, 229, 62, 162, 211, 139, 61, 66, 200, 16, 61, 96, 209, 144, 62, 174, 115, 78, 62, 10, 238, 53, 191, 10, 252, 21, 62, 205, 138, 3, 190, 142, 137, 140, 62, 229, 83, 107, 190, 106, 138, 42, 190, 92, 218, 21, 191, 103, 108, 99, 61, 165, 41, 239, 61, 206, 37, 45, 62, 184, 164, 61, 191, 169, 176, 173, 62, 199, 18, 1, 63, 20, 63, 69, 189, 40, 3, 20, 60, 194, 20, 18, 191, 135, 150, 222, 190, 76, 33, 31, 190, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 12, 12, 62, 103, 5, 61, 61, 127, 110, 156, 61, 137, 103, 231, 189, 100, 172, 10, 188, 86, 19, 51, 62, 63, 160, 167, 62, 62, 193, 246, 187, 146, 61, 221, 61, 207, 117, 7, 190, 144, 142, 81, 62, 21, 95, 224, 188, 119, 171, 175, 62, 148, 238, 63, 62, 115, 44, 5, 61, 73, 207, 138, 62, 171, 108, 168, 190, 177, 142, 77, 190, 54, 106, 139, 61, 113, 175, 219, 61, 37, 38, 58, 190, 220, 85, 115, 61, 76, 207, 176, 62, 162, 103, 15, 62, 226, 153, 185, 61, 71, 57, 124, 61, 162, 121, 134, 62, 185, 171, 114, 59, 55, 69, 31, 189, 18, 7, 112, 190, 61, 248, 0, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 173, 91, 189, 233, 249, 5, 63, 162, 237, 172, 190, 143, 37, 150, 190, 188, 143, 54, 190, 224, 116, 207, 189, 113, 114, 157, 188, 120, 103, 136, 191, 240, 28, 200, 190, 142, 244, 136, 191, 238, 25, 148, 191, 84, 203, 113, 62, 141, 120, 134, 61, 48, 42, 185, 191, 48, 237, 71, 61, 49, 9, 59, 63, 159, 153, 76, 190, 36, 27, 66, 61, 169, 157, 177, 190, 64, 113, 4, 63, 238, 151, 87, 191, 132, 86, 180, 61, 82, 240, 131, 63, 149, 15, 108, 63, 61, 6, 36, 63, 245, 188, 169, 190, 39, 19, 210, 62, 86, 245, 126, 62, 53, 168, 250, 190, 6, 13, 255, 62, 204, 247, 181, 190, 40, 37, 91, 61, 137, 195, 232, 190, 222, 28, 33, 62, 142, 201, 146, 190, 168, 73, 173, 189, 191, 62, 171, 190, 181, 85, 199, 190, 204, 2, 238, 190, 26, 102, 7, 189, 72, 106, 13, 60, 68, 76, 46, 62, 183, 204, 161, 62, 175, 227, 21, 190, 119, 153, 175, 190, 18, 238, 51, 190, 78, 248, 226, 61, 180, 138, 160, 62, 124, 135, 100, 62, 149, 243, 150, 188, 65, 134, 57, 62, 213, 6, 243, 62, 84, 87, 89, 190, 156, 198, 42, 61, 117, 52, 113, 62, 91, 70, 89, 62, 103, 19, 92, 190, 226, 131, 17, 190, 218, 101, 187, 190, 178, 129, 100, 60, 138, 76, 121, 62, 49, 11, 186, 62, 238, 229, 1, 191, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 37, 20, 189, 90, 221, 8, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {67, 161, 190, 190, 249, 6, 10, 64, 145, 164, 49, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {233, 109, 122, 64, 232, 150, 55, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}