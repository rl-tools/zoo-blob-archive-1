// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 210, 13, 191, 89, 164, 165, 191, 56, 174, 121, 190, 217, 96, 69, 63, 103, 236, 41, 191, 244, 166, 118, 190, 228, 30, 136, 190, 240, 71, 71, 191, 176, 124, 7, 191, 47, 2, 56, 63, 162, 38, 137, 190, 69, 234, 76, 190, 241, 255, 11, 191, 46, 207, 10, 63, 14, 57, 235, 62, 229, 189, 35, 62, 70, 72, 132, 61, 17, 24, 181, 190, 114, 202, 100, 190, 63, 172, 104, 62, 217, 75, 114, 61, 84, 65, 94, 62, 100, 146, 166, 190, 215, 125, 198, 62, 217, 68, 251, 190, 152, 161, 214, 63, 54, 98, 153, 62, 40, 141, 34, 63, 187, 49, 24, 63, 98, 76, 188, 62, 207, 63, 82, 62, 53, 105, 230, 62, 86, 61, 158, 190, 240, 158, 56, 62, 157, 70, 9, 191, 197, 12, 67, 63, 174, 42, 7, 63, 238, 159, 250, 62, 120, 109, 222, 62, 11, 95, 110, 59, 13, 207, 92, 190, 59, 253, 177, 190, 75, 133, 211, 190, 134, 39, 149, 191, 196, 49, 187, 190, 8, 60, 234, 62, 113, 139, 103, 63, 40, 254, 53, 62, 2, 154, 255, 189, 147, 209, 24, 191, 105, 209, 174, 61, 34, 4, 73, 63, 13, 223, 129, 190, 137, 116, 15, 190, 11, 116, 159, 189, 70, 113, 55, 190, 85, 190, 217, 62, 137, 63, 37, 191, 113, 122, 20, 63, 124, 113, 9, 63, 242, 166, 161, 190, 175, 223, 138, 191, 172, 13, 204, 190, 187, 182, 46, 63, 188, 126, 148, 62, 38, 42, 16, 190, 207, 123, 77, 63, 111, 79, 108, 191, 103, 209, 16, 190, 45, 116, 60, 63, 236, 171, 142, 63, 6, 123, 97, 62, 83, 91, 103, 63, 220, 39, 13, 191, 61, 16, 162, 190, 173, 203, 243, 62, 215, 86, 98, 63, 204, 210, 130, 62, 92, 176, 19, 63, 58, 69, 159, 62, 203, 200, 196, 62, 69, 252, 46, 190, 183, 176, 26, 191, 105, 235, 185, 190, 148, 23, 11, 191, 247, 232, 142, 63, 127, 185, 9, 62, 62, 17, 252, 62, 102, 90, 242, 190, 179, 200, 60, 190, 67, 148, 161, 62, 75, 159, 170, 191, 175, 235, 138, 190, 251, 91, 185, 190, 211, 189, 176, 190, 91, 157, 168, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 143, 122, 190, 156, 36, 126, 190, 3, 221, 165, 190, 73, 245, 161, 190, 97, 188, 245, 190, 62, 88, 136, 190, 32, 223, 6, 63, 34, 241, 109, 61, 237, 31, 183, 190, 80, 73, 70, 191, 18, 57, 73, 62, 170, 179, 210, 62, 154, 208, 166, 190, 135, 176, 151, 190, 224, 107, 60, 190, 155, 74, 172, 189, 80, 14, 146, 62, 39, 75, 227, 189, 126, 230, 33, 62, 95, 241, 136, 190, 182, 163, 84, 189, 15, 37, 178, 189, 181, 244, 27, 63, 115, 251, 246, 189, 154, 52, 82, 191, 16, 99, 63, 190, 68, 182, 83, 191, 226, 243, 254, 190, 34, 199, 26, 63, 95, 59, 154, 190, 174, 242, 242, 61, 253, 56, 5, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 148, 138, 62, 1, 84, 59, 62, 242, 106, 111, 190, 182, 12, 47, 190, 198, 86, 132, 190, 67, 223, 141, 190, 177, 26, 251, 60, 158, 11, 16, 190, 88, 136, 89, 62, 112, 249, 238, 61, 118, 97, 8, 61, 50, 5, 190, 189, 110, 146, 131, 61, 27, 55, 11, 190, 187, 234, 9, 190, 175, 112, 23, 62, 215, 201, 218, 190, 195, 59, 42, 62, 217, 169, 31, 191, 15, 30, 18, 189, 236, 7, 60, 190, 112, 222, 35, 61, 20, 88, 6, 62, 109, 169, 131, 60, 237, 136, 58, 191, 159, 236, 181, 61, 170, 146, 16, 62, 158, 241, 22, 190, 150, 153, 39, 62, 210, 21, 183, 190, 46, 221, 77, 190, 199, 71, 195, 188, 84, 22, 94, 62, 214, 100, 131, 190, 0, 163, 126, 62, 42, 36, 128, 190, 87, 83, 43, 190, 100, 44, 88, 62, 245, 141, 0, 190, 141, 122, 182, 61, 47, 135, 75, 190, 230, 57, 249, 62, 148, 233, 99, 62, 91, 58, 102, 190, 242, 98, 130, 62, 207, 49, 12, 63, 132, 167, 198, 62, 10, 222, 180, 61, 107, 186, 164, 62, 77, 10, 139, 190, 62, 87, 131, 189, 112, 229, 134, 190, 85, 97, 224, 62, 126, 5, 211, 61, 92, 35, 86, 190, 130, 136, 194, 61, 110, 103, 155, 62, 97, 184, 117, 61, 113, 154, 253, 62, 95, 117, 87, 62, 154, 169, 136, 188, 120, 75, 35, 62, 131, 34, 238, 59, 184, 87, 73, 190, 234, 241, 121, 62, 174, 145, 196, 187, 26, 214, 154, 190, 197, 117, 194, 61, 248, 255, 13, 191, 190, 161, 31, 61, 253, 86, 137, 62, 122, 93, 35, 62, 40, 88, 180, 189, 24, 246, 170, 62, 82, 253, 121, 62, 126, 32, 42, 189, 56, 80, 124, 62, 102, 12, 173, 62, 180, 111, 147, 190, 173, 2, 137, 62, 89, 18, 163, 189, 163, 139, 118, 62, 103, 117, 47, 190, 146, 241, 158, 190, 147, 243, 137, 190, 119, 200, 31, 62, 5, 126, 73, 189, 170, 73, 8, 188, 166, 2, 77, 191, 229, 197, 136, 62, 174, 26, 234, 189, 88, 147, 122, 61, 68, 254, 77, 62, 197, 102, 65, 191, 170, 222, 208, 190, 163, 219, 53, 190, 165, 179, 74, 191, 34, 20, 192, 62, 199, 247, 201, 60, 117, 202, 47, 189, 178, 88, 131, 62, 48, 116, 162, 61, 85, 254, 248, 189, 55, 117, 158, 61, 115, 75, 150, 62, 76, 29, 83, 61, 30, 75, 165, 189, 252, 34, 130, 62, 71, 241, 221, 61, 115, 74, 196, 60, 46, 251, 3, 61, 66, 175, 27, 62, 102, 34, 149, 61, 150, 3, 24, 62, 77, 107, 188, 62, 64, 92, 211, 60, 106, 185, 83, 62, 46, 93, 227, 190, 216, 97, 82, 189, 202, 239, 145, 189, 95, 154, 134, 61, 17, 53, 217, 61, 50, 95, 88, 62, 142, 216, 167, 190, 176, 167, 254, 187, 91, 155, 241, 62, 190, 240, 147, 62, 56, 65, 174, 189, 37, 106, 114, 62, 84, 77, 216, 189, 52, 68, 79, 190, 223, 118, 151, 188, 19, 94, 101, 190, 86, 24, 95, 61, 57, 144, 83, 62, 20, 51, 18, 61, 9, 149, 50, 190, 137, 82, 104, 62, 234, 188, 59, 62, 38, 179, 17, 189, 53, 80, 58, 61, 147, 165, 132, 62, 148, 113, 188, 187, 251, 199, 201, 62, 15, 145, 94, 190, 30, 78, 181, 60, 25, 83, 61, 190, 5, 119, 187, 190, 203, 7, 195, 189, 79, 80, 151, 189, 225, 127, 18, 62, 252, 0, 47, 62, 99, 206, 40, 191, 89, 200, 54, 62, 245, 162, 220, 61, 231, 120, 163, 188, 141, 100, 66, 62, 36, 105, 18, 191, 124, 88, 44, 190, 47, 21, 50, 62, 130, 81, 13, 62, 88, 54, 119, 61, 41, 32, 246, 61, 230, 221, 211, 189, 4, 216, 183, 190, 36, 94, 36, 189, 219, 3, 158, 61, 173, 89, 130, 189, 113, 243, 155, 191, 50, 144, 176, 190, 62, 185, 213, 61, 106, 220, 172, 190, 238, 8, 65, 190, 25, 201, 187, 62, 22, 226, 72, 61, 137, 43, 173, 187, 193, 39, 213, 189, 188, 172, 33, 188, 38, 97, 117, 191, 241, 121, 221, 190, 196, 1, 4, 62, 230, 212, 163, 62, 114, 74, 111, 62, 83, 50, 16, 59, 143, 53, 200, 190, 253, 245, 225, 189, 140, 89, 19, 62, 8, 138, 126, 189, 100, 158, 155, 61, 173, 102, 195, 190, 176, 206, 203, 187, 10, 156, 110, 190, 86, 73, 137, 62, 156, 124, 234, 62, 36, 180, 77, 62, 194, 87, 223, 62, 17, 224, 89, 61, 228, 225, 103, 62, 253, 161, 148, 61, 108, 172, 255, 61, 138, 130, 17, 190, 78, 185, 38, 189, 206, 145, 185, 61, 94, 147, 124, 62, 110, 158, 10, 62, 207, 125, 18, 62, 247, 191, 135, 61, 132, 221, 195, 61, 21, 136, 128, 62, 119, 15, 101, 62, 182, 50, 47, 189, 130, 163, 190, 189, 68, 194, 22, 62, 34, 219, 121, 62, 136, 17, 151, 62, 26, 108, 62, 62, 255, 68, 65, 62, 146, 152, 27, 62, 132, 242, 63, 189, 98, 211, 89, 62, 206, 102, 58, 189, 59, 114, 157, 60, 22, 253, 51, 188, 154, 227, 144, 62, 148, 222, 44, 62, 227, 53, 229, 190, 136, 138, 231, 188, 43, 230, 43, 190, 240, 129, 101, 60, 45, 145, 14, 62, 211, 19, 175, 61, 32, 89, 65, 190, 63, 249, 174, 62, 188, 224, 190, 62, 78, 212, 63, 62, 193, 250, 186, 190, 205, 99, 93, 190, 112, 170, 95, 188, 34, 117, 47, 190, 132, 140, 123, 188, 79, 72, 49, 191, 153, 162, 46, 189, 99, 229, 204, 190, 0, 223, 195, 61, 118, 201, 197, 189, 10, 64, 11, 62, 149, 213, 66, 190, 203, 146, 23, 61, 233, 58, 50, 191, 192, 104, 97, 190, 38, 73, 130, 190, 57, 254, 56, 190, 193, 74, 141, 62, 104, 90, 76, 191, 49, 124, 63, 191, 160, 180, 172, 189, 218, 210, 174, 61, 63, 40, 233, 60, 192, 65, 193, 188, 173, 248, 99, 61, 84, 81, 30, 191, 8, 28, 147, 61, 87, 72, 66, 62, 229, 221, 128, 62, 0, 0, 121, 190, 95, 89, 3, 63, 79, 74, 198, 189, 90, 144, 188, 189, 5, 249, 137, 62, 164, 204, 38, 61, 198, 177, 189, 190, 89, 253, 139, 62, 20, 99, 11, 190, 167, 178, 102, 188, 179, 241, 147, 189, 172, 89, 8, 191, 191, 141, 3, 188, 37, 181, 146, 62, 32, 134, 253, 188, 149, 254, 175, 62, 115, 242, 57, 191, 95, 128, 64, 62, 106, 145, 153, 189, 65, 176, 2, 60, 206, 46, 136, 62, 21, 9, 27, 191, 81, 82, 24, 191, 144, 20, 138, 190, 148, 204, 218, 62, 213, 143, 23, 60, 92, 81, 12, 62, 200, 24, 120, 190, 25, 4, 92, 191, 103, 56, 96, 62, 157, 134, 43, 61, 203, 247, 239, 62, 141, 206, 38, 191, 79, 51, 118, 190, 171, 31, 66, 189, 42, 152, 11, 188, 55, 135, 166, 190, 157, 112, 251, 60, 191, 204, 126, 62, 99, 152, 97, 188, 118, 167, 7, 62, 1, 177, 191, 190, 153, 141, 139, 190, 242, 160, 141, 191, 218, 142, 83, 62, 146, 174, 84, 191, 171, 49, 7, 190, 146, 33, 9, 190, 183, 204, 140, 190, 40, 49, 53, 190, 38, 98, 151, 61, 114, 7, 127, 62, 123, 237, 192, 61, 72, 4, 28, 190, 28, 195, 175, 60, 34, 50, 192, 62, 124, 24, 200, 62, 180, 161, 28, 190, 65, 207, 105, 190, 142, 173, 44, 190, 168, 215, 134, 191, 189, 226, 105, 60, 167, 13, 202, 188, 96, 125, 29, 190, 135, 27, 70, 191, 18, 194, 62, 61, 219, 134, 43, 62, 158, 86, 7, 191, 34, 53, 210, 60, 21, 46, 13, 62, 129, 110, 60, 61, 134, 42, 47, 61, 52, 135, 223, 189, 182, 186, 7, 190, 108, 204, 59, 191, 173, 158, 138, 191, 87, 110, 210, 188, 140, 53, 150, 60, 186, 124, 202, 189, 213, 168, 33, 62, 67, 108, 92, 191, 175, 212, 82, 190, 241, 17, 140, 61, 41, 193, 139, 60, 12, 182, 64, 62, 182, 174, 95, 191, 138, 53, 107, 190, 202, 98, 147, 61, 209, 41, 230, 190, 65, 35, 157, 61, 130, 84, 115, 62, 166, 231, 162, 62, 230, 21, 193, 189, 87, 109, 132, 62, 220, 216, 157, 189, 133, 21, 254, 189, 24, 67, 7, 62, 254, 199, 3, 191, 173, 51, 204, 189, 249, 189, 44, 62, 219, 80, 34, 189, 67, 22, 45, 62, 198, 207, 157, 190, 118, 181, 220, 190, 33, 210, 240, 189, 75, 153, 89, 62, 152, 46, 85, 62, 181, 7, 43, 62, 143, 80, 219, 190, 88, 94, 40, 62, 233, 86, 28, 62, 81, 101, 200, 190, 184, 116, 156, 62, 155, 154, 5, 190, 191, 27, 147, 190, 216, 145, 46, 62, 116, 195, 161, 188, 146, 245, 41, 62, 6, 136, 146, 62, 0, 39, 232, 61, 211, 98, 27, 191, 12, 85, 242, 61, 40, 203, 133, 61, 203, 103, 126, 189, 110, 72, 12, 190, 249, 74, 207, 189, 165, 232, 204, 61, 109, 98, 141, 190, 70, 172, 57, 190, 109, 49, 0, 191, 205, 128, 2, 62, 121, 94, 178, 62, 59, 194, 78, 190, 137, 70, 141, 190, 149, 43, 13, 191, 61, 113, 136, 190, 154, 21, 67, 62, 242, 38, 131, 62, 109, 242, 238, 62, 160, 116, 109, 61, 214, 27, 18, 191, 148, 175, 213, 61, 148, 29, 77, 62, 160, 146, 224, 190, 132, 98, 34, 188, 27, 18, 83, 190, 78, 236, 51, 189, 82, 246, 169, 190, 110, 94, 172, 190, 17, 84, 197, 189, 233, 182, 181, 189, 193, 128, 121, 61, 120, 162, 249, 61, 28, 210, 66, 187, 37, 116, 136, 191, 71, 199, 254, 189, 185, 19, 172, 62, 80, 28, 99, 190, 175, 230, 197, 62, 161, 81, 49, 189, 97, 233, 241, 62, 211, 0, 8, 191, 162, 35, 143, 190, 241, 132, 253, 189, 93, 3, 155, 190, 111, 25, 35, 191, 198, 27, 201, 60, 56, 24, 21, 191, 105, 39, 58, 190, 19, 226, 73, 190, 139, 32, 173, 189, 208, 39, 92, 62, 219, 163, 83, 62, 84, 248, 194, 190, 191, 75, 129, 191, 126, 131, 3, 191, 198, 218, 229, 187, 128, 92, 29, 191, 247, 172, 238, 190, 128, 66, 15, 191, 0, 53, 187, 62, 225, 66, 122, 60, 167, 65, 156, 191, 226, 78, 97, 62, 226, 5, 66, 189, 125, 193, 7, 62, 195, 31, 151, 61, 105, 117, 171, 189, 221, 205, 64, 188, 123, 158, 211, 60, 235, 83, 194, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 200, 111, 33, 190, 147, 130, 21, 190, 199, 92, 141, 61, 123, 174, 140, 60, 251, 195, 49, 190, 180, 182, 29, 190, 163, 15, 0, 62, 98, 98, 162, 187, 148, 127, 13, 189, 196, 15, 219, 61, 177, 134, 28, 190, 202, 147, 100, 189, 9, 147, 44, 190, 200, 240, 224, 189, 126, 158, 223, 189, 227, 34, 87, 189, 27, 253, 196, 189, 79, 66, 146, 61, 184, 97, 70, 60, 185, 178, 179, 189, 101, 76, 96, 189, 48, 122, 97, 190, 204, 87, 62, 190, 94, 98, 232, 62, 32, 71, 185, 188, 172, 154, 8, 63, 204, 231, 32, 190, 198, 188, 84, 62, 142, 56, 126, 190, 52, 165, 41, 62, 25, 132, 98, 62, 190, 96, 18, 190, 136, 171, 236, 61, 43, 4, 162, 61, 31, 180, 135, 59, 246, 173, 31, 188, 10, 44, 9, 190, 141, 140, 133, 191, 167, 171, 250, 62, 46, 172, 109, 62, 118, 116, 104, 62, 131, 216, 222, 189, 195, 181, 1, 189, 52, 248, 115, 59, 193, 84, 106, 62, 105, 190, 64, 191, 157, 29, 149, 62, 184, 66, 62, 191, 32, 191, 177, 190, 43, 21, 121, 189, 114, 101, 26, 191, 219, 112, 122, 62, 60, 24, 205, 62, 114, 133, 124, 62, 164, 222, 131, 189, 141, 142, 68, 190, 126, 214, 138, 191, 104, 34, 215, 61, 148, 239, 217, 61, 57, 213, 164, 61, 231, 111, 5, 62, 248, 137, 25, 61, 121, 120, 24, 59, 239, 17, 188, 189, 238, 8, 62, 62, 107, 50, 249, 61, 192, 185, 135, 61, 161, 13, 75, 60, 248, 46, 170, 61, 249, 79, 198, 190, 181, 105, 219, 61, 119, 39, 5, 190, 82, 208, 37, 62, 242, 137, 53, 62, 60, 246, 28, 62, 169, 204, 155, 190, 117, 61, 205, 190, 235, 241, 8, 190, 107, 56, 230, 61, 201, 22, 159, 190, 120, 7, 17, 62, 131, 233, 22, 190, 160, 189, 11, 60, 88, 187, 114, 61, 95, 103, 89, 191, 218, 75, 97, 61, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 157, 225, 226, 190, 183, 166, 128, 62, 125, 167, 111, 62, 1, 192, 142, 189, 147, 117, 187, 61, 85, 83, 20, 62, 249, 156, 185, 189, 144, 168, 175, 61, 122, 127, 47, 61, 125, 252, 22, 62, 27, 65, 32, 190, 188, 227, 175, 62, 201, 222, 235, 189, 140, 30, 205, 189, 9, 231, 155, 62, 190, 61, 24, 190, 72, 67, 8, 61, 226, 214, 94, 189, 65, 94, 213, 62, 67, 86, 204, 61, 68, 55, 158, 62, 197, 213, 150, 190, 35, 135, 152, 61, 11, 253, 8, 62, 242, 244, 154, 189, 18, 81, 13, 61, 167, 30, 41, 62, 107, 57, 146, 190, 55, 162, 76, 190, 39, 122, 189, 62, 91, 56, 173, 62, 19, 84, 149, 61, 62, 227, 34, 191, 119, 230, 133, 62, 127, 191, 135, 60, 44, 219, 199, 62, 131, 159, 136, 62, 84, 241, 44, 62, 48, 50, 226, 61, 157, 86, 206, 189, 41, 24, 14, 63, 252, 76, 211, 190, 188, 140, 202, 190, 142, 12, 182, 61, 75, 163, 130, 190, 30, 20, 175, 190, 225, 131, 32, 191, 204, 120, 1, 191, 204, 57, 5, 60, 153, 174, 166, 61, 232, 234, 49, 62, 107, 82, 200, 61, 177, 102, 55, 191, 228, 23, 53, 190, 98, 40, 97, 62, 137, 245, 140, 190, 170, 39, 122, 62, 192, 218, 118, 190, 36, 93, 159, 190, 10, 50, 175, 190, 132, 201, 1, 62, 113, 198, 158, 62, 99, 13, 166, 62, 54, 44, 162, 61, 204, 251, 99, 62, 101, 138, 155, 62, 25, 170, 142, 61, 62, 246, 23, 62, 224, 240, 252, 190, 132, 168, 191, 60, 50, 9, 12, 191, 84, 3, 139, 62, 149, 119, 33, 61, 159, 148, 204, 190, 52, 171, 57, 61, 217, 129, 130, 62, 30, 76, 139, 191, 122, 120, 24, 190, 110, 107, 74, 61, 59, 216, 147, 191, 139, 88, 170, 62, 31, 197, 63, 62, 129, 129, 147, 189, 218, 1, 127, 191, 135, 227, 25, 62, 216, 88, 244, 190, 30, 93, 231, 62, 43, 3, 173, 191, 37, 57, 38, 62, 116, 230, 114, 191, 196, 36, 44, 191, 110, 25, 29, 190, 94, 77, 153, 191, 171, 56, 117, 62, 254, 188, 13, 63, 23, 150, 175, 59, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 158, 93, 140, 191, 232, 95, 179, 61, 44, 164, 203, 190, 224, 136, 169, 187, 170, 235, 101, 62, 120, 195, 93, 190, 157, 238, 128, 62, 71, 254, 203, 190, 48, 49, 215, 62, 238, 58, 176, 190, 128, 28, 236, 190, 220, 28, 112, 62, 204, 196, 209, 190, 113, 250, 131, 191, 86, 85, 63, 192, 223, 212, 166, 190, 93, 26, 240, 60, 54, 28, 22, 62, 76, 251, 178, 62, 129, 216, 114, 61, 41, 173, 41, 192, 143, 67, 132, 62, 174, 15, 62, 62, 97, 204, 128, 190, 198, 30, 172, 62, 126, 234, 127, 190, 149, 134, 4, 191, 238, 205, 210, 190, 41, 136, 167, 61, 71, 99, 205, 189, 29, 53, 109, 62, 162, 43, 167, 62, 174, 110, 20, 190, 88, 28, 152, 191, 24, 49, 52, 62, 239, 206, 27, 191, 10, 222, 207, 190, 206, 246, 71, 62, 25, 213, 82, 190, 109, 21, 161, 190, 96, 212, 38, 190, 42, 62, 169, 62, 242, 6, 135, 189, 104, 209, 177, 186, 198, 136, 133, 62, 241, 42, 11, 190, 111, 186, 95, 191, 234, 178, 43, 62, 66, 117, 177, 189, 97, 180, 168, 61, 104, 71, 135, 190, 197, 204, 169, 190, 28, 149, 92, 191, 116, 131, 146, 190, 53, 0, 162, 62, 6, 14, 49, 62, 31, 161, 91, 190, 166, 105, 139, 62, 241, 57, 19, 60, 124, 202, 159, 190, 27, 137, 168, 60, 172, 95, 137, 189, 209, 5, 3, 190, 63, 17, 203, 190, 101, 201, 229, 189, 13, 165, 3, 192, 220, 21, 191, 62, 138, 85, 180, 191, 80, 30, 246, 61, 187, 245, 72, 62, 71, 9, 180, 61, 203, 69, 205, 190, 101, 207, 88, 62, 205, 128, 118, 61, 109, 140, 161, 190, 114, 165, 31, 61, 0, 24, 77, 61, 166, 242, 107, 190, 112, 195, 253, 191, 150, 38, 158, 62, 125, 128, 133, 190, 126, 159, 204, 189, 153, 165, 55, 61, 162, 87, 60, 189, 245, 71, 252, 191, 224, 189, 7, 189, 233, 76, 202, 189, 246, 132, 155, 62, 128, 193, 208, 61, 83, 225, 180, 62, 157, 190, 2, 62, 165, 57, 231, 190, 196, 13, 184, 62, 55, 105, 139, 188, 202, 248, 14, 191, 61, 160, 49, 62, 188, 175, 246, 62, 54, 250, 162, 190, 146, 80, 245, 190, 134, 164, 24, 190, 250, 177, 19, 191, 25, 180, 59, 189, 192, 207, 150, 61, 45, 108, 135, 62, 155, 33, 253, 189, 34, 104, 147, 62, 244, 206, 164, 62, 53, 211, 71, 189, 64, 157, 37, 62, 166, 204, 81, 62, 26, 58, 106, 61, 87, 186, 65, 62, 132, 34, 187, 190, 114, 14, 47, 61, 248, 87, 148, 190, 164, 124, 144, 190, 95, 125, 205, 61, 224, 231, 19, 62, 190, 218, 207, 61, 171, 247, 152, 62, 226, 202, 66, 191, 11, 27, 222, 61, 127, 43, 220, 61, 208, 37, 19, 61, 113, 239, 141, 62, 33, 16, 217, 190, 61, 254, 229, 190, 157, 213, 63, 62, 37, 241, 81, 190, 117, 134, 161, 62, 114, 91, 72, 61, 255, 51, 196, 61, 93, 215, 96, 62, 56, 20, 28, 61, 82, 71, 67, 62, 249, 7, 197, 190, 240, 161, 175, 62, 88, 81, 186, 190, 34, 76, 29, 190, 215, 223, 177, 62, 223, 160, 65, 189, 186, 148, 54, 190, 92, 138, 159, 190, 51, 114, 224, 190, 14, 240, 7, 62, 151, 8, 168, 62, 6, 205, 143, 62, 157, 128, 86, 62, 11, 245, 174, 190, 243, 189, 155, 189, 208, 29, 168, 62, 158, 42, 170, 190, 158, 173, 231, 61, 98, 139, 104, 189, 6, 2, 30, 190, 17, 91, 80, 190, 227, 53, 174, 190, 105, 143, 89, 62, 161, 184, 65, 62, 46, 30, 122, 62, 165, 138, 26, 191, 19, 241, 174, 62, 60, 150, 43, 62, 160, 23, 65, 188, 193, 205, 155, 61, 239, 163, 27, 62, 157, 130, 193, 61, 105, 26, 109, 190, 67, 111, 198, 62, 86, 114, 89, 190, 217, 31, 3, 62, 213, 161, 133, 62, 138, 202, 166, 189, 178, 253, 62, 190, 103, 61, 148, 61, 91, 98, 34, 191, 134, 51, 199, 61, 82, 91, 52, 62, 159, 95, 106, 62, 41, 40, 82, 62, 252, 58, 157, 190, 235, 203, 241, 60, 39, 209, 228, 61, 144, 132, 193, 190, 144, 176, 0, 62, 47, 170, 12, 190, 165, 180, 42, 190, 87, 65, 73, 61, 232, 141, 156, 61, 138, 230, 3, 63, 249, 74, 227, 61, 187, 23, 65, 62, 164, 112, 69, 63, 180, 111, 197, 190, 6, 135, 202, 190, 61, 139, 41, 190, 153, 133, 103, 190, 179, 233, 174, 188, 233, 203, 152, 61, 248, 20, 201, 62, 251, 119, 45, 191, 201, 13, 199, 62, 83, 201, 114, 62, 18, 93, 183, 189, 156, 241, 157, 62, 103, 145, 201, 62, 36, 70, 146, 190, 222, 231, 147, 62, 5, 250, 198, 60, 6, 47, 220, 61, 26, 95, 151, 190, 203, 226, 125, 190, 4, 144, 78, 189, 25, 188, 88, 62, 128, 181, 3, 190, 220, 103, 210, 62, 119, 226, 45, 191, 150, 210, 90, 62, 167, 89, 206, 62, 158, 185, 157, 62, 88, 62, 29, 62, 207, 176, 48, 191, 60, 78, 38, 191, 111, 81, 182, 61, 107, 214, 59, 62, 48, 140, 175, 188, 250, 158, 10, 190, 101, 138, 47, 190, 208, 203, 23, 190, 113, 71, 178, 188, 228, 18, 147, 190, 207, 190, 95, 190, 80, 20, 33, 189, 218, 247, 213, 62, 140, 236, 28, 189, 118, 144, 190, 190, 18, 237, 126, 62, 248, 108, 129, 189, 74, 124, 85, 189, 104, 77, 137, 62, 251, 196, 251, 190, 148, 205, 151, 61, 152, 214, 84, 190, 3, 19, 132, 190, 14, 49, 36, 189, 15, 26, 110, 62, 157, 70, 172, 61, 151, 200, 92, 62, 212, 28, 253, 58, 102, 176, 104, 62, 88, 4, 171, 189, 91, 25, 132, 58, 125, 211, 215, 61, 234, 218, 31, 188, 12, 207, 166, 189, 179, 176, 60, 191, 96, 60, 164, 60, 8, 128, 193, 189, 224, 136, 21, 190, 198, 108, 125, 62, 219, 205, 254, 188, 114, 222, 179, 61, 114, 174, 54, 189, 127, 126, 48, 62, 111, 79, 248, 190, 113, 2, 197, 62, 220, 193, 198, 61, 12, 86, 182, 60, 35, 238, 133, 62, 166, 60, 76, 62, 118, 119, 246, 190, 171, 119, 21, 62, 114, 118, 252, 189, 127, 10, 142, 62, 6, 226, 126, 190, 80, 63, 39, 190, 47, 203, 229, 190, 73, 75, 97, 61, 39, 144, 6, 62, 250, 73, 40, 62, 22, 192, 51, 191, 30, 63, 171, 62, 172, 149, 230, 62, 194, 2, 249, 60, 69, 204, 36, 61, 197, 188, 11, 191, 63, 120, 189, 190, 126, 132, 29, 190, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 175, 2, 62, 66, 247, 232, 59, 183, 52, 174, 61, 126, 206, 3, 190, 16, 42, 113, 187, 165, 140, 77, 62, 14, 0, 165, 62, 156, 147, 206, 188, 134, 0, 245, 61, 0, 213, 53, 189, 53, 125, 113, 62, 94, 103, 22, 187, 242, 190, 176, 62, 69, 80, 221, 61, 115, 44, 5, 61, 23, 93, 130, 62, 182, 229, 147, 190, 177, 142, 77, 190, 2, 236, 163, 61, 213, 212, 13, 62, 218, 223, 6, 190, 220, 85, 115, 61, 87, 223, 171, 62, 139, 213, 138, 61, 75, 208, 67, 61, 187, 41, 151, 61, 66, 63, 129, 62, 208, 97, 74, 60, 10, 141, 15, 189, 168, 199, 127, 190, 138, 114, 16, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 127, 146, 189, 0, 91, 0, 63, 107, 149, 190, 190, 117, 124, 168, 190, 210, 6, 90, 190, 108, 243, 193, 189, 229, 218, 18, 189, 50, 114, 63, 191, 182, 55, 208, 190, 28, 62, 119, 191, 134, 138, 143, 191, 109, 102, 128, 62, 172, 217, 206, 61, 182, 45, 145, 191, 48, 237, 71, 61, 190, 26, 42, 63, 28, 169, 70, 190, 36, 27, 66, 61, 147, 150, 196, 190, 226, 238, 17, 63, 64, 224, 71, 191, 132, 86, 180, 61, 75, 72, 136, 63, 219, 197, 47, 63, 149, 103, 30, 63, 149, 43, 190, 190, 92, 144, 218, 62, 43, 210, 145, 62, 13, 3, 11, 191, 81, 223, 26, 61, 206, 218, 187, 190, 40, 37, 91, 61, 210, 168, 126, 190, 86, 197, 40, 62, 82, 247, 29, 190, 249, 233, 96, 189, 6, 44, 72, 190, 190, 226, 204, 190, 208, 0, 219, 190, 75, 51, 161, 189, 201, 88, 61, 62, 24, 109, 223, 61, 161, 255, 99, 62, 134, 228, 29, 190, 157, 25, 187, 190, 107, 5, 21, 189, 78, 248, 226, 61, 184, 45, 176, 62, 145, 243, 71, 62, 149, 243, 150, 188, 12, 142, 78, 62, 12, 223, 225, 62, 24, 29, 185, 189, 156, 198, 42, 61, 118, 123, 72, 62, 40, 4, 218, 62, 152, 38, 246, 189, 87, 60, 120, 187, 56, 15, 182, 190, 184, 43, 54, 61, 97, 186, 5, 63, 208, 102, 5, 63, 108, 22, 177, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 138, 89, 189, 130, 75, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 176, 184, 63, 36, 179, 23, 64, 231, 156, 219, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 146, 157, 192, 68, 171, 230, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}