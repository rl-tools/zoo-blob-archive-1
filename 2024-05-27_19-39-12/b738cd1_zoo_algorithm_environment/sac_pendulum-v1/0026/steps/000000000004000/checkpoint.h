// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 54, 54, 191, 83, 216, 17, 191, 14, 125, 116, 190, 121, 83, 71, 63, 144, 176, 115, 190, 123, 196, 136, 190, 177, 6, 253, 189, 64, 132, 137, 190, 130, 228, 18, 191, 184, 167, 57, 63, 14, 202, 156, 189, 74, 149, 139, 190, 174, 144, 7, 191, 148, 189, 235, 61, 254, 207, 249, 62, 109, 11, 145, 62, 168, 97, 8, 63, 51, 3, 241, 190, 12, 99, 114, 189, 240, 131, 45, 62, 172, 117, 151, 61, 167, 237, 116, 62, 218, 234, 99, 190, 203, 91, 234, 62, 80, 67, 11, 191, 56, 100, 136, 63, 193, 209, 180, 62, 211, 5, 146, 62, 57, 95, 29, 63, 21, 37, 219, 62, 217, 156, 100, 62, 252, 198, 88, 62, 27, 27, 178, 190, 222, 4, 137, 62, 14, 92, 76, 191, 57, 191, 68, 63, 202, 33, 227, 62, 180, 168, 217, 62, 107, 238, 9, 63, 200, 89, 54, 190, 108, 90, 128, 61, 20, 84, 239, 190, 236, 71, 224, 190, 122, 134, 217, 189, 171, 80, 188, 190, 137, 183, 237, 62, 241, 233, 69, 63, 162, 238, 27, 62, 219, 121, 38, 188, 253, 199, 12, 191, 152, 154, 198, 61, 20, 245, 104, 63, 190, 39, 66, 61, 16, 184, 50, 190, 255, 250, 146, 189, 203, 237, 203, 190, 112, 230, 235, 62, 60, 244, 148, 190, 213, 95, 105, 62, 62, 78, 24, 63, 249, 60, 117, 190, 75, 177, 7, 190, 57, 213, 204, 190, 116, 223, 101, 63, 119, 29, 232, 62, 215, 72, 135, 188, 255, 53, 110, 63, 227, 62, 228, 190, 216, 62, 12, 190, 146, 114, 59, 63, 43, 83, 133, 63, 25, 50, 62, 62, 199, 60, 73, 62, 245, 163, 164, 190, 242, 94, 198, 190, 107, 125, 245, 62, 171, 172, 44, 63, 239, 220, 150, 62, 27, 79, 190, 60, 22, 71, 219, 62, 229, 250, 208, 62, 132, 222, 160, 190, 202, 231, 156, 189, 225, 65, 21, 191, 75, 185, 1, 191, 180, 182, 58, 63, 67, 9, 206, 61, 163, 87, 207, 62, 231, 111, 163, 190, 167, 118, 99, 190, 64, 40, 157, 62, 12, 192, 51, 191, 49, 115, 150, 190, 183, 126, 172, 190, 146, 229, 135, 190, 167, 82, 31, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 143, 199, 190, 132, 115, 60, 190, 116, 80, 160, 190, 212, 12, 51, 190, 139, 28, 191, 190, 10, 162, 145, 189, 116, 47, 22, 63, 24, 190, 73, 61, 128, 134, 136, 190, 180, 47, 8, 191, 184, 116, 140, 62, 110, 247, 219, 62, 169, 92, 137, 190, 78, 122, 10, 190, 248, 183, 190, 190, 87, 23, 195, 189, 155, 78, 156, 62, 196, 228, 34, 62, 208, 87, 58, 61, 103, 139, 227, 189, 5, 19, 54, 190, 178, 66, 46, 61, 54, 13, 43, 63, 204, 106, 253, 189, 138, 26, 22, 191, 95, 209, 178, 189, 251, 125, 20, 191, 103, 180, 77, 190, 117, 18, 47, 63, 132, 42, 148, 190, 196, 46, 192, 187, 191, 38, 251, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 165, 151, 62, 206, 229, 88, 62, 39, 107, 29, 190, 31, 141, 3, 190, 234, 185, 78, 190, 144, 36, 116, 190, 160, 163, 155, 60, 37, 68, 38, 61, 192, 36, 99, 61, 101, 140, 15, 62, 106, 8, 208, 61, 174, 172, 151, 187, 17, 46, 37, 62, 26, 196, 134, 189, 8, 199, 41, 190, 102, 227, 47, 62, 76, 250, 139, 190, 90, 112, 124, 62, 142, 99, 2, 191, 173, 158, 32, 189, 19, 236, 228, 189, 166, 51, 189, 61, 104, 116, 110, 62, 63, 49, 76, 61, 25, 52, 112, 190, 90, 170, 0, 62, 224, 137, 72, 62, 227, 151, 218, 188, 98, 65, 82, 61, 193, 1, 140, 190, 247, 175, 185, 188, 224, 142, 116, 59, 27, 255, 17, 61, 194, 214, 90, 190, 246, 101, 24, 62, 226, 228, 73, 190, 35, 252, 2, 190, 159, 228, 87, 62, 244, 0, 37, 189, 38, 89, 13, 62, 201, 171, 212, 189, 55, 11, 90, 62, 5, 106, 83, 62, 137, 48, 0, 190, 51, 115, 101, 62, 221, 60, 224, 62, 132, 151, 60, 62, 255, 72, 88, 62, 170, 78, 69, 190, 252, 253, 63, 190, 20, 242, 242, 189, 83, 107, 76, 190, 108, 43, 126, 62, 226, 206, 196, 61, 208, 210, 218, 189, 197, 250, 101, 62, 174, 98, 149, 188, 70, 36, 161, 61, 67, 200, 246, 61, 188, 184, 199, 61, 81, 72, 124, 61, 157, 125, 55, 61, 16, 112, 175, 189, 32, 213, 211, 190, 56, 219, 63, 62, 27, 60, 87, 61, 213, 107, 134, 190, 151, 197, 249, 61, 45, 199, 134, 190, 222, 86, 196, 189, 82, 63, 74, 62, 60, 208, 27, 62, 222, 9, 32, 189, 194, 161, 103, 62, 180, 36, 93, 62, 10, 168, 242, 189, 124, 202, 126, 62, 102, 202, 189, 62, 154, 209, 19, 190, 141, 12, 103, 62, 209, 253, 219, 189, 60, 103, 122, 62, 216, 250, 150, 190, 11, 56, 26, 190, 187, 231, 175, 189, 130, 254, 8, 62, 193, 206, 52, 189, 238, 226, 79, 189, 242, 224, 98, 190, 121, 78, 135, 62, 248, 249, 119, 189, 206, 155, 235, 61, 27, 206, 194, 61, 155, 6, 249, 190, 81, 34, 85, 190, 50, 80, 51, 190, 27, 168, 193, 190, 209, 171, 123, 62, 87, 96, 222, 189, 55, 192, 147, 189, 231, 136, 60, 62, 220, 3, 56, 61, 166, 181, 222, 189, 53, 15, 224, 61, 99, 193, 43, 62, 30, 143, 32, 190, 79, 144, 64, 190, 55, 214, 132, 62, 227, 110, 142, 61, 70, 205, 46, 189, 117, 110, 28, 61, 143, 188, 50, 61, 24, 118, 64, 62, 97, 168, 51, 62, 163, 23, 184, 62, 32, 188, 53, 189, 157, 180, 90, 190, 205, 187, 1, 191, 94, 70, 25, 189, 1, 130, 43, 190, 26, 36, 175, 61, 149, 217, 36, 60, 126, 96, 123, 61, 99, 157, 199, 190, 69, 182, 15, 189, 59, 73, 84, 61, 50, 98, 131, 62, 58, 143, 220, 61, 242, 9, 88, 62, 255, 12, 146, 189, 201, 154, 177, 189, 252, 3, 236, 60, 17, 82, 242, 187, 252, 9, 132, 61, 217, 114, 6, 62, 244, 130, 138, 60, 63, 245, 0, 190, 100, 75, 34, 62, 208, 157, 106, 62, 61, 8, 29, 190, 240, 226, 33, 61, 34, 83, 203, 62, 186, 74, 211, 61, 174, 254, 184, 62, 196, 252, 156, 190, 244, 76, 3, 61, 204, 156, 208, 190, 73, 47, 123, 190, 121, 77, 14, 59, 138, 164, 113, 189, 230, 50, 0, 62, 229, 145, 12, 62, 162, 253, 103, 190, 117, 118, 54, 62, 28, 168, 59, 62, 59, 135, 236, 61, 148, 147, 248, 61, 128, 199, 218, 190, 226, 88, 208, 189, 128, 148, 160, 61, 100, 226, 91, 62, 113, 147, 164, 60, 105, 180, 16, 62, 65, 185, 24, 190, 124, 136, 141, 190, 210, 185, 136, 189, 161, 139, 216, 61, 188, 251, 252, 60, 57, 138, 227, 190, 132, 8, 66, 190, 138, 28, 235, 61, 67, 168, 185, 190, 169, 191, 207, 189, 58, 12, 207, 62, 255, 202, 17, 62, 42, 226, 175, 60, 156, 73, 69, 189, 213, 48, 68, 189, 135, 33, 26, 191, 215, 215, 130, 190, 33, 214, 74, 62, 66, 12, 166, 62, 216, 165, 76, 62, 247, 9, 136, 60, 109, 56, 72, 190, 51, 234, 93, 189, 54, 119, 20, 62, 202, 113, 160, 188, 248, 183, 20, 62, 175, 7, 210, 190, 2, 50, 250, 60, 24, 189, 251, 189, 209, 243, 136, 62, 45, 127, 154, 62, 33, 152, 135, 61, 148, 70, 160, 62, 186, 243, 2, 62, 228, 8, 104, 61, 188, 86, 66, 188, 11, 128, 217, 61, 46, 192, 37, 189, 2, 217, 101, 189, 55, 86, 55, 189, 158, 200, 82, 62, 248, 69, 9, 62, 106, 153, 99, 61, 26, 143, 159, 188, 29, 142, 2, 62, 102, 214, 69, 62, 13, 33, 86, 62, 229, 180, 98, 189, 55, 182, 142, 189, 210, 167, 147, 61, 108, 121, 114, 62, 32, 44, 107, 62, 121, 223, 73, 62, 161, 92, 1, 62, 121, 198, 46, 62, 62, 129, 189, 189, 132, 118, 16, 62, 217, 228, 2, 190, 147, 13, 222, 189, 227, 61, 16, 189, 142, 0, 105, 62, 193, 25, 32, 189, 140, 171, 43, 189, 158, 224, 57, 189, 90, 75, 106, 189, 179, 229, 177, 61, 123, 253, 176, 61, 250, 66, 219, 189, 253, 196, 222, 189, 214, 77, 106, 61, 129, 13, 208, 61, 34, 177, 152, 61, 154, 251, 140, 189, 37, 171, 30, 190, 42, 174, 224, 60, 70, 196, 104, 189, 131, 139, 21, 190, 67, 183, 12, 190, 14, 235, 191, 61, 120, 47, 163, 61, 61, 150, 147, 189, 253, 86, 191, 61, 244, 31, 196, 61, 204, 225, 135, 59, 46, 1, 83, 189, 42, 89, 22, 61, 226, 111, 11, 190, 204, 122, 40, 189, 208, 107, 5, 190, 230, 10, 14, 189, 232, 201, 54, 189, 126, 81, 8, 190, 47, 119, 246, 189, 119, 198, 138, 62, 126, 62, 212, 61, 29, 170, 13, 61, 122, 101, 174, 61, 130, 245, 83, 190, 11, 40, 1, 190, 92, 92, 18, 62, 219, 148, 75, 62, 115, 181, 53, 189, 219, 155, 112, 62, 202, 206, 224, 189, 35, 76, 89, 190, 218, 30, 93, 62, 161, 211, 103, 60, 205, 205, 8, 190, 55, 7, 92, 62, 120, 169, 59, 190, 252, 34, 106, 188, 169, 153, 162, 190, 231, 97, 183, 190, 63, 90, 122, 62, 231, 32, 131, 62, 181, 40, 199, 188, 169, 175, 147, 62, 237, 4, 54, 190, 254, 145, 34, 62, 138, 218, 165, 189, 15, 58, 234, 60, 204, 238, 73, 62, 180, 140, 187, 190, 163, 90, 168, 190, 129, 180, 89, 190, 156, 27, 165, 62, 93, 179, 236, 189, 203, 151, 52, 61, 98, 0, 205, 189, 20, 248, 243, 190, 113, 177, 139, 60, 100, 223, 171, 61, 64, 132, 143, 62, 10, 101, 70, 190, 208, 107, 172, 189, 223, 143, 62, 190, 185, 201, 149, 190, 109, 127, 254, 188, 166, 59, 208, 189, 101, 0, 3, 62, 22, 73, 211, 61, 188, 139, 239, 61, 180, 33, 131, 190, 218, 177, 32, 191, 156, 23, 3, 191, 236, 117, 95, 61, 252, 251, 11, 191, 109, 194, 211, 189, 114, 0, 151, 60, 124, 155, 79, 189, 225, 100, 107, 188, 141, 53, 119, 62, 240, 0, 13, 62, 198, 42, 248, 61, 92, 224, 54, 190, 241, 59, 153, 189, 251, 3, 176, 62, 101, 178, 146, 62, 145, 129, 184, 61, 175, 195, 121, 190, 191, 140, 44, 189, 219, 105, 32, 191, 57, 178, 210, 189, 159, 149, 246, 60, 47, 49, 28, 190, 219, 95, 92, 190, 241, 146, 57, 190, 140, 12, 29, 62, 8, 2, 58, 191, 84, 99, 67, 61, 22, 61, 5, 62, 181, 100, 202, 61, 55, 225, 185, 60, 220, 125, 218, 61, 198, 93, 69, 189, 218, 119, 148, 191, 159, 106, 53, 191, 130, 81, 33, 61, 173, 191, 117, 61, 12, 66, 96, 189, 92, 101, 12, 62, 26, 161, 170, 190, 239, 89, 147, 189, 173, 154, 144, 61, 2, 17, 119, 60, 226, 76, 65, 62, 239, 45, 196, 190, 23, 157, 63, 59, 10, 191, 47, 62, 190, 110, 162, 190, 221, 16, 254, 60, 97, 181, 62, 61, 74, 192, 136, 62, 160, 155, 222, 187, 128, 126, 125, 62, 191, 245, 210, 188, 69, 50, 15, 190, 32, 251, 37, 62, 94, 50, 156, 190, 154, 178, 22, 190, 138, 39, 83, 62, 133, 20, 29, 189, 238, 48, 47, 189, 27, 194, 219, 190, 174, 177, 200, 190, 77, 188, 171, 189, 29, 113, 67, 62, 214, 244, 132, 62, 70, 130, 98, 62, 80, 118, 201, 190, 34, 52, 12, 62, 209, 246, 22, 62, 239, 176, 183, 190, 226, 137, 0, 190, 10, 191, 240, 189, 61, 13, 249, 189, 30, 1, 82, 189, 245, 19, 145, 61, 65, 42, 144, 61, 144, 154, 61, 62, 199, 55, 21, 62, 158, 226, 185, 190, 223, 38, 82, 62, 146, 253, 250, 61, 126, 0, 107, 188, 197, 130, 124, 188, 17, 0, 99, 61, 219, 235, 28, 62, 188, 241, 170, 190, 31, 54, 204, 61, 2, 59, 144, 190, 126, 193, 70, 62, 206, 22, 168, 62, 17, 216, 33, 190, 40, 27, 10, 190, 68, 66, 113, 190, 227, 77, 157, 189, 139, 242, 8, 62, 109, 165, 151, 62, 137, 249, 241, 62, 251, 171, 5, 62, 161, 183, 213, 189, 202, 218, 190, 61, 216, 117, 88, 62, 21, 41, 151, 190, 77, 117, 128, 189, 111, 196, 117, 189, 224, 93, 93, 61, 183, 128, 71, 189, 231, 93, 68, 190, 211, 112, 250, 61, 166, 231, 175, 61, 176, 31, 40, 60, 49, 78, 250, 61, 144, 216, 59, 187, 63, 220, 185, 189, 176, 250, 41, 189, 104, 98, 179, 61, 63, 97, 234, 61, 241, 8, 230, 61, 75, 90, 247, 61, 28, 250, 66, 61, 3, 164, 187, 189, 130, 191, 32, 190, 239, 237, 136, 189, 69, 18, 229, 60, 70, 92, 208, 189, 41, 249, 9, 190, 173, 30, 115, 189, 63, 135, 226, 189, 153, 65, 250, 188, 156, 83, 155, 189, 69, 232, 88, 188, 82, 62, 169, 189, 54, 117, 21, 190, 83, 237, 227, 189, 95, 101, 32, 62, 198, 218, 229, 187, 176, 154, 38, 190, 37, 64, 48, 190, 166, 105, 44, 61, 88, 53, 132, 188, 225, 66, 122, 60, 242, 128, 47, 61, 6, 22, 88, 189, 226, 5, 66, 189, 23, 202, 8, 62, 28, 126, 152, 61, 214, 212, 166, 189, 221, 205, 64, 188, 7, 1, 229, 60, 76, 179, 193, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 240, 210, 31, 190, 147, 130, 21, 190, 199, 92, 141, 61, 31, 15, 147, 60, 180, 28, 50, 190, 180, 182, 29, 190, 163, 15, 0, 62, 56, 152, 56, 187, 148, 127, 13, 189, 196, 15, 219, 61, 142, 238, 28, 190, 68, 16, 89, 189, 228, 106, 43, 190, 200, 240, 224, 189, 154, 103, 222, 189, 227, 34, 87, 189, 27, 253, 196, 189, 172, 31, 147, 61, 199, 106, 62, 60, 245, 134, 179, 189, 217, 181, 94, 189, 117, 199, 98, 190, 254, 214, 185, 189, 83, 28, 165, 62, 54, 50, 222, 188, 209, 82, 148, 62, 180, 255, 198, 189, 177, 116, 50, 62, 144, 248, 176, 190, 157, 184, 23, 61, 19, 122, 55, 61, 236, 157, 15, 62, 98, 79, 140, 61, 66, 81, 128, 189, 59, 139, 233, 61, 19, 6, 154, 189, 227, 7, 148, 189, 183, 45, 243, 190, 3, 43, 20, 62, 196, 147, 119, 61, 91, 22, 205, 61, 204, 243, 221, 189, 174, 93, 92, 61, 32, 112, 32, 190, 71, 14, 232, 61, 160, 199, 143, 190, 153, 109, 138, 60, 201, 250, 62, 190, 15, 152, 234, 189, 172, 174, 207, 189, 189, 62, 241, 190, 164, 124, 178, 61, 153, 152, 110, 62, 122, 182, 237, 188, 189, 215, 168, 61, 40, 205, 59, 190, 222, 40, 118, 190, 104, 34, 215, 61, 99, 110, 186, 187, 20, 243, 221, 60, 28, 220, 4, 62, 76, 192, 194, 60, 119, 136, 168, 189, 136, 144, 78, 190, 182, 102, 10, 190, 16, 142, 188, 61, 208, 56, 31, 183, 77, 216, 244, 61, 200, 29, 35, 62, 139, 108, 132, 190, 116, 10, 19, 62, 247, 166, 223, 189, 233, 60, 227, 61, 49, 136, 185, 61, 166, 137, 67, 61, 175, 38, 65, 190, 134, 231, 216, 190, 159, 92, 243, 60, 107, 56, 230, 61, 108, 189, 146, 190, 4, 228, 56, 59, 81, 54, 171, 188, 70, 76, 31, 60, 88, 187, 114, 61, 199, 144, 84, 190, 109, 179, 183, 61, 65, 135, 179, 189, 79, 152, 75, 189, 225, 206, 81, 189, 151, 246, 18, 187, 222, 113, 169, 189, 84, 160, 114, 189, 50, 192, 205, 61, 101, 79, 32, 190, 26, 188, 182, 60, 162, 155, 180, 61, 6, 191, 3, 189, 199, 9, 67, 190, 90, 100, 129, 189, 253, 94, 245, 59, 216, 126, 204, 61, 118, 97, 31, 62, 216, 11, 40, 190, 174, 112, 72, 59, 155, 117, 195, 60, 56, 77, 205, 61, 102, 200, 167, 189, 26, 25, 175, 189, 224, 208, 195, 60, 212, 234, 24, 62, 93, 26, 44, 61, 110, 240, 250, 61, 36, 191, 164, 189, 56, 180, 11, 62, 57, 153, 33, 190, 177, 103, 92, 56, 9, 185, 179, 189, 250, 38, 129, 61, 224, 26, 219, 190, 183, 78, 1, 62, 55, 44, 3, 62, 112, 25, 225, 189, 193, 128, 44, 60, 151, 225, 203, 61, 219, 50, 179, 189, 155, 24, 249, 61, 96, 80, 208, 60, 178, 145, 125, 189, 48, 120, 1, 190, 165, 143, 168, 62, 211, 213, 5, 190, 166, 20, 136, 190, 36, 188, 35, 189, 171, 167, 45, 190, 150, 130, 167, 61, 55, 201, 184, 189, 61, 86, 198, 62, 157, 93, 111, 61, 123, 195, 22, 190, 26, 173, 176, 190, 74, 181, 11, 61, 11, 16, 236, 61, 164, 153, 140, 189, 163, 116, 142, 186, 139, 137, 189, 60, 91, 255, 232, 190, 41, 110, 11, 190, 19, 89, 175, 61, 72, 16, 40, 62, 11, 137, 14, 62, 91, 37, 189, 190, 185, 224, 150, 62, 57, 221, 87, 61, 236, 107, 206, 62, 202, 210, 130, 62, 247, 135, 109, 62, 244, 97, 229, 61, 72, 165, 0, 190, 121, 20, 156, 62, 198, 44, 93, 190, 111, 135, 201, 190, 66, 48, 239, 61, 50, 139, 139, 190, 129, 157, 169, 190, 39, 0, 159, 190, 143, 123, 4, 191, 55, 60, 146, 61, 165, 224, 181, 61, 211, 148, 81, 62, 234, 2, 162, 61, 32, 124, 164, 190, 26, 72, 50, 190, 3, 76, 119, 62, 97, 0, 139, 190, 99, 75, 51, 62, 164, 158, 132, 190, 193, 212, 243, 189, 69, 44, 173, 190, 62, 165, 107, 61, 230, 56, 190, 62, 0, 7, 150, 62, 241, 198, 149, 61, 90, 77, 222, 61, 228, 89, 236, 60, 85, 66, 50, 61, 114, 94, 91, 62, 145, 159, 190, 189, 115, 204, 198, 61, 173, 28, 214, 190, 11, 145, 221, 61, 149, 119, 33, 61, 255, 68, 127, 188, 166, 13, 170, 61, 182, 57, 219, 188, 119, 87, 17, 190, 116, 66, 37, 190, 229, 124, 136, 187, 43, 28, 57, 189, 235, 219, 167, 61, 155, 61, 53, 61, 63, 52, 4, 60, 114, 28, 222, 189, 225, 197, 197, 188, 168, 207, 89, 190, 159, 59, 95, 61, 48, 56, 177, 189, 52, 159, 26, 62, 229, 249, 12, 190, 235, 93, 10, 190, 3, 211, 49, 190, 180, 74, 64, 190, 184, 47, 13, 60, 114, 129, 65, 62, 24, 172, 66, 190, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 142, 34, 140, 190, 150, 27, 64, 61, 47, 203, 131, 190, 66, 170, 199, 188, 28, 116, 111, 62, 99, 222, 69, 190, 0, 64, 111, 62, 4, 32, 245, 190, 4, 89, 157, 62, 177, 222, 243, 189, 144, 218, 249, 190, 49, 214, 82, 62, 184, 115, 210, 190, 0, 220, 167, 191, 42, 233, 143, 191, 96, 44, 164, 190, 17, 5, 201, 187, 230, 1, 224, 61, 153, 239, 171, 62, 149, 150, 153, 61, 164, 115, 164, 191, 185, 247, 134, 62, 146, 65, 2, 62, 47, 167, 116, 190, 253, 26, 152, 61, 152, 119, 117, 190, 76, 145, 175, 190, 252, 161, 8, 191, 136, 34, 52, 61, 66, 221, 209, 189, 93, 7, 12, 61, 13, 23, 136, 62, 172, 74, 247, 189, 177, 226, 5, 190, 252, 31, 157, 60, 4, 124, 201, 189, 179, 22, 29, 189, 61, 220, 69, 62, 121, 218, 117, 189, 82, 83, 215, 190, 76, 40, 0, 62, 87, 38, 94, 189, 135, 74, 51, 190, 6, 46, 199, 188, 102, 118, 179, 189, 175, 190, 147, 190, 212, 56, 190, 189, 162, 62, 65, 61, 36, 128, 217, 189, 150, 25, 147, 190, 78, 227, 109, 190, 222, 231, 133, 61, 164, 122, 190, 189, 14, 124, 178, 190, 22, 155, 69, 190, 127, 244, 17, 60, 165, 223, 150, 189, 112, 132, 166, 61, 58, 219, 4, 190, 212, 72, 159, 190, 183, 98, 79, 62, 134, 139, 41, 60, 189, 178, 203, 188, 254, 226, 4, 190, 68, 3, 167, 189, 82, 216, 56, 190, 205, 244, 150, 189, 44, 196, 27, 190, 242, 251, 19, 62, 237, 134, 93, 61, 111, 215, 95, 61, 135, 195, 230, 190, 144, 200, 128, 62, 253, 186, 15, 190, 102, 35, 137, 190, 63, 151, 245, 59, 66, 188, 205, 189, 161, 65, 63, 191, 172, 108, 15, 191, 169, 149, 122, 61, 173, 125, 192, 190, 86, 239, 38, 61, 21, 206, 51, 60, 163, 67, 255, 188, 64, 146, 69, 191, 251, 240, 39, 62, 19, 54, 24, 190, 48, 185, 38, 61, 221, 238, 19, 62, 157, 29, 10, 62, 229, 137, 9, 59, 171, 234, 67, 191, 73, 109, 166, 62, 203, 22, 213, 61, 185, 58, 248, 189, 189, 26, 192, 61, 184, 236, 179, 62, 2, 35, 130, 190, 78, 32, 182, 190, 230, 55, 173, 189, 73, 246, 182, 190, 237, 165, 7, 189, 161, 183, 52, 60, 68, 246, 157, 62, 248, 203, 169, 188, 28, 89, 214, 61, 214, 149, 187, 62, 21, 164, 200, 189, 168, 183, 47, 62, 84, 224, 175, 62, 97, 24, 53, 62, 118, 118, 12, 62, 141, 14, 201, 190, 203, 88, 135, 61, 38, 66, 227, 190, 175, 88, 87, 190, 92, 83, 103, 62, 231, 186, 38, 62, 120, 190, 243, 61, 219, 67, 129, 62, 149, 198, 117, 190, 174, 49, 194, 61, 232, 54, 114, 61, 231, 73, 49, 62, 193, 242, 34, 62, 62, 213, 138, 190, 56, 7, 147, 190, 14, 83, 237, 61, 192, 42, 212, 190, 107, 237, 151, 62, 103, 109, 237, 188, 10, 101, 194, 61, 159, 42, 114, 62, 79, 126, 114, 62, 106, 214, 99, 62, 201, 147, 225, 190, 23, 149, 95, 62, 127, 199, 127, 190, 237, 13, 172, 189, 158, 63, 175, 62, 10, 173, 201, 189, 152, 248, 32, 190, 118, 50, 250, 190, 204, 169, 235, 190, 173, 13, 1, 62, 230, 145, 174, 62, 235, 222, 142, 62, 163, 44, 53, 62, 86, 7, 163, 190, 215, 248, 142, 188, 226, 191, 163, 62, 240, 93, 178, 190, 69, 116, 202, 189, 122, 25, 213, 189, 144, 144, 143, 189, 254, 123, 126, 190, 188, 134, 147, 190, 70, 62, 22, 62, 60, 193, 10, 61, 94, 186, 75, 62, 141, 45, 251, 190, 224, 164, 176, 62, 56, 64, 97, 60, 46, 48, 29, 188, 63, 181, 93, 61, 83, 2, 23, 62, 141, 162, 158, 61, 24, 175, 137, 190, 95, 209, 7, 62, 188, 151, 171, 189, 18, 201, 170, 61, 21, 171, 144, 62, 112, 7, 253, 189, 16, 26, 179, 190, 207, 58, 251, 186, 72, 129, 45, 191, 210, 179, 14, 62, 127, 248, 60, 62, 20, 142, 126, 62, 246, 76, 43, 62, 178, 244, 146, 190, 241, 124, 153, 60, 8, 150, 5, 62, 156, 202, 205, 190, 173, 182, 34, 190, 248, 183, 72, 190, 14, 153, 128, 189, 96, 56, 234, 189, 106, 146, 215, 187, 244, 207, 249, 62, 210, 120, 90, 60, 213, 94, 40, 62, 156, 16, 25, 63, 171, 187, 174, 190, 238, 129, 207, 190, 129, 185, 51, 190, 45, 119, 184, 189, 123, 104, 141, 190, 205, 105, 174, 60, 194, 80, 197, 62, 112, 207, 47, 190, 81, 239, 251, 61, 159, 191, 106, 62, 252, 175, 53, 190, 247, 148, 146, 62, 35, 73, 37, 62, 14, 76, 6, 190, 4, 115, 97, 62, 155, 235, 22, 190, 165, 53, 172, 61, 18, 56, 233, 190, 215, 165, 40, 190, 115, 127, 136, 61, 64, 70, 2, 62, 94, 62, 208, 189, 10, 204, 166, 62, 243, 79, 184, 190, 154, 115, 59, 62, 5, 90, 148, 62, 30, 238, 116, 62, 40, 21, 32, 62, 204, 240, 21, 191, 155, 246, 133, 190, 127, 56, 137, 188, 135, 57, 41, 62, 130, 14, 168, 61, 194, 186, 16, 189, 121, 0, 240, 189, 133, 19, 99, 61, 78, 181, 11, 59, 191, 51, 118, 190, 248, 187, 200, 189, 205, 162, 15, 62, 13, 13, 102, 62, 161, 95, 213, 59, 101, 119, 88, 190, 106, 26, 54, 62, 128, 254, 182, 60, 150, 86, 31, 189, 236, 190, 4, 62, 201, 96, 126, 189, 53, 106, 91, 60, 2, 252, 102, 190, 189, 73, 115, 60, 169, 47, 185, 188, 10, 142, 36, 62, 117, 7, 137, 61, 210, 136, 138, 61, 215, 84, 154, 188, 200, 106, 171, 61, 197, 217, 93, 60, 222, 180, 162, 61, 85, 183, 15, 62, 121, 27, 183, 61, 139, 219, 215, 61, 94, 207, 191, 190, 243, 250, 209, 61, 173, 62, 165, 189, 169, 170, 68, 190, 41, 94, 91, 62, 54, 144, 126, 188, 179, 184, 229, 189, 86, 184, 52, 189, 101, 162, 52, 62, 5, 84, 128, 190, 242, 199, 240, 61, 8, 6, 119, 61, 123, 54, 213, 188, 244, 168, 50, 62, 156, 224, 240, 61, 80, 52, 73, 189, 210, 231, 63, 61, 74, 198, 12, 190, 69, 85, 149, 62, 109, 177, 149, 190, 4, 234, 57, 190, 0, 37, 36, 190, 121, 86, 139, 60, 134, 55, 40, 62, 171, 22, 130, 61, 16, 29, 107, 190, 246, 27, 120, 62, 16, 254, 106, 62, 10, 212, 82, 59, 123, 100, 163, 61, 249, 25, 220, 190, 115, 81, 92, 189, 190, 203, 103, 188, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 227, 46, 62, 24, 190, 72, 61, 12, 177, 86, 61, 59, 186, 28, 189, 214, 223, 14, 189, 34, 214, 106, 62, 13, 223, 85, 62, 175, 240, 16, 190, 251, 223, 217, 61, 171, 129, 235, 189, 97, 112, 142, 62, 254, 13, 135, 188, 194, 253, 170, 62, 184, 204, 168, 189, 183, 74, 5, 61, 177, 89, 158, 61, 89, 104, 76, 190, 193, 14, 66, 190, 209, 225, 4, 62, 51, 76, 231, 61, 63, 224, 112, 190, 220, 85, 115, 61, 212, 184, 135, 62, 25, 212, 24, 62, 107, 181, 107, 188, 208, 190, 123, 61, 121, 23, 105, 62, 233, 240, 219, 188, 154, 68, 134, 189, 51, 218, 70, 190, 148, 104, 53, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 28, 11, 190, 154, 246, 162, 62, 253, 71, 161, 190, 112, 98, 184, 190, 114, 10, 143, 190, 206, 217, 122, 190, 18, 92, 142, 189, 159, 54, 220, 189, 212, 60, 162, 190, 117, 140, 27, 191, 90, 20, 71, 191, 148, 51, 160, 62, 118, 64, 182, 61, 64, 46, 196, 189, 33, 229, 72, 61, 199, 111, 236, 60, 215, 127, 221, 189, 9, 106, 61, 61, 23, 71, 209, 190, 229, 189, 33, 63, 4, 225, 22, 190, 132, 86, 180, 61, 8, 114, 80, 63, 127, 32, 102, 62, 120, 124, 236, 62, 232, 172, 183, 190, 162, 83, 254, 62, 241, 141, 211, 62, 32, 161, 181, 190, 102, 237, 22, 189, 135, 84, 162, 190, 40, 37, 91, 61, 154, 115, 66, 190, 80, 101, 147, 62, 51, 0, 18, 190, 223, 78, 130, 189, 164, 177, 38, 190, 149, 110, 113, 190, 10, 61, 140, 190, 129, 33, 223, 189, 133, 42, 147, 61, 56, 28, 217, 187, 140, 190, 87, 61, 46, 210, 226, 189, 17, 212, 38, 190, 216, 121, 128, 188, 211, 226, 226, 61, 65, 75, 146, 62, 211, 208, 89, 62, 120, 100, 179, 188, 203, 22, 143, 62, 26, 11, 116, 62, 195, 207, 233, 61, 156, 198, 42, 61, 120, 239, 70, 61, 252, 251, 9, 190, 104, 87, 33, 190, 3, 195, 92, 189, 117, 218, 131, 190, 173, 140, 90, 61, 51, 114, 152, 62, 92, 197, 247, 61, 122, 166, 135, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 153, 31, 189, 98, 230, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 126, 45, 191, 58, 195, 173, 190, 180, 187, 20, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {56, 59, 193, 63, 173, 109, 229, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}