// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 66, 37, 191, 247, 50, 139, 191, 59, 143, 80, 190, 106, 98, 72, 63, 223, 100, 38, 191, 188, 69, 92, 190, 210, 136, 134, 190, 89, 108, 41, 191, 16, 101, 16, 191, 217, 38, 63, 63, 184, 166, 124, 190, 9, 190, 36, 190, 184, 52, 11, 191, 93, 181, 40, 63, 50, 93, 209, 62, 80, 145, 147, 62, 15, 240, 89, 62, 79, 254, 224, 190, 2, 41, 23, 190, 33, 91, 83, 62, 228, 166, 124, 61, 77, 152, 96, 62, 190, 189, 162, 190, 125, 163, 213, 62, 82, 76, 190, 190, 223, 41, 198, 63, 251, 205, 185, 62, 206, 50, 30, 63, 88, 110, 13, 63, 234, 240, 181, 62, 72, 53, 115, 62, 144, 78, 162, 62, 44, 58, 128, 190, 197, 64, 93, 62, 12, 129, 0, 191, 221, 91, 73, 63, 71, 228, 0, 63, 94, 107, 222, 62, 144, 42, 237, 62, 250, 223, 30, 189, 130, 27, 144, 190, 25, 170, 171, 190, 23, 104, 247, 190, 184, 184, 131, 191, 7, 239, 161, 190, 196, 136, 233, 62, 142, 158, 83, 63, 179, 114, 63, 62, 22, 31, 231, 189, 245, 126, 221, 190, 126, 202, 199, 61, 50, 9, 87, 63, 69, 15, 120, 190, 79, 126, 5, 190, 224, 167, 251, 189, 153, 70, 53, 190, 117, 34, 230, 62, 188, 49, 151, 190, 128, 214, 38, 63, 61, 103, 3, 63, 47, 66, 144, 190, 115, 56, 138, 191, 225, 181, 170, 190, 192, 202, 45, 63, 143, 3, 242, 62, 180, 122, 86, 190, 113, 166, 94, 63, 146, 185, 92, 191, 140, 229, 219, 189, 16, 197, 60, 63, 145, 234, 132, 63, 184, 154, 111, 62, 99, 140, 79, 63, 51, 67, 232, 190, 115, 77, 159, 190, 219, 147, 248, 62, 221, 245, 80, 63, 50, 149, 132, 62, 225, 254, 215, 62, 188, 201, 176, 62, 181, 26, 196, 62, 136, 209, 228, 189, 183, 249, 12, 191, 172, 79, 207, 190, 95, 129, 245, 190, 245, 202, 132, 63, 204, 87, 24, 62, 246, 234, 245, 62, 198, 20, 226, 190, 47, 97, 59, 190, 125, 228, 166, 62, 253, 170, 161, 191, 49, 192, 144, 190, 219, 30, 185, 190, 220, 207, 169, 190, 33, 29, 95, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 47, 206, 190, 139, 52, 107, 190, 162, 80, 129, 190, 252, 9, 135, 190, 55, 134, 9, 191, 188, 85, 2, 190, 234, 49, 25, 63, 83, 208, 99, 61, 50, 100, 108, 190, 159, 229, 59, 191, 113, 37, 108, 62, 219, 242, 215, 62, 9, 135, 159, 190, 68, 151, 192, 190, 233, 156, 136, 190, 252, 236, 181, 189, 33, 224, 155, 62, 224, 6, 159, 188, 42, 7, 171, 61, 218, 11, 142, 190, 70, 17, 119, 189, 116, 95, 231, 188, 151, 127, 33, 63, 218, 135, 247, 189, 153, 5, 91, 191, 76, 36, 32, 190, 213, 253, 74, 191, 233, 41, 232, 190, 11, 223, 40, 63, 169, 32, 154, 190, 239, 161, 185, 61, 80, 185, 3, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 248, 148, 62, 99, 142, 81, 62, 138, 153, 111, 190, 196, 127, 31, 190, 106, 132, 127, 190, 30, 97, 129, 190, 185, 188, 165, 60, 206, 59, 180, 188, 88, 202, 9, 62, 74, 67, 34, 62, 35, 90, 88, 61, 230, 179, 233, 188, 206, 67, 214, 61, 22, 220, 181, 189, 140, 104, 251, 189, 76, 180, 26, 62, 58, 39, 164, 190, 83, 147, 71, 62, 1, 241, 12, 191, 4, 6, 72, 189, 225, 84, 4, 190, 132, 41, 131, 61, 251, 119, 46, 62, 71, 33, 191, 60, 30, 144, 6, 191, 153, 178, 185, 61, 169, 147, 93, 62, 189, 4, 157, 189, 186, 247, 205, 61, 153, 230, 170, 190, 156, 110, 19, 190, 220, 130, 34, 188, 91, 107, 50, 62, 9, 131, 78, 190, 0, 151, 94, 62, 172, 177, 41, 190, 243, 7, 36, 190, 56, 159, 118, 62, 253, 177, 209, 189, 254, 137, 247, 61, 221, 250, 119, 190, 39, 56, 170, 62, 74, 3, 132, 62, 65, 122, 52, 190, 209, 73, 86, 62, 99, 102, 254, 62, 104, 18, 162, 62, 151, 107, 26, 62, 69, 188, 102, 62, 149, 56, 82, 190, 171, 148, 98, 189, 116, 172, 122, 190, 192, 58, 182, 62, 180, 216, 31, 62, 1, 128, 15, 190, 202, 68, 45, 62, 134, 201, 77, 62, 67, 141, 103, 61, 112, 132, 178, 62, 2, 239, 41, 62, 49, 39, 153, 188, 65, 86, 20, 62, 154, 193, 132, 188, 196, 180, 113, 190, 158, 168, 101, 62, 168, 161, 235, 188, 249, 233, 145, 190, 245, 169, 151, 61, 137, 170, 241, 190, 7, 143, 247, 187, 241, 14, 112, 62, 7, 79, 30, 62, 99, 168, 188, 189, 183, 142, 135, 62, 8, 145, 108, 62, 35, 241, 167, 189, 254, 206, 103, 62, 58, 159, 196, 62, 234, 47, 45, 190, 6, 242, 128, 62, 112, 191, 1, 190, 149, 13, 97, 62, 152, 111, 151, 190, 157, 16, 113, 190, 69, 107, 24, 190, 201, 148, 20, 62, 195, 218, 142, 189, 92, 204, 229, 188, 30, 65, 45, 191, 113, 95, 133, 62, 225, 242, 220, 189, 246, 107, 226, 61, 188, 44, 57, 62, 167, 75, 66, 191, 34, 153, 219, 190, 222, 171, 100, 190, 39, 87, 65, 191, 118, 90, 184, 62, 234, 152, 212, 61, 103, 217, 67, 189, 183, 132, 126, 62, 100, 93, 149, 61, 169, 128, 255, 189, 46, 2, 207, 61, 4, 172, 158, 62, 29, 21, 128, 59, 97, 157, 147, 189, 198, 65, 131, 62, 64, 133, 238, 61, 10, 152, 220, 61, 152, 177, 40, 61, 120, 128, 17, 62, 7, 246, 140, 61, 239, 204, 20, 62, 150, 152, 189, 62, 181, 152, 98, 61, 81, 191, 51, 62, 109, 185, 228, 190, 47, 189, 125, 189, 40, 154, 173, 189, 87, 32, 117, 62, 77, 206, 198, 61, 55, 222, 66, 62, 239, 154, 129, 190, 218, 210, 88, 60, 150, 14, 247, 62, 20, 143, 139, 62, 245, 96, 140, 189, 161, 90, 134, 62, 22, 10, 242, 189, 190, 203, 40, 190, 195, 235, 254, 188, 250, 162, 41, 190, 20, 135, 244, 60, 125, 51, 46, 62, 98, 165, 69, 61, 228, 49, 67, 190, 181, 57, 79, 62, 81, 177, 57, 62, 35, 27, 145, 189, 159, 171, 23, 61, 185, 127, 160, 62, 149, 232, 124, 61, 83, 23, 196, 62, 41, 170, 119, 190, 120, 46, 41, 60, 32, 213, 154, 190, 137, 108, 158, 190, 66, 225, 39, 188, 105, 79, 155, 189, 188, 118, 12, 62, 74, 58, 32, 62, 8, 70, 7, 191, 124, 209, 52, 62, 115, 29, 22, 62, 6, 45, 19, 61, 99, 134, 22, 62, 158, 211, 15, 191, 33, 209, 29, 190, 111, 114, 243, 61, 37, 18, 13, 62, 53, 210, 39, 61, 226, 6, 215, 61, 150, 215, 5, 190, 4, 216, 183, 190, 121, 115, 122, 189, 126, 138, 139, 61, 42, 57, 152, 188, 164, 190, 115, 191, 102, 97, 147, 190, 238, 129, 192, 61, 101, 222, 175, 190, 47, 99, 53, 190, 181, 102, 189, 62, 85, 125, 85, 61, 48, 128, 149, 188, 196, 90, 138, 189, 68, 50, 245, 188, 100, 113, 82, 191, 247, 16, 220, 190, 94, 37, 11, 62, 217, 170, 152, 62, 232, 199, 99, 62, 45, 203, 82, 188, 190, 123, 177, 190, 135, 108, 241, 189, 21, 63, 19, 62, 74, 206, 132, 189, 101, 122, 156, 61, 141, 241, 212, 190, 52, 79, 31, 59, 207, 146, 102, 190, 161, 47, 132, 62, 132, 255, 202, 62, 106, 132, 20, 62, 42, 233, 207, 62, 154, 31, 164, 61, 120, 199, 71, 62, 37, 57, 111, 61, 123, 81, 19, 62, 62, 173, 254, 189, 44, 181, 186, 188, 228, 113, 53, 61, 11, 82, 131, 62, 206, 169, 23, 62, 249, 207, 238, 61, 124, 70, 157, 60, 255, 158, 227, 61, 2, 143, 131, 62, 207, 78, 100, 62, 186, 36, 107, 188, 165, 237, 149, 189, 118, 57, 165, 61, 217, 239, 114, 62, 194, 85, 138, 62, 235, 99, 79, 62, 210, 196, 30, 62, 39, 158, 26, 62, 173, 45, 133, 189, 227, 194, 59, 62, 23, 204, 130, 189, 68, 18, 78, 189, 189, 196, 128, 189, 151, 99, 142, 62, 190, 81, 153, 61, 112, 48, 175, 190, 69, 114, 33, 188, 234, 208, 223, 189, 19, 151, 129, 61, 32, 114, 30, 62, 216, 151, 89, 61, 183, 108, 55, 190, 23, 72, 171, 62, 173, 21, 41, 62, 42, 80, 83, 62, 91, 13, 210, 190, 20, 107, 183, 190, 69, 246, 106, 61, 74, 30, 209, 189, 236, 99, 132, 188, 44, 70, 53, 191, 126, 135, 161, 60, 26, 173, 209, 190, 68, 99, 18, 61, 74, 216, 46, 59, 148, 98, 43, 62, 192, 252, 5, 190, 157, 212, 4, 61, 92, 200, 228, 190, 61, 18, 51, 190, 59, 190, 99, 189, 137, 158, 243, 189, 46, 92, 126, 62, 24, 149, 32, 191, 168, 108, 28, 191, 149, 118, 79, 190, 44, 38, 42, 62, 9, 44, 137, 60, 95, 226, 183, 188, 11, 82, 40, 61, 182, 34, 11, 191, 192, 238, 241, 186, 125, 241, 50, 62, 94, 113, 135, 62, 112, 220, 87, 190, 9, 56, 186, 62, 126, 161, 227, 189, 52, 185, 231, 189, 18, 25, 133, 62, 77, 61, 72, 61, 108, 43, 135, 190, 70, 7, 135, 62, 45, 194, 26, 190, 78, 45, 233, 188, 94, 83, 52, 190, 144, 158, 228, 190, 152, 252, 197, 61, 234, 58, 141, 62, 215, 130, 37, 189, 115, 240, 168, 62, 108, 160, 32, 191, 218, 198, 64, 62, 248, 142, 0, 190, 57, 76, 186, 60, 138, 220, 137, 62, 241, 43, 27, 191, 7, 6, 26, 191, 120, 25, 134, 190, 217, 204, 216, 62, 132, 69, 250, 189, 66, 204, 242, 61, 114, 220, 108, 190, 171, 216, 20, 191, 195, 118, 43, 62, 250, 212, 208, 61, 36, 33, 254, 62, 7, 194, 50, 191, 117, 27, 224, 189, 171, 240, 187, 189, 145, 187, 79, 60, 150, 255, 22, 190, 118, 90, 27, 60, 144, 173, 89, 62, 225, 165, 166, 61, 123, 207, 43, 62, 225, 102, 218, 190, 73, 107, 32, 190, 186, 234, 27, 191, 137, 121, 12, 62, 185, 227, 93, 191, 175, 149, 156, 190, 41, 115, 139, 187, 182, 252, 39, 190, 140, 83, 37, 189, 127, 53, 104, 62, 72, 144, 113, 62, 218, 156, 27, 62, 214, 19, 59, 190, 28, 167, 31, 190, 163, 162, 212, 62, 12, 105, 195, 62, 178, 234, 160, 189, 35, 169, 76, 190, 138, 207, 16, 190, 219, 10, 140, 191, 96, 177, 44, 59, 164, 25, 40, 60, 120, 246, 23, 190, 153, 116, 23, 191, 66, 210, 102, 190, 24, 121, 49, 62, 74, 81, 14, 191, 17, 239, 98, 61, 143, 56, 66, 62, 26, 95, 181, 61, 78, 51, 158, 60, 16, 223, 230, 61, 60, 124, 226, 189, 152, 47, 82, 191, 245, 22, 136, 191, 234, 221, 75, 61, 228, 208, 3, 61, 207, 6, 163, 189, 78, 136, 0, 62, 144, 119, 47, 191, 42, 203, 33, 190, 62, 52, 144, 61, 13, 71, 97, 61, 140, 136, 79, 62, 5, 236, 65, 191, 119, 80, 16, 190, 187, 150, 25, 62, 193, 142, 169, 190, 159, 198, 156, 61, 38, 180, 1, 62, 21, 207, 157, 62, 110, 214, 42, 189, 238, 86, 124, 62, 185, 252, 132, 189, 39, 84, 18, 190, 153, 57, 66, 62, 30, 49, 222, 190, 38, 166, 0, 190, 217, 49, 47, 62, 91, 246, 94, 189, 24, 184, 220, 60, 158, 252, 179, 190, 149, 164, 216, 190, 212, 211, 207, 189, 157, 11, 81, 62, 140, 30, 104, 62, 239, 152, 41, 62, 134, 144, 242, 190, 68, 226, 19, 62, 111, 163, 30, 62, 169, 115, 196, 190, 233, 0, 16, 62, 54, 46, 12, 190, 52, 54, 117, 190, 88, 66, 225, 60, 118, 196, 154, 188, 141, 60, 25, 62, 144, 155, 161, 62, 80, 233, 11, 62, 131, 140, 226, 190, 7, 142, 218, 61, 197, 192, 125, 189, 174, 68, 158, 189, 63, 58, 12, 190, 39, 99, 59, 189, 25, 223, 229, 61, 9, 61, 166, 190, 176, 252, 17, 190, 243, 128, 245, 190, 222, 253, 212, 61, 123, 141, 164, 62, 173, 138, 125, 190, 171, 132, 162, 190, 20, 220, 244, 190, 52, 125, 134, 190, 61, 104, 60, 62, 17, 255, 123, 62, 71, 47, 237, 62, 66, 231, 166, 60, 173, 171, 19, 191, 42, 25, 170, 61, 227, 221, 62, 62, 79, 112, 221, 190, 160, 39, 186, 189, 20, 125, 102, 190, 243, 179, 145, 189, 31, 91, 133, 190, 181, 161, 164, 190, 31, 103, 250, 189, 71, 78, 184, 189, 162, 187, 138, 61, 242, 89, 48, 62, 28, 210, 66, 187, 188, 222, 142, 191, 71, 199, 254, 189, 151, 98, 106, 62, 164, 198, 183, 189, 135, 44, 188, 62, 241, 202, 175, 61, 171, 56, 220, 62, 234, 241, 33, 191, 8, 218, 185, 189, 139, 72, 137, 189, 169, 117, 154, 190, 235, 10, 66, 191, 75, 244, 95, 61, 112, 86, 228, 190, 163, 82, 177, 189, 104, 200, 61, 190, 159, 184, 133, 189, 93, 232, 19, 62, 92, 30, 90, 62, 9, 28, 11, 189, 248, 70, 47, 191, 11, 110, 177, 190, 198, 218, 229, 187, 54, 195, 4, 191, 162, 178, 206, 190, 110, 151, 18, 191, 214, 68, 167, 62, 225, 66, 122, 60, 101, 63, 88, 191, 55, 61, 28, 62, 226, 5, 66, 189, 125, 193, 7, 62, 195, 31, 151, 61, 105, 117, 171, 189, 221, 205, 64, 188, 123, 158, 211, 60, 235, 83, 194, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 200, 111, 33, 190, 147, 130, 21, 190, 199, 92, 141, 61, 123, 174, 140, 60, 251, 195, 49, 190, 180, 182, 29, 190, 163, 15, 0, 62, 98, 98, 162, 187, 148, 127, 13, 189, 196, 15, 219, 61, 177, 134, 28, 190, 202, 147, 100, 189, 9, 147, 44, 190, 200, 240, 224, 189, 126, 158, 223, 189, 227, 34, 87, 189, 27, 253, 196, 189, 79, 66, 146, 61, 184, 97, 70, 60, 185, 178, 179, 189, 101, 76, 96, 189, 48, 122, 97, 190, 184, 13, 33, 190, 216, 42, 197, 62, 109, 130, 1, 189, 150, 55, 237, 62, 142, 48, 250, 189, 54, 175, 134, 62, 13, 126, 140, 190, 122, 119, 224, 61, 100, 95, 251, 61, 166, 5, 49, 189, 113, 69, 15, 62, 242, 217, 25, 61, 216, 166, 17, 188, 127, 60, 46, 189, 167, 143, 231, 189, 15, 193, 118, 191, 133, 59, 215, 62, 172, 120, 53, 62, 141, 204, 79, 62, 241, 76, 23, 190, 62, 68, 0, 187, 103, 177, 194, 186, 56, 24, 74, 62, 240, 42, 49, 191, 10, 80, 46, 62, 104, 41, 47, 191, 40, 158, 141, 190, 248, 121, 179, 189, 148, 166, 15, 191, 163, 221, 229, 61, 174, 172, 166, 62, 115, 97, 52, 62, 30, 2, 222, 61, 144, 13, 71, 190, 11, 4, 115, 191, 104, 34, 215, 61, 186, 217, 185, 61, 244, 40, 181, 61, 233, 46, 1, 62, 63, 87, 25, 61, 153, 251, 78, 61, 137, 36, 0, 190, 65, 213, 10, 62, 251, 208, 231, 61, 207, 19, 44, 61, 135, 204, 66, 60, 149, 238, 135, 62, 18, 224, 177, 190, 170, 37, 192, 61, 243, 165, 92, 190, 225, 92, 27, 62, 187, 161, 41, 62, 13, 184, 155, 62, 106, 216, 154, 190, 67, 249, 224, 190, 97, 47, 228, 189, 107, 56, 230, 61, 240, 87, 152, 190, 128, 203, 218, 61, 131, 233, 22, 190, 221, 176, 32, 61, 88, 187, 114, 61, 44, 3, 27, 191, 190, 187, 72, 61, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 127, 120, 231, 190, 48, 75, 122, 62, 145, 176, 133, 62, 2, 127, 143, 189, 162, 68, 143, 61, 153, 11, 188, 61, 113, 153, 193, 189, 121, 160, 231, 61, 249, 243, 109, 61, 214, 127, 180, 61, 132, 103, 25, 190, 62, 40, 177, 62, 34, 133, 197, 189, 202, 161, 175, 189, 115, 192, 152, 62, 227, 126, 27, 190, 22, 7, 9, 61, 74, 251, 85, 189, 222, 24, 208, 62, 172, 184, 250, 61, 64, 119, 151, 62, 80, 14, 151, 190, 70, 67, 149, 61, 230, 251, 0, 62, 164, 167, 182, 58, 115, 172, 19, 61, 192, 222, 20, 62, 147, 224, 135, 190, 182, 164, 52, 190, 160, 245, 192, 62, 116, 159, 166, 62, 7, 163, 154, 61, 40, 28, 238, 190, 165, 160, 152, 62, 97, 255, 190, 61, 156, 55, 209, 62, 66, 128, 140, 62, 76, 36, 103, 62, 180, 201, 2, 62, 113, 152, 0, 190, 106, 140, 1, 63, 53, 169, 172, 190, 5, 165, 194, 190, 16, 214, 177, 61, 65, 124, 135, 190, 191, 122, 141, 190, 62, 83, 200, 190, 157, 253, 1, 191, 131, 14, 33, 61, 253, 6, 194, 61, 112, 227, 49, 62, 250, 124, 142, 61, 6, 55, 219, 190, 17, 18, 48, 190, 200, 9, 123, 62, 217, 198, 138, 190, 82, 156, 98, 62, 43, 244, 118, 190, 252, 168, 134, 190, 180, 102, 156, 190, 84, 132, 241, 61, 104, 157, 182, 62, 120, 104, 212, 62, 234, 151, 233, 61, 141, 93, 61, 62, 233, 208, 146, 62, 137, 69, 154, 61, 255, 59, 134, 62, 229, 35, 13, 190, 154, 8, 152, 187, 160, 161, 244, 190, 170, 83, 49, 62, 149, 119, 33, 61, 255, 52, 228, 189, 172, 237, 145, 61, 121, 30, 35, 62, 67, 26, 70, 191, 91, 4, 42, 190, 139, 222, 34, 60, 130, 26, 76, 191, 252, 148, 136, 62, 37, 166, 131, 62, 230, 172, 173, 189, 155, 226, 207, 190, 66, 247, 188, 61, 180, 95, 208, 190, 222, 30, 190, 62, 202, 48, 105, 191, 6, 179, 46, 62, 197, 220, 38, 191, 149, 224, 130, 190, 43, 56, 34, 190, 6, 251, 71, 191, 25, 159, 122, 62, 220, 218, 231, 62, 250, 244, 136, 188, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 126, 29, 82, 191, 191, 178, 149, 61, 63, 72, 42, 190, 148, 124, 192, 187, 231, 43, 105, 62, 35, 3, 35, 190, 10, 93, 133, 62, 214, 60, 221, 190, 9, 29, 184, 62, 196, 104, 130, 190, 160, 40, 233, 190, 103, 247, 101, 62, 214, 193, 206, 190, 87, 230, 88, 191, 104, 67, 40, 192, 13, 14, 167, 190, 129, 61, 174, 60, 148, 203, 12, 62, 116, 1, 184, 62, 153, 85, 90, 61, 107, 211, 39, 192, 255, 103, 133, 62, 102, 248, 36, 62, 97, 77, 122, 190, 83, 38, 149, 62, 143, 243, 122, 190, 59, 82, 236, 190, 237, 100, 218, 190, 184, 169, 160, 61, 4, 237, 226, 189, 153, 91, 26, 62, 58, 124, 165, 62, 174, 110, 20, 190, 125, 2, 66, 191, 142, 195, 115, 62, 210, 198, 235, 190, 217, 177, 157, 190, 158, 2, 130, 62, 231, 210, 31, 190, 222, 30, 217, 190, 119, 24, 206, 189, 236, 5, 33, 62, 30, 20, 139, 188, 99, 205, 179, 189, 63, 176, 57, 62, 201, 8, 180, 189, 246, 161, 94, 191, 234, 171, 30, 62, 65, 107, 169, 189, 154, 200, 180, 60, 182, 170, 182, 190, 34, 176, 61, 190, 253, 111, 79, 191, 40, 10, 158, 190, 32, 120, 115, 62, 68, 91, 28, 62, 82, 99, 77, 190, 43, 83, 126, 62, 1, 252, 25, 189, 45, 125, 145, 190, 243, 231, 164, 61, 67, 14, 14, 189, 193, 234, 241, 189, 53, 136, 128, 190, 105, 220, 217, 189, 112, 152, 183, 191, 77, 189, 228, 62, 108, 7, 143, 191, 78, 118, 156, 61, 102, 234, 25, 62, 236, 116, 187, 61, 42, 250, 219, 190, 169, 235, 56, 62, 63, 9, 39, 61, 209, 142, 151, 190, 255, 186, 190, 60, 159, 199, 63, 61, 46, 12, 164, 190, 71, 185, 232, 191, 186, 191, 143, 62, 103, 77, 142, 190, 117, 220, 196, 189, 62, 119, 174, 60, 170, 163, 152, 189, 17, 195, 232, 191, 173, 113, 56, 189, 223, 27, 84, 61, 228, 190, 146, 62, 128, 193, 208, 61, 163, 177, 169, 62, 133, 207, 192, 61, 63, 9, 8, 191, 202, 205, 173, 62, 113, 38, 83, 188, 204, 74, 185, 190, 64, 248, 50, 62, 245, 94, 247, 62, 220, 244, 166, 190, 115, 252, 218, 190, 118, 93, 36, 190, 52, 64, 13, 191, 124, 159, 159, 189, 175, 245, 36, 61, 160, 162, 158, 62, 29, 110, 19, 190, 251, 188, 96, 62, 83, 222, 163, 62, 79, 188, 84, 189, 3, 186, 50, 62, 67, 209, 139, 62, 244, 177, 17, 62, 144, 237, 52, 62, 140, 135, 191, 190, 44, 249, 5, 61, 217, 164, 184, 190, 192, 226, 105, 190, 64, 26, 90, 62, 172, 185, 13, 62, 221, 121, 209, 61, 213, 146, 145, 62, 124, 173, 24, 191, 85, 43, 222, 61, 92, 255, 196, 61, 102, 141, 228, 61, 240, 215, 98, 62, 240, 121, 212, 190, 226, 45, 218, 190, 137, 113, 20, 62, 32, 60, 78, 190, 218, 59, 165, 62, 213, 244, 160, 188, 241, 216, 209, 61, 50, 140, 109, 62, 63, 220, 2, 62, 8, 233, 105, 62, 194, 234, 205, 190, 243, 83, 152, 62, 30, 181, 160, 190, 95, 225, 250, 189, 196, 176, 179, 62, 59, 242, 138, 189, 97, 176, 96, 190, 40, 237, 174, 190, 117, 165, 225, 190, 92, 211, 35, 62, 7, 133, 174, 62, 208, 62, 150, 62, 64, 27, 52, 62, 1, 155, 171, 190, 28, 128, 102, 189, 18, 162, 175, 62, 101, 2, 168, 190, 139, 72, 129, 60, 196, 250, 145, 189, 117, 53, 7, 190, 50, 146, 128, 190, 39, 177, 160, 190, 54, 17, 66, 62, 127, 144, 68, 62, 34, 119, 143, 62, 41, 16, 10, 191, 227, 186, 182, 62, 214, 9, 133, 61, 115, 21, 166, 187, 228, 15, 209, 61, 189, 76, 17, 62, 103, 204, 222, 61, 185, 154, 112, 190, 242, 147, 177, 62, 69, 235, 3, 190, 215, 36, 213, 61, 174, 158, 143, 62, 168, 32, 152, 189, 83, 126, 169, 190, 146, 38, 7, 61, 18, 249, 32, 191, 185, 62, 6, 62, 101, 190, 61, 62, 143, 72, 130, 62, 71, 101, 70, 62, 68, 133, 177, 190, 124, 229, 201, 60, 76, 119, 8, 62, 151, 168, 187, 190, 210, 109, 43, 189, 96, 31, 12, 190, 175, 83, 236, 189, 226, 246, 192, 189, 57, 199, 76, 61, 158, 75, 2, 63, 59, 188, 18, 62, 146, 97, 97, 62, 3, 86, 87, 63, 26, 161, 205, 190, 76, 147, 199, 190, 181, 203, 61, 190, 185, 72, 135, 190, 187, 252, 154, 189, 116, 40, 164, 61, 27, 250, 206, 62, 221, 166, 3, 191, 188, 244, 152, 62, 215, 159, 104, 62, 127, 37, 205, 189, 158, 129, 153, 62, 114, 121, 203, 62, 83, 30, 121, 190, 61, 75, 153, 62, 100, 228, 208, 59, 181, 190, 185, 61, 208, 52, 165, 190, 191, 50, 123, 190, 117, 1, 88, 60, 215, 71, 74, 62, 135, 193, 252, 189, 94, 30, 210, 62, 186, 24, 0, 191, 217, 211, 106, 62, 165, 220, 173, 62, 5, 141, 160, 62, 244, 62, 98, 62, 35, 226, 49, 191, 177, 241, 29, 191, 137, 240, 192, 61, 95, 175, 69, 62, 81, 171, 9, 60, 239, 105, 143, 189, 134, 19, 62, 190, 218, 186, 8, 190, 223, 15, 22, 187, 225, 123, 137, 190, 181, 34, 141, 190, 190, 137, 11, 61, 199, 143, 219, 61, 8, 216, 208, 188, 157, 168, 220, 190, 92, 172, 177, 61, 243, 147, 228, 187, 153, 133, 58, 189, 45, 160, 79, 62, 96, 170, 168, 190, 200, 180, 11, 61, 221, 241, 204, 190, 93, 244, 34, 190, 243, 254, 53, 188, 157, 199, 91, 62, 142, 35, 44, 61, 160, 183, 23, 62, 181, 36, 169, 61, 203, 169, 250, 61, 247, 239, 47, 190, 89, 129, 125, 61, 194, 63, 3, 62, 34, 250, 137, 61, 170, 21, 127, 60, 24, 214, 6, 191, 192, 8, 155, 61, 221, 24, 207, 189, 63, 45, 24, 190, 190, 187, 105, 62, 193, 50, 79, 189, 110, 132, 221, 60, 70, 44, 129, 189, 15, 21, 80, 62, 217, 80, 224, 190, 0, 69, 169, 62, 3, 232, 138, 61, 36, 248, 248, 60, 23, 253, 132, 62, 16, 246, 85, 62, 208, 223, 69, 190, 205, 147, 246, 61, 62, 160, 234, 189, 26, 180, 139, 62, 22, 242, 131, 190, 139, 225, 50, 190, 175, 0, 156, 190, 167, 35, 1, 61, 77, 128, 24, 62, 217, 237, 11, 62, 214, 91, 42, 191, 233, 120, 160, 62, 33, 108, 207, 62, 100, 181, 67, 61, 163, 59, 187, 60, 121, 31, 14, 191, 142, 66, 150, 190, 203, 135, 10, 190, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 10, 23, 62, 160, 174, 72, 61, 44, 71, 130, 61, 62, 242, 247, 189, 57, 136, 171, 188, 199, 182, 71, 62, 151, 64, 151, 62, 18, 203, 60, 189, 174, 43, 233, 61, 206, 73, 148, 189, 69, 221, 133, 62, 108, 11, 27, 188, 108, 168, 170, 62, 108, 4, 4, 62, 115, 44, 5, 61, 204, 240, 88, 62, 255, 193, 141, 190, 177, 142, 77, 190, 42, 188, 186, 61, 123, 110, 25, 62, 16, 52, 9, 190, 220, 85, 115, 61, 86, 207, 162, 62, 157, 103, 207, 61, 168, 71, 128, 61, 180, 99, 126, 61, 75, 160, 137, 62, 41, 218, 139, 60, 129, 5, 198, 188, 12, 0, 118, 190, 129, 166, 19, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 46, 214, 189, 174, 211, 218, 62, 156, 78, 203, 190, 220, 104, 185, 190, 201, 42, 128, 190, 86, 184, 17, 190, 234, 72, 27, 189, 78, 22, 45, 191, 114, 214, 217, 190, 11, 4, 107, 191, 193, 140, 136, 191, 205, 28, 156, 62, 184, 77, 7, 62, 11, 213, 101, 191, 48, 237, 71, 61, 252, 118, 216, 62, 102, 77, 77, 190, 36, 27, 66, 61, 213, 96, 208, 190, 57, 109, 38, 63, 195, 140, 22, 191, 132, 86, 180, 61, 241, 185, 132, 63, 227, 58, 211, 62, 138, 230, 25, 63, 229, 111, 209, 190, 231, 4, 245, 62, 160, 244, 179, 62, 93, 255, 21, 191, 47, 39, 198, 61, 162, 15, 192, 190, 40, 37, 91, 61, 13, 118, 19, 190, 179, 222, 67, 62, 31, 190, 232, 189, 186, 119, 127, 189, 127, 136, 20, 190, 178, 152, 190, 190, 59, 177, 195, 190, 168, 142, 221, 189, 61, 32, 59, 62, 245, 89, 208, 61, 224, 119, 174, 61, 196, 125, 251, 189, 43, 16, 157, 190, 221, 6, 205, 187, 78, 248, 226, 61, 207, 77, 171, 62, 69, 37, 89, 62, 149, 243, 150, 188, 126, 254, 103, 62, 105, 175, 188, 62, 245, 168, 3, 61, 156, 198, 42, 61, 10, 193, 237, 61, 115, 56, 37, 62, 36, 225, 6, 190, 128, 197, 186, 60, 70, 94, 166, 190, 193, 132, 136, 61, 3, 84, 11, 63, 61, 126, 132, 62, 184, 226, 163, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 102, 63, 189, 79, 153, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {116, 158, 49, 191, 90, 80, 1, 190, 3, 243, 146, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 170, 221, 63, 84, 108, 50, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}