// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 59, 27, 191, 220, 199, 156, 191, 65, 175, 75, 190, 56, 213, 72, 63, 216, 194, 34, 191, 72, 201, 83, 190, 78, 210, 123, 190, 52, 188, 62, 191, 248, 178, 7, 191, 104, 104, 62, 63, 191, 142, 149, 190, 152, 93, 5, 190, 9, 81, 22, 191, 108, 192, 39, 63, 73, 87, 200, 62, 56, 133, 145, 62, 156, 0, 52, 62, 132, 125, 219, 190, 72, 59, 45, 190, 0, 247, 101, 62, 190, 197, 77, 61, 175, 60, 90, 62, 18, 86, 169, 190, 182, 224, 209, 62, 207, 28, 195, 190, 60, 156, 204, 63, 57, 59, 170, 62, 80, 138, 35, 63, 218, 73, 28, 63, 20, 94, 181, 62, 32, 65, 117, 62, 213, 120, 155, 62, 128, 104, 134, 190, 90, 2, 68, 62, 3, 25, 248, 190, 83, 58, 70, 63, 152, 180, 3, 63, 236, 74, 234, 62, 102, 140, 229, 62, 135, 215, 201, 189, 58, 141, 129, 190, 55, 138, 172, 190, 73, 51, 248, 190, 52, 159, 144, 191, 203, 132, 161, 190, 142, 168, 236, 62, 132, 197, 85, 63, 48, 182, 60, 62, 203, 75, 244, 189, 75, 11, 246, 190, 61, 83, 188, 61, 103, 22, 80, 63, 63, 221, 83, 190, 13, 213, 28, 190, 194, 4, 243, 189, 86, 61, 18, 190, 129, 132, 222, 62, 218, 226, 190, 190, 225, 189, 41, 63, 248, 235, 3, 63, 182, 222, 169, 190, 142, 53, 139, 191, 205, 42, 179, 190, 105, 187, 41, 63, 234, 231, 157, 62, 152, 131, 68, 190, 216, 250, 83, 63, 146, 229, 93, 191, 145, 147, 255, 189, 232, 227, 61, 63, 82, 107, 133, 63, 229, 226, 114, 62, 7, 159, 96, 63, 206, 180, 244, 190, 148, 59, 155, 190, 30, 6, 250, 62, 203, 218, 86, 63, 70, 85, 128, 62, 47, 57, 255, 62, 255, 125, 189, 62, 171, 176, 190, 62, 244, 248, 7, 190, 31, 89, 16, 191, 200, 85, 205, 190, 179, 216, 247, 190, 180, 101, 134, 63, 221, 149, 16, 62, 90, 203, 246, 62, 153, 197, 221, 190, 186, 227, 50, 190, 113, 95, 162, 62, 134, 4, 163, 191, 166, 37, 138, 190, 25, 9, 188, 190, 133, 6, 164, 190, 43, 229, 58, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 51, 177, 190, 216, 182, 109, 190, 253, 68, 144, 190, 2, 197, 141, 190, 96, 20, 11, 191, 9, 143, 22, 190, 59, 35, 17, 63, 152, 119, 134, 61, 67, 25, 146, 190, 130, 67, 64, 191, 103, 157, 94, 62, 224, 141, 216, 62, 50, 204, 165, 190, 241, 244, 189, 190, 201, 27, 109, 190, 207, 247, 180, 189, 47, 38, 152, 62, 177, 221, 169, 189, 42, 176, 246, 61, 235, 36, 141, 190, 67, 200, 120, 189, 72, 49, 80, 189, 80, 53, 31, 63, 95, 150, 248, 189, 201, 137, 88, 191, 35, 30, 43, 190, 201, 134, 80, 191, 156, 122, 243, 190, 165, 23, 38, 63, 241, 98, 159, 190, 252, 32, 217, 61, 234, 203, 3, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 206, 138, 62, 250, 51, 89, 62, 207, 219, 82, 190, 7, 151, 31, 190, 135, 120, 135, 190, 174, 249, 132, 190, 18, 27, 160, 60, 25, 32, 29, 189, 59, 131, 34, 62, 193, 94, 33, 62, 67, 178, 11, 61, 200, 163, 233, 188, 138, 33, 208, 61, 143, 100, 255, 189, 96, 213, 249, 189, 193, 196, 14, 62, 155, 244, 166, 190, 252, 244, 63, 62, 249, 69, 12, 191, 92, 138, 82, 189, 251, 32, 29, 190, 192, 76, 74, 61, 99, 72, 40, 62, 7, 232, 101, 60, 178, 75, 14, 191, 83, 160, 167, 61, 101, 92, 42, 62, 67, 131, 223, 189, 60, 252, 187, 61, 2, 108, 163, 190, 25, 67, 250, 189, 84, 82, 179, 187, 133, 104, 124, 62, 121, 55, 95, 190, 44, 1, 107, 62, 167, 110, 55, 190, 144, 149, 18, 190, 166, 110, 104, 62, 110, 221, 250, 189, 16, 43, 216, 61, 162, 9, 118, 190, 189, 178, 220, 62, 66, 206, 110, 62, 127, 26, 82, 190, 109, 179, 90, 62, 113, 106, 3, 63, 13, 246, 192, 62, 13, 15, 15, 62, 213, 205, 130, 62, 219, 186, 98, 190, 119, 58, 38, 189, 163, 226, 128, 190, 22, 61, 212, 62, 172, 175, 3, 62, 55, 1, 42, 190, 148, 194, 32, 62, 154, 68, 147, 62, 213, 143, 96, 61, 72, 112, 243, 62, 72, 184, 68, 62, 66, 12, 39, 189, 17, 46, 43, 62, 70, 115, 249, 59, 105, 86, 70, 190, 248, 163, 44, 62, 106, 225, 243, 187, 56, 62, 145, 190, 76, 24, 185, 61, 147, 93, 251, 190, 166, 51, 129, 60, 90, 182, 119, 62, 237, 124, 41, 62, 118, 254, 184, 189, 53, 95, 154, 62, 185, 133, 107, 62, 57, 24, 109, 189, 176, 76, 115, 62, 164, 188, 187, 62, 233, 144, 96, 190, 156, 118, 128, 62, 76, 51, 217, 189, 79, 215, 109, 62, 53, 229, 119, 190, 255, 131, 128, 190, 236, 129, 93, 190, 181, 19, 27, 62, 163, 52, 98, 189, 31, 73, 204, 188, 228, 70, 67, 191, 208, 222, 131, 62, 103, 223, 61, 190, 25, 229, 177, 61, 233, 205, 37, 62, 4, 24, 61, 191, 120, 78, 201, 190, 35, 87, 99, 190, 243, 30, 73, 191, 56, 8, 187, 62, 179, 145, 61, 60, 85, 115, 58, 189, 245, 200, 122, 62, 34, 181, 88, 61, 200, 45, 4, 190, 204, 134, 191, 61, 4, 212, 158, 62, 54, 228, 194, 60, 49, 76, 189, 189, 62, 38, 132, 62, 154, 207, 217, 61, 79, 77, 214, 59, 140, 81, 175, 186, 219, 76, 18, 62, 30, 181, 159, 61, 146, 161, 17, 62, 107, 116, 188, 62, 215, 43, 25, 61, 166, 139, 28, 62, 104, 152, 227, 190, 90, 235, 84, 189, 184, 156, 164, 189, 34, 38, 17, 62, 239, 182, 195, 61, 203, 138, 58, 62, 104, 35, 180, 190, 93, 136, 233, 188, 27, 208, 242, 62, 178, 37, 152, 62, 10, 75, 161, 189, 217, 68, 130, 62, 171, 11, 200, 189, 86, 7, 16, 190, 66, 248, 140, 188, 232, 11, 66, 190, 246, 71, 146, 61, 10, 90, 54, 62, 167, 151, 46, 61, 197, 128, 64, 190, 237, 69, 86, 62, 181, 165, 65, 62, 234, 42, 98, 189, 254, 224, 27, 61, 34, 216, 170, 62, 66, 88, 95, 61, 241, 32, 193, 62, 21, 228, 117, 190, 14, 165, 152, 60, 233, 219, 134, 190, 21, 87, 168, 190, 175, 164, 209, 188, 169, 116, 137, 189, 83, 170, 18, 62, 149, 150, 30, 62, 221, 111, 12, 191, 124, 46, 44, 62, 166, 232, 97, 61, 147, 251, 78, 61, 15, 72, 18, 62, 34, 28, 8, 191, 23, 99, 8, 190, 164, 67, 239, 61, 227, 221, 0, 62, 90, 54, 84, 61, 228, 54, 234, 61, 132, 47, 252, 189, 4, 216, 183, 190, 17, 25, 28, 189, 120, 142, 145, 61, 156, 239, 29, 189, 150, 225, 129, 191, 136, 103, 178, 190, 0, 207, 211, 61, 0, 99, 177, 190, 253, 67, 87, 190, 31, 58, 191, 62, 61, 96, 33, 61, 236, 108, 17, 189, 248, 114, 138, 189, 15, 173, 204, 188, 28, 25, 130, 191, 247, 16, 220, 190, 130, 116, 251, 61, 0, 72, 157, 62, 239, 196, 102, 62, 31, 233, 204, 188, 247, 39, 204, 190, 166, 128, 16, 190, 21, 63, 19, 62, 92, 12, 136, 189, 69, 219, 136, 61, 81, 223, 199, 190, 63, 252, 229, 59, 110, 99, 104, 190, 173, 30, 135, 62, 250, 189, 216, 62, 53, 57, 53, 62, 174, 171, 208, 62, 80, 55, 137, 61, 115, 1, 100, 62, 211, 197, 137, 61, 161, 137, 4, 62, 56, 222, 240, 189, 237, 125, 48, 189, 19, 62, 160, 61, 110, 200, 122, 62, 134, 222, 3, 62, 54, 5, 11, 62, 129, 186, 20, 61, 222, 249, 181, 61, 69, 198, 130, 62, 190, 184, 82, 62, 29, 43, 20, 189, 161, 181, 163, 189, 164, 7, 227, 61, 197, 238, 125, 62, 254, 51, 143, 62, 145, 2, 54, 62, 126, 138, 14, 62, 120, 23, 9, 62, 41, 37, 155, 189, 83, 32, 73, 62, 182, 227, 92, 189, 37, 93, 66, 188, 41, 42, 183, 188, 247, 102, 144, 62, 118, 155, 247, 61, 68, 53, 199, 190, 115, 10, 67, 60, 161, 118, 4, 190, 53, 150, 45, 189, 170, 1, 46, 62, 153, 242, 115, 61, 179, 56, 63, 189, 42, 104, 144, 62, 57, 15, 222, 62, 131, 80, 96, 62, 49, 190, 164, 190, 34, 54, 64, 190, 3, 40, 100, 61, 106, 138, 206, 189, 129, 133, 45, 189, 26, 220, 51, 191, 64, 27, 55, 186, 232, 194, 210, 190, 109, 200, 40, 60, 119, 155, 167, 188, 93, 185, 49, 62, 231, 39, 26, 190, 36, 92, 137, 60, 251, 86, 19, 191, 166, 245, 92, 190, 157, 2, 179, 188, 242, 127, 6, 190, 109, 196, 127, 62, 187, 72, 56, 191, 136, 158, 48, 191, 93, 223, 68, 190, 232, 163, 6, 61, 203, 185, 250, 60, 242, 107, 12, 188, 132, 190, 95, 61, 195, 19, 12, 191, 183, 138, 11, 61, 161, 91, 49, 62, 151, 39, 139, 62, 141, 60, 105, 190, 207, 235, 227, 62, 184, 92, 229, 189, 158, 204, 192, 189, 1, 242, 138, 62, 189, 44, 104, 61, 135, 123, 154, 190, 109, 15, 134, 62, 218, 79, 21, 190, 124, 66, 157, 188, 146, 6, 248, 189, 84, 86, 234, 190, 221, 37, 19, 61, 87, 139, 144, 62, 79, 95, 252, 188, 127, 238, 169, 62, 58, 79, 52, 191, 32, 116, 61, 62, 122, 246, 37, 190, 62, 187, 243, 60, 241, 51, 116, 62, 234, 108, 23, 191, 120, 224, 19, 191, 72, 8, 147, 190, 98, 94, 212, 62, 181, 105, 161, 189, 205, 123, 232, 61, 221, 126, 154, 190, 245, 166, 47, 191, 78, 110, 88, 62, 70, 195, 223, 61, 22, 140, 9, 63, 149, 205, 55, 191, 63, 41, 82, 190, 11, 20, 68, 189, 220, 59, 135, 61, 170, 111, 124, 190, 1, 72, 157, 60, 209, 58, 87, 62, 195, 87, 118, 60, 179, 238, 85, 62, 153, 126, 226, 190, 94, 236, 17, 190, 15, 83, 78, 191, 73, 139, 36, 62, 55, 154, 74, 191, 27, 131, 83, 190, 42, 183, 173, 189, 144, 226, 85, 190, 37, 79, 7, 190, 116, 152, 239, 61, 216, 187, 108, 62, 41, 183, 2, 62, 177, 33, 80, 190, 135, 33, 139, 189, 155, 11, 219, 62, 160, 65, 188, 62, 89, 216, 152, 189, 8, 172, 69, 190, 243, 203, 6, 190, 76, 27, 140, 191, 152, 222, 216, 60, 97, 13, 189, 60, 138, 97, 34, 190, 36, 93, 40, 191, 68, 137, 144, 189, 186, 238, 70, 62, 184, 166, 0, 191, 38, 139, 177, 61, 176, 125, 67, 62, 82, 111, 149, 61, 195, 203, 229, 60, 232, 140, 70, 61, 109, 172, 193, 189, 153, 40, 65, 191, 172, 107, 133, 191, 68, 49, 170, 60, 85, 251, 66, 61, 82, 171, 93, 189, 23, 126, 18, 62, 6, 145, 64, 191, 136, 114, 47, 190, 62, 52, 144, 61, 104, 248, 89, 61, 13, 123, 98, 62, 251, 178, 71, 191, 144, 64, 43, 190, 158, 168, 8, 62, 49, 188, 223, 190, 82, 233, 155, 61, 112, 58, 23, 62, 185, 4, 160, 62, 182, 9, 126, 189, 128, 169, 117, 62, 44, 15, 144, 189, 141, 225, 15, 190, 51, 130, 26, 62, 24, 232, 241, 190, 213, 127, 229, 189, 35, 175, 40, 62, 19, 7, 50, 189, 118, 160, 149, 61, 141, 106, 204, 190, 213, 50, 216, 190, 27, 114, 249, 189, 155, 26, 89, 62, 241, 76, 92, 62, 53, 147, 43, 62, 95, 8, 3, 191, 76, 149, 29, 62, 230, 77, 21, 62, 215, 162, 196, 190, 35, 28, 97, 62, 173, 7, 5, 190, 225, 121, 128, 190, 225, 237, 146, 61, 147, 189, 54, 187, 197, 161, 29, 62, 48, 131, 137, 62, 210, 183, 240, 61, 105, 237, 23, 191, 139, 136, 234, 61, 58, 116, 97, 189, 92, 182, 149, 189, 108, 7, 2, 190, 243, 35, 121, 189, 43, 77, 197, 61, 166, 203, 154, 190, 33, 243, 30, 190, 49, 164, 248, 190, 141, 145, 252, 61, 142, 18, 170, 62, 167, 207, 103, 190, 29, 26, 152, 190, 245, 34, 25, 191, 98, 27, 140, 190, 217, 185, 56, 62, 57, 87, 128, 62, 147, 130, 237, 62, 158, 192, 51, 61, 221, 194, 30, 191, 27, 139, 187, 61, 216, 32, 65, 62, 36, 70, 228, 190, 17, 73, 0, 189, 107, 180, 101, 190, 122, 122, 37, 189, 220, 70, 150, 190, 40, 71, 173, 190, 145, 139, 212, 189, 205, 29, 189, 189, 0, 54, 78, 61, 130, 126, 64, 61, 28, 210, 66, 187, 123, 27, 141, 191, 71, 199, 254, 189, 250, 92, 139, 62, 140, 151, 195, 189, 162, 148, 163, 62, 210, 167, 111, 61, 46, 92, 207, 62, 11, 80, 23, 191, 57, 188, 63, 190, 233, 28, 134, 189, 24, 61, 129, 190, 242, 202, 46, 191, 30, 67, 43, 189, 178, 213, 13, 191, 103, 56, 5, 190, 2, 226, 73, 190, 174, 246, 108, 189, 214, 154, 38, 62, 240, 225, 5, 62, 125, 156, 10, 190, 216, 64, 98, 191, 100, 134, 236, 190, 198, 218, 229, 187, 51, 251, 24, 191, 73, 132, 205, 190, 40, 12, 16, 191, 20, 59, 148, 62, 225, 66, 122, 60, 13, 43, 133, 191, 11, 124, 0, 62, 226, 5, 66, 189, 125, 193, 7, 62, 195, 31, 151, 61, 105, 117, 171, 189, 221, 205, 64, 188, 123, 158, 211, 60, 235, 83, 194, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 200, 111, 33, 190, 147, 130, 21, 190, 199, 92, 141, 61, 123, 174, 140, 60, 251, 195, 49, 190, 180, 182, 29, 190, 163, 15, 0, 62, 98, 98, 162, 187, 148, 127, 13, 189, 196, 15, 219, 61, 177, 134, 28, 190, 202, 147, 100, 189, 9, 147, 44, 190, 200, 240, 224, 189, 126, 158, 223, 189, 227, 34, 87, 189, 27, 253, 196, 189, 79, 66, 146, 61, 184, 97, 70, 60, 185, 178, 179, 189, 101, 76, 96, 189, 48, 122, 97, 190, 17, 254, 37, 190, 32, 120, 222, 62, 245, 162, 230, 188, 124, 154, 3, 63, 194, 148, 1, 190, 203, 224, 120, 62, 226, 34, 134, 190, 158, 98, 243, 61, 210, 176, 11, 62, 214, 138, 188, 189, 237, 182, 13, 62, 69, 134, 52, 61, 80, 207, 5, 188, 70, 227, 17, 189, 222, 74, 235, 189, 95, 94, 129, 191, 127, 159, 222, 62, 18, 131, 98, 62, 90, 195, 88, 62, 148, 179, 249, 189, 83, 221, 52, 188, 230, 4, 13, 186, 252, 238, 80, 62, 224, 239, 58, 191, 58, 121, 139, 62, 131, 52, 56, 191, 54, 158, 152, 190, 117, 19, 148, 189, 12, 47, 13, 191, 109, 152, 78, 62, 104, 163, 176, 62, 225, 68, 83, 62, 80, 187, 121, 188, 141, 142, 68, 190, 169, 197, 138, 191, 104, 34, 215, 61, 126, 98, 190, 61, 6, 198, 153, 61, 210, 23, 248, 61, 77, 89, 97, 60, 75, 95, 130, 61, 218, 245, 217, 189, 216, 192, 0, 62, 157, 37, 195, 61, 54, 253, 65, 61, 135, 204, 66, 60, 157, 183, 44, 62, 230, 210, 160, 190, 93, 219, 135, 61, 16, 131, 247, 189, 157, 41, 11, 62, 106, 14, 38, 62, 55, 223, 91, 62, 152, 215, 155, 190, 15, 121, 232, 190, 25, 228, 132, 189, 107, 56, 230, 61, 251, 222, 143, 190, 71, 53, 232, 61, 131, 233, 22, 190, 51, 159, 65, 61, 88, 187, 114, 61, 34, 135, 77, 191, 48, 6, 191, 60, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 167, 170, 239, 190, 195, 119, 119, 62, 40, 56, 100, 62, 252, 65, 152, 189, 178, 178, 155, 61, 222, 138, 217, 61, 169, 215, 198, 189, 248, 30, 214, 61, 157, 12, 149, 61, 20, 37, 238, 61, 58, 182, 44, 190, 139, 213, 178, 62, 214, 228, 220, 189, 208, 43, 224, 189, 24, 27, 139, 62, 231, 29, 29, 190, 208, 98, 34, 61, 74, 215, 121, 189, 143, 147, 211, 62, 145, 69, 226, 61, 83, 85, 141, 62, 28, 149, 151, 190, 219, 220, 149, 61, 152, 163, 2, 62, 110, 103, 253, 188, 64, 221, 1, 61, 16, 188, 13, 62, 125, 222, 152, 190, 161, 240, 76, 190, 231, 49, 189, 62, 241, 133, 172, 62, 48, 20, 147, 61, 98, 47, 24, 191, 156, 71, 142, 62, 161, 76, 59, 61, 35, 254, 204, 62, 214, 137, 138, 62, 61, 243, 80, 62, 68, 104, 5, 62, 32, 160, 249, 189, 163, 142, 6, 63, 237, 1, 198, 190, 47, 110, 189, 190, 215, 101, 168, 61, 132, 208, 131, 190, 89, 108, 140, 190, 181, 141, 6, 191, 175, 246, 252, 190, 58, 135, 76, 60, 22, 132, 191, 61, 50, 203, 46, 62, 59, 34, 171, 61, 221, 102, 18, 191, 242, 248, 43, 190, 206, 56, 103, 62, 123, 192, 134, 190, 74, 243, 110, 62, 63, 238, 107, 190, 159, 220, 145, 190, 157, 54, 168, 190, 240, 219, 39, 62, 2, 8, 165, 62, 243, 187, 168, 62, 148, 228, 186, 61, 225, 223, 55, 62, 40, 200, 106, 62, 228, 250, 26, 61, 136, 174, 9, 62, 21, 222, 157, 190, 201, 138, 159, 188, 86, 201, 246, 190, 104, 117, 136, 62, 149, 119, 33, 61, 228, 212, 138, 190, 118, 20, 3, 61, 7, 103, 128, 62, 96, 51, 104, 191, 95, 147, 66, 190, 161, 244, 157, 187, 74, 184, 104, 191, 38, 101, 167, 62, 192, 206, 23, 62, 153, 175, 137, 188, 111, 161, 55, 191, 90, 236, 180, 61, 14, 244, 236, 190, 197, 27, 200, 62, 240, 17, 135, 191, 236, 32, 243, 61, 150, 34, 74, 191, 0, 93, 11, 191, 79, 162, 69, 190, 27, 79, 130, 191, 202, 86, 45, 62, 180, 72, 241, 62, 89, 106, 91, 60, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 98, 167, 121, 191, 244, 100, 140, 61, 171, 140, 163, 190, 117, 133, 164, 188, 89, 247, 104, 62, 129, 221, 90, 190, 168, 66, 133, 62, 240, 112, 213, 190, 72, 165, 194, 62, 52, 4, 164, 190, 18, 132, 233, 190, 80, 162, 107, 62, 0, 126, 211, 190, 82, 8, 102, 191, 56, 178, 57, 192, 175, 208, 169, 190, 255, 210, 242, 60, 139, 207, 10, 62, 148, 153, 183, 62, 6, 140, 89, 61, 88, 234, 42, 192, 55, 163, 128, 62, 43, 110, 40, 62, 253, 197, 130, 190, 187, 87, 103, 62, 241, 99, 129, 190, 1, 127, 250, 190, 224, 8, 213, 190, 153, 155, 203, 61, 127, 227, 10, 190, 42, 252, 46, 62, 243, 134, 171, 62, 174, 110, 20, 190, 117, 112, 116, 191, 3, 33, 61, 62, 156, 176, 7, 191, 59, 249, 187, 190, 51, 165, 129, 62, 56, 172, 66, 190, 81, 73, 222, 190, 201, 239, 19, 190, 68, 254, 26, 62, 68, 113, 218, 188, 137, 8, 235, 189, 148, 192, 14, 62, 213, 79, 1, 190, 111, 186, 95, 191, 50, 255, 9, 62, 122, 181, 187, 189, 93, 73, 53, 61, 88, 165, 194, 190, 59, 76, 150, 190, 32, 250, 91, 191, 157, 119, 153, 190, 4, 54, 133, 62, 180, 19, 9, 62, 238, 81, 89, 190, 195, 192, 99, 62, 86, 244, 140, 189, 208, 227, 155, 190, 24, 127, 52, 61, 131, 113, 102, 189, 212, 228, 1, 190, 238, 200, 163, 190, 57, 53, 19, 190, 115, 240, 227, 191, 32, 203, 179, 62, 21, 98, 164, 191, 157, 244, 181, 61, 101, 157, 28, 62, 201, 219, 200, 61, 128, 103, 213, 190, 104, 45, 75, 62, 146, 4, 61, 61, 144, 154, 150, 190, 215, 231, 218, 60, 55, 41, 25, 61, 139, 255, 176, 190, 118, 226, 253, 191, 216, 13, 152, 62, 174, 115, 135, 190, 87, 110, 217, 189, 78, 179, 245, 60, 46, 176, 136, 189, 29, 190, 0, 192, 253, 96, 128, 189, 244, 56, 118, 188, 216, 72, 151, 62, 128, 193, 208, 61, 223, 57, 174, 62, 109, 202, 236, 61, 179, 9, 5, 191, 0, 193, 182, 62, 55, 105, 139, 188, 137, 238, 5, 191, 216, 118, 56, 62, 137, 46, 213, 62, 225, 141, 160, 190, 210, 33, 232, 190, 180, 134, 23, 190, 198, 168, 8, 191, 93, 117, 117, 189, 44, 223, 56, 61, 45, 252, 145, 62, 20, 99, 11, 190, 251, 30, 117, 62, 191, 154, 160, 62, 30, 56, 95, 189, 183, 8, 39, 62, 181, 133, 121, 62, 127, 10, 158, 61, 219, 47, 50, 62, 21, 142, 194, 190, 162, 45, 31, 61, 127, 198, 179, 190, 208, 172, 114, 190, 51, 64, 8, 62, 212, 95, 20, 62, 186, 8, 208, 61, 220, 155, 145, 62, 213, 122, 44, 191, 52, 5, 208, 61, 145, 162, 12, 61, 35, 254, 147, 61, 80, 59, 101, 62, 243, 52, 205, 190, 156, 33, 220, 190, 89, 177, 6, 62, 168, 10, 92, 190, 118, 36, 164, 62, 100, 79, 63, 61, 163, 61, 197, 61, 118, 214, 109, 62, 198, 221, 227, 61, 17, 195, 88, 62, 236, 3, 204, 190, 167, 24, 159, 62, 91, 164, 173, 190, 11, 179, 241, 189, 143, 143, 176, 62, 19, 2, 103, 189, 233, 215, 10, 190, 228, 83, 166, 190, 181, 202, 225, 190, 153, 223, 13, 62, 248, 106, 172, 62, 123, 94, 146, 62, 8, 90, 72, 62, 236, 133, 162, 190, 210, 107, 130, 189, 185, 184, 168, 62, 81, 174, 170, 190, 222, 111, 182, 61, 58, 40, 133, 189, 122, 240, 2, 190, 6, 69, 38, 190, 251, 196, 156, 190, 170, 61, 82, 62, 32, 48, 52, 62, 40, 132, 131, 62, 207, 152, 9, 191, 255, 21, 181, 62, 107, 101, 235, 61, 166, 119, 230, 187, 171, 180, 203, 61, 208, 216, 10, 62, 147, 222, 223, 61, 21, 57, 114, 190, 7, 214, 192, 62, 102, 60, 40, 190, 104, 155, 248, 61, 187, 229, 137, 62, 19, 106, 142, 189, 120, 158, 135, 190, 35, 128, 137, 61, 247, 200, 29, 191, 30, 146, 224, 61, 142, 249, 61, 62, 234, 86, 121, 62, 250, 52, 84, 62, 150, 230, 164, 190, 65, 198, 217, 60, 191, 146, 243, 61, 33, 159, 184, 190, 152, 11, 147, 61, 210, 180, 251, 189, 103, 137, 251, 189, 141, 53, 131, 188, 124, 8, 186, 61, 108, 250, 4, 63, 237, 144, 235, 61, 139, 30, 85, 62, 81, 170, 68, 63, 229, 81, 203, 190, 59, 51, 201, 190, 243, 15, 54, 190, 232, 154, 106, 190, 19, 152, 70, 189, 147, 44, 146, 61, 47, 111, 207, 62, 142, 44, 15, 191, 22, 2, 188, 62, 176, 67, 96, 62, 187, 204, 183, 189, 3, 50, 160, 62, 214, 217, 204, 62, 188, 28, 139, 190, 211, 55, 149, 62, 104, 234, 100, 60, 110, 71, 190, 61, 25, 43, 154, 190, 33, 196, 108, 190, 150, 27, 18, 189, 136, 27, 77, 62, 142, 204, 4, 190, 182, 110, 208, 62, 89, 232, 26, 191, 107, 114, 101, 62, 206, 162, 192, 62, 182, 221, 160, 62, 28, 82, 60, 62, 18, 150, 48, 191, 59, 249, 33, 191, 248, 4, 172, 61, 107, 214, 59, 62, 205, 28, 48, 60, 253, 199, 194, 189, 194, 234, 51, 190, 179, 24, 50, 190, 9, 206, 141, 187, 81, 127, 142, 190, 39, 246, 143, 190, 87, 171, 151, 188, 85, 73, 223, 61, 222, 188, 210, 188, 117, 237, 227, 190, 174, 1, 58, 61, 8, 221, 236, 188, 30, 22, 89, 189, 123, 147, 81, 62, 83, 86, 169, 190, 51, 8, 127, 61, 73, 104, 213, 190, 219, 127, 135, 190, 111, 182, 205, 188, 162, 179, 102, 62, 194, 141, 150, 61, 199, 107, 30, 62, 173, 37, 105, 61, 59, 83, 248, 61, 62, 248, 47, 190, 254, 19, 43, 61, 66, 90, 216, 61, 135, 8, 94, 61, 209, 90, 11, 60, 159, 32, 17, 191, 205, 83, 138, 61, 35, 124, 187, 189, 61, 34, 249, 189, 254, 48, 122, 62, 179, 140, 3, 189, 127, 136, 128, 61, 47, 109, 83, 189, 207, 139, 64, 62, 180, 154, 213, 190, 248, 6, 184, 62, 202, 38, 161, 61, 162, 137, 203, 60, 14, 18, 133, 62, 88, 134, 104, 62, 214, 41, 136, 190, 196, 129, 5, 62, 98, 56, 246, 189, 150, 206, 139, 62, 138, 194, 131, 190, 136, 82, 32, 190, 83, 101, 183, 190, 147, 52, 56, 61, 180, 88, 17, 62, 10, 251, 22, 62, 71, 18, 50, 191, 27, 42, 165, 62, 18, 168, 212, 62, 7, 224, 119, 61, 238, 170, 27, 61, 94, 24, 7, 191, 104, 230, 157, 190, 191, 27, 19, 190, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 1, 17, 62, 141, 83, 232, 60, 74, 14, 146, 61, 68, 65, 1, 190, 142, 159, 115, 188, 94, 177, 73, 62, 250, 146, 158, 62, 62, 0, 9, 189, 107, 237, 232, 61, 82, 245, 11, 189, 29, 102, 141, 62, 120, 120, 35, 188, 154, 71, 168, 62, 89, 206, 131, 61, 115, 44, 5, 61, 233, 229, 105, 62, 53, 61, 152, 190, 177, 142, 77, 190, 123, 10, 169, 61, 134, 111, 23, 62, 159, 189, 7, 190, 220, 85, 115, 61, 189, 1, 166, 62, 213, 51, 149, 61, 227, 128, 138, 61, 221, 226, 125, 61, 17, 93, 132, 62, 122, 141, 141, 60, 248, 36, 17, 189, 195, 132, 118, 190, 138, 113, 20, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 85, 158, 189, 1, 152, 242, 62, 138, 86, 189, 190, 206, 88, 180, 190, 244, 229, 91, 190, 244, 130, 233, 189, 77, 142, 24, 189, 78, 5, 49, 191, 147, 128, 203, 190, 81, 77, 112, 191, 200, 94, 138, 191, 101, 56, 138, 62, 140, 136, 235, 61, 240, 158, 104, 191, 48, 237, 71, 61, 107, 17, 255, 62, 140, 158, 51, 190, 36, 27, 66, 61, 4, 225, 205, 190, 29, 216, 26, 63, 44, 199, 39, 191, 132, 86, 180, 61, 182, 60, 137, 63, 13, 51, 253, 62, 148, 158, 31, 63, 49, 25, 187, 190, 172, 230, 227, 62, 79, 87, 161, 62, 28, 55, 6, 191, 207, 8, 198, 61, 21, 8, 187, 190, 40, 37, 91, 61, 205, 220, 56, 190, 106, 119, 56, 62, 112, 246, 237, 189, 111, 2, 111, 189, 154, 219, 31, 190, 47, 8, 209, 190, 210, 1, 200, 190, 34, 26, 8, 190, 131, 94, 94, 62, 151, 218, 173, 61, 103, 35, 175, 61, 62, 183, 40, 190, 146, 101, 178, 190, 188, 151, 40, 60, 78, 248, 226, 61, 38, 144, 165, 62, 131, 102, 84, 62, 149, 243, 150, 188, 226, 250, 97, 62, 173, 125, 191, 62, 137, 62, 177, 188, 156, 198, 42, 61, 16, 89, 21, 62, 59, 81, 92, 62, 178, 191, 15, 190, 149, 234, 35, 61, 160, 216, 173, 190, 198, 158, 40, 61, 113, 16, 29, 63, 229, 155, 151, 62, 225, 76, 145, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 70, 71, 189, 77, 0, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 21, 24, 63, 53, 156, 89, 63, 121, 101, 165, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 201, 28, 192, 223, 174, 40, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}