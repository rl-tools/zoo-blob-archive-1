// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 157, 37, 191, 172, 169, 115, 191, 137, 35, 77, 190, 143, 224, 71, 63, 14, 114, 29, 191, 160, 199, 95, 190, 198, 159, 99, 190, 105, 245, 19, 191, 145, 157, 17, 191, 32, 217, 61, 63, 236, 86, 55, 190, 44, 16, 68, 190, 155, 34, 243, 190, 34, 232, 17, 63, 144, 250, 234, 62, 250, 239, 148, 62, 248, 74, 141, 62, 51, 252, 226, 190, 113, 7, 2, 190, 242, 166, 57, 62, 15, 115, 116, 61, 21, 4, 115, 62, 101, 61, 154, 190, 103, 31, 220, 62, 35, 134, 230, 190, 212, 184, 187, 63, 237, 177, 181, 62, 241, 46, 8, 63, 111, 185, 0, 63, 104, 238, 191, 62, 221, 151, 97, 62, 128, 56, 120, 62, 56, 157, 131, 190, 122, 214, 136, 62, 222, 69, 29, 191, 242, 240, 71, 63, 78, 189, 251, 62, 192, 242, 207, 62, 227, 199, 246, 62, 88, 69, 132, 189, 118, 186, 130, 190, 241, 205, 185, 190, 254, 74, 242, 190, 253, 85, 70, 191, 26, 163, 139, 190, 166, 226, 234, 62, 195, 232, 72, 63, 80, 244, 60, 62, 246, 195, 162, 189, 186, 76, 0, 191, 181, 183, 3, 62, 74, 1, 95, 63, 44, 89, 96, 190, 148, 238, 39, 190, 19, 22, 13, 190, 11, 93, 129, 190, 13, 15, 235, 62, 255, 65, 129, 190, 141, 114, 25, 63, 213, 152, 8, 63, 247, 223, 112, 190, 158, 171, 124, 191, 191, 75, 122, 190, 189, 52, 47, 63, 227, 167, 30, 63, 183, 180, 98, 190, 116, 241, 97, 63, 119, 201, 87, 191, 129, 56, 233, 189, 181, 111, 61, 63, 242, 175, 127, 63, 3, 195, 109, 62, 222, 4, 54, 63, 60, 53, 218, 190, 233, 194, 164, 190, 33, 117, 246, 62, 91, 12, 68, 63, 44, 175, 140, 62, 14, 135, 158, 62, 190, 224, 165, 62, 149, 37, 198, 62, 187, 58, 1, 190, 171, 32, 2, 191, 129, 240, 228, 190, 224, 168, 244, 190, 114, 18, 132, 63, 3, 180, 10, 62, 142, 241, 246, 62, 128, 20, 222, 190, 54, 202, 43, 190, 86, 244, 171, 62, 245, 50, 153, 191, 14, 8, 148, 190, 89, 22, 181, 190, 134, 133, 159, 190, 4, 183, 88, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 92, 228, 190, 22, 198, 96, 190, 107, 104, 136, 190, 176, 73, 111, 190, 199, 12, 248, 190, 145, 83, 219, 189, 97, 160, 28, 63, 43, 210, 104, 61, 61, 180, 129, 190, 5, 177, 49, 191, 98, 26, 131, 62, 64, 191, 214, 62, 133, 131, 150, 190, 172, 86, 178, 190, 93, 225, 161, 190, 134, 14, 171, 189, 9, 192, 147, 62, 35, 133, 143, 61, 231, 135, 0, 61, 151, 36, 134, 190, 253, 249, 109, 189, 115, 151, 236, 188, 0, 232, 38, 63, 137, 38, 231, 189, 214, 171, 85, 191, 176, 141, 7, 190, 110, 133, 69, 191, 30, 193, 206, 190, 108, 42, 46, 63, 154, 181, 146, 190, 49, 179, 152, 61, 213, 97, 0, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 55, 155, 62, 209, 115, 87, 62, 168, 37, 131, 190, 32, 53, 27, 190, 232, 11, 131, 190, 72, 154, 150, 190, 48, 1, 204, 60, 167, 110, 35, 58, 81, 71, 206, 61, 50, 203, 224, 61, 124, 185, 89, 61, 169, 251, 144, 188, 157, 177, 213, 61, 24, 179, 239, 189, 151, 151, 4, 190, 23, 21, 21, 62, 188, 153, 142, 190, 64, 174, 89, 62, 188, 41, 17, 191, 183, 102, 150, 189, 217, 16, 235, 189, 26, 78, 125, 61, 166, 121, 69, 62, 252, 50, 179, 60, 114, 144, 230, 190, 39, 130, 183, 61, 71, 232, 57, 62, 11, 138, 171, 189, 107, 239, 179, 61, 176, 217, 164, 190, 21, 244, 232, 189, 2, 80, 190, 60, 128, 221, 29, 62, 100, 94, 43, 190, 154, 192, 81, 62, 84, 236, 16, 190, 201, 215, 37, 190, 75, 253, 122, 62, 97, 205, 179, 189, 236, 217, 218, 61, 202, 245, 77, 190, 2, 163, 128, 62, 134, 68, 132, 62, 234, 211, 30, 190, 119, 81, 74, 62, 18, 133, 247, 62, 100, 213, 151, 62, 169, 64, 46, 62, 59, 52, 120, 62, 191, 111, 59, 190, 116, 17, 154, 189, 85, 164, 100, 190, 148, 29, 178, 62, 227, 151, 50, 62, 83, 108, 220, 189, 9, 96, 65, 62, 39, 210, 18, 62, 99, 186, 134, 61, 30, 82, 84, 62, 230, 52, 30, 62, 175, 181, 140, 188, 138, 116, 48, 62, 127, 183, 206, 60, 148, 132, 120, 190, 237, 62, 31, 62, 34, 221, 247, 188, 215, 109, 149, 190, 125, 144, 142, 61, 194, 189, 213, 190, 205, 168, 23, 189, 39, 132, 118, 62, 112, 92, 38, 62, 24, 209, 171, 189, 232, 113, 105, 62, 17, 110, 104, 62, 233, 164, 175, 189, 244, 92, 107, 62, 205, 237, 190, 62, 104, 236, 82, 190, 210, 181, 117, 62, 155, 160, 208, 189, 228, 217, 97, 62, 141, 219, 157, 190, 201, 251, 97, 190, 172, 202, 38, 190, 101, 185, 11, 62, 17, 179, 144, 189, 3, 236, 28, 189, 202, 148, 8, 191, 97, 135, 131, 62, 174, 76, 184, 189, 209, 222, 203, 61, 61, 159, 79, 62, 142, 226, 62, 191, 237, 238, 219, 190, 213, 210, 41, 190, 207, 113, 90, 191, 96, 16, 187, 62, 42, 80, 177, 61, 122, 105, 202, 188, 248, 31, 119, 62, 204, 89, 170, 61, 70, 98, 202, 189, 243, 238, 207, 61, 17, 6, 146, 62, 137, 99, 48, 189, 106, 234, 88, 189, 42, 14, 129, 62, 20, 122, 235, 61, 27, 249, 193, 61, 242, 161, 38, 189, 139, 231, 250, 61, 162, 19, 158, 61, 112, 159, 42, 62, 226, 96, 187, 62, 67, 140, 34, 61, 14, 252, 146, 61, 191, 194, 222, 190, 104, 114, 87, 189, 35, 74, 203, 189, 86, 10, 111, 62, 190, 166, 169, 61, 85, 206, 39, 62, 17, 224, 140, 190, 39, 190, 77, 61, 199, 133, 242, 62, 177, 45, 129, 62, 75, 227, 1, 189, 39, 160, 129, 62, 45, 26, 245, 189, 82, 142, 31, 190, 44, 57, 18, 189, 244, 9, 249, 189, 21, 26, 237, 59, 11, 79, 36, 62, 44, 207, 144, 61, 176, 158, 61, 190, 157, 211, 62, 62, 123, 173, 54, 62, 13, 51, 148, 189, 2, 19, 89, 61, 82, 6, 167, 62, 26, 131, 131, 61, 117, 130, 192, 62, 231, 120, 133, 190, 99, 251, 64, 60, 227, 4, 167, 190, 230, 42, 152, 190, 63, 4, 144, 188, 55, 21, 190, 189, 208, 218, 10, 62, 150, 199, 26, 62, 45, 121, 232, 190, 36, 56, 56, 62, 201, 255, 54, 62, 161, 31, 81, 61, 103, 5, 18, 62, 18, 154, 12, 191, 227, 238, 31, 190, 192, 64, 233, 61, 237, 97, 65, 62, 119, 183, 217, 60, 133, 194, 243, 61, 162, 122, 29, 190, 4, 216, 183, 190, 209, 227, 157, 189, 7, 235, 141, 61, 244, 101, 241, 59, 229, 156, 79, 191, 246, 95, 159, 190, 97, 33, 170, 61, 48, 44, 173, 190, 182, 30, 43, 190, 137, 91, 198, 62, 99, 91, 194, 61, 225, 54, 213, 188, 232, 95, 132, 189, 100, 74, 78, 189, 240, 241, 53, 191, 247, 16, 220, 190, 255, 132, 43, 62, 175, 82, 139, 62, 128, 84, 80, 62, 47, 200, 188, 188, 43, 251, 152, 190, 156, 37, 234, 189, 21, 63, 19, 62, 10, 178, 48, 189, 161, 123, 185, 61, 224, 201, 217, 190, 178, 119, 47, 59, 27, 127, 60, 190, 216, 41, 160, 62, 84, 253, 195, 62, 58, 193, 16, 62, 36, 249, 193, 62, 69, 191, 207, 61, 175, 242, 31, 62, 64, 46, 37, 61, 245, 90, 8, 62, 29, 4, 172, 189, 114, 97, 76, 189, 223, 144, 253, 59, 153, 221, 126, 62, 23, 139, 251, 61, 43, 253, 1, 62, 23, 54, 80, 61, 117, 231, 2, 62, 54, 55, 113, 62, 17, 189, 91, 62, 139, 229, 242, 188, 147, 230, 152, 189, 127, 106, 247, 61, 44, 162, 69, 62, 189, 182, 135, 62, 82, 148, 90, 62, 217, 131, 40, 62, 251, 214, 37, 62, 43, 135, 205, 189, 44, 248, 79, 62, 103, 161, 155, 189, 145, 61, 92, 189, 209, 9, 203, 188, 166, 213, 139, 62, 53, 216, 160, 189, 157, 134, 129, 190, 32, 6, 37, 189, 110, 224, 145, 189, 128, 250, 188, 61, 58, 241, 23, 62, 13, 60, 191, 61, 244, 46, 126, 190, 87, 135, 157, 62, 76, 203, 8, 189, 228, 63, 66, 62, 182, 12, 178, 190, 100, 126, 196, 190, 158, 218, 41, 61, 64, 25, 58, 190, 81, 151, 140, 189, 163, 230, 233, 190, 251, 57, 130, 61, 6, 111, 94, 190, 168, 80, 58, 188, 140, 101, 78, 189, 69, 18, 55, 62, 96, 198, 182, 189, 235, 117, 150, 57, 158, 92, 116, 190, 148, 211, 60, 190, 74, 222, 254, 189, 84, 113, 11, 190, 55, 28, 135, 62, 234, 75, 227, 190, 168, 222, 18, 191, 70, 44, 180, 189, 187, 132, 36, 62, 206, 69, 216, 60, 219, 207, 149, 60, 253, 188, 62, 61, 26, 194, 238, 190, 207, 103, 217, 186, 147, 15, 67, 62, 73, 196, 134, 62, 205, 201, 65, 190, 0, 97, 159, 62, 61, 238, 194, 189, 7, 230, 2, 190, 160, 131, 132, 62, 225, 28, 130, 61, 70, 16, 130, 190, 210, 129, 128, 62, 58, 39, 12, 190, 140, 203, 193, 188, 131, 27, 85, 190, 148, 132, 225, 190, 139, 75, 8, 62, 141, 160, 142, 62, 65, 58, 34, 189, 56, 165, 163, 62, 233, 118, 233, 190, 12, 162, 56, 62, 47, 152, 234, 189, 59, 244, 17, 61, 211, 10, 159, 62, 179, 81, 21, 191, 15, 37, 21, 191, 251, 158, 73, 190, 9, 63, 198, 62, 211, 178, 35, 190, 240, 114, 225, 61, 234, 46, 100, 190, 50, 143, 224, 190, 173, 188, 252, 61, 116, 123, 182, 61, 142, 197, 217, 62, 133, 52, 10, 191, 208, 107, 172, 189, 135, 116, 247, 189, 124, 0, 233, 189, 39, 95, 215, 189, 98, 75, 126, 188, 219, 169, 63, 62, 207, 88, 222, 61, 3, 93, 162, 61, 175, 189, 231, 190, 152, 65, 152, 190, 40, 181, 242, 190, 97, 141, 185, 61, 176, 35, 118, 191, 74, 40, 182, 190, 62, 231, 196, 60, 7, 164, 48, 190, 146, 163, 83, 188, 141, 53, 119, 62, 131, 104, 92, 62, 195, 233, 42, 62, 72, 30, 87, 190, 234, 199, 78, 190, 55, 203, 193, 62, 94, 47, 202, 62, 101, 80, 92, 189, 82, 33, 62, 190, 189, 34, 26, 190, 85, 237, 94, 191, 163, 152, 226, 187, 61, 234, 13, 61, 44, 147, 42, 190, 152, 255, 227, 190, 161, 54, 74, 190, 9, 59, 55, 62, 186, 17, 53, 191, 181, 109, 122, 61, 203, 84, 79, 62, 104, 18, 225, 61, 225, 223, 219, 60, 203, 0, 111, 61, 231, 105, 0, 190, 115, 87, 128, 191, 148, 93, 104, 191, 54, 254, 135, 61, 97, 66, 75, 60, 228, 74, 237, 189, 105, 131, 3, 62, 153, 59, 25, 191, 216, 14, 214, 189, 62, 52, 144, 61, 109, 152, 148, 61, 204, 112, 129, 62, 121, 116, 48, 191, 254, 166, 10, 190, 156, 81, 40, 62, 191, 13, 92, 190, 209, 238, 132, 61, 233, 69, 237, 61, 53, 57, 149, 62, 33, 252, 19, 188, 149, 149, 115, 62, 240, 207, 46, 189, 124, 251, 4, 190, 109, 188, 102, 62, 224, 58, 189, 190, 209, 166, 20, 190, 108, 162, 72, 62, 3, 113, 44, 189, 127, 81, 156, 59, 166, 86, 142, 190, 17, 139, 199, 190, 81, 241, 151, 189, 113, 96, 72, 62, 20, 225, 131, 62, 255, 33, 77, 62, 42, 102, 194, 190, 87, 253, 3, 62, 219, 72, 35, 62, 246, 131, 182, 190, 231, 229, 116, 61, 165, 150, 228, 189, 110, 96, 72, 190, 221, 87, 68, 60, 80, 6, 33, 60, 100, 246, 11, 62, 223, 58, 165, 62, 32, 125, 56, 62, 206, 148, 104, 190, 19, 231, 250, 61, 30, 218, 129, 189, 228, 180, 186, 189, 127, 144, 11, 190, 172, 254, 158, 189, 80, 8, 250, 61, 117, 25, 180, 190, 103, 216, 187, 189, 6, 45, 242, 190, 210, 172, 142, 61, 40, 240, 157, 62, 247, 40, 147, 190, 37, 162, 181, 190, 146, 255, 111, 190, 243, 102, 116, 190, 79, 255, 74, 62, 120, 32, 119, 62, 204, 240, 230, 62, 154, 205, 80, 60, 179, 45, 164, 190, 142, 197, 86, 61, 122, 109, 72, 62, 219, 193, 212, 190, 33, 158, 71, 190, 61, 7, 102, 190, 97, 110, 198, 189, 49, 34, 122, 190, 46, 69, 156, 190, 44, 206, 181, 189, 62, 234, 17, 187, 0, 115, 194, 61, 193, 101, 46, 62, 28, 210, 66, 187, 67, 198, 82, 191, 230, 56, 200, 189, 117, 2, 77, 62, 191, 217, 15, 189, 88, 148, 186, 62, 93, 228, 119, 60, 131, 102, 216, 62, 135, 90, 4, 191, 48, 253, 234, 189, 218, 154, 31, 190, 221, 132, 138, 190, 175, 180, 54, 191, 232, 139, 91, 61, 144, 66, 174, 190, 74, 99, 7, 190, 110, 11, 57, 189, 40, 180, 31, 190, 26, 194, 238, 61, 71, 158, 89, 62, 128, 184, 48, 188, 129, 8, 235, 190, 92, 72, 77, 190, 198, 218, 229, 187, 218, 55, 213, 190, 177, 176, 193, 190, 76, 176, 249, 190, 64, 239, 163, 62, 225, 66, 122, 60, 153, 34, 10, 191, 230, 82, 7, 62, 226, 5, 66, 189, 125, 193, 7, 62, 195, 31, 151, 61, 105, 117, 171, 189, 221, 205, 64, 188, 123, 158, 211, 60, 235, 83, 194, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 200, 111, 33, 190, 147, 130, 21, 190, 199, 92, 141, 61, 123, 174, 140, 60, 251, 195, 49, 190, 180, 182, 29, 190, 163, 15, 0, 62, 98, 98, 162, 187, 148, 127, 13, 189, 196, 15, 219, 61, 177, 134, 28, 190, 202, 147, 100, 189, 9, 147, 44, 190, 200, 240, 224, 189, 126, 158, 223, 189, 227, 34, 87, 189, 27, 253, 196, 189, 79, 66, 146, 61, 184, 97, 70, 60, 185, 178, 179, 189, 101, 76, 96, 189, 48, 122, 97, 190, 14, 108, 217, 189, 45, 196, 160, 62, 226, 25, 16, 189, 229, 173, 173, 62, 146, 194, 226, 189, 163, 97, 115, 62, 88, 255, 130, 190, 88, 149, 230, 61, 53, 63, 12, 62, 218, 154, 5, 61, 48, 83, 203, 61, 166, 5, 62, 61, 241, 47, 81, 60, 131, 108, 131, 189, 41, 163, 166, 189, 137, 222, 101, 191, 71, 63, 227, 62, 122, 35, 169, 61, 219, 14, 92, 62, 129, 234, 255, 189, 107, 109, 87, 61, 223, 199, 136, 189, 175, 139, 56, 62, 122, 215, 36, 191, 229, 65, 184, 61, 151, 61, 35, 191, 137, 249, 103, 190, 132, 59, 214, 189, 252, 215, 255, 190, 231, 241, 110, 61, 219, 145, 162, 62, 160, 254, 89, 62, 85, 192, 98, 61, 66, 63, 70, 190, 72, 164, 22, 191, 104, 34, 215, 61, 236, 82, 167, 61, 82, 94, 242, 61, 59, 115, 36, 62, 54, 222, 89, 61, 0, 190, 48, 61, 113, 185, 10, 190, 135, 120, 58, 62, 102, 86, 252, 61, 78, 171, 75, 61, 100, 11, 68, 60, 162, 210, 83, 62, 49, 102, 185, 190, 254, 96, 235, 61, 144, 123, 76, 190, 137, 157, 33, 62, 38, 30, 40, 62, 73, 16, 99, 62, 218, 114, 143, 190, 181, 86, 210, 190, 91, 84, 1, 190, 107, 56, 230, 61, 147, 143, 149, 190, 3, 37, 209, 61, 119, 250, 21, 190, 79, 99, 138, 61, 88, 187, 114, 61, 21, 163, 229, 190, 155, 28, 169, 61, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 176, 143, 9, 191, 200, 151, 121, 62, 245, 182, 129, 62, 187, 193, 95, 189, 106, 123, 108, 61, 85, 121, 158, 61, 134, 245, 220, 189, 25, 231, 242, 61, 200, 235, 48, 61, 169, 147, 65, 61, 202, 197, 0, 190, 117, 48, 172, 62, 42, 229, 177, 189, 150, 110, 198, 189, 6, 175, 118, 62, 212, 140, 31, 190, 69, 99, 184, 57, 18, 214, 33, 189, 145, 199, 199, 62, 255, 196, 229, 61, 149, 155, 80, 62, 207, 227, 149, 190, 67, 167, 149, 61, 127, 222, 249, 61, 158, 44, 3, 60, 38, 36, 25, 61, 72, 162, 2, 62, 59, 146, 142, 190, 55, 241, 59, 190, 176, 211, 184, 62, 8, 113, 148, 62, 48, 139, 226, 60, 230, 53, 171, 190, 147, 200, 157, 62, 154, 8, 221, 61, 161, 235, 212, 62, 18, 145, 131, 62, 155, 81, 133, 62, 245, 128, 4, 62, 200, 46, 248, 189, 164, 192, 222, 62, 56, 9, 148, 190, 12, 67, 187, 190, 195, 98, 200, 61, 174, 155, 138, 190, 146, 126, 142, 190, 193, 145, 138, 190, 151, 81, 3, 191, 10, 210, 146, 61, 171, 184, 211, 61, 215, 57, 65, 62, 184, 50, 113, 61, 188, 164, 152, 190, 54, 205, 34, 190, 74, 25, 134, 62, 193, 74, 139, 190, 254, 230, 65, 62, 131, 61, 129, 190, 36, 107, 97, 190, 138, 61, 152, 190, 98, 213, 161, 61, 151, 55, 191, 62, 127, 20, 223, 62, 49, 233, 16, 62, 66, 87, 15, 62, 57, 173, 134, 62, 34, 5, 173, 61, 93, 138, 156, 62, 124, 81, 192, 189, 238, 19, 212, 60, 105, 12, 7, 191, 246, 24, 204, 60, 149, 119, 33, 61, 44, 119, 140, 188, 45, 231, 229, 61, 203, 4, 43, 188, 231, 136, 240, 190, 28, 169, 23, 190, 45, 149, 138, 188, 40, 208, 8, 191, 17, 110, 223, 61, 62, 131, 139, 62, 71, 7, 89, 190, 254, 30, 142, 190, 16, 3, 235, 60, 120, 209, 188, 190, 136, 220, 152, 62, 4, 109, 29, 191, 106, 17, 44, 62, 10, 223, 205, 190, 1, 168, 10, 190, 166, 220, 20, 190, 223, 164, 50, 191, 32, 64, 104, 62, 86, 247, 196, 62, 52, 22, 21, 190, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 102, 14, 25, 191, 244, 242, 129, 61, 170, 133, 18, 190, 190, 108, 20, 187, 209, 121, 108, 62, 9, 182, 17, 190, 152, 30, 120, 62, 124, 181, 231, 190, 229, 148, 181, 62, 59, 169, 64, 190, 215, 225, 230, 190, 137, 167, 84, 62, 211, 123, 203, 190, 47, 17, 115, 191, 160, 50, 4, 192, 197, 221, 157, 190, 73, 105, 117, 188, 79, 0, 6, 62, 211, 156, 178, 62, 179, 76, 133, 61, 203, 250, 26, 192, 188, 181, 137, 62, 232, 171, 18, 62, 51, 106, 105, 190, 18, 66, 98, 62, 249, 201, 107, 190, 106, 35, 214, 190, 81, 244, 255, 190, 247, 137, 103, 61, 163, 147, 229, 189, 239, 236, 159, 61, 245, 45, 139, 62, 45, 107, 20, 190, 97, 165, 245, 190, 117, 119, 171, 62, 59, 239, 177, 190, 196, 224, 104, 190, 4, 5, 128, 62, 255, 185, 18, 190, 216, 120, 243, 190, 21, 36, 100, 189, 164, 35, 13, 62, 12, 37, 239, 188, 131, 80, 233, 189, 178, 91, 42, 62, 127, 30, 236, 186, 140, 22, 69, 191, 31, 22, 233, 61, 179, 175, 225, 189, 37, 29, 147, 189, 229, 4, 186, 190, 33, 74, 219, 189, 130, 67, 66, 191, 106, 33, 187, 190, 43, 105, 84, 61, 153, 183, 196, 61, 5, 216, 23, 190, 93, 43, 77, 62, 249, 146, 144, 189, 138, 197, 66, 190, 242, 240, 220, 61, 33, 46, 133, 187, 225, 58, 184, 189, 25, 117, 69, 190, 228, 210, 228, 187, 161, 234, 128, 191, 144, 190, 18, 63, 124, 12, 95, 191, 88, 2, 162, 61, 168, 117, 11, 62, 157, 248, 132, 61, 83, 59, 230, 190, 57, 186, 73, 62, 192, 74, 21, 61, 2, 215, 89, 190, 129, 164, 52, 187, 79, 8, 35, 61, 81, 12, 128, 190, 236, 160, 165, 191, 52, 178, 141, 62, 55, 253, 184, 190, 127, 210, 166, 189, 86, 95, 21, 188, 222, 126, 148, 189, 17, 174, 186, 191, 14, 224, 38, 60, 219, 89, 51, 189, 23, 251, 140, 62, 191, 173, 5, 62, 88, 14, 165, 62, 85, 247, 182, 61, 212, 159, 231, 190, 95, 241, 167, 62, 97, 229, 35, 59, 192, 91, 131, 190, 201, 192, 230, 61, 35, 188, 246, 62, 30, 118, 162, 190, 119, 159, 201, 190, 97, 152, 33, 190, 117, 74, 1, 191, 133, 90, 163, 189, 49, 95, 26, 61, 139, 241, 165, 62, 60, 5, 228, 189, 242, 71, 67, 62, 160, 82, 169, 62, 89, 239, 100, 189, 170, 25, 61, 62, 25, 202, 153, 62, 19, 192, 40, 62, 125, 170, 42, 62, 28, 156, 194, 190, 155, 178, 23, 61, 175, 151, 194, 190, 99, 69, 114, 190, 35, 123, 111, 62, 53, 218, 6, 62, 158, 56, 223, 61, 195, 123, 141, 62, 158, 17, 250, 190, 182, 173, 217, 61, 57, 38, 219, 61, 189, 105, 15, 62, 157, 231, 101, 62, 116, 194, 202, 190, 166, 122, 196, 190, 90, 56, 31, 62, 206, 161, 208, 189, 55, 4, 161, 62, 210, 90, 79, 189, 199, 245, 191, 61, 220, 140, 104, 62, 242, 21, 13, 62, 36, 43, 115, 62, 213, 245, 210, 190, 66, 80, 144, 62, 212, 15, 153, 190, 254, 182, 249, 189, 63, 15, 181, 62, 45, 71, 192, 189, 247, 93, 130, 190, 79, 127, 139, 190, 10, 54, 224, 190, 139, 222, 61, 62, 250, 229, 173, 62, 25, 2, 152, 62, 192, 210, 42, 62, 126, 9, 117, 190, 135, 46, 56, 189, 197, 230, 179, 62, 221, 225, 166, 190, 77, 183, 131, 189, 137, 172, 167, 189, 129, 75, 2, 190, 25, 91, 142, 190, 155, 223, 166, 190, 84, 109, 45, 62, 183, 130, 82, 62, 36, 101, 156, 62, 18, 96, 198, 190, 172, 107, 185, 62, 38, 87, 71, 60, 217, 195, 205, 187, 169, 246, 183, 61, 150, 26, 235, 61, 23, 85, 222, 61, 119, 189, 110, 190, 54, 196, 158, 62, 146, 176, 194, 189, 29, 54, 171, 61, 95, 210, 149, 62, 79, 86, 169, 189, 38, 56, 199, 190, 245, 119, 234, 61, 145, 211, 31, 191, 221, 175, 38, 62, 51, 121, 66, 62, 112, 170, 137, 62, 13, 254, 64, 62, 194, 150, 110, 190, 183, 237, 156, 60, 125, 21, 28, 62, 75, 148, 184, 190, 142, 82, 227, 189, 228, 184, 16, 190, 67, 116, 188, 189, 209, 155, 10, 190, 197, 26, 46, 60, 26, 43, 4, 63, 167, 174, 50, 62, 136, 98, 123, 62, 174, 254, 63, 63, 66, 41, 198, 190, 62, 85, 188, 190, 170, 240, 55, 190, 37, 184, 134, 190, 250, 43, 176, 189, 153, 115, 149, 61, 84, 137, 216, 62, 6, 55, 253, 190, 182, 192, 127, 62, 147, 194, 121, 62, 242, 211, 203, 189, 155, 163, 158, 62, 221, 247, 198, 62, 171, 95, 136, 190, 206, 14, 142, 62, 116, 65, 27, 59, 193, 184, 199, 61, 218, 203, 169, 190, 129, 50, 129, 190, 90, 59, 65, 188, 143, 164, 71, 62, 105, 202, 215, 189, 125, 187, 199, 62, 63, 34, 174, 190, 153, 1, 92, 62, 53, 174, 165, 62, 44, 62, 154, 62, 238, 244, 83, 62, 243, 189, 44, 191, 252, 27, 15, 191, 18, 92, 176, 61, 66, 173, 106, 62, 122, 66, 98, 61, 146, 198, 174, 188, 65, 160, 11, 190, 178, 105, 234, 189, 77, 65, 90, 61, 50, 222, 105, 190, 24, 14, 141, 190, 22, 127, 136, 60, 117, 217, 230, 61, 236, 121, 229, 60, 152, 67, 215, 190, 210, 100, 192, 61, 142, 29, 239, 60, 132, 87, 131, 188, 19, 3, 87, 62, 47, 228, 165, 190, 208, 210, 147, 61, 68, 53, 200, 190, 171, 37, 250, 189, 133, 18, 147, 60, 157, 204, 132, 62, 155, 213, 165, 61, 241, 153, 34, 62, 109, 232, 153, 61, 230, 17, 232, 61, 151, 84, 46, 190, 64, 242, 185, 61, 172, 164, 39, 62, 98, 66, 213, 61, 194, 204, 86, 61, 86, 60, 240, 190, 84, 75, 153, 61, 246, 21, 199, 189, 122, 110, 53, 190, 14, 32, 96, 62, 85, 218, 79, 189, 200, 124, 141, 188, 228, 81, 98, 189, 21, 167, 96, 62, 52, 44, 221, 190, 197, 120, 139, 62, 98, 105, 130, 61, 244, 122, 38, 61, 159, 87, 125, 62, 237, 128, 63, 62, 227, 178, 35, 190, 189, 242, 198, 61, 109, 172, 182, 189, 180, 194, 141, 62, 77, 91, 130, 190, 1, 170, 67, 190, 28, 254, 81, 190, 3, 5, 130, 60, 144, 111, 36, 62, 188, 20, 231, 61, 70, 27, 33, 191, 49, 128, 150, 62, 42, 95, 189, 62, 93, 23, 25, 61, 39, 102, 8, 61, 216, 120, 12, 191, 170, 116, 107, 190, 17, 48, 185, 189, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 121, 36, 62, 159, 179, 135, 61, 247, 212, 141, 61, 235, 117, 184, 189, 75, 38, 223, 188, 65, 92, 69, 62, 1, 33, 140, 62, 217, 6, 165, 187, 232, 229, 3, 62, 78, 25, 212, 189, 77, 76, 138, 62, 99, 106, 157, 186, 119, 107, 172, 62, 125, 88, 12, 62, 115, 44, 5, 61, 234, 159, 89, 62, 154, 206, 100, 190, 177, 142, 77, 190, 75, 226, 180, 61, 35, 243, 28, 62, 197, 194, 63, 190, 220, 85, 115, 61, 190, 198, 148, 62, 179, 23, 202, 61, 22, 222, 173, 60, 232, 205, 134, 61, 184, 12, 139, 62, 114, 17, 139, 60, 244, 86, 155, 188, 110, 120, 70, 190, 82, 243, 34, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 207, 244, 189, 74, 161, 211, 62, 20, 208, 204, 190, 222, 247, 188, 190, 1, 254, 135, 190, 238, 149, 40, 190, 156, 36, 14, 189, 84, 61, 22, 191, 55, 246, 215, 190, 204, 194, 109, 191, 203, 140, 138, 191, 71, 131, 146, 62, 88, 142, 250, 61, 101, 141, 76, 191, 48, 237, 71, 61, 25, 36, 178, 62, 251, 142, 70, 190, 36, 27, 66, 61, 131, 33, 204, 190, 233, 152, 37, 63, 219, 46, 3, 191, 132, 86, 180, 61, 183, 20, 107, 63, 237, 41, 167, 62, 79, 62, 13, 63, 8, 88, 211, 190, 169, 33, 255, 62, 50, 5, 188, 62, 3, 84, 11, 191, 176, 244, 210, 61, 186, 31, 191, 190, 40, 37, 91, 61, 154, 61, 52, 190, 241, 162, 55, 62, 71, 68, 198, 189, 128, 163, 91, 189, 145, 153, 28, 190, 75, 82, 170, 190, 99, 226, 187, 190, 153, 179, 204, 189, 223, 4, 67, 62, 84, 66, 189, 61, 2, 12, 1, 62, 95, 19, 179, 189, 127, 86, 139, 190, 28, 187, 200, 188, 78, 248, 226, 61, 166, 19, 160, 62, 117, 7, 105, 62, 149, 243, 150, 188, 67, 198, 108, 62, 112, 55, 168, 62, 145, 145, 149, 60, 156, 198, 42, 61, 147, 179, 111, 61, 86, 222, 183, 61, 95, 99, 61, 190, 202, 183, 156, 60, 234, 200, 156, 190, 209, 251, 183, 61, 147, 172, 10, 63, 249, 232, 137, 62, 32, 246, 150, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 179, 64, 189, 166, 171, 181, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 28, 133, 63, 104, 61, 3, 190, 144, 83, 90, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 142, 197, 190, 208, 184, 200, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}