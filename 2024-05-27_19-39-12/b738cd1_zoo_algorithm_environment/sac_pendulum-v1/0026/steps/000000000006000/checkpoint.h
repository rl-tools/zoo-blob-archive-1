// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 116, 17, 191, 117, 129, 109, 191, 182, 207, 83, 190, 189, 217, 72, 63, 132, 251, 247, 190, 181, 223, 132, 190, 166, 144, 219, 189, 195, 139, 31, 191, 229, 162, 7, 191, 143, 235, 59, 63, 38, 83, 43, 190, 127, 192, 139, 190, 126, 5, 17, 191, 45, 134, 4, 63, 134, 73, 237, 62, 223, 99, 156, 62, 70, 64, 137, 62, 154, 67, 214, 190, 116, 30, 98, 189, 232, 163, 91, 62, 55, 44, 168, 61, 134, 251, 67, 62, 133, 189, 128, 190, 155, 194, 226, 62, 71, 145, 24, 191, 159, 17, 177, 63, 192, 150, 173, 62, 27, 153, 242, 62, 201, 5, 7, 63, 156, 134, 204, 62, 157, 218, 130, 62, 23, 169, 176, 61, 193, 139, 147, 190, 95, 141, 162, 62, 122, 110, 34, 191, 224, 91, 74, 63, 121, 78, 236, 62, 44, 197, 232, 62, 72, 195, 250, 62, 119, 235, 83, 189, 111, 79, 120, 190, 36, 50, 202, 190, 193, 72, 204, 190, 170, 150, 55, 191, 43, 37, 143, 190, 6, 124, 240, 62, 113, 213, 65, 63, 106, 47, 49, 62, 50, 175, 57, 189, 194, 77, 253, 190, 192, 110, 209, 61, 35, 213, 102, 63, 74, 106, 133, 190, 20, 172, 12, 190, 254, 129, 76, 188, 230, 93, 85, 190, 63, 157, 230, 62, 98, 232, 206, 190, 52, 161, 37, 63, 68, 69, 2, 63, 240, 127, 51, 190, 253, 47, 89, 191, 220, 159, 141, 190, 7, 223, 83, 63, 128, 66, 4, 63, 184, 156, 182, 189, 28, 55, 108, 63, 146, 5, 56, 191, 186, 162, 188, 189, 134, 61, 63, 63, 228, 113, 123, 63, 142, 62, 96, 62, 204, 235, 205, 62, 9, 78, 230, 190, 201, 9, 172, 190, 32, 78, 245, 62, 21, 208, 67, 63, 250, 35, 135, 62, 100, 254, 99, 62, 107, 151, 170, 62, 5, 18, 201, 62, 74, 122, 81, 190, 23, 91, 10, 191, 8, 57, 237, 190, 42, 127, 238, 190, 66, 123, 104, 63, 167, 130, 186, 61, 156, 23, 229, 62, 63, 54, 214, 190, 237, 67, 79, 190, 244, 241, 164, 62, 161, 63, 136, 191, 211, 198, 143, 190, 18, 101, 171, 190, 55, 3, 111, 190, 209, 31, 60, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 106, 2, 191, 58, 141, 80, 190, 22, 59, 200, 190, 160, 97, 80, 190, 15, 246, 173, 190, 116, 39, 123, 189, 44, 76, 19, 63, 52, 147, 186, 61, 198, 59, 127, 190, 11, 118, 23, 191, 165, 4, 104, 62, 81, 211, 191, 62, 180, 85, 144, 190, 5, 11, 138, 190, 158, 139, 206, 190, 126, 170, 153, 189, 249, 120, 152, 62, 206, 223, 233, 61, 217, 213, 31, 189, 226, 28, 200, 189, 125, 100, 54, 190, 77, 164, 184, 188, 155, 221, 38, 63, 82, 229, 216, 189, 16, 59, 64, 191, 208, 0, 204, 189, 9, 159, 42, 191, 253, 15, 170, 190, 16, 227, 41, 63, 246, 50, 143, 190, 72, 241, 20, 61, 89, 12, 254, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 149, 148, 62, 182, 208, 124, 62, 99, 88, 134, 190, 165, 35, 217, 189, 69, 182, 66, 190, 127, 185, 142, 190, 220, 135, 149, 60, 177, 146, 42, 59, 253, 220, 158, 61, 181, 33, 241, 61, 43, 167, 133, 61, 39, 26, 164, 188, 158, 126, 254, 61, 11, 90, 1, 190, 85, 236, 35, 190, 57, 244, 38, 62, 34, 85, 146, 190, 10, 83, 124, 62, 139, 65, 12, 191, 76, 140, 73, 189, 124, 97, 31, 190, 210, 164, 160, 61, 65, 48, 97, 62, 114, 163, 41, 61, 237, 219, 166, 190, 221, 183, 226, 61, 37, 210, 77, 62, 225, 175, 156, 189, 98, 170, 80, 61, 96, 10, 137, 190, 2, 13, 142, 189, 152, 236, 218, 59, 193, 190, 215, 61, 221, 11, 78, 190, 179, 80, 48, 62, 66, 165, 67, 190, 156, 166, 50, 190, 245, 43, 70, 62, 4, 154, 4, 190, 138, 159, 13, 62, 16, 215, 98, 190, 129, 131, 112, 62, 149, 193, 79, 62, 191, 24, 9, 190, 159, 18, 108, 62, 172, 174, 233, 62, 169, 24, 118, 62, 166, 209, 65, 62, 102, 238, 144, 61, 126, 127, 62, 190, 167, 93, 196, 189, 175, 87, 98, 190, 238, 6, 154, 62, 48, 192, 21, 62, 60, 96, 222, 189, 129, 172, 81, 62, 83, 206, 227, 60, 187, 241, 161, 61, 192, 193, 9, 62, 194, 19, 1, 62, 142, 146, 129, 189, 119, 65, 217, 61, 181, 197, 219, 188, 37, 30, 191, 190, 191, 19, 20, 62, 222, 42, 210, 59, 41, 14, 149, 190, 67, 141, 184, 61, 44, 21, 163, 190, 29, 231, 7, 189, 34, 223, 81, 62, 247, 2, 27, 62, 95, 121, 179, 189, 86, 116, 124, 62, 45, 223, 93, 62, 97, 243, 206, 189, 170, 172, 122, 62, 253, 119, 189, 62, 245, 224, 67, 190, 159, 152, 124, 62, 47, 24, 4, 190, 41, 32, 110, 62, 73, 212, 139, 190, 71, 232, 59, 190, 79, 168, 9, 190, 155, 229, 7, 62, 73, 243, 122, 189, 211, 197, 1, 189, 40, 205, 195, 190, 19, 12, 139, 62, 210, 182, 135, 189, 106, 8, 211, 61, 32, 229, 238, 61, 181, 56, 40, 191, 215, 126, 180, 190, 144, 7, 100, 190, 126, 37, 53, 191, 39, 5, 146, 62, 150, 239, 182, 59, 239, 83, 213, 189, 198, 213, 117, 62, 118, 63, 134, 189, 145, 63, 206, 189, 64, 158, 188, 61, 58, 224, 131, 62, 52, 153, 224, 189, 168, 222, 148, 190, 133, 179, 125, 62, 143, 228, 167, 61, 173, 206, 130, 60, 20, 10, 94, 61, 11, 234, 151, 61, 62, 254, 237, 61, 82, 232, 5, 62, 8, 163, 186, 62, 39, 184, 104, 60, 203, 11, 146, 60, 39, 185, 6, 191, 25, 250, 157, 189, 148, 118, 20, 190, 154, 247, 171, 61, 14, 37, 36, 61, 127, 161, 186, 61, 66, 229, 170, 190, 224, 150, 186, 60, 76, 224, 110, 62, 195, 138, 151, 62, 178, 91, 52, 61, 173, 7, 75, 62, 83, 128, 157, 189, 118, 35, 234, 189, 59, 1, 159, 60, 32, 156, 70, 189, 5, 194, 155, 61, 186, 217, 3, 62, 134, 222, 134, 61, 10, 171, 80, 190, 41, 90, 84, 62, 83, 199, 90, 62, 254, 155, 169, 189, 116, 184, 143, 61, 178, 32, 191, 62, 196, 239, 131, 61, 1, 149, 194, 62, 48, 46, 149, 190, 221, 169, 12, 61, 132, 66, 152, 190, 140, 28, 138, 190, 180, 202, 222, 188, 56, 155, 135, 189, 153, 209, 13, 62, 194, 165, 31, 62, 214, 154, 141, 190, 45, 93, 69, 62, 202, 6, 89, 62, 245, 52, 184, 61, 212, 115, 197, 61, 112, 164, 234, 190, 16, 116, 12, 190, 26, 219, 220, 60, 238, 121, 84, 62, 168, 38, 4, 61, 15, 136, 2, 62, 74, 78, 13, 190, 62, 210, 193, 190, 87, 43, 72, 189, 213, 112, 197, 61, 63, 190, 53, 60, 229, 41, 53, 191, 101, 37, 142, 190, 3, 128, 229, 61, 148, 74, 169, 190, 221, 118, 30, 190, 179, 82, 202, 62, 157, 193, 240, 61, 91, 112, 32, 187, 34, 191, 6, 189, 199, 191, 51, 189, 154, 213, 25, 191, 158, 5, 223, 190, 123, 67, 54, 62, 168, 214, 155, 62, 37, 195, 85, 62, 70, 170, 118, 186, 44, 138, 105, 190, 95, 193, 176, 189, 21, 63, 19, 62, 97, 169, 2, 189, 146, 139, 5, 62, 61, 60, 212, 190, 35, 213, 234, 59, 109, 39, 25, 190, 112, 10, 134, 62, 127, 194, 194, 62, 16, 38, 202, 61, 18, 29, 199, 62, 236, 150, 30, 62, 59, 87, 236, 61, 239, 233, 38, 61, 125, 157, 1, 62, 230, 132, 36, 189, 44, 162, 130, 189, 18, 185, 16, 188, 234, 230, 117, 62, 147, 224, 5, 62, 247, 18, 186, 61, 111, 178, 205, 59, 55, 106, 4, 62, 60, 61, 83, 62, 175, 177, 107, 62, 13, 101, 47, 189, 130, 220, 86, 189, 184, 122, 158, 61, 137, 42, 89, 62, 16, 141, 125, 62, 46, 80, 85, 62, 176, 133, 34, 62, 183, 184, 47, 62, 209, 21, 171, 189, 0, 47, 46, 62, 237, 241, 137, 189, 109, 74, 144, 189, 71, 171, 94, 189, 204, 65, 135, 62, 193, 25, 32, 189, 140, 171, 43, 189, 158, 224, 57, 189, 90, 75, 106, 189, 179, 229, 177, 61, 123, 253, 176, 61, 250, 66, 219, 189, 253, 196, 222, 189, 214, 77, 106, 61, 129, 13, 208, 61, 34, 177, 152, 61, 154, 251, 140, 189, 37, 171, 30, 190, 42, 174, 224, 60, 70, 196, 104, 189, 131, 139, 21, 190, 67, 183, 12, 190, 14, 235, 191, 61, 120, 47, 163, 61, 61, 150, 147, 189, 253, 86, 191, 61, 244, 31, 196, 61, 204, 225, 135, 59, 46, 1, 83, 189, 42, 89, 22, 61, 226, 111, 11, 190, 204, 122, 40, 189, 208, 107, 5, 190, 230, 10, 14, 189, 232, 201, 54, 189, 126, 81, 8, 190, 47, 119, 246, 189, 212, 190, 73, 62, 218, 238, 122, 61, 212, 190, 23, 61, 185, 151, 132, 61, 108, 135, 178, 190, 251, 40, 113, 60, 100, 231, 25, 62, 117, 20, 125, 62, 214, 233, 59, 190, 94, 61, 167, 62, 206, 116, 209, 189, 251, 198, 25, 190, 139, 160, 136, 62, 182, 100, 138, 61, 208, 164, 75, 190, 76, 245, 129, 62, 231, 243, 48, 190, 7, 14, 105, 188, 191, 101, 40, 190, 32, 51, 206, 190, 138, 13, 80, 62, 58, 1, 141, 62, 222, 237, 6, 189, 200, 32, 165, 62, 185, 71, 143, 190, 92, 7, 65, 62, 136, 49, 214, 189, 14, 63, 80, 61, 202, 149, 88, 62, 132, 72, 0, 191, 56, 183, 253, 190, 60, 207, 138, 190, 225, 241, 169, 62, 200, 9, 35, 190, 87, 207, 117, 61, 183, 87, 220, 189, 184, 58, 9, 191, 12, 105, 236, 61, 13, 151, 140, 61, 107, 211, 245, 62, 219, 21, 2, 191, 208, 107, 172, 189, 67, 84, 24, 190, 152, 142, 6, 189, 166, 226, 215, 189, 53, 109, 138, 189, 90, 227, 19, 62, 207, 88, 222, 61, 41, 229, 56, 62, 36, 199, 166, 190, 90, 185, 186, 190, 202, 151, 33, 191, 21, 214, 140, 61, 28, 92, 15, 191, 199, 108, 103, 190, 62, 231, 196, 60, 227, 92, 147, 189, 146, 163, 83, 188, 141, 53, 119, 62, 108, 191, 41, 62, 13, 237, 230, 61, 73, 112, 102, 190, 137, 214, 52, 190, 112, 75, 175, 62, 25, 201, 158, 62, 106, 68, 242, 60, 75, 13, 85, 190, 104, 101, 152, 189, 31, 201, 97, 191, 240, 148, 177, 187, 95, 204, 101, 188, 23, 82, 35, 190, 27, 52, 14, 191, 88, 7, 59, 190, 119, 26, 49, 62, 34, 123, 46, 191, 150, 110, 112, 61, 111, 167, 61, 62, 136, 58, 192, 61, 121, 132, 10, 61, 166, 101, 216, 61, 122, 119, 165, 189, 16, 223, 130, 191, 21, 150, 124, 191, 223, 93, 68, 61, 134, 3, 80, 61, 30, 159, 174, 189, 227, 105, 16, 62, 171, 222, 205, 190, 73, 178, 156, 189, 62, 52, 144, 61, 251, 99, 102, 61, 228, 222, 23, 62, 80, 236, 8, 191, 74, 111, 203, 189, 209, 242, 178, 61, 66, 203, 159, 190, 130, 104, 134, 61, 186, 57, 66, 61, 208, 208, 149, 62, 41, 234, 241, 187, 27, 59, 58, 62, 180, 146, 222, 188, 64, 101, 221, 189, 26, 31, 98, 62, 17, 239, 159, 190, 103, 46, 23, 190, 176, 136, 92, 62, 49, 141, 73, 188, 242, 6, 114, 189, 250, 231, 209, 190, 1, 124, 198, 190, 0, 77, 145, 189, 23, 4, 80, 62, 208, 142, 134, 62, 211, 197, 93, 62, 15, 36, 215, 190, 137, 50, 0, 62, 165, 59, 41, 62, 155, 240, 182, 190, 101, 109, 171, 188, 145, 56, 216, 189, 31, 37, 234, 189, 194, 128, 116, 189, 18, 183, 55, 61, 136, 113, 17, 62, 255, 246, 132, 62, 86, 59, 54, 62, 217, 17, 197, 190, 168, 31, 57, 62, 5, 209, 255, 186, 95, 37, 86, 189, 203, 191, 184, 189, 145, 207, 220, 189, 142, 153, 221, 61, 194, 28, 176, 190, 213, 62, 209, 186, 179, 175, 204, 190, 141, 139, 212, 61, 182, 4, 159, 62, 144, 199, 99, 190, 100, 237, 147, 190, 208, 19, 169, 190, 61, 84, 40, 190, 121, 243, 24, 62, 45, 240, 140, 62, 41, 88, 222, 62, 42, 164, 94, 61, 96, 232, 141, 190, 238, 156, 126, 61, 105, 126, 84, 62, 132, 167, 184, 190, 79, 41, 0, 190, 186, 206, 17, 190, 220, 111, 140, 188, 103, 117, 55, 190, 99, 205, 146, 190, 50, 103, 15, 61, 76, 190, 108, 60, 182, 114, 164, 60, 155, 249, 210, 61, 231, 167, 39, 187, 112, 203, 177, 190, 132, 120, 144, 188, 59, 136, 100, 62, 250, 248, 194, 60, 192, 214, 137, 62, 170, 126, 95, 61, 173, 34, 142, 62, 176, 12, 183, 190, 30, 252, 150, 190, 83, 11, 188, 189, 10, 193, 37, 190, 37, 241, 203, 190, 99, 12, 246, 188, 5, 70, 123, 190, 197, 73, 138, 189, 182, 228, 174, 189, 0, 207, 200, 189, 159, 102, 2, 62, 216, 51, 222, 61, 127, 58, 82, 189, 164, 78, 165, 190, 14, 254, 130, 189, 198, 218, 229, 187, 225, 10, 165, 190, 71, 172, 173, 190, 220, 250, 20, 190, 63, 58, 56, 62, 225, 66, 122, 60, 0, 57, 116, 190, 40, 17, 174, 61, 226, 5, 66, 189, 23, 202, 8, 62, 28, 126, 152, 61, 214, 212, 166, 189, 221, 205, 64, 188, 7, 1, 229, 60, 76, 179, 193, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 240, 210, 31, 190, 147, 130, 21, 190, 199, 92, 141, 61, 31, 15, 147, 60, 180, 28, 50, 190, 180, 182, 29, 190, 163, 15, 0, 62, 56, 152, 56, 187, 148, 127, 13, 189, 196, 15, 219, 61, 142, 238, 28, 190, 68, 16, 89, 189, 228, 106, 43, 190, 200, 240, 224, 189, 154, 103, 222, 189, 227, 34, 87, 189, 27, 253, 196, 189, 172, 31, 147, 61, 199, 106, 62, 60, 245, 134, 179, 189, 217, 181, 94, 189, 117, 199, 98, 190, 29, 249, 218, 189, 107, 225, 171, 62, 167, 237, 30, 189, 175, 147, 153, 62, 235, 203, 220, 189, 55, 93, 64, 62, 134, 243, 144, 190, 167, 26, 138, 61, 212, 150, 71, 61, 194, 28, 233, 61, 221, 7, 185, 61, 75, 12, 143, 187, 24, 156, 14, 61, 211, 87, 153, 189, 204, 197, 204, 189, 64, 124, 65, 191, 69, 201, 169, 62, 12, 255, 174, 61, 82, 65, 27, 62, 146, 205, 208, 189, 145, 15, 108, 61, 15, 64, 247, 189, 16, 27, 64, 62, 215, 0, 6, 191, 110, 104, 192, 188, 188, 249, 1, 191, 147, 107, 18, 190, 235, 105, 219, 189, 167, 13, 250, 190, 191, 173, 174, 61, 114, 64, 151, 62, 31, 7, 247, 61, 206, 108, 63, 61, 40, 205, 59, 190, 109, 3, 201, 190, 104, 34, 215, 61, 21, 107, 128, 61, 4, 172, 69, 187, 246, 177, 43, 62, 133, 156, 1, 61, 169, 1, 168, 60, 254, 199, 56, 190, 9, 166, 140, 190, 64, 129, 221, 61, 64, 19, 129, 60, 108, 127, 239, 60, 226, 243, 89, 62, 102, 192, 167, 190, 80, 192, 4, 62, 44, 180, 48, 190, 152, 134, 12, 62, 44, 9, 26, 62, 113, 247, 41, 62, 233, 247, 65, 190, 94, 237, 218, 190, 116, 37, 154, 189, 107, 56, 230, 61, 159, 37, 147, 190, 9, 132, 27, 61, 231, 210, 165, 189, 126, 34, 138, 61, 88, 187, 114, 61, 101, 224, 129, 190, 184, 219, 202, 61, 65, 135, 179, 189, 128, 100, 73, 189, 225, 206, 81, 189, 32, 83, 71, 186, 34, 90, 174, 189, 104, 186, 109, 189, 254, 20, 185, 61, 139, 107, 37, 190, 170, 116, 33, 60, 234, 245, 166, 61, 32, 159, 1, 189, 172, 212, 72, 190, 141, 58, 146, 189, 253, 94, 245, 59, 216, 126, 204, 61, 224, 80, 20, 62, 216, 11, 40, 190, 113, 12, 132, 59, 129, 58, 176, 60, 168, 153, 183, 61, 102, 200, 167, 189, 242, 142, 186, 189, 227, 78, 202, 60, 239, 21, 13, 62, 93, 26, 44, 61, 95, 3, 230, 61, 180, 178, 169, 189, 56, 180, 11, 62, 189, 226, 45, 190, 177, 103, 92, 56, 9, 185, 179, 189, 64, 104, 116, 61, 198, 17, 227, 190, 163, 24, 73, 62, 37, 146, 104, 62, 105, 159, 181, 189, 2, 134, 82, 61, 136, 162, 92, 61, 87, 238, 147, 189, 104, 233, 212, 61, 221, 107, 158, 61, 125, 185, 128, 188, 114, 33, 40, 190, 26, 60, 167, 62, 104, 183, 253, 189, 52, 160, 16, 190, 191, 32, 153, 62, 90, 253, 43, 190, 161, 138, 84, 61, 243, 140, 145, 189, 165, 104, 200, 62, 219, 211, 204, 61, 179, 26, 101, 62, 204, 239, 163, 190, 133, 186, 94, 61, 80, 217, 224, 61, 80, 235, 131, 58, 78, 166, 137, 60, 15, 2, 69, 61, 72, 20, 154, 190, 85, 15, 217, 189, 219, 10, 141, 62, 137, 161, 158, 62, 17, 53, 249, 61, 236, 229, 0, 191, 183, 138, 158, 62, 191, 185, 161, 61, 118, 178, 213, 62, 28, 234, 123, 62, 234, 214, 105, 62, 149, 113, 239, 61, 116, 173, 168, 189, 21, 133, 204, 62, 112, 24, 83, 190, 32, 8, 188, 190, 226, 221, 5, 62, 14, 31, 104, 190, 171, 194, 147, 190, 139, 226, 202, 190, 142, 110, 2, 191, 145, 156, 119, 61, 209, 34, 217, 61, 49, 143, 91, 62, 137, 255, 158, 61, 115, 175, 190, 190, 130, 201, 44, 190, 163, 249, 133, 62, 118, 8, 138, 190, 22, 228, 91, 62, 145, 56, 119, 190, 45, 174, 243, 189, 176, 178, 166, 190, 164, 105, 123, 61, 59, 145, 205, 62, 22, 158, 178, 62, 100, 63, 155, 61, 156, 236, 78, 62, 88, 248, 16, 62, 230, 34, 138, 61, 254, 13, 132, 62, 124, 81, 192, 189, 46, 162, 146, 60, 187, 8, 253, 190, 196, 179, 177, 60, 149, 119, 33, 61, 44, 119, 140, 188, 111, 9, 160, 61, 43, 93, 38, 61, 137, 73, 215, 190, 113, 121, 43, 190, 168, 254, 146, 60, 25, 68, 146, 190, 27, 160, 81, 62, 96, 2, 4, 62, 109, 33, 39, 190, 121, 252, 147, 190, 9, 81, 198, 60, 192, 35, 211, 190, 171, 36, 85, 62, 85, 34, 190, 190, 224, 91, 55, 62, 201, 238, 85, 190, 1, 168, 10, 190, 211, 158, 35, 190, 19, 59, 12, 191, 218, 148, 4, 62, 135, 50, 172, 62, 133, 148, 191, 189, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 194, 229, 219, 190, 235, 192, 56, 61, 105, 78, 110, 190, 162, 192, 167, 188, 137, 40, 99, 62, 30, 91, 77, 190, 224, 48, 126, 62, 239, 174, 232, 190, 165, 220, 193, 62, 59, 45, 13, 190, 63, 118, 230, 190, 139, 93, 82, 62, 45, 247, 197, 190, 98, 251, 142, 191, 242, 109, 207, 191, 16, 21, 157, 190, 229, 20, 198, 188, 204, 21, 229, 61, 15, 27, 168, 62, 179, 60, 136, 61, 203, 85, 246, 191, 253, 9, 133, 62, 3, 3, 4, 62, 137, 228, 106, 190, 244, 51, 152, 61, 175, 161, 103, 190, 81, 164, 180, 190, 97, 223, 8, 191, 6, 179, 184, 61, 34, 64, 250, 189, 117, 44, 15, 61, 178, 85, 140, 62, 212, 239, 9, 190, 139, 219, 174, 190, 143, 254, 247, 61, 21, 151, 135, 190, 129, 56, 67, 190, 60, 138, 37, 62, 75, 226, 46, 189, 117, 106, 244, 190, 159, 229, 185, 61, 201, 228, 21, 62, 252, 177, 0, 189, 173, 76, 5, 190, 204, 205, 252, 61, 133, 221, 72, 190, 178, 42, 35, 191, 81, 63, 21, 62, 74, 48, 18, 190, 198, 13, 199, 189, 61, 207, 192, 190, 196, 89, 77, 189, 74, 62, 37, 191, 28, 209, 192, 190, 21, 159, 106, 60, 219, 157, 246, 61, 165, 223, 150, 189, 184, 59, 85, 62, 194, 255, 56, 189, 224, 22, 181, 190, 113, 117, 99, 62, 215, 238, 183, 59, 213, 11, 228, 188, 28, 149, 226, 189, 35, 89, 96, 60, 214, 142, 47, 191, 108, 8, 120, 62, 10, 244, 32, 191, 132, 209, 200, 61, 22, 227, 72, 61, 152, 113, 120, 61, 247, 179, 224, 190, 188, 122, 120, 62, 73, 216, 230, 60, 146, 117, 250, 189, 123, 55, 96, 188, 110, 43, 206, 60, 220, 122, 2, 191, 194, 148, 124, 191, 62, 73, 104, 62, 121, 16, 221, 190, 26, 157, 80, 189, 191, 59, 52, 188, 46, 246, 130, 189, 42, 250, 156, 191, 141, 227, 81, 61, 37, 217, 24, 190, 192, 138, 87, 62, 221, 238, 19, 62, 226, 184, 144, 62, 153, 175, 241, 61, 92, 106, 42, 191, 72, 81, 176, 62, 29, 234, 220, 59, 230, 213, 120, 190, 173, 241, 187, 61, 219, 120, 182, 62, 234, 205, 144, 190, 253, 17, 205, 190, 170, 238, 232, 189, 184, 14, 215, 190, 12, 210, 253, 188, 172, 95, 214, 59, 237, 119, 164, 62, 186, 164, 233, 189, 241, 25, 70, 62, 76, 125, 174, 62, 37, 27, 118, 189, 210, 208, 73, 62, 84, 191, 155, 62, 177, 188, 244, 61, 206, 221, 46, 62, 124, 171, 195, 190, 55, 61, 112, 61, 147, 63, 178, 190, 143, 29, 104, 190, 32, 49, 64, 62, 210, 186, 34, 62, 166, 22, 243, 61, 177, 0, 144, 62, 171, 60, 168, 190, 233, 68, 241, 61, 168, 174, 200, 61, 104, 131, 8, 62, 222, 78, 27, 62, 70, 164, 171, 190, 101, 170, 179, 190, 108, 126, 137, 61, 227, 219, 194, 190, 163, 104, 164, 62, 80, 187, 150, 189, 154, 80, 215, 61, 236, 28, 99, 62, 52, 48, 23, 62, 180, 134, 102, 62, 85, 222, 208, 190, 9, 182, 138, 62, 56, 187, 137, 190, 126, 71, 175, 189, 162, 178, 180, 62, 251, 103, 165, 189, 225, 110, 107, 190, 34, 15, 254, 190, 138, 42, 230, 190, 97, 237, 13, 62, 225, 7, 179, 62, 84, 62, 144, 62, 160, 158, 41, 62, 224, 234, 186, 190, 68, 195, 250, 188, 146, 139, 175, 62, 184, 204, 173, 190, 180, 241, 104, 189, 245, 12, 186, 189, 211, 221, 140, 189, 160, 205, 153, 190, 9, 209, 158, 190, 80, 219, 64, 62, 155, 0, 213, 61, 15, 160, 107, 62, 89, 156, 21, 191, 205, 238, 189, 62, 142, 34, 200, 60, 124, 6, 32, 60, 41, 118, 122, 61, 247, 1, 255, 61, 221, 76, 181, 61, 117, 52, 105, 190, 137, 195, 134, 62, 134, 221, 138, 189, 46, 34, 219, 61, 91, 221, 150, 62, 197, 3, 161, 189, 27, 89, 178, 190, 60, 147, 219, 188, 98, 14, 37, 191, 239, 243, 5, 62, 234, 102, 74, 62, 203, 107, 132, 62, 211, 10, 54, 62, 29, 56, 160, 190, 84, 105, 154, 60, 46, 242, 23, 62, 198, 118, 194, 190, 230, 175, 137, 189, 1, 133, 35, 190, 31, 203, 44, 189, 101, 22, 246, 189, 178, 86, 138, 58, 93, 108, 13, 63, 75, 72, 188, 61, 206, 197, 44, 62, 184, 24, 62, 63, 37, 220, 202, 190, 251, 198, 27, 191, 118, 97, 95, 190, 172, 206, 112, 190, 177, 168, 49, 190, 235, 127, 14, 61, 80, 166, 222, 62, 68, 57, 204, 190, 228, 15, 74, 62, 143, 117, 60, 62, 128, 166, 205, 189, 180, 54, 161, 62, 187, 45, 206, 61, 13, 5, 90, 190, 108, 218, 130, 62, 112, 114, 207, 188, 119, 55, 164, 61, 228, 197, 157, 190, 149, 209, 109, 190, 222, 132, 224, 60, 173, 163, 27, 62, 208, 214, 210, 189, 140, 87, 186, 62, 230, 132, 192, 190, 139, 48, 82, 62, 156, 33, 128, 62, 24, 105, 7, 62, 165, 81, 7, 62, 112, 89, 49, 191, 147, 27, 235, 190, 110, 37, 240, 60, 245, 140, 223, 61, 29, 239, 240, 60, 72, 61, 141, 189, 199, 151, 16, 190, 203, 20, 108, 189, 195, 198, 93, 61, 91, 129, 53, 190, 64, 186, 112, 190, 93, 149, 233, 61, 11, 239, 38, 62, 219, 213, 12, 61, 60, 212, 191, 190, 73, 58, 246, 61, 46, 217, 167, 187, 99, 178, 222, 189, 127, 67, 128, 62, 0, 85, 147, 190, 38, 77, 99, 61, 53, 66, 171, 190, 209, 1, 92, 189, 82, 104, 126, 189, 228, 237, 141, 62, 174, 159, 129, 61, 243, 45, 69, 62, 234, 143, 246, 188, 159, 38, 15, 62, 95, 149, 248, 189, 38, 128, 47, 61, 182, 33, 130, 62, 13, 247, 75, 61, 135, 222, 84, 59, 27, 246, 229, 190, 74, 64, 155, 61, 73, 198, 131, 189, 20, 103, 66, 190, 139, 154, 115, 62, 20, 237, 204, 188, 250, 247, 34, 188, 101, 208, 54, 189, 129, 128, 72, 62, 213, 116, 189, 190, 239, 137, 72, 62, 109, 14, 167, 61, 171, 217, 77, 60, 197, 251, 87, 62, 71, 186, 47, 62, 160, 136, 231, 189, 65, 79, 156, 61, 112, 7, 237, 189, 48, 51, 150, 62, 82, 120, 135, 190, 28, 76, 69, 190, 206, 75, 78, 190, 28, 195, 173, 60, 228, 37, 41, 62, 150, 159, 188, 61, 161, 184, 222, 190, 96, 111, 139, 62, 140, 111, 154, 62, 105, 85, 255, 60, 192, 127, 129, 61, 31, 129, 243, 190, 247, 155, 28, 190, 34, 75, 116, 189, 153, 47, 145, 61, 154, 38, 67, 188, 5, 192, 211, 189, 64, 172, 108, 189, 246, 35, 202, 61, 51, 213, 42, 189, 78, 142, 16, 190, 223, 50, 157, 188, 184, 124, 39, 62, 218, 120, 212, 61, 171, 50, 224, 189, 154, 143, 22, 190, 179, 142, 128, 189, 182, 174, 139, 61, 113, 180, 144, 59, 172, 1, 143, 189, 153, 210, 62, 61, 28, 145, 171, 61, 169, 80, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 104, 190, 3, 62, 153, 209, 168, 61, 40, 209, 133, 188, 225, 168, 25, 190, 70, 107, 218, 188, 152, 136, 208, 188, 164, 18, 139, 189, 197, 39, 68, 190, 23, 65, 39, 61, 133, 4, 24, 190, 43, 6, 12, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 46, 40, 62, 8, 239, 129, 60, 253, 124, 60, 61, 175, 167, 162, 189, 166, 118, 61, 189, 39, 59, 96, 62, 60, 59, 132, 62, 175, 240, 16, 190, 156, 133, 209, 61, 2, 55, 239, 189, 137, 79, 118, 62, 179, 179, 3, 186, 115, 173, 159, 62, 84, 120, 102, 61, 183, 74, 5, 61, 230, 246, 53, 62, 205, 14, 74, 190, 177, 142, 77, 190, 248, 225, 0, 62, 78, 144, 3, 62, 50, 41, 69, 190, 220, 85, 115, 61, 36, 151, 145, 62, 160, 215, 58, 62, 251, 100, 3, 186, 251, 106, 61, 61, 240, 26, 124, 62, 75, 67, 23, 188, 186, 200, 78, 189, 58, 186, 36, 190, 208, 40, 49, 62, 20, 190, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 131, 237, 189, 35, 63, 184, 62, 35, 52, 181, 190, 93, 125, 189, 190, 195, 71, 126, 190, 101, 101, 91, 190, 182, 249, 92, 189, 159, 54, 220, 189, 212, 150, 189, 190, 42, 233, 59, 191, 205, 1, 91, 191, 195, 153, 154, 62, 121, 78, 182, 61, 113, 141, 243, 190, 33, 229, 72, 61, 31, 154, 9, 62, 117, 148, 68, 190, 36, 27, 66, 61, 130, 183, 204, 190, 146, 232, 35, 63, 241, 208, 208, 190, 132, 86, 180, 61, 163, 97, 86, 63, 7, 69, 206, 62, 200, 19, 11, 63, 197, 160, 184, 190, 188, 1, 254, 62, 150, 236, 203, 62, 98, 62, 200, 190, 35, 127, 123, 60, 125, 205, 177, 190, 40, 37, 91, 61, 192, 245, 121, 190, 142, 79, 120, 62, 105, 207, 222, 189, 56, 214, 138, 189, 211, 25, 45, 190, 3, 213, 149, 190, 205, 122, 171, 190, 129, 33, 223, 189, 249, 27, 54, 62, 141, 77, 143, 61, 59, 14, 249, 61, 56, 31, 244, 189, 204, 200, 99, 190, 234, 59, 81, 59, 211, 226, 226, 61, 122, 119, 183, 62, 86, 38, 62, 62, 149, 243, 150, 188, 228, 151, 136, 62, 17, 227, 144, 62, 1, 209, 147, 61, 156, 198, 42, 61, 110, 176, 18, 61, 236, 175, 20, 61, 191, 88, 45, 190, 156, 80, 13, 188, 35, 38, 162, 190, 94, 180, 131, 61, 18, 0, 12, 63, 164, 10, 184, 62, 22, 215, 141, 190, 176, 41, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 80, 126, 189, 1, 249, 163, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 55, 148, 191, 225, 59, 209, 190, 231, 183, 230, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 234, 207, 190, 222, 76, 226, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}