// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 176, 181, 190, 75, 41, 164, 190, 160, 146, 65, 190, 93, 32, 79, 63, 34, 163, 103, 190, 239, 125, 57, 190, 79, 19, 40, 188, 184, 202, 162, 190, 204, 84, 5, 191, 97, 14, 33, 63, 255, 179, 38, 61, 31, 222, 70, 190, 242, 81, 244, 190, 115, 53, 223, 189, 231, 72, 145, 62, 114, 6, 176, 62, 23, 75, 7, 63, 24, 129, 194, 190, 254, 83, 233, 189, 113, 22, 209, 61, 243, 163, 186, 61, 162, 214, 3, 63, 234, 193, 0, 62, 181, 73, 137, 62, 53, 31, 3, 191, 205, 230, 31, 63, 235, 194, 166, 62, 80, 178, 151, 61, 196, 81, 208, 62, 180, 181, 210, 62, 211, 169, 5, 62, 140, 72, 254, 62, 45, 105, 23, 190, 230, 214, 117, 62, 19, 83, 105, 191, 71, 15, 239, 62, 248, 11, 243, 62, 113, 250, 179, 62, 48, 62, 235, 62, 46, 179, 130, 190, 112, 66, 227, 62, 27, 252, 24, 190, 33, 252, 207, 190, 73, 0, 152, 62, 191, 180, 86, 60, 76, 32, 85, 62, 133, 208, 61, 63, 58, 147, 58, 62, 100, 105, 246, 188, 68, 174, 33, 191, 117, 16, 107, 189, 187, 179, 78, 63, 124, 151, 9, 62, 40, 95, 190, 189, 88, 175, 54, 188, 245, 243, 4, 191, 182, 104, 6, 62, 220, 65, 117, 190, 248, 26, 22, 60, 38, 167, 183, 62, 86, 184, 112, 190, 114, 58, 37, 62, 45, 143, 93, 189, 187, 92, 22, 63, 4, 95, 41, 63, 237, 52, 108, 60, 143, 137, 81, 63, 115, 132, 149, 190, 214, 123, 86, 190, 144, 28, 16, 63, 247, 157, 77, 63, 193, 30, 144, 62, 5, 22, 236, 61, 225, 162, 190, 190, 162, 219, 190, 190, 2, 78, 191, 62, 211, 221, 255, 62, 119, 173, 155, 62, 158, 214, 159, 59, 184, 75, 137, 62, 188, 34, 188, 62, 61, 112, 191, 190, 246, 38, 127, 62, 192, 228, 174, 190, 198, 118, 5, 191, 142, 194, 101, 63, 42, 193, 59, 62, 107, 178, 252, 62, 185, 140, 103, 190, 220, 223, 38, 190, 14, 223, 39, 62, 160, 112, 48, 191, 105, 149, 143, 190, 172, 96, 168, 190, 3, 0, 209, 190, 149, 243, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 74, 24, 191, 49, 40, 209, 189, 31, 248, 183, 190, 204, 22, 244, 189, 94, 10, 206, 190, 166, 123, 114, 190, 197, 246, 35, 63, 55, 2, 32, 190, 68, 236, 131, 190, 139, 30, 1, 191, 53, 22, 185, 62, 53, 217, 250, 62, 68, 232, 82, 190, 27, 232, 167, 188, 164, 63, 174, 190, 114, 174, 244, 61, 32, 90, 188, 62, 230, 113, 86, 62, 21, 37, 13, 62, 75, 34, 190, 189, 216, 52, 22, 190, 237, 7, 132, 61, 99, 173, 48, 63, 131, 109, 151, 61, 40, 253, 13, 191, 167, 22, 188, 60, 166, 11, 4, 191, 48, 5, 153, 189, 149, 67, 52, 63, 135, 222, 43, 190, 113, 231, 160, 61, 98, 181, 246, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 139, 207, 188, 222, 232, 228, 61, 90, 225, 40, 189, 139, 34, 63, 190, 20, 213, 130, 189, 114, 26, 193, 189, 161, 248, 3, 61, 125, 91, 90, 189, 165, 204, 22, 62, 163, 80, 246, 61, 151, 173, 39, 62, 32, 95, 186, 61, 34, 179, 209, 61, 49, 247, 192, 187, 177, 230, 50, 190, 101, 123, 10, 62, 252, 151, 189, 190, 231, 106, 25, 62, 62, 224, 119, 190, 193, 94, 174, 61, 191, 3, 182, 189, 53, 104, 190, 61, 125, 118, 1, 62, 184, 208, 185, 188, 251, 90, 249, 189, 49, 192, 133, 61, 149, 209, 46, 62, 97, 242, 4, 189, 136, 44, 7, 62, 169, 114, 84, 190, 154, 86, 245, 188, 175, 8, 7, 189, 146, 161, 124, 186, 201, 44, 175, 189, 109, 157, 179, 61, 8, 170, 248, 189, 192, 36, 42, 189, 17, 238, 202, 61, 1, 231, 64, 189, 37, 112, 168, 61, 164, 188, 96, 59, 40, 196, 24, 62, 235, 28, 6, 189, 21, 135, 153, 189, 148, 114, 47, 62, 227, 145, 187, 61, 122, 65, 140, 61, 178, 57, 226, 61, 167, 175, 92, 190, 140, 20, 0, 190, 112, 36, 0, 190, 86, 237, 1, 190, 24, 5, 154, 61, 250, 151, 85, 189, 228, 47, 129, 189, 92, 249, 36, 62, 100, 98, 131, 189, 156, 103, 186, 60, 47, 86, 182, 61, 211, 33, 251, 189, 218, 73, 157, 60, 101, 208, 45, 61, 251, 9, 229, 189, 253, 36, 204, 190, 22, 54, 226, 188, 8, 76, 107, 189, 126, 158, 67, 190, 124, 241, 138, 61, 37, 19, 9, 190, 59, 247, 89, 59, 4, 212, 91, 62, 186, 227, 42, 57, 243, 184, 100, 61, 222, 196, 38, 62, 50, 203, 132, 62, 99, 153, 25, 189, 162, 149, 12, 62, 111, 149, 206, 62, 205, 92, 13, 190, 8, 122, 40, 62, 93, 24, 44, 190, 106, 199, 23, 62, 243, 52, 128, 189, 46, 17, 71, 189, 156, 85, 144, 189, 86, 134, 243, 61, 196, 253, 11, 190, 231, 78, 30, 190, 168, 150, 12, 190, 45, 162, 46, 62, 175, 108, 247, 189, 201, 23, 196, 61, 32, 214, 45, 62, 82, 204, 228, 190, 231, 10, 83, 190, 241, 35, 54, 190, 58, 129, 41, 189, 182, 203, 192, 60, 135, 54, 168, 189, 179, 37, 57, 190, 187, 170, 189, 61, 242, 17, 196, 61, 135, 112, 34, 190, 69, 240, 193, 61, 59, 198, 220, 61, 84, 38, 11, 190, 212, 187, 23, 189, 94, 25, 35, 62, 49, 233, 1, 62, 147, 189, 35, 62, 30, 218, 74, 61, 26, 184, 166, 60, 254, 218, 241, 57, 12, 218, 255, 58, 81, 82, 53, 62, 27, 16, 210, 189, 116, 161, 34, 190, 0, 243, 229, 189, 147, 124, 102, 190, 95, 220, 56, 190, 247, 45, 1, 62, 28, 34, 118, 61, 126, 100, 147, 61, 86, 137, 199, 189, 122, 193, 109, 189, 24, 86, 81, 189, 185, 118, 122, 189, 75, 159, 141, 188, 253, 10, 88, 60, 224, 98, 155, 189, 45, 105, 189, 189, 127, 10, 16, 61, 2, 20, 0, 62, 113, 216, 249, 61, 223, 128, 30, 62, 82, 253, 23, 190, 142, 252, 20, 189, 155, 191, 134, 61, 130, 122, 120, 62, 37, 112, 60, 189, 158, 216, 170, 189, 180, 29, 191, 62, 143, 76, 36, 61, 1, 98, 159, 62, 2, 27, 175, 190, 104, 76, 238, 60, 124, 146, 242, 189, 81, 204, 6, 190, 249, 55, 86, 189, 253, 235, 211, 188, 132, 57, 175, 61, 176, 77, 65, 61, 40, 207, 92, 190, 108, 136, 180, 61, 38, 197, 168, 61, 115, 240, 87, 61, 14, 194, 64, 62, 194, 108, 187, 190, 41, 97, 20, 190, 148, 115, 96, 61, 208, 3, 59, 189, 0, 55, 7, 60, 80, 98, 249, 61, 98, 99, 30, 190, 75, 107, 147, 60, 2, 209, 190, 188, 85, 213, 221, 61, 34, 176, 29, 190, 176, 124, 96, 190, 164, 249, 61, 190, 109, 85, 224, 61, 105, 229, 79, 190, 115, 67, 37, 190, 207, 200, 183, 62, 23, 165, 153, 61, 21, 14, 6, 61, 238, 136, 55, 190, 54, 170, 144, 189, 181, 76, 102, 189, 67, 126, 118, 61, 156, 62, 250, 61, 111, 124, 151, 62, 10, 148, 11, 62, 202, 119, 14, 189, 243, 139, 77, 190, 225, 239, 181, 189, 255, 54, 247, 61, 10, 241, 215, 189, 221, 203, 96, 62, 153, 130, 186, 190, 54, 141, 66, 188, 241, 237, 88, 190, 72, 41, 3, 62, 119, 27, 34, 62, 133, 71, 116, 61, 237, 57, 72, 62, 255, 60, 52, 62, 178, 82, 145, 61, 202, 187, 1, 190, 212, 54, 26, 61, 85, 255, 33, 189, 232, 185, 70, 188, 172, 169, 162, 189, 202, 91, 58, 62, 237, 50, 207, 61, 5, 112, 185, 60, 38, 147, 189, 189, 79, 137, 213, 61, 2, 212, 152, 61, 231, 54, 188, 60, 10, 14, 72, 61, 58, 154, 30, 189, 62, 251, 232, 187, 49, 112, 15, 62, 162, 159, 162, 60, 193, 151, 11, 62, 231, 144, 6, 62, 98, 38, 201, 61, 166, 47, 147, 189, 143, 130, 178, 61, 47, 217, 23, 190, 235, 239, 224, 189, 223, 5, 158, 189, 116, 229, 178, 61, 193, 25, 32, 189, 232, 129, 11, 189, 222, 130, 11, 189, 124, 30, 74, 189, 179, 229, 177, 61, 233, 27, 204, 61, 32, 68, 218, 189, 253, 196, 222, 189, 214, 77, 106, 61, 129, 13, 208, 61, 8, 203, 172, 61, 154, 251, 140, 189, 37, 171, 30, 190, 51, 102, 11, 61, 162, 98, 103, 189, 129, 73, 21, 190, 132, 184, 12, 190, 72, 110, 209, 61, 120, 47, 163, 61, 61, 150, 147, 189, 58, 130, 196, 61, 114, 40, 205, 61, 193, 152, 135, 60, 46, 1, 83, 189, 35, 110, 48, 61, 226, 111, 11, 190, 204, 122, 40, 189, 171, 207, 247, 189, 178, 50, 12, 189, 215, 141, 32, 189, 205, 12, 2, 190, 59, 241, 245, 189, 98, 28, 12, 190, 44, 87, 226, 61, 196, 236, 226, 61, 214, 254, 220, 61, 163, 110, 51, 61, 169, 204, 54, 189, 19, 42, 63, 62, 176, 146, 164, 187, 185, 8, 27, 62, 8, 78, 230, 61, 84, 64, 67, 189, 199, 71, 194, 189, 46, 195, 3, 61, 46, 61, 117, 188, 29, 83, 9, 190, 168, 68, 20, 62, 3, 127, 120, 190, 113, 120, 4, 189, 3, 129, 249, 189, 157, 0, 51, 190, 117, 245, 94, 62, 248, 208, 130, 62, 202, 213, 227, 188, 190, 154, 53, 62, 175, 79, 226, 189, 229, 94, 93, 61, 78, 36, 36, 190, 229, 77, 26, 189, 54, 24, 147, 62, 213, 244, 132, 190, 80, 81, 121, 190, 254, 58, 95, 190, 80, 196, 29, 62, 212, 211, 60, 61, 106, 233, 194, 61, 40, 120, 32, 61, 204, 128, 131, 189, 127, 42, 253, 61, 216, 207, 210, 60, 67, 223, 100, 61, 253, 172, 114, 61, 105, 29, 36, 190, 37, 200, 6, 190, 255, 245, 242, 188, 55, 236, 236, 189, 160, 253, 248, 189, 18, 83, 111, 61, 27, 203, 31, 62, 88, 2, 174, 189, 196, 0, 191, 188, 91, 129, 245, 189, 41, 70, 205, 189, 237, 47, 35, 187, 3, 136, 167, 190, 12, 36, 21, 189, 231, 196, 220, 60, 124, 150, 210, 58, 174, 245, 25, 189, 17, 227, 30, 62, 39, 85, 185, 61, 92, 189, 10, 62, 126, 19, 83, 189, 92, 171, 130, 189, 202, 143, 54, 62, 23, 121, 16, 187, 222, 125, 230, 61, 43, 205, 26, 190, 177, 143, 253, 59, 178, 41, 218, 189, 40, 243, 41, 61, 143, 204, 166, 188, 233, 172, 91, 190, 175, 240, 1, 62, 57, 14, 59, 190, 68, 234, 71, 62, 150, 135, 178, 190, 82, 72, 40, 61, 134, 2, 15, 62, 139, 173, 134, 61, 59, 188, 110, 61, 12, 122, 216, 189, 255, 189, 63, 189, 21, 31, 245, 190, 32, 58, 94, 190, 225, 242, 247, 60, 232, 28, 218, 60, 244, 120, 145, 189, 162, 98, 219, 61, 139, 82, 74, 190, 119, 229, 98, 189, 161, 200, 12, 61, 111, 116, 237, 188, 164, 220, 107, 62, 200, 87, 86, 190, 80, 80, 144, 60, 16, 109, 218, 187, 195, 1, 113, 190, 250, 162, 66, 189, 146, 221, 56, 60, 181, 190, 68, 62, 173, 106, 229, 189, 149, 242, 98, 62, 191, 233, 207, 188, 23, 65, 11, 189, 24, 147, 242, 188, 143, 128, 77, 190, 213, 169, 249, 189, 67, 187, 60, 62, 190, 229, 45, 60, 30, 140, 110, 61, 241, 125, 128, 190, 154, 164, 127, 190, 108, 75, 181, 187, 198, 99, 21, 62, 49, 152, 145, 62, 66, 132, 224, 61, 13, 13, 138, 190, 229, 196, 13, 62, 99, 46, 207, 61, 206, 77, 57, 190, 1, 172, 59, 190, 90, 167, 229, 189, 205, 157, 47, 189, 19, 77, 69, 60, 30, 184, 138, 60, 252, 63, 171, 188, 201, 76, 19, 62, 171, 123, 71, 62, 44, 244, 145, 190, 25, 7, 5, 62, 225, 34, 2, 62, 127, 249, 188, 189, 240, 247, 242, 189, 26, 210, 29, 61, 185, 151, 218, 61, 19, 227, 141, 190, 106, 146, 214, 189, 97, 228, 112, 190, 107, 32, 54, 62, 96, 87, 149, 62, 224, 173, 37, 190, 239, 144, 148, 189, 232, 37, 64, 190, 244, 42, 144, 189, 55, 22, 76, 62, 101, 2, 80, 62, 28, 9, 251, 62, 60, 151, 79, 60, 8, 32, 55, 189, 156, 62, 134, 60, 97, 214, 12, 62, 114, 95, 106, 190, 219, 47, 130, 189, 222, 186, 7, 190, 194, 40, 155, 61, 37, 151, 176, 187, 192, 14, 148, 190, 213, 1, 209, 61, 171, 86, 203, 61, 105, 62, 143, 61, 49, 78, 250, 61, 144, 216, 59, 187, 63, 220, 185, 189, 176, 250, 41, 189, 86, 26, 184, 61, 63, 97, 234, 61, 113, 246, 241, 61, 101, 241, 247, 61, 184, 190, 95, 61, 3, 164, 187, 189, 139, 247, 31, 190, 136, 134, 131, 189, 144, 89, 235, 60, 70, 92, 208, 189, 41, 249, 9, 190, 95, 60, 109, 189, 63, 135, 226, 189, 153, 65, 250, 188, 196, 238, 153, 189, 207, 151, 19, 188, 82, 62, 169, 189, 54, 117, 21, 190, 83, 237, 227, 189, 152, 175, 33, 62, 198, 218, 229, 187, 25, 254, 36, 190, 45, 2, 48, 190, 166, 105, 44, 61, 18, 213, 137, 187, 225, 66, 122, 60, 242, 128, 47, 61, 107, 203, 71, 189, 226, 5, 66, 189, 23, 202, 8, 62, 28, 126, 152, 61, 214, 212, 166, 189, 221, 205, 64, 188, 7, 1, 229, 60, 76, 179, 193, 61, 107, 80, 98, 61, 141, 223, 60, 190, 115, 151, 222, 189, 240, 210, 31, 190, 147, 130, 21, 190, 199, 92, 141, 61, 31, 15, 147, 60, 180, 28, 50, 190, 180, 182, 29, 190, 163, 15, 0, 62, 56, 152, 56, 187, 148, 127, 13, 189, 196, 15, 219, 61, 142, 238, 28, 190, 68, 16, 89, 189, 228, 106, 43, 190, 200, 240, 224, 189, 154, 103, 222, 189, 227, 34, 87, 189, 27, 253, 196, 189, 172, 31, 147, 61, 199, 106, 62, 60, 245, 134, 179, 189, 217, 181, 94, 189, 117, 199, 98, 190, 229, 3, 240, 189, 196, 190, 81, 62, 61, 78, 165, 189, 230, 25, 78, 62, 221, 37, 204, 189, 84, 247, 2, 62, 248, 156, 131, 190, 148, 49, 137, 59, 19, 122, 55, 61, 236, 157, 15, 62, 176, 13, 233, 60, 106, 207, 40, 190, 228, 129, 45, 62, 94, 135, 16, 190, 118, 254, 250, 188, 64, 103, 130, 190, 255, 143, 204, 61, 82, 158, 209, 188, 112, 120, 82, 187, 229, 246, 238, 189, 31, 240, 214, 60, 117, 172, 39, 190, 14, 111, 26, 61, 149, 222, 7, 189, 255, 34, 100, 189, 198, 73, 139, 59, 15, 152, 234, 189, 162, 207, 14, 190, 30, 199, 124, 190, 137, 252, 82, 189, 138, 82, 28, 62, 161, 69, 125, 189, 211, 189, 1, 61, 117, 18, 0, 190, 79, 6, 28, 190, 216, 126, 31, 62, 182, 47, 239, 189, 205, 81, 254, 61, 40, 119, 214, 61, 116, 232, 72, 61, 103, 46, 2, 190, 240, 102, 23, 190, 55, 205, 132, 189, 153, 208, 177, 61, 4, 92, 189, 61, 20, 93, 252, 61, 157, 224, 29, 62, 41, 145, 195, 189, 115, 101, 167, 61, 114, 237, 9, 186, 110, 16, 113, 61, 93, 121, 36, 61, 84, 246, 107, 60, 161, 5, 169, 189, 130, 73, 60, 190, 24, 59, 11, 62, 175, 99, 37, 62, 196, 145, 30, 190, 201, 78, 243, 60, 240, 225, 31, 61, 214, 169, 37, 189, 99, 174, 224, 61, 110, 54, 227, 189, 156, 55, 186, 188, 65, 135, 179, 189, 79, 152, 75, 189, 225, 206, 81, 189, 151, 246, 18, 187, 222, 113, 169, 189, 151, 118, 114, 189, 252, 226, 204, 61, 223, 187, 32, 190, 66, 145, 181, 60, 244, 255, 179, 61, 251, 64, 4, 189, 109, 78, 67, 190, 207, 95, 130, 189, 253, 94, 245, 59, 216, 126, 204, 61, 67, 173, 30, 62, 216, 11, 40, 190, 232, 81, 34, 59, 155, 117, 195, 60, 235, 212, 204, 61, 102, 200, 167, 189, 111, 186, 176, 189, 12, 78, 190, 60, 127, 45, 24, 62, 93, 26, 44, 61, 129, 194, 249, 61, 27, 221, 164, 189, 56, 180, 11, 62, 12, 226, 33, 190, 177, 103, 92, 56, 9, 185, 179, 189, 5, 44, 129, 61, 60, 49, 2, 190, 182, 62, 129, 189, 119, 246, 217, 61, 45, 120, 66, 190, 83, 149, 252, 189, 150, 227, 29, 62, 255, 223, 7, 190, 246, 63, 108, 189, 14, 68, 106, 188, 102, 127, 106, 189, 86, 21, 10, 187, 102, 124, 21, 62, 250, 55, 152, 189, 104, 21, 206, 189, 232, 197, 35, 189, 191, 163, 27, 190, 218, 117, 72, 190, 83, 224, 97, 190, 189, 249, 171, 61, 41, 206, 32, 189, 159, 42, 214, 189, 174, 54, 24, 190, 2, 186, 54, 190, 1, 73, 244, 61, 220, 73, 166, 189, 126, 71, 179, 61, 76, 216, 231, 60, 252, 135, 12, 190, 213, 80, 198, 189, 175, 138, 19, 189, 76, 249, 26, 190, 231, 192, 149, 188, 194, 100, 146, 190, 153, 145, 68, 62, 250, 62, 147, 189, 231, 136, 153, 62, 115, 225, 24, 62, 7, 249, 22, 62, 121, 124, 200, 61, 194, 188, 151, 188, 151, 220, 38, 62, 206, 112, 245, 189, 98, 61, 143, 190, 168, 200, 69, 61, 127, 207, 87, 190, 65, 105, 36, 190, 47, 146, 255, 59, 239, 58, 131, 190, 195, 111, 222, 61, 10, 173, 142, 61, 72, 177, 0, 62, 91, 60, 34, 189, 169, 58, 180, 189, 219, 93, 228, 189, 236, 161, 113, 62, 253, 165, 37, 189, 230, 2, 155, 60, 102, 159, 39, 190, 194, 175, 235, 188, 1, 200, 131, 190, 104, 120, 84, 187, 214, 214, 79, 62, 24, 16, 94, 62, 217, 160, 111, 61, 122, 55, 227, 61, 251, 209, 249, 188, 244, 130, 210, 60, 28, 27, 49, 62, 145, 159, 190, 189, 161, 204, 181, 61, 225, 147, 163, 190, 86, 168, 220, 61, 149, 119, 33, 61, 255, 68, 127, 188, 186, 83, 147, 61, 89, 87, 186, 188, 119, 87, 17, 190, 85, 117, 52, 190, 113, 15, 186, 187, 118, 94, 64, 189, 140, 135, 194, 61, 89, 130, 152, 58, 115, 153, 159, 60, 114, 28, 222, 189, 54, 161, 219, 188, 162, 28, 32, 190, 94, 227, 253, 60, 65, 191, 231, 189, 104, 241, 245, 61, 229, 249, 12, 190, 235, 93, 10, 190, 85, 158, 56, 190, 138, 176, 168, 189, 140, 10, 128, 189, 241, 170, 33, 62, 93, 140, 58, 190, 33, 42, 147, 61, 168, 61, 214, 188, 158, 109, 92, 189, 142, 37, 194, 189, 97, 219, 36, 187, 83, 168, 216, 189, 130, 145, 11, 190, 238, 26, 61, 62, 84, 87, 90, 61, 5, 3, 155, 61, 170, 245, 31, 190, 216, 69, 2, 190, 113, 71, 132, 61, 199, 195, 237, 189, 61, 40, 76, 190, 97, 153, 199, 189, 42, 120, 192, 189, 213, 98, 254, 59, 52, 222, 253, 189, 195, 253, 49, 190, 255, 172, 177, 61, 136, 45, 53, 62, 51, 153, 33, 190, 144, 249, 1, 189, 149, 122, 162, 60, 197, 181, 136, 189, 230, 104, 22, 62, 253, 186, 51, 189, 66, 95, 80, 188, 142, 56, 208, 61, 63, 32, 218, 189, 187, 226, 183, 189, 37, 91, 27, 61, 78, 149, 154, 60, 128, 186, 77, 190, 123, 42, 200, 189, 97, 58, 242, 61, 122, 230, 111, 190, 96, 2, 253, 61, 161, 129, 172, 190, 218, 6, 10, 62, 209, 109, 25, 61, 201, 99, 97, 190, 194, 62, 50, 62, 189, 110, 153, 190, 48, 227, 3, 191, 135, 65, 116, 190, 227, 243, 221, 189, 141, 187, 82, 61, 24, 29, 80, 61, 79, 59, 162, 62, 76, 84, 252, 188, 151, 94, 31, 190, 39, 74, 47, 62, 4, 78, 34, 62, 207, 61, 101, 189, 26, 149, 233, 61, 234, 160, 29, 190, 184, 35, 87, 190, 54, 140, 168, 189, 22, 59, 251, 189, 208, 225, 216, 189, 74, 223, 253, 61, 155, 182, 95, 62, 189, 220, 27, 62, 51, 154, 3, 190, 227, 122, 213, 188, 75, 96, 184, 189, 142, 216, 216, 189, 66, 91, 59, 62, 32, 116, 245, 189, 6, 191, 26, 190, 130, 195, 97, 189, 83, 82, 40, 187, 254, 83, 232, 189, 128, 216, 22, 61, 108, 212, 222, 188, 48, 2, 198, 189, 145, 225, 138, 61, 230, 141, 218, 61, 196, 70, 134, 61, 9, 211, 90, 190, 61, 160, 36, 190, 195, 209, 228, 188, 155, 131, 8, 62, 155, 204, 15, 190, 18, 122, 6, 190, 29, 56, 190, 61, 58, 143, 135, 189, 50, 253, 251, 61, 198, 5, 198, 189, 18, 219, 186, 189, 0, 168, 192, 61, 122, 73, 61, 60, 244, 111, 66, 189, 57, 65, 50, 190, 111, 66, 64, 189, 31, 190, 54, 189, 49, 158, 154, 189, 184, 207, 209, 189, 42, 131, 23, 62, 241, 200, 184, 189, 195, 216, 47, 189, 171, 194, 25, 190, 176, 107, 214, 61, 9, 8, 236, 189, 247, 107, 124, 189, 154, 64, 16, 62, 0, 4, 25, 189, 115, 168, 135, 61, 231, 21, 213, 189, 22, 163, 55, 61, 24, 236, 28, 190, 244, 80, 190, 189, 139, 36, 46, 62, 153, 11, 214, 188, 20, 142, 208, 189, 156, 77, 40, 187, 127, 212, 55, 189, 140, 130, 131, 61, 64, 116, 20, 62, 214, 97, 251, 61, 25, 15, 20, 61, 93, 40, 5, 190, 37, 82, 0, 62, 53, 189, 29, 62, 231, 224, 134, 60, 179, 162, 89, 61, 197, 3, 248, 61, 241, 175, 152, 190, 90, 241, 178, 190, 183, 216, 200, 189, 121, 62, 22, 190, 13, 12, 20, 61, 175, 17, 150, 61, 254, 222, 225, 61, 118, 203, 14, 62, 54, 18, 83, 187, 241, 70, 197, 62, 199, 81, 177, 60, 221, 4, 9, 60, 12, 183, 161, 62, 16, 3, 6, 62, 71, 155, 146, 61, 216, 207, 201, 190, 215, 11, 211, 60, 65, 164, 65, 190, 151, 90, 97, 189, 6, 98, 53, 62, 176, 113, 45, 62, 151, 114, 139, 61, 224, 239, 13, 62, 10, 185, 90, 190, 97, 188, 103, 188, 12, 191, 196, 188, 136, 19, 230, 61, 79, 190, 134, 62, 221, 87, 106, 190, 31, 110, 161, 190, 189, 147, 21, 62, 107, 241, 133, 190, 248, 107, 89, 62, 103, 200, 106, 189, 184, 111, 16, 60, 252, 51, 188, 61, 159, 51, 72, 62, 124, 119, 107, 62, 164, 16, 184, 190, 123, 236, 248, 188, 136, 174, 85, 190, 154, 176, 61, 189, 14, 93, 147, 62, 154, 62, 179, 189, 19, 82, 143, 188, 187, 222, 64, 190, 78, 98, 173, 190, 98, 202, 103, 62, 64, 197, 155, 62, 154, 207, 135, 62, 145, 62, 70, 60, 30, 120, 201, 189, 145, 130, 136, 59, 127, 8, 150, 62, 227, 132, 77, 190, 231, 46, 31, 190, 240, 34, 3, 190, 33, 11, 101, 189, 242, 185, 34, 190, 85, 137, 172, 190, 140, 128, 76, 61, 194, 154, 70, 60, 230, 191, 145, 62, 181, 78, 153, 190, 207, 235, 145, 62, 221, 218, 104, 188, 109, 73, 139, 189, 241, 27, 95, 189, 143, 39, 245, 61, 99, 149, 209, 61, 169, 67, 50, 190, 206, 172, 94, 189, 185, 233, 52, 186, 171, 89, 12, 62, 98, 206, 111, 62, 75, 170, 168, 189, 207, 204, 109, 190, 72, 116, 65, 62, 224, 185, 6, 191, 186, 171, 141, 62, 114, 237, 40, 62, 238, 204, 96, 62, 48, 240, 32, 61, 181, 242, 251, 189, 251, 13, 86, 61, 232, 41, 10, 62, 222, 238, 78, 190, 243, 209, 94, 190, 218, 161, 32, 190, 163, 87, 83, 58, 132, 176, 166, 188, 62, 189, 68, 189, 81, 93, 200, 62, 146, 159, 51, 59, 34, 213, 133, 62, 77, 110, 53, 62, 153, 147, 108, 190, 71, 15, 92, 190, 184, 77, 48, 189, 192, 88, 252, 61, 155, 159, 185, 189, 93, 94, 165, 61, 47, 250, 31, 62, 24, 245, 26, 59, 192, 83, 155, 189, 23, 167, 159, 62, 220, 129, 254, 188, 116, 139, 116, 61, 232, 164, 8, 62, 205, 175, 154, 189, 168, 17, 37, 61, 239, 69, 54, 190, 16, 118, 210, 61, 244, 171, 107, 190, 126, 69, 194, 186, 228, 172, 93, 61, 4, 128, 211, 61, 45, 203, 158, 189, 77, 194, 174, 61, 220, 166, 3, 190, 133, 70, 188, 186, 95, 62, 30, 62, 18, 2, 38, 62, 52, 201, 131, 62, 0, 157, 135, 190, 107, 199, 174, 189, 92, 96, 193, 59, 68, 13, 43, 62, 74, 184, 246, 61, 165, 31, 132, 189, 227, 59, 188, 189, 73, 32, 1, 62, 141, 125, 25, 189, 114, 239, 65, 190, 236, 114, 180, 189, 176, 227, 25, 62, 161, 3, 26, 62, 118, 13, 97, 188, 12, 188, 4, 190, 200, 19, 227, 61, 95, 169, 79, 189, 120, 9, 191, 187, 32, 9, 162, 188, 223, 0, 155, 61, 70, 126, 131, 61, 243, 153, 86, 190, 138, 66, 219, 60, 87, 114, 55, 189, 176, 139, 2, 62, 71, 123, 0, 62, 220, 29, 133, 189, 58, 0, 155, 189, 122, 81, 46, 187, 46, 90, 90, 188, 138, 14, 115, 61, 205, 92, 228, 61, 111, 90, 223, 60, 116, 114, 197, 61, 215, 185, 128, 190, 216, 59, 48, 190, 138, 64, 82, 190, 89, 42, 211, 189, 211, 183, 16, 62, 50, 9, 156, 61, 158, 201, 50, 188, 207, 157, 76, 189, 30, 41, 189, 188, 164, 240, 46, 190, 163, 161, 52, 61, 56, 161, 226, 61, 214, 74, 142, 188, 194, 121, 45, 61, 163, 237, 38, 62, 158, 100, 105, 189, 101, 231, 177, 188, 65, 213, 133, 190, 192, 214, 53, 62, 85, 239, 4, 190, 170, 149, 250, 189, 108, 250, 17, 190, 103, 178, 150, 188, 132, 60, 99, 61, 25, 11, 54, 189, 217, 108, 19, 190, 64, 4, 8, 62, 86, 170, 32, 62, 247, 84, 38, 188, 12, 67, 24, 62, 243, 3, 207, 190, 63, 8, 53, 189, 152, 196, 53, 189, 153, 47, 145, 61, 103, 190, 212, 187, 5, 192, 211, 189, 50, 225, 79, 189, 246, 35, 202, 61, 173, 245, 4, 189, 55, 152, 9, 190, 211, 111, 170, 188, 184, 124, 39, 62, 218, 120, 212, 61, 59, 176, 198, 189, 96, 4, 27, 190, 194, 27, 121, 189, 99, 232, 142, 61, 113, 180, 144, 59, 247, 4, 112, 189, 21, 100, 49, 61, 109, 216, 185, 61, 57, 178, 19, 62, 223, 134, 15, 190, 220, 108, 178, 189, 195, 27, 13, 62, 10, 58, 176, 61, 85, 147, 253, 186, 225, 168, 25, 190, 131, 95, 148, 188, 152, 136, 208, 188, 164, 18, 139, 189, 6, 1, 56, 190, 167, 115, 37, 61, 252, 90, 26, 190, 111, 203, 16, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 247, 34, 62, 92, 2, 148, 59, 15, 45, 88, 61, 225, 58, 191, 189, 133, 50, 1, 189, 185, 220, 66, 62, 230, 160, 42, 61, 159, 23, 11, 190, 17, 74, 11, 62, 160, 148, 61, 190, 43, 104, 73, 62, 90, 185, 146, 188, 162, 254, 150, 62, 232, 66, 154, 189, 183, 74, 5, 61, 144, 144, 135, 61, 100, 191, 73, 190, 165, 158, 66, 190, 139, 154, 143, 61, 243, 251, 226, 61, 160, 0, 97, 190, 220, 85, 115, 61, 195, 28, 61, 62, 11, 239, 222, 61, 210, 143, 211, 189, 206, 146, 208, 61, 86, 95, 130, 62, 204, 58, 196, 60, 71, 173, 52, 188, 174, 77, 246, 189, 170, 176, 30, 62, 200, 171, 42, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 213, 227, 189, 48, 58, 48, 62, 117, 243, 110, 190, 84, 189, 63, 190, 110, 23, 110, 190, 115, 233, 38, 190, 185, 206, 111, 188, 222, 64, 220, 189, 13, 252, 122, 190, 214, 127, 27, 190, 186, 129, 187, 190, 249, 173, 45, 62, 249, 197, 226, 61, 128, 48, 196, 189, 33, 229, 72, 61, 40, 144, 40, 60, 86, 139, 176, 61, 114, 200, 60, 61, 93, 7, 2, 190, 126, 91, 166, 62, 80, 231, 242, 189, 132, 86, 180, 61, 61, 19, 162, 62, 24, 152, 255, 60, 92, 103, 3, 62, 120, 147, 151, 190, 10, 26, 213, 62, 214, 108, 166, 62, 226, 22, 28, 190, 126, 197, 14, 187, 97, 218, 82, 190, 209, 20, 75, 61, 7, 158, 122, 189, 20, 137, 45, 62, 21, 104, 53, 190, 60, 111, 17, 190, 121, 85, 47, 190, 87, 23, 71, 190, 214, 217, 5, 190, 46, 162, 223, 189, 163, 97, 124, 61, 123, 54, 188, 61, 254, 127, 244, 188, 84, 127, 20, 190, 242, 126, 203, 189, 48, 122, 128, 188, 211, 226, 226, 61, 198, 231, 12, 62, 197, 19, 161, 61, 202, 137, 180, 188, 65, 12, 23, 62, 105, 175, 8, 62, 117, 146, 152, 61, 156, 198, 42, 61, 27, 147, 103, 189, 126, 113, 208, 189, 72, 224, 235, 189, 45, 209, 145, 189, 19, 195, 109, 190, 247, 224, 255, 59, 90, 216, 14, 62, 165, 210, 94, 61, 165, 103, 72, 190, 215, 158, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 180, 6, 59, 12, 179, 244, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 195, 183, 189, 171, 191, 1, 191, 16, 199, 117, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 226, 190, 63, 137, 133, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0026/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}