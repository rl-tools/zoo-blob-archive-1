// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 37, 95, 63, 77, 212, 11, 63, 237, 141, 157, 189, 215, 55, 73, 190, 95, 95, 235, 62, 245, 197, 218, 190, 94, 105, 248, 62, 165, 237, 51, 191, 185, 30, 213, 62, 95, 228, 0, 63, 0, 14, 181, 191, 28, 112, 161, 190, 120, 39, 49, 191, 122, 74, 42, 190, 128, 174, 234, 62, 77, 80, 154, 190, 69, 27, 197, 61, 6, 53, 131, 59, 222, 49, 127, 60, 145, 41, 221, 63, 81, 212, 197, 62, 39, 154, 222, 62, 71, 254, 150, 191, 109, 65, 189, 190, 10, 121, 27, 63, 218, 17, 150, 62, 240, 156, 217, 62, 243, 125, 90, 63, 183, 11, 76, 63, 87, 13, 138, 62, 6, 207, 132, 62, 186, 112, 2, 191, 62, 245, 10, 63, 78, 58, 52, 190, 228, 100, 236, 190, 86, 107, 175, 62, 99, 24, 36, 191, 175, 212, 146, 191, 241, 95, 148, 190, 9, 7, 66, 63, 165, 131, 25, 63, 3, 158, 15, 62, 91, 179, 78, 63, 26, 218, 121, 191, 0, 37, 140, 190, 174, 176, 250, 62, 152, 139, 192, 63, 148, 52, 219, 62, 57, 14, 64, 60, 110, 140, 237, 63, 212, 82, 1, 63, 149, 28, 145, 59, 132, 187, 154, 190, 2, 141, 10, 190, 187, 154, 229, 190, 215, 3, 249, 190, 7, 243, 102, 62, 43, 183, 224, 190, 228, 42, 44, 63, 22, 10, 7, 191, 149, 133, 236, 62, 13, 11, 137, 190, 97, 155, 60, 190, 53, 107, 28, 191, 6, 57, 100, 191, 58, 177, 197, 190, 80, 220, 224, 62, 97, 82, 83, 63, 101, 17, 123, 190, 211, 234, 7, 63, 192, 54, 52, 62, 157, 44, 195, 62, 213, 115, 231, 62, 121, 141, 48, 63, 219, 208, 165, 62, 245, 102, 46, 63, 224, 110, 122, 191, 57, 93, 33, 62, 117, 203, 112, 191, 53, 161, 119, 63, 156, 152, 140, 61, 134, 135, 1, 60, 132, 44, 27, 191, 15, 130, 208, 62, 249, 24, 104, 188, 74, 66, 9, 191, 116, 237, 191, 62, 59, 64, 10, 191, 236, 128, 13, 191, 17, 120, 6, 63, 130, 86, 141, 62, 231, 204, 178, 190, 221, 71, 2, 63, 244, 38, 45, 62, 138, 8, 211, 190, 46, 38, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 189, 213, 190, 157, 151, 144, 190, 112, 41, 226, 190, 210, 144, 209, 189, 54, 112, 176, 190, 156, 35, 181, 62, 12, 162, 70, 62, 26, 179, 175, 62, 128, 201, 135, 190, 216, 62, 190, 190, 124, 1, 164, 190, 135, 12, 157, 62, 179, 36, 39, 63, 217, 62, 63, 63, 130, 234, 179, 190, 155, 105, 245, 62, 38, 6, 171, 188, 137, 53, 11, 63, 149, 90, 8, 63, 156, 136, 201, 62, 231, 209, 23, 191, 221, 178, 188, 190, 23, 221, 252, 62, 196, 201, 67, 190, 21, 145, 1, 190, 208, 155, 175, 190, 106, 60, 103, 190, 120, 246, 226, 186, 38, 15, 241, 62, 179, 241, 112, 189, 231, 220, 15, 63, 98, 165, 238, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 188, 136, 62, 216, 70, 3, 60, 30, 95, 214, 61, 102, 233, 134, 189, 244, 92, 100, 59, 39, 48, 129, 61, 8, 4, 8, 192, 238, 223, 18, 62, 252, 139, 17, 190, 165, 19, 50, 191, 197, 211, 1, 62, 44, 241, 23, 61, 4, 56, 4, 61, 126, 231, 180, 62, 210, 28, 168, 189, 107, 120, 161, 61, 239, 193, 197, 190, 146, 121, 153, 62, 236, 183, 95, 62, 77, 79, 235, 59, 78, 12, 193, 190, 125, 201, 141, 61, 185, 206, 39, 62, 147, 64, 40, 61, 118, 62, 134, 190, 0, 140, 88, 62, 16, 103, 229, 190, 185, 153, 57, 62, 57, 83, 67, 62, 64, 12, 214, 189, 232, 117, 131, 62, 86, 22, 78, 188, 141, 81, 130, 62, 33, 125, 225, 189, 82, 110, 14, 190, 68, 250, 133, 189, 232, 136, 4, 62, 137, 252, 161, 62, 32, 220, 213, 58, 35, 28, 80, 188, 105, 0, 147, 61, 77, 204, 55, 189, 144, 181, 240, 61, 91, 70, 233, 189, 222, 230, 66, 61, 204, 100, 77, 62, 163, 39, 178, 190, 170, 52, 55, 62, 179, 78, 185, 189, 41, 192, 163, 60, 9, 94, 144, 189, 171, 178, 207, 61, 105, 22, 55, 190, 121, 4, 255, 60, 11, 57, 59, 62, 232, 125, 49, 189, 24, 84, 68, 189, 118, 48, 228, 190, 113, 168, 156, 61, 175, 195, 175, 189, 33, 39, 137, 61, 4, 184, 201, 61, 210, 143, 114, 57, 150, 150, 151, 189, 216, 7, 233, 190, 151, 46, 155, 61, 12, 244, 68, 61, 57, 244, 161, 62, 120, 136, 104, 189, 10, 27, 216, 188, 156, 230, 201, 189, 159, 199, 76, 62, 146, 124, 204, 190, 56, 104, 249, 190, 36, 178, 68, 190, 194, 139, 117, 62, 132, 141, 224, 62, 142, 115, 130, 191, 114, 82, 43, 63, 95, 81, 236, 191, 240, 235, 154, 191, 72, 91, 236, 61, 160, 226, 126, 62, 96, 223, 102, 190, 161, 254, 15, 63, 57, 235, 109, 62, 80, 52, 216, 189, 34, 199, 16, 190, 146, 117, 27, 191, 128, 136, 183, 62, 12, 166, 57, 190, 85, 130, 47, 62, 6, 46, 158, 62, 230, 216, 162, 62, 121, 131, 6, 61, 237, 234, 56, 190, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 85, 100, 109, 189, 136, 46, 73, 62, 27, 82, 58, 189, 126, 238, 180, 189, 39, 231, 174, 61, 46, 164, 43, 62, 195, 190, 241, 187, 16, 175, 0, 62, 6, 22, 73, 190, 223, 68, 24, 190, 82, 73, 230, 60, 61, 241, 100, 187, 206, 232, 198, 61, 69, 161, 100, 62, 201, 245, 133, 62, 190, 250, 201, 61, 105, 204, 218, 61, 49, 202, 90, 61, 25, 133, 108, 62, 108, 170, 51, 190, 110, 113, 38, 190, 16, 51, 203, 190, 138, 183, 193, 61, 161, 211, 99, 190, 168, 6, 58, 190, 211, 208, 66, 186, 192, 0, 55, 62, 184, 129, 49, 189, 65, 201, 45, 62, 48, 38, 65, 61, 93, 18, 131, 61, 11, 129, 34, 62, 115, 20, 8, 63, 66, 48, 27, 190, 94, 220, 156, 62, 198, 77, 211, 190, 21, 198, 207, 190, 218, 74, 179, 189, 110, 82, 196, 60, 160, 120, 176, 61, 28, 193, 41, 62, 77, 245, 128, 62, 126, 230, 235, 61, 132, 58, 172, 189, 98, 110, 21, 191, 216, 102, 145, 62, 6, 243, 203, 190, 98, 90, 89, 62, 141, 21, 13, 190, 7, 50, 210, 189, 150, 5, 150, 189, 93, 122, 30, 62, 189, 42, 9, 191, 161, 96, 55, 62, 13, 38, 137, 62, 141, 133, 99, 62, 20, 194, 91, 62, 140, 24, 187, 61, 215, 68, 65, 191, 76, 18, 88, 62, 198, 246, 176, 189, 118, 183, 247, 188, 202, 191, 175, 61, 229, 88, 1, 190, 124, 232, 111, 62, 33, 90, 234, 59, 98, 22, 165, 61, 82, 146, 142, 190, 164, 240, 93, 191, 20, 104, 34, 61, 122, 241, 135, 62, 181, 52, 190, 61, 7, 232, 237, 61, 182, 141, 159, 62, 25, 32, 172, 62, 174, 131, 84, 190, 194, 161, 33, 190, 37, 116, 40, 62, 208, 168, 231, 190, 219, 88, 172, 62, 55, 204, 137, 190, 73, 57, 161, 189, 9, 66, 206, 61, 61, 245, 183, 61, 9, 153, 62, 191, 19, 52, 85, 189, 1, 88, 112, 62, 80, 72, 159, 62, 201, 79, 155, 62, 104, 97, 226, 62, 16, 8, 33, 62, 206, 181, 145, 62, 122, 112, 211, 190, 63, 43, 85, 191, 225, 161, 37, 190, 26, 125, 47, 190, 217, 56, 150, 62, 31, 150, 191, 188, 238, 168, 93, 62, 63, 152, 34, 190, 86, 47, 96, 190, 251, 52, 10, 190, 8, 87, 138, 189, 6, 20, 231, 190, 110, 75, 60, 188, 104, 181, 222, 62, 3, 12, 126, 189, 216, 161, 117, 190, 119, 63, 63, 191, 69, 31, 11, 62, 113, 10, 44, 190, 168, 208, 142, 62, 14, 30, 147, 61, 209, 235, 15, 190, 167, 143, 184, 190, 54, 17, 105, 61, 196, 36, 251, 190, 144, 44, 178, 190, 254, 168, 209, 62, 153, 248, 115, 62, 61, 241, 64, 62, 157, 215, 224, 62, 120, 248, 205, 190, 154, 139, 213, 189, 12, 93, 22, 190, 75, 189, 98, 187, 158, 183, 164, 189, 229, 75, 183, 190, 254, 205, 4, 190, 156, 62, 196, 189, 235, 124, 12, 62, 123, 134, 48, 189, 245, 188, 218, 188, 63, 33, 240, 189, 224, 90, 59, 60, 240, 198, 31, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 157, 246, 247, 61, 61, 76, 4, 190, 75, 226, 220, 61, 37, 9, 5, 189, 27, 244, 156, 59, 133, 36, 247, 189, 15, 228, 231, 189, 17, 206, 13, 62, 49, 65, 149, 189, 210, 29, 1, 61, 151, 51, 5, 190, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 57, 72, 117, 189, 152, 86, 122, 190, 254, 211, 131, 189, 74, 141, 39, 190, 42, 39, 143, 190, 137, 125, 214, 190, 193, 27, 116, 62, 12, 67, 137, 190, 125, 91, 118, 189, 185, 233, 12, 190, 58, 112, 57, 190, 133, 56, 238, 61, 236, 107, 27, 61, 255, 227, 247, 62, 243, 139, 194, 191, 93, 84, 33, 191, 116, 40, 193, 191, 190, 115, 208, 191, 212, 34, 0, 62, 90, 103, 106, 62, 232, 255, 15, 62, 226, 55, 164, 191, 74, 30, 235, 62, 254, 233, 86, 190, 70, 114, 184, 59, 76, 40, 123, 61, 125, 218, 172, 189, 12, 143, 16, 62, 222, 118, 81, 62, 36, 198, 147, 61, 89, 110, 11, 188, 247, 150, 164, 190, 167, 189, 209, 189, 47, 55, 161, 62, 179, 11, 193, 59, 93, 86, 64, 62, 110, 199, 115, 190, 75, 198, 235, 60, 172, 35, 12, 61, 115, 77, 152, 62, 144, 127, 28, 190, 116, 182, 141, 62, 41, 113, 78, 62, 88, 209, 32, 61, 107, 15, 0, 190, 167, 0, 78, 189, 91, 192, 81, 190, 228, 113, 132, 190, 157, 41, 40, 62, 197, 1, 108, 61, 60, 146, 140, 187, 66, 8, 140, 189, 44, 6, 152, 62, 111, 20, 15, 63, 221, 78, 48, 62, 255, 249, 216, 61, 221, 165, 27, 62, 35, 251, 116, 62, 110, 109, 133, 190, 29, 53, 22, 62, 99, 111, 134, 61, 59, 31, 115, 190, 163, 26, 19, 187, 46, 107, 102, 190, 171, 86, 3, 188, 92, 32, 95, 189, 152, 17, 210, 188, 242, 105, 248, 60, 16, 5, 89, 62, 226, 12, 144, 62, 46, 154, 115, 62, 221, 175, 10, 62, 131, 246, 50, 62, 204, 22, 210, 61, 19, 77, 4, 190, 69, 244, 45, 188, 115, 204, 77, 62, 10, 141, 103, 62, 164, 117, 56, 62, 38, 159, 50, 62, 238, 156, 213, 61, 196, 30, 155, 189, 77, 91, 17, 62, 175, 32, 248, 61, 152, 69, 99, 62, 231, 179, 229, 189, 49, 212, 130, 190, 40, 55, 138, 189, 180, 173, 223, 189, 156, 38, 138, 189, 129, 150, 132, 190, 187, 205, 136, 62, 230, 34, 71, 190, 182, 100, 181, 188, 67, 199, 85, 62, 95, 165, 132, 188, 46, 53, 177, 61, 158, 141, 164, 61, 173, 97, 141, 61, 172, 33, 214, 62, 155, 217, 44, 62, 125, 62, 17, 190, 162, 223, 187, 60, 163, 184, 77, 190, 60, 247, 135, 62, 28, 91, 3, 190, 95, 102, 127, 191, 70, 171, 26, 191, 112, 162, 173, 189, 245, 145, 54, 62, 51, 35, 139, 189, 168, 149, 98, 62, 238, 114, 45, 190, 215, 164, 13, 62, 180, 4, 178, 61, 100, 126, 147, 62, 185, 200, 181, 61, 80, 228, 226, 62, 224, 206, 132, 61, 249, 137, 128, 190, 57, 110, 128, 190, 73, 91, 51, 191, 38, 124, 87, 62, 52, 75, 18, 61, 181, 88, 16, 191, 170, 62, 38, 189, 97, 62, 183, 190, 173, 223, 32, 58, 52, 151, 236, 60, 225, 28, 216, 188, 100, 62, 62, 190, 175, 220, 233, 58, 142, 18, 143, 61, 54, 32, 244, 60, 137, 180, 131, 190, 155, 8, 202, 189, 103, 173, 51, 189, 93, 183, 37, 61, 45, 3, 44, 190, 31, 110, 111, 190, 108, 3, 135, 190, 25, 204, 69, 190, 192, 118, 14, 61, 81, 195, 105, 189, 216, 126, 112, 190, 24, 168, 65, 61, 228, 147, 13, 188, 98, 91, 29, 61, 116, 141, 100, 61, 56, 169, 192, 189, 147, 199, 46, 190, 138, 131, 97, 189, 8, 211, 170, 61, 79, 148, 169, 61, 87, 85, 69, 61, 73, 191, 161, 189, 172, 99, 107, 61, 9, 178, 119, 189, 133, 249, 144, 61, 72, 125, 175, 189, 117, 57, 242, 60, 2, 129, 74, 62, 34, 206, 159, 190, 115, 22, 192, 62, 14, 136, 219, 190, 119, 101, 195, 190, 180, 83, 38, 190, 115, 140, 30, 61, 121, 6, 68, 61, 146, 88, 92, 62, 66, 210, 35, 63, 184, 248, 204, 62, 112, 158, 105, 190, 84, 139, 10, 191, 245, 230, 7, 62, 253, 219, 159, 190, 208, 240, 141, 61, 141, 135, 2, 59, 203, 199, 201, 61, 99, 127, 189, 60, 65, 252, 179, 62, 138, 34, 30, 191, 94, 246, 192, 189, 114, 246, 144, 62, 20, 71, 228, 62, 119, 78, 185, 62, 23, 232, 183, 62, 130, 21, 226, 190, 208, 230, 159, 61, 184, 11, 144, 60, 12, 15, 154, 190, 195, 82, 16, 189, 130, 245, 25, 190, 122, 157, 15, 63, 217, 28, 241, 61, 74, 213, 114, 61, 55, 236, 98, 190, 237, 8, 141, 190, 68, 205, 138, 62, 250, 17, 84, 189, 186, 34, 22, 189, 173, 231, 68, 189, 50, 158, 166, 60, 37, 238, 192, 61, 215, 139, 160, 189, 168, 164, 16, 62, 142, 232, 27, 62, 6, 145, 160, 190, 86, 174, 76, 189, 134, 106, 150, 61, 55, 155, 63, 61, 86, 118, 13, 62, 222, 147, 34, 62, 248, 235, 232, 190, 153, 62, 232, 60, 161, 18, 62, 62, 155, 121, 167, 189, 226, 175, 189, 61, 155, 95, 75, 60, 187, 186, 55, 61, 147, 58, 255, 60, 187, 65, 24, 62, 200, 213, 70, 188, 233, 82, 91, 188, 90, 145, 136, 189, 27, 59, 78, 190, 33, 203, 19, 62, 9, 129, 48, 188, 113, 49, 191, 62, 129, 120, 204, 61, 226, 78, 102, 62, 85, 207, 34, 62, 171, 43, 17, 62, 194, 195, 210, 190, 168, 100, 81, 191, 0, 105, 144, 190, 54, 164, 33, 62, 203, 33, 150, 62, 34, 48, 58, 61, 197, 164, 190, 62, 76, 75, 94, 62, 157, 171, 5, 62, 232, 31, 50, 60, 223, 123, 73, 62, 72, 69, 130, 60, 173, 17, 85, 61, 157, 19, 62, 61, 248, 234, 184, 58, 56, 21, 144, 190, 213, 114, 158, 190, 72, 4, 3, 190, 135, 176, 109, 62, 23, 156, 186, 189, 230, 205, 27, 62, 177, 157, 227, 60, 1, 138, 106, 62, 65, 160, 216, 185, 22, 162, 139, 189, 56, 209, 41, 189, 26, 231, 151, 187, 149, 223, 32, 190, 141, 54, 151, 61, 18, 220, 19, 190, 218, 91, 34, 61, 125, 65, 81, 190, 14, 29, 37, 190, 10, 232, 7, 60, 90, 49, 222, 61, 214, 233, 56, 190, 86, 19, 186, 189, 71, 203, 61, 190, 240, 28, 65, 189, 249, 56, 180, 189, 42, 235, 246, 189, 163, 48, 188, 188, 49, 139, 192, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 159, 50, 168, 61, 26, 226, 254, 189, 190, 234, 182, 189, 9, 183, 55, 190, 229, 138, 188, 60, 211, 154, 9, 59, 44, 239, 215, 61, 199, 64, 30, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 143, 112, 113, 62, 67, 131, 134, 190, 234, 233, 25, 62, 95, 55, 81, 191, 132, 154, 12, 59, 193, 17, 191, 57, 89, 62, 8, 191, 12, 194, 140, 191, 252, 73, 141, 189, 167, 218, 138, 62, 53, 224, 128, 189, 216, 250, 148, 62, 194, 67, 82, 189, 123, 197, 62, 61, 131, 92, 19, 191, 131, 66, 205, 190, 78, 111, 132, 190, 134, 121, 53, 62, 243, 183, 17, 62, 169, 182, 150, 188, 245, 23, 243, 189, 217, 116, 77, 62, 141, 125, 1, 189, 131, 155, 38, 62, 167, 205, 107, 188, 41, 245, 46, 62, 217, 158, 15, 191, 7, 97, 230, 189, 76, 207, 131, 62, 151, 135, 159, 62, 125, 73, 234, 61, 86, 206, 84, 191, 66, 242, 249, 61, 223, 176, 186, 60, 227, 170, 179, 190, 56, 135, 54, 190, 202, 92, 9, 62, 226, 69, 209, 61, 176, 42, 179, 62, 3, 35, 149, 190, 199, 125, 14, 191, 54, 101, 29, 191, 5, 141, 45, 191, 59, 75, 109, 58, 123, 89, 137, 62, 11, 78, 225, 190, 71, 108, 192, 61, 202, 101, 22, 188, 87, 42, 219, 60, 142, 71, 41, 190, 227, 124, 134, 58, 59, 95, 89, 189, 160, 169, 169, 61, 230, 188, 90, 191, 133, 254, 35, 190, 102, 121, 18, 191, 249, 84, 90, 191, 100, 69, 18, 190, 178, 233, 239, 62, 11, 20, 254, 190, 56, 246, 177, 190, 88, 127, 220, 189, 160, 23, 89, 190, 155, 184, 61, 190, 191, 50, 130, 189, 224, 120, 71, 62, 79, 221, 8, 62, 165, 178, 130, 61, 36, 250, 35, 190, 153, 200, 36, 189, 223, 125, 230, 189, 144, 208, 6, 190, 80, 162, 137, 62, 193, 12, 132, 62, 7, 2, 193, 61, 142, 13, 58, 189, 203, 229, 205, 62, 155, 101, 30, 190, 31, 35, 56, 190, 154, 196, 143, 188, 100, 80, 136, 189, 141, 247, 217, 61, 237, 2, 158, 189, 140, 85, 124, 62, 178, 90, 94, 190, 64, 2, 176, 61, 34, 106, 31, 62, 157, 138, 218, 62, 222, 4, 79, 62, 242, 68, 1, 190, 41, 143, 17, 191, 168, 38, 172, 61, 217, 191, 165, 190, 172, 240, 162, 60, 98, 59, 97, 190, 36, 169, 222, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 3, 50, 70, 61, 149, 156, 127, 190, 94, 246, 35, 62, 51, 144, 66, 62, 52, 152, 6, 190, 193, 182, 232, 189, 57, 211, 65, 191, 99, 163, 0, 62, 123, 67, 24, 190, 70, 215, 130, 191, 50, 153, 139, 62, 222, 98, 231, 61, 191, 108, 165, 61, 1, 92, 218, 189, 45, 73, 238, 61, 25, 20, 241, 190, 27, 2, 196, 190, 61, 49, 28, 190, 25, 40, 155, 62, 39, 241, 67, 190, 235, 191, 132, 62, 154, 81, 5, 191, 106, 180, 90, 188, 246, 238, 48, 190, 15, 16, 17, 191, 212, 181, 128, 62, 42, 119, 38, 191, 175, 219, 42, 62, 98, 36, 149, 187, 102, 227, 242, 61, 95, 183, 11, 62, 61, 86, 242, 189, 59, 9, 151, 60, 236, 2, 3, 63, 71, 136, 174, 189, 53, 35, 225, 59, 246, 12, 58, 62, 72, 117, 175, 188, 22, 113, 176, 62, 44, 127, 154, 61, 230, 250, 230, 189, 225, 120, 168, 62, 20, 16, 166, 61, 171, 178, 167, 61, 220, 235, 15, 191, 146, 88, 179, 61, 193, 198, 17, 190, 114, 52, 110, 62, 55, 230, 92, 62, 80, 126, 46, 190, 147, 66, 45, 189, 62, 204, 34, 62, 190, 146, 48, 62, 216, 49, 230, 62, 211, 80, 175, 62, 138, 176, 170, 61, 104, 234, 101, 189, 229, 229, 0, 62, 184, 26, 121, 61, 241, 124, 148, 60, 28, 54, 198, 189, 61, 145, 135, 61, 240, 62, 118, 61, 215, 137, 28, 62, 54, 223, 102, 61, 251, 226, 1, 62, 138, 67, 138, 190, 62, 222, 215, 62, 67, 207, 134, 62, 123, 188, 140, 60, 60, 42, 117, 62, 132, 122, 190, 61, 177, 202, 150, 189, 250, 248, 34, 191, 96, 1, 167, 190, 73, 159, 128, 62, 77, 188, 24, 187, 158, 77, 1, 62, 8, 168, 193, 62, 233, 25, 170, 189, 206, 79, 73, 61, 224, 49, 16, 188, 6, 156, 126, 62, 141, 106, 219, 190, 150, 120, 0, 63, 169, 143, 152, 191, 47, 171, 131, 190, 199, 134, 221, 189, 204, 69, 181, 190, 229, 212, 14, 190, 151, 117, 217, 62, 234, 138, 151, 190, 250, 22, 132, 62, 144, 243, 246, 61, 251, 27, 89, 61, 4, 103, 225, 61, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 140, 233, 45, 190, 60, 229, 150, 61, 119, 76, 62, 189, 192, 234, 75, 190, 142, 184, 57, 191, 217, 58, 254, 61, 65, 156, 8, 62, 36, 0, 129, 190, 7, 65, 117, 190, 193, 124, 235, 190, 134, 135, 156, 189, 246, 82, 30, 191, 237, 16, 248, 60, 242, 200, 250, 61, 246, 31, 28, 191, 19, 50, 244, 188, 202, 73, 14, 191, 1, 59, 236, 188, 121, 23, 136, 190, 119, 108, 128, 62, 108, 141, 138, 191, 135, 167, 13, 190, 145, 32, 252, 60, 166, 64, 137, 190, 109, 215, 97, 191, 220, 244, 249, 60, 243, 252, 192, 62, 68, 93, 7, 190, 68, 47, 106, 191, 15, 37, 161, 191, 136, 108, 13, 191, 52, 224, 83, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 195, 240, 194, 62, 37, 105, 129, 190, 186, 138, 102, 62, 143, 208, 213, 190, 91, 59, 159, 191, 117, 104, 28, 62, 128, 5, 112, 62, 99, 76, 68, 190, 122, 158, 139, 62, 160, 205, 137, 62, 73, 223, 130, 62, 182, 79, 213, 190, 218, 245, 230, 189, 25, 181, 202, 62, 248, 35, 2, 191, 153, 171, 120, 62, 232, 141, 214, 189, 51, 118, 133, 62, 1, 54, 10, 189, 65, 140, 246, 61, 29, 59, 143, 191, 196, 17, 115, 189, 89, 21, 203, 62, 6, 134, 168, 62, 10, 81, 116, 62, 241, 178, 94, 62, 227, 96, 9, 62, 221, 193, 118, 62, 234, 103, 170, 190, 249, 146, 52, 191, 189, 162, 14, 188, 87, 28, 249, 189, 240, 219, 61, 189, 169, 92, 127, 190, 225, 177, 22, 61, 214, 154, 51, 190, 196, 50, 127, 191, 235, 63, 148, 62, 141, 19, 2, 63, 127, 133, 168, 187, 29, 161, 112, 60, 174, 36, 174, 190, 50, 67, 250, 61, 139, 148, 41, 191, 14, 23, 209, 61, 20, 76, 32, 62, 63, 39, 12, 191, 169, 154, 125, 62, 141, 42, 165, 190, 92, 201, 86, 62, 189, 78, 99, 61, 33, 59, 87, 62, 111, 83, 183, 191, 31, 182, 11, 62, 210, 100, 129, 62, 122, 13, 119, 60, 253, 111, 154, 190, 87, 128, 14, 190, 122, 162, 197, 62, 245, 69, 27, 189, 55, 242, 21, 191, 148, 32, 12, 191, 35, 249, 15, 191, 149, 18, 36, 190, 193, 114, 170, 188, 205, 152, 160, 61, 79, 143, 18, 190, 38, 63, 205, 61, 43, 225, 80, 60, 36, 44, 168, 189, 233, 132, 209, 60, 105, 128, 49, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 174, 95, 138, 186, 92, 246, 29, 190, 103, 214, 18, 189, 209, 184, 210, 189, 21, 39, 189, 61, 52, 244, 143, 189, 6, 50, 54, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 116, 108, 160, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 48, 29, 132, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 250, 186, 62, 64, 202, 252, 188, 97, 85, 94, 62, 9, 218, 110, 189, 168, 161, 148, 62, 227, 127, 27, 189, 50, 195, 24, 62, 250, 129, 69, 62, 155, 92, 2, 190, 139, 253, 206, 59, 209, 170, 130, 190, 254, 32, 133, 62, 238, 181, 2, 60, 31, 216, 192, 189, 179, 126, 155, 189, 70, 38, 151, 62, 51, 247, 158, 62, 255, 151, 208, 61, 68, 243, 135, 187, 202, 252, 145, 188, 186, 232, 33, 62, 190, 110, 184, 60, 106, 185, 50, 190, 244, 218, 15, 62, 75, 126, 81, 190, 206, 83, 147, 62, 159, 130, 181, 189, 162, 252, 34, 189, 198, 235, 52, 190, 184, 165, 53, 61, 5, 137, 0, 62, 238, 164, 119, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 202, 16, 63, 46, 149, 70, 61, 30, 164, 117, 191, 245, 126, 50, 191, 40, 131, 103, 62, 36, 106, 191, 190, 88, 178, 162, 190, 240, 122, 67, 63, 150, 5, 28, 62, 156, 154, 174, 191, 86, 8, 149, 62, 21, 1, 80, 62, 171, 31, 149, 62, 19, 5, 99, 61, 116, 126, 23, 191, 90, 192, 103, 61, 75, 142, 194, 62, 245, 135, 192, 61, 105, 214, 145, 61, 3, 214, 197, 190, 198, 210, 123, 63, 166, 181, 131, 62, 78, 149, 6, 190, 228, 166, 74, 63, 219, 42, 150, 190, 158, 143, 2, 63, 250, 123, 99, 61, 230, 93, 64, 191, 130, 166, 81, 188, 16, 15, 19, 191, 159, 101, 92, 191, 112, 104, 179, 188, 137, 190, 243, 190, 229, 169, 206, 189, 111, 22, 41, 189, 167, 138, 79, 61, 173, 192, 27, 190, 251, 214, 135, 190, 104, 238, 208, 189, 108, 152, 241, 62, 174, 189, 43, 188, 48, 62, 150, 62, 238, 188, 66, 62, 217, 99, 70, 190, 62, 136, 10, 62, 242, 161, 54, 61, 51, 81, 239, 61, 28, 44, 236, 189, 197, 97, 9, 62, 61, 113, 121, 60, 15, 242, 77, 189, 210, 214, 20, 190, 33, 89, 44, 62, 17, 210, 48, 189, 10, 104, 129, 187, 234, 241, 240, 62, 54, 253, 141, 185, 126, 193, 131, 62, 92, 1, 204, 188, 194, 198, 122, 62, 165, 130, 143, 189, 28, 223, 38, 190, 201, 122, 36, 61, 137, 49, 14, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 246, 36, 59, 161, 149, 245, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 93, 139, 190, 90, 188, 1, 63, 49, 189, 57, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 238, 189, 191, 6, 226, 68, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}