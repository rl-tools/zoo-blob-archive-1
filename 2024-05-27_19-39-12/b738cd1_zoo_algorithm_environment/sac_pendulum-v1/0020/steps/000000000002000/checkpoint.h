// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 48, 50, 63, 6, 134, 22, 63, 155, 89, 49, 60, 151, 104, 76, 61, 31, 51, 31, 63, 172, 38, 189, 190, 76, 79, 105, 62, 56, 235, 9, 191, 179, 24, 210, 62, 211, 241, 219, 62, 39, 244, 11, 191, 234, 116, 194, 190, 11, 171, 254, 190, 138, 153, 109, 191, 44, 191, 45, 62, 7, 156, 183, 189, 48, 60, 240, 60, 72, 18, 147, 61, 31, 81, 251, 190, 176, 99, 83, 63, 128, 232, 56, 62, 233, 168, 220, 62, 58, 112, 22, 191, 140, 108, 12, 191, 231, 230, 23, 63, 4, 233, 173, 188, 204, 190, 218, 62, 56, 180, 6, 63, 105, 39, 218, 62, 235, 215, 123, 62, 118, 79, 15, 62, 87, 92, 246, 190, 66, 145, 205, 62, 80, 36, 69, 61, 154, 63, 71, 191, 80, 124, 135, 62, 212, 117, 229, 190, 93, 44, 77, 191, 55, 181, 162, 190, 208, 179, 225, 62, 16, 121, 35, 62, 2, 217, 128, 60, 77, 192, 255, 62, 192, 102, 18, 191, 33, 4, 148, 190, 130, 216, 30, 62, 217, 96, 47, 63, 30, 133, 71, 62, 25, 68, 234, 189, 155, 33, 143, 62, 76, 152, 213, 62, 186, 49, 167, 188, 144, 54, 141, 190, 79, 174, 215, 190, 98, 228, 173, 190, 190, 221, 24, 191, 169, 4, 105, 62, 206, 92, 0, 191, 250, 164, 99, 63, 134, 149, 222, 190, 140, 225, 0, 62, 115, 22, 150, 189, 94, 54, 138, 189, 225, 66, 243, 190, 230, 185, 152, 61, 210, 189, 176, 190, 224, 188, 167, 62, 238, 38, 54, 63, 83, 92, 41, 190, 176, 16, 162, 62, 65, 19, 38, 61, 145, 142, 178, 62, 89, 131, 141, 62, 50, 213, 163, 62, 55, 114, 143, 62, 162, 47, 4, 63, 148, 83, 38, 191, 17, 78, 56, 62, 92, 17, 70, 191, 138, 235, 247, 62, 79, 164, 170, 61, 82, 8, 239, 58, 217, 19, 194, 190, 200, 187, 157, 62, 31, 247, 112, 62, 210, 40, 90, 191, 197, 216, 82, 62, 213, 119, 134, 190, 11, 219, 91, 191, 73, 243, 198, 62, 183, 86, 194, 62, 168, 2, 43, 191, 135, 137, 154, 62, 92, 7, 11, 63, 108, 129, 6, 62, 123, 98, 5, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 157, 216, 190, 245, 82, 141, 190, 167, 227, 184, 190, 51, 105, 86, 190, 175, 221, 171, 190, 23, 88, 192, 62, 118, 20, 224, 62, 104, 223, 130, 62, 193, 150, 29, 190, 64, 251, 221, 189, 201, 218, 183, 190, 68, 52, 84, 62, 255, 236, 239, 62, 82, 211, 33, 63, 190, 26, 134, 190, 65, 13, 30, 63, 186, 157, 141, 62, 213, 86, 45, 63, 112, 90, 12, 63, 194, 55, 134, 62, 113, 157, 113, 190, 0, 247, 93, 190, 163, 16, 19, 63, 197, 77, 28, 190, 25, 192, 5, 61, 184, 152, 146, 190, 185, 45, 197, 189, 101, 41, 195, 190, 52, 192, 185, 62, 164, 34, 159, 189, 165, 188, 10, 63, 209, 14, 101, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 136, 90, 60, 25, 78, 243, 60, 79, 204, 52, 61, 37, 88, 29, 189, 230, 15, 208, 60, 106, 77, 199, 189, 159, 225, 185, 190, 46, 58, 223, 61, 119, 253, 49, 190, 1, 139, 48, 190, 19, 58, 144, 61, 3, 253, 3, 61, 152, 65, 204, 189, 120, 135, 58, 62, 109, 208, 180, 189, 73, 105, 17, 60, 165, 80, 18, 189, 199, 245, 133, 62, 218, 78, 16, 62, 20, 105, 161, 189, 18, 214, 213, 189, 153, 252, 102, 61, 15, 150, 223, 188, 80, 144, 82, 60, 115, 192, 53, 190, 241, 146, 233, 61, 159, 52, 233, 190, 153, 91, 196, 60, 245, 105, 30, 62, 185, 181, 33, 190, 152, 154, 73, 62, 27, 64, 95, 189, 171, 129, 236, 189, 193, 24, 189, 189, 21, 176, 139, 61, 138, 40, 3, 62, 34, 226, 233, 61, 87, 10, 89, 62, 144, 124, 28, 62, 86, 35, 54, 61, 201, 7, 5, 62, 250, 81, 147, 60, 82, 210, 66, 62, 19, 101, 97, 189, 59, 21, 88, 189, 26, 111, 52, 62, 218, 63, 29, 190, 59, 38, 89, 62, 101, 209, 89, 187, 50, 81, 127, 60, 77, 248, 138, 189, 197, 154, 62, 61, 233, 154, 10, 62, 72, 37, 65, 61, 247, 12, 75, 62, 90, 164, 33, 61, 104, 208, 158, 188, 165, 8, 177, 189, 52, 186, 230, 189, 231, 213, 195, 189, 116, 105, 26, 62, 109, 21, 123, 61, 228, 97, 136, 61, 137, 77, 233, 189, 26, 253, 149, 61, 240, 226, 38, 62, 116, 219, 153, 189, 192, 253, 219, 189, 3, 30, 160, 189, 154, 31, 21, 189, 24, 226, 111, 61, 241, 92, 135, 61, 59, 142, 37, 190, 216, 93, 8, 62, 119, 162, 25, 190, 111, 251, 167, 189, 114, 194, 178, 61, 17, 172, 11, 190, 210, 98, 112, 61, 224, 215, 31, 190, 194, 46, 22, 189, 42, 131, 224, 189, 42, 173, 175, 189, 140, 48, 218, 189, 133, 175, 45, 190, 187, 11, 196, 61, 236, 182, 207, 61, 174, 55, 220, 60, 25, 116, 15, 189, 97, 115, 26, 61, 55, 92, 53, 190, 105, 96, 166, 61, 211, 140, 62, 189, 131, 116, 46, 62, 21, 191, 172, 189, 53, 170, 54, 190, 216, 56, 12, 190, 220, 162, 183, 189, 106, 146, 1, 190, 38, 1, 153, 60, 186, 227, 92, 190, 234, 6, 20, 62, 222, 252, 150, 61, 32, 92, 133, 61, 223, 134, 45, 60, 85, 93, 122, 189, 96, 199, 98, 60, 126, 228, 253, 189, 214, 71, 87, 60, 183, 103, 248, 189, 237, 191, 107, 61, 86, 176, 80, 62, 186, 140, 28, 61, 177, 111, 11, 188, 96, 11, 33, 62, 97, 158, 200, 188, 29, 2, 204, 189, 216, 173, 91, 62, 171, 88, 218, 189, 12, 255, 45, 190, 150, 59, 65, 189, 130, 33, 34, 190, 24, 223, 15, 62, 174, 26, 135, 61, 157, 92, 181, 190, 230, 121, 140, 190, 137, 188, 132, 190, 230, 105, 185, 187, 48, 214, 245, 189, 205, 27, 54, 62, 162, 245, 222, 60, 197, 184, 208, 189, 182, 80, 184, 61, 192, 218, 175, 61, 0, 168, 164, 189, 9, 24, 244, 61, 20, 25, 56, 190, 87, 124, 166, 61, 187, 147, 199, 61, 199, 116, 75, 61, 192, 221, 179, 61, 109, 9, 194, 61, 71, 1, 93, 62, 0, 80, 163, 189, 124, 45, 102, 60, 29, 221, 18, 62, 158, 70, 99, 62, 182, 31, 81, 190, 64, 229, 153, 189, 239, 86, 97, 190, 98, 144, 149, 60, 163, 83, 72, 190, 147, 108, 44, 190, 61, 33, 10, 62, 26, 200, 245, 189, 101, 231, 189, 58, 16, 198, 99, 62, 122, 194, 48, 61, 110, 7, 127, 61, 236, 219, 253, 61, 94, 233, 178, 62, 62, 216, 242, 189, 190, 32, 246, 61, 191, 194, 80, 190, 165, 220, 145, 190, 8, 139, 7, 62, 243, 229, 138, 62, 201, 73, 145, 61, 29, 190, 5, 58, 60, 145, 18, 187, 248, 47, 139, 189, 144, 133, 63, 189, 244, 199, 134, 60, 34, 202, 101, 62, 65, 187, 8, 190, 249, 178, 130, 62, 182, 101, 223, 188, 63, 204, 23, 190, 123, 172, 189, 61, 193, 110, 27, 62, 137, 26, 49, 61, 155, 134, 167, 62, 229, 209, 52, 62, 23, 95, 142, 61, 255, 86, 6, 62, 91, 235, 17, 190, 197, 202, 175, 188, 212, 67, 197, 61, 85, 165, 139, 189, 45, 180, 190, 60, 164, 39, 209, 61, 171, 175, 73, 190, 221, 135, 178, 61, 14, 142, 172, 61, 32, 202, 86, 190, 167, 164, 174, 189, 46, 109, 22, 190, 145, 58, 3, 188, 116, 14, 167, 61, 102, 189, 27, 62, 224, 143, 171, 189, 7, 45, 59, 62, 132, 223, 20, 189, 110, 55, 5, 190, 250, 53, 67, 189, 177, 173, 253, 188, 20, 44, 62, 190, 188, 59, 123, 62, 27, 28, 138, 189, 251, 57, 212, 189, 220, 109, 1, 62, 88, 187, 1, 62, 43, 196, 100, 61, 94, 145, 16, 62, 214, 111, 70, 62, 15, 61, 6, 62, 167, 100, 116, 62, 10, 144, 23, 190, 202, 64, 5, 62, 77, 133, 5, 188, 196, 208, 204, 190, 202, 109, 213, 190, 172, 46, 86, 190, 150, 175, 179, 189, 89, 65, 38, 188, 20, 252, 136, 189, 7, 251, 171, 61, 231, 128, 168, 188, 109, 51, 168, 188, 65, 28, 46, 190, 87, 37, 124, 188, 171, 229, 145, 189, 204, 2, 3, 190, 61, 191, 200, 61, 42, 177, 229, 60, 73, 52, 7, 189, 102, 20, 39, 190, 235, 50, 245, 189, 223, 246, 123, 189, 88, 107, 103, 61, 94, 37, 190, 61, 70, 57, 32, 190, 239, 199, 26, 190, 213, 156, 103, 60, 220, 195, 208, 61, 219, 111, 176, 60, 212, 191, 229, 60, 35, 205, 242, 61, 170, 45, 128, 59, 38, 5, 44, 190, 119, 210, 66, 189, 106, 194, 104, 61, 148, 98, 148, 189, 147, 220, 23, 62, 162, 157, 154, 189, 78, 24, 38, 61, 254, 205, 4, 190, 146, 233, 158, 189, 235, 124, 12, 62, 70, 63, 11, 189, 245, 188, 218, 188, 76, 140, 228, 189, 224, 90, 59, 60, 109, 101, 16, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 117, 197, 11, 62, 61, 76, 4, 190, 242, 137, 224, 61, 37, 9, 5, 189, 27, 244, 156, 59, 93, 231, 219, 189, 15, 228, 231, 189, 0, 91, 31, 62, 14, 136, 149, 189, 95, 157, 66, 61, 71, 145, 245, 189, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 1, 42, 51, 189, 179, 215, 84, 190, 180, 224, 183, 187, 1, 225, 244, 60, 76, 70, 34, 190, 17, 62, 5, 190, 231, 135, 32, 62, 117, 173, 94, 189, 186, 134, 112, 61, 73, 157, 80, 189, 102, 55, 55, 190, 65, 63, 35, 62, 114, 220, 243, 188, 30, 58, 31, 62, 245, 117, 231, 189, 151, 20, 50, 190, 28, 91, 125, 59, 141, 22, 191, 189, 52, 116, 155, 189, 32, 235, 186, 61, 178, 152, 130, 61, 226, 52, 2, 189, 133, 2, 60, 62, 195, 131, 133, 188, 127, 125, 6, 62, 96, 218, 165, 61, 150, 208, 21, 61, 30, 190, 213, 61, 246, 48, 39, 190, 100, 82, 133, 189, 152, 216, 107, 186, 20, 115, 139, 189, 193, 219, 31, 189, 158, 170, 119, 62, 214, 188, 8, 190, 131, 30, 34, 62, 5, 196, 39, 190, 44, 109, 85, 61, 102, 74, 160, 60, 174, 253, 156, 61, 78, 43, 12, 189, 90, 163, 83, 62, 26, 247, 180, 61, 165, 142, 81, 186, 16, 19, 147, 189, 61, 16, 126, 189, 201, 28, 17, 190, 229, 93, 64, 61, 224, 54, 207, 61, 61, 18, 229, 189, 156, 250, 79, 61, 29, 172, 11, 189, 6, 95, 5, 62, 167, 172, 76, 57, 194, 118, 29, 59, 113, 154, 210, 60, 155, 175, 186, 61, 73, 74, 239, 61, 132, 117, 77, 189, 81, 139, 81, 189, 89, 154, 157, 61, 235, 221, 9, 190, 227, 210, 10, 61, 237, 242, 4, 190, 248, 82, 235, 188, 23, 59, 38, 190, 162, 104, 117, 189, 11, 241, 219, 61, 66, 105, 22, 62, 169, 105, 148, 62, 154, 32, 226, 61, 231, 16, 150, 61, 83, 115, 240, 61, 185, 187, 230, 61, 15, 234, 144, 61, 159, 89, 99, 61, 196, 9, 132, 62, 126, 237, 222, 61, 194, 188, 49, 61, 197, 163, 180, 61, 216, 158, 141, 189, 58, 241, 35, 190, 7, 157, 34, 62, 250, 111, 198, 61, 129, 84, 240, 61, 93, 199, 214, 189, 160, 197, 80, 190, 213, 51, 23, 190, 160, 39, 181, 189, 165, 44, 142, 189, 105, 117, 221, 189, 246, 255, 23, 189, 10, 127, 32, 190, 106, 228, 16, 61, 82, 216, 82, 62, 116, 8, 91, 188, 101, 90, 50, 188, 202, 59, 21, 61, 240, 190, 5, 62, 203, 47, 100, 61, 44, 153, 155, 60, 85, 213, 93, 62, 82, 92, 71, 189, 252, 70, 39, 60, 134, 204, 34, 62, 101, 217, 241, 186, 141, 171, 190, 189, 80, 38, 19, 190, 14, 212, 150, 61, 234, 160, 203, 61, 74, 213, 5, 190, 128, 60, 61, 61, 150, 22, 163, 61, 190, 111, 238, 189, 135, 76, 191, 61, 39, 101, 230, 61, 155, 216, 203, 61, 103, 113, 33, 62, 26, 171, 240, 61, 177, 90, 60, 190, 111, 198, 36, 190, 97, 30, 132, 61, 158, 191, 72, 189, 9, 188, 175, 61, 158, 154, 94, 190, 13, 171, 244, 61, 182, 63, 142, 61, 62, 172, 159, 61, 1, 170, 172, 188, 187, 234, 20, 60, 82, 116, 62, 190, 46, 240, 79, 61, 132, 191, 195, 61, 75, 112, 59, 61, 253, 137, 85, 190, 171, 170, 204, 189, 41, 176, 182, 188, 38, 92, 182, 61, 64, 69, 249, 189, 23, 228, 73, 190, 173, 7, 86, 190, 32, 227, 27, 190, 239, 7, 137, 61, 229, 136, 247, 188, 208, 75, 65, 190, 170, 214, 80, 61, 155, 8, 143, 60, 58, 149, 182, 61, 1, 230, 59, 61, 170, 105, 200, 189, 49, 136, 46, 190, 198, 59, 246, 188, 117, 118, 8, 62, 252, 47, 8, 62, 52, 231, 179, 61, 59, 214, 161, 189, 140, 113, 150, 61, 208, 109, 28, 188, 191, 250, 163, 61, 156, 249, 30, 189, 209, 68, 69, 61, 3, 134, 156, 57, 17, 161, 143, 190, 173, 238, 152, 61, 156, 187, 69, 190, 192, 247, 128, 190, 221, 158, 184, 189, 89, 209, 61, 62, 164, 250, 184, 61, 144, 237, 110, 189, 8, 36, 91, 62, 242, 168, 255, 61, 247, 75, 101, 190, 248, 214, 124, 189, 1, 209, 159, 189, 24, 0, 251, 186, 131, 75, 122, 60, 154, 211, 23, 60, 158, 122, 173, 60, 102, 105, 187, 61, 143, 86, 127, 62, 112, 241, 56, 61, 2, 224, 168, 61, 70, 132, 252, 61, 171, 37, 56, 62, 196, 159, 68, 62, 171, 130, 2, 190, 212, 116, 19, 62, 55, 87, 255, 189, 248, 227, 2, 188, 227, 199, 132, 190, 78, 105, 174, 189, 87, 237, 46, 190, 85, 133, 100, 62, 17, 71, 44, 62, 131, 186, 30, 62, 95, 26, 217, 189, 0, 27, 153, 190, 104, 148, 64, 62, 145, 58, 41, 62, 205, 86, 105, 189, 191, 155, 218, 189, 213, 21, 47, 188, 134, 220, 253, 61, 164, 146, 177, 189, 57, 217, 59, 188, 248, 236, 144, 61, 241, 116, 52, 190, 69, 100, 47, 189, 196, 187, 65, 62, 190, 195, 176, 188, 29, 88, 235, 61, 95, 32, 247, 61, 213, 165, 159, 189, 126, 226, 230, 188, 229, 68, 72, 62, 41, 6, 243, 189, 165, 138, 152, 60, 134, 209, 54, 62, 97, 235, 201, 189, 251, 179, 3, 189, 148, 9, 17, 62, 161, 122, 175, 189, 179, 14, 30, 189, 8, 182, 246, 189, 140, 11, 34, 190, 190, 214, 223, 61, 40, 168, 144, 61, 33, 255, 75, 62, 8, 179, 213, 61, 10, 140, 219, 61, 141, 29, 191, 59, 11, 182, 24, 61, 99, 35, 168, 190, 167, 92, 181, 190, 168, 145, 70, 190, 126, 102, 67, 62, 94, 103, 106, 62, 130, 182, 177, 188, 196, 130, 27, 62, 71, 98, 166, 61, 242, 4, 27, 189, 254, 80, 181, 60, 54, 82, 46, 62, 175, 82, 89, 189, 180, 140, 32, 190, 15, 163, 210, 61, 130, 45, 56, 189, 152, 208, 77, 190, 125, 241, 92, 190, 252, 118, 136, 60, 150, 171, 89, 190, 252, 174, 166, 188, 115, 59, 66, 62, 121, 65, 177, 60, 237, 70, 99, 62, 10, 86, 152, 189, 22, 162, 139, 189, 81, 147, 31, 189, 55, 203, 17, 186, 93, 218, 30, 190, 102, 140, 173, 61, 143, 147, 7, 190, 202, 115, 49, 61, 164, 72, 57, 190, 219, 85, 36, 190, 10, 232, 7, 60, 64, 174, 235, 61, 158, 190, 45, 190, 153, 223, 62, 189, 11, 118, 63, 190, 240, 28, 65, 189, 149, 47, 202, 189, 136, 205, 247, 189, 245, 203, 136, 59, 26, 247, 127, 189, 13, 36, 54, 61, 56, 160, 22, 190, 92, 215, 34, 62, 190, 114, 136, 61, 36, 16, 171, 61, 26, 226, 254, 189, 89, 114, 180, 189, 178, 18, 46, 190, 249, 10, 0, 61, 54, 211, 106, 60, 207, 89, 241, 61, 168, 213, 74, 61, 195, 246, 210, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 244, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 60, 103, 79, 61, 95, 86, 237, 60, 43, 156, 160, 61, 245, 100, 182, 61, 45, 157, 247, 189, 159, 228, 176, 189, 31, 36, 22, 190, 180, 198, 17, 190, 254, 157, 184, 189, 140, 37, 196, 189, 82, 231, 205, 189, 69, 250, 13, 62, 5, 136, 10, 190, 80, 217, 31, 62, 242, 148, 240, 189, 46, 82, 43, 190, 225, 31, 240, 189, 162, 189, 177, 189, 167, 149, 40, 189, 224, 36, 96, 188, 244, 128, 248, 189, 22, 34, 120, 189, 61, 227, 155, 61, 44, 231, 11, 62, 76, 68, 25, 189, 224, 8, 108, 189, 34, 103, 208, 189, 138, 174, 10, 190, 121, 241, 225, 61, 248, 90, 42, 62, 202, 101, 73, 60, 97, 71, 19, 62, 252, 75, 128, 61, 183, 134, 17, 188, 117, 202, 185, 189, 67, 210, 15, 190, 170, 0, 254, 61, 118, 220, 154, 189, 107, 184, 255, 61, 54, 61, 238, 189, 245, 190, 183, 60, 147, 239, 45, 190, 166, 148, 84, 61, 162, 54, 255, 61, 209, 228, 40, 62, 64, 135, 23, 190, 178, 139, 232, 61, 186, 42, 213, 189, 105, 54, 178, 189, 83, 14, 237, 189, 58, 185, 52, 190, 190, 152, 39, 190, 12, 211, 171, 61, 156, 72, 232, 61, 188, 7, 240, 189, 108, 119, 157, 61, 71, 218, 60, 188, 69, 229, 16, 190, 60, 32, 29, 62, 81, 145, 7, 61, 204, 131, 20, 190, 198, 144, 163, 188, 125, 134, 175, 58, 168, 76, 21, 62, 28, 50, 14, 188, 195, 35, 67, 62, 70, 83, 160, 189, 41, 134, 6, 62, 199, 122, 38, 190, 160, 134, 45, 190, 56, 225, 185, 61, 208, 21, 205, 189, 185, 82, 42, 189, 152, 73, 9, 190, 83, 5, 171, 189, 119, 60, 46, 61, 200, 128, 8, 60, 193, 105, 56, 189, 156, 209, 20, 189, 160, 236, 59, 62, 51, 31, 88, 190, 90, 213, 229, 60, 48, 165, 239, 189, 17, 199, 197, 61, 75, 13, 43, 190, 176, 63, 6, 190, 129, 181, 80, 62, 161, 73, 195, 61, 8, 243, 13, 190, 58, 97, 217, 187, 181, 190, 26, 190, 52, 129, 138, 189, 171, 26, 74, 190, 187, 45, 243, 60, 48, 201, 102, 190, 57, 108, 245, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 207, 115, 242, 61, 94, 238, 209, 189, 172, 48, 105, 61, 204, 14, 2, 62, 218, 241, 215, 189, 76, 189, 25, 190, 0, 20, 231, 188, 162, 70, 221, 60, 124, 63, 120, 60, 215, 139, 202, 61, 235, 188, 25, 62, 41, 174, 128, 59, 74, 15, 232, 189, 93, 158, 45, 190, 39, 79, 189, 60, 217, 129, 37, 190, 186, 214, 8, 190, 205, 147, 51, 190, 153, 230, 31, 62, 102, 97, 29, 61, 82, 63, 43, 190, 238, 56, 85, 61, 136, 136, 10, 190, 210, 112, 107, 189, 170, 101, 45, 190, 18, 95, 251, 61, 47, 235, 192, 189, 4, 142, 135, 60, 165, 213, 12, 190, 96, 46, 25, 59, 111, 125, 34, 61, 237, 132, 122, 189, 106, 91, 12, 62, 67, 50, 33, 62, 79, 192, 73, 189, 215, 169, 247, 61, 162, 57, 27, 62, 59, 202, 151, 189, 57, 38, 214, 61, 17, 58, 183, 61, 70, 140, 192, 189, 181, 57, 21, 62, 2, 124, 210, 61, 231, 127, 238, 61, 114, 165, 239, 190, 243, 35, 38, 62, 137, 32, 0, 62, 24, 42, 41, 62, 8, 206, 29, 62, 141, 254, 107, 190, 252, 191, 27, 58, 255, 5, 21, 190, 185, 176, 238, 61, 203, 31, 137, 60, 150, 241, 159, 62, 60, 95, 208, 61, 199, 136, 18, 189, 198, 39, 238, 61, 97, 164, 68, 188, 122, 59, 143, 61, 119, 92, 16, 189, 149, 253, 210, 61, 108, 81, 222, 61, 64, 25, 126, 189, 6, 64, 39, 189, 106, 61, 102, 190, 250, 47, 12, 190, 231, 247, 8, 62, 67, 215, 178, 62, 188, 119, 153, 60, 2, 71, 163, 188, 105, 39, 16, 189, 101, 55, 131, 61, 12, 60, 230, 189, 221, 184, 54, 190, 90, 141, 176, 62, 41, 181, 8, 62, 134, 120, 79, 61, 148, 57, 64, 61, 86, 68, 103, 190, 29, 73, 218, 188, 33, 67, 60, 62, 140, 64, 148, 62, 132, 203, 177, 190, 219, 64, 165, 189, 10, 207, 39, 190, 78, 238, 83, 190, 160, 116, 226, 60, 76, 120, 58, 190, 178, 65, 212, 187, 116, 91, 70, 190, 251, 45, 30, 190, 163, 207, 175, 62, 16, 191, 59, 62, 92, 186, 178, 61, 136, 205, 149, 188, 69, 122, 224, 61, 181, 91, 47, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 226, 13, 209, 189, 128, 161, 47, 62, 236, 251, 34, 190, 190, 86, 177, 189, 239, 132, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 215, 21, 14, 190, 211, 60, 193, 61, 96, 166, 52, 60, 90, 108, 76, 61, 156, 98, 228, 189, 122, 227, 42, 61, 226, 177, 9, 190, 233, 29, 247, 188, 134, 3, 162, 60, 26, 154, 88, 61, 148, 78, 23, 190, 149, 142, 34, 61, 111, 72, 15, 190, 61, 208, 200, 189, 68, 255, 148, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 180, 250, 214, 189, 193, 90, 83, 190, 56, 86, 24, 61, 194, 199, 61, 189, 28, 174, 185, 61, 94, 58, 11, 189, 186, 199, 53, 62, 133, 20, 223, 188, 19, 21, 14, 190, 205, 89, 241, 59, 19, 248, 166, 61, 203, 225, 162, 189, 150, 124, 5, 190, 107, 47, 29, 62, 41, 238, 133, 61, 142, 185, 91, 61, 52, 21, 1, 186, 237, 33, 169, 59, 200, 193, 240, 186, 85, 34, 183, 188, 54, 113, 75, 62, 217, 237, 171, 61, 214, 203, 238, 189, 108, 159, 229, 188, 170, 232, 225, 189, 14, 38, 66, 190, 91, 239, 26, 61, 16, 60, 146, 62, 130, 33, 12, 190, 246, 12, 222, 190, 84, 118, 19, 191, 183, 227, 10, 190, 102, 57, 36, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 106, 88, 144, 62, 83, 47, 73, 190, 241, 149, 10, 190, 254, 182, 50, 190, 54, 130, 18, 191, 76, 103, 194, 61, 247, 221, 22, 62, 196, 218, 3, 190, 210, 177, 111, 60, 67, 198, 191, 61, 154, 24, 105, 190, 146, 105, 198, 190, 161, 117, 106, 189, 202, 213, 136, 62, 163, 22, 53, 190, 8, 137, 56, 62, 238, 51, 164, 61, 217, 15, 115, 62, 38, 95, 145, 188, 14, 168, 15, 62, 159, 66, 144, 190, 233, 93, 162, 61, 65, 68, 198, 62, 170, 209, 136, 61, 152, 238, 199, 61, 188, 56, 7, 190, 115, 43, 6, 62, 203, 118, 96, 190, 76, 218, 148, 190, 218, 249, 229, 190, 104, 100, 84, 189, 119, 80, 58, 189, 166, 22, 154, 189, 54, 133, 62, 190, 90, 39, 11, 61, 214, 165, 233, 189, 98, 251, 194, 190, 218, 177, 57, 62, 87, 160, 122, 62, 137, 204, 129, 188, 193, 102, 141, 188, 128, 174, 132, 190, 113, 206, 7, 62, 88, 117, 224, 190, 243, 86, 58, 61, 48, 174, 187, 189, 13, 205, 135, 190, 116, 227, 166, 60, 82, 179, 114, 59, 134, 165, 13, 62, 243, 73, 120, 189, 84, 208, 74, 62, 72, 254, 20, 190, 56, 244, 86, 62, 97, 184, 99, 62, 211, 253, 168, 189, 18, 2, 251, 189, 3, 60, 25, 189, 205, 56, 81, 62, 39, 127, 64, 189, 97, 10, 235, 190, 199, 177, 111, 190, 176, 170, 149, 190, 159, 195, 249, 189, 193, 114, 170, 188, 205, 152, 160, 61, 87, 198, 5, 190, 38, 63, 205, 61, 164, 252, 24, 61, 73, 247, 158, 189, 86, 1, 47, 61, 105, 128, 49, 190, 249, 125, 187, 189, 133, 184, 171, 61, 151, 62, 160, 189, 32, 144, 40, 190, 66, 15, 84, 186, 11, 8, 17, 190, 103, 214, 18, 189, 94, 12, 168, 189, 58, 243, 238, 61, 52, 244, 143, 189, 28, 38, 39, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 119, 110, 162, 189, 246, 237, 207, 61, 49, 45, 11, 62, 123, 227, 157, 59, 133, 239, 146, 61, 48, 81, 79, 60, 156, 214, 175, 61, 77, 145, 137, 61, 229, 78, 28, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 145, 87, 62, 220, 226, 187, 189, 7, 192, 207, 61, 143, 228, 97, 189, 186, 126, 106, 62, 208, 93, 157, 61, 229, 64, 202, 61, 69, 57, 71, 61, 37, 156, 242, 189, 248, 85, 2, 190, 203, 146, 15, 190, 19, 180, 22, 62, 198, 223, 9, 189, 26, 151, 130, 189, 33, 147, 77, 189, 140, 238, 43, 62, 21, 38, 105, 62, 126, 101, 5, 62, 68, 243, 135, 187, 43, 132, 55, 190, 14, 108, 38, 61, 207, 44, 203, 60, 106, 185, 50, 190, 231, 247, 117, 188, 59, 225, 30, 190, 171, 117, 113, 62, 206, 230, 164, 189, 236, 237, 115, 60, 198, 235, 52, 190, 112, 198, 172, 60, 174, 85, 242, 188, 176, 87, 99, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 241, 121, 62, 182, 141, 9, 189, 142, 45, 206, 59, 79, 191, 78, 190, 57, 179, 156, 62, 248, 27, 130, 190, 227, 236, 84, 190, 170, 157, 70, 61, 55, 236, 30, 62, 137, 96, 22, 190, 94, 119, 152, 60, 210, 5, 114, 62, 158, 132, 4, 62, 23, 233, 215, 61, 192, 70, 66, 190, 161, 117, 151, 189, 167, 247, 152, 62, 191, 253, 205, 61, 105, 214, 145, 61, 8, 41, 22, 189, 44, 226, 228, 60, 156, 129, 252, 61, 78, 149, 6, 190, 37, 176, 154, 61, 75, 229, 137, 190, 249, 180, 208, 62, 55, 219, 114, 61, 197, 1, 83, 190, 130, 166, 81, 188, 125, 58, 196, 190, 93, 79, 219, 190, 235, 140, 66, 60, 205, 93, 170, 190, 160, 9, 197, 189, 7, 192, 15, 61, 61, 222, 139, 61, 92, 102, 16, 190, 215, 101, 154, 189, 114, 215, 227, 56, 232, 210, 91, 60, 73, 245, 35, 188, 83, 51, 133, 61, 21, 49, 60, 62, 170, 94, 13, 190, 126, 109, 154, 61, 118, 56, 28, 61, 166, 68, 54, 62, 218, 52, 44, 190, 49, 1, 195, 61, 165, 244, 143, 60, 15, 242, 77, 189, 159, 129, 158, 60, 68, 227, 162, 61, 72, 22, 11, 190, 10, 104, 129, 187, 118, 50, 193, 61, 213, 187, 125, 61, 40, 226, 145, 61, 253, 94, 197, 188, 192, 102, 9, 62, 165, 130, 143, 189, 66, 2, 0, 190, 187, 200, 204, 189, 215, 234, 179, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 56, 185, 189, 8, 24, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 60, 175, 191, 127, 187, 208, 190, 139, 13, 164, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {131, 176, 209, 61, 129, 173, 146, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}