// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 22, 93, 63, 186, 213, 18, 63, 172, 77, 24, 188, 222, 122, 53, 190, 130, 157, 227, 62, 247, 219, 199, 190, 89, 56, 9, 63, 155, 128, 59, 191, 74, 211, 184, 62, 85, 222, 248, 62, 50, 31, 195, 191, 204, 0, 120, 190, 251, 138, 89, 191, 78, 77, 137, 189, 40, 250, 224, 62, 94, 102, 161, 190, 35, 216, 14, 62, 162, 195, 156, 60, 218, 225, 81, 188, 66, 247, 234, 63, 188, 229, 189, 62, 130, 238, 152, 62, 12, 198, 162, 191, 212, 77, 133, 190, 104, 167, 20, 63, 104, 171, 153, 62, 189, 191, 222, 62, 81, 69, 90, 63, 254, 55, 86, 63, 135, 147, 98, 62, 174, 38, 197, 62, 0, 16, 38, 191, 53, 108, 0, 63, 73, 84, 1, 190, 144, 130, 13, 191, 222, 119, 137, 62, 51, 97, 20, 191, 105, 224, 154, 191, 109, 136, 170, 190, 98, 19, 92, 63, 21, 149, 68, 63, 164, 1, 8, 62, 215, 89, 70, 63, 80, 135, 129, 191, 12, 87, 147, 190, 101, 235, 38, 63, 70, 167, 201, 63, 67, 161, 180, 62, 250, 176, 144, 62, 121, 103, 248, 63, 83, 223, 222, 62, 205, 101, 254, 189, 155, 121, 42, 190, 81, 64, 216, 189, 49, 18, 237, 190, 54, 252, 0, 191, 61, 213, 72, 62, 9, 178, 30, 191, 174, 52, 52, 63, 2, 189, 225, 190, 207, 196, 231, 62, 50, 34, 171, 190, 251, 78, 4, 190, 127, 125, 139, 190, 178, 123, 122, 191, 180, 45, 206, 190, 150, 215, 191, 62, 163, 19, 99, 63, 96, 213, 107, 190, 147, 101, 254, 62, 218, 25, 48, 62, 247, 102, 191, 62, 253, 252, 220, 62, 203, 121, 48, 63, 4, 113, 173, 62, 8, 180, 35, 63, 168, 143, 129, 191, 216, 159, 91, 62, 109, 121, 99, 191, 20, 194, 133, 63, 105, 112, 111, 61, 74, 100, 141, 61, 195, 120, 84, 191, 117, 10, 155, 62, 249, 20, 233, 188, 103, 112, 27, 191, 174, 29, 159, 62, 152, 243, 9, 191, 177, 27, 7, 191, 72, 9, 25, 63, 111, 186, 31, 62, 52, 140, 205, 190, 99, 7, 255, 62, 64, 251, 44, 62, 118, 58, 217, 190, 172, 63, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 45, 225, 190, 147, 212, 149, 190, 199, 53, 229, 190, 105, 176, 144, 189, 218, 121, 6, 191, 27, 16, 175, 62, 16, 222, 31, 62, 92, 16, 211, 62, 64, 147, 162, 190, 104, 156, 212, 190, 106, 48, 116, 190, 229, 28, 159, 62, 96, 119, 31, 63, 34, 104, 23, 63, 23, 34, 215, 190, 4, 172, 221, 62, 219, 206, 172, 190, 54, 203, 231, 62, 27, 247, 0, 63, 53, 141, 164, 62, 249, 195, 37, 191, 233, 241, 197, 190, 47, 241, 238, 62, 241, 104, 124, 190, 226, 183, 36, 190, 163, 220, 183, 190, 239, 64, 181, 190, 237, 224, 37, 186, 242, 122, 211, 62, 213, 91, 18, 190, 183, 55, 236, 62, 84, 92, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 10, 133, 62, 61, 54, 129, 59, 195, 30, 143, 61, 42, 178, 141, 189, 27, 241, 164, 60, 35, 126, 3, 62, 195, 207, 21, 192, 132, 216, 31, 62, 164, 159, 66, 190, 45, 198, 60, 191, 15, 120, 194, 61, 249, 60, 161, 186, 188, 213, 211, 61, 227, 116, 173, 62, 13, 108, 157, 189, 202, 207, 56, 61, 106, 236, 181, 190, 200, 21, 164, 62, 203, 169, 81, 62, 146, 103, 205, 60, 8, 99, 167, 190, 57, 56, 207, 61, 212, 140, 51, 62, 105, 88, 135, 185, 17, 172, 156, 190, 170, 84, 63, 62, 255, 56, 173, 190, 165, 190, 38, 62, 206, 220, 33, 62, 132, 187, 164, 189, 165, 67, 91, 62, 86, 250, 249, 60, 245, 68, 145, 62, 23, 151, 254, 189, 9, 47, 137, 190, 170, 138, 163, 189, 199, 131, 204, 61, 197, 254, 95, 62, 15, 242, 84, 188, 33, 208, 202, 187, 165, 240, 217, 61, 225, 223, 176, 61, 58, 38, 107, 61, 231, 21, 96, 190, 8, 167, 176, 60, 197, 43, 88, 62, 103, 70, 174, 190, 134, 165, 82, 62, 156, 87, 177, 188, 126, 12, 144, 187, 73, 137, 68, 190, 151, 9, 140, 61, 55, 54, 16, 190, 109, 214, 81, 61, 191, 101, 85, 62, 12, 152, 172, 188, 119, 71, 184, 60, 145, 99, 16, 191, 39, 152, 143, 61, 58, 147, 57, 190, 119, 223, 183, 188, 18, 193, 157, 61, 22, 95, 132, 189, 135, 210, 145, 188, 247, 37, 12, 191, 108, 114, 3, 62, 234, 40, 238, 60, 251, 95, 203, 62, 129, 114, 137, 189, 80, 9, 146, 189, 108, 177, 195, 62, 181, 125, 111, 62, 58, 33, 29, 191, 121, 35, 120, 191, 73, 17, 102, 190, 207, 240, 128, 62, 35, 234, 223, 62, 50, 253, 162, 191, 218, 84, 59, 63, 135, 34, 10, 192, 219, 11, 91, 191, 134, 230, 242, 61, 26, 60, 137, 62, 246, 233, 77, 190, 171, 248, 7, 63, 65, 245, 93, 62, 102, 2, 107, 189, 149, 249, 159, 190, 171, 184, 133, 191, 16, 73, 221, 62, 194, 71, 44, 189, 94, 237, 75, 62, 129, 41, 167, 62, 159, 117, 141, 62, 181, 64, 70, 61, 38, 224, 5, 190, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 91, 74, 174, 189, 55, 76, 55, 62, 81, 243, 144, 189, 51, 184, 204, 189, 147, 233, 255, 61, 116, 77, 4, 62, 211, 228, 173, 58, 138, 5, 3, 62, 144, 96, 34, 190, 50, 206, 194, 189, 160, 84, 22, 61, 222, 123, 220, 188, 111, 244, 4, 62, 174, 78, 90, 62, 62, 164, 132, 62, 226, 14, 211, 61, 73, 54, 100, 62, 155, 95, 17, 61, 143, 125, 84, 62, 243, 152, 82, 190, 135, 28, 252, 189, 77, 0, 193, 190, 172, 170, 170, 61, 116, 65, 66, 190, 189, 187, 233, 189, 11, 37, 49, 189, 88, 33, 42, 62, 11, 67, 42, 189, 200, 3, 25, 62, 155, 26, 186, 61, 188, 141, 55, 61, 170, 122, 71, 62, 250, 208, 12, 63, 20, 112, 187, 189, 73, 154, 153, 62, 211, 29, 233, 190, 156, 1, 217, 190, 82, 57, 208, 189, 158, 154, 66, 60, 90, 229, 100, 61, 91, 248, 24, 62, 25, 37, 96, 62, 179, 111, 203, 61, 192, 167, 172, 189, 154, 108, 32, 191, 196, 166, 142, 62, 92, 166, 212, 190, 93, 65, 59, 62, 204, 229, 117, 190, 193, 174, 227, 189, 145, 181, 174, 189, 213, 164, 83, 62, 35, 106, 21, 191, 76, 17, 44, 62, 103, 78, 146, 62, 49, 130, 77, 62, 169, 235, 53, 62, 211, 115, 124, 61, 239, 197, 105, 191, 218, 250, 64, 62, 112, 204, 198, 189, 2, 83, 150, 189, 135, 238, 152, 61, 80, 192, 233, 189, 56, 6, 122, 62, 180, 51, 60, 61, 142, 253, 32, 62, 113, 139, 147, 190, 105, 208, 142, 191, 215, 240, 1, 61, 182, 24, 113, 62, 125, 225, 171, 61, 49, 89, 220, 61, 188, 218, 136, 62, 8, 103, 192, 62, 37, 165, 24, 190, 162, 64, 29, 190, 164, 45, 33, 62, 196, 221, 241, 190, 25, 173, 160, 62, 70, 42, 235, 190, 131, 128, 159, 189, 143, 72, 27, 62, 197, 98, 11, 62, 119, 191, 58, 191, 121, 158, 165, 188, 140, 208, 115, 62, 96, 55, 155, 62, 66, 66, 131, 62, 174, 81, 235, 62, 138, 142, 143, 61, 88, 92, 164, 62, 186, 208, 197, 190, 140, 231, 113, 191, 160, 194, 21, 190, 168, 206, 48, 190, 141, 116, 155, 62, 92, 198, 75, 189, 130, 117, 142, 60, 81, 27, 63, 190, 66, 181, 115, 60, 138, 97, 210, 189, 97, 175, 37, 189, 186, 99, 237, 190, 62, 16, 24, 59, 105, 54, 2, 63, 204, 183, 39, 190, 95, 172, 188, 190, 161, 116, 69, 191, 211, 106, 11, 62, 48, 119, 54, 190, 55, 86, 165, 62, 0, 207, 128, 62, 0, 155, 29, 190, 33, 87, 242, 190, 148, 31, 97, 60, 157, 140, 8, 191, 95, 240, 49, 190, 159, 100, 217, 62, 57, 41, 120, 62, 57, 193, 130, 62, 177, 179, 185, 62, 173, 190, 135, 190, 137, 202, 106, 190, 194, 34, 96, 190, 245, 14, 62, 62, 109, 166, 2, 190, 53, 151, 159, 190, 254, 205, 4, 190, 156, 62, 196, 189, 235, 124, 12, 62, 123, 134, 48, 189, 245, 188, 218, 188, 63, 33, 240, 189, 224, 90, 59, 60, 240, 198, 31, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 157, 246, 247, 61, 61, 76, 4, 190, 75, 226, 220, 61, 37, 9, 5, 189, 27, 244, 156, 59, 133, 36, 247, 189, 15, 228, 231, 189, 17, 206, 13, 62, 49, 65, 149, 189, 210, 29, 1, 61, 151, 51, 5, 190, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 57, 72, 117, 189, 73, 182, 127, 190, 69, 148, 148, 189, 127, 113, 94, 61, 225, 96, 17, 190, 120, 34, 33, 191, 157, 85, 12, 61, 167, 67, 44, 190, 45, 7, 137, 59, 215, 120, 233, 61, 58, 112, 57, 190, 139, 8, 95, 62, 221, 128, 65, 60, 242, 254, 222, 62, 6, 245, 208, 191, 130, 105, 10, 191, 221, 37, 176, 191, 174, 38, 200, 191, 253, 76, 186, 61, 82, 135, 48, 62, 57, 112, 239, 61, 74, 14, 159, 191, 119, 125, 221, 62, 127, 192, 103, 190, 186, 158, 87, 62, 18, 179, 188, 61, 186, 70, 135, 62, 194, 255, 6, 62, 155, 120, 134, 62, 33, 240, 160, 61, 22, 34, 227, 189, 67, 13, 144, 190, 131, 88, 193, 189, 229, 42, 162, 62, 224, 209, 43, 59, 22, 98, 6, 62, 61, 30, 248, 189, 47, 130, 140, 59, 102, 80, 204, 188, 251, 241, 170, 62, 52, 78, 167, 189, 232, 52, 189, 62, 146, 197, 248, 62, 74, 90, 98, 61, 78, 221, 52, 190, 77, 94, 117, 60, 114, 192, 9, 190, 193, 114, 37, 190, 40, 140, 103, 62, 117, 96, 4, 62, 175, 233, 100, 60, 56, 13, 53, 190, 94, 88, 152, 62, 227, 176, 18, 63, 53, 120, 137, 62, 92, 199, 232, 61, 234, 23, 110, 62, 184, 159, 172, 62, 227, 39, 242, 190, 218, 190, 249, 61, 0, 24, 53, 61, 216, 207, 148, 190, 226, 253, 231, 188, 149, 1, 130, 190, 214, 209, 139, 60, 91, 73, 162, 189, 204, 15, 70, 189, 132, 192, 221, 59, 5, 93, 84, 62, 130, 4, 166, 62, 6, 68, 75, 62, 187, 151, 30, 62, 88, 172, 58, 62, 19, 224, 19, 62, 105, 139, 146, 189, 224, 122, 65, 58, 238, 147, 57, 62, 168, 136, 132, 62, 26, 216, 49, 62, 35, 192, 55, 62, 114, 121, 232, 61, 26, 147, 59, 61, 237, 74, 1, 62, 184, 110, 209, 61, 82, 19, 63, 62, 232, 116, 150, 189, 32, 59, 125, 190, 217, 21, 158, 189, 217, 83, 149, 189, 87, 186, 186, 59, 194, 120, 152, 190, 138, 175, 131, 62, 15, 201, 65, 190, 204, 204, 30, 189, 153, 103, 130, 62, 128, 64, 3, 189, 12, 37, 255, 61, 20, 191, 59, 62, 33, 152, 78, 61, 248, 92, 167, 62, 201, 30, 99, 62, 45, 67, 100, 62, 153, 245, 194, 61, 203, 120, 206, 190, 36, 221, 176, 62, 71, 243, 163, 189, 56, 141, 84, 191, 136, 237, 26, 191, 150, 22, 28, 190, 254, 128, 100, 62, 238, 137, 130, 61, 28, 100, 158, 62, 42, 190, 149, 189, 11, 81, 142, 189, 46, 220, 47, 62, 123, 126, 77, 62, 191, 215, 170, 61, 120, 41, 252, 62, 252, 225, 211, 61, 81, 42, 62, 190, 192, 82, 16, 190, 192, 159, 41, 191, 152, 86, 88, 62, 147, 203, 196, 59, 83, 225, 50, 191, 231, 201, 42, 188, 186, 32, 170, 189, 117, 218, 147, 61, 245, 10, 46, 61, 225, 28, 216, 188, 100, 62, 62, 190, 175, 220, 233, 58, 142, 18, 143, 61, 54, 32, 244, 60, 137, 180, 131, 190, 155, 8, 202, 189, 103, 173, 51, 189, 93, 183, 37, 61, 45, 3, 44, 190, 31, 110, 111, 190, 108, 3, 135, 190, 25, 204, 69, 190, 192, 118, 14, 61, 81, 195, 105, 189, 216, 126, 112, 190, 24, 168, 65, 61, 228, 147, 13, 188, 98, 91, 29, 61, 116, 141, 100, 61, 56, 169, 192, 189, 147, 199, 46, 190, 138, 131, 97, 189, 8, 211, 170, 61, 79, 148, 169, 61, 87, 85, 69, 61, 73, 191, 161, 189, 172, 99, 107, 61, 9, 178, 119, 189, 133, 249, 144, 61, 72, 125, 175, 189, 117, 57, 242, 60, 105, 138, 51, 62, 103, 126, 153, 190, 75, 1, 195, 62, 24, 154, 248, 190, 165, 111, 215, 190, 209, 51, 81, 190, 145, 109, 211, 188, 112, 14, 118, 187, 157, 91, 67, 62, 149, 71, 22, 63, 134, 16, 198, 62, 253, 192, 99, 190, 91, 151, 32, 191, 167, 59, 202, 61, 38, 184, 187, 190, 176, 142, 227, 59, 113, 89, 19, 190, 7, 170, 124, 61, 174, 11, 78, 60, 16, 42, 176, 62, 138, 218, 39, 191, 197, 62, 234, 189, 232, 176, 125, 62, 108, 233, 214, 62, 237, 110, 157, 62, 200, 42, 183, 62, 197, 57, 38, 191, 202, 201, 129, 61, 233, 146, 147, 60, 99, 85, 180, 190, 85, 117, 24, 189, 75, 92, 110, 190, 242, 251, 253, 62, 157, 225, 145, 61, 82, 189, 28, 61, 77, 65, 134, 190, 72, 155, 92, 190, 197, 44, 115, 62, 64, 241, 150, 186, 223, 143, 159, 189, 192, 255, 154, 188, 75, 73, 217, 60, 137, 55, 218, 61, 71, 2, 185, 189, 166, 79, 242, 61, 229, 103, 198, 61, 56, 70, 176, 190, 131, 4, 147, 189, 50, 51, 51, 62, 38, 57, 72, 188, 62, 169, 12, 62, 76, 62, 201, 61, 86, 72, 230, 190, 129, 235, 194, 188, 189, 93, 3, 62, 171, 162, 118, 189, 182, 224, 18, 62, 190, 158, 50, 189, 153, 181, 131, 61, 194, 153, 25, 61, 175, 183, 3, 62, 2, 101, 33, 61, 255, 138, 10, 189, 47, 10, 114, 189, 103, 77, 105, 190, 153, 33, 10, 62, 192, 150, 247, 188, 125, 239, 172, 62, 5, 183, 0, 62, 30, 201, 65, 62, 42, 45, 226, 61, 203, 68, 3, 62, 123, 94, 193, 190, 208, 57, 69, 191, 46, 227, 139, 190, 10, 70, 2, 62, 121, 166, 161, 62, 232, 167, 15, 61, 38, 121, 176, 62, 120, 47, 89, 62, 225, 214, 88, 62, 125, 158, 13, 188, 173, 187, 34, 62, 84, 19, 157, 187, 236, 167, 195, 61, 122, 137, 179, 61, 182, 19, 95, 188, 141, 142, 127, 190, 127, 55, 132, 190, 88, 130, 46, 190, 122, 173, 72, 62, 253, 97, 191, 189, 247, 191, 2, 62, 87, 248, 140, 61, 37, 127, 85, 62, 4, 30, 100, 60, 22, 162, 139, 189, 56, 209, 41, 189, 57, 107, 236, 188, 149, 223, 32, 190, 170, 90, 44, 61, 131, 57, 32, 190, 173, 227, 14, 61, 107, 129, 81, 190, 26, 66, 50, 190, 10, 232, 7, 60, 143, 39, 157, 61, 162, 110, 89, 190, 57, 130, 215, 189, 131, 172, 63, 190, 240, 28, 65, 189, 124, 228, 186, 189, 179, 155, 252, 189, 3, 114, 3, 189, 152, 202, 0, 190, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 41, 32, 139, 61, 248, 203, 2, 190, 161, 199, 217, 189, 9, 183, 55, 190, 179, 56, 15, 188, 196, 245, 242, 188, 22, 228, 150, 61, 241, 85, 225, 59, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 58, 175, 97, 62, 106, 208, 134, 190, 169, 133, 78, 62, 178, 116, 76, 191, 97, 121, 234, 60, 118, 37, 189, 60, 3, 33, 7, 191, 13, 58, 148, 191, 209, 235, 29, 189, 64, 12, 148, 62, 175, 90, 131, 188, 35, 251, 170, 62, 218, 7, 56, 190, 206, 132, 160, 61, 74, 228, 232, 190, 207, 129, 201, 190, 29, 126, 134, 190, 232, 141, 33, 62, 230, 158, 57, 62, 247, 119, 81, 60, 245, 23, 243, 189, 160, 11, 63, 190, 227, 183, 54, 189, 96, 244, 71, 62, 48, 254, 127, 188, 12, 7, 115, 62, 84, 231, 11, 191, 56, 157, 141, 189, 235, 166, 153, 62, 146, 175, 178, 62, 41, 112, 35, 62, 86, 206, 84, 191, 17, 56, 250, 61, 113, 167, 27, 190, 227, 170, 179, 190, 56, 135, 54, 190, 251, 124, 252, 61, 11, 224, 87, 187, 232, 3, 84, 62, 163, 142, 9, 190, 140, 244, 10, 191, 231, 195, 50, 191, 208, 245, 12, 191, 29, 71, 37, 61, 55, 98, 123, 62, 28, 119, 19, 191, 71, 108, 192, 61, 150, 112, 7, 190, 154, 250, 134, 189, 116, 68, 144, 190, 8, 44, 221, 60, 188, 3, 89, 190, 160, 169, 169, 61, 58, 42, 93, 191, 189, 144, 177, 190, 57, 105, 14, 191, 116, 101, 125, 191, 100, 69, 18, 190, 20, 255, 171, 62, 125, 205, 185, 190, 131, 250, 162, 190, 40, 119, 142, 189, 76, 57, 144, 190, 190, 198, 198, 190, 246, 90, 211, 189, 175, 236, 45, 62, 167, 137, 51, 187, 170, 92, 57, 60, 14, 209, 48, 61, 10, 207, 157, 61, 52, 43, 21, 190, 31, 213, 31, 190, 105, 155, 109, 62, 151, 7, 151, 62, 109, 224, 54, 61, 206, 247, 48, 61, 133, 197, 230, 62, 104, 103, 71, 190, 135, 78, 99, 190, 142, 99, 142, 189, 63, 88, 225, 188, 56, 156, 231, 61, 183, 89, 81, 61, 3, 177, 118, 62, 170, 255, 31, 190, 35, 93, 30, 62, 14, 123, 5, 62, 127, 206, 198, 62, 29, 173, 67, 62, 189, 20, 144, 190, 182, 43, 11, 191, 167, 191, 144, 61, 69, 202, 134, 190, 167, 55, 97, 62, 182, 3, 124, 190, 198, 145, 179, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 106, 134, 179, 189, 45, 183, 110, 190, 121, 10, 69, 62, 244, 61, 8, 62, 195, 181, 182, 189, 244, 161, 88, 189, 73, 99, 55, 191, 252, 98, 218, 61, 203, 97, 231, 189, 114, 37, 138, 191, 7, 208, 158, 62, 36, 62, 19, 62, 233, 50, 176, 61, 69, 252, 153, 189, 75, 12, 112, 61, 177, 23, 230, 190, 192, 73, 174, 190, 69, 85, 17, 190, 54, 208, 172, 62, 243, 226, 52, 62, 69, 32, 13, 63, 6, 255, 22, 191, 74, 161, 30, 189, 73, 113, 9, 190, 87, 0, 8, 191, 132, 102, 130, 62, 220, 107, 109, 191, 30, 1, 74, 62, 189, 150, 192, 60, 21, 68, 48, 62, 133, 124, 39, 62, 24, 141, 68, 190, 48, 46, 8, 61, 122, 230, 1, 63, 148, 21, 147, 189, 78, 36, 224, 188, 113, 248, 53, 62, 234, 105, 83, 61, 139, 104, 191, 62, 134, 182, 61, 61, 7, 9, 18, 190, 160, 219, 138, 62, 143, 162, 147, 61, 121, 135, 233, 61, 222, 240, 31, 191, 241, 136, 186, 61, 37, 235, 25, 190, 146, 215, 106, 62, 26, 154, 0, 62, 198, 2, 42, 190, 65, 58, 166, 59, 66, 59, 51, 62, 89, 231, 55, 62, 75, 21, 189, 62, 106, 67, 177, 62, 33, 124, 93, 61, 162, 163, 212, 189, 175, 247, 15, 62, 255, 199, 168, 61, 185, 242, 115, 60, 96, 194, 150, 189, 130, 68, 47, 61, 213, 200, 160, 61, 250, 10, 212, 61, 13, 223, 156, 61, 10, 254, 45, 62, 130, 228, 156, 190, 254, 72, 190, 62, 197, 5, 152, 62, 153, 74, 143, 189, 23, 14, 34, 62, 112, 206, 158, 61, 28, 77, 78, 189, 82, 112, 23, 191, 190, 163, 168, 190, 93, 55, 82, 62, 50, 116, 245, 187, 55, 160, 250, 61, 21, 12, 182, 62, 225, 24, 175, 189, 214, 211, 226, 61, 213, 231, 10, 189, 110, 177, 75, 62, 141, 44, 242, 190, 149, 86, 49, 63, 214, 42, 159, 191, 205, 31, 117, 190, 105, 183, 179, 189, 1, 60, 163, 190, 253, 233, 80, 190, 233, 141, 165, 62, 193, 133, 160, 190, 233, 237, 94, 62, 144, 186, 35, 62, 92, 180, 152, 60, 220, 24, 93, 62, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 136, 229, 55, 190, 138, 93, 140, 60, 119, 76, 62, 189, 235, 30, 60, 190, 189, 169, 57, 191, 43, 73, 246, 61, 116, 98, 183, 61, 120, 195, 143, 190, 7, 65, 117, 190, 27, 229, 232, 190, 134, 135, 156, 189, 28, 223, 44, 191, 61, 210, 8, 61, 247, 62, 142, 60, 243, 138, 32, 191, 239, 55, 211, 189, 0, 46, 24, 191, 247, 3, 115, 189, 212, 80, 185, 189, 237, 49, 83, 62, 243, 1, 137, 191, 69, 42, 58, 190, 232, 207, 254, 188, 166, 64, 137, 190, 237, 217, 100, 191, 220, 244, 249, 60, 247, 188, 183, 62, 68, 93, 7, 190, 38, 214, 119, 191, 201, 38, 161, 191, 66, 222, 13, 191, 83, 49, 137, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 165, 41, 201, 62, 250, 7, 143, 190, 47, 103, 157, 62, 142, 1, 220, 190, 155, 78, 184, 191, 173, 139, 29, 62, 161, 186, 103, 62, 126, 149, 86, 190, 174, 49, 134, 62, 120, 28, 102, 62, 216, 232, 152, 62, 31, 120, 176, 190, 247, 0, 51, 190, 128, 244, 203, 62, 8, 75, 8, 191, 171, 3, 112, 62, 157, 249, 141, 190, 54, 171, 129, 62, 115, 134, 30, 61, 102, 148, 241, 61, 238, 10, 150, 191, 3, 21, 51, 190, 68, 225, 192, 62, 27, 53, 164, 62, 82, 228, 70, 62, 145, 182, 120, 62, 203, 99, 111, 61, 86, 121, 145, 62, 58, 21, 151, 190, 199, 3, 77, 191, 98, 86, 132, 60, 228, 178, 68, 190, 140, 30, 5, 61, 217, 181, 98, 190, 97, 205, 151, 61, 245, 225, 165, 190, 77, 162, 120, 191, 118, 246, 194, 62, 55, 14, 61, 63, 24, 253, 104, 189, 155, 22, 27, 62, 101, 239, 138, 190, 13, 247, 45, 189, 75, 202, 16, 191, 50, 22, 88, 188, 147, 231, 89, 62, 8, 218, 34, 191, 88, 182, 200, 62, 9, 47, 156, 190, 160, 10, 95, 62, 123, 217, 29, 62, 198, 134, 129, 62, 158, 166, 181, 191, 156, 247, 195, 61, 225, 198, 154, 62, 107, 248, 14, 62, 154, 153, 252, 189, 84, 248, 227, 189, 7, 214, 246, 62, 27, 140, 57, 190, 213, 228, 229, 190, 215, 75, 18, 191, 30, 146, 211, 190, 22, 237, 34, 190, 104, 25, 182, 188, 235, 82, 147, 61, 79, 143, 18, 190, 7, 166, 209, 61, 43, 225, 80, 60, 162, 231, 176, 189, 88, 136, 198, 60, 71, 246, 47, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 226, 233, 167, 187, 50, 44, 36, 190, 98, 37, 8, 189, 244, 43, 212, 189, 21, 39, 189, 61, 110, 208, 154, 189, 67, 55, 54, 190, 154, 13, 44, 61, 136, 70, 135, 189, 128, 47, 139, 189, 170, 211, 184, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 212, 140, 112, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 46, 18, 72, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 38, 188, 62, 121, 177, 114, 189, 179, 85, 93, 62, 9, 218, 110, 189, 91, 76, 134, 62, 102, 102, 50, 189, 39, 225, 33, 62, 209, 207, 50, 62, 155, 92, 2, 190, 6, 12, 44, 189, 50, 5, 141, 190, 23, 24, 114, 62, 217, 27, 205, 61, 31, 216, 192, 189, 187, 176, 221, 189, 218, 32, 113, 62, 161, 31, 140, 62, 255, 239, 164, 61, 68, 243, 135, 187, 120, 134, 137, 60, 247, 134, 69, 61, 95, 18, 236, 59, 106, 185, 50, 190, 252, 181, 44, 62, 104, 47, 54, 190, 6, 14, 129, 62, 159, 130, 181, 189, 93, 14, 136, 189, 198, 235, 52, 190, 194, 186, 101, 61, 238, 76, 59, 62, 181, 31, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 166, 19, 63, 189, 243, 223, 60, 217, 203, 129, 191, 245, 126, 50, 191, 162, 33, 31, 62, 168, 252, 185, 190, 4, 85, 172, 190, 51, 54, 80, 63, 150, 5, 28, 62, 120, 239, 151, 191, 54, 147, 186, 62, 169, 169, 25, 62, 241, 182, 142, 62, 19, 5, 99, 61, 170, 208, 17, 191, 105, 230, 139, 59, 110, 244, 132, 62, 115, 234, 188, 61, 105, 214, 145, 61, 213, 31, 218, 190, 150, 155, 132, 63, 175, 90, 127, 62, 78, 149, 6, 190, 131, 2, 78, 63, 244, 191, 100, 190, 117, 137, 185, 62, 250, 123, 99, 61, 57, 131, 53, 191, 130, 166, 81, 188, 181, 158, 22, 191, 82, 230, 133, 191, 149, 133, 168, 188, 194, 223, 226, 190, 21, 33, 63, 190, 43, 162, 37, 190, 167, 138, 79, 61, 133, 191, 112, 190, 21, 130, 136, 190, 165, 227, 239, 189, 117, 133, 225, 62, 174, 189, 43, 188, 17, 111, 246, 62, 47, 213, 13, 62, 143, 218, 138, 190, 17, 96, 131, 61, 242, 161, 54, 61, 136, 200, 216, 61, 232, 164, 171, 189, 216, 30, 127, 61, 98, 166, 128, 60, 15, 242, 77, 189, 242, 115, 9, 190, 236, 104, 39, 62, 33, 195, 195, 60, 10, 104, 129, 187, 118, 244, 228, 62, 44, 6, 212, 189, 35, 189, 15, 62, 92, 1, 204, 188, 110, 175, 127, 62, 165, 130, 143, 189, 241, 12, 66, 190, 202, 160, 160, 61, 188, 248, 62, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 114, 192, 188, 169, 21, 11, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 212, 247, 62, 25, 3, 5, 62, 78, 69, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 86, 61, 191, 38, 96, 219, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}