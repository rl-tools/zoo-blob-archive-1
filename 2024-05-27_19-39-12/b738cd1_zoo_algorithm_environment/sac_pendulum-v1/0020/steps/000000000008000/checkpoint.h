// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 57, 93, 63, 156, 13, 241, 62, 218, 181, 167, 189, 139, 135, 72, 190, 225, 216, 18, 63, 132, 181, 219, 190, 18, 211, 1, 63, 155, 235, 36, 191, 253, 113, 220, 62, 123, 22, 5, 63, 42, 227, 176, 191, 67, 115, 160, 190, 133, 147, 42, 191, 148, 197, 37, 190, 53, 197, 10, 63, 178, 98, 129, 190, 18, 100, 132, 61, 234, 50, 244, 59, 91, 130, 31, 189, 86, 137, 198, 63, 1, 0, 168, 62, 102, 46, 238, 62, 203, 123, 139, 191, 235, 168, 224, 190, 137, 174, 26, 63, 39, 38, 137, 62, 225, 209, 244, 62, 171, 130, 85, 63, 17, 229, 67, 63, 68, 18, 137, 62, 161, 25, 141, 61, 209, 161, 237, 190, 248, 232, 2, 63, 52, 6, 67, 190, 109, 31, 227, 190, 37, 15, 194, 62, 207, 97, 46, 191, 90, 87, 134, 191, 165, 161, 120, 190, 161, 66, 44, 63, 252, 90, 28, 63, 100, 99, 102, 62, 85, 151, 76, 63, 230, 118, 133, 191, 49, 246, 106, 190, 33, 100, 246, 62, 129, 80, 167, 63, 16, 35, 225, 62, 65, 3, 177, 60, 236, 65, 206, 63, 171, 165, 22, 63, 29, 162, 218, 61, 2, 94, 102, 190, 113, 194, 144, 190, 63, 216, 212, 190, 127, 2, 0, 191, 53, 84, 130, 62, 126, 12, 7, 191, 255, 112, 51, 63, 5, 249, 27, 191, 204, 105, 226, 62, 116, 116, 135, 190, 45, 254, 49, 190, 57, 146, 254, 190, 76, 78, 48, 191, 6, 42, 242, 190, 158, 47, 229, 62, 241, 42, 82, 63, 49, 250, 77, 190, 82, 104, 1, 63, 190, 92, 48, 62, 150, 182, 213, 62, 106, 24, 232, 62, 6, 39, 33, 63, 182, 112, 180, 62, 14, 186, 51, 63, 159, 74, 100, 191, 181, 120, 44, 62, 52, 22, 67, 191, 123, 17, 64, 63, 211, 120, 144, 61, 202, 144, 152, 190, 154, 42, 227, 190, 93, 160, 204, 62, 62, 78, 237, 187, 65, 117, 2, 191, 48, 104, 194, 62, 64, 144, 253, 190, 67, 228, 254, 190, 62, 205, 28, 63, 206, 179, 138, 62, 152, 152, 219, 190, 161, 134, 5, 63, 157, 139, 139, 62, 174, 138, 210, 190, 173, 41, 25, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 73, 228, 190, 62, 7, 131, 190, 112, 86, 186, 190, 169, 111, 235, 189, 186, 175, 158, 190, 206, 41, 193, 62, 96, 42, 130, 62, 179, 241, 166, 62, 64, 161, 89, 190, 85, 86, 179, 190, 98, 154, 173, 190, 139, 242, 166, 62, 72, 118, 35, 63, 41, 234, 42, 63, 160, 208, 173, 190, 216, 89, 252, 62, 215, 45, 33, 61, 144, 196, 23, 63, 96, 218, 11, 63, 197, 76, 137, 62, 239, 142, 1, 191, 29, 222, 152, 190, 251, 43, 249, 62, 137, 34, 26, 190, 105, 234, 131, 189, 113, 62, 154, 190, 204, 183, 202, 189, 32, 173, 106, 189, 110, 37, 3, 63, 57, 104, 253, 60, 13, 56, 33, 63, 13, 94, 228, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 1, 54, 62, 39, 149, 33, 60, 64, 205, 118, 61, 5, 239, 99, 189, 15, 162, 50, 189, 106, 179, 115, 59, 199, 21, 174, 191, 175, 209, 6, 62, 151, 56, 68, 190, 22, 17, 39, 191, 121, 32, 132, 61, 73, 99, 134, 59, 204, 54, 77, 60, 237, 151, 172, 62, 118, 62, 206, 189, 220, 208, 147, 61, 182, 96, 103, 190, 68, 194, 140, 62, 126, 159, 51, 62, 213, 1, 165, 189, 87, 40, 32, 191, 225, 26, 193, 61, 28, 166, 205, 61, 171, 231, 197, 187, 168, 227, 157, 190, 7, 136, 85, 62, 87, 30, 26, 191, 9, 233, 178, 61, 82, 115, 57, 62, 117, 188, 86, 190, 183, 87, 122, 62, 11, 100, 101, 189, 16, 223, 64, 62, 80, 211, 194, 189, 5, 239, 13, 188, 66, 222, 158, 61, 253, 164, 38, 61, 135, 117, 134, 62, 82, 140, 222, 59, 207, 96, 177, 61, 152, 74, 3, 62, 195, 129, 173, 59, 157, 211, 221, 61, 189, 239, 222, 189, 164, 59, 212, 61, 156, 59, 140, 62, 33, 228, 131, 190, 211, 123, 74, 62, 168, 14, 1, 190, 244, 66, 219, 61, 249, 243, 167, 189, 118, 96, 189, 61, 209, 176, 211, 190, 65, 99, 38, 62, 185, 5, 73, 62, 24, 68, 176, 60, 252, 51, 63, 189, 101, 60, 68, 190, 50, 166, 110, 189, 238, 187, 23, 190, 118, 15, 3, 62, 204, 228, 9, 187, 180, 177, 147, 61, 31, 223, 167, 189, 13, 197, 155, 190, 105, 161, 214, 189, 78, 113, 62, 61, 110, 32, 79, 62, 162, 54, 73, 185, 49, 166, 21, 60, 240, 85, 15, 190, 241, 70, 16, 62, 106, 226, 26, 190, 176, 132, 56, 61, 210, 123, 2, 190, 129, 65, 200, 61, 69, 79, 202, 62, 53, 155, 65, 191, 238, 196, 24, 63, 15, 71, 174, 191, 183, 77, 143, 191, 137, 64, 185, 61, 93, 211, 19, 62, 255, 10, 133, 190, 95, 135, 10, 63, 146, 116, 44, 62, 85, 188, 193, 189, 119, 232, 131, 61, 152, 52, 23, 190, 138, 166, 127, 62, 15, 165, 57, 190, 197, 188, 35, 62, 107, 136, 226, 61, 2, 36, 176, 62, 87, 1, 234, 189, 49, 190, 107, 190, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 125, 231, 218, 189, 20, 111, 95, 62, 188, 86, 203, 187, 10, 196, 169, 189, 21, 204, 188, 61, 214, 119, 7, 62, 229, 125, 193, 61, 180, 105, 246, 61, 146, 69, 68, 190, 8, 250, 217, 189, 45, 191, 41, 61, 69, 208, 73, 60, 73, 141, 121, 61, 40, 225, 97, 62, 32, 191, 128, 62, 72, 12, 189, 61, 52, 251, 1, 62, 178, 241, 75, 61, 173, 163, 114, 62, 8, 145, 87, 190, 235, 12, 199, 190, 45, 153, 195, 190, 93, 14, 154, 61, 9, 121, 95, 190, 11, 89, 75, 190, 229, 134, 132, 61, 125, 36, 217, 58, 19, 43, 111, 189, 187, 178, 75, 62, 6, 216, 139, 60, 228, 218, 179, 61, 206, 62, 14, 62, 186, 170, 243, 62, 26, 200, 18, 190, 43, 15, 145, 62, 218, 185, 195, 190, 194, 35, 243, 190, 10, 228, 87, 189, 1, 75, 123, 189, 181, 69, 149, 61, 199, 4, 20, 62, 188, 120, 82, 62, 72, 38, 115, 61, 171, 30, 196, 189, 234, 232, 207, 190, 230, 62, 138, 62, 121, 135, 208, 190, 53, 204, 82, 62, 123, 178, 58, 190, 203, 184, 231, 189, 124, 120, 137, 189, 212, 158, 27, 62, 71, 215, 10, 191, 99, 204, 157, 62, 147, 102, 108, 62, 8, 156, 82, 62, 7, 224, 81, 62, 189, 31, 235, 61, 127, 198, 169, 190, 131, 171, 55, 62, 72, 222, 182, 189, 167, 66, 88, 189, 137, 48, 167, 61, 192, 116, 100, 190, 33, 183, 129, 62, 215, 105, 65, 61, 130, 133, 212, 61, 170, 176, 142, 190, 89, 16, 78, 191, 43, 101, 138, 188, 158, 144, 160, 61, 249, 122, 181, 61, 139, 194, 19, 62, 102, 18, 165, 62, 48, 3, 128, 62, 236, 61, 101, 190, 125, 111, 109, 190, 146, 141, 26, 62, 181, 175, 234, 190, 201, 210, 172, 62, 22, 218, 134, 190, 252, 22, 171, 189, 146, 174, 133, 61, 190, 192, 245, 61, 101, 155, 4, 191, 242, 113, 128, 61, 227, 102, 116, 62, 45, 24, 172, 62, 50, 84, 174, 62, 153, 187, 232, 62, 232, 59, 17, 62, 254, 158, 149, 62, 61, 243, 217, 190, 89, 116, 50, 191, 18, 11, 47, 190, 185, 21, 47, 190, 26, 144, 147, 62, 216, 176, 100, 60, 3, 46, 38, 62, 116, 224, 49, 190, 129, 198, 190, 190, 62, 76, 108, 190, 122, 153, 138, 187, 160, 137, 201, 190, 28, 60, 147, 189, 140, 76, 179, 62, 44, 75, 201, 188, 102, 197, 110, 190, 96, 66, 10, 191, 83, 129, 158, 61, 125, 51, 58, 190, 0, 160, 56, 62, 236, 191, 24, 61, 16, 151, 40, 190, 227, 43, 180, 190, 204, 185, 157, 61, 67, 205, 242, 189, 96, 17, 59, 190, 190, 65, 177, 62, 165, 62, 55, 62, 170, 10, 213, 61, 54, 70, 150, 62, 233, 161, 41, 191, 214, 147, 133, 189, 157, 170, 54, 190, 159, 249, 193, 189, 185, 245, 243, 189, 187, 112, 71, 190, 254, 205, 4, 190, 146, 233, 158, 189, 235, 124, 12, 62, 70, 63, 11, 189, 245, 188, 218, 188, 76, 140, 228, 189, 224, 90, 59, 60, 109, 101, 16, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 117, 197, 11, 62, 61, 76, 4, 190, 242, 137, 224, 61, 37, 9, 5, 189, 27, 244, 156, 59, 93, 231, 219, 189, 15, 228, 231, 189, 0, 91, 31, 62, 14, 136, 149, 189, 95, 157, 66, 61, 71, 145, 245, 189, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 1, 42, 51, 189, 106, 106, 64, 61, 18, 209, 173, 189, 137, 21, 32, 189, 109, 254, 227, 190, 149, 84, 177, 190, 152, 87, 146, 62, 30, 169, 167, 190, 193, 170, 8, 190, 167, 233, 118, 189, 58, 112, 57, 190, 59, 190, 117, 62, 192, 168, 91, 61, 5, 69, 236, 62, 182, 55, 175, 191, 237, 227, 71, 191, 39, 123, 172, 191, 97, 38, 185, 191, 159, 201, 202, 61, 238, 240, 137, 62, 55, 156, 22, 62, 136, 9, 132, 191, 183, 10, 220, 62, 44, 38, 75, 190, 182, 71, 221, 61, 76, 40, 123, 61, 46, 109, 175, 190, 46, 218, 212, 61, 67, 61, 119, 62, 25, 238, 111, 61, 161, 45, 135, 61, 10, 55, 156, 190, 126, 71, 22, 190, 57, 63, 248, 62, 114, 175, 143, 187, 248, 115, 4, 62, 78, 9, 99, 190, 218, 116, 251, 57, 57, 71, 148, 61, 233, 99, 154, 62, 92, 73, 144, 189, 190, 7, 141, 62, 188, 169, 156, 62, 114, 162, 157, 188, 38, 225, 20, 190, 92, 237, 211, 189, 160, 204, 230, 188, 87, 142, 9, 190, 192, 5, 126, 62, 197, 243, 135, 60, 55, 248, 154, 61, 102, 44, 169, 189, 214, 188, 143, 62, 144, 86, 213, 62, 165, 30, 171, 61, 254, 70, 96, 62, 219, 199, 28, 62, 173, 199, 131, 62, 81, 112, 79, 190, 142, 162, 151, 61, 68, 205, 147, 60, 9, 130, 93, 190, 91, 193, 12, 189, 6, 191, 58, 190, 224, 161, 48, 60, 188, 25, 217, 189, 93, 101, 25, 60, 142, 3, 160, 61, 72, 212, 101, 62, 59, 82, 146, 62, 204, 212, 79, 62, 108, 42, 107, 62, 93, 56, 52, 62, 200, 73, 226, 61, 160, 200, 177, 189, 166, 145, 55, 59, 248, 248, 94, 62, 215, 166, 75, 62, 205, 170, 56, 62, 186, 193, 41, 62, 129, 207, 199, 61, 33, 88, 106, 189, 60, 19, 21, 62, 127, 205, 1, 62, 123, 64, 73, 62, 120, 65, 175, 190, 20, 129, 99, 190, 180, 42, 171, 189, 252, 244, 206, 189, 145, 19, 173, 189, 111, 242, 57, 190, 158, 2, 182, 61, 139, 213, 89, 190, 132, 127, 47, 60, 189, 53, 51, 62, 140, 127, 63, 60, 227, 71, 138, 61, 76, 183, 179, 61, 187, 41, 29, 62, 221, 236, 137, 61, 109, 189, 19, 62, 136, 247, 254, 189, 19, 59, 188, 60, 166, 87, 138, 189, 60, 210, 114, 62, 208, 99, 108, 190, 118, 153, 41, 191, 241, 174, 203, 190, 154, 229, 172, 189, 132, 150, 8, 62, 208, 129, 156, 189, 49, 9, 67, 62, 245, 185, 13, 61, 78, 132, 171, 188, 38, 36, 167, 61, 109, 2, 129, 62, 90, 240, 252, 61, 164, 69, 183, 62, 202, 216, 130, 61, 71, 217, 71, 190, 16, 79, 204, 190, 31, 239, 192, 190, 220, 199, 114, 61, 221, 113, 20, 62, 238, 205, 231, 190, 226, 179, 131, 188, 138, 168, 141, 190, 134, 71, 165, 187, 148, 218, 112, 61, 187, 234, 20, 60, 82, 116, 62, 190, 248, 203, 64, 61, 132, 191, 195, 61, 54, 32, 244, 60, 73, 177, 88, 190, 30, 71, 205, 189, 41, 176, 182, 188, 226, 17, 176, 61, 120, 121, 249, 189, 62, 159, 79, 190, 94, 250, 94, 190, 2, 9, 33, 190, 151, 29, 130, 61, 229, 136, 247, 188, 162, 26, 67, 190, 24, 168, 65, 61, 155, 8, 143, 60, 176, 171, 173, 61, 1, 230, 59, 61, 170, 105, 200, 189, 49, 136, 46, 190, 198, 59, 246, 188, 147, 38, 4, 62, 253, 117, 5, 62, 172, 217, 174, 61, 73, 191, 161, 189, 53, 85, 137, 61, 155, 237, 136, 188, 82, 155, 146, 61, 161, 188, 54, 189, 209, 68, 69, 61, 212, 123, 22, 62, 229, 246, 138, 190, 116, 104, 177, 62, 232, 18, 224, 190, 64, 254, 231, 190, 97, 143, 38, 190, 3, 82, 146, 189, 220, 1, 55, 60, 155, 251, 78, 62, 80, 202, 24, 63, 212, 45, 184, 62, 52, 56, 115, 190, 6, 232, 205, 190, 131, 2, 208, 61, 94, 231, 182, 190, 102, 29, 101, 61, 192, 138, 77, 189, 246, 98, 125, 61, 143, 134, 182, 60, 230, 198, 189, 62, 254, 142, 7, 191, 56, 41, 113, 61, 215, 83, 102, 62, 47, 127, 222, 62, 135, 49, 186, 62, 212, 87, 173, 62, 194, 170, 250, 189, 246, 59, 133, 61, 2, 183, 148, 59, 82, 99, 159, 190, 212, 143, 81, 189, 207, 200, 103, 190, 250, 143, 9, 63, 254, 245, 32, 62, 213, 37, 231, 61, 187, 125, 17, 190, 135, 243, 161, 190, 79, 247, 133, 62, 61, 211, 93, 188, 200, 145, 214, 60, 4, 60, 137, 189, 65, 195, 153, 60, 7, 241, 148, 61, 62, 105, 175, 189, 72, 49, 52, 62, 7, 236, 61, 62, 239, 0, 140, 190, 73, 24, 114, 189, 95, 201, 100, 61, 239, 102, 228, 61, 30, 178, 8, 62, 36, 244, 30, 62, 233, 39, 47, 191, 232, 230, 221, 61, 175, 6, 87, 62, 129, 16, 189, 189, 209, 214, 11, 61, 140, 54, 5, 62, 52, 182, 75, 189, 164, 233, 36, 189, 142, 59, 56, 62, 55, 1, 203, 189, 206, 200, 126, 60, 120, 127, 158, 189, 64, 3, 134, 190, 240, 231, 51, 62, 179, 47, 160, 60, 102, 113, 180, 62, 203, 112, 16, 62, 136, 18, 38, 62, 116, 134, 79, 62, 122, 117, 235, 61, 105, 38, 217, 190, 129, 111, 77, 191, 74, 9, 123, 190, 74, 57, 49, 62, 211, 171, 136, 62, 193, 147, 100, 188, 91, 54, 179, 62, 45, 136, 30, 62, 23, 109, 239, 61, 210, 181, 165, 188, 228, 107, 77, 62, 54, 172, 229, 56, 221, 159, 176, 189, 90, 37, 72, 61, 197, 136, 68, 189, 250, 197, 152, 190, 1, 182, 180, 190, 114, 32, 210, 189, 4, 131, 224, 188, 0, 152, 149, 189, 38, 209, 35, 62, 119, 156, 235, 60, 168, 153, 101, 62, 225, 201, 139, 60, 22, 162, 139, 189, 56, 209, 41, 189, 140, 184, 54, 187, 149, 223, 32, 190, 30, 110, 158, 61, 242, 174, 18, 190, 150, 142, 34, 61, 125, 65, 81, 190, 80, 134, 36, 190, 10, 232, 7, 60, 60, 82, 228, 61, 176, 250, 52, 190, 103, 210, 180, 189, 85, 100, 61, 190, 240, 28, 65, 189, 226, 253, 178, 189, 244, 107, 246, 189, 58, 18, 182, 188, 215, 68, 184, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 119, 190, 169, 61, 26, 226, 254, 189, 34, 230, 181, 189, 9, 183, 55, 190, 89, 205, 216, 60, 228, 131, 207, 59, 40, 223, 225, 61, 67, 117, 48, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 244, 147, 141, 61, 63, 90, 242, 190, 237, 215, 202, 61, 10, 106, 28, 191, 24, 248, 195, 60, 200, 129, 200, 61, 98, 204, 186, 190, 195, 202, 83, 191, 248, 12, 234, 189, 219, 80, 167, 61, 86, 176, 164, 189, 207, 82, 147, 62, 87, 239, 67, 62, 31, 211, 50, 60, 198, 116, 211, 190, 115, 177, 195, 190, 53, 8, 76, 190, 125, 0, 106, 62, 150, 243, 26, 62, 242, 38, 185, 189, 245, 23, 243, 189, 214, 63, 138, 62, 35, 46, 89, 190, 46, 89, 248, 61, 110, 39, 36, 189, 1, 148, 186, 60, 195, 49, 70, 189, 66, 169, 230, 189, 234, 80, 125, 62, 222, 106, 164, 62, 150, 127, 199, 61, 105, 91, 67, 191, 101, 34, 2, 62, 220, 110, 133, 188, 227, 170, 179, 190, 56, 135, 54, 190, 252, 112, 55, 62, 166, 188, 229, 60, 223, 12, 143, 62, 33, 141, 150, 190, 199, 125, 14, 191, 209, 80, 28, 191, 128, 185, 44, 191, 225, 107, 20, 59, 198, 160, 88, 62, 77, 5, 247, 190, 71, 108, 192, 61, 64, 83, 135, 189, 150, 8, 199, 188, 227, 225, 121, 190, 196, 125, 126, 189, 113, 188, 15, 190, 160, 169, 169, 61, 106, 242, 57, 191, 134, 153, 125, 190, 102, 121, 18, 191, 21, 142, 57, 191, 100, 69, 18, 190, 133, 170, 198, 62, 194, 82, 203, 190, 82, 123, 173, 190, 20, 11, 156, 189, 223, 231, 238, 189, 67, 192, 158, 61, 243, 96, 190, 189, 134, 69, 108, 62, 92, 148, 92, 61, 143, 242, 30, 61, 234, 27, 81, 190, 0, 25, 145, 189, 215, 18, 95, 189, 176, 148, 26, 190, 65, 86, 145, 62, 40, 221, 172, 62, 70, 99, 28, 61, 242, 230, 209, 188, 240, 114, 175, 62, 155, 3, 207, 189, 253, 12, 105, 190, 181, 207, 191, 61, 236, 200, 243, 189, 91, 158, 159, 61, 90, 164, 179, 189, 143, 210, 93, 62, 57, 236, 175, 190, 250, 215, 208, 61, 152, 148, 24, 62, 191, 248, 227, 62, 146, 134, 120, 62, 127, 201, 58, 190, 36, 76, 221, 190, 147, 195, 32, 61, 85, 219, 123, 190, 153, 169, 220, 188, 219, 24, 19, 190, 204, 207, 226, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 114, 185, 76, 62, 177, 137, 215, 190, 147, 250, 12, 62, 145, 80, 84, 62, 93, 221, 246, 189, 33, 14, 147, 189, 134, 56, 27, 191, 88, 131, 21, 62, 239, 102, 209, 189, 15, 78, 1, 191, 37, 161, 118, 62, 174, 66, 215, 61, 4, 73, 9, 62, 214, 162, 6, 190, 136, 218, 132, 61, 33, 176, 178, 190, 113, 168, 135, 190, 136, 161, 231, 189, 82, 125, 159, 62, 183, 94, 136, 190, 110, 174, 150, 190, 126, 29, 44, 190, 220, 120, 168, 189, 245, 240, 17, 190, 56, 141, 218, 190, 143, 94, 106, 62, 248, 149, 40, 191, 207, 126, 3, 62, 180, 56, 14, 188, 155, 121, 151, 61, 118, 41, 5, 62, 214, 249, 66, 190, 156, 23, 162, 61, 206, 168, 233, 62, 16, 188, 208, 189, 170, 189, 200, 58, 151, 23, 51, 62, 223, 230, 201, 187, 253, 33, 105, 62, 245, 90, 133, 61, 165, 11, 243, 189, 48, 165, 145, 62, 183, 194, 134, 61, 4, 100, 178, 61, 161, 66, 14, 191, 102, 29, 190, 61, 225, 181, 33, 190, 155, 64, 108, 62, 35, 25, 67, 62, 28, 177, 54, 190, 252, 111, 204, 188, 115, 116, 247, 61, 43, 181, 250, 61, 19, 52, 182, 62, 247, 16, 178, 62, 212, 158, 164, 61, 131, 17, 64, 189, 22, 87, 207, 61, 203, 70, 119, 62, 31, 205, 251, 60, 87, 92, 193, 189, 172, 22, 192, 61, 115, 126, 114, 61, 161, 150, 187, 61, 63, 35, 52, 61, 96, 161, 39, 62, 249, 167, 114, 190, 102, 128, 205, 62, 1, 103, 150, 62, 35, 188, 63, 60, 70, 142, 136, 62, 106, 169, 158, 61, 149, 61, 214, 189, 88, 203, 39, 191, 60, 210, 148, 190, 80, 195, 135, 62, 107, 153, 174, 60, 29, 35, 167, 61, 225, 225, 175, 62, 226, 207, 17, 190, 2, 160, 21, 61, 13, 133, 103, 188, 54, 46, 138, 62, 207, 6, 202, 190, 69, 175, 241, 188, 180, 1, 148, 191, 137, 21, 142, 190, 99, 10, 17, 190, 8, 86, 214, 190, 240, 174, 208, 189, 144, 254, 76, 61, 249, 254, 141, 190, 175, 173, 134, 62, 181, 4, 242, 61, 129, 213, 40, 61, 23, 178, 32, 62, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 236, 89, 133, 189, 26, 184, 160, 61, 119, 76, 62, 189, 160, 180, 29, 189, 120, 79, 59, 191, 218, 77, 39, 62, 255, 105, 38, 62, 106, 50, 81, 190, 123, 124, 67, 190, 59, 230, 98, 190, 134, 135, 156, 189, 158, 174, 54, 191, 7, 159, 182, 61, 79, 93, 86, 62, 191, 225, 194, 190, 149, 253, 252, 61, 246, 0, 149, 190, 64, 29, 140, 60, 175, 133, 79, 190, 88, 191, 141, 62, 215, 138, 86, 191, 180, 14, 215, 189, 107, 236, 133, 61, 80, 252, 117, 190, 213, 94, 25, 191, 220, 244, 249, 60, 91, 166, 159, 62, 68, 93, 7, 190, 189, 120, 133, 191, 66, 21, 166, 191, 244, 65, 77, 191, 169, 15, 65, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 36, 118, 201, 62, 113, 143, 130, 190, 208, 21, 101, 62, 89, 38, 210, 190, 244, 118, 155, 191, 43, 140, 129, 61, 209, 241, 126, 61, 140, 149, 75, 190, 192, 63, 144, 62, 67, 183, 136, 62, 24, 52, 0, 62, 227, 202, 226, 190, 71, 127, 125, 190, 122, 223, 196, 62, 111, 64, 2, 191, 9, 154, 118, 62, 159, 66, 208, 189, 90, 163, 123, 62, 188, 208, 163, 189, 188, 177, 219, 61, 85, 164, 113, 191, 75, 92, 49, 186, 214, 82, 200, 62, 200, 197, 172, 62, 24, 195, 132, 62, 75, 212, 116, 62, 33, 131, 242, 61, 115, 188, 85, 62, 18, 111, 178, 190, 87, 229, 29, 191, 194, 32, 172, 188, 22, 118, 22, 190, 90, 251, 51, 189, 89, 147, 99, 190, 225, 177, 22, 61, 2, 36, 17, 190, 163, 174, 149, 191, 232, 190, 117, 62, 33, 192, 189, 62, 173, 28, 187, 186, 104, 71, 17, 190, 13, 42, 188, 190, 137, 235, 16, 62, 79, 101, 111, 191, 254, 151, 248, 61, 118, 237, 141, 61, 89, 67, 0, 191, 216, 61, 7, 62, 239, 208, 124, 190, 40, 169, 83, 62, 226, 170, 10, 190, 191, 251, 106, 62, 241, 63, 147, 191, 57, 115, 104, 62, 112, 24, 125, 62, 150, 40, 64, 190, 116, 165, 187, 190, 164, 206, 226, 188, 70, 195, 89, 62, 11, 40, 216, 188, 184, 85, 125, 191, 206, 50, 67, 191, 214, 139, 74, 191, 208, 170, 16, 190, 193, 114, 170, 188, 205, 152, 160, 61, 79, 143, 18, 190, 38, 63, 205, 61, 43, 225, 80, 60, 36, 44, 168, 189, 233, 132, 209, 60, 105, 128, 49, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 174, 95, 138, 186, 92, 246, 29, 190, 103, 214, 18, 189, 209, 184, 210, 189, 21, 39, 189, 61, 52, 244, 143, 189, 6, 50, 54, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 116, 108, 160, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 48, 29, 132, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 212, 159, 62, 81, 32, 59, 60, 233, 2, 135, 62, 9, 218, 110, 189, 114, 106, 134, 62, 42, 203, 198, 188, 45, 124, 6, 62, 233, 71, 4, 62, 37, 156, 242, 189, 17, 137, 86, 60, 67, 95, 207, 189, 122, 181, 111, 62, 86, 24, 117, 187, 119, 17, 135, 189, 141, 189, 179, 189, 31, 84, 158, 62, 170, 83, 121, 62, 210, 57, 213, 61, 68, 243, 135, 187, 170, 94, 229, 187, 153, 49, 180, 61, 46, 69, 226, 59, 106, 185, 50, 190, 103, 34, 6, 62, 82, 155, 57, 190, 13, 209, 126, 62, 159, 130, 181, 189, 167, 150, 153, 60, 198, 235, 52, 190, 132, 73, 186, 60, 149, 86, 87, 61, 238, 164, 119, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 134, 226, 62, 164, 237, 50, 61, 254, 34, 76, 191, 245, 126, 50, 191, 36, 238, 139, 62, 131, 255, 199, 190, 196, 105, 190, 190, 42, 151, 25, 63, 55, 236, 30, 62, 214, 191, 185, 191, 28, 84, 159, 62, 248, 210, 107, 62, 183, 218, 99, 62, 25, 135, 211, 61, 219, 218, 26, 191, 174, 238, 148, 61, 152, 23, 204, 62, 244, 162, 192, 61, 105, 214, 145, 61, 131, 187, 158, 190, 243, 105, 52, 63, 134, 188, 137, 62, 78, 149, 6, 190, 144, 96, 225, 62, 136, 207, 151, 190, 153, 123, 16, 63, 250, 123, 99, 61, 92, 22, 47, 191, 130, 166, 81, 188, 199, 84, 25, 191, 242, 110, 88, 191, 112, 104, 179, 188, 155, 201, 17, 191, 152, 88, 198, 189, 89, 36, 58, 61, 167, 138, 79, 61, 49, 14, 32, 190, 40, 189, 41, 190, 209, 173, 152, 189, 96, 182, 210, 62, 73, 245, 35, 188, 71, 211, 17, 62, 84, 108, 132, 62, 145, 243, 44, 190, 207, 126, 65, 62, 137, 171, 32, 61, 182, 15, 52, 62, 185, 49, 85, 190, 79, 205, 240, 61, 227, 62, 121, 60, 15, 242, 77, 189, 98, 188, 121, 189, 93, 131, 144, 61, 169, 133, 83, 189, 10, 104, 129, 187, 64, 162, 0, 63, 222, 153, 32, 61, 48, 61, 68, 62, 92, 1, 204, 188, 126, 83, 72, 62, 165, 130, 143, 189, 238, 211, 47, 190, 71, 184, 28, 189, 137, 49, 14, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 177, 31, 189, 178, 163, 237, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 88, 51, 191, 112, 64, 42, 64, 210, 98, 0, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 9, 153, 192, 133, 154, 142, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}