// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 17, 155, 62, 199, 100, 217, 62, 2, 171, 27, 62, 76, 23, 232, 61, 92, 60, 16, 63, 15, 41, 144, 190, 14, 0, 24, 62, 88, 249, 3, 191, 148, 15, 241, 62, 5, 159, 133, 62, 205, 16, 223, 190, 251, 119, 222, 190, 26, 7, 200, 190, 176, 130, 4, 191, 120, 195, 227, 189, 116, 235, 183, 189, 227, 121, 27, 190, 83, 62, 57, 61, 57, 112, 0, 191, 37, 247, 254, 62, 20, 86, 137, 62, 225, 5, 133, 62, 95, 150, 226, 190, 41, 251, 17, 191, 165, 215, 18, 63, 200, 248, 71, 189, 211, 75, 232, 62, 216, 99, 227, 62, 86, 84, 184, 62, 245, 129, 75, 62, 29, 235, 29, 62, 246, 160, 191, 190, 43, 119, 189, 62, 94, 194, 249, 60, 137, 84, 139, 190, 63, 119, 186, 61, 113, 68, 198, 190, 226, 157, 238, 190, 222, 59, 10, 191, 219, 108, 161, 62, 93, 198, 82, 61, 30, 107, 125, 187, 122, 98, 207, 62, 252, 102, 240, 190, 31, 226, 134, 190, 242, 156, 224, 61, 49, 69, 202, 62, 67, 30, 108, 62, 33, 144, 21, 190, 52, 141, 210, 61, 116, 171, 239, 62, 135, 122, 102, 61, 25, 118, 140, 60, 42, 0, 0, 191, 255, 44, 183, 190, 246, 225, 221, 190, 27, 202, 149, 62, 10, 128, 4, 191, 169, 96, 17, 63, 6, 143, 192, 190, 204, 223, 28, 62, 107, 51, 69, 190, 100, 184, 72, 189, 95, 75, 165, 190, 49, 206, 57, 189, 124, 119, 157, 190, 163, 52, 61, 62, 130, 195, 234, 62, 189, 3, 159, 189, 42, 204, 164, 62, 50, 212, 204, 189, 52, 8, 157, 62, 78, 12, 75, 62, 195, 14, 56, 62, 59, 2, 132, 62, 208, 227, 192, 62, 134, 128, 10, 191, 152, 198, 144, 62, 178, 101, 18, 191, 219, 58, 207, 62, 98, 138, 101, 62, 114, 245, 22, 189, 211, 77, 1, 191, 108, 53, 125, 62, 129, 248, 114, 62, 215, 146, 223, 190, 208, 46, 88, 62, 128, 97, 24, 189, 5, 43, 17, 191, 57, 72, 141, 62, 243, 119, 157, 62, 95, 46, 1, 191, 141, 171, 108, 62, 168, 39, 240, 62, 85, 145, 103, 62, 255, 135, 8, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 192, 19, 191, 233, 99, 184, 190, 3, 205, 138, 190, 233, 49, 107, 189, 233, 242, 239, 190, 66, 249, 157, 62, 63, 85, 159, 62, 75, 132, 139, 62, 194, 206, 89, 60, 242, 187, 125, 190, 158, 144, 184, 190, 186, 17, 87, 62, 121, 38, 134, 62, 107, 207, 17, 63, 42, 100, 167, 190, 78, 32, 19, 63, 183, 194, 129, 62, 15, 73, 238, 62, 150, 109, 188, 62, 91, 14, 154, 62, 133, 247, 8, 190, 112, 189, 157, 190, 181, 111, 16, 63, 23, 39, 24, 190, 127, 187, 53, 62, 172, 16, 128, 190, 208, 188, 160, 190, 11, 128, 163, 190, 211, 240, 44, 62, 121, 79, 43, 190, 176, 221, 242, 62, 192, 76, 152, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 196, 115, 61, 178, 161, 55, 61, 75, 234, 139, 61, 16, 85, 248, 189, 182, 211, 138, 189, 80, 13, 16, 190, 156, 134, 1, 190, 108, 4, 252, 186, 59, 120, 17, 190, 246, 218, 116, 189, 247, 38, 186, 61, 121, 254, 27, 189, 189, 255, 29, 190, 229, 168, 129, 61, 81, 196, 12, 190, 79, 93, 88, 61, 201, 148, 243, 60, 229, 33, 45, 62, 178, 95, 3, 62, 157, 175, 148, 189, 184, 164, 174, 189, 156, 35, 177, 61, 180, 136, 229, 189, 15, 94, 84, 61, 70, 234, 220, 189, 72, 227, 147, 61, 35, 157, 206, 189, 147, 22, 105, 61, 225, 89, 127, 61, 249, 90, 33, 190, 154, 249, 3, 62, 53, 214, 213, 189, 120, 228, 234, 189, 194, 204, 167, 189, 233, 216, 10, 61, 236, 137, 29, 62, 65, 64, 37, 62, 156, 169, 46, 62, 83, 207, 15, 62, 27, 209, 40, 61, 51, 156, 184, 61, 150, 207, 14, 61, 133, 184, 29, 62, 133, 225, 7, 189, 202, 154, 49, 187, 126, 65, 121, 61, 188, 135, 134, 189, 154, 58, 244, 61, 4, 198, 155, 188, 162, 252, 177, 60, 206, 177, 103, 189, 163, 58, 29, 186, 152, 157, 48, 62, 4, 187, 188, 60, 17, 164, 133, 61, 45, 53, 234, 59, 205, 126, 165, 189, 76, 100, 21, 190, 15, 28, 179, 189, 133, 194, 24, 190, 50, 141, 15, 62, 39, 32, 53, 61, 31, 202, 28, 61, 34, 210, 239, 189, 26, 253, 149, 61, 89, 80, 45, 62, 116, 219, 153, 189, 105, 113, 198, 189, 161, 80, 131, 189, 158, 228, 53, 188, 114, 94, 178, 61, 247, 147, 166, 61, 59, 142, 37, 190, 216, 93, 8, 62, 119, 162, 25, 190, 223, 254, 154, 189, 245, 124, 219, 61, 121, 106, 237, 189, 115, 231, 140, 61, 173, 208, 12, 190, 100, 103, 5, 189, 26, 172, 187, 189, 19, 220, 125, 189, 173, 187, 177, 189, 136, 180, 42, 190, 27, 45, 228, 61, 3, 49, 244, 61, 174, 55, 220, 60, 25, 116, 15, 189, 97, 115, 26, 61, 106, 16, 44, 190, 105, 96, 166, 61, 222, 154, 61, 189, 131, 116, 46, 62, 76, 32, 168, 189, 127, 82, 45, 190, 89, 254, 223, 189, 132, 132, 181, 189, 245, 36, 229, 189, 213, 219, 137, 61, 124, 67, 223, 188, 63, 45, 25, 62, 247, 93, 119, 188, 242, 73, 200, 61, 44, 154, 23, 60, 28, 87, 65, 189, 184, 207, 60, 61, 254, 231, 222, 61, 114, 59, 134, 59, 223, 110, 192, 189, 183, 96, 230, 61, 112, 43, 31, 62, 154, 192, 115, 61, 243, 71, 168, 188, 173, 77, 46, 62, 99, 158, 198, 189, 145, 19, 188, 189, 60, 131, 32, 62, 206, 126, 48, 190, 34, 86, 46, 190, 220, 249, 187, 189, 197, 157, 163, 189, 174, 202, 146, 61, 169, 23, 197, 61, 200, 189, 114, 189, 111, 192, 150, 189, 137, 54, 137, 189, 67, 187, 187, 60, 227, 169, 12, 189, 94, 199, 47, 62, 95, 193, 156, 61, 128, 13, 37, 190, 234, 2, 202, 189, 86, 243, 82, 187, 64, 197, 179, 187, 202, 118, 146, 61, 125, 91, 242, 189, 67, 86, 51, 62, 195, 64, 16, 62, 183, 176, 226, 189, 59, 78, 94, 61, 87, 235, 77, 60, 151, 64, 40, 62, 226, 139, 134, 189, 136, 238, 96, 188, 205, 141, 6, 62, 42, 247, 25, 62, 204, 121, 26, 190, 231, 247, 189, 189, 255, 197, 42, 190, 207, 65, 86, 61, 208, 182, 7, 190, 21, 232, 206, 189, 53, 88, 4, 62, 166, 68, 73, 189, 185, 136, 47, 61, 67, 78, 155, 61, 234, 103, 23, 189, 162, 222, 135, 189, 254, 156, 178, 61, 52, 214, 18, 62, 230, 93, 4, 190, 8, 219, 27, 61, 223, 137, 119, 189, 71, 53, 40, 61, 231, 177, 137, 61, 195, 94, 47, 61, 235, 186, 225, 61, 51, 82, 31, 190, 214, 88, 143, 189, 135, 230, 227, 189, 139, 41, 181, 60, 48, 114, 193, 61, 194, 182, 140, 61, 76, 76, 142, 61, 124, 238, 67, 188, 199, 244, 47, 190, 165, 109, 35, 190, 76, 91, 63, 61, 233, 116, 92, 189, 230, 35, 25, 62, 117, 69, 190, 61, 208, 150, 51, 190, 148, 106, 23, 189, 206, 35, 223, 189, 194, 148, 29, 190, 2, 146, 24, 190, 109, 37, 140, 61, 84, 75, 219, 59, 22, 44, 69, 61, 17, 158, 247, 61, 214, 253, 16, 190, 50, 127, 88, 189, 114, 124, 9, 62, 107, 182, 35, 190, 30, 61, 186, 188, 9, 241, 198, 61, 85, 148, 178, 189, 230, 183, 39, 189, 61, 200, 50, 62, 136, 184, 0, 190, 43, 51, 4, 62, 144, 217, 79, 61, 244, 147, 191, 61, 217, 193, 114, 189, 176, 28, 14, 190, 88, 132, 216, 189, 71, 233, 211, 61, 252, 64, 144, 189, 179, 188, 3, 190, 87, 12, 246, 61, 100, 233, 124, 61, 73, 66, 176, 61, 232, 4, 183, 61, 146, 232, 116, 61, 70, 90, 2, 62, 182, 163, 12, 62, 40, 38, 178, 188, 184, 41, 158, 61, 168, 205, 156, 61, 16, 112, 247, 189, 179, 237, 26, 190, 150, 158, 202, 189, 71, 178, 51, 189, 158, 11, 249, 188, 184, 180, 134, 189, 209, 26, 187, 61, 220, 243, 108, 58, 14, 85, 52, 188, 138, 15, 163, 189, 116, 49, 15, 61, 207, 159, 57, 189, 163, 177, 230, 189, 155, 209, 161, 61, 45, 196, 215, 60, 214, 2, 205, 60, 86, 209, 246, 189, 24, 240, 81, 188, 96, 247, 51, 189, 107, 126, 250, 61, 222, 232, 3, 62, 228, 95, 239, 189, 225, 227, 194, 189, 187, 5, 207, 61, 11, 75, 233, 61, 128, 58, 30, 61, 210, 220, 5, 62, 59, 193, 239, 61, 56, 57, 9, 61, 116, 173, 20, 190, 44, 10, 3, 189, 243, 17, 129, 61, 248, 21, 218, 188, 234, 233, 41, 62, 98, 147, 165, 188, 17, 134, 130, 61, 254, 205, 4, 190, 146, 233, 158, 189, 235, 124, 12, 62, 70, 63, 11, 189, 245, 188, 218, 188, 76, 140, 228, 189, 224, 90, 59, 60, 109, 101, 16, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 117, 197, 11, 62, 61, 76, 4, 190, 242, 137, 224, 61, 37, 9, 5, 189, 27, 244, 156, 59, 93, 231, 219, 189, 15, 228, 231, 189, 0, 91, 31, 62, 14, 136, 149, 189, 95, 157, 66, 61, 71, 145, 245, 189, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 1, 42, 51, 189, 254, 72, 51, 190, 45, 184, 41, 59, 116, 245, 28, 61, 213, 194, 4, 190, 48, 151, 141, 189, 14, 156, 36, 62, 44, 43, 212, 189, 24, 150, 162, 61, 20, 237, 30, 189, 22, 107, 40, 190, 124, 203, 45, 62, 211, 168, 40, 61, 157, 39, 27, 62, 49, 90, 157, 189, 217, 242, 16, 190, 17, 20, 210, 59, 139, 115, 169, 189, 84, 158, 172, 189, 53, 24, 179, 61, 215, 102, 210, 60, 242, 107, 172, 188, 72, 74, 36, 62, 89, 30, 49, 189, 248, 152, 15, 62, 19, 37, 188, 61, 51, 99, 81, 61, 244, 114, 31, 61, 78, 126, 40, 190, 254, 7, 212, 186, 153, 2, 17, 61, 217, 195, 107, 188, 202, 207, 175, 188, 53, 209, 20, 62, 186, 57, 26, 190, 50, 245, 0, 62, 108, 171, 3, 190, 31, 59, 43, 62, 79, 53, 5, 61, 71, 224, 128, 187, 46, 174, 80, 60, 248, 44, 44, 62, 160, 161, 150, 188, 14, 165, 15, 189, 33, 94, 35, 189, 235, 186, 156, 187, 141, 204, 6, 190, 26, 135, 141, 61, 150, 169, 250, 60, 93, 166, 27, 190, 139, 114, 168, 61, 105, 56, 186, 188, 48, 31, 10, 62, 184, 193, 174, 60, 137, 148, 11, 61, 234, 254, 172, 188, 62, 43, 49, 61, 231, 179, 135, 61, 49, 7, 47, 189, 34, 128, 247, 189, 48, 4, 38, 61, 136, 168, 178, 189, 124, 247, 152, 60, 182, 106, 252, 189, 201, 225, 173, 185, 115, 52, 13, 190, 192, 247, 133, 189, 103, 251, 13, 62, 35, 244, 190, 61, 51, 164, 247, 61, 217, 123, 96, 61, 109, 211, 227, 61, 194, 122, 148, 61, 101, 125, 34, 62, 216, 201, 217, 61, 249, 228, 159, 61, 221, 137, 19, 62, 162, 103, 154, 61, 175, 210, 179, 187, 167, 189, 54, 61, 65, 28, 82, 189, 228, 222, 52, 190, 127, 125, 17, 62, 23, 88, 51, 61, 101, 130, 28, 62, 194, 139, 240, 189, 43, 212, 37, 190, 15, 48, 221, 189, 177, 92, 50, 189, 97, 224, 77, 188, 164, 176, 246, 189, 38, 228, 207, 188, 99, 212, 6, 190, 114, 111, 163, 189, 108, 200, 17, 62, 44, 98, 209, 189, 150, 170, 56, 189, 189, 202, 240, 59, 138, 144, 233, 61, 24, 128, 20, 62, 130, 47, 68, 189, 191, 125, 29, 61, 89, 1, 136, 189, 115, 81, 15, 61, 199, 208, 233, 61, 102, 154, 169, 61, 133, 107, 172, 189, 139, 70, 83, 189, 144, 0, 5, 188, 84, 2, 18, 61, 9, 204, 33, 190, 109, 54, 72, 189, 233, 159, 6, 62, 208, 202, 210, 189, 204, 171, 122, 61, 39, 163, 173, 61, 82, 110, 17, 62, 39, 153, 6, 62, 74, 102, 47, 62, 106, 93, 12, 190, 12, 227, 137, 189, 96, 51, 25, 62, 27, 142, 198, 60, 152, 163, 141, 61, 249, 192, 238, 189, 43, 217, 74, 61, 24, 153, 157, 61, 67, 65, 22, 61, 167, 196, 118, 189, 94, 181, 186, 188, 94, 48, 35, 190, 13, 65, 177, 61, 137, 181, 255, 61, 112, 12, 24, 62, 29, 54, 22, 190, 111, 18, 214, 189, 240, 129, 127, 60, 2, 235, 247, 61, 166, 108, 25, 190, 49, 165, 36, 190, 19, 154, 3, 190, 92, 6, 10, 190, 126, 84, 32, 62, 71, 223, 85, 60, 10, 207, 38, 190, 156, 159, 145, 61, 130, 125, 96, 61, 22, 69, 13, 62, 136, 142, 146, 61, 64, 162, 131, 189, 182, 120, 28, 190, 61, 42, 0, 61, 115, 251, 37, 62, 192, 81, 27, 62, 17, 66, 25, 62, 133, 86, 193, 189, 152, 244, 227, 61, 182, 52, 154, 61, 84, 216, 4, 62, 193, 128, 8, 61, 69, 169, 163, 61, 153, 192, 146, 189, 16, 172, 1, 190, 1, 220, 146, 61, 208, 252, 99, 189, 102, 137, 244, 59, 133, 45, 177, 189, 40, 96, 23, 62, 200, 234, 248, 61, 112, 176, 168, 189, 151, 178, 35, 62, 122, 228, 5, 62, 204, 4, 203, 189, 114, 201, 13, 190, 173, 115, 147, 189, 60, 194, 18, 62, 156, 181, 140, 59, 224, 116, 61, 61, 86, 215, 147, 189, 88, 137, 5, 62, 228, 29, 140, 61, 43, 16, 243, 61, 213, 71, 35, 189, 100, 181, 117, 186, 198, 97, 32, 62, 103, 91, 33, 62, 56, 108, 207, 189, 68, 76, 11, 62, 133, 158, 247, 189, 55, 36, 2, 62, 232, 68, 22, 190, 107, 238, 254, 59, 234, 21, 111, 189, 105, 187, 52, 62, 12, 25, 110, 61, 76, 71, 229, 61, 230, 254, 221, 188, 30, 200, 158, 189, 144, 121, 24, 62, 170, 69, 7, 62, 103, 164, 168, 189, 223, 116, 37, 190, 252, 163, 15, 188, 174, 77, 169, 61, 231, 30, 141, 189, 90, 191, 2, 62, 229, 85, 204, 189, 105, 48, 125, 60, 114, 243, 10, 190, 10, 195, 34, 62, 208, 197, 202, 188, 52, 162, 238, 61, 251, 88, 203, 60, 105, 60, 16, 59, 213, 74, 8, 190, 195, 8, 57, 189, 4, 139, 42, 190, 159, 148, 98, 189, 187, 156, 253, 61, 69, 118, 182, 189, 11, 27, 171, 189, 176, 67, 3, 62, 101, 185, 205, 189, 126, 71, 137, 189, 99, 34, 43, 190, 64, 217, 42, 188, 46, 210, 210, 61, 202, 253, 50, 62, 149, 140, 0, 62, 72, 141, 242, 189, 254, 232, 223, 187, 198, 206, 114, 61, 153, 183, 245, 187, 190, 142, 41, 190, 102, 36, 20, 190, 104, 98, 171, 189, 13, 67, 28, 189, 222, 178, 36, 62, 254, 174, 98, 189, 78, 39, 96, 61, 90, 166, 46, 62, 32, 59, 140, 189, 10, 51, 157, 59, 14, 228, 153, 60, 229, 51, 158, 59, 70, 174, 49, 190, 221, 135, 48, 62, 6, 76, 51, 61, 106, 24, 37, 189, 108, 160, 186, 188, 151, 3, 9, 60, 110, 196, 38, 190, 26, 139, 53, 61, 31, 179, 124, 188, 244, 242, 141, 189, 66, 158, 66, 61, 76, 208, 216, 189, 22, 162, 139, 189, 81, 147, 31, 189, 55, 203, 17, 186, 231, 186, 30, 190, 63, 135, 172, 61, 168, 52, 246, 189, 106, 200, 117, 61, 61, 28, 50, 190, 219, 85, 36, 190, 10, 232, 7, 60, 64, 174, 235, 61, 32, 37, 43, 190, 153, 62, 20, 189, 37, 217, 51, 190, 240, 28, 65, 189, 182, 74, 168, 189, 106, 236, 234, 189, 205, 90, 138, 60, 1, 182, 76, 189, 73, 163, 110, 61, 56, 160, 22, 190, 144, 190, 39, 62, 66, 16, 169, 61, 36, 16, 171, 61, 26, 226, 254, 189, 89, 114, 180, 189, 232, 176, 37, 190, 249, 10, 0, 61, 54, 211, 106, 60, 207, 89, 241, 61, 63, 38, 75, 61, 218, 18, 208, 189, 121, 133, 202, 189, 167, 27, 93, 61, 151, 68, 70, 61, 95, 213, 168, 60, 27, 246, 199, 189, 8, 181, 25, 190, 139, 219, 23, 62, 202, 16, 204, 189, 23, 42, 224, 61, 128, 158, 156, 61, 3, 93, 10, 62, 217, 12, 196, 61, 112, 59, 2, 190, 219, 58, 147, 61, 113, 140, 32, 62, 200, 199, 132, 61, 1, 33, 136, 60, 149, 242, 164, 188, 61, 254, 124, 189, 169, 159, 136, 189, 240, 214, 184, 189, 111, 159, 25, 190, 24, 12, 243, 61, 84, 187, 46, 190, 180, 44, 13, 62, 41, 101, 159, 189, 29, 164, 131, 61, 60, 104, 16, 190, 200, 246, 95, 61, 91, 125, 204, 61, 240, 173, 40, 190, 197, 109, 1, 62, 60, 103, 79, 61, 95, 86, 237, 60, 133, 28, 178, 61, 245, 100, 182, 61, 12, 157, 241, 189, 31, 245, 171, 189, 23, 142, 20, 190, 84, 214, 17, 190, 137, 5, 169, 189, 87, 20, 191, 189, 221, 116, 189, 189, 167, 115, 20, 62, 74, 170, 13, 190, 53, 113, 33, 62, 216, 150, 240, 189, 110, 174, 39, 190, 37, 188, 223, 189, 184, 123, 179, 189, 90, 18, 11, 189, 224, 36, 96, 188, 244, 128, 248, 189, 22, 34, 120, 189, 61, 227, 155, 61, 158, 245, 17, 62, 133, 184, 7, 189, 57, 133, 87, 189, 34, 103, 208, 189, 179, 103, 4, 190, 32, 10, 239, 61, 66, 103, 50, 62, 109, 102, 167, 60, 97, 71, 19, 62, 252, 75, 128, 61, 183, 134, 17, 188, 190, 156, 171, 189, 67, 210, 15, 190, 170, 0, 254, 61, 35, 15, 138, 189, 71, 19, 26, 62, 54, 61, 238, 189, 200, 43, 251, 60, 164, 80, 45, 190, 98, 243, 102, 61, 201, 116, 5, 62, 209, 228, 40, 62, 138, 247, 18, 190, 178, 139, 232, 61, 18, 59, 174, 189, 117, 186, 126, 189, 83, 14, 237, 189, 29, 253, 34, 190, 98, 223, 38, 190, 12, 211, 171, 61, 156, 72, 232, 61, 161, 203, 233, 189, 235, 4, 168, 61, 229, 199, 163, 186, 69, 229, 16, 190, 138, 247, 45, 62, 1, 254, 24, 61, 57, 202, 17, 190, 202, 207, 89, 188, 15, 58, 47, 60, 168, 76, 21, 62, 122, 8, 136, 60, 6, 20, 12, 62, 179, 113, 43, 189, 205, 253, 182, 61, 240, 247, 43, 190, 227, 254, 239, 189, 149, 248, 227, 61, 3, 60, 26, 190, 1, 232, 167, 188, 244, 172, 248, 189, 64, 179, 104, 189, 152, 198, 236, 61, 90, 116, 154, 188, 176, 184, 205, 189, 207, 196, 53, 189, 107, 167, 26, 62, 3, 88, 40, 190, 5, 72, 176, 188, 20, 187, 163, 60, 120, 3, 36, 61, 2, 163, 49, 190, 50, 254, 41, 190, 81, 179, 9, 62, 56, 113, 52, 62, 25, 196, 209, 189, 98, 173, 22, 187, 48, 65, 214, 189, 111, 17, 141, 189, 131, 38, 23, 190, 112, 225, 31, 61, 161, 71, 37, 190, 29, 55, 130, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 207, 115, 242, 61, 94, 238, 209, 189, 172, 48, 105, 61, 204, 14, 2, 62, 218, 241, 215, 189, 76, 189, 25, 190, 0, 20, 231, 188, 162, 70, 221, 60, 124, 63, 120, 60, 215, 139, 202, 61, 235, 188, 25, 62, 41, 174, 128, 59, 74, 15, 232, 189, 93, 158, 45, 190, 39, 79, 189, 60, 217, 129, 37, 190, 186, 214, 8, 190, 205, 147, 51, 190, 153, 230, 31, 62, 102, 97, 29, 61, 82, 63, 43, 190, 238, 56, 85, 61, 136, 136, 10, 190, 210, 112, 107, 189, 170, 101, 45, 190, 18, 95, 251, 61, 47, 235, 192, 189, 4, 142, 135, 60, 165, 213, 12, 190, 96, 46, 25, 59, 111, 125, 34, 61, 237, 132, 122, 189, 233, 70, 44, 61, 80, 147, 21, 62, 61, 32, 164, 189, 115, 7, 7, 62, 61, 191, 47, 62, 104, 181, 186, 189, 199, 97, 139, 61, 24, 42, 202, 61, 109, 170, 30, 190, 243, 49, 164, 61, 184, 151, 168, 61, 200, 218, 221, 61, 78, 255, 15, 190, 30, 115, 132, 61, 248, 225, 5, 62, 209, 252, 191, 61, 214, 148, 246, 61, 8, 151, 34, 190, 27, 76, 147, 60, 182, 250, 179, 189, 173, 34, 13, 62, 22, 27, 92, 188, 39, 66, 7, 62, 115, 3, 61, 61, 30, 152, 250, 189, 159, 236, 220, 61, 56, 70, 58, 59, 144, 112, 40, 61, 120, 245, 48, 189, 25, 233, 180, 61, 176, 92, 162, 61, 242, 125, 228, 189, 17, 58, 249, 59, 112, 65, 31, 190, 169, 5, 101, 189, 141, 166, 167, 59, 143, 86, 155, 61, 200, 41, 255, 189, 20, 24, 182, 61, 184, 255, 219, 189, 195, 176, 42, 62, 232, 58, 173, 57, 1, 42, 212, 189, 56, 72, 239, 61, 44, 169, 49, 61, 85, 209, 20, 189, 50, 224, 87, 189, 50, 17, 21, 190, 59, 192, 128, 189, 98, 106, 47, 62, 57, 107, 0, 62, 152, 34, 11, 190, 254, 89, 17, 189, 138, 254, 227, 60, 136, 54, 37, 60, 170, 122, 1, 62, 69, 142, 104, 189, 81, 254, 164, 58, 142, 139, 103, 189, 89, 195, 193, 189, 110, 221, 33, 62, 111, 111, 211, 61, 148, 226, 178, 189, 201, 55, 152, 189, 69, 122, 224, 61, 73, 63, 48, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 47, 162, 207, 189, 167, 240, 49, 62, 236, 251, 34, 190, 190, 86, 177, 189, 89, 133, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 250, 253, 13, 190, 200, 129, 195, 61, 96, 166, 52, 60, 239, 115, 84, 61, 78, 9, 227, 189, 172, 145, 47, 61, 124, 171, 9, 190, 48, 145, 225, 188, 134, 3, 162, 60, 119, 245, 89, 61, 36, 32, 21, 190, 149, 142, 34, 61, 67, 37, 15, 190, 61, 208, 200, 189, 47, 4, 147, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 174, 117, 214, 189, 207, 214, 30, 190, 40, 163, 128, 61, 132, 223, 46, 189, 191, 90, 37, 62, 74, 59, 208, 61, 188, 43, 13, 62, 118, 254, 14, 190, 197, 99, 174, 189, 108, 208, 65, 61, 198, 184, 5, 62, 127, 93, 148, 189, 104, 78, 148, 61, 3, 227, 26, 62, 79, 188, 247, 61, 169, 197, 246, 61, 61, 63, 3, 188, 24, 205, 139, 61, 148, 150, 93, 59, 182, 115, 194, 189, 187, 35, 37, 62, 223, 156, 224, 61, 153, 236, 7, 190, 120, 238, 100, 188, 249, 50, 169, 189, 56, 250, 10, 190, 2, 61, 160, 61, 70, 5, 13, 62, 34, 216, 5, 190, 219, 81, 46, 190, 97, 59, 47, 190, 142, 129, 116, 61, 84, 89, 224, 189, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 2, 184, 50, 62, 63, 247, 216, 189, 118, 144, 53, 189, 69, 164, 144, 189, 83, 138, 4, 190, 153, 148, 148, 60, 202, 25, 143, 61, 193, 102, 17, 190, 36, 27, 197, 55, 75, 6, 41, 61, 212, 102, 241, 189, 219, 145, 232, 189, 169, 56, 230, 189, 228, 83, 139, 61, 133, 2, 231, 59, 109, 159, 62, 61, 138, 64, 239, 61, 40, 115, 26, 62, 202, 175, 167, 60, 180, 93, 200, 60, 154, 51, 214, 189, 59, 129, 85, 60, 33, 104, 43, 62, 47, 158, 183, 61, 217, 255, 192, 60, 119, 115, 123, 188, 12, 174, 26, 62, 19, 64, 190, 189, 162, 169, 174, 187, 191, 74, 12, 190, 234, 235, 140, 61, 168, 122, 182, 59, 75, 67, 5, 61, 241, 122, 8, 190, 111, 226, 86, 61, 186, 53, 5, 189, 22, 1, 52, 187, 205, 79, 28, 62, 212, 140, 50, 62, 3, 104, 59, 189, 143, 115, 170, 185, 52, 155, 36, 190, 67, 33, 34, 62, 46, 98, 19, 190, 229, 192, 196, 187, 210, 142, 29, 190, 165, 37, 249, 189, 130, 66, 22, 189, 129, 4, 37, 61, 151, 192, 105, 61, 20, 9, 41, 189, 227, 34, 150, 61, 233, 103, 9, 189, 245, 12, 213, 61, 189, 254, 178, 61, 49, 25, 171, 189, 37, 234, 41, 190, 101, 189, 185, 59, 18, 127, 37, 62, 187, 53, 55, 189, 65, 248, 215, 189, 239, 198, 237, 186, 129, 253, 171, 189, 174, 176, 118, 189, 72, 239, 191, 188, 205, 152, 160, 61, 30, 151, 208, 189, 38, 63, 205, 61, 226, 136, 25, 61, 167, 143, 26, 189, 238, 75, 140, 61, 105, 128, 49, 190, 198, 186, 141, 189, 143, 65, 165, 61, 122, 228, 75, 189, 195, 138, 243, 189, 222, 23, 111, 186, 123, 74, 1, 190, 103, 214, 18, 189, 50, 220, 114, 189, 76, 81, 21, 62, 126, 188, 143, 189, 69, 1, 254, 189, 93, 54, 69, 61, 114, 198, 138, 189, 86, 92, 141, 189, 211, 73, 151, 189, 220, 192, 255, 61, 206, 181, 33, 62, 12, 154, 26, 61, 151, 207, 200, 61, 47, 16, 81, 61, 40, 46, 251, 61, 159, 157, 216, 61, 23, 209, 163, 185, 121, 95, 84, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 93, 216, 61, 64, 47, 51, 190, 219, 239, 6, 62, 141, 35, 128, 189, 191, 58, 12, 62, 232, 7, 16, 189, 65, 206, 19, 60, 28, 103, 45, 62, 37, 156, 242, 189, 164, 176, 248, 189, 144, 202, 157, 189, 194, 163, 169, 61, 208, 212, 145, 189, 55, 179, 163, 60, 91, 226, 103, 189, 38, 166, 158, 61, 203, 186, 14, 62, 71, 3, 19, 62, 85, 238, 199, 61, 168, 163, 52, 190, 245, 168, 99, 61, 167, 54, 102, 188, 106, 185, 50, 190, 231, 247, 117, 188, 8, 210, 44, 190, 149, 121, 241, 61, 254, 61, 161, 189, 66, 193, 131, 60, 198, 235, 52, 190, 216, 159, 15, 190, 238, 189, 197, 189, 152, 207, 88, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 255, 188, 61, 50, 204, 104, 187, 149, 171, 70, 61, 165, 221, 196, 189, 202, 5, 27, 62, 236, 246, 254, 189, 242, 150, 70, 189, 3, 129, 150, 61, 55, 236, 30, 62, 236, 117, 214, 189, 143, 87, 9, 60, 117, 250, 49, 62, 180, 135, 237, 61, 46, 16, 37, 62, 252, 201, 169, 189, 53, 163, 219, 188, 105, 67, 40, 62, 8, 251, 234, 61, 177, 193, 200, 61, 152, 179, 40, 189, 45, 157, 240, 60, 39, 199, 187, 61, 78, 149, 6, 190, 37, 176, 154, 61, 119, 223, 31, 190, 253, 19, 134, 61, 17, 43, 116, 61, 215, 62, 167, 189, 130, 166, 81, 188, 229, 87, 210, 189, 6, 120, 19, 190, 220, 241, 251, 59, 71, 217, 32, 190, 66, 45, 40, 189, 251, 4, 123, 61, 162, 235, 204, 61, 47, 14, 41, 190, 16, 227, 10, 189, 89, 44, 24, 61, 6, 216, 6, 61, 73, 245, 35, 188, 119, 66, 205, 61, 249, 45, 19, 62, 168, 4, 35, 190, 92, 23, 120, 61, 157, 96, 216, 61, 180, 99, 41, 62, 22, 84, 15, 190, 247, 128, 167, 61, 52, 112, 58, 60, 218, 99, 169, 188, 160, 63, 133, 60, 108, 255, 164, 61, 228, 199, 70, 189, 10, 104, 129, 187, 118, 50, 193, 61, 217, 118, 22, 62, 94, 224, 71, 60, 161, 36, 199, 188, 213, 237, 13, 62, 165, 130, 143, 189, 49, 160, 24, 189, 86, 90, 249, 189, 39, 190, 43, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 98, 174, 189, 133, 23, 52, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {169, 128, 156, 63, 226, 77, 175, 189, 150, 24, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 184, 199, 61, 97, 60, 68, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}