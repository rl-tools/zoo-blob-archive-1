// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 181, 95, 63, 120, 135, 13, 63, 137, 166, 178, 188, 246, 217, 73, 190, 222, 26, 228, 62, 133, 20, 213, 190, 232, 81, 3, 63, 49, 163, 67, 191, 169, 53, 200, 62, 200, 114, 251, 62, 139, 131, 189, 191, 84, 118, 141, 190, 97, 232, 86, 191, 114, 36, 138, 189, 226, 173, 216, 62, 16, 228, 150, 190, 78, 238, 2, 62, 246, 185, 176, 60, 193, 245, 20, 188, 28, 89, 232, 63, 77, 36, 179, 62, 139, 106, 209, 62, 248, 42, 163, 191, 89, 144, 143, 190, 21, 86, 19, 63, 87, 176, 148, 62, 59, 2, 214, 62, 196, 39, 92, 63, 155, 194, 85, 63, 109, 63, 93, 62, 249, 218, 181, 62, 71, 215, 39, 191, 51, 40, 5, 63, 146, 2, 4, 190, 173, 241, 0, 191, 114, 45, 154, 62, 240, 111, 27, 191, 148, 96, 152, 191, 66, 71, 169, 190, 191, 149, 79, 63, 179, 213, 60, 63, 103, 124, 6, 62, 12, 22, 71, 63, 159, 127, 128, 191, 149, 106, 131, 190, 66, 0, 21, 63, 197, 58, 207, 63, 121, 215, 171, 62, 235, 141, 62, 62, 5, 93, 241, 63, 133, 130, 254, 62, 203, 172, 20, 189, 9, 129, 89, 190, 139, 126, 169, 189, 227, 65, 225, 190, 40, 40, 7, 191, 154, 100, 102, 62, 153, 22, 4, 191, 89, 51, 63, 63, 32, 19, 241, 190, 71, 129, 246, 62, 27, 45, 150, 190, 137, 36, 26, 190, 255, 94, 235, 190, 96, 82, 124, 191, 2, 110, 208, 190, 53, 107, 207, 62, 139, 206, 95, 63, 235, 64, 126, 190, 77, 198, 253, 62, 207, 81, 39, 62, 96, 7, 192, 62, 136, 116, 230, 62, 34, 80, 52, 63, 187, 164, 154, 62, 204, 202, 33, 63, 30, 60, 131, 191, 251, 181, 123, 62, 102, 3, 94, 191, 162, 42, 138, 63, 118, 93, 72, 61, 148, 243, 51, 61, 227, 17, 91, 191, 247, 221, 186, 62, 171, 54, 6, 189, 159, 13, 21, 191, 32, 49, 188, 62, 210, 11, 10, 191, 181, 44, 8, 191, 205, 93, 16, 63, 213, 133, 63, 62, 45, 254, 200, 190, 105, 62, 10, 63, 203, 155, 33, 62, 45, 166, 220, 190, 99, 122, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 77, 220, 190, 156, 34, 151, 190, 240, 11, 234, 190, 191, 224, 165, 189, 20, 99, 253, 190, 101, 142, 180, 62, 16, 243, 5, 62, 167, 217, 221, 62, 114, 85, 161, 190, 94, 146, 205, 190, 223, 242, 129, 190, 227, 60, 174, 62, 46, 141, 34, 63, 163, 6, 44, 63, 100, 50, 217, 190, 54, 106, 231, 62, 177, 205, 103, 190, 136, 68, 11, 63, 123, 238, 10, 63, 51, 223, 192, 62, 109, 74, 32, 191, 70, 22, 178, 190, 44, 171, 242, 62, 237, 124, 116, 190, 201, 83, 22, 190, 159, 42, 174, 190, 52, 78, 164, 190, 2, 161, 28, 58, 204, 32, 224, 62, 165, 125, 221, 189, 79, 163, 246, 62, 224, 61, 12, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 190, 137, 62, 26, 99, 146, 58, 42, 200, 234, 61, 225, 171, 56, 189, 3, 45, 108, 61, 101, 174, 218, 61, 221, 144, 12, 192, 163, 98, 36, 62, 1, 224, 9, 190, 133, 218, 58, 191, 22, 237, 17, 62, 160, 83, 53, 61, 201, 142, 153, 61, 91, 13, 180, 62, 162, 58, 126, 189, 61, 69, 143, 61, 149, 140, 153, 190, 18, 153, 160, 62, 127, 66, 113, 62, 9, 1, 39, 60, 85, 123, 173, 190, 225, 245, 93, 61, 120, 149, 47, 62, 179, 164, 80, 61, 205, 220, 132, 190, 149, 105, 101, 62, 76, 205, 194, 190, 188, 99, 76, 62, 138, 152, 77, 62, 135, 55, 76, 189, 2, 85, 133, 62, 113, 217, 21, 60, 243, 116, 141, 62, 115, 47, 13, 190, 93, 37, 102, 190, 88, 236, 158, 189, 201, 222, 251, 61, 187, 34, 137, 62, 100, 8, 152, 60, 229, 137, 147, 188, 143, 211, 208, 61, 134, 204, 71, 61, 69, 177, 182, 61, 51, 150, 38, 190, 164, 77, 133, 59, 26, 50, 87, 62, 211, 176, 176, 190, 188, 118, 85, 62, 105, 165, 187, 188, 250, 136, 226, 186, 80, 189, 3, 190, 225, 31, 131, 61, 211, 62, 9, 190, 8, 53, 224, 187, 117, 177, 63, 62, 185, 24, 176, 188, 14, 167, 64, 60, 176, 249, 8, 191, 113, 88, 182, 61, 34, 61, 12, 190, 46, 183, 189, 60, 195, 182, 186, 61, 22, 19, 255, 188, 146, 73, 135, 189, 0, 85, 17, 191, 11, 27, 20, 62, 146, 85, 94, 61, 155, 186, 175, 62, 4, 168, 134, 189, 224, 142, 24, 189, 95, 71, 3, 62, 77, 195, 97, 62, 82, 25, 15, 191, 108, 221, 89, 191, 128, 242, 71, 190, 127, 15, 137, 62, 236, 112, 231, 62, 3, 195, 154, 191, 226, 130, 48, 63, 249, 90, 9, 192, 34, 108, 137, 191, 210, 232, 9, 62, 28, 124, 144, 62, 75, 139, 57, 190, 242, 60, 20, 63, 123, 93, 124, 62, 89, 250, 65, 189, 223, 193, 134, 190, 86, 220, 110, 191, 243, 100, 219, 62, 166, 72, 198, 189, 59, 255, 89, 62, 81, 227, 174, 62, 114, 37, 154, 62, 69, 139, 123, 61, 61, 204, 255, 189, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 221, 102, 134, 189, 17, 26, 54, 62, 44, 173, 137, 189, 137, 45, 149, 189, 95, 114, 204, 61, 7, 115, 6, 62, 161, 126, 194, 59, 202, 119, 12, 62, 101, 2, 46, 190, 73, 88, 214, 189, 241, 221, 247, 60, 31, 50, 153, 188, 100, 78, 255, 61, 229, 194, 103, 62, 176, 93, 141, 62, 218, 68, 228, 61, 169, 131, 65, 62, 173, 81, 68, 61, 229, 244, 88, 62, 251, 176, 80, 190, 30, 63, 3, 190, 121, 4, 214, 190, 38, 232, 176, 61, 201, 10, 76, 190, 50, 32, 13, 190, 220, 252, 175, 188, 174, 214, 56, 62, 159, 6, 72, 189, 29, 82, 35, 62, 74, 182, 134, 61, 144, 25, 99, 61, 194, 66, 50, 62, 212, 165, 9, 63, 2, 17, 221, 189, 197, 16, 164, 62, 253, 229, 222, 190, 148, 31, 219, 190, 70, 245, 166, 189, 181, 145, 223, 187, 55, 83, 151, 61, 89, 171, 16, 62, 174, 29, 90, 62, 178, 119, 231, 61, 65, 141, 162, 189, 200, 75, 26, 191, 210, 62, 143, 62, 23, 184, 210, 190, 242, 242, 52, 62, 52, 93, 118, 190, 177, 93, 197, 189, 8, 231, 146, 189, 167, 116, 83, 62, 31, 103, 25, 191, 166, 220, 80, 62, 79, 21, 145, 62, 77, 252, 74, 62, 191, 38, 38, 62, 27, 117, 182, 61, 24, 186, 88, 191, 129, 30, 89, 62, 179, 178, 184, 189, 148, 182, 109, 189, 222, 151, 158, 61, 169, 144, 220, 189, 242, 128, 110, 62, 103, 164, 26, 61, 146, 192, 50, 62, 97, 151, 144, 190, 38, 251, 128, 191, 228, 28, 171, 61, 63, 251, 139, 62, 238, 125, 193, 61, 51, 52, 233, 61, 38, 229, 145, 62, 46, 105, 200, 62, 208, 110, 20, 190, 218, 47, 20, 190, 28, 6, 41, 62, 235, 144, 241, 190, 58, 197, 168, 62, 69, 25, 203, 190, 128, 213, 137, 189, 149, 94, 51, 62, 173, 254, 11, 62, 197, 186, 62, 191, 71, 68, 6, 60, 159, 22, 121, 62, 41, 245, 158, 62, 186, 209, 139, 62, 235, 235, 243, 62, 59, 192, 24, 62, 83, 236, 177, 62, 99, 57, 195, 190, 132, 36, 94, 191, 132, 183, 15, 190, 131, 234, 37, 190, 170, 142, 154, 62, 5, 134, 173, 59, 176, 77, 36, 61, 112, 185, 67, 190, 188, 85, 138, 189, 50, 36, 28, 190, 148, 172, 149, 189, 86, 35, 240, 190, 247, 178, 71, 60, 223, 249, 248, 62, 107, 240, 17, 190, 251, 242, 171, 190, 191, 149, 66, 191, 246, 37, 4, 62, 186, 239, 58, 190, 121, 183, 156, 62, 194, 162, 78, 62, 157, 198, 34, 190, 172, 177, 242, 190, 224, 246, 25, 61, 206, 110, 5, 191, 178, 236, 27, 190, 252, 113, 214, 62, 156, 101, 129, 62, 151, 181, 125, 62, 190, 124, 189, 62, 134, 30, 175, 190, 18, 246, 99, 190, 231, 89, 74, 190, 220, 136, 228, 61, 172, 20, 230, 189, 170, 67, 159, 190, 254, 205, 4, 190, 156, 62, 196, 189, 235, 124, 12, 62, 123, 134, 48, 189, 245, 188, 218, 188, 63, 33, 240, 189, 224, 90, 59, 60, 240, 198, 31, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 157, 246, 247, 61, 61, 76, 4, 190, 75, 226, 220, 61, 37, 9, 5, 189, 27, 244, 156, 59, 133, 36, 247, 189, 15, 228, 231, 189, 17, 206, 13, 62, 49, 65, 149, 189, 210, 29, 1, 61, 151, 51, 5, 190, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 57, 72, 117, 189, 89, 112, 141, 190, 201, 46, 85, 189, 146, 126, 14, 189, 138, 161, 32, 190, 59, 32, 1, 191, 102, 48, 43, 62, 203, 101, 69, 190, 86, 59, 252, 60, 70, 14, 97, 60, 58, 112, 57, 190, 134, 227, 53, 62, 225, 196, 84, 61, 219, 255, 1, 63, 12, 198, 205, 191, 152, 199, 253, 190, 52, 46, 182, 191, 13, 127, 203, 191, 193, 108, 33, 62, 163, 247, 117, 62, 122, 75, 15, 62, 164, 122, 152, 191, 188, 175, 247, 62, 100, 129, 78, 190, 40, 167, 238, 61, 87, 16, 155, 61, 21, 197, 52, 62, 240, 139, 12, 62, 254, 151, 135, 62, 137, 29, 230, 61, 92, 152, 98, 189, 27, 149, 136, 190, 176, 24, 133, 189, 15, 100, 169, 62, 226, 40, 192, 59, 107, 188, 24, 62, 0, 210, 14, 190, 57, 162, 153, 60, 245, 152, 54, 59, 63, 72, 172, 62, 246, 199, 211, 189, 182, 229, 178, 62, 45, 217, 195, 62, 16, 100, 91, 61, 235, 127, 20, 190, 213, 18, 135, 59, 221, 193, 24, 190, 98, 35, 38, 190, 110, 18, 87, 62, 59, 198, 223, 61, 73, 132, 148, 60, 203, 141, 252, 189, 89, 96, 153, 62, 149, 33, 21, 63, 68, 26, 92, 62, 88, 198, 225, 61, 183, 229, 93, 62, 252, 150, 160, 62, 97, 210, 200, 190, 152, 190, 7, 62, 86, 219, 80, 61, 94, 216, 131, 190, 118, 127, 100, 188, 136, 9, 107, 190, 75, 197, 91, 60, 114, 77, 122, 189, 239, 49, 69, 189, 8, 34, 8, 60, 128, 12, 111, 62, 209, 198, 150, 62, 81, 158, 76, 62, 250, 7, 32, 62, 191, 101, 67, 62, 170, 18, 5, 62, 223, 62, 168, 189, 107, 137, 5, 188, 18, 53, 63, 62, 84, 214, 130, 62, 120, 96, 62, 62, 236, 54, 71, 62, 239, 4, 246, 61, 17, 243, 28, 60, 2, 30, 14, 62, 24, 107, 212, 61, 189, 226, 66, 62, 36, 120, 156, 189, 101, 223, 145, 190, 221, 159, 153, 189, 135, 164, 174, 189, 103, 246, 175, 188, 8, 65, 142, 190, 74, 100, 138, 62, 46, 219, 75, 190, 15, 101, 255, 188, 161, 102, 103, 62, 219, 154, 194, 188, 232, 150, 211, 61, 243, 107, 13, 62, 229, 210, 103, 61, 86, 232, 186, 62, 248, 226, 81, 62, 136, 229, 43, 61, 60, 237, 10, 61, 153, 22, 132, 190, 227, 230, 156, 62, 9, 63, 18, 189, 3, 236, 107, 191, 164, 200, 20, 191, 141, 54, 26, 190, 105, 238, 70, 62, 225, 88, 135, 60, 100, 173, 150, 62, 60, 92, 245, 189, 238, 219, 231, 60, 204, 125, 3, 62, 33, 237, 50, 62, 60, 119, 168, 61, 18, 61, 241, 62, 203, 22, 128, 61, 203, 194, 94, 190, 230, 10, 241, 189, 126, 158, 41, 191, 52, 247, 85, 62, 236, 88, 58, 60, 222, 139, 48, 191, 97, 28, 207, 188, 11, 139, 159, 190, 25, 50, 95, 61, 56, 126, 13, 61, 225, 28, 216, 188, 100, 62, 62, 190, 175, 220, 233, 58, 142, 18, 143, 61, 54, 32, 244, 60, 137, 180, 131, 190, 155, 8, 202, 189, 103, 173, 51, 189, 93, 183, 37, 61, 45, 3, 44, 190, 31, 110, 111, 190, 108, 3, 135, 190, 25, 204, 69, 190, 192, 118, 14, 61, 81, 195, 105, 189, 216, 126, 112, 190, 24, 168, 65, 61, 228, 147, 13, 188, 98, 91, 29, 61, 116, 141, 100, 61, 56, 169, 192, 189, 147, 199, 46, 190, 138, 131, 97, 189, 8, 211, 170, 61, 79, 148, 169, 61, 87, 85, 69, 61, 73, 191, 161, 189, 172, 99, 107, 61, 9, 178, 119, 189, 133, 249, 144, 61, 72, 125, 175, 189, 117, 57, 242, 60, 95, 95, 80, 62, 92, 26, 151, 190, 157, 13, 199, 62, 243, 147, 233, 190, 5, 86, 211, 190, 44, 153, 63, 190, 86, 195, 52, 189, 218, 216, 241, 60, 82, 145, 56, 62, 194, 169, 22, 63, 221, 43, 201, 62, 142, 112, 105, 190, 149, 34, 19, 191, 78, 139, 241, 61, 16, 248, 169, 190, 64, 231, 142, 60, 40, 106, 16, 190, 61, 162, 192, 61, 39, 105, 158, 60, 57, 190, 191, 62, 26, 204, 43, 191, 218, 3, 172, 189, 35, 253, 144, 62, 163, 111, 211, 62, 18, 147, 149, 62, 68, 228, 185, 62, 76, 53, 24, 191, 36, 126, 156, 61, 3, 163, 53, 60, 87, 206, 170, 190, 190, 117, 65, 189, 179, 103, 40, 190, 69, 103, 8, 63, 214, 108, 158, 61, 232, 115, 22, 61, 134, 115, 83, 190, 103, 112, 136, 190, 133, 226, 111, 62, 148, 122, 136, 188, 11, 135, 8, 189, 49, 81, 8, 189, 9, 170, 71, 61, 215, 44, 196, 61, 2, 88, 181, 189, 82, 94, 33, 62, 116, 189, 16, 62, 112, 12, 156, 190, 242, 118, 65, 189, 128, 122, 25, 62, 176, 50, 239, 60, 223, 229, 5, 62, 250, 50, 227, 61, 211, 153, 227, 190, 171, 63, 213, 188, 128, 15, 31, 62, 179, 84, 145, 189, 186, 164, 254, 61, 200, 10, 81, 188, 247, 48, 126, 61, 255, 47, 247, 60, 247, 152, 13, 62, 206, 251, 66, 187, 170, 183, 201, 188, 84, 93, 138, 189, 14, 239, 85, 190, 119, 3, 12, 62, 21, 88, 30, 189, 106, 87, 186, 62, 85, 37, 238, 61, 219, 251, 70, 62, 31, 86, 7, 62, 4, 101, 10, 62, 22, 5, 201, 190, 112, 97, 73, 191, 39, 112, 147, 190, 59, 45, 7, 62, 209, 251, 157, 62, 176, 2, 37, 61, 59, 113, 187, 62, 175, 32, 95, 62, 189, 201, 65, 62, 224, 100, 5, 187, 105, 101, 39, 62, 197, 18, 72, 187, 192, 19, 161, 61, 171, 38, 69, 61, 32, 67, 242, 187, 89, 100, 135, 190, 21, 113, 142, 190, 224, 16, 37, 190, 70, 32, 102, 62, 46, 246, 219, 189, 140, 120, 7, 62, 40, 107, 65, 61, 114, 226, 89, 62, 232, 32, 187, 59, 22, 162, 139, 189, 56, 209, 41, 189, 26, 231, 151, 187, 149, 223, 32, 190, 141, 54, 151, 61, 18, 220, 19, 190, 218, 91, 34, 61, 125, 65, 81, 190, 14, 29, 37, 190, 10, 232, 7, 60, 90, 49, 222, 61, 214, 233, 56, 190, 86, 19, 186, 189, 71, 203, 61, 190, 240, 28, 65, 189, 249, 56, 180, 189, 42, 235, 246, 189, 163, 48, 188, 188, 49, 139, 192, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 159, 50, 168, 61, 26, 226, 254, 189, 190, 234, 182, 189, 9, 183, 55, 190, 229, 138, 188, 60, 211, 154, 9, 59, 44, 239, 215, 61, 199, 64, 30, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 143, 112, 113, 62, 106, 208, 134, 190, 165, 205, 34, 62, 184, 226, 107, 191, 142, 240, 181, 60, 85, 64, 199, 60, 254, 12, 6, 191, 86, 195, 155, 191, 237, 230, 128, 189, 241, 9, 131, 62, 49, 116, 79, 189, 97, 152, 156, 62, 196, 252, 37, 190, 245, 8, 68, 61, 23, 110, 10, 191, 226, 88, 202, 190, 105, 84, 126, 190, 54, 85, 255, 61, 196, 101, 33, 62, 179, 156, 40, 189, 245, 23, 243, 189, 214, 206, 244, 187, 35, 105, 6, 189, 83, 176, 45, 62, 55, 73, 125, 188, 249, 175, 50, 62, 184, 239, 8, 191, 49, 184, 208, 189, 143, 138, 138, 62, 217, 233, 167, 62, 204, 185, 3, 62, 86, 206, 84, 191, 17, 56, 250, 61, 1, 79, 18, 190, 227, 170, 179, 190, 56, 135, 54, 190, 51, 34, 72, 62, 248, 73, 132, 61, 104, 139, 138, 62, 38, 63, 34, 190, 140, 244, 10, 191, 231, 195, 50, 191, 190, 73, 20, 191, 53, 44, 220, 61, 155, 15, 149, 62, 208, 251, 9, 191, 71, 108, 192, 61, 23, 77, 163, 189, 164, 231, 219, 188, 230, 184, 94, 190, 196, 217, 201, 61, 223, 109, 37, 190, 160, 169, 169, 61, 249, 73, 97, 191, 137, 197, 158, 190, 57, 105, 14, 191, 175, 115, 122, 191, 100, 69, 18, 190, 198, 170, 205, 62, 5, 3, 177, 190, 24, 186, 128, 190, 0, 237, 21, 58, 213, 231, 89, 190, 15, 246, 198, 190, 249, 172, 160, 189, 186, 235, 53, 62, 252, 118, 115, 61, 110, 119, 150, 61, 44, 139, 176, 189, 71, 245, 64, 188, 224, 67, 40, 190, 150, 88, 10, 190, 59, 105, 109, 62, 228, 19, 87, 62, 75, 79, 75, 61, 69, 47, 159, 185, 184, 18, 220, 62, 5, 137, 48, 190, 161, 246, 40, 190, 165, 4, 138, 189, 71, 73, 212, 189, 148, 249, 215, 61, 236, 173, 192, 188, 77, 174, 117, 62, 125, 129, 58, 190, 226, 135, 206, 61, 93, 191, 14, 62, 43, 239, 198, 62, 60, 200, 36, 62, 68, 6, 58, 190, 228, 185, 18, 191, 149, 137, 146, 61, 31, 105, 150, 190, 214, 44, 183, 61, 5, 98, 131, 190, 171, 158, 200, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 139, 201, 30, 189, 109, 168, 118, 190, 186, 71, 62, 62, 98, 214, 51, 62, 205, 71, 207, 189, 223, 62, 224, 189, 53, 21, 55, 191, 36, 185, 243, 61, 166, 102, 2, 190, 245, 112, 137, 191, 172, 7, 153, 62, 250, 212, 2, 62, 137, 242, 157, 61, 232, 245, 202, 189, 176, 214, 193, 61, 196, 97, 241, 190, 214, 65, 179, 190, 19, 44, 42, 190, 251, 163, 161, 62, 65, 181, 170, 188, 18, 208, 244, 62, 2, 92, 14, 191, 28, 74, 186, 59, 12, 22, 25, 190, 236, 123, 14, 191, 228, 143, 134, 62, 17, 181, 105, 191, 48, 231, 63, 62, 251, 126, 2, 60, 184, 14, 30, 62, 255, 137, 24, 62, 64, 60, 231, 189, 178, 47, 174, 60, 120, 65, 3, 63, 155, 52, 143, 189, 189, 129, 42, 188, 116, 119, 32, 62, 142, 229, 244, 59, 225, 134, 180, 62, 140, 226, 133, 61, 54, 69, 13, 190, 90, 40, 149, 62, 138, 68, 151, 61, 189, 135, 188, 61, 178, 16, 26, 191, 249, 78, 189, 61, 201, 74, 22, 190, 160, 93, 103, 62, 20, 5, 20, 62, 132, 252, 41, 190, 166, 172, 207, 188, 17, 124, 53, 62, 202, 55, 45, 62, 220, 88, 221, 62, 134, 235, 178, 62, 67, 114, 117, 61, 249, 138, 194, 189, 6, 27, 18, 62, 160, 61, 133, 61, 161, 193, 132, 60, 61, 199, 186, 189, 36, 59, 18, 61, 236, 217, 129, 61, 76, 102, 5, 62, 96, 208, 160, 61, 54, 63, 97, 62, 139, 139, 148, 190, 135, 36, 207, 62, 146, 128, 151, 62, 235, 140, 14, 189, 163, 72, 63, 62, 94, 95, 186, 61, 23, 151, 79, 189, 204, 136, 27, 191, 203, 82, 165, 190, 123, 250, 106, 62, 39, 206, 16, 60, 208, 71, 0, 62, 187, 190, 191, 62, 204, 85, 165, 189, 42, 239, 190, 61, 52, 159, 148, 188, 121, 142, 98, 62, 170, 90, 217, 190, 21, 211, 39, 63, 172, 99, 156, 191, 180, 240, 111, 190, 112, 223, 177, 189, 51, 200, 167, 190, 77, 89, 47, 190, 242, 43, 200, 62, 80, 34, 156, 190, 152, 130, 118, 62, 133, 164, 29, 62, 179, 206, 31, 61, 146, 138, 84, 62, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 179, 236, 45, 190, 17, 55, 145, 59, 119, 76, 62, 189, 136, 66, 60, 190, 69, 230, 57, 191, 105, 23, 112, 61, 217, 91, 95, 61, 79, 56, 140, 190, 7, 65, 117, 190, 124, 229, 232, 190, 134, 135, 156, 189, 51, 191, 45, 191, 223, 79, 196, 188, 158, 252, 23, 61, 170, 36, 28, 191, 153, 221, 175, 189, 217, 165, 12, 191, 219, 24, 178, 189, 195, 154, 30, 190, 216, 54, 58, 62, 243, 1, 137, 191, 94, 173, 70, 190, 54, 84, 50, 189, 166, 64, 137, 190, 201, 167, 100, 191, 220, 244, 249, 60, 90, 111, 149, 62, 68, 93, 7, 190, 61, 204, 119, 191, 95, 38, 161, 191, 76, 214, 13, 191, 51, 12, 140, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 252, 201, 194, 62, 4, 133, 152, 190, 228, 67, 167, 62, 60, 212, 216, 190, 94, 67, 173, 191, 82, 165, 46, 62, 85, 7, 130, 62, 191, 162, 78, 190, 228, 0, 142, 62, 132, 46, 124, 62, 207, 172, 163, 62, 75, 100, 175, 190, 43, 64, 53, 190, 255, 35, 206, 62, 38, 16, 8, 191, 214, 205, 123, 62, 50, 166, 96, 190, 255, 174, 129, 62, 30, 136, 95, 61, 224, 163, 211, 61, 106, 15, 152, 191, 174, 248, 16, 190, 20, 190, 191, 62, 191, 201, 171, 62, 39, 95, 94, 62, 207, 159, 132, 62, 197, 126, 198, 61, 206, 106, 160, 62, 110, 67, 149, 190, 26, 181, 56, 191, 29, 160, 176, 60, 223, 85, 60, 190, 209, 234, 30, 60, 194, 101, 109, 190, 58, 179, 143, 61, 98, 252, 145, 190, 134, 106, 128, 191, 174, 11, 174, 62, 79, 40, 49, 63, 175, 105, 250, 188, 151, 37, 6, 62, 42, 93, 129, 190, 106, 4, 50, 189, 84, 22, 29, 191, 187, 120, 249, 59, 26, 69, 89, 62, 224, 236, 28, 191, 70, 58, 193, 62, 238, 1, 149, 190, 58, 112, 93, 62, 176, 35, 137, 61, 85, 132, 118, 62, 31, 167, 183, 191, 176, 3, 4, 62, 142, 63, 154, 62, 83, 252, 245, 61, 94, 56, 21, 190, 108, 78, 182, 189, 246, 192, 233, 62, 105, 45, 13, 190, 52, 33, 244, 190, 72, 59, 22, 191, 57, 49, 225, 190, 206, 133, 30, 190, 104, 25, 182, 188, 235, 82, 147, 61, 79, 143, 18, 190, 7, 166, 209, 61, 43, 225, 80, 60, 162, 231, 176, 189, 88, 136, 198, 60, 71, 246, 47, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 226, 233, 167, 187, 50, 44, 36, 190, 98, 37, 8, 189, 244, 43, 212, 189, 21, 39, 189, 61, 110, 208, 154, 189, 67, 55, 54, 190, 154, 13, 44, 61, 136, 70, 135, 189, 128, 47, 139, 189, 170, 211, 184, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 212, 140, 112, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 46, 18, 72, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 174, 192, 62, 59, 155, 75, 189, 133, 246, 103, 62, 9, 218, 110, 189, 34, 111, 143, 62, 81, 74, 12, 189, 249, 72, 43, 62, 121, 92, 45, 62, 155, 92, 2, 190, 157, 134, 220, 60, 222, 87, 132, 190, 190, 136, 129, 62, 126, 35, 103, 61, 31, 216, 192, 189, 178, 75, 172, 189, 147, 57, 142, 62, 11, 98, 147, 62, 255, 151, 208, 61, 68, 243, 135, 187, 200, 233, 122, 188, 225, 36, 231, 61, 41, 76, 69, 60, 106, 185, 50, 190, 26, 251, 20, 62, 103, 46, 65, 190, 120, 217, 138, 62, 159, 130, 181, 189, 205, 169, 222, 189, 198, 235, 52, 190, 127, 216, 106, 61, 94, 53, 46, 62, 181, 31, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 86, 19, 63, 232, 212, 17, 61, 163, 211, 129, 191, 245, 126, 50, 191, 133, 42, 67, 62, 215, 133, 189, 190, 162, 1, 177, 190, 31, 98, 79, 63, 150, 5, 28, 62, 66, 13, 160, 191, 71, 173, 172, 62, 62, 42, 55, 62, 20, 217, 160, 62, 19, 5, 99, 61, 54, 7, 20, 191, 125, 8, 137, 60, 130, 58, 161, 62, 245, 135, 192, 61, 105, 214, 145, 61, 146, 177, 213, 190, 224, 117, 138, 63, 183, 44, 123, 62, 78, 149, 6, 190, 168, 166, 78, 63, 227, 12, 130, 190, 135, 43, 226, 62, 250, 123, 99, 61, 210, 114, 39, 191, 130, 166, 81, 188, 115, 128, 24, 191, 35, 27, 132, 191, 149, 133, 168, 188, 225, 140, 241, 190, 147, 166, 33, 190, 143, 110, 4, 190, 167, 138, 79, 61, 164, 129, 85, 190, 198, 12, 138, 190, 15, 225, 23, 190, 174, 186, 246, 62, 174, 189, 43, 188, 11, 139, 213, 62, 208, 11, 29, 62, 235, 237, 113, 190, 213, 152, 143, 61, 242, 161, 54, 61, 160, 71, 194, 61, 242, 90, 194, 189, 87, 125, 150, 61, 61, 113, 121, 60, 15, 242, 77, 189, 217, 100, 11, 189, 130, 165, 14, 62, 93, 82, 73, 60, 10, 104, 129, 187, 115, 163, 244, 62, 148, 47, 24, 189, 92, 77, 55, 62, 92, 1, 204, 188, 75, 38, 131, 62, 165, 130, 143, 189, 19, 246, 85, 190, 43, 187, 105, 61, 188, 248, 62, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 54, 15, 188, 119, 132, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 214, 108, 63, 136, 159, 132, 190, 0, 108, 186, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 237, 239, 191, 1, 23, 37, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}