// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 61, 96, 63, 227, 140, 234, 62, 14, 41, 176, 189, 19, 1, 71, 190, 48, 241, 11, 63, 106, 57, 222, 190, 4, 198, 254, 62, 199, 95, 29, 191, 13, 70, 218, 62, 9, 49, 1, 63, 162, 138, 181, 191, 102, 188, 159, 190, 55, 2, 47, 191, 61, 160, 45, 190, 72, 112, 0, 63, 12, 253, 134, 190, 185, 124, 196, 61, 58, 204, 52, 187, 122, 22, 138, 188, 147, 209, 212, 63, 116, 174, 171, 62, 42, 195, 231, 62, 91, 102, 140, 191, 178, 211, 220, 190, 19, 73, 27, 63, 89, 203, 146, 62, 8, 170, 233, 62, 93, 190, 88, 63, 224, 238, 74, 63, 0, 87, 128, 62, 162, 220, 48, 62, 229, 43, 238, 190, 75, 202, 8, 63, 186, 74, 59, 190, 169, 115, 239, 190, 38, 91, 187, 62, 240, 0, 47, 191, 161, 120, 141, 191, 45, 215, 130, 190, 211, 122, 52, 63, 102, 84, 27, 63, 51, 177, 68, 62, 151, 173, 76, 63, 248, 119, 129, 191, 44, 71, 136, 190, 6, 127, 246, 62, 113, 39, 181, 63, 41, 76, 219, 62, 248, 120, 251, 60, 124, 219, 225, 63, 89, 239, 16, 63, 134, 73, 147, 61, 28, 150, 133, 190, 36, 92, 119, 190, 145, 195, 209, 190, 252, 80, 251, 190, 56, 28, 119, 62, 254, 75, 209, 190, 165, 44, 41, 63, 162, 249, 20, 191, 37, 201, 223, 62, 114, 60, 135, 190, 229, 81, 61, 190, 3, 126, 3, 191, 62, 222, 65, 191, 236, 144, 229, 190, 228, 241, 224, 62, 105, 89, 83, 63, 215, 110, 108, 190, 77, 150, 4, 63, 146, 132, 59, 62, 172, 194, 202, 62, 103, 234, 232, 62, 4, 107, 44, 63, 129, 64, 171, 62, 91, 101, 52, 63, 173, 191, 108, 191, 134, 44, 220, 61, 45, 68, 67, 191, 181, 243, 72, 63, 234, 194, 170, 61, 157, 18, 26, 190, 43, 17, 223, 190, 210, 160, 216, 62, 77, 20, 168, 187, 105, 42, 5, 191, 26, 244, 195, 62, 128, 187, 254, 190, 242, 35, 249, 190, 76, 83, 18, 63, 66, 2, 139, 62, 37, 46, 214, 190, 225, 172, 7, 63, 50, 114, 122, 62, 4, 230, 219, 190, 253, 65, 20, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 44, 223, 190, 31, 107, 135, 190, 208, 17, 202, 190, 108, 89, 204, 189, 150, 215, 157, 190, 164, 161, 184, 62, 243, 80, 103, 62, 53, 169, 172, 62, 250, 144, 114, 190, 136, 63, 189, 190, 2, 13, 165, 190, 226, 143, 163, 62, 193, 240, 31, 63, 160, 21, 51, 63, 212, 248, 176, 190, 58, 81, 246, 62, 156, 196, 35, 61, 84, 129, 15, 63, 182, 119, 10, 63, 104, 99, 185, 62, 22, 142, 15, 191, 51, 64, 164, 190, 165, 112, 249, 62, 150, 199, 45, 190, 47, 251, 178, 189, 208, 175, 159, 190, 55, 86, 17, 190, 68, 45, 155, 189, 188, 141, 253, 62, 231, 10, 167, 187, 165, 174, 26, 63, 249, 196, 104, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 78, 75, 62, 72, 189, 242, 60, 225, 159, 159, 61, 11, 7, 148, 189, 238, 36, 72, 189, 255, 144, 26, 60, 101, 180, 216, 191, 52, 118, 249, 61, 162, 236, 47, 190, 164, 123, 45, 191, 190, 97, 131, 61, 199, 163, 142, 60, 0, 204, 179, 59, 233, 185, 172, 62, 98, 92, 213, 189, 22, 36, 101, 61, 8, 180, 168, 190, 34, 175, 139, 62, 253, 124, 64, 62, 106, 98, 87, 189, 185, 13, 245, 190, 5, 203, 158, 61, 26, 97, 249, 61, 98, 89, 88, 60, 30, 24, 151, 190, 27, 215, 97, 62, 164, 209, 249, 190, 38, 94, 231, 61, 64, 46, 64, 62, 207, 178, 62, 190, 150, 17, 129, 62, 211, 31, 124, 189, 235, 168, 57, 62, 125, 171, 187, 189, 220, 240, 85, 189, 206, 6, 40, 61, 104, 83, 13, 61, 139, 119, 132, 62, 33, 82, 119, 60, 30, 251, 86, 61, 56, 83, 0, 62, 133, 98, 135, 186, 94, 95, 156, 61, 151, 224, 241, 189, 45, 210, 170, 61, 20, 20, 131, 62, 191, 154, 143, 190, 57, 119, 74, 62, 254, 32, 236, 189, 223, 103, 141, 61, 29, 231, 196, 189, 119, 233, 150, 61, 207, 12, 158, 190, 13, 21, 13, 62, 92, 216, 59, 62, 72, 6, 132, 60, 68, 36, 199, 188, 15, 90, 123, 190, 153, 247, 130, 59, 150, 9, 23, 190, 33, 30, 226, 61, 157, 141, 25, 59, 185, 172, 108, 61, 226, 115, 202, 189, 222, 125, 188, 190, 181, 7, 98, 189, 96, 232, 120, 61, 66, 106, 144, 62, 82, 209, 20, 187, 17, 109, 19, 59, 215, 86, 251, 189, 2, 94, 59, 62, 182, 146, 126, 190, 210, 227, 244, 189, 233, 184, 42, 190, 143, 49, 24, 62, 50, 122, 219, 62, 212, 105, 96, 191, 163, 80, 42, 63, 90, 162, 200, 191, 136, 227, 155, 191, 141, 6, 234, 61, 14, 233, 64, 62, 208, 246, 129, 190, 7, 249, 239, 62, 45, 32, 71, 62, 22, 147, 6, 190, 222, 128, 84, 188, 93, 231, 179, 190, 211, 102, 171, 62, 92, 26, 68, 190, 75, 40, 21, 62, 130, 33, 66, 62, 100, 191, 166, 62, 249, 50, 117, 189, 21, 188, 82, 190, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 236, 235, 194, 189, 51, 166, 104, 62, 94, 38, 139, 188, 145, 110, 187, 189, 71, 48, 151, 61, 150, 140, 11, 62, 37, 121, 183, 61, 37, 222, 233, 61, 47, 5, 66, 190, 152, 120, 1, 190, 70, 208, 170, 60, 87, 90, 253, 59, 136, 168, 133, 61, 136, 4, 103, 62, 148, 182, 125, 62, 229, 26, 198, 61, 11, 63, 1, 62, 178, 46, 42, 61, 11, 170, 108, 62, 43, 139, 75, 190, 64, 213, 103, 190, 36, 34, 195, 190, 89, 84, 175, 61, 49, 217, 92, 190, 245, 69, 60, 190, 11, 147, 70, 61, 231, 173, 93, 61, 248, 75, 115, 189, 198, 46, 68, 62, 93, 223, 131, 60, 114, 59, 172, 61, 82, 147, 8, 62, 113, 201, 4, 63, 110, 185, 36, 190, 27, 24, 143, 62, 223, 30, 206, 190, 41, 213, 223, 190, 137, 135, 180, 189, 46, 252, 132, 189, 170, 115, 171, 61, 140, 222, 36, 62, 156, 213, 129, 62, 218, 58, 172, 61, 148, 65, 208, 189, 220, 251, 14, 191, 208, 176, 142, 62, 27, 74, 207, 190, 198, 76, 95, 62, 247, 239, 32, 190, 94, 194, 208, 189, 150, 151, 173, 189, 83, 118, 6, 62, 70, 147, 18, 191, 23, 178, 116, 62, 49, 41, 128, 62, 47, 185, 95, 62, 194, 148, 101, 62, 223, 105, 186, 61, 134, 113, 246, 190, 30, 179, 64, 62, 3, 164, 197, 189, 131, 100, 38, 189, 144, 219, 161, 61, 58, 246, 54, 190, 56, 104, 130, 62, 254, 9, 21, 61, 214, 163, 128, 61, 117, 33, 148, 190, 49, 148, 80, 191, 255, 146, 48, 59, 168, 189, 139, 61, 42, 228, 182, 61, 111, 61, 8, 62, 2, 67, 166, 62, 37, 111, 158, 62, 19, 129, 114, 190, 196, 113, 106, 190, 209, 6, 31, 62, 116, 139, 236, 190, 21, 135, 171, 62, 106, 154, 159, 190, 70, 109, 159, 189, 90, 168, 107, 61, 48, 159, 219, 61, 240, 75, 42, 191, 236, 156, 146, 60, 171, 108, 120, 62, 172, 98, 166, 62, 112, 244, 166, 62, 53, 67, 225, 62, 196, 36, 28, 62, 96, 9, 137, 62, 87, 186, 219, 190, 170, 80, 58, 191, 141, 11, 48, 190, 163, 144, 41, 190, 197, 184, 126, 62, 133, 249, 230, 187, 35, 0, 127, 62, 152, 200, 7, 190, 99, 94, 173, 190, 64, 130, 12, 190, 108, 45, 77, 61, 184, 198, 225, 190, 150, 221, 120, 189, 14, 118, 187, 62, 205, 49, 34, 187, 214, 108, 81, 190, 54, 165, 2, 191, 177, 163, 230, 61, 21, 70, 32, 190, 110, 95, 103, 62, 150, 170, 152, 61, 35, 253, 26, 190, 140, 138, 160, 190, 158, 215, 219, 61, 209, 246, 139, 190, 222, 227, 171, 190, 246, 138, 190, 62, 133, 185, 68, 62, 151, 139, 248, 61, 210, 3, 211, 62, 231, 207, 5, 191, 107, 211, 26, 189, 200, 138, 23, 190, 171, 181, 154, 189, 63, 143, 197, 189, 30, 172, 148, 190, 254, 205, 4, 190, 146, 233, 158, 189, 235, 124, 12, 62, 70, 63, 11, 189, 245, 188, 218, 188, 76, 140, 228, 189, 224, 90, 59, 60, 109, 101, 16, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 117, 197, 11, 62, 61, 76, 4, 190, 242, 137, 224, 61, 37, 9, 5, 189, 27, 244, 156, 59, 93, 231, 219, 189, 15, 228, 231, 189, 0, 91, 31, 62, 14, 136, 149, 189, 95, 157, 66, 61, 71, 145, 245, 189, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 1, 42, 51, 189, 179, 152, 62, 189, 35, 82, 144, 189, 169, 74, 223, 189, 82, 251, 193, 190, 137, 35, 170, 190, 76, 81, 134, 62, 166, 64, 153, 190, 253, 190, 232, 189, 128, 117, 186, 189, 58, 112, 57, 190, 123, 134, 53, 62, 101, 3, 222, 60, 176, 54, 233, 62, 224, 253, 187, 191, 178, 217, 49, 191, 95, 211, 191, 191, 123, 127, 202, 191, 69, 216, 215, 61, 24, 245, 107, 62, 199, 131, 26, 62, 85, 249, 160, 191, 43, 88, 223, 62, 78, 155, 71, 190, 36, 35, 133, 61, 76, 40, 123, 61, 206, 179, 140, 190, 226, 233, 228, 61, 189, 105, 94, 62, 153, 95, 25, 61, 44, 85, 52, 61, 158, 156, 176, 190, 227, 159, 242, 189, 237, 55, 221, 62, 164, 75, 182, 188, 68, 62, 41, 62, 149, 132, 117, 190, 25, 39, 172, 58, 59, 233, 96, 61, 61, 208, 155, 62, 12, 235, 227, 189, 7, 75, 140, 62, 30, 103, 137, 62, 225, 26, 240, 58, 35, 132, 13, 190, 41, 6, 193, 189, 96, 69, 147, 189, 73, 214, 52, 190, 230, 233, 104, 62, 129, 28, 19, 61, 119, 117, 19, 61, 62, 105, 138, 189, 109, 234, 143, 62, 166, 87, 14, 63, 175, 247, 201, 61, 22, 31, 53, 62, 109, 221, 26, 62, 168, 129, 129, 62, 191, 167, 87, 190, 201, 38, 136, 61, 180, 108, 3, 61, 121, 27, 104, 190, 145, 215, 223, 188, 83, 219, 77, 190, 88, 203, 135, 188, 252, 211, 192, 189, 168, 214, 20, 60, 120, 50, 129, 61, 98, 98, 87, 62, 38, 33, 137, 62, 17, 70, 80, 62, 194, 97, 104, 62, 91, 53, 40, 62, 91, 219, 230, 61, 74, 218, 211, 189, 64, 236, 167, 188, 122, 116, 89, 62, 41, 109, 68, 62, 90, 75, 61, 62, 161, 201, 35, 62, 216, 61, 211, 61, 46, 182, 102, 189, 61, 214, 6, 62, 76, 193, 244, 61, 115, 16, 72, 62, 81, 129, 69, 190, 126, 177, 113, 190, 97, 175, 154, 189, 0, 72, 202, 189, 193, 202, 137, 189, 172, 233, 77, 190, 160, 4, 20, 62, 213, 106, 91, 190, 161, 47, 40, 59, 192, 64, 50, 62, 116, 50, 247, 59, 252, 172, 96, 61, 26, 95, 213, 61, 184, 85, 235, 61, 232, 80, 211, 61, 16, 147, 20, 62, 143, 106, 55, 190, 103, 40, 241, 60, 35, 168, 22, 190, 126, 94, 127, 62, 255, 18, 109, 190, 110, 96, 66, 191, 185, 66, 40, 191, 203, 41, 160, 189, 33, 240, 32, 62, 89, 109, 132, 189, 209, 161, 71, 62, 21, 197, 206, 188, 55, 219, 56, 61, 244, 252, 169, 61, 181, 99, 148, 62, 24, 76, 222, 61, 235, 137, 3, 63, 130, 26, 148, 61, 76, 53, 95, 190, 115, 192, 198, 190, 37, 221, 239, 190, 218, 14, 78, 61, 140, 141, 228, 61, 159, 223, 12, 191, 156, 88, 23, 189, 92, 67, 154, 190, 185, 3, 165, 188, 19, 200, 59, 61, 225, 28, 216, 188, 100, 62, 62, 190, 175, 220, 233, 58, 142, 18, 143, 61, 54, 32, 244, 60, 137, 180, 131, 190, 155, 8, 202, 189, 103, 173, 51, 189, 93, 183, 37, 61, 45, 3, 44, 190, 31, 110, 111, 190, 108, 3, 135, 190, 25, 204, 69, 190, 192, 118, 14, 61, 81, 195, 105, 189, 216, 126, 112, 190, 24, 168, 65, 61, 228, 147, 13, 188, 98, 91, 29, 61, 116, 141, 100, 61, 56, 169, 192, 189, 147, 199, 46, 190, 138, 131, 97, 189, 8, 211, 170, 61, 79, 148, 169, 61, 87, 85, 69, 61, 73, 191, 161, 189, 172, 99, 107, 61, 9, 178, 119, 189, 133, 249, 144, 61, 72, 125, 175, 189, 117, 57, 242, 60, 213, 59, 58, 62, 192, 132, 155, 190, 224, 216, 175, 62, 9, 110, 226, 190, 33, 148, 216, 190, 67, 136, 51, 190, 70, 36, 132, 189, 41, 223, 251, 60, 158, 233, 80, 62, 114, 163, 33, 63, 200, 65, 194, 62, 71, 216, 126, 190, 254, 20, 5, 191, 14, 37, 237, 61, 31, 106, 174, 190, 183, 161, 134, 61, 158, 182, 243, 188, 47, 27, 176, 61, 46, 190, 165, 59, 32, 240, 181, 62, 194, 17, 31, 191, 191, 75, 38, 189, 54, 126, 131, 62, 154, 102, 222, 62, 156, 211, 186, 62, 194, 181, 170, 62, 68, 244, 103, 190, 198, 151, 135, 61, 26, 70, 151, 187, 48, 132, 157, 190, 241, 39, 101, 189, 213, 230, 59, 190, 22, 203, 10, 63, 221, 245, 39, 62, 189, 74, 163, 61, 36, 217, 49, 190, 125, 116, 164, 190, 247, 0, 127, 62, 74, 164, 22, 187, 10, 45, 200, 186, 152, 157, 45, 189, 59, 77, 107, 61, 187, 29, 47, 61, 195, 67, 183, 189, 25, 91, 27, 62, 17, 159, 59, 62, 157, 149, 147, 190, 91, 104, 38, 189, 126, 12, 162, 61, 54, 118, 163, 61, 84, 103, 237, 61, 202, 141, 13, 62, 106, 189, 18, 191, 240, 236, 170, 61, 208, 200, 84, 62, 160, 177, 148, 189, 127, 196, 187, 61, 191, 45, 198, 61, 83, 84, 101, 187, 225, 146, 5, 189, 244, 74, 46, 62, 39, 134, 177, 189, 20, 103, 95, 60, 93, 213, 179, 189, 7, 245, 119, 190, 93, 237, 40, 62, 204, 64, 155, 59, 80, 155, 182, 62, 248, 234, 218, 61, 96, 107, 66, 62, 181, 251, 131, 62, 229, 179, 241, 61, 6, 176, 218, 190, 243, 48, 84, 191, 143, 93, 140, 190, 93, 54, 40, 62, 115, 87, 141, 62, 207, 119, 87, 60, 141, 226, 180, 62, 117, 18, 61, 62, 168, 62, 16, 62, 228, 85, 140, 188, 133, 146, 74, 62, 127, 156, 49, 60, 132, 223, 165, 61, 16, 27, 80, 61, 155, 223, 170, 188, 240, 72, 153, 190, 248, 31, 173, 190, 143, 179, 242, 189, 230, 163, 160, 61, 50, 36, 183, 189, 137, 12, 28, 62, 12, 77, 106, 60, 3, 208, 98, 62, 56, 241, 244, 58, 22, 162, 139, 189, 56, 209, 41, 189, 140, 184, 54, 187, 149, 223, 32, 190, 30, 110, 158, 61, 242, 174, 18, 190, 150, 142, 34, 61, 125, 65, 81, 190, 80, 134, 36, 190, 10, 232, 7, 60, 60, 82, 228, 61, 176, 250, 52, 190, 103, 210, 180, 189, 85, 100, 61, 190, 240, 28, 65, 189, 226, 253, 178, 189, 244, 107, 246, 189, 58, 18, 182, 188, 215, 68, 184, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 119, 190, 169, 61, 26, 226, 254, 189, 34, 230, 181, 189, 9, 183, 55, 190, 89, 205, 216, 60, 228, 131, 207, 59, 40, 223, 225, 61, 67, 117, 48, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 203, 127, 56, 62, 146, 192, 166, 190, 136, 23, 215, 61, 252, 209, 49, 191, 114, 183, 131, 59, 137, 2, 203, 61, 98, 253, 215, 190, 213, 193, 108, 191, 246, 198, 221, 189, 221, 0, 63, 62, 1, 34, 184, 189, 114, 18, 144, 62, 158, 154, 39, 62, 166, 151, 167, 60, 68, 184, 227, 190, 61, 206, 201, 190, 37, 196, 99, 190, 9, 98, 141, 62, 59, 165, 21, 62, 189, 46, 213, 188, 245, 23, 243, 189, 130, 54, 151, 62, 185, 249, 205, 189, 56, 79, 0, 62, 6, 18, 29, 189, 28, 143, 157, 61, 182, 146, 46, 190, 197, 215, 1, 190, 148, 17, 122, 62, 59, 110, 157, 62, 70, 145, 196, 61, 95, 227, 69, 191, 101, 34, 2, 62, 89, 219, 250, 187, 227, 170, 179, 190, 56, 135, 54, 190, 174, 50, 20, 62, 245, 11, 33, 61, 20, 3, 150, 62, 211, 10, 153, 190, 199, 125, 14, 191, 209, 80, 28, 191, 28, 51, 45, 191, 94, 166, 96, 188, 169, 0, 97, 62, 39, 244, 248, 190, 71, 108, 192, 61, 88, 3, 129, 189, 84, 14, 209, 188, 132, 171, 103, 190, 30, 13, 122, 189, 90, 157, 235, 189, 160, 169, 169, 61, 69, 154, 72, 191, 22, 55, 96, 190, 102, 121, 18, 191, 97, 17, 61, 191, 100, 69, 18, 190, 201, 120, 205, 62, 178, 235, 229, 190, 94, 148, 182, 190, 136, 155, 220, 189, 198, 208, 38, 190, 10, 166, 143, 60, 76, 25, 185, 189, 132, 94, 105, 62, 82, 216, 213, 61, 138, 140, 87, 60, 34, 209, 88, 190, 249, 221, 72, 189, 205, 246, 159, 189, 40, 225, 43, 190, 161, 84, 145, 62, 52, 119, 165, 62, 80, 43, 134, 61, 104, 1, 62, 188, 50, 101, 184, 62, 7, 61, 1, 190, 175, 113, 123, 190, 153, 166, 101, 61, 138, 43, 178, 189, 105, 49, 154, 61, 66, 2, 125, 189, 16, 65, 110, 62, 188, 210, 87, 190, 4, 78, 194, 61, 129, 191, 26, 62, 130, 66, 227, 62, 150, 250, 111, 62, 197, 217, 44, 190, 53, 66, 245, 190, 60, 224, 145, 61, 145, 19, 132, 190, 124, 81, 151, 187, 204, 251, 35, 190, 183, 223, 195, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 182, 14, 90, 62, 254, 25, 221, 190, 16, 14, 29, 62, 109, 169, 64, 62, 53, 24, 15, 190, 126, 130, 215, 189, 68, 210, 57, 191, 231, 2, 5, 62, 70, 59, 238, 189, 124, 206, 54, 191, 115, 228, 131, 62, 204, 101, 224, 61, 33, 206, 200, 61, 115, 28, 209, 189, 125, 249, 101, 61, 161, 213, 201, 190, 207, 118, 172, 190, 63, 215, 9, 190, 117, 168, 156, 62, 130, 13, 144, 190, 248, 112, 30, 190, 250, 190, 150, 190, 220, 25, 206, 188, 201, 62, 25, 190, 177, 35, 247, 190, 118, 1, 129, 62, 202, 35, 59, 191, 176, 138, 21, 62, 103, 127, 99, 187, 200, 95, 177, 61, 206, 233, 13, 62, 10, 213, 82, 190, 118, 2, 134, 61, 115, 208, 243, 62, 173, 200, 213, 189, 78, 203, 224, 187, 245, 197, 67, 62, 107, 214, 139, 59, 226, 104, 118, 62, 33, 91, 145, 61, 184, 39, 235, 189, 42, 218, 162, 62, 206, 211, 167, 61, 223, 187, 170, 61, 68, 51, 17, 191, 32, 181, 183, 61, 106, 28, 37, 190, 135, 65, 114, 62, 11, 161, 76, 62, 9, 26, 43, 190, 123, 63, 3, 189, 236, 208, 15, 62, 105, 41, 66, 61, 16, 52, 195, 62, 195, 107, 178, 62, 183, 147, 168, 61, 47, 116, 68, 189, 40, 156, 201, 61, 143, 136, 82, 62, 50, 49, 241, 60, 179, 45, 201, 189, 120, 59, 195, 61, 219, 60, 106, 61, 200, 221, 243, 61, 171, 75, 68, 61, 83, 128, 131, 62, 206, 242, 118, 190, 153, 20, 210, 62, 53, 63, 138, 62, 199, 187, 142, 60, 128, 187, 147, 62, 62, 125, 167, 61, 54, 183, 204, 189, 222, 118, 49, 191, 224, 188, 157, 190, 49, 255, 135, 62, 189, 197, 197, 60, 157, 248, 197, 61, 130, 188, 179, 62, 73, 36, 8, 190, 52, 118, 218, 60, 153, 70, 107, 188, 33, 249, 136, 62, 251, 118, 170, 190, 217, 37, 127, 62, 32, 132, 150, 191, 4, 224, 133, 190, 141, 26, 10, 190, 163, 116, 210, 190, 131, 122, 231, 189, 254, 198, 49, 62, 148, 17, 145, 190, 20, 163, 134, 62, 210, 159, 232, 61, 36, 116, 51, 61, 227, 203, 23, 62, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 22, 176, 179, 189, 247, 125, 168, 61, 119, 76, 62, 189, 13, 52, 189, 189, 97, 205, 72, 191, 75, 249, 3, 62, 160, 66, 66, 62, 165, 36, 101, 190, 171, 79, 114, 190, 189, 64, 202, 190, 134, 135, 156, 189, 56, 74, 43, 191, 72, 179, 240, 60, 59, 24, 71, 62, 2, 150, 236, 190, 115, 110, 143, 61, 13, 216, 221, 190, 199, 142, 9, 187, 116, 12, 137, 190, 211, 214, 136, 62, 186, 169, 115, 191, 206, 191, 18, 190, 128, 24, 122, 61, 166, 64, 137, 190, 130, 226, 76, 191, 220, 244, 249, 60, 86, 246, 155, 62, 68, 93, 7, 190, 186, 197, 124, 191, 236, 49, 168, 191, 100, 234, 58, 191, 1, 159, 69, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 45, 176, 205, 62, 113, 108, 131, 190, 204, 253, 75, 62, 43, 243, 213, 190, 151, 56, 156, 191, 250, 213, 208, 61, 1, 12, 72, 61, 43, 53, 68, 190, 10, 211, 143, 62, 185, 137, 140, 62, 220, 29, 87, 62, 111, 76, 227, 190, 87, 68, 84, 190, 161, 53, 201, 62, 1, 241, 1, 191, 255, 241, 118, 62, 106, 65, 23, 190, 37, 107, 133, 62, 225, 233, 138, 189, 102, 102, 224, 61, 206, 87, 136, 191, 254, 111, 31, 189, 243, 202, 204, 62, 17, 56, 172, 62, 31, 210, 128, 62, 60, 155, 105, 62, 196, 77, 12, 62, 26, 29, 87, 62, 244, 142, 176, 190, 181, 217, 32, 191, 252, 99, 125, 188, 173, 34, 8, 190, 63, 217, 103, 189, 132, 140, 108, 190, 225, 177, 22, 61, 144, 69, 48, 190, 23, 38, 142, 191, 218, 138, 132, 62, 192, 242, 206, 62, 58, 232, 134, 188, 42, 80, 31, 190, 225, 234, 212, 190, 137, 235, 16, 62, 214, 237, 77, 191, 40, 174, 225, 61, 126, 186, 185, 61, 200, 33, 15, 191, 197, 31, 19, 62, 28, 232, 182, 190, 223, 229, 78, 62, 156, 246, 209, 189, 39, 88, 99, 62, 229, 196, 173, 191, 22, 108, 63, 62, 51, 54, 121, 62, 179, 52, 60, 190, 241, 174, 233, 190, 7, 74, 169, 189, 206, 144, 132, 62, 129, 189, 1, 189, 8, 44, 86, 191, 85, 146, 40, 191, 197, 112, 51, 191, 225, 62, 28, 190, 193, 114, 170, 188, 205, 152, 160, 61, 79, 143, 18, 190, 38, 63, 205, 61, 43, 225, 80, 60, 36, 44, 168, 189, 233, 132, 209, 60, 105, 128, 49, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 174, 95, 138, 186, 92, 246, 29, 190, 103, 214, 18, 189, 209, 184, 210, 189, 21, 39, 189, 61, 52, 244, 143, 189, 6, 50, 54, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 116, 108, 160, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 48, 29, 132, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 107, 166, 62, 56, 167, 189, 186, 31, 19, 136, 62, 9, 218, 110, 189, 58, 206, 138, 62, 50, 173, 22, 189, 131, 232, 12, 62, 187, 85, 55, 62, 37, 156, 242, 189, 56, 80, 142, 186, 208, 111, 17, 190, 112, 55, 118, 62, 127, 163, 83, 58, 31, 216, 192, 189, 5, 123, 178, 189, 28, 253, 154, 62, 135, 194, 137, 62, 210, 57, 213, 61, 68, 243, 135, 187, 137, 185, 173, 59, 111, 33, 201, 61, 139, 73, 84, 59, 106, 185, 50, 190, 43, 78, 16, 62, 179, 161, 64, 190, 241, 197, 135, 62, 159, 130, 181, 189, 92, 12, 31, 188, 198, 235, 52, 190, 210, 214, 24, 61, 75, 61, 148, 61, 238, 164, 119, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 253, 243, 62, 234, 1, 228, 60, 222, 109, 102, 191, 245, 126, 50, 191, 40, 99, 128, 62, 42, 98, 203, 190, 74, 219, 181, 190, 130, 39, 27, 63, 55, 236, 30, 62, 80, 115, 182, 191, 93, 193, 159, 62, 98, 99, 88, 62, 161, 223, 114, 62, 19, 5, 99, 61, 154, 85, 29, 191, 135, 240, 141, 61, 58, 108, 205, 62, 244, 162, 192, 61, 105, 214, 145, 61, 98, 72, 164, 190, 3, 214, 65, 63, 129, 191, 135, 62, 78, 149, 6, 190, 104, 255, 23, 63, 139, 197, 153, 190, 67, 22, 15, 63, 250, 123, 99, 61, 206, 203, 60, 191, 130, 166, 81, 188, 90, 39, 25, 191, 41, 52, 95, 191, 112, 104, 179, 188, 243, 227, 10, 191, 52, 108, 143, 189, 48, 60, 207, 58, 167, 138, 79, 61, 64, 5, 26, 190, 106, 136, 107, 190, 149, 254, 248, 189, 138, 121, 236, 62, 73, 245, 35, 188, 243, 129, 68, 62, 77, 86, 72, 62, 194, 189, 37, 190, 207, 208, 87, 62, 242, 161, 54, 61, 216, 156, 8, 62, 114, 217, 39, 190, 113, 88, 25, 62, 227, 62, 121, 60, 15, 242, 77, 189, 108, 174, 155, 189, 70, 230, 1, 62, 60, 166, 110, 189, 10, 104, 129, 187, 138, 229, 6, 63, 11, 234, 165, 186, 236, 208, 56, 62, 92, 1, 204, 188, 32, 74, 47, 62, 165, 130, 143, 189, 48, 20, 58, 190, 168, 243, 180, 188, 137, 49, 14, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 138, 219, 188, 210, 192, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {229, 37, 168, 190, 105, 244, 135, 191, 142, 184, 101, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 76, 79, 63, 74, 169, 154, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}