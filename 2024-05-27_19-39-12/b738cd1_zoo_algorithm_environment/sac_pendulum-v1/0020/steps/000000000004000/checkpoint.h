// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 32, 102, 63, 196, 78, 246, 62, 91, 197, 228, 189, 232, 9, 64, 189, 132, 234, 50, 63, 47, 30, 212, 190, 116, 206, 180, 62, 243, 139, 47, 191, 193, 58, 239, 62, 74, 149, 39, 63, 208, 90, 67, 191, 58, 81, 174, 190, 202, 101, 27, 191, 90, 229, 29, 191, 89, 227, 2, 63, 45, 109, 54, 190, 100, 63, 145, 61, 41, 163, 128, 61, 222, 89, 218, 190, 84, 221, 119, 63, 80, 248, 244, 61, 243, 137, 41, 63, 22, 189, 241, 190, 65, 239, 0, 191, 253, 148, 12, 63, 114, 21, 182, 61, 150, 128, 254, 62, 59, 71, 56, 63, 245, 178, 42, 63, 155, 226, 158, 62, 81, 100, 0, 62, 149, 173, 33, 191, 233, 25, 5, 63, 236, 149, 74, 189, 38, 213, 57, 191, 145, 164, 225, 62, 211, 150, 36, 191, 246, 26, 66, 191, 77, 245, 188, 189, 181, 32, 34, 63, 40, 56, 106, 62, 71, 129, 196, 61, 82, 25, 60, 63, 139, 183, 78, 191, 41, 18, 127, 190, 88, 106, 161, 62, 46, 96, 29, 63, 18, 18, 68, 62, 155, 30, 170, 189, 217, 193, 173, 62, 95, 178, 5, 63, 110, 112, 234, 61, 5, 104, 22, 190, 157, 95, 174, 190, 73, 80, 196, 190, 197, 206, 179, 190, 143, 28, 141, 62, 189, 38, 207, 190, 185, 8, 72, 63, 243, 225, 20, 191, 206, 138, 109, 62, 107, 10, 164, 190, 48, 136, 225, 189, 20, 19, 217, 190, 103, 87, 86, 190, 214, 218, 241, 190, 235, 36, 240, 62, 177, 102, 52, 63, 144, 89, 98, 190, 41, 151, 217, 62, 10, 122, 131, 61, 58, 94, 229, 62, 137, 116, 208, 62, 18, 16, 224, 62, 53, 233, 185, 62, 27, 13, 43, 63, 188, 94, 46, 191, 58, 83, 14, 62, 85, 60, 73, 191, 189, 8, 214, 62, 43, 211, 128, 61, 243, 81, 144, 189, 173, 180, 46, 191, 110, 235, 196, 62, 233, 205, 31, 62, 123, 230, 54, 191, 111, 187, 223, 62, 162, 68, 210, 190, 231, 242, 105, 191, 42, 108, 29, 63, 167, 134, 171, 62, 190, 183, 8, 191, 186, 74, 13, 63, 232, 207, 217, 62, 231, 133, 9, 188, 198, 82, 19, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 251, 229, 190, 168, 73, 137, 190, 173, 112, 169, 190, 228, 142, 141, 190, 146, 172, 169, 190, 82, 62, 221, 62, 200, 170, 224, 62, 168, 156, 214, 61, 171, 140, 123, 190, 12, 224, 171, 190, 47, 34, 111, 190, 16, 226, 98, 62, 61, 246, 40, 63, 146, 239, 25, 63, 117, 201, 183, 190, 21, 67, 30, 63, 150, 120, 90, 62, 223, 70, 39, 63, 158, 124, 24, 63, 183, 38, 66, 62, 143, 252, 134, 190, 99, 248, 62, 190, 210, 155, 250, 62, 136, 225, 90, 190, 199, 12, 246, 189, 153, 188, 164, 190, 243, 95, 217, 189, 14, 131, 40, 190, 112, 101, 209, 62, 43, 188, 103, 189, 211, 100, 24, 63, 195, 141, 222, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 24, 145, 189, 22, 12, 244, 60, 241, 121, 117, 61, 45, 201, 72, 189, 124, 99, 174, 189, 176, 74, 18, 190, 107, 114, 17, 191, 241, 223, 200, 61, 112, 38, 43, 190, 160, 43, 149, 190, 140, 45, 161, 61, 135, 214, 176, 188, 110, 130, 24, 190, 5, 135, 136, 62, 163, 53, 158, 189, 78, 250, 138, 61, 53, 29, 135, 189, 176, 160, 97, 62, 156, 123, 167, 61, 61, 9, 193, 189, 200, 201, 137, 190, 126, 128, 110, 61, 206, 132, 117, 60, 130, 37, 27, 60, 87, 104, 96, 190, 59, 106, 70, 62, 197, 83, 6, 191, 75, 79, 40, 61, 30, 127, 8, 62, 250, 185, 109, 190, 110, 119, 87, 62, 17, 155, 89, 189, 42, 125, 30, 61, 117, 156, 215, 189, 241, 26, 133, 61, 71, 139, 208, 61, 228, 76, 44, 61, 7, 182, 81, 62, 40, 153, 151, 61, 229, 137, 134, 61, 100, 14, 6, 62, 12, 37, 146, 188, 240, 20, 54, 62, 38, 64, 159, 189, 24, 144, 116, 189, 183, 148, 142, 62, 187, 35, 98, 190, 216, 40, 107, 62, 106, 244, 45, 189, 36, 41, 16, 61, 63, 53, 161, 189, 131, 239, 46, 61, 167, 77, 163, 189, 118, 126, 151, 61, 103, 196, 84, 62, 106, 229, 12, 61, 44, 237, 26, 189, 190, 242, 108, 188, 129, 45, 238, 189, 28, 197, 247, 189, 214, 78, 27, 62, 70, 43, 186, 60, 13, 116, 201, 61, 140, 232, 218, 189, 19, 2, 4, 188, 94, 36, 72, 61, 49, 89, 28, 190, 203, 40, 218, 61, 166, 155, 204, 60, 37, 127, 4, 187, 31, 36, 135, 189, 221, 209, 72, 62, 79, 6, 151, 190, 182, 220, 52, 59, 12, 85, 17, 190, 71, 215, 187, 60, 95, 81, 169, 62, 146, 74, 101, 190, 146, 243, 157, 62, 217, 22, 249, 190, 6, 149, 97, 190, 215, 50, 123, 61, 183, 175, 41, 61, 130, 232, 51, 190, 139, 212, 22, 62, 252, 81, 71, 62, 114, 97, 162, 60, 125, 242, 148, 189, 196, 196, 197, 189, 97, 109, 20, 190, 156, 67, 140, 190, 229, 114, 46, 62, 3, 60, 243, 60, 65, 190, 155, 62, 63, 208, 229, 189, 149, 116, 8, 190, 198, 208, 69, 190, 247, 27, 141, 190, 247, 39, 228, 189, 16, 48, 146, 189, 235, 90, 81, 191, 119, 54, 50, 62, 51, 200, 103, 61, 83, 53, 173, 188, 225, 17, 129, 61, 171, 56, 85, 60, 137, 68, 50, 61, 145, 210, 37, 191, 15, 105, 149, 61, 64, 133, 112, 190, 109, 247, 158, 189, 11, 40, 228, 61, 134, 171, 183, 189, 38, 48, 167, 59, 162, 187, 91, 62, 155, 49, 94, 189, 61, 131, 137, 190, 184, 136, 98, 62, 229, 113, 89, 190, 55, 26, 169, 189, 45, 118, 235, 187, 130, 33, 34, 190, 70, 96, 50, 62, 217, 203, 178, 61, 137, 147, 93, 191, 30, 214, 84, 191, 179, 150, 48, 191, 231, 29, 22, 190, 236, 40, 137, 190, 220, 33, 98, 62, 132, 164, 13, 189, 191, 253, 174, 189, 116, 46, 211, 61, 42, 129, 54, 62, 243, 180, 3, 62, 0, 174, 207, 61, 69, 196, 104, 190, 174, 184, 188, 189, 116, 10, 162, 60, 185, 167, 175, 60, 167, 177, 77, 61, 111, 120, 57, 62, 49, 189, 144, 62, 94, 78, 194, 61, 68, 56, 244, 61, 246, 225, 146, 61, 69, 251, 130, 62, 190, 153, 63, 190, 119, 231, 8, 190, 119, 157, 151, 190, 228, 214, 94, 61, 82, 56, 129, 190, 104, 214, 88, 190, 91, 22, 221, 61, 221, 47, 169, 61, 77, 25, 161, 189, 185, 7, 72, 62, 198, 233, 247, 60, 15, 27, 165, 61, 180, 207, 18, 62, 135, 56, 10, 63, 38, 227, 18, 190, 253, 22, 111, 62, 201, 190, 142, 190, 212, 229, 232, 190, 208, 237, 181, 185, 205, 38, 181, 61, 126, 68, 163, 61, 4, 109, 222, 61, 68, 16, 222, 61, 42, 83, 51, 61, 193, 242, 170, 189, 114, 175, 170, 189, 129, 58, 101, 62, 229, 50, 169, 190, 197, 185, 50, 62, 225, 45, 237, 189, 196, 144, 0, 190, 221, 121, 37, 188, 85, 15, 31, 62, 1, 36, 72, 190, 244, 154, 197, 62, 19, 51, 59, 62, 214, 4, 55, 62, 96, 132, 68, 62, 158, 198, 7, 58, 66, 136, 30, 190, 237, 136, 70, 62, 51, 22, 186, 189, 249, 124, 26, 189, 224, 89, 149, 61, 27, 71, 78, 190, 100, 232, 182, 62, 62, 230, 243, 59, 58, 84, 166, 61, 83, 201, 96, 190, 195, 190, 66, 191, 225, 206, 6, 187, 150, 151, 209, 60, 1, 40, 202, 61, 89, 91, 34, 62, 192, 236, 165, 62, 8, 138, 135, 62, 216, 247, 135, 190, 206, 81, 143, 189, 227, 154, 216, 61, 17, 155, 208, 190, 213, 236, 142, 62, 252, 186, 19, 190, 63, 116, 157, 189, 254, 228, 16, 62, 66, 163, 250, 61, 239, 138, 128, 190, 218, 241, 11, 62, 108, 104, 90, 62, 138, 100, 184, 62, 173, 118, 187, 62, 168, 113, 194, 62, 156, 42, 227, 61, 73, 37, 134, 62, 47, 157, 251, 190, 37, 4, 57, 191, 92, 52, 99, 190, 132, 185, 30, 190, 189, 168, 95, 61, 190, 240, 146, 189, 229, 100, 135, 61, 17, 205, 139, 189, 31, 130, 10, 190, 31, 31, 65, 190, 122, 249, 140, 61, 27, 189, 40, 190, 224, 60, 104, 189, 145, 81, 161, 62, 11, 80, 191, 58, 243, 234, 15, 190, 108, 66, 179, 190, 129, 118, 2, 188, 185, 51, 222, 189, 198, 163, 39, 62, 73, 82, 16, 62, 37, 199, 110, 190, 225, 225, 101, 190, 198, 158, 173, 60, 129, 254, 206, 61, 166, 211, 156, 188, 73, 67, 28, 62, 173, 194, 72, 62, 155, 73, 4, 62, 239, 96, 139, 190, 0, 186, 149, 190, 114, 64, 240, 59, 198, 140, 33, 190, 178, 165, 87, 61, 187, 89, 210, 189, 129, 134, 17, 189, 254, 205, 4, 190, 146, 233, 158, 189, 235, 124, 12, 62, 70, 63, 11, 189, 245, 188, 218, 188, 76, 140, 228, 189, 224, 90, 59, 60, 109, 101, 16, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 117, 197, 11, 62, 61, 76, 4, 190, 242, 137, 224, 61, 37, 9, 5, 189, 27, 244, 156, 59, 93, 231, 219, 189, 15, 228, 231, 189, 0, 91, 31, 62, 14, 136, 149, 189, 95, 157, 66, 61, 71, 145, 245, 189, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 1, 42, 51, 189, 226, 110, 94, 190, 120, 242, 27, 190, 1, 225, 244, 60, 20, 0, 159, 190, 130, 199, 22, 191, 67, 231, 104, 62, 212, 245, 216, 189, 248, 88, 10, 188, 254, 198, 80, 189, 58, 112, 57, 190, 65, 63, 35, 62, 10, 192, 67, 190, 16, 84, 156, 62, 175, 224, 159, 190, 121, 90, 235, 190, 123, 102, 114, 190, 209, 201, 180, 190, 163, 138, 48, 59, 12, 112, 90, 62, 208, 47, 168, 61, 237, 107, 189, 190, 56, 213, 140, 62, 53, 179, 247, 189, 196, 178, 5, 62, 228, 116, 169, 61, 150, 208, 21, 61, 90, 141, 33, 62, 212, 166, 183, 189, 135, 118, 13, 190, 32, 81, 101, 190, 121, 15, 162, 190, 66, 137, 31, 190, 73, 213, 135, 62, 151, 215, 130, 189, 118, 253, 27, 62, 80, 173, 132, 190, 239, 239, 39, 61, 112, 221, 249, 60, 198, 190, 41, 62, 200, 185, 157, 189, 2, 17, 109, 62, 152, 216, 39, 62, 100, 201, 48, 186, 24, 116, 196, 189, 116, 34, 17, 190, 154, 27, 157, 189, 219, 84, 97, 189, 103, 34, 46, 62, 164, 148, 163, 189, 102, 50, 247, 60, 233, 191, 158, 189, 53, 29, 59, 62, 207, 38, 184, 189, 137, 91, 8, 59, 87, 7, 17, 62, 94, 230, 236, 61, 206, 87, 40, 62, 198, 88, 200, 189, 225, 56, 143, 189, 192, 231, 154, 61, 235, 54, 32, 190, 88, 163, 110, 60, 81, 176, 19, 190, 51, 250, 14, 189, 1, 217, 142, 190, 236, 241, 176, 188, 25, 207, 97, 61, 191, 12, 32, 62, 197, 171, 152, 62, 5, 245, 79, 62, 75, 94, 139, 62, 18, 152, 202, 61, 41, 103, 156, 61, 204, 132, 148, 189, 206, 213, 92, 188, 179, 217, 106, 62, 64, 210, 146, 61, 5, 8, 13, 62, 238, 180, 17, 62, 86, 204, 208, 61, 100, 137, 117, 189, 195, 131, 182, 61, 52, 102, 5, 62, 123, 215, 10, 62, 194, 241, 56, 190, 184, 205, 142, 190, 186, 87, 215, 189, 38, 155, 8, 190, 155, 185, 198, 189, 130, 208, 7, 190, 248, 7, 30, 62, 52, 0, 107, 190, 62, 121, 21, 60, 59, 108, 67, 62, 182, 166, 217, 59, 96, 197, 63, 59, 218, 63, 164, 189, 30, 137, 48, 62, 87, 169, 91, 189, 213, 147, 73, 61, 245, 71, 3, 62, 31, 91, 206, 188, 12, 145, 21, 62, 39, 85, 14, 62, 101, 183, 177, 189, 215, 113, 85, 190, 205, 65, 165, 190, 100, 208, 234, 189, 176, 247, 3, 188, 253, 112, 214, 189, 31, 154, 18, 62, 139, 197, 82, 62, 11, 8, 130, 188, 56, 218, 182, 60, 192, 230, 146, 61, 9, 85, 225, 61, 182, 177, 112, 62, 147, 153, 60, 61, 130, 145, 42, 190, 122, 100, 135, 190, 193, 177, 225, 187, 14, 153, 191, 189, 50, 127, 110, 62, 199, 251, 217, 190, 119, 52, 168, 189, 181, 238, 157, 189, 225, 214, 249, 187, 227, 248, 70, 60, 187, 234, 20, 60, 82, 116, 62, 190, 40, 4, 79, 61, 132, 191, 195, 61, 232, 105, 41, 61, 98, 251, 85, 190, 207, 113, 204, 189, 41, 176, 182, 188, 158, 35, 182, 61, 39, 41, 247, 189, 127, 98, 74, 190, 224, 102, 87, 190, 147, 72, 28, 190, 54, 15, 137, 61, 229, 136, 247, 188, 230, 45, 65, 190, 157, 3, 80, 61, 155, 8, 143, 60, 86, 90, 181, 61, 1, 230, 59, 61, 170, 105, 200, 189, 49, 136, 46, 190, 198, 59, 246, 188, 103, 70, 8, 62, 254, 78, 8, 62, 18, 59, 179, 61, 73, 191, 161, 189, 191, 101, 149, 61, 226, 127, 46, 188, 159, 129, 161, 61, 221, 190, 33, 189, 209, 68, 69, 61, 159, 99, 142, 62, 129, 233, 160, 190, 108, 240, 135, 62, 111, 38, 159, 190, 198, 214, 219, 190, 98, 44, 21, 190, 241, 195, 129, 61, 191, 18, 131, 61, 164, 38, 57, 62, 107, 158, 13, 63, 153, 172, 161, 62, 209, 39, 122, 190, 87, 194, 38, 190, 98, 199, 166, 61, 118, 44, 102, 190, 178, 191, 65, 61, 144, 165, 153, 57, 124, 176, 156, 61, 230, 187, 76, 61, 213, 78, 159, 62, 167, 143, 90, 190, 150, 152, 15, 62, 192, 213, 61, 62, 116, 68, 215, 62, 146, 171, 194, 62, 42, 139, 37, 62, 85, 6, 58, 61, 24, 227, 77, 61, 180, 110, 210, 187, 173, 180, 160, 190, 173, 243, 110, 189, 172, 28, 65, 190, 12, 215, 200, 62, 4, 220, 21, 62, 28, 65, 62, 62, 244, 162, 206, 189, 230, 228, 170, 190, 13, 40, 61, 62, 181, 176, 143, 61, 5, 80, 18, 60, 237, 65, 155, 189, 221, 251, 32, 188, 168, 150, 26, 62, 12, 198, 146, 189, 93, 211, 121, 60, 74, 130, 61, 62, 109, 144, 111, 190, 90, 249, 241, 188, 70, 247, 32, 62, 26, 161, 246, 60, 147, 73, 245, 61, 171, 14, 234, 61, 140, 69, 165, 190, 131, 243, 186, 60, 141, 220, 84, 62, 183, 103, 185, 189, 98, 18, 235, 60, 155, 98, 141, 62, 55, 47, 245, 189, 198, 94, 139, 188, 111, 222, 59, 62, 69, 153, 184, 189, 130, 223, 187, 60, 222, 160, 194, 189, 188, 12, 200, 190, 196, 146, 35, 62, 7, 125, 164, 60, 171, 44, 130, 62, 162, 221, 40, 62, 191, 174, 64, 62, 142, 78, 57, 62, 172, 2, 217, 60, 170, 252, 209, 190, 77, 179, 40, 191, 122, 173, 135, 190, 169, 51, 76, 62, 4, 101, 69, 62, 0, 213, 178, 188, 120, 238, 153, 62, 68, 145, 54, 62, 33, 246, 136, 61, 147, 85, 66, 189, 195, 160, 91, 62, 130, 200, 254, 188, 188, 9, 169, 189, 143, 254, 252, 60, 4, 20, 68, 189, 213, 96, 149, 190, 73, 119, 164, 190, 240, 176, 173, 60, 40, 173, 101, 58, 129, 177, 164, 189, 186, 63, 58, 62, 122, 117, 99, 61, 100, 199, 122, 62, 121, 11, 45, 189, 22, 162, 139, 189, 56, 209, 41, 189, 55, 203, 17, 186, 149, 223, 32, 190, 154, 191, 167, 61, 64, 157, 16, 190, 150, 142, 34, 61, 125, 65, 81, 190, 219, 85, 36, 190, 10, 232, 7, 60, 64, 174, 235, 61, 120, 53, 47, 190, 165, 14, 169, 189, 253, 96, 60, 190, 240, 28, 65, 189, 226, 253, 178, 189, 43, 173, 244, 189, 79, 38, 178, 188, 153, 40, 171, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 36, 16, 171, 61, 26, 226, 254, 189, 89, 114, 180, 189, 9, 183, 55, 190, 249, 10, 0, 61, 190, 96, 74, 60, 104, 151, 240, 61, 182, 75, 74, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 176, 92, 141, 61, 15, 217, 27, 190, 0, 47, 253, 61, 52, 143, 67, 188, 59, 82, 79, 61, 176, 37, 233, 60, 216, 180, 87, 190, 130, 212, 15, 190, 50, 201, 203, 189, 95, 151, 116, 187, 208, 179, 25, 189, 27, 59, 151, 62, 48, 223, 96, 62, 136, 252, 31, 61, 89, 239, 112, 190, 118, 219, 157, 190, 6, 194, 227, 189, 131, 37, 78, 62, 99, 217, 255, 61, 128, 7, 44, 190, 205, 151, 243, 188, 150, 146, 78, 62, 114, 233, 7, 190, 77, 110, 14, 62, 45, 30, 253, 188, 9, 50, 171, 189, 1, 217, 246, 189, 141, 158, 140, 189, 180, 30, 130, 62, 154, 113, 172, 62, 201, 33, 229, 61, 133, 134, 219, 189, 31, 159, 128, 61, 188, 0, 131, 189, 185, 211, 172, 190, 56, 135, 54, 190, 105, 58, 51, 62, 44, 113, 147, 60, 170, 112, 164, 62, 209, 195, 157, 190, 167, 94, 50, 190, 247, 73, 168, 190, 179, 34, 171, 190, 85, 181, 217, 60, 216, 167, 42, 62, 65, 116, 52, 190, 71, 108, 192, 61, 81, 156, 186, 61, 54, 38, 226, 61, 115, 85, 104, 190, 29, 69, 181, 189, 215, 36, 33, 190, 160, 169, 169, 61, 161, 143, 130, 190, 243, 108, 69, 190, 40, 99, 235, 189, 74, 138, 25, 190, 100, 69, 18, 190, 192, 226, 181, 62, 78, 230, 224, 190, 165, 254, 152, 190, 238, 128, 55, 189, 212, 131, 152, 188, 5, 199, 22, 61, 229, 11, 125, 190, 97, 152, 94, 62, 196, 117, 213, 60, 200, 196, 171, 61, 239, 249, 61, 190, 206, 98, 64, 190, 246, 61, 20, 62, 202, 144, 22, 190, 54, 197, 119, 62, 241, 88, 134, 62, 26, 58, 142, 60, 41, 19, 42, 188, 109, 108, 71, 60, 133, 106, 188, 189, 34, 252, 160, 189, 145, 149, 63, 62, 56, 198, 20, 190, 97, 199, 48, 60, 77, 163, 99, 190, 9, 167, 9, 62, 52, 141, 47, 190, 35, 170, 123, 189, 225, 24, 76, 62, 145, 149, 209, 62, 169, 18, 71, 62, 107, 131, 45, 190, 207, 217, 39, 190, 197, 88, 135, 188, 45, 51, 107, 190, 177, 93, 139, 188, 207, 22, 197, 189, 121, 150, 174, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 207, 115, 242, 61, 94, 238, 209, 189, 172, 48, 105, 61, 204, 14, 2, 62, 218, 241, 215, 189, 76, 189, 25, 190, 0, 20, 231, 188, 162, 70, 221, 60, 124, 63, 120, 60, 215, 139, 202, 61, 235, 188, 25, 62, 41, 174, 128, 59, 74, 15, 232, 189, 93, 158, 45, 190, 39, 79, 189, 60, 217, 129, 37, 190, 186, 214, 8, 190, 205, 147, 51, 190, 153, 230, 31, 62, 102, 97, 29, 61, 82, 63, 43, 190, 238, 56, 85, 61, 136, 136, 10, 190, 210, 112, 107, 189, 170, 101, 45, 190, 18, 95, 251, 61, 47, 235, 192, 189, 4, 142, 135, 60, 165, 213, 12, 190, 96, 46, 25, 59, 111, 125, 34, 61, 237, 132, 122, 189, 44, 72, 136, 62, 86, 244, 160, 62, 221, 134, 191, 188, 114, 4, 35, 189, 150, 17, 59, 62, 56, 125, 227, 189, 5, 254, 120, 61, 32, 14, 108, 60, 27, 136, 119, 189, 68, 88, 138, 62, 169, 217, 4, 62, 45, 194, 240, 61, 48, 239, 43, 191, 142, 74, 5, 62, 177, 91, 0, 190, 143, 167, 35, 62, 28, 223, 29, 62, 68, 255, 102, 190, 224, 235, 175, 188, 20, 117, 65, 189, 6, 54, 211, 61, 99, 228, 174, 61, 95, 97, 183, 62, 175, 56, 16, 62, 13, 240, 112, 188, 153, 103, 14, 62, 45, 152, 141, 188, 122, 252, 181, 61, 14, 35, 82, 189, 48, 141, 239, 61, 129, 229, 192, 61, 75, 85, 189, 188, 38, 9, 184, 188, 159, 37, 117, 190, 46, 51, 131, 190, 169, 219, 129, 62, 78, 51, 172, 62, 64, 19, 122, 61, 123, 23, 9, 62, 111, 40, 190, 188, 167, 223, 167, 189, 123, 133, 240, 190, 173, 205, 161, 190, 242, 11, 148, 62, 72, 81, 117, 61, 97, 207, 90, 61, 85, 195, 98, 62, 209, 159, 19, 190, 206, 33, 139, 60, 55, 62, 84, 59, 181, 87, 151, 62, 111, 117, 238, 190, 250, 76, 238, 189, 183, 218, 40, 191, 12, 251, 176, 190, 148, 190, 1, 190, 121, 102, 181, 190, 112, 137, 53, 189, 133, 123, 89, 187, 190, 109, 145, 190, 244, 91, 142, 62, 230, 66, 23, 62, 18, 82, 93, 61, 123, 74, 168, 61, 43, 248, 226, 61, 135, 229, 42, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 239, 223, 214, 189, 2, 117, 39, 62, 162, 254, 33, 190, 190, 86, 177, 189, 216, 218, 230, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 72, 87, 187, 61, 96, 166, 52, 60, 0, 67, 54, 61, 75, 200, 230, 189, 125, 126, 23, 61, 181, 50, 10, 190, 81, 134, 35, 189, 134, 3, 162, 60, 107, 61, 80, 61, 201, 50, 30, 190, 149, 142, 34, 61, 103, 73, 15, 190, 61, 208, 200, 189, 67, 30, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 41, 193, 216, 189, 183, 114, 21, 62, 240, 197, 23, 188, 119, 76, 62, 189, 26, 222, 242, 188, 236, 237, 28, 191, 177, 216, 94, 62, 211, 40, 93, 188, 170, 195, 67, 190, 24, 35, 19, 189, 193, 92, 139, 189, 134, 135, 156, 189, 26, 225, 55, 191, 171, 227, 55, 62, 127, 56, 33, 62, 59, 156, 28, 190, 36, 66, 78, 188, 225, 78, 123, 190, 35, 159, 54, 61, 35, 57, 150, 187, 234, 65, 120, 62, 246, 112, 80, 190, 149, 29, 218, 189, 10, 97, 239, 60, 21, 189, 22, 190, 47, 0, 153, 190, 91, 239, 26, 61, 20, 193, 160, 62, 31, 84, 11, 190, 246, 112, 122, 191, 54, 224, 164, 191, 240, 78, 58, 191, 125, 149, 84, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 63, 56, 251, 62, 11, 192, 125, 190, 244, 115, 66, 62, 100, 182, 159, 190, 119, 134, 150, 191, 65, 147, 174, 61, 133, 149, 170, 61, 248, 81, 39, 190, 91, 148, 124, 62, 31, 253, 100, 62, 130, 160, 0, 62, 228, 101, 5, 191, 50, 109, 99, 189, 173, 235, 175, 62, 145, 79, 226, 190, 142, 79, 68, 62, 184, 201, 211, 60, 59, 68, 141, 62, 118, 219, 111, 188, 223, 201, 29, 62, 222, 104, 30, 191, 253, 75, 248, 61, 150, 59, 197, 62, 120, 239, 156, 62, 236, 59, 115, 62, 1, 70, 80, 62, 219, 129, 208, 61, 85, 139, 43, 62, 185, 72, 217, 190, 51, 232, 43, 191, 47, 46, 173, 189, 21, 72, 187, 189, 66, 206, 33, 62, 172, 68, 127, 190, 225, 177, 22, 61, 60, 187, 59, 190, 154, 166, 139, 191, 221, 218, 58, 62, 81, 107, 88, 62, 172, 125, 231, 188, 190, 134, 3, 189, 93, 15, 192, 190, 137, 235, 16, 62, 103, 131, 126, 191, 187, 228, 156, 61, 43, 169, 66, 189, 72, 150, 202, 190, 50, 123, 230, 188, 72, 210, 67, 190, 198, 8, 68, 62, 182, 24, 140, 189, 10, 30, 90, 62, 9, 153, 187, 190, 40, 94, 98, 62, 147, 42, 120, 62, 201, 129, 186, 189, 216, 121, 65, 190, 28, 87, 31, 189, 94, 58, 70, 62, 53, 197, 42, 189, 40, 103, 134, 191, 239, 226, 79, 191, 238, 208, 72, 191, 251, 199, 29, 190, 193, 114, 170, 188, 205, 152, 160, 61, 87, 198, 5, 190, 38, 63, 205, 61, 164, 252, 24, 61, 73, 247, 158, 189, 86, 1, 47, 61, 105, 128, 49, 190, 249, 125, 187, 189, 133, 184, 171, 61, 151, 62, 160, 189, 32, 144, 40, 190, 66, 15, 84, 186, 11, 8, 17, 190, 103, 214, 18, 189, 94, 12, 168, 189, 58, 243, 238, 61, 52, 244, 143, 189, 28, 38, 39, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 119, 110, 162, 189, 246, 237, 207, 61, 49, 45, 11, 62, 123, 227, 157, 59, 133, 239, 146, 61, 48, 81, 79, 60, 156, 214, 175, 61, 77, 145, 137, 61, 229, 78, 28, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 99, 79, 62, 247, 161, 69, 189, 236, 93, 79, 62, 225, 161, 9, 189, 109, 207, 147, 62, 200, 194, 153, 187, 91, 219, 20, 62, 245, 255, 41, 61, 37, 156, 242, 189, 252, 213, 92, 189, 249, 147, 16, 190, 62, 215, 86, 62, 225, 198, 72, 189, 80, 10, 131, 189, 1, 140, 131, 189, 165, 132, 100, 62, 154, 110, 132, 62, 215, 84, 221, 61, 68, 243, 135, 187, 20, 8, 169, 189, 225, 27, 203, 61, 4, 82, 32, 189, 106, 185, 50, 190, 231, 247, 117, 188, 56, 49, 92, 190, 59, 65, 132, 62, 19, 183, 176, 189, 90, 113, 152, 61, 198, 235, 52, 190, 108, 239, 57, 61, 212, 204, 72, 59, 176, 87, 99, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 225, 143, 62, 13, 60, 33, 60, 179, 193, 160, 190, 228, 119, 40, 191, 85, 162, 174, 62, 2, 142, 141, 190, 12, 24, 189, 190, 30, 252, 154, 62, 55, 236, 30, 62, 106, 146, 43, 191, 235, 125, 187, 61, 5, 141, 135, 62, 168, 71, 55, 62, 109, 244, 213, 61, 186, 249, 228, 190, 192, 175, 48, 188, 171, 30, 212, 62, 3, 150, 196, 61, 105, 214, 145, 61, 56, 227, 103, 190, 169, 186, 203, 62, 184, 204, 71, 62, 78, 149, 6, 190, 37, 176, 154, 61, 77, 106, 160, 190, 92, 111, 6, 63, 86, 90, 99, 61, 101, 244, 27, 191, 130, 166, 81, 188, 56, 31, 22, 191, 224, 8, 60, 191, 235, 140, 66, 60, 232, 186, 222, 190, 27, 170, 231, 189, 183, 68, 11, 62, 165, 207, 58, 61, 87, 92, 38, 190, 102, 78, 231, 189, 245, 113, 154, 61, 10, 24, 208, 61, 73, 245, 35, 188, 134, 224, 82, 188, 55, 128, 125, 62, 60, 225, 6, 190, 131, 132, 172, 61, 4, 198, 32, 61, 114, 239, 63, 62, 230, 161, 90, 190, 253, 81, 193, 61, 94, 161, 107, 60, 15, 242, 77, 189, 108, 32, 127, 61, 213, 47, 153, 60, 141, 3, 48, 189, 10, 104, 129, 187, 118, 50, 193, 61, 203, 62, 180, 60, 109, 195, 201, 61, 222, 242, 205, 188, 244, 35, 27, 62, 165, 130, 143, 189, 90, 138, 132, 189, 39, 96, 200, 189, 215, 234, 179, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 8, 70, 189, 140, 252, 179, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {190, 145, 210, 191, 4, 170, 130, 63, 91, 78, 153, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 226, 50, 64, 178, 33, 22, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}