// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 56, 92, 63, 137, 2, 248, 62, 97, 208, 0, 190, 163, 34, 4, 190, 252, 99, 21, 63, 227, 55, 216, 190, 41, 238, 255, 62, 19, 44, 47, 191, 166, 207, 222, 62, 212, 111, 17, 63, 245, 17, 156, 191, 219, 246, 184, 190, 170, 46, 42, 191, 10, 174, 30, 190, 162, 67, 16, 63, 232, 122, 91, 190, 211, 89, 58, 61, 220, 171, 220, 60, 77, 242, 128, 190, 15, 189, 184, 63, 240, 6, 127, 62, 4, 63, 22, 63, 203, 27, 104, 191, 255, 98, 235, 190, 175, 60, 26, 63, 217, 49, 86, 62, 225, 35, 249, 62, 8, 187, 74, 63, 182, 157, 59, 63, 7, 158, 146, 62, 99, 202, 161, 61, 6, 28, 15, 191, 53, 233, 3, 63, 136, 160, 48, 190, 135, 149, 223, 190, 120, 111, 220, 62, 79, 49, 49, 191, 49, 45, 112, 191, 2, 161, 60, 190, 122, 48, 24, 63, 37, 243, 8, 63, 173, 242, 130, 62, 67, 90, 73, 63, 234, 96, 139, 191, 4, 56, 100, 190, 46, 26, 227, 62, 117, 142, 143, 63, 124, 6, 187, 62, 83, 223, 192, 189, 8, 221, 164, 63, 247, 243, 52, 63, 67, 235, 38, 62, 118, 205, 68, 190, 190, 112, 166, 190, 59, 167, 206, 190, 6, 187, 225, 190, 154, 112, 146, 62, 75, 255, 230, 190, 180, 0, 59, 63, 110, 233, 28, 191, 122, 152, 218, 62, 120, 187, 147, 190, 247, 149, 20, 190, 54, 251, 236, 190, 181, 16, 7, 191, 120, 77, 4, 191, 194, 177, 241, 62, 118, 211, 72, 63, 229, 149, 54, 190, 87, 248, 252, 62, 106, 49, 3, 62, 235, 206, 221, 62, 134, 186, 227, 62, 40, 197, 17, 63, 219, 219, 181, 62, 192, 243, 54, 63, 161, 80, 72, 191, 153, 133, 67, 62, 37, 144, 58, 191, 213, 167, 28, 63, 1, 174, 146, 61, 15, 248, 164, 190, 223, 92, 12, 191, 45, 171, 198, 62, 229, 4, 246, 59, 158, 15, 241, 190, 144, 17, 204, 62, 66, 11, 252, 190, 120, 83, 18, 191, 165, 33, 39, 63, 157, 170, 142, 62, 58, 49, 153, 190, 133, 56, 12, 63, 211, 22, 154, 62, 97, 26, 177, 190, 46, 130, 25, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 188, 228, 190, 179, 183, 92, 190, 206, 248, 168, 190, 202, 246, 39, 190, 75, 61, 141, 190, 207, 254, 197, 62, 221, 102, 136, 62, 201, 64, 121, 62, 135, 35, 50, 190, 192, 3, 177, 190, 182, 144, 133, 190, 246, 141, 163, 62, 92, 82, 37, 63, 196, 29, 38, 63, 39, 199, 157, 190, 224, 209, 16, 63, 252, 195, 20, 62, 109, 96, 22, 63, 15, 16, 16, 63, 66, 209, 53, 62, 50, 94, 206, 190, 173, 249, 138, 190, 21, 204, 246, 62, 239, 239, 226, 189, 102, 39, 72, 189, 154, 107, 146, 190, 70, 208, 4, 190, 178, 209, 177, 188, 255, 197, 7, 63, 234, 200, 44, 61, 200, 76, 41, 63, 161, 132, 49, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 17, 31, 62, 53, 77, 73, 60, 127, 193, 115, 61, 72, 162, 142, 189, 115, 118, 153, 189, 47, 11, 82, 189, 50, 177, 130, 191, 15, 96, 243, 61, 10, 89, 66, 190, 188, 69, 13, 191, 65, 50, 133, 61, 177, 106, 41, 188, 232, 245, 127, 189, 121, 23, 175, 62, 59, 247, 217, 189, 3, 20, 232, 61, 161, 213, 21, 190, 207, 252, 133, 62, 44, 81, 14, 62, 175, 243, 188, 189, 59, 50, 16, 191, 42, 239, 103, 61, 222, 57, 199, 61, 155, 165, 10, 188, 196, 119, 149, 190, 81, 0, 90, 62, 111, 178, 52, 191, 207, 54, 114, 61, 175, 106, 42, 62, 199, 159, 107, 190, 123, 248, 113, 62, 234, 149, 94, 189, 158, 226, 83, 62, 231, 47, 177, 189, 126, 231, 210, 60, 188, 31, 174, 61, 252, 27, 1, 61, 122, 8, 120, 62, 190, 51, 167, 59, 68, 111, 206, 61, 157, 243, 251, 61, 71, 195, 145, 60, 15, 67, 6, 62, 142, 69, 207, 189, 220, 247, 115, 61, 13, 213, 149, 62, 44, 24, 129, 190, 242, 24, 92, 62, 33, 219, 232, 189, 245, 63, 241, 61, 48, 68, 162, 189, 38, 222, 198, 61, 99, 27, 160, 190, 204, 250, 16, 62, 198, 28, 94, 62, 38, 64, 142, 60, 217, 204, 124, 189, 72, 249, 3, 190, 82, 137, 217, 189, 226, 27, 20, 190, 4, 253, 14, 62, 104, 143, 189, 184, 247, 58, 171, 61, 9, 67, 130, 189, 19, 201, 91, 190, 144, 15, 110, 189, 214, 87, 143, 58, 89, 1, 22, 62, 23, 43, 68, 60, 129, 95, 12, 61, 65, 89, 29, 190, 234, 8, 23, 62, 42, 144, 61, 190, 206, 237, 56, 188, 244, 241, 116, 189, 209, 121, 141, 61, 219, 172, 209, 62, 172, 67, 8, 191, 37, 88, 241, 62, 234, 36, 138, 191, 153, 230, 90, 191, 127, 155, 207, 61, 32, 203, 250, 61, 118, 118, 88, 190, 46, 133, 240, 62, 99, 116, 87, 62, 156, 80, 240, 188, 36, 44, 51, 61, 41, 20, 208, 189, 131, 106, 152, 60, 182, 106, 99, 190, 18, 154, 67, 62, 209, 191, 101, 61, 94, 255, 185, 62, 35, 39, 41, 190, 7, 65, 80, 190, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 8, 28, 32, 190, 232, 193, 70, 62, 39, 247, 30, 188, 180, 186, 171, 189, 251, 247, 185, 61, 106, 18, 0, 62, 49, 234, 205, 61, 135, 49, 220, 61, 224, 211, 81, 190, 95, 118, 198, 189, 125, 206, 10, 61, 33, 168, 69, 60, 218, 0, 33, 188, 77, 48, 87, 62, 254, 28, 139, 62, 173, 109, 205, 61, 128, 23, 0, 62, 60, 241, 13, 61, 46, 12, 109, 62, 54, 229, 118, 190, 151, 11, 162, 190, 113, 231, 224, 190, 174, 25, 105, 61, 246, 139, 110, 190, 176, 239, 95, 190, 163, 113, 176, 61, 157, 53, 227, 60, 28, 170, 135, 189, 90, 137, 72, 62, 167, 221, 117, 60, 204, 103, 173, 61, 237, 18, 9, 62, 198, 44, 242, 62, 179, 130, 8, 190, 142, 149, 136, 62, 167, 198, 176, 190, 229, 212, 245, 190, 49, 32, 32, 189, 77, 8, 181, 187, 17, 7, 150, 61, 18, 199, 3, 62, 174, 33, 42, 62, 58, 237, 60, 61, 252, 91, 189, 189, 204, 159, 85, 190, 215, 104, 132, 62, 150, 158, 204, 190, 235, 176, 70, 62, 242, 98, 47, 190, 156, 86, 249, 189, 14, 46, 96, 189, 211, 92, 27, 62, 184, 162, 249, 190, 148, 75, 182, 62, 82, 155, 90, 62, 190, 241, 69, 62, 217, 135, 79, 62, 89, 180, 225, 61, 192, 100, 141, 190, 206, 131, 56, 62, 96, 71, 168, 189, 238, 181, 94, 189, 33, 18, 174, 61, 215, 174, 104, 190, 138, 158, 137, 62, 63, 126, 15, 61, 181, 224, 216, 61, 15, 184, 138, 190, 195, 119, 85, 191, 26, 84, 96, 189, 208, 253, 110, 187, 22, 28, 176, 61, 240, 235, 3, 62, 181, 67, 153, 62, 104, 88, 80, 62, 134, 95, 132, 190, 156, 124, 51, 190, 38, 234, 249, 61, 59, 46, 234, 190, 66, 11, 147, 62, 152, 220, 158, 190, 162, 116, 183, 189, 158, 53, 85, 61, 197, 197, 223, 61, 60, 3, 236, 190, 104, 243, 213, 61, 149, 187, 93, 62, 89, 60, 165, 62, 189, 177, 168, 62, 70, 193, 237, 62, 114, 212, 64, 61, 183, 118, 106, 62, 10, 73, 223, 190, 160, 1, 74, 191, 144, 81, 61, 190, 64, 76, 54, 190, 251, 10, 83, 62, 6, 192, 160, 189, 99, 138, 173, 60, 195, 31, 30, 190, 11, 202, 161, 190, 201, 70, 87, 190, 23, 209, 189, 60, 200, 31, 147, 190, 158, 157, 158, 189, 240, 8, 165, 62, 105, 229, 186, 189, 67, 110, 93, 190, 81, 99, 207, 190, 114, 5, 35, 61, 41, 134, 53, 190, 141, 138, 46, 62, 220, 212, 165, 61, 216, 185, 116, 190, 52, 166, 154, 190, 100, 205, 135, 188, 158, 161, 146, 61, 224, 20, 65, 188, 130, 171, 150, 62, 5, 244, 47, 62, 107, 69, 228, 61, 88, 3, 252, 188, 112, 195, 246, 190, 149, 155, 219, 189, 32, 91, 65, 190, 248, 137, 163, 189, 234, 241, 250, 189, 53, 196, 253, 189, 254, 205, 4, 190, 146, 233, 158, 189, 235, 124, 12, 62, 70, 63, 11, 189, 245, 188, 218, 188, 76, 140, 228, 189, 224, 90, 59, 60, 109, 101, 16, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 117, 197, 11, 62, 61, 76, 4, 190, 242, 137, 224, 61, 37, 9, 5, 189, 27, 244, 156, 59, 93, 231, 219, 189, 15, 228, 231, 189, 0, 91, 31, 62, 14, 136, 149, 189, 95, 157, 66, 61, 71, 145, 245, 189, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 1, 42, 51, 189, 2, 111, 161, 60, 252, 106, 174, 189, 136, 221, 15, 62, 97, 148, 235, 190, 89, 126, 204, 190, 181, 49, 147, 62, 76, 89, 161, 190, 168, 214, 232, 189, 206, 60, 22, 60, 58, 112, 57, 190, 134, 99, 190, 62, 35, 201, 233, 61, 89, 251, 234, 62, 11, 29, 142, 191, 136, 195, 72, 191, 157, 25, 128, 191, 249, 162, 154, 191, 186, 209, 199, 61, 204, 192, 166, 62, 249, 26, 19, 62, 142, 166, 47, 191, 82, 245, 214, 62, 211, 91, 40, 190, 175, 42, 86, 62, 238, 92, 9, 61, 222, 59, 7, 190, 166, 37, 186, 61, 6, 60, 147, 62, 54, 80, 15, 62, 147, 149, 187, 61, 37, 223, 92, 190, 232, 193, 43, 190, 250, 66, 198, 62, 210, 6, 172, 188, 49, 119, 9, 62, 26, 177, 85, 190, 1, 156, 192, 60, 150, 140, 146, 61, 220, 175, 132, 62, 57, 97, 165, 189, 72, 138, 126, 62, 29, 209, 83, 62, 83, 173, 78, 188, 27, 237, 234, 189, 103, 223, 14, 190, 86, 244, 130, 189, 213, 51, 206, 189, 106, 137, 91, 62, 176, 56, 221, 188, 88, 227, 56, 61, 110, 203, 110, 189, 115, 183, 121, 62, 143, 248, 74, 62, 194, 95, 72, 61, 119, 220, 67, 62, 205, 174, 6, 62, 3, 224, 75, 62, 252, 12, 39, 190, 109, 65, 69, 61, 179, 91, 77, 61, 51, 105, 60, 190, 178, 122, 239, 187, 91, 66, 36, 190, 118, 189, 82, 188, 223, 208, 20, 190, 162, 11, 159, 187, 98, 173, 158, 61, 174, 20, 90, 62, 29, 115, 145, 62, 125, 49, 66, 62, 61, 6, 112, 62, 54, 177, 33, 62, 236, 238, 197, 61, 238, 141, 160, 189, 147, 203, 1, 187, 188, 77, 95, 62, 108, 125, 251, 61, 132, 85, 46, 62, 85, 78, 46, 62, 137, 24, 216, 61, 195, 182, 107, 189, 223, 219, 1, 62, 123, 141, 246, 61, 198, 102, 50, 62, 252, 190, 158, 190, 20, 102, 135, 190, 69, 38, 201, 189, 54, 0, 238, 189, 200, 100, 217, 189, 103, 151, 33, 190, 135, 218, 214, 61, 37, 170, 96, 190, 137, 67, 3, 60, 58, 199, 49, 62, 242, 141, 13, 60, 81, 99, 109, 61, 57, 138, 47, 61, 116, 109, 34, 62, 6, 219, 1, 61, 33, 77, 32, 62, 165, 162, 110, 189, 150, 194, 91, 188, 197, 52, 100, 61, 26, 214, 93, 62, 47, 108, 71, 190, 120, 121, 2, 191, 171, 191, 159, 190, 204, 116, 58, 190, 60, 42, 95, 61, 81, 176, 132, 189, 195, 164, 111, 62, 173, 30, 32, 62, 94, 130, 18, 59, 244, 202, 130, 61, 212, 164, 250, 61, 206, 231, 235, 61, 75, 223, 135, 62, 39, 231, 1, 61, 76, 233, 49, 190, 40, 193, 190, 190, 94, 83, 139, 190, 75, 201, 107, 61, 163, 115, 82, 62, 12, 46, 253, 190, 12, 225, 156, 189, 228, 91, 143, 190, 20, 217, 93, 188, 40, 135, 88, 61, 187, 234, 20, 60, 82, 116, 62, 190, 248, 203, 64, 61, 132, 191, 195, 61, 54, 32, 244, 60, 73, 177, 88, 190, 30, 71, 205, 189, 41, 176, 182, 188, 226, 17, 176, 61, 120, 121, 249, 189, 62, 159, 79, 190, 94, 250, 94, 190, 2, 9, 33, 190, 151, 29, 130, 61, 229, 136, 247, 188, 162, 26, 67, 190, 24, 168, 65, 61, 155, 8, 143, 60, 176, 171, 173, 61, 1, 230, 59, 61, 170, 105, 200, 189, 49, 136, 46, 190, 198, 59, 246, 188, 147, 38, 4, 62, 253, 117, 5, 62, 172, 217, 174, 61, 73, 191, 161, 189, 53, 85, 137, 61, 155, 237, 136, 188, 82, 155, 146, 61, 161, 188, 54, 189, 209, 68, 69, 61, 170, 151, 39, 62, 255, 35, 134, 190, 142, 19, 164, 62, 144, 29, 205, 190, 92, 62, 239, 190, 137, 106, 61, 190, 65, 151, 186, 189, 146, 149, 224, 60, 186, 242, 59, 62, 152, 16, 14, 63, 161, 30, 171, 62, 2, 243, 120, 190, 153, 10, 104, 190, 170, 23, 176, 61, 30, 122, 174, 190, 176, 246, 224, 60, 115, 247, 148, 189, 60, 65, 120, 61, 103, 91, 167, 60, 248, 53, 180, 62, 247, 191, 252, 190, 151, 79, 8, 62, 231, 45, 85, 62, 87, 185, 214, 62, 103, 233, 180, 62, 36, 6, 167, 62, 5, 40, 24, 190, 250, 23, 100, 61, 131, 141, 171, 59, 229, 189, 165, 190, 68, 157, 87, 189, 106, 30, 96, 190, 42, 12, 15, 63, 40, 171, 39, 62, 139, 226, 15, 62, 155, 183, 17, 190, 217, 22, 173, 190, 187, 252, 113, 62, 209, 200, 252, 187, 105, 143, 14, 61, 118, 7, 180, 189, 96, 61, 186, 60, 227, 3, 200, 61, 150, 144, 181, 189, 215, 12, 16, 62, 222, 100, 76, 62, 135, 160, 144, 190, 103, 55, 60, 189, 250, 251, 152, 61, 209, 84, 239, 61, 96, 24, 4, 62, 114, 66, 36, 62, 184, 148, 18, 191, 227, 2, 183, 61, 188, 174, 105, 62, 41, 219, 227, 189, 112, 31, 177, 59, 163, 123, 43, 62, 127, 250, 214, 189, 233, 18, 46, 189, 183, 197, 55, 62, 219, 176, 217, 189, 206, 100, 100, 60, 164, 27, 129, 189, 127, 255, 165, 190, 199, 108, 38, 62, 162, 248, 2, 61, 118, 150, 172, 62, 34, 5, 39, 62, 130, 144, 28, 62, 169, 200, 94, 62, 171, 92, 171, 61, 123, 145, 207, 190, 106, 79, 61, 191, 253, 167, 119, 190, 155, 196, 61, 62, 17, 217, 67, 62, 179, 117, 202, 188, 122, 33, 183, 62, 251, 220, 51, 62, 86, 115, 251, 61, 165, 196, 64, 189, 85, 199, 74, 62, 122, 231, 183, 188, 50, 23, 7, 190, 212, 22, 80, 60, 116, 112, 153, 189, 67, 146, 145, 190, 50, 252, 173, 190, 192, 28, 137, 189, 189, 82, 234, 186, 200, 124, 137, 189, 58, 20, 42, 62, 185, 146, 46, 61, 121, 154, 110, 62, 49, 213, 135, 186, 22, 162, 139, 189, 56, 209, 41, 189, 55, 203, 17, 186, 149, 223, 32, 190, 154, 191, 167, 61, 64, 157, 16, 190, 150, 142, 34, 61, 125, 65, 81, 190, 219, 85, 36, 190, 10, 232, 7, 60, 64, 174, 235, 61, 120, 53, 47, 190, 165, 14, 169, 189, 253, 96, 60, 190, 240, 28, 65, 189, 226, 253, 178, 189, 43, 173, 244, 189, 79, 38, 178, 188, 153, 40, 171, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 36, 16, 171, 61, 26, 226, 254, 189, 89, 114, 180, 189, 9, 183, 55, 190, 249, 10, 0, 61, 190, 96, 74, 60, 104, 151, 240, 61, 182, 75, 74, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 46, 8, 134, 61, 35, 129, 3, 191, 239, 81, 191, 61, 177, 219, 200, 190, 134, 108, 18, 61, 176, 8, 157, 61, 97, 236, 158, 190, 52, 180, 10, 191, 177, 117, 1, 190, 17, 239, 168, 59, 10, 66, 138, 189, 67, 247, 146, 62, 72, 213, 137, 62, 158, 154, 118, 188, 96, 235, 236, 190, 122, 38, 194, 190, 125, 19, 56, 190, 7, 41, 101, 62, 213, 228, 24, 62, 131, 216, 12, 190, 245, 23, 243, 189, 101, 144, 163, 62, 154, 6, 86, 190, 225, 191, 230, 61, 19, 139, 78, 189, 110, 140, 89, 189, 175, 32, 163, 189, 145, 34, 201, 189, 124, 171, 120, 62, 44, 14, 168, 62, 151, 169, 183, 61, 178, 85, 25, 191, 101, 34, 2, 62, 102, 202, 87, 61, 227, 170, 179, 190, 56, 135, 54, 190, 151, 51, 65, 62, 185, 192, 194, 60, 215, 48, 162, 62, 26, 125, 143, 190, 53, 114, 14, 191, 34, 77, 28, 191, 28, 179, 38, 191, 215, 165, 182, 187, 89, 75, 59, 62, 147, 220, 186, 190, 71, 108, 192, 61, 199, 159, 150, 60, 57, 188, 50, 61, 58, 217, 116, 190, 62, 98, 175, 189, 210, 48, 255, 189, 160, 169, 169, 61, 115, 204, 41, 191, 49, 200, 44, 190, 122, 109, 17, 191, 202, 165, 50, 191, 100, 69, 18, 190, 250, 192, 199, 62, 139, 114, 194, 190, 110, 206, 178, 190, 137, 141, 130, 189, 90, 39, 189, 189, 8, 166, 106, 62, 36, 248, 38, 190, 99, 15, 90, 62, 248, 34, 151, 61, 156, 84, 138, 61, 56, 168, 116, 190, 92, 162, 36, 190, 42, 32, 168, 189, 131, 6, 24, 190, 237, 24, 143, 62, 85, 242, 152, 62, 6, 66, 24, 61, 118, 197, 181, 187, 145, 193, 124, 62, 230, 177, 221, 189, 58, 102, 51, 190, 162, 222, 221, 61, 254, 192, 56, 190, 3, 78, 78, 61, 112, 109, 16, 190, 24, 9, 50, 62, 203, 44, 163, 190, 29, 255, 109, 61, 142, 248, 9, 62, 156, 0, 228, 62, 199, 225, 88, 62, 197, 36, 11, 190, 176, 153, 208, 190, 32, 40, 133, 59, 177, 83, 108, 190, 55, 163, 24, 189, 87, 53, 247, 189, 146, 200, 219, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 53, 221, 37, 62, 26, 149, 136, 190, 54, 52, 187, 61, 43, 87, 111, 62, 127, 167, 252, 189, 28, 82, 166, 189, 41, 53, 138, 190, 204, 52, 17, 62, 5, 203, 28, 189, 249, 70, 42, 190, 56, 15, 54, 62, 123, 245, 86, 61, 161, 22, 114, 61, 107, 176, 13, 190, 199, 84, 8, 62, 74, 8, 119, 190, 129, 181, 73, 190, 169, 30, 188, 189, 120, 230, 114, 62, 9, 32, 232, 189, 96, 58, 98, 190, 251, 186, 152, 188, 207, 111, 203, 189, 6, 4, 203, 189, 40, 74, 144, 190, 29, 173, 63, 62, 123, 87, 135, 190, 203, 10, 114, 61, 96, 84, 137, 189, 173, 98, 246, 60, 165, 246, 195, 61, 48, 105, 185, 189, 97, 239, 10, 62, 164, 17, 223, 62, 8, 112, 155, 189, 50, 117, 112, 187, 224, 108, 61, 62, 79, 104, 23, 188, 185, 145, 89, 62, 160, 171, 126, 61, 102, 165, 194, 189, 45, 145, 143, 62, 132, 120, 177, 61, 236, 204, 218, 61, 45, 188, 4, 191, 19, 169, 239, 61, 14, 242, 26, 190, 220, 163, 98, 62, 255, 179, 65, 62, 69, 132, 49, 190, 180, 81, 153, 57, 81, 156, 194, 61, 173, 50, 185, 61, 171, 227, 155, 62, 248, 62, 190, 62, 19, 162, 217, 61, 110, 109, 163, 188, 63, 27, 0, 62, 121, 176, 78, 62, 68, 2, 86, 61, 226, 151, 136, 189, 203, 250, 220, 61, 155, 144, 173, 61, 36, 147, 114, 61, 169, 247, 135, 60, 194, 73, 32, 62, 217, 7, 111, 190, 255, 253, 207, 62, 47, 122, 163, 62, 147, 65, 201, 60, 141, 224, 134, 62, 145, 200, 155, 61, 183, 194, 180, 189, 99, 229, 19, 191, 226, 103, 149, 190, 250, 125, 140, 62, 253, 143, 218, 187, 164, 245, 148, 61, 39, 38, 183, 62, 210, 83, 252, 189, 235, 188, 101, 61, 28, 193, 10, 188, 135, 74, 140, 62, 16, 11, 194, 190, 216, 53, 142, 188, 240, 92, 131, 191, 23, 137, 155, 190, 191, 179, 5, 190, 85, 188, 202, 190, 13, 20, 170, 189, 151, 1, 77, 61, 148, 6, 139, 190, 153, 193, 135, 62, 130, 97, 5, 62, 2, 253, 53, 61, 182, 183, 72, 62, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 134, 222, 193, 187, 151, 117, 166, 61, 119, 76, 62, 189, 15, 148, 79, 189, 39, 118, 60, 191, 214, 144, 34, 62, 212, 145, 17, 61, 217, 6, 63, 190, 210, 50, 27, 189, 213, 26, 155, 188, 134, 135, 156, 189, 187, 50, 74, 191, 170, 231, 10, 62, 240, 160, 39, 62, 85, 101, 183, 190, 43, 129, 0, 61, 131, 36, 181, 190, 15, 171, 35, 61, 239, 125, 26, 190, 142, 119, 146, 62, 55, 43, 39, 191, 107, 183, 140, 189, 130, 149, 136, 61, 122, 69, 23, 190, 116, 83, 173, 190, 220, 244, 249, 60, 22, 227, 116, 62, 141, 31, 13, 190, 57, 147, 141, 191, 6, 49, 166, 191, 224, 156, 104, 191, 255, 51, 48, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 29, 183, 205, 62, 234, 91, 94, 190, 207, 177, 133, 62, 137, 80, 202, 190, 206, 141, 140, 191, 198, 112, 189, 60, 202, 1, 69, 61, 73, 61, 70, 190, 229, 228, 149, 62, 14, 190, 137, 62, 104, 111, 66, 62, 227, 104, 227, 190, 132, 59, 62, 190, 247, 215, 182, 62, 42, 48, 5, 191, 79, 216, 84, 62, 149, 44, 106, 189, 71, 201, 125, 62, 130, 225, 180, 189, 32, 167, 14, 62, 118, 18, 96, 191, 140, 5, 208, 61, 71, 147, 193, 62, 234, 153, 178, 62, 126, 35, 143, 62, 15, 140, 128, 62, 160, 26, 7, 61, 193, 123, 143, 62, 138, 86, 179, 190, 86, 160, 18, 191, 132, 106, 223, 188, 179, 180, 239, 189, 189, 249, 10, 60, 197, 38, 86, 190, 225, 177, 22, 61, 77, 230, 85, 190, 137, 143, 150, 191, 149, 148, 20, 62, 126, 220, 129, 62, 32, 172, 11, 189, 188, 242, 11, 189, 127, 110, 167, 190, 137, 235, 16, 62, 49, 33, 131, 191, 104, 126, 86, 61, 123, 57, 93, 188, 44, 71, 8, 191, 70, 119, 129, 60, 241, 136, 149, 190, 117, 222, 57, 62, 53, 128, 77, 190, 65, 128, 101, 62, 189, 7, 81, 191, 247, 208, 103, 62, 212, 165, 128, 62, 74, 243, 190, 189, 202, 205, 120, 190, 107, 91, 31, 189, 40, 216, 3, 62, 104, 30, 45, 189, 244, 183, 145, 191, 64, 77, 76, 191, 248, 134, 111, 191, 50, 156, 22, 190, 193, 114, 170, 188, 205, 152, 160, 61, 79, 143, 18, 190, 38, 63, 205, 61, 43, 225, 80, 60, 36, 44, 168, 189, 233, 132, 209, 60, 105, 128, 49, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 174, 95, 138, 186, 92, 246, 29, 190, 103, 214, 18, 189, 209, 184, 210, 189, 21, 39, 189, 61, 52, 244, 143, 189, 6, 50, 54, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 116, 108, 160, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 48, 29, 132, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 42, 148, 62, 229, 154, 22, 60, 167, 80, 132, 62, 9, 218, 110, 189, 227, 11, 128, 62, 212, 42, 158, 188, 208, 178, 233, 61, 37, 140, 188, 61, 37, 156, 242, 189, 113, 134, 187, 60, 26, 62, 231, 189, 252, 21, 96, 62, 145, 232, 156, 188, 119, 17, 135, 189, 54, 241, 184, 189, 23, 174, 151, 62, 224, 117, 103, 62, 215, 84, 221, 61, 68, 243, 135, 187, 60, 51, 38, 189, 66, 218, 187, 61, 80, 51, 146, 188, 106, 185, 50, 190, 101, 219, 222, 61, 136, 105, 35, 190, 156, 168, 119, 62, 159, 130, 181, 189, 182, 177, 196, 60, 198, 235, 52, 190, 254, 78, 10, 185, 112, 95, 243, 188, 238, 164, 119, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 148, 196, 62, 133, 142, 239, 60, 222, 250, 41, 191, 245, 126, 50, 191, 20, 130, 154, 62, 20, 129, 187, 190, 157, 5, 194, 190, 19, 78, 244, 62, 55, 236, 30, 62, 146, 15, 170, 191, 120, 183, 84, 62, 105, 180, 113, 62, 191, 112, 81, 62, 25, 135, 211, 61, 80, 197, 13, 191, 136, 140, 14, 61, 103, 222, 200, 62, 3, 150, 196, 61, 105, 214, 145, 61, 191, 251, 152, 190, 149, 229, 36, 63, 215, 83, 102, 62, 78, 149, 6, 190, 86, 34, 31, 62, 88, 21, 154, 190, 225, 140, 17, 63, 250, 123, 99, 61, 166, 86, 37, 191, 130, 166, 81, 188, 193, 145, 18, 191, 141, 34, 75, 191, 112, 104, 179, 188, 171, 215, 28, 191, 159, 200, 1, 190, 227, 47, 158, 61, 167, 138, 79, 61, 71, 213, 43, 190, 126, 89, 7, 190, 79, 83, 94, 61, 119, 219, 115, 62, 73, 245, 35, 188, 90, 241, 26, 60, 218, 238, 116, 62, 219, 80, 31, 190, 195, 109, 37, 62, 137, 171, 32, 61, 66, 110, 53, 62, 116, 136, 126, 190, 69, 233, 227, 61, 94, 161, 107, 60, 15, 242, 77, 189, 121, 49, 177, 59, 148, 15, 193, 60, 248, 44, 157, 189, 10, 104, 129, 187, 109, 194, 133, 62, 221, 165, 34, 61, 126, 248, 34, 62, 92, 1, 204, 188, 192, 29, 98, 62, 165, 130, 143, 189, 47, 210, 207, 189, 41, 239, 83, 189, 137, 49, 14, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 243, 101, 189, 183, 249, 224, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 211, 187, 191, 183, 0, 14, 61, 30, 48, 94, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 149, 12, 64, 47, 22, 249, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}