// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 86, 96, 63, 3, 224, 6, 63, 57, 20, 47, 189, 136, 213, 98, 190, 175, 0, 236, 62, 40, 5, 221, 190, 44, 41, 253, 62, 213, 21, 61, 191, 239, 194, 208, 62, 17, 151, 252, 62, 98, 143, 187, 191, 174, 144, 134, 190, 162, 103, 72, 191, 0, 247, 245, 189, 135, 94, 215, 62, 15, 77, 145, 190, 153, 24, 191, 61, 137, 181, 73, 60, 14, 212, 50, 60, 2, 3, 226, 63, 206, 149, 197, 62, 135, 110, 211, 62, 129, 56, 157, 191, 4, 114, 163, 190, 12, 106, 25, 63, 231, 201, 150, 62, 199, 78, 215, 62, 92, 62, 88, 63, 97, 101, 80, 63, 84, 177, 135, 62, 61, 30, 167, 62, 34, 153, 20, 191, 182, 24, 8, 63, 141, 114, 53, 190, 90, 223, 242, 190, 191, 170, 165, 62, 69, 28, 34, 191, 150, 52, 150, 191, 235, 80, 154, 190, 13, 84, 58, 63, 57, 192, 64, 63, 89, 102, 30, 62, 255, 145, 73, 63, 174, 99, 125, 191, 46, 49, 130, 190, 70, 2, 11, 63, 102, 216, 196, 63, 219, 222, 213, 62, 118, 43, 79, 61, 187, 165, 237, 63, 108, 125, 1, 63, 157, 85, 103, 60, 105, 2, 139, 190, 238, 173, 2, 190, 216, 167, 227, 190, 251, 0, 5, 191, 21, 127, 110, 62, 227, 184, 239, 190, 43, 247, 46, 63, 119, 89, 249, 190, 143, 36, 236, 62, 108, 97, 148, 190, 161, 37, 26, 190, 111, 43, 247, 190, 104, 149, 124, 191, 204, 206, 217, 190, 119, 244, 216, 62, 76, 14, 90, 63, 177, 255, 106, 190, 37, 42, 5, 63, 179, 53, 55, 62, 62, 14, 196, 62, 36, 175, 229, 62, 59, 203, 52, 63, 189, 117, 160, 62, 92, 86, 42, 63, 212, 121, 130, 191, 139, 1, 104, 62, 195, 125, 95, 191, 60, 27, 124, 63, 77, 7, 79, 61, 83, 93, 8, 61, 98, 129, 59, 191, 167, 127, 186, 62, 163, 178, 9, 189, 81, 114, 12, 191, 79, 80, 186, 62, 43, 114, 20, 191, 23, 134, 5, 191, 139, 93, 1, 63, 211, 119, 97, 62, 76, 92, 182, 190, 215, 128, 8, 63, 54, 223, 216, 61, 26, 135, 193, 190, 212, 190, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 158, 219, 190, 199, 204, 140, 190, 129, 171, 232, 190, 7, 180, 219, 189, 247, 36, 218, 190, 104, 122, 179, 62, 11, 106, 26, 62, 245, 222, 208, 62, 159, 124, 142, 190, 96, 38, 197, 190, 66, 176, 133, 190, 221, 206, 155, 62, 110, 42, 41, 63, 126, 122, 41, 63, 234, 91, 201, 190, 74, 100, 245, 62, 238, 141, 6, 190, 236, 213, 9, 63, 137, 115, 8, 63, 135, 242, 192, 62, 51, 70, 32, 191, 104, 110, 151, 190, 188, 230, 243, 62, 214, 225, 81, 190, 205, 119, 15, 190, 172, 123, 165, 190, 165, 183, 168, 190, 198, 187, 134, 60, 66, 32, 231, 62, 49, 127, 231, 189, 41, 23, 4, 63, 68, 103, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 26, 138, 62, 216, 92, 151, 60, 49, 50, 239, 61, 188, 112, 148, 189, 221, 119, 11, 61, 102, 40, 220, 61, 251, 215, 13, 192, 30, 50, 15, 62, 79, 35, 11, 190, 27, 194, 51, 191, 10, 151, 20, 62, 56, 185, 67, 61, 113, 178, 52, 61, 125, 130, 181, 62, 254, 177, 185, 189, 249, 69, 160, 61, 103, 88, 180, 190, 141, 177, 155, 62, 25, 127, 111, 62, 174, 0, 209, 60, 233, 127, 190, 190, 245, 163, 137, 61, 230, 182, 50, 62, 196, 184, 71, 61, 22, 231, 131, 190, 17, 5, 89, 62, 127, 79, 181, 190, 159, 174, 75, 62, 240, 103, 75, 62, 103, 55, 156, 189, 33, 162, 134, 62, 33, 101, 66, 188, 120, 227, 134, 62, 91, 52, 227, 189, 204, 76, 74, 190, 128, 132, 185, 189, 178, 80, 20, 62, 235, 8, 173, 62, 10, 93, 227, 58, 208, 80, 255, 188, 52, 1, 120, 61, 245, 116, 88, 188, 205, 132, 203, 61, 90, 70, 16, 190, 218, 150, 91, 61, 25, 220, 65, 62, 53, 132, 187, 190, 120, 124, 59, 62, 89, 37, 107, 189, 245, 7, 61, 60, 31, 44, 180, 189, 66, 69, 228, 61, 91, 200, 44, 190, 47, 28, 40, 61, 7, 40, 63, 62, 229, 178, 111, 189, 33, 139, 18, 189, 169, 81, 10, 191, 61, 157, 2, 62, 213, 219, 221, 189, 81, 224, 7, 61, 202, 216, 218, 61, 152, 119, 7, 189, 55, 84, 130, 189, 149, 94, 4, 191, 66, 60, 226, 61, 76, 229, 240, 60, 56, 14, 188, 62, 121, 88, 197, 189, 221, 95, 65, 189, 196, 64, 128, 189, 221, 75, 126, 62, 47, 82, 232, 190, 68, 248, 51, 191, 94, 165, 108, 190, 80, 68, 120, 62, 24, 149, 238, 62, 245, 180, 138, 191, 185, 223, 56, 63, 26, 39, 1, 192, 233, 236, 151, 191, 195, 182, 26, 62, 173, 170, 134, 62, 80, 40, 79, 190, 10, 5, 19, 63, 157, 243, 130, 62, 50, 103, 140, 189, 43, 148, 74, 190, 68, 126, 52, 191, 152, 164, 226, 62, 107, 99, 40, 190, 74, 55, 45, 62, 79, 168, 167, 62, 180, 145, 142, 62, 91, 38, 226, 60, 163, 226, 7, 190, 198, 208, 69, 190, 54, 93, 165, 190, 247, 39, 228, 189, 150, 70, 227, 189, 11, 134, 87, 191, 91, 16, 35, 62, 181, 149, 71, 61, 50, 182, 180, 189, 225, 17, 129, 61, 54, 75, 81, 60, 137, 68, 50, 61, 116, 17, 25, 191, 52, 137, 60, 61, 78, 244, 170, 190, 73, 24, 158, 189, 51, 108, 132, 61, 230, 138, 64, 190, 93, 117, 6, 189, 36, 250, 89, 62, 134, 224, 198, 189, 188, 251, 133, 190, 194, 131, 45, 62, 121, 37, 132, 190, 55, 26, 169, 189, 206, 131, 6, 188, 130, 33, 34, 190, 6, 158, 45, 62, 217, 203, 178, 61, 88, 20, 85, 191, 66, 169, 73, 191, 169, 177, 64, 191, 202, 87, 125, 190, 238, 108, 112, 189, 35, 163, 79, 62, 150, 31, 77, 189, 248, 248, 199, 189, 108, 156, 209, 61, 81, 154, 66, 62, 228, 80, 151, 188, 165, 24, 244, 61, 2, 120, 62, 190, 138, 130, 3, 190, 245, 240, 32, 61, 97, 52, 230, 186, 59, 16, 224, 61, 152, 158, 101, 62, 77, 43, 128, 62, 3, 84, 217, 61, 190, 226, 17, 62, 97, 89, 91, 61, 103, 241, 112, 62, 47, 26, 41, 190, 96, 82, 34, 190, 121, 46, 205, 190, 73, 2, 201, 61, 111, 156, 89, 190, 236, 3, 41, 190, 41, 108, 172, 188, 215, 34, 111, 62, 188, 61, 14, 189, 108, 132, 45, 62, 9, 48, 127, 61, 60, 236, 131, 61, 153, 50, 32, 62, 223, 152, 9, 63, 156, 113, 247, 189, 22, 167, 160, 62, 145, 109, 216, 190, 20, 96, 208, 190, 103, 254, 132, 189, 160, 154, 95, 61, 47, 13, 173, 61, 1, 11, 29, 62, 247, 63, 98, 62, 17, 95, 232, 61, 202, 72, 162, 189, 103, 183, 22, 191, 57, 93, 146, 62, 98, 240, 202, 190, 195, 208, 77, 62, 119, 155, 48, 190, 152, 4, 194, 189, 173, 244, 138, 189, 32, 34, 65, 62, 119, 71, 12, 191, 176, 104, 44, 62, 99, 242, 144, 62, 64, 126, 87, 62, 243, 139, 66, 62, 43, 97, 193, 61, 111, 248, 73, 191, 164, 200, 88, 62, 127, 54, 174, 189, 158, 254, 5, 189, 178, 0, 173, 61, 217, 41, 193, 189, 218, 155, 110, 62, 129, 200, 161, 59, 107, 246, 16, 62, 185, 204, 142, 190, 198, 122, 100, 191, 178, 4, 29, 61, 100, 93, 157, 62, 100, 205, 190, 61, 116, 70, 247, 61, 138, 249, 148, 62, 156, 1, 192, 62, 155, 33, 36, 190, 93, 127, 49, 190, 142, 103, 42, 62, 87, 128, 234, 190, 156, 169, 171, 62, 35, 102, 168, 190, 99, 106, 164, 189, 53, 89, 25, 62, 165, 128, 182, 61, 59, 207, 64, 191, 97, 208, 132, 189, 255, 141, 106, 62, 24, 142, 162, 62, 69, 93, 148, 62, 196, 147, 241, 62, 216, 132, 247, 61, 92, 147, 169, 62, 57, 42, 197, 190, 180, 69, 77, 191, 85, 91, 17, 190, 65, 208, 44, 190, 180, 210, 153, 62, 132, 48, 130, 189, 202, 191, 19, 62, 180, 140, 55, 190, 83, 155, 230, 189, 68, 179, 2, 190, 183, 206, 149, 189, 52, 11, 238, 190, 118, 143, 194, 60, 108, 85, 250, 62, 168, 37, 142, 189, 252, 44, 138, 190, 167, 22, 78, 191, 126, 47, 14, 62, 218, 87, 56, 190, 229, 54, 162, 62, 64, 127, 52, 62, 80, 93, 30, 190, 49, 50, 201, 190, 96, 63, 162, 60, 153, 160, 3, 191, 207, 86, 175, 190, 212, 87, 207, 62, 181, 192, 135, 62, 164, 144, 129, 62, 204, 221, 203, 62, 134, 110, 163, 190, 156, 73, 16, 190, 231, 158, 40, 190, 85, 158, 134, 61, 36, 64, 175, 189, 58, 128, 197, 190, 254, 205, 4, 190, 156, 62, 196, 189, 235, 124, 12, 62, 123, 134, 48, 189, 245, 188, 218, 188, 63, 33, 240, 189, 224, 90, 59, 60, 240, 198, 31, 190, 199, 57, 243, 189, 237, 69, 246, 61, 200, 67, 15, 62, 83, 53, 136, 189, 157, 246, 247, 61, 61, 76, 4, 190, 75, 226, 220, 61, 37, 9, 5, 189, 27, 244, 156, 59, 133, 36, 247, 189, 15, 228, 231, 189, 17, 206, 13, 62, 49, 65, 149, 189, 210, 29, 1, 61, 151, 51, 5, 190, 123, 25, 193, 187, 83, 105, 66, 189, 101, 235, 217, 189, 157, 24, 190, 189, 3, 86, 30, 190, 230, 191, 40, 190, 249, 100, 17, 61, 253, 247, 23, 62, 57, 72, 117, 189, 45, 222, 135, 190, 181, 46, 135, 189, 145, 226, 18, 190, 69, 108, 72, 190, 40, 204, 242, 190, 45, 50, 60, 62, 111, 124, 123, 190, 54, 99, 170, 59, 215, 11, 54, 190, 58, 112, 57, 190, 170, 164, 209, 61, 154, 91, 232, 60, 94, 111, 255, 62, 25, 120, 196, 191, 36, 79, 6, 191, 239, 153, 185, 191, 125, 210, 205, 191, 12, 57, 27, 62, 246, 211, 97, 62, 27, 123, 7, 62, 184, 238, 158, 191, 45, 77, 241, 62, 145, 210, 82, 190, 253, 200, 19, 189, 76, 40, 123, 61, 140, 177, 193, 61, 208, 23, 235, 61, 226, 0, 86, 62, 69, 226, 176, 61, 118, 120, 90, 189, 147, 146, 160, 190, 235, 251, 159, 189, 164, 220, 160, 62, 43, 23, 201, 60, 242, 116, 25, 62, 148, 150, 40, 190, 185, 121, 180, 59, 181, 191, 60, 61, 77, 10, 161, 62, 245, 74, 235, 189, 108, 60, 152, 62, 179, 68, 152, 62, 15, 91, 242, 60, 143, 233, 24, 190, 89, 43, 125, 60, 100, 168, 55, 190, 197, 240, 78, 190, 56, 125, 54, 62, 149, 176, 160, 61, 146, 247, 247, 60, 20, 14, 210, 189, 41, 151, 164, 62, 240, 137, 21, 63, 104, 84, 105, 62, 251, 241, 246, 61, 185, 168, 44, 62, 139, 228, 135, 62, 130, 180, 186, 190, 75, 5, 53, 62, 59, 56, 51, 61, 12, 45, 134, 190, 19, 204, 224, 188, 230, 250, 118, 190, 78, 153, 170, 60, 88, 135, 94, 189, 68, 9, 173, 188, 13, 52, 210, 60, 222, 171, 82, 62, 151, 249, 152, 62, 151, 184, 133, 62, 122, 96, 4, 62, 121, 186, 46, 62, 59, 130, 230, 61, 106, 185, 223, 189, 226, 22, 103, 58, 73, 63, 80, 62, 180, 48, 118, 62, 238, 145, 58, 62, 57, 65, 42, 62, 98, 219, 230, 61, 96, 174, 32, 189, 102, 80, 19, 62, 120, 29, 2, 62, 45, 95, 109, 62, 63, 130, 222, 189, 249, 121, 134, 190, 89, 213, 129, 189, 60, 3, 204, 189, 234, 101, 81, 189, 113, 187, 142, 190, 172, 228, 164, 62, 69, 136, 61, 190, 115, 115, 178, 188, 250, 97, 101, 62, 75, 160, 125, 188, 135, 121, 174, 61, 234, 124, 122, 61, 175, 6, 156, 61, 90, 167, 10, 63, 102, 237, 14, 62, 8, 228, 235, 189, 40, 88, 35, 61, 22, 196, 101, 190, 112, 143, 116, 62, 42, 156, 142, 60, 238, 248, 120, 191, 100, 118, 199, 190, 7, 211, 156, 189, 212, 192, 41, 62, 95, 48, 128, 189, 150, 74, 70, 62, 55, 46, 72, 190, 234, 208, 184, 61, 142, 61, 155, 61, 73, 0, 128, 62, 205, 95, 196, 61, 219, 121, 229, 62, 122, 135, 138, 61, 250, 154, 129, 190, 223, 0, 195, 189, 214, 226, 38, 191, 245, 158, 69, 62, 199, 63, 134, 61, 254, 107, 9, 191, 23, 159, 211, 188, 158, 37, 187, 190, 63, 248, 75, 61, 42, 104, 136, 60, 225, 28, 216, 188, 100, 62, 62, 190, 175, 220, 233, 58, 142, 18, 143, 61, 54, 32, 244, 60, 137, 180, 131, 190, 155, 8, 202, 189, 103, 173, 51, 189, 93, 183, 37, 61, 45, 3, 44, 190, 31, 110, 111, 190, 108, 3, 135, 190, 25, 204, 69, 190, 192, 118, 14, 61, 81, 195, 105, 189, 216, 126, 112, 190, 24, 168, 65, 61, 228, 147, 13, 188, 98, 91, 29, 61, 116, 141, 100, 61, 56, 169, 192, 189, 147, 199, 46, 190, 138, 131, 97, 189, 8, 211, 170, 61, 79, 148, 169, 61, 87, 85, 69, 61, 73, 191, 161, 189, 172, 99, 107, 61, 9, 178, 119, 189, 133, 249, 144, 61, 72, 125, 175, 189, 117, 57, 242, 60, 85, 62, 80, 62, 79, 19, 158, 190, 0, 82, 196, 62, 119, 143, 225, 190, 100, 69, 196, 190, 241, 66, 35, 190, 129, 77, 95, 61, 13, 88, 44, 61, 123, 131, 81, 62, 8, 135, 28, 63, 137, 16, 204, 62, 70, 93, 99, 190, 143, 47, 16, 191, 60, 121, 6, 62, 48, 169, 160, 190, 209, 185, 104, 61, 231, 150, 28, 189, 62, 147, 196, 61, 246, 194, 236, 60, 106, 251, 181, 62, 166, 102, 31, 191, 212, 155, 255, 189, 135, 179, 145, 62, 42, 60, 223, 62, 73, 184, 173, 62, 91, 216, 187, 62, 188, 196, 1, 191, 100, 99, 161, 61, 221, 128, 173, 60, 71, 168, 154, 190, 52, 200, 10, 189, 133, 247, 20, 190, 238, 168, 13, 63, 115, 194, 229, 61, 176, 37, 91, 61, 176, 247, 93, 190, 215, 233, 130, 190, 105, 201, 150, 62, 249, 145, 46, 189, 158, 26, 19, 189, 175, 81, 49, 189, 33, 19, 242, 60, 240, 149, 216, 61, 62, 174, 150, 189, 75, 235, 47, 62, 27, 26, 24, 62, 101, 210, 160, 190, 191, 72, 64, 189, 54, 186, 223, 61, 21, 37, 76, 61, 241, 0, 26, 62, 17, 233, 37, 62, 112, 39, 232, 190, 57, 52, 195, 60, 93, 114, 57, 62, 14, 239, 158, 189, 129, 253, 210, 61, 152, 225, 235, 187, 63, 136, 191, 61, 73, 235, 45, 61, 204, 145, 25, 62, 214, 104, 136, 59, 54, 124, 111, 188, 165, 150, 131, 189, 26, 141, 79, 190, 222, 46, 31, 62, 204, 235, 157, 188, 104, 251, 180, 62, 170, 36, 227, 61, 6, 225, 116, 62, 154, 228, 247, 61, 165, 241, 2, 62, 244, 222, 205, 190, 9, 122, 75, 191, 140, 157, 141, 190, 80, 153, 28, 62, 125, 228, 151, 62, 98, 99, 53, 61, 107, 138, 179, 62, 246, 4, 98, 62, 255, 171, 31, 62, 197, 23, 196, 59, 222, 213, 66, 62, 9, 218, 214, 60, 91, 114, 106, 61, 129, 232, 80, 61, 223, 67, 163, 59, 126, 84, 139, 190, 5, 139, 150, 190, 197, 137, 27, 190, 26, 235, 142, 62, 0, 95, 184, 189, 4, 65, 22, 62, 155, 191, 28, 61, 81, 191, 103, 62, 237, 100, 248, 187, 22, 162, 139, 189, 56, 209, 41, 189, 26, 231, 151, 187, 149, 223, 32, 190, 141, 54, 151, 61, 18, 220, 19, 190, 218, 91, 34, 61, 125, 65, 81, 190, 14, 29, 37, 190, 10, 232, 7, 60, 90, 49, 222, 61, 214, 233, 56, 190, 86, 19, 186, 189, 71, 203, 61, 190, 240, 28, 65, 189, 249, 56, 180, 189, 42, 235, 246, 189, 163, 48, 188, 188, 49, 139, 192, 189, 238, 206, 12, 61, 56, 160, 22, 190, 121, 77, 11, 62, 11, 205, 138, 61, 159, 50, 168, 61, 26, 226, 254, 189, 190, 234, 182, 189, 9, 183, 55, 190, 229, 138, 188, 60, 211, 154, 9, 59, 44, 239, 215, 61, 199, 64, 30, 61, 62, 249, 229, 189, 209, 107, 22, 190, 110, 253, 39, 61, 80, 252, 45, 61, 36, 147, 182, 188, 98, 179, 210, 189, 103, 40, 108, 190, 101, 11, 213, 61, 130, 244, 18, 190, 160, 49, 175, 61, 209, 75, 130, 61, 74, 40, 13, 62, 60, 244, 64, 61, 9, 169, 34, 190, 58, 178, 72, 189, 138, 54, 245, 61, 247, 130, 72, 187, 154, 199, 165, 188, 163, 169, 101, 189, 57, 18, 209, 189, 120, 71, 221, 189, 228, 11, 211, 189, 77, 221, 31, 190, 39, 90, 118, 60, 106, 138, 60, 190, 253, 145, 197, 61, 227, 26, 175, 189, 67, 236, 117, 61, 216, 69, 19, 190, 180, 43, 140, 60, 120, 125, 174, 61, 160, 159, 98, 190, 171, 96, 178, 61, 143, 112, 113, 62, 106, 208, 134, 190, 38, 164, 39, 62, 46, 223, 98, 191, 240, 71, 174, 60, 106, 137, 78, 60, 222, 36, 255, 190, 83, 110, 149, 191, 199, 177, 68, 189, 125, 171, 153, 62, 139, 99, 67, 189, 189, 166, 155, 62, 178, 111, 12, 190, 82, 238, 135, 61, 240, 169, 7, 191, 80, 105, 190, 190, 209, 43, 101, 190, 144, 160, 9, 62, 107, 244, 28, 62, 7, 53, 172, 188, 245, 23, 243, 189, 19, 120, 194, 61, 35, 105, 6, 189, 249, 163, 58, 62, 228, 90, 60, 60, 199, 254, 53, 62, 137, 155, 9, 191, 87, 35, 207, 189, 118, 25, 138, 62, 91, 45, 167, 62, 49, 111, 4, 62, 86, 206, 84, 191, 17, 56, 250, 61, 227, 253, 241, 189, 227, 170, 179, 190, 56, 135, 54, 190, 183, 156, 56, 62, 193, 253, 173, 61, 16, 24, 172, 62, 6, 39, 146, 190, 140, 244, 10, 191, 231, 195, 50, 191, 4, 17, 28, 191, 214, 163, 140, 61, 86, 185, 124, 62, 254, 102, 242, 190, 71, 108, 192, 61, 122, 78, 114, 188, 20, 204, 247, 60, 230, 252, 91, 190, 197, 8, 164, 61, 236, 39, 7, 190, 160, 169, 169, 61, 148, 235, 118, 191, 151, 228, 129, 190, 3, 104, 14, 191, 145, 166, 114, 191, 100, 69, 18, 190, 167, 53, 227, 62, 240, 179, 198, 190, 84, 22, 148, 190, 104, 93, 64, 189, 26, 29, 85, 190, 42, 247, 195, 190, 48, 236, 159, 189, 157, 181, 77, 62, 197, 153, 7, 62, 42, 240, 35, 61, 176, 143, 18, 190, 168, 37, 33, 188, 240, 46, 22, 190, 62, 206, 29, 190, 228, 231, 135, 62, 141, 27, 136, 62, 247, 197, 207, 61, 180, 68, 0, 189, 129, 26, 208, 62, 69, 68, 41, 190, 98, 40, 83, 190, 180, 10, 70, 189, 134, 142, 169, 189, 36, 10, 202, 61, 129, 190, 137, 189, 120, 159, 131, 62, 255, 139, 90, 190, 122, 80, 201, 61, 243, 136, 29, 62, 60, 85, 217, 62, 207, 67, 75, 62, 107, 169, 74, 190, 59, 230, 5, 191, 10, 208, 181, 61, 255, 158, 170, 190, 37, 189, 63, 61, 39, 113, 111, 190, 31, 1, 216, 61, 202, 79, 125, 60, 201, 149, 38, 188, 62, 57, 245, 189, 65, 63, 72, 188, 128, 188, 38, 187, 223, 0, 162, 60, 3, 235, 1, 61, 215, 246, 142, 189, 46, 163, 27, 190, 64, 75, 137, 189, 13, 59, 135, 61, 183, 232, 225, 188, 241, 189, 207, 60, 152, 159, 50, 190, 44, 34, 198, 189, 178, 236, 136, 58, 66, 107, 246, 189, 129, 167, 158, 61, 122, 175, 8, 190, 227, 7, 9, 190, 223, 179, 20, 190, 9, 47, 184, 189, 69, 107, 145, 189, 106, 72, 20, 190, 224, 43, 168, 61, 41, 165, 42, 190, 127, 217, 20, 61, 168, 42, 46, 190, 187, 238, 7, 190, 112, 46, 26, 190, 17, 13, 18, 62, 64, 212, 102, 61, 190, 198, 36, 61, 156, 185, 113, 190, 147, 78, 53, 62, 81, 245, 38, 62, 161, 124, 223, 189, 132, 159, 214, 189, 62, 9, 60, 191, 223, 0, 212, 61, 129, 141, 17, 190, 162, 45, 136, 191, 6, 184, 148, 62, 229, 103, 2, 62, 150, 199, 93, 61, 166, 219, 201, 189, 139, 241, 163, 61, 211, 27, 243, 190, 246, 186, 189, 190, 93, 157, 45, 190, 117, 127, 161, 62, 168, 188, 63, 190, 235, 137, 146, 62, 243, 225, 28, 191, 57, 92, 109, 60, 55, 233, 38, 190, 0, 214, 18, 191, 107, 236, 132, 62, 98, 142, 49, 191, 240, 75, 61, 62, 185, 26, 5, 60, 61, 127, 16, 62, 140, 165, 25, 62, 182, 137, 62, 190, 101, 0, 160, 60, 160, 52, 0, 63, 115, 143, 150, 189, 24, 45, 254, 59, 96, 126, 43, 62, 77, 72, 1, 189, 223, 253, 189, 62, 89, 249, 158, 61, 195, 138, 244, 189, 104, 198, 157, 62, 148, 175, 159, 61, 8, 19, 179, 61, 150, 242, 21, 191, 183, 42, 192, 61, 191, 68, 9, 190, 33, 26, 108, 62, 210, 135, 59, 62, 35, 162, 46, 190, 192, 193, 23, 189, 45, 10, 25, 62, 236, 217, 41, 62, 27, 114, 218, 62, 219, 237, 173, 62, 199, 70, 159, 61, 72, 205, 146, 189, 172, 193, 23, 62, 115, 226, 133, 60, 35, 95, 142, 60, 253, 73, 185, 189, 111, 30, 100, 61, 45, 86, 135, 61, 84, 98, 20, 62, 61, 150, 178, 61, 234, 64, 63, 62, 16, 249, 134, 190, 167, 138, 202, 62, 97, 163, 147, 62, 206, 132, 119, 60, 151, 162, 62, 62, 187, 180, 171, 61, 17, 107, 96, 189, 149, 119, 29, 191, 46, 97, 156, 190, 49, 117, 131, 62, 123, 20, 23, 189, 9, 251, 10, 62, 11, 122, 185, 62, 130, 80, 144, 189, 229, 103, 135, 61, 164, 145, 34, 188, 99, 131, 128, 62, 207, 85, 199, 190, 191, 18, 12, 63, 130, 214, 163, 191, 29, 174, 109, 190, 225, 204, 182, 189, 99, 38, 172, 190, 71, 165, 29, 190, 133, 109, 224, 62, 42, 194, 143, 190, 98, 221, 133, 62, 128, 196, 21, 62, 183, 219, 111, 61, 232, 182, 228, 61, 172, 63, 224, 61, 214, 85, 40, 62, 61, 39, 92, 188, 169, 254, 170, 61, 194, 7, 185, 60, 49, 43, 216, 189, 237, 205, 36, 62, 205, 57, 35, 190, 190, 86, 177, 189, 184, 100, 231, 189, 223, 104, 32, 60, 65, 84, 24, 62, 213, 39, 16, 190, 108, 248, 182, 61, 96, 166, 52, 60, 67, 217, 43, 61, 71, 48, 230, 189, 119, 132, 13, 61, 181, 50, 10, 190, 36, 110, 52, 189, 134, 3, 162, 60, 4, 79, 80, 61, 6, 79, 34, 190, 149, 142, 34, 61, 144, 76, 15, 190, 61, 208, 200, 189, 174, 18, 157, 189, 29, 215, 47, 190, 172, 74, 209, 188, 168, 182, 52, 190, 148, 32, 219, 189, 65, 111, 221, 189, 198, 75, 44, 190, 46, 90, 21, 61, 119, 76, 62, 189, 136, 66, 60, 190, 43, 234, 57, 191, 216, 39, 110, 61, 105, 151, 164, 60, 188, 99, 134, 190, 7, 65, 117, 190, 124, 229, 232, 190, 134, 135, 156, 189, 116, 8, 46, 191, 168, 24, 39, 188, 0, 165, 119, 61, 170, 36, 28, 191, 121, 52, 204, 189, 50, 136, 24, 191, 88, 69, 142, 189, 243, 234, 146, 190, 80, 95, 84, 62, 243, 1, 137, 191, 140, 169, 33, 190, 14, 212, 85, 188, 166, 64, 137, 190, 201, 167, 100, 191, 220, 244, 249, 60, 78, 89, 150, 62, 68, 93, 7, 190, 61, 204, 119, 191, 95, 38, 161, 191, 76, 214, 13, 191, 228, 219, 115, 190, 56, 4, 190, 60, 130, 122, 255, 189, 234, 11, 197, 188, 98, 237, 31, 190, 75, 90, 245, 189, 167, 105, 52, 188, 138, 7, 38, 190, 229, 50, 9, 62, 42, 252, 151, 61, 148, 99, 132, 189, 171, 127, 97, 60, 96, 35, 198, 61, 166, 217, 25, 61, 65, 233, 32, 190, 171, 56, 158, 187, 126, 13, 40, 62, 115, 1, 36, 190, 35, 113, 238, 61, 209, 67, 9, 190, 40, 193, 201, 189, 236, 8, 136, 188, 29, 184, 15, 190, 92, 181, 5, 61, 221, 215, 148, 189, 167, 176, 30, 61, 14, 185, 198, 189, 192, 150, 233, 61, 105, 111, 24, 188, 239, 12, 205, 189, 96, 8, 34, 62, 207, 158, 232, 60, 139, 42, 56, 189, 9, 145, 194, 62, 118, 19, 145, 190, 65, 216, 150, 62, 87, 11, 214, 190, 7, 162, 160, 191, 199, 23, 15, 62, 203, 20, 143, 62, 115, 16, 72, 190, 72, 145, 145, 62, 140, 204, 128, 62, 39, 170, 155, 62, 98, 27, 184, 190, 86, 207, 31, 190, 152, 99, 205, 62, 113, 136, 3, 191, 132, 186, 124, 62, 110, 9, 35, 190, 240, 64, 129, 62, 67, 108, 210, 60, 225, 194, 194, 61, 147, 210, 145, 191, 219, 175, 7, 190, 40, 247, 194, 62, 2, 94, 175, 62, 12, 187, 108, 62, 162, 250, 129, 62, 227, 181, 170, 61, 123, 59, 152, 62, 225, 15, 152, 190, 117, 246, 40, 191, 166, 145, 149, 60, 180, 47, 20, 190, 78, 172, 15, 188, 124, 175, 130, 190, 231, 145, 252, 61, 64, 199, 97, 190, 232, 41, 110, 191, 192, 90, 141, 62, 146, 113, 32, 63, 212, 13, 12, 188, 106, 171, 25, 62, 131, 163, 142, 190, 68, 99, 52, 61, 110, 205, 17, 191, 98, 98, 171, 60, 196, 205, 76, 62, 102, 123, 15, 191, 83, 129, 175, 62, 47, 195, 147, 190, 18, 114, 83, 62, 171, 148, 110, 61, 197, 217, 77, 62, 173, 189, 183, 191, 205, 199, 188, 61, 188, 193, 138, 62, 118, 215, 22, 62, 67, 213, 42, 190, 211, 193, 242, 187, 110, 59, 193, 62, 161, 57, 116, 187, 99, 50, 219, 190, 93, 131, 253, 190, 38, 154, 211, 190, 248, 11, 46, 190, 193, 114, 170, 188, 205, 152, 160, 61, 79, 143, 18, 190, 38, 63, 205, 61, 43, 225, 80, 60, 36, 44, 168, 189, 233, 132, 209, 60, 105, 128, 49, 190, 138, 152, 225, 189, 211, 63, 149, 61, 138, 125, 197, 189, 218, 37, 60, 190, 174, 95, 138, 186, 92, 246, 29, 190, 103, 214, 18, 189, 209, 184, 210, 189, 21, 39, 189, 61, 52, 244, 143, 189, 6, 50, 54, 190, 226, 74, 73, 61, 114, 198, 138, 189, 86, 92, 141, 189, 116, 108, 160, 189, 188, 61, 173, 61, 21, 117, 246, 61, 219, 140, 104, 59, 48, 29, 132, 61, 78, 230, 7, 187, 235, 75, 139, 61, 161, 192, 35, 61, 245, 239, 128, 189, 145, 240, 81, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 34, 191, 62, 74, 226, 41, 189, 245, 234, 120, 62, 9, 218, 110, 189, 124, 147, 149, 62, 226, 173, 1, 189, 87, 213, 29, 62, 28, 49, 61, 62, 155, 92, 2, 190, 143, 11, 181, 60, 147, 118, 116, 190, 234, 19, 135, 62, 243, 221, 113, 186, 31, 216, 192, 189, 81, 137, 156, 189, 103, 220, 152, 62, 248, 118, 156, 62, 255, 151, 208, 61, 68, 243, 135, 187, 201, 14, 131, 188, 203, 16, 9, 62, 113, 26, 95, 60, 106, 185, 50, 190, 74, 183, 20, 62, 157, 107, 76, 190, 99, 132, 148, 62, 159, 130, 181, 189, 120, 163, 202, 189, 198, 235, 52, 190, 109, 19, 72, 61, 226, 223, 21, 62, 238, 164, 119, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 150, 22, 63, 180, 239, 101, 61, 130, 6, 130, 191, 245, 126, 50, 191, 134, 202, 86, 62, 199, 95, 187, 190, 214, 220, 160, 190, 131, 147, 84, 63, 150, 5, 28, 62, 45, 69, 160, 191, 65, 189, 167, 62, 79, 92, 71, 62, 166, 74, 133, 62, 19, 5, 99, 61, 134, 70, 19, 191, 246, 151, 88, 61, 63, 211, 177, 62, 245, 135, 192, 61, 105, 214, 145, 61, 21, 126, 201, 190, 47, 217, 139, 63, 173, 82, 136, 62, 78, 149, 6, 190, 223, 237, 84, 63, 24, 214, 137, 190, 215, 95, 238, 62, 250, 123, 99, 61, 77, 160, 36, 191, 130, 166, 81, 188, 41, 233, 17, 191, 108, 123, 100, 191, 112, 104, 179, 188, 128, 53, 234, 190, 4, 234, 25, 190, 41, 42, 153, 189, 167, 138, 79, 61, 114, 131, 65, 190, 144, 204, 131, 190, 228, 145, 253, 189, 126, 64, 0, 63, 174, 189, 43, 188, 73, 207, 178, 62, 255, 135, 61, 62, 211, 246, 105, 190, 50, 12, 235, 61, 242, 161, 54, 61, 242, 29, 245, 61, 181, 0, 232, 189, 253, 163, 176, 61, 61, 113, 121, 60, 15, 242, 77, 189, 20, 247, 183, 189, 114, 74, 1, 62, 215, 50, 221, 188, 10, 104, 129, 187, 226, 68, 248, 62, 109, 7, 54, 188, 151, 137, 76, 62, 92, 1, 204, 188, 127, 79, 132, 62, 165, 130, 143, 189, 86, 15, 56, 190, 6, 81, 226, 187, 137, 49, 14, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 132, 88, 59, 197, 59, 2, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 20, 172, 191, 56, 93, 155, 62, 63, 254, 27, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 55, 94, 64, 26, 187, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0020/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}