// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 255, 93, 190, 116, 127, 14, 63, 212, 163, 132, 189, 79, 99, 195, 62, 138, 64, 6, 191, 170, 23, 11, 190, 86, 165, 9, 190, 238, 60, 14, 63, 128, 200, 72, 62, 68, 225, 11, 63, 131, 11, 231, 61, 130, 54, 128, 61, 92, 154, 63, 62, 119, 10, 12, 63, 249, 223, 146, 62, 28, 87, 1, 191, 112, 183, 51, 62, 2, 158, 14, 191, 70, 182, 89, 190, 197, 202, 241, 62, 27, 120, 155, 190, 199, 167, 105, 190, 156, 39, 123, 190, 214, 230, 103, 61, 176, 39, 247, 190, 187, 226, 104, 190, 49, 185, 160, 190, 254, 162, 4, 191, 253, 22, 160, 190, 246, 64, 191, 189, 165, 111, 76, 186, 147, 162, 207, 190, 146, 159, 170, 62, 2, 56, 147, 190, 76, 36, 84, 190, 23, 118, 245, 190, 182, 107, 20, 61, 57, 115, 247, 62, 31, 100, 245, 190, 138, 227, 39, 62, 119, 149, 234, 62, 221, 72, 85, 190, 174, 72, 178, 190, 24, 39, 182, 190, 86, 81, 172, 190, 220, 72, 3, 190, 67, 220, 233, 189, 17, 97, 149, 189, 216, 80, 170, 188, 24, 164, 229, 62, 25, 39, 179, 62, 251, 82, 58, 190, 116, 211, 1, 191, 241, 23, 9, 191, 109, 208, 208, 61, 246, 207, 137, 61, 233, 193, 2, 63, 76, 241, 99, 190, 126, 230, 56, 188, 80, 35, 155, 190, 246, 96, 166, 62, 137, 18, 32, 190, 162, 33, 173, 190, 134, 102, 212, 190, 202, 97, 90, 190, 135, 119, 7, 190, 123, 200, 195, 189, 84, 157, 3, 191, 126, 214, 56, 190, 198, 236, 211, 190, 35, 130, 198, 62, 77, 105, 150, 62, 116, 208, 25, 190, 21, 64, 200, 190, 155, 100, 132, 62, 117, 47, 153, 190, 120, 203, 108, 62, 48, 179, 65, 190, 115, 164, 199, 190, 164, 195, 17, 191, 153, 143, 202, 62, 172, 83, 218, 62, 113, 103, 200, 190, 187, 157, 45, 190, 21, 148, 244, 61, 153, 35, 140, 62, 110, 12, 200, 189, 147, 119, 112, 190, 104, 68, 37, 189, 104, 118, 167, 190, 83, 123, 7, 62, 161, 23, 143, 190, 208, 202, 24, 62, 217, 166, 6, 191, 188, 51, 60, 62, 196, 119, 28, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 154, 19, 191, 75, 254, 187, 62, 219, 99, 190, 189, 90, 231, 46, 189, 66, 98, 129, 62, 192, 185, 238, 62, 146, 213, 159, 62, 238, 35, 163, 62, 89, 205, 167, 61, 37, 32, 220, 189, 226, 141, 150, 190, 200, 193, 10, 191, 1, 6, 94, 189, 23, 25, 115, 189, 137, 77, 201, 62, 202, 117, 177, 62, 2, 165, 207, 62, 195, 39, 18, 60, 15, 135, 194, 62, 183, 213, 250, 62, 231, 235, 181, 190, 158, 32, 72, 62, 26, 5, 6, 63, 22, 221, 184, 190, 168, 97, 144, 189, 104, 140, 172, 190, 26, 150, 165, 190, 138, 197, 8, 63, 59, 163, 101, 62, 201, 228, 141, 62, 248, 61, 192, 62, 156, 12, 95, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 187, 138, 189, 42, 110, 158, 189, 22, 32, 25, 190, 102, 63, 27, 62, 56, 178, 10, 61, 117, 168, 231, 189, 2, 93, 97, 189, 208, 244, 44, 62, 106, 2, 136, 61, 154, 196, 52, 186, 154, 240, 158, 61, 178, 138, 180, 61, 99, 115, 242, 189, 153, 232, 237, 61, 10, 135, 174, 61, 223, 13, 186, 60, 205, 147, 250, 189, 217, 193, 219, 189, 85, 110, 235, 60, 169, 105, 132, 61, 123, 149, 48, 190, 210, 54, 19, 62, 141, 71, 95, 61, 83, 53, 245, 61, 178, 87, 232, 189, 139, 247, 128, 188, 128, 155, 10, 190, 123, 209, 15, 62, 3, 48, 50, 190, 17, 168, 100, 188, 147, 191, 29, 190, 38, 101, 134, 189, 108, 231, 219, 187, 244, 41, 237, 187, 98, 2, 173, 188, 207, 106, 126, 60, 225, 114, 129, 61, 127, 57, 207, 189, 50, 243, 186, 187, 31, 73, 154, 189, 177, 177, 157, 189, 3, 4, 242, 189, 226, 144, 26, 62, 43, 149, 34, 62, 3, 170, 12, 190, 215, 37, 234, 188, 78, 98, 190, 61, 252, 234, 44, 61, 117, 134, 87, 189, 26, 198, 248, 189, 162, 161, 31, 190, 54, 6, 16, 62, 70, 134, 200, 60, 138, 32, 8, 190, 5, 249, 37, 190, 224, 158, 131, 59, 217, 117, 159, 188, 217, 233, 240, 189, 30, 68, 122, 59, 200, 186, 40, 190, 86, 112, 37, 60, 144, 102, 141, 59, 37, 218, 65, 61, 211, 93, 137, 189, 175, 61, 183, 61, 173, 247, 229, 61, 12, 168, 244, 188, 36, 124, 204, 61, 214, 126, 25, 62, 196, 79, 179, 189, 164, 160, 31, 189, 54, 212, 14, 62, 231, 43, 24, 190, 95, 145, 210, 189, 188, 1, 10, 62, 210, 190, 203, 189, 140, 66, 187, 189, 206, 30, 15, 62, 201, 39, 26, 61, 133, 98, 13, 61, 191, 10, 39, 189, 249, 151, 248, 61, 143, 7, 187, 61, 114, 219, 185, 61, 255, 7, 131, 60, 10, 10, 3, 62, 188, 190, 189, 61, 140, 56, 208, 61, 146, 143, 77, 61, 140, 46, 218, 189, 26, 54, 254, 189, 125, 90, 250, 61, 166, 122, 26, 61, 193, 247, 82, 189, 47, 61, 35, 190, 32, 140, 230, 188, 11, 243, 244, 189, 133, 81, 239, 61, 25, 121, 69, 188, 154, 2, 113, 60, 69, 107, 202, 61, 217, 111, 42, 62, 86, 115, 166, 61, 197, 46, 22, 190, 182, 22, 79, 60, 222, 157, 77, 189, 143, 67, 251, 189, 20, 67, 173, 189, 20, 255, 223, 61, 206, 24, 229, 61, 175, 159, 211, 189, 217, 132, 57, 189, 171, 156, 11, 189, 240, 1, 224, 189, 30, 132, 25, 62, 61, 254, 209, 189, 196, 76, 201, 189, 173, 204, 50, 190, 20, 126, 34, 190, 193, 166, 25, 190, 160, 178, 63, 59, 180, 40, 147, 60, 29, 236, 146, 188, 84, 151, 25, 62, 254, 213, 140, 61, 199, 27, 36, 60, 254, 223, 92, 61, 190, 112, 28, 62, 144, 88, 167, 189, 91, 133, 5, 190, 233, 92, 42, 190, 150, 3, 148, 61, 243, 46, 1, 190, 207, 110, 29, 189, 10, 119, 67, 189, 92, 154, 42, 62, 52, 66, 177, 188, 83, 166, 11, 62, 222, 225, 128, 187, 37, 196, 30, 60, 227, 163, 251, 189, 236, 176, 25, 60, 115, 100, 211, 188, 44, 204, 224, 61, 248, 177, 253, 188, 44, 243, 115, 189, 52, 221, 169, 189, 105, 52, 131, 61, 168, 80, 43, 62, 46, 249, 145, 186, 252, 202, 168, 60, 108, 234, 48, 62, 72, 201, 164, 186, 153, 63, 170, 61, 87, 0, 188, 189, 204, 78, 135, 61, 55, 190, 208, 189, 149, 87, 189, 189, 175, 234, 187, 60, 252, 120, 39, 62, 21, 155, 20, 190, 75, 94, 174, 61, 221, 180, 5, 62, 143, 54, 248, 60, 250, 28, 1, 62, 140, 237, 88, 189, 32, 114, 8, 62, 247, 25, 183, 61, 77, 40, 228, 60, 80, 250, 16, 188, 216, 31, 0, 62, 239, 146, 154, 188, 201, 72, 3, 60, 137, 123, 246, 188, 96, 136, 227, 189, 4, 248, 16, 190, 191, 214, 234, 60, 219, 122, 183, 189, 63, 126, 69, 61, 254, 47, 194, 60, 182, 83, 87, 189, 138, 144, 120, 188, 252, 113, 143, 189, 107, 173, 18, 62, 30, 78, 172, 61, 157, 144, 45, 62, 240, 154, 31, 62, 52, 109, 12, 62, 90, 142, 155, 60, 228, 36, 234, 189, 237, 171, 72, 61, 124, 229, 129, 188, 204, 158, 226, 60, 200, 215, 159, 60, 35, 221, 33, 190, 221, 110, 173, 189, 139, 203, 245, 61, 10, 223, 216, 61, 151, 96, 201, 188, 36, 158, 26, 62, 57, 45, 84, 189, 66, 17, 46, 190, 142, 255, 166, 61, 175, 163, 215, 61, 55, 62, 244, 61, 83, 253, 197, 61, 152, 207, 248, 189, 254, 73, 218, 189, 199, 42, 104, 61, 107, 246, 47, 62, 254, 237, 181, 189, 153, 188, 45, 61, 5, 44, 0, 62, 63, 66, 95, 61, 51, 246, 12, 61, 49, 186, 19, 188, 122, 85, 8, 62, 250, 233, 166, 60, 164, 61, 22, 190, 232, 160, 245, 61, 80, 20, 29, 62, 146, 8, 58, 61, 221, 216, 197, 60, 218, 49, 252, 60, 164, 75, 134, 189, 100, 34, 155, 189, 200, 154, 237, 60, 19, 148, 147, 189, 189, 87, 41, 62, 183, 115, 29, 62, 245, 56, 27, 62, 157, 29, 210, 188, 221, 109, 203, 189, 157, 39, 237, 60, 52, 180, 134, 61, 44, 27, 221, 189, 58, 5, 166, 189, 115, 134, 16, 62, 51, 229, 234, 61, 4, 142, 215, 61, 22, 16, 7, 62, 1, 113, 147, 60, 235, 20, 21, 190, 45, 250, 84, 61, 116, 52, 165, 189, 202, 202, 237, 61, 31, 66, 39, 190, 37, 137, 240, 61, 75, 77, 160, 61, 197, 73, 66, 189, 57, 112, 59, 61, 164, 252, 6, 62, 156, 250, 43, 190, 188, 40, 133, 61, 172, 152, 107, 189, 171, 202, 206, 189, 54, 115, 131, 60, 108, 211, 150, 189, 69, 24, 1, 61, 101, 90, 180, 61, 99, 13, 207, 61, 114, 206, 195, 59, 154, 192, 176, 60, 33, 122, 234, 189, 204, 118, 20, 62, 114, 79, 129, 61, 76, 121, 52, 190, 50, 157, 125, 189, 126, 15, 15, 190, 60, 211, 238, 189, 163, 79, 47, 62, 150, 77, 51, 190, 157, 190, 124, 61, 161, 9, 220, 61, 254, 110, 26, 62, 197, 20, 219, 61, 35, 110, 163, 61, 120, 99, 45, 62, 244, 229, 183, 61, 251, 2, 26, 190, 54, 81, 205, 61, 75, 152, 185, 189, 232, 77, 126, 60, 66, 149, 86, 189, 5, 3, 20, 190, 51, 73, 133, 189, 126, 148, 158, 61, 210, 143, 19, 189, 248, 216, 3, 61, 78, 102, 142, 61, 49, 49, 235, 61, 194, 168, 136, 61, 56, 31, 232, 60, 170, 149, 219, 187, 87, 86, 32, 62, 213, 167, 6, 62, 26, 40, 83, 61, 71, 106, 1, 190, 154, 249, 63, 61, 242, 84, 14, 60, 186, 161, 49, 188, 162, 45, 13, 190, 70, 89, 147, 60, 213, 30, 146, 60, 140, 67, 224, 188, 42, 245, 9, 190, 197, 25, 31, 190, 237, 44, 78, 60, 37, 8, 151, 61, 57, 56, 223, 189, 12, 131, 207, 189, 139, 239, 227, 61, 214, 178, 177, 189, 67, 27, 239, 61, 228, 165, 133, 60, 209, 51, 36, 190, 139, 151, 141, 61, 115, 60, 25, 190, 155, 222, 206, 61, 251, 193, 162, 189, 65, 218, 36, 187, 182, 211, 24, 62, 31, 74, 202, 189, 77, 143, 40, 190, 233, 185, 251, 188, 95, 143, 186, 61, 224, 11, 2, 62, 243, 32, 120, 61, 14, 29, 193, 189, 183, 237, 43, 190, 189, 236, 44, 190, 88, 236, 199, 61, 225, 152, 38, 190, 172, 56, 4, 60, 100, 149, 4, 190, 200, 11, 130, 60, 89, 216, 0, 190, 11, 108, 18, 190, 75, 109, 10, 190, 43, 182, 161, 189, 112, 204, 21, 62, 225, 85, 64, 61, 173, 113, 150, 61, 196, 220, 140, 60, 105, 145, 20, 62, 20, 118, 233, 58, 196, 198, 237, 189, 129, 20, 123, 189, 208, 179, 154, 59, 88, 226, 27, 62, 120, 244, 0, 190, 233, 160, 51, 62, 119, 107, 205, 61, 207, 126, 50, 61, 59, 63, 23, 190, 84, 209, 6, 190, 113, 90, 238, 61, 233, 17, 30, 190, 101, 79, 40, 189, 192, 150, 7, 190, 207, 179, 42, 190, 39, 125, 33, 62, 137, 251, 113, 189, 90, 187, 17, 190, 136, 233, 246, 189, 168, 180, 166, 189, 206, 120, 50, 62, 254, 43, 173, 61, 61, 238, 17, 190, 220, 50, 28, 62, 205, 150, 177, 61, 58, 169, 56, 61, 216, 11, 74, 61, 92, 113, 2, 189, 78, 184, 25, 61, 68, 104, 122, 60, 18, 193, 36, 190, 92, 181, 23, 190, 155, 50, 149, 61, 44, 121, 42, 61, 192, 236, 45, 62, 158, 212, 87, 61, 43, 91, 35, 189, 55, 180, 46, 61, 149, 113, 39, 190, 183, 146, 198, 189, 148, 170, 145, 189, 204, 68, 89, 189, 252, 158, 24, 62, 98, 196, 102, 61, 18, 200, 172, 61, 135, 187, 39, 190, 68, 22, 229, 61, 127, 196, 44, 62, 75, 90, 26, 62, 124, 87, 35, 190, 216, 169, 90, 61, 110, 30, 170, 189, 77, 112, 193, 61, 228, 48, 4, 60, 54, 103, 36, 190, 217, 60, 52, 189, 21, 43, 142, 61, 52, 140, 131, 188, 252, 195, 1, 190, 44, 127, 67, 189, 155, 194, 20, 61, 187, 132, 46, 62, 172, 155, 210, 189, 38, 251, 33, 62, 60, 59, 230, 189, 17, 117, 108, 188, 49, 125, 200, 188, 197, 101, 23, 190, 98, 160, 2, 190, 228, 147, 20, 189, 123, 220, 131, 60, 176, 204, 128, 61, 169, 99, 0, 190, 134, 216, 176, 189, 161, 140, 52, 61, 156, 6, 24, 62, 113, 30, 43, 190, 191, 38, 30, 61, 129, 118, 43, 62, 32, 22, 75, 189, 158, 232, 214, 59, 72, 42, 164, 189, 231, 115, 39, 62, 197, 44, 221, 189, 176, 113, 125, 61, 240, 3, 25, 62, 194, 225, 40, 62, 136, 96, 101, 60, 72, 103, 43, 190, 109, 88, 16, 189, 120, 8, 177, 189, 250, 250, 160, 189, 41, 214, 11, 62, 52, 215, 243, 189, 76, 106, 192, 60, 239, 201, 28, 190, 130, 239, 1, 62, 145, 133, 30, 60, 4, 100, 163, 188, 164, 251, 74, 189, 142, 211, 158, 61, 130, 251, 10, 190, 31, 32, 11, 62, 166, 204, 251, 189, 174, 98, 239, 61, 120, 19, 45, 190, 239, 68, 183, 61, 173, 251, 21, 188, 167, 59, 116, 189, 58, 130, 45, 62, 34, 207, 115, 189, 7, 144, 16, 62, 48, 7, 180, 60, 38, 3, 228, 189, 66, 73, 41, 62, 68, 95, 138, 189, 204, 208, 103, 61, 151, 78, 19, 62, 135, 27, 40, 62, 88, 211, 5, 61, 32, 26, 94, 61, 42, 119, 236, 189, 224, 31, 185, 61, 24, 158, 93, 60, 43, 15, 150, 59, 250, 191, 220, 189, 67, 196, 100, 60, 131, 22, 177, 189, 164, 122, 51, 190, 52, 46, 198, 58, 130, 79, 50, 189, 153, 135, 30, 190, 89, 162, 37, 190, 51, 122, 196, 189, 175, 244, 36, 190, 143, 249, 159, 61, 2, 162, 197, 61, 163, 86, 8, 62, 13, 130, 194, 61, 0, 58, 98, 189, 174, 18, 38, 62, 216, 208, 1, 190, 123, 1, 41, 190, 193, 150, 150, 61, 224, 104, 20, 62, 56, 93, 250, 189, 171, 75, 0, 190, 248, 211, 25, 61, 248, 206, 215, 61, 145, 102, 189, 61, 90, 128, 212, 61, 155, 168, 52, 62, 116, 208, 177, 189, 1, 165, 0, 190, 85, 123, 7, 189, 98, 197, 7, 190, 174, 121, 208, 60, 13, 203, 172, 189, 118, 114, 139, 61, 1, 244, 150, 189, 48, 16, 67, 61, 37, 164, 66, 189, 198, 218, 59, 60, 33, 253, 146, 60, 168, 6, 94, 188, 252, 39, 143, 189, 185, 135, 26, 62, 74, 203, 153, 189, 164, 140, 138, 61, 249, 242, 132, 188, 11, 183, 49, 190, 194, 25, 21, 189, 183, 140, 28, 190, 53, 208, 38, 62, 66, 173, 117, 59, 152, 153, 148, 61, 119, 96, 177, 61, 114, 131, 145, 61, 167, 106, 16, 190, 3, 144, 205, 189, 116, 104, 30, 190, 76, 120, 137, 61, 96, 164, 20, 189, 86, 227, 32, 189, 252, 0, 170, 189, 55, 212, 182, 188, 134, 86, 178, 60, 174, 247, 48, 189, 217, 16, 89, 61, 223, 231, 161, 61, 200, 14, 7, 61, 91, 94, 36, 62, 168, 95, 46, 190, 26, 22, 155, 59, 195, 219, 138, 187, 168, 91, 33, 190, 125, 98, 174, 61, 241, 16, 181, 189, 215, 202, 209, 189, 242, 82, 10, 62, 118, 114, 33, 62, 64, 20, 24, 189, 193, 237, 21, 185, 7, 206, 146, 61, 240, 128, 25, 190, 228, 180, 65, 189, 102, 240, 46, 189, 1, 130, 223, 189, 116, 198, 7, 60, 126, 55, 159, 188, 39, 246, 233, 60, 210, 1, 249, 189, 134, 18, 81, 61, 4, 251, 35, 62, 190, 85, 51, 190, 204, 99, 220, 189, 109, 213, 15, 62, 159, 20, 161, 61, 58, 145, 176, 188, 39, 229, 15, 62, 40, 233, 217, 60, 209, 139, 47, 190, 188, 62, 23, 190, 184, 136, 204, 189, 184, 151, 29, 62, 201, 42, 119, 188, 126, 210, 79, 189, 16, 197, 160, 60, 196, 5, 198, 188, 187, 160, 24, 189, 16, 95, 0, 62, 247, 202, 20, 62, 131, 227, 31, 62, 109, 141, 35, 190, 4, 157, 5, 62, 153, 209, 172, 189, 192, 72, 17, 190, 118, 176, 31, 62, 79, 43, 211, 61, 229, 102, 25, 190, 157, 211, 20, 190, 100, 244, 108, 187, 14, 211, 48, 61, 155, 118, 137, 61, 166, 231, 184, 189, 170, 60, 175, 60, 133, 127, 41, 189, 106, 79, 106, 189, 157, 183, 1, 190, 14, 190, 28, 61, 233, 150, 47, 61, 12, 86, 78, 189, 4, 138, 219, 61, 124, 82, 79, 189, 195, 116, 76, 189, 191, 28, 49, 61, 79, 17, 42, 190, 155, 171, 248, 188, 171, 84, 92, 187, 177, 152, 130, 61, 80, 29, 0, 62, 127, 159, 48, 62, 182, 147, 250, 60, 100, 101, 213, 60, 75, 115, 229, 61, 161, 80, 253, 188, 67, 136, 93, 60, 214, 196, 169, 189, 170, 145, 13, 62, 253, 19, 0, 61, 121, 124, 34, 62, 24, 113, 65, 61, 93, 161, 137, 60, 3, 129, 249, 189, 200, 136, 12, 190, 69, 170, 158, 188, 19, 73, 204, 61, 213, 90, 149, 189, 64, 222, 169, 61, 93, 173, 250, 188, 23, 172, 249, 61, 126, 209, 212, 61, 57, 238, 79, 189, 32, 11, 146, 189, 84, 245, 10, 61, 40, 245, 200, 189, 37, 191, 34, 62, 22, 24, 162, 61, 83, 12, 40, 62, 181, 3, 243, 61, 223, 38, 176, 189, 146, 54, 168, 61, 57, 131, 52, 62, 150, 3, 14, 188, 90, 234, 48, 190, 63, 68, 187, 59, 156, 80, 237, 189, 171, 154, 38, 190, 111, 80, 218, 189, 154, 100, 25, 190, 174, 209, 219, 58, 73, 217, 199, 189, 199, 120, 136, 61, 57, 127, 195, 189, 28, 87, 145, 61, 184, 174, 23, 190, 51, 154, 20, 62, 159, 1, 17, 190, 21, 126, 245, 61, 68, 51, 200, 61, 18, 7, 45, 188, 34, 213, 52, 188, 4, 225, 233, 61, 180, 176, 211, 189, 253, 46, 238, 61, 171, 99, 8, 190, 54, 75, 5, 62, 70, 244, 212, 188, 199, 40, 179, 61, 120, 195, 25, 190, 74, 246, 143, 189, 207, 3, 20, 62, 103, 211, 236, 61, 242, 71, 28, 61, 73, 230, 168, 189, 172, 194, 27, 190, 57, 55, 19, 62, 133, 161, 164, 61, 114, 88, 252, 61, 108, 111, 249, 61, 20, 253, 149, 189, 24, 123, 44, 190, 19, 31, 39, 189, 91, 202, 24, 62, 221, 225, 13, 60, 176, 150, 242, 189, 133, 223, 56, 61, 93, 110, 16, 190, 7, 15, 124, 60, 66, 163, 243, 61, 174, 62, 162, 61, 205, 113, 82, 188, 159, 186, 18, 62, 208, 86, 5, 190, 255, 20, 48, 188, 252, 121, 26, 61, 173, 232, 126, 189, 133, 26, 25, 190, 20, 199, 30, 62, 83, 187, 47, 188, 60, 79, 50, 61, 72, 35, 26, 62, 191, 64, 26, 190, 71, 174, 240, 60, 82, 81, 255, 189, 19, 139, 241, 189, 111, 9, 14, 62, 77, 24, 139, 189, 121, 237, 128, 189, 168, 97, 10, 62, 224, 187, 35, 61, 77, 146, 190, 61, 168, 89, 42, 62, 227, 158, 148, 61, 174, 116, 199, 189, 240, 205, 224, 61, 34, 236, 210, 60, 177, 129, 94, 188, 246, 153, 19, 62, 182, 138, 64, 61, 140, 162, 15, 190, 86, 144, 152, 58, 121, 59, 240, 61, 231, 112, 129, 61, 183, 100, 40, 190, 163, 254, 3, 190, 62, 117, 10, 62, 90, 28, 243, 189, 251, 226, 66, 59, 164, 112, 3, 62, 127, 34, 63, 189, 220, 89, 197, 189, 103, 145, 111, 61, 237, 77, 9, 62, 5, 86, 33, 61, 236, 92, 29, 62, 117, 31, 214, 61, 155, 69, 70, 61, 113, 67, 23, 61, 63, 208, 40, 190, 149, 73, 39, 190, 66, 96, 239, 187, 121, 223, 194, 189, 136, 194, 227, 189, 51, 64, 236, 61, 81, 21, 173, 189, 66, 43, 38, 62, 34, 197, 14, 61, 239, 163, 96, 188, 28, 30, 157, 61, 124, 59, 135, 188, 109, 24, 188, 61, 252, 43, 137, 186, 132, 75, 181, 61, 214, 59, 87, 61, 230, 220, 96, 188, 179, 63, 27, 190, 238, 188, 89, 189, 35, 126, 14, 188, 171, 207, 29, 190, 142, 62, 22, 189, 164, 122, 212, 61, 143, 237, 224, 187, 109, 126, 223, 189, 154, 17, 252, 61, 9, 195, 226, 188, 171, 96, 50, 61, 173, 5, 156, 61, 207, 156, 43, 190, 124, 72, 140, 61, 11, 20, 143, 61, 192, 204, 223, 60, 68, 123, 28, 189, 100, 205, 7, 189, 88, 121, 9, 189, 146, 184, 51, 190, 193, 220, 163, 189, 100, 253, 49, 62, 77, 28, 75, 189, 170, 62, 189, 189, 124, 206, 234, 61, 191, 117, 172, 61, 132, 50, 210, 60, 143, 145, 177, 189, 41, 130, 251, 61, 131, 240, 243, 188, 6, 98, 32, 62, 67, 158, 49, 62, 198, 151, 13, 190, 50, 34, 142, 189, 233, 150, 87, 189, 200, 102, 1, 189, 113, 207, 138, 61, 216, 25, 128, 59, 211, 104, 104, 189, 191, 94, 216, 189, 73, 247, 215, 189, 46, 236, 239, 60, 131, 255, 178, 61, 242, 39, 113, 189, 34, 157, 137, 61, 41, 244, 171, 61, 177, 233, 233, 61, 18, 162, 50, 62, 105, 244, 15, 62, 190, 165, 101, 189, 254, 222, 175, 189, 109, 53, 181, 189, 101, 87, 82, 189, 200, 60, 131, 189, 132, 255, 167, 189, 162, 200, 50, 62, 34, 71, 205, 189, 203, 230, 118, 61, 39, 150, 49, 62, 95, 92, 73, 61, 116, 242, 130, 188, 221, 151, 55, 61, 168, 110, 183, 189, 245, 128, 175, 61, 239, 180, 199, 189, 123, 79, 47, 62, 173, 124, 44, 62, 120, 170, 17, 62, 104, 85, 202, 61, 23, 13, 49, 62, 192, 64, 205, 61, 94, 66, 181, 61, 224, 166, 230, 61, 16, 154, 144, 189, 121, 122, 31, 190, 239, 200, 52, 62, 18, 200, 10, 190, 10, 0, 228, 61, 195, 35, 181, 61, 20, 37, 37, 190, 177, 115, 212, 61, 43, 254, 253, 61, 28, 43, 23, 190, 97, 78, 200, 61, 198, 14, 27, 62, 204, 83, 201, 61, 227, 234, 62, 61, 100, 215, 179, 189, 136, 159, 19, 190, 165, 192, 78, 189, 84, 91, 42, 62, 67, 213, 49, 190, 180, 52, 23, 62, 170, 149, 39, 62, 198, 164, 131, 189, 27, 98, 245, 61, 91, 115, 188, 189, 136, 240, 174, 189, 52, 109, 6, 62, 5, 207, 47, 190, 131, 70, 15, 62, 117, 45, 222, 61, 10, 44, 15, 61, 129, 69, 7, 190, 84, 134, 189, 61, 164, 162, 123, 61, 43, 211, 27, 62, 127, 133, 28, 189, 228, 20, 32, 62, 84, 196, 51, 190, 21, 192, 1, 190, 60, 172, 26, 190, 101, 221, 25, 189, 221, 61, 199, 61, 3, 234, 202, 189, 235, 218, 86, 60, 132, 235, 13, 62, 133, 130, 10, 62, 3, 99, 211, 60, 109, 176, 248, 189, 215, 58, 44, 190, 185, 213, 39, 190, 135, 65, 29, 190, 68, 104, 237, 189, 194, 245, 14, 62, 179, 250, 243, 189, 196, 2, 92, 189, 16, 167, 17, 190, 207, 245, 244, 61, 240, 93, 231, 188, 246, 228, 16, 62, 45, 181, 39, 62, 19, 86, 41, 190, 112, 65, 64, 189, 14, 100, 203, 189, 223, 108, 36, 188, 101, 179, 208, 188, 62, 126, 202, 188, 111, 30, 138, 188, 43, 119, 49, 190, 207, 249, 45, 62, 254, 142, 46, 190, 14, 130, 27, 62, 180, 223, 132, 61, 38, 210, 142, 61, 103, 179, 20, 61, 176, 4, 150, 189, 94, 166, 112, 189, 252, 110, 187, 60, 120, 131, 247, 189, 32, 211, 135, 189, 194, 1, 210, 61, 159, 166, 17, 190, 216, 75, 23, 62, 211, 154, 246, 189, 156, 160, 7, 189, 81, 12, 188, 188, 253, 220, 162, 189, 238, 34, 230, 189, 27, 213, 107, 61, 39, 93, 21, 60, 206, 209, 6, 62, 132, 17, 176, 189, 107, 237, 115, 61, 248, 192, 20, 188, 11, 34, 16, 62, 24, 74, 40, 61, 251, 147, 66, 61, 254, 198, 169, 61, 189, 117, 141, 189, 38, 154, 48, 62, 62, 62, 31, 62, 118, 165, 24, 190, 135, 181, 241, 189, 40, 97, 37, 190, 242, 176, 34, 190, 180, 133, 139, 189, 35, 193, 39, 62, 118, 157, 216, 189, 0, 228, 176, 59, 77, 165, 9, 190, 12, 130, 123, 60, 251, 195, 189, 189, 103, 12, 171, 61, 242, 80, 224, 61, 11, 87, 188, 189, 43, 112, 235, 61, 39, 98, 18, 189, 175, 176, 20, 61, 107, 178, 239, 189, 152, 206, 179, 61, 114, 4, 13, 190, 34, 215, 45, 190, 169, 229, 165, 189, 76, 235, 188, 61, 2, 234, 40, 61, 70, 239, 10, 62, 20, 78, 149, 189, 80, 167, 13, 62, 92, 68, 170, 59, 202, 145, 126, 59, 5, 102, 249, 189, 17, 119, 171, 60, 191, 172, 212, 186, 170, 217, 64, 189, 228, 230, 131, 189, 105, 140, 249, 61, 9, 167, 24, 62, 72, 14, 17, 62, 217, 198, 125, 188, 24, 91, 232, 189, 237, 133, 255, 189, 24, 131, 21, 189, 181, 165, 150, 189, 72, 106, 169, 61, 118, 79, 16, 62, 82, 223, 255, 61, 190, 171, 151, 61, 32, 45, 44, 190, 158, 39, 7, 60, 143, 153, 81, 61, 28, 230, 25, 190, 190, 250, 45, 190, 94, 195, 226, 61, 115, 59, 39, 190, 25, 210, 37, 190, 214, 151, 201, 60, 93, 242, 124, 189, 74, 21, 253, 61, 7, 7, 41, 62, 150, 53, 146, 189, 76, 140, 178, 61, 201, 75, 12, 62, 13, 189, 5, 187, 136, 192, 78, 187, 220, 254, 42, 60, 49, 117, 68, 61, 250, 4, 146, 60, 2, 219, 243, 61, 193, 181, 201, 61, 23, 176, 91, 187, 96, 4, 0, 190, 19, 20, 72, 60, 194, 130, 46, 190, 148, 137, 254, 189, 169, 82, 161, 189, 117, 249, 29, 62, 133, 201, 229, 189, 121, 97, 195, 61, 248, 186, 18, 61, 102, 210, 221, 188, 18, 155, 152, 189, 24, 207, 162, 189, 61, 49, 167, 188, 5, 130, 145, 189, 22, 16, 43, 190, 207, 238, 207, 189, 133, 4, 37, 190, 210, 200, 252, 61, 47, 192, 40, 190, 78, 82, 140, 60, 55, 228, 196, 61, 187, 130, 115, 61, 64, 89, 70, 61, 255, 120, 191, 186, 247, 167, 32, 190, 242, 167, 123, 189, 74, 113, 238, 61, 16, 45, 4, 190, 103, 253, 84, 188, 206, 232, 233, 59, 57, 56, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 58, 165, 60, 14, 75, 43, 62, 48, 25, 52, 190, 170, 60, 98, 61, 113, 34, 41, 62, 26, 215, 10, 190, 173, 220, 161, 61, 76, 17, 39, 62, 247, 226, 60, 60, 225, 131, 26, 62, 191, 63, 62, 61, 217, 104, 186, 188, 71, 17, 24, 190, 75, 179, 3, 190, 199, 80, 149, 187, 200, 18, 33, 62, 225, 208, 37, 61, 70, 250, 107, 61, 235, 172, 5, 190, 138, 24, 20, 62, 100, 48, 135, 188, 125, 149, 15, 61, 197, 178, 10, 62, 224, 105, 68, 61, 20, 237, 225, 189, 135, 168, 200, 189, 249, 44, 33, 62, 159, 13, 20, 190, 7, 247, 155, 61, 5, 144, 254, 61, 92, 174, 9, 190, 162, 22, 155, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 186, 130, 60, 32, 50, 16, 190, 76, 148, 65, 188, 129, 108, 245, 61, 100, 42, 230, 189, 174, 37, 48, 62, 229, 61, 231, 61, 16, 224, 50, 62, 75, 148, 78, 188, 78, 111, 9, 190, 151, 170, 110, 189, 163, 43, 245, 60, 52, 208, 216, 189, 180, 39, 22, 62, 28, 217, 229, 189, 251, 95, 80, 189, 147, 209, 1, 190, 210, 248, 16, 62, 70, 101, 185, 60, 114, 162, 114, 189, 42, 202, 49, 60, 149, 123, 92, 189, 133, 130, 46, 61, 65, 247, 236, 61, 18, 179, 1, 62, 143, 126, 196, 60, 160, 103, 172, 61, 209, 120, 150, 189, 220, 60, 220, 61, 9, 62, 209, 60, 108, 29, 154, 61, 87, 42, 185, 61, 84, 249, 98, 61, 161, 152, 155, 61, 6, 231, 2, 190, 111, 154, 253, 60, 50, 6, 4, 190, 165, 15, 139, 59, 132, 93, 188, 189, 144, 94, 189, 189, 54, 75, 28, 62, 102, 135, 245, 189, 126, 12, 47, 189, 120, 76, 23, 62, 114, 92, 164, 189, 104, 81, 248, 188, 65, 103, 75, 60, 55, 34, 110, 61, 215, 68, 193, 189, 22, 226, 238, 188, 232, 46, 156, 189, 67, 35, 191, 189, 221, 151, 11, 62, 67, 170, 4, 62, 4, 72, 188, 189, 215, 247, 225, 189, 84, 124, 242, 188, 180, 164, 46, 189, 127, 99, 50, 61, 231, 191, 248, 61, 101, 128, 47, 189, 71, 245, 108, 61, 203, 233, 1, 61, 49, 198, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 38, 167, 188, 34, 76, 154, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 158, 223, 190, 103, 245, 213, 63, 158, 190, 159, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 157, 27, 62, 94, 50, 154, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}