// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 86, 186, 190, 61, 196, 41, 63, 196, 131, 217, 190, 21, 219, 48, 63, 214, 0, 85, 191, 157, 176, 131, 190, 35, 157, 92, 62, 17, 219, 86, 63, 223, 253, 70, 62, 145, 250, 75, 63, 151, 104, 215, 62, 104, 43, 57, 62, 210, 201, 26, 63, 58, 113, 98, 63, 79, 178, 94, 62, 84, 184, 217, 190, 140, 97, 33, 191, 4, 240, 68, 191, 240, 56, 113, 190, 109, 23, 77, 63, 38, 207, 232, 190, 85, 51, 22, 190, 175, 103, 135, 190, 106, 218, 27, 62, 121, 163, 13, 191, 239, 101, 93, 191, 138, 16, 129, 190, 230, 203, 25, 191, 120, 209, 30, 190, 147, 247, 110, 62, 187, 111, 32, 190, 126, 20, 235, 190, 103, 184, 175, 62, 194, 60, 229, 62, 194, 149, 98, 191, 166, 48, 242, 190, 69, 254, 167, 190, 90, 194, 183, 190, 13, 183, 75, 191, 219, 210, 78, 190, 21, 220, 246, 61, 241, 68, 53, 191, 138, 108, 235, 190, 199, 175, 16, 191, 252, 76, 54, 189, 228, 89, 250, 189, 254, 104, 95, 188, 224, 98, 142, 189, 175, 178, 179, 61, 132, 216, 89, 63, 102, 111, 74, 62, 207, 63, 190, 189, 237, 7, 132, 191, 153, 26, 2, 191, 130, 234, 23, 190, 212, 26, 223, 62, 177, 83, 208, 62, 175, 31, 231, 61, 96, 92, 66, 190, 210, 14, 241, 190, 23, 103, 22, 63, 158, 26, 70, 191, 204, 147, 254, 190, 47, 40, 148, 190, 167, 124, 172, 190, 32, 113, 164, 188, 136, 216, 19, 190, 20, 90, 69, 191, 68, 130, 1, 190, 131, 136, 144, 61, 201, 92, 230, 62, 102, 110, 104, 62, 68, 149, 164, 189, 155, 79, 181, 190, 76, 65, 119, 62, 24, 32, 15, 191, 223, 47, 46, 191, 244, 180, 31, 191, 119, 207, 18, 191, 167, 254, 135, 189, 121, 236, 5, 63, 158, 118, 55, 63, 227, 213, 53, 191, 236, 22, 209, 189, 210, 80, 235, 61, 19, 195, 13, 63, 241, 228, 227, 190, 14, 3, 137, 190, 99, 129, 53, 191, 157, 213, 149, 190, 204, 47, 201, 61, 87, 117, 211, 61, 163, 167, 91, 62, 113, 92, 100, 191, 91, 63, 72, 63, 219, 99, 195, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 44, 82, 190, 189, 72, 55, 62, 66, 200, 193, 61, 78, 92, 20, 190, 198, 11, 79, 189, 239, 124, 172, 62, 236, 37, 138, 60, 97, 149, 151, 62, 190, 119, 78, 61, 52, 216, 109, 59, 204, 151, 7, 190, 153, 99, 96, 191, 114, 123, 179, 61, 38, 135, 24, 60, 41, 72, 226, 62, 38, 2, 2, 63, 93, 98, 147, 62, 12, 140, 87, 62, 230, 60, 46, 62, 235, 226, 184, 62, 29, 0, 139, 190, 192, 69, 164, 62, 112, 79, 222, 62, 238, 105, 237, 190, 98, 244, 85, 189, 157, 56, 37, 190, 150, 197, 250, 190, 88, 17, 226, 62, 95, 127, 25, 62, 134, 141, 28, 189, 136, 64, 150, 62, 69, 219, 243, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 116, 67, 62, 100, 144, 141, 58, 80, 205, 107, 190, 202, 23, 120, 189, 202, 39, 131, 190, 0, 109, 244, 190, 31, 246, 157, 190, 218, 228, 145, 62, 115, 244, 117, 189, 27, 37, 233, 61, 215, 229, 194, 189, 128, 206, 0, 62, 11, 86, 84, 191, 134, 142, 156, 191, 244, 114, 53, 62, 42, 147, 109, 61, 193, 35, 41, 189, 228, 83, 197, 190, 195, 188, 160, 61, 61, 55, 18, 190, 69, 70, 135, 190, 29, 226, 131, 62, 57, 205, 36, 62, 240, 2, 3, 62, 71, 231, 112, 190, 127, 56, 153, 191, 249, 157, 84, 61, 190, 226, 19, 62, 252, 11, 156, 191, 179, 100, 165, 190, 91, 166, 133, 189, 147, 23, 137, 61, 90, 184, 181, 190, 56, 118, 23, 190, 107, 200, 189, 60, 143, 165, 212, 62, 165, 158, 174, 62, 177, 74, 1, 62, 145, 160, 81, 62, 5, 21, 73, 60, 151, 210, 117, 62, 82, 94, 161, 188, 250, 81, 127, 62, 205, 224, 239, 188, 209, 9, 125, 61, 60, 230, 46, 62, 246, 47, 4, 62, 127, 137, 20, 62, 247, 223, 9, 189, 150, 188, 18, 190, 179, 240, 38, 190, 104, 238, 140, 62, 76, 203, 158, 190, 186, 155, 130, 188, 60, 205, 40, 190, 176, 195, 123, 188, 89, 62, 108, 61, 33, 11, 128, 61, 131, 138, 111, 190, 173, 46, 48, 190, 79, 186, 126, 62, 174, 225, 75, 62, 228, 147, 7, 60, 237, 162, 106, 189, 184, 93, 183, 60, 123, 245, 59, 62, 97, 43, 28, 190, 19, 172, 131, 62, 77, 234, 30, 62, 218, 157, 247, 189, 203, 238, 204, 61, 42, 55, 33, 62, 55, 153, 153, 190, 128, 233, 156, 189, 68, 204, 115, 189, 36, 110, 196, 190, 140, 62, 118, 189, 37, 3, 119, 62, 54, 163, 249, 188, 206, 221, 103, 62, 52, 169, 244, 189, 141, 234, 132, 188, 78, 117, 252, 189, 251, 40, 13, 62, 233, 182, 125, 190, 226, 130, 160, 61, 64, 245, 155, 61, 147, 255, 50, 187, 136, 200, 252, 189, 155, 31, 198, 189, 53, 159, 204, 190, 173, 77, 130, 62, 209, 66, 77, 62, 44, 84, 52, 190, 18, 212, 25, 190, 212, 129, 164, 61, 185, 72, 55, 61, 134, 123, 63, 61, 73, 175, 144, 62, 191, 44, 156, 190, 106, 93, 66, 62, 148, 121, 131, 62, 68, 37, 129, 62, 76, 232, 48, 190, 237, 83, 151, 189, 158, 180, 57, 190, 220, 218, 134, 190, 141, 181, 96, 189, 206, 215, 97, 62, 147, 222, 149, 62, 170, 229, 155, 189, 193, 209, 133, 61, 230, 169, 219, 61, 248, 55, 177, 189, 64, 143, 6, 62, 5, 129, 81, 60, 222, 23, 78, 185, 92, 77, 80, 190, 85, 129, 91, 190, 253, 116, 237, 189, 19, 189, 219, 189, 82, 27, 17, 62, 96, 45, 206, 189, 181, 118, 146, 61, 165, 91, 109, 62, 219, 67, 43, 187, 55, 152, 182, 189, 90, 51, 132, 62, 164, 95, 168, 190, 201, 148, 54, 190, 114, 36, 32, 190, 12, 191, 25, 62, 88, 80, 96, 60, 112, 229, 215, 186, 83, 186, 101, 60, 35, 44, 80, 62, 138, 81, 2, 62, 128, 59, 119, 62, 210, 234, 11, 190, 97, 193, 251, 189, 95, 54, 45, 189, 78, 124, 252, 61, 106, 120, 130, 60, 131, 160, 116, 62, 238, 193, 130, 188, 208, 199, 130, 189, 0, 18, 3, 190, 178, 115, 173, 61, 253, 32, 214, 189, 39, 174, 121, 61, 169, 35, 136, 61, 184, 163, 172, 61, 116, 234, 4, 190, 235, 67, 69, 62, 198, 27, 73, 190, 176, 153, 189, 61, 214, 188, 140, 59, 123, 70, 27, 189, 245, 200, 176, 60, 89, 96, 155, 62, 117, 183, 146, 61, 131, 198, 9, 191, 93, 85, 104, 62, 202, 191, 156, 62, 189, 63, 131, 62, 81, 119, 129, 189, 104, 95, 133, 62, 112, 219, 10, 189, 148, 235, 251, 60, 68, 210, 17, 191, 252, 133, 42, 62, 164, 237, 11, 189, 111, 204, 225, 59, 227, 89, 15, 60, 127, 49, 7, 191, 154, 183, 176, 190, 216, 149, 92, 61, 143, 236, 120, 190, 57, 214, 32, 61, 66, 195, 211, 59, 120, 103, 198, 190, 24, 51, 238, 190, 214, 110, 177, 190, 238, 213, 69, 62, 118, 158, 250, 61, 173, 14, 71, 62, 79, 97, 188, 61, 209, 230, 88, 188, 71, 139, 1, 62, 211, 154, 47, 190, 156, 29, 57, 61, 12, 206, 131, 190, 232, 220, 71, 61, 12, 57, 68, 62, 80, 1, 201, 190, 42, 2, 192, 189, 164, 167, 52, 190, 176, 148, 177, 61, 195, 112, 10, 188, 253, 99, 6, 62, 213, 174, 114, 190, 29, 174, 77, 190, 93, 229, 1, 62, 115, 154, 6, 189, 48, 237, 5, 62, 20, 252, 4, 62, 203, 70, 23, 190, 192, 173, 43, 189, 139, 178, 146, 190, 72, 162, 12, 62, 86, 112, 137, 190, 117, 154, 199, 61, 62, 137, 161, 61, 150, 224, 151, 60, 152, 122, 208, 61, 193, 231, 133, 59, 146, 176, 38, 62, 172, 182, 237, 59, 52, 54, 181, 190, 129, 165, 146, 62, 4, 142, 82, 62, 211, 138, 163, 188, 225, 201, 42, 189, 32, 98, 180, 190, 71, 207, 46, 189, 200, 149, 36, 62, 193, 76, 23, 191, 160, 94, 151, 61, 144, 68, 2, 190, 110, 79, 178, 61, 197, 101, 71, 62, 30, 228, 204, 189, 226, 57, 12, 191, 215, 215, 186, 189, 239, 12, 188, 61, 118, 133, 144, 190, 88, 88, 214, 189, 243, 229, 237, 61, 221, 193, 171, 189, 33, 212, 7, 62, 185, 39, 140, 190, 117, 243, 7, 189, 134, 124, 156, 190, 210, 68, 12, 62, 243, 15, 211, 186, 142, 242, 142, 189, 163, 85, 74, 190, 19, 134, 12, 61, 248, 206, 203, 61, 215, 77, 85, 190, 56, 228, 171, 189, 178, 227, 187, 62, 104, 36, 202, 189, 229, 224, 216, 189, 105, 19, 36, 189, 140, 138, 96, 191, 170, 171, 51, 61, 250, 79, 110, 190, 170, 199, 225, 61, 30, 43, 177, 62, 46, 184, 60, 62, 186, 174, 157, 186, 14, 17, 27, 189, 126, 212, 86, 190, 81, 87, 253, 61, 60, 228, 120, 189, 184, 171, 234, 189, 101, 127, 149, 60, 63, 45, 49, 190, 172, 138, 24, 190, 30, 140, 130, 61, 49, 193, 148, 190, 130, 184, 239, 61, 237, 63, 139, 61, 223, 16, 45, 62, 171, 177, 114, 61, 222, 118, 55, 62, 183, 25, 86, 61, 136, 52, 40, 189, 75, 69, 197, 189, 65, 240, 25, 62, 83, 23, 10, 190, 105, 119, 152, 60, 205, 95, 131, 189, 40, 87, 89, 190, 192, 162, 173, 189, 38, 13, 212, 61, 198, 183, 51, 190, 35, 203, 143, 190, 56, 163, 224, 188, 144, 176, 240, 61, 0, 28, 188, 62, 153, 187, 91, 62, 216, 223, 241, 61, 123, 244, 138, 62, 160, 163, 43, 62, 192, 221, 149, 62, 46, 50, 18, 190, 250, 54, 201, 60, 109, 154, 46, 190, 164, 75, 221, 61, 106, 177, 168, 188, 187, 241, 224, 59, 176, 110, 241, 61, 77, 138, 90, 188, 110, 75, 227, 189, 61, 187, 85, 190, 41, 46, 183, 61, 36, 177, 85, 190, 88, 219, 220, 189, 197, 102, 222, 189, 154, 94, 172, 61, 3, 146, 0, 190, 70, 200, 99, 62, 206, 38, 18, 190, 182, 229, 11, 190, 242, 236, 74, 62, 166, 43, 16, 189, 93, 164, 189, 61, 155, 89, 169, 188, 178, 119, 150, 190, 21, 134, 47, 189, 159, 137, 141, 189, 226, 202, 17, 62, 33, 10, 32, 62, 210, 71, 47, 62, 185, 17, 19, 62, 115, 132, 169, 61, 225, 101, 47, 62, 28, 113, 39, 189, 17, 62, 35, 62, 135, 117, 57, 61, 149, 250, 211, 189, 79, 193, 181, 61, 252, 144, 189, 57, 22, 130, 141, 187, 14, 244, 145, 190, 202, 223, 197, 189, 111, 15, 208, 190, 118, 8, 145, 189, 93, 110, 38, 189, 127, 141, 57, 62, 38, 97, 47, 62, 1, 168, 203, 61, 143, 141, 211, 62, 39, 159, 4, 62, 53, 185, 61, 191, 111, 81, 95, 190, 13, 76, 85, 61, 27, 205, 130, 62, 123, 15, 226, 190, 73, 127, 198, 62, 24, 169, 68, 63, 60, 143, 145, 62, 141, 100, 147, 190, 4, 189, 186, 190, 193, 169, 216, 190, 163, 164, 223, 190, 103, 200, 69, 189, 126, 100, 11, 61, 202, 162, 206, 190, 62, 62, 108, 62, 13, 49, 84, 190, 218, 36, 11, 189, 42, 100, 67, 191, 11, 199, 95, 191, 227, 152, 130, 62, 207, 115, 85, 62, 87, 192, 239, 188, 46, 228, 191, 189, 107, 173, 195, 61, 84, 178, 199, 189, 5, 174, 174, 62, 164, 235, 169, 61, 30, 176, 20, 62, 251, 70, 206, 189, 39, 253, 135, 190, 37, 42, 192, 191, 122, 125, 51, 62, 99, 195, 104, 62, 11, 205, 163, 190, 190, 144, 126, 190, 84, 77, 120, 61, 158, 108, 175, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 206, 29, 117, 62, 59, 238, 162, 62, 53, 66, 4, 191, 207, 85, 235, 189, 186, 67, 185, 190, 112, 108, 175, 61, 239, 146, 199, 189, 115, 87, 136, 61, 110, 167, 231, 189, 92, 61, 62, 190, 64, 140, 112, 189, 229, 38, 82, 189, 156, 127, 5, 62, 145, 193, 27, 190, 32, 152, 170, 188, 96, 105, 23, 62, 91, 126, 157, 61, 145, 236, 39, 60, 66, 154, 220, 189, 176, 28, 75, 61, 34, 113, 154, 62, 111, 106, 32, 190, 221, 108, 30, 62, 128, 36, 197, 189, 191, 141, 147, 187, 165, 3, 213, 190, 33, 19, 159, 62, 185, 184, 68, 62, 83, 65, 128, 61, 193, 180, 55, 190, 207, 82, 85, 62, 35, 54, 153, 190, 187, 213, 60, 190, 50, 190, 191, 190, 147, 130, 176, 61, 197, 88, 16, 61, 243, 57, 101, 62, 212, 172, 241, 61, 49, 89, 16, 62, 9, 26, 153, 62, 82, 118, 90, 61, 43, 156, 171, 62, 22, 0, 1, 61, 237, 197, 38, 191, 122, 147, 143, 62, 248, 123, 198, 61, 71, 109, 239, 61, 20, 193, 188, 62, 10, 99, 18, 62, 120, 1, 233, 189, 22, 10, 209, 60, 44, 59, 210, 188, 231, 130, 12, 191, 223, 35, 24, 62, 129, 154, 0, 61, 191, 48, 48, 190, 137, 12, 217, 59, 17, 161, 5, 60, 235, 62, 136, 190, 21, 245, 212, 189, 37, 47, 41, 62, 153, 143, 247, 189, 15, 76, 24, 190, 158, 10, 135, 61, 176, 200, 216, 190, 34, 169, 155, 190, 103, 71, 12, 61, 236, 121, 156, 62, 182, 63, 92, 62, 135, 64, 174, 61, 13, 170, 180, 62, 244, 240, 2, 189, 158, 236, 210, 187, 148, 18, 135, 62, 164, 127, 50, 62, 213, 73, 7, 191, 75, 79, 226, 188, 109, 237, 84, 62, 6, 111, 17, 62, 94, 233, 105, 62, 78, 136, 127, 61, 5, 7, 163, 61, 247, 89, 255, 189, 217, 183, 128, 189, 123, 253, 8, 191, 75, 103, 190, 188, 11, 78, 101, 189, 42, 9, 28, 190, 172, 179, 161, 61, 125, 5, 167, 61, 248, 164, 95, 189, 146, 157, 139, 190, 233, 96, 102, 62, 36, 241, 98, 61, 219, 9, 25, 189, 225, 185, 183, 61, 196, 151, 12, 190, 77, 216, 9, 62, 235, 112, 242, 61, 60, 78, 99, 62, 58, 90, 142, 61, 133, 31, 2, 191, 230, 73, 152, 190, 51, 172, 134, 62, 153, 162, 153, 190, 131, 26, 42, 62, 168, 113, 13, 61, 240, 39, 176, 60, 199, 85, 254, 190, 244, 55, 170, 190, 84, 195, 236, 190, 55, 172, 178, 62, 231, 44, 5, 62, 175, 241, 72, 191, 37, 111, 147, 60, 103, 67, 165, 61, 76, 24, 211, 188, 214, 167, 231, 189, 4, 44, 111, 189, 199, 38, 186, 60, 27, 113, 198, 188, 41, 65, 17, 190, 52, 24, 0, 190, 233, 70, 124, 62, 237, 248, 102, 62, 28, 27, 56, 191, 194, 238, 96, 62, 6, 182, 147, 60, 89, 1, 17, 62, 250, 10, 199, 62, 47, 156, 38, 190, 30, 229, 193, 189, 69, 231, 168, 190, 198, 191, 68, 61, 30, 175, 192, 189, 141, 203, 16, 190, 158, 31, 119, 190, 106, 91, 140, 190, 1, 112, 237, 189, 184, 253, 57, 59, 74, 77, 97, 60, 27, 96, 65, 190, 143, 69, 233, 59, 31, 131, 65, 62, 192, 9, 150, 190, 5, 246, 110, 189, 40, 196, 9, 62, 26, 144, 54, 62, 155, 88, 152, 62, 59, 22, 188, 61, 136, 140, 127, 61, 17, 172, 65, 190, 27, 224, 125, 190, 164, 167, 153, 190, 62, 149, 135, 62, 184, 27, 49, 62, 213, 28, 188, 188, 195, 27, 149, 189, 66, 61, 47, 60, 181, 149, 151, 190, 35, 48, 226, 61, 157, 254, 1, 62, 30, 242, 12, 62, 78, 42, 46, 190, 44, 252, 234, 61, 217, 250, 249, 189, 48, 253, 60, 190, 93, 163, 9, 62, 48, 217, 181, 61, 35, 50, 29, 190, 130, 82, 21, 190, 10, 199, 146, 188, 29, 110, 28, 59, 161, 57, 232, 60, 72, 194, 238, 189, 82, 199, 69, 188, 75, 146, 130, 189, 177, 173, 152, 189, 234, 23, 17, 190, 76, 90, 95, 58, 213, 150, 208, 60, 166, 109, 142, 189, 148, 214, 179, 61, 194, 236, 110, 189, 129, 53, 89, 189, 217, 181, 236, 60, 88, 47, 37, 190, 46, 1, 74, 189, 249, 163, 55, 189, 60, 207, 65, 61, 141, 190, 212, 61, 23, 50, 31, 62, 4, 12, 44, 190, 161, 123, 75, 189, 231, 152, 4, 62, 238, 45, 120, 61, 107, 20, 21, 62, 84, 141, 61, 189, 81, 83, 64, 62, 237, 149, 145, 61, 138, 96, 161, 62, 64, 93, 57, 62, 194, 197, 201, 189, 172, 184, 114, 190, 125, 10, 159, 189, 22, 120, 108, 61, 213, 16, 33, 62, 122, 148, 59, 61, 212, 194, 190, 61, 190, 206, 246, 188, 164, 154, 153, 61, 67, 106, 245, 61, 254, 51, 147, 190, 179, 80, 125, 60, 194, 134, 156, 61, 79, 183, 29, 190, 121, 216, 55, 61, 178, 43, 57, 62, 191, 212, 142, 61, 58, 183, 211, 61, 102, 156, 3, 59, 11, 240, 8, 62, 89, 149, 53, 62, 155, 94, 241, 61, 31, 224, 80, 189, 205, 148, 141, 61, 6, 116, 61, 190, 239, 48, 178, 190, 198, 113, 17, 191, 157, 117, 20, 190, 136, 67, 54, 190, 241, 125, 176, 60, 175, 54, 48, 62, 69, 255, 68, 188, 124, 40, 228, 61, 76, 95, 40, 62, 162, 28, 240, 61, 3, 92, 210, 189, 141, 14, 101, 62, 119, 163, 167, 61, 203, 231, 190, 59, 182, 243, 239, 61, 10, 226, 55, 62, 223, 147, 42, 190, 202, 64, 185, 62, 129, 39, 198, 60, 168, 222, 110, 62, 189, 132, 135, 61, 27, 49, 0, 62, 154, 250, 218, 189, 184, 140, 166, 61, 46, 120, 49, 62, 43, 120, 113, 60, 27, 212, 22, 62, 206, 186, 27, 188, 34, 220, 138, 187, 240, 21, 61, 190, 228, 158, 50, 190, 208, 99, 9, 61, 76, 58, 227, 62, 149, 194, 244, 61, 204, 97, 12, 61, 83, 109, 124, 61, 247, 106, 29, 62, 230, 84, 174, 62, 1, 11, 138, 60, 179, 235, 52, 60, 241, 53, 156, 190, 145, 141, 15, 62, 206, 29, 57, 62, 159, 21, 189, 61, 209, 212, 159, 189, 167, 97, 137, 61, 245, 51, 51, 190, 74, 242, 15, 190, 143, 113, 137, 61, 166, 64, 189, 190, 65, 53, 2, 190, 11, 87, 131, 61, 4, 36, 19, 190, 187, 208, 171, 188, 13, 164, 166, 62, 33, 196, 205, 190, 48, 136, 222, 189, 25, 182, 210, 189, 88, 204, 218, 60, 165, 150, 85, 61, 239, 248, 177, 189, 226, 141, 45, 190, 12, 15, 196, 62, 144, 74, 59, 61, 189, 249, 237, 61, 112, 9, 107, 62, 46, 198, 44, 189, 156, 137, 51, 190, 227, 53, 24, 62, 193, 216, 234, 60, 99, 255, 64, 188, 89, 81, 234, 188, 128, 107, 128, 61, 81, 213, 138, 190, 75, 64, 38, 190, 3, 248, 148, 61, 242, 51, 74, 62, 144, 112, 31, 190, 240, 1, 40, 190, 142, 137, 163, 61, 119, 107, 85, 189, 132, 196, 236, 189, 164, 161, 220, 61, 71, 10, 47, 60, 199, 120, 41, 190, 133, 88, 212, 189, 78, 147, 12, 61, 140, 63, 63, 188, 11, 133, 197, 62, 202, 61, 245, 61, 18, 18, 39, 61, 77, 189, 90, 61, 10, 216, 73, 190, 26, 205, 144, 62, 90, 34, 239, 61, 64, 62, 68, 190, 241, 247, 181, 190, 98, 104, 117, 190, 65, 238, 235, 190, 144, 177, 126, 61, 212, 142, 55, 62, 234, 40, 58, 190, 34, 47, 47, 62, 2, 221, 71, 190, 32, 47, 225, 60, 209, 29, 49, 191, 129, 79, 116, 191, 184, 224, 191, 61, 43, 206, 200, 61, 186, 225, 197, 189, 100, 115, 215, 190, 160, 209, 11, 188, 247, 48, 178, 190, 234, 151, 109, 190, 57, 227, 58, 62, 137, 54, 144, 61, 46, 165, 78, 190, 102, 118, 160, 188, 241, 172, 154, 191, 223, 17, 232, 61, 162, 192, 32, 62, 41, 88, 72, 191, 56, 140, 149, 190, 108, 6, 12, 62, 203, 187, 78, 62, 166, 91, 105, 63, 62, 168, 190, 190, 198, 204, 191, 189, 145, 178, 49, 191, 88, 196, 158, 190, 158, 188, 216, 188, 27, 5, 142, 62, 191, 93, 196, 60, 112, 42, 251, 189, 196, 38, 196, 61, 137, 15, 124, 190, 4, 122, 254, 189, 143, 37, 139, 190, 36, 129, 41, 190, 92, 43, 167, 61, 34, 237, 79, 62, 66, 188, 226, 61, 56, 240, 92, 191, 136, 131, 136, 61, 202, 37, 56, 189, 113, 230, 166, 189, 14, 8, 82, 189, 59, 74, 129, 190, 60, 46, 229, 189, 143, 158, 163, 190, 66, 75, 119, 191, 39, 36, 93, 62, 162, 140, 39, 190, 42, 183, 130, 62, 89, 234, 226, 190, 19, 3, 94, 62, 133, 207, 249, 62, 79, 106, 188, 62, 70, 178, 42, 189, 14, 119, 142, 189, 45, 254, 66, 190, 31, 232, 103, 190, 85, 173, 190, 190, 190, 110, 57, 190, 47, 213, 159, 62, 213, 175, 107, 190, 35, 164, 3, 62, 245, 246, 94, 61, 197, 189, 33, 61, 171, 59, 14, 191, 215, 140, 94, 191, 225, 38, 69, 189, 103, 237, 3, 62, 136, 156, 61, 188, 0, 221, 198, 189, 179, 230, 109, 62, 223, 44, 6, 189, 179, 181, 37, 187, 111, 236, 101, 62, 149, 22, 12, 62, 74, 228, 195, 61, 19, 97, 133, 60, 42, 40, 148, 191, 132, 215, 100, 189, 142, 134, 6, 62, 113, 53, 70, 191, 114, 251, 64, 190, 148, 137, 56, 62, 218, 97, 21, 189, 157, 93, 18, 61, 217, 156, 171, 61, 89, 2, 50, 190, 13, 144, 170, 61, 79, 211, 240, 61, 186, 78, 238, 60, 169, 78, 47, 189, 103, 49, 65, 190, 73, 232, 69, 190, 182, 36, 79, 190, 24, 185, 186, 61, 164, 52, 99, 190, 67, 92, 145, 61, 166, 89, 124, 61, 87, 168, 35, 190, 167, 69, 179, 59, 200, 14, 15, 190, 214, 53, 8, 190, 74, 171, 140, 61, 250, 235, 115, 190, 11, 74, 203, 61, 170, 211, 254, 58, 34, 34, 86, 189, 161, 75, 22, 190, 15, 151, 182, 60, 197, 83, 225, 188, 35, 171, 144, 61, 190, 224, 195, 189, 125, 101, 139, 61, 16, 23, 111, 190, 170, 15, 83, 190, 12, 104, 101, 190, 151, 20, 190, 190, 84, 35, 35, 190, 71, 1, 228, 189, 16, 84, 16, 63, 175, 150, 165, 62, 78, 32, 161, 62, 192, 210, 36, 62, 185, 90, 51, 61, 30, 155, 250, 61, 74, 34, 245, 61, 244, 109, 48, 189, 36, 32, 1, 191, 29, 216, 27, 62, 202, 146, 13, 190, 69, 226, 46, 62, 20, 53, 131, 188, 137, 166, 157, 61, 85, 44, 125, 189, 225, 152, 198, 61, 217, 97, 113, 62, 227, 254, 53, 191, 135, 13, 206, 61, 50, 191, 6, 189, 116, 188, 203, 189, 54, 189, 12, 61, 206, 75, 144, 61, 74, 32, 132, 190, 190, 239, 72, 190, 136, 164, 130, 62, 127, 168, 216, 189, 177, 150, 31, 62, 75, 182, 17, 62, 65, 186, 186, 62, 181, 189, 130, 62, 155, 44, 195, 190, 55, 141, 242, 189, 255, 203, 165, 190, 163, 187, 68, 190, 176, 18, 62, 61, 38, 158, 166, 61, 202, 235, 226, 190, 246, 19, 4, 61, 153, 234, 55, 190, 49, 25, 250, 189, 82, 230, 112, 189, 246, 146, 5, 190, 64, 191, 51, 190, 125, 92, 147, 61, 241, 106, 187, 189, 157, 230, 217, 61, 185, 68, 182, 188, 125, 119, 17, 62, 32, 51, 163, 62, 110, 229, 145, 61, 197, 158, 104, 61, 160, 134, 204, 61, 52, 138, 101, 61, 21, 76, 205, 190, 124, 72, 188, 62, 72, 96, 168, 62, 204, 248, 190, 189, 252, 18, 166, 190, 216, 93, 111, 189, 54, 55, 181, 190, 188, 35, 159, 62, 112, 217, 177, 62, 4, 220, 90, 190, 211, 66, 42, 190, 242, 40, 212, 190, 62, 205, 155, 189, 42, 201, 188, 189, 254, 45, 118, 60, 247, 189, 222, 189, 207, 3, 9, 190, 54, 34, 184, 61, 172, 76, 219, 61, 35, 42, 207, 189, 55, 86, 157, 190, 139, 178, 48, 61, 230, 102, 37, 190, 53, 212, 219, 189, 139, 26, 36, 190, 123, 15, 54, 62, 33, 78, 189, 60, 58, 58, 7, 63, 93, 195, 209, 189, 75, 247, 210, 61, 168, 123, 14, 62, 69, 75, 106, 185, 188, 167, 213, 190, 37, 9, 75, 62, 134, 220, 241, 61, 217, 220, 84, 190, 234, 106, 146, 190, 222, 120, 60, 62, 21, 154, 41, 62, 146, 11, 133, 63, 222, 20, 172, 190, 97, 46, 24, 61, 100, 86, 35, 191, 30, 119, 41, 189, 124, 39, 138, 190, 196, 133, 14, 63, 22, 11, 133, 62, 8, 52, 63, 61, 161, 109, 132, 62, 91, 188, 194, 190, 125, 30, 8, 189, 233, 102, 27, 191, 112, 77, 7, 191, 71, 92, 98, 189, 50, 150, 134, 62, 41, 90, 164, 58, 127, 39, 126, 191, 152, 76, 133, 61, 254, 100, 240, 188, 16, 133, 93, 190, 251, 144, 157, 62, 235, 121, 142, 189, 99, 65, 97, 61, 63, 239, 82, 189, 114, 221, 170, 191, 203, 222, 75, 61, 191, 161, 8, 61, 71, 76, 161, 62, 224, 87, 237, 190, 4, 244, 21, 62, 146, 236, 168, 62, 182, 192, 189, 187, 96, 4, 0, 190, 246, 44, 241, 59, 194, 130, 46, 190, 154, 89, 255, 189, 152, 174, 162, 189, 177, 210, 24, 62, 95, 205, 0, 190, 33, 35, 190, 61, 204, 161, 166, 60, 96, 61, 237, 188, 18, 155, 152, 189, 24, 207, 162, 189, 61, 49, 167, 188, 138, 232, 175, 189, 154, 104, 55, 190, 234, 39, 236, 189, 133, 4, 37, 190, 50, 184, 219, 61, 165, 244, 40, 190, 78, 82, 140, 60, 117, 153, 174, 61, 5, 153, 76, 61, 14, 231, 68, 61, 219, 129, 53, 187, 247, 167, 32, 190, 215, 124, 153, 189, 246, 40, 237, 61, 109, 176, 4, 190, 58, 77, 94, 188, 119, 162, 71, 187, 59, 198, 197, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 34, 173, 61, 154, 110, 139, 62, 162, 58, 115, 61, 113, 87, 27, 62, 170, 129, 161, 62, 5, 155, 126, 190, 142, 91, 48, 62, 240, 171, 94, 62, 60, 27, 235, 189, 226, 213, 130, 62, 56, 56, 48, 60, 24, 111, 235, 61, 242, 159, 33, 190, 238, 34, 192, 189, 5, 253, 55, 62, 69, 162, 133, 62, 43, 8, 151, 62, 149, 216, 149, 61, 143, 215, 52, 190, 237, 203, 146, 62, 86, 141, 138, 189, 125, 49, 225, 188, 155, 7, 162, 62, 165, 155, 66, 62, 63, 119, 57, 189, 93, 42, 194, 59, 150, 115, 117, 61, 101, 79, 34, 188, 74, 226, 219, 61, 124, 95, 161, 61, 6, 65, 21, 61, 212, 57, 145, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 7, 34, 63, 37, 172, 192, 190, 220, 107, 253, 61, 66, 67, 152, 62, 226, 18, 237, 189, 161, 231, 229, 62, 185, 134, 77, 62, 232, 198, 229, 62, 120, 88, 0, 62, 198, 203, 125, 190, 229, 82, 98, 190, 78, 74, 60, 63, 90, 98, 217, 189, 35, 35, 175, 62, 186, 15, 211, 190, 39, 83, 166, 190, 146, 136, 187, 190, 166, 145, 208, 62, 219, 55, 89, 59, 142, 66, 157, 189, 125, 32, 48, 190, 24, 254, 102, 190, 204, 19, 6, 190, 139, 67, 71, 63, 119, 236, 72, 63, 141, 66, 132, 62, 123, 8, 5, 61, 132, 174, 244, 190, 178, 247, 213, 62, 234, 249, 128, 62, 67, 22, 96, 63, 49, 194, 184, 61, 253, 163, 240, 189, 232, 228, 130, 60, 52, 202, 163, 190, 233, 192, 79, 61, 62, 61, 98, 190, 53, 54, 76, 62, 12, 57, 189, 189, 255, 72, 171, 190, 60, 188, 111, 62, 75, 45, 101, 190, 240, 214, 40, 188, 254, 242, 49, 62, 123, 197, 162, 189, 170, 235, 62, 59, 134, 60, 249, 188, 75, 209, 239, 60, 77, 239, 131, 190, 137, 174, 106, 189, 227, 145, 159, 189, 55, 35, 38, 190, 98, 42, 58, 62, 106, 62, 169, 61, 203, 18, 117, 190, 125, 146, 88, 189, 28, 245, 108, 61, 249, 39, 181, 189, 53, 217, 156, 188, 133, 119, 93, 62, 249, 112, 242, 189, 191, 244, 47, 62, 191, 200, 250, 187, 0, 91, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 34, 62, 189, 23, 160, 99, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 187, 191, 60, 64, 214, 139, 63, 76, 47, 164, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 21, 165, 191, 178, 71, 33, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}