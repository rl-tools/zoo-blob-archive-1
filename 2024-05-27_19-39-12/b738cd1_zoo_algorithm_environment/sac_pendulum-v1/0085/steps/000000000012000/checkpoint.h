// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 68, 187, 190, 206, 53, 39, 63, 186, 180, 213, 190, 55, 249, 48, 63, 183, 156, 129, 191, 181, 67, 145, 190, 253, 176, 56, 62, 25, 36, 141, 63, 132, 0, 108, 62, 109, 45, 102, 63, 137, 71, 1, 63, 141, 182, 68, 62, 218, 195, 34, 63, 240, 226, 122, 63, 26, 51, 105, 62, 171, 86, 8, 191, 11, 120, 51, 191, 19, 2, 28, 191, 33, 143, 15, 191, 200, 197, 23, 63, 226, 153, 223, 190, 255, 243, 112, 190, 92, 222, 119, 190, 189, 197, 15, 62, 247, 129, 7, 191, 129, 60, 150, 191, 128, 165, 135, 190, 79, 231, 235, 190, 113, 219, 175, 188, 194, 119, 129, 62, 30, 175, 100, 190, 212, 203, 5, 191, 69, 233, 167, 62, 127, 71, 136, 63, 207, 142, 63, 191, 85, 139, 219, 190, 104, 252, 197, 190, 213, 128, 169, 190, 255, 104, 34, 191, 14, 121, 63, 190, 10, 46, 185, 61, 241, 203, 52, 191, 168, 161, 197, 190, 63, 101, 80, 191, 5, 71, 87, 189, 72, 188, 77, 190, 38, 22, 204, 60, 76, 178, 197, 188, 210, 251, 122, 187, 161, 196, 152, 63, 108, 164, 114, 62, 161, 22, 1, 190, 234, 18, 187, 191, 103, 103, 192, 190, 251, 27, 193, 189, 199, 125, 33, 63, 142, 184, 214, 62, 213, 106, 2, 62, 131, 227, 46, 61, 176, 4, 245, 190, 85, 25, 26, 63, 53, 215, 98, 191, 107, 46, 214, 190, 145, 50, 165, 190, 173, 4, 211, 190, 206, 61, 72, 189, 63, 97, 59, 190, 120, 146, 119, 191, 164, 2, 88, 190, 179, 21, 208, 61, 169, 82, 86, 63, 222, 136, 100, 62, 40, 13, 89, 190, 39, 144, 11, 191, 198, 100, 78, 62, 201, 36, 234, 190, 4, 245, 131, 191, 30, 121, 24, 191, 112, 90, 74, 191, 126, 73, 77, 62, 181, 167, 213, 62, 233, 15, 49, 63, 217, 74, 84, 191, 99, 140, 243, 189, 134, 138, 74, 62, 55, 35, 136, 62, 46, 45, 209, 190, 180, 100, 104, 190, 39, 228, 143, 191, 41, 183, 150, 190, 19, 86, 21, 190, 199, 195, 203, 188, 82, 48, 84, 62, 170, 168, 131, 191, 136, 193, 50, 63, 4, 148, 228, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 153, 160, 190, 28, 145, 71, 62, 106, 159, 148, 60, 233, 148, 33, 190, 137, 25, 192, 189, 158, 47, 147, 62, 180, 241, 97, 62, 85, 88, 163, 62, 88, 177, 177, 188, 222, 169, 103, 190, 222, 202, 66, 190, 146, 163, 137, 191, 96, 105, 122, 61, 94, 153, 45, 61, 236, 203, 211, 62, 147, 189, 215, 62, 191, 191, 104, 62, 240, 79, 156, 62, 241, 180, 254, 188, 39, 118, 146, 62, 212, 134, 159, 190, 200, 78, 170, 62, 213, 251, 226, 62, 9, 11, 213, 190, 46, 79, 13, 190, 87, 76, 53, 190, 95, 173, 17, 191, 47, 124, 241, 62, 6, 55, 21, 62, 149, 131, 218, 59, 38, 216, 134, 62, 220, 242, 250, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 114, 23, 62, 79, 102, 126, 62, 227, 67, 177, 190, 3, 59, 95, 190, 105, 252, 219, 190, 249, 52, 188, 190, 218, 222, 244, 190, 27, 201, 147, 62, 212, 10, 242, 189, 190, 104, 207, 61, 224, 6, 193, 189, 204, 175, 190, 59, 129, 148, 64, 191, 253, 34, 145, 191, 119, 123, 108, 62, 110, 216, 227, 61, 83, 60, 183, 189, 161, 70, 186, 190, 126, 5, 87, 61, 26, 125, 168, 190, 137, 226, 21, 191, 85, 200, 145, 62, 249, 239, 140, 62, 144, 31, 49, 62, 86, 78, 100, 190, 145, 115, 135, 191, 196, 228, 78, 61, 215, 29, 56, 62, 230, 210, 168, 191, 85, 53, 179, 190, 196, 137, 151, 189, 145, 57, 174, 61, 132, 53, 176, 190, 225, 144, 110, 190, 82, 250, 122, 61, 255, 169, 230, 62, 63, 146, 193, 62, 213, 66, 255, 61, 212, 199, 131, 62, 1, 254, 206, 189, 37, 52, 119, 62, 80, 37, 152, 188, 92, 19, 131, 62, 145, 241, 20, 190, 76, 214, 184, 61, 254, 221, 81, 62, 218, 153, 89, 61, 115, 91, 134, 61, 63, 103, 175, 60, 170, 202, 119, 190, 115, 121, 213, 189, 163, 101, 142, 62, 108, 140, 148, 190, 51, 115, 220, 189, 35, 205, 178, 190, 90, 214, 131, 190, 71, 239, 246, 60, 224, 69, 171, 61, 90, 181, 42, 190, 131, 25, 125, 190, 117, 77, 112, 62, 110, 85, 72, 62, 48, 220, 206, 187, 44, 132, 5, 190, 224, 117, 218, 61, 123, 120, 7, 62, 62, 226, 254, 190, 201, 216, 154, 62, 74, 26, 139, 61, 207, 54, 229, 189, 135, 240, 24, 62, 187, 195, 18, 62, 234, 118, 250, 190, 171, 55, 40, 190, 79, 93, 5, 62, 92, 239, 6, 191, 109, 5, 25, 189, 140, 208, 140, 62, 60, 185, 226, 190, 42, 240, 59, 62, 250, 95, 218, 190, 255, 34, 47, 190, 253, 174, 182, 190, 1, 83, 44, 62, 229, 211, 148, 190, 78, 207, 10, 190, 74, 92, 161, 188, 162, 112, 139, 190, 38, 187, 234, 60, 118, 136, 148, 189, 190, 253, 39, 191, 102, 121, 87, 62, 76, 0, 128, 62, 254, 128, 157, 190, 14, 214, 27, 190, 161, 103, 207, 61, 31, 181, 92, 61, 107, 168, 6, 189, 78, 33, 112, 62, 116, 178, 228, 190, 94, 222, 173, 61, 69, 166, 141, 62, 8, 52, 151, 62, 108, 22, 50, 190, 196, 9, 68, 190, 231, 230, 216, 189, 249, 81, 48, 190, 159, 233, 45, 62, 127, 90, 122, 62, 23, 191, 170, 62, 5, 54, 130, 190, 14, 216, 244, 60, 254, 135, 14, 61, 232, 230, 184, 189, 76, 202, 82, 62, 36, 168, 251, 60, 4, 153, 43, 187, 75, 51, 177, 190, 94, 70, 136, 190, 18, 14, 181, 61, 11, 143, 169, 188, 134, 114, 21, 62, 181, 72, 204, 188, 132, 52, 180, 188, 2, 136, 137, 62, 107, 27, 66, 189, 208, 203, 243, 189, 175, 236, 169, 62, 221, 63, 186, 190, 51, 108, 42, 190, 145, 159, 35, 190, 142, 109, 17, 62, 136, 65, 151, 60, 100, 6, 76, 60, 45, 40, 107, 59, 108, 80, 58, 60, 228, 157, 37, 62, 239, 186, 48, 62, 205, 62, 198, 190, 154, 236, 50, 190, 26, 13, 198, 188, 253, 250, 253, 61, 31, 215, 36, 189, 173, 89, 101, 62, 248, 17, 16, 61, 40, 24, 212, 189, 148, 12, 96, 190, 250, 195, 233, 61, 100, 57, 18, 187, 13, 240, 9, 61, 1, 202, 7, 60, 248, 227, 208, 189, 213, 140, 224, 190, 75, 1, 82, 62, 140, 56, 128, 190, 245, 97, 83, 61, 180, 51, 187, 187, 156, 151, 133, 188, 112, 216, 214, 189, 164, 60, 196, 62, 134, 163, 71, 189, 22, 219, 159, 191, 117, 158, 187, 62, 28, 145, 205, 62, 181, 141, 200, 62, 46, 61, 120, 189, 241, 147, 87, 62, 92, 230, 17, 189, 85, 99, 139, 188, 178, 206, 4, 191, 16, 111, 30, 62, 232, 47, 157, 189, 218, 86, 3, 60, 93, 43, 14, 188, 83, 19, 109, 191, 223, 238, 141, 190, 80, 92, 63, 62, 41, 55, 147, 190, 217, 206, 191, 61, 207, 179, 221, 61, 208, 96, 222, 190, 203, 208, 83, 191, 177, 12, 36, 191, 141, 146, 159, 62, 217, 147, 212, 61, 162, 12, 143, 62, 1, 107, 196, 61, 170, 138, 16, 190, 155, 90, 90, 62, 70, 75, 92, 190, 182, 106, 149, 61, 246, 172, 75, 190, 167, 43, 158, 61, 242, 95, 76, 62, 151, 67, 33, 191, 5, 151, 222, 189, 85, 23, 138, 190, 128, 118, 169, 61, 185, 86, 0, 189, 30, 241, 198, 62, 125, 96, 99, 190, 216, 84, 220, 189, 209, 155, 163, 62, 208, 12, 163, 61, 141, 123, 195, 61, 2, 61, 224, 61, 42, 82, 61, 187, 35, 3, 38, 61, 70, 86, 6, 191, 30, 62, 44, 62, 92, 51, 253, 190, 129, 24, 160, 61, 37, 145, 220, 188, 39, 222, 72, 62, 234, 223, 107, 62, 148, 50, 112, 189, 193, 177, 217, 62, 43, 119, 153, 187, 208, 97, 3, 191, 24, 99, 163, 62, 109, 240, 115, 62, 171, 243, 44, 189, 234, 125, 153, 60, 140, 26, 175, 190, 161, 44, 93, 190, 122, 222, 98, 62, 105, 147, 63, 191, 240, 155, 22, 62, 137, 218, 7, 190, 217, 235, 66, 61, 7, 158, 15, 61, 23, 124, 192, 189, 123, 240, 111, 191, 167, 216, 205, 190, 104, 145, 55, 62, 225, 226, 203, 189, 15, 147, 23, 190, 69, 4, 80, 61, 186, 15, 131, 190, 223, 75, 220, 61, 22, 11, 213, 190, 6, 217, 90, 189, 65, 187, 185, 190, 80, 46, 254, 61, 171, 7, 16, 61, 46, 190, 123, 190, 150, 1, 23, 190, 56, 96, 95, 59, 221, 126, 74, 62, 112, 95, 79, 190, 146, 228, 5, 191, 137, 17, 216, 62, 106, 214, 193, 189, 127, 230, 148, 190, 44, 150, 231, 60, 23, 172, 106, 191, 168, 138, 136, 190, 181, 178, 88, 191, 33, 183, 125, 62, 16, 20, 164, 62, 55, 202, 138, 62, 197, 226, 156, 188, 133, 2, 132, 61, 218, 57, 105, 190, 93, 71, 253, 61, 179, 221, 140, 188, 81, 19, 3, 190, 84, 129, 132, 60, 141, 206, 2, 190, 33, 122, 65, 189, 117, 208, 10, 190, 240, 93, 240, 189, 106, 105, 133, 62, 186, 134, 137, 61, 112, 213, 90, 62, 204, 201, 156, 62, 41, 141, 130, 61, 241, 37, 32, 190, 206, 154, 247, 190, 129, 179, 67, 189, 31, 46, 12, 62, 59, 125, 24, 190, 105, 175, 176, 60, 74, 139, 141, 190, 83, 219, 212, 61, 192, 162, 173, 189, 14, 116, 228, 61, 252, 153, 195, 60, 58, 130, 166, 190, 106, 146, 76, 189, 168, 42, 66, 62, 222, 198, 186, 62, 120, 232, 131, 62, 45, 116, 240, 61, 97, 43, 137, 62, 252, 254, 83, 189, 19, 95, 185, 62, 79, 212, 96, 190, 21, 131, 139, 190, 55, 190, 168, 190, 140, 226, 237, 61, 31, 48, 205, 188, 222, 157, 123, 188, 50, 158, 226, 61, 85, 142, 210, 61, 134, 188, 36, 190, 117, 10, 114, 190, 240, 117, 183, 61, 21, 123, 32, 190, 32, 250, 233, 189, 157, 67, 55, 190, 40, 148, 67, 59, 251, 56, 3, 191, 143, 255, 110, 62, 225, 36, 56, 190, 17, 247, 74, 190, 207, 43, 37, 62, 70, 31, 97, 188, 140, 180, 0, 188, 1, 47, 204, 61, 222, 156, 186, 190, 226, 133, 242, 189, 235, 189, 136, 190, 252, 50, 15, 62, 11, 210, 226, 61, 43, 68, 59, 62, 204, 229, 236, 61, 41, 82, 41, 190, 193, 125, 140, 62, 232, 203, 191, 189, 153, 150, 90, 191, 24, 144, 139, 190, 186, 219, 200, 189, 3, 118, 126, 61, 238, 225, 188, 61, 230, 163, 42, 189, 58, 219, 155, 190, 46, 161, 147, 189, 147, 246, 207, 190, 166, 32, 249, 189, 186, 42, 45, 189, 192, 130, 136, 62, 189, 8, 69, 62, 1, 168, 203, 61, 32, 1, 26, 191, 127, 162, 59, 62, 251, 79, 46, 191, 17, 94, 223, 190, 117, 192, 102, 189, 137, 143, 157, 62, 204, 106, 51, 191, 162, 242, 1, 63, 229, 174, 86, 63, 128, 15, 159, 62, 101, 110, 153, 190, 245, 84, 222, 190, 89, 214, 236, 190, 43, 178, 212, 190, 11, 235, 82, 62, 223, 128, 177, 60, 157, 142, 32, 191, 176, 52, 59, 62, 13, 28, 103, 190, 43, 179, 208, 62, 128, 149, 36, 191, 2, 92, 62, 191, 212, 26, 153, 62, 55, 243, 80, 62, 251, 22, 124, 188, 194, 11, 131, 189, 4, 120, 215, 61, 245, 38, 1, 190, 91, 171, 162, 62, 149, 230, 169, 61, 227, 29, 81, 62, 98, 59, 174, 188, 126, 141, 136, 190, 26, 97, 227, 191, 124, 19, 236, 61, 129, 106, 99, 62, 136, 184, 157, 190, 192, 165, 46, 191, 115, 33, 86, 61, 155, 85, 218, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 192, 159, 82, 62, 58, 126, 168, 62, 197, 229, 50, 191, 5, 245, 3, 190, 216, 17, 226, 190, 185, 37, 83, 189, 135, 148, 64, 190, 113, 46, 162, 62, 23, 55, 23, 190, 127, 249, 246, 189, 54, 192, 143, 61, 149, 151, 160, 190, 133, 50, 114, 189, 50, 77, 179, 190, 8, 162, 82, 62, 184, 182, 130, 62, 127, 89, 116, 189, 195, 239, 81, 189, 55, 30, 91, 190, 168, 85, 141, 189, 246, 213, 150, 61, 15, 246, 125, 61, 200, 83, 132, 62, 249, 123, 144, 190, 5, 245, 58, 62, 61, 150, 25, 191, 211, 242, 133, 62, 140, 125, 105, 62, 72, 222, 7, 59, 85, 227, 183, 190, 246, 32, 162, 62, 42, 153, 125, 190, 90, 170, 49, 190, 111, 190, 255, 190, 137, 132, 10, 62, 214, 94, 30, 62, 71, 98, 164, 62, 18, 171, 113, 61, 217, 190, 74, 62, 26, 51, 135, 62, 125, 7, 144, 189, 74, 218, 178, 62, 205, 101, 42, 61, 121, 160, 127, 191, 35, 187, 131, 62, 58, 79, 226, 61, 247, 46, 224, 60, 131, 69, 168, 62, 142, 84, 103, 62, 9, 135, 181, 190, 228, 3, 139, 61, 98, 59, 161, 188, 210, 89, 20, 191, 83, 5, 67, 61, 57, 39, 136, 190, 163, 224, 160, 190, 38, 126, 223, 58, 52, 48, 254, 189, 41, 235, 93, 190, 126, 83, 25, 190, 145, 234, 46, 62, 25, 104, 151, 190, 1, 166, 224, 189, 6, 20, 166, 61, 140, 133, 194, 190, 122, 191, 242, 190, 178, 180, 148, 61, 97, 83, 210, 62, 87, 76, 153, 62, 39, 175, 9, 61, 163, 153, 228, 62, 32, 160, 78, 188, 248, 168, 9, 190, 64, 161, 145, 62, 114, 237, 91, 62, 176, 8, 98, 191, 197, 115, 60, 189, 22, 214, 114, 62, 234, 88, 180, 61, 58, 28, 84, 62, 227, 20, 11, 62, 221, 159, 59, 190, 103, 120, 170, 189, 187, 136, 66, 189, 2, 123, 23, 191, 243, 145, 173, 189, 247, 99, 200, 190, 241, 24, 164, 190, 175, 9, 239, 61, 200, 30, 152, 189, 141, 59, 51, 188, 229, 52, 170, 190, 89, 201, 134, 62, 207, 246, 23, 190, 31, 218, 77, 60, 242, 91, 227, 61, 118, 69, 24, 63, 182, 81, 190, 61, 255, 162, 47, 62, 136, 110, 141, 62, 225, 182, 248, 61, 245, 171, 249, 190, 254, 30, 46, 62, 86, 20, 160, 62, 131, 84, 230, 190, 82, 174, 105, 62, 68, 69, 13, 62, 149, 20, 86, 191, 139, 166, 108, 190, 151, 153, 89, 61, 208, 10, 234, 190, 181, 144, 189, 62, 21, 48, 58, 62, 146, 205, 156, 191, 240, 202, 139, 61, 28, 171, 60, 62, 28, 145, 135, 188, 144, 34, 191, 189, 148, 127, 88, 190, 245, 207, 80, 189, 196, 237, 132, 61, 185, 46, 53, 189, 144, 209, 41, 189, 220, 122, 119, 62, 124, 242, 196, 62, 56, 154, 89, 191, 118, 130, 135, 62, 42, 188, 162, 189, 69, 135, 138, 62, 100, 56, 209, 62, 224, 4, 213, 190, 168, 188, 150, 189, 16, 123, 212, 190, 80, 189, 105, 61, 79, 18, 180, 59, 208, 222, 199, 188, 167, 148, 243, 190, 111, 161, 144, 190, 59, 99, 25, 60, 204, 122, 108, 62, 236, 129, 104, 61, 87, 92, 217, 189, 149, 126, 85, 190, 153, 232, 32, 62, 161, 165, 9, 191, 73, 11, 9, 190, 218, 76, 20, 62, 1, 210, 82, 62, 190, 176, 163, 62, 65, 2, 175, 189, 152, 16, 88, 59, 130, 180, 87, 190, 245, 4, 172, 189, 133, 135, 142, 190, 34, 245, 103, 62, 20, 224, 60, 62, 151, 109, 150, 61, 56, 230, 103, 190, 250, 22, 226, 61, 14, 136, 253, 190, 35, 48, 226, 61, 157, 254, 1, 62, 30, 242, 12, 62, 78, 42, 46, 190, 44, 252, 234, 61, 217, 250, 249, 189, 48, 253, 60, 190, 93, 163, 9, 62, 48, 217, 181, 61, 35, 50, 29, 190, 130, 82, 21, 190, 10, 199, 146, 188, 29, 110, 28, 59, 161, 57, 232, 60, 72, 194, 238, 189, 82, 199, 69, 188, 75, 146, 130, 189, 177, 173, 152, 189, 234, 23, 17, 190, 76, 90, 95, 58, 213, 150, 208, 60, 166, 109, 142, 189, 148, 214, 179, 61, 194, 236, 110, 189, 129, 53, 89, 189, 217, 181, 236, 60, 88, 47, 37, 190, 46, 1, 74, 189, 249, 163, 55, 189, 60, 207, 65, 61, 141, 190, 212, 61, 23, 50, 31, 62, 248, 148, 87, 190, 231, 171, 94, 189, 52, 102, 40, 62, 6, 224, 226, 61, 57, 64, 68, 62, 48, 14, 2, 189, 4, 159, 44, 62, 30, 146, 9, 61, 226, 26, 173, 62, 212, 37, 116, 62, 124, 153, 169, 189, 248, 74, 108, 190, 186, 104, 117, 189, 36, 26, 115, 61, 0, 149, 44, 62, 112, 21, 8, 61, 191, 224, 47, 62, 40, 30, 185, 189, 192, 138, 5, 62, 88, 81, 25, 62, 228, 162, 65, 190, 7, 195, 59, 61, 45, 13, 24, 61, 189, 1, 50, 190, 115, 19, 240, 60, 215, 57, 71, 62, 2, 245, 12, 62, 238, 160, 131, 61, 170, 124, 111, 186, 32, 28, 17, 62, 207, 179, 73, 62, 196, 186, 56, 62, 62, 15, 183, 188, 217, 194, 21, 62, 205, 120, 219, 189, 55, 97, 88, 189, 142, 112, 190, 190, 124, 147, 216, 189, 37, 115, 16, 190, 92, 217, 202, 189, 17, 100, 40, 62, 116, 108, 207, 188, 158, 17, 157, 61, 106, 150, 34, 62, 39, 63, 64, 62, 105, 254, 75, 189, 173, 165, 178, 61, 62, 101, 37, 190, 124, 137, 58, 188, 14, 204, 33, 62, 108, 165, 141, 62, 161, 73, 11, 190, 17, 168, 253, 62, 191, 198, 240, 189, 154, 203, 33, 62, 109, 72, 130, 62, 247, 43, 109, 61, 237, 191, 196, 188, 217, 1, 20, 62, 33, 166, 91, 62, 75, 111, 63, 188, 111, 93, 91, 62, 44, 173, 197, 188, 110, 244, 247, 189, 192, 13, 142, 190, 69, 106, 37, 190, 5, 58, 80, 62, 171, 218, 9, 63, 243, 36, 135, 62, 118, 102, 27, 61, 166, 252, 106, 61, 180, 150, 37, 190, 190, 130, 255, 62, 179, 204, 86, 190, 164, 91, 94, 191, 56, 39, 38, 191, 0, 233, 14, 62, 8, 229, 46, 62, 241, 203, 126, 62, 161, 145, 116, 188, 243, 143, 143, 62, 155, 211, 43, 190, 107, 253, 120, 190, 78, 118, 155, 61, 204, 55, 183, 190, 245, 165, 18, 189, 105, 179, 112, 61, 66, 130, 80, 191, 145, 72, 114, 191, 49, 234, 174, 62, 59, 50, 16, 191, 41, 215, 204, 189, 144, 182, 7, 190, 152, 250, 174, 61, 221, 188, 108, 189, 129, 92, 77, 187, 28, 126, 34, 61, 188, 174, 195, 62, 103, 235, 222, 61, 111, 85, 51, 62, 73, 195, 149, 62, 96, 171, 190, 189, 18, 248, 74, 189, 106, 57, 247, 61, 44, 126, 120, 59, 88, 42, 20, 61, 224, 223, 230, 60, 139, 146, 78, 61, 92, 0, 108, 190, 178, 68, 34, 189, 198, 125, 114, 60, 63, 66, 40, 62, 224, 101, 166, 189, 52, 73, 210, 190, 148, 73, 13, 62, 88, 139, 73, 61, 19, 65, 68, 61, 27, 82, 97, 61, 121, 74, 9, 190, 60, 109, 78, 190, 221, 70, 152, 189, 34, 40, 255, 189, 252, 143, 160, 61, 69, 60, 202, 62, 232, 188, 143, 62, 171, 107, 91, 60, 21, 86, 142, 61, 42, 46, 141, 190, 153, 241, 18, 63, 136, 241, 177, 62, 114, 84, 59, 190, 160, 128, 14, 191, 67, 238, 169, 190, 238, 16, 243, 190, 211, 191, 239, 62, 80, 128, 21, 62, 14, 132, 178, 190, 173, 222, 230, 61, 68, 74, 120, 190, 179, 20, 129, 189, 6, 218, 29, 191, 166, 65, 81, 191, 177, 249, 236, 61, 15, 24, 82, 62, 72, 19, 6, 189, 96, 78, 0, 191, 58, 176, 39, 189, 20, 196, 203, 190, 150, 87, 17, 191, 5, 216, 51, 62, 9, 142, 36, 62, 48, 163, 127, 190, 74, 121, 78, 189, 5, 120, 185, 191, 180, 113, 63, 61, 84, 27, 57, 62, 17, 72, 27, 191, 245, 105, 15, 191, 163, 76, 223, 61, 226, 18, 153, 62, 191, 213, 80, 63, 159, 238, 216, 190, 35, 76, 158, 189, 57, 56, 138, 191, 253, 162, 193, 190, 159, 49, 41, 61, 114, 214, 17, 62, 252, 216, 147, 61, 202, 250, 151, 190, 163, 107, 54, 62, 94, 72, 56, 190, 114, 119, 2, 190, 165, 99, 79, 190, 194, 11, 73, 190, 10, 81, 167, 60, 247, 5, 2, 62, 5, 71, 6, 62, 29, 177, 115, 191, 29, 81, 4, 62, 63, 139, 10, 190, 61, 180, 119, 189, 10, 152, 252, 189, 78, 76, 111, 190, 92, 245, 32, 189, 219, 229, 130, 190, 19, 104, 101, 191, 57, 167, 147, 62, 144, 149, 151, 190, 239, 163, 3, 62, 14, 79, 65, 191, 80, 159, 129, 62, 152, 12, 2, 63, 80, 43, 0, 63, 48, 191, 80, 189, 42, 151, 195, 61, 81, 225, 177, 190, 204, 95, 36, 190, 19, 213, 169, 190, 190, 47, 8, 62, 116, 212, 127, 62, 253, 32, 190, 190, 178, 194, 187, 61, 213, 52, 185, 188, 157, 12, 155, 187, 100, 144, 241, 190, 234, 169, 98, 191, 79, 40, 172, 189, 155, 227, 103, 62, 50, 185, 46, 62, 59, 161, 96, 190, 55, 252, 122, 62, 194, 245, 177, 189, 215, 159, 27, 190, 14, 19, 48, 62, 57, 88, 56, 62, 45, 5, 111, 62, 172, 22, 105, 189, 28, 251, 162, 191, 62, 13, 228, 189, 228, 238, 131, 187, 161, 174, 57, 191, 241, 10, 201, 190, 232, 169, 21, 62, 154, 170, 12, 62, 157, 93, 18, 61, 217, 156, 171, 61, 89, 2, 50, 190, 13, 144, 170, 61, 79, 211, 240, 61, 186, 78, 238, 60, 169, 78, 47, 189, 103, 49, 65, 190, 73, 232, 69, 190, 182, 36, 79, 190, 24, 185, 186, 61, 164, 52, 99, 190, 67, 92, 145, 61, 166, 89, 124, 61, 87, 168, 35, 190, 167, 69, 179, 59, 200, 14, 15, 190, 214, 53, 8, 190, 74, 171, 140, 61, 250, 235, 115, 190, 11, 74, 203, 61, 170, 211, 254, 58, 34, 34, 86, 189, 161, 75, 22, 190, 15, 151, 182, 60, 197, 83, 225, 188, 35, 171, 144, 61, 190, 224, 195, 189, 125, 101, 139, 61, 16, 23, 111, 190, 170, 15, 83, 190, 12, 104, 101, 190, 79, 31, 216, 190, 125, 103, 94, 190, 104, 233, 39, 189, 86, 82, 40, 63, 134, 194, 210, 62, 30, 234, 153, 62, 201, 5, 69, 62, 19, 122, 154, 189, 220, 189, 32, 62, 134, 171, 244, 61, 133, 150, 134, 189, 172, 243, 84, 191, 70, 94, 44, 62, 150, 227, 254, 189, 6, 12, 223, 61, 15, 71, 138, 189, 249, 191, 45, 62, 113, 222, 47, 190, 204, 22, 27, 62, 255, 121, 125, 62, 113, 251, 46, 191, 128, 5, 152, 60, 59, 223, 117, 190, 41, 239, 145, 190, 150, 67, 177, 188, 44, 181, 177, 61, 233, 216, 76, 190, 0, 142, 109, 190, 181, 214, 112, 62, 182, 71, 223, 189, 181, 226, 10, 62, 235, 151, 15, 62, 195, 54, 63, 62, 35, 245, 154, 62, 40, 210, 6, 191, 67, 254, 249, 189, 17, 185, 197, 190, 19, 255, 142, 190, 152, 200, 224, 188, 81, 26, 185, 61, 117, 41, 112, 191, 2, 69, 91, 61, 72, 193, 39, 190, 86, 216, 47, 60, 82, 252, 154, 189, 143, 248, 209, 189, 237, 124, 18, 190, 224, 21, 249, 61, 62, 99, 43, 190, 62, 45, 54, 60, 84, 201, 57, 189, 217, 232, 37, 62, 108, 211, 163, 62, 20, 4, 175, 61, 105, 19, 225, 61, 19, 160, 61, 189, 163, 18, 159, 61, 142, 77, 27, 191, 206, 1, 185, 62, 79, 239, 178, 62, 152, 94, 136, 188, 197, 138, 87, 191, 114, 195, 18, 189, 83, 27, 196, 189, 86, 39, 142, 62, 177, 203, 211, 62, 132, 168, 179, 190, 86, 76, 48, 190, 228, 186, 231, 190, 109, 169, 191, 189, 91, 225, 104, 61, 38, 27, 190, 188, 211, 189, 24, 191, 81, 17, 142, 190, 116, 124, 210, 187, 114, 17, 22, 62, 71, 218, 146, 189, 188, 107, 58, 190, 86, 117, 162, 61, 202, 3, 23, 190, 176, 80, 96, 190, 239, 11, 206, 189, 124, 51, 152, 61, 117, 153, 221, 60, 93, 145, 5, 63, 179, 166, 8, 190, 18, 157, 59, 62, 246, 13, 225, 61, 112, 158, 143, 189, 223, 189, 51, 191, 248, 123, 50, 61, 215, 221, 27, 62, 96, 96, 10, 190, 162, 89, 107, 191, 104, 147, 34, 62, 214, 12, 241, 61, 141, 113, 96, 63, 65, 55, 198, 190, 109, 231, 44, 61, 108, 115, 117, 191, 226, 156, 249, 189, 239, 13, 158, 190, 128, 53, 197, 62, 7, 93, 151, 62, 98, 47, 247, 189, 78, 229, 161, 62, 141, 219, 174, 190, 125, 30, 8, 189, 46, 90, 25, 191, 2, 108, 26, 191, 219, 179, 49, 189, 117, 31, 130, 62, 104, 123, 177, 60, 229, 212, 148, 191, 191, 54, 210, 61, 40, 216, 16, 190, 161, 183, 73, 190, 64, 190, 145, 62, 9, 247, 249, 60, 138, 198, 133, 61, 124, 200, 31, 188, 98, 102, 198, 191, 30, 238, 169, 61, 23, 82, 135, 61, 135, 191, 37, 62, 4, 1, 71, 191, 64, 126, 45, 62, 138, 145, 168, 62, 186, 43, 221, 187, 96, 4, 0, 190, 51, 228, 144, 59, 194, 130, 46, 190, 116, 231, 255, 189, 152, 174, 162, 189, 99, 134, 20, 62, 111, 199, 2, 190, 33, 35, 190, 61, 245, 2, 153, 60, 96, 61, 237, 188, 18, 155, 152, 189, 24, 207, 162, 189, 224, 173, 168, 188, 223, 56, 178, 189, 231, 124, 58, 190, 10, 186, 246, 189, 133, 4, 37, 190, 116, 93, 213, 61, 232, 101, 41, 190, 78, 82, 140, 60, 105, 245, 170, 61, 5, 153, 76, 61, 14, 231, 68, 61, 219, 129, 53, 187, 247, 167, 32, 190, 140, 55, 157, 189, 246, 40, 237, 61, 109, 176, 4, 190, 58, 77, 94, 188, 178, 86, 173, 187, 93, 44, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 209, 14, 62, 181, 138, 64, 62, 137, 56, 169, 60, 240, 211, 161, 61, 201, 45, 146, 62, 178, 80, 76, 190, 119, 30, 134, 62, 140, 73, 112, 62, 160, 222, 97, 189, 61, 178, 104, 62, 18, 30, 216, 189, 37, 245, 0, 62, 242, 159, 33, 190, 188, 140, 150, 60, 0, 121, 31, 62, 201, 166, 127, 62, 96, 130, 162, 62, 70, 178, 151, 61, 143, 215, 52, 190, 80, 12, 145, 62, 225, 229, 152, 190, 138, 86, 132, 60, 227, 96, 162, 62, 10, 72, 141, 62, 74, 19, 198, 189, 137, 213, 102, 61, 150, 115, 117, 61, 77, 138, 130, 189, 57, 46, 37, 62, 26, 200, 209, 61, 147, 196, 68, 61, 20, 224, 187, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 221, 60, 63, 106, 48, 199, 190, 28, 225, 132, 62, 62, 18, 174, 62, 227, 104, 208, 189, 71, 188, 57, 63, 96, 208, 156, 62, 237, 124, 23, 63, 104, 214, 165, 62, 62, 120, 141, 190, 130, 26, 250, 190, 241, 117, 73, 63, 90, 98, 217, 189, 176, 68, 15, 63, 154, 26, 17, 191, 28, 193, 6, 191, 13, 127, 217, 190, 109, 254, 8, 63, 219, 55, 89, 59, 65, 186, 51, 189, 81, 213, 106, 190, 242, 210, 8, 191, 69, 221, 35, 190, 240, 169, 131, 63, 195, 153, 96, 63, 18, 141, 129, 62, 123, 8, 5, 61, 174, 37, 36, 191, 39, 143, 2, 63, 12, 12, 155, 62, 135, 206, 101, 63, 120, 48, 184, 61, 69, 138, 67, 189, 33, 168, 60, 61, 120, 133, 186, 190, 51, 110, 113, 61, 119, 211, 80, 190, 171, 100, 1, 62, 69, 110, 191, 189, 117, 59, 193, 190, 148, 173, 82, 62, 98, 198, 88, 190, 198, 200, 116, 61, 59, 48, 185, 62, 123, 197, 162, 189, 9, 84, 133, 61, 59, 163, 74, 61, 149, 126, 252, 61, 27, 247, 190, 190, 35, 18, 139, 61, 227, 145, 159, 189, 129, 68, 70, 190, 10, 199, 149, 61, 70, 55, 125, 62, 87, 240, 127, 190, 124, 221, 189, 189, 78, 207, 15, 62, 220, 133, 19, 190, 53, 217, 156, 188, 134, 102, 69, 62, 16, 121, 255, 189, 149, 153, 185, 62, 84, 225, 24, 61, 193, 54, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 56, 137, 186, 92, 62, 167, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 43, 123, 191, 203, 151, 20, 63, 230, 98, 177, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 49, 86, 64, 216, 251, 254, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}