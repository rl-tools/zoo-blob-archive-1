// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 90, 97, 189, 100, 187, 25, 63, 238, 212, 108, 190, 67, 217, 7, 63, 254, 169, 5, 191, 113, 83, 23, 190, 161, 134, 43, 190, 225, 108, 100, 63, 93, 203, 223, 61, 2, 114, 21, 63, 103, 203, 252, 61, 189, 42, 39, 62, 164, 70, 147, 62, 43, 250, 77, 63, 38, 47, 58, 62, 138, 35, 162, 190, 190, 175, 16, 62, 135, 44, 20, 191, 14, 204, 130, 190, 138, 50, 80, 63, 1, 37, 159, 190, 4, 223, 67, 190, 163, 8, 106, 190, 26, 55, 177, 61, 224, 237, 222, 190, 227, 91, 215, 190, 58, 16, 104, 190, 230, 18, 34, 191, 224, 19, 3, 191, 177, 127, 14, 189, 78, 67, 154, 61, 224, 47, 0, 191, 223, 167, 157, 62, 191, 250, 15, 189, 89, 95, 155, 190, 151, 69, 4, 191, 255, 156, 15, 190, 229, 245, 249, 62, 203, 109, 237, 190, 115, 7, 170, 189, 252, 35, 95, 63, 218, 221, 78, 190, 161, 189, 208, 190, 43, 167, 3, 191, 5, 241, 24, 190, 15, 157, 140, 189, 144, 107, 101, 189, 153, 168, 109, 189, 12, 199, 127, 60, 2, 180, 42, 63, 82, 134, 134, 62, 159, 90, 232, 189, 2, 35, 75, 191, 151, 5, 226, 190, 226, 126, 73, 188, 167, 245, 6, 62, 166, 117, 219, 62, 129, 25, 64, 61, 139, 7, 125, 62, 98, 215, 176, 190, 71, 156, 210, 62, 6, 86, 172, 189, 235, 220, 212, 190, 210, 65, 181, 190, 163, 230, 222, 190, 230, 2, 190, 189, 36, 40, 235, 189, 123, 5, 61, 191, 167, 56, 18, 190, 245, 76, 145, 190, 190, 252, 48, 63, 90, 94, 96, 62, 153, 23, 129, 60, 223, 34, 174, 190, 172, 79, 77, 62, 167, 48, 196, 190, 229, 147, 184, 62, 151, 107, 101, 190, 47, 5, 56, 191, 203, 67, 253, 190, 92, 75, 181, 62, 25, 206, 11, 63, 163, 138, 3, 191, 135, 120, 246, 189, 33, 141, 216, 61, 82, 163, 55, 63, 144, 76, 10, 190, 255, 171, 194, 189, 216, 10, 154, 190, 232, 14, 100, 190, 220, 59, 31, 61, 188, 167, 6, 190, 127, 64, 94, 62, 125, 119, 54, 191, 236, 35, 234, 62, 74, 225, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 22, 24, 191, 134, 194, 223, 62, 142, 81, 44, 189, 149, 7, 97, 61, 233, 115, 157, 62, 71, 250, 206, 62, 46, 236, 146, 62, 5, 35, 216, 62, 53, 203, 106, 189, 150, 76, 84, 189, 247, 179, 135, 190, 186, 8, 63, 191, 145, 243, 29, 61, 62, 20, 173, 61, 32, 169, 7, 63, 106, 97, 0, 63, 153, 199, 210, 62, 222, 54, 175, 61, 149, 133, 141, 62, 184, 71, 14, 63, 47, 240, 239, 190, 100, 250, 144, 62, 250, 193, 14, 63, 82, 57, 178, 190, 59, 232, 14, 190, 19, 99, 137, 190, 209, 135, 118, 190, 226, 41, 26, 63, 129, 14, 118, 62, 57, 198, 83, 62, 70, 3, 190, 62, 139, 70, 74, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 43, 141, 189, 205, 30, 144, 188, 195, 41, 94, 190, 170, 35, 155, 61, 194, 253, 194, 189, 209, 186, 25, 190, 231, 207, 102, 190, 117, 189, 163, 62, 140, 94, 186, 61, 202, 253, 27, 62, 165, 159, 131, 189, 213, 11, 9, 62, 232, 21, 150, 190, 89, 218, 219, 190, 158, 236, 87, 62, 115, 245, 19, 62, 2, 155, 25, 189, 198, 144, 169, 189, 169, 243, 135, 61, 182, 251, 91, 61, 91, 8, 88, 190, 154, 48, 160, 62, 184, 3, 85, 62, 14, 141, 142, 61, 201, 165, 80, 190, 12, 64, 42, 190, 250, 98, 104, 59, 131, 106, 74, 62, 130, 141, 46, 191, 111, 86, 76, 188, 90, 199, 57, 189, 76, 40, 140, 61, 203, 235, 138, 190, 58, 155, 127, 189, 188, 53, 26, 62, 182, 187, 66, 62, 170, 211, 136, 62, 177, 68, 17, 61, 53, 190, 113, 62, 251, 27, 111, 189, 155, 86, 175, 189, 87, 62, 6, 190, 217, 79, 44, 62, 27, 194, 135, 189, 38, 21, 213, 58, 121, 8, 37, 62, 133, 125, 66, 61, 36, 241, 48, 62, 202, 223, 98, 61, 234, 42, 104, 190, 97, 154, 200, 189, 18, 97, 138, 62, 183, 18, 100, 190, 94, 249, 232, 189, 162, 20, 135, 190, 251, 110, 173, 61, 192, 218, 178, 187, 217, 179, 96, 189, 83, 58, 201, 189, 44, 230, 54, 190, 54, 28, 149, 62, 200, 137, 110, 61, 77, 77, 4, 61, 82, 205, 9, 188, 96, 162, 73, 61, 73, 252, 42, 62, 214, 211, 17, 189, 73, 235, 66, 62, 181, 156, 60, 62, 126, 178, 166, 189, 246, 90, 87, 61, 136, 142, 34, 62, 6, 215, 69, 190, 206, 107, 47, 190, 17, 176, 245, 61, 235, 49, 16, 190, 19, 107, 28, 189, 209, 102, 135, 62, 99, 163, 58, 187, 79, 11, 247, 61, 110, 31, 2, 189, 67, 57, 174, 61, 188, 170, 206, 61, 22, 136, 243, 61, 184, 250, 92, 189, 62, 146, 172, 61, 91, 200, 187, 61, 37, 241, 149, 61, 1, 105, 36, 61, 251, 175, 161, 189, 248, 26, 26, 190, 115, 143, 71, 62, 114, 223, 41, 62, 39, 17, 140, 189, 186, 191, 6, 190, 221, 159, 62, 189, 43, 160, 170, 60, 55, 242, 165, 61, 253, 84, 45, 60, 136, 65, 174, 189, 192, 1, 146, 61, 141, 109, 75, 62, 15, 196, 253, 61, 203, 198, 126, 190, 32, 167, 45, 185, 237, 85, 79, 190, 10, 32, 48, 190, 156, 59, 50, 59, 160, 29, 33, 62, 211, 174, 46, 62, 184, 202, 7, 190, 99, 58, 177, 189, 61, 64, 132, 189, 58, 109, 190, 189, 111, 221, 198, 61, 191, 176, 141, 189, 164, 220, 73, 58, 228, 2, 124, 190, 92, 246, 102, 190, 35, 184, 38, 190, 142, 145, 62, 189, 110, 187, 200, 61, 84, 201, 122, 189, 56, 80, 196, 61, 85, 225, 202, 61, 220, 22, 20, 60, 245, 98, 175, 188, 228, 159, 4, 62, 240, 3, 136, 190, 219, 221, 240, 189, 81, 82, 233, 189, 254, 110, 61, 62, 97, 138, 65, 188, 231, 210, 37, 188, 201, 183, 66, 61, 216, 203, 54, 62, 189, 137, 189, 188, 152, 92, 1, 62, 252, 109, 180, 59, 175, 45, 215, 188, 213, 124, 74, 189, 229, 117, 22, 62, 68, 186, 43, 189, 236, 252, 47, 62, 178, 252, 183, 60, 67, 56, 145, 189, 82, 241, 20, 189, 104, 219, 189, 61, 204, 114, 102, 61, 106, 187, 213, 188, 248, 120, 34, 59, 108, 47, 53, 62, 90, 104, 88, 60, 103, 193, 12, 62, 100, 10, 227, 189, 144, 6, 196, 61, 176, 126, 29, 61, 206, 198, 176, 189, 14, 8, 92, 61, 183, 57, 45, 62, 223, 13, 20, 190, 128, 145, 205, 60, 147, 0, 254, 61, 115, 116, 103, 188, 82, 17, 189, 61, 201, 68, 150, 189, 66, 58, 203, 61, 66, 236, 138, 188, 158, 21, 26, 61, 106, 18, 106, 190, 49, 3, 94, 61, 239, 146, 154, 188, 189, 191, 13, 189, 70, 96, 221, 189, 44, 128, 30, 190, 134, 164, 140, 190, 16, 90, 209, 188, 12, 143, 216, 189, 81, 6, 146, 188, 58, 16, 204, 188, 246, 141, 146, 189, 26, 26, 18, 190, 68, 54, 40, 190, 24, 2, 243, 61, 116, 202, 112, 60, 72, 238, 45, 62, 203, 0, 136, 61, 182, 193, 136, 61, 85, 110, 101, 187, 145, 172, 19, 190, 131, 121, 30, 189, 144, 42, 144, 189, 153, 122, 229, 61, 58, 19, 177, 61, 239, 145, 146, 190, 79, 72, 3, 189, 223, 184, 79, 61, 11, 232, 174, 61, 77, 152, 67, 189, 166, 243, 226, 61, 62, 28, 172, 189, 169, 21, 126, 190, 47, 2, 76, 61, 119, 42, 228, 61, 77, 213, 234, 61, 229, 164, 190, 61, 106, 198, 32, 190, 111, 11, 251, 189, 179, 249, 210, 188, 123, 92, 39, 62, 77, 226, 254, 189, 175, 30, 31, 61, 149, 25, 8, 62, 135, 133, 50, 60, 237, 189, 36, 61, 37, 93, 186, 189, 129, 40, 198, 61, 129, 248, 148, 60, 232, 152, 69, 190, 83, 212, 60, 62, 88, 243, 14, 62, 133, 120, 244, 60, 190, 209, 174, 60, 125, 143, 118, 190, 96, 26, 120, 60, 155, 203, 101, 188, 219, 137, 240, 189, 81, 41, 180, 188, 240, 57, 150, 61, 68, 159, 14, 62, 210, 65, 253, 61, 173, 111, 142, 189, 65, 54, 237, 189, 202, 102, 134, 188, 153, 46, 194, 187, 248, 139, 221, 189, 142, 21, 202, 189, 237, 55, 228, 61, 133, 55, 218, 61, 14, 62, 198, 61, 206, 103, 69, 61, 168, 154, 132, 60, 28, 15, 65, 190, 227, 58, 108, 61, 194, 78, 165, 189, 25, 35, 192, 61, 254, 238, 17, 190, 69, 231, 8, 61, 38, 252, 149, 59, 121, 45, 138, 189, 170, 184, 3, 61, 158, 185, 67, 62, 93, 165, 86, 190, 61, 204, 126, 61, 51, 60, 154, 189, 53, 145, 121, 190, 21, 179, 145, 60, 201, 139, 229, 189, 117, 145, 105, 61, 155, 245, 185, 61, 227, 0, 223, 61, 41, 69, 173, 59, 53, 75, 114, 59, 182, 18, 27, 190, 187, 228, 28, 62, 197, 48, 131, 61, 240, 45, 35, 190, 16, 88, 82, 189, 232, 196, 25, 190, 71, 206, 14, 190, 50, 123, 44, 62, 206, 204, 101, 190, 197, 77, 143, 61, 226, 132, 225, 61, 11, 201, 15, 62, 217, 47, 202, 61, 120, 144, 253, 61, 119, 57, 40, 62, 12, 64, 138, 61, 6, 69, 250, 189, 126, 231, 231, 61, 77, 218, 198, 189, 243, 168, 160, 59, 88, 64, 193, 189, 212, 113, 45, 190, 62, 112, 128, 189, 224, 153, 83, 61, 203, 113, 105, 188, 228, 190, 94, 190, 89, 236, 183, 61, 68, 44, 45, 62, 191, 81, 74, 62, 67, 231, 0, 62, 54, 41, 56, 61, 94, 229, 146, 62, 171, 213, 29, 62, 66, 83, 70, 60, 139, 74, 122, 190, 45, 112, 139, 61, 194, 33, 19, 190, 80, 29, 92, 61, 19, 143, 157, 188, 90, 214, 56, 189, 95, 84, 237, 61, 251, 190, 192, 60, 120, 122, 62, 190, 125, 49, 0, 190, 70, 107, 148, 61, 23, 124, 176, 189, 23, 41, 60, 190, 5, 170, 42, 190, 123, 140, 252, 61, 186, 88, 143, 189, 144, 56, 244, 61, 220, 126, 165, 188, 175, 113, 234, 189, 68, 43, 107, 62, 153, 140, 17, 190, 229, 85, 241, 61, 131, 93, 118, 189, 101, 65, 54, 190, 212, 122, 154, 61, 32, 18, 52, 62, 94, 238, 165, 189, 121, 201, 86, 62, 152, 178, 253, 61, 129, 153, 82, 62, 212, 215, 170, 60, 106, 88, 158, 189, 24, 110, 215, 189, 6, 190, 74, 190, 185, 10, 54, 61, 149, 103, 0, 190, 62, 61, 196, 61, 143, 7, 213, 189, 235, 214, 105, 61, 103, 144, 238, 60, 25, 74, 30, 190, 106, 94, 31, 190, 206, 110, 77, 189, 249, 173, 72, 61, 206, 41, 140, 61, 57, 12, 83, 61, 101, 186, 6, 62, 177, 76, 216, 61, 40, 230, 64, 61, 15, 12, 238, 190, 227, 246, 243, 189, 146, 222, 225, 61, 22, 110, 33, 62, 69, 90, 141, 190, 5, 8, 228, 62, 107, 241, 14, 62, 207, 202, 96, 61, 169, 100, 154, 190, 177, 128, 110, 190, 138, 41, 69, 190, 134, 101, 68, 190, 229, 214, 47, 190, 156, 163, 234, 60, 25, 69, 41, 190, 36, 123, 143, 62, 159, 80, 14, 190, 17, 151, 54, 190, 28, 210, 161, 190, 224, 209, 235, 190, 27, 188, 136, 62, 49, 54, 69, 62, 155, 118, 147, 189, 174, 0, 222, 61, 104, 120, 128, 61, 213, 226, 194, 60, 239, 167, 153, 61, 32, 7, 246, 61, 84, 224, 29, 62, 80, 230, 20, 190, 194, 236, 81, 190, 248, 118, 191, 190, 126, 26, 48, 62, 207, 205, 134, 61, 211, 197, 13, 190, 123, 12, 21, 61, 127, 251, 94, 61, 9, 69, 130, 62, 237, 53, 39, 190, 164, 79, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 92, 179, 36, 61, 157, 181, 148, 61, 6, 150, 42, 190, 46, 83, 204, 61, 8, 16, 38, 62, 75, 90, 26, 62, 108, 200, 45, 190, 185, 193, 45, 61, 45, 186, 177, 189, 51, 194, 165, 61, 132, 57, 57, 59, 54, 103, 36, 190, 150, 20, 109, 189, 21, 43, 142, 61, 218, 137, 240, 188, 239, 128, 5, 190, 206, 153, 98, 189, 111, 244, 213, 60, 187, 132, 46, 62, 172, 155, 210, 189, 9, 64, 28, 62, 60, 59, 230, 189, 91, 249, 155, 188, 138, 243, 225, 188, 254, 86, 34, 190, 98, 160, 2, 190, 164, 129, 25, 189, 17, 103, 93, 62, 247, 163, 30, 62, 138, 246, 225, 190, 13, 194, 179, 189, 23, 62, 93, 190, 147, 226, 9, 62, 79, 217, 82, 190, 133, 253, 50, 62, 252, 123, 27, 62, 98, 123, 91, 189, 128, 83, 166, 189, 226, 184, 11, 189, 33, 170, 5, 62, 83, 71, 48, 190, 204, 32, 186, 61, 182, 207, 98, 62, 35, 202, 17, 62, 24, 179, 185, 60, 10, 219, 18, 190, 150, 1, 155, 188, 236, 96, 218, 59, 140, 243, 235, 188, 200, 44, 92, 62, 37, 83, 104, 190, 43, 204, 200, 188, 213, 205, 72, 190, 44, 145, 116, 62, 92, 121, 213, 61, 219, 188, 142, 189, 80, 18, 53, 189, 211, 220, 86, 62, 243, 241, 247, 189, 238, 83, 41, 190, 91, 249, 61, 190, 19, 185, 82, 62, 238, 159, 191, 189, 0, 112, 58, 62, 240, 147, 176, 61, 68, 207, 16, 62, 190, 234, 101, 62, 161, 41, 125, 189, 116, 211, 89, 62, 139, 150, 133, 61, 79, 118, 212, 190, 98, 137, 137, 62, 40, 241, 162, 61, 151, 0, 156, 61, 5, 152, 140, 62, 34, 152, 67, 62, 205, 193, 150, 189, 77, 45, 132, 61, 198, 57, 252, 188, 77, 219, 166, 190, 212, 228, 146, 61, 84, 80, 10, 59, 95, 127, 141, 189, 69, 25, 70, 61, 54, 132, 138, 189, 251, 216, 106, 190, 173, 97, 53, 189, 236, 194, 23, 62, 91, 143, 13, 190, 224, 252, 49, 190, 19, 148, 49, 189, 150, 241, 225, 190, 123, 128, 131, 189, 165, 240, 63, 62, 223, 40, 54, 62, 200, 97, 63, 62, 161, 183, 37, 61, 44, 193, 169, 62, 36, 212, 202, 189, 45, 0, 239, 189, 144, 72, 23, 62, 115, 46, 69, 62, 6, 184, 161, 190, 36, 63, 122, 189, 2, 62, 42, 62, 241, 62, 236, 61, 230, 23, 26, 62, 116, 92, 248, 61, 169, 30, 8, 62, 158, 32, 181, 189, 40, 24, 133, 189, 86, 31, 161, 190, 94, 171, 178, 189, 214, 240, 105, 189, 48, 98, 48, 189, 240, 89, 213, 61, 198, 100, 213, 188, 106, 24, 151, 188, 245, 193, 39, 190, 13, 239, 69, 62, 42, 58, 71, 61, 211, 76, 124, 189, 10, 34, 106, 188, 15, 213, 22, 62, 94, 216, 178, 189, 233, 149, 0, 62, 25, 61, 206, 61, 131, 173, 129, 189, 144, 147, 221, 189, 112, 116, 158, 189, 225, 117, 115, 62, 166, 182, 24, 190, 92, 75, 58, 61, 119, 185, 13, 62, 114, 29, 230, 60, 46, 201, 33, 190, 9, 141, 138, 189, 97, 107, 143, 190, 204, 48, 13, 62, 164, 42, 139, 61, 192, 217, 117, 190, 110, 48, 126, 60, 32, 166, 169, 189, 120, 36, 2, 189, 86, 64, 61, 189, 207, 47, 178, 188, 13, 157, 206, 61, 157, 45, 194, 61, 58, 208, 60, 62, 72, 130, 7, 190, 77, 238, 107, 59, 32, 29, 6, 62, 183, 129, 152, 190, 136, 230, 38, 62, 229, 4, 143, 189, 64, 64, 208, 61, 13, 31, 116, 62, 90, 179, 192, 189, 227, 202, 192, 58, 222, 100, 33, 190, 189, 96, 160, 61, 175, 58, 47, 190, 30, 168, 169, 60, 16, 163, 9, 189, 178, 83, 232, 189, 124, 45, 147, 189, 147, 184, 13, 61, 122, 230, 153, 60, 48, 179, 35, 190, 111, 217, 194, 61, 183, 156, 104, 62, 87, 226, 86, 190, 230, 163, 150, 189, 135, 113, 35, 62, 133, 238, 238, 61, 51, 204, 153, 61, 126, 200, 72, 62, 152, 133, 234, 61, 204, 131, 159, 190, 67, 147, 75, 190, 163, 94, 254, 189, 244, 242, 130, 62, 186, 182, 193, 61, 11, 10, 152, 189, 224, 152, 79, 61, 14, 175, 133, 61, 7, 115, 20, 190, 16, 95, 0, 62, 23, 153, 2, 62, 107, 176, 21, 62, 43, 233, 43, 190, 5, 207, 246, 61, 163, 191, 202, 189, 251, 131, 35, 190, 113, 86, 13, 62, 167, 32, 182, 61, 52, 23, 25, 190, 212, 125, 21, 190, 200, 168, 135, 188, 253, 49, 241, 60, 125, 203, 103, 61, 78, 195, 219, 189, 188, 93, 85, 185, 167, 93, 104, 189, 133, 217, 149, 189, 94, 212, 17, 190, 70, 163, 156, 60, 70, 32, 238, 60, 168, 166, 130, 189, 21, 223, 182, 61, 181, 222, 113, 189, 158, 190, 89, 189, 191, 28, 49, 61, 177, 144, 42, 190, 176, 184, 69, 189, 253, 92, 185, 188, 27, 166, 70, 61, 69, 231, 214, 61, 136, 122, 42, 62, 47, 245, 223, 189, 81, 51, 86, 60, 243, 229, 23, 62, 146, 39, 141, 61, 1, 232, 193, 61, 73, 68, 74, 189, 54, 190, 99, 62, 161, 28, 59, 61, 111, 141, 52, 62, 227, 168, 159, 61, 123, 42, 10, 61, 38, 130, 17, 190, 212, 26, 163, 189, 107, 80, 164, 61, 33, 162, 200, 61, 190, 71, 150, 188, 82, 1, 235, 61, 135, 161, 0, 189, 193, 249, 27, 62, 221, 63, 4, 62, 34, 126, 14, 190, 252, 196, 145, 189, 134, 151, 115, 60, 189, 113, 196, 189, 121, 47, 53, 62, 152, 120, 6, 62, 60, 205, 23, 62, 114, 151, 253, 61, 207, 248, 12, 61, 2, 200, 192, 61, 60, 206, 72, 62, 18, 165, 164, 58, 111, 187, 34, 190, 133, 240, 157, 60, 220, 28, 6, 190, 151, 234, 100, 190, 243, 121, 57, 190, 139, 70, 14, 190, 143, 194, 155, 188, 77, 33, 175, 189, 22, 203, 167, 61, 185, 96, 230, 189, 151, 237, 160, 61, 117, 137, 249, 189, 249, 4, 19, 62, 3, 98, 36, 190, 141, 196, 20, 62, 61, 100, 214, 61, 51, 74, 80, 189, 95, 209, 169, 60, 38, 138, 192, 61, 24, 173, 211, 189, 248, 13, 254, 61, 234, 107, 166, 189, 137, 131, 29, 62, 73, 248, 20, 189, 128, 93, 177, 61, 112, 158, 249, 189, 44, 63, 152, 189, 214, 198, 29, 62, 4, 83, 140, 61, 132, 50, 127, 61, 127, 44, 186, 189, 219, 160, 72, 190, 10, 27, 181, 59, 183, 74, 169, 189, 19, 83, 43, 62, 190, 6, 14, 62, 171, 223, 0, 189, 172, 234, 179, 187, 2, 137, 11, 62, 49, 53, 3, 62, 240, 222, 188, 61, 73, 38, 140, 189, 198, 161, 143, 61, 85, 150, 127, 190, 146, 16, 35, 62, 17, 165, 116, 62, 223, 116, 80, 61, 211, 253, 91, 189, 139, 167, 32, 62, 238, 200, 61, 190, 107, 109, 81, 188, 178, 0, 163, 61, 227, 211, 112, 190, 116, 33, 45, 190, 167, 189, 212, 60, 66, 82, 245, 60, 68, 99, 123, 61, 251, 185, 152, 62, 245, 39, 68, 190, 68, 4, 254, 189, 20, 179, 215, 188, 24, 11, 152, 189, 65, 184, 188, 61, 141, 70, 6, 189, 229, 230, 196, 188, 188, 107, 79, 62, 73, 213, 162, 188, 75, 36, 35, 62, 218, 166, 25, 62, 208, 146, 137, 61, 145, 118, 138, 189, 172, 241, 4, 62, 242, 237, 128, 186, 8, 244, 72, 189, 22, 54, 210, 61, 21, 220, 239, 60, 181, 7, 255, 189, 106, 82, 72, 61, 100, 200, 216, 61, 20, 230, 1, 62, 40, 76, 64, 190, 169, 1, 24, 190, 70, 127, 10, 62, 127, 202, 207, 189, 193, 249, 94, 189, 226, 0, 235, 61, 90, 201, 167, 188, 214, 88, 26, 190, 201, 167, 190, 60, 221, 52, 11, 62, 17, 146, 14, 61, 187, 18, 113, 62, 86, 134, 40, 62, 240, 175, 43, 61, 242, 199, 123, 61, 4, 132, 100, 190, 227, 174, 99, 190, 68, 46, 10, 61, 226, 104, 114, 190, 172, 229, 46, 190, 244, 108, 201, 189, 28, 88, 13, 190, 231, 158, 246, 60, 154, 208, 72, 62, 40, 19, 2, 189, 187, 32, 49, 62, 40, 182, 226, 189, 150, 68, 113, 61, 167, 138, 41, 190, 84, 56, 165, 190, 231, 100, 234, 61, 44, 48, 195, 61, 114, 204, 248, 189, 32, 28, 188, 189, 56, 88, 8, 187, 150, 96, 51, 190, 158, 125, 222, 189, 5, 64, 98, 62, 69, 127, 216, 61, 114, 237, 82, 190, 59, 133, 124, 61, 89, 205, 99, 190, 29, 153, 220, 61, 213, 141, 6, 62, 244, 80, 7, 191, 34, 58, 46, 61, 219, 106, 35, 62, 171, 166, 4, 62, 201, 117, 174, 59, 169, 125, 254, 189, 202, 71, 121, 190, 190, 179, 182, 190, 214, 156, 161, 190, 33, 54, 199, 61, 144, 209, 4, 190, 126, 144, 6, 60, 71, 146, 77, 61, 22, 88, 149, 61, 120, 240, 197, 189, 43, 132, 254, 189, 184, 66, 237, 60, 175, 13, 25, 190, 247, 12, 253, 61, 157, 10, 41, 62, 221, 25, 5, 189, 62, 246, 31, 190, 72, 221, 226, 60, 143, 128, 209, 189, 132, 223, 90, 61, 6, 19, 94, 188, 178, 2, 194, 189, 158, 163, 37, 190, 82, 211, 45, 190, 49, 170, 154, 189, 50, 19, 43, 62, 102, 217, 10, 190, 186, 162, 122, 189, 185, 203, 138, 60, 215, 1, 81, 62, 72, 30, 171, 62, 10, 202, 193, 61, 187, 2, 94, 189, 174, 20, 251, 189, 215, 4, 211, 189, 139, 205, 208, 189, 195, 140, 247, 189, 140, 15, 42, 190, 108, 194, 162, 62, 93, 154, 237, 189, 25, 211, 5, 62, 14, 70, 206, 61, 19, 142, 213, 58, 145, 242, 14, 190, 141, 39, 123, 190, 193, 238, 125, 189, 233, 233, 46, 62, 166, 214, 50, 189, 86, 109, 237, 61, 23, 184, 82, 62, 225, 95, 192, 61, 22, 146, 48, 189, 29, 62, 117, 62, 108, 127, 40, 62, 121, 240, 20, 61, 154, 189, 120, 61, 161, 6, 60, 190, 145, 22, 199, 189, 160, 52, 60, 62, 77, 225, 202, 190, 190, 120, 118, 61, 231, 160, 64, 62, 164, 72, 149, 189, 251, 0, 137, 61, 1, 102, 191, 61, 63, 131, 37, 190, 46, 114, 95, 61, 234, 183, 241, 61, 217, 123, 122, 61, 238, 234, 189, 187, 82, 127, 12, 190, 95, 129, 46, 190, 78, 12, 159, 189, 4, 198, 246, 61, 214, 186, 73, 190, 27, 186, 215, 61, 188, 30, 218, 61, 64, 144, 182, 189, 27, 212, 140, 61, 11, 184, 4, 190, 59, 65, 204, 189, 169, 214, 184, 61, 156, 123, 83, 190, 246, 100, 2, 62, 15, 119, 183, 61, 56, 118, 248, 59, 237, 88, 30, 190, 239, 161, 68, 61, 16, 162, 174, 60, 171, 30, 218, 61, 20, 66, 162, 189, 68, 129, 224, 61, 85, 33, 85, 190, 206, 8, 56, 190, 200, 98, 60, 190, 36, 42, 154, 190, 88, 57, 209, 189, 11, 211, 247, 188, 116, 224, 180, 61, 150, 215, 55, 62, 248, 206, 128, 62, 161, 123, 1, 62, 239, 17, 218, 189, 219, 35, 131, 189, 152, 244, 35, 189, 103, 116, 152, 189, 53, 178, 131, 190, 105, 98, 13, 62, 39, 87, 3, 190, 104, 162, 183, 61, 116, 127, 10, 190, 244, 49, 1, 62, 194, 14, 150, 188, 105, 174, 11, 62, 192, 132, 101, 62, 255, 238, 226, 190, 44, 139, 89, 59, 171, 139, 0, 190, 44, 116, 2, 61, 116, 148, 222, 60, 57, 4, 45, 60, 238, 153, 177, 189, 204, 122, 179, 190, 94, 234, 135, 62, 45, 185, 253, 189, 253, 122, 216, 61, 137, 239, 235, 61, 166, 189, 148, 62, 82, 161, 33, 62, 187, 148, 168, 190, 173, 243, 123, 188, 75, 180, 33, 190, 182, 29, 202, 189, 185, 39, 136, 189, 195, 124, 73, 62, 11, 138, 0, 190, 13, 23, 12, 62, 122, 45, 86, 190, 44, 69, 20, 61, 238, 182, 20, 188, 83, 57, 174, 189, 235, 68, 99, 189, 26, 79, 18, 62, 158, 104, 205, 188, 142, 159, 56, 62, 225, 250, 113, 189, 40, 181, 229, 61, 99, 101, 234, 61, 48, 194, 78, 62, 191, 51, 17, 62, 107, 177, 149, 189, 192, 216, 3, 61, 172, 124, 202, 189, 98, 245, 145, 62, 131, 41, 145, 62, 156, 28, 30, 190, 15, 85, 153, 189, 167, 107, 35, 189, 212, 132, 106, 190, 110, 33, 102, 62, 217, 147, 34, 62, 208, 16, 37, 190, 215, 98, 53, 190, 125, 118, 117, 190, 31, 158, 194, 187, 250, 254, 8, 190, 84, 237, 213, 61, 86, 46, 179, 61, 116, 101, 148, 189, 178, 16, 84, 60, 179, 93, 7, 61, 214, 47, 12, 188, 168, 24, 56, 190, 114, 189, 4, 62, 163, 131, 213, 189, 7, 253, 37, 190, 252, 21, 197, 189, 21, 199, 118, 61, 105, 237, 29, 61, 125, 9, 145, 62, 124, 33, 53, 188, 78, 150, 54, 62, 245, 30, 2, 189, 110, 129, 146, 189, 122, 37, 32, 190, 71, 5, 55, 61, 192, 166, 245, 187, 106, 17, 20, 190, 224, 150, 152, 189, 200, 225, 3, 62, 234, 55, 36, 62, 16, 200, 164, 61, 110, 32, 51, 190, 86, 52, 7, 190, 192, 15, 126, 190, 243, 94, 144, 189, 108, 235, 140, 189, 237, 70, 144, 61, 19, 138, 66, 62, 23, 149, 33, 62, 124, 66, 70, 62, 80, 167, 116, 190, 239, 26, 9, 189, 175, 115, 138, 189, 75, 56, 198, 190, 208, 154, 204, 189, 19, 112, 29, 62, 141, 21, 22, 190, 94, 28, 98, 190, 41, 139, 156, 60, 41, 205, 122, 189, 145, 158, 225, 60, 7, 124, 137, 62, 6, 73, 134, 188, 132, 227, 166, 61, 72, 246, 163, 61, 29, 1, 235, 189, 46, 152, 224, 59, 98, 55, 5, 190, 109, 52, 144, 189, 201, 162, 192, 60, 215, 100, 214, 61, 7, 138, 52, 62, 23, 176, 91, 187, 96, 4, 0, 190, 19, 20, 72, 60, 194, 130, 46, 190, 148, 137, 254, 189, 169, 82, 161, 189, 117, 249, 29, 62, 133, 201, 229, 189, 121, 97, 195, 61, 248, 186, 18, 61, 102, 210, 221, 188, 18, 155, 152, 189, 24, 207, 162, 189, 61, 49, 167, 188, 5, 130, 145, 189, 22, 16, 43, 190, 207, 238, 207, 189, 133, 4, 37, 190, 210, 200, 252, 61, 47, 192, 40, 190, 78, 82, 140, 60, 55, 228, 196, 61, 187, 130, 115, 61, 64, 89, 70, 61, 255, 120, 191, 186, 247, 167, 32, 190, 242, 167, 123, 189, 74, 113, 238, 61, 16, 45, 4, 190, 103, 253, 84, 188, 206, 232, 233, 59, 57, 56, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 120, 20, 62, 121, 93, 155, 62, 10, 50, 136, 189, 212, 17, 123, 187, 69, 176, 130, 62, 107, 199, 114, 190, 6, 29, 166, 61, 195, 63, 34, 62, 36, 244, 134, 189, 116, 22, 131, 62, 51, 17, 187, 61, 210, 5, 159, 61, 61, 223, 31, 190, 26, 42, 241, 188, 148, 69, 186, 61, 104, 206, 72, 62, 140, 195, 10, 62, 110, 148, 5, 62, 4, 16, 35, 190, 160, 56, 101, 62, 164, 199, 241, 188, 76, 89, 157, 187, 33, 35, 107, 62, 170, 219, 51, 62, 231, 82, 199, 189, 238, 230, 187, 60, 255, 45, 210, 61, 119, 135, 20, 190, 119, 182, 49, 62, 89, 207, 248, 61, 140, 47, 182, 189, 162, 22, 155, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 10, 166, 62, 20, 155, 184, 190, 20, 89, 145, 188, 136, 207, 42, 62, 175, 125, 194, 189, 158, 5, 23, 62, 95, 8, 9, 62, 14, 77, 189, 61, 86, 12, 238, 59, 220, 35, 130, 190, 225, 19, 35, 190, 215, 85, 166, 62, 36, 107, 217, 189, 30, 191, 128, 62, 106, 246, 123, 190, 92, 152, 73, 190, 119, 186, 110, 190, 142, 45, 139, 62, 206, 154, 146, 60, 217, 123, 167, 189, 238, 169, 150, 58, 51, 82, 245, 189, 217, 80, 133, 60, 232, 231, 206, 62, 209, 243, 64, 62, 81, 210, 204, 61, 200, 96, 244, 59, 197, 128, 82, 190, 91, 82, 135, 62, 229, 235, 198, 61, 46, 18, 58, 62, 87, 42, 185, 61, 100, 39, 191, 189, 105, 98, 161, 60, 227, 255, 57, 190, 179, 97, 153, 60, 112, 245, 68, 190, 235, 83, 40, 61, 142, 12, 227, 189, 223, 175, 18, 190, 132, 52, 27, 62, 20, 62, 91, 190, 138, 149, 23, 189, 114, 161, 53, 62, 156, 221, 162, 189, 73, 38, 131, 187, 75, 180, 205, 59, 195, 80, 235, 60, 148, 76, 240, 189, 85, 84, 110, 189, 102, 87, 153, 189, 226, 98, 5, 190, 242, 70, 41, 62, 27, 233, 203, 61, 38, 73, 43, 190, 147, 116, 84, 189, 253, 155, 183, 60, 164, 36, 161, 189, 149, 93, 10, 189, 35, 250, 15, 62, 128, 168, 103, 189, 123, 247, 107, 61, 11, 77, 14, 61, 49, 198, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 227, 33, 189, 248, 167, 223, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 113, 203, 62, 0, 81, 141, 191, 222, 119, 196, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {35, 97, 18, 64, 127, 160, 67, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}