// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 46, 146, 190, 229, 223, 39, 63, 170, 90, 212, 190, 135, 52, 50, 63, 144, 181, 138, 191, 1, 21, 141, 190, 18, 110, 35, 62, 48, 176, 158, 63, 222, 133, 82, 62, 30, 153, 101, 63, 87, 216, 9, 63, 60, 175, 68, 62, 79, 14, 33, 63, 79, 8, 132, 63, 162, 237, 107, 62, 101, 186, 244, 190, 182, 248, 75, 191, 7, 242, 17, 191, 67, 245, 253, 190, 120, 166, 28, 63, 241, 38, 222, 190, 140, 37, 118, 190, 194, 139, 133, 190, 163, 97, 247, 61, 240, 120, 12, 191, 112, 13, 158, 191, 17, 241, 146, 190, 15, 58, 166, 190, 178, 194, 135, 190, 79, 60, 148, 62, 48, 223, 130, 190, 61, 183, 8, 191, 72, 222, 171, 62, 19, 24, 141, 63, 227, 23, 80, 191, 82, 157, 224, 190, 152, 89, 183, 190, 227, 22, 209, 190, 238, 93, 15, 191, 185, 198, 201, 189, 115, 146, 222, 59, 2, 173, 38, 191, 18, 89, 219, 190, 91, 17, 87, 191, 50, 110, 32, 189, 227, 117, 107, 190, 198, 84, 31, 189, 9, 250, 31, 188, 221, 148, 146, 188, 20, 132, 166, 63, 88, 243, 94, 62, 22, 181, 210, 189, 145, 18, 197, 191, 58, 250, 182, 190, 102, 237, 105, 190, 218, 190, 53, 63, 100, 12, 214, 62, 254, 37, 179, 61, 249, 89, 31, 62, 240, 167, 240, 190, 82, 27, 27, 63, 85, 159, 130, 191, 33, 175, 189, 190, 146, 159, 181, 190, 194, 149, 195, 190, 232, 142, 68, 189, 160, 97, 68, 190, 178, 246, 126, 191, 129, 100, 106, 190, 152, 245, 216, 189, 67, 199, 130, 63, 160, 6, 119, 62, 89, 140, 191, 190, 243, 42, 6, 191, 124, 184, 55, 62, 242, 243, 195, 190, 140, 240, 163, 191, 87, 191, 14, 191, 126, 3, 63, 191, 238, 247, 162, 62, 49, 27, 217, 62, 192, 197, 47, 63, 58, 197, 106, 191, 76, 144, 220, 189, 88, 118, 52, 62, 203, 210, 240, 62, 26, 171, 207, 190, 40, 103, 96, 190, 63, 169, 164, 191, 235, 129, 149, 190, 118, 222, 69, 190, 8, 95, 8, 188, 146, 177, 51, 62, 57, 196, 135, 191, 189, 137, 54, 63, 25, 196, 210, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 60, 151, 190, 16, 156, 66, 62, 77, 10, 129, 60, 229, 153, 53, 190, 94, 237, 198, 189, 164, 111, 135, 62, 80, 240, 134, 62, 43, 241, 175, 62, 30, 243, 80, 189, 156, 35, 116, 190, 235, 19, 24, 190, 172, 76, 134, 191, 156, 138, 227, 188, 148, 167, 103, 61, 180, 158, 226, 62, 172, 204, 183, 62, 193, 14, 86, 62, 77, 223, 166, 62, 19, 171, 207, 189, 238, 74, 96, 62, 21, 76, 162, 190, 37, 89, 194, 62, 217, 82, 222, 62, 255, 80, 191, 190, 223, 68, 36, 190, 249, 21, 151, 189, 186, 19, 255, 190, 243, 48, 234, 62, 88, 64, 252, 61, 180, 246, 5, 61, 167, 52, 113, 62, 45, 165, 47, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 91, 252, 61, 61, 11, 153, 62, 125, 171, 156, 190, 47, 53, 127, 190, 228, 141, 234, 190, 84, 86, 203, 190, 89, 178, 13, 191, 75, 56, 148, 62, 141, 24, 50, 190, 212, 244, 213, 61, 249, 217, 185, 189, 249, 212, 110, 61, 36, 77, 64, 191, 253, 34, 145, 191, 62, 157, 117, 62, 55, 248, 236, 61, 96, 114, 137, 189, 0, 131, 158, 190, 183, 151, 95, 61, 14, 154, 163, 190, 37, 115, 40, 191, 128, 239, 143, 62, 235, 180, 145, 62, 240, 209, 28, 62, 219, 87, 93, 190, 49, 99, 156, 191, 159, 239, 150, 61, 177, 194, 64, 62, 175, 174, 166, 191, 116, 180, 179, 190, 83, 38, 153, 189, 6, 107, 201, 61, 141, 214, 154, 190, 53, 219, 131, 190, 76, 253, 61, 60, 86, 143, 223, 62, 124, 57, 185, 62, 77, 100, 22, 62, 31, 25, 147, 62, 185, 85, 12, 190, 127, 82, 145, 62, 252, 176, 43, 60, 17, 170, 155, 62, 88, 44, 35, 190, 48, 145, 238, 61, 211, 132, 124, 62, 195, 28, 129, 61, 20, 188, 137, 61, 199, 77, 191, 188, 188, 159, 139, 190, 24, 11, 34, 190, 193, 39, 163, 62, 229, 77, 149, 190, 235, 168, 244, 189, 87, 191, 191, 190, 83, 1, 5, 191, 130, 143, 142, 61, 224, 129, 237, 61, 249, 127, 78, 190, 230, 167, 134, 190, 64, 88, 146, 62, 37, 65, 82, 62, 119, 234, 11, 189, 205, 177, 148, 190, 63, 243, 7, 62, 103, 113, 226, 61, 104, 220, 8, 191, 84, 3, 160, 62, 220, 245, 101, 61, 199, 178, 154, 189, 137, 50, 42, 62, 230, 215, 75, 62, 24, 6, 248, 190, 250, 39, 190, 190, 98, 179, 37, 61, 174, 187, 26, 191, 171, 62, 198, 187, 104, 140, 136, 62, 127, 253, 21, 191, 220, 41, 35, 62, 63, 57, 243, 190, 202, 160, 91, 190, 192, 37, 180, 190, 251, 200, 252, 61, 17, 48, 178, 190, 86, 57, 188, 189, 140, 129, 14, 189, 48, 12, 121, 190, 225, 26, 181, 189, 50, 255, 41, 189, 190, 53, 40, 191, 4, 255, 71, 62, 0, 102, 73, 62, 236, 122, 141, 190, 239, 223, 181, 189, 21, 97, 113, 62, 133, 129, 253, 59, 230, 4, 3, 60, 203, 1, 147, 62, 172, 180, 14, 191, 175, 39, 39, 61, 71, 212, 151, 62, 239, 198, 143, 62, 6, 75, 59, 190, 147, 164, 42, 190, 69, 170, 11, 190, 144, 100, 93, 190, 33, 60, 158, 62, 29, 193, 131, 62, 248, 95, 173, 62, 111, 106, 99, 190, 33, 198, 74, 60, 146, 8, 159, 61, 107, 109, 192, 188, 37, 96, 140, 62, 206, 40, 213, 60, 60, 6, 140, 61, 144, 187, 168, 190, 21, 110, 102, 190, 222, 118, 75, 62, 45, 44, 112, 189, 250, 85, 55, 62, 22, 47, 8, 189, 125, 62, 145, 188, 132, 75, 130, 62, 249, 124, 251, 60, 81, 178, 185, 189, 202, 18, 172, 62, 75, 14, 182, 190, 12, 27, 24, 190, 76, 50, 31, 190, 250, 11, 236, 61, 6, 30, 209, 186, 102, 28, 149, 60, 188, 111, 204, 188, 43, 186, 108, 61, 98, 24, 19, 62, 238, 48, 210, 60, 45, 100, 242, 190, 177, 106, 4, 190, 231, 145, 13, 189, 51, 154, 228, 61, 35, 174, 241, 188, 164, 0, 106, 62, 156, 200, 45, 61, 75, 7, 169, 189, 7, 66, 96, 190, 108, 39, 199, 61, 76, 57, 8, 61, 13, 14, 22, 61, 104, 109, 6, 61, 11, 68, 25, 190, 34, 211, 22, 191, 177, 128, 84, 62, 50, 147, 198, 190, 224, 57, 140, 61, 106, 211, 204, 188, 251, 231, 208, 60, 10, 3, 182, 189, 84, 162, 219, 62, 46, 36, 151, 189, 35, 199, 211, 191, 40, 176, 224, 62, 100, 21, 212, 62, 110, 29, 229, 62, 6, 28, 26, 190, 203, 253, 112, 62, 65, 192, 217, 188, 140, 186, 132, 188, 238, 97, 13, 191, 105, 79, 3, 62, 225, 242, 110, 190, 182, 211, 144, 189, 218, 169, 62, 188, 104, 0, 102, 191, 53, 210, 106, 190, 69, 151, 132, 62, 17, 106, 195, 190, 22, 100, 7, 62, 91, 32, 195, 61, 73, 86, 21, 191, 130, 86, 93, 191, 16, 29, 104, 191, 26, 189, 200, 62, 171, 82, 184, 61, 79, 172, 248, 60, 169, 79, 137, 61, 19, 193, 1, 191, 28, 215, 31, 62, 159, 127, 113, 190, 42, 232, 183, 61, 31, 52, 32, 190, 12, 47, 202, 60, 126, 152, 53, 62, 223, 182, 39, 191, 168, 226, 181, 189, 68, 83, 138, 190, 172, 155, 182, 61, 27, 236, 90, 189, 246, 46, 201, 62, 247, 129, 131, 190, 139, 129, 180, 189, 241, 46, 171, 62, 25, 251, 7, 62, 244, 193, 219, 61, 149, 117, 197, 61, 20, 248, 51, 189, 200, 22, 82, 60, 176, 100, 17, 191, 97, 132, 2, 62, 237, 14, 0, 191, 193, 225, 58, 61, 48, 68, 163, 189, 70, 7, 64, 62, 158, 83, 76, 62, 114, 109, 237, 189, 223, 160, 235, 62, 41, 166, 161, 187, 28, 162, 247, 190, 15, 177, 155, 62, 120, 237, 84, 62, 159, 96, 161, 189, 195, 214, 99, 61, 34, 191, 206, 190, 117, 153, 113, 190, 209, 42, 106, 62, 149, 179, 70, 191, 195, 59, 36, 62, 159, 178, 10, 190, 61, 239, 44, 61, 174, 115, 210, 188, 94, 85, 231, 189, 161, 201, 135, 191, 224, 4, 40, 191, 43, 144, 211, 60, 171, 242, 229, 189, 193, 220, 11, 190, 64, 82, 41, 189, 5, 80, 170, 190, 190, 32, 132, 61, 50, 214, 233, 190, 185, 212, 103, 189, 121, 121, 244, 190, 47, 0, 84, 61, 217, 117, 131, 60, 126, 226, 150, 190, 178, 62, 26, 190, 235, 221, 134, 58, 83, 109, 27, 61, 17, 131, 132, 190, 1, 125, 16, 191, 239, 246, 218, 62, 71, 214, 53, 190, 78, 90, 147, 190, 76, 35, 171, 60, 23, 172, 106, 191, 243, 64, 117, 190, 141, 92, 149, 191, 215, 135, 159, 62, 186, 135, 151, 62, 91, 236, 155, 62, 202, 35, 120, 189, 227, 138, 11, 62, 213, 77, 93, 190, 176, 94, 15, 62, 211, 108, 190, 188, 34, 239, 11, 190, 249, 244, 122, 190, 174, 0, 36, 190, 10, 125, 219, 59, 228, 50, 13, 190, 140, 146, 93, 189, 193, 107, 168, 62, 141, 50, 236, 60, 151, 189, 124, 62, 89, 87, 181, 62, 25, 161, 105, 190, 41, 93, 58, 190, 143, 172, 55, 191, 179, 33, 187, 60, 193, 148, 13, 62, 77, 130, 144, 190, 172, 54, 99, 60, 29, 254, 20, 191, 153, 111, 227, 61, 119, 239, 119, 189, 61, 251, 255, 61, 239, 3, 208, 61, 108, 125, 149, 190, 119, 209, 172, 189, 118, 112, 46, 62, 70, 10, 178, 62, 201, 55, 124, 62, 14, 163, 8, 62, 70, 132, 145, 62, 241, 164, 21, 190, 97, 26, 184, 62, 28, 161, 130, 190, 149, 157, 130, 190, 156, 184, 168, 190, 204, 141, 9, 62, 198, 48, 35, 185, 182, 112, 233, 189, 144, 8, 226, 61, 146, 76, 174, 61, 15, 231, 103, 190, 180, 25, 182, 190, 18, 166, 218, 61, 119, 195, 58, 190, 220, 56, 40, 190, 67, 138, 106, 190, 137, 149, 39, 190, 111, 187, 3, 191, 67, 18, 126, 62, 192, 40, 153, 190, 150, 102, 104, 190, 148, 142, 67, 62, 147, 2, 245, 188, 114, 204, 130, 189, 16, 143, 53, 61, 202, 17, 155, 190, 132, 34, 73, 190, 85, 42, 191, 190, 252, 50, 15, 62, 108, 236, 229, 61, 192, 168, 76, 62, 174, 29, 31, 62, 92, 11, 180, 190, 116, 251, 143, 62, 6, 99, 36, 190, 6, 106, 128, 191, 119, 169, 138, 190, 17, 185, 145, 189, 111, 217, 175, 61, 19, 200, 36, 61, 87, 43, 103, 189, 49, 15, 208, 190, 145, 237, 195, 189, 73, 2, 209, 190, 194, 2, 230, 189, 111, 107, 128, 189, 230, 222, 125, 62, 24, 85, 39, 62, 225, 41, 193, 61, 154, 225, 80, 191, 155, 155, 78, 62, 245, 20, 51, 191, 6, 206, 22, 191, 110, 224, 43, 189, 34, 25, 153, 62, 78, 62, 65, 191, 225, 102, 42, 63, 117, 71, 90, 63, 168, 7, 175, 62, 11, 6, 214, 190, 137, 227, 230, 190, 37, 63, 1, 191, 186, 94, 13, 191, 219, 146, 61, 62, 33, 244, 207, 186, 150, 204, 88, 191, 52, 168, 56, 62, 82, 232, 109, 190, 157, 148, 125, 63, 21, 16, 32, 191, 187, 2, 33, 191, 215, 113, 167, 62, 179, 202, 60, 62, 180, 14, 10, 190, 217, 70, 3, 62, 160, 28, 168, 61, 89, 5, 187, 189, 220, 82, 200, 62, 251, 161, 2, 62, 180, 68, 145, 62, 108, 153, 91, 189, 112, 86, 136, 190, 99, 37, 8, 192, 35, 98, 241, 61, 186, 89, 113, 62, 114, 92, 147, 190, 176, 26, 98, 191, 108, 14, 141, 59, 83, 255, 204, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 192, 159, 82, 62, 53, 124, 166, 62, 247, 30, 47, 191, 151, 104, 169, 189, 121, 149, 207, 190, 95, 69, 83, 190, 24, 0, 55, 190, 59, 34, 156, 62, 4, 42, 193, 190, 155, 190, 246, 189, 74, 67, 125, 61, 241, 85, 192, 190, 35, 79, 204, 189, 169, 244, 235, 190, 71, 139, 1, 62, 242, 20, 124, 62, 44, 106, 98, 189, 120, 172, 39, 190, 107, 76, 103, 190, 39, 219, 178, 189, 120, 48, 113, 187, 119, 82, 37, 188, 82, 47, 80, 62, 220, 119, 152, 190, 186, 183, 54, 62, 154, 82, 94, 191, 187, 203, 139, 62, 176, 102, 110, 62, 185, 228, 34, 188, 99, 209, 49, 191, 202, 207, 162, 62, 153, 222, 120, 190, 149, 198, 54, 190, 143, 249, 12, 191, 129, 177, 108, 61, 214, 138, 27, 62, 164, 243, 141, 62, 64, 142, 74, 61, 192, 148, 54, 62, 42, 24, 146, 62, 151, 254, 59, 189, 228, 161, 189, 62, 108, 19, 151, 61, 219, 25, 143, 191, 144, 254, 124, 62, 247, 251, 179, 61, 20, 32, 99, 61, 181, 60, 150, 62, 85, 103, 36, 62, 153, 52, 202, 190, 111, 161, 95, 61, 11, 23, 63, 189, 158, 151, 39, 191, 74, 85, 139, 61, 97, 224, 150, 190, 222, 235, 207, 190, 12, 223, 173, 60, 1, 14, 3, 190, 199, 173, 92, 190, 3, 65, 2, 190, 162, 124, 23, 62, 31, 178, 164, 190, 178, 121, 196, 189, 68, 33, 77, 61, 46, 248, 188, 190, 38, 129, 9, 191, 227, 116, 242, 187, 90, 79, 188, 62, 54, 128, 116, 62, 21, 71, 238, 60, 237, 252, 226, 62, 156, 115, 21, 187, 105, 105, 34, 190, 127, 185, 155, 62, 64, 34, 118, 62, 52, 150, 117, 191, 43, 1, 65, 189, 50, 82, 108, 62, 38, 173, 198, 61, 46, 86, 51, 62, 11, 144, 156, 61, 51, 51, 111, 190, 211, 150, 210, 189, 250, 248, 115, 189, 183, 187, 38, 191, 131, 225, 168, 189, 98, 204, 224, 190, 187, 53, 212, 190, 159, 168, 7, 62, 27, 39, 161, 189, 13, 12, 13, 188, 88, 169, 172, 190, 148, 92, 131, 62, 250, 112, 81, 190, 52, 171, 141, 60, 195, 185, 157, 61, 238, 213, 20, 63, 135, 87, 137, 61, 19, 210, 44, 62, 1, 190, 136, 62, 79, 66, 243, 61, 220, 3, 1, 191, 41, 10, 18, 62, 225, 16, 150, 62, 19, 104, 27, 191, 184, 148, 121, 62, 147, 110, 38, 62, 183, 74, 101, 191, 13, 206, 122, 190, 33, 185, 97, 61, 7, 3, 6, 191, 154, 254, 185, 62, 8, 47, 60, 62, 221, 73, 176, 191, 20, 157, 121, 61, 152, 43, 65, 62, 117, 46, 31, 189, 107, 63, 69, 190, 4, 1, 144, 190, 74, 110, 238, 189, 193, 137, 163, 61, 224, 53, 113, 189, 21, 241, 66, 189, 228, 107, 104, 62, 137, 49, 206, 62, 175, 99, 125, 191, 133, 17, 135, 62, 134, 171, 51, 190, 76, 170, 130, 62, 56, 116, 210, 62, 30, 38, 225, 190, 129, 252, 59, 189, 220, 10, 208, 190, 43, 197, 116, 61, 220, 196, 128, 59, 235, 98, 59, 189, 25, 170, 17, 191, 103, 233, 148, 190, 210, 150, 224, 187, 112, 12, 195, 62, 201, 146, 159, 61, 216, 91, 202, 189, 196, 105, 166, 190, 184, 228, 235, 61, 16, 20, 20, 191, 99, 103, 43, 190, 49, 139, 26, 62, 124, 139, 71, 62, 160, 90, 164, 62, 168, 75, 39, 190, 47, 214, 22, 189, 126, 121, 85, 190, 187, 216, 217, 189, 59, 144, 137, 190, 174, 183, 134, 62, 177, 117, 62, 62, 112, 179, 129, 61, 130, 186, 138, 190, 165, 27, 1, 62, 20, 45, 37, 191, 35, 48, 226, 61, 157, 254, 1, 62, 30, 242, 12, 62, 78, 42, 46, 190, 44, 252, 234, 61, 217, 250, 249, 189, 48, 253, 60, 190, 93, 163, 9, 62, 48, 217, 181, 61, 35, 50, 29, 190, 130, 82, 21, 190, 10, 199, 146, 188, 29, 110, 28, 59, 161, 57, 232, 60, 72, 194, 238, 189, 82, 199, 69, 188, 75, 146, 130, 189, 177, 173, 152, 189, 234, 23, 17, 190, 76, 90, 95, 58, 213, 150, 208, 60, 166, 109, 142, 189, 148, 214, 179, 61, 194, 236, 110, 189, 129, 53, 89, 189, 217, 181, 236, 60, 88, 47, 37, 190, 46, 1, 74, 189, 249, 163, 55, 189, 60, 207, 65, 61, 141, 190, 212, 61, 23, 50, 31, 62, 8, 112, 98, 190, 14, 108, 54, 189, 220, 22, 28, 62, 134, 126, 173, 61, 159, 6, 34, 62, 151, 230, 206, 188, 205, 171, 2, 62, 104, 252, 159, 61, 194, 136, 151, 62, 9, 63, 100, 62, 212, 52, 150, 189, 3, 229, 39, 190, 97, 4, 140, 189, 28, 69, 35, 61, 235, 0, 66, 62, 205, 23, 150, 60, 18, 16, 36, 62, 74, 72, 180, 189, 1, 215, 19, 62, 114, 103, 233, 61, 82, 85, 35, 190, 20, 79, 119, 61, 212, 46, 106, 61, 146, 6, 63, 190, 218, 121, 232, 60, 234, 226, 69, 62, 206, 190, 223, 61, 225, 230, 167, 61, 6, 245, 43, 189, 237, 138, 50, 62, 189, 45, 106, 62, 100, 179, 54, 62, 85, 56, 201, 61, 16, 98, 60, 62, 127, 245, 50, 189, 39, 147, 73, 190, 22, 108, 214, 190, 44, 36, 213, 189, 192, 18, 211, 189, 6, 242, 28, 189, 223, 11, 60, 62, 228, 194, 56, 188, 97, 12, 181, 61, 38, 181, 220, 61, 80, 160, 57, 62, 210, 210, 97, 189, 7, 198, 6, 62, 221, 219, 55, 190, 171, 80, 96, 61, 176, 83, 88, 62, 166, 222, 176, 62, 171, 56, 42, 190, 121, 143, 10, 63, 167, 13, 184, 189, 161, 124, 79, 62, 127, 72, 218, 62, 96, 228, 31, 61, 138, 200, 46, 188, 92, 95, 58, 62, 165, 219, 128, 62, 212, 124, 130, 189, 152, 139, 137, 62, 65, 16, 77, 60, 68, 90, 71, 58, 191, 2, 149, 190, 222, 13, 65, 190, 9, 212, 100, 62, 25, 211, 6, 63, 134, 35, 136, 62, 250, 180, 203, 60, 102, 33, 45, 61, 157, 184, 162, 190, 81, 216, 10, 63, 6, 245, 128, 190, 228, 18, 122, 191, 82, 72, 39, 191, 148, 85, 0, 62, 176, 59, 48, 62, 170, 179, 83, 62, 0, 145, 67, 188, 92, 63, 155, 62, 57, 195, 64, 190, 87, 144, 182, 190, 121, 153, 189, 61, 97, 46, 186, 190, 171, 149, 153, 189, 109, 25, 253, 60, 252, 37, 127, 191, 69, 134, 142, 191, 203, 18, 179, 62, 75, 157, 95, 191, 92, 106, 255, 189, 178, 120, 214, 189, 7, 108, 203, 61, 10, 235, 35, 190, 111, 210, 206, 188, 146, 2, 181, 188, 152, 183, 215, 62, 56, 195, 211, 61, 56, 126, 36, 62, 115, 128, 143, 62, 218, 39, 0, 190, 57, 107, 36, 190, 132, 87, 47, 62, 228, 30, 118, 61, 77, 101, 36, 61, 236, 236, 78, 61, 127, 153, 147, 61, 181, 182, 157, 190, 193, 7, 214, 189, 100, 68, 8, 62, 225, 210, 40, 62, 123, 27, 173, 189, 99, 161, 170, 190, 174, 15, 17, 62, 193, 32, 139, 60, 181, 254, 1, 62, 143, 249, 241, 61, 204, 28, 134, 189, 53, 9, 126, 190, 176, 46, 145, 189, 175, 239, 8, 190, 73, 107, 138, 61, 180, 190, 223, 62, 188, 16, 121, 62, 15, 81, 38, 62, 187, 133, 169, 61, 0, 155, 201, 190, 14, 218, 30, 63, 210, 226, 219, 62, 153, 245, 58, 190, 31, 70, 21, 191, 4, 186, 185, 190, 106, 119, 231, 190, 64, 144, 249, 62, 127, 100, 21, 62, 174, 81, 162, 190, 95, 12, 224, 61, 34, 182, 116, 190, 233, 52, 31, 60, 197, 98, 32, 191, 28, 102, 73, 191, 26, 197, 20, 62, 188, 76, 85, 62, 178, 120, 55, 189, 229, 120, 172, 190, 97, 90, 90, 189, 187, 127, 163, 190, 63, 225, 255, 190, 163, 30, 63, 62, 131, 211, 98, 62, 33, 225, 154, 190, 227, 139, 39, 189, 158, 8, 178, 191, 161, 129, 73, 61, 20, 37, 87, 62, 173, 232, 5, 191, 111, 194, 210, 190, 56, 79, 208, 61, 239, 163, 137, 62, 193, 122, 84, 63, 136, 213, 44, 191, 243, 172, 142, 189, 139, 172, 136, 191, 86, 242, 193, 190, 65, 237, 79, 61, 162, 135, 64, 62, 215, 122, 152, 61, 40, 9, 181, 190, 22, 134, 52, 62, 57, 49, 51, 190, 119, 96, 61, 190, 149, 45, 76, 190, 49, 134, 70, 190, 101, 184, 104, 61, 219, 47, 36, 62, 58, 206, 17, 62, 6, 181, 121, 191, 60, 129, 245, 61, 228, 121, 5, 190, 28, 113, 135, 190, 75, 54, 204, 189, 42, 233, 128, 190, 182, 227, 180, 189, 35, 126, 118, 190, 83, 232, 118, 191, 25, 235, 135, 62, 249, 192, 153, 190, 127, 111, 13, 62, 14, 181, 42, 191, 170, 79, 127, 62, 2, 139, 254, 62, 208, 1, 14, 63, 31, 135, 44, 190, 115, 231, 97, 62, 250, 65, 176, 190, 133, 171, 145, 189, 75, 106, 156, 190, 141, 126, 41, 62, 239, 17, 111, 62, 9, 237, 204, 190, 194, 73, 146, 61, 141, 238, 70, 189, 157, 12, 155, 187, 28, 98, 239, 190, 0, 47, 87, 191, 226, 118, 166, 189, 195, 164, 133, 62, 168, 204, 142, 62, 232, 132, 19, 190, 238, 225, 136, 62, 62, 8, 150, 189, 67, 238, 27, 190, 253, 138, 36, 62, 93, 132, 41, 62, 82, 27, 167, 62, 148, 119, 145, 189, 66, 98, 160, 191, 10, 194, 1, 190, 137, 40, 224, 189, 113, 212, 74, 191, 152, 255, 209, 190, 42, 246, 14, 62, 13, 48, 21, 62, 157, 93, 18, 61, 51, 4, 67, 61, 216, 90, 68, 190, 207, 26, 70, 61, 93, 130, 166, 61, 186, 78, 238, 60, 236, 51, 46, 189, 87, 34, 71, 190, 73, 232, 69, 190, 182, 36, 79, 190, 24, 185, 186, 61, 224, 170, 100, 190, 67, 92, 145, 61, 200, 109, 124, 61, 45, 181, 35, 190, 94, 140, 234, 187, 70, 55, 35, 190, 101, 40, 24, 190, 74, 171, 140, 61, 99, 40, 138, 190, 211, 233, 153, 61, 255, 6, 67, 58, 191, 215, 144, 189, 161, 75, 22, 190, 15, 151, 182, 60, 197, 83, 225, 188, 35, 171, 144, 61, 102, 98, 4, 190, 46, 22, 26, 61, 16, 23, 111, 190, 95, 195, 84, 190, 12, 104, 101, 190, 211, 47, 222, 190, 209, 242, 82, 190, 61, 161, 10, 189, 227, 235, 43, 63, 227, 238, 220, 62, 146, 222, 143, 62, 184, 41, 62, 62, 112, 109, 151, 189, 77, 160, 30, 62, 234, 79, 36, 62, 196, 233, 166, 188, 47, 255, 95, 191, 214, 37, 27, 62, 117, 12, 232, 189, 58, 24, 216, 61, 58, 112, 12, 189, 87, 79, 63, 62, 12, 19, 78, 190, 55, 141, 26, 62, 95, 54, 148, 62, 210, 227, 41, 191, 9, 181, 140, 187, 47, 101, 122, 190, 6, 209, 189, 190, 186, 5, 98, 60, 4, 209, 136, 61, 227, 93, 58, 190, 41, 253, 85, 190, 159, 159, 146, 62, 146, 228, 30, 190, 250, 120, 14, 62, 8, 240, 0, 62, 142, 240, 92, 62, 103, 139, 159, 62, 142, 233, 12, 191, 129, 161, 225, 189, 74, 184, 199, 190, 206, 229, 143, 190, 190, 54, 13, 189, 243, 151, 249, 61, 67, 25, 146, 191, 35, 17, 126, 61, 52, 23, 27, 190, 255, 127, 238, 187, 221, 36, 255, 188, 161, 229, 37, 190, 15, 2, 229, 189, 111, 254, 199, 61, 170, 130, 77, 190, 174, 247, 205, 60, 220, 16, 73, 189, 91, 153, 223, 61, 119, 119, 148, 62, 56, 232, 253, 61, 51, 109, 0, 62, 109, 209, 248, 189, 239, 25, 195, 61, 15, 213, 75, 191, 119, 246, 194, 62, 120, 198, 184, 62, 34, 103, 155, 189, 124, 213, 120, 191, 78, 13, 25, 188, 180, 205, 211, 189, 171, 222, 150, 62, 124, 89, 209, 62, 144, 28, 241, 190, 143, 72, 73, 190, 173, 55, 0, 191, 64, 152, 23, 190, 196, 118, 6, 61, 157, 233, 4, 189, 183, 11, 89, 191, 182, 122, 155, 190, 116, 35, 190, 188, 222, 3, 188, 62, 248, 43, 128, 189, 31, 128, 134, 190, 237, 22, 43, 62, 91, 36, 70, 190, 70, 168, 176, 190, 149, 17, 0, 60, 2, 118, 61, 61, 122, 218, 129, 188, 230, 194, 6, 63, 221, 62, 12, 188, 25, 248, 96, 62, 79, 161, 225, 61, 100, 14, 178, 189, 94, 190, 93, 191, 177, 183, 27, 61, 176, 35, 17, 62, 54, 200, 71, 190, 16, 69, 156, 191, 108, 178, 246, 61, 0, 126, 224, 61, 122, 139, 109, 63, 77, 142, 223, 190, 196, 234, 21, 61, 25, 176, 131, 191, 168, 192, 31, 190, 81, 106, 137, 190, 62, 76, 236, 62, 122, 237, 138, 62, 97, 131, 44, 190, 247, 43, 149, 62, 149, 250, 184, 190, 125, 30, 8, 189, 115, 199, 15, 191, 191, 222, 14, 191, 8, 62, 25, 189, 212, 237, 139, 62, 27, 55, 147, 60, 29, 194, 133, 191, 3, 36, 140, 61, 90, 33, 192, 189, 82, 150, 89, 190, 247, 116, 144, 62, 210, 232, 75, 60, 7, 231, 191, 186, 34, 213, 146, 188, 127, 248, 215, 191, 254, 13, 45, 61, 170, 2, 142, 60, 255, 97, 92, 62, 26, 112, 87, 191, 95, 27, 15, 62, 19, 249, 152, 62, 186, 43, 221, 187, 96, 4, 0, 190, 51, 228, 144, 59, 194, 130, 46, 190, 116, 231, 255, 189, 152, 174, 162, 189, 99, 134, 20, 62, 111, 199, 2, 190, 33, 35, 190, 61, 245, 2, 153, 60, 96, 61, 237, 188, 18, 155, 152, 189, 24, 207, 162, 189, 224, 173, 168, 188, 223, 56, 178, 189, 231, 124, 58, 190, 10, 186, 246, 189, 133, 4, 37, 190, 116, 93, 213, 61, 232, 101, 41, 190, 78, 82, 140, 60, 105, 245, 170, 61, 5, 153, 76, 61, 14, 231, 68, 61, 219, 129, 53, 187, 247, 167, 32, 190, 140, 55, 157, 189, 246, 40, 237, 61, 109, 176, 4, 190, 58, 77, 94, 188, 178, 86, 173, 187, 93, 44, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 133, 40, 62, 55, 53, 46, 62, 187, 83, 0, 60, 24, 47, 47, 61, 63, 159, 148, 62, 228, 130, 71, 190, 203, 234, 130, 62, 0, 64, 106, 62, 119, 62, 72, 189, 104, 219, 83, 62, 188, 44, 78, 190, 7, 192, 4, 62, 242, 159, 33, 190, 214, 20, 37, 61, 63, 8, 11, 62, 35, 66, 96, 62, 72, 99, 154, 62, 118, 16, 140, 61, 143, 215, 52, 190, 162, 172, 146, 62, 14, 47, 165, 190, 249, 112, 136, 187, 74, 68, 169, 62, 164, 109, 157, 62, 131, 110, 91, 189, 109, 30, 157, 61, 53, 9, 215, 60, 102, 214, 49, 189, 221, 92, 47, 62, 246, 108, 164, 61, 27, 92, 123, 61, 20, 224, 187, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 153, 59, 63, 190, 26, 222, 190, 27, 157, 110, 62, 66, 86, 177, 62, 117, 113, 117, 189, 186, 80, 88, 63, 13, 188, 134, 62, 142, 239, 27, 63, 214, 202, 217, 62, 32, 39, 138, 190, 57, 137, 16, 191, 128, 159, 146, 63, 90, 98, 217, 189, 54, 198, 12, 63, 247, 180, 18, 191, 163, 26, 3, 191, 159, 154, 228, 190, 86, 233, 13, 63, 219, 55, 89, 59, 209, 100, 221, 188, 188, 111, 153, 190, 97, 78, 11, 191, 103, 248, 54, 190, 216, 157, 130, 63, 126, 210, 83, 63, 242, 37, 153, 62, 190, 228, 158, 188, 80, 105, 30, 191, 129, 195, 6, 63, 174, 180, 206, 62, 98, 159, 98, 63, 120, 48, 184, 61, 231, 52, 143, 189, 211, 234, 158, 61, 60, 175, 189, 190, 112, 42, 115, 61, 227, 247, 49, 190, 72, 150, 191, 61, 49, 98, 20, 190, 138, 233, 173, 190, 139, 76, 94, 62, 188, 12, 86, 190, 240, 92, 41, 62, 36, 158, 49, 63, 123, 197, 162, 189, 76, 70, 154, 61, 113, 9, 209, 61, 115, 226, 90, 62, 222, 164, 191, 190, 74, 217, 54, 61, 227, 145, 159, 189, 217, 195, 48, 190, 132, 173, 10, 189, 93, 183, 150, 62, 121, 202, 150, 190, 177, 50, 184, 189, 122, 150, 109, 62, 250, 244, 16, 190, 118, 190, 25, 60, 241, 148, 128, 61, 87, 155, 101, 189, 123, 252, 42, 63, 159, 24, 236, 61, 193, 54, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 67, 76, 188, 143, 109, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {213, 149, 90, 190, 93, 234, 73, 63, 79, 184, 176, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 150, 100, 189, 156, 224, 79, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}