// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 233, 171, 190, 131, 205, 38, 63, 113, 51, 212, 190, 131, 43, 50, 63, 81, 80, 145, 191, 19, 17, 134, 190, 248, 29, 36, 62, 124, 176, 168, 63, 109, 126, 96, 62, 199, 220, 100, 63, 69, 92, 19, 63, 79, 94, 65, 62, 178, 131, 32, 63, 19, 231, 140, 63, 87, 24, 98, 62, 248, 27, 203, 190, 13, 253, 95, 191, 139, 246, 12, 191, 119, 137, 220, 190, 244, 11, 29, 63, 3, 128, 224, 190, 218, 39, 119, 190, 42, 73, 141, 190, 254, 110, 6, 62, 210, 21, 253, 190, 171, 204, 166, 191, 223, 127, 135, 190, 243, 62, 124, 190, 246, 232, 159, 190, 156, 211, 139, 62, 223, 243, 25, 190, 240, 226, 17, 191, 241, 231, 175, 62, 1, 114, 142, 63, 14, 95, 86, 191, 64, 100, 228, 190, 106, 49, 55, 190, 106, 74, 235, 190, 94, 235, 7, 191, 200, 51, 13, 190, 216, 136, 83, 188, 192, 163, 37, 191, 102, 128, 194, 190, 192, 11, 94, 191, 168, 246, 107, 189, 222, 30, 138, 190, 28, 16, 78, 189, 75, 115, 191, 188, 118, 123, 113, 188, 181, 99, 172, 63, 199, 230, 118, 62, 211, 10, 205, 189, 159, 0, 203, 191, 128, 246, 170, 190, 80, 11, 60, 190, 27, 134, 41, 63, 226, 47, 227, 62, 134, 159, 162, 61, 203, 109, 110, 62, 68, 130, 237, 190, 242, 2, 26, 63, 141, 28, 137, 191, 228, 210, 186, 190, 134, 95, 189, 190, 179, 176, 205, 190, 186, 219, 54, 189, 175, 41, 72, 190, 250, 142, 133, 191, 122, 217, 91, 190, 160, 83, 227, 189, 153, 6, 131, 63, 152, 92, 119, 62, 50, 104, 34, 191, 11, 210, 0, 191, 247, 228, 19, 62, 255, 233, 98, 190, 236, 253, 176, 191, 151, 194, 10, 191, 155, 177, 40, 191, 78, 232, 169, 62, 68, 59, 227, 62, 236, 82, 45, 63, 116, 255, 113, 191, 64, 64, 243, 189, 136, 13, 43, 62, 62, 129, 34, 63, 193, 12, 217, 190, 63, 128, 249, 189, 136, 226, 173, 191, 28, 167, 153, 190, 205, 90, 133, 190, 14, 68, 46, 189, 162, 169, 14, 62, 39, 60, 142, 191, 160, 155, 60, 63, 128, 144, 159, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 158, 137, 190, 56, 228, 68, 62, 110, 28, 142, 60, 26, 154, 62, 190, 158, 38, 198, 189, 60, 179, 145, 62, 182, 244, 153, 62, 95, 95, 190, 62, 29, 108, 145, 189, 170, 113, 99, 190, 3, 229, 149, 189, 154, 168, 133, 191, 94, 157, 45, 189, 206, 217, 170, 188, 182, 35, 230, 62, 79, 244, 166, 62, 91, 181, 85, 62, 86, 122, 168, 62, 39, 36, 200, 189, 152, 87, 75, 62, 20, 2, 167, 190, 202, 111, 192, 62, 99, 239, 223, 62, 33, 10, 207, 190, 153, 205, 164, 189, 177, 110, 40, 189, 153, 58, 228, 190, 58, 31, 231, 62, 77, 208, 234, 61, 202, 15, 100, 61, 91, 16, 130, 62, 138, 156, 83, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 79, 250, 61, 10, 100, 180, 62, 117, 78, 135, 190, 151, 35, 102, 190, 220, 169, 217, 190, 86, 50, 202, 190, 176, 104, 18, 191, 212, 154, 144, 62, 102, 214, 80, 190, 238, 143, 219, 61, 50, 235, 205, 189, 239, 46, 202, 61, 36, 77, 64, 191, 253, 34, 145, 191, 93, 228, 108, 62, 48, 198, 224, 61, 157, 167, 30, 189, 22, 152, 150, 190, 3, 44, 70, 61, 227, 79, 59, 190, 115, 13, 4, 191, 211, 83, 135, 62, 62, 158, 153, 62, 62, 201, 26, 62, 83, 13, 92, 190, 22, 72, 156, 191, 27, 13, 132, 61, 106, 103, 89, 62, 64, 95, 143, 191, 152, 197, 172, 190, 231, 155, 171, 189, 44, 48, 223, 61, 238, 58, 150, 190, 231, 34, 126, 190, 21, 91, 67, 61, 144, 61, 227, 62, 10, 118, 193, 62, 179, 140, 26, 62, 151, 65, 151, 62, 114, 77, 36, 190, 141, 133, 148, 62, 178, 233, 25, 61, 109, 179, 173, 62, 243, 85, 1, 190, 76, 194, 0, 62, 158, 28, 134, 62, 226, 169, 222, 59, 132, 239, 135, 61, 228, 6, 37, 60, 154, 56, 145, 190, 231, 219, 5, 190, 11, 28, 172, 62, 220, 112, 136, 190, 231, 241, 37, 190, 226, 140, 199, 190, 6, 144, 0, 191, 96, 221, 99, 61, 120, 205, 5, 62, 36, 92, 25, 190, 0, 67, 131, 190, 28, 206, 159, 62, 207, 3, 87, 62, 243, 105, 10, 189, 159, 158, 176, 190, 177, 148, 28, 62, 120, 181, 179, 61, 209, 101, 16, 191, 205, 195, 151, 62, 116, 174, 20, 61, 92, 156, 112, 189, 12, 217, 55, 62, 49, 36, 79, 62, 30, 174, 0, 191, 24, 163, 194, 190, 190, 80, 147, 188, 186, 241, 23, 191, 231, 227, 92, 60, 32, 186, 141, 62, 252, 138, 25, 191, 124, 245, 14, 62, 155, 122, 255, 190, 227, 90, 112, 190, 112, 79, 190, 190, 21, 54, 242, 61, 48, 86, 188, 190, 82, 28, 180, 189, 18, 18, 92, 189, 189, 65, 132, 190, 76, 214, 143, 189, 28, 142, 212, 188, 147, 243, 39, 191, 66, 159, 47, 62, 162, 111, 65, 62, 102, 179, 140, 190, 66, 242, 157, 189, 167, 40, 123, 62, 200, 25, 1, 188, 124, 210, 24, 59, 67, 40, 123, 62, 81, 179, 45, 191, 215, 91, 55, 189, 119, 224, 158, 62, 136, 31, 141, 62, 233, 83, 235, 189, 208, 95, 25, 190, 106, 110, 24, 190, 211, 251, 104, 190, 59, 136, 175, 62, 178, 74, 134, 62, 30, 68, 172, 62, 0, 214, 34, 190, 27, 160, 4, 61, 11, 188, 61, 61, 192, 252, 83, 59, 122, 230, 143, 62, 108, 53, 128, 60, 112, 233, 148, 61, 233, 160, 141, 190, 58, 98, 72, 190, 62, 94, 81, 62, 8, 252, 76, 188, 143, 14, 68, 62, 122, 250, 34, 189, 229, 92, 2, 189, 103, 108, 111, 62, 147, 10, 136, 61, 52, 129, 59, 189, 176, 226, 191, 62, 58, 96, 176, 190, 61, 84, 17, 190, 95, 149, 9, 190, 12, 233, 211, 61, 79, 218, 212, 187, 86, 81, 190, 60, 237, 142, 2, 189, 235, 31, 212, 61, 4, 190, 253, 61, 167, 48, 72, 189, 61, 124, 145, 190, 199, 200, 229, 189, 49, 17, 22, 189, 210, 91, 228, 61, 193, 138, 236, 188, 61, 13, 89, 62, 253, 186, 116, 61, 29, 73, 149, 189, 28, 93, 200, 189, 247, 156, 172, 61, 187, 60, 78, 61, 167, 225, 211, 60, 81, 189, 12, 61, 202, 165, 192, 189, 233, 35, 72, 191, 251, 103, 98, 62, 77, 94, 200, 190, 38, 255, 151, 61, 201, 152, 8, 189, 73, 80, 90, 61, 64, 222, 21, 189, 112, 243, 193, 62, 232, 162, 177, 189, 225, 138, 228, 191, 142, 47, 224, 62, 211, 237, 211, 62, 177, 247, 229, 62, 185, 210, 56, 190, 94, 70, 74, 62, 208, 8, 22, 188, 140, 186, 132, 188, 202, 77, 10, 191, 140, 123, 13, 62, 174, 20, 113, 190, 204, 146, 189, 189, 8, 23, 150, 188, 103, 98, 101, 191, 90, 7, 131, 190, 123, 21, 131, 62, 128, 143, 203, 190, 133, 181, 35, 62, 33, 233, 121, 61, 226, 241, 22, 191, 28, 205, 98, 191, 184, 60, 120, 191, 222, 158, 212, 62, 63, 43, 198, 61, 36, 156, 23, 189, 139, 105, 177, 61, 193, 176, 33, 191, 221, 67, 197, 61, 159, 127, 113, 190, 226, 5, 217, 61, 23, 209, 35, 190, 60, 71, 111, 60, 185, 93, 42, 62, 162, 167, 46, 191, 158, 15, 187, 189, 119, 176, 143, 190, 198, 190, 224, 61, 83, 13, 80, 189, 132, 87, 217, 62, 22, 11, 122, 190, 54, 171, 93, 189, 110, 235, 169, 62, 70, 93, 53, 62, 101, 172, 243, 61, 201, 35, 199, 61, 56, 55, 123, 187, 39, 218, 1, 61, 222, 241, 22, 191, 93, 43, 11, 62, 234, 229, 253, 190, 217, 148, 51, 61, 78, 192, 197, 189, 216, 192, 116, 62, 30, 14, 90, 62, 70, 153, 44, 190, 182, 123, 10, 63, 247, 249, 216, 59, 210, 49, 249, 190, 232, 82, 151, 62, 249, 210, 76, 62, 63, 207, 148, 189, 82, 215, 187, 61, 129, 152, 140, 190, 173, 15, 118, 190, 114, 47, 89, 62, 213, 99, 79, 191, 24, 70, 21, 62, 249, 140, 31, 190, 35, 130, 82, 189, 100, 3, 11, 190, 92, 137, 20, 190, 75, 124, 140, 191, 85, 129, 48, 191, 254, 158, 154, 189, 13, 119, 73, 190, 238, 58, 46, 190, 100, 113, 28, 190, 14, 49, 167, 190, 214, 110, 216, 60, 120, 57, 252, 190, 97, 107, 100, 189, 45, 226, 15, 191, 1, 204, 133, 58, 110, 222, 144, 186, 193, 42, 172, 190, 43, 17, 43, 190, 235, 221, 134, 58, 26, 225, 38, 61, 237, 15, 153, 190, 200, 116, 16, 191, 116, 165, 210, 62, 21, 20, 115, 190, 42, 82, 160, 190, 248, 167, 189, 188, 23, 172, 106, 191, 29, 35, 117, 190, 96, 87, 164, 191, 168, 135, 155, 62, 85, 208, 130, 62, 217, 30, 146, 62, 41, 241, 133, 189, 145, 201, 237, 61, 213, 156, 92, 190, 98, 92, 78, 62, 97, 217, 199, 188, 239, 178, 14, 190, 16, 84, 142, 190, 146, 137, 41, 190, 79, 210, 56, 60, 61, 172, 15, 190, 124, 102, 110, 189, 4, 2, 166, 62, 151, 205, 168, 61, 126, 157, 131, 62, 30, 205, 170, 62, 9, 209, 142, 190, 58, 47, 50, 190, 107, 66, 40, 191, 248, 141, 29, 61, 202, 155, 13, 62, 165, 93, 135, 190, 146, 163, 191, 60, 152, 169, 68, 191, 167, 198, 136, 61, 59, 70, 10, 189, 135, 188, 255, 61, 160, 43, 15, 62, 198, 102, 142, 190, 58, 125, 205, 189, 65, 80, 66, 62, 1, 18, 167, 62, 54, 111, 114, 62, 166, 172, 33, 62, 41, 144, 152, 62, 0, 193, 115, 190, 149, 68, 204, 62, 238, 63, 138, 190, 231, 232, 137, 190, 179, 2, 148, 190, 43, 152, 33, 62, 120, 223, 185, 60, 43, 49, 76, 190, 186, 83, 216, 61, 64, 53, 200, 61, 105, 9, 108, 190, 213, 98, 188, 190, 242, 241, 248, 61, 74, 207, 46, 190, 243, 249, 61, 190, 179, 110, 119, 190, 94, 224, 29, 190, 40, 7, 62, 191, 117, 70, 147, 62, 151, 214, 178, 190, 93, 1, 127, 190, 157, 89, 90, 62, 21, 32, 44, 60, 71, 191, 243, 189, 125, 231, 101, 188, 142, 17, 149, 190, 67, 208, 68, 190, 56, 29, 0, 191, 252, 50, 15, 62, 122, 126, 232, 61, 175, 154, 80, 62, 240, 220, 25, 62, 225, 250, 26, 191, 171, 22, 158, 62, 155, 49, 36, 190, 139, 11, 135, 191, 160, 47, 128, 190, 223, 162, 118, 189, 216, 116, 189, 61, 255, 158, 215, 59, 104, 7, 207, 189, 138, 81, 0, 191, 63, 96, 169, 189, 214, 8, 229, 190, 251, 211, 229, 189, 18, 15, 9, 189, 214, 3, 89, 62, 240, 198, 35, 62, 171, 250, 194, 61, 136, 126, 136, 191, 22, 54, 97, 62, 211, 33, 51, 191, 189, 64, 30, 191, 0, 125, 43, 189, 74, 168, 163, 62, 231, 147, 135, 191, 84, 126, 14, 63, 181, 182, 80, 63, 217, 250, 178, 62, 210, 249, 252, 190, 21, 249, 235, 190, 110, 62, 7, 191, 75, 84, 53, 191, 9, 193, 68, 62, 89, 90, 20, 188, 116, 110, 115, 191, 123, 191, 68, 62, 107, 33, 116, 190, 66, 171, 146, 63, 43, 45, 42, 191, 164, 137, 10, 191, 92, 148, 180, 62, 135, 180, 35, 62, 192, 183, 86, 190, 135, 199, 70, 62, 15, 91, 154, 61, 255, 254, 194, 189, 111, 206, 217, 62, 108, 214, 1, 62, 63, 18, 160, 62, 111, 184, 143, 189, 122, 213, 128, 190, 238, 119, 18, 192, 57, 152, 224, 61, 111, 4, 115, 62, 150, 79, 156, 190, 211, 14, 126, 191, 175, 50, 85, 188, 145, 123, 203, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 192, 159, 82, 62, 106, 111, 177, 62, 115, 70, 45, 191, 159, 175, 131, 189, 1, 29, 200, 190, 63, 38, 128, 190, 168, 12, 138, 189, 93, 93, 151, 62, 238, 1, 232, 190, 176, 99, 218, 189, 131, 152, 85, 61, 146, 58, 80, 190, 210, 188, 201, 189, 240, 81, 186, 190, 155, 195, 3, 62, 4, 240, 111, 62, 31, 120, 65, 189, 48, 200, 7, 190, 204, 23, 96, 190, 133, 5, 128, 189, 9, 88, 236, 60, 221, 156, 12, 189, 140, 143, 96, 62, 120, 75, 139, 190, 69, 127, 65, 62, 70, 241, 113, 191, 187, 34, 143, 62, 226, 62, 127, 62, 214, 123, 235, 59, 51, 207, 68, 191, 112, 41, 156, 62, 15, 107, 76, 190, 251, 1, 66, 190, 29, 136, 26, 191, 226, 14, 12, 61, 143, 165, 253, 61, 50, 3, 118, 62, 109, 44, 234, 60, 129, 56, 41, 62, 14, 3, 132, 62, 240, 29, 188, 189, 35, 233, 181, 62, 185, 247, 106, 61, 244, 72, 150, 191, 206, 124, 109, 62, 114, 87, 143, 61, 13, 122, 155, 60, 84, 86, 135, 62, 223, 119, 7, 62, 109, 189, 217, 190, 136, 98, 1, 61, 239, 23, 118, 189, 99, 131, 47, 191, 195, 177, 251, 60, 29, 82, 180, 190, 93, 84, 217, 190, 90, 22, 0, 60, 154, 84, 12, 190, 166, 195, 98, 190, 238, 176, 24, 190, 76, 251, 18, 62, 89, 159, 165, 190, 116, 173, 239, 189, 119, 133, 56, 60, 5, 41, 179, 190, 173, 113, 20, 191, 125, 171, 192, 188, 95, 212, 151, 62, 74, 26, 66, 62, 160, 137, 17, 61, 116, 83, 233, 62, 20, 58, 26, 189, 111, 195, 53, 190, 225, 253, 145, 62, 232, 145, 93, 62, 147, 121, 123, 191, 98, 5, 21, 189, 80, 177, 115, 62, 112, 98, 87, 61, 65, 156, 37, 62, 248, 80, 109, 61, 100, 215, 114, 190, 247, 59, 7, 190, 169, 255, 80, 189, 181, 81, 41, 191, 199, 152, 229, 189, 73, 3, 236, 190, 166, 236, 221, 190, 185, 160, 237, 61, 161, 177, 135, 189, 17, 62, 127, 188, 186, 136, 194, 190, 72, 253, 138, 62, 48, 245, 96, 190, 202, 93, 57, 188, 156, 79, 87, 61, 241, 255, 18, 63, 47, 215, 95, 61, 178, 239, 66, 62, 154, 213, 135, 62, 243, 118, 255, 61, 186, 73, 0, 191, 184, 128, 22, 62, 37, 20, 152, 62, 54, 134, 39, 191, 151, 78, 121, 62, 85, 144, 58, 62, 225, 183, 110, 191, 137, 89, 124, 190, 137, 24, 113, 61, 106, 12, 17, 191, 175, 210, 189, 62, 229, 215, 78, 62, 78, 237, 183, 191, 173, 85, 133, 61, 189, 181, 65, 62, 9, 74, 135, 189, 90, 10, 90, 190, 250, 79, 160, 190, 156, 221, 2, 190, 204, 245, 163, 61, 139, 229, 75, 189, 12, 236, 63, 189, 169, 56, 97, 62, 253, 4, 212, 62, 154, 130, 132, 191, 251, 238, 144, 62, 89, 227, 107, 190, 87, 168, 117, 62, 21, 73, 213, 62, 59, 116, 252, 190, 4, 2, 140, 189, 21, 126, 223, 190, 47, 47, 153, 61, 133, 202, 3, 188, 111, 73, 239, 189, 211, 106, 11, 191, 51, 255, 157, 190, 207, 231, 25, 190, 109, 219, 0, 63, 9, 169, 191, 61, 26, 126, 194, 189, 19, 80, 155, 190, 224, 81, 164, 61, 181, 128, 33, 191, 152, 16, 248, 189, 156, 4, 182, 61, 99, 121, 75, 62, 113, 185, 188, 62, 213, 216, 46, 190, 58, 187, 138, 188, 126, 121, 85, 190, 212, 40, 245, 189, 152, 157, 120, 190, 18, 30, 134, 62, 81, 77, 56, 62, 71, 92, 103, 61, 125, 164, 101, 190, 107, 112, 209, 60, 50, 197, 55, 191, 35, 48, 226, 61, 157, 254, 1, 62, 30, 242, 12, 62, 78, 42, 46, 190, 44, 252, 234, 61, 217, 250, 249, 189, 48, 253, 60, 190, 93, 163, 9, 62, 48, 217, 181, 61, 35, 50, 29, 190, 130, 82, 21, 190, 10, 199, 146, 188, 29, 110, 28, 59, 161, 57, 232, 60, 72, 194, 238, 189, 82, 199, 69, 188, 75, 146, 130, 189, 177, 173, 152, 189, 234, 23, 17, 190, 76, 90, 95, 58, 213, 150, 208, 60, 166, 109, 142, 189, 148, 214, 179, 61, 194, 236, 110, 189, 129, 53, 89, 189, 217, 181, 236, 60, 88, 47, 37, 190, 46, 1, 74, 189, 249, 163, 55, 189, 60, 207, 65, 61, 141, 190, 212, 61, 23, 50, 31, 62, 163, 41, 87, 190, 29, 84, 17, 189, 108, 32, 33, 62, 249, 150, 146, 61, 58, 230, 23, 62, 214, 195, 13, 188, 242, 11, 241, 61, 59, 238, 15, 62, 45, 178, 141, 62, 45, 41, 120, 62, 202, 45, 149, 188, 10, 0, 250, 189, 212, 151, 134, 189, 158, 230, 37, 61, 122, 147, 97, 62, 210, 123, 10, 185, 240, 238, 37, 62, 111, 26, 143, 189, 218, 20, 60, 62, 27, 72, 195, 61, 162, 27, 13, 190, 156, 251, 144, 61, 224, 7, 137, 61, 23, 180, 60, 190, 245, 8, 5, 61, 116, 119, 95, 62, 71, 188, 237, 61, 100, 237, 186, 61, 162, 107, 109, 189, 63, 22, 95, 62, 79, 51, 143, 62, 252, 59, 241, 61, 124, 157, 26, 62, 192, 211, 91, 62, 23, 236, 168, 189, 27, 67, 136, 190, 146, 199, 255, 190, 38, 158, 247, 189, 136, 91, 205, 189, 100, 246, 72, 189, 36, 42, 45, 62, 225, 153, 3, 189, 65, 86, 175, 61, 233, 129, 192, 61, 133, 136, 49, 62, 173, 74, 92, 189, 14, 220, 243, 61, 36, 22, 121, 190, 0, 2, 185, 60, 169, 246, 100, 62, 238, 235, 173, 62, 56, 147, 54, 190, 210, 222, 22, 63, 249, 145, 2, 190, 164, 181, 75, 62, 56, 171, 215, 62, 113, 236, 157, 188, 198, 180, 66, 188, 105, 22, 59, 62, 105, 223, 142, 62, 255, 203, 147, 189, 137, 11, 146, 62, 237, 108, 27, 188, 52, 228, 167, 189, 130, 192, 146, 190, 228, 44, 73, 190, 88, 46, 111, 62, 98, 22, 3, 63, 248, 8, 132, 62, 216, 80, 247, 60, 229, 154, 60, 61, 199, 32, 223, 190, 89, 123, 18, 63, 67, 10, 131, 190, 121, 41, 139, 191, 142, 181, 35, 191, 54, 196, 6, 62, 31, 2, 58, 62, 103, 224, 254, 61, 206, 173, 80, 188, 166, 129, 157, 62, 56, 228, 66, 190, 132, 69, 215, 190, 113, 152, 215, 61, 59, 17, 177, 190, 46, 91, 214, 189, 53, 82, 177, 60, 62, 176, 130, 191, 157, 82, 178, 191, 52, 179, 188, 62, 93, 128, 116, 191, 221, 99, 13, 190, 174, 151, 174, 189, 70, 228, 246, 61, 167, 9, 139, 190, 46, 80, 121, 189, 137, 88, 9, 189, 204, 158, 223, 62, 70, 0, 252, 61, 170, 164, 33, 62, 114, 129, 144, 62, 76, 182, 4, 190, 201, 24, 64, 190, 232, 201, 88, 62, 245, 70, 142, 61, 245, 83, 23, 61, 247, 122, 185, 61, 7, 65, 58, 61, 77, 72, 173, 190, 64, 119, 3, 190, 121, 226, 42, 62, 174, 227, 37, 62, 115, 83, 135, 189, 229, 93, 159, 190, 105, 241, 35, 62, 178, 20, 17, 188, 40, 255, 26, 62, 151, 204, 10, 62, 251, 94, 80, 189, 38, 235, 131, 190, 44, 152, 213, 189, 5, 59, 221, 189, 228, 98, 143, 61, 9, 195, 232, 62, 204, 103, 102, 62, 235, 64, 98, 62, 65, 186, 223, 61, 81, 164, 252, 190, 162, 155, 32, 63, 67, 65, 234, 62, 226, 43, 134, 190, 48, 232, 22, 191, 250, 55, 200, 190, 188, 32, 227, 190, 235, 124, 251, 62, 221, 47, 27, 62, 51, 224, 192, 190, 10, 40, 7, 62, 140, 110, 113, 190, 237, 73, 229, 62, 12, 227, 18, 191, 149, 5, 64, 191, 128, 173, 47, 62, 27, 225, 63, 62, 44, 223, 226, 189, 240, 98, 119, 190, 235, 155, 49, 189, 228, 196, 154, 190, 132, 77, 204, 190, 170, 62, 75, 62, 39, 91, 137, 62, 196, 61, 150, 190, 72, 177, 166, 188, 107, 153, 188, 191, 23, 52, 108, 61, 124, 18, 99, 62, 108, 0, 10, 191, 110, 29, 234, 190, 176, 128, 208, 61, 202, 105, 153, 62, 181, 30, 90, 63, 18, 177, 67, 191, 35, 197, 137, 189, 177, 161, 142, 191, 238, 45, 201, 190, 29, 50, 198, 61, 128, 171, 98, 62, 216, 175, 160, 61, 120, 20, 57, 190, 216, 201, 49, 62, 110, 184, 53, 190, 248, 113, 26, 190, 132, 11, 45, 190, 247, 105, 46, 190, 116, 243, 165, 61, 147, 223, 77, 62, 163, 231, 32, 62, 54, 88, 82, 191, 26, 227, 235, 61, 209, 129, 227, 189, 73, 199, 133, 190, 243, 9, 76, 189, 9, 210, 233, 189, 169, 59, 195, 189, 105, 2, 114, 190, 94, 65, 94, 191, 95, 184, 134, 62, 138, 233, 205, 190, 170, 197, 27, 62, 235, 8, 3, 191, 21, 219, 127, 62, 161, 211, 12, 63, 179, 104, 17, 63, 112, 59, 215, 189, 177, 53, 122, 62, 81, 161, 147, 190, 139, 202, 254, 188, 64, 16, 140, 190, 237, 132, 14, 62, 64, 39, 128, 62, 138, 30, 214, 190, 173, 133, 167, 61, 69, 72, 10, 189, 157, 12, 155, 187, 14, 19, 224, 190, 197, 128, 75, 191, 22, 225, 138, 189, 189, 200, 133, 62, 71, 240, 153, 62, 248, 240, 4, 190, 83, 145, 148, 62, 166, 27, 192, 189, 195, 238, 27, 190, 214, 197, 42, 62, 139, 76, 68, 62, 44, 98, 177, 62, 241, 175, 129, 189, 183, 160, 158, 191, 60, 28, 1, 190, 94, 199, 189, 189, 28, 206, 94, 191, 16, 126, 227, 190, 225, 177, 30, 62, 16, 161, 29, 62, 157, 93, 18, 61, 51, 4, 67, 61, 216, 90, 68, 190, 207, 26, 70, 61, 93, 130, 166, 61, 186, 78, 238, 60, 236, 51, 46, 189, 87, 34, 71, 190, 73, 232, 69, 190, 182, 36, 79, 190, 24, 185, 186, 61, 224, 170, 100, 190, 67, 92, 145, 61, 200, 109, 124, 61, 45, 181, 35, 190, 94, 140, 234, 187, 70, 55, 35, 190, 101, 40, 24, 190, 74, 171, 140, 61, 99, 40, 138, 190, 211, 233, 153, 61, 255, 6, 67, 58, 191, 215, 144, 189, 161, 75, 22, 190, 15, 151, 182, 60, 197, 83, 225, 188, 35, 171, 144, 61, 102, 98, 4, 190, 46, 22, 26, 61, 16, 23, 111, 190, 95, 195, 84, 190, 12, 104, 101, 190, 132, 14, 233, 190, 33, 111, 85, 190, 183, 87, 55, 188, 53, 145, 44, 63, 188, 216, 225, 62, 12, 188, 130, 62, 221, 195, 47, 62, 157, 58, 175, 189, 68, 203, 201, 61, 122, 158, 27, 62, 119, 38, 106, 188, 155, 255, 106, 191, 255, 101, 1, 62, 142, 57, 3, 190, 36, 209, 87, 61, 192, 243, 0, 189, 60, 200, 80, 62, 76, 107, 125, 190, 58, 7, 16, 62, 186, 201, 145, 62, 174, 204, 46, 191, 43, 141, 71, 189, 161, 150, 140, 190, 19, 122, 198, 190, 60, 209, 76, 59, 120, 55, 32, 61, 179, 231, 61, 190, 12, 27, 81, 190, 150, 66, 149, 62, 146, 155, 86, 190, 246, 102, 11, 62, 152, 27, 156, 61, 8, 52, 98, 62, 7, 5, 155, 62, 33, 227, 20, 191, 146, 193, 245, 189, 37, 107, 208, 190, 15, 102, 204, 190, 211, 130, 31, 190, 129, 31, 0, 62, 163, 6, 154, 191, 208, 47, 167, 61, 198, 68, 25, 190, 145, 244, 131, 189, 63, 199, 146, 189, 139, 189, 144, 190, 230, 150, 176, 189, 175, 35, 140, 61, 63, 37, 107, 190, 227, 67, 47, 61, 103, 74, 32, 189, 133, 222, 130, 61, 2, 210, 143, 62, 84, 232, 250, 61, 161, 18, 248, 61, 47, 144, 196, 189, 229, 19, 234, 61, 50, 137, 92, 191, 196, 53, 199, 62, 106, 223, 179, 62, 83, 234, 6, 190, 16, 204, 129, 191, 197, 179, 55, 188, 71, 109, 120, 189, 65, 196, 134, 62, 102, 14, 212, 62, 26, 170, 11, 191, 191, 159, 86, 190, 82, 173, 6, 191, 33, 14, 177, 190, 20, 125, 197, 188, 44, 69, 163, 189, 234, 177, 128, 191, 114, 226, 151, 190, 128, 203, 168, 189, 53, 44, 15, 63, 78, 176, 45, 190, 193, 234, 151, 190, 141, 51, 66, 62, 37, 61, 94, 190, 141, 77, 215, 190, 203, 92, 162, 61, 24, 158, 168, 59, 39, 45, 13, 188, 234, 18, 18, 63, 232, 131, 27, 189, 244, 115, 124, 62, 207, 129, 219, 61, 217, 124, 138, 189, 200, 62, 136, 191, 49, 124, 89, 61, 169, 42, 14, 62, 181, 52, 78, 190, 204, 0, 176, 191, 211, 72, 58, 61, 217, 153, 149, 61, 47, 223, 115, 63, 29, 67, 25, 191, 119, 8, 95, 60, 219, 28, 141, 191, 76, 236, 73, 190, 180, 213, 84, 190, 179, 1, 255, 62, 134, 250, 137, 62, 66, 67, 163, 60, 176, 65, 146, 62, 243, 8, 188, 190, 44, 10, 202, 189, 178, 3, 7, 191, 205, 240, 6, 191, 158, 59, 134, 188, 222, 153, 158, 62, 230, 204, 22, 60, 35, 224, 97, 191, 171, 86, 94, 61, 226, 39, 145, 189, 161, 126, 161, 190, 197, 205, 168, 62, 201, 163, 6, 62, 207, 184, 251, 188, 6, 102, 133, 188, 242, 198, 197, 191, 199, 171, 19, 61, 255, 97, 49, 189, 174, 107, 104, 62, 21, 9, 63, 191, 59, 104, 8, 62, 193, 122, 176, 62, 186, 43, 221, 187, 96, 4, 0, 190, 51, 228, 144, 59, 194, 130, 46, 190, 116, 231, 255, 189, 152, 174, 162, 189, 99, 134, 20, 62, 111, 199, 2, 190, 33, 35, 190, 61, 245, 2, 153, 60, 96, 61, 237, 188, 18, 155, 152, 189, 24, 207, 162, 189, 224, 173, 168, 188, 223, 56, 178, 189, 231, 124, 58, 190, 10, 186, 246, 189, 133, 4, 37, 190, 116, 93, 213, 61, 232, 101, 41, 190, 78, 82, 140, 60, 105, 245, 170, 61, 5, 153, 76, 61, 14, 231, 68, 61, 219, 129, 53, 187, 247, 167, 32, 190, 140, 55, 157, 189, 246, 40, 237, 61, 109, 176, 4, 190, 58, 77, 94, 188, 178, 86, 173, 187, 93, 44, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 166, 71, 62, 178, 134, 47, 62, 188, 14, 38, 188, 90, 51, 234, 60, 168, 208, 145, 62, 142, 96, 108, 190, 88, 232, 133, 62, 18, 100, 86, 62, 119, 35, 165, 189, 158, 254, 60, 62, 222, 77, 139, 190, 38, 52, 0, 62, 242, 159, 33, 190, 145, 206, 111, 61, 165, 172, 193, 61, 218, 157, 65, 62, 238, 163, 152, 62, 62, 222, 75, 61, 143, 215, 52, 190, 242, 254, 144, 62, 249, 8, 188, 190, 148, 92, 177, 188, 108, 173, 170, 62, 141, 162, 158, 62, 47, 62, 15, 189, 15, 78, 211, 61, 53, 9, 215, 60, 4, 113, 44, 189, 195, 211, 35, 62, 79, 129, 146, 61, 52, 199, 145, 61, 20, 224, 187, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 108, 48, 63, 12, 249, 227, 190, 184, 15, 84, 62, 242, 233, 175, 62, 196, 82, 15, 189, 166, 213, 92, 63, 225, 240, 131, 62, 49, 116, 28, 63, 7, 149, 219, 62, 105, 180, 143, 190, 241, 220, 22, 191, 94, 210, 174, 63, 90, 98, 217, 189, 244, 229, 9, 63, 252, 209, 15, 191, 87, 122, 0, 191, 12, 248, 236, 190, 56, 173, 24, 63, 219, 55, 89, 59, 175, 15, 255, 187, 28, 213, 169, 190, 38, 234, 11, 191, 33, 186, 61, 190, 229, 38, 141, 63, 41, 68, 83, 63, 229, 123, 158, 62, 190, 228, 158, 188, 226, 152, 31, 191, 231, 140, 7, 63, 101, 71, 9, 63, 103, 204, 99, 63, 120, 48, 184, 61, 228, 194, 221, 189, 200, 77, 58, 61, 108, 86, 207, 190, 146, 5, 52, 61, 108, 190, 20, 190, 90, 64, 145, 61, 129, 118, 82, 190, 158, 137, 143, 190, 191, 110, 88, 62, 239, 15, 101, 190, 201, 202, 117, 62, 209, 48, 128, 63, 123, 197, 162, 189, 108, 246, 251, 61, 96, 234, 203, 61, 204, 76, 101, 62, 95, 129, 200, 190, 253, 124, 144, 60, 227, 145, 159, 189, 128, 174, 72, 190, 5, 182, 19, 190, 120, 243, 159, 62, 244, 52, 171, 190, 207, 40, 252, 188, 6, 171, 161, 62, 112, 59, 31, 190, 118, 190, 25, 60, 71, 223, 51, 189, 21, 5, 0, 61, 178, 247, 126, 63, 180, 134, 65, 62, 193, 54, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 103, 24, 188, 41, 108, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 28, 149, 190, 82, 184, 139, 63, 157, 106, 196, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 84, 50, 64, 221, 17, 181, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}