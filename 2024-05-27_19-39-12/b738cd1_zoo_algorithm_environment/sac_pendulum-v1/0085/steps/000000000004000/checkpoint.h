// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 52, 178, 190, 60, 185, 58, 63, 9, 6, 184, 190, 217, 207, 22, 63, 223, 183, 65, 191, 52, 79, 92, 190, 92, 151, 194, 61, 146, 95, 109, 63, 70, 229, 146, 61, 108, 192, 51, 63, 16, 0, 184, 62, 0, 52, 95, 62, 10, 124, 6, 63, 51, 53, 108, 63, 194, 85, 17, 62, 91, 50, 169, 190, 40, 249, 128, 189, 205, 206, 78, 191, 46, 228, 29, 190, 57, 121, 63, 63, 205, 180, 235, 190, 14, 141, 58, 190, 170, 155, 78, 190, 249, 43, 242, 61, 63, 170, 207, 190, 88, 181, 31, 191, 10, 31, 44, 190, 176, 155, 66, 191, 154, 222, 110, 190, 2, 225, 20, 62, 57, 13, 175, 189, 232, 34, 4, 191, 150, 227, 196, 62, 169, 70, 149, 61, 120, 77, 31, 191, 140, 192, 4, 191, 226, 39, 65, 190, 19, 86, 252, 62, 15, 57, 90, 191, 249, 218, 2, 190, 181, 222, 51, 63, 72, 104, 67, 191, 39, 50, 182, 190, 202, 168, 13, 191, 252, 142, 220, 189, 197, 61, 162, 189, 188, 36, 17, 60, 76, 97, 144, 189, 48, 137, 101, 61, 230, 149, 43, 63, 34, 246, 103, 62, 23, 3, 148, 61, 18, 148, 107, 191, 78, 242, 217, 190, 130, 166, 232, 189, 251, 196, 250, 61, 9, 177, 235, 62, 113, 181, 7, 62, 159, 208, 182, 61, 59, 190, 244, 190, 135, 164, 245, 62, 71, 170, 195, 190, 70, 141, 10, 191, 250, 22, 135, 190, 200, 133, 196, 190, 237, 7, 24, 189, 23, 17, 22, 190, 182, 165, 73, 191, 32, 99, 45, 189, 80, 87, 211, 189, 238, 199, 8, 63, 160, 52, 83, 62, 190, 12, 245, 188, 96, 211, 204, 190, 84, 47, 142, 62, 232, 114, 219, 190, 53, 41, 183, 62, 68, 177, 28, 191, 242, 162, 21, 191, 13, 73, 158, 190, 149, 58, 18, 63, 228, 113, 32, 63, 239, 0, 41, 191, 130, 220, 156, 189, 153, 32, 165, 61, 65, 66, 18, 63, 210, 114, 235, 190, 106, 12, 33, 189, 166, 26, 129, 190, 39, 35, 63, 190, 236, 213, 193, 61, 147, 217, 65, 60, 117, 190, 110, 62, 244, 121, 104, 191, 25, 255, 33, 63, 89, 152, 130, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 231, 129, 190, 106, 25, 135, 62, 18, 96, 163, 188, 182, 166, 132, 189, 40, 139, 21, 61, 13, 36, 152, 62, 71, 205, 20, 62, 77, 26, 207, 62, 26, 143, 135, 61, 215, 148, 47, 61, 230, 142, 49, 190, 40, 193, 79, 191, 122, 182, 168, 60, 128, 163, 131, 61, 112, 30, 7, 63, 190, 248, 6, 63, 197, 111, 164, 62, 141, 12, 191, 61, 102, 143, 76, 62, 118, 109, 227, 62, 80, 25, 136, 190, 134, 28, 180, 62, 28, 51, 4, 63, 168, 64, 9, 191, 41, 53, 207, 189, 196, 76, 138, 190, 40, 43, 163, 190, 231, 110, 243, 62, 243, 190, 87, 62, 236, 222, 167, 61, 105, 224, 163, 62, 195, 98, 106, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 94, 57, 60, 102, 135, 130, 188, 33, 230, 119, 190, 184, 71, 143, 61, 89, 236, 109, 190, 152, 108, 156, 190, 191, 31, 161, 190, 136, 86, 153, 62, 92, 34, 100, 189, 242, 182, 219, 61, 172, 158, 206, 189, 245, 47, 1, 62, 123, 19, 47, 191, 40, 246, 160, 191, 8, 249, 60, 62, 2, 167, 172, 61, 14, 61, 187, 188, 76, 17, 99, 190, 198, 6, 186, 61, 154, 126, 115, 189, 54, 238, 94, 190, 246, 199, 136, 62, 17, 86, 46, 62, 105, 140, 146, 61, 68, 137, 118, 190, 4, 207, 87, 191, 56, 236, 41, 61, 53, 208, 36, 62, 115, 6, 158, 191, 3, 99, 235, 189, 58, 118, 40, 189, 89, 15, 151, 61, 210, 122, 183, 190, 62, 69, 216, 189, 84, 188, 13, 189, 233, 95, 195, 62, 185, 74, 150, 62, 164, 249, 226, 61, 253, 207, 127, 62, 22, 69, 141, 189, 84, 158, 11, 61, 96, 187, 96, 189, 172, 233, 92, 61, 169, 72, 169, 189, 82, 108, 132, 61, 193, 97, 72, 62, 177, 254, 40, 61, 251, 243, 52, 62, 113, 122, 64, 189, 226, 53, 53, 190, 148, 154, 74, 190, 54, 249, 156, 62, 145, 225, 139, 190, 229, 60, 218, 189, 252, 165, 136, 190, 238, 157, 147, 188, 78, 99, 11, 190, 186, 102, 169, 60, 114, 27, 178, 190, 206, 176, 23, 190, 123, 159, 155, 62, 209, 172, 240, 61, 184, 107, 19, 189, 235, 102, 129, 189, 100, 196, 159, 188, 57, 201, 13, 62, 159, 115, 164, 189, 149, 204, 87, 62, 122, 180, 36, 62, 72, 170, 140, 189, 31, 16, 137, 61, 199, 242, 21, 62, 199, 146, 35, 190, 154, 32, 28, 190, 11, 11, 229, 60, 139, 8, 122, 190, 35, 39, 177, 188, 199, 73, 132, 62, 7, 143, 86, 60, 52, 174, 23, 62, 114, 28, 159, 189, 216, 178, 141, 61, 230, 197, 29, 61, 27, 226, 253, 61, 249, 152, 78, 190, 186, 43, 205, 61, 8, 226, 200, 61, 218, 33, 180, 60, 103, 74, 20, 189, 43, 1, 51, 189, 168, 204, 145, 190, 9, 212, 63, 62, 52, 249, 40, 62, 33, 27, 108, 189, 124, 242, 67, 190, 198, 220, 231, 187, 230, 142, 152, 61, 189, 253, 11, 61, 129, 89, 166, 62, 244, 254, 178, 190, 157, 253, 71, 62, 102, 118, 131, 62, 247, 186, 106, 62, 84, 110, 104, 190, 217, 141, 31, 61, 38, 40, 134, 190, 118, 123, 142, 190, 61, 226, 41, 188, 241, 185, 101, 62, 221, 21, 144, 62, 0, 122, 107, 189, 165, 59, 159, 60, 137, 58, 218, 61, 182, 5, 156, 189, 105, 50, 148, 61, 237, 55, 135, 187, 149, 53, 164, 188, 51, 3, 65, 190, 62, 69, 61, 190, 54, 82, 233, 189, 203, 187, 7, 190, 250, 224, 59, 62, 187, 48, 82, 189, 121, 107, 42, 61, 129, 84, 76, 62, 195, 8, 27, 61, 13, 217, 229, 189, 105, 123, 158, 62, 182, 132, 180, 190, 124, 67, 27, 190, 120, 219, 33, 190, 165, 146, 64, 62, 71, 20, 10, 60, 20, 200, 148, 59, 169, 81, 2, 61, 69, 150, 130, 62, 61, 228, 81, 61, 84, 2, 152, 62, 172, 146, 175, 189, 17, 146, 204, 189, 157, 79, 6, 189, 197, 155, 17, 62, 232, 90, 7, 187, 251, 47, 118, 62, 143, 83, 41, 59, 91, 174, 100, 189, 153, 225, 85, 189, 155, 118, 184, 61, 239, 114, 123, 189, 236, 30, 38, 61, 7, 166, 16, 61, 47, 235, 19, 62, 183, 34, 150, 189, 37, 188, 48, 62, 76, 78, 53, 190, 136, 227, 242, 61, 62, 117, 225, 60, 63, 89, 102, 189, 218, 109, 98, 61, 119, 223, 132, 62, 118, 104, 237, 189, 6, 252, 70, 190, 196, 172, 197, 61, 56, 18, 76, 62, 109, 56, 7, 62, 111, 98, 99, 189, 137, 101, 115, 61, 146, 16, 107, 189, 158, 21, 26, 61, 238, 255, 9, 191, 12, 179, 42, 62, 239, 146, 154, 188, 204, 48, 59, 187, 230, 204, 160, 189, 120, 13, 192, 190, 25, 135, 13, 191, 67, 179, 188, 188, 12, 143, 216, 189, 182, 88, 142, 60, 79, 13, 185, 189, 230, 64, 162, 189, 99, 153, 202, 190, 74, 27, 158, 190, 88, 77, 73, 62, 84, 3, 247, 61, 60, 71, 79, 62, 248, 241, 227, 61, 226, 244, 132, 189, 36, 115, 163, 189, 36, 47, 27, 190, 127, 80, 192, 187, 254, 171, 119, 190, 210, 133, 3, 62, 25, 67, 227, 61, 214, 171, 53, 187, 231, 62, 132, 189, 253, 245, 136, 59, 50, 141, 252, 61, 182, 141, 66, 60, 175, 245, 158, 61, 44, 137, 159, 189, 204, 248, 168, 190, 137, 26, 254, 61, 63, 114, 142, 61, 254, 87, 38, 62, 242, 93, 27, 62, 41, 229, 245, 189, 117, 107, 163, 189, 236, 192, 144, 188, 57, 144, 36, 62, 92, 189, 62, 190, 187, 211, 180, 61, 38, 231, 159, 61, 7, 178, 247, 60, 103, 240, 159, 61, 232, 169, 78, 59, 171, 63, 26, 62, 223, 125, 152, 61, 26, 127, 100, 190, 42, 200, 71, 62, 165, 194, 78, 62, 19, 190, 73, 61, 35, 114, 34, 189, 108, 224, 51, 190, 1, 185, 81, 189, 78, 15, 24, 61, 247, 99, 33, 190, 142, 208, 12, 61, 147, 144, 10, 61, 14, 162, 5, 62, 81, 121, 192, 61, 104, 66, 218, 189, 31, 199, 8, 190, 207, 171, 131, 189, 193, 2, 210, 58, 148, 39, 249, 189, 34, 94, 230, 189, 121, 212, 112, 61, 172, 76, 202, 61, 120, 139, 183, 61, 29, 128, 100, 60, 207, 197, 131, 60, 194, 153, 83, 190, 68, 232, 116, 61, 122, 141, 193, 189, 234, 13, 158, 61, 73, 39, 7, 190, 228, 197, 12, 61, 240, 103, 180, 59, 229, 246, 224, 189, 187, 65, 54, 187, 116, 1, 117, 62, 103, 93, 128, 190, 200, 36, 115, 61, 47, 206, 201, 189, 244, 135, 170, 190, 117, 228, 200, 61, 111, 245, 1, 190, 120, 107, 215, 188, 148, 74, 52, 62, 184, 63, 202, 60, 244, 51, 140, 60, 36, 224, 8, 59, 140, 84, 70, 190, 49, 76, 25, 62, 160, 216, 223, 186, 7, 56, 208, 189, 125, 189, 158, 60, 84, 103, 43, 190, 172, 231, 36, 190, 233, 43, 44, 62, 184, 64, 153, 190, 57, 8, 15, 61, 124, 102, 246, 61, 172, 223, 18, 62, 131, 218, 201, 61, 23, 115, 122, 62, 195, 39, 31, 62, 94, 197, 147, 61, 190, 166, 218, 189, 24, 208, 37, 62, 125, 41, 251, 189, 153, 243, 45, 61, 16, 183, 19, 190, 175, 153, 80, 190, 220, 141, 111, 189, 223, 28, 93, 61, 122, 207, 217, 189, 80, 106, 152, 190, 81, 121, 33, 60, 214, 96, 18, 61, 106, 89, 165, 62, 40, 24, 14, 62, 150, 199, 238, 61, 184, 171, 153, 62, 188, 51, 18, 62, 87, 50, 22, 62, 53, 72, 27, 190, 120, 224, 79, 189, 143, 253, 47, 190, 91, 46, 240, 61, 170, 89, 52, 59, 187, 90, 72, 189, 194, 40, 250, 61, 25, 124, 105, 189, 202, 129, 243, 189, 243, 78, 84, 190, 155, 31, 215, 61, 119, 172, 39, 190, 216, 177, 44, 190, 199, 36, 58, 190, 220, 61, 13, 61, 88, 235, 69, 190, 190, 34, 72, 62, 67, 43, 116, 190, 202, 171, 222, 189, 243, 222, 112, 62, 62, 91, 164, 189, 213, 138, 93, 61, 181, 87, 172, 189, 190, 144, 142, 190, 188, 150, 25, 60, 203, 87, 71, 189, 97, 216, 108, 62, 64, 182, 70, 62, 50, 156, 28, 62, 31, 214, 85, 62, 232, 175, 92, 61, 63, 251, 211, 188, 228, 231, 15, 189, 106, 151, 144, 190, 206, 15, 111, 59, 9, 130, 204, 189, 52, 165, 235, 61, 249, 72, 216, 189, 130, 233, 69, 61, 86, 116, 232, 189, 237, 111, 34, 190, 147, 8, 138, 190, 67, 139, 41, 189, 85, 248, 182, 188, 17, 187, 160, 61, 85, 111, 52, 61, 178, 241, 193, 61, 42, 135, 91, 60, 124, 77, 194, 61, 92, 18, 83, 191, 77, 80, 13, 190, 8, 92, 243, 61, 149, 60, 50, 62, 160, 49, 166, 190, 52, 20, 227, 62, 254, 146, 208, 62, 41, 252, 122, 62, 0, 211, 169, 190, 134, 125, 121, 190, 174, 95, 182, 190, 39, 56, 150, 190, 109, 35, 47, 190, 124, 168, 239, 60, 135, 193, 159, 190, 149, 46, 127, 62, 25, 65, 109, 190, 188, 184, 208, 189, 174, 51, 49, 191, 75, 167, 137, 191, 224, 43, 143, 62, 219, 38, 110, 62, 218, 198, 128, 189, 86, 211, 215, 60, 220, 123, 93, 61, 86, 62, 11, 60, 178, 197, 155, 62, 156, 172, 221, 61, 165, 18, 49, 62, 42, 189, 123, 190, 91, 151, 151, 190, 84, 162, 138, 191, 183, 247, 32, 62, 178, 149, 86, 62, 87, 48, 176, 190, 98, 241, 219, 188, 208, 11, 94, 61, 2, 51, 151, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 9, 106, 145, 62, 75, 73, 121, 62, 80, 217, 205, 190, 64, 164, 24, 189, 158, 194, 143, 190, 109, 240, 203, 61, 38, 99, 110, 190, 112, 229, 252, 61, 143, 182, 138, 61, 225, 144, 38, 190, 135, 93, 115, 189, 189, 121, 107, 61, 229, 75, 175, 61, 208, 45, 132, 190, 42, 20, 80, 61, 158, 48, 20, 62, 152, 139, 67, 62, 124, 148, 164, 60, 156, 223, 154, 189, 165, 179, 177, 188, 237, 78, 59, 62, 154, 223, 189, 189, 122, 204, 60, 62, 238, 168, 233, 189, 31, 134, 182, 187, 155, 30, 159, 190, 40, 229, 162, 62, 133, 116, 13, 62, 254, 180, 232, 189, 255, 30, 134, 189, 103, 60, 125, 62, 18, 42, 97, 190, 39, 81, 141, 190, 24, 123, 131, 190, 28, 235, 128, 61, 88, 189, 36, 188, 39, 177, 66, 62, 175, 55, 208, 61, 5, 71, 199, 61, 182, 236, 167, 62, 76, 162, 153, 61, 64, 12, 196, 62, 46, 83, 50, 61, 222, 251, 6, 191, 224, 207, 134, 62, 74, 175, 159, 61, 104, 86, 27, 62, 136, 197, 180, 62, 117, 111, 17, 62, 113, 42, 105, 189, 236, 122, 81, 61, 142, 27, 67, 189, 22, 104, 243, 190, 227, 105, 58, 62, 195, 47, 186, 61, 191, 196, 243, 189, 131, 72, 168, 60, 93, 50, 215, 188, 224, 6, 135, 190, 157, 95, 34, 189, 149, 153, 1, 62, 200, 142, 177, 189, 125, 2, 22, 190, 37, 158, 9, 61, 27, 211, 6, 191, 58, 102, 57, 190, 192, 24, 143, 60, 227, 20, 126, 62, 113, 207, 59, 62, 120, 233, 145, 61, 73, 65, 155, 62, 251, 106, 27, 188, 53, 48, 13, 61, 210, 190, 159, 62, 64, 210, 57, 62, 255, 26, 206, 190, 145, 237, 54, 189, 241, 107, 63, 62, 82, 14, 63, 62, 204, 194, 94, 62, 33, 37, 128, 61, 130, 31, 24, 62, 118, 238, 213, 189, 216, 49, 163, 189, 84, 148, 231, 190, 228, 222, 150, 60, 201, 55, 90, 60, 154, 19, 195, 189, 163, 28, 178, 61, 15, 141, 59, 61, 212, 36, 73, 189, 250, 187, 87, 190, 32, 110, 60, 62, 124, 175, 211, 61, 215, 238, 46, 189, 92, 33, 117, 61, 37, 78, 135, 60, 8, 234, 69, 189, 172, 144, 21, 62, 73, 243, 42, 62, 117, 143, 66, 61, 119, 221, 133, 190, 32, 39, 147, 190, 206, 100, 127, 62, 91, 124, 103, 60, 153, 210, 18, 62, 176, 191, 111, 61, 114, 29, 230, 60, 20, 196, 175, 190, 191, 139, 44, 190, 117, 141, 202, 190, 67, 207, 92, 62, 127, 157, 223, 61, 190, 242, 235, 190, 119, 94, 242, 60, 231, 126, 11, 190, 70, 37, 94, 190, 186, 187, 190, 189, 193, 65, 164, 189, 236, 115, 142, 61, 92, 171, 97, 59, 44, 111, 129, 189, 105, 124, 14, 190, 9, 4, 171, 61, 214, 29, 204, 61, 237, 62, 185, 190, 46, 253, 65, 62, 169, 34, 77, 189, 87, 180, 51, 62, 168, 94, 167, 62, 195, 79, 141, 189, 118, 88, 50, 60, 164, 97, 126, 190, 190, 136, 158, 61, 229, 136, 88, 190, 185, 110, 56, 189, 13, 254, 117, 189, 40, 107, 95, 190, 2, 200, 66, 189, 100, 135, 31, 62, 158, 237, 17, 56, 249, 200, 130, 190, 87, 251, 149, 61, 58, 171, 27, 62, 171, 225, 63, 190, 77, 140, 212, 188, 233, 8, 98, 62, 123, 14, 249, 61, 186, 23, 124, 62, 214, 134, 27, 62, 86, 13, 211, 61, 197, 79, 42, 190, 203, 224, 56, 190, 157, 4, 70, 190, 75, 155, 169, 62, 16, 90, 3, 62, 200, 58, 47, 190, 42, 40, 123, 61, 220, 212, 172, 61, 228, 11, 142, 190, 245, 199, 246, 61, 220, 19, 2, 62, 160, 59, 13, 62, 120, 239, 45, 190, 48, 107, 229, 61, 141, 145, 215, 189, 117, 207, 46, 190, 247, 136, 10, 62, 154, 250, 181, 61, 13, 162, 25, 190, 212, 125, 21, 190, 10, 199, 146, 188, 89, 144, 170, 60, 65, 221, 58, 61, 203, 83, 222, 189, 89, 182, 192, 187, 124, 233, 134, 189, 173, 162, 152, 189, 165, 57, 23, 190, 237, 37, 65, 60, 61, 96, 212, 60, 208, 156, 131, 189, 27, 1, 183, 61, 234, 115, 120, 189, 158, 190, 89, 189, 68, 155, 31, 61, 200, 135, 42, 190, 130, 241, 70, 189, 98, 33, 5, 189, 213, 192, 66, 61, 247, 99, 207, 61, 18, 24, 35, 62, 103, 119, 66, 190, 73, 161, 172, 188, 33, 51, 201, 61, 26, 145, 147, 61, 181, 109, 225, 61, 138, 207, 18, 189, 151, 170, 83, 62, 7, 238, 233, 61, 218, 196, 123, 62, 136, 207, 114, 62, 82, 20, 105, 189, 53, 82, 80, 190, 17, 115, 132, 189, 228, 138, 162, 61, 138, 223, 10, 62, 228, 117, 56, 61, 105, 113, 182, 61, 144, 110, 136, 188, 53, 153, 5, 62, 217, 63, 1, 62, 246, 209, 117, 190, 132, 149, 211, 187, 120, 27, 64, 61, 186, 127, 4, 190, 29, 125, 185, 61, 162, 235, 40, 62, 1, 150, 160, 61, 55, 50, 17, 62, 4, 124, 213, 60, 183, 219, 249, 61, 190, 242, 67, 62, 252, 34, 170, 61, 179, 24, 99, 61, 132, 145, 5, 58, 53, 111, 254, 189, 196, 17, 216, 190, 124, 160, 184, 190, 108, 74, 10, 190, 115, 110, 95, 189, 217, 133, 222, 188, 154, 105, 187, 61, 237, 253, 79, 189, 252, 214, 254, 61, 86, 241, 1, 61, 32, 47, 42, 62, 50, 80, 200, 188, 149, 221, 51, 62, 77, 208, 217, 61, 178, 191, 24, 189, 129, 93, 95, 61, 75, 251, 28, 62, 139, 142, 240, 189, 211, 65, 167, 62, 194, 40, 253, 188, 133, 33, 53, 62, 20, 174, 104, 61, 17, 224, 14, 62, 70, 216, 184, 189, 32, 86, 134, 61, 94, 185, 242, 61, 207, 188, 9, 62, 32, 225, 144, 61, 216, 43, 243, 188, 217, 5, 201, 189, 144, 110, 39, 190, 31, 62, 253, 189, 244, 101, 67, 60, 131, 149, 217, 62, 239, 10, 157, 61, 245, 22, 13, 61, 111, 163, 245, 61, 47, 13, 30, 62, 92, 178, 40, 62, 142, 105, 0, 61, 176, 203, 185, 189, 149, 26, 172, 190, 4, 118, 35, 62, 216, 245, 95, 62, 179, 148, 25, 61, 103, 119, 190, 188, 95, 167, 218, 61, 152, 83, 67, 190, 205, 168, 180, 189, 22, 150, 218, 61, 11, 32, 169, 190, 240, 14, 50, 190, 252, 65, 217, 59, 245, 232, 40, 189, 48, 213, 247, 189, 22, 13, 158, 62, 104, 22, 212, 190, 251, 115, 162, 189, 29, 89, 69, 189, 242, 176, 244, 188, 113, 33, 122, 61, 91, 181, 239, 188, 234, 232, 250, 189, 240, 214, 68, 62, 126, 233, 74, 60, 82, 164, 1, 62, 183, 222, 71, 62, 255, 191, 247, 60, 224, 8, 2, 190, 156, 37, 22, 62, 114, 70, 12, 60, 248, 192, 247, 187, 137, 156, 167, 58, 107, 132, 59, 189, 150, 180, 41, 190, 205, 96, 3, 189, 50, 255, 194, 61, 215, 39, 21, 62, 53, 173, 55, 190, 70, 9, 42, 190, 177, 106, 239, 61, 100, 121, 20, 190, 178, 53, 75, 190, 162, 159, 229, 61, 5, 223, 253, 188, 49, 243, 40, 190, 127, 39, 140, 189, 71, 138, 203, 61, 20, 57, 218, 188, 19, 215, 128, 62, 229, 240, 173, 61, 40, 198, 236, 60, 135, 193, 44, 61, 167, 116, 59, 190, 181, 240, 28, 189, 240, 46, 154, 61, 141, 55, 129, 190, 195, 177, 96, 190, 98, 69, 123, 190, 61, 63, 136, 190, 250, 62, 214, 187, 228, 165, 69, 62, 60, 229, 26, 190, 79, 43, 40, 62, 91, 117, 73, 190, 189, 162, 233, 60, 247, 106, 6, 191, 255, 186, 132, 191, 52, 125, 226, 61, 201, 128, 216, 61, 187, 66, 233, 189, 80, 10, 101, 190, 82, 63, 230, 187, 3, 248, 128, 190, 234, 161, 38, 190, 181, 193, 77, 62, 169, 46, 188, 61, 242, 54, 142, 190, 18, 146, 174, 188, 66, 89, 82, 191, 147, 75, 208, 61, 125, 235, 30, 62, 217, 139, 101, 191, 204, 169, 48, 189, 183, 217, 25, 62, 77, 167, 55, 62, 197, 119, 144, 62, 92, 125, 46, 190, 141, 70, 194, 189, 233, 186, 19, 191, 234, 133, 130, 190, 147, 147, 200, 188, 185, 58, 205, 189, 135, 235, 27, 61, 249, 178, 221, 188, 18, 22, 193, 61, 19, 184, 168, 190, 4, 122, 254, 189, 220, 125, 209, 190, 219, 141, 60, 191, 42, 155, 3, 62, 12, 23, 102, 62, 7, 36, 194, 61, 180, 208, 160, 190, 108, 249, 140, 61, 237, 59, 86, 190, 132, 223, 90, 61, 174, 77, 64, 188, 63, 146, 25, 190, 93, 157, 29, 190, 8, 7, 207, 190, 144, 80, 51, 191, 9, 136, 52, 62, 156, 67, 80, 190, 48, 186, 167, 190, 8, 50, 126, 189, 124, 85, 104, 62, 64, 221, 245, 62, 149, 181, 55, 62, 115, 9, 247, 188, 123, 172, 225, 189, 62, 44, 231, 189, 134, 54, 104, 190, 39, 103, 91, 190, 234, 63, 48, 190, 89, 213, 165, 62, 234, 196, 91, 190, 25, 165, 252, 61, 157, 214, 89, 61, 40, 4, 236, 60, 148, 207, 216, 190, 236, 195, 115, 191, 7, 246, 61, 189, 223, 18, 34, 62, 208, 81, 38, 188, 135, 58, 7, 61, 5, 125, 114, 62, 217, 193, 54, 61, 63, 40, 2, 187, 85, 248, 110, 62, 173, 46, 32, 62, 232, 27, 61, 61, 56, 200, 119, 60, 108, 101, 68, 191, 32, 179, 120, 189, 6, 0, 44, 62, 10, 2, 73, 191, 60, 147, 207, 59, 23, 96, 74, 62, 200, 96, 184, 188, 173, 241, 40, 61, 143, 195, 175, 61, 46, 151, 44, 190, 57, 251, 173, 61, 197, 118, 248, 61, 255, 48, 10, 61, 130, 53, 27, 189, 120, 225, 64, 190, 73, 232, 69, 190, 17, 194, 78, 190, 117, 126, 188, 61, 29, 147, 98, 190, 232, 162, 157, 61, 220, 104, 139, 61, 157, 180, 34, 190, 108, 93, 30, 60, 85, 22, 13, 190, 36, 180, 4, 190, 46, 180, 142, 61, 60, 160, 110, 190, 11, 14, 217, 61, 8, 140, 172, 58, 145, 226, 92, 189, 5, 64, 20, 190, 205, 226, 188, 60, 180, 102, 175, 188, 167, 99, 147, 61, 91, 137, 193, 189, 116, 37, 152, 61, 245, 185, 108, 190, 4, 58, 82, 190, 58, 85, 101, 190, 25, 24, 243, 190, 192, 93, 129, 189, 59, 146, 106, 190, 149, 237, 253, 62, 184, 11, 112, 62, 69, 136, 158, 62, 10, 150, 207, 61, 59, 171, 132, 189, 90, 119, 192, 61, 211, 11, 40, 61, 191, 250, 76, 190, 40, 124, 173, 190, 33, 13, 19, 62, 109, 59, 31, 190, 152, 181, 15, 62, 160, 38, 136, 189, 241, 157, 36, 61, 27, 21, 77, 60, 153, 201, 45, 61, 7, 11, 117, 62, 209, 89, 24, 191, 239, 144, 140, 61, 50, 29, 46, 189, 67, 136, 153, 189, 26, 86, 3, 190, 170, 153, 80, 61, 55, 85, 168, 190, 165, 6, 65, 190, 80, 51, 87, 62, 108, 69, 80, 189, 35, 241, 147, 61, 101, 42, 219, 61, 39, 61, 173, 62, 200, 165, 100, 62, 19, 119, 154, 190, 242, 38, 211, 188, 229, 121, 131, 190, 77, 16, 247, 189, 195, 28, 251, 189, 9, 126, 14, 62, 207, 106, 42, 190, 165, 110, 25, 61, 127, 225, 66, 190, 158, 104, 246, 61, 146, 120, 128, 189, 156, 225, 96, 190, 255, 63, 153, 189, 131, 114, 139, 61, 159, 33, 221, 186, 56, 192, 77, 62, 70, 227, 154, 59, 159, 61, 194, 61, 178, 140, 130, 62, 40, 181, 36, 62, 146, 247, 3, 62, 193, 176, 127, 61, 1, 23, 61, 61, 155, 242, 85, 190, 47, 200, 184, 62, 1, 75, 155, 62, 12, 168, 148, 190, 79, 36, 168, 189, 245, 8, 160, 188, 137, 2, 175, 190, 238, 204, 166, 62, 25, 131, 191, 62, 250, 80, 96, 190, 234, 68, 231, 189, 92, 177, 191, 190, 106, 149, 215, 59, 1, 46, 52, 190, 129, 205, 40, 61, 138, 138, 190, 61, 119, 6, 34, 190, 77, 139, 147, 60, 44, 177, 136, 62, 100, 173, 91, 189, 233, 121, 164, 190, 251, 158, 14, 62, 141, 147, 9, 190, 131, 70, 4, 190, 147, 188, 154, 188, 194, 138, 223, 61, 139, 194, 118, 61, 21, 164, 14, 63, 221, 74, 130, 188, 255, 248, 91, 62, 243, 4, 92, 188, 132, 56, 145, 189, 77, 173, 128, 190, 237, 108, 236, 61, 147, 67, 11, 62, 209, 103, 142, 190, 121, 131, 67, 189, 108, 253, 38, 62, 179, 86, 105, 61, 80, 95, 205, 62, 146, 185, 130, 190, 255, 247, 65, 60, 46, 58, 9, 191, 169, 71, 251, 188, 2, 19, 66, 190, 238, 209, 34, 62, 67, 40, 108, 62, 51, 252, 215, 61, 215, 77, 109, 62, 16, 239, 2, 191, 125, 30, 8, 189, 153, 213, 45, 191, 148, 125, 142, 191, 11, 67, 128, 189, 197, 37, 123, 62, 191, 165, 1, 189, 242, 7, 224, 190, 32, 193, 43, 61, 56, 87, 36, 190, 145, 158, 225, 60, 254, 93, 153, 62, 61, 214, 87, 189, 133, 133, 80, 61, 51, 226, 62, 190, 254, 109, 113, 191, 223, 232, 203, 187, 95, 250, 81, 190, 174, 41, 159, 190, 140, 187, 112, 189, 199, 185, 235, 61, 106, 19, 178, 62, 23, 176, 91, 187, 96, 4, 0, 190, 69, 186, 37, 60, 194, 130, 46, 190, 154, 89, 255, 189, 233, 162, 161, 189, 145, 83, 28, 62, 91, 112, 246, 189, 214, 3, 192, 61, 71, 15, 228, 60, 109, 17, 236, 188, 18, 155, 152, 189, 24, 207, 162, 189, 61, 49, 167, 188, 173, 255, 162, 189, 170, 82, 49, 190, 221, 28, 222, 189, 133, 4, 37, 190, 247, 4, 234, 61, 170, 236, 40, 190, 78, 82, 140, 60, 32, 251, 183, 61, 196, 25, 89, 61, 14, 231, 68, 61, 234, 190, 50, 187, 247, 167, 32, 190, 162, 122, 144, 189, 246, 40, 237, 61, 196, 45, 4, 190, 58, 77, 94, 188, 249, 1, 98, 58, 194, 231, 223, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 239, 226, 61, 170, 244, 153, 62, 154, 100, 29, 189, 16, 131, 179, 61, 124, 52, 167, 62, 249, 115, 181, 190, 33, 238, 234, 61, 197, 184, 31, 62, 65, 175, 25, 190, 118, 27, 131, 62, 36, 100, 190, 61, 0, 83, 3, 62, 242, 159, 33, 190, 78, 57, 184, 189, 162, 146, 42, 62, 245, 232, 128, 62, 66, 56, 74, 62, 163, 242, 124, 61, 70, 144, 45, 190, 12, 58, 147, 62, 101, 65, 81, 189, 145, 153, 2, 61, 210, 14, 135, 62, 223, 156, 74, 62, 22, 4, 215, 188, 88, 37, 1, 61, 33, 211, 128, 61, 208, 220, 159, 189, 226, 161, 220, 61, 114, 16, 176, 61, 167, 64, 166, 59, 120, 96, 231, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 185, 15, 63, 85, 128, 219, 190, 235, 31, 15, 60, 100, 31, 156, 62, 203, 53, 54, 190, 24, 253, 195, 62, 240, 173, 46, 62, 226, 227, 226, 61, 96, 219, 162, 61, 97, 117, 153, 190, 175, 2, 115, 190, 58, 217, 31, 63, 90, 98, 217, 189, 17, 143, 153, 62, 234, 116, 177, 190, 68, 57, 134, 190, 244, 84, 147, 190, 158, 178, 182, 62, 235, 198, 170, 60, 236, 130, 214, 189, 103, 147, 194, 189, 88, 216, 106, 190, 152, 120, 145, 189, 53, 251, 44, 63, 196, 213, 31, 63, 206, 44, 117, 62, 222, 170, 4, 61, 198, 33, 195, 190, 186, 60, 174, 62, 30, 172, 121, 62, 123, 231, 52, 63, 105, 250, 184, 61, 227, 239, 2, 190, 252, 126, 41, 61, 75, 90, 64, 190, 152, 182, 140, 61, 57, 243, 83, 190, 187, 26, 19, 62, 200, 34, 206, 189, 253, 5, 51, 190, 15, 236, 49, 62, 15, 26, 70, 190, 168, 137, 78, 56, 70, 244, 58, 62, 123, 197, 162, 189, 25, 78, 105, 60, 150, 57, 15, 189, 138, 163, 58, 60, 97, 28, 30, 190, 137, 178, 13, 189, 102, 170, 144, 189, 133, 158, 9, 190, 120, 62, 65, 62, 144, 254, 212, 61, 236, 228, 39, 190, 132, 217, 110, 189, 7, 140, 4, 61, 135, 248, 189, 189, 39, 83, 158, 188, 123, 124, 37, 62, 66, 25, 209, 188, 253, 43, 47, 62, 109, 162, 6, 61, 127, 150, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 251, 193, 189, 3, 44, 32, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 165, 207, 62, 206, 254, 222, 188, 255, 50, 159, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 173, 123, 62, 125, 227, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}