// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 49, 110, 190, 193, 85, 29, 63, 203, 184, 198, 190, 210, 219, 48, 63, 107, 161, 147, 191, 32, 63, 130, 190, 51, 189, 32, 62, 135, 222, 165, 63, 40, 82, 131, 62, 131, 224, 97, 63, 80, 32, 18, 63, 241, 171, 63, 62, 183, 139, 30, 63, 93, 110, 144, 63, 189, 28, 92, 62, 90, 252, 10, 191, 173, 120, 118, 191, 133, 41, 3, 191, 180, 56, 235, 190, 88, 222, 28, 63, 133, 49, 213, 190, 194, 76, 77, 190, 110, 38, 109, 190, 29, 192, 241, 61, 18, 149, 29, 191, 210, 222, 173, 191, 208, 93, 121, 190, 188, 57, 72, 190, 247, 67, 187, 190, 230, 40, 97, 62, 166, 21, 232, 189, 80, 88, 2, 191, 117, 255, 177, 62, 8, 195, 144, 63, 94, 140, 79, 191, 18, 60, 236, 190, 144, 140, 143, 190, 88, 34, 224, 190, 32, 177, 13, 191, 216, 178, 133, 190, 51, 54, 118, 60, 149, 198, 42, 191, 54, 196, 223, 190, 243, 111, 93, 191, 11, 201, 149, 189, 6, 102, 147, 190, 91, 17, 34, 189, 155, 22, 17, 189, 16, 189, 219, 188, 116, 180, 171, 63, 123, 224, 135, 62, 25, 28, 208, 189, 63, 212, 200, 191, 7, 234, 176, 190, 205, 65, 50, 190, 244, 170, 35, 63, 109, 148, 221, 62, 146, 135, 215, 60, 88, 73, 113, 62, 189, 69, 237, 190, 14, 175, 27, 63, 250, 210, 136, 191, 101, 23, 199, 190, 190, 165, 214, 190, 237, 54, 216, 190, 80, 68, 6, 189, 91, 79, 80, 190, 46, 61, 135, 191, 188, 239, 97, 190, 57, 141, 145, 189, 131, 113, 127, 63, 138, 20, 130, 62, 223, 169, 59, 191, 109, 246, 178, 190, 200, 234, 103, 62, 94, 193, 96, 190, 116, 83, 172, 191, 49, 233, 23, 191, 81, 55, 11, 191, 77, 253, 138, 62, 249, 239, 245, 62, 131, 6, 47, 63, 159, 84, 102, 191, 21, 170, 24, 190, 230, 253, 32, 62, 47, 11, 45, 63, 62, 129, 183, 190, 252, 48, 205, 189, 237, 96, 177, 191, 21, 66, 159, 190, 183, 112, 80, 190, 189, 223, 46, 61, 21, 105, 60, 62, 62, 48, 145, 191, 251, 216, 37, 63, 155, 88, 190, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 222, 175, 190, 49, 38, 66, 62, 52, 229, 132, 60, 194, 133, 85, 190, 222, 146, 205, 189, 177, 202, 156, 62, 73, 142, 169, 62, 24, 92, 191, 62, 186, 45, 149, 189, 141, 118, 108, 190, 39, 183, 195, 189, 93, 36, 132, 191, 131, 202, 91, 60, 106, 115, 34, 187, 83, 219, 205, 62, 186, 204, 161, 62, 41, 26, 78, 62, 182, 94, 169, 62, 138, 83, 21, 190, 106, 159, 50, 62, 141, 13, 166, 190, 136, 93, 179, 62, 141, 158, 210, 62, 194, 226, 222, 190, 36, 0, 30, 190, 96, 250, 90, 187, 76, 151, 226, 190, 5, 145, 227, 62, 83, 151, 251, 61, 28, 188, 170, 61, 19, 219, 231, 61, 143, 197, 140, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 226, 246, 61, 101, 211, 174, 62, 184, 245, 139, 190, 183, 148, 118, 190, 250, 240, 231, 190, 207, 171, 182, 190, 235, 22, 5, 191, 80, 144, 142, 62, 229, 53, 56, 190, 197, 208, 4, 62, 97, 131, 177, 189, 119, 130, 103, 189, 125, 82, 64, 191, 175, 36, 145, 191, 77, 163, 120, 62, 124, 99, 168, 61, 253, 125, 67, 189, 84, 1, 141, 190, 99, 226, 87, 61, 252, 7, 78, 190, 224, 200, 12, 191, 61, 220, 133, 62, 27, 130, 148, 62, 216, 200, 23, 62, 98, 76, 98, 190, 107, 128, 148, 191, 237, 254, 140, 61, 49, 209, 76, 62, 73, 147, 148, 191, 155, 175, 134, 190, 196, 33, 172, 189, 145, 197, 155, 61, 103, 60, 146, 190, 138, 235, 103, 190, 109, 17, 106, 61, 1, 79, 225, 62, 216, 231, 192, 62, 218, 22, 60, 62, 178, 56, 164, 62, 234, 36, 18, 190, 26, 169, 178, 62, 231, 51, 7, 60, 183, 112, 168, 62, 217, 27, 132, 189, 235, 28, 29, 62, 229, 105, 146, 62, 237, 194, 71, 61, 15, 16, 187, 61, 210, 105, 214, 60, 97, 137, 107, 190, 196, 45, 18, 190, 96, 246, 170, 62, 95, 72, 103, 190, 226, 68, 228, 189, 93, 236, 176, 190, 247, 166, 246, 190, 37, 86, 159, 60, 60, 195, 36, 62, 238, 185, 78, 190, 10, 189, 119, 190, 210, 52, 158, 62, 226, 118, 134, 62, 117, 26, 44, 189, 66, 169, 136, 190, 62, 182, 44, 62, 58, 3, 188, 61, 184, 18, 5, 191, 172, 122, 159, 62, 176, 191, 111, 61, 217, 12, 131, 189, 173, 72, 58, 62, 223, 171, 38, 62, 139, 31, 24, 191, 44, 43, 220, 190, 151, 254, 14, 189, 52, 246, 15, 191, 61, 214, 134, 60, 157, 141, 143, 62, 182, 201, 67, 191, 131, 178, 13, 62, 181, 222, 234, 190, 201, 45, 143, 190, 152, 207, 191, 190, 211, 70, 20, 62, 201, 227, 186, 190, 107, 97, 31, 190, 154, 113, 178, 189, 114, 219, 97, 190, 126, 9, 160, 189, 127, 2, 208, 188, 142, 243, 39, 191, 116, 111, 50, 62, 86, 199, 98, 62, 217, 164, 161, 190, 44, 83, 165, 189, 251, 224, 85, 62, 198, 43, 184, 188, 52, 99, 164, 188, 255, 110, 46, 62, 194, 118, 83, 191, 54, 30, 23, 190, 30, 214, 151, 62, 194, 170, 131, 62, 199, 39, 230, 189, 69, 10, 51, 190, 225, 4, 61, 190, 185, 122, 139, 190, 185, 84, 163, 62, 254, 196, 123, 62, 54, 235, 163, 62, 139, 96, 28, 190, 0, 50, 132, 60, 94, 94, 14, 189, 195, 234, 183, 58, 217, 121, 115, 62, 34, 39, 133, 187, 141, 76, 58, 61, 144, 2, 149, 190, 43, 221, 73, 190, 110, 75, 46, 62, 5, 21, 74, 61, 226, 153, 65, 62, 78, 218, 133, 189, 37, 39, 104, 189, 246, 235, 85, 62, 189, 36, 142, 61, 130, 5, 46, 189, 222, 183, 150, 62, 255, 127, 166, 190, 232, 85, 17, 190, 128, 145, 253, 189, 60, 227, 189, 61, 222, 22, 169, 188, 60, 82, 22, 61, 106, 166, 37, 187, 117, 151, 89, 62, 246, 91, 229, 61, 122, 150, 184, 60, 120, 86, 204, 189, 234, 210, 233, 189, 143, 134, 224, 188, 33, 56, 255, 61, 56, 182, 75, 60, 17, 216, 115, 62, 38, 63, 176, 61, 240, 171, 139, 189, 105, 202, 23, 61, 225, 183, 145, 61, 171, 42, 47, 61, 165, 72, 152, 61, 191, 236, 39, 61, 111, 113, 135, 189, 56, 159, 101, 191, 247, 137, 94, 62, 115, 111, 241, 190, 142, 143, 157, 61, 55, 64, 44, 189, 106, 255, 97, 61, 135, 144, 55, 61, 215, 229, 249, 62, 144, 16, 139, 189, 133, 136, 233, 191, 246, 112, 221, 62, 19, 44, 210, 62, 231, 197, 229, 62, 50, 93, 52, 190, 2, 251, 74, 62, 208, 164, 180, 188, 140, 186, 132, 188, 39, 145, 13, 191, 126, 50, 11, 62, 9, 57, 113, 190, 226, 16, 148, 189, 25, 91, 195, 59, 59, 96, 106, 191, 173, 212, 145, 190, 10, 217, 124, 62, 32, 115, 203, 190, 129, 99, 34, 62, 199, 243, 179, 61, 61, 232, 22, 191, 90, 239, 115, 191, 229, 5, 118, 191, 44, 50, 210, 62, 35, 163, 152, 61, 170, 60, 52, 189, 25, 252, 217, 61, 142, 17, 34, 191, 125, 233, 197, 61, 159, 127, 113, 190, 125, 148, 186, 61, 119, 103, 59, 190, 194, 200, 178, 59, 39, 67, 36, 62, 149, 19, 43, 191, 26, 36, 174, 189, 251, 244, 140, 190, 196, 108, 210, 61, 119, 209, 133, 189, 96, 3, 229, 62, 151, 167, 128, 190, 251, 254, 60, 188, 63, 112, 180, 62, 118, 54, 50, 62, 202, 217, 203, 61, 233, 92, 159, 61, 42, 31, 155, 60, 239, 76, 94, 61, 102, 14, 21, 191, 119, 197, 10, 62, 102, 220, 0, 191, 71, 57, 94, 61, 92, 130, 8, 190, 26, 105, 136, 62, 212, 249, 91, 62, 118, 134, 35, 190, 212, 170, 41, 63, 5, 234, 111, 58, 185, 112, 0, 191, 148, 4, 151, 62, 239, 75, 88, 62, 40, 44, 143, 189, 59, 36, 39, 62, 135, 216, 153, 190, 71, 97, 118, 190, 109, 41, 103, 62, 133, 146, 67, 191, 135, 175, 44, 62, 192, 247, 1, 190, 240, 245, 0, 190, 123, 0, 137, 190, 9, 108, 77, 190, 44, 17, 142, 191, 122, 190, 68, 191, 203, 129, 245, 189, 170, 198, 3, 190, 12, 204, 137, 190, 42, 214, 139, 190, 195, 244, 200, 190, 2, 27, 51, 61, 46, 0, 231, 190, 194, 0, 143, 189, 156, 253, 24, 191, 132, 92, 156, 61, 120, 208, 142, 60, 198, 171, 206, 190, 119, 233, 52, 190, 235, 221, 134, 58, 217, 222, 38, 61, 156, 254, 180, 190, 200, 116, 16, 191, 105, 186, 216, 62, 34, 180, 40, 190, 169, 93, 174, 190, 238, 70, 1, 189, 23, 172, 106, 191, 91, 230, 150, 190, 189, 246, 166, 191, 218, 58, 146, 62, 126, 29, 134, 62, 247, 189, 146, 62, 30, 88, 21, 190, 84, 68, 27, 61, 9, 39, 59, 190, 109, 103, 78, 62, 100, 164, 111, 60, 203, 133, 186, 189, 76, 146, 142, 190, 185, 23, 103, 190, 247, 42, 45, 189, 165, 254, 214, 189, 6, 9, 10, 190, 20, 163, 154, 62, 186, 11, 155, 61, 143, 120, 151, 62, 25, 241, 147, 62, 55, 234, 143, 190, 124, 240, 76, 190, 77, 166, 48, 191, 241, 185, 66, 61, 80, 155, 54, 62, 62, 226, 162, 190, 127, 44, 160, 61, 74, 12, 63, 191, 78, 246, 22, 59, 59, 70, 10, 189, 169, 232, 26, 62, 3, 202, 145, 61, 229, 37, 135, 190, 16, 176, 207, 189, 103, 30, 78, 62, 75, 40, 157, 62, 28, 203, 102, 62, 141, 14, 73, 62, 56, 175, 169, 62, 76, 134, 94, 190, 148, 222, 235, 62, 252, 66, 144, 190, 36, 230, 198, 190, 57, 215, 119, 190, 153, 188, 64, 62, 12, 113, 79, 61, 253, 97, 16, 190, 26, 227, 24, 62, 211, 203, 243, 61, 148, 195, 63, 190, 74, 167, 181, 190, 4, 31, 0, 62, 48, 49, 20, 190, 226, 197, 222, 189, 184, 121, 82, 190, 86, 232, 217, 189, 86, 74, 76, 191, 139, 154, 162, 62, 134, 113, 239, 190, 164, 143, 130, 190, 105, 186, 93, 62, 153, 77, 115, 61, 87, 115, 220, 189, 59, 117, 193, 61, 251, 90, 147, 190, 177, 121, 20, 190, 110, 198, 254, 190, 252, 50, 15, 62, 182, 185, 126, 61, 237, 132, 130, 62, 208, 200, 29, 62, 130, 76, 250, 190, 151, 244, 239, 62, 5, 155, 65, 61, 121, 106, 53, 191, 117, 240, 128, 190, 29, 80, 13, 189, 145, 44, 206, 61, 182, 180, 29, 62, 106, 7, 242, 188, 221, 126, 252, 190, 192, 108, 130, 60, 208, 49, 228, 190, 37, 211, 239, 189, 187, 8, 76, 60, 49, 87, 180, 62, 168, 161, 130, 62, 171, 250, 194, 61, 143, 90, 129, 191, 251, 51, 143, 62, 211, 33, 51, 191, 152, 29, 20, 191, 21, 239, 102, 189, 79, 186, 215, 62, 48, 147, 129, 191, 123, 52, 30, 63, 245, 63, 56, 63, 215, 233, 163, 62, 4, 61, 8, 191, 93, 66, 251, 190, 40, 157, 15, 191, 25, 141, 63, 191, 110, 117, 155, 62, 143, 127, 31, 189, 61, 242, 127, 191, 207, 213, 66, 62, 88, 209, 115, 190, 97, 39, 146, 63, 140, 34, 59, 191, 59, 191, 238, 190, 52, 40, 171, 62, 94, 107, 250, 61, 130, 124, 130, 190, 42, 12, 48, 62, 145, 18, 130, 61, 183, 129, 201, 189, 91, 167, 202, 62, 17, 48, 195, 61, 237, 188, 144, 62, 134, 12, 168, 189, 47, 142, 144, 190, 195, 164, 19, 192, 180, 158, 179, 61, 154, 113, 85, 62, 182, 69, 160, 190, 150, 206, 125, 191, 74, 173, 205, 188, 91, 134, 159, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 237, 221, 80, 62, 215, 67, 184, 62, 53, 85, 36, 191, 109, 137, 57, 189, 135, 244, 187, 190, 16, 79, 162, 190, 143, 95, 244, 189, 59, 66, 137, 62, 198, 233, 241, 190, 45, 59, 167, 189, 225, 148, 126, 61, 177, 18, 68, 189, 122, 5, 61, 190, 117, 61, 5, 191, 103, 101, 230, 61, 102, 32, 112, 62, 112, 7, 140, 188, 83, 139, 10, 190, 11, 98, 87, 190, 169, 16, 8, 61, 78, 219, 91, 61, 33, 61, 121, 189, 110, 203, 84, 62, 159, 74, 136, 190, 198, 238, 62, 62, 215, 144, 127, 191, 229, 167, 148, 62, 111, 253, 132, 62, 82, 97, 204, 61, 19, 37, 71, 191, 140, 217, 154, 62, 243, 195, 117, 190, 166, 118, 35, 190, 206, 151, 41, 191, 35, 222, 118, 61, 110, 221, 119, 61, 11, 227, 104, 62, 215, 195, 109, 61, 19, 228, 89, 62, 13, 96, 104, 62, 191, 180, 186, 60, 18, 135, 162, 62, 249, 122, 226, 59, 136, 142, 151, 191, 240, 227, 130, 62, 61, 184, 196, 61, 31, 8, 147, 60, 240, 175, 177, 62, 129, 32, 39, 62, 101, 18, 218, 190, 210, 120, 47, 188, 15, 85, 213, 188, 73, 69, 48, 191, 129, 120, 175, 61, 186, 126, 165, 190, 29, 255, 217, 190, 40, 6, 80, 60, 108, 180, 11, 190, 62, 194, 129, 190, 86, 178, 75, 190, 8, 62, 68, 62, 209, 86, 174, 190, 83, 102, 13, 190, 188, 203, 216, 61, 189, 142, 184, 190, 171, 19, 35, 191, 161, 16, 64, 188, 252, 42, 112, 62, 206, 80, 46, 62, 122, 214, 212, 60, 33, 164, 232, 62, 167, 29, 64, 189, 87, 190, 220, 189, 206, 82, 136, 62, 135, 3, 63, 62, 137, 11, 131, 191, 79, 38, 86, 189, 125, 242, 98, 62, 29, 182, 158, 61, 7, 22, 86, 62, 123, 120, 157, 61, 50, 88, 118, 190, 107, 52, 34, 190, 146, 62, 126, 189, 224, 212, 49, 191, 57, 116, 27, 189, 110, 114, 227, 190, 191, 242, 220, 190, 62, 33, 16, 62, 25, 2, 198, 189, 205, 114, 231, 188, 220, 89, 220, 190, 37, 203, 136, 62, 49, 171, 115, 190, 169, 189, 85, 188, 25, 157, 17, 62, 246, 148, 18, 63, 63, 110, 128, 61, 212, 171, 74, 62, 142, 79, 135, 62, 143, 37, 1, 62, 220, 74, 251, 190, 216, 173, 47, 62, 168, 34, 161, 62, 234, 104, 41, 191, 44, 152, 83, 62, 229, 67, 34, 62, 198, 26, 116, 191, 15, 233, 120, 190, 46, 54, 140, 61, 241, 7, 15, 191, 230, 197, 204, 62, 24, 149, 95, 62, 155, 205, 182, 191, 82, 184, 24, 61, 173, 222, 51, 62, 206, 42, 158, 189, 201, 77, 41, 190, 36, 148, 151, 190, 70, 202, 19, 190, 159, 135, 121, 61, 35, 215, 143, 189, 148, 186, 198, 189, 123, 199, 107, 62, 60, 160, 207, 62, 55, 59, 135, 191, 152, 31, 143, 62, 116, 63, 18, 190, 87, 42, 120, 62, 24, 9, 217, 62, 2, 171, 4, 191, 13, 210, 191, 189, 221, 45, 238, 190, 249, 134, 193, 61, 7, 48, 107, 188, 238, 59, 35, 190, 146, 225, 6, 191, 96, 170, 159, 190, 158, 9, 122, 190, 152, 115, 21, 63, 181, 85, 222, 61, 53, 14, 187, 189, 68, 99, 144, 190, 110, 200, 172, 61, 193, 159, 39, 191, 72, 133, 178, 189, 85, 116, 192, 61, 149, 42, 92, 62, 64, 29, 209, 62, 147, 214, 35, 190, 88, 114, 71, 59, 126, 121, 85, 190, 12, 136, 244, 189, 42, 134, 78, 190, 18, 30, 134, 62, 167, 104, 53, 62, 55, 165, 131, 61, 215, 210, 49, 190, 3, 251, 248, 59, 96, 244, 69, 191, 35, 48, 226, 61, 157, 254, 1, 62, 30, 242, 12, 62, 78, 42, 46, 190, 44, 252, 234, 61, 217, 250, 249, 189, 48, 253, 60, 190, 93, 163, 9, 62, 48, 217, 181, 61, 35, 50, 29, 190, 130, 82, 21, 190, 10, 199, 146, 188, 29, 110, 28, 59, 161, 57, 232, 60, 72, 194, 238, 189, 82, 199, 69, 188, 75, 146, 130, 189, 177, 173, 152, 189, 234, 23, 17, 190, 76, 90, 95, 58, 213, 150, 208, 60, 166, 109, 142, 189, 148, 214, 179, 61, 194, 236, 110, 189, 129, 53, 89, 189, 217, 181, 236, 60, 88, 47, 37, 190, 46, 1, 74, 189, 249, 163, 55, 189, 60, 207, 65, 61, 141, 190, 212, 61, 23, 50, 31, 62, 84, 118, 69, 190, 203, 32, 48, 189, 213, 61, 24, 62, 237, 139, 110, 61, 250, 123, 2, 62, 208, 179, 183, 188, 33, 217, 1, 62, 77, 25, 1, 62, 20, 113, 68, 62, 96, 117, 81, 62, 132, 12, 52, 189, 152, 14, 166, 189, 244, 240, 160, 189, 138, 84, 25, 61, 227, 37, 66, 62, 103, 212, 202, 187, 117, 81, 34, 62, 211, 233, 226, 189, 223, 250, 18, 62, 93, 225, 215, 61, 79, 117, 41, 190, 255, 215, 62, 61, 162, 176, 223, 60, 168, 57, 110, 190, 16, 114, 153, 57, 134, 250, 63, 62, 21, 75, 68, 61, 215, 59, 174, 61, 72, 90, 42, 189, 20, 37, 56, 62, 215, 14, 137, 62, 23, 82, 2, 62, 66, 241, 8, 62, 47, 225, 76, 62, 89, 42, 206, 189, 117, 232, 162, 190, 140, 50, 14, 191, 53, 81, 45, 190, 251, 3, 22, 190, 1, 135, 15, 190, 19, 198, 219, 61, 188, 246, 182, 189, 246, 122, 235, 60, 107, 96, 207, 61, 242, 9, 19, 62, 101, 152, 176, 189, 191, 44, 220, 60, 227, 184, 189, 190, 101, 115, 40, 60, 125, 226, 49, 62, 148, 166, 164, 62, 242, 172, 98, 190, 245, 82, 33, 63, 92, 132, 117, 190, 37, 178, 8, 62, 49, 239, 212, 62, 167, 162, 28, 190, 232, 124, 45, 189, 123, 235, 52, 62, 61, 73, 122, 62, 116, 108, 209, 189, 84, 156, 122, 62, 6, 183, 228, 189, 59, 69, 51, 190, 134, 108, 143, 190, 6, 206, 123, 190, 73, 24, 80, 62, 82, 117, 227, 62, 121, 26, 78, 62, 19, 148, 126, 61, 48, 129, 116, 61, 115, 134, 254, 190, 239, 106, 40, 63, 31, 164, 129, 190, 20, 213, 143, 191, 176, 20, 27, 191, 235, 59, 30, 62, 103, 151, 74, 62, 132, 181, 65, 62, 36, 73, 0, 60, 179, 198, 144, 62, 120, 246, 28, 190, 114, 97, 185, 190, 80, 159, 192, 61, 153, 97, 173, 190, 182, 241, 52, 189, 88, 125, 35, 61, 8, 90, 118, 191, 16, 37, 193, 191, 15, 253, 206, 62, 56, 122, 110, 191, 50, 244, 72, 190, 31, 151, 210, 189, 226, 92, 60, 62, 129, 247, 145, 190, 100, 48, 51, 188, 123, 251, 192, 188, 9, 79, 233, 62, 116, 171, 192, 61, 191, 19, 32, 62, 166, 108, 140, 62, 192, 74, 225, 189, 84, 129, 38, 190, 199, 135, 55, 62, 105, 97, 102, 61, 57, 49, 22, 189, 132, 20, 43, 61, 81, 5, 125, 61, 216, 174, 150, 190, 215, 11, 176, 189, 229, 235, 8, 62, 109, 27, 216, 61, 188, 38, 196, 189, 96, 196, 156, 190, 21, 219, 245, 61, 167, 205, 187, 188, 9, 214, 72, 62, 161, 141, 173, 61, 193, 35, 74, 189, 158, 186, 161, 190, 92, 187, 109, 190, 62, 194, 166, 189, 157, 93, 154, 59, 51, 101, 239, 62, 237, 198, 90, 62, 174, 222, 110, 62, 113, 239, 236, 60, 70, 54, 24, 191, 164, 85, 19, 63, 248, 6, 221, 62, 139, 200, 162, 190, 143, 163, 31, 191, 207, 136, 221, 190, 196, 217, 1, 191, 206, 127, 215, 62, 172, 180, 208, 61, 218, 12, 228, 190, 159, 166, 228, 61, 122, 71, 135, 190, 117, 31, 184, 62, 184, 55, 26, 191, 195, 117, 74, 191, 232, 195, 1, 62, 10, 68, 206, 61, 140, 227, 48, 190, 3, 48, 135, 190, 36, 94, 160, 189, 240, 222, 173, 190, 35, 152, 215, 190, 178, 167, 253, 61, 62, 110, 97, 62, 78, 155, 157, 190, 153, 46, 164, 189, 214, 252, 188, 191, 159, 56, 129, 60, 49, 53, 68, 62, 121, 36, 20, 191, 159, 131, 224, 190, 93, 239, 111, 61, 84, 65, 81, 62, 123, 84, 75, 63, 182, 66, 70, 191, 98, 73, 217, 189, 92, 86, 140, 191, 127, 37, 198, 190, 177, 243, 26, 61, 184, 246, 25, 62, 19, 211, 144, 61, 118, 8, 85, 190, 45, 62, 59, 62, 7, 234, 41, 190, 49, 207, 33, 190, 179, 198, 98, 190, 131, 0, 100, 190, 136, 221, 152, 61, 240, 122, 202, 61, 29, 132, 217, 61, 200, 130, 88, 191, 199, 250, 242, 61, 66, 218, 37, 190, 92, 236, 142, 190, 207, 185, 241, 189, 194, 5, 45, 190, 25, 197, 218, 189, 50, 111, 103, 190, 119, 90, 104, 191, 9, 252, 139, 62, 17, 45, 217, 190, 132, 170, 203, 61, 68, 19, 7, 191, 201, 38, 119, 62, 95, 151, 229, 62, 94, 146, 9, 63, 111, 42, 13, 190, 122, 104, 85, 62, 47, 16, 156, 190, 140, 134, 147, 189, 6, 158, 159, 190, 139, 78, 114, 61, 113, 50, 110, 62, 245, 60, 51, 191, 120, 12, 201, 61, 224, 240, 209, 188, 157, 12, 155, 187, 128, 97, 234, 190, 44, 45, 80, 191, 79, 8, 171, 189, 108, 249, 51, 62, 67, 212, 135, 62, 157, 37, 101, 190, 157, 246, 152, 62, 123, 21, 242, 189, 68, 169, 25, 190, 254, 218, 245, 61, 10, 204, 165, 61, 69, 66, 173, 62, 82, 229, 169, 189, 169, 160, 158, 191, 126, 36, 232, 189, 196, 48, 250, 189, 160, 71, 122, 191, 85, 41, 13, 191, 90, 66, 19, 62, 37, 239, 219, 61, 157, 93, 18, 61, 51, 4, 67, 61, 216, 90, 68, 190, 207, 26, 70, 61, 93, 130, 166, 61, 186, 78, 238, 60, 236, 51, 46, 189, 87, 34, 71, 190, 73, 232, 69, 190, 182, 36, 79, 190, 24, 185, 186, 61, 224, 170, 100, 190, 67, 92, 145, 61, 200, 109, 124, 61, 45, 181, 35, 190, 94, 140, 234, 187, 70, 55, 35, 190, 101, 40, 24, 190, 74, 171, 140, 61, 99, 40, 138, 190, 211, 233, 153, 61, 255, 6, 67, 58, 191, 215, 144, 189, 161, 75, 22, 190, 15, 151, 182, 60, 197, 83, 225, 188, 35, 171, 144, 61, 102, 98, 4, 190, 46, 22, 26, 61, 16, 23, 111, 190, 95, 195, 84, 190, 12, 104, 101, 190, 21, 62, 236, 190, 11, 92, 125, 190, 101, 110, 14, 189, 204, 17, 35, 63, 55, 138, 205, 62, 84, 64, 134, 62, 178, 18, 73, 62, 185, 152, 149, 189, 156, 4, 7, 62, 182, 36, 7, 62, 255, 133, 170, 188, 68, 69, 126, 191, 122, 67, 1, 62, 62, 103, 249, 189, 221, 106, 166, 61, 7, 201, 244, 58, 107, 119, 67, 62, 6, 147, 140, 190, 45, 165, 3, 62, 250, 198, 124, 62, 178, 166, 63, 191, 38, 57, 169, 60, 102, 193, 146, 190, 198, 24, 199, 190, 114, 137, 9, 59, 161, 53, 220, 60, 156, 178, 92, 190, 68, 173, 115, 190, 80, 15, 130, 62, 216, 103, 80, 190, 51, 19, 25, 62, 145, 236, 38, 62, 232, 88, 97, 62, 121, 12, 158, 62, 60, 143, 13, 191, 153, 65, 215, 189, 66, 191, 199, 190, 33, 68, 243, 190, 211, 5, 141, 190, 229, 145, 205, 61, 52, 101, 169, 191, 231, 21, 215, 61, 82, 132, 14, 190, 65, 133, 150, 60, 118, 6, 42, 190, 72, 143, 201, 190, 174, 138, 207, 189, 218, 212, 145, 61, 158, 161, 81, 190, 67, 146, 230, 60, 93, 14, 210, 188, 168, 11, 10, 62, 213, 102, 153, 62, 241, 172, 202, 61, 28, 232, 202, 61, 192, 164, 182, 189, 21, 144, 231, 61, 23, 174, 104, 191, 224, 68, 207, 62, 30, 1, 182, 62, 252, 222, 132, 189, 240, 67, 132, 191, 131, 92, 59, 188, 61, 146, 138, 189, 192, 22, 123, 62, 77, 167, 199, 62, 188, 88, 19, 191, 191, 125, 113, 190, 80, 150, 13, 191, 196, 55, 204, 190, 158, 224, 46, 60, 91, 251, 244, 189, 208, 179, 129, 191, 54, 199, 141, 190, 157, 226, 164, 189, 139, 182, 22, 63, 183, 123, 141, 190, 23, 211, 176, 190, 64, 64, 62, 62, 165, 170, 96, 190, 25, 197, 230, 190, 101, 108, 134, 61, 103, 252, 29, 60, 250, 98, 110, 187, 67, 9, 15, 63, 83, 19, 21, 189, 29, 254, 106, 62, 207, 129, 219, 61, 58, 189, 49, 189, 236, 71, 139, 191, 15, 45, 206, 61, 213, 151, 232, 61, 224, 42, 81, 190, 167, 201, 178, 191, 18, 11, 83, 61, 217, 153, 149, 61, 224, 219, 96, 63, 63, 70, 38, 191, 103, 71, 143, 188, 95, 87, 139, 191, 178, 144, 62, 190, 71, 122, 157, 190, 6, 222, 211, 62, 200, 17, 121, 62, 228, 215, 80, 189, 230, 55, 143, 62, 208, 23, 191, 190, 115, 19, 254, 189, 67, 117, 29, 191, 34, 144, 26, 191, 2, 153, 66, 189, 148, 234, 78, 62, 47, 122, 13, 189, 97, 67, 116, 191, 32, 148, 56, 61, 128, 208, 12, 190, 205, 215, 176, 190, 199, 234, 120, 62, 65, 255, 34, 58, 30, 141, 41, 189, 27, 37, 208, 188, 73, 94, 207, 191, 244, 200, 251, 60, 64, 24, 183, 189, 88, 89, 37, 62, 242, 108, 69, 191, 57, 139, 220, 61, 114, 169, 127, 62, 186, 43, 221, 187, 96, 4, 0, 190, 51, 228, 144, 59, 194, 130, 46, 190, 116, 231, 255, 189, 152, 174, 162, 189, 99, 134, 20, 62, 111, 199, 2, 190, 33, 35, 190, 61, 245, 2, 153, 60, 96, 61, 237, 188, 18, 155, 152, 189, 24, 207, 162, 189, 224, 173, 168, 188, 223, 56, 178, 189, 231, 124, 58, 190, 10, 186, 246, 189, 133, 4, 37, 190, 116, 93, 213, 61, 232, 101, 41, 190, 78, 82, 140, 60, 105, 245, 170, 61, 5, 153, 76, 61, 14, 231, 68, 61, 219, 129, 53, 187, 247, 167, 32, 190, 140, 55, 157, 189, 246, 40, 237, 61, 109, 176, 4, 190, 58, 77, 94, 188, 178, 86, 173, 187, 93, 44, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 144, 51, 62, 74, 153, 57, 62, 45, 172, 209, 58, 243, 220, 21, 188, 85, 27, 152, 62, 253, 119, 128, 190, 239, 76, 140, 62, 109, 54, 105, 62, 15, 233, 237, 189, 110, 161, 63, 62, 5, 40, 133, 190, 140, 152, 184, 61, 242, 159, 33, 190, 128, 241, 149, 61, 97, 61, 222, 61, 199, 222, 70, 62, 101, 107, 160, 62, 251, 67, 26, 61, 143, 215, 52, 190, 2, 206, 146, 62, 108, 123, 242, 190, 52, 204, 155, 189, 213, 34, 167, 62, 117, 187, 131, 62, 30, 176, 202, 189, 70, 46, 70, 61, 53, 9, 215, 60, 59, 144, 140, 189, 36, 186, 44, 62, 67, 123, 62, 61, 244, 206, 214, 56, 20, 224, 187, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 60, 39, 63, 87, 10, 214, 190, 52, 48, 50, 62, 120, 146, 166, 62, 54, 124, 81, 189, 161, 244, 94, 63, 54, 246, 126, 62, 253, 254, 18, 63, 121, 116, 216, 62, 217, 105, 133, 190, 216, 147, 49, 191, 46, 5, 166, 63, 90, 98, 217, 189, 89, 120, 237, 62, 207, 22, 23, 191, 31, 203, 6, 191, 187, 206, 219, 190, 213, 14, 30, 63, 219, 55, 89, 59, 66, 232, 133, 59, 105, 224, 183, 190, 156, 44, 6, 191, 227, 70, 42, 190, 237, 245, 134, 63, 41, 184, 61, 63, 64, 191, 157, 62, 190, 228, 158, 188, 46, 214, 18, 191, 37, 87, 248, 62, 135, 2, 219, 62, 72, 40, 78, 63, 120, 48, 184, 61, 126, 43, 232, 189, 168, 15, 177, 188, 130, 101, 235, 190, 68, 128, 108, 60, 192, 127, 83, 190, 7, 17, 217, 61, 254, 91, 102, 190, 42, 160, 136, 190, 146, 197, 111, 62, 19, 97, 143, 190, 97, 43, 204, 62, 1, 204, 140, 63, 123, 197, 162, 189, 88, 101, 38, 62, 109, 70, 169, 61, 7, 30, 83, 62, 96, 204, 240, 190, 103, 225, 126, 189, 227, 145, 159, 189, 31, 104, 82, 190, 104, 80, 33, 190, 253, 77, 203, 62, 1, 223, 213, 190, 45, 27, 151, 188, 217, 170, 142, 62, 5, 146, 233, 189, 118, 190, 25, 60, 39, 189, 195, 189, 187, 148, 90, 61, 84, 141, 148, 63, 187, 71, 19, 62, 193, 54, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 89, 197, 187, 91, 112, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 86, 178, 63, 253, 249, 37, 64, 214, 36, 110, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 226, 148, 62, 146, 49, 18, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}