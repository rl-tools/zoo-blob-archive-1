// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 63, 168, 190, 96, 18, 37, 63, 41, 95, 216, 190, 179, 243, 50, 63, 61, 120, 134, 191, 29, 122, 141, 190, 206, 121, 36, 62, 88, 30, 147, 63, 90, 44, 106, 62, 73, 149, 102, 63, 82, 219, 3, 63, 104, 191, 72, 62, 10, 191, 32, 63, 147, 13, 128, 63, 110, 211, 108, 62, 15, 48, 18, 191, 254, 182, 59, 191, 220, 130, 21, 191, 222, 99, 6, 191, 7, 41, 29, 63, 97, 174, 222, 190, 171, 181, 115, 190, 254, 243, 117, 190, 104, 79, 236, 61, 56, 167, 1, 191, 13, 210, 158, 191, 151, 12, 131, 190, 120, 29, 176, 190, 40, 48, 36, 190, 99, 174, 126, 62, 47, 215, 113, 190, 207, 199, 13, 191, 176, 23, 173, 62, 219, 182, 139, 63, 237, 78, 70, 191, 10, 219, 225, 190, 128, 70, 216, 190, 143, 174, 192, 190, 63, 124, 21, 191, 68, 6, 238, 189, 64, 239, 247, 60, 118, 115, 44, 191, 172, 68, 205, 190, 10, 105, 91, 191, 7, 122, 30, 189, 45, 43, 90, 190, 81, 136, 10, 61, 58, 243, 25, 189, 164, 147, 147, 188, 213, 168, 159, 63, 159, 136, 109, 62, 92, 46, 212, 189, 22, 7, 194, 191, 58, 67, 186, 190, 98, 136, 20, 190, 229, 176, 48, 63, 221, 136, 207, 62, 255, 121, 203, 61, 135, 194, 233, 61, 104, 30, 253, 190, 179, 241, 27, 63, 112, 88, 118, 191, 93, 176, 198, 190, 154, 74, 171, 190, 240, 183, 198, 190, 59, 106, 137, 189, 141, 2, 64, 190, 217, 119, 125, 191, 54, 14, 96, 190, 186, 102, 2, 61, 165, 246, 112, 63, 180, 180, 98, 62, 154, 65, 153, 190, 65, 81, 25, 191, 90, 22, 67, 62, 148, 60, 210, 190, 217, 90, 144, 191, 110, 134, 20, 191, 106, 248, 81, 191, 49, 13, 133, 62, 219, 209, 205, 62, 47, 179, 49, 63, 129, 136, 91, 191, 246, 175, 6, 190, 173, 81, 50, 62, 238, 156, 192, 62, 150, 24, 223, 190, 79, 188, 111, 190, 163, 219, 154, 191, 25, 72, 151, 190, 122, 56, 52, 190, 12, 22, 238, 59, 76, 150, 56, 62, 167, 234, 137, 191, 187, 148, 53, 63, 151, 167, 228, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 88, 161, 190, 91, 153, 73, 62, 15, 227, 107, 60, 161, 162, 40, 190, 184, 158, 195, 189, 130, 155, 72, 62, 187, 189, 132, 62, 110, 30, 174, 62, 245, 149, 137, 189, 19, 129, 124, 190, 69, 149, 46, 190, 22, 0, 135, 191, 148, 101, 148, 188, 169, 3, 117, 61, 128, 112, 222, 62, 170, 151, 202, 62, 73, 93, 85, 62, 68, 165, 164, 62, 136, 96, 107, 189, 148, 46, 115, 62, 32, 29, 159, 190, 130, 155, 185, 62, 13, 98, 225, 62, 93, 25, 198, 190, 145, 142, 247, 189, 98, 77, 40, 190, 118, 117, 13, 191, 233, 201, 240, 62, 106, 92, 246, 61, 117, 58, 24, 188, 160, 98, 132, 62, 118, 86, 84, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 129, 8, 62, 88, 232, 139, 62, 202, 88, 171, 190, 193, 99, 129, 190, 223, 135, 234, 190, 124, 192, 180, 190, 39, 25, 3, 191, 119, 251, 144, 62, 217, 53, 220, 189, 80, 149, 197, 61, 129, 129, 204, 189, 70, 217, 206, 60, 36, 77, 64, 191, 253, 34, 145, 191, 107, 155, 111, 62, 119, 162, 247, 61, 148, 236, 173, 189, 45, 197, 164, 190, 18, 212, 54, 61, 246, 213, 164, 190, 60, 31, 34, 191, 222, 25, 146, 62, 51, 1, 152, 62, 226, 204, 30, 62, 78, 132, 103, 190, 239, 78, 143, 191, 230, 107, 115, 61, 52, 29, 57, 62, 88, 35, 164, 191, 131, 170, 179, 190, 20, 55, 167, 189, 130, 72, 203, 61, 180, 13, 161, 190, 61, 129, 129, 190, 122, 199, 23, 61, 217, 23, 223, 62, 9, 59, 187, 62, 232, 47, 13, 62, 131, 229, 142, 62, 118, 244, 227, 189, 153, 236, 138, 62, 51, 174, 159, 187, 125, 237, 145, 62, 242, 9, 19, 190, 2, 129, 216, 61, 96, 234, 109, 62, 97, 155, 141, 61, 208, 4, 133, 61, 60, 62, 84, 59, 24, 197, 133, 190, 87, 134, 231, 189, 11, 248, 153, 62, 173, 231, 150, 190, 101, 249, 217, 189, 162, 104, 189, 190, 66, 153, 180, 190, 34, 73, 93, 61, 143, 176, 201, 61, 110, 105, 54, 190, 221, 36, 134, 190, 193, 26, 134, 62, 99, 123, 72, 62, 243, 90, 80, 188, 168, 184, 64, 190, 226, 90, 220, 61, 46, 162, 8, 62, 129, 89, 1, 191, 27, 223, 169, 62, 164, 15, 165, 61, 110, 63, 203, 189, 195, 27, 26, 62, 209, 146, 48, 62, 236, 27, 242, 190, 140, 130, 161, 190, 24, 199, 144, 61, 150, 128, 26, 191, 105, 34, 243, 188, 247, 63, 135, 62, 107, 49, 250, 190, 60, 16, 54, 62, 203, 229, 228, 190, 93, 28, 63, 190, 110, 27, 189, 190, 92, 76, 20, 62, 210, 182, 162, 190, 232, 45, 226, 189, 74, 218, 76, 188, 240, 99, 148, 190, 158, 10, 57, 189, 7, 110, 114, 189, 190, 53, 40, 191, 197, 236, 93, 62, 123, 10, 99, 62, 35, 231, 142, 190, 114, 210, 245, 189, 26, 61, 49, 62, 87, 6, 224, 60, 182, 100, 253, 188, 103, 29, 105, 62, 253, 200, 8, 191, 26, 92, 172, 60, 37, 160, 148, 62, 154, 89, 147, 62, 91, 207, 59, 190, 192, 16, 65, 190, 206, 159, 218, 189, 166, 159, 65, 190, 140, 189, 125, 62, 222, 115, 131, 62, 224, 245, 171, 62, 51, 182, 134, 190, 228, 235, 73, 60, 45, 216, 219, 60, 97, 148, 109, 189, 12, 116, 113, 62, 5, 162, 187, 60, 134, 23, 239, 60, 228, 123, 172, 190, 165, 115, 128, 190, 125, 4, 2, 62, 152, 168, 237, 188, 56, 180, 44, 62, 44, 19, 151, 188, 6, 203, 69, 189, 101, 200, 131, 62, 198, 69, 193, 187, 23, 23, 209, 189, 97, 85, 177, 62, 56, 112, 191, 190, 211, 68, 31, 190, 207, 186, 27, 190, 13, 53, 6, 62, 192, 193, 102, 60, 64, 62, 5, 60, 153, 32, 71, 188, 254, 187, 113, 60, 221, 41, 33, 62, 63, 133, 246, 61, 43, 84, 213, 190, 43, 94, 28, 190, 153, 96, 19, 189, 230, 61, 249, 61, 151, 68, 254, 188, 66, 26, 110, 62, 64, 104, 60, 61, 60, 205, 210, 189, 11, 168, 123, 190, 48, 228, 235, 61, 184, 90, 13, 60, 83, 247, 254, 60, 135, 54, 129, 60, 166, 118, 49, 190, 70, 62, 5, 191, 56, 158, 68, 62, 175, 240, 167, 190, 181, 35, 131, 61, 100, 155, 194, 187, 85, 221, 26, 188, 5, 113, 238, 189, 0, 152, 215, 62, 108, 62, 168, 189, 86, 53, 188, 191, 243, 51, 211, 62, 115, 135, 216, 62, 11, 66, 220, 62, 42, 157, 230, 189, 29, 50, 97, 62, 117, 152, 10, 188, 140, 186, 132, 188, 2, 113, 2, 191, 38, 131, 42, 62, 230, 249, 60, 190, 1, 16, 39, 189, 102, 205, 233, 188, 23, 10, 99, 191, 10, 3, 95, 190, 123, 32, 113, 62, 133, 68, 172, 190, 196, 96, 250, 61, 226, 165, 211, 61, 69, 38, 6, 191, 127, 52, 78, 191, 220, 168, 64, 191, 184, 15, 176, 62, 230, 216, 252, 61, 130, 112, 48, 62, 205, 252, 201, 61, 75, 175, 118, 190, 52, 157, 80, 62, 69, 151, 114, 190, 119, 127, 200, 61, 123, 30, 42, 190, 134, 127, 43, 61, 133, 196, 71, 62, 197, 39, 36, 191, 211, 208, 173, 189, 229, 235, 133, 190, 191, 108, 175, 61, 51, 135, 52, 189, 143, 186, 206, 62, 97, 212, 115, 190, 115, 223, 172, 189, 224, 207, 174, 62, 164, 49, 200, 61, 178, 35, 209, 61, 63, 2, 210, 61, 182, 198, 97, 188, 92, 122, 2, 61, 246, 171, 12, 191, 89, 47, 28, 62, 132, 226, 249, 190, 132, 246, 126, 61, 249, 204, 78, 189, 88, 13, 77, 62, 176, 115, 101, 62, 64, 118, 255, 189, 122, 36, 233, 62, 8, 19, 101, 57, 85, 125, 244, 190, 66, 121, 163, 62, 83, 88, 102, 62, 102, 70, 91, 189, 191, 14, 86, 61, 242, 65, 196, 190, 46, 213, 129, 190, 112, 53, 118, 62, 112, 223, 63, 191, 151, 37, 45, 62, 44, 244, 245, 189, 99, 169, 66, 61, 74, 31, 34, 60, 96, 19, 7, 190, 242, 106, 131, 191, 47, 43, 20, 191, 223, 216, 97, 61, 200, 223, 129, 189, 62, 137, 21, 190, 207, 40, 203, 60, 46, 236, 165, 190, 83, 62, 183, 61, 7, 233, 218, 190, 61, 167, 85, 189, 48, 230, 234, 190, 171, 75, 212, 61, 192, 29, 52, 61, 197, 96, 171, 190, 60, 190, 17, 190, 64, 224, 134, 58, 207, 23, 146, 61, 31, 42, 116, 190, 37, 122, 16, 191, 229, 205, 223, 62, 208, 7, 245, 189, 28, 104, 148, 190, 44, 193, 213, 59, 23, 172, 106, 191, 41, 132, 133, 190, 150, 3, 138, 191, 76, 7, 149, 62, 72, 175, 163, 62, 113, 254, 153, 62, 131, 202, 214, 188, 174, 50, 209, 61, 35, 175, 115, 190, 255, 6, 246, 61, 14, 208, 1, 189, 227, 46, 26, 190, 82, 90, 43, 190, 42, 9, 10, 190, 97, 199, 1, 189, 88, 37, 61, 190, 187, 194, 147, 189, 147, 157, 156, 62, 123, 8, 96, 61, 44, 222, 97, 62, 149, 193, 166, 62, 50, 159, 33, 190, 157, 212, 81, 190, 161, 255, 32, 191, 3, 116, 92, 188, 57, 40, 242, 61, 213, 12, 53, 190, 97, 226, 222, 59, 88, 86, 200, 190, 102, 58, 242, 61, 55, 247, 158, 189, 117, 244, 214, 61, 247, 159, 147, 61, 18, 102, 160, 190, 190, 235, 152, 189, 168, 205, 67, 62, 85, 27, 181, 62, 226, 182, 130, 62, 72, 150, 232, 61, 5, 199, 140, 62, 21, 188, 219, 189, 55, 79, 183, 62, 195, 65, 115, 190, 146, 243, 128, 190, 152, 120, 177, 190, 18, 107, 233, 61, 193, 205, 89, 188, 198, 93, 133, 189, 106, 163, 223, 61, 90, 148, 219, 61, 43, 150, 86, 190, 167, 183, 138, 190, 134, 104, 199, 61, 210, 193, 58, 190, 1, 42, 25, 190, 218, 128, 96, 190, 41, 180, 106, 189, 179, 9, 8, 191, 239, 247, 99, 62, 211, 128, 98, 190, 147, 130, 95, 190, 137, 164, 51, 62, 30, 113, 41, 189, 49, 227, 28, 189, 26, 232, 165, 61, 94, 9, 172, 190, 13, 218, 48, 190, 55, 97, 145, 190, 252, 50, 15, 62, 11, 210, 226, 61, 121, 48, 64, 62, 72, 214, 9, 62, 216, 145, 138, 190, 40, 17, 142, 62, 157, 0, 238, 189, 200, 230, 110, 191, 247, 241, 148, 190, 136, 88, 182, 189, 46, 229, 140, 61, 84, 57, 137, 61, 55, 78, 81, 189, 33, 160, 176, 190, 118, 73, 185, 189, 213, 164, 208, 190, 253, 206, 255, 189, 184, 231, 133, 189, 170, 13, 132, 62, 149, 30, 47, 62, 1, 168, 203, 61, 151, 109, 65, 191, 72, 7, 66, 62, 193, 181, 46, 191, 191, 28, 8, 191, 160, 175, 107, 189, 241, 77, 153, 62, 243, 1, 62, 191, 201, 173, 34, 63, 224, 71, 94, 63, 155, 33, 168, 62, 1, 107, 177, 190, 226, 50, 229, 190, 254, 159, 248, 190, 200, 99, 210, 190, 230, 29, 111, 62, 243, 120, 1, 59, 144, 247, 37, 191, 111, 122, 45, 62, 68, 238, 120, 190, 136, 250, 69, 63, 243, 222, 31, 191, 233, 208, 38, 191, 18, 227, 167, 62, 131, 200, 74, 62, 223, 240, 124, 189, 175, 49, 116, 61, 95, 25, 170, 61, 176, 208, 220, 189, 39, 176, 182, 62, 248, 167, 232, 61, 15, 2, 131, 62, 94, 186, 4, 189, 195, 233, 142, 190, 66, 111, 245, 191, 5, 18, 221, 61, 46, 140, 106, 62, 88, 132, 151, 190, 64, 118, 53, 191, 184, 65, 183, 60, 173, 213, 218, 62, 237, 53, 39, 190, 40, 130, 207, 189, 40, 63, 146, 189, 204, 68, 89, 189, 252, 158, 24, 62, 205, 137, 24, 61, 248, 191, 144, 61, 153, 99, 43, 190, 196, 228, 201, 61, 57, 254, 36, 62, 75, 90, 26, 62, 108, 217, 45, 190, 72, 101, 38, 61, 122, 216, 179, 189, 217, 187, 161, 61, 127, 248, 220, 58, 54, 103, 36, 190, 196, 6, 115, 189, 21, 43, 142, 61, 67, 25, 0, 189, 239, 128, 5, 190, 155, 222, 103, 189, 196, 66, 202, 60, 187, 132, 46, 62, 172, 155, 210, 189, 231, 84, 27, 62, 60, 59, 230, 189, 56, 146, 158, 188, 85, 83, 232, 188, 25, 112, 35, 190, 98, 160, 2, 190, 62, 158, 29, 189, 192, 159, 82, 62, 94, 218, 169, 62, 214, 251, 44, 191, 77, 228, 183, 189, 91, 94, 208, 190, 3, 203, 1, 190, 84, 76, 53, 190, 39, 245, 161, 62, 32, 164, 98, 190, 91, 130, 255, 189, 75, 152, 138, 61, 178, 232, 232, 190, 154, 185, 208, 189, 10, 145, 217, 190, 55, 147, 58, 62, 8, 72, 135, 62, 52, 255, 54, 189, 193, 188, 242, 189, 197, 156, 107, 190, 176, 142, 155, 189, 245, 125, 157, 60, 210, 205, 18, 61, 250, 58, 114, 62, 25, 107, 151, 190, 166, 81, 59, 62, 15, 15, 56, 191, 203, 125, 134, 62, 52, 8, 116, 62, 88, 97, 157, 59, 249, 10, 4, 191, 55, 248, 164, 62, 148, 53, 127, 190, 70, 122, 37, 190, 169, 233, 8, 191, 91, 9, 226, 61, 14, 195, 21, 62, 76, 11, 157, 62, 45, 235, 126, 61, 54, 134, 78, 62, 37, 120, 141, 62, 96, 36, 107, 189, 82, 110, 183, 62, 187, 172, 115, 61, 77, 224, 135, 191, 31, 58, 133, 62, 221, 251, 227, 61, 81, 120, 74, 61, 99, 186, 158, 62, 79, 41, 86, 62, 170, 13, 199, 190, 118, 34, 144, 61, 96, 60, 197, 188, 20, 70, 31, 191, 11, 232, 86, 61, 157, 103, 153, 190, 221, 231, 176, 190, 105, 174, 100, 60, 108, 90, 253, 189, 80, 218, 93, 190, 50, 157, 30, 190, 116, 8, 43, 62, 74, 17, 169, 190, 56, 233, 201, 189, 52, 152, 134, 61, 12, 187, 189, 190, 5, 243, 0, 191, 228, 128, 109, 61, 72, 20, 211, 62, 98, 239, 152, 62, 81, 129, 242, 60, 245, 70, 229, 62, 182, 158, 210, 186, 217, 208, 14, 190, 224, 122, 150, 62, 61, 97, 109, 62, 158, 209, 112, 191, 37, 38, 70, 189, 124, 126, 113, 62, 29, 15, 210, 61, 96, 181, 64, 62, 3, 127, 3, 62, 228, 25, 107, 190, 115, 216, 164, 189, 23, 92, 88, 189, 110, 3, 34, 191, 4, 109, 187, 189, 253, 165, 223, 190, 6, 219, 178, 190, 129, 95, 3, 62, 242, 182, 173, 189, 167, 81, 30, 188, 136, 226, 168, 190, 123, 223, 132, 62, 173, 138, 77, 190, 244, 253, 191, 60, 114, 148, 196, 61, 247, 83, 26, 63, 26, 114, 159, 61, 77, 238, 44, 62, 13, 209, 136, 62, 138, 119, 242, 61, 115, 105, 254, 190, 201, 243, 47, 62, 155, 1, 154, 62, 244, 24, 32, 191, 77, 214, 110, 62, 226, 34, 29, 62, 65, 10, 85, 191, 151, 0, 113, 190, 20, 161, 154, 61, 55, 66, 252, 190, 145, 110, 187, 62, 93, 208, 60, 62, 8, 124, 170, 191, 214, 146, 131, 61, 28, 208, 78, 62, 107, 33, 218, 188, 114, 38, 27, 190, 189, 217, 133, 190, 176, 3, 185, 189, 145, 39, 156, 61, 110, 17, 149, 189, 146, 143, 72, 189, 162, 150, 109, 62, 250, 241, 209, 62, 184, 179, 130, 191, 78, 68, 133, 62, 72, 67, 26, 190, 104, 74, 139, 62, 179, 104, 206, 62, 205, 136, 217, 190, 36, 134, 55, 189, 169, 127, 205, 190, 58, 252, 130, 61, 167, 119, 167, 60, 63, 249, 91, 189, 16, 13, 14, 191, 90, 51, 141, 190, 194, 47, 191, 59, 52, 12, 150, 62, 69, 190, 167, 61, 179, 163, 188, 189, 120, 6, 165, 190, 99, 24, 10, 62, 233, 115, 15, 191, 58, 58, 60, 190, 73, 71, 28, 62, 86, 14, 83, 62, 211, 70, 157, 62, 151, 119, 32, 190, 140, 133, 38, 189, 126, 121, 85, 190, 212, 187, 198, 189, 26, 172, 135, 190, 242, 170, 134, 62, 82, 48, 56, 62, 104, 137, 160, 61, 184, 168, 141, 190, 119, 194, 1, 62, 30, 154, 10, 191, 35, 48, 226, 61, 157, 254, 1, 62, 30, 242, 12, 62, 78, 42, 46, 190, 44, 252, 234, 61, 217, 250, 249, 189, 48, 253, 60, 190, 93, 163, 9, 62, 48, 217, 181, 61, 35, 50, 29, 190, 130, 82, 21, 190, 10, 199, 146, 188, 29, 110, 28, 59, 161, 57, 232, 60, 72, 194, 238, 189, 82, 199, 69, 188, 75, 146, 130, 189, 177, 173, 152, 189, 234, 23, 17, 190, 76, 90, 95, 58, 213, 150, 208, 60, 166, 109, 142, 189, 148, 214, 179, 61, 194, 236, 110, 189, 129, 53, 89, 189, 217, 181, 236, 60, 88, 47, 37, 190, 46, 1, 74, 189, 249, 163, 55, 189, 60, 207, 65, 61, 141, 190, 212, 61, 23, 50, 31, 62, 37, 81, 116, 190, 8, 17, 86, 189, 52, 97, 28, 62, 75, 234, 207, 61, 235, 34, 55, 62, 117, 44, 34, 189, 187, 34, 19, 62, 171, 150, 186, 60, 95, 83, 161, 62, 66, 45, 101, 62, 224, 28, 180, 189, 228, 175, 78, 190, 3, 60, 151, 189, 115, 61, 86, 61, 50, 134, 47, 62, 249, 109, 213, 60, 124, 59, 36, 62, 68, 199, 225, 189, 10, 73, 241, 61, 137, 122, 19, 62, 229, 72, 59, 190, 140, 65, 52, 61, 28, 31, 12, 61, 92, 149, 89, 190, 54, 186, 156, 60, 209, 39, 53, 62, 53, 76, 229, 61, 201, 112, 150, 61, 160, 84, 5, 188, 181, 204, 11, 62, 137, 25, 63, 62, 192, 24, 44, 62, 93, 207, 30, 61, 186, 80, 35, 62, 96, 39, 170, 189, 93, 125, 200, 189, 17, 84, 195, 190, 147, 158, 217, 189, 241, 49, 5, 190, 22, 22, 145, 189, 14, 167, 48, 62, 183, 79, 100, 188, 255, 37, 173, 61, 135, 182, 4, 62, 201, 184, 57, 62, 78, 239, 125, 189, 137, 48, 227, 61, 53, 49, 56, 190, 122, 245, 62, 60, 26, 166, 55, 62, 80, 189, 157, 62, 121, 86, 32, 190, 156, 123, 2, 63, 239, 224, 214, 189, 156, 89, 50, 62, 13, 47, 168, 62, 75, 208, 91, 61, 4, 0, 164, 188, 247, 211, 36, 62, 192, 44, 105, 62, 246, 29, 55, 189, 96, 153, 114, 62, 113, 191, 224, 187, 52, 22, 135, 189, 47, 6, 154, 190, 141, 182, 60, 190, 140, 86, 79, 62, 27, 223, 5, 63, 84, 123, 131, 62, 197, 154, 91, 60, 108, 29, 8, 61, 203, 119, 130, 190, 168, 32, 3, 63, 162, 55, 130, 190, 193, 105, 100, 191, 248, 68, 40, 191, 105, 58, 235, 61, 5, 165, 31, 62, 194, 92, 101, 62, 34, 38, 210, 188, 240, 104, 145, 62, 81, 183, 67, 190, 10, 235, 149, 190, 5, 26, 138, 61, 251, 103, 191, 190, 246, 240, 135, 189, 226, 119, 239, 60, 6, 159, 115, 191, 76, 21, 138, 191, 190, 224, 166, 62, 243, 213, 49, 191, 27, 164, 244, 189, 164, 123, 12, 190, 205, 233, 150, 61, 157, 148, 225, 189, 20, 70, 68, 188, 121, 193, 58, 61, 155, 213, 204, 62, 152, 118, 211, 61, 5, 117, 39, 62, 113, 149, 145, 62, 173, 5, 191, 189, 46, 151, 139, 189, 189, 110, 255, 61, 214, 152, 131, 59, 130, 101, 17, 61, 61, 134, 13, 61, 244, 73, 212, 61, 126, 62, 123, 190, 38, 240, 219, 188, 159, 11, 70, 61, 101, 177, 43, 62, 26, 137, 167, 189, 37, 188, 203, 190, 33, 9, 7, 62, 93, 79, 141, 61, 234, 188, 188, 61, 180, 172, 133, 61, 129, 187, 235, 189, 115, 57, 120, 190, 141, 113, 151, 189, 233, 33, 17, 190, 180, 249, 134, 61, 189, 164, 211, 62, 247, 13, 153, 62, 0, 8, 96, 61, 78, 213, 121, 61, 41, 199, 180, 190, 16, 247, 31, 63, 119, 240, 201, 62, 113, 18, 39, 190, 113, 201, 20, 191, 54, 219, 173, 190, 53, 35, 226, 190, 4, 162, 3, 63, 24, 237, 17, 62, 151, 80, 148, 190, 164, 87, 217, 61, 31, 126, 125, 190, 241, 55, 0, 189, 209, 12, 30, 191, 154, 123, 73, 191, 114, 6, 4, 62, 63, 184, 106, 62, 210, 171, 157, 188, 70, 94, 203, 190, 158, 123, 71, 189, 37, 108, 162, 190, 84, 248, 5, 191, 221, 154, 62, 62, 109, 206, 83, 62, 3, 83, 131, 190, 188, 36, 84, 189, 119, 10, 180, 191, 92, 1, 67, 61, 175, 174, 71, 62, 237, 236, 4, 191, 108, 79, 252, 190, 55, 48, 209, 61, 139, 108, 158, 62, 112, 60, 81, 63, 121, 162, 255, 190, 226, 151, 90, 189, 24, 111, 139, 191, 85, 153, 186, 190, 255, 206, 114, 61, 247, 90, 33, 62, 170, 10, 133, 61, 146, 116, 170, 190, 186, 112, 40, 62, 64, 129, 71, 190, 245, 90, 4, 190, 213, 27, 67, 190, 79, 166, 75, 190, 51, 110, 96, 60, 121, 98, 33, 62, 34, 150, 31, 62, 196, 197, 113, 191, 145, 16, 1, 62, 199, 110, 18, 190, 157, 74, 234, 189, 195, 10, 255, 189, 180, 63, 92, 190, 3, 252, 31, 189, 211, 185, 136, 190, 14, 72, 100, 191, 17, 241, 139, 62, 222, 161, 155, 190, 64, 62, 241, 61, 44, 138, 62, 191, 106, 210, 123, 62, 214, 231, 6, 63, 38, 141, 12, 63, 213, 101, 25, 190, 203, 235, 10, 62, 243, 7, 211, 190, 87, 205, 40, 190, 109, 148, 136, 190, 8, 179, 55, 62, 161, 217, 111, 62, 196, 200, 173, 190, 107, 12, 165, 61, 89, 247, 49, 189, 157, 12, 155, 187, 71, 210, 217, 190, 39, 215, 86, 191, 209, 111, 175, 189, 158, 173, 132, 62, 86, 150, 85, 62, 136, 27, 34, 190, 189, 232, 116, 62, 105, 82, 69, 189, 67, 238, 27, 190, 111, 216, 56, 62, 158, 120, 64, 62, 220, 148, 129, 62, 252, 252, 143, 189, 66, 98, 160, 191, 223, 219, 247, 189, 226, 92, 146, 189, 148, 130, 51, 191, 184, 35, 187, 190, 180, 250, 5, 62, 159, 187, 22, 62, 157, 93, 18, 61, 217, 156, 171, 61, 89, 2, 50, 190, 13, 144, 170, 61, 79, 211, 240, 61, 186, 78, 238, 60, 169, 78, 47, 189, 103, 49, 65, 190, 73, 232, 69, 190, 182, 36, 79, 190, 24, 185, 186, 61, 164, 52, 99, 190, 67, 92, 145, 61, 166, 89, 124, 61, 87, 168, 35, 190, 167, 69, 179, 59, 200, 14, 15, 190, 214, 53, 8, 190, 74, 171, 140, 61, 250, 235, 115, 190, 11, 74, 203, 61, 170, 211, 254, 58, 34, 34, 86, 189, 161, 75, 22, 190, 15, 151, 182, 60, 197, 83, 225, 188, 35, 171, 144, 61, 190, 224, 195, 189, 125, 101, 139, 61, 16, 23, 111, 190, 170, 15, 83, 190, 12, 104, 101, 190, 76, 79, 218, 190, 242, 49, 88, 190, 180, 120, 3, 189, 67, 18, 42, 63, 192, 89, 217, 62, 108, 219, 148, 62, 18, 62, 68, 62, 161, 232, 122, 189, 229, 90, 51, 62, 141, 185, 22, 62, 64, 40, 243, 188, 227, 174, 90, 191, 185, 199, 35, 62, 174, 244, 233, 189, 58, 221, 5, 62, 125, 55, 65, 189, 217, 135, 62, 62, 246, 59, 60, 190, 106, 211, 43, 62, 65, 125, 139, 62, 164, 88, 44, 191, 108, 254, 153, 60, 36, 83, 120, 190, 64, 159, 159, 190, 215, 57, 20, 60, 81, 192, 145, 61, 38, 201, 61, 190, 253, 34, 95, 190, 121, 187, 134, 62, 121, 206, 13, 190, 185, 94, 25, 62, 129, 128, 13, 62, 24, 238, 36, 62, 8, 35, 162, 62, 195, 78, 8, 191, 198, 130, 215, 189, 28, 42, 194, 190, 106, 16, 154, 190, 117, 216, 43, 189, 247, 255, 203, 61, 191, 108, 137, 191, 227, 241, 73, 61, 128, 238, 43, 190, 74, 182, 185, 186, 134, 80, 152, 189, 20, 38, 14, 190, 253, 218, 6, 190, 241, 141, 232, 61, 15, 238, 56, 190, 148, 19, 127, 60, 192, 157, 102, 189, 249, 126, 13, 62, 216, 121, 158, 62, 184, 58, 181, 61, 240, 159, 1, 62, 158, 159, 0, 190, 197, 239, 156, 61, 120, 225, 61, 191, 171, 205, 188, 62, 142, 247, 186, 62, 128, 104, 47, 189, 94, 114, 113, 191, 170, 208, 212, 188, 105, 135, 208, 189, 83, 8, 151, 62, 158, 114, 214, 62, 18, 213, 201, 190, 110, 7, 47, 190, 166, 140, 237, 190, 243, 167, 225, 189, 151, 179, 34, 61, 0, 8, 61, 188, 126, 61, 63, 191, 159, 99, 155, 190, 97, 90, 142, 188, 44, 89, 19, 62, 217, 42, 118, 189, 234, 209, 133, 190, 6, 214, 17, 62, 242, 27, 44, 190, 159, 243, 136, 190, 216, 74, 73, 189, 10, 240, 91, 61, 119, 91, 106, 187, 36, 156, 3, 63, 160, 28, 144, 189, 39, 21, 81, 62, 79, 161, 225, 61, 142, 53, 168, 189, 77, 39, 72, 191, 213, 118, 28, 61, 212, 101, 32, 62, 225, 111, 48, 190, 168, 105, 141, 191, 183, 207, 36, 62, 237, 16, 202, 61, 142, 100, 97, 63, 89, 7, 196, 190, 183, 39, 57, 61, 27, 34, 130, 191, 112, 145, 18, 190, 55, 88, 150, 190, 113, 27, 205, 62, 201, 4, 142, 62, 237, 162, 15, 190, 13, 85, 151, 62, 50, 25, 186, 190, 125, 30, 8, 189, 102, 190, 22, 191, 15, 222, 26, 191, 18, 61, 97, 189, 47, 120, 138, 62, 24, 74, 217, 60, 143, 83, 139, 191, 235, 211, 173, 61, 159, 15, 22, 190, 161, 183, 73, 190, 206, 103, 142, 62, 8, 45, 11, 61, 196, 154, 75, 61, 102, 130, 220, 188, 167, 210, 206, 191, 26, 62, 120, 61, 202, 203, 24, 61, 11, 44, 29, 62, 33, 146, 82, 191, 70, 41, 25, 62, 205, 70, 170, 62, 186, 43, 221, 187, 96, 4, 0, 190, 51, 228, 144, 59, 194, 130, 46, 190, 116, 231, 255, 189, 152, 174, 162, 189, 99, 134, 20, 62, 111, 199, 2, 190, 33, 35, 190, 61, 245, 2, 153, 60, 96, 61, 237, 188, 18, 155, 152, 189, 24, 207, 162, 189, 224, 173, 168, 188, 223, 56, 178, 189, 231, 124, 58, 190, 10, 186, 246, 189, 133, 4, 37, 190, 116, 93, 213, 61, 232, 101, 41, 190, 78, 82, 140, 60, 105, 245, 170, 61, 5, 153, 76, 61, 14, 231, 68, 61, 219, 129, 53, 187, 247, 167, 32, 190, 140, 55, 157, 189, 246, 40, 237, 61, 109, 176, 4, 190, 58, 77, 94, 188, 178, 86, 173, 187, 93, 44, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 216, 25, 62, 120, 154, 49, 62, 114, 10, 226, 60, 163, 232, 12, 61, 203, 124, 150, 62, 45, 211, 35, 190, 43, 45, 137, 62, 1, 134, 119, 62, 235, 177, 68, 189, 58, 13, 92, 62, 247, 51, 40, 190, 162, 164, 4, 62, 242, 159, 33, 190, 36, 7, 45, 61, 69, 238, 19, 62, 34, 163, 119, 62, 3, 179, 157, 62, 253, 240, 144, 61, 143, 215, 52, 190, 155, 45, 147, 62, 84, 172, 161, 190, 79, 70, 136, 187, 166, 51, 166, 62, 227, 151, 153, 62, 18, 86, 157, 189, 93, 114, 105, 61, 150, 115, 117, 61, 251, 220, 79, 189, 50, 194, 51, 62, 189, 59, 208, 61, 92, 170, 63, 61, 20, 224, 187, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 55, 60, 63, 56, 77, 210, 190, 238, 171, 128, 62, 120, 156, 175, 62, 171, 153, 137, 189, 247, 121, 69, 63, 20, 29, 150, 62, 195, 1, 29, 63, 187, 30, 191, 62, 78, 11, 137, 190, 87, 139, 15, 191, 64, 70, 105, 63, 90, 98, 217, 189, 116, 57, 13, 63, 203, 243, 21, 191, 0, 96, 10, 191, 41, 145, 226, 190, 118, 254, 10, 63, 219, 55, 89, 59, 96, 230, 223, 188, 116, 140, 129, 190, 217, 103, 6, 191, 249, 146, 40, 190, 196, 96, 132, 63, 12, 34, 93, 63, 133, 98, 137, 62, 123, 8, 5, 61, 38, 86, 32, 191, 111, 112, 7, 63, 201, 17, 162, 62, 4, 225, 101, 63, 120, 48, 184, 61, 9, 133, 69, 189, 27, 123, 75, 61, 212, 149, 188, 190, 20, 110, 157, 61, 78, 244, 110, 190, 21, 123, 23, 62, 227, 236, 195, 189, 101, 113, 191, 190, 0, 20, 126, 62, 60, 88, 103, 190, 207, 49, 156, 61, 70, 170, 12, 63, 123, 197, 162, 189, 39, 236, 184, 61, 227, 68, 180, 61, 91, 18, 43, 62, 199, 85, 204, 190, 51, 84, 105, 61, 227, 145, 159, 189, 33, 78, 58, 190, 75, 12, 250, 60, 78, 145, 83, 62, 79, 104, 145, 190, 81, 246, 195, 189, 9, 73, 59, 62, 60, 52, 234, 189, 53, 217, 156, 188, 126, 118, 1, 62, 185, 177, 212, 189, 249, 91, 6, 63, 102, 196, 125, 61, 193, 54, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 218, 145, 186, 165, 111, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 226, 73, 189, 76, 30, 58, 63, 17, 251, 144, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 146, 155, 190, 227, 70, 16, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0085/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}