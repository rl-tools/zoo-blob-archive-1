// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 116, 151, 62, 185, 66, 104, 63, 43, 148, 70, 62, 240, 116, 250, 61, 152, 96, 0, 63, 214, 239, 136, 190, 69, 152, 206, 190, 89, 193, 48, 191, 236, 80, 177, 190, 214, 52, 190, 190, 120, 166, 47, 191, 208, 15, 174, 62, 89, 90, 211, 61, 241, 203, 232, 61, 228, 93, 21, 63, 105, 17, 84, 62, 192, 160, 111, 190, 170, 6, 26, 63, 0, 107, 98, 189, 116, 170, 209, 61, 48, 40, 13, 63, 207, 174, 62, 190, 155, 166, 36, 62, 144, 230, 176, 190, 230, 164, 156, 188, 129, 40, 243, 62, 210, 113, 240, 190, 61, 141, 64, 63, 18, 120, 134, 190, 214, 255, 170, 190, 34, 20, 35, 63, 62, 54, 153, 63, 30, 77, 78, 62, 85, 100, 182, 190, 125, 86, 130, 62, 73, 41, 137, 190, 40, 83, 165, 190, 80, 71, 177, 62, 204, 57, 139, 61, 178, 189, 253, 62, 36, 74, 148, 63, 119, 234, 193, 61, 233, 85, 34, 191, 65, 172, 85, 62, 100, 67, 213, 190, 33, 232, 3, 190, 44, 83, 15, 63, 252, 215, 175, 190, 202, 230, 176, 61, 109, 130, 78, 190, 166, 153, 144, 190, 51, 140, 41, 190, 64, 234, 77, 191, 243, 118, 140, 189, 187, 255, 31, 191, 100, 85, 18, 63, 146, 219, 41, 63, 163, 125, 232, 62, 175, 101, 33, 191, 28, 243, 138, 62, 175, 112, 27, 190, 166, 69, 55, 63, 1, 202, 212, 62, 163, 241, 251, 189, 188, 74, 249, 62, 222, 3, 9, 191, 230, 142, 178, 61, 76, 129, 12, 63, 0, 191, 74, 62, 119, 238, 34, 63, 80, 93, 42, 191, 67, 111, 231, 190, 231, 72, 74, 63, 183, 88, 177, 188, 131, 204, 190, 190, 72, 129, 39, 191, 238, 165, 254, 61, 162, 177, 206, 190, 243, 99, 255, 190, 40, 207, 28, 61, 83, 145, 236, 62, 86, 142, 31, 63, 68, 17, 31, 190, 96, 97, 201, 189, 115, 33, 217, 59, 39, 168, 176, 190, 252, 113, 9, 63, 141, 208, 93, 190, 172, 106, 95, 190, 84, 64, 227, 62, 156, 239, 63, 63, 217, 187, 40, 191, 15, 3, 211, 190, 244, 31, 164, 190, 114, 195, 15, 189, 20, 161, 27, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 110, 9, 191, 39, 49, 207, 62, 97, 241, 57, 189, 194, 231, 14, 191, 82, 67, 253, 62, 27, 160, 179, 190, 39, 39, 19, 191, 248, 143, 161, 190, 163, 146, 247, 190, 158, 88, 135, 62, 6, 183, 120, 190, 153, 120, 160, 62, 116, 92, 19, 63, 223, 121, 67, 61, 218, 188, 183, 190, 105, 105, 44, 62, 151, 82, 247, 190, 190, 187, 46, 63, 154, 134, 210, 190, 34, 83, 177, 62, 86, 120, 43, 191, 14, 122, 42, 190, 24, 194, 253, 62, 170, 33, 196, 190, 199, 14, 225, 62, 242, 86, 199, 190, 251, 36, 254, 62, 240, 193, 47, 63, 1, 149, 191, 190, 105, 152, 147, 190, 204, 50, 208, 190, 103, 35, 53, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 123, 62, 189, 204, 165, 56, 189, 225, 149, 27, 62, 106, 3, 70, 61, 175, 131, 171, 59, 198, 49, 1, 189, 212, 241, 21, 189, 202, 251, 245, 61, 227, 242, 123, 188, 218, 178, 100, 189, 69, 53, 113, 190, 36, 62, 225, 189, 213, 86, 215, 189, 230, 168, 192, 189, 115, 7, 20, 190, 24, 239, 146, 190, 71, 175, 137, 61, 64, 227, 72, 60, 224, 27, 164, 187, 122, 224, 205, 61, 176, 195, 244, 189, 11, 66, 16, 62, 231, 95, 151, 61, 201, 112, 141, 60, 109, 65, 202, 61, 40, 17, 11, 190, 25, 182, 137, 188, 23, 215, 250, 61, 50, 180, 155, 61, 135, 10, 104, 190, 195, 199, 232, 61, 23, 83, 175, 189, 198, 158, 221, 189, 55, 224, 140, 62, 89, 161, 191, 61, 119, 75, 21, 191, 93, 248, 15, 189, 72, 49, 223, 189, 72, 163, 74, 62, 107, 152, 66, 189, 3, 93, 251, 189, 112, 50, 241, 189, 57, 123, 104, 62, 166, 90, 23, 62, 77, 26, 83, 60, 124, 211, 203, 61, 200, 194, 172, 62, 38, 193, 146, 62, 51, 10, 117, 190, 61, 15, 63, 61, 33, 86, 134, 190, 99, 207, 14, 191, 91, 200, 60, 62, 211, 210, 139, 190, 79, 113, 185, 61, 235, 69, 126, 190, 25, 181, 1, 189, 174, 130, 99, 62, 70, 57, 125, 60, 74, 163, 63, 62, 109, 134, 91, 189, 123, 100, 77, 191, 84, 69, 42, 190, 102, 52, 89, 190, 233, 7, 11, 63, 5, 241, 8, 190, 174, 244, 185, 60, 131, 133, 27, 188, 163, 213, 48, 61, 51, 62, 243, 61, 168, 185, 59, 61, 201, 168, 203, 189, 22, 111, 169, 189, 142, 21, 80, 190, 160, 173, 153, 62, 181, 20, 123, 190, 62, 198, 137, 60, 204, 48, 60, 62, 241, 17, 53, 190, 192, 10, 209, 60, 0, 38, 239, 61, 251, 11, 198, 60, 162, 201, 11, 190, 159, 170, 179, 189, 237, 233, 224, 188, 156, 251, 59, 189, 92, 102, 197, 61, 125, 178, 75, 190, 46, 20, 124, 190, 253, 37, 193, 188, 125, 208, 214, 189, 125, 84, 17, 61, 180, 128, 60, 61, 67, 123, 86, 189, 159, 67, 153, 189, 82, 222, 31, 60, 9, 253, 26, 191, 239, 69, 5, 190, 121, 125, 44, 190, 168, 181, 125, 62, 185, 164, 148, 62, 137, 200, 71, 190, 154, 60, 140, 190, 227, 19, 197, 60, 116, 200, 251, 61, 74, 245, 136, 62, 52, 198, 37, 191, 196, 103, 209, 61, 150, 102, 236, 189, 166, 142, 134, 190, 119, 115, 37, 191, 62, 123, 49, 190, 211, 121, 193, 188, 102, 25, 2, 189, 71, 83, 24, 62, 2, 214, 201, 62, 175, 122, 23, 190, 232, 25, 38, 62, 197, 135, 180, 188, 255, 214, 1, 189, 189, 72, 86, 62, 120, 234, 216, 190, 190, 23, 18, 62, 231, 224, 76, 61, 170, 15, 158, 189, 45, 177, 126, 189, 217, 161, 140, 62, 114, 232, 242, 61, 244, 118, 29, 190, 138, 83, 187, 187, 38, 88, 174, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 171, 235, 145, 61, 173, 224, 149, 60, 181, 238, 198, 189, 127, 172, 37, 62, 19, 123, 33, 61, 165, 191, 37, 61, 219, 59, 0, 190, 5, 108, 22, 188, 58, 241, 31, 190, 65, 123, 79, 188, 248, 104, 119, 58, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 47, 123, 7, 190, 220, 255, 42, 190, 99, 179, 249, 189, 55, 136, 127, 60, 30, 6, 22, 62, 65, 151, 19, 190, 116, 210, 1, 62, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 81, 52, 141, 60, 199, 18, 195, 61, 113, 81, 142, 61, 240, 14, 154, 61, 80, 19, 253, 189, 83, 7, 18, 190, 14, 195, 42, 189, 229, 143, 30, 61, 248, 77, 223, 61, 48, 197, 177, 61, 39, 81, 203, 190, 157, 135, 180, 60, 174, 16, 116, 190, 71, 27, 2, 190, 142, 244, 94, 61, 9, 128, 199, 61, 57, 69, 174, 189, 155, 222, 136, 188, 255, 153, 2, 190, 71, 244, 213, 189, 212, 86, 9, 190, 229, 208, 182, 61, 135, 176, 223, 189, 141, 168, 239, 186, 81, 182, 17, 190, 190, 255, 218, 61, 101, 232, 189, 189, 131, 164, 156, 189, 158, 252, 2, 62, 134, 179, 135, 189, 217, 34, 49, 62, 252, 173, 224, 60, 172, 126, 162, 62, 240, 130, 102, 190, 141, 136, 92, 62, 248, 216, 72, 190, 97, 127, 19, 188, 236, 253, 88, 62, 181, 207, 96, 62, 134, 200, 158, 59, 14, 166, 200, 188, 232, 73, 212, 188, 1, 83, 134, 62, 173, 62, 208, 189, 225, 135, 139, 189, 209, 178, 72, 62, 213, 58, 121, 190, 52, 182, 134, 61, 243, 159, 36, 189, 233, 211, 73, 62, 150, 227, 133, 61, 206, 190, 65, 62, 251, 103, 149, 61, 20, 172, 234, 60, 168, 153, 65, 61, 20, 44, 150, 62, 166, 182, 140, 188, 208, 78, 81, 190, 77, 20, 63, 190, 187, 130, 0, 61, 133, 212, 22, 62, 204, 77, 185, 61, 181, 89, 144, 62, 213, 43, 137, 189, 178, 61, 56, 191, 155, 209, 236, 61, 108, 33, 95, 60, 121, 127, 183, 188, 82, 2, 84, 62, 97, 34, 44, 190, 104, 177, 247, 189, 64, 56, 104, 189, 220, 129, 155, 60, 73, 134, 129, 62, 73, 74, 28, 191, 164, 153, 110, 189, 93, 109, 29, 60, 15, 171, 103, 190, 134, 225, 22, 191, 105, 52, 213, 190, 184, 136, 6, 190, 3, 110, 122, 189, 81, 60, 44, 62, 225, 38, 15, 62, 99, 19, 248, 188, 151, 228, 41, 188, 222, 105, 69, 61, 85, 62, 22, 62, 17, 18, 80, 62, 114, 220, 230, 190, 242, 249, 74, 62, 86, 47, 33, 62, 186, 63, 242, 189, 210, 254, 255, 189, 225, 244, 54, 61, 13, 241, 226, 60, 133, 89, 94, 189, 163, 10, 97, 62, 197, 219, 16, 190, 160, 111, 157, 61, 177, 66, 42, 59, 235, 246, 162, 61, 162, 156, 71, 187, 90, 117, 0, 189, 92, 191, 54, 189, 3, 144, 180, 189, 238, 144, 135, 190, 132, 143, 5, 189, 91, 172, 153, 187, 82, 79, 22, 190, 220, 51, 192, 61, 106, 93, 57, 62, 38, 178, 36, 62, 14, 174, 213, 60, 200, 22, 145, 190, 12, 53, 115, 189, 110, 180, 90, 190, 176, 50, 19, 62, 211, 150, 129, 189, 73, 126, 9, 190, 242, 120, 51, 189, 225, 73, 113, 62, 128, 87, 203, 189, 76, 106, 99, 62, 174, 4, 200, 61, 198, 154, 72, 188, 126, 10, 208, 189, 233, 96, 181, 61, 92, 40, 4, 62, 156, 191, 163, 188, 238, 212, 218, 188, 104, 54, 132, 189, 124, 68, 15, 189, 44, 173, 208, 189, 16, 169, 111, 189, 56, 77, 148, 189, 10, 9, 157, 188, 39, 220, 128, 190, 161, 117, 23, 61, 32, 1, 10, 62, 131, 85, 129, 62, 30, 119, 221, 189, 110, 133, 157, 61, 216, 108, 62, 62, 220, 102, 70, 189, 235, 103, 5, 190, 170, 179, 96, 190, 64, 57, 113, 190, 142, 109, 246, 187, 213, 237, 46, 62, 69, 213, 226, 60, 44, 21, 172, 188, 249, 133, 29, 190, 194, 245, 23, 61, 104, 56, 222, 189, 18, 93, 33, 190, 95, 2, 146, 61, 159, 23, 5, 61, 154, 48, 128, 189, 159, 74, 187, 190, 24, 65, 239, 190, 111, 155, 83, 190, 156, 239, 183, 190, 188, 244, 168, 188, 223, 6, 53, 189, 9, 35, 59, 190, 118, 67, 117, 190, 58, 198, 32, 190, 112, 167, 150, 61, 77, 47, 133, 62, 207, 198, 30, 191, 100, 7, 73, 189, 112, 193, 255, 61, 212, 233, 120, 190, 51, 18, 158, 191, 107, 237, 109, 190, 240, 67, 133, 190, 96, 17, 87, 62, 205, 183, 29, 62, 109, 190, 105, 62, 68, 252, 220, 189, 100, 229, 179, 189, 63, 92, 178, 61, 236, 27, 25, 62, 182, 166, 19, 62, 55, 233, 51, 191, 176, 239, 215, 61, 44, 103, 125, 61, 206, 51, 20, 190, 189, 2, 197, 61, 183, 33, 231, 61, 157, 121, 108, 62, 242, 10, 160, 190, 14, 174, 57, 189, 115, 82, 253, 189, 96, 227, 85, 189, 174, 162, 25, 61, 17, 10, 150, 189, 16, 102, 216, 189, 205, 206, 221, 61, 168, 249, 168, 61, 239, 148, 154, 59, 240, 34, 52, 191, 27, 239, 221, 61, 102, 108, 145, 62, 2, 85, 22, 190, 137, 244, 134, 191, 2, 118, 200, 190, 202, 211, 161, 61, 64, 248, 149, 189, 189, 230, 31, 60, 253, 48, 140, 190, 247, 108, 87, 190, 15, 98, 74, 190, 242, 136, 32, 189, 187, 70, 55, 190, 74, 188, 145, 189, 144, 195, 20, 191, 131, 24, 120, 62, 237, 144, 12, 191, 28, 162, 41, 190, 208, 193, 232, 189, 141, 113, 166, 61, 23, 26, 67, 62, 250, 80, 159, 190, 178, 171, 206, 189, 75, 134, 107, 190, 44, 224, 20, 62, 108, 100, 66, 189, 72, 177, 145, 61, 1, 89, 147, 61, 139, 6, 89, 61, 91, 223, 132, 61, 206, 249, 133, 62, 163, 160, 136, 190, 64, 31, 22, 190, 136, 179, 100, 189, 14, 84, 4, 189, 28, 53, 242, 190, 80, 192, 153, 190, 141, 108, 252, 189, 119, 122, 37, 62, 67, 159, 121, 60, 204, 33, 173, 61, 187, 79, 28, 62, 41, 169, 14, 188, 222, 99, 220, 61, 251, 251, 182, 61, 252, 217, 117, 62, 64, 73, 144, 190, 171, 126, 215, 61, 118, 88, 31, 62, 159, 246, 65, 190, 26, 65, 79, 190, 52, 23, 212, 189, 214, 165, 119, 188, 49, 72, 51, 191, 219, 140, 126, 61, 58, 48, 121, 61, 216, 67, 11, 62, 103, 133, 45, 62, 13, 159, 46, 61, 31, 84, 118, 190, 134, 228, 216, 61, 115, 150, 9, 62, 106, 26, 79, 62, 255, 132, 11, 191, 180, 248, 100, 190, 50, 8, 230, 189, 126, 223, 195, 190, 142, 238, 15, 191, 71, 21, 236, 190, 145, 108, 92, 62, 247, 33, 225, 61, 144, 111, 206, 61, 16, 114, 213, 60, 195, 90, 115, 189, 199, 246, 220, 188, 99, 237, 242, 61, 41, 83, 81, 62, 164, 143, 24, 62, 204, 17, 77, 190, 78, 22, 140, 62, 132, 57, 99, 62, 161, 20, 103, 190, 221, 221, 178, 61, 196, 53, 175, 62, 26, 233, 233, 60, 154, 84, 105, 190, 75, 10, 44, 62, 13, 101, 59, 187, 177, 203, 151, 61, 198, 52, 178, 189, 67, 5, 87, 190, 201, 92, 75, 190, 234, 90, 243, 188, 239, 239, 155, 60, 195, 53, 177, 61, 56, 55, 122, 61, 185, 144, 5, 62, 102, 232, 90, 188, 19, 167, 215, 60, 200, 58, 177, 190, 87, 23, 167, 189, 76, 85, 81, 61, 83, 143, 51, 62, 149, 148, 106, 190, 202, 44, 61, 61, 3, 124, 209, 61, 198, 245, 131, 60, 68, 184, 8, 190, 159, 152, 247, 189, 155, 119, 69, 62, 210, 197, 38, 58, 168, 8, 88, 189, 251, 35, 28, 61, 98, 75, 79, 190, 66, 153, 183, 189, 96, 134, 199, 60, 136, 206, 95, 59, 171, 146, 47, 189, 147, 134, 214, 61, 140, 73, 133, 61, 210, 186, 143, 189, 112, 225, 93, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 136, 82, 180, 189, 61, 60, 41, 190, 3, 77, 182, 189, 124, 253, 152, 189, 204, 215, 28, 190, 155, 191, 210, 60, 15, 152, 2, 62, 160, 71, 36, 190, 36, 185, 17, 190, 151, 58, 38, 190, 26, 62, 32, 190, 28, 248, 149, 189, 121, 201, 104, 189, 223, 186, 200, 189, 90, 164, 199, 189, 125, 108, 231, 61, 65, 231, 249, 59, 38, 24, 53, 190, 199, 102, 42, 189, 19, 129, 23, 62, 142, 37, 44, 189, 242, 195, 128, 60, 104, 227, 161, 189, 34, 73, 108, 189, 250, 183, 218, 61, 92, 36, 174, 189, 30, 176, 106, 190, 106, 34, 170, 61, 7, 224, 132, 187, 97, 252, 53, 190, 66, 160, 105, 190, 53, 90, 153, 61, 144, 107, 63, 190, 62, 226, 30, 62, 224, 131, 218, 61, 51, 241, 117, 190, 137, 65, 233, 61, 113, 17, 140, 190, 129, 36, 197, 61, 153, 228, 59, 62, 23, 149, 162, 190, 145, 192, 129, 190, 20, 163, 246, 189, 123, 87, 27, 190, 168, 50, 166, 189, 8, 188, 50, 190, 91, 117, 27, 188, 108, 97, 53, 62, 14, 42, 130, 62, 13, 255, 184, 189, 156, 66, 250, 189, 183, 16, 36, 191, 122, 193, 124, 61, 52, 131, 24, 187, 84, 113, 194, 189, 139, 21, 160, 60, 89, 13, 70, 188, 230, 93, 184, 190, 214, 171, 190, 61, 120, 2, 126, 61, 37, 236, 52, 187, 88, 158, 79, 189, 70, 84, 0, 189, 20, 142, 159, 61, 58, 66, 132, 61, 223, 116, 76, 62, 58, 192, 14, 62, 43, 204, 221, 188, 96, 232, 167, 188, 179, 50, 63, 61, 10, 174, 24, 189, 25, 186, 252, 190, 56, 253, 44, 60, 169, 190, 9, 190, 183, 136, 107, 62, 31, 163, 42, 190, 24, 29, 148, 61, 104, 157, 126, 190, 30, 15, 0, 190, 127, 123, 8, 190, 225, 242, 173, 189, 222, 159, 189, 190, 93, 60, 99, 59, 215, 249, 114, 190, 243, 27, 73, 190, 70, 97, 133, 61, 228, 153, 193, 190, 218, 39, 136, 62, 200, 37, 114, 187, 191, 149, 167, 190, 172, 141, 112, 190, 59, 245, 177, 61, 80, 125, 30, 190, 173, 27, 108, 60, 251, 74, 163, 190, 236, 217, 217, 189, 23, 216, 25, 62, 128, 128, 135, 62, 166, 145, 58, 62, 161, 159, 14, 62, 198, 123, 172, 62, 242, 132, 152, 62, 17, 42, 49, 190, 159, 31, 176, 188, 222, 232, 174, 190, 77, 52, 150, 190, 75, 4, 47, 189, 204, 168, 25, 189, 200, 133, 208, 189, 253, 54, 137, 190, 190, 71, 93, 189, 88, 235, 35, 62, 160, 120, 111, 61, 141, 68, 142, 61, 104, 240, 230, 189, 154, 190, 29, 191, 20, 59, 21, 190, 166, 18, 181, 190, 204, 63, 23, 189, 168, 10, 24, 190, 161, 175, 26, 190, 160, 237, 148, 61, 156, 249, 137, 189, 109, 169, 182, 189, 156, 43, 179, 188, 228, 4, 186, 61, 115, 245, 166, 60, 35, 28, 23, 62, 100, 224, 192, 189, 18, 235, 7, 62, 129, 68, 25, 61, 105, 231, 243, 189, 53, 190, 203, 189, 34, 170, 207, 189, 86, 82, 13, 190, 100, 96, 55, 61, 31, 14, 74, 61, 249, 89, 166, 188, 96, 88, 255, 189, 61, 134, 164, 187, 109, 165, 131, 189, 55, 110, 56, 61, 61, 155, 101, 189, 229, 205, 200, 189, 191, 77, 105, 189, 56, 155, 189, 60, 27, 131, 253, 189, 46, 214, 25, 190, 117, 34, 217, 189, 204, 92, 13, 61, 150, 159, 52, 61, 11, 251, 215, 60, 108, 62, 72, 62, 96, 47, 96, 189, 36, 86, 95, 190, 43, 209, 140, 189, 5, 163, 214, 189, 13, 204, 129, 60, 13, 173, 192, 61, 46, 112, 175, 189, 128, 146, 152, 60, 33, 168, 172, 61, 5, 138, 201, 189, 73, 108, 4, 190, 45, 102, 129, 189, 17, 78, 65, 190, 94, 108, 26, 190, 62, 252, 201, 62, 56, 116, 213, 190, 120, 78, 186, 61, 111, 142, 162, 189, 77, 21, 219, 189, 6, 110, 82, 190, 224, 43, 182, 188, 143, 185, 240, 189, 0, 52, 92, 62, 95, 138, 53, 62, 14, 244, 223, 189, 34, 116, 232, 61, 70, 54, 71, 189, 211, 133, 253, 189, 233, 42, 87, 190, 34, 228, 226, 189, 88, 110, 8, 189, 171, 122, 138, 188, 171, 188, 60, 190, 151, 96, 183, 61, 72, 250, 217, 189, 53, 171, 213, 61, 144, 242, 83, 190, 97, 35, 133, 61, 159, 130, 102, 61, 250, 181, 198, 62, 197, 237, 80, 62, 214, 229, 160, 62, 57, 75, 32, 62, 40, 19, 25, 62, 253, 181, 54, 62, 55, 217, 79, 190, 173, 62, 53, 62, 207, 197, 208, 189, 150, 94, 27, 189, 249, 244, 227, 59, 125, 175, 71, 187, 169, 56, 65, 189, 97, 196, 123, 60, 59, 53, 194, 61, 31, 146, 244, 61, 110, 226, 176, 61, 101, 31, 141, 61, 68, 224, 11, 62, 8, 242, 55, 190, 80, 255, 131, 60, 173, 66, 205, 189, 29, 153, 139, 190, 9, 54, 165, 62, 111, 16, 127, 189, 106, 210, 49, 190, 188, 181, 74, 62, 104, 250, 74, 62, 82, 98, 153, 189, 151, 9, 199, 189, 50, 34, 228, 189, 31, 229, 124, 188, 79, 154, 163, 62, 237, 73, 226, 61, 52, 83, 52, 62, 163, 92, 181, 62, 180, 115, 198, 62, 208, 164, 140, 61, 224, 84, 28, 190, 78, 12, 164, 60, 147, 147, 89, 60, 66, 170, 65, 61, 73, 34, 39, 61, 7, 228, 70, 188, 216, 191, 90, 62, 13, 39, 136, 190, 111, 5, 27, 61, 98, 145, 212, 61, 103, 73, 48, 62, 11, 171, 107, 62, 239, 122, 250, 61, 66, 81, 14, 62, 24, 112, 162, 189, 91, 117, 225, 60, 148, 110, 221, 189, 66, 64, 187, 187, 48, 122, 52, 190, 105, 149, 126, 60, 35, 2, 34, 189, 165, 58, 145, 61, 211, 213, 74, 190, 59, 237, 83, 187, 203, 19, 14, 189, 50, 66, 107, 189, 69, 151, 221, 61, 15, 239, 89, 61, 240, 44, 198, 188, 143, 206, 161, 189, 210, 118, 238, 189, 128, 29, 120, 189, 230, 225, 19, 62, 211, 228, 248, 59, 36, 62, 17, 189, 173, 137, 19, 190, 82, 215, 181, 189, 128, 80, 20, 62, 79, 170, 241, 189, 23, 17, 5, 189, 18, 183, 2, 190, 63, 247, 41, 62, 97, 238, 225, 61, 45, 139, 182, 189, 40, 44, 178, 61, 231, 109, 209, 189, 132, 155, 206, 189, 134, 227, 80, 61, 22, 149, 210, 189, 127, 187, 74, 62, 220, 225, 20, 190, 82, 167, 123, 190, 174, 94, 5, 190, 129, 248, 220, 186, 143, 243, 75, 190, 216, 120, 224, 189, 117, 39, 147, 188, 50, 58, 123, 190, 47, 155, 197, 62, 242, 148, 106, 62, 22, 255, 81, 62, 57, 61, 155, 62, 135, 134, 104, 62, 65, 115, 158, 62, 28, 41, 154, 189, 174, 101, 51, 62, 106, 248, 227, 190, 102, 228, 140, 190, 67, 246, 153, 60, 37, 198, 73, 190, 203, 86, 97, 189, 46, 204, 226, 189, 60, 180, 216, 61, 13, 113, 13, 62, 226, 6, 76, 61, 73, 41, 32, 190, 58, 89, 64, 190, 216, 14, 101, 191, 119, 2, 154, 189, 203, 193, 155, 190, 175, 110, 61, 191, 61, 247, 115, 189, 60, 7, 225, 189, 145, 110, 105, 62, 47, 251, 1, 62, 49, 107, 94, 190, 179, 117, 182, 189, 83, 60, 187, 190, 9, 8, 62, 190, 254, 180, 195, 60, 6, 160, 224, 190, 226, 168, 56, 190, 56, 48, 129, 62, 105, 200, 170, 190, 112, 157, 151, 191, 160, 79, 12, 191, 93, 36, 196, 190, 112, 83, 144, 61, 251, 231, 154, 189, 145, 75, 100, 62, 57, 47, 111, 190, 48, 253, 21, 190, 208, 155, 16, 62, 125, 87, 20, 190, 201, 162, 196, 188, 45, 221, 145, 191, 127, 118, 110, 61, 138, 134, 175, 188, 43, 21, 224, 189, 238, 116, 16, 62, 185, 49, 16, 188, 217, 222, 65, 62, 189, 7, 96, 190, 107, 63, 215, 189, 133, 60, 103, 61, 23, 180, 96, 189, 92, 136, 22, 62, 197, 51, 134, 62, 84, 106, 235, 185, 221, 141, 27, 189, 73, 86, 42, 190, 168, 130, 6, 61, 223, 78, 148, 59, 236, 169, 112, 189, 121, 249, 127, 190, 144, 93, 136, 189, 82, 86, 235, 189, 241, 100, 88, 190, 226, 77, 192, 189, 104, 209, 25, 186, 5, 40, 69, 190, 29, 59, 40, 62, 154, 252, 99, 190, 49, 25, 236, 61, 50, 142, 152, 189, 168, 53, 158, 61, 68, 110, 69, 62, 16, 250, 72, 189, 121, 8, 79, 61, 213, 241, 87, 62, 96, 161, 84, 62, 218, 58, 13, 191, 255, 151, 129, 189, 112, 214, 113, 60, 87, 145, 177, 189, 142, 72, 196, 61, 255, 169, 44, 189, 181, 96, 103, 60, 250, 217, 205, 188, 78, 139, 143, 189, 236, 59, 66, 189, 46, 91, 1, 188, 93, 79, 232, 189, 250, 113, 230, 189, 202, 107, 228, 60, 152, 126, 10, 190, 19, 143, 190, 189, 183, 21, 77, 190, 43, 3, 250, 187, 39, 133, 99, 189, 121, 245, 21, 62, 144, 255, 25, 190, 89, 185, 232, 189, 117, 206, 66, 190, 140, 202, 5, 62, 167, 97, 216, 189, 141, 210, 251, 61, 175, 11, 205, 61, 252, 199, 19, 62, 161, 113, 218, 61, 123, 77, 250, 61, 112, 100, 15, 190, 183, 175, 194, 189, 150, 78, 44, 61, 185, 177, 58, 189, 28, 164, 134, 61, 23, 148, 161, 189, 69, 154, 18, 190, 49, 206, 141, 188, 78, 86, 128, 62, 106, 152, 29, 62, 181, 11, 168, 189, 55, 12, 178, 189, 183, 118, 1, 62, 150, 234, 143, 189, 86, 81, 20, 62, 210, 41, 180, 190, 136, 133, 160, 190, 88, 223, 212, 189, 238, 238, 164, 190, 247, 138, 71, 61, 169, 232, 100, 190, 166, 245, 9, 62, 205, 85, 239, 188, 36, 118, 10, 61, 200, 16, 100, 62, 98, 205, 10, 190, 190, 27, 72, 190, 200, 111, 73, 190, 157, 228, 254, 188, 183, 116, 38, 61, 110, 225, 199, 188, 32, 100, 234, 188, 223, 218, 159, 189, 220, 8, 179, 189, 239, 48, 102, 62, 107, 10, 98, 62, 229, 171, 135, 188, 113, 139, 227, 188, 122, 108, 37, 62, 156, 214, 116, 189, 57, 4, 69, 190, 114, 230, 35, 62, 5, 143, 49, 62, 65, 141, 133, 62, 194, 1, 221, 189, 164, 132, 66, 190, 226, 108, 195, 188, 85, 61, 198, 62, 52, 186, 186, 61, 4, 12, 48, 188, 222, 202, 134, 62, 160, 197, 101, 57, 94, 203, 70, 62, 192, 175, 154, 190, 128, 82, 119, 190, 175, 76, 186, 186, 213, 188, 162, 61, 8, 75, 130, 62, 134, 178, 162, 190, 68, 119, 59, 62, 107, 175, 199, 189, 81, 41, 6, 190, 165, 235, 45, 189, 91, 102, 200, 61, 183, 81, 33, 62, 201, 190, 121, 61, 95, 216, 210, 189, 13, 74, 237, 60, 28, 220, 33, 62, 74, 58, 5, 59, 58, 86, 128, 62, 39, 223, 38, 62, 100, 133, 134, 188, 43, 207, 26, 189, 200, 251, 237, 189, 26, 66, 111, 190, 51, 32, 187, 189, 255, 223, 21, 62, 116, 163, 69, 190, 68, 185, 180, 189, 104, 231, 125, 61, 97, 74, 251, 61, 135, 233, 233, 61, 17, 248, 132, 62, 205, 66, 164, 62, 140, 119, 36, 62, 37, 240, 155, 189, 67, 121, 5, 190, 152, 195, 242, 190, 121, 180, 43, 62, 241, 150, 42, 62, 236, 162, 190, 62, 127, 232, 73, 190, 253, 193, 64, 190, 218, 88, 2, 62, 47, 46, 31, 61, 213, 159, 140, 190, 55, 218, 94, 190, 6, 30, 233, 61, 215, 140, 154, 61, 186, 169, 69, 190, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 211, 145, 61, 33, 126, 124, 62, 125, 210, 253, 187, 233, 132, 35, 62, 133, 132, 10, 190, 128, 184, 146, 61, 90, 180, 125, 190, 232, 139, 42, 61, 164, 45, 29, 60, 31, 89, 216, 61, 223, 222, 39, 62, 139, 89, 131, 61, 155, 91, 75, 62, 73, 48, 102, 61, 80, 3, 33, 62, 107, 47, 13, 62, 216, 200, 168, 189, 224, 60, 194, 189, 230, 100, 136, 62, 172, 168, 6, 190, 144, 221, 127, 62, 112, 132, 155, 62, 158, 101, 154, 62, 51, 253, 229, 189, 35, 9, 52, 62, 128, 239, 119, 62, 167, 12, 144, 188, 142, 160, 184, 189, 122, 170, 152, 61, 157, 129, 0, 62, 12, 39, 21, 190, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 57, 17, 61, 205, 135, 25, 191, 122, 12, 204, 60, 242, 166, 248, 62, 76, 9, 33, 61, 226, 9, 181, 60, 196, 57, 53, 62, 96, 90, 187, 62, 214, 186, 225, 61, 61, 195, 134, 62, 241, 216, 44, 63, 14, 185, 73, 63, 117, 252, 46, 62, 114, 130, 172, 62, 11, 54, 107, 189, 54, 203, 253, 189, 169, 40, 182, 190, 154, 226, 36, 190, 43, 174, 0, 191, 82, 96, 225, 189, 30, 61, 158, 190, 240, 13, 66, 190, 32, 111, 106, 190, 203, 205, 143, 189, 99, 141, 192, 190, 101, 78, 65, 63, 184, 115, 66, 62, 227, 117, 136, 189, 212, 164, 155, 190, 50, 80, 19, 190, 37, 116, 207, 62, 212, 96, 26, 189, 205, 106, 135, 61, 150, 121, 104, 189, 75, 69, 63, 62, 8, 40, 77, 189, 226, 249, 19, 190, 124, 213, 22, 62, 250, 64, 142, 62, 113, 178, 28, 190, 178, 220, 36, 189, 215, 212, 17, 61, 209, 116, 252, 61, 95, 180, 103, 61, 236, 165, 116, 190, 137, 89, 3, 61, 46, 120, 240, 189, 64, 133, 232, 189, 127, 215, 250, 61, 2, 232, 3, 187, 77, 91, 49, 189, 243, 97, 226, 187, 109, 159, 47, 190, 35, 254, 77, 190, 183, 68, 42, 190, 115, 32, 142, 188, 245, 97, 75, 62, 5, 86, 8, 189, 219, 35, 34, 190, 75, 151, 35, 62, 89, 173, 1, 62, 49, 219, 196, 59, 115, 134, 139, 188, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 42, 130, 61, 67, 51, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 14, 233, 63, 241, 13, 190, 191, 160, 236, 93, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {17, 124, 156, 64, 26, 34, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}