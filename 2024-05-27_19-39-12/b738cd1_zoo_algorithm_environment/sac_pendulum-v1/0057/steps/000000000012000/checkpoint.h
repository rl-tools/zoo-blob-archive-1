// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 80, 64, 63, 189, 124, 222, 62, 166, 87, 129, 62, 79, 60, 138, 62, 194, 179, 235, 62, 3, 100, 113, 190, 180, 55, 203, 190, 24, 78, 192, 191, 35, 62, 166, 190, 245, 120, 169, 190, 102, 183, 43, 191, 119, 26, 153, 62, 200, 97, 132, 61, 50, 70, 227, 62, 32, 229, 237, 62, 136, 98, 247, 62, 137, 31, 151, 190, 20, 180, 12, 63, 126, 31, 90, 190, 139, 192, 115, 62, 144, 96, 10, 63, 12, 168, 155, 190, 95, 148, 13, 62, 45, 232, 135, 190, 127, 195, 149, 62, 70, 169, 36, 63, 147, 22, 254, 190, 18, 84, 76, 63, 15, 146, 31, 191, 230, 162, 112, 190, 59, 186, 107, 63, 169, 89, 125, 63, 99, 192, 145, 62, 157, 208, 254, 190, 53, 69, 151, 62, 175, 45, 213, 189, 9, 45, 214, 190, 19, 58, 93, 63, 76, 59, 53, 62, 250, 178, 26, 63, 178, 83, 173, 63, 105, 42, 64, 62, 114, 11, 239, 190, 88, 185, 164, 190, 251, 205, 217, 190, 46, 198, 185, 190, 73, 19, 108, 62, 251, 246, 140, 190, 102, 112, 22, 63, 93, 134, 201, 190, 128, 204, 125, 190, 93, 35, 227, 190, 122, 77, 144, 191, 106, 149, 26, 61, 149, 166, 174, 190, 126, 132, 237, 63, 61, 125, 0, 63, 90, 55, 228, 62, 32, 242, 49, 191, 52, 178, 109, 62, 21, 53, 14, 190, 71, 210, 60, 63, 122, 254, 245, 62, 220, 192, 233, 187, 237, 251, 212, 62, 57, 74, 254, 190, 27, 149, 200, 62, 48, 118, 113, 63, 42, 3, 90, 62, 8, 74, 20, 63, 221, 175, 98, 191, 39, 161, 225, 190, 31, 79, 93, 63, 46, 18, 131, 190, 96, 225, 146, 190, 94, 149, 64, 191, 223, 164, 77, 191, 62, 158, 28, 190, 10, 237, 47, 191, 4, 255, 134, 61, 69, 79, 233, 62, 189, 89, 16, 63, 110, 237, 16, 191, 166, 148, 78, 60, 112, 159, 88, 189, 245, 189, 75, 190, 238, 62, 240, 62, 175, 18, 131, 190, 251, 104, 5, 63, 210, 37, 152, 62, 160, 78, 68, 63, 79, 187, 92, 191, 130, 251, 210, 190, 194, 204, 161, 190, 133, 9, 158, 62, 26, 179, 22, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 174, 64, 191, 202, 239, 185, 62, 168, 236, 171, 189, 217, 142, 38, 191, 156, 239, 178, 62, 228, 106, 194, 190, 30, 99, 22, 191, 184, 59, 1, 191, 251, 96, 11, 191, 3, 155, 121, 62, 149, 81, 186, 190, 220, 25, 209, 62, 110, 75, 41, 63, 196, 157, 0, 61, 159, 53, 67, 190, 10, 120, 236, 61, 127, 251, 18, 191, 154, 240, 244, 62, 92, 214, 237, 190, 46, 170, 124, 62, 190, 145, 254, 190, 196, 141, 21, 61, 174, 38, 191, 62, 69, 147, 5, 191, 247, 132, 207, 62, 249, 104, 254, 190, 49, 57, 235, 62, 119, 203, 42, 63, 22, 42, 11, 191, 130, 203, 165, 190, 251, 109, 26, 191, 1, 30, 225, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 166, 55, 191, 39, 196, 18, 190, 205, 40, 101, 62, 10, 40, 90, 62, 42, 68, 111, 190, 200, 132, 207, 189, 138, 213, 238, 189, 25, 214, 190, 60, 127, 183, 50, 190, 17, 189, 145, 189, 122, 94, 142, 191, 254, 138, 215, 188, 82, 235, 8, 189, 102, 152, 253, 190, 94, 154, 3, 190, 8, 20, 146, 190, 64, 51, 174, 189, 171, 160, 177, 62, 222, 114, 31, 190, 148, 96, 128, 62, 252, 14, 173, 190, 50, 30, 118, 61, 124, 0, 126, 190, 60, 94, 161, 187, 241, 193, 125, 61, 57, 69, 175, 189, 107, 0, 51, 62, 27, 158, 76, 62, 70, 176, 231, 61, 3, 131, 167, 190, 127, 199, 83, 61, 158, 204, 201, 189, 160, 247, 134, 59, 175, 4, 82, 62, 39, 242, 129, 62, 234, 56, 222, 190, 251, 133, 121, 61, 130, 134, 53, 62, 53, 130, 210, 62, 109, 109, 42, 189, 129, 216, 206, 189, 225, 18, 16, 190, 220, 246, 216, 62, 130, 222, 6, 62, 20, 128, 38, 60, 43, 50, 168, 62, 190, 82, 167, 62, 17, 63, 141, 62, 251, 176, 167, 190, 76, 52, 190, 61, 78, 28, 18, 191, 46, 103, 171, 190, 33, 129, 144, 62, 85, 249, 100, 190, 139, 17, 251, 61, 196, 71, 171, 190, 163, 36, 80, 189, 120, 253, 172, 62, 105, 201, 206, 189, 34, 131, 64, 62, 244, 62, 64, 62, 180, 221, 55, 191, 252, 131, 150, 190, 101, 4, 38, 190, 5, 48, 41, 63, 133, 172, 246, 189, 66, 86, 3, 190, 184, 175, 205, 61, 71, 105, 52, 61, 212, 174, 9, 62, 179, 154, 210, 61, 71, 173, 166, 190, 59, 97, 192, 61, 99, 10, 8, 188, 138, 89, 224, 62, 171, 61, 85, 190, 151, 44, 18, 188, 164, 136, 166, 62, 245, 26, 160, 190, 35, 172, 71, 61, 244, 113, 72, 189, 138, 101, 194, 190, 75, 92, 197, 189, 182, 11, 46, 190, 38, 175, 32, 61, 222, 185, 247, 61, 9, 209, 209, 61, 41, 180, 14, 191, 8, 118, 241, 59, 124, 12, 189, 188, 167, 196, 30, 190, 108, 212, 16, 57, 21, 143, 181, 61, 177, 39, 148, 59, 149, 49, 199, 190, 170, 136, 240, 59, 221, 112, 161, 191, 96, 248, 149, 189, 105, 19, 147, 190, 216, 56, 150, 62, 150, 24, 113, 62, 99, 158, 73, 190, 252, 239, 166, 190, 151, 161, 24, 62, 215, 89, 124, 62, 102, 102, 171, 62, 6, 42, 134, 191, 35, 90, 214, 61, 235, 107, 230, 190, 124, 82, 17, 191, 139, 236, 255, 190, 27, 111, 192, 189, 104, 18, 52, 62, 231, 165, 95, 189, 108, 198, 221, 59, 174, 30, 236, 62, 154, 62, 152, 190, 10, 221, 95, 62, 248, 134, 100, 190, 50, 103, 191, 61, 192, 211, 129, 62, 143, 95, 185, 190, 49, 105, 28, 62, 98, 191, 185, 61, 30, 15, 134, 189, 13, 101, 7, 190, 178, 183, 209, 62, 183, 36, 175, 61, 244, 118, 29, 190, 160, 211, 218, 187, 159, 252, 164, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 254, 176, 143, 61, 173, 224, 149, 60, 44, 175, 200, 189, 127, 172, 37, 62, 124, 152, 21, 61, 151, 111, 28, 61, 219, 59, 0, 190, 67, 154, 63, 188, 40, 142, 33, 190, 65, 123, 79, 188, 103, 154, 143, 187, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 176, 76, 9, 190, 220, 255, 42, 190, 14, 24, 250, 189, 224, 83, 111, 60, 130, 112, 19, 62, 141, 175, 20, 190, 119, 204, 255, 61, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 45, 56, 197, 190, 30, 183, 244, 61, 35, 86, 185, 189, 240, 171, 9, 62, 48, 195, 209, 189, 40, 177, 19, 189, 232, 14, 144, 189, 244, 104, 191, 60, 72, 18, 137, 61, 203, 33, 38, 62, 52, 94, 71, 191, 237, 95, 111, 57, 117, 93, 43, 191, 60, 30, 185, 190, 38, 194, 120, 60, 140, 56, 172, 61, 38, 176, 24, 190, 148, 130, 5, 188, 112, 79, 57, 190, 65, 146, 167, 62, 236, 4, 134, 190, 6, 15, 135, 61, 46, 63, 196, 190, 54, 17, 134, 187, 217, 68, 135, 189, 64, 61, 34, 61, 215, 87, 20, 189, 72, 122, 166, 61, 134, 110, 90, 62, 55, 12, 13, 190, 208, 136, 57, 62, 157, 79, 190, 61, 213, 107, 19, 63, 203, 169, 182, 190, 109, 190, 105, 62, 235, 115, 198, 190, 50, 248, 220, 189, 32, 17, 20, 62, 228, 87, 57, 62, 71, 228, 162, 189, 199, 77, 212, 189, 126, 206, 59, 189, 222, 189, 129, 62, 194, 178, 82, 190, 196, 115, 95, 190, 41, 91, 143, 62, 165, 113, 169, 190, 53, 196, 202, 189, 30, 122, 150, 190, 67, 240, 125, 62, 58, 149, 182, 61, 224, 106, 96, 62, 76, 23, 206, 61, 67, 140, 48, 190, 249, 211, 121, 189, 196, 6, 83, 62, 145, 23, 199, 188, 242, 31, 98, 190, 20, 192, 161, 190, 139, 49, 30, 187, 92, 123, 142, 61, 43, 183, 140, 61, 46, 219, 51, 62, 0, 70, 35, 190, 29, 237, 169, 191, 170, 110, 43, 62, 178, 135, 5, 190, 98, 94, 158, 189, 224, 90, 50, 62, 243, 72, 105, 190, 196, 238, 239, 189, 182, 27, 155, 190, 166, 180, 147, 189, 56, 218, 152, 62, 155, 164, 86, 191, 133, 53, 158, 190, 166, 158, 237, 61, 229, 151, 195, 189, 55, 121, 8, 191, 42, 36, 246, 190, 80, 234, 204, 189, 243, 224, 42, 187, 28, 217, 174, 62, 24, 136, 162, 61, 234, 28, 88, 60, 147, 66, 224, 189, 73, 46, 182, 61, 39, 159, 93, 62, 22, 142, 112, 62, 73, 127, 2, 191, 174, 64, 116, 62, 22, 165, 41, 62, 131, 145, 1, 190, 46, 180, 160, 189, 140, 149, 211, 61, 245, 253, 46, 61, 97, 18, 63, 191, 214, 113, 86, 62, 219, 155, 243, 190, 173, 187, 198, 61, 216, 129, 31, 189, 239, 32, 1, 61, 123, 193, 138, 189, 28, 29, 198, 189, 249, 242, 194, 189, 195, 201, 156, 189, 135, 211, 43, 191, 193, 208, 64, 189, 178, 41, 146, 189, 232, 155, 186, 190, 167, 12, 224, 61, 176, 16, 30, 62, 176, 126, 38, 62, 15, 70, 21, 62, 222, 103, 165, 190, 193, 171, 3, 189, 178, 161, 2, 191, 46, 130, 78, 61, 27, 237, 55, 190, 190, 104, 33, 190, 241, 183, 21, 189, 187, 220, 34, 62, 140, 119, 218, 61, 68, 227, 145, 62, 47, 115, 173, 61, 50, 78, 126, 189, 83, 10, 206, 189, 10, 115, 181, 61, 174, 119, 185, 62, 245, 180, 196, 188, 240, 255, 204, 61, 143, 138, 47, 191, 88, 220, 156, 59, 121, 38, 202, 60, 114, 167, 117, 189, 38, 247, 124, 190, 204, 252, 127, 190, 208, 248, 17, 191, 218, 63, 249, 62, 33, 53, 7, 62, 187, 255, 191, 62, 252, 111, 66, 62, 82, 239, 15, 62, 221, 204, 30, 62, 72, 232, 195, 190, 150, 119, 159, 61, 120, 148, 249, 189, 237, 225, 166, 190, 103, 27, 246, 189, 145, 109, 14, 61, 108, 67, 151, 62, 148, 27, 179, 189, 49, 142, 108, 190, 162, 133, 42, 62, 212, 58, 249, 189, 67, 53, 3, 189, 184, 25, 10, 189, 72, 219, 83, 190, 158, 111, 65, 190, 164, 204, 34, 191, 41, 189, 116, 191, 184, 252, 115, 190, 123, 167, 170, 191, 248, 128, 48, 60, 18, 199, 178, 189, 117, 14, 238, 189, 212, 233, 118, 190, 2, 153, 60, 60, 128, 18, 159, 62, 213, 90, 73, 62, 139, 57, 147, 191, 236, 204, 137, 190, 34, 218, 141, 60, 36, 48, 32, 191, 227, 47, 111, 191, 154, 64, 126, 61, 198, 136, 13, 61, 242, 124, 127, 62, 85, 152, 241, 61, 183, 168, 108, 62, 47, 172, 47, 190, 233, 11, 78, 62, 124, 198, 27, 189, 169, 56, 70, 62, 1, 223, 95, 61, 31, 171, 127, 191, 154, 249, 10, 62, 251, 133, 13, 60, 71, 252, 151, 189, 32, 188, 91, 61, 34, 76, 174, 61, 230, 72, 108, 62, 17, 119, 69, 191, 96, 150, 234, 62, 82, 81, 59, 191, 7, 221, 168, 61, 70, 13, 224, 61, 246, 66, 23, 189, 231, 247, 146, 189, 48, 119, 129, 62, 128, 124, 25, 61, 79, 134, 240, 190, 120, 2, 53, 191, 53, 140, 150, 189, 140, 111, 182, 62, 29, 237, 204, 188, 31, 34, 168, 191, 138, 104, 95, 190, 249, 216, 112, 190, 53, 94, 26, 190, 24, 4, 210, 61, 20, 163, 58, 190, 130, 196, 53, 190, 24, 154, 16, 62, 84, 40, 218, 61, 198, 210, 207, 190, 39, 23, 190, 188, 211, 193, 136, 191, 171, 74, 145, 62, 88, 191, 91, 191, 70, 144, 218, 189, 25, 31, 160, 189, 190, 213, 230, 189, 236, 31, 111, 62, 29, 117, 151, 191, 111, 27, 254, 189, 185, 8, 237, 190, 31, 235, 49, 62, 227, 186, 216, 189, 225, 179, 27, 61, 220, 221, 35, 61, 170, 95, 113, 190, 161, 66, 67, 189, 189, 81, 130, 62, 53, 74, 254, 190, 67, 213, 99, 190, 39, 147, 2, 190, 1, 138, 196, 61, 117, 199, 43, 62, 161, 174, 189, 190, 162, 173, 99, 191, 51, 226, 119, 62, 108, 103, 155, 189, 225, 197, 171, 61, 215, 231, 87, 61, 39, 179, 189, 190, 204, 14, 164, 61, 82, 134, 90, 190, 176, 18, 114, 62, 164, 19, 195, 62, 16, 221, 165, 61, 48, 133, 63, 62, 121, 100, 69, 190, 96, 102, 100, 190, 41, 87, 165, 190, 80, 203, 89, 189, 173, 157, 167, 191, 26, 192, 61, 62, 212, 93, 199, 189, 120, 106, 75, 62, 117, 144, 214, 61, 172, 157, 114, 61, 104, 111, 138, 190, 88, 109, 128, 62, 28, 32, 155, 62, 122, 67, 139, 62, 166, 206, 122, 191, 238, 133, 73, 190, 129, 57, 235, 190, 68, 11, 33, 191, 44, 235, 224, 190, 98, 101, 167, 190, 208, 216, 185, 62, 201, 244, 22, 61, 55, 116, 0, 189, 190, 102, 178, 61, 72, 13, 45, 190, 61, 199, 159, 61, 176, 27, 186, 189, 25, 31, 149, 62, 120, 83, 94, 62, 160, 184, 49, 190, 227, 175, 128, 62, 85, 219, 137, 62, 112, 23, 70, 190, 108, 67, 220, 60, 37, 52, 220, 62, 177, 61, 141, 185, 129, 248, 46, 191, 161, 179, 31, 62, 100, 135, 8, 189, 48, 151, 247, 188, 198, 161, 187, 60, 115, 97, 69, 190, 177, 237, 138, 190, 245, 219, 11, 188, 80, 35, 217, 61, 207, 118, 38, 62, 197, 107, 219, 61, 99, 80, 189, 61, 100, 162, 116, 188, 71, 177, 20, 62, 171, 45, 193, 190, 229, 30, 234, 189, 190, 191, 107, 61, 56, 122, 230, 61, 56, 9, 60, 191, 79, 245, 141, 61, 38, 55, 135, 61, 23, 7, 216, 60, 11, 107, 134, 189, 22, 166, 23, 190, 253, 122, 126, 62, 121, 186, 132, 189, 94, 55, 4, 190, 131, 193, 133, 61, 248, 20, 244, 190, 55, 1, 98, 190, 130, 45, 220, 60, 79, 153, 103, 190, 171, 146, 47, 189, 147, 134, 214, 61, 140, 73, 133, 61, 210, 186, 143, 189, 112, 225, 93, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 136, 82, 180, 189, 61, 60, 41, 190, 3, 77, 182, 189, 124, 253, 152, 189, 204, 215, 28, 190, 155, 191, 210, 60, 15, 152, 2, 62, 160, 71, 36, 190, 36, 185, 17, 190, 151, 58, 38, 190, 26, 62, 32, 190, 28, 248, 149, 189, 121, 201, 104, 189, 223, 186, 200, 189, 90, 164, 199, 189, 125, 108, 231, 61, 65, 231, 249, 59, 38, 24, 53, 190, 199, 102, 42, 189, 19, 129, 23, 62, 142, 37, 44, 189, 242, 195, 128, 60, 104, 227, 161, 189, 137, 13, 121, 190, 133, 246, 201, 188, 132, 177, 151, 190, 73, 102, 46, 190, 110, 201, 179, 189, 208, 125, 37, 191, 206, 232, 126, 190, 28, 172, 127, 190, 249, 235, 140, 189, 144, 107, 63, 190, 46, 93, 240, 61, 110, 114, 33, 62, 68, 70, 130, 190, 125, 57, 72, 190, 164, 244, 0, 191, 70, 149, 159, 61, 235, 192, 49, 62, 143, 38, 66, 191, 160, 5, 188, 190, 130, 241, 122, 190, 172, 239, 168, 190, 220, 38, 54, 190, 202, 163, 150, 190, 24, 169, 53, 190, 111, 110, 42, 189, 156, 164, 180, 62, 97, 122, 167, 190, 255, 16, 108, 191, 200, 206, 162, 191, 160, 93, 23, 189, 94, 51, 92, 61, 156, 51, 207, 189, 167, 218, 213, 61, 67, 135, 134, 190, 130, 224, 15, 191, 96, 140, 146, 60, 0, 157, 246, 189, 101, 224, 7, 190, 253, 41, 102, 62, 53, 160, 247, 190, 233, 185, 180, 190, 127, 119, 237, 189, 166, 9, 230, 62, 113, 243, 113, 62, 56, 112, 208, 189, 109, 190, 157, 190, 77, 210, 64, 62, 10, 174, 24, 189, 204, 89, 61, 191, 101, 202, 8, 60, 226, 183, 205, 190, 13, 136, 52, 62, 112, 101, 187, 60, 3, 63, 136, 61, 104, 157, 126, 190, 219, 3, 62, 191, 17, 235, 183, 190, 166, 137, 199, 189, 154, 119, 27, 191, 238, 23, 52, 190, 207, 63, 156, 190, 243, 27, 73, 190, 77, 211, 254, 186, 47, 240, 178, 190, 58, 186, 50, 62, 114, 103, 107, 62, 137, 106, 200, 190, 230, 189, 203, 189, 6, 86, 50, 62, 98, 219, 253, 190, 117, 164, 142, 189, 252, 164, 219, 190, 87, 8, 138, 189, 65, 188, 156, 62, 214, 168, 65, 62, 53, 83, 150, 62, 96, 34, 213, 62, 122, 21, 144, 62, 226, 34, 74, 62, 246, 44, 149, 190, 30, 240, 90, 62, 42, 110, 139, 191, 50, 245, 178, 189, 145, 255, 152, 61, 132, 254, 171, 189, 14, 110, 188, 188, 53, 116, 165, 190, 75, 9, 232, 188, 34, 223, 147, 62, 133, 43, 188, 189, 254, 73, 7, 62, 153, 186, 213, 190, 214, 72, 109, 191, 222, 111, 103, 190, 108, 131, 208, 190, 204, 63, 23, 189, 168, 10, 24, 190, 161, 175, 26, 190, 160, 237, 148, 61, 156, 249, 137, 189, 109, 169, 182, 189, 156, 43, 179, 188, 228, 4, 186, 61, 115, 245, 166, 60, 35, 28, 23, 62, 100, 224, 192, 189, 18, 235, 7, 62, 129, 68, 25, 61, 105, 231, 243, 189, 53, 190, 203, 189, 34, 170, 207, 189, 86, 82, 13, 190, 100, 96, 55, 61, 31, 14, 74, 61, 249, 89, 166, 188, 96, 88, 255, 189, 61, 134, 164, 187, 109, 165, 131, 189, 55, 110, 56, 61, 61, 155, 101, 189, 229, 205, 200, 189, 191, 77, 105, 189, 56, 155, 189, 60, 27, 131, 253, 189, 46, 214, 25, 190, 117, 34, 217, 189, 204, 92, 13, 61, 150, 159, 52, 61, 126, 225, 92, 189, 2, 126, 136, 62, 87, 9, 35, 191, 246, 164, 169, 190, 99, 250, 25, 60, 239, 38, 49, 191, 35, 114, 221, 60, 58, 26, 233, 60, 226, 26, 32, 190, 42, 205, 150, 60, 194, 145, 21, 62, 199, 7, 179, 61, 160, 45, 140, 60, 103, 41, 30, 61, 142, 75, 41, 190, 93, 47, 72, 190, 162, 163, 214, 62, 3, 254, 56, 191, 9, 103, 137, 190, 165, 175, 231, 189, 80, 17, 168, 189, 172, 239, 1, 190, 55, 243, 109, 188, 160, 164, 76, 190, 67, 144, 178, 62, 103, 27, 153, 61, 78, 194, 144, 190, 159, 162, 196, 190, 105, 185, 12, 191, 93, 36, 26, 190, 42, 178, 144, 190, 118, 137, 131, 190, 153, 5, 42, 189, 245, 69, 143, 61, 46, 38, 149, 190, 52, 200, 23, 61, 130, 30, 131, 190, 136, 76, 27, 188, 104, 81, 81, 190, 236, 224, 211, 61, 78, 233, 227, 61, 115, 23, 126, 62, 76, 86, 108, 62, 189, 13, 234, 62, 93, 120, 254, 61, 212, 30, 211, 61, 45, 151, 55, 62, 55, 33, 84, 190, 72, 20, 161, 62, 96, 159, 82, 190, 223, 116, 102, 190, 91, 136, 193, 189, 106, 230, 15, 61, 183, 168, 48, 189, 42, 107, 12, 60, 165, 12, 1, 62, 200, 45, 198, 61, 103, 103, 184, 61, 241, 137, 161, 61, 31, 245, 205, 188, 186, 19, 132, 190, 179, 54, 110, 60, 101, 151, 25, 190, 175, 153, 184, 190, 32, 10, 159, 62, 244, 25, 15, 61, 104, 105, 194, 188, 136, 47, 134, 62, 91, 31, 149, 62, 184, 21, 60, 189, 169, 43, 197, 189, 150, 81, 178, 189, 243, 178, 11, 61, 124, 35, 155, 62, 182, 62, 25, 62, 171, 52, 114, 62, 71, 190, 156, 62, 125, 175, 170, 62, 138, 30, 144, 61, 123, 83, 56, 190, 192, 245, 79, 62, 249, 8, 228, 189, 75, 242, 57, 62, 166, 228, 11, 58, 36, 167, 213, 60, 148, 153, 133, 62, 152, 160, 142, 190, 18, 72, 136, 61, 212, 185, 171, 61, 208, 37, 97, 62, 141, 114, 165, 62, 45, 183, 57, 62, 121, 19, 16, 62, 133, 65, 190, 189, 108, 1, 160, 61, 148, 110, 221, 189, 233, 180, 187, 187, 226, 231, 52, 190, 105, 149, 126, 60, 87, 124, 49, 189, 165, 58, 145, 61, 211, 213, 74, 190, 59, 237, 83, 187, 203, 19, 14, 189, 50, 66, 107, 189, 69, 151, 221, 61, 233, 22, 70, 61, 106, 77, 1, 189, 143, 206, 161, 189, 210, 118, 238, 189, 92, 157, 128, 189, 230, 225, 19, 62, 216, 29, 241, 58, 138, 91, 25, 189, 173, 137, 19, 190, 82, 215, 181, 189, 128, 80, 20, 62, 68, 39, 243, 189, 23, 17, 5, 189, 18, 183, 2, 190, 220, 166, 41, 62, 230, 213, 207, 61, 139, 81, 184, 189, 40, 44, 178, 61, 86, 33, 211, 189, 132, 155, 206, 189, 202, 202, 62, 61, 4, 211, 233, 188, 166, 249, 110, 62, 114, 239, 159, 190, 161, 71, 91, 190, 42, 58, 184, 188, 132, 100, 180, 62, 136, 81, 146, 61, 25, 185, 244, 189, 193, 134, 189, 61, 109, 225, 134, 190, 122, 96, 57, 63, 155, 54, 112, 62, 19, 252, 118, 62, 205, 66, 17, 63, 67, 42, 64, 60, 196, 174, 156, 62, 7, 165, 165, 190, 216, 63, 131, 61, 209, 149, 163, 191, 218, 73, 168, 58, 75, 102, 44, 189, 80, 49, 240, 189, 40, 32, 7, 188, 9, 6, 204, 190, 47, 199, 6, 62, 109, 78, 239, 61, 34, 156, 184, 189, 129, 189, 18, 190, 26, 41, 218, 61, 124, 121, 105, 191, 238, 0, 187, 190, 97, 137, 168, 190, 24, 41, 144, 191, 156, 192, 112, 62, 167, 87, 66, 191, 25, 195, 6, 62, 177, 75, 244, 61, 207, 235, 151, 190, 109, 140, 16, 190, 44, 82, 147, 190, 30, 196, 177, 190, 106, 37, 243, 60, 104, 109, 3, 191, 230, 153, 182, 190, 137, 29, 211, 62, 36, 81, 5, 189, 42, 180, 202, 191, 228, 162, 205, 190, 139, 192, 45, 189, 172, 141, 52, 61, 92, 255, 60, 61, 115, 182, 1, 62, 226, 185, 117, 190, 218, 69, 33, 62, 223, 21, 139, 62, 218, 100, 72, 189, 113, 182, 203, 188, 94, 211, 199, 191, 110, 44, 170, 61, 95, 24, 27, 189, 51, 235, 36, 190, 109, 84, 232, 61, 185, 101, 2, 61, 30, 210, 53, 62, 10, 173, 79, 190, 220, 87, 22, 190, 52, 117, 22, 62, 215, 233, 14, 190, 211, 67, 138, 61, 61, 78, 70, 62, 168, 175, 165, 189, 126, 2, 3, 190, 74, 113, 147, 190, 155, 176, 220, 61, 217, 238, 162, 189, 51, 85, 31, 190, 50, 19, 146, 190, 206, 91, 215, 61, 48, 159, 95, 189, 254, 41, 149, 190, 164, 112, 76, 189, 30, 119, 98, 62, 220, 201, 161, 190, 98, 6, 229, 61, 201, 74, 201, 190, 25, 236, 136, 60, 57, 191, 122, 189, 207, 37, 23, 62, 205, 248, 123, 62, 7, 133, 112, 61, 132, 194, 22, 61, 61, 61, 166, 62, 16, 42, 31, 62, 49, 137, 33, 191, 161, 199, 168, 60, 8, 253, 103, 189, 87, 145, 177, 189, 142, 72, 196, 61, 255, 169, 44, 189, 181, 96, 103, 60, 250, 217, 205, 188, 78, 139, 143, 189, 236, 59, 66, 189, 46, 91, 1, 188, 93, 79, 232, 189, 250, 113, 230, 189, 202, 107, 228, 60, 152, 126, 10, 190, 19, 143, 190, 189, 183, 21, 77, 190, 43, 3, 250, 187, 39, 133, 99, 189, 121, 245, 21, 62, 144, 255, 25, 190, 89, 185, 232, 189, 117, 206, 66, 190, 140, 202, 5, 62, 167, 97, 216, 189, 141, 210, 251, 61, 175, 11, 205, 61, 252, 199, 19, 62, 161, 113, 218, 61, 123, 77, 250, 61, 112, 100, 15, 190, 183, 175, 194, 189, 150, 78, 44, 61, 185, 177, 58, 189, 28, 164, 134, 61, 125, 162, 41, 190, 109, 242, 224, 189, 160, 252, 155, 61, 222, 55, 175, 62, 116, 179, 120, 61, 199, 124, 251, 189, 98, 118, 31, 190, 48, 63, 49, 62, 255, 48, 199, 60, 82, 17, 140, 62, 240, 86, 172, 191, 129, 125, 188, 190, 14, 149, 169, 189, 2, 241, 55, 191, 151, 120, 159, 189, 199, 254, 35, 190, 23, 171, 192, 62, 134, 139, 30, 61, 27, 72, 108, 189, 190, 163, 154, 62, 216, 85, 219, 190, 38, 216, 158, 189, 92, 216, 164, 191, 105, 48, 48, 62, 48, 36, 28, 62, 16, 240, 100, 190, 163, 111, 197, 187, 172, 96, 234, 60, 196, 62, 177, 189, 57, 20, 38, 62, 166, 87, 224, 62, 221, 167, 182, 60, 152, 16, 173, 189, 217, 189, 224, 188, 62, 234, 72, 62, 62, 167, 97, 189, 154, 71, 113, 62, 233, 237, 132, 62, 161, 175, 151, 62, 47, 5, 136, 190, 86, 95, 30, 191, 246, 15, 135, 189, 139, 239, 222, 62, 163, 212, 205, 61, 16, 153, 174, 189, 78, 148, 102, 61, 130, 107, 60, 190, 111, 37, 11, 190, 39, 232, 115, 191, 142, 88, 51, 190, 143, 8, 193, 189, 72, 175, 77, 62, 55, 29, 120, 62, 3, 248, 39, 191, 138, 231, 40, 62, 253, 35, 182, 190, 100, 125, 65, 190, 210, 68, 231, 188, 202, 89, 28, 62, 160, 112, 58, 62, 10, 210, 238, 61, 146, 14, 197, 189, 143, 136, 17, 190, 61, 77, 92, 62, 184, 207, 133, 187, 216, 77, 90, 62, 221, 181, 106, 62, 56, 222, 118, 190, 40, 161, 130, 61, 178, 141, 65, 190, 172, 142, 165, 190, 75, 40, 147, 189, 171, 93, 203, 61, 183, 84, 114, 190, 184, 188, 50, 62, 119, 250, 105, 61, 239, 18, 13, 189, 137, 223, 188, 60, 97, 19, 198, 62, 111, 191, 177, 62, 21, 188, 96, 62, 232, 34, 16, 189, 231, 225, 183, 61, 121, 133, 147, 191, 163, 185, 46, 62, 175, 16, 9, 62, 215, 49, 156, 62, 244, 1, 225, 189, 181, 148, 129, 190, 90, 40, 105, 62, 222, 183, 180, 60, 196, 70, 175, 190, 76, 21, 182, 190, 71, 253, 34, 62, 178, 18, 49, 62, 114, 202, 108, 190, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 2, 130, 62, 130, 43, 90, 62, 11, 215, 25, 190, 103, 110, 233, 61, 112, 119, 14, 190, 86, 138, 24, 62, 167, 86, 175, 190, 189, 166, 232, 61, 43, 81, 249, 61, 120, 239, 94, 62, 242, 21, 3, 62, 189, 207, 187, 61, 105, 67, 92, 62, 20, 57, 47, 60, 120, 241, 196, 61, 107, 47, 13, 62, 56, 243, 177, 189, 68, 51, 2, 189, 101, 199, 159, 62, 172, 168, 6, 190, 162, 177, 100, 62, 219, 229, 190, 62, 49, 231, 197, 62, 140, 177, 242, 189, 240, 24, 66, 62, 247, 57, 172, 62, 46, 69, 163, 61, 142, 160, 184, 189, 115, 138, 3, 188, 167, 226, 241, 61, 156, 145, 125, 190, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 99, 1, 63, 222, 220, 38, 191, 118, 253, 62, 62, 152, 225, 48, 63, 5, 66, 33, 61, 27, 135, 59, 62, 46, 134, 188, 62, 45, 145, 238, 62, 225, 39, 173, 62, 214, 130, 54, 63, 61, 100, 150, 63, 234, 5, 123, 63, 144, 16, 77, 62, 250, 168, 246, 62, 22, 100, 190, 189, 54, 203, 253, 189, 10, 66, 106, 191, 122, 197, 224, 190, 1, 185, 45, 191, 82, 96, 225, 189, 101, 116, 249, 190, 180, 196, 65, 190, 49, 11, 120, 190, 45, 198, 143, 189, 178, 130, 63, 191, 240, 43, 108, 63, 184, 1, 104, 62, 227, 117, 136, 189, 124, 212, 79, 191, 66, 14, 87, 190, 129, 107, 206, 62, 212, 96, 26, 189, 227, 111, 167, 62, 222, 39, 196, 189, 55, 53, 135, 62, 163, 228, 249, 187, 20, 229, 19, 190, 75, 206, 61, 62, 55, 77, 220, 61, 124, 223, 144, 60, 121, 89, 200, 189, 59, 166, 22, 62, 57, 89, 157, 62, 4, 154, 132, 62, 161, 169, 187, 190, 39, 113, 120, 60, 46, 155, 81, 190, 64, 133, 232, 189, 18, 70, 140, 62, 143, 70, 66, 62, 155, 249, 238, 60, 243, 97, 226, 187, 206, 66, 148, 61, 131, 26, 135, 190, 82, 58, 86, 190, 68, 22, 142, 188, 171, 230, 137, 61, 40, 203, 152, 61, 167, 190, 68, 190, 75, 151, 35, 62, 253, 145, 3, 61, 240, 14, 21, 189, 124, 4, 207, 60, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 253, 135, 60, 38, 46, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {57, 102, 199, 190, 235, 101, 31, 191, 136, 48, 28, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 59, 205, 191, 48, 112, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}