// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 29, 56, 63, 211, 49, 216, 62, 216, 108, 137, 62, 178, 246, 140, 62, 111, 118, 227, 62, 116, 231, 114, 190, 45, 72, 200, 190, 221, 48, 199, 191, 186, 190, 155, 190, 85, 65, 151, 190, 196, 70, 26, 191, 177, 255, 141, 62, 64, 162, 138, 61, 239, 186, 6, 63, 250, 118, 240, 62, 140, 198, 242, 62, 187, 151, 193, 190, 181, 109, 6, 63, 88, 187, 107, 190, 39, 41, 122, 62, 198, 179, 9, 63, 169, 26, 210, 190, 181, 183, 195, 61, 55, 104, 120, 190, 199, 208, 160, 62, 232, 179, 42, 63, 167, 172, 0, 191, 206, 178, 76, 63, 51, 131, 44, 191, 191, 113, 64, 190, 183, 133, 103, 63, 124, 62, 119, 63, 23, 55, 152, 62, 230, 171, 254, 190, 150, 201, 171, 62, 173, 17, 212, 189, 152, 51, 223, 190, 16, 203, 85, 63, 181, 19, 43, 62, 6, 167, 30, 63, 65, 193, 172, 63, 101, 192, 68, 62, 44, 156, 235, 190, 3, 134, 133, 190, 94, 217, 211, 190, 75, 3, 186, 190, 168, 132, 156, 62, 11, 62, 132, 190, 99, 91, 19, 63, 29, 41, 190, 190, 216, 190, 118, 190, 171, 160, 240, 190, 186, 2, 156, 191, 219, 135, 187, 61, 226, 97, 186, 190, 106, 204, 249, 63, 71, 59, 247, 62, 248, 244, 232, 62, 200, 62, 49, 191, 186, 146, 103, 62, 30, 158, 60, 190, 211, 128, 62, 63, 210, 38, 238, 62, 112, 215, 97, 188, 18, 57, 189, 62, 67, 147, 252, 190, 123, 250, 190, 62, 157, 224, 116, 63, 7, 140, 98, 62, 155, 144, 17, 63, 241, 239, 99, 191, 62, 186, 226, 190, 6, 175, 93, 63, 168, 8, 127, 190, 144, 30, 150, 190, 142, 86, 68, 191, 57, 240, 74, 191, 7, 232, 24, 190, 100, 224, 29, 191, 83, 144, 110, 61, 181, 205, 232, 62, 114, 131, 51, 63, 57, 192, 18, 191, 82, 205, 216, 188, 113, 224, 1, 189, 250, 138, 30, 190, 46, 209, 233, 62, 171, 33, 105, 190, 250, 47, 51, 63, 86, 173, 144, 62, 66, 180, 65, 63, 197, 177, 94, 191, 145, 217, 210, 190, 243, 167, 116, 190, 104, 114, 176, 62, 7, 148, 23, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 123, 68, 191, 138, 134, 169, 62, 36, 138, 74, 190, 218, 162, 48, 191, 204, 78, 171, 62, 228, 10, 199, 190, 237, 166, 26, 191, 63, 41, 22, 191, 252, 192, 8, 191, 199, 90, 129, 62, 41, 238, 194, 190, 106, 8, 219, 62, 242, 135, 47, 63, 97, 185, 66, 61, 93, 183, 83, 190, 148, 56, 2, 62, 62, 150, 22, 191, 2, 123, 211, 62, 202, 130, 7, 191, 145, 107, 130, 62, 1, 60, 13, 191, 180, 82, 198, 60, 21, 36, 212, 62, 197, 17, 5, 191, 197, 40, 207, 62, 254, 26, 11, 191, 199, 219, 248, 62, 28, 195, 37, 63, 250, 198, 23, 191, 105, 9, 131, 190, 76, 244, 25, 191, 16, 180, 141, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 25, 59, 191, 118, 186, 47, 190, 87, 238, 99, 62, 189, 0, 66, 62, 140, 109, 122, 190, 48, 175, 195, 189, 200, 59, 209, 189, 166, 22, 22, 189, 94, 125, 75, 190, 161, 7, 59, 189, 224, 99, 150, 191, 143, 112, 83, 189, 247, 153, 84, 189, 223, 14, 21, 191, 182, 57, 7, 190, 158, 32, 155, 190, 139, 89, 129, 189, 17, 180, 185, 62, 118, 236, 127, 190, 81, 204, 120, 62, 107, 223, 171, 190, 128, 12, 42, 61, 76, 131, 133, 190, 40, 5, 224, 60, 185, 177, 133, 61, 247, 178, 191, 189, 157, 222, 36, 62, 116, 220, 94, 62, 119, 22, 254, 61, 61, 128, 192, 190, 70, 116, 170, 61, 75, 174, 206, 189, 201, 228, 211, 60, 69, 161, 82, 62, 64, 80, 121, 62, 195, 204, 189, 190, 78, 245, 144, 61, 196, 165, 85, 62, 19, 198, 221, 62, 159, 22, 117, 189, 143, 66, 193, 189, 85, 103, 16, 190, 40, 84, 203, 62, 32, 163, 249, 61, 119, 217, 8, 188, 177, 19, 169, 62, 116, 34, 160, 62, 199, 176, 137, 62, 68, 70, 141, 190, 211, 234, 4, 62, 143, 70, 38, 191, 161, 115, 163, 190, 251, 12, 140, 62, 0, 84, 91, 190, 69, 10, 3, 62, 226, 208, 169, 190, 133, 160, 82, 189, 74, 9, 188, 62, 140, 30, 134, 189, 46, 77, 76, 62, 30, 102, 100, 62, 121, 190, 59, 191, 134, 113, 145, 190, 229, 39, 15, 190, 112, 72, 40, 63, 60, 220, 244, 189, 152, 229, 255, 189, 198, 154, 20, 62, 50, 49, 80, 61, 139, 191, 20, 62, 44, 43, 251, 61, 191, 111, 146, 190, 96, 25, 47, 62, 82, 243, 175, 189, 189, 65, 212, 62, 179, 100, 235, 189, 117, 244, 104, 60, 101, 16, 156, 62, 30, 175, 119, 189, 92, 228, 62, 62, 103, 149, 224, 189, 117, 165, 177, 190, 144, 29, 157, 189, 58, 41, 65, 190, 178, 71, 120, 61, 215, 124, 39, 62, 22, 187, 182, 61, 59, 230, 23, 191, 53, 211, 218, 188, 141, 165, 180, 188, 90, 170, 7, 190, 31, 6, 156, 189, 39, 250, 228, 61, 9, 163, 219, 60, 213, 123, 229, 190, 216, 139, 215, 60, 200, 239, 163, 191, 244, 91, 61, 189, 168, 122, 148, 190, 116, 190, 137, 62, 56, 187, 132, 62, 11, 71, 47, 190, 105, 146, 161, 190, 127, 14, 45, 62, 188, 205, 136, 62, 211, 12, 179, 62, 110, 107, 121, 191, 161, 160, 1, 62, 37, 60, 211, 190, 4, 98, 10, 191, 223, 66, 241, 190, 102, 153, 145, 189, 104, 198, 26, 62, 71, 195, 177, 189, 60, 63, 62, 189, 81, 53, 241, 62, 74, 62, 153, 190, 61, 12, 116, 62, 102, 83, 69, 190, 35, 78, 195, 61, 158, 225, 137, 62, 44, 235, 191, 190, 188, 89, 19, 62, 195, 210, 219, 61, 6, 247, 104, 189, 244, 74, 49, 190, 38, 44, 208, 62, 148, 159, 178, 61, 244, 118, 29, 190, 160, 211, 218, 187, 159, 252, 164, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 254, 176, 143, 61, 173, 224, 149, 60, 44, 175, 200, 189, 127, 172, 37, 62, 124, 152, 21, 61, 151, 111, 28, 61, 219, 59, 0, 190, 67, 154, 63, 188, 40, 142, 33, 190, 65, 123, 79, 188, 103, 154, 143, 187, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 176, 76, 9, 190, 220, 255, 42, 190, 14, 24, 250, 189, 224, 83, 111, 60, 130, 112, 19, 62, 141, 175, 20, 190, 119, 204, 255, 61, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 156, 97, 207, 190, 108, 193, 2, 62, 117, 189, 210, 189, 223, 171, 10, 62, 217, 91, 192, 189, 231, 130, 106, 187, 13, 62, 204, 188, 10, 200, 40, 61, 35, 241, 183, 61, 78, 0, 48, 62, 125, 165, 88, 191, 160, 103, 132, 60, 220, 76, 60, 191, 178, 98, 8, 191, 51, 211, 41, 61, 20, 249, 220, 61, 97, 108, 21, 190, 53, 172, 255, 187, 147, 79, 133, 190, 107, 230, 173, 62, 26, 202, 98, 190, 76, 3, 170, 61, 186, 136, 228, 190, 186, 176, 155, 60, 73, 103, 130, 189, 207, 190, 149, 60, 238, 69, 33, 189, 173, 220, 168, 61, 238, 177, 126, 62, 77, 139, 35, 190, 143, 1, 76, 62, 110, 12, 226, 61, 222, 207, 10, 63, 81, 71, 220, 190, 224, 139, 173, 62, 84, 193, 207, 190, 73, 63, 255, 189, 237, 227, 198, 61, 136, 2, 68, 62, 203, 44, 136, 189, 49, 3, 201, 189, 64, 27, 28, 189, 115, 173, 112, 62, 178, 235, 141, 189, 5, 204, 64, 190, 83, 37, 145, 62, 235, 33, 86, 190, 54, 63, 186, 59, 227, 152, 229, 190, 63, 227, 166, 62, 177, 47, 8, 62, 178, 223, 43, 62, 37, 37, 252, 61, 76, 205, 69, 190, 43, 22, 132, 189, 251, 184, 125, 62, 37, 165, 120, 187, 45, 40, 88, 188, 109, 197, 164, 190, 14, 28, 54, 189, 14, 48, 87, 61, 7, 210, 221, 61, 26, 2, 65, 62, 159, 154, 44, 190, 118, 38, 175, 191, 182, 42, 41, 62, 20, 187, 29, 190, 55, 225, 217, 189, 28, 65, 55, 62, 135, 131, 94, 190, 228, 7, 233, 189, 9, 238, 173, 190, 253, 158, 51, 189, 229, 91, 151, 62, 84, 74, 79, 191, 174, 84, 157, 190, 85, 54, 8, 62, 84, 97, 149, 189, 202, 45, 246, 190, 49, 30, 228, 190, 135, 156, 10, 190, 233, 15, 10, 189, 98, 51, 188, 62, 185, 202, 138, 61, 163, 231, 179, 60, 224, 1, 197, 189, 247, 176, 216, 61, 141, 187, 88, 62, 226, 123, 102, 62, 78, 39, 248, 190, 165, 29, 109, 62, 198, 52, 34, 62, 117, 73, 2, 190, 248, 237, 165, 189, 181, 233, 192, 61, 145, 44, 48, 61, 132, 153, 63, 191, 17, 251, 82, 62, 14, 189, 35, 191, 171, 146, 132, 61, 254, 55, 142, 188, 95, 82, 126, 61, 234, 162, 111, 189, 74, 189, 49, 189, 177, 147, 178, 189, 105, 129, 112, 189, 56, 100, 35, 191, 28, 188, 8, 189, 170, 210, 221, 189, 88, 44, 6, 191, 207, 203, 33, 62, 253, 129, 55, 62, 250, 142, 15, 62, 229, 120, 220, 61, 47, 197, 231, 190, 98, 206, 69, 188, 214, 225, 4, 191, 28, 130, 119, 61, 17, 118, 76, 190, 116, 133, 18, 190, 22, 253, 2, 189, 154, 110, 93, 61, 66, 174, 177, 61, 24, 153, 154, 62, 212, 124, 192, 61, 226, 210, 3, 190, 40, 254, 205, 189, 253, 72, 185, 61, 103, 218, 195, 62, 141, 158, 83, 189, 50, 7, 1, 62, 148, 254, 51, 191, 61, 196, 228, 187, 158, 92, 104, 59, 167, 186, 37, 190, 160, 63, 144, 190, 156, 211, 131, 190, 210, 110, 53, 191, 124, 223, 244, 62, 113, 60, 188, 61, 10, 88, 176, 62, 85, 169, 60, 62, 183, 112, 2, 62, 168, 91, 19, 62, 216, 231, 172, 190, 137, 149, 2, 62, 206, 117, 14, 190, 183, 104, 176, 190, 154, 169, 33, 190, 131, 75, 197, 187, 163, 177, 141, 62, 69, 52, 183, 189, 165, 103, 133, 190, 156, 225, 70, 62, 179, 116, 36, 190, 130, 71, 142, 189, 197, 28, 239, 189, 73, 28, 129, 190, 183, 186, 88, 190, 127, 240, 39, 191, 236, 88, 130, 191, 75, 88, 129, 190, 162, 86, 193, 191, 9, 186, 227, 187, 28, 9, 184, 189, 153, 41, 225, 189, 72, 235, 128, 190, 108, 80, 135, 59, 78, 78, 159, 62, 44, 108, 92, 62, 42, 138, 152, 191, 241, 113, 150, 190, 119, 151, 254, 186, 190, 250, 50, 191, 177, 65, 108, 191, 196, 135, 121, 61, 210, 121, 150, 61, 118, 112, 133, 62, 33, 56, 237, 61, 123, 142, 114, 62, 49, 234, 69, 190, 192, 65, 89, 62, 214, 121, 98, 189, 15, 177, 92, 62, 88, 196, 46, 61, 218, 75, 129, 191, 168, 73, 14, 62, 24, 36, 176, 60, 65, 144, 158, 189, 157, 57, 93, 60, 236, 40, 203, 61, 243, 228, 105, 62, 53, 168, 77, 191, 156, 18, 209, 62, 138, 208, 41, 191, 220, 137, 138, 61, 149, 238, 229, 61, 204, 245, 57, 189, 119, 19, 132, 189, 228, 78, 80, 62, 184, 156, 85, 60, 210, 13, 6, 191, 2, 95, 48, 191, 195, 56, 247, 189, 172, 214, 185, 62, 228, 129, 242, 187, 229, 63, 182, 191, 206, 237, 146, 190, 41, 217, 112, 190, 160, 179, 36, 190, 51, 240, 1, 62, 155, 233, 81, 190, 225, 44, 41, 190, 97, 193, 173, 61, 7, 36, 225, 61, 5, 122, 207, 190, 146, 202, 159, 188, 16, 127, 127, 191, 248, 225, 146, 62, 240, 131, 109, 191, 64, 107, 211, 189, 135, 197, 119, 189, 103, 215, 230, 189, 161, 254, 115, 62, 83, 131, 167, 191, 69, 233, 6, 190, 78, 184, 202, 190, 47, 24, 4, 62, 27, 220, 241, 189, 76, 132, 34, 61, 50, 132, 149, 60, 25, 252, 112, 190, 59, 67, 237, 187, 188, 159, 131, 62, 218, 19, 242, 190, 2, 15, 96, 190, 123, 255, 247, 189, 140, 80, 245, 61, 107, 154, 212, 62, 152, 183, 196, 190, 254, 109, 126, 191, 234, 104, 109, 62, 182, 162, 226, 189, 181, 131, 151, 61, 223, 249, 169, 60, 124, 68, 129, 190, 254, 33, 183, 61, 218, 209, 104, 190, 198, 149, 109, 62, 29, 225, 4, 63, 248, 68, 104, 61, 55, 251, 63, 62, 163, 109, 92, 190, 55, 195, 137, 190, 47, 243, 174, 190, 174, 151, 156, 189, 216, 144, 169, 191, 118, 94, 82, 62, 210, 53, 197, 189, 42, 193, 47, 62, 249, 192, 255, 61, 188, 218, 172, 61, 223, 235, 134, 190, 8, 64, 139, 62, 177, 170, 163, 62, 199, 86, 145, 62, 232, 155, 105, 191, 43, 179, 54, 190, 83, 36, 227, 190, 219, 117, 29, 191, 95, 89, 209, 190, 20, 217, 155, 190, 55, 173, 172, 62, 182, 191, 116, 59, 137, 86, 168, 189, 131, 151, 196, 61, 18, 81, 50, 190, 109, 178, 193, 61, 225, 24, 141, 189, 240, 156, 150, 62, 83, 93, 105, 62, 24, 195, 58, 190, 37, 129, 114, 62, 90, 186, 144, 62, 230, 31, 63, 190, 82, 31, 142, 188, 246, 169, 218, 62, 217, 0, 30, 187, 20, 132, 69, 191, 209, 15, 45, 62, 223, 62, 140, 189, 96, 203, 79, 62, 238, 244, 76, 61, 229, 74, 25, 190, 82, 225, 144, 190, 181, 86, 177, 189, 91, 152, 185, 61, 26, 37, 54, 62, 47, 184, 4, 62, 150, 101, 84, 61, 86, 50, 83, 60, 206, 104, 96, 62, 109, 130, 232, 190, 68, 166, 45, 190, 118, 210, 148, 61, 205, 233, 30, 62, 188, 248, 53, 191, 83, 67, 149, 61, 133, 179, 138, 188, 161, 29, 164, 60, 12, 57, 113, 188, 108, 209, 47, 190, 61, 51, 135, 62, 72, 146, 219, 189, 99, 200, 244, 59, 211, 43, 186, 61, 41, 101, 208, 190, 158, 65, 131, 190, 126, 196, 121, 60, 187, 27, 246, 189, 171, 146, 47, 189, 147, 134, 214, 61, 140, 73, 133, 61, 210, 186, 143, 189, 112, 225, 93, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 136, 82, 180, 189, 61, 60, 41, 190, 3, 77, 182, 189, 124, 253, 152, 189, 204, 215, 28, 190, 155, 191, 210, 60, 15, 152, 2, 62, 160, 71, 36, 190, 36, 185, 17, 190, 151, 58, 38, 190, 26, 62, 32, 190, 28, 248, 149, 189, 121, 201, 104, 189, 223, 186, 200, 189, 90, 164, 199, 189, 125, 108, 231, 61, 65, 231, 249, 59, 38, 24, 53, 190, 199, 102, 42, 189, 19, 129, 23, 62, 142, 37, 44, 189, 242, 195, 128, 60, 104, 227, 161, 189, 235, 178, 128, 190, 226, 60, 203, 60, 128, 171, 129, 190, 29, 181, 51, 190, 3, 159, 180, 189, 85, 93, 39, 191, 206, 232, 126, 190, 28, 172, 127, 190, 6, 61, 44, 61, 144, 107, 63, 190, 243, 93, 216, 61, 16, 53, 18, 62, 68, 70, 130, 190, 151, 121, 86, 190, 113, 42, 7, 191, 70, 149, 159, 61, 118, 163, 69, 62, 51, 93, 69, 191, 115, 176, 156, 190, 5, 106, 127, 190, 122, 55, 171, 190, 41, 205, 71, 190, 202, 163, 150, 190, 164, 65, 55, 190, 79, 122, 209, 187, 165, 184, 180, 62, 181, 25, 139, 190, 95, 209, 111, 191, 162, 30, 165, 191, 160, 93, 23, 189, 115, 247, 74, 61, 64, 88, 0, 190, 206, 187, 201, 61, 159, 26, 130, 190, 130, 224, 15, 191, 39, 121, 11, 57, 19, 158, 9, 190, 252, 169, 229, 189, 139, 210, 142, 62, 132, 188, 10, 191, 40, 210, 180, 190, 66, 137, 77, 190, 213, 176, 5, 63, 199, 101, 136, 62, 220, 156, 43, 190, 2, 47, 58, 190, 8, 132, 138, 62, 10, 174, 24, 189, 15, 102, 58, 191, 172, 81, 79, 187, 42, 102, 207, 190, 246, 26, 51, 62, 243, 240, 139, 61, 233, 76, 10, 61, 238, 129, 127, 190, 29, 131, 97, 191, 12, 131, 185, 190, 214, 157, 77, 189, 137, 184, 47, 191, 221, 186, 40, 190, 149, 114, 157, 190, 243, 27, 73, 190, 247, 87, 207, 59, 138, 51, 225, 190, 125, 25, 62, 62, 108, 12, 120, 62, 67, 20, 89, 189, 175, 142, 176, 189, 66, 1, 52, 62, 251, 14, 182, 190, 9, 254, 196, 189, 68, 178, 224, 190, 127, 104, 57, 189, 212, 36, 140, 62, 231, 184, 59, 62, 221, 96, 177, 62, 122, 230, 222, 62, 110, 100, 133, 62, 12, 142, 58, 62, 189, 162, 109, 190, 216, 242, 161, 62, 255, 221, 146, 191, 46, 71, 129, 189, 120, 85, 12, 190, 17, 89, 172, 189, 109, 196, 94, 188, 231, 127, 155, 190, 232, 90, 58, 188, 253, 44, 151, 62, 84, 26, 56, 61, 213, 223, 34, 62, 114, 254, 134, 190, 211, 131, 149, 191, 32, 127, 74, 190, 66, 7, 166, 190, 204, 63, 23, 189, 168, 10, 24, 190, 161, 175, 26, 190, 160, 237, 148, 61, 156, 249, 137, 189, 109, 169, 182, 189, 156, 43, 179, 188, 228, 4, 186, 61, 115, 245, 166, 60, 35, 28, 23, 62, 100, 224, 192, 189, 18, 235, 7, 62, 129, 68, 25, 61, 105, 231, 243, 189, 53, 190, 203, 189, 34, 170, 207, 189, 86, 82, 13, 190, 100, 96, 55, 61, 31, 14, 74, 61, 249, 89, 166, 188, 96, 88, 255, 189, 61, 134, 164, 187, 109, 165, 131, 189, 55, 110, 56, 61, 61, 155, 101, 189, 229, 205, 200, 189, 191, 77, 105, 189, 56, 155, 189, 60, 27, 131, 253, 189, 46, 214, 25, 190, 117, 34, 217, 189, 204, 92, 13, 61, 150, 159, 52, 61, 7, 44, 169, 189, 202, 193, 134, 62, 182, 31, 2, 191, 215, 231, 131, 190, 226, 39, 244, 61, 175, 143, 53, 191, 183, 11, 157, 60, 163, 97, 218, 59, 94, 162, 65, 190, 42, 205, 150, 60, 185, 58, 254, 61, 68, 125, 4, 62, 27, 110, 12, 61, 180, 232, 8, 61, 39, 165, 55, 190, 115, 117, 36, 190, 216, 88, 212, 62, 104, 36, 52, 191, 100, 51, 192, 190, 48, 110, 236, 189, 218, 129, 190, 189, 119, 66, 158, 189, 140, 67, 124, 188, 201, 149, 121, 190, 77, 99, 192, 62, 13, 76, 16, 62, 3, 7, 175, 190, 11, 144, 145, 190, 108, 120, 18, 191, 238, 43, 21, 190, 227, 23, 79, 190, 106, 117, 158, 190, 41, 250, 230, 188, 148, 194, 153, 61, 200, 254, 128, 190, 31, 45, 180, 60, 70, 202, 143, 190, 134, 140, 253, 188, 236, 203, 90, 190, 61, 101, 219, 61, 113, 22, 8, 62, 129, 76, 96, 62, 38, 92, 122, 62, 15, 144, 245, 62, 204, 136, 13, 62, 171, 115, 180, 61, 30, 167, 46, 62, 142, 205, 59, 190, 78, 247, 181, 62, 190, 51, 86, 190, 80, 142, 97, 190, 202, 203, 247, 189, 224, 8, 77, 61, 223, 228, 249, 188, 40, 125, 100, 60, 169, 34, 13, 62, 35, 114, 220, 61, 148, 160, 238, 61, 7, 108, 202, 61, 101, 12, 84, 189, 125, 40, 136, 190, 220, 191, 204, 60, 168, 66, 36, 190, 109, 9, 180, 190, 148, 125, 161, 62, 181, 93, 23, 61, 231, 163, 200, 188, 200, 149, 129, 62, 134, 209, 145, 62, 69, 10, 128, 189, 8, 179, 225, 189, 22, 52, 185, 189, 130, 162, 70, 61, 93, 137, 148, 62, 62, 159, 25, 62, 224, 16, 114, 62, 229, 99, 168, 62, 186, 141, 159, 62, 169, 60, 104, 61, 37, 130, 28, 190, 149, 167, 104, 62, 31, 138, 16, 190, 236, 197, 71, 62, 167, 65, 192, 188, 2, 193, 3, 61, 70, 150, 139, 62, 238, 142, 141, 190, 194, 47, 155, 61, 22, 195, 190, 61, 224, 56, 98, 62, 236, 24, 178, 62, 65, 64, 44, 62, 164, 62, 251, 61, 167, 84, 173, 189, 16, 39, 141, 61, 148, 110, 221, 189, 233, 180, 187, 187, 226, 231, 52, 190, 105, 149, 126, 60, 87, 124, 49, 189, 165, 58, 145, 61, 211, 213, 74, 190, 59, 237, 83, 187, 203, 19, 14, 189, 50, 66, 107, 189, 69, 151, 221, 61, 233, 22, 70, 61, 106, 77, 1, 189, 143, 206, 161, 189, 210, 118, 238, 189, 92, 157, 128, 189, 230, 225, 19, 62, 216, 29, 241, 58, 138, 91, 25, 189, 173, 137, 19, 190, 82, 215, 181, 189, 128, 80, 20, 62, 68, 39, 243, 189, 23, 17, 5, 189, 18, 183, 2, 190, 220, 166, 41, 62, 230, 213, 207, 61, 139, 81, 184, 189, 40, 44, 178, 61, 86, 33, 211, 189, 132, 155, 206, 189, 202, 202, 62, 61, 61, 66, 213, 59, 222, 206, 117, 62, 171, 52, 140, 190, 167, 188, 130, 190, 144, 57, 113, 189, 116, 191, 168, 62, 58, 147, 187, 61, 216, 23, 11, 190, 102, 177, 195, 61, 22, 217, 112, 190, 234, 155, 47, 63, 134, 30, 122, 62, 255, 64, 68, 62, 119, 86, 15, 63, 159, 144, 141, 59, 21, 179, 158, 62, 82, 76, 147, 190, 121, 204, 154, 61, 73, 210, 181, 191, 40, 121, 87, 60, 103, 94, 191, 189, 155, 70, 215, 189, 211, 218, 17, 187, 24, 128, 185, 190, 204, 243, 29, 62, 162, 78, 127, 62, 28, 57, 14, 190, 151, 249, 254, 189, 10, 102, 238, 61, 216, 93, 129, 191, 85, 210, 168, 190, 92, 92, 193, 190, 141, 222, 140, 191, 177, 3, 97, 62, 246, 214, 96, 191, 27, 42, 218, 61, 210, 87, 19, 62, 170, 53, 141, 190, 239, 112, 21, 190, 186, 235, 152, 190, 161, 81, 207, 190, 60, 153, 171, 60, 241, 190, 233, 190, 102, 81, 213, 190, 52, 234, 226, 62, 25, 99, 62, 60, 237, 234, 201, 191, 4, 102, 224, 190, 44, 176, 220, 189, 189, 173, 167, 60, 95, 94, 183, 61, 63, 215, 8, 62, 144, 120, 108, 190, 42, 176, 210, 61, 48, 82, 153, 62, 34, 216, 232, 189, 158, 24, 30, 189, 53, 223, 210, 191, 19, 122, 189, 61, 108, 213, 27, 189, 225, 51, 36, 190, 241, 245, 236, 61, 239, 168, 82, 188, 58, 94, 65, 62, 203, 248, 202, 190, 212, 79, 11, 190, 16, 76, 5, 62, 143, 100, 42, 190, 101, 141, 80, 61, 145, 117, 85, 62, 181, 165, 162, 189, 45, 0, 88, 190, 28, 159, 137, 190, 206, 25, 246, 61, 69, 194, 167, 189, 205, 108, 95, 190, 48, 72, 148, 190, 40, 22, 4, 62, 21, 54, 150, 189, 57, 235, 160, 190, 47, 185, 69, 189, 193, 74, 74, 62, 158, 99, 0, 191, 217, 54, 196, 61, 195, 142, 210, 190, 243, 174, 225, 60, 143, 34, 82, 189, 12, 84, 24, 62, 235, 118, 130, 62, 202, 211, 139, 60, 52, 57, 38, 60, 33, 184, 169, 62, 159, 243, 28, 62, 236, 224, 49, 191, 25, 229, 212, 60, 17, 32, 154, 189, 87, 145, 177, 189, 142, 72, 196, 61, 255, 169, 44, 189, 181, 96, 103, 60, 250, 217, 205, 188, 78, 139, 143, 189, 236, 59, 66, 189, 46, 91, 1, 188, 93, 79, 232, 189, 250, 113, 230, 189, 202, 107, 228, 60, 152, 126, 10, 190, 19, 143, 190, 189, 183, 21, 77, 190, 43, 3, 250, 187, 39, 133, 99, 189, 121, 245, 21, 62, 144, 255, 25, 190, 89, 185, 232, 189, 117, 206, 66, 190, 140, 202, 5, 62, 167, 97, 216, 189, 141, 210, 251, 61, 175, 11, 205, 61, 252, 199, 19, 62, 161, 113, 218, 61, 123, 77, 250, 61, 112, 100, 15, 190, 183, 175, 194, 189, 150, 78, 44, 61, 185, 177, 58, 189, 28, 164, 134, 61, 0, 34, 52, 190, 48, 58, 249, 189, 108, 154, 153, 61, 112, 45, 209, 62, 152, 255, 172, 61, 15, 233, 214, 189, 80, 24, 118, 190, 28, 136, 52, 62, 143, 39, 28, 60, 21, 6, 132, 62, 152, 88, 190, 191, 214, 229, 194, 190, 98, 42, 110, 188, 10, 221, 79, 191, 51, 98, 196, 189, 156, 0, 53, 190, 198, 101, 201, 62, 18, 41, 184, 61, 21, 221, 171, 189, 87, 23, 175, 62, 164, 223, 27, 191, 127, 101, 179, 189, 104, 170, 202, 191, 89, 156, 33, 62, 21, 47, 2, 62, 41, 84, 109, 190, 21, 215, 168, 61, 20, 64, 252, 60, 3, 72, 200, 189, 53, 219, 38, 61, 195, 158, 219, 62, 97, 254, 118, 61, 243, 148, 115, 189, 242, 196, 60, 188, 194, 80, 114, 62, 27, 173, 17, 189, 103, 148, 105, 62, 148, 74, 134, 62, 30, 187, 147, 62, 47, 5, 136, 190, 181, 192, 147, 190, 238, 242, 61, 189, 70, 197, 208, 62, 166, 156, 10, 62, 226, 50, 3, 190, 78, 17, 207, 60, 123, 93, 133, 190, 208, 59, 19, 190, 235, 250, 83, 191, 105, 69, 11, 190, 109, 183, 25, 190, 60, 183, 105, 62, 36, 164, 95, 62, 239, 35, 234, 190, 187, 108, 24, 62, 24, 9, 157, 190, 212, 130, 47, 190, 183, 153, 22, 61, 209, 146, 32, 62, 231, 95, 87, 62, 82, 152, 240, 61, 138, 6, 241, 189, 143, 104, 206, 189, 14, 26, 89, 62, 219, 205, 57, 189, 83, 9, 77, 62, 130, 130, 108, 62, 56, 222, 118, 190, 155, 94, 142, 61, 91, 97, 108, 190, 90, 38, 173, 190, 50, 46, 88, 189, 153, 183, 191, 61, 6, 74, 138, 190, 23, 170, 64, 62, 175, 237, 119, 61, 250, 102, 160, 189, 116, 100, 146, 189, 94, 218, 204, 62, 233, 79, 180, 62, 145, 249, 74, 62, 9, 79, 124, 189, 204, 125, 196, 61, 71, 132, 156, 191, 107, 65, 50, 62, 254, 1, 3, 62, 126, 251, 87, 62, 188, 101, 239, 189, 87, 211, 143, 190, 238, 157, 89, 62, 157, 106, 145, 59, 226, 190, 213, 190, 111, 22, 187, 190, 224, 128, 48, 62, 178, 255, 35, 62, 189, 247, 107, 190, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 222, 129, 62, 28, 19, 92, 62, 126, 248, 52, 190, 103, 119, 10, 62, 112, 119, 14, 190, 97, 52, 22, 62, 152, 119, 173, 190, 174, 2, 224, 61, 250, 58, 245, 61, 214, 195, 58, 62, 72, 129, 11, 62, 6, 110, 150, 61, 60, 208, 92, 62, 248, 62, 215, 60, 144, 242, 244, 61, 107, 47, 13, 62, 85, 65, 171, 189, 135, 15, 140, 184, 128, 15, 173, 62, 172, 168, 6, 190, 65, 11, 42, 62, 11, 50, 203, 62, 237, 199, 206, 62, 140, 177, 242, 189, 234, 217, 78, 62, 137, 208, 173, 62, 179, 188, 157, 61, 142, 160, 184, 189, 95, 140, 209, 187, 132, 97, 11, 62, 97, 159, 142, 190, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 45, 12, 63, 165, 138, 31, 191, 81, 106, 33, 62, 55, 229, 36, 63, 5, 66, 33, 61, 232, 201, 129, 62, 43, 221, 209, 62, 73, 202, 221, 62, 248, 96, 227, 62, 27, 75, 62, 63, 9, 200, 170, 63, 98, 109, 129, 63, 222, 2, 69, 62, 253, 142, 223, 62, 93, 254, 231, 189, 54, 203, 253, 189, 184, 82, 103, 191, 169, 124, 19, 191, 118, 245, 45, 191, 82, 96, 225, 189, 144, 203, 3, 191, 64, 12, 58, 190, 249, 2, 117, 190, 45, 198, 143, 189, 9, 70, 58, 191, 244, 145, 104, 63, 81, 114, 105, 62, 227, 117, 136, 189, 15, 214, 90, 191, 115, 252, 68, 190, 81, 130, 212, 62, 212, 96, 26, 189, 203, 208, 169, 62, 114, 249, 228, 189, 177, 128, 134, 62, 24, 205, 91, 60, 20, 229, 19, 190, 181, 164, 72, 62, 211, 198, 141, 60, 114, 37, 107, 60, 37, 253, 203, 189, 80, 69, 38, 62, 144, 114, 153, 62, 9, 252, 109, 62, 184, 104, 193, 190, 130, 239, 237, 60, 235, 131, 116, 190, 64, 133, 232, 189, 214, 115, 146, 62, 98, 119, 28, 62, 205, 124, 49, 59, 243, 97, 226, 187, 186, 206, 10, 62, 92, 114, 158, 190, 32, 236, 102, 190, 68, 22, 142, 188, 166, 32, 173, 60, 91, 108, 7, 61, 171, 205, 91, 190, 75, 151, 35, 62, 167, 248, 82, 61, 70, 22, 207, 188, 101, 202, 234, 58, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 85, 214, 59, 141, 31, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 199, 144, 61, 32, 52, 140, 191, 252, 248, 53, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {23, 205, 178, 62, 116, 86, 117, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}