// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 102, 32, 63, 251, 158, 220, 62, 143, 43, 136, 62, 181, 46, 140, 62, 248, 222, 245, 62, 109, 215, 82, 190, 88, 39, 233, 190, 10, 157, 204, 191, 128, 58, 148, 190, 76, 143, 100, 190, 73, 216, 27, 191, 164, 118, 143, 62, 230, 117, 160, 61, 253, 150, 12, 63, 52, 5, 244, 62, 159, 90, 236, 62, 223, 176, 228, 190, 72, 241, 4, 63, 182, 73, 155, 190, 14, 2, 144, 62, 231, 138, 8, 63, 10, 102, 227, 190, 189, 199, 70, 61, 57, 201, 105, 190, 0, 92, 192, 62, 95, 93, 50, 63, 46, 80, 0, 191, 130, 176, 76, 63, 134, 249, 57, 191, 192, 214, 32, 190, 87, 45, 98, 63, 115, 254, 121, 63, 170, 118, 149, 62, 79, 62, 241, 190, 221, 181, 234, 62, 137, 154, 177, 189, 147, 63, 232, 190, 28, 147, 79, 63, 131, 154, 46, 62, 229, 152, 32, 63, 94, 237, 172, 63, 79, 138, 80, 62, 68, 17, 220, 190, 117, 173, 130, 190, 32, 178, 199, 190, 28, 115, 130, 190, 174, 252, 241, 62, 111, 18, 150, 190, 247, 254, 23, 63, 141, 250, 201, 190, 56, 86, 118, 190, 154, 47, 244, 190, 169, 46, 164, 191, 242, 194, 9, 62, 30, 230, 177, 190, 110, 59, 1, 64, 68, 102, 2, 63, 93, 190, 235, 62, 106, 248, 52, 191, 119, 183, 116, 62, 5, 227, 172, 190, 69, 123, 69, 63, 204, 78, 231, 62, 134, 180, 20, 61, 96, 23, 155, 62, 108, 165, 245, 190, 216, 152, 182, 62, 191, 150, 127, 63, 137, 199, 97, 62, 186, 10, 20, 63, 59, 195, 107, 191, 218, 164, 226, 190, 51, 44, 89, 63, 121, 243, 117, 190, 18, 232, 152, 190, 87, 180, 92, 191, 137, 242, 57, 191, 180, 110, 40, 190, 131, 253, 22, 191, 161, 16, 130, 61, 31, 72, 233, 62, 142, 49, 62, 63, 155, 216, 15, 191, 158, 165, 40, 189, 246, 181, 73, 189, 218, 61, 203, 189, 96, 224, 230, 62, 106, 179, 81, 190, 17, 60, 79, 63, 67, 19, 168, 62, 190, 171, 65, 63, 59, 77, 102, 191, 182, 232, 210, 190, 39, 117, 59, 190, 190, 156, 179, 62, 26, 198, 26, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 192, 76, 191, 19, 216, 172, 62, 26, 237, 150, 190, 154, 71, 46, 191, 125, 129, 174, 62, 223, 96, 200, 190, 14, 140, 30, 191, 255, 83, 31, 191, 119, 154, 1, 191, 207, 108, 129, 62, 2, 77, 200, 190, 201, 36, 237, 62, 204, 25, 51, 63, 99, 49, 100, 61, 184, 247, 151, 190, 138, 24, 60, 62, 150, 253, 19, 191, 159, 53, 202, 62, 73, 236, 1, 191, 119, 20, 128, 62, 167, 61, 28, 191, 128, 213, 104, 61, 153, 187, 230, 62, 223, 27, 1, 191, 164, 165, 197, 62, 206, 212, 6, 191, 117, 255, 245, 62, 10, 7, 18, 63, 239, 19, 32, 191, 212, 63, 90, 190, 28, 250, 24, 191, 89, 115, 162, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 158, 43, 191, 78, 130, 90, 190, 90, 240, 73, 62, 242, 108, 46, 62, 182, 167, 121, 190, 121, 176, 175, 189, 236, 17, 183, 189, 58, 152, 48, 189, 40, 125, 113, 190, 80, 164, 110, 189, 195, 104, 151, 191, 175, 161, 212, 188, 61, 81, 136, 189, 109, 211, 41, 191, 130, 83, 3, 190, 15, 14, 155, 190, 9, 238, 224, 189, 232, 19, 181, 62, 227, 82, 165, 190, 117, 210, 114, 62, 49, 215, 182, 190, 201, 125, 232, 60, 139, 19, 116, 190, 5, 215, 170, 60, 168, 127, 199, 60, 244, 245, 168, 189, 63, 231, 25, 62, 31, 15, 82, 62, 250, 220, 16, 62, 138, 226, 226, 190, 173, 60, 136, 61, 157, 177, 201, 189, 67, 208, 139, 60, 51, 51, 71, 62, 90, 50, 110, 62, 69, 150, 178, 190, 76, 149, 95, 61, 17, 61, 104, 62, 101, 48, 220, 62, 105, 163, 138, 189, 129, 173, 144, 189, 253, 83, 33, 190, 39, 198, 183, 62, 40, 227, 0, 62, 172, 89, 15, 189, 10, 34, 164, 62, 22, 91, 153, 62, 72, 106, 143, 62, 14, 112, 131, 190, 222, 52, 31, 62, 105, 224, 56, 191, 238, 152, 168, 190, 102, 46, 139, 62, 164, 179, 74, 190, 79, 55, 235, 61, 83, 177, 179, 190, 219, 4, 130, 189, 105, 92, 193, 62, 221, 165, 135, 189, 253, 187, 65, 62, 90, 99, 98, 62, 121, 112, 67, 191, 62, 43, 155, 190, 115, 190, 24, 190, 119, 31, 38, 63, 156, 212, 227, 189, 52, 28, 189, 189, 78, 49, 19, 62, 38, 130, 25, 61, 227, 249, 7, 62, 190, 53, 237, 61, 170, 233, 212, 190, 127, 209, 81, 62, 244, 114, 9, 190, 157, 132, 205, 62, 50, 58, 187, 189, 161, 93, 68, 60, 37, 236, 156, 62, 248, 28, 4, 190, 44, 159, 99, 62, 128, 79, 57, 190, 184, 227, 174, 190, 42, 246, 160, 189, 15, 22, 96, 190, 19, 201, 89, 61, 229, 32, 48, 62, 249, 252, 174, 61, 246, 116, 49, 191, 145, 103, 242, 188, 166, 86, 10, 187, 146, 82, 14, 190, 133, 2, 2, 190, 168, 69, 220, 61, 24, 112, 197, 60, 1, 105, 8, 191, 79, 196, 166, 60, 176, 74, 158, 191, 118, 80, 16, 189, 121, 3, 158, 190, 89, 67, 128, 62, 2, 6, 142, 62, 144, 99, 46, 190, 125, 217, 157, 190, 187, 116, 53, 62, 14, 77, 123, 62, 190, 41, 184, 62, 249, 247, 107, 191, 248, 164, 227, 61, 123, 209, 215, 190, 21, 238, 7, 191, 64, 132, 234, 190, 50, 197, 169, 189, 115, 109, 0, 62, 159, 26, 12, 190, 152, 168, 210, 189, 20, 216, 247, 62, 46, 131, 164, 190, 44, 219, 104, 62, 252, 45, 53, 190, 107, 159, 192, 61, 50, 200, 140, 62, 90, 116, 204, 190, 159, 60, 7, 62, 162, 169, 240, 61, 138, 67, 54, 189, 98, 30, 110, 190, 147, 71, 207, 62, 146, 103, 183, 61, 244, 118, 29, 190, 160, 211, 218, 187, 159, 252, 164, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 254, 176, 143, 61, 173, 224, 149, 60, 44, 175, 200, 189, 127, 172, 37, 62, 124, 152, 21, 61, 151, 111, 28, 61, 219, 59, 0, 190, 67, 154, 63, 188, 40, 142, 33, 190, 65, 123, 79, 188, 103, 154, 143, 187, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 176, 76, 9, 190, 220, 255, 42, 190, 14, 24, 250, 189, 224, 83, 111, 60, 130, 112, 19, 62, 141, 175, 20, 190, 119, 204, 255, 61, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 182, 57, 174, 190, 19, 116, 251, 61, 195, 75, 11, 190, 162, 60, 230, 61, 188, 16, 180, 189, 235, 51, 137, 60, 231, 71, 40, 188, 215, 122, 60, 61, 53, 158, 189, 61, 77, 225, 42, 62, 47, 117, 87, 191, 206, 42, 207, 60, 193, 232, 73, 191, 196, 179, 53, 191, 114, 217, 92, 61, 198, 156, 239, 61, 165, 216, 55, 190, 161, 194, 242, 188, 136, 13, 188, 190, 190, 237, 174, 62, 93, 0, 124, 190, 66, 122, 176, 61, 109, 156, 235, 190, 86, 66, 190, 60, 29, 80, 167, 189, 186, 243, 11, 186, 99, 135, 110, 189, 254, 197, 138, 61, 47, 205, 137, 62, 36, 194, 131, 190, 138, 45, 71, 62, 166, 49, 231, 61, 183, 52, 13, 63, 251, 31, 17, 191, 119, 240, 193, 62, 40, 138, 7, 191, 51, 251, 243, 189, 206, 120, 96, 61, 21, 162, 88, 62, 19, 80, 25, 190, 216, 202, 147, 190, 212, 64, 160, 189, 57, 201, 132, 62, 233, 208, 123, 61, 120, 199, 17, 190, 117, 45, 167, 62, 18, 113, 69, 190, 19, 2, 10, 189, 118, 169, 18, 191, 113, 173, 172, 62, 54, 183, 72, 62, 193, 179, 220, 61, 91, 180, 37, 62, 186, 104, 132, 190, 7, 16, 4, 189, 178, 143, 112, 62, 175, 219, 87, 189, 158, 109, 93, 61, 184, 179, 162, 190, 67, 117, 231, 189, 236, 197, 59, 61, 116, 215, 37, 62, 192, 8, 33, 62, 28, 164, 40, 190, 98, 130, 166, 191, 46, 101, 57, 62, 122, 247, 27, 190, 195, 246, 218, 189, 122, 63, 68, 62, 72, 49, 92, 190, 115, 108, 241, 189, 162, 127, 176, 190, 34, 16, 2, 190, 254, 76, 154, 62, 155, 133, 67, 191, 34, 129, 190, 190, 106, 160, 18, 62, 20, 156, 77, 189, 61, 220, 200, 190, 33, 219, 249, 190, 18, 141, 23, 190, 82, 8, 106, 189, 199, 131, 188, 62, 71, 131, 156, 61, 2, 148, 217, 57, 31, 221, 0, 190, 104, 69, 2, 62, 173, 247, 103, 62, 37, 220, 103, 62, 109, 139, 226, 190, 6, 133, 105, 62, 216, 237, 39, 62, 13, 232, 244, 189, 216, 160, 200, 189, 227, 207, 214, 61, 203, 41, 71, 61, 2, 208, 45, 191, 243, 191, 85, 62, 199, 145, 94, 191, 40, 167, 89, 61, 244, 69, 166, 187, 148, 122, 174, 61, 32, 142, 55, 189, 91, 26, 242, 188, 96, 240, 157, 189, 38, 99, 117, 189, 124, 163, 29, 191, 60, 153, 13, 189, 214, 101, 24, 190, 175, 203, 54, 191, 143, 39, 44, 62, 51, 133, 62, 62, 165, 243, 32, 62, 34, 162, 154, 61, 142, 3, 15, 191, 46, 203, 16, 188, 211, 15, 11, 191, 11, 104, 134, 61, 179, 194, 114, 190, 20, 200, 10, 190, 143, 165, 57, 189, 84, 252, 59, 190, 179, 2, 149, 61, 126, 118, 151, 62, 83, 79, 232, 61, 29, 255, 96, 190, 158, 9, 195, 189, 86, 158, 201, 61, 191, 152, 208, 62, 4, 80, 253, 188, 155, 233, 45, 62, 202, 131, 51, 191, 243, 165, 45, 60, 221, 159, 197, 188, 105, 190, 128, 190, 36, 80, 156, 190, 196, 123, 134, 190, 198, 90, 67, 191, 4, 218, 252, 62, 159, 81, 253, 61, 228, 144, 191, 62, 199, 96, 89, 62, 239, 186, 255, 61, 37, 232, 40, 62, 5, 17, 160, 190, 33, 203, 93, 62, 74, 28, 243, 189, 116, 187, 187, 190, 116, 242, 102, 190, 245, 147, 121, 188, 79, 180, 154, 62, 13, 206, 162, 189, 57, 143, 115, 190, 56, 117, 121, 62, 93, 46, 245, 189, 57, 73, 72, 189, 161, 42, 35, 190, 132, 108, 109, 190, 240, 21, 68, 190, 18, 28, 33, 191, 38, 140, 123, 191, 253, 138, 156, 190, 76, 123, 212, 191, 135, 204, 216, 188, 150, 234, 183, 189, 132, 142, 196, 189, 104, 100, 135, 190, 121, 246, 135, 59, 223, 230, 157, 62, 85, 70, 93, 62, 169, 76, 154, 191, 94, 172, 156, 190, 254, 237, 236, 188, 18, 179, 73, 191, 212, 131, 108, 191, 57, 196, 131, 61, 255, 94, 114, 61, 242, 141, 133, 62, 167, 97, 198, 61, 72, 52, 117, 62, 79, 118, 107, 190, 116, 249, 95, 62, 43, 134, 135, 189, 105, 64, 48, 62, 26, 89, 114, 188, 120, 53, 141, 191, 6, 6, 13, 62, 58, 78, 150, 60, 29, 189, 160, 189, 60, 61, 57, 189, 196, 250, 50, 61, 250, 0, 107, 62, 41, 142, 74, 191, 217, 248, 200, 62, 204, 49, 27, 191, 169, 110, 137, 61, 173, 157, 215, 61, 126, 147, 75, 189, 154, 218, 150, 189, 118, 141, 57, 62, 78, 179, 170, 189, 24, 65, 7, 191, 250, 237, 45, 191, 34, 5, 20, 190, 190, 227, 182, 62, 56, 33, 206, 188, 31, 222, 185, 191, 247, 138, 144, 190, 41, 217, 112, 190, 98, 194, 23, 190, 218, 192, 229, 61, 133, 170, 84, 190, 196, 65, 53, 190, 142, 172, 88, 61, 52, 220, 200, 61, 5, 122, 207, 190, 178, 113, 151, 189, 187, 190, 132, 191, 224, 146, 144, 62, 10, 151, 126, 191, 114, 42, 222, 189, 62, 209, 149, 189, 103, 215, 230, 189, 94, 41, 107, 62, 247, 228, 167, 191, 79, 43, 4, 190, 138, 183, 183, 190, 192, 148, 234, 61, 73, 150, 245, 189, 28, 84, 6, 61, 3, 161, 189, 60, 81, 16, 114, 190, 86, 103, 152, 190, 216, 92, 132, 62, 123, 124, 227, 190, 163, 10, 209, 190, 99, 33, 244, 189, 155, 217, 10, 62, 178, 149, 16, 63, 179, 85, 69, 191, 137, 114, 135, 191, 29, 152, 81, 62, 63, 164, 13, 190, 46, 180, 145, 61, 229, 43, 27, 60, 207, 19, 167, 190, 152, 217, 200, 61, 205, 143, 118, 190, 25, 31, 106, 62, 199, 32, 43, 63, 137, 113, 74, 61, 130, 35, 65, 62, 58, 212, 88, 190, 199, 49, 153, 190, 60, 22, 179, 190, 58, 125, 169, 189, 67, 60, 162, 191, 17, 26, 91, 62, 41, 133, 234, 189, 89, 71, 35, 62, 204, 131, 23, 62, 211, 189, 187, 61, 209, 26, 128, 190, 81, 241, 142, 62, 67, 21, 151, 62, 249, 88, 150, 62, 206, 209, 91, 191, 133, 184, 72, 190, 151, 104, 231, 190, 204, 73, 27, 191, 204, 60, 203, 190, 52, 6, 163, 190, 67, 81, 159, 62, 84, 33, 39, 189, 144, 96, 5, 190, 163, 21, 228, 61, 27, 19, 66, 190, 32, 214, 166, 61, 24, 7, 86, 189, 89, 87, 149, 62, 72, 179, 109, 62, 140, 43, 81, 190, 141, 50, 109, 62, 163, 48, 150, 62, 97, 55, 44, 190, 212, 7, 137, 189, 114, 86, 217, 62, 125, 147, 228, 59, 58, 200, 103, 191, 231, 162, 22, 62, 164, 213, 132, 187, 207, 114, 151, 62, 80, 80, 0, 61, 204, 95, 6, 190, 188, 33, 186, 190, 141, 60, 191, 189, 85, 239, 247, 61, 45, 179, 41, 62, 177, 132, 180, 61, 89, 16, 96, 61, 28, 226, 193, 188, 250, 88, 67, 62, 116, 205, 234, 190, 217, 31, 33, 190, 40, 153, 235, 61, 113, 108, 126, 62, 228, 107, 59, 191, 235, 133, 117, 61, 6, 211, 36, 190, 43, 8, 27, 61, 226, 197, 91, 189, 94, 82, 33, 190, 200, 35, 127, 62, 178, 254, 255, 189, 32, 63, 216, 60, 43, 97, 155, 61, 241, 235, 243, 190, 240, 241, 187, 190, 121, 42, 188, 60, 110, 171, 43, 190, 171, 146, 47, 189, 147, 134, 214, 61, 140, 73, 133, 61, 210, 186, 143, 189, 112, 225, 93, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 136, 82, 180, 189, 61, 60, 41, 190, 3, 77, 182, 189, 124, 253, 152, 189, 204, 215, 28, 190, 155, 191, 210, 60, 15, 152, 2, 62, 160, 71, 36, 190, 36, 185, 17, 190, 151, 58, 38, 190, 26, 62, 32, 190, 28, 248, 149, 189, 121, 201, 104, 189, 223, 186, 200, 189, 90, 164, 199, 189, 125, 108, 231, 61, 65, 231, 249, 59, 38, 24, 53, 190, 199, 102, 42, 189, 19, 129, 23, 62, 142, 37, 44, 189, 242, 195, 128, 60, 104, 227, 161, 189, 175, 209, 135, 190, 168, 93, 24, 60, 94, 228, 132, 190, 144, 110, 65, 190, 178, 190, 215, 189, 139, 103, 40, 191, 206, 232, 126, 190, 28, 172, 127, 190, 167, 245, 29, 61, 144, 107, 63, 190, 33, 71, 162, 61, 149, 90, 243, 61, 68, 70, 130, 190, 17, 220, 111, 190, 239, 219, 13, 191, 70, 149, 159, 61, 184, 160, 46, 62, 146, 85, 69, 191, 101, 101, 161, 190, 5, 106, 127, 190, 79, 227, 184, 190, 106, 141, 73, 190, 202, 163, 150, 190, 236, 48, 54, 190, 91, 252, 21, 189, 254, 204, 169, 62, 21, 111, 141, 190, 177, 75, 113, 191, 204, 50, 165, 191, 160, 93, 23, 189, 74, 155, 16, 61, 65, 53, 2, 190, 107, 154, 45, 61, 199, 248, 171, 190, 130, 224, 15, 191, 187, 195, 175, 189, 96, 31, 18, 190, 164, 202, 235, 189, 229, 232, 149, 62, 20, 209, 15, 191, 40, 210, 180, 190, 4, 134, 102, 190, 124, 200, 229, 62, 210, 151, 64, 62, 222, 198, 118, 190, 177, 222, 35, 190, 132, 42, 88, 62, 10, 174, 24, 189, 127, 44, 87, 191, 151, 183, 180, 189, 137, 117, 211, 190, 67, 47, 33, 62, 193, 17, 61, 61, 199, 213, 70, 189, 35, 112, 128, 190, 198, 0, 118, 191, 40, 54, 225, 190, 241, 210, 10, 190, 8, 127, 51, 191, 185, 25, 43, 190, 152, 69, 204, 190, 243, 27, 73, 190, 87, 213, 69, 189, 121, 165, 30, 191, 181, 242, 61, 62, 84, 81, 133, 62, 185, 188, 32, 188, 142, 252, 239, 189, 44, 95, 58, 62, 23, 15, 221, 190, 208, 90, 207, 189, 55, 171, 207, 190, 118, 129, 55, 189, 12, 204, 108, 62, 187, 160, 75, 62, 159, 86, 177, 62, 12, 83, 222, 62, 232, 27, 127, 62, 37, 187, 75, 62, 102, 255, 78, 190, 92, 25, 205, 62, 190, 153, 162, 191, 227, 156, 141, 189, 97, 117, 130, 190, 209, 20, 127, 189, 113, 23, 200, 188, 155, 34, 155, 190, 64, 40, 12, 188, 126, 65, 161, 62, 248, 195, 51, 61, 117, 187, 34, 62, 219, 171, 165, 190, 89, 225, 176, 191, 164, 56, 74, 190, 165, 109, 195, 190, 204, 63, 23, 189, 168, 10, 24, 190, 161, 175, 26, 190, 160, 237, 148, 61, 156, 249, 137, 189, 109, 169, 182, 189, 156, 43, 179, 188, 228, 4, 186, 61, 115, 245, 166, 60, 35, 28, 23, 62, 100, 224, 192, 189, 18, 235, 7, 62, 129, 68, 25, 61, 105, 231, 243, 189, 53, 190, 203, 189, 34, 170, 207, 189, 86, 82, 13, 190, 100, 96, 55, 61, 31, 14, 74, 61, 249, 89, 166, 188, 96, 88, 255, 189, 61, 134, 164, 187, 109, 165, 131, 189, 55, 110, 56, 61, 61, 155, 101, 189, 229, 205, 200, 189, 191, 77, 105, 189, 56, 155, 189, 60, 27, 131, 253, 189, 46, 214, 25, 190, 117, 34, 217, 189, 204, 92, 13, 61, 150, 159, 52, 61, 135, 143, 160, 189, 188, 150, 133, 62, 12, 223, 237, 190, 198, 85, 131, 190, 172, 253, 17, 62, 52, 249, 57, 191, 104, 209, 167, 60, 249, 240, 54, 59, 217, 109, 78, 190, 42, 205, 150, 60, 44, 148, 2, 62, 129, 137, 79, 62, 213, 12, 49, 61, 23, 237, 39, 61, 99, 221, 48, 190, 48, 206, 245, 189, 139, 83, 200, 62, 46, 100, 43, 191, 205, 101, 229, 190, 48, 110, 236, 189, 97, 171, 171, 189, 147, 71, 126, 61, 240, 136, 235, 187, 16, 176, 132, 190, 252, 87, 198, 62, 174, 230, 25, 62, 22, 159, 190, 190, 234, 104, 133, 190, 202, 25, 30, 191, 86, 130, 6, 190, 161, 210, 57, 190, 53, 202, 174, 190, 184, 174, 14, 189, 127, 142, 209, 61, 4, 137, 132, 190, 172, 145, 213, 187, 39, 16, 151, 190, 178, 69, 144, 189, 116, 124, 69, 190, 91, 108, 21, 62, 64, 248, 252, 61, 96, 135, 58, 62, 194, 249, 135, 62, 103, 133, 244, 62, 135, 166, 233, 61, 64, 123, 198, 61, 12, 248, 69, 62, 120, 165, 21, 190, 78, 170, 206, 62, 227, 226, 82, 190, 148, 123, 113, 190, 131, 248, 221, 189, 237, 168, 159, 61, 46, 166, 121, 189, 62, 92, 229, 60, 74, 193, 2, 62, 23, 202, 184, 61, 81, 95, 198, 61, 119, 59, 174, 61, 103, 33, 5, 190, 237, 55, 140, 190, 114, 188, 17, 61, 106, 98, 89, 190, 157, 133, 184, 190, 40, 148, 156, 62, 219, 101, 119, 61, 78, 124, 35, 188, 102, 237, 124, 62, 114, 167, 151, 62, 183, 138, 107, 189, 212, 156, 209, 189, 101, 191, 103, 189, 166, 232, 33, 61, 159, 14, 131, 62, 37, 116, 41, 62, 60, 248, 112, 62, 147, 82, 162, 62, 178, 155, 158, 62, 81, 86, 151, 61, 152, 157, 244, 189, 244, 179, 137, 62, 27, 17, 28, 190, 192, 71, 68, 62, 130, 20, 42, 188, 245, 241, 97, 61, 117, 63, 130, 62, 21, 247, 137, 190, 168, 4, 141, 61, 141, 175, 188, 61, 169, 163, 105, 62, 27, 54, 176, 62, 175, 155, 42, 62, 50, 4, 2, 62, 77, 127, 163, 189, 31, 189, 139, 61, 148, 110, 221, 189, 233, 180, 187, 187, 226, 231, 52, 190, 105, 149, 126, 60, 87, 124, 49, 189, 165, 58, 145, 61, 211, 213, 74, 190, 59, 237, 83, 187, 203, 19, 14, 189, 50, 66, 107, 189, 69, 151, 221, 61, 233, 22, 70, 61, 106, 77, 1, 189, 143, 206, 161, 189, 210, 118, 238, 189, 92, 157, 128, 189, 230, 225, 19, 62, 216, 29, 241, 58, 138, 91, 25, 189, 173, 137, 19, 190, 82, 215, 181, 189, 128, 80, 20, 62, 68, 39, 243, 189, 23, 17, 5, 189, 18, 183, 2, 190, 220, 166, 41, 62, 230, 213, 207, 61, 139, 81, 184, 189, 40, 44, 178, 61, 86, 33, 211, 189, 132, 155, 206, 189, 202, 202, 62, 61, 133, 144, 161, 189, 207, 156, 110, 62, 142, 249, 144, 190, 131, 223, 154, 190, 232, 91, 197, 189, 8, 99, 173, 62, 110, 136, 137, 61, 57, 79, 20, 190, 63, 31, 247, 61, 242, 154, 112, 190, 19, 223, 35, 63, 0, 148, 135, 62, 208, 97, 49, 62, 204, 185, 12, 63, 110, 187, 86, 188, 46, 136, 167, 62, 49, 171, 150, 190, 176, 77, 7, 62, 126, 96, 198, 191, 167, 152, 186, 59, 23, 216, 1, 190, 118, 187, 180, 189, 182, 223, 153, 187, 118, 89, 189, 190, 3, 136, 29, 62, 144, 250, 136, 62, 240, 50, 101, 190, 217, 205, 1, 190, 37, 52, 179, 61, 158, 0, 155, 191, 107, 38, 174, 190, 207, 157, 247, 190, 205, 225, 132, 191, 27, 106, 110, 62, 30, 124, 120, 191, 42, 186, 195, 61, 178, 98, 39, 62, 31, 224, 137, 190, 95, 140, 37, 190, 138, 226, 152, 190, 242, 93, 46, 191, 38, 12, 14, 61, 54, 12, 203, 190, 254, 94, 4, 191, 82, 130, 237, 62, 28, 82, 63, 61, 60, 142, 190, 191, 108, 106, 34, 191, 255, 203, 5, 190, 97, 115, 61, 187, 183, 133, 210, 61, 184, 228, 30, 62, 232, 125, 131, 190, 1, 26, 8, 189, 198, 121, 167, 62, 96, 90, 7, 190, 211, 146, 16, 189, 75, 226, 222, 191, 94, 212, 198, 61, 35, 45, 185, 188, 133, 195, 37, 190, 93, 53, 208, 61, 203, 138, 139, 188, 51, 13, 73, 62, 61, 214, 224, 190, 87, 49, 34, 190, 98, 101, 12, 62, 253, 240, 68, 190, 116, 114, 22, 61, 92, 0, 69, 62, 148, 197, 170, 189, 28, 96, 115, 190, 8, 252, 209, 190, 70, 188, 232, 61, 201, 226, 161, 189, 152, 191, 206, 190, 127, 255, 176, 190, 1, 3, 231, 61, 233, 53, 150, 189, 23, 245, 226, 190, 205, 159, 183, 189, 107, 115, 30, 62, 54, 208, 43, 191, 212, 125, 187, 61, 63, 131, 227, 190, 179, 214, 78, 189, 76, 192, 131, 189, 43, 13, 9, 62, 232, 131, 116, 62, 185, 122, 196, 187, 215, 203, 150, 188, 127, 251, 165, 62, 114, 173, 27, 62, 81, 27, 76, 191, 199, 207, 97, 60, 86, 125, 196, 189, 87, 145, 177, 189, 142, 72, 196, 61, 255, 169, 44, 189, 181, 96, 103, 60, 250, 217, 205, 188, 78, 139, 143, 189, 236, 59, 66, 189, 46, 91, 1, 188, 93, 79, 232, 189, 250, 113, 230, 189, 202, 107, 228, 60, 152, 126, 10, 190, 19, 143, 190, 189, 183, 21, 77, 190, 43, 3, 250, 187, 39, 133, 99, 189, 121, 245, 21, 62, 144, 255, 25, 190, 89, 185, 232, 189, 117, 206, 66, 190, 140, 202, 5, 62, 167, 97, 216, 189, 141, 210, 251, 61, 175, 11, 205, 61, 252, 199, 19, 62, 161, 113, 218, 61, 123, 77, 250, 61, 112, 100, 15, 190, 183, 175, 194, 189, 150, 78, 44, 61, 185, 177, 58, 189, 28, 164, 134, 61, 34, 219, 66, 190, 37, 182, 232, 189, 126, 83, 210, 61, 184, 31, 228, 62, 40, 127, 172, 61, 7, 96, 191, 189, 242, 53, 156, 190, 100, 37, 48, 62, 133, 4, 59, 60, 249, 252, 144, 62, 88, 214, 204, 191, 44, 13, 199, 190, 150, 44, 19, 59, 198, 238, 89, 191, 101, 99, 195, 189, 152, 5, 56, 190, 249, 66, 226, 62, 161, 173, 12, 62, 24, 161, 7, 190, 103, 138, 189, 62, 95, 147, 58, 191, 135, 127, 173, 189, 15, 191, 237, 191, 174, 242, 43, 62, 194, 3, 12, 62, 82, 252, 87, 190, 192, 71, 5, 62, 172, 142, 140, 61, 239, 4, 5, 190, 213, 70, 138, 189, 192, 187, 228, 62, 9, 160, 153, 61, 230, 146, 159, 189, 29, 143, 107, 189, 198, 211, 108, 62, 121, 33, 166, 188, 53, 202, 99, 62, 194, 68, 141, 62, 218, 93, 153, 62, 47, 5, 136, 190, 219, 224, 49, 62, 37, 53, 148, 189, 217, 245, 176, 62, 43, 22, 52, 62, 125, 37, 32, 190, 53, 181, 245, 188, 182, 237, 200, 190, 137, 246, 85, 188, 210, 134, 83, 191, 31, 53, 216, 189, 207, 185, 37, 190, 15, 84, 97, 62, 105, 64, 115, 62, 134, 239, 194, 190, 221, 219, 219, 61, 207, 209, 173, 190, 132, 243, 74, 190, 148, 140, 149, 188, 211, 253, 43, 62, 16, 78, 66, 62, 85, 184, 248, 61, 28, 94, 221, 189, 52, 108, 5, 190, 51, 243, 92, 62, 78, 180, 148, 61, 117, 25, 67, 62, 168, 25, 91, 62, 146, 96, 185, 190, 130, 164, 23, 62, 85, 151, 247, 189, 181, 189, 92, 190, 44, 69, 44, 189, 93, 96, 181, 61, 155, 105, 151, 190, 47, 209, 115, 62, 168, 210, 137, 61, 224, 192, 151, 189, 116, 78, 28, 190, 12, 158, 208, 62, 244, 186, 181, 62, 58, 18, 69, 62, 98, 16, 236, 189, 220, 16, 53, 62, 170, 223, 155, 191, 165, 18, 142, 62, 55, 167, 251, 61, 127, 168, 27, 62, 84, 32, 241, 189, 242, 91, 152, 190, 168, 9, 62, 62, 145, 215, 242, 61, 50, 172, 4, 191, 79, 116, 70, 190, 182, 36, 150, 62, 232, 40, 33, 62, 181, 10, 247, 189, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 43, 117, 62, 164, 217, 76, 62, 33, 38, 73, 190, 188, 99, 18, 62, 112, 119, 14, 190, 69, 36, 6, 62, 91, 117, 177, 190, 61, 255, 239, 61, 227, 160, 193, 61, 6, 132, 87, 62, 3, 18, 250, 61, 179, 6, 157, 61, 223, 226, 93, 62, 89, 83, 11, 61, 67, 77, 212, 61, 107, 47, 13, 62, 103, 63, 220, 189, 253, 197, 156, 189, 239, 155, 173, 62, 172, 168, 6, 190, 116, 118, 18, 62, 232, 138, 197, 62, 248, 25, 203, 62, 140, 177, 242, 189, 215, 247, 74, 62, 53, 63, 183, 62, 2, 225, 125, 61, 142, 160, 184, 189, 107, 164, 189, 60, 8, 169, 225, 61, 251, 106, 148, 190, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 228, 8, 63, 142, 11, 27, 191, 248, 234, 35, 62, 1, 43, 30, 63, 5, 66, 33, 61, 65, 117, 156, 62, 111, 51, 16, 63, 247, 135, 211, 62, 225, 99, 32, 63, 3, 149, 76, 63, 25, 87, 183, 63, 122, 169, 124, 63, 230, 152, 72, 62, 206, 252, 207, 62, 52, 220, 255, 189, 54, 203, 253, 189, 110, 61, 93, 191, 61, 70, 15, 191, 32, 104, 49, 191, 82, 96, 225, 189, 3, 195, 2, 191, 122, 222, 52, 190, 39, 50, 111, 190, 45, 198, 143, 189, 76, 192, 63, 191, 233, 56, 112, 63, 152, 15, 108, 62, 227, 117, 136, 189, 234, 219, 113, 191, 209, 98, 53, 190, 183, 107, 216, 62, 212, 96, 26, 189, 234, 226, 150, 62, 254, 46, 171, 189, 214, 124, 136, 62, 19, 29, 225, 187, 20, 229, 19, 190, 209, 39, 21, 62, 220, 126, 104, 189, 8, 40, 49, 61, 203, 200, 10, 190, 156, 67, 21, 62, 162, 123, 218, 62, 110, 22, 146, 62, 208, 69, 190, 190, 66, 27, 143, 60, 47, 185, 87, 190, 64, 133, 232, 189, 123, 153, 162, 62, 145, 251, 152, 61, 24, 16, 58, 61, 243, 97, 226, 187, 8, 42, 117, 62, 134, 2, 166, 190, 194, 220, 99, 190, 68, 22, 142, 188, 179, 226, 70, 61, 98, 153, 56, 61, 246, 198, 109, 190, 75, 151, 35, 62, 179, 129, 0, 188, 40, 163, 239, 188, 76, 84, 110, 189, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 111, 6, 60, 125, 209, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 222, 202, 62, 198, 239, 50, 191, 104, 120, 232, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {119, 93, 142, 62, 98, 236, 153, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}