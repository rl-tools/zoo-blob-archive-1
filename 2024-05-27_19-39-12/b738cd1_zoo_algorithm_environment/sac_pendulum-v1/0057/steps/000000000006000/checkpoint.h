// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 205, 239, 62, 221, 76, 68, 63, 214, 177, 41, 62, 255, 243, 83, 62, 247, 17, 14, 63, 230, 13, 73, 190, 240, 59, 235, 190, 65, 55, 125, 191, 26, 182, 161, 190, 96, 90, 160, 190, 116, 153, 43, 191, 228, 42, 151, 62, 138, 187, 86, 61, 136, 68, 215, 62, 68, 119, 10, 63, 96, 4, 189, 62, 234, 55, 73, 190, 13, 179, 19, 63, 9, 168, 247, 189, 120, 41, 62, 62, 37, 174, 14, 63, 168, 207, 79, 190, 50, 55, 4, 62, 181, 60, 184, 190, 133, 75, 57, 62, 86, 125, 12, 63, 119, 143, 234, 190, 104, 13, 71, 63, 166, 156, 219, 190, 160, 30, 163, 190, 223, 247, 93, 63, 190, 9, 134, 63, 49, 181, 133, 62, 30, 126, 207, 190, 46, 146, 82, 62, 167, 240, 93, 190, 195, 251, 222, 190, 77, 120, 13, 63, 77, 125, 10, 62, 201, 53, 25, 63, 64, 83, 143, 63, 52, 152, 9, 62, 250, 131, 34, 191, 35, 23, 163, 190, 150, 45, 193, 190, 176, 249, 24, 190, 115, 96, 161, 62, 4, 183, 150, 190, 28, 171, 237, 62, 114, 158, 109, 190, 20, 4, 142, 190, 223, 207, 65, 190, 248, 235, 84, 191, 147, 42, 140, 189, 114, 37, 36, 191, 49, 110, 153, 63, 57, 6, 25, 63, 174, 186, 191, 62, 152, 209, 81, 191, 214, 30, 71, 62, 97, 145, 96, 190, 12, 126, 61, 63, 148, 138, 229, 62, 144, 244, 62, 190, 152, 19, 226, 62, 179, 160, 6, 191, 22, 112, 54, 62, 94, 248, 61, 63, 139, 2, 74, 62, 130, 1, 22, 63, 24, 34, 86, 191, 166, 245, 231, 190, 76, 68, 80, 63, 123, 164, 15, 190, 237, 254, 168, 190, 163, 80, 38, 191, 147, 165, 217, 190, 159, 16, 175, 190, 14, 49, 5, 191, 33, 123, 65, 62, 83, 194, 239, 62, 100, 76, 32, 63, 4, 158, 209, 190, 120, 17, 39, 190, 33, 157, 252, 188, 116, 226, 83, 190, 139, 106, 2, 63, 51, 21, 114, 190, 253, 85, 48, 62, 160, 34, 196, 62, 200, 222, 68, 63, 147, 32, 75, 191, 185, 31, 212, 190, 193, 133, 150, 190, 60, 205, 169, 62, 4, 19, 21, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 16, 39, 191, 251, 122, 220, 62, 99, 0, 136, 189, 181, 196, 41, 191, 184, 130, 165, 62, 9, 90, 170, 190, 26, 99, 3, 191, 139, 161, 34, 190, 105, 179, 239, 190, 234, 2, 135, 62, 153, 132, 136, 190, 95, 203, 120, 62, 15, 18, 33, 63, 109, 131, 70, 60, 248, 95, 217, 190, 245, 191, 18, 62, 145, 106, 230, 190, 82, 145, 25, 63, 186, 165, 214, 190, 120, 47, 66, 62, 250, 14, 21, 191, 127, 108, 29, 61, 228, 230, 251, 62, 175, 31, 233, 190, 93, 12, 243, 62, 107, 31, 252, 190, 175, 19, 228, 62, 139, 124, 34, 63, 29, 71, 211, 190, 173, 96, 191, 190, 74, 243, 2, 191, 233, 139, 116, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 164, 41, 189, 222, 106, 240, 189, 114, 203, 136, 62, 115, 147, 219, 61, 12, 145, 222, 189, 229, 96, 132, 189, 217, 182, 140, 189, 94, 203, 85, 61, 252, 43, 245, 189, 127, 144, 194, 189, 38, 213, 242, 190, 154, 146, 137, 189, 0, 0, 102, 188, 7, 93, 114, 190, 37, 88, 13, 190, 137, 229, 150, 190, 172, 220, 1, 189, 81, 233, 44, 62, 171, 122, 63, 189, 192, 253, 61, 62, 181, 85, 6, 190, 247, 170, 167, 61, 217, 96, 208, 189, 156, 98, 163, 187, 25, 230, 86, 61, 82, 81, 247, 189, 52, 116, 173, 61, 112, 3, 19, 62, 160, 49, 167, 61, 95, 166, 116, 190, 225, 123, 134, 61, 237, 18, 164, 189, 252, 80, 187, 61, 66, 155, 104, 62, 62, 66, 5, 62, 103, 174, 7, 191, 151, 156, 88, 61, 3, 120, 156, 61, 37, 6, 161, 62, 55, 76, 128, 188, 20, 37, 201, 189, 180, 140, 31, 190, 246, 11, 246, 62, 107, 85, 251, 61, 224, 241, 146, 189, 210, 126, 78, 62, 107, 22, 194, 62, 34, 245, 132, 62, 182, 122, 142, 190, 147, 143, 32, 61, 233, 70, 225, 190, 244, 1, 169, 190, 209, 87, 116, 62, 114, 30, 136, 190, 213, 109, 219, 61, 34, 108, 162, 190, 98, 4, 95, 189, 47, 192, 139, 62, 122, 210, 119, 189, 250, 140, 64, 62, 154, 108, 174, 61, 201, 56, 78, 191, 76, 176, 131, 190, 102, 132, 65, 190, 247, 220, 41, 63, 113, 91, 150, 190, 205, 144, 4, 190, 20, 115, 171, 189, 201, 6, 167, 60, 149, 189, 28, 62, 250, 226, 116, 61, 197, 40, 189, 189, 2, 247, 5, 189, 100, 217, 30, 189, 13, 41, 193, 62, 238, 159, 176, 190, 85, 140, 13, 190, 108, 150, 82, 62, 227, 22, 52, 190, 174, 243, 130, 189, 0, 38, 239, 61, 90, 190, 74, 190, 54, 107, 60, 190, 46, 51, 129, 189, 196, 31, 243, 188, 92, 164, 170, 188, 117, 239, 14, 61, 97, 152, 149, 190, 127, 212, 159, 189, 124, 12, 189, 188, 112, 246, 71, 190, 37, 224, 162, 61, 48, 107, 106, 61, 88, 101, 113, 189, 181, 20, 90, 190, 108, 0, 211, 188, 0, 46, 50, 191, 178, 15, 196, 189, 149, 248, 58, 190, 69, 6, 133, 62, 243, 40, 119, 62, 190, 84, 84, 190, 143, 147, 153, 190, 73, 41, 166, 61, 192, 93, 54, 62, 121, 177, 157, 62, 201, 30, 115, 191, 213, 26, 234, 61, 195, 188, 90, 190, 162, 10, 184, 190, 65, 13, 27, 191, 232, 145, 209, 189, 96, 211, 150, 61, 129, 10, 96, 189, 80, 110, 23, 62, 117, 8, 189, 62, 230, 113, 67, 190, 108, 15, 90, 62, 31, 168, 248, 189, 123, 244, 96, 61, 53, 91, 111, 62, 218, 106, 204, 190, 166, 239, 222, 61, 88, 150, 86, 61, 188, 240, 167, 189, 253, 241, 156, 189, 36, 68, 183, 62, 105, 136, 187, 61, 244, 118, 29, 190, 160, 211, 218, 187, 159, 252, 164, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 254, 176, 143, 61, 173, 224, 149, 60, 44, 175, 200, 189, 127, 172, 37, 62, 124, 152, 21, 61, 151, 111, 28, 61, 219, 59, 0, 190, 67, 154, 63, 188, 40, 142, 33, 190, 65, 123, 79, 188, 103, 154, 143, 187, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 176, 76, 9, 190, 220, 255, 42, 190, 14, 24, 250, 189, 224, 83, 111, 60, 130, 112, 19, 62, 141, 175, 20, 190, 119, 204, 255, 61, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 81, 52, 141, 60, 122, 233, 223, 61, 184, 104, 48, 61, 232, 26, 146, 61, 168, 172, 2, 190, 176, 143, 17, 190, 14, 195, 42, 189, 140, 190, 235, 60, 242, 143, 235, 61, 185, 91, 235, 61, 246, 27, 196, 190, 47, 201, 49, 60, 153, 124, 167, 190, 179, 2, 136, 189, 121, 0, 17, 61, 238, 178, 204, 61, 33, 208, 170, 189, 160, 67, 19, 189, 21, 168, 2, 190, 135, 191, 80, 61, 212, 86, 9, 190, 100, 105, 177, 61, 70, 202, 108, 190, 146, 63, 172, 59, 73, 223, 229, 189, 46, 16, 174, 61, 0, 135, 245, 189, 185, 196, 241, 188, 110, 160, 2, 62, 134, 179, 135, 189, 40, 161, 62, 62, 252, 173, 224, 60, 206, 190, 233, 62, 223, 250, 163, 190, 55, 252, 121, 62, 85, 139, 137, 190, 143, 24, 146, 189, 217, 52, 103, 62, 85, 218, 83, 62, 200, 10, 205, 188, 92, 171, 99, 189, 93, 79, 100, 189, 226, 236, 109, 62, 213, 248, 226, 189, 229, 227, 130, 190, 158, 194, 76, 62, 69, 70, 128, 190, 201, 16, 28, 61, 72, 25, 194, 189, 41, 220, 127, 62, 101, 212, 245, 187, 162, 77, 134, 62, 253, 210, 33, 61, 124, 224, 111, 187, 159, 237, 193, 189, 119, 179, 138, 62, 147, 145, 68, 189, 66, 59, 91, 190, 34, 94, 149, 190, 148, 241, 121, 60, 173, 142, 19, 62, 230, 197, 88, 61, 31, 92, 120, 62, 224, 225, 3, 190, 136, 160, 66, 191, 53, 96, 27, 62, 71, 238, 34, 190, 255, 227, 216, 59, 70, 164, 83, 62, 191, 196, 25, 190, 184, 250, 239, 189, 13, 212, 224, 189, 112, 94, 18, 187, 123, 145, 84, 62, 186, 185, 66, 191, 129, 151, 175, 189, 209, 180, 163, 60, 197, 176, 114, 190, 243, 138, 35, 191, 117, 129, 174, 190, 9, 114, 84, 190, 147, 207, 221, 189, 52, 209, 71, 62, 53, 103, 12, 62, 34, 84, 55, 189, 191, 160, 13, 188, 220, 17, 128, 61, 46, 177, 211, 61, 30, 161, 32, 62, 165, 126, 11, 191, 175, 157, 86, 62, 64, 239, 206, 61, 244, 149, 194, 189, 100, 206, 228, 189, 224, 94, 2, 188, 127, 91, 28, 61, 168, 190, 94, 189, 52, 94, 104, 62, 208, 123, 57, 190, 83, 184, 240, 61, 50, 198, 4, 189, 168, 181, 206, 61, 244, 189, 192, 60, 169, 254, 200, 189, 123, 62, 230, 189, 8, 81, 157, 189, 108, 106, 228, 190, 63, 28, 65, 189, 252, 190, 51, 61, 71, 246, 248, 189, 14, 127, 70, 61, 222, 46, 39, 62, 15, 125, 0, 62, 170, 35, 218, 61, 201, 199, 122, 190, 242, 183, 241, 188, 3, 90, 164, 190, 124, 36, 192, 61, 69, 210, 143, 189, 37, 182, 17, 190, 173, 142, 36, 189, 79, 96, 64, 62, 140, 11, 137, 186, 251, 42, 141, 62, 53, 24, 9, 62, 75, 40, 120, 60, 33, 81, 193, 189, 86, 234, 164, 61, 119, 244, 95, 62, 66, 119, 172, 188, 37, 110, 9, 188, 240, 247, 193, 189, 37, 186, 102, 189, 107, 53, 126, 189, 67, 204, 15, 189, 37, 13, 25, 190, 183, 97, 22, 190, 137, 177, 155, 190, 146, 93, 96, 62, 37, 69, 16, 62, 223, 183, 177, 62, 160, 53, 163, 58, 49, 18, 138, 61, 80, 49, 48, 62, 120, 83, 250, 189, 251, 129, 132, 189, 161, 20, 14, 190, 125, 25, 123, 190, 213, 150, 109, 189, 254, 152, 252, 61, 222, 22, 44, 62, 158, 111, 154, 189, 124, 30, 100, 190, 229, 97, 229, 60, 34, 14, 71, 189, 158, 52, 1, 190, 23, 105, 169, 60, 88, 16, 235, 189, 192, 142, 223, 189, 67, 12, 22, 191, 50, 234, 24, 191, 231, 245, 246, 189, 105, 91, 21, 191, 130, 76, 23, 61, 107, 251, 92, 189, 193, 108, 35, 190, 15, 1, 113, 190, 255, 53, 194, 189, 79, 197, 244, 61, 23, 192, 76, 62, 242, 152, 82, 191, 7, 174, 197, 188, 41, 210, 6, 62, 174, 239, 178, 190, 5, 242, 164, 191, 201, 140, 48, 188, 28, 140, 141, 190, 252, 107, 50, 62, 61, 218, 57, 62, 205, 244, 115, 62, 212, 100, 244, 189, 251, 94, 79, 61, 244, 9, 181, 61, 74, 123, 25, 62, 139, 249, 156, 61, 234, 54, 94, 191, 229, 13, 240, 61, 119, 154, 135, 188, 195, 13, 235, 189, 150, 65, 216, 61, 166, 193, 174, 61, 34, 167, 115, 62, 164, 229, 202, 190, 120, 37, 192, 62, 31, 104, 246, 190, 85, 17, 246, 60, 225, 111, 152, 61, 202, 95, 118, 189, 128, 234, 235, 189, 227, 128, 159, 62, 238, 110, 152, 189, 77, 124, 26, 190, 170, 71, 44, 191, 60, 171, 46, 62, 84, 83, 172, 62, 167, 56, 123, 189, 12, 164, 144, 191, 73, 241, 180, 189, 30, 66, 224, 60, 162, 68, 41, 190, 13, 220, 129, 61, 51, 33, 60, 190, 13, 223, 92, 190, 111, 194, 13, 62, 0, 11, 155, 61, 217, 1, 101, 190, 179, 195, 147, 190, 101, 13, 75, 191, 201, 155, 132, 62, 178, 191, 80, 191, 138, 215, 29, 190, 102, 246, 237, 189, 54, 32, 53, 61, 1, 181, 77, 62, 187, 40, 173, 190, 3, 192, 173, 189, 113, 249, 205, 190, 175, 30, 17, 62, 159, 0, 141, 189, 82, 53, 134, 61, 124, 158, 109, 61, 249, 118, 81, 189, 204, 144, 137, 187, 166, 157, 148, 62, 210, 148, 149, 190, 56, 249, 140, 190, 155, 172, 217, 189, 2, 223, 40, 61, 180, 84, 16, 191, 6, 100, 168, 190, 239, 234, 119, 190, 162, 160, 3, 62, 254, 205, 99, 59, 59, 224, 186, 61, 190, 175, 229, 61, 84, 140, 199, 189, 40, 169, 224, 61, 20, 52, 220, 60, 141, 68, 140, 62, 7, 136, 193, 190, 202, 41, 157, 61, 46, 74, 68, 62, 191, 45, 64, 190, 62, 157, 78, 190, 211, 127, 22, 190, 128, 99, 1, 189, 67, 182, 75, 191, 63, 62, 255, 61, 200, 220, 26, 58, 100, 96, 43, 62, 124, 214, 2, 62, 76, 168, 84, 61, 201, 129, 120, 190, 56, 37, 35, 62, 98, 82, 85, 62, 96, 188, 113, 62, 81, 138, 92, 191, 72, 64, 89, 190, 238, 174, 84, 190, 230, 136, 224, 190, 104, 225, 14, 191, 133, 68, 189, 190, 169, 22, 132, 62, 196, 238, 80, 61, 16, 225, 229, 61, 34, 22, 85, 60, 104, 133, 155, 189, 56, 150, 25, 61, 69, 122, 163, 60, 124, 133, 126, 62, 12, 111, 60, 62, 10, 243, 94, 190, 176, 195, 110, 62, 203, 150, 105, 62, 200, 2, 85, 190, 236, 224, 188, 61, 168, 118, 193, 62, 151, 29, 149, 60, 28, 2, 178, 190, 164, 175, 23, 62, 173, 147, 178, 189, 72, 182, 48, 60, 96, 118, 17, 61, 112, 87, 111, 190, 92, 19, 42, 190, 116, 224, 156, 189, 127, 200, 5, 189, 151, 252, 3, 62, 64, 45, 84, 62, 134, 209, 130, 61, 114, 109, 150, 188, 149, 94, 108, 61, 62, 43, 206, 190, 223, 204, 22, 190, 156, 172, 141, 60, 180, 136, 17, 62, 67, 43, 166, 190, 177, 6, 17, 62, 127, 202, 211, 61, 157, 98, 69, 189, 91, 84, 128, 188, 91, 236, 28, 190, 26, 121, 101, 62, 96, 52, 100, 189, 66, 185, 123, 189, 115, 193, 194, 61, 190, 18, 99, 190, 3, 150, 88, 190, 153, 252, 198, 60, 58, 136, 200, 59, 171, 146, 47, 189, 147, 134, 214, 61, 140, 73, 133, 61, 210, 186, 143, 189, 112, 225, 93, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 136, 82, 180, 189, 61, 60, 41, 190, 3, 77, 182, 189, 124, 253, 152, 189, 204, 215, 28, 190, 155, 191, 210, 60, 15, 152, 2, 62, 160, 71, 36, 190, 36, 185, 17, 190, 151, 58, 38, 190, 26, 62, 32, 190, 28, 248, 149, 189, 121, 201, 104, 189, 223, 186, 200, 189, 90, 164, 199, 189, 125, 108, 231, 61, 65, 231, 249, 59, 38, 24, 53, 190, 199, 102, 42, 189, 19, 129, 23, 62, 142, 37, 44, 189, 242, 195, 128, 60, 104, 227, 161, 189, 77, 213, 108, 190, 89, 160, 149, 61, 17, 6, 17, 190, 6, 217, 58, 190, 10, 16, 160, 59, 62, 132, 227, 189, 13, 74, 169, 190, 96, 136, 127, 190, 205, 65, 131, 189, 144, 107, 63, 190, 118, 232, 215, 61, 144, 20, 254, 61, 68, 70, 130, 190, 30, 220, 173, 188, 132, 142, 250, 190, 70, 149, 159, 61, 63, 189, 75, 62, 82, 83, 14, 191, 201, 106, 168, 190, 156, 233, 238, 189, 67, 57, 169, 190, 28, 184, 5, 190, 87, 193, 144, 190, 9, 141, 12, 190, 242, 8, 128, 61, 5, 44, 171, 62, 140, 184, 103, 190, 69, 110, 217, 190, 214, 25, 112, 191, 55, 151, 18, 189, 181, 22, 9, 61, 111, 204, 23, 190, 129, 108, 54, 189, 147, 180, 36, 189, 179, 106, 244, 190, 97, 126, 211, 61, 241, 104, 220, 188, 210, 19, 57, 189, 195, 227, 8, 190, 77, 210, 235, 189, 192, 14, 50, 189, 73, 25, 33, 61, 185, 7, 20, 62, 148, 14, 122, 62, 54, 214, 106, 188, 204, 85, 136, 190, 115, 205, 170, 189, 10, 174, 24, 189, 210, 239, 250, 190, 160, 198, 82, 61, 63, 10, 185, 190, 232, 116, 118, 62, 94, 58, 159, 190, 93, 245, 251, 61, 104, 157, 126, 190, 211, 146, 124, 190, 151, 139, 167, 190, 133, 125, 56, 189, 18, 173, 179, 190, 198, 158, 157, 189, 9, 31, 127, 190, 243, 27, 73, 190, 94, 196, 152, 61, 191, 251, 209, 190, 163, 172, 89, 62, 220, 242, 87, 61, 228, 172, 166, 190, 171, 140, 4, 190, 151, 158, 252, 61, 226, 169, 41, 190, 82, 165, 12, 61, 22, 13, 161, 190, 25, 67, 7, 190, 70, 247, 181, 62, 254, 42, 116, 62, 168, 138, 242, 61, 95, 41, 74, 62, 135, 149, 194, 62, 55, 92, 131, 62, 151, 225, 89, 190, 132, 144, 90, 60, 205, 54, 35, 191, 255, 84, 223, 189, 5, 224, 163, 188, 151, 31, 60, 189, 59, 5, 198, 189, 165, 231, 165, 190, 125, 123, 143, 189, 25, 162, 92, 62, 126, 185, 243, 188, 45, 44, 110, 61, 171, 71, 230, 189, 193, 62, 55, 191, 193, 38, 96, 190, 95, 122, 174, 190, 204, 63, 23, 189, 168, 10, 24, 190, 161, 175, 26, 190, 160, 237, 148, 61, 156, 249, 137, 189, 109, 169, 182, 189, 156, 43, 179, 188, 228, 4, 186, 61, 115, 245, 166, 60, 35, 28, 23, 62, 100, 224, 192, 189, 18, 235, 7, 62, 129, 68, 25, 61, 105, 231, 243, 189, 53, 190, 203, 189, 34, 170, 207, 189, 86, 82, 13, 190, 100, 96, 55, 61, 31, 14, 74, 61, 249, 89, 166, 188, 96, 88, 255, 189, 61, 134, 164, 187, 109, 165, 131, 189, 55, 110, 56, 61, 61, 155, 101, 189, 229, 205, 200, 189, 191, 77, 105, 189, 56, 155, 189, 60, 27, 131, 253, 189, 46, 214, 25, 190, 117, 34, 217, 189, 204, 92, 13, 61, 150, 159, 52, 61, 132, 143, 214, 60, 76, 111, 64, 62, 66, 29, 128, 189, 150, 74, 79, 190, 243, 164, 35, 189, 20, 71, 136, 189, 113, 189, 165, 61, 85, 244, 52, 62, 45, 208, 25, 190, 42, 205, 150, 60, 172, 52, 210, 61, 136, 209, 250, 189, 52, 133, 239, 189, 44, 229, 123, 187, 33, 248, 42, 190, 242, 21, 233, 189, 187, 222, 157, 62, 224, 12, 34, 191, 155, 93, 213, 189, 245, 139, 162, 189, 0, 165, 99, 189, 63, 167, 110, 190, 128, 39, 10, 189, 85, 54, 37, 190, 15, 219, 140, 62, 211, 63, 56, 62, 195, 97, 144, 190, 250, 24, 182, 61, 73, 201, 69, 190, 159, 206, 28, 190, 109, 203, 49, 190, 222, 24, 134, 190, 242, 141, 59, 189, 236, 83, 147, 188, 227, 109, 113, 190, 223, 96, 134, 61, 35, 187, 95, 190, 89, 77, 116, 61, 150, 105, 77, 190, 49, 53, 131, 61, 55, 183, 171, 61, 127, 196, 167, 62, 14, 109, 52, 62, 8, 204, 187, 62, 146, 96, 222, 61, 160, 15, 22, 62, 157, 168, 28, 62, 172, 139, 91, 190, 220, 139, 58, 62, 203, 64, 198, 189, 136, 95, 100, 190, 96, 127, 3, 60, 207, 149, 72, 188, 4, 64, 165, 188, 144, 213, 133, 59, 180, 206, 243, 61, 66, 242, 249, 61, 229, 195, 188, 61, 49, 125, 156, 61, 118, 81, 107, 61, 67, 110, 82, 190, 119, 59, 36, 60, 212, 116, 211, 189, 192, 157, 202, 190, 163, 53, 159, 62, 36, 221, 111, 189, 220, 243, 64, 190, 187, 184, 83, 62, 85, 155, 25, 62, 52, 119, 182, 189, 44, 164, 171, 189, 149, 210, 213, 189, 169, 18, 33, 60, 167, 147, 160, 62, 164, 241, 178, 61, 40, 126, 85, 62, 44, 68, 164, 62, 159, 157, 199, 62, 101, 211, 62, 61, 155, 231, 33, 190, 166, 51, 164, 60, 206, 9, 138, 60, 109, 216, 85, 188, 141, 236, 67, 61, 3, 109, 118, 188, 240, 76, 130, 62, 213, 87, 140, 190, 50, 251, 121, 61, 18, 181, 228, 61, 37, 105, 61, 62, 223, 82, 131, 62, 157, 2, 184, 61, 81, 104, 10, 62, 217, 174, 171, 189, 245, 182, 51, 61, 148, 110, 221, 189, 66, 64, 187, 187, 48, 122, 52, 190, 105, 149, 126, 60, 35, 2, 34, 189, 165, 58, 145, 61, 211, 213, 74, 190, 59, 237, 83, 187, 203, 19, 14, 189, 50, 66, 107, 189, 69, 151, 221, 61, 15, 239, 89, 61, 240, 44, 198, 188, 143, 206, 161, 189, 210, 118, 238, 189, 128, 29, 120, 189, 230, 225, 19, 62, 211, 228, 248, 59, 36, 62, 17, 189, 173, 137, 19, 190, 82, 215, 181, 189, 128, 80, 20, 62, 79, 170, 241, 189, 23, 17, 5, 189, 18, 183, 2, 190, 63, 247, 41, 62, 97, 238, 225, 61, 45, 139, 182, 189, 40, 44, 178, 61, 231, 109, 209, 189, 132, 155, 206, 189, 134, 227, 80, 61, 14, 193, 2, 62, 193, 84, 26, 62, 211, 222, 13, 190, 186, 10, 95, 190, 108, 235, 125, 60, 254, 50, 198, 62, 212, 59, 214, 61, 15, 66, 161, 189, 206, 81, 158, 60, 166, 91, 153, 190, 178, 177, 68, 63, 73, 86, 66, 62, 190, 198, 233, 61, 122, 190, 222, 62, 210, 202, 130, 62, 133, 228, 137, 62, 198, 137, 2, 190, 171, 56, 244, 61, 193, 134, 67, 191, 8, 12, 23, 188, 63, 182, 220, 61, 50, 84, 67, 190, 37, 245, 135, 189, 105, 166, 88, 190, 225, 15, 160, 61, 15, 108, 49, 62, 8, 109, 73, 189, 232, 48, 53, 190, 229, 107, 20, 62, 208, 225, 88, 191, 175, 2, 77, 190, 235, 81, 132, 190, 168, 146, 63, 191, 160, 3, 10, 62, 78, 191, 164, 190, 125, 151, 98, 62, 37, 9, 2, 62, 56, 203, 116, 190, 156, 217, 245, 189, 3, 176, 195, 188, 154, 253, 72, 190, 44, 183, 15, 189, 174, 156, 244, 190, 114, 5, 2, 190, 150, 142, 162, 62, 65, 57, 130, 190, 69, 179, 158, 191, 233, 113, 121, 190, 28, 220, 187, 190, 215, 188, 147, 59, 162, 84, 83, 189, 18, 154, 64, 62, 17, 183, 133, 190, 9, 209, 85, 62, 115, 57, 76, 62, 7, 11, 23, 190, 121, 176, 207, 189, 202, 54, 173, 191, 176, 194, 130, 61, 45, 117, 214, 189, 56, 100, 3, 190, 111, 154, 247, 61, 91, 43, 92, 189, 255, 236, 55, 62, 255, 163, 56, 62, 69, 180, 236, 189, 202, 221, 180, 61, 78, 239, 235, 189, 182, 196, 10, 62, 8, 87, 134, 62, 144, 149, 150, 188, 34, 15, 126, 189, 97, 197, 77, 190, 100, 92, 153, 61, 66, 236, 167, 60, 214, 124, 73, 189, 237, 59, 148, 190, 67, 226, 180, 61, 4, 205, 238, 189, 144, 57, 76, 190, 179, 148, 223, 189, 229, 251, 204, 61, 105, 83, 102, 190, 59, 233, 32, 62, 140, 67, 155, 190, 59, 76, 200, 61, 44, 181, 144, 189, 134, 12, 215, 61, 166, 114, 107, 62, 114, 47, 76, 189, 64, 251, 28, 61, 176, 1, 142, 62, 95, 168, 82, 62, 249, 101, 14, 191, 219, 9, 33, 189, 185, 31, 63, 59, 87, 145, 177, 189, 142, 72, 196, 61, 255, 169, 44, 189, 181, 96, 103, 60, 250, 217, 205, 188, 78, 139, 143, 189, 236, 59, 66, 189, 46, 91, 1, 188, 93, 79, 232, 189, 250, 113, 230, 189, 202, 107, 228, 60, 152, 126, 10, 190, 19, 143, 190, 189, 183, 21, 77, 190, 43, 3, 250, 187, 39, 133, 99, 189, 121, 245, 21, 62, 144, 255, 25, 190, 89, 185, 232, 189, 117, 206, 66, 190, 140, 202, 5, 62, 167, 97, 216, 189, 141, 210, 251, 61, 175, 11, 205, 61, 252, 199, 19, 62, 161, 113, 218, 61, 123, 77, 250, 61, 112, 100, 15, 190, 183, 175, 194, 189, 150, 78, 44, 61, 185, 177, 58, 189, 28, 164, 134, 61, 18, 181, 34, 190, 195, 96, 127, 189, 88, 133, 169, 189, 198, 125, 111, 62, 152, 47, 8, 62, 79, 179, 184, 189, 5, 62, 210, 189, 158, 193, 69, 62, 151, 167, 101, 61, 23, 71, 69, 62, 146, 39, 189, 190, 35, 230, 172, 190, 235, 167, 85, 190, 77, 121, 4, 191, 210, 75, 124, 189, 209, 91, 23, 190, 240, 101, 137, 62, 186, 21, 43, 190, 237, 197, 93, 59, 114, 163, 62, 62, 24, 65, 31, 190, 139, 166, 195, 189, 122, 107, 158, 190, 116, 232, 70, 61, 48, 254, 194, 61, 164, 23, 37, 190, 10, 53, 163, 189, 0, 158, 132, 189, 140, 23, 210, 189, 56, 161, 79, 62, 195, 26, 159, 62, 65, 101, 54, 189, 168, 7, 36, 190, 85, 234, 134, 61, 162, 159, 82, 60, 43, 180, 85, 190, 30, 66, 39, 62, 109, 8, 7, 62, 60, 107, 115, 62, 22, 58, 84, 190, 125, 222, 119, 190, 238, 23, 243, 188, 6, 189, 199, 62, 181, 36, 139, 60, 227, 124, 0, 188, 49, 36, 113, 62, 98, 117, 161, 189, 201, 91, 235, 60, 112, 180, 23, 191, 244, 153, 104, 190, 238, 82, 149, 188, 43, 108, 58, 61, 201, 188, 128, 62, 240, 91, 241, 190, 191, 8, 57, 62, 192, 221, 130, 190, 131, 209, 13, 190, 24, 180, 152, 189, 50, 29, 221, 61, 178, 18, 45, 62, 168, 6, 196, 60, 5, 248, 1, 190, 46, 84, 162, 189, 87, 141, 36, 62, 1, 139, 47, 189, 234, 50, 156, 62, 95, 111, 178, 61, 220, 82, 123, 190, 43, 71, 202, 188, 14, 110, 88, 190, 50, 101, 172, 190, 154, 161, 12, 190, 216, 153, 221, 61, 71, 68, 48, 190, 139, 179, 172, 187, 83, 20, 117, 61, 197, 192, 67, 62, 1, 140, 133, 62, 146, 171, 90, 62, 125, 63, 171, 62, 74, 123, 20, 62, 25, 194, 27, 190, 253, 58, 115, 60, 11, 167, 70, 191, 27, 37, 251, 61, 251, 149, 20, 62, 108, 179, 2, 63, 181, 80, 79, 190, 59, 217, 43, 190, 255, 137, 147, 61, 189, 75, 129, 61, 190, 22, 103, 190, 47, 55, 164, 190, 121, 166, 34, 62, 206, 94, 185, 61, 225, 207, 106, 190, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 255, 43, 62, 231, 99, 95, 62, 66, 11, 36, 190, 143, 72, 204, 61, 112, 119, 14, 190, 107, 237, 152, 61, 202, 107, 177, 190, 147, 207, 181, 60, 222, 98, 180, 61, 14, 96, 51, 62, 2, 127, 15, 62, 90, 15, 188, 61, 223, 80, 67, 62, 21, 153, 190, 187, 226, 20, 45, 62, 107, 47, 13, 62, 99, 27, 172, 189, 216, 86, 104, 188, 74, 81, 128, 62, 172, 168, 6, 190, 173, 193, 40, 62, 254, 161, 168, 62, 183, 106, 169, 62, 51, 253, 229, 189, 50, 102, 8, 62, 131, 195, 119, 62, 233, 88, 17, 61, 142, 160, 184, 189, 31, 165, 50, 189, 182, 84, 12, 62, 254, 87, 215, 189, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 52, 20, 62, 108, 105, 42, 191, 65, 66, 69, 62, 170, 250, 8, 63, 5, 66, 33, 61, 93, 130, 30, 187, 95, 62, 149, 62, 122, 44, 167, 62, 133, 192, 196, 61, 158, 174, 213, 62, 57, 22, 57, 63, 145, 132, 103, 63, 83, 55, 174, 61, 14, 219, 182, 62, 104, 250, 146, 189, 54, 203, 253, 189, 201, 57, 38, 191, 183, 71, 111, 190, 21, 31, 7, 191, 82, 96, 225, 189, 4, 93, 166, 190, 5, 60, 45, 190, 181, 8, 84, 190, 203, 205, 143, 189, 70, 215, 247, 190, 192, 186, 65, 63, 80, 195, 45, 62, 227, 117, 136, 189, 12, 55, 219, 190, 239, 224, 23, 190, 7, 52, 199, 62, 212, 96, 26, 189, 69, 30, 39, 62, 116, 186, 140, 189, 21, 150, 132, 62, 209, 176, 130, 189, 20, 229, 19, 190, 156, 221, 26, 62, 87, 110, 139, 62, 111, 225, 23, 190, 150, 238, 52, 189, 115, 171, 182, 187, 58, 8, 21, 62, 132, 119, 10, 62, 31, 192, 187, 190, 184, 51, 57, 187, 187, 131, 90, 190, 64, 133, 232, 189, 67, 19, 18, 62, 127, 26, 112, 189, 131, 163, 178, 188, 243, 97, 226, 187, 18, 86, 10, 189, 211, 220, 93, 190, 95, 78, 75, 190, 115, 32, 142, 188, 161, 51, 70, 62, 255, 42, 45, 188, 147, 31, 52, 190, 75, 151, 35, 62, 159, 240, 173, 61, 130, 10, 129, 188, 92, 216, 42, 60, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 121, 122, 61, 106, 43, 34, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 45, 182, 190, 185, 128, 19, 191, 3, 79, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 106, 82, 191, 140, 253, 36, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}