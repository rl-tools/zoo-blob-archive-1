// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 194, 24, 62, 217, 52, 192, 62, 92, 133, 240, 61, 107, 12, 108, 62, 129, 36, 135, 62, 111, 205, 20, 190, 10, 40, 170, 190, 111, 222, 151, 190, 218, 5, 221, 190, 13, 69, 18, 191, 75, 6, 236, 190, 246, 155, 131, 62, 165, 15, 125, 189, 27, 213, 154, 190, 205, 203, 222, 62, 137, 195, 196, 62, 247, 160, 200, 190, 150, 140, 9, 63, 70, 79, 146, 61, 214, 82, 68, 190, 91, 159, 252, 62, 105, 228, 71, 62, 6, 138, 176, 62, 161, 239, 172, 190, 118, 138, 149, 62, 204, 232, 99, 62, 254, 176, 8, 191, 195, 208, 219, 62, 236, 151, 187, 188, 53, 124, 183, 190, 210, 58, 16, 63, 88, 240, 244, 62, 161, 36, 102, 62, 52, 8, 168, 190, 205, 103, 31, 62, 106, 24, 93, 190, 28, 117, 94, 190, 196, 206, 76, 189, 14, 119, 118, 62, 157, 108, 3, 63, 102, 116, 199, 62, 246, 33, 58, 62, 44, 221, 0, 191, 57, 98, 138, 62, 105, 218, 112, 60, 105, 131, 140, 190, 33, 134, 3, 63, 96, 247, 147, 59, 187, 32, 50, 62, 103, 114, 150, 189, 43, 104, 140, 190, 64, 147, 131, 190, 180, 173, 7, 191, 190, 235, 129, 190, 103, 98, 19, 191, 77, 58, 133, 62, 168, 110, 1, 63, 202, 92, 239, 62, 253, 97, 196, 190, 199, 54, 75, 62, 224, 69, 135, 190, 251, 127, 248, 62, 179, 117, 254, 62, 241, 190, 127, 60, 224, 176, 109, 62, 99, 234, 251, 190, 103, 227, 47, 61, 44, 89, 239, 60, 162, 167, 157, 62, 64, 141, 159, 62, 205, 180, 126, 190, 76, 4, 0, 191, 130, 221, 181, 62, 93, 93, 14, 62, 0, 176, 240, 190, 146, 77, 213, 190, 98, 50, 59, 62, 126, 161, 57, 190, 51, 99, 203, 190, 57, 249, 58, 61, 82, 154, 246, 62, 147, 124, 243, 62, 45, 166, 210, 189, 17, 46, 234, 189, 78, 119, 64, 62, 47, 248, 152, 190, 247, 0, 200, 62, 103, 172, 61, 190, 128, 115, 93, 189, 64, 50, 153, 61, 173, 235, 251, 62, 63, 191, 192, 190, 247, 57, 11, 191, 79, 95, 195, 190, 26, 28, 241, 189, 145, 63, 245, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 170, 19, 191, 51, 199, 236, 62, 2, 101, 238, 189, 146, 187, 179, 190, 45, 63, 252, 62, 143, 249, 168, 190, 185, 173, 249, 190, 112, 243, 219, 190, 149, 49, 164, 190, 218, 63, 100, 62, 186, 18, 75, 190, 49, 80, 170, 62, 142, 132, 187, 62, 254, 253, 171, 62, 38, 183, 166, 190, 207, 117, 14, 189, 63, 112, 162, 190, 179, 7, 11, 63, 93, 199, 253, 190, 247, 180, 181, 61, 238, 214, 15, 191, 24, 130, 39, 190, 203, 129, 10, 63, 99, 219, 38, 190, 49, 227, 236, 62, 37, 221, 198, 190, 159, 204, 245, 62, 192, 60, 19, 63, 61, 139, 197, 190, 129, 9, 138, 190, 72, 148, 131, 190, 77, 28, 139, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 139, 239, 188, 37, 248, 157, 188, 229, 69, 231, 61, 3, 227, 158, 61, 68, 119, 209, 59, 197, 193, 49, 189, 137, 55, 138, 187, 219, 148, 47, 62, 86, 215, 164, 60, 97, 114, 32, 190, 165, 79, 37, 190, 48, 46, 198, 189, 188, 234, 249, 188, 134, 84, 176, 189, 10, 96, 6, 61, 87, 139, 41, 190, 120, 242, 150, 61, 178, 185, 198, 189, 239, 62, 191, 61, 110, 154, 50, 61, 171, 158, 112, 189, 13, 205, 21, 62, 116, 83, 176, 61, 167, 186, 137, 189, 11, 216, 248, 60, 254, 239, 190, 59, 249, 104, 93, 186, 183, 58, 90, 189, 220, 119, 197, 61, 112, 48, 33, 190, 215, 150, 226, 60, 241, 70, 53, 189, 229, 88, 232, 60, 12, 233, 208, 61, 116, 21, 83, 61, 47, 241, 146, 189, 105, 127, 171, 61, 237, 69, 190, 189, 51, 115, 36, 62, 88, 227, 215, 61, 37, 193, 29, 61, 72, 186, 63, 189, 231, 233, 94, 189, 95, 238, 5, 189, 202, 246, 8, 190, 30, 181, 224, 189, 6, 102, 128, 61, 225, 137, 243, 61, 57, 90, 223, 188, 191, 124, 5, 189, 187, 204, 164, 189, 43, 8, 193, 189, 227, 157, 23, 62, 10, 149, 39, 190, 169, 241, 213, 61, 36, 168, 180, 187, 79, 65, 242, 188, 241, 118, 157, 61, 210, 200, 40, 59, 54, 161, 27, 62, 200, 135, 113, 189, 97, 211, 95, 189, 66, 194, 233, 61, 166, 219, 235, 188, 123, 157, 224, 61, 236, 51, 232, 189, 152, 250, 143, 61, 67, 72, 218, 187, 231, 183, 240, 61, 112, 220, 38, 62, 72, 20, 165, 61, 31, 206, 177, 189, 235, 112, 80, 189, 218, 252, 54, 189, 216, 252, 202, 61, 153, 113, 238, 189, 166, 42, 244, 61, 210, 183, 52, 62, 167, 19, 48, 190, 53, 19, 146, 188, 37, 198, 246, 61, 67, 215, 0, 60, 216, 229, 124, 189, 184, 136, 239, 188, 164, 28, 40, 59, 75, 160, 168, 188, 245, 111, 45, 62, 155, 243, 45, 190, 173, 38, 14, 190, 102, 148, 31, 189, 100, 238, 146, 188, 68, 240, 6, 62, 147, 164, 203, 61, 104, 245, 47, 189, 154, 158, 76, 189, 93, 50, 163, 61, 180, 213, 214, 60, 66, 188, 242, 189, 100, 224, 201, 189, 249, 88, 47, 61, 166, 236, 141, 60, 114, 122, 26, 190, 25, 133, 9, 190, 221, 101, 41, 189, 245, 122, 158, 57, 222, 184, 5, 62, 110, 199, 135, 189, 101, 155, 253, 61, 53, 244, 6, 190, 71, 49, 189, 58, 176, 183, 10, 190, 140, 221, 206, 61, 187, 78, 232, 189, 244, 233, 167, 189, 123, 120, 34, 62, 113, 24, 20, 62, 240, 223, 197, 60, 194, 205, 179, 61, 69, 134, 40, 190, 215, 143, 34, 190, 8, 80, 0, 62, 255, 197, 227, 189, 254, 127, 142, 59, 125, 247, 196, 189, 168, 55, 245, 60, 16, 191, 30, 188, 176, 177, 18, 62, 203, 28, 143, 59, 244, 118, 29, 190, 138, 83, 187, 187, 38, 88, 174, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 171, 235, 145, 61, 173, 224, 149, 60, 181, 238, 198, 189, 127, 172, 37, 62, 19, 123, 33, 61, 165, 191, 37, 61, 219, 59, 0, 190, 5, 108, 22, 188, 58, 241, 31, 190, 65, 123, 79, 188, 248, 104, 119, 58, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 47, 123, 7, 190, 220, 255, 42, 190, 99, 179, 249, 189, 55, 136, 127, 60, 30, 6, 22, 62, 65, 151, 19, 190, 116, 210, 1, 62, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 81, 52, 141, 60, 96, 254, 14, 62, 97, 130, 163, 61, 56, 20, 227, 61, 250, 138, 62, 189, 83, 7, 18, 190, 14, 195, 42, 189, 91, 249, 118, 61, 88, 137, 240, 61, 210, 1, 173, 61, 17, 246, 163, 189, 5, 84, 142, 61, 126, 132, 241, 189, 185, 41, 124, 187, 220, 232, 2, 61, 148, 111, 225, 61, 181, 38, 196, 189, 100, 132, 175, 59, 129, 23, 7, 190, 161, 153, 15, 190, 212, 86, 9, 190, 216, 243, 197, 61, 89, 66, 147, 189, 156, 214, 48, 189, 156, 64, 254, 189, 93, 80, 14, 62, 43, 95, 239, 189, 25, 94, 147, 189, 158, 252, 2, 62, 92, 119, 120, 189, 188, 229, 252, 61, 51, 159, 97, 61, 176, 221, 12, 190, 159, 85, 35, 190, 98, 25, 49, 62, 54, 91, 48, 190, 180, 174, 27, 188, 54, 158, 213, 61, 220, 105, 23, 62, 42, 175, 19, 61, 28, 36, 6, 187, 25, 243, 217, 189, 31, 116, 99, 60, 4, 49, 159, 188, 216, 184, 164, 61, 71, 204, 39, 62, 16, 123, 201, 189, 113, 61, 223, 61, 212, 75, 174, 189, 126, 129, 220, 61, 89, 21, 214, 61, 164, 158, 159, 61, 249, 167, 42, 60, 6, 237, 89, 61, 81, 145, 148, 61, 145, 0, 51, 62, 234, 189, 76, 189, 100, 63, 140, 189, 210, 0, 7, 190, 61, 205, 204, 189, 128, 91, 161, 61, 112, 102, 4, 62, 127, 207, 31, 62, 40, 13, 234, 188, 218, 81, 18, 190, 148, 234, 4, 62, 188, 82, 18, 62, 241, 11, 150, 189, 113, 195, 126, 61, 82, 194, 191, 189, 138, 2, 83, 188, 120, 35, 170, 189, 72, 50, 137, 189, 208, 31, 35, 62, 202, 147, 178, 189, 19, 86, 192, 188, 24, 148, 28, 189, 159, 173, 158, 189, 212, 176, 127, 189, 230, 229, 51, 190, 9, 127, 33, 190, 47, 98, 125, 189, 154, 12, 203, 61, 196, 162, 15, 61, 238, 149, 78, 59, 249, 26, 90, 189, 228, 195, 208, 189, 199, 56, 162, 61, 224, 22, 27, 62, 139, 99, 183, 189, 59, 20, 181, 61, 182, 194, 67, 61, 98, 58, 111, 188, 146, 43, 29, 189, 215, 108, 250, 188, 210, 118, 139, 189, 129, 107, 63, 189, 77, 53, 23, 62, 41, 11, 27, 190, 159, 151, 8, 62, 101, 108, 154, 60, 16, 56, 23, 61, 74, 101, 207, 59, 48, 143, 53, 189, 87, 178, 77, 189, 199, 13, 199, 189, 104, 34, 2, 190, 25, 142, 186, 189, 88, 32, 176, 189, 186, 199, 126, 189, 180, 242, 204, 60, 115, 205, 212, 61, 115, 83, 49, 62, 252, 49, 116, 60, 214, 176, 45, 190, 229, 221, 205, 189, 203, 162, 52, 190, 175, 8, 217, 61, 120, 193, 212, 189, 65, 247, 17, 190, 26, 203, 147, 189, 107, 41, 45, 62, 249, 119, 197, 189, 9, 120, 29, 62, 176, 249, 153, 61, 235, 75, 178, 59, 122, 171, 246, 189, 175, 130, 15, 62, 102, 50, 245, 60, 239, 15, 84, 189, 191, 156, 93, 189, 61, 14, 127, 59, 217, 174, 46, 59, 232, 82, 211, 189, 198, 5, 113, 189, 103, 212, 188, 189, 254, 163, 110, 188, 109, 55, 18, 190, 110, 129, 102, 61, 2, 182, 146, 61, 77, 16, 16, 62, 91, 27, 17, 189, 200, 103, 237, 188, 252, 48, 2, 62, 218, 250, 14, 189, 233, 142, 15, 190, 69, 209, 29, 190, 75, 220, 14, 190, 221, 105, 131, 188, 12, 14, 24, 62, 160, 221, 50, 189, 114, 188, 44, 61, 2, 51, 187, 189, 35, 216, 141, 189, 141, 31, 29, 190, 133, 229, 112, 189, 95, 2, 146, 61, 38, 37, 31, 61, 85, 191, 25, 59, 168, 193, 44, 190, 250, 112, 33, 61, 181, 131, 248, 189, 177, 104, 24, 190, 20, 92, 227, 189, 27, 24, 11, 190, 195, 154, 143, 189, 195, 226, 211, 189, 38, 19, 152, 189, 86, 168, 15, 61, 79, 18, 189, 61, 27, 22, 250, 189, 171, 243, 6, 61, 175, 149, 162, 61, 246, 115, 85, 189, 251, 130, 212, 189, 1, 81, 190, 61, 203, 171, 34, 190, 253, 162, 206, 61, 11, 248, 5, 62, 115, 10, 194, 61, 218, 72, 232, 182, 173, 62, 238, 189, 202, 255, 132, 188, 76, 118, 158, 61, 227, 101, 104, 61, 156, 170, 112, 61, 211, 114, 56, 61, 182, 55, 236, 189, 23, 171, 80, 59, 194, 99, 2, 62, 174, 74, 29, 61, 213, 20, 52, 62, 178, 77, 42, 62, 35, 25, 84, 60, 109, 41, 14, 62, 202, 112, 13, 190, 164, 171, 55, 189, 11, 36, 1, 62, 54, 151, 61, 61, 72, 237, 254, 61, 185, 185, 190, 61, 90, 95, 130, 60, 138, 23, 39, 190, 214, 181, 156, 60, 97, 165, 7, 62, 2, 71, 51, 61, 9, 154, 247, 189, 11, 121, 169, 189, 229, 117, 190, 61, 49, 39, 23, 189, 49, 85, 183, 189, 142, 131, 34, 190, 195, 41, 23, 190, 90, 139, 45, 190, 116, 38, 48, 190, 47, 65, 38, 190, 144, 88, 215, 188, 94, 110, 5, 62, 167, 126, 218, 61, 193, 165, 11, 190, 32, 23, 38, 61, 103, 107, 12, 190, 251, 127, 197, 61, 127, 118, 210, 61, 164, 135, 127, 61, 21, 81, 6, 190, 114, 39, 22, 190, 240, 193, 3, 62, 51, 60, 13, 190, 170, 92, 20, 62, 46, 76, 31, 62, 113, 183, 25, 61, 173, 195, 188, 58, 225, 8, 39, 62, 89, 50, 208, 61, 27, 66, 24, 190, 230, 93, 229, 189, 137, 216, 31, 60, 243, 205, 155, 189, 210, 60, 43, 190, 249, 141, 16, 190, 62, 124, 225, 61, 64, 178, 50, 189, 216, 15, 248, 60, 2, 125, 45, 62, 80, 134, 37, 189, 122, 32, 136, 188, 248, 171, 200, 60, 135, 37, 45, 62, 19, 88, 3, 60, 3, 138, 254, 60, 63, 176, 189, 60, 189, 90, 185, 189, 136, 200, 7, 190, 36, 182, 52, 190, 198, 34, 151, 189, 93, 40, 146, 189, 51, 78, 33, 62, 189, 245, 230, 61, 209, 74, 140, 188, 134, 168, 19, 189, 168, 229, 221, 61, 116, 21, 21, 190, 225, 246, 145, 60, 50, 229, 197, 59, 118, 117, 4, 61, 114, 32, 211, 61, 250, 248, 19, 190, 125, 59, 3, 190, 227, 0, 166, 189, 75, 72, 150, 189, 21, 149, 214, 189, 93, 153, 143, 61, 253, 189, 112, 61, 187, 159, 17, 59, 118, 202, 5, 190, 7, 187, 66, 186, 244, 112, 226, 189, 117, 132, 188, 188, 67, 120, 150, 60, 55, 70, 105, 61, 174, 43, 243, 61, 226, 37, 10, 62, 198, 151, 198, 61, 157, 116, 246, 189, 140, 42, 6, 62, 127, 151, 26, 62, 28, 210, 254, 189, 22, 40, 250, 189, 15, 173, 39, 62, 180, 74, 174, 60, 103, 71, 16, 62, 144, 239, 28, 189, 81, 157, 4, 190, 127, 54, 14, 190, 196, 11, 242, 59, 92, 7, 78, 61, 50, 234, 59, 61, 105, 92, 13, 189, 236, 4, 14, 62, 16, 3, 109, 187, 215, 235, 232, 60, 114, 185, 9, 190, 176, 113, 13, 62, 34, 233, 209, 61, 101, 4, 4, 62, 215, 11, 245, 189, 180, 184, 237, 60, 24, 225, 43, 62, 82, 142, 136, 61, 194, 107, 229, 189, 131, 183, 165, 189, 160, 49, 33, 62, 141, 243, 70, 61, 20, 241, 74, 187, 113, 118, 149, 189, 14, 215, 194, 189, 63, 130, 34, 62, 163, 52, 130, 61, 175, 69, 204, 61, 171, 146, 47, 189, 32, 154, 242, 61, 140, 73, 133, 61, 245, 10, 136, 189, 154, 219, 164, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 23, 71, 170, 189, 249, 199, 23, 190, 208, 16, 117, 189, 90, 91, 133, 189, 210, 141, 26, 190, 193, 111, 26, 61, 15, 152, 2, 62, 168, 149, 19, 190, 33, 162, 254, 189, 43, 137, 34, 190, 15, 142, 29, 190, 123, 116, 149, 189, 175, 196, 3, 189, 223, 186, 200, 189, 169, 55, 192, 189, 124, 249, 234, 61, 9, 233, 70, 61, 240, 242, 47, 190, 27, 101, 42, 189, 232, 133, 27, 62, 142, 37, 44, 189, 144, 175, 15, 61, 225, 46, 145, 189, 90, 81, 191, 60, 17, 245, 143, 61, 107, 5, 46, 62, 126, 177, 8, 190, 208, 119, 185, 61, 63, 232, 119, 59, 123, 157, 128, 189, 136, 31, 4, 190, 178, 36, 23, 62, 16, 24, 31, 190, 37, 176, 249, 61, 192, 79, 245, 189, 187, 194, 217, 188, 172, 233, 0, 62, 168, 33, 36, 190, 159, 1, 49, 62, 176, 208, 147, 61, 94, 119, 32, 60, 254, 31, 22, 190, 113, 173, 205, 189, 56, 7, 25, 189, 130, 249, 175, 187, 183, 191, 210, 189, 223, 188, 129, 61, 100, 243, 24, 62, 140, 169, 40, 62, 5, 172, 94, 189, 208, 235, 207, 189, 95, 115, 133, 189, 202, 255, 14, 62, 92, 176, 46, 62, 36, 235, 60, 188, 133, 95, 71, 189, 145, 27, 38, 61, 64, 122, 135, 189, 59, 99, 252, 61, 80, 184, 233, 61, 188, 176, 189, 59, 153, 191, 136, 61, 75, 204, 90, 61, 48, 143, 236, 61, 178, 163, 223, 188, 50, 57, 175, 61, 241, 81, 157, 61, 76, 33, 252, 189, 164, 112, 249, 189, 146, 67, 11, 61, 171, 235, 195, 61, 8, 65, 5, 190, 190, 78, 234, 188, 9, 89, 243, 61, 120, 195, 50, 62, 47, 135, 159, 189, 109, 214, 12, 61, 155, 232, 40, 190, 69, 1, 204, 189, 48, 76, 205, 189, 140, 104, 208, 189, 247, 206, 50, 190, 250, 158, 68, 61, 124, 255, 160, 188, 71, 240, 184, 189, 26, 30, 201, 61, 94, 78, 197, 189, 37, 46, 150, 61, 138, 10, 215, 188, 200, 171, 70, 61, 75, 60, 190, 189, 39, 17, 237, 61, 192, 205, 212, 189, 176, 13, 47, 62, 180, 137, 36, 190, 152, 34, 9, 190, 100, 231, 183, 189, 195, 233, 213, 61, 195, 86, 194, 61, 124, 95, 235, 188, 237, 21, 94, 61, 83, 190, 46, 62, 175, 119, 94, 61, 182, 176, 248, 188, 119, 139, 53, 189, 100, 106, 25, 60, 224, 198, 57, 61, 101, 68, 2, 61, 52, 12, 81, 189, 35, 219, 112, 189, 167, 85, 237, 189, 68, 229, 238, 60, 177, 107, 208, 61, 206, 204, 159, 189, 213, 49, 156, 189, 182, 84, 42, 62, 153, 82, 223, 61, 171, 65, 233, 189, 204, 63, 23, 189, 176, 143, 5, 190, 253, 99, 249, 189, 113, 50, 176, 61, 24, 224, 132, 189, 241, 217, 181, 189, 156, 43, 179, 188, 69, 148, 211, 61, 152, 59, 7, 61, 42, 191, 47, 62, 181, 179, 195, 189, 210, 7, 32, 62, 19, 105, 65, 61, 220, 209, 228, 189, 154, 1, 199, 189, 54, 236, 184, 189, 91, 229, 255, 189, 76, 164, 176, 61, 31, 14, 74, 61, 212, 16, 141, 59, 96, 88, 255, 189, 110, 7, 27, 60, 255, 94, 138, 189, 0, 229, 133, 61, 31, 125, 5, 189, 161, 241, 176, 189, 155, 56, 92, 189, 189, 192, 98, 61, 27, 131, 253, 189, 185, 195, 25, 190, 60, 126, 177, 189, 38, 114, 16, 61, 32, 47, 199, 61, 168, 168, 10, 62, 229, 249, 135, 187, 60, 11, 191, 189, 8, 208, 29, 190, 10, 106, 117, 189, 220, 18, 166, 189, 83, 155, 107, 61, 185, 13, 19, 62, 182, 10, 216, 189, 114, 187, 232, 61, 133, 168, 1, 61, 196, 45, 153, 189, 16, 161, 43, 62, 184, 246, 24, 190, 89, 215, 200, 188, 142, 67, 39, 190, 20, 114, 208, 60, 223, 117, 20, 190, 110, 228, 128, 187, 141, 89, 145, 59, 64, 139, 71, 189, 114, 49, 63, 61, 202, 158, 143, 188, 204, 18, 22, 190, 231, 184, 29, 61, 0, 200, 50, 62, 117, 87, 16, 190, 118, 225, 142, 61, 153, 230, 49, 62, 162, 26, 198, 189, 59, 239, 226, 189, 75, 22, 249, 61, 55, 233, 208, 189, 62, 39, 104, 189, 149, 233, 235, 189, 82, 120, 6, 61, 205, 41, 5, 190, 115, 100, 62, 61, 83, 144, 248, 189, 21, 136, 29, 62, 42, 245, 49, 61, 237, 145, 247, 61, 198, 111, 52, 62, 248, 44, 34, 62, 244, 36, 206, 189, 120, 66, 168, 60, 59, 174, 14, 62, 202, 15, 223, 189, 117, 102, 9, 62, 31, 249, 30, 190, 162, 106, 128, 188, 132, 121, 136, 189, 123, 27, 147, 61, 165, 128, 17, 190, 119, 238, 220, 61, 162, 247, 126, 61, 187, 99, 18, 61, 253, 169, 54, 188, 66, 220, 92, 59, 12, 192, 147, 61, 175, 16, 46, 190, 5, 26, 242, 61, 143, 91, 28, 190, 111, 37, 171, 189, 120, 67, 24, 62, 111, 159, 29, 190, 216, 98, 1, 190, 234, 210, 45, 62, 68, 253, 39, 62, 172, 8, 15, 190, 240, 150, 6, 189, 213, 69, 239, 187, 75, 58, 44, 189, 97, 202, 101, 61, 255, 145, 11, 189, 233, 102, 124, 61, 146, 90, 237, 61, 141, 134, 3, 62, 147, 138, 101, 189, 190, 166, 131, 187, 117, 18, 102, 59, 111, 85, 37, 189, 7, 156, 116, 61, 231, 44, 32, 189, 178, 235, 77, 60, 133, 215, 41, 62, 250, 82, 14, 190, 154, 227, 80, 189, 32, 198, 235, 189, 74, 203, 222, 61, 221, 57, 20, 62, 105, 200, 59, 61, 174, 118, 6, 62, 103, 225, 168, 61, 119, 183, 140, 187, 98, 32, 175, 189, 76, 180, 60, 60, 161, 42, 47, 190, 35, 127, 149, 61, 229, 213, 165, 60, 122, 227, 236, 61, 79, 91, 29, 190, 208, 233, 151, 186, 210, 232, 10, 189, 89, 227, 97, 189, 146, 38, 12, 62, 63, 95, 177, 61, 53, 210, 3, 61, 72, 153, 31, 189, 101, 216, 196, 189, 110, 242, 10, 189, 230, 225, 19, 62, 20, 165, 128, 61, 172, 4, 154, 60, 1, 47, 179, 189, 147, 92, 74, 189, 78, 216, 27, 62, 68, 181, 126, 189, 23, 17, 5, 189, 175, 249, 250, 189, 207, 28, 38, 62, 244, 52, 45, 62, 151, 133, 130, 189, 176, 216, 8, 62, 195, 234, 86, 189, 132, 155, 206, 189, 119, 246, 222, 61, 112, 17, 193, 60, 120, 167, 0, 62, 113, 79, 38, 190, 185, 234, 245, 61, 211, 28, 55, 61, 148, 105, 116, 61, 237, 178, 15, 190, 243, 93, 63, 60, 106, 50, 175, 61, 186, 233, 15, 190, 141, 60, 10, 61, 223, 179, 250, 61, 113, 200, 152, 61, 66, 34, 245, 61, 207, 4, 145, 188, 89, 78, 42, 62, 157, 59, 96, 61, 70, 184, 17, 62, 210, 228, 156, 189, 143, 69, 175, 61, 215, 42, 245, 61, 34, 171, 196, 189, 114, 97, 58, 59, 208, 86, 140, 61, 103, 194, 51, 62, 8, 197, 88, 59, 150, 60, 171, 61, 2, 223, 232, 189, 193, 33, 227, 189, 67, 133, 10, 189, 5, 101, 1, 62, 231, 158, 248, 188, 72, 64, 78, 60, 209, 237, 26, 62, 97, 43, 218, 61, 219, 183, 184, 60, 176, 219, 13, 189, 120, 222, 8, 190, 41, 219, 15, 61, 191, 68, 29, 190, 228, 127, 254, 60, 9, 159, 109, 189, 31, 87, 155, 61, 196, 92, 218, 189, 60, 197, 37, 62, 220, 218, 17, 190, 111, 15, 158, 188, 167, 15, 151, 189, 243, 178, 6, 190, 201, 78, 106, 189, 215, 213, 238, 189, 251, 163, 179, 61, 205, 123, 183, 189, 247, 250, 146, 60, 26, 145, 254, 188, 191, 4, 164, 189, 248, 14, 66, 189, 7, 10, 148, 189, 232, 151, 164, 189, 8, 194, 44, 190, 143, 253, 237, 59, 17, 114, 187, 61, 171, 66, 252, 188, 167, 13, 100, 61, 248, 26, 36, 190, 235, 255, 215, 189, 217, 18, 217, 61, 227, 133, 6, 190, 124, 139, 98, 59, 31, 208, 236, 61, 94, 176, 137, 189, 99, 199, 214, 59, 172, 19, 22, 190, 217, 41, 144, 188, 66, 253, 28, 62, 240, 50, 151, 188, 135, 48, 14, 190, 150, 252, 20, 61, 217, 54, 31, 61, 114, 156, 137, 189, 110, 48, 126, 189, 125, 129, 202, 188, 137, 53, 48, 189, 214, 70, 140, 188, 114, 1, 141, 187, 138, 29, 31, 62, 189, 210, 254, 189, 154, 155, 79, 61, 141, 241, 36, 62, 180, 53, 152, 61, 96, 160, 71, 60, 158, 73, 149, 61, 104, 145, 148, 61, 183, 44, 52, 190, 168, 176, 208, 189, 221, 49, 59, 188, 102, 20, 136, 189, 204, 138, 6, 62, 255, 169, 44, 189, 122, 66, 9, 61, 24, 85, 70, 59, 46, 223, 70, 189, 141, 55, 194, 188, 46, 91, 1, 188, 93, 79, 232, 189, 251, 138, 209, 189, 188, 85, 121, 61, 55, 202, 193, 189, 6, 57, 126, 189, 150, 119, 38, 190, 192, 187, 174, 60, 133, 146, 96, 188, 121, 245, 21, 62, 130, 55, 26, 190, 237, 4, 175, 189, 110, 40, 45, 190, 223, 163, 35, 62, 167, 97, 216, 189, 200, 189, 30, 62, 175, 11, 205, 61, 51, 55, 31, 62, 161, 113, 218, 61, 16, 191, 28, 62, 64, 95, 239, 189, 210, 161, 152, 189, 11, 86, 108, 61, 185, 177, 58, 189, 137, 165, 190, 61, 208, 246, 30, 61, 162, 117, 7, 189, 24, 172, 40, 189, 235, 18, 25, 62, 223, 162, 132, 61, 220, 113, 217, 189, 58, 204, 175, 189, 73, 110, 35, 62, 250, 174, 179, 187, 134, 192, 237, 61, 13, 24, 14, 190, 189, 255, 37, 190, 47, 148, 149, 189, 24, 254, 70, 60, 41, 226, 4, 62, 246, 186, 49, 189, 234, 168, 214, 61, 65, 210, 16, 190, 25, 141, 205, 188, 84, 156, 149, 61, 191, 155, 214, 189, 172, 245, 18, 190, 119, 90, 246, 189, 186, 248, 186, 189, 150, 239, 255, 60, 255, 1, 119, 61, 78, 155, 199, 189, 124, 211, 138, 189, 35, 160, 8, 190, 239, 209, 17, 62, 156, 227, 29, 62, 220, 154, 202, 189, 127, 241, 87, 61, 18, 20, 142, 61, 251, 36, 63, 189, 75, 103, 11, 190, 26, 193, 31, 62, 82, 69, 223, 61, 97, 193, 43, 62, 146, 182, 30, 62, 61, 219, 8, 188, 237, 167, 238, 188, 125, 45, 21, 61, 185, 230, 236, 61, 158, 210, 74, 189, 7, 1, 229, 60, 21, 155, 33, 189, 249, 122, 29, 62, 31, 247, 183, 189, 22, 23, 62, 189, 204, 171, 88, 189, 133, 131, 1, 62, 96, 14, 33, 62, 156, 227, 184, 189, 104, 120, 26, 62, 206, 169, 101, 59, 84, 222, 20, 190, 244, 121, 135, 60, 174, 53, 98, 61, 15, 88, 250, 61, 100, 189, 35, 189, 23, 130, 240, 189, 144, 129, 23, 62, 153, 12, 17, 62, 157, 91, 160, 188, 212, 28, 38, 62, 138, 59, 46, 62, 55, 0, 30, 62, 1, 131, 6, 189, 73, 133, 41, 189, 246, 91, 25, 190, 110, 66, 27, 190, 76, 97, 0, 62, 220, 116, 133, 189, 200, 188, 188, 61, 53, 154, 17, 189, 96, 100, 114, 61, 155, 182, 96, 61, 197, 52, 252, 187, 144, 39, 43, 61, 243, 204, 11, 62, 171, 65, 24, 187, 151, 208, 31, 190, 142, 151, 42, 189, 235, 167, 78, 61, 92, 172, 19, 62, 157, 154, 41, 62, 244, 178, 30, 190, 25, 189, 231, 189, 209, 66, 29, 188, 239, 108, 206, 189, 23, 154, 41, 190, 196, 241, 40, 190, 150, 213, 165, 60, 22, 209, 231, 61, 167, 24, 105, 189, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 58, 58, 187, 78, 171, 64, 61, 103, 104, 245, 61, 214, 113, 170, 60, 133, 132, 10, 190, 120, 135, 22, 62, 199, 190, 44, 190, 175, 69, 128, 189, 163, 160, 135, 189, 23, 230, 157, 61, 185, 78, 0, 61, 170, 111, 123, 188, 119, 170, 131, 61, 114, 55, 25, 189, 220, 65, 145, 61, 167, 252, 47, 62, 45, 218, 20, 190, 205, 5, 9, 190, 216, 38, 190, 61, 59, 138, 187, 189, 230, 146, 20, 62, 143, 194, 47, 62, 100, 163, 7, 62, 176, 80, 76, 189, 172, 237, 234, 61, 212, 115, 201, 61, 135, 188, 186, 189, 205, 84, 69, 189, 227, 179, 155, 61, 190, 215, 154, 61, 190, 16, 253, 189, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 84, 48, 60, 138, 88, 11, 190, 255, 109, 41, 61, 183, 70, 5, 62, 76, 9, 33, 61, 90, 164, 126, 188, 46, 141, 116, 61, 26, 20, 157, 61, 91, 104, 132, 60, 228, 111, 252, 61, 81, 63, 42, 62, 104, 97, 27, 62, 168, 142, 190, 61, 95, 0, 75, 61, 167, 157, 221, 186, 194, 42, 8, 190, 11, 159, 225, 189, 140, 232, 58, 188, 153, 83, 221, 189, 110, 53, 250, 189, 207, 96, 183, 61, 85, 78, 52, 190, 135, 247, 10, 190, 222, 164, 210, 189, 216, 218, 11, 190, 23, 137, 48, 62, 44, 252, 250, 61, 77, 214, 168, 189, 36, 32, 221, 59, 42, 243, 149, 189, 199, 0, 25, 62, 212, 96, 26, 189, 117, 203, 238, 60, 17, 1, 215, 189, 140, 118, 19, 62, 144, 211, 209, 189, 226, 249, 19, 190, 37, 82, 43, 62, 113, 231, 192, 61, 246, 161, 11, 190, 229, 205, 142, 189, 113, 222, 204, 61, 246, 18, 244, 61, 39, 152, 254, 61, 173, 224, 36, 190, 122, 114, 90, 189, 181, 235, 184, 189, 30, 205, 222, 189, 42, 188, 25, 62, 115, 150, 53, 189, 28, 138, 42, 190, 119, 196, 57, 59, 110, 43, 182, 189, 2, 29, 35, 190, 88, 127, 177, 189, 168, 149, 216, 185, 229, 27, 3, 62, 43, 255, 52, 190, 74, 146, 35, 190, 200, 126, 48, 62, 77, 122, 44, 62, 88, 9, 41, 188, 58, 83, 35, 190, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 185, 190, 61, 7, 62, 229, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 192, 158, 63, 40, 71, 43, 190, 66, 1, 106, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 115, 190, 189, 212, 246, 187, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}