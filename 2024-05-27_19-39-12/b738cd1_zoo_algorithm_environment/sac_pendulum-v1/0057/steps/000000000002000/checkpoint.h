// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 239, 106, 62, 156, 197, 1, 63, 142, 103, 4, 62, 186, 103, 25, 62, 22, 235, 13, 63, 205, 32, 15, 190, 203, 213, 129, 190, 74, 234, 249, 190, 173, 1, 220, 190, 11, 45, 31, 191, 94, 46, 107, 191, 71, 204, 48, 62, 99, 178, 229, 59, 27, 164, 119, 190, 129, 31, 226, 62, 122, 198, 254, 62, 78, 222, 98, 190, 239, 117, 2, 63, 59, 235, 36, 62, 48, 55, 25, 60, 123, 245, 245, 62, 9, 82, 39, 60, 48, 95, 152, 62, 163, 55, 173, 190, 222, 35, 147, 62, 174, 248, 195, 62, 160, 33, 197, 190, 76, 133, 15, 63, 205, 235, 146, 190, 71, 10, 177, 190, 38, 79, 35, 63, 86, 45, 26, 63, 173, 235, 118, 62, 30, 212, 155, 190, 77, 112, 231, 62, 223, 206, 68, 190, 150, 58, 76, 190, 199, 55, 160, 62, 148, 138, 201, 61, 27, 48, 215, 62, 170, 156, 91, 63, 90, 87, 68, 62, 158, 152, 4, 191, 185, 137, 16, 63, 131, 49, 246, 189, 179, 194, 0, 190, 142, 8, 92, 63, 208, 91, 79, 189, 19, 217, 192, 61, 61, 217, 126, 188, 173, 226, 131, 190, 241, 65, 127, 190, 16, 17, 106, 191, 25, 108, 4, 190, 154, 0, 14, 191, 49, 12, 123, 62, 38, 156, 248, 62, 162, 82, 88, 62, 94, 12, 65, 191, 134, 74, 32, 62, 154, 25, 156, 190, 189, 159, 52, 63, 151, 168, 225, 62, 127, 185, 59, 62, 152, 183, 139, 62, 173, 43, 255, 190, 244, 147, 255, 61, 105, 107, 242, 62, 73, 175, 128, 62, 16, 229, 7, 63, 151, 142, 185, 190, 101, 13, 229, 190, 3, 48, 249, 62, 177, 25, 201, 189, 6, 35, 231, 190, 133, 26, 10, 191, 63, 237, 137, 62, 218, 178, 23, 190, 150, 158, 217, 190, 74, 8, 184, 188, 241, 110, 212, 62, 56, 54, 21, 63, 244, 91, 81, 188, 135, 189, 200, 189, 76, 184, 148, 62, 33, 201, 43, 190, 92, 40, 230, 62, 113, 115, 154, 190, 173, 57, 72, 190, 138, 88, 192, 61, 188, 70, 14, 63, 65, 169, 184, 190, 185, 132, 236, 190, 242, 185, 225, 190, 48, 87, 208, 190, 154, 79, 226, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 76, 24, 191, 253, 227, 0, 63, 57, 57, 129, 189, 163, 42, 143, 190, 181, 34, 13, 63, 80, 183, 243, 190, 123, 135, 29, 191, 241, 168, 187, 190, 49, 152, 7, 191, 100, 33, 138, 62, 200, 213, 104, 189, 217, 24, 160, 62, 249, 126, 242, 62, 113, 24, 207, 62, 230, 212, 189, 190, 43, 185, 246, 61, 192, 138, 213, 190, 34, 213, 43, 63, 130, 139, 5, 191, 242, 186, 232, 62, 230, 185, 4, 191, 71, 94, 102, 190, 85, 55, 4, 63, 242, 222, 144, 190, 106, 226, 7, 63, 75, 121, 199, 190, 213, 147, 2, 63, 156, 137, 48, 63, 39, 250, 253, 190, 173, 145, 88, 190, 13, 213, 158, 190, 215, 255, 131, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 97, 239, 188, 205, 33, 41, 189, 106, 199, 240, 61, 170, 59, 128, 61, 6, 76, 201, 187, 26, 4, 142, 189, 197, 250, 15, 189, 103, 197, 11, 62, 248, 1, 115, 59, 53, 137, 15, 190, 19, 235, 77, 190, 165, 91, 236, 189, 144, 66, 132, 189, 30, 47, 32, 190, 152, 251, 139, 184, 208, 60, 76, 190, 228, 125, 111, 61, 203, 94, 120, 189, 180, 33, 108, 61, 183, 190, 205, 61, 222, 159, 201, 189, 128, 149, 14, 62, 205, 136, 133, 61, 147, 230, 92, 189, 36, 214, 20, 61, 133, 235, 223, 188, 113, 73, 218, 188, 73, 83, 93, 188, 161, 73, 139, 61, 159, 198, 53, 190, 34, 10, 12, 61, 132, 120, 138, 189, 52, 108, 14, 190, 10, 210, 138, 62, 8, 246, 13, 61, 27, 225, 189, 190, 80, 232, 25, 61, 182, 66, 63, 190, 213, 15, 147, 61, 30, 1, 22, 61, 151, 4, 80, 189, 146, 207, 78, 189, 142, 98, 24, 60, 77, 115, 186, 61, 235, 108, 79, 189, 58, 10, 83, 61, 201, 90, 160, 62, 86, 89, 158, 62, 232, 139, 28, 190, 163, 170, 138, 189, 183, 1, 219, 189, 51, 63, 134, 190, 177, 75, 1, 62, 29, 42, 74, 190, 34, 182, 45, 62, 1, 150, 185, 189, 68, 243, 125, 59, 55, 173, 7, 62, 112, 100, 242, 187, 60, 216, 94, 62, 223, 55, 35, 190, 183, 102, 90, 190, 238, 201, 72, 60, 53, 193, 208, 189, 7, 112, 86, 62, 111, 153, 52, 190, 55, 236, 142, 61, 163, 151, 225, 188, 42, 227, 138, 61, 15, 203, 198, 61, 169, 115, 229, 60, 253, 229, 198, 189, 162, 223, 163, 189, 123, 104, 212, 189, 187, 172, 221, 61, 20, 157, 36, 190, 248, 222, 185, 61, 209, 159, 2, 62, 127, 187, 95, 190, 248, 54, 1, 188, 0, 38, 239, 61, 2, 77, 113, 61, 113, 65, 192, 189, 140, 199, 214, 189, 125, 240, 174, 188, 32, 25, 89, 189, 241, 219, 254, 61, 215, 183, 74, 190, 36, 13, 88, 190, 169, 184, 10, 189, 183, 148, 83, 189, 187, 166, 39, 61, 174, 61, 9, 61, 248, 57, 122, 189, 38, 123, 150, 189, 93, 51, 38, 61, 198, 86, 11, 189, 241, 35, 11, 190, 138, 118, 165, 189, 196, 195, 155, 62, 139, 59, 101, 62, 152, 137, 29, 190, 168, 206, 90, 190, 240, 28, 164, 188, 63, 204, 40, 61, 254, 198, 76, 62, 185, 229, 131, 190, 214, 181, 182, 61, 25, 84, 32, 190, 164, 17, 77, 190, 47, 44, 173, 190, 126, 4, 99, 189, 134, 8, 145, 189, 193, 12, 75, 61, 247, 79, 115, 61, 171, 194, 216, 62, 6, 159, 30, 190, 190, 112, 200, 61, 92, 28, 35, 190, 164, 124, 202, 189, 192, 221, 45, 62, 80, 1, 66, 190, 170, 242, 180, 61, 22, 94, 12, 61, 206, 34, 52, 188, 220, 11, 36, 189, 78, 34, 90, 62, 35, 233, 140, 61, 244, 118, 29, 190, 138, 83, 187, 187, 38, 88, 174, 61, 55, 236, 135, 189, 47, 181, 175, 59, 138, 218, 11, 189, 213, 128, 37, 189, 171, 235, 145, 61, 173, 224, 149, 60, 181, 238, 198, 189, 127, 172, 37, 62, 19, 123, 33, 61, 165, 191, 37, 61, 219, 59, 0, 190, 5, 108, 22, 188, 58, 241, 31, 190, 65, 123, 79, 188, 248, 104, 119, 58, 230, 112, 67, 189, 237, 239, 180, 189, 249, 103, 98, 61, 47, 123, 7, 190, 220, 255, 42, 190, 99, 179, 249, 189, 55, 136, 127, 60, 30, 6, 22, 62, 65, 151, 19, 190, 116, 210, 1, 62, 77, 117, 174, 189, 201, 225, 36, 190, 89, 148, 254, 189, 157, 144, 144, 189, 81, 52, 141, 60, 105, 177, 184, 61, 130, 85, 184, 61, 122, 189, 184, 61, 137, 79, 219, 189, 83, 7, 18, 190, 14, 195, 42, 189, 153, 60, 65, 61, 229, 172, 227, 61, 148, 61, 183, 61, 133, 190, 88, 190, 34, 178, 36, 61, 121, 103, 106, 190, 19, 162, 4, 190, 193, 126, 124, 61, 21, 193, 108, 61, 182, 60, 177, 189, 113, 237, 234, 59, 255, 153, 2, 190, 198, 44, 20, 190, 212, 86, 9, 190, 155, 21, 200, 61, 132, 186, 14, 190, 10, 3, 182, 188, 232, 239, 7, 190, 17, 125, 15, 62, 57, 171, 45, 190, 214, 122, 192, 189, 158, 252, 2, 62, 42, 173, 120, 189, 142, 174, 15, 62, 104, 131, 250, 60, 113, 79, 177, 60, 32, 134, 33, 190, 33, 192, 72, 62, 56, 182, 122, 190, 50, 237, 103, 189, 12, 92, 140, 61, 153, 62, 251, 61, 230, 87, 67, 61, 213, 28, 211, 60, 149, 103, 116, 189, 13, 205, 154, 61, 208, 193, 8, 189, 41, 253, 45, 61, 247, 111, 37, 62, 115, 156, 241, 189, 148, 32, 60, 62, 63, 10, 49, 189, 121, 193, 5, 62, 43, 105, 185, 61, 70, 236, 12, 61, 141, 216, 179, 60, 141, 128, 149, 61, 234, 62, 38, 61, 197, 245, 106, 62, 229, 131, 189, 188, 132, 61, 197, 189, 51, 92, 41, 190, 69, 30, 116, 189, 197, 88, 45, 61, 113, 93, 174, 61, 241, 230, 89, 62, 74, 170, 141, 189, 210, 247, 57, 190, 188, 72, 231, 61, 107, 88, 18, 62, 30, 161, 56, 61, 139, 135, 29, 62, 175, 134, 231, 189, 209, 140, 86, 189, 31, 36, 144, 189, 56, 185, 38, 189, 33, 233, 87, 62, 52, 59, 96, 190, 240, 117, 79, 189, 155, 91, 250, 188, 1, 56, 73, 190, 17, 206, 89, 190, 35, 175, 146, 190, 224, 136, 11, 190, 146, 203, 79, 61, 53, 183, 175, 61, 0, 80, 66, 62, 164, 123, 24, 189, 206, 12, 92, 189, 195, 197, 182, 189, 159, 114, 239, 61, 64, 121, 58, 62, 85, 25, 38, 190, 19, 76, 29, 62, 218, 62, 32, 62, 213, 190, 36, 189, 209, 207, 184, 189, 202, 129, 130, 60, 65, 129, 72, 188, 129, 107, 63, 189, 77, 53, 23, 62, 41, 11, 27, 190, 26, 148, 4, 62, 189, 96, 44, 60, 241, 72, 6, 61, 126, 161, 143, 59, 48, 143, 53, 189, 87, 178, 77, 189, 199, 13, 199, 189, 104, 34, 2, 190, 25, 142, 186, 189, 208, 47, 180, 189, 60, 145, 128, 189, 180, 242, 204, 60, 115, 205, 212, 61, 115, 83, 49, 62, 165, 100, 14, 60, 6, 232, 45, 190, 126, 100, 220, 189, 203, 162, 52, 190, 175, 8, 217, 61, 111, 181, 219, 189, 65, 247, 17, 190, 26, 203, 147, 189, 107, 41, 45, 62, 180, 53, 211, 189, 88, 80, 26, 62, 173, 226, 147, 61, 3, 18, 177, 59, 122, 171, 246, 189, 127, 140, 9, 62, 102, 50, 245, 60, 157, 230, 148, 189, 116, 122, 89, 189, 61, 14, 127, 59, 229, 18, 249, 186, 232, 82, 211, 189, 198, 5, 113, 189, 225, 34, 201, 189, 200, 162, 182, 188, 224, 191, 31, 190, 214, 198, 24, 61, 131, 64, 113, 61, 206, 140, 1, 62, 236, 212, 126, 189, 195, 90, 221, 188, 139, 28, 227, 61, 218, 250, 14, 189, 201, 20, 13, 190, 199, 201, 29, 190, 75, 220, 14, 190, 196, 239, 131, 188, 197, 234, 13, 62, 100, 246, 126, 189, 15, 148, 37, 61, 59, 170, 232, 189, 206, 91, 139, 189, 74, 109, 37, 190, 151, 99, 173, 189, 95, 2, 146, 61, 38, 37, 31, 61, 85, 191, 25, 59, 213, 156, 44, 190, 119, 57, 34, 61, 34, 219, 137, 190, 200, 142, 234, 189, 115, 171, 244, 60, 156, 86, 203, 189, 126, 139, 4, 190, 64, 124, 32, 190, 193, 110, 43, 190, 115, 4, 85, 188, 229, 20, 3, 62, 119, 64, 132, 190, 163, 188, 89, 189, 44, 2, 137, 61, 41, 17, 91, 190, 149, 53, 242, 190, 251, 144, 231, 189, 161, 17, 69, 190, 3, 182, 149, 62, 147, 8, 221, 61, 78, 238, 103, 62, 5, 122, 85, 189, 177, 168, 35, 190, 124, 174, 48, 189, 42, 43, 206, 61, 236, 7, 138, 61, 123, 98, 156, 189, 143, 212, 153, 61, 21, 131, 70, 189, 142, 104, 118, 189, 37, 19, 4, 62, 156, 226, 128, 61, 14, 249, 78, 62, 114, 41, 60, 62, 65, 107, 215, 188, 191, 32, 253, 61, 148, 132, 214, 187, 241, 75, 178, 186, 80, 210, 200, 61, 120, 51, 134, 60, 204, 241, 222, 61, 168, 249, 168, 61, 170, 23, 241, 186, 46, 0, 52, 190, 122, 200, 39, 59, 153, 182, 28, 62, 238, 118, 13, 189, 53, 169, 129, 190, 133, 30, 49, 190, 202, 211, 161, 61, 155, 74, 20, 188, 119, 145, 221, 189, 137, 221, 242, 189, 244, 221, 78, 190, 227, 175, 73, 190, 86, 15, 44, 190, 58, 47, 55, 190, 239, 28, 89, 189, 133, 33, 144, 61, 141, 96, 37, 62, 211, 27, 40, 190, 65, 34, 83, 60, 218, 15, 176, 189, 124, 152, 166, 61, 251, 236, 19, 62, 65, 54, 5, 61, 215, 221, 238, 189, 0, 228, 11, 190, 185, 76, 85, 62, 23, 206, 168, 189, 163, 58, 0, 62, 137, 75, 6, 62, 248, 152, 70, 61, 57, 213, 248, 60, 130, 200, 103, 62, 172, 86, 107, 60, 202, 50, 20, 190, 76, 62, 208, 189, 232, 107, 33, 189, 237, 220, 49, 190, 32, 0, 73, 190, 53, 127, 247, 189, 136, 35, 126, 62, 140, 106, 68, 189, 230, 38, 13, 62, 21, 32, 23, 62, 58, 166, 14, 189, 2, 3, 36, 187, 185, 27, 141, 61, 0, 180, 93, 62, 211, 92, 151, 189, 226, 22, 149, 61, 222, 12, 21, 62, 10, 216, 240, 189, 179, 224, 40, 190, 253, 168, 253, 189, 164, 163, 32, 189, 23, 68, 66, 190, 36, 110, 167, 61, 56, 112, 246, 61, 175, 184, 79, 62, 222, 12, 218, 61, 183, 61, 174, 61, 2, 105, 52, 190, 222, 152, 1, 61, 112, 254, 42, 61, 147, 218, 187, 61, 197, 101, 41, 190, 215, 123, 82, 190, 3, 144, 221, 189, 237, 46, 166, 190, 153, 193, 139, 190, 86, 34, 146, 190, 156, 219, 218, 61, 155, 83, 81, 62, 198, 183, 108, 60, 214, 184, 128, 61, 218, 213, 85, 189, 251, 199, 223, 189, 224, 184, 143, 188, 12, 2, 150, 61, 49, 173, 174, 61, 75, 186, 154, 60, 40, 244, 118, 62, 136, 72, 67, 62, 194, 139, 30, 190, 166, 198, 233, 61, 122, 44, 94, 62, 171, 196, 152, 188, 212, 77, 62, 190, 206, 148, 40, 62, 155, 251, 232, 187, 109, 89, 22, 62, 46, 71, 21, 189, 44, 194, 26, 190, 74, 174, 48, 190, 121, 154, 44, 59, 165, 75, 78, 61, 99, 82, 149, 61, 47, 115, 170, 189, 62, 77, 208, 61, 60, 0, 90, 189, 207, 148, 157, 188, 124, 242, 145, 190, 232, 164, 28, 61, 129, 136, 181, 61, 86, 247, 25, 62, 199, 240, 37, 190, 7, 103, 231, 61, 15, 42, 237, 61, 194, 218, 72, 61, 248, 228, 23, 190, 242, 15, 168, 189, 246, 89, 52, 62, 223, 85, 247, 187, 81, 67, 15, 189, 188, 27, 72, 60, 222, 137, 2, 190, 47, 78, 120, 61, 37, 136, 140, 61, 187, 185, 140, 61, 171, 146, 47, 189, 77, 195, 227, 61, 140, 73, 133, 61, 245, 10, 136, 189, 70, 56, 155, 61, 73, 45, 11, 190, 75, 163, 100, 188, 53, 17, 10, 190, 81, 72, 44, 62, 7, 169, 5, 189, 136, 82, 180, 189, 67, 254, 27, 190, 182, 173, 132, 189, 164, 254, 149, 189, 210, 141, 26, 190, 132, 226, 5, 61, 15, 152, 2, 62, 168, 149, 19, 190, 184, 73, 0, 190, 43, 137, 34, 190, 194, 54, 32, 190, 123, 116, 149, 189, 141, 35, 36, 189, 223, 186, 200, 189, 90, 164, 199, 189, 124, 249, 234, 61, 81, 197, 37, 61, 117, 155, 52, 190, 27, 101, 42, 189, 232, 133, 27, 62, 142, 37, 44, 189, 168, 37, 6, 61, 104, 227, 161, 189, 156, 184, 78, 188, 77, 232, 163, 61, 219, 246, 64, 61, 210, 249, 71, 190, 35, 189, 166, 61, 44, 246, 179, 187, 167, 197, 142, 189, 43, 13, 19, 190, 60, 116, 16, 62, 55, 28, 64, 190, 233, 4, 224, 61, 14, 59, 8, 190, 153, 104, 142, 189, 149, 249, 232, 61, 148, 158, 86, 190, 220, 83, 42, 62, 214, 130, 135, 61, 103, 75, 46, 187, 86, 150, 90, 190, 162, 35, 225, 189, 252, 160, 15, 189, 147, 103, 39, 189, 219, 223, 213, 189, 46, 79, 96, 61, 96, 173, 45, 62, 36, 31, 193, 61, 217, 87, 193, 189, 86, 176, 226, 189, 205, 160, 152, 189, 10, 210, 7, 62, 236, 203, 0, 62, 56, 74, 42, 190, 102, 25, 3, 62, 236, 78, 202, 59, 25, 109, 19, 190, 254, 178, 0, 62, 10, 96, 17, 62, 15, 55, 243, 60, 118, 100, 4, 61, 11, 161, 237, 60, 6, 169, 233, 61, 213, 249, 102, 189, 60, 134, 143, 62, 69, 63, 225, 61, 56, 135, 136, 189, 38, 173, 211, 61, 6, 49, 30, 62, 154, 137, 48, 187, 102, 68, 143, 190, 77, 63, 96, 188, 144, 87, 149, 61, 183, 70, 67, 62, 114, 97, 137, 189, 69, 45, 132, 61, 237, 155, 107, 190, 25, 32, 40, 189, 126, 55, 174, 189, 94, 121, 182, 189, 77, 4, 12, 190, 24, 65, 153, 61, 96, 114, 141, 189, 31, 117, 57, 190, 255, 215, 198, 61, 86, 158, 156, 190, 2, 101, 134, 62, 33, 215, 4, 189, 134, 182, 51, 190, 71, 211, 27, 190, 66, 195, 141, 61, 108, 171, 30, 190, 208, 147, 238, 61, 180, 230, 104, 190, 3, 30, 144, 189, 184, 67, 80, 189, 23, 128, 102, 62, 15, 116, 13, 62, 106, 20, 249, 61, 9, 79, 167, 62, 117, 200, 177, 62, 130, 101, 128, 189, 76, 5, 40, 190, 194, 17, 113, 189, 126, 246, 16, 190, 160, 181, 199, 60, 140, 100, 101, 61, 114, 149, 241, 187, 63, 99, 229, 189, 182, 190, 10, 189, 141, 5, 188, 61, 3, 236, 138, 61, 149, 18, 161, 60, 186, 151, 242, 189, 0, 52, 194, 60, 79, 144, 215, 60, 253, 175, 63, 190, 204, 63, 23, 189, 10, 111, 19, 190, 92, 214, 14, 190, 43, 62, 162, 61, 146, 161, 137, 189, 109, 169, 182, 189, 156, 43, 179, 188, 166, 93, 187, 61, 115, 245, 166, 60, 103, 193, 30, 62, 100, 224, 192, 189, 94, 211, 17, 62, 21, 86, 63, 61, 105, 231, 243, 189, 53, 190, 203, 189, 34, 170, 207, 189, 86, 82, 13, 190, 78, 232, 130, 61, 31, 14, 74, 61, 150, 125, 6, 188, 96, 88, 255, 189, 21, 77, 140, 187, 109, 165, 131, 189, 37, 15, 74, 61, 220, 25, 71, 189, 229, 205, 200, 189, 186, 32, 96, 189, 98, 226, 23, 61, 27, 131, 253, 189, 185, 195, 25, 190, 140, 20, 210, 189, 204, 92, 13, 61, 237, 177, 105, 61, 230, 17, 239, 61, 158, 98, 41, 61, 146, 118, 228, 189, 203, 10, 27, 190, 101, 123, 136, 189, 180, 111, 187, 189, 34, 46, 166, 61, 42, 189, 38, 62, 82, 157, 172, 189, 228, 200, 52, 61, 15, 203, 109, 61, 117, 203, 155, 189, 63, 27, 234, 61, 178, 147, 198, 189, 106, 171, 119, 188, 241, 239, 18, 190, 45, 219, 216, 61, 75, 28, 30, 190, 0, 155, 119, 188, 99, 165, 61, 188, 141, 224, 188, 188, 31, 142, 17, 61, 53, 125, 38, 58, 244, 14, 1, 190, 194, 48, 179, 61, 136, 238, 50, 62, 16, 0, 12, 190, 179, 13, 100, 61, 232, 51, 198, 61, 100, 13, 161, 189, 14, 100, 235, 189, 115, 214, 36, 188, 134, 93, 158, 188, 242, 76, 212, 189, 62, 183, 36, 190, 35, 151, 205, 61, 95, 76, 38, 189, 250, 194, 1, 62, 11, 200, 31, 190, 90, 18, 223, 61, 61, 21, 90, 60, 49, 238, 139, 62, 109, 130, 77, 62, 200, 127, 134, 62, 90, 72, 242, 61, 71, 92, 35, 62, 245, 228, 122, 62, 69, 200, 47, 190, 207, 91, 189, 60, 85, 58, 221, 189, 67, 227, 185, 59, 81, 44, 120, 188, 45, 159, 24, 61, 16, 174, 111, 188, 115, 1, 44, 61, 142, 150, 75, 61, 119, 195, 129, 61, 196, 83, 92, 61, 201, 136, 254, 60, 104, 107, 36, 62, 203, 97, 20, 190, 153, 28, 82, 61, 171, 10, 208, 189, 123, 118, 109, 190, 73, 214, 176, 62, 66, 44, 24, 190, 12, 132, 47, 190, 42, 168, 85, 62, 59, 85, 119, 62, 132, 71, 144, 189, 125, 252, 248, 188, 178, 50, 52, 189, 7, 7, 210, 188, 30, 38, 43, 62, 231, 155, 248, 61, 12, 155, 14, 62, 152, 166, 160, 62, 252, 23, 195, 62, 78, 107, 249, 61, 228, 58, 195, 189, 15, 255, 255, 189, 230, 52, 90, 60, 216, 70, 158, 61, 26, 40, 138, 60, 118, 210, 62, 61, 6, 73, 132, 62, 92, 248, 74, 190, 10, 192, 119, 60, 233, 175, 219, 60, 126, 38, 21, 62, 106, 112, 95, 62, 137, 174, 1, 62, 125, 169, 35, 62, 28, 249, 151, 186, 218, 242, 212, 60, 239, 85, 220, 189, 240, 2, 132, 187, 248, 122, 49, 190, 138, 58, 239, 60, 43, 106, 212, 188, 132, 167, 159, 61, 136, 135, 68, 190, 208, 233, 151, 186, 210, 232, 10, 189, 50, 66, 107, 189, 14, 231, 221, 61, 198, 70, 102, 61, 93, 233, 113, 188, 69, 1, 146, 189, 46, 37, 245, 189, 143, 247, 112, 189, 230, 225, 19, 62, 112, 2, 22, 60, 79, 86, 169, 188, 223, 247, 2, 190, 13, 137, 171, 189, 78, 216, 27, 62, 47, 126, 218, 189, 23, 17, 5, 189, 45, 87, 1, 190, 207, 28, 38, 62, 204, 64, 251, 61, 168, 212, 178, 189, 134, 200, 196, 61, 34, 232, 165, 189, 132, 155, 206, 189, 36, 252, 132, 61, 143, 138, 191, 189, 99, 51, 41, 62, 138, 233, 54, 190, 124, 82, 5, 190, 15, 24, 104, 189, 140, 216, 235, 188, 237, 20, 112, 190, 219, 97, 14, 189, 78, 95, 227, 60, 211, 183, 81, 190, 101, 236, 250, 61, 53, 131, 36, 62, 127, 140, 225, 61, 133, 93, 113, 62, 221, 9, 55, 62, 122, 217, 148, 62, 20, 98, 170, 187, 159, 6, 116, 61, 58, 128, 26, 190, 108, 181, 5, 190, 48, 176, 136, 61, 31, 241, 255, 189, 153, 105, 183, 60, 5, 200, 130, 59, 141, 53, 9, 62, 70, 249, 141, 61, 210, 25, 177, 60, 126, 123, 64, 190, 179, 180, 85, 190, 174, 3, 113, 190, 30, 13, 78, 61, 24, 115, 18, 190, 224, 148, 162, 189, 236, 176, 14, 189, 206, 80, 73, 62, 49, 246, 146, 62, 126, 240, 147, 61, 141, 41, 43, 190, 56, 221, 50, 188, 55, 140, 96, 190, 134, 12, 101, 189, 218, 172, 199, 189, 2, 195, 247, 189, 51, 221, 255, 189, 217, 78, 80, 62, 81, 74, 176, 190, 230, 238, 183, 190, 113, 118, 160, 190, 74, 15, 3, 190, 0, 113, 62, 62, 88, 123, 10, 190, 196, 253, 106, 62, 9, 217, 77, 190, 65, 219, 195, 189, 83, 212, 36, 186, 130, 88, 38, 190, 225, 93, 90, 189, 105, 214, 160, 190, 187, 106, 222, 60, 184, 220, 228, 189, 146, 233, 0, 189, 33, 182, 51, 62, 105, 61, 68, 189, 224, 106, 34, 62, 161, 198, 79, 190, 69, 57, 168, 189, 33, 223, 246, 61, 47, 7, 155, 60, 221, 110, 189, 61, 184, 247, 206, 61, 185, 47, 191, 189, 14, 19, 179, 60, 95, 16, 242, 189, 110, 154, 21, 61, 46, 10, 112, 60, 226, 146, 99, 188, 129, 191, 83, 190, 55, 253, 197, 189, 48, 86, 170, 188, 90, 215, 212, 189, 23, 254, 21, 189, 104, 83, 73, 61, 112, 254, 50, 190, 7, 156, 17, 62, 229, 87, 49, 190, 96, 120, 38, 62, 213, 207, 74, 190, 10, 143, 190, 61, 174, 36, 78, 62, 60, 17, 222, 60, 151, 181, 49, 61, 96, 45, 52, 62, 32, 244, 141, 61, 0, 164, 215, 190, 183, 204, 86, 189, 50, 29, 227, 59, 87, 145, 177, 189, 142, 72, 196, 61, 255, 169, 44, 189, 181, 96, 103, 60, 250, 217, 205, 188, 78, 139, 143, 189, 236, 59, 66, 189, 46, 91, 1, 188, 93, 79, 232, 189, 250, 113, 230, 189, 202, 107, 228, 60, 152, 126, 10, 190, 19, 143, 190, 189, 183, 21, 77, 190, 43, 3, 250, 187, 39, 133, 99, 189, 121, 245, 21, 62, 144, 255, 25, 190, 89, 185, 232, 189, 117, 206, 66, 190, 140, 202, 5, 62, 167, 97, 216, 189, 141, 210, 251, 61, 175, 11, 205, 61, 252, 199, 19, 62, 161, 113, 218, 61, 123, 77, 250, 61, 112, 100, 15, 190, 183, 175, 194, 189, 150, 78, 44, 61, 185, 177, 58, 189, 28, 164, 134, 61, 208, 246, 30, 61, 225, 60, 36, 189, 205, 230, 44, 189, 235, 18, 25, 62, 119, 205, 62, 61, 173, 222, 219, 189, 58, 204, 175, 189, 10, 241, 31, 62, 194, 99, 4, 188, 53, 67, 224, 61, 113, 133, 19, 190, 233, 118, 40, 190, 161, 123, 165, 189, 53, 71, 49, 188, 69, 250, 4, 62, 249, 164, 66, 189, 195, 239, 210, 61, 5, 98, 22, 190, 25, 141, 205, 188, 204, 146, 89, 61, 191, 155, 214, 189, 88, 163, 21, 190, 95, 124, 13, 190, 26, 36, 195, 189, 72, 182, 206, 60, 229, 144, 95, 61, 6, 125, 203, 189, 132, 16, 164, 189, 35, 160, 8, 190, 239, 209, 17, 62, 66, 6, 26, 62, 220, 154, 202, 189, 66, 195, 196, 189, 239, 65, 135, 62, 214, 12, 45, 190, 100, 197, 73, 190, 103, 218, 59, 62, 252, 34, 60, 62, 173, 27, 117, 62, 132, 84, 173, 61, 136, 109, 185, 189, 163, 168, 133, 189, 51, 52, 60, 62, 126, 215, 116, 62, 10, 116, 249, 60, 90, 87, 130, 62, 146, 171, 55, 62, 202, 244, 179, 62, 37, 235, 131, 190, 61, 10, 164, 190, 116, 75, 27, 60, 184, 193, 1, 62, 17, 7, 106, 62, 47, 42, 6, 190, 197, 175, 127, 62, 14, 38, 2, 190, 16, 0, 9, 190, 19, 188, 39, 61, 76, 137, 191, 61, 71, 29, 44, 62, 109, 219, 32, 61, 111, 177, 175, 189, 58, 78, 238, 187, 228, 53, 42, 62, 223, 40, 188, 188, 160, 181, 59, 62, 175, 240, 27, 62, 89, 165, 30, 62, 198, 185, 113, 189, 220, 164, 66, 189, 190, 232, 32, 190, 241, 166, 9, 190, 229, 91, 16, 62, 176, 111, 128, 189, 86, 91, 132, 61, 180, 134, 11, 189, 1, 14, 123, 189, 196, 132, 234, 60, 121, 115, 179, 60, 240, 22, 190, 61, 95, 65, 25, 62, 131, 203, 14, 189, 212, 125, 35, 190, 2, 173, 144, 189, 76, 46, 12, 61, 132, 101, 23, 62, 100, 185, 8, 62, 169, 56, 28, 190, 103, 79, 229, 189, 12, 94, 155, 188, 235, 148, 4, 190, 229, 126, 22, 190, 180, 97, 45, 190, 150, 213, 165, 60, 3, 101, 245, 61, 203, 74, 141, 189, 109, 60, 21, 62, 177, 224, 200, 59, 171, 144, 23, 62, 123, 201, 74, 61, 106, 114, 50, 190, 229, 32, 233, 188, 4, 227, 128, 61, 244, 42, 239, 189, 166, 220, 41, 190, 249, 222, 39, 62, 24, 242, 32, 61, 248, 123, 10, 189, 132, 81, 160, 189, 144, 189, 179, 189, 3, 119, 190, 188, 10, 56, 180, 189, 31, 202, 118, 189, 14, 99, 138, 189, 158, 158, 132, 189, 4, 158, 227, 189, 89, 77, 3, 190, 59, 90, 41, 190, 103, 58, 36, 61, 20, 40, 113, 185, 74, 255, 193, 60, 92, 5, 183, 189, 128, 55, 152, 189, 196, 74, 142, 189, 235, 162, 121, 61, 5, 70, 167, 61, 245, 226, 225, 189, 177, 184, 137, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 216, 135, 60, 253, 150, 47, 62, 69, 106, 142, 61, 159, 32, 19, 62, 133, 132, 10, 190, 217, 118, 194, 61, 9, 223, 80, 190, 11, 220, 37, 61, 194, 145, 146, 189, 231, 176, 130, 61, 247, 156, 223, 61, 93, 7, 138, 59, 52, 239, 61, 62, 233, 184, 139, 61, 212, 188, 224, 61, 206, 167, 39, 62, 160, 48, 73, 190, 48, 73, 160, 189, 55, 19, 51, 62, 173, 196, 230, 189, 94, 148, 52, 62, 90, 55, 88, 62, 139, 207, 108, 62, 137, 105, 216, 189, 188, 2, 149, 61, 77, 146, 95, 62, 233, 44, 34, 188, 142, 160, 184, 189, 140, 182, 125, 61, 176, 116, 17, 62, 235, 152, 12, 190, 236, 135, 195, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 103, 7, 60, 176, 125, 201, 190, 67, 212, 27, 60, 135, 202, 163, 62, 76, 9, 33, 61, 106, 73, 93, 60, 14, 92, 193, 61, 179, 149, 71, 62, 57, 173, 127, 60, 21, 103, 226, 61, 119, 230, 212, 62, 251, 213, 43, 62, 61, 122, 37, 62, 100, 105, 62, 62, 209, 214, 252, 60, 122, 17, 8, 190, 49, 175, 200, 189, 64, 88, 147, 189, 87, 9, 182, 190, 232, 121, 226, 189, 88, 67, 39, 189, 197, 20, 36, 190, 161, 91, 117, 190, 56, 20, 154, 189, 24, 160, 83, 190, 90, 157, 12, 63, 166, 174, 52, 62, 227, 117, 136, 189, 8, 230, 217, 184, 14, 95, 54, 190, 200, 73, 29, 62, 212, 96, 26, 189, 116, 93, 173, 60, 79, 10, 247, 189, 204, 201, 230, 61, 226, 71, 245, 189, 226, 249, 19, 190, 177, 181, 37, 62, 20, 171, 11, 62, 185, 14, 31, 190, 10, 85, 141, 189, 215, 115, 196, 61, 13, 174, 209, 61, 215, 208, 16, 62, 12, 63, 105, 190, 217, 3, 63, 189, 84, 208, 217, 189, 215, 209, 221, 189, 75, 13, 27, 62, 231, 67, 33, 189, 115, 23, 231, 189, 148, 50, 216, 187, 129, 3, 179, 189, 14, 227, 39, 190, 254, 82, 15, 190, 81, 28, 127, 188, 100, 183, 236, 61, 42, 90, 80, 189, 139, 170, 40, 190, 75, 151, 35, 62, 31, 3, 33, 62, 72, 205, 254, 188, 12, 233, 250, 189, 29, 164, 223, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 150, 231, 61, 182, 210, 177, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 43, 24, 190, 163, 192, 5, 191, 237, 70, 91, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {126, 22, 176, 63, 15, 51, 31, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0057/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}