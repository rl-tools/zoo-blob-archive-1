// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 2, 59, 63, 150, 157, 214, 189, 36, 62, 113, 190, 133, 139, 202, 190, 98, 13, 103, 59, 43, 152, 228, 190, 4, 22, 144, 190, 207, 233, 120, 191, 154, 202, 35, 190, 111, 93, 187, 61, 140, 116, 52, 191, 52, 136, 211, 190, 179, 77, 42, 191, 42, 169, 245, 62, 182, 93, 34, 63, 247, 130, 182, 62, 11, 230, 167, 191, 22, 242, 12, 191, 51, 71, 131, 62, 192, 225, 97, 191, 159, 55, 180, 190, 239, 85, 24, 63, 236, 96, 228, 62, 126, 128, 218, 189, 110, 146, 241, 189, 51, 93, 186, 188, 27, 64, 191, 62, 178, 238, 48, 62, 231, 242, 169, 189, 163, 166, 56, 191, 38, 151, 72, 190, 48, 85, 194, 190, 29, 56, 224, 62, 245, 66, 4, 190, 181, 245, 124, 60, 149, 222, 6, 191, 78, 154, 86, 191, 231, 71, 11, 63, 44, 213, 252, 61, 63, 240, 58, 63, 120, 105, 96, 191, 109, 179, 109, 190, 130, 105, 170, 190, 84, 126, 106, 63, 101, 184, 44, 62, 15, 16, 251, 190, 90, 3, 219, 190, 136, 156, 63, 62, 187, 144, 11, 63, 187, 178, 193, 62, 162, 139, 25, 191, 182, 250, 226, 190, 57, 47, 162, 191, 152, 153, 255, 189, 174, 104, 8, 63, 133, 233, 130, 62, 230, 249, 80, 62, 84, 21, 59, 62, 11, 182, 144, 63, 35, 226, 1, 63, 99, 161, 129, 190, 115, 24, 122, 191, 214, 61, 149, 60, 99, 66, 17, 63, 96, 63, 30, 191, 145, 167, 5, 191, 126, 153, 154, 190, 238, 50, 131, 190, 223, 248, 179, 189, 236, 153, 44, 191, 231, 95, 248, 61, 147, 68, 102, 62, 253, 137, 62, 63, 62, 228, 163, 63, 189, 158, 140, 62, 73, 193, 197, 61, 126, 151, 111, 191, 43, 127, 147, 62, 209, 229, 42, 191, 117, 173, 75, 190, 57, 171, 191, 62, 41, 255, 91, 63, 91, 112, 16, 61, 78, 248, 230, 61, 221, 226, 186, 190, 16, 168, 73, 63, 235, 33, 31, 62, 124, 145, 204, 62, 210, 98, 2, 191, 118, 107, 27, 63, 177, 42, 53, 62, 210, 243, 139, 191, 163, 93, 155, 62, 50, 59, 60, 63, 32, 98, 93, 191, 34, 183, 117, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 137, 46, 191, 76, 41, 24, 190, 73, 123, 172, 61, 98, 162, 73, 188, 148, 84, 123, 61, 215, 133, 143, 62, 101, 125, 60, 62, 154, 51, 97, 62, 196, 224, 213, 61, 1, 217, 171, 62, 194, 77, 166, 188, 159, 141, 61, 191, 159, 135, 199, 62, 33, 148, 108, 190, 81, 21, 4, 63, 38, 187, 225, 188, 195, 69, 227, 62, 186, 143, 30, 190, 195, 216, 221, 62, 25, 254, 48, 190, 100, 236, 38, 62, 129, 145, 210, 190, 137, 181, 77, 63, 104, 127, 36, 63, 114, 137, 52, 61, 130, 55, 10, 62, 184, 115, 206, 190, 232, 67, 206, 61, 3, 151, 3, 63, 52, 234, 128, 190, 206, 181, 141, 62, 182, 73, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 224, 245, 190, 82, 188, 26, 62, 38, 18, 45, 190, 103, 45, 135, 189, 216, 123, 200, 190, 16, 71, 110, 60, 22, 115, 75, 187, 236, 42, 129, 62, 37, 159, 7, 191, 103, 78, 191, 60, 45, 28, 54, 190, 120, 141, 222, 61, 57, 146, 171, 190, 79, 43, 221, 190, 143, 135, 131, 190, 137, 174, 112, 61, 34, 169, 70, 62, 88, 97, 88, 62, 183, 195, 184, 62, 123, 213, 143, 191, 41, 86, 145, 190, 178, 73, 28, 190, 181, 149, 50, 61, 133, 60, 217, 190, 112, 10, 196, 62, 24, 30, 32, 62, 92, 205, 49, 188, 92, 228, 33, 62, 113, 29, 184, 190, 225, 15, 179, 62, 242, 125, 27, 59, 109, 62, 38, 190, 31, 134, 204, 188, 76, 163, 186, 62, 25, 234, 108, 190, 136, 1, 137, 190, 215, 144, 181, 62, 94, 132, 119, 190, 4, 152, 227, 190, 172, 124, 52, 62, 206, 211, 159, 62, 191, 115, 79, 189, 56, 208, 130, 62, 196, 133, 94, 190, 81, 137, 128, 62, 103, 44, 236, 190, 166, 62, 7, 62, 224, 49, 207, 61, 250, 46, 14, 189, 233, 153, 106, 190, 250, 156, 30, 62, 165, 201, 81, 190, 91, 34, 138, 190, 235, 165, 131, 190, 127, 173, 9, 190, 111, 91, 23, 190, 140, 114, 16, 189, 89, 239, 155, 62, 133, 168, 27, 62, 31, 125, 187, 190, 255, 110, 226, 61, 54, 38, 92, 190, 53, 214, 75, 190, 135, 230, 202, 188, 205, 134, 161, 190, 112, 163, 118, 60, 186, 199, 141, 188, 77, 126, 218, 189, 135, 205, 78, 190, 170, 188, 85, 188, 58, 215, 152, 59, 207, 241, 140, 62, 193, 224, 140, 189, 156, 169, 81, 62, 197, 205, 36, 190, 10, 87, 242, 61, 131, 255, 181, 189, 33, 73, 66, 191, 233, 44, 89, 62, 202, 125, 10, 190, 190, 105, 126, 61, 134, 223, 39, 190, 219, 251, 227, 61, 192, 180, 57, 190, 225, 98, 12, 190, 123, 214, 251, 190, 48, 1, 65, 62, 81, 153, 52, 190, 192, 224, 112, 61, 0, 122, 151, 61, 102, 61, 205, 190, 181, 6, 165, 62, 39, 9, 132, 62, 88, 83, 157, 62, 253, 219, 201, 62, 165, 176, 17, 191, 168, 11, 132, 190, 100, 172, 237, 61, 51, 40, 16, 62, 6, 247, 230, 188, 117, 59, 110, 190, 156, 248, 69, 62, 15, 181, 136, 189, 71, 12, 31, 62, 214, 17, 163, 61, 2, 67, 214, 189, 171, 134, 98, 62, 128, 250, 249, 189, 188, 231, 61, 191, 170, 36, 79, 189, 4, 175, 154, 61, 210, 230, 130, 190, 97, 187, 199, 189, 213, 131, 4, 63, 245, 52, 212, 62, 166, 87, 168, 190, 209, 221, 196, 62, 43, 59, 160, 59, 85, 42, 190, 189, 228, 229, 246, 190, 198, 173, 179, 62, 225, 219, 24, 61, 170, 232, 9, 189, 84, 205, 182, 62, 39, 31, 194, 189, 51, 129, 146, 62, 161, 110, 239, 61, 6, 38, 56, 62, 218, 207, 236, 190, 210, 235, 81, 188, 152, 142, 202, 189, 138, 245, 152, 61, 115, 205, 251, 61, 14, 214, 30, 62, 159, 243, 15, 62, 102, 186, 170, 189, 218, 23, 255, 188, 229, 225, 141, 189, 206, 241, 0, 190, 103, 255, 70, 61, 16, 168, 72, 62, 133, 33, 72, 190, 52, 135, 159, 62, 131, 29, 56, 62, 195, 48, 66, 62, 156, 84, 103, 62, 231, 5, 165, 62, 102, 10, 210, 61, 12, 246, 152, 61, 246, 250, 61, 190, 255, 167, 11, 62, 87, 139, 195, 188, 251, 236, 23, 62, 172, 182, 184, 61, 197, 141, 9, 190, 57, 197, 134, 61, 228, 145, 5, 62, 218, 214, 169, 61, 168, 143, 214, 189, 164, 250, 75, 190, 18, 47, 159, 60, 163, 177, 255, 188, 202, 60, 119, 191, 165, 80, 72, 62, 166, 240, 39, 187, 219, 206, 70, 190, 205, 191, 55, 61, 79, 197, 103, 62, 212, 244, 36, 191, 97, 91, 39, 62, 204, 20, 113, 190, 175, 244, 184, 189, 2, 103, 117, 191, 27, 13, 104, 187, 176, 155, 121, 190, 39, 135, 0, 190, 157, 221, 61, 62, 67, 98, 55, 191, 255, 207, 210, 62, 201, 66, 137, 191, 89, 229, 187, 190, 255, 89, 249, 58, 53, 45, 87, 190, 28, 242, 217, 190, 135, 89, 74, 62, 202, 224, 96, 59, 200, 57, 199, 189, 72, 120, 43, 62, 92, 242, 26, 191, 28, 75, 252, 190, 109, 169, 198, 62, 202, 157, 165, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 166, 73, 197, 190, 112, 215, 210, 189, 126, 255, 229, 61, 172, 238, 70, 190, 157, 236, 1, 61, 92, 108, 165, 61, 120, 110, 21, 61, 3, 69, 72, 61, 92, 189, 133, 189, 84, 165, 199, 61, 209, 189, 14, 189, 28, 19, 170, 60, 146, 245, 179, 61, 19, 93, 150, 190, 122, 205, 43, 61, 174, 215, 73, 62, 192, 149, 62, 62, 80, 186, 231, 189, 13, 220, 55, 60, 237, 96, 13, 61, 236, 70, 146, 62, 223, 183, 84, 190, 184, 184, 55, 62, 71, 24, 7, 61, 57, 20, 236, 61, 20, 142, 130, 190, 103, 247, 81, 60, 209, 148, 119, 59, 185, 16, 130, 61, 66, 81, 181, 61, 255, 45, 68, 62, 98, 121, 212, 190, 80, 224, 20, 190, 213, 185, 12, 190, 177, 181, 223, 189, 75, 209, 12, 62, 117, 13, 80, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 134, 235, 60, 61, 157, 36, 226, 189, 70, 103, 215, 61, 39, 205, 201, 186, 45, 112, 204, 61, 190, 222, 222, 188, 184, 255, 29, 190, 64, 148, 22, 188, 228, 252, 104, 189, 237, 11, 26, 190, 189, 46, 132, 189, 219, 191, 30, 190, 44, 233, 205, 61, 99, 149, 20, 190, 199, 6, 69, 61, 35, 255, 251, 61, 88, 111, 44, 190, 238, 146, 50, 190, 145, 55, 50, 190, 140, 236, 150, 61, 191, 207, 101, 60, 243, 33, 193, 189, 200, 100, 227, 189, 162, 102, 180, 189, 247, 178, 36, 191, 133, 26, 48, 62, 238, 224, 131, 62, 45, 105, 147, 188, 67, 148, 220, 188, 245, 203, 194, 61, 161, 162, 55, 62, 46, 132, 21, 62, 32, 63, 92, 189, 103, 98, 155, 189, 185, 194, 43, 189, 241, 108, 58, 62, 28, 204, 144, 61, 153, 223, 212, 190, 122, 185, 83, 188, 211, 172, 25, 61, 36, 70, 39, 62, 177, 179, 90, 62, 216, 46, 0, 62, 145, 239, 231, 61, 76, 44, 89, 62, 136, 32, 171, 190, 85, 205, 127, 62, 213, 66, 128, 61, 78, 95, 41, 62, 28, 72, 211, 189, 222, 105, 163, 189, 206, 69, 66, 62, 52, 33, 173, 62, 253, 6, 196, 61, 27, 130, 136, 61, 16, 198, 26, 191, 31, 141, 31, 62, 202, 58, 164, 62, 182, 62, 236, 61, 123, 131, 105, 191, 59, 187, 55, 62, 180, 56, 233, 190, 54, 228, 184, 190, 90, 110, 82, 190, 5, 109, 20, 62, 198, 23, 200, 190, 22, 183, 254, 62, 3, 47, 153, 190, 143, 154, 28, 62, 146, 3, 28, 191, 176, 75, 46, 61, 197, 214, 78, 62, 29, 91, 20, 191, 28, 234, 122, 189, 159, 27, 226, 189, 91, 132, 42, 191, 229, 68, 100, 189, 220, 123, 164, 190, 1, 233, 153, 62, 249, 31, 21, 62, 198, 129, 50, 191, 110, 27, 12, 63, 113, 17, 242, 62, 69, 42, 246, 189, 38, 169, 153, 61, 122, 156, 230, 190, 173, 146, 203, 189, 52, 26, 28, 62, 240, 47, 7, 189, 1, 241, 122, 60, 35, 144, 6, 61, 171, 200, 153, 186, 197, 241, 196, 189, 79, 101, 44, 190, 180, 98, 237, 61, 238, 89, 15, 190, 84, 94, 23, 61, 123, 51, 253, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 127, 102, 164, 189, 120, 228, 4, 189, 201, 180, 190, 189, 156, 216, 29, 61, 171, 157, 169, 189, 126, 69, 138, 61, 10, 92, 153, 189, 254, 165, 171, 61, 50, 163, 114, 61, 17, 114, 178, 61, 158, 222, 182, 189, 204, 70, 151, 189, 177, 57, 26, 190, 240, 177, 35, 62, 179, 2, 145, 61, 28, 204, 231, 189, 85, 130, 183, 189, 226, 184, 195, 61, 132, 31, 253, 61, 40, 46, 244, 60, 217, 221, 129, 62, 39, 209, 26, 61, 146, 41, 162, 190, 100, 120, 124, 62, 232, 14, 173, 188, 101, 140, 78, 190, 40, 246, 233, 190, 252, 142, 95, 62, 230, 228, 61, 190, 157, 216, 193, 62, 59, 52, 242, 189, 254, 62, 243, 61, 127, 206, 88, 61, 173, 21, 203, 61, 249, 225, 26, 61, 55, 255, 124, 190, 49, 187, 13, 62, 136, 175, 154, 61, 146, 20, 14, 62, 194, 15, 73, 62, 100, 125, 65, 61, 154, 167, 31, 60, 227, 119, 221, 61, 46, 231, 48, 188, 28, 224, 215, 62, 197, 0, 171, 62, 195, 147, 174, 190, 115, 102, 219, 59, 40, 48, 249, 61, 65, 199, 177, 61, 50, 148, 89, 61, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 30, 95, 129, 62, 98, 165, 129, 190, 229, 98, 111, 191, 4, 100, 54, 62, 86, 228, 72, 191, 20, 74, 252, 190, 37, 37, 250, 190, 110, 33, 134, 62, 38, 124, 89, 190, 199, 110, 108, 62, 16, 152, 149, 190, 111, 233, 59, 62, 146, 193, 171, 190, 6, 117, 21, 188, 212, 89, 67, 189, 92, 145, 161, 190, 144, 57, 202, 188, 61, 171, 180, 190, 16, 147, 198, 190, 143, 119, 171, 190, 199, 231, 150, 189, 239, 215, 32, 62, 209, 224, 128, 62, 90, 150, 33, 191, 233, 30, 154, 62, 225, 84, 117, 62, 9, 210, 115, 190, 217, 246, 197, 61, 132, 2, 12, 191, 90, 158, 181, 190, 126, 2, 157, 189, 24, 226, 129, 62, 105, 37, 214, 61, 86, 89, 223, 60, 184, 65, 51, 62, 163, 208, 183, 190, 52, 84, 124, 62, 225, 54, 181, 61, 5, 43, 54, 62, 57, 14, 133, 190, 166, 177, 136, 62, 240, 221, 92, 62, 244, 223, 156, 62, 250, 89, 212, 189, 158, 104, 143, 189, 116, 183, 223, 190, 164, 167, 50, 62, 228, 34, 210, 62, 170, 65, 53, 62, 141, 126, 26, 61, 231, 73, 17, 191, 250, 87, 67, 59, 144, 128, 132, 62, 78, 1, 20, 62, 200, 219, 248, 60, 241, 107, 146, 190, 188, 251, 77, 62, 142, 19, 3, 61, 148, 35, 37, 190, 223, 163, 10, 191, 41, 139, 43, 62, 105, 148, 19, 63, 174, 115, 133, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 94, 119, 195, 189, 223, 238, 131, 189, 91, 149, 189, 61, 188, 59, 194, 61, 65, 222, 132, 189, 255, 30, 32, 190, 205, 133, 226, 189, 129, 189, 152, 61, 249, 76, 159, 61, 29, 61, 15, 62, 159, 196, 27, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 7, 124, 121, 188, 135, 59, 86, 62, 175, 167, 224, 189, 229, 6, 50, 62, 249, 185, 45, 191, 60, 80, 69, 190, 96, 47, 159, 62, 50, 43, 254, 190, 192, 51, 50, 191, 138, 74, 2, 191, 245, 199, 38, 60, 254, 198, 90, 62, 82, 32, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 62, 6, 227, 61, 194, 116, 175, 190, 136, 29, 171, 61, 184, 48, 109, 189, 110, 55, 135, 62, 118, 127, 77, 189, 244, 215, 119, 60, 215, 190, 207, 190, 205, 207, 165, 62, 247, 37, 254, 189, 72, 57, 157, 62, 34, 103, 54, 61, 152, 22, 144, 189, 106, 33, 82, 60, 241, 211, 149, 189, 48, 64, 194, 61, 139, 110, 30, 190, 65, 8, 37, 62, 248, 120, 226, 61, 240, 36, 238, 188, 216, 253, 62, 187, 224, 37, 173, 61, 158, 209, 128, 190, 20, 69, 192, 189, 127, 155, 113, 189, 36, 107, 12, 62, 164, 149, 114, 188, 104, 190, 189, 190, 204, 84, 5, 190, 107, 6, 218, 61, 36, 123, 40, 190, 123, 25, 45, 62, 115, 17, 11, 190, 76, 227, 16, 61, 212, 154, 10, 188, 11, 194, 164, 61, 243, 8, 146, 190, 215, 177, 205, 60, 124, 138, 199, 61, 39, 139, 18, 61, 53, 201, 131, 190, 125, 247, 219, 61, 213, 212, 156, 59, 96, 2, 230, 188, 109, 188, 245, 190, 76, 118, 172, 189, 27, 62, 210, 190, 10, 18, 207, 61, 60, 14, 212, 61, 69, 112, 60, 62, 76, 57, 149, 62, 208, 157, 248, 190, 102, 61, 96, 190, 219, 173, 91, 59, 205, 159, 180, 189, 131, 69, 185, 61, 234, 39, 241, 61, 74, 152, 137, 62, 27, 189, 248, 61, 251, 37, 45, 190, 136, 221, 32, 191, 140, 55, 122, 189, 55, 150, 70, 62, 182, 30, 186, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 139, 61, 166, 189, 248, 67, 141, 190, 63, 166, 73, 190, 188, 46, 45, 61, 250, 12, 241, 61, 82, 6, 51, 190, 149, 13, 129, 189, 105, 7, 156, 190, 92, 57, 45, 61, 62, 218, 134, 61, 143, 171, 73, 62, 99, 138, 114, 189, 16, 23, 161, 61, 189, 175, 1, 62, 187, 54, 118, 62, 225, 171, 223, 189, 91, 248, 191, 189, 99, 72, 44, 189, 192, 111, 182, 189, 153, 160, 28, 191, 226, 81, 24, 190, 201, 227, 153, 62, 164, 40, 56, 62, 11, 161, 118, 61, 31, 40, 26, 191, 63, 151, 140, 61, 41, 242, 0, 62, 45, 58, 163, 190, 83, 235, 129, 62, 220, 206, 140, 190, 129, 211, 34, 190, 225, 41, 12, 190, 237, 23, 72, 190, 28, 150, 26, 62, 115, 183, 204, 61, 217, 148, 172, 189, 81, 72, 51, 62, 73, 0, 124, 189, 213, 197, 50, 190, 162, 255, 11, 190, 26, 25, 36, 190, 81, 25, 46, 187, 68, 241, 7, 190, 35, 155, 183, 60, 118, 217, 66, 61, 190, 182, 102, 189, 173, 49, 34, 189, 47, 54, 116, 61, 31, 8, 161, 61, 92, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 221, 248, 13, 190, 25, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 94, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 82, 39, 154, 61, 152, 120, 38, 62, 212, 35, 208, 190, 34, 160, 180, 190, 101, 68, 217, 189, 40, 34, 174, 189, 224, 7, 138, 62, 9, 191, 186, 62, 95, 126, 208, 189, 190, 184, 137, 189, 142, 153, 7, 190, 191, 57, 253, 60, 97, 156, 237, 190, 160, 159, 218, 189, 92, 97, 241, 62, 110, 215, 200, 189, 147, 55, 37, 190, 27, 141, 17, 190, 207, 171, 128, 189, 26, 10, 247, 62, 95, 220, 56, 189, 138, 22, 163, 61, 209, 148, 155, 60, 61, 234, 191, 188, 4, 241, 26, 62, 197, 20, 188, 189, 150, 234, 113, 60, 179, 184, 229, 61, 66, 132, 227, 62, 34, 160, 134, 190, 44, 218, 19, 62, 156, 218, 165, 62, 163, 191, 226, 62, 218, 160, 82, 190, 104, 99, 199, 190, 190, 65, 223, 60, 159, 171, 222, 188, 150, 40, 31, 191, 188, 77, 207, 189, 130, 182, 193, 189, 214, 49, 51, 189, 5, 40, 166, 190, 130, 71, 154, 59, 203, 253, 159, 188, 50, 72, 179, 190, 213, 14, 226, 190, 119, 220, 245, 61, 61, 226, 189, 190, 11, 134, 95, 62, 176, 57, 94, 190, 252, 154, 93, 62, 82, 245, 11, 191, 72, 87, 43, 62, 49, 122, 230, 62, 98, 148, 134, 189, 166, 235, 78, 62, 17, 57, 154, 62, 156, 210, 97, 188, 34, 130, 179, 62, 126, 174, 181, 190, 46, 143, 12, 191, 10, 102, 156, 190, 158, 212, 231, 189, 72, 45, 201, 62, 185, 86, 231, 61, 101, 154, 41, 60, 181, 55, 18, 62, 90, 121, 105, 190, 126, 123, 161, 190, 92, 33, 114, 61, 191, 218, 47, 191, 240, 152, 247, 190, 205, 114, 37, 59, 118, 186, 5, 190, 181, 47, 18, 62, 209, 174, 178, 189, 70, 50, 173, 189, 161, 28, 82, 62, 29, 121, 189, 189, 162, 60, 119, 62, 230, 94, 42, 62, 185, 160, 33, 62, 222, 97, 132, 190, 49, 95, 247, 188, 66, 153, 171, 190, 131, 186, 247, 189, 90, 63, 116, 61, 218, 80, 73, 62, 14, 81, 0, 61, 138, 52, 160, 190, 115, 140, 168, 189, 231, 228, 144, 62, 242, 81, 83, 190, 155, 199, 38, 61, 118, 252, 54, 189, 81, 175, 165, 189, 41, 204, 32, 190, 36, 250, 118, 190, 39, 9, 131, 187, 171, 196, 18, 62, 86, 116, 43, 62, 60, 144, 236, 190, 231, 37, 195, 60, 14, 37, 183, 61, 246, 140, 198, 61, 42, 188, 111, 190, 240, 125, 76, 61, 47, 105, 6, 191, 208, 99, 29, 61, 59, 10, 17, 190, 127, 80, 86, 191, 77, 32, 74, 188, 97, 101, 61, 62, 40, 30, 241, 61, 179, 109, 97, 62, 12, 205, 155, 62, 64, 62, 128, 190, 50, 39, 6, 63, 103, 236, 237, 190, 255, 16, 3, 62, 209, 121, 130, 190, 133, 69, 9, 62, 110, 15, 150, 190, 94, 21, 17, 191, 136, 249, 143, 62, 91, 25, 138, 61, 17, 100, 102, 190, 104, 243, 227, 60, 1, 17, 7, 191, 77, 4, 3, 191, 95, 207, 175, 60, 222, 209, 44, 62, 84, 146, 46, 60, 163, 31, 83, 189, 123, 149, 184, 190, 2, 204, 249, 190, 174, 5, 81, 62, 160, 143, 124, 187, 81, 242, 34, 62, 88, 135, 135, 190, 110, 199, 103, 61, 150, 3, 112, 189, 124, 153, 238, 190, 99, 169, 144, 62, 123, 220, 255, 189, 131, 238, 201, 188, 199, 158, 156, 188, 123, 250, 240, 61, 34, 12, 250, 62, 232, 81, 26, 191, 14, 249, 155, 190, 60, 45, 155, 190, 146, 82, 174, 61, 20, 31, 180, 62, 247, 251, 68, 190, 145, 141, 25, 189, 23, 199, 174, 61, 97, 0, 92, 61, 25, 148, 200, 61, 87, 153, 234, 189, 101, 44, 247, 190, 170, 197, 187, 190, 119, 182, 240, 190, 117, 124, 79, 61, 31, 53, 243, 188, 243, 150, 217, 60, 85, 244, 143, 62, 139, 190, 140, 189, 83, 9, 0, 62, 159, 153, 53, 62, 183, 210, 23, 189, 6, 201, 197, 60, 15, 3, 188, 190, 25, 213, 180, 190, 124, 247, 59, 189, 104, 140, 1, 191, 28, 18, 159, 61, 237, 109, 206, 189, 46, 238, 95, 62, 142, 97, 153, 62, 138, 6, 171, 188, 113, 89, 7, 62, 178, 121, 108, 189, 112, 241, 13, 62, 125, 29, 162, 190, 129, 79, 231, 189, 201, 248, 175, 62, 143, 8, 128, 62, 233, 188, 72, 62, 208, 101, 25, 191, 159, 179, 147, 61, 207, 37, 72, 189, 149, 43, 4, 63, 46, 66, 173, 190, 14, 15, 209, 188, 28, 218, 168, 62, 144, 145, 140, 61, 90, 169, 219, 190, 77, 16, 77, 62, 80, 156, 227, 187, 144, 113, 136, 188, 213, 195, 233, 189, 181, 99, 23, 62, 38, 172, 216, 190, 108, 167, 244, 62, 59, 204, 220, 189, 136, 107, 172, 187, 123, 12, 73, 62, 155, 83, 128, 190, 1, 163, 171, 62, 26, 169, 156, 62, 96, 93, 93, 62, 46, 208, 8, 62, 44, 146, 245, 62, 138, 229, 251, 190, 149, 158, 126, 62, 55, 103, 59, 190, 26, 16, 149, 62, 130, 77, 186, 190, 33, 4, 182, 190, 214, 238, 211, 62, 172, 63, 160, 62, 37, 70, 200, 188, 73, 158, 221, 61, 59, 133, 227, 190, 163, 65, 243, 190, 54, 49, 29, 62, 144, 232, 80, 62, 24, 94, 228, 61, 28, 44, 183, 190, 193, 74, 149, 62, 20, 86, 16, 62, 101, 63, 174, 60, 255, 47, 182, 190, 72, 50, 7, 62, 68, 118, 23, 191, 59, 20, 197, 61, 238, 54, 119, 61, 28, 252, 9, 191, 10, 124, 63, 61, 58, 201, 32, 61, 252, 45, 137, 189, 226, 36, 11, 63, 4, 199, 57, 190, 32, 69, 133, 189, 232, 0, 54, 63, 63, 66, 19, 191, 153, 40, 18, 189, 219, 189, 100, 190, 128, 28, 161, 188, 216, 144, 38, 191, 180, 74, 209, 190, 7, 37, 143, 62, 188, 84, 177, 61, 188, 29, 252, 189, 155, 17, 14, 62, 46, 110, 84, 191, 184, 162, 138, 190, 110, 5, 78, 59, 187, 219, 102, 190, 125, 154, 183, 190, 207, 92, 130, 59, 73, 48, 140, 60, 167, 249, 147, 190, 141, 159, 129, 189, 222, 206, 140, 62, 189, 51, 134, 189, 58, 177, 213, 62, 54, 70, 244, 190, 146, 193, 28, 62, 56, 47, 17, 189, 14, 51, 9, 62, 53, 164, 71, 61, 237, 57, 64, 189, 9, 195, 151, 189, 181, 58, 139, 62, 17, 94, 80, 190, 227, 102, 125, 190, 255, 134, 241, 61, 211, 215, 213, 60, 247, 83, 106, 188, 80, 229, 13, 62, 203, 26, 49, 62, 1, 247, 193, 61, 197, 92, 86, 62, 80, 63, 30, 190, 13, 196, 86, 61, 255, 2, 162, 189, 38, 87, 5, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 210, 241, 61, 132, 108, 124, 61, 34, 153, 11, 62, 9, 81, 220, 61, 38, 33, 142, 62, 32, 120, 127, 61, 134, 162, 153, 189, 122, 141, 81, 61, 82, 192, 61, 190, 0, 245, 82, 60, 128, 46, 68, 62, 174, 75, 246, 188, 60, 124, 241, 60, 220, 202, 58, 189, 42, 153, 86, 62, 52, 12, 16, 61, 195, 142, 113, 190, 44, 63, 185, 189, 69, 47, 74, 190, 227, 91, 94, 60, 222, 228, 154, 61, 255, 115, 162, 189, 49, 203, 78, 190, 247, 12, 104, 62, 193, 21, 40, 62, 219, 110, 219, 59, 215, 230, 85, 62, 30, 185, 82, 190, 32, 254, 3, 190, 114, 109, 169, 188, 53, 54, 240, 60, 159, 88, 173, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 99, 188, 61, 136, 201, 171, 62, 218, 235, 20, 191, 104, 143, 103, 190, 98, 103, 11, 190, 140, 15, 250, 62, 39, 186, 152, 188, 219, 126, 19, 190, 138, 202, 235, 61, 239, 98, 158, 190, 182, 178, 103, 63, 166, 39, 231, 188, 83, 194, 225, 190, 58, 207, 70, 61, 72, 154, 100, 63, 43, 89, 201, 62, 17, 99, 84, 63, 226, 37, 203, 189, 192, 212, 19, 190, 52, 188, 241, 61, 175, 47, 242, 188, 169, 222, 1, 191, 194, 22, 52, 61, 59, 129, 241, 62, 222, 251, 33, 63, 128, 119, 239, 62, 211, 98, 1, 191, 205, 42, 204, 62, 65, 26, 212, 62, 5, 156, 252, 190, 48, 233, 212, 190, 195, 19, 87, 61, 149, 78, 33, 191, 96, 88, 106, 190, 234, 226, 178, 189, 201, 243, 191, 190, 105, 180, 100, 190, 234, 23, 184, 190, 58, 52, 185, 61, 37, 50, 240, 189, 79, 231, 146, 189, 210, 136, 77, 189, 100, 24, 39, 189, 61, 237, 36, 190, 79, 67, 93, 61, 152, 147, 60, 60, 164, 157, 84, 62, 199, 72, 115, 61, 97, 185, 240, 60, 134, 107, 45, 190, 153, 196, 23, 62, 244, 235, 142, 189, 241, 219, 156, 61, 159, 45, 23, 62, 105, 103, 34, 62, 11, 218, 233, 61, 28, 162, 228, 61, 219, 179, 63, 62, 37, 242, 175, 189, 82, 38, 173, 62, 83, 197, 177, 59, 219, 250, 123, 189, 241, 124, 64, 62, 136, 202, 38, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 241, 42, 60, 141, 60, 74, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {193, 111, 169, 190, 178, 196, 83, 62, 98, 13, 61, 59};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 179, 26, 61, 30, 10, 230, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}