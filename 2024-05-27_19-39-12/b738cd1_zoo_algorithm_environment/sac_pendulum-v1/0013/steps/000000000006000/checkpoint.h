// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 133, 53, 63, 173, 242, 172, 188, 118, 160, 92, 190, 114, 30, 227, 190, 250, 161, 182, 62, 81, 184, 213, 190, 107, 48, 207, 190, 31, 255, 87, 191, 216, 7, 35, 190, 24, 249, 93, 61, 116, 103, 43, 191, 65, 241, 1, 191, 20, 163, 49, 191, 126, 115, 217, 62, 155, 192, 41, 63, 170, 189, 58, 62, 242, 151, 161, 191, 181, 238, 19, 191, 225, 233, 226, 61, 80, 225, 103, 191, 73, 121, 187, 190, 127, 7, 66, 63, 128, 6, 165, 62, 197, 30, 183, 189, 210, 104, 75, 61, 202, 136, 137, 189, 18, 34, 212, 62, 52, 219, 152, 62, 217, 70, 78, 190, 101, 169, 87, 191, 198, 176, 137, 61, 253, 72, 213, 190, 58, 106, 226, 62, 43, 82, 142, 190, 162, 88, 18, 62, 118, 220, 14, 191, 219, 195, 97, 191, 159, 138, 248, 62, 245, 183, 232, 61, 142, 39, 59, 63, 23, 132, 69, 191, 0, 28, 84, 190, 84, 123, 166, 190, 101, 189, 43, 63, 240, 210, 13, 62, 231, 81, 248, 190, 212, 43, 131, 190, 67, 212, 84, 62, 165, 227, 46, 63, 58, 15, 151, 62, 84, 226, 39, 191, 49, 152, 34, 191, 188, 224, 135, 191, 100, 16, 53, 190, 56, 213, 25, 63, 174, 200, 153, 62, 92, 49, 34, 62, 136, 72, 77, 62, 167, 224, 114, 63, 217, 61, 6, 63, 157, 62, 174, 189, 114, 102, 96, 191, 243, 13, 1, 61, 51, 100, 0, 63, 131, 206, 8, 191, 40, 172, 10, 191, 128, 140, 151, 190, 115, 146, 90, 190, 70, 148, 232, 189, 153, 171, 45, 191, 244, 144, 44, 189, 106, 40, 131, 62, 61, 133, 66, 63, 123, 113, 156, 63, 164, 234, 128, 62, 54, 191, 162, 61, 211, 143, 81, 191, 2, 51, 175, 62, 147, 90, 237, 190, 140, 179, 120, 190, 79, 118, 189, 62, 88, 163, 108, 63, 160, 24, 235, 188, 88, 209, 239, 61, 24, 38, 182, 190, 207, 89, 26, 63, 143, 35, 10, 62, 125, 102, 175, 62, 105, 142, 207, 190, 64, 185, 31, 63, 152, 206, 174, 189, 184, 16, 142, 191, 92, 230, 145, 62, 117, 102, 55, 63, 114, 96, 73, 191, 164, 125, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 224, 37, 191, 45, 124, 15, 190, 170, 206, 133, 61, 207, 136, 193, 61, 208, 197, 96, 61, 110, 111, 187, 62, 7, 201, 117, 62, 155, 49, 160, 62, 217, 162, 253, 61, 88, 147, 143, 62, 117, 73, 229, 188, 230, 84, 48, 191, 0, 6, 210, 62, 39, 32, 52, 190, 166, 245, 10, 63, 254, 73, 38, 189, 240, 0, 188, 62, 40, 215, 16, 190, 29, 78, 245, 62, 19, 234, 136, 190, 229, 14, 39, 62, 223, 35, 216, 190, 6, 143, 74, 63, 225, 95, 19, 63, 114, 202, 183, 61, 152, 244, 110, 185, 137, 91, 9, 191, 43, 162, 39, 62, 231, 15, 11, 63, 207, 54, 138, 189, 60, 18, 100, 62, 57, 173, 2, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 105, 169, 190, 174, 101, 178, 61, 31, 210, 4, 190, 116, 140, 48, 189, 134, 17, 76, 190, 115, 174, 255, 60, 160, 141, 120, 60, 136, 179, 128, 62, 123, 57, 225, 190, 139, 3, 13, 61, 104, 117, 189, 189, 11, 203, 161, 60, 203, 37, 112, 190, 82, 29, 182, 190, 176, 105, 8, 190, 41, 119, 190, 61, 86, 84, 79, 62, 33, 100, 97, 62, 210, 6, 93, 62, 37, 51, 240, 190, 111, 24, 210, 189, 129, 163, 247, 189, 54, 95, 49, 61, 60, 62, 80, 190, 12, 213, 150, 62, 146, 163, 241, 189, 92, 205, 49, 188, 240, 131, 73, 187, 118, 168, 103, 190, 109, 186, 177, 189, 100, 139, 173, 190, 142, 35, 231, 189, 201, 26, 205, 188, 0, 109, 197, 62, 239, 241, 111, 190, 172, 191, 117, 190, 57, 144, 178, 62, 93, 22, 60, 190, 197, 3, 197, 190, 17, 152, 84, 62, 47, 96, 173, 62, 177, 151, 22, 190, 121, 204, 153, 62, 173, 105, 179, 190, 22, 19, 85, 62, 252, 113, 181, 190, 132, 75, 179, 61, 9, 57, 214, 61, 30, 58, 10, 190, 189, 123, 114, 190, 209, 235, 111, 62, 201, 167, 107, 190, 72, 80, 112, 190, 55, 122, 88, 190, 117, 153, 195, 189, 153, 116, 19, 190, 202, 250, 110, 189, 70, 43, 197, 62, 151, 165, 18, 62, 20, 227, 68, 190, 27, 149, 142, 61, 253, 190, 33, 190, 36, 247, 252, 189, 80, 40, 107, 61, 53, 166, 95, 190, 52, 59, 130, 189, 144, 111, 30, 189, 90, 100, 181, 189, 28, 48, 27, 190, 130, 111, 49, 61, 218, 121, 156, 61, 140, 150, 131, 62, 164, 24, 44, 190, 195, 221, 52, 62, 151, 1, 117, 190, 96, 194, 164, 61, 60, 34, 5, 190, 248, 43, 19, 191, 94, 112, 192, 61, 116, 223, 60, 187, 55, 3, 43, 61, 204, 92, 85, 190, 182, 171, 100, 61, 51, 222, 121, 190, 188, 70, 47, 189, 70, 74, 249, 190, 223, 159, 6, 62, 15, 72, 36, 190, 50, 42, 247, 188, 42, 47, 254, 188, 75, 57, 68, 190, 128, 211, 112, 62, 95, 45, 16, 62, 252, 252, 7, 62, 47, 21, 202, 62, 240, 194, 218, 190, 55, 229, 50, 190, 211, 18, 149, 61, 215, 4, 245, 60, 18, 108, 28, 189, 26, 12, 164, 190, 152, 130, 65, 62, 184, 85, 144, 189, 94, 61, 81, 62, 188, 153, 12, 190, 127, 202, 196, 189, 181, 208, 141, 61, 58, 147, 47, 190, 199, 137, 8, 191, 234, 243, 132, 189, 194, 136, 52, 61, 99, 194, 67, 190, 203, 189, 100, 189, 10, 7, 202, 62, 89, 240, 184, 62, 56, 209, 242, 190, 247, 247, 179, 62, 246, 217, 128, 59, 77, 58, 136, 189, 14, 15, 226, 190, 37, 96, 100, 62, 171, 141, 148, 188, 201, 153, 185, 189, 163, 43, 159, 62, 23, 178, 233, 189, 243, 221, 159, 188, 191, 230, 46, 62, 227, 17, 42, 62, 251, 20, 178, 190, 76, 128, 52, 189, 92, 70, 15, 190, 147, 189, 135, 61, 230, 67, 11, 62, 211, 159, 33, 62, 145, 230, 21, 62, 212, 40, 85, 189, 198, 112, 87, 189, 79, 184, 152, 189, 41, 152, 36, 190, 225, 226, 5, 61, 11, 194, 104, 62, 230, 21, 32, 190, 100, 122, 159, 62, 49, 235, 87, 62, 172, 178, 80, 62, 176, 161, 50, 62, 144, 147, 168, 62, 96, 208, 10, 62, 232, 92, 26, 189, 51, 161, 68, 190, 198, 128, 4, 62, 42, 94, 196, 57, 224, 210, 54, 62, 194, 153, 4, 61, 153, 81, 231, 189, 171, 45, 118, 61, 21, 37, 7, 62, 160, 93, 75, 60, 230, 72, 5, 190, 3, 85, 53, 190, 51, 145, 156, 61, 251, 0, 125, 188, 238, 186, 80, 191, 98, 24, 85, 62, 166, 240, 39, 187, 19, 79, 105, 190, 86, 215, 219, 58, 113, 249, 79, 62, 208, 36, 229, 190, 98, 91, 68, 62, 212, 133, 121, 189, 213, 161, 190, 189, 10, 211, 58, 191, 85, 58, 187, 189, 218, 253, 213, 189, 39, 135, 0, 190, 216, 68, 78, 62, 229, 242, 65, 191, 163, 3, 158, 62, 190, 76, 19, 191, 114, 1, 200, 190, 161, 231, 5, 61, 97, 235, 128, 190, 145, 94, 93, 190, 117, 30, 35, 62, 6, 216, 80, 190, 200, 57, 199, 189, 48, 223, 74, 61, 148, 9, 234, 190, 99, 14, 14, 191, 165, 67, 24, 189, 167, 109, 141, 59, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 39, 98, 142, 190, 63, 138, 191, 189, 255, 20, 44, 62, 58, 88, 45, 190, 52, 27, 61, 61, 234, 249, 243, 61, 191, 68, 164, 61, 178, 143, 8, 61, 155, 69, 174, 189, 69, 125, 217, 61, 71, 237, 137, 189, 141, 193, 79, 61, 109, 240, 230, 61, 59, 30, 103, 190, 53, 179, 2, 61, 14, 220, 102, 62, 49, 164, 70, 62, 72, 166, 148, 189, 14, 221, 231, 188, 63, 226, 129, 61, 16, 71, 115, 62, 220, 180, 55, 190, 162, 194, 51, 62, 40, 69, 95, 61, 117, 103, 228, 61, 199, 172, 161, 190, 224, 26, 29, 61, 120, 7, 106, 189, 158, 163, 103, 61, 240, 234, 194, 60, 186, 6, 39, 62, 184, 151, 187, 190, 80, 224, 20, 190, 49, 85, 12, 190, 38, 2, 223, 189, 75, 209, 12, 62, 198, 87, 29, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 55, 18, 65, 61, 157, 36, 226, 189, 147, 186, 216, 61, 39, 205, 201, 186, 49, 26, 213, 61, 190, 222, 222, 188, 14, 140, 26, 190, 39, 133, 0, 188, 228, 252, 104, 189, 237, 11, 26, 190, 8, 2, 132, 189, 107, 174, 30, 190, 59, 75, 207, 61, 99, 149, 20, 190, 186, 38, 82, 61, 88, 121, 2, 62, 88, 111, 44, 190, 238, 146, 50, 190, 85, 54, 49, 190, 140, 236, 150, 61, 102, 129, 142, 60, 243, 33, 193, 189, 200, 100, 227, 189, 162, 102, 180, 189, 4, 21, 5, 191, 245, 68, 69, 62, 0, 177, 94, 62, 9, 1, 223, 187, 127, 141, 129, 188, 143, 106, 241, 61, 146, 67, 81, 62, 138, 84, 44, 62, 82, 21, 170, 189, 149, 246, 118, 189, 7, 0, 173, 189, 112, 147, 111, 62, 93, 108, 187, 61, 23, 56, 191, 190, 18, 8, 32, 189, 151, 130, 99, 61, 8, 255, 67, 62, 251, 58, 32, 62, 60, 82, 222, 61, 204, 181, 4, 62, 131, 48, 195, 61, 112, 67, 159, 190, 88, 8, 113, 62, 137, 35, 146, 61, 233, 166, 35, 62, 204, 71, 44, 190, 231, 100, 92, 189, 83, 78, 41, 62, 227, 89, 161, 62, 232, 199, 238, 60, 44, 137, 25, 61, 236, 249, 17, 191, 31, 141, 31, 62, 157, 30, 213, 62, 41, 41, 200, 188, 233, 138, 131, 191, 160, 1, 52, 62, 177, 246, 18, 191, 172, 40, 240, 190, 110, 44, 133, 189, 93, 162, 254, 61, 177, 31, 197, 190, 123, 113, 242, 62, 158, 80, 23, 191, 82, 92, 49, 62, 105, 8, 2, 191, 2, 241, 144, 61, 1, 60, 44, 62, 167, 46, 9, 191, 209, 212, 87, 190, 114, 162, 210, 189, 25, 241, 41, 191, 68, 49, 45, 190, 220, 123, 164, 190, 190, 213, 127, 62, 57, 206, 3, 62, 81, 32, 36, 191, 8, 55, 3, 63, 110, 251, 236, 62, 172, 134, 48, 190, 175, 46, 199, 61, 188, 154, 237, 190, 107, 204, 28, 190, 201, 39, 127, 62, 240, 47, 7, 189, 1, 241, 122, 60, 35, 144, 6, 61, 171, 200, 153, 186, 197, 241, 196, 189, 79, 101, 44, 190, 180, 98, 237, 61, 238, 89, 15, 190, 84, 94, 23, 61, 123, 51, 253, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 127, 102, 164, 189, 120, 228, 4, 189, 201, 180, 190, 189, 156, 216, 29, 61, 171, 157, 169, 189, 126, 69, 138, 61, 10, 92, 153, 189, 254, 165, 171, 61, 50, 163, 114, 61, 17, 114, 178, 61, 158, 222, 182, 189, 204, 70, 151, 189, 177, 57, 26, 190, 240, 177, 35, 62, 179, 2, 145, 61, 28, 204, 231, 189, 85, 130, 183, 189, 226, 184, 195, 61, 132, 31, 253, 61, 40, 46, 244, 60, 123, 2, 181, 61, 254, 190, 218, 61, 235, 231, 146, 190, 12, 234, 131, 62, 172, 123, 173, 60, 158, 20, 35, 190, 26, 193, 26, 191, 247, 241, 81, 62, 31, 2, 94, 190, 108, 255, 177, 62, 60, 152, 207, 61, 36, 131, 0, 62, 42, 130, 214, 188, 160, 239, 198, 61, 248, 158, 86, 61, 64, 2, 126, 190, 116, 112, 94, 62, 120, 149, 12, 189, 185, 167, 32, 62, 212, 154, 66, 62, 169, 173, 56, 62, 247, 38, 133, 189, 91, 80, 193, 61, 211, 111, 174, 188, 95, 99, 181, 62, 29, 162, 185, 62, 120, 165, 13, 191, 225, 249, 161, 59, 136, 77, 144, 61, 140, 162, 213, 60, 188, 246, 21, 188, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 132, 105, 162, 62, 111, 54, 115, 190, 192, 150, 94, 191, 16, 81, 54, 62, 147, 5, 55, 191, 230, 63, 214, 190, 87, 87, 128, 190, 80, 119, 132, 62, 5, 116, 116, 190, 74, 148, 130, 62, 239, 18, 22, 191, 60, 201, 59, 62, 146, 193, 171, 190, 199, 5, 51, 188, 161, 87, 21, 189, 129, 144, 132, 190, 192, 10, 132, 188, 89, 117, 173, 190, 95, 208, 211, 190, 54, 61, 150, 190, 199, 231, 150, 189, 29, 57, 53, 62, 46, 79, 132, 62, 79, 139, 36, 191, 26, 114, 187, 62, 68, 116, 132, 62, 228, 23, 1, 190, 74, 134, 194, 61, 121, 98, 0, 191, 236, 237, 152, 190, 126, 2, 157, 189, 146, 115, 68, 62, 194, 223, 205, 61, 245, 130, 193, 61, 102, 114, 64, 62, 53, 7, 239, 190, 238, 75, 127, 62, 247, 145, 183, 61, 167, 95, 35, 62, 56, 99, 147, 190, 78, 26, 143, 62, 28, 106, 250, 61, 202, 162, 145, 62, 209, 67, 189, 189, 143, 236, 180, 189, 89, 55, 141, 190, 45, 188, 78, 61, 168, 238, 210, 62, 248, 172, 110, 62, 228, 77, 81, 188, 47, 108, 160, 190, 188, 173, 201, 61, 132, 248, 138, 62, 176, 141, 18, 62, 146, 195, 203, 189, 169, 122, 137, 190, 244, 35, 145, 61, 230, 142, 16, 190, 217, 20, 106, 190, 147, 34, 197, 190, 23, 129, 19, 62, 230, 41, 205, 62, 77, 19, 128, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 94, 119, 195, 189, 223, 238, 131, 189, 91, 149, 189, 61, 188, 59, 194, 61, 65, 222, 132, 189, 255, 30, 32, 190, 205, 133, 226, 189, 129, 189, 152, 61, 249, 76, 159, 61, 29, 61, 15, 62, 159, 196, 27, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 7, 124, 121, 188, 135, 59, 86, 62, 175, 167, 224, 189, 229, 6, 50, 62, 249, 185, 45, 191, 60, 80, 69, 190, 96, 47, 159, 62, 50, 43, 254, 190, 192, 51, 50, 191, 138, 74, 2, 191, 245, 199, 38, 60, 254, 198, 90, 62, 82, 32, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 62, 6, 227, 61, 194, 116, 175, 190, 181, 78, 131, 59, 217, 231, 46, 189, 162, 61, 146, 62, 34, 194, 211, 189, 51, 123, 34, 189, 121, 164, 248, 190, 251, 142, 163, 62, 40, 134, 253, 189, 211, 243, 149, 62, 34, 103, 54, 61, 137, 111, 139, 188, 200, 227, 9, 190, 136, 58, 165, 188, 203, 67, 204, 61, 139, 110, 30, 190, 128, 60, 213, 61, 20, 104, 135, 61, 2, 135, 30, 59, 18, 71, 60, 188, 224, 37, 173, 61, 47, 33, 140, 190, 51, 176, 162, 189, 47, 229, 102, 189, 241, 16, 201, 61, 150, 129, 149, 59, 244, 16, 250, 190, 199, 202, 163, 189, 90, 88, 182, 61, 94, 98, 78, 190, 96, 0, 40, 61, 160, 38, 26, 190, 14, 10, 192, 187, 196, 211, 145, 61, 120, 132, 201, 61, 35, 109, 137, 190, 24, 246, 28, 61, 40, 84, 227, 61, 197, 211, 205, 60, 112, 202, 50, 190, 4, 5, 241, 61, 61, 87, 135, 61, 240, 27, 182, 189, 165, 116, 197, 190, 89, 169, 137, 189, 238, 141, 104, 190, 62, 247, 195, 61, 200, 112, 212, 61, 75, 14, 120, 62, 113, 16, 132, 62, 153, 87, 129, 190, 148, 208, 80, 189, 171, 3, 143, 60, 223, 83, 141, 189, 102, 143, 225, 61, 116, 58, 8, 62, 202, 48, 153, 62, 142, 156, 200, 61, 92, 27, 96, 190, 28, 143, 225, 190, 218, 67, 132, 185, 11, 165, 43, 62, 78, 203, 193, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 139, 61, 166, 189, 168, 129, 197, 190, 253, 111, 229, 189, 5, 214, 73, 61, 72, 12, 245, 61, 89, 4, 10, 190, 210, 134, 197, 188, 156, 152, 166, 190, 58, 30, 220, 61, 240, 252, 129, 58, 103, 67, 146, 62, 147, 138, 249, 188, 94, 239, 78, 189, 209, 36, 15, 62, 212, 219, 190, 61, 56, 244, 136, 189, 230, 231, 26, 190, 202, 92, 108, 61, 233, 14, 81, 189, 209, 72, 12, 191, 206, 155, 84, 189, 183, 24, 154, 62, 130, 69, 196, 61, 224, 53, 155, 60, 6, 220, 9, 191, 42, 23, 36, 62, 38, 178, 81, 62, 239, 127, 140, 190, 54, 179, 240, 61, 16, 242, 56, 190, 81, 251, 143, 189, 131, 152, 2, 190, 227, 23, 72, 190, 38, 150, 26, 62, 115, 183, 204, 61, 194, 148, 172, 189, 81, 72, 51, 62, 25, 0, 124, 189, 204, 197, 50, 190, 150, 255, 11, 190, 26, 25, 36, 190, 212, 21, 46, 187, 68, 241, 7, 190, 143, 155, 183, 60, 174, 217, 66, 61, 190, 182, 102, 189, 109, 49, 34, 189, 47, 54, 116, 61, 57, 8, 161, 61, 82, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 211, 248, 13, 190, 15, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 81, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 101, 39, 154, 61, 177, 236, 134, 61, 105, 95, 146, 190, 91, 167, 97, 190, 27, 8, 11, 190, 210, 106, 200, 189, 155, 14, 73, 62, 44, 198, 146, 62, 175, 150, 6, 190, 153, 64, 209, 188, 79, 85, 26, 190, 38, 169, 167, 61, 6, 139, 216, 190, 190, 75, 18, 190, 99, 92, 189, 62, 18, 199, 180, 189, 163, 235, 29, 190, 178, 56, 63, 190, 38, 47, 20, 61, 233, 58, 1, 63, 66, 183, 78, 189, 142, 100, 11, 62, 216, 220, 33, 189, 216, 147, 140, 188, 144, 184, 44, 62, 23, 84, 165, 189, 55, 65, 188, 61, 27, 235, 190, 61, 125, 111, 239, 62, 254, 233, 129, 190, 102, 225, 89, 62, 139, 123, 190, 62, 231, 150, 178, 62, 45, 81, 225, 189, 211, 106, 165, 190, 32, 246, 138, 60, 153, 14, 53, 58, 13, 83, 34, 191, 57, 37, 175, 189, 203, 254, 165, 189, 185, 189, 1, 61, 226, 250, 188, 190, 138, 244, 108, 61, 26, 2, 118, 189, 227, 100, 150, 190, 94, 231, 196, 190, 216, 247, 31, 62, 26, 196, 166, 190, 249, 58, 67, 62, 109, 6, 61, 190, 92, 133, 75, 62, 95, 90, 172, 190, 49, 198, 223, 61, 31, 188, 213, 62, 113, 140, 11, 189, 225, 56, 83, 62, 17, 157, 146, 62, 93, 58, 6, 190, 113, 129, 151, 62, 77, 45, 207, 190, 26, 18, 190, 190, 207, 1, 146, 190, 130, 237, 205, 189, 153, 135, 178, 62, 56, 46, 27, 62, 76, 55, 127, 61, 236, 239, 70, 62, 34, 250, 144, 190, 69, 188, 106, 190, 58, 109, 138, 61, 35, 135, 13, 191, 138, 121, 166, 190, 90, 16, 15, 190, 94, 25, 11, 190, 35, 148, 102, 61, 147, 249, 144, 189, 189, 218, 71, 190, 35, 4, 87, 62, 206, 103, 169, 189, 141, 236, 108, 62, 156, 217, 32, 62, 186, 43, 40, 61, 140, 191, 172, 190, 190, 178, 79, 189, 230, 254, 172, 190, 175, 77, 33, 190, 15, 253, 65, 61, 67, 138, 48, 62, 194, 227, 9, 61, 0, 245, 182, 190, 167, 6, 48, 189, 116, 249, 155, 62, 103, 141, 35, 190, 247, 151, 254, 60, 82, 81, 174, 187, 96, 135, 135, 189, 120, 242, 225, 189, 175, 34, 65, 190, 71, 79, 16, 187, 236, 65, 56, 62, 129, 2, 63, 62, 28, 101, 193, 190, 53, 234, 125, 61, 101, 119, 11, 62, 100, 187, 166, 61, 144, 110, 116, 190, 42, 183, 40, 61, 105, 217, 219, 190, 146, 34, 118, 61, 234, 72, 12, 190, 165, 28, 61, 191, 122, 143, 190, 189, 89, 249, 82, 62, 79, 90, 221, 61, 37, 191, 115, 62, 97, 233, 174, 62, 221, 117, 49, 190, 224, 203, 3, 63, 88, 124, 232, 190, 153, 231, 15, 62, 23, 76, 23, 190, 160, 133, 254, 61, 189, 6, 5, 190, 247, 216, 152, 190, 58, 49, 159, 62, 98, 80, 248, 187, 31, 170, 124, 190, 220, 218, 129, 62, 17, 56, 232, 190, 123, 104, 150, 190, 82, 105, 10, 190, 226, 208, 140, 61, 38, 131, 149, 60, 113, 37, 8, 190, 209, 8, 92, 190, 242, 47, 166, 190, 91, 25, 78, 62, 226, 207, 195, 188, 232, 96, 59, 60, 188, 122, 132, 190, 124, 38, 42, 190, 238, 242, 82, 190, 100, 2, 86, 190, 187, 126, 19, 62, 215, 181, 100, 190, 103, 36, 37, 190, 173, 191, 226, 188, 176, 114, 34, 62, 246, 178, 194, 62, 122, 111, 240, 189, 149, 188, 85, 190, 12, 134, 70, 190, 144, 158, 184, 60, 0, 226, 135, 62, 177, 173, 149, 189, 135, 218, 43, 190, 196, 97, 134, 62, 136, 9, 168, 189, 224, 22, 11, 62, 80, 144, 120, 61, 11, 128, 99, 190, 111, 153, 205, 190, 211, 82, 188, 190, 236, 126, 223, 61, 226, 102, 40, 189, 222, 240, 208, 60, 195, 59, 99, 62, 1, 197, 7, 190, 245, 244, 237, 61, 155, 231, 124, 62, 221, 188, 26, 189, 245, 12, 159, 61, 144, 40, 161, 190, 243, 124, 244, 190, 136, 24, 254, 189, 152, 49, 211, 190, 9, 234, 164, 59, 182, 78, 255, 189, 36, 40, 125, 62, 134, 56, 189, 62, 20, 61, 183, 61, 204, 153, 182, 61, 132, 119, 129, 189, 242, 98, 172, 61, 183, 191, 169, 190, 221, 107, 143, 60, 16, 238, 198, 62, 108, 124, 62, 62, 230, 177, 130, 62, 124, 75, 5, 191, 139, 218, 42, 62, 158, 176, 101, 189, 151, 150, 227, 62, 180, 131, 140, 190, 170, 143, 168, 188, 26, 211, 146, 62, 202, 78, 117, 61, 105, 238, 181, 190, 238, 199, 78, 62, 183, 64, 83, 187, 43, 106, 154, 59, 107, 158, 246, 189, 222, 45, 21, 62, 95, 130, 228, 190, 197, 114, 2, 63, 90, 162, 158, 189, 73, 144, 168, 59, 183, 99, 18, 62, 99, 159, 120, 189, 24, 10, 178, 62, 195, 111, 140, 62, 2, 42, 117, 62, 37, 221, 22, 62, 148, 240, 193, 62, 43, 174, 254, 190, 38, 83, 129, 62, 158, 40, 179, 189, 9, 52, 155, 62, 193, 134, 199, 190, 181, 18, 81, 189, 245, 234, 217, 62, 19, 242, 135, 62, 18, 80, 40, 190, 125, 71, 69, 62, 46, 80, 224, 190, 153, 91, 148, 190, 156, 104, 84, 62, 7, 86, 57, 62, 133, 111, 223, 61, 182, 4, 123, 190, 29, 110, 140, 62, 131, 37, 249, 61, 249, 46, 220, 60, 204, 139, 36, 190, 35, 84, 18, 62, 214, 219, 203, 190, 128, 67, 41, 62, 15, 74, 46, 61, 93, 233, 22, 191, 233, 57, 146, 189, 68, 148, 13, 62, 12, 84, 71, 189, 79, 111, 255, 62, 17, 9, 252, 189, 171, 224, 11, 61, 8, 13, 18, 63, 92, 250, 14, 191, 0, 159, 130, 189, 76, 251, 204, 189, 189, 135, 100, 188, 38, 161, 236, 190, 109, 15, 5, 190, 243, 215, 157, 62, 84, 251, 131, 188, 67, 128, 50, 61, 245, 5, 119, 62, 84, 144, 94, 191, 24, 40, 40, 190, 138, 241, 242, 61, 222, 43, 244, 189, 153, 237, 141, 190, 66, 58, 214, 186, 115, 240, 155, 60, 223, 220, 149, 190, 241, 106, 101, 189, 172, 155, 157, 62, 164, 102, 250, 59, 233, 157, 235, 62, 116, 107, 220, 190, 6, 55, 239, 61, 5, 131, 180, 189, 128, 24, 13, 62, 255, 184, 92, 61, 77, 132, 28, 188, 239, 180, 43, 189, 8, 48, 143, 62, 75, 176, 66, 190, 228, 5, 113, 190, 64, 80, 100, 62, 95, 221, 171, 60, 83, 100, 96, 188, 222, 89, 24, 62, 198, 241, 112, 62, 21, 154, 180, 61, 224, 215, 99, 62, 71, 40, 29, 190, 193, 188, 207, 61, 14, 154, 67, 189, 93, 63, 243, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 237, 217, 61, 197, 145, 239, 61, 173, 242, 142, 61, 234, 26, 248, 61, 162, 218, 138, 62, 253, 12, 216, 59, 134, 162, 153, 189, 216, 192, 145, 60, 235, 136, 58, 190, 204, 182, 115, 188, 213, 223, 35, 62, 174, 75, 246, 188, 59, 160, 133, 189, 220, 202, 58, 189, 168, 180, 101, 62, 166, 126, 242, 60, 195, 142, 113, 190, 44, 63, 185, 189, 87, 31, 106, 190, 92, 137, 252, 60, 222, 228, 154, 61, 203, 213, 27, 190, 38, 203, 78, 190, 68, 11, 111, 62, 9, 70, 47, 62, 150, 188, 200, 188, 191, 173, 89, 62, 37, 128, 20, 190, 206, 187, 3, 190, 162, 178, 172, 188, 65, 20, 245, 188, 193, 96, 178, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 241, 26, 61, 45, 35, 179, 62, 48, 45, 159, 190, 216, 1, 6, 190, 112, 175, 18, 190, 129, 82, 207, 62, 39, 186, 152, 188, 104, 178, 26, 190, 245, 1, 236, 61, 58, 60, 158, 190, 228, 37, 101, 63, 166, 39, 231, 188, 13, 149, 230, 190, 58, 207, 70, 61, 63, 22, 99, 63, 16, 208, 196, 62, 17, 99, 84, 63, 226, 37, 203, 189, 159, 71, 50, 190, 227, 31, 181, 61, 175, 47, 242, 188, 229, 144, 156, 190, 25, 23, 52, 61, 253, 132, 244, 62, 99, 141, 9, 63, 220, 131, 8, 63, 84, 22, 231, 190, 77, 100, 120, 62, 155, 185, 231, 62, 212, 209, 0, 191, 200, 150, 173, 190, 42, 220, 225, 61, 152, 243, 220, 190, 165, 202, 92, 190, 42, 238, 91, 189, 201, 9, 200, 190, 167, 54, 123, 190, 165, 34, 216, 190, 58, 52, 185, 61, 39, 110, 19, 190, 197, 200, 146, 189, 36, 135, 239, 188, 46, 122, 145, 59, 61, 237, 36, 190, 169, 155, 134, 61, 152, 147, 60, 60, 99, 44, 19, 62, 93, 84, 135, 61, 97, 185, 240, 60, 134, 107, 45, 190, 122, 223, 45, 62, 126, 12, 187, 189, 241, 219, 156, 61, 55, 187, 23, 62, 109, 103, 34, 62, 27, 3, 231, 61, 154, 201, 25, 190, 5, 51, 149, 61, 71, 123, 92, 189, 252, 34, 139, 62, 26, 36, 123, 189, 249, 53, 207, 188, 248, 2, 96, 62, 77, 139, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 76, 55, 61, 7, 98, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 111, 41, 191, 74, 36, 207, 62, 122, 247, 22, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 216, 171, 63, 78, 59, 55, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}