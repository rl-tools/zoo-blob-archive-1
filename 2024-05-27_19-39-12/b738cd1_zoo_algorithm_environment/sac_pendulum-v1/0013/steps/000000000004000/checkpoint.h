// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 107, 196, 62, 202, 158, 219, 61, 166, 235, 96, 190, 124, 220, 241, 190, 35, 207, 199, 62, 190, 195, 89, 190, 187, 76, 20, 191, 137, 92, 201, 190, 252, 119, 166, 189, 89, 41, 17, 189, 151, 149, 144, 62, 14, 32, 54, 191, 126, 82, 32, 191, 213, 149, 203, 189, 141, 209, 42, 63, 165, 170, 206, 60, 217, 166, 31, 191, 241, 41, 32, 191, 64, 59, 145, 189, 18, 197, 247, 190, 58, 185, 187, 190, 41, 148, 2, 63, 228, 165, 207, 62, 140, 31, 50, 189, 43, 82, 10, 61, 6, 140, 184, 190, 114, 42, 203, 62, 134, 168, 242, 61, 150, 116, 199, 62, 205, 63, 125, 191, 19, 206, 108, 59, 176, 121, 16, 191, 70, 161, 216, 62, 54, 40, 38, 191, 90, 143, 233, 62, 234, 12, 5, 191, 198, 221, 12, 191, 81, 84, 239, 62, 36, 110, 20, 62, 21, 7, 216, 62, 178, 126, 64, 191, 150, 193, 106, 190, 177, 207, 208, 189, 146, 123, 15, 63, 95, 105, 214, 61, 228, 66, 243, 190, 152, 62, 228, 190, 5, 84, 4, 62, 38, 25, 211, 62, 123, 181, 14, 63, 4, 202, 43, 191, 0, 196, 36, 191, 109, 149, 71, 191, 10, 71, 129, 187, 154, 50, 8, 63, 54, 110, 228, 188, 40, 166, 112, 61, 27, 125, 135, 62, 212, 198, 9, 63, 176, 93, 8, 63, 8, 133, 35, 62, 228, 137, 247, 190, 248, 197, 246, 61, 40, 34, 188, 62, 184, 12, 196, 190, 3, 170, 16, 191, 116, 90, 79, 190, 99, 222, 153, 190, 51, 132, 51, 190, 9, 90, 23, 191, 234, 159, 100, 190, 109, 250, 143, 62, 52, 76, 63, 63, 148, 235, 68, 63, 78, 246, 177, 62, 100, 63, 0, 188, 220, 133, 87, 191, 178, 46, 174, 62, 235, 206, 5, 191, 34, 107, 254, 190, 153, 228, 163, 62, 240, 169, 118, 63, 108, 243, 37, 190, 148, 105, 1, 189, 231, 106, 134, 190, 232, 115, 238, 62, 100, 222, 5, 62, 4, 254, 139, 62, 25, 126, 0, 191, 231, 231, 39, 63, 201, 20, 238, 61, 94, 219, 124, 191, 254, 37, 172, 62, 161, 57, 243, 62, 237, 9, 90, 191, 80, 75, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 11, 12, 191, 2, 108, 9, 190, 242, 84, 15, 61, 6, 45, 68, 62, 26, 12, 73, 60, 189, 111, 3, 63, 24, 32, 185, 62, 228, 74, 203, 62, 62, 124, 84, 62, 55, 202, 218, 62, 65, 42, 20, 62, 13, 33, 253, 190, 192, 246, 212, 62, 33, 167, 55, 190, 170, 219, 33, 63, 88, 182, 214, 61, 60, 144, 15, 63, 128, 93, 57, 190, 155, 190, 226, 62, 132, 109, 200, 190, 187, 71, 149, 62, 183, 51, 228, 190, 111, 15, 68, 63, 187, 17, 18, 63, 234, 93, 174, 61, 237, 241, 228, 61, 185, 164, 223, 190, 185, 2, 96, 62, 193, 222, 30, 63, 12, 43, 54, 189, 107, 163, 158, 61, 234, 231, 232, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 15, 134, 190, 255, 95, 152, 61, 131, 189, 164, 59, 188, 2, 194, 188, 126, 155, 62, 190, 131, 26, 170, 61, 182, 93, 165, 61, 158, 13, 139, 61, 224, 159, 223, 190, 22, 107, 25, 61, 249, 61, 232, 189, 200, 65, 184, 60, 151, 217, 220, 189, 199, 203, 137, 190, 12, 149, 134, 190, 178, 70, 25, 62, 104, 117, 45, 62, 183, 189, 162, 62, 161, 142, 194, 61, 241, 123, 235, 189, 42, 53, 156, 189, 184, 20, 164, 189, 139, 166, 164, 61, 192, 254, 246, 188, 81, 142, 147, 60, 78, 57, 36, 190, 145, 147, 109, 188, 6, 249, 69, 186, 172, 204, 134, 190, 200, 15, 209, 188, 69, 94, 169, 190, 225, 70, 55, 189, 96, 169, 143, 188, 158, 228, 130, 61, 89, 243, 215, 189, 215, 16, 147, 190, 190, 40, 183, 62, 18, 128, 27, 61, 99, 202, 70, 190, 232, 52, 22, 62, 66, 127, 182, 62, 152, 87, 124, 190, 225, 87, 158, 62, 99, 230, 246, 190, 99, 212, 62, 62, 177, 153, 112, 190, 243, 24, 126, 61, 85, 128, 5, 62, 125, 168, 223, 189, 155, 78, 134, 189, 108, 140, 143, 62, 45, 226, 69, 190, 232, 33, 36, 190, 51, 215, 81, 190, 216, 104, 236, 189, 210, 166, 22, 190, 241, 24, 151, 60, 4, 119, 203, 62, 9, 143, 42, 62, 158, 161, 139, 190, 212, 75, 60, 61, 230, 188, 41, 190, 91, 154, 211, 189, 45, 191, 35, 62, 108, 146, 200, 189, 172, 83, 154, 189, 4, 140, 180, 61, 135, 111, 168, 189, 188, 225, 216, 189, 8, 28, 165, 61, 154, 189, 1, 62, 0, 228, 55, 62, 174, 100, 79, 190, 88, 101, 49, 62, 209, 100, 134, 190, 168, 165, 66, 61, 35, 193, 178, 189, 225, 175, 198, 190, 214, 77, 218, 61, 248, 166, 152, 189, 133, 186, 129, 60, 176, 211, 163, 189, 96, 224, 205, 61, 3, 8, 13, 190, 149, 253, 156, 188, 226, 240, 241, 190, 136, 99, 50, 62, 77, 223, 239, 188, 134, 52, 106, 60, 215, 156, 177, 189, 2, 87, 84, 190, 28, 174, 183, 62, 93, 238, 38, 62, 74, 198, 79, 62, 123, 1, 146, 62, 98, 8, 146, 190, 247, 111, 16, 62, 102, 106, 242, 59, 255, 70, 32, 190, 173, 22, 135, 189, 206, 219, 21, 190, 236, 33, 18, 62, 225, 28, 248, 189, 11, 42, 134, 62, 6, 224, 192, 189, 93, 200, 235, 189, 75, 235, 195, 61, 41, 211, 64, 190, 180, 166, 141, 190, 213, 183, 210, 189, 228, 207, 112, 61, 171, 173, 148, 189, 91, 62, 136, 189, 242, 20, 57, 62, 255, 39, 177, 62, 10, 171, 131, 190, 168, 64, 100, 62, 88, 58, 160, 60, 188, 180, 21, 190, 143, 179, 135, 190, 69, 153, 58, 62, 232, 13, 7, 188, 219, 130, 35, 189, 220, 232, 170, 62, 174, 109, 211, 188, 169, 77, 248, 60, 158, 228, 113, 62, 242, 91, 10, 62, 12, 186, 174, 189, 29, 52, 143, 188, 209, 179, 220, 189, 16, 218, 168, 61, 22, 179, 227, 61, 34, 39, 60, 62, 5, 18, 56, 62, 20, 134, 126, 189, 13, 250, 146, 189, 34, 166, 128, 189, 16, 181, 28, 190, 105, 253, 90, 61, 76, 235, 88, 62, 190, 61, 145, 189, 139, 245, 129, 62, 69, 197, 128, 62, 101, 35, 81, 62, 159, 140, 77, 62, 112, 155, 138, 62, 204, 143, 244, 61, 236, 31, 199, 189, 80, 91, 31, 190, 236, 174, 28, 62, 173, 99, 135, 61, 180, 176, 242, 61, 183, 85, 164, 61, 174, 45, 201, 189, 119, 27, 12, 62, 122, 221, 195, 61, 84, 63, 25, 61, 145, 55, 91, 189, 12, 143, 233, 189, 94, 59, 161, 189, 126, 12, 140, 189, 8, 67, 179, 190, 220, 63, 75, 62, 166, 240, 39, 187, 163, 169, 76, 190, 121, 190, 62, 61, 19, 201, 132, 59, 228, 202, 42, 190, 143, 143, 41, 62, 63, 186, 122, 62, 111, 23, 32, 190, 110, 52, 32, 190, 237, 136, 162, 188, 61, 50, 60, 189, 40, 106, 0, 190, 217, 109, 14, 62, 150, 54, 158, 190, 148, 83, 89, 62, 193, 35, 184, 190, 191, 154, 158, 189, 30, 9, 171, 60, 107, 168, 73, 190, 183, 229, 80, 190, 177, 87, 59, 189, 239, 160, 129, 189, 200, 57, 199, 189, 175, 201, 22, 188, 66, 149, 64, 190, 204, 24, 124, 190, 254, 213, 248, 61, 191, 234, 48, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 35, 210, 223, 188, 78, 233, 101, 189, 105, 179, 39, 62, 222, 18, 25, 190, 78, 149, 202, 60, 205, 42, 15, 62, 100, 129, 214, 61, 254, 22, 142, 61, 162, 47, 205, 189, 236, 141, 0, 62, 114, 73, 114, 189, 210, 219, 157, 61, 150, 87, 190, 61, 3, 223, 24, 190, 80, 23, 18, 188, 193, 171, 129, 62, 129, 11, 86, 62, 201, 54, 167, 189, 58, 38, 98, 189, 56, 240, 45, 61, 74, 79, 67, 62, 126, 251, 20, 190, 251, 111, 80, 62, 103, 112, 232, 61, 46, 118, 124, 61, 197, 84, 138, 190, 117, 74, 33, 61, 69, 141, 45, 61, 75, 41, 225, 60, 41, 121, 70, 61, 181, 40, 115, 62, 207, 84, 157, 190, 80, 224, 20, 190, 119, 141, 18, 190, 19, 65, 244, 189, 75, 209, 12, 62, 204, 185, 87, 59, 139, 150, 167, 188, 244, 177, 68, 190, 226, 184, 140, 189, 80, 42, 131, 61, 249, 216, 225, 189, 183, 122, 6, 62, 39, 205, 201, 186, 247, 137, 226, 61, 190, 222, 222, 188, 221, 85, 18, 190, 85, 238, 140, 186, 236, 91, 100, 189, 156, 122, 26, 190, 4, 128, 70, 189, 144, 128, 205, 189, 187, 65, 220, 61, 99, 149, 20, 190, 66, 88, 76, 61, 68, 83, 9, 62, 179, 212, 244, 189, 156, 117, 28, 190, 44, 176, 25, 190, 140, 236, 150, 61, 215, 95, 206, 60, 19, 215, 52, 189, 138, 232, 181, 189, 162, 102, 180, 189, 166, 143, 143, 190, 18, 81, 44, 62, 32, 96, 20, 62, 245, 86, 101, 189, 169, 195, 23, 189, 150, 139, 153, 61, 15, 34, 42, 62, 130, 23, 69, 62, 151, 186, 199, 189, 184, 15, 217, 189, 22, 251, 155, 189, 72, 53, 61, 62, 250, 107, 132, 61, 13, 148, 151, 190, 159, 171, 149, 189, 131, 57, 155, 61, 101, 171, 21, 62, 247, 136, 45, 61, 112, 36, 208, 61, 60, 216, 202, 61, 24, 173, 8, 62, 18, 93, 178, 190, 54, 213, 112, 62, 198, 101, 5, 62, 244, 222, 179, 61, 8, 93, 245, 189, 142, 150, 131, 189, 225, 101, 178, 62, 218, 252, 147, 62, 139, 223, 96, 61, 60, 39, 0, 62, 92, 124, 6, 191, 31, 141, 31, 62, 14, 166, 202, 61, 12, 75, 21, 62, 108, 36, 129, 191, 199, 239, 38, 62, 165, 19, 145, 190, 46, 235, 92, 190, 107, 98, 25, 61, 75, 95, 8, 62, 104, 33, 26, 191, 18, 73, 245, 62, 195, 30, 71, 191, 101, 116, 3, 62, 181, 108, 252, 190, 68, 238, 10, 61, 18, 252, 34, 62, 201, 222, 95, 191, 139, 111, 146, 59, 116, 19, 12, 60, 30, 147, 31, 191, 72, 195, 194, 189, 196, 151, 164, 190, 51, 27, 113, 62, 250, 9, 232, 61, 216, 222, 251, 190, 189, 168, 6, 63, 48, 200, 224, 62, 83, 169, 43, 190, 70, 255, 123, 61, 166, 217, 243, 190, 125, 192, 11, 190, 238, 24, 144, 62, 240, 47, 7, 189, 1, 241, 122, 60, 35, 144, 6, 61, 171, 200, 153, 186, 197, 241, 196, 189, 79, 101, 44, 190, 180, 98, 237, 61, 238, 89, 15, 190, 84, 94, 23, 61, 123, 51, 253, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 127, 102, 164, 189, 120, 228, 4, 189, 201, 180, 190, 189, 156, 216, 29, 61, 171, 157, 169, 189, 126, 69, 138, 61, 10, 92, 153, 189, 254, 165, 171, 61, 50, 163, 114, 61, 17, 114, 178, 61, 158, 222, 182, 189, 204, 70, 151, 189, 177, 57, 26, 190, 240, 177, 35, 62, 179, 2, 145, 61, 28, 204, 231, 189, 85, 130, 183, 189, 226, 184, 195, 61, 132, 31, 253, 61, 40, 46, 244, 60, 126, 218, 141, 190, 196, 201, 241, 59, 35, 138, 31, 190, 214, 231, 68, 62, 198, 1, 65, 61, 145, 155, 13, 190, 96, 208, 200, 190, 151, 182, 62, 62, 233, 191, 196, 189, 21, 233, 184, 62, 178, 76, 223, 61, 178, 71, 38, 189, 18, 222, 62, 62, 182, 235, 79, 189, 234, 149, 169, 59, 199, 34, 1, 190, 146, 249, 249, 61, 103, 254, 203, 60, 208, 32, 229, 61, 13, 2, 114, 62, 127, 40, 156, 62, 236, 180, 48, 190, 232, 225, 108, 59, 79, 20, 181, 189, 127, 161, 203, 62, 28, 9, 181, 62, 237, 200, 117, 190, 73, 211, 12, 190, 103, 224, 200, 61, 0, 206, 169, 61, 169, 160, 21, 62, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 16, 88, 68, 189, 252, 150, 209, 184, 48, 24, 88, 191, 151, 117, 9, 62, 138, 113, 183, 190, 211, 99, 193, 189, 145, 64, 31, 190, 186, 153, 119, 62, 59, 224, 247, 190, 181, 47, 103, 62, 250, 41, 92, 191, 223, 6, 231, 61, 95, 150, 140, 190, 106, 5, 166, 189, 224, 150, 106, 189, 117, 183, 50, 191, 140, 200, 139, 62, 230, 11, 99, 190, 17, 231, 210, 190, 163, 82, 21, 190, 154, 231, 150, 189, 216, 227, 74, 62, 52, 78, 111, 62, 171, 175, 247, 190, 149, 14, 184, 62, 153, 118, 56, 62, 160, 140, 48, 190, 11, 93, 1, 61, 117, 188, 14, 191, 26, 63, 142, 190, 57, 114, 237, 188, 79, 255, 61, 189, 189, 77, 233, 61, 187, 189, 107, 61, 239, 13, 52, 62, 49, 146, 169, 190, 183, 206, 88, 62, 181, 61, 57, 61, 202, 119, 16, 62, 50, 142, 143, 190, 4, 167, 138, 62, 169, 75, 120, 61, 149, 32, 138, 62, 192, 155, 129, 188, 114, 124, 26, 190, 101, 157, 8, 190, 95, 128, 108, 190, 3, 120, 208, 62, 150, 217, 9, 62, 188, 185, 212, 60, 1, 150, 203, 189, 197, 26, 101, 188, 45, 22, 130, 62, 31, 188, 223, 61, 5, 38, 18, 191, 127, 108, 119, 190, 162, 38, 46, 190, 111, 23, 31, 190, 188, 189, 126, 190, 16, 94, 125, 190, 219, 144, 170, 61, 216, 116, 172, 60, 106, 131, 74, 62, 188, 234, 134, 189, 151, 177, 41, 62, 247, 106, 183, 61, 35, 13, 251, 189, 136, 58, 140, 187, 223, 238, 131, 189, 91, 149, 189, 61, 169, 67, 201, 61, 190, 119, 122, 59, 199, 140, 211, 189, 175, 98, 163, 189, 129, 189, 152, 61, 202, 105, 73, 62, 29, 61, 15, 62, 77, 106, 98, 189, 190, 109, 167, 190, 78, 155, 27, 191, 137, 221, 248, 189, 157, 181, 58, 60, 48, 212, 132, 62, 6, 90, 236, 189, 229, 6, 50, 62, 90, 240, 235, 190, 204, 96, 190, 189, 241, 70, 180, 62, 146, 158, 244, 190, 71, 54, 23, 191, 109, 133, 14, 191, 33, 221, 226, 61, 22, 189, 118, 62, 252, 249, 104, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 62, 6, 227, 61, 32, 157, 197, 190, 137, 157, 157, 60, 173, 34, 205, 188, 70, 92, 140, 62, 19, 20, 119, 189, 215, 228, 40, 60, 5, 173, 157, 190, 195, 39, 164, 62, 246, 223, 253, 189, 240, 42, 155, 62, 34, 103, 54, 61, 33, 174, 243, 188, 77, 141, 158, 189, 152, 112, 30, 189, 211, 31, 2, 62, 114, 110, 30, 190, 233, 253, 222, 61, 34, 142, 134, 61, 82, 156, 14, 189, 187, 129, 63, 61, 224, 37, 173, 61, 179, 98, 52, 190, 242, 130, 133, 189, 228, 140, 233, 189, 104, 223, 4, 62, 94, 91, 58, 59, 186, 105, 184, 190, 64, 90, 189, 189, 119, 137, 194, 61, 130, 180, 17, 190, 210, 222, 87, 61, 48, 118, 154, 190, 1, 67, 66, 59, 145, 161, 27, 62, 88, 214, 220, 61, 78, 174, 119, 190, 129, 96, 54, 61, 98, 186, 246, 61, 34, 54, 243, 189, 88, 130, 114, 190, 4, 137, 237, 61, 203, 185, 97, 189, 173, 92, 185, 189, 160, 116, 31, 190, 171, 178, 148, 189, 120, 86, 99, 190, 70, 118, 189, 189, 109, 1, 163, 61, 0, 16, 126, 62, 76, 74, 64, 62, 126, 65, 126, 189, 67, 88, 46, 190, 104, 76, 223, 60, 19, 251, 156, 189, 164, 133, 77, 190, 127, 158, 251, 189, 28, 142, 53, 61, 173, 101, 194, 61, 200, 126, 111, 190, 97, 194, 166, 190, 30, 254, 13, 190, 214, 242, 50, 190, 124, 74, 190, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 126, 61, 166, 189, 251, 3, 194, 190, 152, 67, 3, 190, 59, 56, 100, 61, 223, 255, 180, 61, 157, 215, 237, 189, 244, 166, 42, 58, 145, 152, 165, 190, 84, 203, 199, 61, 59, 221, 43, 59, 76, 193, 144, 62, 92, 138, 249, 188, 241, 25, 224, 189, 230, 201, 72, 62, 83, 0, 77, 61, 216, 89, 191, 189, 135, 122, 26, 190, 117, 76, 6, 61, 133, 47, 226, 58, 89, 233, 13, 191, 8, 27, 108, 189, 247, 97, 154, 62, 19, 174, 140, 61, 190, 99, 73, 188, 121, 111, 218, 190, 5, 4, 36, 62, 137, 189, 53, 62, 14, 246, 23, 190, 143, 123, 160, 61, 33, 192, 62, 190, 2, 105, 172, 189, 100, 144, 205, 189, 245, 118, 42, 190, 10, 20, 46, 62, 103, 142, 198, 61, 232, 93, 137, 189, 81, 72, 51, 62, 166, 91, 59, 189, 200, 93, 31, 190, 50, 253, 215, 189, 26, 25, 36, 190, 179, 51, 105, 60, 68, 241, 7, 190, 90, 14, 38, 61, 161, 77, 155, 61, 80, 248, 106, 189, 10, 141, 182, 187, 47, 54, 116, 61, 100, 194, 197, 61, 250, 114, 226, 61, 153, 202, 179, 61, 184, 84, 179, 61, 144, 121, 31, 190, 253, 119, 243, 189, 38, 160, 217, 189, 237, 49, 31, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 35, 246, 22, 190, 146, 202, 41, 189, 7, 181, 29, 62, 97, 159, 197, 61, 131, 98, 5, 62, 128, 172, 40, 190, 171, 141, 127, 190, 192, 173, 4, 190, 17, 90, 227, 189, 57, 165, 64, 62, 119, 110, 138, 62, 228, 39, 74, 190, 105, 177, 91, 189, 115, 234, 0, 190, 35, 247, 125, 61, 162, 220, 196, 190, 203, 246, 248, 189, 142, 118, 198, 62, 26, 217, 1, 190, 110, 81, 28, 190, 82, 162, 20, 190, 187, 251, 93, 189, 66, 114, 187, 62, 205, 168, 223, 189, 177, 96, 173, 61, 2, 98, 96, 60, 28, 11, 63, 189, 124, 203, 21, 62, 117, 255, 114, 190, 39, 14, 95, 61, 49, 30, 207, 61, 0, 1, 184, 62, 216, 150, 140, 190, 170, 153, 36, 62, 84, 190, 156, 62, 159, 174, 188, 62, 252, 183, 16, 190, 25, 83, 34, 189, 233, 208, 2, 189, 83, 145, 72, 61, 3, 241, 25, 190, 108, 98, 201, 189, 178, 235, 212, 189, 3, 32, 15, 61, 180, 40, 138, 190, 168, 225, 247, 61, 243, 81, 233, 189, 46, 45, 141, 189, 148, 131, 133, 190, 56, 224, 133, 61, 108, 141, 79, 190, 121, 218, 32, 61, 187, 204, 209, 189, 53, 89, 26, 62, 182, 195, 143, 190, 108, 13, 242, 61, 48, 68, 224, 61, 39, 232, 17, 61, 178, 226, 60, 62, 80, 119, 143, 61, 248, 127, 17, 190, 91, 108, 83, 189, 243, 134, 111, 190, 217, 197, 173, 190, 176, 182, 67, 190, 18, 155, 19, 190, 248, 48, 187, 189, 166, 13, 183, 61, 101, 16, 131, 61, 249, 186, 125, 61, 53, 248, 203, 189, 177, 116, 134, 189, 160, 4, 251, 188, 2, 33, 18, 190, 156, 174, 235, 61, 67, 164, 19, 189, 129, 143, 139, 189, 28, 2, 92, 61, 167, 15, 3, 190, 206, 136, 218, 189, 89, 120, 147, 61, 131, 104, 170, 189, 21, 237, 244, 61, 1, 37, 150, 61, 145, 53, 73, 60, 91, 230, 127, 189, 103, 75, 6, 62, 182, 24, 25, 190, 76, 33, 169, 189, 230, 251, 156, 61, 92, 113, 120, 61, 104, 252, 224, 189, 12, 164, 245, 189, 66, 132, 50, 190, 15, 11, 14, 62, 239, 238, 135, 187, 10, 24, 188, 189, 240, 55, 34, 60, 175, 239, 239, 189, 120, 237, 221, 189, 206, 247, 51, 61, 41, 210, 5, 189, 233, 32, 164, 61, 110, 205, 31, 62, 219, 241, 113, 190, 241, 80, 38, 61, 81, 110, 238, 61, 234, 203, 171, 61, 215, 236, 152, 190, 117, 3, 108, 60, 233, 126, 2, 191, 206, 128, 36, 60, 96, 24, 49, 189, 172, 221, 24, 191, 216, 21, 61, 189, 90, 129, 46, 62, 107, 36, 180, 61, 192, 34, 176, 61, 240, 48, 203, 62, 90, 182, 156, 189, 48, 127, 202, 62, 165, 248, 238, 190, 228, 163, 21, 62, 0, 163, 141, 61, 65, 28, 20, 62, 71, 63, 32, 190, 241, 145, 216, 190, 244, 115, 237, 62, 123, 198, 89, 61, 198, 49, 79, 190, 61, 39, 100, 62, 136, 119, 177, 190, 19, 29, 61, 190, 70, 106, 187, 189, 194, 182, 133, 61, 207, 189, 190, 61, 25, 122, 212, 189, 21, 61, 232, 189, 41, 238, 78, 190, 232, 239, 219, 61, 132, 31, 216, 188, 194, 31, 187, 61, 195, 179, 136, 190, 142, 142, 196, 189, 125, 53, 10, 190, 80, 138, 169, 188, 117, 6, 10, 62, 221, 75, 16, 190, 176, 59, 178, 189, 247, 89, 172, 188, 219, 4, 72, 61, 155, 158, 158, 62, 44, 93, 104, 61, 112, 124, 32, 190, 145, 50, 131, 189, 127, 239, 170, 61, 199, 132, 7, 62, 63, 7, 79, 189, 168, 131, 246, 189, 131, 177, 238, 61, 223, 174, 161, 189, 148, 227, 226, 61, 233, 209, 3, 62, 103, 45, 130, 189, 134, 197, 201, 190, 227, 3, 132, 190, 225, 253, 46, 62, 219, 69, 253, 59, 73, 214, 133, 61, 248, 98, 135, 62, 185, 30, 186, 189, 22, 49, 10, 61, 155, 110, 132, 62, 67, 8, 90, 60, 211, 221, 180, 61, 254, 43, 132, 190, 171, 208, 187, 190, 26, 35, 227, 189, 88, 25, 199, 190, 174, 86, 206, 61, 217, 185, 160, 189, 15, 128, 140, 62, 213, 188, 91, 62, 233, 194, 53, 61, 212, 72, 215, 61, 176, 75, 210, 187, 149, 103, 13, 62, 153, 136, 144, 190, 49, 5, 70, 190, 233, 153, 197, 62, 239, 127, 147, 62, 44, 213, 232, 61, 166, 85, 240, 190, 82, 217, 25, 62, 102, 184, 139, 189, 185, 35, 239, 62, 225, 227, 35, 189, 247, 39, 5, 61, 197, 186, 98, 62, 143, 58, 161, 61, 77, 147, 201, 190, 89, 123, 84, 62, 72, 132, 238, 185, 106, 190, 85, 61, 160, 159, 136, 190, 4, 117, 45, 62, 102, 30, 17, 191, 246, 43, 10, 63, 253, 161, 130, 189, 182, 190, 109, 61, 78, 150, 7, 62, 9, 157, 109, 189, 105, 90, 192, 62, 56, 64, 71, 62, 69, 121, 64, 62, 72, 168, 26, 61, 180, 254, 67, 62, 141, 219, 241, 190, 110, 157, 137, 62, 93, 143, 55, 61, 45, 143, 93, 62, 151, 67, 207, 190, 60, 153, 60, 190, 153, 47, 248, 62, 165, 145, 130, 62, 174, 151, 67, 190, 36, 110, 34, 62, 114, 106, 200, 190, 126, 17, 241, 60, 140, 153, 81, 62, 129, 140, 209, 188, 127, 90, 162, 61, 20, 192, 18, 190, 228, 95, 98, 62, 51, 141, 113, 61, 53, 196, 23, 62, 124, 78, 80, 190, 37, 74, 3, 62, 114, 184, 245, 190, 197, 49, 222, 61, 41, 148, 42, 62, 37, 179, 246, 190, 7, 168, 18, 61, 201, 98, 239, 61, 106, 43, 17, 189, 121, 147, 86, 62, 189, 45, 126, 189, 216, 131, 19, 59, 215, 84, 180, 62, 219, 80, 18, 191, 38, 54, 137, 189, 134, 243, 178, 61, 180, 236, 158, 189, 55, 154, 4, 191, 125, 149, 69, 190, 134, 210, 3, 63, 254, 106, 175, 61, 190, 84, 150, 61, 45, 129, 18, 62, 61, 100, 74, 191, 55, 216, 48, 190, 0, 202, 151, 188, 69, 211, 179, 187, 20, 122, 142, 190, 191, 193, 105, 60, 226, 139, 163, 61, 167, 72, 108, 190, 241, 140, 51, 190, 163, 186, 167, 62, 185, 168, 204, 188, 52, 65, 241, 62, 232, 152, 210, 190, 71, 70, 229, 61, 92, 113, 55, 190, 206, 190, 0, 62, 185, 35, 175, 61, 231, 117, 133, 189, 46, 116, 189, 61, 107, 145, 102, 62, 115, 49, 20, 190, 150, 115, 80, 190, 232, 225, 112, 62, 77, 24, 196, 188, 89, 95, 62, 188, 150, 230, 73, 62, 245, 64, 124, 62, 91, 110, 0, 62, 52, 194, 26, 60, 217, 11, 38, 190, 165, 46, 199, 61, 15, 98, 16, 189, 6, 88, 211, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 14, 152, 61, 220, 51, 209, 61, 11, 105, 229, 61, 152, 232, 157, 61, 248, 197, 135, 62, 31, 86, 38, 60, 134, 162, 153, 189, 212, 175, 0, 61, 207, 170, 53, 190, 187, 14, 190, 187, 69, 49, 29, 62, 174, 75, 246, 188, 232, 166, 27, 190, 220, 202, 58, 189, 192, 223, 102, 62, 151, 86, 36, 60, 99, 209, 8, 190, 44, 63, 185, 189, 113, 140, 67, 190, 30, 208, 145, 188, 222, 228, 154, 61, 58, 150, 42, 190, 67, 125, 51, 190, 164, 186, 33, 62, 244, 142, 180, 61, 17, 97, 223, 189, 35, 224, 131, 62, 73, 164, 0, 190, 14, 57, 253, 189, 228, 153, 103, 59, 1, 47, 58, 61, 76, 84, 13, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 36, 75, 61, 161, 12, 177, 62, 81, 63, 108, 190, 179, 28, 5, 190, 156, 54, 27, 190, 158, 64, 39, 62, 39, 186, 152, 188, 88, 73, 62, 190, 15, 223, 16, 62, 96, 93, 149, 190, 89, 83, 74, 63, 166, 39, 231, 188, 59, 101, 221, 190, 58, 207, 70, 61, 181, 20, 60, 63, 177, 220, 187, 62, 111, 152, 65, 63, 226, 37, 203, 189, 23, 109, 39, 190, 240, 249, 185, 61, 175, 47, 242, 188, 167, 180, 108, 190, 40, 152, 182, 61, 240, 173, 215, 62, 48, 156, 105, 61, 226, 196, 188, 61, 180, 27, 204, 190, 139, 12, 19, 61, 224, 66, 206, 62, 231, 77, 6, 191, 111, 214, 128, 190, 85, 34, 232, 61, 253, 252, 188, 190, 6, 13, 87, 190, 138, 178, 104, 189, 124, 239, 133, 190, 122, 152, 99, 190, 188, 150, 135, 190, 58, 52, 185, 61, 213, 97, 255, 189, 88, 227, 140, 189, 199, 178, 127, 189, 114, 9, 183, 60, 61, 237, 36, 190, 2, 144, 245, 60, 152, 147, 60, 60, 221, 33, 34, 62, 152, 43, 169, 61, 152, 76, 142, 188, 134, 107, 45, 190, 122, 240, 8, 62, 111, 110, 210, 189, 241, 219, 156, 61, 165, 179, 68, 62, 200, 82, 50, 62, 27, 197, 192, 61, 146, 75, 251, 189, 152, 86, 145, 61, 88, 165, 117, 188, 20, 216, 64, 62, 3, 10, 177, 189, 157, 174, 175, 58, 185, 16, 207, 61, 179, 198, 207, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 91, 160, 60, 249, 234, 44, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 193, 145, 191, 0, 44, 80, 190, 220, 154, 193, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 18, 41, 192, 242, 154, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}