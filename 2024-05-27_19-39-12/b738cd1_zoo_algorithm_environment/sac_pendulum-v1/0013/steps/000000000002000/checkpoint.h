// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 234, 201, 62, 34, 148, 185, 61, 154, 148, 186, 189, 115, 109, 255, 190, 87, 121, 6, 63, 114, 149, 193, 189, 232, 121, 10, 191, 21, 6, 77, 190, 239, 3, 18, 190, 97, 59, 189, 60, 93, 57, 217, 62, 162, 19, 137, 190, 123, 244, 33, 191, 125, 177, 176, 190, 11, 148, 224, 62, 162, 75, 242, 61, 32, 132, 152, 190, 187, 157, 21, 191, 219, 22, 199, 189, 178, 55, 48, 190, 60, 130, 173, 190, 210, 186, 134, 62, 160, 213, 4, 63, 251, 42, 123, 61, 37, 114, 37, 60, 41, 123, 250, 190, 188, 72, 80, 62, 125, 73, 230, 61, 229, 11, 18, 63, 104, 66, 17, 191, 205, 88, 28, 189, 33, 140, 84, 191, 66, 234, 17, 62, 95, 81, 54, 191, 31, 143, 62, 63, 190, 238, 123, 190, 210, 211, 15, 191, 125, 22, 169, 62, 22, 107, 36, 62, 6, 6, 238, 62, 200, 37, 62, 191, 0, 36, 77, 190, 51, 251, 187, 189, 121, 163, 30, 63, 9, 172, 136, 62, 115, 158, 246, 190, 71, 222, 187, 190, 73, 124, 26, 61, 231, 5, 151, 62, 49, 48, 60, 63, 93, 38, 193, 190, 32, 157, 37, 191, 26, 143, 68, 191, 220, 231, 208, 189, 232, 45, 224, 62, 253, 242, 158, 189, 42, 10, 146, 61, 40, 102, 108, 62, 239, 173, 172, 62, 96, 150, 1, 63, 240, 170, 176, 62, 63, 172, 248, 190, 97, 181, 168, 61, 115, 10, 211, 62, 137, 169, 33, 190, 150, 134, 236, 190, 234, 91, 118, 190, 12, 109, 8, 190, 253, 87, 247, 189, 204, 118, 28, 191, 106, 41, 35, 189, 20, 122, 143, 62, 17, 176, 10, 63, 17, 30, 9, 63, 129, 213, 189, 62, 91, 120, 220, 189, 5, 249, 116, 191, 12, 9, 16, 62, 22, 123, 32, 191, 243, 72, 39, 191, 42, 224, 210, 61, 232, 133, 22, 63, 231, 196, 170, 190, 132, 237, 73, 188, 56, 154, 148, 190, 213, 204, 2, 63, 250, 29, 112, 62, 19, 13, 11, 63, 61, 201, 30, 191, 167, 204, 6, 63, 54, 44, 216, 62, 25, 198, 126, 191, 113, 113, 118, 62, 20, 0, 115, 62, 31, 96, 74, 191, 16, 217, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 196, 19, 191, 226, 33, 201, 189, 241, 223, 122, 61, 99, 171, 244, 61, 57, 92, 215, 60, 177, 234, 201, 62, 193, 62, 199, 62, 147, 54, 246, 62, 178, 126, 146, 62, 241, 46, 210, 62, 7, 28, 90, 62, 232, 155, 213, 190, 232, 240, 196, 62, 116, 199, 8, 190, 53, 71, 15, 63, 220, 147, 52, 62, 50, 57, 23, 63, 46, 134, 67, 190, 53, 17, 224, 62, 176, 192, 172, 190, 16, 28, 44, 62, 23, 4, 200, 190, 191, 191, 49, 63, 20, 57, 37, 63, 70, 53, 82, 62, 222, 48, 55, 62, 183, 74, 190, 190, 181, 64, 18, 61, 151, 196, 7, 63, 68, 3, 52, 190, 40, 239, 13, 190, 169, 243, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 177, 157, 188, 192, 125, 215, 60, 88, 44, 112, 189, 245, 199, 133, 189, 58, 137, 179, 189, 162, 225, 107, 61, 247, 49, 83, 61, 67, 131, 145, 61, 4, 216, 137, 190, 242, 39, 118, 187, 174, 19, 133, 60, 118, 99, 196, 187, 43, 200, 180, 189, 181, 182, 18, 189, 194, 218, 138, 190, 253, 12, 208, 61, 76, 189, 11, 62, 51, 128, 114, 62, 235, 112, 211, 61, 255, 83, 173, 189, 180, 140, 8, 61, 236, 24, 141, 189, 171, 25, 241, 60, 153, 186, 225, 60, 201, 117, 129, 61, 7, 246, 137, 189, 173, 73, 184, 61, 1, 146, 237, 61, 149, 147, 123, 190, 204, 222, 18, 59, 242, 99, 61, 190, 198, 105, 203, 60, 96, 169, 143, 188, 40, 203, 208, 187, 187, 173, 120, 189, 153, 237, 22, 61, 93, 109, 147, 62, 19, 157, 44, 62, 186, 129, 208, 189, 5, 7, 144, 61, 8, 33, 155, 62, 159, 205, 49, 189, 162, 172, 143, 62, 232, 136, 145, 190, 119, 199, 250, 61, 118, 78, 182, 190, 1, 251, 227, 188, 113, 230, 19, 62, 26, 167, 40, 62, 74, 103, 90, 60, 163, 135, 111, 62, 144, 77, 102, 190, 58, 109, 39, 190, 252, 151, 118, 190, 118, 241, 216, 189, 26, 125, 73, 190, 215, 97, 29, 188, 111, 2, 202, 62, 164, 61, 110, 62, 206, 30, 147, 190, 94, 35, 5, 189, 144, 235, 59, 190, 200, 99, 191, 189, 18, 36, 43, 62, 48, 127, 37, 188, 242, 96, 248, 58, 150, 173, 129, 61, 66, 135, 76, 189, 219, 252, 65, 188, 216, 17, 61, 61, 185, 51, 188, 61, 3, 217, 78, 62, 151, 111, 221, 189, 44, 105, 63, 62, 106, 3, 44, 190, 158, 163, 203, 61, 42, 240, 215, 188, 242, 7, 241, 60, 69, 36, 40, 62, 192, 84, 28, 190, 248, 230, 110, 58, 179, 136, 110, 190, 166, 193, 164, 187, 134, 140, 1, 190, 2, 42, 219, 189, 135, 106, 140, 190, 227, 159, 20, 62, 125, 175, 94, 59, 37, 79, 219, 186, 137, 149, 174, 189, 17, 46, 100, 190, 203, 102, 18, 61, 5, 181, 92, 62, 49, 68, 82, 62, 106, 191, 109, 62, 48, 147, 8, 190, 170, 181, 212, 61, 58, 151, 204, 61, 103, 49, 183, 189, 87, 185, 33, 189, 9, 111, 248, 188, 21, 160, 112, 62, 72, 143, 34, 189, 179, 146, 220, 61, 151, 29, 145, 189, 254, 194, 158, 189, 129, 49, 242, 61, 20, 26, 203, 189, 194, 2, 37, 190, 0, 82, 74, 59, 249, 198, 14, 189, 127, 162, 130, 188, 102, 197, 228, 189, 14, 219, 110, 62, 127, 11, 108, 62, 62, 11, 76, 190, 45, 124, 96, 62, 238, 187, 1, 62, 135, 119, 223, 189, 225, 62, 92, 190, 255, 12, 200, 61, 155, 114, 153, 59, 137, 236, 214, 60, 248, 201, 91, 62, 241, 239, 87, 189, 128, 85, 42, 61, 124, 32, 116, 62, 14, 219, 110, 62, 85, 149, 19, 61, 164, 106, 240, 60, 195, 223, 44, 190, 130, 159, 3, 62, 198, 22, 231, 61, 138, 190, 43, 62, 213, 199, 29, 62, 8, 223, 5, 189, 158, 243, 10, 189, 100, 206, 1, 189, 198, 228, 205, 189, 188, 184, 196, 61, 194, 20, 78, 62, 156, 46, 29, 62, 202, 25, 128, 62, 167, 16, 36, 62, 11, 151, 106, 62, 91, 66, 117, 61, 182, 138, 130, 62, 76, 53, 210, 61, 30, 223, 236, 188, 241, 247, 93, 189, 66, 197, 227, 61, 197, 103, 67, 61, 249, 239, 170, 61, 21, 38, 207, 61, 94, 29, 219, 189, 204, 82, 221, 60, 26, 188, 180, 61, 209, 120, 155, 61, 54, 220, 171, 60, 166, 243, 19, 189, 160, 65, 166, 189, 34, 154, 178, 189, 188, 232, 137, 190, 183, 89, 128, 62, 248, 123, 157, 187, 90, 48, 40, 190, 103, 63, 154, 61, 181, 30, 197, 61, 3, 191, 45, 190, 136, 15, 89, 62, 212, 99, 16, 62, 13, 209, 26, 190, 180, 216, 11, 190, 104, 57, 74, 189, 39, 26, 165, 61, 68, 225, 0, 190, 128, 42, 81, 62, 139, 19, 96, 190, 235, 15, 156, 62, 142, 17, 136, 190, 124, 239, 192, 189, 122, 66, 119, 61, 49, 187, 27, 190, 202, 41, 86, 190, 103, 96, 14, 62, 253, 121, 31, 190, 32, 237, 190, 189, 77, 125, 22, 61, 222, 59, 184, 189, 107, 215, 55, 190, 15, 248, 61, 61, 194, 177, 195, 60, 94, 216, 192, 189, 78, 185, 178, 189, 67, 123, 41, 190, 143, 71, 51, 61, 53, 105, 229, 189, 75, 52, 80, 58, 239, 149, 176, 189, 179, 100, 107, 61, 245, 202, 203, 188, 24, 121, 20, 62, 177, 96, 18, 190, 238, 81, 234, 189, 185, 10, 159, 60, 59, 155, 9, 189, 29, 82, 61, 188, 183, 195, 220, 189, 74, 217, 216, 189, 29, 42, 20, 190, 172, 1, 198, 189, 175, 128, 145, 188, 97, 136, 244, 189, 120, 166, 42, 58, 111, 44, 156, 188, 52, 60, 188, 189, 242, 132, 174, 189, 224, 249, 53, 61, 34, 205, 243, 187, 20, 55, 225, 61, 171, 209, 14, 190, 152, 200, 43, 189, 129, 245, 226, 61, 126, 31, 243, 60, 17, 88, 30, 61, 46, 58, 208, 59, 141, 127, 197, 61, 72, 176, 244, 189, 107, 187, 48, 61, 215, 104, 0, 62, 99, 52, 162, 61, 41, 238, 231, 61, 114, 9, 79, 189, 199, 96, 21, 62, 31, 143, 17, 188, 68, 214, 218, 61, 229, 89, 173, 61, 27, 156, 98, 61, 138, 180, 147, 187, 152, 80, 42, 62, 183, 48, 89, 62, 73, 192, 94, 190, 135, 13, 109, 189, 73, 175, 43, 61, 136, 46, 122, 62, 208, 230, 245, 188, 90, 167, 44, 62, 78, 61, 199, 61, 46, 192, 13, 61, 201, 204, 130, 190, 133, 30, 161, 186, 101, 34, 140, 189, 241, 232, 201, 60, 203, 196, 178, 61, 169, 245, 146, 62, 225, 148, 98, 190, 80, 224, 20, 190, 122, 102, 13, 190, 40, 42, 229, 189, 75, 209, 12, 62, 111, 182, 78, 60, 139, 150, 167, 188, 23, 170, 68, 190, 89, 143, 129, 189, 79, 134, 149, 61, 249, 216, 225, 189, 92, 217, 12, 62, 184, 238, 61, 186, 238, 170, 248, 61, 190, 222, 222, 188, 239, 178, 7, 190, 131, 143, 231, 59, 151, 71, 100, 189, 17, 25, 24, 190, 209, 39, 65, 189, 191, 61, 202, 189, 168, 118, 220, 61, 99, 149, 20, 190, 2, 141, 132, 61, 72, 210, 18, 62, 137, 60, 241, 189, 204, 88, 23, 190, 69, 48, 21, 190, 140, 236, 150, 61, 84, 36, 26, 61, 117, 198, 50, 189, 108, 217, 181, 189, 162, 102, 180, 189, 250, 220, 51, 190, 115, 250, 109, 62, 124, 46, 155, 61, 175, 23, 77, 189, 208, 14, 119, 188, 156, 191, 50, 61, 67, 23, 241, 61, 9, 243, 81, 62, 83, 86, 100, 189, 151, 191, 219, 189, 217, 211, 22, 189, 162, 124, 87, 62, 106, 28, 95, 61, 167, 153, 225, 61, 195, 216, 130, 189, 234, 76, 215, 188, 125, 139, 219, 61, 62, 220, 211, 189, 58, 129, 18, 61, 173, 82, 220, 61, 53, 230, 4, 62, 7, 74, 42, 190, 189, 132, 49, 62, 194, 6, 227, 61, 128, 45, 139, 61, 130, 159, 239, 189, 122, 242, 241, 189, 163, 146, 191, 60, 237, 104, 146, 62, 74, 182, 169, 61, 51, 221, 11, 62, 86, 147, 189, 190, 31, 141, 31, 62, 254, 199, 8, 189, 79, 12, 44, 62, 207, 175, 220, 190, 104, 132, 21, 62, 95, 147, 109, 189, 12, 176, 140, 189, 120, 73, 87, 189, 214, 88, 237, 61, 200, 73, 120, 190, 50, 59, 237, 62, 111, 223, 212, 190, 58, 233, 193, 61, 39, 181, 0, 191, 69, 104, 150, 188, 176, 154, 26, 62, 9, 27, 18, 191, 36, 130, 151, 61, 9, 14, 220, 188, 162, 98, 250, 190, 208, 30, 194, 189, 162, 246, 90, 190, 208, 220, 85, 62, 54, 190, 170, 61, 93, 20, 194, 190, 225, 148, 3, 63, 144, 167, 231, 62, 181, 213, 173, 190, 134, 53, 106, 60, 187, 51, 211, 190, 233, 75, 6, 190, 200, 220, 181, 62, 240, 47, 7, 189, 1, 241, 122, 60, 122, 66, 9, 61, 63, 229, 133, 58, 197, 241, 196, 189, 9, 153, 21, 190, 148, 200, 4, 62, 155, 145, 8, 190, 247, 0, 58, 61, 234, 161, 230, 189, 200, 18, 0, 190, 21, 82, 165, 189, 18, 141, 1, 190, 176, 254, 130, 189, 223, 13, 1, 189, 98, 183, 190, 189, 243, 146, 80, 61, 61, 13, 168, 189, 37, 65, 169, 61, 10, 92, 153, 189, 223, 16, 199, 61, 188, 9, 138, 61, 77, 165, 206, 61, 51, 34, 180, 189, 143, 135, 145, 189, 221, 145, 14, 190, 240, 177, 35, 62, 170, 163, 175, 61, 28, 204, 231, 189, 86, 169, 167, 189, 31, 115, 222, 61, 196, 0, 19, 62, 106, 182, 130, 61, 5, 62, 69, 190, 178, 71, 242, 58, 157, 162, 68, 190, 208, 217, 203, 61, 151, 158, 231, 61, 252, 189, 146, 189, 243, 172, 48, 190, 96, 124, 23, 62, 197, 79, 158, 189, 140, 197, 164, 62, 71, 64, 51, 61, 175, 15, 6, 190, 172, 88, 135, 62, 124, 154, 173, 189, 89, 252, 139, 189, 215, 52, 215, 189, 183, 81, 8, 62, 247, 76, 106, 62, 144, 94, 33, 62, 225, 127, 179, 62, 61, 214, 115, 62, 179, 183, 34, 190, 122, 69, 97, 189, 142, 66, 224, 60, 116, 248, 186, 62, 108, 56, 94, 62, 184, 7, 204, 61, 152, 200, 65, 190, 242, 61, 10, 62, 186, 14, 253, 61, 231, 95, 50, 62, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 60, 191, 38, 190, 124, 144, 179, 59, 16, 254, 139, 190, 33, 133, 9, 62, 174, 34, 10, 190, 26, 228, 83, 61, 80, 216, 103, 190, 11, 43, 114, 62, 31, 128, 255, 189, 218, 53, 94, 62, 232, 35, 242, 190, 18, 213, 197, 61, 13, 36, 143, 190, 112, 100, 228, 189, 113, 16, 133, 189, 58, 224, 194, 190, 84, 104, 162, 62, 16, 250, 108, 190, 105, 151, 106, 190, 221, 128, 12, 190, 181, 146, 19, 60, 57, 141, 37, 62, 149, 75, 92, 62, 29, 76, 160, 190, 4, 221, 178, 62, 246, 80, 76, 62, 171, 180, 157, 190, 36, 192, 107, 59, 29, 244, 238, 190, 20, 221, 131, 190, 78, 227, 54, 61, 10, 32, 114, 189, 207, 49, 247, 188, 206, 244, 51, 61, 23, 35, 121, 61, 153, 17, 143, 60, 210, 189, 32, 62, 51, 69, 36, 188, 159, 132, 15, 188, 39, 86, 100, 190, 127, 95, 55, 62, 121, 163, 16, 62, 24, 216, 12, 62, 138, 7, 106, 189, 97, 123, 142, 190, 94, 12, 116, 190, 51, 197, 97, 190, 221, 12, 155, 62, 220, 40, 63, 62, 155, 99, 43, 61, 222, 18, 36, 190, 139, 147, 253, 189, 222, 222, 25, 62, 37, 17, 98, 61, 17, 114, 24, 191, 111, 204, 73, 190, 172, 103, 143, 189, 249, 117, 237, 187, 239, 103, 35, 190, 41, 202, 153, 190, 184, 153, 227, 61, 167, 37, 46, 189, 70, 119, 244, 61, 188, 234, 134, 189, 117, 68, 228, 61, 28, 97, 71, 62, 103, 90, 231, 189, 141, 219, 212, 58, 223, 238, 131, 189, 91, 149, 189, 61, 189, 190, 125, 189, 87, 148, 24, 61, 93, 167, 137, 189, 156, 201, 43, 61, 235, 219, 10, 62, 165, 222, 48, 62, 29, 61, 15, 62, 178, 31, 4, 190, 15, 69, 219, 189, 39, 227, 122, 190, 198, 109, 132, 189, 72, 163, 207, 189, 86, 187, 5, 62, 157, 212, 166, 59, 229, 6, 50, 62, 251, 143, 133, 190, 181, 231, 169, 189, 10, 106, 75, 62, 126, 204, 131, 190, 196, 153, 121, 190, 148, 15, 101, 190, 97, 248, 112, 61, 213, 236, 61, 62, 53, 227, 172, 189, 106, 156, 4, 190, 150, 121, 6, 62, 19, 223, 173, 189, 36, 215, 111, 61, 235, 40, 38, 190, 205, 178, 235, 61, 141, 212, 173, 188, 113, 155, 202, 61, 11, 154, 105, 189, 87, 222, 68, 189, 76, 1, 132, 61, 124, 195, 145, 60, 18, 7, 87, 189, 218, 79, 28, 62, 20, 61, 52, 190, 242, 12, 185, 189, 198, 223, 232, 189, 202, 165, 10, 190, 98, 125, 41, 190, 162, 234, 188, 189, 211, 136, 164, 188, 71, 52, 161, 61, 39, 97, 138, 189, 197, 14, 127, 187, 190, 102, 84, 187, 103, 248, 196, 188, 136, 120, 67, 57, 210, 123, 72, 189, 75, 92, 163, 61, 188, 56, 74, 189, 70, 226, 160, 60, 61, 41, 19, 190, 170, 82, 223, 61, 62, 6, 227, 61, 100, 154, 120, 190, 187, 21, 88, 61, 126, 162, 69, 60, 113, 229, 60, 62, 146, 197, 31, 61, 28, 219, 240, 61, 192, 201, 190, 189, 142, 95, 143, 62, 38, 136, 135, 189, 110, 84, 136, 62, 224, 71, 115, 61, 118, 43, 210, 189, 103, 126, 75, 60, 58, 120, 132, 189, 79, 181, 157, 61, 213, 155, 226, 189, 162, 196, 17, 62, 196, 229, 83, 62, 157, 219, 104, 58, 192, 63, 247, 61, 72, 23, 133, 61, 41, 183, 3, 190, 157, 182, 223, 189, 15, 91, 100, 187, 202, 12, 204, 61, 168, 57, 2, 190, 177, 131, 193, 189, 29, 50, 8, 190, 190, 165, 242, 61, 209, 180, 245, 189, 165, 129, 189, 61, 190, 115, 18, 190, 0, 160, 97, 188, 173, 52, 179, 61, 12, 241, 0, 62, 167, 24, 74, 190, 81, 254, 162, 59, 20, 238, 154, 61, 175, 74, 118, 188, 192, 148, 38, 190, 185, 149, 237, 61, 226, 137, 41, 187, 2, 83, 174, 189, 246, 133, 4, 61, 39, 134, 59, 189, 139, 92, 219, 60, 178, 82, 83, 190, 221, 67, 228, 61, 169, 62, 28, 62, 138, 34, 60, 62, 190, 211, 114, 189, 207, 80, 124, 190, 245, 209, 203, 188, 68, 102, 3, 190, 151, 230, 48, 190, 2, 35, 16, 188, 100, 185, 142, 61, 250, 11, 49, 62, 216, 57, 41, 190, 205, 25, 134, 189, 121, 71, 31, 190, 249, 65, 15, 190, 100, 29, 164, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 233, 174, 41, 190, 73, 138, 68, 190, 79, 250, 231, 189, 218, 124, 53, 61, 76, 3, 168, 59, 102, 220, 31, 189, 76, 152, 205, 61, 90, 48, 55, 190, 164, 149, 161, 61, 126, 69, 25, 61, 220, 75, 144, 62, 170, 124, 42, 189, 200, 96, 79, 190, 247, 194, 128, 62, 25, 131, 41, 189, 46, 127, 203, 189, 160, 90, 2, 190, 11, 141, 85, 61, 34, 28, 211, 61, 26, 91, 156, 190, 242, 53, 239, 60, 18, 125, 82, 62, 100, 212, 239, 61, 92, 125, 59, 189, 153, 209, 28, 190, 201, 29, 48, 62, 139, 71, 235, 61, 103, 1, 185, 61, 152, 132, 217, 187, 67, 153, 198, 189, 49, 36, 85, 188, 58, 171, 161, 189, 245, 118, 42, 190, 10, 20, 46, 62, 103, 142, 198, 61, 232, 93, 137, 189, 81, 72, 51, 62, 166, 91, 59, 189, 200, 93, 31, 190, 50, 253, 215, 189, 26, 25, 36, 190, 179, 51, 105, 60, 68, 241, 7, 190, 90, 14, 38, 61, 161, 77, 155, 61, 80, 248, 106, 189, 10, 141, 182, 187, 47, 54, 116, 61, 100, 194, 197, 61, 250, 114, 226, 61, 153, 202, 179, 61, 184, 84, 179, 61, 144, 121, 31, 190, 253, 119, 243, 189, 38, 160, 217, 189, 237, 49, 31, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 35, 246, 22, 190, 146, 202, 41, 189, 7, 181, 29, 62, 97, 159, 197, 61, 65, 40, 13, 62, 60, 50, 26, 188, 129, 39, 14, 190, 214, 160, 188, 189, 68, 82, 4, 190, 129, 13, 157, 61, 72, 195, 33, 62, 101, 148, 34, 190, 248, 172, 42, 190, 1, 2, 227, 189, 2, 14, 157, 189, 168, 86, 50, 190, 146, 27, 136, 188, 19, 140, 130, 61, 41, 59, 152, 61, 141, 173, 42, 190, 205, 144, 23, 190, 137, 131, 109, 189, 183, 240, 38, 62, 86, 112, 8, 189, 50, 129, 46, 190, 247, 107, 198, 188, 1, 178, 24, 190, 123, 199, 13, 62, 130, 8, 93, 189, 48, 117, 194, 189, 27, 109, 233, 61, 164, 69, 143, 61, 191, 58, 26, 190, 221, 189, 119, 61, 200, 215, 174, 61, 33, 68, 11, 62, 249, 3, 253, 188, 208, 154, 162, 189, 102, 201, 240, 189, 98, 212, 234, 60, 187, 200, 125, 189, 37, 84, 6, 190, 159, 132, 15, 190, 177, 116, 255, 61, 233, 94, 41, 190, 141, 89, 220, 61, 161, 96, 14, 188, 183, 34, 214, 189, 155, 11, 28, 190, 146, 160, 200, 61, 71, 135, 183, 189, 90, 191, 208, 186, 23, 135, 202, 189, 121, 52, 131, 61, 134, 90, 43, 190, 108, 13, 242, 61, 183, 140, 24, 62, 20, 122, 72, 61, 15, 165, 13, 62, 239, 220, 177, 61, 6, 223, 15, 190, 75, 169, 238, 59, 23, 255, 52, 190, 165, 1, 25, 190, 82, 131, 179, 189, 129, 110, 241, 189, 239, 252, 213, 187, 50, 119, 195, 61, 101, 16, 131, 61, 249, 186, 125, 61, 53, 248, 203, 189, 177, 116, 134, 189, 160, 4, 251, 188, 2, 33, 18, 190, 156, 174, 235, 61, 67, 164, 19, 189, 129, 143, 139, 189, 28, 2, 92, 61, 167, 15, 3, 190, 206, 136, 218, 189, 89, 120, 147, 61, 131, 104, 170, 189, 21, 237, 244, 61, 1, 37, 150, 61, 145, 53, 73, 60, 91, 230, 127, 189, 103, 75, 6, 62, 182, 24, 25, 190, 76, 33, 169, 189, 230, 251, 156, 61, 92, 113, 120, 61, 104, 252, 224, 189, 12, 164, 245, 189, 66, 132, 50, 190, 15, 11, 14, 62, 239, 238, 135, 187, 10, 24, 188, 189, 240, 55, 34, 60, 175, 239, 239, 189, 120, 237, 221, 189, 104, 42, 7, 62, 158, 197, 83, 61, 160, 181, 48, 187, 205, 198, 54, 62, 101, 174, 34, 61, 131, 37, 1, 189, 250, 145, 8, 61, 59, 135, 89, 61, 83, 120, 194, 189, 177, 126, 84, 60, 198, 91, 165, 190, 18, 65, 134, 61, 251, 163, 143, 61, 137, 141, 5, 190, 189, 129, 209, 60, 165, 248, 191, 61, 67, 61, 83, 61, 194, 98, 43, 190, 200, 116, 12, 62, 235, 200, 123, 189, 68, 13, 254, 61, 63, 87, 113, 190, 108, 161, 159, 61, 34, 65, 21, 62, 110, 228, 56, 61, 98, 214, 50, 190, 99, 93, 163, 190, 202, 239, 217, 187, 189, 130, 10, 62, 92, 180, 45, 190, 112, 21, 134, 61, 118, 70, 71, 190, 134, 59, 38, 190, 200, 51, 54, 189, 129, 134, 201, 61, 95, 75, 153, 61, 187, 69, 169, 189, 251, 35, 207, 189, 22, 8, 66, 190, 121, 28, 185, 61, 30, 37, 199, 188, 22, 220, 154, 61, 161, 244, 141, 190, 184, 126, 71, 189, 130, 138, 233, 189, 121, 235, 166, 58, 8, 42, 9, 62, 47, 128, 211, 189, 204, 77, 255, 189, 80, 113, 255, 59, 117, 153, 57, 59, 81, 25, 152, 62, 100, 160, 24, 61, 53, 115, 244, 189, 192, 31, 55, 189, 156, 196, 226, 61, 87, 87, 212, 61, 108, 79, 77, 189, 254, 141, 20, 190, 101, 208, 147, 61, 203, 16, 143, 189, 78, 103, 165, 61, 52, 47, 219, 61, 186, 10, 25, 189, 68, 47, 37, 190, 108, 237, 16, 190, 219, 203, 102, 62, 185, 23, 255, 61, 22, 85, 136, 61, 11, 44, 142, 62, 43, 204, 153, 189, 122, 97, 27, 62, 157, 86, 89, 62, 137, 134, 181, 61, 60, 251, 43, 61, 59, 21, 0, 190, 247, 125, 61, 190, 111, 77, 124, 190, 56, 44, 9, 190, 63, 52, 206, 61, 231, 138, 107, 60, 116, 206, 125, 62, 146, 82, 97, 61, 168, 100, 114, 61, 248, 221, 237, 188, 215, 224, 100, 189, 232, 126, 34, 62, 225, 115, 88, 190, 171, 47, 14, 190, 190, 214, 175, 62, 254, 243, 158, 62, 76, 129, 168, 189, 191, 245, 135, 190, 198, 160, 153, 61, 35, 36, 42, 190, 191, 31, 203, 62, 117, 126, 119, 189, 249, 247, 131, 61, 151, 15, 191, 61, 42, 71, 148, 61, 59, 77, 41, 190, 9, 209, 16, 62, 238, 38, 170, 189, 255, 91, 161, 61, 81, 48, 107, 189, 6, 43, 25, 62, 188, 233, 198, 190, 89, 163, 11, 63, 210, 218, 170, 187, 102, 241, 62, 62, 229, 249, 51, 62, 199, 101, 24, 190, 185, 54, 169, 62, 240, 248, 114, 188, 157, 175, 168, 61, 36, 215, 0, 62, 134, 219, 201, 61, 74, 23, 177, 190, 211, 84, 63, 62, 155, 85, 149, 61, 135, 39, 55, 62, 92, 174, 204, 190, 85, 6, 38, 190, 68, 63, 62, 62, 155, 134, 151, 62, 117, 179, 161, 189, 11, 82, 6, 62, 178, 51, 166, 190, 186, 25, 165, 61, 172, 160, 169, 62, 118, 118, 94, 189, 180, 96, 219, 61, 66, 86, 117, 61, 161, 132, 85, 62, 13, 48, 207, 60, 135, 82, 59, 62, 68, 75, 81, 189, 7, 63, 21, 62, 28, 32, 190, 190, 238, 199, 46, 62, 59, 206, 145, 62, 239, 161, 191, 188, 151, 55, 23, 62, 136, 90, 151, 61, 172, 170, 162, 189, 246, 246, 63, 61, 150, 83, 106, 190, 106, 233, 143, 61, 98, 36, 255, 60, 185, 47, 139, 190, 173, 122, 167, 189, 244, 215, 37, 62, 176, 168, 146, 189, 198, 154, 11, 191, 141, 35, 61, 190, 73, 8, 4, 189, 111, 182, 65, 62, 51, 171, 173, 61, 21, 41, 249, 188, 113, 18, 21, 191, 45, 171, 152, 189, 122, 69, 52, 189, 232, 155, 84, 61, 231, 72, 37, 190, 212, 30, 16, 189, 7, 190, 221, 61, 203, 72, 66, 190, 47, 56, 65, 190, 160, 168, 149, 62, 205, 245, 105, 61, 1, 171, 236, 62, 159, 211, 147, 190, 45, 37, 231, 61, 36, 174, 164, 190, 145, 137, 229, 61, 40, 141, 6, 62, 39, 211, 192, 61, 132, 219, 43, 62, 43, 231, 76, 62, 226, 117, 55, 190, 75, 137, 74, 190, 163, 98, 129, 61, 80, 195, 163, 59, 82, 170, 189, 187, 94, 184, 62, 62, 71, 241, 135, 62, 5, 215, 99, 62, 216, 197, 35, 60, 191, 242, 39, 190, 202, 198, 194, 61, 40, 97, 73, 188, 164, 206, 163, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 167, 111, 60, 134, 224, 135, 61, 117, 52, 186, 61, 166, 50, 46, 61, 25, 239, 107, 62, 152, 93, 168, 61, 144, 185, 88, 189, 209, 155, 22, 60, 218, 194, 43, 190, 120, 78, 103, 189, 50, 245, 212, 61, 223, 90, 39, 188, 2, 252, 239, 189, 220, 202, 58, 189, 16, 224, 55, 62, 0, 71, 22, 189, 71, 77, 9, 190, 136, 5, 166, 189, 68, 118, 20, 190, 145, 101, 95, 189, 222, 228, 154, 61, 88, 88, 247, 189, 67, 125, 51, 190, 72, 93, 72, 61, 201, 7, 102, 61, 17, 97, 223, 189, 87, 47, 64, 62, 115, 56, 4, 190, 1, 68, 247, 189, 246, 231, 90, 189, 255, 64, 38, 61, 61, 145, 31, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 193, 143, 59, 5, 22, 151, 62, 15, 228, 8, 190, 229, 243, 9, 190, 197, 27, 19, 190, 169, 137, 80, 62, 151, 238, 217, 60, 28, 18, 60, 190, 95, 13, 17, 62, 113, 224, 107, 190, 78, 223, 18, 63, 248, 211, 110, 189, 225, 2, 217, 190, 58, 207, 70, 61, 194, 189, 239, 62, 78, 141, 130, 62, 68, 239, 141, 62, 140, 98, 205, 189, 211, 30, 7, 190, 246, 199, 244, 60, 175, 47, 242, 188, 100, 180, 34, 190, 40, 152, 182, 61, 14, 206, 223, 61, 101, 228, 44, 189, 226, 196, 188, 61, 248, 9, 18, 190, 209, 104, 130, 189, 74, 19, 143, 62, 23, 223, 203, 190, 118, 185, 64, 190, 92, 62, 213, 61, 53, 6, 138, 190, 0, 245, 87, 190, 165, 113, 222, 189, 241, 121, 18, 190, 162, 208, 68, 190, 239, 81, 166, 190, 108, 103, 171, 61, 115, 179, 4, 190, 49, 3, 141, 189, 121, 61, 164, 189, 187, 154, 173, 188, 62, 77, 41, 190, 108, 84, 29, 189, 152, 147, 60, 60, 67, 249, 215, 61, 96, 130, 0, 62, 230, 135, 81, 189, 70, 64, 45, 190, 8, 44, 136, 61, 150, 94, 233, 189, 241, 219, 156, 61, 147, 170, 76, 62, 200, 82, 50, 62, 69, 122, 249, 61, 32, 39, 162, 189, 152, 86, 145, 61, 106, 183, 137, 189, 139, 49, 40, 62, 97, 76, 188, 189, 225, 169, 153, 189, 106, 96, 213, 61, 200, 235, 191, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 221, 13, 61, 238, 153, 234, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 110, 21, 191, 189, 229, 11, 63, 165, 75, 209, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 212, 196, 191, 185, 14, 46, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}