// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 99, 70, 63, 239, 104, 63, 190, 228, 171, 104, 190, 183, 83, 160, 190, 55, 252, 130, 190, 250, 230, 220, 190, 218, 176, 95, 190, 151, 67, 134, 191, 94, 213, 87, 190, 89, 38, 147, 61, 176, 158, 70, 191, 57, 251, 234, 190, 53, 105, 35, 191, 227, 72, 121, 63, 141, 193, 250, 62, 220, 249, 234, 62, 202, 205, 155, 191, 174, 52, 11, 191, 220, 182, 188, 62, 47, 109, 73, 191, 237, 118, 176, 190, 81, 77, 19, 63, 180, 158, 23, 63, 242, 3, 133, 189, 164, 105, 55, 190, 208, 31, 75, 62, 211, 234, 158, 62, 135, 143, 184, 187, 69, 98, 172, 61, 147, 51, 57, 191, 78, 58, 92, 190, 229, 124, 52, 190, 9, 101, 217, 62, 2, 193, 225, 61, 105, 69, 1, 190, 109, 84, 0, 191, 129, 64, 89, 191, 165, 199, 18, 63, 146, 233, 80, 62, 36, 93, 61, 63, 173, 17, 118, 191, 196, 57, 131, 190, 111, 30, 152, 190, 126, 148, 128, 63, 62, 208, 103, 62, 224, 236, 245, 190, 132, 39, 10, 191, 126, 247, 246, 61, 143, 50, 160, 62, 222, 130, 39, 62, 171, 92, 15, 191, 193, 147, 100, 190, 234, 207, 169, 191, 200, 230, 95, 190, 194, 136, 16, 63, 31, 70, 255, 62, 198, 35, 42, 62, 179, 240, 105, 61, 227, 65, 182, 63, 36, 200, 233, 62, 24, 151, 129, 190, 114, 106, 125, 191, 140, 90, 86, 189, 44, 214, 27, 63, 26, 140, 76, 191, 26, 243, 238, 190, 90, 73, 169, 190, 192, 55, 158, 190, 36, 184, 210, 189, 7, 53, 58, 191, 206, 228, 87, 62, 234, 157, 66, 62, 186, 25, 51, 63, 31, 156, 169, 63, 72, 205, 155, 62, 8, 153, 2, 62, 36, 189, 138, 191, 173, 228, 81, 62, 55, 108, 43, 191, 53, 59, 6, 190, 217, 80, 199, 62, 193, 230, 108, 63, 34, 205, 34, 62, 170, 146, 0, 61, 144, 152, 176, 190, 244, 215, 85, 63, 134, 128, 67, 62, 31, 15, 217, 62, 2, 191, 208, 190, 169, 123, 28, 63, 76, 144, 184, 62, 237, 2, 134, 191, 93, 225, 110, 62, 145, 171, 63, 63, 40, 95, 108, 191, 226, 34, 126, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 18, 54, 191, 243, 196, 193, 188, 2, 147, 1, 190, 71, 9, 29, 190, 176, 245, 33, 62, 126, 41, 88, 62, 9, 102, 62, 62, 89, 69, 18, 62, 194, 219, 174, 61, 127, 168, 189, 62, 112, 182, 31, 190, 161, 97, 47, 191, 174, 114, 14, 63, 30, 85, 151, 190, 56, 124, 7, 63, 55, 160, 161, 189, 126, 251, 11, 63, 208, 189, 32, 190, 72, 56, 212, 62, 14, 195, 117, 190, 57, 179, 179, 61, 88, 3, 209, 190, 179, 158, 79, 63, 56, 240, 58, 63, 139, 114, 225, 60, 240, 120, 219, 61, 41, 177, 225, 190, 185, 110, 1, 62, 111, 243, 11, 63, 99, 178, 162, 190, 231, 95, 162, 62, 97, 215, 114, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 28, 10, 191, 39, 232, 33, 62, 100, 139, 99, 190, 86, 221, 97, 189, 199, 158, 223, 190, 37, 122, 160, 60, 0, 144, 29, 181, 50, 143, 117, 62, 154, 173, 242, 190, 103, 23, 78, 60, 89, 79, 155, 189, 156, 246, 247, 61, 247, 95, 13, 191, 129, 220, 234, 190, 91, 184, 166, 190, 233, 221, 46, 189, 109, 184, 58, 62, 55, 221, 0, 62, 113, 106, 212, 62, 70, 115, 246, 191, 33, 123, 168, 190, 249, 140, 39, 190, 232, 170, 132, 61, 187, 217, 16, 191, 78, 97, 165, 62, 65, 173, 97, 62, 160, 189, 131, 189, 127, 214, 78, 62, 72, 138, 228, 190, 201, 206, 15, 63, 116, 237, 26, 62, 112, 207, 48, 190, 169, 86, 127, 189, 208, 89, 16, 63, 17, 251, 225, 189, 134, 246, 0, 191, 60, 92, 169, 62, 52, 243, 12, 191, 39, 56, 85, 191, 171, 67, 216, 62, 163, 56, 140, 62, 199, 67, 57, 62, 124, 54, 83, 62, 165, 208, 113, 190, 138, 29, 117, 62, 172, 138, 49, 191, 31, 220, 30, 62, 68, 254, 103, 61, 91, 212, 28, 62, 223, 27, 226, 189, 197, 162, 26, 62, 173, 123, 49, 190, 96, 109, 120, 190, 196, 20, 112, 191, 92, 239, 86, 190, 148, 116, 49, 190, 129, 255, 114, 61, 178, 137, 76, 62, 246, 4, 206, 61, 7, 190, 176, 190, 55, 88, 3, 62, 120, 56, 122, 190, 184, 133, 139, 190, 197, 21, 215, 190, 180, 33, 247, 190, 128, 175, 208, 60, 168, 189, 241, 188, 175, 252, 3, 190, 15, 52, 113, 190, 220, 144, 53, 189, 217, 71, 93, 188, 13, 69, 143, 62, 153, 59, 151, 189, 40, 252, 100, 62, 69, 218, 53, 190, 0, 5, 203, 61, 112, 39, 230, 189, 1, 182, 93, 191, 39, 41, 105, 62, 133, 27, 161, 190, 125, 89, 170, 61, 93, 16, 65, 190, 196, 142, 26, 62, 142, 84, 110, 190, 61, 65, 5, 191, 9, 140, 251, 190, 207, 156, 89, 62, 14, 221, 133, 190, 213, 6, 226, 61, 250, 158, 185, 61, 111, 163, 234, 190, 78, 40, 188, 62, 126, 81, 136, 62, 82, 20, 149, 62, 178, 82, 199, 62, 77, 235, 38, 191, 166, 220, 116, 189, 50, 169, 15, 62, 66, 178, 132, 62, 142, 80, 29, 188, 32, 72, 58, 190, 129, 114, 54, 62, 95, 135, 145, 189, 163, 217, 9, 62, 18, 134, 28, 62, 171, 139, 196, 189, 129, 205, 151, 62, 172, 11, 205, 189, 24, 215, 50, 191, 86, 126, 111, 189, 91, 122, 13, 62, 97, 238, 93, 190, 228, 202, 214, 189, 227, 16, 34, 63, 96, 26, 200, 62, 148, 177, 159, 190, 78, 28, 215, 62, 129, 118, 29, 61, 178, 153, 215, 189, 165, 11, 210, 190, 100, 167, 184, 62, 208, 198, 250, 61, 111, 230, 18, 61, 221, 31, 176, 62, 201, 65, 28, 189, 111, 138, 181, 62, 60, 221, 54, 62, 172, 207, 53, 62, 255, 113, 28, 191, 73, 2, 191, 186, 152, 192, 40, 190, 252, 218, 11, 61, 166, 187, 0, 62, 227, 191, 132, 61, 90, 17, 120, 61, 254, 121, 243, 189, 128, 77, 253, 188, 54, 181, 167, 189, 218, 184, 16, 190, 120, 212, 100, 61, 93, 143, 126, 62, 215, 79, 209, 190, 100, 81, 184, 62, 30, 14, 23, 62, 207, 210, 42, 62, 12, 230, 28, 62, 164, 62, 159, 62, 105, 108, 132, 61, 76, 23, 5, 61, 32, 253, 122, 190, 205, 200, 27, 62, 143, 111, 35, 60, 111, 235, 11, 62, 146, 146, 167, 61, 192, 174, 44, 190, 65, 70, 109, 60, 115, 231, 48, 62, 171, 40, 60, 61, 13, 226, 7, 190, 156, 122, 192, 190, 41, 199, 193, 60, 189, 26, 12, 61, 50, 71, 162, 191, 58, 85, 141, 62, 166, 240, 39, 187, 130, 228, 237, 189, 211, 18, 231, 61, 221, 44, 130, 62, 81, 62, 135, 191, 207, 248, 94, 62, 75, 80, 44, 190, 201, 31, 50, 60, 95, 87, 176, 191, 68, 65, 8, 61, 170, 228, 205, 190, 39, 135, 0, 190, 224, 20, 109, 62, 69, 151, 146, 191, 54, 247, 224, 62, 224, 95, 217, 191, 59, 114, 72, 191, 215, 168, 98, 61, 246, 236, 23, 190, 250, 215, 113, 191, 152, 226, 37, 62, 236, 219, 229, 186, 200, 57, 199, 189, 39, 40, 78, 62, 66, 12, 71, 191, 97, 149, 204, 190, 246, 123, 230, 62, 241, 115, 245, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 34, 184, 255, 190, 246, 8, 235, 189, 237, 120, 144, 61, 254, 27, 98, 190, 224, 123, 240, 60, 131, 226, 92, 61, 12, 128, 177, 60, 126, 42, 131, 61, 112, 178, 137, 189, 109, 122, 203, 61, 189, 160, 78, 189, 115, 226, 51, 188, 204, 99, 8, 62, 243, 54, 194, 190, 71, 103, 165, 61, 164, 223, 45, 62, 64, 69, 70, 62, 178, 45, 38, 190, 19, 28, 77, 61, 76, 248, 6, 188, 137, 64, 129, 62, 123, 194, 106, 190, 232, 55, 124, 62, 45, 235, 101, 61, 33, 41, 2, 62, 169, 246, 107, 190, 125, 44, 135, 188, 132, 39, 185, 60, 83, 204, 195, 61, 217, 146, 90, 61, 86, 80, 76, 62, 208, 172, 241, 190, 80, 224, 20, 190, 36, 26, 13, 190, 104, 168, 224, 189, 75, 209, 12, 62, 67, 143, 145, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 47, 29, 53, 61, 157, 36, 226, 189, 21, 10, 212, 61, 39, 205, 201, 186, 44, 108, 190, 61, 190, 222, 222, 188, 71, 19, 35, 190, 86, 138, 61, 188, 228, 252, 104, 189, 124, 31, 26, 190, 32, 138, 132, 189, 6, 79, 31, 190, 119, 207, 202, 61, 99, 149, 20, 190, 72, 83, 49, 61, 216, 128, 237, 61, 88, 111, 44, 190, 238, 146, 50, 190, 216, 21, 52, 190, 140, 236, 150, 61, 215, 12, 19, 60, 243, 33, 193, 189, 139, 131, 227, 189, 162, 102, 180, 189, 138, 15, 66, 191, 32, 49, 19, 62, 11, 139, 98, 62, 246, 206, 94, 189, 246, 79, 162, 188, 229, 255, 111, 61, 209, 190, 31, 62, 96, 26, 24, 62, 146, 207, 46, 189, 201, 209, 175, 189, 103, 63, 35, 189, 123, 207, 24, 62, 53, 229, 241, 61, 183, 158, 247, 190, 252, 76, 5, 61, 1, 166, 235, 60, 187, 241, 36, 62, 31, 183, 70, 62, 149, 109, 54, 62, 186, 27, 161, 61, 40, 181, 246, 61, 128, 227, 178, 190, 121, 101, 146, 62, 123, 194, 165, 61, 16, 97, 66, 62, 30, 52, 182, 189, 84, 138, 162, 189, 23, 164, 99, 62, 207, 84, 193, 62, 192, 171, 143, 61, 152, 255, 119, 61, 65, 254, 38, 191, 31, 141, 31, 62, 63, 140, 57, 62, 201, 24, 18, 62, 220, 209, 151, 191, 65, 134, 77, 62, 50, 21, 18, 191, 153, 255, 236, 190, 239, 248, 146, 190, 212, 129, 37, 62, 177, 151, 19, 191, 209, 223, 3, 63, 235, 167, 134, 190, 201, 106, 46, 62, 119, 200, 88, 191, 174, 151, 99, 61, 239, 165, 104, 62, 1, 83, 53, 191, 74, 42, 225, 188, 72, 83, 248, 189, 236, 242, 34, 191, 188, 58, 35, 189, 220, 123, 164, 190, 126, 133, 146, 62, 237, 140, 34, 62, 118, 150, 44, 191, 140, 115, 14, 63, 242, 22, 0, 63, 112, 62, 93, 190, 65, 14, 187, 61, 53, 230, 223, 190, 111, 88, 167, 189, 96, 108, 204, 189, 240, 47, 7, 189, 1, 241, 122, 60, 243, 250, 1, 61, 231, 131, 251, 186, 197, 241, 196, 189, 122, 245, 48, 190, 103, 11, 231, 61, 48, 149, 16, 190, 127, 153, 22, 61, 5, 201, 253, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 162, 154, 170, 189, 120, 228, 4, 189, 201, 180, 190, 189, 205, 243, 21, 61, 244, 241, 171, 189, 195, 250, 132, 61, 10, 92, 153, 189, 111, 94, 168, 61, 209, 18, 109, 61, 214, 186, 172, 61, 240, 170, 183, 189, 204, 70, 151, 189, 153, 241, 29, 190, 240, 177, 35, 62, 62, 138, 138, 61, 28, 204, 231, 189, 206, 112, 188, 189, 106, 30, 185, 61, 168, 135, 246, 61, 40, 46, 244, 60, 124, 46, 159, 62, 43, 234, 93, 59, 189, 153, 147, 190, 95, 129, 134, 62, 102, 76, 244, 189, 119, 124, 158, 190, 210, 16, 13, 191, 105, 240, 105, 62, 148, 51, 70, 190, 126, 65, 197, 62, 51, 173, 109, 190, 246, 177, 79, 62, 155, 131, 55, 190, 163, 19, 30, 62, 222, 254, 116, 61, 23, 171, 143, 190, 89, 238, 235, 61, 94, 34, 177, 61, 225, 202, 0, 62, 39, 141, 27, 62, 242, 80, 91, 190, 188, 35, 39, 62, 74, 156, 48, 62, 218, 124, 6, 189, 175, 187, 234, 62, 59, 194, 176, 62, 91, 194, 210, 190, 125, 226, 109, 61, 209, 219, 212, 61, 91, 11, 184, 61, 239, 70, 242, 189, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 164, 237, 95, 62, 146, 252, 31, 190, 120, 176, 151, 191, 172, 122, 57, 62, 201, 102, 78, 191, 165, 168, 11, 191, 28, 90, 33, 191, 83, 5, 133, 62, 139, 113, 149, 190, 181, 33, 91, 62, 190, 46, 128, 190, 119, 75, 113, 62, 23, 244, 170, 190, 104, 69, 156, 60, 22, 7, 14, 188, 163, 43, 217, 190, 61, 220, 206, 61, 130, 177, 183, 190, 229, 232, 211, 190, 70, 134, 32, 190, 199, 231, 150, 189, 244, 219, 153, 62, 111, 209, 155, 62, 178, 209, 46, 191, 104, 52, 153, 62, 123, 68, 95, 62, 217, 22, 122, 190, 15, 110, 8, 62, 195, 150, 30, 191, 128, 224, 173, 190, 138, 143, 151, 189, 110, 149, 38, 62, 149, 140, 171, 61, 222, 171, 64, 189, 75, 213, 24, 62, 191, 183, 251, 190, 253, 25, 118, 62, 210, 70, 152, 61, 152, 73, 35, 62, 207, 10, 186, 190, 163, 219, 109, 62, 52, 82, 14, 62, 247, 117, 153, 62, 219, 219, 167, 190, 134, 204, 156, 189, 114, 44, 25, 191, 250, 173, 141, 61, 93, 238, 194, 62, 134, 159, 2, 62, 49, 41, 107, 61, 165, 115, 78, 191, 80, 5, 132, 61, 157, 245, 71, 62, 67, 225, 27, 62, 27, 172, 115, 189, 139, 134, 162, 190, 8, 157, 8, 62, 237, 51, 190, 189, 127, 233, 59, 190, 67, 171, 51, 191, 32, 190, 43, 62, 248, 224, 9, 63, 204, 190, 129, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 94, 119, 195, 189, 223, 238, 131, 189, 91, 149, 189, 61, 188, 59, 194, 61, 65, 222, 132, 189, 255, 30, 32, 190, 205, 133, 226, 189, 129, 189, 152, 61, 249, 76, 159, 61, 29, 61, 15, 62, 159, 196, 27, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 7, 124, 121, 188, 135, 59, 86, 62, 175, 167, 224, 189, 229, 6, 50, 62, 249, 185, 45, 191, 60, 80, 69, 190, 96, 47, 159, 62, 50, 43, 254, 190, 192, 51, 50, 191, 138, 74, 2, 191, 245, 199, 38, 60, 254, 198, 90, 62, 82, 32, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 111, 111, 213, 60, 147, 53, 224, 190, 175, 191, 229, 61, 243, 22, 168, 60, 248, 162, 152, 62, 190, 172, 175, 60, 103, 115, 160, 61, 163, 154, 43, 191, 83, 121, 183, 62, 179, 240, 63, 190, 223, 210, 180, 62, 243, 142, 118, 189, 24, 135, 236, 188, 119, 171, 24, 62, 46, 107, 109, 189, 71, 208, 34, 62, 233, 169, 176, 189, 236, 90, 43, 62, 87, 197, 183, 61, 149, 173, 213, 188, 47, 104, 69, 189, 231, 150, 97, 62, 223, 109, 64, 190, 13, 82, 106, 189, 237, 97, 222, 189, 11, 0, 65, 62, 12, 207, 100, 61, 234, 212, 217, 190, 1, 48, 241, 189, 200, 64, 7, 62, 183, 111, 1, 190, 207, 128, 149, 62, 146, 197, 107, 190, 9, 130, 245, 60, 148, 103, 16, 190, 95, 205, 93, 61, 104, 22, 164, 190, 193, 175, 212, 59, 44, 54, 144, 61, 204, 70, 43, 61, 151, 133, 129, 190, 158, 102, 184, 61, 141, 108, 148, 61, 229, 71, 32, 59, 155, 31, 105, 191, 56, 165, 227, 189, 184, 30, 4, 191, 69, 217, 13, 62, 65, 74, 187, 61, 132, 100, 156, 61, 206, 147, 167, 62, 96, 29, 100, 191, 4, 227, 21, 190, 141, 83, 50, 189, 61, 223, 176, 189, 16, 50, 82, 59, 32, 84, 201, 61, 11, 178, 154, 62, 195, 147, 195, 61, 204, 166, 68, 190, 142, 200, 62, 191, 35, 181, 159, 61, 145, 247, 101, 62, 186, 138, 173, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 139, 61, 166, 189, 136, 221, 165, 190, 156, 245, 121, 190, 252, 238, 15, 61, 145, 10, 156, 61, 250, 19, 64, 190, 77, 19, 175, 189, 212, 1, 84, 190, 218, 238, 140, 189, 143, 238, 63, 61, 75, 198, 239, 61, 160, 68, 203, 190, 78, 187, 242, 61, 189, 175, 1, 62, 232, 104, 140, 62, 31, 252, 204, 189, 250, 105, 144, 189, 100, 187, 191, 189, 48, 228, 49, 190, 44, 79, 74, 191, 42, 28, 231, 189, 102, 231, 27, 62, 32, 54, 101, 62, 152, 54, 195, 61, 146, 83, 88, 191, 200, 149, 20, 62, 175, 0, 70, 61, 148, 42, 232, 190, 145, 170, 146, 62, 124, 36, 132, 190, 193, 218, 206, 189, 225, 41, 12, 190, 237, 23, 72, 190, 28, 150, 26, 62, 115, 183, 204, 61, 217, 148, 172, 189, 81, 72, 51, 62, 73, 0, 124, 189, 213, 197, 50, 190, 162, 255, 11, 190, 26, 25, 36, 190, 81, 25, 46, 187, 68, 241, 7, 190, 35, 155, 183, 60, 118, 217, 66, 61, 190, 182, 102, 189, 173, 49, 34, 189, 47, 54, 116, 61, 31, 8, 161, 61, 92, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 221, 248, 13, 190, 25, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 94, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 82, 39, 154, 61, 35, 74, 186, 189, 147, 129, 184, 190, 81, 177, 191, 190, 136, 82, 118, 189, 35, 28, 163, 189, 86, 125, 157, 62, 72, 210, 198, 62, 53, 132, 184, 189, 246, 105, 147, 189, 96, 88, 223, 189, 134, 252, 234, 60, 207, 23, 175, 190, 2, 137, 48, 190, 193, 211, 244, 62, 139, 83, 2, 190, 56, 37, 74, 190, 105, 206, 255, 189, 254, 195, 8, 189, 183, 139, 5, 63, 176, 20, 181, 187, 18, 139, 45, 62, 123, 19, 100, 60, 205, 61, 136, 189, 50, 218, 191, 61, 101, 84, 42, 189, 195, 88, 9, 189, 118, 39, 211, 61, 7, 38, 231, 62, 114, 117, 149, 190, 171, 61, 47, 62, 38, 134, 153, 62, 223, 241, 227, 62, 11, 60, 87, 191, 148, 205, 8, 191, 0, 3, 125, 189, 124, 110, 27, 190, 24, 0, 42, 191, 204, 105, 177, 189, 254, 25, 144, 189, 92, 75, 2, 62, 33, 197, 144, 190, 69, 110, 243, 189, 160, 92, 17, 60, 156, 73, 178, 190, 127, 172, 37, 191, 106, 238, 150, 62, 119, 69, 30, 191, 54, 21, 22, 62, 43, 20, 124, 190, 14, 165, 236, 61, 197, 142, 202, 190, 80, 223, 135, 189, 240, 231, 233, 62, 54, 146, 0, 190, 156, 241, 65, 62, 18, 173, 100, 62, 255, 162, 83, 190, 154, 138, 227, 62, 102, 118, 197, 190, 156, 113, 199, 190, 177, 188, 228, 190, 37, 10, 39, 189, 39, 158, 251, 62, 235, 222, 140, 62, 68, 71, 84, 190, 165, 233, 30, 62, 239, 158, 118, 190, 38, 95, 11, 191, 205, 181, 46, 188, 105, 191, 113, 191, 33, 180, 62, 191, 172, 145, 101, 62, 84, 36, 63, 190, 58, 190, 144, 62, 0, 83, 9, 190, 108, 6, 99, 190, 14, 190, 106, 62, 46, 73, 115, 190, 93, 65, 139, 62, 60, 119, 62, 62, 58, 78, 169, 62, 25, 17, 124, 190, 52, 246, 211, 188, 0, 180, 210, 190, 163, 135, 21, 61, 53, 7, 176, 190, 194, 19, 159, 62, 243, 10, 59, 61, 13, 119, 168, 190, 239, 255, 169, 189, 252, 34, 121, 62, 126, 192, 7, 190, 81, 234, 149, 61, 195, 70, 224, 189, 35, 244, 140, 189, 247, 24, 193, 190, 119, 184, 203, 190, 142, 80, 188, 188, 177, 84, 211, 61, 135, 184, 244, 61, 94, 112, 69, 191, 12, 170, 138, 59, 232, 220, 168, 61, 175, 204, 227, 61, 246, 198, 32, 190, 100, 124, 51, 61, 195, 100, 2, 191, 155, 23, 137, 59, 173, 77, 46, 190, 205, 45, 101, 191, 217, 144, 150, 188, 69, 109, 111, 62, 68, 149, 239, 61, 82, 74, 51, 62, 7, 230, 183, 62, 190, 69, 29, 191, 85, 51, 218, 62, 50, 220, 248, 190, 112, 217, 14, 62, 76, 220, 203, 190, 203, 26, 43, 62, 255, 153, 94, 190, 202, 76, 26, 191, 170, 152, 173, 62, 23, 93, 108, 61, 156, 44, 71, 190, 66, 208, 140, 61, 107, 60, 17, 191, 203, 2, 75, 191, 201, 66, 42, 62, 182, 194, 45, 62, 236, 53, 48, 188, 155, 79, 62, 189, 15, 122, 69, 191, 1, 36, 110, 191, 140, 238, 200, 62, 144, 219, 213, 59, 150, 163, 222, 62, 160, 5, 122, 190, 197, 95, 8, 62, 203, 239, 151, 189, 91, 120, 146, 191, 50, 47, 160, 62, 219, 219, 133, 189, 124, 69, 66, 62, 70, 9, 203, 188, 161, 242, 1, 62, 250, 179, 8, 63, 16, 15, 39, 191, 246, 211, 39, 191, 74, 124, 3, 191, 115, 215, 143, 61, 28, 180, 215, 62, 32, 47, 104, 190, 240, 186, 119, 188, 217, 46, 211, 61, 73, 19, 163, 61, 185, 139, 20, 62, 221, 118, 246, 189, 114, 33, 163, 191, 100, 2, 1, 191, 72, 235, 42, 191, 216, 176, 141, 190, 189, 14, 39, 190, 105, 246, 254, 60, 118, 106, 140, 62, 119, 104, 163, 189, 48, 106, 35, 62, 169, 147, 22, 62, 51, 15, 25, 188, 112, 88, 217, 60, 82, 179, 208, 190, 2, 46, 150, 190, 56, 110, 114, 189, 106, 197, 6, 191, 90, 27, 9, 62, 115, 185, 86, 189, 29, 74, 231, 189, 244, 1, 158, 62, 38, 122, 221, 189, 189, 72, 171, 61, 215, 63, 16, 190, 42, 24, 26, 62, 36, 41, 172, 190, 118, 95, 17, 190, 162, 19, 140, 62, 144, 22, 170, 62, 206, 151, 72, 62, 196, 53, 26, 191, 165, 31, 66, 61, 61, 249, 192, 189, 141, 118, 1, 63, 250, 230, 135, 190, 178, 14, 222, 188, 193, 37, 195, 62, 74, 181, 167, 61, 20, 222, 0, 191, 93, 138, 72, 62, 211, 180, 18, 187, 1, 63, 200, 188, 152, 90, 75, 189, 189, 242, 23, 62, 48, 189, 176, 190, 14, 154, 240, 62, 41, 192, 56, 190, 153, 36, 121, 187, 109, 9, 53, 62, 225, 106, 159, 190, 100, 25, 170, 62, 152, 211, 167, 62, 64, 44, 60, 62, 15, 141, 61, 60, 29, 160, 169, 62, 7, 24, 228, 190, 88, 108, 88, 62, 104, 211, 154, 190, 116, 3, 135, 62, 236, 179, 88, 190, 229, 106, 18, 191, 144, 179, 229, 62, 57, 79, 148, 62, 52, 46, 167, 60, 52, 226, 60, 62, 194, 190, 224, 190, 200, 155, 44, 191, 207, 225, 42, 62, 186, 50, 151, 62, 72, 60, 1, 62, 167, 212, 41, 191, 206, 154, 133, 62, 67, 63, 235, 61, 114, 209, 161, 60, 93, 168, 243, 190, 145, 31, 25, 62, 80, 193, 240, 190, 13, 50, 218, 61, 98, 11, 170, 186, 127, 99, 63, 191, 6, 28, 3, 62, 178, 231, 232, 61, 24, 56, 99, 189, 250, 8, 41, 63, 107, 191, 106, 188, 166, 141, 173, 190, 95, 186, 63, 63, 176, 197, 18, 191, 82, 103, 87, 189, 217, 65, 206, 190, 79, 210, 69, 62, 37, 69, 125, 191, 226, 66, 160, 190, 5, 137, 7, 63, 175, 134, 34, 62, 163, 213, 201, 190, 101, 145, 107, 190, 234, 244, 129, 191, 209, 219, 68, 190, 15, 81, 172, 61, 47, 185, 156, 190, 126, 90, 160, 190, 208, 210, 253, 188, 72, 77, 229, 60, 118, 135, 143, 190, 135, 204, 150, 188, 32, 52, 98, 62, 222, 239, 65, 188, 153, 57, 178, 62, 230, 104, 124, 190, 233, 98, 29, 62, 43, 213, 169, 187, 166, 41, 12, 62, 129, 10, 118, 189, 181, 157, 0, 189, 138, 190, 61, 190, 13, 63, 146, 62, 91, 112, 124, 190, 141, 132, 61, 190, 248, 116, 201, 61, 142, 6, 102, 61, 232, 226, 166, 188, 110, 193, 20, 62, 21, 177, 31, 61, 161, 195, 198, 188, 214, 119, 122, 62, 224, 1, 24, 190, 141, 240, 176, 59, 144, 85, 43, 190, 2, 149, 13, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 54, 13, 62, 236, 127, 240, 60, 133, 190, 42, 62, 53, 197, 195, 61, 50, 215, 146, 62, 128, 29, 176, 61, 134, 162, 153, 189, 56, 222, 238, 61, 86, 135, 66, 190, 82, 56, 116, 61, 250, 102, 54, 62, 11, 134, 11, 189, 22, 75, 230, 61, 220, 202, 58, 189, 139, 84, 159, 62, 227, 199, 164, 60, 195, 142, 113, 190, 44, 63, 185, 189, 180, 40, 59, 190, 245, 113, 160, 59, 222, 228, 154, 61, 18, 158, 36, 189, 49, 203, 78, 190, 58, 130, 86, 62, 150, 71, 77, 62, 69, 115, 192, 61, 225, 17, 126, 62, 110, 210, 129, 190, 102, 134, 1, 190, 127, 149, 6, 189, 122, 227, 71, 60, 199, 73, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 58, 228, 61, 5, 10, 154, 62, 217, 221, 49, 191, 147, 241, 106, 190, 76, 248, 13, 190, 52, 145, 37, 63, 39, 186, 152, 188, 96, 40, 244, 189, 160, 101, 235, 61, 251, 56, 148, 190, 105, 100, 103, 63, 222, 32, 229, 188, 170, 42, 234, 190, 58, 207, 70, 61, 78, 71, 142, 63, 34, 31, 196, 62, 17, 99, 84, 63, 226, 37, 203, 189, 157, 193, 10, 190, 196, 162, 37, 62, 175, 47, 242, 188, 184, 57, 59, 191, 194, 22, 52, 61, 116, 72, 229, 62, 220, 89, 71, 63, 151, 130, 66, 63, 5, 130, 26, 191, 225, 80, 20, 63, 41, 248, 190, 62, 17, 188, 231, 190, 110, 168, 60, 191, 174, 122, 7, 61, 248, 204, 60, 191, 243, 50, 89, 190, 234, 100, 47, 188, 98, 171, 158, 190, 147, 165, 133, 190, 140, 126, 80, 190, 58, 52, 185, 61, 52, 162, 45, 190, 195, 239, 146, 189, 219, 176, 35, 190, 61, 221, 201, 189, 231, 222, 36, 190, 47, 165, 91, 61, 152, 147, 60, 60, 224, 163, 39, 62, 107, 172, 13, 61, 97, 185, 240, 60, 134, 107, 45, 190, 133, 63, 135, 62, 156, 225, 43, 61, 241, 219, 156, 61, 244, 254, 152, 188, 105, 103, 34, 62, 133, 56, 52, 62, 167, 144, 18, 61, 218, 236, 52, 62, 153, 193, 42, 190, 100, 176, 84, 62, 2, 230, 231, 61, 153, 50, 194, 189, 133, 82, 147, 62, 109, 163, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 115, 212, 187, 193, 209, 87, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {212, 5, 215, 191, 248, 227, 171, 191, 98, 72, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {5, 77, 110, 192, 36, 156, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}