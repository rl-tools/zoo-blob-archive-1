// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 139, 70, 63, 166, 187, 120, 190, 230, 108, 123, 190, 29, 127, 187, 190, 165, 135, 177, 190, 79, 118, 212, 190, 163, 53, 164, 190, 102, 228, 148, 191, 212, 121, 40, 190, 24, 81, 105, 62, 87, 80, 88, 191, 161, 247, 196, 190, 232, 173, 73, 191, 219, 60, 149, 63, 204, 37, 200, 62, 164, 39, 243, 62, 190, 95, 143, 191, 21, 209, 8, 191, 118, 77, 174, 62, 179, 173, 63, 191, 244, 153, 156, 190, 148, 198, 131, 62, 193, 55, 51, 63, 118, 32, 132, 189, 33, 244, 99, 190, 20, 100, 156, 61, 90, 150, 189, 62, 166, 204, 8, 190, 45, 31, 178, 188, 222, 241, 23, 191, 127, 194, 147, 190, 0, 194, 238, 189, 81, 146, 219, 62, 69, 226, 194, 188, 224, 14, 129, 190, 59, 163, 250, 190, 36, 13, 95, 191, 43, 137, 34, 63, 178, 162, 79, 62, 161, 129, 60, 63, 94, 101, 132, 191, 224, 21, 66, 190, 38, 25, 158, 190, 251, 127, 130, 63, 85, 178, 95, 62, 174, 185, 156, 190, 251, 115, 40, 191, 6, 32, 174, 61, 149, 228, 44, 62, 134, 68, 132, 189, 70, 224, 225, 190, 176, 131, 156, 190, 136, 174, 184, 191, 77, 117, 79, 190, 139, 18, 251, 62, 98, 22, 202, 62, 202, 77, 44, 62, 130, 12, 138, 61, 63, 16, 228, 63, 204, 116, 252, 62, 16, 220, 212, 188, 200, 136, 157, 191, 97, 92, 151, 189, 167, 242, 27, 63, 24, 12, 86, 191, 145, 4, 236, 190, 23, 241, 191, 190, 53, 24, 203, 190, 8, 78, 6, 190, 10, 156, 98, 191, 197, 128, 214, 62, 77, 232, 106, 62, 205, 226, 38, 63, 32, 158, 184, 63, 144, 119, 104, 62, 51, 20, 201, 61, 140, 246, 138, 191, 136, 129, 136, 62, 100, 59, 56, 191, 155, 31, 55, 190, 245, 104, 194, 62, 220, 127, 99, 63, 63, 54, 91, 62, 173, 216, 121, 187, 125, 196, 182, 190, 120, 59, 93, 63, 43, 170, 42, 62, 189, 243, 172, 62, 208, 181, 158, 190, 181, 52, 34, 63, 90, 187, 145, 62, 138, 25, 125, 191, 100, 54, 132, 62, 72, 218, 62, 63, 202, 116, 122, 191, 202, 206, 102, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 213, 52, 191, 34, 36, 91, 188, 217, 110, 39, 190, 251, 134, 171, 190, 99, 205, 171, 62, 125, 230, 219, 61, 40, 113, 128, 61, 161, 116, 188, 188, 218, 62, 157, 61, 138, 207, 135, 62, 199, 235, 130, 190, 241, 102, 62, 191, 134, 172, 24, 63, 45, 112, 164, 190, 251, 139, 2, 63, 98, 109, 126, 189, 22, 154, 192, 62, 109, 8, 22, 190, 82, 104, 162, 62, 182, 147, 36, 190, 173, 116, 204, 60, 173, 204, 211, 190, 191, 32, 58, 63, 50, 212, 26, 63, 163, 136, 133, 188, 105, 199, 105, 61, 104, 181, 227, 190, 139, 15, 165, 61, 153, 48, 8, 63, 199, 154, 201, 190, 189, 24, 128, 62, 94, 80, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 71, 19, 191, 255, 186, 252, 61, 245, 117, 207, 190, 246, 32, 160, 189, 189, 127, 179, 190, 166, 114, 131, 60, 237, 239, 244, 187, 96, 94, 132, 62, 4, 26, 200, 190, 132, 43, 130, 59, 88, 41, 218, 59, 83, 94, 205, 61, 57, 187, 11, 191, 144, 31, 233, 190, 62, 182, 130, 190, 95, 61, 232, 189, 105, 83, 60, 62, 55, 104, 179, 189, 9, 14, 240, 62, 214, 89, 46, 192, 175, 117, 207, 190, 252, 136, 72, 190, 65, 176, 147, 61, 217, 87, 14, 191, 36, 219, 203, 62, 141, 175, 28, 62, 27, 239, 98, 189, 95, 119, 133, 62, 102, 238, 193, 190, 130, 46, 29, 63, 168, 192, 230, 61, 253, 199, 48, 190, 239, 104, 185, 189, 160, 63, 37, 63, 148, 161, 63, 188, 122, 175, 235, 190, 254, 146, 169, 62, 100, 185, 38, 191, 19, 151, 133, 191, 127, 76, 21, 63, 91, 77, 124, 62, 69, 179, 91, 62, 93, 115, 49, 62, 8, 95, 120, 190, 147, 11, 137, 62, 110, 62, 50, 191, 73, 175, 58, 62, 79, 214, 203, 61, 97, 148, 73, 62, 221, 200, 6, 190, 252, 78, 34, 62, 229, 27, 43, 190, 55, 96, 128, 190, 162, 93, 163, 191, 104, 150, 243, 189, 201, 140, 25, 190, 144, 21, 138, 61, 115, 88, 66, 62, 212, 28, 159, 61, 122, 148, 160, 190, 135, 201, 36, 62, 55, 218, 141, 190, 183, 116, 150, 190, 107, 138, 240, 190, 96, 74, 192, 190, 33, 223, 30, 61, 60, 246, 48, 189, 118, 43, 246, 189, 184, 122, 138, 190, 2, 70, 48, 189, 93, 32, 63, 187, 23, 179, 140, 62, 180, 112, 124, 189, 158, 28, 112, 62, 85, 223, 80, 190, 225, 17, 233, 61, 202, 188, 129, 190, 73, 91, 92, 191, 240, 74, 33, 62, 53, 109, 204, 190, 47, 253, 179, 61, 118, 62, 128, 190, 90, 80, 19, 62, 233, 239, 94, 189, 211, 248, 33, 191, 128, 156, 223, 190, 61, 31, 50, 62, 230, 195, 187, 190, 138, 139, 173, 61, 208, 179, 187, 61, 135, 184, 217, 190, 179, 196, 180, 62, 227, 47, 62, 62, 226, 109, 160, 62, 208, 124, 202, 62, 248, 230, 35, 191, 176, 209, 179, 61, 173, 224, 7, 62, 253, 119, 146, 62, 95, 86, 120, 188, 69, 70, 101, 190, 2, 3, 66, 62, 86, 230, 72, 189, 119, 76, 26, 62, 87, 32, 44, 62, 189, 203, 168, 189, 115, 53, 149, 62, 210, 82, 22, 190, 144, 23, 76, 191, 210, 84, 13, 189, 130, 105, 5, 62, 53, 198, 103, 190, 165, 169, 192, 189, 178, 109, 47, 63, 54, 217, 205, 62, 139, 12, 55, 190, 153, 64, 9, 63, 67, 160, 170, 61, 105, 31, 246, 189, 48, 177, 219, 190, 195, 84, 189, 62, 27, 40, 13, 62, 135, 252, 33, 60, 241, 61, 175, 62, 253, 44, 113, 189, 139, 248, 196, 62, 206, 229, 66, 62, 32, 142, 82, 62, 173, 195, 9, 191, 23, 180, 187, 187, 29, 225, 22, 190, 165, 221, 12, 61, 14, 55, 248, 61, 91, 13, 101, 61, 82, 249, 121, 61, 41, 117, 6, 190, 215, 87, 129, 188, 193, 19, 161, 189, 162, 184, 248, 189, 69, 143, 42, 61, 202, 79, 97, 62, 99, 53, 211, 190, 74, 9, 167, 62, 166, 101, 54, 62, 114, 40, 34, 62, 11, 2, 54, 62, 95, 243, 153, 62, 22, 23, 194, 61, 210, 66, 174, 61, 129, 46, 98, 190, 25, 208, 237, 61, 223, 96, 7, 60, 10, 32, 247, 61, 9, 160, 148, 61, 125, 199, 3, 190, 172, 60, 7, 188, 18, 59, 7, 62, 186, 208, 142, 61, 149, 115, 14, 190, 128, 223, 191, 190, 128, 60, 170, 189, 13, 244, 28, 61, 77, 214, 167, 191, 73, 240, 148, 62, 99, 102, 143, 189, 128, 232, 219, 189, 69, 2, 220, 61, 47, 149, 116, 62, 230, 108, 198, 191, 208, 0, 92, 62, 4, 11, 70, 190, 161, 44, 196, 60, 243, 74, 168, 191, 1, 163, 189, 60, 57, 30, 203, 190, 118, 109, 153, 189, 17, 80, 102, 62, 186, 155, 153, 191, 38, 27, 219, 62, 54, 216, 56, 192, 185, 97, 25, 191, 156, 153, 219, 60, 56, 22, 250, 189, 104, 208, 148, 191, 249, 72, 36, 62, 125, 184, 123, 60, 200, 57, 199, 189, 169, 62, 82, 62, 149, 210, 67, 191, 218, 24, 211, 190, 150, 52, 221, 62, 180, 66, 212, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 75, 175, 235, 190, 153, 49, 11, 190, 126, 114, 30, 189, 154, 35, 117, 190, 65, 81, 208, 60, 145, 39, 192, 60, 151, 78, 169, 58, 83, 251, 10, 61, 25, 60, 97, 189, 187, 130, 180, 61, 238, 61, 255, 188, 252, 5, 22, 188, 128, 70, 218, 61, 118, 149, 200, 190, 154, 39, 5, 61, 52, 241, 22, 62, 103, 3, 46, 62, 40, 175, 144, 190, 39, 25, 195, 60, 42, 131, 7, 188, 173, 229, 71, 62, 68, 139, 100, 190, 131, 58, 70, 62, 33, 43, 3, 61, 202, 115, 179, 61, 150, 98, 104, 190, 135, 35, 139, 60, 89, 55, 50, 188, 70, 246, 55, 61, 18, 73, 177, 61, 31, 157, 69, 62, 244, 172, 248, 190, 80, 224, 20, 190, 36, 26, 13, 190, 104, 168, 224, 189, 75, 209, 12, 62, 67, 143, 145, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 47, 29, 53, 61, 157, 36, 226, 189, 21, 10, 212, 61, 39, 205, 201, 186, 44, 108, 190, 61, 190, 222, 222, 188, 71, 19, 35, 190, 86, 138, 61, 188, 228, 252, 104, 189, 124, 31, 26, 190, 32, 138, 132, 189, 6, 79, 31, 190, 119, 207, 202, 61, 99, 149, 20, 190, 72, 83, 49, 61, 216, 128, 237, 61, 88, 111, 44, 190, 238, 146, 50, 190, 216, 21, 52, 190, 140, 236, 150, 61, 215, 12, 19, 60, 243, 33, 193, 189, 139, 131, 227, 189, 162, 102, 180, 189, 122, 49, 45, 191, 222, 131, 249, 61, 45, 82, 82, 62, 82, 189, 169, 189, 78, 201, 191, 188, 173, 235, 61, 61, 220, 153, 32, 62, 13, 73, 11, 62, 114, 149, 138, 188, 201, 67, 200, 189, 56, 117, 94, 188, 120, 81, 3, 62, 4, 64, 150, 61, 123, 23, 247, 190, 149, 181, 242, 186, 14, 242, 50, 61, 227, 112, 25, 62, 232, 93, 67, 62, 150, 57, 52, 62, 219, 125, 22, 62, 186, 212, 25, 62, 68, 69, 170, 190, 202, 247, 119, 62, 169, 87, 151, 61, 131, 193, 54, 62, 127, 146, 152, 189, 62, 143, 39, 189, 140, 198, 82, 62, 87, 170, 169, 62, 83, 80, 226, 61, 71, 2, 134, 61, 59, 83, 37, 191, 31, 141, 31, 62, 211, 252, 158, 62, 46, 0, 112, 61, 58, 176, 160, 191, 222, 62, 104, 62, 247, 142, 37, 191, 226, 17, 237, 190, 26, 231, 203, 61, 3, 57, 67, 62, 251, 113, 198, 190, 23, 19, 12, 63, 208, 66, 160, 190, 133, 24, 75, 62, 77, 31, 55, 191, 7, 160, 139, 61, 37, 160, 134, 62, 124, 103, 13, 191, 250, 138, 21, 190, 193, 70, 208, 189, 149, 47, 29, 191, 140, 157, 137, 189, 164, 45, 169, 190, 159, 251, 147, 62, 53, 176, 62, 62, 79, 222, 53, 191, 134, 145, 28, 63, 91, 81, 7, 63, 87, 209, 202, 189, 105, 244, 222, 61, 206, 142, 198, 190, 153, 56, 210, 188, 225, 22, 166, 60, 99, 19, 8, 189, 1, 241, 122, 60, 227, 33, 254, 60, 99, 210, 69, 187, 197, 241, 196, 189, 182, 71, 62, 190, 7, 188, 209, 61, 93, 72, 19, 190, 41, 200, 20, 61, 248, 148, 254, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 233, 222, 190, 189, 120, 228, 4, 189, 25, 187, 190, 189, 47, 194, 239, 60, 157, 124, 175, 189, 41, 14, 96, 61, 10, 92, 153, 189, 199, 223, 156, 61, 138, 12, 91, 61, 4, 127, 156, 61, 240, 14, 184, 189, 78, 63, 156, 189, 199, 136, 40, 190, 240, 177, 35, 62, 100, 180, 98, 61, 28, 204, 231, 189, 123, 195, 199, 189, 216, 80, 153, 61, 143, 231, 224, 61, 22, 189, 245, 60, 235, 96, 137, 62, 68, 165, 193, 61, 137, 24, 160, 190, 170, 248, 143, 62, 91, 209, 134, 189, 221, 187, 155, 190, 80, 10, 17, 191, 117, 152, 126, 62, 129, 69, 48, 190, 227, 163, 206, 62, 81, 236, 66, 190, 19, 9, 81, 62, 32, 170, 96, 190, 222, 6, 47, 62, 187, 169, 93, 61, 50, 50, 131, 190, 159, 160, 110, 62, 5, 163, 18, 62, 191, 162, 24, 62, 235, 226, 94, 62, 154, 22, 125, 190, 7, 7, 77, 62, 71, 137, 54, 62, 49, 40, 236, 60, 15, 18, 241, 62, 175, 190, 191, 62, 47, 166, 208, 190, 183, 52, 139, 61, 160, 146, 3, 62, 176, 242, 237, 61, 244, 228, 17, 190, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 224, 10, 49, 190, 243, 255, 225, 188, 238, 67, 49, 190, 101, 65, 226, 189, 204, 197, 39, 189, 136, 178, 123, 189, 8, 19, 20, 190, 10, 106, 253, 188, 70, 170, 17, 62, 254, 213, 89, 61, 216, 118, 75, 189, 39, 224, 9, 190, 219, 101, 183, 188, 193, 184, 238, 189, 251, 92, 5, 190, 153, 238, 247, 61, 117, 167, 36, 190, 146, 10, 131, 61, 9, 147, 151, 189, 106, 244, 4, 62, 255, 1, 21, 60, 11, 102, 131, 187, 27, 155, 207, 61, 83, 173, 11, 190, 213, 243, 249, 189, 51, 57, 140, 189, 198, 124, 238, 188, 21, 26, 4, 62, 123, 150, 157, 62, 15, 185, 73, 188, 72, 60, 128, 191, 107, 37, 58, 62, 97, 161, 20, 191, 92, 188, 149, 190, 110, 105, 40, 191, 1, 38, 129, 62, 177, 75, 156, 190, 89, 112, 85, 62, 48, 127, 195, 190, 91, 186, 123, 62, 5, 4, 209, 190, 174, 247, 41, 60, 145, 62, 96, 60, 190, 112, 239, 190, 66, 43, 37, 62, 210, 194, 203, 190, 90, 12, 207, 190, 204, 8, 30, 190, 121, 227, 103, 189, 238, 21, 166, 62, 23, 107, 160, 62, 12, 193, 60, 191, 34, 214, 158, 62, 134, 79, 104, 62, 107, 195, 7, 191, 77, 38, 4, 62, 140, 2, 30, 191, 249, 218, 167, 190, 153, 91, 205, 189, 166, 155, 69, 61, 242, 248, 198, 61, 242, 166, 24, 189, 123, 76, 33, 62, 232, 243, 29, 191, 71, 164, 136, 62, 112, 156, 183, 61, 80, 214, 45, 62, 183, 37, 9, 191, 159, 86, 116, 62, 157, 192, 174, 60, 117, 134, 154, 62, 67, 112, 52, 190, 44, 55, 130, 189, 75, 1, 13, 191, 71, 184, 34, 189, 151, 56, 204, 62, 23, 85, 8, 62, 26, 189, 154, 61, 129, 206, 215, 191, 145, 75, 157, 60, 234, 220, 40, 62, 149, 253, 81, 62, 6, 214, 20, 190, 111, 5, 146, 190, 194, 118, 112, 61, 149, 45, 127, 190, 138, 17, 27, 190, 41, 145, 36, 191, 57, 159, 183, 60, 93, 109, 11, 63, 73, 174, 134, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 107, 204, 235, 189, 223, 238, 131, 189, 91, 149, 189, 61, 47, 31, 150, 61, 35, 243, 169, 189, 255, 30, 32, 190, 192, 110, 252, 189, 129, 189, 152, 61, 167, 108, 113, 61, 29, 61, 15, 62, 115, 235, 51, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 137, 149, 45, 189, 15, 202, 61, 62, 175, 167, 224, 189, 229, 6, 50, 62, 208, 84, 46, 191, 89, 243, 87, 190, 57, 234, 146, 62, 50, 43, 254, 190, 192, 51, 50, 191, 26, 46, 7, 191, 42, 147, 62, 188, 81, 49, 75, 62, 27, 254, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 177, 213, 197, 62, 113, 200, 4, 191, 227, 175, 92, 62, 23, 158, 187, 61, 45, 39, 148, 62, 47, 78, 233, 61, 160, 172, 30, 62, 225, 156, 57, 191, 140, 254, 177, 62, 104, 234, 75, 190, 124, 212, 171, 62, 115, 251, 167, 61, 162, 80, 53, 189, 120, 176, 112, 62, 228, 54, 84, 189, 112, 12, 233, 61, 216, 57, 7, 189, 48, 238, 140, 62, 242, 226, 253, 61, 102, 75, 9, 189, 251, 8, 130, 59, 213, 111, 160, 62, 28, 78, 3, 190, 98, 179, 132, 189, 134, 156, 123, 189, 75, 41, 44, 62, 29, 49, 27, 61, 98, 173, 195, 190, 103, 64, 240, 189, 68, 58, 244, 61, 82, 238, 6, 190, 191, 32, 192, 62, 103, 218, 168, 190, 33, 4, 129, 60, 94, 58, 65, 190, 150, 206, 34, 61, 36, 168, 193, 190, 43, 146, 102, 60, 130, 4, 142, 61, 234, 158, 87, 61, 183, 130, 152, 190, 215, 170, 165, 61, 106, 246, 204, 61, 231, 190, 222, 187, 137, 87, 101, 191, 207, 239, 226, 189, 100, 73, 246, 190, 72, 108, 143, 61, 24, 109, 200, 61, 152, 170, 242, 60, 171, 13, 176, 62, 146, 211, 209, 191, 131, 191, 93, 190, 226, 197, 159, 189, 99, 134, 136, 189, 115, 169, 72, 190, 81, 70, 1, 62, 23, 169, 145, 62, 228, 79, 125, 61, 91, 209, 39, 190, 203, 168, 52, 191, 187, 169, 15, 61, 28, 78, 112, 62, 239, 234, 173, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 71, 148, 19, 190, 101, 33, 177, 190, 253, 154, 48, 190, 253, 244, 158, 189, 5, 208, 15, 62, 130, 7, 146, 190, 144, 159, 97, 190, 209, 173, 93, 189, 44, 113, 244, 189, 86, 75, 114, 61, 62, 163, 128, 60, 69, 36, 0, 191, 14, 86, 41, 62, 10, 23, 185, 61, 133, 11, 163, 62, 233, 222, 220, 189, 10, 163, 69, 189, 34, 89, 133, 189, 244, 254, 129, 190, 169, 212, 57, 191, 215, 200, 46, 190, 81, 165, 150, 61, 51, 171, 177, 62, 52, 154, 2, 62, 167, 3, 82, 191, 156, 137, 126, 60, 163, 145, 78, 184, 191, 81, 46, 191, 250, 13, 170, 62, 130, 123, 225, 190, 251, 86, 124, 190, 191, 148, 41, 190, 237, 23, 72, 190, 28, 150, 26, 62, 115, 183, 204, 61, 217, 148, 172, 189, 81, 72, 51, 62, 73, 0, 124, 189, 213, 197, 50, 190, 162, 255, 11, 190, 26, 25, 36, 190, 81, 25, 46, 187, 68, 241, 7, 190, 35, 155, 183, 60, 118, 217, 66, 61, 190, 182, 102, 189, 173, 49, 34, 189, 47, 54, 116, 61, 31, 8, 161, 61, 92, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 221, 248, 13, 190, 25, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 94, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 82, 39, 154, 61, 11, 209, 28, 190, 53, 164, 221, 190, 209, 221, 6, 191, 45, 77, 22, 190, 209, 217, 101, 189, 35, 105, 146, 62, 63, 201, 184, 62, 84, 134, 140, 189, 70, 125, 128, 189, 228, 153, 213, 189, 207, 0, 103, 61, 254, 210, 243, 190, 28, 30, 1, 190, 124, 98, 229, 62, 169, 252, 189, 189, 149, 167, 0, 190, 240, 165, 248, 189, 103, 176, 66, 190, 87, 200, 3, 63, 132, 51, 239, 189, 129, 222, 138, 61, 231, 192, 25, 189, 196, 11, 142, 189, 51, 190, 216, 61, 135, 171, 15, 189, 144, 94, 141, 187, 153, 102, 15, 62, 92, 139, 238, 62, 83, 86, 125, 190, 89, 56, 50, 62, 36, 143, 148, 62, 177, 205, 214, 62, 120, 4, 137, 191, 62, 205, 226, 190, 150, 49, 90, 189, 167, 100, 237, 189, 17, 94, 59, 191, 6, 18, 156, 189, 12, 248, 112, 189, 156, 26, 96, 189, 167, 0, 153, 190, 204, 92, 185, 189, 238, 151, 138, 187, 140, 211, 10, 191, 14, 87, 47, 191, 52, 226, 168, 62, 9, 178, 69, 191, 143, 21, 220, 61, 207, 64, 129, 190, 180, 51, 1, 62, 46, 56, 223, 190, 234, 247, 188, 60, 31, 252, 248, 62, 205, 24, 169, 189, 165, 33, 52, 62, 80, 147, 44, 62, 116, 52, 184, 190, 60, 199, 226, 62, 70, 19, 7, 191, 250, 104, 217, 190, 85, 160, 21, 191, 221, 188, 102, 189, 77, 217, 248, 62, 237, 187, 154, 62, 34, 126, 57, 190, 189, 79, 53, 62, 125, 124, 98, 189, 197, 61, 13, 191, 65, 25, 17, 60, 67, 214, 132, 191, 236, 58, 96, 191, 16, 255, 133, 62, 0, 156, 119, 190, 115, 173, 145, 62, 183, 2, 96, 190, 71, 47, 153, 190, 168, 218, 135, 62, 163, 190, 121, 190, 36, 137, 170, 62, 224, 244, 171, 61, 205, 15, 170, 62, 198, 64, 22, 190, 56, 133, 96, 61, 133, 144, 161, 190, 181, 188, 182, 59, 25, 186, 36, 191, 38, 64, 184, 62, 60, 83, 158, 61, 113, 129, 71, 190, 91, 136, 37, 190, 79, 254, 22, 62, 47, 5, 8, 190, 77, 52, 6, 62, 9, 68, 71, 190, 114, 168, 27, 190, 48, 187, 237, 190, 230, 135, 149, 190, 231, 80, 16, 189, 49, 129, 177, 61, 174, 104, 203, 61, 92, 191, 146, 191, 79, 236, 188, 59, 175, 51, 200, 61, 238, 141, 246, 61, 197, 37, 0, 62, 205, 161, 43, 61, 132, 108, 195, 190, 185, 86, 3, 188, 107, 212, 250, 190, 4, 67, 94, 191, 227, 146, 97, 189, 212, 121, 173, 62, 36, 113, 240, 61, 68, 130, 41, 62, 68, 81, 191, 62, 7, 108, 153, 190, 143, 25, 250, 62, 43, 222, 231, 190, 247, 217, 232, 61, 235, 11, 238, 190, 170, 162, 37, 62, 131, 115, 196, 189, 235, 111, 68, 191, 98, 148, 174, 62, 114, 213, 11, 60, 55, 234, 143, 61, 109, 167, 209, 61, 140, 143, 9, 191, 247, 148, 60, 191, 130, 135, 81, 62, 203, 98, 184, 62, 131, 56, 147, 60, 183, 28, 124, 189, 72, 80, 90, 191, 130, 135, 137, 191, 151, 216, 15, 63, 161, 66, 126, 188, 14, 183, 236, 62, 80, 136, 136, 190, 32, 238, 25, 62, 17, 203, 130, 189, 82, 248, 181, 191, 192, 159, 167, 62, 155, 205, 221, 60, 57, 212, 116, 62, 211, 69, 27, 62, 72, 159, 12, 62, 180, 42, 5, 63, 134, 130, 128, 190, 42, 93, 81, 191, 139, 166, 190, 190, 90, 172, 173, 61, 152, 95, 218, 62, 99, 34, 19, 190, 166, 151, 87, 189, 120, 242, 5, 62, 128, 39, 206, 61, 253, 83, 250, 61, 8, 200, 165, 189, 95, 144, 203, 191, 3, 62, 42, 191, 243, 192, 90, 191, 252, 104, 20, 191, 56, 116, 186, 190, 121, 191, 156, 59, 106, 227, 114, 62, 133, 236, 235, 189, 239, 197, 20, 62, 145, 82, 27, 62, 54, 65, 139, 189, 160, 72, 141, 61, 91, 41, 214, 190, 30, 133, 171, 190, 175, 216, 205, 189, 138, 3, 4, 191, 130, 51, 220, 61, 243, 167, 153, 189, 111, 158, 191, 190, 241, 230, 151, 62, 168, 127, 40, 191, 40, 237, 84, 188, 161, 178, 138, 190, 129, 153, 17, 62, 130, 226, 188, 190, 49, 25, 19, 190, 133, 160, 121, 62, 62, 113, 148, 62, 186, 222, 73, 62, 59, 229, 22, 191, 143, 57, 109, 61, 63, 90, 221, 189, 80, 144, 239, 62, 248, 35, 27, 190, 209, 77, 89, 189, 138, 213, 188, 62, 12, 144, 135, 61, 164, 82, 101, 191, 55, 138, 63, 62, 48, 40, 103, 59, 132, 2, 27, 189, 210, 143, 33, 188, 88, 73, 9, 62, 26, 110, 162, 190, 102, 208, 231, 62, 240, 151, 28, 191, 76, 106, 50, 60, 255, 255, 165, 61, 156, 200, 148, 190, 24, 214, 163, 62, 65, 153, 162, 62, 91, 71, 47, 62, 230, 119, 153, 61, 13, 100, 184, 62, 65, 124, 212, 190, 7, 229, 40, 62, 14, 49, 1, 191, 90, 70, 101, 62, 98, 26, 30, 190, 62, 114, 44, 191, 85, 165, 221, 62, 231, 162, 56, 62, 183, 38, 7, 62, 252, 172, 71, 62, 75, 76, 215, 190, 179, 49, 57, 191, 144, 110, 69, 62, 44, 239, 230, 62, 217, 90, 54, 62, 253, 224, 144, 191, 115, 188, 103, 62, 124, 216, 204, 61, 71, 41, 167, 60, 20, 218, 247, 190, 51, 94, 251, 61, 192, 68, 217, 190, 113, 107, 251, 61, 253, 6, 208, 190, 245, 192, 78, 191, 141, 71, 42, 62, 14, 184, 79, 62, 144, 206, 142, 189, 49, 70, 85, 63, 9, 9, 95, 59, 196, 28, 12, 189, 44, 9, 112, 63, 167, 166, 24, 191, 84, 98, 184, 189, 181, 51, 24, 191, 42, 6, 103, 62, 165, 201, 123, 191, 65, 60, 178, 190, 130, 6, 6, 63, 223, 59, 43, 62, 27, 190, 216, 189, 193, 70, 66, 190, 7, 160, 134, 191, 51, 48, 123, 190, 207, 42, 103, 60, 68, 202, 214, 190, 48, 108, 197, 190, 136, 100, 234, 188, 62, 212, 32, 189, 179, 247, 173, 190, 48, 221, 252, 188, 178, 198, 112, 62, 236, 70, 0, 185, 181, 122, 194, 62, 97, 52, 195, 190, 239, 205, 35, 62, 106, 238, 143, 189, 244, 151, 21, 62, 135, 79, 38, 189, 50, 251, 99, 189, 41, 198, 125, 190, 252, 98, 133, 62, 222, 45, 163, 190, 87, 155, 31, 190, 7, 24, 151, 188, 149, 89, 197, 60, 255, 249, 5, 188, 18, 225, 4, 62, 208, 140, 84, 60, 241, 68, 135, 187, 145, 230, 104, 62, 222, 136, 15, 190, 130, 189, 90, 61, 99, 215, 101, 190, 155, 209, 252, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 75, 40, 62, 31, 20, 172, 61, 201, 39, 24, 62, 238, 64, 211, 61, 57, 234, 136, 62, 68, 8, 166, 61, 134, 162, 153, 189, 56, 230, 160, 61, 86, 135, 66, 190, 141, 217, 50, 61, 149, 119, 71, 62, 235, 144, 69, 189, 196, 65, 23, 62, 194, 112, 158, 189, 114, 30, 151, 62, 123, 130, 66, 61, 143, 122, 131, 190, 44, 63, 185, 189, 219, 144, 22, 190, 156, 101, 167, 60, 222, 228, 154, 61, 120, 212, 219, 188, 49, 203, 78, 190, 74, 143, 87, 62, 211, 62, 43, 62, 13, 169, 25, 62, 131, 41, 129, 62, 143, 208, 41, 190, 204, 196, 14, 190, 150, 100, 91, 189, 26, 119, 201, 59, 107, 71, 156, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 118, 18, 62, 18, 130, 157, 62, 40, 239, 26, 191, 190, 248, 93, 190, 189, 218, 56, 189, 142, 65, 40, 63, 39, 186, 152, 188, 26, 40, 192, 59, 160, 101, 235, 61, 207, 153, 52, 190, 185, 41, 106, 63, 136, 204, 224, 188, 211, 36, 245, 190, 145, 91, 67, 61, 24, 59, 107, 63, 161, 7, 184, 62, 209, 67, 84, 63, 226, 37, 203, 189, 128, 106, 40, 190, 165, 158, 196, 61, 175, 47, 242, 188, 75, 145, 144, 191, 194, 22, 52, 61, 224, 217, 219, 62, 152, 134, 91, 63, 51, 58, 70, 63, 230, 171, 6, 191, 76, 52, 18, 63, 38, 208, 124, 62, 65, 102, 207, 190, 44, 46, 81, 191, 106, 255, 151, 60, 130, 93, 78, 191, 172, 183, 106, 190, 230, 224, 59, 189, 125, 176, 221, 190, 147, 107, 140, 190, 172, 164, 145, 190, 58, 52, 185, 61, 101, 28, 38, 190, 195, 239, 146, 189, 95, 126, 54, 190, 160, 196, 245, 189, 225, 211, 36, 190, 235, 47, 133, 60, 231, 29, 61, 60, 17, 29, 162, 62, 236, 65, 36, 60, 57, 44, 242, 60, 134, 107, 45, 190, 199, 144, 34, 62, 87, 85, 35, 61, 241, 219, 156, 61, 226, 98, 180, 61, 105, 103, 34, 62, 187, 251, 29, 61, 29, 57, 156, 61, 74, 149, 93, 62, 184, 23, 133, 190, 84, 220, 103, 62, 13, 176, 103, 62, 148, 25, 39, 190, 14, 182, 16, 63, 172, 254, 137, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 91, 201, 58, 138, 71, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 154, 231, 191, 38, 78, 180, 191, 168, 6, 164, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 173, 114, 64, 235, 244, 101, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}