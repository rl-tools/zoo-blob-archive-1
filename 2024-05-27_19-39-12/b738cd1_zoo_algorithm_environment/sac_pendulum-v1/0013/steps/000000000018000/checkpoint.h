// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 124, 71, 63, 178, 28, 105, 190, 127, 237, 122, 190, 28, 173, 121, 190, 220, 187, 156, 190, 35, 71, 235, 190, 173, 28, 136, 190, 68, 68, 142, 191, 190, 20, 72, 190, 1, 10, 96, 62, 143, 93, 88, 191, 176, 229, 198, 190, 135, 61, 54, 191, 12, 61, 151, 63, 109, 30, 223, 62, 72, 71, 6, 63, 228, 91, 150, 191, 3, 13, 1, 191, 40, 110, 198, 62, 218, 199, 77, 191, 111, 222, 138, 190, 219, 65, 213, 62, 159, 40, 42, 63, 67, 127, 239, 189, 2, 103, 67, 190, 97, 167, 61, 62, 229, 207, 182, 62, 11, 137, 212, 189, 60, 154, 8, 60, 73, 223, 35, 191, 121, 138, 72, 190, 199, 225, 248, 189, 152, 217, 253, 62, 115, 174, 145, 60, 90, 122, 103, 190, 90, 190, 236, 190, 194, 219, 85, 191, 55, 125, 45, 63, 207, 136, 71, 62, 19, 137, 60, 63, 210, 50, 129, 191, 107, 58, 79, 190, 89, 124, 155, 190, 6, 122, 121, 63, 82, 191, 123, 62, 150, 206, 163, 190, 186, 111, 34, 191, 222, 80, 249, 61, 246, 34, 121, 62, 151, 7, 24, 60, 66, 234, 250, 190, 158, 162, 145, 190, 214, 110, 176, 191, 144, 204, 116, 190, 57, 86, 3, 63, 228, 187, 220, 62, 49, 172, 25, 62, 54, 97, 132, 61, 254, 221, 217, 63, 113, 172, 226, 62, 19, 195, 15, 189, 41, 188, 150, 191, 147, 138, 126, 189, 20, 103, 27, 63, 66, 230, 75, 191, 114, 100, 238, 190, 154, 238, 186, 190, 205, 57, 208, 190, 126, 162, 30, 190, 33, 126, 77, 191, 48, 162, 209, 62, 180, 235, 85, 62, 255, 11, 46, 63, 231, 105, 177, 63, 134, 165, 84, 62, 52, 99, 139, 61, 234, 13, 139, 191, 171, 199, 139, 62, 105, 195, 52, 191, 219, 179, 35, 190, 13, 66, 204, 62, 176, 36, 104, 63, 69, 11, 4, 62, 10, 72, 1, 61, 141, 31, 181, 190, 111, 88, 84, 63, 204, 51, 40, 62, 65, 32, 180, 62, 15, 24, 201, 190, 88, 131, 30, 63, 252, 145, 149, 62, 12, 166, 126, 191, 87, 202, 120, 62, 226, 232, 63, 63, 69, 210, 112, 191, 19, 103, 98, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 47, 51, 191, 255, 68, 115, 61, 89, 195, 5, 190, 23, 170, 166, 190, 166, 192, 195, 62, 21, 78, 247, 61, 53, 249, 169, 61, 247, 223, 3, 61, 64, 63, 160, 61, 231, 61, 153, 62, 36, 39, 35, 190, 14, 186, 66, 191, 147, 95, 37, 63, 14, 34, 160, 190, 8, 160, 3, 63, 97, 153, 242, 188, 213, 69, 227, 62, 127, 110, 236, 189, 33, 51, 175, 62, 157, 65, 39, 190, 231, 56, 218, 61, 19, 120, 212, 190, 173, 182, 61, 63, 173, 121, 59, 63, 203, 137, 169, 58, 242, 255, 55, 61, 198, 222, 230, 190, 183, 166, 191, 61, 87, 153, 9, 63, 162, 204, 195, 190, 72, 135, 133, 62, 228, 64, 124, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 66, 2, 191, 85, 143, 2, 62, 250, 74, 157, 190, 156, 79, 149, 189, 172, 69, 217, 190, 107, 182, 73, 60, 238, 200, 102, 187, 244, 32, 142, 62, 218, 136, 204, 190, 155, 214, 111, 60, 7, 156, 175, 187, 82, 74, 200, 61, 28, 27, 27, 191, 45, 248, 239, 190, 10, 66, 126, 190, 215, 146, 128, 189, 23, 186, 67, 62, 200, 140, 184, 60, 73, 45, 242, 62, 116, 189, 37, 192, 224, 128, 179, 190, 100, 202, 64, 190, 37, 35, 130, 61, 161, 206, 17, 191, 186, 219, 211, 62, 187, 74, 19, 62, 36, 89, 145, 189, 173, 118, 133, 62, 254, 74, 193, 190, 162, 151, 27, 63, 111, 20, 219, 61, 104, 110, 50, 190, 0, 198, 193, 189, 179, 11, 42, 63, 47, 85, 80, 189, 214, 107, 227, 190, 229, 139, 158, 62, 202, 68, 31, 191, 168, 192, 130, 191, 138, 180, 21, 63, 243, 242, 112, 62, 6, 36, 98, 62, 162, 89, 36, 62, 229, 83, 91, 190, 40, 220, 123, 62, 136, 59, 49, 191, 252, 90, 37, 62, 83, 74, 183, 61, 168, 19, 80, 62, 84, 1, 34, 190, 104, 105, 25, 62, 29, 180, 58, 190, 33, 36, 136, 190, 93, 162, 160, 191, 155, 166, 24, 190, 77, 41, 47, 190, 143, 225, 92, 61, 84, 201, 57, 62, 181, 233, 141, 61, 109, 118, 161, 190, 192, 3, 15, 62, 80, 229, 149, 190, 33, 178, 158, 190, 163, 5, 233, 190, 59, 53, 212, 190, 8, 153, 134, 60, 15, 12, 143, 189, 82, 91, 16, 190, 127, 137, 151, 190, 88, 127, 41, 189, 237, 136, 8, 188, 253, 137, 132, 62, 90, 128, 2, 190, 158, 40, 99, 62, 108, 235, 91, 190, 163, 163, 180, 61, 195, 92, 132, 190, 83, 115, 91, 191, 24, 165, 12, 62, 58, 120, 209, 190, 36, 138, 159, 61, 242, 89, 149, 190, 120, 83, 6, 62, 97, 183, 87, 190, 50, 32, 53, 191, 200, 253, 230, 190, 89, 128, 54, 62, 29, 214, 200, 190, 172, 37, 144, 61, 245, 229, 176, 61, 88, 49, 212, 190, 96, 21, 178, 62, 215, 87, 46, 62, 1, 59, 141, 62, 151, 182, 195, 62, 179, 207, 36, 191, 191, 12, 240, 60, 37, 152, 11, 62, 239, 116, 155, 62, 231, 210, 48, 188, 143, 30, 65, 190, 25, 211, 76, 62, 121, 25, 73, 189, 126, 127, 12, 62, 19, 255, 49, 62, 27, 50, 156, 189, 250, 143, 161, 62, 44, 41, 19, 190, 142, 154, 58, 191, 253, 71, 241, 188, 57, 149, 246, 61, 79, 168, 94, 190, 238, 153, 191, 189, 84, 51, 51, 63, 231, 105, 201, 62, 233, 232, 136, 190, 146, 234, 6, 63, 249, 118, 179, 61, 81, 185, 204, 189, 24, 123, 204, 190, 53, 255, 182, 62, 42, 155, 20, 62, 201, 190, 72, 61, 245, 11, 174, 62, 102, 118, 123, 189, 104, 49, 199, 62, 201, 43, 53, 62, 244, 130, 80, 62, 31, 11, 13, 191, 225, 38, 249, 188, 194, 228, 18, 190, 172, 132, 172, 60, 93, 222, 27, 62, 42, 104, 139, 61, 38, 25, 138, 61, 141, 238, 13, 190, 26, 175, 38, 60, 222, 141, 186, 189, 84, 151, 191, 189, 60, 229, 155, 60, 15, 141, 118, 62, 90, 47, 202, 190, 43, 182, 172, 62, 173, 176, 38, 62, 158, 61, 31, 62, 194, 135, 58, 62, 10, 14, 158, 62, 115, 106, 212, 61, 145, 251, 151, 61, 54, 109, 99, 190, 12, 4, 254, 61, 65, 132, 209, 60, 198, 70, 5, 62, 58, 162, 160, 61, 34, 164, 225, 189, 230, 214, 128, 59, 127, 136, 18, 62, 143, 184, 196, 61, 168, 103, 18, 190, 16, 195, 185, 190, 73, 196, 30, 189, 49, 180, 50, 61, 3, 13, 162, 191, 183, 18, 152, 62, 252, 78, 177, 188, 181, 34, 244, 189, 14, 9, 212, 61, 19, 3, 130, 62, 211, 141, 187, 191, 213, 187, 96, 62, 72, 200, 171, 189, 164, 89, 231, 60, 127, 146, 175, 191, 227, 243, 225, 59, 187, 19, 195, 190, 59, 59, 244, 189, 51, 161, 108, 62, 155, 163, 147, 191, 248, 236, 222, 62, 179, 142, 41, 192, 13, 85, 67, 191, 153, 130, 237, 60, 248, 209, 13, 190, 7, 94, 145, 191, 61, 186, 50, 62, 167, 190, 210, 189, 200, 57, 199, 189, 161, 37, 83, 62, 201, 79, 65, 191, 75, 65, 5, 191, 164, 35, 219, 62, 255, 4, 198, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 76, 151, 227, 190, 156, 200, 19, 190, 224, 162, 3, 60, 187, 74, 113, 190, 126, 239, 54, 61, 152, 178, 61, 61, 179, 180, 144, 60, 53, 84, 36, 61, 25, 187, 20, 189, 20, 79, 184, 61, 47, 95, 34, 188, 198, 35, 193, 188, 191, 152, 235, 61, 105, 45, 193, 190, 191, 237, 72, 61, 177, 154, 20, 62, 78, 65, 57, 62, 207, 200, 110, 190, 130, 131, 37, 61, 77, 163, 78, 60, 127, 14, 67, 62, 164, 52, 86, 190, 54, 134, 81, 62, 3, 130, 47, 61, 95, 49, 227, 61, 219, 87, 111, 190, 212, 190, 14, 61, 104, 214, 11, 60, 221, 245, 111, 61, 214, 67, 202, 61, 26, 198, 64, 62, 227, 215, 240, 190, 80, 224, 20, 190, 36, 26, 13, 190, 104, 168, 224, 189, 75, 209, 12, 62, 67, 143, 145, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 47, 29, 53, 61, 157, 36, 226, 189, 21, 10, 212, 61, 39, 205, 201, 186, 44, 108, 190, 61, 190, 222, 222, 188, 71, 19, 35, 190, 86, 138, 61, 188, 228, 252, 104, 189, 124, 31, 26, 190, 32, 138, 132, 189, 6, 79, 31, 190, 119, 207, 202, 61, 99, 149, 20, 190, 72, 83, 49, 61, 216, 128, 237, 61, 88, 111, 44, 190, 238, 146, 50, 190, 216, 21, 52, 190, 140, 236, 150, 61, 215, 12, 19, 60, 243, 33, 193, 189, 139, 131, 227, 189, 162, 102, 180, 189, 188, 59, 51, 191, 48, 83, 254, 61, 166, 212, 114, 62, 245, 6, 139, 189, 169, 14, 202, 59, 53, 160, 123, 61, 46, 250, 37, 62, 244, 185, 255, 61, 109, 36, 207, 187, 156, 108, 189, 189, 127, 74, 128, 58, 7, 117, 5, 62, 241, 243, 216, 61, 204, 110, 241, 190, 219, 85, 13, 186, 6, 192, 161, 60, 27, 230, 26, 62, 183, 177, 94, 62, 237, 47, 47, 62, 233, 149, 5, 62, 23, 155, 3, 62, 148, 117, 163, 190, 57, 197, 132, 62, 118, 97, 191, 61, 101, 138, 50, 62, 91, 83, 187, 189, 200, 44, 237, 188, 68, 185, 83, 62, 163, 117, 172, 62, 41, 38, 236, 61, 185, 240, 83, 61, 2, 44, 36, 191, 31, 141, 31, 62, 144, 95, 138, 62, 147, 236, 63, 61, 149, 224, 158, 191, 124, 77, 98, 62, 115, 78, 26, 191, 191, 224, 217, 190, 220, 207, 187, 189, 1, 61, 66, 62, 224, 211, 242, 190, 0, 125, 13, 63, 235, 167, 134, 190, 86, 102, 57, 62, 67, 89, 62, 191, 88, 110, 105, 61, 137, 238, 129, 62, 214, 96, 31, 191, 42, 96, 26, 190, 48, 218, 225, 189, 176, 212, 27, 191, 248, 69, 165, 189, 220, 123, 164, 190, 119, 124, 105, 62, 57, 213, 46, 62, 44, 153, 51, 191, 51, 99, 25, 63, 134, 190, 9, 63, 22, 190, 22, 190, 97, 178, 191, 61, 84, 107, 198, 190, 252, 216, 45, 189, 159, 108, 144, 187, 8, 6, 8, 189, 1, 241, 122, 60, 227, 33, 254, 60, 202, 14, 68, 187, 197, 241, 196, 189, 228, 64, 59, 190, 56, 32, 214, 61, 62, 50, 19, 190, 41, 200, 20, 61, 248, 148, 254, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 214, 138, 185, 189, 120, 228, 4, 189, 201, 180, 190, 189, 58, 189, 253, 60, 142, 80, 175, 189, 156, 167, 107, 61, 10, 92, 153, 189, 206, 174, 160, 61, 223, 46, 95, 61, 222, 94, 160, 61, 240, 14, 184, 189, 255, 228, 154, 189, 61, 219, 37, 190, 240, 177, 35, 62, 52, 172, 112, 61, 28, 204, 231, 189, 116, 223, 196, 189, 27, 100, 161, 61, 36, 165, 230, 61, 40, 46, 244, 60, 247, 82, 117, 62, 223, 78, 2, 61, 187, 248, 165, 190, 249, 76, 160, 62, 132, 181, 75, 190, 92, 146, 229, 190, 173, 143, 9, 191, 46, 115, 131, 62, 45, 255, 12, 190, 117, 250, 212, 62, 118, 216, 104, 190, 10, 48, 121, 62, 138, 152, 189, 190, 64, 8, 80, 62, 29, 36, 6, 61, 34, 99, 80, 190, 32, 29, 40, 62, 125, 45, 228, 61, 140, 110, 58, 62, 125, 243, 11, 62, 193, 135, 130, 190, 33, 162, 35, 62, 80, 16, 81, 62, 114, 227, 60, 61, 249, 96, 217, 62, 142, 198, 197, 62, 112, 224, 237, 190, 30, 108, 214, 61, 16, 131, 248, 61, 222, 237, 129, 61, 53, 240, 151, 190, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 51, 42, 185, 62, 178, 4, 27, 189, 10, 28, 128, 191, 169, 31, 53, 62, 244, 74, 22, 191, 17, 119, 167, 190, 122, 129, 40, 191, 40, 59, 131, 62, 48, 112, 127, 190, 201, 172, 93, 62, 16, 31, 146, 190, 44, 3, 112, 62, 138, 8, 180, 190, 25, 225, 209, 59, 219, 12, 148, 59, 104, 240, 206, 190, 28, 224, 20, 62, 57, 254, 194, 190, 163, 41, 204, 190, 180, 142, 43, 190, 66, 183, 114, 189, 57, 27, 145, 62, 0, 78, 155, 62, 194, 43, 54, 191, 89, 50, 157, 62, 56, 148, 106, 62, 225, 238, 198, 190, 166, 209, 248, 61, 226, 232, 27, 191, 107, 131, 171, 190, 24, 53, 156, 189, 121, 59, 208, 61, 113, 200, 215, 61, 227, 250, 87, 189, 79, 88, 38, 62, 55, 172, 20, 191, 195, 56, 117, 62, 181, 45, 144, 61, 117, 44, 41, 62, 124, 98, 208, 190, 90, 183, 117, 62, 105, 88, 230, 61, 187, 122, 162, 62, 196, 33, 80, 190, 239, 228, 185, 189, 114, 222, 15, 191, 155, 117, 56, 60, 198, 107, 197, 62, 7, 196, 245, 61, 44, 99, 122, 61, 17, 125, 195, 191, 26, 187, 80, 61, 118, 185, 38, 62, 38, 3, 49, 62, 207, 167, 181, 189, 185, 173, 153, 190, 157, 107, 182, 61, 40, 28, 118, 190, 79, 40, 50, 190, 206, 175, 40, 191, 131, 6, 3, 62, 252, 7, 10, 63, 81, 196, 118, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 107, 204, 235, 189, 223, 238, 131, 189, 91, 149, 189, 61, 47, 31, 150, 61, 35, 243, 169, 189, 255, 30, 32, 190, 192, 110, 252, 189, 129, 189, 152, 61, 167, 108, 113, 61, 29, 61, 15, 62, 115, 235, 51, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 137, 149, 45, 189, 15, 202, 61, 62, 175, 167, 224, 189, 229, 6, 50, 62, 208, 84, 46, 191, 89, 243, 87, 190, 57, 234, 146, 62, 50, 43, 254, 190, 192, 51, 50, 191, 26, 46, 7, 191, 42, 147, 62, 188, 81, 49, 75, 62, 27, 254, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 231, 36, 129, 62, 84, 62, 239, 190, 33, 155, 117, 62, 166, 81, 247, 61, 182, 133, 168, 62, 198, 75, 6, 62, 72, 95, 34, 62, 93, 191, 44, 191, 98, 240, 186, 62, 144, 194, 32, 190, 63, 125, 178, 62, 52, 9, 160, 61, 168, 63, 109, 185, 141, 62, 92, 62, 55, 39, 83, 188, 204, 72, 241, 61, 236, 231, 156, 60, 137, 156, 151, 62, 142, 203, 251, 61, 157, 100, 137, 60, 118, 2, 190, 58, 135, 121, 179, 62, 248, 50, 188, 189, 238, 247, 8, 189, 154, 166, 192, 188, 228, 241, 39, 62, 221, 211, 87, 61, 160, 124, 198, 190, 220, 93, 154, 189, 41, 5, 242, 61, 26, 38, 12, 190, 107, 81, 182, 62, 95, 178, 145, 190, 10, 113, 99, 60, 80, 15, 48, 190, 247, 212, 21, 61, 124, 78, 194, 190, 77, 40, 159, 187, 18, 181, 122, 61, 235, 80, 82, 61, 184, 156, 82, 190, 173, 53, 155, 61, 168, 37, 28, 62, 236, 222, 212, 187, 40, 57, 107, 191, 101, 144, 251, 189, 36, 21, 246, 190, 216, 98, 222, 61, 212, 36, 180, 61, 146, 38, 63, 61, 158, 101, 174, 62, 76, 144, 186, 191, 228, 6, 51, 190, 9, 50, 174, 189, 113, 42, 179, 189, 221, 120, 225, 189, 63, 160, 250, 61, 88, 190, 152, 62, 54, 152, 117, 60, 245, 217, 50, 190, 71, 87, 54, 191, 248, 32, 214, 61, 139, 163, 116, 62, 251, 52, 169, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 207, 145, 19, 190, 26, 40, 162, 190, 150, 246, 56, 190, 95, 216, 30, 189, 22, 166, 64, 62, 205, 212, 112, 190, 144, 246, 24, 190, 240, 242, 27, 189, 13, 98, 176, 189, 139, 110, 173, 61, 243, 52, 23, 61, 204, 251, 245, 190, 128, 136, 86, 62, 189, 175, 1, 62, 165, 164, 192, 62, 35, 6, 8, 190, 101, 56, 186, 188, 62, 162, 149, 189, 136, 64, 43, 190, 172, 166, 39, 191, 28, 208, 59, 190, 136, 215, 180, 61, 162, 56, 187, 62, 99, 221, 40, 62, 242, 151, 54, 191, 163, 250, 57, 60, 236, 15, 128, 60, 129, 37, 255, 190, 96, 174, 198, 62, 61, 167, 214, 190, 158, 63, 121, 190, 225, 41, 12, 190, 237, 23, 72, 190, 28, 150, 26, 62, 115, 183, 204, 61, 217, 148, 172, 189, 81, 72, 51, 62, 73, 0, 124, 189, 213, 197, 50, 190, 162, 255, 11, 190, 26, 25, 36, 190, 81, 25, 46, 187, 68, 241, 7, 190, 35, 155, 183, 60, 118, 217, 66, 61, 190, 182, 102, 189, 173, 49, 34, 189, 47, 54, 116, 61, 31, 8, 161, 61, 92, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 221, 248, 13, 190, 25, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 94, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 82, 39, 154, 61, 76, 129, 11, 190, 166, 207, 220, 190, 214, 254, 239, 190, 134, 232, 249, 189, 47, 221, 179, 189, 63, 30, 141, 62, 91, 238, 185, 62, 50, 246, 141, 189, 120, 171, 178, 189, 126, 46, 13, 190, 199, 56, 163, 60, 127, 163, 209, 190, 0, 47, 36, 190, 243, 129, 231, 62, 227, 108, 191, 189, 91, 156, 23, 190, 133, 34, 6, 190, 206, 152, 7, 190, 196, 97, 6, 63, 174, 68, 141, 189, 244, 83, 217, 61, 182, 140, 105, 189, 14, 217, 168, 189, 224, 85, 168, 61, 192, 96, 245, 188, 193, 251, 21, 189, 57, 156, 203, 61, 22, 14, 238, 62, 118, 211, 129, 190, 243, 129, 24, 62, 138, 231, 151, 62, 75, 197, 216, 62, 116, 239, 130, 191, 244, 44, 216, 190, 212, 197, 67, 189, 98, 23, 20, 190, 205, 74, 65, 191, 131, 205, 196, 189, 237, 89, 136, 189, 102, 231, 136, 60, 245, 28, 137, 190, 146, 99, 165, 189, 193, 60, 240, 59, 233, 195, 167, 190, 185, 102, 51, 191, 157, 25, 159, 62, 161, 172, 54, 191, 237, 116, 2, 62, 191, 9, 148, 190, 88, 17, 3, 62, 91, 102, 185, 190, 114, 18, 134, 189, 143, 52, 250, 62, 57, 159, 25, 190, 148, 143, 75, 62, 233, 159, 83, 62, 210, 104, 120, 190, 46, 160, 237, 62, 96, 44, 4, 191, 68, 27, 195, 190, 240, 67, 6, 191, 107, 234, 50, 188, 103, 15, 3, 63, 228, 153, 147, 62, 79, 215, 56, 190, 184, 14, 94, 62, 110, 168, 207, 189, 15, 168, 5, 191, 41, 13, 221, 188, 155, 45, 128, 191, 181, 157, 89, 191, 207, 209, 139, 62, 219, 184, 105, 190, 104, 105, 162, 62, 129, 249, 58, 190, 166, 148, 127, 190, 128, 223, 123, 62, 241, 44, 118, 190, 152, 154, 151, 62, 246, 142, 44, 62, 195, 243, 182, 62, 171, 136, 63, 190, 136, 7, 156, 59, 15, 86, 196, 190, 255, 55, 64, 61, 149, 237, 25, 191, 138, 88, 192, 62, 128, 252, 103, 61, 109, 189, 138, 190, 197, 0, 177, 189, 209, 129, 68, 62, 101, 252, 47, 190, 126, 228, 206, 61, 254, 230, 14, 190, 50, 24, 164, 189, 51, 235, 228, 190, 206, 66, 166, 190, 186, 87, 27, 189, 112, 147, 243, 61, 251, 103, 230, 61, 255, 186, 147, 191, 52, 87, 165, 60, 162, 200, 209, 61, 201, 26, 215, 61, 119, 122, 6, 189, 229, 145, 37, 61, 244, 169, 1, 191, 249, 19, 64, 188, 56, 8, 245, 190, 91, 132, 91, 191, 156, 67, 155, 189, 14, 9, 140, 62, 159, 76, 234, 61, 85, 78, 75, 62, 95, 215, 184, 62, 249, 0, 254, 190, 222, 98, 244, 62, 22, 206, 224, 190, 96, 6, 0, 62, 163, 129, 9, 191, 126, 87, 23, 62, 19, 244, 12, 190, 225, 2, 36, 191, 240, 15, 172, 62, 213, 180, 231, 187, 142, 9, 60, 189, 8, 30, 171, 61, 125, 173, 8, 191, 130, 221, 68, 191, 54, 118, 73, 62, 95, 99, 109, 62, 57, 9, 58, 188, 243, 38, 159, 189, 228, 238, 92, 191, 205, 48, 139, 191, 150, 128, 14, 63, 34, 18, 170, 188, 236, 255, 229, 62, 132, 249, 139, 190, 61, 78, 4, 62, 255, 123, 165, 189, 211, 237, 165, 191, 163, 138, 160, 62, 52, 96, 244, 60, 198, 24, 106, 62, 239, 4, 201, 60, 246, 237, 25, 62, 95, 63, 1, 63, 109, 103, 173, 190, 118, 91, 86, 191, 126, 163, 207, 190, 10, 217, 145, 61, 235, 228, 213, 62, 22, 102, 14, 190, 183, 225, 67, 189, 212, 187, 40, 62, 194, 80, 172, 61, 60, 218, 243, 61, 249, 156, 149, 189, 100, 142, 186, 191, 124, 90, 27, 191, 102, 167, 89, 191, 255, 7, 6, 191, 240, 140, 176, 190, 113, 11, 204, 187, 220, 239, 113, 62, 126, 7, 223, 189, 38, 42, 35, 62, 79, 253, 44, 62, 114, 119, 44, 189, 63, 84, 135, 61, 91, 41, 214, 190, 1, 24, 178, 190, 116, 187, 205, 189, 118, 43, 1, 191, 226, 45, 212, 61, 48, 169, 135, 189, 53, 176, 170, 190, 246, 255, 156, 62, 33, 100, 0, 191, 157, 22, 71, 60, 186, 234, 129, 190, 178, 251, 11, 62, 176, 69, 188, 190, 92, 95, 8, 190, 28, 74, 99, 62, 30, 80, 145, 62, 111, 182, 76, 62, 116, 85, 20, 191, 184, 27, 111, 61, 159, 79, 229, 189, 237, 235, 240, 62, 73, 185, 82, 190, 125, 6, 103, 189, 243, 203, 197, 62, 210, 25, 133, 61, 243, 214, 73, 191, 168, 19, 74, 62, 206, 76, 162, 59, 152, 4, 71, 189, 23, 198, 18, 190, 153, 250, 7, 62, 31, 69, 216, 190, 200, 205, 226, 62, 183, 29, 9, 191, 125, 239, 129, 60, 26, 108, 150, 61, 136, 156, 174, 190, 118, 254, 162, 62, 47, 84, 170, 62, 41, 85, 39, 62, 6, 17, 60, 189, 48, 126, 170, 62, 116, 195, 212, 190, 118, 24, 56, 62, 79, 191, 0, 191, 190, 125, 94, 62, 187, 92, 58, 190, 152, 173, 20, 191, 67, 24, 221, 62, 26, 202, 54, 62, 145, 113, 209, 60, 129, 209, 53, 62, 4, 246, 215, 190, 14, 32, 60, 191, 3, 77, 52, 62, 106, 106, 198, 62, 236, 245, 25, 62, 58, 127, 140, 191, 83, 143, 122, 62, 38, 207, 230, 61, 147, 180, 161, 60, 211, 171, 24, 191, 246, 64, 3, 62, 247, 9, 1, 191, 73, 45, 230, 61, 178, 47, 192, 190, 55, 61, 73, 191, 160, 33, 30, 62, 134, 138, 255, 61, 192, 102, 131, 189, 2, 140, 67, 63, 128, 113, 62, 60, 95, 61, 69, 190, 238, 49, 91, 63, 232, 16, 23, 191, 163, 117, 152, 189, 250, 171, 30, 191, 216, 174, 101, 62, 43, 33, 133, 191, 247, 189, 194, 190, 160, 102, 9, 63, 19, 4, 40, 62, 148, 134, 149, 190, 68, 95, 81, 190, 65, 42, 133, 191, 218, 239, 79, 190, 92, 165, 196, 188, 30, 247, 202, 190, 37, 231, 197, 190, 18, 27, 135, 188, 150, 229, 189, 188, 71, 210, 163, 190, 0, 187, 151, 184, 163, 204, 133, 62, 172, 90, 137, 188, 68, 251, 203, 62, 5, 154, 190, 190, 125, 144, 37, 62, 139, 87, 117, 189, 202, 9, 49, 62, 0, 120, 130, 188, 143, 75, 33, 189, 169, 216, 107, 190, 151, 254, 151, 62, 73, 75, 133, 190, 46, 30, 9, 190, 110, 164, 163, 186, 111, 169, 153, 60, 30, 224, 124, 187, 59, 133, 47, 62, 121, 9, 165, 60, 211, 230, 134, 60, 165, 27, 129, 62, 125, 173, 240, 189, 102, 40, 119, 61, 238, 91, 84, 190, 87, 238, 1, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 111, 41, 62, 221, 92, 137, 61, 221, 247, 14, 62, 117, 44, 203, 61, 180, 40, 139, 62, 110, 184, 169, 61, 134, 162, 153, 189, 60, 163, 187, 61, 86, 135, 66, 190, 32, 41, 42, 61, 112, 94, 38, 62, 210, 59, 53, 189, 3, 111, 226, 61, 220, 202, 58, 189, 75, 148, 146, 62, 203, 25, 233, 60, 143, 122, 131, 190, 44, 63, 185, 189, 246, 243, 7, 190, 133, 225, 85, 60, 222, 228, 154, 61, 109, 74, 163, 60, 49, 203, 78, 190, 72, 5, 90, 62, 130, 253, 86, 62, 251, 29, 13, 62, 9, 62, 122, 62, 155, 186, 47, 190, 128, 150, 8, 190, 37, 103, 104, 189, 182, 153, 102, 60, 166, 23, 205, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 244, 17, 62, 2, 199, 156, 62, 58, 49, 29, 191, 126, 55, 94, 190, 42, 137, 135, 189, 165, 253, 37, 63, 39, 186, 152, 188, 230, 138, 147, 188, 160, 101, 235, 61, 241, 194, 76, 190, 110, 239, 105, 63, 26, 196, 227, 188, 95, 178, 253, 190, 58, 207, 70, 61, 36, 87, 104, 63, 56, 199, 183, 62, 209, 67, 84, 63, 226, 37, 203, 189, 118, 175, 63, 190, 60, 49, 207, 61, 175, 47, 242, 188, 199, 22, 135, 191, 194, 22, 52, 61, 122, 173, 223, 62, 11, 159, 90, 63, 78, 38, 67, 63, 53, 90, 8, 191, 43, 251, 16, 63, 153, 99, 140, 62, 232, 167, 210, 190, 228, 34, 89, 191, 118, 218, 0, 61, 137, 28, 76, 191, 12, 217, 90, 190, 31, 92, 133, 187, 53, 102, 204, 190, 94, 253, 140, 190, 221, 253, 135, 190, 58, 52, 185, 61, 225, 136, 40, 190, 195, 239, 146, 189, 204, 88, 46, 190, 163, 32, 242, 189, 106, 205, 36, 190, 138, 207, 207, 187, 152, 147, 60, 60, 235, 193, 172, 62, 149, 90, 119, 60, 57, 44, 242, 60, 134, 107, 45, 190, 145, 40, 18, 62, 253, 174, 17, 61, 241, 219, 156, 61, 84, 212, 195, 61, 105, 103, 34, 62, 133, 213, 211, 61, 236, 185, 180, 61, 209, 184, 152, 62, 13, 255, 121, 190, 229, 250, 95, 62, 226, 104, 73, 62, 39, 111, 30, 190, 90, 154, 225, 62, 8, 3, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 135, 234, 59, 160, 18, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 49, 173, 191, 231, 153, 96, 63, 197, 155, 241, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 193, 7, 63, 154, 150, 23, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}