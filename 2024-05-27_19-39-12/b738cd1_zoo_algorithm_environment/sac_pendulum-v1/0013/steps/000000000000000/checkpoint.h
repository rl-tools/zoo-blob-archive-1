// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 234, 201, 62, 34, 148, 185, 61, 154, 148, 186, 189, 244, 117, 0, 191, 86, 143, 59, 62, 129, 92, 155, 59, 197, 239, 244, 190, 157, 220, 26, 190, 102, 229, 134, 190, 59, 66, 151, 188, 151, 228, 146, 62, 171, 28, 199, 189, 226, 226, 231, 190, 222, 74, 28, 190, 69, 210, 0, 63, 39, 195, 7, 62, 29, 92, 150, 190, 76, 21, 12, 191, 244, 110, 17, 190, 186, 64, 123, 190, 188, 11, 204, 190, 104, 55, 187, 62, 139, 139, 144, 62, 122, 236, 73, 62, 196, 130, 66, 62, 194, 101, 102, 190, 150, 81, 225, 61, 78, 60, 212, 61, 181, 107, 221, 62, 120, 196, 227, 190, 133, 44, 151, 62, 117, 73, 226, 190, 6, 53, 94, 61, 45, 153, 14, 191, 109, 183, 202, 62, 225, 233, 6, 190, 114, 182, 230, 190, 136, 134, 136, 62, 66, 149, 94, 62, 185, 38, 206, 62, 246, 4, 11, 191, 108, 181, 71, 190, 86, 227, 158, 61, 204, 85, 135, 62, 95, 174, 205, 62, 123, 21, 1, 191, 169, 193, 160, 190, 130, 160, 30, 189, 191, 191, 245, 62, 88, 160, 133, 62, 210, 210, 135, 190, 201, 50, 10, 191, 26, 224, 16, 191, 36, 68, 16, 190, 118, 124, 173, 62, 158, 140, 197, 189, 211, 160, 41, 59, 118, 223, 109, 62, 203, 154, 62, 62, 28, 59, 167, 62, 107, 211, 150, 62, 160, 68, 164, 190, 146, 157, 35, 62, 53, 104, 185, 62, 84, 9, 100, 190, 36, 131, 203, 190, 21, 221, 141, 189, 29, 24, 139, 190, 225, 18, 122, 190, 2, 189, 185, 190, 47, 172, 132, 190, 243, 56, 203, 62, 151, 55, 166, 62, 19, 227, 159, 62, 79, 138, 186, 62, 122, 120, 112, 61, 23, 154, 13, 191, 72, 27, 129, 187, 138, 221, 18, 191, 55, 115, 157, 190, 227, 42, 48, 189, 0, 131, 13, 63, 230, 189, 19, 190, 212, 26, 226, 188, 144, 90, 12, 189, 228, 141, 146, 62, 106, 152, 170, 62, 213, 115, 13, 63, 193, 11, 18, 191, 248, 184, 192, 62, 114, 131, 203, 62, 83, 99, 7, 191, 171, 108, 177, 62, 161, 81, 1, 63, 2, 106, 218, 190, 175, 3, 39, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 196, 19, 191, 161, 35, 67, 189, 120, 4, 64, 60, 165, 222, 29, 62, 212, 185, 245, 189, 167, 217, 203, 62, 166, 193, 204, 62, 175, 139, 191, 62, 235, 36, 78, 62, 121, 6, 211, 62, 19, 18, 68, 189, 225, 233, 223, 190, 204, 247, 187, 62, 33, 97, 74, 190, 87, 2, 184, 62, 133, 68, 67, 62, 162, 10, 185, 62, 20, 191, 136, 190, 54, 39, 224, 62, 56, 230, 192, 190, 234, 131, 211, 61, 198, 177, 203, 190, 225, 142, 17, 63, 194, 226, 244, 62, 166, 28, 159, 62, 234, 133, 210, 60, 92, 177, 205, 190, 100, 115, 167, 188, 109, 46, 156, 62, 79, 163, 155, 190, 84, 177, 133, 190, 99, 77, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 177, 157, 188, 66, 224, 237, 188, 133, 97, 6, 190, 1, 30, 15, 190, 147, 6, 97, 60, 147, 199, 14, 189, 17, 22, 208, 188, 237, 180, 51, 62, 205, 81, 29, 190, 73, 76, 202, 189, 242, 199, 244, 61, 118, 173, 172, 189, 180, 248, 51, 189, 145, 30, 207, 61, 50, 47, 26, 190, 18, 205, 192, 61, 197, 70, 161, 61, 233, 194, 47, 62, 29, 236, 19, 62, 211, 113, 44, 60, 23, 156, 245, 61, 235, 142, 165, 186, 86, 95, 129, 188, 253, 119, 191, 61, 14, 195, 214, 61, 133, 179, 48, 188, 207, 75, 224, 61, 42, 96, 198, 61, 249, 117, 10, 190, 240, 229, 146, 61, 110, 18, 186, 189, 180, 6, 47, 188, 96, 169, 143, 188, 16, 44, 250, 61, 83, 203, 20, 189, 137, 190, 50, 61, 209, 129, 42, 62, 14, 200, 48, 62, 205, 74, 170, 189, 171, 243, 176, 61, 197, 192, 243, 61, 221, 38, 18, 189, 138, 190, 151, 189, 36, 249, 165, 189, 86, 43, 51, 62, 9, 122, 11, 190, 45, 241, 119, 60, 218, 191, 13, 62, 200, 9, 40, 62, 186, 7, 54, 189, 81, 103, 14, 62, 54, 255, 114, 189, 52, 26, 125, 189, 179, 74, 37, 190, 237, 120, 8, 190, 215, 35, 48, 190, 224, 150, 165, 59, 128, 217, 162, 61, 77, 247, 34, 58, 255, 45, 34, 190, 236, 113, 13, 61, 237, 212, 22, 190, 47, 213, 8, 189, 207, 205, 156, 188, 48, 127, 37, 188, 25, 244, 130, 189, 205, 187, 1, 62, 146, 249, 252, 189, 137, 139, 132, 60, 40, 11, 83, 61, 154, 151, 239, 61, 70, 187, 231, 61, 91, 31, 72, 189, 54, 64, 23, 62, 75, 195, 34, 190, 14, 203, 10, 60, 152, 182, 215, 189, 16, 100, 150, 188, 153, 157, 214, 61, 111, 55, 26, 190, 196, 37, 165, 189, 94, 203, 245, 189, 168, 76, 205, 189, 22, 43, 239, 189, 172, 36, 46, 190, 211, 235, 209, 189, 167, 188, 13, 62, 9, 244, 39, 189, 85, 127, 168, 189, 89, 100, 10, 189, 129, 122, 89, 189, 106, 48, 156, 187, 36, 107, 21, 62, 168, 164, 48, 62, 94, 244, 249, 61, 101, 213, 92, 189, 170, 181, 212, 61, 227, 6, 241, 61, 163, 184, 8, 190, 153, 48, 102, 188, 25, 240, 38, 61, 38, 117, 34, 62, 33, 75, 141, 189, 152, 52, 254, 61, 220, 179, 46, 190, 86, 32, 185, 189, 63, 248, 230, 188, 61, 111, 213, 189, 80, 44, 102, 189, 225, 247, 248, 189, 104, 159, 131, 60, 252, 207, 149, 189, 218, 100, 12, 190, 244, 254, 38, 62, 197, 138, 48, 62, 143, 23, 253, 189, 132, 167, 236, 61, 175, 172, 58, 61, 219, 0, 50, 190, 104, 144, 48, 190, 167, 184, 236, 61, 208, 193, 229, 189, 29, 140, 54, 188, 18, 19, 252, 61, 40, 16, 159, 60, 113, 109, 33, 60, 27, 72, 7, 62, 216, 247, 151, 61, 85, 149, 19, 61, 126, 85, 127, 189, 126, 196, 0, 190, 229, 247, 141, 61, 75, 93, 227, 61, 106, 210, 50, 62, 44, 70, 49, 62, 176, 50, 4, 190, 109, 145, 163, 188, 112, 216, 117, 189, 141, 179, 169, 189, 20, 148, 115, 188, 11, 200, 194, 61, 234, 214, 137, 61, 11, 130, 44, 62, 168, 43, 8, 62, 173, 165, 43, 62, 218, 10, 22, 62, 194, 251, 34, 62, 44, 18, 156, 61, 60, 83, 247, 189, 59, 87, 134, 61, 59, 25, 192, 61, 33, 23, 241, 188, 187, 16, 10, 188, 203, 145, 20, 62, 89, 92, 214, 60, 58, 172, 248, 188, 173, 35, 9, 188, 251, 107, 12, 61, 99, 66, 211, 189, 74, 193, 239, 61, 160, 65, 166, 189, 236, 60, 223, 188, 29, 11, 27, 190, 78, 195, 11, 62, 184, 191, 176, 61, 251, 30, 7, 190, 228, 34, 179, 61, 37, 117, 110, 60, 69, 127, 55, 189, 172, 60, 5, 62, 226, 26, 210, 61, 192, 248, 52, 189, 27, 19, 233, 189, 82, 246, 86, 188, 127, 139, 215, 61, 49, 180, 80, 61, 99, 220, 126, 61, 32, 115, 66, 189, 17, 119, 184, 61, 69, 42, 194, 189, 207, 3, 39, 61, 241, 134, 247, 61, 220, 16, 52, 190, 212, 38, 171, 189, 92, 71, 213, 61, 211, 100, 37, 190, 193, 126, 37, 189, 65, 28, 214, 61, 168, 21, 95, 189, 110, 210, 219, 188, 1, 225, 14, 62, 247, 72, 17, 189, 94, 216, 192, 189, 78, 185, 178, 189, 67, 123, 41, 190, 143, 71, 51, 61, 53, 105, 229, 189, 75, 52, 80, 58, 239, 149, 176, 189, 179, 100, 107, 61, 245, 202, 203, 188, 24, 121, 20, 62, 177, 96, 18, 190, 238, 81, 234, 189, 185, 10, 159, 60, 59, 155, 9, 189, 29, 82, 61, 188, 183, 195, 220, 189, 74, 217, 216, 189, 29, 42, 20, 190, 172, 1, 198, 189, 175, 128, 145, 188, 97, 136, 244, 189, 120, 166, 42, 58, 111, 44, 156, 188, 52, 60, 188, 189, 242, 132, 174, 189, 224, 249, 53, 61, 34, 205, 243, 187, 20, 55, 225, 61, 171, 209, 14, 190, 152, 200, 43, 189, 129, 245, 226, 61, 126, 31, 243, 60, 17, 88, 30, 61, 199, 123, 210, 189, 132, 106, 245, 61, 251, 102, 52, 190, 194, 77, 83, 61, 223, 84, 253, 61, 30, 105, 168, 61, 28, 56, 235, 60, 41, 119, 132, 188, 11, 143, 228, 61, 254, 163, 156, 61, 167, 5, 45, 189, 92, 118, 175, 188, 164, 44, 138, 189, 23, 171, 180, 189, 116, 214, 15, 62, 143, 71, 20, 62, 157, 33, 12, 190, 56, 155, 250, 189, 197, 174, 10, 60, 170, 26, 10, 62, 36, 108, 173, 61, 220, 148, 21, 62, 193, 160, 156, 60, 116, 224, 21, 189, 73, 117, 31, 190, 236, 45, 31, 62, 248, 254, 9, 190, 246, 6, 157, 189, 133, 190, 83, 61, 171, 56, 39, 62, 179, 167, 134, 188, 80, 224, 20, 190, 3, 159, 226, 189, 171, 184, 174, 189, 189, 207, 29, 62, 74, 114, 40, 61, 132, 124, 125, 188, 127, 54, 45, 190, 137, 178, 15, 189, 98, 227, 199, 61, 73, 219, 197, 189, 129, 217, 27, 62, 249, 253, 110, 60, 73, 133, 25, 62, 190, 222, 222, 188, 154, 88, 212, 189, 41, 171, 24, 61, 151, 71, 100, 189, 27, 164, 5, 190, 74, 168, 135, 188, 145, 144, 149, 189, 238, 44, 3, 62, 99, 149, 20, 190, 183, 83, 198, 61, 22, 255, 48, 62, 190, 123, 185, 189, 200, 250, 4, 190, 11, 105, 247, 189, 140, 236, 150, 61, 8, 10, 137, 61, 240, 109, 16, 189, 234, 105, 159, 189, 162, 102, 180, 189, 250, 220, 51, 190, 68, 110, 120, 61, 202, 255, 172, 61, 223, 216, 20, 190, 93, 73, 82, 60, 142, 153, 69, 61, 202, 151, 220, 61, 8, 18, 229, 61, 138, 104, 7, 61, 96, 158, 44, 190, 248, 51, 48, 62, 100, 235, 0, 189, 106, 42, 155, 189, 141, 145, 0, 62, 226, 248, 28, 190, 68, 218, 95, 189, 116, 200, 118, 59, 234, 55, 51, 59, 102, 63, 36, 186, 28, 191, 155, 61, 158, 226, 55, 61, 123, 191, 68, 61, 228, 127, 23, 62, 82, 145, 13, 61, 234, 2, 24, 59, 178, 121, 190, 61, 73, 212, 173, 61, 224, 244, 79, 189, 61, 234, 51, 62, 41, 4, 169, 61, 158, 16, 74, 61, 88, 193, 54, 61, 31, 141, 31, 62, 171, 232, 41, 189, 140, 14, 205, 60, 12, 133, 219, 188, 189, 65, 87, 61, 17, 21, 165, 61, 75, 25, 124, 189, 209, 17, 138, 61, 156, 120, 132, 189, 16, 38, 63, 61, 27, 20, 29, 62, 133, 114, 4, 61, 93, 76, 100, 61, 175, 52, 22, 190, 48, 159, 82, 188, 15, 206, 29, 189, 58, 27, 36, 190, 138, 189, 249, 189, 33, 73, 51, 61, 80, 224, 177, 189, 66, 206, 149, 61, 207, 52, 167, 61, 161, 177, 55, 61, 59, 126, 246, 188, 251, 200, 7, 190, 22, 217, 23, 62, 206, 9, 197, 61, 150, 89, 25, 190, 94, 120, 73, 58, 168, 69, 40, 190, 193, 194, 193, 61, 253, 202, 52, 62, 240, 47, 7, 189, 1, 241, 122, 60, 122, 66, 9, 61, 227, 238, 83, 59, 197, 241, 196, 189, 250, 154, 15, 190, 32, 72, 8, 62, 178, 134, 3, 190, 118, 242, 63, 61, 170, 216, 216, 189, 63, 113, 255, 189, 21, 82, 165, 189, 18, 141, 1, 190, 20, 44, 128, 189, 80, 16, 239, 188, 98, 183, 190, 189, 110, 193, 113, 61, 61, 13, 168, 189, 254, 117, 180, 61, 10, 92, 153, 189, 186, 172, 201, 61, 2, 239, 140, 61, 135, 148, 214, 61, 51, 34, 180, 189, 255, 213, 137, 189, 221, 145, 14, 190, 240, 177, 35, 62, 14, 68, 182, 61, 238, 162, 229, 189, 86, 169, 167, 189, 31, 115, 222, 61, 218, 61, 22, 62, 106, 182, 130, 61, 232, 30, 140, 60, 83, 164, 26, 61, 34, 19, 186, 189, 110, 93, 8, 189, 43, 175, 7, 62, 77, 208, 17, 189, 99, 41, 206, 189, 76, 248, 248, 189, 233, 115, 55, 59, 126, 4, 201, 60, 67, 122, 47, 62, 105, 89, 169, 61, 127, 25, 62, 189, 198, 106, 187, 189, 6, 138, 182, 189, 239, 201, 30, 188, 145, 60, 204, 61, 203, 71, 246, 189, 50, 75, 29, 62, 165, 35, 235, 60, 215, 69, 49, 62, 152, 234, 25, 190, 170, 154, 212, 189, 16, 45, 39, 61, 166, 197, 153, 61, 9, 27, 215, 61, 103, 245, 153, 188, 23, 54, 19, 190, 198, 211, 249, 187, 18, 250, 27, 190, 161, 177, 153, 60, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 177, 201, 18, 190, 243, 16, 4, 190, 33, 188, 178, 60, 91, 222, 130, 61, 80, 204, 238, 189, 42, 79, 34, 61, 11, 24, 196, 189, 71, 148, 249, 61, 249, 42, 67, 61, 254, 95, 231, 60, 64, 3, 0, 190, 80, 253, 172, 61, 101, 222, 3, 62, 66, 92, 166, 189, 128, 22, 50, 190, 120, 113, 21, 190, 44, 189, 3, 62, 114, 253, 183, 189, 58, 23, 214, 61, 95, 92, 13, 62, 80, 206, 25, 62, 184, 204, 110, 61, 213, 66, 39, 62, 92, 229, 146, 189, 194, 193, 223, 61, 224, 78, 176, 189, 40, 225, 14, 190, 152, 94, 211, 60, 235, 132, 32, 190, 58, 77, 131, 61, 240, 95, 200, 189, 10, 32, 114, 189, 35, 65, 165, 188, 242, 176, 128, 60, 200, 173, 157, 189, 128, 51, 237, 59, 148, 61, 37, 61, 4, 173, 181, 189, 194, 5, 132, 59, 230, 164, 42, 190, 69, 107, 89, 61, 107, 140, 233, 61, 227, 202, 84, 60, 55, 129, 19, 62, 157, 115, 0, 190, 49, 41, 71, 189, 71, 249, 24, 190, 3, 217, 40, 62, 33, 31, 36, 62, 91, 163, 153, 60, 222, 18, 36, 190, 115, 94, 119, 61, 146, 44, 244, 188, 128, 1, 236, 60, 255, 8, 46, 190, 215, 52, 196, 189, 190, 246, 192, 189, 21, 54, 246, 185, 255, 191, 234, 189, 199, 91, 217, 60, 164, 227, 224, 61, 195, 71, 105, 60, 196, 255, 86, 189, 188, 234, 134, 189, 10, 157, 2, 62, 216, 170, 51, 62, 203, 163, 190, 189, 53, 22, 164, 188, 88, 2, 130, 189, 143, 157, 201, 61, 243, 234, 130, 189, 61, 246, 135, 61, 204, 175, 25, 189, 75, 200, 247, 61, 198, 249, 26, 62, 144, 35, 42, 62, 29, 61, 15, 62, 16, 169, 15, 190, 25, 44, 129, 189, 184, 42, 214, 189, 88, 66, 100, 189, 235, 15, 62, 189, 240, 138, 126, 61, 20, 67, 122, 61, 229, 6, 50, 62, 242, 34, 23, 190, 27, 182, 175, 189, 148, 119, 37, 62, 120, 79, 47, 190, 154, 132, 43, 190, 26, 195, 22, 190, 22, 62, 71, 61, 248, 179, 5, 62, 52, 58, 223, 188, 106, 156, 4, 190, 150, 121, 6, 62, 19, 223, 173, 189, 36, 215, 111, 61, 235, 40, 38, 190, 205, 178, 235, 61, 141, 212, 173, 188, 113, 155, 202, 61, 11, 154, 105, 189, 87, 222, 68, 189, 76, 1, 132, 61, 124, 195, 145, 60, 18, 7, 87, 189, 218, 79, 28, 62, 20, 61, 52, 190, 242, 12, 185, 189, 198, 223, 232, 189, 202, 165, 10, 190, 98, 125, 41, 190, 162, 234, 188, 189, 211, 136, 164, 188, 71, 52, 161, 61, 39, 97, 138, 189, 197, 14, 127, 187, 190, 102, 84, 187, 103, 248, 196, 188, 136, 120, 67, 57, 210, 123, 72, 189, 75, 92, 163, 61, 188, 56, 74, 189, 70, 226, 160, 60, 61, 41, 19, 190, 170, 82, 223, 61, 62, 6, 227, 61, 1, 43, 16, 190, 211, 196, 186, 61, 133, 209, 148, 61, 40, 187, 228, 61, 133, 24, 157, 61, 3, 148, 33, 62, 158, 211, 245, 187, 173, 15, 7, 62, 104, 34, 2, 188, 254, 148, 24, 62, 52, 97, 251, 61, 120, 218, 211, 188, 84, 241, 3, 190, 78, 249, 147, 189, 39, 51, 209, 61, 151, 251, 67, 189, 17, 70, 39, 62, 148, 218, 10, 62, 223, 198, 108, 60, 110, 255, 162, 186, 59, 77, 40, 189, 215, 1, 200, 189, 222, 211, 48, 190, 68, 27, 7, 61, 93, 168, 230, 59, 148, 35, 9, 190, 121, 156, 28, 190, 39, 177, 15, 190, 196, 128, 0, 62, 241, 202, 44, 190, 43, 160, 18, 62, 190, 115, 18, 190, 94, 60, 160, 61, 164, 107, 239, 61, 154, 70, 242, 61, 170, 224, 12, 190, 178, 81, 65, 59, 30, 247, 163, 61, 73, 138, 19, 189, 83, 92, 233, 189, 2, 167, 234, 61, 224, 251, 246, 189, 34, 131, 26, 61, 216, 38, 173, 61, 74, 39, 61, 61, 86, 165, 201, 61, 155, 32, 44, 190, 205, 225, 212, 61, 23, 98, 242, 61, 10, 165, 20, 61, 116, 0, 76, 61, 162, 44, 15, 190, 240, 169, 11, 62, 137, 14, 1, 190, 21, 109, 167, 189, 121, 235, 165, 189, 10, 133, 192, 189, 121, 26, 223, 61, 30, 156, 20, 190, 116, 184, 154, 60, 197, 85, 120, 189, 32, 143, 57, 189, 146, 134, 30, 62, 245, 64, 10, 190, 134, 206, 132, 189, 103, 161, 247, 61, 26, 42, 14, 189, 59, 159, 194, 60, 231, 255, 6, 62, 32, 130, 41, 61, 107, 54, 203, 61, 172, 162, 29, 189, 20, 226, 47, 190, 179, 200, 174, 188, 217, 24, 184, 189, 209, 216, 136, 189, 88, 81, 30, 190, 226, 218, 9, 62, 88, 213, 236, 189, 201, 150, 205, 189, 88, 110, 149, 188, 9, 71, 65, 189, 107, 162, 75, 189, 51, 125, 247, 189, 133, 196, 9, 62, 135, 69, 10, 190, 248, 170, 138, 187, 109, 197, 116, 189, 51, 216, 168, 61, 132, 141, 94, 61, 69, 93, 11, 189, 119, 136, 29, 190, 157, 212, 138, 189, 221, 183, 45, 190, 107, 223, 31, 62, 233, 174, 41, 190, 136, 68, 175, 189, 222, 211, 177, 189, 128, 172, 242, 61, 59, 57, 89, 189, 40, 69, 157, 188, 130, 84, 8, 62, 196, 238, 41, 189, 248, 169, 148, 189, 67, 65, 196, 61, 104, 60, 14, 62, 18, 175, 148, 60, 6, 108, 146, 189, 26, 228, 224, 61, 31, 92, 240, 60, 88, 213, 155, 189, 196, 142, 79, 189, 66, 153, 54, 61, 207, 247, 147, 61, 10, 175, 25, 190, 168, 195, 50, 190, 162, 97, 135, 61, 220, 35, 24, 62, 227, 229, 114, 189, 205, 80, 25, 188, 181, 20, 107, 61, 198, 51, 219, 61, 191, 18, 85, 60, 54, 129, 160, 61, 96, 95, 26, 190, 188, 134, 42, 190, 63, 157, 9, 190, 245, 118, 42, 190, 10, 20, 46, 62, 103, 142, 198, 61, 232, 93, 137, 189, 81, 72, 51, 62, 166, 91, 59, 189, 200, 93, 31, 190, 50, 253, 215, 189, 26, 25, 36, 190, 179, 51, 105, 60, 68, 241, 7, 190, 90, 14, 38, 61, 161, 77, 155, 61, 80, 248, 106, 189, 10, 141, 182, 187, 47, 54, 116, 61, 100, 194, 197, 61, 250, 114, 226, 61, 153, 202, 179, 61, 184, 84, 179, 61, 144, 121, 31, 190, 253, 119, 243, 189, 38, 160, 217, 189, 237, 49, 31, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 35, 246, 22, 190, 146, 202, 41, 189, 7, 181, 29, 62, 97, 159, 197, 61, 65, 40, 13, 62, 60, 50, 26, 188, 129, 39, 14, 190, 214, 160, 188, 189, 68, 82, 4, 190, 129, 13, 157, 61, 72, 195, 33, 62, 101, 148, 34, 190, 248, 172, 42, 190, 1, 2, 227, 189, 2, 14, 157, 189, 168, 86, 50, 190, 146, 27, 136, 188, 19, 140, 130, 61, 41, 59, 152, 61, 141, 173, 42, 190, 205, 144, 23, 190, 137, 131, 109, 189, 183, 240, 38, 62, 86, 112, 8, 189, 50, 129, 46, 190, 247, 107, 198, 188, 1, 178, 24, 190, 123, 199, 13, 62, 130, 8, 93, 189, 48, 117, 194, 189, 27, 109, 233, 61, 164, 69, 143, 61, 191, 58, 26, 190, 221, 189, 119, 61, 200, 215, 174, 61, 33, 68, 11, 62, 249, 3, 253, 188, 208, 154, 162, 189, 203, 24, 230, 189, 223, 111, 237, 60, 43, 107, 127, 189, 232, 38, 245, 189, 6, 143, 6, 190, 177, 116, 255, 61, 239, 29, 38, 190, 154, 36, 230, 61, 44, 141, 132, 187, 183, 34, 214, 189, 133, 86, 28, 190, 180, 250, 208, 61, 71, 135, 183, 189, 35, 253, 105, 59, 173, 166, 197, 189, 134, 64, 145, 61, 156, 190, 40, 190, 108, 13, 242, 61, 26, 110, 26, 62, 191, 172, 76, 61, 21, 131, 22, 62, 31, 175, 183, 61, 6, 223, 15, 190, 141, 211, 84, 60, 56, 20, 51, 190, 49, 242, 24, 190, 117, 170, 179, 189, 129, 110, 241, 189, 222, 2, 199, 187, 239, 181, 209, 61, 101, 16, 131, 61, 165, 178, 149, 61, 47, 5, 197, 189, 101, 99, 99, 189, 112, 247, 8, 188, 233, 100, 17, 190, 91, 19, 242, 61, 32, 228, 79, 188, 141, 115, 134, 189, 230, 66, 114, 61, 167, 15, 3, 190, 107, 132, 202, 189, 92, 230, 179, 61, 20, 73, 170, 189, 64, 10, 17, 62, 79, 72, 163, 61, 239, 97, 139, 60, 185, 38, 128, 189, 204, 243, 17, 62, 182, 24, 25, 190, 76, 33, 169, 189, 186, 173, 158, 61, 131, 114, 134, 61, 88, 102, 189, 189, 185, 50, 198, 189, 245, 40, 52, 190, 177, 109, 14, 62, 239, 238, 135, 187, 255, 55, 146, 189, 240, 55, 34, 60, 175, 239, 239, 189, 125, 40, 222, 189, 104, 42, 7, 62, 183, 21, 126, 189, 188, 170, 76, 61, 19, 173, 234, 61, 153, 132, 151, 61, 63, 241, 13, 188, 205, 37, 105, 61, 221, 67, 65, 189, 36, 9, 157, 58, 184, 171, 134, 188, 234, 85, 46, 190, 229, 238, 158, 189, 87, 73, 9, 189, 97, 179, 231, 189, 54, 64, 83, 189, 72, 127, 191, 61, 143, 108, 117, 188, 81, 160, 248, 188, 150, 122, 178, 61, 42, 70, 158, 189, 143, 174, 147, 61, 59, 27, 192, 188, 96, 52, 163, 61, 126, 221, 174, 61, 197, 92, 12, 189, 17, 35, 211, 187, 193, 176, 218, 189, 95, 140, 99, 189, 94, 152, 43, 61, 193, 208, 52, 190, 5, 62, 75, 188, 200, 16, 219, 61, 134, 59, 38, 190, 115, 175, 139, 188, 178, 223, 23, 62, 124, 147, 42, 62, 182, 55, 223, 189, 149, 207, 173, 189, 74, 171, 27, 190, 99, 199, 245, 61, 161, 76, 224, 188, 213, 124, 21, 62, 246, 150, 219, 189, 46, 120, 46, 188, 226, 133, 155, 189, 236, 232, 177, 60, 222, 152, 14, 62, 231, 157, 131, 189, 141, 212, 91, 188, 136, 151, 122, 61, 108, 103, 232, 61, 205, 110, 42, 62, 167, 127, 104, 60, 183, 244, 22, 190, 48, 52, 75, 61, 64, 61, 249, 61, 69, 188, 176, 61, 80, 129, 227, 61, 221, 2, 174, 189, 42, 30, 231, 188, 90, 126, 95, 189, 101, 101, 128, 61, 126, 46, 202, 61, 86, 23, 103, 188, 68, 47, 37, 190, 210, 127, 17, 190, 74, 153, 36, 62, 99, 205, 148, 61, 63, 142, 171, 188, 140, 128, 45, 62, 173, 6, 43, 190, 63, 206, 23, 62, 191, 0, 222, 61, 79, 174, 129, 60, 161, 159, 43, 190, 80, 242, 229, 189, 172, 96, 27, 190, 193, 188, 59, 189, 139, 44, 100, 61, 12, 200, 78, 61, 69, 253, 67, 189, 7, 210, 11, 62, 127, 92, 249, 188, 222, 44, 221, 187, 162, 3, 68, 61, 95, 228, 13, 189, 194, 63, 165, 61, 138, 232, 219, 189, 45, 146, 26, 190, 135, 142, 229, 61, 230, 51, 10, 62, 234, 97, 133, 189, 152, 42, 0, 188, 104, 186, 62, 61, 98, 162, 33, 190, 49, 83, 22, 62, 117, 126, 119, 189, 102, 169, 4, 190, 53, 194, 22, 62, 123, 27, 217, 189, 51, 179, 20, 190, 19, 213, 63, 189, 176, 81, 5, 190, 191, 96, 18, 189, 92, 108, 113, 61, 17, 173, 0, 189, 152, 206, 12, 190, 255, 253, 206, 61, 138, 20, 9, 190, 142, 144, 213, 61, 18, 78, 130, 61, 182, 63, 21, 190, 42, 23, 12, 62, 107, 78, 35, 62, 153, 160, 148, 61, 8, 146, 46, 189, 209, 248, 48, 188, 145, 31, 44, 190, 104, 156, 46, 62, 136, 190, 93, 58, 155, 216, 152, 61, 65, 162, 141, 189, 174, 117, 35, 62, 132, 52, 235, 61, 106, 97, 49, 62, 38, 222, 25, 190, 220, 218, 85, 188, 186, 55, 49, 190, 186, 25, 165, 61, 165, 16, 180, 61, 139, 52, 17, 190, 113, 141, 24, 61, 241, 36, 51, 62, 47, 140, 36, 62, 152, 241, 119, 189, 242, 200, 21, 62, 34, 204, 52, 62, 77, 144, 142, 61, 196, 252, 62, 61, 112, 152, 30, 190, 153, 235, 48, 62, 36, 246, 151, 61, 206, 240, 195, 61, 150, 47, 13, 61, 51, 132, 25, 190, 210, 152, 198, 61, 84, 6, 177, 189, 158, 181, 36, 188, 81, 193, 21, 61, 81, 213, 42, 60, 104, 181, 242, 189, 27, 249, 247, 61, 32, 191, 83, 189, 87, 38, 49, 190, 232, 246, 71, 61, 224, 191, 181, 189, 16, 15, 218, 61, 233, 199, 51, 62, 204, 158, 64, 59, 219, 232, 202, 189, 45, 171, 152, 189, 128, 190, 227, 61, 125, 250, 222, 61, 33, 53, 225, 189, 35, 110, 27, 190, 87, 66, 27, 62, 249, 64, 6, 190, 151, 172, 50, 190, 176, 198, 5, 62, 170, 217, 230, 61, 137, 9, 19, 62, 40, 186, 166, 188, 141, 101, 52, 62, 163, 136, 18, 190, 226, 139, 28, 62, 235, 138, 12, 62, 131, 226, 31, 62, 116, 27, 5, 62, 185, 179, 192, 61, 181, 196, 219, 188, 67, 50, 213, 189, 44, 230, 5, 62, 180, 144, 30, 60, 107, 74, 199, 60, 134, 37, 40, 62, 146, 74, 10, 189, 44, 28, 211, 59, 8, 94, 190, 61, 203, 149, 194, 189, 134, 139, 4, 62, 131, 129, 112, 61, 119, 120, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 129, 60, 60, 120, 64, 118, 61, 13, 242, 236, 60, 191, 3, 141, 60, 122, 211, 25, 62, 168, 86, 17, 61, 144, 185, 88, 189, 194, 213, 130, 189, 178, 53, 13, 190, 136, 60, 15, 190, 47, 196, 247, 59, 37, 196, 114, 187, 130, 230, 217, 189, 220, 202, 58, 189, 57, 95, 14, 62, 229, 157, 238, 187, 130, 187, 171, 189, 136, 5, 166, 189, 87, 192, 228, 189, 125, 88, 112, 189, 244, 144, 196, 61, 47, 221, 139, 189, 67, 125, 51, 190, 72, 93, 72, 61, 134, 156, 131, 61, 45, 14, 201, 189, 61, 139, 254, 61, 216, 112, 69, 189, 42, 244, 52, 190, 225, 22, 28, 190, 206, 95, 178, 187, 83, 57, 77, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 63, 42, 59, 39, 152, 50, 62, 21, 211, 217, 188, 102, 7, 169, 187, 133, 87, 155, 189, 243, 15, 192, 61, 151, 238, 217, 60, 242, 217, 2, 190, 203, 73, 38, 62, 160, 211, 3, 190, 239, 31, 132, 61, 232, 119, 121, 189, 110, 175, 203, 189, 58, 207, 70, 61, 147, 216, 248, 61, 134, 37, 40, 61, 236, 131, 44, 62, 140, 98, 205, 189, 113, 51, 228, 189, 54, 228, 0, 61, 137, 39, 33, 189, 119, 218, 236, 189, 40, 152, 182, 61, 14, 206, 223, 61, 248, 247, 56, 189, 161, 16, 210, 61, 24, 41, 157, 188, 229, 235, 146, 59, 215, 106, 78, 61, 72, 116, 2, 190, 34, 228, 23, 189, 96, 45, 131, 61, 128, 146, 39, 190, 13, 189, 176, 189, 201, 46, 11, 190, 208, 108, 225, 189, 27, 11, 45, 190, 167, 249, 166, 189, 108, 103, 171, 61, 156, 139, 30, 190, 189, 87, 134, 189, 236, 50, 225, 189, 154, 204, 165, 189, 193, 4, 41, 190, 185, 171, 11, 190, 152, 147, 60, 60, 156, 88, 82, 61, 29, 239, 170, 61, 151, 94, 250, 189, 70, 64, 45, 190, 79, 229, 56, 61, 102, 241, 68, 189, 148, 173, 230, 61, 162, 227, 19, 62, 200, 82, 50, 62, 69, 122, 249, 61, 112, 107, 161, 189, 253, 85, 137, 61, 188, 222, 153, 189, 137, 245, 26, 62, 101, 90, 216, 189, 206, 155, 11, 61, 172, 205, 195, 61, 82, 186, 253, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 200, 245, 61, 200, 226, 110, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 21, 135, 62, 32, 24, 160, 63, 183, 99, 248, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 173, 62, 62, 159, 140, 201, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}