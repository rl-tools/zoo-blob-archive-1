// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 39, 70, 63, 79, 92, 53, 190, 140, 227, 90, 190, 102, 189, 202, 190, 104, 87, 23, 190, 219, 20, 243, 190, 188, 179, 141, 190, 109, 211, 127, 191, 208, 122, 55, 190, 45, 131, 92, 61, 241, 247, 51, 191, 98, 155, 249, 190, 141, 41, 26, 191, 183, 67, 34, 63, 194, 16, 28, 63, 237, 173, 203, 62, 92, 230, 157, 191, 31, 23, 16, 191, 127, 84, 145, 62, 6, 253, 68, 191, 85, 68, 195, 190, 228, 4, 30, 63, 233, 200, 231, 62, 252, 138, 79, 189, 121, 235, 21, 190, 209, 59, 96, 188, 189, 219, 183, 62, 112, 94, 255, 61, 199, 156, 36, 189, 54, 167, 55, 191, 141, 18, 115, 190, 111, 100, 150, 190, 145, 219, 227, 62, 162, 153, 146, 189, 55, 46, 77, 189, 173, 223, 0, 191, 130, 147, 107, 191, 35, 222, 246, 62, 104, 55, 37, 62, 173, 171, 63, 63, 135, 134, 92, 191, 248, 237, 121, 190, 125, 37, 154, 190, 43, 126, 116, 63, 224, 193, 77, 62, 11, 74, 21, 191, 242, 138, 198, 190, 147, 5, 20, 62, 252, 164, 219, 62, 43, 121, 39, 62, 165, 42, 21, 191, 188, 255, 196, 190, 253, 108, 156, 191, 179, 59, 81, 190, 253, 154, 4, 63, 198, 64, 171, 62, 50, 146, 69, 62, 211, 212, 182, 61, 72, 40, 153, 63, 168, 136, 251, 62, 103, 36, 168, 190, 125, 64, 102, 191, 2, 206, 202, 187, 220, 83, 24, 63, 202, 4, 45, 191, 178, 248, 0, 191, 240, 23, 168, 190, 58, 21, 144, 190, 52, 197, 162, 189, 140, 61, 51, 191, 35, 152, 147, 62, 105, 131, 78, 62, 70, 129, 57, 63, 142, 128, 159, 63, 196, 83, 151, 62, 115, 155, 27, 62, 74, 61, 116, 191, 63, 83, 136, 62, 56, 226, 43, 191, 145, 9, 80, 190, 14, 35, 195, 62, 248, 205, 100, 63, 202, 93, 219, 61, 132, 242, 116, 61, 101, 185, 177, 190, 200, 85, 71, 63, 147, 217, 67, 62, 154, 113, 234, 62, 129, 219, 4, 191, 9, 95, 27, 63, 148, 239, 146, 62, 23, 94, 132, 191, 216, 22, 161, 62, 243, 77, 64, 63, 26, 234, 89, 191, 36, 97, 119, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 188, 51, 191, 89, 212, 139, 189, 149, 202, 186, 59, 193, 116, 142, 189, 4, 101, 163, 61, 114, 37, 145, 62, 149, 246, 65, 62, 182, 196, 46, 62, 46, 95, 195, 61, 86, 194, 167, 62, 206, 100, 113, 189, 120, 182, 65, 191, 194, 145, 231, 62, 227, 184, 142, 190, 238, 187, 1, 63, 163, 41, 128, 189, 63, 246, 2, 63, 182, 67, 254, 189, 213, 56, 215, 62, 79, 213, 95, 190, 29, 202, 32, 62, 116, 112, 210, 190, 169, 171, 77, 63, 69, 143, 49, 63, 124, 0, 241, 60, 19, 96, 8, 62, 15, 228, 216, 190, 115, 114, 5, 62, 222, 34, 5, 63, 63, 88, 125, 190, 166, 58, 147, 62, 155, 78, 103, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 17, 8, 191, 161, 146, 44, 62, 124, 35, 94, 190, 73, 74, 174, 189, 12, 165, 12, 191, 57, 90, 129, 187, 135, 18, 177, 188, 220, 142, 121, 62, 93, 205, 25, 191, 246, 220, 13, 60, 1, 146, 107, 190, 199, 157, 18, 62, 21, 47, 221, 190, 100, 227, 245, 190, 31, 10, 116, 190, 19, 138, 210, 187, 29, 56, 56, 62, 215, 186, 32, 62, 129, 187, 183, 62, 180, 230, 176, 191, 38, 181, 179, 190, 108, 44, 54, 190, 79, 155, 4, 61, 241, 135, 7, 191, 100, 46, 173, 62, 128, 155, 121, 62, 149, 76, 181, 189, 132, 68, 28, 62, 74, 213, 176, 190, 90, 51, 238, 62, 176, 113, 14, 62, 133, 62, 78, 190, 153, 173, 0, 189, 255, 15, 227, 62, 168, 80, 89, 190, 208, 225, 202, 190, 225, 59, 179, 62, 70, 240, 164, 190, 158, 252, 4, 191, 3, 89, 162, 62, 253, 164, 156, 62, 124, 228, 137, 61, 159, 148, 125, 62, 108, 200, 76, 190, 169, 216, 118, 62, 99, 91, 21, 191, 85, 155, 25, 62, 48, 77, 174, 61, 213, 129, 168, 61, 174, 133, 83, 190, 62, 98, 46, 62, 102, 90, 50, 190, 84, 41, 131, 190, 12, 6, 243, 190, 66, 78, 55, 190, 142, 110, 36, 190, 72, 141, 44, 61, 120, 99, 145, 62, 162, 90, 20, 62, 162, 91, 165, 190, 15, 199, 253, 61, 157, 224, 85, 190, 191, 88, 91, 190, 152, 200, 57, 190, 141, 59, 209, 190, 252, 222, 37, 60, 222, 45, 72, 60, 9, 229, 0, 190, 158, 78, 108, 190, 80, 163, 222, 188, 207, 143, 208, 187, 5, 57, 138, 62, 153, 43, 152, 189, 98, 95, 79, 62, 228, 88, 45, 190, 231, 253, 227, 61, 49, 2, 5, 190, 77, 68, 76, 191, 205, 215, 65, 62, 50, 110, 63, 190, 26, 15, 128, 61, 236, 171, 10, 190, 24, 129, 1, 62, 87, 169, 108, 190, 127, 90, 104, 190, 210, 12, 252, 190, 223, 248, 71, 62, 80, 129, 131, 190, 162, 210, 158, 61, 39, 94, 212, 61, 165, 165, 234, 190, 114, 4, 179, 62, 233, 101, 108, 62, 229, 81, 158, 62, 85, 251, 207, 62, 30, 240, 24, 191, 13, 43, 32, 190, 198, 96, 15, 62, 131, 159, 41, 62, 74, 126, 163, 188, 238, 73, 90, 190, 90, 238, 78, 62, 239, 147, 95, 189, 94, 89, 30, 62, 35, 31, 222, 61, 175, 179, 183, 189, 239, 58, 127, 62, 174, 18, 215, 189, 38, 132, 56, 191, 139, 121, 23, 189, 178, 141, 170, 61, 102, 225, 109, 190, 194, 131, 186, 189, 104, 244, 7, 63, 35, 137, 210, 62, 124, 149, 169, 190, 87, 52, 196, 62, 80, 121, 181, 60, 43, 55, 175, 189, 120, 45, 232, 190, 14, 31, 179, 62, 72, 33, 182, 61, 250, 123, 83, 188, 2, 31, 183, 62, 41, 57, 185, 189, 232, 234, 165, 62, 157, 137, 34, 62, 31, 137, 72, 62, 123, 227, 23, 191, 47, 149, 121, 188, 72, 40, 21, 190, 186, 2, 26, 61, 249, 87, 1, 62, 114, 49, 211, 61, 189, 183, 183, 61, 190, 120, 0, 190, 49, 126, 20, 189, 53, 111, 194, 189, 177, 122, 14, 190, 217, 134, 72, 61, 145, 183, 102, 62, 215, 41, 151, 190, 244, 61, 169, 62, 137, 11, 36, 62, 140, 243, 34, 62, 232, 14, 52, 62, 106, 119, 152, 62, 50, 148, 159, 61, 241, 10, 187, 60, 122, 155, 104, 190, 34, 88, 1, 62, 19, 157, 192, 188, 168, 164, 245, 61, 0, 253, 156, 61, 234, 93, 26, 190, 37, 115, 169, 60, 127, 198, 21, 62, 163, 200, 109, 61, 46, 166, 0, 190, 136, 196, 144, 190, 97, 5, 39, 60, 89, 139, 37, 60, 203, 124, 135, 191, 60, 98, 113, 62, 166, 240, 39, 187, 2, 4, 38, 190, 223, 98, 153, 61, 181, 42, 111, 62, 4, 86, 93, 191, 23, 136, 64, 62, 28, 217, 203, 190, 132, 38, 28, 189, 178, 104, 144, 191, 169, 97, 28, 59, 184, 118, 152, 190, 39, 135, 0, 190, 115, 102, 81, 62, 70, 228, 99, 191, 138, 40, 212, 62, 12, 24, 143, 191, 73, 100, 191, 190, 157, 185, 189, 60, 8, 62, 61, 190, 143, 149, 32, 191, 222, 25, 47, 62, 6, 198, 104, 60, 200, 57, 199, 189, 228, 181, 47, 62, 111, 44, 42, 191, 127, 143, 240, 190, 24, 119, 223, 62, 158, 33, 182, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 106, 78, 248, 190, 55, 44, 227, 189, 75, 87, 189, 61, 3, 223, 88, 190, 141, 84, 250, 60, 103, 64, 151, 61, 194, 48, 4, 61, 83, 219, 48, 61, 137, 254, 146, 189, 90, 143, 185, 61, 239, 69, 70, 189, 70, 249, 7, 60, 43, 124, 228, 61, 87, 101, 160, 190, 110, 155, 97, 61, 230, 68, 57, 62, 189, 228, 57, 62, 118, 6, 8, 190, 209, 125, 168, 60, 80, 164, 135, 59, 235, 71, 128, 62, 251, 119, 94, 190, 144, 3, 83, 62, 169, 167, 226, 60, 145, 250, 213, 61, 45, 166, 129, 190, 116, 225, 143, 187, 152, 130, 188, 59, 90, 113, 149, 61, 162, 116, 134, 61, 135, 89, 65, 62, 74, 168, 216, 190, 80, 224, 20, 190, 36, 26, 13, 190, 104, 168, 224, 189, 75, 209, 12, 62, 67, 143, 145, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 47, 29, 53, 61, 157, 36, 226, 189, 21, 10, 212, 61, 39, 205, 201, 186, 44, 108, 190, 61, 190, 222, 222, 188, 71, 19, 35, 190, 86, 138, 61, 188, 228, 252, 104, 189, 124, 31, 26, 190, 32, 138, 132, 189, 6, 79, 31, 190, 119, 207, 202, 61, 99, 149, 20, 190, 72, 83, 49, 61, 216, 128, 237, 61, 88, 111, 44, 190, 238, 146, 50, 190, 216, 21, 52, 190, 140, 236, 150, 61, 215, 12, 19, 60, 243, 33, 193, 189, 139, 131, 227, 189, 162, 102, 180, 189, 39, 9, 63, 191, 118, 48, 26, 62, 58, 173, 124, 62, 126, 74, 35, 189, 139, 199, 217, 188, 15, 185, 163, 61, 12, 17, 42, 62, 11, 99, 13, 62, 102, 209, 98, 189, 64, 138, 181, 189, 105, 133, 71, 189, 184, 232, 29, 62, 89, 232, 188, 61, 21, 34, 224, 190, 135, 210, 136, 186, 195, 87, 8, 61, 178, 170, 28, 62, 187, 143, 86, 62, 26, 27, 18, 62, 52, 222, 167, 61, 232, 138, 52, 62, 187, 72, 178, 190, 245, 0, 138, 62, 118, 49, 110, 61, 194, 231, 37, 62, 205, 102, 203, 189, 181, 39, 184, 189, 232, 241, 78, 62, 28, 83, 177, 62, 139, 201, 158, 61, 141, 171, 117, 61, 16, 20, 30, 191, 31, 141, 31, 62, 238, 144, 129, 62, 65, 140, 7, 62, 159, 13, 134, 191, 158, 129, 65, 62, 252, 8, 2, 191, 114, 200, 211, 190, 39, 18, 35, 190, 56, 19, 30, 62, 34, 184, 242, 190, 253, 10, 2, 63, 235, 167, 134, 190, 13, 149, 32, 62, 125, 62, 94, 191, 232, 34, 69, 61, 117, 8, 87, 62, 133, 16, 22, 191, 67, 182, 2, 189, 114, 14, 229, 189, 89, 154, 37, 191, 19, 202, 7, 189, 220, 123, 164, 190, 253, 131, 148, 62, 189, 112, 25, 62, 143, 64, 43, 191, 56, 227, 14, 63, 18, 255, 248, 62, 33, 173, 13, 190, 43, 94, 168, 61, 193, 77, 226, 190, 30, 49, 173, 189, 236, 148, 211, 189, 240, 47, 7, 189, 1, 241, 122, 60, 35, 144, 6, 61, 171, 200, 153, 186, 197, 241, 196, 189, 79, 101, 44, 190, 180, 98, 237, 61, 238, 89, 15, 190, 84, 94, 23, 61, 123, 51, 253, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 127, 102, 164, 189, 120, 228, 4, 189, 201, 180, 190, 189, 156, 216, 29, 61, 171, 157, 169, 189, 126, 69, 138, 61, 10, 92, 153, 189, 254, 165, 171, 61, 50, 163, 114, 61, 17, 114, 178, 61, 158, 222, 182, 189, 204, 70, 151, 189, 177, 57, 26, 190, 240, 177, 35, 62, 179, 2, 145, 61, 28, 204, 231, 189, 85, 130, 183, 189, 226, 184, 195, 61, 132, 31, 253, 61, 40, 46, 244, 60, 218, 78, 158, 62, 16, 49, 76, 188, 27, 121, 162, 190, 92, 121, 124, 62, 5, 25, 135, 189, 204, 98, 123, 190, 64, 116, 6, 191, 255, 151, 89, 62, 209, 55, 11, 190, 159, 33, 190, 62, 45, 216, 17, 190, 5, 12, 36, 62, 225, 36, 244, 60, 148, 75, 251, 61, 250, 86, 24, 61, 127, 69, 108, 190, 79, 209, 186, 61, 36, 102, 143, 61, 179, 96, 236, 61, 129, 89, 37, 62, 186, 163, 205, 188, 167, 183, 165, 61, 101, 40, 9, 62, 83, 227, 76, 189, 15, 153, 214, 62, 163, 22, 166, 62, 33, 55, 204, 190, 197, 233, 239, 60, 240, 221, 212, 61, 137, 220, 158, 61, 233, 53, 93, 61, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 228, 165, 126, 62, 46, 228, 38, 190, 80, 14, 141, 191, 30, 82, 42, 62, 210, 100, 81, 191, 140, 195, 9, 191, 25, 31, 18, 191, 186, 72, 121, 62, 91, 108, 120, 190, 103, 76, 74, 62, 151, 237, 109, 190, 230, 83, 84, 62, 146, 193, 171, 190, 185, 39, 83, 60, 34, 223, 137, 189, 61, 38, 186, 190, 101, 68, 184, 61, 5, 44, 181, 190, 68, 145, 205, 190, 220, 119, 139, 190, 199, 231, 150, 189, 69, 21, 103, 62, 143, 246, 138, 62, 193, 126, 32, 191, 146, 72, 135, 62, 190, 127, 75, 62, 173, 113, 129, 190, 130, 198, 246, 61, 235, 231, 30, 191, 140, 10, 195, 190, 126, 2, 157, 189, 119, 28, 129, 62, 184, 77, 204, 61, 171, 23, 120, 60, 101, 247, 46, 62, 190, 121, 210, 190, 187, 232, 121, 62, 200, 167, 172, 61, 36, 178, 36, 62, 15, 39, 165, 190, 219, 44, 128, 62, 30, 186, 38, 62, 215, 63, 158, 62, 185, 4, 19, 190, 85, 38, 144, 189, 191, 21, 1, 191, 154, 209, 3, 62, 220, 190, 201, 62, 208, 38, 59, 62, 9, 105, 220, 60, 13, 160, 25, 191, 85, 228, 139, 60, 99, 41, 114, 62, 186, 52, 15, 62, 162, 19, 43, 61, 75, 1, 160, 190, 73, 148, 16, 62, 82, 189, 42, 187, 129, 140, 54, 190, 62, 73, 26, 191, 97, 55, 235, 61, 138, 202, 10, 63, 154, 218, 131, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 94, 119, 195, 189, 223, 238, 131, 189, 91, 149, 189, 61, 188, 59, 194, 61, 65, 222, 132, 189, 255, 30, 32, 190, 205, 133, 226, 189, 129, 189, 152, 61, 249, 76, 159, 61, 29, 61, 15, 62, 159, 196, 27, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 7, 124, 121, 188, 135, 59, 86, 62, 175, 167, 224, 189, 229, 6, 50, 62, 249, 185, 45, 191, 60, 80, 69, 190, 96, 47, 159, 62, 50, 43, 254, 190, 192, 51, 50, 191, 138, 74, 2, 191, 245, 199, 38, 60, 254, 198, 90, 62, 82, 32, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 62, 6, 227, 61, 135, 77, 175, 190, 109, 140, 163, 61, 153, 168, 42, 190, 152, 97, 133, 62, 199, 80, 192, 189, 102, 135, 249, 188, 64, 75, 5, 191, 126, 50, 165, 62, 210, 227, 22, 190, 142, 198, 157, 62, 34, 103, 54, 61, 25, 53, 74, 189, 204, 173, 13, 62, 95, 246, 156, 189, 44, 120, 232, 61, 253, 44, 27, 190, 233, 136, 20, 62, 20, 217, 183, 61, 200, 249, 137, 189, 247, 91, 139, 188, 153, 126, 161, 61, 229, 211, 60, 190, 154, 5, 159, 189, 230, 141, 4, 190, 230, 137, 18, 62, 122, 57, 46, 188, 106, 91, 207, 190, 222, 94, 6, 190, 88, 163, 186, 61, 30, 169, 38, 190, 171, 206, 149, 62, 43, 41, 16, 190, 65, 211, 181, 60, 33, 104, 164, 189, 151, 207, 116, 61, 24, 216, 154, 190, 6, 115, 33, 59, 143, 153, 150, 61, 43, 90, 26, 61, 8, 119, 146, 190, 142, 44, 176, 61, 174, 94, 0, 188, 105, 73, 113, 188, 171, 146, 62, 191, 54, 30, 181, 189, 144, 166, 227, 190, 244, 49, 109, 188, 66, 12, 181, 61, 23, 38, 3, 62, 115, 145, 155, 62, 43, 122, 241, 190, 94, 97, 128, 190, 49, 173, 127, 188, 208, 5, 254, 189, 109, 156, 77, 188, 75, 189, 225, 61, 62, 40, 131, 62, 221, 176, 178, 61, 201, 143, 53, 190, 124, 12, 44, 191, 173, 228, 203, 188, 25, 124, 86, 62, 45, 169, 183, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 139, 61, 166, 189, 218, 64, 148, 190, 212, 43, 128, 190, 160, 161, 90, 61, 191, 164, 165, 61, 233, 153, 69, 190, 173, 69, 163, 189, 133, 74, 12, 190, 39, 112, 4, 189, 91, 213, 176, 61, 59, 31, 5, 62, 117, 100, 115, 190, 210, 192, 201, 61, 189, 175, 1, 62, 130, 143, 136, 62, 141, 31, 2, 190, 116, 145, 54, 189, 32, 228, 208, 189, 154, 56, 5, 190, 23, 51, 56, 191, 49, 224, 27, 190, 199, 27, 121, 62, 69, 250, 80, 62, 217, 236, 144, 61, 185, 200, 55, 191, 113, 94, 73, 61, 115, 42, 113, 61, 45, 58, 163, 190, 173, 244, 141, 62, 108, 30, 162, 190, 234, 156, 60, 190, 225, 41, 12, 190, 237, 23, 72, 190, 28, 150, 26, 62, 115, 183, 204, 61, 217, 148, 172, 189, 81, 72, 51, 62, 73, 0, 124, 189, 213, 197, 50, 190, 162, 255, 11, 190, 26, 25, 36, 190, 81, 25, 46, 187, 68, 241, 7, 190, 35, 155, 183, 60, 118, 217, 66, 61, 190, 182, 102, 189, 173, 49, 34, 189, 47, 54, 116, 61, 31, 8, 161, 61, 92, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 221, 248, 13, 190, 25, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 94, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 82, 39, 154, 61, 106, 44, 33, 61, 59, 97, 230, 190, 200, 67, 203, 190, 116, 190, 254, 189, 81, 121, 146, 189, 143, 96, 131, 62, 196, 191, 178, 62, 71, 158, 191, 189, 191, 222, 110, 189, 5, 175, 29, 190, 86, 117, 30, 61, 103, 128, 225, 190, 75, 35, 11, 190, 31, 8, 234, 62, 128, 22, 183, 189, 111, 79, 56, 190, 70, 233, 24, 190, 0, 163, 153, 189, 213, 250, 0, 63, 203, 75, 191, 58, 173, 75, 190, 61, 137, 148, 8, 187, 126, 250, 160, 189, 112, 138, 2, 62, 54, 241, 51, 189, 193, 71, 243, 59, 24, 81, 242, 61, 172, 243, 232, 62, 229, 120, 131, 190, 19, 56, 43, 62, 70, 54, 167, 62, 234, 112, 218, 62, 168, 248, 92, 190, 167, 240, 19, 191, 29, 138, 20, 189, 76, 187, 0, 190, 33, 204, 21, 191, 193, 22, 27, 190, 99, 180, 18, 190, 192, 27, 179, 61, 164, 205, 137, 190, 196, 198, 253, 189, 237, 100, 211, 60, 159, 151, 215, 190, 79, 34, 215, 190, 78, 120, 20, 62, 131, 0, 167, 190, 241, 60, 89, 62, 113, 249, 147, 190, 145, 208, 20, 62, 248, 190, 255, 190, 144, 115, 79, 62, 183, 151, 218, 62, 130, 158, 239, 189, 4, 80, 45, 62, 106, 28, 154, 62, 80, 78, 147, 188, 56, 43, 199, 62, 83, 205, 153, 190, 130, 27, 232, 190, 27, 122, 113, 190, 148, 168, 195, 189, 163, 201, 220, 62, 104, 185, 4, 62, 186, 240, 79, 189, 74, 145, 250, 61, 91, 48, 91, 190, 240, 169, 221, 190, 197, 188, 192, 60, 227, 168, 78, 191, 21, 92, 28, 191, 53, 245, 1, 62, 126, 232, 30, 190, 173, 80, 58, 62, 194, 224, 211, 189, 129, 124, 45, 190, 168, 179, 82, 62, 98, 242, 205, 189, 179, 126, 130, 62, 37, 214, 37, 62, 254, 210, 109, 62, 110, 146, 103, 190, 119, 134, 229, 185, 47, 220, 183, 190, 23, 83, 137, 189, 44, 6, 223, 189, 158, 165, 113, 62, 127, 34, 241, 60, 229, 167, 144, 190, 137, 76, 176, 189, 41, 87, 137, 62, 81, 97, 63, 188, 73, 135, 92, 61, 150, 137, 152, 189, 200, 239, 155, 189, 131, 94, 54, 190, 154, 86, 187, 190, 155, 114, 107, 187, 46, 244, 80, 62, 9, 225, 37, 62, 18, 148, 253, 190, 102, 24, 237, 60, 163, 199, 196, 61, 8, 10, 185, 61, 76, 181, 136, 190, 167, 181, 69, 61, 113, 253, 39, 191, 225, 91, 166, 60, 155, 28, 7, 190, 173, 72, 90, 191, 175, 57, 95, 188, 134, 179, 100, 62, 28, 82, 228, 61, 65, 50, 148, 62, 13, 244, 165, 62, 204, 198, 212, 190, 162, 29, 17, 63, 234, 91, 238, 190, 136, 99, 22, 62, 28, 12, 182, 190, 102, 98, 26, 62, 186, 44, 141, 190, 9, 212, 53, 191, 56, 194, 156, 62, 211, 245, 122, 61, 26, 243, 105, 190, 102, 233, 225, 60, 253, 60, 9, 191, 108, 85, 25, 191, 189, 15, 7, 61, 112, 52, 49, 62, 146, 156, 75, 188, 46, 115, 144, 189, 222, 162, 11, 191, 75, 161, 49, 191, 128, 179, 168, 62, 96, 200, 118, 188, 120, 29, 126, 62, 88, 167, 139, 190, 37, 169, 231, 60, 238, 218, 209, 189, 64, 139, 55, 191, 210, 110, 144, 62, 72, 17, 12, 190, 83, 115, 110, 61, 199, 158, 156, 188, 159, 169, 6, 62, 105, 156, 0, 63, 22, 225, 30, 191, 101, 188, 205, 190, 235, 93, 210, 190, 131, 114, 84, 61, 115, 129, 203, 62, 135, 20, 76, 190, 195, 18, 86, 189, 7, 57, 15, 62, 143, 242, 74, 61, 142, 196, 232, 61, 187, 171, 241, 189, 22, 83, 67, 191, 212, 133, 231, 190, 232, 8, 3, 191, 91, 134, 81, 60, 29, 1, 255, 188, 7, 147, 80, 61, 83, 213, 148, 62, 82, 222, 123, 189, 86, 99, 251, 61, 96, 87, 59, 62, 186, 202, 44, 189, 204, 244, 46, 61, 81, 216, 158, 190, 148, 209, 157, 190, 221, 149, 23, 189, 150, 72, 2, 191, 55, 180, 215, 61, 13, 62, 185, 189, 129, 146, 68, 62, 216, 178, 150, 62, 196, 33, 20, 188, 88, 124, 26, 62, 54, 230, 120, 189, 148, 150, 8, 62, 218, 61, 162, 190, 10, 135, 1, 190, 87, 91, 172, 62, 17, 5, 156, 62, 205, 199, 59, 62, 134, 113, 23, 191, 237, 177, 148, 61, 228, 223, 77, 189, 174, 191, 5, 63, 28, 20, 175, 190, 24, 81, 233, 188, 242, 86, 168, 62, 180, 173, 141, 61, 19, 43, 1, 191, 173, 150, 76, 62, 210, 220, 178, 187, 19, 214, 186, 188, 123, 127, 31, 190, 45, 116, 26, 62, 133, 44, 235, 190, 196, 190, 240, 62, 223, 188, 40, 190, 199, 50, 242, 187, 148, 217, 17, 62, 62, 224, 146, 190, 177, 56, 172, 62, 200, 22, 145, 62, 13, 63, 74, 62, 101, 138, 55, 60, 184, 40, 209, 62, 7, 113, 243, 190, 66, 53, 109, 62, 138, 130, 157, 190, 218, 236, 132, 62, 154, 116, 159, 190, 166, 140, 237, 190, 15, 52, 216, 62, 210, 158, 129, 62, 87, 186, 200, 188, 22, 150, 250, 61, 4, 183, 226, 190, 41, 217, 34, 191, 26, 81, 27, 62, 227, 209, 97, 62, 230, 141, 215, 61, 142, 193, 197, 190, 178, 255, 139, 62, 186, 176, 249, 61, 24, 110, 253, 60, 180, 236, 252, 190, 176, 53, 9, 62, 205, 40, 51, 191, 74, 241, 169, 61, 147, 95, 82, 61, 224, 249, 37, 191, 120, 81, 201, 61, 77, 125, 176, 61, 254, 72, 137, 189, 132, 40, 17, 63, 7, 38, 194, 188, 67, 72, 230, 189, 230, 120, 52, 63, 60, 56, 22, 191, 206, 2, 12, 189, 163, 43, 175, 190, 186, 67, 47, 62, 28, 16, 64, 191, 211, 141, 6, 191, 228, 160, 3, 63, 212, 64, 250, 61, 179, 104, 174, 190, 193, 86, 48, 188, 71, 25, 108, 191, 76, 199, 166, 190, 196, 117, 66, 188, 206, 246, 37, 190, 252, 176, 183, 190, 96, 112, 50, 186, 10, 221, 93, 61, 185, 199, 129, 190, 116, 104, 166, 189, 184, 152, 130, 62, 45, 239, 236, 189, 251, 169, 201, 62, 62, 20, 245, 190, 252, 108, 47, 62, 126, 187, 160, 60, 169, 107, 14, 62, 84, 76, 148, 60, 29, 101, 165, 189, 24, 18, 3, 189, 83, 225, 136, 62, 166, 242, 80, 190, 247, 1, 91, 190, 244, 198, 180, 61, 166, 239, 42, 61, 189, 45, 131, 188, 229, 132, 16, 62, 151, 92, 21, 62, 76, 68, 148, 61, 216, 202, 88, 62, 191, 23, 24, 190, 51, 191, 2, 61, 145, 65, 180, 189, 78, 75, 18, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 246, 218, 61, 22, 163, 72, 61, 225, 13, 21, 62, 136, 131, 229, 61, 133, 220, 134, 62, 188, 74, 142, 61, 134, 162, 153, 189, 116, 93, 155, 61, 86, 135, 66, 190, 250, 226, 13, 61, 78, 47, 64, 62, 174, 75, 246, 188, 128, 232, 137, 61, 220, 202, 58, 189, 112, 6, 136, 62, 243, 60, 137, 60, 195, 142, 113, 190, 44, 63, 185, 189, 139, 26, 48, 190, 250, 133, 37, 188, 222, 228, 154, 61, 251, 81, 92, 189, 49, 203, 78, 190, 198, 66, 86, 62, 100, 19, 40, 62, 145, 233, 69, 61, 100, 65, 104, 62, 254, 236, 108, 190, 214, 25, 13, 190, 236, 246, 2, 189, 82, 98, 31, 61, 140, 212, 184, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 56, 158, 61, 205, 81, 159, 62, 38, 0, 36, 191, 245, 181, 122, 190, 235, 200, 254, 189, 244, 64, 10, 63, 39, 186, 152, 188, 176, 118, 236, 189, 160, 101, 235, 61, 251, 151, 151, 190, 140, 58, 101, 63, 166, 39, 231, 188, 248, 169, 223, 190, 58, 207, 70, 61, 72, 185, 123, 63, 60, 148, 197, 62, 17, 99, 84, 63, 226, 37, 203, 189, 217, 6, 236, 189, 32, 227, 0, 62, 175, 47, 242, 188, 211, 93, 35, 191, 194, 22, 52, 61, 184, 91, 236, 62, 189, 218, 33, 63, 63, 162, 11, 63, 145, 86, 21, 191, 116, 148, 255, 62, 62, 204, 200, 62, 219, 182, 242, 190, 219, 179, 16, 191, 140, 102, 253, 60, 241, 133, 52, 191, 53, 64, 122, 190, 224, 76, 49, 189, 150, 178, 151, 190, 108, 54, 113, 190, 58, 147, 148, 190, 58, 52, 185, 61, 49, 130, 16, 190, 195, 239, 146, 189, 59, 147, 150, 189, 223, 43, 55, 189, 61, 237, 36, 190, 114, 98, 81, 61, 152, 147, 60, 60, 182, 17, 95, 62, 72, 64, 44, 61, 97, 185, 240, 60, 134, 107, 45, 190, 31, 167, 56, 62, 73, 188, 50, 189, 241, 219, 156, 61, 227, 193, 154, 61, 105, 103, 34, 62, 150, 250, 225, 61, 48, 11, 242, 61, 33, 161, 59, 62, 139, 184, 200, 189, 8, 244, 151, 62, 192, 106, 170, 58, 87, 85, 111, 189, 42, 114, 130, 62, 171, 118, 47, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 128, 139, 186, 207, 139, 78, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 222, 185, 191, 216, 80, 187, 190, 105, 1, 115, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 197, 76, 63, 86, 252, 182, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}