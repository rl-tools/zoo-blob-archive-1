// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 106, 73, 63, 53, 58, 53, 190, 151, 58, 86, 190, 189, 103, 145, 190, 136, 174, 41, 190, 26, 168, 241, 190, 122, 178, 108, 190, 224, 252, 133, 191, 234, 254, 56, 190, 178, 220, 90, 61, 138, 98, 68, 191, 128, 249, 242, 190, 54, 166, 26, 191, 50, 5, 84, 63, 157, 174, 13, 63, 10, 244, 233, 62, 14, 167, 155, 191, 239, 194, 12, 191, 205, 36, 178, 62, 177, 155, 68, 191, 153, 73, 188, 190, 175, 227, 32, 63, 53, 101, 13, 63, 82, 85, 132, 189, 55, 206, 12, 190, 230, 207, 215, 61, 144, 67, 170, 62, 37, 207, 17, 61, 220, 147, 147, 61, 22, 166, 58, 191, 157, 153, 91, 190, 219, 4, 71, 190, 6, 16, 223, 62, 32, 164, 123, 61, 107, 166, 133, 189, 192, 194, 2, 191, 113, 59, 98, 191, 171, 1, 13, 63, 142, 7, 45, 62, 0, 46, 63, 63, 253, 192, 107, 191, 77, 52, 130, 190, 41, 119, 154, 190, 111, 118, 121, 63, 236, 152, 94, 62, 240, 79, 12, 191, 214, 178, 245, 190, 162, 226, 6, 62, 45, 53, 170, 62, 143, 172, 71, 62, 47, 38, 23, 191, 191, 181, 154, 190, 138, 200, 162, 191, 58, 253, 92, 190, 58, 174, 6, 63, 80, 232, 238, 62, 214, 122, 41, 62, 52, 111, 151, 61, 48, 42, 173, 63, 125, 122, 236, 62, 191, 184, 157, 190, 59, 214, 99, 191, 154, 243, 21, 189, 39, 13, 28, 63, 73, 72, 65, 191, 253, 151, 244, 190, 198, 182, 169, 190, 90, 199, 157, 190, 27, 173, 171, 189, 100, 126, 50, 191, 158, 217, 114, 62, 90, 46, 61, 62, 186, 39, 55, 63, 229, 39, 163, 63, 117, 31, 150, 62, 51, 217, 12, 62, 249, 194, 130, 191, 252, 221, 78, 62, 166, 46, 47, 191, 199, 100, 41, 190, 153, 217, 196, 62, 22, 210, 106, 63, 100, 227, 20, 62, 47, 79, 194, 60, 207, 103, 177, 190, 230, 77, 76, 63, 45, 87, 73, 62, 32, 236, 227, 62, 39, 91, 0, 191, 139, 4, 25, 63, 250, 231, 172, 62, 86, 132, 131, 191, 51, 210, 142, 62, 171, 161, 64, 63, 170, 16, 101, 191, 30, 109, 122, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 142, 52, 191, 80, 61, 248, 188, 104, 16, 181, 189, 170, 157, 227, 189, 64, 62, 164, 61, 186, 48, 128, 62, 27, 64, 63, 62, 233, 41, 39, 62, 162, 253, 184, 61, 235, 83, 197, 62, 68, 149, 2, 190, 231, 211, 48, 191, 255, 171, 13, 63, 145, 62, 146, 190, 89, 113, 4, 63, 147, 222, 155, 189, 73, 47, 17, 63, 146, 238, 22, 190, 237, 142, 220, 62, 12, 169, 96, 190, 146, 190, 5, 62, 152, 108, 206, 190, 82, 2, 80, 63, 3, 136, 59, 63, 242, 244, 244, 60, 0, 28, 220, 61, 144, 219, 236, 190, 64, 230, 3, 62, 35, 228, 8, 63, 172, 208, 151, 190, 26, 40, 152, 62, 175, 111, 109, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 22, 1, 191, 122, 186, 35, 62, 79, 17, 129, 190, 127, 28, 138, 189, 2, 93, 254, 190, 168, 64, 138, 60, 117, 230, 46, 187, 166, 150, 130, 62, 64, 73, 6, 191, 161, 42, 115, 60, 230, 11, 19, 190, 13, 134, 1, 62, 202, 76, 245, 190, 216, 57, 234, 190, 214, 164, 147, 190, 102, 7, 88, 189, 213, 170, 63, 62, 180, 184, 207, 61, 116, 176, 191, 62, 95, 5, 203, 191, 191, 140, 172, 190, 244, 83, 38, 190, 76, 238, 87, 61, 223, 201, 10, 191, 28, 53, 153, 62, 164, 63, 129, 62, 4, 130, 8, 190, 132, 147, 56, 62, 226, 0, 206, 190, 243, 248, 2, 63, 101, 255, 32, 62, 171, 108, 51, 190, 153, 114, 85, 189, 70, 199, 252, 62, 107, 84, 8, 190, 115, 179, 238, 190, 241, 65, 173, 62, 165, 37, 221, 190, 1, 241, 43, 191, 212, 248, 216, 62, 197, 68, 150, 62, 153, 42, 229, 61, 43, 55, 111, 62, 126, 154, 101, 190, 212, 81, 99, 62, 79, 159, 46, 191, 90, 47, 25, 62, 6, 180, 131, 61, 250, 6, 233, 61, 50, 220, 23, 190, 254, 27, 55, 62, 83, 181, 38, 190, 90, 71, 127, 190, 54, 95, 61, 191, 229, 239, 101, 190, 156, 122, 55, 190, 28, 6, 156, 61, 244, 212, 128, 62, 251, 112, 2, 62, 200, 144, 151, 190, 44, 125, 247, 61, 42, 20, 88, 190, 251, 7, 108, 190, 50, 63, 186, 190, 213, 184, 236, 190, 178, 143, 135, 60, 232, 154, 191, 60, 195, 6, 9, 190, 99, 99, 117, 190, 57, 211, 21, 189, 254, 174, 32, 188, 121, 7, 137, 62, 202, 69, 178, 189, 185, 218, 92, 62, 157, 53, 69, 190, 131, 248, 194, 61, 238, 229, 180, 189, 39, 131, 86, 191, 182, 206, 87, 62, 41, 177, 129, 190, 90, 84, 151, 61, 236, 233, 180, 189, 67, 178, 7, 62, 145, 2, 121, 190, 38, 179, 194, 190, 158, 112, 250, 190, 17, 198, 92, 62, 150, 4, 127, 190, 75, 118, 173, 61, 187, 73, 204, 61, 188, 81, 255, 190, 176, 163, 182, 62, 66, 28, 129, 62, 189, 79, 145, 62, 237, 79, 198, 62, 39, 51, 33, 191, 220, 247, 181, 189, 242, 63, 14, 62, 22, 39, 65, 62, 189, 82, 166, 188, 183, 18, 83, 190, 154, 137, 61, 62, 75, 80, 138, 189, 61, 59, 13, 62, 151, 104, 5, 62, 218, 193, 182, 189, 155, 175, 140, 62, 134, 110, 210, 189, 239, 218, 60, 191, 112, 169, 97, 189, 64, 220, 190, 61, 93, 84, 98, 190, 113, 232, 198, 189, 147, 5, 14, 63, 208, 188, 202, 62, 179, 239, 167, 190, 214, 84, 183, 62, 194, 240, 22, 61, 57, 21, 213, 189, 122, 60, 231, 190, 219, 138, 176, 62, 59, 137, 8, 62, 111, 30, 60, 59, 57, 144, 178, 62, 104, 11, 169, 189, 85, 180, 177, 62, 203, 7, 57, 62, 95, 89, 56, 62, 154, 219, 26, 191, 58, 239, 143, 187, 36, 115, 56, 190, 82, 241, 239, 60, 125, 165, 4, 62, 159, 99, 152, 61, 34, 155, 134, 61, 242, 147, 4, 190, 200, 11, 228, 188, 223, 229, 171, 189, 91, 249, 10, 190, 182, 43, 95, 61, 208, 141, 121, 62, 86, 54, 194, 190, 222, 210, 178, 62, 4, 254, 18, 62, 240, 161, 39, 62, 48, 164, 15, 62, 71, 238, 153, 62, 177, 41, 157, 61, 60, 123, 212, 186, 14, 61, 115, 190, 140, 248, 12, 62, 45, 86, 153, 187, 40, 37, 250, 61, 222, 143, 198, 61, 49, 231, 42, 190, 61, 85, 58, 60, 75, 221, 38, 62, 84, 170, 127, 61, 179, 223, 253, 189, 255, 14, 181, 190, 143, 129, 42, 61, 199, 76, 249, 60, 22, 123, 152, 191, 153, 66, 137, 62, 166, 240, 39, 187, 28, 110, 10, 190, 128, 52, 201, 61, 186, 238, 124, 62, 178, 235, 111, 191, 238, 191, 81, 62, 58, 20, 126, 190, 204, 154, 169, 59, 25, 64, 168, 191, 251, 170, 199, 60, 83, 52, 185, 190, 39, 135, 0, 190, 22, 74, 97, 62, 165, 174, 135, 191, 29, 129, 218, 62, 125, 246, 185, 191, 108, 156, 30, 191, 186, 68, 56, 61, 236, 68, 46, 190, 201, 172, 80, 191, 183, 68, 40, 62, 98, 107, 187, 188, 200, 57, 199, 189, 90, 220, 63, 62, 67, 68, 60, 191, 108, 94, 228, 190, 120, 151, 225, 62, 115, 134, 226, 61, 172, 49, 191, 189, 59, 114, 222, 189, 190, 119, 43, 190, 233, 42, 205, 60, 53, 105, 229, 189, 255, 180, 204, 187, 46, 120, 207, 189, 116, 122, 250, 60, 245, 202, 203, 188, 40, 145, 10, 62, 177, 96, 18, 190, 160, 84, 15, 190, 13, 103, 137, 60, 121, 194, 202, 188, 201, 183, 16, 189, 225, 157, 220, 189, 73, 157, 249, 189, 14, 8, 19, 190, 168, 68, 203, 189, 175, 128, 145, 188, 22, 232, 242, 189, 96, 162, 5, 188, 254, 203, 28, 189, 52, 60, 188, 189, 87, 237, 180, 189, 70, 22, 54, 61, 34, 205, 243, 187, 142, 228, 232, 61, 222, 157, 27, 190, 152, 200, 43, 189, 129, 245, 226, 61, 175, 221, 40, 61, 104, 171, 252, 190, 165, 138, 228, 189, 205, 129, 148, 61, 77, 169, 95, 190, 117, 134, 5, 61, 99, 45, 135, 61, 163, 83, 235, 60, 188, 46, 85, 61, 67, 226, 134, 189, 202, 109, 206, 61, 124, 176, 65, 189, 126, 77, 203, 187, 137, 162, 5, 62, 168, 54, 180, 190, 253, 20, 146, 61, 121, 144, 45, 62, 146, 185, 68, 62, 89, 113, 26, 190, 154, 24, 21, 61, 156, 72, 104, 58, 206, 9, 119, 62, 191, 244, 94, 190, 241, 255, 112, 62, 72, 231, 56, 61, 141, 255, 227, 61, 237, 34, 102, 190, 136, 185, 143, 188, 216, 47, 130, 60, 151, 21, 179, 61, 13, 71, 135, 61, 184, 101, 77, 62, 46, 85, 231, 190, 80, 224, 20, 190, 36, 26, 13, 190, 104, 168, 224, 189, 75, 209, 12, 62, 67, 143, 145, 188, 73, 115, 163, 188, 15, 112, 68, 190, 220, 0, 144, 189, 47, 29, 53, 61, 157, 36, 226, 189, 21, 10, 212, 61, 39, 205, 201, 186, 44, 108, 190, 61, 190, 222, 222, 188, 71, 19, 35, 190, 86, 138, 61, 188, 228, 252, 104, 189, 124, 31, 26, 190, 32, 138, 132, 189, 6, 79, 31, 190, 119, 207, 202, 61, 99, 149, 20, 190, 72, 83, 49, 61, 216, 128, 237, 61, 88, 111, 44, 190, 238, 146, 50, 190, 216, 21, 52, 190, 140, 236, 150, 61, 215, 12, 19, 60, 243, 33, 193, 189, 139, 131, 227, 189, 162, 102, 180, 189, 255, 144, 62, 191, 128, 115, 34, 62, 33, 185, 103, 62, 218, 63, 44, 189, 237, 150, 171, 188, 216, 245, 143, 61, 230, 218, 37, 62, 196, 117, 9, 62, 62, 91, 70, 189, 224, 67, 155, 189, 179, 103, 60, 189, 76, 204, 40, 62, 250, 17, 242, 61, 133, 57, 240, 190, 148, 149, 154, 60, 205, 205, 3, 61, 157, 133, 39, 62, 210, 179, 76, 62, 169, 0, 31, 62, 91, 185, 159, 61, 152, 248, 236, 61, 139, 88, 172, 190, 31, 83, 144, 62, 15, 57, 151, 61, 255, 159, 41, 62, 120, 126, 184, 189, 207, 122, 184, 189, 109, 48, 84, 62, 41, 63, 187, 62, 156, 42, 145, 61, 58, 240, 91, 61, 226, 146, 36, 191, 31, 141, 31, 62, 120, 70, 53, 62, 93, 45, 248, 61, 131, 94, 154, 191, 8, 252, 74, 62, 122, 163, 25, 191, 170, 120, 3, 191, 146, 87, 149, 190, 185, 190, 36, 62, 57, 38, 22, 191, 43, 239, 3, 63, 235, 167, 134, 190, 169, 147, 35, 62, 214, 2, 103, 191, 160, 237, 74, 61, 140, 178, 97, 62, 27, 147, 56, 191, 77, 249, 110, 189, 235, 209, 245, 189, 104, 226, 34, 191, 115, 255, 54, 189, 220, 123, 164, 190, 211, 95, 134, 62, 110, 238, 24, 62, 151, 3, 43, 191, 70, 120, 13, 63, 221, 20, 0, 63, 22, 93, 95, 190, 199, 166, 172, 61, 70, 109, 224, 190, 149, 195, 177, 189, 223, 185, 21, 190, 240, 47, 7, 189, 1, 241, 122, 60, 35, 144, 6, 61, 171, 200, 153, 186, 197, 241, 196, 189, 79, 101, 44, 190, 180, 98, 237, 61, 238, 89, 15, 190, 84, 94, 23, 61, 123, 51, 253, 189, 110, 74, 11, 190, 21, 82, 165, 189, 18, 141, 1, 190, 127, 102, 164, 189, 120, 228, 4, 189, 201, 180, 190, 189, 156, 216, 29, 61, 171, 157, 169, 189, 126, 69, 138, 61, 10, 92, 153, 189, 254, 165, 171, 61, 50, 163, 114, 61, 17, 114, 178, 61, 158, 222, 182, 189, 204, 70, 151, 189, 177, 57, 26, 190, 240, 177, 35, 62, 179, 2, 145, 61, 28, 204, 231, 189, 85, 130, 183, 189, 226, 184, 195, 61, 132, 31, 253, 61, 40, 46, 244, 60, 47, 39, 183, 62, 55, 160, 249, 188, 40, 0, 163, 190, 86, 177, 131, 62, 152, 109, 253, 189, 220, 13, 155, 190, 41, 63, 21, 191, 122, 199, 96, 62, 184, 159, 252, 189, 99, 39, 191, 62, 54, 137, 17, 190, 70, 84, 82, 62, 104, 172, 5, 190, 126, 25, 25, 62, 73, 170, 84, 61, 140, 115, 121, 190, 58, 21, 187, 61, 182, 56, 140, 61, 40, 9, 237, 61, 84, 226, 22, 62, 139, 113, 68, 190, 244, 31, 24, 62, 18, 11, 45, 62, 125, 78, 101, 189, 73, 231, 218, 62, 31, 70, 168, 62, 20, 177, 223, 190, 233, 53, 100, 61, 255, 33, 190, 61, 105, 161, 145, 61, 42, 176, 163, 189, 122, 31, 51, 61, 180, 207, 65, 189, 136, 222, 243, 189, 126, 147, 17, 62, 149, 26, 36, 61, 15, 123, 32, 190, 232, 71, 48, 188, 137, 95, 42, 190, 143, 194, 196, 189, 204, 197, 39, 189, 232, 177, 69, 189, 8, 19, 20, 190, 10, 106, 253, 188, 250, 57, 39, 62, 145, 128, 138, 61, 216, 118, 75, 189, 106, 122, 4, 190, 219, 101, 183, 188, 200, 173, 173, 189, 198, 42, 4, 190, 51, 36, 9, 62, 117, 167, 36, 190, 182, 102, 163, 61, 162, 186, 140, 189, 209, 226, 35, 62, 62, 84, 39, 61, 11, 102, 131, 187, 47, 83, 8, 62, 12, 158, 1, 190, 117, 233, 184, 189, 111, 91, 22, 189, 80, 39, 185, 187, 21, 26, 4, 62, 44, 231, 65, 62, 214, 0, 0, 190, 236, 22, 152, 191, 209, 19, 52, 62, 205, 189, 84, 191, 17, 26, 18, 191, 24, 210, 53, 191, 51, 166, 132, 62, 173, 98, 177, 190, 56, 88, 91, 62, 15, 19, 119, 190, 54, 4, 90, 62, 146, 193, 171, 190, 19, 13, 140, 59, 70, 31, 235, 188, 224, 129, 251, 190, 147, 135, 241, 61, 75, 180, 183, 190, 190, 100, 206, 190, 122, 240, 76, 190, 199, 231, 150, 189, 53, 99, 126, 62, 141, 87, 144, 62, 197, 79, 39, 191, 231, 79, 140, 62, 215, 162, 94, 62, 173, 113, 129, 190, 241, 131, 238, 61, 77, 77, 32, 191, 177, 44, 186, 190, 126, 2, 157, 189, 214, 249, 82, 62, 123, 156, 170, 61, 198, 142, 208, 188, 102, 121, 29, 62, 182, 32, 224, 190, 83, 231, 112, 62, 198, 135, 147, 61, 72, 98, 38, 62, 29, 88, 174, 190, 55, 83, 107, 62, 25, 212, 35, 62, 144, 237, 154, 62, 252, 185, 123, 190, 234, 196, 153, 189, 114, 239, 14, 191, 253, 209, 183, 61, 234, 70, 194, 62, 213, 221, 16, 62, 239, 55, 62, 61, 161, 80, 51, 191, 30, 130, 91, 61, 196, 226, 78, 62, 13, 81, 15, 62, 211, 73, 218, 59, 73, 84, 159, 190, 200, 2, 238, 61, 17, 183, 4, 189, 91, 246, 56, 190, 214, 55, 41, 191, 115, 143, 21, 62, 154, 209, 9, 63, 30, 64, 130, 62, 188, 234, 134, 189, 190, 122, 120, 62, 13, 124, 175, 61, 132, 10, 4, 190, 94, 119, 195, 189, 223, 238, 131, 189, 91, 149, 189, 61, 188, 59, 194, 61, 65, 222, 132, 189, 255, 30, 32, 190, 205, 133, 226, 189, 129, 189, 152, 61, 249, 76, 159, 61, 29, 61, 15, 62, 159, 196, 27, 190, 119, 226, 227, 190, 116, 25, 47, 191, 137, 221, 248, 189, 7, 124, 121, 188, 135, 59, 86, 62, 175, 167, 224, 189, 229, 6, 50, 62, 249, 185, 45, 191, 60, 80, 69, 190, 96, 47, 159, 62, 50, 43, 254, 190, 192, 51, 50, 191, 138, 74, 2, 191, 245, 199, 38, 60, 254, 198, 90, 62, 82, 32, 132, 190, 106, 156, 4, 190, 150, 121, 6, 62, 149, 191, 173, 189, 93, 172, 104, 61, 235, 40, 38, 190, 199, 1, 193, 61, 141, 212, 173, 188, 113, 155, 202, 61, 53, 139, 113, 189, 238, 48, 107, 189, 76, 1, 132, 61, 30, 23, 21, 60, 18, 7, 87, 189, 55, 15, 13, 62, 20, 61, 52, 190, 188, 59, 210, 189, 30, 222, 246, 189, 202, 165, 10, 190, 98, 125, 41, 190, 81, 117, 192, 189, 134, 151, 242, 188, 51, 33, 158, 61, 39, 97, 138, 189, 10, 171, 2, 188, 117, 246, 182, 188, 164, 82, 253, 188, 222, 32, 227, 187, 39, 37, 96, 189, 75, 92, 163, 61, 41, 251, 130, 189, 62, 123, 10, 60, 168, 152, 22, 190, 170, 82, 223, 61, 62, 6, 227, 61, 230, 204, 190, 190, 206, 222, 127, 61, 124, 189, 187, 189, 11, 165, 136, 62, 219, 41, 148, 189, 39, 52, 119, 59, 45, 44, 41, 191, 121, 236, 168, 62, 78, 6, 47, 190, 149, 248, 163, 62, 34, 103, 54, 61, 75, 171, 30, 189, 153, 204, 240, 61, 18, 189, 169, 189, 211, 182, 24, 62, 170, 89, 60, 190, 31, 232, 18, 62, 153, 110, 117, 61, 151, 88, 152, 189, 41, 134, 215, 188, 186, 107, 136, 61, 39, 195, 53, 190, 176, 251, 142, 189, 160, 213, 35, 190, 227, 147, 29, 62, 234, 251, 145, 60, 101, 118, 230, 190, 157, 102, 12, 190, 205, 45, 189, 61, 59, 60, 36, 190, 241, 210, 138, 62, 184, 47, 61, 190, 226, 54, 219, 60, 232, 232, 224, 189, 9, 61, 109, 61, 228, 132, 147, 190, 163, 50, 119, 59, 106, 178, 146, 61, 244, 241, 74, 61, 113, 244, 131, 190, 83, 4, 176, 61, 196, 90, 97, 61, 61, 175, 138, 58, 170, 164, 85, 191, 151, 44, 209, 189, 185, 125, 239, 190, 44, 20, 147, 61, 92, 204, 186, 61, 8, 234, 199, 61, 247, 228, 165, 62, 215, 159, 54, 191, 229, 70, 47, 190, 94, 79, 21, 189, 171, 3, 203, 189, 250, 42, 93, 61, 136, 112, 236, 61, 175, 127, 134, 62, 34, 114, 225, 61, 207, 213, 57, 190, 11, 180, 50, 191, 5, 242, 0, 61, 0, 31, 98, 62, 128, 14, 178, 62, 245, 64, 10, 190, 21, 171, 142, 189, 100, 106, 207, 61, 206, 97, 53, 189, 62, 169, 223, 60, 162, 65, 225, 61, 21, 140, 178, 60, 253, 231, 201, 61, 66, 47, 53, 189, 234, 156, 67, 190, 191, 108, 3, 189, 68, 146, 185, 189, 176, 202, 133, 189, 194, 12, 47, 190, 206, 223, 8, 62, 178, 219, 9, 190, 40, 67, 238, 189, 51, 246, 35, 189, 194, 35, 129, 189, 107, 162, 75, 189, 6, 229, 255, 189, 119, 132, 254, 61, 54, 196, 30, 190, 22, 12, 33, 188, 183, 236, 116, 189, 131, 195, 111, 61, 155, 178, 41, 61, 69, 93, 11, 189, 196, 55, 28, 190, 157, 212, 138, 189, 75, 128, 45, 190, 231, 142, 12, 62, 139, 61, 166, 189, 17, 26, 146, 190, 163, 38, 132, 190, 33, 115, 29, 61, 106, 39, 137, 61, 236, 189, 76, 190, 172, 75, 190, 189, 235, 193, 27, 190, 125, 246, 187, 189, 115, 116, 203, 61, 186, 139, 136, 61, 168, 143, 184, 190, 122, 21, 8, 62, 189, 175, 1, 62, 244, 167, 155, 62, 58, 95, 31, 190, 176, 203, 136, 188, 88, 142, 213, 189, 138, 174, 11, 190, 93, 148, 72, 191, 89, 44, 22, 190, 197, 217, 13, 62, 216, 235, 116, 62, 106, 160, 208, 61, 141, 212, 76, 191, 234, 44, 207, 61, 18, 138, 129, 188, 245, 208, 219, 190, 92, 127, 160, 62, 222, 134, 150, 190, 191, 64, 17, 190, 225, 41, 12, 190, 237, 23, 72, 190, 28, 150, 26, 62, 115, 183, 204, 61, 217, 148, 172, 189, 81, 72, 51, 62, 73, 0, 124, 189, 213, 197, 50, 190, 162, 255, 11, 190, 26, 25, 36, 190, 81, 25, 46, 187, 68, 241, 7, 190, 35, 155, 183, 60, 118, 217, 66, 61, 190, 182, 102, 189, 173, 49, 34, 189, 47, 54, 116, 61, 31, 8, 161, 61, 92, 223, 18, 62, 153, 202, 179, 61, 184, 84, 179, 61, 149, 224, 27, 190, 221, 248, 13, 190, 25, 235, 3, 190, 253, 219, 30, 190, 166, 236, 249, 189, 211, 177, 85, 189, 71, 32, 14, 189, 108, 115, 48, 190, 94, 134, 57, 190, 146, 202, 41, 189, 7, 181, 29, 62, 82, 39, 154, 61, 131, 55, 100, 189, 92, 82, 197, 190, 235, 207, 177, 190, 228, 2, 148, 189, 234, 169, 145, 189, 236, 95, 146, 62, 242, 104, 190, 62, 167, 72, 183, 189, 24, 134, 127, 189, 32, 51, 16, 190, 182, 53, 14, 61, 249, 243, 176, 190, 23, 189, 32, 190, 85, 188, 241, 62, 38, 121, 201, 189, 27, 188, 75, 190, 102, 8, 19, 190, 140, 160, 153, 188, 62, 49, 5, 63, 221, 110, 7, 60, 171, 63, 20, 62, 172, 143, 3, 59, 239, 210, 160, 189, 153, 252, 226, 61, 157, 61, 211, 188, 64, 71, 194, 188, 48, 87, 228, 61, 128, 164, 232, 62, 97, 250, 135, 190, 49, 167, 49, 62, 203, 233, 159, 62, 49, 244, 224, 62, 167, 136, 27, 191, 134, 160, 16, 191, 117, 12, 200, 188, 3, 140, 213, 189, 148, 136, 26, 191, 39, 137, 166, 189, 153, 57, 152, 189, 136, 117, 183, 61, 90, 77, 136, 190, 223, 53, 233, 189, 127, 72, 252, 60, 77, 255, 195, 190, 26, 121, 12, 191, 141, 14, 150, 62, 10, 222, 245, 190, 134, 154, 44, 62, 178, 90, 126, 190, 58, 96, 24, 62, 124, 170, 231, 190, 243, 89, 170, 61, 18, 226, 237, 62, 208, 44, 130, 189, 86, 115, 59, 62, 47, 103, 128, 62, 249, 174, 18, 190, 92, 254, 227, 62, 3, 51, 164, 190, 45, 77, 218, 190, 203, 28, 176, 190, 88, 194, 86, 189, 250, 93, 249, 62, 48, 166, 137, 62, 147, 55, 82, 190, 218, 230, 16, 62, 202, 221, 62, 190, 213, 64, 245, 190, 53, 18, 238, 58, 199, 208, 95, 191, 87, 53, 44, 191, 51, 190, 72, 62, 15, 164, 44, 190, 115, 84, 117, 62, 62, 214, 227, 189, 218, 99, 48, 190, 167, 130, 88, 62, 77, 16, 122, 190, 156, 8, 133, 62, 79, 186, 64, 62, 172, 79, 148, 62, 129, 35, 84, 190, 169, 67, 56, 188, 130, 114, 195, 190, 5, 208, 75, 59, 117, 208, 101, 190, 77, 99, 136, 62, 46, 33, 7, 61, 35, 177, 150, 190, 224, 183, 184, 189, 37, 30, 136, 62, 186, 98, 170, 189, 186, 211, 114, 61, 204, 7, 192, 189, 220, 134, 151, 189, 226, 234, 206, 190, 242, 74, 202, 190, 243, 73, 190, 188, 37, 78, 29, 62, 232, 130, 1, 62, 167, 53, 33, 191, 79, 131, 23, 60, 241, 203, 166, 61, 149, 87, 203, 61, 54, 23, 36, 190, 214, 59, 35, 61, 138, 249, 12, 191, 121, 2, 89, 186, 255, 26, 11, 190, 213, 100, 97, 191, 158, 60, 147, 188, 78, 234, 131, 62, 176, 25, 225, 61, 242, 74, 116, 62, 86, 84, 176, 62, 18, 8, 2, 191, 180, 135, 247, 62, 63, 171, 245, 190, 32, 169, 15, 62, 151, 229, 197, 190, 254, 66, 33, 62, 160, 231, 85, 190, 197, 230, 28, 191, 84, 5, 168, 62, 134, 84, 111, 61, 7, 221, 65, 190, 130, 219, 98, 61, 127, 198, 14, 191, 37, 191, 83, 191, 194, 159, 201, 61, 112, 52, 49, 62, 102, 231, 14, 60, 223, 180, 103, 189, 179, 226, 55, 191, 123, 206, 88, 191, 121, 243, 198, 62, 222, 165, 77, 58, 78, 168, 177, 62, 144, 122, 128, 190, 182, 145, 226, 61, 4, 132, 203, 189, 236, 7, 127, 191, 237, 115, 152, 62, 88, 12, 205, 189, 52, 94, 2, 62, 199, 158, 156, 188, 130, 159, 10, 62, 205, 52, 7, 63, 166, 198, 39, 191, 72, 229, 20, 191, 182, 2, 3, 191, 123, 53, 87, 61, 233, 159, 216, 62, 152, 164, 82, 190, 21, 80, 193, 188, 193, 146, 8, 62, 124, 131, 129, 61, 50, 60, 17, 62, 143, 65, 225, 189, 76, 15, 140, 191, 4, 230, 12, 191, 210, 254, 24, 191, 198, 213, 168, 189, 28, 101, 228, 189, 164, 120, 39, 61, 204, 168, 136, 62, 150, 122, 175, 189, 18, 230, 20, 62, 213, 221, 34, 62, 248, 87, 44, 189, 134, 238, 6, 61, 209, 217, 190, 190, 174, 34, 140, 190, 235, 156, 134, 189, 42, 7, 0, 191, 102, 223, 24, 62, 219, 100, 150, 189, 115, 208, 181, 61, 150, 198, 154, 62, 58, 141, 184, 189, 154, 48, 47, 62, 147, 239, 25, 190, 203, 100, 23, 62, 67, 9, 158, 190, 4, 188, 6, 190, 133, 155, 152, 62, 2, 65, 172, 62, 226, 22, 60, 62, 43, 43, 20, 191, 225, 180, 49, 61, 136, 49, 160, 189, 5, 133, 255, 62, 236, 235, 154, 190, 9, 56, 166, 188, 104, 211, 185, 62, 180, 152, 165, 61, 104, 176, 0, 191, 184, 214, 81, 62, 51, 57, 63, 59, 209, 165, 249, 188, 83, 110, 131, 189, 113, 15, 35, 62, 120, 101, 171, 190, 35, 125, 241, 62, 12, 40, 49, 190, 200, 60, 113, 187, 236, 78, 19, 62, 217, 59, 138, 190, 39, 26, 174, 62, 122, 115, 162, 62, 153, 25, 62, 62, 62, 73, 230, 187, 47, 195, 183, 62, 143, 56, 229, 190, 25, 175, 104, 62, 151, 13, 163, 190, 19, 34, 127, 62, 133, 52, 82, 190, 233, 47, 233, 190, 209, 236, 223, 62, 250, 11, 132, 62, 138, 234, 27, 61, 118, 130, 53, 62, 154, 218, 224, 190, 147, 105, 43, 191, 16, 151, 38, 62, 50, 15, 132, 62, 235, 107, 236, 61, 11, 196, 11, 191, 183, 145, 133, 62, 65, 60, 232, 61, 63, 169, 191, 60, 158, 223, 229, 190, 203, 19, 22, 62, 232, 120, 11, 191, 186, 149, 201, 61, 21, 32, 187, 60, 41, 89, 60, 191, 141, 46, 255, 61, 254, 14, 30, 62, 110, 32, 106, 189, 77, 225, 29, 63, 98, 137, 88, 188, 172, 21, 142, 190, 170, 67, 47, 63, 29, 131, 20, 191, 125, 41, 65, 189, 235, 231, 193, 190, 127, 28, 70, 62, 133, 205, 83, 191, 122, 239, 183, 190, 85, 159, 8, 63, 184, 162, 27, 62, 148, 28, 183, 190, 2, 24, 15, 190, 73, 113, 128, 191, 69, 78, 132, 190, 116, 96, 226, 60, 173, 215, 61, 190, 227, 252, 159, 190, 93, 181, 66, 188, 39, 170, 77, 61, 89, 36, 133, 190, 208, 89, 56, 189, 7, 60, 129, 62, 66, 216, 157, 189, 127, 62, 198, 62, 208, 144, 202, 190, 21, 26, 12, 62, 224, 211, 228, 60, 250, 148, 13, 62, 168, 7, 74, 189, 27, 95, 135, 189, 196, 145, 175, 189, 217, 219, 154, 62, 181, 236, 75, 190, 245, 89, 73, 190, 223, 164, 226, 61, 11, 64, 19, 61, 243, 93, 8, 189, 236, 156, 52, 62, 40, 93, 241, 61, 187, 186, 165, 60, 232, 106, 128, 62, 7, 221, 26, 190, 240, 221, 87, 61, 226, 36, 196, 189, 82, 140, 20, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 122, 5, 62, 45, 142, 7, 61, 199, 64, 35, 62, 143, 17, 199, 61, 216, 187, 140, 62, 247, 140, 155, 61, 134, 162, 153, 189, 40, 30, 213, 61, 86, 135, 66, 190, 118, 194, 59, 61, 253, 12, 41, 62, 174, 75, 246, 188, 5, 188, 205, 61, 220, 202, 58, 189, 131, 232, 140, 62, 120, 164, 143, 60, 195, 142, 113, 190, 44, 63, 185, 189, 62, 86, 65, 190, 57, 87, 191, 59, 222, 228, 154, 61, 25, 54, 139, 188, 49, 203, 78, 190, 153, 221, 84, 62, 216, 179, 63, 62, 16, 16, 138, 61, 30, 35, 115, 62, 193, 250, 131, 190, 92, 248, 4, 190, 164, 194, 5, 189, 60, 105, 158, 60, 181, 145, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 50, 184, 61, 109, 195, 152, 62, 32, 184, 42, 191, 247, 98, 111, 190, 30, 242, 7, 190, 119, 251, 27, 63, 39, 186, 152, 188, 243, 109, 236, 189, 160, 101, 235, 61, 43, 76, 146, 190, 125, 78, 104, 63, 166, 39, 231, 188, 80, 105, 230, 190, 58, 207, 70, 61, 47, 68, 136, 63, 198, 188, 191, 62, 17, 99, 84, 63, 226, 37, 203, 189, 84, 119, 239, 189, 52, 219, 10, 62, 175, 47, 242, 188, 132, 206, 65, 191, 194, 22, 52, 61, 13, 159, 231, 62, 237, 196, 60, 63, 17, 217, 31, 63, 110, 229, 21, 191, 249, 189, 17, 63, 80, 149, 183, 62, 239, 161, 235, 190, 162, 199, 45, 191, 200, 31, 2, 61, 113, 192, 52, 191, 71, 250, 100, 190, 176, 63, 51, 189, 17, 255, 152, 190, 125, 41, 131, 190, 204, 65, 130, 190, 58, 52, 185, 61, 66, 180, 43, 190, 195, 239, 146, 189, 166, 31, 7, 190, 168, 154, 11, 189, 61, 237, 36, 190, 237, 167, 66, 61, 152, 147, 60, 60, 58, 67, 89, 62, 203, 240, 40, 61, 97, 185, 240, 60, 134, 107, 45, 190, 233, 10, 111, 62, 183, 114, 237, 60, 241, 219, 156, 61, 41, 164, 159, 60, 105, 103, 34, 62, 243, 108, 14, 62, 115, 128, 216, 60, 250, 101, 85, 62, 203, 9, 7, 190, 219, 249, 86, 62, 36, 75, 211, 60, 6, 165, 125, 189, 234, 83, 136, 62, 109, 239, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 39, 226, 187, 102, 209, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 211, 149, 190, 97, 6, 212, 63, 112, 163, 189, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {69, 115, 191, 62, 253, 124, 178, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0013/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}