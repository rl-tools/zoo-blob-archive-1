// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 235, 146, 62, 10, 183, 129, 190, 159, 101, 25, 191, 247, 2, 211, 62, 131, 228, 162, 62, 155, 78, 32, 191, 13, 121, 231, 189, 246, 238, 190, 62, 134, 0, 176, 62, 128, 171, 188, 190, 43, 132, 127, 191, 181, 122, 94, 62, 244, 104, 156, 190, 225, 185, 140, 62, 11, 155, 79, 63, 90, 70, 127, 190, 5, 77, 113, 63, 134, 76, 174, 62, 120, 21, 15, 191, 168, 5, 133, 190, 197, 255, 5, 63, 169, 192, 67, 59, 239, 112, 169, 63, 255, 158, 223, 62, 31, 240, 75, 63, 187, 218, 39, 189, 97, 113, 125, 61, 89, 182, 79, 62, 234, 149, 58, 63, 232, 80, 4, 62, 150, 60, 53, 63, 132, 207, 14, 62, 213, 44, 29, 190, 58, 180, 118, 190, 64, 26, 107, 191, 23, 118, 150, 186, 50, 35, 234, 62, 196, 46, 132, 191, 87, 27, 206, 190, 187, 181, 195, 190, 8, 108, 85, 191, 55, 65, 233, 62, 82, 223, 75, 63, 92, 163, 96, 61, 124, 178, 19, 189, 157, 15, 142, 61, 46, 187, 176, 190, 39, 50, 254, 62, 81, 218, 156, 190, 124, 199, 205, 190, 38, 187, 245, 190, 224, 63, 160, 190, 184, 57, 168, 62, 197, 39, 108, 62, 169, 14, 71, 63, 154, 90, 148, 190, 55, 149, 105, 190, 236, 7, 45, 62, 29, 152, 114, 63, 40, 133, 155, 190, 140, 124, 85, 190, 201, 141, 57, 63, 15, 98, 138, 189, 60, 14, 21, 191, 82, 137, 0, 63, 237, 130, 19, 63, 146, 96, 160, 190, 171, 24, 79, 190, 58, 195, 241, 190, 57, 108, 148, 190, 165, 24, 136, 63, 167, 43, 145, 61, 101, 217, 51, 62, 154, 202, 58, 63, 233, 99, 2, 190, 207, 46, 147, 62, 222, 96, 106, 63, 240, 88, 249, 190, 3, 120, 131, 189, 239, 172, 253, 190, 110, 143, 64, 63, 33, 160, 218, 190, 208, 21, 130, 191, 222, 3, 170, 189, 253, 157, 71, 62, 30, 243, 121, 63, 148, 233, 29, 190, 85, 135, 252, 60, 128, 74, 76, 191, 17, 226, 28, 62, 255, 11, 121, 190, 180, 67, 124, 191, 61, 107, 85, 63, 200, 211, 35, 63, 17, 163, 50, 191, 201, 142, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 59, 191, 190, 101, 176, 233, 61, 107, 149, 63, 191, 228, 7, 9, 191, 185, 79, 21, 62, 47, 15, 172, 62, 119, 92, 210, 62, 208, 181, 173, 189, 88, 124, 7, 188, 93, 244, 100, 190, 217, 59, 154, 189, 210, 215, 57, 61, 91, 120, 180, 190, 9, 123, 188, 190, 236, 122, 75, 62, 214, 237, 25, 62, 135, 26, 170, 190, 117, 223, 17, 63, 236, 180, 138, 190, 6, 31, 201, 62, 142, 168, 218, 62, 223, 101, 19, 190, 121, 100, 44, 63, 62, 155, 147, 62, 39, 159, 8, 190, 149, 9, 61, 62, 139, 188, 240, 189, 103, 105, 192, 62, 25, 0, 21, 62, 245, 57, 188, 189, 202, 163, 137, 190, 80, 144, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 74, 237, 59, 189, 195, 235, 189, 16, 143, 145, 190, 196, 100, 224, 61, 78, 51, 159, 190, 151, 160, 188, 188, 111, 10, 240, 189, 220, 156, 170, 62, 185, 33, 230, 61, 232, 73, 31, 189, 251, 144, 60, 62, 140, 21, 72, 62, 180, 172, 152, 190, 204, 171, 214, 62, 104, 91, 12, 62, 109, 37, 51, 190, 194, 9, 49, 60, 219, 216, 49, 190, 56, 53, 47, 190, 134, 45, 200, 189, 147, 11, 36, 62, 72, 54, 221, 190, 56, 210, 18, 62, 144, 112, 140, 189, 25, 104, 137, 62, 184, 65, 192, 62, 204, 1, 188, 190, 220, 37, 49, 59, 231, 137, 45, 61, 45, 209, 64, 60, 202, 43, 68, 191, 69, 69, 224, 60, 231, 140, 26, 189, 174, 205, 186, 189, 165, 71, 242, 189, 93, 178, 161, 189, 1, 153, 242, 190, 215, 213, 133, 191, 102, 212, 241, 61, 33, 125, 67, 189, 237, 19, 66, 62, 172, 231, 192, 61, 158, 154, 215, 60, 255, 8, 96, 62, 86, 223, 9, 191, 92, 1, 128, 62, 161, 253, 142, 62, 208, 106, 148, 62, 207, 69, 126, 62, 184, 31, 132, 189, 188, 170, 128, 190, 11, 50, 168, 190, 2, 91, 250, 61, 147, 48, 225, 190, 182, 170, 30, 62, 111, 144, 209, 190, 212, 174, 117, 62, 127, 124, 159, 62, 107, 184, 236, 61, 144, 61, 130, 62, 104, 32, 59, 62, 146, 38, 36, 62, 154, 11, 2, 191, 190, 47, 170, 190, 78, 159, 100, 190, 165, 171, 187, 190, 111, 255, 202, 189, 105, 199, 35, 190, 179, 12, 163, 61, 68, 155, 45, 62, 158, 14, 191, 188, 18, 71, 65, 61, 139, 206, 205, 188, 30, 198, 156, 190, 102, 134, 13, 62, 133, 108, 104, 190, 123, 247, 135, 190, 249, 46, 180, 189, 72, 221, 116, 62, 131, 142, 155, 189, 36, 162, 93, 190, 4, 233, 129, 62, 120, 120, 25, 62, 161, 135, 22, 190, 125, 21, 147, 61, 252, 94, 127, 189, 167, 195, 168, 61, 211, 175, 104, 62, 151, 137, 171, 189, 175, 219, 87, 62, 63, 248, 124, 62, 4, 196, 100, 191, 52, 67, 155, 62, 30, 214, 126, 59, 47, 61, 120, 190, 26, 74, 62, 61, 167, 51, 198, 61, 168, 140, 23, 190, 114, 126, 21, 190, 200, 158, 128, 59, 40, 94, 19, 190, 45, 43, 208, 189, 173, 47, 204, 60, 125, 205, 56, 189, 77, 174, 156, 61, 118, 173, 133, 189, 217, 171, 57, 61, 84, 162, 67, 189, 161, 218, 49, 190, 253, 172, 32, 62, 88, 96, 244, 60, 226, 186, 5, 61, 101, 97, 128, 60, 232, 31, 236, 187, 156, 38, 34, 62, 27, 85, 30, 190, 28, 22, 218, 189, 253, 249, 67, 189, 30, 79, 40, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 247, 3, 240, 61, 189, 254, 82, 61, 41, 152, 168, 189, 33, 36, 251, 189, 38, 8, 13, 190, 14, 0, 91, 189, 33, 125, 152, 61, 137, 44, 116, 189, 103, 15, 69, 190, 130, 213, 31, 62, 51, 97, 30, 189, 164, 18, 82, 61, 176, 194, 82, 62, 218, 185, 121, 189, 43, 14, 243, 62, 196, 223, 146, 190, 126, 245, 89, 60, 189, 17, 240, 60, 185, 81, 191, 62, 188, 26, 137, 60, 238, 166, 206, 190, 209, 179, 17, 190, 154, 158, 1, 191, 85, 30, 111, 62, 232, 112, 180, 61, 142, 241, 251, 189, 1, 153, 217, 60, 46, 81, 32, 61, 85, 245, 152, 190, 90, 253, 33, 61, 93, 114, 158, 190, 164, 177, 153, 191, 118, 60, 50, 190, 208, 219, 27, 62, 138, 90, 216, 190, 144, 135, 68, 61, 122, 179, 196, 62, 100, 33, 189, 189, 229, 214, 17, 62, 146, 142, 143, 62, 54, 120, 161, 190, 219, 244, 9, 62, 29, 74, 133, 189, 63, 91, 54, 62, 182, 95, 91, 188, 63, 27, 31, 191, 207, 226, 56, 61, 236, 62, 30, 191, 138, 207, 217, 61, 111, 137, 38, 61, 34, 147, 152, 61, 67, 152, 48, 190, 140, 241, 223, 189, 13, 231, 5, 190, 72, 191, 55, 62, 235, 241, 77, 189, 253, 222, 185, 62, 70, 154, 137, 62, 49, 85, 35, 189, 83, 218, 189, 61, 22, 161, 163, 61, 80, 30, 23, 188, 241, 157, 67, 190, 195, 109, 158, 60, 97, 238, 27, 190, 204, 183, 147, 62, 200, 229, 201, 189, 2, 217, 53, 189, 240, 217, 37, 63, 104, 242, 47, 61, 175, 126, 171, 188, 73, 85, 139, 189, 6, 69, 174, 189, 68, 134, 13, 62, 199, 168, 7, 62, 136, 91, 172, 189, 139, 244, 221, 60, 183, 126, 36, 190, 3, 16, 129, 189, 123, 34, 70, 190, 199, 200, 233, 61, 24, 7, 132, 62, 8, 191, 140, 190, 193, 182, 117, 61, 180, 53, 165, 62, 172, 24, 131, 189, 56, 118, 136, 190, 90, 177, 189, 61, 45, 23, 131, 188, 172, 119, 241, 61, 65, 99, 35, 62, 210, 252, 18, 62, 148, 132, 90, 190, 227, 177, 177, 61, 132, 221, 252, 189, 13, 132, 7, 62, 46, 52, 100, 61, 50, 213, 100, 190, 110, 230, 157, 62, 207, 203, 90, 62, 70, 30, 141, 62, 26, 69, 24, 59, 7, 89, 70, 62, 177, 11, 103, 62, 222, 42, 50, 191, 166, 202, 131, 62, 114, 66, 51, 62, 119, 225, 136, 61, 81, 190, 69, 62, 96, 59, 161, 190, 179, 91, 83, 62, 25, 67, 125, 190, 179, 173, 216, 62, 182, 42, 60, 62, 189, 195, 215, 188, 188, 85, 84, 190, 56, 117, 20, 61, 196, 70, 20, 190, 60, 199, 165, 189, 168, 180, 86, 62, 59, 3, 121, 62, 13, 196, 200, 61, 249, 89, 96, 60, 128, 43, 8, 62, 67, 221, 216, 188, 236, 120, 2, 62, 70, 32, 200, 188, 240, 142, 220, 190, 196, 229, 189, 190, 86, 37, 27, 62, 134, 45, 140, 189, 93, 178, 217, 189, 177, 223, 173, 62, 211, 126, 46, 60, 188, 137, 123, 190, 151, 236, 204, 61, 225, 176, 63, 60, 192, 151, 32, 189, 210, 176, 132, 188, 68, 23, 73, 62, 107, 183, 187, 61, 16, 61, 215, 189, 209, 34, 230, 62, 255, 218, 143, 61, 198, 123, 145, 62, 228, 48, 18, 190, 58, 22, 54, 189, 191, 149, 128, 190, 96, 4, 243, 62, 249, 139, 35, 189, 66, 65, 8, 190, 102, 184, 231, 60, 232, 159, 199, 62, 109, 181, 165, 62, 191, 230, 119, 62, 221, 210, 131, 189, 81, 101, 154, 188, 118, 216, 54, 189, 168, 214, 139, 190, 84, 97, 46, 62, 207, 102, 116, 60, 222, 139, 189, 189, 205, 255, 229, 61, 66, 230, 5, 61, 113, 26, 12, 62, 177, 168, 248, 60, 150, 64, 42, 191, 82, 203, 12, 191, 212, 54, 189, 190, 104, 229, 207, 189, 247, 173, 9, 191, 33, 230, 36, 191, 242, 181, 130, 61, 195, 189, 22, 189, 166, 235, 211, 189, 88, 44, 36, 190, 9, 65, 162, 61, 229, 42, 126, 62, 140, 2, 153, 191, 39, 107, 20, 63, 146, 32, 79, 62, 144, 203, 136, 62, 96, 180, 73, 62, 184, 17, 15, 62, 163, 96, 239, 189, 92, 19, 105, 191, 171, 192, 82, 189, 156, 101, 107, 191, 219, 171, 96, 62, 34, 10, 204, 190, 83, 17, 55, 62, 83, 82, 158, 62, 9, 84, 147, 62, 24, 170, 191, 61, 156, 12, 150, 190, 223, 192, 34, 189, 211, 35, 62, 191, 164, 4, 109, 191, 28, 227, 51, 190, 97, 97, 239, 60, 218, 175, 32, 62, 124, 38, 57, 190, 184, 138, 249, 61, 162, 246, 117, 62, 167, 238, 50, 61, 117, 24, 10, 62, 176, 88, 112, 190, 118, 156, 244, 188, 197, 57, 147, 61, 93, 58, 167, 189, 128, 206, 35, 191, 171, 101, 4, 61, 7, 167, 53, 61, 158, 134, 192, 60, 194, 21, 82, 61, 227, 201, 18, 62, 52, 217, 210, 59, 54, 202, 92, 190, 219, 133, 188, 61, 40, 115, 92, 189, 96, 225, 20, 189, 150, 189, 109, 62, 140, 115, 42, 62, 167, 92, 94, 62, 210, 166, 223, 60, 83, 11, 140, 191, 131, 160, 157, 62, 254, 227, 0, 62, 65, 172, 206, 190, 2, 31, 133, 189, 82, 173, 33, 62, 184, 97, 187, 185, 252, 52, 28, 191, 43, 186, 85, 61, 236, 55, 161, 62, 0, 187, 62, 188, 69, 28, 61, 62, 94, 212, 233, 190, 4, 176, 242, 61, 127, 50, 208, 190, 96, 229, 144, 62, 91, 90, 29, 62, 177, 144, 41, 62, 36, 22, 174, 190, 40, 217, 25, 190, 232, 70, 2, 191, 88, 28, 168, 189, 74, 230, 30, 62, 170, 234, 154, 62, 197, 220, 3, 62, 80, 166, 84, 62, 77, 202, 143, 62, 19, 180, 0, 62, 94, 29, 64, 62, 116, 176, 173, 61, 222, 144, 206, 190, 7, 215, 18, 191, 61, 133, 51, 189, 228, 159, 170, 190, 53, 80, 136, 190, 119, 100, 34, 63, 54, 151, 109, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 97, 65, 191, 189, 44, 84, 213, 190, 24, 146, 13, 62, 27, 86, 35, 62, 203, 62, 128, 62, 173, 230, 11, 189, 127, 82, 90, 61, 39, 7, 182, 61, 39, 28, 238, 62, 232, 128, 67, 61, 179, 7, 149, 187, 114, 174, 185, 61, 59, 149, 72, 62, 0, 25, 14, 62, 132, 22, 159, 190, 204, 200, 76, 61, 120, 75, 172, 190, 27, 229, 185, 188, 8, 184, 181, 190, 70, 3, 149, 62, 99, 175, 122, 62, 107, 237, 231, 187, 37, 84, 150, 190, 102, 139, 145, 61, 118, 48, 16, 62, 168, 129, 225, 190, 166, 58, 19, 62, 96, 176, 11, 62, 38, 32, 213, 61, 223, 42, 24, 190, 174, 83, 77, 62, 230, 1, 177, 190, 70, 226, 247, 189, 239, 34, 86, 190, 218, 122, 204, 190, 204, 91, 177, 188, 19, 247, 34, 191, 54, 18, 12, 191, 246, 191, 158, 190, 62, 149, 83, 62, 197, 220, 120, 189, 149, 231, 87, 62, 27, 88, 7, 188, 249, 135, 81, 61, 210, 47, 174, 190, 22, 228, 99, 61, 57, 32, 252, 60, 148, 169, 173, 62, 85, 54, 163, 62, 63, 106, 4, 191, 104, 118, 224, 190, 137, 169, 247, 190, 74, 133, 40, 62, 75, 200, 150, 191, 125, 197, 132, 62, 168, 125, 187, 189, 222, 241, 118, 62, 80, 217, 204, 62, 188, 160, 83, 62, 95, 174, 157, 62, 88, 74, 51, 62, 142, 155, 237, 189, 163, 14, 177, 191, 2, 174, 59, 190, 250, 66, 90, 62, 22, 149, 34, 62, 135, 214, 9, 191, 119, 121, 164, 62, 152, 129, 9, 62, 43, 174, 221, 61, 189, 127, 143, 62, 38, 110, 211, 190, 9, 89, 46, 60, 247, 103, 13, 191, 148, 226, 124, 62, 7, 6, 71, 190, 230, 225, 227, 61, 251, 153, 231, 190, 81, 52, 140, 189, 147, 220, 158, 190, 42, 58, 6, 190, 145, 1, 144, 62, 242, 245, 248, 62, 122, 103, 160, 62, 72, 166, 197, 60, 235, 64, 226, 61, 99, 99, 14, 61, 187, 250, 85, 62, 178, 8, 143, 61, 225, 31, 230, 190, 128, 82, 240, 190, 115, 84, 3, 190, 123, 65, 178, 190, 231, 191, 4, 191, 43, 179, 25, 63, 182, 16, 28, 62, 223, 78, 102, 190, 109, 153, 147, 190, 207, 226, 75, 190, 135, 63, 31, 59, 85, 191, 219, 190, 203, 240, 37, 191, 223, 53, 185, 190, 159, 7, 132, 62, 249, 20, 4, 190, 215, 52, 47, 62, 253, 176, 225, 60, 119, 44, 163, 62, 12, 56, 252, 190, 192, 45, 76, 62, 15, 191, 222, 189, 137, 130, 45, 62, 215, 139, 177, 62, 65, 161, 96, 190, 121, 23, 110, 190, 48, 32, 158, 190, 24, 4, 134, 62, 2, 181, 152, 191, 135, 128, 61, 62, 244, 126, 95, 190, 182, 125, 0, 63, 211, 159, 226, 62, 64, 155, 140, 61, 162, 66, 94, 62, 246, 236, 172, 188, 180, 158, 189, 189, 172, 208, 139, 191, 165, 139, 173, 189, 84, 238, 244, 61, 135, 232, 98, 60, 43, 63, 131, 188, 85, 16, 30, 62, 254, 26, 227, 190, 142, 113, 29, 191, 165, 252, 112, 190, 49, 251, 60, 190, 29, 92, 110, 62, 11, 96, 106, 188, 84, 240, 61, 190, 58, 185, 142, 62, 236, 237, 165, 190, 47, 149, 166, 62, 57, 45, 109, 62, 100, 54, 28, 62, 102, 123, 159, 62, 216, 160, 154, 190, 248, 67, 205, 190, 189, 42, 55, 190, 128, 155, 56, 190, 60, 208, 96, 191, 43, 243, 136, 62, 242, 249, 212, 190, 15, 43, 215, 60, 245, 171, 7, 62, 46, 236, 165, 62, 180, 88, 119, 62, 165, 130, 93, 61, 16, 29, 153, 62, 29, 61, 234, 190, 186, 215, 198, 61, 178, 22, 155, 61, 255, 78, 78, 189, 84, 148, 8, 190, 148, 211, 36, 190, 220, 17, 145, 61, 40, 180, 145, 189, 36, 89, 13, 62, 61, 131, 205, 59, 234, 118, 137, 189, 173, 47, 164, 61, 70, 61, 176, 59, 218, 255, 23, 187, 122, 159, 145, 189, 173, 194, 80, 189, 36, 71, 3, 62, 28, 102, 52, 189, 127, 57, 180, 189, 185, 120, 231, 189, 161, 123, 160, 189, 183, 114, 211, 189, 63, 95, 146, 188, 41, 135, 10, 190, 174, 236, 248, 60, 212, 29, 3, 188, 102, 11, 27, 190, 224, 197, 241, 61, 105, 234, 237, 188, 44, 4, 160, 189, 254, 148, 202, 189, 128, 213, 196, 189, 134, 109, 79, 61, 238, 158, 148, 188, 57, 139, 161, 62, 130, 164, 148, 185, 45, 202, 99, 188, 71, 107, 117, 190, 161, 97, 56, 61, 247, 87, 27, 190, 113, 248, 44, 190, 160, 94, 44, 62, 214, 47, 55, 190, 147, 17, 31, 190, 30, 238, 150, 62, 214, 152, 144, 189, 86, 21, 0, 63, 186, 224, 233, 60, 171, 168, 161, 62, 8, 147, 123, 61, 128, 172, 42, 189, 203, 113, 88, 190, 101, 131, 62, 63, 130, 70, 149, 60, 255, 17, 238, 190, 240, 128, 78, 190, 166, 168, 131, 189, 102, 248, 93, 188, 8, 199, 11, 62, 72, 130, 165, 189, 24, 201, 154, 189, 52, 122, 156, 189, 181, 51, 195, 189, 141, 108, 249, 60, 182, 164, 24, 190, 180, 94, 134, 189, 157, 161, 186, 60, 34, 229, 182, 189, 143, 108, 226, 189, 193, 134, 97, 61, 36, 199, 77, 62, 111, 192, 68, 189, 229, 244, 135, 188, 82, 65, 123, 188, 132, 161, 169, 190, 188, 181, 225, 189, 180, 53, 100, 62, 203, 191, 21, 62, 253, 182, 129, 190, 174, 53, 54, 62, 50, 34, 38, 62, 252, 230, 50, 189, 29, 20, 36, 191, 227, 102, 144, 62, 113, 39, 160, 61, 153, 43, 242, 61, 23, 218, 241, 61, 199, 227, 173, 61, 90, 63, 127, 190, 49, 57, 37, 189, 4, 35, 7, 62, 96, 111, 144, 62, 206, 49, 211, 189, 56, 91, 59, 189, 187, 134, 15, 62, 44, 31, 225, 62, 59, 221, 158, 62, 170, 232, 164, 61, 13, 116, 215, 189, 34, 77, 33, 60, 143, 65, 1, 191, 101, 235, 37, 62, 241, 189, 121, 62, 64, 234, 97, 62, 57, 28, 22, 189, 179, 104, 83, 190, 138, 189, 143, 62, 122, 146, 172, 190, 122, 81, 237, 61, 230, 121, 92, 62, 124, 170, 45, 62, 33, 199, 218, 189, 15, 248, 156, 61, 101, 96, 162, 190, 124, 119, 91, 189, 155, 44, 253, 61, 246, 220, 154, 61, 142, 140, 100, 62, 42, 92, 40, 189, 233, 179, 201, 61, 175, 251, 10, 62, 57, 117, 1, 189, 33, 25, 169, 190, 113, 134, 18, 190, 230, 111, 212, 190, 222, 56, 165, 59, 124, 58, 181, 189, 179, 23, 120, 189, 106, 81, 3, 63, 223, 252, 126, 62, 11, 66, 63, 190, 197, 227, 72, 190, 138, 15, 78, 190, 127, 161, 67, 62, 88, 71, 185, 190, 103, 217, 76, 190, 243, 210, 212, 190, 156, 115, 13, 63, 199, 115, 119, 61, 95, 86, 131, 62, 168, 30, 209, 61, 65, 23, 236, 61, 82, 237, 225, 190, 93, 241, 143, 59, 160, 246, 167, 61, 252, 243, 28, 61, 18, 142, 204, 62, 5, 15, 182, 189, 218, 67, 148, 190, 130, 218, 242, 190, 160, 100, 168, 62, 77, 126, 254, 190, 45, 184, 75, 62, 57, 22, 223, 189, 144, 35, 209, 62, 53, 25, 144, 62, 56, 208, 88, 190, 120, 20, 163, 61, 156, 217, 129, 62, 51, 220, 221, 61, 204, 144, 107, 191, 94, 44, 132, 190, 51, 150, 155, 190, 98, 192, 2, 190, 215, 107, 230, 188, 217, 44, 241, 190, 188, 66, 11, 62, 181, 9, 38, 61, 221, 93, 25, 62, 210, 39, 151, 189, 132, 120, 126, 190, 166, 53, 172, 190, 109, 254, 220, 61, 242, 120, 233, 190, 212, 67, 136, 190, 122, 179, 234, 61, 107, 225, 194, 62, 111, 216, 169, 61, 161, 253, 165, 190, 98, 143, 152, 61, 204, 85, 112, 62, 73, 237, 144, 61, 102, 85, 123, 61, 182, 242, 135, 61, 141, 53, 221, 189, 23, 7, 72, 189, 89, 74, 134, 190, 139, 96, 42, 61, 12, 158, 16, 186, 114, 41, 39, 191, 79, 60, 182, 60, 217, 25, 37, 62, 98, 244, 224, 60, 229, 87, 7, 62, 77, 88, 178, 190, 170, 159, 199, 188, 57, 9, 17, 191, 200, 208, 160, 61, 8, 165, 251, 188, 98, 52, 208, 61, 102, 130, 32, 62, 43, 117, 87, 191, 255, 113, 5, 190, 255, 37, 248, 190, 37, 68, 148, 62, 159, 185, 152, 190, 160, 29, 21, 62, 142, 93, 42, 190, 115, 155, 163, 188, 128, 98, 156, 190, 242, 9, 222, 190, 196, 91, 119, 62, 32, 242, 15, 61, 115, 182, 2, 63, 172, 49, 32, 189, 185, 39, 9, 60, 4, 207, 215, 61, 179, 218, 195, 61, 163, 111, 39, 190, 10, 121, 189, 190, 31, 80, 201, 190, 101, 113, 8, 190, 131, 116, 19, 190, 35, 157, 84, 190, 95, 46, 244, 62, 50, 234, 167, 189, 134, 242, 238, 61, 2, 66, 12, 62, 25, 215, 160, 190, 230, 218, 171, 189, 46, 68, 139, 190, 224, 106, 156, 61, 158, 60, 143, 190, 210, 3, 44, 62, 21, 211, 146, 61, 105, 104, 81, 190, 189, 202, 158, 61, 65, 116, 126, 62, 231, 93, 101, 189, 110, 195, 87, 190, 150, 56, 117, 61, 46, 84, 20, 61, 169, 236, 172, 189, 209, 117, 242, 188, 196, 25, 154, 189, 46, 168, 254, 189, 177, 126, 210, 61, 115, 136, 151, 190, 184, 152, 107, 189, 59, 111, 182, 61, 59, 103, 8, 60, 28, 162, 192, 62, 255, 193, 244, 189, 54, 205, 202, 60, 71, 89, 192, 189, 214, 253, 69, 190, 212, 216, 60, 191, 147, 235, 217, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 148, 32, 197, 61, 63, 41, 19, 62, 58, 136, 16, 190, 195, 90, 79, 190, 255, 51, 217, 58, 35, 254, 208, 190, 181, 39, 182, 190, 100, 172, 197, 60, 254, 203, 252, 62, 87, 211, 255, 189, 203, 218, 142, 61, 251, 241, 19, 62, 75, 164, 112, 190, 86, 120, 226, 60, 138, 97, 140, 62, 13, 46, 162, 61, 40, 60, 73, 62, 219, 65, 94, 189, 80, 194, 45, 61, 65, 126, 16, 190, 39, 9, 85, 61, 142, 210, 41, 191, 214, 204, 119, 61, 10, 3, 211, 60, 20, 26, 200, 61, 143, 70, 230, 60, 197, 223, 145, 62, 8, 40, 96, 60, 141, 185, 246, 189, 245, 89, 160, 59, 116, 225, 127, 190, 250, 127, 73, 62, 151, 145, 213, 189, 252, 2, 70, 189, 201, 160, 2, 61, 174, 238, 225, 189, 19, 70, 147, 61, 89, 220, 126, 62, 254, 108, 234, 60, 252, 238, 139, 189, 219, 217, 29, 190, 127, 131, 109, 189, 142, 216, 187, 60, 136, 40, 177, 190, 31, 27, 142, 190, 166, 98, 5, 191, 108, 222, 88, 62, 201, 171, 17, 190, 13, 23, 39, 190, 150, 66, 52, 61, 13, 131, 21, 62, 56, 101, 165, 60, 186, 87, 90, 61, 174, 27, 245, 188, 12, 98, 64, 189, 114, 24, 203, 62, 105, 72, 150, 190, 218, 152, 107, 62, 133, 119, 98, 190, 127, 203, 116, 191, 178, 224, 14, 62, 125, 151, 98, 190, 155, 126, 136, 190, 163, 156, 216, 61, 237, 200, 4, 190, 67, 184, 69, 190, 204, 191, 57, 190, 193, 29, 143, 190, 191, 195, 132, 190, 91, 79, 210, 187, 113, 106, 215, 190, 48, 23, 42, 62, 195, 102, 195, 62, 212, 159, 126, 190, 3, 251, 66, 61, 38, 139, 160, 188, 31, 159, 135, 189, 114, 29, 149, 190, 112, 82, 107, 61, 138, 136, 112, 62, 162, 147, 117, 187, 65, 0, 181, 189, 11, 19, 128, 188, 120, 49, 155, 190, 11, 44, 50, 61, 219, 97, 41, 191, 130, 241, 125, 62, 135, 10, 25, 190, 92, 37, 58, 61, 122, 50, 190, 62, 231, 240, 59, 190, 136, 245, 235, 60, 167, 238, 242, 61, 123, 249, 145, 61, 143, 6, 22, 191, 220, 107, 24, 62, 201, 182, 88, 61, 14, 7, 184, 61, 20, 224, 187, 62, 90, 155, 177, 190, 164, 168, 35, 189, 43, 76, 11, 60, 207, 82, 176, 190, 60, 203, 126, 61, 34, 11, 4, 63, 78, 32, 183, 62, 207, 234, 15, 190, 165, 166, 102, 61, 191, 9, 173, 188, 113, 95, 70, 62, 36, 84, 78, 188, 184, 219, 108, 62, 202, 196, 115, 62, 236, 94, 127, 190, 241, 1, 152, 190, 191, 22, 29, 61, 47, 218, 91, 61, 109, 146, 123, 188, 120, 37, 14, 62, 1, 134, 22, 190, 115, 253, 71, 61, 226, 3, 107, 62, 143, 46, 112, 62, 105, 205, 21, 190, 149, 199, 104, 62, 168, 109, 22, 190, 176, 205, 89, 190, 186, 9, 56, 190, 215, 214, 9, 190, 89, 164, 33, 190, 220, 10, 92, 189, 86, 183, 115, 62, 138, 195, 23, 189, 3, 37, 31, 61, 206, 199, 64, 62, 115, 7, 192, 59, 163, 118, 68, 191, 32, 206, 149, 60, 224, 154, 36, 190, 123, 23, 36, 189, 173, 5, 187, 190, 36, 251, 178, 61, 68, 38, 50, 62, 67, 235, 251, 188, 118, 231, 78, 190, 234, 89, 130, 188, 11, 98, 155, 59, 215, 75, 8, 62, 129, 13, 32, 190, 151, 107, 164, 61, 112, 186, 212, 61, 153, 17, 115, 190, 53, 7, 61, 190, 181, 143, 177, 189, 92, 77, 107, 61, 249, 40, 100, 189, 55, 66, 156, 190, 66, 225, 121, 62, 31, 185, 70, 62, 120, 211, 250, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 86, 6, 62, 88, 146, 47, 189, 240, 225, 21, 62, 31, 156, 187, 189, 173, 253, 72, 62, 88, 119, 70, 61, 155, 121, 161, 61, 75, 4, 119, 62, 119, 31, 15, 62, 61, 253, 95, 62, 221, 172, 39, 62, 232, 168, 195, 61, 5, 230, 7, 190, 146, 228, 32, 62, 153, 235, 109, 62, 85, 122, 17, 190, 148, 46, 217, 61, 76, 148, 30, 62, 200, 150, 183, 189, 124, 68, 218, 190, 246, 90, 11, 62, 249, 182, 131, 62, 86, 118, 58, 61, 103, 202, 134, 62, 72, 70, 56, 62, 157, 25, 15, 62, 69, 140, 13, 190, 110, 23, 101, 62, 61, 2, 4, 62, 123, 219, 238, 61, 126, 162, 160, 190, 186, 251, 65, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 252, 139, 190, 103, 95, 52, 191, 61, 86, 212, 190, 28, 240, 239, 61, 138, 216, 223, 62, 209, 166, 62, 62, 216, 232, 51, 190, 23, 140, 173, 62, 53, 241, 74, 61, 34, 150, 219, 191, 93, 248, 187, 190, 146, 129, 221, 62, 254, 37, 150, 61, 9, 43, 80, 62, 169, 50, 98, 191, 134, 41, 27, 63, 23, 1, 61, 191, 181, 13, 130, 190, 147, 216, 200, 188, 43, 144, 100, 62, 76, 144, 162, 190, 121, 193, 5, 62, 151, 104, 35, 191, 42, 95, 152, 190, 11, 74, 46, 63, 27, 166, 31, 190, 92, 4, 8, 62, 22, 84, 54, 190, 217, 44, 134, 190, 143, 2, 188, 190, 183, 150, 139, 62, 165, 117, 43, 190, 60, 44, 151, 189, 47, 198, 130, 62, 1, 164, 67, 189, 176, 162, 179, 188, 133, 36, 88, 190, 24, 239, 13, 190, 39, 140, 196, 189, 148, 179, 240, 189, 210, 31, 96, 190, 149, 177, 23, 62, 138, 193, 151, 188, 97, 45, 18, 62, 206, 17, 245, 61, 98, 146, 106, 62, 60, 61, 19, 62, 180, 114, 137, 62, 67, 36, 129, 62, 171, 180, 187, 190, 45, 84, 151, 189, 32, 149, 29, 63, 49, 133, 12, 190, 54, 73, 65, 190, 159, 10, 215, 62, 26, 173, 232, 190, 77, 71, 127, 61, 6, 113, 187, 189, 144, 120, 64, 186, 159, 189, 56, 190, 30, 72, 128, 189, 115, 207, 183, 190, 67, 205, 66, 62, 251, 243, 40, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 241, 35, 62, 235, 248, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {132, 30, 19, 63, 231, 134, 20, 63, 207, 77, 44, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 185, 223, 191, 171, 110, 187, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}