// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 81, 54, 62, 104, 249, 66, 188, 239, 190, 32, 191, 42, 52, 180, 62, 60, 231, 10, 63, 128, 196, 34, 191, 106, 102, 14, 190, 125, 19, 12, 63, 50, 22, 151, 62, 250, 46, 35, 191, 251, 138, 133, 191, 243, 24, 46, 62, 56, 54, 219, 189, 236, 117, 33, 190, 51, 6, 88, 63, 209, 76, 153, 189, 202, 155, 6, 63, 187, 181, 172, 62, 146, 63, 158, 190, 247, 58, 233, 190, 55, 113, 30, 63, 127, 176, 98, 62, 15, 204, 74, 63, 233, 97, 235, 62, 28, 191, 29, 63, 152, 205, 7, 61, 31, 79, 31, 62, 250, 9, 38, 62, 83, 35, 196, 62, 118, 44, 38, 62, 198, 247, 64, 63, 211, 69, 42, 62, 72, 115, 157, 189, 80, 240, 136, 190, 80, 107, 85, 191, 123, 120, 234, 60, 127, 113, 196, 62, 223, 146, 38, 191, 56, 43, 222, 190, 138, 207, 174, 190, 83, 140, 90, 191, 196, 154, 242, 62, 213, 59, 44, 63, 219, 145, 122, 190, 23, 57, 177, 188, 85, 227, 247, 61, 115, 147, 249, 190, 41, 65, 0, 63, 54, 170, 0, 191, 126, 108, 151, 60, 42, 252, 219, 190, 239, 222, 54, 190, 150, 70, 35, 61, 138, 139, 48, 62, 5, 163, 28, 63, 65, 221, 171, 190, 200, 233, 178, 189, 17, 114, 162, 62, 220, 182, 116, 63, 83, 95, 164, 190, 5, 135, 39, 190, 14, 9, 78, 63, 42, 61, 155, 189, 151, 114, 236, 190, 144, 101, 240, 189, 148, 181, 15, 63, 180, 183, 160, 190, 236, 101, 175, 61, 105, 217, 252, 190, 59, 93, 84, 190, 154, 50, 63, 63, 2, 32, 40, 62, 159, 252, 165, 62, 240, 51, 14, 63, 148, 92, 135, 189, 30, 166, 77, 62, 248, 165, 119, 63, 5, 201, 250, 190, 118, 59, 169, 61, 46, 90, 9, 191, 228, 176, 72, 63, 208, 94, 175, 190, 124, 135, 53, 191, 80, 92, 182, 189, 40, 89, 14, 61, 155, 179, 120, 63, 80, 7, 5, 190, 169, 220, 10, 62, 181, 173, 95, 191, 170, 222, 16, 62, 209, 48, 165, 190, 252, 7, 143, 191, 84, 148, 79, 63, 225, 9, 250, 62, 36, 220, 197, 190, 145, 0, 207, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 200, 202, 190, 253, 85, 43, 62, 236, 145, 45, 191, 38, 184, 236, 190, 135, 10, 47, 62, 240, 153, 131, 62, 180, 174, 83, 62, 252, 177, 169, 190, 186, 246, 170, 188, 114, 103, 112, 190, 253, 244, 56, 62, 237, 161, 63, 60, 118, 8, 216, 190, 186, 215, 201, 190, 56, 143, 142, 62, 227, 177, 16, 61, 163, 220, 137, 190, 7, 49, 4, 63, 32, 165, 192, 188, 37, 92, 137, 62, 44, 110, 206, 62, 217, 64, 148, 190, 154, 98, 49, 63, 101, 21, 116, 62, 42, 35, 114, 190, 60, 116, 117, 62, 236, 255, 67, 190, 142, 25, 151, 62, 237, 210, 134, 62, 118, 189, 138, 189, 178, 16, 17, 190, 71, 239, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 103, 14, 59, 225, 25, 241, 189, 23, 9, 28, 190, 102, 94, 142, 189, 76, 253, 150, 190, 154, 39, 208, 60, 53, 250, 106, 61, 155, 54, 223, 61, 235, 209, 48, 62, 81, 142, 0, 61, 76, 234, 150, 62, 82, 119, 235, 61, 214, 2, 121, 190, 239, 144, 5, 62, 7, 142, 137, 62, 54, 193, 1, 190, 248, 110, 71, 59, 71, 149, 147, 189, 58, 218, 165, 61, 48, 165, 235, 189, 97, 38, 37, 62, 106, 119, 194, 190, 59, 195, 13, 62, 90, 100, 109, 189, 231, 79, 163, 62, 138, 0, 194, 62, 219, 231, 246, 189, 240, 235, 255, 187, 243, 25, 52, 61, 244, 179, 242, 61, 157, 145, 135, 191, 49, 171, 76, 61, 240, 49, 5, 189, 23, 71, 208, 189, 165, 71, 242, 189, 71, 148, 130, 190, 68, 125, 215, 190, 116, 149, 134, 190, 170, 48, 152, 61, 209, 29, 204, 189, 100, 96, 151, 61, 163, 206, 76, 190, 160, 87, 88, 187, 80, 18, 179, 61, 123, 247, 219, 190, 52, 109, 170, 60, 96, 166, 39, 62, 214, 13, 57, 62, 183, 19, 126, 62, 140, 64, 187, 61, 127, 16, 159, 59, 109, 255, 164, 190, 157, 80, 36, 62, 91, 87, 78, 190, 19, 71, 10, 62, 233, 8, 134, 188, 71, 76, 112, 61, 174, 246, 166, 62, 62, 50, 192, 61, 217, 19, 62, 62, 202, 90, 77, 62, 5, 52, 215, 61, 105, 70, 74, 191, 233, 154, 150, 190, 65, 33, 52, 190, 225, 245, 178, 190, 115, 115, 0, 190, 201, 198, 42, 190, 28, 32, 164, 61, 14, 166, 225, 61, 42, 131, 156, 187, 64, 152, 154, 60, 251, 213, 61, 189, 213, 141, 143, 190, 238, 193, 161, 61, 104, 22, 238, 189, 139, 175, 26, 190, 252, 124, 102, 188, 232, 46, 18, 62, 6, 200, 130, 189, 127, 25, 5, 62, 143, 212, 75, 62, 87, 183, 111, 60, 40, 117, 150, 190, 87, 197, 55, 189, 11, 201, 98, 189, 206, 216, 14, 189, 155, 14, 11, 62, 128, 79, 192, 188, 118, 121, 19, 62, 253, 222, 139, 62, 8, 130, 143, 190, 103, 127, 57, 62, 83, 98, 236, 189, 211, 191, 132, 190, 219, 46, 116, 189, 167, 51, 198, 61, 168, 140, 23, 190, 114, 126, 21, 190, 200, 158, 128, 59, 40, 94, 19, 190, 45, 43, 208, 189, 173, 47, 204, 60, 125, 205, 56, 189, 77, 174, 156, 61, 118, 173, 133, 189, 217, 171, 57, 61, 84, 162, 67, 189, 161, 218, 49, 190, 253, 172, 32, 62, 88, 96, 244, 60, 226, 186, 5, 61, 101, 97, 128, 60, 232, 31, 236, 187, 156, 38, 34, 62, 27, 85, 30, 190, 28, 22, 218, 189, 253, 249, 67, 189, 30, 79, 40, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 247, 3, 240, 61, 189, 254, 82, 61, 41, 152, 168, 189, 33, 36, 251, 189, 38, 8, 13, 190, 14, 0, 91, 189, 150, 100, 110, 62, 215, 98, 78, 59, 24, 206, 212, 189, 65, 67, 85, 62, 23, 232, 6, 188, 181, 189, 206, 61, 160, 91, 96, 62, 45, 129, 137, 59, 48, 41, 3, 63, 46, 71, 45, 190, 15, 231, 114, 62, 25, 106, 85, 61, 107, 208, 167, 62, 96, 120, 245, 186, 2, 39, 92, 190, 79, 3, 18, 190, 41, 226, 144, 190, 27, 180, 141, 62, 186, 75, 58, 62, 186, 115, 164, 60, 251, 42, 30, 61, 71, 250, 155, 61, 82, 23, 70, 190, 42, 110, 40, 60, 79, 35, 64, 62, 189, 74, 166, 191, 186, 250, 47, 190, 36, 241, 35, 62, 78, 75, 157, 190, 77, 115, 99, 188, 147, 148, 198, 62, 254, 21, 251, 189, 169, 80, 39, 62, 255, 242, 150, 62, 110, 232, 141, 190, 75, 158, 19, 62, 226, 223, 129, 189, 149, 130, 106, 62, 25, 196, 74, 189, 89, 112, 242, 190, 210, 136, 182, 61, 239, 3, 203, 190, 245, 131, 220, 61, 255, 130, 31, 61, 29, 209, 68, 61, 122, 134, 94, 190, 111, 234, 117, 189, 37, 28, 45, 190, 8, 126, 67, 62, 116, 239, 108, 189, 170, 76, 67, 62, 243, 167, 182, 62, 129, 185, 112, 188, 171, 206, 193, 61, 90, 201, 210, 61, 233, 17, 82, 59, 251, 5, 33, 190, 57, 21, 69, 61, 79, 148, 72, 190, 213, 235, 140, 62, 196, 158, 10, 189, 205, 58, 6, 190, 27, 192, 28, 63, 215, 198, 21, 61, 92, 161, 213, 61, 207, 10, 252, 187, 45, 101, 16, 190, 177, 46, 0, 62, 30, 203, 15, 62, 143, 180, 242, 189, 218, 173, 25, 61, 229, 44, 33, 190, 139, 196, 226, 60, 148, 219, 28, 190, 178, 241, 2, 62, 234, 29, 161, 62, 199, 152, 254, 61, 162, 28, 219, 61, 234, 92, 171, 62, 186, 250, 196, 188, 125, 213, 209, 189, 222, 81, 126, 61, 75, 45, 233, 61, 54, 36, 12, 188, 246, 194, 18, 60, 25, 238, 2, 62, 139, 205, 133, 190, 74, 124, 179, 59, 192, 216, 43, 190, 254, 122, 204, 61, 137, 18, 200, 61, 220, 55, 109, 189, 119, 29, 30, 62, 201, 167, 153, 62, 246, 76, 150, 62, 240, 126, 35, 62, 218, 39, 35, 62, 92, 169, 58, 62, 149, 46, 21, 191, 40, 42, 149, 62, 125, 250, 26, 62, 68, 152, 167, 60, 200, 111, 31, 62, 178, 111, 139, 190, 72, 203, 216, 61, 117, 115, 95, 190, 203, 192, 171, 62, 23, 16, 69, 62, 255, 85, 255, 189, 249, 11, 106, 190, 250, 190, 199, 188, 120, 32, 62, 190, 206, 54, 177, 189, 246, 94, 5, 62, 208, 117, 79, 61, 190, 125, 92, 61, 174, 89, 31, 190, 106, 147, 14, 62, 23, 167, 105, 189, 167, 234, 122, 188, 103, 202, 119, 189, 239, 227, 255, 190, 95, 116, 208, 190, 19, 118, 252, 61, 66, 248, 85, 190, 239, 76, 55, 190, 211, 26, 168, 62, 138, 37, 84, 189, 172, 94, 171, 190, 4, 16, 45, 189, 90, 25, 195, 189, 166, 12, 88, 61, 131, 95, 179, 188, 160, 18, 168, 62, 211, 173, 147, 61, 184, 117, 24, 62, 250, 145, 185, 62, 224, 17, 112, 62, 205, 62, 36, 62, 57, 82, 191, 188, 6, 67, 219, 189, 223, 183, 105, 190, 142, 112, 159, 62, 198, 84, 2, 190, 81, 158, 109, 190, 128, 16, 138, 61, 130, 239, 205, 61, 65, 155, 126, 62, 133, 72, 61, 62, 126, 202, 90, 189, 72, 241, 4, 190, 68, 56, 53, 187, 205, 87, 214, 189, 53, 125, 145, 61, 214, 197, 145, 189, 71, 139, 133, 61, 242, 234, 247, 60, 209, 72, 17, 62, 120, 10, 253, 61, 130, 88, 217, 189, 9, 60, 135, 190, 125, 152, 27, 191, 212, 54, 189, 190, 220, 177, 165, 190, 46, 241, 187, 190, 128, 209, 192, 189, 246, 80, 165, 188, 195, 189, 22, 189, 189, 44, 174, 189, 88, 44, 36, 190, 49, 69, 186, 61, 188, 94, 20, 62, 177, 74, 8, 191, 173, 102, 4, 62, 38, 14, 105, 62, 173, 167, 30, 61, 220, 252, 7, 62, 170, 192, 238, 61, 135, 166, 182, 189, 171, 205, 56, 191, 224, 211, 70, 61, 66, 192, 255, 190, 114, 247, 94, 62, 20, 97, 224, 189, 83, 17, 55, 62, 206, 62, 32, 62, 80, 255, 164, 61, 122, 231, 14, 61, 229, 235, 20, 190, 97, 198, 127, 61, 135, 189, 131, 191, 108, 169, 140, 190, 94, 16, 65, 190, 84, 225, 154, 60, 186, 161, 1, 62, 90, 77, 172, 190, 148, 242, 16, 62, 55, 182, 101, 62, 57, 89, 144, 61, 244, 67, 15, 62, 7, 0, 45, 190, 237, 133, 49, 61, 82, 121, 130, 61, 67, 195, 5, 190, 169, 157, 111, 190, 204, 248, 106, 61, 242, 33, 48, 61, 161, 220, 77, 61, 145, 213, 233, 61, 147, 114, 25, 62, 91, 128, 132, 61, 82, 25, 166, 190, 211, 114, 130, 60, 154, 146, 96, 189, 148, 100, 119, 189, 60, 120, 13, 62, 104, 230, 54, 62, 123, 90, 44, 62, 230, 153, 140, 61, 195, 215, 189, 190, 235, 201, 75, 62, 90, 192, 27, 189, 73, 220, 218, 190, 232, 107, 137, 189, 78, 122, 62, 62, 30, 178, 181, 186, 176, 69, 8, 191, 103, 45, 183, 61, 71, 37, 161, 62, 194, 9, 119, 189, 135, 6, 22, 62, 201, 249, 196, 190, 44, 71, 6, 62, 216, 167, 142, 190, 135, 123, 50, 62, 47, 228, 64, 62, 62, 58, 4, 62, 142, 227, 184, 190, 203, 24, 230, 189, 17, 153, 3, 191, 168, 44, 4, 189, 58, 146, 162, 61, 210, 107, 150, 61, 81, 205, 212, 61, 94, 163, 27, 61, 91, 147, 137, 62, 155, 194, 8, 62, 78, 248, 49, 189, 189, 118, 22, 190, 61, 199, 224, 190, 230, 128, 23, 191, 50, 54, 7, 189, 29, 206, 227, 190, 84, 70, 163, 190, 69, 146, 32, 63, 184, 244, 99, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 144, 70, 211, 188, 210, 132, 198, 190, 102, 243, 97, 62, 148, 152, 103, 62, 44, 173, 109, 62, 240, 160, 142, 189, 106, 65, 61, 61, 165, 97, 70, 61, 44, 143, 150, 62, 230, 244, 62, 188, 81, 130, 233, 61, 101, 82, 190, 61, 253, 37, 164, 61, 87, 233, 234, 61, 215, 232, 51, 190, 116, 74, 213, 60, 18, 190, 141, 190, 124, 187, 60, 189, 243, 33, 25, 62, 91, 242, 10, 62, 196, 32, 248, 61, 16, 141, 230, 59, 204, 131, 131, 189, 112, 75, 67, 189, 207, 115, 130, 61, 206, 173, 80, 191, 21, 213, 4, 62, 115, 81, 178, 61, 12, 143, 139, 188, 109, 217, 50, 190, 9, 189, 83, 62, 253, 111, 77, 190, 97, 216, 58, 190, 234, 223, 134, 190, 143, 232, 202, 190, 25, 104, 62, 190, 36, 186, 232, 190, 70, 252, 68, 189, 80, 117, 175, 189, 37, 56, 170, 61, 115, 102, 178, 59, 169, 165, 38, 62, 152, 199, 116, 61, 184, 92, 86, 190, 27, 46, 182, 190, 27, 249, 220, 189, 110, 184, 141, 61, 125, 243, 80, 62, 135, 96, 129, 62, 92, 82, 25, 190, 155, 210, 165, 189, 213, 34, 245, 190, 244, 171, 108, 62, 99, 228, 53, 191, 75, 198, 85, 62, 75, 238, 22, 62, 112, 23, 48, 62, 242, 122, 204, 62, 117, 191, 231, 61, 173, 218, 62, 62, 137, 135, 85, 62, 165, 70, 86, 190, 208, 174, 199, 191, 169, 112, 119, 190, 79, 43, 114, 62, 14, 248, 43, 62, 112, 40, 19, 191, 5, 192, 182, 62, 190, 178, 10, 62, 197, 116, 54, 60, 48, 213, 107, 62, 174, 60, 168, 190, 128, 51, 17, 62, 22, 108, 160, 190, 87, 2, 41, 62, 179, 142, 162, 189, 99, 137, 49, 61, 100, 134, 253, 190, 163, 42, 165, 189, 137, 19, 142, 190, 222, 205, 140, 189, 182, 150, 90, 62, 140, 169, 105, 62, 156, 119, 176, 62, 133, 96, 178, 188, 167, 211, 238, 186, 91, 76, 176, 61, 225, 57, 184, 61, 96, 37, 75, 60, 136, 244, 228, 190, 117, 26, 251, 190, 39, 82, 59, 189, 153, 227, 187, 190, 213, 98, 212, 190, 89, 186, 25, 63, 98, 56, 16, 62, 155, 249, 129, 190, 136, 94, 163, 190, 69, 58, 58, 190, 49, 73, 108, 190, 186, 235, 129, 190, 72, 66, 64, 190, 160, 167, 103, 190, 73, 168, 196, 61, 63, 99, 132, 61, 105, 61, 31, 62, 133, 142, 204, 61, 114, 119, 238, 61, 249, 245, 226, 190, 239, 41, 32, 190, 211, 165, 225, 188, 124, 140, 235, 61, 40, 110, 166, 62, 129, 185, 198, 61, 104, 5, 140, 61, 76, 59, 157, 190, 226, 35, 162, 62, 244, 240, 60, 191, 228, 189, 31, 62, 237, 213, 121, 61, 1, 20, 199, 62, 119, 133, 230, 62, 150, 135, 3, 188, 248, 254, 9, 62, 12, 255, 175, 59, 252, 11, 138, 190, 205, 113, 172, 191, 137, 27, 181, 189, 163, 103, 249, 61, 147, 238, 138, 60, 64, 60, 233, 58, 50, 53, 175, 62, 212, 110, 163, 190, 228, 6, 173, 189, 187, 44, 134, 188, 227, 44, 57, 60, 32, 93, 9, 62, 99, 120, 198, 60, 5, 164, 187, 189, 93, 93, 103, 62, 82, 240, 141, 190, 163, 232, 4, 63, 106, 119, 134, 62, 54, 48, 33, 62, 164, 197, 151, 62, 53, 52, 196, 60, 120, 103, 238, 189, 190, 36, 25, 190, 165, 9, 230, 189, 2, 99, 239, 190, 74, 192, 144, 62, 89, 10, 157, 190, 85, 44, 144, 60, 136, 47, 36, 62, 45, 241, 188, 62, 233, 73, 124, 62, 186, 70, 205, 61, 71, 249, 166, 62, 142, 36, 202, 190, 197, 136, 252, 61, 178, 22, 155, 61, 255, 78, 78, 189, 84, 148, 8, 190, 148, 211, 36, 190, 220, 17, 145, 61, 40, 180, 145, 189, 36, 89, 13, 62, 61, 131, 205, 59, 234, 118, 137, 189, 173, 47, 164, 61, 70, 61, 176, 59, 218, 255, 23, 187, 122, 159, 145, 189, 173, 194, 80, 189, 36, 71, 3, 62, 28, 102, 52, 189, 127, 57, 180, 189, 185, 120, 231, 189, 161, 123, 160, 189, 183, 114, 211, 189, 63, 95, 146, 188, 41, 135, 10, 190, 174, 236, 248, 60, 212, 29, 3, 188, 102, 11, 27, 190, 224, 197, 241, 61, 105, 234, 237, 188, 44, 4, 160, 189, 254, 148, 202, 189, 128, 213, 196, 189, 134, 109, 79, 61, 238, 158, 148, 188, 110, 218, 133, 62, 132, 83, 198, 188, 200, 148, 68, 60, 16, 0, 48, 190, 103, 224, 232, 61, 88, 234, 141, 188, 78, 200, 44, 190, 255, 173, 60, 62, 61, 51, 122, 189, 55, 139, 34, 189, 252, 68, 144, 62, 61, 150, 136, 60, 196, 200, 207, 62, 100, 59, 182, 185, 254, 119, 167, 62, 160, 70, 215, 61, 236, 39, 102, 189, 73, 183, 108, 189, 147, 91, 20, 63, 95, 177, 252, 60, 246, 20, 186, 190, 50, 70, 48, 190, 2, 69, 203, 188, 50, 217, 87, 60, 18, 153, 37, 61, 81, 206, 223, 189, 159, 88, 26, 189, 15, 168, 29, 61, 164, 12, 161, 189, 73, 42, 101, 60, 12, 237, 80, 190, 40, 18, 177, 189, 100, 26, 254, 61, 158, 124, 108, 189, 214, 145, 50, 190, 97, 48, 9, 61, 251, 201, 84, 62, 87, 213, 174, 189, 59, 108, 47, 187, 115, 49, 142, 188, 78, 183, 123, 190, 76, 139, 149, 189, 156, 76, 109, 62, 73, 228, 87, 62, 160, 253, 236, 61, 123, 105, 96, 62, 164, 174, 30, 62, 170, 105, 27, 188, 32, 176, 246, 190, 147, 123, 128, 62, 43, 195, 48, 62, 168, 87, 85, 189, 37, 130, 49, 189, 85, 101, 139, 61, 255, 12, 167, 190, 231, 209, 244, 189, 225, 46, 0, 62, 120, 47, 76, 62, 70, 123, 136, 189, 47, 185, 251, 61, 77, 154, 43, 189, 246, 24, 5, 63, 194, 247, 164, 62, 152, 221, 94, 62, 9, 56, 96, 189, 107, 105, 11, 61, 34, 64, 229, 190, 93, 173, 65, 62, 161, 46, 104, 62, 74, 150, 77, 62, 86, 151, 148, 189, 153, 115, 23, 190, 247, 69, 13, 62, 100, 158, 169, 190, 192, 185, 139, 61, 14, 16, 93, 62, 118, 229, 48, 62, 10, 92, 9, 190, 196, 66, 135, 59, 23, 58, 189, 190, 217, 17, 124, 188, 136, 227, 118, 61, 121, 65, 60, 189, 176, 242, 130, 62, 5, 212, 222, 189, 156, 45, 199, 61, 174, 234, 32, 62, 114, 202, 61, 190, 217, 168, 199, 190, 200, 52, 5, 190, 167, 128, 236, 190, 213, 194, 190, 187, 105, 97, 4, 190, 240, 15, 17, 190, 139, 42, 249, 62, 67, 19, 128, 62, 83, 144, 46, 190, 19, 224, 61, 190, 58, 165, 28, 190, 60, 146, 214, 189, 29, 237, 168, 190, 179, 119, 219, 189, 69, 118, 111, 190, 98, 190, 56, 62, 202, 158, 18, 62, 67, 139, 237, 61, 196, 157, 56, 62, 128, 91, 85, 189, 61, 17, 174, 190, 189, 113, 118, 190, 5, 40, 38, 62, 49, 91, 75, 189, 44, 45, 212, 62, 123, 252, 26, 61, 71, 30, 73, 61, 99, 24, 248, 190, 189, 112, 164, 62, 161, 16, 176, 190, 2, 51, 74, 62, 125, 246, 230, 188, 117, 23, 164, 62, 199, 176, 152, 62, 242, 119, 56, 189, 178, 46, 9, 61, 234, 178, 117, 62, 10, 142, 85, 190, 27, 2, 139, 191, 169, 48, 87, 190, 178, 170, 37, 190, 249, 15, 118, 189, 71, 125, 186, 189, 158, 211, 20, 191, 167, 17, 16, 62, 224, 2, 52, 61, 31, 33, 29, 62, 226, 1, 3, 189, 45, 219, 72, 190, 218, 189, 134, 190, 106, 191, 64, 61, 164, 220, 248, 190, 239, 184, 251, 60, 59, 211, 247, 61, 27, 22, 149, 62, 19, 77, 166, 61, 223, 88, 156, 190, 72, 209, 121, 61, 147, 85, 110, 61, 197, 97, 43, 61, 21, 32, 171, 61, 185, 148, 102, 61, 235, 35, 138, 190, 26, 208, 100, 60, 95, 95, 93, 59, 207, 52, 190, 61, 68, 56, 24, 59, 178, 239, 6, 191, 14, 200, 236, 187, 220, 177, 255, 61, 141, 11, 245, 59, 89, 245, 36, 59, 41, 65, 244, 189, 32, 232, 31, 188, 193, 204, 9, 191, 63, 8, 38, 62, 60, 163, 93, 61, 119, 191, 23, 62, 64, 71, 71, 62, 1, 133, 225, 190, 124, 42, 105, 190, 82, 162, 126, 190, 187, 99, 110, 62, 236, 210, 243, 189, 48, 116, 101, 62, 221, 254, 13, 190, 98, 186, 166, 189, 165, 71, 172, 190, 235, 75, 230, 190, 142, 124, 82, 62, 227, 39, 235, 188, 194, 225, 11, 63, 110, 135, 223, 189, 199, 73, 23, 61, 203, 85, 165, 61, 172, 155, 29, 61, 36, 75, 130, 189, 123, 151, 154, 190, 250, 85, 255, 190, 143, 219, 66, 190, 151, 167, 191, 189, 215, 109, 94, 190, 157, 191, 240, 62, 124, 113, 239, 189, 150, 26, 238, 61, 130, 202, 11, 62, 76, 248, 133, 190, 221, 119, 121, 190, 218, 129, 150, 190, 48, 20, 186, 61, 138, 83, 68, 59, 185, 164, 130, 189, 51, 127, 43, 61, 176, 45, 51, 190, 216, 80, 24, 62, 129, 210, 52, 62, 148, 63, 13, 188, 133, 125, 15, 190, 0, 218, 6, 62, 85, 55, 40, 59, 139, 189, 177, 189, 119, 31, 158, 61, 182, 240, 28, 62, 231, 76, 16, 190, 144, 182, 226, 61, 46, 58, 148, 190, 64, 168, 94, 189, 133, 157, 171, 61, 88, 34, 86, 61, 132, 104, 196, 62, 162, 212, 222, 60, 207, 154, 248, 60, 119, 73, 199, 189, 4, 39, 245, 189, 195, 134, 81, 191, 220, 74, 212, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 15, 66, 202, 61, 130, 182, 16, 62, 212, 182, 163, 189, 193, 54, 195, 189, 134, 9, 217, 60, 138, 10, 85, 190, 152, 246, 132, 190, 25, 222, 121, 61, 46, 173, 109, 62, 119, 196, 8, 190, 133, 23, 254, 60, 110, 35, 183, 60, 123, 27, 68, 190, 254, 250, 47, 62, 215, 46, 39, 62, 215, 169, 58, 190, 33, 213, 64, 62, 44, 121, 31, 61, 15, 179, 79, 62, 150, 121, 3, 190, 35, 140, 199, 61, 185, 164, 200, 189, 193, 194, 101, 61, 74, 86, 248, 61, 116, 161, 232, 61, 231, 66, 97, 61, 239, 220, 230, 61, 38, 40, 13, 189, 235, 159, 161, 189, 146, 14, 94, 60, 29, 48, 1, 191, 50, 67, 39, 62, 103, 73, 241, 189, 41, 221, 160, 189, 114, 190, 17, 189, 194, 45, 252, 189, 250, 33, 5, 62, 241, 100, 135, 62, 51, 56, 4, 62, 76, 20, 5, 188, 178, 9, 15, 190, 145, 93, 51, 61, 123, 150, 146, 60, 78, 191, 112, 190, 134, 253, 252, 60, 37, 89, 145, 190, 154, 97, 57, 62, 244, 27, 164, 189, 10, 34, 172, 189, 177, 92, 109, 61, 186, 167, 151, 61, 234, 0, 108, 189, 188, 14, 159, 188, 214, 15, 0, 60, 123, 94, 30, 190, 235, 221, 163, 62, 77, 114, 56, 190, 11, 146, 71, 62, 87, 66, 3, 190, 214, 57, 183, 190, 221, 69, 128, 61, 228, 143, 146, 190, 252, 244, 132, 190, 131, 248, 218, 60, 12, 199, 17, 190, 162, 55, 83, 190, 91, 107, 47, 190, 121, 93, 182, 190, 161, 128, 142, 190, 135, 8, 236, 61, 118, 73, 45, 190, 29, 94, 253, 61, 142, 166, 144, 62, 66, 74, 35, 190, 45, 32, 177, 61, 84, 209, 211, 189, 188, 0, 191, 188, 31, 110, 27, 190, 227, 230, 181, 61, 162, 21, 167, 61, 54, 237, 152, 188, 163, 75, 132, 61, 166, 189, 74, 62, 67, 170, 160, 190, 81, 15, 142, 61, 76, 55, 217, 190, 176, 212, 123, 62, 86, 87, 214, 189, 6, 86, 170, 61, 39, 172, 193, 62, 166, 148, 77, 190, 59, 140, 225, 60, 131, 107, 5, 62, 49, 29, 50, 62, 156, 247, 61, 191, 79, 123, 14, 62, 193, 172, 4, 61, 185, 192, 193, 61, 120, 24, 191, 62, 217, 184, 84, 190, 193, 241, 142, 188, 11, 221, 134, 60, 246, 122, 150, 190, 182, 12, 81, 60, 186, 212, 190, 62, 166, 43, 83, 62, 84, 179, 85, 190, 165, 99, 228, 61, 38, 30, 203, 189, 185, 189, 100, 62, 2, 175, 169, 188, 18, 38, 142, 62, 220, 207, 86, 62, 73, 16, 92, 190, 186, 124, 252, 190, 42, 58, 132, 61, 218, 247, 182, 61, 222, 18, 92, 61, 188, 190, 45, 62, 101, 56, 144, 189, 8, 34, 32, 189, 171, 185, 103, 62, 209, 221, 132, 62, 135, 175, 17, 190, 185, 54, 116, 62, 54, 69, 31, 60, 165, 211, 8, 190, 218, 5, 66, 190, 221, 204, 87, 189, 89, 63, 211, 189, 92, 158, 150, 189, 12, 149, 98, 62, 246, 213, 102, 187, 128, 141, 138, 61, 99, 166, 95, 62, 76, 236, 58, 61, 17, 174, 200, 190, 108, 176, 126, 61, 155, 183, 197, 190, 50, 207, 135, 60, 134, 152, 39, 189, 131, 230, 254, 61, 174, 253, 87, 62, 7, 183, 30, 61, 15, 199, 83, 190, 252, 126, 215, 58, 72, 98, 200, 189, 40, 69, 240, 61, 20, 251, 7, 190, 79, 150, 168, 61, 61, 178, 85, 61, 120, 190, 15, 190, 194, 138, 48, 190, 121, 166, 163, 189, 51, 110, 242, 61, 176, 80, 159, 60, 191, 53, 99, 190, 10, 199, 192, 62, 44, 244, 113, 62, 91, 41, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 167, 232, 61, 172, 79, 182, 189, 32, 80, 145, 61, 31, 156, 187, 189, 83, 53, 105, 62, 163, 53, 147, 61, 6, 63, 51, 61, 15, 75, 41, 62, 60, 180, 4, 62, 225, 213, 109, 62, 77, 40, 17, 62, 109, 125, 133, 61, 5, 230, 7, 190, 62, 157, 192, 61, 44, 39, 73, 62, 210, 170, 170, 189, 50, 30, 190, 61, 211, 24, 66, 62, 200, 150, 183, 189, 234, 13, 134, 190, 204, 246, 202, 61, 168, 231, 78, 62, 214, 250, 60, 60, 184, 131, 107, 62, 194, 62, 18, 62, 169, 240, 226, 61, 69, 140, 13, 190, 244, 198, 9, 62, 203, 165, 181, 61, 9, 55, 180, 61, 230, 186, 109, 190, 118, 62, 220, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 6, 165, 190, 54, 125, 229, 190, 221, 65, 127, 190, 28, 240, 239, 61, 47, 121, 235, 62, 39, 101, 73, 62, 20, 179, 74, 190, 143, 211, 199, 62, 21, 140, 36, 61, 169, 187, 133, 191, 240, 216, 120, 190, 123, 186, 7, 63, 254, 37, 150, 61, 234, 188, 79, 62, 172, 16, 53, 191, 135, 248, 12, 63, 41, 176, 22, 191, 211, 195, 61, 190, 147, 216, 200, 188, 160, 1, 199, 189, 243, 44, 175, 190, 140, 213, 131, 62, 217, 210, 20, 191, 45, 104, 165, 190, 44, 92, 11, 63, 20, 54, 85, 190, 92, 4, 8, 62, 248, 151, 9, 190, 82, 222, 126, 189, 235, 6, 233, 190, 52, 13, 144, 62, 71, 215, 63, 190, 221, 108, 154, 189, 89, 42, 59, 62, 162, 26, 32, 190, 176, 162, 179, 188, 4, 152, 143, 190, 136, 107, 201, 189, 105, 79, 239, 189, 100, 173, 234, 189, 25, 199, 41, 190, 242, 79, 49, 60, 226, 47, 60, 190, 45, 76, 9, 62, 206, 17, 245, 61, 104, 210, 64, 62, 210, 122, 135, 61, 183, 131, 88, 62, 90, 71, 63, 62, 131, 2, 190, 190, 45, 84, 151, 189, 218, 125, 209, 62, 99, 155, 90, 190, 211, 118, 30, 190, 24, 197, 96, 62, 127, 122, 6, 191, 29, 92, 5, 62, 182, 131, 192, 189, 144, 120, 64, 186, 134, 12, 207, 189, 222, 91, 142, 190, 174, 244, 178, 190, 53, 117, 111, 62, 91, 169, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 146, 37, 62, 219, 107, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {223, 109, 13, 63, 190, 148, 150, 63, 169, 125, 188, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {249, 182, 154, 191, 147, 149, 174, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}