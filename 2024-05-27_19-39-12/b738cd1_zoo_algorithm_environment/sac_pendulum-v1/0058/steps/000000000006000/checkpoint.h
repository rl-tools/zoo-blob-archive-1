// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 113, 235, 61, 117, 92, 119, 190, 49, 144, 29, 191, 101, 40, 193, 62, 135, 4, 176, 62, 161, 3, 35, 191, 137, 14, 196, 189, 66, 58, 3, 63, 132, 108, 174, 62, 127, 158, 239, 190, 212, 130, 113, 191, 190, 236, 80, 62, 129, 57, 242, 189, 144, 38, 154, 62, 0, 1, 95, 63, 211, 123, 167, 189, 196, 79, 76, 63, 167, 82, 205, 62, 85, 218, 235, 190, 204, 173, 224, 190, 61, 199, 15, 63, 229, 69, 217, 61, 73, 215, 141, 63, 63, 46, 232, 62, 124, 177, 56, 63, 214, 220, 4, 60, 121, 111, 9, 62, 107, 128, 110, 62, 50, 120, 26, 63, 134, 125, 30, 62, 27, 88, 79, 63, 214, 113, 145, 187, 204, 151, 201, 189, 130, 229, 164, 190, 229, 142, 82, 191, 168, 252, 130, 61, 250, 136, 233, 62, 126, 20, 119, 191, 55, 80, 207, 190, 58, 33, 242, 190, 45, 225, 89, 191, 170, 148, 232, 62, 217, 27, 69, 63, 97, 157, 20, 189, 41, 158, 240, 188, 108, 144, 11, 60, 202, 2, 213, 190, 232, 104, 1, 63, 53, 90, 205, 190, 168, 190, 156, 190, 75, 185, 247, 190, 198, 18, 33, 190, 242, 231, 51, 62, 115, 209, 99, 62, 114, 202, 57, 63, 122, 159, 171, 190, 119, 55, 74, 190, 52, 161, 74, 62, 14, 89, 116, 63, 84, 32, 156, 190, 199, 215, 48, 190, 231, 6, 56, 63, 220, 86, 190, 189, 239, 4, 3, 191, 61, 128, 180, 62, 152, 91, 33, 63, 62, 197, 158, 190, 36, 15, 53, 190, 140, 94, 245, 190, 41, 192, 141, 190, 62, 108, 130, 63, 185, 109, 176, 61, 145, 57, 145, 62, 247, 168, 50, 63, 84, 232, 2, 190, 63, 11, 145, 62, 47, 53, 120, 63, 122, 213, 249, 190, 249, 95, 190, 58, 2, 131, 243, 190, 224, 69, 72, 63, 46, 141, 230, 190, 85, 81, 101, 191, 133, 183, 130, 189, 204, 194, 61, 62, 212, 159, 128, 63, 2, 48, 26, 190, 156, 98, 122, 60, 8, 55, 84, 191, 112, 23, 33, 62, 141, 66, 119, 190, 221, 20, 125, 191, 62, 255, 86, 63, 29, 149, 10, 63, 30, 100, 22, 191, 34, 243, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 25, 168, 190, 126, 133, 60, 62, 204, 175, 41, 191, 245, 190, 15, 191, 34, 168, 72, 62, 159, 236, 76, 62, 37, 217, 144, 62, 67, 84, 67, 190, 20, 124, 0, 61, 51, 72, 88, 190, 180, 208, 7, 62, 175, 145, 172, 61, 1, 216, 174, 190, 241, 30, 198, 190, 232, 240, 16, 62, 201, 41, 119, 61, 10, 204, 153, 190, 93, 110, 5, 63, 229, 4, 35, 190, 239, 201, 185, 62, 213, 217, 214, 62, 74, 180, 146, 190, 152, 17, 52, 63, 184, 130, 131, 62, 179, 127, 52, 190, 253, 71, 74, 62, 209, 95, 243, 189, 173, 141, 195, 62, 220, 235, 42, 62, 44, 159, 124, 189, 27, 177, 108, 190, 22, 216, 128, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 237, 76, 60, 208, 60, 230, 189, 113, 198, 132, 190, 9, 141, 186, 61, 238, 245, 137, 190, 65, 145, 200, 187, 78, 230, 143, 61, 126, 139, 132, 62, 125, 134, 22, 62, 112, 200, 246, 60, 221, 160, 130, 62, 216, 240, 69, 62, 189, 0, 147, 190, 209, 202, 214, 62, 184, 133, 75, 62, 72, 146, 168, 188, 149, 173, 183, 60, 137, 167, 151, 189, 207, 14, 193, 189, 30, 86, 193, 189, 234, 67, 52, 62, 243, 128, 9, 191, 90, 226, 29, 62, 35, 141, 233, 189, 35, 72, 163, 62, 159, 124, 197, 62, 147, 200, 228, 188, 109, 74, 71, 60, 107, 35, 72, 61, 16, 199, 177, 60, 152, 144, 70, 191, 191, 230, 180, 60, 47, 150, 223, 188, 115, 83, 177, 189, 165, 71, 242, 189, 98, 155, 73, 61, 62, 101, 250, 190, 198, 82, 36, 191, 215, 148, 77, 62, 207, 152, 143, 189, 184, 96, 201, 59, 254, 251, 111, 61, 163, 57, 189, 61, 41, 73, 122, 62, 159, 172, 252, 190, 15, 35, 170, 62, 241, 15, 101, 62, 77, 122, 148, 62, 183, 173, 130, 62, 101, 180, 152, 61, 194, 1, 236, 189, 113, 75, 166, 190, 67, 159, 1, 62, 236, 215, 174, 190, 232, 248, 38, 62, 29, 161, 201, 190, 29, 79, 135, 62, 146, 251, 163, 62, 35, 112, 237, 61, 135, 219, 138, 62, 201, 106, 50, 62, 7, 232, 34, 62, 85, 168, 252, 190, 235, 145, 159, 190, 197, 143, 74, 190, 19, 41, 213, 190, 1, 30, 51, 190, 33, 27, 52, 190, 252, 1, 138, 61, 244, 173, 0, 62, 217, 24, 28, 189, 144, 6, 137, 60, 128, 50, 68, 189, 143, 190, 162, 190, 182, 91, 43, 62, 73, 69, 122, 190, 111, 64, 88, 190, 138, 9, 196, 189, 192, 172, 123, 62, 63, 162, 171, 189, 241, 175, 42, 60, 134, 223, 87, 62, 127, 91, 131, 61, 165, 10, 83, 190, 16, 22, 114, 59, 113, 86, 195, 189, 254, 240, 101, 60, 125, 243, 37, 62, 171, 120, 54, 190, 159, 57, 22, 62, 215, 145, 125, 62, 51, 241, 28, 191, 171, 162, 122, 62, 172, 110, 178, 189, 16, 103, 150, 190, 201, 37, 61, 189, 167, 51, 198, 61, 168, 140, 23, 190, 114, 126, 21, 190, 200, 158, 128, 59, 40, 94, 19, 190, 45, 43, 208, 189, 173, 47, 204, 60, 125, 205, 56, 189, 77, 174, 156, 61, 118, 173, 133, 189, 217, 171, 57, 61, 84, 162, 67, 189, 161, 218, 49, 190, 253, 172, 32, 62, 88, 96, 244, 60, 226, 186, 5, 61, 101, 97, 128, 60, 232, 31, 236, 187, 156, 38, 34, 62, 27, 85, 30, 190, 28, 22, 218, 189, 253, 249, 67, 189, 30, 79, 40, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 247, 3, 240, 61, 189, 254, 82, 61, 41, 152, 168, 189, 33, 36, 251, 189, 38, 8, 13, 190, 14, 0, 91, 189, 32, 93, 74, 62, 199, 249, 128, 60, 137, 158, 211, 189, 166, 22, 20, 62, 178, 27, 131, 188, 170, 161, 179, 61, 9, 23, 88, 62, 105, 92, 137, 188, 173, 69, 4, 63, 95, 105, 65, 190, 104, 247, 231, 61, 93, 214, 233, 59, 152, 116, 226, 62, 204, 166, 64, 59, 140, 36, 147, 190, 33, 20, 16, 190, 169, 131, 233, 190, 87, 167, 128, 62, 192, 173, 124, 62, 113, 131, 225, 189, 26, 70, 72, 61, 121, 111, 145, 61, 36, 247, 131, 190, 36, 241, 181, 60, 34, 70, 179, 189, 196, 185, 158, 191, 69, 74, 45, 190, 202, 231, 10, 62, 145, 170, 191, 190, 117, 86, 176, 60, 129, 238, 197, 62, 245, 40, 92, 188, 74, 193, 6, 62, 165, 228, 137, 62, 85, 43, 145, 190, 85, 93, 198, 61, 148, 182, 75, 189, 197, 187, 122, 62, 200, 213, 236, 188, 14, 251, 3, 191, 42, 185, 30, 62, 68, 54, 227, 190, 124, 112, 231, 61, 164, 6, 177, 60, 87, 72, 178, 61, 155, 16, 87, 190, 60, 129, 180, 188, 152, 192, 20, 190, 143, 191, 40, 62, 37, 173, 229, 188, 231, 22, 167, 62, 135, 149, 137, 62, 186, 139, 37, 188, 134, 22, 227, 61, 145, 241, 176, 61, 98, 61, 136, 61, 60, 30, 146, 190, 103, 41, 101, 187, 23, 197, 49, 190, 150, 48, 153, 62, 183, 0, 227, 189, 127, 0, 178, 189, 149, 158, 32, 63, 207, 145, 139, 61, 44, 81, 151, 60, 112, 118, 120, 189, 227, 53, 30, 190, 0, 233, 25, 62, 161, 10, 15, 62, 146, 251, 192, 189, 65, 52, 21, 61, 197, 196, 41, 190, 27, 76, 138, 189, 86, 139, 84, 190, 1, 21, 8, 62, 248, 206, 143, 62, 21, 80, 24, 190, 105, 87, 178, 61, 75, 136, 162, 62, 239, 21, 62, 189, 15, 17, 89, 190, 185, 95, 169, 61, 247, 44, 175, 188, 93, 26, 178, 61, 202, 113, 206, 61, 118, 129, 4, 62, 164, 94, 120, 190, 39, 78, 95, 61, 108, 166, 34, 190, 180, 155, 247, 61, 132, 234, 155, 61, 58, 10, 47, 190, 23, 204, 138, 62, 27, 247, 115, 62, 7, 150, 143, 62, 229, 172, 94, 188, 124, 204, 57, 62, 75, 7, 87, 62, 23, 26, 31, 191, 4, 142, 122, 62, 78, 255, 35, 62, 255, 108, 73, 61, 247, 25, 47, 62, 176, 245, 162, 190, 255, 174, 35, 62, 251, 100, 149, 190, 255, 188, 185, 62, 166, 171, 45, 62, 68, 122, 138, 188, 148, 132, 100, 190, 74, 193, 74, 60, 173, 176, 49, 190, 36, 23, 196, 189, 160, 51, 46, 62, 125, 250, 95, 62, 171, 142, 69, 61, 243, 118, 53, 189, 194, 2, 23, 62, 28, 217, 218, 188, 93, 181, 154, 61, 216, 199, 43, 190, 7, 158, 242, 190, 39, 133, 203, 190, 230, 178, 31, 62, 128, 59, 41, 190, 138, 159, 5, 190, 40, 186, 171, 62, 174, 51, 40, 61, 168, 16, 164, 190, 18, 245, 26, 61, 227, 128, 108, 189, 164, 188, 249, 188, 118, 222, 176, 189, 223, 192, 134, 62, 17, 183, 82, 60, 114, 193, 80, 60, 178, 152, 153, 62, 134, 95, 131, 61, 232, 60, 34, 62, 96, 109, 6, 190, 179, 196, 3, 189, 85, 36, 145, 190, 27, 102, 183, 62, 86, 165, 58, 190, 70, 222, 92, 190, 27, 70, 215, 60, 232, 231, 153, 62, 3, 81, 146, 62, 162, 96, 119, 62, 150, 233, 206, 189, 190, 54, 58, 189, 70, 146, 49, 61, 124, 242, 179, 190, 174, 7, 244, 61, 61, 234, 246, 189, 10, 255, 10, 59, 42, 184, 146, 61, 69, 156, 175, 61, 146, 59, 140, 61, 62, 118, 175, 187, 190, 69, 36, 191, 137, 105, 68, 191, 212, 54, 189, 190, 219, 174, 230, 189, 12, 83, 22, 191, 154, 175, 184, 190, 55, 42, 167, 61, 195, 189, 22, 189, 14, 91, 185, 189, 88, 44, 36, 190, 9, 65, 162, 61, 44, 225, 139, 62, 6, 214, 132, 191, 147, 2, 9, 63, 250, 36, 80, 62, 68, 210, 125, 62, 74, 46, 55, 62, 102, 29, 43, 62, 163, 96, 239, 189, 97, 149, 93, 191, 14, 190, 238, 59, 9, 236, 107, 191, 232, 198, 124, 62, 97, 8, 138, 190, 83, 17, 55, 62, 197, 185, 27, 62, 114, 177, 143, 62, 54, 127, 248, 61, 109, 184, 146, 190, 99, 191, 46, 60, 103, 131, 69, 191, 123, 95, 44, 191, 45, 90, 31, 190, 133, 181, 94, 60, 239, 116, 169, 61, 80, 18, 164, 190, 112, 195, 1, 62, 160, 93, 102, 62, 38, 161, 51, 61, 204, 124, 1, 62, 183, 82, 95, 190, 120, 85, 75, 59, 136, 173, 231, 61, 133, 237, 82, 190, 60, 76, 253, 190, 79, 154, 200, 59, 150, 221, 201, 61, 12, 166, 4, 61, 252, 193, 227, 61, 166, 11, 16, 62, 20, 148, 18, 61, 249, 66, 134, 190, 41, 63, 76, 61, 200, 126, 176, 189, 139, 124, 47, 189, 107, 106, 35, 62, 58, 193, 212, 61, 187, 20, 61, 62, 242, 232, 57, 61, 144, 46, 54, 191, 22, 79, 129, 62, 53, 41, 74, 188, 30, 241, 231, 190, 152, 219, 153, 189, 255, 231, 20, 62, 30, 210, 19, 189, 212, 67, 19, 191, 139, 64, 171, 60, 106, 160, 166, 62, 22, 234, 131, 187, 251, 193, 37, 62, 90, 240, 212, 190, 203, 40, 130, 62, 41, 22, 155, 190, 184, 63, 146, 62, 9, 54, 17, 62, 55, 197, 53, 62, 253, 163, 188, 190, 155, 178, 67, 189, 200, 117, 1, 191, 89, 13, 192, 189, 109, 77, 8, 62, 171, 254, 141, 62, 32, 61, 129, 61, 252, 18, 6, 62, 145, 228, 140, 62, 233, 128, 215, 61, 91, 46, 204, 61, 154, 64, 181, 189, 133, 171, 238, 190, 116, 34, 22, 191, 250, 79, 49, 189, 232, 206, 221, 190, 189, 226, 143, 190, 167, 171, 32, 63, 188, 0, 131, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 133, 239, 147, 189, 84, 210, 218, 190, 15, 105, 88, 62, 241, 203, 37, 62, 68, 199, 112, 62, 68, 222, 117, 189, 22, 240, 45, 61, 222, 33, 121, 61, 182, 5, 180, 62, 67, 5, 219, 60, 105, 150, 1, 190, 75, 172, 108, 61, 69, 145, 151, 62, 141, 34, 239, 61, 50, 193, 187, 190, 174, 212, 253, 60, 102, 87, 220, 190, 28, 245, 77, 189, 93, 65, 217, 60, 33, 200, 34, 62, 49, 41, 72, 62, 191, 111, 180, 59, 50, 109, 66, 190, 168, 81, 207, 187, 169, 57, 134, 61, 231, 105, 27, 191, 29, 59, 9, 62, 25, 21, 178, 61, 0, 158, 74, 60, 35, 103, 38, 190, 201, 248, 78, 62, 236, 4, 41, 190, 210, 254, 17, 190, 132, 173, 111, 190, 218, 122, 204, 190, 59, 140, 130, 189, 218, 25, 37, 191, 201, 243, 158, 190, 11, 193, 91, 190, 105, 14, 249, 61, 235, 43, 168, 61, 204, 53, 77, 62, 25, 230, 105, 61, 202, 199, 41, 189, 175, 185, 174, 190, 68, 133, 180, 61, 33, 29, 194, 61, 13, 236, 134, 62, 0, 159, 154, 62, 246, 134, 148, 190, 90, 23, 151, 190, 197, 91, 0, 191, 226, 98, 42, 62, 107, 17, 142, 191, 60, 79, 115, 62, 36, 205, 200, 189, 37, 203, 69, 62, 89, 38, 199, 62, 212, 218, 58, 62, 38, 226, 136, 62, 18, 80, 21, 62, 161, 57, 138, 190, 58, 113, 186, 191, 150, 239, 85, 190, 152, 104, 89, 62, 156, 61, 22, 62, 244, 194, 16, 191, 190, 232, 136, 62, 13, 119, 35, 62, 109, 171, 193, 61, 195, 197, 129, 62, 220, 38, 186, 190, 226, 44, 1, 62, 126, 135, 237, 190, 97, 239, 80, 62, 2, 250, 54, 190, 18, 21, 198, 61, 175, 34, 1, 191, 237, 27, 84, 189, 78, 186, 141, 190, 1, 232, 2, 190, 171, 60, 128, 62, 190, 244, 210, 62, 74, 195, 158, 62, 159, 207, 201, 60, 234, 240, 115, 61, 168, 126, 35, 61, 94, 210, 121, 62, 142, 127, 38, 60, 129, 142, 237, 190, 53, 130, 245, 190, 7, 211, 215, 189, 71, 90, 186, 190, 255, 36, 231, 190, 69, 239, 25, 63, 49, 73, 36, 62, 82, 211, 104, 190, 171, 127, 148, 190, 207, 226, 75, 190, 94, 12, 9, 188, 97, 29, 228, 190, 46, 16, 233, 190, 52, 203, 142, 190, 96, 67, 34, 62, 34, 217, 27, 188, 68, 51, 52, 62, 65, 201, 10, 62, 84, 176, 131, 62, 174, 69, 239, 190, 48, 45, 99, 62, 74, 253, 101, 188, 209, 17, 24, 62, 74, 96, 175, 62, 211, 196, 204, 188, 97, 75, 103, 189, 226, 110, 154, 190, 209, 75, 140, 62, 146, 111, 144, 191, 123, 138, 54, 62, 13, 19, 107, 190, 161, 58, 4, 63, 75, 225, 232, 62, 164, 32, 193, 60, 120, 30, 63, 62, 87, 64, 154, 188, 71, 44, 47, 190, 52, 116, 142, 191, 155, 191, 157, 189, 4, 155, 222, 61, 145, 77, 37, 60, 43, 63, 131, 188, 22, 176, 150, 62, 152, 18, 227, 190, 140, 80, 151, 190, 137, 61, 58, 190, 186, 1, 123, 60, 164, 204, 38, 62, 157, 1, 1, 62, 18, 212, 39, 190, 67, 110, 137, 62, 18, 66, 171, 190, 101, 138, 215, 62, 40, 215, 84, 62, 244, 162, 179, 61, 30, 27, 159, 62, 180, 182, 10, 190, 85, 240, 183, 190, 24, 138, 48, 190, 191, 240, 28, 190, 32, 127, 44, 191, 186, 102, 141, 62, 191, 208, 203, 190, 54, 108, 253, 60, 5, 160, 11, 62, 110, 44, 150, 62, 209, 94, 129, 62, 51, 46, 110, 61, 22, 250, 87, 62, 79, 208, 246, 190, 2, 35, 158, 61, 178, 22, 155, 61, 255, 78, 78, 189, 84, 148, 8, 190, 148, 211, 36, 190, 220, 17, 145, 61, 40, 180, 145, 189, 36, 89, 13, 62, 61, 131, 205, 59, 234, 118, 137, 189, 173, 47, 164, 61, 70, 61, 176, 59, 218, 255, 23, 187, 122, 159, 145, 189, 173, 194, 80, 189, 36, 71, 3, 62, 28, 102, 52, 189, 127, 57, 180, 189, 185, 120, 231, 189, 161, 123, 160, 189, 183, 114, 211, 189, 63, 95, 146, 188, 41, 135, 10, 190, 174, 236, 248, 60, 212, 29, 3, 188, 102, 11, 27, 190, 224, 197, 241, 61, 105, 234, 237, 188, 44, 4, 160, 189, 254, 148, 202, 189, 128, 213, 196, 189, 134, 109, 79, 61, 238, 158, 148, 188, 0, 52, 152, 62, 89, 38, 220, 188, 237, 182, 99, 188, 209, 219, 136, 190, 202, 105, 178, 61, 213, 179, 237, 189, 15, 116, 162, 189, 42, 162, 50, 62, 224, 48, 125, 190, 165, 28, 102, 189, 81, 78, 92, 62, 126, 209, 172, 188, 10, 196, 239, 62, 27, 164, 151, 61, 135, 234, 136, 62, 166, 250, 30, 62, 200, 12, 42, 189, 53, 184, 4, 190, 187, 179, 40, 63, 79, 189, 87, 188, 147, 204, 248, 190, 149, 127, 78, 190, 119, 65, 135, 189, 125, 126, 254, 188, 9, 228, 46, 61, 76, 157, 236, 189, 48, 11, 200, 60, 142, 140, 161, 188, 151, 42, 27, 190, 232, 136, 97, 61, 205, 253, 219, 188, 252, 102, 192, 189, 220, 243, 149, 61, 42, 30, 171, 189, 197, 115, 60, 190, 72, 211, 133, 61, 129, 129, 83, 62, 200, 3, 128, 189, 206, 74, 208, 187, 70, 7, 195, 188, 76, 154, 173, 190, 140, 13, 1, 190, 225, 223, 111, 62, 54, 152, 47, 62, 150, 39, 21, 190, 209, 186, 79, 62, 203, 111, 19, 62, 64, 134, 233, 188, 231, 160, 16, 191, 75, 233, 136, 62, 111, 119, 91, 61, 25, 241, 164, 61, 22, 177, 73, 61, 212, 20, 141, 61, 69, 81, 146, 190, 166, 56, 163, 189, 43, 206, 201, 61, 3, 67, 136, 62, 106, 130, 173, 189, 30, 156, 95, 58, 102, 48, 195, 61, 100, 72, 235, 62, 214, 241, 159, 62, 60, 191, 99, 61, 37, 58, 205, 189, 44, 186, 215, 187, 177, 6, 233, 190, 37, 224, 17, 62, 115, 113, 113, 62, 115, 83, 83, 62, 92, 198, 107, 189, 93, 173, 78, 190, 17, 151, 105, 62, 88, 69, 199, 190, 170, 106, 155, 61, 200, 104, 78, 62, 33, 168, 84, 62, 192, 211, 254, 189, 7, 185, 89, 61, 248, 185, 177, 190, 25, 11, 96, 189, 193, 11, 170, 61, 168, 155, 162, 61, 99, 236, 19, 62, 89, 143, 12, 190, 118, 83, 223, 61, 111, 59, 8, 62, 229, 185, 7, 190, 241, 195, 14, 191, 16, 34, 78, 190, 77, 154, 225, 190, 148, 66, 159, 60, 67, 64, 123, 190, 24, 249, 196, 189, 66, 74, 0, 63, 107, 183, 143, 62, 146, 160, 35, 190, 131, 207, 50, 190, 138, 15, 78, 190, 145, 249, 19, 61, 36, 226, 199, 190, 122, 197, 110, 190, 105, 232, 108, 190, 20, 91, 166, 62, 245, 186, 209, 61, 225, 160, 74, 62, 76, 57, 80, 62, 193, 205, 73, 61, 170, 64, 194, 190, 193, 30, 242, 188, 143, 102, 31, 62, 250, 226, 155, 59, 40, 184, 215, 62, 87, 167, 182, 188, 212, 1, 172, 189, 231, 59, 242, 190, 13, 212, 161, 62, 237, 166, 20, 191, 50, 103, 88, 62, 102, 104, 87, 190, 51, 24, 213, 62, 189, 70, 153, 62, 163, 89, 111, 61, 32, 10, 142, 61, 205, 235, 106, 62, 23, 246, 54, 190, 99, 225, 114, 191, 171, 255, 97, 190, 110, 37, 130, 190, 25, 216, 4, 190, 169, 96, 173, 189, 104, 204, 255, 190, 119, 81, 25, 62, 180, 14, 113, 61, 195, 230, 40, 62, 36, 155, 76, 189, 205, 72, 155, 190, 192, 45, 173, 190, 254, 119, 129, 61, 111, 124, 233, 190, 46, 219, 130, 190, 95, 156, 6, 62, 64, 151, 161, 62, 46, 150, 182, 61, 150, 63, 163, 190, 93, 134, 170, 61, 57, 113, 135, 61, 30, 212, 147, 61, 249, 248, 181, 61, 117, 43, 138, 61, 237, 155, 44, 190, 79, 187, 176, 60, 247, 54, 86, 190, 231, 217, 117, 61, 4, 84, 38, 60, 83, 121, 30, 191, 151, 175, 2, 61, 250, 54, 31, 62, 138, 25, 186, 60, 88, 66, 23, 189, 226, 212, 57, 190, 195, 82, 189, 188, 1, 34, 18, 191, 145, 198, 179, 61, 172, 70, 5, 61, 149, 167, 6, 62, 166, 94, 59, 62, 55, 85, 36, 191, 230, 185, 23, 190, 233, 254, 237, 190, 86, 185, 149, 62, 207, 142, 84, 190, 214, 61, 185, 62, 233, 186, 41, 190, 233, 36, 2, 189, 94, 153, 177, 190, 216, 37, 22, 191, 47, 248, 78, 62, 135, 79, 137, 61, 241, 57, 243, 62, 7, 50, 221, 189, 199, 126, 73, 61, 40, 185, 124, 61, 51, 149, 64, 61, 11, 119, 0, 190, 200, 41, 198, 190, 254, 198, 253, 190, 152, 149, 44, 190, 153, 218, 41, 190, 162, 90, 93, 190, 44, 66, 233, 62, 114, 77, 21, 189, 212, 31, 247, 61, 49, 224, 11, 62, 171, 175, 155, 190, 143, 20, 243, 189, 141, 239, 141, 190, 79, 185, 140, 61, 1, 66, 234, 189, 238, 184, 159, 61, 164, 129, 14, 61, 123, 153, 47, 190, 244, 76, 223, 61, 244, 28, 108, 62, 188, 139, 62, 189, 115, 249, 49, 190, 186, 166, 135, 61, 209, 213, 187, 61, 18, 69, 154, 189, 29, 0, 239, 60, 7, 218, 175, 188, 81, 59, 4, 190, 233, 167, 226, 61, 99, 69, 229, 190, 102, 19, 86, 189, 165, 176, 43, 61, 113, 59, 46, 61, 162, 239, 195, 62, 174, 215, 14, 62, 22, 174, 217, 60, 220, 90, 198, 189, 60, 40, 110, 190, 64, 97, 60, 191, 199, 7, 0, 190, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 26, 18, 189, 61, 217, 144, 5, 62, 131, 222, 173, 189, 130, 67, 248, 59, 14, 3, 179, 60, 242, 19, 165, 190, 95, 137, 151, 190, 149, 218, 101, 61, 65, 65, 143, 62, 231, 69, 9, 190, 142, 58, 117, 59, 63, 245, 255, 61, 98, 255, 118, 190, 217, 217, 67, 62, 28, 129, 245, 61, 253, 60, 129, 189, 68, 82, 76, 62, 77, 25, 194, 188, 243, 110, 65, 60, 85, 173, 28, 190, 87, 45, 109, 61, 8, 95, 149, 190, 124, 197, 103, 61, 82, 198, 132, 60, 109, 135, 220, 61, 163, 14, 203, 60, 185, 203, 104, 62, 99, 223, 175, 59, 17, 15, 3, 190, 49, 190, 219, 189, 61, 12, 207, 190, 154, 197, 10, 62, 114, 93, 40, 190, 242, 52, 4, 190, 195, 200, 189, 189, 47, 36, 225, 189, 233, 192, 221, 61, 208, 81, 129, 62, 118, 232, 197, 61, 198, 152, 130, 189, 75, 120, 36, 190, 154, 193, 102, 189, 207, 113, 73, 61, 127, 168, 189, 190, 31, 210, 235, 189, 55, 239, 211, 190, 202, 2, 119, 62, 80, 121, 206, 189, 215, 206, 58, 190, 214, 113, 121, 61, 119, 127, 13, 62, 22, 23, 142, 189, 210, 12, 159, 188, 67, 197, 14, 189, 54, 145, 8, 190, 185, 161, 160, 62, 179, 57, 200, 190, 149, 149, 17, 62, 91, 133, 38, 190, 78, 109, 35, 191, 213, 211, 82, 61, 110, 31, 24, 190, 162, 172, 151, 190, 133, 189, 90, 61, 187, 51, 14, 190, 70, 251, 80, 190, 114, 56, 56, 190, 98, 128, 143, 190, 152, 154, 138, 190, 24, 24, 129, 61, 90, 156, 137, 190, 233, 107, 61, 62, 133, 195, 155, 62, 22, 230, 81, 190, 159, 183, 49, 61, 212, 158, 228, 188, 210, 48, 118, 189, 32, 161, 64, 190, 70, 24, 225, 60, 73, 239, 66, 62, 247, 71, 115, 187, 64, 219, 64, 60, 137, 33, 107, 60, 137, 19, 159, 190, 62, 238, 126, 61, 66, 31, 30, 191, 195, 100, 130, 62, 232, 181, 23, 190, 131, 91, 125, 61, 49, 213, 189, 62, 11, 121, 134, 189, 15, 206, 47, 61, 194, 228, 233, 61, 113, 188, 17, 61, 253, 145, 47, 191, 38, 102, 249, 61, 1, 100, 56, 61, 12, 28, 185, 61, 82, 36, 218, 62, 122, 181, 161, 190, 172, 9, 183, 188, 228, 87, 13, 61, 59, 21, 167, 190, 6, 66, 172, 61, 134, 7, 251, 62, 225, 48, 178, 62, 2, 224, 102, 190, 232, 52, 188, 60, 182, 132, 125, 189, 163, 21, 46, 62, 128, 22, 186, 189, 235, 89, 126, 62, 49, 233, 102, 62, 123, 69, 114, 190, 168, 87, 183, 190, 153, 103, 97, 61, 25, 13, 161, 61, 101, 39, 8, 61, 144, 186, 10, 62, 85, 70, 142, 189, 199, 144, 19, 61, 196, 97, 107, 62, 43, 206, 111, 62, 170, 232, 52, 190, 45, 235, 127, 62, 162, 255, 140, 189, 219, 120, 63, 190, 131, 42, 59, 190, 128, 248, 244, 189, 190, 194, 26, 190, 245, 42, 234, 189, 104, 182, 133, 62, 188, 157, 239, 188, 111, 10, 35, 61, 182, 109, 85, 62, 174, 16, 125, 186, 14, 173, 26, 191, 134, 210, 162, 188, 242, 87, 128, 190, 226, 7, 21, 61, 255, 35, 106, 190, 222, 122, 222, 61, 212, 39, 100, 62, 29, 25, 110, 59, 69, 237, 32, 190, 55, 151, 239, 58, 242, 240, 147, 189, 115, 185, 89, 62, 148, 134, 26, 190, 187, 46, 139, 61, 111, 80, 2, 62, 198, 171, 55, 190, 174, 168, 99, 190, 222, 96, 180, 189, 30, 198, 167, 61, 102, 84, 247, 60, 137, 235, 99, 190, 158, 225, 168, 62, 44, 154, 94, 62, 184, 77, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 25, 10, 62, 103, 196, 51, 189, 48, 121, 207, 61, 31, 156, 187, 189, 224, 13, 79, 62, 217, 192, 219, 61, 159, 204, 100, 61, 197, 204, 106, 62, 69, 147, 23, 62, 176, 108, 132, 62, 62, 76, 20, 62, 229, 230, 231, 61, 5, 230, 7, 190, 133, 205, 188, 61, 253, 65, 78, 62, 41, 224, 201, 189, 246, 249, 196, 61, 239, 243, 40, 62, 200, 150, 183, 189, 143, 198, 210, 190, 100, 52, 216, 61, 203, 77, 109, 62, 204, 199, 205, 60, 21, 87, 126, 62, 54, 131, 26, 62, 204, 124, 235, 61, 69, 140, 13, 190, 132, 61, 18, 62, 57, 119, 208, 61, 229, 44, 212, 61, 44, 36, 152, 190, 126, 83, 225, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 17, 158, 190, 56, 7, 40, 191, 243, 201, 197, 190, 28, 240, 239, 61, 19, 117, 226, 62, 2, 179, 59, 62, 43, 86, 59, 190, 159, 239, 191, 62, 19, 74, 29, 61, 124, 60, 200, 191, 84, 33, 151, 190, 44, 225, 9, 63, 254, 37, 150, 61, 78, 150, 70, 62, 219, 205, 76, 191, 118, 55, 29, 63, 215, 30, 45, 191, 20, 28, 113, 190, 147, 216, 200, 188, 44, 56, 20, 62, 124, 69, 163, 190, 233, 3, 105, 62, 10, 156, 25, 191, 254, 53, 159, 190, 150, 156, 38, 63, 221, 116, 57, 190, 92, 4, 8, 62, 180, 53, 3, 190, 162, 138, 69, 190, 249, 60, 200, 190, 226, 149, 140, 62, 252, 134, 53, 190, 115, 221, 50, 189, 185, 253, 87, 62, 33, 235, 216, 189, 176, 162, 179, 188, 206, 212, 112, 190, 228, 65, 193, 189, 120, 145, 193, 189, 130, 33, 191, 189, 118, 176, 57, 190, 173, 216, 24, 62, 112, 156, 167, 189, 45, 188, 216, 61, 206, 17, 245, 61, 22, 123, 68, 62, 23, 36, 51, 61, 32, 108, 111, 62, 219, 94, 56, 62, 23, 21, 189, 190, 45, 84, 151, 189, 238, 61, 20, 63, 194, 240, 45, 190, 55, 17, 75, 190, 126, 213, 136, 62, 107, 36, 1, 191, 51, 28, 233, 61, 168, 132, 143, 189, 144, 120, 64, 186, 57, 71, 235, 189, 193, 70, 60, 190, 246, 99, 187, 190, 234, 22, 136, 62, 39, 51, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 225, 48, 62, 64, 76, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 167, 99, 62, 225, 64, 2, 64, 133, 127, 24, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 131, 237, 191, 70, 151, 105, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}