// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 105, 247, 62, 11, 64, 132, 190, 110, 130, 21, 191, 197, 66, 241, 62, 37, 41, 69, 62, 8, 98, 29, 191, 37, 89, 171, 62, 74, 207, 245, 62, 113, 112, 152, 62, 219, 206, 250, 190, 230, 166, 148, 191, 69, 166, 47, 62, 190, 40, 3, 191, 173, 181, 17, 63, 134, 127, 73, 63, 88, 81, 79, 191, 134, 199, 98, 63, 97, 199, 156, 62, 2, 64, 16, 191, 169, 186, 114, 189, 104, 165, 225, 62, 42, 229, 181, 189, 45, 153, 189, 63, 244, 170, 246, 62, 201, 21, 71, 63, 61, 60, 137, 190, 192, 76, 155, 61, 157, 227, 149, 62, 4, 25, 115, 63, 109, 103, 38, 62, 7, 220, 99, 63, 108, 108, 161, 189, 121, 99, 170, 189, 94, 4, 133, 190, 174, 142, 133, 191, 221, 195, 18, 190, 85, 53, 226, 62, 232, 203, 140, 191, 3, 14, 220, 190, 186, 13, 197, 190, 135, 138, 74, 191, 244, 148, 236, 62, 53, 150, 66, 63, 215, 34, 184, 61, 202, 9, 44, 61, 11, 106, 117, 62, 105, 229, 66, 190, 52, 93, 226, 62, 129, 236, 6, 190, 197, 92, 4, 191, 211, 39, 239, 190, 194, 209, 8, 191, 234, 197, 118, 62, 111, 208, 114, 62, 24, 125, 102, 63, 163, 109, 243, 190, 45, 64, 92, 190, 154, 95, 76, 62, 102, 203, 102, 63, 91, 214, 157, 190, 207, 53, 50, 190, 103, 39, 81, 63, 37, 136, 64, 61, 66, 34, 31, 191, 24, 171, 181, 63, 20, 249, 194, 62, 148, 48, 160, 190, 82, 10, 105, 190, 99, 227, 221, 190, 103, 122, 213, 190, 32, 66, 121, 63, 189, 162, 6, 61, 192, 203, 40, 62, 205, 45, 72, 63, 120, 223, 176, 189, 36, 13, 127, 62, 181, 162, 94, 63, 240, 49, 247, 190, 63, 240, 62, 188, 5, 77, 220, 190, 33, 175, 67, 63, 27, 77, 7, 191, 72, 183, 130, 191, 120, 38, 196, 189, 167, 130, 34, 62, 168, 108, 116, 63, 183, 89, 30, 190, 106, 209, 254, 188, 39, 30, 45, 191, 186, 55, 38, 62, 228, 159, 135, 190, 0, 161, 114, 191, 88, 180, 68, 63, 116, 226, 81, 63, 20, 47, 110, 191, 250, 61, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 198, 199, 190, 132, 92, 180, 61, 68, 24, 94, 191, 107, 81, 192, 190, 180, 127, 55, 59, 167, 231, 164, 62, 230, 55, 31, 63, 39, 184, 21, 189, 215, 9, 2, 190, 115, 203, 69, 190, 55, 61, 41, 190, 82, 167, 2, 61, 218, 19, 228, 190, 64, 138, 181, 190, 71, 85, 5, 62, 229, 169, 80, 62, 45, 75, 91, 190, 240, 4, 38, 63, 240, 44, 167, 190, 8, 187, 204, 62, 121, 199, 202, 62, 84, 216, 21, 61, 179, 16, 37, 63, 172, 5, 165, 62, 82, 64, 71, 190, 157, 47, 44, 62, 140, 196, 174, 190, 30, 137, 2, 63, 153, 12, 51, 62, 169, 73, 170, 190, 213, 102, 216, 190, 29, 203, 135, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 107, 55, 60, 178, 250, 251, 189, 16, 143, 145, 190, 6, 176, 165, 62, 19, 211, 9, 191, 185, 253, 141, 61, 151, 236, 115, 189, 40, 208, 78, 62, 179, 165, 226, 61, 51, 17, 76, 190, 50, 126, 220, 61, 141, 214, 165, 62, 84, 207, 128, 190, 150, 178, 92, 63, 192, 3, 48, 61, 47, 42, 172, 190, 61, 175, 97, 61, 255, 246, 168, 189, 59, 63, 79, 190, 96, 147, 250, 189, 218, 203, 224, 61, 139, 233, 41, 191, 244, 77, 49, 62, 63, 241, 58, 189, 235, 94, 247, 61, 134, 92, 175, 62, 194, 56, 34, 191, 146, 120, 221, 61, 167, 5, 12, 189, 245, 112, 9, 62, 3, 172, 133, 190, 231, 189, 69, 61, 63, 45, 164, 189, 86, 4, 226, 189, 165, 71, 242, 189, 107, 110, 16, 62, 46, 136, 64, 191, 203, 65, 189, 191, 218, 8, 95, 62, 224, 144, 106, 62, 124, 229, 84, 188, 172, 199, 4, 63, 187, 115, 88, 189, 103, 193, 172, 62, 59, 7, 44, 191, 172, 242, 127, 62, 146, 209, 108, 62, 165, 89, 158, 62, 233, 192, 69, 62, 172, 237, 66, 190, 176, 198, 9, 191, 236, 240, 155, 190, 218, 60, 59, 62, 105, 169, 117, 191, 89, 143, 28, 62, 151, 160, 127, 190, 207, 128, 136, 62, 76, 83, 156, 62, 118, 41, 174, 189, 55, 143, 170, 62, 124, 120, 87, 62, 35, 82, 86, 62, 169, 15, 14, 191, 54, 64, 202, 190, 145, 78, 136, 190, 34, 172, 184, 190, 95, 11, 238, 60, 123, 47, 87, 189, 155, 83, 159, 61, 29, 42, 199, 61, 216, 91, 253, 188, 146, 255, 30, 61, 35, 245, 203, 61, 225, 225, 163, 190, 169, 171, 100, 62, 155, 177, 8, 191, 69, 193, 59, 191, 52, 234, 128, 189, 1, 130, 157, 62, 118, 103, 29, 61, 218, 107, 17, 190, 107, 140, 125, 62, 145, 253, 54, 62, 46, 126, 224, 189, 218, 149, 142, 61, 111, 221, 31, 190, 245, 147, 199, 61, 27, 66, 80, 62, 107, 195, 175, 189, 75, 125, 91, 62, 135, 86, 182, 62, 55, 107, 155, 191, 198, 99, 178, 62, 76, 235, 57, 62, 26, 171, 26, 190, 28, 20, 200, 61, 167, 51, 198, 61, 120, 6, 26, 190, 114, 126, 21, 190, 72, 67, 224, 187, 224, 189, 60, 190, 168, 21, 214, 189, 59, 174, 83, 59, 139, 109, 182, 189, 226, 1, 75, 61, 38, 119, 167, 189, 177, 124, 156, 60, 155, 71, 26, 189, 17, 28, 43, 190, 121, 195, 18, 62, 19, 54, 29, 59, 118, 59, 213, 59, 101, 97, 128, 60, 206, 161, 31, 189, 69, 31, 33, 62, 226, 160, 31, 190, 185, 127, 244, 189, 55, 90, 77, 189, 248, 74, 38, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 80, 252, 186, 61, 25, 255, 117, 61, 118, 231, 169, 189, 174, 153, 10, 190, 251, 215, 32, 190, 10, 77, 102, 189, 170, 215, 8, 190, 133, 4, 18, 190, 112, 181, 57, 190, 248, 77, 204, 61, 40, 184, 10, 189, 41, 230, 193, 61, 190, 69, 87, 62, 160, 199, 228, 60, 35, 224, 32, 63, 39, 163, 26, 190, 36, 123, 214, 189, 199, 92, 241, 60, 242, 247, 164, 62, 43, 41, 3, 60, 67, 129, 115, 190, 242, 5, 224, 189, 85, 140, 66, 191, 255, 24, 120, 62, 13, 160, 251, 61, 159, 134, 202, 189, 204, 45, 52, 62, 178, 204, 190, 61, 245, 111, 234, 190, 58, 232, 63, 62, 93, 40, 241, 190, 146, 55, 140, 191, 167, 162, 37, 190, 204, 230, 28, 62, 0, 125, 164, 190, 49, 132, 15, 61, 56, 157, 192, 62, 78, 43, 17, 189, 72, 22, 227, 61, 9, 73, 135, 62, 148, 240, 116, 190, 190, 253, 61, 62, 4, 216, 173, 189, 69, 138, 195, 189, 243, 11, 25, 189, 194, 111, 81, 191, 148, 47, 219, 61, 230, 89, 134, 191, 38, 133, 103, 62, 78, 8, 29, 189, 1, 49, 247, 188, 52, 239, 16, 190, 168, 142, 124, 60, 129, 181, 105, 189, 86, 37, 211, 61, 23, 98, 62, 190, 57, 19, 253, 62, 235, 29, 117, 62, 153, 31, 160, 189, 224, 164, 253, 60, 164, 193, 181, 60, 231, 72, 90, 190, 66, 23, 144, 189, 75, 161, 59, 60, 22, 251, 1, 190, 120, 174, 68, 62, 3, 25, 133, 189, 154, 112, 217, 59, 173, 255, 40, 63, 167, 71, 213, 61, 88, 230, 216, 189, 189, 69, 189, 189, 84, 207, 28, 189, 85, 64, 251, 61, 3, 15, 24, 62, 71, 23, 83, 189, 73, 184, 39, 61, 191, 5, 63, 190, 198, 175, 133, 189, 135, 208, 101, 190, 120, 227, 5, 62, 147, 62, 182, 189, 131, 18, 113, 191, 106, 104, 68, 59, 1, 56, 147, 62, 176, 152, 142, 189, 241, 100, 100, 190, 11, 65, 21, 62, 99, 211, 136, 189, 55, 18, 35, 62, 2, 44, 111, 62, 179, 225, 17, 62, 247, 84, 16, 190, 48, 169, 20, 62, 1, 70, 23, 190, 71, 106, 224, 61, 50, 253, 103, 61, 252, 38, 183, 190, 157, 74, 175, 62, 126, 119, 2, 62, 175, 168, 124, 62, 79, 91, 199, 189, 239, 150, 50, 62, 253, 1, 96, 62, 145, 96, 87, 191, 147, 239, 165, 62, 123, 169, 36, 62, 121, 205, 79, 61, 130, 140, 61, 62, 91, 46, 181, 190, 49, 140, 176, 61, 12, 199, 198, 190, 35, 222, 203, 62, 221, 190, 9, 62, 10, 78, 212, 189, 78, 40, 43, 190, 157, 133, 229, 60, 140, 244, 61, 190, 100, 139, 20, 190, 19, 215, 52, 62, 92, 35, 123, 62, 58, 250, 244, 61, 174, 76, 155, 61, 253, 23, 34, 62, 173, 71, 156, 189, 67, 211, 50, 62, 86, 200, 36, 62, 94, 6, 205, 190, 62, 233, 208, 190, 88, 57, 222, 61, 236, 226, 181, 60, 127, 221, 173, 188, 215, 227, 164, 62, 223, 47, 137, 188, 119, 162, 54, 190, 176, 237, 33, 62, 37, 97, 224, 60, 77, 223, 45, 190, 236, 197, 54, 188, 245, 239, 35, 62, 188, 47, 42, 61, 135, 87, 202, 189, 142, 1, 151, 62, 40, 26, 36, 62, 70, 221, 97, 62, 13, 12, 170, 190, 71, 166, 95, 190, 1, 38, 211, 190, 255, 103, 229, 62, 98, 127, 141, 189, 128, 137, 12, 190, 124, 131, 151, 189, 197, 21, 215, 62, 88, 49, 227, 62, 31, 208, 212, 62, 131, 30, 33, 60, 182, 202, 128, 187, 95, 48, 192, 61, 47, 12, 241, 60, 103, 182, 132, 62, 43, 69, 150, 189, 241, 97, 146, 190, 60, 149, 168, 62, 38, 74, 21, 190, 13, 245, 144, 188, 30, 142, 132, 188, 129, 140, 37, 191, 183, 15, 191, 190, 212, 54, 189, 190, 132, 143, 26, 189, 183, 194, 34, 191, 8, 216, 47, 191, 103, 13, 128, 61, 195, 189, 22, 189, 89, 0, 27, 190, 88, 44, 36, 190, 9, 65, 162, 61, 100, 244, 132, 62, 197, 156, 172, 191, 151, 229, 31, 63, 146, 32, 79, 62, 246, 249, 96, 62, 86, 196, 78, 62, 196, 4, 20, 62, 163, 96, 239, 189, 138, 108, 78, 191, 112, 159, 183, 189, 178, 7, 138, 191, 98, 103, 121, 62, 121, 212, 207, 190, 144, 245, 50, 62, 14, 150, 9, 63, 79, 101, 34, 62, 155, 213, 224, 61, 93, 215, 54, 190, 199, 166, 140, 59, 142, 75, 57, 191, 8, 224, 132, 191, 65, 213, 148, 190, 244, 65, 210, 187, 53, 152, 112, 62, 182, 220, 128, 190, 114, 213, 156, 61, 67, 154, 103, 62, 73, 68, 169, 188, 123, 131, 229, 61, 120, 82, 243, 189, 65, 181, 247, 188, 43, 185, 3, 62, 229, 108, 31, 190, 216, 153, 142, 191, 210, 178, 155, 189, 107, 13, 179, 61, 188, 238, 233, 61, 150, 8, 3, 60, 67, 32, 24, 62, 58, 3, 96, 188, 236, 97, 77, 190, 10, 135, 6, 62, 239, 14, 225, 189, 156, 79, 141, 188, 92, 28, 146, 62, 245, 151, 215, 61, 119, 141, 53, 62, 81, 1, 199, 60, 24, 112, 140, 191, 5, 157, 160, 62, 2, 20, 34, 190, 187, 196, 236, 190, 132, 182, 110, 188, 60, 228, 65, 62, 217, 124, 124, 60, 117, 2, 35, 191, 184, 57, 25, 62, 234, 247, 189, 62, 203, 21, 191, 188, 134, 206, 131, 62, 108, 85, 220, 190, 157, 144, 232, 61, 105, 113, 30, 191, 81, 164, 164, 62, 41, 4, 5, 62, 22, 218, 38, 62, 255, 255, 133, 190, 187, 192, 215, 189, 98, 94, 229, 190, 75, 230, 169, 189, 235, 65, 35, 62, 58, 134, 209, 62, 142, 73, 7, 62, 128, 73, 111, 62, 128, 135, 194, 62, 12, 115, 206, 61, 65, 185, 69, 62, 232, 30, 57, 62, 188, 95, 196, 190, 27, 143, 14, 191, 119, 181, 101, 189, 129, 28, 148, 190, 26, 139, 13, 190, 50, 95, 39, 63, 35, 61, 161, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 2, 126, 114, 62, 46, 166, 156, 190, 248, 190, 109, 61, 106, 144, 132, 61, 190, 214, 74, 62, 235, 159, 194, 188, 251, 209, 251, 188, 143, 66, 38, 62, 140, 199, 180, 62, 220, 144, 135, 62, 64, 184, 89, 190, 225, 25, 64, 62, 163, 108, 69, 62, 158, 232, 0, 62, 155, 227, 157, 190, 177, 69, 8, 189, 200, 4, 20, 191, 69, 41, 158, 189, 23, 134, 188, 191, 112, 117, 233, 62, 156, 155, 187, 62, 185, 76, 41, 189, 206, 75, 235, 190, 99, 52, 73, 62, 166, 26, 218, 62, 62, 37, 17, 190, 158, 41, 168, 61, 17, 144, 132, 61, 186, 199, 141, 62, 189, 122, 53, 190, 251, 77, 37, 62, 2, 8, 76, 191, 202, 44, 222, 189, 94, 191, 78, 190, 218, 122, 204, 190, 89, 177, 28, 190, 6, 184, 34, 191, 240, 207, 136, 191, 195, 179, 205, 190, 156, 229, 115, 62, 86, 68, 192, 190, 184, 242, 18, 63, 74, 164, 214, 189, 209, 198, 149, 61, 74, 8, 180, 190, 250, 71, 6, 62, 199, 12, 70, 189, 170, 111, 182, 62, 151, 217, 159, 62, 202, 120, 138, 191, 92, 211, 14, 191, 208, 76, 244, 190, 146, 1, 11, 62, 183, 53, 176, 191, 19, 13, 127, 62, 186, 192, 90, 189, 17, 30, 77, 62, 181, 155, 203, 62, 91, 96, 127, 62, 166, 250, 150, 62, 101, 3, 21, 62, 146, 92, 82, 190, 4, 237, 150, 191, 202, 169, 69, 190, 61, 115, 96, 62, 229, 61, 33, 62, 247, 69, 4, 191, 82, 255, 156, 62, 235, 238, 73, 62, 98, 175, 15, 62, 120, 60, 163, 62, 4, 104, 149, 190, 229, 115, 67, 61, 181, 180, 76, 191, 193, 89, 174, 62, 72, 169, 154, 190, 186, 191, 2, 62, 97, 70, 249, 190, 139, 32, 81, 60, 102, 60, 149, 190, 100, 7, 21, 190, 101, 3, 146, 62, 52, 1, 32, 63, 174, 110, 151, 62, 166, 148, 31, 61, 219, 157, 144, 62, 50, 154, 88, 60, 137, 29, 44, 62, 174, 57, 29, 62, 208, 55, 233, 190, 208, 221, 8, 191, 125, 60, 74, 190, 27, 198, 162, 190, 73, 76, 20, 191, 109, 151, 2, 63, 52, 115, 118, 62, 233, 238, 139, 190, 142, 186, 161, 190, 207, 226, 75, 190, 214, 215, 196, 62, 152, 122, 84, 190, 116, 75, 186, 191, 78, 132, 94, 190, 39, 96, 8, 63, 106, 170, 73, 190, 221, 32, 52, 63, 216, 158, 56, 61, 202, 35, 170, 62, 52, 117, 34, 191, 220, 132, 200, 62, 253, 63, 94, 188, 34, 3, 241, 62, 23, 231, 119, 62, 77, 226, 41, 191, 147, 73, 219, 190, 73, 34, 152, 190, 204, 18, 155, 62, 1, 245, 191, 191, 36, 57, 8, 62, 221, 208, 224, 189, 189, 40, 13, 63, 160, 159, 217, 62, 170, 107, 133, 62, 70, 158, 68, 62, 187, 134, 194, 60, 94, 177, 58, 62, 106, 128, 80, 191, 224, 242, 237, 189, 64, 114, 9, 62, 6, 48, 240, 60, 43, 63, 131, 188, 50, 55, 240, 61, 70, 89, 24, 191, 201, 119, 34, 191, 131, 108, 21, 190, 122, 13, 226, 189, 23, 239, 61, 60, 93, 135, 71, 62, 172, 20, 191, 190, 198, 90, 183, 62, 138, 28, 163, 190, 215, 255, 116, 62, 184, 158, 82, 60, 17, 14, 35, 190, 136, 194, 173, 62, 49, 148, 62, 190, 71, 227, 5, 191, 228, 170, 43, 190, 21, 135, 19, 190, 248, 74, 107, 191, 47, 233, 160, 62, 210, 193, 106, 190, 14, 159, 143, 60, 31, 129, 10, 62, 97, 126, 211, 61, 30, 242, 165, 62, 142, 234, 27, 61, 189, 55, 119, 62, 105, 26, 11, 191, 164, 59, 135, 61, 178, 22, 155, 61, 255, 78, 78, 189, 152, 218, 13, 190, 252, 224, 37, 190, 183, 228, 102, 61, 145, 46, 162, 189, 111, 238, 3, 62, 39, 186, 87, 187, 237, 255, 137, 189, 14, 244, 155, 61, 234, 231, 4, 60, 73, 77, 54, 187, 122, 159, 145, 189, 205, 22, 112, 189, 237, 177, 4, 62, 16, 64, 69, 189, 127, 57, 180, 189, 233, 25, 241, 189, 155, 35, 154, 189, 239, 115, 214, 189, 74, 205, 159, 188, 107, 218, 21, 190, 174, 236, 248, 60, 121, 251, 67, 188, 102, 11, 27, 190, 224, 197, 241, 61, 90, 55, 36, 189, 178, 26, 164, 189, 242, 216, 207, 189, 136, 49, 206, 189, 182, 28, 25, 61, 165, 131, 83, 188, 178, 251, 152, 62, 164, 194, 18, 188, 208, 157, 1, 189, 3, 182, 154, 190, 186, 139, 60, 190, 188, 110, 199, 190, 242, 253, 223, 189, 149, 123, 220, 62, 14, 195, 41, 190, 128, 190, 33, 190, 212, 208, 192, 62, 164, 53, 0, 191, 237, 229, 218, 62, 41, 131, 195, 61, 98, 192, 196, 62, 0, 31, 129, 62, 22, 15, 0, 190, 209, 167, 91, 190, 9, 26, 61, 63, 152, 160, 69, 61, 88, 157, 224, 190, 43, 35, 33, 191, 191, 200, 12, 190, 216, 19, 135, 61, 15, 14, 159, 62, 123, 84, 47, 189, 156, 72, 129, 189, 215, 205, 193, 190, 142, 67, 66, 188, 242, 78, 81, 61, 124, 31, 12, 190, 13, 102, 18, 190, 156, 113, 177, 189, 164, 110, 3, 190, 209, 162, 108, 189, 142, 207, 175, 61, 149, 244, 97, 62, 40, 120, 100, 188, 111, 169, 59, 60, 222, 39, 27, 189, 226, 84, 169, 190, 94, 207, 3, 190, 85, 64, 131, 62, 67, 159, 55, 189, 160, 17, 92, 191, 74, 184, 17, 62, 77, 224, 12, 62, 172, 30, 30, 189, 95, 18, 31, 191, 54, 243, 179, 62, 124, 234, 45, 61, 41, 197, 23, 62, 160, 233, 50, 62, 175, 230, 173, 61, 216, 252, 57, 190, 162, 163, 168, 187, 85, 78, 190, 61, 211, 185, 122, 62, 132, 36, 193, 189, 89, 232, 169, 189, 123, 169, 41, 62, 246, 13, 199, 62, 29, 171, 152, 62, 38, 106, 10, 187, 253, 159, 10, 190, 36, 82, 233, 187, 4, 118, 33, 191, 177, 86, 103, 62, 195, 43, 135, 62, 98, 234, 83, 62, 50, 67, 14, 189, 44, 189, 128, 190, 90, 4, 4, 62, 79, 169, 10, 191, 99, 40, 142, 61, 71, 196, 7, 62, 145, 128, 16, 61, 34, 54, 184, 189, 137, 75, 34, 61, 76, 201, 169, 190, 0, 253, 247, 189, 5, 117, 218, 61, 132, 56, 141, 61, 232, 234, 128, 62, 130, 104, 82, 61, 218, 13, 5, 62, 143, 10, 187, 61, 42, 61, 235, 60, 157, 131, 172, 189, 255, 206, 3, 190, 225, 110, 218, 190, 206, 207, 128, 189, 216, 158, 20, 61, 233, 111, 160, 188, 116, 176, 251, 62, 248, 56, 59, 62, 85, 170, 83, 190, 196, 210, 87, 190, 82, 86, 77, 190, 20, 2, 87, 62, 196, 85, 125, 191, 0, 195, 94, 190, 186, 146, 72, 191, 106, 123, 47, 63, 202, 135, 213, 61, 75, 10, 230, 62, 15, 197, 182, 61, 47, 166, 192, 62, 189, 190, 248, 190, 108, 82, 133, 61, 152, 232, 183, 61, 156, 109, 137, 62, 55, 46, 215, 62, 206, 132, 94, 190, 193, 4, 6, 191, 235, 251, 239, 190, 9, 245, 171, 62, 236, 164, 214, 191, 87, 53, 67, 62, 161, 23, 140, 188, 221, 107, 192, 62, 40, 147, 135, 62, 92, 31, 33, 191, 76, 199, 79, 62, 94, 100, 118, 62, 72, 58, 56, 62, 103, 149, 52, 191, 230, 92, 152, 190, 154, 62, 118, 190, 22, 87, 185, 189, 27, 90, 161, 60, 198, 88, 152, 190, 191, 182, 15, 62, 118, 42, 150, 188, 129, 125, 13, 62, 83, 6, 185, 189, 57, 170, 99, 190, 9, 100, 172, 190, 220, 213, 30, 62, 54, 68, 27, 191, 190, 14, 81, 191, 184, 110, 230, 61, 170, 88, 202, 62, 173, 94, 6, 62, 23, 72, 160, 190, 26, 18, 32, 61, 96, 146, 159, 62, 89, 148, 16, 62, 94, 12, 66, 61, 74, 204, 16, 60, 108, 218, 235, 189, 143, 9, 2, 190, 238, 254, 92, 190, 227, 114, 105, 61, 69, 34, 78, 61, 117, 232, 101, 191, 4, 70, 237, 61, 148, 230, 146, 62, 145, 65, 85, 61, 231, 140, 58, 62, 175, 61, 223, 190, 74, 208, 171, 186, 166, 122, 0, 191, 135, 47, 82, 61, 185, 151, 93, 190, 254, 40, 212, 190, 80, 251, 108, 186, 19, 160, 225, 191, 48, 52, 142, 61, 19, 223, 71, 191, 35, 59, 197, 62, 169, 186, 180, 190, 159, 34, 55, 190, 180, 154, 11, 190, 82, 171, 253, 61, 229, 70, 33, 62, 185, 181, 210, 190, 100, 222, 191, 61, 91, 186, 59, 62, 225, 219, 1, 63, 1, 19, 159, 189, 102, 234, 247, 190, 21, 204, 228, 61, 72, 109, 98, 189, 41, 243, 12, 190, 225, 197, 182, 190, 254, 56, 74, 190, 30, 57, 45, 190, 206, 93, 20, 190, 74, 59, 7, 60, 217, 4, 10, 63, 13, 84, 176, 61, 209, 102, 232, 61, 198, 250, 1, 62, 25, 215, 160, 190, 75, 82, 67, 190, 130, 184, 123, 190, 30, 221, 155, 62, 241, 107, 14, 190, 36, 137, 9, 62, 169, 59, 162, 61, 160, 145, 172, 190, 156, 150, 40, 60, 154, 194, 164, 62, 60, 76, 20, 189, 37, 34, 186, 190, 172, 103, 209, 188, 209, 77, 18, 190, 91, 96, 86, 189, 56, 250, 2, 62, 77, 250, 188, 189, 217, 139, 9, 190, 168, 175, 205, 61, 230, 241, 137, 190, 122, 33, 6, 189, 213, 181, 48, 62, 192, 19, 236, 189, 102, 231, 178, 62, 221, 158, 6, 191, 69, 51, 156, 61, 153, 117, 24, 190, 58, 208, 123, 190, 21, 135, 59, 191, 169, 36, 182, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 236, 200, 191, 61, 47, 62, 9, 62, 128, 101, 153, 61, 122, 5, 24, 191, 59, 33, 61, 62, 206, 146, 15, 191, 71, 145, 199, 190, 180, 187, 71, 62, 124, 174, 29, 63, 43, 207, 95, 190, 64, 49, 210, 61, 175, 103, 72, 61, 99, 11, 129, 190, 127, 77, 182, 188, 196, 121, 161, 62, 76, 213, 24, 62, 28, 72, 73, 62, 93, 40, 16, 190, 177, 238, 22, 61, 6, 136, 44, 190, 198, 236, 248, 188, 94, 171, 166, 191, 107, 245, 247, 60, 134, 221, 46, 189, 84, 229, 114, 188, 224, 21, 26, 188, 70, 24, 250, 62, 31, 221, 217, 189, 21, 47, 62, 190, 25, 15, 21, 190, 253, 15, 202, 189, 40, 120, 72, 62, 72, 37, 62, 190, 247, 237, 131, 189, 70, 1, 86, 62, 174, 238, 225, 189, 167, 231, 224, 59, 181, 147, 133, 62, 236, 208, 249, 189, 171, 170, 141, 190, 189, 17, 185, 189, 92, 69, 139, 190, 133, 134, 40, 188, 90, 217, 215, 190, 49, 7, 78, 191, 252, 116, 253, 190, 136, 111, 49, 62, 38, 151, 18, 190, 13, 200, 6, 190, 97, 79, 46, 61, 83, 18, 137, 61, 67, 109, 134, 60, 193, 223, 68, 61, 16, 169, 96, 190, 243, 57, 188, 188, 199, 234, 214, 62, 120, 223, 184, 190, 83, 86, 93, 62, 16, 202, 36, 190, 181, 142, 88, 191, 230, 48, 241, 61, 154, 252, 146, 190, 46, 73, 15, 190, 222, 130, 134, 61, 242, 244, 4, 190, 102, 253, 80, 190, 135, 125, 127, 189, 15, 214, 74, 191, 219, 85, 232, 61, 104, 15, 191, 189, 124, 64, 158, 190, 27, 125, 160, 62, 108, 0, 8, 63, 191, 94, 148, 190, 237, 22, 199, 61, 74, 140, 127, 189, 91, 251, 150, 189, 225, 202, 173, 190, 35, 233, 255, 61, 8, 50, 252, 62, 198, 164, 196, 187, 156, 91, 180, 189, 189, 232, 241, 59, 247, 185, 172, 190, 134, 161, 13, 189, 17, 55, 177, 191, 211, 183, 91, 62, 133, 47, 112, 190, 183, 221, 150, 189, 44, 251, 168, 62, 1, 184, 148, 62, 65, 255, 123, 189, 10, 200, 65, 61, 216, 165, 122, 189, 55, 11, 29, 190, 63, 227, 45, 62, 137, 117, 71, 61, 194, 234, 224, 61, 215, 164, 8, 63, 29, 138, 51, 191, 160, 184, 200, 188, 6, 36, 216, 189, 210, 145, 222, 190, 15, 246, 176, 61, 19, 163, 0, 63, 58, 225, 0, 63, 99, 4, 183, 189, 129, 212, 130, 59, 63, 106, 164, 189, 102, 188, 147, 62, 138, 160, 91, 61, 39, 21, 98, 62, 53, 192, 83, 62, 110, 12, 186, 190, 32, 202, 180, 190, 166, 219, 72, 61, 121, 236, 64, 61, 182, 232, 68, 189, 72, 190, 1, 62, 201, 249, 141, 190, 225, 233, 11, 62, 189, 242, 142, 62, 147, 41, 170, 62, 141, 22, 85, 190, 46, 247, 141, 62, 44, 19, 155, 190, 166, 23, 186, 189, 79, 178, 136, 190, 186, 246, 15, 190, 64, 93, 197, 61, 254, 211, 71, 61, 49, 137, 128, 62, 6, 55, 84, 188, 214, 23, 155, 61, 179, 160, 80, 62, 138, 181, 10, 60, 244, 179, 138, 191, 228, 89, 65, 62, 29, 62, 9, 191, 31, 5, 226, 189, 67, 42, 30, 191, 158, 197, 169, 61, 54, 48, 105, 190, 245, 98, 43, 189, 64, 80, 188, 61, 235, 96, 1, 59, 202, 12, 151, 59, 170, 208, 235, 61, 158, 224, 227, 189, 141, 245, 245, 61, 197, 132, 133, 62, 188, 16, 86, 190, 17, 77, 203, 189, 134, 233, 149, 190, 235, 88, 139, 61, 58, 127, 179, 189, 178, 105, 69, 190, 127, 82, 97, 62, 60, 219, 84, 62, 164, 224, 137, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 211, 9, 62, 243, 206, 184, 60, 148, 149, 65, 62, 175, 135, 233, 189, 84, 147, 112, 62, 123, 160, 202, 60, 107, 34, 222, 61, 26, 61, 84, 62, 101, 95, 196, 61, 115, 138, 102, 62, 56, 133, 129, 62, 38, 149, 201, 61, 5, 230, 7, 190, 203, 209, 184, 61, 62, 35, 83, 62, 41, 216, 8, 190, 4, 154, 19, 62, 51, 208, 56, 62, 102, 134, 183, 189, 145, 248, 2, 191, 130, 128, 52, 62, 12, 102, 95, 62, 4, 12, 153, 61, 179, 167, 133, 62, 134, 134, 145, 62, 44, 94, 31, 62, 69, 140, 13, 190, 74, 201, 86, 62, 197, 113, 2, 62, 162, 123, 0, 62, 184, 63, 193, 190, 202, 215, 119, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 127, 101, 190, 209, 48, 156, 191, 182, 97, 254, 190, 38, 189, 235, 61, 78, 117, 225, 62, 106, 231, 71, 62, 253, 53, 86, 190, 66, 32, 147, 62, 50, 195, 125, 61, 147, 140, 237, 191, 19, 244, 234, 190, 244, 38, 224, 62, 254, 37, 150, 61, 110, 162, 149, 62, 91, 174, 103, 191, 233, 33, 54, 63, 90, 208, 152, 191, 220, 174, 153, 190, 107, 86, 9, 188, 24, 32, 160, 62, 201, 251, 163, 190, 98, 231, 122, 61, 228, 189, 120, 191, 196, 32, 179, 190, 149, 73, 135, 63, 254, 201, 12, 190, 92, 4, 8, 62, 2, 196, 137, 190, 38, 24, 146, 190, 237, 1, 234, 190, 138, 20, 199, 62, 105, 206, 129, 190, 39, 9, 47, 189, 241, 107, 217, 61, 98, 80, 234, 61, 156, 118, 150, 188, 16, 155, 233, 188, 219, 8, 25, 190, 60, 151, 142, 189, 242, 70, 55, 190, 25, 103, 167, 190, 152, 86, 86, 62, 41, 225, 223, 189, 35, 222, 16, 62, 206, 17, 245, 61, 156, 111, 39, 62, 16, 10, 38, 62, 172, 82, 67, 62, 223, 138, 79, 62, 221, 172, 150, 190, 1, 200, 144, 189, 247, 25, 60, 63, 7, 0, 199, 189, 191, 51, 29, 190, 140, 244, 135, 63, 173, 59, 188, 190, 166, 151, 242, 190, 23, 18, 49, 189, 144, 120, 64, 186, 27, 148, 181, 189, 234, 197, 208, 189, 217, 90, 55, 190, 184, 109, 106, 62, 247, 131, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 50, 15, 62, 78, 114, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {70, 251, 136, 63, 52, 20, 33, 63, 194, 102, 104, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {132, 197, 129, 191, 137, 16, 140, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}