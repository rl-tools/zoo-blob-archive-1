// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 169, 244, 62, 79, 14, 91, 190, 149, 81, 22, 191, 190, 116, 227, 62, 20, 220, 104, 62, 94, 197, 31, 191, 80, 239, 29, 62, 88, 2, 211, 62, 115, 184, 166, 62, 28, 186, 235, 190, 244, 252, 142, 191, 251, 62, 22, 62, 185, 11, 18, 191, 241, 82, 211, 62, 154, 10, 71, 63, 223, 223, 58, 191, 143, 148, 97, 63, 17, 205, 142, 62, 151, 131, 24, 191, 62, 243, 207, 188, 184, 110, 249, 62, 35, 132, 226, 189, 251, 12, 184, 63, 96, 113, 242, 62, 183, 174, 85, 63, 74, 89, 79, 190, 40, 138, 146, 61, 147, 106, 133, 62, 124, 42, 106, 63, 142, 8, 24, 62, 87, 236, 95, 63, 81, 105, 195, 188, 63, 131, 210, 189, 41, 62, 151, 190, 130, 163, 129, 191, 73, 93, 178, 189, 139, 169, 0, 63, 41, 225, 137, 191, 229, 181, 210, 190, 8, 199, 168, 190, 18, 187, 84, 191, 179, 199, 225, 62, 50, 228, 69, 63, 76, 162, 250, 60, 173, 253, 171, 188, 128, 168, 76, 62, 66, 247, 85, 190, 8, 177, 247, 62, 177, 142, 73, 190, 247, 22, 249, 190, 248, 59, 240, 190, 185, 22, 10, 191, 94, 246, 114, 62, 145, 174, 102, 62, 200, 232, 97, 63, 71, 253, 230, 190, 106, 158, 86, 190, 81, 119, 56, 62, 109, 247, 106, 63, 149, 207, 159, 190, 209, 236, 51, 190, 75, 90, 72, 63, 254, 201, 243, 59, 56, 99, 26, 191, 182, 244, 154, 63, 125, 199, 240, 62, 190, 81, 136, 190, 115, 55, 113, 190, 71, 18, 229, 190, 82, 23, 171, 190, 189, 116, 123, 63, 16, 52, 110, 61, 32, 81, 11, 62, 197, 233, 64, 63, 190, 84, 241, 189, 151, 179, 137, 62, 248, 50, 92, 63, 239, 91, 248, 190, 70, 85, 80, 189, 94, 221, 234, 190, 1, 189, 66, 63, 66, 3, 25, 191, 203, 72, 130, 191, 16, 71, 99, 189, 151, 234, 49, 62, 127, 175, 113, 63, 188, 2, 45, 190, 218, 164, 105, 189, 178, 103, 59, 191, 122, 14, 27, 62, 240, 108, 149, 190, 94, 227, 123, 191, 49, 80, 69, 63, 249, 223, 89, 63, 29, 33, 91, 191, 3, 110, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 231, 190, 190, 131, 14, 155, 61, 50, 219, 87, 191, 204, 235, 203, 190, 77, 43, 153, 61, 53, 41, 164, 62, 96, 132, 7, 63, 0, 88, 140, 189, 96, 229, 118, 189, 242, 193, 112, 190, 126, 254, 53, 190, 163, 47, 255, 60, 214, 117, 206, 190, 112, 205, 191, 190, 146, 225, 32, 62, 235, 22, 47, 62, 209, 28, 144, 190, 250, 68, 33, 63, 166, 226, 162, 190, 119, 31, 201, 62, 135, 156, 207, 62, 201, 158, 46, 61, 175, 156, 42, 63, 171, 94, 149, 62, 197, 37, 41, 190, 155, 129, 56, 62, 180, 251, 153, 190, 161, 62, 213, 62, 12, 248, 54, 62, 200, 227, 146, 190, 150, 18, 181, 190, 39, 100, 190, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 211, 159, 59, 174, 223, 246, 189, 16, 143, 145, 190, 68, 11, 135, 62, 193, 222, 1, 191, 252, 247, 173, 61, 115, 141, 219, 189, 118, 174, 183, 62, 23, 255, 245, 61, 20, 8, 188, 189, 164, 190, 9, 62, 75, 175, 146, 62, 146, 246, 133, 190, 140, 4, 52, 63, 199, 52, 165, 61, 245, 235, 160, 190, 107, 66, 8, 61, 145, 203, 204, 189, 105, 238, 63, 190, 160, 157, 222, 189, 237, 32, 16, 62, 123, 198, 9, 191, 137, 0, 35, 62, 68, 76, 182, 188, 232, 234, 46, 62, 46, 120, 181, 62, 92, 236, 48, 191, 238, 128, 142, 61, 93, 238, 172, 186, 107, 228, 80, 61, 228, 100, 209, 190, 100, 213, 84, 61, 199, 184, 141, 189, 4, 123, 206, 189, 165, 71, 242, 189, 77, 254, 23, 61, 203, 183, 41, 191, 90, 18, 159, 191, 3, 240, 51, 62, 23, 111, 97, 62, 214, 37, 57, 60, 14, 45, 237, 62, 16, 172, 73, 189, 242, 155, 148, 62, 100, 12, 39, 191, 21, 37, 119, 62, 4, 6, 115, 62, 157, 166, 158, 62, 138, 116, 95, 62, 192, 91, 44, 190, 72, 251, 0, 191, 173, 191, 153, 190, 40, 208, 55, 62, 227, 176, 18, 191, 144, 69, 34, 62, 20, 253, 138, 190, 225, 242, 132, 62, 201, 217, 161, 62, 155, 93, 223, 188, 161, 136, 148, 62, 175, 109, 90, 62, 63, 199, 64, 62, 175, 151, 10, 191, 214, 178, 203, 190, 185, 4, 141, 190, 44, 220, 185, 190, 181, 148, 189, 60, 197, 52, 177, 188, 27, 254, 151, 61, 235, 85, 250, 61, 109, 145, 5, 189, 175, 9, 171, 60, 228, 255, 165, 61, 168, 162, 181, 190, 68, 147, 102, 62, 43, 123, 213, 190, 128, 21, 3, 191, 64, 202, 88, 189, 48, 255, 152, 62, 64, 34, 118, 60, 117, 46, 61, 190, 90, 208, 121, 62, 109, 141, 70, 62, 231, 140, 17, 190, 215, 2, 250, 60, 138, 216, 18, 190, 152, 18, 160, 61, 57, 221, 36, 62, 180, 47, 3, 190, 174, 60, 69, 62, 77, 107, 175, 62, 132, 228, 143, 191, 193, 16, 159, 62, 241, 109, 58, 62, 66, 32, 22, 190, 100, 62, 233, 61, 167, 51, 198, 61, 168, 140, 23, 190, 114, 126, 21, 190, 200, 158, 128, 59, 163, 173, 25, 190, 243, 220, 211, 189, 192, 196, 149, 60, 22, 35, 65, 189, 36, 51, 128, 61, 118, 173, 133, 189, 46, 227, 25, 61, 84, 162, 67, 189, 161, 218, 49, 190, 211, 140, 32, 62, 251, 108, 139, 60, 185, 194, 149, 60, 101, 97, 128, 60, 109, 232, 93, 188, 197, 57, 29, 62, 27, 85, 30, 190, 130, 38, 219, 189, 253, 249, 67, 189, 30, 79, 40, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 13, 89, 217, 61, 84, 54, 77, 61, 41, 152, 168, 189, 141, 16, 255, 189, 60, 194, 21, 190, 201, 128, 130, 189, 45, 98, 148, 189, 143, 54, 2, 190, 128, 127, 82, 190, 7, 13, 243, 61, 38, 239, 78, 189, 32, 128, 66, 61, 232, 210, 74, 62, 172, 1, 183, 188, 62, 68, 23, 63, 82, 218, 113, 190, 249, 176, 2, 190, 173, 238, 94, 61, 109, 199, 201, 62, 154, 6, 87, 60, 131, 67, 149, 190, 166, 179, 2, 190, 161, 104, 35, 191, 100, 161, 100, 62, 134, 209, 159, 61, 123, 9, 122, 190, 118, 51, 138, 61, 132, 123, 28, 61, 107, 7, 185, 190, 58, 130, 195, 61, 118, 182, 20, 191, 56, 27, 150, 191, 137, 135, 48, 190, 93, 201, 65, 62, 207, 145, 243, 190, 99, 120, 29, 61, 97, 224, 191, 62, 37, 105, 95, 189, 162, 229, 9, 62, 76, 228, 143, 62, 70, 157, 94, 190, 6, 156, 40, 62, 179, 164, 170, 189, 124, 132, 72, 189, 153, 129, 21, 189, 105, 200, 70, 191, 89, 193, 154, 61, 253, 127, 129, 191, 16, 241, 72, 62, 245, 99, 137, 188, 37, 75, 19, 60, 85, 149, 22, 190, 189, 247, 165, 188, 54, 51, 193, 189, 49, 240, 11, 62, 125, 200, 38, 190, 124, 24, 237, 62, 89, 110, 129, 62, 61, 39, 174, 189, 80, 131, 45, 61, 193, 0, 64, 61, 31, 132, 64, 190, 33, 100, 198, 189, 120, 62, 222, 60, 79, 62, 18, 190, 97, 84, 88, 62, 20, 65, 144, 189, 83, 22, 46, 188, 143, 19, 39, 63, 58, 29, 175, 61, 65, 194, 186, 189, 15, 139, 172, 189, 228, 180, 126, 188, 206, 181, 21, 62, 127, 195, 13, 62, 218, 130, 107, 189, 81, 165, 62, 61, 64, 34, 63, 190, 198, 54, 137, 189, 76, 157, 99, 190, 92, 84, 29, 62, 147, 9, 153, 61, 1, 196, 44, 191, 99, 230, 188, 60, 65, 70, 154, 62, 10, 103, 153, 189, 67, 20, 130, 190, 166, 109, 13, 62, 69, 66, 187, 188, 41, 195, 13, 62, 202, 233, 81, 62, 35, 158, 24, 62, 100, 130, 37, 190, 149, 136, 228, 61, 147, 203, 27, 190, 21, 209, 217, 61, 63, 179, 121, 61, 71, 178, 143, 190, 253, 138, 165, 62, 84, 246, 37, 62, 121, 141, 137, 62, 138, 234, 49, 189, 94, 158, 67, 62, 245, 172, 102, 62, 168, 97, 78, 191, 167, 174, 146, 62, 232, 107, 39, 62, 111, 189, 67, 61, 76, 84, 63, 62, 192, 199, 166, 190, 42, 216, 204, 61, 93, 12, 169, 190, 142, 241, 200, 62, 92, 51, 23, 62, 113, 239, 148, 189, 126, 14, 65, 190, 231, 96, 185, 60, 111, 24, 62, 190, 50, 119, 235, 189, 170, 8, 67, 62, 28, 51, 109, 62, 64, 167, 0, 62, 51, 66, 137, 61, 114, 112, 23, 62, 27, 29, 93, 189, 4, 55, 45, 62, 188, 47, 1, 62, 133, 121, 202, 190, 238, 159, 209, 190, 118, 60, 230, 61, 220, 77, 47, 60, 37, 85, 97, 189, 165, 198, 159, 62, 220, 195, 186, 188, 26, 13, 82, 190, 75, 33, 10, 62, 60, 114, 165, 188, 229, 206, 4, 190, 116, 48, 142, 188, 194, 229, 70, 62, 215, 42, 141, 61, 93, 189, 52, 189, 31, 18, 132, 62, 21, 66, 52, 62, 167, 200, 80, 62, 23, 73, 146, 190, 199, 145, 31, 190, 46, 171, 187, 190, 112, 41, 205, 62, 203, 207, 232, 189, 135, 226, 25, 190, 197, 68, 141, 188, 64, 230, 205, 62, 237, 45, 215, 62, 199, 181, 201, 62, 68, 241, 191, 60, 248, 104, 213, 188, 73, 92, 219, 61, 90, 143, 223, 186, 37, 60, 121, 62, 116, 23, 130, 189, 134, 57, 133, 190, 23, 17, 155, 62, 179, 30, 171, 189, 89, 86, 173, 60, 29, 138, 164, 188, 195, 189, 31, 191, 5, 242, 178, 190, 212, 54, 189, 190, 4, 40, 70, 189, 139, 126, 41, 191, 111, 131, 82, 191, 105, 202, 9, 61, 195, 189, 22, 189, 78, 124, 213, 189, 88, 44, 36, 190, 9, 65, 162, 61, 103, 121, 134, 62, 160, 253, 159, 191, 6, 245, 25, 63, 146, 32, 79, 62, 50, 180, 92, 62, 68, 140, 136, 62, 78, 127, 233, 61, 163, 96, 239, 189, 199, 87, 77, 191, 237, 55, 190, 189, 183, 21, 138, 191, 214, 51, 126, 62, 43, 185, 210, 190, 144, 245, 50, 62, 142, 19, 11, 63, 6, 244, 52, 62, 78, 159, 214, 61, 60, 115, 45, 190, 188, 39, 48, 58, 13, 62, 62, 191, 55, 195, 111, 191, 60, 178, 104, 190, 14, 208, 6, 61, 14, 130, 135, 62, 137, 214, 157, 189, 105, 153, 140, 61, 155, 104, 66, 62, 225, 199, 233, 188, 174, 168, 187, 61, 184, 125, 47, 190, 151, 6, 111, 189, 220, 0, 224, 61, 162, 197, 62, 190, 28, 54, 108, 191, 126, 3, 120, 188, 176, 56, 128, 61, 129, 4, 152, 61, 243, 56, 137, 61, 97, 254, 216, 61, 174, 75, 210, 188, 54, 34, 71, 190, 28, 192, 207, 61, 70, 127, 5, 190, 107, 144, 248, 187, 60, 77, 123, 62, 186, 170, 25, 62, 121, 109, 88, 62, 17, 15, 42, 61, 125, 202, 155, 191, 36, 219, 166, 62, 192, 135, 250, 61, 225, 211, 204, 190, 2, 23, 231, 188, 182, 38, 56, 62, 24, 89, 36, 60, 118, 59, 34, 191, 117, 118, 252, 61, 33, 191, 185, 62, 19, 10, 28, 189, 230, 75, 117, 62, 212, 28, 227, 190, 208, 14, 237, 61, 179, 220, 25, 191, 155, 60, 161, 62, 64, 127, 1, 62, 172, 78, 35, 62, 196, 60, 143, 190, 104, 14, 230, 189, 30, 151, 236, 190, 202, 163, 168, 189, 102, 229, 36, 62, 88, 114, 196, 62, 125, 20, 4, 62, 229, 122, 96, 62, 5, 211, 179, 62, 204, 125, 216, 61, 221, 65, 41, 62, 20, 164, 25, 62, 42, 69, 199, 190, 32, 242, 15, 191, 50, 153, 132, 189, 189, 227, 155, 190, 128, 121, 52, 190, 67, 216, 37, 63, 47, 206, 147, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 155, 244, 130, 62, 73, 44, 182, 190, 22, 127, 25, 61, 80, 101, 182, 61, 75, 8, 89, 62, 72, 18, 139, 188, 115, 128, 114, 188, 54, 86, 34, 62, 204, 171, 204, 62, 236, 53, 120, 62, 229, 44, 131, 190, 196, 111, 45, 62, 239, 226, 141, 62, 97, 14, 11, 62, 133, 56, 152, 190, 253, 122, 10, 188, 179, 239, 237, 190, 159, 174, 121, 189, 151, 144, 176, 191, 24, 220, 232, 62, 66, 22, 181, 62, 134, 103, 52, 189, 127, 60, 218, 190, 3, 185, 65, 62, 147, 211, 216, 62, 80, 154, 48, 190, 127, 241, 193, 61, 205, 208, 227, 61, 188, 243, 140, 62, 105, 148, 34, 190, 70, 137, 40, 62, 54, 198, 80, 191, 153, 76, 225, 189, 246, 58, 84, 190, 218, 122, 204, 190, 200, 68, 120, 189, 6, 184, 34, 191, 51, 36, 120, 191, 109, 100, 185, 190, 60, 232, 155, 61, 58, 246, 231, 190, 238, 86, 236, 62, 12, 8, 197, 189, 11, 100, 211, 61, 136, 222, 169, 190, 53, 66, 15, 62, 255, 70, 87, 189, 68, 53, 179, 62, 65, 176, 162, 62, 173, 91, 122, 191, 89, 152, 0, 191, 105, 195, 252, 190, 198, 194, 254, 61, 163, 84, 155, 191, 24, 15, 129, 62, 199, 131, 162, 189, 83, 253, 66, 62, 35, 19, 198, 62, 91, 96, 127, 62, 195, 33, 164, 62, 154, 20, 11, 62, 189, 204, 16, 190, 189, 98, 155, 191, 160, 208, 43, 190, 235, 153, 106, 62, 20, 42, 42, 62, 187, 35, 246, 190, 183, 212, 136, 62, 209, 159, 74, 62, 183, 69, 1, 62, 8, 80, 161, 62, 228, 222, 160, 190, 135, 206, 56, 61, 161, 196, 73, 191, 36, 133, 167, 62, 108, 110, 144, 190, 28, 13, 5, 62, 119, 7, 237, 190, 12, 168, 134, 187, 102, 31, 148, 190, 165, 221, 0, 190, 45, 109, 147, 62, 30, 248, 26, 63, 207, 140, 153, 62, 240, 224, 207, 60, 156, 228, 132, 62, 143, 69, 218, 60, 72, 127, 30, 62, 151, 244, 238, 61, 69, 140, 229, 190, 135, 73, 2, 191, 27, 18, 65, 190, 103, 123, 170, 190, 116, 111, 23, 191, 218, 37, 10, 63, 176, 139, 100, 62, 81, 94, 129, 190, 207, 104, 154, 190, 207, 226, 75, 190, 37, 88, 133, 62, 174, 223, 203, 190, 141, 232, 145, 191, 230, 153, 197, 190, 83, 85, 134, 62, 76, 203, 43, 190, 167, 121, 18, 63, 14, 241, 23, 61, 32, 104, 161, 62, 202, 65, 20, 191, 152, 217, 120, 62, 72, 82, 173, 188, 220, 123, 181, 62, 253, 213, 147, 62, 165, 254, 44, 191, 39, 215, 190, 190, 127, 152, 152, 190, 212, 220, 145, 62, 252, 13, 175, 191, 115, 103, 31, 62, 181, 201, 23, 190, 9, 204, 8, 63, 149, 9, 222, 62, 91, 162, 244, 61, 199, 209, 63, 62, 180, 184, 134, 60, 239, 34, 243, 61, 6, 253, 121, 191, 138, 36, 194, 189, 16, 80, 8, 62, 204, 20, 212, 60, 43, 63, 131, 188, 47, 15, 153, 61, 143, 61, 21, 191, 202, 9, 64, 191, 18, 59, 56, 190, 90, 199, 119, 190, 53, 134, 89, 61, 48, 24, 34, 62, 141, 84, 164, 190, 58, 118, 168, 62, 42, 47, 167, 190, 74, 22, 88, 62, 101, 157, 138, 61, 69, 165, 206, 189, 6, 133, 168, 62, 187, 97, 152, 190, 173, 130, 242, 190, 216, 63, 48, 190, 59, 116, 34, 190, 172, 157, 97, 191, 205, 131, 150, 62, 108, 2, 147, 190, 249, 97, 98, 60, 150, 230, 9, 62, 217, 172, 19, 62, 138, 27, 141, 62, 114, 108, 51, 61, 126, 243, 100, 62, 4, 79, 15, 191, 128, 242, 159, 61, 178, 22, 155, 61, 255, 78, 78, 189, 84, 148, 8, 190, 148, 211, 36, 190, 220, 17, 145, 61, 40, 180, 145, 189, 36, 89, 13, 62, 61, 131, 205, 59, 234, 118, 137, 189, 173, 47, 164, 61, 70, 61, 176, 59, 218, 255, 23, 187, 122, 159, 145, 189, 173, 194, 80, 189, 36, 71, 3, 62, 28, 102, 52, 189, 127, 57, 180, 189, 185, 120, 231, 189, 161, 123, 160, 189, 183, 114, 211, 189, 63, 95, 146, 188, 41, 135, 10, 190, 174, 236, 248, 60, 212, 29, 3, 188, 102, 11, 27, 190, 224, 197, 241, 61, 105, 234, 237, 188, 44, 4, 160, 189, 254, 148, 202, 189, 128, 213, 196, 189, 134, 109, 79, 61, 238, 158, 148, 188, 167, 114, 158, 62, 29, 211, 151, 58, 167, 20, 180, 188, 79, 27, 158, 190, 92, 88, 88, 189, 24, 0, 184, 190, 104, 118, 70, 189, 57, 97, 109, 62, 35, 32, 23, 190, 46, 115, 40, 190, 231, 34, 191, 62, 112, 51, 212, 190, 232, 171, 203, 62, 119, 199, 11, 62, 205, 241, 196, 62, 196, 200, 149, 62, 138, 145, 186, 189, 94, 31, 60, 190, 174, 35, 60, 63, 185, 225, 97, 61, 90, 121, 219, 190, 120, 8, 230, 190, 89, 253, 236, 189, 191, 187, 68, 61, 69, 83, 141, 62, 47, 174, 39, 189, 111, 107, 166, 60, 155, 31, 175, 190, 33, 89, 97, 188, 183, 253, 4, 61, 27, 157, 163, 189, 149, 159, 9, 190, 242, 243, 164, 189, 252, 66, 251, 189, 143, 112, 26, 189, 14, 232, 185, 61, 205, 192, 85, 62, 121, 20, 167, 188, 94, 18, 14, 60, 61, 121, 34, 189, 189, 79, 169, 190, 199, 133, 7, 190, 226, 93, 135, 62, 81, 182, 64, 61, 177, 80, 34, 191, 131, 226, 29, 62, 97, 237, 17, 62, 127, 211, 57, 189, 52, 159, 39, 191, 238, 170, 171, 62, 56, 78, 133, 61, 20, 162, 2, 62, 149, 17, 28, 62, 233, 138, 183, 61, 2, 11, 83, 190, 230, 178, 192, 188, 188, 29, 181, 61, 79, 16, 119, 62, 112, 49, 189, 189, 103, 198, 57, 189, 228, 195, 21, 62, 189, 251, 210, 62, 22, 226, 160, 62, 205, 10, 17, 61, 108, 151, 225, 189, 145, 137, 43, 60, 18, 100, 20, 191, 197, 225, 56, 62, 41, 124, 120, 62, 4, 179, 90, 62, 157, 212, 36, 189, 138, 252, 76, 190, 17, 191, 8, 62, 107, 80, 208, 190, 62, 147, 125, 61, 181, 233, 40, 62, 58, 25, 190, 61, 220, 83, 233, 189, 153, 201, 243, 60, 75, 61, 183, 190, 146, 27, 187, 189, 230, 76, 237, 61, 246, 229, 144, 61, 19, 41, 138, 62, 126, 241, 81, 61, 241, 62, 8, 62, 244, 232, 231, 61, 14, 103, 108, 61, 86, 19, 237, 189, 110, 133, 217, 189, 99, 36, 230, 190, 187, 48, 76, 189, 183, 143, 15, 61, 8, 172, 64, 189, 138, 203, 242, 62, 179, 143, 76, 62, 189, 219, 78, 190, 69, 161, 87, 190, 82, 86, 77, 190, 212, 104, 148, 62, 108, 242, 78, 191, 137, 157, 39, 190, 17, 86, 49, 191, 167, 255, 54, 63, 21, 111, 210, 61, 19, 2, 225, 62, 198, 174, 226, 61, 237, 17, 188, 62, 27, 239, 245, 190, 2, 18, 132, 60, 7, 162, 226, 61, 203, 103, 131, 62, 109, 129, 213, 62, 7, 22, 64, 190, 196, 145, 247, 190, 188, 235, 241, 190, 156, 136, 170, 62, 42, 111, 182, 191, 61, 228, 65, 62, 207, 201, 62, 189, 224, 230, 196, 62, 123, 194, 135, 62, 43, 204, 38, 191, 115, 80, 79, 62, 126, 160, 126, 62, 196, 68, 126, 62, 87, 226, 73, 191, 233, 215, 144, 190, 102, 230, 160, 190, 131, 76, 218, 189, 138, 183, 100, 61, 125, 219, 163, 190, 79, 249, 9, 62, 94, 142, 88, 60, 175, 154, 9, 62, 84, 18, 151, 189, 114, 38, 107, 190, 20, 251, 168, 190, 209, 86, 23, 62, 1, 16, 12, 191, 203, 32, 12, 191, 76, 166, 238, 61, 203, 70, 195, 62, 214, 241, 229, 61, 182, 68, 233, 190, 32, 71, 70, 61, 114, 106, 158, 62, 38, 119, 224, 61, 121, 155, 58, 61, 243, 232, 2, 61, 239, 234, 9, 190, 160, 97, 194, 189, 237, 84, 113, 190, 122, 146, 29, 61, 124, 148, 61, 61, 65, 22, 96, 191, 12, 37, 169, 61, 185, 252, 142, 62, 224, 218, 125, 61, 207, 42, 68, 62, 218, 145, 195, 190, 164, 46, 59, 60, 42, 46, 0, 191, 79, 244, 158, 61, 21, 178, 51, 190, 239, 129, 168, 190, 70, 147, 52, 188, 121, 90, 201, 191, 134, 131, 31, 61, 201, 45, 75, 191, 31, 164, 188, 62, 204, 68, 150, 190, 219, 250, 94, 189, 48, 106, 33, 190, 71, 74, 198, 61, 244, 8, 224, 61, 82, 181, 62, 190, 39, 194, 227, 61, 183, 51, 45, 62, 21, 45, 1, 63, 53, 7, 181, 189, 138, 143, 217, 190, 243, 4, 26, 62, 191, 154, 159, 189, 145, 64, 46, 190, 210, 188, 182, 190, 239, 140, 104, 190, 9, 14, 20, 190, 55, 124, 27, 190, 40, 132, 82, 188, 197, 0, 3, 63, 248, 39, 144, 61, 246, 184, 228, 61, 50, 234, 5, 62, 25, 215, 160, 190, 235, 140, 238, 189, 80, 173, 226, 190, 104, 165, 81, 62, 83, 117, 102, 190, 64, 100, 54, 62, 54, 152, 160, 61, 21, 76, 143, 190, 60, 182, 243, 60, 159, 164, 162, 62, 90, 247, 3, 189, 32, 147, 146, 190, 3, 151, 9, 59, 58, 101, 5, 190, 20, 116, 138, 189, 128, 79, 132, 61, 223, 161, 170, 189, 131, 125, 6, 190, 88, 172, 208, 61, 2, 144, 164, 190, 173, 115, 43, 189, 110, 60, 31, 62, 187, 42, 162, 189, 0, 125, 182, 62, 138, 227, 4, 191, 70, 217, 147, 61, 70, 68, 6, 190, 54, 31, 96, 190, 32, 247, 65, 191, 92, 85, 170, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 60, 50, 179, 61, 46, 212, 1, 62, 119, 234, 120, 61, 63, 163, 251, 190, 90, 197, 14, 62, 41, 131, 235, 190, 174, 250, 184, 190, 221, 143, 94, 62, 158, 116, 31, 63, 153, 12, 54, 190, 193, 238, 236, 61, 254, 235, 208, 61, 243, 126, 119, 190, 104, 178, 169, 188, 29, 25, 171, 62, 251, 197, 47, 62, 238, 215, 66, 62, 214, 251, 229, 189, 238, 48, 126, 61, 44, 104, 48, 190, 133, 162, 139, 188, 158, 13, 154, 191, 19, 149, 201, 60, 103, 39, 7, 189, 29, 250, 164, 59, 79, 251, 57, 188, 38, 244, 232, 62, 26, 158, 69, 189, 200, 147, 51, 190, 78, 153, 191, 189, 30, 226, 227, 189, 134, 237, 99, 62, 110, 12, 42, 190, 147, 9, 105, 189, 70, 1, 86, 62, 174, 238, 225, 189, 108, 5, 158, 189, 77, 254, 36, 62, 26, 74, 48, 190, 70, 81, 94, 190, 56, 6, 164, 189, 106, 111, 69, 190, 15, 175, 170, 60, 118, 206, 218, 190, 168, 91, 22, 191, 252, 116, 253, 190, 231, 248, 84, 62, 218, 86, 3, 190, 45, 51, 22, 190, 13, 223, 141, 188, 211, 128, 193, 61, 196, 133, 47, 60, 238, 43, 189, 60, 163, 131, 131, 190, 211, 75, 65, 189, 166, 177, 186, 62, 71, 90, 175, 190, 242, 28, 94, 62, 240, 127, 39, 190, 211, 194, 107, 191, 83, 89, 243, 61, 154, 252, 146, 190, 126, 234, 15, 190, 152, 240, 182, 61, 239, 196, 1, 190, 100, 216, 75, 190, 97, 115, 181, 189, 111, 88, 30, 191, 34, 17, 212, 60, 181, 246, 48, 60, 69, 4, 146, 190, 29, 115, 173, 62, 239, 17, 10, 63, 139, 42, 131, 190, 206, 183, 200, 61, 68, 10, 143, 188, 64, 15, 133, 189, 225, 169, 169, 190, 164, 119, 13, 62, 193, 214, 3, 63, 70, 243, 151, 59, 1, 54, 136, 189, 89, 199, 1, 60, 57, 92, 165, 190, 181, 117, 93, 187, 130, 156, 158, 191, 72, 254, 104, 62, 51, 170, 57, 190, 3, 4, 36, 189, 21, 240, 175, 62, 245, 153, 105, 62, 87, 172, 190, 59, 11, 194, 149, 61, 100, 161, 141, 60, 234, 41, 52, 190, 63, 245, 62, 62, 194, 46, 131, 61, 61, 82, 218, 61, 179, 165, 239, 62, 132, 216, 26, 191, 246, 10, 144, 188, 178, 123, 144, 189, 252, 23, 214, 190, 87, 186, 131, 61, 40, 176, 255, 62, 76, 211, 228, 62, 42, 97, 239, 189, 30, 188, 21, 61, 182, 41, 50, 189, 18, 251, 136, 62, 18, 128, 167, 60, 244, 85, 106, 62, 185, 125, 113, 62, 164, 22, 175, 190, 237, 149, 174, 190, 0, 53, 52, 61, 103, 170, 20, 61, 203, 112, 51, 189, 50, 73, 20, 62, 254, 205, 125, 190, 2, 142, 235, 61, 255, 188, 134, 62, 248, 201, 155, 62, 21, 204, 28, 190, 215, 244, 129, 62, 221, 83, 143, 190, 24, 222, 23, 190, 153, 138, 126, 190, 204, 160, 17, 190, 23, 19, 217, 61, 144, 76, 123, 58, 214, 14, 136, 62, 238, 71, 80, 188, 200, 127, 166, 61, 156, 27, 85, 62, 226, 94, 143, 60, 226, 141, 136, 191, 85, 115, 63, 62, 17, 149, 185, 190, 5, 195, 172, 189, 180, 79, 19, 191, 242, 255, 177, 61, 25, 237, 70, 190, 212, 84, 27, 189, 108, 97, 142, 61, 248, 241, 55, 60, 202, 12, 151, 59, 185, 176, 97, 62, 199, 67, 149, 189, 186, 60, 1, 62, 117, 44, 126, 62, 101, 206, 60, 190, 199, 105, 151, 188, 193, 43, 126, 190, 165, 211, 138, 61, 224, 22, 165, 189, 186, 80, 219, 189, 65, 155, 121, 62, 169, 248, 82, 62, 237, 40, 97, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 36, 24, 62, 196, 97, 15, 60, 165, 148, 52, 62, 22, 162, 217, 189, 156, 33, 97, 62, 16, 162, 29, 60, 82, 102, 216, 61, 11, 112, 85, 62, 84, 237, 161, 61, 4, 82, 95, 62, 195, 92, 85, 62, 117, 72, 190, 61, 5, 230, 7, 190, 13, 214, 234, 61, 223, 148, 92, 62, 93, 254, 19, 190, 55, 162, 8, 62, 222, 28, 36, 62, 200, 150, 183, 189, 126, 129, 253, 190, 249, 65, 44, 62, 149, 150, 96, 62, 16, 93, 166, 61, 77, 119, 129, 62, 68, 99, 136, 62, 242, 186, 36, 62, 69, 140, 13, 190, 134, 75, 108, 62, 110, 72, 1, 62, 36, 109, 28, 62, 66, 225, 190, 190, 185, 234, 94, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 105, 114, 190, 7, 117, 139, 191, 239, 140, 234, 190, 87, 151, 239, 61, 10, 111, 222, 62, 24, 83, 70, 62, 79, 24, 64, 190, 194, 46, 145, 62, 20, 195, 108, 61, 120, 198, 234, 191, 88, 24, 196, 190, 199, 68, 222, 62, 254, 37, 150, 61, 10, 56, 155, 62, 214, 75, 101, 191, 89, 99, 51, 63, 65, 4, 117, 191, 4, 18, 148, 190, 147, 216, 200, 188, 98, 218, 145, 62, 21, 251, 160, 190, 135, 97, 126, 61, 85, 159, 115, 191, 18, 60, 174, 190, 65, 199, 129, 63, 22, 157, 22, 190, 92, 4, 8, 62, 199, 248, 132, 190, 68, 196, 127, 190, 3, 6, 230, 190, 175, 238, 182, 62, 201, 62, 124, 190, 224, 231, 36, 189, 144, 246, 88, 61, 115, 233, 29, 61, 116, 121, 179, 188, 115, 206, 221, 189, 13, 246, 28, 190, 73, 153, 166, 189, 245, 47, 24, 190, 245, 216, 147, 190, 129, 92, 193, 61, 26, 72, 249, 189, 25, 252, 29, 62, 206, 17, 245, 61, 192, 133, 27, 62, 201, 253, 58, 62, 109, 183, 81, 62, 135, 117, 3, 62, 234, 188, 149, 190, 45, 84, 151, 189, 175, 166, 38, 63, 29, 124, 11, 190, 29, 17, 27, 190, 203, 145, 121, 63, 26, 202, 190, 190, 7, 20, 163, 190, 82, 91, 69, 189, 144, 120, 64, 186, 75, 55, 8, 190, 95, 179, 59, 189, 52, 71, 84, 190, 89, 174, 85, 62, 223, 24, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 58, 19, 62, 54, 191, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 98, 97, 191, 118, 73, 37, 63, 192, 167, 183, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 154, 55, 63, 227, 79, 105, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}