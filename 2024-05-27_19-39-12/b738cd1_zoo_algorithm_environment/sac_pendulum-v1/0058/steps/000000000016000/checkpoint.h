// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 151, 255, 62, 72, 244, 153, 190, 13, 36, 17, 191, 1, 15, 244, 62, 66, 34, 39, 62, 95, 185, 26, 191, 68, 139, 9, 63, 94, 80, 250, 62, 56, 19, 148, 62, 6, 94, 216, 190, 92, 113, 156, 191, 252, 0, 13, 62, 72, 145, 15, 191, 124, 36, 23, 63, 19, 97, 73, 63, 192, 2, 89, 191, 168, 112, 101, 63, 8, 153, 160, 62, 45, 6, 255, 190, 144, 62, 191, 189, 190, 10, 157, 62, 207, 122, 195, 189, 157, 112, 195, 63, 144, 123, 1, 63, 228, 10, 63, 63, 202, 143, 110, 190, 41, 57, 97, 61, 70, 84, 142, 62, 250, 208, 121, 63, 67, 178, 49, 62, 176, 62, 95, 63, 101, 43, 234, 189, 217, 134, 172, 189, 143, 152, 136, 190, 117, 82, 137, 191, 111, 242, 25, 190, 117, 55, 237, 62, 145, 31, 145, 191, 137, 12, 216, 190, 41, 159, 190, 190, 31, 43, 59, 191, 74, 101, 238, 62, 162, 113, 61, 63, 67, 129, 232, 61, 39, 52, 169, 61, 67, 13, 99, 62, 62, 58, 56, 190, 137, 146, 215, 62, 252, 176, 18, 190, 124, 218, 13, 191, 141, 74, 234, 190, 187, 106, 9, 191, 55, 94, 34, 62, 28, 70, 109, 62, 232, 245, 100, 63, 169, 112, 0, 191, 31, 198, 96, 190, 73, 149, 81, 62, 228, 154, 104, 63, 38, 244, 154, 190, 21, 197, 56, 190, 154, 199, 86, 63, 170, 197, 149, 61, 197, 21, 31, 191, 145, 168, 192, 63, 213, 108, 200, 62, 184, 208, 179, 190, 79, 154, 98, 190, 121, 250, 219, 190, 149, 19, 231, 190, 36, 242, 123, 63, 71, 244, 241, 60, 224, 70, 2, 62, 78, 83, 77, 63, 185, 67, 165, 189, 155, 188, 119, 62, 28, 70, 95, 63, 215, 236, 246, 190, 95, 74, 166, 188, 148, 30, 227, 190, 175, 107, 65, 63, 110, 21, 8, 191, 203, 25, 134, 191, 15, 169, 188, 189, 134, 70, 24, 62, 238, 195, 116, 63, 245, 161, 16, 190, 56, 195, 156, 60, 204, 188, 29, 191, 28, 169, 52, 62, 113, 165, 129, 190, 57, 105, 114, 191, 107, 106, 68, 63, 50, 3, 75, 63, 70, 63, 123, 191, 145, 136, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 220, 198, 190, 74, 65, 174, 61, 116, 26, 95, 191, 30, 178, 177, 190, 96, 225, 30, 189, 122, 37, 173, 62, 224, 110, 54, 63, 112, 191, 1, 189, 205, 175, 90, 190, 127, 9, 85, 190, 100, 224, 48, 190, 178, 181, 18, 58, 9, 136, 225, 190, 31, 82, 195, 190, 249, 254, 233, 61, 85, 40, 62, 62, 188, 151, 69, 190, 113, 110, 45, 63, 50, 233, 171, 190, 77, 18, 198, 62, 58, 121, 199, 62, 67, 62, 189, 60, 116, 105, 36, 63, 210, 221, 137, 62, 196, 101, 99, 190, 203, 103, 45, 62, 172, 135, 201, 190, 14, 136, 4, 63, 184, 137, 46, 62, 66, 205, 184, 190, 222, 52, 218, 190, 133, 211, 85, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 44, 8, 60, 223, 24, 0, 190, 16, 143, 145, 190, 216, 253, 101, 62, 79, 181, 22, 191, 156, 41, 71, 61, 134, 133, 110, 60, 224, 52, 95, 62, 91, 193, 244, 61, 70, 201, 72, 190, 252, 170, 235, 61, 196, 44, 171, 62, 112, 121, 127, 190, 229, 129, 81, 63, 234, 246, 51, 61, 187, 111, 167, 190, 234, 0, 122, 61, 67, 216, 94, 189, 237, 117, 82, 190, 158, 22, 251, 189, 122, 74, 208, 61, 108, 116, 67, 191, 164, 95, 49, 62, 75, 222, 75, 189, 10, 5, 193, 61, 44, 233, 171, 62, 93, 106, 58, 191, 31, 146, 239, 61, 155, 222, 77, 189, 157, 194, 178, 61, 185, 53, 155, 190, 245, 163, 61, 61, 85, 210, 199, 189, 243, 45, 252, 189, 59, 15, 173, 189, 2, 217, 237, 61, 145, 8, 76, 191, 0, 116, 203, 191, 37, 36, 96, 62, 116, 4, 174, 62, 116, 164, 131, 188, 107, 46, 17, 63, 5, 222, 72, 189, 253, 149, 179, 62, 154, 232, 47, 191, 93, 139, 89, 62, 27, 7, 119, 62, 72, 51, 156, 62, 251, 45, 55, 62, 104, 26, 65, 190, 226, 128, 18, 191, 101, 176, 158, 190, 223, 127, 62, 62, 98, 81, 135, 191, 192, 145, 16, 62, 82, 80, 118, 190, 189, 85, 130, 62, 53, 109, 150, 62, 64, 228, 22, 190, 148, 193, 175, 62, 11, 6, 80, 62, 86, 30, 54, 62, 113, 199, 23, 191, 116, 181, 212, 190, 107, 4, 129, 190, 254, 50, 180, 190, 250, 95, 83, 61, 9, 113, 159, 189, 130, 108, 98, 61, 130, 129, 7, 61, 23, 137, 7, 189, 203, 160, 22, 61, 132, 157, 242, 61, 136, 14, 160, 190, 191, 223, 106, 62, 8, 213, 26, 191, 80, 214, 72, 191, 196, 88, 183, 189, 20, 245, 162, 62, 109, 120, 74, 61, 39, 31, 190, 189, 227, 108, 105, 62, 73, 45, 52, 62, 66, 238, 184, 189, 185, 113, 156, 61, 31, 13, 91, 190, 61, 51, 231, 61, 13, 171, 122, 62, 166, 88, 23, 189, 50, 210, 102, 62, 254, 100, 175, 62, 221, 44, 160, 191, 32, 40, 187, 62, 144, 235, 52, 62, 126, 23, 49, 190, 157, 173, 192, 61, 167, 51, 198, 61, 120, 6, 26, 190, 114, 126, 21, 190, 72, 67, 224, 187, 224, 189, 60, 190, 168, 21, 214, 189, 59, 174, 83, 59, 139, 109, 182, 189, 226, 1, 75, 61, 38, 119, 167, 189, 177, 124, 156, 60, 155, 71, 26, 189, 17, 28, 43, 190, 121, 195, 18, 62, 19, 54, 29, 59, 118, 59, 213, 59, 101, 97, 128, 60, 206, 161, 31, 189, 69, 31, 33, 62, 226, 160, 31, 190, 185, 127, 244, 189, 55, 90, 77, 189, 248, 74, 38, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 80, 252, 186, 61, 25, 255, 117, 61, 118, 231, 169, 189, 174, 153, 10, 190, 251, 215, 32, 190, 10, 77, 102, 189, 156, 31, 40, 190, 148, 90, 38, 190, 146, 135, 58, 190, 223, 102, 168, 61, 4, 212, 255, 188, 186, 117, 233, 61, 72, 145, 85, 62, 89, 150, 105, 61, 219, 200, 30, 63, 115, 76, 241, 189, 160, 108, 180, 189, 54, 221, 150, 60, 171, 142, 116, 62, 134, 161, 138, 59, 26, 253, 114, 190, 254, 0, 220, 189, 220, 76, 90, 191, 33, 177, 123, 62, 174, 225, 243, 61, 92, 60, 171, 189, 160, 38, 94, 62, 6, 221, 14, 62, 3, 177, 19, 191, 4, 206, 68, 62, 94, 113, 2, 191, 163, 59, 135, 191, 149, 131, 35, 190, 100, 253, 237, 61, 91, 124, 152, 190, 13, 64, 231, 60, 184, 232, 191, 62, 48, 208, 238, 59, 177, 77, 215, 61, 231, 26, 132, 62, 204, 6, 156, 190, 181, 202, 56, 62, 203, 90, 19, 190, 188, 116, 55, 190, 5, 224, 183, 189, 60, 13, 110, 191, 94, 62, 226, 61, 49, 189, 135, 191, 165, 125, 109, 62, 73, 14, 67, 189, 224, 169, 57, 189, 188, 134, 68, 190, 39, 173, 197, 60, 158, 46, 176, 189, 91, 56, 186, 61, 130, 67, 108, 190, 127, 96, 2, 63, 233, 118, 109, 62, 0, 18, 142, 189, 62, 99, 122, 187, 163, 73, 99, 60, 36, 230, 114, 190, 125, 6, 98, 189, 186, 86, 230, 59, 75, 55, 49, 190, 71, 142, 53, 62, 230, 21, 89, 189, 22, 192, 10, 189, 115, 43, 28, 63, 252, 182, 244, 61, 110, 168, 225, 189, 236, 200, 196, 189, 97, 239, 249, 188, 235, 115, 230, 61, 166, 86, 32, 62, 148, 8, 132, 189, 154, 70, 82, 61, 229, 124, 62, 190, 129, 162, 131, 189, 249, 42, 97, 190, 212, 96, 254, 61, 174, 216, 67, 190, 142, 89, 130, 191, 19, 122, 130, 187, 187, 136, 144, 62, 35, 15, 132, 189, 250, 226, 88, 190, 179, 30, 24, 62, 195, 240, 170, 189, 85, 22, 42, 62, 104, 254, 117, 62, 47, 18, 229, 61, 16, 32, 16, 190, 191, 134, 51, 62, 52, 91, 12, 190, 89, 74, 216, 61, 0, 199, 88, 61, 202, 176, 202, 190, 212, 250, 176, 62, 145, 128, 234, 61, 255, 225, 114, 62, 102, 175, 0, 190, 187, 45, 48, 62, 94, 8, 96, 62, 15, 207, 115, 191, 70, 244, 174, 62, 140, 74, 43, 62, 119, 60, 211, 61, 139, 98, 43, 62, 128, 0, 168, 190, 113, 152, 135, 61, 112, 156, 192, 190, 247, 19, 200, 62, 126, 254, 248, 61, 137, 108, 240, 189, 137, 205, 45, 190, 153, 246, 166, 60, 97, 35, 86, 190, 59, 248, 32, 190, 126, 133, 53, 62, 176, 243, 127, 62, 252, 158, 244, 61, 211, 116, 218, 61, 148, 174, 130, 62, 98, 41, 173, 189, 57, 111, 75, 62, 151, 84, 74, 62, 85, 103, 202, 190, 64, 143, 212, 190, 184, 146, 185, 61, 154, 81, 57, 61, 48, 42, 7, 189, 4, 85, 160, 62, 233, 79, 35, 188, 248, 191, 12, 190, 170, 226, 64, 62, 31, 140, 185, 61, 208, 116, 86, 190, 28, 167, 249, 60, 56, 57, 45, 62, 127, 177, 200, 59, 106, 157, 232, 189, 154, 204, 134, 62, 28, 12, 53, 62, 143, 154, 83, 62, 159, 215, 173, 190, 125, 84, 93, 190, 239, 156, 188, 190, 170, 115, 220, 62, 2, 27, 189, 189, 180, 207, 224, 189, 88, 71, 225, 189, 179, 181, 221, 62, 42, 71, 234, 62, 75, 26, 225, 62, 204, 157, 0, 61, 44, 244, 51, 60, 186, 40, 154, 61, 188, 191, 53, 61, 103, 212, 144, 62, 89, 110, 48, 189, 235, 248, 164, 190, 59, 38, 180, 62, 225, 238, 59, 190, 227, 11, 92, 60, 87, 231, 129, 188, 17, 230, 25, 191, 4, 12, 168, 190, 212, 54, 189, 190, 131, 14, 69, 189, 35, 247, 38, 191, 171, 177, 11, 191, 10, 52, 182, 61, 195, 189, 22, 189, 228, 216, 27, 190, 88, 44, 36, 190, 9, 65, 162, 61, 159, 134, 134, 62, 141, 178, 178, 191, 233, 204, 26, 63, 146, 32, 79, 62, 155, 222, 50, 62, 136, 139, 99, 62, 143, 201, 62, 62, 163, 96, 239, 189, 117, 189, 57, 191, 208, 169, 188, 60, 55, 60, 129, 191, 224, 73, 150, 62, 241, 48, 129, 190, 144, 245, 50, 62, 70, 172, 27, 63, 248, 238, 143, 61, 42, 216, 2, 62, 143, 95, 254, 189, 80, 208, 107, 189, 119, 57, 65, 191, 185, 55, 145, 191, 216, 237, 155, 190, 158, 216, 121, 188, 52, 133, 105, 62, 170, 185, 180, 190, 192, 45, 174, 61, 199, 213, 109, 62, 101, 220, 52, 60, 111, 29, 10, 62, 214, 108, 241, 189, 218, 186, 96, 188, 79, 66, 7, 62, 115, 193, 25, 190, 36, 254, 151, 191, 21, 161, 204, 189, 111, 61, 175, 61, 206, 210, 252, 61, 11, 215, 74, 59, 44, 255, 46, 62, 11, 185, 158, 188, 235, 209, 73, 190, 173, 234, 21, 62, 85, 18, 213, 189, 95, 236, 192, 188, 0, 90, 163, 62, 112, 36, 226, 61, 147, 144, 43, 62, 151, 141, 251, 59, 240, 35, 130, 191, 121, 135, 160, 62, 9, 61, 147, 190, 255, 217, 255, 190, 41, 24, 160, 188, 211, 88, 70, 62, 190, 74, 109, 60, 197, 173, 47, 191, 134, 65, 61, 62, 213, 144, 186, 62, 124, 85, 187, 188, 72, 22, 128, 62, 218, 107, 221, 190, 217, 147, 228, 61, 217, 173, 35, 191, 162, 236, 163, 62, 173, 232, 1, 62, 123, 200, 36, 62, 171, 57, 132, 190, 41, 204, 216, 189, 31, 134, 228, 190, 57, 102, 174, 189, 188, 248, 25, 62, 20, 189, 214, 62, 135, 221, 4, 62, 255, 215, 114, 62, 25, 194, 208, 62, 202, 238, 199, 61, 181, 226, 64, 62, 164, 33, 76, 62, 111, 2, 195, 190, 137, 28, 15, 191, 55, 155, 114, 189, 85, 219, 141, 190, 167, 254, 234, 189, 65, 126, 38, 63, 218, 118, 171, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 6, 74, 109, 62, 239, 186, 112, 190, 53, 201, 70, 61, 147, 40, 164, 60, 67, 3, 44, 62, 5, 40, 202, 188, 194, 75, 143, 189, 72, 53, 41, 62, 166, 84, 134, 62, 133, 213, 138, 62, 209, 158, 124, 190, 82, 31, 12, 62, 46, 201, 67, 62, 238, 210, 185, 61, 163, 244, 186, 190, 72, 127, 170, 189, 244, 173, 31, 191, 179, 49, 219, 189, 122, 234, 199, 191, 101, 186, 251, 62, 251, 23, 196, 62, 127, 141, 196, 188, 146, 46, 221, 190, 189, 117, 78, 62, 26, 136, 237, 62, 66, 32, 157, 189, 239, 90, 68, 61, 178, 24, 9, 188, 43, 66, 157, 62, 53, 16, 97, 190, 112, 135, 3, 62, 125, 84, 81, 191, 5, 198, 221, 189, 168, 179, 73, 190, 218, 122, 204, 190, 252, 65, 54, 190, 6, 184, 34, 191, 78, 61, 147, 191, 187, 28, 205, 190, 249, 208, 197, 62, 128, 116, 167, 190, 0, 135, 45, 63, 0, 33, 136, 189, 39, 222, 190, 61, 152, 250, 181, 190, 46, 233, 246, 61, 60, 106, 169, 58, 187, 230, 135, 62, 48, 199, 158, 62, 151, 107, 144, 191, 180, 138, 20, 191, 225, 29, 239, 190, 162, 227, 20, 62, 235, 129, 172, 191, 206, 197, 130, 62, 5, 136, 57, 189, 200, 246, 65, 62, 238, 166, 205, 62, 91, 96, 127, 62, 181, 91, 160, 62, 72, 121, 23, 62, 250, 75, 94, 190, 124, 245, 150, 191, 238, 140, 69, 190, 243, 246, 96, 62, 129, 43, 29, 62, 27, 236, 23, 191, 155, 192, 201, 62, 200, 83, 98, 62, 182, 132, 36, 62, 153, 119, 158, 62, 144, 220, 139, 190, 109, 120, 63, 61, 250, 240, 77, 191, 100, 193, 171, 62, 75, 212, 150, 190, 205, 199, 7, 62, 46, 221, 248, 190, 190, 61, 103, 60, 126, 54, 145, 190, 116, 63, 22, 190, 39, 174, 141, 62, 142, 184, 32, 63, 24, 138, 147, 62, 23, 145, 68, 61, 102, 87, 163, 62, 39, 15, 76, 60, 217, 189, 46, 62, 171, 231, 42, 62, 156, 87, 235, 190, 84, 208, 4, 191, 72, 14, 68, 190, 232, 0, 158, 190, 248, 65, 10, 191, 31, 85, 3, 63, 52, 197, 128, 62, 118, 76, 131, 190, 196, 195, 154, 190, 69, 4, 0, 190, 36, 123, 184, 62, 50, 91, 93, 190, 51, 115, 218, 191, 53, 120, 132, 190, 87, 103, 16, 63, 126, 166, 127, 190, 212, 109, 60, 63, 107, 35, 25, 61, 209, 20, 156, 62, 187, 147, 46, 191, 137, 47, 188, 62, 14, 151, 4, 189, 114, 110, 188, 62, 58, 57, 95, 62, 246, 178, 58, 191, 8, 31, 232, 190, 109, 160, 141, 190, 169, 149, 167, 62, 207, 221, 217, 191, 15, 79, 11, 62, 118, 244, 93, 189, 193, 214, 23, 63, 181, 250, 226, 62, 48, 26, 131, 62, 116, 15, 31, 62, 226, 233, 61, 61, 86, 45, 40, 62, 15, 104, 84, 191, 226, 123, 22, 190, 84, 36, 22, 62, 144, 108, 57, 61, 43, 63, 131, 188, 84, 203, 38, 61, 198, 254, 40, 191, 218, 90, 28, 191, 67, 217, 22, 190, 27, 11, 229, 189, 92, 57, 154, 61, 144, 100, 128, 62, 159, 176, 161, 190, 213, 233, 191, 62, 95, 226, 157, 190, 162, 27, 62, 62, 50, 220, 130, 61, 177, 182, 96, 190, 114, 139, 177, 62, 13, 133, 41, 190, 203, 206, 255, 190, 174, 29, 25, 190, 43, 80, 2, 190, 232, 78, 111, 191, 134, 224, 168, 62, 151, 105, 89, 190, 53, 139, 148, 60, 30, 163, 23, 62, 163, 77, 127, 188, 187, 126, 175, 62, 102, 166, 54, 61, 217, 96, 54, 62, 188, 132, 25, 191, 78, 69, 176, 61, 178, 22, 155, 61, 255, 78, 78, 189, 152, 218, 13, 190, 252, 224, 37, 190, 183, 228, 102, 61, 145, 46, 162, 189, 111, 238, 3, 62, 39, 186, 87, 187, 237, 255, 137, 189, 14, 244, 155, 61, 234, 231, 4, 60, 73, 77, 54, 187, 122, 159, 145, 189, 205, 22, 112, 189, 237, 177, 4, 62, 16, 64, 69, 189, 127, 57, 180, 189, 233, 25, 241, 189, 155, 35, 154, 189, 239, 115, 214, 189, 74, 205, 159, 188, 107, 218, 21, 190, 174, 236, 248, 60, 121, 251, 67, 188, 102, 11, 27, 190, 224, 197, 241, 61, 90, 55, 36, 189, 178, 26, 164, 189, 242, 216, 207, 189, 136, 49, 206, 189, 182, 28, 25, 61, 165, 131, 83, 188, 106, 38, 149, 62, 20, 196, 252, 188, 123, 209, 13, 189, 3, 182, 154, 190, 60, 251, 58, 190, 60, 109, 204, 190, 144, 177, 8, 190, 253, 241, 231, 62, 247, 157, 48, 190, 235, 115, 89, 190, 24, 21, 184, 62, 137, 66, 19, 191, 162, 221, 230, 62, 199, 135, 194, 61, 102, 103, 189, 62, 77, 54, 122, 62, 100, 218, 28, 190, 136, 33, 130, 190, 196, 32, 58, 63, 119, 77, 165, 60, 207, 229, 243, 190, 212, 127, 49, 191, 52, 60, 30, 190, 248, 246, 92, 61, 76, 80, 154, 62, 223, 232, 133, 189, 106, 96, 24, 188, 226, 226, 199, 190, 190, 192, 35, 189, 185, 228, 83, 61, 72, 225, 233, 189, 194, 217, 27, 190, 93, 124, 159, 189, 200, 50, 252, 189, 4, 233, 71, 189, 124, 224, 136, 61, 25, 135, 106, 62, 34, 187, 154, 188, 153, 183, 179, 60, 59, 150, 19, 189, 36, 244, 168, 190, 169, 98, 245, 189, 197, 133, 130, 62, 23, 69, 24, 190, 77, 39, 114, 191, 12, 38, 6, 62, 131, 130, 11, 62, 217, 235, 20, 189, 144, 178, 22, 191, 226, 85, 183, 62, 93, 34, 6, 61, 145, 41, 39, 62, 74, 23, 65, 62, 49, 36, 103, 61, 210, 32, 47, 190, 60, 0, 17, 61, 243, 107, 241, 61, 75, 65, 128, 62, 240, 146, 206, 189, 222, 215, 0, 190, 98, 223, 53, 62, 145, 57, 188, 62, 167, 216, 145, 62, 187, 244, 236, 188, 44, 176, 11, 190, 175, 44, 39, 188, 134, 204, 52, 191, 60, 182, 97, 62, 21, 180, 149, 62, 103, 235, 131, 62, 214, 63, 86, 189, 2, 91, 113, 190, 94, 131, 184, 61, 118, 64, 9, 191, 84, 172, 94, 61, 42, 237, 226, 61, 202, 126, 120, 60, 55, 253, 194, 189, 202, 11, 135, 60, 62, 210, 188, 190, 212, 142, 4, 190, 10, 24, 213, 61, 204, 107, 133, 61, 200, 227, 118, 62, 217, 87, 177, 61, 207, 29, 84, 62, 228, 247, 162, 61, 158, 74, 5, 61, 34, 47, 109, 189, 219, 140, 7, 190, 100, 104, 219, 190, 44, 232, 192, 189, 107, 154, 74, 61, 94, 106, 131, 189, 189, 100, 246, 62, 48, 58, 49, 62, 244, 228, 84, 190, 52, 209, 88, 190, 249, 168, 68, 190, 6, 48, 146, 61, 176, 143, 123, 191, 122, 184, 176, 190, 139, 70, 99, 191, 193, 86, 80, 63, 237, 187, 0, 62, 118, 15, 6, 63, 139, 50, 219, 61, 184, 197, 230, 62, 54, 140, 237, 190, 48, 5, 131, 187, 250, 158, 236, 61, 248, 168, 140, 62, 15, 235, 217, 62, 83, 65, 132, 190, 189, 205, 9, 191, 124, 173, 240, 190, 227, 180, 168, 62, 123, 91, 238, 191, 29, 228, 67, 62, 254, 55, 228, 188, 232, 63, 174, 62, 73, 118, 132, 62, 249, 40, 24, 191, 41, 100, 129, 62, 106, 236, 101, 62, 105, 22, 2, 62, 170, 170, 53, 191, 206, 194, 147, 190, 143, 5, 127, 190, 70, 51, 211, 189, 17, 37, 177, 60, 231, 247, 148, 190, 193, 242, 28, 62, 178, 55, 190, 188, 201, 133, 31, 62, 120, 250, 178, 189, 89, 172, 99, 190, 36, 123, 167, 190, 215, 121, 26, 62, 208, 12, 31, 191, 77, 87, 126, 191, 252, 72, 237, 61, 130, 5, 200, 62, 27, 115, 16, 62, 254, 202, 122, 190, 207, 103, 79, 61, 17, 41, 154, 62, 7, 163, 14, 62, 250, 5, 68, 61, 133, 19, 201, 187, 192, 4, 7, 190, 187, 91, 254, 189, 59, 105, 100, 190, 116, 185, 40, 61, 111, 15, 91, 61, 163, 155, 104, 191, 55, 205, 227, 61, 156, 29, 143, 62, 83, 191, 82, 61, 237, 202, 35, 62, 124, 167, 206, 190, 35, 65, 12, 60, 220, 91, 32, 191, 176, 254, 155, 61, 122, 44, 137, 190, 135, 217, 33, 191, 144, 144, 167, 188, 217, 144, 245, 191, 139, 5, 149, 61, 127, 148, 69, 191, 90, 121, 199, 62, 207, 172, 170, 190, 45, 18, 156, 190, 109, 190, 7, 190, 92, 117, 10, 62, 100, 216, 39, 62, 2, 80, 254, 190, 123, 175, 171, 61, 37, 3, 59, 62, 222, 214, 4, 63, 16, 54, 129, 189, 63, 105, 3, 191, 21, 64, 250, 61, 36, 102, 184, 189, 88, 157, 7, 190, 97, 44, 170, 190, 9, 185, 71, 190, 35, 125, 36, 190, 237, 99, 251, 189, 122, 170, 213, 60, 241, 181, 11, 63, 44, 81, 194, 61, 241, 133, 220, 61, 187, 177, 248, 61, 25, 215, 160, 190, 222, 187, 174, 190, 202, 193, 79, 190, 134, 243, 138, 62, 45, 201, 28, 189, 183, 244, 211, 61, 187, 45, 189, 61, 49, 86, 177, 190, 43, 186, 167, 60, 50, 211, 165, 62, 110, 46, 41, 189, 155, 184, 246, 190, 74, 120, 191, 188, 77, 177, 254, 189, 66, 114, 83, 189, 27, 155, 26, 62, 199, 6, 188, 189, 234, 93, 14, 190, 152, 35, 177, 61, 235, 155, 187, 190, 83, 21, 29, 189, 55, 231, 33, 62, 12, 4, 25, 190, 226, 230, 172, 62, 50, 162, 5, 191, 181, 197, 154, 61, 205, 61, 46, 190, 179, 163, 156, 190, 122, 101, 60, 191, 101, 203, 183, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 52, 141, 195, 61, 38, 224, 14, 62, 227, 18, 140, 61, 96, 104, 19, 191, 237, 96, 113, 62, 164, 222, 12, 191, 7, 112, 176, 190, 145, 38, 130, 62, 36, 147, 29, 63, 79, 155, 96, 190, 68, 132, 212, 61, 109, 71, 86, 61, 131, 239, 118, 190, 121, 165, 14, 61, 33, 228, 159, 62, 106, 63, 37, 62, 111, 226, 81, 62, 101, 231, 220, 189, 2, 191, 228, 60, 173, 64, 36, 190, 110, 95, 18, 189, 104, 109, 179, 191, 102, 196, 15, 61, 43, 103, 17, 189, 36, 234, 210, 188, 225, 212, 247, 187, 245, 109, 7, 63, 38, 94, 209, 189, 83, 182, 68, 190, 149, 225, 208, 189, 213, 58, 83, 189, 64, 21, 60, 62, 217, 78, 41, 190, 152, 39, 67, 189, 70, 1, 86, 62, 174, 238, 225, 189, 247, 62, 77, 60, 5, 14, 53, 62, 105, 11, 164, 189, 151, 184, 169, 190, 148, 204, 185, 189, 218, 223, 148, 190, 34, 165, 68, 188, 167, 214, 227, 190, 7, 53, 86, 191, 252, 116, 253, 190, 166, 248, 39, 62, 131, 243, 16, 190, 125, 46, 189, 189, 206, 45, 38, 61, 155, 159, 129, 61, 49, 4, 2, 61, 24, 214, 94, 61, 181, 81, 181, 190, 218, 58, 208, 186, 75, 138, 230, 62, 49, 227, 177, 190, 225, 235, 106, 62, 50, 40, 81, 190, 229, 53, 87, 191, 194, 192, 0, 62, 154, 252, 146, 190, 81, 138, 15, 190, 228, 14, 129, 61, 208, 44, 27, 190, 48, 82, 91, 190, 220, 80, 25, 190, 175, 209, 78, 191, 29, 96, 2, 62, 218, 18, 13, 190, 164, 126, 146, 190, 243, 62, 183, 62, 110, 171, 7, 63, 188, 67, 158, 190, 63, 240, 192, 61, 73, 146, 192, 189, 144, 60, 139, 189, 185, 14, 166, 190, 208, 151, 237, 61, 69, 0, 250, 62, 109, 67, 82, 187, 133, 229, 145, 189, 38, 195, 77, 59, 60, 58, 176, 190, 173, 210, 85, 189, 130, 197, 200, 191, 34, 8, 78, 62, 26, 130, 120, 190, 248, 140, 174, 189, 216, 184, 160, 62, 188, 217, 148, 62, 28, 99, 190, 189, 36, 163, 3, 61, 252, 80, 121, 189, 175, 230, 24, 190, 92, 135, 31, 62, 130, 98, 103, 61, 207, 23, 3, 62, 88, 113, 18, 63, 144, 210, 61, 191, 26, 213, 218, 188, 148, 184, 207, 189, 113, 249, 237, 190, 154, 135, 152, 61, 38, 173, 2, 63, 13, 88, 0, 63, 208, 210, 163, 189, 82, 238, 36, 188, 168, 150, 165, 189, 249, 183, 164, 62, 223, 23, 141, 61, 186, 217, 94, 62, 196, 13, 85, 62, 208, 76, 191, 190, 139, 10, 170, 190, 227, 242, 114, 61, 110, 93, 93, 61, 189, 58, 62, 189, 62, 113, 15, 62, 152, 235, 148, 190, 64, 214, 23, 62, 96, 208, 153, 62, 33, 131, 185, 62, 160, 186, 97, 190, 81, 134, 149, 62, 95, 158, 155, 190, 107, 1, 29, 189, 28, 248, 128, 190, 247, 97, 13, 190, 151, 179, 230, 61, 213, 188, 130, 61, 130, 112, 151, 62, 128, 114, 27, 56, 111, 8, 113, 61, 12, 170, 109, 62, 11, 134, 236, 188, 232, 146, 120, 191, 250, 16, 30, 62, 187, 123, 14, 191, 127, 139, 132, 189, 96, 181, 62, 191, 29, 73, 229, 61, 165, 143, 253, 189, 32, 148, 161, 187, 220, 29, 95, 62, 157, 254, 188, 60, 202, 12, 151, 59, 165, 129, 198, 61, 86, 122, 20, 190, 195, 79, 150, 61, 2, 79, 191, 62, 230, 80, 75, 190, 104, 63, 68, 189, 160, 74, 153, 190, 69, 167, 202, 61, 171, 96, 130, 188, 205, 81, 63, 190, 138, 238, 138, 62, 59, 234, 121, 62, 67, 36, 146, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 192, 10, 62, 208, 233, 192, 60, 17, 131, 73, 62, 175, 135, 233, 189, 255, 203, 103, 62, 149, 66, 218, 60, 115, 235, 218, 61, 230, 30, 82, 62, 137, 251, 154, 61, 70, 50, 128, 62, 175, 106, 132, 62, 79, 191, 204, 61, 5, 230, 7, 190, 53, 94, 61, 61, 106, 49, 106, 62, 189, 60, 3, 190, 26, 204, 9, 62, 195, 249, 87, 62, 102, 134, 183, 189, 97, 251, 7, 191, 119, 65, 53, 62, 95, 37, 75, 62, 208, 167, 175, 61, 127, 130, 131, 62, 44, 129, 150, 62, 180, 190, 30, 62, 69, 140, 13, 190, 211, 240, 85, 62, 63, 136, 4, 62, 8, 106, 235, 61, 127, 203, 188, 190, 202, 210, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 137, 76, 190, 197, 44, 170, 191, 243, 24, 0, 191, 38, 189, 235, 61, 10, 130, 224, 62, 165, 235, 72, 62, 171, 29, 83, 190, 95, 194, 143, 62, 100, 66, 136, 61, 0, 12, 243, 191, 145, 217, 242, 190, 91, 23, 219, 62, 254, 37, 150, 61, 237, 114, 143, 62, 102, 115, 104, 191, 203, 224, 45, 63, 171, 3, 167, 191, 36, 171, 153, 190, 107, 86, 9, 188, 225, 198, 142, 62, 190, 25, 159, 190, 232, 57, 107, 61, 226, 127, 134, 191, 103, 34, 172, 190, 253, 124, 138, 63, 79, 137, 243, 189, 92, 4, 8, 62, 187, 93, 137, 190, 145, 49, 137, 190, 40, 253, 233, 190, 154, 47, 207, 62, 218, 135, 131, 190, 243, 44, 128, 189, 107, 217, 43, 62, 9, 36, 241, 61, 156, 118, 150, 188, 210, 177, 92, 187, 58, 234, 34, 190, 121, 12, 129, 189, 177, 16, 63, 190, 165, 134, 174, 190, 11, 115, 125, 62, 98, 39, 197, 189, 81, 152, 229, 61, 206, 17, 245, 61, 61, 249, 24, 62, 127, 152, 46, 62, 37, 239, 49, 62, 204, 1, 206, 62, 114, 63, 156, 190, 1, 200, 144, 189, 225, 179, 87, 63, 66, 235, 174, 189, 142, 11, 32, 190, 143, 158, 143, 63, 215, 33, 193, 190, 2, 112, 237, 190, 18, 107, 28, 189, 144, 120, 64, 186, 134, 25, 17, 189, 126, 213, 26, 190, 171, 204, 207, 189, 15, 209, 100, 62, 39, 196, 186, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 60, 12, 62, 54, 210, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 126, 179, 62, 245, 196, 205, 190, 198, 8, 178, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {142, 223, 61, 63, 161, 44, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}