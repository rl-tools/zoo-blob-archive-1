// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 75, 1, 63, 57, 43, 162, 190, 197, 216, 16, 191, 139, 231, 238, 62, 170, 199, 15, 62, 215, 103, 28, 191, 145, 45, 14, 63, 182, 255, 21, 63, 128, 95, 154, 62, 57, 134, 194, 190, 102, 237, 157, 191, 52, 178, 51, 62, 248, 162, 248, 190, 205, 196, 45, 63, 165, 251, 64, 63, 114, 218, 96, 191, 133, 127, 103, 63, 2, 78, 157, 62, 212, 190, 237, 190, 178, 177, 76, 189, 68, 253, 148, 62, 173, 34, 160, 189, 19, 120, 197, 63, 116, 49, 15, 63, 48, 33, 57, 63, 72, 165, 86, 190, 33, 250, 10, 61, 32, 36, 131, 62, 112, 57, 129, 63, 215, 33, 40, 62, 6, 145, 93, 63, 25, 214, 10, 190, 242, 147, 83, 189, 110, 99, 150, 190, 83, 204, 137, 191, 230, 129, 35, 190, 169, 127, 244, 62, 145, 58, 146, 191, 250, 204, 219, 190, 141, 72, 221, 190, 148, 83, 44, 191, 22, 166, 233, 62, 243, 71, 57, 63, 8, 110, 0, 62, 130, 243, 236, 61, 107, 4, 41, 62, 119, 94, 153, 190, 205, 92, 7, 63, 73, 215, 36, 190, 74, 128, 19, 191, 112, 246, 226, 190, 139, 31, 11, 191, 252, 138, 218, 61, 54, 132, 120, 62, 183, 151, 99, 63, 82, 173, 3, 191, 157, 186, 97, 190, 122, 52, 74, 62, 186, 198, 105, 63, 127, 82, 154, 190, 239, 147, 78, 190, 116, 148, 88, 63, 69, 25, 180, 61, 133, 238, 38, 191, 211, 215, 195, 63, 49, 203, 213, 62, 114, 150, 201, 190, 14, 191, 101, 190, 96, 59, 218, 190, 141, 205, 249, 190, 139, 196, 127, 63, 96, 127, 118, 188, 30, 12, 233, 61, 125, 58, 85, 63, 52, 250, 196, 189, 38, 56, 125, 62, 182, 169, 92, 63, 17, 185, 245, 190, 181, 68, 137, 188, 41, 253, 219, 190, 240, 159, 61, 63, 183, 209, 27, 191, 143, 148, 135, 191, 243, 136, 216, 189, 244, 95, 22, 62, 184, 203, 114, 63, 255, 34, 3, 190, 247, 176, 239, 188, 171, 195, 252, 190, 170, 39, 54, 62, 123, 151, 75, 190, 159, 104, 111, 191, 203, 149, 72, 63, 216, 252, 69, 63, 97, 197, 130, 191, 216, 241, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 78, 198, 190, 9, 175, 153, 61, 184, 165, 101, 191, 185, 237, 197, 190, 198, 213, 195, 189, 142, 194, 167, 62, 132, 122, 66, 63, 48, 76, 92, 188, 216, 139, 125, 190, 219, 103, 98, 190, 231, 63, 66, 190, 92, 65, 146, 59, 153, 54, 217, 190, 46, 178, 201, 190, 154, 48, 218, 61, 113, 163, 246, 61, 129, 37, 63, 190, 30, 231, 54, 63, 87, 183, 177, 190, 118, 21, 193, 62, 27, 27, 197, 62, 128, 71, 145, 188, 244, 6, 27, 63, 17, 123, 74, 62, 235, 25, 81, 190, 180, 233, 45, 62, 77, 173, 221, 190, 124, 222, 244, 62, 98, 240, 34, 62, 39, 122, 194, 190, 75, 239, 223, 190, 23, 253, 134, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 26, 7, 59, 245, 32, 3, 190, 8, 173, 145, 190, 72, 180, 122, 62, 36, 122, 16, 191, 41, 139, 157, 188, 70, 88, 104, 61, 237, 100, 133, 62, 83, 225, 0, 62, 190, 210, 68, 190, 104, 71, 249, 61, 91, 102, 174, 62, 246, 93, 125, 190, 148, 164, 88, 63, 152, 115, 47, 61, 184, 107, 143, 190, 95, 245, 114, 61, 41, 196, 232, 188, 200, 236, 81, 190, 197, 180, 250, 189, 205, 139, 207, 61, 179, 103, 107, 191, 44, 157, 42, 62, 247, 214, 181, 188, 227, 196, 173, 61, 191, 196, 167, 62, 32, 196, 63, 191, 4, 230, 246, 61, 252, 20, 94, 189, 39, 129, 142, 61, 205, 18, 137, 190, 87, 34, 55, 61, 185, 68, 184, 189, 189, 8, 248, 189, 25, 109, 96, 189, 35, 105, 201, 61, 117, 65, 63, 191, 105, 138, 205, 191, 192, 37, 140, 62, 115, 248, 229, 62, 254, 55, 150, 188, 101, 128, 19, 63, 97, 252, 132, 189, 140, 220, 178, 62, 31, 223, 39, 191, 51, 35, 105, 62, 192, 213, 108, 62, 95, 112, 194, 62, 204, 246, 86, 62, 157, 51, 25, 190, 108, 90, 29, 191, 113, 43, 158, 190, 240, 119, 61, 62, 8, 155, 135, 191, 241, 20, 23, 62, 241, 101, 80, 190, 159, 14, 128, 62, 27, 205, 150, 62, 32, 142, 62, 190, 151, 98, 175, 62, 218, 111, 76, 62, 246, 114, 17, 62, 35, 218, 21, 191, 124, 108, 227, 190, 75, 57, 157, 190, 39, 93, 196, 190, 58, 27, 230, 61, 38, 171, 201, 189, 95, 39, 121, 61, 106, 74, 202, 186, 34, 111, 172, 187, 32, 120, 142, 61, 50, 82, 10, 62, 167, 39, 161, 190, 134, 66, 112, 62, 34, 5, 42, 191, 228, 126, 83, 191, 170, 66, 150, 189, 32, 169, 164, 62, 201, 119, 216, 61, 236, 37, 231, 189, 36, 84, 116, 62, 19, 144, 39, 62, 17, 53, 228, 189, 77, 33, 112, 61, 188, 231, 126, 190, 8, 106, 149, 61, 191, 240, 106, 62, 151, 170, 177, 189, 239, 219, 65, 62, 0, 99, 180, 62, 232, 134, 169, 191, 128, 167, 170, 62, 226, 115, 34, 62, 211, 84, 36, 190, 201, 223, 167, 61, 167, 51, 198, 61, 120, 6, 26, 190, 114, 126, 21, 190, 72, 67, 224, 187, 224, 189, 60, 190, 168, 21, 214, 189, 59, 174, 83, 59, 139, 109, 182, 189, 226, 1, 75, 61, 38, 119, 167, 189, 177, 124, 156, 60, 155, 71, 26, 189, 17, 28, 43, 190, 121, 195, 18, 62, 19, 54, 29, 59, 118, 59, 213, 59, 101, 97, 128, 60, 206, 161, 31, 189, 69, 31, 33, 62, 226, 160, 31, 190, 185, 127, 244, 189, 55, 90, 77, 189, 248, 74, 38, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 80, 252, 186, 61, 25, 255, 117, 61, 118, 231, 169, 189, 174, 153, 10, 190, 251, 215, 32, 190, 10, 77, 102, 189, 220, 132, 30, 190, 189, 22, 251, 189, 60, 220, 92, 190, 128, 91, 226, 61, 173, 24, 171, 188, 201, 166, 11, 62, 41, 220, 106, 62, 144, 53, 142, 61, 237, 93, 30, 63, 68, 181, 211, 189, 123, 103, 192, 189, 182, 215, 137, 60, 133, 141, 60, 62, 64, 75, 17, 60, 85, 78, 98, 190, 64, 249, 184, 189, 52, 160, 101, 191, 211, 28, 139, 62, 189, 97, 1, 62, 21, 13, 96, 61, 96, 183, 130, 62, 199, 81, 40, 62, 36, 213, 30, 191, 183, 46, 105, 62, 17, 156, 198, 190, 34, 147, 133, 191, 87, 235, 24, 190, 45, 69, 20, 62, 159, 183, 34, 190, 123, 191, 136, 61, 74, 185, 194, 62, 110, 49, 71, 61, 73, 3, 237, 61, 219, 140, 133, 62, 48, 62, 155, 190, 187, 172, 68, 62, 190, 54, 201, 189, 251, 227, 28, 190, 11, 251, 198, 189, 186, 154, 128, 191, 162, 123, 222, 61, 21, 72, 136, 191, 14, 25, 112, 62, 152, 199, 58, 189, 234, 212, 74, 189, 166, 205, 31, 190, 205, 250, 244, 60, 174, 8, 246, 189, 55, 20, 181, 61, 70, 175, 102, 190, 208, 54, 5, 63, 102, 168, 105, 62, 224, 66, 148, 189, 80, 176, 133, 188, 175, 29, 85, 60, 71, 43, 157, 190, 168, 255, 110, 189, 243, 137, 67, 60, 10, 72, 13, 190, 202, 55, 61, 62, 197, 158, 91, 189, 169, 86, 93, 188, 62, 182, 35, 63, 16, 36, 2, 62, 196, 189, 215, 189, 68, 96, 186, 189, 148, 192, 90, 186, 128, 32, 126, 61, 157, 140, 24, 62, 131, 114, 199, 189, 196, 100, 90, 61, 12, 177, 44, 190, 131, 100, 98, 189, 122, 152, 85, 190, 251, 227, 8, 62, 112, 97, 136, 190, 18, 164, 128, 191, 183, 144, 154, 188, 11, 104, 145, 62, 48, 19, 45, 189, 89, 163, 61, 190, 111, 234, 13, 62, 150, 25, 176, 189, 127, 83, 50, 62, 233, 46, 123, 62, 166, 134, 162, 61, 245, 63, 15, 190, 155, 130, 89, 62, 226, 218, 7, 190, 76, 120, 221, 61, 215, 167, 13, 61, 180, 31, 246, 190, 7, 55, 176, 62, 25, 15, 131, 61, 80, 72, 96, 62, 210, 21, 11, 190, 20, 78, 63, 62, 185, 180, 105, 62, 70, 187, 145, 191, 184, 2, 192, 62, 230, 44, 65, 62, 249, 71, 50, 62, 162, 252, 45, 62, 109, 239, 178, 190, 125, 239, 63, 61, 209, 218, 195, 190, 237, 133, 194, 62, 231, 38, 2, 62, 254, 27, 247, 189, 108, 110, 27, 190, 185, 143, 38, 60, 160, 168, 128, 190, 1, 166, 32, 190, 100, 118, 78, 62, 6, 154, 129, 62, 187, 123, 1, 62, 179, 125, 251, 61, 51, 240, 162, 62, 92, 169, 146, 189, 50, 92, 67, 62, 59, 113, 102, 62, 84, 132, 194, 190, 94, 195, 205, 190, 90, 217, 232, 61, 183, 26, 121, 61, 187, 115, 165, 57, 158, 99, 165, 62, 88, 84, 7, 188, 158, 212, 0, 190, 117, 109, 76, 62, 151, 164, 49, 61, 6, 55, 102, 190, 210, 163, 119, 60, 163, 55, 33, 62, 170, 82, 109, 189, 200, 120, 34, 190, 103, 29, 121, 62, 218, 118, 50, 62, 133, 22, 101, 62, 41, 230, 191, 190, 248, 213, 120, 190, 106, 74, 201, 190, 156, 101, 217, 62, 114, 220, 61, 190, 101, 132, 31, 190, 126, 45, 29, 190, 164, 9, 243, 62, 66, 234, 239, 62, 220, 58, 235, 62, 52, 154, 172, 60, 248, 201, 153, 187, 137, 76, 56, 61, 111, 232, 140, 61, 134, 53, 151, 62, 26, 6, 160, 189, 208, 118, 186, 190, 42, 177, 193, 62, 42, 184, 93, 190, 202, 182, 197, 188, 53, 211, 15, 185, 130, 45, 24, 191, 124, 121, 197, 190, 212, 54, 189, 190, 109, 137, 193, 188, 102, 35, 34, 191, 159, 96, 1, 191, 246, 119, 228, 61, 195, 189, 22, 189, 228, 216, 27, 190, 88, 44, 36, 190, 9, 65, 162, 61, 53, 175, 139, 62, 133, 67, 188, 191, 242, 200, 32, 63, 146, 32, 79, 62, 120, 84, 54, 62, 131, 170, 41, 62, 226, 11, 87, 62, 163, 96, 239, 189, 166, 107, 78, 191, 191, 192, 253, 187, 145, 195, 133, 191, 44, 166, 150, 62, 129, 102, 156, 190, 144, 245, 50, 62, 9, 19, 8, 63, 244, 33, 135, 59, 59, 58, 17, 62, 255, 36, 122, 190, 137, 224, 229, 189, 29, 12, 62, 191, 116, 76, 153, 191, 196, 223, 158, 190, 13, 181, 129, 188, 44, 2, 100, 62, 254, 41, 147, 190, 141, 30, 187, 61, 10, 141, 65, 62, 110, 127, 89, 61, 208, 135, 28, 62, 93, 89, 215, 189, 253, 246, 56, 188, 222, 148, 21, 62, 152, 220, 102, 190, 79, 72, 152, 191, 47, 113, 56, 189, 14, 48, 187, 61, 7, 103, 61, 62, 105, 203, 127, 60, 196, 35, 67, 62, 2, 156, 169, 188, 171, 143, 69, 190, 123, 122, 20, 62, 28, 152, 22, 190, 20, 52, 251, 188, 42, 104, 171, 62, 164, 240, 215, 61, 88, 234, 39, 62, 62, 126, 190, 60, 18, 60, 129, 191, 96, 173, 157, 62, 245, 29, 160, 190, 215, 22, 240, 190, 30, 116, 172, 188, 13, 226, 78, 62, 68, 131, 107, 60, 221, 227, 75, 191, 68, 102, 98, 62, 22, 253, 188, 62, 101, 246, 133, 59, 56, 22, 131, 62, 43, 14, 229, 190, 226, 102, 214, 61, 33, 6, 39, 191, 5, 4, 160, 62, 135, 138, 1, 62, 183, 97, 32, 62, 7, 90, 130, 190, 174, 78, 217, 189, 185, 128, 242, 190, 79, 235, 163, 189, 237, 126, 42, 62, 2, 181, 213, 62, 169, 173, 6, 62, 173, 6, 121, 62, 195, 252, 222, 62, 55, 217, 214, 61, 187, 106, 48, 62, 212, 49, 94, 62, 230, 108, 191, 190, 17, 138, 14, 191, 27, 137, 18, 189, 84, 129, 136, 190, 209, 51, 152, 189, 131, 125, 38, 63, 22, 160, 173, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 71, 105, 149, 62, 97, 141, 32, 190, 141, 65, 4, 61, 246, 197, 181, 60, 121, 215, 37, 62, 171, 171, 72, 59, 234, 31, 154, 189, 140, 131, 47, 62, 87, 41, 33, 62, 139, 146, 139, 62, 192, 200, 184, 190, 250, 205, 152, 61, 0, 49, 144, 62, 38, 53, 151, 61, 183, 111, 213, 190, 91, 181, 208, 189, 151, 199, 19, 191, 229, 6, 208, 189, 152, 99, 194, 191, 183, 164, 13, 63, 70, 206, 213, 62, 43, 127, 92, 59, 46, 100, 181, 190, 23, 252, 127, 62, 229, 48, 13, 63, 73, 59, 109, 187, 91, 230, 43, 61, 100, 163, 216, 187, 84, 12, 192, 62, 160, 103, 84, 190, 222, 81, 238, 61, 220, 6, 79, 191, 134, 234, 234, 189, 213, 165, 78, 190, 218, 122, 204, 190, 123, 195, 118, 189, 6, 184, 34, 191, 196, 48, 141, 191, 127, 136, 196, 190, 242, 134, 228, 62, 81, 177, 184, 190, 126, 59, 44, 63, 106, 54, 157, 189, 228, 252, 194, 61, 203, 184, 185, 190, 165, 76, 5, 62, 136, 40, 236, 188, 155, 228, 135, 62, 83, 216, 155, 62, 55, 107, 149, 191, 99, 179, 27, 191, 34, 65, 240, 190, 228, 235, 17, 62, 62, 217, 172, 191, 21, 255, 128, 62, 131, 228, 224, 188, 32, 55, 60, 62, 88, 168, 202, 62, 91, 96, 127, 62, 241, 64, 162, 62, 118, 151, 27, 62, 186, 104, 99, 190, 124, 245, 150, 191, 22, 177, 81, 190, 170, 222, 79, 62, 38, 39, 11, 62, 211, 38, 64, 191, 111, 5, 243, 62, 86, 252, 111, 62, 121, 180, 63, 62, 161, 25, 167, 62, 67, 88, 148, 190, 231, 237, 52, 61, 101, 20, 81, 191, 153, 249, 168, 62, 134, 250, 160, 190, 246, 95, 202, 61, 144, 204, 236, 190, 172, 221, 148, 60, 201, 216, 153, 190, 174, 167, 50, 190, 207, 242, 153, 62, 195, 37, 30, 63, 31, 216, 143, 62, 198, 241, 58, 61, 61, 139, 170, 62, 31, 76, 147, 187, 212, 163, 14, 62, 89, 76, 42, 62, 154, 47, 239, 190, 242, 188, 255, 190, 232, 141, 53, 190, 174, 186, 154, 190, 204, 63, 231, 190, 188, 125, 8, 63, 47, 85, 122, 62, 83, 104, 133, 190, 10, 221, 152, 190, 116, 112, 85, 189, 169, 42, 194, 62, 48, 239, 66, 190, 210, 232, 232, 191, 177, 221, 231, 190, 47, 251, 243, 62, 163, 104, 130, 190, 48, 176, 75, 63, 38, 21, 137, 61, 136, 216, 139, 62, 112, 71, 70, 191, 157, 73, 190, 62, 83, 255, 166, 188, 160, 226, 138, 62, 124, 20, 22, 62, 223, 6, 92, 191, 29, 191, 226, 190, 27, 65, 134, 190, 24, 125, 180, 62, 10, 180, 229, 191, 76, 106, 255, 61, 128, 36, 30, 189, 121, 14, 29, 63, 17, 32, 230, 62, 22, 24, 140, 62, 47, 225, 235, 61, 114, 156, 128, 61, 248, 53, 40, 62, 209, 64, 83, 191, 181, 219, 26, 190, 2, 54, 57, 62, 113, 116, 153, 61, 43, 63, 131, 188, 169, 157, 182, 60, 243, 35, 25, 191, 220, 196, 27, 191, 16, 152, 195, 190, 233, 32, 135, 190, 144, 230, 225, 187, 229, 226, 147, 62, 181, 0, 163, 190, 23, 194, 194, 62, 126, 137, 153, 190, 25, 139, 70, 62, 50, 46, 214, 60, 89, 130, 7, 191, 109, 237, 177, 62, 185, 197, 175, 190, 146, 97, 249, 190, 124, 180, 247, 189, 226, 107, 210, 189, 71, 78, 130, 191, 96, 230, 178, 62, 115, 9, 36, 190, 247, 233, 114, 61, 166, 19, 53, 62, 39, 15, 129, 189, 180, 115, 174, 62, 32, 206, 152, 61, 183, 105, 9, 62, 242, 117, 26, 191, 119, 35, 165, 61, 178, 22, 155, 61, 255, 78, 78, 189, 152, 218, 13, 190, 252, 224, 37, 190, 183, 228, 102, 61, 145, 46, 162, 189, 111, 238, 3, 62, 39, 186, 87, 187, 237, 255, 137, 189, 14, 244, 155, 61, 234, 231, 4, 60, 73, 77, 54, 187, 122, 159, 145, 189, 205, 22, 112, 189, 237, 177, 4, 62, 16, 64, 69, 189, 127, 57, 180, 189, 233, 25, 241, 189, 155, 35, 154, 189, 239, 115, 214, 189, 74, 205, 159, 188, 107, 218, 21, 190, 174, 236, 248, 60, 121, 251, 67, 188, 102, 11, 27, 190, 224, 197, 241, 61, 90, 55, 36, 189, 178, 26, 164, 189, 242, 216, 207, 189, 136, 49, 206, 189, 182, 28, 25, 61, 165, 131, 83, 188, 229, 219, 157, 62, 38, 5, 4, 189, 144, 119, 187, 189, 190, 168, 153, 190, 254, 163, 78, 190, 60, 109, 204, 190, 89, 4, 228, 189, 21, 30, 160, 62, 161, 68, 26, 190, 99, 70, 141, 190, 95, 201, 191, 62, 213, 106, 28, 191, 49, 33, 249, 62, 245, 204, 208, 61, 56, 51, 195, 62, 9, 171, 136, 62, 219, 99, 45, 190, 95, 254, 135, 190, 225, 70, 65, 63, 212, 226, 227, 59, 218, 34, 3, 191, 43, 111, 49, 191, 153, 172, 26, 190, 44, 237, 34, 61, 33, 183, 146, 62, 93, 106, 164, 189, 211, 129, 166, 60, 3, 56, 198, 190, 228, 165, 131, 189, 156, 106, 89, 61, 250, 114, 212, 189, 68, 42, 244, 189, 152, 197, 134, 189, 157, 226, 229, 189, 75, 251, 149, 188, 98, 193, 208, 60, 112, 186, 99, 62, 166, 254, 70, 189, 53, 109, 252, 60, 24, 237, 140, 188, 215, 139, 162, 190, 115, 223, 217, 189, 241, 71, 137, 62, 96, 246, 59, 190, 243, 136, 108, 191, 209, 234, 243, 61, 99, 193, 16, 62, 246, 87, 37, 188, 72, 88, 13, 191, 28, 218, 181, 62, 170, 191, 13, 61, 239, 221, 52, 62, 175, 150, 74, 62, 137, 250, 194, 60, 213, 211, 37, 190, 44, 221, 158, 61, 13, 31, 4, 62, 99, 137, 132, 62, 47, 30, 242, 189, 44, 98, 61, 190, 61, 207, 57, 62, 90, 122, 162, 62, 251, 238, 137, 62, 177, 240, 13, 189, 100, 195, 219, 189, 230, 210, 10, 60, 178, 133, 72, 191, 141, 151, 104, 62, 143, 155, 166, 62, 159, 191, 169, 62, 100, 244, 82, 189, 120, 7, 111, 190, 74, 132, 104, 61, 225, 176, 1, 191, 1, 8, 67, 61, 79, 86, 245, 61, 41, 29, 113, 60, 40, 33, 167, 189, 85, 217, 141, 186, 106, 201, 214, 190, 88, 98, 2, 190, 150, 31, 6, 62, 20, 201, 157, 61, 191, 167, 130, 62, 33, 136, 251, 61, 174, 204, 134, 62, 164, 43, 192, 61, 139, 194, 130, 60, 144, 135, 207, 188, 155, 224, 223, 189, 171, 56, 217, 190, 107, 103, 163, 189, 168, 243, 146, 61, 30, 196, 142, 189, 198, 126, 246, 62, 51, 174, 42, 62, 71, 255, 81, 190, 130, 57, 83, 190, 205, 213, 243, 189, 110, 148, 247, 61, 6, 101, 108, 191, 16, 224, 213, 190, 48, 103, 110, 191, 185, 239, 77, 63, 94, 56, 27, 62, 7, 67, 14, 63, 153, 219, 9, 62, 191, 163, 231, 62, 142, 67, 244, 190, 79, 200, 225, 58, 169, 141, 12, 62, 231, 47, 147, 62, 0, 138, 216, 62, 114, 229, 167, 190, 239, 102, 17, 191, 79, 27, 235, 190, 231, 91, 169, 62, 64, 176, 0, 192, 213, 215, 71, 62, 103, 159, 131, 187, 224, 140, 172, 62, 18, 129, 135, 62, 93, 17, 11, 191, 2, 28, 132, 62, 31, 213, 117, 62, 119, 104, 238, 61, 140, 46, 47, 191, 203, 52, 153, 190, 134, 57, 148, 190, 80, 153, 236, 189, 171, 223, 9, 61, 233, 222, 157, 190, 246, 1, 30, 62, 64, 187, 22, 189, 211, 113, 50, 62, 252, 221, 144, 189, 114, 104, 88, 190, 213, 239, 156, 190, 72, 60, 39, 62, 125, 238, 25, 191, 42, 210, 136, 191, 64, 135, 241, 61, 169, 150, 202, 62, 240, 110, 44, 62, 48, 160, 142, 190, 251, 223, 124, 61, 91, 203, 152, 62, 251, 188, 12, 62, 157, 193, 88, 61, 81, 72, 188, 188, 203, 180, 37, 190, 118, 135, 222, 189, 30, 35, 132, 190, 96, 190, 219, 60, 185, 126, 60, 61, 248, 141, 113, 191, 82, 160, 205, 61, 233, 0, 124, 62, 173, 131, 67, 61, 10, 29, 26, 62, 43, 181, 180, 190, 31, 171, 159, 60, 149, 113, 27, 191, 156, 58, 215, 61, 1, 170, 97, 190, 83, 162, 38, 191, 59, 12, 28, 189, 211, 2, 254, 191, 248, 255, 143, 61, 227, 226, 69, 191, 235, 11, 199, 62, 93, 202, 177, 190, 157, 223, 201, 190, 149, 11, 178, 189, 211, 245, 14, 62, 161, 87, 10, 62, 208, 220, 233, 190, 192, 81, 159, 61, 39, 165, 58, 62, 103, 175, 5, 63, 197, 82, 125, 189, 85, 25, 9, 191, 136, 215, 6, 62, 119, 167, 106, 190, 136, 141, 8, 190, 165, 177, 160, 190, 211, 78, 20, 190, 103, 31, 38, 190, 49, 232, 226, 189, 234, 45, 132, 61, 120, 16, 23, 63, 201, 18, 197, 61, 61, 93, 204, 61, 129, 149, 235, 61, 25, 215, 160, 190, 32, 91, 182, 190, 253, 162, 88, 190, 177, 203, 175, 61, 15, 142, 177, 188, 67, 206, 233, 61, 117, 47, 200, 61, 15, 164, 179, 190, 168, 139, 215, 60, 106, 52, 163, 62, 182, 209, 46, 189, 150, 250, 1, 191, 180, 69, 212, 188, 63, 120, 170, 189, 196, 90, 107, 189, 86, 241, 19, 62, 245, 106, 187, 189, 229, 181, 19, 190, 120, 132, 157, 61, 210, 94, 15, 191, 44, 203, 90, 189, 241, 235, 43, 62, 32, 177, 41, 190, 76, 67, 166, 62, 190, 240, 4, 191, 100, 49, 121, 61, 19, 68, 56, 190, 74, 50, 163, 190, 68, 91, 51, 191, 155, 155, 188, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 88, 122, 178, 61, 83, 124, 14, 62, 128, 227, 146, 60, 108, 115, 253, 190, 82, 224, 120, 62, 149, 66, 18, 191, 9, 12, 151, 190, 255, 253, 157, 62, 55, 190, 30, 63, 30, 209, 84, 190, 207, 86, 222, 61, 126, 201, 159, 61, 157, 100, 103, 190, 88, 228, 115, 61, 169, 18, 160, 62, 235, 67, 87, 62, 201, 64, 81, 62, 114, 169, 140, 189, 155, 123, 216, 60, 16, 163, 30, 190, 23, 15, 1, 189, 179, 205, 194, 191, 220, 219, 10, 61, 34, 217, 74, 60, 136, 130, 185, 188, 110, 179, 66, 188, 133, 143, 11, 63, 28, 241, 155, 189, 59, 171, 65, 190, 210, 4, 143, 189, 147, 184, 203, 188, 203, 75, 59, 62, 108, 57, 43, 190, 19, 204, 56, 189, 70, 1, 86, 62, 174, 238, 225, 189, 105, 136, 138, 60, 161, 25, 179, 188, 179, 51, 37, 189, 171, 157, 168, 190, 184, 18, 171, 189, 51, 153, 151, 190, 57, 188, 106, 187, 241, 43, 245, 190, 121, 40, 89, 191, 252, 116, 253, 190, 155, 38, 39, 62, 185, 76, 199, 189, 134, 21, 181, 189, 96, 125, 102, 61, 17, 143, 132, 61, 148, 9, 24, 61, 19, 75, 94, 61, 71, 201, 19, 191, 100, 175, 94, 187, 177, 51, 244, 62, 137, 65, 179, 190, 17, 201, 103, 62, 68, 237, 141, 190, 118, 92, 78, 191, 216, 158, 252, 61, 154, 252, 146, 190, 16, 161, 36, 190, 112, 45, 128, 61, 245, 235, 90, 190, 232, 0, 99, 190, 2, 226, 17, 190, 60, 168, 90, 191, 154, 48, 206, 61, 61, 148, 26, 190, 42, 9, 126, 190, 74, 1, 233, 62, 193, 220, 8, 63, 212, 243, 147, 190, 72, 118, 203, 61, 122, 35, 251, 189, 89, 64, 192, 189, 100, 247, 187, 190, 31, 206, 241, 61, 187, 195, 6, 63, 55, 111, 9, 189, 227, 117, 39, 189, 1, 89, 6, 187, 127, 172, 172, 190, 118, 29, 23, 189, 172, 206, 207, 191, 100, 64, 62, 62, 146, 139, 120, 189, 81, 65, 115, 189, 117, 240, 156, 62, 95, 221, 131, 62, 116, 193, 3, 190, 72, 5, 16, 61, 246, 165, 211, 189, 168, 156, 61, 190, 59, 216, 22, 62, 143, 27, 166, 61, 217, 19, 33, 62, 96, 34, 27, 63, 59, 173, 83, 191, 212, 230, 17, 189, 252, 124, 207, 189, 143, 15, 0, 191, 231, 246, 11, 61, 151, 47, 6, 63, 210, 20, 253, 62, 179, 88, 142, 189, 195, 216, 29, 61, 19, 227, 30, 189, 138, 100, 176, 62, 237, 38, 179, 61, 231, 44, 55, 62, 2, 209, 112, 62, 128, 102, 203, 190, 179, 250, 150, 190, 150, 180, 148, 61, 160, 193, 95, 61, 122, 213, 68, 189, 220, 169, 49, 62, 186, 139, 174, 190, 25, 32, 20, 62, 195, 171, 166, 62, 134, 106, 199, 62, 153, 44, 55, 190, 98, 86, 153, 62, 34, 240, 136, 190, 195, 114, 157, 187, 63, 58, 87, 190, 187, 119, 6, 190, 88, 63, 159, 61, 50, 87, 205, 61, 55, 91, 141, 62, 165, 99, 98, 60, 42, 67, 136, 61, 144, 192, 108, 62, 204, 215, 83, 188, 192, 103, 113, 191, 121, 179, 41, 62, 255, 212, 45, 191, 251, 156, 204, 189, 103, 245, 62, 191, 194, 189, 242, 61, 92, 8, 3, 190, 220, 68, 187, 186, 175, 13, 90, 62, 81, 107, 169, 60, 220, 123, 102, 187, 229, 80, 3, 190, 95, 238, 12, 190, 38, 102, 182, 61, 223, 155, 174, 62, 6, 101, 26, 190, 111, 102, 15, 190, 117, 10, 203, 190, 97, 102, 219, 61, 193, 85, 127, 189, 133, 19, 162, 190, 6, 153, 130, 62, 199, 58, 130, 62, 239, 105, 151, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 135, 12, 62, 26, 100, 116, 60, 195, 144, 67, 62, 175, 135, 233, 189, 197, 190, 136, 62, 230, 71, 234, 60, 169, 13, 218, 61, 238, 28, 85, 62, 177, 243, 153, 61, 41, 3, 134, 62, 183, 127, 135, 62, 217, 202, 213, 61, 5, 230, 7, 190, 139, 38, 61, 61, 91, 223, 104, 62, 151, 13, 1, 190, 116, 34, 24, 62, 42, 68, 86, 62, 102, 134, 183, 189, 107, 114, 5, 191, 233, 118, 58, 62, 76, 210, 76, 62, 210, 85, 192, 61, 6, 1, 133, 62, 37, 74, 151, 62, 133, 211, 25, 62, 69, 140, 13, 190, 90, 215, 94, 62, 132, 233, 7, 62, 138, 58, 244, 61, 114, 232, 179, 190, 132, 216, 83, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 76, 37, 190, 55, 211, 175, 191, 14, 216, 0, 191, 38, 189, 235, 61, 20, 24, 231, 62, 89, 188, 77, 62, 30, 132, 65, 190, 126, 38, 145, 62, 80, 107, 138, 61, 227, 4, 250, 191, 201, 104, 234, 190, 51, 214, 218, 62, 254, 37, 150, 61, 182, 217, 154, 62, 36, 122, 99, 191, 140, 214, 39, 63, 107, 84, 183, 191, 225, 199, 161, 190, 107, 86, 9, 188, 96, 142, 148, 62, 253, 205, 147, 190, 52, 131, 147, 61, 160, 65, 140, 191, 201, 88, 173, 190, 126, 123, 138, 63, 95, 11, 160, 189, 92, 4, 8, 62, 16, 208, 134, 190, 98, 80, 116, 190, 179, 151, 233, 190, 146, 81, 213, 62, 239, 79, 134, 190, 191, 38, 199, 189, 40, 129, 116, 62, 16, 210, 206, 61, 156, 118, 150, 188, 170, 206, 192, 59, 94, 13, 72, 190, 89, 59, 125, 189, 58, 56, 115, 190, 7, 248, 199, 190, 53, 214, 56, 62, 19, 92, 208, 189, 128, 149, 135, 61, 206, 17, 245, 61, 0, 56, 24, 62, 111, 132, 69, 62, 95, 223, 3, 62, 128, 69, 198, 62, 3, 223, 164, 190, 1, 200, 144, 189, 188, 232, 125, 63, 139, 33, 205, 189, 246, 144, 73, 190, 198, 180, 149, 63, 95, 21, 188, 190, 24, 100, 205, 190, 21, 10, 142, 189, 144, 120, 64, 186, 17, 52, 70, 188, 87, 240, 126, 190, 99, 174, 156, 189, 53, 44, 108, 62, 157, 130, 139, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 234, 10, 62, 168, 73, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {107, 113, 46, 189, 43, 5, 190, 191, 253, 167, 175, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 36, 55, 64, 224, 40, 150, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}