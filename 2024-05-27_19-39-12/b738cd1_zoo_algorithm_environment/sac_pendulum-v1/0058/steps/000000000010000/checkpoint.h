// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 64, 214, 62, 228, 228, 74, 190, 55, 44, 23, 191, 244, 197, 207, 62, 235, 141, 140, 62, 192, 26, 33, 191, 119, 84, 147, 189, 190, 27, 146, 62, 4, 171, 177, 62, 27, 52, 162, 190, 57, 192, 135, 191, 213, 206, 131, 62, 175, 209, 250, 190, 92, 156, 155, 62, 86, 50, 67, 63, 199, 24, 205, 190, 188, 75, 111, 63, 38, 49, 170, 62, 108, 220, 39, 191, 64, 165, 21, 190, 174, 245, 223, 62, 97, 252, 151, 189, 74, 129, 174, 63, 204, 161, 3, 63, 68, 242, 88, 63, 209, 173, 37, 190, 52, 185, 225, 61, 94, 27, 96, 62, 81, 162, 97, 63, 181, 98, 226, 61, 195, 152, 91, 63, 117, 166, 5, 62, 29, 43, 215, 189, 89, 12, 145, 190, 249, 57, 115, 191, 190, 226, 52, 189, 4, 202, 1, 63, 179, 82, 138, 191, 33, 0, 202, 190, 24, 109, 191, 190, 104, 107, 78, 191, 84, 146, 232, 62, 212, 247, 77, 63, 13, 107, 183, 61, 33, 69, 132, 189, 150, 97, 10, 62, 59, 231, 129, 190, 162, 60, 255, 62, 131, 99, 129, 190, 69, 12, 218, 190, 11, 69, 242, 190, 182, 112, 217, 190, 30, 107, 136, 62, 39, 131, 128, 62, 94, 3, 82, 63, 242, 183, 194, 190, 54, 243, 114, 190, 121, 128, 31, 62, 224, 141, 116, 63, 42, 45, 158, 190, 69, 62, 55, 190, 194, 225, 63, 63, 55, 184, 151, 188, 192, 252, 37, 191, 162, 192, 93, 63, 110, 66, 6, 63, 31, 160, 135, 190, 181, 84, 106, 190, 211, 153, 234, 190, 126, 147, 149, 190, 253, 85, 131, 63, 74, 219, 128, 61, 117, 4, 56, 62, 149, 75, 57, 63, 93, 80, 242, 189, 1, 64, 155, 62, 77, 249, 93, 63, 33, 73, 248, 190, 114, 101, 188, 189, 166, 21, 3, 191, 55, 80, 63, 63, 221, 201, 16, 191, 39, 170, 121, 191, 123, 225, 121, 189, 10, 231, 86, 62, 139, 225, 115, 63, 108, 38, 24, 190, 185, 183, 183, 59, 7, 150, 65, 191, 124, 155, 243, 61, 221, 130, 147, 190, 191, 49, 118, 191, 118, 113, 77, 63, 40, 165, 73, 63, 71, 121, 68, 191, 92, 15, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 0, 176, 190, 125, 221, 165, 61, 52, 48, 70, 191, 24, 235, 216, 190, 154, 203, 141, 61, 212, 180, 183, 62, 185, 173, 8, 63, 168, 61, 110, 189, 87, 0, 41, 189, 16, 92, 132, 190, 96, 188, 14, 190, 227, 99, 148, 61, 124, 232, 186, 190, 8, 29, 191, 190, 186, 28, 70, 62, 93, 204, 64, 62, 248, 217, 169, 190, 165, 225, 32, 63, 112, 230, 142, 190, 117, 169, 201, 62, 255, 119, 213, 62, 179, 186, 175, 58, 115, 191, 45, 63, 156, 37, 148, 62, 120, 190, 207, 189, 85, 244, 45, 62, 169, 185, 43, 190, 217, 58, 240, 62, 51, 117, 32, 62, 193, 128, 81, 190, 232, 48, 173, 190, 13, 193, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 185, 13, 60, 45, 199, 254, 189, 16, 143, 145, 190, 185, 177, 223, 61, 197, 183, 194, 190, 174, 238, 143, 59, 153, 148, 68, 190, 202, 124, 232, 62, 68, 154, 1, 62, 153, 33, 45, 61, 126, 62, 39, 62, 59, 121, 98, 62, 205, 151, 143, 190, 37, 191, 230, 62, 4, 165, 6, 62, 123, 115, 89, 190, 148, 211, 87, 60, 236, 214, 114, 190, 106, 183, 66, 190, 255, 105, 226, 189, 204, 109, 10, 62, 190, 124, 5, 191, 194, 77, 3, 62, 76, 153, 143, 189, 113, 68, 95, 62, 220, 54, 183, 62, 35, 110, 29, 191, 224, 83, 74, 60, 45, 180, 158, 60, 41, 179, 160, 59, 97, 219, 53, 191, 109, 214, 34, 61, 156, 138, 121, 189, 132, 173, 201, 189, 165, 71, 242, 189, 143, 236, 215, 189, 153, 203, 242, 190, 84, 243, 143, 191, 16, 250, 207, 61, 133, 165, 119, 189, 138, 171, 1, 61, 226, 129, 176, 62, 82, 233, 72, 187, 2, 171, 110, 62, 121, 207, 30, 191, 231, 4, 121, 62, 138, 76, 140, 62, 146, 80, 132, 62, 173, 119, 101, 62, 147, 83, 37, 190, 146, 138, 205, 190, 117, 139, 159, 190, 247, 228, 31, 62, 230, 216, 231, 190, 96, 74, 26, 62, 198, 163, 171, 190, 107, 218, 121, 62, 203, 217, 160, 62, 91, 141, 163, 61, 33, 172, 130, 62, 20, 20, 75, 62, 245, 24, 248, 61, 71, 227, 5, 191, 11, 91, 196, 190, 139, 208, 85, 190, 49, 119, 181, 190, 166, 0, 187, 186, 91, 92, 4, 190, 200, 5, 138, 61, 20, 90, 21, 62, 39, 12, 44, 189, 79, 119, 56, 61, 181, 229, 196, 60, 30, 36, 145, 190, 255, 34, 89, 62, 146, 74, 153, 190, 215, 56, 149, 190, 122, 161, 173, 189, 58, 68, 150, 62, 197, 232, 55, 189, 168, 168, 100, 190, 241, 220, 101, 62, 212, 59, 81, 62, 21, 222, 33, 190, 143, 185, 223, 60, 85, 218, 207, 189, 185, 98, 67, 61, 149, 17, 56, 62, 145, 83, 215, 189, 97, 33, 82, 62, 61, 122, 142, 62, 13, 33, 134, 191, 46, 217, 151, 62, 180, 198, 168, 58, 197, 172, 73, 190, 31, 105, 242, 61, 167, 51, 198, 61, 168, 140, 23, 190, 114, 126, 21, 190, 200, 158, 128, 59, 40, 94, 19, 190, 45, 43, 208, 189, 173, 47, 204, 60, 125, 205, 56, 189, 77, 174, 156, 61, 118, 173, 133, 189, 217, 171, 57, 61, 84, 162, 67, 189, 161, 218, 49, 190, 253, 172, 32, 62, 88, 96, 244, 60, 226, 186, 5, 61, 101, 97, 128, 60, 232, 31, 236, 187, 156, 38, 34, 62, 27, 85, 30, 190, 28, 22, 218, 189, 253, 249, 67, 189, 30, 79, 40, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 247, 3, 240, 61, 189, 254, 82, 61, 41, 152, 168, 189, 33, 36, 251, 189, 38, 8, 13, 190, 14, 0, 91, 189, 187, 177, 89, 61, 9, 209, 147, 189, 241, 42, 74, 190, 75, 49, 44, 62, 178, 169, 53, 189, 179, 162, 234, 60, 49, 210, 79, 62, 245, 37, 44, 189, 201, 97, 11, 63, 245, 176, 176, 190, 50, 248, 38, 190, 73, 213, 133, 61, 56, 47, 211, 62, 60, 44, 11, 61, 179, 112, 197, 190, 42, 119, 1, 190, 138, 140, 214, 190, 19, 91, 97, 62, 24, 110, 26, 189, 241, 56, 50, 190, 61, 105, 159, 187, 146, 223, 160, 60, 139, 240, 136, 190, 183, 52, 7, 61, 224, 48, 235, 190, 151, 39, 151, 191, 77, 33, 35, 190, 176, 122, 62, 62, 173, 143, 237, 190, 143, 245, 169, 61, 216, 185, 202, 62, 196, 86, 173, 189, 21, 60, 21, 62, 47, 255, 150, 62, 114, 223, 86, 190, 0, 82, 42, 62, 124, 180, 131, 189, 104, 8, 139, 61, 5, 82, 180, 188, 107, 197, 47, 191, 10, 99, 84, 61, 15, 150, 104, 191, 187, 121, 4, 62, 37, 115, 50, 60, 231, 206, 71, 61, 164, 183, 10, 190, 217, 34, 190, 189, 227, 253, 219, 189, 59, 175, 49, 62, 114, 206, 200, 189, 71, 203, 208, 62, 13, 20, 140, 62, 150, 144, 114, 189, 177, 130, 164, 61, 253, 174, 161, 61, 211, 160, 160, 189, 142, 148, 3, 190, 246, 59, 41, 61, 158, 239, 255, 189, 135, 87, 116, 62, 248, 28, 150, 189, 222, 227, 163, 187, 33, 75, 44, 63, 121, 245, 113, 61, 252, 37, 98, 189, 223, 8, 183, 189, 29, 185, 16, 189, 249, 171, 254, 61, 159, 43, 254, 61, 46, 240, 152, 189, 161, 185, 62, 61, 93, 117, 51, 190, 237, 123, 203, 189, 172, 149, 30, 190, 228, 48, 31, 62, 79, 19, 129, 62, 145, 224, 217, 190, 246, 85, 10, 61, 84, 121, 162, 62, 211, 1, 200, 189, 55, 37, 165, 190, 183, 9, 225, 61, 209, 245, 233, 58, 187, 46, 212, 61, 2, 189, 43, 62, 88, 26, 27, 62, 199, 240, 93, 190, 4, 43, 193, 61, 33, 175, 23, 190, 94, 101, 216, 61, 144, 202, 26, 61, 130, 30, 64, 190, 22, 33, 150, 62, 59, 181, 24, 62, 197, 210, 135, 62, 111, 231, 60, 187, 217, 21, 72, 62, 190, 0, 114, 62, 122, 176, 62, 191, 223, 187, 135, 62, 227, 156, 55, 62, 37, 242, 148, 61, 58, 221, 74, 62, 188, 244, 151, 190, 248, 172, 75, 62, 96, 88, 156, 190, 85, 81, 207, 62, 68, 56, 37, 62, 167, 68, 53, 189, 154, 54, 74, 190, 15, 45, 241, 60, 193, 91, 21, 190, 241, 251, 173, 189, 60, 163, 108, 62, 11, 210, 108, 62, 172, 148, 8, 62, 106, 54, 145, 61, 86, 84, 16, 62, 128, 141, 120, 188, 26, 0, 71, 62, 35, 125, 135, 61, 246, 80, 203, 190, 104, 147, 189, 190, 201, 171, 254, 61, 226, 236, 251, 187, 222, 180, 133, 189, 112, 251, 169, 62, 169, 208, 7, 188, 126, 255, 110, 190, 144, 110, 237, 61, 58, 172, 242, 60, 67, 253, 143, 189, 184, 2, 137, 60, 211, 239, 113, 62, 89, 42, 8, 62, 23, 207, 37, 189, 188, 201, 146, 62, 229, 226, 45, 61, 20, 104, 98, 62, 165, 28, 123, 190, 124, 36, 203, 189, 26, 104, 135, 190, 111, 232, 188, 62, 170, 43, 187, 189, 64, 233, 17, 190, 97, 157, 113, 61, 107, 67, 196, 62, 152, 75, 191, 62, 72, 19, 178, 62, 99, 9, 157, 60, 68, 163, 100, 188, 73, 79, 170, 61, 92, 30, 0, 190, 15, 126, 88, 62, 37, 233, 43, 60, 15, 221, 70, 190, 92, 191, 88, 62, 143, 206, 19, 60, 113, 51, 238, 61, 126, 52, 18, 188, 248, 252, 10, 191, 38, 49, 166, 190, 212, 54, 189, 190, 30, 223, 128, 189, 71, 44, 10, 191, 234, 44, 78, 191, 244, 214, 48, 61, 195, 189, 22, 189, 123, 117, 213, 189, 88, 44, 36, 190, 9, 65, 162, 61, 22, 115, 129, 62, 101, 74, 169, 191, 217, 75, 29, 63, 146, 32, 79, 62, 175, 163, 144, 62, 15, 65, 130, 62, 29, 58, 242, 61, 163, 96, 239, 189, 59, 165, 84, 191, 147, 159, 178, 189, 164, 185, 132, 191, 222, 239, 108, 62, 97, 217, 233, 190, 144, 245, 50, 62, 103, 186, 3, 63, 145, 157, 146, 62, 182, 192, 197, 61, 42, 138, 130, 190, 95, 117, 193, 188, 92, 213, 54, 191, 44, 32, 130, 191, 183, 127, 66, 190, 186, 137, 212, 60, 39, 192, 143, 62, 35, 255, 248, 189, 175, 161, 212, 61, 96, 161, 73, 62, 218, 250, 241, 59, 90, 252, 6, 62, 6, 163, 72, 190, 202, 221, 214, 59, 139, 24, 234, 61, 28, 63, 36, 190, 179, 12, 65, 191, 76, 55, 88, 61, 132, 52, 163, 61, 142, 243, 150, 61, 14, 85, 12, 61, 151, 91, 174, 61, 206, 106, 142, 185, 14, 155, 102, 190, 198, 230, 94, 61, 200, 1, 201, 189, 143, 202, 138, 189, 204, 48, 76, 62, 190, 14, 38, 62, 129, 80, 85, 62, 199, 255, 129, 61, 119, 60, 182, 191, 82, 154, 155, 62, 75, 16, 45, 62, 62, 124, 179, 190, 217, 250, 1, 189, 222, 230, 30, 62, 146, 69, 20, 58, 92, 192, 24, 191, 180, 170, 206, 61, 87, 229, 174, 62, 124, 159, 211, 188, 5, 45, 87, 62, 216, 99, 233, 190, 219, 169, 8, 62, 80, 50, 24, 191, 253, 161, 153, 62, 175, 127, 10, 62, 90, 180, 31, 62, 216, 252, 154, 190, 95, 211, 5, 190, 12, 239, 246, 190, 195, 235, 173, 189, 188, 227, 53, 62, 129, 189, 176, 62, 1, 170, 5, 62, 109, 22, 92, 62, 116, 73, 163, 62, 119, 91, 251, 61, 222, 231, 61, 62, 37, 173, 223, 61, 64, 94, 204, 190, 28, 221, 15, 191, 213, 46, 112, 189, 174, 186, 163, 190, 174, 137, 89, 190, 87, 192, 36, 63, 47, 153, 132, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 59, 143, 156, 62, 205, 9, 170, 190, 94, 128, 135, 61, 28, 5, 32, 62, 2, 64, 121, 62, 75, 75, 108, 188, 172, 25, 179, 60, 25, 105, 8, 62, 163, 190, 252, 62, 70, 213, 254, 61, 52, 42, 138, 190, 214, 205, 222, 61, 248, 13, 128, 62, 226, 153, 31, 62, 140, 121, 178, 190, 34, 102, 72, 61, 235, 233, 150, 190, 245, 8, 244, 188, 73, 116, 136, 191, 1, 140, 233, 62, 113, 159, 172, 62, 242, 217, 17, 189, 162, 207, 141, 190, 48, 228, 37, 62, 4, 74, 195, 62, 60, 92, 83, 190, 133, 45, 23, 62, 244, 217, 5, 62, 103, 179, 132, 62, 210, 155, 159, 189, 68, 170, 77, 62, 125, 22, 47, 191, 146, 230, 202, 189, 7, 253, 73, 190, 218, 122, 204, 190, 150, 158, 28, 188, 245, 230, 34, 191, 133, 8, 80, 191, 232, 98, 187, 190, 74, 8, 195, 61, 171, 103, 166, 190, 244, 178, 187, 62, 56, 223, 118, 189, 40, 181, 2, 62, 120, 251, 155, 190, 63, 120, 8, 62, 208, 240, 157, 187, 81, 170, 185, 62, 221, 151, 172, 62, 84, 229, 75, 191, 182, 89, 227, 190, 172, 49, 251, 190, 232, 22, 12, 62, 135, 177, 154, 191, 90, 76, 139, 62, 199, 244, 233, 189, 102, 216, 76, 62, 209, 50, 202, 62, 23, 67, 124, 62, 135, 120, 182, 62, 91, 26, 21, 62, 234, 43, 147, 189, 73, 141, 158, 191, 9, 232, 19, 190, 50, 149, 91, 62, 162, 246, 36, 62, 156, 79, 238, 190, 197, 50, 145, 62, 73, 105, 45, 62, 72, 128, 247, 61, 254, 125, 151, 62, 161, 132, 185, 190, 8, 249, 0, 61, 94, 138, 67, 191, 211, 61, 152, 62, 205, 134, 116, 190, 14, 1, 250, 61, 216, 36, 232, 190, 96, 149, 19, 189, 130, 113, 158, 190, 180, 183, 253, 189, 183, 83, 157, 62, 176, 105, 17, 63, 141, 15, 157, 62, 233, 23, 193, 60, 174, 83, 86, 62, 21, 108, 28, 61, 72, 136, 52, 62, 100, 252, 149, 61, 32, 239, 230, 190, 130, 36, 254, 190, 171, 126, 32, 190, 9, 194, 178, 190, 184, 55, 19, 191, 130, 48, 15, 63, 121, 16, 68, 62, 197, 114, 123, 190, 227, 142, 153, 190, 207, 226, 75, 190, 109, 160, 188, 60, 185, 46, 206, 190, 84, 91, 107, 191, 26, 94, 200, 190, 23, 168, 72, 61, 114, 13, 82, 190, 31, 100, 213, 62, 239, 214, 51, 61, 97, 105, 144, 62, 124, 42, 15, 191, 119, 74, 138, 62, 46, 189, 229, 188, 76, 194, 137, 62, 3, 210, 157, 62, 55, 123, 252, 190, 19, 197, 158, 190, 56, 242, 155, 190, 110, 167, 138, 62, 81, 148, 154, 191, 171, 128, 37, 62, 91, 165, 70, 190, 62, 239, 3, 63, 213, 246, 222, 62, 12, 16, 244, 61, 144, 193, 62, 62, 181, 193, 104, 186, 62, 198, 240, 188, 166, 176, 118, 191, 50, 210, 214, 189, 60, 73, 8, 62, 205, 93, 160, 60, 43, 63, 131, 188, 147, 172, 254, 187, 42, 123, 252, 190, 198, 73, 87, 191, 188, 188, 121, 190, 29, 191, 119, 190, 16, 77, 146, 61, 60, 71, 90, 61, 125, 53, 153, 190, 33, 204, 137, 62, 198, 234, 169, 190, 34, 58, 105, 62, 254, 176, 176, 61, 62, 233, 116, 188, 243, 10, 168, 62, 185, 80, 221, 190, 238, 131, 238, 190, 97, 239, 56, 190, 31, 119, 54, 190, 2, 32, 100, 191, 236, 12, 140, 62, 189, 63, 195, 190, 219, 171, 61, 60, 121, 225, 7, 62, 153, 97, 118, 62, 9, 182, 111, 62, 121, 21, 46, 61, 131, 219, 111, 62, 166, 32, 5, 191, 51, 152, 130, 61, 178, 22, 155, 61, 255, 78, 78, 189, 84, 148, 8, 190, 148, 211, 36, 190, 220, 17, 145, 61, 40, 180, 145, 189, 36, 89, 13, 62, 61, 131, 205, 59, 234, 118, 137, 189, 173, 47, 164, 61, 70, 61, 176, 59, 218, 255, 23, 187, 122, 159, 145, 189, 173, 194, 80, 189, 36, 71, 3, 62, 28, 102, 52, 189, 127, 57, 180, 189, 185, 120, 231, 189, 161, 123, 160, 189, 183, 114, 211, 189, 63, 95, 146, 188, 41, 135, 10, 190, 174, 236, 248, 60, 212, 29, 3, 188, 102, 11, 27, 190, 224, 197, 241, 61, 105, 234, 237, 188, 44, 4, 160, 189, 254, 148, 202, 189, 128, 213, 196, 189, 134, 109, 79, 61, 238, 158, 148, 188, 127, 62, 145, 62, 112, 193, 127, 188, 45, 202, 99, 188, 207, 174, 92, 190, 30, 221, 154, 188, 200, 215, 85, 190, 103, 64, 48, 190, 129, 229, 79, 62, 129, 108, 234, 189, 220, 51, 69, 190, 225, 213, 198, 62, 24, 26, 137, 190, 53, 35, 212, 62, 212, 194, 235, 58, 97, 216, 207, 62, 75, 231, 147, 62, 145, 210, 201, 189, 150, 199, 9, 190, 114, 118, 65, 63, 194, 15, 16, 61, 171, 88, 226, 190, 134, 122, 118, 190, 126, 54, 230, 189, 78, 216, 80, 60, 113, 250, 80, 62, 192, 112, 147, 189, 113, 58, 120, 189, 81, 252, 110, 190, 186, 176, 70, 189, 110, 124, 80, 189, 123, 174, 73, 190, 206, 193, 209, 189, 2, 215, 61, 188, 246, 177, 214, 189, 61, 113, 116, 189, 220, 249, 51, 61, 8, 195, 68, 62, 171, 170, 28, 189, 116, 11, 151, 187, 154, 228, 250, 188, 129, 201, 187, 190, 31, 104, 139, 189, 129, 198, 134, 62, 55, 250, 1, 62, 133, 189, 209, 190, 133, 83, 29, 62, 69, 135, 31, 62, 245, 26, 152, 189, 152, 59, 48, 191, 89, 231, 150, 62, 168, 205, 178, 61, 129, 20, 228, 61, 208, 221, 4, 62, 78, 181, 184, 61, 254, 129, 130, 190, 14, 53, 227, 188, 195, 56, 234, 61, 1, 166, 134, 62, 244, 5, 245, 189, 1, 86, 243, 188, 126, 214, 8, 62, 19, 116, 193, 62, 222, 175, 154, 62, 12, 164, 139, 61, 157, 59, 197, 189, 88, 0, 215, 60, 127, 103, 3, 191, 89, 138, 44, 62, 117, 121, 133, 62, 44, 161, 119, 62, 72, 74, 107, 188, 180, 28, 36, 190, 126, 250, 99, 62, 32, 176, 192, 190, 249, 193, 168, 61, 178, 51, 59, 62, 80, 235, 18, 62, 90, 246, 197, 189, 192, 194, 20, 61, 22, 143, 166, 190, 41, 9, 106, 189, 192, 55, 29, 62, 110, 51, 150, 61, 138, 141, 138, 62, 111, 143, 50, 61, 136, 119, 9, 62, 160, 7, 23, 62, 202, 122, 156, 61, 64, 126, 76, 190, 100, 211, 205, 189, 15, 162, 209, 190, 253, 165, 11, 189, 20, 236, 62, 187, 18, 6, 38, 189, 161, 183, 2, 63, 179, 19, 106, 62, 97, 243, 81, 190, 170, 114, 94, 190, 82, 86, 77, 190, 55, 9, 10, 62, 37, 8, 12, 191, 118, 247, 21, 190, 87, 26, 43, 191, 5, 233, 62, 63, 100, 34, 0, 62, 223, 39, 228, 62, 219, 192, 20, 62, 84, 46, 166, 62, 157, 82, 238, 190, 137, 197, 174, 189, 211, 218, 35, 62, 246, 57, 151, 62, 41, 189, 201, 62, 20, 42, 34, 190, 217, 35, 205, 190, 63, 135, 246, 190, 250, 151, 164, 62, 186, 102, 130, 191, 7, 94, 53, 62, 251, 145, 198, 189, 195, 71, 191, 62, 66, 237, 132, 62, 193, 163, 24, 191, 72, 116, 51, 62, 50, 186, 118, 62, 138, 14, 8, 62, 120, 11, 117, 191, 197, 175, 130, 190, 49, 180, 134, 190, 149, 83, 170, 189, 86, 9, 62, 61, 169, 45, 225, 190, 131, 78, 0, 62, 232, 221, 55, 61, 9, 117, 9, 62, 190, 181, 92, 189, 201, 62, 140, 190, 220, 41, 143, 190, 102, 108, 24, 62, 62, 209, 1, 191, 173, 235, 146, 190, 117, 237, 209, 61, 128, 177, 195, 62, 11, 125, 124, 61, 109, 60, 230, 190, 67, 66, 107, 61, 188, 121, 158, 62, 228, 166, 207, 61, 194, 52, 143, 61, 90, 80, 120, 61, 39, 246, 252, 189, 53, 207, 30, 189, 66, 166, 93, 190, 61, 95, 151, 61, 252, 224, 151, 59, 241, 36, 79, 191, 98, 110, 132, 61, 236, 75, 19, 62, 37, 45, 26, 61, 73, 76, 73, 62, 193, 152, 187, 190, 242, 221, 179, 60, 57, 9, 17, 191, 189, 72, 104, 61, 153, 241, 81, 190, 228, 219, 204, 189, 114, 66, 196, 188, 29, 3, 161, 191, 106, 222, 15, 189, 62, 54, 53, 191, 133, 22, 172, 62, 178, 1, 149, 190, 254, 145, 17, 187, 241, 17, 74, 190, 208, 195, 66, 61, 173, 115, 163, 189, 217, 115, 60, 189, 102, 80, 52, 62, 228, 90, 237, 61, 201, 73, 6, 63, 24, 146, 134, 189, 248, 130, 142, 190, 234, 245, 47, 62, 22, 108, 231, 188, 223, 132, 64, 190, 124, 65, 175, 190, 226, 152, 182, 190, 96, 253, 0, 190, 119, 115, 13, 190, 226, 74, 234, 189, 31, 246, 223, 62, 19, 55, 236, 59, 160, 90, 244, 61, 13, 173, 3, 62, 25, 215, 160, 190, 238, 103, 2, 190, 175, 119, 172, 190, 194, 252, 209, 61, 142, 158, 131, 190, 137, 141, 137, 62, 223, 170, 157, 61, 71, 100, 17, 190, 32, 142, 93, 61, 50, 23, 142, 62, 155, 153, 52, 189, 170, 242, 112, 190, 75, 8, 65, 61, 40, 182, 21, 189, 74, 75, 168, 189, 133, 26, 139, 189, 183, 234, 187, 189, 147, 153, 10, 190, 146, 120, 179, 61, 74, 22, 179, 190, 116, 146, 139, 189, 28, 127, 196, 61, 172, 95, 14, 189, 14, 111, 184, 62, 128, 139, 192, 190, 238, 202, 28, 61, 212, 135, 233, 189, 177, 143, 88, 190, 133, 2, 63, 191, 65, 30, 198, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 32, 139, 212, 61, 181, 212, 14, 62, 213, 187, 12, 190, 88, 25, 250, 190, 96, 16, 6, 61, 37, 79, 196, 190, 25, 101, 197, 190, 165, 111, 102, 62, 26, 64, 23, 63, 84, 175, 0, 189, 59, 110, 218, 61, 88, 218, 3, 62, 93, 75, 107, 190, 197, 229, 37, 190, 166, 62, 171, 62, 74, 80, 19, 62, 34, 200, 76, 62, 23, 23, 220, 189, 143, 25, 130, 61, 120, 186, 27, 190, 234, 63, 197, 60, 237, 61, 129, 191, 168, 180, 38, 61, 217, 156, 31, 59, 166, 175, 109, 61, 211, 74, 86, 60, 201, 71, 168, 62, 205, 67, 3, 188, 231, 214, 13, 190, 83, 29, 154, 189, 78, 193, 112, 190, 39, 156, 101, 62, 33, 151, 14, 190, 40, 249, 134, 189, 65, 1, 86, 62, 174, 238, 225, 189, 254, 127, 79, 188, 166, 82, 33, 62, 105, 227, 193, 189, 84, 46, 243, 189, 18, 29, 195, 189, 189, 63, 92, 189, 250, 104, 81, 61, 212, 219, 165, 190, 17, 143, 208, 190, 252, 116, 253, 190, 12, 184, 127, 62, 89, 214, 209, 189, 27, 32, 85, 190, 121, 9, 131, 189, 51, 162, 8, 62, 24, 76, 231, 187, 235, 30, 5, 188, 44, 209, 53, 190, 166, 118, 198, 189, 161, 91, 168, 62, 81, 173, 165, 190, 3, 12, 83, 62, 251, 201, 56, 190, 158, 58, 141, 191, 26, 176, 234, 61, 137, 4, 138, 190, 62, 141, 20, 190, 231, 136, 232, 61, 193, 173, 245, 189, 97, 173, 75, 190, 238, 63, 52, 190, 184, 163, 4, 191, 190, 5, 166, 189, 151, 93, 115, 188, 31, 213, 156, 190, 111, 40, 150, 62, 4, 228, 1, 63, 13, 92, 91, 190, 15, 164, 170, 61, 248, 52, 2, 188, 0, 166, 104, 189, 79, 193, 202, 190, 143, 129, 6, 62, 128, 104, 251, 62, 249, 43, 29, 59, 84, 242, 247, 189, 236, 127, 6, 60, 143, 164, 164, 190, 89, 190, 139, 59, 133, 171, 135, 191, 0, 83, 105, 62, 114, 178, 72, 190, 156, 228, 147, 187, 214, 18, 180, 62, 250, 76, 2, 62, 149, 62, 218, 60, 197, 50, 183, 61, 182, 14, 184, 61, 230, 145, 128, 190, 204, 52, 62, 62, 161, 132, 75, 61, 222, 124, 197, 61, 247, 236, 183, 62, 36, 1, 201, 190, 180, 61, 116, 188, 138, 185, 111, 60, 95, 123, 188, 190, 16, 98, 96, 61, 11, 101, 254, 62, 106, 254, 184, 62, 53, 201, 26, 190, 72, 232, 114, 61, 27, 3, 241, 188, 129, 246, 112, 62, 160, 97, 199, 188, 127, 90, 126, 62, 106, 61, 119, 62, 36, 158, 101, 190, 118, 231, 164, 190, 120, 21, 71, 61, 120, 200, 143, 61, 163, 119, 225, 187, 95, 65, 35, 62, 12, 140, 22, 190, 161, 32, 183, 61, 49, 229, 124, 62, 3, 54, 144, 62, 202, 7, 10, 190, 36, 247, 124, 62, 24, 90, 14, 190, 249, 108, 62, 190, 127, 52, 101, 190, 215, 214, 9, 190, 83, 37, 66, 190, 131, 238, 13, 189, 91, 146, 134, 62, 167, 115, 22, 188, 35, 170, 170, 61, 164, 111, 94, 62, 17, 14, 244, 60, 3, 106, 128, 191, 6, 192, 107, 62, 234, 244, 101, 190, 107, 58, 181, 59, 169, 24, 255, 190, 157, 233, 191, 61, 88, 109, 170, 189, 64, 185, 215, 188, 97, 83, 240, 189, 13, 255, 186, 60, 202, 12, 151, 59, 158, 196, 22, 62, 196, 206, 148, 189, 41, 101, 0, 62, 202, 147, 7, 62, 50, 236, 62, 190, 139, 69, 171, 188, 24, 148, 133, 190, 244, 149, 140, 61, 4, 193, 160, 188, 34, 79, 7, 190, 129, 220, 116, 62, 24, 145, 83, 62, 157, 150, 50, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 124, 253, 61, 183, 87, 198, 188, 185, 31, 27, 62, 31, 156, 187, 189, 168, 133, 77, 62, 20, 255, 108, 60, 169, 43, 185, 61, 59, 2, 125, 62, 108, 151, 193, 61, 182, 23, 88, 62, 250, 124, 33, 62, 76, 7, 206, 61, 5, 230, 7, 190, 75, 203, 30, 62, 199, 25, 119, 62, 177, 91, 15, 190, 100, 94, 223, 61, 18, 208, 219, 61, 200, 150, 183, 189, 174, 221, 231, 190, 100, 107, 18, 62, 110, 150, 128, 62, 213, 208, 188, 61, 194, 55, 127, 62, 42, 188, 107, 62, 232, 234, 10, 62, 69, 140, 13, 190, 9, 1, 116, 62, 47, 102, 228, 61, 6, 205, 15, 62, 255, 202, 163, 190, 192, 71, 55, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 52, 130, 190, 203, 3, 105, 191, 150, 219, 208, 190, 28, 240, 239, 61, 93, 185, 224, 62, 222, 113, 71, 62, 244, 62, 47, 190, 48, 101, 157, 62, 114, 190, 141, 61, 226, 141, 235, 191, 138, 48, 187, 190, 160, 234, 222, 62, 254, 37, 150, 61, 63, 104, 145, 62, 251, 207, 102, 191, 13, 214, 45, 63, 186, 138, 79, 191, 30, 139, 142, 190, 147, 216, 200, 188, 39, 49, 86, 62, 175, 119, 160, 190, 25, 110, 215, 61, 49, 112, 89, 191, 49, 110, 156, 190, 28, 64, 105, 63, 194, 188, 18, 190, 92, 4, 8, 62, 23, 235, 110, 190, 26, 186, 114, 190, 42, 118, 220, 190, 207, 101, 152, 62, 215, 80, 107, 190, 180, 49, 107, 189, 77, 145, 64, 62, 79, 103, 26, 189, 176, 162, 179, 188, 115, 56, 67, 190, 138, 179, 25, 190, 84, 131, 189, 189, 128, 89, 230, 189, 53, 117, 90, 190, 6, 195, 36, 61, 36, 212, 43, 189, 248, 121, 34, 62, 206, 17, 245, 61, 149, 20, 67, 62, 199, 170, 51, 62, 130, 5, 127, 62, 72, 83, 134, 62, 26, 210, 171, 190, 45, 84, 151, 189, 129, 176, 39, 63, 13, 108, 27, 190, 116, 162, 28, 190, 126, 239, 62, 63, 90, 27, 230, 190, 102, 126, 173, 189, 228, 11, 142, 189, 144, 120, 64, 186, 253, 59, 38, 190, 35, 169, 57, 189, 243, 61, 126, 190, 127, 214, 45, 62, 137, 107, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 90, 52, 62, 42, 210, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {150, 110, 254, 63, 45, 74, 10, 191, 240, 44, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 244, 81, 64, 80, 241, 35, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}