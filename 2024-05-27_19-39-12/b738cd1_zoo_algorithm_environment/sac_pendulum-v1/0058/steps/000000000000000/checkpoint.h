// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 37, 154, 62, 229, 223, 190, 61, 175, 245, 1, 191, 112, 121, 247, 62, 169, 244, 162, 62, 25, 33, 4, 191, 50, 196, 208, 190, 95, 184, 21, 62, 125, 30, 44, 62, 211, 12, 8, 191, 239, 106, 204, 190, 102, 111, 146, 190, 184, 166, 88, 189, 221, 176, 15, 62, 39, 40, 3, 63, 218, 78, 185, 60, 1, 148, 147, 62, 209, 248, 233, 62, 254, 26, 243, 190, 134, 42, 175, 189, 126, 17, 192, 61, 137, 108, 25, 190, 90, 10, 119, 62, 27, 215, 10, 63, 44, 154, 177, 62, 73, 77, 168, 189, 50, 168, 30, 190, 129, 155, 23, 62, 214, 47, 8, 189, 157, 5, 130, 61, 84, 18, 11, 63, 154, 242, 33, 62, 24, 248, 117, 189, 141, 30, 122, 190, 200, 19, 138, 190, 169, 181, 178, 190, 215, 199, 146, 62, 155, 166, 163, 190, 51, 137, 185, 190, 211, 212, 165, 190, 37, 90, 179, 190, 172, 129, 191, 62, 122, 124, 8, 63, 240, 105, 41, 62, 167, 84, 173, 61, 146, 195, 157, 62, 97, 99, 55, 189, 38, 237, 190, 62, 181, 25, 210, 190, 39, 120, 111, 62, 177, 135, 45, 190, 210, 242, 47, 190, 133, 80, 69, 61, 130, 95, 66, 62, 120, 124, 245, 62, 235, 201, 144, 190, 239, 8, 231, 189, 121, 124, 6, 63, 94, 212, 253, 62, 161, 255, 136, 189, 217, 159, 244, 189, 197, 240, 0, 63, 126, 139, 12, 62, 58, 6, 211, 190, 201, 102, 148, 189, 236, 243, 176, 62, 54, 144, 175, 189, 93, 211, 152, 62, 203, 115, 252, 190, 63, 52, 128, 190, 254, 29, 222, 62, 202, 29, 244, 62, 163, 84, 48, 62, 142, 103, 230, 62, 144, 176, 28, 60, 218, 84, 253, 61, 60, 179, 3, 63, 82, 207, 201, 60, 34, 148, 134, 62, 13, 229, 58, 190, 124, 18, 5, 63, 162, 15, 212, 189, 73, 27, 30, 190, 37, 91, 207, 190, 29, 23, 125, 61, 19, 114, 216, 62, 168, 59, 85, 62, 15, 140, 119, 61, 198, 88, 196, 190, 42, 209, 102, 62, 159, 242, 176, 190, 67, 249, 190, 190, 101, 20, 134, 189, 28, 71, 224, 62, 103, 252, 65, 190, 27, 31, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 170, 19, 191, 222, 207, 157, 189, 99, 51, 249, 190, 100, 213, 11, 191, 247, 79, 231, 61, 250, 176, 27, 62, 182, 148, 250, 62, 225, 236, 79, 61, 181, 121, 144, 188, 164, 31, 78, 190, 208, 14, 178, 61, 96, 216, 142, 189, 255, 117, 242, 190, 2, 82, 11, 191, 115, 213, 113, 62, 192, 90, 20, 190, 243, 85, 170, 190, 148, 45, 247, 62, 172, 238, 51, 190, 246, 137, 168, 60, 99, 187, 201, 62, 180, 165, 161, 190, 196, 88, 10, 63, 39, 48, 120, 62, 125, 99, 93, 190, 113, 150, 109, 62, 240, 134, 254, 190, 230, 231, 25, 61, 108, 84, 130, 62, 113, 83, 174, 189, 254, 145, 27, 190, 29, 171, 202, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {120, 9, 170, 61, 192, 163, 114, 189, 158, 78, 37, 188, 217, 222, 5, 62, 109, 163, 217, 189, 51, 123, 190, 61, 98, 13, 8, 62, 7, 3, 177, 187, 28, 9, 148, 61, 197, 140, 80, 61, 233, 209, 12, 62, 150, 26, 229, 61, 141, 136, 61, 189, 214, 92, 226, 61, 245, 117, 174, 61, 167, 150, 47, 190, 101, 147, 10, 190, 228, 18, 64, 189, 51, 154, 119, 189, 41, 238, 7, 62, 149, 105, 233, 61, 121, 246, 48, 189, 231, 39, 148, 61, 101, 228, 185, 188, 194, 217, 206, 61, 83, 24, 243, 61, 115, 21, 7, 190, 17, 236, 10, 188, 70, 52, 220, 188, 34, 119, 127, 61, 219, 226, 43, 189, 213, 162, 49, 61, 125, 253, 41, 62, 39, 10, 50, 62, 231, 44, 124, 61, 91, 35, 218, 189, 54, 195, 243, 189, 187, 224, 46, 189, 45, 112, 17, 62, 71, 23, 211, 189, 44, 222, 173, 61, 203, 169, 178, 189, 47, 221, 178, 188, 54, 234, 201, 60, 247, 120, 222, 189, 8, 78, 159, 60, 217, 208, 27, 62, 34, 175, 42, 62, 27, 218, 212, 189, 142, 119, 3, 62, 201, 144, 48, 61, 234, 119, 134, 61, 4, 229, 164, 61, 80, 184, 41, 62, 51, 42, 153, 188, 190, 144, 144, 61, 38, 72, 18, 190, 184, 8, 55, 61, 129, 98, 186, 61, 223, 130, 210, 61, 22, 119, 220, 61, 54, 112, 254, 61, 26, 89, 222, 188, 105, 16, 191, 189, 213, 194, 164, 189, 81, 181, 5, 190, 185, 228, 115, 189, 181, 59, 24, 62, 73, 146, 99, 61, 95, 10, 89, 61, 79, 47, 202, 188, 226, 28, 187, 189, 73, 58, 137, 189, 165, 47, 199, 189, 26, 205, 27, 190, 174, 177, 150, 61, 47, 215, 86, 189, 160, 223, 15, 190, 173, 117, 209, 188, 27, 129, 43, 190, 232, 101, 157, 61, 19, 93, 39, 62, 245, 16, 33, 190, 243, 139, 154, 189, 185, 164, 200, 189, 79, 115, 186, 189, 58, 98, 134, 61, 16, 40, 189, 61, 40, 61, 7, 190, 231, 79, 162, 189, 8, 179, 43, 62, 1, 112, 109, 189, 41, 217, 250, 61, 234, 189, 19, 190, 15, 185, 251, 61, 207, 219, 26, 189, 167, 51, 198, 61, 168, 140, 23, 190, 114, 126, 21, 190, 200, 158, 128, 59, 40, 94, 19, 190, 45, 43, 208, 189, 173, 47, 204, 60, 125, 205, 56, 189, 77, 174, 156, 61, 118, 173, 133, 189, 217, 171, 57, 61, 84, 162, 67, 189, 161, 218, 49, 190, 253, 172, 32, 62, 88, 96, 244, 60, 226, 186, 5, 61, 101, 97, 128, 60, 232, 31, 236, 187, 156, 38, 34, 62, 27, 85, 30, 190, 28, 22, 218, 189, 253, 249, 67, 189, 30, 79, 40, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 247, 3, 240, 61, 189, 254, 82, 61, 41, 152, 168, 189, 33, 36, 251, 189, 38, 8, 13, 190, 14, 0, 91, 189, 70, 143, 14, 62, 207, 2, 227, 60, 86, 135, 233, 61, 150, 102, 25, 190, 83, 158, 0, 190, 92, 214, 41, 61, 218, 190, 15, 61, 105, 157, 204, 61, 245, 128, 31, 62, 147, 146, 233, 189, 223, 174, 18, 62, 194, 134, 52, 190, 63, 231, 10, 62, 93, 183, 244, 61, 80, 220, 186, 61, 89, 160, 242, 61, 249, 110, 182, 189, 201, 233, 25, 62, 21, 42, 85, 61, 132, 245, 161, 188, 55, 203, 114, 61, 43, 17, 132, 189, 153, 17, 49, 190, 34, 249, 17, 189, 116, 46, 69, 189, 225, 156, 34, 190, 161, 162, 92, 187, 248, 10, 106, 188, 81, 136, 185, 188, 180, 3, 7, 62, 180, 94, 140, 189, 170, 76, 153, 189, 233, 113, 204, 61, 82, 202, 51, 62, 150, 48, 33, 62, 198, 167, 149, 188, 93, 177, 29, 190, 115, 181, 13, 62, 142, 169, 24, 190, 236, 156, 221, 188, 12, 55, 31, 58, 1, 214, 56, 189, 7, 48, 118, 189, 19, 152, 148, 189, 246, 74, 26, 189, 147, 240, 222, 61, 102, 227, 151, 189, 18, 60, 27, 62, 38, 1, 50, 62, 169, 19, 38, 190, 25, 228, 130, 61, 153, 140, 138, 61, 202, 229, 143, 188, 76, 217, 8, 188, 187, 187, 174, 188, 226, 61, 101, 60, 57, 82, 66, 61, 160, 107, 183, 61, 109, 191, 46, 62, 26, 211, 255, 61, 80, 249, 17, 61, 73, 41, 81, 61, 183, 113, 47, 62, 125, 142, 228, 189, 159, 28, 144, 61, 213, 218, 193, 60, 198, 165, 231, 188, 89, 74, 165, 189, 183, 156, 248, 61, 89, 226, 225, 189, 162, 94, 67, 189, 37, 211, 24, 190, 95, 80, 10, 62, 111, 132, 251, 187, 88, 51, 42, 61, 135, 236, 227, 61, 108, 74, 46, 62, 113, 226, 67, 61, 100, 21, 16, 62, 42, 181, 128, 189, 228, 162, 48, 62, 180, 143, 18, 60, 136, 20, 174, 61, 141, 224, 230, 189, 188, 244, 47, 188, 14, 230, 42, 62, 167, 30, 242, 189, 157, 21, 134, 59, 177, 201, 45, 190, 225, 181, 150, 61, 11, 134, 168, 61, 39, 147, 214, 189, 139, 32, 7, 62, 143, 104, 79, 60, 122, 129, 155, 189, 21, 221, 38, 62, 144, 229, 25, 62, 58, 84, 10, 62, 198, 225, 232, 189, 137, 194, 29, 62, 30, 64, 201, 189, 97, 62, 251, 189, 35, 172, 166, 61, 81, 204, 191, 189, 112, 212, 165, 60, 79, 70, 213, 61, 137, 249, 33, 62, 43, 245, 12, 62, 214, 184, 210, 189, 26, 176, 142, 189, 55, 54, 183, 187, 34, 23, 152, 61, 77, 135, 189, 61, 222, 119, 189, 61, 207, 158, 70, 189, 40, 237, 87, 189, 109, 111, 38, 57, 199, 179, 36, 190, 12, 17, 76, 187, 81, 1, 0, 188, 214, 249, 16, 190, 5, 79, 180, 189, 100, 20, 184, 189, 11, 191, 155, 61, 15, 92, 48, 61, 63, 154, 148, 189, 162, 188, 219, 189, 171, 113, 33, 190, 119, 60, 54, 189, 204, 150, 98, 58, 159, 169, 2, 61, 99, 203, 32, 62, 74, 199, 17, 190, 16, 231, 50, 62, 164, 60, 169, 61, 23, 140, 188, 61, 30, 134, 47, 62, 108, 19, 11, 62, 103, 85, 253, 61, 52, 122, 203, 61, 161, 152, 86, 60, 176, 85, 2, 190, 162, 67, 32, 62, 14, 191, 231, 187, 206, 214, 144, 189, 190, 43, 149, 60, 181, 28, 8, 190, 63, 89, 171, 61, 138, 134, 200, 61, 10, 160, 45, 190, 201, 186, 172, 189, 93, 201, 240, 189, 247, 240, 125, 188, 161, 78, 146, 61, 105, 201, 12, 60, 251, 201, 47, 62, 125, 34, 224, 189, 1, 21, 43, 62, 145, 215, 129, 61, 220, 134, 99, 189, 251, 43, 6, 62, 71, 117, 226, 189, 23, 152, 37, 190, 77, 224, 20, 190, 27, 103, 225, 189, 143, 199, 99, 60, 27, 202, 29, 189, 210, 83, 198, 189, 31, 150, 52, 190, 208, 157, 17, 190, 111, 0, 178, 59, 115, 247, 167, 61, 4, 147, 162, 189, 3, 255, 12, 62, 212, 235, 50, 62, 189, 188, 14, 61, 208, 214, 23, 190, 64, 93, 74, 61, 239, 238, 16, 190, 63, 4, 197, 189, 122, 149, 208, 188, 24, 210, 13, 190, 245, 242, 164, 61, 240, 8, 193, 189, 41, 194, 252, 61, 3, 163, 202, 188, 12, 35, 44, 61, 54, 188, 153, 189, 58, 208, 31, 190, 29, 158, 150, 188, 69, 107, 221, 187, 117, 247, 157, 189, 102, 13, 40, 190, 250, 24, 42, 62, 180, 171, 44, 62, 151, 10, 201, 188, 90, 71, 8, 62, 59, 195, 51, 62, 49, 148, 102, 61, 252, 57, 155, 60, 100, 95, 170, 189, 47, 189, 8, 62, 177, 177, 68, 189, 47, 201, 149, 61, 199, 112, 165, 189, 44, 166, 76, 189, 114, 47, 42, 189, 139, 142, 71, 189, 220, 182, 201, 187, 91, 48, 5, 62, 45, 104, 166, 60, 57, 36, 1, 190, 2, 58, 109, 189, 200, 184, 148, 189, 98, 50, 210, 188, 156, 235, 179, 61, 127, 97, 174, 61, 111, 223, 245, 189, 24, 113, 21, 189, 9, 254, 13, 190, 20, 167, 187, 61, 190, 224, 202, 189, 26, 17, 49, 189, 41, 66, 116, 186, 90, 20, 78, 61, 127, 252, 203, 189, 180, 105, 88, 61, 43, 70, 0, 190, 188, 59, 22, 61, 79, 165, 24, 190, 37, 234, 221, 189, 150, 125, 217, 58, 168, 193, 45, 189, 18, 200, 22, 62, 19, 105, 171, 189, 104, 99, 208, 61, 75, 93, 32, 60, 118, 200, 209, 61, 249, 151, 17, 62, 0, 47, 215, 188, 94, 244, 224, 61, 225, 40, 32, 190, 220, 185, 57, 189, 196, 235, 52, 190, 6, 8, 193, 60, 89, 49, 77, 61, 31, 195, 26, 62, 13, 194, 31, 190, 8, 18, 46, 190, 154, 243, 2, 61, 209, 4, 146, 189, 131, 106, 240, 189, 197, 160, 32, 190, 216, 42, 62, 61, 188, 122, 129, 60, 151, 228, 0, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 212, 178, 144, 61, 112, 94, 227, 189, 105, 143, 17, 62, 92, 23, 7, 62, 241, 26, 6, 62, 248, 46, 18, 190, 109, 41, 222, 189, 224, 43, 193, 61, 64, 252, 130, 189, 122, 248, 9, 190, 43, 98, 101, 188, 19, 179, 36, 62, 253, 240, 43, 189, 179, 156, 46, 62, 15, 133, 162, 60, 170, 112, 250, 60, 222, 64, 202, 61, 183, 102, 7, 190, 26, 42, 173, 61, 85, 40, 26, 62, 225, 31, 49, 62, 116, 26, 224, 189, 190, 143, 145, 61, 125, 44, 205, 189, 211, 200, 21, 190, 201, 208, 44, 190, 119, 217, 249, 61, 227, 210, 19, 62, 26, 231, 36, 62, 184, 67, 229, 61, 105, 123, 17, 190, 152, 248, 183, 61, 87, 37, 58, 58, 180, 244, 176, 189, 120, 188, 27, 190, 52, 115, 162, 61, 111, 107, 198, 189, 207, 98, 2, 62, 51, 143, 183, 188, 169, 45, 128, 189, 18, 158, 163, 189, 64, 147, 125, 61, 104, 193, 162, 188, 113, 131, 36, 190, 207, 17, 176, 189, 116, 219, 77, 61, 65, 34, 73, 61, 78, 150, 231, 61, 137, 63, 49, 190, 58, 246, 27, 190, 211, 155, 180, 189, 62, 4, 158, 189, 187, 54, 131, 61, 208, 94, 229, 189, 251, 125, 159, 188, 5, 194, 46, 62, 75, 114, 127, 189, 3, 194, 244, 61, 128, 21, 162, 61, 4, 78, 166, 61, 248, 28, 145, 61, 169, 129, 224, 61, 232, 114, 99, 61, 90, 240, 197, 189, 127, 187, 17, 62, 104, 193, 4, 62, 108, 188, 181, 188, 10, 40, 18, 62, 15, 120, 146, 60, 84, 218, 158, 188, 121, 118, 139, 61, 4, 181, 96, 61, 50, 108, 7, 189, 207, 100, 225, 61, 159, 116, 179, 189, 217, 194, 35, 190, 160, 194, 230, 189, 107, 73, 229, 189, 163, 246, 38, 189, 22, 170, 184, 61, 126, 185, 1, 62, 39, 229, 167, 61, 247, 147, 40, 61, 118, 218, 46, 62, 31, 16, 185, 61, 177, 142, 13, 190, 74, 29, 35, 62, 184, 6, 214, 61, 129, 221, 25, 189, 222, 84, 195, 61, 246, 77, 111, 188, 197, 93, 239, 189, 27, 211, 221, 188, 130, 58, 164, 189, 255, 36, 77, 187, 122, 190, 141, 61, 204, 245, 128, 189, 90, 216, 6, 190, 87, 76, 161, 60, 233, 116, 96, 186, 125, 5, 215, 61, 130, 206, 26, 187, 73, 151, 210, 189, 139, 54, 96, 189, 113, 120, 122, 189, 17, 30, 0, 61, 13, 128, 7, 189, 250, 215, 20, 62, 31, 109, 143, 189, 74, 29, 95, 189, 175, 224, 24, 190, 78, 31, 212, 188, 67, 6, 217, 60, 54, 123, 6, 62, 102, 133, 156, 60, 215, 45, 200, 61, 195, 40, 45, 62, 17, 233, 13, 190, 33, 246, 179, 60, 150, 81, 216, 61, 168, 151, 23, 61, 74, 255, 254, 61, 50, 39, 22, 189, 112, 6, 255, 61, 108, 13, 37, 190, 18, 238, 191, 189, 1, 152, 156, 186, 0, 106, 149, 61, 41, 227, 37, 62, 129, 140, 9, 60, 239, 132, 3, 61, 174, 51, 12, 62, 218, 234, 8, 190, 55, 32, 83, 189, 91, 105, 206, 189, 211, 170, 80, 189, 157, 242, 179, 61, 136, 97, 52, 189, 9, 226, 40, 190, 254, 99, 2, 189, 140, 63, 208, 189, 108, 189, 161, 61, 225, 245, 176, 61, 66, 115, 39, 190, 231, 180, 24, 62, 249, 90, 66, 61, 28, 23, 253, 189, 130, 34, 5, 62, 126, 150, 36, 190, 125, 124, 218, 61, 88, 75, 23, 62, 58, 55, 28, 190, 12, 6, 84, 188, 154, 97, 127, 189, 230, 199, 9, 61, 12, 205, 167, 60, 229, 94, 193, 189, 242, 234, 32, 190, 78, 210, 231, 189, 21, 51, 144, 60, 178, 22, 155, 61, 255, 78, 78, 189, 84, 148, 8, 190, 148, 211, 36, 190, 251, 71, 162, 61, 72, 156, 139, 189, 252, 206, 22, 62, 166, 74, 205, 59, 19, 195, 128, 189, 173, 47, 164, 61, 161, 77, 23, 60, 165, 204, 222, 185, 122, 159, 145, 189, 176, 26, 79, 189, 13, 191, 12, 62, 146, 96, 22, 189, 127, 57, 180, 189, 177, 75, 219, 189, 15, 132, 148, 189, 183, 114, 211, 189, 63, 95, 146, 188, 41, 135, 10, 190, 71, 214, 248, 60, 212, 29, 3, 188, 102, 11, 27, 190, 224, 197, 241, 61, 146, 163, 175, 188, 43, 80, 156, 189, 254, 148, 202, 189, 228, 9, 184, 189, 210, 29, 114, 61, 70, 83, 122, 188, 22, 173, 17, 62, 241, 24, 178, 189, 235, 173, 208, 60, 98, 242, 156, 188, 147, 45, 183, 61, 34, 174, 79, 189, 161, 25, 214, 189, 222, 241, 13, 62, 179, 121, 40, 190, 234, 42, 118, 189, 230, 41, 27, 60, 98, 143, 144, 61, 252, 231, 42, 62, 77, 204, 170, 59, 58, 190, 158, 189, 39, 27, 230, 61, 57, 250, 62, 61, 143, 160, 33, 62, 127, 234, 183, 61, 211, 30, 156, 187, 112, 176, 48, 190, 180, 72, 46, 190, 106, 77, 127, 61, 193, 165, 107, 187, 164, 208, 202, 60, 67, 149, 245, 188, 32, 161, 8, 189, 45, 114, 221, 61, 231, 219, 42, 61, 147, 131, 127, 188, 151, 217, 2, 190, 221, 95, 44, 190, 238, 56, 213, 188, 187, 129, 223, 189, 124, 50, 140, 60, 218, 181, 34, 190, 132, 44, 39, 62, 76, 0, 181, 189, 123, 153, 237, 189, 151, 205, 194, 188, 117, 38, 25, 190, 77, 115, 198, 61, 146, 120, 255, 61, 136, 61, 27, 189, 237, 241, 224, 61, 209, 15, 243, 61, 222, 109, 82, 189, 234, 180, 144, 189, 178, 207, 52, 61, 115, 243, 38, 62, 34, 122, 17, 62, 236, 192, 47, 190, 59, 208, 137, 188, 57, 94, 204, 61, 142, 157, 208, 189, 33, 139, 217, 189, 242, 205, 40, 62, 143, 212, 33, 62, 89, 68, 229, 189, 193, 101, 249, 61, 200, 146, 242, 188, 22, 39, 6, 62, 90, 87, 145, 189, 15, 159, 15, 62, 147, 197, 214, 189, 179, 217, 143, 189, 29, 91, 133, 57, 189, 194, 3, 61, 132, 14, 137, 61, 6, 52, 222, 61, 192, 129, 221, 189, 144, 18, 42, 62, 85, 221, 226, 61, 105, 11, 28, 189, 93, 142, 4, 188, 106, 249, 14, 62, 23, 80, 236, 61, 28, 25, 146, 61, 161, 223, 119, 61, 95, 99, 165, 189, 27, 240, 215, 60, 172, 84, 194, 60, 34, 204, 229, 189, 128, 42, 60, 60, 3, 218, 130, 188, 2, 31, 231, 189, 70, 17, 222, 61, 149, 102, 37, 190, 118, 192, 28, 190, 40, 236, 222, 60, 60, 209, 17, 190, 80, 239, 223, 189, 43, 69, 35, 61, 3, 115, 43, 189, 55, 41, 140, 61, 160, 51, 3, 62, 85, 214, 107, 189, 49, 3, 234, 188, 139, 118, 140, 60, 111, 48, 7, 61, 107, 57, 234, 187, 153, 68, 148, 61, 222, 88, 39, 190, 61, 4, 150, 61, 8, 206, 53, 61, 164, 118, 78, 187, 252, 13, 173, 61, 207, 109, 51, 189, 131, 41, 23, 190, 74, 12, 29, 190, 87, 96, 236, 61, 44, 89, 235, 189, 108, 50, 135, 61, 138, 227, 73, 61, 79, 230, 237, 60, 176, 28, 50, 190, 208, 95, 40, 62, 157, 67, 44, 62, 122, 184, 158, 60, 144, 78, 102, 60, 164, 41, 162, 61, 86, 54, 164, 60, 74, 123, 5, 189, 185, 78, 105, 189, 3, 160, 201, 61, 47, 254, 112, 60, 216, 140, 165, 61, 4, 107, 227, 189, 94, 33, 14, 190, 46, 45, 86, 189, 19, 35, 224, 61, 48, 204, 23, 190, 176, 169, 193, 60, 188, 202, 139, 189, 150, 3, 148, 61, 82, 43, 1, 190, 190, 73, 35, 190, 173, 58, 1, 190, 5, 137, 170, 189, 147, 220, 15, 190, 49, 248, 45, 62, 186, 67, 162, 61, 235, 174, 24, 62, 28, 198, 141, 60, 192, 57, 217, 189, 105, 39, 97, 189, 137, 228, 5, 189, 30, 187, 194, 60, 155, 32, 204, 58, 99, 128, 61, 60, 144, 157, 118, 189, 196, 183, 119, 189, 124, 183, 76, 60, 139, 191, 14, 188, 76, 64, 128, 189, 194, 236, 242, 60, 153, 173, 239, 189, 255, 232, 227, 189, 248, 19, 105, 189, 115, 103, 166, 188, 41, 19, 44, 190, 183, 236, 193, 189, 177, 193, 219, 189, 104, 70, 10, 61, 17, 78, 150, 189, 39, 142, 130, 61, 34, 20, 16, 62, 106, 1, 19, 190, 166, 239, 41, 190, 197, 37, 209, 59, 2, 162, 22, 62, 7, 139, 73, 189, 15, 72, 202, 188, 233, 194, 130, 61, 205, 167, 131, 61, 130, 14, 187, 188, 89, 207, 42, 190, 93, 214, 35, 62, 72, 215, 78, 189, 43, 238, 32, 62, 101, 230, 9, 189, 64, 84, 31, 190, 125, 228, 27, 62, 113, 71, 65, 60, 89, 95, 152, 189, 76, 249, 137, 61, 114, 251, 18, 190, 77, 74, 12, 190, 60, 167, 199, 61, 28, 244, 197, 61, 111, 255, 129, 189, 65, 209, 37, 190, 17, 205, 31, 62, 141, 52, 45, 62, 80, 205, 183, 189, 128, 102, 246, 189, 220, 43, 253, 189, 151, 254, 47, 62, 130, 204, 166, 61, 69, 208, 238, 189, 203, 183, 178, 189, 60, 117, 239, 189, 119, 215, 147, 189, 81, 65, 1, 62, 247, 67, 31, 62, 176, 1, 11, 190, 227, 191, 64, 189, 205, 147, 161, 187, 109, 98, 18, 190, 168, 203, 2, 62, 209, 220, 147, 188, 96, 255, 57, 188, 216, 13, 244, 61, 201, 112, 34, 189, 126, 86, 183, 189, 67, 229, 28, 62, 80, 26, 18, 190, 236, 199, 30, 62, 68, 252, 48, 61, 117, 26, 167, 60, 22, 79, 228, 189, 221, 56, 23, 190, 123, 200, 157, 189, 196, 222, 16, 190, 148, 195, 127, 189, 29, 239, 250, 189, 64, 251, 22, 62, 198, 179, 128, 60, 105, 203, 94, 189, 140, 175, 209, 61, 249, 192, 78, 61, 38, 212, 36, 190, 32, 215, 47, 61, 199, 190, 167, 189, 87, 155, 3, 62, 20, 242, 12, 190, 153, 134, 88, 189, 96, 85, 128, 60, 127, 101, 212, 189, 132, 105, 185, 188, 18, 239, 206, 60, 92, 165, 132, 189, 31, 198, 215, 60, 161, 217, 37, 61, 154, 32, 127, 189, 10, 187, 114, 60, 224, 115, 196, 61, 137, 21, 208, 187, 32, 69, 56, 61, 243, 44, 16, 190, 139, 126, 8, 189, 22, 40, 55, 189, 175, 70, 232, 61, 253, 40, 52, 190, 175, 106, 12, 62, 250, 26, 18, 190, 70, 229, 11, 62, 150, 57, 18, 62, 118, 26, 168, 61, 239, 52, 145, 188, 58, 91, 9, 62, 136, 75, 44, 190, 54, 160, 49, 190, 212, 247, 89, 60, 15, 95, 25, 62, 220, 97, 101, 187, 66, 117, 11, 190, 167, 24, 4, 189, 210, 143, 242, 188, 195, 94, 30, 62, 35, 199, 152, 60, 66, 247, 32, 190, 78, 232, 33, 62, 176, 218, 191, 61, 130, 194, 177, 61, 78, 220, 3, 61, 194, 198, 251, 61, 223, 118, 68, 61, 103, 0, 56, 61, 241, 18, 48, 62, 152, 95, 227, 188, 145, 46, 26, 190, 10, 154, 9, 62, 90, 235, 249, 188, 83, 121, 186, 189, 153, 71, 2, 190, 89, 181, 41, 186, 50, 185, 162, 61, 82, 231, 236, 61, 51, 159, 250, 188, 99, 215, 241, 189, 119, 81, 43, 62, 245, 108, 79, 61, 170, 245, 246, 61, 107, 99, 239, 61, 136, 249, 20, 190, 228, 105, 36, 61, 88, 137, 93, 61, 212, 98, 30, 61, 94, 234, 142, 61, 120, 31, 216, 61, 59, 1, 31, 190, 114, 191, 47, 62, 81, 15, 159, 189, 172, 161, 72, 188, 65, 76, 49, 189, 71, 158, 228, 61, 97, 127, 17, 190, 38, 116, 40, 190, 100, 239, 107, 189, 92, 248, 156, 189, 119, 48, 42, 62, 54, 214, 190, 189, 165, 153, 6, 62, 219, 148, 26, 190, 174, 252, 116, 189, 210, 208, 196, 189, 186, 41, 20, 190, 73, 238, 146, 189, 204, 246, 52, 62, 70, 155, 133, 189, 13, 85, 161, 189, 48, 180, 158, 61, 224, 3, 165, 189, 141, 18, 193, 189, 13, 220, 44, 62, 193, 151, 218, 189, 60, 235, 30, 61, 177, 252, 9, 62, 219, 214, 141, 189, 66, 252, 229, 189, 217, 166, 239, 189, 59, 47, 215, 61, 199, 59, 160, 189, 127, 203, 200, 189, 8, 87, 164, 61, 63, 160, 18, 190, 128, 155, 90, 61, 156, 153, 38, 61, 20, 254, 42, 190, 91, 88, 250, 187, 255, 229, 131, 189, 57, 3, 26, 62, 249, 183, 173, 189, 89, 61, 209, 189, 75, 13, 153, 61, 193, 148, 23, 190, 5, 64, 44, 61, 19, 138, 17, 61, 2, 97, 19, 61, 57, 123, 35, 62, 243, 235, 238, 61, 7, 185, 152, 61, 19, 63, 171, 188, 8, 108, 198, 61, 168, 155, 221, 189, 123, 69, 47, 61, 26, 136, 111, 61, 200, 234, 120, 188, 86, 210, 159, 189, 52, 2, 205, 61, 119, 37, 24, 190, 21, 205, 49, 189, 146, 20, 44, 62, 21, 111, 44, 190, 116, 134, 182, 60, 149, 16, 127, 61, 9, 51, 168, 61, 233, 94, 128, 61, 201, 79, 223, 189, 9, 53, 25, 190, 154, 228, 5, 190, 140, 65, 186, 61, 201, 74, 219, 61, 207, 67, 50, 61, 166, 228, 5, 189, 176, 161, 180, 60, 251, 13, 136, 61, 33, 210, 133, 60, 187, 41, 35, 190, 156, 23, 34, 62, 107, 193, 99, 189, 40, 95, 207, 189, 208, 7, 28, 190, 201, 252, 209, 61, 211, 205, 84, 61, 236, 71, 172, 189, 29, 202, 237, 60, 71, 71, 61, 189, 11, 163, 196, 61, 147, 73, 187, 61, 252, 236, 174, 61, 240, 113, 222, 61, 133, 238, 222, 61, 208, 53, 15, 190, 217, 132, 201, 189, 20, 137, 24, 62, 65, 129, 135, 61, 154, 124, 207, 61, 16, 50, 17, 61, 53, 238, 32, 61, 138, 243, 196, 189, 177, 97, 32, 62, 22, 194, 27, 62, 118, 136, 148, 189, 69, 123, 223, 61, 75, 70, 4, 62, 132, 175, 12, 190, 247, 29, 227, 188, 238, 29, 179, 60, 10, 44, 16, 62, 111, 117, 204, 188, 125, 89, 36, 190, 229, 228, 3, 62, 98, 28, 145, 188, 113, 220, 185, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 83, 122, 61, 120, 98, 13, 190, 67, 61, 9, 61, 31, 156, 187, 189, 47, 71, 236, 61, 26, 207, 236, 189, 161, 251, 112, 189, 240, 71, 250, 61, 228, 96, 180, 61, 52, 94, 5, 62, 118, 71, 246, 61, 161, 253, 212, 189, 5, 230, 7, 190, 56, 230, 252, 61, 190, 116, 191, 61, 137, 167, 45, 190, 218, 218, 27, 61, 58, 253, 75, 61, 205, 93, 162, 189, 208, 251, 221, 189, 40, 110, 128, 189, 152, 249, 3, 62, 111, 67, 142, 189, 13, 117, 189, 61, 54, 24, 7, 62, 63, 59, 161, 61, 107, 34, 246, 189, 50, 118, 230, 61, 247, 22, 209, 60, 122, 230, 193, 188, 50, 72, 176, 189, 34, 192, 30, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 153, 158, 189, 126, 81, 227, 189, 102, 137, 25, 190, 28, 240, 239, 61, 16, 113, 250, 61, 67, 96, 94, 61, 188, 36, 85, 189, 22, 247, 215, 61, 97, 226, 16, 189, 41, 150, 52, 190, 97, 72, 20, 190, 75, 141, 172, 61, 254, 37, 150, 61, 3, 118, 134, 61, 251, 175, 160, 60, 120, 57, 36, 62, 2, 203, 118, 189, 91, 85, 167, 189, 223, 109, 226, 188, 251, 105, 155, 60, 51, 172, 85, 189, 198, 157, 99, 61, 13, 8, 239, 189, 145, 132, 220, 189, 37, 59, 26, 62, 222, 21, 15, 189, 239, 4, 9, 62, 246, 51, 53, 189, 23, 92, 21, 187, 119, 42, 246, 189, 58, 175, 7, 61, 108, 30, 197, 189, 112, 66, 145, 189, 115, 253, 211, 61, 239, 1, 6, 190, 176, 162, 179, 188, 9, 104, 19, 190, 5, 188, 228, 188, 157, 120, 234, 189, 37, 227, 35, 190, 160, 20, 125, 189, 63, 101, 147, 189, 27, 99, 207, 189, 126, 222, 152, 61, 206, 17, 245, 61, 13, 10, 38, 62, 179, 82, 221, 60, 215, 6, 229, 61, 186, 99, 227, 60, 62, 36, 46, 190, 204, 116, 153, 189, 44, 13, 69, 60, 115, 141, 191, 189, 210, 204, 175, 189, 64, 204, 15, 62, 60, 154, 31, 190, 48, 238, 188, 189, 83, 77, 9, 190, 24, 56, 122, 186, 97, 175, 7, 190, 188, 43, 180, 60, 65, 41, 48, 190, 175, 29, 60, 60, 86, 5, 138, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 202, 40, 62, 118, 44, 33, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 21, 170, 190, 192, 101, 11, 63, 195, 167, 240, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {98, 201, 23, 62, 246, 45, 159, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}