// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 175, 0, 63, 211, 58, 160, 190, 71, 176, 17, 191, 70, 243, 234, 62, 147, 30, 3, 62, 8, 234, 28, 191, 164, 9, 18, 63, 113, 105, 12, 63, 24, 95, 171, 62, 156, 187, 208, 190, 2, 6, 156, 191, 222, 65, 71, 62, 102, 201, 211, 190, 159, 115, 53, 63, 114, 129, 61, 63, 67, 71, 106, 191, 99, 183, 99, 63, 182, 207, 162, 62, 34, 218, 241, 190, 86, 180, 129, 187, 186, 94, 171, 62, 204, 162, 154, 189, 31, 67, 200, 63, 18, 80, 5, 63, 186, 146, 47, 63, 16, 238, 96, 190, 246, 162, 167, 61, 2, 129, 120, 62, 127, 24, 130, 63, 101, 86, 47, 62, 72, 39, 91, 63, 39, 143, 236, 189, 164, 251, 131, 189, 112, 231, 156, 190, 215, 189, 138, 191, 19, 96, 34, 190, 38, 192, 239, 62, 56, 159, 147, 191, 89, 40, 223, 190, 208, 87, 238, 190, 16, 81, 40, 191, 97, 6, 235, 62, 0, 35, 56, 63, 176, 123, 37, 62, 200, 35, 231, 61, 94, 122, 19, 62, 29, 136, 171, 190, 208, 160, 23, 63, 16, 141, 61, 190, 140, 47, 18, 191, 196, 251, 228, 190, 139, 97, 28, 191, 15, 11, 183, 61, 160, 200, 83, 62, 93, 216, 101, 63, 158, 15, 2, 191, 19, 101, 88, 190, 192, 119, 71, 62, 105, 21, 105, 63, 37, 54, 149, 190, 247, 46, 96, 190, 233, 253, 88, 63, 138, 206, 196, 61, 72, 118, 48, 191, 39, 85, 200, 63, 245, 118, 211, 62, 212, 131, 213, 190, 175, 243, 94, 190, 20, 38, 218, 190, 137, 221, 234, 190, 225, 92, 130, 63, 10, 191, 54, 189, 218, 244, 214, 61, 68, 98, 92, 63, 123, 71, 218, 189, 88, 14, 128, 62, 49, 207, 91, 63, 198, 25, 246, 190, 56, 18, 185, 189, 201, 200, 241, 190, 93, 72, 58, 63, 41, 51, 40, 191, 223, 125, 132, 191, 26, 14, 10, 190, 140, 157, 12, 62, 0, 139, 112, 63, 167, 79, 17, 190, 122, 58, 204, 189, 242, 78, 223, 190, 189, 121, 37, 62, 246, 221, 180, 189, 98, 215, 108, 191, 132, 43, 75, 63, 226, 169, 63, 63, 163, 18, 135, 191, 186, 85, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 81, 197, 190, 2, 227, 148, 61, 219, 158, 101, 191, 217, 99, 235, 190, 221, 21, 225, 189, 124, 99, 196, 62, 252, 11, 64, 63, 64, 35, 110, 188, 227, 209, 147, 190, 64, 48, 108, 190, 227, 244, 79, 190, 32, 22, 40, 59, 103, 253, 210, 190, 17, 255, 197, 190, 204, 225, 212, 61, 126, 51, 205, 61, 175, 97, 77, 190, 121, 38, 56, 63, 38, 204, 183, 190, 229, 104, 193, 62, 135, 125, 189, 62, 48, 147, 154, 60, 41, 33, 22, 63, 7, 64, 95, 62, 119, 233, 62, 190, 237, 124, 43, 62, 22, 220, 235, 190, 178, 212, 234, 62, 46, 183, 22, 62, 251, 111, 212, 190, 195, 252, 214, 190, 31, 130, 59, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 19, 45, 59, 26, 23, 2, 190, 8, 173, 145, 190, 230, 182, 80, 62, 75, 116, 35, 191, 215, 233, 34, 190, 255, 94, 133, 61, 66, 232, 143, 62, 250, 54, 10, 62, 40, 245, 66, 190, 22, 150, 6, 62, 163, 240, 181, 62, 208, 225, 107, 190, 203, 94, 87, 63, 73, 128, 60, 61, 173, 176, 123, 190, 66, 221, 129, 61, 76, 172, 42, 189, 99, 130, 78, 190, 164, 22, 253, 189, 100, 229, 185, 61, 40, 60, 144, 191, 216, 116, 38, 62, 164, 167, 208, 188, 81, 231, 134, 61, 53, 208, 163, 62, 167, 191, 84, 191, 190, 17, 3, 62, 235, 59, 128, 189, 165, 62, 80, 60, 92, 15, 149, 190, 175, 41, 68, 61, 218, 129, 189, 189, 44, 145, 253, 189, 225, 164, 196, 188, 151, 19, 162, 188, 138, 112, 56, 191, 165, 30, 221, 191, 241, 221, 82, 62, 159, 184, 241, 62, 38, 83, 168, 188, 119, 230, 23, 63, 115, 107, 142, 189, 200, 115, 87, 62, 26, 124, 53, 191, 176, 4, 47, 62, 250, 29, 109, 62, 188, 157, 202, 62, 198, 66, 55, 62, 146, 92, 137, 190, 34, 200, 34, 191, 113, 210, 155, 190, 185, 110, 70, 62, 91, 248, 152, 191, 54, 72, 236, 61, 86, 161, 62, 190, 162, 45, 135, 62, 1, 178, 151, 62, 149, 35, 105, 190, 129, 140, 74, 62, 229, 105, 82, 62, 191, 193, 187, 61, 154, 22, 32, 191, 208, 15, 249, 190, 160, 119, 165, 190, 17, 215, 201, 190, 36, 217, 224, 61, 161, 10, 208, 189, 172, 68, 162, 61, 242, 214, 214, 187, 23, 150, 98, 60, 116, 230, 192, 61, 18, 38, 15, 62, 14, 221, 161, 190, 238, 71, 120, 62, 188, 181, 89, 191, 79, 12, 81, 191, 36, 123, 108, 189, 16, 131, 165, 62, 255, 254, 14, 62, 40, 192, 234, 189, 190, 222, 122, 62, 66, 251, 41, 62, 209, 192, 236, 189, 140, 221, 87, 61, 98, 135, 127, 190, 236, 103, 45, 61, 118, 99, 99, 62, 232, 53, 225, 189, 0, 20, 50, 62, 30, 190, 178, 62, 122, 55, 179, 191, 11, 206, 164, 62, 238, 83, 36, 62, 176, 206, 33, 190, 193, 132, 163, 61, 167, 51, 198, 61, 120, 6, 26, 190, 114, 126, 21, 190, 72, 67, 224, 187, 224, 189, 60, 190, 168, 21, 214, 189, 59, 174, 83, 59, 139, 109, 182, 189, 226, 1, 75, 61, 38, 119, 167, 189, 177, 124, 156, 60, 155, 71, 26, 189, 17, 28, 43, 190, 121, 195, 18, 62, 19, 54, 29, 59, 118, 59, 213, 59, 101, 97, 128, 60, 206, 161, 31, 189, 69, 31, 33, 62, 226, 160, 31, 190, 185, 127, 244, 189, 55, 90, 77, 189, 248, 74, 38, 190, 96, 62, 34, 190, 120, 7, 57, 61, 202, 111, 21, 62, 80, 252, 186, 61, 25, 255, 117, 61, 118, 231, 169, 189, 174, 153, 10, 190, 251, 215, 32, 190, 10, 77, 102, 189, 82, 13, 183, 189, 132, 78, 26, 190, 202, 50, 98, 190, 171, 194, 249, 61, 34, 129, 195, 188, 169, 213, 240, 61, 96, 73, 106, 62, 220, 161, 103, 61, 102, 181, 39, 63, 47, 229, 251, 189, 253, 212, 146, 189, 190, 0, 65, 61, 56, 155, 149, 62, 98, 233, 148, 59, 245, 178, 75, 190, 64, 173, 141, 189, 255, 143, 84, 191, 126, 155, 135, 62, 185, 247, 59, 62, 225, 171, 222, 187, 242, 152, 99, 62, 16, 5, 19, 62, 249, 139, 25, 191, 241, 190, 76, 62, 54, 68, 221, 190, 161, 38, 153, 191, 132, 51, 11, 190, 175, 99, 37, 62, 239, 136, 91, 190, 47, 234, 175, 61, 175, 14, 198, 62, 169, 135, 0, 62, 226, 119, 215, 61, 232, 83, 129, 62, 138, 193, 156, 190, 96, 204, 61, 62, 163, 96, 181, 189, 113, 192, 5, 190, 188, 185, 223, 189, 143, 220, 124, 191, 129, 156, 212, 61, 255, 18, 135, 191, 176, 226, 111, 62, 153, 182, 99, 189, 10, 181, 121, 189, 167, 242, 45, 190, 157, 110, 16, 61, 173, 85, 48, 190, 185, 179, 152, 61, 67, 73, 98, 190, 65, 157, 7, 63, 30, 177, 100, 62, 43, 65, 126, 189, 241, 190, 0, 189, 246, 166, 207, 59, 109, 191, 180, 190, 130, 172, 91, 189, 127, 167, 36, 60, 45, 124, 26, 190, 160, 131, 50, 62, 95, 56, 82, 189, 45, 80, 176, 188, 50, 172, 29, 63, 90, 106, 4, 62, 27, 211, 236, 189, 81, 208, 203, 189, 20, 211, 54, 59, 148, 6, 47, 61, 156, 162, 27, 62, 44, 201, 241, 189, 97, 164, 125, 61, 116, 66, 32, 190, 86, 49, 64, 189, 176, 39, 89, 190, 35, 98, 18, 62, 11, 12, 165, 190, 60, 34, 128, 191, 99, 134, 209, 188, 41, 20, 147, 62, 55, 212, 214, 188, 252, 187, 67, 190, 248, 87, 6, 62, 7, 222, 168, 189, 82, 75, 45, 62, 79, 253, 113, 62, 236, 52, 138, 61, 24, 225, 38, 190, 106, 90, 76, 62, 1, 63, 30, 190, 45, 73, 190, 61, 69, 52, 111, 60, 123, 142, 5, 191, 144, 166, 169, 62, 120, 93, 46, 61, 207, 89, 79, 62, 183, 234, 9, 190, 171, 222, 60, 62, 96, 72, 110, 62, 203, 156, 159, 191, 13, 200, 213, 62, 212, 54, 59, 62, 202, 32, 76, 62, 109, 183, 36, 62, 24, 115, 189, 190, 235, 170, 0, 61, 209, 183, 196, 190, 80, 3, 190, 62, 51, 154, 0, 62, 237, 250, 6, 190, 161, 86, 21, 190, 126, 212, 135, 59, 239, 21, 145, 190, 177, 93, 41, 190, 121, 12, 92, 62, 172, 96, 131, 62, 158, 185, 10, 62, 109, 169, 17, 62, 164, 69, 163, 62, 90, 209, 99, 189, 227, 215, 77, 62, 76, 191, 134, 62, 117, 53, 187, 190, 242, 191, 200, 190, 82, 220, 246, 61, 118, 61, 164, 61, 47, 231, 44, 61, 161, 146, 166, 62, 30, 71, 37, 188, 27, 53, 22, 190, 219, 17, 76, 62, 25, 40, 25, 62, 45, 76, 177, 190, 131, 43, 138, 61, 227, 52, 69, 62, 73, 49, 89, 189, 213, 255, 234, 189, 220, 38, 132, 62, 21, 218, 114, 62, 211, 76, 128, 62, 44, 73, 216, 190, 10, 37, 148, 190, 233, 215, 195, 190, 76, 57, 233, 62, 2, 234, 69, 190, 32, 238, 91, 190, 60, 193, 11, 190, 216, 124, 2, 63, 56, 215, 241, 62, 185, 96, 255, 62, 112, 161, 122, 61, 11, 72, 194, 188, 5, 170, 234, 59, 109, 109, 152, 61, 45, 100, 150, 62, 79, 75, 110, 188, 133, 13, 207, 190, 35, 136, 202, 62, 17, 57, 88, 190, 40, 219, 159, 60, 117, 251, 156, 60, 182, 222, 13, 191, 247, 4, 206, 190, 212, 54, 189, 190, 1, 181, 223, 187, 181, 73, 54, 191, 108, 15, 1, 191, 80, 53, 242, 61, 195, 189, 22, 189, 228, 216, 27, 190, 88, 44, 36, 190, 9, 65, 162, 61, 108, 117, 141, 62, 163, 37, 196, 191, 220, 138, 38, 63, 146, 32, 79, 62, 198, 29, 70, 62, 223, 59, 247, 61, 216, 68, 91, 62, 163, 96, 239, 189, 54, 31, 83, 191, 210, 94, 19, 189, 235, 160, 142, 191, 148, 237, 145, 62, 138, 96, 174, 190, 144, 245, 50, 62, 52, 107, 10, 63, 187, 211, 129, 189, 156, 189, 19, 62, 122, 249, 138, 190, 253, 76, 21, 190, 150, 176, 57, 191, 76, 144, 156, 191, 41, 107, 163, 190, 254, 225, 178, 188, 237, 56, 45, 62, 70, 202, 109, 190, 73, 252, 233, 61, 213, 50, 56, 62, 187, 56, 172, 61, 104, 106, 46, 62, 94, 7, 199, 189, 49, 49, 84, 188, 90, 162, 34, 62, 116, 233, 156, 190, 95, 99, 151, 191, 120, 237, 38, 187, 120, 3, 197, 61, 75, 70, 109, 62, 171, 214, 30, 60, 56, 76, 81, 62, 113, 82, 91, 188, 137, 156, 71, 190, 139, 194, 14, 62, 11, 115, 32, 190, 236, 133, 92, 189, 95, 157, 165, 62, 141, 145, 173, 61, 32, 192, 26, 62, 130, 18, 133, 60, 41, 22, 129, 191, 170, 97, 152, 62, 50, 50, 157, 190, 5, 195, 238, 190, 54, 108, 119, 188, 247, 172, 72, 62, 94, 246, 29, 60, 195, 174, 103, 191, 50, 158, 134, 62, 145, 25, 178, 62, 11, 119, 155, 187, 202, 243, 122, 62, 97, 62, 248, 190, 69, 231, 189, 61, 91, 161, 42, 191, 131, 254, 154, 62, 220, 14, 237, 61, 134, 66, 11, 62, 8, 124, 134, 190, 118, 59, 225, 189, 103, 175, 1, 191, 133, 216, 180, 189, 139, 215, 47, 62, 88, 63, 212, 62, 191, 50, 8, 62, 121, 82, 127, 62, 137, 194, 207, 62, 104, 8, 225, 61, 31, 168, 43, 62, 92, 235, 118, 62, 235, 162, 188, 190, 105, 19, 16, 191, 190, 28, 7, 189, 75, 185, 130, 190, 52, 194, 45, 189, 192, 92, 36, 63, 230, 50, 171, 62, 180, 123, 94, 61, 77, 24, 12, 61, 57, 47, 248, 188, 173, 172, 137, 189, 177, 183, 255, 61, 208, 85, 11, 190, 245, 177, 12, 190, 178, 75, 45, 62, 176, 198, 162, 188, 58, 79, 26, 62, 201, 162, 37, 190, 156, 150, 253, 189, 210, 176, 139, 189, 96, 126, 33, 190, 81, 145, 159, 188, 41, 138, 129, 60, 123, 242, 212, 189, 89, 140, 93, 61, 242, 132, 177, 61, 241, 144, 49, 190, 164, 41, 140, 189, 161, 22, 17, 190, 71, 61, 42, 190, 40, 100, 170, 188, 147, 62, 171, 61, 175, 203, 75, 189, 92, 189, 153, 189, 224, 144, 36, 62, 154, 62, 232, 189, 185, 239, 166, 61, 44, 126, 70, 189, 220, 129, 239, 61, 152, 26, 142, 62, 130, 9, 30, 190, 129, 181, 203, 60, 55, 29, 61, 61, 6, 185, 30, 62, 76, 164, 218, 60, 78, 187, 142, 189, 243, 186, 35, 62, 103, 250, 181, 61, 142, 203, 130, 62, 125, 162, 232, 190, 49, 141, 37, 189, 126, 175, 112, 62, 102, 233, 163, 61, 179, 61, 254, 190, 227, 59, 178, 189, 185, 35, 22, 191, 166, 65, 149, 189, 163, 162, 197, 191, 20, 203, 15, 63, 229, 235, 226, 62, 220, 21, 30, 60, 13, 137, 173, 190, 88, 133, 149, 62, 67, 216, 20, 63, 226, 65, 13, 60, 255, 192, 129, 61, 105, 216, 176, 188, 233, 88, 201, 62, 220, 50, 57, 190, 76, 251, 10, 62, 118, 22, 93, 191, 145, 103, 213, 189, 244, 32, 69, 190, 218, 122, 204, 190, 26, 99, 212, 59, 6, 184, 34, 191, 136, 120, 158, 191, 4, 104, 171, 190, 229, 190, 4, 63, 17, 172, 148, 190, 50, 231, 48, 63, 245, 152, 147, 189, 183, 250, 230, 61, 59, 79, 180, 190, 165, 76, 5, 62, 220, 117, 235, 187, 105, 229, 135, 62, 245, 41, 163, 62, 0, 15, 164, 191, 30, 74, 37, 191, 206, 158, 235, 190, 34, 124, 6, 62, 68, 140, 184, 191, 161, 229, 134, 62, 180, 196, 49, 188, 126, 208, 55, 62, 190, 113, 206, 62, 91, 96, 127, 62, 146, 75, 172, 62, 182, 99, 33, 62, 186, 104, 99, 190, 124, 245, 150, 191, 228, 210, 88, 190, 82, 165, 57, 62, 142, 230, 245, 61, 116, 122, 79, 191, 7, 93, 4, 63, 147, 199, 125, 62, 21, 96, 98, 62, 219, 44, 172, 62, 70, 36, 138, 190, 221, 185, 14, 61, 128, 101, 76, 191, 14, 255, 164, 62, 208, 86, 165, 190, 6, 248, 137, 61, 86, 208, 238, 190, 227, 127, 171, 60, 216, 229, 162, 190, 211, 150, 75, 190, 213, 219, 165, 62, 120, 21, 27, 63, 171, 54, 142, 62, 35, 145, 109, 61, 100, 77, 187, 62, 124, 225, 106, 188, 118, 40, 24, 62, 220, 138, 55, 62, 244, 90, 241, 190, 92, 159, 252, 190, 150, 184, 47, 190, 102, 207, 149, 190, 155, 161, 216, 190, 63, 19, 8, 63, 65, 154, 113, 62, 241, 175, 135, 190, 251, 148, 152, 190, 82, 145, 22, 189, 169, 42, 194, 62, 29, 97, 58, 190, 225, 40, 248, 191, 116, 247, 5, 191, 80, 28, 213, 62, 176, 86, 130, 190, 6, 8, 82, 63, 104, 253, 171, 61, 101, 99, 119, 62, 158, 66, 85, 191, 157, 73, 190, 62, 140, 55, 29, 188, 171, 178, 130, 62, 56, 42, 207, 61, 221, 10, 111, 191, 93, 172, 224, 190, 131, 235, 130, 190, 60, 141, 185, 62, 177, 133, 251, 191, 14, 45, 238, 61, 140, 12, 27, 189, 193, 45, 30, 63, 164, 127, 230, 62, 33, 70, 141, 62, 137, 53, 151, 61, 92, 39, 140, 61, 248, 53, 40, 62, 250, 36, 83, 191, 26, 26, 32, 190, 32, 97, 87, 62, 254, 113, 198, 61, 43, 63, 131, 188, 92, 224, 104, 189, 243, 35, 25, 191, 189, 132, 75, 191, 133, 150, 3, 191, 211, 121, 179, 190, 106, 52, 214, 186, 44, 137, 156, 62, 203, 152, 147, 190, 97, 25, 203, 62, 25, 241, 137, 190, 2, 15, 46, 62, 204, 206, 24, 61, 119, 82, 26, 191, 237, 158, 180, 62, 22, 67, 5, 191, 134, 194, 236, 190, 156, 165, 219, 189, 6, 156, 223, 189, 159, 176, 158, 191, 201, 187, 184, 62, 96, 161, 27, 190, 204, 23, 135, 61, 21, 77, 66, 62, 103, 1, 133, 189, 199, 40, 178, 62, 117, 48, 169, 61, 167, 79, 245, 61, 6, 238, 32, 191, 154, 191, 214, 61, 178, 22, 155, 61, 255, 78, 78, 189, 152, 218, 13, 190, 252, 224, 37, 190, 183, 228, 102, 61, 145, 46, 162, 189, 111, 238, 3, 62, 39, 186, 87, 187, 237, 255, 137, 189, 14, 244, 155, 61, 234, 231, 4, 60, 73, 77, 54, 187, 122, 159, 145, 189, 205, 22, 112, 189, 237, 177, 4, 62, 16, 64, 69, 189, 127, 57, 180, 189, 233, 25, 241, 189, 155, 35, 154, 189, 239, 115, 214, 189, 74, 205, 159, 188, 107, 218, 21, 190, 174, 236, 248, 60, 121, 251, 67, 188, 102, 11, 27, 190, 224, 197, 241, 61, 90, 55, 36, 189, 178, 26, 164, 189, 242, 216, 207, 189, 136, 49, 206, 189, 182, 28, 25, 61, 165, 131, 83, 188, 134, 211, 182, 62, 119, 182, 53, 189, 159, 131, 238, 189, 87, 113, 155, 190, 75, 78, 109, 190, 60, 109, 204, 190, 178, 129, 203, 189, 160, 121, 237, 61, 16, 217, 11, 190, 104, 101, 191, 190, 139, 83, 195, 62, 68, 137, 36, 191, 99, 93, 1, 63, 155, 118, 245, 61, 42, 6, 197, 62, 212, 220, 151, 62, 137, 109, 67, 190, 44, 138, 137, 190, 2, 248, 69, 63, 146, 162, 140, 188, 118, 124, 15, 191, 11, 96, 49, 191, 172, 138, 17, 190, 114, 70, 28, 61, 178, 27, 136, 62, 130, 176, 227, 189, 58, 59, 104, 188, 241, 172, 201, 190, 159, 200, 211, 189, 100, 224, 199, 61, 38, 234, 21, 190, 212, 114, 191, 189, 27, 94, 161, 189, 103, 245, 250, 189, 203, 53, 104, 188, 234, 231, 161, 60, 233, 147, 104, 62, 106, 182, 132, 189, 96, 53, 61, 61, 51, 104, 101, 187, 84, 186, 158, 190, 138, 147, 220, 189, 119, 126, 141, 62, 54, 224, 50, 190, 142, 19, 111, 191, 95, 26, 242, 61, 177, 189, 19, 62, 175, 49, 27, 60, 19, 86, 15, 191, 62, 124, 182, 62, 78, 5, 21, 61, 124, 4, 47, 62, 105, 227, 65, 62, 236, 1, 76, 60, 23, 50, 63, 190, 156, 73, 116, 61, 65, 184, 218, 61, 213, 134, 120, 62, 240, 134, 11, 190, 187, 163, 72, 190, 117, 243, 44, 62, 115, 187, 151, 62, 19, 199, 131, 62, 35, 22, 18, 189, 235, 128, 227, 189, 97, 70, 32, 60, 104, 102, 88, 191, 125, 22, 130, 62, 155, 18, 162, 62, 114, 76, 169, 62, 81, 94, 152, 189, 205, 43, 130, 190, 10, 113, 18, 61, 103, 144, 1, 191, 153, 57, 45, 61, 64, 132, 0, 62, 78, 151, 81, 60, 185, 252, 169, 189, 125, 22, 222, 187, 7, 175, 236, 190, 74, 208, 13, 190, 169, 177, 252, 61, 157, 97, 184, 61, 9, 170, 132, 62, 50, 90, 6, 62, 33, 139, 109, 62, 52, 74, 217, 61, 78, 219, 140, 188, 56, 109, 136, 59, 83, 149, 209, 189, 170, 120, 217, 190, 224, 190, 149, 189, 2, 77, 175, 61, 39, 160, 21, 189, 76, 241, 241, 62, 56, 43, 41, 62, 114, 129, 71, 190, 185, 24, 76, 190, 199, 74, 228, 189, 213, 67, 202, 61, 30, 91, 105, 191, 218, 28, 22, 191, 225, 109, 129, 191, 127, 72, 81, 63, 240, 89, 28, 62, 43, 153, 18, 63, 70, 178, 5, 62, 45, 245, 232, 62, 200, 241, 242, 190, 249, 235, 177, 189, 105, 25, 18, 62, 236, 28, 163, 62, 89, 168, 221, 62, 75, 203, 240, 190, 56, 1, 33, 191, 165, 62, 231, 190, 49, 79, 158, 62, 55, 50, 8, 192, 198, 177, 76, 62, 163, 26, 92, 60, 44, 56, 169, 62, 65, 204, 138, 62, 151, 114, 7, 191, 246, 180, 131, 62, 0, 155, 121, 62, 119, 104, 238, 61, 21, 128, 47, 191, 33, 182, 169, 190, 21, 174, 158, 190, 40, 149, 235, 189, 235, 241, 54, 61, 150, 114, 171, 190, 231, 116, 32, 62, 106, 111, 33, 189, 213, 159, 55, 62, 17, 153, 62, 189, 120, 73, 81, 190, 53, 4, 148, 190, 107, 77, 50, 62, 254, 225, 59, 191, 108, 254, 141, 191, 22, 127, 217, 61, 115, 108, 205, 62, 244, 52, 54, 62, 105, 250, 151, 190, 0, 177, 111, 61, 149, 104, 155, 62, 100, 242, 22, 62, 31, 255, 132, 61, 61, 42, 128, 188, 109, 203, 54, 190, 242, 108, 175, 189, 32, 255, 130, 190, 86, 160, 209, 60, 73, 147, 212, 60, 73, 199, 131, 191, 11, 237, 215, 61, 121, 73, 103, 62, 217, 237, 224, 60, 31, 15, 25, 62, 215, 62, 173, 190, 239, 208, 162, 60, 13, 68, 42, 191, 121, 41, 209, 61, 98, 10, 46, 190, 231, 128, 26, 191, 117, 94, 68, 189, 113, 110, 251, 191, 55, 214, 143, 61, 33, 114, 67, 191, 65, 108, 199, 62, 89, 225, 204, 190, 168, 203, 223, 190, 202, 100, 112, 189, 3, 122, 22, 62, 12, 101, 208, 61, 144, 71, 248, 190, 233, 40, 152, 61, 54, 206, 59, 62, 125, 100, 5, 63, 224, 35, 113, 189, 140, 91, 8, 191, 65, 183, 2, 62, 84, 193, 163, 190, 178, 210, 6, 190, 158, 29, 158, 190, 26, 39, 229, 189, 64, 214, 73, 190, 65, 110, 216, 189, 173, 169, 192, 61, 23, 176, 27, 63, 153, 211, 195, 61, 30, 184, 193, 61, 236, 73, 228, 61, 25, 215, 160, 190, 72, 157, 217, 190, 74, 208, 95, 190, 84, 79, 245, 189, 153, 249, 161, 188, 86, 131, 15, 62, 10, 31, 218, 61, 31, 55, 177, 190, 235, 94, 20, 61, 214, 84, 166, 62, 181, 211, 245, 188, 112, 26, 17, 191, 15, 242, 175, 188, 5, 38, 76, 189, 208, 211, 124, 189, 130, 126, 245, 61, 80, 239, 180, 189, 255, 235, 23, 190, 243, 212, 134, 61, 16, 144, 54, 191, 96, 169, 136, 189, 178, 100, 30, 62, 74, 130, 63, 190, 251, 111, 160, 62, 73, 26, 5, 191, 195, 158, 95, 61, 133, 176, 66, 190, 199, 62, 163, 190, 97, 63, 55, 191, 5, 82, 181, 189, 148, 195, 127, 189, 29, 239, 250, 189, 97, 26, 14, 62, 38, 236, 193, 59, 224, 91, 146, 189, 72, 95, 171, 61, 249, 232, 3, 61, 161, 52, 53, 190, 32, 215, 47, 61, 82, 1, 172, 189, 87, 155, 3, 62, 244, 84, 16, 190, 153, 134, 88, 189, 25, 57, 7, 187, 127, 101, 212, 189, 60, 128, 36, 189, 18, 239, 206, 60, 37, 144, 174, 189, 31, 198, 215, 60, 161, 217, 37, 61, 127, 111, 149, 189, 80, 182, 99, 187, 224, 115, 196, 61, 239, 30, 215, 188, 32, 69, 56, 61, 243, 44, 16, 190, 242, 13, 76, 189, 194, 93, 65, 189, 110, 195, 231, 61, 81, 163, 53, 190, 91, 127, 244, 61, 250, 26, 18, 190, 154, 168, 197, 61, 163, 165, 25, 62, 42, 27, 93, 61, 95, 4, 243, 190, 152, 195, 110, 62, 25, 242, 29, 191, 18, 26, 145, 190, 71, 15, 163, 62, 48, 183, 32, 63, 132, 2, 83, 190, 56, 176, 232, 61, 161, 30, 219, 61, 157, 61, 76, 190, 72, 211, 131, 61, 54, 213, 159, 62, 45, 242, 122, 62, 110, 138, 99, 62, 133, 62, 146, 189, 154, 134, 195, 60, 31, 131, 21, 190, 109, 81, 15, 189, 191, 12, 198, 191, 123, 132, 67, 61, 21, 112, 83, 61, 214, 95, 176, 188, 232, 4, 251, 187, 114, 70, 12, 63, 118, 205, 76, 189, 173, 25, 63, 190, 218, 0, 117, 189, 193, 120, 129, 188, 221, 57, 64, 62, 223, 106, 53, 190, 6, 55, 53, 189, 70, 1, 86, 62, 174, 238, 225, 189, 66, 189, 113, 60, 225, 99, 144, 190, 224, 54, 188, 188, 73, 214, 163, 190, 218, 51, 149, 189, 195, 104, 151, 190, 6, 224, 2, 60, 42, 3, 2, 191, 4, 130, 91, 191, 252, 116, 253, 190, 197, 70, 45, 62, 41, 195, 119, 189, 165, 72, 199, 189, 49, 99, 96, 61, 195, 233, 145, 61, 239, 49, 37, 61, 104, 124, 83, 61, 83, 19, 92, 191, 44, 138, 47, 188, 248, 2, 242, 62, 148, 219, 185, 190, 18, 20, 98, 62, 161, 236, 214, 190, 80, 141, 68, 191, 128, 216, 244, 61, 154, 252, 146, 190, 63, 44, 149, 190, 143, 209, 134, 61, 119, 62, 149, 190, 120, 42, 119, 190, 202, 137, 87, 190, 72, 2, 91, 191, 21, 13, 131, 61, 114, 165, 70, 190, 172, 247, 111, 190, 160, 216, 239, 62, 236, 146, 8, 63, 0, 118, 154, 190, 155, 43, 192, 61, 58, 247, 248, 189, 17, 156, 199, 189, 137, 82, 201, 190, 211, 40, 222, 61, 28, 38, 15, 63, 252, 162, 242, 188, 104, 85, 5, 189, 232, 27, 54, 188, 13, 195, 178, 190, 28, 219, 65, 189, 61, 231, 221, 191, 113, 41, 34, 62, 10, 243, 42, 60, 175, 162, 219, 189, 83, 28, 144, 62, 157, 37, 105, 62, 1, 162, 4, 190, 145, 122, 143, 60, 6, 185, 242, 189, 134, 158, 84, 190, 201, 123, 13, 62, 20, 66, 196, 61, 117, 248, 57, 62, 53, 46, 37, 63, 229, 46, 103, 191, 252, 88, 106, 189, 146, 179, 188, 189, 131, 146, 5, 191, 206, 73, 92, 60, 94, 76, 7, 63, 162, 246, 0, 63, 206, 151, 137, 189, 134, 224, 94, 61, 190, 68, 211, 188, 122, 138, 184, 62, 78, 206, 195, 61, 156, 216, 13, 62, 147, 79, 127, 62, 39, 181, 201, 190, 98, 17, 141, 190, 113, 37, 183, 61, 172, 191, 158, 61, 184, 28, 83, 189, 36, 92, 81, 62, 119, 39, 174, 190, 63, 101, 42, 62, 40, 222, 181, 62, 97, 81, 217, 62, 58, 218, 34, 190, 185, 89, 164, 62, 77, 223, 138, 190, 193, 31, 33, 61, 71, 15, 68, 190, 201, 156, 14, 190, 68, 5, 168, 60, 80, 188, 141, 61, 189, 119, 140, 62, 140, 113, 126, 60, 47, 135, 190, 61, 4, 25, 122, 62, 137, 129, 141, 188, 157, 163, 114, 191, 106, 35, 0, 62, 217, 176, 60, 191, 152, 73, 204, 189, 27, 92, 85, 191, 239, 114, 254, 61, 250, 49, 87, 190, 230, 170, 84, 188, 185, 226, 55, 62, 20, 166, 35, 61, 220, 123, 102, 187, 197, 91, 72, 190, 87, 181, 247, 189, 74, 149, 229, 61, 95, 190, 181, 62, 66, 67, 192, 189, 209, 167, 34, 190, 116, 203, 236, 190, 210, 92, 200, 61, 25, 239, 114, 189, 154, 111, 193, 190, 210, 142, 115, 62, 13, 12, 129, 62, 216, 240, 142, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 250, 11, 62, 160, 96, 78, 188, 14, 184, 65, 62, 175, 135, 233, 189, 77, 227, 139, 62, 164, 80, 0, 61, 128, 166, 215, 61, 39, 106, 90, 62, 38, 173, 197, 61, 29, 198, 134, 62, 32, 189, 137, 62, 205, 74, 216, 61, 5, 230, 7, 190, 33, 170, 58, 61, 230, 57, 107, 62, 164, 65, 254, 189, 56, 204, 31, 62, 249, 33, 90, 62, 102, 134, 183, 189, 11, 223, 4, 191, 77, 215, 57, 62, 224, 63, 78, 62, 99, 216, 159, 61, 31, 188, 134, 62, 118, 43, 152, 62, 106, 119, 23, 62, 69, 140, 13, 190, 3, 115, 98, 62, 147, 168, 12, 62, 47, 244, 227, 61, 27, 206, 171, 190, 94, 145, 77, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 105, 4, 190, 164, 234, 182, 191, 234, 44, 1, 191, 38, 189, 235, 61, 66, 81, 233, 62, 108, 200, 55, 62, 188, 144, 46, 190, 79, 139, 145, 62, 62, 120, 160, 61, 246, 122, 0, 192, 75, 151, 227, 190, 163, 218, 208, 62, 254, 37, 150, 61, 27, 55, 179, 62, 223, 37, 108, 191, 148, 120, 30, 63, 57, 67, 191, 191, 243, 238, 172, 190, 107, 86, 9, 188, 24, 39, 215, 62, 195, 26, 140, 190, 30, 174, 160, 61, 78, 249, 147, 191, 192, 176, 173, 190, 80, 154, 135, 63, 126, 225, 87, 189, 92, 4, 8, 62, 198, 99, 134, 190, 30, 83, 100, 190, 136, 148, 231, 190, 91, 203, 223, 62, 119, 63, 133, 190, 204, 94, 33, 190, 97, 174, 128, 62, 222, 4, 133, 61, 156, 118, 150, 188, 80, 79, 36, 61, 225, 148, 77, 190, 151, 12, 185, 189, 11, 254, 119, 190, 198, 196, 220, 190, 175, 89, 61, 61, 145, 127, 6, 190, 136, 241, 63, 61, 206, 17, 245, 61, 182, 243, 58, 62, 178, 147, 93, 62, 129, 97, 20, 62, 63, 99, 190, 62, 1, 239, 162, 190, 1, 200, 144, 189, 224, 21, 140, 63, 97, 205, 241, 189, 164, 179, 59, 190, 35, 131, 154, 63, 141, 20, 211, 190, 244, 216, 162, 190, 92, 199, 164, 189, 144, 120, 64, 186, 236, 98, 135, 188, 218, 193, 160, 190, 129, 99, 158, 189, 170, 184, 120, 62, 118, 46, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 245, 13, 62, 58, 152, 174, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 105, 39, 191, 94, 211, 229, 191, 131, 140, 238, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 227, 224, 63, 170, 190, 185, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0058/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}