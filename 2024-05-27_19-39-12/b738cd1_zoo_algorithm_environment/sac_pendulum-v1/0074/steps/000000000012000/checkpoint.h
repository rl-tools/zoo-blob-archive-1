// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 42, 92, 149, 62, 121, 39, 115, 63, 28, 9, 241, 62, 4, 95, 121, 191, 54, 215, 81, 63, 5, 145, 172, 62, 7, 33, 215, 59, 147, 65, 67, 62, 143, 126, 40, 63, 77, 176, 34, 190, 75, 244, 6, 189, 194, 78, 5, 191, 139, 115, 98, 190, 223, 224, 88, 63, 158, 212, 25, 63, 182, 227, 103, 190, 196, 125, 116, 190, 19, 44, 60, 191, 4, 103, 23, 63, 107, 180, 22, 191, 83, 249, 131, 190, 102, 216, 47, 62, 212, 23, 1, 63, 190, 202, 8, 63, 38, 141, 45, 63, 234, 50, 5, 191, 7, 182, 2, 190, 95, 51, 19, 63, 124, 126, 77, 191, 176, 218, 207, 61, 62, 14, 196, 190, 100, 38, 254, 190, 252, 205, 29, 190, 111, 8, 10, 63, 181, 188, 19, 63, 63, 44, 1, 63, 78, 216, 183, 62, 13, 81, 17, 63, 108, 86, 216, 189, 131, 143, 222, 189, 88, 134, 127, 191, 92, 96, 140, 62, 200, 40, 7, 63, 167, 42, 171, 63, 249, 84, 203, 62, 128, 128, 26, 191, 42, 114, 95, 63, 253, 117, 96, 62, 244, 22, 30, 63, 252, 241, 140, 63, 151, 230, 208, 62, 123, 16, 169, 189, 153, 12, 214, 62, 2, 164, 123, 187, 109, 88, 248, 62, 216, 246, 85, 61, 191, 162, 234, 62, 82, 146, 193, 189, 101, 215, 70, 190, 141, 20, 246, 61, 101, 152, 187, 188, 164, 247, 130, 191, 148, 253, 128, 190, 140, 30, 224, 62, 77, 215, 47, 62, 20, 11, 70, 63, 202, 200, 22, 63, 118, 160, 112, 189, 132, 142, 49, 190, 240, 46, 86, 191, 147, 17, 70, 191, 148, 9, 63, 190, 193, 143, 28, 191, 41, 204, 133, 62, 54, 129, 213, 189, 17, 245, 243, 62, 9, 200, 100, 191, 239, 114, 194, 189, 103, 129, 139, 190, 151, 173, 165, 190, 9, 253, 6, 191, 87, 49, 172, 61, 6, 118, 251, 189, 116, 72, 13, 191, 206, 100, 244, 62, 143, 150, 48, 63, 47, 14, 208, 62, 82, 96, 124, 190, 106, 68, 214, 191, 189, 248, 58, 190, 143, 116, 236, 189, 146, 119, 53, 190, 57, 237, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 187, 126, 126, 62, 179, 84, 2, 63, 112, 50, 219, 190, 124, 127, 8, 189, 36, 105, 203, 189, 185, 207, 84, 61, 84, 19, 49, 191, 31, 9, 67, 59, 39, 107, 95, 60, 140, 248, 96, 188, 220, 122, 14, 63, 182, 13, 251, 60, 88, 108, 192, 62, 191, 10, 143, 190, 127, 149, 3, 63, 19, 19, 13, 63, 102, 87, 22, 191, 253, 251, 13, 63, 148, 135, 101, 62, 18, 249, 58, 191, 145, 179, 110, 190, 214, 43, 66, 60, 173, 6, 9, 191, 142, 210, 17, 63, 136, 251, 178, 190, 58, 122, 20, 62, 235, 192, 190, 190, 14, 126, 146, 62, 122, 121, 158, 62, 21, 5, 223, 62, 80, 70, 42, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 72, 147, 168, 190, 145, 113, 115, 61, 128, 189, 164, 191, 228, 73, 190, 190, 240, 147, 134, 191, 186, 47, 15, 189, 19, 30, 186, 190, 40, 129, 131, 191, 181, 155, 28, 191, 224, 14, 49, 190, 146, 182, 49, 60, 185, 50, 33, 63, 217, 11, 59, 62, 70, 15, 250, 190, 82, 185, 156, 61, 60, 89, 136, 61, 204, 91, 167, 62, 241, 199, 118, 60, 120, 223, 8, 63, 185, 178, 156, 60, 39, 38, 3, 191, 211, 251, 163, 190, 153, 130, 246, 190, 200, 214, 130, 62, 213, 39, 88, 62, 108, 239, 4, 191, 46, 212, 195, 190, 49, 36, 88, 62, 48, 174, 198, 60, 186, 46, 195, 62, 240, 43, 1, 61, 17, 1, 242, 189, 70, 181, 77, 189, 92, 226, 50, 190, 64, 28, 139, 61, 116, 122, 133, 62, 129, 23, 134, 61, 75, 96, 70, 190, 65, 150, 72, 191, 8, 122, 243, 61, 217, 165, 134, 62, 80, 29, 185, 62, 196, 30, 241, 190, 222, 172, 16, 190, 67, 148, 30, 62, 35, 155, 57, 62, 102, 147, 51, 189, 57, 1, 49, 189, 204, 92, 226, 190, 52, 45, 228, 189, 13, 57, 65, 62, 34, 235, 129, 61, 253, 187, 245, 190, 3, 245, 66, 62, 168, 70, 180, 187, 173, 104, 126, 190, 23, 181, 199, 190, 213, 77, 74, 62, 161, 43, 149, 189, 112, 206, 222, 60, 86, 170, 146, 62, 33, 194, 222, 190, 247, 36, 5, 189, 106, 230, 122, 61, 114, 13, 4, 62, 221, 208, 30, 62, 96, 55, 164, 62, 25, 200, 127, 62, 110, 86, 72, 62, 198, 26, 209, 189, 46, 111, 84, 62, 70, 181, 172, 62, 238, 216, 248, 62, 158, 92, 173, 61, 233, 200, 94, 60, 167, 114, 1, 191, 216, 170, 191, 188, 177, 80, 204, 62, 255, 227, 186, 190, 237, 181, 223, 61, 71, 103, 81, 191, 160, 40, 47, 62, 21, 58, 28, 191, 123, 48, 94, 190, 94, 41, 166, 190, 120, 111, 204, 62, 193, 206, 6, 63, 163, 246, 149, 61, 88, 79, 14, 62, 71, 83, 106, 190, 21, 170, 164, 62, 14, 72, 47, 189, 162, 89, 136, 190, 174, 4, 128, 190, 49, 135, 213, 190, 181, 213, 36, 62, 208, 28, 86, 191, 181, 211, 2, 62, 144, 82, 51, 191, 97, 209, 24, 61, 198, 216, 167, 191, 105, 45, 99, 62, 186, 239, 233, 190, 121, 3, 152, 191, 121, 114, 46, 190, 228, 17, 50, 191, 89, 25, 109, 62, 113, 50, 64, 190, 241, 21, 64, 62, 240, 30, 84, 191, 27, 180, 159, 188, 57, 41, 168, 61, 255, 144, 2, 189, 229, 248, 193, 61, 25, 115, 221, 61, 9, 11, 100, 190, 228, 4, 148, 190, 62, 35, 164, 190, 153, 251, 139, 191, 152, 152, 57, 61, 45, 240, 126, 62, 165, 31, 202, 188, 94, 62, 57, 190, 187, 10, 151, 188, 57, 118, 9, 190, 47, 67, 140, 62, 39, 112, 49, 61, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 98, 241, 64, 58, 127, 211, 37, 191, 254, 120, 19, 61, 123, 10, 9, 190, 119, 225, 191, 188, 237, 173, 228, 189, 244, 19, 119, 61, 38, 161, 61, 61, 35, 105, 210, 62, 103, 154, 99, 62, 136, 36, 142, 62, 255, 6, 112, 190, 231, 175, 111, 62, 220, 206, 88, 189, 97, 214, 7, 60, 226, 35, 45, 191, 140, 241, 114, 191, 248, 6, 138, 189, 105, 107, 185, 189, 148, 170, 174, 62, 172, 250, 108, 190, 107, 141, 78, 61, 30, 118, 187, 189, 98, 158, 176, 61, 47, 236, 238, 190, 133, 77, 1, 63, 170, 53, 37, 190, 160, 158, 143, 61, 185, 76, 15, 62, 136, 60, 7, 62, 89, 28, 155, 62, 205, 100, 11, 190, 241, 0, 9, 62, 142, 2, 128, 59, 235, 48, 129, 62, 87, 19, 9, 62, 165, 245, 77, 62, 76, 19, 116, 189, 130, 34, 198, 62, 151, 36, 86, 61, 126, 238, 231, 62, 145, 21, 166, 62, 68, 202, 191, 189, 88, 54, 52, 190, 119, 129, 101, 190, 143, 247, 82, 62, 189, 208, 82, 189, 91, 171, 62, 61, 79, 251, 146, 188, 78, 157, 189, 60, 216, 178, 169, 188, 197, 183, 20, 60, 118, 111, 242, 60, 1, 33, 221, 61, 36, 163, 23, 63, 242, 110, 77, 190, 170, 79, 236, 189, 79, 212, 98, 62, 34, 37, 129, 62, 221, 179, 54, 190, 161, 4, 48, 189, 0, 123, 159, 189, 129, 234, 19, 187, 132, 163, 211, 189, 38, 22, 156, 191, 82, 30, 128, 62, 59, 137, 85, 191, 200, 70, 21, 188, 212, 161, 135, 191, 54, 196, 160, 61, 157, 1, 220, 190, 140, 11, 119, 191, 236, 190, 19, 189, 21, 102, 32, 190, 109, 138, 181, 189, 115, 146, 180, 62, 85, 1, 49, 62, 6, 209, 158, 190, 31, 19, 90, 191, 42, 50, 97, 62, 197, 103, 84, 62, 27, 157, 6, 63, 74, 141, 233, 61, 52, 59, 72, 189, 54, 186, 21, 191, 243, 234, 163, 190, 152, 85, 148, 190, 8, 9, 10, 62, 69, 21, 196, 189, 11, 3, 169, 190, 92, 213, 88, 189, 133, 156, 35, 190, 33, 86, 42, 189, 189, 201, 147, 62, 120, 40, 206, 190, 230, 80, 52, 188, 223, 246, 17, 190, 218, 13, 206, 62, 18, 92, 225, 61, 90, 112, 73, 190, 32, 101, 105, 60, 120, 58, 229, 190, 210, 47, 29, 62, 210, 145, 2, 189, 156, 56, 242, 61, 186, 189, 172, 62, 62, 59, 251, 60, 207, 216, 48, 191, 213, 212, 38, 191, 55, 105, 25, 63, 32, 209, 71, 191, 125, 155, 144, 186, 191, 33, 226, 189, 98, 194, 147, 61, 94, 112, 114, 190, 237, 69, 13, 190, 218, 69, 225, 61, 208, 211, 147, 189, 194, 132, 192, 189, 216, 49, 213, 189, 55, 54, 105, 190, 166, 165, 45, 62, 86, 146, 127, 190, 154, 127, 47, 190, 72, 212, 119, 190, 69, 253, 141, 62, 139, 136, 207, 189, 134, 10, 158, 188, 154, 48, 99, 190, 162, 129, 131, 190, 190, 28, 33, 191, 80, 238, 14, 190, 175, 10, 248, 190, 122, 252, 29, 62, 141, 38, 31, 191, 168, 240, 2, 190, 176, 216, 94, 190, 44, 43, 188, 190, 6, 138, 179, 60, 98, 61, 130, 62, 217, 71, 59, 61, 225, 119, 22, 191, 163, 173, 84, 61, 153, 135, 79, 62, 217, 233, 211, 188, 47, 216, 164, 189, 218, 126, 126, 62, 211, 245, 28, 190, 166, 46, 229, 190, 161, 136, 194, 189, 218, 144, 149, 191, 17, 1, 90, 62, 196, 129, 244, 61, 213, 67, 152, 190, 131, 28, 27, 189, 175, 233, 159, 62, 171, 185, 153, 62, 7, 198, 160, 62, 120, 158, 11, 189, 77, 60, 231, 61, 62, 128, 16, 190, 217, 44, 80, 190, 91, 13, 179, 190, 164, 245, 78, 190, 135, 197, 238, 190, 153, 40, 132, 62, 90, 230, 116, 190, 2, 191, 243, 189, 19, 90, 254, 61, 234, 220, 54, 62, 59, 220, 26, 61, 24, 252, 27, 190, 51, 164, 141, 61, 66, 107, 9, 190, 65, 225, 41, 62, 25, 103, 3, 190, 51, 144, 209, 190, 136, 236, 252, 60, 239, 8, 7, 61, 207, 14, 17, 62, 73, 15, 199, 188, 200, 252, 134, 190, 231, 114, 31, 191, 118, 133, 93, 190, 188, 48, 14, 190, 215, 89, 43, 62, 105, 52, 144, 190, 213, 156, 82, 62, 180, 57, 147, 62, 130, 156, 76, 62, 12, 12, 158, 190, 169, 76, 27, 189, 194, 192, 203, 189, 123, 223, 41, 62, 127, 187, 52, 62, 187, 55, 171, 190, 24, 188, 206, 61, 87, 87, 161, 191, 60, 213, 21, 62, 236, 73, 62, 60, 181, 244, 153, 62, 158, 12, 236, 61, 131, 232, 26, 62, 12, 126, 193, 188, 56, 214, 36, 191, 51, 184, 158, 62, 164, 192, 91, 61, 93, 166, 19, 62, 36, 178, 0, 190, 148, 107, 139, 189, 128, 51, 96, 190, 234, 47, 139, 190, 164, 202, 137, 191, 172, 70, 100, 61, 120, 103, 40, 190, 239, 203, 200, 61, 169, 24, 147, 60, 183, 26, 189, 60, 237, 4, 147, 190, 192, 16, 153, 191, 250, 21, 146, 60, 199, 136, 37, 61, 119, 231, 226, 61, 144, 33, 153, 189, 205, 10, 132, 190, 120, 88, 65, 62, 117, 110, 168, 190, 141, 188, 124, 189, 196, 74, 19, 190, 88, 242, 29, 190, 17, 204, 255, 61, 18, 128, 223, 190, 217, 69, 138, 189, 58, 8, 160, 190, 209, 79, 223, 189, 68, 224, 111, 191, 3, 138, 175, 61, 77, 66, 156, 190, 113, 182, 168, 61, 57, 44, 132, 62, 127, 130, 36, 191, 180, 26, 41, 62, 25, 28, 45, 191, 246, 181, 59, 190, 211, 235, 196, 189, 91, 143, 245, 190, 203, 38, 22, 189, 10, 76, 20, 62, 172, 63, 152, 62, 75, 4, 251, 189, 199, 4, 138, 190, 43, 223, 220, 190, 142, 242, 236, 190, 75, 200, 146, 191, 143, 125, 161, 190, 194, 56, 3, 190, 187, 3, 149, 190, 147, 166, 209, 190, 250, 141, 47, 62, 200, 27, 182, 60, 69, 199, 92, 62, 74, 179, 86, 62, 224, 245, 234, 61, 123, 49, 82, 61, 105, 163, 9, 62, 214, 28, 63, 62, 21, 155, 5, 62, 215, 130, 189, 190, 32, 38, 31, 190, 20, 0, 11, 62, 235, 215, 208, 190, 125, 130, 121, 191, 17, 249, 232, 190, 122, 15, 25, 191, 62, 127, 17, 62, 19, 33, 130, 187, 88, 152, 141, 190, 117, 32, 131, 62, 133, 254, 41, 63, 244, 233, 73, 62, 179, 174, 41, 190, 12, 192, 44, 189, 14, 84, 234, 189, 227, 217, 8, 62, 20, 234, 206, 60, 180, 50, 135, 62, 137, 163, 128, 62, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 130, 130, 245, 60, 6, 84, 115, 189, 171, 135, 132, 61, 152, 216, 248, 189, 82, 70, 219, 189, 195, 50, 14, 189, 209, 10, 51, 190, 255, 204, 71, 189, 223, 59, 96, 189, 205, 58, 80, 188, 0, 147, 202, 61, 56, 223, 110, 188, 131, 152, 81, 189, 186, 38, 182, 189, 143, 185, 96, 187, 24, 3, 136, 189, 206, 41, 13, 62, 73, 161, 18, 190, 27, 167, 223, 188, 93, 97, 63, 189, 95, 203, 169, 189, 144, 229, 69, 190, 221, 238, 189, 188, 251, 165, 150, 61, 201, 209, 236, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 34, 110, 185, 189, 165, 45, 16, 189, 195, 56, 155, 189, 124, 63, 55, 61, 92, 77, 35, 61, 54, 167, 220, 189, 53, 162, 186, 189, 38, 61, 17, 190, 198, 28, 172, 189, 171, 32, 34, 190, 192, 13, 60, 189, 160, 141, 93, 61, 124, 144, 73, 190, 141, 231, 223, 189, 208, 167, 56, 190, 193, 78, 139, 61, 76, 77, 13, 62, 13, 96, 44, 190, 69, 80, 193, 61, 61, 206, 174, 61, 164, 99, 37, 190, 77, 4, 51, 60, 49, 212, 29, 62, 158, 251, 209, 61, 200, 167, 159, 61, 88, 249, 12, 61, 42, 245, 208, 60, 87, 233, 82, 190, 34, 162, 105, 61, 215, 233, 249, 189, 226, 206, 21, 190, 30, 243, 85, 61, 237, 234, 2, 189, 119, 121, 127, 188, 133, 227, 101, 62, 13, 113, 254, 189, 190, 88, 4, 60, 66, 64, 56, 190, 181, 74, 166, 61, 100, 117, 99, 61, 146, 82, 199, 61, 105, 59, 11, 63, 243, 134, 145, 62, 168, 169, 32, 190, 48, 109, 185, 189, 253, 176, 71, 62, 63, 52, 81, 61, 108, 178, 51, 62, 130, 23, 156, 190, 140, 151, 234, 61, 214, 232, 203, 61, 71, 118, 102, 190, 112, 224, 22, 62, 185, 64, 34, 62, 4, 225, 79, 190, 235, 77, 158, 61, 1, 238, 101, 189, 29, 46, 165, 62, 2, 170, 179, 59, 11, 147, 26, 190, 247, 245, 108, 62, 123, 226, 215, 60, 4, 64, 252, 189, 235, 247, 224, 61, 124, 126, 133, 191, 54, 33, 70, 189, 127, 95, 103, 191, 22, 207, 134, 188, 254, 64, 153, 191, 35, 37, 182, 61, 212, 245, 137, 190, 106, 178, 126, 191, 229, 171, 214, 190, 153, 13, 235, 190, 240, 84, 14, 188, 122, 211, 122, 61, 81, 107, 237, 61, 50, 98, 112, 191, 158, 160, 138, 190, 79, 198, 94, 62, 136, 151, 207, 61, 102, 147, 199, 61, 181, 118, 82, 185, 232, 65, 199, 61, 126, 9, 90, 189, 116, 114, 1, 191, 149, 36, 10, 191, 52, 14, 45, 62, 131, 145, 84, 61, 102, 119, 40, 190, 235, 174, 248, 189, 73, 194, 65, 62, 110, 240, 234, 188, 143, 252, 89, 61, 132, 100, 103, 188, 190, 97, 201, 57, 254, 164, 2, 62, 132, 43, 209, 189, 198, 119, 128, 61, 79, 151, 181, 190, 137, 36, 95, 62, 44, 23, 138, 190, 111, 105, 4, 191, 160, 152, 78, 62, 215, 115, 197, 61, 109, 55, 154, 62, 151, 108, 248, 189, 156, 229, 224, 61, 98, 155, 247, 188, 123, 105, 158, 62, 129, 168, 24, 190, 141, 115, 117, 189, 152, 118, 193, 61, 146, 35, 154, 190, 42, 155, 94, 188, 112, 99, 173, 61, 224, 79, 18, 63, 87, 64, 113, 60, 154, 45, 120, 62, 139, 73, 177, 190, 193, 245, 173, 190, 85, 4, 227, 62, 48, 155, 17, 191, 86, 250, 13, 190, 82, 154, 33, 62, 39, 95, 224, 60, 180, 182, 63, 62, 111, 219, 48, 190, 55, 207, 175, 188, 102, 116, 95, 190, 236, 194, 21, 62, 245, 239, 96, 62, 11, 238, 241, 189, 62, 44, 213, 61, 249, 89, 123, 189, 195, 209, 36, 189, 94, 72, 22, 189, 179, 119, 145, 62, 90, 167, 129, 191, 87, 88, 59, 62, 2, 54, 6, 190, 53, 222, 108, 188, 81, 29, 111, 62, 249, 119, 141, 190, 37, 148, 83, 62, 208, 209, 89, 190, 29, 243, 139, 61, 254, 125, 229, 61, 114, 231, 11, 62, 69, 30, 11, 62, 6, 5, 239, 188, 102, 31, 115, 191, 103, 93, 0, 191, 237, 24, 130, 190, 202, 4, 151, 189, 197, 136, 103, 61, 235, 198, 18, 62, 101, 100, 238, 190, 247, 80, 143, 62, 161, 155, 240, 61, 245, 12, 155, 189, 55, 91, 191, 60, 116, 146, 196, 61, 126, 201, 88, 60, 25, 69, 134, 62, 224, 235, 85, 61, 95, 123, 216, 61, 249, 85, 94, 62, 51, 35, 142, 62, 245, 47, 181, 62, 240, 203, 184, 61, 51, 244, 238, 190, 15, 106, 25, 62, 19, 91, 192, 62, 234, 121, 95, 190, 77, 28, 111, 190, 137, 152, 119, 191, 23, 116, 68, 62, 216, 244, 4, 190, 74, 3, 243, 186, 72, 104, 112, 190, 79, 28, 135, 61, 73, 35, 33, 62, 100, 241, 119, 60, 126, 197, 158, 58, 233, 241, 42, 62, 3, 167, 0, 62, 66, 8, 54, 62, 173, 47, 224, 61, 95, 36, 81, 61, 125, 171, 85, 190, 47, 43, 36, 62, 218, 138, 43, 61, 213, 113, 65, 190, 100, 141, 240, 189, 115, 62, 193, 189, 2, 26, 165, 59, 239, 204, 221, 189, 140, 193, 45, 62, 89, 202, 157, 61, 34, 173, 71, 61, 245, 122, 189, 60, 244, 231, 241, 189, 231, 117, 210, 61, 173, 122, 215, 188, 50, 0, 21, 189, 253, 99, 190, 189, 151, 24, 0, 61, 43, 200, 9, 188, 64, 176, 32, 190, 88, 99, 113, 61, 110, 147, 178, 61, 0, 249, 224, 61, 93, 246, 45, 190, 34, 122, 254, 61, 26, 19, 166, 189, 146, 23, 238, 189, 52, 255, 19, 190, 187, 119, 20, 190, 114, 126, 252, 189, 107, 16, 15, 190, 94, 93, 96, 189, 183, 86, 228, 187, 101, 205, 53, 188, 153, 235, 72, 190, 11, 97, 27, 191, 164, 95, 94, 190, 8, 243, 128, 189, 253, 229, 240, 190, 184, 65, 136, 62, 19, 77, 112, 191, 59, 150, 178, 59, 190, 43, 6, 62, 138, 99, 181, 187, 210, 170, 180, 61, 27, 54, 5, 62, 47, 137, 159, 62, 15, 54, 153, 190, 113, 59, 211, 61, 35, 209, 163, 189, 176, 177, 47, 190, 211, 93, 171, 61, 109, 109, 63, 62, 87, 208, 84, 190, 197, 91, 126, 191, 124, 86, 207, 61, 49, 188, 145, 190, 1, 66, 160, 190, 68, 232, 40, 62, 187, 154, 161, 188, 181, 5, 106, 190, 139, 226, 8, 60, 180, 64, 227, 61, 232, 72, 178, 60, 207, 189, 176, 190, 49, 200, 128, 61, 219, 172, 103, 61, 27, 75, 176, 61, 166, 123, 222, 188, 53, 65, 250, 61, 210, 61, 91, 62, 83, 204, 33, 62, 156, 161, 138, 189, 134, 169, 25, 61, 164, 249, 82, 62, 139, 235, 145, 62, 200, 137, 160, 62, 243, 43, 195, 190, 35, 168, 123, 61, 230, 252, 229, 61, 130, 18, 152, 61, 226, 18, 40, 62, 159, 236, 67, 191, 78, 46, 189, 187, 231, 239, 15, 190, 115, 174, 209, 188, 237, 82, 157, 190, 226, 118, 226, 60, 26, 70, 10, 61, 228, 158, 102, 62, 210, 43, 80, 62, 165, 169, 170, 62, 102, 20, 245, 61, 215, 233, 0, 62, 176, 75, 128, 188, 135, 129, 19, 61, 251, 97, 80, 189, 87, 100, 94, 189, 104, 101, 93, 61, 10, 62, 14, 62, 139, 26, 63, 62, 227, 139, 22, 189, 67, 19, 111, 62, 132, 55, 91, 190, 80, 106, 187, 190, 133, 208, 40, 62, 96, 160, 101, 190, 255, 82, 90, 189, 63, 85, 129, 62, 68, 137, 132, 61, 77, 154, 49, 60, 141, 47, 234, 61, 159, 153, 146, 62, 190, 73, 254, 60, 33, 197, 65, 60, 9, 143, 102, 62, 144, 147, 68, 190, 164, 93, 147, 189, 13, 187, 21, 190, 178, 45, 186, 61, 152, 164, 196, 61, 76, 185, 199, 62, 78, 28, 166, 61, 51, 218, 119, 62, 184, 80, 215, 190, 142, 202, 159, 190, 166, 66, 47, 62, 195, 102, 135, 62, 135, 159, 143, 190, 203, 18, 43, 189, 139, 50, 32, 189, 6, 164, 4, 191, 104, 140, 8, 190, 236, 242, 38, 190, 5, 49, 70, 190, 5, 70, 42, 62, 31, 188, 85, 191, 72, 117, 126, 188, 130, 181, 199, 62, 211, 68, 27, 62, 238, 88, 192, 190, 101, 237, 183, 61, 208, 75, 237, 61, 197, 33, 224, 190, 92, 124, 190, 61, 26, 156, 165, 190, 80, 216, 172, 190, 213, 252, 113, 61, 20, 79, 160, 62, 26, 23, 121, 190, 249, 244, 128, 191, 199, 39, 128, 59, 135, 59, 94, 189, 196, 123, 94, 191, 103, 171, 143, 190, 67, 55, 201, 61, 21, 10, 138, 190, 142, 228, 103, 62, 44, 205, 162, 61, 38, 221, 142, 190, 33, 47, 86, 190, 27, 0, 180, 61, 141, 43, 182, 191, 83, 37, 176, 62, 30, 230, 143, 191, 48, 252, 58, 189, 45, 208, 177, 191, 45, 197, 49, 62, 194, 46, 38, 61, 73, 62, 168, 191, 159, 33, 52, 62, 225, 77, 138, 186, 107, 167, 148, 62, 228, 33, 8, 190, 93, 133, 180, 190, 42, 213, 247, 188, 68, 194, 252, 191, 111, 102, 88, 62, 131, 43, 50, 60, 135, 81, 25, 189, 121, 172, 230, 62, 74, 6, 176, 61, 164, 106, 181, 59, 220, 200, 113, 190, 224, 194, 147, 190, 63, 157, 76, 62, 132, 125, 57, 62, 252, 144, 250, 60, 151, 72, 147, 190, 41, 197, 0, 61, 239, 168, 76, 191, 124, 18, 182, 62, 163, 31, 127, 189, 39, 134, 25, 190, 218, 192, 131, 189, 83, 103, 158, 189, 71, 178, 13, 190, 114, 124, 226, 61, 141, 161, 183, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 234, 200, 61, 55, 83, 37, 62, 44, 124, 229, 189, 250, 185, 199, 189, 65, 61, 212, 61, 110, 9, 183, 189, 202, 68, 208, 188, 75, 9, 192, 188, 137, 252, 9, 189, 53, 0, 196, 61, 197, 144, 116, 188, 254, 94, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 163, 20, 89, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 247, 73, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 252, 202, 81, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 170, 83, 170, 188, 121, 187, 70, 190, 124, 82, 115, 60, 114, 77, 197, 61, 15, 173, 103, 187, 160, 223, 151, 59, 217, 190, 217, 190, 27, 22, 156, 189, 114, 202, 191, 62, 222, 11, 23, 62, 141, 216, 221, 190, 21, 119, 56, 62, 57, 91, 92, 62, 142, 255, 21, 188, 155, 11, 133, 61, 247, 247, 4, 190, 223, 132, 39, 190, 175, 106, 170, 61, 90, 68, 59, 62, 30, 109, 238, 189, 32, 211, 147, 191, 136, 179, 52, 62, 56, 170, 140, 61, 6, 90, 104, 191, 89, 50, 14, 191, 19, 102, 58, 62, 117, 137, 143, 189, 205, 116, 229, 189, 104, 199, 61, 62, 216, 58, 168, 190, 88, 191, 213, 61, 2, 231, 28, 62, 210, 17, 0, 191, 238, 3, 175, 60, 120, 6, 111, 190, 163, 239, 218, 189, 243, 208, 218, 189, 151, 190, 205, 61, 186, 110, 138, 191, 87, 192, 137, 190, 72, 48, 26, 189, 127, 174, 1, 190, 7, 196, 150, 189, 186, 90, 235, 189, 24, 182, 104, 61, 59, 106, 71, 190, 80, 190, 241, 60, 215, 136, 77, 189, 241, 173, 39, 191, 12, 78, 191, 61, 38, 167, 21, 190, 13, 159, 147, 61, 253, 138, 251, 190, 68, 52, 147, 190, 28, 237, 129, 189, 233, 159, 171, 60, 170, 131, 143, 61, 27, 207, 178, 62, 153, 22, 115, 189, 153, 95, 38, 62, 178, 167, 131, 62, 223, 122, 126, 190, 39, 33, 19, 188, 98, 99, 242, 61, 113, 64, 134, 61, 234, 139, 58, 62, 92, 211, 158, 61, 237, 140, 198, 187, 61, 67, 68, 189, 212, 30, 104, 191, 81, 110, 23, 63, 96, 166, 212, 189, 20, 151, 162, 62, 31, 143, 152, 62, 204, 193, 170, 62, 233, 97, 176, 190, 99, 15, 242, 189, 110, 235, 68, 61, 4, 71, 91, 190, 77, 45, 34, 61, 208, 245, 158, 190, 35, 176, 174, 62, 171, 226, 156, 188, 123, 27, 63, 190, 22, 86, 94, 191, 172, 33, 0, 62, 248, 210, 162, 189, 239, 72, 145, 62, 218, 46, 251, 62, 102, 64, 166, 62, 137, 67, 12, 62, 138, 168, 78, 191, 77, 234, 60, 61, 141, 44, 47, 62, 180, 103, 13, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 154, 20, 62, 24, 55, 25, 62, 78, 160, 3, 62, 185, 76, 150, 59, 236, 162, 239, 189, 217, 171, 205, 61, 174, 129, 117, 190, 178, 165, 18, 61, 185, 204, 54, 61, 208, 3, 182, 59, 231, 223, 141, 62, 110, 64, 39, 190, 120, 168, 241, 189, 198, 2, 40, 190, 189, 238, 36, 61, 199, 223, 241, 188, 119, 44, 163, 62, 245, 202, 99, 62, 226, 239, 77, 61, 23, 60, 130, 190, 31, 245, 189, 62, 206, 24, 224, 61, 91, 49, 241, 59, 132, 21, 0, 62, 243, 0, 109, 62, 134, 189, 21, 62, 214, 134, 123, 62, 202, 172, 54, 190, 229, 246, 211, 189, 78, 151, 96, 62, 250, 123, 176, 62, 93, 27, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 227, 107, 191, 52, 29, 222, 189, 43, 218, 217, 62, 36, 115, 37, 191, 241, 208, 17, 61, 5, 23, 16, 63, 35, 86, 16, 190, 217, 144, 41, 191, 122, 57, 133, 191, 25, 238, 177, 190, 141, 88, 29, 190, 136, 154, 158, 62, 200, 200, 135, 63, 194, 230, 162, 62, 66, 255, 173, 60, 180, 177, 150, 189, 135, 26, 56, 61, 121, 171, 254, 190, 146, 176, 130, 190, 179, 206, 242, 190, 162, 28, 180, 62, 157, 140, 218, 189, 23, 52, 208, 190, 70, 255, 139, 62, 133, 250, 144, 62, 79, 200, 214, 190, 123, 190, 71, 191, 145, 148, 13, 190, 106, 196, 250, 189, 75, 185, 160, 190, 11, 132, 226, 189, 24, 199, 141, 62, 62, 242, 245, 62, 149, 224, 138, 190, 84, 21, 186, 61, 212, 250, 224, 189, 128, 74, 10, 190, 13, 187, 251, 189, 100, 247, 147, 62, 216, 106, 99, 62, 137, 87, 146, 62, 173, 69, 73, 62, 149, 29, 20, 191, 102, 48, 129, 61, 168, 235, 16, 187, 123, 229, 46, 62, 64, 174, 187, 61, 213, 11, 200, 61, 31, 148, 138, 190, 210, 87, 165, 190, 38, 98, 221, 189, 78, 214, 251, 62, 244, 51, 8, 190, 121, 207, 253, 60, 53, 206, 162, 190, 112, 127, 27, 190, 99, 43, 10, 190, 139, 29, 247, 190, 122, 176, 145, 188, 152, 64, 119, 189, 188, 230, 9, 62, 166, 238, 107, 190, 80, 231, 40, 191, 22, 228, 102, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 13, 205, 60, 190, 14, 27, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {171, 34, 146, 63, 66, 25, 118, 63, 88, 246, 248, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 70, 251, 190, 126, 163, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}