// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 251, 139, 142, 62, 131, 112, 20, 63, 251, 143, 28, 63, 233, 112, 72, 191, 65, 93, 24, 63, 182, 79, 197, 62, 28, 219, 47, 189, 182, 150, 14, 190, 175, 3, 51, 63, 109, 247, 238, 189, 166, 69, 109, 189, 68, 109, 11, 191, 31, 198, 64, 190, 136, 67, 195, 62, 234, 175, 37, 63, 224, 177, 109, 190, 184, 249, 9, 190, 103, 54, 69, 191, 1, 46, 248, 62, 254, 170, 240, 190, 121, 109, 140, 190, 244, 87, 73, 62, 148, 99, 74, 62, 152, 253, 26, 63, 21, 62, 59, 63, 5, 13, 207, 190, 179, 241, 2, 190, 116, 106, 131, 62, 84, 74, 68, 191, 74, 110, 219, 61, 27, 235, 176, 190, 231, 29, 179, 190, 238, 135, 236, 189, 91, 237, 8, 63, 212, 52, 0, 63, 66, 162, 4, 63, 61, 25, 148, 62, 176, 115, 26, 63, 252, 40, 191, 189, 81, 254, 109, 189, 111, 15, 118, 191, 46, 39, 153, 62, 242, 125, 6, 63, 249, 17, 113, 63, 12, 129, 2, 63, 2, 170, 22, 191, 143, 63, 79, 63, 203, 164, 31, 62, 112, 98, 0, 63, 116, 56, 107, 63, 30, 185, 200, 62, 1, 119, 62, 190, 121, 80, 217, 62, 208, 85, 48, 60, 253, 252, 247, 62, 126, 89, 222, 60, 68, 92, 245, 62, 14, 220, 63, 190, 91, 3, 152, 190, 137, 198, 19, 62, 80, 3, 110, 190, 172, 223, 104, 191, 112, 173, 84, 190, 224, 143, 197, 62, 114, 39, 7, 62, 173, 42, 84, 63, 221, 31, 0, 63, 84, 33, 20, 61, 200, 87, 51, 190, 148, 49, 68, 191, 127, 142, 23, 191, 45, 132, 132, 189, 211, 34, 69, 191, 240, 149, 128, 62, 71, 45, 64, 189, 245, 246, 28, 63, 182, 84, 58, 191, 165, 117, 2, 190, 55, 24, 143, 190, 188, 251, 133, 190, 202, 175, 6, 191, 191, 223, 27, 62, 206, 220, 49, 60, 101, 84, 38, 191, 25, 35, 32, 63, 200, 66, 217, 62, 5, 143, 189, 62, 213, 84, 168, 189, 208, 142, 190, 191, 221, 23, 0, 190, 206, 195, 199, 189, 143, 141, 159, 190, 92, 244, 29, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 183, 23, 91, 62, 112, 114, 218, 62, 254, 185, 174, 190, 9, 48, 131, 189, 191, 36, 126, 190, 29, 248, 185, 61, 102, 70, 31, 191, 38, 60, 154, 61, 98, 244, 170, 61, 64, 196, 154, 189, 128, 249, 10, 63, 176, 82, 75, 61, 46, 184, 209, 62, 87, 191, 130, 190, 188, 154, 9, 63, 32, 246, 8, 63, 40, 201, 26, 191, 149, 244, 12, 63, 156, 224, 94, 62, 22, 169, 38, 191, 133, 228, 166, 190, 117, 31, 27, 62, 221, 176, 245, 190, 149, 97, 30, 63, 228, 6, 47, 190, 217, 204, 152, 62, 154, 45, 163, 190, 2, 45, 132, 62, 200, 90, 12, 63, 177, 143, 205, 62, 85, 90, 50, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 167, 172, 103, 190, 98, 149, 52, 62, 149, 214, 147, 191, 203, 36, 190, 190, 103, 8, 33, 191, 192, 237, 70, 188, 7, 186, 168, 190, 195, 5, 122, 191, 27, 213, 98, 191, 136, 234, 147, 190, 188, 121, 233, 57, 219, 84, 28, 63, 187, 95, 19, 62, 140, 105, 64, 191, 236, 197, 159, 61, 145, 26, 9, 62, 234, 6, 7, 63, 5, 16, 182, 60, 75, 17, 230, 62, 185, 178, 156, 60, 105, 100, 188, 190, 166, 187, 199, 190, 145, 103, 178, 190, 53, 176, 126, 62, 184, 44, 72, 62, 47, 77, 64, 191, 105, 39, 139, 190, 240, 115, 61, 62, 22, 172, 18, 60, 120, 137, 171, 62, 148, 2, 72, 189, 17, 1, 242, 189, 180, 73, 38, 189, 69, 220, 202, 189, 167, 199, 139, 61, 246, 59, 32, 62, 96, 200, 155, 61, 195, 160, 137, 190, 93, 165, 149, 190, 102, 41, 244, 61, 223, 66, 145, 62, 227, 231, 167, 62, 29, 197, 73, 190, 72, 164, 41, 190, 78, 237, 9, 61, 80, 28, 64, 62, 8, 175, 159, 189, 240, 65, 52, 61, 221, 193, 221, 190, 235, 75, 197, 189, 70, 73, 53, 62, 145, 145, 46, 62, 84, 84, 200, 188, 150, 141, 59, 62, 140, 123, 149, 190, 100, 37, 169, 60, 222, 31, 173, 190, 240, 150, 158, 62, 95, 125, 32, 190, 99, 109, 77, 189, 205, 140, 137, 62, 35, 45, 79, 190, 237, 149, 92, 188, 106, 230, 122, 61, 47, 156, 19, 62, 219, 178, 110, 62, 97, 31, 162, 62, 94, 205, 109, 62, 112, 37, 110, 62, 53, 155, 255, 189, 231, 204, 22, 62, 107, 28, 174, 62, 73, 183, 255, 62, 26, 138, 78, 189, 128, 218, 172, 60, 141, 26, 2, 191, 246, 110, 2, 189, 193, 54, 177, 62, 88, 36, 146, 190, 155, 191, 118, 62, 21, 83, 28, 191, 172, 50, 104, 62, 0, 141, 34, 191, 221, 79, 86, 190, 117, 178, 149, 190, 59, 52, 197, 62, 111, 239, 252, 62, 50, 172, 197, 61, 117, 215, 42, 62, 88, 123, 108, 190, 199, 21, 154, 62, 251, 36, 119, 189, 128, 106, 130, 190, 188, 143, 140, 190, 131, 244, 216, 190, 181, 213, 36, 62, 57, 42, 249, 190, 237, 172, 164, 61, 104, 228, 76, 191, 194, 107, 87, 61, 151, 199, 135, 191, 240, 97, 122, 62, 14, 154, 194, 190, 88, 116, 147, 191, 99, 252, 201, 189, 201, 162, 33, 191, 138, 239, 92, 62, 206, 141, 10, 190, 55, 254, 115, 62, 27, 210, 81, 191, 225, 234, 189, 189, 235, 162, 50, 187, 111, 67, 56, 189, 130, 6, 227, 61, 171, 44, 156, 61, 9, 11, 100, 190, 144, 172, 160, 190, 233, 39, 247, 190, 58, 105, 104, 191, 191, 35, 141, 187, 73, 75, 138, 62, 77, 48, 34, 60, 90, 67, 46, 190, 174, 154, 41, 60, 34, 144, 16, 190, 195, 43, 69, 62, 192, 81, 177, 60, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 17, 129, 143, 60, 5, 67, 248, 190, 182, 53, 171, 60, 14, 22, 228, 189, 236, 45, 112, 59, 106, 226, 228, 189, 90, 158, 148, 61, 140, 187, 61, 61, 109, 2, 213, 62, 115, 80, 31, 62, 225, 225, 111, 62, 201, 10, 100, 190, 177, 10, 131, 62, 156, 138, 96, 189, 112, 242, 85, 61, 197, 185, 206, 190, 147, 35, 255, 190, 93, 54, 87, 189, 137, 239, 231, 189, 230, 202, 84, 62, 19, 240, 108, 190, 111, 60, 84, 61, 110, 120, 56, 61, 95, 37, 46, 189, 91, 4, 157, 190, 161, 136, 250, 62, 38, 124, 37, 190, 100, 253, 149, 61, 153, 54, 29, 62, 179, 138, 141, 61, 100, 203, 122, 62, 205, 100, 11, 190, 160, 36, 216, 61, 119, 154, 202, 189, 113, 194, 115, 62, 103, 217, 163, 61, 132, 98, 32, 62, 127, 24, 189, 189, 22, 180, 157, 62, 150, 125, 150, 60, 142, 162, 206, 62, 37, 63, 204, 62, 182, 168, 244, 187, 153, 179, 45, 190, 86, 185, 6, 190, 215, 166, 114, 62, 81, 201, 88, 189, 19, 21, 198, 189, 128, 60, 197, 189, 19, 2, 164, 188, 190, 194, 138, 186, 252, 241, 80, 61, 49, 88, 13, 60, 194, 160, 175, 61, 56, 251, 196, 62, 69, 127, 170, 189, 87, 214, 205, 190, 103, 80, 73, 62, 133, 144, 70, 62, 81, 142, 42, 190, 67, 139, 71, 189, 228, 116, 22, 61, 61, 129, 148, 60, 132, 163, 211, 189, 130, 245, 85, 191, 203, 70, 78, 62, 179, 52, 90, 191, 56, 99, 168, 59, 96, 218, 87, 191, 247, 66, 200, 61, 106, 53, 198, 189, 243, 155, 107, 191, 54, 231, 174, 58, 78, 184, 191, 190, 43, 198, 232, 189, 219, 24, 180, 62, 35, 184, 57, 62, 187, 143, 1, 191, 9, 131, 46, 191, 93, 48, 46, 62, 60, 56, 84, 62, 83, 70, 4, 63, 165, 253, 138, 189, 52, 59, 72, 189, 25, 234, 200, 190, 35, 133, 208, 190, 111, 70, 142, 190, 131, 61, 179, 61, 227, 77, 198, 189, 64, 234, 162, 190, 231, 22, 240, 188, 226, 14, 17, 190, 73, 175, 158, 61, 13, 197, 5, 62, 113, 212, 228, 190, 230, 80, 52, 188, 55, 0, 14, 59, 98, 164, 13, 62, 247, 70, 15, 62, 126, 52, 0, 189, 166, 41, 154, 60, 238, 251, 155, 190, 91, 144, 121, 62, 173, 147, 146, 60, 184, 7, 205, 61, 93, 186, 142, 62, 79, 203, 69, 189, 63, 44, 226, 190, 138, 194, 44, 191, 199, 128, 234, 62, 161, 219, 138, 190, 162, 4, 155, 190, 119, 52, 226, 189, 70, 155, 30, 190, 102, 123, 133, 190, 201, 156, 63, 190, 165, 165, 47, 62, 43, 247, 169, 189, 26, 60, 19, 61, 51, 223, 73, 190, 169, 11, 229, 190, 234, 85, 27, 62, 141, 162, 152, 60, 124, 9, 153, 189, 221, 21, 44, 190, 133, 215, 99, 62, 21, 142, 60, 189, 134, 10, 158, 188, 66, 39, 58, 190, 164, 30, 28, 190, 98, 194, 9, 191, 59, 150, 202, 189, 178, 118, 117, 190, 32, 191, 76, 62, 186, 57, 10, 191, 147, 125, 70, 190, 159, 178, 55, 190, 62, 193, 141, 190, 183, 87, 80, 60, 198, 202, 106, 62, 219, 109, 47, 62, 228, 221, 21, 191, 137, 27, 65, 61, 114, 152, 97, 62, 216, 4, 34, 189, 234, 108, 145, 60, 168, 140, 112, 62, 211, 245, 28, 190, 203, 236, 4, 191, 140, 15, 50, 190, 117, 85, 111, 191, 223, 6, 17, 62, 41, 168, 242, 61, 103, 151, 141, 190, 194, 13, 206, 188, 139, 11, 193, 62, 130, 7, 155, 62, 20, 179, 83, 62, 240, 81, 10, 189, 77, 60, 231, 61, 229, 71, 92, 61, 47, 234, 79, 189, 82, 175, 141, 190, 130, 2, 79, 190, 250, 202, 148, 190, 88, 253, 136, 62, 184, 137, 25, 190, 120, 199, 67, 189, 200, 227, 212, 188, 152, 68, 241, 59, 33, 70, 65, 61, 30, 6, 211, 189, 192, 141, 143, 61, 36, 23, 137, 190, 192, 241, 126, 62, 250, 201, 139, 188, 197, 164, 145, 190, 1, 72, 178, 61, 141, 135, 79, 60, 207, 14, 17, 62, 56, 33, 53, 60, 57, 122, 130, 190, 175, 161, 22, 191, 39, 11, 31, 190, 21, 160, 208, 189, 143, 30, 27, 61, 208, 78, 139, 190, 168, 14, 73, 62, 89, 34, 165, 62, 70, 44, 33, 62, 6, 164, 126, 59, 169, 76, 27, 189, 212, 183, 191, 189, 214, 225, 73, 62, 179, 19, 34, 62, 101, 86, 136, 190, 91, 71, 203, 61, 226, 255, 143, 191, 208, 125, 31, 62, 185, 97, 13, 60, 82, 57, 146, 62, 188, 114, 18, 62, 25, 89, 32, 62, 17, 37, 161, 188, 138, 114, 178, 190, 207, 98, 147, 62, 208, 216, 154, 61, 223, 74, 64, 62, 0, 126, 179, 189, 229, 75, 80, 61, 35, 249, 100, 190, 127, 16, 161, 190, 78, 251, 78, 191, 76, 249, 75, 61, 120, 103, 40, 190, 103, 61, 30, 62, 150, 128, 13, 62, 145, 224, 157, 188, 246, 101, 135, 190, 55, 67, 129, 191, 129, 166, 251, 60, 16, 204, 40, 188, 39, 123, 159, 61, 144, 33, 153, 189, 215, 40, 58, 190, 117, 251, 47, 62, 154, 138, 4, 190, 65, 162, 44, 189, 95, 68, 146, 189, 23, 60, 9, 190, 17, 204, 255, 61, 94, 170, 62, 190, 217, 69, 138, 189, 58, 8, 160, 190, 201, 241, 250, 189, 177, 78, 7, 191, 84, 155, 114, 61, 155, 21, 152, 190, 255, 75, 149, 61, 195, 31, 117, 62, 138, 173, 251, 190, 195, 9, 25, 62, 188, 121, 208, 190, 246, 181, 59, 190, 211, 235, 196, 189, 150, 83, 134, 190, 203, 38, 22, 189, 3, 80, 1, 62, 230, 215, 132, 62, 75, 4, 251, 189, 33, 192, 159, 189, 74, 46, 215, 190, 127, 121, 90, 190, 140, 192, 97, 191, 129, 125, 161, 190, 194, 56, 3, 190, 74, 60, 112, 190, 134, 71, 187, 190, 156, 150, 203, 189, 24, 64, 162, 61, 184, 99, 90, 60, 216, 127, 130, 62, 188, 180, 163, 61, 99, 226, 244, 189, 88, 217, 255, 61, 147, 9, 211, 189, 147, 133, 9, 62, 184, 157, 135, 190, 59, 87, 26, 189, 51, 94, 147, 189, 166, 190, 59, 190, 234, 188, 35, 191, 129, 132, 135, 189, 21, 68, 242, 190, 103, 189, 224, 58, 35, 48, 111, 61, 145, 184, 102, 190, 244, 164, 237, 61, 190, 129, 34, 63, 102, 215, 51, 62, 119, 13, 239, 189, 82, 99, 166, 189, 172, 102, 138, 189, 29, 162, 49, 62, 173, 14, 172, 60, 164, 102, 63, 62, 141, 73, 101, 189, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 130, 130, 245, 60, 6, 84, 115, 189, 171, 135, 132, 61, 152, 216, 248, 189, 82, 70, 219, 189, 195, 50, 14, 189, 209, 10, 51, 190, 255, 204, 71, 189, 223, 59, 96, 189, 205, 58, 80, 188, 0, 147, 202, 61, 56, 223, 110, 188, 131, 152, 81, 189, 186, 38, 182, 189, 143, 185, 96, 187, 24, 3, 136, 189, 206, 41, 13, 62, 73, 161, 18, 190, 27, 167, 223, 188, 93, 97, 63, 189, 95, 203, 169, 189, 144, 229, 69, 190, 221, 238, 189, 188, 251, 165, 150, 61, 201, 209, 236, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 34, 110, 185, 189, 165, 45, 16, 189, 195, 56, 155, 189, 124, 63, 55, 61, 92, 77, 35, 61, 54, 167, 220, 189, 53, 162, 186, 189, 38, 61, 17, 190, 198, 28, 172, 189, 171, 32, 34, 190, 192, 13, 60, 189, 160, 141, 93, 61, 124, 144, 73, 190, 141, 231, 223, 189, 208, 167, 56, 190, 193, 78, 139, 61, 76, 77, 13, 62, 13, 96, 44, 190, 69, 80, 193, 61, 61, 206, 174, 61, 164, 99, 37, 190, 77, 4, 51, 60, 49, 212, 29, 62, 158, 251, 209, 61, 200, 167, 159, 61, 88, 249, 12, 61, 42, 245, 208, 60, 87, 233, 82, 190, 34, 162, 105, 61, 215, 233, 249, 189, 226, 206, 21, 190, 30, 243, 85, 61, 124, 141, 154, 189, 218, 224, 23, 60, 110, 6, 110, 62, 14, 70, 141, 189, 139, 90, 165, 188, 204, 149, 37, 190, 224, 125, 255, 189, 119, 202, 40, 61, 255, 216, 135, 61, 8, 66, 248, 62, 58, 122, 137, 62, 255, 102, 100, 190, 136, 48, 15, 190, 226, 165, 103, 62, 255, 108, 122, 188, 153, 74, 88, 62, 124, 37, 189, 190, 213, 92, 74, 62, 196, 46, 103, 61, 38, 138, 84, 190, 114, 190, 21, 188, 142, 109, 29, 62, 197, 139, 77, 190, 157, 174, 5, 61, 255, 118, 224, 61, 179, 205, 144, 62, 85, 246, 167, 186, 131, 120, 36, 190, 237, 228, 50, 62, 7, 4, 185, 189, 89, 33, 216, 189, 235, 247, 224, 61, 165, 97, 54, 191, 86, 179, 170, 189, 16, 158, 108, 191, 116, 129, 118, 59, 3, 136, 135, 191, 214, 141, 238, 61, 16, 198, 99, 190, 235, 82, 130, 191, 255, 61, 179, 190, 63, 28, 146, 190, 55, 215, 175, 187, 178, 129, 16, 62, 98, 175, 54, 62, 91, 144, 116, 191, 99, 176, 150, 190, 161, 42, 14, 62, 125, 170, 32, 62, 82, 192, 21, 62, 47, 80, 20, 61, 232, 65, 199, 61, 92, 140, 167, 189, 120, 236, 11, 191, 187, 189, 204, 190, 190, 15, 19, 62, 150, 184, 168, 61, 244, 100, 13, 190, 175, 194, 224, 189, 251, 136, 100, 62, 108, 10, 34, 189, 159, 184, 81, 59, 132, 100, 103, 188, 190, 97, 201, 57, 111, 250, 8, 62, 110, 228, 186, 189, 81, 239, 143, 61, 66, 174, 149, 190, 155, 186, 104, 62, 175, 237, 56, 190, 106, 129, 160, 190, 23, 179, 78, 62, 0, 249, 218, 60, 167, 111, 81, 62, 36, 231, 236, 60, 22, 227, 235, 61, 46, 92, 89, 187, 120, 133, 154, 62, 120, 72, 11, 190, 79, 96, 6, 189, 195, 200, 197, 61, 216, 122, 140, 190, 35, 27, 66, 188, 28, 213, 32, 62, 167, 76, 32, 63, 183, 27, 29, 60, 17, 50, 50, 62, 144, 35, 18, 190, 30, 178, 135, 190, 44, 197, 206, 62, 95, 14, 230, 190, 123, 98, 201, 189, 21, 255, 38, 62, 140, 140, 202, 61, 90, 85, 82, 62, 111, 219, 48, 190, 64, 86, 58, 188, 3, 49, 109, 190, 234, 201, 188, 61, 194, 0, 91, 62, 79, 69, 28, 190, 72, 16, 226, 61, 249, 89, 123, 189, 255, 138, 115, 189, 174, 135, 136, 190, 176, 12, 58, 62, 230, 218, 20, 191, 109, 126, 81, 62, 165, 134, 4, 62, 246, 45, 29, 189, 87, 247, 151, 62, 83, 167, 122, 190, 114, 162, 124, 62, 127, 226, 249, 189, 98, 228, 143, 61, 137, 7, 209, 61, 114, 231, 11, 62, 50, 231, 241, 61, 232, 9, 172, 189, 228, 3, 58, 191, 50, 147, 18, 191, 130, 98, 214, 190, 202, 4, 151, 189, 59, 237, 85, 190, 125, 197, 61, 62, 42, 198, 147, 190, 203, 55, 87, 62, 161, 155, 240, 61, 179, 203, 148, 189, 77, 37, 191, 61, 34, 47, 144, 61, 131, 95, 246, 59, 73, 121, 140, 62, 1, 162, 18, 61, 101, 48, 206, 61, 84, 23, 91, 62, 22, 100, 150, 62, 157, 158, 134, 62, 215, 76, 197, 61, 148, 238, 242, 190, 89, 131, 208, 61, 53, 131, 174, 62, 130, 73, 52, 190, 130, 251, 184, 189, 93, 17, 38, 191, 24, 56, 70, 62, 39, 176, 41, 190, 134, 237, 184, 189, 49, 30, 55, 190, 139, 226, 92, 61, 46, 218, 32, 62, 60, 4, 48, 59, 243, 206, 99, 61, 31, 121, 62, 62, 5, 142, 250, 61, 239, 151, 28, 62, 75, 229, 229, 61, 213, 188, 96, 61, 22, 138, 135, 190, 47, 43, 36, 62, 207, 130, 151, 61, 170, 190, 35, 190, 233, 249, 173, 189, 115, 62, 193, 189, 148, 168, 19, 61, 239, 204, 221, 189, 140, 193, 45, 62, 38, 24, 230, 61, 226, 68, 146, 61, 254, 252, 64, 61, 203, 19, 226, 189, 37, 237, 9, 62, 243, 69, 170, 187, 108, 163, 163, 188, 174, 154, 136, 189, 214, 53, 84, 61, 209, 240, 197, 60, 1, 201, 5, 190, 56, 87, 187, 61, 29, 82, 179, 61, 0, 249, 224, 61, 32, 183, 11, 190, 34, 122, 254, 61, 24, 215, 165, 189, 146, 23, 238, 189, 61, 255, 247, 189, 187, 119, 20, 190, 7, 33, 252, 189, 107, 178, 231, 189, 18, 208, 30, 189, 53, 47, 205, 60, 101, 205, 53, 188, 231, 135, 187, 189, 41, 202, 96, 190, 55, 19, 189, 189, 224, 90, 206, 189, 54, 223, 77, 190, 126, 187, 118, 62, 113, 144, 202, 190, 188, 100, 101, 61, 161, 231, 225, 60, 69, 102, 140, 189, 95, 38, 161, 61, 13, 202, 28, 62, 176, 244, 138, 62, 235, 218, 134, 190, 174, 22, 213, 61, 198, 58, 132, 61, 72, 5, 103, 189, 253, 32, 184, 61, 78, 83, 61, 62, 204, 220, 66, 190, 164, 166, 239, 190, 45, 10, 8, 62, 182, 213, 193, 190, 43, 96, 14, 190, 139, 101, 148, 61, 9, 128, 175, 189, 80, 100, 124, 190, 39, 39, 245, 188, 22, 68, 220, 61, 67, 228, 129, 61, 123, 132, 246, 189, 49, 200, 128, 61, 35, 88, 114, 61, 105, 95, 180, 61, 246, 48, 33, 189, 90, 246, 233, 61, 155, 17, 92, 62, 51, 192, 16, 62, 28, 172, 114, 189, 120, 59, 37, 61, 177, 165, 131, 62, 106, 24, 31, 62, 186, 218, 156, 62, 156, 185, 192, 190, 107, 68, 70, 188, 128, 104, 128, 61, 219, 39, 204, 61, 17, 91, 73, 62, 77, 138, 5, 191, 109, 122, 96, 189, 238, 215, 33, 190, 34, 45, 143, 189, 98, 162, 119, 190, 139, 118, 228, 60, 119, 127, 22, 61, 217, 129, 92, 62, 123, 9, 103, 62, 56, 121, 184, 62, 204, 83, 243, 61, 17, 239, 206, 61, 122, 143, 51, 188, 105, 91, 16, 61, 255, 44, 169, 189, 87, 100, 94, 189, 228, 180, 157, 188, 205, 13, 213, 61, 106, 206, 72, 62, 61, 107, 152, 61, 196, 183, 72, 62, 254, 117, 19, 190, 232, 224, 199, 190, 200, 46, 27, 62, 97, 24, 8, 190, 5, 79, 150, 60, 222, 220, 120, 62, 219, 18, 9, 60, 240, 137, 29, 190, 192, 199, 26, 62, 34, 248, 42, 62, 145, 76, 129, 189, 120, 208, 201, 189, 160, 174, 228, 61, 113, 233, 89, 190, 197, 141, 235, 189, 96, 137, 10, 190, 155, 184, 197, 61, 4, 195, 61, 61, 39, 15, 188, 62, 167, 230, 78, 62, 119, 54, 162, 62, 255, 179, 141, 190, 70, 41, 152, 190, 64, 100, 215, 61, 57, 213, 130, 62, 7, 157, 140, 190, 203, 18, 43, 189, 58, 55, 131, 61, 51, 98, 54, 190, 223, 59, 240, 189, 200, 212, 91, 190, 107, 229, 131, 189, 102, 163, 5, 62, 171, 41, 109, 190, 175, 128, 52, 60, 0, 242, 174, 62, 101, 123, 21, 62, 219, 157, 161, 190, 188, 220, 221, 61, 108, 203, 9, 62, 181, 99, 233, 190, 71, 137, 21, 62, 228, 100, 205, 189, 190, 205, 131, 190, 68, 236, 11, 62, 30, 241, 160, 62, 18, 233, 75, 190, 63, 153, 220, 190, 86, 189, 116, 57, 171, 38, 213, 189, 238, 29, 235, 190, 40, 174, 236, 190, 238, 110, 187, 61, 158, 113, 166, 190, 192, 153, 78, 62, 103, 43, 233, 61, 39, 35, 32, 190, 73, 252, 58, 190, 27, 0, 180, 61, 123, 112, 134, 191, 76, 189, 78, 62, 45, 65, 146, 191, 166, 3, 213, 188, 136, 50, 159, 191, 3, 76, 72, 62, 230, 192, 169, 188, 187, 180, 162, 191, 125, 182, 145, 61, 78, 190, 98, 189, 243, 193, 125, 62, 34, 106, 199, 189, 38, 26, 119, 190, 39, 5, 78, 190, 0, 98, 159, 191, 145, 163, 23, 62, 131, 43, 50, 60, 192, 36, 70, 61, 209, 170, 161, 62, 74, 6, 176, 61, 188, 232, 122, 189, 134, 12, 7, 191, 44, 254, 107, 190, 162, 112, 9, 62, 196, 7, 73, 62, 36, 128, 185, 189, 107, 68, 142, 190, 242, 75, 104, 61, 27, 194, 70, 191, 74, 93, 118, 62, 229, 33, 152, 189, 39, 134, 25, 190, 218, 192, 131, 189, 83, 103, 158, 189, 71, 178, 13, 190, 114, 124, 226, 61, 141, 161, 183, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 234, 200, 61, 55, 83, 37, 62, 44, 124, 229, 189, 250, 185, 199, 189, 65, 61, 212, 61, 110, 9, 183, 189, 202, 68, 208, 188, 75, 9, 192, 188, 137, 252, 9, 189, 53, 0, 196, 61, 197, 144, 116, 188, 254, 94, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 163, 20, 89, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 247, 73, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 252, 202, 81, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 50, 46, 64, 61, 191, 214, 151, 189, 14, 57, 134, 59, 190, 14, 201, 61, 96, 89, 246, 60, 80, 70, 113, 59, 29, 219, 81, 190, 251, 238, 129, 189, 203, 158, 65, 62, 212, 102, 230, 188, 137, 34, 167, 190, 179, 88, 77, 62, 179, 73, 111, 62, 138, 90, 160, 188, 181, 251, 213, 61, 235, 153, 35, 61, 214, 247, 171, 189, 188, 179, 66, 62, 199, 139, 44, 62, 29, 225, 99, 189, 121, 183, 239, 190, 41, 44, 45, 62, 56, 197, 209, 188, 146, 5, 37, 191, 32, 132, 22, 191, 240, 190, 14, 61, 207, 133, 153, 188, 58, 208, 30, 190, 0, 206, 64, 62, 226, 9, 164, 190, 215, 11, 196, 61, 2, 231, 28, 62, 146, 167, 73, 190, 166, 3, 181, 60, 87, 125, 107, 190, 161, 242, 99, 190, 133, 220, 49, 190, 201, 77, 158, 60, 219, 67, 249, 190, 59, 26, 250, 189, 18, 121, 182, 189, 165, 135, 122, 189, 164, 43, 193, 189, 193, 20, 4, 189, 110, 212, 104, 60, 39, 211, 121, 189, 211, 17, 254, 61, 227, 14, 131, 188, 225, 183, 179, 190, 51, 240, 138, 61, 92, 154, 10, 190, 13, 159, 147, 61, 96, 160, 57, 187, 65, 183, 120, 190, 53, 58, 204, 190, 234, 128, 31, 61, 254, 188, 34, 189, 24, 15, 177, 62, 175, 148, 83, 190, 222, 122, 133, 61, 233, 52, 155, 62, 248, 129, 135, 189, 219, 198, 3, 188, 98, 99, 242, 61, 165, 20, 167, 61, 214, 144, 74, 62, 136, 95, 199, 61, 254, 200, 158, 188, 168, 17, 30, 188, 253, 9, 126, 191, 232, 141, 116, 62, 171, 144, 188, 189, 194, 8, 129, 62, 10, 88, 114, 62, 70, 225, 60, 62, 140, 194, 170, 190, 159, 124, 53, 190, 126, 55, 38, 61, 30, 13, 97, 190, 61, 194, 41, 61, 190, 198, 117, 189, 153, 218, 149, 62, 24, 22, 21, 189, 112, 131, 19, 190, 194, 236, 125, 191, 199, 161, 3, 62, 5, 105, 4, 62, 105, 97, 251, 61, 142, 196, 251, 62, 7, 107, 97, 62, 37, 206, 248, 60, 184, 76, 81, 191, 156, 184, 50, 61, 27, 210, 72, 60, 210, 18, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 158, 196, 61, 60, 167, 48, 62, 139, 176, 29, 62, 156, 207, 249, 57, 236, 162, 239, 189, 230, 199, 164, 61, 194, 217, 75, 190, 58, 44, 148, 59, 252, 26, 106, 189, 89, 136, 83, 61, 190, 165, 135, 62, 59, 178, 169, 189, 123, 169, 1, 190, 218, 23, 5, 190, 189, 238, 36, 61, 199, 223, 241, 188, 64, 245, 160, 62, 236, 178, 129, 62, 36, 155, 99, 61, 83, 55, 63, 190, 101, 86, 185, 62, 205, 214, 8, 62, 74, 101, 213, 188, 195, 220, 197, 61, 190, 43, 75, 62, 48, 132, 60, 62, 230, 55, 99, 62, 202, 172, 54, 190, 229, 246, 211, 189, 66, 155, 79, 62, 55, 71, 172, 62, 234, 253, 168, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 203, 109, 191, 135, 109, 50, 189, 221, 187, 232, 62, 195, 153, 19, 191, 241, 208, 17, 61, 250, 137, 1, 63, 231, 43, 7, 190, 68, 57, 217, 190, 18, 196, 46, 191, 254, 27, 176, 190, 115, 75, 66, 190, 154, 161, 149, 62, 6, 203, 61, 63, 26, 25, 104, 62, 66, 255, 173, 60, 180, 177, 150, 189, 38, 111, 169, 61, 50, 181, 6, 191, 101, 218, 129, 190, 23, 249, 189, 190, 82, 242, 168, 62, 159, 76, 0, 190, 97, 34, 100, 190, 214, 166, 133, 62, 239, 13, 131, 62, 92, 6, 163, 190, 232, 249, 32, 191, 145, 148, 13, 190, 106, 196, 250, 189, 167, 88, 129, 190, 98, 77, 106, 189, 52, 176, 114, 62, 128, 22, 152, 62, 174, 96, 132, 190, 18, 102, 20, 62, 67, 50, 75, 190, 128, 74, 10, 190, 25, 231, 193, 189, 100, 179, 112, 62, 91, 147, 141, 62, 90, 183, 171, 62, 36, 127, 226, 61, 153, 245, 212, 190, 213, 224, 228, 61, 173, 5, 69, 61, 71, 34, 63, 61, 64, 174, 187, 61, 213, 11, 200, 61, 42, 197, 129, 190, 45, 168, 148, 190, 84, 76, 176, 189, 228, 228, 236, 62, 155, 5, 218, 189, 40, 84, 228, 60, 200, 26, 241, 189, 19, 216, 39, 190, 111, 55, 9, 190, 193, 196, 191, 190, 1, 250, 164, 189, 152, 64, 119, 189, 188, 230, 9, 62, 158, 242, 40, 190, 241, 204, 222, 190, 154, 26, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 115, 8, 187, 244, 65, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 104, 212, 190, 54, 34, 23, 63, 97, 78, 198, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 52, 104, 63, 60, 203, 57, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}