// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 36, 196, 215, 62, 233, 13, 111, 63, 15, 223, 171, 62, 94, 41, 133, 191, 150, 162, 157, 63, 118, 103, 161, 62, 57, 249, 205, 189, 5, 167, 161, 62, 216, 97, 13, 63, 153, 253, 68, 190, 148, 105, 97, 190, 82, 231, 233, 190, 142, 54, 47, 190, 4, 34, 129, 63, 14, 177, 15, 63, 232, 140, 13, 190, 242, 144, 129, 190, 238, 134, 48, 191, 177, 197, 66, 63, 26, 206, 20, 191, 216, 155, 101, 190, 222, 242, 179, 61, 101, 84, 23, 63, 98, 139, 170, 62, 0, 183, 45, 63, 189, 15, 44, 191, 8, 99, 1, 190, 193, 228, 77, 63, 138, 192, 21, 191, 45, 100, 93, 62, 175, 104, 187, 190, 152, 30, 68, 191, 66, 115, 208, 189, 59, 174, 4, 63, 6, 102, 73, 63, 87, 156, 223, 62, 182, 142, 232, 62, 184, 123, 238, 62, 183, 14, 90, 190, 106, 193, 175, 62, 173, 201, 101, 191, 148, 139, 128, 62, 243, 74, 170, 62, 218, 190, 215, 63, 188, 150, 210, 62, 138, 118, 52, 191, 181, 162, 146, 63, 48, 151, 52, 62, 233, 186, 4, 63, 137, 10, 163, 63, 31, 65, 225, 62, 3, 185, 84, 190, 33, 17, 224, 62, 192, 114, 40, 60, 125, 209, 223, 62, 115, 216, 192, 187, 10, 100, 0, 63, 38, 152, 154, 62, 86, 211, 12, 191, 59, 125, 207, 61, 184, 141, 190, 61, 129, 216, 149, 191, 82, 205, 138, 190, 136, 79, 1, 63, 228, 181, 165, 62, 250, 209, 19, 63, 200, 204, 40, 63, 155, 13, 32, 190, 165, 112, 34, 190, 162, 80, 56, 191, 162, 218, 108, 191, 244, 52, 54, 190, 214, 87, 12, 191, 34, 217, 162, 62, 22, 229, 81, 189, 22, 140, 252, 62, 137, 231, 147, 191, 200, 183, 24, 190, 51, 203, 140, 190, 229, 89, 206, 190, 78, 126, 4, 191, 50, 29, 233, 187, 211, 175, 193, 189, 20, 232, 213, 190, 53, 55, 213, 62, 138, 28, 90, 63, 56, 140, 188, 62, 77, 52, 53, 190, 138, 177, 225, 191, 213, 5, 128, 190, 56, 244, 46, 189, 205, 222, 130, 190, 206, 163, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 98, 48, 90, 62, 143, 212, 205, 62, 65, 237, 235, 190, 86, 113, 133, 189, 47, 13, 234, 189, 179, 129, 188, 61, 154, 88, 37, 191, 26, 130, 139, 59, 200, 49, 229, 189, 121, 16, 60, 189, 211, 66, 12, 63, 236, 75, 161, 60, 2, 51, 149, 62, 71, 8, 170, 189, 160, 249, 137, 62, 15, 173, 252, 62, 105, 10, 16, 191, 85, 41, 182, 62, 107, 248, 44, 62, 149, 246, 58, 191, 254, 78, 45, 190, 0, 172, 129, 59, 231, 241, 15, 191, 114, 186, 43, 63, 223, 56, 3, 191, 176, 155, 143, 61, 136, 188, 189, 190, 108, 251, 96, 62, 173, 145, 36, 62, 158, 225, 156, 62, 142, 5, 12, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 113, 128, 80, 190, 188, 17, 69, 189, 5, 40, 176, 191, 128, 17, 132, 190, 181, 213, 153, 191, 197, 204, 23, 61, 209, 31, 124, 191, 250, 229, 99, 191, 46, 61, 57, 191, 43, 116, 125, 190, 174, 4, 59, 190, 137, 236, 41, 63, 149, 36, 153, 62, 125, 141, 188, 190, 79, 191, 107, 62, 80, 149, 141, 62, 163, 189, 185, 62, 120, 73, 6, 62, 16, 158, 11, 63, 185, 178, 156, 60, 154, 222, 65, 191, 184, 247, 75, 190, 64, 226, 39, 191, 227, 251, 43, 62, 152, 243, 38, 62, 38, 63, 73, 191, 86, 25, 17, 191, 72, 214, 119, 62, 24, 16, 188, 61, 12, 235, 111, 61, 249, 49, 184, 62, 17, 1, 242, 189, 216, 252, 99, 188, 210, 237, 29, 190, 130, 92, 176, 61, 175, 25, 87, 62, 63, 157, 179, 61, 221, 87, 124, 190, 116, 121, 116, 191, 185, 214, 12, 62, 51, 17, 27, 62, 152, 228, 183, 62, 41, 65, 22, 191, 21, 104, 2, 190, 224, 218, 134, 62, 104, 156, 99, 62, 57, 228, 30, 188, 249, 196, 250, 188, 103, 152, 214, 190, 192, 46, 147, 189, 133, 148, 49, 62, 237, 243, 154, 62, 53, 156, 227, 191, 56, 149, 60, 62, 56, 39, 182, 60, 115, 196, 205, 190, 36, 203, 10, 191, 55, 94, 44, 61, 160, 81, 40, 190, 192, 218, 27, 189, 208, 219, 158, 62, 165, 86, 253, 190, 225, 223, 13, 189, 106, 230, 122, 61, 84, 117, 106, 60, 16, 196, 41, 189, 76, 252, 125, 62, 162, 34, 140, 62, 179, 168, 130, 61, 28, 229, 118, 189, 141, 160, 138, 62, 184, 157, 130, 62, 94, 156, 234, 62, 246, 205, 235, 61, 16, 148, 129, 61, 130, 11, 26, 191, 49, 216, 40, 189, 230, 241, 199, 62, 194, 187, 20, 191, 131, 9, 138, 61, 88, 249, 84, 191, 66, 108, 51, 62, 174, 39, 75, 191, 74, 72, 101, 190, 50, 232, 158, 190, 148, 150, 155, 62, 229, 55, 247, 62, 5, 29, 7, 62, 124, 54, 18, 62, 91, 237, 94, 190, 106, 195, 176, 62, 221, 254, 108, 188, 154, 240, 196, 190, 243, 144, 110, 190, 111, 142, 241, 190, 181, 213, 36, 62, 9, 250, 56, 191, 189, 99, 144, 62, 113, 41, 26, 191, 74, 213, 92, 61, 248, 13, 169, 191, 254, 133, 101, 62, 233, 243, 229, 190, 80, 171, 144, 191, 16, 88, 233, 189, 134, 4, 127, 191, 117, 30, 128, 62, 136, 71, 57, 190, 15, 210, 249, 61, 239, 178, 76, 191, 139, 41, 196, 61, 213, 77, 124, 61, 138, 11, 253, 188, 9, 44, 222, 60, 199, 217, 23, 190, 9, 11, 100, 190, 48, 223, 55, 190, 12, 235, 98, 190, 198, 214, 141, 191, 114, 111, 165, 61, 95, 50, 104, 62, 155, 86, 193, 61, 129, 255, 22, 190, 247, 34, 181, 188, 4, 20, 9, 190, 88, 80, 199, 62, 109, 253, 14, 189, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 190, 50, 89, 189, 147, 135, 99, 191, 171, 143, 128, 189, 5, 219, 91, 190, 37, 20, 93, 190, 207, 116, 45, 190, 56, 65, 76, 60, 74, 89, 42, 189, 238, 54, 221, 62, 242, 238, 149, 62, 253, 166, 76, 62, 134, 3, 107, 190, 201, 148, 79, 62, 222, 236, 243, 188, 239, 2, 145, 189, 211, 82, 164, 191, 95, 117, 173, 191, 214, 5, 233, 189, 198, 152, 114, 189, 70, 236, 191, 189, 134, 51, 162, 190, 244, 19, 166, 60, 37, 115, 148, 189, 65, 244, 183, 188, 106, 98, 48, 191, 110, 30, 3, 63, 119, 226, 134, 190, 139, 51, 10, 61, 215, 102, 227, 61, 206, 103, 157, 60, 77, 215, 89, 62, 205, 100, 11, 190, 174, 187, 242, 61, 144, 227, 187, 60, 114, 189, 124, 62, 50, 201, 146, 61, 106, 163, 79, 62, 245, 149, 254, 189, 114, 154, 213, 62, 218, 89, 69, 61, 208, 7, 243, 62, 49, 215, 155, 62, 58, 1, 211, 189, 149, 26, 79, 190, 153, 169, 118, 190, 170, 78, 255, 61, 251, 142, 112, 189, 170, 225, 164, 61, 131, 181, 150, 189, 215, 104, 166, 61, 252, 160, 1, 189, 121, 25, 190, 61, 197, 15, 17, 61, 220, 93, 194, 61, 29, 238, 23, 63, 29, 160, 102, 190, 5, 19, 158, 190, 60, 209, 132, 62, 77, 59, 95, 62, 125, 3, 92, 190, 92, 122, 98, 189, 149, 140, 44, 189, 67, 32, 28, 189, 132, 163, 211, 189, 11, 141, 144, 191, 155, 215, 175, 62, 2, 11, 58, 191, 52, 134, 216, 188, 153, 29, 129, 191, 115, 215, 50, 61, 45, 120, 41, 191, 182, 19, 131, 191, 131, 36, 11, 190, 78, 178, 75, 190, 174, 77, 17, 190, 115, 146, 180, 62, 46, 147, 244, 61, 201, 81, 118, 190, 134, 204, 80, 191, 90, 190, 228, 61, 197, 103, 84, 62, 143, 75, 238, 62, 62, 154, 24, 62, 52, 59, 72, 189, 57, 176, 13, 191, 75, 126, 158, 190, 14, 87, 127, 190, 100, 16, 190, 61, 153, 97, 207, 189, 139, 210, 49, 191, 165, 113, 129, 189, 200, 27, 75, 190, 209, 237, 246, 60, 212, 0, 163, 62, 95, 151, 209, 190, 230, 80, 52, 188, 239, 230, 128, 190, 90, 227, 221, 62, 174, 113, 6, 62, 99, 139, 98, 190, 113, 43, 98, 61, 254, 46, 242, 190, 122, 88, 158, 59, 235, 16, 136, 188, 21, 112, 35, 62, 248, 237, 143, 62, 75, 41, 139, 61, 37, 42, 73, 191, 134, 92, 32, 191, 100, 25, 15, 63, 127, 80, 70, 191, 14, 225, 189, 61, 51, 38, 126, 190, 57, 241, 89, 62, 223, 100, 133, 190, 107, 212, 129, 190, 236, 147, 248, 61, 145, 181, 5, 190, 6, 224, 117, 189, 252, 32, 135, 189, 220, 110, 121, 190, 51, 170, 60, 62, 117, 143, 158, 190, 134, 225, 81, 190, 62, 223, 162, 190, 235, 208, 147, 62, 213, 158, 236, 189, 134, 10, 158, 188, 64, 20, 137, 189, 161, 255, 255, 190, 254, 163, 74, 191, 255, 180, 3, 190, 80, 4, 25, 191, 113, 81, 14, 62, 159, 83, 101, 191, 102, 89, 152, 60, 215, 234, 144, 190, 230, 236, 171, 190, 157, 8, 80, 189, 118, 69, 173, 62, 209, 166, 180, 61, 145, 53, 246, 190, 198, 25, 73, 62, 97, 156, 88, 62, 5, 198, 252, 61, 37, 12, 154, 189, 48, 57, 148, 62, 211, 245, 28, 190, 237, 199, 208, 190, 159, 81, 161, 61, 207, 214, 164, 191, 95, 119, 56, 62, 79, 255, 231, 61, 110, 241, 221, 190, 206, 66, 75, 189, 195, 226, 140, 62, 56, 142, 201, 62, 84, 197, 178, 62, 249, 12, 99, 190, 77, 60, 231, 61, 142, 57, 48, 190, 219, 216, 31, 189, 156, 30, 22, 191, 218, 36, 51, 190, 173, 115, 199, 190, 127, 168, 136, 62, 46, 95, 50, 190, 203, 238, 142, 190, 143, 87, 199, 61, 19, 33, 113, 61, 169, 115, 228, 58, 231, 151, 124, 190, 98, 101, 138, 61, 106, 18, 149, 190, 9, 213, 218, 61, 33, 253, 167, 189, 193, 72, 219, 190, 134, 92, 93, 60, 154, 178, 251, 189, 207, 14, 17, 62, 121, 208, 129, 189, 163, 2, 229, 190, 225, 125, 5, 191, 231, 165, 140, 190, 223, 5, 71, 190, 148, 115, 22, 62, 247, 7, 127, 190, 159, 19, 84, 62, 195, 118, 114, 62, 120, 159, 18, 62, 103, 200, 77, 191, 169, 76, 27, 189, 93, 3, 237, 59, 72, 8, 133, 62, 121, 246, 8, 62, 122, 112, 252, 188, 209, 24, 12, 62, 215, 165, 125, 191, 29, 51, 19, 62, 92, 110, 57, 61, 58, 116, 7, 63, 63, 208, 172, 61, 55, 69, 15, 62, 222, 1, 94, 61, 33, 219, 103, 191, 168, 204, 75, 62, 175, 16, 106, 62, 121, 169, 153, 62, 105, 129, 195, 61, 223, 236, 23, 62, 206, 96, 93, 190, 201, 22, 16, 191, 57, 180, 140, 191, 87, 208, 104, 61, 101, 27, 40, 190, 147, 124, 11, 189, 33, 255, 63, 62, 214, 226, 45, 62, 114, 65, 148, 190, 144, 167, 132, 191, 39, 155, 6, 62, 210, 219, 200, 189, 46, 81, 142, 61, 144, 33, 153, 189, 107, 244, 128, 190, 241, 207, 252, 61, 0, 147, 242, 190, 114, 82, 133, 190, 154, 228, 146, 189, 243, 136, 174, 190, 17, 204, 255, 61, 155, 162, 1, 191, 217, 69, 138, 189, 58, 8, 160, 190, 221, 202, 60, 190, 43, 11, 137, 191, 113, 113, 33, 188, 77, 66, 156, 190, 125, 157, 6, 61, 127, 196, 62, 62, 43, 57, 39, 191, 188, 104, 174, 61, 129, 96, 61, 191, 246, 181, 59, 190, 211, 235, 196, 189, 53, 235, 252, 190, 203, 38, 22, 189, 0, 27, 148, 61, 48, 46, 93, 62, 75, 4, 251, 189, 55, 24, 2, 191, 59, 83, 21, 191, 69, 125, 229, 190, 107, 164, 139, 191, 143, 125, 161, 190, 194, 56, 3, 190, 117, 79, 161, 190, 120, 6, 249, 190, 50, 209, 218, 61, 109, 200, 166, 188, 159, 232, 180, 61, 43, 26, 55, 62, 0, 31, 55, 62, 150, 241, 185, 186, 225, 62, 120, 62, 254, 107, 168, 62, 243, 83, 32, 62, 186, 83, 189, 190, 54, 62, 64, 190, 31, 54, 61, 62, 81, 253, 15, 191, 125, 212, 152, 191, 227, 176, 73, 191, 85, 133, 28, 191, 147, 209, 57, 62, 120, 64, 90, 189, 234, 29, 159, 190, 179, 171, 148, 62, 156, 237, 100, 63, 175, 45, 60, 62, 67, 9, 154, 190, 21, 26, 17, 61, 137, 134, 49, 190, 169, 12, 238, 61, 201, 150, 170, 188, 167, 247, 156, 62, 179, 24, 95, 62, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 175, 112, 188, 60, 6, 84, 115, 189, 146, 209, 95, 61, 152, 216, 248, 189, 82, 70, 219, 189, 210, 187, 15, 189, 209, 10, 51, 190, 247, 121, 80, 189, 223, 59, 96, 189, 18, 176, 148, 188, 0, 147, 202, 61, 108, 210, 111, 188, 233, 35, 86, 189, 186, 38, 182, 189, 42, 78, 212, 187, 24, 3, 136, 189, 206, 41, 13, 62, 99, 172, 18, 190, 27, 167, 223, 188, 108, 105, 67, 189, 112, 179, 172, 189, 144, 229, 69, 190, 221, 238, 189, 188, 19, 30, 139, 61, 187, 40, 254, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 34, 110, 185, 189, 165, 45, 16, 189, 195, 56, 155, 189, 124, 63, 55, 61, 92, 77, 35, 61, 54, 167, 220, 189, 53, 162, 186, 189, 38, 61, 17, 190, 198, 28, 172, 189, 171, 32, 34, 190, 192, 13, 60, 189, 160, 141, 93, 61, 124, 144, 73, 190, 141, 231, 223, 189, 208, 167, 56, 190, 193, 78, 139, 61, 76, 77, 13, 62, 13, 96, 44, 190, 69, 80, 193, 61, 61, 206, 174, 61, 164, 99, 37, 190, 77, 4, 51, 60, 49, 212, 29, 62, 158, 251, 209, 61, 200, 167, 159, 61, 88, 249, 12, 61, 42, 245, 208, 60, 87, 233, 82, 190, 34, 162, 105, 61, 215, 233, 249, 189, 226, 206, 21, 190, 30, 243, 85, 61, 170, 49, 251, 187, 42, 250, 156, 58, 223, 63, 66, 62, 84, 105, 74, 190, 191, 56, 215, 187, 79, 108, 91, 190, 28, 190, 191, 60, 21, 173, 50, 61, 58, 199, 237, 60, 94, 126, 13, 63, 103, 186, 148, 62, 154, 180, 16, 190, 139, 246, 30, 61, 229, 78, 144, 62, 192, 115, 189, 61, 188, 198, 57, 62, 123, 175, 129, 190, 90, 210, 12, 62, 99, 6, 158, 61, 208, 194, 85, 190, 21, 49, 185, 61, 152, 126, 6, 62, 210, 253, 45, 190, 89, 234, 185, 61, 212, 166, 18, 189, 240, 127, 133, 62, 4, 93, 226, 189, 233, 89, 52, 190, 107, 176, 130, 62, 9, 241, 175, 59, 236, 98, 17, 190, 235, 247, 224, 61, 102, 127, 124, 191, 124, 18, 128, 61, 154, 213, 90, 191, 115, 184, 105, 188, 187, 76, 156, 191, 73, 237, 153, 61, 145, 58, 122, 190, 223, 34, 132, 191, 166, 160, 186, 190, 95, 111, 188, 190, 222, 173, 131, 59, 20, 107, 106, 61, 138, 147, 121, 61, 177, 40, 36, 191, 245, 118, 141, 190, 76, 104, 99, 62, 136, 151, 207, 61, 227, 80, 4, 61, 196, 109, 172, 187, 232, 65, 199, 61, 223, 86, 21, 61, 125, 204, 3, 191, 207, 138, 31, 191, 124, 45, 69, 62, 145, 114, 22, 60, 140, 98, 30, 189, 127, 249, 223, 189, 148, 152, 46, 62, 18, 154, 170, 189, 210, 148, 24, 62, 201, 233, 101, 189, 190, 97, 201, 57, 126, 140, 213, 61, 221, 233, 4, 190, 121, 208, 179, 61, 239, 49, 5, 191, 157, 12, 104, 62, 116, 61, 234, 190, 9, 85, 20, 191, 241, 105, 92, 62, 69, 223, 7, 61, 18, 30, 170, 62, 225, 119, 52, 190, 144, 145, 183, 61, 244, 128, 4, 60, 112, 1, 187, 62, 77, 83, 67, 190, 104, 226, 168, 189, 227, 95, 62, 61, 42, 142, 155, 190, 78, 97, 100, 59, 45, 69, 169, 62, 215, 119, 160, 62, 112, 10, 33, 61, 58, 211, 84, 62, 222, 23, 231, 190, 143, 30, 151, 190, 44, 232, 196, 62, 23, 2, 60, 191, 177, 125, 126, 190, 110, 71, 4, 62, 94, 57, 248, 61, 126, 77, 69, 62, 111, 219, 48, 190, 81, 35, 116, 189, 157, 230, 142, 190, 35, 111, 53, 62, 77, 222, 214, 62, 40, 220, 12, 190, 118, 223, 162, 62, 236, 223, 57, 191, 219, 211, 144, 189, 77, 17, 183, 190, 106, 241, 117, 62, 74, 116, 179, 191, 217, 97, 5, 62, 246, 179, 175, 61, 165, 30, 36, 61, 239, 185, 115, 62, 224, 44, 114, 190, 242, 0, 23, 62, 70, 167, 201, 189, 44, 222, 8, 61, 161, 46, 27, 63, 46, 166, 196, 58, 107, 232, 185, 61, 83, 22, 147, 190, 150, 228, 140, 191, 87, 9, 19, 191, 195, 235, 14, 191, 230, 192, 195, 190, 49, 88, 225, 61, 247, 76, 231, 61, 26, 1, 143, 190, 54, 25, 149, 62, 161, 155, 240, 61, 250, 151, 8, 190, 212, 167, 225, 189, 123, 6, 176, 61, 238, 70, 45, 59, 175, 200, 75, 62, 215, 78, 128, 61, 98, 82, 2, 62, 153, 117, 75, 62, 203, 164, 155, 62, 222, 17, 231, 62, 61, 175, 226, 61, 106, 212, 228, 190, 50, 40, 248, 61, 240, 180, 229, 62, 186, 188, 165, 190, 148, 43, 251, 190, 208, 147, 151, 191, 125, 150, 16, 62, 228, 13, 146, 189, 173, 42, 227, 61, 136, 173, 142, 190, 235, 173, 161, 61, 183, 131, 47, 62, 84, 39, 217, 60, 164, 219, 177, 59, 233, 18, 103, 62, 194, 251, 234, 61, 222, 238, 52, 62, 136, 49, 155, 61, 144, 67, 120, 60, 74, 51, 73, 190, 47, 43, 36, 62, 218, 138, 43, 61, 213, 113, 65, 190, 100, 141, 240, 189, 115, 62, 193, 189, 2, 26, 165, 59, 239, 204, 221, 189, 140, 193, 45, 62, 89, 202, 157, 61, 34, 173, 71, 61, 245, 122, 189, 60, 244, 231, 241, 189, 231, 117, 210, 61, 173, 122, 215, 188, 50, 0, 21, 189, 253, 99, 190, 189, 151, 24, 0, 61, 43, 200, 9, 188, 64, 176, 32, 190, 88, 99, 113, 61, 110, 147, 178, 61, 0, 249, 224, 61, 93, 246, 45, 190, 34, 122, 254, 61, 26, 19, 166, 189, 146, 23, 238, 189, 52, 255, 19, 190, 187, 119, 20, 190, 114, 126, 252, 189, 107, 16, 15, 190, 94, 93, 96, 189, 183, 86, 228, 187, 101, 205, 53, 188, 212, 75, 44, 190, 86, 55, 140, 191, 79, 107, 189, 190, 254, 198, 201, 189, 8, 175, 14, 191, 127, 83, 91, 62, 130, 89, 146, 191, 41, 93, 73, 188, 154, 79, 54, 62, 68, 81, 20, 61, 128, 2, 215, 61, 104, 190, 242, 61, 38, 65, 166, 62, 78, 214, 47, 191, 207, 163, 241, 61, 138, 248, 8, 190, 92, 68, 59, 190, 250, 114, 140, 61, 226, 249, 44, 62, 87, 208, 84, 190, 110, 159, 191, 191, 126, 155, 19, 62, 121, 148, 56, 190, 63, 75, 246, 190, 255, 75, 160, 187, 58, 86, 182, 60, 6, 86, 149, 190, 137, 66, 142, 188, 45, 168, 252, 61, 87, 244, 49, 62, 35, 24, 52, 191, 49, 200, 128, 61, 133, 217, 211, 188, 122, 154, 254, 189, 81, 119, 90, 189, 145, 17, 212, 61, 110, 97, 5, 62, 239, 135, 35, 62, 72, 191, 58, 189, 163, 33, 195, 187, 202, 92, 105, 62, 56, 153, 186, 62, 206, 128, 154, 62, 7, 114, 197, 190, 124, 243, 105, 60, 42, 252, 48, 62, 250, 214, 143, 189, 221, 60, 6, 190, 128, 252, 120, 191, 95, 240, 226, 189, 57, 131, 221, 189, 138, 123, 95, 188, 164, 166, 183, 190, 12, 112, 217, 60, 3, 137, 84, 61, 145, 57, 77, 62, 152, 19, 58, 62, 8, 81, 196, 62, 90, 117, 210, 61, 133, 203, 232, 61, 163, 195, 154, 189, 61, 1, 149, 188, 12, 169, 91, 189, 87, 100, 94, 189, 55, 185, 31, 61, 10, 146, 41, 62, 164, 252, 8, 62, 214, 124, 239, 189, 62, 41, 96, 62, 85, 73, 91, 190, 125, 152, 159, 190, 46, 202, 12, 62, 22, 129, 47, 190, 110, 40, 26, 189, 227, 148, 152, 62, 45, 82, 132, 61, 34, 117, 4, 189, 221, 37, 190, 61, 81, 94, 148, 62, 230, 199, 176, 60, 203, 65, 174, 61, 23, 182, 79, 62, 99, 99, 106, 190, 65, 158, 154, 190, 54, 161, 159, 189, 225, 49, 39, 61, 196, 139, 57, 62, 74, 175, 214, 62, 182, 236, 121, 62, 217, 42, 155, 62, 36, 226, 14, 191, 18, 206, 143, 190, 181, 48, 46, 62, 59, 109, 133, 62, 39, 213, 157, 190, 203, 18, 43, 189, 232, 59, 21, 188, 131, 172, 95, 191, 137, 66, 194, 190, 25, 242, 53, 190, 122, 34, 25, 190, 225, 112, 11, 62, 37, 227, 116, 191, 142, 226, 156, 60, 233, 141, 217, 62, 162, 157, 56, 62, 235, 179, 161, 190, 9, 53, 193, 61, 82, 187, 225, 61, 2, 244, 59, 191, 101, 63, 196, 61, 30, 218, 227, 190, 96, 9, 154, 190, 32, 118, 7, 61, 127, 243, 153, 62, 26, 23, 121, 190, 81, 137, 30, 192, 240, 99, 17, 61, 2, 133, 27, 188, 48, 74, 142, 191, 170, 139, 112, 190, 233, 222, 249, 61, 118, 237, 153, 190, 210, 79, 69, 62, 18, 185, 188, 61, 129, 191, 65, 190, 186, 108, 158, 190, 27, 0, 180, 61, 61, 13, 229, 191, 35, 201, 230, 62, 180, 88, 167, 191, 37, 7, 154, 187, 40, 88, 177, 191, 208, 36, 77, 62, 52, 37, 151, 61, 217, 239, 179, 191, 87, 244, 44, 62, 114, 147, 41, 190, 233, 186, 145, 62, 72, 109, 161, 190, 30, 71, 224, 190, 97, 167, 205, 188, 106, 167, 234, 191, 54, 199, 107, 61, 131, 43, 50, 60, 255, 100, 231, 189, 178, 253, 12, 63, 82, 12, 47, 62, 129, 183, 173, 61, 82, 86, 110, 190, 206, 169, 187, 190, 192, 63, 94, 62, 197, 13, 136, 62, 76, 238, 176, 60, 118, 91, 98, 190, 191, 145, 8, 61, 144, 179, 138, 191, 104, 81, 194, 62, 167, 129, 146, 187, 39, 134, 25, 190, 218, 192, 131, 189, 83, 103, 158, 189, 71, 178, 13, 190, 114, 124, 226, 61, 141, 161, 183, 60, 95, 222, 193, 189, 237, 177, 139, 186, 104, 234, 200, 61, 55, 83, 37, 62, 44, 124, 229, 189, 250, 185, 199, 189, 65, 61, 212, 61, 110, 9, 183, 189, 202, 68, 208, 188, 75, 9, 192, 188, 137, 252, 9, 189, 53, 0, 196, 61, 197, 144, 116, 188, 254, 94, 36, 61, 38, 53, 232, 189, 36, 9, 254, 60, 163, 20, 89, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 247, 73, 47, 190, 117, 131, 128, 189, 51, 103, 247, 186, 252, 202, 81, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 16, 206, 166, 188, 242, 0, 127, 190, 134, 28, 1, 187, 95, 230, 91, 62, 2, 98, 7, 189, 240, 140, 188, 61, 176, 86, 56, 191, 193, 237, 185, 189, 61, 231, 147, 62, 78, 25, 253, 61, 146, 249, 12, 191, 225, 159, 27, 62, 228, 59, 176, 62, 104, 70, 220, 188, 177, 16, 163, 61, 24, 123, 222, 189, 223, 156, 53, 190, 101, 76, 52, 62, 220, 12, 3, 62, 127, 71, 205, 61, 55, 119, 48, 192, 223, 153, 19, 62, 111, 41, 173, 61, 243, 246, 134, 191, 53, 221, 236, 190, 230, 251, 124, 61, 180, 162, 179, 60, 202, 125, 140, 189, 55, 62, 50, 62, 135, 58, 204, 190, 67, 25, 120, 61, 2, 231, 28, 62, 239, 108, 239, 190, 88, 56, 155, 61, 241, 191, 151, 190, 17, 156, 169, 189, 3, 219, 171, 189, 128, 194, 223, 61, 50, 184, 108, 191, 100, 125, 8, 191, 140, 32, 184, 61, 236, 87, 11, 188, 43, 245, 18, 188, 230, 237, 175, 189, 109, 238, 169, 61, 76, 208, 153, 190, 133, 101, 3, 190, 15, 220, 22, 190, 84, 238, 66, 191, 72, 116, 176, 61, 116, 27, 36, 190, 13, 159, 147, 61, 150, 207, 77, 191, 215, 252, 163, 190, 87, 110, 75, 62, 251, 112, 176, 187, 218, 156, 12, 61, 54, 34, 24, 63, 69, 87, 90, 187, 252, 76, 54, 62, 31, 13, 125, 62, 245, 227, 235, 190, 244, 228, 187, 189, 98, 99, 242, 61, 95, 171, 9, 61, 14, 135, 29, 189, 35, 183, 221, 60, 160, 226, 3, 62, 1, 60, 43, 190, 241, 148, 58, 191, 12, 146, 157, 63, 129, 180, 240, 189, 59, 225, 224, 62, 247, 120, 214, 62, 131, 230, 175, 62, 71, 137, 172, 190, 39, 186, 66, 190, 73, 35, 189, 61, 204, 98, 155, 190, 5, 59, 70, 190, 234, 36, 210, 190, 53, 43, 238, 61, 197, 24, 169, 60, 190, 252, 187, 189, 238, 235, 14, 191, 217, 154, 37, 62, 132, 9, 159, 189, 134, 179, 135, 62, 219, 227, 14, 63, 149, 121, 244, 62, 237, 129, 75, 61, 201, 177, 75, 191, 202, 4, 55, 60, 90, 233, 142, 62, 39, 110, 33, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 251, 89, 62, 104, 47, 38, 62, 44, 134, 244, 61, 236, 233, 206, 188, 236, 162, 239, 189, 57, 34, 198, 61, 202, 150, 114, 190, 27, 44, 10, 189, 157, 68, 159, 61, 120, 171, 8, 61, 138, 109, 88, 62, 238, 198, 0, 190, 176, 213, 72, 190, 149, 162, 165, 189, 30, 210, 22, 61, 199, 223, 241, 188, 68, 122, 187, 62, 203, 167, 71, 62, 3, 64, 35, 61, 113, 137, 139, 190, 151, 196, 193, 62, 206, 24, 224, 61, 32, 148, 20, 61, 57, 87, 213, 61, 164, 108, 111, 62, 56, 152, 28, 62, 62, 225, 15, 62, 202, 172, 54, 190, 229, 246, 211, 189, 94, 199, 117, 62, 90, 242, 185, 62, 91, 163, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 207, 159, 191, 87, 105, 9, 190, 28, 188, 218, 62, 7, 218, 28, 191, 241, 208, 17, 61, 195, 166, 29, 63, 123, 33, 160, 189, 209, 80, 4, 191, 244, 112, 139, 191, 247, 66, 237, 190, 126, 60, 3, 190, 158, 153, 170, 62, 248, 65, 136, 63, 235, 252, 220, 62, 84, 228, 166, 60, 180, 177, 150, 189, 21, 243, 137, 60, 87, 239, 199, 190, 116, 122, 113, 190, 214, 252, 6, 191, 81, 82, 195, 62, 157, 140, 218, 189, 120, 70, 251, 190, 192, 39, 133, 62, 228, 44, 88, 62, 71, 211, 245, 190, 246, 73, 71, 191, 145, 148, 13, 190, 106, 196, 250, 189, 0, 224, 180, 190, 96, 169, 133, 189, 246, 26, 220, 62, 116, 79, 29, 63, 26, 184, 119, 190, 243, 3, 229, 189, 145, 19, 47, 61, 128, 74, 10, 190, 163, 84, 187, 189, 130, 36, 123, 62, 253, 234, 31, 62, 189, 115, 91, 189, 102, 237, 147, 62, 224, 25, 191, 190, 211, 128, 21, 62, 213, 65, 207, 61, 207, 74, 151, 62, 54, 217, 187, 61, 213, 11, 200, 61, 132, 146, 149, 190, 248, 121, 109, 190, 53, 108, 5, 190, 130, 62, 252, 62, 180, 49, 44, 190, 121, 207, 253, 60, 212, 117, 253, 189, 106, 180, 27, 190, 26, 138, 83, 190, 115, 8, 228, 190, 113, 22, 151, 61, 152, 64, 119, 189, 188, 230, 9, 62, 133, 140, 136, 190, 62, 162, 95, 191, 161, 220, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 190, 67, 59, 143, 46, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {35, 82, 144, 191, 244, 181, 202, 62, 155, 4, 31, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 24, 48, 192, 76, 27, 45, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}