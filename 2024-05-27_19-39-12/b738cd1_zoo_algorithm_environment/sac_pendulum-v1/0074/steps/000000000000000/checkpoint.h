// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 252, 215, 62, 118, 123, 73, 62, 80, 106, 239, 189, 204, 153, 184, 189, 97, 17, 6, 61, 169, 67, 245, 62, 212, 81, 235, 190, 171, 72, 155, 62, 204, 220, 6, 63, 66, 182, 219, 61, 10, 245, 16, 191, 18, 130, 134, 62, 207, 243, 182, 61, 159, 115, 151, 62, 194, 232, 15, 191, 168, 119, 22, 60, 134, 45, 193, 190, 242, 39, 167, 62, 67, 244, 185, 60, 9, 237, 234, 62, 113, 209, 6, 191, 136, 42, 211, 61, 109, 147, 133, 190, 35, 36, 198, 190, 252, 129, 141, 61, 48, 187, 173, 190, 66, 3, 11, 62, 71, 113, 136, 62, 97, 155, 75, 190, 55, 137, 235, 189, 118, 41, 98, 62, 204, 163, 177, 190, 98, 108, 255, 58, 137, 170, 101, 189, 136, 162, 22, 190, 23, 198, 45, 190, 183, 123, 136, 62, 100, 228, 115, 188, 87, 7, 195, 62, 73, 138, 11, 62, 142, 129, 3, 63, 28, 68, 98, 188, 197, 215, 79, 190, 51, 234, 182, 190, 48, 46, 72, 61, 36, 140, 200, 62, 232, 47, 131, 62, 52, 185, 252, 62, 213, 137, 5, 191, 170, 57, 8, 63, 112, 76, 180, 62, 57, 121, 19, 61, 206, 210, 122, 61, 55, 170, 183, 62, 157, 185, 43, 61, 218, 153, 136, 62, 77, 33, 197, 62, 138, 134, 151, 62, 207, 117, 228, 190, 17, 223, 156, 62, 177, 204, 230, 189, 107, 58, 183, 190, 46, 158, 30, 62, 247, 11, 168, 190, 44, 104, 167, 190, 205, 135, 222, 189, 94, 252, 40, 62, 248, 115, 68, 188, 21, 40, 12, 63, 156, 56, 169, 187, 136, 217, 68, 190, 19, 6, 115, 189, 238, 158, 228, 190, 252, 18, 178, 190, 126, 52, 204, 190, 135, 37, 240, 190, 33, 147, 65, 61, 7, 77, 20, 190, 67, 45, 221, 62, 165, 238, 188, 190, 205, 88, 198, 188, 218, 200, 6, 190, 82, 203, 51, 62, 162, 129, 223, 190, 128, 128, 180, 62, 32, 5, 215, 62, 120, 42, 205, 190, 17, 231, 6, 63, 163, 41, 244, 61, 38, 191, 166, 62, 112, 142, 222, 61, 123, 153, 162, 190, 33, 10, 253, 190, 15, 205, 155, 190, 54, 120, 58, 190, 253, 210, 17, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 160, 19, 191, 77, 64, 7, 63, 236, 51, 4, 63, 215, 254, 81, 190, 191, 172, 65, 190, 64, 242, 94, 190, 89, 72, 49, 189, 249, 99, 177, 190, 174, 136, 89, 62, 54, 115, 118, 189, 249, 8, 4, 61, 210, 34, 215, 62, 127, 31, 93, 189, 172, 235, 196, 62, 117, 209, 83, 188, 8, 82, 206, 62, 221, 65, 19, 63, 154, 239, 246, 190, 122, 53, 166, 62, 121, 206, 173, 61, 107, 149, 244, 190, 84, 134, 225, 190, 96, 200, 7, 63, 244, 145, 77, 190, 102, 16, 240, 62, 14, 22, 111, 190, 214, 38, 9, 61, 201, 24, 246, 190, 57, 203, 221, 61, 200, 165, 14, 63, 181, 182, 191, 62, 125, 39, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 64, 194, 12, 60, 177, 104, 18, 62, 219, 210, 162, 189, 58, 119, 16, 190, 213, 226, 29, 62, 251, 69, 24, 190, 214, 3, 225, 187, 236, 126, 29, 190, 168, 230, 38, 190, 251, 253, 236, 188, 6, 31, 175, 189, 51, 108, 97, 61, 107, 192, 152, 61, 59, 179, 12, 190, 104, 124, 179, 61, 86, 22, 100, 61, 244, 165, 69, 61, 22, 6, 64, 189, 110, 63, 20, 62, 146, 179, 72, 61, 143, 225, 218, 61, 120, 72, 23, 190, 171, 31, 138, 188, 53, 109, 46, 62, 83, 165, 32, 62, 88, 181, 220, 189, 53, 28, 158, 58, 210, 26, 249, 61, 97, 121, 49, 61, 60, 40, 195, 189, 208, 65, 255, 60, 143, 67, 218, 189, 210, 134, 185, 189, 210, 160, 6, 190, 235, 194, 53, 61, 114, 108, 48, 62, 238, 129, 91, 61, 57, 192, 30, 190, 220, 4, 198, 61, 65, 144, 245, 61, 140, 50, 221, 188, 175, 135, 21, 62, 0, 165, 242, 189, 238, 133, 118, 189, 102, 50, 16, 189, 165, 134, 45, 62, 122, 203, 4, 190, 63, 60, 171, 61, 121, 215, 254, 189, 109, 220, 206, 189, 72, 247, 24, 62, 152, 104, 119, 61, 120, 249, 7, 62, 113, 52, 7, 62, 41, 5, 1, 190, 113, 243, 41, 62, 53, 145, 239, 189, 255, 214, 187, 61, 189, 198, 186, 60, 101, 239, 96, 189, 34, 184, 33, 62, 4, 84, 42, 190, 245, 108, 132, 189, 177, 212, 115, 61, 134, 132, 85, 189, 13, 43, 129, 188, 233, 213, 34, 62, 106, 24, 255, 61, 161, 90, 123, 61, 237, 170, 111, 61, 131, 4, 40, 190, 34, 241, 234, 60, 63, 248, 249, 61, 155, 226, 143, 61, 20, 204, 139, 189, 39, 60, 239, 60, 113, 123, 186, 61, 221, 36, 34, 190, 53, 78, 178, 189, 139, 137, 175, 61, 57, 248, 51, 190, 32, 81, 167, 61, 173, 0, 221, 189, 201, 200, 122, 61, 219, 117, 33, 190, 3, 117, 49, 62, 204, 93, 58, 61, 167, 38, 197, 188, 94, 14, 138, 188, 34, 99, 54, 189, 152, 113, 180, 61, 90, 7, 13, 62, 20, 164, 26, 59, 232, 64, 119, 61, 160, 135, 25, 190, 239, 237, 40, 62, 90, 61, 179, 61, 70, 187, 31, 62, 162, 8, 182, 61, 125, 106, 214, 61, 104, 221, 174, 188, 27, 227, 199, 61, 169, 163, 215, 189, 168, 163, 242, 189, 3, 186, 139, 188, 174, 72, 130, 61, 78, 8, 16, 61, 155, 45, 12, 190, 76, 145, 45, 62, 106, 135, 29, 190, 132, 218, 232, 185, 38, 218, 35, 189, 247, 192, 3, 62, 176, 8, 29, 62, 217, 152, 235, 59, 226, 128, 154, 189, 65, 50, 198, 189, 185, 220, 36, 190, 229, 38, 29, 190, 21, 131, 52, 190, 222, 44, 145, 60, 63, 176, 30, 62, 24, 59, 119, 189, 95, 150, 226, 189, 133, 194, 37, 190, 124, 147, 24, 189, 12, 158, 167, 61, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 149, 214, 49, 61, 126, 5, 128, 188, 124, 84, 22, 61, 151, 211, 216, 189, 175, 4, 28, 61, 128, 9, 204, 189, 243, 179, 42, 188, 31, 13, 207, 189, 191, 210, 39, 59, 236, 74, 193, 189, 137, 152, 4, 62, 58, 194, 43, 190, 211, 213, 19, 62, 144, 218, 143, 187, 113, 217, 222, 61, 254, 110, 222, 189, 234, 18, 108, 188, 141, 29, 123, 60, 211, 29, 17, 190, 251, 230, 162, 61, 169, 87, 162, 61, 19, 96, 165, 61, 113, 49, 7, 190, 149, 179, 17, 189, 253, 26, 196, 59, 233, 46, 51, 62, 12, 52, 190, 61, 181, 245, 217, 188, 200, 54, 145, 61, 222, 124, 253, 189, 27, 93, 76, 61, 186, 148, 13, 190, 176, 251, 0, 62, 179, 250, 134, 189, 66, 97, 251, 188, 180, 78, 193, 61, 236, 42, 9, 188, 58, 38, 173, 59, 7, 46, 139, 61, 251, 101, 21, 190, 212, 210, 33, 62, 67, 220, 5, 62, 67, 2, 167, 61, 22, 7, 37, 190, 83, 66, 40, 189, 129, 174, 157, 61, 127, 254, 130, 60, 11, 228, 82, 61, 185, 43, 32, 190, 140, 13, 1, 62, 102, 122, 151, 60, 242, 187, 141, 59, 138, 168, 10, 190, 248, 159, 60, 60, 74, 3, 207, 61, 3, 57, 19, 61, 42, 64, 3, 190, 135, 20, 223, 188, 254, 144, 48, 62, 253, 160, 159, 189, 245, 172, 175, 189, 203, 80, 207, 61, 128, 190, 57, 61, 169, 92, 222, 189, 81, 27, 9, 190, 213, 95, 190, 60, 148, 68, 200, 189, 99, 160, 38, 62, 71, 40, 245, 61, 35, 146, 51, 62, 234, 185, 185, 61, 123, 13, 231, 58, 49, 39, 146, 189, 90, 70, 34, 190, 128, 182, 230, 189, 28, 106, 157, 189, 101, 80, 98, 61, 41, 175, 32, 190, 205, 83, 45, 190, 43, 136, 21, 190, 172, 124, 179, 61, 14, 123, 131, 61, 128, 77, 48, 189, 150, 136, 67, 189, 168, 165, 234, 189, 1, 195, 39, 62, 109, 0, 102, 60, 194, 10, 245, 61, 165, 6, 131, 189, 227, 255, 233, 189, 52, 195, 50, 62, 48, 184, 194, 189, 254, 69, 179, 61, 190, 123, 162, 61, 50, 174, 52, 190, 82, 47, 13, 188, 131, 252, 1, 62, 64, 180, 11, 62, 51, 12, 48, 190, 230, 116, 218, 61, 243, 154, 195, 189, 163, 173, 226, 189, 39, 168, 28, 62, 137, 187, 47, 190, 129, 163, 205, 188, 163, 244, 217, 189, 71, 102, 17, 189, 154, 44, 45, 190, 49, 232, 220, 189, 251, 92, 14, 62, 232, 121, 117, 188, 82, 216, 171, 189, 2, 150, 145, 61, 239, 54, 206, 61, 95, 243, 26, 190, 216, 184, 223, 189, 118, 212, 148, 60, 204, 49, 0, 190, 203, 138, 146, 189, 229, 148, 45, 190, 114, 165, 157, 189, 122, 183, 161, 189, 99, 190, 213, 61, 229, 204, 242, 61, 32, 32, 154, 189, 234, 180, 52, 62, 84, 223, 153, 187, 160, 84, 157, 188, 29, 137, 23, 60, 29, 234, 236, 189, 120, 141, 113, 189, 149, 102, 21, 190, 131, 211, 244, 61, 128, 27, 137, 189, 67, 37, 47, 190, 60, 246, 129, 61, 4, 4, 8, 190, 74, 195, 206, 189, 64, 5, 216, 189, 248, 6, 133, 189, 211, 26, 162, 61, 149, 212, 207, 189, 68, 48, 226, 188, 248, 226, 34, 62, 113, 188, 202, 189, 191, 217, 116, 61, 91, 230, 225, 189, 225, 105, 52, 190, 168, 83, 9, 190, 205, 206, 90, 189, 89, 130, 31, 190, 137, 59, 205, 60, 185, 104, 159, 188, 13, 181, 76, 188, 101, 1, 151, 60, 17, 12, 195, 61, 44, 121, 1, 62, 212, 16, 28, 190, 239, 35, 214, 188, 145, 118, 235, 61, 161, 69, 45, 62, 189, 137, 98, 189, 230, 245, 97, 189, 13, 66, 36, 190, 194, 169, 11, 190, 163, 198, 12, 62, 183, 153, 196, 61, 77, 111, 21, 62, 153, 211, 175, 61, 255, 63, 157, 61, 253, 185, 20, 60, 209, 166, 44, 190, 27, 38, 127, 188, 2, 159, 218, 189, 106, 159, 35, 62, 234, 198, 26, 189, 69, 235, 225, 189, 191, 113, 162, 60, 220, 176, 254, 189, 104, 8, 156, 61, 22, 130, 164, 189, 125, 171, 52, 190, 57, 211, 200, 189, 161, 110, 43, 190, 108, 70, 28, 190, 60, 119, 150, 61, 9, 23, 34, 190, 149, 115, 189, 61, 119, 186, 43, 62, 82, 232, 132, 61, 255, 63, 155, 186, 169, 76, 27, 189, 223, 201, 7, 190, 250, 163, 186, 61, 129, 199, 164, 61, 114, 246, 149, 189, 12, 23, 53, 61, 124, 187, 220, 189, 209, 179, 33, 62, 203, 18, 184, 189, 22, 79, 2, 62, 203, 93, 2, 62, 130, 154, 27, 60, 133, 72, 44, 62, 101, 142, 160, 188, 38, 226, 222, 61, 173, 112, 46, 62, 128, 32, 211, 60, 187, 132, 88, 61, 156, 0, 59, 189, 134, 202, 226, 189, 233, 3, 135, 189, 251, 34, 227, 60, 60, 62, 150, 60, 189, 63, 95, 189, 185, 124, 184, 59, 241, 50, 2, 190, 254, 157, 185, 189, 47, 55, 43, 190, 125, 176, 8, 190, 80, 157, 30, 62, 141, 76, 15, 62, 45, 112, 17, 62, 144, 33, 153, 189, 152, 214, 23, 190, 161, 194, 129, 61, 203, 12, 160, 188, 111, 203, 177, 61, 0, 243, 15, 189, 228, 236, 255, 61, 188, 237, 30, 62, 106, 152, 238, 187, 226, 44, 69, 189, 74, 235, 8, 190, 201, 208, 162, 189, 39, 7, 153, 189, 121, 219, 14, 188, 224, 194, 50, 190, 246, 134, 237, 61, 140, 200, 12, 62, 166, 57, 10, 190, 213, 222, 77, 61, 130, 70, 211, 61, 57, 173, 115, 60, 1, 66, 185, 59, 232, 22, 175, 189, 181, 99, 29, 189, 5, 99, 5, 62, 3, 72, 177, 61, 118, 130, 181, 187, 239, 13, 232, 189, 78, 52, 1, 190, 132, 38, 231, 188, 188, 226, 248, 189, 48, 49, 87, 188, 97, 18, 7, 190, 35, 15, 41, 190, 112, 119, 194, 189, 178, 117, 43, 61, 2, 25, 207, 188, 69, 86, 168, 61, 57, 237, 6, 62, 199, 64, 196, 189, 15, 106, 252, 189, 232, 201, 167, 60, 195, 20, 245, 189, 151, 210, 197, 61, 239, 95, 158, 189, 31, 31, 64, 189, 14, 235, 198, 61, 88, 57, 153, 61, 113, 183, 25, 190, 186, 32, 206, 187, 230, 154, 74, 188, 41, 81, 91, 61, 230, 244, 253, 61, 120, 178, 186, 189, 36, 39, 38, 62, 119, 161, 254, 61, 20, 244, 12, 62, 33, 186, 48, 190, 109, 75, 173, 189, 198, 218, 33, 190, 20, 250, 136, 61, 177, 32, 36, 62, 85, 193, 243, 61, 159, 136, 144, 188, 63, 158, 30, 190, 226, 133, 29, 62, 93, 148, 199, 189, 118, 122, 30, 62, 13, 86, 218, 60, 12, 62, 194, 187, 68, 76, 150, 61, 152, 216, 248, 189, 215, 134, 42, 189, 122, 3, 16, 189, 71, 115, 14, 190, 107, 86, 253, 185, 198, 15, 45, 60, 69, 12, 60, 61, 129, 25, 34, 62, 22, 217, 134, 61, 186, 248, 95, 60, 198, 125, 100, 189, 85, 161, 124, 61, 153, 63, 6, 188, 60, 113, 47, 62, 71, 201, 17, 190, 246, 42, 65, 61, 93, 97, 63, 189, 60, 115, 49, 189, 188, 132, 35, 190, 220, 164, 157, 188, 183, 10, 150, 61, 8, 65, 208, 189, 36, 248, 0, 61, 153, 249, 149, 189, 80, 61, 105, 189, 24, 54, 157, 189, 254, 11, 56, 189, 65, 164, 138, 187, 169, 138, 61, 189, 243, 255, 156, 61, 75, 38, 158, 61, 99, 85, 8, 189, 254, 136, 188, 189, 171, 111, 147, 189, 156, 144, 167, 189, 150, 38, 35, 190, 241, 32, 211, 59, 68, 213, 209, 61, 113, 1, 30, 190, 89, 178, 59, 189, 249, 54, 6, 190, 211, 160, 231, 61, 83, 19, 40, 62, 85, 201, 14, 190, 255, 127, 14, 62, 31, 250, 222, 61, 110, 112, 249, 189, 46, 174, 38, 61, 2, 183, 38, 62, 14, 188, 31, 62, 101, 143, 14, 62, 211, 218, 16, 61, 177, 248, 97, 61, 23, 214, 23, 190, 49, 58, 196, 61, 216, 246, 179, 189, 230, 253, 187, 189, 136, 155, 130, 61, 103, 187, 12, 190, 27, 165, 169, 189, 127, 33, 194, 61, 87, 102, 1, 61, 107, 107, 153, 189, 205, 57, 39, 189, 24, 8, 152, 61, 105, 148, 18, 189, 90, 103, 126, 189, 72, 111, 31, 62, 159, 204, 42, 62, 117, 85, 154, 60, 30, 173, 22, 190, 34, 233, 51, 61, 161, 36, 71, 59, 149, 88, 35, 62, 71, 91, 140, 60, 18, 36, 44, 62, 68, 49, 242, 61, 135, 192, 234, 189, 25, 68, 29, 60, 206, 187, 216, 61, 159, 95, 191, 189, 240, 195, 252, 188, 74, 155, 164, 61, 125, 204, 156, 189, 158, 23, 34, 62, 243, 159, 97, 189, 46, 71, 32, 62, 121, 141, 8, 190, 96, 178, 153, 189, 50, 99, 225, 61, 100, 122, 14, 190, 121, 242, 210, 189, 124, 34, 25, 190, 117, 226, 14, 187, 208, 67, 1, 62, 166, 153, 28, 189, 70, 161, 42, 190, 135, 109, 139, 189, 122, 165, 249, 189, 53, 20, 221, 61, 0, 193, 17, 190, 117, 92, 4, 190, 103, 123, 5, 62, 182, 103, 241, 189, 154, 92, 17, 190, 201, 222, 101, 189, 218, 15, 119, 61, 28, 21, 255, 61, 68, 30, 54, 189, 118, 104, 6, 62, 8, 251, 249, 189, 67, 148, 35, 190, 137, 123, 59, 61, 118, 143, 37, 189, 24, 17, 39, 190, 35, 53, 161, 61, 125, 87, 35, 189, 175, 69, 208, 61, 84, 84, 241, 61, 120, 239, 0, 190, 86, 163, 17, 62, 190, 97, 201, 57, 226, 244, 187, 61, 248, 37, 163, 189, 210, 55, 189, 60, 230, 223, 158, 59, 140, 31, 47, 62, 14, 148, 156, 189, 9, 134, 29, 190, 11, 243, 179, 61, 119, 34, 245, 188, 234, 51, 50, 190, 44, 251, 182, 61, 33, 155, 207, 61, 19, 162, 61, 189, 92, 194, 96, 61, 142, 166, 48, 190, 188, 251, 224, 61, 82, 11, 163, 61, 186, 42, 46, 190, 254, 135, 12, 190, 102, 190, 255, 60, 225, 30, 162, 60, 208, 94, 166, 189, 28, 18, 200, 61, 122, 12, 80, 188, 208, 31, 1, 62, 60, 162, 3, 62, 223, 11, 73, 189, 182, 179, 220, 189, 115, 93, 91, 61, 224, 8, 6, 189, 69, 237, 23, 62, 111, 219, 48, 190, 157, 217, 201, 189, 165, 103, 191, 189, 213, 53, 134, 61, 173, 125, 171, 61, 85, 232, 23, 190, 144, 176, 85, 188, 165, 139, 105, 187, 55, 170, 18, 190, 171, 135, 248, 61, 166, 110, 159, 189, 81, 218, 232, 61, 21, 224, 33, 189, 194, 51, 222, 61, 11, 156, 238, 189, 98, 239, 48, 62, 185, 243, 21, 189, 216, 64, 227, 189, 7, 232, 247, 60, 199, 120, 25, 190, 142, 82, 250, 61, 193, 125, 12, 62, 143, 44, 158, 60, 118, 137, 62, 189, 201, 91, 242, 189, 23, 156, 41, 62, 1, 81, 119, 189, 89, 172, 221, 189, 194, 15, 14, 190, 15, 35, 132, 60, 188, 218, 160, 189, 132, 121, 224, 61, 215, 82, 251, 61, 82, 236, 7, 190, 10, 147, 119, 59, 229, 155, 23, 190, 238, 124, 126, 189, 109, 57, 39, 62, 132, 72, 4, 61, 206, 138, 183, 61, 135, 66, 224, 61, 161, 208, 28, 62, 128, 146, 81, 189, 195, 147, 184, 189, 52, 197, 241, 189, 204, 36, 48, 61, 240, 225, 209, 61, 131, 126, 208, 189, 90, 183, 47, 190, 159, 253, 225, 189, 137, 249, 13, 62, 242, 113, 216, 188, 30, 85, 95, 187, 243, 81, 132, 58, 54, 239, 110, 187, 197, 114, 227, 189, 173, 186, 31, 190, 26, 6, 80, 189, 154, 136, 205, 189, 189, 194, 169, 61, 225, 173, 23, 62, 180, 66, 30, 62, 223, 180, 73, 188, 211, 217, 174, 189, 47, 43, 36, 62, 174, 10, 173, 61, 60, 19, 25, 190, 233, 249, 173, 189, 70, 243, 193, 189, 148, 168, 19, 61, 201, 54, 220, 189, 121, 61, 45, 62, 205, 235, 3, 62, 226, 68, 146, 61, 248, 82, 75, 61, 184, 196, 188, 189, 37, 237, 9, 62, 243, 69, 170, 187, 186, 74, 228, 187, 174, 154, 136, 189, 101, 66, 142, 61, 209, 240, 197, 60, 1, 201, 5, 190, 21, 113, 189, 61, 29, 82, 179, 61, 89, 235, 233, 61, 177, 217, 0, 190, 34, 122, 254, 61, 206, 134, 128, 189, 40, 178, 223, 189, 61, 255, 247, 189, 187, 119, 20, 190, 7, 33, 252, 189, 107, 178, 231, 189, 208, 239, 170, 188, 53, 47, 205, 60, 196, 85, 154, 59, 155, 188, 20, 189, 165, 184, 151, 189, 63, 236, 220, 61, 17, 223, 20, 188, 47, 211, 164, 60, 206, 183, 39, 62, 231, 145, 83, 59, 188, 58, 40, 62, 66, 4, 180, 189, 109, 70, 44, 190, 45, 191, 29, 62, 178, 22, 36, 61, 60, 219, 9, 62, 232, 107, 190, 189, 204, 129, 116, 59, 79, 226, 0, 62, 57, 221, 152, 61, 218, 130, 161, 61, 230, 86, 191, 188, 8, 165, 234, 189, 119, 189, 45, 190, 231, 20, 26, 62, 17, 35, 70, 188, 253, 211, 38, 61, 99, 164, 123, 61, 223, 106, 49, 190, 179, 166, 209, 189, 143, 222, 246, 189, 209, 86, 170, 189, 194, 135, 96, 61, 172, 1, 82, 189, 246, 210, 141, 61, 195, 105, 77, 188, 200, 194, 169, 58, 67, 37, 28, 190, 179, 185, 159, 61, 5, 2, 47, 62, 111, 112, 27, 62, 124, 251, 148, 187, 192, 27, 64, 189, 125, 207, 26, 62, 169, 37, 143, 189, 59, 154, 235, 61, 163, 37, 208, 189, 147, 150, 26, 190, 5, 22, 46, 190, 231, 250, 4, 62, 134, 237, 3, 62, 144, 222, 47, 190, 205, 0, 25, 190, 138, 80, 20, 61, 152, 245, 224, 61, 42, 226, 239, 189, 193, 68, 234, 188, 192, 126, 30, 190, 7, 84, 84, 61, 112, 173, 173, 61, 20, 246, 241, 61, 125, 120, 224, 61, 117, 80, 235, 61, 236, 196, 8, 60, 17, 50, 119, 189, 64, 175, 11, 61, 241, 61, 84, 189, 34, 225, 172, 189, 204, 233, 137, 61, 5, 250, 136, 61, 140, 48, 34, 62, 238, 17, 4, 62, 129, 17, 40, 61, 176, 48, 28, 190, 212, 229, 87, 61, 23, 27, 241, 189, 133, 107, 36, 190, 101, 133, 8, 61, 223, 20, 30, 62, 246, 10, 251, 189, 191, 46, 28, 189, 170, 244, 7, 62, 85, 80, 52, 190, 180, 91, 183, 61, 47, 155, 96, 60, 96, 6, 229, 189, 82, 73, 82, 188, 232, 133, 68, 189, 80, 157, 138, 61, 23, 195, 40, 62, 230, 37, 45, 62, 58, 224, 1, 61, 51, 171, 227, 61, 34, 237, 31, 190, 242, 142, 212, 189, 49, 233, 128, 61, 35, 27, 166, 61, 31, 108, 21, 190, 252, 59, 191, 188, 201, 44, 207, 61, 92, 76, 69, 189, 142, 220, 140, 61, 118, 94, 8, 190, 228, 137, 226, 61, 212, 147, 236, 61, 147, 175, 248, 61, 107, 33, 16, 62, 220, 171, 154, 58, 133, 147, 11, 61, 89, 193, 24, 189, 160, 190, 92, 61, 112, 119, 235, 188, 194, 6, 13, 190, 1, 36, 18, 61, 104, 126, 229, 60, 183, 47, 195, 189, 226, 81, 20, 62, 68, 114, 47, 62, 221, 29, 156, 189, 249, 144, 203, 61, 254, 130, 19, 61, 155, 95, 67, 187, 16, 92, 205, 61, 8, 172, 197, 189, 31, 152, 206, 189, 83, 32, 11, 190, 191, 56, 225, 61, 162, 212, 175, 189, 228, 29, 225, 189, 9, 81, 233, 189, 108, 17, 181, 61, 238, 156, 43, 189, 67, 9, 212, 61, 67, 210, 216, 189, 170, 52, 165, 61, 170, 89, 224, 189, 155, 5, 42, 62, 86, 176, 82, 188, 50, 152, 219, 189, 227, 144, 77, 189, 17, 13, 175, 61, 203, 27, 157, 61, 89, 182, 186, 189, 238, 51, 27, 61, 60, 22, 184, 61, 113, 131, 137, 188, 25, 98, 5, 60, 226, 159, 204, 58, 205, 122, 154, 61, 52, 102, 201, 189, 188, 167, 144, 61, 234, 108, 231, 189, 205, 23, 176, 61, 226, 35, 17, 62, 250, 5, 55, 189, 52, 27, 65, 189, 134, 153, 94, 189, 212, 133, 34, 190, 15, 231, 118, 61, 87, 237, 51, 190, 247, 91, 148, 61, 184, 186, 248, 189, 39, 134, 25, 190, 202, 29, 231, 188, 211, 201, 82, 189, 141, 134, 5, 190, 114, 124, 226, 61, 47, 208, 26, 61, 95, 222, 193, 189, 237, 177, 139, 186, 57, 168, 242, 61, 72, 66, 39, 62, 144, 142, 219, 189, 120, 105, 194, 189, 151, 104, 11, 62, 89, 160, 149, 189, 186, 130, 198, 188, 137, 99, 179, 60, 43, 68, 15, 188, 42, 156, 231, 61, 231, 216, 108, 60, 19, 44, 145, 61, 38, 53, 232, 189, 36, 9, 254, 60, 245, 90, 81, 61, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 103, 182, 40, 190, 117, 131, 128, 189, 51, 103, 247, 186, 116, 127, 196, 61, 100, 224, 54, 60, 40, 6, 14, 190, 73, 169, 140, 189, 253, 67, 20, 60, 108, 98, 134, 61, 156, 96, 202, 61, 226, 135, 51, 190, 215, 181, 15, 190, 45, 52, 51, 190, 40, 216, 157, 189, 147, 11, 129, 61, 116, 66, 251, 61, 149, 86, 73, 61, 247, 81, 223, 189, 195, 93, 9, 62, 48, 121, 184, 187, 51, 128, 9, 62, 238, 250, 165, 61, 48, 131, 240, 189, 205, 240, 230, 61, 183, 233, 51, 190, 9, 212, 71, 189, 94, 235, 114, 189, 122, 12, 199, 189, 76, 254, 174, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 89, 86, 92, 61, 237, 211, 138, 61, 85, 9, 23, 62, 153, 99, 17, 190, 46, 192, 26, 190, 0, 101, 20, 188, 148, 205, 44, 62, 113, 142, 210, 60, 120, 175, 106, 189, 251, 127, 207, 61, 134, 71, 19, 62, 60, 169, 132, 61, 86, 193, 200, 61, 217, 63, 87, 189, 29, 137, 78, 189, 182, 211, 135, 187, 10, 135, 138, 188, 95, 179, 72, 61, 88, 45, 212, 61, 35, 203, 28, 188, 58, 66, 206, 60, 175, 184, 18, 189, 255, 100, 130, 61, 132, 128, 241, 189, 236, 40, 253, 61, 239, 229, 178, 61, 162, 159, 47, 190, 18, 0, 130, 187, 80, 176, 18, 62, 32, 189, 171, 189, 6, 112, 241, 189, 131, 130, 96, 189, 108, 171, 10, 62, 40, 119, 49, 62, 44, 167, 46, 190, 14, 62, 129, 60, 148, 130, 222, 187, 234, 43, 144, 61, 92, 180, 42, 62, 15, 200, 250, 189, 223, 73, 112, 188, 102, 111, 134, 189, 77, 52, 37, 190, 231, 51, 228, 189, 115, 84, 136, 60, 113, 53, 30, 61, 153, 31, 74, 61, 224, 92, 141, 189, 231, 164, 186, 189, 241, 56, 225, 189, 7, 246, 162, 61, 193, 242, 20, 190, 99, 6, 248, 61, 180, 253, 167, 60, 39, 43, 110, 189, 13, 145, 71, 189, 141, 240, 61, 189, 111, 168, 17, 190, 8, 231, 1, 61, 39, 192, 8, 190, 31, 216, 17, 190, 7, 242, 31, 62, 5, 10, 131, 61, 248, 109, 6, 190, 8, 41, 251, 61, 7, 144, 112, 189, 48, 201, 224, 60, 103, 134, 20, 62, 243, 96, 76, 59, 159, 30, 180, 61, 98, 99, 242, 61, 68, 205, 159, 61, 193, 253, 185, 61, 184, 197, 96, 61, 112, 7, 243, 189, 220, 62, 10, 189, 149, 58, 35, 190, 227, 220, 13, 62, 182, 219, 195, 189, 137, 224, 133, 189, 230, 253, 51, 62, 53, 183, 145, 189, 227, 140, 213, 189, 106, 199, 93, 61, 150, 82, 221, 188, 180, 204, 226, 189, 158, 20, 11, 190, 37, 22, 29, 62, 180, 14, 39, 62, 175, 185, 248, 61, 161, 115, 228, 61, 109, 138, 194, 189, 197, 153, 15, 62, 48, 98, 18, 62, 126, 138, 18, 190, 249, 99, 10, 61, 150, 22, 65, 61, 167, 185, 161, 188, 248, 25, 44, 190, 61, 239, 51, 62, 244, 78, 74, 61, 135, 21, 138, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 156, 194, 60, 206, 67, 168, 61, 127, 81, 136, 61, 116, 194, 250, 189, 236, 162, 239, 189, 39, 194, 153, 189, 6, 229, 140, 189, 69, 144, 209, 189, 162, 238, 167, 61, 236, 25, 164, 189, 6, 253, 3, 62, 52, 169, 221, 189, 218, 129, 210, 189, 129, 204, 5, 190, 12, 143, 206, 61, 83, 159, 197, 60, 205, 181, 19, 62, 205, 1, 35, 62, 201, 155, 160, 187, 74, 5, 196, 188, 76, 140, 23, 62, 7, 126, 27, 62, 176, 52, 242, 189, 54, 63, 213, 189, 16, 145, 92, 61, 209, 197, 241, 61, 241, 166, 251, 61, 95, 15, 20, 190, 251, 116, 154, 189, 205, 105, 31, 62, 104, 22, 36, 62, 200, 148, 65, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 132, 152, 189, 232, 107, 129, 189, 242, 245, 235, 188, 222, 228, 185, 189, 241, 208, 17, 61, 136, 63, 227, 61, 187, 190, 147, 189, 93, 0, 17, 190, 8, 127, 28, 190, 246, 105, 167, 188, 246, 56, 48, 190, 44, 112, 133, 61, 34, 175, 227, 61, 137, 2, 249, 188, 150, 249, 227, 59, 222, 26, 196, 189, 10, 23, 0, 61, 75, 79, 21, 190, 69, 180, 30, 190, 71, 177, 31, 62, 3, 35, 31, 62, 24, 41, 2, 190, 228, 85, 42, 190, 254, 201, 44, 62, 72, 26, 25, 62, 82, 85, 46, 190, 225, 93, 34, 189, 65, 126, 15, 190, 145, 60, 22, 190, 223, 187, 40, 190, 221, 200, 116, 189, 90, 243, 224, 60, 164, 203, 195, 61, 68, 224, 196, 189, 36, 238, 137, 61, 205, 68, 23, 190, 128, 74, 10, 190, 205, 57, 249, 60, 97, 76, 168, 61, 187, 29, 44, 62, 4, 175, 133, 61, 155, 226, 143, 59, 34, 254, 189, 189, 108, 163, 84, 188, 212, 23, 106, 60, 133, 35, 152, 61, 237, 123, 11, 62, 44, 128, 217, 61, 73, 93, 38, 190, 182, 75, 119, 189, 189, 52, 191, 188, 241, 236, 34, 62, 233, 214, 42, 190, 199, 43, 235, 60, 189, 195, 235, 189, 10, 52, 44, 190, 227, 135, 166, 189, 149, 67, 34, 190, 52, 131, 132, 61, 60, 29, 120, 189, 116, 125, 29, 62, 103, 54, 141, 61, 249, 119, 166, 189, 79, 168, 232, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 10, 209, 189, 165, 156, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {241, 56, 14, 189, 190, 239, 16, 192, 134, 160, 205, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 116, 165, 190, 112, 18, 166, 59};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}