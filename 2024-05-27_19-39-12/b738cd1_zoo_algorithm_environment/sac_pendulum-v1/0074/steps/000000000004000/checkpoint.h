// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 217, 207, 62, 203, 102, 16, 62, 20, 8, 236, 188, 184, 31, 3, 62, 156, 45, 190, 61, 198, 149, 41, 63, 175, 183, 56, 191, 151, 97, 238, 62, 193, 70, 202, 62, 86, 221, 80, 190, 59, 233, 16, 191, 179, 7, 48, 63, 214, 24, 176, 61, 35, 42, 165, 62, 70, 129, 25, 191, 45, 143, 127, 190, 249, 196, 171, 190, 179, 220, 36, 63, 22, 107, 93, 190, 16, 91, 68, 62, 15, 162, 67, 191, 43, 149, 159, 62, 36, 229, 55, 191, 16, 84, 156, 190, 23, 26, 202, 61, 246, 188, 198, 190, 229, 252, 18, 63, 125, 230, 229, 62, 246, 82, 242, 190, 11, 155, 13, 190, 132, 188, 78, 62, 89, 196, 74, 191, 248, 7, 18, 189, 214, 9, 17, 190, 229, 151, 247, 190, 172, 19, 210, 189, 231, 178, 239, 62, 139, 153, 190, 62, 33, 54, 8, 63, 12, 189, 103, 62, 9, 152, 46, 63, 218, 171, 193, 189, 75, 190, 190, 189, 96, 155, 114, 191, 137, 111, 222, 62, 7, 248, 231, 62, 71, 83, 38, 63, 97, 223, 12, 63, 65, 28, 12, 191, 165, 92, 61, 63, 162, 253, 85, 62, 180, 247, 100, 62, 84, 107, 3, 63, 108, 180, 222, 62, 39, 8, 194, 189, 126, 50, 17, 63, 114, 75, 188, 61, 22, 225, 239, 62, 46, 9, 86, 189, 175, 26, 251, 62, 217, 243, 67, 190, 206, 59, 222, 190, 199, 163, 75, 62, 166, 71, 132, 190, 118, 159, 91, 191, 61, 43, 29, 190, 60, 192, 89, 62, 95, 246, 218, 190, 250, 103, 83, 63, 64, 84, 217, 61, 144, 57, 136, 190, 149, 99, 250, 189, 3, 51, 230, 190, 238, 163, 25, 191, 4, 187, 56, 190, 82, 122, 32, 191, 15, 29, 162, 61, 194, 56, 201, 189, 191, 40, 232, 62, 143, 253, 103, 191, 22, 202, 6, 190, 73, 225, 69, 190, 57, 128, 89, 60, 132, 135, 10, 191, 36, 231, 3, 62, 156, 5, 156, 62, 174, 143, 34, 191, 142, 188, 41, 63, 119, 240, 43, 62, 175, 77, 170, 62, 7, 194, 4, 61, 111, 63, 157, 191, 184, 75, 1, 190, 86, 164, 141, 190, 100, 139, 138, 190, 2, 112, 41, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 182, 33, 191, 226, 252, 150, 62, 137, 227, 2, 63, 77, 253, 13, 190, 118, 140, 51, 189, 247, 245, 45, 190, 245, 104, 11, 62, 242, 42, 240, 190, 30, 137, 30, 62, 168, 58, 23, 189, 236, 65, 145, 61, 160, 239, 2, 63, 248, 229, 146, 187, 15, 164, 219, 62, 31, 103, 50, 190, 199, 87, 23, 63, 59, 2, 47, 63, 22, 127, 2, 191, 109, 49, 255, 62, 15, 243, 108, 62, 180, 214, 206, 190, 105, 166, 239, 190, 6, 195, 159, 62, 151, 71, 168, 190, 222, 195, 24, 63, 97, 143, 148, 190, 69, 246, 104, 62, 9, 62, 230, 190, 151, 76, 169, 62, 114, 166, 56, 63, 161, 62, 229, 62, 58, 205, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 107, 228, 61, 136, 217, 65, 190, 247, 111, 13, 62, 96, 162, 144, 191, 182, 229, 251, 190, 250, 145, 50, 191, 47, 162, 67, 189, 8, 11, 167, 190, 165, 113, 131, 191, 110, 78, 209, 190, 181, 169, 4, 191, 246, 95, 145, 188, 129, 175, 7, 63, 3, 152, 210, 61, 56, 189, 135, 191, 29, 161, 215, 61, 89, 50, 179, 61, 240, 247, 169, 62, 10, 101, 112, 188, 175, 244, 10, 63, 185, 178, 156, 60, 246, 176, 205, 190, 246, 230, 217, 190, 51, 22, 117, 190, 100, 185, 129, 62, 252, 209, 164, 62, 178, 165, 30, 191, 108, 74, 145, 190, 46, 53, 69, 62, 38, 222, 146, 61, 168, 253, 222, 61, 113, 31, 8, 188, 17, 1, 242, 189, 98, 176, 2, 189, 62, 67, 141, 189, 130, 162, 54, 61, 108, 201, 70, 62, 108, 225, 126, 61, 234, 168, 59, 190, 194, 92, 29, 61, 159, 164, 248, 61, 56, 153, 32, 62, 96, 118, 32, 62, 163, 72, 48, 190, 245, 46, 33, 190, 194, 76, 75, 59, 15, 247, 237, 61, 1, 130, 157, 189, 188, 40, 13, 62, 176, 248, 176, 190, 84, 73, 55, 189, 206, 40, 33, 62, 23, 204, 253, 60, 156, 148, 165, 61, 157, 217, 53, 62, 64, 98, 15, 190, 112, 151, 153, 61, 74, 32, 18, 190, 165, 229, 73, 62, 132, 14, 178, 188, 51, 214, 103, 189, 147, 74, 120, 62, 134, 242, 133, 190, 146, 215, 138, 189, 106, 230, 122, 61, 123, 128, 160, 61, 255, 18, 33, 62, 74, 160, 132, 62, 163, 133, 87, 62, 68, 155, 46, 62, 244, 101, 40, 190, 203, 47, 168, 189, 43, 119, 147, 62, 159, 120, 193, 61, 210, 99, 233, 189, 34, 2, 167, 189, 34, 249, 3, 191, 116, 3, 255, 59, 185, 50, 177, 62, 50, 22, 155, 190, 100, 78, 119, 62, 64, 22, 12, 191, 64, 130, 95, 62, 119, 44, 45, 191, 208, 229, 219, 189, 171, 221, 25, 191, 5, 69, 170, 62, 142, 109, 20, 61, 56, 74, 67, 60, 177, 83, 14, 62, 223, 225, 63, 191, 189, 90, 129, 62, 12, 44, 187, 189, 234, 233, 119, 190, 41, 58, 235, 190, 95, 52, 241, 190, 181, 213, 36, 62, 169, 93, 14, 190, 95, 202, 28, 62, 131, 254, 82, 191, 231, 85, 33, 188, 16, 27, 58, 191, 82, 39, 76, 62, 164, 113, 227, 190, 247, 17, 103, 191, 4, 45, 50, 189, 116, 132, 227, 190, 204, 25, 88, 62, 133, 71, 60, 190, 198, 226, 147, 62, 4, 53, 120, 191, 165, 215, 213, 189, 188, 19, 98, 59, 47, 241, 118, 189, 189, 240, 37, 62, 72, 6, 16, 56, 9, 11, 100, 190, 14, 85, 230, 190, 216, 202, 218, 190, 219, 80, 11, 191, 172, 14, 158, 188, 24, 245, 107, 62, 23, 220, 249, 60, 38, 236, 116, 190, 19, 226, 234, 188, 247, 139, 79, 190, 17, 107, 4, 62, 91, 102, 244, 59, 95, 47, 251, 189, 11, 4, 20, 190, 148, 214, 5, 190, 73, 141, 144, 189, 104, 69, 204, 189, 100, 238, 38, 190, 29, 57, 47, 190, 50, 55, 24, 190, 162, 236, 244, 189, 130, 242, 254, 188, 25, 43, 29, 190, 113, 248, 188, 189, 212, 169, 223, 189, 92, 103, 21, 62, 170, 233, 142, 189, 61, 52, 170, 189, 37, 231, 209, 61, 22, 149, 133, 61, 42, 246, 244, 189, 242, 191, 137, 60, 131, 127, 252, 61, 227, 242, 35, 189, 252, 184, 175, 61, 155, 222, 141, 189, 203, 254, 237, 187, 118, 132, 192, 189, 122, 157, 2, 62, 140, 151, 25, 190, 2, 106, 169, 189, 18, 47, 7, 190, 28, 212, 238, 61, 173, 134, 18, 190, 238, 0, 231, 59, 19, 86, 39, 189, 105, 161, 184, 190, 7, 204, 3, 188, 6, 213, 51, 190, 92, 119, 129, 185, 180, 6, 76, 190, 157, 28, 198, 60, 83, 113, 151, 60, 120, 95, 186, 62, 137, 200, 12, 62, 43, 88, 89, 62, 42, 57, 172, 190, 94, 186, 163, 61, 138, 24, 119, 189, 106, 168, 2, 61, 248, 61, 251, 190, 223, 117, 21, 190, 155, 26, 60, 190, 204, 209, 197, 189, 227, 144, 14, 62, 242, 70, 142, 189, 229, 79, 101, 61, 252, 49, 87, 190, 241, 194, 135, 189, 198, 207, 74, 190, 9, 170, 229, 62, 103, 180, 226, 189, 217, 6, 234, 188, 33, 9, 38, 62, 170, 9, 155, 61, 105, 144, 219, 61, 205, 100, 11, 190, 113, 253, 217, 61, 138, 20, 158, 189, 176, 197, 132, 62, 69, 162, 141, 61, 116, 34, 49, 62, 21, 142, 131, 189, 170, 49, 86, 62, 239, 206, 194, 60, 154, 120, 57, 62, 122, 230, 200, 62, 102, 43, 159, 61, 71, 127, 59, 190, 40, 84, 166, 190, 157, 122, 144, 62, 173, 40, 179, 189, 63, 6, 140, 189, 248, 51, 69, 190, 102, 69, 98, 186, 68, 206, 91, 187, 210, 158, 160, 61, 147, 89, 83, 187, 77, 176, 181, 61, 252, 207, 178, 62, 198, 57, 14, 61, 22, 7, 137, 190, 27, 43, 251, 61, 99, 190, 62, 62, 108, 51, 39, 190, 88, 254, 222, 189, 199, 87, 4, 62, 65, 207, 106, 61, 132, 163, 211, 189, 206, 72, 13, 191, 75, 140, 135, 62, 56, 48, 95, 191, 209, 218, 135, 61, 118, 75, 31, 191, 188, 4, 38, 62, 178, 21, 55, 61, 102, 89, 56, 191, 57, 221, 243, 60, 106, 31, 185, 190, 163, 208, 15, 190, 158, 45, 111, 62, 239, 90, 99, 62, 149, 4, 33, 191, 253, 190, 31, 191, 37, 60, 8, 62, 8, 153, 78, 62, 162, 61, 3, 63, 80, 130, 135, 61, 150, 136, 67, 189, 90, 184, 167, 190, 107, 155, 170, 190, 239, 176, 235, 59, 146, 10, 185, 61, 7, 60, 146, 189, 143, 63, 166, 190, 57, 153, 109, 61, 27, 65, 176, 189, 82, 178, 47, 190, 208, 137, 165, 60, 27, 51, 223, 190, 230, 80, 52, 188, 82, 149, 86, 61, 43, 110, 16, 62, 245, 62, 35, 62, 168, 99, 139, 61, 42, 216, 134, 61, 6, 182, 69, 190, 37, 32, 119, 62, 117, 24, 72, 61, 137, 104, 134, 61, 207, 82, 99, 62, 254, 233, 132, 187, 16, 194, 160, 190, 168, 122, 185, 190, 95, 169, 197, 62, 202, 186, 46, 190, 229, 184, 94, 190, 183, 136, 160, 189, 32, 222, 4, 189, 216, 14, 128, 190, 23, 234, 12, 190, 125, 63, 20, 62, 148, 90, 124, 189, 120, 191, 19, 62, 229, 214, 24, 190, 138, 255, 110, 190, 149, 216, 19, 62, 13, 126, 195, 61, 140, 165, 239, 60, 9, 117, 35, 190, 252, 37, 111, 62, 60, 24, 109, 188, 134, 10, 158, 188, 146, 237, 141, 189, 77, 60, 75, 190, 226, 2, 10, 191, 63, 197, 16, 190, 206, 116, 147, 190, 47, 9, 47, 62, 85, 12, 30, 191, 228, 163, 248, 189, 175, 58, 146, 190, 149, 213, 204, 190, 73, 185, 40, 189, 82, 157, 156, 62, 12, 14, 141, 62, 57, 110, 246, 190, 135, 183, 172, 61, 25, 2, 36, 62, 193, 126, 104, 61, 158, 77, 205, 61, 61, 59, 126, 62, 239, 161, 23, 190, 140, 32, 31, 191, 176, 73, 20, 190, 157, 24, 26, 191, 24, 149, 234, 61, 123, 70, 147, 61, 59, 85, 204, 190, 255, 53, 160, 189, 191, 113, 179, 62, 45, 136, 156, 62, 101, 233, 209, 59, 95, 242, 125, 188, 77, 60, 231, 61, 24, 217, 38, 62, 187, 161, 131, 189, 0, 201, 72, 190, 248, 133, 66, 190, 254, 68, 109, 190, 43, 129, 145, 62, 23, 71, 239, 188, 122, 73, 78, 61, 111, 198, 1, 188, 8, 31, 214, 189, 49, 192, 242, 58, 42, 104, 235, 188, 102, 202, 74, 61, 11, 42, 153, 190, 22, 202, 133, 62, 136, 40, 7, 189, 10, 236, 38, 190, 154, 223, 52, 61, 231, 143, 221, 60, 190, 124, 27, 62, 140, 116, 184, 189, 208, 42, 60, 190, 208, 59, 73, 190, 205, 189, 56, 190, 196, 116, 250, 189, 220, 212, 43, 188, 206, 214, 135, 190, 93, 213, 82, 62, 249, 221, 151, 62, 250, 25, 231, 61, 140, 232, 34, 61, 169, 76, 27, 189, 13, 90, 154, 189, 136, 154, 79, 62, 52, 167, 78, 62, 79, 238, 55, 190, 118, 130, 4, 62, 228, 171, 115, 191, 104, 47, 66, 62, 132, 5, 49, 61, 119, 251, 173, 62, 73, 16, 130, 62, 101, 43, 74, 62, 45, 23, 150, 60, 190, 44, 190, 190, 194, 73, 190, 62, 12, 28, 150, 61, 188, 136, 12, 62, 8, 248, 101, 60, 251, 174, 3, 60, 94, 118, 62, 190, 143, 233, 63, 190, 197, 39, 200, 190, 7, 139, 180, 61, 225, 83, 40, 190, 131, 170, 73, 62, 78, 241, 10, 62, 192, 195, 158, 189, 31, 113, 124, 190, 108, 110, 122, 191, 165, 234, 82, 61, 105, 11, 72, 61, 161, 120, 10, 62, 144, 33, 153, 189, 61, 35, 234, 189, 226, 63, 29, 62, 147, 234, 8, 61, 201, 213, 197, 61, 99, 167, 3, 61, 122, 121, 214, 188, 17, 204, 255, 61, 113, 64, 40, 60, 81, 129, 138, 189, 126, 174, 140, 190, 68, 254, 178, 189, 244, 42, 148, 190, 38, 217, 123, 61, 59, 208, 116, 190, 254, 227, 240, 61, 76, 32, 100, 62, 193, 69, 169, 190, 227, 5, 19, 62, 186, 193, 229, 189, 116, 57, 22, 190, 205, 223, 123, 189, 213, 20, 145, 189, 203, 38, 22, 189, 16, 140, 22, 62, 83, 61, 30, 62, 175, 192, 168, 189, 106, 63, 5, 190, 105, 47, 137, 190, 51, 89, 91, 189, 99, 113, 216, 190, 30, 198, 94, 190, 194, 56, 3, 190, 225, 14, 58, 190, 224, 163, 212, 190, 14, 54, 194, 189, 95, 77, 122, 61, 245, 20, 62, 60, 25, 98, 110, 62, 173, 22, 39, 61, 84, 165, 183, 189, 117, 203, 224, 61, 3, 102, 212, 189, 59, 141, 48, 62, 88, 74, 220, 189, 123, 252, 7, 190, 96, 221, 178, 61, 169, 238, 233, 61, 68, 136, 13, 191, 5, 6, 142, 189, 181, 177, 231, 190, 202, 161, 14, 62, 189, 113, 179, 61, 167, 27, 136, 189, 231, 68, 30, 62, 178, 25, 93, 62, 64, 94, 90, 62, 70, 31, 144, 189, 219, 9, 146, 189, 192, 195, 84, 189, 213, 209, 22, 62, 29, 16, 96, 62, 6, 34, 127, 62, 38, 89, 91, 189, 63, 158, 30, 190, 217, 180, 165, 61, 68, 99, 40, 190, 12, 163, 238, 61, 130, 130, 245, 60, 6, 84, 115, 189, 171, 135, 132, 61, 152, 216, 248, 189, 82, 70, 219, 189, 195, 50, 14, 189, 209, 10, 51, 190, 255, 204, 71, 189, 223, 59, 96, 189, 205, 58, 80, 188, 0, 147, 202, 61, 56, 223, 110, 188, 131, 152, 81, 189, 186, 38, 182, 189, 143, 185, 96, 187, 24, 3, 136, 189, 206, 41, 13, 62, 73, 161, 18, 190, 27, 167, 223, 188, 93, 97, 63, 189, 95, 203, 169, 189, 144, 229, 69, 190, 221, 238, 189, 188, 251, 165, 150, 61, 201, 209, 236, 189, 23, 121, 82, 189, 225, 110, 197, 189, 226, 117, 238, 189, 24, 54, 157, 189, 242, 75, 148, 189, 181, 194, 3, 189, 170, 128, 122, 189, 242, 9, 98, 61, 9, 109, 82, 61, 220, 148, 129, 189, 53, 162, 186, 189, 89, 58, 1, 190, 198, 28, 172, 189, 210, 141, 34, 190, 60, 9, 33, 189, 87, 138, 137, 61, 108, 211, 48, 190, 190, 173, 210, 189, 178, 188, 25, 190, 201, 182, 162, 61, 76, 77, 13, 62, 252, 225, 25, 190, 146, 138, 232, 61, 183, 30, 179, 61, 225, 80, 38, 190, 7, 22, 154, 60, 49, 212, 29, 62, 238, 147, 225, 61, 5, 111, 208, 61, 83, 253, 10, 61, 193, 114, 6, 61, 154, 33, 46, 190, 165, 156, 170, 61, 54, 251, 8, 190, 234, 202, 1, 190, 30, 243, 85, 61, 159, 226, 146, 189, 68, 211, 171, 60, 251, 120, 104, 62, 1, 206, 129, 60, 188, 40, 185, 188, 166, 241, 169, 189, 42, 117, 52, 59, 242, 141, 70, 61, 87, 106, 249, 61, 57, 232, 225, 62, 118, 62, 156, 62, 78, 33, 95, 190, 72, 86, 88, 190, 88, 198, 85, 62, 159, 59, 1, 188, 236, 217, 123, 62, 89, 6, 134, 190, 54, 163, 82, 62, 14, 43, 84, 61, 54, 34, 118, 190, 24, 50, 233, 61, 156, 29, 38, 62, 160, 117, 98, 190, 191, 250, 121, 61, 170, 81, 99, 62, 126, 239, 139, 62, 15, 224, 237, 61, 96, 37, 217, 189, 111, 163, 57, 62, 193, 47, 163, 189, 18, 71, 9, 190, 235, 247, 224, 61, 208, 32, 224, 190, 66, 85, 132, 189, 132, 235, 128, 191, 145, 189, 50, 188, 19, 159, 85, 191, 80, 53, 229, 61, 200, 86, 103, 190, 179, 165, 110, 191, 52, 160, 61, 190, 201, 77, 150, 189, 52, 71, 221, 60, 46, 55, 87, 62, 107, 228, 142, 62, 213, 86, 113, 191, 25, 41, 87, 190, 75, 23, 240, 61, 212, 135, 3, 62, 205, 154, 68, 62, 244, 2, 1, 62, 42, 244, 200, 61, 201, 73, 54, 190, 19, 68, 11, 191, 227, 162, 60, 189, 213, 243, 26, 62, 190, 231, 71, 61, 236, 71, 243, 187, 214, 53, 20, 190, 239, 59, 115, 62, 15, 31, 159, 61, 245, 50, 124, 60, 6, 214, 146, 188, 190, 97, 201, 57, 123, 24, 28, 62, 64, 199, 68, 189, 104, 43, 121, 61, 166, 19, 177, 189, 25, 88, 109, 62, 208, 13, 157, 189, 141, 150, 178, 190, 164, 179, 84, 62, 7, 69, 119, 190, 107, 3, 193, 188, 170, 166, 123, 61, 211, 120, 242, 61, 112, 41, 86, 189, 78, 24, 107, 62, 20, 43, 254, 189, 67, 12, 195, 61, 71, 135, 134, 60, 48, 26, 42, 190, 44, 147, 238, 188, 212, 204, 119, 61, 180, 0, 207, 62, 223, 186, 171, 59, 124, 157, 255, 59, 180, 20, 75, 189, 84, 182, 139, 189, 191, 90, 104, 62, 142, 210, 225, 189, 25, 210, 51, 190, 207, 223, 9, 62, 239, 222, 89, 61, 189, 183, 66, 62, 111, 219, 48, 190, 100, 53, 106, 189, 40, 129, 216, 189, 201, 18, 11, 61, 245, 57, 133, 61, 147, 141, 44, 190, 252, 227, 10, 189, 119, 85, 244, 188, 166, 146, 3, 190, 3, 43, 199, 188, 35, 246, 114, 190, 248, 215, 67, 190, 234, 188, 205, 61, 106, 123, 254, 61, 232, 226, 94, 190, 22, 161, 127, 62, 139, 46, 218, 188, 80, 173, 10, 62, 124, 90, 73, 61, 64, 228, 80, 189, 176, 126, 210, 60, 193, 125, 12, 62, 129, 187, 26, 61, 202, 163, 98, 189, 168, 209, 181, 190, 21, 171, 4, 60, 84, 215, 143, 190, 135, 133, 14, 190, 94, 122, 74, 190, 36, 141, 129, 61, 122, 131, 159, 190, 216, 73, 44, 62, 161, 155, 240, 61, 47, 130, 151, 189, 143, 71, 167, 61, 75, 224, 123, 61, 132, 234, 104, 59, 84, 38, 142, 62, 24, 76, 184, 60, 81, 122, 177, 61, 143, 45, 93, 62, 237, 171, 137, 62, 75, 199, 96, 62, 65, 51, 161, 61, 163, 238, 228, 190, 67, 142, 2, 61, 181, 115, 169, 62, 142, 97, 14, 190, 152, 254, 158, 189, 204, 9, 212, 190, 12, 163, 28, 62, 204, 100, 32, 190, 245, 171, 234, 189, 48, 68, 44, 187, 58, 77, 124, 61, 58, 83, 87, 190, 148, 52, 182, 188, 100, 31, 238, 61, 168, 240, 29, 62, 218, 150, 21, 62, 227, 65, 5, 62, 95, 66, 35, 62, 248, 79, 97, 61, 247, 76, 148, 190, 47, 43, 36, 62, 207, 130, 151, 61, 170, 190, 35, 190, 233, 249, 173, 189, 115, 62, 193, 189, 148, 168, 19, 61, 239, 204, 221, 189, 140, 193, 45, 62, 38, 24, 230, 61, 226, 68, 146, 61, 254, 252, 64, 61, 203, 19, 226, 189, 37, 237, 9, 62, 243, 69, 170, 187, 108, 163, 163, 188, 174, 154, 136, 189, 214, 53, 84, 61, 209, 240, 197, 60, 1, 201, 5, 190, 56, 87, 187, 61, 29, 82, 179, 61, 0, 249, 224, 61, 32, 183, 11, 190, 34, 122, 254, 61, 24, 215, 165, 189, 146, 23, 238, 189, 61, 255, 247, 189, 187, 119, 20, 190, 7, 33, 252, 189, 107, 178, 231, 189, 18, 208, 30, 189, 53, 47, 205, 60, 101, 205, 53, 188, 219, 39, 148, 189, 175, 150, 22, 190, 78, 128, 176, 189, 77, 40, 206, 189, 212, 190, 32, 190, 116, 55, 128, 62, 60, 158, 220, 189, 35, 108, 72, 61, 107, 118, 46, 60, 99, 27, 137, 190, 139, 252, 200, 61, 48, 53, 6, 62, 106, 8, 83, 62, 158, 243, 192, 190, 120, 6, 140, 61, 23, 135, 156, 61, 8, 38, 248, 188, 140, 64, 113, 61, 58, 227, 241, 61, 37, 219, 20, 190, 151, 238, 110, 190, 22, 162, 212, 61, 109, 140, 8, 190, 12, 193, 6, 189, 195, 98, 142, 60, 207, 121, 230, 189, 54, 206, 102, 190, 223, 246, 25, 189, 215, 12, 36, 61, 234, 79, 4, 62, 6, 26, 190, 189, 49, 200, 128, 61, 23, 153, 158, 61, 39, 194, 255, 61, 112, 245, 93, 188, 164, 250, 235, 61, 111, 193, 128, 62, 113, 163, 7, 62, 117, 172, 53, 189, 70, 136, 132, 61, 75, 62, 111, 62, 151, 184, 220, 61, 13, 104, 155, 62, 199, 228, 177, 190, 1, 140, 1, 190, 213, 60, 151, 61, 110, 196, 8, 62, 103, 41, 124, 62, 125, 253, 165, 190, 56, 57, 173, 189, 187, 148, 20, 190, 117, 216, 59, 189, 171, 187, 139, 189, 83, 0, 91, 61, 177, 13, 141, 190, 229, 230, 97, 62, 207, 9, 152, 62, 6, 163, 162, 62, 182, 50, 27, 62, 212, 27, 160, 61, 213, 131, 81, 60, 222, 45, 51, 61, 191, 189, 131, 189, 87, 100, 94, 189, 64, 84, 152, 188, 151, 80, 149, 61, 132, 28, 99, 62, 240, 55, 33, 62, 250, 31, 90, 62, 200, 229, 205, 189, 237, 99, 78, 190, 43, 237, 47, 62, 7, 201, 156, 189, 244, 125, 112, 61, 141, 164, 1, 62, 20, 206, 197, 60, 218, 136, 134, 190, 249, 11, 85, 62, 130, 183, 29, 62, 218, 182, 64, 190, 43, 239, 138, 60, 171, 45, 242, 188, 18, 91, 61, 190, 39, 106, 82, 189, 231, 114, 12, 189, 50, 72, 253, 61, 67, 239, 21, 61, 158, 97, 110, 62, 160, 6, 215, 61, 17, 39, 158, 62, 191, 92, 7, 190, 186, 49, 138, 190, 151, 120, 218, 61, 74, 60, 42, 62, 107, 86, 131, 190, 203, 18, 43, 189, 156, 219, 182, 61, 140, 111, 211, 189, 79, 241, 184, 189, 86, 156, 76, 190, 213, 246, 246, 188, 212, 29, 35, 62, 69, 121, 213, 60, 199, 151, 31, 61, 56, 172, 27, 62, 118, 93, 179, 189, 111, 98, 39, 190, 183, 4, 226, 61, 42, 208, 82, 61, 135, 145, 210, 190, 242, 241, 221, 61, 77, 64, 107, 188, 193, 154, 128, 190, 167, 128, 5, 62, 240, 247, 150, 62, 26, 234, 209, 189, 127, 221, 14, 189, 147, 113, 71, 60, 194, 26, 117, 189, 233, 18, 78, 189, 150, 210, 99, 190, 18, 23, 135, 189, 93, 63, 132, 190, 157, 50, 48, 62, 108, 238, 43, 61, 193, 52, 11, 190, 235, 169, 25, 190, 27, 0, 180, 61, 227, 249, 36, 191, 233, 221, 107, 62, 26, 160, 150, 191, 200, 206, 221, 188, 96, 240, 133, 191, 89, 179, 76, 62, 110, 126, 53, 189, 6, 111, 147, 191, 8, 58, 128, 61, 242, 125, 138, 189, 59, 20, 69, 62, 34, 106, 199, 189, 33, 38, 135, 189, 80, 38, 23, 191, 122, 143, 71, 191, 149, 160, 44, 62, 131, 43, 50, 60, 176, 39, 7, 62, 9, 69, 180, 189, 108, 174, 196, 61, 213, 35, 64, 190, 90, 91, 8, 191, 200, 50, 10, 62, 45, 104, 161, 61, 107, 235, 41, 62, 233, 119, 11, 190, 173, 147, 152, 190, 93, 93, 149, 61, 141, 221, 99, 191, 203, 142, 3, 62, 128, 160, 15, 190, 39, 134, 25, 190, 161, 174, 115, 189, 132, 177, 154, 189, 112, 222, 11, 190, 114, 124, 226, 61, 17, 118, 200, 60, 95, 222, 193, 189, 237, 177, 139, 186, 241, 48, 208, 61, 245, 163, 37, 62, 44, 124, 229, 189, 225, 77, 199, 189, 137, 34, 221, 61, 89, 58, 177, 189, 202, 68, 208, 188, 208, 159, 136, 188, 227, 64, 3, 189, 137, 145, 200, 61, 181, 234, 80, 188, 53, 196, 52, 61, 38, 53, 232, 189, 36, 9, 254, 60, 192, 112, 150, 60, 43, 134, 190, 189, 42, 79, 6, 190, 142, 110, 193, 188, 254, 246, 46, 190, 117, 131, 128, 189, 51, 103, 247, 186, 60, 1, 106, 61, 100, 224, 54, 60, 106, 11, 30, 190, 73, 169, 140, 189, 180, 181, 105, 188, 7, 203, 46, 61, 139, 5, 154, 61, 226, 135, 51, 190, 132, 51, 40, 190, 45, 52, 51, 190, 40, 216, 157, 189, 200, 220, 27, 61, 116, 66, 251, 61, 27, 64, 175, 60, 106, 38, 14, 190, 55, 231, 222, 61, 48, 121, 184, 187, 10, 155, 224, 61, 88, 145, 102, 61, 120, 232, 15, 190, 46, 239, 178, 61, 16, 206, 78, 190, 184, 202, 151, 189, 242, 190, 173, 189, 122, 12, 199, 189, 25, 103, 221, 189, 14, 28, 50, 61, 223, 253, 24, 61, 167, 251, 19, 190, 206, 90, 187, 60, 237, 211, 138, 61, 85, 9, 23, 62, 169, 186, 43, 190, 103, 89, 58, 190, 196, 8, 3, 189, 29, 225, 41, 62, 166, 3, 133, 61, 51, 237, 126, 189, 135, 246, 172, 59, 167, 111, 28, 62, 163, 0, 8, 61, 190, 135, 145, 61, 103, 194, 59, 189, 135, 255, 54, 189, 219, 26, 20, 61, 176, 11, 21, 190, 252, 239, 34, 190, 204, 44, 86, 62, 244, 30, 3, 62, 132, 81, 200, 188, 242, 70, 169, 61, 56, 101, 134, 61, 49, 110, 32, 190, 51, 103, 60, 62, 223, 101, 51, 62, 51, 37, 42, 190, 228, 40, 43, 190, 53, 237, 55, 62, 67, 152, 64, 189, 211, 178, 177, 190, 19, 163, 202, 190, 219, 209, 208, 58, 2, 152, 220, 61, 185, 48, 23, 190, 143, 69, 27, 62, 69, 248, 20, 190, 12, 239, 164, 61, 2, 231, 28, 62, 123, 211, 135, 189, 126, 97, 68, 61, 6, 224, 179, 189, 57, 3, 59, 190, 240, 109, 14, 190, 216, 208, 94, 61, 142, 219, 27, 190, 220, 227, 241, 60, 233, 51, 196, 189, 191, 12, 143, 189, 79, 26, 86, 189, 104, 48, 184, 60, 165, 226, 18, 190, 99, 29, 57, 61, 173, 178, 175, 61, 215, 151, 144, 188, 247, 230, 132, 190, 88, 177, 216, 187, 13, 239, 177, 189, 2, 96, 163, 61, 126, 86, 62, 61, 108, 164, 206, 189, 211, 2, 20, 190, 17, 105, 184, 61, 235, 237, 26, 189, 233, 87, 150, 62, 106, 211, 245, 189, 169, 214, 110, 61, 114, 202, 124, 62, 102, 133, 113, 61, 227, 250, 175, 61, 98, 99, 242, 61, 64, 140, 246, 61, 66, 186, 86, 62, 102, 114, 41, 62, 236, 207, 25, 190, 136, 103, 70, 61, 59, 220, 114, 191, 126, 209, 139, 62, 122, 103, 22, 189, 250, 37, 34, 62, 239, 145, 142, 62, 78, 70, 26, 62, 140, 55, 140, 190, 136, 34, 120, 190, 175, 201, 8, 62, 61, 153, 82, 190, 132, 152, 68, 188, 87, 78, 183, 61, 108, 103, 109, 62, 5, 174, 74, 60, 8, 180, 133, 188, 255, 188, 10, 191, 91, 91, 61, 62, 151, 188, 8, 62, 106, 244, 224, 61, 136, 14, 206, 62, 72, 199, 138, 61, 230, 66, 172, 59, 34, 1, 111, 191, 163, 141, 137, 61, 108, 199, 166, 60, 240, 15, 9, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 78, 172, 61, 61, 49, 10, 62, 217, 190, 210, 61, 189, 172, 197, 60, 236, 162, 239, 189, 104, 101, 75, 188, 102, 9, 42, 190, 214, 198, 104, 189, 48, 56, 72, 60, 131, 102, 82, 61, 180, 73, 88, 62, 138, 113, 82, 189, 35, 126, 181, 189, 217, 83, 235, 189, 189, 238, 36, 61, 225, 19, 153, 188, 250, 74, 153, 62, 71, 229, 165, 62, 1, 12, 18, 61, 216, 34, 216, 189, 175, 18, 166, 62, 205, 214, 8, 62, 253, 214, 166, 189, 64, 19, 102, 61, 190, 123, 193, 61, 168, 219, 14, 62, 95, 37, 94, 62, 106, 140, 51, 190, 229, 246, 211, 189, 231, 120, 51, 62, 51, 150, 145, 62, 68, 18, 95, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 7, 115, 191, 45, 40, 132, 59, 222, 219, 7, 63, 78, 176, 15, 191, 241, 208, 17, 61, 41, 104, 3, 63, 151, 234, 46, 190, 238, 147, 184, 190, 133, 184, 187, 190, 16, 62, 197, 190, 95, 224, 126, 190, 151, 66, 174, 62, 240, 92, 147, 62, 75, 250, 93, 62, 66, 255, 173, 60, 154, 145, 190, 189, 172, 30, 1, 62, 226, 127, 19, 191, 150, 150, 113, 190, 189, 67, 26, 58, 221, 137, 153, 62, 159, 76, 0, 190, 161, 1, 99, 190, 174, 126, 133, 62, 166, 182, 122, 62, 153, 17, 112, 190, 123, 12, 22, 191, 12, 149, 13, 190, 106, 196, 250, 189, 162, 121, 117, 190, 33, 75, 229, 188, 239, 206, 143, 62, 16, 60, 48, 62, 200, 41, 64, 190, 80, 121, 87, 62, 74, 42, 109, 190, 128, 74, 10, 190, 213, 175, 22, 188, 30, 115, 161, 62, 174, 168, 153, 62, 82, 199, 184, 62, 134, 95, 87, 62, 160, 241, 148, 190, 192, 3, 3, 62, 204, 168, 228, 189, 56, 56, 52, 60, 64, 174, 187, 61, 251, 249, 145, 61, 45, 240, 117, 190, 165, 250, 92, 190, 87, 138, 166, 59, 31, 213, 183, 62, 219, 3, 247, 189, 40, 84, 228, 60, 139, 221, 194, 188, 177, 48, 81, 190, 205, 9, 231, 189, 80, 24, 78, 190, 214, 225, 81, 189, 180, 89, 119, 189, 188, 230, 9, 62, 190, 114, 158, 189, 203, 159, 100, 190, 100, 221, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 146, 184, 188, 18, 203, 235, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 170, 170, 63, 14, 176, 165, 191, 227, 66, 168, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {84, 18, 244, 63, 138, 185, 53, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0074/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}